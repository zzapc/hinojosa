*&---------------------------------------------------------------------*
*&  Include           ZRINV0001_CLASS
*&---------------------------------------------------------------------*

****************************************************************
* LOCAL CLASSES: Definition
****************************************************************
*===============================================================
CLASS lcl_application DEFINITION.
* PUBLICO: Los métodos de los eventos
  PUBLIC SECTION.

*   Evento para navegar
    METHODS handle_hotspot
                  FOR EVENT hotspot_click OF cl_gui_alv_grid
      IMPORTING e_row_id e_column_id es_row_no.


*   Evento para que añada o elimine botones al menu
    METHODS handle_toolbar
                  FOR EVENT toolbar OF cl_gui_alv_grid
      IMPORTING e_object e_interactive.

*   Evento para detectar accion botonera
    METHODS handle_user_command
                  FOR EVENT user_command OF cl_gui_alv_grid
      IMPORTING e_ucomm.

ENDCLASS.                    "lcl_event_receiver DEFINITION



*&---------------------------------------------------------------------*
*&       Class (Implementation)  lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application IMPLEMENTATION.

*&---------------------------------------------------------------------*
*         METHOD handle_toolbar
*----------------------------------------------------------------------*
  METHOD handle_toolbar.
*   crear inventario
    CLEAR gs_toolbar.
    MOVE  'CREAR_INV'                TO gs_toolbar-function.
    MOVE  icon_intensify             TO gs_toolbar-icon.
    MOVE  text-002                   TO gs_toolbar-quickinfo.
    MOVE  text-002                   TO gs_toolbar-text.
    MOVE space                       TO gs_toolbar-disabled.
    APPEND gs_toolbar                TO e_object->mt_toolbar.

*   Borrado de Botones Estandar:
    DELETE e_object->mt_toolbar WHERE ( function EQ '&LOCAL&APPEND'
    OR function EQ '&LOCAL&INSERT_ROW'
    OR function EQ '&LOCAL&DELETE_ROW'
    OR function EQ '&LOCAL&COPY_ROW'
    OR function EQ '&INFO'
    OR function EQ 'CAMBIAR_STATUS'
    OR function EQ 'EXPORT'
    OR function EQ 'IMPORT'
    OR function EQ 'VALIDAR'
    OR function EQ 'FINAL').


  ENDMETHOD.                    "handle_toolbar


*&---------------------------------------------------------------------*
*         METHOD handle_user_command
*----------------------------------------------------------------------*
  METHOD handle_user_command.

    CASE e_ucomm. "GV_OKCODE.
      WHEN 'CREAR_INV'.
        CLEAR: e_ucomm. " gv_werks, gv_lgort.
        CALL SCREEN '0300' STARTING AT 10 5.

      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

*&---------------------------------------------------------------------*
*         METHOD handle_hotspot
*----------------------------------------------------------------------*
  METHOD handle_hotspot.
*    DATA: wa_dato TYPE zsinv0001_grid.

    DATA: gti_pi_aux TYPE TABLE OF tipo_pos,
          wa_pi_aux  TYPE          tipo_pos,
          wa_pi      TYPE          tipo_pos.

    DATA: lt_casuistica TYPE STANDARD TABLE OF dd07v,
          wa_casuistica TYPE                   dd07v.

    TYPES: BEGIN OF tipo_matnr,
             matnr TYPE matnr,
             maktx TYPE maktx.
    TYPES: END OF tipo_matnr.
    TYPES: tty_matnr TYPE STANDARD TABLE OF tipo_matnr.
    DATA: t_matnr      TYPE         tty_matnr,
          wa_matnr     TYPE LINE OF tty_matnr,
          sw_bloqueado TYPE         flag.

    CLEAR gv_imp_calc.
    CLEAR zsinv0001_grid.

*   Leemos de la tabla la línea pulsada
    READ TABLE gti_mostrar INDEX es_row_no-row_id INTO zsinv0001_grid.
    IF sy-subrc = 0.
      PERFORM bloquear_inventario USING zsinv0001_grid-docum 'B' CHANGING sw_bloqueado.
      IF sw_bloqueado EQ c_si.
        CLEAR: lt_casuistica.
        REFRESH: lt_casuistica.

        CALL FUNCTION 'DD_DD07V_GET'
          EXPORTING
            domain_name    = 'ZCASUISTICA'
            langu          = sy-langu
            withtext       = 'X'
          TABLES
            dd07v_tab      = lt_casuistica
          EXCEPTIONS
            access_failure = 1
            OTHERS         = 2.

        IF sy-subrc = 0.
          CLEAR: gti_pi, gti_pi_aux.
          REFRESH: gti_pi, gti_pi_aux.

          SELECT * FROM ztinv_pi
            INTO TABLE gti_pi_aux
            WHERE docum    = zsinv0001_grid-docum
              AND version  = zsinv0001_grid-version.

          " Descripción material:
          SELECT matnr maktx
            INTO TABLE t_matnr
            FROM makt
            FOR ALL ENTRIES IN gti_pi_aux
            WHERE matnr = gti_pi_aux-matnr.

          CLEAR wa_pi_aux.
          LOOP AT gti_pi_aux INTO wa_pi_aux.
            CLEAR wa_pi.
            MOVE-CORRESPONDING wa_pi_aux TO wa_pi.

            " Descripción material:
            READ TABLE t_matnr INTO wa_matnr WITH KEY matnr = wa_pi-matnr.
            IF sy-subrc = 0.
              wa_pi-maktx = wa_matnr-maktx.
            ENDIF.

            " Descripción casuística:
            CLEAR wa_casuistica.
            READ TABLE lt_casuistica INTO wa_casuistica
                   WITH KEY domvalue_l  = wa_pi-casuistica
                            ddlanguage = sy-langu.

            IF wa_casuistica IS NOT INITIAL.
              wa_pi-casuistica_txt = wa_casuistica-ddtext.
            ELSE.
              CLEAR wa_pi-casuistica_txt.
            ENDIF.

            APPEND wa_pi TO gti_pi.
          ENDLOOP.
        ENDIF.
        IF zsinv0001_grid-status EQ 'G'
        OR zsinv0001_grid-status EQ 'F'.
          PERFORM impacto_economico  USING '' CHANGING gv_imp_calc.
        ENDIF.
        LEAVE TO SCREEN '0200'.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "handle_hotspot_click

ENDCLASS.                    "lcl_application IMPLEMENTATION
*&---------------------------------------------------------------------*
*&      Form  F_SUBIR_CSV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_FICH  text
*      -->P_LP_FRONT  text
*      <--P_LC_ERROR  text
*----------------------------------------------------------------------*
FORM f_subir_csv  TABLES   lt_zssd0001 TYPE ztinv0001_pi
                            USING gv_file
                            CHANGING lc_error tt_fich type ZSINV0001_PI_M_TT.

  DATA: lt_intern     TYPE TABLE OF alsmex_tabline,
        lt_intern_row TYPE TABLE OF alsmex_tabline.

  DATA: ls_zssd0001   TYPE zsinv0001_pi,
        ls_intern_row TYPE alsmex_tabline.

  DATA: lv_linea TYPE char100.

  DATA: lv_filename TYPE localfile.

  DATA:  e_intern  TYPE         kcde_intern,
         wa_intern TYPE LINE OF kcde_intern.

  DATA: lv_menge_char TYPE char30,
        lv_longi_char TYPE char30,
        pack          TYPE p DECIMALS 2.

  daTA: rt_fich type ZSINV0001_PI_M.

  CLEAR: lc_error, lv_filename, tt_fich.

  lv_filename = gv_file.

  CALL FUNCTION 'KCD_CSV_FILE_TO_INTERN_CONVERT'
    EXPORTING
      i_filename      = lv_filename
      i_separator     = ';'
    TABLES
      e_intern        = e_intern
    EXCEPTIONS
      upload_csv      = 1
      upload_filetype = 2
      OTHERS          = 3.
  IF sy-subrc <> 0.
*   Implement suitable error handling here
    lc_error = 'X'.
  ENDIF.


  CHECK lc_error IS INITIAL.
  REFRESH lt_zssd0001.
  REFRESH lt_intern_row.
  LOOP AT e_intern INTO wa_intern.
    AT NEW row.
      CLEAR ls_zssd0001.
    ENDAT.
    CASE wa_intern-col.
      WHEN 1. MOVE wa_intern-value TO ls_zssd0001-tipo_reg.
      WHEN 2. MOVE wa_intern-value TO ls_zssd0001-matnr.
      WHEN 3. MOVE space           TO ls_zssd0001-maktx.
      WHEN 4. MOVE wa_intern-value TO ls_zssd0001-werks.
      WHEN 5. MOVE wa_intern-value TO ls_zssd0001-lgort.
      WHEN 6. MOVE wa_intern-value TO ls_zssd0001-charg.
      WHEN 7.
        MOVE wa_intern-value TO lv_menge_char.
        CALL FUNCTION 'MOVE_CHAR_TO_NUM'
          EXPORTING
            chr             = lv_menge_char
          IMPORTING
            num             = pack
          EXCEPTIONS
            convt_no_number = 1
            convt_overflow  = 2
            OTHERS          = 3.
        IF sy-subrc EQ 0.
          ls_zssd0001-menge = pack.
        ENDIF.
      WHEN 8.
        MOVE wa_intern-value TO lv_menge_char.
        CALL FUNCTION 'MOVE_CHAR_TO_NUM'
          EXPORTING
            chr             = lv_menge_char
          IMPORTING
            num             = pack
          EXCEPTIONS
            convt_no_number = 1
            convt_overflow  = 2
            OTHERS          = 3.
        IF sy-subrc EQ 0.
          ls_zssd0001-longitud = pack.
        ENDIF.
      WHEN 9.
        MOVE wa_intern-value TO ls_zssd0001-contado.
      WHEN 10.
        MOVE wa_intern-value TO ls_zssd0001-existe.
    ENDCASE.
    AT END OF row.
      APPEND ls_zssd0001 TO lt_zssd0001.
    ENDAT.
  ENDLOOP.
*  LOOP AT e_intern INTO wa_intern.
*    CLEAR ls_intern_row.
*    ls_intern_row-row = wa_intern-row.
*    COLLECT ls_intern_row INTO lt_intern_row.
*  ENDLOOP.
*
*  REFRESH lt_zssd0001.
*
*  LOOP AT lt_intern_row INTO ls_intern_row.
*    CLEAR: ls_zssd0001, lv_linea.
*
*    LOOP AT e_intern INTO wa_intern WHERE row = ls_intern_row-row.
*      IF lv_linea IS INITIAL.
*        lv_linea = wa_intern-value.
*      ELSE.
*        CONCATENATE lv_linea wa_intern-value INTO lv_linea SEPARATED BY ';'.
*      ENDIF.
*    ENDLOOP.
*
*    SPLIT lv_linea AT ';' INTO ls_zssd0001-tipo_reg
*                               ls_zssd0001-matnr
*                               ls_zssd0001-maktx
*                               ls_zssd0001-werks
*                               ls_zssd0001-lgort
*                               ls_zssd0001-charg
*                               lv_menge_char
*                               lv_longi_char
**                              ls_zssd0001-longitud
*                               ls_zssd0001-contado
*                               ls_zssd0001-existe.
*
*    IF lv_menge_char IS NOT INITIAL.
*      CALL FUNCTION 'MOVE_CHAR_TO_NUM'
*        EXPORTING
*          chr             = lv_menge_char
*        IMPORTING
*          num             = pack
*        EXCEPTIONS
*          convt_no_number = 1
*          convt_overflow  = 2
*          OTHERS          = 3.
*      IF sy-subrc <> 0.
**       Implement suitable error handling here
*      ELSE.
*        ls_zssd0001-menge = pack.
*      ENDIF.
*
*    ENDIF.
*    IF lv_longi_char IS NOT INITIAL.
*      CALL FUNCTION 'MOVE_CHAR_TO_NUM'
*        EXPORTING
*          chr             = lv_longi_char
*        IMPORTING
*          num             = pack
*        EXCEPTIONS
*          convt_no_number = 1
*          convt_overflow  = 2
*          OTHERS          = 3.
*      IF sy-subrc <> 0.
**       Implement suitable error handling here
*      ELSE.
*        ls_zssd0001-longitud = pack.
*      ENDIF.
*    ENDIF.
*    APPEND ls_zssd0001 TO lt_zssd0001.
*  ENDLOOP.

ENDFORM.                    " F_SUBIR_CSV
