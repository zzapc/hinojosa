
class ZCL_SI_DEFRO_M2S_INB definition
  public
  create public .

public section.

  interfaces ZII_SI_DEFRO_M2S_INB .
protected section.
private section.
endclass. "ZCL_SI_DEFRO_M2S_INB definition
class ZCL_SI_DEFRO_M2S_INB implementation.
METHOD zii_si_defro_m2s_inb~si_defro_m2s_inb.

  DATA: wa_row           TYPE zdt_defro_l,
        t_ztpp0030       TYPE TABLE OF ztpp0030,
        wa_ztpp0030      TYPE ztpp0030,
        t_ztpp0031       TYPE TABLE OF ztpp0031,
        wa_ztpp0031      TYPE ztpp0031,
        wa_observaciones TYPE zdt_defro_obs_linea.

  DATA: i_string      TYPE  char30,
        ld_e_float    TYPE f,
        ld_e_dec      TYPE string,
        ld_e_decimals TYPE i.

  DATA: lv_extnumber TYPE balnrext,
        t_return     TYPE TABLE OF bapiret2,
        wa_return    TYPE bapiret2.

* variables envio mail.
  DATA: lv_mail TYPE xfeld.

  DATA: lt_addr        TYPE bcsy_smtpa,
        lo_send_email  TYPE REF TO cl_bcs,
        lo_document    TYPE REF TO cl_document_bcs,
        lo_recipient   TYPE REF TO if_recipient_bcs,
        lv_sent_to_all TYPE os_boolean,
        lo_sender      TYPE REF TO cl_cam_address_bcs,
        lv_sender      TYPE adr6-smtp_addr,
        lv_subject     TYPE so_obj_des,
        lt_message     TYPE soli_tab,
        ls_message     TYPE soli.
*------------------------------------------------------------------------------------------


  DATA(o_log) = NEW zcl_ap_log( object = 'MES_DEBRO'
                                report = 'ZCL_SI_DEFRO_MS2_INB'
                                clave  = zcl_ap_proxy=>GET_MSGGUID( ) ).

* recuperamos los destinatios del mail en caso de que la interface genere errores.
  SELECT * FROM ztmes_mail
    INTO TABLE @DATA(t_mail)
    WHERE interface = 'PLAN'.


  LOOP AT input-mt_defro-row INTO wa_row.
    o_log->log( msgty = 'I'
               message  = 'Inicio proceso'
               msgv1    = wa_row-centro
           msgv2    = wa_row-material
           msgv3    = wa_row-num_lote_sap
           msgv4    = wa_row-rolo_mes ).

    CLEAR: wa_ztpp0030.
*
    wa_ztpp0030-werks =  wa_row-centro.
    wa_ztpp0030-aufnr = |{ wa_row-ord_fab ALPHA = IN }|.
    wa_ztpp0030-matnr = |{ wa_row-material ALPHA = IN }|.
    wa_ztpp0030-charg = wa_row-num_lote_sap.
    wa_ztpp0030-sin_defectos = wa_row-sin_defectos.


*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*      EXPORTING
*        input  = wa_row-ord_fab
*      IMPORTING
*        output = wa_ztpp0030-aufnr.


*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*      EXPORTING
*        input  = wa_row-material
*      IMPORTING
*        output = wa_ztpp0030-matnr.


    IF wa_row-sin_defectos = ''.
      wa_ztpp0030-flag_defectos = 'X'.
    ELSE.
      CLEAR: wa_ztpp0030-flag_defectos.
    ENDIF.

    wa_ztpp0030-cabo_lt = wa_row-cabo_lt.
    wa_ztpp0030-cabo_lc = wa_row-cabo_lc.
    wa_ztpp0030-sin_cabo = wa_row-sin_cabo.
    wa_ztpp0030-defecto1 = wa_row-defecto1.
    wa_ztpp0030-defecto2 = wa_row-defecto2.
    wa_ztpp0030-defecto3 = wa_row-defecto3.
    wa_ztpp0030-defecto1_lt = wa_row-defecto1_lt.
    wa_ztpp0030-defecto2_lt = wa_row-defecto2_lt.
    wa_ztpp0030-defecto3_lt = wa_row-defecto3_lt.


    i_string = wa_row-defecto_ancho_lt.

    CALL FUNCTION 'C14DG_CHAR_NUMBER_CONVERSION'
      EXPORTING
        i_string                   = i_string
      IMPORTING
        e_float                    = ld_e_float
        e_dec                      = ld_e_dec
        e_decimals                 = ld_e_decimals
      EXCEPTIONS
        wrong_characters           = 1
        first_character_wrong      = 2
        arithmetic_sign            = 3
        multiple_decimal_separator = 4
        thousandsep_in_decimal     = 5
        thousand_separator         = 6
        number_too_big             = 7
        OTHERS                     = 8.
    IF sy-subrc <> 0.
*       Implement suitable error handling here
    ELSE.
      MOVE ld_e_dec TO wa_ztpp0030-defecto_ancho_lt. "wa_row-defecto_ancho_lt.
    ENDIF.


    wa_ztpp0030-bob_pulper_total = wa_row-bob_pulper_total.
    wa_ztpp0030-bob_pulper_parcial = wa_row-bob_pulper_parcial.
    wa_ztpp0030-defecto1_c = wa_row-defecto1_c.
    wa_ztpp0030-defecto2_c = wa_row-defecto2_c.
    wa_ztpp0030-defecto3_c = wa_row-defecto3_c.

    i_string =  wa_row-defecto_ancho_c.

    CALL FUNCTION 'C14DG_CHAR_NUMBER_CONVERSION'
      EXPORTING
        i_string                   = i_string
      IMPORTING
        e_float                    = ld_e_float
        e_dec                      = ld_e_dec
        e_decimals                 = ld_e_decimals
      EXCEPTIONS
        wrong_characters           = 1
        first_character_wrong      = 2
        arithmetic_sign            = 3
        multiple_decimal_separator = 4
        thousandsep_in_decimal     = 5
        thousand_separator         = 6
        number_too_big             = 7
        OTHERS                     = 8.
    IF sy-subrc <> 0.
*       Implement suitable error handling here
    ELSE.
      MOVE ld_e_dec TO  wa_ztpp0030-defecto_ancho_c.
    ENDIF.


    wa_ztpp0030-defecto1_lc = wa_row-defecto1_lc.
    wa_ztpp0030-defecto2_lc = wa_row-defecto2_lc.
    wa_ztpp0030-defecto3_lc = wa_row-defecto3_lc.

    i_string =  wa_row-defecto_ancho_lc.

    CALL FUNCTION 'C14DG_CHAR_NUMBER_CONVERSION'
      EXPORTING
        i_string                   = i_string
      IMPORTING
        e_float                    = ld_e_float
        e_dec                      = ld_e_dec
        e_decimals                 = ld_e_decimals
      EXCEPTIONS
        wrong_characters           = 1
        first_character_wrong      = 2
        arithmetic_sign            = 3
        multiple_decimal_separator = 4
        thousandsep_in_decimal     = 5
        thousand_separator         = 6
        number_too_big             = 7
        OTHERS                     = 8.
    IF sy-subrc <> 0.
*       Implement suitable error handling here
    ELSE.
      MOVE ld_e_dec TO  wa_ztpp0030-defecto_ancho_lc.
    ENDIF.


    wa_ztpp0030-id_rollo_mes = wa_row-rolo_mes.

    CASE wa_row-operacion.
      WHEN 'A'. " alta de defectos de rollo.
        wa_ztpp0030-erdat = sy-datum.
      WHEN 'M'. "modificación de defectos de rollo.
        wa_ztpp0030-aedat = sy-datum.
    ENDCASE.

    APPEND wa_ztpp0030 TO t_ztpp0030.


    wa_ztpp0031-aufnr = wa_ztpp0030-aufnr.
    wa_ztpp0031-matnr = wa_ztpp0030-matnr.
    wa_ztpp0031-charg =  wa_row-num_lote_sap.
    wa_ztpp0031-tp_ubic = ''. "   ' '  Observaciones POPE
    wa_ztpp0031-werks = wa_row-centro.

    LOOP AT wa_row-observaciones-row INTO wa_observaciones.
      wa_ztpp0031-seq = sy-tabix.
      wa_ztpp0031-tdline = wa_observaciones-linea.
      APPEND wa_ztpp0031 TO t_ztpp0031.
    ENDLOOP.
  ENDLOOP.

  IF t_ztpp0030[] IS NOT INITIAL.

* CMS - 65394 - 17.02.2021 - si se notifica un defecto pulper total,
* 1. Obtener lote de inspección.
* 2. Informar caract. Humedad = 9
* 3. Asignar DE = P

    TRY.
* Leo el primer y ÚNICO registro de la tabla t_ztpp0030.
        DATA(ls_datos_def) = t_ztpp0030[ 1 ].

        IF ls_datos_def-bob_pulper_total = 'X'.


* 1.Obtener lote de inspección.
          DATA(l_prueflos) = zclpp_tratamiento_lote_inspec=>get_lote_insp_desde_lote(
                          i_werks = ls_datos_def-werks
                          i_charg = ls_datos_def-charg
                          ).
* Control de errores
          IF l_prueflos IS INITIAL.
            lv_mail = 'X'.

*     Error en la actualización de la tabla &
            CLEAR: lv_extnumber.
            lv_extnumber = |Lote SAP { ls_datos_def-charg }, Centro { ls_datos_def-werks } sin lote de inspección en estado LIB.|.
            wa_return-type = 'E'.
            wa_return-id = 'ZPP'.
            wa_return-number = '364'. "Lote SAP & , centro & sin lote de inspección en estado LIB.
            wa_return-message_v1 = 'ztpp0030'.
            APPEND wa_return TO t_return .

            CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
              EXPORTING
                objeto    = 'ZSAP_MES'
                subobjeto = 'ZDECISION_EMPLEO'
                mensajes  = t_return[]
                extnumber = lv_extnumber.
          ELSE.

* 2.Informar caract.humedad = 9
            CALL METHOD zclpp_tratamiento_lote_inspec=>asignar_humedad_9
              EXPORTING
                i_prueflos = l_prueflos
              IMPORTING
                ot_return  = DATA(lt_return).
* Control de errores
            IF line_exists( lt_return[ type = 'E' ] ).

            ENDIF.


* 3.Informar DE = P
            CALL METHOD zclpp_tratamiento_lote_inspec=>asignar_de_p
              EXPORTING
                i_prueflos = l_prueflos
                i_werks    = ls_datos_def-werks
              IMPORTING
                os_return  = DATA(ls_return).

* Control de errores
            IF ls_return-type = 'E'.

            ENDIF.

          ENDIF.

        ENDIF.

      CATCH cx_root.
    ENDTRY.

  ENDIF.


  MODIFY ztpp0030 FROM TABLE t_ztpp0030.
  IF sy-subrc <> 0.
    lv_mail = 'X'.

*     Error en la actualización de la tabla &
    CLEAR: lv_extnumber.
    CONCATENATE 'Orden' wa_row-ord_fab 'Lote SAP' wa_row-num_lote_sap 'Material' wa_row-material
    INTO lv_extnumber SEPARATED BY space.

    wa_return-type = 'E'.
    wa_return-id = 'ZPP'.
    wa_return-number = '362'.
    wa_return-message_v1 = 'ztpp0030'.
    APPEND wa_return TO t_return .

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZSAP_MES'
        subobjeto = 'ZDECISION_EMPLEO'
        mensajes  = t_return[]
        extnumber = lv_extnumber.

  ENDIF.

  IF t_ztpp0031[] IS NOT INITIAL.
    MODIFY ztpp0031 FROM TABLE t_ztpp0031.
    IF sy-subrc <> 0.
      lv_mail = 'X'.

*     Error en la actualización de la tabla &
      CLEAR: lv_extnumber.
      CONCATENATE 'Orden' wa_row-ord_fab 'Lote SAP' wa_row-num_lote_sap 'Material' wa_row-material
      INTO lv_extnumber SEPARATED BY space.

      wa_return-type = 'E'.
      wa_return-id = 'ZPP'.
      wa_return-number = '362'.
      wa_return-message_v1 = 'ztpp0031'.
      APPEND wa_return TO t_return .

      CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
        EXPORTING
          objeto    = 'ZSAP_MES'
          subobjeto = 'ZDECISION_EMPLEO'
          mensajes  = t_return[]
          extnumber = lv_extnumber.
    ENDIF.
  ENDIF.

  LOOP AT t_return ASSIGNING FIELD-SYMBOL(<msg>).
    IF <msg>-message IS INITIAL.
      MESSAGE ID <msg>-id TYPE 'S' NUMBER <msg>-number
              WITH <msg>-message_v1 <msg>-message_v2 <msg>-message_v3 <msg>-message_v4
              INTO <msg>-message.
    ENDIF.

    o_log->log( msgid    = <msg>-id
               msgty    = <msg>-type
               msgno    = <msg>-number
               message  = <msg>-message
               msgv1    = wa_row-centro
               msgv2    = wa_row-material
               msgv3    = wa_row-num_lote_sap
               msgv4    = wa_row-rolo_mes ).
  ENDLOOP.
  IF sy-subrc NE 0.
    o_log->log( msgty = 'I'
               message  = 'Fin proceso'
               msgv1    = wa_row-centro
           msgv2    = wa_row-material
           msgv3    = wa_row-num_lote_sap
           msgv4    = wa_row-rolo_mes ).
  ENDIF.

  IF  lv_mail = 'X'.
    READ TABLE t_mail INTO DATA(ls_mails) WITH KEY werks = wa_row-centro.
    IF sy-subrc = 0.

      IF ls_mails-mail_1 NE space.
        APPEND ls_mails-mail_1 TO lt_addr.
      ENDIF.
      IF ls_mails-mail_2 NE space.
        APPEND ls_mails-mail_2 TO lt_addr.
      ENDIF.
      IF ls_mails-mail_3 NE space.
        APPEND ls_mails-mail_3 TO lt_addr.
      ENDIF.
      IF ls_mails-mail_4 NE space.
        APPEND ls_mails-mail_4 TO lt_addr.
      ENDIF.
      IF ls_mails-mail_5 NE space.
        APPEND ls_mails-mail_5 TO lt_addr.
      ENDIF.

*     Inicialización de la clase
      lo_send_email = cl_bcs=>create_persistent( ).


*     cuerpo del mail
      CLEAR: lt_message.
      REFRESH: lt_message.
      CONCATENATE 'Se ha producido un error en la interface MES  SAP (PLAN) a las' sy-uzeit 'del' sy-datum
        INTO ls_message SEPARATED BY space.
      APPEND ls_message TO lt_message.


*     Crear documento
      lv_subject = 'Error integración MES  SAP (PLAN)'.

      lo_document =  cl_document_bcs=>create_document( i_type    =  'HTM'
                                                       i_subject =  lv_subject
                                                       i_text    =  lt_message ).
*     Enviar documento al email
      lo_send_email->set_document( lo_document ).

*     Añadir remitente
*      SELECT SINGLE * FROM usr21
*        INTO @DATA(wa_usr21)
*        WHERE bname = @sy-uname.
*
*      IF sy-subrc = 0.
*        SELECT SINGLE smtp_addr FROM adr6
*          INTO  lv_sender
*          WHERE addrnumber = wa_usr21-addrnumber AND
*          persnumber = wa_usr21-persnumber.
*      ENDIF.

      lv_sender = 'sap@hinojosa.es'.

      lo_sender = cl_cam_address_bcs=>create_internet_address( lv_sender  ).
      lo_send_email->set_sender( i_sender = lo_sender ).

*     Añadir destinatarios al email
      DATA l_emails TYPE string.
      LOOP AT lt_addr ASSIGNING FIELD-SYMBOL(<fs_addr>).
        lo_recipient = cl_cam_address_bcs=>create_internet_address( <fs_addr> ).
        lo_send_email->add_recipient( i_recipient = lo_recipient ).
        __add_lista l_emails <fs_addr>.
      ENDLOOP.


*     Enviar email
      TRY.
          lv_sent_to_all = lo_send_email->send( i_with_error_screen = 'X' ).
        CATCH cx_send_req_bcs .
      ENDTRY.
      o_log->log( p1 = 'Se ha enviado mail a ' p2 = l_emails msgty = 'I' ).
      COMMIT WORK.
    ELSE.
      o_log->log( p1 = 'No se envian errores por mail porque no se encuentran destinatarios' msgty = 'E' ).
    ENDIF.
  ENDIF.

ENDMETHOD.
endclass. "ZCL_SI_DEFRO_M2S_INB definition
endclass. "ZCL_SI_DEFRO_M2S_INB implementation
