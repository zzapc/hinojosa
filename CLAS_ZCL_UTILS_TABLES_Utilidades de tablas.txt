
class ZCL_UTILS_TABLES definition
  public
  inheriting from ZCL_UTILS
  final
  create public .

public section.

  class-data _C_MSG_LABEL type SYST_MSGID read-only value 'ZCL_UTILS_TABLES' ##NO_TEXT.

  class-methods S_GET_STRUCTURE_DESC
    importing
      !I_STRUCTURE type ANY
    returning
      value(E_COLUMNS) type DDFIELDS
    raising
      ZCX_EXCEPTION .
  class-methods S_GET_STRUCTURE_NAME
    importing
      !I_STRUCTURE type ANY
    returning
      value(E_NAME) type DD02L-TABNAME
    exceptions
      NO_DDIC_NAME .
protected section.
private section.
endclass. "ZCL_UTILS_TABLES definition
class ZCL_UTILS_TABLES implementation.
  METHOD s_get_structure_desc.

**********************************************************************
* Declaración de variables locales
**********************************************************************

** Datos

    DATA: lo_data       TYPE REF TO data,

          lo_data_desc  TYPE REF TO cl_abap_datadescr,
          lo_table      TYPE REF TO cl_abap_tabledescr,
          lo_structure  TYPE REF TO cl_abap_structdescr,
          ls_t_strdesc  TYPE abap_table_keydescr_tab,

          lv_msg TYPE scx_attrname.

** Fieldsymbols

    FIELD-SYMBOLS: <ft_table> TYPE ANY TABLE.

**********************************************************************
* Lógica
**********************************************************************

** Asignaciones

  GET REFERENCE OF i_structure INTO lo_data.

  lo_data_desc ?= cl_abap_datadescr=>describe_by_data( p_data = i_structure ).

  CASE lo_data_desc->kind.
    WHEN cl_abap_datadescr=>kind_struct. "ESTRUCTURA

      lo_structure ?= lo_data_desc.

    WHEN cl_abap_datadescr=>kind_table. "TABLA

      lo_table ?= lo_data_desc.
      IF ( lo_table IS BOUND ).
        lo_structure ?= lo_table->get_table_line_type( ).
      ELSE.
        MOVE text-001 TO lv_msg.
        zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_tables=>_c_msg_label i_message = lv_msg ) ).
      ENDIF.

  WHEN OTHERS.
      MOVE text-001 TO lv_msg.
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_tables=>_c_msg_label i_message = lv_msg ) ).
  ENDCASE.

*  lo_structure ?= cl_abap_structdescr=>describe_by_data_ref( p_data_ref = lo_data ).

  IF ( lo_structure Is BOUND ).

    lo_structure->get_ddic_field_list(
      EXPORTING
        p_langu                  = sy-langu
        p_including_substructres = abap_false
      RECEIVING
        p_field_list             = e_columns
      EXCEPTIONS
        not_found                = 1
        no_ddic_type             = 2
        OTHERS                   = 3
    ).
    IF sy-subrc <> 0.
      MOVE text-001 TO lv_msg.
      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_tables=>_c_msg_label i_message = lv_msg ) ).
    ENDIF.

  ELSE.

    MOVE text-001 TO lv_msg.
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_tables=>_c_msg_label i_message = lv_msg ) ).

  ENDIF.

ENDMETHOD.
  METHOD s_get_structure_name.

**********************************************************************
* Declaración de variables locales
**********************************************************************

** Datos

    DATA: lo_ref        TYPE REF TO cl_abap_typedescr,
          lo_data_desc  TYPE REF TO cl_abap_datadescr,

          lo_data       TYPE REF TO data,
          lo_table      TYPE REF TO cl_abap_tabledescr,
          lo_structure  TYPE REF TO cl_abap_structdescr,
          ls_t_strdesc  TYPE abap_table_keydescr_tab.

** Fieldsymbols



**********************************************************************
* Lógica
**********************************************************************

** Asignaciones

    GET REFERENCE OF i_structure INTO lo_data.

    lo_data_desc ?= cl_abap_datadescr=>describe_by_data( p_data = i_structure ).

     CASE lo_data_desc->kind.
      WHEN cl_abap_datadescr=>kind_struct. "ESTRUCTURA
        e_name = lo_data_desc->get_relative_name( ).
        IF ( e_name IS INITIAL ).
          RAISE no_ddic_name.
        ENDIF.
      WHEN cl_abap_datadescr=>kind_table. "TABLA
        lo_table ?= lo_data_desc.
        IF ( lo_table IS BOUND ).
          lo_structure ?= lo_table->get_table_line_type( ).
          IF ( lo_structure IS BOUND ).
            e_name = lo_structure->get_relative_name( ).
          ELSE.
            RAISE no_ddic_name.
          ENDIF.
        ELSE.
          RAISE no_ddic_name.
        ENDIF.
      WHEN OTHERS.
        RAISE no_ddic_name.
    ENDCASE.

  ENDMETHOD.
