
class ZCL_SEARCH_DPC definition
  public
  inheriting from /IWBEP/CL_MGW_PUSH_ABS_DATA
  final
  create public .

public section.

  class-methods FILTROS_OR
    importing
      !IV_INSTANCIA type ref to /IWBEP/CL_MGW_PUSH_ABS_DATA
      !IV_DATA type DATA optional
    exporting
      !ET_FILTER_SELECT_OPTIONS_OR type /IWBEP/T_MGW_SELECT_OPTION
      !ET_FILTER_SELECT_OPTIONS_AND type /IWBEP/T_MGW_SELECT_OPTION .
  class-methods SEARCH_OR
    importing
      !IV_SEARCH type STRING
      !IV_DATA type DATA
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IV_INSTANCIA type ref to /IWBEP/CL_MGW_PUSH_ABS_DATA
    exporting
      !ET_FILTER_SELECT_OPTIONS_OR type /IWBEP/T_MGW_SELECT_OPTION .
  class-methods SORT_STRING
    importing
      !IV_INSTANCIA type ref to /IWBEP/CL_MGW_PUSH_ABS_DATA
    returning
      value(ER_SORTER) type ABAP_SORTORDER_TAB .
  class-methods FILTRO_MAYUSCULAS
    importing
      value(IV_DATA) type DATA
    changing
      value(CT_FILTER_SELECT_OPTIONS) type /IWBEP/T_MGW_SELECT_OPTION .
  PROTECTED SECTION.

    METHODS check_subscription_authority
        REDEFINITION .
private section.
endclass. "ZCL_SEARCH_DPC definition
class ZCL_SEARCH_DPC implementation.
  METHOD check_subscription_authority.
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_not_impl_exc
      EXPORTING
        textid = /iwbep/cx_mgw_not_impl_exc=>method_not_implemented
        method = 'CHECK_SUBSCRIPTION_AUTHORITY'.
  ENDMETHOD.
  METHOD filtro_mayusculas.
    DATA: lt_components TYPE TABLE OF abap_compdescr.
    DATA: lo_strucdescr TYPE REF TO cl_abap_structdescr.
    DATA: ls_option TYPE /iwbep/s_cod_select_option,
          lt_option TYPE /iwbep/t_cod_select_options.

    lo_strucdescr ?= cl_abap_typedescr=>describe_by_data( iv_data ).
    lt_components = lo_strucdescr->components.

    LOOP AT ct_filter_select_options ASSIGNING FIELD-SYMBOL(<ls_filter>).
      IF lt_components[ name = <ls_filter>-property ]-type_kind = 'C'.
        CLEAR lt_option.
        LOOP AT <ls_filter>-select_options ASSIGNING FIELD-SYMBOL(<ls_option>).
          APPEND INITIAL LINE TO lt_option ASSIGNING FIELD-SYMBOL(<ls_option_may>).

          MOVE-CORRESPONDING <ls_option> TO <ls_option_may>.
          TRANSLATE <ls_option_may>-low TO UPPER CASE.

        ENDLOOP.
        APPEND LINES OF lt_option TO <ls_filter>-select_options.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD filtros_or.

    DATA ls_option_temp TYPE LINE OF /iwbep/t_mgw_select_option. DATA ls_option_temp2 TYPE LINE OF /iwbep/t_mgw_select_option.
    DATA: lt_components TYPE TABLE OF abap_compdescr.
    DATA: lo_strucdescr TYPE REF TO cl_abap_structdescr.
    DATA: lv_valor       TYPE ddoption,
          num_caracteres TYPE i,
          long_campo     TYPE i,
          lv_operador    TYPE string.
    DATA: lt_option TYPE /iwbep/t_cod_select_options.

    DATA(ls_request) = iv_instancia->mr_request_details->technical_request.
    DATA(lt_filter) = ls_request-filter_expressions.
    DATA(lt_function) = ls_request-filter_functions.

    lo_strucdescr ?= cl_abap_typedescr=>describe_by_data( iv_data ).
    lt_components = lo_strucdescr->components.

    LOOP AT lt_filter INTO DATA(ls_filter) WHERE lop_id IS NOT INITIAL
                                            AND rop_id IS NOT INITIAL
                                            AND operator = 'or'.
      CLEAR: ls_option_temp, ls_option_temp2.

      CASE ls_filter-lop_type.
        WHEN 'B'. "Recuperamos primer registro del filtro.
          READ TABLE lt_filter INTO DATA(ls_filter_ini) WITH KEY expression_id = ls_filter-lop_id lop_type = 'P'.
*          IF sy-subrc NE 0.
*            READ TABLE lt_filter INTO ls_filter_ini WITH KEY expression_id = ls_filter-rop_id lop_type = 'P'.
*          ENDIF.
          IF sy-subrc = 0.
            num_caracteres = strlen( ls_filter_ini-r_oprnd_int ).
            long_campo = lt_components[ name = ls_filter_ini-l_oprnd_int ]-length.
            long_campo = long_campo / 2. "La longitud del campo es el doble del real
            IF num_caracteres <= long_campo - 2.
              ls_filter_ini-r_oprnd_int = |{ '*' && ls_filter_ini-r_oprnd_int && '*' }|.
              ls_filter_ini-operator = 'CP'.
            ELSEIF num_caracteres <= long_campo - 1.
              ls_filter_ini-r_oprnd_int = |{ ls_filter_ini-r_oprnd_int && '*' }|.
              ls_filter_ini-operator = 'CP'.
            ELSEIF num_caracteres <= long_campo.
              ls_filter_ini-r_oprnd_int = |{ ls_filter_ini-r_oprnd_int }|.
              ls_filter_ini-operator = 'EQ'.
            ELSE.
              CONTINUE.
            ENDIF.

*            ls_filter_ini-r_oprnd_int = '*' && ls_filter_ini-r_oprnd_int && '*'.
*            ls_filter_ini-operator = 'CP'.
            ls_option_temp-property = ls_filter_ini-l_oprnd_int.
            ls_option_temp-select_options = VALUE #( ( sign = 'I' option = |{ ls_filter_ini-operator CASE = UPPER }| low = ls_filter_ini-r_oprnd_int ) ). "Recuperamos primer registro del filtro.
            READ TABLE lt_filter INTO DATA(ls_filter_fin) WITH KEY expression_id = ls_filter-rop_id
                                                                   lop_type = 'P'.
            IF sy-subrc = 0.

              num_caracteres = strlen( ls_filter_fin-r_oprnd_int ).
              long_campo = lt_components[ name = ls_filter_fin-l_oprnd_int ]-length.
              long_campo = long_campo / 2. "La longitud del campo es el doble del real
              IF num_caracteres <= long_campo - 2.
                ls_filter_fin-r_oprnd_int = |{ '*' && ls_filter_fin-r_oprnd_int && '*' }|.
                ls_filter_fin-operator = 'CP'.
              ELSEIF num_caracteres <= long_campo - 1.
                ls_filter_fin-r_oprnd_int = |{ ls_filter_fin-r_oprnd_int && '*' }|.
                ls_filter_fin-operator = 'CP'.
              ELSEIF num_caracteres <= long_campo.
                ls_filter_fin-r_oprnd_int = |{ ls_filter_fin-r_oprnd_int }|.
                ls_filter_fin-operator = 'EQ'.
              ELSE.
                CONTINUE.
              ENDIF.

*              ls_filter_fin-r_oprnd_int = '*' && ls_filter_fin-r_oprnd_int && '*'.
*              ls_filter_fin-operator = 'CP'.
              ls_option_temp2-property = ls_filter_fin-l_oprnd_int.
              ls_option_temp2-select_options = VALUE #( ( sign = 'I' option = |{ ls_filter_fin-operator CASE = UPPER }| low = ls_filter_fin-r_oprnd_int ) ).
            ENDIF.

            IF ls_filter_ini-l_oprnd_int = ls_filter_fin-l_oprnd_int. "Añadimos el registro and
              APPEND INITIAL LINE TO et_filter_select_options_and ASSIGNING FIELD-SYMBOL(<ls_filter_or_and>).
              READ TABLE et_filter_select_options_and ASSIGNING FIELD-SYMBOL(<ls_filter_or_and_2>) WITH KEY property = ls_filter_ini-l_oprnd_int.
            ELSE. "Añadimos el registro OR
              APPEND INITIAL LINE TO et_filter_select_options_or ASSIGNING <ls_filter_or_and>.
              READ TABLE et_filter_select_options_or ASSIGNING <ls_filter_or_and_2> WITH KEY property = ls_filter_ini-l_oprnd_int.
            ENDIF.

            IF sy-subrc NE 0.
              <ls_filter_or_and> = ls_option_temp.

              APPEND INITIAL LINE TO et_filter_select_options_or ASSIGNING <ls_filter_or_and>. <ls_filter_or_and> = ls_option_temp2.
            ELSE.
              APPEND INITIAL LINE TO <ls_filter_or_and>-select_options ASSIGNING FIELD-SYMBOL(<ls_sele>).
              <ls_sele> = ls_option_temp-select_options[ 1 ].
              APPEND INITIAL LINE TO <ls_filter_or_and>-select_options ASSIGNING <ls_sele>.
              <ls_sele> = ls_option_temp2-select_options[ 1 ].
            ENDIF.
          ENDIF.
        WHEN 'F'.
          READ TABLE lt_function INTO DATA(ls_function) WITH KEY function_id = ls_filter-expression_id.
          IF sy-subrc = 0.
            LOOP AT ls_function-param_tab INTO DATA(ls_param).
              CASE ls_param-param_type.
                WHEN 'P'. ls_option_temp-property = ls_param-param_int. WHEN 'C'. lv_operador = 'CP'. CASE ls_function-function.
                WHEN 'substringof'.
                  lv_valor = '*' && ls_param-param_int && '*'.
                WHEN 'endswith'.
                  lv_valor = '*' && ls_param-param_int.
                WHEN 'startwith'.
                  lv_valor = ls_param-param_int && '*'.
              ENDCASE.
              ls_option_temp-select_options = VALUE #( ( sign = 'I' option = lv_operador low = lv_valor ) ).
          ENDCASE.
        ENDLOOP. "Añadimos el registro AND
        APPEND INITIAL LINE TO et_filter_select_options_and ASSIGNING <ls_filter_or_and>.
        READ TABLE et_filter_select_options_and ASSIGNING <ls_filter_or_and_2> WITH KEY property = <ls_filter_or_and>-property.
        IF sy-subrc NE 0.
          <ls_filter_or_and> = ls_option_temp.
        ELSE.
          <ls_filter_or_and_2> = ls_option_temp.
        ENDIF.
      ENDIF.
  ENDCASE.
ENDLOOP.
LOOP AT lt_filter INTO ls_filter WHERE lop_id IS NOT INITIAL AND rop_id IS NOT INITIAL AND
operator = 'and'.
  CLEAR: ls_option_temp, ls_option_temp2.
  CASE ls_filter-lop_type.

    WHEN 'B'. "Recuperamos primer registro del filtro.
      READ TABLE lt_filter INTO ls_filter_ini WITH KEY expression_id = ls_filter-lop_id lop_type = 'P'.
      IF sy-subrc NE 0.
        READ TABLE lt_filter INTO ls_filter_ini WITH KEY expression_id = ls_filter-rop_id lop_type = 'P'.
      ENDIF.
      IF sy-subrc = 0.
        ls_option_temp-property = ls_filter_ini-l_oprnd_int.
        ls_option_temp-select_options = VALUE #( ( sign = 'I' option = |{ ls_filter_ini-operator CASE = UPPER }| low = ls_filter_ini-r_oprnd_int ) ). "Recuperamos primer registro del filtro.
        READ TABLE lt_filter INTO ls_filter_fin WITH KEY expression_id = ls_filter-rop_id lop_type = 'P'.
        IF sy-subrc = 0.
          ls_option_temp2-property = ls_filter_fin-l_oprnd_int.
          ls_option_temp2-select_options = VALUE #( ( sign = 'I' option = |{ ls_filter_fin-operator CASE = UPPER }| low = ls_filter_fin-r_oprnd_int ) ).
        ENDIF.

        READ TABLE et_filter_select_options_and ASSIGNING <ls_filter_or_and_2> WITH KEY property = ls_filter_ini-l_oprnd_int.
        IF sy-subrc NE 0.
          APPEND INITIAL LINE TO et_filter_select_options_and ASSIGNING <ls_filter_or_and>.
          <ls_filter_or_and> = ls_option_temp.

        ELSE.
          APPEND INITIAL LINE TO <ls_filter_or_and_2>-select_options ASSIGNING <ls_sele>.
          <ls_sele> = ls_option_temp-select_options[ 1 ].

        ENDIF.

        READ TABLE et_filter_select_options_and ASSIGNING <ls_filter_or_and_2> WITH KEY property = ls_filter_fin-l_oprnd_int.
        IF sy-subrc <> 0.
          APPEND INITIAL LINE TO et_filter_select_options_and ASSIGNING <ls_filter_or_and>.
          <ls_filter_or_and> = ls_option_temp2.
        ELSE.
          APPEND INITIAL LINE TO <ls_filter_or_and_2>-select_options ASSIGNING <ls_sele>.
          IF ls_option_temp2-select_options IS NOT INITIAL.
            <ls_sele> = ls_option_temp2-select_options[ 1 ].
          ENDIF.
        ENDIF.

      ENDIF.
    WHEN 'F'.
      READ TABLE lt_function INTO ls_function WITH KEY function_id = ls_filter-expression_id.
      IF sy-subrc = 0.
        LOOP AT ls_function-param_tab INTO ls_param.
          CASE ls_param-param_type.
            WHEN 'P'.
              ls_option_temp-property = ls_param-param_int.
            WHEN 'C'.
              lv_operador = 'CP'.
              CASE ls_function-function.
                WHEN 'substringof'.
                  lv_valor = '*' && ls_param-param_int && '*'.
                WHEN 'endswith'.
                  lv_valor = '*' && ls_param-param_int.
                WHEN 'startwith'. lv_valor = ls_param-param_int && '*'.

              ENDCASE.
              ls_option_temp-select_options = VALUE #( ( sign = 'I' option = lv_operador low = lv_valor ) ).
          ENDCASE.
        ENDLOOP. "Añadimos el registro OR
        APPEND INITIAL LINE TO et_filter_select_options_and ASSIGNING <ls_filter_or_and>.
        READ TABLE et_filter_select_options_and ASSIGNING <ls_filter_or_and_2> WITH KEY property = <ls_filter_or_and>-property.
        IF sy-subrc NE 0.
          <ls_filter_or_and> = ls_option_temp.
        ELSE.
          <ls_filter_or_and_2> = ls_option_temp.
        ENDIF.
      ENDIF.
  ENDCASE.
ENDLOOP.

DELETE et_filter_select_options_or WHERE property = space.
DELETE et_filter_select_options_and WHERE property = space.


"Modificamos el filtro de fecha para poner BT en los que corresponda.
LOOP AT et_filter_select_options_and ASSIGNING FIELD-SYMBOL(<ls_filter>).
*  IF lt_components[ name = <ls_filter>-property ]-type_kind = 'D'.
    LOOP AT <ls_filter>-select_options TRANSPORTING NO FIELDS WHERE option CP 'G*' OR option CP 'L*'.
    ENDLOOP.
    CHECK sy-subrc = 0.
    CLEAR lt_option.
    DELETE ADJACENT DUPLICATES FROM <ls_filter>-select_options COMPARING sign option low.
    APPEND INITIAL LINE TO lt_option ASSIGNING FIELD-SYMBOL(<ls_opt>).
    <ls_opt>-sign = 'I'.
    <ls_opt>-option = 'BT'.
    LOOP AT <ls_filter>-select_options ASSIGNING FIELD-SYMBOL(<ls_option>) WHERE option CP 'G*' .
      <ls_opt>-low = <ls_option>-low.
    ENDLOOP.
    LOOP AT <ls_filter>-select_options ASSIGNING <ls_option> WHERE option CP 'L*' .
      <ls_opt>-high = <ls_option>-low.
    ENDLOOP.
    CLEAR <ls_filter>-select_options.
    APPEND LINES OF lt_option TO <ls_filter>-select_options.
*  ENDIF.
ENDLOOP.

LOOP AT et_filter_select_options_or ASSIGNING <ls_filter>.
*  IF lt_components[ name = <ls_filter>-property ]-type_kind = 'D'.
    LOOP AT <ls_filter>-select_options TRANSPORTING NO FIELDS WHERE option CP 'G*' OR option CP 'L*'.
    ENDLOOP.
    CHECK sy-subrc = 0.
    CLEAR lt_option.
    DELETE ADJACENT DUPLICATES FROM <ls_filter>-select_options COMPARING sign option low.
    APPEND INITIAL LINE TO lt_option ASSIGNING <ls_opt>.
    <ls_opt>-sign = 'I'.
    <ls_opt>-option = 'BT'.
    LOOP AT <ls_filter>-select_options ASSIGNING <ls_option> WHERE option CP 'G*' .
      <ls_opt>-low = <ls_option>-low.
    ENDLOOP.
    LOOP AT <ls_filter>-select_options ASSIGNING <ls_option> WHERE option CP 'L*' .
      <ls_opt>-high = <ls_option>-low.
    ENDLOOP.
    CLEAR <ls_filter>-select_options.
    APPEND LINES OF lt_option TO <ls_filter>-select_options.
*  ENDIF.
ENDLOOP.

ENDMETHOD.
METHOD search_or.

  DATA: lt_components TYPE TABLE OF abap_compdescr.
  DATA: lo_strucdescr TYPE REF TO cl_abap_structdescr.
  DATA: lv_search          TYPE string,
        lv_search_original TYPE string,
        lv_option          TYPE ddoption,
        lv_sign            TYPE ddsign,
        n_veces            TYPE i.

  DATA: r_fields TYPE RANGE OF abap_compname.
  DATA(ls_request) = iv_instancia->mr_request_details->technical_request.
  DATA(lt_select) = ls_request-select.
  lo_strucdescr ?= cl_abap_typedescr=>describe_by_data( iv_data ).
  lt_components = lo_strucdescr->components.
  "Borramos los campos que ya tienen filtro para evitar que añadir

  r_fields = VALUE #( FOR filter IN it_filter_select_options ( sign = 'I' option = 'EQ' low = filter-property ) ).
  IF  NOT r_fields IS INITIAL.
    DELETE lt_select WHERE table_line IN r_fields.
  ENDIF.


*  IF iv_search CA sy-abcde.
*    DATA(vv_num) = ''.
*  ELSE.
*    vv_num = 'X'.
*  ENDIF.
*
*  lv_search = |{ '*' && iv_search && '*' }|.
*
  lv_search_original = iv_search.
  IF lv_search_original CP '* AND *'.
    SPLIT lv_search_original AT ' AND ' INTO TABLE DATA(lt_palabras).
    CLEAR lv_search_original.
    LOOP AT lt_palabras INTO DATA(lv_palabra).
      IF sy-tabix = 1.
        lv_search_original = |{ lv_palabra }|.
      ELSE.
        lv_search_original = lv_search_original && |{ ' *' }| &&  |{ lv_palabra }|.
*        CONCATENATE lv_search lv_palabra INTO lv_search SEPARATED BY ' *' .
      ENDIF.
    ENDLOOP.

  ENDIF.

  DATA(num_caracteres) = strlen( lv_search_original ).

  TRY.
      LOOP AT lt_select INTO DATA(sel).
        IF lt_components[ name = sel ]-type_kind = 'C' ." OR lt_components[ name = sel ]-type_kind = 'N'.

          lv_search = lv_search_original.

          "comprobamos la longitud de la cadena a buscar para añadir * o nada
          DATA(long_campo) = lt_components[ name = sel ]-length.

          long_campo = long_campo / 2. "La longitud del campo es el doble del real

          IF num_caracteres <= long_campo - 2.
            lv_search = |{ '*' && lv_search && '*' }|.
            lv_option = 'CP'.
            lv_sign = 'I'.
          ELSEIF num_caracteres <= long_campo - 1.
            lv_search = |{ lv_search && '*' }|.
            lv_option = 'CP'.
            lv_sign = 'I'.
          ELSEIF num_caracteres <= long_campo.
            lv_search = |{ lv_search }|.
            lv_option = 'EQ'.
            lv_sign = 'I'.
          ELSE.
            CONTINUE.
          ENDIF.

          APPEND INITIAL LINE TO et_filter_select_options_or ASSIGNING FIELD-SYMBOL(<ls_filter>).
          <ls_filter>-property = sel.

          CASE lt_components[ name = sel ]-type_kind.
            WHEN 'C'.
              n_veces = 2.
            WHEN OTHERS.
              n_veces = 1.
          ENDCASE.

          DO n_veces TIMES.
            DATA(lv_index) = sy-index.
            APPEND INITIAL LINE TO <ls_filter>-select_options ASSIGNING FIELD-SYMBOL(<ls_option>).
            <ls_option>-sign = lv_sign.
            <ls_option>-option = lv_option.
            <ls_option>-low = lv_search.
            CASE lv_index.
              WHEN 2.
                TRANSLATE <ls_option>-low TO UPPER CASE.
              WHEN OTHERS.

            ENDCASE.
          ENDDO.

        ENDIF.
      ENDLOOP.
    CATCH cx_sy_itab_error.
  ENDTRY.

ENDMETHOD.
METHOD sort_string.

DATA(ls_request) = iv_instancia->mr_request_details->technical_request.
DATA(lt_order) = ls_request-order.
er_sorter = VALUE #( FOR ord IN lt_order ( name = ord-property descending =
COND #( WHEN ord-order = 'desc' THEN abap_true ELSE abap_false ) astext = abap_false ) ).

ENDMETHOD.
