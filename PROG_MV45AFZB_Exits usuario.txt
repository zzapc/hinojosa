***INCLUDE MV45AFZB .

************************************************************************
*                                                                      *
* This include is reserved for user modifications                      *
*                                                                      *
* Forms for sales document processing                                  *
*                                                                      *
* The name of modification modules should begin with 'ZZ'.             *
*                                                                      *
************************************************************************

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_CHECK_XVBAP_FOR_DELET
*&---------------------------------------------------------------------*
*                                                                     *
*       Additional examination can be entered in this form, before    *
*       the position is released for deletion.                        *
*                                                                     *
*       US_ERROR  - Flag that controls displaying messages            *
*       US_EXIT   - If this flag is set, an item is not allowed       *
*                   to be deleted                                     *
*                                                                     *
*       This form is called from form XVBAP_LOESCHEN_PRUEFEN.         *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_check_xvbap_for_delet USING us_error
                                          us_exit.


* Jms Seidor, si la of está liberada no se deja BORRAR NI RECHAZAR

  TABLES: jest.
  DATA: v_aufnr LIKE aufk-aufnr,
        v_objnr LIKE jest-objnr.

  IF vbak-vkorg EQ '2001' .
    IF vbak-vbtyp EQ 'C' AND sy-tcode EQ 'VA02'.
      IF vbap-posnr EQ xvbap-posnr.

        IF vbap-sobkz EQ 'E' AND ( vbap-bedae EQ 'ZZZ' OR vbap-bedae EQ 'ZSAR' OR vbap-bedae EQ 'ZPAC' OR vbap-bedae EQ 'ZRS'  OR vbap-bedae EQ 'ZRP' ).
          SELECT  aufnr INTO v_aufnr
          FROM afpo
          WHERE kdauf = vbap-vbeln
          AND kdpos EQ vbap-posnr.

            IF sy-subrc EQ 0.
              CONCATENATE 'OR' v_aufnr INTO v_objnr.
            ENDIF.

            SELECT SINGLE * FROM jest
            WHERE objnr = v_objnr AND
            stat = 'I0002' AND
            inact = '' AND NOT EXISTS ( SELECT * FROM jest CLIENT SPECIFIED
                                        WHERE mandt = sy-mandt
                                        AND objnr = v_objnr
                                        AND stat = 'I0076'
                                        AND inact = '' ).

            IF sy-subrc EQ 0.
              IF  us_error NE space.
                MESSAGE ID 'ZV' TYPE 'E' NUMBER '002' WITH vbap-posnr.
              ENDIF.

            ENDIF.
          ENDSELECT.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.



* Example

* IF US_ERROR NE SPACE.
*   MESSAGE ......
* ENDIF.

* IF .......
*   US_EXIT = CHARX.
* ENDIF.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_CHECK_XVBEP_FOR_DELET
*&---------------------------------------------------------------------*
*                                                                     *
*       Additional examination can be entered in this form, before    *
*       the schedule line is released for deletion.                   *
*                                                                     *
*       US_EXIT   - If this flag is set, an item is not allowed       *
*                   to be deleted                                     *
*                                                                     *
*       This form is called from form XVBEP_LOESCHEN_PRUEFEN          *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_check_xvbep_for_delet USING us_exit.

* Example

* IF .......
*   US_EXIT = CHARX.
* ENDIF.

ENDFORM.
*eject

DATA: vg_bstnk TYPE vbak-bstnk.

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_CHECK_VBAK
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to add additional logic for         *
*       checking the header for completeness and consistency.         *
*                                                                     *
*       US_DIALOG  -  Indicator, that can be used to suppress         *
*                     dialogs in certain routines, e.g. in a          *
*                     copy routine.                                   *
*                                                                     *
*       This form is called from form VBAK_PRUEFEN.                   *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_check_vbak USING us_dialog.

* EBA 24/04/2014.
* En función de la clase de documento de ventas, se podrá o no seleccionar
* diversos motivos de pedido. Si el tipo de documento de ventas es “H”
* (devoluciones), “K” (abonos) , ó “L” (cargos), los de Motivos de Pedido
* que se pueden utilizar son desde el 100 al 349 (ambos inclusive),
* el resto no deberán poder utilizarse. Este nuevo control se implanta
* para evitar incongruencias en el proceso. En caso de intentar meter
* un motivo de pedido no autorizado, se deberá emitir un mensaje de error.

*     IF xvbak_updkz IN ( 'I','D','V') and xvbak-augru ne vbak-augru.
  IF NOT vbak-augru IS INITIAL.
    IF vbak-vbtyp CO 'H'.                                  "DEVOLUCIONES.
* GST - 11/07/2016 ->
      IF vbak-vkorg = '3000' OR vbak-vkorg = '3020'.       "MOTIVOS DE PAPELERA.
* GST - 11/07/2016 <-
        IF NOT ( vbak-augru >= '300' AND vbak-augru <= '349' ).     "Motivos de Pedido entre 300 y 349.
          MESSAGE e011(zsd). "Motivo de pedido no permitido.
        ENDIF.
* GST - 11/07/2016 ->
*          ELSEIF VBAK-VKORG <> '3000'.
      ELSE.
* GST - 11/07/2016 <-
        EXIT.
      ENDIF.
    ELSEIF vbak-vbtyp CO 'L'.                              "CARGOS.
*          IF VBAK-VKORG = '3000'.                                 "MOTIVOS DE PAPELERA.
      IF NOT ( vbak-augru >= '200' AND vbak-augru <= '299' ).
        MESSAGE e010(zsd). "Seleccione un motivo de pedido entre 200 y 299.
      ENDIF.
*          ELSEIF VBAK-VKORG <> '3000'.
*             EXIT.
*          ENDIF.
    ELSEIF vbak-vbtyp CO 'K'.                              "ABONOS.
* GST - 11/07/2016 ->
      IF vbak-vkorg = '3000' OR vbak-vkorg = '3020'.       "MOTIVOS DE PAPELERA.
* GST - 11/07/2016 <-
        IF NOT ( vbak-augru >= '100' AND vbak-augru <= '349' ).
          MESSAGE e009(zsd). "Seleccione un motivo de pedido entre 100 y 349.
        ENDIF.
* GST - 11/07/2016 ->
*          ELSEIF VBAK-VKORG <> '3000'.
      ELSE.
* GST - 11/07/2016 <-
        EXIT.
      ENDIF.
    ENDIF.
  ENDIF.
*      ENDIF.

  "ASC >>> ZSCO002 Product de costing 13.01.2022
  IF zcl_ap_exits=>exit_activa('VAXX_CALC_COSTE_AUTOMATICO') = abap_true. "ASC 17.09.24 Condicionamos product costing con zexits

    DATA: lt_values          TYPE /vcxi/vkcr_tt_value,
          lv_id_memory       TYPE string,
          activo             TYPE flag,
          lv_ncost           TYPE ck_no_costing,
          ls_zscot002_bedae  TYPE zscot002_bedae,
          lt_zscott002_cuobj TYPE zscott002_cuobj,
          ls_zscott002_cuobj TYPE zscos002_cuobj,
          lt_mensajes        TYPE bapiret2_tt,
          ls_mensajes        TYPE bapiret2,
          lv_cuobj           TYPE cuobm.

    CLEAR: lt_mensajes[], activo.

    TYPES: BEGIN OF ivbap_local,
             posnr LIKE vbap-posnr,
             tabix LIKE sy-tabix,
             selkz.
    TYPES: END OF ivbap_local.

    TYPES: BEGIN OF vbap_fcode,
             posnr LIKE vbap-posnr,
             fcode LIKE sy-ucomm.
    TYPES: END OF vbap_fcode.

    DATA: lt_vbap_fcode TYPE TABLE OF vbap_fcode,
          ls_vbap_fcode TYPE vbap_fcode.

    DATA: lt_keko_memoria TYPE TABLE OF keko,
          lt_keph_memoria TYPE TABLE OF keph.

    FIELD-SYMBOLS <fs> TYPE ivbap_local.

    DATA: BEGIN OF t_keko OCCURS 20.
            INCLUDE STRUCTURE keko.
          DATA: END OF t_keko.

    DATA: BEGIN OF t_keph OCCURS 20.
            INCLUDE STRUCTURE keph.
          DATA: END OF t_keph.

    FIELD-SYMBOLS: <fts_keko> TYPE t_keko,
                   <fts_keph> TYPE mlccs_t_pcpkeph,
                   <ft_keko>  TYPE STANDARD TABLE,
                   <ft_keph>  TYPE STANDARD TABLE.

    IF ( sy-tcode = 'VA21' OR sy-tcode = 'VA22' ).

      IF gv_fcode NE 'POCO'.
        gv_fcode = fcode.
      ENDIF.

      IF gv_configurador = 'X'.

        CLEAR gv_configurador.

        IF gv_fcode = 'POCO'. "Hemos lanzado el configurador desde fuera del item

          CLEAR: gv_fcode.

          LOOP AT xvbap INTO DATA(ls_xvbap) WHERE cuobj IS NOT INITIAL.


            "Sino esta informado el cuobj, no se hace nada
            IF ls_xvbap-cuobj EQ '000000000000000000'.
              CONTINUE.
            ENDIF.

            "Si el cuobj es el del material y no el que devuelve la configuración, tampoco se hace nada
            SELECT SINGLE cuobj INTO lv_cuobj FROM marc WHERE matnr = ls_xvbap-matnr
                                                          AND werks = ls_xvbap-werks.
            IF lv_cuobj = ls_xvbap-cuobj.
              CONTINUE.
            ENDIF.

            "Comprobamos si la funcionalidad esta activa
            SELECT SINGLE activo INTO activo FROM zscot002_price WHERE vkorg = vbak-vkorg
                                                                   AND vtweg = vbak-vtweg
                                                                   AND spart = vbak-spart
                                                                   AND auart = vbak-auart
                                                                   AND pstyv = ls_xvbap-pstyv.
            IF sy-subrc = 0 AND activo = abap_true.

              "Comprobamos si por clase de necesidad, debe calcular product costing
              SELECT SINGLE * INTO ls_zscot002_bedae FROM zscot002_bedae WHERE vkorg = vbak-vkorg
                                                                           AND vtweg = vbak-vtweg
                                                                           AND spart = vbak-spart
                                                                           AND auart = vbak-auart
                                                                           AND bedae = ls_xvbap-bedae.
              IF sy-subrc = 0.

                CLEAR lv_ncost.
                SELECT SINGLE ncost INTO lv_ncost FROM marc WHERE matnr = ls_xvbap-matnr
                                                              AND werks = ls_xvbap-werks.
                IF sy-subrc = 0 AND lv_ncost IS INITIAL.

                  TRY.
                      DATA(lf_gvcin) = /vcxi/cl_vkcr_gateway=>get_gvcin_by_cuobj( if_cuobj = ls_xvbap-cuobj ).
                      DATA(rr_svc)   = /vcxi/cl_vksra_svc=>get_instance( if_gvcin = lf_gvcin ).
                    CATCH /vcxi/cx_ckx.
                  ENDTRY.

                  IF rr_svc IS BOUND AND ( rr_svc->get_status( ) EQ /vcxi/cl_vksr_service=>c_elmst_g OR
                                           rr_svc->get_status( ) EQ /vcxi/cl_vksr_service=>c_elmst_y ).
                    IF rr_svc->get_status( ) EQ /vcxi/cl_vksr_service=>c_elmst_y.
*                MESSAGE s398(00) WITH 'Existen warnings en el calculo de coste. Posición' |{ ls_xvbap-posnr ALPHA = out }| DISPLAY LIKE 'W'.
                      MESSAGE s398(00) WITH 'Existen warnings en el calculo de coste' DISPLAY LIKE 'W'.
                      CONTINUE.
                    ENDIF.
                    "Si se ha determinado la condición EK02
                    READ TABLE xkomv[] WITH KEY kschl = 'EK02'
                                                kposn = ls_xvbap-posnr TRANSPORTING NO FIELDS.
                    IF sy-subrc <> 0.

                      "ASC Si ya hay un error de ese material, no lo volvemos a lanzar
                      ASSIGN ('(saplckdi)t_keko[]') TO <fts_keko>.
                      IF sy-subrc = 0.
                        READ TABLE <fts_keko> WITH KEY matnr  = ls_xvbap-matnr
                                                      loekz  = space
                                                      maxmsg = 'E' TRANSPORTING NO FIELDS.
                        IF sy-subrc = 0.
                          CONTINUE.
                        ENDIF.
                      ENDIF.

                      "Marcamos la linea como seleccionada y lanzamos el product costing
                      READ TABLE ivbap ASSIGNING <fs> WITH KEY posnr = ls_xvbap-posnr.
                      IF sy-subrc = 0.
                        IF <fs> IS ASSIGNED AND <fs>-selkz IS INITIAL.
                          <fs>-selkz = abap_true.
                          lv_id_memory = ls_xvbap-cuobj.

                          IMPORT lt_zscott002_cuobj FROM MEMORY ID 'ZSCOD002'.
                          READ TABLE lt_zscott002_cuobj INTO ls_zscott002_cuobj WITH KEY cuobj = ls_xvbap-cuobj.
                          IF sy-subrc <> 0.
                            ls_zscott002_cuobj-cuobj = ls_xvbap-cuobj.
                            ls_zscott002_cuobj-posnr = ls_xvbap-posnr.
                            APPEND ls_zscott002_cuobj TO lt_zscott002_cuobj.
                          ENDIF.
                          EXPORT lt_zscott002_cuobj TO MEMORY ID 'ZSCOD002'.
                          IF ls_zscott002_cuobj-calculado = abap_false.

                            "ASC >>> 21.09.2022 En caso de que el calculo de coste sea erroneo, en VA22 no deja entrar
                            DATA: lv_set_picking TYPE flag,
                                  ls_keko        TYPE keko,
                                  lv_str_msg     TYPE string.
                            CLEAR lv_set_picking.
                            lv_set_picking = abap_true.
                            IF sy-tcode EQ 'VA22'.
                              "Comprobamos si es un material configurable
                              DATA: ls_zssdt000_of_ped TYPE zssdt000_of_ped.
                              CLEAR ls_zssdt000_of_ped.
                              SELECT SINGLE * FROM zssdt000_of_ped INTO ls_zssdt000_of_ped WHERE vkorg = vbak-vkorg
                                                                                             AND vtweg = vbak-vtweg
                                                                                             AND spart = vbak-spart
                                                                                             AND matnr = ls_xvbap-matnr.
                              IF sy-subrc = 0.
                                SELECT SINGLE * FROM keko INTO ls_keko WHERE posnr = ls_xvbap-posnr
                                                                         AND vbeln = ls_xvbap-vbeln
                                                                         AND loekz = space
                                                                         AND maxmsg = 'E'.
                                IF sy-subrc = 0.
                                  CLEAR lv_set_picking.
                                  CLEAR lv_str_msg.
                                  lv_str_msg = | Error product costing. Posición:  | && |{ ls_xvbap-posnr ALPHA = OUT }|.
                                  MESSAGE s398(00) WITH lv_str_msg DISPLAY LIKE 'E'.
                                ENDIF.
                              ELSE.
                                SELECT SINGLE * FROM keko INTO ls_keko WHERE matnr = ls_xvbap-matnr
                                                                       AND vbeln = ls_xvbap-vbeln
                                                                       AND loekz = space
                                                                       AND maxmsg = 'E'.
                                IF sy-subrc = 0.
                                  CLEAR lv_set_picking.
                                  CLEAR lv_str_msg.
                                  lv_str_msg = | Error product costing. Material:  | && |{ ls_xvbap-matnr }|.
                                  MESSAGE s398(00) WITH lv_str_msg DISPLAY LIKE 'E'.
                                ELSEIF sy-subrc <> 0.
***                                SELECT SINGLE * FROM keko INTO ls_keko WHERE matnr = ls_xvbap-matnr
***                                                                       AND vbeln = ls_xvbap-vbeln
***                                                                       AND loekz = space.
***                                IF sy-subrc <> 0. "Si ni siquiera esta en la KEKO, error y no lanzo el product costing
***                                  CLEAR lv_set_picking.
***                                  CLEAR lv_str_msg.
***                                  lv_str_msg = | Error product costing. Material:  | && |{ ls_xvbap-matnr }|.
***                                  MESSAGE s398(00) WITH lv_str_msg DISPLAY LIKE 'E'.
***                                ENDIF.
                                ENDIF.
                              ENDIF.
                            ENDIF.

                            IF lv_set_picking = abap_true.
                              fcode = 'PKAL'.
                              PERFORM fcode_bearbeiten(sapmv45a).

                              ASSIGN ('(SAPLCKDI)T_KEPH[]') TO <ft_keph>.
                              IF <ft_keph> IS ASSIGNED.
                                MOVE-CORRESPONDING <ft_keph> TO lt_keph_memoria.
                                APPEND LINES OF lt_keph_memoria TO gt_keph_memoria.
                              ENDIF.

                              ASSIGN ('(SAPLCKDI)T_KEKO[]') TO <fts_keko>.
                              IF <fts_keko> IS ASSIGNED.
                                MOVE-CORRESPONDING <fts_keko> TO lt_keko_memoria.
                                APPEND LINES OF lt_keko_memoria TO gt_keko_memoria.
                              ENDIF.

                              PERFORM preisfindung_gesamt USING 'C'.
                            ENDIF.
                            "ASC <<< 21.09.2022 En caso de que el calculo de coste sea erroneo, en VA22 no deja entrar

                            "ASC >>> 21.09.2022 Revisamos si el product costing ha ido bien
                            IF lv_set_picking = abap_true.

                              ASSIGN ('(saplckdi)t_keko[]') TO <fts_keko>.
                              IF sy-subrc = 0.
                                READ TABLE <fts_keko> WITH KEY matnr  = ls_xvbap-matnr
                                                               loekz  = space
                                                               maxmsg = 'E' TRANSPORTING NO FIELDS.
                                IF sy-subrc = 0.
                                  MESSAGE s398(00) WITH 'Error en el calculo del product costing' DISPLAY LIKE 'E'.
                                ENDIF.
                              ENDIF.
                              "ASC <<< 21.09.2022 Revisamos si el product costing ha ido bien

                              IMPORT lt_zscott002_cuobj FROM MEMORY ID 'ZSCOD002'.
                              LOOP AT lt_zscott002_cuobj INTO ls_zscott002_cuobj WHERE calculado = abap_false.
                                READ TABLE xkomv[] WITH KEY kschl = 'EK02' kposn = ls_zscott002_cuobj-posnr TRANSPORTING NO FIELDS.
                                IF sy-subrc <> 0.
                                  "Marcamos la linea como seleccionada y lanzamos el product costing
                                  LOOP AT ivbap ASSIGNING <fs>.
                                    IF <fs>-posnr NE ls_zscott002_cuobj-posnr.
                                      <fs>-selkz = abap_false.
                                    ELSE.
                                      <fs>-selkz = abap_true.
                                    ENDIF.
                                  ENDLOOP.
                                  fcode = 'PKAL'.
                                  PERFORM fcode_bearbeiten(sapmv45a).

                                  ASSIGN ('(SAPLCKDI)T_KEPH[]') TO <ft_keph>.
                                  IF <ft_keph> IS ASSIGNED.
                                    MOVE-CORRESPONDING <ft_keph> TO lt_keph_memoria.
                                    APPEND LINES OF lt_keph_memoria TO gt_keph_memoria.
                                  ENDIF.

                                  ASSIGN ('(SAPLCKDI)T_KEKO[]') TO <fts_keko>.
                                  IF <fts_keko> IS ASSIGNED.
                                    MOVE-CORRESPONDING <fts_keko> TO lt_keko_memoria.
                                    APPEND LINES OF lt_keko_memoria TO gt_keko_memoria.
                                  ENDIF.

                                  PERFORM preisfindung_gesamt(sapmv45a) USING 'C'.

                                  "ASC >>> 21.09.2022 Revisamos si el product costing ha ido bien
                                  ASSIGN ('(saplckdi)t_keko[]') TO <fts_keko>.
                                  IF sy-subrc = 0.
                                    READ TABLE <fts_keko> WITH KEY matnr  = ls_xvbap-matnr
                                                                   loekz  = space
                                                                   maxmsg = 'E' TRANSPORTING NO FIELDS.
                                    IF sy-subrc = 0.
                                      MESSAGE s398(00) WITH 'Error en el calculo del product costing' DISPLAY LIKE 'E'.
                                    ENDIF.
                                  ENDIF.
                                ENDIF.
                              ENDLOOP.
                              FREE MEMORY ID 'ZSCOD002'.
                            ENDIF.
                            "ASC <<< 21.09.2022 Revisamos si el product costing ha ido bien
                          ENDIF.
                        ENDIF.
                      ENDIF.
                    ELSE. "Hay casos que tiene EK02, pero no se han calculado los costes.
                      "Comprobamos si tiene el costes.
                      SELECT SINGLE * FROM keko INTO ls_keko WHERE posnr = ls_xvbap-posnr
                                                               AND vbeln = ls_xvbap-vbeln
                                                               AND loekz = space.
                      IF sy-subrc = 0.
                        CONTINUE.
                      ELSE.
***                  APPEND INITIAL LINE TO lt_mensajes ASSIGNING FIELD-SYMBOL(<fs_mensajes>).
***                  <fs_mensajes>-type       = 'W'.
***                  <fs_mensajes>-id         = '00'.
***                  <fs_mensajes>-number     = '398'.
***                  <fs_mensajes>-message_v1 = 'No se ha determinado el calculo de coste en la posición'.
***                  <fs_mensajes>-message_v2 = |{ ls_xvbap-posnr ALPHA = OUT }|.
                      ENDIF.
                    ENDIF.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDLOOP.

        ENDIF. "POCO

      ENDIF. "Configurador

      IF gv_fcode NE 'POCO'.
        CLEAR gv_fcode.
      ENDIF.

      IF lt_mensajes[] IS NOT INITIAL.
        CALL FUNCTION 'ZSBC_VENTANA_LOGSBAPI'
          EXPORTING
            mensajes = lt_mensajes[].
      ENDIF.

    ENDIF.

  ENDIF.
  "ASC <<< ZSCO002 Product de costing 13.01.2022




  "JCB 28.11.23. 80405 Validación "nº pedido cliente"
* jms seidor se introduce un mensaje de W que chequea si el pedido ya existe
*  DATA: bstnk LIKE vbak-bstnk.
*  DATA: vbeln LIKE vbak-vbeln.
*
*  IF vbak-vkorg EQ '2001' AND vbak-vdatu IS NOT INITIAL AND sy-tcode EQ 'VA01'
*    AND vbak-bstnk NE ''.
*
*    SELECT SINGLE  bstnk vbeln INTO ( bstnk, vbeln )
*      FROM vbak CLIENT SPECIFIED
*      WHERE mandt EQ sy-mandt
*      AND kunnr EQ vbak-kunnr
*      AND bstnk EQ vbak-bstnk AND
*      vdatu EQ vbak-vdatu.
*
*    IF bstnk NE ''.
*      MESSAGE ID 'ZV' TYPE 'W' NUMBER '001' WITH vbeln.
*    ENDIF.
*
*  ENDIF.


  IF vbak-bstnk IS NOT INITIAL AND sy-tcode = 'VA01' AND vg_bstnk <> vbak-bstnk.
    DATA vl_vbeln TYPE vbak-vbeln.
    SELECT SINGLE vbeln
      INTO vl_vbeln
      FROM vbak
      WHERE vkorg = vbak-vkorg AND
            kunnr = vbak-kunnr AND
            vbtyp = 'C'        AND "JCB Sólo pedidos de venta
            bstnk = vbak-bstnk.
    IF sy-subrc = 0.
      MESSAGE w005(zv) WITH vl_vbeln.
    ENDIF.

    vg_bstnk = vbak-bstnk.
  ENDIF.

  "DFS 07.04.24. ASignar Clase de riesgo ADVERTENCIA para Centros de montaje
  "  IF vbak-AUART = 'ZTA3' AND sy-tcode = 'VA01'.
  IF vbak-auart = 'ZTA3'.
    vbak-ctlpc = 'ZCM'.

  ENDIF.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_CHECK_VBAP
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to add addtional logic for          *
*       checking the position for completeness and consistency.       *
*                                                                     *
*       US_DIALOG  -  Indicator, that can be used to suppress         *
*                     dialogs in certain routines, e.g. in            *
*                     copy mode.                                      *
*                                                                     *
*       This form is called from form VBAP_PRUEFEN_ENDE.              *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_check_vbap USING us_dialog.

* jms seidor, no se permite
  DATA: v_aufnr LIKE aufk-aufnr,
        v_objnr LIKE jest-objnr.

  IF vbap-sobkz EQ 'E' AND ( vbap-bedae EQ 'ZZZ' OR vbap-bedae EQ 'ZSAR' OR vbap-bedae EQ 'ZPAC' OR vbap-bedae EQ 'ZRS'  OR vbap-bedae EQ 'ZRP' ).
    IF vbak-vbtyp EQ 'C' AND sy-tcode EQ 'VA02'.

      IF vbap-posnr EQ yvbap-posnr.

        IF vbap-sobkz EQ 'E'.
          SELECT aufnr INTO v_aufnr
          FROM afpo
          WHERE kdauf = vbak-vbeln
          AND kdpos EQ vbap-posnr.

            IF sy-subrc EQ 0.
              CONCATENATE 'OR' v_aufnr INTO v_objnr.
            ENDIF.

            SELECT SINGLE * FROM jest
            WHERE objnr = v_objnr AND
            stat = 'I0002' AND
            inact = '' AND NOT EXISTS ( SELECT * FROM jest CLIENT SPECIFIED
                                        WHERE mandt = sy-mandt
                                        AND objnr = v_objnr
                                        AND stat = 'I0076'
                                        AND inact = '' ).


            IF sy-subrc EQ 0.

              IF vbap-kwmeng NE yvbap-kwmeng.
                MESSAGE ID 'ZV' TYPE 'E' NUMBER '003'.
              ENDIF.

              IF vbap-abgru NE space.
                MESSAGE ID 'ZV' TYPE 'E' NUMBER '002'.
              ENDIF.

              "JVM - 09/12/2022 - permitir modificar fecha sólo
*              IF vbep-edatu NE yvbep-edatu AND yvbep-edatu NE '00000000' and
*                vbep-posnr eq vbap-posnr and yvbep-posnr eq yvbap-posnr.
*                MESSAGE ID 'ZV' TYPE 'E' NUMBER '004'.
*
*            ENDIF.
              "FJVM - 09/12/2022 - permitir modificar fecha sólo
            ENDIF.
          ENDSELECT.


        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.


* EBA 24/04/2014
* Controlar la cantidad y el importe del pedido de devolución para
* que en caso de crear con referencia a documento modelo, no pueda ser
* superior a la facturada en su día.

  IF vbak-spart = '20'. "Papeleras
    IF vbak-vbtyp = 'H'. "Pedido Devolución
      IF NOT vbap-vgbel IS INITIAL.
        DATA: l_cant_ant TYPE vbrp-fkimg,
              l_imp_ant  TYPE vbrp-netwr.
        IF vbap-vgtyp = 'M'.
          SELECT SINGLE fkimg netwr FROM vbrp
            INTO (l_cant_ant, l_imp_ant)
           WHERE vbeln = vbap-vgbel
             AND posnr = vbap-vgpos.
        ELSEIF vbap-vgtyp = 'C'.
          SELECT SINGLE kwmeng netwr FROM vbap
            INTO (l_cant_ant, l_imp_ant)
           WHERE vbeln = vbap-vgbel
             AND posnr = vbap-vgpos.
        ENDIF.
        IF vbap-kwmeng > l_cant_ant.
          MESSAGE e012(zsd).
        ENDIF.
        IF vbap-netwr > l_imp_ant.
          MESSAGE e013(zsd).
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.


* EBA 24/04/2014.
* En función de la Organización de Ventas, se podrá seleccionar diversos
* MOTIVOS DE RECHAZO. Los de Motivos de Rechazo que se pueden utilizar
* para Papelera van desde el 30 al 39 (ambos inclusive), el resto no
* deberán poder utilizarse. Este nuevo control se implanta para evitar
* incongruencias en el proceso. En caso de intentar meter un motivo de
* pedido no autorizado, se deberá emitir un mensaje de error.

*     IF xvbak_updkz ne '' and xvbap-abgru ne vbap-abgru.
  IF  vbap-abgru IS NOT INITIAL.
* GST - 11/07/2016 ->
    IF vbak-vkorg = '3000' OR vbak-vkorg = '3020'.     "MOTIVOS DE PAPELERA.
* GST - 11/07/2016 <-
      IF NOT ( vbap-abgru >= '30' AND vbap-abgru <= '39' ).     "Motivos de Pedido entre 30 y 39.
        MESSAGE e008(zsd). "Motivo de rechazo no permitido.
      ENDIF.
* GST - 11/07/2016 ->
*          ELSEIF VBAK-VKORG <> '3000'.
    ELSE.
* GST - 11/07/2016 <-
      EXIT.
    ENDIF.
  ENDIF.
*     ENDIF.


*** Tooling Portal Functionality
  ycl_rf_sd_userexits_v45a=>check_vbap( EXPORTING is_vbak   = vbak
                                                  is_xvbap  = xvbap
                                                  is_vbep   = vbep
                                        CHANGING  cf_xvbap_high_posnr = xvbap_high_posnr
                                                  cs_vbap   = vbap
                                                  cs_ivbap  = ivbap
                                                  cs_ivbep  = ivbep
                                                  cs_ivbep1 = ivbep1
                                                  ct_ivbap  = ivbap[]
                                                  ct_xvbap  = xvbap[]
                                                  ct_xvbep  = xvbep[]
                                                  ct_ivbep  = ivbep[]
                                                  ct_ivbep1 = ivbep1[]
                                                  ct_xkomv  = xkomv[] ).
***     Moved to class YCL_RF_SD_USEREXITS_V45A
***    include YRF_SMD_CREATE_VBAP_FOR_TOOLS.

*}   INSERT

*** General Userexit Implementation CHECK_VBAP
  ycl_hp_sdu=>check_vbap( EXPORTING if_dialog    = us_dialog
                                    is_vbap_old  = *vbap
                                    is_vbkd_old  = *vbkd
                                    is_rv45a     = rv45a
                          CHANGING  cf_call_bapi = call_bapi
                                    cf_upd_vbep  = upd_vbep
                                    cs_kuagv     = kuagv
                                    cs_kuwev     = kuwev
                                    cs_t180      = t180
                                    cs_tkomp     = tkomp
                                    cs_tvak      = tvak
                                    cs_tvap      = tvap
                                    cs_tvko_sadr = tvko_sadr
                                    cs_vbak      = vbak
                                    cs_vbap      = vbap
                                    cs_vbep      = vbep
                                    cs_vbkd      = vbkd
                                    cs_veda      = veda
                                    cs_r185d     = r185d
                                    ct_xkomv     = xkomv[]
                                    ct_xvbap     = xvbap[]
                                    ct_xvbep     = xvbep[]
                                    ct_xvbkd     = xvbkd[]
                                    ct_xvbpa     = xvbpa[]
                                    ct_xvbuv     = xvbuv[]
                                    ct_hvbuv     = hvbuv[]
                                    ct_yvbap     = yvbap[]
                                    ct_yvbep     = yvbep[] ).


***<-- FCARDONA - Mover status a status de usuario

*  "ASC >>>  17.12.2021 - GAPSD006 - Aviso de disponibilidad de stock de libre utilización
  DATA: lv_active        TYPE active,
        lv_continue_save TYPE flag.

  DATA: wa_vbap  TYPE vbap,
        lv_mtart TYPE mtart,
        lv_posnr TYPE posnr.

  CLEAR: lv_active, lv_continue_save.

  CHECK vbak-vbtyp = 'C'. " SMT - 10.01.2022 - Solo debe saltar aviso en pedidos, no en ofertas.

  IF sy-tcode EQ 'VA01' OR sy-tcode EQ 'VA02'.
    LOOP AT xvbap INTO wa_vbap WHERE updkz EQ 'I'
                                  OR updkz EQ 'U'.
    ENDLOOP.
    IF sy-subrc = 0.
      SELECT SINGLE active FROM zssdt000_cond INTO lv_active WHERE vkorg = vbak-vkorg
                                                               AND vtweg = vbak-vtweg
                                                               AND auart = vbak-auart.
      IF lv_active = 1 AND sy-subrc = 0.

        IF xvbap-posnr EQ vbap-posnr AND *vbap-posnr EQ '000000' AND rv45a-bedae NE 'ZYE'.
          CALL FUNCTION 'ZSD006_CHECK_STOCK_LIBRE'
            EXPORTING
              it_vbap         = xvbap[]
              posnr           = vbap-posnr  " add jtm 31.08.2022
              i_vbak          = vbak "add jvm 11/11/2022
            IMPORTING
              e_continue_save = lv_continue_save.

          IF lv_continue_save IS INITIAL.
***          CLEAR t180-trtyp.  -- SMT 31/01/2022 Comentamos la línea, da actualización cancelada
            gf_exit_save_document_prepare = 'X'. "smt - 31/01/2022 Con esto evitamos que se guarde el pedido
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.



  "GAPSD084 - Aviso en el pedido de un precio con escalados
  DATA: vl_lista_kposn TYPE text100.
  DATA tl_kposn TYPE TABLE OF konv-kposn.
  IF xvbap-updkz = 'I' OR xvbap-updkz = 'U'.
    IF xvbak-auart = 'ZTA2' OR xvbak-auart = 'ZKB' OR xvbak-auart = 'ZG' OR  xvbak-auart = 'ZRED'.
      IF xvbak-knumv IS NOT INITIAL AND vbap-lsmeng <> *vbap-lsmeng.
        SELECT konv~kposn
          INTO TABLE tl_kposn
          FROM konp INNER JOIN konv ON konv~knumh = konp~knumh
          WHERE konv~knumv = xvbak-knumv AND
                konv~kschl = 'ZPRC'       AND
                konv~kposn = xvbap-posnr  AND
                konp~stfkz  <> space.

        LOOP AT tl_kposn ASSIGNING FIELD-SYMBOL(<fs_kposn>).
          IF vl_lista_kposn IS INITIAL.
            vl_lista_kposn = <fs_kposn>.
          ELSE.
            vl_lista_kposn = |{ vl_lista_kposn }, { <fs_kposn> }|.
          ENDIF.
        ENDLOOP.


        IF vl_lista_kposn IS NOT INITIAL.
          MESSAGE i002(zssd) WITH vl_lista_kposn. "Las siguientes posiciones tienen escalas: &
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.



** si se copia de una oferta el dato, se importa el precio de troquel y cliché
** se cambia además el importe
*data: var type komp-netwr,
*      var2 type komp-netwr,
*      var3 type komp-netwr.
*data: yvar type komp-netwr,
*      yvar2 type komp-netwr,
*      yvar3 type komp-netwr.
*
*
*if CVBAP-VGBEL is not initial.
*if  cvbap-zzimporte_cliche ne 0 and VBAP-KWMENG is not initial and cvBAP-KWMENG is not initial.
*  var2 = VBAP-KWMENG  . var3 = cvBAP-KWMENG .
*  var = ( var2 * 100 / var3 ) .
*  vbap-zzimporte_cliche =  ( cvbap-zzimporte_cliche * ( var  ) ) / 100.
*
*  endif.
*
*
*if  cvbap-ZZIMPORTE_TROQUEL ne 0 and VBAP-KWMENG is not initial and cvBAP-KWMENG is not initial.
*  yvar2 = VBAP-KWMENG  . yvar3 = cvBAP-KWMENG .
*  yvar = ( var2 * 100 / var3 ) .
*  vbap-zzimporte_troquel =  ( cvbap-ZZIMPORTE_TROQUEL * ( yvar  ) ) / 100.
*
*  endif.
*
*
*  endif.



ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_CHECK_VBKD
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to add additional logic for         *
*       checking the sales details for completeness and consistency.  *
*                                                                     *
*       US_DIALOG  -  Indicator, that can be used to suppress         *
*                     dialogs in certain routines, e.g. in a          *
*                     copy routine.                                   *
*                                                                     *
*       This form is called from form VBKD_PRUEFEN.                   *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_check_vbkd USING us_dialog.


ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_CHECK_VBEP
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to add additional logic for         *
*       checking the schedule lines for completeness and consistency. *
*                                                                     *
*       US_DIALOG  -  Indicator, that can be used to suppress         *
*                     dialogs in certain routines, e.g. in a          *
*                     copy routine.                                   *
*                                                                     *
*       This form is called from form VBEP_PRUEFEN.                   *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_check_vbep USING us_dialog.
* EBA 08.06.2014 Darle la funcionalidad solicitada a la Causa de Retraso.
* Si cambia de semana la fecha de entrega, se debe rellenar la Causa de
* Retraso obligatoriamente.
***  IF *vbep-edatu NE '00000000' AND vbep-etenr = '0001' AND vbap-vbeln NE ''.
***    IF vbep-edatu NE *vbep-edatu AND *vbep-edatu NE '00000000'.
***      DATA: l_sem_old TYPE scal-week,
***            l_sem_new TYPE scal-week.
***      STATICS: l_blanqueo_causa_retraso.
***
***      l_sem_old = zcl_ap_fechas=>get_semana( *vbep-edatu ).
***      l_sem_new = zcl_ap_fechas=>get_semana( vbep-edatu ).
***      IF l_sem_old < l_sem_new.
***        IF l_blanqueo_causa_retraso IS INITIAL AND sy-binpt IS INITIAL.
***          CLEAR vbap-zzcausa_retraso.
***          l_blanqueo_causa_retraso = 'X'.
***        ENDIF.
***
***        IF vbap-zzcausa_retraso IS INITIAL.
***          MESSAGE e025(zsd).
***        ELSE.
***          CLEAR l_blanqueo_causa_retraso.
***        ENDIF.
***      ENDIF.
***    ENDIF.
***  ENDIF.


**********************************************************************************************************
* GAPSD030 Se requiere que el sistema avise al usuario que la orden de fabricación NO se va a actualizar.
* Está prevista la implementación de un mensaje POPUP Warning indicando la advertencia.
**********************************************************************************************************


  DATA lv_aprof TYPE t459k-aprof.

*  if ( VBEP-EDATU <> *VBEP-EDATU OR VBEP-WMENG <> *VBEP-WMENG ).  " Ha habído modificación
  IF sy-tcode EQ 'VA02'. "ASC 06.03.24 Nos piden condicionarlo mediante transacción y tabla Z
    DATA: ls_zssdt000_no_act TYPE zssdt000_no_act.
    CLEAR ls_zssdt000_no_act.
    SELECT SINGLE * FROM zssdt000_no_act INTO ls_zssdt000_no_act WHERE vkorg = vbak-vkorg
                                                                   AND vtweg = vbak-vtweg
                                                                   AND auart = vbak-auart.
    IF sy-subrc = 0.

      SELECT SINGLE aprof INTO lv_aprof
      FROM t459k AS k INNER JOIN t459a AS a ON ( a~bedar = k~bedar )
      WHERE bedae = vbap-bedae
       AND auart <> ''
       AND aprof = 'SD1'.

      " Solo si la Clase de necesidad asociada a la posición modificada es relevante para Assembly processing.
      IF sy-subrc = 0.

        DATA lt_vbep TYPE STANDARD TABLE OF vbepvb.
        lt_vbep = VALUE #( FOR vw_vbep IN  xvbep[] WHERE ( wmeng > 0 AND posnr = vbap-posnr ) ( vw_vbep ) ).

        DESCRIBE TABLE lt_vbep[] LINES DATA(n).

* Si para la posición modificada hay más de un reparto (varios ETENR),
* mostrar un POPUP indicando que la modificación NO se va a repercutir
* en la orden de fabricación por disponer de varios repartos

        IF n > 1.

          CALL FUNCTION 'POPUP_TO_INFORM'
            EXPORTING
              titel = 'ATENCION'
              txt1  = 'La modificación NO se va a repercutir en la orden de fabricación '
              txt2  = 'por disponer de varios repartos.'
*             TXT3  = ' '
*             TXT4  = ' '
            .


        ENDIF.
      ENDIF.

    ENDIF.
  ENDIF.

*  endif.

**********************************************************************************************************

ENDFORM.
*eject

*---------------------------------------------------------------------*
*      Form  USEREXIT_CHECK_VBSN
*---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to add additional logic for         *
*       checking the serial numbers for completeness and consistency. *
*                                                                     *
*       US_DIALOG  -  Indicator, that can be used to suppress         *
*                     dialogs in certain routines, e.g. in a          *
*                     copy routine.                                   *
*                                                                     *
*       This form is called from form VBSN_PRUEFEN.                   *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_check_vbsn USING us_dialog.


ENDFORM.
*eject

*---------------------------------------------------------------------*
*      Form  USEREXIT_CHECK_XVBSN_FOR_DELET
*---------------------------------------------------------------------*
*                                                                     *
*       Additional examination can be entered in this form, before    *
*       the serial number is released for deletion.                   *
*                                                                     *
*       US_EXIT   - If this flag is set, an item is not allowed       *
*                   to be deleted                                     *
*                                                                     *
*       This form is called from form XVBSN_LOESCHEN_PRUEFEN          *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_check_xvbsn_for_delet USING us_exit.

* Example

* IF .......
*   US_EXIT = CHARX.
* ENDIF.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_FILL_VBAP_FROM_HVBAP
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to fill addtional data into VBAP    *
*       from the main item (HVBAP), i.e. this Userexit is called      *
*       when an item is entered with reference to a main item.        *
*                                                                     *
*       This form is called from form VBAP_FUELLEN_HVBAP.             *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_fill_vbap_from_hvbap.

* VBAP-zzfield = HVBAP-zzfield2.

  DATA: lr_sdu TYPE REF TO ycl_hp_sdu.

*** Fill sub-items of configurable materials
*** ex. SINGLE to SI_MQ, MULTI to MU_C and MU_MQ.
  CREATE OBJECT lr_sdu.
  IF lr_sdu IS BOUND.
    lr_sdu->fill_vbap_from_hvbap( EXPORTING if_tabix = svbap-tabix
                                  CHANGING  cs_vbap  = hvbap
                                            ct_xvbap = xvbap[] ).
  ENDIF.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_MOVE_FIELD_TO_TVCOM_H
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to fill addtional data into TVCOM   *
*                                                                     *
*       E.g. the fields of the following workareas can be moved to    *
*            table TVCOM: VBAK                                        *
*                         VBKD                                        *
*                         ...                                         *
*                                                                     *
*       This form is called from form VBAK_FUELLEN.                   *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_move_field_to_tvcom_h.

* Examples:
* TVCOM-zzfield = VBAK-zzfield2.
* TVCOM-zzfield = VBKD-zzfield2.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_MOVE_FIELD_TO_TVCOM_I
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to fill additional data into TVCOM  *
*                                                                     *
*       E.g. the fields of the following workareas can be moved to    *
*            table TVCOM: VBAP                                        *
*                         VBKD                                        *
*                         ...                                         *
*                                                                     *
*       This form is called from form VBAP_FUELLEN.                   *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_move_field_to_tvcom_i.

* Examples:
* TVCOM-zzfield = VBAP-zzfield2.
* TVCOM-zzfield = VBKD-zzfield2.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_MOVE_FIELD_TO_COBL
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to fill addtional data into         *
*       table account assignment COBL.                                *
*                                                                     *
*       US_VBAK  - Workarea VBAK                                      *
*       US_VBAP  - Workarea VBAP                                      *
*       CH_COBL  - Workarea COBL                                      *
*                                                                     *
*       This form is called from form COBL_FUELLEN.                   *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_move_field_to_cobl USING us_vbak STRUCTURE vbak
                                       us_vbap STRUCTURE vbap
                              CHANGING ch_cobl STRUCTURE cobl.

* Examples
* CH_COBL-zzfield = US_VBAK-zzfield2.
* CH_COBL-zzfield = US_VBAP-zzfield2.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_COBL_RECEIVE_VBAK
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to move data from table COBL        *
*       to table VBAK.                                                *
*                                                                     *
*       This form is called from form COBL_RECEIVE_VBAK.              *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_cobl_receive_vbak.

* VBAK-zzfield = COBL-zzfield2.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_COBL_RECEIVE_VBAP
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to move data from table COBL        *
*       to table VBAP.                                                *
*                                                                     *
*       This form is called from form COBL_RECEIVE_VBAP.              *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_cobl_receive_vbap.

* VBAP-zzfield = COBL-zzfield2.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_COBL_SEND_ITEM
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to move data to the communication-  *
*       table INT_COBLF that is used in the function COBL_SEND_PBO.   *
*                                                                     *
*       This form is called from form COBL_SEND_PBO_VBAP.             *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_cobl_send_item.

*  This example shows how to select fields that are shown in the
*  account assignment block

*  INT_COBLF-FDNAM = zzfield1.
*  INT_COBLF-OUTPUT = '1'.
*  IF T180-TRTYP NE CHARA AND
*     VBAP-KZVBR NE KZVBR_P.
*    INT_COBLF-INPUT    = '1'.
*    INT_COBLF-REQUIRED = '1'.
*  ENDIF.
*  INT_COBLF-ACTIVE = '1'.
*  APPEND INT_COBLF.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_COBL_SEND_HEADER
*&---------------------------------------------------------------------*
*                                                                     *
*       This Userexit can be used to move data to the communication-  *
*       table INT_COBLF that is used in the function COBL_SEND_PBO.   *
*                                                                     *
*       This form is called from form COBL_SEND_PBO_VBAK.             *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_cobl_send_header.

*  This example shows how to select fields that are shown in the
*  account assignment block

*  INT_COBLF-FDNAM = zzfield1.
*  INT_COBLF-OUTPUT = '1'.
*  IF T180-TRTYP NE CHARA AND
*     VBAP-KZVBR NE KZVBR_P.
*    INT_COBLF-INPUT    = '1'.
*    INT_COBLF-REQUIRED = '1'.
*  ENDIF.
*  INT_COBLF-ACTIVE = '1'.
*  APPEND INT_COBLF.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_SOURCE_DETERMINATION
*&---------------------------------------------------------------------*
*       This Userexit is used to add additional logic for finding      *
*       the source of the plant or the item category.                  *
*                                                                      *
*       This form is called from form VBAP_FUELLEN                     *
*                                                                      *
*----------------------------------------------------------------------*
FORM userexit_source_determination.

* set source
* VBAP-WERKS          = zzfield1.

* set item category
* VBAP-PSTYV          = zzfield2.


ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_MOVE_FIELD_TO_ME_REQ
*&---------------------------------------------------------------------*
*       This Userexit can be used to move additional data to the       *
*       requisition-table EBAN or to the account-assignment-table      *
*       for requisitions EBKN.                                         *
*                                                                      *
*       This form is called from form EBAN_FUELLEN                     *
*                                     BESCHAFFUNG_FUELLEN              *
*                                                                      *
*----------------------------------------------------------------------*
FORM userexit_move_field_to_me_req.

* Example
* EBAN-LIFNR = zzfield1.
* EBKN-KOSTL = zzfield2.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_GET_FIELD_TO_SDCOM
*&---------------------------------------------------------------------*
*       This userexit can be used to get additional fields from the    *
*       communication structure between sales order and variant        *
*       configuration.                                                 *
*                                                                      *
*       Fields included in structure SDCOM can be used for further     *
*       processing in the sales order.                                 *
*                                                                      *
*       This form is called from CONFIGURATION_PROCESSING              *
*                                                                      *
*----------------------------------------------------------------------*
FORM userexit_get_field_from_sdcom USING sdcom STRUCTURE sdcom.

  DATA: lr_sdu TYPE REF TO ycl_hp_sdu.
  DATA: ls_xvbap TYPE vbapvb.

  CREATE OBJECT lr_sdu.

  IF lr_sdu IS BOUND.

    lr_sdu->fill_vbap( EXPORTING if_cuobj = vbap-cuobj
    CHANGING
      ct_xvbap = xvbap[]
      cs_vbap = vbap ).

*    loop at XVBAP[] into LS_XVBAP.
*
*      modify XVBAP[] from LS_XVBAP transporting UEBTO UNTTO.
*
*    endloop.

    "PaFi 13.07.22 OPHJVC-108 status mapping CAD-node <-> item status
    lr_sdu->get_field_from_sdcom( EXPORTING if_cuobj = vbap-cuobj
                                            is_vbak  = vbak
                                  CHANGING  cs_vbap  = vbap ).

  ENDIF.


ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_MOVE_WORKAREA_TO_SDWA
*&---------------------------------------------------------------------*
*       This userexit can be used to move additional work areas to     *
*       the communication table between sales order and variant        *
*       configuration.                                                 *
*                                                                      *
*       Work areas included in table SDWA can be used read only !      *
*       The cannot be changed during the configuration process and     *
*       are not passed back to the sales order.                        *
*                                                                      *
*       This form is called from CONFIGURATION_PROCESSING              *
*                                                                      *
*----------------------------------------------------------------------*
FORM userexit_move_workarea_to_sdwa.

* Example

* sdwa-tname = 'ZZZZZZZZZZ'.
* sdwa-table = ZZZZZZZZZZ.   append sdwa.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_MOVE_FIELD_TO_VBAKKOM
*&---------------------------------------------------------------------*
*       This userexit can be used to move additional fields into the   *
*       sales document header workarea VBAK                            *
*                                                                      *
*       This form is called at the end of form VBAK_FUELLEN_VBAKKOM.   *
*                                                                      *
*----------------------------------------------------------------------*
FORM userexit_move_field_to_vbakkom.

*  VBAK-zzfield = US_VBAKKOM-zzfield2.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_MOVE_FIELD_TO_VBAPKOM
*&---------------------------------------------------------------------*
*       This userexit can be used to move additional fields into the   *
*       sales document line workarea VBAP                              *
*                                                                      *
*       This form is called at the end of form VBAP_FUELLEN_VBAPKOM.   *
*                                                                      *
*----------------------------------------------------------------------*
FORM userexit_move_field_to_vbapkom.

*  VBAP-zzfield = US_VBAPKOM-zzfield2.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_MOVE_FIELD_TO_VBEPKOM
*&---------------------------------------------------------------------*
*       This userexit can be used to move additional fields into the   *
*       sales document schedule line workarea VBEP                     *
*                                                                      *
*       SVBEP-TABIX = 0:  Create schedule line                         *
*       SVBEP-TABIX > 0:  Change schedule line                         *
*                                                                      *
*       This form is called at the end of form VBEP_FUELLEN_VBEPKOM.   *
*                                                                      *
*----------------------------------------------------------------------*
FORM userexit_move_field_to_vbepkom.

*  VBEP-zzfield = US_VBEPKOM-zzfield2.

ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_MOVE_FIELD_TO_VBSN                              *
*---------------------------------------------------------------------*
*       This userexit can be used to move some fields into the sales  *
*       document workarea VBSN.                                       *
*                                                                     *
*       SVBAK-TABIX = 0:  Create data                                 *
*       SVBAK-TABIX > 0:  Change data                                 *
*                                                                     *
*       This form is called at the end of form VBSN_FUELLEN.          *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_move_field_to_vbsn.

*  vbsn-zzfield = xxxx-zzfield2.

ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_MOVE_FIELD_TO_KOMKH                             *
*---------------------------------------------------------------------*
*       This userexit can be used to move some fields into the        *
*       communication workarea for the batch determination.           *
*                                                                     *
*       This form is called from form KOMKH_KOMPH_FUELLEN.            *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_move_field_to_komkh.

*  KOMKH-zzfield = xxxx-zzfield2.

ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_MOVE_FIELD_TO_KOMPH                             *
*---------------------------------------------------------------------*
*       This userexit can be used to move some fields into the        *
*       communication workarea for the batch determination            *
*                                                                     *
*       This form is called from form KOMKH_KOMPH_FUELLEN.            *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_move_field_to_komph.

*  KOMPH-zzfield = xxxx-zzfield2.

ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_CUST_MATERIAL_READ
*&---------------------------------------------------------------------*
*       This userexit can be used to read a different customer-       *
*       material-record.                                              *
*                                                                     *
*       US_KUNNR  - customer number that can be set in order to read  *
*                   a different customer-material-record.             *
*                                                                     *
*       This form is called from form RV_CUSTOMER_MATERIAL_READ.      *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_cust_material_read USING us_kunnr.

* US_KUNNR = xxxx-zzfield1.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_NEW_PRICING_VBAP
*&---------------------------------------------------------------------*
*       This userexit can be used to perform new pricing, dependant   *
*       on the change of datafields.                                  *
*       This routine is not called, when the material number has been *
*       changed.                                                      *
*       Available data-fields:                                        *
*         vbak - header data                                          *
*         vbap - item data     (changed)                              *
*         *vbap - item data (old, before the change)                  *
*                                                                     *
*       Parameter new_pricing controls the new pricing in the calling *
*       form. It can be filled according the the allowed values       *
*       of domain KNPRS (Pricing type), for example:                  *
*       ' ' = no new pricing                                          *
*       B   = Carry out new pricing                                   *
*       C   = Copy manual pricing elements and redetermine the others
*---------------------------------------------------------------------*
FORM userexit_new_pricing_vbap CHANGING new_pricing.

* Example: new pricing, when field 'Route' is changed
* if vbap-route ne *vbap-route.
*   new_pricing = 'B'.
* endif.

*  IF vbak-vkorg = '4000'. "Solo Cipasi
*    IF vbap-lgort NE *vbap-lgort.
* APC20250121 Queremos determinar pricing completo siempre que se cambie el almacén a/desde CM*
  IF ( vbap-lgort(2) = 'CM' AND *vbap-lgort(2) NE 'CM' ) OR
     ( vbap-lgort(2) NE 'CM' AND *vbap-lgort(2) = 'CM' ).
    new_pricing = 'C'.
  ENDIF.
*  ENDIF.

*DFS 20052024 Ampliar acutalización de precios con la asignación de ZZMONTAJE
  IF vbak-vkorg = '2001' OR vbak-vkorg = '2000'.
    FIELD-SYMBOLS: <fs_test> TYPE flag.
    ASSIGN ('(SAPLZSSD01)g_test') TO <fs_test>.

    IF vbap-zzmontaje <> *vbap-zzmontaje.
      new_pricing = 'C'.
    ENDIF.

*    IF vbap-zzrecargo_montaje <> *vbap-zzrecargo_montaje OR vbap-zzimporte_cliche <> *vbap-zzimporte_cliche
*        OR vbap-zzimporte_troquel <> *vbap-zzimporte_troquel OR vbap-zzsupanm2 <> *vbap-zzsupanm2.
*      new_pricing = 'C'.
*    ENDIF.

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  USEREXIT_NEW_PRICING_VBKD
*&---------------------------------------------------------------------*
*       This userexit can be used to perform new pricing, dependant   *
*       on the change of datafields                                   *
*                                                                     *
*       Available data-fields:                                        *
*         vbak - header data                                          *
*         vbkd - business data (changed)                              *
*         *vbkd - business data (old, before the change)              *
*                                                                     *
*       Field vbkd-posnr is the item-number of the business data.     *
*       If the field is initial, then vbkd contains the business      *
*       header data.                                                  *
*                                                                     *
*       Parameter new_pricing controls the new pricing in the calling *
*       form. It can be filled according the the allowed values       *
*       of domain KNPRS (Pricing type), for example:                  *
*       ' ' = no new pricing                                          *
*       B   = Carry out new pricing                                   *
*       C   = Copy manual pricing elements and redetermine the others
*---------------------------------------------------------------------*
FORM userexit_new_pricing_vbkd CHANGING new_pricing.

*  DATA: et_xkwert            TYPE zscott0002_kbert,
*        lv_recalcular_precio TYPE flag.
*
*  CALL FUNCTION 'ZSCO002_CALCULO_RV64A901'
*    EXPORTING
*      i_vbak    = vbak
*    IMPORTING
*      et_xkwert = et_xkwert.
*
*  IF et_xkwert[] IS NOT INITIAL.
*    LOOP AT xvbap[] INTO DATA(ls_xvbap).
*      IF lv_recalcular_precio = abap_true.
*        EXIT.
*      ENDIF.
*      LOOP AT xkomv[] INTO DATA(ls_xkomv) WHERE kschl+0(3) EQ 'ZC0'
*                                            AND kposn = ls_xvbap-posnr.
*        IF lv_recalcular_precio = abap_true.
*          EXIT.
*        ENDIF.
*        READ TABLE et_xkwert INTO DATA(ls_xkwert) WITH KEY posnr = ls_xvbap-posnr
*                                                           kschl = ls_xkomv-kschl.
*        IF sy-subrc = 0.
*          IF ls_xkwert-kwert <> ls_xkomv-kwert.
*            lv_recalcular_precio = abap_true.
*            EXIT.
*          ENDIF.
*        ENDIF.
*      ENDLOOP.
*    ENDLOOP.
*
*    IF lv_recalcular_precio EQ abap_true.
*      new_pricing = 'C'.
*    ENDIF.
*
*  ENDIF.

ENDFORM.
