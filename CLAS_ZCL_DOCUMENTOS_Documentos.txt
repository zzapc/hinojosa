
class ZCL_DOCUMENTOS definition
  public
  final
  create public .

public section.

  type-pools ABAP .
  class-methods CARGAR_DOCUMENTO
    importing
      !FICHERO type STRING
      !SERVIDOR type ABAP_BOOL default ''
    changing
      !DOCUMENTO type ZDOCUMENTOS .
  class-methods GRABAR_DOCUMENTO
    importing
      !DOCUMENTO type ZDOCUMENTOS
      !FICHERO type STRING .
  class-methods GET_DIRECTORIO_TEMPORAL
    returning
      value(DIRECTORIO) type STRING .
  class-methods GET_NOMBRE_FICHERO_TEMPORAL
    importing
      !DOCUMENTO type ZDOCUMENTOS
    returning
      value(FICHERO_LOCAL) type STRING .
  class-methods EXISTE_FICHERO
    importing
      !FICHERO type STRING
    returning
      value(EXISTE) type ABAP_BOOL .
  class-methods GRABAR_DOCUMENTO_TEMPORAL
    importing
      !TCODE type ZDOCUMENTOS-TCODE
      !NOMBRE type ZDOCUMENTOS-NOMBRE
      !DOCUMENTO type ZDOCUMENTOS
    returning
      value(FICHERO) type STRING .
  class-methods VISUALIZAR_DOCUMENTO
    importing
      !TCODE type ANY default SY-CPROG
      !NOMBRE type ANY .
  class-methods POPUP_DOCUMENTO
    importing
      !OPERACION type CHAR1
    changing
      !DOCUMENTO type ZEST_DOCUMENTO .
  class-methods CREAR_DOCUMENTO
    importing
      !TCODE type ZDOCUMENTOS-TCODE
      !NOMBRE type ZDOCUMENTOS-NOMBRE
      !SERVIDOR type ABAP_BOOL default ''
      !FICHERO type STRING .
  class-methods POPUP_LIST
    importing
      !TCODE type ANY default SY-CPROG .
  class-methods MATCHCODE_DOCUMENTOS
    importing
      !TCODE type ANY optional
    returning
      value(NOMBRE) type ZDOCUMENTOS-NOMBRE .
  class-methods EXISTE_DOC
    importing
      !TCODE type ANY default SY-CPROG
      !NOMBRE type ANY
    returning
      value(EXISTE) type ABAP_BOOL .
protected section.
private section.
endclass. "ZCL_DOCUMENTOS definition
class ZCL_DOCUMENTOS implementation.
  method CARGAR_DOCUMENTO.
      TYPES: BEGIN OF t_linea,
          c(65535),
         END OF t_linea.
  DATA: i_tabla TYPE TABLE OF t_linea,
        l_long  TYPE i,
        l_fichero TYPE string.

  l_fichero = zcl_ficheros=>limpiar_fichero( fichero ).

  documento-extension = zcl_ficheros=>get_extension( l_fichero ).

  IF servidor IS INITIAL.
    CALL METHOD cl_gui_frontend_services=>gui_upload
      EXPORTING
        filetype                = 'BIN'
        filename                = l_fichero
      IMPORTING
        filelength              = l_long
      CHANGING
        data_tab                = i_tabla
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        not_supported_by_gui    = 17
        error_no_gui            = 18
        OTHERS                  = 19.
  ELSE.
    zcl_ficheros=>lee_fich_servidor( EXPORTING fichero = l_fichero
                                     modo_texto = ''
                                     mostrar_mensajes = 'X'
                                     IMPORTING longitud = l_long
                                     CHANGING tabla = i_tabla ).
  ENDIF.
  documento-longitud = l_long.

  CALL FUNCTION 'SWA_STRING_FROM_TABLE'
    EXPORTING
      character_table            = i_tabla
    IMPORTING
      character_string           = documento-string
    EXCEPTIONS
      no_flat_charlike_structure = 1
      OTHERS                     = 2.

*  DATA izip TYPE REF TO cl_abap_zip.
*  DATA zip_file TYPE xstring.
*
*  CREATE OBJECT izip.
*
*  zip_file = documento-string.
*  izip->add( name = l_fichero
*             content = zip_file ).
*
*  zip_file = izip->save( ).
*  IF NOT zip_file IS INITIAL.
*    documento-string = zip_file.
*    documento-comprimido = 'X'.
*  ENDIF.
  endmethod.
  method CREAR_DOCUMENTO.
      DATA l_documento TYPE zdocumentos.

  CLEAR l_documento.
  l_documento-tcode  = tcode.
  l_documento-nombre = nombre.
  l_documento-fichero = fichero.
  l_documento-erdat  = sy-datum.
  l_documento-erzet  = sy-uzeit.
  l_documento-ernam  = sy-uname.
  zcl_documentos=>cargar_documento( EXPORTING fichero   = fichero
                                              servidor  = servidor
                                     CHANGING documento = l_documento ).
  MODIFY zdocumentos FROM l_documento.
  endmethod.
  method EXISTE_DOC.
    data doc type zdocumentos.

  clear existe.
  select single * from ZDOCUMENTOS
    into doc
   where tcode = tcode
     and nombre = nombre.
  if sy-subrc = 0.
    existe = 'X'.
  endif.
  endmethod.
  method EXISTE_FICHERO.

  existe = cl_gui_frontend_services=>file_exist( fichero ).
  endmethod.
  method GET_DIRECTORIO_TEMPORAL.
      call function 'WS_QUERY'
    exporting
      environment    = 'TEMP'
      query          = 'EN'
    importing
      return         = directorio
    exceptions
      inv_query      = 1
      no_batch       = 2
      frontend_error = 3
      others         = 4.
  endmethod.
  method GET_NOMBRE_FICHERO_TEMPORAL.
      data: l_directorio type string,
        l_cont(2),
        l_salir,
        l_rc type i,
        l_extension type string.

  l_directorio = get_directorio_temporal( ).

  while l_salir = ''.
    concatenate l_directorio '\' documento-nombre l_cont
           into fichero_local.

    l_extension = zcl_ficheros=>get_extension( fichero_local ).
    if l_extension is initial.
      l_extension = zcl_ficheros=>get_extension( documento-fichero ).
      concatenate fichero_local '.' l_extension into fichero_local.
    endif.

    if existe_fichero( fichero_local ) = 'X'.
      cl_gui_frontend_services=>file_delete(
                                  exporting filename = fichero_local
                                             changing rc = l_rc
        exceptions
          file_delete_failed   = 1
          cntl_error           = 2
          error_no_gui         = 3
          file_not_found       = 4
          access_denied        = 5
          unknown_error        = 6
          not_supported_by_gui = 7
          wrong_parameter      = 8
          others               = 9 ).


      if existe_fichero( fichero_local ) = 'X'.
        add 1 to l_cont.
      else.
        l_salir = 'X'.
      endif.
    else.
      l_salir = 'X'.
    endif.

    if l_cont = '99'.
      l_salir = 'X'.
    endif.

  endwhile.


  endmethod.
  method GRABAR_DOCUMENTO.
      TYPES: BEGIN OF t_linea,
          c(65535),
         END OF t_linea.
  DATA: i_tabla TYPE TABLE OF t_linea,
        l_long  TYPE i.

  CALL FUNCTION 'SWA_STRING_TO_TABLE'
    EXPORTING
      character_string           = documento-string
    IMPORTING
      character_table            = i_tabla
    EXCEPTIONS
      no_flat_charlike_structure = 1
      OTHERS                     = 2.

  IF documento-longitud IS INITIAL.
    l_long = STRLEN( documento-string ).
  ELSE.
    l_long = documento-longitud.
  ENDIF.
  cl_gui_frontend_services=>gui_download(
  EXPORTING
    bin_filesize              = documento-longitud
    filename                  = fichero
    filetype                  = 'BIN'
  CHANGING
    data_tab                  = i_tabla ).
  endmethod.
  method GRABAR_DOCUMENTO_TEMPORAL.
      data: l_documento type zdocumentos.

  if documento is initial.
    select single * from zdocumentos
      into l_documento
     where tcode  = tcode
       and nombre = nombre.
    if sy-subrc ne 0.
      message e398(00) with 'No existe doc.' tcode nombre.
    endif.
  else.
    l_documento = documento.
  endif.

  if not l_documento is initial.
    fichero = get_nombre_fichero_temporal( l_documento ).
    if not fichero is initial.
      grabar_documento( documento = l_documento
                        fichero   = fichero ).
    endif.
  endif.

  endmethod.
  method MATCHCODE_DOCUMENTOS.
    DATA: o_popup TYPE REF TO zcl_ap_matchcode_z,
        i_docs TYPE table of zdocumentos,
        l_doc type zdocumentos.

  SELECT * FROM zdocumentos
    INTO table i_docs
   WHERE tcode = tcode.


  CREATE OBJECT o_popup.

  o_popup->add_field( tabname = 'ZDOCUMENTOS' field = 'NOMBRE'
                      selectflag = 'X' ).

  LOOP AT i_docs into l_doc.
    o_popup->add_valor( l_doc-nombre ).
  ENDLOOP.

  o_popup->matchcode( EXPORTING tabname = 'ZDOCUMENTOS'
                                field   = 'NOMBRE'
                      CHANGING  valor   = nombre ).


  endmethod.
  method POPUP_DOCUMENTO.

  call function 'Z_POPUP_DOCUMENTO'
    exporting
      operacion = operacion
    changing
      documento = documento.
  endmethod.
  method POPUP_LIST.

  TYPE-POOLS: slis.
  DATA: gt_outtab TYPE TABLE OF zest_documento,
        gs_private TYPE slis_data_caller_exit,
        gs_selfield TYPE slis_selfield,
        gt_fieldcat TYPE slis_t_fieldcat_alv,
        lt_fieldcat TYPE slis_fieldcat_alv,
        g_exit(1) TYPE c,
        l_doc TYPE zest_documento.

  SELECT * FROM zdocumentos
    INTO CORRESPONDING FIELDS OF TABLE gt_outtab
   WHERE tcode = tcode.

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZEST_DOCUMENTO'
    CHANGING
      ct_fieldcat      = gt_fieldcat[].

  READ TABLE gt_fieldcat INTO lt_fieldcat
            WITH KEY fieldname = 'TCODE'.
  IF sy-subrc = 0.
    lt_fieldcat-no_out = 'X'.
    MODIFY gt_fieldcat FROM lt_fieldcat INDEX sy-tabix.
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_POPUP_TO_SELECT'
       EXPORTING
            i_title                 = 'Seleccione documento'
*           I_SELECTION             = 'X'
*           I_ZEBRA                 = ' '
*           I_SCREEN_START_COLUMN   = 0
*           I_SCREEN_START_LINE     = 0
*           I_SCREEN_END_COLUMN     = 0
*           I_SCREEN_END_LINE       = 0
*           I_CHECKBOX_FIELDNAME    =
*           I_LINEMARK_FIELDNAME    =
*           I_SCROLL_TO_SEL_LINE    = 'X'
            i_tabname               = '1'
            it_fieldcat             = gt_fieldcat[]
*           IT_EXCLUDING            =
*           I_CALLBACK_PROGRAM      =
*           I_CALLBACK_USER_COMMAND =
            is_private              = gs_private
     IMPORTING
            es_selfield             = gs_selfield
            e_exit                  = g_exit
       TABLES
            t_outtab                = gt_outtab
       EXCEPTIONS
            program_error           = 1
            OTHERS                  = 2.
  IF sy-subrc = 0.
    READ TABLE gt_outtab INTO l_doc INDEX  gs_selfield-tabindex.
    IF sy-subrc = 0.
      visualizar_documento( tcode   = l_doc-tcode
                            NOMBRE  = l_doc-NOMBRE ).
    ENDIF.
  ENDIF.

  endmethod.
  method VISUALIZAR_DOCUMENTO.
      DATA: l_documento TYPE zdocumentos,
        l_fichero TYPE string.

  SELECT SINGLE * FROM zdocumentos
    INTO l_documento
   WHERE tcode  = tcode
     AND nombre = nombre.
  IF sy-subrc = 0.
    IF l_documento-longitud = 0.
      l_fichero = l_documento-fichero.
    ELSE.
      l_fichero = grabar_documento_temporal( tcode = tcode nombre = nombre DOCUMENTO = l_documento ).
    ENDIF.
    IF NOT l_fichero IS INITIAL.
      zcl_gos=>visualizar_fichero_st( l_fichero ).
    ENDIF.
  ENDIF.
  endmethod.
