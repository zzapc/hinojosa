***INCLUDE RSEOUTF0.

* Formroutines
*---------------------------------------------------------------------*
*       FORM SELECT_ALL_EDIDC                                         *
*---------------------------------------------------------------------*
*       fill internal table IDOCTAB  with all selected EDIDC-records  *
*---------------------------------------------------------------------*
FORM select_all_edidc.

  DATA: select_all_use(1).

  DATA: BEGIN OF itab_doctyp OCCURS 0,
          sign(1),
          option(2),
          low       LIKE edidc-doctyp,
          high      LIKE edidc-doctyp,
        END OF itab_doctyp.

  DATA: BEGIN OF itab_idoctp OCCURS 0,
          sign(1),
          option(2),
          low       LIKE edidc-idoctp,
          high      LIKE edidc-idoctp,
        END OF itab_idoctp.

  DATA: BEGIN OF itab_rcvpor OCCURS 0,
          sign(1),
          option(2),
          low       LIKE edidc-rcvpor,
          high      LIKE edidc-rcvpor,
        END OF itab_rcvpor.

  DATA: BEGIN OF itab_rcvprt OCCURS 0,
          sign(1),
          option(2),
          low       LIKE edidc-rcvprt,
          high      LIKE edidc-rcvprt,
        END OF itab_rcvprt.

  DATA: BEGIN OF itab_rcvpfc OCCURS 0,
          sign(1),
          option(2),
          low       LIKE edidc-rcvpfc,
          high      LIKE edidc-rcvpfc,
        END OF itab_rcvpfc.

  DATA: BEGIN OF itab_outmod OCCURS 0,
          sign(1),
          option(2),
          low       LIKE edidc-outmod,
          high      LIKE edidc-outmod,
        END OF itab_outmod.
*qrfc
  DATA: q_anzahl TYPE i.
  DATA: act_rcvpor LIKE ediqo-rcvpor.
  DATA: act_qname  LIKE ediqo-qname.
  DATA: max_counter LIKE ediqo-counter.
*qrfc
  DATA: edi_global TYPE edi_glo.

  REFRESH int_edidc.
  CLEAR int_edidc.
  help_anzahl = 0.

  CLEAR itab_idoctp.
  IF p_idoctp NE space.
    itab_idoctp-sign = 'I'.
    itab_idoctp-option = 'EQ'.
    itab_idoctp-low = p_idoctp.
    APPEND itab_idoctp.
  ENDIF.

  CLEAR itab_rcvpor.
  IF p_rcvpor NE space.
    itab_rcvpor-sign = 'I'.
    itab_rcvpor-option = 'EQ'.
    itab_rcvpor-low = p_rcvpor.
    APPEND itab_rcvpor.
  ENDIF.

  CLEAR itab_rcvprt.
  IF p_rcvprt NE space.
    itab_rcvprt-sign = 'I'.
    itab_rcvprt-option = 'EQ'.
    itab_rcvprt-low = p_rcvprt.
    APPEND itab_rcvprt.
  ENDIF.

  CLEAR itab_rcvpfc.
  IF p_rcvpfc NE space.
    itab_rcvpfc-sign = 'I'.
    itab_rcvpfc-option = 'EQ'.
    itab_rcvpfc-low = p_rcvpfc.
    APPEND itab_rcvpfc.
  ENDIF.

  CLEAR itab_outmod.
  IF p_outmod NE space.
    itab_outmod-sign = 'I'.
    itab_outmod-option = 'EQ'.
    itab_outmod-low = p_outmod.
    APPEND itab_outmod.
  ENDIF.
* überprüfen, ob DOCNUM als Selektion benutzt wurde -> all entries ben.
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
*     PERCENTAGE = 0
      text = text-001.
  select_all_use = 'Y'.    "nur Einzelwerte wurden übergeben f. Docnum
  LOOP AT docnum.
    IF docnum-sign NE 'I' OR docnum-option NE 'EQ'.
      select_all_use = 'N'.
      EXIT.
    ENDIF.
  ENDLOOP.
  IF sy-subrc NE 0.             "docnum ist leer, kann man nicht nutzen:
    select_all_use = 'N'.       "select forall entries from
  ENDIF.
  IF select_all_use = 'N'.
    SELECT * FROM edidc INTO CORRESPONDING FIELDS OF TABLE int_edidc
                     UP TO p_nidocs ROWS
                    WHERE status EQ '30'
                    AND docnum IN docnum
                    AND rcvprn IN rcvprn
                    AND mestyp IN mestyp
                    AND upddat IN upddat
                    AND updtim IN updtim
                    AND idoctp IN itab_idoctp
                    AND rcvpor IN itab_rcvpor
                    AND rcvprt IN itab_rcvprt
                    AND rcvpfc IN itab_rcvpfc
                    AND outmod IN itab_outmod
                    AND test   EQ p_test.
*     MOVE EDIDC-RCVPOR TO INT_EDIDC-RCVPOR_SORT.
*     APPEND INT_EDIDC.
  ELSE.          "select_all_use = 'Y'
    SELECT * FROM edidc INTO CORRESPONDING FIELDS OF TABLE int_edidc
                          UP TO p_nidocs ROWS
                    FOR ALL ENTRIES IN docnum
                    WHERE status EQ '30'
                    AND docnum = docnum-low
                    AND rcvprn IN rcvprn
                    AND mestyp IN mestyp
                    AND upddat IN upddat
                    AND updtim IN updtim
                    AND idoctp IN itab_idoctp
                    AND rcvpor IN itab_rcvpor
                    AND rcvprt IN itab_rcvprt
                    AND rcvpfc IN itab_rcvpfc
                    AND outmod IN itab_outmod
                    AND test   EQ p_test.
*     MOVE EDIDC-OUTMOD TO INT_EDIDC-OUTMOD_SORT.
  ENDIF.
  DESCRIBE TABLE int_edidc LINES help_anzahl.
  REFRESH queue_docnum.
  LOOP AT int_edidc.
    int_edidc-outmod_sort = int_edidc-outmod.
    int_edidc-rcvpor_sort = int_edidc-rcvpor.
    MODIFY int_edidc.
  ENDLOOP.
  IF sy-subrc NE 0.      " no IDOC was found
    IF sy-batch IS NOT INITIAL.
      CLEAR edi_global.
      CALL FUNCTION 'IDOC_READ_GLOBAL'
        IMPORTING
          global_data    = edi_global
        EXCEPTIONS
          internal_error = 0
          OTHERS         = 0.
      IF edi_global-avmsg <> 'X'.
        IF p_show_w EQ 'O'.
          MESSAGE i092.
        ENDIF.
      ENDIF.
    ELSE.
      IF p_show_w EQ 'O'.
        MESSAGE i092.
      ENDIF.
    ENDIF.
*    IF P_SHOW_W EQ 'O'.
*      MESSAGE I092.
*    ENDIF.
    EXIT.
  ENDIF.
  MOVE help_anzahl TO number_of_idocs.
* authority-check in case of started via BD87
  IF sy-tcode EQ 'BD87'.
    LOOP AT int_edidc.
      AUTHORITY-CHECK OBJECT   authority_obj_edi_monitor
        ID 'EDI_TCD' FIELD authority_tcode_rseidoc2
        ID 'ACTVT' FIELD authority_activity_display
        ID 'EDI_DIR' FIELD int_edidc-direct
        ID 'EDI_MES' FIELD int_edidc-mestyp
        ID 'EDI_PRN' FIELD int_edidc-rcvprn
        ID 'EDI_PRT' FIELD int_edidc-rcvprt.
      IF sy-subrc NE 0.
        MESSAGE i285(b1) WITH int_edidc-docnum.
        DELETE int_edidc.
      ENDIF.
    ENDLOOP.
    DESCRIBE TABLE int_edidc LINES help_anzahl.
    IF help_anzahl EQ 0.
      MESSAGE i092.
      EXIT.
    ENDIF.
    MOVE help_anzahl TO number_of_idocs.
  ENDIF.
  int_edidc_pak[] = int_edidc[].
* qrfc begin -1-
  IF p_queue IS INITIAL. " dann erst mal die ausfiltern, die zu einer
    " queue gehören
    SELECT * FROM ediqo INTO TABLE i_ediqo
             FOR ALL ENTRIES IN int_edidc
             WHERE docnum EQ int_edidc-docnum.
    LOOP AT i_ediqo.
      IF i_ediqo-processed EQ 'X'.
        DELETE i_ediqo.
      ENDIF.
    ENDLOOP.
    DESCRIBE TABLE i_ediqo LINES q_anzahl.
    IF q_anzahl GT 0.
* dann müsen alle IDocs aus i_ediqo besondert behandelt werden
* und der Rest der IDocs muß seinen normalen Weg gehen
* löschen aus int_edidc und bringen in queue_docnum
      REFRESH queue_docnum.
      LOOP AT i_ediqo.
        LOOP AT int_edidc WHERE docnum EQ i_ediqo-docnum.
          APPEND int_edidc TO queue_docnum.
          DELETE int_edidc.
          EXIT.
        ENDLOOP.
      ENDLOOP.
* Queuebehandlung der IDocs
      SORT i_ediqo. "sortiert nach queuename und counter
      int_edidc_pak[] = int_edidc[].
      DO.
        READ TABLE i_ediqo INDEX 1.
        IF sy-subrc NE 0. " kein Eintrag mehr vorhanden
          EXIT.
        ENDIF.
        act_rcvpor = i_ediqo-rcvpor.
        act_qname  = i_ediqo-qname.
        SELECT * FROM ediqo INTO TABLE act_ediqo
                 WHERE qname EQ i_ediqo-qname
                 AND   rcvpor EQ i_ediqo-rcvpor
                 AND   processed EQ ' '.
        SORT act_ediqo.
        LOOP AT i_ediqo WHERE qname EQ act_qname
                        AND   rcvpor EQ act_rcvpor.
          max_counter = i_ediqo-counter.
          DELETE i_ediqo.
        ENDLOOP.
* in max_counter steht der höchste Counter der aktuellen Queue
        " es soll nur bis dorthin versendet werden
        LOOP AT act_ediqo WHERE counter GT max_counter.
          DELETE act_ediqo.
        ENDLOOP.
* in act_ediqo stehen alle IDocs zu einer Queue/Empfänger
        " mit den Feldern der IDoc-Ausgangs-Queue
        " dabei sind auch die IDocs, die den Selektionskriterien
        " nicht genügen
* in i_ediqo stehen alle noch in queue zu versendenden IDocs
        " mit den Feldern der IDoc-Ausgangs-Queue
        " sie entsprachen den Selektionskriterien
* in int_edidc_pak stehen alle nicht in queue zu versendenden IDocs
        " mit den Feldern des Kontrollsatzes
* in queue_docnum stehen alle in queue zu versendenden IDocs
        " mit den Feldern des Kontrollsatzes
        " sie entsprachen den Selektionskriterien
*
* wurden alle IDocs für die Queue selektiert?
        REFRESH int_edidc.
        LOOP AT act_ediqo.
          LOOP AT queue_docnum WHERE docnum EQ act_ediqo-docnum.
            APPEND queue_docnum TO int_edidc.
            DELETE queue_docnum.
            EXIT.
          ENDLOOP.
          IF sy-subrc NE 0. "dieses IDoc wurde nicht selektiert
            "steht aber in der Queue
            "und wirklich vor den Selektierten
            IF p_compl EQ 'N'.
              EXIT. "für diesen Port nicht weiter senden
            ELSE."nachlesen dieses IDocs
              SELECT SINGLE * FROM edidc
                     WHERE docnum EQ act_ediqo-docnum.
              IF edidc-status EQ '26'.
                IF p_compl EQ 'S'.
                  EXIT."für diesen Port nicht weiter senden
                ENDIF.
              ENDIF.
              MOVE-CORRESPONDING edidc TO int_edidc.
              MOVE edidc-outmod TO int_edidc-outmod_sort.
              MOVE edidc-rcvpor TO int_edidc-rcvpor_sort.
              APPEND int_edidc.
            ENDIF.
          ENDIF.
        ENDLOOP." act_ediqo
        DESCRIBE TABLE int_edidc LINES help_anzahl.
        IF help_anzahl EQ 0.
          CONTINUE."dann muß gar nichts versendet werden
        ENDIF.
        PERFORM process_paket_in_queue
                TABLES act_ediqo
                USING  p_anzahl act_rcvpor act_qname.
      ENDDO. "Schleife zur Abarbeitung aller Queues
    ENDIF.
    DESCRIBE TABLE int_edidc_pak LINES help_anzahl.
* qrfc end -1-

    IF help_anzahl GT p_anzahl      " some pakets
* in INT_EDIDC are more than maximum number of IDOCs
          AND p_anzahl NE 0.          " maximum is defined
      SORT int_edidc_pak BY outmod_sort rcvpor_sort serial docnum.
      REFRESH int_edidc.
      CLEAR int_edidc.
      help_anzahl = 0.
      LOOP AT int_edidc_pak.
        MOVE int_edidc_pak TO int_edidc.
        APPEND int_edidc.
        ADD 1 TO help_anzahl.
        IF help_anzahl EQ p_anzahl.
          SORT int_edidc BY outmod_sort rcvpor_sort serial docnum.
          PERFORM process_paket.
          REFRESH int_edidc.
          CLEAR int_edidc.
          help_anzahl = 0.
        ENDIF.
      ENDLOOP.
      IF help_anzahl NE 0.
        SORT int_edidc BY outmod_sort rcvpor_sort serial docnum.
        PERFORM process_paket.
      ENDIF.
    ELSE.                           " one paket
      int_edidc[] = int_edidc_pak[].
      SORT int_edidc BY outmod_sort rcvpor_sort serial docnum.
      PERFORM process_paket.
    ENDIF.
* qrfc begin -2-
  ELSE. "queue-name wurde übergeben
    " -> die interne Tabelle der den anderen Selektionskriterien genügenden
    "    IDocs muß gegen die Queuetabelle abgeglichen werden,
    "    wenn es die Queue erfordert, müssen auch davor stehende IDocs
    "    versendet werden - wenn 'Y' für komplettes Senden gesetzt
    "    oder andersherum (die IDocs dürfen nur so lange versendet werden,
    "    wie sie auch sequentiell in der richtigen Reihenfolge in der Queue stehen??
    "    zweiteres ist für # 'Y' für komplettes senden
    IF NOT p_rcvpor IS INITIAL. " genau eine Queue für einen Port
      REFRESH i_ediqo.
      SELECT * FROM ediqo INTO TABLE i_ediqo
               WHERE qname EQ p_queue
               AND   rcvpor EQ p_rcvpor
               AND   processed EQ ' '.
      READ TABLE i_ediqo INDEX 1.                       "#EC CI_NOORDER
      IF sy-subrc NE 0.        "nichs selektiert
        IF p_show_w EQ 'O'.
          MESSAGE i092.
        ENDIF.
        EXIT.
      ENDIF.
      " IDocs aus i_ediqo der Reihe nach in int_edidc nachlesen
      " solange sie in int_edidc stehen, können sie versendet werden
      " sobald das sequetiell erste gefunden wird, das nicht in int_edidc
      " steht, wird beim Wert # 'Y' für komplettes Senden
      " aufgehört, um die Queue-Reihenfolge zu garantieren und den
      " Selektionskriterien zu genügen  - sonst werden alle mit versendet
      SORT i_ediqo.
      " bis zu welchem Counter soll wirklich versendet werden?
      max_counter = 0.
      LOOP AT int_edidc.
        LOOP AT i_ediqo WHERE docnum EQ int_edidc-docnum.
          IF max_counter LT i_ediqo-counter.
            max_counter = i_ediqo-counter.
          ENDIF.
          EXIT.
        ENDLOOP.
      ENDLOOP.
      " nur bis max_counter versenden
      LOOP AT i_ediqo WHERE counter GT max_counter.
        DELETE i_ediqo.
      ENDLOOP.
      " nun stehen in i_ediqo nur die zu versendenden IDocs
      int_edidc_pak[] = int_edidc[].
      REFRESH int_edidc.
      CLEAR int_edidc.
      LOOP AT i_ediqo.
        LOOP AT int_edidc_pak WHERE docnum EQ i_ediqo-docnum.
          APPEND  int_edidc_pak TO int_edidc.
          DELETE int_edidc_pak.
          EXIT.
        ENDLOOP.
        IF sy-subrc NE 0. " dieses IDoc nicht gefunden
          IF p_compl EQ 'N'.
            EXIT.
          ELSE. " nachlesen
            SELECT SINGLE * FROM edidc
                   WHERE docnum EQ i_ediqo-docnum.
            IF edidc-status EQ '26'.
              IF p_compl EQ 'S'.
                EXIT."nicht weiter senden
              ENDIF.
            ENDIF.
            MOVE-CORRESPONDING edidc TO int_edidc.
            MOVE edidc-outmod TO int_edidc-outmod_sort.
            MOVE edidc-rcvpor TO int_edidc-rcvpor_sort.
            APPEND int_edidc.
          ENDIF.
        ENDIF.
      ENDLOOP.
      DESCRIBE TABLE int_edidc LINES help_anzahl.
      IF help_anzahl EQ 0. " kein IDoc gefunden
        IF p_show_w EQ 'O'.
          MESSAGE i092.
        ENDIF.
        EXIT.
      ENDIF.
* für den Fall 'mit queue' ist eindeutig klar, dass an ein tRFC geschickt
* werden muß - und der neue Baustein gerufen werden muß
* hier wird auch genau ein Port bedient
* also muß man nicht den allgemeinen Weg gehen
      PERFORM process_paket_in_queue TABLES i_ediqo
                                     USING  p_anzahl p_rcvpor p_queue.
    ELSE. " eine Queue für alle Ports dieser Queue
      REFRESH i_ediqo.
      SELECT * FROM ediqo INTO TABLE i_ediqo
               WHERE qname EQ p_queue
               AND   processed EQ ' '.
      READ TABLE i_ediqo INDEX 1.                       "#EC CI_NOORDER
      IF sy-subrc NE 0.       "nichs selektiert
        IF p_show_w EQ 'O'.
          MESSAGE i092.
        ENDIF.
        EXIT.
      ENDIF.
* jetzt gilt es Pakete zu bilden pro Empfängerport
* ohne die Queuereihenfolge pro Port zu verlieren
      SORT i_ediqo.
      int_edidc_pak[] = int_edidc[].
      REFRESH int_edidc.

      DO.
        READ TABLE i_ediqo INDEX 1.
        IF sy-subrc NE 0. " keine IDocs mehr zu verschicken
          EXIT.
        ENDIF.
        " alle Idocs suchen, die an den gleichen Port gehen wie
        " das erste
        help_rcvpor = i_ediqo-rcvpor.
        REFRESH act_ediqo.
        CLEAR max_counter.
        LOOP AT i_ediqo WHERE rcvpor EQ help_rcvpor.
          APPEND i_ediqo TO act_ediqo.
          DELETE i_ediqo.
        ENDLOOP.
        " nur bis zum max-counter
        max_counter = 0.
        LOOP AT int_edidc_pak WHERE rcvpor EQ help_rcvpor.
          LOOP AT act_ediqo WHERE docnum EQ int_edidc_pak-docnum.
            IF max_counter LT act_ediqo-counter.
              max_counter = act_ediqo-counter.
            ENDIF.
            EXIT.
          ENDLOOP.
        ENDLOOP.
        LOOP AT act_ediqo WHERE counter GT max_counter.
          DELETE act_ediqo.
        ENDLOOP.
* jetzt ist ein Paket geschnürt, pro Paket die IDocs aus der
* Selektionsmenge suchen, sobald ein IDoc nicht gefunden wird, wird
* für diesen Port aufgehört, wenn # 'Y' für komplett senden
* sonst (='Y') muss nachgelesen werden
        REFRESH int_edidc.
        LOOP AT act_ediqo.
          LOOP AT int_edidc_pak WHERE docnum EQ act_ediqo-docnum.
            APPEND int_edidc_pak TO int_edidc.
            DELETE int_edidc_pak.
            EXIT.
          ENDLOOP.
          IF sy-subrc NE 0. "dieses IDoc nicht gefunden
            IF p_compl EQ 'N'.  "nicht komplettes senden
              EXIT.         "->für diesen Port sofort aufhören
            ELSE.
              SELECT SINGLE * FROM edidc
                     WHERE docnum EQ act_ediqo-docnum.
              IF edidc-status EQ '26'.
                IF p_compl EQ 'S'.
                  EXIT."für diesen Port nicht weiter senden
                ENDIF.
              ENDIF.
              MOVE-CORRESPONDING edidc TO int_edidc.
              MOVE edidc-outmod TO int_edidc-outmod_sort.
              MOVE edidc-rcvpor TO int_edidc-rcvpor_sort.
              APPEND int_edidc.
            ENDIF.
          ENDIF.
        ENDLOOP.
        DESCRIBE TABLE int_edidc LINES help_anzahl.
        IF help_anzahl EQ 0.
          CONTINUE.
        ENDIF.
        PERFORM process_paket_in_queue
                    TABLES act_ediqo
                    USING  p_anzahl help_rcvpor p_queue.
      ENDDO.
    ENDIF.
  ENDIF.
* qrfc end -2-

  IF p_show_w EQ 'O'.
    MESSAGE i037 WITH number_of_idocs.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*   FORM PROCESS_PAKET_in_queue                                       *
*---------------------------------------------------------------------*
FORM process_paket_in_queue  TABLES     pt_ediqo STRUCTURE ediqo
                             USING anzahl_commit LIKE edi_help2-anzahl
                                  port  LIKE ediqo-rcvpor
                                  queue LIKE ediqo-qname.
  DATA: counter     LIKE edi_help2-anzahl,
        max_counter LIKE edi_help2-anzahl.
  DATA: rc LIKE sy-subrc.
* in int_edidc stehen die IDocs in der richtigen Reihenfolge zum senden
* in die qRFC-Queue
* in help_anzahl steht die Anzahl der IDocs

  IF anzahl_commit GE help_anzahl."alles in einem Ruf
    REFRESH com_edidc.
    LOOP AT int_edidc.
      MOVE int_edidc+11 TO com_edidc.
      APPEND com_edidc.
    ENDLOOP.
    CALL FUNCTION 'IDOCS_OUTPUT_IN_QRFC'
      EXPORTING
        qname                     = queue
        portname                  = port
      TABLES
        i_edidc                   = com_edidc
        i_ediqo                   = pt_ediqo
      EXCEPTIONS
        no_full_sending_via_queue = 1
        OTHERS                    = 2.
    IF sy-subrc <> 0.
    ENDIF.
    COMMIT WORK.
    CALL FUNCTION 'DEQUEUE_ALL'
*      EXPORTING
*         _SYNCHRON = ' '
      EXCEPTIONS
        OTHERS = 1.

  ELSE."Pakete packen
    REFRESH com_edidc.
    counter = 0.
    max_counter = 0.
    LOOP AT int_edidc.
      MOVE int_edidc+11 TO com_edidc.
      APPEND com_edidc.
      ADD 1 TO counter.
      ADD 1 TO max_counter.
      IF counter GE anzahl_commit
        OR max_counter = help_anzahl." dann diesen Teil in queue stellen
        REFRESH int_edidd.
        CLEAR int_edidd.
        CALL FUNCTION 'IDOCS_OUTPUT_IN_QRFC'
          EXPORTING
            qname                     = queue
            portname                  = port
          TABLES
            i_edidc                   = com_edidc
            i_ediqo                   = pt_ediqo
*           I_EDIDD                   = int_edidd
          EXCEPTIONS
            no_full_sending_via_queue = 1
            OTHERS                    = 2.
        IF sy-subrc <> 0.
          rc = sy-subrc.
        ENDIF.
        COMMIT WORK.
        CALL FUNCTION 'DEQUEUE_ALL'
*          EXPORTING
*             _SYNCHRON = ' '
          EXCEPTIONS
            OTHERS = 1.
        REFRESH com_edidc.
        counter = 0.
        IF rc NE 0.
          EXIT. "dann dürfen die nächsten dieser Queue nicht versendet werden
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
* qrfc end -3-


*---------------------------------------------------------------------*
*       FORM PROCESS_PAKET                                            *
*---------------------------------------------------------------------*
*       works about the table INT_EDIDC                               *
*---------------------------------------------------------------------*
FORM process_paket.
* process the IDocs from internal table INT_EDIDC
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
*     PERCENTAGE = 0
      text = text-002.
  MOVE '0' TO oldoutmod.
  MOVE space TO help_rcvpor.
  CLEAR http_soap_ns.
  REFRESH int_edidd.
  CLEAR int_edidd.
  REFRESH com_edidc.
  CLEAR com_edidc.
  LOOP AT int_edidc.
    PERFORM fill_table_to_send.
    IF int_edidc-rcvpor NE help_rcvpor.
      CLEAR http_soap_ns.
      SELECT SINGLE contenttype FROM edipoxh
        INTO http_soap_ns WHERE port EQ int_edidc-rcvpor.
    ENDIF.
    MOVE int_edidc-rcvpor TO help_rcvpor.
    MOVE int_edidc-outmod TO oldoutmod.
  ENDLOOP.
* am Ende muß für den letzten Port/Outmod noch EDI_OUTPUT_NEW gerufen
* werden - für den Fall, daß ausschließlich nur IDocs mit outmod 1/2
* selektiert wurden, gäbe es nichts mehr zu verschicken, dann wäre aber
* die interne Tabelle com_edidc leer.
  IF com_edidc[] IS INITIAL.         " alle IDocs sind versendet
  ELSE.
    REFRESH int_edidd.

    CALL FUNCTION 'EDI_OUTPUT_NEW'
      EXPORTING
        onl_option = 'B'
*       ERROR_FLAG = ' '
*       NAST_RECORD =
      TABLES
        i_edidc    = com_edidc
        i_edidd    = int_edidd
      EXCEPTIONS
        OTHERS     = 1.
    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
*       PERCENTAGE = 0
        text = text-003.
    COMMIT WORK.

    CALL FUNCTION 'DEQUEUE_ALL'
*        EXPORTING
*             _SYNCHRON = ' '
      EXCEPTIONS
        OTHERS = 1.
  ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
*       FORM FILL_TABLE_TO_SEND                                       *
*---------------------------------------------------------------------*
*       works about the table INT_EDIDC                               *
*---------------------------------------------------------------------*
FORM fill_table_to_send.
* Sonderlocke für outmod 1/2, um kompatibel zu 3.0/3.1 zu bleiben:
* dann sollte generell pro IDoc EDI_OUTPUT_NEW gerufen werden
  IF int_edidc-outmod EQ '1' OR int_edidc-outmod EQ '2'.
    REFRESH com_edidc.
    REFRESH int_edidd.
    MOVE int_edidc+11 TO com_edidc.
    APPEND com_edidc.

    CALL FUNCTION 'EDI_OUTPUT_NEW'
      EXPORTING
        onl_option = 'B'             "batch
*       ERROR_FLAG = ' '
*       NAST_RECORD =
      TABLES
        i_edidc    = com_edidc
        i_edidd    = int_edidd
      EXCEPTIONS
        OTHERS     = 1.

    COMMIT WORK.

    CALL FUNCTION 'DEQUEUE_ALL'
*        EXPORTING
*             _SYNCHRON = ' '
      EXCEPTIONS
        OTHERS = 1.

    REFRESH com_edidc.
    EXIT.
  ENDIF.
  IF help_rcvpor NE int_edidc-rcvpor OR oldoutmod NE int_edidc-outmod OR
     http_soap_ns EQ 'N'.
* dann ist ein neues Paket zu packen
* das alte Paket muß zuvor an EDI_OUTPUT_NEW übergeben werden
    IF com_edidc[] IS INITIAL.               "beim ersten Durchlauf
      MOVE int_edidc+11 TO com_edidc.
      APPEND com_edidc.
    ELSE.
      REFRESH int_edidd.
      CALL FUNCTION 'EDI_OUTPUT_NEW'
        EXPORTING
          onl_option = 'B'             "batch
*         ERROR_FLAG = ' '
*         NAST_RECORD =
        TABLES
          i_edidc    = com_edidc
          i_edidd    = int_edidd
        EXCEPTIONS
          OTHERS     = 1.

      CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
        EXPORTING
*         PERCENTAGE = 0
          text = text-003.
      COMMIT WORK.

      CALL FUNCTION 'DEQUEUE_ALL'
*          EXPORTING
*               _SYNCHRON = ' '
        EXCEPTIONS
          OTHERS = 1.

      REFRESH com_edidc.
      MOVE int_edidc+11 TO com_edidc.
      APPEND com_edidc.
    ENDIF.
  ELSE.
* weiter in das Paket packen
    MOVE int_edidc+11 TO com_edidc.
    APPEND com_edidc.
  ENDIF.

ENDFORM.
