
class ZCL_ALV definition
  public
  inheriting from ZCL_AP_ALV
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !TABLA type STRING default 'I_LISTADO'
      !LIST_DISPLAY type ABAP_BOOL default ''
      !CPROG type SY-CPROG default SY-CPROG
      !OPTIMIZE type ABAP_BOOL default 'X'
      !TOP_OF_PAGE type ABAP_BOOL default ' '
      !END_OF_PAGE type ABAP_BOOL default ' '
      !BOTONES_STANDARD type ABAP_BOOL default 'X'
      !COLOR type LVC_FNAME default ' '
      !STATUS type ANY default ' '
      !SEL type C default 'M'
      !CAMPO_CHECK type ANY default 'CHECK'
      !LIGHTS type STRING default ''
      !CONTAINER_NAME type C default ''
      !NO_LAYOUT type ABAP_BOOL default ''
      !R_CONTAINER type ref to CL_GUI_CONTAINER optional
      !RESTRICCION_LAYOUT type INT4 default IF_SALV_C_LAYOUT=>RESTRICT_NONE
      !INICIO_COLUMNA type ANY default ''
      !SIN_BUFFER type ABAP_BOOL default ''
      !TOP_OF_PAGE_AUTO type ABAP_BOOL default ''
      !TOP_OF_PAGE_TITULO type ANY default ''
      !LOGO type ANY default ''
      !STATUS_PROG type ANY default ''
      !GENERAR_DOCKING type INT4 default 0
      !NOMBRE_DOCKING type ANY default 'DOCK_CONT'
      !HANDLE type SLIS_HANDL default ''
      !O_DEV type ref to ZCL_AP_DEV optional
      !NO_AGRUPAR_CELDAS type ANY default '' .
  class-methods VISUALIZAR_OBJ_CLIENTE
    importing
      !HOTSPOT type T_HOTSPOT optional
      !LIST type ANY
      !COLUMN type ANY optional
    exporting
      !SALIDA type STRING
      !MOD type ABAP_BOOL
    returning
      value(MESSAGE) type BAPI_MSG .

  methods SET_FIELD_HOTSPOT
    redefinition .
protected section.
private section.
endclass. "ZCL_ALV definition
class ZCL_ALV implementation.
METHOD constructor.

  CALL METHOD super->constructor
    EXPORTING
      tabla              = tabla
      list_display       = list_display
      cprog              = cprog
      optimize           = optimize
      botones_standard   = botones_standard
      color              = color
      status             = status
      sel                = sel
      campo_check        = campo_check
      lights             = lights
      container_name     = container_name
      r_container        = r_container
      no_layout          = no_layout
      top_of_page_auto   = top_of_page_auto
      top_of_page_titulo = top_of_page_titulo
      logo               = logo
      status_prog        = status_prog
      handle             = handle
      o_dev              = o_dev
      restriccion_layout = restriccion_layout.

ENDMETHOD.
  METHOD set_field_hotspot.
    DATA: i_campos TYPE TABLE OF string,
          l_campo  TYPE string,
          l_aux    TYPE c LENGTH 20.

    IF auto IS INITIAL.
      set_field( op = 'HOTSPOT' campo = campo valor = valor valor2 = valor2 ).
    ELSE.
      SPLIT campo AT ',' INTO TABLE i_campos.
      LOOP AT i_campos INTO l_campo.
        l_campo = to_upper( l_campo ).
        CASE l_campo.
          WHEN 'MSGGUID'.
            set_field( op = 'HOTSPOT' campo = l_campo valor = 'PAYLOAD' ).
          WHEN 'CUOBJ'.
            set_field( op = 'HOTSPOT' campo = l_campo valor = 'CUOBJ' ).
          WHEN OTHERS.
            super->set_field_hotspot( campo  = campo
                                      auto   = auto
                                      valor  = valor
                                      valor2 = valor2 ).
        ENDCASE.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.
  METHOD visualizar_obj_cliente.
    DATA: l_aux1   TYPE text255,
          l_sufijo TYPE string,
          l_text   TYPE text132,
          l_campo  TYPE string,
          l_metodo TYPE string,
          l_clase  TYPE string,
          l_aux2   TYPE text255,
          l_cont   TYPE i,
          tab      TYPE abap_parmbind,
          ptab     TYPE abap_parmbind_tab,
          o_root   TYPE REF TO cx_root.
    DATA l_vbeln TYPE vbeln_va.
    DATA l_ebeln TYPE ebeln.
    DATA l_otype TYPE hrp1000-otype.

    FIELD-SYMBOLS: <valor>  TYPE any,
                   <valor2> TYPE any,
                   <valor3> TYPE any,
                   <valor4> TYPE any,
                   <tabla>  TYPE table.

    CLEAR: mod, salida.

    IF hotspot-campo_ref IS INITIAL.
      ASSIGN COMPONENT column OF STRUCTURE  list TO <valor>.
    ELSE.
      ASSIGN COMPONENT hotspot-campo_ref OF STRUCTURE list TO <valor>.
    ENDIF.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    SPLIT column AT '_' INTO l_aux1 l_sufijo.

    IF NOT <valor> IS INITIAL.
      CASE hotspot-transaccion.
        WHEN 'PAYLOAD'.
          ASSIGN COMPONENT 'PID' OF STRUCTURE list TO FIELD-SYMBOL(<pid>).
          IF sy-subrc = 0.
            DATA l_pid TYPE sxmsmkey-pid.
          ENDIF.
          NEW zcl_ap_proxy( )->get_payload( msgid = CONV #( <valor> )
                                            pid   = l_pid
                                            show  = 'X' ).
          mod = 'C'.
        WHEN 'CUOBJ'.
          zhcl_ai_core=>visualizar_cuobj( CONV #( <valor> ) ).
          mod = 'C'.
        WHEN 'MM03'.
          SET PARAMETER ID 'MAT' FIELD <valor>.
          ASSIGN COMPONENT 'WERKS' OF STRUCTURE list TO FIELD-SYMBOL(<werks>).
          IF sy-subrc = 0.
            SET PARAMETER ID 'WRK' FIELD <werks>.
          ENDIF.
          CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.
          mod = 'C'.
      ENDCASE.
    ENDIF.
  ENDMETHOD.
