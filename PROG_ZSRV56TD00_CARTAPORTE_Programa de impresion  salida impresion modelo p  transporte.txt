REPORT zsrv56td00_cartaporte.

SET EXTENDED CHECK OFF.
TABLES: vbpla, thead, ttxern, ttxit, t005, vbddl, stxh, sadr.   "SADR40A
INCLUDE vttkdata.                      "Shipment Header
INCLUDE vttsdata.                      "Shipment Segment
INCLUDE vttpdata.                      "Shipment Items
INCLUDE vbpadata.                      "Partner
INCLUDE vtfadata.                      "Flow
INCLUDE sadrdata.                      "Address
INCLUDE vtlfdata.                      "Delivery Selection
INCLUDE rvadtabl.                      "Messages
INCLUDE vsedata.                       "shipping units
INCLUDE rv56acom.                      "I/O-Structure
SET EXTENDED CHECK ON.

DATA:
  xscreen(1)              TYPE c,
  retcode                 LIKE sy-subrc VALUE 0,
  there_was_output(1)     TYPE c        VALUE space,
  new_page_was_ordered(1) TYPE c        VALUE space.

CONSTANTS:
  no(1)  VALUE space,
  yes(1) VALUE 'X'.

TABLES : tpar .                                             "n_742056.




"JCB 11.04.24. GAP0105. Pantalla de selección para poder generar el PDF desde programas externos
PARAMETERS: p_tknum   TYPE vttk-tknum,
            p_impr    TYPE xfeld,
            p_previs  type xfeld.

START-OF-SELECTION.
  PERFORM f_start_of_selection.

FORM f_start_of_selection.
  DATA: vl_return_code LIKE retcode,
        vl_us_screen   LIKE xscreen.
  IF p_tknum IS NOT INITIAL.
    nast-spras = sy-langu.
    nast-objky = p_tknum.

    IF p_impr = space.
      nast-nacha = '5'.
      vl_us_screen = 'W'.
    ELSE.
      nast-nacha = '1'.
    ENDIF.

    nast-anzal = 1.

    tnapr-sform     = 'ZSSDF_CARTA_PORTE_TR'.
    tnapr-formtype  = 2.

    PERFORM entry USING vl_return_code vl_us_screen.

*    DATA vl_pdf_file TYPE fpcontent.
*    IMPORT lv_pdf_file = vl_pdf_file FROM MEMORY ID 'PDF_FILE'.
  ENDIF.

ENDFORM.
"FIN JCB 11.04.24. GAP0105. Pantalla de selección para poder generar el PDF desde programas externos


***********************************************************************
*       FORM ENTRY                                                    *
***********************************************************************
*       Called from the Output Controll program                       *
***********************************************************************
*  -->  RETURN_CODE Status                                            *
*  -->  US_SCREEN                                                     *
***********************************************************************
FORM entry USING return_code LIKE sy-subrc                  "#EC CALLED
                 us_screen   TYPE c.                        "#EC CALLED

  return_code = 1.

  DO nast-anzal TIMES.
    PERFORM data_init USING us_screen.
    PERFORM process.
  ENDDO.

  CHECK retcode EQ 0.
  return_code = 0.

ENDFORM.

***********************************************************************
*       FORM data_init                                               *
***********************************************************************
FORM data_init USING VALUE(us_screen) TYPE c.
  xscreen = us_screen.
  CLEAR:
    retcode,
    there_was_output,
    new_page_was_ordered.
ENDFORM.

***********************************************************************
*       FORM GET_DATA                                                 *
***********************************************************************
FORM process.
  DATA language LIKE nast-spras.
  DATA shipment_number LIKE vttk-tknum.
  DATA: ls_ledlv_delnote            TYPE ledlv_delnote,
        lt_ledlv_delnote            TYPE TABLE OF ledlv_delnote,
        ls_ledlv_print_data_to_read TYPE ledlv_print_data_to_read,
        ls_outputparams             TYPE sfpoutputparams,
        lf_form_name                TYPE tdsfname,
        ls_docparams                TYPE sfpdocparams,
        ls_formoutput               TYPE fpformoutput,
        l_fpname                    TYPE fpname,
        l_parvw                     TYPE sna_parvw,
        l_parvr                     TYPE na_parnr,
        l_vbeln                     TYPE leshp_delivery_key.

  TYPES: BEGIN OF ty_document,
           country                 TYPE land1,
           xfd                     TYPE fpcontent,
           xfdfileout              TYPE fpfile,
           xft                     TYPE fpcontent,
           xftfile                 TYPE fpfile,
           pdltype                 TYPE fppdltype,
           xdcname                 TYPE fpxdcname,
           xdcowner                TYPE fpowner,
           pdf                     TYPE fpcontent,
           pdl                     TYPE fpcontent,
           pdffile                 TYPE fpfile,
           pdlfile                 TYPE fpfile,
           pages                   TYPE fppagecount,
           daratab                 TYPE tfpdara,
           nopdf                   TYPE fpnopdf,
           spoolprev               TYPE sfpspprev,
           formtechnology          TYPE sfpformtechnology,
           typeform                TYPE fpformtype,
           typeif                  TYPE fpinterfacetype,
           cacheinfo               TYPE fpcacheinfo,
           update_interaction_code TYPE fpboolean,
         END OF ty_document.

  DATA: lw_destinatario TYPE zssds_destinatario,
        lt_destinatario TYPE zssdt_destinatario.

  TYPES: tt_document TYPE STANDARD TABLE OF ty_document.

  FIELD-SYMBOLS <fs_document> TYPE tt_document.

  DATA: lt_formoutput TYPE tfpcontent,
        l_fpcontent   TYPE fpcontent.

  language = nast-spras.
  shipment_number = nast-objky.
  CALL FUNCTION 'RV_SHIPMENT_PRINT_VIEW'
    EXPORTING
      shipment_number     = shipment_number
      option_tvtk         = 'X'  "Shipmenttype J/N
      option_ttds         = 'X'  "Disposition J/N
      language            = language
      option_items        = 'X'  "Transport Items J/N
      option_segments     = 'X'  "Transport Segments J/N
      option_partners     = 'X'  "Partners J/N
      option_sales_orders = 'X'  "Sales orders J/N
      option_export_data  = 'X'  "Export data J/N
      option_packages     = 'X'  "Packages J/N
      option_flow         = ' '  "Flow J/N
      option_no_refresh   = ' '  "Refresh Tables J/N
    IMPORTING
      f_vttkvb            = vttkvb  "Shipment Header
      f_tvtk              = tvtk "Shipmenttype
      f_tvtkt             = tvtkt "Description Shipmenttype
      f_ttds              = ttds "Disposition
      f_ttdst             = ttdst "Description Disposition
      f_vbpla             = vbpla "Packages
    TABLES
      f_vttp              = xvttp "Shipment Items
      f_trlk              = slk  "Delivery
      f_trlp              = slp  "Delivery Item
      f_vtts              = xvtts "Shipment Segments
      f_vtsp              = xvtsp "Segments/Items
      f_vbpa              = xvbpa "Partner
      f_vbadr             = xvbadr  "Address
      f_vtfa              = xvtfa "Flow
      f_vbplk             = xvbplk  "Shipment Unit Header
      f_vbplp             = xvbplp  "Shipment Unit
      f_vbpls             = xvbpls  "Shipment Unit Sum
    EXCEPTIONS
      not_found           = 1.

  IF sy-subrc NE 0.
    syst-msgid = 'VW'.
    syst-msgno = '010'.
    syst-msgty = 'E'.
    syst-msgv1 = dbvttk-tknum.
    syst-msgv2 = sy-subrc.
    retcode    = 1.
    PERFORM protocol_update.
  ENDIF.

  "(INS) INI VAR: 13.07.2021 17:33:13 - Ajuste agrupación clientes prodiverso
  IF xvttp IS NOT INITIAL.
    SELECT vbeln, posnr, parvw, kunnr, adrnr, xcpdk FROM vbpa
    FOR ALL ENTRIES IN @xvttp
    WHERE vbeln = @xvttp-vbeln AND
          posnr = @space AND
          parvw = 'WE'
    INTO TABLE @DATA(lt_vbpa).
  ENDIF.
  "(INS) FIN VAR: 13.07.2021 17:33:45 - Ajuste agrupación clientes prodiverso

  SORT xvttp BY kunwe ASCENDING.

  DATA(lt_xvttp) = xvttp[].
  DELETE ADJACENT DUPLICATES FROM lt_xvttp COMPARING kunwe.
  "CVP codigo eliminado, revisar enhacement ZSSDENH_NAST_SPRAS_TTE
*  "idioma del destinatario de la 1ª entrega
*  "si no es creado manualmente se establece idioma automaticamente como el del Destinatario de la 1ª entrega

  DATA l_langu_6n TYPE spras.
  CALL FUNCTION 'CONVERSION_EXIT_ISOLA_INPUT'
    EXPORTING
      input            = '6N'
    IMPORTING
      output           = l_langu_6n
    EXCEPTIONS
      unknown_language = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
*      Implement suitable error handling here
  ENDIF.
  ls_docparams-langu = language.
  ls_docparams-replangu3 = language.
  IF language = l_langu_6n.
    ls_docparams-langu = 'E'.
  ENDIF.


  ls_outputparams-reqnew = abap_true.
  ls_outputparams-reqimm = abap_true.
  ls_outputparams-noprint  = abap_false.
  ls_outputparams-nodialog = abap_true.
  ls_outputparams-preview  = abap_false.
  ls_outputparams-getpdf = abap_false.
  IF xscreen = space."CVP nast-dimme = abap_true."impresion inmediata "
    ls_outputparams-dest  =  nast-ldest.
  ELSE.
    ls_outputparams-dest  = 'ZPDF'.
    ls_outputparams-preview  = abap_true.
  ENDIF.
  IF nast-nacha = 1."CVP
    ls_outputparams-getpdf = abap_false.
  ELSEIF nast-nacha = 5.
    ls_outputparams-getpdf = abap_true.
  ENDIF.
  DATA: l_outpar     TYPE sfpoutpar.

*  CALL FUNCTION 'FP_CREATE_COMPOSER_INPUT'
**    EXPORTING
**      archive_parameters =     " ImageLink structure
**      user_settings      = 'X'    " Checkbox (yes or no)
**      mail_sender        =     " Structure for Object ID
**      mail_recipient     =     " Structure for Object ID
**      mail_appl_obj      =     " Structure for Object ID
**      output_options     =     " SAP Smart Forms: Smart Composer (transfer) options
**      control_parameters =     " Smart Forms: Control structure
*    IMPORTING
*      outpar             = l_OUTPAR.    " Form Processing Output Parameter
*
*  CALL FUNCTION 'FP_JOB_OPEN'
*    CHANGING
*      ie_outputparams = ls_outputparams
*    EXCEPTIONS
*      cancel          = 1
*      usage_error     = 2
*      system_error    = 3
*      internal_error  = 4
*      OTHERS          = 5.
*  IF sy-subrc <> 0.
*  ENDIF.

  "l_fpname = tnapr-fonam.
  l_fpname = tnapr-sform.
  TRY.
      CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'
        EXPORTING
          i_name     = l_fpname
        IMPORTING
          e_funcname = lf_form_name.
    CATCH cx_fp_api_repository.
    CATCH cx_fp_api_usage.
    CATCH cx_fp_api_internal.
  ENDTRY.


  "Imprimir entregas del mismo destinatario de mercancias en misma pagina, si cambia destinatario cambia de pagina
  "(DEL) INI VAR: 13.07.2021 17:53:28 - Ajuste agrupación clientes prodiverso
*  LOOP AT lt_xvttp INTO DATA(lw_xvttp_we).
*    LOOP AT xvttp INTO DATA(lw_xvttp) WHERE kunwe = lw_xvttp_we-kunwe.
  "(DEL) FIN VAR: 13.07.2021 17:53:30 - Ajuste agrupación clientes prodiverso
  "(INS) INI VAR: 13.07.2021 17:53:49 - Ajuste agrupación clientes prodiverso
  LOOP AT lt_vbpa ASSIGNING FIELD-SYMBOL(<fs_vbpa>) GROUP BY ( kunnr = <fs_vbpa>-kunnr
                                                               adrnr = <fs_vbpa>-adrnr
                                                               xcpdk = <fs_vbpa>-xcpdk ).
    LOOP AT GROUP <fs_vbpa> ASSIGNING FIELD-SYMBOL(<fs_member>).
      "CVP 7000019596, Form. de transportes para showrooms
      "Validar partner de entregas y tipo de mensaje (mensaje normal/mensaje Showroom)
**      SELECT SINGLE COUNT(*)
**      FROM likp AS k
**      INNER JOIN zssdt028 AS z ON z~vstel = k~vstel
**      WHERE k~vbeln = <fs_member>-vbeln
**      AND z~kunnr = <fs_vbpa>-kunnr.
**      IF sy-subrc = 0.
**        CHECK nast-kschl = 'ZT16'.
**      ELSE.
**        CHECK nast-kschl <> 'ZT16'.
**      ENDIF.

      "(INS) FIN VAR: 13.07.2021 17:53:55 - Ajuste agrupación clientes prodiverso
      ls_ledlv_print_data_to_read-hd_adr = 'X'.
      ls_ledlv_print_data_to_read-hd_gen = 'X'.
      ls_ledlv_print_data_to_read-hd_gen_descript = 'X'.
      ls_ledlv_print_data_to_read-it_gen = 'X'.
      ls_ledlv_print_data_to_read-hd_fin = 'X'.
      ls_ledlv_print_data_to_read-hd_org = 'X'.
      ls_ledlv_print_data_to_read-it_org = 'X'.
      ls_ledlv_print_data_to_read-hd_ref = 'X'.
      ls_ledlv_print_data_to_read-it_refpurord = 'X'.
      ls_ledlv_print_data_to_read-it_reford = 'X'.

*      l_vbeln = lw_xvttp-vbeln.        "(DEL) VAR: 13.07.2021 17:53:49 - Ajuste agrupación clientes prodiverso
      l_vbeln = <fs_member>-vbeln.      "(INS) VAR: 13.07.2021 17:53:49 - Ajuste agrupación clientes prodiverso

      CALL FUNCTION 'LE_SHP_DLV_OUTP_READ_PRTDATA'
        EXPORTING
          is_delivery_key       = l_vbeln
          is_print_data_to_read = ls_ledlv_print_data_to_read
          if_parvw              = l_parvw
          if_parnr              = l_parvr
          if_language           = language
        IMPORTING
          es_dlv_delnote        = ls_ledlv_delnote
        EXCEPTIONS
          records_not_found     = 1
          records_not_requested = 2
          OTHERS                = 3.
      IF sy-subrc <> 0.
*     Implement suitable error handling here
      ENDIF.

      APPEND ls_ledlv_delnote TO lt_ledlv_delnote.
      CLEAR ls_ledlv_delnote.

    ENDLOOP.

    lw_destinatario-entregas[] = lt_ledlv_delnote[].
    APPEND lw_destinatario TO lt_destinatario.

    CLEAR: lt_ledlv_delnote, lw_destinatario.

  ENDLOOP.

  DATA: l_output  TYPE ssfcompop,
        l_control TYPE ssfctrlop.

  l_control-langu = language.

  l_output-tdnewid = abap_true.
  l_output-tdimmed = abap_true.

  IF xscreen = space.
    l_output-tddest  =  nast-ldest.
  ELSEIF xscreen = 'W'.  "JCB GAP0105. Que se comporte como web dynpro
    l_control-no_dialog = 'X'.
    l_control-preview = ''.
    l_control-getotf = 'X'.
    l_control-device = 'PRINTER'.
    l_output-tddest  = 'LOCB'.
  ELSE.
    l_output-tddest  = 'PDF'.
    l_control-preview  = abap_true.
  ENDIF.

  l_control-no_dialog = 'X'.

  IF p_impr = 'X'.
    l_control-device  = 'PRINTER'.
    l_output-tddest   = 'LOCB'.
    l_control-preview = p_previs.
  ENDIF.


  "MTS: 13.02.2024 Impresión Centros Montaje
  DATA: job_output_info   TYPE ssfcrescl.

  CALL FUNCTION 'ZUI5_GET_CM_IMPRESION_ADOBE'
    CHANGING
      c_output = l_output
      c_params = l_control.
  "FIN MTS: 13.02.2024 Impresión Centro de Montaje.



  CALL FUNCTION lf_form_name
    EXPORTING
      output_options     = l_output
      control_parameters = l_control
      user_settings      = space
      it_destinatario    = lt_destinatario
      i_tknum            = shipment_number
      gs_nast            = nast
    IMPORTING
      job_output_info    = job_output_info
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  IF l_control-getotf = 'X'. "ASC 22.04.24 Sólo tiene que llamar al set pdf si hemos generado el OTF
    "MTS: 13.02.2024 Impresión Centro de Montaje.
    CALL FUNCTION 'ZUI5_SET_CM_PDF_ADOBE'
      EXPORTING
        i_otf_data = job_output_info-otfdata.
  ENDIF.

*   Enhancements for web dynpro pdf output  ****EHP5
  IF xscreen = 'W'.
    DATA vl_pdf_file TYPE xstring.
    zcl_ap_smartforms=>get_pdf_from_otfdata( EXPORTING i_otfdata   = job_output_info-otfdata
                                                       get_xstring = 'X'
                                             IMPORTING xstring     = vl_pdf_file ).
    EXPORT lv_pdf_file = vl_pdf_file TO MEMORY ID 'PDF_FILE'.
  ENDIF.


  "FIN MTS: 13.02.2024 Impresión Centro de Montaje.

*  l_fpcontent = ls_formoutput-pdf.
*  APPEND l_fpcontent TO lt_formoutput.
*
*  CALL FUNCTION 'FP_JOB_CLOSE'
*    EXCEPTIONS
*      usage_error    = 1
*      system_error   = 2
*      internal_error = 3
*      OTHERS         = 4.
*
*  IF sy-subrc <> 0.
*  ENDIF.

  "Merging different PDF files into one
*  DATA: lt_formoutput      TYPE tfpcontent.
*
*  CALL FUNCTION 'FP_GET_PDF_TABLE'
*    IMPORTING
*      e_pdf_table = lt_formoutput.
*
*   Add documents to attribute table of PDF merger
*    READ TABLE lt_formoutput INTO DATA(la_pdf) INDEX 1.
*    IF sy-subrc EQ 0.
*      DATA(e_pdf_content) = la_pdf.
*    ELSE.
*     Raise Appropriate Error
*    ENDIF.

*  CHECK RETCODE EQ 0.
*
** Sort shipment items by itenary (i.e. TPRFO)                 "n_902657
*  SORT xvttp BY tprfo.                                        "n_902657
** SORT SEGMENTS BY CORRECT ORDER (I.E. TSRFO)
*  SORT XVTTS BY TSRFO.
*
** CONVERT UNITS IN DELIVERIES AND DELIVERY-ITEMS
** TO BE CONFORM TO VTTK-UNITS:
*
*  LOOP AT SLK.
** start of insertion HP_364727
*    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
*         EXPORTING
*              INPUT    = SLK-BRGEW
*              UNIT_IN  = SLK-GEWEI
*              UNIT_OUT = VTTKVB-DTMEG
*         IMPORTING
*              OUTPUT   = SLK-BRGEW.
*
** end of insertion HP_364727
*    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
*         EXPORTING
*              INPUT    = SLK-BTGEW
*              UNIT_IN  = SLK-GEWEI
*              UNIT_OUT = VTTKVB-DTMEG
*         IMPORTING
*              OUTPUT   = SLK-BTGEW.
*
*    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
*         EXPORTING
*              INPUT    = SLK-NTGEW
*              UNIT_IN  = SLK-GEWEI
*              UNIT_OUT = VTTKVB-DTMEG
*         IMPORTING
*              OUTPUT   = SLK-NTGEW.
*
*    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
*         EXPORTING
*              INPUT    = SLK-VOLUM
*              UNIT_IN  = SLK-VOLEH
*              UNIT_OUT = VTTKVB-DTMEV
*         IMPORTING
*              OUTPUT   = SLK-VOLUM.
*
*    SLK-GEWEI = VTTKVB-DTMEG.
*    SLK-VOLEH = VTTKVB-DTMEV.
*    MODIFY SLK.
*  ENDLOOP.
*
*  LOOP AT SLP.
*    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
*         EXPORTING
*              INPUT    = SLP-BRGEW
*              UNIT_IN  = SLP-GEWEI
*              UNIT_OUT = VTTKVB-DTMEG
*         IMPORTING
*              OUTPUT   = SLP-BRGEW.
*
*    CALL FUNCTION 'UNIT_CONVERSION_SIMPLE'
*         EXPORTING
*              INPUT    = SLP-NTGEW
*              UNIT_IN  = SLP-GEWEI
*              UNIT_OUT = VTTKVB-DTMEG
*         IMPORTING
*              OUTPUT   = SLP-NTGEW.
*
*    SLP-GEWEI = VTTKVB-DTMEG.
*    MODIFY SLP.
*  ENDLOOP.
** Transfer address number for mail
* IF nast-nacha = '5'.                "e-mail                "v_n_742056.
** Determine the type of the partner number
*    SELECT SINGLE * FROM tpar
*                  WHERE parvw = nast-parvw.
*    IF sy-subrc NE 0.
* EXIT.
*    ENDIF.
** Search the address number
*  LOOP AT xvbpa
*   WHERE parvw = nast-parvw.
*     CASE tpar-nrart.             "type of the partner number
* WHEN 'KU'.                 "- customer
*    CHECK xvbpa-kunnr = nast-parnr.
* WHEN 'LI'.                 "- vendor
*    CHECK xvbpa-lifnr = nast-parnr.
* WHEN 'AP'.                 "- contact person
*    CHECK xvbpa-parnr = nast-parnr.
*       WHEN 'PE'.                 "- personell number
*    CHECK xvbpa-pernr = nast-parnr.
*     ENDCASE.
*"^_n_742056.
** deleted line of n_656692
*    addr_key-addrnumber = xvbpa-adrnr.
*    addr_key-persnumber = xvbpa-adrnp.
*    exit.
*  endloop.
* ENDIF.                                                     "n_742056.
ENDFORM.

***********************************************************************
*       FORM PRINT_DOCUMENT                                           *
***********************************************************************
FORM print_document.

  PERFORM print_general_header_data.
  PERFORM new_page_if_necessary.

  PERFORM print_deliveries_in_shipment.
  PERFORM new_page_if_necessary.

  PERFORM print_delivery_details.
  PERFORM new_page_if_necessary.

  PERFORM print_segment_overview.
  PERFORM new_page_if_necessary.

  PERFORM print_segment_details.
  PERFORM new_page_if_necessary.

  PERFORM print_texts.
  PERFORM new_page_if_necessary.

  PERFORM print_shipping_units.
  PERFORM new_page_if_necessary.

  PERFORM print_deadlines.
  PERFORM new_page_if_necessary.

ENDFORM.

***********************************************************************
*      Form  PRINT_GENAERAL_HEADER_DATA
***********************************************************************
FORM print_general_header_data.
  PERFORM domain_value_text(sapmv56a)
          USING 'ABFER' vttkvb-abfer rv56a-txt_abfer.
  PERFORM domain_value_text(sapmv56a)
          USING 'ABWST' vttkvb-abwst rv56a-txt_abwst.
  PERFORM domain_value_text(sapmv56a)
          USING 'LAUFK' vttkvb-laufk rv56a-txt_laufk.
  PERFORM domain_value_text(sapmv56a)
          USING 'BFART' vttkvb-bfart rv56a-txt_bfart.
  PERFORM domain_value_text(sapmv56a)
          USING 'STTRG' vttkvb-sttrg rv56a-txt_sttrg.


  PERFORM tvsbt_read(sapfv56h) USING vttkvb-vsbed
                               CHANGING rv56a-txt_vsbed.
  PERFORM t173t_read(sapfv56h)
          USING    vttkvb-vsart
          CHANGING rv56a-txt_vsart.
  PERFORM t173t_read(sapfv56h)
          USING    vttkvb-vsavl
          CHANGING rv56a-txt_vsavl.
  PERFORM t173t_read(sapfv56h)
          USING    vttkvb-vsanl
          CHANGING rv56a-txt_vsanl.

  PERFORM print USING 'GENERAL_HEADER_DATA_TITLE'.
  PERFORM print USING 'GENERAL_HEADER_DATA_TYPES'.
  PERFORM print USING 'GENERAL_HEADER_DATA_PROCESSING'.
  PERFORM print USING 'GENERAL_HEADER_DATA_STATUS'.
  IF   ( NOT vttkvb-signi IS INITIAL )
    OR ( NOT vttkvb-tpbez IS INITIAL )
    OR ( NOT vttkvb-exti1 IS INITIAL )
    OR ( NOT vttkvb-exti2 IS INITIAL ).
    PERFORM print USING 'GENERAL_HEADER_DATA_IDENTIFICATION'.
  ENDIF.
ENDFORM.

***********************************************************************
*      Form  PRINT_DELIVERIES_IN_SHIPMENT
***********************************************************************
FORM print_deliveries_in_shipment.
  DATA sum_weight LIKE vtrlk-btgew.
  DATA sum_volume LIKE vtrlk-volum.

  CHECK NOT slk[] IS INITIAL.

  CLEAR: sum_weight, sum_volume, vtrlk.
  PERFORM print USING 'DELIVERIES_IN_SHIPMENT_TITLE'.
* CALCULATE SUM OVER ALL DELIVERIES AND PRINT IT
  LOOP AT slk.                         "DELIVERY HEADER
    sum_weight = sum_weight + slk-btgew.
    sum_volume = sum_volume + slk-volum.
  ENDLOOP.
  vtrlk-btgew = sum_weight.
  vtrlk-volum = sum_volume.
  PERFORM print USING 'TRANSPORT_SUM'.
  CLEAR vtrlk.
* PRINT ALL DELIVERIES
  PERFORM print USING 'DELIVERY_HEADING'.
* v_n_902657
  LOOP AT xvttp.
    READ TABLE slk
         WITH KEY vbeln = xvttp-vbeln
         INTO  vtrlk
         BINARY SEARCH.
    CHECK sy-subrc = 0.
* ^_n_902657
    PERFORM print USING 'DELIVERY'.
  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_DELIVERY_DETAILS
***********************************************************************
FORM print_delivery_details.
  CHECK NOT slk[] IS INITIAL.

* v_n_902657
  LOOP AT xvttp.
    READ TABLE slk
         WITH KEY vbeln = xvttp-vbeln
         INTO  vtrlk
         BINARY SEARCH.
    CHECK sy-subrc = 0.
* ^_n_902657
    slk-vbeln = vtrlk-vbeln.                                "n_998327
    PERFORM print USING 'DELIVERY_TITLE'.
    PERFORM print USING 'DELIVERY_ITEM_HEADING'.
    LOOP AT slp WHERE vbeln EQ slk-vbeln.             "DELIVERY-ITEMS
      MOVE slp TO vtrlp.
      PERFORM print USING 'DELIVERY_ITEM'.
    ENDLOOP.
*   PERFORM PRINT USING 'DELIVERY_SUM'.
  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_SEGMENT_OVERVIEW
***********************************************************************
FORM print_segment_overview.
  CHECK NOT xvtts[] IS INITIAL.

  PERFORM print USING 'SEGMENT_OVERVIEW_TITLE'.
  PERFORM print USING 'SEGMENT_OVERVIEW_HEADING'.
  LOOP AT xvtts.                       "Segments
    MOVE xvtts TO vttsvb.
    PERFORM domain_value_text(sapmv56a)
            USING 'TSTYP' vttsvb-tstyp rv56a-txt_tstyp.
    PERFORM print USING 'SEGMENT_OVERVIEW'.
  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_SEGMENT_DETAILS
***********************************************************************
FORM print_segment_details.
  CHECK NOT xvtts[] IS INITIAL.

  LOOP AT xvtts.                       "Segments
    MOVE xvtts TO vttsvb.
    PERFORM domain_value_text(sapmv56a)
            USING 'LAUFK' vttsvb-laufk rv56a-txt_laufk.
    PERFORM print USING 'SEGMENT_DETAIL_TITLE'.
    PERFORM print USING 'SEGMENT_DETAIL_KNODES'.
    PERFORM print USING 'SEGMENT_DETAIL_PROCESSING'.
    PERFORM print USING 'SEGMENT_DETAIL_DEADLINES'.
    PERFORM print_departure_address.
    PERFORM print_departure_details.
    PERFORM print_destination_address.
    PERFORM print_destination_details.
    PERFORM print_deliveries_in_segment.
    PERFORM new_page_if_necessary.
  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_DEPARTURE_DETAILS
***********************************************************************
FORM print_departure_details.

  DATA: bez_werka  LIKE t001w-name1,
        bez_lgorta LIKE t001l-lgobe.

  CHECK ( vttsvb-vstel  NE space )
     OR ( vttsvb-lstel  NE space )
     OR ( vttsvb-werka  NE space )
     OR ( vttsvb-lgorta NE space )
     OR ( vttsvb-kunna  NE space )
     OR ( vttsvb-lifna  NE space )
     OR ( vttsvb-belad  NE space ).

  PERFORM vtts-vstel_display(sapfv56s) USING    vttsvb-vstel
                                       CHANGING rv56a-txt_vstel.
  PERFORM vtts-lstel_display(sapfv56s) USING    vttsvb-vstel
                                                vttsvb-lstel
                                       CHANGING rv56a-txt_lstel.
  PERFORM vtts-kunna_display(sapfv56s) USING    vttsvb-kunna
                                       CHANGING rv56a-txt_kunnr.
  PERFORM lfa1_read(sapfv56h)          USING    vttsvb-lifna
                                       CHANGING rv56a-txt_dlnam.
  PERFORM vtts-werk_display(sapfv56s) USING    vttsvb-werka
                                      CHANGING bez_werka.
  PERFORM vtts-lgort_display(sapfv56s) USING    vttsvb-werka
                                                vttsvb-lgorta
                                       CHANGING bez_lgorta.
  PERFORM vtts-bez_condense(sapfv56s) USING    bez_werka
                                               bez_lgorta
                                      CHANGING rv56a-txt_wrklgo.

  PERFORM print USING 'DEPARTURE_DETAILS'.
ENDFORM.

***********************************************************************
*      Form  PRINT_DESTINATION_DETAILS
***********************************************************************
FORM print_destination_details.

  DATA: bez_werkz  LIKE t001w-name1,
        bez_lgortz LIKE t001l-lgobe.

  CHECK ( vttsvb-vstez  NE space )
     OR ( vttsvb-lstez  NE space )
     OR ( vttsvb-werkz  NE space )
     OR ( vttsvb-lgortz NE space )
     OR ( vttsvb-kunnz  NE space )
     OR ( vttsvb-lifnz  NE space )
     OR ( vttsvb-ablad  NE space ).

  PERFORM vtts-vstel_display(sapfv56s) USING    vttsvb-vstez
                                       CHANGING rv56a-txt_vstel.
  PERFORM vtts-lstel_display(sapfv56s) USING    vttsvb-vstez
                                                vttsvb-lstez
                                       CHANGING rv56a-txt_lstel.
  PERFORM vtts-kunna_display(sapfv56s) USING    vttsvb-kunnz
                                       CHANGING rv56a-txt_kunnr.
  PERFORM lfa1_read(sapfv56h)          USING    vttsvb-lifnz
                                       CHANGING rv56a-txt_dlnam.
  PERFORM vtts-werk_display(sapfv56s) USING    vttsvb-werkz
                                      CHANGING bez_werkz.
  PERFORM vtts-lgort_display(sapfv56s) USING    vttsvb-werkz
                                                vttsvb-lgortz
                                       CHANGING bez_lgortz.
  PERFORM vtts-bez_condense(sapfv56s) USING    bez_werkz
                                               bez_lgortz
                                      CHANGING rv56a-txt_wrklgo.

  PERFORM print USING 'DESTINATION_DETAILS'.
ENDFORM.

***********************************************************************
*      Form  PRINT_DEPARTURE_ADDRESS
***********************************************************************
FORM print_departure_address.
  DATA:
    l_dept LIKE loc_dept.

  MOVE-CORRESPONDING xvtts TO l_dept.
  CALL FUNCTION 'ST_LOCATION_ADDR_READ'
    EXPORTING
      i_location        = l_dept
    IMPORTING
      e_sadr            = sadr   "SADR40A
    EXCEPTIONS
      address_not_found = 1
      OTHERS            = 2.
  IF sy-subrc NE 0.
    CLEAR sadr.                        "SADR40A
    EXIT.
  ENDIF.

  PERFORM print USING 'DEPARTURE_ADDRESS_TITLE'.
  PERFORM print USING 'ADDRESS'.
ENDFORM.

***********************************************************************
*      Form  PRINT_DESTINATION_ADDRESS
***********************************************************************
FORM print_destination_address.
  DATA:
    l_dest LIKE loc_dest.

  MOVE-CORRESPONDING xvtts TO l_dest.
  CALL FUNCTION 'ST_LOCATION_ADDR_READ'
    EXPORTING
      i_location        = l_dest
    IMPORTING
      e_sadr            = sadr   "SADR40A
    EXCEPTIONS
      address_not_found = 1
      OTHERS            = 2.
  IF sy-subrc NE 0.
    CLEAR sadr.                        "SADR40A
    EXIT.
  ENDIF.

  PERFORM print USING 'DESTINATION_ADDRESS_TITLE'.
  PERFORM print USING 'ADDRESS'.
ENDFORM.

***********************************************************************
*      Form  PRINT_DELIVERIES_IN_SEGMENT
***********************************************************************
FORM print_deliveries_in_segment.
  DATA sum_weight LIKE vtrlk-btgew.
  DATA sum_volume LIKE vtrlk-volum.
  DATA there_are_deliveries(1).

  CLEAR: sum_weight, sum_volume.
  there_are_deliveries = no.
* Find all items in this segment (= XVTTS-TSNUM)
* of this transport (= XVTTS-TKNUM) in table XVTTSP:
  LOOP AT xvtsp WHERE tknum EQ xvtts-tknum
                AND   tsnum EQ xvtts-tsnum.
* Find the corresponding delivery-number in table XVTTP:
    READ TABLE xvttp WITH KEY tknum = xvtts-tknum
                              tpnum = xvtsp-tpnum.
    IF sy-subrc EQ 0.
* Read the delivery
      LOOP AT slk WHERE vbeln EQ xvttp-vbeln.  "Deliveries
        MOVE slk TO vtrlk.
        IF there_are_deliveries EQ no.
          PERFORM print USING 'DELIVERIES_IN_SEGMENT_HEADING'.
          PERFORM print USING 'DELIVERY_HEADING'.
          there_are_deliveries = yes.
        ENDIF.
        PERFORM print USING 'DELIVERY'.
        sum_weight = sum_weight + vtrlk-btgew.
        sum_volume = sum_volume + vtrlk-volum.
      ENDLOOP.
    ENDIF.
  ENDLOOP.
  IF there_are_deliveries EQ yes.
    vtrlk-btgew = sum_weight.
    vtrlk-volum = sum_volume.
    PERFORM print USING 'DELIVERY_OVERVIEW_SUM'.
    CLEAR vtrlk.
  ENDIF.
ENDFORM.

***********************************************************************
*      Form  PRINT_TEXTS
***********************************************************************
FORM print_texts.
  DATA there_are_texts(1).
  DATA: l_ttxer LIKE ttxern OCCURS 0 WITH HEADER LINE.

  there_are_texts = no.
  SELECT * FROM ttxern
           INTO TABLE l_ttxer
           WHERE tdobject EQ 'VTTK'
             AND txtgr    EQ tvtk-txtgr.

  LOOP AT l_ttxer INTO ttxern.
    MOVE: vttkvb-tknum   TO thead-tdname,
          ttxern-tdobject TO thead-tdobject,
          ttxern-tdid     TO thead-tdid,
          nast-spras     TO thead-tdspras.
    SELECT SINGLE * FROM ttxit
           WHERE tdobject EQ ttxern-tdobject
           AND   tdid     EQ ttxern-tdid
           AND   tdspras  EQ nast-spras.
    IF sy-subrc EQ 0.
      MOVE ttxit-tdtext TO thead-tdtitle.
    ELSE.
      thead-tdtitle = text-txt.
      thead-tdtitle+6(4) = ttxern-tdid.
    ENDIF.
    SELECT SINGLE * FROM stxh WHERE tdname    = thead-tdname
                                AND tdid      = thead-tdid
                                AND tdobject  = thead-tdobject
                                AND tdspras   = thead-tdspras.
    IF ( sy-subrc EQ 0 ).
      IF there_are_texts EQ no.
        PERFORM print USING 'TEXT_TITLE'.
        there_are_texts = yes.
      ENDIF.
      PERFORM print USING 'TEXT'.
    ENDIF.

  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_SHIPPING_UNITS                                     *
***********************************************************************
FORM print_shipping_units.
  CHECK NOT xvbplk[] IS INITIAL.

  PERFORM print USING 'SHIPPING_UNIT_TITLE'.
  PERFORM print USING 'SHIPPING_UNIT_HEADING'.
  LOOP AT xvbplk WHERE kzobe = 'X'.
    PERFORM packing_tree USING xvbplk-venum.
  ENDLOOP.
ENDFORM.


***********************************************************************
*      Form  PACKING_TREE                                             *
***********************************************************************
FORM packing_tree USING VALUE(shenr) LIKE vekp-venum.
  MOVE space TO xvbplk.
  xvbplk-venum = shenr.
  READ TABLE xvbplk.
  vbplk = xvbplk.
  PERFORM print USING 'SHIPPING_UNIT'.

  LOOP AT xvbplp WHERE venum = shenr.
    IF xvbplp-posnr IS INITIAL.
      PERFORM packing_tree USING xvbplp-unvel.
    ELSE.
      vbplp = xvbplp.
      PERFORM print USING 'SHIPPING_UNIT_DELIVERY_ITEM'.
    ENDIF.
  ENDLOOP.
ENDFORM.

***********************************************************************
*      Form  PRINT_DEADLINES                                        *
***********************************************************************
FORM print_deadlines.
  DATA:
    xvbddl LIKE vbddl OCCURS 0 WITH HEADER LINE.

  vttk = vttkvb.
  CALL FUNCTION 'SD_DEADLINE_PRINT_VIEW'
    EXPORTING
      deadline_no  = vttkvb-ternr
      language     = sy-langu
      handle_no    = vttkvb-handle
      if_object    = 'WSHDRVTTK'
      is_object_wa = vttk
    TABLES
      deadline_tab = xvbddl
    EXCEPTIONS
      no_deadlines = 01.
  CHECK sy-subrc EQ 0.

  CHECK NOT xvbddl[] IS INITIAL.

  PERFORM print USING 'DEADLINES_TITLE'.
  PERFORM print USING 'DEADLINE_HEADING'.
  LOOP AT xvbddl.
    MOVE xvbddl TO vbddl.
    PERFORM print USING 'DEADLINE_PLAN_DATA'.
    IF NOT ( ( vbddl-isdd IS INITIAL ) AND
             ( vbddl-isdz IS INITIAL ) AND
             ( vbddl-iedd IS INITIAL ) AND
             ( vbddl-iedz IS INITIAL ) ).
      PERFORM print USING 'DEADLINE_ACTUAL_DATA'.
    ENDIF.
    IF vbddl-vstga NE space.
      PERFORM print USING 'DEADLINE_DEVIATION'.
    ENDIF.
    IF vbddl-knote NE space.
      PERFORM print USING 'DEADLINE_KNODE'.
    ENDIF.
    IF vbddl-tdname NE space.
      thead-tdname   = vbddl-tdname.
      thead-tdobject = 'AUFK'.
      thead-tdid     = 'AVOT'.
      thead-tdspras  = nast-spras.
      SELECT SINGLE * FROM stxh WHERE tdname    = thead-tdname
                                  AND tdid      = thead-tdid
                                  AND tdobject  = thead-tdobject
                                  AND tdspras   = thead-tdspras.
      IF ( sy-subrc EQ 0 ).
        PERFORM print USING 'DEADLINE_TEXT'.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.



***********************************************************************
********                                                      *********
********                 T E C H N I C A L                    *********
********                                                      *********
***********************************************************************

***********************************************************************
*      Form  PRINT                                                    *
***********************************************************************
FORM print USING textelement TYPE c.
  IF new_page_was_ordered EQ yes.
    CALL FUNCTION 'CONTROL_FORM'
      EXPORTING
        command = 'ENDPROTECT'.
    CALL FUNCTION 'WRITE_FORM'
      EXPORTING
        element = 'NEW_PAGE'
      EXCEPTIONS
        OTHERS  = 1.
    IF sy-subrc NE 0.
      PERFORM protocol_update.
    ENDIF.
    new_page_was_ordered = no.
  ENDIF.
  IF there_was_output EQ no.
    CALL FUNCTION 'CONTROL_FORM'
      EXPORTING
        command = 'PROTECT'.
    there_was_output = yes.
  ENDIF.
  CALL FUNCTION 'WRITE_FORM'
    EXPORTING
      element = textelement
    EXCEPTIONS
      OTHERS  = 1.
  IF sy-subrc NE 0.
    PERFORM protocol_update.
  ENDIF.
ENDFORM.

***********************************************************************
*      Form  NEW_PAGE_IF_NECESSARY
***********************************************************************
FORM new_page_if_necessary.
  IF there_was_output EQ yes.
    new_page_was_ordered = yes.
  ENDIF.
  there_was_output = no.
ENDFORM.                               " NEW_PAGE

***********************************************************************
*       FORM OPEN_FORM                                                *
***********************************************************************
*  -->  VALUE(US_SCREEN)  Output on screen                            *
*                         ' ' = printer                               *
*                         'X' = screen                                *
***********************************************************************
FORM open_form USING VALUE(us_screen) TYPE c.
  DATA us_country LIKE t005-land1.

  PERFORM get_sender_country USING us_country.
  CHECK retcode EQ 0.
  INCLUDE rvadopfo.
ENDFORM.

***********************************************************************
*       FORM Get_Sender_Country
*                                                                     *
***********************************************************************
*       Determines the country of the transport-disposition-unit      *
***********************************************************************
FORM get_sender_country USING sender_country LIKE t005-land1.
* data:
*   l_addr1_sel like addr1_sel.

* l_addr1_sel-addrnumber = ttds-adrnr.                    "SADR40A
* call function 'ADDR_GET'
*      exporting
*        address_selection = l_addr1_sel
*        address_group     = 'CA01'        "it's a Customizing-Address
*      importing
*        sadr              = sadr                            "SADR40A
*      exceptions
*           others  = 1.
* if sy-subrc eq 0.
*   sender_country = sadr-land1.                             "SADR40A
* else.
*   syst-msgid = 'VW'.
*   syst-msgno = '087'.
*   syst-msgty = 'E'.
*   syst-msgv1 = dbvttk-tknum.
*   syst-msgv2 = sy-subrc.
*   perform protocol_update.
* endif.
  DATA: l_vbadr LIKE vbadr.
  DATA: l_vbpa  LIKE vbpa.

  LOOP AT xvbpa WHERE vbeln = nast-objky AND
                      parvw = nast-parvw.
    sender_country = xvbpa-land1.
    EXIT.
  ENDLOOP.
  IF sy-subrc IS INITIAL  AND  sender_country IS INITIAL.
    l_vbpa = xvbpa.
    CALL FUNCTION 'VIEW_VBADR'
      EXPORTING
        input         = l_vbpa
        partnernummer = nast-parnr
      IMPORTING
        adresse       = l_vbadr.
    sender_country = l_vbadr-land1.
  ENDIF.

ENDFORM.

***********************************************************************
*       FORM CLOSE_FORM                                               *
***********************************************************************
FORM close_form.
  CALL FUNCTION 'CLOSE_FORM'
    EXCEPTIONS
      OTHERS = 1.
  IF sy-subrc NE 0.
    retcode = sy-subrc.
    PERFORM protocol_update.
  ENDIF.
  SET COUNTRY space.
ENDFORM.

***********************************************************************
*       FORM PROTOCOL_UPDATE                                          *
***********************************************************************
*       The messages are collected for the processing protocol.       *
***********************************************************************
FORM protocol_update.

  IF xscreen = space.
    CALL FUNCTION 'NAST_PROTOCOL_UPDATE'
      EXPORTING
        msg_arbgb = syst-msgid
        msg_nr    = syst-msgno
        msg_ty    = syst-msgty
        msg_v1    = syst-msgv1
        msg_v2    = syst-msgv2
        msg_v3    = syst-msgv3
        msg_v4    = syst-msgv4.
  ELSE.
    MESSAGE ID syst-msgid TYPE 'I' NUMBER syst-msgno
            WITH syst-msgv1 syst-msgv2 syst-msgv3 syst-msgv4.
  ENDIF.
ENDFORM.

***********************************************************************
*       zform00_fm_pdf_merge                                          *
***********************************************************************
*       Merge de formularios en uno                                   *
***********************************************************************
FORM zform00_fm_pdf_merge CHANGING t_pdf TYPE tfpcontent.
  DATA: wa_pdf          TYPE fpcontent,
        tab_pdf_aux     TYPE TABLE OF fpcontent,
        pdf_merger      TYPE REF TO cl_rspo_pdf_merge,
        ex              TYPE REF TO cx_rspo_pdf_merge,
        lv_ex_txt       TYPE string,
        rc              TYPE i VALUE 0,
        lnum            TYPE i VALUE 0,
        p_sel           TYPE i VALUE 1,
        merged_document TYPE xstring,
        docindex        TYPE i VALUE 0,
        errordoc        TYPE xstring.

  TRY.
      CREATE OBJECT pdf_merger.
    CATCH cx_rspo_pdf_merge INTO ex.
      lv_ex_txt = ex->get_text( ).
  ENDTRY.

  DESCRIBE TABLE t_pdf LINES DATA(pdf_lines).

  IF pdf_lines > 1.
    LOOP AT t_pdf INTO wa_pdf.
      pdf_merger->add_document( wa_pdf ).
    ENDLOOP.

    pdf_merger->merge_documents( IMPORTING merged_document = merged_document rc = rc ).
    IF rc <> 0.
      pdf_merger->get_err_doc_index( IMPORTING index = docindex ).
      pdf_merger->get_document( EXPORTING index = docindex IMPORTING document = errordoc ).
    ELSE.
      APPEND merged_document TO tab_pdf_aux.
    ENDIF.

    CLEAR pdf_merger.
    t_pdf[] = tab_pdf_aux[].
  ENDIF.

ENDFORM.
