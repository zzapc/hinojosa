FUNCTION z_e80_envio_stock_bobina.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_WERKS) TYPE  WERKS_D
*"     REFERENCE(I_CHARG) TYPE  CHARG_D OPTIONAL
*"     REFERENCE(I_OBJEK) TYPE  CUOBN OPTIONAL
*"     REFERENCE(I_IDMSG) TYPE  ZE80_ID_MENSAJE OPTIONAL
*"     REFERENCE(I_PAR_ORIGEN) TYPE  Z_PAR_ORIGEN OPTIONAL
*"  EXPORTING
*"     REFERENCE(E_NOSEND) TYPE  FLAG
*"  EXCEPTIONS
*"      LOTE_INEXISTENTE
*"----------------------------------------------------------------------
  DATA: lv_object                TYPE objnum,
        lt_alloc_values_num      TYPE tt_bapi1003_alloc_values_num,
        ls_alloc_values_num      LIKE LINE OF lt_alloc_values_num,
        lt_alloc_values_char     TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr     TYPE tt_bapi1003_alloc_values_curr,
        lt_return                TYPE bapiret2_tab,
        lt_return_error          TYPE bapiret2_tab,
        ls_return                LIKE LINE OF lt_return,
        ls_alloc_values_char     LIKE LINE OF lt_alloc_values_char,
        ls_etiqueta              TYPE zspp_etiq_bobina,
        lts_alloc_values_char    TYPE tt_bapi1003_alloc_values_char,
        ls_mat                   TYPE mchb,
        lo_smile                 TYPE REF TO zco_si_smile80_su_data_out_sap,
        ls_output                TYPE zmt_smile80_su_data_out_sap_to,
        ls_zdt_smile80_su_sap_t3 TYPE zdt_smile80_su_data_out_sap_t3,
        ls_document              TYPE zdt_smile80_su_data_out_sap_t2,
        ls_body                  TYPE zdt_smile80_su_data_out_sap_t4,
        ls_stock_unit            TYPE zdt_smile80_su_data_out_sap_to,
        ls_header                TYPE zdt_smile80_su_data_out_sap_t1,
        lv_rango                 TYPE nrnr,
        lv_mensaje_id            TYPE string,
        tsl                      TYPE timestampl,
        lv_charg                 TYPE charg_d,
        lv_matnr                 TYPE matnr,
        l_num                    TYPE p DECIMALS 0,
        lv_decode                TYPE string,
        lv_ubi_sap               TYPE string,
        lv_cliente               TYPE string,
        ls_zte80_messages        TYPE zte80_messages,
        lt_datos                 TYPE zte80_messages.

  CONSTANTS: gc_023      TYPE bapi1003_key-classtype   VALUE '023',
             gc_mch1     TYPE bapi1003_key-objecttable VALUE 'MCH1',
             gc_z_bobina TYPE klasse_d VALUE 'Z_BOBINA'.

  CHECK i_werks = '3000'.

  IF i_objek IS NOT INITIAL.
    lv_object = i_objek.
  ENDIF.

  IF i_charg IS INITIAL.
    SHIFT lv_object BY 18 PLACES LEFT.
    lv_charg = lv_object.
    lv_object = i_objek.

  ELSE.
    lv_charg = i_charg.

  ENDIF.

  SELECT SINGLE *
    FROM mchb
    INTO ls_mat
    WHERE charg = lv_charg AND clabs NE 0.

  IF i_charg IS NOT INITIAL.
    CONCATENATE ls_mat-matnr lv_charg INTO lv_object.
  ENDIF.

  IF ls_mat-lgort = '1040' OR ls_mat-lgort = '4001' OR ls_mat-lgort = '4005'.

    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = lv_object
        objecttable     = gc_mch1
        classnum        = gc_z_bobina
        classtype       = gc_023
      TABLES
        allocvaluesnum  = lt_alloc_values_num
        allocvalueschar = lt_alloc_values_char
        allocvaluescurr = lt_alloc_values_curr
        return          = lt_return.

    LOOP AT lt_return
      INTO ls_return
      WHERE type = 'E'.
    ENDLOOP.

    IF ls_return IS NOT INITIAL.
      RAISE lote_inexistente.

    ELSE.

      CREATE OBJECT lo_smile.

      CASE i_werks.
        WHEN '3000'. lv_rango = '01'.
      ENDCASE.

      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          nr_range_nr   = lv_rango
          object        = 'ZPP_E80MSG'
          quantity      = '1'
          ignore_buffer = 'X'
        IMPORTING
          number        = lv_mensaje_id.

      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      GET TIME STAMP FIELD tsl.

      lv_matnr = ls_mat-matnr.
      lv_matnr = |{ lv_matnr ALPHA = OUT }|.

      ls_header-message_id = lv_mensaje_id.
      ls_header-message_type = 'SU_DATA'.
      ls_header-receiver = 'E80'.
      ls_header-send_date = tsl.
      ls_header-sender = 'HOST'.

      ls_document-header = ls_header.
      ls_zdt_smile80_su_sap_t3-document = ls_document.
      ls_output-mt_smile80_su_data_out_sap_to = ls_zdt_smile80_su_sap_t3.

      ls_stock_unit-lpn = lv_charg.
      ls_stock_unit-sku = lv_matnr.
      ls_stock_unit-stock_unit_category = ls_mat-lgort.
      ls_stock_unit-requested_footprints = '6'.

      LOOP AT lt_alloc_values_num INTO ls_alloc_values_num
       WHERE charact = 'Z_PESO' OR charact = 'Z_DIAMETRO'.

        CASE ls_alloc_values_num-charact.
          WHEN 'Z_PESO'.
            l_num = ls_alloc_values_num-value_from.
            ls_stock_unit-weight = l_num.
          WHEN 'Z_DIAMETRO'.
            l_num = ls_alloc_values_num-value_from.
            ls_stock_unit-diameter = l_num.
          WHEN OTHERS.
        ENDCASE.
      ENDLOOP.

      LOOP AT lt_alloc_values_char INTO ls_alloc_values_char
       WHERE charact = 'Z_CLIENTE' OR charact = 'LOBM_UDCODE' OR charact = 'Z_UBIC_HPAP'.

        CASE ls_alloc_values_char-charact.
          WHEN 'Z_CLIENTE'.
            lv_cliente = ls_alloc_values_char-value_char.
            lv_cliente = |{ lv_cliente ALPHA = OUT }|.
            ls_stock_unit-customer = ls_alloc_values_char-value_char.
          WHEN 'LOBM_UDCODE'.
            lv_decode = ls_alloc_values_char-value_char+9(1).
            ls_stock_unit-decode = lv_decode.
          WHEN 'Z_UBIC_HPAP'.
            lv_ubi_sap = ls_alloc_values_char-value_char.
          WHEN OTHERS.
        ENDCASE.
      ENDLOOP.

      IF i_par_origen = '6'. "Desbloquear stock

        lv_ubi_sap = '    '.

      ENDIF.

      IF lv_ubi_sap = '0000' OR lv_ubi_sap >= '9000' OR lv_ubi_sap = '    '.

        ls_body-stock_unit = ls_stock_unit.
        ls_document-body = ls_body.
        ls_zdt_smile80_su_sap_t3-document = ls_document.
        ls_output-mt_smile80_su_data_out_sap_to = ls_zdt_smile80_su_sap_t3.

        lo_smile->si_smile80_su_data_out_sap_to(
         EXPORTING output = ls_output ).

        ls_zte80_messages-id_mensaje = lv_mensaje_id.
        ls_zte80_messages-estado = '0'.
        ls_zte80_messages-centro = i_werks.
        ls_zte80_messages-fecha_env = sy-datum.
        ls_zte80_messages-hora_env = sy-uzeit.
        ls_zte80_messages-tipo_mensaje = 'SU_DATA'.
        ls_zte80_messages-numero_de_dcmnt = lv_charg.
        MODIFY zte80_messages FROM ls_zte80_messages.

        UPDATE zte80_messages SET estado = '2' fecha_rep = sy-datum hora_rep = sy-uzeit WHERE id_mensaje = i_idmsg.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = abap_true.

      ELSEIF ( lv_ubi_sap >= '0001' AND lv_ubi_sap <= '8999' ) AND i_par_origen = '1' OR i_par_origen = '2'.

        ls_body-stock_unit = ls_stock_unit.
        ls_document-body = ls_body.
        ls_zdt_smile80_su_sap_t3-document = ls_document.
        ls_output-mt_smile80_su_data_out_sap_to = ls_zdt_smile80_su_sap_t3.

        lo_smile->si_smile80_su_data_out_sap_to(
         EXPORTING output = ls_output ).

        ls_zte80_messages-id_mensaje = lv_mensaje_id.
        ls_zte80_messages-estado = '0'.
        ls_zte80_messages-centro = i_werks.
        ls_zte80_messages-fecha_env = sy-datum.
        ls_zte80_messages-hora_env = sy-uzeit.
        ls_zte80_messages-tipo_mensaje = 'SU_DATA'.
        ls_zte80_messages-numero_de_dcmnt = lv_charg.
        MODIFY zte80_messages FROM ls_zte80_messages.

        UPDATE zte80_messages SET estado = '2' fecha_rep = sy-datum hora_rep = sy-uzeit WHERE id_mensaje = i_idmsg.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = abap_true.

      ELSEIF ( lv_ubi_sap > '0000' OR lv_ubi_sap < '9000' ) AND i_par_origen = '0'.

        e_nosend = 'X'.

      ENDIF.

    ENDIF.

  ELSE.

    RAISE lote_inexistente.

  ENDIF.

ENDFUNCTION.
