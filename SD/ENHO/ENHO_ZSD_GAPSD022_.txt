<?xml version="1.0" encoding="utf-8"?> <ENHO enhancement_id="ZSD_GAPSD022" shorttext="GAP022" tooltype_id="HOOK_IMPL" orig_object="R3TR-SAPMV45A-PROG-SAPMV45A">  <asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">   <asx:values>    <IMPLS>
 <ENH_HOOK_IMPL>      <SPOTNAME/>      <PROGRAMNAME>SAPMV45A</PROGRAMNAME>      <EXTID>1</EXTID>      <ID>1</ID>      <OVERWRITE/>      <METHOD/>      <ENHMODE>D</ENHMODE>      <FULL_NAME>\PR:SAPMV45A\FO:USEREXIT_MOVE_FIELD_TO_VBEP\SE:END\EI</FULL_NAME>
    <SOURCE>       <item/>       <item>*DFS 28.2.2024 Asignar Reparto SIN necesidades cuando se modifican fechas en Reparto de posición Assembly para la que YA se ha fabricado.</item>       <item>*Objetivo: Evitar la Verificación de disponibilidad cuando
otro pedido ha suministrado el stock asociado al pedido.</item>       <item>&quot;ASC - 01.03.24 modifcamos el código para que revise si la orden esta en el status correcto y quitamos hardcodes</item>       <item>*DATA: ls_ztsd0008 TYPE ztsd0008,</item>
     <item>*      lv_aufnr    TYPE aufnr,</item>       <item>*      ls_jest     TYPE jest,</item>       <item>*      ls_jest2    TYPE jest,</item>       <item>*      lv_objnr    TYPE j_objnr.</item>       <item/>       <item>*IF sy-tcode = &apos;VA02&apos
;.</item>       <item>*</item>       <item>*  SELECT SINGLE * FROM ztsd0008 INTO ls_ztsd0008 WHERE vkorg = vbak-vkorg</item>       <item>*                                                   AND auart = vbak-auart</item>       <item>*
                            AND bedae = vbap-bedae.</item>       <item>*  IF sy-subrc = 0.</item>       <item>*</item>       <item>*    SELECT SINGLE aufnr</item>       <item>*      INTO lv_aufnr</item>       <item>*      FROM afpo</item>       <item>*
   WHERE kdauf =  vbap-vbeln</item>       <item>*        AND kdpos EQ vbap-posnr.</item>       <item>*    IF sy-subrc EQ 0.</item>       <item>*</item>       <item>*      CONCATENATE &apos;OR&apos; lv_aufnr INTO lv_objnr.</item>       <item>*      SELECT
SINGLE *</item>       <item>*        FROM jest</item>       <item>*        INTO ls_jest</item>       <item>*        WHERE objnr = lv_objnr</item>       <item>*          AND stat  = &apos;I0002&apos;</item>       <item>*          AND inact = &apos;&apos;</
item>       <item>*          AND NOT EXISTS ( SELECT *</item>       <item>*                              FROM jest</item>       <item>*                              WHERE objnr = lv_objnr</item>       <item>*                                AND stat = &apo
s;I0076&apos;</item>       <item>*                                AND inact = &apos;&apos; ).</item>       <item>*      IF sy-subrc EQ 0.</item>       <item>*        IF *vbep-edatu &lt;&gt; vbep-edatu.</item>       <item>*          vbep-ettyp = ls_ztsd000
8-ettyp.</item>       <item>*        ENDIF.</item>       <item>*</item>       <item>*        IF vbep-wmeng &lt; *vbep-wmeng.</item>       <item>*          vbep-bmeng = vbep-wmeng.</item>       <item>*          vbep-ettyp = ls_ztsd0008-ettyp.</item>
<item>*        ENDIF.</item>       <item>*      ENDIF.</item>       <item>*</item>       <item>*    ENDIF.</item>       <item>*</item>       <item>*  ENDIF.&quot;IF sy-subrc = 0.</item>       <item>*</item>       <item>*ENDIF.</item>       <item/>       <
item>*DFS Ajuste22.1.2024 Condicionar ampliación por SY-TCODE</item>       <item/>       <item>if SY-TCODE = &apos;VA01&apos; or SY-TCODE = &apos;VA02&apos; or SY-TCODE = &apos;VA21&apos; or SY-TCODE = &apos;VA22&apos;.</item>       <item/>       <item>IF
 vbep-wmeng &lt;&gt; *vbep-wmeng AND VBAP-BEDAE &lt;&gt; &apos;KSV&apos;.</item>       <item/>       <item/>       <item>DATA: lr_cnfidx TYPE REF TO ycl_hp_idx.</item>       <item>DATA: lt_cm TYPE TABLE OF zssdt_cm.</item>       <item>DATA: lv_calculo(10)
 TYPE p DECIMALS 5.</item>       <item>DATA: lv_sblar(10) TYPE p DECIMALS 5.</item>       <item>DATA: lv_wmeng(10) TYPE p DECIMALS 5.</item>       <item>DATA: lv_zwmeng(10) TYPE p DECIMALS 5.</item>       <item>DATA: t_rte TYPE YHP_OMP_TT_RTE.</item>
  <item/>       <item>*DFS Ajuste22.1.2024 Condicionar ampliación por auart</item>       <item/>       <item>SELECT * FROM zssdt_cm INTO TABLE lt_cm</item>       <item>WHERE vkorg = vbak-vkorg</item>       <item>AND vtweg = vbak-vtweg</item>       <item>A
ND auart = vbak-auart.</item>       <item/>       <item>CHECK sy-subrc EQ 0.</item>       <item/>       <item>TRY.</item>       <item>ycl_hp_sdu=&gt;pricing_prepare_tkomp_mv45a( EXPORTING is_vbap  = vbap</item>       <item>it_xvbap = xvbap[]</item>
<item>CHANGING cs_tkomp = tkomp ).</item>       <item>CATCH /vcxi/cx_ckx.</item>       <item>ENDTRY.</item>       <item/>       <item>TRY.</item>       <item>lr_cnfidx ?= ycl_hp_idx=&gt;/vcxi/if_ckx_object~get_instance( if_guid = CONV /vcxi/ckx_guid( vbap
-cuobj ) ).</item>       <item>CHECK lr_cnfidx IS BOUND.</item>       <item>lr_cnfidx-&gt;get_data(</item>       <item>IMPORTING</item>       <item>et_spec_db  = DATA(lt_spec)&quot; HP: IndexDB - Specification - DB</item>       <item>*          ET_LINK_DB
  =              &quot; HP: IndexDB - Component Link - DB</item>       <item>ET_BOARD_DB = DATA(lt_board) &quot; HP: IndexDB - Board - DB</item>       <item>*          ET_PAPER_DB =              &quot; HP: IndexDB - Paper - DB</item>       <item>et_print_
db = DATA(lt_print)&quot; HP: IndexDB - Printing- DB</item>       <item>*          ET_INKS_DB  =              &quot; HP: IndexDB - Inks - DB</item>       <item>*          ET_SCORE_DB =              &quot; HP: IndexDB - Scores - DB</item>       <item>*
      ET_SHIP_DB  =              &quot; HP: IndexDB - Shipping and Unitizing - DB</item>       <item>et_shipu_db = DATA(lt_shipu)             &quot; HP: IndexDB - Shipping Units - DB &quot;SMT - Añadir campo Container a Tkomp</item>       <item>ET_RTE_DB
  = DATA(lt_rte_db)             &quot; HP: IndexDB - Routing - DB</item>       <item>*          ET_MATNR_DB =              &quot; HP: Index DB - Material Number</item>       <item>).</item>       <item/>       <item>t_rte = CORRESPONDING #( lt_rte_db ).</
item>       <item/>       <item>TRY.</item>       <item>&quot;Specification data</item>       <item>*              DATA(ls_spec) = lt_spec[ cself = lf_idxco ].</item>       <item>SORT lt_spec BY sblar DESCENDING.</item>       <item>CHECK lt_spec[] IS NOT
INITIAL.</item>       <item>DATA(ls_spec) = lt_spec[ 1 ].</item>       <item/>       <item>&quot; Set Counter (CSELF) to KOMP</item>       <item>*              cs_tkomp-yy_cself = ls_spec-cself.</item>       <item/>       <item>&quot;provide Gross Area Bl
ank and Sold Area Blank</item>       <item>*              cs_tkomp-yyablag     = ls_spec-ablag.</item>       <item>*              cs_tkomp-yyablag_uom = ls_spec-ablag_uom.</item>       <item>*              cs_tkomp-yysblar     = ls_spec-sblar.</item>
  <item>*              cs_tkomp-yysblar_uom = ls_spec-sblar_uom.</item>       <item>CATCH cx_sy_itab_line_not_found.</item>       <item>ENDTRY.</item>       <item/>       <item>CATCH /vcxi/cx_ckx.</item>       <item>ENDTRY.</item>       <item/>       <ite
m>CHECK lt_board[] IS NOT INITIAL.</item>       <item>DATA(ls_board) = lt_board[ 1 ].</item>       <item/>       <item/>       <item>CLEAR lt_cm[].</item>       <item/>       <item>IF t_rte[] IS NOT INITIAL.</item>       <item/>       <item>SELECT * FROM
zssdt_cm INTO TABLE lt_cm</item>       <item>FOR ALL ENTRIES IN t_rte</item>       <item>WHERE vkorg = vbak-vkorg</item>       <item>AND vtweg = vbak-vtweg</item>       <item>AND werks = vbap-werks</item>       <item>AND auart = vbak-auart</item>       <i
tem>AND pstyv = vbap-pstyv</item>       <item>AND board = ls_board-board</item>       <item>AND flute = ls_board-flute</item>       <item>AND arbpl = t_rte-arbpl.</item>       <item/>       <item>ENDIF.</item>       <item/>       <item>IF lt_cm[] IS INITI
AL.</item>       <item/>       <item>SELECT * FROM zssdt_cm INTO TABLE lt_cm</item>       <item>FOR ALL ENTRIES IN t_rte</item>       <item>WHERE vkorg = vbak-vkorg</item>       <item>AND vtweg = vbak-vtweg</item>       <item>AND werks = vbap-werks</item>
       <item>AND auart = vbak-auart</item>       <item>AND pstyv = vbap-pstyv</item>       <item>AND arbpl = t_rte-arbpl.</item>       <item/>       <item>ENDIF.</item>       <item/>       <item>IF lt_cm[] IS INITIAL .</item>       <item/>       <item>SEL
ECT * FROM zssdt_cm INTO TABLE lt_cm</item>       <item>WHERE vkorg = vbak-vkorg</item>       <item>AND vtweg = vbak-vtweg</item>       <item>AND werks = vbap-werks</item>       <item>AND auart = vbak-auart</item>       <item>AND pstyv = vbap-pstyv</item>
       <item>AND board = ls_board-board</item>       <item>AND flute = ls_board-flute.</item>       <item/>       <item>ENDIF.</item>       <item/>       <item>CHECK lt_cm[] IS NOT INITIAL.</item>       <item>SORT lt_cm BY zwmeng ASCENDING.</item>       <
item>DATA(ls_cm) = lt_cm[ 1 ].</item>       <item/>       <item>lv_sblar = ls_spec-sblar.</item>       <item>lv_wmeng = vbep-wmeng.</item>       <item>lv_calculo = lv_sblar * lv_wmeng.</item>       <item>lv_calculo = lv_calculo / 1000.</item>       <item>
lv_zwmeng = ls_cm-zwmeng * 100.</item>       <item/>       <item>IF lv_calculo LT lv_zwmeng.&quot;ls_cm-zwmeng.</item>       <item/>       <item>DATA: lv_mensaje(100) TYPE c.</item>       <item>lv_mensaje = ls_cm-zwmeng.</item>       <item>CONDENSE lv_men
saje.</item>       <item/>       <item>CONCATENATE &apos;La cantidad indicada en posición NO supera la cantidad mínima en M2 de referencia:&apos; lv_mensaje INTO lv_mensaje SEPARATED BY space.</item>       <item/>       <item>MESSAGE lv_mensaje TYPE &apos
;I&apos;.</item>       <item/>       <item>*    vbep-wmeng = *vbep-wmeng.</item>       <item/>       <item>ENDIF.</item>       <item/>       <item/>       <item>ENDIF.</item>       <item/>       <item>endif.</item>       <item/>      </SOURCE>      <PAREN
T_FULL_NAME/>     </ENH_HOOK_IMPL>    </IMPLS>   </asx:values>  </asx:abap> </ENHO>
