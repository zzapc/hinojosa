*&---------------------------------------------------------------------*
*& Report  ZSDD039
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zssdd039.
TABLES: vbak, vbap.

SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-b01.
SELECT-OPTIONS: s_vkorg FOR vbak-vkorg OBLIGATORY,
                s_vtweg FOR vbak-vtweg OBLIGATORY,
                s_spart FOR vbak-spart OBLIGATORY,
                s_auart FOR vbak-auart OBLIGATORY,
                s_vbeln FOR vbak-vbeln,
                s_kunnr FOR vbak-kunnr,
                s_matnr FOR vbap-matnr.
SELECTION-SCREEN END OF BLOCK b01.

SELECTION-SCREEN BEGIN OF BLOCK b02 WITH FRAME TITLE text-b02.
PARAMETERS: p_abgru TYPE vbap-abgru OBLIGATORY.
SELECTION-SCREEN END OF BLOCK b02.

START-OF-SELECTION.
  PERFORM f_start_of_selection.

*&---------------------------------------------------------------------*
*&      Form  F_START_OF_SELECTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_start_of_selection .




  SELECT vbak~vbeln, vbak~vkorg, vbak~vtweg, vbak~spart, vbak~auart, vbak~kunnr,
           vbap~matnr, vbap~posnr, vbap~abgru, vbak~erdat, vbak~erzet
      INTO TABLE @DATA(tl_vbap)
      FROM vbap INNER JOIN vbak ON vbak~vbeln = vbap~vbeln
      WHERE vbak~vbeln IN @s_vbeln AND
            vbak~vkorg IN @s_vkorg AND
            vbak~vtweg IN @s_vtweg AND
            vbak~spart IN @s_spart AND
            vbak~auart IN @s_auart AND
            vbak~kunnr IN @s_kunnr AND
            vbap~matnr IN @s_matnr AND
            vbap~abgru = @space    AND
            NOT EXISTS ( SELECT *   "Los materiales que debemos de excluir de la búsqueda están en la tabla ZSSDT00B_OF_PED
                            FROM zssdt00b_of_ped
                            WHERE zssdt00b_of_ped~vkorg = vbak~vkorg AND
                                  zssdt00b_of_ped~vtweg = vbak~vtweg AND
                                  zssdt00b_of_ped~spart = vbak~spart AND
                                  zssdt00b_of_ped~matnr = vbap~matnr )
     ORDER BY vbak~kunnr, vbap~matnr, vbak~erdat DESCENDING, vbak~erzet DESCENDING, vbak~vbeln DESCENDING.


*  IF tl_vbap_min_erdat IS NOT INITIAL.
*    SELECT vbak~vbeln, vbak~vkorg, vbak~vtweg, vbak~spart, vbak~auart, vbak~kunnr,
*           vbap~matnr, vbap~posnr, vbap~abgru, vbak~erdat, vbak~erzet
*      INTO TABLE @DATA(tl_vbap)
*      FROM vbap INNER JOIN vbak ON vbak~vbeln = vbap~vbeln
*      FOR ALL ENTRIES IN @tl_vbap_min_erdat
*      WHERE vbak~vbeln IN @s_vbeln AND
*            vbak~vkorg IN @s_vkorg AND
*            vbak~vtweg IN @s_vtweg AND
*            vbak~spart IN @s_spart AND
*            vbak~auart IN @s_auart AND
*            vbak~kunnr = @tl_vbap_min_erdat-kunnr AND
*            vbap~matnr = @tl_vbap_min_erdat-matnr AND
*            vbak~erdat = @tl_vbap_min_erdat-erdat AND
*            vbap~abgru <> @space.
*
*    SORT tl_vbap BY kunnr matnr erdat ASCENDING erzet ASCENDING.
*  ENDIF.


  DATA: wl_vbap_aux LIKE LINE OF tl_vbap.
  DATA: vl_cambio   TYPE xfeld.
  LOOP AT tl_vbap ASSIGNING FIELD-SYMBOL(<fs_vbap>).
    CLEAR vl_cambio.
    IF <fs_vbap>-kunnr <> wl_vbap_aux-kunnr OR <fs_vbap>-matnr <> wl_vbap_aux-matnr.
      vl_cambio = 'X'.
    ENDIF.
    wl_vbap_aux = <fs_vbap>.

    IF vl_cambio = 'X'.
      DELETE tl_vbap. CONTINUE.
    ENDIF.
  ENDLOOP.


  DATA: wl_order_header_in  TYPE bapisdhd1,
        wl_order_header_inx TYPE bapisdhd1x,
        tl_return           TYPE TABLE OF bapiret2,
        tl_item_in          TYPE TABLE OF bapisditm,
        tl_item_inx         TYPE TABLE OF bapisditmx.


  LOOP AT tl_vbap ASSIGNING <fs_vbap>.
    CLEAR: tl_return, tl_item_in, tl_item_inx.
    wl_order_header_inx-updateflag = 'U'.

    APPEND INITIAL LINE TO tl_item_in ASSIGNING FIELD-SYMBOL(<fs_item_in>).
    <fs_item_in>-itm_number = <fs_vbap>-posnr.
*    <fs_item_in>-reason_rej = 'Z4'.
    <fs_item_in>-reason_rej = p_abgru.


    APPEND INITIAL LINE TO tl_item_inx ASSIGNING FIELD-SYMBOL(<fs_item_inx>).
    <fs_item_inx>-itm_number = <fs_vbap>-posnr.
    <fs_item_inx>-updateflag = 'U'.
    <fs_item_inx>-reason_rej = 'X'.

    CALL FUNCTION 'SD_SALESDOCUMENT_CHANGE'
      EXPORTING
        salesdocument     = <fs_vbap>-vbeln
        order_header_in   = wl_order_header_in
        order_header_inx  = wl_order_header_inx
      TABLES
        return            = tl_return
        item_in           = tl_item_in
        item_inx          = tl_item_inx
      EXCEPTIONS
        incov_not_in_item = 1
        OTHERS            = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    LOOP AT tl_return ASSIGNING FIELD-SYMBOL(<fs_return>) WHERE type CA 'EA'.
      MESSAGE ID <fs_return>-id TYPE <fs_return>-type NUMBER <fs_return>-number
        WITH <fs_return>-message_v1 <fs_return>-message_v2 <fs_return>-message_v3 <fs_return>-message_v4.
    ENDLOOP.
  ENDLOOP.

  IF tl_vbap IS INITIAL.
    MESSAGE 'No se han encontrado datos' TYPE 'I'.
  ELSE.
    MESSAGE 'Proceso terminado correctamente' TYPE 'S'.
    COMMIT WORK.
  ENDIF.
ENDFORM.
