*&---------------------------------------------------------------------*
*&  Include           SAPMZSDCOM_LIQ_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  CREAR_PROPUESTA_INI
*&---------------------------------------------------------------------*
FORM crear_propuesta_ini.

* Chequeamos si la propuesta ya existe
  SELECT SINGLE * FROM ztsdcom_prliqcab
      WHERE laufd = gs_cab-laufd
      AND   laufi = gs_cab-laufi
      AND   bukrs = gs_cab-bukrs.
* Si existe -> ERROR y fuera
  IF sy-subrc = 0.
    MESSAGE w013.
    EXIT.
  ENDIF.

* Sacamos los datos de la sociedad
  SELECT SINGLE * FROM t001
      WHERE bukrs = gs_cab-bukrs.
  CHECK sy-subrc = 0.

* Cargamos el modo creación
  gv_modo = 'C'.

* Cargamos los datos de cabecera que faltan
  gs_cab-ernam     = sy-uname.
  gs_cab-erdat     = sy-datum.
  PERFORM sacar_texto_status  USING    gs_cab-zstat_liq
                              CHANGING gs_cab-text.

* Inicializamos los parámetros de la pantalla de selección
  CLEAR: so_basli, so_lifnr.
  REFRESH: so_basli, so_lifnr.
**  p_datum = sy-datum.
**  bot_sel = 'Seleccionar'(b02). " Ponemos el texto del botón

* Si la propuesta no existe cargamos los datos de la siguiente dynpro
  gv_dyncab = gc_dyncab. "Cabecera de comisionistas
  gv_dyncon = gc_dynsel. "Selección de facturas
  LEAVE TO SCREEN 200.

ENDFORM.                    " CREAR_PROPUESTA_INI

*&---------------------------------------------------------------------*
*&      Form  SELECCIONAR_FACT_PDTES
*&---------------------------------------------------------------------*
FORM seleccionar_fact_pdtes.

  DATA: lr_lifnr TYPE zttsdcom_lifnr_range,
        lr_basli TYPE zttsdcom_basli_range.

  DATA: ls_prliqcab TYPE ztsdcom_prliqcab.

* Si estamos en modo creación -> Inicializamos datos
  IF gv_modo = 'C'.
    REFRESH: gti_facts, gti_facts_com.
  ENDIF.

* Cargamos los rangos
  lr_lifnr[] = so_lifnr[].
  lr_basli[] = so_basli[].

* Estructura de cabecera
  MOVE-CORRESPONDING gs_cab TO ls_prliqcab.

* Llamamos a la función que selecciona las facturas para la propuesta
  CALL FUNCTION 'ZSDCOM_SELECCIONAR_FACT_PRLIQ'
    EXPORTING
      is_prliqcab = ls_prliqcab
      ir_lifnr    = lr_lifnr
      ir_basli    = lr_basli
      i_datum     = p_datum
    IMPORTING
      et_facts    = gti_facts.

* Rellenamos la tabla agrupada por comisionista
  PERFORM cargar_tabla_comisionistas.

* Si la propuesta no existe cargamos los datos de la siguiente dynpro
  IF gti_comis[] IS NOT INITIAL.
    gv_dyncab = gc_dyncab. "Cabecera de comisionistas
    gv_dyncon = gc_dyncom. "Lista de liquidación de comisionistas
  ELSE.
    MESSAGE w014.
  ENDIF.

ENDFORM.                    " SELECCIONAR_FACT_PDTES

*&---------------------------------------------------------------------*
*&      Form  CARGAR_TABLA_COMISIONISTAS
*&---------------------------------------------------------------------*
FORM cargar_tabla_comisionistas.

  DATA: lti_com_key   TYPE TABLE OF ty_key_com.

  DATA: ls_com_key TYPE ty_key_com,
        ls_fact    TYPE zssdcomliq002_grid,
        ls_comis   TYPE zssdcomliq001_grid.

  DATA: lv_ind        TYPE i.

* Chequeamos que la tabla de facturas está rellena
  CHECK gti_facts[] IS NOT INITIAL.

* Inicializamos
  CLEAR gs_com.
  REFRESH gti_comis.

* Sacamos una tabla local por comisionista
  LOOP AT gti_facts INTO ls_fact.
    CLEAR ls_com_key.
    ls_com_key-bukrs = ls_fact-bukrs.
    ls_com_key-lifnr = ls_fact-lifnr.
    ls_com_key-waerk = ls_fact-waerk.
    ls_com_key-gsber = ls_fact-gsber.
    COLLECT ls_com_key INTO lti_com_key.
  ENDLOOP.

* Recorremos la tabla sacando el nombre del comisionista
  DATA v_nombre_real TYPE znombre_real.
  LOOP AT lti_com_key INTO ls_com_key.
    lv_ind = sy-tabix.
    CLEAR v_nombre_real.
    SELECT SINGLE name1 INTO ls_com_key-name1
        FROM  lfa1
        WHERE lifnr = ls_com_key-lifnr.

    SELECT SINGLE nombre_real INTO v_nombre_real FROM zfi_nombre_empl
      WHERE lifnr = ls_com_key-lifnr.
    IF v_nombre_real IS NOT INITIAL.
      ls_com_key-name1 = v_nombre_real.
    ENDIF.

    SELECT SINGLE gtext INTO ls_com_key-gtext FROM tgsbt
      WHERE gsber = ls_com_key-gsber
        AND spras = sy-langu.

    MODIFY lti_com_key FROM ls_com_key INDEX lv_ind.
  ENDLOOP.

* Recorremos los comisionistas sacando la tabla final
  LOOP AT lti_com_key INTO ls_com_key.
    CLEAR ls_comis.
    MOVE-CORRESPONDING ls_com_key TO ls_comis.
    LOOP AT gti_facts INTO  ls_fact
                      WHERE bukrs = ls_com_key-bukrs
                      AND   lifnr = ls_com_key-lifnr
                      AND   waerk = ls_com_key-waerk
                      AND   gsber = ls_com_key-gsber.
*     Acumulamos importes
      IF ls_fact-checkbox = 'X'.
        ls_comis-zstat_pos_liq = ls_fact-zstat_pos_liq.
        ls_comis-belnr_liq = ls_fact-belnr_liq.
        ls_comis-gjahr_liq = ls_fact-gjahr_liq.
        ls_comis-zimp_pro  = ls_comis-zimp_pro + ls_fact-zimp_pro.
        ls_comis-zimp_liq  = ls_comis-zimp_liq + ls_fact-zimp_liq.
        ls_comis-num_facts = ls_comis-num_facts + 1.
        ls_comis-waerk     = ls_fact-waerk.
        IF ls_fact-waerk = 'EUR'.
          ls_comis-zimp_pro_eur = ls_comis-zimp_pro.
          ls_comis-zimp_liq_eur = ls_comis-zimp_liq.
          ls_comis-waerk_eur = 'EUR'.
        ELSE.
          DATA v_budat TYPE budat.
          DATA v_kursf LIKE bkpf-kursf.
          DATA v_kuty2 LIKE bkpf-kuty2.
          CLEAR: v_budat, v_kursf, v_kuty2.
          SELECT SINGLE budat kursf kuty2 INTO (v_budat, v_kursf, v_kuty2) FROM bkpf
            WHERE bukrs = ls_fact-bukrs
              AND belnr = ls_fact-belnr
              AND gjahr = ls_fact-gjahr.

          CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
            EXPORTING
              date             = v_budat
              foreign_amount   = ls_fact-zimp_pro
              foreign_currency = ls_fact-waerk
              local_currency   = 'EUR'
              rate             = v_kursf
              type_of_rate     = v_kuty2
              read_tcurr       = 'X'
            IMPORTING
              "exchange_rate    = v_kursf
              local_amount     = ls_fact-zimp_pro
            EXCEPTIONS
              no_rate_found    = 1
              overflow         = 2
              no_factors_found = 3
              no_spread_found  = 4
              derived_2_times  = 5
              OTHERS           = 6.

          CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
            EXPORTING
              date             = v_budat
              foreign_amount   = ls_fact-zimp_liq
              foreign_currency = ls_fact-waerk
              local_currency   = 'EUR'
              rate             = v_kursf
              type_of_rate     = v_kuty2
              read_tcurr       = 'X'
            IMPORTING
              "exchange_rate    = v_kursf
              local_amount     = ls_fact-zimp_liq
            EXCEPTIONS
              no_rate_found    = 1
              overflow         = 2
              no_factors_found = 3
              no_spread_found  = 4
              derived_2_times  = 5
              OTHERS           = 6.

          ls_comis-zimp_pro_eur  = ls_comis-zimp_pro_eur + ls_fact-zimp_pro.
          ls_comis-zimp_liq_eur  = ls_comis-zimp_liq_eur + ls_fact-zimp_liq.
          ls_comis-waerk_eur = 'EUR'.
        ENDIF.
      ENDIF.
    ENDLOOP.
*   Añadimos la línea
    APPEND ls_comis TO gti_comis.
  ENDLOOP.

ENDFORM.                    " CARGAR_TABLA_COMISIONISTAS

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_FACTURAS_COMIS
*&---------------------------------------------------------------------*
FORM mostrar_facturas_comis  USING    ps_comis TYPE zssdcomliq001_grid.

  DATA: ls_fact TYPE zssdcomliq002_grid.

* Inicializamos
  CLEAR gs_com.
  REFRESH gti_facts_com.

* Cargamos la cabecera del comisionista
  MOVE-CORRESPONDING ps_comis TO gs_com.
  CLEAR gs_com_aux.
  MOVE-CORRESPONDING ps_comis TO gs_com_aux.

* Cargamos la tabla de facturas del comisionista
  LOOP AT gti_facts INTO  ls_fact
                    WHERE bukrs = ps_comis-bukrs
                    AND   lifnr = ps_comis-lifnr
                    AND   waerk = ps_comis-waerk
                    AND   gsber = ps_comis-gsber.

    "JGS
    IF ls_fact-waerk = 'EUR'.
      ls_fact-zimp_pro_eur = ls_fact-zimp_pro.
      ls_fact-zimp_liq_eur = ls_fact-zimp_liq.
      ls_fact-waerk_eur = 'EUR'.
    ELSE.
      DATA v_budat TYPE budat.
      DATA v_kursf LIKE bkpf-kursf.
      DATA v_kuty2 LIKE bkpf-kuty2.
      CLEAR: v_budat, v_kursf, v_kuty2.
      SELECT SINGLE budat kursf kuty2 INTO (v_budat, v_kursf, v_kuty2) FROM bkpf
        WHERE bukrs = ls_fact-bukrs
          AND belnr = ls_fact-belnr
          AND gjahr = ls_fact-gjahr.

      CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
        EXPORTING
          date             = v_budat
          foreign_amount   = ls_fact-zimp_pro
          foreign_currency = ls_fact-waerk
          local_currency   = 'EUR'
          rate             = v_kursf
          type_of_rate     = v_kuty2
          read_tcurr       = 'X'
        IMPORTING
          "exchange_rate    = v_kursf
          local_amount     = ls_fact-zimp_pro_eur
        EXCEPTIONS
          no_rate_found    = 1
          overflow         = 2
          no_factors_found = 3
          no_spread_found  = 4
          derived_2_times  = 5
          OTHERS           = 6.

      CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
        EXPORTING
          date             = v_budat
          foreign_amount   = ls_fact-zimp_liq
          foreign_currency = ls_fact-waerk
          local_currency   = 'EUR'
          rate             = v_kursf
          type_of_rate     = v_kuty2
          read_tcurr       = 'X'
        IMPORTING
          local_amount     = ls_fact-zimp_liq_eur
        EXCEPTIONS
          no_rate_found    = 1
          overflow         = 2
          no_factors_found = 3
          no_spread_found  = 4
          derived_2_times  = 5
          OTHERS           = 6.

      ls_fact-waerk_eur = 'EUR'.
    ENDIF.

    APPEND ls_fact TO gti_facts_com.
  ENDLOOP.

* Cargamos la nueva dynpro
  IF gti_facts_com[] IS NOT INITIAL.
    gv_dyncon = gc_dynfac.
    LEAVE TO SCREEN 200.
  ENDIF.

ENDFORM.                    " MOSTRAR_FACTURAS_COMIS

*&---------------------------------------------------------------------*
*&      Form  GRABAR_PROPUESTA
*&---------------------------------------------------------------------*
FORM grabar_propuesta USING p_contab.

  DATA: ls_prliqcab TYPE ztsdcom_prliqcab,
        ls_comis    TYPE zssdcomliq001_grid,
        ls_com      TYPE ty_com.

  DATA: lv_error        TYPE flag.

* Cargamos la cabecera
  MOVE-CORRESPONDING gs_cab TO ls_prliqcab.

* Llamamos a la función que graba la propuesta
  CALL FUNCTION 'ZSDCOM_GRABAR_FACTURAS_PRLIQ'
    EXPORTING
      is_prliqcab = ls_prliqcab
      it_facts    = gti_facts[].

* Si estamos en modo CONTABILIZAR -> NO HACEMOS NADA MAS
* Lo de abajo solo se hace cuando estamos modificando -> Pulsar GRABAR manualmente
  CHECK p_contab IS INITIAL.

* Mostramos un mensaje informativo
  MESSAGE i015.

* Ponemos todo en modo modificable y cargamos de nuevo los datos
  gv_modo = 'M'.

* Si estamos en la pantalla de facturas nos quedamos ahí
  IF gv_dyncon = gc_dynfac.
    ls_com = gs_com.
  ENDIF.
* Sacamos de nuevo los datos de la propuesta
  PERFORM sacar_datos_propuesta  CHANGING lv_error.
  CHECK lv_error IS INITIAL.
* Por defecto cargamos de nuevo la dynpro de cabecera y el contenedor con el listado de comisionistas
  gv_dyncab = gc_dyncab.
  gv_dyncon = gc_dyncom.
* Volvemos a cargar los datos del detalle de facturas
  IF ls_com IS NOT INITIAL.
*   Sacamos ls línea del comisionista
    READ TABLE gti_comis INTO ls_comis WITH KEY bukrs = gs_cab-bukrs
                                                lifnr = ls_com-lifnr
                                                waerk = ls_com-waerk
                                                gsber = ls_com-gsber.
*   Mostramos los datos
    PERFORM mostrar_facturas_comis  USING ls_comis.
  ENDIF.

ENDFORM.                    " GRABAR_PROPUESTA

*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_PROPUESTA
*&---------------------------------------------------------------------*
FORM eliminar_propuesta USING p_popup.

  DATA: ls_posliq TYPE ztsdcom_prliqpos,
        ls_fact   TYPE zssdcomliq002_grid.

  DATA: lv_answer      TYPE char1,
        lv_stat_liqpos TYPE zstat_liqpos.

  IF gs_cab-zstat_liq = '2' OR gs_cab-zstat_liq = '3'.
    MESSAGE s368(00) WITH 'Status no permite BORRAR propuesta'.
    CHECK 1 = 2.
  ENDIF.

* Si viene marcado el parámetro p_popup mostramos un POPUP para confirmar
* que el usuario quiere eliminar la propuesta
  IF p_popup = 'X'.
    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        titlebar      = 'Aviso'(800)
        text_question = 'Realmente desea eliminar la propuesta'(802)
      IMPORTING
        answer        = lv_answer.
*   Si no confirman, salimos sin hacer nada
    IF lv_answer <> '1'.
      EXIT.
    ENDIF.
  ENDIF.

* Eliminamos la cabecera de la propuesta
  DELETE FROM ztsdcom_prliqcab
      WHERE laufd = gs_cab-laufd
      AND   laufi = gs_cab-laufi
      AND   bukrs = gs_cab-bukrs.

* Eliminamos las posiciones de la propuesta
  DELETE FROM ztsdcom_prliqpos
      WHERE bukrs = gs_cab-bukrs
      AND   laufd = gs_cab-laufd
      AND   laufi = gs_cab-laufi.

* Modificamos la tabla de posiciones de provisión para liberar las posiciones
  LOOP AT gti_facts INTO ls_fact.
*   Si tiene liquidación parcial -> Status parcial
    IF ls_fact-zliq_par <> 0.
      lv_stat_liqpos = gc_pos_par.
    ELSE.
      lv_stat_liqpos = gc_pos_pdt.
    ENDIF.

*   Modificamos la tabla
    UPDATE ztsdcom_pos SET laufd = space laufi = space zstat_liqpos = lv_stat_liqpos
        WHERE bukrs    = ls_fact-bukrs
        AND   belnr_vf = ls_fact-belnr
        AND   gjahr    = ls_fact-gjahr
        AND   vbeln    = ls_fact-vbeln
        AND   lifnr    = ls_fact-lifnr
        AND   kschl    = ls_fact-kschl
        AND   gsber    = ls_fact-gsber
        AND   laufd    = gs_cab-laufd
        AND   laufi    = gs_cab-laufi.

  ENDLOOP.

* Hacemos el COMMIT
  COMMIT WORK AND WAIT.

* Mensaje de confirmación
  MESSAGE i016.

* Inicializamos todo
  CLEAR: gs_cab, gs_com, gv_dyncab, gv_dyncon, gv_modo, zssdcom_prliqcab,
         gv_status.
  REFRESH: gti_comis, gti_facts, gti_facts_com, gti_log.

* Volvemos a la pantalla inicial
  LEAVE TO SCREEN 100.

ENDFORM.                    " ELIMINAR_PROPUESTA

*&---------------------------------------------------------------------*
*&      Form  VISUALIZAR_PROPUESTA
*&---------------------------------------------------------------------*
FORM cargar_propuesta USING p_modo.

  DATA: lv_error TYPE flag.

* Sacamos los datos de la propuesta
  PERFORM sacar_datos_propuesta CHANGING lv_error.
  CHECK lv_error IS INITIAL.

* Cargamos el modo
  gv_modo = p_modo.

* Si estamos modificando, pero la propuesta está en un estado distinto
* al 01 (contabilizada) -> NO SE PUEDE MODIFICAR
  IF gv_modo = 'M'.
*    IF gs_cab-zstat_liq <> gc_liq_cr.
    IF gs_cab-zstat_liq =  gc_liq_cb.
      MESSAGE w017 DISPLAY LIKE 'I'.
      gv_modo = 'V'.
    ENDIF.
  ENDIF.

* Cargamos las dynpros iniciales
  gv_dyncab = gc_dyncab. "Cabecera de comisionistas
  gv_dyncon = gc_dyncom. "Listado de comisionistas
  LEAVE TO SCREEN 200.

ENDFORM.                    " VISUALIZAR_PROPUESTA

*&---------------------------------------------------------------------*
*&      Form  SACAR_DATOS_PROPUESTA
*&---------------------------------------------------------------------*
FORM sacar_datos_propuesta  CHANGING p_error.

  DATA: ls_fact   TYPE zssdcomliq002_grid,
        ls_cabliq TYPE zssdcom_prliqcab_key.
  DATA: lv_ind    TYPE i.
  DATA l_where TYPE string.
* Inicializamos
  CLEAR p_error.
  CLEAR: gs_com, gv_dyncab, gv_dyncon.
  REFRESH: gti_comis, gti_facts, gti_facts_com.

* Cargamos la clave de la cabecera de la liquidación
  MOVE-CORRESPONDING gs_cab TO ls_cabliq.

* Chequeamos si la propuesta ya existe
  IF gs_cab-laufd IS NOT INITIAL AND gs_cab-laufi IS NOT INITIAL AND gs_cab-bukrs IS NOT INITIAL.
    SELECT SINGLE * FROM ztsdcom_prliqcab
        WHERE laufd = gs_cab-laufd
        AND   laufi = gs_cab-laufi
        AND   bukrs = gs_cab-bukrs.
* Si existe -> ERROR y fuera
    IF sy-subrc <> 0.
      p_error = 'X'.
      MESSAGE w018.
      EXIT.
    ENDIF.
  ENDIF.
* Cargamos los datos de cabecera
  MOVE-CORRESPONDING ztsdcom_prliqcab TO gs_cab.
  PERFORM sacar_texto_status USING    gs_cab-zstat_liq
                             CHANGING gs_cab-text.

* Sacamos los datos de la sociedad
  IF  gs_cab-bukrs IS NOT INITIAL.
    SELECT SINGLE * FROM t001 WHERE bukrs = gs_cab-bukrs.
    CHECK sy-subrc = 0.
  ENDIF.
*  PERFORM get_where CHANGING l_where. "CVP añadir filtro cliente ( ya no se requiere)
*  IF l_where IS INITIAL.
*    p_error = 'X'.
*    MESSAGE w033.
*    EXIT.
*  ELSE.
* Sacamos las posiciones de la propuesta
*    TRY.
  SELECT * INTO CORRESPONDING FIELDS OF TABLE gti_facts
  FROM  ztsdcom_prliqpos
*        WHERE (l_where).
  WHERE  laufd = gs_cab-laufd
  AND   laufi = gs_cab-laufi
  AND   bukrs = gs_cab-bukrs.
*      CATCH cx_sy_dynamic_osql_semantics.
*        p_error = 'X'.
*        MESSAGE w018.
*        EXIT.
*    ENDTRY.
  IF sy-subrc <> 0 .
    p_error = 'X'.
    MESSAGE w018.
    EXIT.
  ENDIF.
*  ENDIF.

* Recorremos las facturas añadiendo el nombre del cliente
  LOOP AT gti_facts INTO ls_fact.
    IF ls_cabliq IS INITIAL.
      MOVE-CORRESPONDING ls_fact TO ls_cabliq.
    ENDIF.
    lv_ind = sy-tabix.
*   Ponemos el icono
    IF ls_fact-checkbox = 'X'.
      ls_fact-icono = icon_led_green.
    ELSE.
      ls_fact-icono = icon_led_yellow.
    ENDIF.
*   Sacamos el nombre
    SELECT SINGLE name1 INTO ls_fact-name1
        FROM  kna1
        WHERE kunnr = ls_fact-kunnr.
    SELECT SINGLE gtext INTO ls_fact-gtext
      FROM tgsbt
      WHERE gsber = ls_fact-gsber
        AND spras = sy-langu.
*   Sacamos el importe de liquidación parcial
    CALL FUNCTION 'ZSDCOM_IMPORTE_PARCIAL_LIQUID'
      EXPORTING
        is_cabliq = ls_cabliq
        i_bukrs   = ls_fact-bukrs
        i_lifnr   = ls_fact-lifnr
        i_vbeln   = ls_fact-vbeln
        i_kschl   = ls_fact-kschl
      IMPORTING
        e_importe = ls_fact-zliq_par.

    "JGS
    IF ls_fact-waerk = 'EUR'.
      ls_fact-zimp_pro_eur = ls_fact-zimp_pro.
      ls_fact-zimp_liq_eur = ls_fact-zimp_liq.
      ls_fact-waerk_eur = 'EUR'.
    ELSE.
      DATA v_budat TYPE budat.
      DATA v_kursf LIKE bkpf-kursf.
      DATA v_kuty2 LIKE bkpf-kuty2.
      CLEAR: v_budat, v_kursf, v_kuty2.
      SELECT SINGLE budat kursf kuty2 INTO (v_budat, v_kursf, v_kuty2) FROM bkpf
        WHERE bukrs = ls_fact-bukrs
          AND belnr = ls_fact-belnr
          AND gjahr = ls_fact-gjahr.

      CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
        EXPORTING
          date             = v_budat
          foreign_amount   = ls_fact-zimp_pro
          foreign_currency = ls_fact-waerk
          local_currency   = 'EUR'
          rate             = v_kursf
          type_of_rate     = v_kuty2
          read_tcurr       = 'X'
        IMPORTING
          "exchange_rate    = v_kursf
          local_amount     = ls_fact-zimp_pro_eur
        EXCEPTIONS
          no_rate_found    = 1
          overflow         = 2
          no_factors_found = 3
          no_spread_found  = 4
          derived_2_times  = 5
          OTHERS           = 6.

      CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
        EXPORTING
          date             = v_budat
          foreign_amount   = ls_fact-zimp_liq
          foreign_currency = ls_fact-waerk
          local_currency   = 'EUR'
          rate             = v_kursf
          type_of_rate     = v_kuty2
          read_tcurr       = 'X'
        IMPORTING
          "exchange_rate    = v_kursf
          local_amount     = ls_fact-zimp_liq_eur
        EXCEPTIONS
          no_rate_found    = 1
          overflow         = 2
          no_factors_found = 3
          no_spread_found  = 4
          derived_2_times  = 5
          OTHERS           = 6.

      ls_fact-waerk_eur = 'EUR'.
    ENDIF.

*   Modificamos
    MODIFY gti_facts FROM ls_fact INDEX lv_ind.
    IF gs_cab-bukrs IS INITIAL.
      gs_cab-bukrs = ls_fact-bukrs.
      SELECT SINGLE * FROM t001 WHERE bukrs = ls_fact-bukrs.
      CHECK sy-subrc = 0.
    ENDIF.
  ENDLOOP.

* Con la tabla de facturas, sacamos la agrupada por comisionista
  PERFORM cargar_tabla_comisionistas.

ENDFORM.                    " SACAR_DATOS_PROPUESTA

*&---------------------------------------------------------------------*
*&      Form  PREPARE_STATUS_200
*&---------------------------------------------------------------------*
FORM prepare_status_200 .

* Inicializamos
  REFRESH gti_excbot.

* Quitamos botones del STATUS dependiendo del modo en el que nos
* encontremos
  CASE gv_modo.
*   Visualización
    WHEN 'V'.
      APPEND 'SELFACT'  TO gti_excbot.
      APPEND 'ELIMINAR' TO gti_excbot.
      APPEND 'SAVE_PR'  TO gti_excbot.
      APPEND 'CONT_LIQ' TO gti_excbot.

*     Chequeamos si la propuesta existe
      DATA lv_zstat_liq_aux LIKE ztsdcom_prliqcab-zstat_liq.
      CLEAR lv_zstat_liq_aux.
      SELECT SINGLE zstat_liq	INTO lv_zstat_liq_aux
          FROM ztsdcom_prliqcab
          WHERE laufd = zssdcom_prliqcab-laufd
          AND   laufi = zssdcom_prliqcab-laufi
          AND   bukrs = zssdcom_prliqcab-bukrs.
      IF lv_zstat_liq_aux <> '02' AND lv_zstat_liq_aux <> '03'.
        APPEND 'ANULARDOC' TO gti_excbot.
      ENDIF.

*   Modificación
    WHEN 'M'.
      APPEND 'SELFACT'  TO gti_excbot.
      "APPEND 'ANULARDOC' TO gti_excbot.

*     Chequeamos si la propuesta existe
      DATA lv_zstat_liq_aux2 LIKE ztsdcom_prliqcab-zstat_liq.
      CLEAR lv_zstat_liq_aux2.
      SELECT SINGLE zstat_liq	INTO lv_zstat_liq_aux2
          FROM ztsdcom_prliqcab
          WHERE laufd = zssdcom_prliqcab-laufd
          AND   laufi = zssdcom_prliqcab-laufi
          AND   bukrs = zssdcom_prliqcab-bukrs.
      IF lv_zstat_liq_aux2 <> '02' AND lv_zstat_liq_aux2 <> '03'.
        APPEND 'ANULARDOC' TO gti_excbot.
      ENDIF.

*   Modo creación
    WHEN 'C'.
      APPEND 'SELFACT'  TO gti_excbot.
      APPEND 'ELIMINAR' TO gti_excbot.
      APPEND 'CONT_LIQ' TO gti_excbot.
      APPEND 'PRINT'    TO gti_excbot.
      APPEND 'ANULARDOC' TO gti_excbot.
      APPEND 'MAIL' TO gti_excbot.

  ENDCASE.

ENDFORM.                    " PREPARE_STATUS_200

*&---------------------------------------------------------------------*
*&      Form  BACK_200
*&---------------------------------------------------------------------*
FORM back_200.

  CLEAR gs_com_aux.
* Dependiendo de la pantalla (subscreen contenedor) en la que estemos
* cargamos una dynpro u otra o volvermos a la inicial
  CASE gv_dyncon.

*   Subscreen de selección de facturas: volvemos a la inicial
    WHEN gc_dynsel.
*     Si estamos en modo creación, salimos...
      IF gv_modo = 'C'.
*       Inicializamos datos
        CLEAR: gs_cab, gs_com, so_basli, so_lifnr, p_datum,
               zssdcom_prliqcab, gv_status.
        REFRESH: gti_comis, gti_facts, gti_facts_com, so_basli, so_lifnr.
*       Volvemos a la pantalla inicial
        LEAVE TO SCREEN 100.
*     Si estamos en modo modificación volvemos a la dynpro de comisionistas
      ELSE.
*       Refrescamos la tabla de comisionistas por los cambios
        PERFORM cargar_tabla_comisionistas .
        gv_dyncon = gc_dyncom.
      ENDIF.

*   Subscreen listado liquidación comisionistas
    WHEN gc_dyncom.
*     Inicializamos datos
      CLEAR: gs_com.
      REFRESH: gti_comis, gti_facts, gti_facts_com.
*     Si estamos en modo creación -> Volvemos a la selección de facturas
      IF gv_modo = 'C'.
        CLEAR: so_basli, so_lifnr.
        REFRESH: so_basli, so_lifnr.
        gv_dyncon = gc_dynsel. "Selección de facturas
*     Si estamos modificando / visualizando -> Salimos a la dynpro inicial
      ELSE.
*       Volvemos a la pantalla inicial
        CLEAR: gs_cab, zssdcom_prliqcab, gv_status.
        LEAVE TO SCREEN 100.
      ENDIF.

*   Subscreen listado liquidación facturas por comisionista -> Volvemos al listado de comisionistas
    WHEN gc_dynfac.
*     Inicializamos datos
      CLEAR: gs_com.
      REFRESH: gti_facts_com.
*     Refrescamos la tabla de comisionistas por los cambios
      PERFORM cargar_tabla_comisionistas .
      gv_dyncon = gc_dyncom. "Detalle de comisionistas

  ENDCASE.

ENDFORM.                                                    " BACK_200

*&---------------------------------------------------------------------*
*&      Form  SACAR_TEXTO_STATUS
*&---------------------------------------------------------------------*
FORM sacar_texto_status  USING    p_zstat_liq
                         CHANGING p_text.

  DATA: lti_values TYPE TABLE OF dd07v.
  DATA: ls_value   TYPE dd07v.

* Inicializamos el texto como creación (NO TIENE STATUS)
  p_text = 'En creación'.

* Recuperamos los valores del dominio
  CALL FUNCTION 'GET_DOMAIN_VALUES'
    EXPORTING
      domname         = 'ZSTAT_LIQ'
    TABLES
      values_tab      = lti_values
    EXCEPTIONS
      no_values_found = 1
      OTHERS          = 2.
  CHECK sy-subrc = 0.

* Recuperamos el texto
  READ TABLE lti_values INTO ls_value WITH KEY domvalue_l = p_zstat_liq.
  IF sy-subrc = 0.
    p_text = ls_value-ddtext.
  ENDIF.

ENDFORM.                    " SACAR_TEXTO_STATUS

*&---------------------------------------------------------------------*
*&      Form  MARCAR_FACTURAS
*&---------------------------------------------------------------------*
FORM marcar_facturas  USING p_checkbox.

  DATA: ls_fact     TYPE zssdcomliq002_grid,
        ls_fact_aux TYPE zssdcomliq002_grid.

  DATA: lv_ind      TYPE i.

* Chequeamos que NO estamos en modo visualizar
  CHECK gv_modo <> 'V'.

* Recorremos todas las facturas del comisionista
  LOOP AT gti_facts_com INTO ls_fact.
    lv_ind = sy-tabix.
*   Modificamos el checkbox
    ls_fact-checkbox = p_checkbox.
*   Ponemos el icono
    IF ls_fact-checkbox = 'X'.
      ls_fact-icono = icon_led_green.
    ELSE.
      ls_fact-icono = icon_led_yellow.
    ENDIF.
    MODIFY gti_facts_com FROM ls_fact INDEX lv_ind.
*   Actualizamos la tabla global de facturas
    READ TABLE gti_facts INTO ls_fact_aux WITH KEY bukrs = ls_fact-bukrs
                                                   lifnr = ls_fact-lifnr
                                                   vbeln = ls_fact-vbeln
                                                   kschl = ls_fact-kschl
                                                   gsber = ls_fact-gsber.
    IF sy-subrc = 0.
      lv_ind = sy-tabix.
      MODIFY gti_facts FROM ls_fact INDEX lv_ind.
    ENDIF.
  ENDLOOP.

* Actualizamos el ALV
  PERFORM refrescar_alv_fac.

ENDFORM.                    " MARCAR_FACTURAS

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_PROPUESTA
*&---------------------------------------------------------------------*
FORM imprimir_propuesta.

  DATA: lti_return  TYPE TABLE OF bapiret2.
  DATA: ls_cabliq   TYPE zssdcom_prliqcab_key.
  DATA: lt_select   TYPE zttsdcom002_sel.
  DATA: ls_select   TYPE zssdcom002_sel.

  DATA: gi_index_rows  TYPE lvc_t_row,
        g_selected_row LIKE lvc_s_row.

  DATA: l_comis TYPE zssdcomliq001_grid.

* Cargamos los datos de cabecera para la impresión
  MOVE-CORRESPONDING gs_cab TO ls_cabliq.

  REFRESH gi_index_rows.
  CLEAR   g_selected_row.

  CALL METHOD g_grid_com->get_selected_rows
    IMPORTING
      et_index_rows = gi_index_rows.

  LOOP AT gi_index_rows INTO g_selected_row.
    READ TABLE gti_comis INTO l_comis INDEX g_selected_row-index.
    ls_select-bukrs = l_comis-bukrs.
    ls_select-lifnr = l_comis-lifnr.
    ls_select-gsber = l_comis-gsber.
    APPEND ls_select TO lt_select.
  ENDLOOP.

  IF lt_select[] IS NOT INITIAL.

* Imprimimos la propuesta de modificación
    CALL FUNCTION 'ZSDCOM_IMPRIMIR_PROP_LIQUID'
      EXPORTING
        is_cabliq = ls_cabliq
        it_selec  = lt_select
      IMPORTING
        et_return = lti_return.

* Si hay log, lo sacamos
    IF lti_return[] IS NOT INITIAL.
      CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
        TABLES
          i_bapiret2_tab = lti_return.
    ENDIF.
  ELSE.
    MESSAGE s398(00) WITH 'Selecciona alguna fila' DISPLAY LIKE 'E'.
  ENDIF.

ENDFORM.                    " IMPRIMIR_PROPUESTA

*&---------------------------------------------------------------------*
*&      Form  CONTABILIZAR_LIQUIDACION
*&---------------------------------------------------------------------*
FORM contabilizar_liquidacion.

  DATA: lti_return  TYPE TABLE OF bapiret2.
  DATA: ls_cabliq TYPE zssdcom_prliqcab_key,
        ls_return TYPE bapiret2.
  DATA: lt_select   TYPE zttsdcom002_sel.
  DATA: ls_select   TYPE zssdcom002_sel.

  DATA: gi_index_rows  TYPE lvc_t_row,
        g_selected_row LIKE lvc_s_row.

  DATA: l_comis TYPE zssdcomliq001_grid.

* Cargamos los datos de cabecera para la impresión
  MOVE-CORRESPONDING gs_cab TO ls_cabliq.

  REFRESH gi_index_rows.
  CLEAR   g_selected_row.

  CALL METHOD g_grid_com->get_selected_rows
    IMPORTING
      et_index_rows = gi_index_rows.

  LOOP AT gi_index_rows INTO g_selected_row.
    READ TABLE gti_comis INTO l_comis INDEX g_selected_row-index.
    ls_select-bukrs = l_comis-bukrs.
    ls_select-lifnr = l_comis-lifnr.
    ls_select-gsber = l_comis-gsber.
    APPEND ls_select TO lt_select.
  ENDLOOP.

  IF lt_select[] IS NOT INITIAL.

* Lanzamos la contabilización de la propuesta
    CALL FUNCTION 'ZSDCOM_CONTAB_PROP_LIQUID'
      EXPORTING
        is_prliq  = ls_cabliq
        it_selec  = lt_select
      IMPORTING
        et_return = lti_return.

* Mostramos los mensajes
    CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
      TABLES
        i_bapiret2_tab = lti_return.

* Si no hay errores -> Salimos
    READ TABLE lti_return INTO ls_return WITH KEY type = 'E'.
    IF sy-subrc <> 0.

      "EMP: 11.09.18 si está todo contabilizado, actualizamos status a 02
      SELECT COUNT(*)
        INTO @DATA(l_num)
        FROM ztsdcom_prliqpos
        WHERE laufd = @gs_cab-laufd
          AND laufi = @gs_cab-laufi
          AND bukrs = @gs_cab-bukrs
          AND belnr_liq = ''
          AND gjahr_liq = ''.
      IF l_num = 0.
        UPDATE ztsdcom_prliqcab
        SET zstat_liq = gc_liq_cb
        WHERE laufd = gs_cab-laufd
          AND laufi = gs_cab-laufi
          AND bukrs = gs_cab-bukrs.

        COMMIT WORK AND WAIT.
      ENDIF.
      "FIN EMP: 11.09.18

      "ASC >>> 15.07.2021 Arreglos varios
      "No salimos de la pantalla al contabilizar la liquidación.
****   Inicializamos todo
***      REFRESH: gti_comis, gti_facts, gti_facts_com, gti_log, gti_excbot.
***      CLEAR: gs_cab, gs_com, gv_okcode, gv_dyncab, gv_dyncon, zssdcom_prliqcab,
***             gv_status.
***
****   Volvemos a la pantalla inicial
***      LEAVE TO SCREEN 100.
      "ASC >>> 15.07.2021 Arreglos varios
    ENDIF.
  ELSE.
    MESSAGE s398(00) WITH 'Selecciona alguna fila' DISPLAY LIKE 'E'.
  ENDIF.

ENDFORM.                    " CONTABILIZAR_LIQUIDACION

*&---------------------------------------------------------------------*
*&      Form  CREAR_PROPUESTA_FONDO
*&---------------------------------------------------------------------*
FORM crear_propuesta_fondo.

  DATA: lr_lifnr TYPE zttsdcom_lifnr_range,
        lr_basli TYPE zttsdcom_basli_range,
        lr_kunnr TYPE zttsdcom_kunnr_range.

  data: lr_gsber TYPE ZTTSDCOM_gsber_RANGE.
  data: lr_frec TYPE ZTTSDCOM_frec_RANGE.

  DATA: ls_prliqcab TYPE ztsdcom_prliqcab.
  DATA l_error TYPE flag.

* Cargamos los rangos
  lr_lifnr[] = so_lifnr[].
  lr_basli[] = so_basli[].
  lr_kunnr[] = s_kunnr[].
  lr_gsber[] = so_gsber[].
  lr_frec[]  = so_frec[].
* Estructura de cabecera
  MOVE-CORRESPONDING gs_cab TO ls_prliqcab.

* Llamamos a la función que selecciona y graba la propuesta en fondo
  CALL FUNCTION 'ZSDCOM_SELEC_GRABAR_FACT_PRLIQ' "IN BACKGROUND TASK
    EXPORTING
      is_prliqcab = ls_prliqcab
      ir_lifnr    = lr_lifnr
      ir_basli    = lr_basli
      ir_kunnr    = lr_kunnr
      ir_gsber    = lr_gsber
      i_datum     = p_datum
      ir_frec     = lr_frec
    IMPORTING
      e_error     = l_error.

  IF l_error =  ' '.
    COMMIT WORK.
* Inicializamos todo
    REFRESH: gti_comis, gti_facts, gti_facts_com, gti_log, gti_excbot.
    CLEAR: gs_cab, gs_com, gv_okcode, gv_dyncab, gv_dyncon.

* Cargamos el texto del status en la dynpro 100
    gv_status = text-s02.
* Volvemos a la pantalla inicial
    LEAVE TO SCREEN 100.
  ENDIF.

ENDFORM.                    " CREAR_PROPUESTA_FONDO

*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_STATUS
*&---------------------------------------------------------------------*
FORM actualizar_status.

  DATA: lv_zstat_liq  TYPE zstat_liq.

* Inicializamos
  CLEAR gv_status.

* Chequeamos que han añadido los campos de la propuesta
  CHECK zssdcom_prliqcab-laufd IS NOT INITIAL AND
        zssdcom_prliqcab-laufi IS NOT INITIAL AND
        zssdcom_prliqcab-bukrs IS NOT INITIAL.

* Chequeamos si la propuesta existe
  SELECT SINGLE zstat_liq	INTO lv_zstat_liq
      FROM ztsdcom_prliqcab
      WHERE laufd = zssdcom_prliqcab-laufd
      AND   laufi = zssdcom_prliqcab-laufi
      AND   bukrs = zssdcom_prliqcab-bukrs.
* Si no existe -> Mensaje en el status
  IF sy-subrc <> 0.
    gv_status = text-s01.
    EXIT.
  ENDIF.

* Si existe sacamos el texto de su status
  PERFORM sacar_texto_status  USING    lv_zstat_liq
                              CHANGING gv_status.

ENDFORM.                    " ACTUALIZAR_STATUS

*&---------------------------------------------------------------------*
*&      Form  ENVIAR_PROPUESTA
*&---------------------------------------------------------------------*
FORM enviar_propuesta USING p_email.

  DATA: lti_return  TYPE TABLE OF bapiret2.
  DATA: ls_cabliq   TYPE zssdcom_prliqcab_key.
  DATA: lt_select   TYPE zttsdcom002_sel.
  DATA: ls_select   TYPE zssdcom002_sel.

  DATA: gi_index_rows  TYPE lvc_t_row,
        g_selected_row LIKE lvc_s_row.

  DATA: l_comis TYPE zssdcomliq001_grid.

* Cargamos los datos de cabecera para la impresión
  MOVE-CORRESPONDING gs_cab TO ls_cabliq.


  REFRESH gi_index_rows.
  CLEAR   g_selected_row.

  CALL METHOD g_grid_com->get_selected_rows
    IMPORTING
      et_index_rows = gi_index_rows.

  LOOP AT gi_index_rows INTO g_selected_row.
    READ TABLE gti_comis INTO l_comis INDEX g_selected_row-index.
    ls_select-bukrs = l_comis-bukrs.
    ls_select-lifnr = l_comis-lifnr.
    ls_select-waerk = l_comis-waerk.
    ls_select-gsber = l_comis-gsber.
    APPEND ls_select TO lt_select.
  ENDLOOP.


  IF lt_select[] IS NOT INITIAL.
* Imprimimos la propuesta de modificación
    CALL FUNCTION 'ZSDCOM_ENVIAR_PROP_LIQUID'
      EXPORTING
        is_cabliq = ls_cabliq
        it_selec  = lt_select
        email     = p_email
      IMPORTING
        et_return = lti_return.

* Si hay log, lo sacamos
    IF lti_return[] IS NOT INITIAL.
      CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
        TABLES
          i_bapiret2_tab = lti_return.
    ELSE.
      IF p_email = 'X'.
        MESSAGE s398(00) WITH 'mensaje enviado' .
      ENDIF.
    ENDIF.
  ELSE.
    MESSAGE s398(00) WITH 'Selecciona alguna fila' DISPLAY LIKE 'E'.
  ENDIF.

ENDFORM.
