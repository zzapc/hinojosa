***********************************************************************
* TIPO : LISTADO
* TITULO : EM de recorte desde centros de montaje
* DESCRIPCION : EM de recorte desde centros de montaje
*
* AUTOR: Andrés Picazo                                FECHA: 25/11/2024
* ANALISTA: Francisco Cardona
*
***********************************************************************
REPORT zrsd0047.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: ekko, likp, ekpo, lips.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check       TYPE xfeld,
             ebeln       TYPE ekko-ebeln,
             bsart       TYPE ekko-bsart,
             bedat       TYPE ekko-bedat,
             ebelp       TYPE ekpo-ebelp,
             werks       TYPE ekpo-werks,
             reslo       TYPE ekpo-reslo,
             lgort       TYPE ekpo-lgort,
             matnr       TYPE ekpo-matnr,
             txz01       TYPE ekpo-txz01,
             menge       TYPE ekpo-menge,
             meins       TYPE ekpo-meins,
             elikz       TYPE ekpo-elikz,
             loekz       TYPE ekpo-loekz,
             vbeln_s     TYPE lips-vbeln,
             posnr_s     TYPE lips-posnr,
             lfimg_s     TYPE lips-lfimg,
             vrkme_s     TYPE lips-vrkme,
             charg       TYPE lips-charg,
             ctd_sm      TYPE lips-lfimg,
             vbeln_e     TYPE lips-vbeln,
             ablad       TYPE likp-ablad,
             posnr_e     TYPE lips-posnr,
             lfimg_e     TYPE lips-lfimg,
             vrkme_e     TYPE lips-vrkme,
             ctd_em      TYPE lips-lfimg,
             otras_ent_e TYPE string,
             wenum       TYPE lqua-wenum,
             mjahr       TYPE vbfa-mjahr,
             zeile       TYPE mseg-zeile,
             lgnum       TYPE lqua-lgnum,
             lgtyp       TYPE lqua-lgtyp,
             lgpla       TYPE lqua-lgpla,
             tbnum       TYPE lqua-tbnum,
             tanum       TYPE ltap-tanum,
             verme       TYPE lqua-verme,
             lights      TYPE zico_estado_mensaje,
             message     TYPE bapi_msg,
             color       TYPE lvc_t_scol,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    TYPES: BEGIN OF t_ped,
             ebeln   TYPE ekko-ebeln,
             bsart   TYPE ekko-bsart,
             bedat   TYPE ekko-bedat,
             ebelp   TYPE ekpo-ebelp,
             werks   TYPE ekpo-werks,
             reslo   TYPE ekpo-reslo,
             lgort   TYPE ekpo-lgort,
             matnr   TYPE ekpo-matnr,
             txz01   TYPE ekpo-txz01,
             menge   TYPE ekpo-menge,
             meins   TYPE ekpo-meins,
             elikz   TYPE ekpo-elikz,
             loekz   TYPE ekpo-loekz,
             lfimg_s TYPE lips-lfimg,
             ctd_sm  TYPE lips-lfimg,
             lfimg_e TYPE lips-lfimg,
             ctd_em  TYPE lips-lfimg,
           END OF t_ped.

    DATA: l_ped TYPE t_ped,
          i_ped TYPE TABLE OF t_ped.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv ##NEEDED.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos,

      datos_entrega_entrante
        CHANGING !list TYPE t_listado,

      datos_wm
        CHANGING !list TYPE t_listado,

      validaciones
        IMPORTING final TYPE abap_bool
        CHANGING  !list TYPE t_listado,

      desguace
        CHANGING !list TYPE t_listado.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA o_prog TYPE REF TO zcl_report.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_ebeln FOR ekko-ebeln,
                s_bedat FOR ekko-bedat,
                s_bsart FOR ekko-bsart,
                s_werks FOR ekpo-werks DEFAULT '2000',
                s_reslo FOR ekpo-reslo DEFAULT 'CM*' OPTION CP SIGN I,
                s_lgort FOR ekpo-lgort DEFAULT '1400',
                s_matnr FOR ekpo-matnr,
                s_charg FOR lips-charg,
                s_vbelns FOR lips-vbeln,
                s_vbelne FOR lips-vbeln.
SELECTION-SCREEN SKIP 1.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b01.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    " TODO: variable is assigned but only used in commented-out code (ABAP cleaner)
    DATA l_list TYPE o_prog->t_listado.

    l_list = list.
    CASE column.
*      WHEN 'BUKRS'.
*        MESSAGE l_list-bukrs TYPE 'I'.
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    check_ucomm_sel = 'CREAR_ET,CREAR_EM,DESGUACE,FIN_DESGUACE'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'CREAR_ET'.
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
          IF <listado>-vbeln_s IS INITIAL.
            MESSAGE 'Seleccione sólo líneas con entrega de salida creada' TYPE 'I'.
            RETURN.
          ELSEIF <listado>-lfimg_s IS INITIAL.
            MESSAGE 'Seleccione sólo líneas con entrega de salida con SM efectuada' TYPE 'I'.
            RETURN.
          ELSEIF NOT <listado>-vbeln_e IS INITIAL.
            MESSAGE 'Seleccione sólo líneas sin entrega entrante ya creada' TYPE 'I'.
            RETURN.
          ENDIF.
        ENDLOOP.

        CLEAR o_prog->o_log->i_log.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          o_prog->datos_entrega_entrante( CHANGING list = <listado> ). " Por si se hubiera procesado marcando otra posición
          IF <listado>-vbeln_e IS NOT INITIAL.
            CONTINUE.
          ENDIF.

          o_prog->message( p1 = 'Creando entrega entrante a partir de entrega' p2 = <listado>-vbeln_s type = 'I' postponer = 'X' ).
          DATA(o_ent) = NEW zhcl_entregas_core( <listado>-vbeln_s ).

          o_ent->crear_ee_desde_es( IMPORTING lp_vbeln_ee = <listado>-vbeln_e
                                              tp_return = DATA(i_return) ).
          IF NOT <listado>-vbeln_e IS INITIAL.
            zcl_ap_dev=>commit( ).
            o_prog->message( p1 = 'Se ha creado entrega entrante' p2 = <listado>-vbeln_e type = 'S' postponer = 'X' ).

            ASSIGN o_prog->o_par->i_par[ campo = <listado>-werks ] TO FIELD-SYMBOL(<destino>).
            IF sy-subrc = 0.
              DATA(l_ablad) = condense( |DEV/{ <destino>-valor2 }/{ <destino>-atributo1 }| ).
              IF <listado>-ablad NE l_ablad.
                UPDATE likp
                   SET ablad = l_ablad
                 WHERE vbeln = <listado>-vbeln_e.
                COMMIT WORK AND WAIT.
                <listado>-ablad = l_ablad.
              ENDIF.
            ENDIF.

            i_return = NEW zhcl_entregas_core( <listado>-vbeln_e )->contabilizar( ).
            zcl_ap_dev=>commit( ).
            SELECT SINGLE vbeln FROM vbuk
              INTO <listado>-vbeln_e
             WHERE vbeln = <listado>-vbeln_e
               AND wbstk = 'C'.
            IF sy-subrc = 0.
              o_prog->message( p1 = 'Se ha efectuado EM de entrega' p2 = <listado>-vbeln_e type = 'S' postponer = 'X' ).
            ELSE.
              o_prog->message( p1 = 'Error realizando EM de entrega' p2 = <listado>-vbeln_e type = 'S' postponer = 'X' ).
              o_prog->o_log->append_return2( i_return ).
            ENDIF.

            o_prog->datos_entrega_entrante( CHANGING list = <listado> ).
            o_prog->validaciones( EXPORTING final = 'X' CHANGING list  = <listado> ).

          ELSE.
            o_prog->o_log->append_return2( i_return ).
          ENDIF.
        ENDLOOP.
        IF sy-subrc = 0.
          o_prog->o_log->show_log( ).
          refresh( ).
        ENDIF.
      WHEN 'CREAR_EM'.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          IF <listado>-vbeln_e IS INITIAL.
            MESSAGE 'Seleccione sólo líneas con entrega entrante creada' TYPE 'I'.
            RETURN.
          ELSEIF NOT <listado>-ctd_em IS INITIAL.
            MESSAGE 'Seleccione sólo líneas con entrega de entrante sin EM efectuada' TYPE 'I'.
            RETURN.
          ENDIF.
        ENDLOOP.

        CLEAR o_prog->o_log->i_log.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.

          ASSIGN o_prog->o_par->i_par[ campo = <listado>-werks ] TO <destino>.
          IF sy-subrc <> 0.
            o_prog->message( p1 = 'No se ha encontrado ubicación de desguace para centro' p2 = <listado>-werks type = 'E' postponer = 'X' ).
          ELSE.
            l_ablad = condense( |DEV/{ <destino>-valor2 }/{ <destino>-atributo1 }| ).
            IF <listado>-ablad NE l_ablad.
              UPDATE likp
                 SET ablad = l_ablad
               WHERE vbeln = <listado>-vbeln_e.
              COMMIT WORK AND WAIT.
              <listado>-ablad = l_ablad.
            ENDIF.
            o_prog->datos_entrega_entrante( CHANGING list = <listado> ). " Por si se hubiera procesado marcando otra posición
            IF <listado>-ctd_em IS NOT INITIAL.
              CONTINUE.
            ENDIF.

            i_return = NEW zhcl_entregas_core( <listado>-vbeln_e )->contabilizar( ).
            IF i_return IS INITIAL.
              zcl_ap_dev=>commit( ).
              o_prog->message( p1 = 'Se ha realizado EM de' p2 = <listado>-vbeln_e type = 'S' postponer = 'X' ).

              o_prog->desguace( CHANGING list = <listado> ).
            ELSE.
              o_prog->message( p1 = 'Errores efectuando EM entrega' p2 = <listado>-vbeln_e type = 'I' postponer = 'X' ).
              o_prog->o_log->append_return2( i_return ).
            ENDIF.
            o_prog->datos_entrega_entrante( CHANGING list = <listado> ).
            o_prog->validaciones( EXPORTING final = 'X' CHANGING list  = <listado> ).
          ENDIF.
        ENDLOOP.
        IF sy-subrc = 0.
          o_prog->o_log->show_log( ).
          refresh( ).
        ENDIF.
      WHEN 'DESGUACE'.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X' AND verme NE 0.
          MESSAGE 'Seleccione sólo líneas con stock en WM' TYPE 'I'.
          RETURN.
        ENDLOOP.

        CLEAR o_prog->o_log->i_log.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          o_prog->datos_entrega_entrante( CHANGING list = <listado> ). " Por si se hubiera procesado marcando otra posición
          IF <listado>-lgpla IS INITIAL.
            CONTINUE.
          ENDIF.

          o_prog->desguace( CHANGING list = <listado> ).
        ENDLOOP.
        IF sy-subrc = 0.
          o_prog->o_log->show_log( ).
          refresh( ).
        ENDIF.
      WHEN 'FIN_DESGUACE'.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X' AND lgnum IS INITIAL.
          MESSAGE 'Seleccione sólo líneas con ubicación' TYPE 'I'.
          RETURN.
        ENDLOOP.

        DATA r_lgpla TYPE RANGE OF lgpla.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          IF NOT line_exists( r_lgpla[ low = <listado>-lgpla ] ).
            APPEND VALUE #( option = 'EQ' sign = 'I' low = <listado>-lgpla ) TO r_lgpla.
          ENDIF.
        ENDLOOP.
        IF sy-subrc = 0.
          SUBMIT rlli2110
           AND RETURN
           VIA SELECTION-SCREEN
           WITH s1_lgnum = <listado>-lgnum
           WITH s1_lgtyp = <listado>-lgtyp
           WITH s1_lgpla IN r_lgpla.
          LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
            o_prog->datos_wm( CHANGING list = <listado> ).
          ENDLOOP.


          refresh( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    IF NOT s_vbelne[] IS INITIAL.
      DATA: r_ebeln  TYPE RANGE OF ebeln,
            lr_ebeln LIKE LINE OF r_ebeln.

      lr_ebeln-option = 'EQ'.
      lr_ebeln-sign   = 'I'.
      SELECT DISTINCT ebeln FROM ekes
        INTO TABLE @DATA(i_ebeln)
        UP TO 1000 ROWS
       WHERE vbeln IN @s_vbelne.
      IF lines( i_ebeln ) = 0.
        RETURN.
      ELSEIF lines( i_ebeln ) < 1000.
        LOOP AT i_ebeln ASSIGNING FIELD-SYMBOL(<ebeln>).
          lr_ebeln-low = <ebeln>.
          APPEND lr_ebeln TO r_ebeln.
        ENDLOOP.
      ENDIF.
    ENDIF.

    sgpi_texto( 'Seleccionando datos'(sda) ).
    SELECT ekko~ebeln, ekko~bsart, ekko~bedat,
           ekpo~ebelp, ekpo~werks, ekpo~reslo, ekpo~lgort, ekpo~matnr, ekpo~txz01, ekpo~elikz, ekpo~loekz,
           ekpo~menge, ekpo~meins,
           zpedc_ent~vbeln AS vbeln_s, zpedc_ent~posnr AS posnr_s, lips~lfimg AS lfimg_s, lips~vrkme AS vrkme_s, zpedc_ent~charg
      FROM ekko JOIN ekpo ON ekpo~ebeln = ekko~ebeln
     LEFT OUTER JOIN zpedc_ent ON  zpedc_ent~ebeln  = ekpo~ebeln
                               AND zpedc_ent~ebelp  = ekpo~ebelp
                               AND zpedc_ent~vbtyp  = 'J' " Entrega de salida
                               AND zpedc_ent~lfimg <> 0
     LEFT OUTER JOIN lips ON  lips~vbeln = zpedc_ent~vbeln
                          AND lips~posnr = zpedc_ent~posnr
      INTO CORRESPONDING FIELDS OF TABLE @i_listado
     WHERE ekko~ebeln IN @s_ebeln
       AND ekko~ebeln IN @r_ebeln
       AND ekko~bsart IN @s_bsart
       AND ekko~bedat IN @s_bedat
       AND ekko~bstyp  = 'F' " Pedido
       AND ekpo~pstyp  = '7' " Traslado
       AND ekpo~matnr IN @s_matnr
       AND ekpo~werks IN @s_werks
       AND ekpo~reslo IN @s_reslo
       AND ekpo~lgort IN @s_lgort
       AND lips~charg IN @s_charg
       AND lips~vbeln IN @s_vbelns
     ORDER BY  ekpo~ebeln, ekpo~ebelp.

    sgpi_texto( 'Procesando datos'(pda) ).
    COMMIT WORK AND WAIT.
    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
      DATA(l_new) = ''.
      AT NEW ebelp.
        l_new = 'X'.
      ENDAT.
      IF l_new IS INITIAL.
        CLEAR <listado>-menge.
      ENDIF.

      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

      IF NOT <listado>-vbeln_s IS INITIAL.
        SELECT SUM( menge ) AS menge, shkzg, charg FROM ekbe
          INTO TABLE @DATA(i_ekbe)
         WHERE ebeln    = @<listado>-ebeln
           AND ebelp    = @<listado>-ebelp
           AND vgabe    = '6'
           AND vbeln_st = @<listado>-vbeln_s
           AND vbelp_st = @<listado>-posnr_s
         GROUP BY shkzg, charg.
        LOOP AT i_ekbe ASSIGNING FIELD-SYMBOL(<ekbe>).
          <listado>-charg = <ekbe>-charg.
          IF <ekbe>-shkzg = 'H'.
            <listado>-ctd_sm = <listado>-ctd_sm + <ekbe>-menge.
          ELSE.
            <listado>-ctd_sm = <listado>-ctd_sm - <ekbe>-menge.
          ENDIF.
        ENDLOOP.

        datos_entrega_entrante( CHANGING list = <listado> ).
      ELSEIF <listado>-loekz = 'L'.
        DELETE i_listado.
        CONTINUE.
      ENDIF.

      IF NOT <listado>-vbeln_e IN s_vbelne.
        DELETE i_listado.
        CONTINUE.
      ENDIF.

      validaciones( EXPORTING final = '' CHANGING list  = <listado> ).

      CLEAR l_ped.
      MOVE-CORRESPONDING <listado> TO l_ped.
      COLLECT l_ped INTO i_ped.
    ENDLOOP.

    LOOP AT i_listado ASSIGNING <listado> WHERE lights IS INITIAL.
      validaciones( EXPORTING final = '' CHANGING list  = <listado> ).
    ENDLOOP.

    LOOP AT i_listado ASSIGNING <listado> WHERE lights IS INITIAL.
      validaciones( EXPORTING final = 'X' CHANGING list  = <listado> ).
    ENDLOOP.

    SORT i_listado BY ebeln ebelp vbeln_s posnr_s.
  ENDMETHOD.

  METHOD validaciones.
    DATA l_listado TYPE t_listado.

    CLEAR: list-message, list-color, list-lights.

    IF ( list-menge = list-lfimg_s AND list-menge = list-lfimg_e ) OR final = 'X'.
      IF list-ctd_sm = list-ctd_em.
        IF list-verme IS INITIAL OR list-lgpla = 'DESGUACE'.
          set_status_list( EXPORTING message = list-message icono = icon_okay color = 'V' CHANGING list = list ).
        ELSE.
          set_status_list( EXPORTING message = 'Falta mover a desguace' icono = icon_reject color = 'R' campos_color = 'LGNUM,LGTYP,LGPLA'  CHANGING list = list ).
        ENDIF.
      ELSEIF list-ctd_em IS INITIAL.
        set_status_list( EXPORTING message = 'Falta hacer entrada de mercancías en destino' icono = icon_yellow_light color = 'R' campos_color = 'CTD_EM' CHANGING list = list ).
      ENDIF.
    ELSEIF list-menge = list-lfimg_s.
      IF list-vbeln_e IS INITIAL.
        IF list-ctd_sm IS INITIAL.
          set_status_list( EXPORTING message = 'Falta hacer salida de mercancías' icono = icon_yellow_light color = 'R' campos_color = 'CTD_SM' CHANGING list = list ).
        ELSE.
          set_status_list( EXPORTING message = 'Falta crear entrega entrante' icono = icon_yellow_light color = 'R' campos_color = 'VBELN_E' CHANGING list = list ).
        ENDIF.
      ENDIF.
    ENDIF.

    IF list-lights IS INITIAL.
      ASSIGN i_ped[ ebeln = list-ebeln
                    ebelp = list-ebelp ] TO FIELD-SYMBOL(<ped>).
      IF sy-subrc = 0.
        DATA(l_tabix) = sy-tabix.
        IF <ped>-menge > <ped>-lfimg_s AND <ped>-elikz IS INITIAL AND <ped>-loekz IS INITIAL.
          CLEAR l_listado.
          MOVE-CORRESPONDING <ped> TO l_listado.
          l_listado-lfimg_s = <ped>-menge - <ped>-lfimg_s.
          CLEAR: l_listado-ctd_sm, l_listado-lfimg_e, l_listado-ctd_em.
          set_status_list( EXPORTING message = |Falta crear entregas de salida por { l_listado-lfimg_s }| icono = icon_warning color = 'R' campos_color = 'VBELN_S,LFIMG_S' CHANGING list = l_listado ).
          APPEND l_listado TO i_listado.
        ENDIF.
        DELETE i_ped INDEX l_tabix.
      ENDIF.
    ENDIF.
    IF list-lights IS INITIAL.
      IF list-vbeln_s IS INITIAL.
        CASE list-loekz.
          WHEN ''.
            set_status_list( EXPORTING message = 'Falta crear entrega de salida ' icono = icon_dummy color = 'R' campos_color = 'VBELN_S' CHANGING list = list ).
          WHEN 'L'.
            set_status_list( EXPORTING message = 'Pedido borrado' icono = icon_delete color = 'R' campos_color = 'LOEKZ' CHANGING list = list ).
          WHEN 'S'.
            set_status_list( EXPORTING message = 'Pedido bloqueado' icono = icon_locked color = 'R' campos_color = 'LOEKZ' CHANGING list = list ).
        ENDCASE.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD datos_entrega_entrante.
    SELECT vbeln AS vbeln_e, vbelp AS posnr_e FROM ekes
      INTO TABLE @DATA(i_ekes)
     WHERE ebeln    = @list-ebeln
       AND ebelp    = @list-ebelp
       AND ebtyp    = 'LA' " Entrega entrante
       AND vbeln_st = @list-vbeln_s
       AND vbelp_st = @list-posnr_s
       AND charg    = @list-charg.

    LOOP AT i_ekes ASSIGNING FIELD-SYMBOL(<ekes>).
      IF sy-tabix < lines( i_ekes ).
        __add_lista_no0 list-otras_ent_e <ekes>-vbeln_e.
      ENDIF.

      list-vbeln_e = <ekes>-vbeln_e.
      list-posnr_e = <ekes>-posnr_e.
      SELECT SINGLE lfimg AS lfimg_e vrkme AS vrkme_e FROM lips
        INTO CORRESPONDING FIELDS OF list
       WHERE vbeln = list-vbeln_e
         AND posnr = list-posnr_e.

      SELECT SINGLE ablad FROM likp
        INTO CORRESPONDING FIELDS OF list
       WHERE vbeln = list-vbeln_e.

      SELECT SINGLE wbstk FROM vbuk
        INTO @DATA(l_wbstk)
       WHERE vbeln = @list-vbeln_e.
      IF l_wbstk = 'C'.
        list-ctd_em = list-ctd_em + list-lfimg_e.
        SELECT vbeln posnn mjahr FROM vbfa
          INTO (list-wenum, lips-posnr, list-mjahr)
          UP TO 1 ROWS
         WHERE vbelv   = list-vbeln_e
           AND posnv   = list-posnr_e
           AND vbtyp_n = 'R'
           AND bwart   = '101'.
          list-zeile = lips-posnr+2.
        ENDSELECT.
        IF sy-subrc = 0.
          datos_wm( CHANGING list = list ).
        ENDIF.
      ENDIF.
    ENDLOOP.


  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Crear entrega entrante'  icon = icon_system_copy ucomm = 'CREAR_ET' ).
    o_alv->add_button( button = 'F02' text = 'EM entrega entrante'  icon = icon_transport ucomm = 'CREAR_EM' ).
    o_alv->add_button( button = 'F03' text = 'Mover a desguace'  icon = icon_delete ucomm = 'DESGUACE' ).
    o_alv->add_button( button = 'F04' text = 'Finalizar desguace'  icon = icon_RELEASE ucomm = 'FIN_DESGUACE' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page( ).

    o_alv->set_field_hotspot( campo = 'EBELN,TBNUM,TANUM' auto = 'X' ).
    o_alv->set_field_hotspot( campo = 'VBELN_S,VBELN_E' valor = 'VL03N' ).
    o_alv->set_field_hotspot( campo = 'WENUM' valor = 'MB03' ).

    o_alv->set_field_text( campo = 'VBELN_S' valor = 'EntSal' valor2 = 'Entrega de salida' ).
    o_alv->set_field_text( campo = 'VBELN_E' valor = 'EntEnt' valor2 = 'Entrega entrante' ).
    o_alv->set_field_text( campo = 'CTD_SM' valor = 'CtdSM' valor2 = 'Cantidad salida de mercancía' ).
    o_alv->set_field_text( campo = 'CTD_EM' valor = 'CtdEM' valor2 = 'Cantidad entrada de mercancía' ).
    o_alv->set_field_text( campo = 'OTRAS_ENT_E' valor = 'OtrasET' valor2 = 'Otras entregas entrantes' ).

    o_alv->set_field( campo = 'LFIMG_S,LFIMG_E,CTD_EM,CTD_SM,VERME' op = 'NO_CERO' ).
    o_alv->set_field( campo = 'LIGHTS' op = 'COL_AFTER' valor = 'CHECK' ).

    o_alv->set_field( campo = 'LIGHTS,EBELN,EBELP' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK' ).

    o_alv->set_orden( 'EBELN,EBELP' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.

  METHOD datos_wm.
    IF NOT list-wenum IS INITIAL.
      SELECT SINGLE lgnum lgtyp lgpla tbnum FROM mseg
        INTO CORRESPONDING FIELDS OF list
       WHERE mblnr    = list-wenum
         AND mjahr    = list-mjahr
         AND zeile    = list-zeile.
      IF sy-subrc = 0.
* Verificamos si está en finalmente en desguace
        IF NOT list-lgpla IS INITIAL.
          SELECT SINGLE tanum nltyp AS lgtyp nlpla AS lgpla FROM ltap
            INTO CORRESPONDING FIELDS OF list
           WHERE lgnum = list-lgnum
             AND wenum = list-wenum
             AND vltyp = list-lgtyp
             AND vlpla = list-lgpla.

          SELECT SUM( verme ) AS verme FROM lqua
            INTO CORRESPONDING FIELDS OF list
           WHERE lgnum = list-lgnum
             AND lgtyp = list-lgtyp
             AND lgpla = list-lgpla
             AND matnr = list-matnr.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD desguace.
    DATA: l_tanum TYPE ltap-tanum,
          l_msg   TYPE bapi_msg.

    CHECK list-verme NE 0 AND list-lgpla NE 'DESGUACE'.
    ASSIGN o_prog->o_par->i_par[ campo = list-werks
                                 valor = list-lgnum ] TO FIELD-SYMBOL(<destino>).
    IF sy-subrc <> 0.
      o_prog->message( p1 = 'No se ha encontrado ubicación de desguace para centro' p2 = list-werks p3 = 'nº almacen' p4 = list-lgnum type = 'E' postponer = 'X' ).
    ELSE.
      TRY.
          zcl_ap_ot=>crear_ot_simple(
            EXPORTING
              lgnum               = list-lgnum
              bwlvs               = '998'                 " Cl.movim.gestión almacenes
              matnr               = list-matnr                 " Número de material
              anfme               = list-verme
              werks               = list-werks                 " Centro
              lgort               = list-lgort                 " Almacén
              vltyp               = list-lgtyp                 " Tipo alm.procedencia
              vlpla               = list-lgpla                 " Ubic.proced.
              nltyp               = CONV #( <destino>-valor2 )
              nlpla               = CONV #( <destino>-atributo1 )
            IMPORTING
              tanum               = l_tanum
              message             = l_msg ).
          IF NOT l_tanum IS INITIAL.
            zcl_ap_dev=>commit( ).
            o_prog->message( p1 = 'Se ha creado OT de desguace' p2 = l_tanum type = 'S' postponer = 'X' ).
            o_prog->datos_entrega_entrante( CHANGING list = list ).
            o_prog->validaciones( EXPORTING final = 'X' CHANGING list  = list ).
          ELSE.
            o_prog->message( p1 = 'Errores efectuando desguace' p2 = l_msg type = 'E' postponer = 'X' ).
          ENDIF.
        CATCH cx_root INTO DATA(o_root).
          o_prog->message( p1 = 'Errores efectuando desguace' p2 = o_root->get_text( ) type = 'E' postponer = 'X' ).
      ENDTRY.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = 'X'
                  prog         = 'ZSD0047_PA' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Parámetros' '' ''.
  PERFORM add_button IN PROGRAM zap_status USING 'M02' 'Log'(log) '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         color              = 'COLOR'
                         o_dev              = o_prog ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN OUTPUT.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = 'S_EBELN,S_BEDAT,S_MATNR,S_VBELNS,S_VBELNE' msgty = 'W' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
