*&---------------------------------------------------------------------*
*& Report  ZSWMSD0011
*&
*&---------------------------------------------------------------------*
REPORT zswmsd0011.

***********************
* Tipos de datos
***********************
TABLES: vbak, vbap, vbuk, vbup, vbep.

***********************
* Constantes y variables globales
***********************
CONSTANTS: c_stock_especial_cartera_ped   TYPE mska-sobkz VALUE 'E',
           c_status_tratado_completamente TYPE vbup-gbsta VALUE 'C'.

DATA: tg_alv     TYPE   zwm_t_sd0011.
DATA: rg_alv       TYPE REF TO cl_gui_alv_grid,
      rg_container TYPE REF TO cl_gui_custom_container,
      tg_fieldcat  TYPE lvc_t_fcat,
      wg_layout    TYPE lvc_s_layo,
      wg_variant   LIKE disvariant.

DATA: wg_stable TYPE lvc_s_stbl.

***********************
* Pantalla de selección
***********************
SELECTION-SCREEN: BEGIN OF BLOCK b01 WITH FRAME TITLE text-b01.
SELECT-OPTIONS: s_vkorg FOR vbak-vkorg,
                s_vtweg FOR vbak-vtweg,
                s_spart FOR vbak-spart,
                s_vbeln FOR vbak-vbeln,
                s_augru FOR vbak-augru,
                s_gbstk FOR vbuk-gbstk,
                s_gbsta FOR vbup-gbsta,
                s_abgru FOR vbap-abgru,
                s_auart FOR vbak-auart,
                s_werks FOR vbap-werks,
                s_matnr FOR vbap-matnr,
                s_charg FOR vbap-charg,
                s_lifsp FOR vbep-lifsp.
SELECTION-SCREEN: END OF BLOCK b01.

SELECTION-SCREEN: BEGIN OF BLOCK b02 WITH FRAME TITLE text-b02.
PARAMETERS: p_test TYPE flag DEFAULT 'X'.
SELECTION-SCREEN: END OF BLOCK b02.

***********************
* Eventos
***********************
INITIALIZATION.
  PERFORM f_initialization.

START-OF-SELECTION.
  PERFORM f_obtener_datos.

END-OF-SELECTION.
  IF sy-batch = 'X' OR sy-binpt = 'X'. "AND p_test NE abap_true.
    PERFORM f_contabilizar USING tg_alv.
  ELSE.
    PERFORM f_mostrar_alv.
  ENDIF.


***********************
* Módulos y rutinas
***********************

*&---------------------------------------------------------------------*
*&      MODULE status_0001 OUTPUT
*&---------------------------------------------------------------------*

MODULE status_0001 OUTPUT.
  CASE p_test.
    WHEN abap_true.
      SET PF-STATUS 'ST0001' EXCLUDING 'PROC'.
    WHEN abap_false.
      SET PF-STATUS 'ST0001'.
  ENDCASE.
  SET TITLEBAR 'T0001'.

  PERFORM f_pbo_0001.
ENDMODULE.


*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0001  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0001 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN 'PROC'.
      PERFORM f_user_command_procesar.
  ENDCASE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Form  f_INITIALIZATION
*&---------------------------------------------------------------------*
FORM f_initialization .
  wg_variant-report = sy-repid.
  wg_variant-handle = '0001'.

  wg_layout-zebra      = 'X'.
  wg_layout-sel_mode   = 'D'.
  wg_layout-cwidth_opt = 'X'.

  wg_stable-row = wg_stable-col = 'X'.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
FORM f_obtener_datos .
  CLEAR tg_alv.

  SELECT mska~matnr, mska~werks, vbap~vbeln, vbap~posnr, vbuk~gbstk, vbap~abgru, vbap~kwmeng,
         vbup~gbsta, mska~kalab, vbap~vrkme, mska~charg, mska~lgort, vbep~lifsp
    INTO TABLE @DATA(tl_vbap)
    FROM vbap INNER JOIN mska ON mska~vbeln = vbap~vbeln AND
                                 mska~posnr = vbap~posnr
              INNER JOIN vbak ON vbak~vbeln = vbap~vbeln
              INNER JOIN vbuk ON vbuk~vbeln = vbap~vbeln
              INNER JOIN vbup ON vbup~vbeln = vbap~vbeln AND
                                 vbup~posnr = vbap~posnr
              INNER JOIN vbep ON vbep~vbeln = vbap~vbeln AND
                                 vbep~posnr = vbap~posnr
    WHERE mska~werks IN @s_werks
      AND mska~sobkz = @c_stock_especial_cartera_ped " solo pedidos de MTO
      AND vbak~vkorg IN @s_vkorg
      AND vbak~vtweg IN @s_vtweg
      AND vbap~abgru IN @s_abgru
      AND vbak~spart IN @s_spart
      AND vbak~auart IN @s_auart
      AND vbak~vbeln IN @s_vbeln
      AND vbap~matnr IN @s_matnr
      AND vbap~charg IN @s_charg
      AND vbup~gbsta IN @s_gbsta
      AND vbuk~gbstk IN @s_gbstk
      AND vbep~lifsp IN @s_lifsp
      AND ( vbup~gbsta = @c_status_tratado_completamente OR vbep~lifsp = 'ZS' )
      AND mska~kalab > 0. "stock libre asignado al pedidos es <> 0

  IF tl_vbap IS NOT INITIAL.
    SELECT matnr, maktx
      INTO TABLE @DATA(tl_makt)
      FROM makt
      FOR ALL ENTRIES IN @tl_vbap
      WHERE matnr = @tl_vbap-matnr AND
            spras = @sy-langu.

    SELECT werks, lgort, lgnum
      INTO TABLE @DATA(tl_t320)
      FROM t320
      FOR ALL ENTRIES IN @tl_vbap
      WHERE werks = @tl_vbap-werks AND
            lgort = @tl_vbap-lgort.

    SELECT abgru, bezei
      INTO TABLE @DATA(tl_tvagt)
      FROM tvagt
      FOR ALL ENTRIES IN @tl_vbap
      WHERE abgru = @tl_vbap-abgru AND
            spras = @sy-langu.

    SELECT lifsp, vtext
      INTO TABLE @DATA(tl_tvlst)
      FROM tvlst
      FOR ALL ENTRIES IN @tl_vbap
      WHERE lifsp = @tl_vbap-lifsp AND
            spras = @sy-langu.
  ENDIF.

  DATA wl_alv LIKE LINE OF tg_alv.
  LOOP AT tl_vbap ASSIGNING FIELD-SYMBOL(<fs_vbap>).
    CLEAR wl_alv.
    wl_alv = CORRESPONDING #( <fs_vbap> ).


    READ TABLE tl_makt ASSIGNING FIELD-SYMBOL(<fs_makt>) WITH KEY matnr = wl_alv-matnr.
    IF sy-subrc = 0.
      wl_alv-maktx = <fs_makt>-maktx.
    ENDIF.
    READ TABLE tl_t320 ASSIGNING FIELD-SYMBOL(<fs_t320>) WITH KEY werks = wl_alv-werks
                                                                  lgort = wl_alv-lgort.
    IF sy-subrc = 0.
      wl_alv-lgnum = <fs_t320>-lgnum.
    ENDIF.
    READ TABLE tl_tvlst ASSIGNING FIELD-SYMBOL(<fs_tvlst>) WITH KEY lifsp = wl_alv-lifsp.
    IF sy-subrc = 0.
      wl_alv-vtext = <fs_tvlst>-vtext.
    ENDIF.

    wl_alv-sonum+0(10) = wl_alv-vbeln.
    wl_alv-sonum+10(6) = wl_alv-posnr.

    APPEND wl_alv TO tg_alv.
  ENDLOOP.

  IF tg_alv IS NOT INITIAL.
    SELECT *
      INTO TABLE @DATA(tl_lqua)
      FROM lqua
      FOR ALL ENTRIES IN @tg_alv
      WHERE lgnum = @tg_alv-lgnum AND
            matnr = @tg_alv-matnr AND
            charg = @tg_alv-charg AND
            werks = @tg_alv-werks AND
            lgort = @tg_alv-lgort AND
            bestq = @space        AND
            sonum = @tg_alv-sonum AND
            verme > 0             AND
            sobkz = @c_stock_especial_cartera_ped   AND
*            lgtyp IN ( '200', '201', '120', '230' ).
            lgtyp NOT LIKE '9%'.
  ENDIF.

  LOOP AT tg_alv ASSIGNING FIELD-SYMBOL(<fs_alv>).
    LOOP AT tl_lqua ASSIGNING FIELD-SYMBOL(<fs_lqua>) WHERE lgnum = <fs_alv>-lgnum AND
                                                            matnr = <fs_alv>-matnr AND
                                                            charg = <fs_alv>-charg AND
                                                            werks = <fs_alv>-werks AND
                                                            lgort = <fs_alv>-lgort AND
                                                            sonum = <fs_alv>-sonum.
      APPEND INITIAL LINE TO <fs_alv>-tt_lenum ASSIGNING FIELD-SYMBOL(<fs_lenum>).
      <fs_lenum>-lenum = <fs_lqua>-lenum.

      ADD <fs_lqua>-verme TO <fs_alv>-ctdwm.
    ENDLOOP.
    <fs_alv>-n_mat = lines( <fs_alv>-tt_lenum ).
    IF <fs_alv>-n_mat > 0.
      <fs_alv>-procesable = 'X'.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PROCESAR
*&---------------------------------------------------------------------*
FORM f_contabilizar USING tp_alv TYPE zwm_t_sd0011.

  DATA wl_zssdd005_str TYPE zssdd005_str.
  DATA: tl_log_aux TYPE bapiret2_t,
        tl_log     TYPE bapiret2_t.

  LOOP AT tp_alv ASSIGNING FIELD-SYMBOL(<fs_alv>) WHERE procesable = 'X'.
    CHECK <fs_alv>-tt_lenum IS NOT INITIAL.
    CLEAR tl_log_aux.
    wl_zssdd005_str-vgbel = <fs_alv>-vbeln.
    wl_zssdd005_str-vgpos = <fs_alv>-posnr.
    wl_zssdd005_str-gbstk = <fs_alv>-gbstk.
    wl_zssdd005_str-gbsta = <fs_alv>-gbsta.
    wl_zssdd005_str-abgru = <fs_alv>-abgru.
    CALL FUNCTION 'ZSWM_CHANGE_SONUM_LENUM'
      EXPORTING
        tt_lenum  = <fs_alv>-tt_lenum
        reg_traza = wl_zssdd005_str
        testrun   = p_test
      IMPORTING
        tt_log    = tl_log_aux.
    APPEND LINES OF tl_log_aux TO tl_log.


    IF tl_log_aux IS NOT INITIAL.
      DATA(vl_extnumber) =  CONV balnrext( <fs_alv>-vbeln && <fs_alv>-posnr && <fs_alv>-matnr && <fs_alv>-charg ).
      CALL FUNCTION 'ZMFFI_GUARDAR_LOG'
        EXPORTING
          objeto    = 'ZSWMSD0011'
          subobjeto = 'ZSWMSD0011'
          mensajes  = tl_log_aux
          extnumber = vl_extnumber.
    ENDIF.
  ENDLOOP.

  PERFORM f_mostrar_log USING tl_log.

  IF tl_log IS INITIAL.
    MESSAGE 'Proceso terminado correctamente' TYPE 'S'.
  ELSE.
    MESSAGE 'Proceso terminado. Revise log ZSWMSD0011' TYPE 'W'.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_ALV
*&---------------------------------------------------------------------*
FORM f_mostrar_alv .
  CALL SCREEN 0001.
ENDFORM.

*&--------------------------------------------------------------------
*&      Form  load_data_into_grid
*&--------------------------------------------------------------------
FORM f_pbo_0001.
  DATA tl_fieldcat TYPE lvc_t_fcat.

  IF rg_alv IS INITIAL AND cl_gui_alv_grid=>offline( ) IS INITIAL.
    rg_container = NEW cl_gui_custom_container( container_name = 'ALV'  ).
    rg_alv       = NEW cl_gui_alv_grid( i_parent = rg_container ).
    PERFORM f_fieldcatalog CHANGING tl_fieldcat.

    rg_alv->set_table_for_first_display(
      EXPORTING
        is_variant           = wg_variant
        i_save               = 'A'
        is_layout            = wg_layout
      CHANGING
        it_outtab            = tg_alv
        it_fieldcatalog      = tl_fieldcat
      EXCEPTIONS
        OTHERS               = 1 ).
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ELSE.
    CALL METHOD rg_alv->refresh_table_display
      EXPORTING
        is_stable = wg_stable.
  ENDIF.

ENDFORM.                    "load_data_into_grid

*&--------------------------------------------------------------------
*&      Form  preparefieldcatalog
*&--------------------------------------------------------------------
FORM f_fieldcatalog CHANGING tp_fieldcat TYPE lvc_t_fcat.

  REFRESH tp_fieldcat.
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active        = 'X'
      i_structure_name       = 'ZWM_S_SD0011'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = tp_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.
  LOOP AT tp_fieldcat ASSIGNING FIELD-SYMBOL(<fs_fieldcat>).
    CASE <fs_fieldcat>-fieldname.
      WHEN 'PROCESABLE'.
        <fs_fieldcat>-checkbox = 'X'.
      WHEN 'SONUM'.
        <fs_fieldcat>-tech = 'X'.

    ENDCASE.
  ENDLOOP.
ENDFORM.                    "preparefieldcatalog


*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
FORM f_mostrar_log USING tp_log TYPE bapiret2_t.
  CHECK sy-binpt IS INITIAL AND sy-batch IS INITIAL AND tp_log IS NOT INITIAL.

  DATA: l_log_handle TYPE balloghndl,
        mylog_handle TYPE bal_t_logh,
        l_s_log      TYPE bal_s_log,
        l_s_msg      TYPE bal_s_msg,
        l_msgno      TYPE symsgno.

  "Creamos el log de incidencias
  l_s_log-extnumber  = 'Application Log Demo'(001).
  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log      = l_s_log
    IMPORTING
      e_log_handle = l_log_handle
    EXCEPTIONS
      OTHERS       = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  LOOP AT tp_log INTO DATA(mensajes).
    l_s_msg-msgid = mensajes-id.
    l_s_msg-msgno = mensajes-number.
    l_s_msg-msgty = mensajes-type.
    l_s_msg-msgv1 = mensajes-message_v1.
    l_s_msg-msgv2 = mensajes-message_v2.
    l_s_msg-msgv3 = mensajes-message_v3.
    l_s_msg-msgv4 = mensajes-message_v4.
    l_s_msg-probclass = '3'.

    "Añadimos la incidencia al log
    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle = l_log_handle
        i_s_msg      = l_s_msg
      EXCEPTIONS
        OTHERS       = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDLOOP.

  "Creamos el popup con el log de incidencias
  DATA l_s_display_profile TYPE bal_s_prof.

  CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
    IMPORTING
      e_s_display_profile = l_s_display_profile
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  l_s_display_profile-use_grid = 'X'.
  l_s_display_profile-disvariant-report = sy-repid.

  "Mostramos el log de incidencias
  APPEND l_log_handle TO mylog_handle.
  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile = l_s_display_profile
      i_t_log_handle      = mylog_handle
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  "Refrescamos el log de incidencias
  CALL FUNCTION 'BAL_LOG_REFRESH'
    EXPORTING
      i_log_handle  = l_log_handle
    EXCEPTIONS
      log_not_found = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_USER_COMMAND_PROCESAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_user_command_procesar .
  DATA tl_alv_sel LIKE tg_alv.

  rg_alv->get_selected_rows( IMPORTING et_index_rows = DATA(tl_rows) ).
  LOOP AT tl_rows ASSIGNING FIELD-SYMBOL(<fs_rows>).
    READ TABLE tg_alv ASSIGNING FIELD-SYMBOL(<fs_alv>) INDEX <fs_rows>-index.
    IF sy-subrc = 0.
      APPEND <fs_alv> TO tl_alv_sel.
    ENDIF.
  ENDLOOP.

  IF tl_alv_sel IS INITIAL.
    MESSAGE 'No se han seleccionado datos' TYPE 'I'. RETURN.
  ENDIF.

  PERFORM f_contabilizar USING tl_alv_sel.
  PERFORM f_obtener_datos.
  rg_alv->refresh_table_display(  EXPORTING is_stable      = wg_stable
                                  EXCEPTIONS finished       = 1
                                             OTHERS         = 2 ).
ENDFORM.
