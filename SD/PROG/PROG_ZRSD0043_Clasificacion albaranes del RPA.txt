***********************************************************************
* TIPO : LISTADO
* TITULO : Clasificacion albaranes del RPA
* DESCRIPCION : Clasificacion albaranes del RPA
*
* AUTOR: Andrés Picazo                                FECHA: 25/09/2024
* ANALISTA: Alfredo García
*
***********************************************************************
REPORT zrsd0043.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: likp, vttk, lips, toa01.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.


CLASS lcl_event_grid_f DEFINITION INHERITING FROM zcl_ap_alv_grid_eventos FINAL.
  PUBLIC SECTION.
    METHODS: visualizar_objeto REDEFINITION,
      toolbar           REDEFINITION,
      user_command      REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check      TYPE xfeld,
             lights     TYPE zico_estado_mensaje,
             wadat_ist  TYPE likp-wadat_ist,
             vbeln      TYPE likp-vbeln,
             kunag      TYPE likp-kunag,
             kunag_t    TYPE name_ag,
             route      TYPE likp-route,
             tknum      TYPE vttk-tknum,
             tdlnr      TYPE vttk-tdlnr,
             tdlnr_t    TYPE tdlnr_txt,
             lgort      TYPE lips-lgort,
             archiv_id  TYPE toa01-archiv_id,
             arc_doc_id TYPE toa01-arc_doc_id,
             reserve    TYPE toa01-reserve,
             ar_object  TYPE toa01-ar_object,
             objecttext TYPE toasp-objecttext,
             descr      TYPE toaat-descr,
             filename   TYPE toaat-filename,
             message    TYPE bapi_msg,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado,
           BEGIN OF t_ficheros_alv,
             check      TYPE xfeld,
             filename   TYPE file_info-filename,
             filelength TYPE file_info-filelength,
             createdate TYPE erdat,
             createtime TYPE erzet,
             xstring    TYPE xstring,
           END OF t_ficheros_alv.

    DATA: i_listado      TYPE tt_listado,
          o_alv          TYPE REF TO lcl_alv,
          o_ftp          TYPE REF TO zcl_ap_ftp,
          i_ficheros_alv TYPE TABLE OF t_ficheros_alv,
          fichero_sel    TYPE t_ficheros_alv,
          o_grid_f       TYPE REF TO zcl_ap_alv_grid,
          o_event_f      TYPE REF TO lcl_event_grid_f,
          o_html         TYPE REF TO zcl_ap_html,
          refrescar      TYPE abap_bool.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos,
      proceso_erroneos,
      subir_adjuntos,

      mover_fichero IMPORTING fich      TYPE t_ficheros_alv
                    RETURNING VALUE(ok) TYPE abap_bool.

  PRIVATE SECTION.
    DATA: directorio_ftp      TYPE zparametros-atributo4,
          directorio_ftp_proc TYPE zparametros-atributo5.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA o_prog TYPE REF TO zcl_report.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
PARAMETERS p_vkorg TYPE likp-vkorg OBLIGATORY.
SELECT-OPTIONS: s_wadat FOR likp-wadat_ist,
                s_kunag FOR likp-kunag,
                s_vbeln FOR likp-vbeln,
                s_lgort FOR lips-lgort,
                s_tdlnr FOR vttk-tdlnr,
                s_tknum FOR vttk-tknum,
                s_arobj FOR toa01-ar_object DEFAULT 'ZDSD011' TO 'ZDSD012',
                s_ctalb FOR lips-uebtk.
SELECTION-SCREEN SKIP 1.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b01.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************


CLASS lcl_event_grid_f IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA l_list TYPE o_prog->t_ficheros_alv.
    DATA: l_len       TYPE i,
          itab        TYPE solix_tab,
          l_extension TYPE char10,
          l_urlc      TYPE text255.

    l_list = list.
    CASE column.
      WHEN OTHERS.
        IF l_list-xstring IS INITIAL.
          o_prog->o_ftp->leer_fichero( EXPORTING fichero = l_list-filename
                                                 no_desconectar = ''
                                       IMPORTING message = DATA(l_msg)
                                                 xstring = DATA(xstring) ).
          ASSIGN o_prog->i_ficheros_alv[ filename = l_list-filename ] TO FIELD-SYMBOL(<fich>).
          IF sy-subrc = 0.
            <fich>-xstring = xstring.
          ENDIF.
        ELSE.
          xstring = l_list-xstring.
        ENDIF.
        IF NOT l_msg IS INITIAL.
          MESSAGE l_msg TYPE 'I'.
        ELSE.
          o_prog->fichero_sel = l_list.

          CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
            EXPORTING
              buffer        = xstring
            IMPORTING
              output_length = l_len
            TABLES
              binary_tab    = itab.

          l_extension = to_lower( zcl_ap_ficheros=>get_extension( l_list-filename ) ).

          o_prog->o_html->o_html->load_data( EXPORTING  type                 = 'application'
                                                subtype              = l_extension
                                                size                 = l_len
                                     IMPORTING  assigned_url         = l_urlc
                                     CHANGING   data_table           = itab
                                     EXCEPTIONS dp_invalid_parameter = 1
                                                dp_error_general     = 2
                                                cntl_error           = 3
                                                OTHERS               = 4 ).
          IF sy-subrc = 0.
            o_prog->o_html->show( url = l_urlc ).
          ENDIF.
        ENDIF.

    ENDCASE.
  ENDMETHOD.

  METHOD toolbar.
    super->toolbar( e_object = e_object e_interactive = e_interactive ).

    add_boton( function = 'TRATADO' icon = icon_checked text = 'Marcar como tratado' e_object = e_object ).
  ENDMETHOD.

  METHOD user_command.
    CASE e_ucomm.
      WHEN 'TRATADO'.
        o_prog->o_grid_f->comprobar_cambios( ).
        o_prog->o_grid_f->set_marca_filas_sel( CHANGING t_tabla = o_prog->i_ficheros_alv ).

        CLEAR o_prog->cont.
        LOOP AT o_prog->i_ficheros_alv ASSIGNING FIELD-SYMBOL(<fich>) WHERE check = 'X'.
          IF o_prog->mover_fichero( fich = <fich> ).
            DELETE o_prog->i_ficheros_alv.
            o_prog->cont = o_prog->cont + 1.
          ENDIF.
        ENDLOOP.
        IF sy-subrc = 0.
          IF o_prog->cont > 0.
            MESSAGE |Se han marcado como procesados { o_prog->cont } ficheros| TYPE 'S'.
            o_prog->o_grid_f->refrescar_grid( ).
          ENDIF.
        ELSE.
          MESSAGE 'Seleccione algún fichero' TYPE 'I'.
        ENDIF.
      WHEN OTHERS.
        super->user_command( e_ucomm = e_ucomm ).
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA l_list TYPE o_prog->t_listado.

    l_list = list.
    CASE column.
      WHEN 'FILENAME' OR 'DESCR' OR 'OBJECTEXT'.
        IF NOT l_list-arc_doc_id IS INITIAL.
          zcl_ap_gos=>visualizar_fichero_st( fichero = l_list-arc_doc_id
                                             archiv_id = l_list-archiv_id ).
        ENDIF.
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    DATA l_dir TYPE string.

    check_ucomm_sel = 'DESCARGAR'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'DESCARGAR'.
        CLEAR o_prog->cont.
        zcl_ap_ficheros=>popup_select_directorio( CHANGING directorio = l_dir ).
        IF NOT l_dir IS INITIAL.
          CLEAR o_prog->o_log->i_log.
          LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X' AND NOT arc_doc_id IS INITIAL.
            zcl_ap_gos=>get_archivelink_xstring( EXPORTING archiv_id = <listado>-archiv_id
                            arc_doc_id  = <listado>-arc_doc_id
                  IMPORTING contenido  = DATA(l_xstring)
                            " TODO: variable is assigned but never used (ABAP cleaner)
                            longitud   = DATA(l_long)
                            message   = DATA(l_msg) ).

            IF NOT l_msg IS INITIAL.
              o_prog->message( p1 = |Error { l_msg } generando albarán de entrega { <listado>-vbeln ALPHA = OUT }| type = 'E' postponer = 'X' ).
            ELSE.
              DATA(l_fichero) = zcl_ap_ficheros=>concat_ruta( directorio = l_dir
                                                        fichero = <listado>-filename ).
              zcl_ap_ficheros=>grabar_xstring( EXPORTING fichero = l_fichero xstring = l_xstring mostrar_error = ''
                                               IMPORTING mensaje = l_msg ).
              IF NOT l_msg IS INITIAL.
                o_prog->message( p1 = |Error { l_msg } grabando fichero { l_fichero }| type = 'E' postponer = 'X' ).
              ELSE.
                o_prog->cont = o_prog->cont + 1.
              ENDIF.
            ENDIF.
          ENDLOOP.
          IF sy-subrc = 0.
            o_prog->o_log->show_log( ).
            refresh( ).
            IF o_prog->cont > 0.
              MESSAGE |Se han descargado { o_prog->cont } ficheros| TYPE 'S'.
            ENDIF.
          ENDIF.
        ENDIF.

      WHEN 'ERRONEOS'.
        CLEAR likp.
        get_seleccion( CHANGING t_tabla = o_prog->i_listado ).
        ASSIGN o_prog->i_listado[ check = 'X' ] TO <listado>.
        IF sy-subrc = 0.
          likp-vbeln = <listado>-vbeln.
        ENDIF.
        o_prog->proceso_erroneos( ).
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    DATA r_arc_doc_id TYPE RANGE OF toa01-arc_doc_id.

    sgpi_texto( 'Seleccionando datos'(sda) ).
    CLEAR i_listado.

    IF NOT s_ctalb[] IS INITIAL.
      IF line_exists( s_ctalb[ option = 'EQ' sign = 'I' low = 'X' ] ).
        r_arc_doc_id = VALUE #( ( option = 'EQ' sign = 'E' low = '' ) ).
      ENDIF.
    ENDIF.

    SELECT likp~vbeln, likp~wadat_ist, likp~kunag, likp~route,
           lips~lgort,
           vttk~tknum, vttk~tdlnr,
           toa01~archiv_id, toa01~arc_doc_id, toa01~ar_object, toa01~reserve,
           toaat~descr, toaat~filename,
           toasp~objecttext,
           kna1~name1 AS kunag_t,
           lfa1~name1 AS tdlnr_t
             FROM likp JOIN vbuk ON vbuk~vbeln = likp~vbeln
                       JOIN lips ON lips~vbeln = likp~vbeln
                       JOIN kna1 ON kna1~kunnr = likp~kunag
            LEFT OUTER JOIN vttp ON vttp~vbeln = likp~vbeln
            LEFT OUTER JOIN vttk ON vttk~tknum = vttp~tknum
            LEFT OUTER JOIN lfa1 ON lfa1~lifnr = vttk~tdlnr
            LEFT OUTER JOIN toa01 ON  toa01~object_id  = likp~vbeln
                                  AND toa01~sap_object = 'LIKP'
            LEFT OUTER JOIN toaat ON toaat~arc_doc_id = toa01~arc_doc_id
            LEFT OUTER JOIN toasp ON  toasp~ar_object = toa01~ar_object "#EC CI_BUFFJOIN.
                                  AND toasp~language  = 'S'
      INTO CORRESPONDING FIELDS OF TABLE @i_listado
     WHERE vkorg             = @p_vkorg
       AND wadat_ist        IN @s_wadat
       AND wbstk             = 'C'
       AND kunag            IN @s_kunag
       AND likp~vbeln       IN @s_vbeln
       AND vttp~tknum       IN @s_tknum
       AND tdlnr            IN @s_tdlnr
       AND lgort            IN @s_lgort
       AND toa01~arc_doc_id IN @r_arc_doc_id
       AND pstyv            <> 'ZHUP' " Hay posiciones de embalajes en almacenes que no interesan
      GROUP BY likp~vbeln, likp~wadat_ist, likp~kunag, likp~route,
           lips~lgort,
           vttk~tknum, vttk~tdlnr,
           toa01~archiv_id, toa01~arc_doc_id, toa01~ar_object, toa01~reserve,
           toaat~descr, toaat~filename,
           toasp~objecttext,
           kna1~name1,
           lfa1~name1.

    DELETE i_listado WHERE ar_object <> '' AND NOT ar_object IN s_arobj.

    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

      IF <listado>-arc_doc_id IS INITIAL.
        <listado>-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = 'Falta adjuntar albarán' ).
      ELSE.
        IF NOT <listado>-reserve IS INITIAL.
          DATA(l_extension) = to_upper( zcl_ap_ficheros=>get_extension( <listado>-filename ) ).
          IF l_extension <> <listado>-reserve.
            <listado>-filename = |{ <listado>-filename }.{ <listado>-reserve }|.
          ENDIF.
        ENDIF.
        <listado>-lights = zcl_ap_alv=>set_icono( icono = icon_okay mensaje = 'Existe adjunto' ).
      ENDIF.
    ENDLOOP.

    SORT i_listado BY wadat_ist vbeln.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Descargar adjuntos'  icon = icon_system_save ucomm = 'DESCARGAR' ).
    o_alv->add_button( button = 'F02' text = 'Ver erróneos'  icon = icon_message_critical ucomm = 'ERRONEOS' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page( ).

    o_alv->set_field_hotspot( campo = 'VBELN,TKNUM,FILENAME' auto = 'X' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK,MESSAGE' ).
    o_alv->set_field_text( campo = 'DESCR' valor = 'Descripción fichero' ).
    o_alv->set_field_text( campo = 'FILENAME' valor = 'Fichero' ).
    o_alv->set_field_noout( 'ARCHIV_ID,ARC_DOC_ID,AR_OBJECT,RESERVE' ).

    o_alv->set_orden( 'WADAT_IST,VBELN' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.

  METHOD proceso_erroneos.
    zcl_ap_ftp=>matar_sesiones_rfc( ).
    CLEAR i_ficheros_alv.
    ASSIGN o_par->i_par[ campo = p_vkorg ] TO FIELD-SYMBOL(<par>).
    IF sy-subrc <> 0.
      MESSAGE |Defina parámetros FTP para organización de ventas { p_vkorg }| TYPE 'I'.
      RETURN.
    ELSE.
      IF NOT o_ftp IS INITIAL.
        o_ftp->disconnect( ).
        CLEAR o_ftp.
      ENDIF.
      o_ftp = NEW #( host = <par>-atributo1
                     user = <par>-atributo2
                     password = <par>-atributo3 ).
      IF o_ftp->error_conexion = 'X'.
        MESSAGE 'Error de conexión a FTP' TYPE 'I'.
        RETURN.
      ELSE.
        directorio_ftp = <par>-atributo4.
        IF directorio_ftp IS INITIAL.
          MESSAGE |Defina directorio de proceso para organización de ventas { p_vkorg }| TYPE 'I'.
          RETURN.
        ENDIF.
        directorio_ftp_proc = <par>-atributo5.
        IF directorio_ftp_proc IS INITIAL.
          MESSAGE |Defina directorio para archivar ficheros en organización de ventas { p_vkorg }| TYPE 'I'.
          RETURN.
        ENDIF.
        o_ftp->lista_ficheros( EXPORTING directorio = directorio_ftp
                                         no_desconectar = ''
                               IMPORTING message = DATA(l_msg)
                                         i_ficheros = DATA(i_ficheros) ).
        DELETE i_ficheros WHERE isdir = 1.
        IF NOT l_msg IS INITIAL.
          MESSAGE l_msg TYPE 'I'.
        ELSEIF i_ficheros IS INITIAL.
          MESSAGE |No hay ficheros en el directorio { directorio_ftp }| TYPE 'I'.
        ELSE.
          MOVE-CORRESPONDING i_ficheros TO i_ficheros_alv.
          IF NOT o_grid_f IS INITIAL.
            o_grid_f->free( ).
            CLEAR o_grid_f.
          ENDIF.
          CALL SCREEN 0200.
          IF NOT o_ftp IS INITIAL.
            o_ftp->disconnect( ).
            o_ftp->matar_sesiones_rfc( ).
            CLEAR o_ftp.
          ENDIF.
          IF refrescar = 'X'.
            seleccionar_datos( ).
            o_alv->refresh( ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD subir_adjuntos.
    DATA: l_clase      TYPE toaom-ar_object,
          l_arc_doc_id TYPE toav0-arc_doc_id,
          l_ok         TYPE int4.

    CLEAR refrescar.
    LOOP AT i_ficheros_alv ASSIGNING FIELD-SYMBOL(<alv>) WHERE check = 'X'.
      CLEAR l_clase.
      DATA(l_extension) = to_upper( zcl_ap_ficheros=>get_extension( <alv>-filename ) ).
      CASE l_extension.
        WHEN 'TIF'.
          l_clase = 'ZDSD011'.
        WHEN 'PDF'.
          l_clase = 'ZDSD012'.
        WHEN OTHERS.
          MESSAGE |Extensión { l_extension } no contemplada| TYPE 'I'.
      ENDCASE.

      IF <alv>-xstring IS INITIAL.
        o_ftp->leer_fichero( EXPORTING fichero = <alv>-filename
                                               no_desconectar = ''
                                     IMPORTING message = DATA(l_msg)
                                               xstring = DATA(xstring) ).
        <alv>-xstring = xstring.
      ELSE.
        xstring = <alv>-xstring.
      ENDIF.
      IF NOT l_msg IS INITIAL.
        MESSAGE l_msg TYPE 'I'.
      ELSE.
        SELECT archiv_id
          FROM toaom
          WHERE sap_object = 'LIKP'
            AND ar_object = @l_clase
          ORDER BY PRIMARY KEY
          INTO @DATA(l_archiv_id)
          UP TO 1 ROWS.
        ENDSELECT.

        zcl_ap_gos=>insertar_ata_gos_st(
         EXPORTING
             tipo      = 'LIKP'
             clave     = likp-vbeln
             titulo    = zcl_ap_ficheros=>get_nombre_fichero( <alv>-filename )
             fichero   = <alv>-filename
             xstring   = xstring
             ar_object = l_clase
             archiv_id = l_archiv_id
             extension = l_extension
         IMPORTING
           arc_doc_id = l_arc_doc_id ).
        IF l_arc_doc_id IS INITIAL.
          MESSAGE |Error adjuntando fichero { <alv>-filename }| TYPE 'E'.
        ELSE.
          l_ok = l_ok + 1.
          mover_fichero( fich = <alv> ).
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF l_ok = 1.
      MESSAGE |Se ha adjuntado el fichero| TYPE 'I'.
      refrescar = 'X'.
    ELSEIF l_ok > 1.
      MESSAGE |Se han adjuntado { l_ok } ficheros| TYPE 'I'.
      refrescar = 'X'.
    ENDIF.
  ENDMETHOD.

  METHOD mover_fichero.
    CLEAR ok.

    IF fich-xstring IS INITIAL.
      o_ftp->leer_fichero( EXPORTING fichero = fich-filename
                                     no_desconectar = ''
                           IMPORTING message = DATA(l_msg)
                                     xstring = DATA(xstring) ).
      ASSIGN o_prog->i_ficheros_alv[ filename = fich-filename ] TO FIELD-SYMBOL(<fich>).
      IF sy-subrc = 0.
        <fich>-xstring = xstring.
      ENDIF.
    ELSE.
      xstring = fich-xstring.
    ENDIF.
    IF NOT l_msg IS INITIAL.
      o_ftp->disconnect( ).
      MESSAGE l_msg TYPE 'I'.
      RETURN.
    ENDIF.

    IF NOT o_ftp->cd( directorio_ftp_proc ).
      MESSAGE o_ftp->mensaje_error TYPE 'I'.
      RETURN.
    ENDIF.

    o_ftp->grabar_fichero( EXPORTING fichero = fich-filename
                                     no_desconectar = ''
                                     xstring = xstring
                           IMPORTING message = l_msg ).
    IF l_msg IS INITIAL.
      IF NOT o_ftp->cd( directorio_ftp ).
        MESSAGE o_ftp->mensaje_error TYPE 'I'.
        o_ftp->disconnect( ).
        RETURN.
      ENDIF.
      IF NOT o_ftp->delete( fichero = fich-filename ).
        MESSAGE o_ftp->mensaje_error TYPE 'I'.
      ELSE.
        ok = 'X'.
      ENDIF.
    ELSE.
      o_ftp->cd( directorio_ftp ).
    ENDIF.

* Desconectamos siempre
    o_ftp->disconnect( ).
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  prog         = 'RPA_ALB'
                  guardar_logz = 'X' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Parámetros' '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         o_dev              = o_prog
                         restriccion_layout = o_prog->restriccion_layout ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).
  o_prog->parametros_por_defecto( CHANGING p_vkorg = p_vkorg ).

AT SELECTION-SCREEN OUTPUT.



AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0200 OUTPUT.

  SET PF-STATUS 'ST_0100' OF PROGRAM 'ZAP_STATUS'.


  IF o_prog->o_grid_f IS INITIAL.
    o_prog->o_event_f = NEW #( ).

    o_prog->o_grid_f  = NEW #(
         estructura     = ''
         o_event        = o_prog->o_event_f
         obj_contenedor = 'GRID' ).

    o_prog->o_grid_f->set_campos_tabint( o_prog->i_ficheros_alv ).
    o_prog->o_grid_f->set_field_hotspot( campo = 'FILENAME' auto = 'X' ).
    o_prog->o_grid_f->set_field_quitar( 'CHECK,XSTRING' ).

    o_prog->o_grid_f->set_field_text( campo = 'FILENAME' valor = 'Fichero' ).
    o_prog->o_grid_f->set_field_text( campo = 'FILELENGTH' valor = 'Tamaño' ).

    o_prog->o_grid_f->show( CHANGING tabla = o_prog->i_ficheros_alv ).
  ENDIF.


  IF o_prog->o_html IS INITIAL.
    o_prog->o_html = NEW #( nombre_container = 'PDF' ).
  ENDIF.



ENDMODULE.

MODULE user_command_0200 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
    WHEN 'ASOCIAR'.
      o_prog->o_grid_f->comprobar_cambios( ).
      o_prog->o_grid_f->set_marca_filas_sel( CHANGING t_tabla = o_prog->i_ficheros_alv ).
      IF NOT line_exists( o_prog->i_ficheros_alv[ check = 'X' ] ).
        IF o_prog->fichero_sel IS INITIAL.
          MESSAGE 'Debe seleccionar algún fichero' TYPE 'I'.
          RETURN.
        ELSE.
          ASSIGN o_prog->i_ficheros_alv[ filename = o_prog->fichero_sel-filename ] TO FIELD-SYMBOL(<f>).
          IF sy-subrc = 0.
            <f>-check = 'X'.
          ENDIF.
        ENDIF.
      ENDIF.
      o_prog->subir_adjuntos( ).
      IF o_prog->refrescar = 'X'.
        LEAVE TO SCREEN 0.
      ENDIF.

  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_VBELN  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_vbeln INPUT.

  CHECK sy-ucomm = 'ASOCIAR'.
  IF likp-vbeln IS INITIAL.
    MESSAGE 'Seleccine una entrega' TYPE 'I'.
  ELSE.
    SELECT SINGLE vbeln FROM likp
      INTO likp-vbeln
     WHERE vbeln = likp-vbeln
       AND vkorg = p_vkorg.
    IF sy-subrc <> 0.
      MESSAGE 'Entrega no es de organización de ventas seleccionada' TYPE 'E'.
    ENDIF.
  ENDIF.
ENDMODULE.
