*&---------------------------------------------------------------------*
*&  Include           ZSSDD070_FORMS
*&---------------------------------------------------------------------*
FORM buscar_datos.
  DATA: lv_posnr_ini TYPE posnr,
        adrc         TYPE adrc.

  CLEAR: gt_output.

*APC20241203 Ahora es posible tener configuración de material LIDL diferente por interlocutor royalty lidl
* Separamos la busqueda del join porque hay que buscar primero por interloctor y si no existe por ese dato en blanco
  SELECT vkorg_auft, vtweg_auft, matnr, regio_auft, zroy_lidl, ref_lidl FROM zssdt070_reflidl
    INTO TABLE @DATA(i_reflidl)
   ORDER BY PRIMARY KEY.
  IF NOT s_lidl[] IS INITIAL.
    DATA r_matnr_lidl TYPE RANGE OF matnr.
    LOOP AT i_reflidl ASSIGNING FIELD-SYMBOL(<reflidl>) WHERE ref_lidl IN s_lidl.
      APPEND VALUE #( option = 'EQ' sign = 'I' low = <reflidl>-matnr ) TO r_matnr_lidl.
    ENDLOOP.
  ENDIF.


  SELECT vbrk~fkdat, vbrk~kunag, vbrk~vkorg, vbrk~vtweg, vbrk~fkart,
         vbrp~vbeln, vbrp~posnr, vbrp~regio_auft, vbrp~matnr, vbrp~fkimg, vbrp~vrkme, vbrp~werks, vbrp~aubel, vbrp~aupos,
         kna1_sol~name1 AS name1_sol,
*         kna1_des~name1 AS name1_des,
*         vbpa~kunnr,
*          knvp_we~kunnr, "APC20250124
*          knvp_r1~lifnr AS zroy_lidl, "APC20250123
          knvp_r1~kunn2 AS zroy_lidl,   "APC20250123
*         vbpa_roy~lifnr AS zroy_lidl, "ASC 28.12.23 Incluímos el interlocutor royalties
         t005u~bezei,
*         mats~ref_lidl, "APC20241203
         mara~laeng, mara~breit, mara~hoehe, mara~meabm,
         knmt~kdmat, knmt~postx
    FROM vbrk AS vbrk
    INNER JOIN vbrp AS vbrp ON vbrp~vbeln = vbrk~vbeln
*    INNER JOIN zssdt070_reflidl AS mats     ON mats~vkorg_auft = vbrk~vkorg AND         "APC20240719 Mostramos facturas aunque no está en tabla Z
*    LEFT OUTER JOIN zssdt070_reflidl AS mats     ON mats~vkorg_auft = vbrk~vkorg AND  "APC20241203
*                                               mats~vtweg_auft = vbrk~vtweg AND       "APC20241203
*                                               mats~matnr      = vbrp~matnr AND       "APC20241203
*                                               mats~regio_auft = vbrp~regio_auft      "APC20241203
    INNER JOIN mara AS mara                 ON mara~matnr      = vbrp~matnr
*    LEFT OUTER JOIN knmt AS knmt            ON knmt~vkorg      = mats~vkorg_auft AND    "APC20240719 El vinculo con KNMT, mejor con VBRK que con tabla Z
*                                               knmt~vtweg      = mats~vtweg_auft AND
*                                               knmt~matnr      = mats~matnr
    LEFT OUTER JOIN knmt AS knmt            ON knmt~vkorg      = vbrk~vkorg AND
                                               knmt~vtweg      = vbrk~vtweg AND
                                               knmt~kunnr      = vbrk~kunag AND
                                               knmt~matnr      = vbrp~matnr
*    LEFT OUTER JOIN vbpa AS vbpa            ON vbpa~vbeln      = vbrp~vbeln AND
**                                               vbpa~posnr      = vbrp~posnr AND "ASC 14.05.24 Nos piden ir a nivel de cabecera
*                                               vbpa~parvw      = 'WE'
    "ASC 28.12.23 Incluímos el interlocutor royalties
*    LEFT OUTER JOIN vbpa AS vbpa_roy        ON vbpa_roy~vbeln  = vbrp~vbeln AND
**                                               vbpa_roy~posnr  = vbrp~posnr AND "ASC 14.05.24 Nos piden ir a nivel de cabecera
*                                               vbpa_roy~parvw  = 'R1'
    LEFT OUTER JOIN t005u AS t005u          ON t005u~land1     = vbrp~lland_auft AND
                                               t005u~bland     = vbrp~regio_auft AND
                                               t005u~spras     = @sy-langu
    LEFT OUTER JOIN kna1 AS kna1_sol        ON kna1_sol~kunnr  = vbrk~kunag
*    LEFT OUTER JOIN kna1 AS kna1_des        ON kna1_des~kunnr  = vbpa~kunnr
    "ASC >>> 15.05.24 Se modifica la forma que se extraen los interlocutores.
*    LEFT OUTER JOIN knvp AS knvp_we         ON knvp_we~kunnr = vbrk~kunag
*                                           AND knvp_we~vkorg = vbrk~vkorg
*                                           AND knvp_we~vtweg = vbrk~vtweg
*                                           AND knvp_we~spart = vbrk~spart
*                                           AND knvp_we~parvw = 'WE'
    LEFT OUTER JOIN knvp AS knvp_r1         ON knvp_r1~kunnr = vbrk~kunag
                                           AND knvp_r1~vkorg = vbrk~vkorg
                                           AND knvp_r1~vtweg = vbrk~vtweg
                                           AND knvp_r1~spart = vbrk~spart
                                           AND knvp_r1~parvw = 'R1'
    "ASC <<< 15.05.24 Se modifica la forma que se extraen los interlocutores.

    WHERE vbrk~vkorg IN @s_vkorg AND
          vbrk~kunag IN @s_kunnag AND
          vbrk~fksto = '' AND
          vbrp~matnr IN @s_matnr AND
          vbrk~fkdat IN @s_fkdat AND
          knmt~postx IN @s_postx AND
*          mats~ref_lidl IN @s_lidl    "APC20241203
          vbrp~matnr IN @r_matnr_lidl  AND "APC20241203
          knvp_r1~kunnr IN @s_roy "APC20241203
    INTO CORRESPONDING FIELDS OF TABLE @gt_output.

  IF gt_output IS NOT INITIAL.
***    SELECT kunnr, vbeln, posnr
***      FROM vbpa
***      INTO TABLE @DATA(lt_vbpa_we)
***      FOR ALL ENTRIES IN @gt_output[]
***      WHERE vbeln = @gt_output-aubel
***        AND parvw = 'WE'.
***
***    SELECT kunnr, vbeln, posnr
***      FROM vbpa
***      APPENDING TABLE @lt_vbpa_we
***      FOR ALL ENTRIES IN @gt_output[]
***      WHERE vbeln = @gt_output-aubel
***        AND posnr = @gt_output-aupos
***        AND parvw = 'WE'.
***
***    SELECT lifnr, vbeln, posnr
***      FROM vbpa
***      INTO TABLE @DATA(lt_vbpa_r1)
***      FOR ALL ENTRIES IN @gt_output[]
***      WHERE vbeln = @gt_output-aubel
***        AND parvw = 'R1'.
***
***    SELECT lifnr, vbeln, posnr
***      FROM vbpa
***      APPENDING TABLE @lt_vbpa_r1
***      FOR ALL ENTRIES IN @gt_output[]
***      WHERE vbeln = @gt_output-aubel
***        AND posnr = @gt_output-aupos
***        AND parvw = 'R1'.
***
***    IF lt_vbpa_we[] IS NOT INITIAL.
***      SELECT kunnr, name1
***        FROM kna1
***        INTO TABLE @DATA(lt_kna1_we)
***        FOR ALL ENTRIES IN @lt_vbpa_we[]
***        WHERE kunnr = @lt_vbpa_we-kunnr.
***    ENDIF.
***
***    IF lt_vbpa_r1[] IS NOT INITIAL.
***      SELECT lifnr, name1
***        FROM lfa1
***        INTO TABLE @DATA(lt_kna1_r1)
***        FOR ALL ENTRIES IN @lt_vbpa_r1[]
***        WHERE lifnr = @lt_vbpa_r1-lifnr.
***    ENDIF.

*    SELECT matnr, werks, cuobj
*      FROM marc
*      FOR ALL ENTRIES IN @gt_output
*      WHERE matnr = @gt_output-matnr AND
*            werks = @gt_output-werks
*      INTO TABLE @DATA(lt_marc).
*
*    IF sy-subrc EQ 0 AND lt_marc IS NOT INITIAL.
*
*      SELECT cuobj, length, length_uom, width, width_uom, height, height_uom
*        FROM yhp_idx_td151
*        FOR ALL ENTRIES IN @lt_marc
*        WHERE cuobj = @lt_marc-cuobj AND
*              shuty = 'BASE_BOX'
*        INTO TABLE @DATA(lt_medidas).
*
*    ENDIF.

    "ASC >>> Cambiamos el acceso a la secuencia. Royalties LIDL
*    SELECT a983~kschl, a983~vkorg, a983~vtweg, a983~matnr, a983~regio,
*           a983~kfrst, a983~kbstat, a983~datab, a983~datbi, konp~kbetr, konp~konwa
*      FROM a983 AS a983
*      INNER JOIN konp AS konp ON konp~knumh = a983~knumh AND
*                                 konp~kschl = 'ZCR0'
*      FOR ALL ENTRIES IN @gt_output
*      WHERE a983~kschl = 'ZCR0' AND
*            a983~vkorg = @gt_output-vkorg AND
*            a983~vtweg = @gt_output-vtweg AND
*            a983~matnr = @gt_output-matnr AND
*            a983~regio = @gt_output-regio_auft AND
*            a983~kfrst = '' AND
*            a983~kbstat = '' AND
*            a983~datab < @gt_output-fkdat AND
*            a983~datbi > @gt_output-fkdat
*      INTO TABLE @DATA(lt_konp).

*    SELECT a984~kschl, a984~vkorg, a984~vtweg, a984~matnr, a984~regio,
*           a984~kfrst, a984~kbstat, a984~datab, a984~datbi, konp~kbetr, konp~konwa,
*           a984~zroy_lidl
*      FROM a984 AS a984
*      INNER JOIN konp AS konp ON konp~knumh = a984~knumh AND
*                                 konp~kschl = 'ZCR0'
*      FOR ALL ENTRIES IN @gt_output
*      WHERE a984~kschl = 'ZCR0' AND
*            a984~vkorg = @gt_output-vkorg AND
*            a984~vtweg = @gt_output-vtweg AND
*            a984~zroy_lidl = @gt_output-zroy_lidl AND
*            a984~matnr = @gt_output-matnr AND
*            a984~regio = @gt_output-regio_auft AND
*            a984~kfrst = '' AND
*            a984~kbstat = '' AND
*            a984~datab < @gt_output-fkdat AND
*            a984~datbi > @gt_output-fkdat
*      INTO TABLE @DATA(lt_konp).

    LOOP AT gt_output ASSIGNING FIELD-SYMBOL(<fs_output>).

      CLEAR adrc.
      SELECT SINGLE kunnr adrnr FROM vbpa
        INTO (<fs_output>-kunnr, adrc-addrnumber)
       WHERE vbeln = <fs_output>-vbeln
         AND posnr = <fs_output>-posnr
         AND parvw = 'WE'.
      IF sy-subrc NE 0.
        SELECT SINGLE kunnr adrnr FROM vbpa
          INTO (<fs_output>-kunnr, adrc-addrnumber)
         WHERE vbeln = <fs_output>-vbeln
           AND posnr = '000000'
           AND parvw = 'WE'.
        IF sy-subrc NE 0.
          SELECT SINGLE kunnr adrnr FROM vbpa
            INTO (<fs_output>-kunnr, adrc-addrnumber)
           WHERE vbeln = <fs_output>-vbeln
             AND parvw = 'WE'.
        ENDIF.
      ENDIF.

* APC20241203
      ASSIGN i_reflidl[ vkorg_auft = <fs_output>-vkorg
                        vtweg_auft = <fs_output>-vtweg
                        matnr      = <fs_output>-matnr
                        zroy_lidl  = <fs_output>-zroy_lidl
                        regio_auft = <fs_output>-regio_auft ]  TO <reflidl>.
      IF sy-subrc = 0.
        <fs_output>-ref_lidl = <reflidl>-ref_lidl.
      ELSE.
        ASSIGN i_reflidl[ vkorg_auft = <fs_output>-vkorg
                          vtweg_auft = <fs_output>-vtweg
                          matnr      = <fs_output>-matnr
                          zroy_lidl  = ''
                          regio_auft = <fs_output>-regio_auft ]  TO <reflidl>.
        IF sy-subrc = 0.
          <fs_output>-ref_lidl = <reflidl>-ref_lidl.
        ELSE.
          ASSIGN i_reflidl[ vkorg_auft = <fs_output>-vkorg
                            vtweg_auft = <fs_output>-vtweg
                            matnr      = <fs_output>-matnr
                            zroy_lidl  = <fs_output>-zroy_lidl
                            regio_auft = '' ]  TO <reflidl>.
          IF sy-subrc = 0.
            <fs_output>-ref_lidl = <reflidl>-ref_lidl.
          ELSE.
            ASSIGN i_reflidl[ vkorg_auft = <fs_output>-vkorg
                              vtweg_auft = <fs_output>-vtweg
                              matnr      = <fs_output>-matnr
                              zroy_lidl  = ''
                              regio_auft = '' ]  TO <reflidl>.
            IF sy-subrc = 0.
              <fs_output>-ref_lidl = <reflidl>-ref_lidl.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
      IF NOT s_lidl[] IS INITIAL.
        IF NOT <fs_output>-ref_lidl IN s_lidl.
          DELETE gt_output.
          CONTINUE.
        ENDIF.
      ENDIF.


*APC20250123
*      SELECT lifnr, name1
*        FROM lfa1
*        INTO TABLE @DATA(lt_royalties)
*        FOR ALL ENTRIES IN @gt_output[]
*        WHERE lifnr = @gt_output-zroy_lidl.
      SELECT kunnr, name1
        FROM kna1
        INTO TABLE @DATA(lt_royalties)
        FOR ALL ENTRIES IN @gt_output[]
        WHERE kunnr = @gt_output-zroy_lidl.


      SELECT kunnr, name1
        FROM kna1
        INTO TABLE @DATA(lt_dest)
        FOR ALL ENTRIES IN @gt_output[]
        WHERE kunnr = @gt_output-kunnr.
      "Rellenamos las medidas de las cajas
*      READ TABLE lt_marc ASSIGNING FIELD-SYMBOL(<fs_marc>) WITH KEY matnr = <fs_output>-matnr
*                                                                    werks = <fs_output>-werks.
*      IF sy-subrc EQ 0.
*        READ TABLE lt_medidas ASSIGNING FIELD-SYMBOL(<fs_medidas>) WITH KEY cuobj = <fs_marc>-cuobj.
*        IF sy-subrc EQ 0.
*          <fs_output>-length     = <fs_medidas>-length    .
*          <fs_output>-length_uom = <fs_medidas>-length_uom.
*          <fs_output>-width      = <fs_medidas>-width     .
*          <fs_output>-width_uom  = <fs_medidas>-width_uom .
*          <fs_output>-height     = <fs_medidas>-height    .
*          <fs_output>-height_uom = <fs_medidas>-height_uom.
*        ENDIF.
*      ENDIF.

      "ASC 28.12.23 Incluímos el interlocutor royalties

      IF <fs_output>-zroy_lidl IS NOT INITIAL.
*        READ TABLE lt_royalties INTO DATA(ls_royalties) WITH KEY lifnr = <fs_output>-zroy_lidl. "APC20250123
        READ TABLE lt_royalties INTO DATA(ls_royalties) WITH KEY kunnr = <fs_output>-zroy_lidl.  "APC20250123
        IF sy-subrc = 0.
          <fs_output>-name_roy = ls_royalties-name1.
        ENDIF.
      ENDIF.

      IF <fs_output>-kunnr IS NOT INITIAL.
        READ TABLE lt_dest INTO DATA(ls_dest) WITH KEY kunnr = <fs_output>-kunnr.
        IF sy-subrc = 0.
          <fs_output>-name1_des = ls_dest-name1.
        ENDIF.
      ENDIF.

***      READ TABLE lt_vbpa_we INTO DATA(ls_vbpa_we) WITH KEY vbeln = <fs_output>-aubel
***                                                           posnr = <fs_output>-aupos.
***      IF sy-subrc = 0.
***        <fs_output>-kunnr = ls_vbpa_we-kunnr.
***
***      ELSE.
***        READ TABLE lt_vbpa_we INTO ls_vbpa_we WITH KEY vbeln = <fs_output>-aubel
***                                                       posnr = lv_posnr_ini.
***        IF sy-subrc = 0.
***          <fs_output>-kunnr = ls_vbpa_we-kunnr.
***        ENDIF.
***      ENDIF.
***      IF <fs_output>-kunnr IS NOT INITIAL.
***        READ TABLE lt_kna1_we INTO DATA(ls_kna1_we) WITH KEY kunnr = <fs_output>-kunnr.
***        IF sy-subrc = 0.
***          <fs_output>-name1_des = ls_kna1_we-name1.
***        ENDIF.
***      ENDIF.
***
***      READ TABLE lt_vbpa_r1 INTO DATA(ls_vbpa_r1) WITH KEY vbeln = <fs_output>-aubel
***                                                           posnr = <fs_output>-aupos.
***      IF sy-subrc = 0.
***        <fs_output>-zroy_lidl = ls_vbpa_r1-lifnr.
***
***      ELSE.
***        READ TABLE lt_vbpa_r1 INTO ls_vbpa_r1 WITH KEY vbeln = <fs_output>-aubel
***                                                       posnr = lv_posnr_ini.
***        IF sy-subrc = 0.
***          <fs_output>-zroy_lidl = ls_vbpa_r1-lifnr.
***        ENDIF.
***      ENDIF.
***      IF <fs_output>-zroy_lidl IS NOT INITIAL.
***        READ TABLE lt_kna1_r1 INTO DATA(ls_kna1_r1) WITH KEY lifnr = <fs_output>-zroy_lidl.
***        IF sy-subrc = 0.
***          <fs_output>-name_roy = ls_kna1_r1-name1.
***        ENDIF.
***      ENDIF.

      SELECT a984~kschl, a984~vkorg, a984~vtweg, a984~matnr, a984~regio,
             a984~kfrst, a984~kbstat, a984~datab, a984~datbi, konp~kbetr, konp~konwa,
             a984~zroy_lidl, konp~kpein
     FROM a984 AS a984
     INNER JOIN konp AS konp ON konp~knumh = a984~knumh
                            AND konp~kschl = 'ZCR0'
     WHERE a984~kschl     = 'ZCR0'
       AND a984~vkorg     = @<fs_output>-vkorg
       AND a984~vtweg     = @<fs_output>-vtweg
       AND a984~zroy_lidl = @<fs_output>-zroy_lidl
       AND a984~matnr     = @<fs_output>-matnr
       AND a984~regio     = @<fs_output>-regio_auft
       AND a984~kfrst     = ''
       AND a984~kbstat    = ''
       AND a984~datab     < @<fs_output>-fkdat
       AND a984~datbi     > @<fs_output>-fkdat
     INTO TABLE @DATA(lt_konp).

      "Rellenamos los nuevos campos de precio y total
      READ TABLE lt_konp ASSIGNING FIELD-SYMBOL(<fs_konp>) WITH KEY vkorg     = <fs_output>-vkorg
                                                                    vtweg     = <fs_output>-vtweg
                                                                    zroy_lidl = <fs_output>-zroy_lidl
                                                                    matnr     = <fs_output>-matnr
                                                                    regio     = <fs_output>-regio_auft.
      IF sy-subrc EQ 0.
        <fs_output>-kbetr = <fs_konp>-kbetr * -1.
        <fs_output>-konwa = <fs_konp>-konwa.
        <fs_output>-total = ( <fs_konp>-kbetr / <fs_konp>-kpein ) * <fs_output>-fkimg * -1.
      ENDIF.

    ENDLOOP.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_POSICIONES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM actualizar_posiciones .

*  DATA: lv_error TYPE flag.
*
*  alv->get_selected_rows(
*      IMPORTING
*        et_index_rows = DATA(lt_index_rows)             " Indexes of Selected Rows
*        et_row_no     = DATA(lt_row_no)                 " Numeric IDs of Selected Rows
*    ).
*
*  DESCRIBE TABLE lt_index_rows LINES DATA(lv_lines).
*
*  "Chequeamos que seleccionen al menos una línea
*  IF lv_lines EQ 0.
*    MESSAGE i368(00) WITH text-e03 DISPLAY LIKE 'E'. "Seleccione una línea para actualizar
*    RETURN.
*  ENDIF.
*
*  LOOP AT lt_index_rows ASSIGNING FIELD-SYMBOL(<fs_index_rows>).
*
*    READ TABLE gt_output ASSIGNING FIELD-SYMBOL(<fs_output>) INDEX <fs_index_rows>-index.
*    IF sy-subrc EQ 0.
*
*      IF <fs_output>-zzhist_lidl IS NOT INITIAL.
*        lv_error = 'X'.
*        EXIT.
*      ENDIF.
*
*      IF <fs_output>-vbeln IS NOT INITIAL AND <fs_output>-posnr IS NOT INITIAL.
*        UPDATE vbrp SET zzhist_lidl = 'X'
*          WHERE vbeln = <fs_output>-vbeln AND posnr = <fs_output>-posnr.
*        IF sy-subrc <> 0.
*          lv_error = 'X'.
*          EXIT.
*        ENDIF.
*      ENDIF.
*
*    ENDIF.
*
*  ENDLOOP.
*
*  IF lv_error IS NOT INITIAL.
*    ROLLBACK WORK.
*    MESSAGE i368(00) WITH text-e04 DISPLAY LIKE 'E'. "No se han podido actualizar las posiciones
*  ELSE.
*    COMMIT WORK AND WAIT.
*  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  REFRESH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refresh .

  CALL METHOD alv->refresh_table_display
    EXPORTING
      is_stable = gw_stable.

ENDFORM.
