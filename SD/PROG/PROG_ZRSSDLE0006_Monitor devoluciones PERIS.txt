*&---------------------------------------------------------------------*
*& Report  ZRSSDLE0006                                                 *
* Monitor para expediciones Subco
*----------------------------------------------------------------------*
* Autor : Rodolfo Malea.SEIS                                           *
* Date : 25.11.2024                                                    *
*----------------------------------------------------------------------*
REPORT zrssdle0006.

"""""""""""""""""
" Constantes
"""""""""""""""""
CONSTANTS: cg_operation_borrar   TYPE msgfn VALUE '003',
           cg_operation_modif    TYPE msgfn VALUE '004',
           cg_operation_sust     TYPE msgfn VALUE '005',
           cg_operation_original TYPE msgfn VALUE '009',
           cg_operation_espera   TYPE msgfn VALUE '023',
           cg_operation_enviar   TYPE msgfn VALUE '018'.

CONSTANTS: cg_dynpro_main    TYPE sy-dynnr VALUE '0100',
           cg_dynpro_dev     TYPE sy-dynnr VALUE '0110',
           cg_dynpro_ent     TYPE sy-dynnr VALUE '0120',
           cg_dynpro_def_ent TYPE sy-dynnr VALUE '9005'.

CONSTANTS: cg_boton_crear_ent  TYPE ui_func VALUE 'CREAR_ENTR',
           cg_boton_borrar_ent TYPE ui_func VALUE 'BORRAR_ENTR',
           cg_boton_conta_em   TYPE ui_func VALUE 'CONTA_EM',
           cg_boton_anular_em  TYPE ui_func VALUE 'ANULAR_EM',
           cg_boton_imprimir   TYPE ui_func VALUE 'IMPRIMIR'.



"""""""""""""""""
" Tipos de datos
"""""""""""""""""
TYPES: BEGIN OF st_lin_alv.
         INCLUDE TYPE zst_sdle_zrsdle0006_alv.
       TYPES END OF st_lin_alv.



"""""""""""""""""""""""
" Control pestañas
""""""""""""""""""""""
CONSTANTS: BEGIN OF c_c_ficha,
             tab1 LIKE sy-ucomm VALUE 'DEV',
             tab2 LIKE sy-ucomm VALUE 'ENT',
           END OF c_c_ficha.

CONTROLS:  c_ficha TYPE TABSTRIP.
DATA: BEGIN OF g_c_ficha,
        subscreen   LIKE sy-dynnr,
        prog        LIKE sy-repid VALUE sy-repid,
        pressed_tab LIKE sy-ucomm VALUE c_c_ficha-tab1,
      END OF g_c_ficha.

"""""""""""""""""
" Includes
"""""""""""""""""
INCLUDE zseis_patron_alv.
INCLUDE <cl_alv_control>.

"""""""""""""""""
" Variables globalres
"""""""""""""""""
TABLES: ztsdle0001, zst_sdle_zrsdle0001_datos_vta, zst_sdle_zrsdle0001_datos_semi, zst_sdle_zrsdle0001_datos_impr, zst_sdle_zrsdle0001_datos_hu.

DATA: gv_matnr TYPE matnr_d.

DATA: gs_trans_cab             TYPE zst_sdle_transp_cab,
      gv_ok                    TYPE xflag,
      gv_destino_trans         TYPE ztsdle0001-destino,
      gv_permite_venta         TYPE xflag,
      gv_show_alv_dynpro_venta TYPE xflag,
      gv_error_ejecucion       TYPE xflag,
      gv_error_ejecucion_1ar   TYPE xflag,
      vg_fentcl                TYPE zed_fecha_ent_cliente,
      vg_fentse                TYPE zed_fecha_ent_servicio,
      vg_zzfconfs              TYPE vbap-zzfconfs,
      vg_ebeln                 TYPE ebeln,
      vg_vbeln                 TYPE vbeln,
      vg_kunag                 TYPE zst_sdle_zrsdle0001_datos_vta-kunag,
      vg_kunwe                 TYPE zst_sdle_zrsdle0001_datos_vta-kunwe.


"""""""""""""""""
" Pantalla de selección
"""""""""""""""""
PARAMETERS: "BORRAR p_lifnr TYPE lifnr DEFAULT '0000100944',
  p_werks TYPE werks_d DEFAULT '2000',
*  p_lgort TYPE lgort_d DEFAULT 'P001',
  p_vstel TYPE vstel DEFAULT 'P001'.
SELECT-OPTIONS: s_matnrf FOR gv_matnr,
                s_fentcl FOR vg_fentcl,
                s_vbeln FOR vg_vbeln,
                s_kunag FOR vg_kunag,
                s_kunwe FOR vg_kunwe.


SELECTION-SCREEN BEGIN OF BLOCK opc WITH FRAME TITLE text-022.
PARAMETERS: p_devfin TYPE xflag DEFAULT 'X' AS CHECKBOX.
SELECTION-SCREEN END OF BLOCK opc.

""""""""""""""""""""""
"Rutinas
""""""""""""""""""""""

*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_initialization.
  DATA: wl_config_edit TYPE st_config_edit.

  vg_ventana_inicial            = cg_dynpro_main.
  vg_no_justif_cols             = 'X'.
  vg_alv_protegido_por_defecto  = 'X'.

  PERFORM f_config_dynpro USING  cg_dynpro_main ''  'T01' 'STA_0100' ' ' 'X'.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_dev 'CC_ALV_DEV' 'T11' 'X'.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_ent 'CC_ALV_ENT' 'T12' 'X'.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_def_ent 'CC_ALV_DEFENT' 'T95' 'X'.

*  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_vtas 'CC_ALV_VTAS' 'T92' 'X'.
*  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_impr 'CC_ALV_IMPR' 'T94' 'X'.
*  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_hu 'CC_ALV_DEFHU' 'T95' 'X'.


*  CLEAR wl_config_edit.
*  wl_config_edit-dynpro                 = cg_dynpro_hu.
**  wl_config_edit-es_cabecera            = 'X'.
**  wl_config_edit-nombre_tabla           = 'ZGL017'.
**  wl_config_edit-borrado_logico         = 'X'.
**  wl_config_edit-campo_borrado_logico   = 'BORRADO'.
*  PERFORM f_config_dynpro_edit    USING  wl_config_edit.
*
*  "Configuración objeto de bloqueo
*
*  DATA(tl_params_objeto_bloqueo) = VALUE tt_config_params_bloqueo( ( nombre_param = 'NUMTRANSPORTE'
*                                                                     nombre_campo = 'gs_trans_cab-NUMTRANSPORTE'
*                                                                     es_variable  = 'X' ) ).
*  PERFORM f_config_objeto_bloqueo USING 'EZ_ZTSDLE0001' tl_params_objeto_bloqueo.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CREAR_CATALOGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_catalogo TABLES it_catalogo TYPE lvc_t_fcat USING vp_dynnr.

**  wa_layout-info_fname = 'COLOR'.
**  wa_layout-sel_mode = 'A'.
  FREE it_catalogo.

  PERFORM f_ini_sort.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZST_SDLE_ZRSDLE0006_ALV'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_catalogo[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

*  DELETE it_catalogo WHERE fieldname = 'NUMTRANSPORTE'.

  CASE vp_dynnr.
    WHEN cg_dynpro_dev.

      DELETE it_catalogo WHERE fieldname = 'WBSTK'.
      DELETE it_catalogo WHERE fieldname = 'VBELN_VL'.
      DELETE it_catalogo WHERE fieldname = 'LFDAT'.

      LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>).

*        CASE <fs_catalogo>-fieldname.
*          WHEN 'TRATADO'.
*            <fs_catalogo>-checkbox  = 'X'.
*          WHEN 'PROCESO_DESC'.
*            <fs_catalogo>-col_pos   = 0.
*            <fs_catalogo>-scrtext_s = <fs_catalogo>-scrtext_m = <fs_catalogo>-scrtext_l = 'Proceso'.
*            <fs_catalogo>-coltext = 'Proceso'.
*          WHEN 'ZZFCONFS'.
*            <fs_catalogo>-col_pos   = 20.
****          WHEN 'GBSTA'.
****            <fs_catalogo>-no_out = 'X'.
****          WHEN 'MSTAE'.
****            <fs_catalogo>-no_out = 'X'.
****          WHEN 'MSTAV'.
****            <fs_catalogo>-no_out = 'X'.
****          WHEN 'VMSTA'.
****            <fs_catalogo>-no_out = 'X'.
****          WHEN 'DESC_STATUS_MAT'.
****            <fs_catalogo>-no_out = 'X'.
*        ENDCASE.
      ENDLOOP.
    WHEN cg_dynpro_ent.
      LOOP AT it_catalogo ASSIGNING <fs_catalogo>.
        IF <fs_catalogo>-fieldname = 'VBELN_VL'.
          <fs_catalogo>-col_pos   = 1.
        ENDIF.
        IF <fs_catalogo>-fieldname = 'POSNR'.
          <fs_catalogo>-col_pos   = 2.
        ENDIF.
        IF <fs_catalogo>-fieldname = 'MATNR_FINAL'.
          <fs_catalogo>-col_pos   = 90.
        ENDIF.
        IF <fs_catalogo>-fieldname = 'CHARG'.
          <fs_catalogo>-col_pos   = 91.
        ENDIF.
        IF <fs_catalogo>-fieldname = 'MAKTX_FINAL'.
          <fs_catalogo>-col_pos   = 92.
        ENDIF.
        IF <fs_catalogo>-fieldname = 'LFIMG'.
          <fs_catalogo>-col_pos   = 93.
        ENDIF.
        IF <fs_catalogo>-fieldname = 'VRKME'.
          <fs_catalogo>-col_pos   = 94.
        ENDIF.

        IF <fs_catalogo>-fieldname <> 'VBELN_VL' AND
            <fs_catalogo>-fieldname <> 'LFDAT' AND
            <fs_catalogo>-fieldname <> 'KUNAG' AND
            <fs_catalogo>-fieldname <> 'NAME1' AND
            <fs_catalogo>-fieldname <> 'KUNWE' AND
            <fs_catalogo>-fieldname <> 'KUNWE_NAME1' AND
            <fs_catalogo>-fieldname <> 'WBSTK' AND
            <fs_catalogo>-fieldname <> 'POSNR' AND
            <fs_catalogo>-fieldname <> 'MATNR_FINAL' AND
            <fs_catalogo>-fieldname <> 'CHARG' AND
            <fs_catalogo>-fieldname <> 'MAKTX_FINAL' AND
            <fs_catalogo>-fieldname <> 'LFIMG' AND
            <fs_catalogo>-fieldname <> 'VRKME'.

          DELETE it_catalogo.
        ENDIF.

      ENDLOOP.

      "Ordenación
      PERFORM f_crear_sort USING 1 'VBELN_VL' space space.
      PERFORM f_crear_sort USING 2 'POSNR' space space.


    WHEN cg_dynpro_def_ent.
      DELETE it_catalogo WHERE fieldname = 'WBSTK'.
      DELETE it_catalogo WHERE fieldname = 'VBELN_VL'.
      DELETE it_catalogo WHERE fieldname = 'LFDAT'.
      DELETE it_catalogo WHERE fieldname = 'GBSTA'.
      DELETE it_catalogo WHERE fieldname = 'MSTAE'.
      DELETE it_catalogo WHERE fieldname = 'MSTAV'.
      DELETE it_catalogo WHERE fieldname = 'VMSTA'.
      DELETE it_catalogo WHERE fieldname = 'DESC_STATUS_MAT'.

      LOOP AT it_catalogo ASSIGNING <fs_catalogo>.
        CASE <fs_catalogo>-fieldname.
          WHEN 'KWMENG'.
            <fs_catalogo>-edit = 'X'.
        ENDCASE.
      ENDLOOP.
  ENDCASE.

  LOOP AT it_catalogo ASSIGNING <fs_catalogo>.

    CASE <fs_catalogo>-fieldname.
      WHEN 'PROCESO_DESC'.
        <fs_catalogo>-outputlen = 15.
      WHEN 'MATNR_FINAL'.
        <fs_catalogo>-hotspot = 'X'.
        <fs_catalogo>-outputlen = 18.
      WHEN 'MATNR_SE'.
        <fs_catalogo>-hotspot = 'X'.
        <fs_catalogo>-outputlen = 18.
      WHEN 'EBELN'.
        <fs_catalogo>-hotspot = 'X'.
      WHEN 'VBELN'.
        <fs_catalogo>-hotspot = 'X'.
      WHEN 'VBELN_VL'.
        <fs_catalogo>-hotspot = 'X'.
      WHEN 'CHARG'.
        <fs_catalogo>-outputlen = '10'.
      WHEN 'ELIKZ'.
        <fs_catalogo>-checkbox = 'X'.
        <fs_catalogo>-outputlen = 10.
      WHEN 'WBSTK'.
        <fs_catalogo>-outputlen = 15.
    ENDCASE.
  ENDLOOP.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_PRE_LLENAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_pre_llenar_datos.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_LLENAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos TABLES tp_alv TYPE tt_lin_alv_patron USING vp_dynpro.
  DATA: wl_alv         TYPE zst_sdle_zrsdle0006_alv,
        tl_transportes TYPE ztt_sdle_transp_cab.

  DATA: lr_vbeln        TYPE efg_tab_ranges,
        lr_kunag        TYPE efg_tab_ranges,
        lr_kunwe        TYPE efg_tab_ranges,
        lr_matnrf       TYPE efg_tab_ranges,
        lr_fecha_ent_cl TYPE efg_tab_ranges..

  lr_vbeln = s_vbeln[].
  lr_kunag = s_kunag[].
  lr_kunwe = s_kunwe[].
  lr_matnrf = s_matnrf[].
  lr_fecha_ent_cl = s_fentcl[].

  DATA(fl_monitordev_dpc_imp) = NEW zsscl_sdle_monitordev_dpc_imp( ).

  CASE vp_dynpro.
    WHEN cg_dynpro_main.


    WHEN cg_dynpro_dev.
      TRY.


          DATA(tl_datos_monitor) =  fl_monitordev_dpc_imp->monitor_getlist(
            vp_werks = p_werks
            vp_vstel = p_vstel
            lp_r_vbeln = lr_vbeln
            lp_r_kunag = lr_kunag
            lp_r_kunwe = lr_kunwe
            lp_r_matnrf = lr_matnrf
            lp_r_fecha_ent_cl = lr_fecha_ent_cl
            lp_inc_finalizadas = p_devfin
          ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR tl_datos_monitor.
      ENDTRY.

      LOOP AT tl_datos_monitor ASSIGNING FIELD-SYMBOL(<fs_datos>).
***        CHECK <fs_datos>-matnr_final IN s_matnrf.

***        CHECK <fs_datos>-vbeln IN s_vbeln.
***        CHECK <fs_datos>-kunag IN s_kunag.
***        CHECK <fs_datos>-kunwe IN s_kunwe.
***        CHECK <fs_datos>-fecha_ent_cliente IN s_fentcl.

        MOVE-CORRESPONDING <fs_datos> TO wl_alv.
        PERFORM f_append_dato  TABLES   tp_alv  USING wl_alv.
      ENDLOOP.
    WHEN cg_dynpro_ent.
      TRY.

          DATA(tl_datos_monitor_ent) =  fl_monitordev_dpc_imp->monitor_ent_getlist(
            vp_werks = p_werks
            vp_vstel = p_vstel
            lp_r_vbeln = lr_vbeln
            lp_r_kunag = lr_kunag
            lp_r_kunwe = lr_kunwe
            lp_r_matnrf = lr_matnrf
            lp_r_fecha_ent_cl = lr_fecha_ent_cl
            lp_inc_finalizadas = p_devfin
          ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR tl_datos_monitor.
      ENDTRY.

      LOOP AT tl_datos_monitor_ent ASSIGNING FIELD-SYMBOL(<fs_datos_ent>).
*        CHECK <fs_datos>-matnr_final IN s_matnrf.
*
*        CHECK <fs_datos>-vbeln IN s_vbeln.
*        CHECK <fs_datos_ent>-kunag IN s_kunag.
*        CHECK <fs_datos_ent>-kunwe IN s_kunwe.
*        CHECK <fs_datos>-fecha_ent_cliente IN s_fentcl.

        MOVE-CORRESPONDING <fs_datos_ent> TO wl_alv.
        wl_alv-vbeln_vl = <fs_datos_ent>-vbeln.
        PERFORM f_append_dato  TABLES   tp_alv  USING wl_alv.
      ENDLOOP.
  ENDCASE.

ENDFORM.


MODULE c_ficha_active_tab_set OUTPUT.
  c_ficha-activetab = g_c_ficha-pressed_tab.
  CASE g_c_ficha-pressed_tab.
    WHEN c_c_ficha-tab1.
      g_c_ficha-subscreen = cg_dynpro_dev.
    WHEN c_c_ficha-tab2.
      g_c_ficha-subscreen = cg_dynpro_ent.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

MODULE c_ficha_active_tab_get INPUT.
  okcode = sy-ucomm.
  CASE okcode.
    WHEN c_c_ficha-tab1.
      g_c_ficha-pressed_tab = c_c_ficha-tab1.
    WHEN c_c_ficha-tab2.
      g_c_ficha-pressed_tab = c_c_ficha-tab2.
    WHEN OTHERS.
  ENDCASE.


ENDMODULE.
**&---------------------------------------------------------------------*
**&      Form  f_handle_toolbar
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_OBJECT       text
**      -->P_INTERACTIVE  text
**----------------------------------------------------------------------*
FORM f_handle_toolbar USING vp_dynpro rp_object TYPE REF TO cl_alv_event_toolbar_set  p_interactive.
  DATA: wl_toolbar  TYPE stb_button,
        vl_function LIKE wl_toolbar-function.

  DELETE rp_object->mt_toolbar WHERE function = '&PRINT_BACK'.

  CASE vp_dynpro.
    WHEN cg_dynpro_dev.

      DELETE rp_object->mt_toolbar WHERE function = '&LOCAL&INSERT_ROW'.
      DELETE rp_object->mt_toolbar WHERE function = 'BORRAR_FILA'.
      "Separador
      CLEAR wl_toolbar.
      wl_toolbar-butn_type = 3.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      CLEAR wl_toolbar.
      wl_toolbar-function   = cg_boton_crear_ent.
      wl_toolbar-quickinfo = 'Crear entrega'(021).
      wl_toolbar-text       = 'Crear entrega'.
      wl_toolbar-disabled   = ' '.
      wl_toolbar-icon =  icon_ws_start_whse_proc_foregr.
      APPEND wl_toolbar TO rp_object->mt_toolbar.
    WHEN cg_dynpro_ent.
      DELETE rp_object->mt_toolbar WHERE function = '&LOCAL&INSERT_ROW'.
      DELETE rp_object->mt_toolbar WHERE function = 'BORRAR_FILA'.
      "Separador
      CLEAR wl_toolbar.
      wl_toolbar-butn_type = 3.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      CLEAR wl_toolbar.
      wl_toolbar-function   = cg_boton_imprimir.
      wl_toolbar-quickinfo = 'Imprimir etiquetas'(011).
      wl_toolbar-text       = 'Imprimir'(010).
      wl_toolbar-disabled   = ' '.
      wl_toolbar-icon =  icon_print.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      "Separador
      CLEAR wl_toolbar.
      wl_toolbar-butn_type = 3.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      CLEAR wl_toolbar.
      wl_toolbar-function   = cg_boton_borrar_ent.
      wl_toolbar-quickinfo = 'Borrar entrega'.
      wl_toolbar-text       = 'Borrar entrega'.
      wl_toolbar-disabled   = ' '.
      wl_toolbar-icon =  icon_delete.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      "Separador
      CLEAR wl_toolbar.
      wl_toolbar-butn_type = 3.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      CLEAR wl_toolbar.
      wl_toolbar-function   = cg_boton_conta_em.
      wl_toolbar-quickinfo = 'Contabilizar EM'.
      wl_toolbar-text       = 'Contabilizar EM'.
      wl_toolbar-disabled   = ' '.
*      wl_toolbar-icon =  ICON_DELETE.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      CLEAR wl_toolbar.
      wl_toolbar-function   = cg_boton_anular_em.
      wl_toolbar-quickinfo = 'Anular EM'.
      wl_toolbar-text       = 'Anular EM'.
      wl_toolbar-disabled   = ' '.
      wl_toolbar-icon =  icon_system_undo.
      APPEND wl_toolbar TO rp_object->mt_toolbar.
    WHEN cg_dynpro_def_ent.
      DELETE rp_object->mt_toolbar WHERE function = '&LOCAL&INSERT_ROW'.
      DELETE rp_object->mt_toolbar WHERE function = 'BORRAR_FILA'.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.                    "f_handle_toolbar
*&---------------------------------------------------------------------*
*&      Form  f_handle_user_command
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->E_UCOMM    text
*----------------------------------------------------------------------*
FORM f_handle_user_command USING e_ucomm.
  DATA: lv_error      TYPE xfeld,
        lv_num_lineas TYPE i.
  DATA: tl_index_rows TYPE lvc_t_row,
        wl_index_rows LIKE LINE OF tl_index_rows.

  DATA: vl_texto  TYPE text80,
        vl_answer TYPE char1.


  DATA(fl_monitordev_dpc_imp) = NEW zsscl_sdle_monitordev_dpc_imp( ).

  CASE e_ucomm.
    WHEN cg_boton_crear_ent.
      READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = cg_dynpro_dev.
      READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen_def_ent>) WITH KEY subscreen = cg_dynpro_def_ent.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas = 0.
        MESSAGE 'Debe seleccionar almenos una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv>) INDEX wl_index_rows-index.

      CLEAR <fs_config_subscreen_def_ent>-tabla.

      LOOP AT tl_index_rows INTO wl_index_rows.
        READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
        IF <fs_alv>-gbsta = 'C'.
          MESSAGE 'El pedido devolución ya está completo. No se puede procesar' TYPE 'I' DISPLAY LIKE 'E'.
          lv_error = 'X'.
          EXIT.
        ENDIF.
        IF <fs_alv>-mstae IS NOT INITIAL OR
          <fs_alv>-mstav IS NOT INITIAL OR
          <fs_alv>-vmsta IS NOT INITIAL.
          MESSAGE 'Material bloqueado. No se puede procesar' TYPE 'I' DISPLAY LIKE 'E'.
          lv_error = 'X'.
          EXIT.
        ENDIF.
        IF lv_error IS INITIAL.
          APPEND INITIAL LINE TO <fs_config_subscreen_def_ent>-tabla ASSIGNING FIELD-SYMBOL(<fs_def_ent>).
          MOVE-CORRESPONDING <fs_alv> TO <fs_def_ent>.
        ENDIF.
      ENDLOOP.

      IF lv_error IS INITIAL.

        IF <fs_config_subscreen_def_ent>-alv IS NOT INITIAL.
          CALL METHOD <fs_config_subscreen_def_ent>-alv->refresh_table_display.
        ENDIF.

        CALL SCREEN 9005 STARTING AT 10 5.

        <fs_config_subscreen_def_ent>-alv->check_changed_data( ).

        CHECK gv_ok IS NOT INITIAL.

        DATA: lt_datos_entrega TYPE ztt_sdle_crea_ent_dev.

        CLEAR lt_datos_entrega.

        LOOP AT <fs_config_subscreen_def_ent>-tabla ASSIGNING <fs_def_ent>.
          APPEND INITIAL LINE TO lt_datos_entrega ASSIGNING FIELD-SYMBOL(<fs_datos_entrega>).
          MOVE-CORRESPONDING <fs_def_ent> TO <fs_datos_entrega>.
        ENDLOOP.

        TRY.

            DATA(lt_return) = fl_monitordev_dpc_imp->crear_entrega_dev( tp_datos = lt_datos_entrega ).

            CLEAR lv_error.
            LOOP AT lt_return INTO DATA(ls_return) WHERE type CA 'EA'.
              MESSAGE ID ls_return-id
                    TYPE 'I'
                    NUMBER ls_return-number
                    WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4
                    DISPLAY LIKE 'E'.
              lv_error = 'X'.
              EXIT.
            ENDLOOP.
            CHECK lv_error IS INITIAL.

            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              EXPORTING
                wait = 'X'.

            MESSAGE 'Entrega creada correctamente' TYPE 'I'.

            PERFORM f_refresh_alvs.

            " Navego a la pestaña de transporte.
            CALL METHOD cl_gui_cfw=>set_new_ok_code( c_c_ficha-tab2 ).
            CALL METHOD cl_gui_cfw=>flush.


          CATCH /iwbep/cx_mgw_busi_exception.
            MESSAGE 'Error al crear entrega' TYPE 'I' DISPLAY LIKE 'E'.
            EXIT.
        ENDTRY.

      ENDIF.
    WHEN cg_boton_imprimir.
      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_ent.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas <> 1.
        MESSAGE 'Debe seleccionar una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

      " NAC -> Clase de mensaje.
      " VL --> Entrega
      IF <fs_alv>-vbeln_vl IS NOT INITIAL.
        DATA lv_vermo TYPE char1.

        SELECT SINGLE *
          FROM nast
          INTO @DATA(ls_nast)
          WHERE kappl = 'V2' AND
                objky = @<fs_alv>-vbeln_vl AND
                kschl = 'ZLD5'.
        IF sy-subrc = 0 AND ls_nast-vstat = '1'.
          lv_vermo = '2'.
        ELSE.
          lv_vermo = '1'.
        ENDIF.
        " VL71
        SUBMIT sd70av2a
          WITH rg_kschl = 'ZLD5'
          WITH pm_nsort = '01'
          WITH pm_vermo = lv_vermo
          WITH rg_vbeln = <fs_alv>-vbeln_vl
          AND RETURN.
      ENDIF.

    WHEN cg_boton_borrar_ent.
      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_ent.

      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas <> 1.
        MESSAGE 'Debe seleccionar una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

      "
      " Validaciones.
      "
      IF <fs_alv>-wbstk = 'C'.
        MESSAGE 'Entrega con la EM contabilizada. No se puede borrar. Anule primero la EM.' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      "
      " Confirmación y acciones.
      "
      vl_texto = '¿Desea borrar la entrega seleccionada? Esta acción no se puede deshacer.'.
      CLEAR vl_answer.
      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          text_question         = vl_texto
          display_cancel_button = ' '
        IMPORTING
          answer                = vl_answer
        EXCEPTIONS
          text_not_found        = 1
          OTHERS                = 2.
      CHECK vl_answer = '1'.

      TRY.

          lt_return = fl_monitordev_dpc_imp->borrar_entrega_dev( lp_vbeln_vl = <fs_alv>-vbeln_vl ).

          CLEAR lv_error.
          LOOP AT lt_return INTO ls_return WHERE type CA 'EA'.
            MESSAGE ID ls_return-id
                  TYPE 'I'
                  NUMBER ls_return-number
                  WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4
                  DISPLAY LIKE 'E'.
            lv_error = 'X'.
            EXIT.
          ENDLOOP.
          CHECK lv_error IS INITIAL.

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.

          MESSAGE 'Entrega borrada correctamente' TYPE 'I'.

          PERFORM f_refresh_alvs.

          " Navego a la pestaña de transporte.
          CALL METHOD cl_gui_cfw=>set_new_ok_code( c_c_ficha-tab1 ).
          CALL METHOD cl_gui_cfw=>flush.

        CATCH /iwbep/cx_mgw_busi_exception.
          MESSAGE 'Error al borrar la entrega' TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.

    WHEN cg_boton_conta_em.
      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_ent.

      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas <> 1.
        MESSAGE 'Debe seleccionar una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

      "
      " Validaciones.
      "
      IF <fs_alv>-wbstk = 'C'.
        MESSAGE 'Entrega con la EM ya contabilizada' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      "
      " Confirmación y acciones.
      "
      vl_texto = '¿Desea contabilizar la entrada de mercancía?'.
      CLEAR vl_answer.
      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          text_question         = vl_texto
          display_cancel_button = ' '
        IMPORTING
          answer                = vl_answer
        EXCEPTIONS
          text_not_found        = 1
          OTHERS                = 2.
      CHECK vl_answer = '1'.

      TRY.

          lt_return = fl_monitordev_dpc_imp->contabilizar_em( lp_vbeln_vl = <fs_alv>-vbeln_vl ).

          CLEAR lv_error.
          LOOP AT lt_return INTO ls_return WHERE type CA 'EA'.
            MESSAGE ID ls_return-id
                  TYPE 'I'
                  NUMBER ls_return-number
                  WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4
                  DISPLAY LIKE 'E'.
            lv_error = 'X'.
            EXIT.
          ENDLOOP.
          CHECK lv_error IS INITIAL.

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.

          MESSAGE 'Entrada contabilizada correctamente.' TYPE 'I'.

          PERFORM f_refresh_alvs.

        CATCH /iwbep/cx_mgw_busi_exception.
          MESSAGE 'Error al contabilizar la entrada.' TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.

    WHEN cg_boton_anular_em.
      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_ent.

      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas <> 1.
        MESSAGE 'Debe seleccionar una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

      vl_texto = '¿Desea anular la entrada de mercancía?'.
      CLEAR vl_answer.
      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          text_question         = vl_texto
          display_cancel_button = ' '
        IMPORTING
          answer                = vl_answer
        EXCEPTIONS
          text_not_found        = 1
          OTHERS                = 2.
      CHECK vl_answer = '1'.

      TRY.

          lt_return = fl_monitordev_dpc_imp->anular_em( lp_vbeln_vl = <fs_alv>-vbeln_vl ).

          CLEAR lv_error.
          LOOP AT lt_return INTO ls_return WHERE type CA 'EA'.
            MESSAGE ID ls_return-id
                  TYPE 'I'
                  NUMBER ls_return-number
                  WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4
                  DISPLAY LIKE 'E'.
            lv_error = 'X'.
            EXIT.
          ENDLOOP.
          CHECK lv_error IS INITIAL.

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.

          MESSAGE 'Entrada mercancía anulada correctamente.' TYPE 'I'.

          PERFORM f_refresh_alvs.

        CATCH /iwbep/cx_mgw_busi_exception.
          MESSAGE 'Error al anular la entrada de mercancía.' TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.
  ENDCASE.




ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  user_command_popup
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->R_UCOMM      text
*      -->RS_SELFIELD  text
*----------------------------------------------------------------------*
FORM user_command_popup USING r_ucomm LIKE sy-ucomm
                              rs_selfield TYPE slis_selfield.

*  CASE r_ucomm.
*    WHEN '&ONT'.
*      DATA: gd_repid LIKE sy-repid, "Exists
*            ref_grid TYPE REF TO cl_gui_alv_grid.
*      IF ref_grid IS INITIAL.
*        CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
*          IMPORTING
*            e_grid = ref_grid.
*      ENDIF.
*      IF NOT ref_grid IS INITIAL.
*        CALL METHOD ref_grid->check_changed_data .
*      ENDIF.
*  ENDCASE.


*(SAPLSLVC_FULLSCREEN)GT_GRID-GRID
ENDFORM.                    "USER_COMMAND


FORM f_refresh_alvs.
  LOOP AT tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WHERE dynpro = cg_dynpro_main.
    " Recargar datos
    CLEAR <fs_config_subscreen>-tabla.
    PERFORM f_llenar_datos TABLES <fs_config_subscreen>-tabla USING <fs_config_subscreen>-subscreen.
    " Refrescar ALV
    IF <fs_config_subscreen>-alv IS NOT INITIAL.
      CALL METHOD <fs_config_subscreen>-alv->refresh_table_display.
    ENDIF.
  ENDLOOP.
ENDFORM.
FORM f_handle_hotspot_click
      USING vp_dynpro e_row e_column wp_alv TYPE st_lin_alv_patron.

  CASE e_column.
    WHEN 'MATNR_FINAL'.
      IF wp_alv-matnr_final IS NOT INITIAL.
        SET PARAMETER ID 'MAT' FIELD wp_alv-matnr_final.
        SET PARAMETER ID 'WRK' FIELD p_werks.
*        SET PARAMETER ID 'LAG' FIELD p_lgort.

*K Basic Data 1
*C Classification
*V Sales: Sales Org. Data 1
*E Purchasing
*D MRP 1
*P Forecasting
*A Work Scheduling
*F Production Resources/Tools
*L General Plant Data / Storage 1
*S Warehouse Management 1
*Q Quality Management
*B Accounting 1
*G Costing 1
*X Plant Stock
*Z Storage Location Stock

*        SET PARAMETER ID 'MXX' FIELD 'DK' .

        CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN .
      ENDIF.

    WHEN 'VBELN'.
      IF wp_alv-vbeln IS NOT INITIAL.
        SET PARAMETER ID 'AUN' FIELD wp_alv-vbeln.
        CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN .
      ENDIF.
    WHEN 'VBELN_VL'.
      IF wp_alv-vbeln_vl IS NOT INITIAL.
        SET PARAMETER ID 'VL' FIELD wp_alv-vbeln_vl.
        CALL TRANSACTION 'VL03N' AND SKIP FIRST SCREEN .
      ENDIF.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  STATUS_9005  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9005 OUTPUT.
  SET PF-STATUS 'STA_9005'.
  SET TITLEBAR 'T95'.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9005  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9005 INPUT.

  gv_ok = 'X'.

  CASE okcode.
    WHEN 'OK'.

    WHEN 'CANCEL'.
      CLEAR gv_ok.
  ENDCASE.

  LEAVE TO SCREEN 0.
ENDMODULE.
FORM f_pbo_post TABLES it_alv USING vp_dynnr.
**Filtramos por defecto todos los datos cuya marca empiece por 'B' (Borrados)
  DATA: lt_filter LIKE it_filter,
        wa_filter TYPE lvc_s_filt.
***  IF vp_dynnr = cg_dynpro_hu.
***    wa_filter-fieldname = 'ZZMARCA_EDIT'.
***    wa_filter-sign    = 'E'.
***    wa_filter-option  = 'CP'.
***    wa_filter-low     = 'D*'.
***    APPEND wa_filter TO lt_filter.
***
***    READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen_hu> WITH KEY subscreen = cg_dynpro_hu.
***    CHECK sy-subrc = 0.
***
***
***    CALL METHOD <fs_config_subscreen_hu>-alv->set_filter_criteria
***      EXPORTING
***        it_filter = lt_filter.
***
***  ENDIF.

ENDFORM.
