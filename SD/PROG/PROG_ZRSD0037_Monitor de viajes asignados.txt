*&---------------------------------------------------------------------*
*& Report  ZRSD0034
*&
*&---------------------------------------------------------------------*
*& GAPSD104. Monitor de viajes asignados
*& Javier Calás. 29.02.24
*&---------------------------------------------------------------------*
REPORT zrsd0037.

TABLES: vttk, vttp.

**********************
* Tipos de datos
**********************
TYPES: BEGIN OF st_lin_alv.
         INCLUDE TYPE zrsd0037_s_alv.
       TYPES END OF st_lin_alv.




"""""""""""""""""
" Includes
"""""""""""""""""
INCLUDE zseis_patron_alv.


**********************
* Variables globales
**********************
CONSTANTS: cg_dynnr_transportistas  TYPE sy-dynnr VALUE '0100'.
CONSTANTS: cg_dynnr_transportes     TYPE sy-dynnr VALUE '0200'.

DATA it_alv_transportistas TYPE tt_lin_alv_patron.
DATA vg_lifnr TYPE lfa1-lifnr.



**********************
* Pantalla de selección
**********************
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-b01.
PARAMETERS:     p_tplst   TYPE vttk-tplst OBLIGATORY.
SELECT-OPTIONS: s_tdlnr   FOR vttk-tdlnr.
SELECTION-SCREEN END OF BLOCK b01.



**********************
* Eventos
**********************
AT SELECTION-SCREEN OUTPUT.


*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_initialization.


  CALL FUNCTION 'RS_SUPPORT_SELECTIONS'
    EXPORTING
      report               = sy-repid
      variant              = 'TRANS. XATIVA'
    EXCEPTIONS
      variant_not_existent = 1
      variant_obsolete     = 2
      OTHERS               = 3.


  vg_no_justif_cols = 'X'.
  PERFORM f_config_dynpro USING cg_dynnr_transportistas 'CC_ALV_100' 'T01' 'STA_100' space space.
  PERFORM f_config_dynpro USING cg_dynnr_transportes    'CC_ALV_200' 'T02' 'STA_200' space space.
ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  F_CREAR_CATALOGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_catalogo TABLES it_catalogo TYPE lvc_t_fcat USING vp_dynnr.

  wa_variant-report  = |{ sy-repid }_{ vp_dynnr }|.
  wa_layout-sel_mode = 'A'.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZRSD0037_S_ALV'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_catalogo[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.


  LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>).
    CASE <fs_catalogo>-fieldname.
      WHEN 'LIFNR'  OR 'NAME1'    OR 'ADD04'      OR 'SIGNI'          OR 'TREGNB'         OR 'FECHA_DISP' OR 'HORA_DISP' OR
           'STATUS' OR 'SEMAFORO' OR 'STATUS_TXT' OR 'TKNUM_ULT_DESP' OR 'DATEN_ULT_DESP' OR 'UATEN_ULT_DESP'.
        IF vp_dynnr = cg_dynnr_transportes.
          DELETE it_catalogo. CONTINUE.
        ENDIF.
      WHEN OTHERS.
        IF vp_dynnr = cg_dynnr_transportistas.
          DELETE it_catalogo. CONTINUE.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  LOOP AT it_catalogo ASSIGNING <fs_catalogo>.
    CASE <fs_catalogo>-fieldname.
      WHEN 'TKNUM'.
        <fs_catalogo>-hotspot = 'X'.
    ENDCASE.
  ENDLOOP.




ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_llenar_datos
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos TABLES tp_alv TYPE tt_lin_alv_patron USING vp_dynpro.
  CLEAR tp_alv[].

  CASE vp_dynpro.
    WHEN cg_dynnr_transportistas.
      PERFORM f_llenar_datos_transportistas TABLES tp_alv USING space.
*    WHEN cg_dynnr_transportes.
*      PERFORM f_llenar_datos_transportes TABLES tp_alv.
  ENDCASE.


ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_llenar_datos
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos_transportistas TABLES tp_alv TYPE tt_lin_alv_patron USING vp_refresh.
  CLEAR tp_alv[].
  IF vp_refresh = space.
    IF r_alv IS BOUND.
      r_alv->free( ).
      CLEAR r_alv.
    ENDIF.

    IF r_contenedor IS BOUND.
      r_contenedor->free( ).
      CLEAR r_contenedor.
    ENDIF.
  ELSE.
    CLEAR it_alv_transportistas.
  ENDIF.


  IF it_alv_transportistas IS NOT INITIAL.
    tp_alv[] = it_alv_transportistas.

  ELSE.
    SELECT SINGLE tplst, bukrs
      INTO @DATA(wl_ttds)
      FROM ttds
      WHERE tplst = @p_tplst.
    CHECK sy-subrc = 0.


    DATA(tl_bukrs_rg) = VALUE zrange_t_bukrs( ( sign = 'I' option = 'EQ' low = wl_ttds-bukrs ) ).

    DATA(rl_transporte) = NEW zcl_zhui5_sd_transport_dpc_imp( ).
    TRY.
        DATA(tl_transportistas) = rl_transporte->transportistas_getlist( tp_lifnr_rg = s_tdlnr[]
                                                                         tp_bukrs_rg = tl_bukrs_rg ).
        MOVE-CORRESPONDING tl_transportistas TO tp_alv[].
      CATCH /iwbep/cx_mgw_busi_exception.
    ENDTRY.


    LOOP AT tp_alv[] ASSIGNING FIELD-SYMBOL(<fs_alv>).
      CASE <fs_alv>-status.
        WHEN '01'.
          <fs_alv>-semaforo = icon_led_yellow.
        WHEN '02'.
          <fs_alv>-semaforo = icon_led_red.
        WHEN OTHERS.
          <fs_alv>-semaforo = icon_led_green.
      ENDCASE.
    ENDLOOP.


    it_alv_transportistas = tp_alv[].
  ENDIF.

  IF vp_refresh = 'X' AND r_alv IS BOUND.
    r_alv->refresh_table_display( ).
  ENDIF.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  f_llenar_datos
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos_transportes TABLES tp_alv TYPE tt_lin_alv_patron USING vp_lifnr TYPE zsd_trans_s_transportistas-lifnr vp_refresh.
  IF vp_refresh = space.
    IF r_alv IS BOUND.
      r_alv->free( ).
      CLEAR r_alv.
    ENDIF.

    IF r_contenedor IS BOUND.
      r_contenedor->free( ).
      CLEAR r_contenedor.
    ENDIF.
  ENDIF.


  CLEAR tp_alv[].

  DATA(rl_transporte) = NEW zcl_zhui5_sd_transport_dpc_imp( ).
  DATA(tl_tdlnr_rg) = VALUE zsd_t_tdlnr_rg( ( sign = 'I' option = 'EQ' low = vp_lifnr ) ).
  TRY.
      DATA vl_fec_ini_despachado TYPE dats.
      vl_fec_ini_despachado = sy-datlo - 3.
      DATA(tl_transportes) = rl_transporte->transportes_getlist( tp_tdlnr_rg  = tl_tdlnr_rg
*                                                                 vp_cla_despachado = space
                                                                 vp_fec_ini_despachado = vl_fec_ini_despachado ).
      MOVE-CORRESPONDING tl_transportes TO tp_alv[].
    CATCH /iwbep/cx_mgw_busi_exception.
  ENDTRY.

  IF vp_refresh = 'X' AND r_alv IS BOUND.
    r_alv->refresh_table_display( ).
  ENDIF.
ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_handle_double_click
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_handle_double_click USING vp_dynpro vp_row vp_column wp_fila TYPE st_lin_alv_patron.
  CHECK vp_dynpro = cg_dynnr_transportistas.

  vg_lifnr = wp_fila-lifnr.
  PERFORM f_llenar_datos_transportes TABLES it_alv USING vg_lifnr space.
  SET SCREEN cg_dynnr_transportes. LEAVE SCREEN.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  f_handle_hotspot_click
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_handle_hotspot_click USING vp_dynpro vp_row_id vp_column_id wp_fila TYPE st_lin_alv_patron.

  SET PARAMETER ID 'TNR' FIELD wp_fila-tknum.
  CALL TRANSACTION 'VT03N' AND SKIP FIRST SCREEN.
ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_user_command
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*

FORM f_user_command  USING vp_dynnr vp_okcode.
  CASE vp_okcode.
    WHEN 'VOLVER2' OR 'ATRAS2' OR 'CANCELAR2'.
      PERFORM f_llenar_datos_transportistas TABLES it_alv USING space.

      LEAVE TO SCREEN cg_dynnr_transportistas.
  ENDCASE.

ENDFORM.



**&---------------------------------------------------------------------*
**&      Form  f_handle_toolbar
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_OBJECT       text
**      -->P_INTERACTIVE  text
**----------------------------------------------------------------------*
FORM f_handle_toolbar USING vp_dynpro rp_object TYPE REF TO cl_alv_event_toolbar_set  p_interactive.
  DATA: wl_toolbar  TYPE stb_button,
        vl_function LIKE wl_toolbar-function.


  IF vp_dynpro = cg_dynnr_transportes.
    APPEND INITIAL LINE TO rp_object->mt_toolbar ASSIGNING FIELD-SYMBOL(<fs_toolbar>).
    <fs_toolbar>-butn_type = 3.


    APPEND INITIAL LINE TO rp_object->mt_toolbar ASSIGNING <fs_toolbar>.
    <fs_toolbar>-function   = 'PREVISUALIZAR'.
    <fs_toolbar>-quickinfo  = 'Previsualizar'.
    <fs_toolbar>-text       = 'Previsualizar'.
    <fs_toolbar>-icon       =  icon_view_form.
    <fs_toolbar>-butn_type  = 2.

    APPEND INITIAL LINE TO rp_object->mt_toolbar ASSIGNING <fs_toolbar>.
    <fs_toolbar>-function   = 'IMPRIMIR'.
    <fs_toolbar>-quickinfo  = 'Imprimir'.
    <fs_toolbar>-text       = 'Imprimir'.
    <fs_toolbar>-icon       =  icon_print.
    <fs_toolbar>-butn_type  = 2.
  ENDIF.



  APPEND INITIAL LINE TO rp_object->mt_toolbar ASSIGNING <fs_toolbar>.
  <fs_toolbar>-butn_type = 3.
  APPEND INITIAL LINE TO rp_object->mt_toolbar ASSIGNING <fs_toolbar>.
  <fs_toolbar>-function   = 'REFRESH'.
  <fs_toolbar>-icon       =  icon_refresh.


ENDFORM.                    "f_handle_toolbar


*&---------------------------------------------------------------------*
*&      Form  f_handle_menu_button
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->E_OBJECT   text
*      -->E_UCOMM    text
*----------------------------------------------------------------------*
FORM f_handle_menu_button
      USING e_object TYPE REF TO  cl_ctmenu
            e_ucomm TYPE  sy-ucomm.

  DATA: fcode TYPE ui_func,
        text  TYPE gui_text.


  CASE e_ucomm.
    WHEN 'PREVISUALIZAR'.
      e_object->add_function( fcode = 'HOJA_PICKING_PREV'
                              text  = 'Hoja picking' ).
      e_object->add_function( fcode = 'CARTA_PORTE_PREV'
                              text  = 'Carta de porte' ).

    WHEN 'IMPRIMIR'.
      e_object->add_function( fcode = 'HOJA_PICKING_IMPR'
                              text  = 'Hoja picking' ).
      e_object->add_function( fcode = 'CARTA_PORTE_IMPR'
                              text  = 'Carta de porte' ).
  ENDCASE.

ENDFORM.                    "f_handle_menu_button





*&---------------------------------------------------------------------*
*&      Form  f_handle_user_command
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->E_UCOMM    text
*----------------------------------------------------------------------*
FORM f_handle_user_command USING e_ucomm.

  DATA: tl_index_rows TYPE lvc_t_row.

  IF e_ucomm <> 'REFRESH' AND e_ucomm <> 'PREVISUALIZAR' AND e_ucomm <> 'IMPRIMIR'.
    r_alv->get_selected_rows( IMPORTING et_index_rows = tl_index_rows ).
    IF lines( tl_index_rows ) < 1.
      MESSAGE 'Debe seleccionar una fila' TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.
    LOOP AT tl_index_rows ASSIGNING FIELD-SYMBOL(<fs_index_rows>).
      DATA(wl_alv) = it_alv[ <fs_index_rows>-index ].
    ENDLOOP.
  ENDIF.


  CASE e_ucomm.
    WHEN 'CARTA_PORTE_PREV'.
      PERFORM f_imprimir_carta_porte USING wl_alv 'X'.
    WHEN 'HOJA_PICKING_PREV'.
      PERFORM f_imprimir_hoja_picking USING wl_alv 'X'.
    WHEN 'CARTA_PORTE_IMPR'.
      PERFORM f_imprimir_carta_porte USING wl_alv space.
    WHEN 'HOJA_PICKING_IMPR'.
      PERFORM f_imprimir_hoja_picking USING wl_alv space.

    WHEN 'REFRESH'.
      PERFORM f_refresh_alv.
  ENDCASE.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  F_REFRESH
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->E_UCOMM    text
*----------------------------------------------------------------------*
FORM f_refresh_alv.
  CASE sy-dynnr.
    WHEN cg_dynnr_transportistas.
      PERFORM f_llenar_datos_transportistas TABLES it_alv USING 'X'.
    WHEN cg_dynnr_transportes.
      PERFORM f_llenar_datos_transportes TABLES it_alv USING vg_lifnr 'X'.
  ENDCASE.


*    WHEN cg_dynnr_transportes.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_imprimir_carta_porte
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->E_UCOMM    text
*----------------------------------------------------------------------*
FORM f_imprimir_carta_porte USING wp_alv        TYPE st_lin_alv_patron
                                  vp_previsualizar  .


  IF wp_alv-tknum IS NOT INITIAL.
    TRY.
        DATA(rl_transporte) = NEW zcl_zhui5_sd_transport_dpc_imp( ).
        rl_transporte->cartas_porte_imprimir( vp_tknum          = wp_alv-tknum
                                              vp_previsualizar  = vp_previsualizar ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(rl_exc).
        MESSAGE rl_exc->get_text( ) TYPE 'E'.
    ENDTRY.
  ENDIF.

  MESSAGE 'Orden de spool generada' TYPE 'S'.
ENDFORM.




*&---------------------------------------------------------------------*
*&      Form  f_imprimir_hoja_picking
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->E_UCOMM    text
*----------------------------------------------------------------------*
FORM f_imprimir_hoja_picking USING wp_alv TYPE st_lin_alv_patron
                                   vp_previsualizar.

  "Hoja Picking # Clase de mensaje de transportes (V7) ZPCK se debe de imprimir
  IF wp_alv-tknum IS NOT INITIAL.
    TRY.
        DATA(rl_transporte) = NEW zcl_zhui5_sd_transport_dpc_imp( ).
        rl_transporte->hoja_picking_imprimir( vp_tknum          = wp_alv-tknum
                                              vp_previsualizar  = vp_previsualizar ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(rl_exc).
        MESSAGE rl_exc->get_text( ) TYPE 'E'.
    ENDTRY.
  ENDIF.


  MESSAGE 'Orden de spool generada' TYPE 'S'.
ENDFORM.
