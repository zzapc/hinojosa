*&---------------------------------------------------------------------*
*&  Include           ZSSDD306_V2_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  RECOGER_PARAMETRIZACION
*&---------------------------------------------------------------------*
FORM recoger_parametrizacion.

  CLEAR: ti_zssdt306a[], ti_zssdt306b[].

  SELECT * INTO TABLE ti_zssdt306a FROM zssdt306a.
  SELECT * INTO TABLE ti_zssdt306b FROM zssdt306b.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form CheckAccounts
*&---------------------------------------------------------------------*
FORM checkaccounts.

  CLEAR: it[], it.
  SELECT kunnr bukrs FROM knb1 INTO TABLE it
      WHERE kunnr = so_kunnr
        AND bukrs IN so_bukrs.
  IF sy-subrc NE 0.
    MESSAGE s368(00) WITH 'Ningun registro para el cliente'.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CHECK_CREDIT_AREA
*&---------------------------------------------------------------------*
FORM check_credit_area.

  CLEAR ti_kkber[].

* Obtenemos las sociedades
  SELECT * INTO TABLE @DATA(ti_t001) FROM t001
    WHERE bukrs IN @so_bukrs.

* Buscamos las org. de vtas de las sociedades introducidas
  IF ti_t001[] IS NOT INITIAL.
    SELECT * INTO TABLE @DATA(ti_tvko) FROM tvko
      FOR ALL ENTRIES IN @ti_t001
      WHERE bukrs = @ti_t001-bukrs.
  ENDIF.

* Buscamos primero si tiene parametrizada la gestion de créditos por org. vtas
  IF ti_tvko[] IS NOT INITIAL.
    SELECT * INTO TABLE @DATA(ti_tvta) FROM tvta
      FOR ALL ENTRIES IN @ti_tvko
      WHERE vkorg = @ti_tvko-vkorg
        AND kkber <> @space.
  ENDIF.

* Recorremos el custo de las org. de vtas
  LOOP AT ti_tvta INTO DATA(wa_tvta).
    READ TABLE ti_tvko INTO DATA(wa_tvko) WITH KEY vkorg = wa_tvta-vkorg.
    ti_kkber-bukrs = wa_tvko-bukrs.
    ti_kkber-vkorg = wa_tvta-vkorg.
    ti_kkber-kkber = wa_tvta-kkber.
    APPEND ti_kkber. CLEAR ti_kkber.
  ENDLOOP.

* Asignamoslas org. de vtas que no están parametrizadas por control de credito
  LOOP AT ti_tvko INTO wa_tvko.
    READ TABLE ti_kkber INTO DATA(wa_kkber) WITH KEY bukrs = wa_tvko-bukrs vkorg = wa_tvko-vkorg.
    IF sy-subrc <> 0.
      READ TABLE ti_t001 INTO DATA(wa_t001) WITH KEY bukrs = wa_tvko-bukrs.
      ti_kkber-bukrs = wa_tvko-bukrs.
      ti_kkber-vkorg = wa_tvko-vkorg.
      ti_kkber-kkber = wa_t001-kkber.
      APPEND ti_kkber. CLEAR ti_kkber.
    ENDIF.
  ENDLOOP.

* Sociedades por si acaso
  LOOP AT ti_t001 INTO wa_t001 WHERE kkber IN so_kkber.
    READ TABLE ti_tvko INTO wa_tvko WITH KEY bukrs = wa_t001-bukrs.
    IF sy-subrc <> 0.
      ti_kkber-bukrs = wa_t001-bukrs.
      ti_kkber-vkorg = '*'.
      ti_kkber-kkber = wa_t001-kkber.
      APPEND ti_kkber. CLEAR ti_kkber.
    ENDIF.
  ENDLOOP.

  IF so_kkber[] IS NOT INITIAL.
    DELETE ti_kkber WHERE kkber NOT IN so_kkber.
  ENDIF.

  IF ti_kkber[] IS INITIAL.
    MESSAGE s368(00) WITH 'No seleccionada ningun ACC'.
  ELSE.
    DATA(ti_kkber_aux) = ti_kkber[].
    DATA(ti_kkber_aux2) = ti_kkber[].
    SORT ti_kkber_aux BY bukrs.
    SORT ti_kkber_aux2 BY kkber.
    DELETE ADJACENT DUPLICATES FROM ti_kkber_aux COMPARING bukrs.
    DELETE ADJACENT DUPLICATES FROM ti_kkber_aux2 COMPARING kkber.

    ti_vkorg[] = ti_kkber_aux2[].
    DELETE ti_vkorg WHERE kkber IS INITIAL.

    SELECT * INTO TABLE ti_t014t FROM t014t FOR ALL ENTRIES IN ti_vkorg
      WHERE kkber = ti_vkorg-kkber
        AND spras = sy-langu.

    DESCRIBE TABLE ti_kkber_aux LINES DATA(i).
    IF i > 1.
      knc1-bukrs = '*'.
      "Rellenamos condicion de pago y via de pago
      SELECT * INTO TABLE @DATA(ti_knb1) FROM knb1 FOR ALL ENTRIES IN @ti_kkber_aux
        WHERE bukrs = @ti_kkber_aux-bukrs
          AND kunnr = @so_kunnr.
      READ TABLE ti_knb1 INTO DATA(wa_knb1) INDEX 1.
      LOOP AT ti_knb1 INTO DATA(aux_knb1).
        IF wa_knb1-zwels(1) <> aux_knb1-zwels(1).
          v_zlsch = '*'.
        ENDIF.
        IF wa_knb1-zterm <> aux_knb1-zterm.
          l_knb1-zterm = '*'.
        ENDIF.
      ENDLOOP.
      IF v_zlsch = space.
        v_zlsch = wa_knb1-zwels(1).
        SELECT SINGLE land1 INTO @DATA(v_land12) FROM t001 WHERE bukrs = @wa_knb1-bukrs.
        SELECT SINGLE text2 INTO descvia FROM t042zt
          WHERE spras = sy-langu
          AND zlsch = v_zlsch
          AND land1 = v_land12.
      ENDIF.
      IF l_knb1-zterm = space.
        l_knb1-zterm = wa_knb1-zterm.
        SELECT SINGLE text1 INTO desccond FROM t052u
          WHERE spras = sy-langu
            AND zterm = l_knb1-zterm.
      ENDIF.
    ELSE.
      READ TABLE ti_kkber_aux INTO DATA(l_kkber) INDEX 1.
      IF sy-subrc = 0.
        knc1-bukrs = l_kkber-bukrs.
      ENDIF.
      "Rellenamos condicion de pago y via de pago
      SELECT SINGLE * INTO l_knb1 FROM knb1
        WHERE bukrs = knc1-bukrs
          AND kunnr = so_kunnr.
      IF sy-subrc = 0.
        v_zlsch = l_knb1-zwels(1).
        SELECT SINGLE land1 INTO @DATA(v_land1) FROM t001 WHERE bukrs = @knc1-bukrs.
        SELECT SINGLE text2 INTO descvia FROM t042zt
          WHERE spras = sy-langu
          AND zlsch = v_zlsch
          AND land1 = v_land1.
        SELECT SINGLE text1 INTO desccond FROM t052u
          WHERE spras = sy-langu
            AND zterm = l_knb1-zterm.
      ENDIF.
    ENDIF.
    knc1-gjahr = gp_gjahr.
    SELECT SINGLE name1 kunnr FROM kna1 INTO (kna1-name1, knc1-kunnr)
        WHERE kunnr = so_kunnr.
    DESCRIBE TABLE ti_kkber_aux2 LINES DATA(j).
    IF j > 1.
      ikkber = '*'.
    ELSE.
      READ TABLE ti_kkber_aux2 INTO DATA(l_kkber2) INDEX 1.
      IF sy-subrc = 0.
        ikkber = l_kkber2-kkber.
        SELECT SINGLE kkbtx INTO kkbtx FROM t014t
         WHERE spras = sy-langu
           AND kkber = ikkber.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  BUSCAR_FBL5N_BSID
*&---------------------------------------------------------------------*
FORM buscar_fbl5n_bsid.

  DATA(ti_t001) = ti_kkber[].
  DATA t_rfpos_aux TYPE TABLE OF rfpos.
  DATA indice LIKE sy-tabix.

  SORT ti_t001 BY bukrs.
  DELETE ADJACENT DUPLICATES FROM ti_t001 COMPARING bukrs.

  CLEAR: t_fbl5n[].
  IF gp_gjahr = sy-datum(4).
    fecha_venc = sy-datum.
  ELSE.
    fecha_venc = gp_gjahr && '1231'.
  ENDIF.

  LOOP AT ti_t001 INTO DATA(wa_t001).

    CLEAR t_rfpos_aux[].
    CALL FUNCTION 'CUSTOMER_OPEN_ITEMS'
      EXPORTING
        bukrs    = wa_t001-bukrs
        kunnr    = so_kunnr
        stida    = fecha_venc
      TABLES
        t_postab = t_rfpos_aux.

    "Quitar las que no esté su kkber
    LOOP AT t_rfpos_aux ASSIGNING FIELD-SYMBOL(<fs>).
      indice = sy-tabix.
      READ TABLE ti_kkber WITH KEY bukrs = <fs>-bukrs kkber = <fs>-kkber TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        DELETE t_rfpos_aux INDEX indice.
        CHECK 1 = 2.
      ENDIF.
      IF <fs>-zzname1 IS INITIAL.
        SELECT SINGLE name1 INTO <fs>-zzname1 FROM kna1
          WHERE kunnr EQ so_kunnr.
      ENDIF.
    ENDLOOP.

    APPEND LINES OF t_rfpos_aux TO t_fbl5n.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CALCULAR_IMPORTES_VIAS_PAGO
*&---------------------------------------------------------------------*
FORM calcular_importes_vias_pago.

  DATA v_netwr    LIKE vbap-netwr.
  DATA v_mwsbp    LIKE vbap-mwsbp.
  DATA v_kwmeng   LIKE vbap-kwmeng.
  DATA ip_szbmeth LIKE jbd14-szbmeth.
  DATA ep_ndays   TYPE i.

  DATA ti_bsid_aux TYPE TABLE OF bsid WITH HEADER LINE.
  DATA ti_bseg_aux TYPE TABLE OF bseg WITH HEADER LINE.

  DATA: BEGIN OF ti_ppds OCCURS 0,
          vbeln LIKE vbak-vbeln,
        END OF ti_ppds.
  DATA: BEGIN OF ti_ppds_imp OCCURS 0,
          netwr LIKE vbap-netwr,
          mwsbp LIKE vbap-mwsbp,
        END OF ti_ppds_imp.
  DATA: BEGIN OF ti_lips OCCURS 0,
          vgbel LIKE lips-vgbel,
          vgpos LIKE lips-vgpos,
          lfimg LIKE lips-lfimg,
        END OF ti_lips.
  DATA: BEGIN OF ti_pret OCCURS 0,
          vbeln LIKE vbak-vbeln,
        END OF ti_pret.
  DATA: BEGIN OF ti_pret_imp OCCURS 0,
          netwr LIKE vbap-netwr,
          mwsbp LIKE vbap-mwsbp,
        END OF ti_pret_imp.
  DATA: BEGIN OF ti_pqsr OCCURS 0,
          vbeln LIKE vbak-vbeln,
        END OF ti_pqsr.
  DATA: BEGIN OF ti_pqsr_imp OCCURS 0,
          netwr LIKE vbap-netwr,
          mwsbp LIKE vbap-mwsbp,
        END OF ti_pqsr_imp.

  CLEAR: ti_ppds[], ti_ppds_imp[], ppds, ti_lips[], ppdf, ti_pret[], ti_pret_imp[], pret, ti_pqsr[], ti_pqsr_imp[], pqsr,
         efim, efim_nvenc, efim_venc, t_fbl5n_impag[], ppdr, ppdr_venc, ppdr_nvenc, cpdr, cpdr_venc, cpdr_nvenc, tpdr,
         tpdr_venc, tpdr_nvenc, gpdr, gpdr_venc, gpdr_nvenc, antic, antic_venc, antic_nvenc, abon, abon_nvenc, abon_venc,
         chpdr, chpdr_venc, chpdr_nvenc, prpv, prpv_venc, prpv_nvenc, chrpv, chrpv_venc, chrpv_nvenc, grpv,
         grpv_venc, grpv_nvenc, ergc, ergc_venc, ergc_nvenc, erad, erad_venc, erad_nvenc, efre, duco, duco_venc, duco_nvenc,
         doer, doep, doer_venc, doer_nvenc, doep_venc, doep_nvenc, ti_bsid_aux[], ti_bseg_aux[], gimp, pdte, pabo, pdte_nvenc, pdte_venc.

* Pedidos Pendientes de Servir
  SELECT vbpa~vbeln INTO TABLE ti_ppds FROM vbpa
    INNER JOIN vbak ON vbak~vbeln = vbpa~vbeln
    FOR ALL ENTRIES IN ti_kkber
    WHERE parvw = 'RG'
      AND vbpa~kunnr = so_kunnr
      AND posnr = '000000'
      AND bukrs_vf IN so_bukrs
      AND vkorg = ti_kkber-vkorg.

  IF ti_ppds[] IS NOT INITIAL.

    SELECT netwr mwsbp INTO TABLE ti_ppds_imp FROM vbap
      INNER JOIN vbup ON vbup~vbeln = vbap~vbeln AND vbup~posnr = vbap~posnr
      FOR ALL ENTRIES IN ti_ppds
      WHERE vbap~vbeln = ti_ppds-vbeln
        AND vbap~abgru = ''
        AND vbup~lfsta = 'A'
        AND vbup~absta = 'A'
        AND vbup~fksaa <> 'C'.

    LOOP AT ti_ppds_imp.
      ppds = ppds + ti_ppds_imp-netwr + ti_ppds_imp-mwsbp.
    ENDLOOP.

    SELECT vgbel vgpos lfimg INTO TABLE ti_lips FROM lips
    INNER JOIN vbup ON vbup~vbeln = lips~vbeln AND vbup~posnr = lips~posnr
    FOR ALL ENTRIES IN ti_ppds
    WHERE lips~vbeln = ti_ppds-vbeln
      AND vbup~wbsta <> 'C'.

    LOOP AT ti_lips.
      CLEAR: v_netwr, v_mwsbp, v_kwmeng.
      SELECT SINGLE netwr mwsbp kwmeng INTO (v_netwr, v_mwsbp, v_kwmeng)
        FROM vbap
        WHERE vbeln = ti_lips-vgbel
          AND posnr = ti_lips-vgpos.
      ppds = ppds + ( ( v_netwr + v_mwsbp ) * ti_lips-lfimg / v_kwmeng ).
    ENDLOOP.

  ENDIF.

  "Pedidos Pendientes de Facturar
  IF ti_ppds[] IS NOT INITIAL.

    CLEAR ti_lips[].

    SELECT vgbel vgpos lfimg INTO TABLE ti_lips FROM lips
    INNER JOIN vbup ON vbup~vbeln = lips~vbeln AND vbup~posnr = lips~posnr
    FOR ALL ENTRIES IN ti_ppds
    WHERE lips~vgbel = ti_ppds-vbeln
      AND vbup~wbsta = 'C'
      AND vbup~fksta = 'A'.

    LOOP AT ti_lips.
      CLEAR: v_netwr, v_mwsbp, v_kwmeng.
      SELECT SINGLE netwr mwsbp kwmeng INTO (v_netwr, v_mwsbp, v_kwmeng)
        FROM vbap
        WHERE vbeln = ti_lips-vgbel
          AND posnr = ti_lips-vgpos
         AND abgru = ''.
      ppdf = ppdf + ( ( v_netwr + v_mwsbp ) * ti_lips-lfimg / v_kwmeng ).
    ENDLOOP.

  ENDIF.

  "Pedidos Retenidos
  SELECT vbpa~vbeln INTO TABLE ti_pret FROM vbpa
    INNER JOIN vbak ON vbak~vbeln = vbpa~vbeln
    INNER JOIN vbuk ON vbuk~vbeln = vbpa~vbeln
    FOR ALL ENTRIES IN ti_kkber
    WHERE parvw = 'RG'
      AND vbpa~kunnr = so_kunnr
      AND posnr = '000000'
      AND bukrs_vf IN so_bukrs
      AND cmgst = 'B'
      AND vkorg = ti_kkber-vkorg.
  IF ti_pret[] IS NOT INITIAL.

    SELECT netwr mwsbp INTO TABLE ti_pret_imp FROM vbap
      FOR ALL ENTRIES IN ti_pret
      WHERE vbap~vbeln = ti_pret-vbeln.

    LOOP AT ti_pret_imp.
      pret = pret + ti_pret_imp-netwr + ti_pret_imp-mwsbp.
    ENDLOOP.

  ENDIF.

  "Pedidos que suman riesgo
  SELECT vbpa~vbeln INTO TABLE ti_pqsr FROM vbpa
    INNER JOIN vbak ON vbak~vbeln = vbpa~vbeln
    INNER JOIN vbuk ON vbuk~vbeln = vbpa~vbeln
    FOR ALL ENTRIES IN ti_kkber
    WHERE parvw = 'RG'
      AND vbpa~kunnr = so_kunnr
      AND posnr = '000000'
      AND bukrs_vf IN so_bukrs
      "AND auart = 'ZTER'
      AND fksak <> 'C'
      AND vkorg = ti_kkber-vkorg.
  IF ti_pqsr[] IS NOT INITIAL.

    SELECT netwr mwsbp INTO TABLE ti_pqsr_imp FROM vbap
      FOR ALL ENTRIES IN ti_pqsr
      WHERE vbap~vbeln = ti_pqsr-vbeln
        AND vbap~cmpnt = 'X'.

    LOOP AT ti_pqsr_imp.
      pqsr = pqsr + ti_pqsr_imp-netwr + ti_pqsr_imp-mwsbp.
    ENDLOOP.

  ENDIF.

  "Todo Aquello cuyo UMSKZ sea SPACE hay que calcular el VCTO
  "En funcion del VTCO de la FBL5N + Dias parametrizados.
  "Si el VCTO calculado es mayor que la fecha Actual, pasara a Impagado.
  LOOP AT t_fbl5n WHERE umskz = space AND bschl <> '11'
    AND bschl <> '14' AND bschl <> '12' AND bschl <> '15'.
    " --> Fecha de Vcto
    CLEAR ti_zssdt306a.
    READ TABLE ti_zssdt306b WITH KEY zlsch = t_fbl5n-zlsch.
    IF sy-subrc = 0.
      READ TABLE ti_zssdt306a WITH KEY codigo = ti_zssdt306b-codigo.
      IF ti_zssdt306a-dias IS INITIAL.
        READ TABLE ti_zssdt306a WITH KEY codigo = 'IMPG'.
      ENDIF.
    ELSE.
      READ TABLE ti_zssdt306a WITH KEY codigo = 'IMPG'.
    ENDIF.
    IF ti_zssdt306a-dias IS NOT INITIAL.
      CLEAR ep_ndays.
      CALL FUNCTION 'ISB_DAYS_BETWEEN_TWO_DATES'
        EXPORTING
          ip_date_from = t_fbl5n-faedt
          ip_date_to   = sy-datum
          ip_szbmeth   = ip_szbmeth
        IMPORTING
          ep_ndays     = ep_ndays.
      IF ep_ndays > 0 AND ep_ndays > ti_zssdt306a-dias.
        efim = efim + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          efim_nvenc = efim_nvenc + t_fbl5n-dmshb.
        ELSE.
          efim_venc = efim_venc + t_fbl5n-dmshb.
        ENDIF.
        APPEND t_fbl5n TO t_fbl5n_impag.
        DELETE t_fbl5n.
      ENDIF.
    ENDIF.
  ENDLOOP.

  IF ti_zssds306a[] IS INITIAL.
    PERFORM anticipos_efectos_abonos.
  ENDIF.

  "Pagarés pendientes de Recibir
  LOOP AT t_fbl5n WHERE umskz = space AND ( zlsch = 'U' OR zlsch = '3' )
                    AND blart <> 'DB' AND bschl <> '11' AND bschl <> '14' AND bschl <> '15'.
    CASE t_fbl5n-shkzg.
      WHEN 'S'."+
        ppdr = ppdr + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          ppdr_nvenc = ppdr_nvenc + t_fbl5n-dmshb.
        ELSE.
          ppdr_venc = ppdr_venc + t_fbl5n-dmshb.
        ENDIF.
      WHEN 'H'."-
        ppdr = ppdr - t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          ppdr_nvenc = ppdr_nvenc - t_fbl5n-dmshb.
        ELSE.
          ppdr_venc = ppdr_venc - t_fbl5n-dmshb.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  "Confirming pendientes de Recibir
  LOOP AT t_fbl5n WHERE umskz = space AND zlsch = 'O'
                  AND blart <> 'DB' AND bschl <> '11' AND bschl <> '14' AND bschl <> '15'.
    CASE t_fbl5n-shkzg.
      WHEN 'S'."+
        cpdr = cpdr + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          cpdr_nvenc = cpdr_nvenc + t_fbl5n-dmshb.
        ELSE.
          cpdr_venc = cpdr_venc + t_fbl5n-dmshb.
        ENDIF.
      WHEN 'H'."-
        cpdr = cpdr - t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          cpdr_nvenc = cpdr_nvenc - t_fbl5n-dmshb.
        ELSE.
          cpdr_venc = cpdr_venc - t_fbl5n-dmshb.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  "Transferencia pendiente de Recibir
  LOOP AT t_fbl5n WHERE umskz = space AND ( zlsch = 'B' OR zlsch = '1' )
                  AND blart <> 'DB' AND bschl <> '11'  AND bschl <> '14' AND bschl <> '15'.
    CASE t_fbl5n-shkzg.
      WHEN 'S'."+
        tpdr = tpdr + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          tpdr_nvenc = tpdr_nvenc + t_fbl5n-dmshb.
        ELSE.
          tpdr_venc = tpdr_venc + t_fbl5n-dmshb.
        ENDIF.
      WHEN 'H'."-
        tpdr = tpdr - t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          tpdr_nvenc = tpdr_nvenc - t_fbl5n-dmshb.
        ELSE.
          tpdr_venc = tpdr_venc - t_fbl5n-dmshb.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  "Giro domiciliado pendiente de Recibir
  LOOP AT t_fbl5n WHERE umskz = space AND zlsch = 'D'
                    AND blart <> 'DB' AND bschl <> '11'  AND bschl <> '14' AND bschl <> '15'.
    CASE t_fbl5n-shkzg.
      WHEN 'S'."+
        gpdr = gpdr + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          gpdr_nvenc = gpdr_nvenc + t_fbl5n-dmshb.
        ELSE.
          gpdr_venc = gpdr_venc + t_fbl5n-dmshb.
        ENDIF.
      WHEN 'H'."-
        gpdr = gpdr - t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          gpdr_nvenc = gpdr_nvenc - t_fbl5n-dmshb.
        ELSE.
          gpdr_venc = gpdr_venc - t_fbl5n-dmshb.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  "Anticipos
  LOOP AT t_fbl5n WHERE umskz = 'A'.
    antic = antic + t_fbl5n-dmshb.
    IF fecha_venc < t_fbl5n-faedt.
      antic_nvenc = antic_nvenc + t_fbl5n-dmshb.
    ELSE.
      antic_venc = antic_venc + t_fbl5n-dmshb.
    ENDIF.
    DELETE t_fbl5n.
  ENDLOOP.
*  LOOP AT t_fbl5n WHERE bschl = '14' OR bschl = '15'.
*    antic = antic + t_fbl5n-dmshb.
*    IF fecha_venc < t_fbl5n-faedt.
*      antic_nvenc = antic_nvenc + t_fbl5n-dmshb.
*    ELSE.
*      antic_venc = antic_venc + t_fbl5n-dmshb.
*    ENDIF.
*    DELETE t_fbl5n.
*  ENDLOOP.

  "Abonos
  LOOP AT t_fbl5n WHERE umskz = space AND bschl = '11'.
    abon = abon + t_fbl5n-dmshb.
    IF fecha_venc < t_fbl5n-faedt.
      abon_nvenc = abon_nvenc + t_fbl5n-dmshb.
    ELSE.
      abon_venc = abon_venc + t_fbl5n-dmshb.
    ENDIF.
    DELETE t_fbl5n.
  ENDLOOP.

  "Cheque pendientes de Recibir
  LOOP AT t_fbl5n WHERE umskz = space AND ( zlsch = 'S' OR zlsch = '2' )
                  AND blart <> 'DB' AND bschl <> '11'.
    CASE t_fbl5n-shkzg.
      WHEN 'S'."+
        chpdr = chpdr + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          chpdr_nvenc = chpdr_nvenc + t_fbl5n-dmshb.
        ELSE.
          chpdr_venc = chpdr_venc + t_fbl5n-dmshb.
        ENDIF.
      WHEN 'H'."-
        chpdr = chpdr - t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          chpdr_nvenc = chpdr_nvenc - t_fbl5n-dmshb.
        ELSE.
          chpdr_venc = chpdr_venc - t_fbl5n-dmshb.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  "Pagarés recibidos pendientes de Vencer
  LOOP AT t_fbl5n WHERE umskz = 'U' AND wverw = space."AND ( zlsch = 'U' OR zlsch = '3' )
    CASE t_fbl5n-shkzg.
      WHEN 'S'."+
        prpv = prpv + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          prpv_nvenc = prpv_nvenc + t_fbl5n-dmshb.
        ELSE.
          prpv_venc = prpv_venc + t_fbl5n-dmshb.
        ENDIF.
      WHEN 'H'."-
        prpv = prpv - t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          prpv_nvenc = prpv_nvenc - t_fbl5n-dmshb.
        ELSE.
          prpv_venc = prpv_venc - t_fbl5n-dmshb.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  "Cheque recibidos pendientes de Vencer
  LOOP AT t_fbl5n WHERE umskz = 'S' AND wverw = space."AND zlsch = 'S'
    CASE t_fbl5n-shkzg.
      WHEN 'S'."+
        chrpv = chrpv + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          chrpv_nvenc = chrpv_nvenc + t_fbl5n-dmshb.
        ELSE.
          chrpv_venc = chrpv_venc + t_fbl5n-dmshb.
        ENDIF.
      WHEN 'H'."-
        chrpv = chrpv - t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          chrpv_nvenc = chrpv_nvenc - t_fbl5n-dmshb.
        ELSE.
          chrpv_venc = chrpv_venc - t_fbl5n-dmshb.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  "Giro domiciliado recibidos pendientes de Vencer
  LOOP AT t_fbl5n WHERE umskz = 'D' AND wverw = space."AND zlsch = 'D'
    CASE t_fbl5n-shkzg.
      WHEN 'S'."+
        grpv = grpv + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          grpv_nvenc = grpv_nvenc + t_fbl5n-dmshb.
        ELSE.
          grpv_venc = grpv_venc + t_fbl5n-dmshb.
        ENDIF.
      WHEN 'H'."-
        grpv = grpv - t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          grpv_nvenc = grpv_nvenc - t_fbl5n-dmshb.
        ELSE.
          grpv_venc = grpv_venc - t_fbl5n-dmshb.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  "Efectos remesados en Gestión de Cobro
  LOOP AT t_fbl5n WHERE umskz <> space AND wverw = 'I'.
    CASE t_fbl5n-shkzg.
      WHEN 'S'."+
        ergc = ergc + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          ergc_nvenc = ergc_nvenc + t_fbl5n-dmshb.
        ELSE.
          ergc_venc = ergc_venc + t_fbl5n-dmshb.
        ENDIF.
      WHEN 'H'."-
        ergc = ergc - t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          ergc_nvenc = ergc_nvenc - t_fbl5n-dmshb.
        ELSE.
          ergc_venc = ergc_venc - t_fbl5n-dmshb.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  "Efectos remesados al Descuento
  LOOP AT t_fbl5n WHERE umskz <> space AND wverw = 'D'.
    CASE t_fbl5n-shkzg.
      WHEN 'S'."+
        erad = erad + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          erad_nvenc = erad_nvenc + t_fbl5n-dmshb.
        ELSE.
          erad_venc = erad_venc + t_fbl5n-dmshb.
        ENDIF.
      WHEN 'H'."-
        erad = erad - t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          erad_nvenc = erad_nvenc - t_fbl5n-dmshb.
        ELSE.
          erad_venc = erad_venc - t_fbl5n-dmshb.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  "Efectos Impagados
  LOOP AT t_fbl5n WHERE umskz = 'I' OR umskz = 'J'."'Y'.
    efim = efim + t_fbl5n-dmshb.
    IF fecha_venc < t_fbl5n-faedt.
      efim_nvenc = efim_nvenc + t_fbl5n-dmshb.
    ELSE.
      efim_venc = efim_venc + t_fbl5n-dmshb.
    ENDIF.
    APPEND t_fbl5n TO t_fbl5n_impag.
    DELETE t_fbl5n.
  ENDLOOP.

  "Efectos Reclamados
  LOOP AT t_fbl5n WHERE umskz = 'R'.
    CASE t_fbl5n-shkzg.
      WHEN 'S'."+
        efre = efre + t_fbl5n-dmshb.
      WHEN 'H'."-
        efre = efre - t_fbl5n-dmshb.
    ENDCASE.
  ENDLOOP.
  "Dudoso Cobro
  LOOP AT t_fbl5n WHERE umskz = 'D'."'E'.
    duco = duco + t_fbl5n-dmshb.
    IF fecha_venc < t_fbl5n-faedt.
      duco_nvenc = duco_nvenc + t_fbl5n-dmshb.
    ELSE.
      duco_venc = duco_venc + t_fbl5n-dmshb.
    ENDIF.
    DELETE t_fbl5n.
  ENDLOOP.

  "Documentacion Exportacion PDTES y Remesados
  DATA l_zexp_remesas TYPE zexp_remesas.
  LOOP AT t_fbl5n WHERE zlsch = '4' OR zlsch = '5' OR zlsch = '6'.
    SELECT SINGLE * INTO l_zexp_remesas FROM zexp_remesas
      WHERE bukrs = t_fbl5n-bukrs
        AND belnr = t_fbl5n-belnr
        AND gjahr = t_fbl5n-gjahr
        AND buzei = t_fbl5n-buzei.
    IF sy-subrc = 0.
      IF l_zexp_remesas-estado = '0'.
        CASE t_fbl5n-shkzg.
          WHEN 'S'."+
            doep = doep + t_fbl5n-dmshb.
            IF fecha_venc < t_fbl5n-faedt.
              doep_nvenc = doep_nvenc + t_fbl5n-dmshb.
            ELSE.
              doep_venc = doep_venc + t_fbl5n-dmshb.
            ENDIF.
          WHEN 'H'."-
            doep = doep - t_fbl5n-dmshb.
            IF fecha_venc < t_fbl5n-faedt.
              doep_nvenc = doep_nvenc - t_fbl5n-dmshb.
            ELSE.
              doep_venc = doep_venc - t_fbl5n-dmshb.
            ENDIF.
        ENDCASE.
      ELSEIF l_zexp_remesas-estado = '1'.
        CASE t_fbl5n-shkzg.
          WHEN 'S'."+
            doer = doer + t_fbl5n-dmshb.
            IF fecha_venc < t_fbl5n-faedt.
              doer_nvenc = doer_nvenc + t_fbl5n-dmshb.
            ELSE.
              doer_venc = doer_venc + t_fbl5n-dmshb.
            ENDIF.
          WHEN 'H'."-
            doer = doer - t_fbl5n-dmshb.
            IF fecha_venc < t_fbl5n-faedt.
              doer_nvenc = doer_nvenc - t_fbl5n-dmshb.
            ELSE.
              doer_venc = doer_venc - t_fbl5n-dmshb.
            ENDIF.
        ENDCASE.
      ENDIF.
    ENDIF.
  ENDLOOP.

  "Gastos Impagados
*  SELECT * INTO TABLE ti_bsid_aux FROM bsid
*    FOR ALL ENTRIES IN ti_kkber
*    WHERE bukrs IN so_bukrs
*      AND blart = 'DI'
*      AND kunnr = so_kunnr
*      AND bschl = '09'
*      AND umskz = 'Y'
*      AND kkber = ti_kkber-kkber.
*  IF ti_bsid_aux[] IS NOT INITIAL.
*    SELECT * INTO TABLE ti_bseg_aux FROM bseg FOR ALL ENTRIES IN ti_bsid_aux
*      WHERE gjahr = ti_bsid_aux-gjahr
*        AND belnr = ti_bsid_aux-belnr
*        "AND buzei = ti_bsid_aux-buzei
*        AND bukrs = ti_bsid_aux-bukrs
*        AND hkont = '6260000001'.
*  ENDIF.
*
*  LOOP AT ti_bseg_aux.
*    gimp = gimp + ti_bseg_aux-dmbtr.
*  ENDLOOP.

*--- Cartera de Cheques / Pagares / Letras aceptadas / Descuento
  LOOP AT t_fbl5n
    WHERE ( umskz = 'L'
      OR umskz = 'D'
      OR umskz = 'S'
      OR umskz = 'U' )
      AND ( augbl IS INITIAL OR augdt >= fecha_venc )
      AND gjahr <= gp_gjahr.
    DELETE t_fbl5n.
  ENDLOOP.

  LOOP AT t_fbl5n
 WHERE ( umskz = 'E'
         OR umskz = 'G'
         OR umskz = 'H'
         OR umskz = 'K'
         OR umskz = 'L'
         OR umskz = 'R'
         OR umskz = 'T'
         OR umskz = 'W'
         OR umskz = 'X' )
    AND ( augbl IS INITIAL OR augdt >= fecha_venc )
       AND gjahr <= gp_gjahr.
    DELETE t_fbl5n.
  ENDLOOP.

  LOOP AT t_fbl5n.
    "JVM - ini - Si son apuntes estadísticos del desarrollo ZSFID006 no deben mostrarse como pendiente, sino como dudosos
    CASE t_fbl5n-shkzg.
      WHEN 'S'.
        pdte = pdte + t_fbl5n-dmshb.
        IF fecha_venc < t_fbl5n-faedt.
          pdte_nvenc = pdte_nvenc + t_fbl5n-dmshb.
        ELSE.
          pdte_venc = pdte_venc + t_fbl5n-dmshb.
        ENDIF.
      WHEN 'H'."-
        IF t_fbl5n-bschl = '15'.
          pdte = pdte + t_fbl5n-dmshb.
          IF fecha_venc < t_fbl5n-faedt.
            pdte_nvenc = pdte_nvenc + t_fbl5n-dmshb.
          ELSE.
            pdte_venc = pdte_venc + t_fbl5n-dmshb.
          ENDIF.
        ELSE.
          pdte = pdte - t_fbl5n-dmshb.
          IF fecha_venc < t_fbl5n-faedt.
            pdte_nvenc = pdte_nvenc - t_fbl5n-dmshb.
          ELSE.
            pdte_venc = pdte_venc - t_fbl5n-dmshb.
          ENDIF.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  pabo = abon.

  PERFORM calcular_tabla_totales.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ANTICIPOS_EFECTOS_ABONOS
*&---------------------------------------------------------------------*
FORM anticipos_efectos_abonos.

*  DATA: ti_t001 TYPE TABLE OF t001 WITH HEADER LINE.
  DATA t_rfpos TYPE TABLE OF rfpos WITH HEADER LINE.

  CLEAR ti_zssds306a[].

  t_rfpos[] = t_fbl5n[].
* Anticipos
  LOOP AT t_rfpos WHERE umskz = 'A'.
    MOVE-CORRESPONDING t_rfpos TO ti_zssds306a.
    ti_zssds306a-texto = 'ANTICIPOS'.
    APPEND ti_zssds306a.
  ENDLOOP.
  LOOP AT t_rfpos WHERE bschl = '14' OR bschl = '15'.
    MOVE-CORRESPONDING t_rfpos TO ti_zssds306a.
    ti_zssds306a-texto = 'ANTICIPOS'.
    APPEND ti_zssds306a.
  ENDLOOP.
* Efectos
*  LOOP AT t_rfpos WHERE umskz = 'D' OR umskz = 'L' OR umskz = 'S' OR umskz = 'U'.
*    MOVE-CORRESPONDING t_rfpos TO ti_zssds306a.
*    ti_zssds306a-texto = 'EFECTOS'.
*    APPEND ti_zssds306a.
*  ENDLOOP.
* Abonos
  LOOP AT t_rfpos WHERE bschl = '11'.
    MOVE-CORRESPONDING t_rfpos TO ti_zssds306a.
    ti_zssds306a-texto = 'ABONOS'.
    APPEND ti_zssds306a.
  ENDLOOP.

  LOOP AT t_rfpos
    WHERE ( umskz = 'E'
      OR umskz = 'G'
      OR umskz = 'H'
      OR umskz = 'K'
      OR umskz = 'L'
      OR umskz = 'R'
      OR umskz = 'T'
      OR umskz = 'W'
      OR umskz = 'X' ).
    "AND augbl IS INITIAL
    "AND gjahr <= gp_gjahr.
    MOVE-CORRESPONDING t_rfpos TO ti_zssds306a.
    ti_zssds306a-texto = 'EFECTOS'.
    APPEND ti_zssds306a.
  ENDLOOP.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CALCULAR_TABLA_TOTALES
*&---------------------------------------------------------------------*
FORM calcular_tabla_totales.

* Creamos la tabla de TOTALES
  CLEAR: ti_zssdt306_tot[].

*  ti_zssdt306_tot-tipo = 'FI'.
*  ti_zssdt306_tot-concepto = 'PDTE.RECIBIR'.
*  ti_zssdt306_tot-novencido = tpdr_nvenc + cpdr_nvenc + chpdr_nvenc + ppdr_nvenc + gpdr_nvenc.
*  ti_zssdt306_tot-vencido = tpdr_venc + cpdr_venc + chpdr_venc + ppdr_venc + gpdr_venc.
*  ti_zssdt306_tot-total = ti_zssdt306_tot-novencido + ti_zssdt306_tot-vencido.
*  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

*  ti_zssdt306_tot-tipo = 'FI'.
*  ti_zssdt306_tot-concepto = 'RECIBIDO'.
*  ti_zssdt306_tot-novencido = chrpv_nvenc + prpv_nvenc + grpv_nvenc.
*  ti_zssdt306_tot-vencido = chrpv_venc + prpv_venc + grpv_venc.
*  ti_zssdt306_tot-total = ti_zssdt306_tot-novencido + ti_zssdt306_tot-vencido.
*  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

  ti_zssdt306_tot-tipo = 'FI'.
  ti_zssdt306_tot-concepto = 'RECIBIDO'.
  ti_zssdt306_tot-novencido = pdte_nvenc."chrpv_nvenc + prpv_nvenc + grpv_nvenc.
  ti_zssdt306_tot-vencido = pdte_venc." + prpv_venc + grpv_venc.
  ti_zssdt306_tot-total = ti_zssdt306_tot-novencido + ti_zssdt306_tot-vencido.
  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

*  ti_zssdt306_tot-tipo = 'FI'.
*  ti_zssdt306_tot-concepto = 'DOC.EXPORT.PDTE.'.
*  ti_zssdt306_tot-novencido = doep_nvenc.
*  ti_zssdt306_tot-vencido = doep_venc.
*  ti_zssdt306_tot-total = ti_zssdt306_tot-novencido + ti_zssdt306_tot-vencido.
*  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

  ti_zssdt306_tot-tipo = 'FI'.
  ti_zssdt306_tot-concepto = 'EFECTO'."'REMESADO'.
  ti_zssdt306_tot-novencido = doer_nvenc + ergc_nvenc + erad_nvenc + cartera.
  ti_zssdt306_tot-vencido = doer_venc + ergc_venc + erad_venc.
  ti_zssdt306_tot-total = ti_zssdt306_tot-novencido + ti_zssdt306_tot-vencido.
  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

  ti_zssdt306_tot-tipo = 'FI'.
  ti_zssdt306_tot-concepto = 'DUDOSO COBRO'.
  ti_zssdt306_tot-novencido = duco_nvenc.
  ti_zssdt306_tot-vencido = duco_venc.
  ti_zssdt306_tot-total = ti_zssdt306_tot-novencido + ti_zssdt306_tot-vencido.
  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

  ti_zssdt306_tot-tipo = 'FI'.
  ti_zssdt306_tot-concepto = 'IMPAGADO'.
  ti_zssdt306_tot-novencido = efim_nvenc.
  ti_zssdt306_tot-vencido = efim_venc.
  ti_zssdt306_tot-total = ti_zssdt306_tot-novencido + ti_zssdt306_tot-vencido.
  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

  ti_zssdt306_tot-tipo = 'FI'.
  ti_zssdt306_tot-concepto = 'ANTICIPO'.
  ti_zssdt306_tot-novencido = antic_nvenc.
  ti_zssdt306_tot-vencido = antic_venc.
  ti_zssdt306_tot-total = ti_zssdt306_tot-novencido + ti_zssdt306_tot-vencido.
  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

  ti_zssdt306_tot-tipo = 'FI'.
  ti_zssdt306_tot-concepto = 'ABONO'.
  ti_zssdt306_tot-novencido = abon_nvenc.
  ti_zssdt306_tot-vencido = abon_venc.
  ti_zssdt306_tot-total = ti_zssdt306_tot-novencido + ti_zssdt306_tot-vencido.
  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

  ti_zssdt306_tot-tipo = 'GE'.
  ti_zssdt306_tot-concepto = 'ENTREGAS PDTE.'.
  ti_zssdt306_tot-novencido = entrega.
  ti_zssdt306_tot-vencido = 0.
  ti_zssdt306_tot-total = entrega.
  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

  ti_zssdt306_tot-tipo = 'GE'.
  ti_zssdt306_tot-concepto = 'FACTURAS PDTES. DE CONTABILIZAR'.
  ti_zssdt306_tot-novencido = factura.
  ti_zssdt306_tot-vencido = 0.
  ti_zssdt306_tot-total = factura.
  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

  ti_zssdt306_tot-tipo = 'PE'.
  ti_zssdt306_tot-concepto = 'PEDIDOS'.
  ti_zssdt306_tot-novencido = pedido.
  ti_zssdt306_tot-vencido = 0.
  ti_zssdt306_tot-total = pedido.
  APPEND ti_zssdt306_tot. CLEAR ti_zssdt306_tot.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CLEARDATA
*&---------------------------------------------------------------------*
FORM cleardata.

  CLEAR: data1,              " Datos de crédito (KNKK)
         data2,              " Pedidos pendientes (S066)
         data3,              " Entregas / Facturas (S067)
         data4.              " Contabilidad (BSEG)

  CLEAR: fact1, abon1, net1, fact0, abon0, net0, fact1s, fact0s, abon1s, abon0s,
         net0s, net1s, dsvf, dsva, dsvn, excdo, grado, fact2, fact3, abon2, abon3,
         net2, net3, fact2s, fact3s, abon2s, abon3s, net2s, net3s,
         cartera, impago, deuda, vencido, no_vencido,
         ratio, limite, dispto, dispble, ctrl_impag,
         pedido, ped_bloq, entrega, factura, comercial, interno.

  CLEAR: recp, recp1, recp2, recp3, recp4, recp5, recp6,
         gsrp, gsrp1, gsrp2, gsrp3, gsrp4, gsrp5, gsrp6,
         grdp, grdp1, grdp2, grdp3, grdp4, grdp5, grdp6,
         totp, totp1, totp2, totp3, totp4, totp5, totp6,

         reca, reca1, reca2, reca3, reca4, reca5, reca6,
         gsra, gsra1, gsra2, gsra3, gsra4, gsra5, gsra6,
         grda, grda1, grda2, grda3, grda4, grda5, grda6,
         tota, tota1, tota2, tota3, tota4, tota5, tota6,
         total, vencido, no_vencido, gd_sfael, gd_snfae,

         recc, recc0, recc1,
         girc, girc0, girc1,
         chec, chec0, chec1,
         pagc, pagc0, pagc1.

ENDFORM.

*&--------------------------------------------------------------------
*&      Form  load_data_into_grid
*&--------------------------------------------------------------------
FORM load_data_into_grid TABLES tabla       TYPE STANDARD TABLE
                         USING contenedor  TYPE REF TO cl_gui_custom_container
                               nombre_cont TYPE        scrfname
                               variant     LIKE        disvariant
                               estruc      LIKE        dd02l-tabname
                     CHANGING  alv         TYPE REF TO cl_gui_alv_grid
                               layout      TYPE        lvc_s_layo
                               it_fieldcat TYPE        lvc_t_fcat
                               excludin    TYPE        ui_functions.

  IF alv IS INITIAL.
    IF cl_gui_alv_grid=>offline( ) IS INITIAL.

      IF estruc = 'ZSSDT306A_DIARIO' OR estruc = 'ZSSDT306C_ASEGCL'.
        IF eventos IS INITIAL.
          CREATE OBJECT eventos.
        ENDIF.
      ENDIF.

      CREATE OBJECT contenedor
        EXPORTING
          container_name = nombre_cont
        EXCEPTIONS
          OTHERS         = 1.

      CREATE OBJECT alv
        EXPORTING
          i_parent = contenedor
        EXCEPTIONS
          OTHERS   = 1.

      CALL METHOD alv->register_edit_event
        EXPORTING
          i_event_id = cl_gui_alv_grid=>mc_evt_modified
        EXCEPTIONS
          error      = 1
          OTHERS     = 2.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

    ENDIF.

    PERFORM preparefieldcatalog USING    estruc
                                CHANGING it_fieldcat.
    PERFORM preparelayout       CHANGING layout.
    PERFORM rellenar_toolbar    CHANGING excludin.

    IF estruc = 'ZSSDT306A_DIARIO'.
      SET HANDLER eventos->data_changed_finished FOR alv.
    ENDIF.
    IF estruc = 'ZSSDT306C_ASEGCL'.
      SET HANDLER eventos->data_changed_finished_aseg FOR alv.
    ENDIF.
    IF estruc = 'ZSSDT306A_DIARIO'.
      SET HANDLER eventos->data_changed_finished_diario FOR alv.
    ENDIF.


    CALL METHOD alv->set_table_for_first_display
      EXPORTING
        is_variant           = variant
        i_save               = 'A'
        is_layout            = layout
        it_toolbar_excluding = excludin
      CHANGING
        it_outtab            = tabla[]
        it_fieldcatalog      = it_fieldcat
      EXCEPTIONS
        OTHERS               = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSE.
    DATA: BEGIN OF ls_stable,
            row TYPE c,
            col TYPE c,
          END OF ls_stable.

    ls_stable-row = 'X'.
    ls_stable-col = 'X'.

    CALL METHOD alv->refresh_table_display
      EXPORTING
        is_stable = ls_stable.
  ENDIF.

ENDFORM.                    "load_data_into_grid

*&--------------------------------------------------------------------
*&      Form  preparefieldcatalog
*&--------------------------------------------------------------------
FORM preparefieldcatalog USING    estruc       LIKE dd02l-tabname
                         CHANGING it_fieldcat1 TYPE lvc_t_fcat.

  DATA: l_fieldcat TYPE LINE OF lvc_t_fcat.

  REFRESH it_fieldcat1.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active        = 'X'
      i_structure_name       = estruc
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_fieldcat1[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  IF estruc = 'ZSSDT306A_DIARIO'.
    LOOP AT it_fieldcat1 INTO l_fieldcat.
      CASE l_fieldcat-fieldname.
        WHEN 'KKBER'.
          l_fieldcat-edit = 'X'.
        WHEN 'BUKRS'.
          l_fieldcat-edit = 'X'.
        WHEN 'MOTIV'.
          l_fieldcat-edit = 'X'.
          l_fieldcat-coltext = 'Motivo'.
        WHEN 'CONTE'.
          l_fieldcat-edit = 'X'.
          l_fieldcat-coltext = 'Contestación'.
        WHEN 'FPROX'.
          l_fieldcat-coltext = 'F.Próxima'.
          l_fieldcat-edit = 'X'.
      ENDCASE.
      MODIFY it_fieldcat1 FROM l_fieldcat.
    ENDLOOP.
  ENDIF.
  IF estruc = 'ZSSDT306C_ASEGCL'.
    LOOP AT it_fieldcat1 INTO l_fieldcat.
      CASE l_fieldcat-fieldname.
        WHEN 'KKBER'.
          l_fieldcat-edit = 'X'.
        WHEN 'ZCOBER'.
          l_fieldcat-edit = 'X'.
        WHEN 'DBRTG'.
          l_fieldcat-coltext = 'Aseguradora'.
        WHEN 'BEGDA'.
          l_fieldcat-edit = 'X'.
          "l_fieldcat-coltext = 'Ult.Verif.Ext'.
        WHEN 'ENDDA'.
          l_fieldcat-edit = 'X'.
          "l_fieldcat-coltext = 'Monitoring'.
        WHEN 'CRSOL'.
          l_fieldcat-coltext = 'Cr.Sol.'.
          l_fieldcat-edit = 'X'.
        WHEN 'CRCON'.
          l_fieldcat-coltext = 'Cr.Conc.'.
          l_fieldcat-edit = 'X'.
        WHEN 'RIESA'.
          l_fieldcat-coltext = 'Riesgo Asegurable'.
          l_fieldcat-edit = 'X'.
        WHEN 'RIESN'.
          l_fieldcat-coltext = 'Riesgo No Concedido'.
          l_fieldcat-edit = 'X'.
        WHEN 'PORCE'.
          l_fieldcat-coltext = 'Riesgo'.
        WHEN 'KUNNR'.
          l_fieldcat-edit = 'X'.
        WHEN 'KKBER'.
          l_fieldcat-edit = 'X'.
        WHEN 'KDGRP'.
          l_fieldcat-edit = 'X'.
        WHEN 'OBSER'.
          l_fieldcat-edit = 'X'.
        WHEN 'RATE'.
          l_fieldcat-edit = 'X'.
        WHEN OTHERS.
      ENDCASE.
      MODIFY it_fieldcat1 FROM l_fieldcat.
    ENDLOOP.
  ENDIF.

ENDFORM.                    "preparefieldcatalog

*&--------------------------------------------------------------------
*&      Form  preparelayout
*---------------------------------------------------------------------
FORM preparelayout CHANGING cwa_layout TYPE lvc_s_layo.

  cwa_layout-zebra    = 'X'.
  cwa_layout-sel_mode = 'D'.

ENDFORM.                    "preparelayout

*&--------------------------------------------------------------------
*&      Form  rellenar_toolbar
*&--------------------------------------------------------------------
FORM rellenar_toolbar CHANGING excluirtool TYPE ui_functions.

  REFRESH: excluirtool.

ENDFORM.                    "rellenar_toolbar

*&---------------------------------------------------------------------*
*&      Form  GUARDAR_ASEG
*&---------------------------------------------------------------------*
FORM guardar_aseg.

  DATA: ti_aseg_aux TYPE TABLE OF zssdt306c_asegcl WITH HEADER LINE.
  DATA: posnr TYPE posnr.
  DATA: tabix LIKE sy-tabix.

  LOOP AT ti_vkorg INTO l_vkorg.
    CLEAR: posnr, ti_aseg_aux[].

    SELECT MAX( posnr ) INTO posnr FROM zssdt306c_asegcl
      WHERE kunnr = so_kunnr
        AND kkber = l_vkorg-kkber.

    SELECT * INTO TABLE ti_aseg_aux FROM zssdt306c_asegcl
      WHERE kunnr = so_kunnr
        AND kkber = l_vkorg-kkber.

    LOOP AT ti_zssdt306c_asegcl WHERE posnr IS NOT INITIAL AND kkber = l_vkorg-kkber.
      READ TABLE ti_aseg_aux WITH KEY kunnr = ti_zssdt306c_asegcl-kunnr
                                        kkber = ti_zssdt306c_asegcl-kkber
                                        posnr = ti_zssdt306c_asegcl-posnr.
      IF sy-subrc = 0.
        tabix = sy-tabix.
        DELETE ti_aseg_aux INDEX tabix.
        MOVE-CORRESPONDING ti_zssdt306c_asegcl TO ti_aseg_aux.
        MODIFY zssdt306c_asegcl FROM ti_aseg_aux.
      ENDIF.
    ENDLOOP.

    LOOP AT ti_zssdt306c_asegcl WHERE posnr IS INITIAL AND kkber = l_vkorg-kkber.
      posnr = posnr + 1.
      ti_zssdt306c_asegcl-mandt = sy-mandt.
      ti_zssdt306c_asegcl-kunnr = so_kunnr.
      ti_zssdt306c_asegcl-posnr = posnr.
      "ti_zssdt306c_asegcl-kkber = ikkber.
      INSERT zssdt306c_asegcl FROM ti_zssdt306c_asegcl.
      MODIFY ti_zssdt306c_asegcl.
    ENDLOOP.
    LOOP AT ti_aseg_aux.
      UPDATE zssdt306c_asegcl SET loekz = 'X'
      WHERE kunnr = ti_aseg_aux-kunnr
        AND kkber = ti_aseg_aux-kkber
        AND posnr = ti_aseg_aux-posnr.
    ENDLOOP.
  ENDLOOP.
  COMMIT WORK AND WAIT.

  MESSAGE s368(00) WITH 'Aseguradora Guardada OK'.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GUARDAR_DIARIO
*&---------------------------------------------------------------------*
FORM guardar_diario.

  DATA: ti_diario_aux TYPE TABLE OF zssdt306a_diario WITH HEADER LINE.
  DATA: posnr TYPE posnr.
  DATA: tabix LIKE sy-tabix.

  LOOP AT ti_vkorg INTO l_vkorg.
    CLEAR posnr.

    SELECT MAX( posnr ) INTO posnr FROM zssdt306a_diario
      WHERE kunnr = so_kunnr
        AND kkber = l_vkorg-kkber.

    SELECT * INTO TABLE ti_diario_aux FROM zssdt306a_diario
      WHERE kunnr = so_kunnr
        AND bukrs IN so_bukrs
        AND kkber = l_vkorg-kkber.

    LOOP AT ti_zssdt306a_diario WHERE posnr IS NOT INITIAL AND kkber = l_vkorg-kkber.
      READ TABLE ti_diario_aux WITH KEY kunnr = ti_zssdt306a_diario-kunnr
                                        bukrs = ti_zssdt306a_diario-bukrs
                                        posnr = ti_zssdt306a_diario-posnr
                                        kkber = l_vkorg-kkber.
      IF sy-subrc = 0.
        tabix = sy-tabix.
        DELETE ti_diario_aux INDEX tabix.

        MOVE-CORRESPONDING ti_zssdt306a_diario TO ti_diario_aux.
        MODIFY zssdt306a_diario FROM ti_diario_aux.

      ENDIF.
    ENDLOOP.
    LOOP AT ti_zssdt306a_diario WHERE posnr IS INITIAL AND kkber = l_vkorg-kkber.
      posnr = posnr + 1.
      ti_zssdt306a_diario-mandt = sy-mandt.
      ti_zssdt306a_diario-kunnr = so_kunnr.
      ti_zssdt306a_diario-posnr = posnr.
      ti_zssdt306a_diario-fecha = sy-datum.
      ti_zssdt306a_diario-hora = sy-uzeit.
      ti_zssdt306a_diario-uname = sy-uname.
      INSERT zssdt306a_diario FROM ti_zssdt306a_diario.
      MODIFY ti_zssdt306a_diario.
    ENDLOOP.
    LOOP AT ti_diario_aux.
      UPDATE zssdt306a_diario SET loekz = 'X'
      WHERE kunnr = ti_diario_aux-kunnr
        AND bukrs = ti_diario_aux-bukrs
        AND kkber = ti_diario_aux-kkber
        AND posnr = ti_diario_aux-posnr.
    ENDLOOP.
  ENDLOOP.
  COMMIT WORK AND WAIT.
  MESSAGE s368(00) WITH 'Diario Guardado OK'.

ENDFORM.
