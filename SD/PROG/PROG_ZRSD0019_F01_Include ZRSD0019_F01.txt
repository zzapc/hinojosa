*&---------------------------------------------------------------------*
*&  Include           ZRSD0019_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos .
  TYPES: BEGIN OF tipo_entrega,
           vbeln          TYPE likp-vbeln,
           vkorg          TYPE likp-vkorg,
           vstel          TYPE likp-vstel,
           lfart          TYPE likp-lfart,
           lfdat          TYPE likp-lfdat,
           kodat          TYPE likp-kodat,
           tddat          TYPE likp-tddat,
           kunnr          TYPE likp-kunnr,
           lprio          TYPE likp-lprio,
           vsbed          TYPE likp-vsbed,
           zzsegcal       TYPE likp-zzsegcal,
           zzfpickingreal TYPE likp-zzfpickingreal,
           wauhr          TYPE likp-wauhr,
           wadat_ist      TYPE likp-wadat_ist,
           vbtyp          TYPE likp-vbtyp.
  TYPES: END OF tipo_entrega.
  TYPES: tty_entrega TYPE TABLE OF tipo_entrega.


  TYPES: BEGIN OF tipo_posiciones,
           vbeln TYPE lips-vbeln,
           posnr TYPE lips-posnr,
           vgtyp TYPE lips-vgtyp,
           matnr TYPE lips-matnr,
           werks TYPE lips-werks,
           lgort TYPE lips-lgort,
*           menge TYPE lips-menge,
           meins TYPE lips-meins,
           charg TYPE lips-charg,
           ntgew TYPE lips-ntgew,
           lfimg TYPE lips-lfimg,
           vgbel TYPE lips-vgbel,
           vgpos TYPE lips-vgpos,
           fkstk TYPE vbuk-fkstk,
           wbstk TYPE vbuk-wbstk.
  TYPES: END OF tipo_posiciones.
  TYPES: tty_posiciones TYPE TABLE OF tipo_posiciones.



  DATA: t_likp  TYPE tty_entrega,
        wa_likp TYPE tipo_entrega,
        t_lips  TYPE tty_posiciones,
        wa_lips TYPE tipo_posiciones.

  DATA: objeto_int TYPE mch1-cuobj_bm,
        ti_ausp2   TYPE ausp.

  DATA: e_tdiff LIKE tvro-fahztd.

  DATA: l_vbfa TYPE vbfa.

  DATA: factura  LIKE vbfa-vbeln,
        posicion LIKE vbfa-posnn.


  DATA: lv_netpr TYPE vbap-netpr,
        lv_kpein TYPE vbap-kpein,
        lv_retpo TYPE ekpo-retpo.



  SELECT vbeln vkorg vstel lfart lfdat kodat tddat kunnr lprio vsbed
         zzsegcal zzfpickingreal wauhr wadat_ist vbtyp
    FROM likp
    INTO TABLE t_likp
    WHERE vbeln IN so_vbeln AND
          vstel IN so_vstel AND
          vkorg IN so_vkorg AND
          kunnr IN so_kunnr AND
          ernam IN so_ernam AND
          wadat_ist IN so_wadat AND " cvivo - 22.03.2019 - EPERIS
          erdat IN so_erdat.


  CHECK t_likp[] IS NOT INITIAL.
* SCT 18.05.18 Id.48459 se incluye seleccion por status SM
  SELECT lips~vbeln lips~posnr vgtyp matnr werks lgort  meins charg ntgew lfimg vgbel vgpos fkstk wbstk
    FROM lips
    INNER JOIN vbuk ON vbuk~vbeln = lips~vbeln
    INTO TABLE t_lips
    FOR ALL ENTRIES IN t_likp
    WHERE lips~vbeln =  t_likp-vbeln AND
          fkstk IN so_fkstk AND
          wbstk IN so_wbstk.



  LOOP AT t_likp INTO wa_likp.
    CLEAR: wa_mostrar.

    wa_mostrar-vkorg = wa_likp-vkorg.

    SELECT SINGLE vtext FROM tvkot
      INTO wa_mostrar-vtext_vkorg
      WHERE spras = sy-langu AND
            vkorg = wa_likp-vkorg.

    wa_mostrar-vstel = wa_likp-vstel.

    SELECT SINGLE vtext FROM tvstt
      INTO wa_mostrar-vtext_vstel
      WHERE spras = sy-langu AND
            vstel = wa_likp-vstel.

    wa_mostrar-lfart = wa_likp-lfart.

    SELECT SINGLE vtext FROM tvlkt
      INTO wa_mostrar-vtext_lfart
      WHERE spras = sy-langu AND
            lfart = wa_likp-lfart.

    wa_mostrar-vbeln = wa_likp-vbeln.
    wa_mostrar-lfdat = wa_likp-lfdat.
    wa_mostrar-kodat = wa_likp-kodat.
    wa_mostrar-tddat = wa_likp-tddat.
    wa_mostrar-kunnr = wa_likp-kunnr.

    SELECT SINGLE name1 FROM kna1
      INTO wa_mostrar-name1
      WHERE kunnr = wa_likp-kunnr.

    wa_mostrar-lprio = wa_likp-lprio.

    SELECT SINGLE bezei FROM tprit
      INTO wa_mostrar-vtext_lprio
      WHERE spras = sy-langu AND
            lprio = wa_likp-lprio.

    wa_mostrar-vsbed = wa_likp-vsbed.

    SELECT SINGLE vtext FROM tvsbt
      INTO wa_mostrar-vtext_vsbed
      WHERE spras = sy-langu AND
            vsbed = wa_likp-vsbed.

    wa_mostrar-zzsegcal = wa_likp-zzsegcal.
    wa_mostrar-zzfpickingreal = wa_likp-zzfpickingreal.
    wa_mostrar-wadat_ist = wa_likp-wadat_ist .




    LOOP AT t_lips INTO wa_lips WHERE vbeln = wa_likp-vbeln.
      wa_mostrar-matnr = wa_lips-matnr.

      SELECT SINGLE maktx FROM makt
        INTO wa_mostrar-maktx
        WHERE spras = sy-langu AND
              matnr = wa_lips-matnr.

      wa_mostrar-posnr = wa_lips-posnr.

      SELECT SINGLE matkl zzcalidad zzgramaje zzancho zzlargo FROM mara
        INTO ( wa_mostrar-matkl,
               wa_mostrar-zzcalidad,
               wa_mostrar-zzgramaje,
               wa_mostrar-zzancho,
               wa_mostrar-zzlargo )
        WHERE matnr = wa_lips-matnr.

      SELECT SINGLE wgbez FROM t023t
        INTO wa_mostrar-wgbez
        WHERE spras = sy-langu AND
              matkl = wa_mostrar-matkl.


      wa_mostrar-werks = wa_lips-werks.
      wa_mostrar-lgort = wa_lips-lgort.
      wa_mostrar-menge = wa_lips-lfimg.

      IF wa_likp-vbtyp = 'T'.
        wa_mostrar-menge = wa_mostrar-menge * -1.
      ENDIF.

      wa_mostrar-meins = wa_lips-meins.
      wa_mostrar-pedido = wa_lips-vgbel.
      wa_mostrar-posicion = wa_lips-vgpos.

      SELECT SINGLE kvgr3 kvgr4 FROM vbak
        INTO ( wa_mostrar-kvgr3, wa_mostrar-kvgr4 )
        WHERE vbeln = wa_lips-vgbel.

      IF wa_mostrar-kvgr3 IS NOT INITIAL.
        SELECT SINGLE bezei FROM tvv3t
          INTO wa_mostrar-text_kvgr3
          WHERE spras = sy-langu AND
                kvgr3 = wa_mostrar-kvgr3.
      ENDIF.


      IF wa_mostrar-kvgr4 IS NOT INITIAL.
        SELECT SINGLE bezei FROM tvv4t
          INTO wa_mostrar-text_kvgr4
          WHERE spras = sy-langu AND
                kvgr4 = wa_mostrar-kvgr4.
      ENDIF.


*     CONTROL DE CALIDAD.
      IF wa_lips-charg IS NOT INITIAL.
        CLEAR: ti_ausp2, objeto_int.
        SELECT SINGLE cuobj_bm FROM mch1
          INTO objeto_int
          WHERE matnr = wa_lips-matnr
             AND charg = wa_lips-charg.

        SELECT SINGLE * FROM ausp
          INTO ti_ausp2
          WHERE objek = objeto_int
            AND atinn = '9999999414' "fecha creación.
            AND klart = '023'.

        WRITE ti_ausp2-atwrt TO wa_mostrar-texto_zzsegcal.

        IF wa_mostrar-texto_zzsegcal = 'DE       A'.
          wa_mostrar-texto_zzsegcal = 'APTA'.
        ELSE.
          wa_mostrar-texto_zzsegcal = 'NO APTA'.
        ENDIF.
      ELSE.
        CLEAR wa_mostrar-texto_zzsegcal.
      ENDIF.


*     FECHA_FABRICACION
*     RELLENAR LA FECHA DE FABRICACIÓN DEL LOTE.
      IF wa_lips-charg IS NOT INITIAL.
        SELECT SINGLE ersda FROM mch1
          INTO wa_mostrar-fecha_fabricacion
          WHERE matnr = wa_lips-matnr AND
                charg = wa_lips-charg.
      ELSE.
        CLEAR wa_mostrar-fecha_fabricacion.
      ENDIF.

*     DIAS_DIFERENCIA: ÍAS QUE UNA BOBINA PERMANECE EN EL
*     ALMACÉN DE PAPELERA PARA SACAR ESTADÍSTICAS.
*     SE RESTA LA FECHA DE FABRICACIÓN DE LA FECHA DE
*     SALIDA DE MERCANCÍAS
      CLEAR: e_tdiff.
      IF wa_likp-wadat_ist <> '00000000' AND wa_lips-charg IS NOT INITIAL.
        CALL FUNCTION 'SD_CALC_DURATION_FROM_DATETIME'
          EXPORTING
            i_date1          = wa_mostrar-fecha_fabricacion " d
            i_time1          = wa_likp-wauhr " t
            i_date2          = wa_likp-wadat_ist " d
            i_time2          = wa_likp-wauhr " t
          IMPORTING
            e_tdiff          = e_tdiff
*           E_DATE2_EARLY    =
          EXCEPTIONS
            invalid_datetime = 1
            OTHERS           = 2.

        IF sy-subrc = 0.
          wa_mostrar-dias_diferencia = ( e_tdiff / 240000 ).
        ENDIF.
      ENDIF.

*     DOC_SALIDA Y POSICIÓN
      CLEAR: l_vbfa.
      SELECT SINGLE * FROM vbfa INTO l_vbfa
       WHERE vbelv = wa_lips-vbeln AND
             posnv = wa_lips-posnr AND
             vbtyp_n = 'R' AND "Doc.mov.mercancia
             bwart NE ' '. "Con movimiento

      IF sy-subrc = 0.
        wa_mostrar-doc_salida = l_vbfa-vbeln.
        wa_mostrar-pos_doc_sm = l_vbfa-posnn.
      ENDIF.


*     FACTURADO
      CLEAR: factura, posicion.

      SELECT SINGLE vbeln posnn FROM vbfa
        INTO ( factura, posicion )
        WHERE vbtyp_n = 'M'
         AND vbelv = wa_lips-vbeln
         AND posnv = wa_lips-posnr.

      CONCATENATE factura posicion INTO wa_mostrar-facturado SEPARATED BY '/'.


*     PED_FABRIC: Nº DE PEDIDO CONTRA EL QUE SE HA FABRICADO LA BOBINA:
      IF wa_lips-charg IS NOT INITIAL.
        CLEAR: ti_ausp2, objeto_int.

        SELECT SINGLE cuobj_bm FROM mch1
          INTO objeto_int
          WHERE matnr = wa_lips-matnr
          AND charg = wa_lips-charg.

        SELECT SINGLE * FROM ausp
          INTO ti_ausp2
          WHERE objek = objeto_int
          AND atinn = '0000000815' "Pedido Fabricado.
          AND klart = '023'.

        WRITE ti_ausp2-atwrt TO wa_mostrar-pedido_fabricacion.
      ELSE.
        CLEAR wa_mostrar-pedido_fabricacion.
      ENDIF.

*     POS_FABRIC:  RELLENAR EL Nº DE POSICIÓN DE EDIDO CONTRA EL QUE
*     SE HA FABRICADO LA BOBINA:
      IF wa_lips-charg IS NOT INITIAL.
        CLEAR: ti_ausp2, objeto_int.
        SELECT SINGLE cuobj_bm FROM mch1
          INTO objeto_int
        WHERE matnr = wa_lips-matnr
        AND charg = wa_lips-charg.

        SELECT SINGLE * FROM ausp
          INTO ti_ausp2
        WHERE objek = objeto_int
        AND atinn = '0000000816' "Posición pedido Fabricado.
        AND klart = '023'.

        WRITE ti_ausp2-atwrt TO wa_mostrar-pos_fabric.
      ELSE.
        CLEAR wa_mostrar-pos_fabric.
      ENDIF.


*     PESO_NETO
      IF wa_likp-vbtyp = 'T'.
        wa_mostrar-ntgew = wa_lips-ntgew * -1.
      ELSE.
        wa_mostrar-ntgew = wa_lips-ntgew * 1.
      ENDIF.

*     PRECIO_NETO
      IF wa_lips-lfimg IS NOT INITIAL.

        CASE wa_lips-vgtyp.
          WHEN 'C' OR 'H'.
            SELECT SINGLE netpr kpein FROM vbap
            INTO (lv_netpr, lv_kpein)
            WHERE vbeln = wa_lips-vgbel AND
                  posnr = wa_lips-vgpos.

            wa_mostrar-precio_neto = lv_netpr / lv_kpein.

            IF wa_lips-vgtyp = 'H'.
              wa_mostrar-precio_neto = ( -1 ) * wa_mostrar-precio_neto.
            ENDIF.


          WHEN 'V'.
            SELECT SINGLE netpr peinh retpo  FROM ekpo
            INTO (lv_netpr, lv_kpein, lv_retpo)
            WHERE ebeln = wa_lips-vgbel  AND
                  ebelp = wa_lips-vgpos .

            wa_mostrar-precio_neto  = lv_netpr / lv_kpein.

            IF lv_retpo = 'x'.
              wa_mostrar-precio_neto = ( -1 ) * wa_mostrar-precio_neto.
            ENDIF.

        ENDCASE.
      ENDIF.

*     ALBARAN VALORADO
      wa_mostrar-albaran_valorado = wa_lips-lfimg * wa_mostrar-precio_neto.


*     Status de factura de la Entrega Status
      wa_mostrar-fkstk = wa_lips-fkstk.

* SCT 18.05.18 Id. Status SM de la entrega
*      Status de factura de la Entrega Status
      wa_mostrar-wbstk = wa_lips-wbstk.

*      SELECT SINGLE fkstk FROM vbuk
*        INTO wa_mostrar-fkstk
*        WHERE vbeln = wa_lips-vbeln.

      APPEND wa_mostrar TO gt_mostrar.
    ENDLOOP.
  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ALV_MOSTRAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_mostrar .
  DATA: ls_lvc_s_layo TYPE lvc_s_layo,
        ls_variant    TYPE disvariant.

* Variante
  PERFORM alv_prepare_variant CHANGING ls_variant.

* Preparamos el catálogo de campos
  PERFORM alv_prepare_fielcat.

* Preparamos el layout
  PERFORM alv_prepare_layout CHANGING ls_lvc_s_layo.

** Preparamos eventos
*  PERFORM alv_prepare_events.

* Mostramos el ALV
  CALL METHOD gcl_grid->set_table_for_first_display
    EXPORTING
      i_buffer_active    = ' '
      i_bypassing_buffer = 'X'
      is_layout          = ls_lvc_s_layo
      i_structure_name   = 'ZED0019'
      is_variant         = ls_variant
      i_save             = 'A'
    CHANGING
      it_outtab          = gt_mostrar[]
      it_fieldcatalog    = gt_fieldcat.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  alv_prepare_variant
*&---------------------------------------------------------------------*
FORM alv_prepare_variant CHANGING ps_variant TYPE disvariant .


*  IF NOT p_varian IS INITIAL.
  ps_variant-report      = sy-repid.
  ps_variant-handle      = space.
  ps_variant-log_group   = space.
  ps_variant-username    = space.
  ps_variant-variant     = p_varian.
  ps_variant-text        = space.
  ps_variant-dependvars  = space.
*  ENDIF.


ENDFORM.                    "alv_prepare_variant
*&---------------------------------------------------------------------*
*&      Form  alv_prepare_fielcat
*&---------------------------------------------------------------------*
FORM alv_prepare_fielcat.

  DATA: ls_fcat TYPE lvc_s_fcat.
  DATA: lv_tabix TYPE sytabix.


  REFRESH: gt_fieldcat_ant, gt_fieldcat.

* Pasar tabla interna al formato del fieldcat
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_program_name         = sy-repid
      i_structure_name       = 'ZED0019'
      i_inclname             = sy-repid
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = gt_fieldcat_ant
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

* Pasar el anterior fieldcat al formato del nuevo
  CALL FUNCTION 'LVC_TRANSFER_FROM_SLIS'
    EXPORTING
      it_fieldcat_alv = gt_fieldcat_ant
    IMPORTING
      et_fieldcat_lvc = gt_fieldcat
    TABLES
      it_data         = gt_alv
    EXCEPTIONS
      it_data_missing = 1
      OTHERS          = 2.

** Recorremos el catálogo de campos modificandolo

  LOOP AT gt_fieldcat INTO ls_fcat.
    lv_tabix = sy-tabix.
    CASE ls_fcat-fieldname.
      WHEN 'VTEXT_LFART'.
        ls_fcat-seltext   = text-t01.
        ls_fcat-scrtext_l = text-t01.
        ls_fcat-scrtext_m = text-t01.
        ls_fcat-scrtext_s = text-t01.
        ls_fcat-reptext   = text-t01.

      WHEN 'ZFPICKINGREAL'.
        ls_fcat-seltext   = text-t02.
        ls_fcat-scrtext_l = text-t02.
        ls_fcat-scrtext_m = text-t02.
        ls_fcat-scrtext_s = text-t02.
        ls_fcat-reptext   = text-t02.

      WHEN 'NAME1'.
        ls_fcat-seltext   = text-t03.
        ls_fcat-scrtext_l = text-t03.
        ls_fcat-scrtext_m = text-t03.
        ls_fcat-scrtext_s = text-t03.
        ls_fcat-reptext   = text-t03.

      WHEN 'VTEXT_LPRIO'.
        ls_fcat-seltext   = text-t04.
        ls_fcat-scrtext_l = text-t04.
        ls_fcat-scrtext_m = text-t04.
        ls_fcat-scrtext_s = text-t04.
        ls_fcat-reptext   = text-t04.

      WHEN 'VTEXT_VSBED'.
        ls_fcat-seltext   = text-t05.
        ls_fcat-scrtext_l = text-t05.
        ls_fcat-scrtext_m = text-t05.
        ls_fcat-scrtext_s = text-t05.
        ls_fcat-reptext   = text-t05.

      WHEN 'MAKTX'.
        ls_fcat-seltext   = text-t06.
        ls_fcat-scrtext_l = text-t06.
        ls_fcat-scrtext_m = text-t06.
        ls_fcat-scrtext_s = text-t06.
        ls_fcat-reptext   = text-t06.

      WHEN 'WGBEZ'.
        ls_fcat-seltext   = text-t07.
        ls_fcat-scrtext_l = text-t07.
        ls_fcat-scrtext_m = text-t07.
        ls_fcat-scrtext_s = text-t07.
        ls_fcat-reptext   = text-t07.


      WHEN 'MENGE'.
        ls_fcat-seltext   = text-t08.
        ls_fcat-scrtext_l = text-t08.
        ls_fcat-scrtext_m = text-t08.
        ls_fcat-scrtext_s = text-t08.
        ls_fcat-reptext   = text-t08.

      WHEN 'MEINS'.
        ls_fcat-seltext   = text-t09.
        ls_fcat-scrtext_l = text-t09.
        ls_fcat-scrtext_m = text-t09.
        ls_fcat-scrtext_s = text-t09.
        ls_fcat-reptext   = text-t09.

      WHEN 'ZZSEGCAL'.
        ls_fcat-seltext   = text-t10.
        ls_fcat-scrtext_l = text-t10.
        ls_fcat-scrtext_m = text-t10.
        ls_fcat-scrtext_s = text-t10.
        ls_fcat-reptext   = text-t10.
        ls_fcat-no_out    = 'X'.

      WHEN 'TEXTO_ZZSEGCAL'.
        ls_fcat-seltext   = text-t10.
        ls_fcat-scrtext_l = text-t10.
        ls_fcat-scrtext_m = text-t10.
        ls_fcat-scrtext_s = text-t10.
        ls_fcat-reptext   = text-t10.

      WHEN 'VTEXT_VKORG'.
        ls_fcat-seltext   = text-t11.
        ls_fcat-scrtext_l = text-t11.
        ls_fcat-scrtext_m = text-t11.
        ls_fcat-scrtext_s = text-t11.
        ls_fcat-reptext   = text-t11.

      WHEN 'VTEXT_VSTEL'.
        ls_fcat-seltext   = text-t12.
        ls_fcat-scrtext_l = text-t12.
        ls_fcat-scrtext_m = text-t12.
        ls_fcat-scrtext_s = text-t12.
        ls_fcat-reptext   = text-t12.

      WHEN 'DIAS_DIFERENCIA'.
        ls_fcat-seltext   = text-t13.
        ls_fcat-scrtext_l = text-t13.
        ls_fcat-scrtext_m = text-t13.
        ls_fcat-scrtext_s = text-t13.
        ls_fcat-reptext   = text-t13.

      WHEN 'FECHA_FABRICACION'.
        ls_fcat-seltext   = text-t14.
        ls_fcat-scrtext_l = text-t14.
        ls_fcat-scrtext_m = text-t14.
        ls_fcat-scrtext_s = text-t14.
        ls_fcat-reptext   = text-t14.


      WHEN 'DOC_SALIDA'.
        ls_fcat-seltext   = text-t15.
        ls_fcat-scrtext_l = text-t15.
        ls_fcat-scrtext_m = text-t15.
        ls_fcat-scrtext_s = text-t15.
        ls_fcat-reptext   = text-t15.

      WHEN 'POS_DOC_SM'.
        ls_fcat-seltext   = text-t16.
        ls_fcat-scrtext_l = text-t16.
        ls_fcat-scrtext_m = text-t16.
        ls_fcat-scrtext_s = text-t16.
        ls_fcat-reptext   = text-t16.

      WHEN 'FACTURADO'.
        ls_fcat-seltext   = text-t17.
        ls_fcat-scrtext_l = text-t17.
        ls_fcat-scrtext_m = text-t17.
        ls_fcat-scrtext_s = text-t17.
        ls_fcat-reptext   = text-t17.

      WHEN 'PEDIDO_FABRICACION'.
        ls_fcat-seltext   = text-t18.
        ls_fcat-scrtext_l = text-t18.
        ls_fcat-scrtext_m = text-t18.
        ls_fcat-scrtext_s = text-t18.
        ls_fcat-reptext   = text-t18.

      WHEN 'POS_FABRIC'.
        ls_fcat-seltext   = text-t19.
        ls_fcat-scrtext_l = text-t19.
        ls_fcat-scrtext_m = text-t19.
        ls_fcat-scrtext_s = text-t19.
        ls_fcat-reptext   = text-t19.

      WHEN 'NTGEW'.
        ls_fcat-seltext   = text-t20.
        ls_fcat-scrtext_l = text-t20.
        ls_fcat-scrtext_m = text-t20.
        ls_fcat-scrtext_s = text-t20.
        ls_fcat-reptext   = text-t20.

      WHEN 'ALBARAN_VALORADO'.
        ls_fcat-seltext   = text-t21.
        ls_fcat-scrtext_l = text-t21.
        ls_fcat-scrtext_m = text-t21.
        ls_fcat-scrtext_s = text-t21.
        ls_fcat-reptext   = text-t21.

      WHEN 'TEXT_KVGR3'.
        ls_fcat-seltext   = text-t22.
        ls_fcat-scrtext_l = text-t22.
        ls_fcat-scrtext_m = text-t22.
        ls_fcat-scrtext_s = text-t22.
        ls_fcat-reptext   = text-t22.

      WHEN 'TEXT_KVGR4'.
        ls_fcat-seltext   = text-t23.
        ls_fcat-scrtext_l = text-t23.
        ls_fcat-scrtext_m = text-t23.
        ls_fcat-scrtext_s = text-t23.
        ls_fcat-reptext   = text-t23.


    ENDCASE.
    MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

  ENDLOOP.


ENDFORM.                    "alv_prepare_fielcat
*&---------------------------------------------------------------------*
*&      Form  ALV_PREPARE_LAYOUT
*&---------------------------------------------------------------------*
FORM alv_prepare_layout CHANGING ls_lvc_s_layo TYPE lvc_s_layo.

* Para que muestre el ancho de las columnas optimizado
  ls_lvc_s_layo-cwidth_opt = 'X'.
  ls_lvc_s_layo-sel_mode   = 'A'.

ENDFORM.                    " ALV_PREPARE_LAYOUT
*&---------------------------------------------------------------------*
*&      Form  OBTENER_VARIANTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_VARIAN  text
*----------------------------------------------------------------------*
FORM obtener_variante  CHANGING c_variant TYPE disvariant-variant.

  DATA: ls_variant TYPE disvariant,
        l_exit     TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
*     it_default_fieldcat =
    IMPORTING
      e_exit     = l_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 2.

  IF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    IF l_exit EQ space.
      c_variant = ls_variant-variant.
    ENDIF.
  ENDIF.


ENDFORM.
