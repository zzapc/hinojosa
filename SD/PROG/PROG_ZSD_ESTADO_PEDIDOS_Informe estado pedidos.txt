************************************************************************
* MÓDULO      : SD                                                     *
* TIPO        : REPORT                                                 *
* TITULO      : Informe estado pedidos                                 *
* DESCRIPCION :                                                        *
* ...                                                                  *
* ...                                                                  *
* AUTOR: Elías Bellver                          FECHA: 08/06/2014
* MODIFICACIONES                                                       *
* --------------                                                       *
* FECHA        NOMBRE            DESCRIPCIO                            *
* -------------------------------------------------------------------- *
************************************************************************
REPORT zsd_estado_pedidos
      NO STANDARD PAGE HEADING
      LINE-COUNT 090
      LINE-SIZE 120.


*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: vbak,
        vbap,
        kna1,
        knb1,
        vbuk,
        vbpa,
        *vbpa,
        vbkd,
        likp,
        ekko,
        vbfa,
        vbep,
        eket,
        tvko,
        mara,
        vbup,
        ekpo,
        ekpv,
        lips,
        tsege,
        vttk,
        afpo,            "TABLA PARA EXTRAER DATOS DE PRODUCCIÓN.
        ztemp,
        zest_car_mat,
        zep_permisos.


*------VARIABLES-------------------------------------------------------*
DATA: v_autorizado,
      zsd_estado_pedidos TYPE zsd_estado_pedidos.

DATA: i_listado           TYPE TABLE OF zsd_estado_pedidos,
      l_listado           TYPE          zsd_estado_pedidos,
      i_listado_color     TYPE TABLE OF zsd_estado_pedidos_color,
      i_listado_color_ini TYPE TABLE OF zsd_estado_pedidos_color,
      i_listado_color_aux TYPE TABLE OF zsd_estado_pedidos_color,
      l_listado_color     TYPE          zsd_estado_pedidos_color,
      l_listado_color_ini TYPE          zsd_estado_pedidos_color,
      l_cont              TYPE          i,
      l_status            TYPE          j_status,
      l_status2           TYPE          j_status,
      l_status_c          TYPE          zestado_pedido,
      l_error.

RANGES: r_fecha_entr FOR vbep-edatu,
        r_fecha_pick FOR likp-bldat.

*------CLASES ---------------------------------------------------------*
CLASS lcl_event_grid DEFINITION INHERITING FROM zcl_ap_alv_grid_eventos.
  PUBLIC SECTION.
    METHODS: double_click REDEFINITION,
      data_changed REDEFINITION,
      toolbar      REDEFINITION,
      user_command REDEFINITION.
ENDCLASS.                    "lcl_event_grid DEFINITION

DATA: o_alv    TYPE REF TO zcl_ap_alv_grid,
      o_event  TYPE REF TO lcl_event_grid,
      v_inicio,
      v_aut.

DATA: o_sgpi TYPE REF TO zcl_ap_sgpi.
DATA: o_errores TYPE REF TO zcl_ap_popup.

*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK blk_par WITH FRAME TITLE text-002. "Pará
SELECT-OPTIONS: s_bukrs  FOR ekko-bukrs,
                s_vkorg  FOR vbak-vkorg,
                s_vtweg  FOR vbak-vtweg,
                s_kunnr  FOR vbak-kunnr,
                s_kunwe  FOR vbpa-kunnr,
                s_vkgrp  FOR vbak-vkgrp,
                s_vkbur  FOR vbak-vkbur,
                s_matnr  FOR vbap-matnr,
                s_calida FOR mara-zzcalidad,     "Calidad fefco Papel
                s_gramaj FOR mara-zzgramaje,     "Gramaje
                s_ancho  FOR mara-zzancho,       "Ancho
                s_largo  FOR mara-zzlargo,       "Largo
                s_matkl  FOR vbap-matkl,
*                s_prdha  FOR mara-prdha,
                s_auart  FOR vbak-auart,
                s_vbtyp  FOR vbak-vbtyp,
                s_entre  FOR likp-vbeln,
        s_werks  FOR vbap-werks,
        s_lifnr  FOR ekko-lifnr,
        s_audat  FOR vbak-audat,
        s_vdatu  FOR vbak-vdatu,
        s_mbdat  FOR vbep-mbdat,
*                s_zzpld  FOR vbap-zzpld,
        s_kodat  FOR likp-kodat,
        s_fpickr FOR likp-wadat_ist,
        s_fcrent FOR zsd_estado_pedidos-fcr_entrega,
        s_wadat  FOR likp-wadat_ist,
        s_lifsk  FOR vbak-lifsk,
        s_estado FOR zsd_estado_pedidos-estado
*                s_estcab FOR zsd_estado_pedidos-estado_cab
*                s_estped FOR zsd_estado_pedidos-zzestado_pedido
.
SELECTION-SCREEN END OF BLOCK blk_par.
SELECTION-SCREEN BEGIN OF BLOCK blk_par2 WITH FRAME TITLE text-002.
"Pará
PARAMETERS: p_venta AS CHECKBOX." DEFAULT 'X'.
SELECT-OPTIONS: s_vbeln  FOR vbak-vbeln.
PARAMETERS: p_compra AS CHECKBOX." DEFAULT 'X'.
SELECT-OPTIONS: s_ebeln  FOR ekko-ebeln.
SELECTION-SCREEN END OF BLOCK blk_par2.
SELECTION-SCREEN BEGIN OF BLOCK otros WITH FRAME TITLE text-005.
PARAMETERS:
*           p_anti  AS CHECKBOX DEFAULT 'X',
            p_cache AS CHECKBOX .
PARAMETERS: p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK otros.
SELECTION-SCREEN BEGIN OF BLOCK blk_pad WITH FRAME TITLE text-006.
*SELECT-OPTIONS: s_diamet FOR zest_car_mat-diametro.
SELECTION-SCREEN SKIP.
PARAMETERS: p_actpl AS CHECKBOX.
"Actualizar datos en tabla ZSD_ESTADO_PEDIDOS

SELECTION-SCREEN END OF BLOCK blk_pad.
PARAMETERS: p_jobol NO-DISPLAY.
"Se marca si viene desde el job de cálculo online
*----------------------------------------------------------------------*
*       CLASS lcl_event_grid IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_event_grid IMPLEMENTATION.
  METHOD double_click.
    READ TABLE i_listado_color INTO l_listado_color INDEX e_row-index.
    IF sy-subrc = 0.
      SELECT SINGLE * FROM kna1
        INTO kna1
       WHERE kunnr = l_listado_color-kunnr.

      IF e_column CS '_ENT'.
        SET PARAMETER ID 'VL' FIELD l_listado_color-vbeln_ent.
        CALL TRANSACTION 'VL03N' AND SKIP FIRST SCREEN.
      ELSEIF e_column CS 'TKNUM'.
        SET PARAMETER ID 'TNR' FIELD l_listado_color-tknum.
        CALL TRANSACTION 'VT03N' AND SKIP FIRST SCREEN.
*      ELSEIF e_column = 'ANTICIPO'.
*        zcl_ped_sd=>get_anticipos_pedido( vbeln = l_listado_color-vbeln
*                                          posnr = l_listado_color-posnr
*                                          show_popup = 'X' ).
*      ELSEIF e_column = 'ANTICIPO_CAB'.
*        zcl_ped_sd=>get_anticipos_pedido( vbeln = l_listado_color-vbeln
*                                          posnr = '000000'
*                                          show_popup = 'X' ).
      ELSEIF e_column = 'TEXTO_INTERNO'.
        PERFORM verificar_autorizacion USING 'TEXTO_INTERNO'.
        IF v_aut = 'X'.
          zcl_ap_textos=>editar_texto( id = 'Z001' name = l_listado_color-vbeln
          spras = kna1-spras object = 'VBBK' display = '' forzar_nuevo = 'X' ).
          COMMIT WORK AND WAIT.
        ELSE.
          zcl_ap_textos=>editar_texto( id = 'Z001' name = l_listado_color-vbeln
          object = 'VBBK' display = 'X' ).
        ENDIF.
      ELSEIF e_column = 'TEXTO_EXTERNO'.
        PERFORM verificar_autorizacion USING 'TEXTO_EXTERNO'.
        IF v_aut = 'X'.
          zcl_ap_textos=>editar_texto( id = 'Z002' name = l_listado_color-vbeln
         spras = kna1-spras  object = 'VBBK' display = '' forzar_nuevo = 'X' ).
          COMMIT WORK AND WAIT.
        ELSE.
          zcl_ap_textos=>editar_texto( id = 'Z002' name = l_listado_color-vbeln
          object = 'VBBK' display = 'X' ).
        ENDIF.
      ELSE.
        IF l_listado_color-vbeln(4) = '0044'.
          zcl_ap_pedido_mm=>visualizar( l_listado_color-vbeln ).
        ELSE.
          zcl_ap_pedido_sd=>visualizar( l_listado_color-vbeln ).
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "double_click


  METHOD toolbar.
    DATA: ls_toolbar TYPE stb_button.

    CLEAR ls_toolbar.
    ls_toolbar-function  = 'REFRESCAR'.
    ls_toolbar-icon      = '@42@'.
    ls_toolbar-quickinfo = text-ref. "Refrescar
    ls_toolbar-text      = text-ref.
    APPEND ls_toolbar TO e_object->mt_toolbar.

  ENDMETHOD.                    "toolbar

  METHOD user_command.

    CASE e_ucomm .
      WHEN 'REFRESCAR'.
        PERFORM seleccion_datos.
        o_alv->refrescar_grid( ).
    ENDCASE .

  ENDMETHOD.                    "USER_COMMAND

  METHOD data_changed.
  ENDMETHOD.                    "data_changed
ENDCLASS.                    "lcl_event_grid IMPLEMENTATION
************************************************************************
*
*                  LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.

  IF zcl_aut_slk=>es_sapall( ) = 'X'.
    SET PF-STATUS 'INICIO'.
  ENDIF.

  IF sy-batch IS INITIAL.
    CREATE OBJECT o_event.
    CREATE OBJECT o_alv
      EXPORTING
        estructura = 'ZSD_ESTADO_PEDIDOS_COLOR'
        o_event    = o_event.

    p_vari = o_alv->get_default_layout( ).
  ENDIF.

  CASE sy-tcode.
    WHEN 'ZEP'.
      sy-title = text-zep.
    WHEN 'ZEPV'.
      sy-title = text-zep.
    WHEN 'ZEPV2000'.
      sy-title = text-zep.
    WHEN 'ZEPV2001'.
      sy-title = text-zep.
    WHEN 'ZEPV2010'.
      sy-title = text-zep.
    WHEN 'ZEPV2020'.
      sy-title = text-zep.
    WHEN 'ZEPV2030'.
      sy-title = text-zep.
*    WHEN 'ZDP'.
*      sy-title = text-zdp.
*    WHEN 'ZLE'.
*      sy-title = text-zle.
  ENDCASE.

* GST - 11/07/2016 ->
*   Obtener el centro del usuario actual:
  PERFORM initialization_sel.
* GST - 11/07/2016 <-

AT SELECTION-SCREEN ON s_vkorg.
  IF p_jobol IS INITIAL AND sy-tcode(4) <> 'ZEPV'.
    zcl_aut_slk=>control_org_ventas( s_vkorg[] ).
  ENDIF.

* JGM - 29.11.16 ->
*Hacer el chequeo de Proveedor con el proveedor (s_lifnr), no con la
*Organización de Ventas (s_vkorg)
AT SELECTION-SCREEN ON s_lifnr.
* JGM - 29.11.16 <-

* SS - 30/11/2016  ->
*  IF p_compra = 'X'.
*    IF s_lifnr IS INITIAL.
*      MESSAGE w033(zsd).
*
*    ENDIF.
*  ENDIF.

* SS - 30.11.2016 <-
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.

  p_vari = o_alv->get_f4_layout( ).

AT SELECTION-SCREEN.

  CASE sy-ucomm.
    WHEN 'PERMISOS'.
      zcl_ap_utils=>mantener_tabla( 'ZEP_PERMISOS' ).
    WHEN OTHERS.

      IF s_audat[] IS INITIAL AND s_vbeln[] IS INITIAL
        AND s_kodat[] IS INITIAL AND s_kunnr[] IS INITIAL
        AND s_fcrent[] IS INITIAL AND s_wadat[] IS INITIAL
        AND s_vdatu[] IS INITIAL AND s_mbdat[] IS INITIAL
*        AND s_zzpld[] IS INITIAL
        AND p_cache IS INITIAL.
        MESSAGE w007(zsd). "Informe al menos fecha de pedido
      ENDIF.
  ENDCASE.


*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

  IF sy-tcode = 'SE38'.
    sy-tcode = 'ZEP'.
  ENDIF.

  IF sy-tcode = 'ZEP'.
    AUTHORITY-CHECK OBJECT 'ZEP'    "tratar datos de ZEP.
     ID 'ACTVT' DUMMY.
    IF sy-subrc = 0.
      v_autorizado = 'X'.
    ENDIF.
  ELSE.
    AUTHORITY-CHECK OBJECT 'ZEPV'   "tratar datos de ZEP modo visualizador.
     ID 'ACTVT' DUMMY.
    IF sy-subrc = 0.
      v_autorizado = ' '.
    ENDIF.
  ENDIF.

*  IF sy-tcode = 'ZDP'.
*    AUTHORITY-CHECK OBJECT 'ZDP'
*     ID 'ACTVT' DUMMY.
*    IF sy-subrc = 0.
*      v_autorizado = 'X'.
*    ENDIF.
*  ENDIF.
*
*  IF sy-tcode = 'ZLE'.
*    AUTHORITY-CHECK OBJECT 'ZLE'
*     ID 'ACTVT' DUMMY.
*    IF sy-subrc = 0.
*      v_autorizado = 'X'.
*    ENDIF.
*  ENDIF.

  CREATE OBJECT o_sgpi
    EXPORTING
      commit_work = 'X'.

  IF p_jobol = 'X'.
    DATA i_temp TYPE TABLE OF ztemp WITH HEADER LINE.
    SELECT * FROM ztemp
      INTO TABLE i_temp
     WHERE clave = 'ZEP_CACHE'.
    LOOP AT i_temp INTO ztemp.
      CLEAR s_vbeln.
      s_vbeln-option = 'EQ'.
      s_vbeln-sign   = 'I'.
      s_vbeln-low    = ztemp-subclave.
      APPEND s_vbeln.

      IF p_cache = 'X'.
        DELETE ztemp.
      ENDIF.
    ENDLOOP.
    LOOP AT s_vbeln.
      MESSAGE s398(00) WITH 'Procesando pedido:' s_vbeln-low.
    ENDLOOP.
    IF sy-subrc NE 0.
      MESSAGE s398(00) WITH 'No hay pedido, salimos'.
      EXIT.
    ENDIF.
    DATA l_fechajob TYPE d.
    l_fechajob = sy-datum - 2.
    zcl_ap_jobs=>borrar_jobs( jobname = 'ZACT_CACHE_PED' fecha = l_fechajob
    ).
  ENDIF.

  PERFORM seleccion_datos.

  IF sy-batch IS INITIAL AND p_actpl = ''.
    CALL SCREEN 0100.
  ENDIF.

************************************************************************
*
*                  FORMS ADICIONALES
*
************************************************************************

*&---------------------------------------------------------------------*
*&      Form  SELECCION_DATOS
*&---------------------------------------------------------------------*
FORM seleccion_datos.
  DATA: l_utc(15),
        l_semana  TYPE scal-week.
  DATA: i_cache TYPE TABLE OF zsd_est_ped WITH HEADER LINE,
        l_cont  TYPE          zsd_est_ped-contador.
  DATA: i_cdpos TYPE iscdpos_tab,
        l_cdpos TYPE iscdpos.

  CLEAR: i_listado, i_listado_color.

  IF p_cache IS INITIAL.
    IF p_venta = 'X'.
      PERFORM seleccionar_ventas.
    ENDIF.
    IF p_compra = 'X'.
      PERFORM seleccionar_compras.
    ENDIF.

    o_sgpi->texto( 'Recogiendo datos generales' ).
    LOOP AT i_listado INTO l_listado WHERE cache IS INITIAL.
      CLEAR l_listado_color.
      MOVE-CORRESPONDING l_listado TO l_listado_color.


      l_listado_color-estado_txt = zcl_ap_utils=>get_texto_dominio( dominio =
      'ZESTADO_PLEN_ENT'
                               valor   = l_listado-estado ).

      l_listado_color-estado_txt_cab = zcl_ap_utils=>get_texto_dominio(
      dominio = 'ZESTADO_PLEN_ENT'
                       valor   = l_listado-estado_cab ).
* SELECCIONAR LA DESCRIPCIÓN DE LA CLASE DE DOCUMENTO
      SELECT SINGLE bezei FROM  tvakt
        INTO l_listado_color-vtext
       WHERE spras  = sy-langu
         AND auart  = l_listado_color-auart.
      IF l_listado_color-bezei IS INITIAL.
        "LO TOMAMOS DE LOS DOCS. DE COMPRAS
        SELECT SINGLE batxt FROM t161t
          INTO l_listado_color-vtext
         WHERE spras  = sy-langu
           AND bsart  = l_listado_color-auart.
      ENDIF.

      SELECT SINGLE bezei FROM  tvgrt
      "Descripción del Grupo de vendedores
      INTO l_listado_color-bezei
      WHERE  spras  = sy-langu
      AND    vkgrp  = l_listado_color-vkgrp.

      SELECT SINGLE bezei FROM  tvkbt
      "Descripción de la Oficina de Ventas
      INTO l_listado_color-vbukrt
      WHERE  spras  = sy-langu
      AND    vkbur  = l_listado_color-vkbur.

      SELECT SINGLE vtext FROM  tvkot
      "Descripción de Orga. de Ventas
      INTO l_listado_color-vtext
      WHERE spras  = sy-langu
      AND vkorg  = l_listado_color-vkorg.

      SELECT SINGLE name1 FROM t001w                 "Descripción del Centro
        INTO l_listado_color-nom_centro
       WHERE werks = l_listado_color-werks.

      SELECT SINGLE landx FROM  t005t                "Descripción del País
        INTO l_listado_color-landx
       WHERE spras  = sy-langu
         AND land1  = l_listado_color-land1.

      IF NOT l_listado_color-zlsch IS INITIAL.
        "Descripción de la Vía de Pago
        SELECT SINGLE * FROM tvko
         WHERE vkorg = l_listado_color-vkorg.
        IF sy-subrc = 0.
          SELECT SINGLE text1 FROM  t042z
            INTO l_listado_color-text1
           WHERE land1  = tvko-vkokl
            AND  zlsch  = l_listado_color-zlsch.
        ENDIF.
      ENDIF.

      SELECT SINGLE matkl prdha zzcalidad zzgramaje zzancho zzlargo FROM mara
     INTO (l_listado_color-matkl, l_listado_color-prdha,
     l_listado_color-zzcalidad,
     l_listado_color-zzgramaje, l_listado_color-zzancho,
     l_listado_color-zzlargo )
     WHERE matnr = l_listado_color-matnr.

      IF sy-subrc = 0.
        l_listado_color-prdha = l_listado_color-prdha(2).

        SELECT SINGLE vtext FROM  t179t
        "Descripción de Jerarquía de Productos.
        INTO l_listado_color-jerarquiat
        WHERE spras  = sy-langu
        AND prodh  = l_listado_color-prdha.

        SELECT SINGLE wgbez FROM t023t
        "Descripción de Grupo de Artículos.
        INTO l_listado_color-wgbez
        WHERE matkl = l_listado_color-matkl.
      ENDIF.

      IF l_listado_color-precio_final = 0 AND l_listado_color-kwmeng = 0.
        zcl_ap_alv=>append_color( EXPORTING campo = '' colorc = 'N'
                        CHANGING  tabla_color = l_listado_color-color ).
      ELSE.
        CLEAR vbfa-vbeln.
        SELECT SINGLE * FROM vbuk
         WHERE vbeln = l_listado_color-vbeln.
        SELECT SINGLE vbeln FROM vbfa
          INTO vbfa-vbeln
         WHERE ( vbelv = l_listado_color-vbeln_ent AND vbtyp_v = 'J' )
            OR ( vbelv = l_listado_color-vbeln     AND vbtyp_v = 'C' )
           AND   posnv = l_listado_color-posnr
            AND vbtyp_n = 'M'.
      ENDIF.
*      perform get_datos_from_nombre in program ZSD_PLAN_ENTREGAS
*using l_listado_color-matnr l_listado_color-arktx
*changing l_vidrio l_prov_celula l_listado_color-vatio_pico.

*l_listado_color-potencia = zcl_clas_lote=>get_caract_mat( matnr =
*l_listado_color-matnr
*caract = 'DB_POTENCIA' ).
*      IF l_listado_color-potencia = 0.
*l_listado_color-potencia = zcl_clas_lote=>get_caract_mat( matnr =
*l_listado_color-matnr
*caract = 'POTENCIA' ).
*      ENDIF.
*l_listado_color-potencia_total = l_listado_color-potencia *
*l_listado-kwmeng.
*      IF l_listado_color-potencia NE 0.
*        IF l_listado_color-kwmeng NE 0.
*l_listado_color-precio_wp = ( ( l_listado_color-netwr -
*l_listado-transporte )
*                                        / l_listado_color-potencia )
*                                        / l_listado_color-kwmeng.
*        ENDIF.
*      ELSE.
*        IF l_listado_color-kwmeng NE 0.
*l_listado_color-precio_wp = ( l_listado_color-netwr -
*l_listado-transporte ) / l_listado_color-kwmeng.
*        ENDIF.
*      ENDIF.
      l_listado_color-causa_retrasot = zcl_ap_utils=>get_texto_dominio(
   dominio = 'ZCAUSA_RETRASO' valor = l_listado_color-zzcausa_retraso ).
      IF NOT l_listado_color-vbeln_ent IS INITIAL.
        SELECT SINGLE kostk wbstk trsta FROM vbuk
INTO (l_listado_color-kostk, l_listado_color-wbstk,
l_listado_color-trsta)
WHERE vbeln = l_listado_color-vbeln_ent.

        SELECT SINGLE zzfpickingreal erzet FROM likp
        INTO (l_listado_color-fpickingreal, l_listado_color-hcr_entrega)
       WHERE vbeln = l_listado-vbeln_ent.

        IF l_listado_color-fpickingreal IS INITIAL OR
        l_listado_color-fpickingreal = ''.
          l_listado_color-fpickingreal =
  zcl_ap_control_cambios=>get_fecha_ult_cambio( objectclas = 'LIEFERUNG'
             objectid   = l_listado-vbeln_ent
             tabname    = 'VBUK'
             fname      = 'KOSTK' ).
          IF NOT l_listado_color-fpickingreal IS INITIAL.
            UPDATE likp
               SET zzfpickingreal = l_listado_color-fpickingreal
             WHERE vbeln = l_listado-vbeln_ent.
          ENDIF.
        ENDIF.
        l_semana = zcl_ap_fechas=>get_semana( l_listado_color-fpickingreal ).
        l_listado_color-sem_pickingreal = l_semana+4(2).
        i_cdpos =  zcl_ap_control_cambios=>get_cdpos( objectclas = 'LIEFERUNG'
                                              objectid   = l_listado-vbeln_ent
                                              tabname    = 'VBUK'
                                              fname  =  'KOSTK').
        READ TABLE i_cdpos INTO l_cdpos WITH KEY value_old = 'A'
                                                 value_new = 'B'.
        IF sy-subrc = 0.
          l_listado_color-fini_picking = l_cdpos-udate.
          l_listado_color-hini_picking = l_cdpos-utime.
        ENDIF.
        READ TABLE i_cdpos INTO l_cdpos WITH KEY value_old = 'B'
                                                 value_new = 'C'.
        IF sy-subrc = 0.
          l_listado_color-ffin_picking = l_cdpos-udate.
          l_listado_color-hfin_picking = l_cdpos-utime.
        ELSE.
          READ TABLE i_cdpos INTO l_cdpos WITH KEY value_old = 'A'
                                                   value_new = 'C'.
          IF sy-subrc = 0.
            l_listado_color-fini_picking = l_cdpos-udate.
            l_listado_color-hini_picking = l_cdpos-utime.
            l_listado_color-ffin_picking = l_cdpos-udate.
            l_listado_color-hfin_picking = l_cdpos-utime.
          ENDIF.
        ENDIF.
        l_listado-fsolicitada = zcl_ap_control_cambios=>get_primer_valor_campo(
        objectclas = 'VERKBELEG'
                            objectid   = l_listado-vbeln
                            tabname    = 'VBEP'
                            fname      = 'EDATU' ).
        IF NOT l_listado_color-fpickingreal IN s_fpickr.
          CONTINUE.
        ENDIF.
* Recuparar datos de transportes.
        SELECT SINGLE tknum FROM vttp
          INTO l_listado_color-tknum
         WHERE vbeln = l_listado_color-vbeln_ent.
        IF sy-subrc = 0.
          SELECT SINGLE erdat dalbg daten
                        uzdis ualbg ualen uzabf FROM vttk
   INTO (l_listado_color-fcrdoctrans, l_listado_color-dalbg, vttk-daten,
l_listado_color-uzdis, l_listado_color-ualbg, l_listado_color-ualen,
l_listado_color-uzabf)
WHERE tknum = l_listado_color-tknum.
          l_listado_color-fentregacliente = l_listado_color-fentregacli =
          vttk-daten.
          SELECT SINGLE handle FROM vttk
            INTO likp-handle
           WHERE tknum = l_listado_color-tknum.
          IF sy-subrc = 0 AND likp-handle NE ''.
            SELECT * FROM tsege
             WHERE head_hdl = likp-handle
               AND even  = 'WSHDR0003'.
            ENDSELECT.
            IF sy-subrc = 0.
              l_utc = tsege-even_tstfr.
              l_listado_color-fentregacliente = l_utc(10).
            ENDIF.
          ENDIF.
        ENDIF.
* recuperar datos de la entrega.
        IF l_listado_color-fentregacliente IS INITIAL OR
        l_listado_color-fentregacliente = '00000000'.
          SELECT SINGLE handle FROM likp
            INTO likp-handle
           WHERE vbeln = l_listado_color-vbeln_ent.
          IF sy-subrc = 0 AND likp-handle NE ''.
            SELECT * FROM tsege
             WHERE head_hdl = likp-handle
               AND even  = 'WSHDR0003'.
            ENDSELECT.
            IF sy-subrc = 0.
              l_utc = tsege-even_tstfr.
              l_listado_color-fentregacli = l_utc.
              l_listado_color-fentregacliente = l_utc(10).
            ENDIF.
          ENDIF.
        ENDIF.

        IF l_listado_color-fentregacliente = '00000000'.
          CLEAR l_listado_color-fentregacliente.
        ELSEIF NOT ( l_listado_color-fentregacliente IS INITIAL OR
        l_listado_color-fentregacliente = '00000000' ).
          vttk-daten = l_listado_color-fentregacliente.
          l_listado_color-fentregacli = vttk-daten.
          WRITE vttk-daten TO l_listado_color-fentregacliente.
        ENDIF.

      ENDIF.

** SAT 7000010948 - añadir stock por centro si lote tiene decision de
*empleo A
*      PERFORM calcular_stock USING l_listado_color-werks
*                                   l_listado_color-matnr
*                             CHANGING l_listado_color-clabs.

**********************************************************************

      APPEND l_listado_color TO i_listado_color.
    ENDLOOP.

*    DELETE i_listado_color WHERE NOT prdha IN s_prdha.

*Para evitar problemas con los filtros, sólo guardamos la tabla caché si
* se lanza en fondo con uno de estos usuarios.
    IF ( sy-batch = 'X' AND sy-uname = 'EBELLVER' )
       OR p_actpl = 'X'. " sy-slset = zcl_planificacion=>c_variante.
      IF sy-slset = 'ZACT_EST_PED'.   "zcl_planificacion=>c_variante.
        DELETE i_listado_color WHERE ctd_ped_abierta = 0.
      ENDIF.

      LOOP AT i_listado_color INTO l_listado_color.
        CLEAR i_cache.
        MOVE-CORRESPONDING l_listado_color TO i_cache.
*        IF sy-slset = zcl_planificacion=>c_variante.
*          i_cache-variante = zcl_planificacion=>c_variante.
*        ENDIF.
        IF sy-slset = 'ZACT_EST_PED'.
          "Variante para lanzar job de fondo.
          i_cache-variante = sy-slset.
        ENDIF.
        i_cache-pedido = l_listado_color-vbeln.
        i_cache-posicion = l_listado_color-posnr.
        i_cache-cache = 'X'.
        i_cache-fecha_dato = sy-datum.
        i_cache-hora_dato = sy-uzeit.
        i_cache-usuario_dato = sy-uname.
        APPEND i_cache.
      ENDLOOP.

      SORT i_cache.
      LOOP AT i_cache.
        AT NEW posicion.
          CLEAR l_cont.
          DELETE FROM zsd_est_ped WHERE variante = i_cache-variante
                                    AND pedido = i_cache-pedido
                                    AND posicion = i_cache-posicion.
        ENDAT.
        ADD 1 TO l_cont.
        i_cache-contador = l_cont.
        MODIFY i_cache.
      ENDLOOP.

      MODIFY zsd_est_ped FROM TABLE i_cache.
    ENDIF.
  ELSE.
    DATA l_variante TYPE string.
*    IF sy-slset = zcl_planificacion=>c_variante AND p_actpl IS INITIAL.
    IF p_actpl IS INITIAL.
*      l_variante = zcl_planificacion=>c_variante.
      l_variante = 'ZACT_EST_PED'.
    ELSE.
      CLEAR l_variante.
    ENDIF.
    SELECT * FROM zsd_est_ped
      INTO CORRESPONDING FIELDS OF TABLE i_listado_color
     WHERE variante     = l_variante
       AND pedido       IN s_vbeln
       AND vkorg        IN s_vkorg
       AND vtweg        IN s_vtweg
       AND vkbur        IN s_vkbur
       AND vkgrp        IN s_vkgrp
       AND auart        IN s_auart
       AND vbtyp        IN s_vbtyp
       AND vbtyp        IN s_vbtyp
       AND kunnr        IN s_kunnr
       AND kunwe        IN s_kunwe
       AND audat        IN s_audat
       AND vdatu        IN s_vdatu
       AND edatu        IN s_vdatu
       AND matnr        IN s_matnr
       AND bukrs_vf     IN s_bukrs
       AND matkl        IN s_matkl           "Grupo de Artículos
       AND werks        IN s_werks
       AND vbeln_ent    IN s_entre
*       AND prdha        IN s_prdha          "Jerarquía de Productos
       AND mbdat        IN s_mbdat
       AND zzcalidad    IN s_calida
       AND zzgramaje    IN s_gramaj
       AND zzancho      IN s_ancho
       AND zzlargo      IN s_largo
*       AND zzpld        IN s_zzpld
       AND kodat        IN s_kodat
       AND fpickingreal IN s_fpickr
       AND fcr_entrega  IN s_fcrent
       AND wadat_ist    IN s_wadat
       AND lifsk        IN s_lifsk           "Bloqueo de pedidos SD
       AND estado       IN s_estado
*       AND estado_cab   IN s_estcab
*       AND zzestado_pedido IN s_estped      "Status de usuario
*       AND db_potencia IN s_potenc
*       AND vidrio IN s_vidrio
*       AND conector IN s_conect
*       AND tipomodulo IN s_tipomo
*       AND tol_inferior IN s_tol_in
*       AND tol_superior IN s_tol_su
*       AND zh_estandar IN s_estand
*       AND func_visual IN s_funcvi
*       AND zh_bastidor IN s_bastid
*       AND zh_ft IN s_ft
*       AND zh_tp_cel IN s_tp_cel
*       AND zh_cl_cel IN s_cl_cel
*       AND z_devolucion IN s_devol
      .

    IF p_actpl = 'X'.    "sy-slset = zcl_planificacion=>c_variante.
      DELETE i_listado_color WHERE ctd_ped_abierta = 0.
      DELETE FROM zsd_est_ped
       WHERE variante = 'ZACT_EST_PED'  "zcl_planificacion=>c_variante
         AND vbeln IN s_vbeln.
      LOOP AT i_listado_color INTO l_listado_color.
        CLEAR i_cache.
        MOVE-CORRESPONDING l_listado_color TO i_cache.
        i_cache-variante = 'ZACT_EST_PED'.  "zcl_planificacion=>c_variante.
        i_cache-pedido = l_listado_color-vbeln.
        i_cache-posicion = l_listado_color-posnr.
        i_cache-cache = 'X'.
        i_cache-fecha_dato = sy-datum.
        i_cache-hora_dato = sy-uzeit.
        i_cache-usuario_dato = sy-uname.
        APPEND i_cache.
      ENDLOOP.
      SORT i_cache.
      LOOP AT i_cache.
        AT NEW posnr.
          CLEAR l_cont.
          DELETE FROM zsd_est_ped WHERE variante = i_cache-variante
                                    AND pedido   = i_cache-pedido
                                    AND posicion = i_cache-posicion.
        ENDAT.
        ADD 1 TO l_cont.
        i_cache-contador = l_cont.
        MODIFY i_cache.
      ENDLOOP.

      MODIFY zsd_est_ped FROM TABLE i_cache.
    ENDIF.
  ENDIF.

* ini - cvivo - 26/02 - 59709 Optimizar report
  DATA: it_listado LIKE i_listado_color,
        it_inob    TYPE TABLE OF inob WITH HEADER LINE,
        it_ausp    TYPE TABLE OF ausp WITH HEADER LINE,
        lv_atinn1  TYPE atinn,
        lv_atinn2  TYPE atinn.

  DATA: BEGIN OF ls_stock.
          INCLUDE STRUCTURE mchb.
          DATA: objek  TYPE cuobn,
          objnum TYPE objnum,
          cuobj  TYPE cuobj,
          klart  TYPE klassenart,
          ausp   TYPE TABLE OF ausp,
        END OF ls_stock.

  DATA lt_stock LIKE TABLE OF ls_stock WITH HEADER LINE.

  it_listado[] = i_listado_color[].

  SORT it_listado BY matnr werks.
  DELETE ADJACENT DUPLICATES FROM it_listado COMPARING matnr werks.

* CMS -  Añadir control para no procesar tabla sin registros y !NO consumir MCHB entera!!!!!
  IF it_listado IS NOT INITIAL.
    SELECT *
    FROM mchb
    INTO CORRESPONDING FIELDS OF TABLE @lt_stock
          FOR ALL ENTRIES IN @it_listado
          WHERE werks = @it_listado-werks
          AND matnr   = @it_listado-matnr
          AND clabs   > 0.

    LOOP AT lt_stock ASSIGNING FIELD-SYMBOL(<stock>).
      CONCATENATE <stock>-matnr <stock>-charg INTO it_inob-objek.
      <stock>-objek = it_inob-objek.
      it_inob-obtab = 'MCH1'.
      it_inob-klart = '023'.
      <stock>-klart = it_inob-klart.
      APPEND it_inob.
    ENDLOOP.
  ENDIF.

  IF it_inob[] IS NOT INITIAL.

    SELECT *
      FROM inob INTO TABLE it_inob
      FOR ALL ENTRIES IN it_inob
      WHERE klart EQ it_inob-klart
        AND obtab EQ it_inob-obtab
        AND objek EQ it_inob-objek.

    LOOP AT it_inob.
      LOOP AT lt_stock ASSIGNING <stock> WHERE objek = it_inob-objek.
        <stock>-cuobj = it_inob-cuobj.
        <stock>-objnum = it_inob-cuobj.
      ENDLOOP.
    ENDLOOP.

  ENDIF.

  SELECT SINGLE atinn FROM cabn
    INTO lv_atinn1
    WHERE atnam EQ 'LOBM_UDCODE'.

  SELECT SINGLE atinn FROM cabn
    INTO lv_atinn2
    WHERE atnam EQ 'Z_CLIENTE'.

  SELECT *
    FROM ausp INTO TABLE it_ausp
    FOR ALL ENTRIES IN lt_stock
    WHERE objek EQ lt_stock-objnum
      AND klart EQ lt_stock-klart
      AND ( atinn EQ lv_atinn1 OR atinn EQ lv_atinn2 ).

  LOOP AT it_ausp.
    LOOP AT lt_stock ASSIGNING <stock> WHERE objnum = it_ausp-objek.
      APPEND it_ausp TO <stock>-ausp.
    ENDLOOP.
  ENDLOOP.
* fin - cvivo


  LOOP AT i_listado_color INTO l_listado_color.
    IF l_listado_color-estado CS 'F'.
      zcl_ap_alv=>append_color( EXPORTING campo = '' colorc = 'B'
                        CHANGING  tabla_color = l_listado_color-color ).
    ELSEIF l_listado_color-precio_final = 0 AND l_listado_color-kwmeng = 0.
      zcl_ap_alv=>append_color( EXPORTING campo = '' colorc = 'N'
                        CHANGING  tabla_color = l_listado_color-color ).
    ENDIF.


*SAT 7000010948 - añadir stock por centro si lote tiene decision de
*empleo A
*    PERFORM calcular_stock USING l_listado_color-werks
*                                 l_listado_color-matnr
*                           CHANGING l_listado_color-clabs.

*    " cvivo - 27/02/2020 - 59709 Optimizar report
    LOOP AT lt_stock WHERE werks EQ l_listado_color-werks
                       AND matnr EQ l_listado_color-matnr.

      READ TABLE lt_stock-ausp INTO DATA(ausp) WITH KEY atinn = lv_atinn1 " DE
                                                        atwrt = 'DE       A'.

      IF sy-subrc EQ 0.
        READ TABLE lt_stock-ausp INTO ausp WITH KEY atinn = lv_atinn2 " Cliente
                                                    atwrt = l_listado_color-kunnr.

        IF sy-subrc EQ 0.
          l_listado_color-clabs = l_listado_color-clabs + lt_stock-clabs.
        ENDIF.
      ENDIF.
    ENDLOOP.

    MODIFY i_listado_color FROM l_listado_color.
  ENDLOOP.
  SORT i_listado_color.
  i_listado_color_ini = i_listado_color.

ENDFORM.                               " SELECCIONAR_DATOS


*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.
  DATA i_opciones(20)      OCCURS 0 WITH HEADER LINE.

  IF v_autorizado IS INITIAL.
    APPEND 'GRABAR' TO i_opciones.
  ENDIF.

  SET PF-STATUS 'ST_0100' EXCLUDING i_opciones.

  CASE sy-tcode.
    WHEN 'ZEPV'.
      SET TITLEBAR '101'.     "Visualización estado de Pedidos
    WHEN OTHERS.
      SET TITLEBAR '100'.     "Estado de PEdidos de Compras y Ventas.
  ENDCASE.

  IF v_inicio IS INITIAL.
    v_inicio = 'X'.

    o_alv->variant-variant = p_vari.
    o_alv->set_layout( colort = 'COLOR' ).

    o_alv->quitar_opciones( cl_gui_alv_grid=>mc_fc_refresh ).

    o_alv->set_field_text( campo = 'VTEXT' valor = text-ofv ).
    o_alv->set_field_text( campo = 'BEZEI' valor = text-grv ).
    o_alv->set_field_text( campo = 'NOM_CENTRO' valor = text-wrk ).
    o_alv->set_field_text( campo = 'TEXT1' valor = text-vpa ).
    o_alv->set_field_text( campo = 'CLABS' valor = text-clb ).

    o_alv->set_field_noout(
'AUART,LAND1,ZLSCH,KUNWE,LAND1,LANDX,PSTLZ,BSTNK,INCO1,INCO2,ZLSCH,TE' &
'XT1,DETLOTESPED'
).
    o_alv->set_field_noout( 'MATKL,WGBEZ,TRANSPORTE,NETWR' ).

    o_alv->set_field( op = 'CHECKBOX' campo =
    'ST_BLOC,ST_BOOK,ST_SECU,ST_DELI,ZZRED' ).

    IF v_autorizado = 'X'.
      o_alv->set_field_input(
  'ST_BLOC,ST_BOOK,ST_SECU,FASIGNADA,ZZCAUSA_RETRASO,FENTREGACLIENTE' ).
*Los campos fechas "editables" tengo que convertirlos a texto, pero
*entonces no ordenan correctamente,
*para minimizar el problema tenemos duplicada la columna con su valor en
*formato fecha,
* y mostramos los que tocan en función de si los editamos o no
      IF sy-tcode = 'ZEP' OR sy-tcode = 'SE38'.
        "OR sy-tcode = 'ZPLANIFICACION'.
        sy-tcode = 'ZEP'.
*o_alv->set_field_input(
*'FENTREGACLIENTE,FASIGNADA,WERKS,LIFSK,MBDAT_TEXT,ZZPLD_TEXT,LDDAT_TEXT
*,ROUTE' ).
        o_alv->set_field_input(
        'FENTREGACLIENTE,FASIGNADA,LIFSK,MBDAT_TEXT,LDDAT_TEXT' ).
        "Adaptación a Hinojosa.
        o_alv->set_field_noout( 'FENTREGACLI,FASIGN,MBDAT' ).
*      ELSEIF sy-tcode = 'ZLE'.
*        o_alv->set_field_input( 'FENTREGACLIENTE,ROUTE' ).
*o_alv->set_field_noout(
*'FENTREGACLI,FASIGNADA,MBDAT_TEXT,ZZPLD_TEXT,LDDAT_TEXT' ).
*      ELSEIF sy-tcode = 'ZDP'.
*        o_alv->set_field_input( 'ZZRED' ).
*o_alv->set_field_noout(
*'FENTREGACLIENTE,FASIGNADA,MBDAT_TEXT,ZZPLD_TEXT,LDDAT_TEXT' ).
      ELSE.
        o_alv->set_field_noout(
        'FENTREGACLIENTE,FASIGNADA,MBDAT_TEXT,ZZPLD_TEXT,LDDAT_TEXT' ).
      ENDIF.
    ENDIF.

    o_alv->set_orden( 'VKORG,VBELN' ).
    o_alv->show( CHANGING tabla = i_listado_color ).
  ENDIF.

ENDMODULE.                 " STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK'.
*      o_alv->comprobar_cambios( ).
*      i_listado_color_aux = i_listado_color.
*      SORT: i_listado_color_ini, i_listado_color_aux.
*      IF i_listado_color_ini NE i_listado_color_aux.
*        IF zcl_ap_popup=>confirmar( titulo = 'Datos sin guardar'
*                           texto  = 'Existen datos manuales no grabados'
*                  texto2 = '¿Está seguro de salir sin guardar?' ) = 'X'.
*          LEAVE TO SCREEN 0.
*        ENDIF.
*      ELSE.
      LEAVE TO SCREEN 0.
*      ENDIF.
    WHEN 'GRABAR'.
      o_alv->comprobar_cambios( ).
      o_alv->refrescar_grid( ).
      o_alv->comprobar_cambios( ).

      PERFORM grabar_cambios.

      o_alv->refrescar_grid( ).
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0100  INPUT

*&---------------------------------------------------------------------*
*&      Form  SELECCIONAR_VENTAS
*&---------------------------------------------------------------------*
FORM seleccionar_ventas .
  DATA: i_vbfa      TYPE TABLE OF vbfa WITH HEADER LINE,
        i_vbap      TYPE TABLE OF vbap WITH HEADER LINE,
        o_lote_ped  TYPE REF TO   zcl_clas_lote,
        l_campo(30),
        i_konv      TYPE TABLE OF konv WITH HEADER LINE,
        l_semana    TYPE          scal-week,
        i_likp      TYPE TABLE OF likp,
        l_status    TYPE          j_status,
        l_porc      TYPE          p DECIMALS 2,
        l_aufk      TYPE          aufk,
        BEGIN OF i_pedidos OCCURS 0,
          kunnr            LIKE vbak-kunnr,
          kunwe            LIKE vbpa-kunnr,
          vbeln            LIKE vbak-vbeln,
          vkorg            LIKE vbak-vkorg,
          vtweg            LIKE vbak-vtweg,
          vkgrp            LIKE vbak-vkgrp,
          vkbur            LIKE vbak-vkbur,
          auart            LIKE vbak-auart,
          audat            LIKE vbak-audat,
          ernam            LIKE vbak-ernam,
          bstnk            LIKE vbak-bstnk,
          lifsk            LIKE vbak-lifsk,
          knumv            LIKE vbak-knumv,
          bukrs_vf         LIKE vbak-bukrs_vf,
          vdatu            LIKE vbak-vdatu,
          augru            LIKE vbak-augru,
          augru_txt        LIKE tvaut-bezei,
          posnr            LIKE vbap-posnr,
          pstyv            LIKE vbap-pstyv,
          matnr            LIKE vbap-matnr,
          arktx            LIKE vbap-arktx,
          prodh            LIKE vbap-prodh,
          kwmeng           LIKE vbap-kwmeng,    "Cantidad Pedido Confirmada
          wemng            LIKE afpo-wemng,     "Cantidad Fabricada
          vrkme            LIKE vbap-vrkme,
          netwr            LIKE vbap-netwr,
          waerk            LIKE vbap-waerk,
          werks            LIKE vbap-werks,
          vbtyp            LIKE vbak-vbtyp,
          edatu            LIKE vbep-edatu,
          lddat            LIKE vbep-lddat,
          kzwi2            LIKE vbap-kzwi2,
          mwsbp            LIKE vbap-mwsbp,
          zzcausa_retraso  LIKE vbap-zzcausa_retraso,
          zzcalidad        LIKE mara-zzcalidad,
          zzgramaje        LIKE mara-zzgramaje,
          zzancho          LIKE mara-zzancho,
          zzlargo          LIKE mara-zzlargo,
          aufnr            LIKE vbap-aufnr,
          abgru            LIKE vbap-abgru,
          abgru_txt        LIKE tvagt-bezei,
          ps_psp_pnr       LIKE vbap-ps_psp_pnr,
          mbdat            LIKE vbep-mbdat,
          erdat            LIKE vbap-erdat,
          banfn            LIKE vbep-banfn,
          bnfpo            LIKE vbep-bnfpo,
          zzestado_cab     LIKE vbak-zzestado_cab,
          zzestado         LIKE vbap-zzestado,
          zzfecha_prim_sol LIKE vbap-zzfecha_prim_sol,
*           zzred LIKE vbap-zzred,
          route            LIKE vbap-route,
          lprio            LIKE vbap-lprio,
          lprio_txt        LIKE tprit-bezei,
          matkl            LIKE vbap-matkl,
*           zzpld     LIKE vbap-zzpld,
        END OF i_pedidos,
        l_pedidos       LIKE          i_pedidos,
        i_vbeln         TYPE TABLE OF vbeln WITH HEADER LINE,
        l_total         TYPE          dmbtrv,
        i_partidas      TYPE TABLE OF bsid WITH HEADER LINE,
        l_cambio_pedido,
        l_nuevo_pedido,
        l_ctd_entregada TYPE          vbap-kwmeng,
        l_estado_cab    TYPE          vbak-zzestado_cab,
        o_mat           TYPE REF TO   zcl_mat_slk,
        destino         LIKE          vbap-werks.

  CREATE OBJECT o_mat.

  FIELD-SYMBOLS <campo>.

  RANGES: r_vbeln FOR vbak-vbeln.

  IF NOT s_entre[] IS INITIAL OR
     NOT s_wadat[] IS INITIAL OR
     NOT s_kodat[] IS INITIAL OR
     NOT r_fecha_pick[] IS INITIAL.
    SELECT * FROM likp
      INTO TABLE i_likp
     WHERE vbeln IN s_entre
       AND bldat IN r_fecha_pick
       AND kodat IN s_kodat
       AND wadat_ist IN s_wadat.

    SELECT vbelv FROM vbfa
      INTO TABLE i_vbeln
      FOR ALL ENTRIES IN i_likp
     WHERE vbtyp_n IN ('J','T')
       AND vbeln = i_likp-vbeln
       AND stufe = '00'.

    LOOP AT i_vbeln.
      CLEAR r_vbeln.
      r_vbeln-option = 'EQ'.
      r_vbeln-sign   = 'I'.
      r_vbeln-low    = i_vbeln.
      COLLECT r_vbeln.
    ENDLOOP.
  ENDIF.


  IF sy-batch = 'X' AND p_actpl = ''.
    DATA i_cache TYPE TABLE OF zsd_est_ped WITH HEADER LINE.
    o_sgpi->texto( 'Verificando borrados' ).
    SELECT * FROM zsd_est_ped
      INTO TABLE i_cache
     WHERE estado = ''.
*     WHERE ( variante = '' OR variante IS NULL )
*       AND estado = ''.

    LOOP AT i_cache.
      SELECT SINGLE * FROM vbap
       WHERE vbeln = i_cache-vbeln
         AND posnr = i_cache-posnr.
      IF sy-subrc NE 0.
        DELETE FROM zsd_est_ped
         WHERE variante = i_cache-variante
           AND vbeln = i_cache-vbeln
           AND posnr = i_cache-posnr.
      ENDIF.
    ENDLOOP.
  ENDIF.

  o_sgpi->texto( 'Seleccionando Pedidos de Ventas' ).
  TRY.
      SELECT *
        INTO CORRESPONDING FIELDS OF TABLE i_pedidos
        FROM vbak   JOIN vbap ON vbak~vbeln = vbap~vbeln
                    JOIN vbep ON vbap~vbeln = vbep~vbeln
                             AND vbap~posnr = vbep~posnr
                    JOIN mara ON vbap~matnr = mara~matnr
       WHERE vbak~vbeln IN r_vbeln
         AND vbak~vbeln IN s_vbeln
         AND vbtyp      IN s_vbtyp
         AND vkorg      IN s_vkorg
         AND vtweg      IN s_vtweg
         AND vkbur      IN s_vkbur
         AND vkgrp      IN s_vkgrp
         AND auart      IN s_auart
         AND vbak~kunnr IN s_kunnr
         AND vbak~kunnr IN s_kunwe
         AND audat      IN s_audat
*         AND vdatu      IN s_vdatu
         AND vbap~matnr IN s_matnr
         AND bukrs_vf   IN s_bukrs
         AND vbap~matkl IN s_matkl
         AND zzcalidad  IN s_calida
         AND zzgramaje  IN s_gramaj
         AND zzancho    IN s_ancho
         AND zzlargo    IN s_largo
         AND werks      IN s_werks
         AND lifsk      IN s_lifsk
*         AND prodh      IN s_prdha
         AND edatu      IN s_vdatu
         AND mbdat      IN s_mbdat
*         AND zzpld     IN s_zzpld
         AND etenr      = '0001'.
    CATCH cx_sy_open_sql_db.
      MESSAGE 'Fallo en la selección. Indique menos parámetros' TYPE 'E'.
  ENDTRY.

  IF sy-batch IS INITIAL.
    o_sgpi->texto( 'Recogiendo Pedidos Finalizados' ).
    LOOP AT i_pedidos
      WHERE zzestado_cab = 'FT'
      .
*Si lo que recuperamos de cache tiene más de una entrega, lo volvemos a
*añadir al listado general
      SELECT COUNT( * ) FROM vbfa
        INTO l_cont
       WHERE vbelv = i_pedidos-vbeln
         AND posnv = i_pedidos-posnr
         AND posnn < '900000'
         AND vbtyp_n IN ('J','T')
         AND vbtyp_v = i_pedidos-vbtyp
         AND stufe = '00'.
      IF l_cont <= 1.
* FIN
        SELECT * FROM zsd_est_ped
         APPENDING CORRESPONDING FIELDS OF TABLE i_listado_color
         WHERE ( variante = '' OR variante IS NULL )
           AND vbeln = i_pedidos-vbeln
           AND posnr = i_pedidos-posnr
*           AND estado_cab      IN s_estcab       "Estado de cabecera
           AND estado          IN s_estado        "Estado de posición
*           AND zzestado_pedido IN s_estped       "Status de usuario.
          .
        DELETE i_pedidos.
      ENDIF.
    ENDLOOP.
  ENDIF.



  DATA o_bi TYPE REF TO zcl_ap_batch_input.
  CREATE OBJECT o_bi.

  o_sgpi->texto( texto1 = 'Analizando Pedidos de Ventas' ).
  SORT i_pedidos.
  CREATE OBJECT o_lote_ped.

  o_sgpi->get_filas_tabla( i_pedidos[] ).
  LOOP AT i_pedidos.
    o_sgpi->porcentaje( texto = 'Analizando Pedidos de Ventas' cantidad = 50
    ).

    CLEAR l_nuevo_pedido.
    AT NEW vbeln.
      l_nuevo_pedido = 'X'.

*   *      l_estado_cab = zcl_ped_sd=>get_estado_cabecera( vbeln = i_pedidos-vbeln
*      ).

      CALL METHOD zcl_ped_sd=>get_estado_cabecera
        EXPORTING
          vbeln  = i_pedidos-vbeln
        IMPORTING
          estado = l_estado_cab.

      UPDATE vbak
         SET zzestado_cab = l_estado_cab
       WHERE vbeln = i_pedidos-vbeln.
    ENDAT.
*
*    IF NOT l_estado_cab IN s_estcab.
*      CONTINUE.
*    ENDIF.

* CHEQUEAMOS AUTORIZACIONES Y RECUPERAMOS DATOS:
    AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
             ID 'VKORG' FIELD i_pedidos-vkorg
             ID 'VTWEG' DUMMY  "FIELD i_pedidos-vtweg
             ID 'SPART' DUMMY
             ID 'ACTVT' FIELD '03'.

    IF sy-subrc = 0.
      destino = i_pedidos-kunwe+1(4).
      AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
                  ID 'ACTVT' FIELD '03'
                  ID 'WERKS' FIELD destino.
      IF sy-subrc = 0.
        CLEAR l_listado.
        SELECT SINGLE erdat FROM vbak
          INTO i_pedidos-erdat
         WHERE vbeln = i_pedidos-vbeln.

        MOVE-CORRESPONDING i_pedidos TO l_listado.
        l_pedidos = i_pedidos.

        l_listado-prdha = l_pedidos-prodh.
        l_listado-estado_cab = l_estado_cab.
* ESTADO DE POSICIÓN DE PEDIDOS DE VENTAS.
        l_listado-estado = zcl_ap_pedido_sd=>get_estado_posicion( vbeln =
        i_pedidos-vbeln
                                             posnr = i_pedidos-posnr ).

        UPDATE vbap
           SET zzestado = l_listado-estado
         WHERE vbeln    = i_pedidos-vbeln
           AND posnr    = i_pedidos-posnr.

        IF NOT l_listado-estado IN s_estado.
          CONTINUE.
        ENDIF.

        SELECT SINGLE * FROM kna1
         WHERE kunnr = l_listado-kunnr.
        l_listado-name1 = kna1-name1.
        l_listado-pstlz = kna1-pstlz.

        CLEAR l_cambio_pedido.
*IF l_nuevo_pedido = 'X'.                    "Arterisco dado que no
*detecta que es nuevo pedido.
        CLEAR vbpa.
        SELECT SINGLE * FROM vbpa                  "Destinatario de Mercancías
         WHERE vbeln = l_listado-vbeln
           AND posnr = '000000'
           AND parvw = 'WE'.

*        SELECT SINGLE * FROM *vbpa
*         WHERE vbeln = l_listado-vbeln
*           AND posnr = '000000'
*           AND parvw = 'Z1'.

        CLEAR vbkd.
        SELECT SINGLE * FROM vbkd
         WHERE vbeln = l_listado-vbeln
           AND posnr = '000000'.

        l_listado-zlsch = vbkd-zlsch.
        SELECT SINGLE text1 FROM t042z INTO l_listado-text1
          WHERE land1 = 'ES'
            AND zlsch = l_listado-zlsch.

        SELECT SINGLE vtext FROM  tvlst
        "Descripción del Bloqueo de Entrega
        INTO l_listado-lifsk_t
        WHERE spras  = sy-langu
        AND lifsp  = l_listado-lifsk.

        SELECT SINGLE bezei FROM  tprit
        "Descripción de la Prioridad Pedido
        INTO l_listado-lprio_txt
        WHERE spras  = sy-langu
        AND lprio  = l_listado-lprio.

        SELECT SINGLE bezei FROM  tvaut
        "Descripción del Motivo de Pedido
        INTO l_listado-augru_txt
        WHERE spras  = sy-langu
        AND augru  = l_listado-augru.

        SELECT SINGLE bezei FROM  tvagt
        "Descripción del Motivo de Rechazo
        INTO l_listado-abgru_txt
        WHERE spras  = sy-langu
        AND abgru  = l_listado-abgru.

        REFRESH i_konv.
        SELECT * FROM konv
          INTO TABLE i_konv
         WHERE knumv = l_pedidos-knumv
           AND ( kschl = 'ZPRP'
             OR  kschl = 'ZKF0' ).

*        IF p_anti = 'X'.
*i_partidas[] = zcl_ped_sd=>get_anticipos_pedido( vbeln =
*i_pedidos-vbeln ).
*DELETE i_partidas WHERE blart = 'DR'. "Quitamos parte compensada por
*facturas
*        ENDIF.
*      ENDIF.

        IF NOT vbpa-kunnr IN s_kunwe.
          CONTINUE.
        ENDIF.

        l_listado-kunnr = vbpa-kunnr.
        l_listado-kunwe = vbpa-kunnr.
        l_listado-land1 = vbpa-land1.
        l_listado-zlsch = vbkd-zlsch.
        l_listado-inco1 = vbkd-inco1.
        l_listado-inco2 = vbkd-inco2.
        l_listado-vendedor = *vbpa-pernr.

        SELECT SINGLE * FROM kna1
         WHERE kunnr = l_listado-kunnr.
        l_listado-name1 = kna1-name1.
        l_listado-pstlz = kna1-pstlz.

        IF NOT l_listado-vendedor IS INITIAL.
          SELECT SINGLE ename FROM pa0001
            INTO l_listado-vendedor_t
           WHERE pernr = l_listado-vendedor.
        ENDIF.

        IF NOT l_listado-banfn IS INITIAL.
          SELECT SINGLE ebeln ebelp FROM eban
            INTO (l_listado-ebeln, l_listado-ebelp)
           WHERE banfn = l_listado-banfn
             AND bnfpo = l_listado-bnfpo.
        ENDIF.

* Recupero la cantidad fabricada de la orden de producción.
        CLEAR: l_aufk-aufnr, l_listado-wemng.
        SELECT SINGLE aufnr FROM aufk INTO l_aufk-aufnr
           WHERE auart  IN ('ZI02','ZI04')
             AND autyp   = '40'
             AND zzebeln1 = l_listado-vbeln
             AND zzebelp1 = l_listado-posnr.
        SELECT SINGLE wemng FROM afpo INTO l_listado-wemng
        "Cantidad Fabricada
        WHERE aufnr = l_aufk-aufnr
         AND posnr = '0001'.
        l_listado-aufnr = l_aufk-aufnr.     "Recuperar nº de orden de producción
****
        CASE l_listado-estado.
          WHEN ''.
            l_listado-ctd_ped_abierta = l_listado-kwmeng.
          WHEN 'RE'.
            l_listado-ctd_ped_abierta = 0.
          WHEN 'ET' OR 'FT'.
*          l_listado-ctd_ped_abierta = 0.
          WHEN OTHERS.
            l_ctd_entregada = zcl_ped_sd=>get_cantidad_entregada( vbeln =
            l_listado-vbeln posnr = l_listado-posnr ).
            IF l_listado-kwmeng > 0.
              l_listado-ctd_ped_abierta = l_listado-kwmeng - l_ctd_entregada.
            ELSEIF l_listado-kwmeng = 0.
              l_listado-ctd_ped_abierta = 0.
            ENDIF.
        ENDCASE.

* Obtenemos las características indicadas en el pedido
*      o_lote_ped->get_datos_pedido( vbeln = l_listado-vbeln
*                                    posnr = l_listado-posnr
*                                    opt   = 'X' ).
*      IF o_lote_ped->i_car_char[] IS INITIAL.
*        l_listado-zh_estandar = 'SI'.
*      ELSE.
*        LOOP AT o_lote_ped->i_car_char INTO o_lote_ped->car_char.
*CONCATENATE 'L_LISTADO-' o_lote_ped->car_char-charact INTO l_campo.
*          ASSIGN (l_campo) TO <campo>.
*          IF sy-subrc = 0.
*            <campo> = o_lote_ped->car_char-value_char.
*          ENDIF.
*        ENDLOOP.
*      ENDIF.
*
*      IF NOT l_listado-tx_cal_vis_sap IS INITIAL AND
*         NOT l_listado-var_cal_pot_sap IS INITIAL AND
*         NOT l_listado-zh_estandar IS INITIAL.
*zcl_clas_lote=>get_func_visual( EXPORTING estandar =
*l_listado-zh_estandar
*calidad_visual = l_listado-tx_cal_vis_sap
*calidad_funcional = l_listado-var_cal_pot_sap
*IMPORTING func_visual = l_listado-func_visual ).
*      ENDIF.

        l_listado-texto_interno = zcl_ped_sd=>get_texto_string( vbeln =
        l_listado-vbeln
                                                  id    = 'Z001' ).
        l_listado-texto_externo = zcl_ped_sd=>get_texto_string( vbeln =
        l_listado-vbeln
                                                  id    = 'Z002' ).

        IF i_pedidos-abgru NE ''.
          CLEAR: l_listado-kwmeng, l_listado-precio_final.
        ELSE.
          READ TABLE i_konv WITH KEY kposn = l_listado-posnr
                                     kschl = 'ZPRP'.
          IF sy-subrc = 0.
            l_listado-transporte = i_konv-kwert.
          ENDIF.
        ENDIF.

        l_listado-precio_final = i_pedidos-netwr + i_pedidos-mwsbp.
        IF i_pedidos-waerk NE 'EUR'.
          l_listado-precio_final = zcl_ap_doc_fi=>convertir_moneda_eur( importe =
          l_listado-precio_final
                  moneda  = i_pedidos-waerk
                  fecha   = i_pedidos-audat ).
        ENDIF.
*EBA 24062014 Verificamos si tiene más de un reparto, y si es así,
*mostramos el último.
        l_listado-fasign = i_pedidos-edatu.
        SELECT MAX( edatu ) MAX( mbdat ) FROM vbep
          INTO (l_listado-fasign, l_listado-mbdat)
         WHERE vbeln = l_listado-vbeln
           AND posnr = l_listado-posnr.

        WRITE l_listado-fasign TO l_listado-fasignada.

        WRITE i_pedidos-mbdat TO l_listado-mbdat_text.

*      WRITE i_pedidos-zzpld TO l_listado-zzpld_text.
        WRITE i_pedidos-lddat TO l_listado-lddat_text.

        IF i_pedidos-zzfecha_prim_sol IS INITIAL.
          l_listado-fsolicitada = zcl_ap_control_cambios=>get_primer_valor_campo(
          objectclas = 'VERKBELEG'
                              objectid   = l_listado-vbeln
                              tabname    = 'VBEP'
                              fname      = 'EDATU' ).
          IF l_listado-fsolicitada IS INITIAL OR l_listado-fsolicitada = ''.
            l_listado-fsolicitada  = i_pedidos-edatu.
          ENDIF.

          UPDATE vbap
             SET zzfecha_prim_sol = l_listado-fsolicitada
           WHERE vbeln = i_pedidos-vbeln
             AND posnr = i_pedidos-posnr.
        ELSE.
          l_listado-fsolicitada  = i_pedidos-zzfecha_prim_sol.
        ENDIF.

        l_semana = zcl_ap_fechas=>get_semana( l_listado-fsolicitada ).
        l_listado-sem_fsolicitada = l_semana+4(2).

        l_semana = zcl_ap_fechas=>get_semana( i_pedidos-edatu ).
        l_listado-sem_entrega = l_semana+4(2).

        l_semana = zcl_ap_fechas=>get_semana( i_pedidos-mbdat ).
        l_listado-sem_mbdat = l_semana+4(2).

        l_status = zcl_ped_sd=>get_status_activo( vbeln = l_listado-vbeln
                                               posnr = l_listado-posnr ).

* Verificamos si tenemos que corregir el status de la posición
        IF l_status NE 'E0004' AND ( l_listado-estado = 'ET' OR
        l_listado-estado(1) = 'F' ).
          SELECT SINGLE * FROM vbup
           WHERE vbeln = l_listado-vbeln
             AND posnr = l_listado-posnr.
          IF sy-subrc = 0.
            IF  ( vbup-lfgsa = 'C' AND vbup-lfsta = 'C' )
            "Status de entrega de la posición
            OR ( vbup-fksaa = 'C' AND l_listado-pstyv = 'ZTAS' ).
              l_status = 'E0004'.
* Solo cambiamos pedidos durante el proceso batch
              IF sy-batch = 'X'.
                zcl_ped_sd=>cambiar_status_p2p( vbeln = l_listado-vbeln
                                                posnr = l_listado-posnr
                                              nuevo_status = l_status ).
                l_cambio_pedido = 'X'.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

        IF i_pedidos-abgru NE ''.
          IF l_status NE 'E0001'.
            SELECT SINGLE * FROM vbup
             WHERE vbeln = l_listado-vbeln
               AND posnr = l_listado-posnr.
            IF sy-subrc = 0.
              IF vbup-absta = 'C' AND ( vbup-gbsta = 'C' OR vbup-gbsta = '' ).
                l_status = 'E0001'.
* Solo cambiamos pedidos durante el proceso batch
                IF sy-batch = 'X' AND p_jobol = ''.
                  zcl_ped_sd=>cambiar_status_p2p( vbeln = l_listado-vbeln
                                                  posnr = l_listado-posnr
                                               nuevo_status = l_status ).
                  l_cambio_pedido = 'X'.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ELSEIF l_status = 'E0001'.
          SELECT SINGLE * FROM vbup
           WHERE vbeln = l_listado-vbeln
             AND posnr = l_listado-posnr.
          IF sy-subrc = 0.
            IF vbup-lfgsa = 'C' AND vbup-lfsta = 'C'.
              "Status de entrega de la posición
              l_status = 'E0004'.
            ELSE.
              l_status = 'E0003'.
            ENDIF.
* Solo cambiamos pedidos durante el proceso batch
            IF sy-batch = 'X' AND p_jobol = ''.
              zcl_ped_sd=>cambiar_status_p2p( vbeln = l_listado-vbeln
                                              posnr = l_listado-posnr
                                              nuevo_status = l_status ).
              l_cambio_pedido = 'X'.
            ENDIF.
          ENDIF.
        ENDIF.

*      CASE l_status.
*WHEN 'E0001'. l_listado-st_bloc = 'X'. l_listado-zzestado_pedido =
*'BLOC'.
*WHEN 'E0002'. l_listado-st_book = 'X'. l_listado-zzestado_pedido =
*'BOOK'.
*WHEN 'E0003'. l_listado-st_secu = 'X'. l_listado-zzestado_pedido =
*'SECU'.
*WHEN 'E0004'. l_listado-st_deli = 'X'. l_listado-zzestado_pedido =
*'DELI'.
*      ENDCASE.

*      IF NOT l_listado-zzestado_pedido IN s_estped.
*        CONTINUE.
*      ENDIF.

        LOOP AT i_partidas WHERE posn2 = l_listado-posnr.
          IF i_partidas-shkzg = 'H'.
*l_listado-anticipo = l_listado-anticipo + i_partidas-dmbtr +
*i_partidas-mwsts.
          ELSE.
*l_listado-anticipo = l_listado-anticipo - i_partidas-dmbtr -
*i_partidas-mwsts..
          ENDIF.
        ENDLOOP.
        LOOP AT i_partidas WHERE posn2 = '000000'.
          IF i_partidas-shkzg = 'H'.
*l_listado-anticipo_cab = l_listado-anticipo_cab + i_partidas-dmbtr +
*i_partidas-mwsts.
          ELSE.
*l_listado-anticipo_cab = l_listado-anticipo_cab - i_partidas-dmbtr -
*i_partidas-mwsts.
          ENDIF.
        ENDLOOP.
*      IF l_listado-anticipo_cab NE 0.
*        SELECT * FROM vbap
*          INTO TABLE i_vbap
*         WHERE vbeln = l_listado-vbeln.
*        DESCRIBE TABLE i_vbap LINES sy-tfill.
*        IF sy-tfill > 1.
*          CLEAR l_total.
*          LOOP AT i_vbap.
**            l_total = l_total + i_vbap-kzwi2 + i_vbap-kzwi5 +
*i_vbap-mwsbp.
*            l_total = l_total + i_vbap-netwr + i_vbap-mwsbp.
*          ENDLOOP.
*          IF l_total NE 0.
*l_listado-anticipo_cab = l_listado-anticipo_cab * (
*l_listado-precio_final / l_total ).
*          ENDIF.
*        ENDIF.
*      ENDIF.
*      l_total = l_listado-anticipo + l_listado-anticipo_cab.
*      IF l_total NE 0.
*        IF l_listado-precio_final NE 0.
*          l_porc = 100 * l_total / l_listado-precio_final.
*          IF l_porc > 999.
*            l_listado-porc_cobro = 999.
*          ELSE.
*            l_listado-porc_cobro = l_porc.
*          ENDIF.
*        ENDIF.
*      ENDIF.

        IF l_listado-fcr_entrega IN s_fcrent.

* Añadimos caracteristicas de material
*        zest_car_mat = o_mat->get_est_cla( l_listado-matnr ).
*        l_listado-db_potencia = zest_car_mat-db_potencia.
*        l_listado-vidrio = zest_car_mat-vidrio.
*        l_listado-conector = zest_car_mat-conector.
*        l_listado-tipomodulo = zest_car_mat-tipomodulo.
*        l_listado-tol_inferior = zest_car_mat-tol_inferior.
*        l_listado-tol_superior = zest_car_mat-tol_superior.
*
*        IF l_listado-zh_bastidor IS INITIAL.
*l_listado-zh_bastidor = zcl_planificacion=>c_val_def_bastidor.
*        ENDIF.
*
*        IF l_listado-zh_estandar IS INITIAL.
*l_listado-zh_estandar = zcl_planificacion=>c_val_def_estandar.
*        ENDIF.
*
*        IF l_listado-func_visual IS INITIAL.
*l_listado-func_visual = zcl_planificacion=>c_val_def_func_visual.
*        ENDIF.

          APPEND l_listado TO i_listado.
        ENDIF.

        AT END OF vbeln.
          IF l_cambio_pedido = 'X' AND sy-batch = 'X' AND p_jobol = ''.
            COMMIT WORK AND WAIT.
            o_bi->inicio( ).
            o_bi->dynpro( program = 'SAPMV45A' dynpro = '0102').
            o_bi->campos( campo = 'BDC_OKCODE' valor = '/00').
            o_bi->campos( campo = 'VBAK-VBELN' valor = l_listado-vbeln ).
            o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001').
            o_bi->campos( campo = 'BDC_OKCODE' valor = '=KBES').
            o_bi->dynpro( program = 'SAPMV45A' dynpro = '4002').
            SELECT SINGLE * FROM vbak
             WHERE vbeln = l_listado-vbeln.
            IF vbak-bstzd IS INITIAL.
              o_bi->campos( campo = 'VBAK-BSTZD' valor = '.').
            ELSEIF vbak-bstzd = '.'.
              o_bi->campos( campo = 'VBAK-BSTZD' valor = '').
            ENDIF.
            o_bi->campos( campo = 'BDC_OKCODE' valor = '=SICH').
            o_bi->llamar_transaccion( tcode = 'VA02' modo = 'N').
          ENDIF.
        ENDAT.
      ENDIF.
    ENDIF.
  ENDLOOP.

  o_sgpi->texto( 'Bucando entregas...' ).

  DATA: i_listado_aux TYPE TABLE OF zsd_estado_pedidos,
        i_vbfa2       TYPE TABLE OF vbfa WITH HEADER LINE,
        l_cent.

  i_listado_aux = i_listado.
  CLEAR i_listado.

  LOOP AT i_listado_aux INTO l_listado.
    SELECT * FROM vbfa
      INTO TABLE i_vbfa2
     WHERE vbelv = l_listado-vbeln
       AND posnv = l_listado-posnr
       AND posnn < '900000'
       AND vbtyp_n IN ('J','T')
       AND vbtyp_v = l_listado-vbtyp
       AND stufe = '00'.

    REFRESH i_vbfa.
    LOOP AT i_vbfa2 INTO i_vbfa.
      SELECT SINGLE uecha FROM lips
        INTO lips-uecha
       WHERE vbeln = i_vbfa-vbeln
         AND posnr = i_vbfa-posnn.
      IF sy-subrc = 0 AND NOT lips-uecha IS INITIAL.
        i_vbfa-posnn = lips-uecha.
      ENDIF.
      CLEAR: i_vbfa-erdat, i_vbfa-erzet.
      COLLECT i_vbfa.
    ENDLOOP.

    CLEAR l_cent.
    LOOP AT i_vbfa.
      IF l_cent = 'X'.
        CLEAR: l_listado-kwmeng, l_listado-precio_final,
               l_listado-transporte, l_listado-wemng,
*               l_listado-anticipo,
*               l_listado-anticipo_cab,
*               l_listado-porc_cobro,
               l_listado-netwr, l_listado-ctd_ped_abierta.
      ENDIF.
      l_listado-vbeln_ent = i_vbfa-vbeln.
      l_listado-posnr_ent = i_vbfa-posnn.

      SELECT SUM( lfimg ) FROM lips JOIN vbup ON lips~vbeln = vbup~vbeln
                                             AND lips~posnr = vbup~posnr
        INTO l_listado-pikmg
       WHERE lips~vbeln = l_listado-vbeln_ent
         AND ( lips~posnr = l_listado-posnr_ent
            OR uecha = l_listado-posnr_ent )
         AND kosta = 'C'.

      IF i_vbfa-rfmng IS INITIAL.
        SELECT SINGLE * FROM lips
         WHERE vbeln = l_listado-vbeln_ent
           AND posnr = l_listado-posnr_ent.
        IF sy-subrc = 0.
          IF lips-lfimg = 0.
            l_listado-lfimg = lips-kcmeng.
          ELSE.
            l_listado-lfimg = lips-lfimg.
          ENDIF.
        ENDIF.
      ELSE.
        l_listado-lfimg = i_vbfa-rfmng.
      ENDIF.
      CASE l_listado-estado.
        WHEN ''.
          l_listado-ctd_ped_abierta = l_listado-kwmeng.
*        WHEN 'ET' OR 'FT'.
*          l_listado-ctd_ped_abierta = 0.
        WHEN OTHERS.
          l_ctd_entregada = zcl_ped_sd=>get_cantidad_entregada( vbeln =
          l_listado-vbeln posnr = l_listado-posnr ).
          IF l_listado-kwmeng > 0.
            l_listado-ctd_ped_abierta = l_listado-kwmeng - l_ctd_entregada.
          ELSEIF l_listado-kwmeng = 0.
            l_listado-ctd_ped_abierta = 0.
          ENDIF.
      ENDCASE.
*EN CASO DE SER DEVOLUCIONES O ABONOS, LOS VALORES SE VUELVEN NEGATIVOS.
      IF l_listado-vbtyp = 'H' OR l_listado-vbtyp = 'K' .
        "DEVOLUCIONES Y ABONOS * -1
        l_listado-precio_final = l_listado-precio_final * -1.
        l_pedidos-netwr        = l_pedidos-netwr * -1.
        i_pedidos-netwr        = i_pedidos-netwr * -1.
        l_pedidos-mwsbp        = l_pedidos-mwsbp  * -1.
        l_listado-transporte   = l_listado-transporte * -1.
        l_listado-ctd_ped_abierta = l_listado-ctd_ped_abierta * -1.
        l_listado-kwmeng       = l_listado-kwmeng * -1.
        l_ctd_entregada        = l_ctd_entregada  * -1.
      ENDIF.
      IF l_listado-vbtyp = 'H' OR l_listado-vbtyp = 'K' .
        "DEVOLUCIONES Y ABONOS * -1
        l_listado-lfimg = l_listado-lfimg * -1.
        l_listado-pikmg = l_listado-pikmg * -1.
      ENDIF.
      SELECT SINGLE erdat wadat_ist kodat FROM likp
      INTO (l_listado-fcr_entrega, l_listado-wadat_ist, l_listado-kodat)
     WHERE vbeln = l_listado-vbeln_ent.

      l_semana = zcl_ap_fechas=>get_semana( l_listado-kodat ).
      l_listado-sem_picking = l_semana+4(2).

      l_cent = 'X'.
      APPEND l_listado TO i_listado.
    ENDLOOP.
    IF sy-subrc NE 0.
      APPEND l_listado TO i_listado.
    ENDIF.
  ENDLOOP.

  DELETE i_listado WHERE NOT vbeln_ent IN s_entre.



ENDFORM.                    " SELECCIONAR_VENTAS

*&---------------------------------------------------------------------*
*&      Form  cambiar_cab_pedido_sd
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM cambiar_cab_pedido_sd .
  DATA o_bi TYPE REF TO zcl_ap_batch_input.
  DATA: l_mensaje TYPE bapireturn1-message,
        l_fecha   TYPE d.

  l_fecha = zcl_ap_fechas=>string2fecha( l_listado_color-fasignada ).

  CREATE OBJECT o_bi.

  o_bi->inicio( ).
  IF l_listado_color-vbeln(4) NE '0044'.
* Documento de ventas    Acceso    Modificar
    o_bi->dynpro( program = 'SAPMV45A' dynpro = '0102').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '/00').
    o_bi->campos( campo = 'VBAK-VBELN' valor = l_listado_color-vbeln ).
    " Documento de ventas

    o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001').
    o_bi->campos( campo = 'VBAK-LIFSK' valor = l_listado-lifsk ).
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=SICH').

    l_mensaje = o_bi->llamar_transaccion( tcode = 'VA02' modo = 'N').

    SELECT SINGLE * FROM vbak
     WHERE vbeln = l_listado_color-vbeln
       AND lifsk = l_listado-lifsk.
    IF sy-subrc NE 0.
      l_error = 'X'.
      MESSAGE i398(00) WITH 'Error cambiando la fecha de entrega en el pedido'
      l_listado_color-vbeln.                                "#EC *
    ENDIF.
  ENDIF.


ENDFORM.                    " cambiar_cab_pedido_sd

*&---------------------------------------------------------------------*
*&      Form  cambiar_pos_pedido_sd
*&---------------------------------------------------------------------*
FORM cambiar_pos_pedido_sd .
  DATA o_bi TYPE REF TO zcl_ap_batch_input.
  DATA: l_mensaje TYPE bapireturn1-message,
        l_fecha   TYPE d.

  l_fecha = zcl_ap_fechas=>string2fecha( l_listado_color-fasignada ).

  CREATE OBJECT o_bi.

  o_bi->inicio( ).
  IF l_listado_color-vbeln(4) = '0044'.
* Pantalla de llamada modificar/visualizar pedido
    o_bi->dynpro( program = 'SAPMM06E' dynpro = '0105').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '/00').
    o_bi->campos( campo = 'RM06E-BSTNR' valor = l_listado_color-vbeln ).
    " Número de pedido

* Resumen de posición pedido una línea
    o_bi->dynpro( program = 'SAPMM06E' dynpro = '0120').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '/00').
    o_bi->campos( campo = 'RM06E-EBELP' valor = l_listado_color-posnr+1 ).
    " Campo de posicionamiento dentro de pantalla resumen

* Resumen de posición pedido una línea
    o_bi->dynpro( program = 'SAPMM06E' dynpro = '0120').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=BU').
    o_bi->campos( campo = 'RM06E-EEIND(01)' valor = l_fecha ).
    " Fecha de entrega

* Popup_to_confirm_with_message
    o_bi->dynpro( program = 'SAPLSPO1' dynpro = '0300').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=YES').

    l_mensaje = o_bi->llamar_transaccion( tcode = 'ME22' modo = 'E').

    SELECT SINGLE * FROM eket
     WHERE ebeln = l_listado_color-vbeln
       AND ebelp = l_listado_color-posnr+1
       AND eindt = l_fecha.
    IF sy-subrc NE 0.
      l_error = 'X'.
      MESSAGE i398(00) WITH 'Error cambiando la fecha de entrega en el pedido'
      l_listado_color-vbeln l_listado_color-posnr.          "#EC *
    ENDIF.
  ELSE.

* Documento de ventas    Acceso    Modificar
    o_bi->dynpro( program = 'SAPMV45A' dynpro = '0102').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=UER2').
    o_bi->campos( campo = 'VBAK-VBELN' valor = l_listado_color-vbeln ).
    " Documento de ventas

    o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=POPO').

* Documento de ventas    Ventana   Posicionar    Posición
    o_bi->dynpro( program = 'SAPMV45A' dynpro = '0251').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=POSI').
    o_bi->campos( campo = 'RV45A-POSNR' valor = l_listado_color-posnr ).
    " Número de posición del documento comercial

    o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001').
    o_bi->campos( campo = 'VBAP-WERKS(01)' valor = l_listado_color-werks ).
    o_bi->campos( campo = 'RV45A-ETDAT(01))' valor =
    l_listado_color-fasignada ). " Fecha reparto
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=SICH').

* POPUP_TO_DECIDE
    o_bi->dynpro( program = 'SAPLSPO2' dynpro = '0101').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=OPT1').

    l_mensaje = o_bi->llamar_transaccion( tcode = 'VA02' modo = 'E' ).

    SELECT SINGLE * FROM vbap
     WHERE vbeln = l_listado_color-vbeln
       AND posnr = l_listado_color-posnr
       AND werks = l_listado_color-werks.
    IF sy-subrc NE 0.
      l_error = 'X'.
      MESSAGE i398(00) WITH 'Error cambiando la fecha de entrega en el pedido'
      l_listado_color-vbeln l_listado_color-posnr.          "#EC *
    ENDIF.

    SELECT SINGLE * FROM vbep
     WHERE vbeln = l_listado_color-vbeln
       AND posnr = l_listado_color-posnr
       AND edatu = l_fecha.
    IF sy-subrc NE 0.
      l_error = 'X'.
      MESSAGE i398(00) WITH 'Error cambiando la fecha de entrega en el pedido'
      l_listado_color-vbeln l_listado_color-posnr.          "#EC *
    ENDIF.
  ENDIF.


ENDFORM.                    " cambiar_pos_pedido_sd

*&---------------------------------------------------------------------*
*&      Form  cambiar_fecha_reparto_pos_pedido_sd
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM cambiar_fecha_reparto_pos_ped .
  DATA o_bi TYPE REF TO zcl_ap_batch_input.
  DATA: l_mensaje TYPE bapireturn1-message,
        l_fecha   TYPE d,
        l_ind(2)  TYPE n.

  l_fecha = zcl_ap_fechas=>string2fecha( l_listado_color-fasignada ).

  IF l_listado_color-zzcausa_retraso IS INITIAL.
    DATA: l_sem_old    TYPE scal-week,
          l_sem_new    TYPE scal-week,
          l_fasign_old TYPE d,
          l_fasign_new TYPE d,
          l_string     TYPE string.

    l_fasign_old = zcl_ap_fechas=>string2fecha( l_listado_color-fasignada ).
    l_sem_old = zcl_ap_fechas=>get_semana( l_fasign_old ).
    l_fasign_new = zcl_ap_fechas=>string2fecha(
    l_listado_color_ini-fasignada ).
    l_sem_new = zcl_ap_fechas=>get_semana( l_fasign_new ).

    IF l_sem_old NE l_sem_new.
      l_error = 'X'.
      CONCATENATE text-icr l_listado_color-vbeln INTO l_string SEPARATED BY
      space.
      o_errores->add_message( l_string ).
      EXIT.
    ENDIF.
  ENDIF.

  CREATE OBJECT o_bi.

  o_bi->inicio( ).


* Documento de ventas    Acceso    Modificar
  o_bi->dynpro( program = 'SAPMV45A' dynpro = '0102').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=UER2').
  o_bi->campos( campo = 'VBAK-VBELN' valor = l_listado_color-vbeln ).
  " Documento de ventas

  o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=POPO').

* Documento de ventas    Ventana   Posicionar    Posición
  o_bi->dynpro( program = 'SAPMV45A' dynpro = '0251').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=POSI').
  o_bi->campos( campo = 'RV45A-POSNR' valor = l_listado_color-posnr ).
  " Número de posición del documento comercial

  o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=PEIN').

  o_bi->dynpro( program = 'SAPMV45A' dynpro = '4003').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=SHLI').
  SELECT COUNT( * ) FROM vbep
    INTO l_ind
   WHERE vbeln = l_listado_color-vbeln
     AND posnr = l_listado_color-posnr.

  o_bi->campos( campo = 'BDC_CURSOR' valor = 'RV45A-ETDAT' ind = l_ind ).

  o_bi->dynpro( program = 'SAPMV45A' dynpro = '4004').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=T\02').

  o_bi->dynpro( program = 'SAPMV45A' dynpro = '4004').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=SICH').

  o_bi->campos( campo = 'RV45A-ETDAT' valor = l_fecha ).

* POPUP_TO_DECIDE
  o_bi->dynpro( program = 'SAPLSPO2' dynpro = '0101').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=OPT1').

  l_mensaje = o_bi->llamar_transaccion( tcode = 'VA02' modo = 'E' ).

  SELECT SINGLE * FROM vbap
   WHERE vbeln = l_listado_color-vbeln
     AND posnr = l_listado_color-posnr
     AND werks = l_listado_color-werks.
  IF sy-subrc NE 0.
    l_error = 'X'.
    MESSAGE i398(00) WITH 'Error en el cambio de centro del pedido'
    l_listado_color-vbeln l_listado_color-posnr.            "#EC *
  ENDIF.

  SELECT SINGLE * FROM vbep
   WHERE vbeln = l_listado_color-vbeln
     AND posnr = l_listado_color-posnr
     AND edatu = l_fecha.
  IF sy-subrc NE 0.
    l_error = 'X'.
    MESSAGE i398(00) WITH 'Error cambiando la fecha de entrega en el pedido'
    l_listado_color-vbeln l_listado_color-posnr.            "#EC *
  ENDIF.


ENDFORM.                    " cambiar_pos_pedido_sd

*&---------------------------------------------------------------------*
*&      Form  cambiar_ruta
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM cambiar_ruta.
  DATA o_bi TYPE REF TO zcl_ap_batch_input.
  DATA: l_mensaje TYPE bapireturn1-message.

  CREATE OBJECT o_bi.

  o_bi->inicio( ).
* Documento de ventas    Acceso    Modificar
  o_bi->dynpro( program = 'SAPMV45A' dynpro = '0102').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=UER2').
  o_bi->campos( campo = 'VBAK-VBELN' valor = l_listado_color-vbeln ).
  " Documento de ventas

  o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=POPO').

* Documento de ventas    Ventana   Posicionar    Posición
  o_bi->dynpro( program = 'SAPMV45A' dynpro = '0251').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=POSI').
  o_bi->campos( campo = 'RV45A-POSNR' valor = l_listado_color-posnr ).
  " Número de posición del documento comercial

  o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=PDE2').

  o_bi->dynpro( program = 'SAPMV45A' dynpro = '4003').
  o_bi->campos( campo = 'VBAP-ROUTE' valor = l_listado_color-route ).
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=SICH').

* POPUP_TO_DECIDE
  o_bi->dynpro( program = 'SAPLSPO2' dynpro = '0101').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=OPT1').

  l_mensaje = o_bi->llamar_transaccion( tcode = 'VA02' modo = 'N').

  SELECT SINGLE * FROM vbap
   WHERE vbeln = l_listado_color-vbeln
     AND posnr = l_listado_color-posnr
     AND route = l_listado_color-route.
  IF sy-subrc NE 0.
    l_error = 'X'.
    MESSAGE i398(00) WITH 'Error en el cambio de Ruta del pedido'
    l_listado_color-vbeln l_listado_color-posnr.            "#EC *
  ENDIF.

ENDFORM.                    " cambiar_pos_pedido_sd

*&---------------------------------------------------------------------*
*&      Form  cambiar_fecha_ENTCLIENTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM cambiar_fecha_entcliente.
  DATA o_bi TYPE REF TO zcl_ap_batch_input.
  DATA: l_mensaje TYPE bapireturn1-message,
        l_fecha   TYPE d.

  l_fecha = zcl_ap_fechas=>string2fecha( l_listado_color-fentregacliente )
  .
  WRITE l_fecha TO l_listado_color-fentregacliente.

  CREATE OBJECT o_bi.

  o_bi->inicio( ).


  IF NOT l_listado_color-tknum IS INITIAL.
    o_bi->dynpro( program = 'SAPMV56A' dynpro = '1011').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=MM_TKAL').
    o_bi->campos( campo = 'VTTK-TKNUM' valor = l_listado_color-tknum ).
    " Nº de transporte

    o_bi->dynpro( program = 'SAPMV56A' dynpro = '1020').
    o_bi->campos( campo = 'VTTK-DATEN' valor =
    l_listado_color-fentregacliente ).
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=MM_SICH').

    l_mensaje = o_bi->llamar_transaccion( tcode = 'VT02N' modo = 'E').
  ENDIF.

  IF NOT l_listado_color-vbeln_ent IS INITIAL.
    o_bi->inicio( ).
    o_bi->dynpro( program = 'SAPMV50A' dynpro = '4004').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '/00').
    o_bi->campos( campo = 'LIKP-VBELN' valor = l_listado_color-vbeln_ent ).
    " Entrega

    o_bi->dynpro( program = 'SAPMV50A' dynpro = '1000').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=HTER_T').

* Tomar la clave única de la entrega para poder buscar datos.
    SELECT SINGLE handle FROM likp
      INTO likp-handle
     WHERE vbeln = l_listado_color-vbeln_ent.
    IF sy-subrc = 0 AND likp-handle NE ''.
      SELECT * FROM tsege
       WHERE head_hdl = likp-handle
         AND even  = 'WSHDR0003'.
      ENDSELECT.
      IF sy-subrc NE 0.
        o_bi->dynpro( program = 'SAPMV50A' dynpro = '2000').
        o_bi->campos( campo = 'BDC_OKCODE' valor = '=TSEG_INSR').

*
        o_bi->dynpro( program = 'SAPMSSY0' dynpro = '0120').
        o_bi->campos( campo = 'BDC_CURSOR' valor = '06/13').
        o_bi->campos( campo = 'BDC_OKCODE' valor = '=PICK').
      ENDIF.
    ENDIF.

    o_bi->dynpro( program = 'SAPMV50A' dynpro = '2000').
    o_bi->campos( campo = 'BDC_OKCODE' valor = '=SICH_T').
    o_bi->campos( campo = 'ITSEGDIAE-TIME_TST03(01)' valor =
    l_listado_color-fentregacliente ).
    " Cronomarcador en forma breve (fecha y hora LOCAL/editada)

    l_mensaje = o_bi->llamar_transaccion( tcode = 'VL02N' modo = 'N').
  ENDIF.


ENDFORM.                    " cambiar_fecha_ENTCLIENTE

************************************************************************
*******************
************************************************************************
*******************
**********  D  O  C  U  M  E  N  T  O  S     D  E     C  O  M  P  R  A
*S  ***************
************************************************************************
*******************
************************************************************************
*******************
*&---------------------------------------------------------------------*
*&      Form  SELECCIONAR_COMPRAS
*&---------------------------------------------------------------------*
FORM seleccionar_compras.
  DATA: BEGIN OF i_pedidos OCCURS 0,
          ekorg           LIKE ekko-ekorg,
          bukrs           LIKE ekko-bukrs,
          bsart           LIKE ekko-bsart,
          lifnr           LIKE ekko-lifnr,
          kunnr           LIKE vbak-kunnr,
          kunwe           LIKE vbak-kunnr,
          name1           LIKE kna1-name1,
          pstlz           LIKE kna1-pstlz,
          bedat           LIKE vbak-audat,
          inco1           LIKE vbkd-inco1,
          inco2           LIKE vbkd-inco2,
          ebeln           LIKE ekko-ebeln,
          ebelp           LIKE ekpo-ebelp,
          bstyp           LIKE ekpo-bstyp,
          pstyp           LIKE ekpo-pstyp,
          knttp           LIKE ekpo-knttp,
          matnr           LIKE ekpo-matnr,
          txz01           LIKE ekpo-txz01,
          matkl           LIKE mara-matkl,
          wgbez           LIKE t023t-wgbez,
          prdha           LIKE mara-prdha,
          zzcalidad       LIKE mara-zzcalidad,
          zzgramaje       LIKE mara-zzgramaje,
          zzancho         LIKE mara-zzancho,
          zzlargo         LIKE mara-zzlargo,
          menge           LIKE ekpo-menge,     "Cantidad Pedido Compras
          wemng           LIKE afpo-wemng,     "Cantidad Fabricada
          meins           LIKE ekpo-meins,
          precio_unitario LIKE vbap-netwr,
          valor_material  LIKE vbap-netwr,
          transporte      LIKE vbap-netwr,
          netwr           LIKE ekpo-netwr,
          brtwr           LIKE ekpo-brtwr,
          waers           LIKE ekko-waers,
          eindt           LIKE eket-eindt,
          wmeng           LIKE vbep-wmeng,
          route           LIKE ekpv-route,
          lprio           LIKE ekpv-lprio,
          ernam           LIKE ekko-ernam,
          vbeln_ent       LIKE likp-vbeln,
          posnr_ent       LIKE lips-posnr,
          bldat           LIKE likp-bldat,
          kodat           LIKE likp-kodat,
          wadat_ist       LIKE likp-wadat_ist,
          werks           LIKE vbap-werks,
*          zh_estandar LIKE ci_iomamo-zzh_estandar,
*          zh_bastidor LIKE ci_iomamo-zzh_bastidor,
*          zh_ft       LIKE ci_iomamo-zzh_ft,
*          zh_mat_ft    LIKE ci_iomamo-zzh_mat_ft,
*          zh_pr_celula LIKE ci_iomamo-zzh_pr_celula,
*          zvar_cal_pot_sap LIKE ci_iomamo-zzvar_cal_pot_sap,
*          ztx_cal_vis_sap  LIKE ci_iomamo-zztx_cal_vis_sap,
          vbtyp           LIKE vbak-vbtyp,
*          kunwe     TYPE kunwe,
          land1           TYPE land1,
*          vidrio  TYPE zvidrio,
*          prov_celula  TYPE zprov_celula,
*          vatio_pico  TYPE zvatio_pico,
          zlsch           LIKE vbkd-zlsch,
          knumv           LIKE vbak-knumv,
          zzcausa_retraso TYPE zcausa_retraso,
          zzestado_pedido TYPE zestado_pedido,
          kzwi5           LIKE ekpo-kzwi5,
          nplnr           LIKE ekkn-nplnr,
          aufnr           LIKE ekkn-aufnr,
          ps_psp_pnr      LIKE ekkn-ps_psp_pnr,
          banfn           LIKE ekpo-banfn,
          bnfpo           LIKE ekpo-bnfpo,
          retpo           LIKE ekpo-retpo,
          "POSICIONES DE DEVOLUCIÓN COMPRAS
          loekz           LIKE ekpo-loekz,
          "POSICIONES RECHAZADAS EN PED. COMRPAS
          zzbloq_plan     LIKE ekpo-zzbloq_plan,
          "POSICIONES BLOQUEADAS PARA ENTREGAR EN PED. COMPRAS
          zzbloq_fabr     LIKE ekpo-zzbloq_fabr,
          "POSICIONES BLOQUEADAS PARA PRODUCIR EN PED. COMPRAS
          clabs           TYPE labst,
        END OF i_pedidos,
        l_ped LIKE i_pedidos.

  DATA: i_ekbe          TYPE TABLE OF ekbe WITH HEADER LINE,
        i_ekpv          TYPE TABLE OF ekpv WITH HEADER LINE,
        i_listado_aux   TYPE TABLE OF zsd_estado_pedidos,
        l_campo(30),
        l_cent,                  "PARA SABER SI ES POSICIÓN CON MUCHAS ENTREGAS.
        l_kbetr         TYPE          konv-kbetr,
        i_konv          TYPE TABLE OF konv WITH HEADER LINE,
        l_semana        TYPE          scal-week,
        i_likp          TYPE TABLE OF likp,
        l_ctd_entregada TYPE          vbap-kwmeng,
        lprio_txt       LIKE          tprit-bezei,
        destino         LIKE          vbap-werks,
        "PARA VERIFICAR AUTORIZACIONES.
        l_aufk          TYPE          aufk,
        BEGIN OF i_ped OCCURS 0,
          ebeln TYPE ebeln,
        END OF i_ped.

  FIELD-SYMBOLS <campo>.

  RANGES: r_ebeln FOR ekko-ebeln.

  IF NOT s_entre[] IS INITIAL OR
     NOT r_fecha_pick[] IS INITIAL.
    SELECT * FROM likp
      INTO TABLE i_likp
     WHERE vbeln IN s_entre
       AND bldat IN r_fecha_pick.

    SELECT ebeln FROM ekbe
      INTO TABLE i_ped
      FOR ALL ENTRIES IN i_likp
     WHERE vgabe = '8'
       AND belnr = i_likp-vbeln
       AND gjahr = '0000'.

    LOOP AT i_ped.
      CLEAR r_ebeln.
      r_ebeln-option = 'EQ'.
      r_ebeln-sign   = 'I'.
      r_ebeln-low    = i_ped.
      COLLECT r_ebeln.
    ENDLOOP.
  ENDIF.

  o_sgpi->text( 'Seleccionado los pedidos de compra interco' ).

* SELECCIONAMOS LOS DATOS DEPENDIENDO DE LA PANTALLA DE SELECCIÓN.
  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE i_pedidos
    FROM ( ekko JOIN ekpo ON ekko~ebeln = ekpo~ebeln )
                JOIN lfa1 ON ekko~lifnr = lfa1~lifnr
                JOIN eket ON ekpo~ebeln = eket~ebeln
                         AND ekpo~ebelp = eket~ebelp
                JOIN ekpv ON ekpo~ebeln = ekpv~ebeln
                         AND ekpo~ebelp = ekpv~ebelp
                JOIN mara ON ekpo~matnr = mara~matnr
   WHERE ekko~ebeln IN r_ebeln
     AND ekko~ebeln IN s_ebeln
     AND ekko~bukrs IN s_bukrs
     AND ekko~bstyp  = 'F'
     AND bsart       = 'ZINT'
     AND ekpv~kunnr IN s_kunnr
     AND ekpv~kunnr IN s_kunwe
     AND ekko~bedat IN s_audat
     AND ekpo~matnr IN s_matnr
     AND ekpo~matkl IN s_matkl
     AND zzcalidad  IN s_calida
     AND zzgramaje  IN s_gramaj
     AND zzancho    IN s_ancho
     AND zzlargo    IN s_largo
     AND ekpo~werks IN s_werks
     AND eindt      IN s_vdatu
     AND ekko~lifnr IN s_lifnr "LIKE 'P%'
     AND lfa1~werks NE ''.

  SORT i_pedidos.
  LOOP AT i_pedidos.
*Verificar si el usuario está autorizado o no a ver este tipo de
*pedidos.
    AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
             ID 'VKORG' FIELD i_pedidos-lifnr+1(4)
             ID 'VTWEG' DUMMY
             ID 'SPART' DUMMY
             ID 'ACTVT' FIELD '03'.
    IF sy-subrc = 0.
      destino = i_pedidos-kunnr+1(4).
      AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
                  ID 'ACTVT' FIELD '03'
                  ID 'WERKS' FIELD destino.
      IF sy-subrc = 0 OR p_jobol = 'X'.
        l_ped = i_pedidos.
* Varificar imputaciones del documento de compras.
        SELECT SINGLE aufnr ps_psp_pnr nplnr FROM ekkn
          INTO (l_ped-aufnr, l_ped-ps_psp_pnr, l_ped-nplnr)
         WHERE ebeln = l_ped-ebeln
           AND ebelp = l_ped-ebelp.

        CLEAR l_listado.
        MOVE-CORRESPONDING i_pedidos TO l_listado.
        l_listado-vbeln = i_pedidos-ebeln.
        CONCATENATE '0' i_pedidos-ebelp INTO l_listado-posnr.

        SELECT SINGLE aedat FROM ekko
          INTO l_listado-erdat
         WHERE ebeln = l_ped-ebeln.

        l_listado-ernam  = i_pedidos-ernam.        "CREADOR.
        l_listado-vkorg  = i_pedidos-lifnr+1(4).
        " Org. Ventas = Proveedor sin "P".
        l_listado-vtweg  = '10'.                   "Canal de Distribución.
        l_listado-auart  = i_pedidos-bsart.        "Clase de documento.
        l_listado-kwmeng = i_pedidos-menge.
        l_listado-vbtyp  = 'C'            .        "Tipo de Documento = "C".
        l_listado-arktx  = i_pedidos-txz01.
        l_listado-bstnk  = i_pedidos-ebeln.        "Nº de pedido de compras
        l_listado-audat  = i_pedidos-bedat.        "Fecha del documento.
        l_listado-vrkme  = i_pedidos-meins.
        l_listado-vdatu  = i_pedidos-eindt.        "Fecha Preferente de Entrega.
*      CONCATENATE ' ' i_pedidos-kunnr+1(4) INTO l_listado-vkorg.
*      CONCATENATE 'C' i_pedidos-bukrs      INTO l_listado-kunwe.
*      CONCATENATE 'C' i_pedidos-bukrs      INTO l_listado-kunnr.

* RECUPERAR EL CENTRO DEL PROVEEDOR.
        SELECT SINGLE werks FROM lfa1
          INTO l_listado-werks
         WHERE lifnr = i_pedidos-lifnr.

**????


        AT NEW ebeln.
          REFRESH i_konv.
          SELECT * FROM konv
            INTO TABLE i_konv
           WHERE knumv = i_pedidos-knumv
             AND ( kschl = 'PB00'
               OR  kschl = 'ZKF0' ).
        ENDAT.

        CLEAR: l_listado-name1.
*      IF NOT l_listado-kunnr IS INITIAL.
        SELECT SINGLE * FROM kna1
         WHERE kunnr = l_listado-kunnr.
        SELECT SINGLE * FROM knb1
         WHERE kunnr = i_pedidos-bukrs
           AND bukrs = i_pedidos-lifnr+1(4).

        l_listado-name1 = kna1-name1.
        l_listado-pstlz = kna1-pstlz.
        l_listado-land1 = kna1-land1.
        l_listado-zlsch = knb1-zwels.
*      ENDIF.

*** VÍAS DE PAGO.
        SELECT SINGLE text1 FROM t042z INTO l_listado-text1
          WHERE land1 = 'ES'
            AND zlsch = l_listado-zlsch.

*** BLOQUEO DE POSICIONES.
        SELECT SINGLE zzbloq_plan FROM ekpo INTO i_pedidos-zzbloq_plan
                WHERE ebeln = i_pedidos-ebeln
                  AND ebelp = i_pedidos-ebelp.
        IF i_pedidos-zzbloq_plan = 'X'.      "Bloqueo de pedidos MM.
          l_listado-lifsk = 'Z1'.           "Asimilamos al bloq. de pedidos SD.
          SELECT SINGLE vtext FROM  tvlst
            INTO l_listado-lifsk_t
           WHERE spras  = sy-langu
             AND lifsp  = l_listado-lifsk.
        ENDIF.

*** TIPO DE POSICIÓN ASIMILADO AL DE VENTAS.
        SELECT SINGLE zzbloq_fabr FROM ekpo INTO i_pedidos-zzbloq_fabr
                WHERE ebeln = i_pedidos-ebeln
                  AND ebelp = i_pedidos-ebelp.
        IF i_pedidos-zzbloq_fabr = 'X'.
          "Bloqueo de pedidos MM PARA FABRICACIÓN.
          l_listado-pstyv = 'ZTAN'.
          "Asimilamos al TIPO DE POSICIÓN DE VENTAS CONTRA STOCK.
        ELSE.
          l_listado-pstyv = 'TAN'.
          "Asimilamos al TIPO DE POSICIÓN DE VENTAS NORMAL.
        ENDIF.

*** IMPORTES
        AT NEW ebelp.
          l_listado-precio_final = l_ped-netwr.
          l_listado-transporte = l_ped-kzwi5.
          IF i_pedidos-waers NE 'EUR'.
            l_listado-precio_final = zcl_ap_doc_fi=>convertir_moneda_eur( importe =
            l_listado-precio_final
                    moneda  = l_ped-waers
                    fecha   = l_ped-bedat ).
            l_listado-transporte = zcl_ap_doc_fi=>convertir_moneda_eur( importe =
            l_listado-transporte
                            moneda  = l_ped-waers
                            fecha   = l_ped-bedat ).
          ENDIF.
*CONVIERTO LOS IMPORTES EN NEGATIVOS SI PROCEDEN DE DEVOLUCIONES DE
*COMPRAS.
          IF l_ped-retpo = 'X'.
            "PEDIDO INTERCO DE DEVOLUCIÓN.
            l_listado-vbtyp  = 'H'            .
            "Cambio Tipo de Documento a "H".
            l_listado-netwr = l_listado-netwr * -1.               "PRECIO NETO.
            l_listado-precio_final = l_listado-precio_final * -1. "PRECIO FINAL.
          ENDIF.
*        CASE l_ped-zzestado_pedido.
*          WHEN 'BLOC'. l_listado-st_bloc = 'X'.
*          WHEN 'BOOK'. l_listado-st_book = 'X'.
*          WHEN 'SECU'. l_listado-st_secu = 'X'.
*          WHEN 'DELI'. l_listado-st_deli = 'X'.
*        ENDCASE.

* SELECCIONAR DATOS DE LOS REPARTOS.
          REFRESH i_ekbe.
          SELECT * FROM ekbe
            INTO TABLE i_ekbe
           WHERE ebeln = l_ped-ebeln
             AND ebelp = l_ped-ebelp
             AND vgabe = '8'
             AND gjahr = '0000'.

* SELECCIONAR DATOS DE LA PESTAÑA "EXPEDICIÓN" DEL PEDIDO DE COMPRAS.
          SELECT SINGLE route lprio kunnr kunnr FROM ekpv
            INTO (l_ped-route, l_ped-lprio, l_ped-kunnr, l_ped-kunwe)
           WHERE ebeln = l_ped-ebeln
             AND ebelp = l_ped-ebelp.
          l_listado-route = l_ped-route.
          l_listado-lprio = l_ped-lprio.
          l_listado-kunnr = l_ped-kunnr.
          l_listado-kunwe = l_ped-kunwe.
          SELECT SINGLE bezei FROM tprit INTO l_listado-lprio_txt
            WHERE lprio = l_ped-lprio
              AND spras = sy-langu.
* RECUPERAR LOS TEXTOS DE LA CAUSA DE RETRASO:
          l_listado_color-causa_retrasot = zcl_ap_utils=>get_texto_dominio(
      dominio = 'ZCAUSA_RETRASO' valor = l_listado_color-zzcausa_retraso ).

* RESCATAR FECHAS DEL PEDIDO.
          l_listado-fasignada = l_ped-eindt.
          WRITE l_ped-eindt TO l_listado-fasignada.
          l_listado-fsolicitada = zcl_ap_control_cambios=>get_primer_valor_campo(
          objectclas = 'EINKBELEG'
                              objectid   = l_listado-vbeln
                              tabname    = 'EKET'
                              fname      = 'EINDT' ).
          IF l_listado-fsolicitada IS INITIAL OR l_listado-fsolicitada = ''.
            l_listado-fsolicitada  = l_ped-eindt.
            "FECHA solicitada por cliente.
            l_listado-fasign       = l_ped-eindt.
            "FECHA solicitada por cliente.
          ENDIF.
          l_semana = zcl_ap_fechas=>get_semana( l_listado-fsolicitada ).
          l_listado-sem_fsolicitada = l_semana+4(2).

          l_semana = zcl_ap_fechas=>get_semana( l_ped-eindt ).
          "SEMANA de entrega a cliente.
          l_listado-sem_entrega = l_semana+4(2).

* ESTADO DE PEDIDOS DE COMPRAS RECHAZADOS.
          IF l_ped-loekz NE ''.
            l_listado-estado = 'RE'.   "Rechazada la posción (Marcada para borrar).
            CHECK l_listado-estado IN s_estado.
            l_listado-kwmeng = 0.
            " AL SER POSICIÓN RECHAZADA, NO QUEREMOS REFLEJAR LAS CANTIDADES.
          ENDIF.

* DATOS DE LAS ENTREGAS RELACIONADAS.
*        DESCRIBE TABLE i_ekbe LINES sy-tfill.
          READ TABLE i_ekbe INDEX 1.
          IF sy-subrc = 0.
* RECUPERO TODAS LAS ENTREGAS REFERENTES A UN MISMO PEDIDO / POSICIÓN.
            CLEAR l_cent.
            LOOP AT i_ekbe.
              IF l_cent = 'X'.    "ANTE MULTIPLES ENTREGAS DE UNA MISMA POSICIÓN...
                CLEAR: l_listado-kwmeng, l_listado-precio_final,
                       l_listado-transporte, l_listado-wemng,
*                   l_listado-anticipo,
*                   l_listado-anticipo_cab,
*                   l_listado-porc_cobro,
                       l_listado-netwr, l_listado-ctd_ped_abierta.
              ENDIF.
              l_listado-vbeln_ent = i_ekbe-belnr.
              CONCATENATE '00' i_ekbe-buzei INTO lips-posnr.
              l_listado-posnr_ent = lips-posnr.

              SELECT SUM( lfimg ) FROM lips JOIN vbup ON lips~vbeln = vbup~vbeln
        AND lips~posnr = vbup~posnr                                      AND
        lips~posnr = vbup~posnr
        INTO l_listado-pikmg
        WHERE lips~vbeln = l_listado-vbeln_ent
        AND ( lips~posnr = l_listado-posnr_ent
        OR uecha = l_listado-posnr_ent )
        AND kosta = 'C'.

              IF l_listado_color-fpickingreal IS INITIAL OR
              l_listado_color-fpickingreal = ''.
                l_listado_color-fpickingreal =
  zcl_ap_control_cambios=>get_fecha_ult_cambio( objectclas = 'LIEFERUNG'
            objectid   = l_listado-vbeln_ent
            tabname    = 'VBUK'
            fname      = 'KOSTK' ).
                IF NOT l_listado_color-fpickingreal IS INITIAL.
                  UPDATE likp
                     SET zzfpickingreal = l_listado_color-fpickingreal
                  WHERE vbeln = l_listado-vbeln_ent.
                ENDIF.
              ENDIF.
              SELECT SINGLE * FROM lips
               WHERE vbeln = l_listado-vbeln_ent
                 AND posnr = l_listado-posnr_ent.
              IF sy-subrc = 0.
                IF lips-kcmeng = 0.
                  l_listado-lfimg = lips-lfimg.
                ELSE.
                  l_listado-lfimg = lips-kcmeng.
                ENDIF.
              ENDIF.

              SELECT SINGLE erdat wadat_ist kodat FROM likp
      INTO (l_listado-fcr_entrega, l_listado-wadat_ist, l_listado-kodat)
      WHERE vbeln = l_listado-vbeln_ent.

              l_semana = zcl_ap_fechas=>get_semana( l_listado-kodat ).
              l_listado-sem_picking = l_semana+4(2).

* FIN DE LAS ENTREGAS RELACIONADAS.
* ESTADO DE POSICIÓN DE PEDIDOS DE COMPRAS.
              PERFORM get_estado_ped_compras USING l_ped-ebeln         l_ped-ebelp
                                           l_listado-vbeln_ent l_listado-posnr_ent
                                     CHANGING l_listado-estado.
*  FILTRAR POR ESTADO DE POSICIÓN.
              CHECK l_listado-estado IN s_estado.

* CALCULAR LA CANTIDAD ABIERTA DEL PEDIDO.
              CASE l_listado-estado.
                WHEN ''.
                  l_listado-ctd_ped_abierta = l_listado-kwmeng.
                  CHECK l_listado-estado IN s_estado.
                WHEN 'RE'.
                  l_listado-ctd_ped_abierta = 0.
*          WHEN 'ET' OR 'FT'.
*            l_listado-ctd_ped_abierta = 0.
                WHEN OTHERS.
                  l_ctd_entregada = zcl_ped_sd=>get_cantidad_entregada( vbeln =
                  l_listado-vbeln posnr = l_listado-posnr ).
                  IF l_listado-kwmeng > 0.
                    l_listado-ctd_ped_abierta = l_listado-kwmeng - l_ctd_entregada.
                  ELSEIF l_listado-kwmeng = 0.
                    l_listado-ctd_ped_abierta = 0.
                  ENDIF.
              ENDCASE.

*CALCULAR LA CANTIDAD FABRICADA DEL PEDIDO. Seleccionar la orden de
*producción
*asociada con el pedido de compras y posteriormente, extraer la
*cantidad.
              SELECT * FROM aufk INTO l_aufk
                 WHERE auart  IN ('ZI02','ZI04')
                   AND autyp   = '40'
                   AND zzebeln1 = l_ped-ebeln
                   AND zzebelp1 = l_ped-ebelp.
              ENDSELECT.
              IF sy-subrc = 0 AND l_aufk-aufnr IS NOT INITIAL AND l_listado-kwmeng NE
              0.
                SELECT SINGLE wemng FROM afpo INTO l_listado-wemng
                  WHERE aufnr = l_aufk-aufnr
                    AND posnr = '0001'.
              ENDIF.


*IF NOT l_listado-vbeln_ent IS INITIAL AND l_listado-st_deli NE 'X'.
*          l_listado-st_deli = 'X'.
*CLEAR: l_listado-st_bloc, l_listado-st_book, l_listado-st_secu.
*          UPDATE ekpo
*             SET zzestado_pedido = 'DELI'
*           WHERE ebeln = l_ped-ebeln
*             AND ebelp = l_ped-ebelp.
*        ENDIF.

*CONVIERTO LAS CANTIDADES DE ENTREGAS EN NEGATIVAS SI PROCEDEN DE
*DEVOLUCIONES DE COMPRAS.
              IF l_ped-retpo = 'X' AND l_listado-kwmeng > 0.
                "PEDIDO INTERCO DE DEVOLUCIÓN Y SI LA CANT. ES POSITIVA...
                l_listado-kwmeng = l_listado-kwmeng * -1.    "CANTIDAD.
                l_listado-lfimg  = l_listado-lfimg  * -1.    "CANTIDAD ENTREGA
                l_listado-pikmg  = l_listado-pikmg  * -1.    "CANTIDAD DE PICKING
              ENDIF.
              l_cent = 'X'.
              APPEND l_listado TO i_listado.
              CLEAR: l_listado_color-ctd_ped_abierta.
            ENDLOOP.
          ENDIF.
          IF sy-subrc NE 0.
            PERFORM get_estado_ped_compras USING l_ped-ebeln         l_ped-ebelp
                                         l_listado-vbeln_ent l_listado-posnr_ent
                                   CHANGING l_listado-estado.

            CHECK l_listado-estado IN s_estado.
* CALCULAR LA CANTIDAD ABIERTA DEL PEDIDO.
            CASE l_listado-estado.
              WHEN ''.
                l_listado-ctd_ped_abierta = l_listado-kwmeng.
                CHECK l_listado-estado IN s_estado.
              WHEN 'RE'.
                l_listado-ctd_ped_abierta = 0.
*          WHEN 'ET' OR 'FT'.
*            l_listado-ctd_ped_abierta = 0.
              WHEN OTHERS.
                l_ctd_entregada = zcl_ped_sd=>get_cantidad_entregada( vbeln =
                l_listado-vbeln posnr = l_listado-posnr ).
                IF l_listado-kwmeng > 0.
                  l_listado-ctd_ped_abierta = l_listado-kwmeng - l_ctd_entregada.
                ELSEIF l_listado-kwmeng = 0.
                  l_listado-ctd_ped_abierta = 0.
                ENDIF.
            ENDCASE.
*CONVIERTO LA CANTIDAD EN NEGATIVA SI PROCEDE DE DEVOLUCIONES DE
*COMPRAS.
            IF l_ped-retpo = 'X' AND l_listado-kwmeng > 0.
              "PEDIDO INTERCO DE DEVOLUCIÓN Y SI LA CANT. ES POSITIVA...
              l_listado-kwmeng = l_listado-kwmeng * -1.    "CANTIDAD.
              l_listado-lfimg  = l_listado-lfimg  * -1.    "CANTIDAD ENTREGA
              l_listado-pikmg  = l_listado-pikmg  * -1.    "CANTIDAD DE PICKING
            ENDIF.
* FECHA DE CREACIÓN DE LA ENTREGA
            IF l_listado-fcr_entrega IN s_fcrent.
              APPEND l_listado TO i_listado.
            ENDIF.
          ENDIF.

        ENDAT.
      ENDIF.
    ENDIF.
  ENDLOOP.


ENDFORM.                    " SELECCIONAR_COMPRAS
*&---------------------------------------------------------------------*
*&      Form  GET_ESTADO_PED_COMPRAS
*&---------------------------------------------------------------------*
FORM get_estado_ped_compras  USING    pe_ebeln
                                      pe_ebelp
                                      pe_entrega
                                      pe_posnr
                             CHANGING ps_estado.

  DATA: i_lips       TYPE TABLE OF lips WITH HEADER LINE,
        l_entregas   TYPE          tslvt,
        l_facturas   TYPE          tslvt,
        l_kosta      TYPE          vbup-kosta,
        l_aufk       TYPE          aufk,
        l_afko       TYPE          afko,
        l_afpo       TYPE          afpo,
        l_est_ord    TYPE          jest-stat,
        i_likp       TYPE          likp,
        l_tol_inf    TYPE          knvv-untto,        "% TOLERANCIA INFERIOR
        cant_tol_inf TYPE          ekpo-menge.
  "CANTIDAD PEDIDO MÍNIMA PARA CERRAR POSICIÓN.
  TABLES: knvv.

  SELECT SINGLE * FROM ekpo
   WHERE ebeln = pe_ebeln
     AND ebelp = pe_ebelp.

  IF sy-subrc NE 0 OR ekpo-loekz NE ''.
    ps_estado = 'RE'.   "Rechazada la posción (Marcada para borrar).
  ELSE.
*  EBA 270215 IDENTIFICAR SI SE ESTÁ PRODUCIENDO EL PEDIDO.
*  REVISO LA TABLA DE ORDEN DE PRODUCCIÓN. EXISTEN DIVERSOS CAMPOS
*  EN LOS QUE SE PUEDEN ALMACENAR LOS PEDIDOS DE LOS CLEINTES.
    SELECT * FROM aufk INTO l_aufk
       WHERE auart  IN ('ZI02','ZI04')
         AND autyp   = '40'
         AND zzebeln1 = pe_ebeln
         AND zzebelp1 = pe_ebelp.
    ENDSELECT.
    IF sy-subrc <> 0 AND l_aufk-zzebeln1 IS INITIAL.
      SELECT * FROM aufk INTO l_aufk
       WHERE auart  IN ('ZI02','ZI04')
         AND autyp   = '40'
         AND zzebeln2 = pe_ebeln
         AND zzebelp2 = pe_ebelp.
      ENDSELECT.
    ENDIF.
    IF sy-subrc <> 0 AND l_aufk-zzebeln2 IS INITIAL.
      SELECT * FROM aufk INTO l_aufk
       WHERE auart  IN ('ZI02','ZI04')
         AND autyp   = '40'
         AND zzebeln3 = pe_ebeln
         AND zzebelp3 = pe_ebelp.
      ENDSELECT.
    ENDIF.
    l_listado-aufnr = l_aufk-aufnr.
    IF l_listado-aufnr IS INITIAL.
      CLEAR l_listado-wemng.
    ENDIF.
    SELECT SINGLE * FROM afko INTO l_afko
       WHERE aufnr = l_aufk-aufnr.
* SELECCIONAR LA CANITDAD FABRICADA PARA LA ORDEN PRODUCCIÓN
    SELECT SINGLE wemng FROM afpo INTO l_afpo-wemng
       WHERE aufnr = l_aufk-aufnr
         AND posnr = '0001'.
    IF l_listado-kwmeng = 0 AND l_listado-wemng NE l_afpo-wemng.
      "entregas de la misma posición pedido.
      CLEAR: l_listado-wemng.
    ELSE.
      l_listado-wemng = l_afpo-wemng.
    ENDIF.
*  CON ESTOS DATOS COMPRUEBO EL STATUS DE LA ORDEN SI EXISTE:
    IF sy-subrc = 0.
      SELECT SINGLE stat FROM jest INTO l_est_ord
       WHERE objnr = l_aufk-objnr
         AND inact = ' '.
      IF l_est_ord > 'I0003'.
        l_est_ord = 'I0045'.
      ENDIF.
      IF l_est_ord = 'I0002'.
        ps_estado = 'MP'.
        "EN FABRICACIÓN; ORDEN SE HA LANZADO A PRODUCCIÓN.
      ELSEIF l_est_ord = 'I0045' AND l_afko-igmng > 0.
        ps_estado = 'MF'.            "FABRICADO; CIERRE TÉCNICO REALIZADO.
      ELSEIF l_est_ord = 'I0001'.
*  Si no se ha iniciado el proceso de la posición, estado PENDIENTE
        l_entregas =  zcl_ap_pedido_mm=>get_valor_salidas( ebeln = pe_ebeln
                                                           ebelp = pe_ebelp
                                                        cantidad = 'X' ).
        ps_estado = ''.             "PEDIDO PENDIENTE DE FABRICAR.
      ENDIF.
    ENDIF.
    l_entregas =  zcl_ap_pedido_mm=>get_valor_salidas( ebeln = pe_ebeln
                                                     ebelp = pe_ebelp
                                                     cantidad = 'X' ).
    IF l_entregas = 0.
*      ps_estado = ' '.           "PEDIDO PENDIENTE DE FABRICAR.
    ELSE.
*********************
*NO SE TRATA DE SELECCIONAR EL ESTADO DE LA FACTURA DE COMPRAS SINO DE
*LA DE VENTAS.
*l_facturas =  zcl_ap_pedido_mm=>get_valor_facturas( ebeln = pe_ebeln
*ebelp = pe_ebelp
*cantidad = 'X' ).
*PASAMOS POR TODAS LAS POSICIONES RELATIVAS AL MISMO PEDIDO Y POSICIÓN
*MM.
      SELECT * FROM lips INTO i_lips
        WHERE vgbel = pe_ebeln
          AND vgpos = pe_ebelp.
        SELECT SINGLE * FROM vbup
          WHERE vbeln = i_lips-vbeln
            AND posnr = i_lips-posnr.
        IF vbup-fkivp = 'C'.
          l_facturas = 1.
        ELSE.
          l_facturas = 0.
        ENDIF.
        IF l_facturas > 0.
          EXIT.
        ENDIF.
      ENDSELECT.
      SELECT SINGLE * FROM likp INTO i_likp
        WHERE vbeln = i_lips-vbeln.
*********************
* seleccionar el margen de tolerancia del destino de mercancías.
      CLEAR: l_tol_inf.
      SELECT SINGLE untto FROM knvv INTO l_tol_inf
        WHERE kunnr = i_likp-kunnr
          AND vkorg = i_likp-vkorg
          AND vtweg = lips-vtweg
          AND spart = lips-spart.
      cant_tol_inf = ekpo-menge * l_tol_inf / 100.
*********************
      IF l_facturas > 0.
        IF abs( l_entregas ) >= abs( ekpo-menge - cant_tol_inf ).
          ps_estado = 'FT'. "Facturado totalmente
        ELSE.
          ps_estado = 'FP'. "Factura parcialmente.
        ENDIF.
      ELSE.
        CLEAR vbup.
        IF NOT pe_entrega IS INITIAL.
          SELECT SINGLE * FROM vbup
           WHERE vbeln = pe_entrega
             AND posnr = pe_posnr.
        ENDIF.

****************************
* Busco si las posiciones inferiores tienen picking.
        IF vbup-fkivp NE 'C' AND
        "ESTADO FACTURACIÓN INTERCO (no vale la factura normal FKSTA).
        vbup-wbsta NE 'C' AND
        vbup-kosta NE ''.
          SELECT SINGLE kosta FROM lips JOIN vbup ON lips~vbeln = vbup~vbeln
                                                 AND lips~posnr = vbup~posnr
            INTO l_kosta
           WHERE lips~vbeln = pe_entrega
             AND uecha      = pe_posnr
             AND kosta IN ('B','C').
          IF sy-subrc = 0.
            SELECT SINGLE kosta FROM lips JOIN vbup ON lips~vbeln = vbup~vbeln
                                                   AND lips~posnr = vbup~posnr
              INTO l_kosta
             WHERE lips~vbeln = pe_entrega
               AND uecha      = pe_posnr
               AND NOT kosta IN ('B','C').
            IF sy-subrc NE 0.
              vbup-kosta = l_kosta.
            ENDIF.
          ENDIF.
        ENDIF.
****************************
* IDENTIFICAMOS EL ESTADO DE LOS PEDIDOS / ENTREGAS.
        IF vbup-kosta = 'C' AND vbup-wbsta NE 'C'.
          IF abs( l_entregas ) >= abs( ekpo-menge - cant_tol_inf ).
            ps_estado = 'PT'.  "Picking Total
          ELSE.
            ps_estado = 'PP'.  "Picking Parcial -> Picking de la entrega
          ENDIF.
        ELSEIF vbup-kosta = 'C' AND vbup-wbsta = 'C'.
          IF abs( l_entregas ) >= abs( ekpo-menge - cant_tol_inf ).
            ps_estado = 'ET'.  "Entrega Total
          ELSE.
            ps_estado = 'EP'.  "Entrega Parcial
          ENDIF.
        ELSE.
          IF abs( l_entregas ) >= abs( ekpo-menge - cant_tol_inf ).
            ps_estado = 'ET'.  "Entrega Total
          ELSE.
            ps_estado = 'EP'.  "Entrega Parcial
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.


ENDFORM.                    " GET_ESTADO_PED_COMPRAS
*&---------------------------------------------------------------------*
*&      Form  CAMBIAR_MBDAT
*&---------------------------------------------------------------------*
FORM cambiar_mbdat .
  DATA: l_mbdat TYPE vbep-mbdat,
        l_etdat TYPE vbep-edatu.

  l_mbdat = zcl_ap_fechas=>string2fecha( l_listado_color-mbdat_text ).

  IF NOT l_mbdat IS INITIAL.

    l_etdat = zcl_ped_sd=>calc_freparto_from_mbdat( vbeln =
    l_listado_color-vbeln
                                          posnr = l_listado_color-posnr
                                          mbdat = l_mbdat ).
    IF l_etdat IS INITIAL.
      MESSAGE i398(00) WITH
      'Error calculando de la fecha de entrega del pedido'
      l_listado_color-vbeln l_listado_color-posnr.          "#EC *
    ELSE.
      l_listado_color-mbdat = l_mbdat.
      l_listado_color-fasign = l_etdat.
      WRITE l_etdat TO l_listado_color-fasignada.
*l_listado_color-zzpld = zcl_ped_sd=>calc_fecha_planificacion( vbeln =
*l_listado_color-vbeln
*posnr = l_listado_color-posnr
*werks = l_listado_color-werks ).
*      WRITE l_listado_color-zzpld TO l_listado_color-zzpld_text.
      PERFORM cambiar_fecha_reparto_pos_ped .
    ENDIF.
  ENDIF.

ENDFORM.                    " CAMBIAR_MBDAT

*&---------------------------------------------------------------------*
*&      Form  cambiar_zzpld
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*FORM cambiar_zzpld .
*  DATA: l_mbdat TYPE vbep-mbdat.
*
*l_listado-zzpld = zcl_ap_fechas=>string2fecha(
*l_listado_color-zzpld_text ).
*  CASE l_listado_color-werks.
*    WHEN '2010' OR '2012'.
*      l_mbdat = l_listado-zzpld + 1.
*    WHEN '2013'.
*      l_mbdat = l_listado-zzpld + 3.
*    WHEN OTHERS.
*      l_mbdat = l_listado-zzpld.
*  ENDCASE.
*
*  WRITE l_mbdat TO l_listado_color-mbdat_text.
*  l_listado-mbdat = l_mbdat.
*
*  PERFORM cambiar_mbdat.
*
*ENDFORM.                    " CAMBIAR_ZZPLD

*&---------------------------------------------------------------------*
*&      Form  cambiar_lddat
*&---------------------------------------------------------------------*
FORM cambiar_lddat .
  DATA: l_lddat TYPE vbep-lddat,
        l_etdat TYPE vbep-edatu.

  l_lddat = zcl_ap_fechas=>string2fecha( l_listado_color-lddat_text ).

  IF NOT l_lddat IS INITIAL.

    l_etdat = zcl_ped_sd=>calc_freparto_from_lddat( vbeln =
    l_listado_color-vbeln
                                          posnr = l_listado_color-posnr
                                          lddat = l_lddat ).
    IF l_etdat IS INITIAL.
      MESSAGE i398(00) WITH 'Error calculando la fecha de entrega del pedido'
      l_listado_color-vbeln l_listado_color-posnr.          "#EC *
    ELSE.
      l_listado_color-lddat = l_lddat.
      l_listado_color-fasign = l_etdat.
      WRITE l_etdat TO l_listado_color-fasignada.
      PERFORM cambiar_fecha_reparto_pos_ped .
    ENDIF.
  ENDIF.

ENDFORM.                    " CAMBIAR_MBDAT

*&---------------------------------------------------------------------*
*&      Form  cambiar_ZZRED
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*FORM cambiar_zzred .
*
*  UPDATE vbap
*    SET zzred = l_listado_color-zzred
*   WHERE vbeln = l_listado_color-vbeln
*     AND posnr = l_listado_color-posnr.
*
*ENDFORM.                    " CAMBIAR_ZZRED
*&---------------------------------------------------------------------*
*&      Form  GRABAR_CAMBIOS
*&---------------------------------------------------------------------*
FORM grabar_cambios .
  DATA l_string TYPE string.

  IF NOT o_errores IS INITIAL.
    CLEAR o_errores.
  ENDIF.

  CREATE OBJECT o_errores.
*    o_errores->add_message( message = l_message
*                            msgv1 = pe_tabla
*                            msgv2 = pe_campo ).

  i_listado_color_aux = i_listado_color.
  SORT i_listado_color_aux.
  CLEAR v_aut.
  IF i_listado_color_aux NE i_listado_color_ini.
    CLEAR l_error.
    LOOP AT i_listado_color INTO  l_listado_color.
      READ TABLE i_listado_color_ini INTO l_listado_color_ini WITH KEY vbeln =
      l_listado_color-vbeln
                          posnr = l_listado_color-posnr.
      IF sy-subrc = 0.
*        IF l_listado_color-st_bloc NE l_listado_color_ini-st_bloc OR
*           l_listado_color-st_book NE l_listado_color_ini-st_book OR
*           l_listado_color-st_secu NE l_listado_color_ini-st_secu OR
*           l_listado_color-st_deli NE l_listado_color_ini-st_deli.
*
*          PERFORM verificar_autorizacion USING 'STATUS'.
*
        IF v_aut = 'X'.
          CLEAR l_cont.
*IF l_listado_color-st_bloc = 'X'. ADD 1 TO l_cont. l_status = 'E0001'.
*l_status_c = 'BLOC'. ENDIF.
*IF l_listado_color-st_book = 'X'. ADD 1 TO l_cont. l_status = 'E0002'.
*l_status_c = 'BOOK'. ENDIF.
*IF l_listado_color-st_secu = 'X'. ADD 1 TO l_cont. l_status = 'E0003'.
*l_status_c = 'SECU'. ENDIF.
*IF l_listado_color-st_deli = 'X'. ADD 1 TO l_cont. l_status = 'E0004'.
*l_status_c = 'DELI'. ENDIF.
*
          IF l_cont = 1.
            IF l_listado_color-vbeln(4) = '0044'.
*                UPDATE ekpo
*                   SET zzestado_pedido = l_status_c
*                  WHERE ebeln = l_listado_color-vbeln
*                    AND ebelp = l_listado_color-posnr+1.
            ELSE.
              zcl_ped_sd=>cambiar_status_p2p( vbeln = l_listado_color-vbeln
                                              posnr = l_listado_color-posnr
                                              nuevo_status = l_status ).
              COMMIT WORK AND WAIT.
              l_status2 = zcl_ped_sd=>get_status_activo( vbeln = l_listado_color-vbeln
                                                      posnr = l_listado_color-posnr ).
              IF l_status2 NE l_status.
                l_error = 'X'.
                CONCATENATE text-ecp l_listado_color-vbeln l_listado_color-posnr INTO
                l_string SEPARATED BY space.
                o_errores->add_message( l_string ).
              ENDIF.
            ENDIF.
          ELSEIF l_cont = 0.
            CONCATENATE text-ppd l_listado_color-vbeln l_listado_color-posnr
            text-mus INTO l_string SEPARATED BY space.
            o_errores->add_message( l_string ).
          ELSEIF l_cont > 1.
            CONCATENATE text-ppd l_listado_color-vbeln l_listado_color-posnr
            text-css INTO l_string SEPARATED BY space.
            o_errores->add_message( l_string ).
          ENDIF.
        ENDIF.
      ENDIF.

      IF l_listado_color-lifsk NE l_listado_color_ini-lifsk.
        PERFORM verificar_autorizacion USING 'LIFSK'.
        IF v_aut = 'X'.
          PERFORM cambiar_cab_pedido_sd.
        ENDIF.
      ENDIF.

      IF l_listado_color-fasignada NE l_listado_color_ini-fasignada OR
         l_listado_color-werks NE l_listado_color_ini-werks.

        IF l_listado_color-fasignada NE l_listado_color_ini-fasignada.
          DATA: l_sem_old    TYPE scal-week,
                l_sem_new    TYPE scal-week,
                l_fasign_old TYPE d,
                l_fasign_new TYPE d.

          l_fasign_old = zcl_ap_fechas=>string2fecha( l_listado_color-fasignada ).
          l_sem_old = zcl_ap_fechas=>get_semana( l_fasign_old ).
          l_fasign_new = zcl_ap_fechas=>string2fecha(
          l_listado_color_ini-fasignada ).
          l_sem_new = zcl_ap_fechas=>get_semana( l_fasign_new ).

          IF l_sem_old NE l_sem_new.
            IF l_listado_color-zzcausa_retraso IS INITIAL.
              CONCATENATE text-icr l_listado_color-vbeln INTO l_string SEPARATED BY
              space.
              o_errores->add_message( l_string ).
            ENDIF.
          ENDIF.
          PERFORM verificar_autorizacion USING 'FASIGNADA'.
          IF v_aut IS INITIAL.
            CONTINUE.
          ENDIF.
        ENDIF.
*---> INI SAT 7000012702
        IF l_listado_color-werks NE l_listado_color_ini-werks.
          PERFORM verificar_autorizacion USING 'WERKS'.
          IF v_aut IS INITIAL.
            CONTINUE.
          ENDIF.
        ENDIF.
*<--- END SAT

        PERFORM cambiar_pos_pedido_sd.
      ENDIF.

      IF l_listado_color-route NE l_listado_color_ini-route.
        PERFORM verificar_autorizacion USING 'ROUTE'.
        IF v_aut = 'X'.
          PERFORM cambiar_ruta.
        ENDIF.
      ENDIF.

      IF l_listado_color-mbdat_text NE l_listado_color_ini-mbdat_text.
        PERFORM verificar_autorizacion USING 'MBDAT'.
        IF v_aut = 'X'.
          PERFORM cambiar_mbdat.
        ENDIF.
      ENDIF.

*IF l_listado_color-zzpld_text NE l_listado_color_ini-zzpld_text.
*          PERFORM verificar_autorizacion USING 'ZZPLD'.
*          IF v_aut = 'X'.
*            PERFORM cambiar_zzpld.
*          ENDIF.
*        ENDIF.

      IF l_listado_color-lddat_text NE l_listado_color_ini-lddat_text.
        PERFORM verificar_autorizacion USING 'LDDAT'.
        IF v_aut = 'X'.
          PERFORM cambiar_lddat.
        ENDIF.
      ENDIF.

*        IF l_listado_color-zzred NE l_listado_color_ini-zzred.
*          PERFORM verificar_autorizacion USING 'ZZRED'.
*          IF v_aut = 'X'.
*            PERFORM cambiar_zzred.
*          ENDIF.
*        ENDIF.

      IF l_listado_color-fentregacliente NE
      l_listado_color_ini-fentregacliente.
        PERFORM verificar_autorizacion USING 'FENTREGACLIENTE'.
        IF v_aut = 'X'.
          PERFORM cambiar_fecha_entcliente.
        ENDIF.
      ENDIF.

      IF l_listado_color-zzcausa_retraso NE
      l_listado_color_ini-zzcausa_retraso.
        PERFORM verificar_autorizacion USING 'ZZCAUSA_RETRASO'.
        IF v_aut = 'X'.
          IF l_listado_color-vbeln(4) = '0044'.
            UPDATE ekpo
                SET zzcausa_retraso = l_listado_color-zzcausa_retraso
              WHERE ebeln = l_listado_color-vbeln
                AND ebelp = l_listado_color-posnr+1.
          ELSE.
            UPDATE vbap
               SET zzcausa_retraso = l_listado_color-zzcausa_retraso
             WHERE vbeln = l_listado_color-vbeln
               AND posnr = l_listado_color-posnr.
          ENDIF.
        ENDIF.
      ENDIF.

*      ENDIF.
    ENDLOOP.
    IF l_error IS INITIAL.
      i_listado_color_ini = i_listado_color.
      MESSAGE s398(00) WITH text-sgc.                       "#EC *
    ELSE.
      o_errores->show_errores( ).
    ENDIF.
  ELSE.
    MESSAGE s439(pwww). "No se han realizado cambios, nada p.grabar
  ENDIF.

ENDFORM.                    " GRABAR_CAMBIOS
*&---------------------------------------------------------------------*
*&      Form  VERIFICAR_AUTORIZACION
*&---------------------------------------------------------------------*
FORM verificar_autorizacion  USING pe_campo.
  DATA: l_string      TYPE string,
        l_descr_campo TYPE string.

  IF o_errores IS INITIAL.
    CREATE OBJECT o_errores.
  ENDIF.

  l_descr_campo = zcl_ap_dev=>get_descripcion_campo( tabla = 'ZSD_EST_PED'
  campo = pe_campo ).
  IF l_descr_campo IS INITIAL.
    l_descr_campo = pe_campo.
  ENDIF.

  IF l_listado_color-estado CS 'F'.
    CONCATENATE text-epf l_listado_color-vbeln l_listado_color-posnr INTO
    l_string SEPARATED BY space.

    o_errores->add_message( message = l_string msgv1 = l_listado_color-vbeln
    msgv2 = l_listado_color-posnr ).
    l_error = 'X'.
  ELSE.
    CLEAR v_aut.
    IF v_autorizado IS INITIAL.
      CONCATENATE text-nat sy-tcode text-enc l_descr_campo INTO l_string
      SEPARATED BY space.
      o_errores->add_message( message = l_string msgv1 = l_listado_color-vbeln
      msgv2 = l_listado_color-posnr ).
      l_error = 'X'.
    ELSE.
      SELECT SINGLE * FROM zep_permisos
       WHERE tcode = sy-tcode
         AND campo = pe_campo
         AND editar = 'X'.
      IF sy-subrc = 0.
        v_aut = 'X'.
      ELSE.
        CONCATENATE text-nat sy-tcode text-enc l_descr_campo INTO l_string
        SEPARATED BY space.
        o_errores->add_message( message = l_string msgv1 = l_listado_color-vbeln
        msgv2 = l_listado_color-posnr ).
        l_error = 'X'.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " VERIFICAR_AUTORIZACION


*&---------------------------------------------------------------------*
*&      Form  CALCULAR_STOCK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_L_LISTADO_COLOR_WERKS  text
*      -->P_L_LISTADO_COLOR_MATNR  text
*      <--P_L_LISTADO_COLOR_CLABS  text
*----------------------------------------------------------------------*
FORM calcular_stock  USING    lv_werks
                              lv_matnr
                     CHANGING lv_clabs.

  DATA: ls_mchb   TYPE mchb,
        lt_class  LIKE conf_out OCCURS 0,
        ls_class  TYPE conf_out,
        ls_class2 TYPE conf_out.

  CLEAR ls_mchb.
  SELECT * INTO ls_mchb
  FROM mchb
  WHERE werks = lv_werks
  AND matnr   = lv_matnr
  AND clabs   > 0.

    CALL FUNCTION 'VB_BATCH_VALUES_FOR_OUTPUT'
      EXPORTING
        material               = ls_mchb-matnr
        plant                  = ls_mchb-werks
        batch                  = ls_mchb-charg
*       BATCH_CUOBJ            =
        language               = sy-langu
      TABLES
*       OBJECTS                =
        classification         = lt_class
      EXCEPTIONS
        no_classification_data = 1
        OTHERS                 = 2.


    CLEAR: ls_class, ls_class2.
* YTORRES 21/062016 7000010948 Se filtra además por cliente.
    READ TABLE lt_class INTO ls_class2
    WITH KEY atnam = 'Z_CLIENTE'.

    READ TABLE lt_class INTO ls_class
    WITH KEY atnam = 'LOBM_UDCODE'.

    IF sy-subrc = 0 AND ls_class-atwrt = 'DE       A' AND ls_class2-atwrt =
    l_listado_color-kunnr." Ytorres ls_class2-atwrt = kna1-kunnr.
      lv_clabs = lv_clabs + ls_mchb-clabs.
    ENDIF.
** YTORRES 21/062016 7000010948 Se filtra además por cliente.
  ENDSELECT.

ENDFORM.                    " CALCULAR_STOCK
*&---------------------------------------------------------------------*
*&      Form  INITIALIZATION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM initialization_sel .

  DATA: ls_werks LIKE LINE OF s_werks,
        lv_werks TYPE         werks_d.

  CLEAR: lv_werks, ls_werks.

  SELECT SINGLE parva FROM usr05
  INTO lv_werks
  WHERE bname = sy-uname AND
  parid = 'WRK'.

  IF lv_werks IS NOT INITIAL.
    ls_werks-sign = 'I'.
    ls_werks-option = 'EQ'.
    ls_werks-low = lv_werks.
    APPEND ls_werks TO s_werks.
  ENDIF.

ENDFORM.                    " INITIALIZATION_SEL

*FORM control_campos.
*  IF p_compra = 'X' and "IS NOT INITIAL.
*     s_lifnr = ' '."IS INITIAL.
*      MESSAGE w033(zsd).
*    ENDIF.
*
*ENDFORM.
