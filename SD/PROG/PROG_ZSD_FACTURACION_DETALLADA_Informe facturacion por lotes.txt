***********************************************************************
* APLICACION : SD
* TIPO : LISTADO
* TITULO : Facturación detallada
* *
* DESCRIPCION : Facturación detallada
*
* AUTOR: Elias Bellver                                FECHA: 10/06/2014
* ANALISTA: Elias Bellver
*
* MODIFICACIONES
*
***********************************************************************
REPORT zsd_facturacion_detallada.

*------INCLUDES--------------------------------------------------------*

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: vbrk, vbrp, lips, zest_lotes, vbpa, adrc,
        bkpf, *bkpf, bseg, *bseg, vbap, knb1, t001, mara,
        knvv, likp.

*------CAMPOS ADICIONALES----------------------------------------------*
CONSTANTS: cg_meins_m2 TYPE meins VALUE 'M2'.
DATA:   cantidad_lote LIKE lips-lfimg.
*------TABLAS INTERNAS-------------------------------------------------*
TYPES: BEGIN OF t_listado,       "LOTES DE POSICIONES DE FACTURA
         vkorg         TYPE vbrk-vkorg,
         vkgrp         TYPE vbrp-vkgrp,
         fkart         TYPE vbrk-fkart,
         vbeln         TYPE vbeln_vf,
         fkdat         TYPE fkdat,
         pernr         TYPE vbpa-pernr,
         ename         TYPE pa0001-ename,
         kunrg         TYPE vbrk-kunrg,
         kunrg_name1   TYPE kna1-name1,
         kunag         TYPE vbrk-kunag,
         kunag_name1   TYPE kna1-name1,
         post_code1    TYPE adrc-post_code1,
         city1         TYPE adrc-city1,
         country       TYPE adrc-country,
         zlsch         TYPE vbrk-zlsch,
         zlsch_t       TYPE t042z-text1,
         kvgr3         TYPE knvv-kvgr3,
         posnr         TYPE posnr_vl,
         vgtyp         TYPE vgtyp,
         vgbel         TYPE vbeln_vl,
         fcreaent      TYPE erdat,
         wadat_ist     TYPE likp-wadat_ist,
         vgpos         TYPE posnr_vl,
         aubel         TYPE vbrp-aubel,
         aupos         TYPE vbrp-aupos,
         vbeln_va      TYPE vbeln_va,
         posnr_va      TYPE posnr_va,
         bstnk         TYPE vbak-bstnk,
         erdat         TYPE erdat,
         matnr         TYPE matnr,
         arktx         TYPE vbrp-arktx,
         prodh         TYPE prodh_d,
         matkl         TYPE matkl,
*          potencia TYPE i,
         fkimg         TYPE zctd_fact,
         cantidad_lote TYPE lips-lfimg,
         charg         TYPE charg_d,
         netwr         TYPE vbrp-netwr,
         mwsbp         TYPE vbrp-mwsbp,
         kzwi5         TYPE vbrp-kzwi5,
         total         TYPE vbrp-kzwi5,

         waerk         TYPE vbrk-waerk,
         total_eur     TYPE vbrp-kzwi5,
         budat_cobro   TYPE bkpf-bldat,
         cobrado       TYPE vbrp-kzwi5,
         cobrado_eur   TYPE vbrp-kzwi5,
         zzcalidad     TYPE mara-zzcalidad,
         zzgramaje     TYPE mara-zzgramaje,
         zzancho       TYPE mara-zzancho,
         zzlargo       TYPE mara-zzlargo,
         zzsegcal      TYPE likp-zzsegcal,
*          zh_estandar TYPE zest_lotes-zh_estandar,
*          zh_bastidor TYPE zest_lotes-zh_bastidor,
*          zh_ft       TYPE zest_lotes-zh_ft,
*          zh_pr_celula TYPE zest_lotes-zh_pr_celula,
*          z_devolucion TYPE zest_lotes-z_devolucion,
*          var_cal_pot_sap TYPE zest_lotes-var_cal_pot_sap,
*          tx_cal_vis_sap TYPE zest_lotes-tx_cal_vis_sap,
*          func_visual TYPE zest_lotes-func_visual,
*          z_revalorizado TYPE zest_lotes-z_revalorizado,
         m2_pedido     TYPE vbrp-kzwi4,
         kunwe         TYPE likp-kunnr,
         name1_we      TYPE name1_we,

         lgort         TYPE lgort_d,
       END OF t_listado.
DATA: i_listado TYPE TABLE OF t_listado,
      l_listado TYPE t_listado.

FIELD-SYMBOLS <listado> TYPE t_listado.


TYPES: BEGIN OF t_posiciones,           "POSICIONES DE FACTURA
         vkorg         TYPE vbrk-vkorg,
         vkgrp         TYPE vbrp-vkgrp,
         fkart         TYPE vbrk-fkart,
         vbeln         TYPE vbeln_vf,
         fkdat         TYPE fkdat,
         pernr         TYPE vbpa-pernr,
         ename         TYPE pa0001-ename,
         kunrg         TYPE vbrk-kunrg,
         kunrg_name1   TYPE kna1-name1,
         kunag         TYPE vbrk-kunag,
         kunag_name1   TYPE kna1-name1,
         post_code1    TYPE adrc-post_code1,
         city1         TYPE adrc-city1,
         country       TYPE adrc-country,
         zlsch         TYPE vbrk-zlsch,
         zlsch_t       TYPE t042z-text1,
         kvgr3         TYPE knvv-kvgr3,
         posnr         TYPE posnr_vl,
         vgtyp         TYPE vgtyp,
         vgbel         TYPE vbeln_vl,
         fcreaent      TYPE erdat,
         wadat_ist     TYPE likp-wadat_ist,
         vgpos         TYPE posnr_vl,
         aubel         TYPE vbrp-aubel,
         aupos         TYPE vbrp-aupos,
         vbeln_va      TYPE vbeln_va,
         posnr_va      TYPE posnr_va,
         bstnk         TYPE vbak-bstnk,
         erdat         TYPE erdat,
         matnr         TYPE matnr,
         arktx         TYPE vbrp-arktx,
         prodh         TYPE prodh_d,
         matkl         TYPE matkl,
         kunwe         TYPE likp-kunnr,
         name1_we      TYPE name1_we,
*          potencia    TYPE i,
         fkimg         TYPE zctd_fact,
         cantidad_lote TYPE lips-lfimg,
         charg         TYPE charg_d,
         netwr         TYPE vbrp-netwr,
         mwsbp         TYPE vbrp-mwsbp,
         zcr1          TYPE konv-kbetr, " BG 25.01.2024 GAPSD050 clase de condición "Comisión Royalties"
         zcr1v         TYPE konv-kwert, " BG 25.01.2024 GAPSD050 clase de condición "Comisión Royalties"
         zprc          TYPE konv-kwert,
         zr01          TYPE konv-kwert,
         lgort         TYPE vbrp-lgort,
         kzwi5         TYPE vbrp-kzwi5,
         total         TYPE vbrp-kzwi5,
         waerk         TYPE vbrk-waerk,
         total_eur     TYPE vbrp-kzwi5,
         budat_cobro   TYPE bkpf-bldat,
         cobrado       TYPE vbrp-kzwi5,
         cobrado_eur   TYPE vbrp-kzwi5,
         zzcalidad     TYPE mara-zzcalidad,
         zzgramaje     TYPE mara-zzgramaje,
         zzancho       TYPE mara-zzancho,
         zzlargo       TYPE mara-zzlargo,
         zzsegcal      TYPE likp-zzsegcal,
*         zh_estandar TYPE zest_lotes-zh_estandar,
*         zh_bastidor TYPE zest_lotes-zh_bastidor,
*         zh_ft       TYPE zest_lotes-zh_ft,
*         zh_pr_celula TYPE zest_lotes-zh_pr_celula,
*         z_devolucion TYPE zest_lotes-z_devolucion,
*         var_cal_pot_sap TYPE zest_lotes-var_cal_pot_sap,
*         tx_cal_vis_sap TYPE zest_lotes-tx_cal_vis_sap,
*         func_visual TYPE zest_lotes-func_visual,
*         z_revalorizado TYPE zest_lotes-z_revalorizado,
         m2_pedido     TYPE vbrp-kzwi4,
       END OF t_posiciones.
DATA: i_posiciones TYPE TABLE OF t_posiciones,
      l_posiciones TYPE t_posiciones.

FIELD-SYMBOLS <posiciones> TYPE t_posiciones.

TYPES: BEGIN OF t_resumen,            "CABECERAS DE FACTURAS.
         vkorg            TYPE vbrk-vkorg,
         vkgrp            TYPE vbrp-vkgrp,
         fkart            TYPE vbrk-fkart,
         vbeln            TYPE vbeln_vf,
         fkdat            TYPE fkdat,
         pernr            TYPE vbpa-pernr,
         ename            TYPE pa0001-ename,
         kunrg            TYPE vbrk-kunrg,
         kunrg_name1      TYPE kna1-name1,
         kunag            TYPE vbrk-kunag,
         kunag_name1      TYPE kna1-name1,
         post_code1       TYPE adrc-post_code1,
         city1            TYPE adrc-city1,
         country          TYPE adrc-country,
         zlsch            TYPE vbrk-zlsch,
         zlsch_t          TYPE t042z-text1,
         kvgr3            TYPE knvv-kvgr3,
         fkimg            TYPE zctd_fact,
         netwr            TYPE vbrp-netwr,
         mwsbp            TYPE vbrp-mwsbp,
         kzwi5            TYPE vbrp-kzwi5,
         total            TYPE vbrp-kzwi5,
         waerk            TYPE vbrk-waerk,
         total_eur        TYPE vbrp-kzwi5,
         zprc             TYPE konv-kwert,
         zr01             TYPE konv-kwert,
         anticipos        TYPE vbrp-kzwi5,
         anticipos_eur    TYPE vbrp-kzwi5,
         zterm            TYPE vbrk-zterm,
         zfbdt            TYPE bseg-zfbdt,
         bukrs            TYPE bseg-bukrs,
         belnr_cobro      TYPE bseg-belnr,
         gjahr_cobro      TYPE bseg-gjahr,
         blart_cobro      TYPE bkpf-blart,
         budat_cobro      TYPE bkpf-bldat,
         cobrado          TYPE vbrp-kzwi5,
         cobrado_eur      TYPE vbrp-kzwi5,
         porcentaje_cobro TYPE p DECIMALS 8,
         pte_cobro        TYPE vbrp-kzwi5,
         zzsegcal         TYPE likp-zzsegcal,
         m2_pedido        TYPE vbrp-kzwi4,
       END OF t_resumen.
DATA: i_resumen TYPE TABLE OF t_resumen,
      l_resumen TYPE t_resumen.

FIELD-SYMBOLS <resumen> TYPE t_resumen.

*------VARIABLES-------------------------------------------------------*

*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv.
  PUBLIC SECTION.
    METHODS: handle_double_click REDEFINITION.
    METHODS: handle_user_command REDEFINITION.
ENDCLASS. "lcl_alv DEFINITION

DATA: o_alv TYPE REF TO lcl_alv.

*----------------------------------------------------------------------*
*       CLASS lcl_alv_det DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv_det DEFINITION INHERITING FROM zcl_ap_alv.
  PUBLIC SECTION.
    METHODS: handle_double_click REDEFINITION.
    METHODS: handle_user_command REDEFINITION.
ENDCLASS. "lcl_alv DEFINITION

DATA: o_alv_det TYPE REF TO lcl_alv_det,
      o_alv_pos TYPE REF TO lcl_alv_det.

*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK 001 WITH FRAME.
SELECT-OPTIONS: s_vbeln FOR vbrk-vbeln,
                s_fkart FOR vbrk-fkart,
                s_fkdat FOR vbrk-fkdat,
                s_vkorg FOR vbrk-vkorg,
                s_vkgrp FOR vbrp-vkgrp,
                s_kunag FOR vbrk-kunag,
                s_matnr FOR vbrp-matnr,
                s_charg FOR lips-charg,
                s_vgbel FOR lips-vbeln,
                s_pernr FOR vbpa-pernr MATCHCODE OBJECT prem,
                s_kvgr3 FOR knvv-kvgr3,
                s_kunwe FOR likp-kunnr MODIF ID pos.

SELECTION-SCREEN SKIP.
PARAMETERS: p_noanul AS CHECKBOX DEFAULT ' '.
SELECTION-SCREEN END OF BLOCK 001.
SELECTION-SCREEN BEGIN OF BLOCK 002 WITH FRAME.
PARAMETERS: p_resum RADIOBUTTON GROUP g USER-COMMAND g,
            p_posic RADIOBUTTON GROUP g,
            p_detal RADIOBUTTON GROUP g.
SELECTION-SCREEN END OF BLOCK 002.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD handle_double_click.
    READ TABLE i_resumen INDEX row INTO l_resumen.
    IF sy-subrc = 0.
      IF column = 'LFIMG'.
*        zcl_clas_lote=>ver_mat_lote( matnr = l_listado-matnr
*                                     charg = l_listado-charg ).
      ELSEIF column CS 'COBR'.
        IF NOT l_resumen-belnr_cobro IS INITIAL.
          zcl_ap_doc_fi=>fb03( bukrs = l_resumen-bukrs
                            belnr = l_resumen-belnr_cobro
                            gjahr = l_resumen-gjahr_cobro ).
        ENDIF.
      ELSE.
        zcl_ap_factura_sd=>visualizar( l_resumen-vbeln ).
      ENDIF.
    ENDIF.
  ENDMETHOD. "handle_double_click
  METHOD handle_user_command.
    DATA: l_row TYPE i.

    CASE e_salv_function.
*      WHEN 'BLOQUEAR'.
*        get_seleccion( ).
*        LOOP AT i_listado ASSIGNING <listado> WHERE check = 'X'.
*           <listado>-lights = zcl_ap_alv=>c_sem_rojo.
*        ENDLOOP.
*        refresh( ).

      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD. "handle_USER_COMMAND

ENDCLASS. "lcl_alv IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_alv_det IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv_det IMPLEMENTATION.
  METHOD handle_double_click.
    IF nombre_tabla CS 'LISTADO'.
      READ TABLE i_listado INDEX row INTO l_listado.
      IF sy-subrc = 0.
*      IF column = 'VBELN'.
        zcl_ap_factura_sd=>visualizar( l_listado-vbeln ).
*      ELSE.
*        zcl_clas_lote=>ver_mat_lote( matnr = l_listado-matnr
*                                    charg = l_listado-charg ).
*     ENDIF.
      ENDIF.
    ELSE.
      READ TABLE i_posiciones INDEX row INTO l_posiciones.
      IF sy-subrc = 0.
        zcl_ap_factura_sd=>visualizar( l_posiciones-vbeln ).
      ENDIF.
    ENDIF.
  ENDMETHOD. "handle_double_click
  METHOD handle_user_command.
    DATA: l_row TYPE i.

    CASE e_salv_function.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD. "handle_USER_COMMAND

ENDCLASS. "lcl_alv IMPLEMENTATION

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  SET PF-STATUS 'INICIO'.

AT SELECTION-SCREEN OUTPUT.

  zcl_ap_dynpro=>screen_visible( group1 = 'POS' variable = p_resum variable_inv = 'X'  ).
  IF p_resum = 'X'.
    CLEAR s_kunwe[].
  ENDIF.

AT SELECTION-SCREEN.

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

  PERFORM leer_datos.

  IF p_resum = 'X'.
    PERFORM listado.
  ELSEIF p_posic = 'X'.
    PERFORM listado_posiciones.
  ELSE.
    PERFORM listado_detalle.
  ENDIF.

************************************************************************
*
* FORMS ADICIONALES
*
************************************************************************
*&---------------------------------------------------------------------*
*& Form listado
*&---------------------------------------------------------------------*
FORM listado .

  CREATE OBJECT o_alv
    EXPORTING
      tabla = 'I_RESUMEN'.

  o_alv->set_orden( 'VBELN,FKDAT' ).
  o_alv->set_field_text( campo = 'PERNR' valor = text-com ).
  o_alv->set_field_text( campo = 'ENAME' valor = text-nco ).
  o_alv->set_field_text( campo = 'KZWI5' valor = text-por ).
  o_alv->set_field_text( campo = 'ANTICIPOS' valor = text-ant ).
  o_alv->set_field_text( campo = 'TOTAL' valor = text-tot ).
  o_alv->set_field_text( campo = 'COBRADO' valor = text-cob ).
  o_alv->set_field_text( campo = 'BELNR_COBRO' valor = text-dco ).
  o_alv->set_field_text( campo = 'BUDAT_COBRO' valor = text-fco ).
  o_alv->set_field_text( campo = 'PORCENTAJE_COBRO' valor = text-pco ).
  o_alv->set_field_text( campo = 'PTE_COBRO' valor = text-ptc ).
  o_alv->set_field_text( campo = 'COBRADO_EUR' valor = text-cob ).
  o_alv->set_field_text( campo = 'TOTAL_EUR' valor = text-toe ).
  o_alv->set_field_text( campo = 'ANTICIPOS_EUR' valor = text-ane ).
  o_alv->set_field_text( campo = 'M2_PEDIDO' valor = 'M² pedido'(001) ).
  o_alv->set_field_text( campo = 'ZPRC' valor = 'Precio ZPRC' ).
  o_alv->set_field_text( campo = 'ZR01' valor = 'Precio ZR01' ).

  o_alv->set_agregacion( 'NETWR,KZWI5,MWSBP,TOTAL,ANTICIPOS,COBRADO,PTE_COBRO,ZPRC,ZR01').
  o_alv->set_field_noout( 'BUKRS,GJAHR_COBRO,FKIMG' ).
  o_alv->show( ).

ENDFORM. " listado

*&---------------------------------------------------------------------*
*&      Form  listado_detalle
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM listado_detalle.

  CREATE OBJECT o_alv_det.

  o_alv_det->set_orden( 'VKORG,VKGRP,FKART,VBELN,FKDAT,PERNR,ENAME,KUNRG,KUNRG_NAME1,KUNAG,KUNAG_NAME1' ).
  o_alv_det->set_orden( 'POST_CODE1,CITY1,COUNTRY,POSNR,VGBEL,WADAT_IST,VGPOS,MATNR,CHARG,AUBEL,AUPOS,ZZSEGCAL' ). "UDEFINEDES 13.11.2017
  o_alv_det->set_agregacion( 'NETWR,KZWI5,MWSBP,TOTAL').
*  o_alv_det->set_field_noout( 'ZH_BASTIDOR,ZH_FT,ZH_PR_CELULA,Z_REVALORIZADO,VGTYP' ).
  o_alv_det->set_field_text( campo = 'PERNR' valor = text-com ).
  o_alv_det->set_field_text( campo = 'ENAME' valor = text-nco ).
  o_alv_det->set_field_text( campo = 'KZWI5' valor = text-por ).
  o_alv_det->set_field_text( campo = 'TOTAL' valor = text-tot ).
  o_alv_det->set_field_text( campo = 'FCREAENT' valor = text-fce ).
  o_alv_det->set_field_text( campo = 'ERDAT' valor = text-fcp ).
  o_alv_det->set_field_text( campo = 'KZWI5' valor = text-por ).
  o_alv_det->set_field_text( campo = 'COBRADO' valor = text-cob ).
  o_alv_det->set_field_text( campo = 'BUDAT_COBRO' valor = text-fco ).
  o_alv_det->set_field_text( campo = 'COBRADO_EUR' valor = text-cob ).
  o_alv_det->set_field_text( campo = 'TOTAL_EUR' valor = text-toe ).
  o_alv_det->set_field_text( campo = 'M2_PEDIDO' valor = 'M² pedido'(001) ).

*  o_alv_det->set_field_text( 'POTENCIA' ).
  o_alv_det->show( ).

ENDFORM. " listado

*&---------------------------------------------------------------------*
*&      Form  listado_posiciones
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM listado_posiciones.

  CREATE OBJECT o_alv_pos
    EXPORTING
      tabla = 'I_POSICIONES'.

  o_alv_pos->set_orden( 'VKORG,VKGRP,FKART,VBELN,FKDAT,PERNR,ENAME,KUNRG,KUNRG_NAME1,KUNAG,KUNAG_NAME1' ).
  o_alv_pos->set_orden( 'POST_CODE1,CITY1,COUNTRY,POSNR,VGBEL,WADAT_IST,VGPOS,MATNR,AUBEL,AUPOS,ZZSEGCAL' ). "UDEFINEDES 13.11.2017
  o_alv_pos->set_agregacion( 'NETWR,KZWI5,MWSBP,TOTAL,ZCR1,ZCR1V').
  o_alv_pos->set_field_noout( 'VGTYP' ).
  o_alv_pos->set_field_text( campo = 'PERNR' valor = text-com ).
  o_alv_pos->set_field_text( campo = 'ENAME' valor = text-nco ).
  o_alv_pos->set_field_text( campo = 'KZWI5' valor = text-por ).
  o_alv_pos->set_field_text( campo = 'TOTAL' valor = text-tot ).
  o_alv_pos->set_field_text( campo = 'FCREAENT' valor = text-fce ).
  o_alv_pos->set_field_text( campo = 'ERDAT' valor = text-fcp ).
  o_alv_pos->set_field_text( campo = 'KZWI5' valor = text-por ).
  o_alv_pos->set_field_text( campo = 'COBRADO' valor = text-cob ).
  o_alv_pos->set_field_text( campo = 'COBRADO_EUR' valor = text-cob ).
  o_alv_pos->set_field_text( campo = 'TOTAL_EUR' valor = text-toe ).
  o_alv_pos->set_field_text( campo = 'BUDAT_COBRO' valor = text-fco ).
  o_alv_pos->set_field_text( campo = 'M2_PEDIDO' valor = 'M² pedido'(001) ).
  o_alv_pos->set_field_text( campo = 'ZCR1' valor = text-tcr ). " BG 25.01.2024 GAPSD050
  o_alv_pos->set_field_text( campo = 'ZCR1V' valor = text-tcv ). " BG 25.01.2024 GAPSD050
  o_alv_pos->set_field_text( campo = 'ZPRC' valor = 'Precio ZPRC' ).
  o_alv_pos->set_field_text( campo = 'ZR01' valor = 'Precio ZR01' ).

*  o_alv_pos->set_field_text( 'POTENCIA' ).
  o_alv_pos->show( ).

ENDFORM. " listado

*&---------------------------------------------------------------------*
*&      Form  LEER_DATOS
*&---------------------------------------------------------------------*
FORM leer_datos .


  DATA: BEGIN OF i_fact OCCURS 0,
          vbeln     TYPE vbeln_vf,
          fkart     TYPE fkart,
          vbtyp     TYPE vbtyp,
          fkdat     TYPE fkdat,
          vkorg     TYPE vbrk-vkorg,
          vtweg     TYPE vbrk-vtweg,
          vkgrp     TYPE vbrp-vkgrp,
          waerk     TYPE waers,
          bukrs     TYPE bukrs,
          zlsch     TYPE vbrk-zlsch,
          zlsch_t   TYPE t042z-text1,
          kurrf     TYPE vbrk-kurrf,
          kunrg     TYPE vbrk-kunrg,
          kunag     TYPE vbrk-kunag,
          kalsm     TYPE vbrk-kalsm,
          knumv     TYPE vbrk-knumv, " BG 25.01.2024 GAPSD050 clase de condición "Comisión Royalties"
          posnr     TYPE posnr_vf,
          matnr     TYPE vbrp-matnr,
          arktx     TYPE vbrp-arktx,
          prodh     TYPE vbrp-prodh,
          matkl     TYPE matkl,
          fkimg     TYPE bprbm,
          bonba     TYPE vbrp-bonba,
          netwr     TYPE vbrp-netwr,
          kzwi1     TYPE vbrp-kzwi1,
          kzwi5     TYPE vbrp-kzwi5,
          mwsbp     TYPE vbrp-mwsbp,
          zterm     TYPE vbrk-zterm,
          vgtyp     TYPE vgtyp,
          vgbel     TYPE vbeln_vl,
          vgpos     TYPE posnr_vl,
          aubel     TYPE vbrp-aubel,
          aupos     TYPE vbrp-aupos,
          total     TYPE vbrp-netwr,
          total_eur TYPE vbrp-netwr,
          zzcalidad TYPE mara-zzcalidad,
          zzgramaje TYPE mara-zzgramaje,
          zzancho   TYPE mara-zzancho,
          zzlargo   TYPE mara-zzlargo,
          zzsegcal  TYPE likp-zzsegcal,
          vrkme     TYPE vbrp-vrkme,
          umvkz     TYPE vbrp-umvkz,
          umvkn     TYPE vbrp-umvkn,
          m2_pedido TYPE vbrp-kzwi4,
          kvgr3     TYPE vbrp-kvgr3,
          lgort     TYPE vbrp-lgort,
          kunwe     TYPE likp-kunnr,
          name1_we  TYPE name1_we,
        END OF i_fact,
        i_lotes                   TYPE ztab_lotes,
        l_lote                    TYPE zest_lotes,
        l_coste                   TYPE atflv,
        l_iva_anticipos           TYPE vbap-netwr,
        l_total_cobro             TYPE vbap-netwr,
        l_total_cobro_eur         TYPE vbap-netwr,
        l_total_cobro2            TYPE vbap-netwr,
        l_total_cobro2_eur        TYPE vbap-netwr,
        l_total_sin_anticipos     TYPE vbap-netwr,
        l_total_sin_anticipos_eur TYPE vbap-netwr,
        i_selcar                  TYPE TABLE OF bapi1003_alloc_values_char WITH HEADER LINE.

  RANGES r_vbeln FOR lips-vbeln.

  DATA(o_core_mm) = NEW zhcl_mm_core( ).

  IF NOT s_charg[] IS INITIAL.
    r_vbeln-option = 'EQ'.
    r_vbeln-sign   = 'I'.
    SELECT vbeln FROM lips
      INTO r_vbeln-low
     WHERE charg IN s_charg.
      COLLECT r_vbeln.
    ENDSELECT.
  ENDIF.

  zcl_ap_sgpi=>text( 'Seleccionando facturas' ).
  SELECT vbrk~vbeln, fkdat, waerk, kalsm, vbrk~knumv, posnr,
         vbrp~fkimg, bonba, vbrp~netwr, vbrp~mwsbp,
         kzwi1, kzwi5, vgtyp, vgbel, vgpos,
         vbrk~vkorg, vbrp~vkgrp, kunrg, kunag, vbrk~zterm, fkart,
         kurrf, vbtyp, vbrk~vtweg, matnr, arktx, prodh,
         matkl, aubel, aupos, bukrs,
         vbrp~vrkme, vbrp~umvkn, vbrp~umvkz, "vbrp~kzwi4 as m2_pedido
         knvv~kvgr3, vbrp~lgort
    FROM vbrk JOIN vbrp ON vbrk~vbeln = vbrp~vbeln
    LEFT OUTER JOIN knvv ON knvv~kunnr = vbrk~kunag
                          AND knvv~vkorg = vbrk~vkorg
                          AND knvv~vtweg = vbrk~vtweg
                          AND knvv~spart = vbrk~spart
    INTO CORRESPONDING FIELDS OF TABLE @i_fact
   WHERE vbrk~vbeln IN @s_vbeln
     AND vbrk~vkorg IN @s_vkorg
     AND fkdat IN @s_fkdat
     AND fkart IN @s_fkart
     AND matnr IN @s_matnr
     AND vgbel IN @s_vgbel
     AND vgbel IN @r_vbeln
     AND vbrp~vkgrp IN @s_vkgrp
     AND kunag IN @s_kunag
     AND knvv~kvgr3 IN @s_kvgr3.

  LOOP AT i_fact.
    AUTHORITY-CHECK OBJECT 'V_VBAK_VKO'
             ID 'VKORG' FIELD i_fact-vkorg
             ID 'VTWEG' FIELD i_fact-vtweg
             ID 'SPART' DUMMY
             ID 'ACTVT' FIELD '03'.
    IF sy-subrc NE 0.
      DELETE i_fact.
      CONTINUE.
    ENDIF.

    CLEAR adrc.
    SELECT SINGLE kunnr FROM vbpa
      INTO (i_fact-kunwe)
     WHERE vbeln = i_fact-vbeln
       AND posnr = i_fact-posnr
       AND parvw = 'WE'.
    IF sy-subrc NE 0.
      SELECT SINGLE kunnr FROM vbpa
        INTO (i_fact-kunwe)
       WHERE vbeln = i_fact-vbeln
         AND posnr = '000000'
         AND parvw = 'WE'.
      IF sy-subrc NE 0.
        SELECT SINGLE kunnr FROM vbpa
          INTO (i_fact-kunwe)
         WHERE vbeln = i_fact-vbeln
           AND parvw = 'WE'.
      ENDIF.
    ENDIF.
    IF NOT i_fact-kunwe IN s_kunwe.
      DELETE i_fact.
      CONTINUE.
    ELSEIF NOT i_fact-kunwe IS INITIAL.
      SELECT SINGLE name1 FROM kna1
        INTO i_fact-name1_we
       WHERE kunnr = i_fact-kunwe.
      MODIFY i_fact.
    ENDIF.

    CLEAR l_resumen.
    IF i_fact-waerk NE 'EUR'.
      IF i_fact-kurrf >= 0.
        i_fact-netwr = i_fact-netwr * i_fact-kurrf.
        i_fact-mwsbp = i_fact-mwsbp * i_fact-kurrf.
        i_fact-kzwi5 = i_fact-kzwi5 * i_fact-kurrf.
      ELSE.
        i_fact-netwr = - i_fact-netwr / i_fact-kurrf.
        i_fact-mwsbp = - i_fact-mwsbp / i_fact-kurrf.
        i_fact-kzwi5 = - i_fact-kzwi5 / i_fact-kurrf.
      ENDIF.
    ENDIF.
    IF i_fact-vbtyp = 'N' OR i_fact-vbtyp = 'O' OR i_fact-vbtyp = '6'.
      i_fact-netwr = - i_fact-netwr.
      i_fact-mwsbp = - i_fact-mwsbp.
      i_fact-kzwi5 = - i_fact-kzwi5.
      i_fact-fkimg = - i_fact-fkimg.
    ENDIF.

    IF i_fact-umvkn <> 0.
      i_fact-fkimg = i_fact-fkimg * i_fact-umvkz / i_fact-umvkn.
    ENDIF.

    i_fact-total = i_fact-netwr + i_fact-mwsbp.

    IF i_fact-waerk NE 'EUR'.
      IF i_fact-kurrf >= 0.
        i_fact-total_eur = i_fact-total * i_fact-kurrf.
      ELSE.
        i_fact-total_eur = - i_fact-total / i_fact-kurrf.
      ENDIF.
    ELSE.
      i_fact-total_eur = i_fact-total.
    ENDIF.

    IF i_fact-zlsch IS INITIAL.
      SELECT SINGLE zwels FROM knb1
        INTO knb1-zwels
       WHERE kunnr = i_fact-kunrg
         AND bukrs = i_fact-bukrs.
      i_fact-zlsch = knb1-zwels.
    ENDIF.

    IF NOT i_fact-zlsch IS INITIAL.
      SELECT SINGLE * FROM t001
       WHERE bukrs = i_fact-bukrs.
      i_fact-zlsch_t = zcl_proveedor_slk=>get_desc_via_pago( zlsch = i_fact-zlsch land1 = t001-land1 ).
    ENDIF.
* RECUPERAMOS LOS VALORES DE CALIDAD, GRAMAJE, ANCHO Y LARGO POR SI EL
* MATERIAL LO TUVIERA IDENTIFICADO.
    IF i_fact-zzcalidad IS INITIAL.
      SELECT SINGLE zzcalidad FROM mara
        INTO i_fact-zzcalidad
       WHERE matnr = i_fact-matnr.
    ENDIF.
    IF i_fact-zzgramaje IS INITIAL.
      SELECT SINGLE zzgramaje FROM mara
        INTO i_fact-zzgramaje
       WHERE matnr = i_fact-matnr.
    ENDIF.
    IF i_fact-zzancho IS INITIAL.
      SELECT SINGLE zzancho FROM mara
        INTO i_fact-zzancho
       WHERE matnr = i_fact-matnr.
    ENDIF.
    IF i_fact-zzlargo IS INITIAL.
      SELECT SINGLE zzlargo FROM mara
        INTO i_fact-zzlargo
       WHERE matnr = i_fact-matnr.
    ENDIF.

    SELECT SINGLE zzsegcal INTO i_fact-zzsegcal
      FROM likp WHERE vbeln = i_fact-vgbel.



    DATA: vl_menge    TYPE ekpo-menge.

    vl_menge = i_fact-fkimg.
    IF i_fact-vrkme <> cg_meins_m2.
      "APC20240919 Cambiamos la unidad de conversión
*      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
*        EXPORTING
*          i_matnr              = i_fact-matnr
*          i_in_me              = i_fact-vrkme
*          i_out_me             = cg_meins_m2
*          i_menge              = vl_menge
*        IMPORTING
*          e_menge              = vl_menge
*        EXCEPTIONS
*          error_in_application = 1
*          error                = 2
*          OTHERS               = 3.
*      IF sy-subrc <> 0.
*        CLEAR vl_menge.
*      ENDIF.
      vl_menge = o_core_mm->conv_m2( matnr         = i_fact-matnr
                                     unidad_origen = i_fact-vrkme
                                     cantidad      = vl_menge
                                     transaccion   = 'ZSD0006' ).

    ENDIF.
    i_fact-m2_pedido = vl_menge.

    MODIFY i_fact.

    MOVE-CORRESPONDING i_fact TO l_resumen.
    COLLECT l_resumen INTO i_resumen.
  ENDLOOP.

  zcl_ap_sgpi=>text( 'Calculando datos de cobro' ).

  LOOP AT i_resumen ASSIGNING <resumen>.

    READ TABLE i_fact WITH KEY vbeln = <resumen>-vbeln.

    <resumen>-zfbdt = zcl_fact_slk=>get_fecha_vto( vbeln = i_fact-vbeln zterm = i_fact-zterm ).

    SELECT SINGLE pernr FROM vbpa
      INTO <resumen>-pernr
     WHERE vbeln = <resumen>-vbeln
       AND posnr = '000000'
       AND parvw = 'Z1'.

    <resumen>-kunrg_name1 = zcl_ap_cliente=>get_nombre( <resumen>-kunrg ).
    <resumen>-kunag_name1 = zcl_ap_cliente=>get_nombre( <resumen>-kunag ).
    IF NOT <resumen>-pernr IS INITIAL.
      <resumen>-ename = zcl_ap_empleado=>get_nombre( <resumen>-pernr ).
    ENDIF.
    adrc = zcl_ap_factura_sd=>get_adrc_entrega( <resumen>-vbeln ).
    MOVE-CORRESPONDING adrc TO <resumen>.

    bkpf = zcl_ap_factura_sd=>get_doc_fi( <resumen>-vbeln ).
    <resumen>-zfbdt = zcl_ap_factura_sd=>get_fecha_vto( vbeln = <resumen>-vbeln
                                                     zterm = <resumen>-zterm ).

    IF NOT bkpf IS INITIAL.
      SELECT * FROM bseg
       WHERE bukrs = bkpf-bukrs
         AND belnr = bkpf-belnr
         AND gjahr = bkpf-gjahr
         AND koart = 'D'
         AND umskz = 'A'.
        IF bseg-shkzg = 'S'.
          ADD bseg-dmbtr TO <resumen>-anticipos_eur.
          ADD bseg-mwsts TO <resumen>-anticipos_eur.
          ADD bseg-wrbtr TO <resumen>-anticipos.
          ADD bseg-wmwst TO <resumen>-anticipos.
        ELSE.
          SUBTRACT bseg-dmbtr FROM <resumen>-anticipos_eur.
          SUBTRACT bseg-mwsts FROM <resumen>-anticipos_eur.
          SUBTRACT bseg-wrbtr FROM <resumen>-anticipos.
          SUBTRACT bseg-wmwst FROM <resumen>-anticipos.
        ENDIF.
      ENDSELECT.

      l_total_sin_anticipos = <resumen>-total - <resumen>-anticipos.
      l_total_sin_anticipos_eur = <resumen>-total_eur - <resumen>-anticipos_eur.

      SELECT SINGLE * FROM bseg
       WHERE bukrs = bkpf-bukrs
         AND belnr = bkpf-belnr
         AND gjahr = bkpf-gjahr
         AND koart = 'D'
         AND umskz = ''.
      IF NOT bseg-augbl IS INITIAL.
        <resumen>-bukrs       = bkpf-bukrs.
        <resumen>-belnr_cobro = bseg-augbl.
        <resumen>-gjahr_cobro = bseg-augdt(4).
        SELECT SINGLE * FROM *bkpf
         WHERE bukrs = bkpf-bukrs
           AND belnr = bseg-augbl
           AND gjahr = bseg-augdt(4).
        IF sy-subrc = 0.
          <resumen>-blart_cobro = *bkpf-blart.
          <resumen>-budat_cobro = *bkpf-budat.
          CLEAR l_total_cobro.
          IF <resumen>-blart_cobro = 'DC'.
            PERFORM get_utilizacion_pago USING <resumen>-bukrs <resumen>-belnr_cobro <resumen>-gjahr_cobro ''
                                               '' l_total_sin_anticipos
                                      CHANGING l_total_cobro <resumen>-budat_cobro.
            PERFORM get_utilizacion_pago USING <resumen>-bukrs <resumen>-belnr_cobro <resumen>-gjahr_cobro 'EUR'
                                               '' l_total_sin_anticipos_eur
                                      CHANGING l_total_cobro_eur <resumen>-budat_cobro.
          ELSE.
            DATA i_bseg_comp TYPE TABLE OF bseg WITH HEADER LINE.
            SELECT * FROM *bseg
              INTO TABLE i_bseg_comp
             WHERE bukrs = bkpf-bukrs
               AND belnr = bseg-augbl
               AND gjahr = bseg-augdt(4).

            LOOP AT i_bseg_comp WHERE koart = 'S' AND hkont(4) = '0572'.
              IF i_bseg_comp-shkzg = 'S'.
                ADD i_bseg_comp-dmbtr TO l_total_cobro_eur.
                ADD i_bseg_comp-wrbtr TO l_total_cobro.
              ELSE.
                SUBTRACT i_bseg_comp-dmbtr FROM l_total_cobro_eur.
                SUBTRACT i_bseg_comp-wrbtr FROM l_total_cobro.
              ENDIF.
            ENDLOOP.
            LOOP AT i_bseg_comp WHERE koart = 'D' AND umskz = '' AND bschl = '06'.
              PERFORM get_utilizacion_pago USING <resumen>-bukrs i_bseg_comp-augbl i_bseg_comp-augdt(4) ''
                                                 bseg-augbl l_total_sin_anticipos
                                        CHANGING l_total_cobro2 <resumen>-budat_cobro.
              l_total_cobro = l_total_cobro + l_total_cobro2.
              PERFORM get_utilizacion_pago USING <resumen>-bukrs i_bseg_comp-augbl i_bseg_comp-augdt(4) 'EUR'
                                                 bseg-augbl l_total_sin_anticipos_eur
                                        CHANGING l_total_cobro2_eur <resumen>-budat_cobro.
              l_total_cobro_eur = l_total_cobro_eur + l_total_cobro2_eur.
            ENDLOOP.
          ENDIF.
          IF l_total_cobro > l_total_sin_anticipos.
            <resumen>-cobrado = l_total_sin_anticipos.
          ELSE.
            <resumen>-cobrado = l_total_cobro.
          ENDIF.
          IF l_total_cobro_eur > l_total_sin_anticipos_eur.
            <resumen>-cobrado_eur = l_total_sin_anticipos_eur.
          ELSE.
            <resumen>-cobrado_eur = l_total_cobro_eur.
          ENDIF.
        ENDIF.
      ELSE.
        IF <resumen>-anticipos > 0.
          SELECT SINGLE * FROM vbrp
            WHERE vbeln = <resumen>-vbeln.
          IF sy-subrc = 0.
            SELECT MAX( budat ) FROM bsid
              INTO <resumen>-budat_cobro
             WHERE kunnr = <resumen>-kunag
               AND vbel2 = vbrp-aubel.
            IF sy-subrc NE 0.
              SELECT MAX( budat ) FROM bsad
                INTO <resumen>-budat_cobro
               WHERE kunnr = <resumen>-kunag
                 AND vbel2 = vbrp-aubel.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

      <resumen>-porcentaje_cobro = 100 * ( <resumen>-cobrado + <resumen>-anticipos ) / <resumen>-total.
    ENDIF.

    <resumen>-pte_cobro = <resumen>-total - <resumen>-anticipos - <resumen>-cobrado.

    IF p_resum = 'X'.
      <resumen>-zprc = zcl_ap_factura_sd=>get_valor_condicion_char( vbeln = <resumen>-vbeln
                                                            campo = 'KWERT'
                                                             kschl = 'ZPRC' ).
      <resumen>-zr01 = zcl_ap_factura_sd=>get_valor_condicion_char( vbeln = <resumen>-vbeln
                                                            campo = 'KWERT'
                                                             kschl = 'ZR01' ).

    ENDIF.


*    <resumen>-anticipos = zcl_factura_sd=>get_valor_condicion( vbeln = <resumen>-vbeln
*                                                               kschl = 'AZWB' ).

*    READ TABLE i_fact WITH KEY vbeln = <resumen>-vbeln.
*    IF sy-subrc = 0.
*      <resumen>-mwskz = zcl_factura_sd=>get_valor_condicion_char( vbeln = <resumen>-vbeln
*                                                             posnr = i_fact-posnr
*                                                             campo = 'MWSK1'
*                                                             kschl = 'ZMW1' ).
*      IF NOT <resumen>-mwskz IS INITIAL AND <resumen>-anticipos NE 0.
*        l_iva_anticipos = zcl_doc_fi=>get_importe_iva( bukrs = bkpf-bukrs
*                                               mwskz = <resumen>-mwskz
*                                               waers = <resumen>-waerk
*                                               wrbtr = <resumen>-anticipos ).
*        <resumen>-anticipos = <resumen>-anticipos - l_iva_anticipos.
*      ENDIF.
*    ENDIF.
  ENDLOOP.

  IF p_noanul = 'X'.
    LOOP AT i_resumen ASSIGNING <resumen> WHERE blart_cobro = 'NL'.
      DELETE i_fact WHERE vbeln = <resumen>-vbeln.
      DELETE i_resumen.
    ENDLOOP.
  ENDIF.

  IF p_detal = 'X' OR p_posic = 'X'.
    " Inicio BG 25.01.2024 GAPSD050 clase de condición "Comisión Royalties"
    SELECT knumv, kposn, kschl, kbetr, waers, kwert
     FROM konv
     INTO TABLE @DATA(itab_konv)
      FOR ALL ENTRIES IN @i_fact
      WHERE knumv = @i_fact-knumv
        AND kposn = @i_fact-posnr
        AND kschl IN ('ZCR1', 'ZPRC', 'ZR01').
    " Fin BG 25.01.2024 GAPSD050 clase de condición "Comisión Royalties"

    SORT i_fact.
    LOOP AT i_fact.
      AT NEW vbeln.
        IF p_detal = 'X'.
          zcl_ap_sgpi=>text( texto = 'Recuperando lotes factura' texto2 = i_fact-vbeln ).
        ENDIF.
        READ TABLE i_resumen INTO l_resumen WITH KEY vbeln = i_fact-vbeln.
      ENDAT.

      CLEAR l_listado.
      MOVE-CORRESPONDING i_fact TO l_listado.
*          listado-potencia = zcl_mat_slk=>get_potencia( i_fact-matnr ).

      IF l_listado-vgtyp = 'J'.
        SELECT SINGLE erdat wadat_ist FROM likp
          INTO (l_listado-fcreaent, l_listado-wadat_ist)
         WHERE vbeln = l_listado-vgbel.
        IF sy-subrc = 0.
          SELECT SINGLE vgbel vgpos FROM lips
            INTO (l_listado-vbeln_va, l_listado-posnr_va)
           WHERE vbeln = i_fact-vgbel
             AND posnr = i_fact-vgpos.
        ENDIF.
      ELSEIF l_listado-vgtyp = 'C'.
        l_listado-vbeln_va = l_listado-vgbel.
        l_listado-posnr_va = l_listado-vgpos.
        CLEAR: l_listado-vgbel, l_listado-vgpos.
      ELSE.
        l_listado-vbeln_va = l_listado-aubel.
        l_listado-posnr_va = l_listado-aupos.
      ENDIF.

      IF NOT l_listado-vbeln_va IS INITIAL.
        SELECT SINGLE erdat bstnk FROM vbak
          INTO (l_listado-erdat, l_listado-bstnk)
         WHERE vbeln = l_listado-vbeln_va.
      ENDIF.

      IF p_detal = 'X'.
        i_lotes =  zcl_entregas_siliken=>get_lotes_entrega( vbeln = i_fact-vgbel posnr = i_fact-vgpos ).

        LOOP AT i_lotes INTO l_lote.
          MOVE-CORRESPONDING l_lote TO l_listado.

          zest_lotes = zcl_clas_lote=>get_est_mat_lote( matnr = l_listado-matnr
                                                        charg = l_listado-charg
                                                        cache = 'X' ).
*          SELECT SINGLE lfimg FROM lips INTO cantidad_lote
*                  WHERE vbeln = l_listado-vgbel
*                    AND matnr = l_listado-matnr
*                    AND charg = l_listado-charg.
          SELECT SUM( lfimg )
            INTO cantidad_lote
            FROM lips
            WHERE vbeln = l_listado-vgbel AND
                  ( posnr = l_listado-vgpos OR uecha = l_listado-vgpos ) AND
                  matnr = l_listado-matnr AND
                  charg = l_listado-charg.

          MOVE-CORRESPONDING zest_lotes TO l_listado.
          MOVE-CORRESPONDING l_resumen TO l_listado.

          IF l_resumen-fkimg NE 0 AND i_fact-fkimg NE 0 AND cantidad_lote NE 0.
            IF i_fact-fkimg < 0 OR cantidad_lote < 0.
              DATA(lw_negatiu) = 'X'.
            ELSE.
              lw_negatiu = ' '.
            ENDIF.
            i_fact-fkimg = abs( i_fact-fkimg ). "CMS
            cantidad_lote = abs( cantidad_lote ).
            l_listado-netwr = i_fact-netwr * ( cantidad_lote / i_fact-fkimg ).
            l_listado-mwsbp = i_fact-mwsbp * ( cantidad_lote / i_fact-fkimg ).
            l_listado-kzwi5 = i_fact-kzwi5 * ( cantidad_lote / i_fact-fkimg ).
            l_listado-total = i_fact-total * ( cantidad_lote / i_fact-fkimg ).
            l_listado-total_eur = i_fact-total_eur * ( cantidad_lote / i_fact-fkimg ).

            IF lw_negatiu = 'X'.
              i_fact-fkimg = ( i_fact-fkimg ) * -1. "CMS
              cantidad_lote = ( cantidad_lote ) * -1.

            ENDIF.
          ENDIF.
          l_listado-fkimg = i_fact-fkimg.

          l_listado-cantidad_lote = cantidad_lote.

          l_listado-cobrado = l_listado-total * l_resumen-porcentaje_cobro / 100.
          l_listado-cobrado_eur = l_listado-total_eur * l_resumen-porcentaje_cobro / 100.
          l_listado-budat_cobro = l_resumen-budat_cobro.

          APPEND l_listado TO i_listado.
        ENDLOOP.



        IF sy-subrc NE 0.

          MOVE-CORRESPONDING l_resumen TO l_listado.
          MOVE-CORRESPONDING i_fact TO l_listado.

          l_listado-cobrado = l_listado-total * l_resumen-porcentaje_cobro / 100.
          l_listado-cobrado_eur = l_listado-total_eur * l_resumen-porcentaje_cobro / 100.
          l_listado-budat_cobro = l_resumen-budat_cobro.

* INI CMS 08.07.2020 - 60403 - Añadir kg. a facturas sin albaran

          IF i_fact-vgbel IS NOT INITIAL AND i_fact-vgpos IS NOT INITIAL.

            SELECT * FROM lips
              INTO  TABLE @DATA(lt_lotes)
              WHERE vbeln = @i_fact-vgbel
                AND ( posnr = @i_fact-vgpos
                 OR uecha = @i_fact-vgpos ).
            IF sy-subrc <> 0.
              l_listado-charg         = '999ZZ99999'.
              l_listado-cantidad_lote = i_fact-fkimg.
*              l_listado-cantidad_lote = l_resumen-fkimg.
            ENDIF.
          ELSE.
            l_listado-charg         = '999ZZ99999'.
            l_listado-cantidad_lote = i_fact-fkimg.
*            l_listado-cantidad_lote = l_resumen-fkimg.

          ENDIF.

* FIN CMS 08.07.2020

          APPEND l_listado TO i_listado.
        ENDIF.
      ELSEIF p_posic = 'X'.
        MOVE-CORRESPONDING l_resumen TO l_listado.
        MOVE-CORRESPONDING l_listado TO l_posiciones.
        MOVE-CORRESPONDING i_fact TO l_posiciones.
        l_posiciones-cobrado = l_posiciones-total * l_resumen-porcentaje_cobro / 100.
        l_posiciones-cobrado_eur = l_posiciones-total_eur * l_resumen-porcentaje_cobro / 100.
        l_posiciones-budat_cobro = l_resumen-budat_cobro.

        IF NOT l_posiciones-aubel IS INITIAL.
          i_selcar[] = zcl_ped_sd=>get_sel_car( vbeln = l_posiciones-aubel
                                                posnr = l_posiciones-aupos ).

*          LOOP AT i_selcar.
*            CASE i_selcar-charact.
*              WHEN 'TX_CAL_VIS_SAP'.
*                l_posiciones-tx_cal_vis_sap = i_selcar-value_neutral.
*              WHEN 'VAR_CAL_POT_SAP'.
*                l_posiciones-var_cal_pot_sap = i_selcar-value_neutral.
*              WHEN 'ZH_BASTIDOR'.
*                l_posiciones-zh_bastidor = i_selcar-value_neutral.
*              WHEN 'ZH_FT'.
*                l_posiciones-zh_ft = i_selcar-value_neutral.
*              WHEN 'ZH_ESTANDAR'.
*                l_posiciones-zh_estandar = i_selcar-value_neutral.
*              WHEN 'Z_DEVOLUCION'.
*                l_posiciones-z_devolucion = i_selcar-value_neutral.
*              WHEN 'Z_REVALORIZADO'.
*                l_posiciones-z_revalorizado = i_selcar-value_neutral.
*            ENDCASE.
*          ENDLOOP.
        ENDIF.

        " Inicio BG 25.01.2024 GAPSD050 clase de condición "Comisión Royalties"
        CLEAR: l_posiciones-zcr1, l_posiciones-zcr1v. " Add BG 16.04.2024
        READ TABLE itab_konv INTO DATA(ls_konv) WITH KEY knumv = i_fact-knumv
                                                         kposn = i_fact-posnr
                                                         kschl = 'ZCRL'.
        IF sy-subrc EQ 0.
          l_posiciones-zcr1  = ls_konv-kbetr.
          l_posiciones-zcr1v = ls_konv-kwert.
        ENDIF.

        CLEAR ls_konv.
        " Fin BG 25.01.2024 GAPSD050 clase de condición "Comisión Royalties"

        ASSIGN itab_konv[ kschl = 'ZR01' knumv = i_fact-knumv kposn = i_fact-posnr ] TO FIELD-SYMBOL(<konv>).
        IF sy-subrc = 0.
          l_posiciones-zr01 = <konv>-kwert.
        ELSE.
          CLEAR l_posiciones-zr01.
        ENDIF.

        ASSIGN itab_konv[ kschl = 'ZPRC' knumv = i_fact-knumv kposn = i_fact-posnr ] TO <konv>.
        IF sy-subrc = 0.
          l_posiciones-zprc = <konv>-kwert.
        ELSE.
          CLEAR l_posiciones-zprc.
        ENDIF.

        APPEND l_posiciones TO i_posiciones.

      ENDIF.
    ENDLOOP.
  ENDIF.

  DELETE i_resumen WHERE NOT pernr IN s_pernr.
  DELETE i_listado WHERE NOT pernr IN s_pernr.
  DELETE i_posiciones WHERE NOT pernr IN s_pernr.

ENDFORM.                    " LEER_DATOS

*&---------------------------------------------------------------------*
*&      Form  get_utilizacion_pago
*&---------------------------------------------------------------------*
FORM get_utilizacion_pago USING pe_bukrs pe_belnr pe_gjahr pe_nodoc ps_totpe pe_waers
                       CHANGING ps_total ps_budat_cobro.
  DATA:    BEGIN OF i_postab OCCURS 0,
             xauth(1)  TYPE c,                 " Berechtigung?
             xhell(1)  TYPE c.                 " Hell anzeigen?
             INCLUDE STRUCTURE rfpos.              " Listanzeigen-Struktur
             INCLUDE rfeposc9.                     " Kunden-Sonderfelder
             DATA:      xbkpf(1)  TYPE c,                 " BKPF nachgelesen?
             xbseg(1)  TYPE c,                 " BSEG nachgelesen?
             xbsec(1)  TYPE c,                 " BSEC nachgelesen?
             xbsed(1)  TYPE c,                 " BSED nachgelesen?
             xpayr(1)  TYPE c,                 " PAYR nachgelesen?
             xbsegc(1) TYPE c,                 " BSEGC nachgelesen?
             xbsbv(1)  TYPE c,                 " BSBV nachgelesen?
             xmod(1)   TYPE c,                 " POSTAB modifiziert?
           END OF i_postab,
           l_mayor_fecha TYPE d.
  DATA i_bkpf TYPE TABLE OF bkpf WITH HEADER LINE.

  CALL FUNCTION 'GET_CLEARED_ITEMS'
    EXPORTING
      i_belnr                = pe_belnr
      i_bukrs                = pe_bukrs
      i_gjahr                = pe_gjahr
      i_bvorg                = ''
*     I_AUGDT                =
*     I_RFZEI                =
*   IMPORTING
*     E_XKDF                 =
*     E_XSKV                 =
    TABLES
      t_items                = i_postab
*     T_ACCNT                =
    EXCEPTIONS
      not_found              = 1
      error_cleared_accounts = 2
      OTHERS                 = 3.

  CLEAR ps_total.
*  LOOP AT i_postab WHERE koart = 'S' AND hkont(4)  = '0572'.
**                     AND vbeln IS INITIAL.
*    ps_total = ps_total + i_postab-dmshb.
*  ENDLOOP.
  LOOP AT i_postab.
    CLEAR i_bkpf.
    MOVE-CORRESPONDING i_postab TO i_bkpf.
    COLLECT i_bkpf.
  ENDLOOP.

  LOOP AT i_bkpf.
    IF i_bkpf-budat > l_mayor_fecha.
      l_mayor_fecha = i_bkpf-budat.
    ENDIF.

    IF pe_nodoc = i_bkpf-belnr.
      CONTINUE.
    ENDIF.

    SELECT * FROM bseg
     WHERE bukrs = i_bkpf-bukrs
       AND belnr = i_bkpf-belnr
       AND gjahr = i_bkpf-gjahr
       AND koart = 'S'
       AND hkont LIKE '0572%'.

      IF i_bkpf-waers = 'EUR'.
        IF bseg-shkzg = 'S'.
          ADD bseg-dmbtr TO ps_total.
        ELSE.
          SUBTRACT bseg-dmbtr FROM ps_total.
        ENDIF.
      ELSE.
        IF bseg-shkzg = 'S'.
          ADD bseg-wrbtr TO ps_total.
        ELSE.
          SUBTRACT bseg-wrbtr FROM ps_total.
        ENDIF.
      ENDIF.
    ENDSELECT.
    IF sy-subrc = 0.
      IF i_bkpf-budat > ps_budat_cobro.
        ps_budat_cobro = i_bkpf-budat.
        l_mayor_fecha = i_bkpf-budat.
      ENDIF.
    ENDIF.
  ENDLOOP.

  ps_total = abs( ps_total ).

* Si se había cobrado todo con anticipos, busco la mayor fecha de estos
* en lugar de la del documento de compensación.
  IF ps_totpe = 0.
    ps_budat_cobro = l_mayor_fecha.
  ENDIF.

ENDFORM.                    "get_utilizacion_pago
