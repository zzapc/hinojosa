*&---------------------------------------------------------------------*
*& Report  ZSSDD099                                                    *
* GAPSD099 - Programa para cargar nuevas ofertas y precios             *
*----------------------------------------------------------------------*
* Autor : Rodolfo Malea.SEIS                                           *
* Date : 05.12.2023                                                    *
*----------------------------------------------------------------------*
REPORT zssd099.

"""""""""""""""""
" Constantes
"""""""""""""""""
CONSTANTS: cg_operation_borrar   TYPE msgfn VALUE '003',
           cg_operation_modif    TYPE msgfn VALUE '004',
           cg_operation_sust     TYPE msgfn VALUE '005',
           cg_operation_original TYPE msgfn VALUE '009',
           cg_operation_espera   TYPE msgfn VALUE '023',
           cg_operation_enviar   TYPE msgfn VALUE '018'.

CONSTANTS: cg_dynpro_main    TYPE sy-dynnr VALUE '0100',
           cg_dynpro_zprc    TYPE sy-dynnr VALUE '0110',
           cg_dynpro_zr01    TYPE sy-dynnr VALUE '0120',
           cg_dynpro_ofertas TYPE sy-dynnr VALUE '0130'.

CONSTANTS: cg_knumh_new TYPE a018-knumh VALUE '$000000001'.

CONSTANTS: cg_boton_escalas         TYPE ui_func VALUE 'ESCALAS'.

CONSTANTS: cg_doc_type_oferta TYPE vbak-auart VALUE 'ZVA'.

"""""""""""""""""
" Tipos de datos
"""""""""""""""""
TYPES: BEGIN OF st_lin_alv.
         INCLUDE TYPE zssdd099_s_alv.
       TYPES END OF st_lin_alv.

TYPES: BEGIN OF st_varkey_929,
         vkorg TYPE vkorg,
         vtweg TYPE vtweg,
         kunnr TYPE kunnr_v,
         matnr TYPE matnr,
         inco1 TYPE inco1,
         kfrst TYPE kfrst,
       END OF st_varkey_929.

TYPES: BEGIN OF st_vardat_929,
         kbstat TYPE kbstat,
       END OF st_vardat_929.

TYPES: BEGIN OF st_varkey_960,
         vkorg     TYPE vkorg,
         werks     TYPE werks_d,
         lgort     TYPE lgort_d,
         kunnr     TYPE kunnr_v,
         matnr     TYPE matnr,
         zzmontaje TYPE zsmontaje,
         kfrst     TYPE kfrst,
       END OF st_varkey_960.

TYPES: BEGIN OF st_vardat_960,
         kbstat TYPE kbstat,
       END OF st_vardat_960.

TYPES: BEGIN OF st_pos_oferta,
         matnr TYPE matnr_d,
         menge TYPE menge_d,
         meins TYPE meins,
         werks TYPE werks_d,
       END OF st_pos_oferta.

TYPES: tt_konm       TYPE STANDARD TABLE OF konm WITH DEFAULT KEY,
       tt_pos_oferta TYPE STANDARD TABLE OF st_pos_oferta WITH DEFAULT KEY.

"""""""""""""""""""""""
" Control pestañas
""""""""""""""""""""""
CONSTANTS: BEGIN OF c_c_ficha,
             tab1 LIKE sy-ucomm VALUE 'ZPRC',
             tab2 LIKE sy-ucomm VALUE 'ZR01',
             tab3 LIKE sy-ucomm VALUE 'OFER',
           END OF c_c_ficha.

CONTROLS:  c_ficha TYPE TABSTRIP.
DATA: BEGIN OF g_c_ficha,
        subscreen   LIKE sy-dynnr,
        prog        LIKE sy-repid VALUE sy-repid,
        pressed_tab LIKE sy-ucomm VALUE c_c_ficha-tab1,
      END OF g_c_ficha.

"""""""""""""""""
" Includes
"""""""""""""""""
INCLUDE zseis_patron_alv.

"""""""""""""""""
" Variables globalres
"""""""""""""""""
DATA: tg_excel         TYPE zssdd099_t_excel.

DATA rg_excel TYPE REF TO zcl_excel.

"""""""""""""""""
" Pantalla de selección
"""""""""""""""""
PARAMETERS: p_file TYPE text255 OBLIGATORY.
*            p_hoja TYPE zexcel_sheet_title OBLIGATORY DEFAULT 'ZPRC_Tabla 929'.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
* Display save dialog window
  DATA: tl_file_table TYPE TABLE OF file_table,
        vl_rc         TYPE i.
  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      file_filter = 'Excel 2007-2016 (*.xlsx)|*.xlsx'
    CHANGING
      file_table  = tl_file_table
      rc          = vl_rc.
  READ TABLE tl_file_table ASSIGNING FIELD-SYMBOL(<fs_file_table>) INDEX 1.
  IF sy-subrc = 0.
    p_file = <fs_file_table>-filename.
  ENDIF.

AT SELECTION-SCREEN ON p_file.
  "
  " Intentamos abrir el fichero para confirmar que nadie lo está usando.
  "

  TRY.
      DATA(rl_excel_reader) = NEW zcl_excel_reader_2007( ).
      rg_excel        = rl_excel_reader->zif_excel_reader~load_file( p_file ).
    CATCH zcx_excel INTO DATA(rl_zcx_excel).

      MESSAGE rl_zcx_excel->get_text( ) TYPE 'E' DISPLAY LIKE 'I'.


  ENDTRY.

  """"""""""""""""""""""
  "Rutinas
  """"""""""""""""""""""

*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_initialization.

  vg_ventana_inicial            = cg_dynpro_main.
  vg_no_justif_cols             = 'X'.
  vg_alv_protegido_por_defecto  = 'X'.

  PERFORM f_config_dynpro USING  cg_dynpro_main ''  'T01' 'STA_0100' ' ' 'X'.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_zprc 'CC_ALV_ZPRC' 'T11' ' '.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_zr01 'CC_ALV_ZR01' 'T12' ' '.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_ofertas 'CC_ALV_OFER' 'T13' ' '.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CREAR_CATALOGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_catalogo TABLES it_catalogo TYPE lvc_t_fcat USING vp_dynnr.

**  wa_layout-info_fname = 'COLOR'.
**  wa_layout-sel_mode = 'A'.


  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZSSDD099_S_ALV'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_catalogo[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  DELETE it_catalogo WHERE fieldname = 'TYPE'.
  DELETE it_catalogo WHERE fieldname = 'DATOS_ESCALAS'.
  CASE vp_dynnr.
    WHEN cg_dynpro_zprc.
      DELETE it_catalogo WHERE fieldname = 'ZZMONTAJE'.
      DELETE it_catalogo WHERE fieldname = 'WERKS'.
      DELETE it_catalogo WHERE fieldname = 'LGORT'.
      DELETE it_catalogo WHERE fieldname = 'KUNWE'.
      DELETE it_catalogo WHERE fieldname = 'KSTBM'.
    WHEN cg_dynpro_zr01.
      DELETE it_catalogo WHERE fieldname = 'VTWEG'.
      DELETE it_catalogo WHERE fieldname = 'INCO1'.
      DELETE it_catalogo WHERE fieldname = 'ESCALAS'.
      DELETE it_catalogo WHERE fieldname = 'KUNWE'.
      DELETE it_catalogo WHERE fieldname = 'KSTBM'.
    WHEN cg_dynpro_ofertas.
      DELETE it_catalogo WHERE fieldname = 'KSCHL'.
*      DELETE it_catalogo WHERE fieldname = 'KUNNR'.
      DELETE it_catalogo WHERE fieldname = 'INCO1'.
*      DELETE it_catalogo WHERE fieldname = 'WERKS'.
*      DELETE it_catalogo WHERE fieldname = 'LGORT'.
      DELETE it_catalogo WHERE fieldname = 'ZZMONTAJE'.

      DELETE it_catalogo WHERE fieldname = 'KBETR'.
      DELETE it_catalogo WHERE fieldname = 'KONWA'.
      DELETE it_catalogo WHERE fieldname = 'KPEIN'.
*      DELETE it_catalogo WHERE fieldname = 'DATAB'.
*      DELETE it_catalogo WHERE fieldname = 'DATBI'.
      DELETE it_catalogo WHERE fieldname = 'ESCALAS'.
  ENDCASE.

  LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>).
    CASE <fs_catalogo>-fieldname.
      WHEN 'ZZMONTAJE'.
        <fs_catalogo>-checkbox  = 'X'.
        <fs_catalogo>-outputlen = 10.
      WHEN 'ESCALAS'.
        <fs_catalogo>-checkbox  = 'X'.
        <fs_catalogo>-outputlen = 9.
      WHEN 'SEMAFORO'.
        <fs_catalogo>-icon      = 'X'.
        <fs_catalogo>-outputlen = 6.
        <fs_catalogo>-col_pos   = 0.
      WHEN 'MSG_LOG'.
        <fs_catalogo>-outputlen = 80.
      WHEN 'PROCESADO'.
        DELETE it_catalogo. CONTINUE.
      WHEN 'KSTBM'.
        IF vp_dynnr = cg_dynpro_ofertas.
          <fs_catalogo>-col_pos   = 9.
          <fs_catalogo>-scrtext_s = <fs_catalogo>-scrtext_m = <fs_catalogo>-scrtext_l = 'Cantidad'(002).
          <fs_catalogo>-coltext = 'Cantidad'(002).
        ENDIF.
    ENDCASE.
  ENDLOOP.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_PRE_LLENAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_pre_llenar_datos.
  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      text = 'Obteniendo datos del fichero excel ...'.
  CLEAR tg_excel.
  DATA(tl_fieldcatalog) = zcl_excel_common=>get_fieldcatalog( tg_excel ).
  TRY.
*      DATA(rl_excel_reader) = NEW zcl_excel_reader_2007( ).
*      DATA(rl_excel)        = rl_excel_reader->zif_excel_reader~load_file( p_file ).
      DATA(rl_worksheet)    = rg_excel->get_worksheet_by_index( 2 ). "_by_name( p_hoja ).
      IF rl_worksheet IS NOT BOUND.
        MESSAGE 'No se ha encontrado el nombre de la hoja Excel indicado' TYPE 'E'.
      ENDIF.


      DATA: vl_row    TYPE int4 VALUE 6,
            vl_column TYPE int4 VALUE 1,
            vl_value  TYPE zexcel_cell_value.

      DATA: vl_last_row TYPE int4,
            vl_last_col TYPE int4.

      vl_last_row = rl_worksheet->get_highest_row( ).
      vl_last_col = rl_worksheet->get_highest_column( ).

      WHILE vl_row <= vl_last_row.
        ADD 1 TO vl_row.
        rl_worksheet->get_cell( EXPORTING ip_column = 1
                                  ip_row    = vl_row
                       IMPORTING ep_value = vl_value ).
        CHECK vl_value IS NOT INITIAL.
        APPEND INITIAL LINE TO tg_excel ASSIGNING FIELD-SYMBOL(<fs_excel>).
        WHILE vl_column <= vl_last_col.

          rl_worksheet->get_cell( EXPORTING ip_column = vl_column
                                            ip_row    = vl_row
                                 IMPORTING ep_value = vl_value ).
          READ TABLE tl_fieldcatalog ASSIGNING FIELD-SYMBOL(<fs_fieldcatalog>) INDEX vl_column.
          IF sy-subrc = 0.
            ASSIGN COMPONENT <fs_fieldcatalog>-fieldname OF STRUCTURE <fs_excel> TO FIELD-SYMBOL(<fs_campo>).
          ENDIF.
          IF sy-subrc = 0.
            CASE <fs_fieldcatalog>-abap_type.
              WHEN 'D'.
                TRY.
                    <fs_campo> = zcl_excel_common=>excel_string_to_date( vl_value ).
                    CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
                      EXPORTING
                        date                      = <fs_campo>
                      EXCEPTIONS
                        plausibility_check_failed = 1
                        OTHERS                    = 2.
                    IF sy-subrc <> 0.
                      CONCATENATE vl_value+4(4) vl_value+2(2) vl_value(2) INTO <fs_campo>.
                    ENDIF.

                  CATCH zcx_excel INTO DATA(rl_zcx_excel_date).
                    " En excel no estará como fecha. Convierto a mano.
                    CONCATENATE vl_value+4(4) vl_value+2(2) vl_value(2) INTO <fs_campo>.
                ENDTRY.
**                CONCATENATE vl_value+4(4) vl_value+2(2) vl_value(2) INTO <fs_campo>.
              WHEN 'P'.
                <fs_campo> = zcl_excel_common=>excel_string_to_number( vl_value ).
              WHEN OTHERS.
                <fs_campo> = vl_value.
            ENDCASE.
          ENDIF.

          ADD 1 TO vl_column.
        ENDWHILE.
        vl_column = 1.

      ENDWHILE.
    CATCH zcx_excel INTO DATA(rl_zcx_excel).

      MESSAGE rl_zcx_excel->get_text( ) TYPE 'I' DISPLAY LIKE 'E'.


  ENDTRY.
ENDFORM.
FORM f_buscar_oferta CHANGING wl_datos_zprc TYPE zssdd099_s_alv.
  DATA vl_hay_oferta TYPE xflag.

  CLEAR vl_hay_oferta.

  SELECT *
    FROM vbak
    INNER JOIN vbpa ON ( vbpa~vbeln = vbak~vbeln AND vbpa~posnr = '000000' AND vbpa~parvw = 'WE' )
    INTO TABLE @DATA(tl_vbak_val)
    WHERE vbak~auart = @cg_doc_type_oferta AND
          vbak~vkorg = @wl_datos_zprc-vkorg AND
          vbak~vtweg = @wl_datos_zprc-vtweg AND
          vbak~angdt = @wl_datos_zprc-datab AND
          vbak~bnddt = @wl_datos_zprc-datbi AND
          vbak~kunnr = @wl_datos_zprc-kunnr.
  LOOP AT tl_vbak_val ASSIGNING FIELD-SYMBOL(<fs_vbak_val>).
    SELECT SINGLE *
      FROM vbap
      INTO @DATA(wl_vbap_val)
      WHERE vbeln = @<fs_vbak_val>-vbak-vbeln AND
            matnr = @wl_datos_zprc-matnr AND
            werks = @wl_datos_zprc-werks.
    IF sy-subrc = 0.
      vl_hay_oferta = 'X'.
      wl_datos_zprc-vbeln = wl_vbap_val-vbeln.
      wl_datos_zprc-posnr = wl_vbap_val-posnr.
    ENDIF.
  ENDLOOP.
  IF vl_hay_oferta IS INITIAL.
    wl_datos_zprc-type = 'E'.
    wl_datos_zprc-msg_log = 'No se ha encontrado una oferta con estos datos'.
    wl_datos_zprc-semaforo = icon_led_red.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_LLENAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos TABLES tp_alv TYPE tt_lin_alv_patron USING vp_dynpro.
  "
  " Hago los cálculos cuando se solicite la pantalla principal y controlo el orden de la carga.
  "
  IF vp_dynpro = cg_dynpro_main.

    "
    " Primero Precio tarifa carton.
    "
    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        text = 'Procesando datos Precios tarifa carton ZPRC ...'.
    READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = cg_dynpro_zprc.
    IF sy-subrc = 0.
      PERFORM f_llenar_datos_custom TABLES <fs_config_subscreen>-tabla USING <fs_config_subscreen>-subscreen.
    ENDIF.


    "
    " Continuamos con ofertas.
    "
    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        text = 'Procesando datos de ofertas ...'.

    READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_ofertas.
    IF sy-subrc = 0.
      PERFORM f_llenar_datos_custom TABLES <fs_config_subscreen>-tabla USING <fs_config_subscreen>-subscreen.
    ENDIF.

    "
    " Vemos si hay algun precio que no tiene oferta creada.
    "
    READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_zprc.
    IF sy-subrc = 0.
      LOOP AT <fs_config_subscreen>-tabla ASSIGNING FIELD-SYMBOL(<fs_datos_zprc>) WHERE type <> 'E'.
        "
        " Validar que existe una oferta para el material.
        "
        DATA wl_datos TYPE zssdd099_s_alv.
        MOVE-CORRESPONDING <fs_datos_zprc> TO wl_datos.
        PERFORM f_buscar_oferta CHANGING wl_datos.
        MOVE-CORRESPONDING wl_datos TO <fs_datos_zprc>.
***        DATA vl_hay_oferta TYPE xflag.
***
***        CLEAR vl_hay_oferta.
***
***        SELECT *
***          FROM vbak
***          INNER JOIN vbpa ON ( vbpa~vbeln = vbak~vbeln AND vbpa~posnr = '000000' AND vbpa~parvw = 'WE' )
***          INTO TABLE @DATA(tl_vbak_val)
***          WHERE vbak~auart = @cg_doc_type_oferta AND
***                vbak~vkorg = @<fs_datos_zprc>-vkorg AND
***                vbak~vtweg = @<fs_datos_zprc>-vtweg AND
***                vbak~angdt = @<fs_datos_zprc>-datab AND
***                vbak~bnddt = @<fs_datos_zprc>-datbi AND
***                vbak~kunnr = @<fs_datos_zprc>-kunnr.
***        LOOP AT tl_vbak_val ASSIGNING FIELD-SYMBOL(<fs_vbak_val>).
***          SELECT SINGLE *
***            FROM vbap
***            INTO @DATA(wl_vbap_val)
***            WHERE vbeln = @<fs_vbak_val>-vbak-vbeln AND
***                  matnr = @<fs_datos_zprc>-matnr AND
***                  werks = @<fs_datos_zprc>-werks.
***          IF sy-subrc = 0.
***            vl_hay_oferta = 'X'.
***            <fs_datos_zprc>-vbeln = wl_vbap_val-vbeln.
***            <fs_datos_zprc>-posnr = wl_vbap_val-posnr.
***          ENDIF.
***        ENDLOOP.
***        IF vl_hay_oferta IS INITIAL.
***          <fs_datos_zprc>-type = 'E'.
***          <fs_datos_zprc>-msg_log = 'No se ha encontrado una oferta con estos datos'.
***          <fs_datos_zprc>-semaforo = icon_led_red.
***        ENDIF.
      ENDLOOP.
    ENDIF.



    "
    " Terminamos con Precio montaje.
    "
    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        text = 'Procesando datos Precios montaje ZR01 ...'.
    READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_zr01.
    IF sy-subrc = 0.
      PERFORM f_llenar_datos_custom TABLES <fs_config_subscreen>-tabla USING <fs_config_subscreen>-subscreen.
    ENDIF.

  ENDIF.
ENDFORM.
FORM f_llenar_datos_custom TABLES tp_alv TYPE tt_lin_alv_patron USING vp_dynpro.
*  FIELD-SYMBOLS: <fs_alv> TYPE zssdd099_s_alv.
  DATA: tl_datos_zprc    TYPE TABLE OF zssdd099_s_alv,
        tl_datos_zr01    TYPE TABLE OF zssdd099_s_alv,
        tl_datos_ofertas TYPE TABLE OF zssdd099_s_alv.

  DATA: wl_konp       TYPE konp,
        wl_konm       TYPE konm,
        wl_konh       TYPE konh,
        tl_konm       TYPE TABLE OF konm,
        wl_varkey_929 TYPE st_varkey_929,
        wl_vardat_929 TYPE st_vardat_929,
        wl_varkey_960 TYPE st_varkey_960,
        wl_vardat_960 TYPE st_vardat_960.

  DATA: vl_message TYPE zssdd099_s_alv-msg_log,
        vl_type    TYPE bapi_mtype.
  DATA: vl_crear_condicion TYPE xflag,
        vl_add_matnr       TYPE xflag.
  DATA: tl_datos_escalas TYPE TABLE OF zssdd099_s_escalas.




  CASE vp_dynpro.
    WHEN cg_dynpro_zprc. " ZPRC. Precio tarifa cartón.
      CLEAR tl_datos_zprc.

      LOOP AT tg_excel ASSIGNING FIELD-SYMBOL(<fs_excel>).
***        CHECK <fs_excel>-centro IS INITIAL.

        APPEND INITIAL LINE TO tl_datos_zprc ASSIGNING FIELD-SYMBOL(<fs_datos_zprc>).
        <fs_datos_zprc>-kschl = |{ <fs_excel>-clase_cond  ALPHA = IN }|.
        <fs_datos_zprc>-vkorg = |{ <fs_excel>-org_ventas  ALPHA = IN }|.
        <fs_datos_zprc>-vtweg = |{ <fs_excel>-canal_dist  ALPHA = IN }|.
        <fs_datos_zprc>-kunnr = |{ <fs_excel>-cliente  ALPHA = IN }|.
        <fs_datos_zprc>-matnr = |{ <fs_excel>-material  ALPHA = IN }|.
        <fs_datos_zprc>-werks = |{ <fs_excel>-centro  ALPHA = IN }|.
        <fs_datos_zprc>-inco1 = <fs_excel>-incoterm.
        <fs_datos_zprc>-kbetr = <fs_excel>-importe.
        <fs_datos_zprc>-konwa = <fs_excel>-moneda.
        <fs_datos_zprc>-kpein = <fs_excel>-cantidad_base.
        <fs_datos_zprc>-kstbm = <fs_excel>-cantidad_pedido.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            input          = <fs_excel>-umb
*           LANGUAGE       = SY-LANGU
          IMPORTING
            output         = <fs_datos_zprc>-kmein
          EXCEPTIONS
            unit_not_found = 1
            OTHERS         = 2.
        IF sy-subrc <> 0.
          CLEAR <fs_datos_zprc>-kmein.
        ENDIF.

        <fs_datos_zprc>-datab = <fs_excel>-fecha_inicio.
        <fs_datos_zprc>-datbi = <fs_excel>-fecha_fin.

        CLEAR <fs_datos_zprc>-msg_log.
        CLEAR <fs_datos_zprc>-semaforo.
        CLEAR <fs_datos_zprc>-type.

        PERFORM f_validar_datos_zprc CHANGING <fs_datos_zprc>.

      ENDLOOP.

      SORT tl_datos_zprc BY kschl vkorg vtweg kunnr matnr inco1.
      DATA vl_num_registros TYPE i.
      "
      " Empezamos a crear las condiciones.
      "
      LOOP AT tl_datos_zprc ASSIGNING <fs_datos_zprc>.
        AT NEW inco1.
          vl_crear_condicion = 'X'.

          CLEAR tl_datos_escalas.
          CLEAR vl_num_registros.

        ENDAT.

        IF <fs_datos_zprc>-type IS NOT INITIAL.
          CLEAR vl_crear_condicion.
        ENDIF.

        " Guardamos escalas.
        APPEND INITIAL LINE TO tl_datos_escalas ASSIGNING FIELD-SYMBOL(<fs_escala>).
        MOVE-CORRESPONDING <fs_datos_zprc> TO <fs_escala>.
        ADD 1 TO vl_num_registros.

        AT END OF inco1.
          " Validar que no existe la tarifa indicada.
          IF <fs_datos_zprc>-type <> 'E'.
            DATA(vl_lineas_escalas) = lines( tl_datos_escalas ).
            IF vl_lineas_escalas > 0.
              " Hay que poner el precio de la escala con cantidad cero.
              READ TABLE tl_datos_escalas ASSIGNING FIELD-SYMBOL(<fs_escala_cero>) WITH KEY kstbm = 0.
              IF sy-subrc = 0.
                <fs_datos_zprc>-kbetr = <fs_escala_cero>-kbetr.
              ENDIF.
            ENDIF.

            SELECT SINGLE *
              FROM a929
              INTO @DATA(wl_a929)
              WHERE kappl = 'V' AND
                    kschl = @<fs_datos_zprc>-kschl AND
                    vkorg = @<fs_datos_zprc>-vkorg AND
                    vtweg = @<fs_datos_zprc>-vtweg AND
                    kunnr = @<fs_datos_zprc>-kunnr AND
                    matnr = @<fs_datos_zprc>-matnr AND
                    inco1 = @<fs_datos_zprc>-inco1 AND
                    kfrst = '' AND
                    datab = @<fs_datos_zprc>-datab AND
                    datbi = @<fs_datos_zprc>-datbi.
            IF sy-subrc = 0.
              SELECT SINGLE *
                FROM konp
                INTO @DATA(wl_konp_a929)
                WHERE knumh = @wl_a929-knumh AND
                      kbetr = @<fs_datos_zprc>-kbetr AND
                      konwa = @<fs_datos_zprc>-konwa AND
                      kpein = @<fs_datos_zprc>-kpein AND
                      kmein = @<fs_datos_zprc>-kmein.
            ENDIF.
            IF sy-subrc = 0.
              DATA vl_dif_escalas TYPE xflag.

              CLEAR vl_dif_escalas.

              SELECT *
                FROM konm
                INTO TABLE @DATA(tl_konm_929)
                WHERE knumh = @wl_a929-knumh.
              IF vl_num_registros > 1. "Hay escalado
                LOOP AT tl_datos_escalas ASSIGNING FIELD-SYMBOL(<fs_datos_escala>).
                  READ TABLE tl_konm_929 ASSIGNING FIELD-SYMBOL(<fs_konm_929>) WITH KEY kstbm = <fs_datos_escala>-kstbm kbetr = <fs_datos_escala>-kbetr.
                  IF sy-subrc <> 0.
                    vl_dif_escalas = 'X'.
                  ENDIF.
                ENDLOOP.
              ENDIF.

              LOOP AT tl_konm_929 ASSIGNING <fs_konm_929>.
                READ TABLE tl_datos_escalas ASSIGNING <fs_datos_escala> WITH KEY kstbm = <fs_konm_929>-kstbm kbetr = <fs_konm_929>-kbetr.
                IF sy-subrc <> 0.
                  vl_dif_escalas = 'X'.
                ENDIF.
              ENDLOOP.

              IF vl_dif_escalas IS INITIAL.
                <fs_datos_zprc>-msg_log = 'La tarifa ya existe y no ha sido modificada'.
                <fs_datos_zprc>-type = 'I'.
                CLEAR vl_crear_condicion.
              ENDIF.
            ENDIF.
***            LOOP AT tl_a929 ASSIGNING FIELD-SYMBOL(<fs_a929>).
***              IF ( ( <fs_a929>-datbi BETWEEN <fs_datos_zprc>-datab AND <fs_datos_zprc>-datbi ) OR
***                ( <fs_a929>-datab BETWEEN <fs_datos_zprc>-datab AND <fs_datos_zprc>-datbi ) OR
***                ( <fs_datos_zprc>-datbi BETWEEN <fs_a929>-datab AND <fs_a929>-datbi ) OR
***                ( <fs_datos_zprc>-datab BETWEEN <fs_a929>-datab AND <fs_a929>-datbi )  ).
***                <fs_datos_zprc>-msg_log = 'La tarifa ya existe y no ha sido modificada'.
***                <fs_datos_zprc>-error = 'X'.
***                CLEAR vl_crear_condicion.
***                EXIT.
***              ENDIF.
***            ENDLOOP.
          ENDIF.

          IF vl_crear_condicion IS NOT INITIAL.
            DATA vl_operacion TYPE msgfn.
            "
            " Buscamos las condiciones a dar de 'baja'.
            "
            SELECT *
            FROM a929
            INTO TABLE @DATA(tl_a929_borrar)
            WHERE knumh <> @wl_a929-knumh AND
                  kappl = 'V' AND
                  kschl = @<fs_datos_zprc>-kschl AND
                  vkorg = @<fs_datos_zprc>-vkorg AND
                  vtweg = @<fs_datos_zprc>-vtweg AND
                  kunnr = @<fs_datos_zprc>-kunnr AND
                  matnr = @<fs_datos_zprc>-matnr AND
                  inco1 = @<fs_datos_zprc>-inco1 AND
                  kfrst = '' AND
                  ( datbi BETWEEN @<fs_datos_zprc>-datab  AND  @<fs_datos_zprc>-datbi OR
                    datab BETWEEN @<fs_datos_zprc>-datab  AND  @<fs_datos_zprc>-datbi ) .

            LOOP AT tl_a929_borrar ASSIGNING FIELD-SYMBOL(<fs_a929_borrar>).
              vl_operacion = cg_operation_borrar.
              IF <fs_a929_borrar>-datab < <fs_datos_zprc>-datab AND
                 <fs_datos_zprc>-datab <= <fs_a929_borrar>-datbi AND <fs_datos_zprc>-datbi >= <fs_a929_borrar>-datbi.
                "Fecha inicial anterior a la nueva definición y fecha final dentro de la nueva definición.
                " hay que modificar. Fecha final es nueva fecha inicial - 1.
                <fs_a929_borrar>-datbi = <fs_datos_zprc>-datab - 1.
                vl_operacion = cg_operation_modif.
              ENDIF.
***              IF <fs_datos_zprc>-datab <= <fs_a929_borrar>-datbi AND <fs_datos_zprc>-datbi >= <fs_a929_borrar>-datbi.
***                <fs_a929_borrar>-datbi = <fs_datos_zprc>-datab - 1.
***              ENDIF.
***              IF <fs_datos_zprc>-datab <= <fs_a929_borrar>-datab AND <fs_datos_zprc>-datbi >= <fs_a929_borrar>-datab.
***                <fs_a929_borrar>-datab = <fs_datos_zprc>-datab - 1.
***              ENDIF.
              "
              " Actualizamos.
              "
              SELECT SINGLE *
                FROM konh
                INTO CORRESPONDING FIELDS OF wl_konh
                WHERE knumh = <fs_a929_borrar>-knumh.

              wl_konh-datbi = <fs_a929_borrar>-datbi.
              wl_konh-datab = <fs_a929_borrar>-datab.

              SELECT SINGLE *
                FROM konp
                INTO CORRESPONDING FIELDS OF wl_konp
                WHERE knumh = <fs_a929_borrar>-knumh.

              SELECT *
                FROM konm
                INTO CORRESPONDING FIELDS OF TABLE tl_konm
                WHERE knumh = <fs_a929_borrar>-knumh.

              PERFORM f_actualizar_precio USING cg_operation_borrar wl_konh wl_konp tl_konm space
                                  CHANGING vl_type vl_message.
            ENDLOOP.

            CLEAR: wl_konh, wl_konp, tl_konm, wl_varkey_929, wl_vardat_929.

            wl_vardat_929-kbstat = ''.

            wl_varkey_929-vkorg = <fs_datos_zprc>-vkorg.
            wl_varkey_929-vtweg = <fs_datos_zprc>-vtweg.
            wl_varkey_929-kunnr = <fs_datos_zprc>-kunnr.
            wl_varkey_929-matnr = <fs_datos_zprc>-matnr.
            wl_varkey_929-inco1 = <fs_datos_zprc>-inco1.
            CLEAR wl_varkey_929-kfrst.

            wl_konh-kvewe  = 'A'.
            wl_konh-kotabnr = '929'.
            wl_konh-kappl = 'V'.
            wl_konh-kschl = <fs_datos_zprc>-kschl.
            wl_konh-vakey = wl_varkey_929.
            wl_konh-datab = <fs_datos_zprc>-datab.
            wl_konh-datbi = <fs_datos_zprc>-datbi.
            "<fs_bapicondct>-AGREE_COND =
            CLEAR wl_konh-knumh.
            wl_konh-vadat = wl_vardat_929.
            wl_konh-ernam   = sy-uname.
            wl_konh-erdat   = sy-datum.

            wl_konp-kappl = wl_konh-kappl.
            wl_konp-kschl = wl_konh-kschl.
            wl_konp-kopos = 1.
            wl_konp-kbetr = <fs_datos_zprc>-kbetr.
            wl_konp-konwa = <fs_datos_zprc>-konwa.
            wl_konp-kpein = <fs_datos_zprc>-kpein.
            wl_konp-kmein = <fs_datos_zprc>-kmein.
            wl_konp-krech = 'C'.
            wl_konp-kwaeh = wl_konp-konwa.

            CLEAR: vl_message, vl_type.

            IF vl_num_registros > 1. "Hay escalado
              LOOP AT tl_datos_escalas ASSIGNING <fs_datos_escala>.
                APPEND INITIAL LINE TO tl_konm ASSIGNING FIELD-SYMBOL(<fs_konm>).
                <fs_konm>-kstbm = <fs_datos_escala>-kstbm.
                <fs_konm>-kbetr = <fs_datos_escala>-kbetr.
              ENDLOOP.


              wl_konp-kzbzg = 'C'.

            ENDIF.
            wl_konp-stfkz = 'A'.
            wl_konp-zaehk_ind = '01'.

            PERFORM f_actualizar_precio USING cg_operation_original wl_konh wl_konp tl_konm space
                                CHANGING vl_type vl_message.

            <fs_datos_zprc>-type = vl_type.
            <fs_datos_zprc>-msg_log = vl_message.

            IF <fs_datos_zprc>-type <> 'E'.
              PERFORM f_buscar_oferta CHANGING <fs_datos_zprc>.
              "
              " Si he encontrado una oferta, actualizo precios.
              "
              IF <fs_datos_zprc>-type <> 'E' AND <fs_datos_zprc>-vbeln IS NOT INITIAL AND <fs_datos_zprc>-posnr IS NOT INITIAL.
                DATA: vl_salesdocument        TYPE bapivbeln-vbeln,
                      wl_quotation_header_inx TYPE bapisdh1x,
                      wl_logic_switch         TYPE bapisdls,
                      tl_return               TYPE TABLE OF bapiret2,
                      tl_conditions_in        TYPE TABLE OF bapicond,
                      tl_conditions_inx       TYPE TABLE OF bapicondx,
                      tl_quotation_item_in    TYPE TABLE OF bapisditm,
                      tl_quotation_item_inx   TYPE TABLE OF bapisditmx.

                vl_salesdocument = <fs_datos_zprc>-vbeln.

                wl_quotation_header_inx-updateflag = 'U'.

                wl_logic_switch-pricing = 'C'.

                APPEND INITIAL LINE TO tl_quotation_item_in ASSIGNING FIELD-SYMBOL(<fs_item>).
                <fs_item>-itm_number = <fs_datos_zprc>-posnr.

                APPEND INITIAL LINE TO tl_quotation_item_inx ASSIGNING FIELD-SYMBOL(<fs_itemx>).
                <fs_itemx>-itm_number = <fs_datos_zprc>-posnr.
                <fs_itemx>-updateflag = 'U'.

                APPEND INITIAL LINE TO tl_conditions_in ASSIGNING FIELD-SYMBOL(<fs_cond>).
                <fs_cond>-itm_number = <fs_datos_zprc>-posnr.
                <fs_cond>-cond_updat  = 'U'.

                APPEND INITIAL LINE TO tl_conditions_inx ASSIGNING FIELD-SYMBOL(<fs_cond_x>).
                <fs_cond_x>-itm_number = <fs_cond>-itm_number.
                <fs_cond_x>-updateflag = 'U'.

                CALL FUNCTION 'BAPI_CUSTOMERQUOTATION_CHANGE'
                  EXPORTING
                    salesdocument        = vl_salesdocument
*                   QUOTATION_HEADER_IN  =
                    quotation_header_inx = wl_quotation_header_inx
*                   SIMULATION           =
*                   BEHAVE_WHEN_ERROR    =
*                   INT_NUMBER_ASSIGNMENT        =
                    logic_switch         = wl_logic_switch
*                   NO_STATUS_BUF_INIT   = ' '
                  TABLES
                    return               = tl_return
                    quotation_item_in    = tl_quotation_item_in
                    quotation_item_inx   = tl_quotation_item_inx
*                   PARTNERS             =
*                   PARTNERCHANGES       =
*                   PARTNERADDRESSES     =
                    conditions_in        = tl_conditions_in
                    conditions_inx       = tl_conditions_inx
*                   QUOTATION_CFGS_REF   =
*                   QUOTATION_CFGS_INST  =
*                   QUOTATION_CFGS_PART_OF       =
*                   QUOTATION_CFGS_VALUE =
*                   QUOTATION_CFGS_BLOB  =
*                   QUOTATION_CFGS_VK    =
*                   QUOTATION_CFGS_REFINST       =
*                   SCHEDULE_LINES       =
*                   SCHEDULE_LINESX      =
*                   QUOTATION_TEXT       =
*                   QUOTATION_KEYS       =
*                   EXTENSIONIN          =
*                   EXTENSIONEX          =
                  .
                LOOP AT tl_return ASSIGNING FIELD-SYMBOL(<fs_return>) WHERE type CA 'EA'.

                  <fs_datos_zprc>-type = 'E'.
                  <fs_datos_zprc>-msg_log = <fs_return>-message.
                  EXIT.

                ENDLOOP.
              ELSE.
                " vuelvo a poner lo que había.
                <fs_datos_zprc>-type = vl_type.
                <fs_datos_zprc>-msg_log = vl_message.
              ENDIF.
            ENDIF.
            IF <fs_datos_zprc>-type <> 'E'.
              CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                EXPORTING
                  wait = 'X'.
            ELSE.
              CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
            ENDIF.

          ENDIF.
          IF vl_num_registros > 1.
            <fs_datos_zprc>-escalas = 'X'.
          ENDIF.

          APPEND LINES OF tl_datos_escalas TO <fs_datos_zprc>-datos_escalas.

          PERFORM f_append_dato  TABLES   tp_alv  USING <fs_datos_zprc>.
        ENDAT.
      ENDLOOP.


    WHEN cg_dynpro_ofertas. " OFertas
      DATA: vl_cantidad_oferta TYPE zssdd099_s_alv-kstbm,
            tl_pos_oferta      TYPE tt_pos_oferta.

      CLEAR tl_datos_ofertas.

      LOOP AT tg_excel ASSIGNING <fs_excel>.
        CHECK <fs_excel>-destinatario IS NOT INITIAL.

        APPEND INITIAL LINE TO tl_datos_ofertas ASSIGNING FIELD-SYMBOL(<fs_datos_ofertas>).
        <fs_datos_ofertas>-vkorg = |{ <fs_excel>-org_ventas  ALPHA = IN }|.
        <fs_datos_ofertas>-vtweg = |{ <fs_excel>-canal_dist  ALPHA = IN }|.
        <fs_datos_ofertas>-werks = |{ <fs_excel>-centro  ALPHA = IN }|.
        <fs_datos_ofertas>-lgort = |{ <fs_excel>-almacen  ALPHA = IN }|.
        <fs_datos_ofertas>-kunnr = |{ <fs_excel>-cliente  ALPHA = IN }|.
        <fs_datos_ofertas>-kunwe = |{ <fs_excel>-destinatario  ALPHA = IN }|.
        <fs_datos_ofertas>-matnr = |{ <fs_excel>-material  ALPHA = IN }|.
        <fs_datos_ofertas>-kbetr = <fs_excel>-importe.
        <fs_datos_ofertas>-konwa = <fs_excel>-moneda.
        <fs_datos_ofertas>-kpein = <fs_excel>-cantidad_base.
        <fs_datos_ofertas>-kstbm = <fs_excel>-cantidad_pedido.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            input          = <fs_excel>-umb
*           LANGUAGE       = SY-LANGU
          IMPORTING
            output         = <fs_datos_ofertas>-kmein
          EXCEPTIONS
            unit_not_found = 1
            OTHERS         = 2.
        IF sy-subrc <> 0.
          CLEAR <fs_datos_ofertas>-kmein.
        ENDIF.

        <fs_datos_ofertas>-datab = <fs_excel>-fecha_inicio.
        <fs_datos_ofertas>-datbi = <fs_excel>-fecha_fin.
        CLEAR <fs_datos_ofertas>-msg_log.
        CLEAR <fs_datos_ofertas>-semaforo.
        CLEAR <fs_datos_ofertas>-type.

        "
        " Validamos datos. Validaciones básicas.
        "
        PERFORM f_validar_datos_ofertas CHANGING <fs_datos_ofertas>.

      ENDLOOP.

      SORT tl_datos_ofertas BY vkorg vtweg kunnr kunwe matnr werks lgort .
      "
      " Empezamos a crear las condiciones.
      "
      LOOP AT tl_datos_ofertas ASSIGNING <fs_datos_ofertas>.
        AT NEW kunwe.
          CLEAR tl_pos_oferta.
        ENDAT.
        AT NEW matnr.
          CLEAR vl_cantidad_oferta.
          vl_add_matnr = 'X'.
        ENDAT.

*vl_cantidad_oferta type zssdd099_s_alv-kstbm
        IF <fs_datos_ofertas>-kstbm IS NOT INITIAL AND
          vl_cantidad_oferta IS INITIAL.
          vl_cantidad_oferta = <fs_datos_ofertas>-kstbm.
        ENDIF.
        IF <fs_datos_ofertas>-kstbm IS NOT INITIAL AND
          <fs_datos_ofertas>-kstbm < vl_cantidad_oferta.
          vl_cantidad_oferta = <fs_datos_ofertas>-kstbm.
        ENDIF.

        IF <fs_datos_ofertas>-type IS NOT INITIAL.
          CLEAR vl_add_matnr.
        ENDIF.

        AT END OF matnr.
          IF vl_cantidad_oferta <= 0.
            CLEAR vl_add_matnr.
            <fs_datos_ofertas>-type = 'E'.
            <fs_datos_ofertas>-msg_log = 'No se ha indicado cantidad para la oferta.'.
          ENDIF.

          <fs_datos_ofertas>-kstbm = vl_cantidad_oferta.

          IF vl_add_matnr IS NOT INITIAL.
            "
            " Validar si existe ya una oferta para el material.
            "
            SELECT *
              FROM vbak
              INNER JOIN vbpa ON ( vbpa~vbeln = vbak~vbeln AND vbpa~posnr = '000000' AND vbpa~parvw = 'WE' )
              INTO TABLE @DATA(tl_vbak)
              WHERE vbak~auart = @cg_doc_type_oferta AND
                    vbak~vkorg = @<fs_datos_ofertas>-vkorg AND
                    vbak~vtweg = @<fs_datos_ofertas>-vtweg AND
                    vbak~angdt = @<fs_datos_ofertas>-datab AND
                    vbak~bnddt = @<fs_datos_ofertas>-datbi AND
                    vbak~kunnr = @<fs_datos_ofertas>-kunnr AND
                    vbpa~kunnr = @<fs_datos_ofertas>-kunwe.
            LOOP AT tl_vbak ASSIGNING FIELD-SYMBOL(<fs_vbak>).
              SELECT SINGLE *
                FROM vbap
                INTO @DATA(wl_vbap)
                WHERE vbeln = @<fs_vbak>-vbak-vbeln AND
                      matnr = @<fs_datos_ofertas>-matnr AND
                      werks = @<fs_datos_ofertas>-werks.
              IF sy-subrc = 0.
                CLEAR vl_add_matnr.
                <fs_datos_ofertas>-type = 'I'.
                <fs_datos_ofertas>-msg_log = 'Ya existe una oferta con estos datos'.
                <fs_datos_ofertas>-vbeln = wl_vbap-vbeln.
                <fs_datos_ofertas>-posnr = wl_vbap-posnr.

*                REPLACE ALL OCCURRENCES OF '&1' IN <fs_datos_ofertas>-msg_log WITH <fs_vbak>-vbak-vbeln.
              ENDIF.
              IF vl_add_matnr IS INITIAL.
                EXIT.
              ENDIF.
            ENDLOOP.

          ENDIF.

          IF vl_add_matnr IS NOT INITIAL.
            APPEND INITIAL LINE TO tl_pos_oferta ASSIGNING FIELD-SYMBOL(<fs_pos_material>).
            <fs_pos_material>-matnr = <fs_datos_ofertas>-matnr.
            <fs_pos_material>-menge = vl_cantidad_oferta.
            <fs_pos_material>-meins = <fs_datos_ofertas>-kmein.
            <fs_pos_material>-werks = <fs_datos_ofertas>-werks.
          ENDIF.

          PERFORM f_append_dato  TABLES   tp_alv  USING <fs_datos_ofertas>.
        ENDAT.

        AT END OF kunwe.

          IF tl_pos_oferta IS NOT INITIAL.

            PERFORM f_crear_oferta  USING  <fs_datos_ofertas> tl_pos_oferta
                                            CHANGING vl_type vl_message.

            "
            " Actualizar todas las posiciones afectadas.
            "
            LOOP AT tp_alv ASSIGNING FIELD-SYMBOL(<fs_alv_upd>)
              WHERE vkorg = <fs_datos_ofertas>-vkorg AND
                    vtweg = <fs_datos_ofertas>-vtweg AND
                    kunnr = <fs_datos_ofertas>-kunnr AND
                    kunwe = <fs_datos_ofertas>-kunwe.
              CHECK <fs_alv_upd>-msg_log IS INITIAL.

              <fs_alv_upd>-type = vl_type.
              <fs_alv_upd>-msg_log = vl_message.
            ENDLOOP.



          ENDIF.

        ENDAT.
      ENDLOOP.

    WHEN cg_dynpro_zr01. " Recargo por montaje
      CLEAR tl_datos_zr01.
      LOOP AT tg_excel ASSIGNING <fs_excel>.
        CHECK <fs_excel>-montaje IS NOT INITIAL.

        APPEND INITIAL LINE TO tl_datos_zr01 ASSIGNING FIELD-SYMBOL(<fs_datos_zr01>).
        <fs_datos_zr01>-kschl = 'ZR01'.
        <fs_datos_zr01>-vkorg = |{ <fs_excel>-org_ventas  ALPHA = IN }|.
        <fs_datos_zr01>-werks = |{ <fs_excel>-centro  ALPHA = IN }|.
        <fs_datos_zr01>-lgort = |{ <fs_excel>-almacen  ALPHA = IN }|.
        <fs_datos_zr01>-kunnr = |{ <fs_excel>-cliente  ALPHA = IN }|.
        <fs_datos_zr01>-matnr = |{ <fs_excel>-material  ALPHA = IN }|.
**        <fs_datos_zr01>-zzmontaje = |{ <fs_excel>-montaje  ALPHA = IN }|.
        <fs_datos_zr01>-zzmontaje = 'X'. "Siempre ponemos que es montaje
        <fs_datos_zr01>-kbetr = <fs_excel>-montaje.
        <fs_datos_zr01>-konwa = <fs_excel>-moneda.
        <fs_datos_zr01>-kpein = <fs_excel>-cantidad_base.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            input          = <fs_excel>-umb
*           LANGUAGE       = SY-LANGU
          IMPORTING
            output         = <fs_datos_zr01>-kmein
          EXCEPTIONS
            unit_not_found = 1
            OTHERS         = 2.
        IF sy-subrc <> 0.
          CLEAR <fs_datos_zr01>-kmein.
        ENDIF.

        <fs_datos_zr01>-datab = <fs_excel>-fecha_inicio.
        <fs_datos_zr01>-datbi = <fs_excel>-fecha_fin.
        CLEAR <fs_datos_zr01>-msg_log.
        CLEAR <fs_datos_zr01>-semaforo.
        CLEAR <fs_datos_zr01>-type.

        "
        " Validamos datos. Validaciones básicas.
        "
        PERFORM f_validar_datos_zr01 CHANGING <fs_datos_zr01>.

      ENDLOOP.

      SORT tl_datos_zr01 BY kschl vkorg werks lgort kunnr matnr zzmontaje.
      "
      " Empezamos a crear las condiciones.
      "
      LOOP AT tl_datos_zr01 ASSIGNING <fs_datos_zr01>.
        AT NEW zzmontaje.
          vl_crear_condicion = 'X'.
        ENDAT.

        IF <fs_datos_zr01>-type IS NOT INITIAL.
          CLEAR vl_crear_condicion.
        ENDIF.
        " Por cada registro validamos.
        AT END OF zzmontaje.
          " Validar que no existe la tarifa indicada.
          IF <fs_datos_zr01>-type IS INITIAL.
            SELECT SINGLE *
              FROM a960
              INTO @DATA(wl_a960)
              WHERE kappl = 'V' AND
                    kschl = @<fs_datos_zr01>-kschl AND
                    vkorg = @<fs_datos_zr01>-vkorg AND
                    werks = @<fs_datos_zr01>-werks AND
                    zzlgort = @<fs_datos_zr01>-lgort AND
                    kunnr = @<fs_datos_zr01>-kunnr AND
                    matnr = @<fs_datos_zr01>-matnr AND
                    zzmontaje = @<fs_datos_zr01>-zzmontaje AND
                    kfrst = '' AND
                    datab = @<fs_datos_zr01>-datab AND
                    datbi = @<fs_datos_zr01>-datbi.
            IF sy-subrc = 0.
              SELECT SINGLE *
                FROM konp
                INTO @DATA(wl_konp_a960)
                WHERE knumh = @wl_a960-knumh AND
                      kbetr = @<fs_datos_zr01>-kbetr AND
                      konwa = @<fs_datos_zr01>-konwa AND
                      kpein = @<fs_datos_zr01>-kpein AND
                      kmein = @<fs_datos_zr01>-kmein.
            ENDIF.
            IF sy-subrc = 0.
              <fs_datos_zr01>-msg_log = 'La tarifa ya existe y no ha sido modificada'.
              <fs_datos_zr01>-type = 'I'.
              CLEAR vl_crear_condicion.
            ENDIF.
**            LOOP AT tl_a960 ASSIGNING FIELD-SYMBOL(<fs_a960>).
**              IF ( ( <fs_a960>-datbi BETWEEN <fs_datos_zr01>-datab AND <fs_datos_zr01>-datbi ) OR
**                ( <fs_a960>-datab BETWEEN <fs_datos_zr01>-datab AND <fs_datos_zr01>-datbi ) OR
**                ( <fs_datos_zr01>-datbi BETWEEN <fs_a960>-datab AND <fs_a960>-datbi ) OR
**                ( <fs_datos_zr01>-datab BETWEEN <fs_a960>-datab AND <fs_a960>-datbi )  ).
**                <fs_datos_zr01>-msg_log = 'La tarifa ya existe y no ha sido modificada'.
**                <fs_datos_zr01>-error = 'X'.
**                CLEAR vl_crear_condicion.
**                EXIT.
**              ENDIF.
**            ENDLOOP.
          ENDIF.

          IF vl_crear_condicion IS NOT INITIAL.
"
            " Buscamos las condiciones a dar de 'baja'.
            "
            SELECT *
            FROM a960
            INTO TABLE @DATA(tl_a960_borrar)
            WHERE knumh <> @wl_a960-knumh AND
                    kappl = 'V' AND
                    kschl = @<fs_datos_zr01>-kschl AND
                    vkorg = @<fs_datos_zr01>-vkorg AND
                    werks = @<fs_datos_zr01>-werks AND
                    zzlgort = @<fs_datos_zr01>-lgort AND
                    kunnr = @<fs_datos_zr01>-kunnr AND
                    matnr = @<fs_datos_zr01>-matnr AND
                    zzmontaje = @<fs_datos_zr01>-zzmontaje AND
                    kfrst = '' AND
                  ( datbi BETWEEN @<fs_datos_zprc>-datab  AND  @<fs_datos_zprc>-datbi OR
                    datab BETWEEN @<fs_datos_zprc>-datab  AND  @<fs_datos_zprc>-datbi ) .

            LOOP AT tl_a960_borrar ASSIGNING FIELD-SYMBOL(<fs_a960_borrar>).
              vl_operacion = cg_operation_borrar.
              IF <fs_a960_borrar>-datab < <fs_datos_zprc>-datab AND
                 <fs_datos_zprc>-datab <= <fs_a960_borrar>-datbi AND <fs_datos_zprc>-datbi >= <fs_a960_borrar>-datbi.
                "Fecha inicial anterior a la nueva definición y fecha final dentro de la nueva definición.
                " hay que modificar. Fecha final es nueva fecha inicial - 1.
                <fs_a960_borrar>-datbi = <fs_datos_zprc>-datab - 1.
                vl_operacion = cg_operation_modif.
              ENDIF.

              "
              " Actualizamos.
              "
              SELECT SINGLE *
                FROM konh
                INTO CORRESPONDING FIELDS OF wl_konh
                WHERE knumh = <fs_a960_borrar>-knumh.

              wl_konh-datbi = <fs_a960_borrar>-datbi.
              wl_konh-datab = <fs_a960_borrar>-datab.

              SELECT SINGLE *
                FROM konp
                INTO CORRESPONDING FIELDS OF wl_konp
                WHERE knumh = <fs_a960_borrar>-knumh.

              SELECT *
                FROM konm
                INTO CORRESPONDING FIELDS OF TABLE tl_konm
                WHERE knumh = <fs_a960_borrar>-knumh.

              PERFORM f_actualizar_precio USING cg_operation_borrar wl_konh wl_konp tl_konm space
                                  CHANGING vl_type vl_message.
            ENDLOOP.

            CLEAR: wl_konh, wl_konp, tl_konm, wl_varkey_960, wl_vardat_960.

            wl_vardat_960-kbstat = ''.

            wl_varkey_960-vkorg = <fs_datos_zr01>-vkorg.
            wl_varkey_960-werks = <fs_datos_zr01>-werks.
            wl_varkey_960-lgort = <fs_datos_zr01>-lgort.
            wl_varkey_960-kunnr = <fs_datos_zr01>-kunnr.
            wl_varkey_960-matnr = <fs_datos_zr01>-matnr.
            wl_varkey_960-zzmontaje = <fs_datos_zr01>-zzmontaje.
            CLEAR wl_varkey_960-kfrst.

            wl_konh-kvewe  = 'A'.
            wl_konh-kotabnr = '960'.
            wl_konh-kappl = 'V'.
            wl_konh-kschl = <fs_datos_zr01>-kschl.
            wl_konh-vakey = wl_varkey_960.
            wl_konh-datab = <fs_datos_zr01>-datab.
            wl_konh-datbi = <fs_datos_zr01>-datbi.
            "<fs_bapicondct>-AGREE_COND =
            CLEAR wl_konh-knumh.
            wl_konh-vadat = wl_vardat_960.
            wl_konh-ernam   = sy-uname.
            wl_konh-erdat   = sy-datum.

            wl_konp-kappl = wl_konh-kappl.
            wl_konp-kschl = wl_konh-kschl.
            wl_konp-kopos = 1.
            wl_konp-kbetr = <fs_datos_zr01>-kbetr.
            wl_konp-konwa = <fs_datos_zr01>-konwa.
            wl_konp-kpein = <fs_datos_zr01>-kpein.
            wl_konp-kmein = <fs_datos_zr01>-kmein.

            wl_konp-stfkz = 'A'.
            wl_konp-zaehk_ind = '01'.

            CLEAR: vl_message, vl_type.

            PERFORM f_actualizar_precio USING cg_operation_original wl_konh wl_konp tl_konm 'X'
                                CHANGING vl_type vl_message.

            <fs_datos_zr01>-type = vl_type.
            <fs_datos_zr01>-msg_log = vl_message.

          ENDIF.
          PERFORM f_append_dato  TABLES   tp_alv  USING <fs_datos_zr01>.
        ENDAT.
      ENDLOOP.

  ENDCASE.
**
  LOOP AT tp_alv ASSIGNING FIELD-SYMBOL(<fs_alv>).
    CASE <fs_alv>-type.
      WHEN 'E'.
        <fs_alv>-semaforo = icon_led_red.
      WHEN 'I'.
        <fs_alv>-semaforo = icon_led_yellow.
      WHEN OTHERS.
        <fs_alv>-semaforo = icon_led_green.
    ENDCASE.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CREAR_OFERTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
FORM f_crear_oferta  USING  wp_datos TYPE zssdd099_s_alv
                            tp_pos_oferta TYPE tt_pos_oferta
                          CHANGING vp_type vp_message.
  DATA: wl_quotation_header_in    TYPE  bapisdhd1,
        tl_quotation_partners     TYPE TABLE OF bapiparnr,
        wl_partner                LIKE LINE OF tl_quotation_partners,
        vl_salesdoc               TYPE bapivbeln-vbeln,
        tl_return                 TYPE TABLE OF bapiret2,
        tl_quotation_items_in     TYPE TABLE OF bapisditm,
        tl_quotation_schedules_in TYPE TABLE OF bapischdl,
        vl_posicion               TYPE posnr_va.

  CLEAR tl_return.

  CLEAR wl_quotation_header_in.
  wl_quotation_header_in-doc_type = cg_doc_type_oferta.
  wl_quotation_header_in-sales_org = wp_datos-vkorg.
  wl_quotation_header_in-distr_chan = wp_datos-vtweg.
  wl_quotation_header_in-qt_valid_f = wp_datos-datab.
  wl_quotation_header_in-qt_valid_t = wp_datos-datbi.

  CLEAR: tl_quotation_partners, wl_partner.
  wl_partner-partn_role = 'AG'.
  wl_partner-partn_numb = wp_datos-kunnr.
  APPEND wl_partner TO tl_quotation_partners.
  CLEAR wl_partner.
  wl_partner-partn_role = 'WE'.
  wl_partner-partn_numb = wp_datos-kunwe.
  APPEND wl_partner TO tl_quotation_partners.


  CLEAR tl_quotation_items_in.
  CLEAR tl_quotation_schedules_in.
  vl_posicion = '000010'.

  LOOP AT tp_pos_oferta ASSIGNING FIELD-SYMBOL(<fs_pos_oferta>).
    APPEND INITIAL LINE TO tl_quotation_items_in  ASSIGNING FIELD-SYMBOL(<fs_item>).
    <fs_item>-itm_number = vl_posicion.
    <fs_item>-material = <fs_pos_oferta>-matnr.
    <fs_item>-plant = <fs_pos_oferta>-werks.

    APPEND INITIAL LINE TO tl_quotation_schedules_in ASSIGNING FIELD-SYMBOL(<fs_schd>).
    <fs_schd>-itm_number = vl_posicion.
    <fs_schd>-req_qty = <fs_pos_oferta>-menge.

    ADD 10 TO vl_posicion.
  ENDLOOP.


  CALL FUNCTION 'BAPI_QUOTATION_CREATEFROMDATA2'
    EXPORTING
*     SALESDOCUMENTIN        =
      quotation_header_in    = wl_quotation_header_in
*     QUOTATION_HEADER_INX   =
*     SENDER                 =
*     BINARY_RELATIONSHIPTYPE        = ' '
*     INT_NUMBER_ASSIGNMENT  = ' '
*     BEHAVE_WHEN_ERROR      = ' '
*     LOGIC_SWITCH           =
*     TESTRUN                =
*     CONVERT                = ' '
    IMPORTING
      salesdocument          = vl_salesdoc
    TABLES
      return                 = tl_return
      quotation_items_in     = tl_quotation_items_in
*     QUOTATION_ITEMS_INX    =
      quotation_partners     = tl_quotation_partners
      quotation_schedules_in = tl_quotation_schedules_in
*     QUOTATION_SCHEDULES_INX        =
*     QUOTATION_CONDITIONS_IN        =
*     QUOTATION_CONDITIONS_INX       =
*     QUOTATION_CFGS_REF     =
*     QUOTATION_CFGS_INST    =
*     QUOTATION_CFGS_PART_OF =
*     QUOTATION_CFGS_VALUE   =
*     QUOTATION_CFGS_BLOB    =
*     QUOTATION_CFGS_VK      =
*     QUOTATION_CFGS_REFINST =
*     QUOTATION_KEYS         =
*     QUOTATION_TEXT         =
*     EXTENSIONIN            =
*     PARTNERADDRESSES       =
*     EXTENSIONEX            =
    .

  IF sy-subrc = 0.
    LOOP AT tl_return ASSIGNING FIELD-SYMBOL(<fs_return>).
      IF <fs_return>-type CA 'EA'.
        vp_type = 'E'.
        vp_message = <fs_return>-message.
        EXIT.
      ENDIF.
    ENDLOOP.

  ELSE.
    vp_type = 'E'.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
      INTO vp_message.
  ENDIF.

  IF vp_type = space.
    vp_type = 'S'.
    vp_message = 'Oferta &1 creada correctamente'.
    REPLACE ALL OCCURRENCES OF '&1' IN vp_message WITH vl_salesdoc.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_ACTUALIZAR_PRECIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_CG_OPERATION_MODIF  text
*      -->P_<FS_KONH>  text
*      -->P_<FS_KONP>  text
*----------------------------------------------------------------------*
FORM f_actualizar_precio  USING  vp_operacion
                                 wp_konh TYPE konh
                                 wp_konp TYPE konp
                                 tp_konm TYPE tt_konm
                                 vp_commit TYPE flag
                          CHANGING vp_type vp_message.

  CLEAR: vp_type, vp_message.

  DATA: tl_bapicondct  TYPE TABLE OF bapicondct,
        tl_bapicondhd  TYPE TABLE OF bapicondhd,
        tl_bapicondit  TYPE TABLE OF bapicondit,
        tl_bapicondqs  TYPE TABLE OF bapicondqs,
        tl_bapicondvs  TYPE TABLE OF bapicondvs,
        tl_bapiret2    TYPE TABLE OF bapiret2,
        tl_bapiknumhs  TYPE TABLE OF bapiknumhs,
        tl_mem_initial TYPE TABLE OF cnd_mem_initial.

  DATA(vl_knumh)              = SWITCH #( vp_operacion WHEN cg_operation_original THEN cg_knumh_new ELSE wp_konh-knumh ).
  DATA(vl_phisical_deletion)  = SWITCH #( vp_operacion WHEN cg_operation_borrar   THEN 'X' ELSE space ).

  DATA(wl_konh)   = wp_konh.
  wl_konh-knumh   = vl_knumh.
  wl_konh-ernam   = sy-uname.
  wl_konh-erdat   = sy-datum.

  DATA(wl_konp)   = wp_konp.
  wl_konp-knumh   = vl_knumh.


  APPEND INITIAL LINE TO tl_bapicondct ASSIGNING FIELD-SYMBOL(<fs_bapicondct>).
  <fs_bapicondct>-operation   = vp_operacion.
  <fs_bapicondct>-cond_usage  = wl_konh-kvewe.
  <fs_bapicondct>-table_no    = wl_konh-kotabnr.
  <fs_bapicondct>-applicatio  = wl_konh-kappl.
  <fs_bapicondct>-cond_type   = wl_konh-kschl.
  <fs_bapicondct>-varkey      = wl_konh-vakey.
  <fs_bapicondct>-valid_from  = wl_konh-datab.
  <fs_bapicondct>-valid_to    = wl_konh-datbi.
  "<fs_bapicondct>-AGREE_COND =
  <fs_bapicondct>-cond_no     = wl_konh-knumh.
  <fs_bapicondct>-vadat       = wl_konh-vadat.



  APPEND INITIAL LINE TO tl_bapicondit  ASSIGNING FIELD-SYMBOL(<fs_bapicondit>).
  <fs_bapicondit>-operation   = vp_operacion.
  <fs_bapicondit>-cond_no     = wl_konp-knumh.
  <fs_bapicondit>-cond_count  = wl_konp-kopos.
  <fs_bapicondit>-applicatio  = wl_konp-kappl.
  <fs_bapicondit>-cond_type   = wl_konp-kschl.
  <fs_bapicondit>-text_no     = wl_konp-knumt.
  <fs_bapicondit>-scaletype   = wl_konp-stfkz.
  <fs_bapicondit>-scalebasin  = wl_konp-kzbzg.
  <fs_bapicondit>-scale_qty   = wl_konp-kstbm.
  <fs_bapicondit>-unitmeasur  = wl_konp-konms.
  <fs_bapicondit>-scale_val   = wl_konp-kstbw.
  <fs_bapicondit>-currenckey  = wl_konp-konws.
  <fs_bapicondit>-calctypcon  = wl_konp-krech.
  <fs_bapicondit>-cond_value  = wl_konp-kbetr.
  <fs_bapicondit>-condcurr    = wl_konp-konwa.
  <fs_bapicondit>-cond_p_unt  = wl_konp-kpein.
  <fs_bapicondit>-cond_unit   = wl_konp-kmein.
  <fs_bapicondit>-pricelevel  = wl_konp-prsch.
  <fs_bapicondit>-numconvert  = wl_konp-kumza.
  <fs_bapicondit>-denominato  = wl_konp-kumne.
  <fs_bapicondit>-base_uom    = wl_konp-meins.
  <fs_bapicondit>-lowerlimit  = wl_konp-mxwrt.
  <fs_bapicondit>-upperlimit  = wl_konp-gkwrt.
  <fs_bapicondit>-plcondval   = wl_konp-pkwrt.
  <fs_bapicondit>-cum_value   = wl_konp-fkwrt.
  <fs_bapicondit>-cumm_accr   = wl_konp-rswrt.
  <fs_bapicondit>-currency    = wl_konp-konwa.
  <fs_bapicondit>-condcurren  = wl_konp-kwaeh.
  <fs_bapicondit>-plan_basis  = wl_konp-ukbas.
  <fs_bapicondit>-rate_unit   = wl_konp-kmein.
  <fs_bapicondit>-exclusion   = wl_konp-kznep.
  <fs_bapicondit>-customer    = wl_konp-kunnr.
  <fs_bapicondit>-vendor_no   = wl_konp-lifnr.
  <fs_bapicondit>-tax_code    = wl_konp-mwsk1.
*  <fs_bapicondit>-indidelete  = wl_konp-loevm_ko.
  <fs_bapicondit>-conditidx   = wl_konp-zaehk_ind.
  <fs_bapicondit>-matlsettl   = wl_konp-bomat.
  <fs_bapicondit>-accruals    = wl_konp-kbrue.
  <fs_bapicondit>-reb_retroa  = wl_konp-kspae.
  <fs_bapicondit>-statofagre  = wl_konp-bosta.
  <fs_bapicondit>-promot_no   = wl_konp-knuma_pi.
  <fs_bapicondit>-sales_deal  = wl_konp-knuma_ag.
  <fs_bapicondit>-salesquote  = wl_konp-knuma_sq.
  <fs_bapicondit>-add_val_dy  = wl_konp-valtg.
  <fs_bapicondit>-fix_val_dy  = wl_konp-valdt.
  <fs_bapicondit>-pmnttrms    = wl_konp-zterm.
  <fs_bapicondit>-numborders  = wl_konp-anzauf.
  <fs_bapicondit>-minconbava  = wl_konp-mikbas.
  <fs_bapicondit>-maxconbava  = wl_konp-mxkbas.
  <fs_bapicondit>-maxconval   = wl_konp-komxwrt.
  <fs_bapicondit>-incr_scale  = wl_konp-klf_stg.
  <fs_bapicondit>-pricscale   = wl_konp-klf_kal.
  <fs_bapicondit>-relprcg     = wl_konp-vkkal.
  <fs_bapicondit>-promotion   = wl_konp-aktnr.
  <fs_bapicondit>-rebagreemt  = wl_konp-knuma_bo.
  <fs_bapicondit>-withtaxcod  = wl_konp-mwsk2.
  <fs_bapicondit>-contract    = wl_konp-vertt.
  <fs_bapicondit>-contractno  = wl_konp-vertn.
  <fs_bapicondit>-flow_type   = wl_konp-vbewa.
  <fs_bapicondit>-indimatmai  = wl_konp-mdflg.
  <fs_bapicondit>-status      = wl_konp-kfrst.
  <fs_bapicondit>-umsabst     = wl_konp-uasta.

  APPEND INITIAL LINE TO tl_bapicondhd ASSIGNING FIELD-SYMBOL(<fs_bapicondhd>).
  <fs_bapicondhd>-operation   = vp_operacion.
  <fs_bapicondhd>-cond_no     = wl_konh-knumh.
  <fs_bapicondhd>-created_by  = sy-uname.
  <fs_bapicondhd>-creat_date  = sy-datum.
  <fs_bapicondhd>-cond_usage  = wl_konh-kvewe.
  <fs_bapicondhd>-table_no    = wl_konh-kotabnr.
  <fs_bapicondhd>-applicatio  = wl_konh-kappl.
  <fs_bapicondhd>-cond_type   = wl_konh-kschl.
  <fs_bapicondhd>-varkey      = wl_konh-vakey.
  <fs_bapicondhd>-valid_from  = wl_konh-datab.
  <fs_bapicondhd>-valid_to    = wl_konh-datbi.
  <fs_bapicondhd>-vardate     = wl_konh-vadat.

  LOOP AT tp_konm ASSIGNING FIELD-SYMBOL(<fs_konm>).
    <fs_konm>-klfn1 = sy-tabix.
    APPEND INITIAL LINE TO tl_bapicondqs ASSIGNING FIELD-SYMBOL(<fs_bapicondqs>).
    <fs_bapicondqs>-operation   = vp_operacion.
    <fs_bapicondqs>-cond_no     = wl_konp-knumh.
    <fs_bapicondqs>-cond_count  = wl_konp-kopos.
    <fs_bapicondqs>-condcurr    = wl_konp-konwa.
    <fs_bapicondqs>-cond_unit   = wl_konp-kmein.
    <fs_bapicondqs>-line_no     = <fs_konm>-klfn1.
    <fs_bapicondqs>-scale_qty   = <fs_konm>-kstbm.
    <fs_bapicondqs>-currency    = <fs_konm>-kbetr.
  ENDLOOP.


****************************
*https://blogs.sap.com/2019/07/22/how-to-use-bapi_prices_conditions-to-mass-upload-price-conditions/
****************************
  DATA: tl_xkondat TYPE TABLE OF vkondat,
        tl_xkonh   TYPE TABLE OF konhdb,
        tl_xkonm   TYPE TABLE OF vkonm,
        tl_xkonp   TYPE TABLE OF konpdb,
        tl_xkonw   TYPE TABLE OF vkonw,
        tl_ykondat TYPE TABLE OF vkondat,
        tl_ykonh   TYPE TABLE OF konhdb,
        tl_ykonm   TYPE TABLE OF vkonm,
        tl_ykonp   TYPE TABLE OF konpdb,
        tl_ykonw   TYPE TABLE OF vkonw.

  IF vp_operacion <> cg_operation_original.
    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE tl_ykonh
      FROM konh
      WHERE knumh = vl_knumh.
    LOOP AT tl_ykonh ASSIGNING FIELD-SYMBOL(<fs_ykonh>).
      <fs_ykonh>-updkz = 'U'.
    ENDLOOP.

    SELECT *
      APPENDING CORRESPONDING FIELDS OF TABLE tl_ykonp
      FROM konp
      WHERE knumh = vl_knumh.
    LOOP AT tl_ykonp ASSIGNING FIELD-SYMBOL(<fs_ykonp>).
      <fs_ykonp>-updkz = 'U'.
    ENDLOOP.
  ENDIF.


  CALL FUNCTION 'BAPI_PRICES_CONDITIONS'
    EXPORTING
*     PI_INITIALMODE       = ' '
*     PI_BLOCKNUMBER       =
      pi_physical_deletion = vl_phisical_deletion
    TABLES
      ti_bapicondct        = tl_bapicondct
      ti_bapicondhd        = tl_bapicondhd
      ti_bapicondit        = tl_bapicondit
      ti_bapicondqs        = tl_bapicondqs
      ti_bapicondvs        = tl_bapicondvs
      to_bapiret2          = tl_bapiret2
      to_bapiknumhs        = tl_bapiknumhs
      to_mem_initial       = tl_mem_initial
    EXCEPTIONS
      update_error         = 1
      OTHERS               = 2.
  IF sy-subrc = 0.
    LOOP AT tl_bapiret2 ASSIGNING FIELD-SYMBOL(<fs_bapiret2>).
      IF <fs_bapiret2>-type CA 'EA'.
        vp_type = 'E'.
        vp_message = <fs_bapiret2>-message.
        EXIT.
      ELSEIF <fs_bapiret2>-type CA 'S' AND vp_operacion = cg_operation_original.
        vl_knumh = <fs_bapiret2>-message_v1.
      ENDIF.
    ENDLOOP.

  ELSE.
    vp_type = 'E'.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
      INTO vp_message.
  ENDIF.

  IF vp_type IS INITIAL.
    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE tl_xkonh
      FROM konh
      WHERE knumh = vl_knumh.
    LOOP AT tl_xkonh ASSIGNING FIELD-SYMBOL(<fs_xkonh>).
      <fs_xkonh>-updkz = 'U'.
    ENDLOOP.

    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE tl_xkonp
      FROM konp
      WHERE knumh = vl_knumh.
    LOOP AT tl_xkonp ASSIGNING FIELD-SYMBOL(<fs_xkonp>).
      <fs_xkonp>-updkz = 'U'.
    ENDLOOP.

    LOOP AT tl_xkonh ASSIGNING <fs_xkonh>.
      APPEND INITIAL LINE TO tl_xkondat ASSIGNING FIELD-SYMBOL(<fs_xkondat>).
      <fs_xkondat>-knumh = <fs_xkonh>-knumh.
      <fs_xkondat>-datan = <fs_bapicondhd>-valid_from.
      READ TABLE tl_ykonh ASSIGNING <fs_ykonh> WITH KEY knumh = vl_knumh.
      IF sy-subrc = 0.
        <fs_xkondat>-datab = <fs_ykonh>-datab.
        <fs_xkondat>-datbi = <fs_ykonh>-datbi.
        <fs_xkondat>-kz    = <fs_ykonh>-updkz.
      ELSE.
        <fs_xkondat>-datab = <fs_xkonh>-datab.
        <fs_xkondat>-datbi = <fs_xkonh>-datbi.
        <fs_xkondat>-kz    = <fs_xkonh>-updkz.
      ENDIF.
    ENDLOOP.

    LOOP AT tl_ykonh ASSIGNING <fs_ykonh>.
      APPEND INITIAL LINE TO tl_ykondat ASSIGNING FIELD-SYMBOL(<fs_ykondat>).
      <fs_ykondat>-knumh = <fs_ykonh>-knumh.
      <fs_ykondat>-datan = <fs_ykonh>-datab.
      <fs_ykondat>-datab = <fs_ykonh>-datab.
      <fs_ykondat>-datbi = <fs_ykonh>-datbi.
      <fs_ykondat>-kz    = <fs_ykonh>-updkz.
    ENDLOOP.

    CALL FUNCTION 'SD_CONDITION_CHANGE_DOCS_WRITE'
      TABLES
        p_xkondat = tl_xkondat
        p_ykondat = tl_ykondat
        p_xkonh   = tl_xkonh
        p_ykonh   = tl_ykonh
        p_xkonp   = tl_xkonp
        p_ykonp   = tl_ykonp
        p_xkonm   = tl_xkonm
        p_xkonw   = tl_xkonw
        p_ykonm   = tl_ykonm
        p_ykonw   = tl_ykonw.
  ENDIF.


  IF vp_type = space.
    vp_type = 'S'.
    vp_message = 'Precio actualizado correctamente'.
    IF vp_commit IS NOT INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ENDIF.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

  ENDIF.
ENDFORM.
FORM f_validar_datos_comunes CHANGING wp_datos TYPE zssdd099_s_alv.
  " Validar cliente existe.
  IF wp_datos-msg_log IS INITIAL AND wp_datos-kunnr IS NOT INITIAL.
    SELECT SINGLE *
      FROM kna1
      INTO @DATA(wl_kna1)
      WHERE kunnr = @wp_datos-kunnr.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Cliente no existe.'.
    ENDIF.
  ENDIF.
  " Validar material existe.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM mara
      INTO @DATA(wl_mara)
      WHERE matnr = @wp_datos-matnr.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Material no existe.'.
    ENDIF.
  ENDIF.
  " Validar moneda existe.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM tcurc
      INTO @DATA(wl_tcurc)
      WHERE waers = @wp_datos-konwa.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Moneda no existe.'.
    ENDIF.
  ENDIF.

  " Validar importe > 0.
  IF wp_datos-msg_log IS INITIAL AND wp_datos-kbetr <= 0.
    wp_datos-msg_log = 'Importe debe ser mayor que cero.'.
  ENDIF.
  " Validar cantidad base > 0
  IF wp_datos-msg_log IS INITIAL AND wp_datos-kpein <= 0.
    wp_datos-msg_log = 'Cantidad base debe ser mayor que cero.'.
  ENDIF.
  " Validar unidad de medida base existe.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM t006
      INTO @DATA(wl_t006)
      WHERE msehi = @wp_datos-kmein.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Unidad de medida no existe.'.
    ENDIF.
  ENDIF.
ENDFORM.
FORM f_validar_datos_fechas CHANGING wp_datos TYPE zssdd099_s_alv.
  " Validar fecha inicio es válida.
  IF wp_datos-msg_log IS INITIAL.
    CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
      EXPORTING
        date                      = wp_datos-datab
      EXCEPTIONS
        plausibility_check_failed = 1
        OTHERS                    = 2.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Fecha inicio de validez incorrecta.'.
    ENDIF.
  ENDIF.
  " Validra fecha fin es válida.
  IF wp_datos-msg_log IS INITIAL.
    CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
      EXPORTING
        date                      = wp_datos-datbi
      EXCEPTIONS
        plausibility_check_failed = 1
        OTHERS                    = 2.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Fecha final de validad incorrecta.'.
    ENDIF.
  ENDIF.
  " Validar fecha inicio anterior o igual a fecha fin.
  IF wp_datos-msg_log IS INITIAL AND wp_datos-datab > wp_datos-datbi.
    wp_datos-msg_log = 'Fecha inicial de validez es posterior a fecha final.'.
  ENDIF.
ENDFORM.
FORM f_validar_datos_zprc CHANGING wp_datos TYPE zssdd099_s_alv.
  " Validar clase condicion e ZPRC
  IF wp_datos-msg_log IS INITIAL AND wp_datos-kschl <> 'ZPRC'.
    wp_datos-msg_log = 'Clase de condicion no válida. Distinta de ZPRC'.
  ENDIF.
  " Validar organización ventas - canal de distribución existe.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM tvkov
      INTO @DATA(wl_tvkov)
      WHERE vkorg = @wp_datos-vkorg AND
            vtweg = @wp_datos-vtweg.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Org. ventas - Canal de distribución no existe.'.
    ENDIF.
  ENDIF.
  PERFORM f_validar_datos_comunes CHANGING wp_datos.


  " Validar incoterm existe.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM tinc
      INTO @DATA(wl_tinc1)
      WHERE inco1 = @wp_datos-inco1.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Incoterm no existe.'.
    ENDIF.
  ENDIF.


  PERFORM f_validar_datos_fechas CHANGING wp_datos.

  IF wp_datos-msg_log IS NOT INITIAL.
    wp_datos-type = 'E'.
  ENDIF.

ENDFORM.
FORM f_validar_datos_zr01 CHANGING wp_datos TYPE zssdd099_s_alv.
  " Validar organización ventas - canal de distribución existe.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM tvko
      INTO @DATA(wl_tvko)
      WHERE vkorg = @wp_datos-vkorg.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Org. ventas no existe.'.
    ENDIF.
  ENDIF.
  PERFORM f_validar_datos_comunes CHANGING wp_datos.


  " Validar centro existe.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM t001w
      INTO @DATA(wl_t001w)
      WHERE werks = @wp_datos-werks.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Centro no existe.'.
    ENDIF.
  ENDIF.
  " Validar almacén existe.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM t001l
      INTO @DATA(wl_t001l)
      WHERE werks = @wp_datos-werks AND
            lgort = @wp_datos-lgort.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Almacén no existe en el centro.'.
    ENDIF.
  ENDIF.

  PERFORM f_validar_datos_fechas CHANGING wp_datos.

  IF wp_datos-msg_log IS NOT INITIAL.
    wp_datos-type = 'E'.
  ENDIF.
ENDFORM.
FORM f_validar_datos_ofertas CHANGING wp_datos TYPE zssdd099_s_alv.
  " Validar organización ventas - canal de distribución existe.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM tvkov
      INTO @DATA(wl_tvkov)
      WHERE vkorg = @wp_datos-vkorg AND
            vtweg = @wp_datos-vtweg.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Org. ventas - Canal de distribución no existe.'.
    ENDIF.
  ENDIF.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM kna1
      INTO @DATA(wl_kna1)
      WHERE kunnr = @wp_datos-kunwe.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Destinatario no existe.'.
    ENDIF.
  ENDIF.
  PERFORM f_validar_datos_comunes CHANGING wp_datos.


  " Validar centro existe.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM t001w
      INTO @DATA(wl_t001w)
      WHERE werks = @wp_datos-werks.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Centro no existe.'.
    ENDIF.
  ENDIF.
  " Validar almacén existe.
  IF wp_datos-msg_log IS INITIAL.
    SELECT SINGLE *
      FROM t001l
      INTO @DATA(wl_t001l)
      WHERE werks = @wp_datos-werks AND
            lgort = @wp_datos-lgort.
    IF sy-subrc <> 0.
      wp_datos-msg_log = 'Almacén no existe en el centro.'.
    ENDIF.
  ENDIF.

  PERFORM f_validar_datos_fechas CHANGING wp_datos.

  IF wp_datos-msg_log IS NOT INITIAL.
    wp_datos-type = 'E'.
  ENDIF.
ENDFORM.
MODULE c_ficha_active_tab_set OUTPUT.
  c_ficha-activetab = g_c_ficha-pressed_tab.
  CASE g_c_ficha-pressed_tab.
    WHEN c_c_ficha-tab1.
      g_c_ficha-subscreen = cg_dynpro_zprc.
    WHEN c_c_ficha-tab2.
      g_c_ficha-subscreen = cg_dynpro_zr01.
    WHEN c_c_ficha-tab3.
      g_c_ficha-subscreen = cg_dynpro_ofertas.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

MODULE c_ficha_active_tab_get INPUT.
  okcode = sy-ucomm.
  CASE okcode.
    WHEN c_c_ficha-tab1.
      g_c_ficha-pressed_tab = c_c_ficha-tab1.
    WHEN c_c_ficha-tab2.
      g_c_ficha-pressed_tab = c_c_ficha-tab2.
    WHEN c_c_ficha-tab3.
      g_c_ficha-pressed_tab = c_c_ficha-tab3.
    WHEN OTHERS.
  ENDCASE.


ENDMODULE.
**&---------------------------------------------------------------------*
**&      Form  f_handle_toolbar
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_OBJECT       text
**      -->P_INTERACTIVE  text
**----------------------------------------------------------------------*
FORM f_handle_toolbar USING vp_dynpro rp_object TYPE REF TO cl_alv_event_toolbar_set  p_interactive.
  DATA: wl_toolbar  TYPE stb_button,
        vl_function LIKE wl_toolbar-function.

  CASE vp_dynpro.
    WHEN cg_dynpro_zprc.

      "Separador
      CLEAR wl_toolbar.
      wl_toolbar-butn_type = 3.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      CLEAR wl_toolbar.
      wl_toolbar-function   = cg_boton_escalas.
      wl_toolbar-quickinfo = 'Escalas'(001).
      wl_toolbar-text       = 'Escalas'(001).
      wl_toolbar-disabled   = ' '.
      wl_toolbar-icon = icon_graduate.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

    WHEN OTHERS.
  ENDCASE.
ENDFORM.                    "f_handle_toolbar
*&---------------------------------------------------------------------*
*&      Form  f_handle_user_command
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->E_UCOMM    text
*----------------------------------------------------------------------*
FORM f_handle_user_command USING e_ucomm.
  DATA: vl_error      TYPE xfeld,
        vl_num_lineas TYPE i.
  DATA: tl_index_rows TYPE lvc_t_row,
        wl_index_rows LIKE LINE OF tl_index_rows.



  CASE e_ucomm.
    WHEN cg_boton_escalas.

      READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = cg_dynpro_zprc.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES vl_num_lineas.
      IF vl_num_lineas <> 1.
******        MESSAGE s285 DISPLAY LIKE 'I'.
        MESSAGE 'Debe seleccionar al menos una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv>) INDEX wl_index_rows-index.

      IF <fs_alv>-escalas IS INITIAL.
        MESSAGE 'Debe seleccionar una fila con escalas' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.

      ENDIF.

      DATA: fs_layo TYPE lvc_s_layo,
            t_fcat  TYPE lvc_t_fcat,
            t_sort  TYPE lvc_t_sort,
            t_event TYPE slis_t_event,
            t_cross TYPE zssdd099_t_escalas.

**      PERFORM f_crear_catalogo TABLES t_fcat USING '9999'.

      CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
        EXPORTING
          i_structure_name       = 'ZSSDD099_S_ESCALAS'
          i_bypassing_buffer     = 'X'
        CHANGING
          ct_fieldcat            = t_fcat[]
        EXCEPTIONS
          inconsistent_interface = 1
          program_error          = 2
          OTHERS                 = 3.


      "t_cross = it_alv.
      t_cross = <fs_alv>-datos_escalas.

      CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
        EXPORTING
*         I_INTERFACE_CHECK     = ' '
*         I_BYPASSING_BUFFER    =
*         I_BUFFER_ACTIVE       =
          i_callback_program    = sy-cprog
*         I_CALLBACK_PF_STATUS_SET          = ' '
*         i_callback_user_command = 'USER_COMMAND_POPUP'
*         I_CALLBACK_TOP_OF_PAGE  = ' '
*         I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*         I_CALLBACK_HTML_END_OF_LIST       = ' '
*         I_STRUCTURE_NAME      =
*         I_BACKGROUND_ID       = ' '
*         I_GRID_TITLE          =
*         I_GRID_SETTINGS       =
          is_layout_lvc         = fs_layo
          it_fieldcat_lvc       = t_fcat
*         IT_EXCLUDING          =
*         IT_SPECIAL_GROUPS_LVC =
          it_sort_lvc           = t_sort
*         IT_FILTER_LVC         =
*         IT_HYPERLINK          =
*         IS_SEL_HIDE           =
*         I_DEFAULT             = 'X'
*         I_SAVE                = ' '
*         IS_VARIANT            =
          it_events             = t_event
*         IT_EVENT_EXIT         =
*         IS_PRINT_LVC          =
*         IS_REPREP_ID_LVC      =
          i_screen_start_column = 10
          i_screen_start_line   = 5
          i_screen_end_column   = 80
          i_screen_end_line     = 20
*         IT_EXCEPT_QINFO_LVC   =
*         I_HTML_HEIGHT_TOP     =
*         I_HTML_HEIGHT_END     =
* IMPORTING
*         E_EXIT_CAUSED_BY_CALLER =
*         ES_EXIT_CAUSED_BY_USER  =
        TABLES
          t_outtab              = t_cross
        EXCEPTIONS
          program_error         = 1
          OTHERS                = 2.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  user_command_popup
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->R_UCOMM      text
*      -->RS_SELFIELD  text
*----------------------------------------------------------------------*
FORM user_command_popup USING r_ucomm LIKE sy-ucomm
                              rs_selfield TYPE slis_selfield.

  CASE r_ucomm.
    WHEN '&ONT'.
      DATA: gd_repid LIKE sy-repid, "Exists
            ref_grid TYPE REF TO cl_gui_alv_grid.
      IF ref_grid IS INITIAL.
        CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
          IMPORTING
            e_grid = ref_grid.
      ENDIF.
      IF NOT ref_grid IS INITIAL.
        CALL METHOD ref_grid->check_changed_data .
      ENDIF.
  ENDCASE.


*(SAPLSLVC_FULLSCREEN)GT_GRID-GRID
ENDFORM.                    "USER_COMMAND
