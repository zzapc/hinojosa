*&---------------------------------------------------------------------*
*& Report  ZSSD_IF_OMP_TR_SEND
*&
*&---------------------------------------------------------------------*
*&
*& Inteface OMP - Transporte.
*& Transport Requeriments
*&
*& Envio mensajes.
*&
*& R.Malea. 13.05.2024
*&
*&---------------------------------------------------------------------*
REPORT zssd_if_omp_tr_send.

TABLES: zssd_if_omp_tr_p.

SELECT-OPTIONS: s_nenv FOR zssd_if_omp_tr_p-num_envio.
*PARAMETERS: p_minu TYPE int1.

*-----------------------------------------------------------------------
* INITIALIZATION.
*-----------------------------------------------------------------------
INITIALIZATION.

*-----------------------------------------------------------------------
* START-OF-SELECTION.
*-----------------------------------------------------------------------
START-OF-SELECTION.
  DATA: vl_hora_sel       TYPE erzet,
        vl_esperar        TYPE xflag,
        vl_enviado        TYPE xflag,
        vl_procesado      TYPE xflag,
        tl_zssd_if_omp_tr TYPE TABLE OF zssd_if_omp_tr_p.



  DO.
    "
    " Selección de los mensajes.
    "
    CLEAR tl_zssd_if_omp_tr.
    SELECT *
      FROM zssd_if_omp_tr_p
      INTO CORRESPONDING FIELDS OF TABLE tl_zssd_if_omp_tr
      WHERE num_envio IN s_nenv AND
            procesado = ''.

    DATA(vl_lineas) = lines( tl_zssd_if_omp_tr ).
    IF vl_lineas = 0.
      EXIT.
    ENDIF.

*    vl_hora_sel = sy-uzeit - ( 60 * p_minu ). " Quitamos 5 minutos.

    "
    " Primero SO
    "

    vl_esperar = 'X'.
    LOOP AT tl_zssd_if_omp_tr ASSIGNING FIELD-SYMBOL(<fs_zssd_if_omp_tr>).

*      IF <fs_zssd_if_omp_tr>-erdat < sy-datum OR
*         ( <fs_zssd_if_omp_tr>-erdat = sy-datum AND
*           <fs_zssd_if_omp_tr>-erzet <= vl_hora_sel ).
      IF <fs_zssd_if_omp_tr>-vbeln IS NOT INITIAL.
        IF vl_esperar IS NOT INITIAL.
          CLEAR vl_esperar.
****          WAIT UP TO 30 SECONDS.
        ENDIF.

        CALL FUNCTION 'ZSD_IF_OMP_TRANS_REQ_VBEP'
          EXPORTING
            vp_accion    = <fs_zssd_if_omp_tr>-accion
            vp_vbeln     = <fs_zssd_if_omp_tr>-vbeln
            vp_posnr     = <fs_zssd_if_omp_tr>-posnr
            vp_etenr     = <fs_zssd_if_omp_tr>-etenr
          IMPORTING
            vp_enviado   = vl_enviado
            vp_procesado = vl_procesado.

        IF vl_procesado IS NOT INITIAL.
          <fs_zssd_if_omp_tr>-procesado = 'X'.
        ENDIF.

        IF vl_enviado IS NOT INITIAL.
          <fs_zssd_if_omp_tr>-enviado = 'X'.
        ENDIF.

        MODIFY zssd_if_omp_tr_p FROM <fs_zssd_if_omp_tr>.
        CALL FUNCTION 'DB_COMMIT'.
        CALL FUNCTION 'DEQUEUE_ALL'.
        COMMIT WORK AND WAIT.
      ENDIF.
*      ENDIF.

    ENDLOOP.

    "
    " Luego STO
    "
    vl_esperar = 'X'.
    LOOP AT tl_zssd_if_omp_tr ASSIGNING <fs_zssd_if_omp_tr>.
      IF <fs_zssd_if_omp_tr>-ebeln IS NOT INITIAL.
        IF vl_esperar IS NOT INITIAL.
          CLEAR vl_esperar.
****          WAIT UP TO 60 SECONDS.
        ENDIF.

        CALL FUNCTION 'ZSD_IF_OMP_TRANS_REQ_EKET_PRE'
*          IN UPDATE TASK
          EXPORTING
            vp_accion  = <fs_zssd_if_omp_tr>-accion
            vp_ebeln   = <fs_zssd_if_omp_tr>-ebeln
            vp_ebelp   = <fs_zssd_if_omp_tr>-ebelp
            vp_etenr   = <fs_zssd_if_omp_tr>-etenr
          IMPORTING
            vp_enviado = vl_enviado.

        <fs_zssd_if_omp_tr>-procesado = 'X'.

        IF vl_enviado IS NOT INITIAL.
          <fs_zssd_if_omp_tr>-enviado = 'X'.
        ENDIF.

        MODIFY zssd_if_omp_tr_p FROM <fs_zssd_if_omp_tr>.
        CALL FUNCTION 'DB_COMMIT'.
        CALL FUNCTION 'DEQUEUE_ALL'.
        COMMIT WORK AND WAIT.

      ENDIF.
    ENDLOOP.


*    MODIFY zssd_if_omp_tr_p FROM TABLE tl_zssd_if_omp_tr.
*    CALL FUNCTION 'DB_COMMIT'.
*    CALL FUNCTION 'DEQUEUE_ALL'.
*    COMMIT WORK AND WAIT.



  ENDDO. " Volvemos a comprovar si hay algo pdte.

  MESSAGE 'Proceso terminado correctamente' TYPE 'I'.
