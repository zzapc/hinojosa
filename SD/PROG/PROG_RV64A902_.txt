FORM FRM_KONDI_WERT_902.
*{   INSERT         HEDK918355                                        1
*
  FIELD-SYMBOLS: <vbap> TYPE vbap,
                 <xvbap> TYPE VBAPVB.

  DATA: l_TD010 TYPE yhp_idx_td010,
        l_TD310 TYPE yhp_idx_td310,
        t_TD310 TYPE TABLE OF yhp_idx_td310,
        t_TD010 TYPE TABLE OF yhp_idx_td010,
        l_coef TYPE kwert,
        l_cost_prod TYPE kwert,
        l_1 TYPE kwert,
        l_c TYPE kwert,
        l_cost_total TYPE kwert,
        l_1000 TYPE kwert,
        l_otro_coste TYPE kwert.

  DATA: l_values TYPE YHP_IDX_S_BOX_VE,
        l_object_key TYPE CUIB_OBJKEY,
        t_rte TYPE YHP_OMP_TT_RTE.

  ASSIGN ('(SAPMV45A)VBAP') TO <vbap>.
  ASSIGN ('(SAPMV45A)XVBAP') TO <xvbap>.


*  CHECK <vbap> IS ASSIGNED.

  "PaFi AICOMP 03.05.22 optimize performance
*  l_object_key = komk-belnr && komp-kposn.
*
*  SELECT SINGLE * into l_td010 from yhp_idx_td010
*    WHERE object_key = l_object_key.
*
*  IF sy-subrc = 0.
*
*  select * into corresponding fields of table t_TD310
*     from YHP_IDX_TD310
*     where CUOBJ = l_td010-cuobj.
*  ENDIF.
*
*  DATA: l_val type TABLE OF ZSSDT031_PR_CON.
*
**  Si no encontramos registros buscamos en el Buffer
*  If t_rte is INITIAL.
*
*    CALL FUNCTION 'ZSBC000_GET_MODELO'
*      EXPORTING
*        i_cuobj  = l_td010-cuobj    " Configuración (número de objeto interno)
*      IMPORTING
*        e_values = l_values.
*      .
*    t_rte = CORRESPONDING #( l_values-t_rte ).
*  ENDIF.
  DATA: l_val TYPE TABLE OF ZSSDT031_PR_CON.
    DATA: lr_cnfidx TYPE REF TO YCL_HP_IDX.

    TRY.
      if komp-yy_main_cuobj is not initial. "JBL 3/11/2023 OPHJVC-473
      LR_CNFIDX ?= YCL_HP_IDX=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( komp-yy_main_cuobj ) ).  "in case of Multi Qty item, use CUOBJ of main item
      endif.
      IF lr_cnfidx IS BOUND.

        LR_CNFIDX->GET_DATA(
        IMPORTING
          ET_SPEC_DB  = DATA(tv_spec)     " HP: IndexDB - Specification - DB
          ET_LINK_DB  = DATA(tv_link)    " HP: IndexDB - Component Link - DB
          ET_BOARD_DB = DATA(tv_board)     " HP: IndexDB - Board - DB
          ET_PAPER_DB = DATA(tv_paper)    " HP: IndexDB - Paper - DB
          ET_PRINT_DB = DATA(tv_print)    " HP: IndexDB - Printing- DB
          ET_INKS_DB  = DATA(tv_inks)    " HP: IndexDB - Inks - DB
          ET_SCORE_DB = DATA(tv_score)    " HP: IndexDB - Scores - DB
          ET_SHIP_DB  = data(tv_ship)    " HP: IndexDB - Shipping and Unitizing - DB
          ET_SHIPU_DB = data(tv_shipu)    " HP: IndexDB - Shipping Units - DB
        ET_RTE_DB   = DATA(lt_rte_db)    " HP: IndexDB - Routing - DB
          ET_MATNR_DB = data(tv_matnr)    " HP: Index DB - Material Number
              ).

        t_rte = CORRESPONDING #( lt_rte_db ).
      ENDIF.
    CATCH /vcxi/cx_ckx.
    ENDTRY.
    "End PaFi 03.05.22

   CHECK t_rte IS NOT INITIAL.

  DATA LV_BRSCH TYPE BRSCH.
  DATA LV_PRTYP TYPE ZVCXI_P0S_PRTYP.

*    SELECT SINGLE BRSCH FROM kna1 INTO LV_BRSCH
*      WHERE kunnr = komk-kunnr.

    SELECT SINGLE ZZBRSCH FROM KNVV INTO LV_BRSCH
      WHERE kunnr = komk-kunnr
      AND vkorg = komk-vkorg
      AND vtweg = komk-vtweg
      AND spart = komk-spart.

      IF sy-subrc = 0.
      " delete l_val WHERE NOT brsch = LV_BRSCH.
      ENDIF.

    TRY .

    LV_PRTYP = tv_print[ 1 ]-prtyp.

    IF NOT LV_PRTYP IS INITIAL AND NOT LV_BRSCH IS INITIAL.

        delete l_val WHERE NOT prtyp = LV_PRTYP.

        SELECT * INTO TABLE l_val FROM ZSSDT031_PR_CON
        FOR ALL ENTRIES IN t_rte
        WHERE vkorg = komk-vkorg
        AND vtweg = komk-vtweg
        AND spart = komk-spart
        AND werks = komk-werks
        AND arbpl = t_rte-arbpl
        AND margen > 0
        AND BRSCH = LV_BRSCH
        AND PRTYP = LV_PRTYP.

        IF SY-SUBRC NE 0.

        SELECT * INTO TABLE l_val FROM ZSSDT031_PR_CON
*        FOR ALL ENTRIES IN t_rte
        WHERE vkorg = komk-vkorg
        AND vtweg = komk-vtweg
        AND spart = komk-spart
        AND werks = komk-werks
        AND arbpl = ''
        AND margen > 0
        AND BRSCH = LV_BRSCH
        AND PRTYP = LV_PRTYP.

        IF SY-SUBRC NE 0.

  DATA vl_wers TYPE werks_d.

* >> MVR - 28.09.22 - GAPSD054_RELOCATED
      "Accedemos a la MARC para ver cual es el centro que tiene configuración

        select single werks into vl_wers
        from marc
        where matnr = komp-matnr
        and cuobj ne space.

          IF SY-SUBRC NE 0.

          SELECT * INTO TABLE l_val FROM ZSSDT031_PR_CON
          FOR ALL ENTRIES IN t_rte
          WHERE vkorg = komk-vkorg
          AND vtweg = komk-vtweg
          AND spart = komk-spart
          AND werks = vl_wers
          AND arbpl = t_rte-arbpl
          AND margen > 0
          AND BRSCH = LV_BRSCH
          AND PRTYP = LV_PRTYP.

          IF SY-SUBRC NE 0.

          SELECT * INTO TABLE l_val FROM ZSSDT031_PR_CON
*          FOR ALL ENTRIES IN t_rte
          WHERE vkorg = komk-vkorg
          AND vtweg = komk-vtweg
          AND spart = komk-spart
          AND werks = vl_wers
          AND arbpl = ''
          AND margen > 0
          AND BRSCH = LV_BRSCH
          AND PRTYP = LV_PRTYP.

          ENDIF.

          ENDIF.

        ENDIF.

* << MVR - 28.09.22

        ENDIF.

    ENDIF.
    CATCH CX_SY_ITAB_LINE_NOT_FOUND.

    ENDTRY.

*    CATCH CX_SY_ITAB_LINE_NOT_FOUND INTO DATA(vv_error_prtyp).

    IF l_val IS INITIAL.

    SELECT * INTO TABLE l_val FROM ZSSDT031_PR_CON
    FOR ALL ENTRIES IN t_rte
    WHERE vkorg = komk-vkorg
    AND vtweg = komk-vtweg
    AND spart = komk-spart
    AND werks = komk-werks
    AND arbpl = t_rte-arbpl
    AND margen > 0.

* >> MVR - 28.09.22 - GAPSD054_RELOCATED

      IF sy-subrc ne 0.

        "Accedemos a la MARC para ver cual es el centro que tiene configuración
        data lv_werks type WERKS_D.

        select single werks into lv_werks
          from marc
          where matnr = komp-matnr
            and cuobj ne space.

        CHECK lv_werks is not INITIAL.

        SELECT * INTO TABLE l_val FROM ZSSDT031_PR_CON
          FOR ALL ENTRIES IN t_rte
          WHERE vkorg = komk-vkorg
          AND vtweg = komk-vtweg
          AND spart = komk-spart
          AND werks = lv_werks
          AND arbpl = t_rte-arbpl
          AND margen > 0.

      ENDIF.

    ENDIF.

*    CATCH CX_SY_ITAB_LINE_NOT_FOUND INTO DATA(vv_error_prtyp).

*    ENDTRY.

    " SARCE 28.08.2023 14:28:28 Margen de contribución INICIO

*    SELECT SINGLE YHP~prtyp FROM YHP_IDX_TD130 as yhp INNER JOIN marc as marc
*      on yhp~cuobj = marc~cuobj INTO LV_PRTYP
*      WHERE marc~matnr = komp-matnr
*      AND marc~werks = komp-werks.
*      IF sy-subrc = 0.
*
*        delete l_val WHERE NOT prtyp = LV_PRTYP.
*
*        SELECT * INTO TABLE l_val FROM ZSSDT031_PR_CON
*        FOR ALL ENTRIES IN t_rte
*        WHERE vkorg = komk-vkorg
*        AND vtweg = komk-vtweg
*        AND spart = komk-spart
*        AND werks = lv_werks
*        AND arbpl = t_rte-arbpl
*        AND margen > 0
*        AND BRSCH = LV_BRSCH
*        AND PRTYP = LV_PRTYP.

*      ENDIF.

" SARCE 28.08.2023 14:28:28 Margen de contribución FIN

    CHECK l_val IS NOT INITIAL.

*La rutina deberá realizar el siguiente cálculo:
*
*(Sumatorio de costes de producción + Sumatorio de otros costes) / (1- Valor del coeficiente)
*Donde el sumatorio de costes de producción = Subtotal linea 931.
*Donde el sumatorio de otros costes = Sería el Sumatorio de:
*DESCUENTOS
*O bien Subtotal línea 45 (Valor absoluto) + Subtotal línea 65 (Valor absoluto).
*O bien Descuento línea 150.
*RAPPEL sería el Subtotal línea 700.
*COMISIONES sería el Subtotal 750.


************************************************************************************
*Subtotal 45 si existe alguna de las condiciones:       Condición ZD01 Nivel 30               Condición ZD02 Nivel 40
*
*Subtotal 65 si existe alguna de las condiciones:Condición ZD03 Nivel 50 Condición ZD04 Nivel 60
*
*Subtotal 700 si existe alguna de las condiciones:Condición ZA00 Nivel 650 Condición ZA01 Nivel 660
*
*Subtotal 750 si existe alguna de las condiciones:Condición ZCP0 Nivel 725 Condición ZCP1 Nivel 730Condición ZCP2 Nivel 735 Condición ZCP3 Nivel 740

************************************************************************************

    SORT l_val BY margen DESCENDING.
    read table l_val into data(la_val) index 1.
    l_coef = la_val-margen.

*    LOOP AT l_val INTO DATA(la_val) WHERE margen > 0.
*      l_coef = la_val-margen.
*      EXIT.
*    ENDLOOP.


    CALL FUNCTION 'ZSSD000_VALOR_902'
    EXPORTING
      i_xkomv  = xkomv[]    " WCB: Tabla por komv_index
    IMPORTING
      e_xkwert = l_cost_total.


    ADD 100 TO l_1.

    l_c = l_coef.

    l_1 = l_1 - l_c.


    TRY.
      xkwert = ( l_cost_total / l_1 ) * 100.
    CATCH cx_root INTO DATA(l_exc).
      xkwert = 0.
    ENDTRY.

    CHECK komp-mgame > 0.

    TRY.
      l_1000 = ( xkwert * 1000 ) * 1000 / komp-mgame.
*    ykbetr = xkomv-kbetr = l_1000.
      xkomv-kbetr = l_1000.
    CATCH cx_root.
      clear xkomv-kbetr.
    ENDTRY.

  if KOMP-PSTYV <> 'ZTUS'.
  ykpein = xkomv-kpein = 1000.

  ENDIF.


*}   INSERT
ENDFORM.
