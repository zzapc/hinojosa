*&---------------------------------------------------------------------*
*&  Include           ZRSDCOM_INF002_FORMS
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  CARGAR_OBJETOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM cargar_objetos .

* Creamos el container principal
  CREATE OBJECT g_custom_container
    EXPORTING
      container_name = gc_container.

* Creamos el splitter dentro del container con 2 filas
  CREATE OBJECT g_splitter
    EXPORTING
      parent  = g_custom_container
      rows    = 2
      columns = 1.

* Sacamos el contenedor de arriba (cabecera HTML)
  CALL METHOD g_splitter->get_container
    EXPORTING
      row       = 1
      column    = 1
    RECEIVING
      container = g_container_1.

* Sacamos el contenedor de abajo (para el ALV)
  CALL METHOD g_splitter->get_container
    EXPORTING
      row       = 2
      column    = 1
    RECEIVING
      container = g_container_2.

* Creamos el objeto de los textos de la cabecera
  CREATE OBJECT g_dd_doc
    EXPORTING
      style = 'ALV_GRID'.

* Dependiendo del tipo de listado, cargamos el GRID o el TREE
  IF p_alv = 'X'.
    CREATE OBJECT g_grid
      EXPORTING
        i_parent = g_container_2.
  ELSE.
    CREATE OBJECT g_tree
      EXPORTING
        parent              = g_container_2
        node_selection_mode = cl_gui_column_tree=>node_sel_mode_multiple
        item_selection      = 'X'
        no_html_header      = 'X'
        no_toolbar          = ''.
  ENDIF.

* Ajustamos la altura del splitter
  CALL METHOD g_splitter->set_row_height
    EXPORTING
      id     = 1
      height = 20.

****   Para los eventos
***    CREATE OBJECT g_application.
***    SET HANDLER g_application->handle_data_changed          FOR g_grid.
***    SET HANDLER g_application->handle_data_changed_finished FOR g_grid.
***
****   Cuando es editable -> para que escuche los eventos: ENTER...
***    CALL METHOD g_grid->register_edit_event
***      EXPORTING
***        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

ENDFORM.                    " CARGAR_OBJETOS


*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_HTML_HEADER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_html_header .

  DATA: l_doctable    TYPE REF TO cl_dd_table_element,
        l_col_pic     TYPE REF TO cl_dd_area,
        l_col_tit     TYPE REF TO cl_dd_area,
        l_col_info    TYPE REF TO cl_dd_area.

  DATA: lv_logo       TYPE sdydo_key VALUE 'ZBUKRS_XXXX_ALV',
        lv_text       TYPE sdydo_text_element.

* Creamos una tabla con 3 columnas
  CALL METHOD g_dd_doc->add_table
    EXPORTING
      no_of_columns = 3
      border        = '0'
      width         = '100%'
    IMPORTING
      table         = l_doctable.

* Columna del logo
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '15%'
    IMPORTING
      column = l_col_pic.

* Columna de títulos
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '10%'
    IMPORTING
      column = l_col_tit.

* Columna de valores (información)
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '75%'
    IMPORTING
      column = l_col_info.

* Ponemos el logo
  REPLACE 'XXXX' IN lv_logo WITH p_bukrs.
  CALL METHOD l_col_pic->add_picture
    EXPORTING
      picture_id = lv_logo.

* Ponemos el título de la sociedad
  CALL METHOD l_col_tit->add_text
    EXPORTING
      text         = text-c01
      sap_color    = cl_dd_area=>list_heading
      sap_fontsize = cl_dd_area=>large.

* Ponemos la fecha
  SELECT SINGLE butxt INTO lv_text
      FROM  t001
      WHERE bukrs = p_bukrs.
  CALL METHOD l_col_info->add_text
    EXPORTING
      text         = lv_text
      sap_fontsize = cl_dd_document=>large.

* Creamos el objeto HTML en el container de arriba
  CREATE OBJECT g_html
    EXPORTING
      parent = g_container_1.

* Cargamos los textos en el visor HTML
  g_dd_doc->html_control = g_html.

* Visualizamos los textos
  CALL METHOD g_dd_doc->merge_document.
  CALL METHOD g_dd_doc->display_document
    EXPORTING
      reuse_control = 'X'
      parent        = g_container_1.

ENDFORM.                    " MOSTRAR_HTML_HEADER


*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_alv .

  DATA: lti_fieldcat TYPE lvc_t_fcat,
        lti_exctool  TYPE ui_functions.
  DATA: ls_layout    TYPE lvc_s_layo,
        ls_variant   TYPE disvariant.
  DATA: lv_repid     TYPE syrepid.

* Variante
  lv_repid          = sy-repid.
  ls_variant-report = lv_repid.
  ls_variant-handle = 'GRID'.

* Preparamos el catálogo de campos
  PERFORM prepare_fielcat CHANGING lti_fieldcat.

* Layout
  ls_layout-cwidth_opt = 'X'.

* Mostramos el ALV
  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_buffer_active      = ' '
      i_bypassing_buffer   = 'X'
      is_layout            = ls_layout
      is_variant           = ls_variant
      i_save               = 'A'
      it_toolbar_excluding = lti_exctool
    CHANGING
      it_outtab            = gti_grid
      it_fieldcatalog      = lti_fieldcat.

* Volvemos a ajustar el ancho de las columnas
  PERFORM refrescar_alv .

ENDFORM.                    " MOSTRAR_ALV


*&---------------------------------------------------------------------*
*&      Form  PREPARE_FIELCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--CTI_FIELDCAT  text
*----------------------------------------------------------------------*
FORM prepare_fielcat  CHANGING cti_fieldcat TYPE lvc_t_fcat.

  DATA: ls_fcat   TYPE lvc_s_fcat.
  DATA: lv_ind    TYPE i.

* Recuperamos el catálogo de campos
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZRSDCOM_INF002_GRID'
    CHANGING
      ct_fieldcat      = cti_fieldcat.

* Recorremos el catálogo de campos modificandolo
  LOOP AT cti_fieldcat INTO ls_fcat.
    lv_ind = sy-tabix.
*   Dependiendo del campo ponemos unas propiedades u otras
    CASE ls_fcat-fieldname.
*     Campos clave
      WHEN 'LAUFD' OR 'LAUFI' OR 'BUKRS' OR 'VTEXT' OR
           'ZSTAT_LIQ' OR 'LIFNR'.
        ls_fcat-key = 'X'.
    ENDCASE.
    MODIFY cti_fieldcat FROM ls_fcat INDEX lv_ind.
  ENDLOOP.

ENDFORM.                    " PREPARE_FIELCAT


*&---------------------------------------------------------------------*
*&      Form  REFRESCAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refrescar_alv .

  DATA: ls_layout TYPE lvc_s_layo,
        ls_stable TYPE lvc_s_stbl.

* Cuando estamos en modo ALV
  IF p_alv = 'X'.
*   Sacamos el layout del ALV
    CALL METHOD g_grid->get_frontend_layout
      IMPORTING
        es_layout = ls_layout.

*   Ponemos de nuevo que optimice las columnas
    ls_layout-cwidth_opt = 'X'.

*   Cargamos de nuevo el layout
    CALL METHOD g_grid->set_frontend_layout
      EXPORTING
        is_layout = ls_layout.

*   Refrescamos el ALV
    ls_stable-row = 'X'.
    ls_stable-col = 'X'.
    CALL METHOD g_grid->refresh_table_display
      EXPORTING
        is_stable = ls_stable.
  ENDIF.

ENDFORM.                    " REFRESCAR_ALV


*&---------------------------------------------------------------------*
*&      Form  SACAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sacar_datos .

  DATA: lr_check      TYPE RANGE OF flag,
        ls_check      LIKE LINE OF lr_check.

  DATA: ls_dato       TYPE zrsdcom_inf002_grid,
        ls_exch_rate  TYPE bapi1093_0.

  DATA: lv_ind        TYPE i,
        lv_waers      TYPE waers.


* Inicializamos
  REFRESH gti_datos.

* Rango para el CHECKBOX de la posición
  IF p_check = 'X'.
    ls_check-sign   = 'I'.
    ls_check-option = 'EQ'.
    ls_check-low    = 'X'.
    APPEND ls_check TO lr_check.
  ENDIF.
  IF p_unchk = 'X'.
    ls_check-sign   = 'I'.
    ls_check-option = 'EQ'.
    ls_check-low    = ' '.
    APPEND ls_check TO lr_check.
  ENDIF.

* Moneda de la sociedad
  SELECT SINGLE waers INTO lv_waers
      FROM  t001
      WHERE bukrs = p_bukrs.

* Sacamos todos los datos de las provisiones
  SELECT * INTO CORRESPONDING FIELDS OF TABLE gti_datos
      FROM ztsdcom_prliqcab AS a INNER JOIN ztsdcom_prliqpos AS b
                            ON a~laufd = b~laufd AND
                               a~laufi = b~laufi AND
                               a~bukrs = b~bukrs
      WHERE a~laufd     IN so_laufd
      AND   a~laufi     IN so_laufi
      AND   a~bukrs      = p_bukrs
      AND   a~erdat     IN so_erdat
      AND   a~zstat_liq IN so_stat
      AND   b~lifnr     IN so_lifnr
      AND   b~vbeln     IN so_vbeln
*{   INSERT         HEDK928333                                        1
      and   b~gsber     in so_gsber
*}   INSERT
      AND   b~checkbox  IN lr_check.

* Recorremos los datos sacando los que faltan
  LOOP AT gti_datos INTO ls_dato.
    lv_ind = sy-tabix.
*   Nombre del comisionista
    SELECT SINGLE name1 INTO ls_dato-name1_com
        FROM  lfa1
        WHERE lifnr = ls_dato-lifnr.
*   Nombre del cliente
    SELECT SINGLE name1 INTO ls_dato-name1_cli
        FROM  kna1
        WHERE kunnr = ls_dato-kunnr.
*   Fecha factura
    SELECT SINGLE fkdat INTO ls_dato-fkdat
        FROM  vbrk
        WHERE vbeln = ls_dato-vbeln.
*   Moneda de la sociedad
    ls_dato-waers = lv_waers.

*   Tipo de cambio e importe en moneda de la sociedad
    ls_dato-kursf = 1.
    ls_dato-dmbtr = ls_dato-zimp_liq.
    IF ls_dato-waerk <> ls_dato-waers.
*     Sacamos el tipo de cambio
      CALL FUNCTION 'BAPI_EXCHANGERATE_GETDETAIL'
        EXPORTING
          rate_type  = 'EURX'
          from_curr  = ls_dato-waerk
          to_currncy = lv_waers
          date       = ls_dato-fkdat
        IMPORTING
          exch_rate  = ls_exch_rate.

*     Cargamos el tipo de cambio
      ls_dato-kursf = ls_exch_rate-exch_rate_v.

*     Realizamos la conversión del total + impuestos a moneda local
      CALL FUNCTION 'CONVERT_CURRENCY_BY_RATE'
        EXPORTING
          from_amount   = ls_dato-dmbtr
          from_currency = ls_dato-waerk
          from_factor   = ls_exch_rate-from_factor
          rate          = ls_exch_rate-exch_rate_v
          to_currency   = lv_waers
          to_factor     = ls_exch_rate-to_factor
        IMPORTING
          to_amount     = ls_dato-dmbtr
        EXCEPTIONS
          no_rate_found = 1
          OTHERS        = 2.
    ENDIF.

*   Modificamos la línea
    MODIFY gti_datos FROM ls_dato INDEX lv_ind.
  ENDLOOP.

ENDFORM.                    " SACAR_DATOS


*&---------------------------------------------------------------------*
*&      Form  CARGAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM cargar_alv .

* Inicializamos la tabla del ALV
  REFRESH gti_grid.

* Cargamos la tabla del ALV
  gti_grid[] = gti_datos[].

ENDFORM.                    " CARGAR_ALV


*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_TREE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_tree .

  DATA: ls_header    TYPE treev_hhdr,
        ls_variant   TYPE disvariant.

  DATA: lv_repid     TYPE syrepid.

* Variante
  lv_repid          = sy-repid.
  ls_variant-report = lv_repid.
  ls_variant-handle = 'TREE'.

* Creamos la cabecera del TREE
  PERFORM build_hierarchy_header CHANGING ls_header.

* Mostramos el TREE
  CALL METHOD g_tree->set_table_for_first_display
    EXPORTING
      i_structure_name    = 'ZRSDCOM_INF002_GRID'
      is_variant          = ls_variant
      i_save              = 'A'
      is_hierarchy_header = ls_header
    CHANGING
      it_outtab           = gti_tree.

ENDFORM.                    " MOSTRAR_TREE


*&---------------------------------------------------------------------*
*&      Form  build_hierarchy_header
*&---------------------------------------------------------------------*
*       build hierarchy-header-information
*----------------------------------------------------------------------*
*      -->PS_HEADER  strucxture for hierarchy-header
*----------------------------------------------------------------------*
FORM build_hierarchy_header CHANGING ps_header TYPE treev_hhdr.

  ps_header-heading = 'Liqu./Comis./Factura'(100).
  ps_header-tooltip = 'Liqu./Comis./Factura'(100).
  ps_header-width = 50.
  ps_header-width_pix = ' '.

ENDFORM.                               " build_hierarchy_header


*&---------------------------------------------------------------------*
*&      Form  CONSTRUIR_TREE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM construir_tree .

  DATA: lti_liq     TYPE TABLE OF ty_liq,
        lti_comis   TYPE TABLE OF ty_comis.

  DATA: ls_liq      TYPE ty_liq,
        ls_comis    TYPE ty_comis,
        ls_dato     TYPE zrsdcom_inf002_grid.

  DATA: lv_liqkey   TYPE lvc_nkey,
        lv_comkey   TYPE lvc_nkey,
        lv_ind      TYPE i.

* Sacamos una tabla con todas las liquidaciones diferentes y otra con comisionistas
  LOOP AT gti_datos INTO ls_dato.
*   Liquidaciones
    CLEAR ls_liq.
    MOVE-CORRESPONDING ls_dato TO ls_liq.
    COLLECT ls_liq INTO lti_liq.
*   Comisionistas
    CLEAR ls_comis.
    MOVE-CORRESPONDING ls_dato TO ls_comis.
    COLLECT ls_comis INTO lti_comis.
  ENDLOOP.

* Recorremos las tablas construyendo el TREE anidado
  LOOP AT lti_liq INTO ls_liq.
*   Añadimos el nodo de la liquidación
    PERFORM insertar_nodo_liq   USING     ls_liq
                                CHANGING  lv_liqkey.

*   Recorremos todos los comisionistas de la liquidación
    LOOP AT lti_comis INTO ls_comis WHERE laufd = ls_liq-laufd
                                    AND   laufi = ls_liq-laufi
                                    AND   bukrs = ls_liq-bukrs.
*     Añadimos el nodo comisionista al tree
      PERFORM insertar_nodo_comis USING     lv_liqkey
                                            ls_comis
                                  CHANGING  lv_comkey.

*     Recorremos todas las facturas del comisionista/liquidación
      LOOP AT gti_datos INTO ls_dato WHERE laufd = ls_liq-laufd
                                     AND   laufi = ls_liq-laufi
                                     AND   bukrs = ls_liq-bukrs
                                     AND   lifnr = ls_comis-lifnr.
*       Añadimos el nodo factura
        PERFORM insertar_nodo_fact USING    lv_comkey
                                            ls_dato.
      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                    " CONSTRUIR_TREE


*&---------------------------------------------------------------------*
*&      Form  INSERTAR_NODO_LIQ
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PS_LIQ  text
*      <--P_LIQKEY  text
*----------------------------------------------------------------------*
FORM insertar_nodo_liq  USING    ps_liq     TYPE ty_liq
                        CHANGING p_liqkey   TYPE lvc_nkey.

  DATA: ls_tree      TYPE zrsdcom_inf002_grid,
        ls_dato      TYPE zrsdcom_inf002_grid.

  DATA: lv_node_text TYPE lvc_value.

* Leemos los datos de la liquidación
  READ TABLE gti_datos INTO ls_dato WITH KEY laufd = ps_liq-laufd
                                             laufi = ps_liq-laufi
                                             bukrs = ps_liq-bukrs.

* Ponemos la descripción del nodo
  CONCATENATE ps_liq-laufd ps_liq-laufi ls_dato-vtext INTO lv_node_text
      SEPARATED BY space.

* Cargamos los datos del nodo
  MOVE-CORRESPONDING ps_liq TO ls_tree.
  ls_tree-vtext     = ls_dato-vtext.
  ls_tree-zstat_liq = ls_dato-zstat_liq.

* Añadimos el nodo
  CALL METHOD g_tree->add_node
    EXPORTING
      i_relat_node_key = ''
      i_relationship   = cl_gui_column_tree=>relat_last_child
      i_node_text      = lv_node_text
      is_outtab_line   = ls_tree
    IMPORTING
      e_new_node_key   = p_liqkey.

ENDFORM.                    " INSERTAR_NODO_LIQ


*&---------------------------------------------------------------------*
*&      Form  INSERTAR_NODO_COMIS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LIQKEY  text
*      -->PS_COMIS  text
*      <--P_COMKEY  text
*----------------------------------------------------------------------*
FORM insertar_nodo_comis  USING    p_liqkey  TYPE lvc_nkey
                                   ps_comis  TYPE ty_comis
                          CHANGING p_comkey  TYPE lvc_nkey.

  DATA: ls_tree      TYPE zrsdcom_inf002_grid,
        ls_dato      TYPE zrsdcom_inf002_grid.

  DATA: lv_node_text TYPE lvc_value.

* Leemos los datos de la liquidación/comisionista
  READ TABLE gti_datos INTO ls_dato WITH KEY laufd = ps_comis-laufd
                                             laufi = ps_comis-laufi
                                             bukrs = ps_comis-bukrs
                                             lifnr = ps_comis-lifnr.

* Ponemos la descripción del nodo
  CONCATENATE ps_comis-lifnr ls_dato-name1_com INTO lv_node_text
      SEPARATED BY space.

* Cargamos los datos del nodo
  MOVE-CORRESPONDING ps_comis TO ls_tree.
  ls_tree-vtext     = ls_dato-vtext.
  ls_tree-zstat_liq = ls_dato-zstat_liq.
  ls_tree-name1_com = ls_dato-name1_com.

* Añadimos el nodo
  CALL METHOD g_tree->add_node
    EXPORTING
      i_relat_node_key = p_liqkey
      i_relationship   = cl_gui_column_tree=>relat_last_child
      i_node_text      = lv_node_text
      is_outtab_line   = ls_tree
    IMPORTING
      e_new_node_key   = p_comkey.

ENDFORM.                    " INSERTAR_NODO_COMIS


*&---------------------------------------------------------------------*
*&      Form  INSERTAR_NODO_FACT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_COMKEY  text
*      -->PS_DATO  text
*----------------------------------------------------------------------*
FORM insertar_nodo_fact  USING    p_comkey  TYPE lvc_nkey
                                  ps_dato   TYPE zrsdcom_inf002_grid.

  DATA: ls_tree      TYPE zrsdcom_inf002_grid.

  DATA: lv_node_text TYPE lvc_value.


* Ponemos la descripción del nodo
  lv_node_text = ps_dato-vbeln.

* Cargamos los datos del nodo
  ls_tree = ps_dato.

* Añadimos el nodo
  CALL METHOD g_tree->add_node
    EXPORTING
      i_relat_node_key = p_comkey
      i_relationship   = cl_gui_column_tree=>relat_last_child
      i_node_text      = lv_node_text
      is_outtab_line   = ls_tree.

ENDFORM.                    " INSERTAR_NODO_FACT
