*&---------------------------------------------------------------------*
*& Report  ZRSD0044
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zrsd0044.

TABLES: vbak.

DATA: go_file_utils TYPE REF TO zcl_utils_files.
DATA: gt_data TYPE STANDARD TABLE OF zssd_if_omp_tr_p.

* Definición de la pantalla de selección
*-----------------------------------------------------------------------
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
PARAMETERS p_ruta TYPE localfile OBLIGATORY.
SELECTION-SCREEN END OF BLOCK b1.


INITIALIZATION.

  PERFORM init_data.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_ruta.

  PERFORM get_file.

START-OF-SELECTION.

  PERFORM read_file.

END-OF-SELECTION.

  PERFORM process_file.


FORM init_data .

  go_file_utils = NEW zcl_utils_files( ).

ENDFORM.

FORM get_file .

  IF ( go_file_utils IS BOUND ).

    p_ruta = go_file_utils->get_filepath( i_file_filter = zcl_utils_files=>filetypes_excel ).

  ELSE.

    go_file_utils = NEW zcl_utils_files( ).

    IF ( go_file_utils IS BOUND ).

      p_ruta = go_file_utils->get_filepath( i_file_filter = zcl_utils_files=>filetypes_excel ).

    ENDIF.

  ENDIF.


ENDFORM.


FORM read_file .

  go_file_utils->map_xls_2_sap(
    EXPORTING
      i_filepath = p_ruta    " Fichero local para upload/download
    IMPORTING
      e_table    = gt_data
  ).

ENDFORM.


FORM process_file .


*  LOOP AT gt_data INTO ls_data.
*
*    MODIFY zssd_if_omp_tr_p FROM ls_omp_tr.
*
*  ENDLOOP.

ENDFORM.


*DATA: BEGIN OF ls_data,
*  vbeln   TYPE vbeln_va,
*  posnr   TYPE posnr_va,
*  etenr   TYPE etenr,
*  update  TYPE boolean,
*END OF ls_data.
*
*DATA: lt_data LIKE TABLE OF ls_data.
*DATA: lt_omp_tr TYPE TABLE OF zssd_if_omp_tr_p.
*DATA: ls_omp_tr TYPE zssd_if_omp_tr_p.
*DATA: lv_mensaje TYPE string.
*
*START-OF-SELECTION.
*
*
*SELECT b~vbeln, b~posnr, b~etenr
*  FROM vbap AS a LEFT JOIN vbep AS b
*    ON a~vbeln = b~vbeln
*   AND a~posnr = b~posnr
*  INTO CORRESPONDING FIELDS OF TABLE @lt_data
* WHERE a~werks = @p_werks
*   AND a~vbeln IN @s_vbeln
*   AND b~bmeng > 0.
*
*SELECT SINGLE MAX( num_envio )
*  FROM ZSSD_IF_OMP_TR_P
*  INTO @DATA(lv_max).
*
*END-OF-SELECTION.
*
*LOOP AT lt_data INTO ls_data.
*
*  CLEAR: ls_omp_tr, lv_mensaje.
*
*  SELECT COUNT(*) UP TO 1 ROWS
*    FROM zssd_if_omp_tr_p
*   WHERE vbeln = ls_omp_tr-vbeln
*     AND posnr = ls_omp_tr-posnr
*     AND etenr = ls_omp_tr-etenr.
*
*  IF ( sy-subrc = 0 ).
*    ls_omp_tr-accion = 'M'.
*  ELSE.
*    ls_omp_tr-accion = 'A'.
*  ENDIF.
*
*  ls_omp_tr-num_envio = lv_max + 1.
*  ls_omp_tr-vbeln = ls_data-vbeln.
*  ls_omp_tr-posnr = ls_data-posnr.
*  ls_omp_tr-etenr = ls_data-etenr.
*
*  ls_omp_tr-usucre = sy-uname.
*  ls_omp_tr-erdat  = sy-datum.
*  ls_omp_tr-erzet  = sy-uzeit.
*
*  APPEND ls_omp_tr TO lt_omp_tr.
*  MODIFY zssd_if_omp_tr_p FROM ls_omp_tr.
*  IF ( sy-subrc = 0 ).
*    lv_mensaje = 'Exito'.
*  ELSE.
*    lv_mensaje = 'Error'.
*  ENDIF.
*
*  CONCATENATE lv_mensaje ls_omp_tr-num_envio ls_omp_tr-vbeln ls_omp_tr-posnr ls_omp_tr-etenr INTO lv_mensaje SEPARATED BY space.
*
*ENDLOOP.
*
*COMMIT WORK AND WAIT.
