*&---------------------------------------------------------------------*
*& Report  ZRSD0046
*&
*&---------------------------------------------------------------------*
*& Facturación Consigna
*& Javier Calás. 19.11.24
*&---------------------------------------------------------------------*
REPORT zrsd0046.


*TABLES: sscrfields.

"""""""""""""""""
" Constantes
"""""""""""""""""
CONSTANTS: c_icon_inactivo TYPE icon_d VALUE icon_led_inactive,
           c_icon_ok       TYPE icon_d VALUE icon_led_green,
           c_icon_error    TYPE icon_d VALUE icon_led_red,
           c_color_ok      TYPE char4  VALUE 'C500',
           c_color_error   TYPE char4  VALUE 'C600'.

CONSTANTS: cg_auart  TYPE auart VALUE 'ZKE'.

*CONSTANTS: cg_auart_positivo  TYPE auart VALUE 'ZKE',
*           cg_auart_negativo  TYPE auart VALUE 'ZG2',
*           cg_motivo_negativo TYPE bapisdhd1-ord_reason VALUE '402'.
*
*
*CONSTANTS: cg_alias_plantilla TYPE user_dir-aliass VALUE 'ZRSD0046'.


"""""""""""""""""
" Tipos de datos
"""""""""""""""""
TYPES: BEGIN OF st_lin_alv.
         INCLUDE TYPE zrsd0046_s_alv.
       TYPES END OF st_lin_alv.


"""""""""""""""""
" Includes
"""""""""""""""""
INCLUDE zseis_patron_alv.


""""""""""""""""""""""
" Pantalla de selección
""""""""""""""""""""""
*SELECTION-SCREEN FUNCTION KEY 1.

SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-b01.
PARAMETERS: p_path   TYPE localfile.
SELECTION-SCREEN END OF BLOCK b01.

SELECTION-SCREEN BEGIN OF BLOCK b02 WITH FRAME TITLE text-b02.
PARAMETERS: p_vkorg TYPE vkorg OBLIGATORY,
            p_vtweg TYPE vtweg OBLIGATORY,
            p_spart TYPE spart OBLIGATORY.
SELECTION-SCREEN END OF BLOCK b02.

""""""""""""""""""""""
" Eventos
""""""""""""""""""""""

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_path.
  PERFORM f_f4_fichero USING p_path.


AT SELECTION-SCREEN.
  IF sy-ucomm = 'ONLI' AND p_path IS INITIAL.
    MESSAGE 'Debe indicar fichero excel' TYPE 'E'.
  ENDIF.


*&---------------------------------------------------------------------*
*&      Form  F_F4_FICHERO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_PATH  text
*----------------------------------------------------------------------*
FORM f_f4_fichero  USING  p_path.
  DATA: tl_file_table TYPE TABLE OF file_table,
        vl_rc         TYPE i.
  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      file_filter = 'Excel 2007-2021 (*.xlsx)|*.xlsx'
    CHANGING
      file_table  = tl_file_table
      rc          = vl_rc.
  READ TABLE tl_file_table ASSIGNING FIELD-SYMBOL(<fs_file_table>) INDEX 1.
  IF sy-subrc = 0.
    p_path = <fs_file_table>-filename.
  ENDIF.
ENDFORM.





""""""""""""""""""""""
"Rutinas
""""""""""""""""""""""

*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_initialization.
  vg_no_justif_cols = 'X'.
  PERFORM f_config_dynpro USING '0100' 'CC_ALV' 'T0100' 'STA_0100' space space.
ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  F_CREAR_CATALOGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_catalogo TABLES it_catalogo TYPE lvc_t_fcat USING vp_dynnr.

  wa_layout-info_fname  = 'COLOR'.
  wa_layout-sel_mode    = 'A'.


  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZRSD0046_S_ALV'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_catalogo[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>).
    CASE <fs_catalogo>-fieldname.
      WHEN 'ICON'.
        <fs_catalogo>-icon      = 'X'.
        <fs_catalogo>-outputlen = 6.
      WHEN 'MSG_LOG'.
        <fs_catalogo>-outputlen = 80.
      WHEN 'PROCESADO'.
        DELETE it_catalogo. CONTINUE.
    ENDCASE.
  ENDLOOP.


ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  F_START_OF_SELECTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos TABLES tp_alv USING vp_dynpro.
  DATA: tl_excel TYPE zrsd0046_t_excel.
  DATA(tl_fieldcatalog) = zcl_excel_common=>get_fieldcatalog( tl_excel ).
  TRY.
      DATA(rl_excel_reader) = NEW zcl_excel_reader_2007( ).
      DATA(rl_excel)        = rl_excel_reader->zif_excel_reader~load_file( p_path ).
      DATA(rl_worksheet)    = rl_excel->get_active_worksheet( ).

      DATA: vl_row        TYPE int4 VALUE 2,
            vl_column     TYPE int4,
            vl_value      TYPE zexcel_cell_value,
            vl_row_max    TYPE int4,
            vl_column_max TYPE int4.


      vl_row_max    = rl_worksheet->get_highest_row( ).
      vl_column_max = rl_worksheet->get_highest_column( ).

      WHILE vl_row <= vl_row_max.
        APPEND INITIAL LINE TO tl_excel ASSIGNING FIELD-SYMBOL(<fs_excel>).

        vl_column = 1.
        WHILE vl_column <= vl_column_max.
          rl_worksheet->get_cell( EXPORTING ip_column = vl_column
                                            ip_row    = vl_row
                                 IMPORTING ep_value = vl_value ).
          READ TABLE tl_fieldcatalog ASSIGNING FIELD-SYMBOL(<fs_fieldcatalog>) INDEX vl_column.
          IF sy-subrc = 0.
            ASSIGN COMPONENT <fs_fieldcatalog>-fieldname OF STRUCTURE <fs_excel> TO FIELD-SYMBOL(<fs_campo>).
          ENDIF.
          IF sy-subrc = 0.
            IF <fs_fieldcatalog>-abap_type = 'D'.
              TRY .
                  <fs_campo> = zcl_excel_common=>excel_string_to_date( vl_value ).
                CATCH zcx_excel INTO DATA(rl_zcx_excel).
                  "Probamos a tratar como formato externo dd.mm.yyyy
                  CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
                    EXPORTING
                      date_external            = vl_value
                    IMPORTING
                      date_internal            = <fs_campo>
                    EXCEPTIONS
                      date_external_is_invalid = 1
                      OTHERS                   = 2.
                  IF sy-subrc <> 0.
                    RAISE EXCEPTION rl_zcx_excel.
                  ENDIF.
              ENDTRY.
            ELSE.
              <fs_campo> = vl_value.
            ENDIF.
          ENDIF.

          ADD 1 TO vl_column.
        ENDWHILE.

        <fs_excel>-kunag  = |{ <fs_excel>-kunag ALPHA = IN }|.
        <fs_excel>-kunnr  = |{ <fs_excel>-kunnr ALPHA = IN }|.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
          EXPORTING
            input          = <fs_excel>-meins
            language       = sy-langu
          IMPORTING
            output         = <fs_excel>-meins
          EXCEPTIONS
            unit_not_found = 1
            OTHERS         = 2.



        vl_column = 1.
        ADD 1 TO vl_row.
      ENDWHILE.
    CATCH zcx_excel INTO rl_zcx_excel.
      MESSAGE rl_zcx_excel->get_text( ) TYPE 'E'.
  ENDTRY.

  DELETE tl_excel WHERE kunag IS INITIAL.
  PERFORM f_preparar_alv USING tl_excel.


ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  F_PREPARAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->Tp_EXCEL  text
*----------------------------------------------------------------------*
FORM f_preparar_alv  USING  tp_excel TYPE zrsd0046_t_excel.
  CHECK tp_excel IS NOT INITIAL.

  DATA: tl_alv_aux LIKE it_alv.

  "Centros de la organización de ventas
  DATA: tl_werks_rg TYPE RANGE OF t001w-werks.
  SELECT 'I' AS sign, 'EQ' AS option, werks AS low
    INTO CORRESPONDING FIELDS OF TABLE @tl_werks_rg
    FROM tvkwz
    WHERE vkorg = @p_vkorg AND
          vtweg = @p_vtweg.
  CHECK sy-subrc = 0.


  DATA vl_kdmat_like TYPE knmt-kdmat.

  LOOP AT tp_excel ASSIGNING FIELD-SYMBOL(<fs_excel>).
    APPEND INITIAL LINE TO tl_alv_aux ASSIGNING FIELD-SYMBOL(<fs_alv_aux>).
    MOVE-CORRESPONDING <fs_excel> TO <fs_alv_aux>.
    <fs_alv_aux>-icon   = c_icon_inactivo.

    vl_kdmat_like  = |{ <fs_excel>-kdmat  }%|.


    SELECT SINGLE knmt~vkorg, knmt~vtweg, knmt~kunnr, knmt~kdmat, knmt~matnr,
                  makt~maktx
      INTO @DATA(wl_knmt)
      FROM knmt INNER JOIN mara ON mara~matnr = knmt~matnr
                LEFT OUTER JOIN makt ON makt~matnr = knmt~matnr AND
                                        makt~spras = @sy-langu
                INNER JOIN mvke ON mvke~matnr = knmt~matnr AND
                                   mvke~vkorg = knmt~vkorg AND
                                   mvke~vtweg = knmt~vtweg
      WHERE knmt~vkorg =    @p_vkorg           AND
            knmt~vtweg =    @p_vtweg           AND
            knmt~kunnr =    @<fs_excel>-kunag  AND
            knmt~kdmat LIKE @vl_kdmat_like     AND
            mara~mstae =    @space             AND
            mara~mstav =    @space             AND
            mvke~vmsta =    @space.
    IF sy-subrc <> 0.
      PERFORM f_msg_error_alv USING 'No se ha podido determinar el material' CHANGING <fs_alv_aux>.
      CONTINUE.
    ENDIF.

    <fs_alv_aux>-matnr = wl_knmt-matnr.
    <fs_alv_aux>-maktx = wl_knmt-maktx.
  ENDLOOP.


  "Preparar consumos lotes mediante FIFO:
  SORT tl_alv_aux BY matnr kunag kunnr.

  " Ordenamos por número de lote
  TYPES: BEGIN OF st_msku,
           matnr TYPE msku-matnr,
           orden TYPE char20,
           werks TYPE msku-werks,
           charg TYPE msku-charg,
           sobkz TYPE msku-sobkz,
           kunnr TYPE msku-kunnr,
           kulab TYPE msku-kulab,
           meins TYPE mara-meins,
         END OF st_msku.
  DATA: tl_msku_aux TYPE TABLE OF st_msku,
        tl_msku     TYPE TABLE OF st_msku.


  "Lotes del solicitante
  SELECT msku~matnr, msku~werks, msku~charg, msku~sobkz, msku~kunnr, msku~kulab, mara~meins
    INTO CORRESPONDING FIELDS OF TABLE @tl_msku_aux
    FROM msku INNER JOIN mara ON mara~matnr = msku~matnr
    FOR ALL ENTRIES IN @tl_alv_aux
    WHERE msku~matnr = @tl_alv_aux-matnr AND
          msku~werks IN @tl_werks_rg AND
          msku~sobkz = 'W'           AND
          msku~kunnr = @tl_alv_aux-kunag AND
          msku~kulab > 0.
  LOOP AT tl_msku_aux ASSIGNING FIELD-SYMBOL(<fs_msku_aux>).
    <fs_msku_aux>-orden = |01{ <fs_msku_aux>-charg }|.
  ENDLOOP.
  APPEND LINES OF tl_msku_aux TO tl_msku.
  CLEAR tl_msku_aux.

  "Lotes del destinatario
  SELECT msku~matnr, msku~werks, msku~charg, msku~sobkz, msku~kunnr, msku~kulab, mara~meins
      INTO CORRESPONDING FIELDS OF TABLE @tl_msku_aux
      FROM msku INNER JOIN mara ON mara~matnr = msku~matnr
      FOR ALL ENTRIES IN @tl_alv_aux
      WHERE msku~matnr = @tl_alv_aux-matnr AND
            msku~werks IN @tl_werks_rg AND
            msku~sobkz = 'W'           AND
            msku~kunnr = @tl_alv_aux-kunnr AND
            msku~kulab > 0.
  LOOP AT tl_msku_aux ASSIGNING <fs_msku_aux>.
    <fs_msku_aux>-orden = |02{ <fs_msku_aux>-charg }|.
  ENDLOOP.
  APPEND LINES OF tl_msku_aux TO tl_msku.
  CLEAR tl_msku_aux.

  "Ordenamos para consumir por FIFO
  SORT tl_msku BY matnr ASCENDING orden ASCENDING kunnr ASCENDING.


  DATA tl_kunnr_rg    TYPE RANGE OF msku-kunnr.
  DATA vl_error_fila  TYPE text60.
  DATA vl_stock_matnr TYPE menge_d.

  LOOP AT tl_alv_aux ASSIGNING <fs_alv_aux>.
    "Si tiene error anterior se graba y chimpún
    IF <fs_alv_aux>-procesado = 'X'.
      APPEND <fs_alv_aux> TO it_alv.
      CONTINUE.
    ENDIF.

    CLEAR vl_error_fila.
    CLEAR vl_stock_matnr.

    "Comprobamos si hay suficiente stock para la línea
    tl_kunnr_rg = VALUE #( sign = 'I' option = 'EQ' ( low = <fs_alv_aux>-kunag )
                                                    ( low = <fs_alv_aux>-kunnr ) ).

    LOOP AT tl_msku ASSIGNING FIELD-SYMBOL(<fs_msku>) WHERE matnr = <fs_alv_aux>-matnr AND
                                                            kunnr IN tl_kunnr_rg.
      IF <fs_alv_aux>-meins <> <fs_msku>-meins.
        CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
          EXPORTING
            i_matnr              = <fs_msku>-matnr
            i_in_me              = <fs_msku>-meins
            i_out_me             = <fs_alv_aux>-meins
            i_menge              = <fs_msku>-kulab
          IMPORTING
            e_menge              = <fs_msku>-kulab
          EXCEPTIONS
            error_in_application = 1
            error                = 2
            OTHERS               = 3.
        IF sy-subrc = 0.
          <fs_msku>-meins = <fs_alv_aux>-meins.
        ELSE.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO vl_error_fila.
          EXIT.
        ENDIF.
      ENDIF.

      ADD <fs_msku>-kulab TO vl_stock_matnr.
    ENDLOOP.

    IF vl_error_fila IS INITIAL AND vl_stock_matnr < <fs_alv_aux>-menge.
      vl_error_fila = 'No hay suficiente stock para el material'.
    ENDIF.


    IF vl_error_fila IS NOT INITIAL.
      PERFORM f_msg_error_alv USING vl_error_fila CHANGING <fs_alv_aux>.
      APPEND <fs_alv_aux> TO it_alv.
      CONTINUE.
    ENDIF.

    LOOP AT tl_msku ASSIGNING <fs_msku> WHERE matnr = <fs_alv_aux>-matnr AND
                                              kunnr IN tl_kunnr_rg.
      APPEND <fs_alv_aux> TO it_alv ASSIGNING FIELD-SYMBOL(<fs_alv>).
      <fs_alv>-charg = <fs_msku>-charg.

      IF <fs_msku>-kulab >= <fs_alv_aux>-menge.
        SUBTRACT <fs_alv_aux>-menge FROM <fs_msku>-kulab.
        EXIT.

      ELSE.
        <fs_alv>-menge = <fs_msku>-kulab.
        SUBTRACT <fs_alv>-menge FROM: <fs_alv_aux>-menge,
                                      <fs_msku>-kulab.
      ENDIF.
    ENDLOOP.

    DELETE tl_msku WHERE kulab <= 0.
  ENDLOOP.


ENDFORM.






*&---------------------------------------------------------------------*
*&      Form  f_user_command
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_user_command USING vp_dynnr vp_okcode.
  DATA vl_answer TYPE c.

  CASE vp_dynnr.
    WHEN '0100'.
      CASE vp_okcode.
        WHEN 'CREAR_PED'.
          PERFORM f_user_command_crear_ped USING space.
        WHEN 'TEST'.
          PERFORM f_user_command_crear_ped USING 'X'.
      ENDCASE.
  ENDCASE.

ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  F_USER_COMMAND_CREAR_PED
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_user_command_crear_ped USING vp_test TYPE xfeld.
  r_alv->get_selected_rows( IMPORTING et_index_rows = DATA(tl_index_rows) ).
  LOOP AT tl_index_rows ASSIGNING FIELD-SYMBOL(<fs_index_rows>).
    READ TABLE it_alv ASSIGNING FIELD-SYMBOL(<fs_alv>) INDEX <fs_index_rows>-index.
    IF sy-subrc <> 0 OR <fs_alv>-procesado = 'X'.
      DELETE tl_index_rows. CONTINUE.
    ENDIF.
  ENDLOOP.

  IF tl_index_rows IS INITIAL.
    MESSAGE 'Debe seleccionar al menos una fila no tratada' TYPE 'I' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  DATA vl_answer TYPE c.
  IF vp_test = 'X'.
    vl_answer = '1'.

  ELSE.
    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        text_question  = 'Se va a crear pedidos con las posiciones seleccionadas. ¿Desea continuar?'
      IMPORTING
        answer         = vl_answer
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.
  ENDIF.
  IF vl_answer = '1'.
    PERFORM f_crear_pedido USING  tl_index_rows vp_test.
  ENDIF.
ENDFORM.



*&---------------------------------------------------------------------*
*&      Form  F_CREAR_PEDIDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_pedido USING tp_index_rows   TYPE lvc_t_row
                          vp_test         TYPE xfeld.
  CHECK tp_index_rows IS NOT INITIAL.

  DATA: wl_order_header_in     TYPE bapisdhd1,
        tl_order_partners      TYPE TABLE OF bapiparnr,
        tl_order_items_in      TYPE TABLE OF bapisditm,
        tl_order_schedules_in  TYPE TABLE OF bapischdl,
        tl_order_conditions_in TYPE TABLE OF bapicond,
        vl_salesdocument       TYPE bapivbeln-vbeln,
        tl_return              TYPE TABLE OF bapiret2,
        vl_itm_number          TYPE bapisditm-itm_number.

  DATA: wl_sales_header_in     TYPE bapisdhead1,
        tl_sales_items_in      TYPE TABLE OF bapisditem,
        tl_sales_partners      TYPE TABLE OF bapipartnr,
        tl_sales_schedules_in  TYPE TABLE OF bapischedule,
        tl_sales_conditions_in TYPE TABLE OF bapicondition.



  DATA vl_msg       TYPE text255 VALUE 'Proceso realizado. Revise mensajes en los registros de la tabla'.
  DATA vl_tipo_msg  TYPE c       VALUE 'S'.
  DATA vl_error     TYPE xfeld.
  DATA vl_doc_type  LIKE wl_order_header_in-doc_type.

  TYPES: BEGIN OF st_grupos,
           kunnr       TYPE zrsd0046_s_alv-kunnr,
           kunag       TYPE zrsd0046_s_alv-kunag,
           budat       TYPE zrsd0046_s_alv-budat,
           bstnk       TYPE zrsd0046_s_alv-bstnk,
           filas_alv   LIKE it_alv,
           indices_alv TYPE STANDARD TABLE OF sy-tabix WITH DEFAULT KEY,
         END OF st_grupos.
  DATA: tl_grupos TYPE TABLE OF st_grupos.

  DATA vl_tabix TYPE bapi_line.

  LOOP AT it_alv ASSIGNING FIELD-SYMBOL(<fs_alv>) WHERE procesado = space.
    vl_tabix = sy-tabix.

    READ TABLE tp_index_rows TRANSPORTING NO FIELDS WITH KEY index = vl_tabix.
    CHECK sy-subrc = 0.

    vl_doc_type = cg_auart.


    SELECT SINGLE vbak~vbeln
      INTO @DATA(vl_vbeln)
      FROM vbak INNER JOIN vbap ON vbap~vbeln = vbak~vbeln
      WHERE vbak~auart = @vl_doc_type     AND
            vbak~audat = @<fs_alv>-budat  AND
            vbak~vkorg = @p_vkorg         AND
            vbak~vtweg = @p_vtweg         AND
            vbak~spart = @p_spart         AND
            vbap~matnr = @<fs_alv>-matnr  AND
            vbap~kdmat = @<fs_alv>-kdmat.
    IF sy-subrc = 0.
      DATA(vl_msg_error) = |Ya se ha creado el documento { vl_vbeln } para esta fecha y material|.
      PERFORM f_msg_error_alv USING vl_msg_error CHANGING <fs_alv>.

      CONTINUE.
    ENDIF.


    READ TABLE tl_grupos ASSIGNING FIELD-SYMBOL(<fs_grupos>) WITH KEY kunnr     = <fs_alv>-kunnr
                                                                      kunag     = <fs_alv>-kunag
                                                                      budat     = <fs_alv>-budat
                                                                      bstnk     = <fs_alv>-bstnk.
    IF sy-subrc <> 0 OR vp_test = 'X'.  "Para TEST no agrupamos, porque si hay error en una fila no comprueba la siguiente
      APPEND INITIAL LINE TO tl_grupos ASSIGNING <fs_grupos>.
      MOVE-CORRESPONDING <fs_alv> TO <fs_grupos>.
    ENDIF.

    APPEND <fs_alv> TO <fs_grupos>-filas_alv.
    APPEND vl_tabix TO <fs_grupos>-indices_alv.
  ENDLOOP.



  LOOP AT tl_grupos ASSIGNING <fs_grupos>.
    CLEAR: vl_salesdocument, tl_return, vl_error.
    CLEAR: wl_order_header_in, tl_order_items_in, tl_order_partners, tl_order_schedules_in, tl_order_conditions_in.
    CLEAR: wl_sales_header_in, tl_sales_items_in, tl_sales_partners, tl_sales_schedules_in, tl_sales_conditions_in.



    "Cabecera.
    wl_order_header_in-sales_org  = p_vkorg.
    wl_order_header_in-distr_chan = p_vtweg.
    wl_order_header_in-division   = p_spart.
    wl_order_header_in-doc_type   = vl_doc_type.
    wl_order_header_in-purch_no_c = <fs_grupos>-bstnk.
    wl_order_header_in-req_date_h = wl_order_header_in-doc_date = <fs_grupos>-budat.
    WRITE <fs_grupos>-budat TO wl_order_header_in-purch_no_c DD/MM/YYYY.

    "Interlocutores
    tl_order_partners = VALUE #( ( partn_role = 'AG' partn_numb = <fs_grupos>-kunag )
                                 ( partn_role = 'WE' partn_numb = <fs_grupos>-kunnr )
                                 ( partn_role = 'SB' partn_numb = <fs_grupos>-kunnr ) ).

    CLEAR vl_itm_number.
    LOOP AT <fs_grupos>-filas_alv ASSIGNING <fs_alv>.
      APPEND INITIAL LINE TO tl_order_items_in ASSIGNING FIELD-SYMBOL(<fs_order_items_in>).
      ADD 10 TO vl_itm_number.
      <fs_order_items_in>-itm_number = vl_itm_number.
      <fs_order_items_in>-cust_mat35 = <fs_alv>-kdmat.
      <fs_order_items_in>-material   = <fs_alv>-matnr.
      <fs_order_items_in>-target_qty = <fs_alv>-menge.
      <fs_order_items_in>-target_qu  = <fs_alv>-meins.
*      <fs_order_items_in>-purch_no_c = <fs_alv>-bstnk.
*          <fs_order_items_in>-target_val = <fs_alv>-target_val.
*          <fs_order_items_in>-currency   = <fs_alv>-currency.
      <fs_order_items_in>-batch      = <fs_alv>-charg.

      APPEND INITIAL LINE TO tl_order_schedules_in ASSIGNING FIELD-SYMBOL(<fs_order_schedules_in>).
      <fs_order_schedules_in>-itm_number  = <fs_order_items_in>-itm_number.
      <fs_order_schedules_in>-sched_line  = '10'.
      <fs_order_schedules_in>-req_qty     = <fs_order_items_in>-target_qty.

*          APPEND INITIAL LINE TO tl_order_conditions_in ASSIGNING FIELD-SYMBOL(<fs_order_conditions_in>).
*          <fs_order_conditions_in>-itm_number = <fs_order_items_in>-itm_number.
*          <fs_order_conditions_in>-cond_type  = 'ZPN1'.
*          <fs_order_conditions_in>-currency   = <fs_alv>-currency.
*          <fs_order_conditions_in>-cond_value = abs( <fs_alv>-target_val ).
*          <fs_order_conditions_in>-condvalue  = abs( <fs_alv>-target_val ).
    ENDLOOP.
    CHECK tl_order_items_in IS NOT INITIAL.

    CALL FUNCTION 'BAPI_SALESORDER_CREATEFROMDAT2'
      EXPORTING
        order_header_in     = wl_order_header_in
        testrun             = vp_test
      IMPORTING
        salesdocument       = vl_salesdocument
      TABLES
        return              = tl_return
        order_items_in      = tl_order_items_in
        order_schedules_in  = tl_order_schedules_in
        order_conditions_in = tl_order_conditions_in
        order_partners      = tl_order_partners.
    IF vp_test = 'X'.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    ENDIF.


    DELETE tl_return WHERE type NA 'EA'.
    IF tl_return IS NOT INITIAL. vl_error = 'X'. ENDIF.

    LOOP AT <fs_grupos>-indices_alv ASSIGNING FIELD-SYMBOL(<fs_indice_alv>).
      vl_tabix = sy-tabix.

      READ TABLE tl_order_items_in ASSIGNING <fs_order_items_in> INDEX vl_tabix.
      CHECK sy-subrc = 0.
      DATA(vl_posnr) = <fs_order_items_in>-itm_number.

      READ TABLE it_alv ASSIGNING <fs_alv> INDEX <fs_indice_alv>.
      CHECK sy-subrc = 0.
      <fs_alv>-procesado  = 'X'.

      IF vl_error = 'X'.
        <fs_alv>-icon         = c_icon_error.
        <fs_alv>-color        = c_color_error.

        READ TABLE tl_return ASSIGNING FIELD-SYMBOL(<fs_return>) WITH KEY parameter = 'SALES_ITEM_IN'
                                                                          row   = vl_tabix.
        IF sy-subrc <> 0 AND vp_test = space.
          READ TABLE tl_return ASSIGNING <fs_return> WITH KEY row = 0.
        ENDIF.
        IF sy-subrc = 0.
          <fs_alv>-msg_log  = <fs_return>-message.
        ENDIF.

      ELSE.
        <fs_alv>-icon     = c_icon_ok.
        IF vp_test = space.
          <fs_alv>-color      = c_color_ok.
          <fs_alv>-vbeln      = vl_salesdocument.
          <fs_alv>-posnr      = vl_posnr.
          <fs_alv>-msg_log    = |Pedido { vl_salesdocument } creado|.
        ELSE.
          <fs_alv>-msg_log  = |No se han encontrado errores|.
          CLEAR <fs_alv>-procesado.
        ENDIF.
      ENDIF.
    ENDLOOP.  "Indices ALV


    IF vp_test = 'X'.
      "Desde la tabla VBEP, si el campo cantidad confirmada de esa posición (VBEP  BMENG) está confirmada, entonces la entrega se va a crear
      "Habría que tener en cuenta que para un mismo pedido/posición puede haber más de un reparto (VBEP-ETENR) con que la cantidad pedido (VBEP  WMENG)
      "sea igual que cantidad confirmada (VBEP  BMENG) la entrega se creará.

      LOOP AT <fs_grupos>-indices_alv ASSIGNING <fs_indice_alv>.
        READ TABLE it_alv ASSIGNING <fs_alv> INDEX <fs_indice_alv>.
        CHECK sy-subrc = 0.

        IF <fs_alv>-icon <> c_icon_error.
          SELECT SUM( wmeng ) AS wmeng, SUM( bmeng ) AS bmeng
            FROM vbep
            WHERE vbeln = @<fs_alv>-vbeln AND
                  posnr = @<fs_alv>-posnr
            INTO (@DATA(vl_wmeng), @DATA(vl_bmeng)).
          IF vl_wmeng > vl_bmeng.
            <fs_alv>-icon     = c_icon_error.
            <fs_alv>-color    = c_color_error.
            <fs_alv>-msg_log  = |Cantidad pedida no confirmada completamente. No se va a crear la entrega|.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF vl_error = space.
      IF vp_test = space.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
        WAIT UP TO 1 SECONDS.

        LOOP AT <fs_grupos>-indices_alv ASSIGNING <fs_indice_alv>.
          READ TABLE it_alv ASSIGNING <fs_alv> INDEX <fs_indice_alv>.
          CHECK sy-subrc = 0.

          SELECT SINGLE vbeln , posnn
            INTO (@<fs_alv>-vbeln_entrega, @<fs_alv>-posnr_entrega)
            FROM vbfa
            WHERE vbelv   = @<fs_alv>-vbeln AND
                  posnv   = @<fs_alv>-posnr AND
                  vbtyp_n = 'J'.
        ENDLOOP.
      ENDIF.

    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      vl_msg      = 'Se han producido errores en el proceso. Revise mensajes'.
      vl_tipo_msg = 'W'.
    ENDIF.

  ENDLOOP. "Grupos


  r_alv->refresh_table_display( ).
  MESSAGE vl_msg TYPE vl_tipo_msg.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_MSG_ERROR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<FS_ALV>  text
*      -->P_VL_ERROR_FILA  text
*----------------------------------------------------------------------*
FORM f_msg_error_alv  USING    vp_error_fila
                      CHANGING wp_alv TYPE st_lin_alv_patron.

  wp_alv-procesado  = 'X'.
  wp_alv-icon       = c_icon_error.
  wp_alv-color      = c_color_error.
  wp_alv-msg_log    = vp_error_fila.

ENDFORM.
