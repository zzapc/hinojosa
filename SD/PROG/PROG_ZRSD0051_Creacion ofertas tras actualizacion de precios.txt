***********************************************************************
* TIPO : LISTADO
* TITULO : Creación ofertas tras actualización de precios
* DESCRIPCION : Creación ofertas tras actualización de precios
*
* AUTOR: Andrés Picazo                                FECHA: 22/01/2025
* ANALISTA: Andrea Sanchez Balanzá
*
***********************************************************************
REPORT zrsd0051.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES ztsd0013.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_alv FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check   TYPE xfeld,
             lights  TYPE zico_estado_mensaje,
             matnr   TYPE matnr,
             kunnr   TYPE kunnr,
             kunwe   TYPE kunwe,
             datab   TYPE vbak-audat,
             vkorg   TYPE vkorg,
             vtweg   TYPE vtweg,
             inco1   TYPE inco1,
             knumh   TYPE knumh,
             kschl   TYPE kschl,
             kotabnr TYPE kotabnr,
             kwmeng  TYPE vbap-kwmeng,
             vrkme   TYPE vbap-vrkme,
             vbeln   TYPE vbeln_va,
             erdat   TYPE erdat,
             erzet   TYPE erzet,
             ernam   TYPE ernam,
             proc    TYPE abap_bool,
             message TYPE bapi_msg,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv ##NEEDED.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos,
      crear_oferta_bdc IMPORTING vkorg TYPE vkorg
                                 kunnr TYPE kunnr
                                 datab TYPE datab
                                 ernam TYPE ernam,
      crear_ofertas.
*      crear_oferta CHANGING list TYPE t_listado.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA o_prog TYPE REF TO zcl_report.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_vkorg FOR ztsd0013-vkorg,
                s_datab FOR ztsd0013-datab,
                s_matnr FOR ztsd0013-matnr,
                s_kunnr FOR ztsd0013-kunnr,
                s_kunwe FOR ztsd0013-kunwe,
                s_knumh FOR ztsd0013-knumh,
                s_vbeln FOR ztsd0013-vbeln DEFAULT ''.
SELECTION-SCREEN SKIP 1.
PARAMETERS p_ejec AS CHECKBOX.
SELECTION-SCREEN SKIP 1.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b01.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    " TODO: variable is assigned but only used in commented-out code (ABAP cleaner)
    DATA l_list TYPE o_prog->t_listado.

    l_list = list.
    CASE column.
      WHEN 'KNUMH'.
        NEW zcl_ap_condiciones( )->visualizar( l_list-knumh ).
      WHEN OTHERS. message = '?'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    check_ucomm_sel = 'CREAR'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'CREAR'.
        o_prog->crear_ofertas( ).
        refresh( ).
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).

    IF p_ejec = 'X'.
      crear_ofertas( ).
    ENDIF.

    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    sgpi_texto( 'Seleccionando datos'(sda) ).
    SELECT * FROM ztsd0013
      INTO CORRESPONDING FIELDS OF TABLE i_listado
     WHERE matnr IN s_matnr
       AND kunnr IN s_kunnr
       AND kunwe IN s_kunwe
       AND datab IN s_datab
       AND vkorg IN s_vkorg
       AND vbeln IN s_vbeln
       AND knumh IN s_knumh.

    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

* En caso de escalado, queremos la primera de las cantidaes
      SELECT kzbzg, kmein FROM konp
        INTO (@DATA(l_escalado), @<listado>-vrkme)
        UP TO 1 ROWS
       WHERE knumh = @<listado>-knumh
         AND loevm_ko = ''
        ORDER BY PRIMARY KEY.
      ENDSELECT.
      IF sy-subrc = 0 AND l_escalado = 'C'.
        SELECT kstbm FROM konm
          UP TO 1 ROWS
          INTO @DATA(l_kstbm)
         WHERE knumh = @<listado>-knumh
         ORDER BY PRIMARY KEY.
        ENDSELECT.
        IF sy-subrc = 0.
          <listado>-kwmeng = l_kstbm.
        ENDIF.
      ENDIF.
      IF <listado>-kwmeng IS INITIAL.
        <listado>-kwmeng = 1000.
      ENDIF.

*      get_descripciones( EXPORTING campos = 'MATNR' CHANGING list = <listado> ).
      IF <listado>-vbeln IS INITIAL.
        <listado>-check = p_ejec.
        set_status_list( EXPORTING icono = icon_yellow_light CHANGING list = <listado> ).
      ELSE.
        set_status_list( EXPORTING icono = icon_green_light CHANGING list = <listado> ).
      ENDIF.
    ENDLOOP.

    SORT i_listado.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Crear oferta'  icon = icon_create ucomm = 'CREAR' ).
*    o_alv->add_button( button = 'F01' text = 'Excel'  icon = icon_xls UCOMM = 'EXCEL' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page(
*    i_param = VALUE #( ( tipo = 'R' param = 'S_CREDAT' texto = 'F.Creación IDOC' tabla = '' campo = '' )
                          ).

    o_alv->set_field_hotspot( campo = 'VBELN,KNUMH' auto = 'X' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK,PROC' ).

*    o_alv->set_orden( '' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.

  METHOD crear_ofertas.
    DATA: i_ped     TYPE tt_listado,
          i_ernam   TYPE tt_listado,
          i_list    TYPE tt_listado,
          i_adj_bin	TYPE zcl_ap_gos=>tt_adj.


    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
      IF NOT line_exists( i_ped[ vkorg = <listado>-vkorg
                                 kunnr = <listado>-kunnr
                                 datab = <listado>-datab
                                 ernam = <listado>-ernam ] ).
        APPEND VALUE #( vkorg = <listado>-vkorg
                        kunnr = <listado>-kunnr
                        datab = <listado>-datab
                        ernam = <listado>-ernam ) TO i_ped.
      ENDIF.
      IF NOT line_exists( i_ernam[ ernam = <listado>-ernam ] ).
        APPEND VALUE #( ernam = <listado>-ernam ) TO i_ernam.
      ENDIF.
    ENDLOOP.
    LOOP AT i_ped ASSIGNING <listado>.
      crear_oferta_bdc( vkorg = <listado>-vkorg
                                kunnr = <listado>-kunnr
                                ernam = <listado>-ernam
                                datab = <listado>-datab ).
    ENDLOOP.

    LOOP AT i_ernam ASSIGNING FIELD-SYMBOL(<ernam>).
      DATA(l_ok) = 0.
      DATA(l_ko) = 0.
      CLEAR: i_list, i_adj_bin.
      LOOP AT i_listado ASSIGNING <listado> WHERE ernam = <ernam>-ernam AND proc = 'X'.
        IF <listado>-lights(3) = icon_green_light(3).
          ADD 1 TO l_ok.

          DATA(l_fichero) = condense( |Abono { <listado>-vbeln ALPHA = OUT }.pdf| ).
          IF NOT line_exists( i_adj_bin[ fichero = l_fichero ] ).
            DATA(l_pdf) = zcl_ap_sfp=>recupera_pdf_from_mensaje(  kappl = 'V1' objky = <listado>-vbeln kschl = 'ZAN1' ).
            IF NOT l_pdf IS INITIAL.
              APPEND VALUE #( fichero = l_fichero xstring = l_pdf ) TO i_adj_bin.
            ENDIF.
          ENDIF.
        ELSE.
          ADD 1 TO l_ko.
        ENDIF.
        APPEND <listado> TO i_list.
      ENDLOOP.

      DATA: l_asunto TYPE string.
      IF l_ok > 0 AND l_ko IS INITIAL.
        l_asunto = |Se han creado { l_ok } posiciones de ofertas tras actualización de tarifas|.
      ELSEIF l_ok = 0 AND l_ko IS INITIAL.
        l_asunto = |Error procesando { l_ko } posiciones de ofertas tras actualización de tarifas|.
      ELSE.
        l_asunto = |Se han creado { l_ok } posiciones de ofertas tras actualización de tarifas, pero ha fallado la creación de { l_ko }|.
      ENDIF.

      DATA(l_email) = zcl_ap_usuario=>get_email( <ernam>-ernam ).
      IF l_email IS INITIAL. " OR sy-sysid = zcl_c=>entorno_desarrollo.
        l_email = <ernam>-ernam.
      ENDIF.

      CALL METHOD zcl_ap_envio_mail=>mail
        EXPORTING
          subject              = l_asunto
          direccion            = l_email
          nombre_fichero_tabla = 'ofertas.xls'
          tabla_como_alv       = 'X'
          o_alv_origen         = o_alv
          i_adj_bin            = i_adj_bin
        IMPORTING
          message              = DATA(l_msg)
        CHANGING
          i_tabla              = i_list.

    ENDLOOP.

  ENDMETHOD.

  METHOD crear_oferta_bdc.
    DATA: o_bi    TYPE REF TO zcl_ap_batch_input,
          l_werks TYPE werks_d.

    READ TABLE i_listado INTO DATA(l_list) WITH KEY check = 'X'
                                                    kunnr = kunnr
                                                    vkorg = vkorg
                                                    datab = datab
                                                    ernam = ernam.
    IF sy-subrc NE 0.
      MESSAGE |No ha seleccionado nada para { vkorg } { kunnr ALPHA = OUT } | TYPE 'I'.
      RETURN.
    ENDIF.

    DATA(l_kunnr) = COND kunnr( WHEN NOT l_list-kunnr IS INITIAL THEN l_list-kunnr
                                                               ELSE l_list-kunwe  ).

    CREATE OBJECT o_bi.

    o_bi->inicio( ).

* Documento de ventas    Acceso    Crear
    o_bi->dynpro( program = 'SAPMV45A' dynpro = '0101' okcode = '=UER1').
    o_bi->campos( campo = 'VBAK-AUART' valor = 'ZVA'). " Clase de documento de ventas
    o_bi->campos( campo = 'VBAK-VKORG' valor = l_list-vkorg ). " Organización de ventas
    o_bi->campos( campo = 'VBAK-VTWEG' valor = l_list-vtweg ). " Canal de distribución
    o_bi->campos( campo = 'VBAK-SPART' valor = '10'). " Sector

    o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '=POAN').
    o_bi->campos( campo = 'KUAGV-KUNNR' valor = l_kunnr ). " Solicitante
    o_bi->campos( campo = 'KUWEV-KUNNR' valor = l_kunnr ). " Destinatario de mercancías
    o_bi->campos( campo = 'RV45A-KETDAT' valor = l_list-datab ). " Fecha preferente de entrega para el documento
    o_bi->campos( campo = 'VBAK-ANGDT' valor = l_list-datab ). " Oferta/Consulta válida de
    o_bi->campos( campo = 'VBKD-PRSDT' valor = l_list-datab ). " Fecha para la determinación de precios y tipo de cambio
    o_bi->campos( campo = 'VBKD-BSTKD' valor = l_list-knumh ).


    DATA(cont) = 0.
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'
                                                          AND kunnr = kunnr
                                                          AND vkorg = vkorg
                                                          AND datab = datab
                                                          AND ernam = ernam.
      IF cont > 0.
        o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '=POAN').
      ENDIF.

* Busco si tiene centro suminitrador
      CLEAR l_werks.
      SELECT SINGLE dwerk FROM mvke
        INTO @l_werks
       WHERE matnr = @<listado>-matnr
         AND vkorg = @<listado>-vkorg
         AND vtweg = @<listado>-vtweg.
      IF sy-subrc = 0.
        SELECT SINGLE werks FROM marc
          INTO @l_werks
         WHERE matnr = @<listado>-matnr
           AND werks = @l_werks.
        IF sy-subrc NE 0.
          CLEAR l_werks.
        ENDIF.
      ENDIF.

* Si no, el primero que encuentre
      IF l_werks IS INITIAL.
        SELECT tvkwz~werks FROM tvkwz JOIN marc ON marc~werks = tvkwz~werks
          INTO @l_werks
          UP TO 1 ROWS
         WHERE vkorg = @<listado>-vkorg
           AND vtweg = @<listado>-vtweg
           AND matnr = @<listado>-matnr
         ORDER BY tvkwz~werks.
        ENDSELECT.
        IF sy-subrc NE 0.
          SELECT werks FROM marc
            INTO l_werks
            UP TO 1 ROWS
           WHERE matnr = <listado>-matnr
            ORDER BY PRIMARY KEY.
          ENDSELECT.
        ENDIF.
      ENDIF.

      o_bi->campos( campo = 'RV45A-MABNR(02)' valor = <listado>-matnr ). " Número de material
      o_bi->campos( campo = 'RV45A-KWMENG(02)' valor = <listado>-kwmeng ). " Cantidad de pedido acumulada (en unidades de venta)
      o_bi->campos( campo = 'VBAP-VRKME(02)' valor = <listado>-vrkme ). " Unidad de medida de venta
      o_bi->campos( campo = 'VBAP-WERKS(02)' valor = l_werks ). " Centro (propio o externo)
      o_bi->campos( campo = 'VBAP-ZSTATP(02)' valor = 'A12' ). " Centro (propio o externo)
      ADD 1 TO cont.
    ENDLOOP.
    o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '/00').
    o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '=SICH').

* A veces salta esto lo dejo porque si no hace falta la grabación anterior abrá funcionado bien
    o_bi->dynpro( program = 'SAPLSPO2' dynpro = '0101' okcode = '=OPT1').

    GET TIME.
    DATA(l_hora) = sy-uzeit.
    SET PARAMETER ID 'ZPERM_CAMBIO_STATUS' FIELD 'X'.
    DATA(l_mensaje) = o_bi->llamar_transaccion( tcode = 'VA21' modo = modo_ct ).
    SET PARAMETER ID 'ZPERM_CAMBIO_STATUS' FIELD ''.

    IF o_bi->msgid = 'V1' AND o_bi->msgno = '311'.
      l_list-vbeln = o_bi->msgv2.
      __poner_ceros l_list-vbeln.
    ELSE.
* Como el batch input puede fallar no me fio y lo busco por nº de precio
      DO 3 TIMES.
        SELECT vbeln FROM vbak
          INTO l_list-vbeln
          UP TO 1 ROWS
         WHERE bstnk = l_list-knumh
           AND erdat = sy-datum
           AND erzet >= l_hora
         ORDER BY vbeln DESCENDING.
        ENDSELECT.
        IF sy-subrc = 0.
          CLEAR l_mensaje.
          EXIT.
        ELSE.
          WAIT UP TO 1 SECONDS.
        ENDIF.
      ENDDO.
    ENDIF.


    LOOP AT i_listado ASSIGNING <listado> WHERE check = 'X'
                                            AND kunnr = kunnr
                                            AND vkorg = vkorg
                                            AND datab = datab
                                            AND ernam = ernam.
      <listado>-proc = 'X'.
      IF l_list-vbeln IS INITIAL.
        <listado>-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = l_mensaje ).
      ELSE.
        <listado>-vbeln = l_list-vbeln.
        <listado>-lights = zcl_ap_alv=>set_icono( icono = icon_green_light  mensaje = '' ).

        UPDATE vbap
           SET zstatp = 'A12'
         WHERE vbeln = l_list-vbeln.

        UPDATE ztsd0013
          SET vbeln = <listado>-vbeln
               WHERE  matnr  = <listado>-matnr
               AND    kunnr  = <listado>-kunnr
               AND    kunwe  = <listado>-kunwe
               AND    datab  = <listado>-datab
               AND    vkorg  = <listado>-vkorg
               AND    vtweg  = <listado>-vtweg
               AND    inco1  = <listado>-inco1
               AND    knumh  = <listado>-knumh.
      ENDIF.
    ENDLOOP.

    COMMIT WORK AND WAIT.






  ENDMETHOD.

*  METHOD crear_oferta.
*    DATA: header     TYPE bapisdhd1,
*          i_partners TYPE TABLE OF bapiparnr,
*          i_items    TYPE TABLE OF bapisditm,
*          i_sched    TYPE TABLE OF bapischdl,
*          i_return   TYPE TABLE OF bapiret2.
*
*    header-doc_type    = 'ZOF'.
*    header-sd_doc_cat = 'B'.
*    header-sales_org  = list-vkorg.
*    header-distr_chan  = list-vtweg.
*    header-division  = '10'.
*    header-price_date = list-datab.
*
*    DATA(l_kunnr) = COND kunnr( WHEN NOT list-kunnr IS INITIAL THEN list-kunnr
*                                                               ELSE list-kunwe  ).
*
*    i_partners = VALUE #( ( partn_role = 'AG' partn_numb = l_kunnr )
*                          ( partn_role = 'WE' partn_numb = l_kunnr ) ).
*
*    SELECT werks FROM tvkwz
*      INTO @DATA(l_werks)
*      UP TO 1 ROWS
*     WHERE vkorg = @list-vkorg
*       AND vtweg = @list-vtweg
*     ORDER BY PRIMARY KEY.
*    ENDSELECT.
*
*    i_items = VALUE #( ( itm_number = '000010'
*                         material = list-matnr
*                         plant = l_werks
*                         sales_unit = 'ST'
*                     ) ).
*
*    i_sched = VALUE #( ( itm_number = '000010'
*                         req_qty = 1000
*                     ) ).
*
*    CALL FUNCTION 'BAPI_QUOTATION_CREATEFROMDATA2'
*      EXPORTING
*        quotation_header_in    = header
*      IMPORTING
*        salesdocument          = list-vbeln
*      TABLES
*        return                 = i_return
*        quotation_items_in     = i_items
*        quotation_partners     = i_partners
*        quotation_schedules_in = i_sched
*      .
*
*    IF NOT list-vbeln IS INITIAL.
*      CLEAR list-message.
*      list-lights = zcl_ap_alv=>set_icono( icono = icon_green_light mensaje = '' ).
*
*      UPDATE ztsd0013
*        SET vbeln = list-vbeln
*             WHERE  matnr  = list-matnr
*             AND    kunnr  = list-kunnr
*             AND    kunwe  = list-kunwe
*             AND    datab  = list-datab
*             AND    vkorg  = list-vkorg
*             AND    vtweg  = list-vtweg
*             AND    inco1  = list-inco1
*             AND    knumh  = list-knumh.
*
*      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*        EXPORTING
*          wait = 'X'.
*
*    ELSE.
*      CLEAR list-message.
*      LOOP AT i_return ASSIGNING FIELD-SYMBOL(<return>) WHERE type = 'E'.
*        IF list-message IS INITIAL.
*          list-message = <return>-message.
*        ELSE.
*          list-message = | { list-message } ; { <return>-message } |.
*        ENDIF.
*      ENDLOOP.
*      list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
*    ENDIF.
*
*  ENDMETHOD.

ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Log'(log) '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         o_dev              = o_prog ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN OUTPUT.
  o_prog->handle = ''.
  IF o_prog->o_alv IS INITIAL OR o_prog->handle <> o_prog->aux1.
    o_prog->aux1 = o_prog->handle.
    IF NOT o_prog->o_alv IS INITIAL.
      o_prog->o_alv->free( ).
      CLEAR o_prog->o_alv.
    ENDIF.
    o_prog->o_alv = NEW #( status           = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         handle             = o_prog->handle
                         o_dev              = o_prog ).
    p_vari = o_prog->o_alv->get_default_layout( ).
  ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
