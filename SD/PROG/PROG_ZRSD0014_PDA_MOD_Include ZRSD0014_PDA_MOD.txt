*&---------------------------------------------------------------------*
*&  Include           ZRSD0014_PDA_MOD
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Module  GV_TKNUM  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE gv_tknum INPUT.


  CHECK gv_okcode <> 'CLEAN1000' AND
        gv_okcode <> 'RETURN1000'.


  IF NOT gv_tknum IS INITIAL.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gv_tknum
      IMPORTING
        output = gv_tknum.

    SELECT SINGLE *
    FROM vttk
    WHERE tknum = gv_tknum.
    IF sy-subrc <> 0.
      MESSAGE e031 WITH gv_tknum.  " Transporte inexistente
    ENDIF.
  ELSE.
    MESSAGE 'Transporte inexistente.' TYPE 'E'.
  ENDIF.

ENDMODULE.                 " GV_TKNUM  INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_1000 INPUT.

  CASE gv_okcode.
*   Limpiamos variables de la pantalla
    WHEN 'CLEAN1000'.
      CLEAR: gv_tknum.
      CLEAR: gv_okcode.

*   Pasamos a la dynpro 300
    WHEN 'OK1000'.

      CLEAR: gv_okcode.

* VER SI EN LA TABLA YA HAY LOTES LEIDOS PARA DEJARLOS EN LOS KG TOTALES
      SELECT SUM( brgew ) INTO gv_lfimg_t
      FROM ztsd0002
      WHERE tknum = gv_tknum.
      IF sy-subrc <> 0 OR gv_tknum IS INITIAL. " Validacion del transporte
        MESSAGE 'Transporte inexistente.' TYPE 'E'.
        EXIT.
      ENDIF.
      LEAVE TO SCREEN 2000.

    WHEN 'RETURN1000'.
      CLEAR: gv_tknum.
      CLEAR: gv_okcode.

      SET SCREEN 0.
      LEAVE SCREEN.

  ENDCASE.
  CLEAR gv_okcode.

ENDMODULE.                 " USER_COMMAND_1000  INPUT

MODULE user_command_2100 INPUT.
  CASE gv_okcode.
* Borrar las bobinas del transporte actual.
    WHEN 'ACEP2100'.
      DELETE FROM ztsd0002
        WHERE tknum = gv_tknum.
      IF sy-subrc = 0.
        MESSAGE i039(zsd).
      ENDIF.

      LEAVE TO SCREEN 2000.

    WHEN 'CANC2100'.
      LEAVE TO SCREEN 2000.

  ENDCASE.
ENDMODULE.                 " USER_COMMAND_1000  INPUT

*&---------------------------------------------------------------------*
*&      Module  GV_CHARG  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE gv_charg INPUT.

  DATA lv_continuar TYPE bool.

  CHECK gv_okcode2 <> 'CLEAN2000' AND
        gv_okcode2 <> 'RETR2000'  AND
        gv_okcode2 <> 'RETURN2000'.

  PERFORM verificar_bobina CHANGING lv_continuar.

  IF lv_continuar = si.

    PERFORM anadir_bobina.

  ENDIF.

ENDMODULE.                 " GV_CHARG  INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_2000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_2000 INPUT.

  CASE gv_okcode2.
*   Limpiamos variables de la pantalla
    WHEN 'CLEAN2000'.
      CLEAR: gv_charg.
      CLEAR: gv_okcode2.

*   Pasamos a la dynpro 300
    WHEN 'OK2000'.
* Grabar la lectura a la tabla Z para trasladar al programa ZPICKPAP

* 14/10/2019 CMS Se anula la grabaciónx masiva, para grabar reg. a reg. después de cada lectura
*      PERFORM grabar_tabla.

      CLEAR: gv_charg, gt_datos, gv_tknum.
      REFRESH: gt_datos.
      CLEAR: gv_okcode2, gv_okcode.

      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'RETURN2000'.
      CLEAR: gv_charg, gt_datos.
      REFRESH: gt_datos.
      CLEAR: gv_okcode2.

      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'RETR2000'. "Eliminar picking
      CLEAR: gv_charg.
      CLEAR: gv_okcode2.

* Comprobamos que existan registros de este transporte
      SELECT COUNT( * ) INTO @DATA(l_count)
        FROM ztsd0002
        WHERE tknum = @gv_tknum.
      IF sy-subrc <> 0 OR l_count = 0.
*        MESSAGE i038(zsd).
*        MESSAGE 'No se han leído bobinas para este transporte' TYPE 'S'. " DISPLAY LIKE 'E'.
        DATA(l_msg3) = CONV string( 'Picking sin bobinas leídas' ).
        MESSAGE l_msg3 TYPE 'S' DISPLAY LIKE 'W'.

        EXIT.
      ENDIF.

      CALL SCREEN 2100.
*      IF ls_ztsd0002_old IS NOT INITIAL.
*
*        gv_lfimg_t = gv_lfimg_t - ls_ztsd0002_old-brgew.
*
*        DELETE FROM ztsd0002
*          WHERE tknum = ls_ztsd0002_old-tknum AND
*                charg = ls_ztsd0002_old-charg.
*        CLEAR ls_ztsd0002_old.
*      ENDIF.
  ENDCASE.
  CLEAR gv_okcode2.

ENDMODULE.                 " USER_COMMAND_2000  INPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_2100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_2100 OUTPUT.
*  SET PF-STATUS 'xxxxxxxx'.
*  SET TITLEBAR 'xxx'.
  CLEAR gv_charg.

ENDMODULE.
