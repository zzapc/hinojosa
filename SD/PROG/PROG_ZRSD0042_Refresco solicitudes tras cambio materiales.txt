***********************************************************************
* TIPO : LISTADO
* TITULO : Refresco solicitudes tras cambio materiales
* DESCRIPCION : Refresco solicitudes tras cambio materiales
*
* AUTOR: Andrés Picazo                                FECHA: 01/03/2020
* ANALISTA: Miguel Pérez Alonso
*
***********************************************************************
REPORT zrsd0042.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: yhp_idx_td010, vbap, vbak, mara, marc.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check FINAL.
  PUBLIC SECTION.
    METHODS: handle_user_command REDEFINITION.
    METHODS: visualizar_objeto REDEFINITION.
ENDCLASS.                    "lcl_alv DEFINITION

*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check     TYPE xfeld,
             lights    TYPE zico_estado_mensaje,
             werks     TYPE werks_d,
             matnr     TYPE matnr,
             maktx     TYPE maktx,
             mtart     TYPE mara-mtart,
             mstae     TYPE mara-mstae,
             mmsta     TYPE marc-mmsta,
             cuobj_mat TYPE yhp_idx_td010-cuobj,
             chaby_mat TYPE yhp_idx_td010-chaby,
             chaat_mat TYPE yhp_idx_td010-chaat,
             aedat_mat TYPE aedat,
             aezet_mat TYPE aezet,
             vbeln     TYPE vbap-vbeln,
             auart     TYPE vbak-auart,
             audat     TYPE vbak-audat,
             kunnr     TYPE vbak-kunnr,
             name1     TYPE kna1-name1,
             kunwe     TYPE yhp_idx_td010-kunwe,
             name1_we  TYPE kna1-name1,
             posnr     TYPE vbap-posnr,
             kdmat     TYPE vbap-kdmat,
             kwmeng    TYPE vbap-kwmeng,
             vrkme     TYPE vbap-vrkme,
             arktx     TYPE vbap-arktx,
             zstatp    TYPE vbap-zstatp,
             abgru     TYPE vbap-abgru,
             posex     TYPE vbap-posex,
             werks_rel TYPE vbap-werks,
             chaby_ofe TYPE yhp_idx_td010-chaby,
             chaat_ofe TYPE yhp_idx_td010-chaat,
             aedat_ofe TYPE aedat,
             aezet_ofe TYPE aezet,
             cuobj     TYPE vbap-cuobj,
             message   TYPE bapi_msg,
             error     TYPE abap_bool,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.
    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv,
          abgru     TYPE vbap-abgru.

    METHODS: main.

    METHODS:  listado,
      seleccionar_datos,
      copiar_posicion CHANGING list TYPE t_listado.

ENDCLASS.                    "REPORT DEFINITION

*------VARIABLES-------------------------------------------------------*
DATA: o_prog TYPE REF TO zcl_report.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_aedat FOR vbap-aedat OBLIGATORY,
                s_chaby FOR yhp_idx_td010-chaby,
                s_matnr FOR vbap-matnr,
                s_werks FOR vbap-werks OBLIGATORY,
                s_auart FOR vbak-auart,
                s_audat FOR vbak-audat,
                s_kunnr FOR vbak-kunnr,
                s_kunwe FOR yhp_idx_td010-kunwe,
                s_vbeln FOR vbak-vbeln,
                s_aedato FOR vbap-aedat,
                s_chabyo FOR yhp_idx_td010-chaby,
                s_zstatp FOR vbap-zstatp,
                s_mtart FOR mara-mtart DEFAULT 'YREM' SIGN E,
                s_mstae FOR mara-mstae DEFAULT '99' SIGN E,
                s_mmsta FOR marc-mmsta DEFAULT '99' SIGN E,
                s_vbtyp FOR vbak-vbtyp DEFAULT 'B',
                s_abgru FOR vbap-abgru DEFAULT '' SIGN I.

SELECTION-SCREEN: SKIP 1.
PARAMETERS: p_valid AS CHECKBOX,
            p_valio AS CHECKBOX.
SELECTION-SCREEN: SKIP 1.
PARAMETERS: p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b01.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.

  METHOD visualizar_objeto.
    DATA l_list TYPE o_prog->t_listado.
    l_list = list.
    CASE column.
      WHEN 'CUOBJ'.
        DATA l_incl2   TYPE incl_bild.
        CALL FUNCTION 'VC_I_DISPLAY_CONFIGURATION'
          EXPORTING
            instance           = l_list-cuobj
            include_screen     = l_incl2
          EXCEPTIONS
            instance_not_found = 1
            internal_error     = 2
            OTHERS             = 3.
        IF sy-subrc NE 0.
          MESSAGE 'Error visualizando configurador' TYPE 'I'.
        ENDIF.
      WHEN 'CUOBJ_MAT'.
        CALL FUNCTION 'VC_I_DISPLAY_CONFIGURATION'
          EXPORTING
            instance           = l_list-cuobj_mat
            include_screen     = l_incl2
          EXCEPTIONS
            instance_not_found = 1
            internal_error     = 2
            OTHERS             = 3.
        IF sy-subrc NE 0.
          MESSAGE 'Error visualizando configurador' TYPE 'I'.
        ENDIF.
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. "handle_double_click


  METHOD handle_user_command.
    DATA: o_bi            TYPE REF TO zcl_ap_batch_input.

    check_ucomm_sel = 'EJEC'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'EJEC'.

        IF line_exists( o_prog->i_listado[ check = 'X' error = 'X' ] ).
          MESSAGE 'No seleccione líneas con errores' TYPE 'I'.
          RETURN.
        ENDIF.

        IF p_valid IS INITIAL.
          LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
            DATA(l_consistente) = 'X'.
            DATA(l_enc) = ''.
            o_prog->o_cache->get_cache_mem( EXPORTING tabla = 'CONS' clave = <listado>-matnr clave2 = <listado>-werks
                                      IMPORTING valor = l_consistente encontrado = l_enc ).
            IF l_enc IS INITIAL.
              l_consistente = NEW zhcl_ai_core( )->es_consistente_cuobj( cuobj = <listado>-cuobj_mat procesar = 'X' ).
              o_prog->o_cache->set_cache_mem( tabla = 'CONS' clave = <listado>-matnr clave2 = <listado>-werks
                                      valor = l_consistente ).
            ENDIF.
            IF l_consistente IS INITIAL.
              <listado>-message = 'Material inconsistente'.
              <listado>-error = 'X'.
              <listado>-lights = zcl_ap_alv=>set_icono( icono = icon_message_critical mensaje = <listado>-message ).
              MESSAGE |Material { <listado>-matnr ALPHA = OUT } { <listado>-werks } inconsistente| TYPE 'I'.
              RETURN.
*            ELSE.
*              l_consistente = NEW zhcl_ai_core( )->es_consistente_cuobj( cuobj = <listado>-cuobj procesar = 'X' ).
*              IF l_consistente IS INITIAL.
*                <listado>-message = 'Oferta inconsistente'.
*                <listado>-error = 'X'.
*                <listado>-lights = zcl_ap_alv=>set_icono( icono = icon_message_critical mensaje = <listado>-message ).
*                MESSAGE |Oferta { <listado>-vbeln ALPHA = OUT } { <listado>-werks } inconsistente| TYPE 'I'.
*                RETURN.
*              ENDIF.
            ENDIF.
          ENDLOOP.
        ENDIF.



        CREATE OBJECT o_bi.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          o_prog->copiar_posicion( CHANGING list = <listado> ).
        ENDLOOP.
        IF sy-subrc = 0.
          refresh( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD. "handle_USER_COMMAND
ENDCLASS. "lcl_alv IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.

    abgru = o_par->get_atr1( 'BLOQUEO' ).
    IF abgru IS INITIAL.
      MESSAGE 'Informe parámetro BLOQUEO' TYPE 'I'.
      RETURN.
    ENDIF.


    seleccionar_datos( ).
    listado( ).

  ENDMETHOD.                    "REPORT

  METHOD seleccionar_datos.
    DATA l_listado TYPE t_listado.

    sgpi_texto( 'Seleccionando materiales' ).
    SELECT marc~matnr, marc~werks, marc~mmsta,
           mara~mtart, mara~mstae,
           yhp_idx_td010~chaby, yhp_idx_td010~chaat,
           yhp_idx_td010~cuobj AS cuobj_mat
      FROM yhp_idx_td010 JOIN marc ON marc~cuobj = yhp_idx_td010~cuobj
                         JOIN mara ON mara~matnr = marc~matnr
     INTO TABLE @DATA(i_mat)
    WHERE marc~werks IN @s_werks
      AND marc~matnr IN @s_matnr
      AND dconf IN @s_aedat
      AND chaby IN @s_chaby
      AND object_type = 'MARC'
      AND mtart IN @s_mtart
      AND mstae IN @s_mstae
      AND mmsta IN @s_mmsta
    ORDER BY marc~matnr, marc~werks.

    CHECK sy-subrc = 0.

    sgpi_texto( 'Seleccionando ofertas' ).
    SELECT vbap~matnr, vbap~werks, vbap~vbeln, vbap~posnr, chaby, chaat, vbap~abgru, vbap~posex,
           vbak~auart, vbak~audat, vbak~kunnr, kna1~name1, vbap~cuobj, vbap~zstatp,
           yhp_idx_td010~kunwe, kna1_we~name1 AS name1_we,
           vbap~kwmeng, vbap~vrkme, vbap~kdmat, vbap~arktx,
           vbap~vgbel, vbap~vgpos,  plavo AS werks_rel
      FROM yhp_idx_td010 JOIN vbap ON yhp_idx_td010~cuobj = vbap~cuobj
                         JOIN vbak ON vbak~vbeln = vbap~vbeln
                         JOIN kna1 ON kna1~kunnr = vbak~kunnr
              LEFT OUTER JOIN kna1 AS kna1_we ON kna1_we~kunnr = yhp_idx_td010~kunwe
      INTO TABLE @DATA(i_ofe)
      FOR ALL ENTRIES IN @i_mat
     WHERE vbap~matnr = @i_mat-matnr
       AND vbap~werks = @i_mat-werks
       AND yhp_idx_td010~chaat < @i_mat-chaat
       AND object_type = 'VBPS'
       AND vbak~vbtyp IN @s_vbtyp
       AND vbak~auart IN @s_auart
       AND vbak~audat IN @s_audat
       AND vbak~kunnr IN @s_kunnr
       AND vbak~vbeln IN @s_vbeln
       AND vbap~abgru IN @s_abgru
       AND vbap~zstatp IN @s_zstatp
       AND yhp_idx_td010~dconf IN @s_aedato
       AND yhp_idx_td010~chaby IN @s_chabyo
       AND yhp_idx_td010~kunwe IN @s_kunwe.
    LOOP AT i_ofe ASSIGNING FIELD-SYMBOL(<ofe>).
      CLEAR <ofe>-werks_rel.
    ENDLOOP.


    sgpi_texto( 'Seleccionando relocadas' ).
    SELECT vbap~matnr, vbap~werks, vbap~vbeln, vbap~posnr, vbap~abgru, vbap~posex,
           vbak~auart, vbak~audat, vbak~kunnr, kna1~name1, vbap~cuobj, vbap~zstatp,
           vbap~kwmeng, vbap~vrkme, vbap~kdmat, vbap~arktx,
           vbap~vgbel, vbap~vgpos
      FROM vbap JOIN vbak ON vbak~vbeln = vbap~vbeln
                         JOIN kna1 ON kna1~kunnr = vbak~kunnr
      INTO TABLE @DATA(i_ofe_relocated)
      FOR ALL ENTRIES IN @i_mat
     WHERE vbap~matnr = @i_mat-matnr
       AND vbap~werks NE @i_mat-werks
       AND vbak~vbtyp IN @s_vbtyp
       AND vbak~auart IN @s_auart
       AND vbak~audat IN @s_audat
       AND vbak~kunnr IN @s_kunnr
       AND vbak~vbeln IN @s_vbeln
       AND vbap~abgru IN @s_abgru
       AND vbap~zstatp IN @s_zstatp
       AND vbap~vgbel NE ''.

    DATA l_ofr LIKE LINE OF i_ofe.
    LOOP AT i_ofe_relocated ASSIGNING FIELD-SYMBOL(<ofr>).
      CLEAR l_ofr.
      MOVE-CORRESPONDING <ofr> TO l_ofr.
      SELECT SINGLE vbap~cuobj, chaby, chaat, yhp_idx_td010~kunwe, kna1_we~name1 AS name1_we
        FROM yhp_idx_td010 JOIN vbap ON yhp_idx_td010~cuobj = vbap~cuobj
        LEFT OUTER JOIN kna1 AS kna1_we ON kna1_we~kunnr = yhp_idx_td010~kunwe
        INTO CORRESPONDING FIELDS OF @l_ofr
       WHERE vbap~vbeln = @<ofr>-vgbel
         AND vbap~posnr = @<ofr>-vgpos
         AND vbap~cuobj NE ''.
      IF sy-subrc = 0.
        READ TABLE i_mat ASSIGNING FIELD-SYMBOL(<mat>) WITH KEY matnr = <ofr>-matnr.
        IF sy-subrc = 0.
          IF l_ofr-chaat < <mat>-chaat.
            l_ofr-werks_rel = <mat>-werks.
            APPEND l_ofr TO i_ofe.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.

    SORT i_ofe BY matnr werks vbeln posnr.

    IF p_valid IS INITIAL.
      sgpi_texto( 'Generando informe' ).
    ELSE.
      sgpi_texto( 'Verificando consistencia de materiales' ).
    ENDIF.
    LOOP AT i_mat ASSIGNING <mat>.
      CLEAR l_listado.
      MOVE-CORRESPONDING <mat> TO l_listado.
      l_listado-maktx = get( tabla = 'MAKT' clave = <mat>-matnr ).
      l_listado-chaby_mat = <mat>-chaby.
      l_listado-chaat_mat = <mat>-chaat.
      CONVERT TIME STAMP <mat>-chaat TIME ZONE sy-zonlo
        INTO DATE l_listado-aedat_mat TIME l_listado-aezet_mat.

      LOOP AT i_ofe ASSIGNING <ofe> WHERE matnr = <mat>-matnr
                                                   AND ( werks = <mat>-werks
                                                       OR werks_rel = <mat>-werks ).
        MOVE-CORRESPONDING <ofe> TO l_listado.
        l_listado-chaby_ofe = <ofe>-chaby.
        l_listado-chaat_ofe = <ofe>-chaat.
        IF <ofe>-chaat IS INITIAL.
          l_listado-message = 'Posición sin datos de configurador en tabla YHP_IDX_TD010'.
          l_listado-error = 'X'.
          l_listado-lights = zcl_ap_alv=>set_icono( icono = icon_warning mensaje = l_listado-message ).
        ELSE.
          CONVERT TIME STAMP <ofe>-chaat TIME ZONE sy-zonlo
            INTO DATE l_listado-aedat_ofe TIME l_listado-aezet_ofe.
        ENDIF.
        IF NOT l_listado-abgru IS INITIAL.
          l_listado-message = 'Posición rechazada'.
          l_listado-error = 'X'.
          l_listado-lights = zcl_ap_alv=>set_icono( icono = icon_delete mensaje = l_listado-message ).
        ELSE.
          DATA(l_consistente) = 'X'.
          DATA(l_enc) = ''.
          DATA l_error_cons TYPE bapi_msg.
          CLEAR l_error_cons.
          IF p_valid = 'X'.
            o_cache->get_cache_mem( EXPORTING tabla = 'CONS' clave = l_listado-matnr clave2 = l_listado-werks
                                      IMPORTING valor = l_consistente valor2 = l_error_cons encontrado = l_enc ).
            IF l_enc IS INITIAL.
              l_consistente = NEW zhcl_ai_core( )->es_consistente_cuobj( EXPORTING cuobj = l_listado-cuobj_mat procesar = 'X'
                                                                         IMPORTING message = l_error_cons ).
              o_cache->set_cache_mem( tabla = 'CONS' clave = l_listado-matnr clave2 = l_listado-werks
                                      valor = l_consistente valor2 = l_error_cons ).
            ENDIF.
          ENDIF.

          IF l_consistente = ''.
            IF l_error_cons IS INITIAL.
              l_listado-message = 'Material inconsistente'.
            ELSE.
              l_listado-message = l_error_cons.
            ENDIF.

            l_listado-error = 'X'.
            l_listado-lights = zcl_ap_alv=>set_icono( icono = icon_message_critical mensaje = l_listado-message ).
*            ELSEIF NEW zhcl_ai_core( )->es_consistente_cuobj( l_listado-cuobj ) = ''.
*              l_listado-message = 'Posición pedido inconsistente'.
*              l_listado-lights = zcl_ap_alv=>set_icono( icono = icon_warning mensaje = l_listado-message ).
          ELSE.
* Verificamos consistencia a nivel de oferta
            IF p_valio = 'X'.
              l_consistente = NEW zhcl_ai_core( )->es_consistente_cuobj( EXPORTING cuobj = l_listado-cuobj procesar = 'X'
                                                                         IMPORTING message = l_error_cons ).

              IF l_consistente = ''.
                IF l_error_cons IS INITIAL.
                  l_listado-message = 'Oferta inconsistente'.
                ELSE.
                  l_listado-message = |Oferta inconsistente: { l_error_cons }|.
                ENDIF.

                l_listado-error = 'X'.
                l_listado-lights = zcl_ap_alv=>set_icono( icono = icon_message_critical mensaje = l_listado-message ).
              ENDIF.
            ENDIF.
            IF l_consistente IS INITIAL.
              IF NOT l_listado-werks_rel IS INITIAL.
                l_listado-message = 'Centro relocado'.
                l_listado-lights = zcl_ap_alv=>set_icono( icono = icon_warning mensaje = l_listado-message ).
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
        APPEND l_listado TO i_listado.
      ENDLOOP.
    ENDLOOP.
    SORT i_listado.

  ENDMETHOD.                    "seleccionar_datos


  METHOD listado.

    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Bloquear y duplicar posición' icon = icon_copy_object ucomm = 'EJEC' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page( ).

    o_alv->set_field_hotspot( campo = 'MATNR,VBELN,CUOBJ,CUOBJ_MAT' auto = 'X' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK,CHAAT_MAT,CHAAT_OFE,ERROR' ).
    o_alv->set_field_noout( 'ARKTX' ).

    o_alv->set_field_text( campo = 'CHABY_MAT' valor = 'MatModPor' valor2 = 'Material modificado por' ).
    o_alv->set_field_text( campo = 'CHABY_OFE' valor = 'OfeModPor' valor2 = 'Oferta modificado por' ).
    o_alv->set_field_text( campo = 'AEDAT_MAT' valor = 'FModMat' valor2 = 'Fecha modifición material' ).
    o_alv->set_field_text( campo = 'AEZET_MAT' valor = 'HModMat' valor2 = 'Hora modifición material' ).
    o_alv->set_field_text( campo = 'AEDAT_OFE' valor = 'FModOfe' valor2 = 'Fecha modifición oferta' ).
    o_alv->set_field_text( campo = 'AEZET_OFE' valor = 'HModOfe' valor2 = 'Hora modifición oferta' ).
    o_alv->set_field_text( campo = 'WERKS_REL' valor = 'CConf' valor2 = 'Centro configuración' ).

    o_alv->set_orden( 'MATNR,MAKTX,CHABY_MAT,AEDAT_MAT,AEZET_MAT,WERKS,VBELN,AUART,AUDAT,KUNNR,NAME1,KUNWE,NAME1_WE,POSNR' ).

    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).


  ENDMETHOD.                    "

  METHOD copiar_posicion.
    DATA: o_bi      TYPE REF TO zcl_ap_batch_input,
          l_mensaje TYPE bapireturn1-message,
          vbkd      TYPE vbkd.
    CREATE OBJECT o_bi.

    SELECT MAX( posnr ) FROM vbap
      INTO @DATA(l_max_posnr_ini)
     WHERE vbeln = @list-vbeln.
    o_bi->inicio( ).

    CLEAR vbap.
    SELECT SINGLE zzsupanm2 zzimporte_troquel zzimporte_cliche posex FROM vbap
      INTO CORRESPONDING FIELDS OF vbap
     WHERE vbeln = list-vbeln
       AND posnr = list-posnr.

    SELECT SINGLE bstkd FROM vbkd
      INTO CORRESPONDING FIELDS OF vbkd
     WHERE vbeln = list-vbeln
       AND posnr = list-posnr.

    DATA l_posnr_txt(6).
    SELECT MAX( posnr ) FROM vbap
      INTO l_posnr_txt
     WHERE vbeln = list-vbeln.
    ADD 10 TO l_posnr_txt.
    __quitar_ceros l_posnr_txt.


* Documento de ventas    Acceso    Modificar
    o_bi->dynpro( program = 'SAPMV45A' dynpro = '0102' okcode = '=UER1').
    o_bi->campos( campo = 'VBAK-VBELN' valor = list-vbeln ). " Documento de ventas


    o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '=POPO').
    o_bi->campos( campo = 'VBKD-PRSDT' valor = sy-datum ). "APC20241028 Cambiamos la fecha de precio a fecha de sistema


* Documento de ventas    Ventana   Posicionar    Posición
    o_bi->dynpro( program = 'SAPMV45A' dynpro = '0251' okcode = '=POSI').
    o_bi->campos( campo = 'RV45A-POSNR' valor = list-posnr ). " Número de posición del documento comercial

    o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '/00').
    o_bi->campos( campo = 'VBAP-ABGRU(01)' valor = abgru ). " Texto breve posición de pedido de cliente

    o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '=POAN').

    o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '/00').
    o_bi->campos( campo = 'VBAP-POSNR(02)' valor = l_posnr_txt ). " Número de material
    o_bi->campos( campo = 'RV45A-MABNR(02)' valor = list-matnr ). " Número de material
    o_bi->campos( campo = 'VBAP-ARKTX(02)' valor = list-arktx ). " Texto breve posición de pedido de cliente
    o_bi->campos( campo = 'VBAP-KDMAT(02)' valor = list-kdmat ). " Número de material del cliente
    o_bi->campos( campo = 'RV45A-KWMENG(02)' valor = list-kwmeng ). " Cantidad de pedido acumulada (en unidades de venta)
    o_bi->campos( campo = 'VBAP-VRKME(02)' valor = list-vrkme ). " Unidad de medida de venta
    o_bi->campos( campo = 'VBAP-WERKS(02)' valor = list-werks ). " Centro (propio o externo)
    o_bi->campos( campo = 'VBAP-ZSTATP(02)' valor = list-zstatp ). "Estado
    o_bi->campos( campo = 'VBAP-ZZSUPANM2(02)' valor = vbap-zzsupanm2 ). "Cantidad anual
    o_bi->campos( campo = 'VBAP-ZZIMPORTE_TROQUEL(02)' valor = vbap-zzimporte_troquel ). "Importe troquel
    o_bi->campos( campo = 'VBAP-ZZIMPORTE_CLICHE(02)' valor = vbap-zzimporte_cliche ). "Importe cliché
    o_bi->campos( campo = 'VBKD-BSTKD(02)' valor = vbkd-bstkd ). "Pedido otigen
    o_bi->campos( campo = 'VBAP-POSEX(02)' valor = l_posnr_txt ). "Posición pedido origen



    o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '=SICH').

    SET PARAMETER ID 'ZPERM_CAMBIO_STATUS' FIELD 'X'.
    list-message = o_bi->llamar_transaccion( tcode = 'VA22' modo = modo_ct ).
    SET PARAMETER ID 'ZPERM_CAMBIO_STATUS' FIELD ''.

    SELECT MAX( posnr ) FROM vbap
      INTO @DATA(l_max_posnr_fin)
     WHERE vbeln = @list-vbeln
       AND posnr > @l_max_posnr_ini.

    IF l_max_posnr_fin IS INITIAL.
      list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
    ELSE.
      list-message = |Se ha bloqueado la posición y creado la nueva { l_max_posnr_fin ALPHA = OUT }|.
      list-lights = zcl_ap_alv=>set_icono( icono = icon_green_light mensaje = list-message ).
    ENDIF.

  ENDMETHOD.

ENDCLASS.                    "REPORT IMPLEMENTATION

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.

  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = 'X' ).

  IF zcl_usuario=>es_usuario_sistemas( ).
    PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Parámetros' '' ''.
  ENDIF.
  PERFORM add_button IN PROGRAM zap_status USING 'M02' 'Log'(log) '' ''.

  o_prog->o_alv =  NEW #( status             = 'STANDARD_ALV_DYN'
                          status_prog        = 'ZAP_STATUS'
                          top_of_page_auto   = 'X'
                          top_of_page_titulo = 'X'
                          o_dev              = o_prog ).


  p_vari = o_prog->o_alv->get_default_layout( ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN OUTPUT.

  o_prog->handle = ''.
  IF o_prog->o_alv IS INITIAL OR o_prog->handle NE o_prog->aux1.
    o_prog->aux1 = o_prog->handle.
    IF NOT o_prog->o_alv IS INITIAL.
      o_prog->o_alv->free( ).
      CLEAR o_prog->o_alv.
    ENDIF.
    o_prog->o_alv =  NEW #( status           = 'STANDARD_ALV_DYN'
                          status_prog        = 'ZAP_STATUS'
                          top_of_page_auto   = 'X'
                          top_of_page_titulo = 'X'
                          handle             = o_prog->handle
                          o_dev              = o_prog ).
    p_vari = o_prog->o_alv->get_default_layout( ).
  ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
      o_prog->validar_centro( r_werks = s_werks[] obligatorio = '' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

  o_prog->main( ).
