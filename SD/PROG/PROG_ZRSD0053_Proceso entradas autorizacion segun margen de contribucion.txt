***********************************************************************
* TIPO : LISTADO
* TITULO : Proceso entradas autorización según margen de contribución
* DESCRIPCION : Proceso entradas autorización según margen de contribución
*
* AUTOR: Andrés Picazo                                FECHA: 12/02/2025
* ANALISTA: Miguel Perez
*
***********************************************************************
REPORT zrsd0053.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: ztsd0014, vbap.

INCLUDE rsdbc1xx.
*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_alv FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check  TYPE xfeld,
             lights TYPE zico_estado_mensaje.
             INCLUDE TYPE ztsd0014.
           TYPES: END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv ##NEEDED.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos,
      procesar CHANGING list TYPE t_listado.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA o_prog TYPE REF TO zcl_report.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_vkorg FOR ztsd0014-vkorg,
                s_vbeln FOR ztsd0014-vbeln,
                s_statp FOR ztsd0014-stat,
                s_statu FOR ztsd0014-status DEFAULT ''.
SELECTION-SCREEN SKIP 1.
PARAMETERS: p_ejec AS CHECKBOX.
SELECTION-SCREEN SKIP 1.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b01.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA l_list TYPE o_prog->t_listado.

    l_list = list.
    CASE column.
*      WHEN 'BUKRS'.
*        MESSAGE l_list-bukrs TYPE 'I'.
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    check_ucomm_sel = 'EJEC,LOG'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'EJEC'.
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
          o_prog->procesar( CHANGING list = <listado> ).
        ENDLOOP.
        IF sy-subrc = 0.
          refresh( ).
        ENDIF.
      WHEN 'LOG'.
        DATA: r_clave TYPE RANGE OF zlog-clave,
              r_prog  TYPE RANGE OF sy-cprog.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = <listado>-vbeln ) TO r_clave.
        ENDLOOP.
        IF sy-subrc = 0.
          r_prog = VALUE #( ( option = 'CP' sign = 'I' low = 'AUTORIZACION_MARGEN_CONTRIBUCION*' ) ).
          SUBMIT zlog
          VIA SELECTION-SCREEN
           WITH s_proces = 'EXITS'
           WITH s_progra IN r_prog
           WITH s_clave IN r_clave.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
      procesar( CHANGING list = <listado> ).
    ENDLOOP.
    IF p_ejec IS INITIAL.
      listado( ).
    ENDIF.
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    DATA l_icono TYPE icon_d.
    sgpi_texto( 'Seleccionando datos'(sda) ).

    SELECT * FROM ztsd0014
      INTO CORRESPONDING FIELDS OF TABLE i_listado
     WHERE vkorg  IN s_vkorg
       AND vbeln  IN s_vbeln
       AND stat   IN s_statp
       AND status IN s_statu
     ORDER BY PRIMARY KEY.

    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

      CASE <listado>-status.
        WHEN 'X'. l_icono = icon_okay.
        WHEN 'E'. l_icono = icon_red_light.
        WHEN 'N'. l_icono = icon_dummy.
        WHEN ''.
          IF <listado>-message IS INITIAL.
            l_icono = icon_yellow_light.
          ELSE.
            l_icono = icon_warning.
          ENDIF.
          <listado>-check = p_ejec.
      ENDCASE.


      set_status_list( EXPORTING message = <listado>-message icono = l_icono CHANGING list = <listado> ).
    ENDLOOP.

    SORT i_listado.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Ejecutar'(eje)  icon = icon_execute_object ucomm = 'EJEC' ).
    o_alv->add_button( button = 'F02' text = 'Log' icon = icon_list ucomm = 'LOG' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page( ).

    o_alv->set_field_hotspot( campo = 'VBELN' auto = 'X' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK,MANDT' ).

    o_alv->set_orden( 'VBELN,POSNR,ERDAT,ERZET' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.

  METHOD procesar.
    DATA: l_return TYPE  bapiret2,
          i_var    TYPE apb_lpd_t_key_value.

* Por si acaso, verifico que no estuviera y procesado previamente.
    SELECT SINGLE status FROM ztsd0014
      INTO @DATA(l_status)
     WHERE vbeln  = @list-vbeln
       AND posnr  = @list-posnr
       AND erdat  = @list-erdat
       AND erzet  = @list-erzet.
    IF l_status = 'X' OR l_status = 'M'.
      IF p_ejec IS INITIAL.
        MESSAGE |Pedido { list-vbeln } posición { list-posnr } ya estaba procesada| TYPE 'I'.
      ENDIF.
      RETURN.
    ENDIF.

    DATA(o_exit) = NEW zcl_exits_sd(
        exit    = 'AUTORIZACION_MARGEN_CONTRIBUCION'
        include = 'ZRSD0053'
        clave   = list-vbeln ).

    SELECT SINGLE ernam, kunnr FROM vbak
      INTO (@DATA(l_ernam), @DATA(l_kunnr))
     WHERE vbeln = @list-vbeln.
    IF sy-subrc NE 0.
      list-message = o_exit->log(  p1 = 'No existe el pedido' ).
      list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
      UPDATE ztsd0014
         SET status = 'E'
             message = list-message
             aedat = sy-datum
             aezet = sy-uzeit
       WHERE vbeln  = list-vbeln
         AND posnr  = list-posnr
         AND erdat  = list-erdat
         AND erzet  = list-erzet.
      RETURN.
    ENDIF.

    SELECT SINGLE objnr, arktx, zstatp FROM vbap
      INTO CORRESPONDING FIELDS OF @vbap
     WHERE vbeln = @list-vbeln
       AND posnr = @list-posnr.
    IF sy-subrc NE 0.
      list-message = o_exit->log(  p1 = 'No existe la posición' ).
      list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
      UPDATE ztsd0014
         SET status = 'E'
             message = list-message
             aedat = sy-datum
             aezet = sy-uzeit
       WHERE vbeln  = list-vbeln
         AND posnr  = list-posnr
         AND erdat  = list-erdat
         AND erzet  = list-erzet.
      RETURN.
    ENDIF.

    DATA l_clave_bloqueo TYPE sy-cprog.
    l_clave_bloqueo = |MC-{ list-vbeln }-{ list-posnr }|.
    IF zcl_ap_utils=>bloquear_programa( cprog = l_clave_bloqueo intentos = 1 espera = 0 ).
      list-message = o_exit->log(  p1 = 'Proceso bloqueado' ).
      list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
      RETURN.
    ENDIF.


    i_var = VALUE #( ( key = '{PEDIDO}' value = condense( |{ list-vbeln ALPHA = OUT }| ) )
                     ( key = '{OFERTA}' value = condense( |{ list-vbeln ALPHA = OUT }| ) )
                     ( key = '{MERCADO}' value = |{ list-brsch }| )
                     ( key = '{CLIENTE}' value = condense( |{ l_kunnr ALPHA = OUT }| ) )
                     ( key = '{NOMBRE_CLIENTE}' value = zcl_ap_cliente=>get_nombre( l_kunnr ) )
                   ).


    o_exit->log( p1 = |Se va  procesar pos. { list-posnr ALPHA = OUT } para mercado { list-brsch } TPRIN { list-tprin } ZP10 = { list-kwert }| msgty = 'S' ).
    IF NOT list-stat_new IS INITIAL AND
      list-stat_new NE list-stat.

      IF list-stat_new = vbap-zstatp.
        list-message = o_exit->log(  p1 = 'La posición ya estaba en estado' p2 = list-stat_new ).
        list-lights = zcl_ap_alv=>set_icono( icono = icon_warning mensaje = list-message ).
        UPDATE ztsd0014
           SET status = 'N'
               message = list-message
             aedat = sy-datum
             aezet = sy-uzeit
         WHERE vbeln  = list-vbeln
           AND posnr  = list-posnr
           AND erdat  = list-erdat
           AND erzet  = list-erzet.
        COMMIT WORK AND WAIT.
        RETURN.
      ELSE.
        CALL FUNCTION 'ZSD_UPD_USER_STATUS_4_VBAP'
          EXPORTING
            i_objnr       = vbap-objnr
            i_new_status  = list-stat_new
            i_stat_memory = list-stat
*           I_COMMIT      =
          IMPORTING
            e_return      = l_return
          EXCEPTIONS
            no_changed    = 1
            OTHERS        = 2.
        IF sy-subrc = 0 AND l_return-type NE 'E'.
          list-message = zcl_ap_pedido_sd=>espera_si_bloqueado( vbeln = list-vbeln ).
          IF NOT list-message  IS INITIAL.
            zcl_ap_utils=>desbloquear_programa( cprog = l_clave_bloqueo ).
            o_exit->log( p1 = list-message msgty = 'E' ).
            list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
            UPDATE ztsd0014
               SET message = list-message
                   aedat = sy-datum
                   aezet = sy-uzeit
             WHERE vbeln  = list-vbeln
               AND posnr  = list-posnr
               AND erdat  = list-erdat
               AND erzet  = list-erzet.
            COMMIT WORK.
            RETURN.
          ELSE.

            o_exit->log( p1 = |Cambiamos estado desde { list-stat } a { list-stat_new }| msgty = 'S' ).

            DATA: o_bi      TYPE REF TO zcl_ap_batch_input.
            CREATE OBJECT o_bi.

            o_bi->inicio( ).

            o_bi->dynpro( program = 'SAPMV45A' dynpro = '0102' okcode = '=UER1').
            o_bi->campos( campo = 'VBAK-VBELN' valor = list-vbeln ). " Documento de ventas


            o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '=POPO').

            o_bi->dynpro( program = 'SAPMV45A' dynpro = '0251' okcode = '=POSI').
            o_bi->campos( campo = 'RV45A-POSNR' valor = list-posnr ). " Número de posición del documento comercial

            o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '/00').
            o_bi->campos( campo = 'VBAP-ZSTATP(01)' valor = list-stat_new ).

            o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '=SICH').
            SET PARAMETER ID 'ZPERM_CAMBIO_STATUS' FIELD 'X'.
            DO 30 TIMES.
              DATA(msg) = o_bi->llamar_transaccion( tcode = 'VA22' modo = modo_ct ).
              IF msg CS 'tratando'.
                WAIT UP TO 1 SECONDS.
              ELSE.
                EXIT.
              ENDIF.
            ENDDO.

            SELECT SINGLE zstatp FROM vbap
              INTO @DATA(l_zstatp)
             WHERE vbeln = @list-vbeln
               AND posnr = @list-posnr.
            IF l_zstatp = list-stat_new.
              DATA(l_mod_ped) = 'X'.
              list-message = o_exit->log( p1 = |Se modifica correctamente por call transaction| msgty = 'S' ).
              list-lights = zcl_ap_alv=>set_icono( icono = icon_green_light mensaje = list-message ).
            ELSE.
              list-message = o_exit->log( p1 = |Error en call transaction { msg }| msgty = 'E' ).
              list-message = o_exit->log( p1 = |El valor del status en pedido { l_zstatp } no coincide con el que queríamos modificar { list-stat_new }| msgty = 'W' ).
              list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
              DATA(l_error_cambio_estado) = 'X'.

              IF list-message CS 'no permitido'.
                l_status = 'E'.
              ELSE.
                LOOP AT o_bi->i_mensajes ASSIGNING FIELD-SYMBOL(<msgbdc>) WHERE msgtyp = 'W' AND msgid = '00' AND msgnr = '001' AND msgv1 CS 'No se permite pasar al'.
                  l_status = 'E'.
                  list-message = <msgbdc>-msgv1 && <msgbdc>-msgv2 && <msgbdc>-msgv3 && <msgbdc>-msgv4.
                  EXIT.
                ENDLOOP.
                IF sy-subrc NE 0.
                  CLEAR l_status.
                ENDIF.
              ENDIF.

              UPDATE ztsd0014
                 SET status = l_status
                     message = list-message
                     aedat = sy-datum
                     aezet = sy-uzeit
               WHERE vbeln  = list-vbeln
                 AND posnr  = list-posnr
                 AND erdat  = list-erdat
                 AND erzet  = list-erzet.
            ENDIF.
          ENDIF.
        ELSE.
          list-message = o_exit->log( p1 = |No se permiten cambios de estado desde { list-stat } a { list-stat_new }: { l_return-message }| msgty = 'E' ).
          l_error_cambio_estado = 'X'.
          list-lights = zcl_ap_alv=>set_icono( icono = icon_warning mensaje = list-message ).
          UPDATE ztsd0014
             SET status = 'N'
                 message = list-message
             aedat = sy-datum
             aezet = sy-uzeit
           WHERE vbeln  = list-vbeln
             AND posnr  = list-posnr
             AND erdat  = list-erdat
             AND erzet  = list-erzet.

        ENDIF.
      ENDIF.
    ENDIF.
    IF l_error_cambio_estado IS INITIAL.
      IF NOT list-grupo IS INITIAL AND NOT list-codigo IS INITIAL AND NOT list-email IS INITIAL.
        o_exit->log( p1 = |Enviamos mail { list-codigo } a { list-email }| msgty = 'S' ).

        DELETE i_var WHERE key = '{POSICION}' OR key = '{MATERIAL}' OR key = '{MDC_KM2}' OR key = '{ZP10}' OR key = '{PRECIO}'.

        APPEND VALUE #( key = '{POSICION}' value = condense( |{ list-posnr ALPHA = OUT }| ) ) TO i_var.
        APPEND VALUE #( key = '{MATERIAL}' value = vbap-arktx ) TO i_var.
        APPEND VALUE #( key = '{MDC_KM2}' value = |{ list-kbetr }| ) TO i_var.
        APPEND VALUE #( key = '{ZP10}' value = |{ list-kwert }| ) TO i_var.
        IF NOT list-zprc_kbetr IS INITIAL.
          APPEND VALUE #( key = '{PRECIO}' value = |{ list-zprc_kbetr }| ) TO i_var.
        ELSE.
          APPEND VALUE #( key = '{PRECIO}' value = 'NO ENCONTRADO' ) TO i_var.
        ENDIF.


        DATA(l_email) = list-email.
        IF l_email = 'CREADOR_OFERTA'.
          l_email = zcl_ap_usuario=>get_email( l_ernam ).
          IF l_email IS INITIAL.
            l_email = l_ernam.
          ENDIF.
        ENDIF.

        zcl_ap_envio_mail=>mail( EXPORTING grupo = list-grupo
                                           codigo = list-codigo
                                           direccion = l_email
                                           variables = i_var
                                           parar_en_error = ''
                                           clave = list-vbeln
                                 IMPORTING message = DATA(l_msg_mail) ).
        IF NOT l_msg_mail IS INITIAL.
          list-message = o_exit->log( p1 = |Error enviando mail { l_msg_mail }| msgty = 'E' ).
          list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
          DATA(l_error_mail) = 'X'.
        ELSE.
          DATA(l_mail_ok) = 'X'.
          msg = o_exit->log( p1 = |Se ha enviado mail a  { l_email }| msgty = 'S' ).
          IF list-message IS INITIAL.
            list-message = msg.
          ENDIF.
          list-lights = zcl_ap_alv=>set_icono( icono = icon_green_light mensaje = list-message ).
        ENDIF.
      ENDIF.
    ENDIF.

    IF ( l_mod_ped = 'X' OR l_mail_ok = 'X' ) AND l_error_cambio_estado IS INITIAL AND l_error_mail IS INITIAL.
      UPDATE ztsd0014
         SET status = 'X'
                      aedat = sy-datum
           aezet = sy-uzeit
       WHERE vbeln  = list-vbeln
         AND posnr  = list-posnr
         AND erdat  = list-erdat
         AND erzet  = list-erzet.

    ENDIF.

    zcl_ap_utils=>desbloquear_programa( cprog = l_clave_bloqueo ).


    COMMIT WORK AND WAIT.
  ENDMETHOD.

ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  IF zcl_usuario=>es_usuario_sistemas( ).
    PERFORM add_button IN PROGRAM zap_status
            USING 'M01' 'Parámetros' '' ''.
  ENDIF.

  PERFORM add_button IN PROGRAM zap_status USING 'M02' 'Log'(log) '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         o_dev              = o_prog ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).
  IF o_prog->variante_forzada IS INITIAL.
    p_vari = o_prog->o_alv->get_default_layout( ).
    o_prog->parametros_por_defecto( CHANGING r_vkorg = s_vkorg[] ).
  ENDIF.


AT SELECTION-SCREEN OUTPUT.
  o_prog->selection_screen_output( CHANGING current_scr = current_scr ).


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).

    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.


AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

* Fijamos semáforo para intentar lanzar lo menos veces posible el proceso desde el WF
  zcl_ap_temp=>set_st( clave = 'ZRSD0053' ).
  o_prog->main( ).
  zcl_ap_temp=>delete_st( clave = 'ZRSD0053' ).
