*&---------------------------------------------------------------------*
*&  Include           ZSSDD306_MODU
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0200 OUTPUT.

  SET PF-STATUS '0100'.
  SET TITLEBAR '0100'.

*  PERFORM cleardata.

ENDMODULE.                 " STATUS_0200  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  RANGES s_kunnr FOR kna1-kunnr.
  RANGES s_gjahr FOR bkpf-gjahr.
  RANGES s_fecha FOR bkpf-budat.

  CLEAR s_kunnr[].
  s_kunnr-option = 'EQ'.
  s_kunnr-sign = 'I'.
  s_kunnr-low = so_kunnr.
  APPEND s_kunnr.

  CASE ok_code.
    WHEN 'EXTRA'.

      CLEAR s_gjahr[].
      s_gjahr-option = 'EQ'.
      s_gjahr-sign = 'I'.
      s_gjahr-low = sy-datum(4).
      APPEND s_gjahr.

      CLEAR s_fecha[].
      s_fecha-option = 'BT'.
      s_fecha-sign = 'I'.
      s_fecha-low = '20100101'.
      s_fecha-high = sy-datum.
      APPEND s_fecha.

*      SET PARAMETER ID 'KUN' FIELD so_kunnr.
*      CALL TRANSACTION 'ZSFI006'.
      "SET PARAMETER ID 'BUK' FIELD
      SUBMIT zsfid305 VIA SELECTION-SCREEN
      WITH dd_kunnr IN s_kunnr
      WITH dd_bukrs IN so_bukrs
      WITH dd_stida = sy-datum
      WITH dd_gjahr IN s_gjahr
      WITH fecha IN s_fecha
      AND RETURN.

    WHEN 'FBLAB'.
      SUBMIT rfitemar WITH dd_kunnr IN s_kunnr
                      WITH dd_bukrs IN so_bukrs
                      WITH x_aisel = space
                      WITH x_clsel = space
                      WITH pa_stida = sy-datum
                      WITH x_opsel = 'X'
                      WITH x_norm = 'X'
                      WITH x_shbv = 'X'
      AND RETURN.
    WHEN 'FBLTOT'.
      SUBMIT rfitemar WITH dd_kunnr IN s_kunnr
                      WITH dd_bukrs IN so_bukrs
                      WITH x_aisel = 'X'
                      WITH x_clsel = space
                      WITH x_opsel = space
                      WITH x_norm = 'X'
                      WITH x_shbv = 'X'
      AND RETURN.

    WHEN 'KUST'."Hoja maestra del cliente
      SUBMIT rvkusta1 WITH kunnr IN s_kunnr
                      WITH vkorg = '1000'
                      WITH vtweg = '10'
                      WITH spart = '10'
      AND RETURN.
    WHEN 'KRED'.          " View Credit Master data (FD32)
      SET PARAMETER ID 'KUN' FIELD so_kunnr.
      SET PARAMETER ID 'KKB' FIELD ikkber.
      CALL TRANSACTION 'FD32' AND SKIP FIRST SCREEN.
    WHEN 'VKUN'.          " View Customer Master data (FD03)
      SET PARAMETER ID 'KUN' FIELD so_kunnr.
      IF knc1-bukrs <> '*'.
        SET PARAMETER ID 'BUK' FIELD knc1-bukrs.
        CALL TRANSACTION 'XD03' AND SKIP FIRST SCREEN.
      ELSE.
        CALL TRANSACTION 'XD03'.
      ENDIF.
    WHEN 'CKUN'.          " Change Customer Master data (FD02)
      SET PARAMETER ID 'KUN' FIELD so_kunnr.
      IF knc1-bukrs <> '*'.
        SET PARAMETER ID 'BUK' FIELD knc1-bukrs.
        CALL TRANSACTION 'XD02' AND SKIP FIRST SCREEN.
      ELSE.
        CALL TRANSACTION 'XD02'.
      ENDIF.
    WHEN 'FBLK'.          " PAs x área de control
      DATA i TYPE i.
      DATA: ti_t001_a TYPE TABLE OF t001 WITH HEADER LINE.
      CLEAR: ti_t001_a[], i.
      SELECT * INTO TABLE ti_t001_a FROM t001
        WHERE bukrs IN so_bukrs.
      DESCRIBE TABLE ti_t001_a LINES i.
      IF i = 1.
        READ TABLE ti_t001_a INDEX 1.
        CALL FUNCTION 'SHOW_LINE_ITEMS_FOR_CREDIT'
          EXPORTING
            i_kunnr = so_kunnr
            i_kkber = space
            i_tcode = 'FD32'
            i_bukrs = ti_t001_a-bukrs
          EXCEPTIONS
            OTHERS  = 1.
      ELSE.
        CALL FUNCTION 'SHOW_LINE_ITEMS_FOR_CREDIT'
          EXPORTING
            i_kunnr = so_kunnr
            i_kkber = ikkber
            i_tcode = 'FD32'
          EXCEPTIONS
            OTHERS  = 1.
      ENDIF.
    WHEN 'VKM1'.          " Pedidos bloqueados
      SET PARAMETER ID 'KUN' FIELD so_kunnr.
      SET PARAMETER ID 'KKB' FIELD ikkber.
      CALL TRANSACTION 'VKM1' AND SKIP FIRST SCREEN.
    WHEN 'VKM2'.          " Pedidos liberados
      SET PARAMETER ID 'KUN' FIELD so_kunnr.
      SET PARAMETER ID 'KKB' FIELD ikkber.
      CALL TRANSACTION 'VKM2' AND SKIP FIRST SCREEN.
    WHEN 'OLDD'.
      PERFORM okcode_oldd.
    WHEN 'RGS'.           " Control de Riesgos (aseguradora)
      RANGES s_budat FOR bkpf-budat.
      CLEAR s_budat[].

      s_budat-option = 'BT'.
      s_budat-sign = 'I'.
      s_budat-low = gp_gjahr && '0101'.
      s_budat-high = gp_gjahr && '1231'.
      APPEND s_budat.

      SUBMIT zssdl307"zssdd306b
              WITH s_bukrs IN so_bukrs
              WITH s_kunnr IN s_kunnr
              WITH s_budat IN s_budat
              WITH r1 EQ space
              WITH r2 EQ space
              WITH r3 EQ space
              WITH r4 EQ space
              WITH r5 EQ space
              WITH r6 EQ 'X'
              AND RETURN.

    WHEN 'NEW'.
      CLEAR: so_kunnr2.
      s_bukrs2[] = so_bukrs[].
      CALL SCREEN 0304 STARTING AT 5 5.
    WHEN 'EXIT' OR 'BACK' OR 'CANCEL'.
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0200  INPUT

MODULE details_active_tab_set OUTPUT.
  details-activetab = g_details-pressed_tab.
  CASE g_details-pressed_tab.
    WHEN c_details-tab1.
      g_details-subscreen = '0203'.
    WHEN c_details-tab2.
      g_details-subscreen = '0204'.
    WHEN c_details-tab3.
      g_details-subscreen = '0205'.
    WHEN c_details-tab7.
      g_details-subscreen = '0207'.
    WHEN c_details-tab8.
      g_details-subscreen = '0208'.
    WHEN c_details-tab9.
      g_details-subscreen = '0209'.
    WHEN c_details-tab10.
      g_details-subscreen = '0210'.
    WHEN c_details-tab11.
      g_details-subscreen = '0211'.
    WHEN c_details-tab12.
      g_details-subscreen = '0212'.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

MODULE details_active_tab_get INPUT.
  ok_code = sy-ucomm.
  CASE ok_code.
    WHEN c_details-tab1.
      g_details-pressed_tab = c_details-tab1.
    WHEN c_details-tab2.
      g_details-pressed_tab = c_details-tab2.
    WHEN c_details-tab3.
      g_details-pressed_tab = c_details-tab3.
    WHEN c_details-tab7.
      g_details-pressed_tab = c_details-tab7.
    WHEN c_details-tab8.
      g_details-pressed_tab = c_details-tab8.
    WHEN c_details-tab9.
      g_details-pressed_tab = c_details-tab9.
    WHEN c_details-tab10.
      g_details-pressed_tab = c_details-tab10.
    WHEN c_details-tab11.
      g_details-pressed_tab = c_details-tab11.
    WHEN c_details-tab12.
      g_details-pressed_tab = c_details-tab12.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0110  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0110 OUTPUT.

  IF ( grado > 0 AND grado <= 100 ).
    icons_name = icon_green_light.
  ELSEIF ( grado > 100 AND grado <= 125 ).
    icons_name = icon_yellow_light.
  ELSE.
    IF grado > 999.
      grado = 999.
    ELSEIF grado <= 0.
      grado = 0.
    ENDIF.
    icons_name = icon_red_light.
  ENDIF.

  CALL FUNCTION 'ICON_CREATE'
    EXPORTING
      name                  = icons_name
      text                  = icons_text
      info                  = 'Crédito - Status global'
      add_stdinf            = 'X'
    IMPORTING
      result                = status
    EXCEPTIONS
      icon_not_found        = 1
      outputfield_too_short = 2
      OTHERS                = 3.

ENDMODULE.                 " STATUS_0110  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  Get_Data1  OUTPUT
*&---------------------------------------------------------------------*
MODULE get_data OUTPUT.

  PERFORM cleardata.

*---Crédito------------------------------------------------------------*
  SELECT SINGLE * FROM knkk INTO CORRESPONDING FIELDS OF data1
    WHERE kunnr = so_kunnr
      AND kkber = ikkber.

  CALL FUNCTION 'ZSSD306_RIESGOS_OBTENER'
    EXPORTING
      ikunnr  = so_kunnr
      c_kkber = ikkber
    IMPORTING
      odelta  = dispble.

*---Crédito 1000
  DATA l_knkk_1000 TYPE knkk.
  SELECT SINGLE * FROM knkk INTO l_knkk_1000
    WHERE kunnr = so_kunnr
      AND kkber = '1000'.
  IF sy-subrc = 0.
    ce1000 = l_knkk_1000-dbekr.
    CALL FUNCTION 'ZSSD306_RIESGOS_OBTENER'
      EXPORTING
        ikunnr  = so_kunnr
        c_kkber = l_knkk_1000-kkber
      IMPORTING
        odelta  = disp1000.

    lim1000 = l_knkk_1000-klimk.
    ci1000 = lim1000 - ce1000.
    ries1000 = lim1000 - disp1000.
    ccons1000 = lim1000 - ries1000.

  ENDIF.

*---Crédito 2000
  DATA l_knkk_2000 TYPE knkk.
  SELECT SINGLE * FROM knkk INTO l_knkk_2000
    WHERE kunnr = so_kunnr
      AND kkber = '2000'.
  IF sy-subrc = 0.
    ce2000 = l_knkk_2000-dbekr.
    CALL FUNCTION 'ZSSD306_RIESGOS_OBTENER'
      EXPORTING
        ikunnr  = so_kunnr
        c_kkber = l_knkk_2000-kkber
      IMPORTING
        odelta  = disp2000.
    lim2000 = l_knkk_2000-klimk.
    ci2000 = lim2000 - ce2000.
    ries2000 = lim2000 - disp2000.
    ccons2000 = lim2000 - ries2000.
  ENDIF.

  cetot = ce1000 + ce2000.
  disptot = disp1000 + disp2000.
  limtot = lim1000 + lim2000.
  citot = ci1000 + ci2000.
  riestot = ries1000 + ries2000.
  cconstot = ccons1000 + ccons2000.

*---Facturación--------------------------------------------------------*
  j0 = gp_gjahr - 1.
  j1 = gp_gjahr + 1.

* % Cobertura
  CLEAR zcober.
  SELECT SINGLE riesa zcober text1 INTO ( cobert, zcober, descober )
    FROM zssdt306c_asegcl
   WHERE kunnr = so_kunnr
     AND loekz = space
     AND kkber = ikkber
     AND begda <= sy-datum
     AND endda >= sy-datum.
  IF sy-subrc <> 0.
    SELECT SINGLE porce INTO cobert FROM zssdt306b_asegur
      WHERE dbrtg = data1-dbrtg.
  ENDIF.

* Cambio BSEG x BSID / BSAD
  SELECT  * INTO CORRESPONDING FIELDS OF TABLE data4 FROM bsid
    WHERE bukrs IN so_bukrs
      AND kunnr = so_kunnr
      AND gjahr LE j1.

  SELECT  * APPENDING CORRESPONDING FIELDS OF TABLE data4 FROM bsad
    WHERE bukrs IN so_bukrs
      AND kunnr = so_kunnr
      AND gjahr LE j1.

*----Año actual
* Facturación
  DATA l_bset TYPE bset.
  CLEAR: fact1s, abon1s.

  LOOP AT data4 WHERE ( bschl = '01' OR bschl = '12' ) AND gjahr = gp_gjahr.

    CLEAR l_bset.
    SELECT SINGLE * INTO l_bset FROM bset
      WHERE bukrs = data4-bukrs
        AND belnr = data4-belnr
        AND gjahr = data4-gjahr
        AND buzei = data4-buzei.

    IF data4-bschl = '01'.
      fact1s = ( data4-dmbtr - l_bset-hwste ) + fact1s."( data4-wrbtr - l_bset-hwste ) + fact1s.
      fact1 = data4-dmbtr + fact1."data4-wrbtr + fact1.
    ELSE.
      fact1 = fact1 - data4-dmbtr."data4-wrbtr.
      fact1s = fact1s - ( data4-dmbtr - l_bset-hwste )."( data4-wrbtr - l_bset-hwste ).
    ENDIF.
  ENDLOOP.

* Chequear historico carga
  DATA v_wrbtr LIKE  zssdt306_cargafi-wrbtr.
  DATA v_siva LIKE  zssdt306_cargafi-siva.
  CLEAR v_wrbtr. CLEAR v_siva.
  SELECT SINGLE wrbtr siva INTO (v_wrbtr, v_siva) FROM zssdt306_cargafi
    WHERE bukrs IN so_bukrs
      AND gjahr = gp_gjahr
      AND kunnr = so_kunnr
      AND tipo = 'F'.
  IF sy-subrc = 0.
    fact1 = fact1 + v_wrbtr.
    fact1s = fact1s + v_siva.
  ENDIF.

  LOOP AT data4 WHERE ( bschl = '11' OR bschl = '02' ) AND gjahr = gp_gjahr.

    CLEAR l_bset.
    SELECT SINGLE * INTO l_bset FROM bset
      WHERE bukrs = data4-bukrs
        AND belnr = data4-belnr
        AND gjahr = data4-gjahr
        AND buzei = data4-buzei.

    IF data4-bschl = '02'.
      abon1 = abon1 - data4-dmbtr."data4-wrbtr.
      abon1s = abon1s - ( data4-dmbtr - l_bset-hwste )."( data4-wrbtr - l_bset-hwste ).
    ELSE.
      abon1 = data4-dmbtr + abon1."data4-wrbtr + abon1.
      abon1s = ( data4-dmbtr - l_bset-hwste ) + abon1s."( data4-wrbtr - l_bset-hwste ) + abon1s.
    ENDIF.
  ENDLOOP.

  CLEAR v_wrbtr. CLEAR v_siva.
  SELECT SINGLE wrbtr siva INTO (v_wrbtr, v_siva) FROM zssdt306_cargafi
    WHERE bukrs IN so_bukrs
      AND gjahr = gp_gjahr
      AND kunnr = so_kunnr
      AND tipo = 'A'.
  IF sy-subrc = 0.
    abon1 = abon1 + v_wrbtr.
    abon1s = abon1s + v_siva.
  ENDIF.

*----Año anterior
  gp_gjahr0 = gp_gjahr - 1.

  LOOP AT data4 WHERE ( bschl = '01' OR bschl = '12' )
      AND gjahr = gp_gjahr0.

    CLEAR l_bset.
    SELECT SINGLE * INTO l_bset FROM bset
      WHERE bukrs = data4-bukrs
        AND belnr = data4-belnr
        AND gjahr = data4-gjahr
        AND buzei = data4-buzei.

    IF data4-bschl = '01'.
*      fact0s = ( data4-wrbtr - l_bset-hwste ) + fact0s.
*      fact0 = data4-wrbtr + fact0.
      fact0s = ( data4-dmbtr - l_bset-hwste ) + fact0s.
      fact0 = data4-dmbtr + fact0.
    ELSE.
      fact0 = fact0 - data4-dmbtr.
      fact0s = fact0s - ( data4-dmbtr - l_bset-hwste ).
*      fact0 = fact0 - data4-wrbtr.
*      fact0s = fact0s - ( data4-wrbtr - l_bset-hwste ).
    ENDIF.
  ENDLOOP.

  CLEAR v_wrbtr. CLEAR v_siva.
  SELECT SINGLE wrbtr siva INTO (v_wrbtr, v_siva) FROM zssdt306_cargafi
    WHERE bukrs IN so_bukrs
      AND gjahr = gp_gjahr0
      AND kunnr = so_kunnr
      AND tipo = 'F'.
  IF sy-subrc = 0.
    fact0 = fact0 + v_wrbtr.
    fact0s = fact0s + v_siva.
  ENDIF.

  LOOP AT data4 WHERE ( bschl = '11' OR bschl = '02' )
      AND gjahr = gp_gjahr0.

    CLEAR l_bset.
    SELECT SINGLE * INTO l_bset FROM bset
      WHERE bukrs = data4-bukrs
        AND belnr = data4-belnr
        AND gjahr = data4-gjahr
        AND buzei = data4-buzei.

    IF data4-bschl = '02'.
*      abon0 = abon0 - data4-wrbtr.
*      abon0s = abon0s - ( data4-wrbtr - l_bset-hwste ).
      abon0 = abon0 - data4-dmbtr.
      abon0s = abon0s - ( data4-dmbtr - l_bset-hwste ).
    ELSE.
*      abon0 = data4-wrbtr + abon0.
*      abon0s = ( data4-wrbtr - l_bset-hwste ) + abon0s.
      abon0 = data4-dmbtr + abon0.
      abon0s = ( data4-dmbtr - l_bset-hwste ) + abon0s.
    ENDIF.
  ENDLOOP.

  CLEAR v_wrbtr. CLEAR v_siva.
  SELECT SINGLE wrbtr siva INTO (v_wrbtr, v_siva) FROM zssdt306_cargafi
    WHERE bukrs IN so_bukrs
      AND gjahr = gp_gjahr0
      AND kunnr = so_kunnr
      AND tipo = 'A'.
  IF sy-subrc = 0.
    abon0 = abon0 + v_wrbtr.
    abon0s = abon0s + v_siva.
  ENDIF.

*----Año Actual -2
  gp_gjahr2 = gp_gjahr - 2.

  LOOP AT data4 WHERE ( bschl = '01' OR bschl = '12' )
      AND gjahr = gp_gjahr2.

    CLEAR l_bset.
    SELECT SINGLE * INTO l_bset FROM bset
      WHERE bukrs = data4-bukrs
        AND belnr = data4-belnr
        AND gjahr = data4-gjahr
        AND buzei = data4-buzei.

    IF data4-bschl = '01'.
*      fact2s = ( data4-wrbtr - l_bset-hwste ) + fact2s.
*      fact2 = data4-wrbtr + fact2.
      fact2s = ( data4-dmbtr - l_bset-hwste ) + fact2s.
      fact2 = data4-dmbtr + fact2.
    ELSE.
*      fact2 = fact2 - data4-wrbtr.
*      fact2s = fact2s - ( data4-wrbtr - l_bset-hwste ).
      fact2 = fact2 - data4-dmbtr.
      fact2s = fact2s - ( data4-dmbtr - l_bset-hwste ).
    ENDIF.
  ENDLOOP.

  CLEAR v_wrbtr. CLEAR v_siva.
  SELECT SINGLE wrbtr siva INTO (v_wrbtr, v_siva) FROM zssdt306_cargafi
    WHERE bukrs IN so_bukrs
      AND gjahr = gp_gjahr2
      AND kunnr = so_kunnr
      AND tipo = 'F'.
  IF sy-subrc = 0.
    fact2 = fact2 + v_wrbtr.
    fact2s = fact2s + v_siva.
  ENDIF.

  LOOP AT data4 WHERE ( bschl = '11' OR bschl = '02' )
      AND gjahr = gp_gjahr2.

    CLEAR l_bset.
    SELECT SINGLE * INTO l_bset FROM bset
      WHERE bukrs = data4-bukrs
        AND belnr = data4-belnr
        AND gjahr = data4-gjahr
        AND buzei = data4-buzei.

    IF data4-bschl = '02'.
*      abon2 = abon2 - data4-wrbtr.
*      abon2s = abon2s - ( data4-wrbtr - l_bset-hwste ).
      abon2 = abon2 - data4-dmbtr.
      abon2s = abon2s - ( data4-dmbtr - l_bset-hwste ).
    ELSE.
*      abon2 = data4-wrbtr + abon2.
*      abon2s = ( data4-wrbtr - l_bset-hwste ) + abon2s.
      abon2 = data4-dmbtr + abon2.
      abon2s = ( data4-dmbtr - l_bset-hwste ) + abon2s.
    ENDIF.
  ENDLOOP.

  CLEAR v_wrbtr. CLEAR v_siva.
  SELECT SINGLE wrbtr siva INTO (v_wrbtr, v_siva) FROM zssdt306_cargafi
    WHERE bukrs IN so_bukrs
      AND gjahr = gp_gjahr2
      AND kunnr = so_kunnr
      AND tipo = 'A'.
  IF sy-subrc = 0.
    abon2 = abon2 + v_wrbtr.
    abon2s = abon2s + v_siva.
  ENDIF.

*----Año Actual -3
  gp_gjahr3 = gp_gjahr - 3.
  gp_gjahr3_b = gp_gjahr3.
  gp_gjahr2_b = gp_gjahr2.
  gp_gjahr0_b = gp_gjahr0.
  LOOP AT data4 WHERE ( bschl = '01' OR bschl = '12' )
      AND gjahr = gp_gjahr3.

    CLEAR l_bset.
    SELECT SINGLE * INTO l_bset FROM bset
      WHERE bukrs = data4-bukrs
        AND belnr = data4-belnr
        AND gjahr = data4-gjahr
        AND buzei = data4-buzei.

    IF data4-bschl = '01'.
*      fact3s = ( data4-wrbtr - l_bset-hwste ) + fact3s.
*      fact3 = data4-wrbtr + fact3.
      fact3s = ( data4-dmbtr - l_bset-hwste ) + fact3s.
      fact3 = data4-dmbtr + fact3.
    ELSE.
*      fact3 = fact3 - data4-wrbtr.
*      fact3s = fact3s - ( data4-wrbtr - l_bset-hwste ).
      fact3 = fact3 - data4-dmbtr.
      fact3s = fact3s - ( data4-dmbtr - l_bset-hwste ).
    ENDIF.
  ENDLOOP.

  CLEAR v_wrbtr. CLEAR v_siva.
  SELECT SINGLE wrbtr siva INTO (v_wrbtr, v_siva) FROM zssdt306_cargafi
    WHERE bukrs IN so_bukrs
      AND gjahr = gp_gjahr3
      AND kunnr = so_kunnr
      AND tipo = 'F'.
  IF sy-subrc = 0.
    fact3 = fact3 + v_wrbtr.
    fact3s = fact3s + v_siva.
  ENDIF.

  LOOP AT data4 WHERE ( bschl = '11' OR bschl = '02' )
      AND gjahr = gp_gjahr3.

    CLEAR l_bset.
    SELECT SINGLE * INTO l_bset FROM bset
      WHERE bukrs = data4-bukrs
        AND belnr = data4-belnr
        AND gjahr = data4-gjahr
        AND buzei = data4-buzei.

    IF data4-bschl = '02'.
*      abon3 = abon3 - data4-wrbtr.
*      abon3s = abon3s - ( data4-wrbtr - l_bset-hwste ).
      abon3 = abon3 - data4-dmbtr.
      abon3s = abon3s - ( data4-dmbtr - l_bset-hwste ).
    ELSE.
*      abon3 = data4-wrbtr + abon3.
*      abon3s = ( data4-wrbtr - l_bset-hwste ) + abon3s.
      abon3 = data4-dmbtr + abon3.
      abon3s = ( data4-dmbtr - l_bset-hwste ) + abon3s.
    ENDIF.
  ENDLOOP.

  CLEAR v_wrbtr. CLEAR v_siva.
  SELECT SINGLE wrbtr siva INTO (v_wrbtr, v_siva) FROM zssdt306_cargafi
    WHERE bukrs IN so_bukrs
      AND gjahr = gp_gjahr3
      AND kunnr = so_kunnr
      AND tipo = 'A'.
  IF sy-subrc = 0.
    abon3 = abon3 + v_wrbtr.
    abon3s = abon3s + v_siva.
  ENDIF.

*---Comercial----------------------------------------------------------*
* Cambiar por REAL, esta tabla no existirá
  SELECT * FROM s066 INTO CORRESPONDING FIELDS OF TABLE data2
    WHERE knkli = so_kunnr
      AND kkber = ikkber.
  LOOP AT data2.
    data2-gjahr = data2-spmon(4).
    "   pedido = data2-oeikw + pedido.
    MODIFY data2.
  ENDLOOP.

  "Buscamos lo pendiente en los pedidos
  DATA: BEGIN OF ti_vbbe OCCURS 0,
          vbeln LIKE vbbe-vbeln,
          posnr LIKE vbbe-posnr,
          omeng LIKE vbbe-omeng,
          meins LIKE vbbe-meins,
*        kwmeng LIKE vbap-kwmeng,
*        netwr LIKE vbap-netwr,
*        mwbsp LIKE vbap-mwsbp,
        END OF ti_vbbe.
  CLEAR ti_vbbe[].
  DATA v_kwmeng LIKE vbap-kwmeng.
  DATA v_netwr LIKE vbap-netwr.
  DATA v_mwsbp LIKE vbap-mwsbp.
  DATA v_vrkme LIKE vbap-vrkme.
  DATA v_matnr LIKE vbap-matnr.
  DATA v_umvkn LIKE vbap-umvkn.
  DATA v_umvkz LIKE vbap-umvkz.
  DATA ti_vbap TYPE TABLE OF vbap WITH HEADER LINE.


  SELECT vbbe~vbeln vbbe~posnr SUM( vbbe~omeng ) vbbe~meins
    INTO TABLE ti_vbbe
    FROM vbbe "INNER JOIN vbap ON vbap~vbeln = vbbe~vbeln AND vbap~posnr = vbbe~posnr
    WHERE vbbe~kunnr = so_kunnr
      AND vbbe~vbtyp = 'C'
      AND vbbe~omeng <> ' '
    GROUP BY vbbe~vbeln vbbe~posnr meins.
  LOOP AT ti_vbbe.
    DATA l_vbak TYPE vbak.
    SELECT SINGLE * INTO l_vbak FROM vbak
      WHERE vbeln = ti_vbbe-vbeln
        AND bukrs_vf IN so_bukrs
        AND auart NE 'ZCON'.
    CHECK sy-subrc = 0.

    CLEAR: v_kwmeng, v_netwr, v_mwsbp, v_vrkme.
    SELECT SINGLE kwmeng netwr mwsbp vrkme matnr umvkn umvkz
      INTO (v_kwmeng, v_netwr, v_mwsbp, v_vrkme, v_matnr, v_umvkn, v_umvkz) FROM vbap
      WHERE vbeln = ti_vbbe-vbeln
        AND posnr = ti_vbbe-posnr
        AND abgru EQ space.
    IF sy-subrc = 0 AND v_kwmeng IS NOT INITIAL.
      IF ti_vbbe-meins <> v_vrkme.
        DATA cantidad LIKE ekpo-menge.
        cantidad = v_kwmeng.
*        CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
*          EXPORTING
*            i_matnr  = v_matnr
*            i_in_me  = v_vrkme
*            i_out_me = ti_vbbe-meins
*            i_menge  = cantidad
*          IMPORTING
*            e_menge  = cantidad.
        cantidad = ( ( cantidad * v_umvkz ) / v_umvkn ).
        v_kwmeng = cantidad.
      ENDIF.
      pedido = pedido + ( ti_vbbe-omeng * ( ( v_netwr + v_mwsbp ) / v_kwmeng ) ).
    ENDIF.
  ENDLOOP.

  SELECT * FROM s067 INTO CORRESPONDING FIELDS OF TABLE data3
    WHERE knkli = so_kunnr
      AND kkber = ikkber.
  LOOP AT data3.
    data3-gjahr = data3-spmon(4).
    entrega = data3-olikw + entrega.
    factura = data3-ofakw + factura.
    MODIFY data3.
  ENDLOOP.

  "17.06.2019 hruiz
  "Tenemos que incluir lo que esté en ZTER también.

  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE ti_vbap
    FROM vbak AS a
    INNER JOIN vbap AS b ON ( a~vbeln = b~vbeln )
    INNER JOIN vbuk AS c ON ( a~vbeln = c~vbeln )
    WHERE a~kunnr = so_kunnr
    AND a~vkorg = so_bukrs-low
    AND b~abgru = ''
    AND c~lfstk <> 'C'
    AND a~auart = 'ZTER'.

  LOOP AT ti_vbap.
    pedido = pedido + ti_vbap-netwr.
  ENDLOOP.

  SELECT *
   INTO CORRESPONDING FIELDS OF TABLE ti_vbap
   FROM vbak AS a
   INNER JOIN vbap AS b ON ( a~vbeln = b~vbeln )
   INNER JOIN vbuk AS c ON ( a~vbeln = c~vbeln )
   WHERE a~kunnr = so_kunnr
   AND b~abgru = ''
   AND c~lfstk = 'C'
   AND c~gbstk <> 'C'
   AND a~auart = 'ZTER'.

  LOOP AT ti_vbap.
    entrega = entrega + ti_vbap-netwr.
  ENDLOOP.

*    SELECT *
*   INTO CORRESPONDING FIELDS OF TABLE ti_vbap
*   FROM vbak AS a
*   INNER JOIN vbap AS b ON ( a~vbeln = b~vbeln )
*   INNER JOIN vbuk AS c ON ( a~vbeln = c~vbeln )
*   WHERE a~kunnr = so_kunnr
*   AND b~abgru = ''
*   AND c~lfstk = 'C'
*   AND c~gbstk = 'C'
*   AND a~auart = 'ZTER'.
*
*  LOOP AT ti_vbap.
*    factura = factura + ti_vbap-netwr.
*  ENDLOOP.



*---Contabilidad-------------------------------------------------------*
* Deuda vencida / No vencida
  DATA ti_t001 TYPE TABLE OF t001 WITH HEADER LINE.
  SELECT * INTO TABLE ti_t001 FROM t001 WHERE bukrs IN so_bukrs.
  LOOP AT ti_t001.
    CLEAR: gd_sfael_aux, gd_snfae_aux.
    CALL FUNCTION 'CUSTOMER_DUE_DATE_ANALYSIS'
      EXPORTING
        bukrs          = ti_t001-bukrs "so_bukrs
        kkber          = space "ikkber
        kunnr          = so_kunnr
        rasid          = 'R01N'
        klimp          = 'X'
      IMPORTING
        sfael          = gd_sfael_aux        "Total de partidas vencidas
        snfae          = gd_snfae_aux         "Total de partidas no vencidas
      EXCEPTIONS
        invalid_raster = 1
        no_open_items  = 2
        OTHERS         = 3.

    gd_sfael = gd_sfael + gd_sfael_aux.
    gd_snfae = gd_snfae + gd_snfae_aux.
  ENDLOOP.

*---Deuda no gestionada
*  LOOP AT data4 WHERE umskz IS INITIAL
*                  AND augbl IS INITIAL
*                  AND gjahr <= gp_gjahr.
*    IF data4-shkzg = 'S'.                "Indicador Debe (S)
*      pdte = data4-wrbtr + pdte.
*    ELSEIF data4-shkzg = 'H'.            "Indicador Debe (H)
*      pdte = pdte - ABS( data4-wrbtr ).
*    ENDIF.
*  ENDLOOP.
*
*  pdte = pdte - efim.

*--- Cartera de Cheques / Pagares / Letras aceptadas / Descuento
  LOOP AT data4
    WHERE ( umskz = 'L'
      OR umskz = 'D'
      OR umskz = 'S'
      OR umskz = 'U' )
      AND augbl IS INITIAL
      AND gjahr <= gp_gjahr.
    "IF data4-shkzg = 'S'.                "Indicador Debe (S)
    cartera = data4-dmbtr + cartera."data4-wrbtr + cartera.
    "ELSEIF data4-shkzg = 'H'.            "Indicador Debe (H)
    "  cartera = cartera - data4-wrbtr.
    "ENDIF.
    "DELETE t_fbl5n WHERE belnr = data4-belnr AND buzei = data4-buzei.
  ENDLOOP.

*--- Cartera de Impagados
  LOOP AT data4 WHERE umskz = 'I'
      AND augbl IS INITIAL
      AND gjahr <= gp_gjahr.
    IF data4-shkzg = 'S'.                "Indicador Debe (S)
      impago = data4-dmbtr + impago."data4-wrbtr + impago.
    ELSEIF data4-shkzg = 'H'.            "Indicador Debe (H)
      impago = impago - data4-dmbtr."impago - data4-wrbtr.
    ENDIF.
  ENDLOOP.

*---Dudosos
  LOOP AT data4 WHERE umskz = 'E'
      AND augbl IS INITIAL
      AND gjahr <= gp_gjahr.
    IF data4-shkzg = 'S'.                "Indicador Debe (S)
      dudoso = data4-dmbtr + dudoso."data4-wrbtr + dudoso.
    ELSEIF data4-shkzg = 'H'.            "Indicador Debe (H)
      dudoso = dudoso - data4-dmbtr."dudoso - data4-wrbtr.
    ENDIF.
  ENDLOOP.

*---Ratio impagados / Ventas
  LOOP AT data4 WHERE umskz = 'I' AND shkzg = 'S'.
    ratio = data4-dmbtr + ratio."ratio = data4-wrbtr + ratio.
  ENDLOOP.

*---Pedidos bloqueados
  SELECT t1~bukrs_vf   t1~vtweg   t1~spart   t1~kunnr
         t1~kkber      t1~grupp   t2~gbstk   t1~vbeln
         t1~netwr      t1~waerk   t2~cmpsa   t2~cmpsg
         t2~cmps0
    INTO CORRESPONDING FIELDS OF TABLE data5
    FROM vbak AS t1 INNER JOIN vbuk AS t2
      ON t1~vbeln = t2~vbeln
      WHERE t1~kunnr = so_kunnr
        AND t1~bukrs_vf IN so_bukrs
        AND t1~kkber = ikkber
        AND t2~gbstk = 'B'
        AND t2~cmgst = 'B'.          "Status global = bloqueo

ENDMODULE.                 " Get_Data1  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  Fill_Data1  OUTPUT
*&---------------------------------------------------------------------*
MODULE fill_data OUTPUT.

  DATA ti_knb1 TYPE TABLE OF knb1 WITH HEADER LINE.

* Datos aseguradora
  SELECT * INTO TABLE ti_knb1 FROM knb1
    WHERE kunnr = so_kunnr
      AND bukrs IN so_bukrs.
  CHECK sy-subrc EQ '0'.

*---Crédito------------------------------------------------------------*
  READ TABLE data1.
  IF sy-subrc NE 0.
    limite = data1-klimk.
    asegurado = data1-dbekr.
    interno = limite - asegurado.
*--Los datos engloban toda sociedad asignada aal área de control
*      Pdte = data1-skfor.
*      Deuda = data1-skfor + data1-ssobl.
    IF ( data1-uedat IS NOT INITIAL ).
      excdo = data1-uedat.
    ENDIF.
    ctrl_impag = data1-zzimpag.
  ELSE.
    MESSAGE e002(y100) WITH text-001.
  ENDIF.

*---Facturación--------------------------------------------------------*
  " Año actual
  net1 = fact1 - abon1.
  " Año anterior
  net0 = fact0 - abon0.
  net2 = fact2 - abon2.
  net3 = fact3 - abon3.

  net1s = fact1s - abon1s.
  net2s = fact2s - abon2s.
  net3s = fact3s - abon3s.
  net0s = fact0s - abon0s.

*---Contabilidad-------------------------------------------------------*
  "deuda = pdte + cartera + impago + dudoso.
  deuda = pdte + cartera + efim + duco + abon + antic + gimp.

* Duda por vencimiento
  vencido     = gd_sfael.
  no_vencido  = gd_snfae.

*---Cálculos----------------------------------------------------------*
  comercial = pedido + entrega + factura.
  " dispto = comercial + deuda.
  " dispble = limite - dispto.
  dispto = limite - dispble.

*---Grado de agotamiento del crédito
  IF ( limite = 0 OR dispto = 0 ).
    grado = 0.
  ELSE.
    grado = ( dispto / limite ) * 100.
    IF grado > 999999.
      grado = 999999.
    ENDIF.
  ENDIF.

*---Ratio Impagados s/ Facturación neta
  ratio = net1 + net0.

  IF ratio <> 0.
    ratio = ( ratio / ( net1 + net0 ) ) * 100.
  ENDIF.

*---Desv. % Facturación
  IF ( fact1 = 0  OR fact0 = 0 ).
    dsvf = 0.
  ELSE.
    dsvf = ( ( fact1 - fact0 ) / fact0 ) * 100.
  ENDIF.

*---Desv. % Facturación
  IF ( abon1 = 0  OR abon0 = 0 ).
    dsva = 0.
  ELSE.
    dsva = ( ( abon1 - abon0 ) / abon0 ) * 100.
  ENDIF.

*---Desv. % Volumen neto
  IF ( net1 = 0  OR net0 = 0 ).
    dsvn = 0.
  ELSE.
    dsvn = ( ( net1 - net0 ) / net0 ) * 100.
  ENDIF.

*---Desv. % Facturación
  IF ( fact1s = 0  OR fact0s = 0 ).
    dsvfs = 0.
  ELSE.
    dsvfs = ( ( fact1s - fact0s ) / fact0s ) * 100.
  ENDIF.

*---Desv. % Facturación
  IF ( abon1s = 0  OR abon0s = 0 ).
    dsvas = 0.
  ELSE.
    dsvas = ( ( abon1s - abon0s ) / abon0s ) * 100.
  ENDIF.

*---Desv. % Volumen neto
  IF ( net1s = 0  OR net0s = 0 ).
    dsvns = 0.
  ELSE.
    dsvns = ( ( net1s - net0s ) / net0s ) * 100.
  ENDIF.

*---Pedidos bloqueados
  LOOP AT data5.
    ped_bloq = data5-netwr + ped_bloq.
  ENDLOOP.

ENDMODULE.                 " Fill_Data1  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_204  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_204 OUTPUT.

*---Partidas no vencidas
  v1 = sy-datum.         " Vencimientos (0)
  v2 = v1 + 15.          " Vencimientos (+15)
  v3 = v2 + 15.          " Vencimientos (+30)
  v4 = v3 + 15.          " Vencimientos (+45)
  v5 = v4 + 15.          " Vencimientos (+60)
  v6 = v5 + 30.          " Vencimientos (+90)

  PERFORM recpdte.
  PERFORM gsrpdte.
  PERFORM grdpdte.

*---Partidas vencidas
  a1 = sy-datum.         " Vencimientos (0)
  a2 = a1 - 15.          " Vencimientos (-15)
  a3 = a2 - 15.          " Vencimientos (-30)
  a4 = a3 - 15.          " Vencimientos (-45)
  a5 = a4 - 15.          " Vencimientos (-60)
  a6 = a5 - 30.          " Vencimientos (-90)

  PERFORM recvcdo.
  PERFORM gsrvcdo.
  PERFORM grdvcdo.

*---Partidas compensadas
  PERFORM compj0.
  PERFORM compj1.

*---Pendientes
  recp = recp1 + recp2 + recp3 + recp4 + recp5 + recp6.
  gsrp = gsrp1 + gsrp2 + gsrp3 + gsrp4 + gsrp5 + gsrp6.
  grdp = grdp1 + grdp2 + grdp3 + grdp4 + grdp5 + grdp6.

  totp1 = recp1 + gsrp1 + grdp1.
  totp2 = recp2 + gsrp2 + grdp2.
  totp3 = recp3 + gsrp3 + grdp3.
  totp4 = recp4 + gsrp4 + grdp4.
  totp5 = recp5 + gsrp5 + grdp5.
  totp6 = recp6 + gsrp6 + grdp6.
  totp = totp1 + totp2 + totp3 + totp4 + totp5 + totp6.

*---Vencidos
  reca = reca1 + reca2 + reca3 + reca4 + reca5 + reca6.
  gsra = gsra1 + gsra2 + gsra3 + gsra4 + gsra5 + gsra6.
  grda = grda1 + grda2 + grda3 + grda4 + grda5 + grda6.

  tota1 = reca1 + gsra1 + grda1.
  tota2 = reca2 + gsra2 + grda2.
  tota3 = reca3 + gsra3 + grda3.
  tota4 = reca4 + gsra4 + grda4.
  tota5 = reca5 + gsra5 + grda5.
  tota6 = reca6 + gsra6 + grda6.
  tota = tota1 + tota2 + tota3 + tota4 + tota5 + tota6.

  total = tota + totp.

*---Compensadas
  recc = recc0 + recc1.
  girc = girc0 + girc1.
  chec = chec0 + chec1.
  pagc = pagc0 + pagc1.

ENDMODULE.                 " STATUS_204  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  Clear_204  OUTPUT
*&---------------------------------------------------------------------*
MODULE clear_204 OUTPUT.

  recp1 = 0. recp2 = 0. recp3 = 0. recp4 = 0. recp5 = 0. recp6 = 0. recp = 0.
  gsrp1 = 0. gsrp2 = 0. gsrp3 = 0. gsrp4 = 0. gsrp5 = 0. gsrp6 = 0. gsrp = 0.
  grdp1 = 0. grdp2 = 0. grdp3 = 0. grdp4 = 0. grdp5 = 0. grdp6 = 0. grdp = 0.
  totp1 = 0. totp2 = 0. totp3 = 0. totp4 = 0. totp5 = 0. totp6 = 0. totp = 0.

*---Vencidos
  reca1 = 0. reca2 = 0. reca3 = 0. reca4 = 0. reca5 = 0. reca6 = 0. reca = 0.
  gsra1 = 0. gsra2 = 0. gsra3 = 0. gsra4 = 0. gsra5 = 0. gsra6 = 0. gsra = 0.
  grda1 = 0. grda2 = 0. grda3 = 0. grda4 = 0. grda5 = 0. grda6 = 0. grda = 0.
  tota1 = 0. tota2 = 0. tota3 = 0. tota4 = 0. tota5 = 0. tota6 = 0. tota = 0.
  total = 0.

*---Compensadas
  recc0 = 0. recc1 = 0. recc = 0.
  girc0 = 0. girc1 = 0. girc = 0.
  chec0 = 0. chec1 = 0. chec = 0.
  pagc0 = 0. pagc1 = 0. pagc = 0.

ENDMODULE.                 " Clear_204  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  Clear_203  OUTPUT
*&---------------------------------------------------------------------*
MODULE clear_203 OUTPUT.
  CLEAR: fact1, abon1, net1, fact0, abon0, net0,
         net2, net3, fact2, fact3, abon2, abon3,
         fact1s, abon1s, net1s, fact0s, abon0s, net0s,
         net2s, net3s, fact2s, fact3s, abon2s, abon3s,
         dsvf, dsva, dsvn, excdo, grado,
         cartera, impago, deuda, vencido, no_vencido,
         ratio, limite, dispto, dispble, ctrl_impag,
         pedido, ped_bloq, entrega, factura, comercial, dudoso.
ENDMODULE.                 " Clear_203  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  DataALV  OUTPUT
*&---------------------------------------------------------------------*
MODULE dataalv OUTPUT.
**---Pedidos bloqueados (ALV)
  SELECT t1~bukrs_vf   t1~vtweg   t1~spart   t1~kunnr
         t1~kkber      t1~grupp   t2~gbstk   t1~vbeln
         t1~netwr      t1~waerk   t2~cmpsa   t2~cmpsg
         t2~cmps0
    INTO TABLE gt_tab FROM vbak AS t1 INNER JOIN vbuk AS t2
      ON t1~vbeln = t2~vbeln
      WHERE t1~kunnr = so_kunnr
        AND t1~bukrs_vf IN so_bukrs
        AND t1~kkber = '01'
        AND t2~gbstk = 'B'
        AND t2~cmgst = 'B'.

  IF g_custom_container IS INITIAL.
    CREATE OBJECT g_custom_container
      EXPORTING
        container_name = g_container.
    CREATE OBJECT grid1
      EXPORTING
        i_parent = g_custom_container.
    PERFORM createfieldcat.
  ELSE.
    CALL METHOD grid1->refresh_table_display.
  ENDIF.

*---Apariencia del ALV
  gs_layout-grid_title = 'Gestión de créditos - Detalle de pedidos bloqueados'.
  gs_layout-sel_mode = 'D'.

  CALL METHOD grid1->set_table_for_first_display
    EXPORTING
      i_structure_name = 'gt_tab'
      is_layout        = gs_layout
    CHANGING
      it_fieldcatalog  = gt_fieldcat[]
      it_outtab        = gt_tab[].

ENDMODULE.                 " DataALV  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_1006  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_1006 OUTPUT.
  SET PF-STATUS '1006'.
  SET TITLEBAR '1006'.
ENDMODULE.                 " STATUS_1006  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS208  OUTPUT
*&---------------------------------------------------------------------*
MODULE status208 OUTPUT.

  variant-report = sy-repid.
  variant-handle = '0001'.
  PERFORM load_data_into_grid TABLES ti_zssds306a
                              USING  container 'ALV' variant 'ZSSDS306A'
                              CHANGING alv layout fieldcat excludin.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS209  OUTPUT
*&---------------------------------------------------------------------*
MODULE status209 OUTPUT.

  DATA: bloqueo.
  CLEAR: bloqueo.
* Buscar datos del listado
  IF ti_zssdt306a_diario[] IS INITIAL.
    SELECT * INTO TABLE ti_zssdt306a_diario FROM zssdt306a_diario
      WHERE kunnr = so_kunnr
      AND bukrs IN so_bukrs
      AND loekz = space.
  ENDIF.

* Chequear Objeto de Bloqueo por Cliente
  CALL FUNCTION 'ENQUEUE_EZSSDT306A_DIARI'
    EXPORTING
      mode_zssdt306a_diario = 'E'
      mandt                 = sy-mandt
      kunnr                 = so_kunnr
    EXCEPTIONS
      foreign_lock          = 1
      system_failure        = 2
      OTHERS                = 3.
  IF sy-subrc = 1.
    bloqueo = 'X'.
    DATA v_var1 LIKE sy-msgv1.
    v_var1 = sy-msgv1.
    MESSAGE s398(00) WITH 'Diario Bloqueado por' v_var1.
  ENDIF.

* Mostrar Listado
  variant_diario-report = sy-repid.
  variant_diario-handle = '0002'.
  PERFORM load_data_into_grid TABLES ti_zssdt306a_diario
                              USING  container_diario 'ALV_DIARIO' variant_diario 'ZSSDT306A_DIARIO'
                              CHANGING alv_diario layout_diario fieldcat_diario excludin_diario.

  IF bloqueo = 'X'.
    CALL METHOD alv_diario->set_ready_for_input
      EXPORTING
        i_ready_for_input = 0.
  ELSE.
    CALL METHOD alv_diario->set_ready_for_input
      EXPORTING
        i_ready_for_input = 1.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USERCOMMAND209  INPUT
*&---------------------------------------------------------------------*
MODULE usercommand209 INPUT.

  CALL FUNCTION 'DEQUEUE_EZSSDT306A_DIARI'
    EXPORTING
      mode_zssdt306a_diario = 'E'
      mandt                 = sy-mandt
      kunnr                 = so_kunnr.

  CASE sy-ucomm.
    WHEN 'SAVED'.
      CALL METHOD alv_diario->check_changed_data.
      PERFORM guardar_diario.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS207  OUTPUT
*&---------------------------------------------------------------------*
MODULE status207 OUTPUT.
  DATA lt_t001 TYPE TABLE OF t001.
  DATA: bloqueo_aseg.
  CLEAR: bloqueo_aseg.
* Buscar datos del listado
  IF ti_zssdt306c_asegcl[] IS INITIAL.

    SELECT * INTO TABLE lt_t001
      FROM t001
      WHERE bukrs IN so_bukrs.

    IF lt_t001[] IS NOT INITIAL.

      SELECT * INTO TABLE ti_zssdt306c_asegcl
        FROM zssdt306c_asegcl
        FOR ALL ENTRIES IN lt_t001
        WHERE kunnr = so_kunnr
          AND loekz = space
          AND kkber = lt_t001-kkber.

    ELSE.
      SELECT * INTO TABLE ti_zssdt306c_asegcl FROM zssdt306c_asegcl
      WHERE kunnr = so_kunnr
        AND loekz = space.
    ENDIF.


    LOOP AT ti_zssdt306c_asegcl.
      SELECT SINGLE porce INTO ti_zssdt306c_asegcl-porce FROM zssdt306b_asegur
        WHERE dbrtg = ti_zssdt306c_asegcl-dbrtg.
      MODIFY ti_zssdt306c_asegcl.
    ENDLOOP.
  ENDIF.

* Chequear Objeto de Bloqueo por Cliente
  CALL FUNCTION 'ENQUEUE_EZSSDT306C_ASEGC'
    EXPORTING
      mandt          = sy-mandt
      kunnr          = so_kunnr
      kkber          = ikkber
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.
  IF sy-subrc = 1.
    bloqueo_aseg = 'X'.
    DATA v_var2 LIKE sy-msgv1.
    v_var2 = sy-msgv1.
    MESSAGE s398(00) WITH 'Aseguradoras Bloqueado por' v_var2.
  ENDIF.

* Mostrar Listado
  variant_aseg-report = sy-repid.
  variant_aseg-handle = '0003'.
  PERFORM load_data_into_grid TABLES ti_zssdt306c_asegcl
                              USING  container_aseg 'ASEG' variant_aseg 'ZSSDT306C_ASEGCL'
                              CHANGING alv_aseg layout_aseg fieldcat_aseg excludin_aseg.

  IF bloqueo_aseg = 'X'.
    CALL METHOD alv_aseg->set_ready_for_input
      EXPORTING
        i_ready_for_input = 0.
  ELSE.
    CALL METHOD alv_aseg->set_ready_for_input
      EXPORTING
        i_ready_for_input = 1.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USERCOMMAND207  INPUT
*&---------------------------------------------------------------------*
MODULE usercommand207 INPUT.

  CALL FUNCTION 'DEQUEUE_EZSSDT306C_ASEGC'
    EXPORTING
      mandt = sy-mandt
      kunnr = so_kunnr
      kkber = ikkber.

  CASE sy-ucomm.
    WHEN 'SAVEA'.
      CALL METHOD alv_aseg->check_changed_data.
      PERFORM guardar_aseg.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USERCOMMAND203  INPUT
*&---------------------------------------------------------------------*
MODULE usercommand203 INPUT.

  RANGES s_ku203 FOR kna1-kunnr.
  CLEAR s_ku203[].
  s_ku203-option = 'EQ'.
  s_ku203-sign = 'I'.
  s_ku203-low = so_kunnr.
  APPEND s_ku203.

  CASE sy-ucomm.
    WHEN 'DOUBLE'.
      DATA: v_field TYPE char50.
      GET CURSOR FIELD v_field.
      CASE v_field.
        WHEN 'PDTE'.
          CALL SCREEN 0400.
        WHEN 'EFIM'."'IMPAGO'.
          CALL SCREEN 0300.
        WHEN 'DEUDA'.
          SUBMIT rfitemar USING SELECTION-SET 'ZSSDTOTAL'
                          WITH dd_kunnr IN s_ku203
                          WITH dd_bukrs IN so_bukrs
                          WITH pa_stida = sy-datum
                          AND RETURN.
        WHEN 'CARTERA'.
          SUBMIT rfitemar USING SELECTION-SET 'ZSSDENCARTERA'
                          WITH dd_kunnr IN s_ku203
                          WITH dd_bukrs IN so_bukrs
                          WITH pa_stida = sy-datum
                          AND RETURN.
        WHEN 'DUCO'.
          SUBMIT rfitemar USING SELECTION-SET 'ZSSDDUDOSO'
                          WITH dd_kunnr IN s_ku203
                          WITH dd_bukrs IN so_bukrs
                          WITH pa_stida = sy-datum
                          AND RETURN.
        WHEN 'ABON'.
          SUBMIT rfitemar USING SELECTION-SET 'ZSSDABONOS'
                          WITH dd_kunnr IN s_ku203
                          WITH dd_bukrs IN so_bukrs
                          WITH pa_stida = sy-datum
                          AND RETURN.
        WHEN 'ANTIC'.
          SUBMIT rfitemar USING SELECTION-SET 'ZSSDANTICIPOS'
                          WITH dd_kunnr IN s_ku203
                          WITH dd_bukrs IN so_bukrs
                          WITH pa_stida = sy-datum
                          AND RETURN.
        WHEN OTHERS.
      ENDCASE.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0300 OUTPUT.
  SET PF-STATUS '0300'.
  SET TITLEBAR '0300'.

* Mostrar Listado
  IF sy-dynnr = '0400'.
    variant_ngest-report = sy-repid.
    variant_ngest-handle = '0008'.
    PERFORM load_data_into_grid TABLES t_fbl5n
                                USING  container_ngest 'ALV_NGEST' variant_ngest 'RFPOS'
                                CHANGING alv_ngest layout_ngest fieldcat_ngest excludin_ngest.
  ELSE.
    variant_impag-report = sy-repid.
    variant_impag-handle = '0018'.
    PERFORM load_data_into_grid TABLES t_fbl5n_impag
                                USING  container_impag 'ALV_IMPAG' variant_impag 'RFPOS'
                                CHANGING alv_impag layout_impag fieldcat_impag excludin_impag.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0300 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK300'. LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.

*&SPWIZARD: OUTPUT MODULE FOR TS 'DETAILS2'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: SETS ACTIVE TAB
MODULE details2_active_tab_set OUTPUT.
  details2-activetab = g_details2-pressed_tab.
  CASE g_details2-pressed_tab.
    WHEN c_details2-tab1.
      g_details2-subscreen = '0203'.
    WHEN c_details2-tab2.
      g_details2-subscreen = '0207'.
    WHEN c_details2-tab3.
      g_details2-subscreen = '0208'.
    WHEN c_details2-tab4.
      g_details2-subscreen = '0209'.
    WHEN c_details2-tab5.
      g_details2-subscreen = '0210'.
    WHEN c_details2-tab11.
      g_details2-subscreen = '0211'.
    WHEN c_details2-tab12.
      g_details2-subscreen = '0212'.
    WHEN c_details2-tab13.
      g_details2-subscreen = '0213'.
    WHEN OTHERS.
*&SPWIZARD:      DO NOTHING
  ENDCASE.
ENDMODULE.

*&SPWIZARD: INPUT MODULE FOR TS 'DETAILS2'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: GETS ACTIVE TAB
MODULE details2_active_tab_get INPUT.
  ok_code = sy-ucomm.
  CASE ok_code.
    WHEN c_details2-tab1.
      g_details2-pressed_tab = c_details2-tab1.
    WHEN c_details2-tab2.
      g_details2-pressed_tab = c_details2-tab2.
    WHEN c_details2-tab3.
      g_details2-pressed_tab = c_details2-tab3.
    WHEN c_details2-tab4.
      g_details2-pressed_tab = c_details2-tab4.
    WHEN c_details2-tab5.
      g_details2-pressed_tab = c_details2-tab5.
    WHEN c_details2-tab11.
      g_details2-pressed_tab = c_details2-tab11.
    WHEN c_details2-tab12.
      g_details2-pressed_tab = c_details2-tab12.
    WHEN c_details2-tab13.
      g_details2-pressed_tab = c_details2-tab13.
    WHEN OTHERS.
*&SPWIZARD:      DO NOTHING
  ENDCASE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  CALCULAR_TOTALES  OUTPUT
*&---------------------------------------------------------------------*
MODULE calcular_totales OUTPUT.
  totrec = tpdr + cpdr + chpdr + ppdr + gpdr.
  totven = chrpv + prpv + grpv.
  totefe = ergc + erad.

  PERFORM calcular_tabla_totales.

  variant_tot-report = sy-repid.
  variant_tot-handle = '8001'.
  PERFORM load_data_into_grid TABLES ti_zssdt306_tot
                              USING  container_tot 'TOT' variant_tot 'ZSSDT306_TOT'
                              CHANGING alv_tot layout_tot fieldcat_tot excludin_tot.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  BUSCAR_PMC  OUTPUT
*&---------------------------------------------------------------------*
MODULE buscar_pmc OUTPUT.

  DATA anyo TYPE gjahr.
  DATA v_gjahr LIKE bseg-gjahr.

  IF ti_zssds306_pmc[] IS INITIAL.
    anyo = 2016.
    DO 30 TIMES.
      SELECT SINGLE gjahr INTO v_gjahr FROM bseg
        WHERE gjahr = anyo
          AND kunnr = so_kunnr.
      IF sy-subrc = 0.

        DATA s_bukrs_aux TYPE eval_iv_bukrs_range_t WITH HEADER LINE.
        DATA s_belnr_aux TYPE fqmr_accdoc_number WITH HEADER LINE.
        DATA s_gjahr_aux TYPE bkk_r_gjahr WITH HEADER LINE.
        DATA s_kunnr_aux TYPE fiappt_t_kunnr WITH HEADER LINE.
        DATA s_lifnr_aux TYPE fip_t_lifnr_range WITH HEADER LINE.

        CLEAR: s_bukrs_aux[], s_belnr_aux[], s_gjahr_aux[], s_kunnr_aux[], s_lifnr_aux[].

        LOOP AT so_bukrs.
          s_bukrs_aux-sign = so_bukrs-sign.
          s_bukrs_aux-option = so_bukrs-option.
          s_bukrs_aux-low = so_bukrs-low.
          s_bukrs_aux-high = so_bukrs-high.
          APPEND s_bukrs_aux.
        ENDLOOP.

        s_kunnr_aux-sign = 'I'.
        s_kunnr_aux-option = 'EQ'.
        s_kunnr_aux-low = so_kunnr.
        APPEND s_kunnr_aux.

        s_gjahr_aux-sign = 'I'.
        s_gjahr_aux-option = 'EQ'.
        s_gjahr_aux-low = anyo.
        APPEND s_gjahr_aux.

        CALL FUNCTION 'ZSFIG004_PMCR'
          EXPORTING
            i_koart         = 'D'
            s_bukrs         = s_bukrs_aux[]
            s_belnr         = s_belnr_aux[]
            s_gjahr         = s_gjahr_aux[]
            s_kunnr         = s_kunnr_aux[]
            s_lifnr         = s_lifnr_aux[]
            leer_de_tabla_z = 'X' "EMP: 20.09.18
          IMPORTING
            dias            = ti_zssds306_pmc-dias
            totalcobr       = ti_zssds306_pmc-totalcobr.

        ti_zssds306_pmc-gjahr = anyo.
        APPEND ti_zssds306_pmc. CLEAR ti_zssds306_pmc.
      ELSE.
        ti_zssds306_pmc-gjahr = anyo.
        APPEND ti_zssds306_pmc. CLEAR ti_zssds306_pmc.
      ENDIF.
      anyo = anyo + 1.
      IF anyo > sy-datum(4).
        EXIT.
      ENDIF.
    ENDDO.
  ENDIF.

  variant_pmc-report = sy-repid.
  variant_pmc-handle = '0108'.
  PERFORM load_data_into_grid TABLES ti_zssds306_pmc
                              USING  container_pmc 'PMC' variant_pmc 'ZSSDS306_PMC'
                              CHANGING alv_pmc layout_pmc fieldcat_pmc excludin_pmc.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0304  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0304 OUTPUT.
  SET PF-STATUS '0304'.
  SET TITLEBAR '0304'.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0304  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0304 INPUT.

  CASE sy-ucomm.
    WHEN 'CA0304'. LEAVE TO SCREEN 0.
    WHEN 'OK0304'.
      IF so_kunnr2 IS NOT INITIAL AND s_bukrs2[] IS NOT INITIAL.
        CLEAR: it[], it.
        so_bukrs[] = s_bukrs2[].
        SELECT kunnr bukrs FROM knb1 INTO TABLE it
            WHERE kunnr = so_kunnr2
              AND bukrs IN so_bukrs.
        IF sy-subrc NE 0.
          MESSAGE s368(00) WITH 'Ningun registro para el cliente'.
        ELSE.
          so_kunnr = so_kunnr2.
          IF it[] IS NOT INITIAL.
            PERFORM getaccountdata.
            PERFORM buscar_fbl5n_bsid.
            CLEAR: ti_zssds306a[].
            PERFORM calcular_importes_vias_pago.
            CLEAR: ti_zssdt306c_asegcl[].
            CLEAR: ti_zssdt306a_diario[].
            CLEAR: ti_zssds306_pmc[].
            CLEAR: ti_zssdt306_tot[].
            g_details2-pressed_tab = 'DETAILS2_FC1'.
            LEAVE TO SCREEN 0.
          ENDIF.
        ENDIF.
      ENDIF.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_1200 INPUT.

ENDMODULE.
