*&---------------------------------------------------------------------*
*&  Include           ZRSDCOMISION_PROV_FORMS
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  SELECCIONAR_DATOS
*&---------------------------------------------------------------------*
FORM seleccionar_datos.

  DATA: ls_dato  TYPE zssdcomprov_grid.
  DATA: lv_ind   TYPE i.

* Inicializamos
  REFRESH gti_datos.

* Sacamos los datos de la sociedad
  SELECT SINGLE * FROM t001 WHERE bukrs = p_bukrs.
  CHECK sy-subrc = 0.

* Sacamos los datos del proveedor
  DATA i TYPE i.
  DATA ti_lfa1 TYPE TABLE OF lfa1 WITH HEADER LINE.

  CLEAR ti_lfa1[].
  SELECT * INTO TABLE ti_lfa1 FROM lfa1
    WHERE lifnr IN so_lifnr.

  DESCRIBE TABLE ti_lfa1 LINES i.
  IF i = 1.
    READ TABLE ti_lfa1 INDEX 1.
    SELECT SINGLE * FROM lfa1
        WHERE lifnr = ti_lfa1-lifnr.
  ELSE.
    lfa1-name1 = '*'.
    lfa1-lifnr = '9999999999'.
  ENDIF.

  CHECK ti_lfa1[] IS NOT INITIAL.

*  DATA v_nombre_real TYPE znombre_real.
*  CLEAR v_nombre_real.
*  SELECT SINGLE nombre_real INTO v_nombre_real FROM zfi_nombre_empl
*    WHERE lifnr = p_lifnr.
*  IF v_nombre_real IS NOT INITIAL.
*    lfa1-name1 = v_nombre_real.
*  ENDIF.
  IF p_solo = 'X'.

* Sacamos todas las posiciones de la tabla
    SELECT * INTO CORRESPONDING FIELDS OF TABLE gti_datos
        FROM  ztsdcom_pos
        FOR ALL ENTRIES IN ti_lfa1
        WHERE bukrs     = p_bukrs
        AND   gsber     IN so_gsber
        AND   lifnr     = ti_lfa1-lifnr
        AND   vbeln     IN so_vbeln
        AND   kunnr     IN so_kunnr
        AND   kschl     IN so_kschl
        AND   fkdat     IN so_fkdat
        AND   matnr     IN so_matnr
        AND   erdat     IN so_erdat
        AND   zstat_pos IN (gc_dev_aut, gc_dev_man)
      AND   belnr_man = space.
  ELSE.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE gti_datos
          FROM  ztsdcom_pos FOR ALL ENTRIES IN ti_lfa1
          WHERE bukrs     = p_bukrs
          AND   gsber     IN so_gsber
          AND   lifnr     = ti_lfa1-lifnr"lifnr     = p_lifnr
          AND   vbeln     IN so_vbeln
          AND   kunnr     IN so_kunnr
          AND   kschl     IN so_kschl
          AND   fkdat     IN so_fkdat
          AND   matnr     IN so_matnr
          AND   erdat     IN so_erdat
          AND   zstat_pos IN (gc_dev_aut, gc_dev_man).
  ENDIF.

* Recorremos la tabla sacando los datos que faltan
  LOOP AT gti_datos INTO ls_dato.
    lv_ind = sy-tabix.
*   Nombre del pagador
    SELECT SINGLE name1 INTO ls_dato-name1
        FROM  kna1
        WHERE kunnr = ls_dato-kunnr.
*   Descripción del material (de la factura)
    SELECT SINGLE arktx INTO ls_dato-maktx
        FROM  vbrp
        WHERE vbeln = ls_dato-vbeln
        AND   posnr = ls_dato-posnr.

    SELECT SINGLE fksto sfakn INTO (ls_dato-fksto, ls_dato-sfakn)
      FROM vbrk
      WHERE vbeln = ls_dato-vbeln.

    IF ls_dato-kbetr < 0.
      ls_dato-kawrt = ls_dato-kawrt * -1.
    ENDIF.

    SELECT SINGLE fkart INTO ls_dato-fkart
      FROM vbrk
      WHERE vbeln = ls_dato-vbeln.

    IF ls_dato-fkart IS NOT INITIAL.
      SELECT SINGLE vtext INTO ls_dato-vtext
        FROM tvfkt
        WHERE spras = sy-langu
        AND fkart = ls_dato-fkart.
    ENDIF.

*   Icono
    CASE ls_dato-zstat_pos.
      WHEN '01'. ls_dato-icono = icon_checked.    "dev. automático
      WHEN '03'. ls_dato-icono = icon_annotation. "dev. manual
    ENDCASE.

*   Chequear si no contabiliza, quitamos el numero de doc.
* Solo contabilizar si esta parametrizado como contabilizar
    DATA l_ztsdcom002 TYPE ztsdcom002.
    CLEAR l_ztsdcom002.
    SELECT SINGLE * INTO l_ztsdcom002 FROM ztsdcom002
      WHERE lifnr = ls_dato-lifnr
        AND bukrs = ls_dato-bukrs
        AND gsber = ls_dato-gsber.
    IF l_ztsdcom002-tipol = space OR l_ztsdcom002-tipol = '00'.
      ls_dato-belnr_man = '9999999999'.
      ls_dato-gjahr_man = '9999'.
    ENDIF.

    IF l_ztsdcom002 IS NOT INITIAL.
      ls_dato-frecuencia_liq = l_ztsdcom002-frecuencia_liq.
    ENDIF.

    SELECT SINGLE konwa kpein kmein
      INTO ( ls_dato-konwa, ls_dato-kpein, ls_dato-kmein )
      FROM konp
      WHERE kschl EQ ls_dato-kschl.

    SELECT SINGLE kpein kmein kurrf
      INTO ( ls_dato-kpein, ls_dato-kmein, ls_dato-kurrf )
*      FROM prcd_elements AS t1 INNER JOIN vbrk AS t2 ON t1~knumv EQ t2~knumv
      FROM konv AS t1 INNER JOIN vbrk AS t2 ON t1~knumv EQ t2~knumv
      INNER JOIN vbrp AS t3 ON t2~vbeln EQ t3~vbeln
      WHERE t1~kschl EQ ls_dato-kschl
      AND t2~vbeln EQ ls_dato-vbeln
      AND t3~posnr EQ ls_dato-posnr.

*   Modificamos la línea
    MODIFY gti_datos FROM ls_dato INDEX lv_ind.
  ENDLOOP.

ENDFORM.                    " SELECCIONAR_DATOS

*&---------------------------------------------------------------------*
*&      Form  mostrar_alv
*&---------------------------------------------------------------------*
FORM mostrar_alv.

  DATA: lti_fieldcat TYPE lvc_t_fcat.
  DATA: ls_layout  TYPE lvc_s_layo,
        ls_variant TYPE disvariant.
  DATA: lv_repid     TYPE syrepid.

* Variante
  lv_repid          = sy-repid.
  ls_variant-report = lv_repid.

* Preparamos el catálogo de campos
  PERFORM prepare_fielcat CHANGING lti_fieldcat.
* Layout
  ls_layout-cwidth_opt = 'X'.
  ls_layout-sel_mode   = 'A'.

* Mostramos el ALV
  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_buffer_active    = ' '
      i_bypassing_buffer = 'X'
      is_layout          = ls_layout
      is_variant         = ls_variant
      i_save             = 'A'
    CHANGING
      it_outtab          = gti_datos
      it_fieldcatalog    = lti_fieldcat.

* Volvemos a ajustar el ancho de las columnas
  PERFORM refrescar_alv .

ENDFORM.                    " mostrar_alv

*&---------------------------------------------------------------------*
*&      Form  prepare_fielcat
*&---------------------------------------------------------------------*
FORM prepare_fielcat CHANGING cti_fieldcat TYPE lvc_t_fcat.

  DATA: ls_fcat   TYPE lvc_s_fcat.
  DATA: lv_ind    TYPE i,
        lv_delete TYPE flag.

* Recuperamos el catálogo de campos
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active    = 'A'
      i_structure_name   = 'ZSSDCOMPROV_GRID'
      i_bypassing_buffer = 'X'
    CHANGING
      ct_fieldcat        = cti_fieldcat.

* Recorremos el catálogo modificando las propiedades
  LOOP AT cti_fieldcat INTO ls_fcat.
    lv_ind = sy-tabix.
*   Dependiendo del campo modificamos unas cosas u otras
    CASE ls_fcat-fieldname.
*     Campos clave
      WHEN 'ICONO' OR 'BUKRS' OR 'BELNR_VF' OR 'GJAHR' OR 'VBELN' OR
           'POSNR' OR 'LIFNR' OR 'KSCHL'    OR 'ZCONT_MAN' OR 'GSBER'.
        ls_fcat-key = 'X'.
    ENDCASE.

*   Dependiendo del campo modificamos unas cosas u otras
    CASE ls_fcat-fieldname.
*     Campos navegables
      WHEN 'VBELN' OR 'POSNR' OR 'BELNR_VF' OR 'BELNR_MAN'.
        ls_fcat-hotspot = 'X'.
*     Colores en los campos de diferencias
      WHEN 'KAWRT' OR 'KBETR' OR 'KWERT' OR 'WAERK'.
        ls_fcat-emphasize = 'C700'.
        CASE ls_fcat-fieldname.
          WHEN 'KBETR'.
            ls_fcat-cfieldname = space.
        ENDCASE.
    ENDCASE.
*   Modificamos la línea del catálogo
    MODIFY cti_fieldcat FROM ls_fcat INDEX lv_ind.
  ENDLOOP.

ENDFORM.                    " prepare_fielcat

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_HTML_HEADER
*&---------------------------------------------------------------------*
FORM mostrar_html_header.

  DATA: l_doctable TYPE REF TO cl_dd_table_element,
        l_col_pic  TYPE REF TO cl_dd_area,
        l_col_tit  TYPE REF TO cl_dd_area,
        l_col_info TYPE REF TO cl_dd_area.

  DATA: lv_logo  TYPE sdydo_key VALUE 'ZBUKRS_XXXX_ALV',
        lv_text  TYPE sdydo_text_element,
        lv_fecha TYPE char10.


* Creamos una tabla con 3 columnas
  CALL METHOD g_dd_doc->add_table
    EXPORTING
      no_of_columns = 3
      border        = '0'
      width         = '100%'
    IMPORTING
      table         = l_doctable.

* Columna del logo
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '15%'
    IMPORTING
      column = l_col_pic.

* Columna de títulos
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '10%'
    IMPORTING
      column = l_col_tit.

* Columna de valores (información)
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '75%'
    IMPORTING
      column = l_col_info.

* Ponemos el logo
  REPLACE 'XXXX' IN lv_logo WITH p_bukrs.
  CALL METHOD l_col_pic->add_picture
    EXPORTING
      picture_id = lv_logo.

* Ponemos el título de la Sociedad
  CALL METHOD l_col_tit->add_text
    EXPORTING
      text         = text-c01
      sap_color    = cl_dd_area=>list_heading
      sap_fontsize = cl_dd_area=>large.
  l_col_tit->new_line( ).

* Ponemos el proveedor
  CALL METHOD l_col_tit->add_text
    EXPORTING
      text         = text-c02
      sap_color    = cl_dd_area=>list_heading
      sap_fontsize = cl_dd_area=>large.

* Ponemos el nombre de la sociedad
  lv_text = t001-butxt.
  CALL METHOD l_col_info->add_text
    EXPORTING
      text         = lv_text
      sap_fontsize = cl_dd_document=>large.
  l_col_info->new_line( ).

* Ponemos el comisionista
  CONCATENATE lfa1-lifnr lfa1-name1 INTO lv_text SEPARATED BY space.
  CALL METHOD l_col_info->add_text
    EXPORTING
      text         = lv_text
      sap_fontsize = cl_dd_document=>large.

* Creamos el objeto HTML en el container de arriba
  CREATE OBJECT g_html
    EXPORTING
      parent = g_container_1.

* Cargamos los textos en el visor HTML
  g_dd_doc->html_control = g_html.

* Visualizamos los textos
  CALL METHOD g_dd_doc->merge_document.
  CALL METHOD g_dd_doc->display_document
    EXPORTING
      reuse_control = 'X'
      parent        = g_container_1.

ENDFORM.                    " MOSTRAR_HTML_HEADER

*&---------------------------------------------------------------------*
*&      Form  REFRESCAR_ALV
*&---------------------------------------------------------------------*
FORM refrescar_alv.

  DATA: ls_layout TYPE lvc_s_layo,
        ls_stable TYPE lvc_s_stbl.

* Sacamos el layout del ALV
  CALL METHOD g_grid->get_frontend_layout
    IMPORTING
      es_layout = ls_layout.

* Ponemos de nuevo que optimice las columnas
  ls_layout-cwidth_opt = 'X'.

* Cargamos de nuevo el layout
  CALL METHOD g_grid->set_frontend_layout
    EXPORTING
      is_layout = ls_layout.

* Refrescamos el ALV
  ls_stable-row = 'X'.
  ls_stable-col = 'X'.
  CALL METHOD g_grid->refresh_table_display
    EXPORTING
      is_stable = ls_stable.

ENDFORM.                    " REFRESCAR_ALV

*&---------------------------------------------------------------------*
*&      Form  MODIFICAR_COMISIONISTA
*&---------------------------------------------------------------------*
FORM modificar_comisionista.

  DATA: lti_rows  TYPE lvc_t_row,
        lti_datos TYPE TABLE OF zssdcomprov_grid.
  DATA: ls_row      TYPE lvc_s_row,
        ls_dato     TYPE zssdcomprov_grid,
        ls_dato_aux TYPE zssdcomprov_grid.
  DATA: lv_lifnr_new TYPE lifnr,
        lv_erdat     TYPE erdat,
        lv_resp      TYPE flag,
        lv_nummod    TYPE zcom_cont_man,
        lv_ind       TYPE i,
        lv_error     TYPE flag.

* Sacamos las líneas marcada
  CALL METHOD g_grid->get_selected_rows
    IMPORTING
      et_index_rows = lti_rows.

  "ASC 14.01.2025 >>> Error al modificar masivamente el comisionista
  "Selecciona las filas también de subtotales y al hacer el loop duplica las lineas
  DELETE lti_rows[] WHERE rowtype IS NOT INITIAL.
  "ASC 14.01.2025 <<< Error al modificar masivamente el comisionista

* Si no hay nada marcado -> Mensaje y fuera
  READ TABLE lti_rows INTO ls_row INDEX 1.
  IF sy-subrc <> 0.
    MESSAGE w006.
    EXIT.
  ENDIF.

* Recorremos las líneas seleccionadas realizando chequeo
  CLEAR lv_error.
  LOOP AT lti_rows INTO ls_row.
*   Sacamos los datos de la línea
    CLEAR ls_dato.
    READ TABLE gti_datos INTO ls_dato INDEX ls_row-index.
    CHECK sy-subrc = 0.
*   Chequeamos que es una línea ya contabilizada (debe tener el documento FI)
    IF ls_dato-belnr_man IS INITIAL.
      lv_error = 'X'.
      MESSAGE w007.
      EXIT.
    ENDIF.
    DATA l_ztsdcom_pos TYPE ztsdcom_pos.
    DATA l_ztsdcom_prliqcab TYPE ztsdcom_prliqcab.

    SELECT SINGLE a~mandt a~bukrs a~belnr_vf a~gjahr a~vbeln a~posnr a~lifnr a~kschl a~zcont_man a~erdat a~fkdat a~kunnr a~matnr a~werks a~kawrt
      a~kbetr a~kwert a~waerk a~knumv a~sakn1 a~sakn2 a~belnr_man a~gjahr_man a~zstat_pos a~zstat_liqpos a~fkart a~vtext a~laufd a~laufi
      INTO l_ztsdcom_pos FROM ztsdcom_pos AS a
      INNER JOIN ztsdcom_prliqcab AS b ON a~laufd = b~laufd AND a~laufi = b~laufi AND a~bukrs = b~bukrs
      WHERE a~bukrs = ls_dato-bukrs
        AND a~vbeln = ls_dato-vbeln
        AND a~lifnr = ls_dato-lifnr
        AND a~kschl = ls_dato-kschl
        AND a~gsber = ls_dato-gsber
        AND ( a~laufd <> space AND a~laufd <> '00000000' AND a~laufd IS NOT NULL )
        AND b~zstat_liq <> '02'.
    IF sy-subrc = 0.
      SELECT SINGLE * INTO l_ztsdcom_prliqcab FROM ztsdcom_prliqcab
        WHERE bukrs = l_ztsdcom_pos-bukrs
          AND laufd = l_ztsdcom_pos-laufd
          AND laufi = l_ztsdcom_pos-laufi.
      IF l_ztsdcom_prliqcab-zstat_liq <> '02'.
        MESSAGE i398(00) WITH 'La factura está bloqueada en' 'la propuesta:' l_ztsdcom_pos-laufd l_ztsdcom_pos-laufi.
        lv_error = 'X'.
        EXIT.
      ENDIF.
    ENDIF.

*   Añadimos la entrada a la tabla local
    APPEND ls_dato TO lti_datos.
  ENDLOOP.

* Si hay un error -> FUERA
  IF lv_error = 'X'.
    EXIT.
  ENDIF.

* Mostramos el popup de modificación del comisionista
  CALL FUNCTION 'ZSDCOM_POPUP_MOD_COMISIONISTA'
    EXPORTING
      i_lifnr = ls_dato-lifnr
      i_name1 = lfa1-name1
    IMPORTING
      e_lifnr = lv_lifnr_new
      e_erdat = lv_erdat
      e_resp  = lv_resp.

* Chequeamos que viene relleno el proveedor nuevo y que la respuesta es OK
  CHECK lv_lifnr_new IS NOT INITIAL AND lv_resp = 'X'.

* Chequeamos que el proveedor es distinto al original
  CHECK ls_dato-lifnr <> lv_lifnr_new.

* Recorremos todas las líneas marcadas
  LOOP AT lti_datos INTO ls_dato.
*   Sacamos el índice de la línea de datos
    READ TABLE gti_datos INTO ls_dato_aux
                         WITH KEY bukrs     = ls_dato-bukrs
                                  belnr_vf  = ls_dato-belnr_vf
                                  gjahr     = ls_dato-gjahr
                                  vbeln     = ls_dato-vbeln
                                  posnr     = ls_dato-posnr
                                  lifnr     = ls_dato-lifnr
                                  kschl     = ls_dato-kschl
                                  zcont_man = ls_dato-zcont_man
                                  gsber     = ls_dato-gsber.
    IF sy-subrc = 0.
      lv_ind = sy-tabix.
    ENDIF.

*   Añadimos una entrada nueva con el comisionista original y los importes en negativo
*   Primero sacamos el número de modificación
    PERFORM calcular_num_mod USING ls_dato CHANGING lv_nummod.
*   Cargamos el icono (manual), el número de modifciación y los importes negativos
    CLEAR : ls_dato-belnr_man, ls_dato-zstat_liqpos.
    ls_dato-icono     = icon_annotation.
    ls_dato-zcont_man = lv_nummod.
    ls_dato-kawrt     = -1 * ls_dato-kawrt.
    ls_dato-kbetr     = -1 * ls_dato-kbetr.
    ls_dato-kwert     = -1 * ls_dato-kwert.
    ls_dato-erdat     = lv_erdat.
    ls_dato-zstat_pos = gc_dev_man.
    lv_ind = lv_ind + 1.
    INSERT ls_dato INTO gti_datos INDEX lv_ind.

*   Añadimos otra entrada a la tabla con los importes cambidos de nuevo y el
*   nuevo proveedor
    ls_dato-lifnr     = lv_lifnr_new.
*   Con el nuevo proveedor, sacamos el número de modificación
    PERFORM calcular_num_mod USING    ls_dato
                             CHANGING lv_nummod.
    ls_dato-zcont_man = lv_nummod.
    ls_dato-erdat     = lv_erdat.
    ls_dato-kawrt     = -1 * ls_dato-kawrt.
    ls_dato-kbetr     = -1 * ls_dato-kbetr.
    ls_dato-kwert     = -1 * ls_dato-kwert.
    lv_ind = lv_ind + 1.
    INSERT ls_dato INTO gti_datos INDEX lv_ind.
  ENDLOOP.

* Refrescamos el ALV
  PERFORM refrescar_alv.

ENDFORM.                    " MODIFICAR_COMISIONISTA

*&---------------------------------------------------------------------*
*&      Form  MODIFICAR_PORC_COMISION
*&---------------------------------------------------------------------*
FORM modificar_porc_comision.

  DATA: lti_rows  TYPE lvc_t_row,
        lti_datos TYPE TABLE OF zssdcomprov_grid.

  DATA: ls_row      TYPE lvc_s_row,
        ls_dato     TYPE zssdcomprov_grid,
        ls_dato_aux TYPE zssdcomprov_grid.

  DATA: lv_resp     TYPE flag,
        lv_erdat    TYPE erdat,
        lv_porc_new TYPE zz_wertv6, "kbetr,
        lv_porc_tot TYPE zz_wertv6, "kbetr,
        lv_nummod   TYPE zcom_cont_man,
        lv_ind      TYPE i,
        lv_lines    TYPE i,
        lv_error    TYPE flag.

* Sacamos las líneas marcadas
  CALL METHOD g_grid->get_selected_rows
    IMPORTING
      et_index_rows = lti_rows.

  DELETE lti_rows WHERE rowtype IS NOT INITIAL.

* Si no hay nada marcado -> Mensaje y fuera
  READ TABLE lti_rows INTO ls_row INDEX 1.
  IF sy-subrc <> 0.
    MESSAGE w006.
    EXIT.
  ENDIF.

* Recorremos las líneas seleccionadas realizando chequeo
  CLEAR lv_error.
  LOOP AT lti_rows INTO ls_row.
*   Sacamos los datos de la línea
    CLEAR ls_dato.
    READ TABLE gti_datos INTO ls_dato INDEX ls_row-index.
    CHECK sy-subrc = 0.
*   Chequeamos que es una línea ya contabilizada (debe tener el documento FI)
    IF ls_dato-belnr_man IS INITIAL.
      lv_error = 'X'.
      MESSAGE w007.
      EXIT.
    ENDIF.
*   Cargamos la línea en la de datos local
    APPEND ls_dato TO lti_datos.
  ENDLOOP.

* Si hay un error -> FUERA
  IF lv_error = 'X'.
    EXIT.
  ENDIF.

* Sacamos el número de líneas seleccionadas
  DESCRIBE TABLE lti_rows LINES lv_lines.


* Solo podemos modificar lineas con status = 2.
  DATA error.
  DATA aux_vbeln LIKE ztsdcom_pos-vbeln.
  DATA wa_datos LIKE LINE OF lti_datos.
  DATA l_ztsdcom_pos TYPE ztsdcom_pos.
  DATA l_ztsdcom_prliqcab TYPE ztsdcom_prliqcab.

  CLEAR error.
  LOOP AT lti_datos INTO wa_datos.
    SELECT SINGLE * INTO l_ztsdcom_pos FROM ztsdcom_pos
      WHERE bukrs = wa_datos-bukrs
        AND vbeln = wa_datos-vbeln
        AND lifnr = wa_datos-lifnr
        AND kschl = wa_datos-kschl
        AND gsber = wa_datos-gsber
        AND ( laufd <> space AND laufd <> '00000000' AND laufd IS NOT NULL )
        AND zstat_liqpos <> '02'.
    IF sy-subrc = 0.
      SELECT SINGLE * INTO l_ztsdcom_prliqcab FROM ztsdcom_prliqcab
        WHERE bukrs = l_ztsdcom_pos-bukrs
          AND laufd = l_ztsdcom_pos-laufd
          AND laufi = l_ztsdcom_pos-laufi.
      IF l_ztsdcom_prliqcab-zstat_liq <> '02'.
        MESSAGE i398(00) WITH 'La factura ya existe en' 'una propuesta sin contabilizar:' l_ztsdcom_pos-laufd l_ztsdcom_pos-laufi.
        error = 'X'.
        EXIT.
      ENDIF.
    ENDIF.
  ENDLOOP.

  CHECK error = space.

* Si solo han marcado una línea -> Mostramos un POPUP individual
  IF lv_lines = 1.
    DATA lv_pctj_eur TYPE char01.
    IF ls_dato-konwa EQ '%'.
      lv_pctj_eur = '%'.
    ELSE.
      lv_pctj_eur = 'M'.
    ENDIF.
    CALL FUNCTION 'ZSDCOM_POPUP_MOD_PORC_COMISION'
      EXPORTING
        i_base     = ls_dato-kawrt
        i_porc     = ls_dato-kbetr
        i_valor    = ls_dato-kwert
        i_waerk    = ls_dato-waerk
        i_pctj_eur = lv_pctj_eur
        i_kpein    = ls_dato-kpein
        i_kmein    = ls_dato-kmein
        i_kurrf    = ls_dato-kurrf
      IMPORTING
        e_porc     = lv_porc_new
        e_erdat    = lv_erdat
        e_resp     = lv_resp.

* Si han marcado mas de una línea -> Mostramos un popup colectivo
  ELSE.
    CALL FUNCTION 'ZSDCOM_POPUP_MOD_PORC_COM_COL'
      IMPORTING
        e_porc  = lv_porc_new
        e_erdat = lv_erdat
        e_resp  = lv_resp.
  ENDIF.

* Chequeamos que han confirmado el POPUP
  CHECK lv_resp = 'X'.

* Recorremos todas las posiciones seleccionadas
  SORT lti_datos BY bukrs belnr_vf gjahr vbeln posnr lifnr kschl gsber.
  DELETE ADJACENT DUPLICATES FROM lti_datos COMPARING bukrs belnr_vf gjahr vbeln posnr lifnr kschl gsber.

* Recorremos todas las posiciones seleccionadas
  LOOP AT lti_datos INTO ls_dato.
    CLEAR lv_porc_tot.
*   Sacamos el índice de la línea de datos
    READ TABLE gti_datos INTO ls_dato_aux
                         WITH KEY bukrs     = ls_dato-bukrs
                                  belnr_vf  = ls_dato-belnr_vf
                                  gjahr     = ls_dato-gjahr
                                  vbeln     = ls_dato-vbeln
                                  posnr     = ls_dato-posnr
                                  lifnr     = ls_dato-lifnr
                                  kschl     = ls_dato-kschl
                                  gsber     = ls_dato-gsber
                                  zcont_man = ls_dato-zcont_man.
    IF sy-subrc = 0.
      lv_ind = sy-tabix.
    ENDIF.

*   Chequeamos que el porcentaje original es <> del nuevo
    "CHECK ls_dato-kbetr <> lv_porc_new.

*   Cargamos el icono (manual), el número de modifciación y los importes
    PERFORM calcular_num_mod USING ls_dato CHANGING lv_nummod.

*   Para el % cogemos todas las posibles modificaciones de esa línea
    CLEAR lv_porc_tot.
    LOOP AT gti_datos INTO  ls_dato_aux
                      WHERE bukrs      = ls_dato-bukrs
                      AND   belnr_vf   = ls_dato-belnr_vf
                      AND   gjahr      = ls_dato-gjahr
                      AND   vbeln      = ls_dato-vbeln
                      AND   posnr      = ls_dato-posnr
                      AND   lifnr      = ls_dato-lifnr
                      AND   kschl      = ls_dato-kschl
                      AND   gsber      = ls_dato-gsber
                      AND   belnr_man <> space.
      lv_porc_tot = lv_porc_tot + ls_dato_aux-kbetr.
    ENDLOOP.

*   Chequeamos que el porcentaje original es <> del nuevo
    CHECK lv_porc_tot <> lv_porc_new.

*   Añadimos la línea
    CLEAR: ls_dato-belnr_man, ls_dato-zstat_liqpos.
    ls_dato-icono     = icon_annotation.
    ls_dato-zcont_man = lv_nummod.
    ls_dato-erdat     = lv_erdat.
*    ls_dato-kbetr     = lv_porc_new - lv_porc_tot.
    ls_dato-kbetr     = lv_porc_new - lv_porc_tot.
    ls_dato-kwert     = ( ls_dato-kawrt * ls_dato-kbetr ) / 100.
*    IF ls_dato-konwa EQ '%'.
*      ls_dato-kwert     = ( ls_dato-kawrt * ls_dato-kbetr ) / 100.
*    ELSE.
**      ls_dato-kwert     = ls_dato-kbetr.
*      ls_dato-kwert = ( ls_dato-kawrt * ( ls_dato-kbetr / ls_dato-kpein ) ) * abs( ls_dato-kurrf ).
**      gs_porc-valor_fi = gs_porc-base_fi * ( gs_porc-porc_fi / gv_kpein ).
*    ENDIF.
    IF ls_dato-kbetr >= 0.
      ls_dato-kwert = abs( ls_dato-kwert ).
    ELSEIF ls_dato-kwert > 0.
      ls_dato-kwert = ls_dato-kwert * ( -1 ).
    ENDIF.
    ls_dato-zstat_pos = gc_dev_man.
    lv_ind = lv_ind + 1.
    CLEAR ls_dato-laufd.
    CLEAR ls_dato-laufi.
    INSERT ls_dato INTO gti_datos INDEX lv_ind.
  ENDLOOP.

* Refrescamos el ALV
  PERFORM refrescar_alv.

ENDFORM.                    " MODIFICAR_PORC_COMISION

*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_COMISIONES
*&---------------------------------------------------------------------*
FORM eliminar_comisiones.

  DATA: lti_rows  TYPE lvc_t_row,
        lti_datos TYPE TABLE OF zssdcomprov_grid.
  DATA: ls_row      TYPE lvc_s_row,
        ls_dato     TYPE zssdcomprov_grid,
        ls_dato_aux TYPE zssdcomprov_grid.
  DATA: lv_ind   TYPE i,
        lv_error TYPE flag.

* Sacamos las líneas marcadas
  CALL METHOD g_grid->get_selected_rows
    IMPORTING
      et_index_rows = lti_rows.

* Si no hay nada marcado -> Mensaje y fuera
  READ TABLE lti_rows INTO ls_row INDEX 1.
  IF sy-subrc <> 0.
    MESSAGE w006.
    EXIT.
  ENDIF.

* Recorremos las líneas seleccionadas realizando chequeo
  CLEAR lv_error.
  LOOP AT lti_rows INTO ls_row.
*   Sacamos los datos de la línea
    CLEAR ls_dato.
    READ TABLE gti_datos INTO ls_dato INDEX ls_row-index.
    CHECK sy-subrc = 0.
*   Chequeamos que NO es una línea ya contabilizada
    IF ls_dato-belnr_man IS NOT INITIAL.
      lv_error = 'X'.
      MESSAGE w009.
      EXIT.
    ENDIF.
*   Añadimos los datos de la línea a la tabla local
    APPEND ls_dato TO lti_datos.
  ENDLOOP.

* Si hay un error -> FUERA
  IF lv_error = 'X'.
    EXIT.
  ENDIF.

* Recorremos la tabla que hemos sacado quitando las líneas de la global
  LOOP AT lti_datos INTO ls_dato.
    READ TABLE gti_datos INTO ls_dato_aux
                         WITH KEY bukrs     = ls_dato-bukrs
                                  belnr_vf  = ls_dato-belnr_vf
                                  gjahr     = ls_dato-gjahr
                                  vbeln     = ls_dato-vbeln
                                  posnr     = ls_dato-posnr
                                  lifnr     = ls_dato-lifnr
                                  kschl     = ls_dato-kschl
                                  gsber     = ls_dato-gsber
                                  zcont_man = ls_dato-zcont_man.
    IF sy-subrc = 0.
      lv_ind = sy-tabix.
      DELETE gti_datos INDEX lv_ind.
    ENDIF.
  ENDLOOP.

* Refrescamos el ALV
  PERFORM refrescar_alv.

ENDFORM.                    " ELIMINAR_COMISIONES

*&---------------------------------------------------------------------*
*&      Form  INSERTAR_COMISION
*&---------------------------------------------------------------------*
FORM insertar_comision.

  DATA: ls_pos  TYPE ztsdcom_pos,
        ls_dato TYPE zssdcomprov_grid.
  DATA: lv_resp   TYPE flag,
        lv_error  TYPE flag,
        lv_nummod TYPE zcom_cont_man.

* Llamamos a la fùnción que muestra el popup
  CALL FUNCTION 'ZSDCOM_POPUP_INSERT_POS_COMIS'
    IMPORTING
      es_pos = ls_pos
      e_resp = lv_resp.

* Chequeamos que han confirmado el POPUP
  CHECK lv_resp = 'X'.

* Chequeamos que la factura/posición no está ya en el listado
  READ TABLE gti_datos INTO ls_dato WITH KEY vbeln = ls_pos-vbeln
                                             posnr = ls_pos-posnr
                                             lifnr = ls_pos-lifnr
                                             kschl = ls_pos-kschl
                                             gsber = ls_pos-gsber.
  IF sy-subrc = 0.
    MESSAGE w020 DISPLAY LIKE 'I'.
    EXIT.
  ENDIF.

* Cargamos el icono (manual), el número de modificación y los importes
  PERFORM calcular_num_mod USING ls_dato CHANGING lv_nummod.
  CLEAR ls_dato.
  MOVE-CORRESPONDING ls_pos TO ls_dato.
  ls_dato-icono     = icon_annotation.
  ls_dato-zcont_man = lv_nummod.
  ls_dato-zstat_pos = gc_dev_man.
* Nombre del pagador
  SELECT SINGLE name1 INTO ls_dato-name1
      FROM  kna1
      WHERE kunnr = ls_dato-kunnr.
* Descripción del material
  SELECT SINGLE arktx INTO ls_dato-maktx
      FROM  vbrp
      WHERE vbeln = ls_dato-vbeln
      AND   posnr = ls_dato-posnr.
* Añadimos la línea
  APPEND ls_dato TO gti_datos.

* Refrescamos el ALV
  PERFORM refrescar_alv.

ENDFORM.                    " INSERTAR_COMISION

*&---------------------------------------------------------------------*
*&      Form  CALCULAR_NUM_MOD
*&---------------------------------------------------------------------*
FORM calcular_num_mod  USING    ps_dato  TYPE zssdcomprov_grid
                       CHANGING p_nummod.

  DATA: ls_dato   TYPE zssdcomprov_grid.
  DATA: lv_nummod TYPE zcom_cont_man.

* Inicializamos
  CLEAR p_nummod.

* Recorremos la tabla interna con los datos clave
  LOOP AT gti_datos INTO ls_dato
                    WHERE bukrs    = ps_dato-bukrs
                    AND   belnr_vf = ps_dato-belnr_vf
                    AND   gjahr    = ps_dato-gjahr
                    AND   vbeln    = ps_dato-vbeln
                    AND   posnr    = ps_dato-posnr
                    AND   lifnr    = ps_dato-lifnr
                    AND   gsber    = ps_dato-gsber
                    AND   kschl    = ps_dato-kschl.
    IF ls_dato-zcont_man > lv_nummod.
      lv_nummod = ls_dato-zcont_man.
    ENDIF.
  ENDLOOP.

* Cargamos el nuevo valor (si hay datos)
  IF sy-subrc = 0.
    p_nummod = lv_nummod + '001'.
  ENDIF.

ENDFORM.                    " CALCULAR_NUM_MOD

*&---------------------------------------------------------------------*
*&      Form  CONTABILIZAR_PROVISIONES
*&---------------------------------------------------------------------*
FORM contabilizar_provisiones.

  DATA: lti_return TYPE TABLE OF bapiret2.

  DATA: ls_dato   TYPE zssdcomprov_grid,
        ls_pos    TYPE ztsdcom_pos,
        ls_return TYPE bapiret2.

  DATA: lv_ind   TYPE i,
        lv_belnr TYPE belnr_d,
        lv_gjahr TYPE gjahr.

* Inicializamos la tabla de logs
  REFRESH gti_log.

* Recorremos toda la tabla de datos, las líneas que no estén contabilizadas
  LOOP AT gti_datos INTO ls_dato WHERE belnr_man = space.
*   Inicializamos
    lv_ind = sy-tabix.
    CLEAR: ls_pos, lti_return[], lv_belnr, lv_gjahr.
    MOVE-CORRESPONDING ls_dato TO ls_pos.

*   Llamamos a la función que contabiliza la provisión
    CALL FUNCTION 'ZSDCOM_CONTABILIZAR_PROVISION'
      EXPORTING
        is_dato   = ls_pos
      IMPORTING
        e_belnr   = lv_belnr
        e_gjahr   = lv_gjahr
      TABLES
        et_return = lti_return.

*   Chequeamos errores
    READ TABLE lti_return INTO ls_return WITH KEY type = 'E'.
*   Si no hay errores -> Actualizamos la tabla Z
    IF sy-subrc <> 0.
*     Actualizamos la tabla interna
      ls_dato-belnr_man = lv_belnr.
      ls_dato-gjahr_man = lv_gjahr.
      MODIFY gti_datos FROM ls_dato INDEX lv_ind.
*     Actualizamos la tabla Z
      ls_pos-belnr_man = lv_belnr.
      ls_pos-gjahr_man = lv_gjahr.
      MODIFY ztsdcom_pos FROM ls_pos.

*   Si hay errores -> Los añadimos al log
    ELSE.
      LOOP AT lti_return INTO ls_return WHERE type = 'E'.
        APPEND ls_return TO gti_log.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

* Hacemos el COMMIT
  COMMIT WORK AND WAIT.

* Si no hay errores -> Añadimos un mensaje al log
  IF gti_log[] IS INITIAL.
    CLEAR ls_return.
    ls_return-type      = 'I'.
    ls_return-id        = 'ZSDCOM'.
    ls_return-number    = '012'.
    APPEND ls_return TO gti_log.
  ENDIF.

* Mostramos el log
  CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
    TABLES
      i_bapiret2_tab = gti_log.

* Refrescamos el ALV
  PERFORM refrescar_alv.

ENDFORM.                    " CONTABILIZAR_PROVISIONES

*&---------------------------------------------------------------------*
*&      Form  EXIT
*&---------------------------------------------------------------------*
FORM exit.

  DATA: ls_dato   TYPE zssdcomprov_grid,
        ls_return TYPE bapiret2.
  DATA: lv_answer  TYPE char1.

* Chequeamos si ha habido algún cambio
  READ TABLE gti_datos INTO ls_dato WITH KEY belnr_man = space.
* Si hay cambios mostramos un POPUP preguntando
  IF sy-subrc = 0.
*   Mostramos el POPUP preguntando si quieren guardar
    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        titlebar      = text-q01
        text_question = text-q02
      IMPORTING
        answer        = lv_answer.

*   Si la respuestas es SI...
    IF lv_answer = '1'.
*     Contabilizamos
      PERFORM contabilizar_provisiones.
*     Si no hay errores -> Salimos
      READ TABLE gti_log INTO ls_return WITH KEY type = 'E'.
      IF sy-subrc <> 0.
        SET SCREEN 0.
        LEAVE SCREEN.
      ENDIF.
*   Si no quieren guardar -> Salimos
    ELSE.
      SET SCREEN 0.
      LEAVE SCREEN.
    ENDIF.

* Si no hay cambios salimos
  ELSE.
    SET SCREEN 0.
    LEAVE SCREEN.
  ENDIF.

ENDFORM.                    " EXIT
