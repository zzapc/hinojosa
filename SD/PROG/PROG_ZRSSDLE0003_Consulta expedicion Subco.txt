*&---------------------------------------------------------------------*
*& Report  ZRSSDLE0003                                                    *
* ZRSSDLE0003 - Programa para consultar el detalle de la expedición    *
*----------------------------------------------------------------------*
* Autor : Rodolfo Malea.SEIS                                           *
* Date : 02.05.2024                                                    *
*----------------------------------------------------------------------*
REPORT zrssdle0003.

"""""""""""""""""
" Constantes
"""""""""""""""""

CONSTANTS: gc_dynpro_main TYPE sy-dynnr VALUE '0100',
           gc_dynpro_pos  TYPE sy-dynnr VALUE '0110',
           gc_dynpro_zlog TYPE sy-dynnr VALUE '0120'.

CONSTANTS: cg_boton_imprimir     TYPE ui_func VALUE 'IMPRIMIR'.

"""""""""""""""""
" Tipos de datos
"""""""""""""""""
TYPES: BEGIN OF st_lin_alv.
         INCLUDE TYPE zst_sdle_zrsdle0003_alv.
       TYPES END OF st_lin_alv.



"""""""""""""""""""""""
" Control pestañas
""""""""""""""""""""""
CONSTANTS: BEGIN OF c_c_ficha,
             tab1 LIKE sy-ucomm VALUE 'ZLOG',
             tab2 LIKE sy-ucomm VALUE 'POS',
           END OF c_c_ficha.

CONTROLS:  c_ficha TYPE TABSTRIP.
DATA: BEGIN OF g_c_ficha,
        subscreen   LIKE sy-dynnr,
        prog        LIKE sy-repid VALUE sy-repid,
        pressed_tab LIKE sy-ucomm VALUE c_c_ficha-tab1,
      END OF g_c_ficha.

"""""""""""""""""
" Includes
"""""""""""""""""
INCLUDE zseis_patron_alv.

"""""""""""""""""
" Variables globalres
"""""""""""""""""
TABLES: zst_sdle_zrsdle0003_cab.
DATA: messtab TYPE TABLE OF bdcmsgcoll WITH HEADER LINE.
DATA: bdcdata LIKE bdcdata OCCURS 0 WITH HEADER LINE.
DATA: mode TYPE char1.

"""""""""""""""""
" Pantalla de selección
"""""""""""""""""
PARAMETERS: p_ntra TYPE ztsdle0003-numtransporte.


""""""""""""""""""""""
"Rutinas
""""""""""""""""""""""

*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_initialization.

  vg_ventana_inicial            = gc_dynpro_main.
  vg_no_justif_cols             = 'X'.
  vg_alv_protegido_por_defecto  = 'X'.

  PERFORM f_config_dynpro USING  gc_dynpro_main ''  'T01' 'STA_0100' ' ' 'X'.
  PERFORM f_config_subscreen USING  gc_dynpro_main gc_dynpro_pos 'CC_ALV_POS' 'T11' ' '.
  PERFORM f_config_subscreen USING  gc_dynpro_main gc_dynpro_zlog 'CC_ALV_ZLOG' 'T12' 'X'.

  "Configuración objeto de bloqueo

  DATA(tl_params_objeto_bloqueo) = VALUE tt_config_params_bloqueo( ( nombre_param = 'NUMTRANSPORTE'
                                                                     nombre_campo = 'ZST_SDLE_ZRSDLE0003_CAB-NUMTRANSPORTE'
                                                                     es_variable  = 'X' ) ).
  PERFORM f_config_objeto_bloqueo USING 'EZ_ZTSDLE0001' tl_params_objeto_bloqueo.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CREAR_CATALOGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_catalogo TABLES it_catalogo TYPE lvc_t_fcat USING lp_dynnr.

**  wa_layout-info_fname = 'COLOR'.
**  wa_layout-sel_mode = 'A'.


  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZST_SDLE_ZRSDLE0003_ALV'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_catalogo[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.


  DELETE it_catalogo WHERE fieldname = 'NUMTRANSPORTE'.
  DELETE it_catalogo WHERE fieldname = 'TIPO'.
  DELETE it_catalogo WHERE fieldname = 'ESTADO'.

  CASE lp_dynnr.
    WHEN gc_dynpro_pos.
      DELETE it_catalogo WHERE fieldname = 'POSICION'.
      DELETE it_catalogo WHERE fieldname = 'PASO'.
      DELETE it_catalogo WHERE fieldname = 'PASO_TXT'.
      DELETE it_catalogo WHERE fieldname = 'MBLNR'.
      DELETE it_catalogo WHERE fieldname = 'MJAHR'.
      DELETE it_catalogo WHERE fieldname = 'VBELN_VL'.
      DELETE it_catalogo WHERE fieldname = 'TKNUM'.
      DELETE it_catalogo WHERE fieldname = 'MENSAJE'.
      DELETE it_catalogo WHERE fieldname = 'ESTADO_ICON'.

    WHEN gc_dynpro_zlog.
      DELETE it_catalogo WHERE fieldname = 'MATNR_FINAL'.
      DELETE it_catalogo WHERE fieldname = 'MATNR_SE'.
      DELETE it_catalogo WHERE fieldname = 'CHARG'.
      DELETE it_catalogo WHERE fieldname = 'KWMENG'.
      DELETE it_catalogo WHERE fieldname = 'VRKME'.
      DELETE it_catalogo WHERE fieldname = 'MENGE_TEORICO'.
      DELETE it_catalogo WHERE fieldname = 'MEINS_TEORICO'.
      DELETE it_catalogo WHERE fieldname = 'MENGE_REAL'.
      DELETE it_catalogo WHERE fieldname = 'MEINS_REAL'.
      DELETE it_catalogo WHERE fieldname = 'STOCK'.
      DELETE it_catalogo WHERE fieldname = 'MEINS_STOCK'.
      DELETE it_catalogo WHERE fieldname = 'TIPO'.
      DELETE it_catalogo WHERE fieldname = 'MAKTX_FINAL'.
      DELETE it_catalogo WHERE fieldname = 'MAKTX_SE'.

      LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>).
        CASE <fs_catalogo>-fieldname.
          WHEN 'ESTADO_ICON'.
            <fs_catalogo>-icon = 'X'.
            <fs_catalogo>-col_pos = 1.
          WHEN 'PASO'.
            <fs_catalogo>-col_pos = 2.
          WHEN 'PASO_TXT'.
            <fs_catalogo>-col_pos = 3.
            <fs_catalogo>-outputlen = 30.
          WHEN 'POSICION'.
            <fs_catalogo>-col_pos = 4.
          WHEN 'USUCRE'.
            <fs_catalogo>-col_pos = 5.
          WHEN 'ERDAT'.
            <fs_catalogo>-col_pos = 6.
          WHEN 'ERZET'.
            <fs_catalogo>-col_pos = 7.
          WHEN 'MENSAJE'.
            <fs_catalogo>-col_pos = 8.
            <fs_catalogo>-outputlen = 30.
          WHEN 'MBLNR'.
            <fs_catalogo>-col_pos = 9.
            <fs_catalogo>-hotspot = 'X'.
          WHEN 'MJAHR'.
            <fs_catalogo>-col_pos = 10.
          WHEN 'VBELN'.
            <fs_catalogo>-col_pos = 11.
            <fs_catalogo>-hotspot = 'X'.
          WHEN 'POSNR'.
            <fs_catalogo>-col_pos = 12.
          WHEN 'EBELN'.
            <fs_catalogo>-col_pos = 13.
            <fs_catalogo>-hotspot = 'X'.
          WHEN 'VBELN_VL'.
            <fs_catalogo>-col_pos = 14.
            <fs_catalogo>-hotspot = 'X'.
          WHEN 'TKNUM'.
            <fs_catalogo>-col_pos = 15.
            <fs_catalogo>-hotspot = 'X'.
          WHEN OTHERS.
            <fs_catalogo>-col_pos = 99.
        ENDCASE.
      ENDLOOP.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_PRE_LLENAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_pre_llenar_datos.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_LLENAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos TABLES tp_alv TYPE tt_lin_alv_patron USING vp_dynpro.
  DATA: ls_alv         TYPE zst_sdle_zrsdle0003_alv,
        tl_transportes TYPE ztt_sdle_transp_cab.
  DATA(fl_monitorexp_dpc_imp) = NEW zsscl_sdle_monitorexp_dpc_imp( ).
  CASE vp_dynpro.
    WHEN gc_dynpro_main.

      TRY.
          DATA(ls_cab) = fl_monitorexp_dpc_imp->trans_cab_getdetail( p_ntra ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR ls_cab.
      ENDTRY.


      MOVE-CORRESPONDING ls_cab TO zst_sdle_zrsdle0003_cab.

    WHEN gc_dynpro_pos.
      TRY.
          DATA(lt_datos_pos) =  fl_monitorexp_dpc_imp->trans_pos_getlist( p_ntra ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR lt_datos_pos.
      ENDTRY.

      LOOP AT lt_datos_pos ASSIGNING FIELD-SYMBOL(<fs_datos_pos>).
        MOVE-CORRESPONDING <fs_datos_pos> TO ls_alv.
        PERFORM f_append_dato  TABLES   tp_alv  USING ls_alv.
      ENDLOOP.

    WHEN gc_dynpro_zlog.
      TRY.
          DATA(lt_datos_log) =  fl_monitorexp_dpc_imp->trans_log_getlist( p_ntra ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR lt_datos_log.
      ENDTRY.
      SORT lt_datos_log BY posicion paso.
      LOOP AT lt_datos_log ASSIGNING FIELD-SYMBOL(<fs_datos_log>).
        MOVE-CORRESPONDING <fs_datos_log> TO ls_alv.

        IF ls_alv-estado = 1.
          ls_alv-estado_icon = '@5B@'.
        ELSE.
          ls_alv-estado_icon = '@5C@'.
        ENDIF.
        PERFORM f_append_dato  TABLES   tp_alv  USING ls_alv.
      ENDLOOP.
  ENDCASE.

ENDFORM.


MODULE c_ficha_active_tab_set OUTPUT.
  c_ficha-activetab = g_c_ficha-pressed_tab.
  CASE g_c_ficha-pressed_tab.
    WHEN c_c_ficha-tab1.
      g_c_ficha-subscreen = gc_dynpro_zlog.
    WHEN c_c_ficha-tab2.
      g_c_ficha-subscreen = gc_dynpro_pos.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

MODULE c_ficha_active_tab_get INPUT.
  okcode = sy-ucomm.
  CASE okcode.
    WHEN c_c_ficha-tab1.
      g_c_ficha-pressed_tab = c_c_ficha-tab1.
    WHEN c_c_ficha-tab2.
      g_c_ficha-pressed_tab = c_c_ficha-tab2.
    WHEN OTHERS.
  ENDCASE.


ENDMODULE.

FORM f_user_command USING vp_dynnr okcode.
  DATA(fl_monitorexp_dpc_imp) = NEW zsscl_sdle_monitorexp_dpc_imp( ).

  CASE okcode.
    WHEN 'UNDO'.
      TRY.
          fl_monitorexp_dpc_imp->anular_transporte( p_ntra ).



        CATCH /iwbep/cx_mgw_busi_exception.
          MESSAGE 'Error al procesar el transporte. Revise log.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDTRY.
      LOOP AT tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WHERE dynpro = gc_dynpro_main.
        " Recargar datos
        CLEAR <fs_config_subscreen>-tabla.
        PERFORM f_llenar_datos TABLES <fs_config_subscreen>-tabla USING <fs_config_subscreen>-subscreen.
        " Refrescar ALV
        IF <fs_config_subscreen>-alv IS NOT INITIAL.
          CALL METHOD <fs_config_subscreen>-alv->refresh_table_display.
        ENDIF.
      ENDLOOP.
    WHEN 'RETRY'.
      TRY.
          DATA(wl_cab) = fl_monitorexp_dpc_imp->trans_cab_getdetail( p_ntra ).

          IF wl_cab-estado = 9.
            MESSAGE 'El proceso está finalizado. La acción no se puede realizar.' TYPE 'I' DISPLAY LIKE 'E'.
          ELSE.

            fl_monitorexp_dpc_imp->procesar_transporte( p_ntra ).

          ENDIF.
        CATCH /iwbep/cx_mgw_busi_exception.
          MESSAGE 'Error al procesar el transporte. Revise log.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDTRY.
      LOOP AT tg_config_subscreen ASSIGNING <fs_config_subscreen> WHERE dynpro = gc_dynpro_main.
        " Recargar datos
        CLEAR <fs_config_subscreen>-tabla.
        PERFORM f_llenar_datos TABLES <fs_config_subscreen>-tabla USING <fs_config_subscreen>-subscreen.
        " Refrescar ALV
        IF <fs_config_subscreen>-alv IS NOT INITIAL.
          CALL METHOD <fs_config_subscreen>-alv->refresh_table_display.
        ENDIF.
      ENDLOOP.
  ENDCASE.

ENDFORM.
FORM f_handle_hotspot_click
      USING vp_dynpro e_row e_column wp_alv TYPE st_lin_alv_patron.

  CASE e_column.
    WHEN 'MBLNR'.
      IF wp_alv-mblnr IS NOT INITIAL.
        CALL FUNCTION 'MIGO_DIALOG'
          EXPORTING
            i_mblnr             = wp_alv-mblnr
            i_mjahr             = wp_alv-mjahr
          EXCEPTIONS
            illegal_combination = 1
            OTHERS              = 2.
        IF sy-subrc <> 0.

        ENDIF.
      ENDIF.


    WHEN 'VBELN'.
      IF wp_alv-vbeln IS NOT INITIAL.
        SET PARAMETER ID 'AUN' FIELD wp_alv-vbeln.
        CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN .
      ENDIF.
    WHEN 'VBELN_VL'.
      IF wp_alv-vbeln_vl IS NOT INITIAL.
        SET PARAMETER ID 'VL' FIELD wp_alv-vbeln_vl.
        CALL TRANSACTION 'VL03N' AND SKIP FIRST SCREEN .
      ENDIF.
    WHEN 'TKNUM'.
      IF wp_alv-tknum IS NOT INITIAL.
        SET PARAMETER ID 'TNR' FIELD wp_alv-tknum.
        CALL TRANSACTION 'VT03N' AND SKIP FIRST SCREEN .
      ENDIF.
    WHEN 'EBELN'.
      IF wp_alv-ebeln IS NOT INITIAL.
        SET PARAMETER ID 'BES' FIELD wp_alv-ebeln.
        CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN .
      ENDIF.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  f_handle_double_click
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM f_handle_double_click
        USING lp_dynpro e_row e_column ls_fila.
  "Desde pantalla de detalle
  DATA: ls_alv  LIKE LINE OF it_alv.

  READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = lp_dynpro.
  CHECK sy-subrc = 0.

  READ TABLE <fs_config_subscreen>-tabla INTO ls_alv INDEX e_row.
  IF sy-subrc = 0 AND ls_alv-estado = 2.
    SELECT *
      INTO TABLE @DATA(lt_errores)
      FROM ztsdle0004
      WHERE numtransporte = @ls_alv-numtransporte AND
            paso = @ls_alv-paso AND
            posicion = @ls_alv-posicion.

    IF lt_errores IS NOT INITIAL.
      DATA lt_catalogo TYPE slis_t_fieldcat_alv.

      CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
        EXPORTING
*         i_program_name   = sy-repid
*         i_internal_tabname = 'LT_ERRORES'
          i_structure_name = 'ZTSDLE0004'
*         I_CLIENT_NEVER_DISPLAY       = 'X'
*         I_INCLNAME       =
*         I_BYPASSING_BUFFER =
*         I_BUFFER_ACTIVE  =
        CHANGING
          ct_fieldcat      = lt_catalogo
*       EXCEPTIONS
*         INCONSISTENT_INTERFACE       = 1
*         PROGRAM_ERROR    = 2
*         OTHERS           = 3
        .
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      DELETE lt_catalogo WHERE fieldname = 'NUMTRANSPORTE'.
      DELETE lt_catalogo WHERE fieldname = 'PASO'.
      DELETE lt_catalogo WHERE fieldname = 'POSICION'.

      CALL FUNCTION 'REUSE_ALV_POPUP_TO_SELECT'
        EXPORTING
*         I_TITLE               =
*         I_SELECTION           = 'X'
*         I_ALLOW_NO_SELECTION  =
*         I_ZEBRA               = ' '
          i_screen_start_column = 2
          i_screen_start_line   = 2
          i_screen_end_column   = 180
          i_screen_end_line     = 30
*         I_CHECKBOX_FIELDNAME  =
*         I_LINEMARK_FIELDNAME  =
*         I_SCROLL_TO_SEL_LINE  = 'X'
          i_tabname             = 'LT_ERRORES'
*         I_STRUCTURE_NAME      =
          it_fieldcat           = lt_catalogo
*         IT_EXCLUDING          =
*         I_CALLBACK_PROGRAM    =
*         I_CALLBACK_USER_COMMAND       =
*         IS_PRIVATE            =
* IMPORTING
*         ES_SELFIELD           =
*         E_EXIT                =
        TABLES
          t_outtab              = lt_errores
* EXCEPTIONS
*         PROGRAM_ERROR         = 1
*         OTHERS                = 2
        .
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.


    ENDIF.

  ENDIF.

ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  f_handle_toolbar
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_OBJECT       text
**      -->P_INTERACTIVE  text
**----------------------------------------------------------------------*
FORM f_handle_toolbar USING vp_dynpro rp_object TYPE REF TO cl_alv_event_toolbar_set  p_interactive.
  DATA: wl_toolbar  TYPE stb_button,
        vl_function LIKE wl_toolbar-function.

  CASE vp_dynpro.
    WHEN gc_dynpro_zlog.
      DELETE rp_object->mt_toolbar WHERE function = '&LOCAL&INSERT_ROW'.
      DELETE rp_object->mt_toolbar WHERE function = 'BORRAR_FILA'.

      "Separador
      CLEAR wl_toolbar.
      wl_toolbar-butn_type = 3.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      CLEAR wl_toolbar.
      wl_toolbar-function   = cg_boton_imprimir.
      wl_toolbar-quickinfo = 'Imprimir'.
      wl_toolbar-text       = 'Imprimir'.
      wl_toolbar-disabled   = ' '.
      wl_toolbar-icon =  icon_print.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

    WHEN gc_dynpro_pos.
      DELETE rp_object->mt_toolbar WHERE function = '&LOCAL&INSERT_ROW'.
      DELETE rp_object->mt_toolbar WHERE function = 'BORRAR_FILA'.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.                    "f_handle_toolbar
*&---------------------------------------------------------------------*
*&      Form  f_handle_user_command
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->E_UCOMM    text
*----------------------------------------------------------------------*
FORM f_handle_user_command USING e_ucomm.
  DATA: lv_error      TYPE xfeld,
        lv_num_lineas TYPE i.
  DATA: tl_index_rows TYPE lvc_t_row,
        wl_index_rows LIKE LINE OF tl_index_rows.

  DATA wl_trans_pos TYPE zst_sdle_transp_pos.
  DATA(fl_monitorexp_dpc_imp) = NEW zsscl_sdle_monitorexp_dpc_imp( ).


  DATA: vl_texto  TYPE text60,
        vl_answer TYPE char1.

  DATA: lr_mtart_venta TYPE RANGE OF mara-mtart.

  CLEAR lr_mtart_venta.
  APPEND INITIAL LINE TO lr_mtart_venta ASSIGNING FIELD-SYMBOL(<fs_mtart_venta>).
  <fs_mtart_venta>-option = 'EQ'.
  <fs_mtart_venta>-sign = 'I'.
  <fs_mtart_venta>-low = 'ZPTO'.

  CASE e_ucomm.

    WHEN cg_boton_imprimir.
      READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = gc_dynpro_zlog.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas <> 1.
        MESSAGE 'Debe seleccionar una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv>) INDEX wl_index_rows-index.

      " NAC -> Clase de mensaje.
      " VL --> Entrega
      IF <fs_alv>-vbeln_vl IS NOT INITIAL.
**        SET PARAMETER ID 'VL' FIELD <fs_alv>-vbeln_vl.
**        SET PARAMETER ID 'NAC' FIELD 'ZLD5'.
**        CALL TRANSACTION 'VL71' AND SKIP FIRST SCREEN .

        " VL71
        SUBMIT sd70av2a
          WITH rg_kschl = 'ZLD5'
          WITH pm_nsort = '01'
          WITH pm_vermo = '2'
          WITH rg_vbeln = <fs_alv>-vbeln_vl
          AND RETURN.

*        REFRESH bdcdata.
*
*        PERFORM bdc_dynpro    USING 'SD70AV2A'        '1000'.
*        PERFORM bdc_field     USING 'BDC_CURSOR'      'RG_VBELN-LOW'.
*        PERFORM bdc_field     USING 'BDC_OKCODE'      '=ONLI'.
*        PERFORM bdc_field     USING 'RG_KSCHL-LOW'    'ZLD5'. "Clase de mensaje
*        PERFORM bdc_field     USING 'PM_NSORT'        '01'.
*        PERFORM bdc_field     USING 'PM_VERMO'        '2'.
*        PERFORM bdc_field     USING 'RG_VBELN-LOW'    <fs_alv>-vbeln_vl.  "numero de entrega
*
*
****        PERFORM bdc_dynpro    USING 'SAPMSSY0'        '0120'.
****        PERFORM bdc_field     USING 'BDC_OKCODE'      '=&ALL'.
****
****        PERFORM bdc_dynpro    USING 'SAPMSSY0'        '0120'.
****        PERFORM bdc_field     USING 'BDC_OKCODE'      '=PROC'.
****
****        PERFORM bdc_dynpro    USING 'SAPLSTXBC'       '0100'.
****        PERFORM bdc_field     USING 'BDC_OKCODE'      '=PRNT'.
*
*
*        mode = 'A'. " N
*
*        CLEAR messtab.
*        REFRESH messtab.
*        CALL TRANSACTION 'VL71' USING bdcdata MODE mode
*                               MESSAGES INTO messtab.

      ENDIF.
      IF <fs_alv>-tknum IS NOT INITIAL.
        "VT70 --> ZT02
        SUBMIT sd70av7a
          WITH rg_tknum = <fs_alv>-tknum
          WITH pm_tran = 'X'
          WITH rg_kscv7 = 'ZT02'
          WITH pm_verv7 = '2'
          AND RETURN.
      ENDIF.

  ENDCASE.

ENDFORM.
*&--------------------------------------------------------------------*
*&      Form  bdc_dynpro1
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      -->PROGRAM    text
*      -->DYNPRO     text
*---------------------------------------------------------------------*
FORM bdc_dynpro USING program dynpro.
  CLEAR bdcdata.
  bdcdata-program  = program.
  bdcdata-dynpro   = dynpro.
  bdcdata-dynbegin = 'X'.
  APPEND bdcdata.
ENDFORM.                    "bdc_dynpro1

*&--------------------------------------------------------------------*
*&      Form  bdc_field1
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
*      -->FNAM       text
*      -->FVAL       text
*---------------------------------------------------------------------*
FORM bdc_field USING fnam fval.
*  if fval <> space and
*     fval > 0   .
  CLEAR bdcdata.
  bdcdata-fnam = fnam.
  bdcdata-fval = fval.
  APPEND bdcdata.
*  endif.
ENDFORM.                    "bdc_field
