***********************************************************************
* TIPO : LISTADO
* TITULO : Chequeo mails albaranes a Peris
* DESCRIPCION : Chequeo mails albaranes a Peris
*
* AUTOR: Andrés Picazo                                FECHA: 09/01/2025
* ANALISTA: Andres Sanchez
*
***********************************************************************
REPORT zrsd0050.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: likp.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_alv FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check     TYPE xfeld,
             lights    TYPE zico_estado_mensaje,
             vbeln     TYPE likp-vbeln,
             lfart     TYPE likp-lfart,
             vstel     TYPE likp-vstel,
             lfdat     TYPE likp-lfdat,
             wadat_ist TYPE likp-wadat_ist,
             parvw     type parvw,
             kunnr     type kunag,
             lifnr     TYPE lifnr,
             name1     TYPE lfa1-name1,
             email     TYPE zemail,
             posnr     TYPE lips-posnr,
             matnr     TYPE lips-matnr,
             ebeln     TYPE ebeln,
             ebelp     TYPE ebelp,
             pedido    TYPE vbeln_va,
             message   TYPE bapi_msg,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv ##NEEDED.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA o_prog TYPE REF TO zcl_report.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_vbeln FOR likp-vbeln,
                s_lfdat FOR likp-lfdat,
                s_wadat FOR likp-wadat_ist,
                s_lifnr FOR likp-lifnr.
SELECTION-SCREEN SKIP.

SELECTION-SCREEN BEGIN OF BLOCK fi1 WITH FRAME TITLE text-fi1.
SELECT-OPTIONS: s_lfart1 FOR likp-lfart,
                s_vstel1 FOR likp-vstel DEFAULT 'P001'.
SELECTION-SCREEN END OF BLOCK fi1.

SELECTION-SCREEN BEGIN OF BLOCK fi2 WITH FRAME TITLE text-fi2.
SELECT-OPTIONS: s_lfart2 FOR likp-lfart DEFAULT 'ZLB',
                s_kunnr2  FOR likp-kunnr DEFAULT '0000103895'.
SELECTION-SCREEN END OF BLOCK fi2.

SELECTION-SCREEN END OF BLOCK b01.
SELECTION-SCREEN BEGIN OF BLOCK opc WITH FRAME TITLE text-opc.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK opc.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    " TODO: variable is assigned but only used in commented-out code (ABAP cleaner)
    DATA l_list TYPE o_prog->t_listado.

    l_list = list.
    CASE column.
*      WHEN 'BUKRS'.
*        MESSAGE l_list-bukrs TYPE 'I'.
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    check_ucomm_sel = 'F01'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'F01'.
        " TODO: variable is assigned but never used (ABAP cleaner)
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
* TO DO!
        ENDLOOP.
        IF sy-subrc = 0.
          refresh( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    DATA: i_emails TYPE  tty_adr6,
          i_det    TYPE zt_parametros,
          i_list   TYPE tt_listado.

    sgpi_texto( 'Seleccionando datos'(sda) ).
    SELECT * FROM likp
      INTO CORRESPONDING FIELDS OF TABLE i_list
     WHERE vbeln IN s_vbeln
       AND lfdat IN s_lfdat
       AND wadat_ist IN s_wadat
       AND ( ( lfart IN s_lfart1 AND vstel IN s_vstel1 )
          OR ( lfart IN s_lfart2 AND kunnr IN s_kunnr2 )
           ).

    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_list ASSIGNING FIELD-SYMBOL(<listado>).
      DATA(l_list) = <listado>.
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

      zhcl_backoffice=>get_asignacion_entrega( EXPORTING vbeln = <listado>-vbeln
                                               IMPORTING i_asig = DATA(i_asig)
                                                         message = DATA(l_msg) ).
      IF i_asig IS INITIAL.
        <listado>-message = l_msg.
        APPEND <listado> TO i_listado.
      ELSE.
        LOOP AT i_asig ASSIGNING FIELD-SYMBOL(<asig>).
          MOVE-CORRESPONDING <asig> TO <listado>.
          <listado>-pedido = <asig>-vbeln.
          <listado>-vbeln = l_list-vbeln.
          <listado>-name1 = get( tabla = 'LFA1' clave = <listado>-lifnr ).
          APPEND <listado> TO i_listado.
        ENDLOOP.
      ENDIF.
    ENDLOOP.
    SORT i_listado BY vbeln lifnr posnr.

    IF NOT s_lifnr[] IS INITIAL.
      DELETE i_listado WHERE NOT lifnr IN s_lifnr.
    ENDIF.

    LOOP AT i_listado ASSIGNING <listado>.
      set_status_list( EXPORTING message = <listado>-message criterio = 'V' CHANGING list = <listado> ).
    ENDLOOP.

  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

*    o_alv->add_button( button = 'F01' text = 'Ejecutar'(eje)  icon = icon_execute_object ucomm = 'EJEC' ).
*    o_alv->add_button( button = 'F01' text = 'Excel'  icon = icon_xls UCOMM = 'EXCEL' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page(
*    i_param = VALUE #( ( tipo = 'R' param = 'S_CREDAT' texto = 'F.Creación IDOC' tabla = '' campo = '' )
                          ).

    o_alv->set_field_hotspot( campo = 'VBELN,EBELN' auto = 'X' ).
    o_alv->set_field_hotspot( campo = 'PEDIDO' valor = 'VA03' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK' ).

    o_alv->set_orden( 'VBELN,LFART,VSTEL,LFDAT,WADAT_IST,EBELN,PEDIDO,KUNNR,PARVW,LIFNR,NAME1,EMAIL' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Log'(log) '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         o_dev              = o_prog ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  s_lfart1[] = VALUE #( option = 'EQ' sign = 'I' ( low = 'ZNL1' ) ( low = 'ZLCM' ) ( low = 'ZLF4' ) ( low = 'ZNL' ) ).
  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN OUTPUT.
  o_prog->handle = ''.
  IF o_prog->o_alv IS INITIAL OR o_prog->handle <> o_prog->aux1.
    o_prog->aux1 = o_prog->handle.
    IF NOT o_prog->o_alv IS INITIAL.
      o_prog->o_alv->free( ).
      CLEAR o_prog->o_alv.
    ENDIF.
    o_prog->o_alv = NEW #( status           = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         handle             = o_prog->handle
                         o_dev              = o_prog ).
    p_vari = o_prog->o_alv->get_default_layout( ).
  ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
