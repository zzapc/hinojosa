FORM KOBED_910.
*{   INSERT         HEDK924523                                        3

  DATA: f_det TYPE xflag.

*  LOOP AT xnast WHERE kschl EQ komt1-kschl AND
*                      objky EQ msg_objky   AND
*                      aktiv EQ SPACE       AND
*                      vstat EQ '0'.
*    EXIT.
*  ENDLOOP.

  CLEAR: f_det.

  PERFORM det_mens_zmai CHANGING f_det.
  IF f_det = 'X'.
    CLEAR sy-subrc.
  ELSE.
    sy-subrc = 4.
  ENDIF.


*}   INSERT
ENDFORM.
FORM KOBEV_910.
*{   INSERT         HEDK924523                                        3

  DATA: f_det TYPE xflag.

*  LOOP AT xnast WHERE kschl EQ t683s-kschl AND
*                      objky EQ msg_objky   AND
*                      aktiv EQ SPACE       AND
*                      vstat EQ '0'.
*    EXIT.
*  ENDLOOP.

  CLEAR f_det.

  PERFORM det_mens_zmai CHANGING f_det.
  IF f_det = 'X'.
    CLEAR sy-subrc.
  ELSE.
    sy-subrc = 4.
  ENDIF.


*}   INSERT
ENDFORM.
*{   INSERT         HEDK924523                                        3
FORM det_mens_zmai CHANGING p_flag.

**********************************************************************
* Parámetros locales
**********************************************************************

  FIELD-SYMBOLS: <pot>  TYPE ANY TABLE,
                 <ekko> TYPE ekko.

  DATA: lt_ekpo_bd  TYPE TABLE OF ekpo,
        ls_ekpo_bd  TYPE ekpo,
        ls_pot      TYPE bekpo.

**********************************************************************
* Validaciones
**********************************************************************



**********************************************************************
* Lógica
**********************************************************************

*** CHEQUEO cambios en MATERIAL, PETICIÓN BORRADO, CANTIDADES, IMPORTES y FECHAS, en otro caso, NO SALIDA

  "Asigno cabecera
  ASSIGN ('(SAPLMEPO)EKKO') TO <ekko>.

  "Chequeo si cabecera ha sido asignada
  IF ( <ekko> IS ASSIGNED ). "Cabecera asignada

    "Asigno posiciones
    ASSIGN ('(SAPLMEPO)POT[]') TO <pot>.

    "Obtengo datos de BBDD
    SELECT *
      FROM ekpo
      INTO CORRESPONDING FIELDS OF TABLE lt_ekpo_bd
     WHERE ebeln EQ <ekko>-ebeln.

    "Recorro lineas de pedido a chequear
    LOOP AT <pot> INTO ls_pot.

      CLEAR: p_flag.

      "Obtengo línea en cuestion.
      READ TABLE lt_ekpo_bd INTO ls_ekpo_bd WITH KEY ebeln = ls_pot-ebeln ebelp = ls_pot-ebelp.

      "Si línea no existe en BD, es una línea nueva y por tanto determinar mensaje
      IF ( sy-subrc NE 0 ).
        p_flag = abap_true.
        EXIT.
      ENDIF.

      "" CHEQUEO 1: MATNR

      IF ( ls_pot-matnr NE ls_ekpo_bd-matnr ).
        p_flag = abap_true.
        EXIT.
      ENDIF.

      "" CHEQUEO 2: LOEKZ

      IF ( ls_pot-loekz NE ls_ekpo_bd-loekz ).
        p_flag = abap_true.
        EXIT.
      ENDIF.

      "" CHEQUEO 3: MENGE

      IF ( ls_pot-menge NE ls_ekpo_bd-menge ).
        p_flag = abap_true.
        EXIT.
      ENDIF.

      "" CHEQUEO 4: IMPORTE BRUTO

      IF ( ls_pot-brtwr NE ls_ekpo_bd-brtwr ).
        p_flag = abap_true.
        EXIT.
      ENDIF.

      "" CHEQUEO 5: FECHA ENTREGA

      SELECT SINGLE eindt
        FROM eket
        INTO @DATA(lv_eindt)
       WHERE ebeln EQ @ls_pot-ebeln
         AND ebelp EQ @ls_pot-ebelp
         AND etenr EQ '1'.

      IF ( sy-subrc EQ 0 AND lv_eindt IS NOT INITIAL ).

        IF ( ls_pot-eindt NE lv_eindt ).
          p_flag = abap_true.
          EXIT.
        ENDIF.

      ENDIF.

    ENDLOOP.

  ELSE. "Cabecera no asignada

    CLEAR: p_flag.

  ENDIF.

*** EXIT UNASSIGN

  UNASSIGN: <pot>, <ekko>.

ENDFORM.
*}   INSERT
