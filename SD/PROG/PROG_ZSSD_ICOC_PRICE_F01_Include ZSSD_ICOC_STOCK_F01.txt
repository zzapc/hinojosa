*&---------------------------------------------------------------------*
*&  Include           ZSSD_ICOC_STOCK_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
FORM get_data .

  "BUKRS VKORG VTWEG SPART KUNNR WERKS LGORT MATNR LABST MEINS
  DATA: t_data_aux TYPE TABLE OF zprecios_salesforce_alv.

  " SMT - INI - 19.01.2023 11:35:17 - 19/01/2023
****** Dejamos solo la condición 929. Org.Ventas/Can.distr./Cliente/Material/Incoterms
*  " A927
**  SELECT * INTO TABLE @DATA(t_a927) FROM a927 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'.
*  SELECT * INTO CORRESPONDING FIELDS OF TABLE @t_data_aux FROM a927 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'
*    AND vkorg IN @s_vkorg AND vtweg IN @s_vtweg. " AND spart IN @s_spart.
*  " A928
**  SELECT * INTO TABLE @DATA(t_a928) FROM a928 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'.
*  SELECT * APPENDING CORRESPONDING FIELDS OF TABLE @t_data_aux FROM a928 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'
*    AND vkorg IN @s_vkorg AND vtweg IN @s_vtweg. " AND spart IN @s_spart.
  " A929
*  SELECT a~knumh, a~vkorg, a~vtweg, a~kunnr, a~matnr, a~datab, a~datbi, b~kbetr, b~konwa,b~kpein, b~kmein,b~loevm_ko INTO TABLE @DATA(t_a929) FROM a929 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND
*a~kschl = 'ZPRC'.
  SELECT a~knumh, a~vkorg, a~vtweg, a~kunnr, a~matnr, a~datab, a~datbi, b~kbetr, b~konwa,b~kpein, b~kmein,b~loevm_ko
    INTO CORRESPONDING FIELDS OF TABLE @t_data_aux FROM a929 AS a
    INNER JOIN konp AS b ON a~knumh = b~knumh
    WHERE a~kschl = 'ZPRC' " datbi >= @sy-datum AND datab <= @sy-datum AND
      AND vkorg IN @s_vkorg
      AND vtweg IN @s_vtweg
      AND a~kunnr IN @s_kunnr
      AND a~datab in @s_datab. " AND spart IN @s_spart.

    If p_hist is initial.
      DELETE t_data_aux where datbi >= sy-datum and datab <= sy-datum.
    ENDIF.

*  " A305
*  SELECT * INTO TABLE @DATA(t_a305) FROM a305 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'.
*  SELECT a~knumh, a~vkorg, a~vtweg, a~kunnr, a~matnr, a~datab, a~datbi, b~kbetr, b~konwa,b~kpein, b~kmein,b~loevm_ko
*    INTO CORRESPONDING FIELDS OF TABLE @t_data_aux
*    FROM a305 AS a
*    INNER JOIN konp AS b ON a~knumh = b~knumh
*    WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'
*    AND vkorg IN @s_vkorg AND vtweg IN @s_vtweg. " AND spart IN @s_spart.
*  " A941
**  SELECT * INTO TABLE @DATA(t_a941) FROM a941 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'.
*  SELECT * APPENDING CORRESPONDING FIELDS OF TABLE @t_data_aux FROM a941 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'
*    AND vkorg IN @s_vkorg AND vtweg IN @s_vtweg. " AND spart IN @s_spart.
*  " A982
**  SELECT * INTO TABLE @DATA(t_a982)  FROM a982 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'.
*  SELECT * APPENDING CORRESPONDING FIELDS OF TABLE @t_data_aux  FROM a982 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'
*    AND vkorg IN @s_vkorg AND vtweg IN @s_vtweg. "  AND spart IN @s_spart.
*  " A981
**  SELECT * INTO TABLE @DATA(t_a981) FROM a981 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'.
*  SELECT * APPENDING CORRESPONDING FIELDS OF TABLE @t_data_aux FROM a981 AS a INNER JOIN konp AS b ON a~knumh = b~knumh WHERE datbi >= @sy-datum AND datab <= @sy-datum AND a~kschl = 'ZPRC'
*    AND vkorg IN @s_vkorg AND vtweg IN @s_vtweg. " AND spart IN @s_spart.

**  CLEAR: t_data_aux.
**  t_data_aux = CORRESPONDING #( t_a927 ).
**  APPEND LINES OF t_data_aux TO gt_data_p.
*
**  CLEAR: t_data_aux.
**  t_data_aux = CORRESPONDING #( t_a928 ).
**  APPEND LINES OF t_data_aux TO gt_data_p.
*
**  CLEAR: t_data_aux.
**  t_data_aux = CORRESPONDING #( t_a929 ).
**  APPEND LINES OF t_data_aux TO gt_data_p.
**
**  CLEAR: t_data_aux.
**  t_data_aux = CORRESPONDING #( t_a305 ).
**  APPEND LINES OF t_data_aux TO gt_data_p.
**
**  CLEAR: t_data_aux.
**  t_data_aux = CORRESPONDING #( t_a941 ).
**  APPEND LINES OF t_data_aux TO gt_data_p.
**
**  CLEAR: t_data_aux.
**  t_data_aux = CORRESPONDING #( t_a982 ).
**  APPEND LINES OF t_data_aux TO gt_data_p.
**
**  CLEAR: t_data_aux.
**  t_data_aux = CORRESPONDING #( t_a981 ).
  APPEND LINES OF t_data_aux TO gt_data_p.

  SELECT * INTO TABLE @DATA(t_konm) FROM konm FOR ALL ENTRIES IN @gt_data_p WHERE knumh = @gt_data_p-knumh.

  gt_data_esc = CORRESPONDING #( t_konm ).


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PROCESS
*&---------------------------------------------------------------------*
FORM process .

  CONSTANTS: c_edi_extern   TYPE edi_rcvpor VALUE 'SALESFORCE', "ZHPP_01',
             c_rcvprn       TYPE edi_rcvprn VALUE 'SALESFORCE', "'ZHPPCLNT100',
             c_ls_d         TYPE edi_rcvprt VALUE 'LS',
             c_ls_r         TYPE edi_sndprt VALUE 'LS',
             c_zmsg         TYPE edi_mestyp VALUE 'ZPRECIOS_P01',
             c_zstpm_orders TYPE edi_idoctp VALUE 'ZPRECIOS_P01',
             c_precio       TYPE segname VALUE 'ZPRECIOS_SALESFORCE',
             c_precio_esc   TYPE segname VALUE 'ZPRECIOS_SALESFORCE_ESC'.

  DATA: ls_idoc_header       TYPE edidc,
        lt_idoc_comm_control TYPE TABLE OF edidc,
        ls_idoc_comm_control TYPE edidc,
        lt_return            TYPE bapiret2_t,
        ls_return            TYPE bapiret2,
        ls_return1           TYPE bapiret1,
        t_edidd              TYPE edidd_tt,
        t_edidd_aux          TYPE edidd_tt.

  DATA: l_edidd        TYPE edidd,
        seg_precio     TYPE zprecios_salesforce,
        seg_precio_esc TYPE zprecios_salesforce_esc,
        p_gt_data      TYPE TABLE OF zprecios_salesforce_alv,
        l_price        TYPE zprecios_salesforce,
        l_esc          TYPE zprecios_salesforce_esc.

  DATA lv_auxlevel TYPE edi_segnum.

  IF sy-batch IS NOT INITIAL.

    p_gt_data = gt_data_p.
  ELSE.

    PERFORM filas_seleccionadas USING alv
                              CHANGING p_gt_data.

  ENDIF.

  lv_auxlevel = 0.

  DATA: l_cont TYPE i.

  LOOP AT p_gt_data INTO DATA(l_data).

    REFRESH: t_edidd.

    CLEAR: l_edidd,lv_auxlevel.

    l_cont = l_cont + 1.

    l_edidd-segnam = c_precio.

    lv_auxlevel = lv_auxlevel + 1.

    seg_precio = CORRESPONDING #( l_data ).

    seg_precio-kbetr = seg_precio-kbetr.
    seg_precio-kunnr = seg_precio-kunnr.
    seg_precio-kbetr = condense( seg_precio-kbetr ).
    seg_precio-kpein = condense( seg_precio-kpein ).
    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
      EXPORTING
        input          = seg_precio-kmein
*       language       = SY-LANGU
      IMPORTING
*       long_text      =
        output         = seg_precio-kmein
*       short_text     =
      EXCEPTIONS
        unit_not_found = 1
        OTHERS         = 2.
    IF sy-subrc <> 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.


    DATA: l_campo  TYPE char12,
          l_campo2 TYPE char12.

    DATA(lt_data_esc) = gt_data_esc.

    DELETE lt_data_esc WHERE knumh <> l_data-knumh.

    LOOP AT lt_data_esc INTO DATA(l_data_esc). " where knumh = l_data-knumh.

      IF sy-tabix < 10.
        l_campo = 'KSTBM_0' && sy-tabix.
        l_campo2 = 'KBETR_ESC_0' && sy-tabix.
      ELSE.
        l_campo = 'KSTBM_' && sy-tabix.
        l_campo2 = 'KBETR_ESC_' && sy-tabix.
      ENDIF.


      ASSIGN COMPONENT l_campo OF STRUCTURE seg_precio TO FIELD-SYMBOL(<kstbm>).
      ASSIGN COMPONENT l_campo2 OF STRUCTURE seg_precio TO FIELD-SYMBOL(<kbetr>).
*      CLEAR: l_edidd.
*    lv_auxlevel = lv_auxlevel + 1.

      <kbetr> = l_data_esc-kbetr .
      <kbetr> = condense( <kbetr> ).

*    seg_precio-kmein_esc = condense( l_data_esc-kmein ).

*    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
*      EXPORTING
*        input          = seg_precio-kmein_esc
**       language       = SY-LANGU
*      IMPORTING
**       long_text      =
*        output         = seg_precio-kmein_esc
**       short_text     =
*      EXCEPTIONS
*        unit_not_found = 1
*        OTHERS         = 2.
*    IF sy-subrc <> 0.
**     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
**                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*    ENDIF.

*    seg_precio-kpein_esc = l_data_esc-kpein.
*    seg_precio-kpein_esc = condense( seg_precio-kpein_esc ).
*    seg_precio-skonwa = l_data_esc-skonwa.
      <kstbm> = trunc( l_data_esc-kstbm ).
      <kstbm> = condense( <kstbm> ).
*    seg_precio-konms = l_data_esc-konms.
*      l_edidd-segnam = c_precio_esc.
*
*      seg_precio_esc = CORRESPONDING #( l_data_esc ).
*
*      l_edidd-sdata = seg_precio_esc.
*      l_edidd-segnum = lv_auxlevel.
*      APPEND l_edidd TO t_edidd.

    ENDLOOP.


    l_edidd-sdata = seg_precio.
    l_edidd-segnum = lv_auxlevel.
    APPEND l_edidd TO t_edidd.

    ls_idoc_header-mandt  = sy-mandt.
    ls_idoc_header-direct = '1'.
    ls_idoc_header-rcvpor = c_edi_extern.
    ls_idoc_header-rcvprt = c_ls_d.
    ls_idoc_header-rcvprn = c_rcvprn.
    ls_idoc_header-sndprt = c_ls_r.
    ls_idoc_header-sndprn = sy-uname.
    ls_idoc_header-mestyp = c_zmsg.
    ls_idoc_header-idoctp = c_zstpm_orders.

    SORT t_edidd BY segnum ASCENDING.


    CALL FUNCTION 'MASTER_IDOC_DISTRIBUTE' "IN UPDATE TASK
      EXPORTING
        master_idoc_control            = ls_idoc_header
      TABLES
        communication_idoc_control     = lt_idoc_comm_control
        master_idoc_data               = t_edidd
      EXCEPTIONS
        error_in_idoc_control          = 1
        error_writing_idoc_status      = 2
        error_in_idoc_data             = 3
        sending_logical_system_unknown = 4
        OTHERS                         = 5.
    IF sy-subrc <> 0.
      "KO
      ls_return-type        = sy-msgty.
      ls_return-number      = sy-msgno.
      ls_return-id          = sy-msgid.
      ls_return-message_v1  = sy-msgv1.
      ls_return-message_v2  = sy-msgv2.
      ls_return-message_v3  = sy-msgv3.
      ls_return-message_v4  = sy-msgv4.
      APPEND ls_return TO lt_return.
    ELSE.
      "OK
      READ TABLE lt_idoc_comm_control INTO DATA(ls_control_record_out) INDEX 1.
      CHECK sy-subrc = 0.
      DATA(docnum) = ls_control_record_out-docnum.
      ls_return-type        = 'S'.
      ls_return-number      = '398'.
      ls_return-id          = '00'.
      ls_return-message_v1  = docnum.
      APPEND ls_return TO lt_return.


    ENDIF.

* Hacemos un COMMIT para el Idoc
*  CALL FUNCTION 'DEQUEUE_ALL'.
*  COMMIT WORK AND WAIT.
    CALL FUNCTION 'DB_COMMIT'.
    CALL FUNCTION 'DEQUEUE_ALL'.



  ENDLOOP.


  IF sy-batch IS INITIAL.
    MESSAGE s398(00) WITH l_cont 'IDOCs creados correctamente' space space.
  ENDIF.
*  COMMIT WORK.
  COMMIT WORK AND WAIT.




ENDFORM.

*&---------------------------------------------------------------------*
*& Form LOAD_DATA_INTO_GRID
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*      -->P_GT_OUTPUT  text
*      -->P_CONTAINER  text
*      -->P_       text
*      -->P_VARIANT  text
*      -->P_       text
*      <--P_ALV  text
*      <--P_LAYOUT  text
*      <--P_FIELDCAT  text
*      <--P_EXCLUDIN  text
*&---------------------------------------------------------------------*
FORM load_data_into_grid TABLES tabla       TYPE STANDARD TABLE
                         USING contenedor  TYPE REF TO cl_gui_custom_container
                               nombre_cont TYPE        scrfname
                               variant     LIKE        disvariant
                               estruc      LIKE        dd02l-tabname
                     CHANGING  alv         TYPE REF TO cl_gui_alv_grid
                               layout      TYPE        lvc_s_layo
                               it_fieldcat TYPE        lvc_t_fcat
                               excludin    TYPE        ui_functions.

  IF alv IS INITIAL.
    IF cl_gui_alv_grid=>offline( ) IS INITIAL.

      "CREATE OBJECT eventos.

      CREATE OBJECT contenedor
        EXPORTING
          container_name = nombre_cont
        EXCEPTIONS
          OTHERS         = 1.

      CREATE OBJECT alv
        EXPORTING
          i_parent = contenedor
        EXCEPTIONS
          OTHERS   = 1.

      CALL METHOD alv->register_edit_event
        EXPORTING
          i_event_id = cl_gui_alv_grid=>mc_evt_modified
        EXCEPTIONS
          error      = 1
          OTHERS     = 2.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

    ELSE.

*      CREATE OBJECT alv
*        EXPORTING
*          i_parent = or_doc.

    ENDIF.

    PERFORM preparefieldcatalog USING    estruc
                                CHANGING it_fieldcat.

    PERFORM preparelayout       CHANGING layout.
    PERFORM rellenar_toolbar    CHANGING excludin.


    CALL METHOD alv->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

    CALL METHOD alv->set_table_for_first_display
      EXPORTING
        is_variant           = variant
        i_save               = 'A'
        is_layout            = layout
        it_toolbar_excluding = excludin
      CHANGING
        it_outtab            = tabla[]
        it_fieldcatalog      = it_fieldcat
      EXCEPTIONS
        OTHERS               = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSE.

    CALL METHOD alv->refresh_table_display
      EXPORTING
        is_stable = gs_stable.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form PREPAREFIELDCATALOG
*&---------------------------------------------------------------------*
FORM preparefieldcatalog USING    estruc       LIKE dd02l-tabname
                         CHANGING it_fieldcat1 TYPE lvc_t_fcat.

  DATA: l_fieldcat TYPE LINE OF lvc_t_fcat.

  REFRESH it_fieldcat1.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active        = 'X'
      i_structure_name       = estruc
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_fieldcat1[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  LOOP AT it_fieldcat1 INTO l_fieldcat.
    CASE l_fieldcat-fieldname.
      WHEN 'BUKRS'.
        l_fieldcat-coltext = 'Sociedad'.

      WHEN OTHERS.
    ENDCASE.
    MODIFY it_fieldcat1 FROM l_fieldcat.
  ENDLOOP.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form PREPARELAYOUT
*&---------------------------------------------------------------------*
FORM preparelayout CHANGING cwa_layout TYPE lvc_s_layo.

  cwa_layout-zebra      = 'X'.
  cwa_layout-cwidth_opt = 'X'.
  cwa_layout-sel_mode   = 'A'.
*  cwa_layout-sel_mode = space.
*  cwa_layout-no_rowmark = abap_false.
ENDFORM.


*&---------------------------------------------------------------------*
*& Form RELLENAR_TOOLBAR
*&---------------------------------------------------------------------*
FORM rellenar_toolbar CHANGING excluirtool TYPE ui_functions.

  REFRESH: excluirtool.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form FILAS_SELECCIONADAS
*&---------------------------------------------------------------------*
FORM filas_seleccionadas USING alv TYPE REF TO cl_gui_alv_grid
                      CHANGING pt_output_sel.

  TYPES: tt_lines LIKE gt_data_p. "WITH EMPTY KEY.

  CALL METHOD alv->get_selected_rows
    IMPORTING
      et_index_rows = DATA(it_rows).

  IF it_rows IS NOT INITIAL.
    DATA(pt_output_aux) = VALUE tt_lines( FOR wa_indx IN it_rows ( gt_data_p[ wa_indx-index ] ) ).
  ENDIF.

  pt_output_sel = pt_output_aux.

ENDFORM.                    " filas_seleccionadas
