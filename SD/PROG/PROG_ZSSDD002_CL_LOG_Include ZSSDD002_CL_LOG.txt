*&---------------------------------------------------------------------*
*&  Include           ZSSDD002_CL_LOG
*&---------------------------------------------------------------------*

CLASS cl_log DEFINITION.
  PUBLIC SECTION.

    METHODS constructor.

    METHODS guardar_mensaje
      IMPORTING i_type       TYPE bapi_mtype
                i_id         TYPE symsgid
                i_number     TYPE symsgno
                i_message_v1 TYPE symsgv
                i_message_v2 TYPE symsgv
                i_message_v3 TYPE symsgv
                i_message_v4 TYPE symsgv.


    METHODS guardar_log
      IMPORTING objeto    TYPE balobj_d
                subobjeto TYPE balsubobj
                extnumber TYPE balnrext OPTIONAL
      EXPORTING
                lognumber TYPE balognr.

    METHODS mostrar_log
      IMPORTING lognumber TYPE balognr.


  PRIVATE SECTION.
    DATA: gt_mensajes TYPE STANDARD TABLE OF bapiret2 .

ENDCLASS.                    "cl_appl DEFINITION
*&---------------------------------------------------------------------*
*&       Class (Implementation)  cl_event
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS cl_log IMPLEMENTATION.
  METHOD constructor.
  ENDMETHOD.                    "CONSTRUCTOR

  METHOD guardar_mensaje.
    DATA l_return TYPE bapiret2.
    DATA msg_v1 TYPE symsgv.
    DATA msg_v2 TYPE symsgv.
    DATA msg_v3 TYPE symsgv.
    DATA msg_v4 TYPE symsgv.
    DATA l_type TYPE bapi_mtype.

    msg_v1 = i_message_v1.
    msg_v2 = i_message_v2.
    msg_v3 = i_message_v3.
    msg_v4 = i_message_v4.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = msg_v1
      IMPORTING
        output = msg_v1.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = msg_v2
      IMPORTING
        output = msg_v2.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = msg_v3
      IMPORTING
        output = msg_v3.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = msg_v4
      IMPORTING
        output = msg_v4.

    l_type = i_type.

    CALL FUNCTION 'FS_BAPI_BAPIRET2_FILL'
      EXPORTING
        type   = l_type
        cl     = i_id
        number = i_number
        par1   = msg_v1
        par2   = msg_v2
        par3   = msg_v3
        par4   = msg_v4
      IMPORTING
        return = l_return.

    APPEND l_return TO gt_mensajes.
  ENDMETHOD.                    "data_changed

  METHOD guardar_log.
    DATA: wa_mensajes TYPE bapiret2.
    DATA: clave       TYPE balnrext.
    DATA: linea       TYPE balnrext.
    DATA numlog TYPE bal_t_lgnm.

* Variables para la creacion del log
    DATA:
      l_log_handle TYPE balloghndl,
      l_s_log      TYPE bal_s_log,
      l_s_msg      TYPE bal_s_msg,
      l_msgno      TYPE symsgno,
      ta_loghandle TYPE bal_t_logh.

    l_s_log-object          = objeto.
    l_s_log-subobject       = subobjeto.
    l_s_log-aldate_del      = sy-datum + 100.
    l_s_log-del_before      = space.
    l_s_log-extnumber = extnumber.

    CALL FUNCTION 'BAL_LOG_CREATE'
      EXPORTING
        i_s_log      = l_s_log
      IMPORTING
        e_log_handle = l_log_handle
      EXCEPTIONS
        OTHERS       = 1.

    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    LOOP AT gt_mensajes INTO wa_mensajes.
      l_s_msg-msgty    = wa_mensajes-type.
      l_s_msg-msgid    = wa_mensajes-id.
      l_s_msg-msgno    = wa_mensajes-number.
      l_s_msg-msgv1    = wa_mensajes-message_v1.
      l_s_msg-msgv2    = wa_mensajes-message_v2.
      l_s_msg-msgv3    = wa_mensajes-message_v3.
      l_s_msg-msgv4    = wa_mensajes-message_v4.

* Añadimos la incidencia al log
      CALL FUNCTION 'BAL_LOG_MSG_ADD'
        EXPORTING
          i_log_handle = l_log_handle
          i_s_msg      = l_s_msg
        EXCEPTIONS
          OTHERS       = 1.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDLOOP.

    REFRESH ta_loghandle.
    APPEND l_log_handle TO ta_loghandle.

    CALL FUNCTION 'BAL_DB_SAVE'
      EXPORTING
        i_client         = sy-mandt
        i_in_update_task = ''
        i_save_all       = 'X'
        i_t_log_handle   = ta_loghandle
      IMPORTING
        e_new_lognumbers = numlog
      EXCEPTIONS
        log_not_found    = 1
        save_not_allowed = 2
        numbering_error  = 3
        OTHERS           = 4.
    IF sy-subrc = 0.
      IF NOT numlog IS INITIAL.
        lognumber = numlog[ 1 ]-lognumber.
      ENDIF.
    ENDIF.


* Refrescamos el log de incidencias
    CALL FUNCTION 'BAL_LOG_REFRESH'
      EXPORTING
        i_log_handle  = l_log_handle
      EXCEPTIONS
        log_not_found = 1
        OTHERS        = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    CLEAR gt_mensajes.
  ENDMETHOD.                    "handle_hotspot_click


  METHOD mostrar_log.

    TYPES:
      BEGIN OF szal_lognumber,
        item LIKE lognumber,
      END OF szal_lognumber.

    DATA lt_balm TYPE TABLE OF balm.
    DATA l_balm TYPE balm.

    DATA szal_lognumbers TYPE STANDARD TABLE OF szal_lognumber .
    DATA lognum TYPE szal_lognumber.

    DATA lt_return TYPE TABLE OF bapiret2.
    DATA l_return TYPE bapiret2.

    lognum-item = lognumber.
    APPEND lognum TO szal_lognumbers.

    CALL FUNCTION 'APPL_LOG_READ_DB_WITH_LOGNO'
      TABLES
        lognumbers = szal_lognumbers
        messages   = lt_balm.

    LOOP AT lt_balm INTO l_balm.

*cargamos la tabla BAPIRET2
      l_return-type   = l_balm-msgty.
      l_return-id     = l_balm-msgid.
      l_return-number = l_balm-msgno.
      MESSAGE ID l_balm-msgid TYPE l_balm-msgty NUMBER l_balm-msgno
             WITH l_balm-msgv1 l_balm-msgv2
                  l_balm-msgv3 l_balm-msgv4
             INTO l_return-message.
      CONDENSE l_return-message.

      l_return-message_v1 = l_balm-msgv1.
      l_return-message_v2 = l_balm-msgv2.
      l_return-message_v3 = l_balm-msgv3.
      l_return-message_v4 = l_balm-msgv4.
      l_return-system     = sy-sysid.

      APPEND l_return TO lt_return.
    ENDLOOP.

    DATA: wa_mensajes TYPE bapiret2.

* En modo BatchInput no debe saltar la ventana
    CHECK sy-binpt EQ space.

* Variables para la creacion del log de incidencias
    DATA:
      l_log_handle TYPE balloghndl,
      mylog_handle TYPE bal_t_logh,
      l_s_log      TYPE bal_s_log,
      l_s_msg      TYPE bal_s_msg,
      l_msgno      TYPE symsgno.

* Creamos el log de incidencias
    l_s_log-extnumber  = 'Application Log Demo'(001).
    CALL FUNCTION 'BAL_LOG_CREATE'
      EXPORTING
        i_s_log      = l_s_log
      IMPORTING
        e_log_handle = l_log_handle
      EXCEPTIONS
        OTHERS       = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    LOOP AT lt_return INTO wa_mensajes.
      l_s_msg-msgid = wa_mensajes-id.
      l_s_msg-msgno = wa_mensajes-number.
      l_s_msg-msgty = wa_mensajes-type.
      l_s_msg-msgv1 = wa_mensajes-message_v1.
      l_s_msg-msgv2 = wa_mensajes-message_v2.
      l_s_msg-msgv3 = wa_mensajes-message_v3.
      l_s_msg-msgv4 = wa_mensajes-message_v4.
      l_s_msg-probclass = '3'.

* Añadimos la incidencia al log
      CALL FUNCTION 'BAL_LOG_MSG_ADD'
        EXPORTING
          i_log_handle = l_log_handle
          i_s_msg      = l_s_msg
        EXCEPTIONS
          OTHERS       = 1.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDLOOP.

* Creamos el popup con el log de incidencias
    DATA l_s_display_profile TYPE bal_s_prof.

    CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
      IMPORTING
        e_s_display_profile = l_s_display_profile
      EXCEPTIONS
        OTHERS              = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    l_s_display_profile-use_grid = 'X'.
    l_s_display_profile-disvariant-report = sy-repid.

* Mostramos el log de incidencias
    APPEND l_log_handle TO mylog_handle.
    CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
      EXPORTING
        i_s_display_profile = l_s_display_profile
        i_t_log_handle      = mylog_handle
      EXCEPTIONS
        OTHERS              = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

* Refrescamos el log de incidencias
    CALL FUNCTION 'BAL_LOG_REFRESH'
      EXPORTING
        i_log_handle  = l_log_handle
      EXCEPTIONS
        log_not_found = 1
        OTHERS        = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.

ENDCLASS.               "cl_event

DATA: gr_log        TYPE REF TO cl_log.
