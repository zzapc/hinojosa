*&---------------------------------------------------------------------*
*&  Include           ZRSD0018_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos .
  DATA: t_vbak  TYPE STANDARD TABLE OF vbak,
        wa_vbak TYPE                   vbak,
        wa_vbpa TYPE                   vbpa,
        t_ped   TYPE STANDARD TABLE OF vbak.

  TYPES: BEGIN OF tipo_pos,
           vbeln  TYPE vbeln,
           posnr  TYPE posnr,
           matnr  TYPE matnr,
           arktx  TYPE arktx,
           kdmat  TYPE kdmat,
           werks  TYPE werks_d,
           lgort  TYPE lgort_d,
           kondm  TYPE kondm,
           kwmeng TYPE kwmeng,
           edatu  TYPE edatu,
           bmeng  TYPE bmeng,
           brgew  TYPE  brgew_ap,
           gewei  TYPE  gewei,
           netwr  TYPE netwr,
           waerk  TYPE waerk,
           gbsta  TYPE gbsta,
           lfsta  TYPE lfsta,
           spstg  TYPE vbuk-spstg, "cgijon - 05.09.19 - sat 7000026842 (Ticket 56273)
           volum  TYPE volum_ap,
           voleh  TYPE voleh. " cvivo -
  TYPES: END OF tipo_pos.
  TYPES: tty_pos TYPE TABLE OF tipo_pos.
  DATA: t_pos  TYPE         tty_pos,
        wa_pos TYPE LINE OF tty_pos.

  DATA: t_lips   TYPE STANDARD TABLE OF lips,
        wa_lips  TYPE                   lips,
        wa_vbuk  TYPE                   vbuk,
        wa_vbup  TYPE                   vbup,
        t_vbrp   TYPE STANDARD TABLE OF vbrp,
        wa_vbrp  TYPE                   vbrp,
        lv_pikmg TYPE                   pikmg,
        lv_lfimg TYPE                   lfimg.

  DATA: lv_fkimg TYPE fkimg,
        lv_shkzg TYPE shkzg.


* ini cvivo - 16.04.2019 54482
  IF so_real[] IS NOT INITIAL. " si hay fecha de entrega real, es más restrictivo
    SELECT * FROM likp
      WHERE wadat_ist IN @so_real
        AND vkorg IN @so_vkorg
      INTO TABLE @DATA(t_likp).

    CHECK sy-subrc EQ 0.

    SELECT * FROM lips
      INTO TABLE t_lips
      FOR ALL ENTRIES IN t_likp
      WHERE vbeln EQ t_likp-vbeln.

    CHECK sy-subrc EQ 0.

    SELECT * FROM vbak
      INTO TABLE t_vbak
      FOR ALL ENTRIES IN t_lips
      WHERE vbeln EQ t_lips-vgbel AND
            vkorg IN so_vkorg AND
            vkgrp IN so_vkgrp AND
            vtweg IN so_vtweg AND
            spart IN so_spart AND
            vbeln IN so_vbeln AND
            kunnr IN so_kunnr AND
            erdat IN so_erdat AND
            audat IN so_audat AND
            vbtyp = 'C'.
  ELSE.
* obtenemos los pedidos que cumplen con los datos de la
* pantalla de selección.
    SELECT * FROM vbak
      INTO TABLE t_vbak
      WHERE vkorg IN so_vkorg AND
            vkgrp IN so_vkgrp AND
            vtweg IN so_vtweg AND
            spart IN so_spart AND
            vbeln IN so_vbeln AND
            kunnr IN so_kunnr AND
            erdat IN so_erdat AND
            audat IN so_audat AND
            vbtyp = 'C'.
  ENDIF.
* fin cvivo - 16.04.2019 54482

* realizaremos el filtrado por el destinatario de mercancía
  IF so_dest[] IS NOT INITIAL.

    LOOP AT t_vbak INTO wa_vbak.
      SELECT SINGLE * FROM vbpa
        INTO wa_vbpa
        WHERE vbeln = wa_vbak-vbeln AND
              parvw = 'WE' AND
              kunnr IN so_dest.

      IF sy-subrc = 0.
        APPEND wa_vbak TO t_ped.
      ENDIF.
    ENDLOOP.
  ELSE.
    t_ped[] = t_vbak[].
  ENDIF.

  CHECK t_ped[] IS NOT INITIAL.

* realizamos el filtrado de los pedidos en función de los parametros
* de selección correspondientes a las posiciones
  SELECT vbap~vbeln vbap~posnr matnr arktx kdmat werks lgort kondm kwmeng edatu bmeng brgew gewei netwr waerk gbsta lfsta
    spstg "cgijon - 05.09.19 - sat 7000026842 (Ticket 56273)
    vbap~volum vbap~voleh " cvivo - 64020-Añadir campo VOLUM
    FROM vbap
    INNER JOIN vbep ON vbep~vbeln = vbap~vbeln AND
                       vbep~posnr = vbap~posnr
    INNER JOIN vbup ON vbup~vbeln = vbap~vbeln AND
                       vbup~posnr = vbap~posnr
    INNER JOIN vbuk ON vbuk~vbeln = vbap~vbeln
    INTO TABLE t_pos
    FOR ALL ENTRIES IN t_ped
    WHERE vbap~vbeln = t_ped-vbeln AND
          matnr IN so_matnr AND
          werks IN so_werks AND
          lgort IN so_lgort AND
          edatu IN so_edatu AND
          gbsta IN so_gbsta.

  CHECK t_pos[] IS NOT INITIAL.

  " cvivo - 02/07/20 - Sólo 1 línea por posición
  SORT t_pos[] BY vbeln posnr bmeng DESCENDING.
  DELETE ADJACENT DUPLICATES FROM t_pos[] COMPARING vbeln posnr.

* Obtenemos la información de PP a partir de los pedidos y
* volcamos la info seleccionada en la estructura de salida del alv
  CLEAR: lv_fkimg.
  LOOP AT t_pos INTO wa_pos.
    MOVE-CORRESPONDING wa_pos TO wa_datos.

    READ TABLE t_ped INTO wa_vbak WITH KEY vbeln = wa_pos-vbeln.
    MOVE-CORRESPONDING wa_vbak TO wa_datos.

    wa_datos-netwr = wa_pos-netwr.
    wa_datos-waerk = wa_pos-waerk.

* nombre cliente
    SELECT SINGLE name1 FROM kna1
      INTO wa_datos-name1
      WHERE kunnr EQ wa_datos-kunnr.

* destinatario mercancias
    SELECT SINGLE kunnr FROM vbpa
      INTO wa_datos-kunnr_merc
      WHERE parvw = 'WE'
       AND vbeln = wa_datos-vbeln.
* nombre destinatario mercancia
*    SELECT SINGLE name1 FROM kna1
*      INTO wa_datos-name1_merc
*      WHERE kunnr = wa_datos-kunnr_merc.

* DBM >>> 10.11.2017 Población, CP, Provincia, Pais del destinatario
    SELECT SINGLE name1 ort01 pstlz regio land1 FROM kna1
    INTO (wa_datos-name1_merc, wa_datos-ort01_merc, wa_datos-pstlz_merc,
          wa_datos-regio_merc, wa_datos-land1_merc)
    WHERE kunnr = wa_datos-kunnr_merc.
* DBM <<< 10.11.2017 Población, CP, Provincia, Pais del destinatario

*unidades de venta
    SELECT SINGLE * FROM vbap
      INTO @DATA(wa_vbap)
      WHERE vbeln = @wa_datos-vbeln AND
            posnr = @wa_datos-posnr.

    wa_datos-vrkme = wa_vbap-vrkme.


*   INI CGIJON - 26.02.19 - SAT 7000024683 TICKET 053546
    SELECT SINGLE zterm FROM vbkd
      INTO wa_datos-zterm
      WHERE vbeln = wa_datos-vbeln.
*   FIN CGIJON - 26.02.19 - SAT 7000024683 TICKET 053546


*   orden de extrusión
    SELECT SINGLE gltrp aufnr FROM caufv
      INTO ( wa_datos-fin_extrusion, wa_datos-aufnr_extrusion )
      WHERE auart = 'ZC01' AND
            werks = wa_pos-werks AND
            zzebeln4 = wa_pos-vbeln AND
            zzebelp4 = wa_pos-posnr AND
            gltrp = ( SELECT MAX( gltrp ) FROM caufv WHERE  auart = 'ZC01' AND
                                                            werks = wa_pos-werks AND
                                                            zzebeln4 = wa_pos-vbeln AND
                                                            zzebelp4 = wa_pos-posnr ).

    IF wa_datos-aufnr_extrusion IS NOT INITIAL.
      PERFORM get_info_orden_ext USING wa_datos-aufnr_extrusion
                                 CHANGING wa_datos.

    ENDIF.

*   Orden Manipulado
    SELECT SINGLE aufnr gltrp FROM caufv
      INTO ( wa_datos-aufnr_manipulado, wa_datos-fin_manipulado )
      WHERE auart = 'ZC02' AND
            werks = wa_pos-werks AND
            zzebeln4 = wa_pos-vbeln AND
            zzebelp4 = wa_pos-posnr AND
            gltrp = ( SELECT MAX( gltrp ) FROM caufv WHERE  auart = 'ZC02' AND
                                                            werks = wa_pos-werks AND
                                                            zzebeln4 = wa_pos-vbeln AND
                                                            zzebelp4 = wa_pos-posnr ).

    IF wa_datos-aufnr_manipulado IS NOT INITIAL.
      PERFORM get_info_orden_mani USING wa_datos-aufnr_manipulado
                                  CHANGING wa_datos.
    ENDIF.

* Cajas Expedidas:
* Cantidad de picking de la entrega de salida asociada a la posición del pedido de venta.
    SELECT * FROM lips
      INTO TABLE t_lips
      WHERE vgbel = wa_datos-vbeln AND
            vgpos = wa_datos-posnr.

    CLEAR: wa_lips, wa_datos-cj_expedidas.

    LOOP AT t_lips INTO wa_lips.
      CLEAR: lv_lfimg.

      lv_lfimg = wa_lips-lfimg.
      SELECT SINGLE * FROM vbup
        INTO wa_vbup
        WHERE vbeln =  wa_lips-vbeln
        AND   wbsta = 'C'.

      IF sy-subrc = 0.
        wa_datos-cj_expedidas = wa_datos-cj_expedidas + lv_lfimg.
      ENDIF.
    ENDLOOP.

* Fecha entrega real
* ini cvivo - 16.04.2019 54482
    READ TABLE t_lips INTO wa_lips INDEX 1.

    SELECT SINGLE * FROM likp
      WHERE vbeln EQ @wa_lips-vbeln
      INTO @DATA(wa_likp).

    CHECK wa_likp-wadat_ist IN so_real.

    wa_datos-curdlvdat = wa_likp-wadat_ist.

    wa_datos-cant_pedido_un     = wa_vbap-kwmeng.
    IF wa_datos-vrkme <> 'ST'.
      MULTIPLY wa_datos-cant_pedido_un BY wa_lips-umvkz.
    ENDIF.


* fin cvivo - 16.04.2019 54482

* Cajas Facturadas
*    SELECT SUM( fkimg ) FROM vbrp
*      INTO  wa_datos-cj_facturadas
*      WHERE aubel = wa_datos-vbeln AND
*            aupos = wa_datos-posnr.
    SELECT * FROM vbrp
          INTO TABLE t_vbrp
          WHERE aubel = wa_datos-vbeln AND
                aupos = wa_datos-posnr.

    CLEAR: wa_vbrp.
    LOOP AT t_vbrp INTO wa_vbrp.

      CLEAR: lv_fkimg.

      lv_fkimg = wa_vbrp-fkimg.

      IF wa_vbrp-shkzg = 'X'.
        lv_fkimg = wa_vbrp-fkimg * ( -1 ).
      ENDIF.

      wa_datos-cj_facturadas = wa_datos-cj_facturadas + lv_fkimg.

    ENDLOOP.

*   Material Devuelto
    SELECT SUM( rfmng ) FROM vbfa
      INTO wa_datos-mat_devuelto
      WHERE vbelv = wa_datos-vbeln AND
            posnv = wa_datos-posnr AND
            vbtyp_n = 'H'.

    CASE wa_datos-lfsta.
      WHEN 'B'. " expedido parcialmente
        wa_datos-line_color = 'C500'.
      WHEN 'C'. " expedido completamente
        wa_datos-line_color = 'C510'.
      WHEN OTHERS. " no expedido
        IF wa_datos-plancha_fab GT 0 OR wa_datos-cj_manipuladas GT 0. " fabricación comenzada
          wa_datos-line_color = 'C300'.
        ENDIF.
    ENDCASE.

* Fecha de entrega prevista
* ini cvivo - 16.04.2019 54482
    IF wa_datos-aufnr_manipulado IS NOT INITIAL.
      wa_datos-vlc_pdatum = wa_datos-fin_manipulado.
    ELSEIF wa_datos-aufnr_extrusion IS NOT INITIAL.
      wa_datos-vlc_pdatum = wa_datos-fin_extrusion + 1.
    ENDIF.

* fin cvivo - 16.04.2019 54482

    "   ini cgijon - 05.09.19 - sat 7000026842 (Ticket 56273)
    IF wa_pos-spstg = 'C'.
      wa_datos-semaforo = '@0A@'.	"Rojo
    ELSE.
      wa_datos-semaforo = '@08@'.	"Verde
    ENDIF.
    "   fin cgijon - 05.09.19 - sat 7000026842 (Ticket 56273)


*   INI CGV - 14.04.20 - SAT 7000031197 Ticket 60405 - PRECIO UNITARIO
    IF wa_vbap-kwmeng IS NOT INITIAL.
      wa_datos-precio_unit = wa_vbap-netwr / wa_vbap-kwmeng.

    ENDIF.

    IF wa_vbap-ntgew IS NOT INITIAL.
      wa_datos-precio_euro_kg = wa_vbap-netwr / wa_vbap-ntgew.
    ENDIF.


    wa_datos-vkgrp = wa_vbak-vkgrp.

    SELECT SINGLE bezei FROM tvgrt
      INTO wa_datos-bezei
      WHERE spras = sy-langu AND
            vkgrp = wa_vbak-vkgrp.
*   FIN CGV - 14.04.20 - SAT 7000031197 Ticket 60405 - PRECIO UNITARIO

    " cvivo - 60593 - 30.04.20
    SELECT SINGLE * FROM mbew
      WHERE matnr EQ @wa_datos-matnr
       AND bwkey EQ @wa_datos-werks
      INTO @DATA(ls_mbew).

    CASE ls_mbew-vprsv.
      WHEN 'V'.
        wa_datos-wavwr = ( ls_mbew-verpr / ls_mbew-peinh ) * wa_datos-kwmeng.
      WHEN 'S'.
        wa_datos-wavwr = ( ls_mbew-stprs / ls_mbew-peinh ) * wa_datos-kwmeng.
    ENDCASE.

    wa_datos-wavwr_uni = wa_datos-wavwr / wa_datos-kwmeng. " cvivo
    wa_datos-wavwr_fact = wa_datos-wavwr_uni * wa_datos-cj_facturadas. " cvivo

    TRY.
        DATA ls_margen TYPE p DECIMALS 2.

        ls_margen = 100 * ( wa_datos-precio_unit - wa_datos-wavwr_uni ) / wa_datos-precio_unit.
      CATCH cx_sy_zerodivide.
    ENDTRY.

    DATA text TYPE char6.
    WRITE ls_margen TO text DECIMALS 2.

    wa_datos-margen = |{ text } %|.

    " ins - cvivo - 61068
    IF wa_datos-aufnr_extrusion IS NOT INITIAL.
      SELECT SINGLE mkal~verid mkal~text1 FROM mkal
      INNER JOIN afpo
      ON afpo~verid EQ mkal~verid
      AND afpo~matnr EQ mkal~matnr
      INTO (wa_datos-verid, wa_datos-text1 )
      WHERE afpo~aufnr EQ wa_datos-aufnr_extrusion.
    ENDIF.

    " ins - cvivo - 64021
    SELECT SINGLE * FROM zmarcpalet
      INTO @DATA(palet)
      WHERE matnr EQ @wa_datos-matnr
        AND werks EQ @wa_datos-werks
        AND kunnr EQ @wa_datos-kunnr.

    IF sy-subrc EQ 0.
      IF wa_datos-voleh NE 'DM3'.
        DATA(menge) = CONV bstmg( wa_datos-volum ).

        CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
          EXPORTING
            i_matnr              = wa_datos-matnr
            i_in_me              = wa_datos-voleh
            i_out_me             = 'CDM' " DM3
            i_menge              = menge
          IMPORTING
            e_menge              = menge
          EXCEPTIONS
            error_in_application = 1
            error                = 2
            OTHERS               = 3.

        wa_datos-volum = CONV #( menge ).
      ENDIF.
    ENDIF.

    DATA(largo) = COND #( WHEN palet-zzlgrealpal GT 0 THEN palet-zzlgrealpal ELSE palet-zzpalletlar ).
    DATA(ancho) = COND #( WHEN palet-zzanrealpal GT 0 THEN palet-zzanrealpal ELSE palet-zzpalletanc ).

    wa_datos-volumpl = ( largo * ancho * palet-zzalrealpal ) / 1000000.
    wa_datos-voleh = 'CDM'.

    APPEND wa_datos TO gt_datos.
    CLEAR: wa_datos.
  ENDLOOP.

  DELETE ADJACENT DUPLICATES FROM gt_datos COMPARING vbeln posnr.
ENDFORM.                    " OBTENER_DATOS
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_datos .
  DATA: ls_lvc_s_layo TYPE lvc_s_layo,
        ls_variant    TYPE disvariant.

* Variante
  PERFORM alv_prepare_variant CHANGING ls_variant.

* Preparamos el catálogo de campos
  PERFORM alv_prepare_fielcat.

* Preparamos el layout
  PERFORM alv_prepare_layout CHANGING ls_lvc_s_layo.

* Mostramos el ALV
  CALL METHOD gcl_grid->set_table_for_first_display
    EXPORTING
      i_buffer_active    = ' '
      i_bypassing_buffer = 'X'
      is_layout          = ls_lvc_s_layo
      i_structure_name   = 'ZSRSD0018'
      is_variant         = ls_variant
      i_save             = 'A'
    CHANGING
      it_outtab          = gt_datos[]
      it_fieldcatalog    = gt_fieldcat.
ENDFORM.                    " MOSTRAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  ALV_PREPARE_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_VARIANT  text
*----------------------------------------------------------------------*
FORM alv_prepare_variant  CHANGING ps_variant TYPE disvariant .

  IF gs_variant IS NOT INITIAL.
    ps_variant = gs_variant.
  ELSE.
    CLEAR ps_variant.
    ps_variant-report = sy-repid.
  ENDIF.

ENDFORM.                    " ALV_PREPARE_VARIANT
*&---------------------------------------------------------------------*
*&      Form  ALV_PREPARE_FIELCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_prepare_fielcat .
  DATA: ls_fcat TYPE lvc_s_fcat.
  DATA: lv_tabix TYPE sytabix.


  REFRESH: gt_fieldcat_ant, gt_fieldcat.


* Recuperamos el catálogo de campos
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZSRSD0018'
    CHANGING
      ct_fieldcat      = gt_fieldcat.



** Recorremos el catálogo de campos modificandolo
  LOOP AT gt_fieldcat INTO ls_fcat.
    lv_tabix = sy-tabix.
    CASE ls_fcat-fieldname.
      WHEN 'MARGEN'.
        ls_fcat-seltext   = text-029.
        ls_fcat-scrtext_l = text-029.
        ls_fcat-scrtext_m = text-029.
        ls_fcat-scrtext_s = text-029.
        ls_fcat-reptext   = text-029.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

      WHEN 'MEINS_MARGEN'.
        ls_fcat-no_out = abap_true.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

      WHEN 'WAVWR'.
        ls_fcat-seltext   = text-023.
        ls_fcat-scrtext_l = text-023.
        ls_fcat-scrtext_m = text-023.
        ls_fcat-scrtext_s = text-024.
        ls_fcat-reptext   = text-023.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

      WHEN 'WAVWR_UNI'.
        ls_fcat-seltext   = text-026.
        ls_fcat-scrtext_l = text-026.
        ls_fcat-scrtext_m = text-026.
        ls_fcat-scrtext_s = text-025.
        ls_fcat-reptext   = text-026.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

      WHEN 'WAVWR_FACT'.
        ls_fcat-seltext   = text-028.
        ls_fcat-scrtext_l = text-028.
        ls_fcat-scrtext_m = text-028.
        ls_fcat-scrtext_s = text-027.
        ls_fcat-reptext   = text-028.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.


      WHEN 'SEMAFORO'.
        ls_fcat-seltext   = text-020.
        ls_fcat-scrtext_l = text-020.
        ls_fcat-scrtext_m = text-020.
        ls_fcat-scrtext_s = text-020.
        ls_fcat-reptext   = text-020.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

      WHEN 'VBELN'.
        ls_fcat-hotspot = 'X'.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

      WHEN 'NAME1'.
        ls_fcat-seltext   = text-017.
        ls_fcat-scrtext_l = text-017.
        ls_fcat-scrtext_m = text-017.
        ls_fcat-scrtext_s = text-017.
        ls_fcat-reptext   = text-017.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

      WHEN 'KUNNR_MERC'.
        ls_fcat-seltext   = text-016.
        ls_fcat-scrtext_l = text-016.
        ls_fcat-scrtext_m = text-016.
        ls_fcat-scrtext_s = text-016.
        ls_fcat-reptext   = text-016.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

      WHEN 'NAME1_MERC'.
        ls_fcat-seltext   = text-018.
        ls_fcat-scrtext_l = text-018.
        ls_fcat-scrtext_m = text-018.
        ls_fcat-scrtext_s = text-018.
        ls_fcat-reptext   = text-018.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

* unidad medida
      WHEN 'VRKME'.
        ls_fcat-seltext   = text-019.
        ls_fcat-scrtext_l = text-019.
        ls_fcat-scrtext_m = text-019.
        ls_fcat-scrtext_s = text-019.
        ls_fcat-reptext   = text-019.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Orden de extrusión
      WHEN 'AUFNR_EXTRUSION'.
        ls_fcat-seltext   = text-t01.
        ls_fcat-scrtext_l = text-t01.
        ls_fcat-scrtext_m = text-t01.
        ls_fcat-scrtext_s = text-t01.
        ls_fcat-reptext   = text-t01.
        ls_fcat-hotspot = 'X'.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Fin de extrusión
      WHEN 'FIN_EXTRUSION'.
        ls_fcat-seltext   = text-t10.
        ls_fcat-scrtext_l = text-t10.
        ls_fcat-scrtext_m = text-t10.
        ls_fcat-scrtext_s = text-t10.
        ls_fcat-reptext   = text-t10.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Fin de manipulado
      WHEN 'FIN_MANIPULADO'.
        ls_fcat-seltext   = text-t11.
        ls_fcat-scrtext_l = text-t11.
        ls_fcat-scrtext_m = text-t11.
        ls_fcat-scrtext_s = text-t11.
        ls_fcat-reptext   = text-t11.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Generación OT
      WHEN 'GENERACION_OT'.
        ls_fcat-seltext   = text-t02.
        ls_fcat-scrtext_l = text-t02.
        ls_fcat-scrtext_m = text-t02.
        ls_fcat-scrtext_s = text-t02.
        ls_fcat-reptext   = text-t02.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Cajas programadas/Planificación plancha
      WHEN 'CJPROG_PLANIPLAN'.
        ls_fcat-seltext   = text-t03.
        ls_fcat-scrtext_l = text-t03.
        ls_fcat-scrtext_m = text-t03.
        ls_fcat-scrtext_s = text-t03.
        ls_fcat-reptext   = text-t03.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.


*     Plancha fabricada
      WHEN 'PLANCHA_FAB'.
        ls_fcat-seltext   = text-t04.
        ls_fcat-scrtext_l = text-t04.
        ls_fcat-scrtext_m = text-t04.
        ls_fcat-scrtext_s = text-t04.
        ls_fcat-reptext   = text-t04.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*    Orden Manipulado
      WHEN 'AUFNR_MANIPULADO'.
        ls_fcat-seltext   = text-t05.
        ls_fcat-scrtext_l = text-t05.
        ls_fcat-scrtext_m = text-t05.
        ls_fcat-scrtext_s = text-t05.
        ls_fcat-reptext   = text-t05.
        ls_fcat-hotspot = 'X'.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Cajas Manipuladas
      WHEN 'CJ_MANIPULADAS'.
        ls_fcat-seltext   = text-t06.
        ls_fcat-scrtext_l = text-t06.
        ls_fcat-scrtext_m = text-t06.
        ls_fcat-scrtext_s = text-t06.
        ls_fcat-reptext   = text-t06.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Cajas Troqueladas
      WHEN 'CJ_TROQUELADAS'.
        ls_fcat-seltext   = text-t07.
        ls_fcat-scrtext_l = text-t07.
        ls_fcat-scrtext_m = text-t07.
        ls_fcat-scrtext_s = text-t07.
        ls_fcat-reptext   = text-t07.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Cajas Impresas
      WHEN 'CJ_IMPRESAS'.
        ls_fcat-seltext   = text-t08.
        ls_fcat-scrtext_l = text-t08.
        ls_fcat-scrtext_m = text-t08.
        ls_fcat-scrtext_s = text-t08.
        ls_fcat-reptext   = text-t08.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Enviado a centros externos
      WHEN 'ENVIADO'.
        ls_fcat-seltext   = text-t09.
        ls_fcat-scrtext_l = text-t09.
        ls_fcat-scrtext_m = text-t09.
        ls_fcat-scrtext_s = text-t09.
        ls_fcat-reptext   = text-t09.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Recibido de centros externos
      WHEN 'RECIBIDO'.
        ls_fcat-seltext   = text-010.
        ls_fcat-scrtext_l = text-010.
        ls_fcat-scrtext_m = text-010.
        ls_fcat-scrtext_s = text-010.
        ls_fcat-reptext   = text-010.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Cajas selladas
      WHEN 'CJ_SELLADAS'.
        ls_fcat-seltext   = text-011.
        ls_fcat-scrtext_l = text-011.
        ls_fcat-scrtext_m = text-011.
        ls_fcat-scrtext_s = text-011.
        ls_fcat-reptext   = text-011.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Cajas Embaladas
      WHEN 'CJ_EMBALADAS'.
        ls_fcat-seltext   = text-012.
        ls_fcat-scrtext_l = text-012.
        ls_fcat-scrtext_m = text-012.
        ls_fcat-scrtext_s = text-012.
        ls_fcat-reptext   = text-012.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Cajas Expedidas
      WHEN 'CJ_EXPEDIDAS'.
        ls_fcat-seltext   = text-013.
        ls_fcat-scrtext_l = text-013.
        ls_fcat-scrtext_m = text-013.
        ls_fcat-scrtext_s = text-013.
        ls_fcat-reptext   = text-013.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Cajas Facturadas
      WHEN 'CJ_FACTURADAS'.
        ls_fcat-seltext   = text-014.
        ls_fcat-scrtext_l = text-014.
        ls_fcat-scrtext_m = text-014.
        ls_fcat-scrtext_s = text-014.
        ls_fcat-reptext   = text-014.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     Material Devuelto
      WHEN 'MAT_DEVUELTO'.
        ls_fcat-seltext   = text-015.
        ls_fcat-scrtext_l = text-015.
        ls_fcat-scrtext_m = text-015.
        ls_fcat-scrtext_s = text-015.
        ls_fcat-reptext   = text-015.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

*     CGV - 14.04.20 - SAT 7000031197 Ticket  60405
      WHEN 'PRECIO_UNIT'.
        ls_fcat-no_out = 'X'.
        ls_fcat-seltext   = text-021.
        ls_fcat-scrtext_l = text-021.
        ls_fcat-scrtext_m = text-021.
        ls_fcat-scrtext_s = text-021.
        ls_fcat-reptext   = text-021.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.


      WHEN 'PRECIO_EURO_KG'.
        ls_fcat-seltext   = text-022.
        ls_fcat-scrtext_l = text-022.
        ls_fcat-scrtext_m = text-022.
        ls_fcat-scrtext_s = text-022.
        ls_fcat-reptext   = text-022.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

    ENDCASE.
  ENDLOOP.

ENDFORM.                    " ALV_PREPARE_FIELCAT
*&---------------------------------------------------------------------*
*&      Form  ALV_PREPARE_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_LVC_S_LAYO  text
*----------------------------------------------------------------------*
FORM alv_prepare_layout  CHANGING ls_lvc_s_layo TYPE lvc_s_layo.

* Para que muestre el ancho de las columnas optimizado
  ls_lvc_s_layo-cwidth_opt = 'X'.
  ls_lvc_s_layo-sel_mode   = 'A'.
  ls_lvc_s_layo-info_fname = 'LINE_COLOR'. " CVJ - 50849

ENDFORM.                    " ALV_PREPARE_LAYOUT
*&---------------------------------------------------------------------*
*&      Form  GET_INFO_ORDEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_AUFNR_EXTRUSION  text
*      <--P_WA_DATOS  text
*----------------------------------------------------------------------*
FORM get_info_orden_ext  USING    p_orden TYPE aufnr
                         CHANGING wa_datos TYPE zsrsd0018.

  DATA: lv_number        TYPE          bapi_order_key-order_number,
        wa_order_objects TYPE          bapi_pi_order_objects,
        wa_return        TYPE          bapiret2,
        t_header         TYPE TABLE OF bapi_order_header1,
        wa_header        TYPE          bapi_order_header1,
        t_position       TYPE TABLE OF bapi_order_item,
        wa_position      TYPE          bapi_order_item,
        t_sequence       TYPE TABLE OF bapi_order_sequence,
        t_phase          TYPE TABLE OF bapi_order_phase,
        t_trigger_point  TYPE TABLE OF bapi_order_trigger_point,
        t_component      TYPE TABLE OF bapi_order_component,
        t_prod_rel_tool  TYPE TABLE OF bapi_order_prod_rel_tools,
        lv_status(4).


  lv_number = p_orden.

  wa_order_objects-header = 'X'.
  wa_order_objects-positions = 'X'.
*  wa_order_objects-sequences = 'X'. " CVJ - 50849
*  wa_order_objects-phases = 'X'.
*  wa_order_objects-components = 'X'.
*  wa_order_objects-prod_rel_tools = 'X'.
*  wa_order_objects-trigger_points = 'X'.
*  wa_order_objects-secondary_resources = 'X'.


  CALL FUNCTION 'BAPI_PROCORD_GET_DETAIL'
    EXPORTING
      number        = lv_number
*     COLLECTIVE_ORDER       =
      order_objects = wa_order_objects
    IMPORTING
      return        = wa_return
    TABLES
      header        = t_header
      position      = t_position
      sequence      = t_sequence
      phase         = t_phase
      trigger_point = t_trigger_point
      component     = t_component
      prod_rel_tool = t_prod_rel_tool.



* Generación OT:
* Cantidad incluida en la orden de fabricación de extrusión asociada a
* asociada a la posición, cuando la orden tiene el status Abierta.

  READ TABLE t_header INTO wa_header WITH KEY system_status(4) = 'ABIE'.
  IF sy-subrc = 0.
    wa_datos-generacion_ot = wa_header-target_quantity.
  ELSE.
    wa_datos-generacion_ot = 0.
  ENDIF.

* Cajas programadas/Planificación plancha:
* Cantidad incluida en la orden de fabricación de extrusión asociada a
* la posición, cuando la orden tiene el status Liberada.
  READ TABLE t_header INTO wa_header WITH KEY system_status(4) = 'LIB.'.
  IF sy-subrc = 0.
    wa_datos-cjprog_planiplan = wa_header-target_quantity.
  ELSE.
    wa_datos-cjprog_planiplan = 0.
  ENDIF.

* plancha fabricada:
* Cantidad de alta de stock notificada contra la orden de extrusión
* (movimiento 101 de entrada de producción).
  LOOP AT t_position INTO wa_position.
    wa_datos-plancha_fab = wa_datos-plancha_fab +
                           wa_position-delivered_quantity.
  ENDLOOP.


ENDFORM.                    " GET_INFO_ORDEN
*&---------------------------------------------------------------------*
*&      Form  GET_INFO_ORDEN_MANI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_AUFNR_MANIPULADO  text
*      <--P_WA_DATOS  text
*----------------------------------------------------------------------*
FORM get_info_orden_mani  USING    p_orden TYPE aufnr
                         CHANGING wa_datos TYPE zsrsd0018.

  DATA: lv_number        TYPE          bapi_order_key-order_number,
        wa_order_objects TYPE          bapi_pi_order_objects,
        wa_return        TYPE          bapiret2,
        t_header         TYPE TABLE OF bapi_order_header1,
        wa_header        TYPE          bapi_order_header1,
        t_position       TYPE TABLE OF bapi_order_item,
        wa_position      TYPE          bapi_order_item,
        t_sequence       TYPE TABLE OF bapi_order_sequence,
        t_phase          TYPE TABLE OF bapi_order_phase,
        wa_phase         TYPE          bapi_order_phase,
        t_trigger_point  TYPE TABLE OF bapi_order_trigger_point,
        t_component      TYPE TABLE OF bapi_order_component,
        t_prod_rel_tool  TYPE TABLE OF bapi_order_prod_rel_tools.

  DATA: lv_phase         TYPE          bapi_pi_confirm-phase,
        wa_return_1      TYPE          bapiret1,
        t_order_range    TYPE TABLE OF bapi_pi_orderrange,
        wa_order_range   TYPE          bapi_pi_orderrange,
        t_conf_range     TYPE TABLE OF bapi_pi_confrange,
        t_confirmations  TYPE TABLE OF bapi_pi_conf_key,
        wa_confirmations TYPE          bapi_pi_conf_key.

  DATA: lv_confirmation        TYPE          bapi_pi_conf_key-conf_no,
        lv_confirmationcounter TYPE          bapi_pi_conf_key-conf_cnt,
        wa_conf_detail         TYPE          bapi_pi_confirm,
        t_goodsmovements       TYPE TABLE OF bapi2017_gm_item_show,
        t_failedgmoves         TYPE TABLE OF bapi_coru_fgm.

  DATA: t_mseg  TYPE STANDARD TABLE OF mseg,
        t_mseg1 TYPE STANDARD TABLE OF mseg,
        wa_mseg TYPE                   mseg.



  lv_number = p_orden.

  wa_order_objects-header = 'X'.
  wa_order_objects-positions = 'X'.
*  wa_order_objects-sequences = 'X'. " CVJ - 50849 NO SE USAN
  wa_order_objects-phases = 'X'.
*  wa_order_objects-components = 'X'.
*  wa_order_objects-prod_rel_tools = 'X'.
*  wa_order_objects-trigger_points = 'X'.
*  wa_order_objects-secondary_resources = 'X'.


  CALL FUNCTION 'BAPI_PROCORD_GET_DETAIL'
    EXPORTING
      number        = lv_number
*     COLLECTIVE_ORDER       =
      order_objects = wa_order_objects
    IMPORTING
      return        = wa_return
    TABLES
      header        = t_header
      position      = t_position
      sequence      = t_sequence
      phase         = t_phase
      trigger_point = t_trigger_point
      component     = t_component
      prod_rel_tool = t_prod_rel_tool.



* Cajas Manipuladas:
* Cantidad de alta de stock notificada contra la orden de
* manipulado (movimiento 101 de entrada de producción)
  CLEAR: wa_datos-cj_manipuladas, wa_position, wa_phase, wa_datos-cj_impresas.

  LOOP AT t_position INTO wa_position.
    wa_datos-cj_manipuladas = wa_datos-cj_manipuladas +
                           wa_position-delivered_quantity.
  ENDLOOP.

* Cajas Troqueladas:
* Cantidad notificada en la operación de troquelado de la
* orden de manipulado.
  CLEAR: t_order_range. REFRESH: t_order_range.
  wa_order_range-sign = 'I'.
  wa_order_range-option = 'EQ'.
  wa_order_range-low = lv_number.
  APPEND wa_order_range TO t_order_range.

  READ TABLE t_phase INTO wa_phase WITH KEY control_recipe_destination = 'Z4'.
  IF sy-subrc = 0.
    lv_phase = wa_phase-operation_number.

    CALL FUNCTION 'BAPI_PROCORDCONF_GETLIST'
      EXPORTING
        phase         = lv_phase
*       SEC_RESOURCE  =
      IMPORTING
        return        = wa_return_1
      TABLES
        order_range   = t_order_range
*       CONF_RANGE    = t_CONF_RANGE
        confirmations = t_confirmations.

    CLEAR: wa_datos-cj_troqueladas,  wa_confirmations.

    LOOP AT t_confirmations INTO wa_confirmations.
      CLEAR: wa_return_1, wa_conf_detail, t_goodsmovements, t_failedgmoves.
      REFRESH: t_goodsmovements, t_failedgmoves.

      lv_confirmation  = wa_confirmations-conf_no.
      lv_confirmationcounter = wa_confirmations-conf_cnt.

      CALL FUNCTION 'BAPI_PROCORDCONF_GETDETAIL'
        EXPORTING
          confirmation        = lv_confirmation
          confirmationcounter = lv_confirmationcounter
        IMPORTING
          return              = wa_return_1
          conf_detail         = wa_conf_detail
        TABLES
          goodsmovements      = t_goodsmovements
          failedgmoves        = t_failedgmoves.

      wa_datos-cj_troqueladas = wa_datos-cj_troqueladas + wa_conf_detail-yield.

    ENDLOOP.
  ENDIF.

* Cajas Impresas:
* Cantidad notificada en la operación de impresión de la orden de manipulado.
  READ TABLE t_phase INTO wa_phase WITH KEY control_recipe_destination = 'Z5'.
  IF sy-subrc = 0.
    lv_phase = wa_phase-operation_number.

    CALL FUNCTION 'BAPI_PROCORDCONF_GETLIST'
      EXPORTING
        phase         = lv_phase
*       SEC_RESOURCE  =
      IMPORTING
        return        = wa_return_1
      TABLES
        order_range   = t_order_range
*       CONF_RANGE    = t_CONF_RANGE
        confirmations = t_confirmations.

    CLEAR: wa_datos-cj_impresas,  wa_confirmations,  wa_conf_detail-yield.

    LOOP AT t_confirmations INTO wa_confirmations.
      CLEAR: wa_return_1, wa_conf_detail, t_goodsmovements, t_failedgmoves.
      REFRESH: t_goodsmovements, t_failedgmoves.

      lv_confirmation  = wa_confirmations-conf_no.
      lv_confirmationcounter = wa_confirmations-conf_cnt.

      CALL FUNCTION 'BAPI_PROCORDCONF_GETDETAIL'
        EXPORTING
          confirmation        = lv_confirmation
          confirmationcounter = lv_confirmationcounter
        IMPORTING
          return              = wa_return_1
          conf_detail         = wa_conf_detail
        TABLES
          goodsmovements      = t_goodsmovements
          failedgmoves        = t_failedgmoves.

      wa_datos-cj_impresas = wa_datos-cj_impresas + wa_conf_detail-yield.

    ENDLOOP.
  ENDIF.

* Cajas Selladas
* Cantidad notificada en la operación de sellado o soldado de
* la orden de manipulado (corresponde con el status de Cipasi
* en muelle/zona de expedición.
  READ TABLE t_phase INTO wa_phase WITH KEY control_recipe_destination = 'Z6'.
  IF sy-subrc = 0.
    lv_phase = wa_phase-operation_number.

    CALL FUNCTION 'BAPI_PROCORDCONF_GETLIST'
      EXPORTING
        phase         = lv_phase
*       SEC_RESOURCE  =
      IMPORTING
        return        = wa_return_1
      TABLES
        order_range   = t_order_range
*       CONF_RANGE    = t_CONF_RANGE
        confirmations = t_confirmations.

    LOOP AT t_confirmations INTO wa_confirmations.
      CLEAR: wa_return_1, wa_conf_detail, t_goodsmovements, t_failedgmoves.
      REFRESH: t_goodsmovements, t_failedgmoves.

      lv_confirmation  = wa_confirmations-conf_no.
      lv_confirmationcounter = wa_confirmations-conf_cnt.

      CALL FUNCTION 'BAPI_PROCORDCONF_GETDETAIL'
        EXPORTING
          confirmation        = lv_confirmation
          confirmationcounter = lv_confirmationcounter
        IMPORTING
          return              = wa_return_1
          conf_detail         = wa_conf_detail
        TABLES
          goodsmovements      = t_goodsmovements
          failedgmoves        = t_failedgmoves.

      wa_datos-cj_selladas = wa_datos-cj_selladas + wa_conf_detail-yield.

    ENDLOOP.
  ENDIF.

* Enviado a centros externos y Recibido de centros externos
  READ TABLE t_header INTO wa_header INDEX 1.

  CLEAR: t_mseg.
  REFRESH: t_mseg.

  SELECT * FROM mseg
    INTO TABLE t_mseg
    WHERE matnr = wa_header-material AND
          bwart = '101' AND
          werks = wa_header-production_plant AND
          aufnr = p_orden.

  IF t_mseg[] IS NOT INITIAL.
*   Enviado a centros externos
    CLEAR: t_mseg1.
    REFRESH: t_mseg1.

    SELECT * FROM mseg
      INTO TABLE t_mseg1
      FOR ALL ENTRIES IN t_mseg
      WHERE bwart = '541' AND
            werks = wa_header-production_plant AND
            charg = t_mseg-charg AND
            sobkz = 'O'.

    LOOP AT t_mseg1 INTO wa_mseg.
      wa_datos-enviado = wa_datos-enviado + wa_mseg-menge.
    ENDLOOP.

*   Recibido de centros externos
    CLEAR: t_mseg1.
    REFRESH: t_mseg1.
    SELECT * FROM mseg
      INTO TABLE t_mseg1
      FOR ALL ENTRIES IN t_mseg
      WHERE bwart = '101' AND
            werks = wa_header-production_plant AND
            matnr = t_mseg-matnr AND " cviv - 50849
            charg = t_mseg-charg AND
            kzbew = 'B'.

    LOOP AT t_mseg1 INTO wa_mseg.
      wa_datos-recibido = wa_datos-recibido + wa_mseg-menge.
    ENDLOOP.

  ENDIF.


* Cajas Embaladas:
* Cajas que se hayan trasladado al almacén de expediciones/producto
* terminado (movimientos 311 al almacén 1400 del lote implicado).
  CLEAR: t_mseg.
  REFRESH: t_mseg.

  SELECT * FROM mseg
    INTO TABLE t_mseg
    WHERE bwart = '101' AND
          werks = wa_header-production_plant AND
          aufnr = p_orden AND
          kzbew = 'F' AND
          matnr = wa_header-material.

  IF t_mseg[] IS NOT INITIAL.
    CLEAR: t_mseg1.
    REFRESH: t_mseg1.

    SELECT * FROM mseg
      INTO TABLE t_mseg1
      FOR ALL ENTRIES IN t_mseg
      WHERE bwart = '311' AND
            werks = '4000' AND
            lgort = '1400' AND
            matnr = wa_header-material AND
            charg = t_mseg-charg.

    LOOP AT t_mseg1 INTO wa_mseg.
      wa_datos-cj_embaladas = wa_datos-cj_embaladas + wa_mseg-menge.
    ENDLOOP.
  ENDIF.





ENDFORM.                    " GET_INFO_ORDEN_MANI
*&---------------------------------------------------------------------*
*&      Form  INITIALIZATION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM initialization_sel .
  DATA: ls_werks LIKE LINE OF so_werks,
        lv_werks TYPE         werks_d.

  CLEAR: ls_werks, lv_werks.

  SELECT SINGLE parva FROM usr05
    INTO lv_werks
    WHERE bname = sy-uname AND
          parid = 'WRK'.

  IF lv_werks IS NOT INITIAL.
    ls_werks-sign = 'I'.
    ls_werks-option = 'EQ'.
    ls_werks-low = lv_werks.
    APPEND ls_werks TO so_werks.
    so_vkorg-sign = 'I'.
    so_vkorg-option = 'EQ'.
    so_vkorg-low = lv_werks.
    APPEND so_vkorg.
  ENDIF.

ENDFORM.                    " INITIALIZATION_SEL
