*&---------------------------------------------------------------------*
*&  Include           ZRSDCOM_INF001_FORMS
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  CARGAR_OBJETOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM cargar_objetos .

* Creamos el container principal
  CREATE OBJECT g_custom_container
    EXPORTING
      container_name = gc_container.

* Creamos el splitter dentro del container con 2 filas
  CREATE OBJECT g_splitter
    EXPORTING
      parent  = g_custom_container
      rows    = 2
      columns = 1.

* Sacamos el contenedor de arriba (cabecera HTML)
  CALL METHOD g_splitter->get_container
    EXPORTING
      row       = 1
      column    = 1
    RECEIVING
      container = g_container_1.

* Sacamos el contenedor de abajo (para el ALV)
  CALL METHOD g_splitter->get_container
    EXPORTING
      row       = 2
      column    = 1
    RECEIVING
      container = g_container_2.

* Creamos el objeto de los textos de la cabecera
  CREATE OBJECT g_dd_doc
    EXPORTING
      style = 'ALV_GRID'.

* Dependiendo del tipo de listado, cargamos el GRID o el TREE
  IF p_alv = 'X'.
    CREATE OBJECT g_grid
      EXPORTING
        i_parent = g_container_2.
  ELSE.
    CREATE OBJECT g_tree
      EXPORTING
        parent              = g_container_2
        node_selection_mode = cl_gui_column_tree=>node_sel_mode_multiple
        item_selection      = 'X'
        no_html_header      = 'X'
        no_toolbar          = ''.
  ENDIF.

* Ajustamos la altura del splitter
  CALL METHOD g_splitter->set_row_height
    EXPORTING
      id     = 1
      height = 20.

****   Para los eventos
***    CREATE OBJECT g_application.
***    SET HANDLER g_application->handle_data_changed          FOR g_grid.
***    SET HANDLER g_application->handle_data_changed_finished FOR g_grid.
***
****   Cuando es editable -> para que escuche los eventos: ENTER...
***    CALL METHOD g_grid->register_edit_event
***      EXPORTING
***        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

ENDFORM.                    " CARGAR_OBJETOS


*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_HTML_HEADER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_html_header .

  DATA: l_doctable    TYPE REF TO cl_dd_table_element,
        l_col_pic     TYPE REF TO cl_dd_area,
        l_col_tit     TYPE REF TO cl_dd_area,
        l_col_info    TYPE REF TO cl_dd_area.

  DATA: lv_logo       TYPE sdydo_key VALUE 'ZBUKRS_XXXX_ALV',
        lv_text       TYPE sdydo_text_element.

* Creamos una tabla con 3 columnas
  CALL METHOD g_dd_doc->add_table
    EXPORTING
      no_of_columns = 3
      border        = '0'
      width         = '100%'
    IMPORTING
      table         = l_doctable.

* Columna del logo
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '15%'
    IMPORTING
      column = l_col_pic.

* Columna de títulos
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '10%'
    IMPORTING
      column = l_col_tit.

* Columna de valores (información)
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '75%'
    IMPORTING
      column = l_col_info.

* Ponemos el logo
  REPLACE 'XXXX' IN lv_logo WITH p_bukrs.
  CALL METHOD l_col_pic->add_picture
    EXPORTING
      picture_id = lv_logo.

* Ponemos el título de la sociedad
  CALL METHOD l_col_tit->add_text
    EXPORTING
      text         = text-c01
      sap_color    = cl_dd_area=>list_heading
      sap_fontsize = cl_dd_area=>large.

* Ponemos la fecha
  SELECT SINGLE butxt INTO lv_text
      FROM  t001
      WHERE bukrs = p_bukrs.
  CALL METHOD l_col_info->add_text
    EXPORTING
      text         = lv_text
      sap_fontsize = cl_dd_document=>large.

* Creamos el objeto HTML en el container de arriba
  CREATE OBJECT g_html
    EXPORTING
      parent = g_container_1.

* Cargamos los textos en el visor HTML
  g_dd_doc->html_control = g_html.

* Visualizamos los textos
  CALL METHOD g_dd_doc->merge_document.
  CALL METHOD g_dd_doc->display_document
    EXPORTING
      reuse_control = 'X'
      parent        = g_container_1.

ENDFORM.                    " MOSTRAR_HTML_HEADER


*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_alv .

  DATA: lti_fieldcat TYPE lvc_t_fcat,
        lti_exctool  TYPE ui_functions.
  DATA: ls_layout    TYPE lvc_s_layo,
        ls_variant   TYPE disvariant.
  DATA: lv_repid     TYPE syrepid.

* Variante
  lv_repid          = sy-repid.
  ls_variant-report = lv_repid.
  ls_variant-handle = 'GRID'.

* Preparamos el catálogo de campos
  PERFORM prepare_fielcat CHANGING lti_fieldcat.

* Layout
  ls_layout-cwidth_opt = 'X'.

* Mostramos el ALV
  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_buffer_active      = ' '
      i_bypassing_buffer   = 'X'
      is_layout            = ls_layout
      is_variant           = ls_variant
      i_save               = 'A'
      it_toolbar_excluding = lti_exctool
    CHANGING
      it_outtab            = gti_grid
      it_fieldcatalog      = lti_fieldcat.

* Volvemos a ajustar el ancho de las columnas
  PERFORM refrescar_alv .

ENDFORM.                    " MOSTRAR_ALV


*&---------------------------------------------------------------------*
*&      Form  PREPARE_FIELCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--CTI_FIELDCAT  text
*----------------------------------------------------------------------*
FORM prepare_fielcat  CHANGING cti_fieldcat TYPE lvc_t_fcat.

  DATA: ls_fcat   TYPE lvc_s_fcat.
  DATA: lv_ind    TYPE i.

* Recuperamos el catálogo de campos
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZRSDCOM_INF001_GRID'
    CHANGING
      ct_fieldcat      = cti_fieldcat.

* Recorremos el catálogo de campos modificandolo
  LOOP AT cti_fieldcat INTO ls_fcat.
    lv_ind = sy-tabix.
*   Dependiendo del campo ponemos unas propiedades u otras
    CASE ls_fcat-fieldname.
*     Campos clave
      WHEN 'LIFNR' OR 'NAME1_COM' OR 'VBELN' OR 'POSNR'.
        ls_fcat-key = 'X'.
    ENDCASE.
    MODIFY cti_fieldcat FROM ls_fcat INDEX lv_ind.
  ENDLOOP.

ENDFORM.                    " PREPARE_FIELCAT


*&---------------------------------------------------------------------*
*&      Form  REFRESCAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refrescar_alv .

  DATA: ls_layout TYPE lvc_s_layo,
        ls_stable TYPE lvc_s_stbl.

* Cuando estamos en modo ALV
  IF p_alv = 'X'.
*   Sacamos el layout del ALV
    CALL METHOD g_grid->get_frontend_layout
      IMPORTING
        es_layout = ls_layout.

*   Ponemos de nuevo que optimice las columnas
    ls_layout-cwidth_opt = 'X'.

*   Cargamos de nuevo el layout
    CALL METHOD g_grid->set_frontend_layout
      EXPORTING
        is_layout = ls_layout.

*   Refrescamos el ALV
    ls_stable-row = 'X'.
    ls_stable-col = 'X'.
    CALL METHOD g_grid->refresh_table_display
      EXPORTING
        is_stable = ls_stable.
  ENDIF.

ENDFORM.                    " REFRESCAR_ALV


*&---------------------------------------------------------------------*
*&      Form  SACAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sacar_datos .

* Inicializamos
  REFRESH gti_datos.

* Sacamos todos los datos de las provisiones
  SELECT * INTO TABLE gti_datos
      FROM  ztsdcom_pos
      WHERE bukrs  = p_bukrs
*{   INSERT         HEDK928333                                        1
      AND   gsber in so_gsber
*}   INSERT
      AND   vbeln IN so_vbeln
      AND   lifnr IN so_lifnr
      AND   kschl IN so_kschl
      AND   fkdat IN so_fkdat
      AND   kunnr IN so_kunrg
      AND   zstat_liqpos IN so_stat.

ENDFORM.                    " SACAR_DATOS


*&---------------------------------------------------------------------*
*&      Form  CARGAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM cargar_alv .

  DATA: ls_dato TYPE ztsdcom_pos,
        ls_grid TYPE zrsdcom_inf001_grid.

* Inicializamos la tabla del ALV
  REFRESH gti_grid.


* Recorremos los datos rellenando la estructura del ALV
  LOOP AT gti_datos INTO ls_dato.
    CLEAR ls_grid.
    MOVE-CORRESPONDING ls_dato TO ls_grid.
*   Nombre del comisionista
    SELECT SINGLE name1 INTO ls_grid-name1_com
        FROM  lfa1
        WHERE lifnr = ls_grid-lifnr.
*   Nombre del pagador de la factura
    SELECT SINGLE name1 INTO ls_grid-name1_cli
        FROM  kna1
        WHERE kunnr = ls_grid-kunnr.
*   Importe neto de la posición de la factura
    SELECT SINGLE netwr arktx
        INTO (ls_grid-netwr, ls_grid-maktx)
        FROM  vbrp
        WHERE vbeln = ls_grid-vbeln
        AND   posnr = ls_grid-posnr.
*   Añadimos la línea
    APPEND ls_grid TO gti_grid.
  ENDLOOP.

ENDFORM.                    " CARGAR_ALV


*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_TREE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_tree .

  DATA: ls_header    TYPE treev_hhdr,
        ls_variant   TYPE disvariant.

  DATA: lv_repid     TYPE syrepid.

* Variante
  lv_repid          = sy-repid.
  ls_variant-report = lv_repid.
  ls_variant-handle = 'TREE'.

* Creamos la cabecera del TREE
  PERFORM build_hierarchy_header CHANGING ls_header.

* Mostramos el TREE
  CALL METHOD g_tree->set_table_for_first_display
    EXPORTING
      i_structure_name    = 'ZRSDCOM_INF001_TREE'
      is_variant          = ls_variant
      i_save              = 'A'
      is_hierarchy_header = ls_header
    CHANGING
      it_outtab           = gti_tree.

ENDFORM.                    " MOSTRAR_TREE


*&---------------------------------------------------------------------*
*&      Form  build_hierarchy_header
*&---------------------------------------------------------------------*
*       build hierarchy-header-information
*----------------------------------------------------------------------*
*      -->PS_HEADER  strucxture for hierarchy-header
*----------------------------------------------------------------------*
FORM build_hierarchy_header CHANGING ps_header TYPE treev_hhdr.

  ps_header-heading = 'Comis./Factura/Pos.'(100).
  ps_header-tooltip = 'Comis./Factura/Pos.'(100).
  ps_header-width = 50.
  ps_header-width_pix = ' '.

ENDFORM.                               " build_hierarchy_header


*&---------------------------------------------------------------------*
*&      Form  CONSTRUIR_TREE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM construir_tree .

  DATA: lti_comis   TYPE TABLE OF ty_comis,
        lti_fact    TYPE TABLE OF ty_fact.

  DATA: ls_comis    TYPE ty_comis,
        ls_fact     TYPE ty_fact,
        ls_dato     TYPE ztsdcom_pos.

  DATA: lv_comkey   TYPE lvc_nkey,
        lv_fackey   TYPE lvc_nkey,
        lv_ind      TYPE i.

* Sacamos una tabla con los comisionistas diferentes y de las facturas por comisionista
  LOOP AT gti_datos INTO ls_dato.
*   Tabla de comisionistas
    CLEAR ls_comis.
    ls_comis-lifnr = ls_dato-lifnr.
    COLLECT ls_comis INTO lti_comis.
*   Tabla de facturas por comisionista
    CLEAR ls_fact.
    ls_fact-lifnr = ls_dato-lifnr.
    ls_fact-vbeln = ls_dato-vbeln.
    COLLECT ls_fact INTO lti_fact.
  ENDLOOP.

* Recorremos la tabla de comisionistas sacando sus nombres
  LOOP AT lti_comis INTO ls_comis.
    lv_ind = sy-tabix.
    SELECT SINGLE name1 INTO ls_comis-name1
        FROM  lfa1
        WHERE lifnr = ls_comis-lifnr.
    MODIFY lti_comis FROM ls_comis INDEX lv_ind.
  ENDLOOP.

* Recorremos las tablas construyendo el TREE anidado
  LOOP AT lti_comis INTO ls_comis.
*   Añadimos el nodo comisionista al tree
    PERFORM insertar_nodo_comis USING     ls_comis
                                CHANGING  lv_comkey.
*   Recorremos las facturas del comisionista
    LOOP AT lti_fact INTO ls_fact WHERE lifnr = ls_comis-lifnr.
*     Añadimos el nodo de la factura
      PERFORM insertar_nodo_fact USING    lv_comkey
                                          ls_fact
                                 CHANGING lv_fackey.
*     Recorremos todas las posiciones añadiendolas a la factura
      LOOP AT gti_datos INTO ls_dato WHERE lifnr = ls_comis-lifnr
                                     AND   vbeln = ls_fact-vbeln.
*       Añadimos el nodo de la posición
        PERFORM insertar_nodo_pos USING    lv_fackey
                                           ls_dato.
      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                    " CONSTRUIR_TREE


*&---------------------------------------------------------------------*
*&      Form  INSERTAR_NODO_COMIS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PS_COMIS  text
*      <--P_COMKEY  text
*----------------------------------------------------------------------*
FORM insertar_nodo_comis  USING    ps_comis  TYPE ty_comis
                          CHANGING p_comkey  TYPE lvc_nkey.

  DATA: ls_tree      TYPE zrsdcom_inf001_tree.
  DATA: lv_node_text TYPE lvc_value.

* Ponemos la descripción del nodo
  CONCATENATE ps_comis-lifnr ps_comis-name1 INTO lv_node_text SEPARATED BY space.

* Cargamos los datos del nodo
  MOVE-CORRESPONDING ps_comis TO ls_tree.
  ls_tree-name1_com = ps_comis-name1.

* Añadimos el nodo
  CALL METHOD g_tree->add_node
    EXPORTING
      i_relat_node_key = ''
      i_relationship   = cl_gui_column_tree=>relat_last_child
      i_node_text      = lv_node_text
      is_outtab_line   = ls_tree
    IMPORTING
      e_new_node_key   = p_comkey.

ENDFORM.                    " INSERTAR_NODO_COMIS


*&---------------------------------------------------------------------*
*&      Form  INSERTAR_NODO_FACT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_KEY     text
*      -->PS_FACT  text
*      <--P_FACKEY  text
*----------------------------------------------------------------------*
FORM insertar_nodo_fact   USING    p_key
                                   ps_fact   TYPE ty_fact
                          CHANGING p_fackey  TYPE lvc_nkey.

  DATA: ls_tree      TYPE zrsdcom_inf001_tree,
        ls_dato      TYPE ztsdcom_pos.
  DATA: lv_node_text TYPE lvc_value.

* Ponemos la descripción del nodo
  lv_node_text = ps_fact-vbeln.

* Cargamos los datos del nodo
  READ TABLE gti_datos INTO ls_dato WITH KEY vbeln = ps_fact-vbeln.
  MOVE-CORRESPONDING ps_fact TO ls_tree.
  ls_tree-kunnr = ls_dato-kunnr.
  ls_tree-fkdat = ls_dato-fkdat.
  ls_tree-waerk = ls_dato-waerk.
* Nombre del cliente
  SELECT SINGLE name1 INTO ls_tree-name1_cli
      FROM  kna1
      WHERE kunnr = ls_tree-kunnr.
* Importe en liquidaciones
  SELECT SUM( zimp_liq ) INTO ls_tree-zliq_par
      FROM  ztsdcom_prliqpos
      WHERE vbeln = ps_fact-vbeln
      AND   lifnr = ps_fact-lifnr.

* Añadimos el nodo
  CALL METHOD g_tree->add_node
    EXPORTING
      i_relat_node_key = p_key
      i_relationship   = cl_gui_column_tree=>relat_last_child
      i_node_text      = lv_node_text
      is_outtab_line   = ls_tree
    IMPORTING
      e_new_node_key   = p_fackey.

ENDFORM.                    " INSERTAR_NODO_FACT


*&---------------------------------------------------------------------*
*&      Form  INSERTAR_NODO_POS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_FACKEY  text
*      -->PS_COMIS  text
*----------------------------------------------------------------------*
FORM insertar_nodo_pos    USING   p_fackey  TYPE lvc_nkey
                                  ps_dato   TYPE ztsdcom_pos.

  DATA: ls_tree      TYPE zrsdcom_inf001_tree.
  DATA: lv_node_text TYPE lvc_value.

* Ponemos la descripción del nodo
  lv_node_text = ps_dato-posnr.

* Cargamos los datos del nodo
  MOVE-CORRESPONDING ps_dato TO ls_tree.
* Importe neto de la posición
  SELECT SINGLE netwr arktx
      INTO (ls_tree-netwr, ls_tree-maktx)
      FROM  vbrp
      WHERE vbeln = ls_tree-vbeln
      AND   posnr = ls_tree-posnr.


* Añadimos el nodo
  CALL METHOD g_tree->add_node
    EXPORTING
      i_relat_node_key = p_fackey
      i_relationship   = cl_gui_column_tree=>relat_last_child
      i_node_text      = lv_node_text
      is_outtab_line   = ls_tree.

ENDFORM.                    " INSERTAR_NODO_POS
