*&---------------------------------------------------------------------*
*& Report  ZRSD0031
*&
*&---------------------------------------------------------------------*
*& GAPSD083 - Listado Precios
*& Javier Calás. 13.12.23
*&---------------------------------------------------------------------*
REPORT zrsd0031.

TABLES: a929, a927, a960, yhp_idx_td100, ztsd0013, marc, mara, mvke, knvv.


DATA rl_alv TYPE REF TO cl_salv_table.
CLASS lcl_event_handler DEFINITION.

  PUBLIC SECTION.
    METHODS:
      on_user_command FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function,

      on_link_click FOR EVENT link_click OF cl_salv_events_table
        IMPORTING row column.

ENDCLASS.
**********************
* Tipos de datos
**********************
TYPES: BEGIN OF st_alv,
         vkorg    TYPE a929-vkorg,
         vtweg    TYPE a929-vtweg,
         kunnr    TYPE a929-kunnr,
         kunwe    TYPE a927-kunwe,
         name1    TYPE kna1-name1,
         pstlz    TYPE kna1-pstlz,
         ort01    TYPE kna1-ort01,
         regio    TYPE regio,
         bezei    TYPE t005u-bezei,
         zzbrsch  TYPE knvv-zzbrsch,
         brtxt    TYPE t016t-brtxt,
         inco1    TYPE a929-inco1,
         kfrst    TYPE a929-kfrst,
         prole    TYPE p LENGTH 8 DECIMALS 4, " yhp_idx_td100-prole,
         prowi    TYPE p LENGTH 8 DECIMALS 4, " yhp_idx_td100-prowi,
         prohe    TYPE p LENGTH 8 DECIMALS 4, " yhp_idx_td100-prohe,
         " type -  Guarda # Tengo que ver esta info con Juanvi
         maktx    TYPE makt-maktx,
         matnr    TYPE mara-matnr,
         mstae    TYPE mara-mstae,
         mstav    TYPE mara-mstav,
         werks    TYPE marc-werks,
         mmsta    TYPE marc-mmsta,
         vmsta    TYPE mvke-vmsta,
         board    TYPE yhp_idx_td110-board,
         flute    TYPE yhp_idx_td110-flute,
         kstbm    TYPE konm-kstbm,
         kbetr    TYPE konp-kbetr,
         kpein    TYPE konp-kpein,
         konwa    TYPE konp-konwa,
         kdmat    TYPE knmt-kdmat,
         datab    TYPE a929-datab,
         datbi    TYPE a929-datbi,
         loevm_ko TYPE konp-loevm_ko,
         knumh    TYPE a929-knumh,
         kopos    TYPE konm-kopos,
         klfn1    TYPE konm-klfn1,
         kzbzg    TYPE konp-kzbzg,
*         werks    TYPE a960-werks,
         lgort    TYPE a960-zzlgort,
         zr01     TYPE konp-kbetr,
         imp_zr01 TYPE konp-kbetr,
         zcmo     TYPE konp-kbetr,
       END OF st_alv.


TYPES: BEGIN OF t_cargaf,
         vkorg    TYPE a929-vkorg,
         vtweg    TYPE a929-vtweg,
         kunnr    TYPE a929-kunnr,
         kunwe    TYPE a927-kunwe,
         name1    TYPE kna1-name1,
         pstlz    TYPE kna1-pstlz,
         ort01    TYPE kna1-ort01,
         regio    TYPE regio,
         bezei    TYPE t005u-bezei,
         zzbrsch  TYPE knvv-zzbrsch,
         brtxt    TYPE t016t-brtxt,
         inco1    TYPE a929-inco1,
         kfrst    TYPE a929-kfrst,
         prole    TYPE p LENGTH 8 DECIMALS 4, " yhp_idx_td100-prole,
         prowi    TYPE p LENGTH 8 DECIMALS 4, " yhp_idx_td100-prowi,
         prohe    TYPE p LENGTH 8 DECIMALS 4, " yhp_idx_td100-prohe,
         maktx    TYPE makt-maktx,
         matnr    TYPE mara-matnr,
         mstae    TYPE mara-mstae,
         mstav    TYPE mara-mstav,
         werks    TYPE marc-werks,
         mmsta    TYPE marc-mmsta,
         vmsta    TYPE mvke-vmsta,
         board    TYPE yhp_idx_td110-board,
         flute    TYPE yhp_idx_td110-flute,
         kdmat    TYPE knmt-kdmat,
         kschl    TYPE kschl,
         kotabnr  TYPE kotabnr,
         knumh    TYPE a929-knumh,
         loevm_ko TYPE konp-loevm_ko,
         kzbzg    TYPE konp-kzbzg,
         datab    TYPE a929-datab,
         datbi    TYPE a929-datbi,
         kopos    TYPE konm-kopos,
         klfn1    TYPE konm-klfn1,
         kstbm    TYPE konm-kstbm,
         kbetr    TYPE konp-kbetr,
         importe  TYPE konp-kbetr,
         kpein    TYPE konp-kpein,
         konwa    TYPE konp-konwa,
         color    TYPE lvc_t_scol,
       END OF t_cargaf.

TYPES: BEGIN OF t_carga,
         check     TYPE xfeld,
         lights    TYPE zico_estado_mensaje,
         tabix     TYPE sy-tabix.
         INCLUDE TYPE t_cargaf.
         TYPES:   knumh_new TYPE a929-knumh,
         vbeln     TYPE vbeln_va,
       END OF t_carga.
DATA: i_carga      TYPE TABLE OF t_carga,
      i_cargas_imp TYPE TABLE OF t_cargaf.


CLASS lcl_alv DEFINITION INHERITING FROM zcl_alv FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.

**********************
* Variables globales
**********************
DATA tg_alv TYPE STANDARD TABLE OF st_alv WITH DEFAULT KEY.
DATA wg_alv LIKE LINE OF tg_alv.

**********************
* Pantalla de selección
**********************

SELECTION-SCREEN BEGIN OF BLOCK b03 WITH FRAME TITLE text-t03.
PARAMETERS: rb_prsol RADIOBUTTON GROUP prec DEFAULT 'X' USER-COMMAND rb_prec,
            rb_prdes RADIOBUTTON GROUP prec.
SELECTION-SCREEN END OF BLOCK b03.



SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-t01.
PARAMETERS p_vkorg TYPE a929-vkorg.
SELECTION-SCREEN END OF BLOCK b01.

SELECTION-SCREEN BEGIN OF BLOCK b02 WITH FRAME TITLE text-t02.
SELECT-OPTIONS: s_kunnr FOR a929-kunnr,
                s_kunwe FOR a927-kunwe,
                s_brsch FOR knvv-zzbrsch,
                s_matnr FOR a929-matnr,
                s_prole FOR yhp_idx_td100-prole,
                s_prowi FOR yhp_idx_td100-prowi,
                s_prohe FOR yhp_idx_td100-prohe,
                s_lgort FOR a960-zzlgort.
PARAMETERS cbx_borr AS CHECKBOX.
SELECTION-SCREEN SKIP 1.
SELECT-OPTIONS: s_werks FOR marc-werks,
                s_mstae FOR mara-mstae,
                s_mmsta FOR marc-mmsta,
                s_mstav FOR mara-mstav,
                s_vmsta FOR mvke-vmsta.
SELECTION-SCREEN END OF BLOCK b02.

SELECTION-SCREEN BEGIN OF BLOCK b04 WITH FRAME TITLE text-t04.
PARAMETERS: p_datab TYPE a929-datab DEFAULT sy-datlo,
            p_datbi TYPE a929-datbi.
SELECTION-SCREEN END OF BLOCK b04.

SELECTION-SCREEN BEGIN OF BLOCK b05 WITH FRAME TITLE text-t05.
PARAMETERS: p_carga AS CHECKBOX USER-COMMAND f,
            p_fiche TYPE text255 MODIF ID car.
SELECTION-SCREEN END OF BLOCK b05.


CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA l_list TYPE t_carga.

    l_list = list.
    CASE column.
      WHEN 'MATNR' OR 'KUNNR' OR 'KUNWE' OR 'VBELN'.
        message = '?'.
      WHEN 'KNUMH'.
        NEW zcl_ap_condiciones( )->visualizar( l_list-knumh ).
      WHEN 'KNUMH_NEW'.
        NEW zcl_ap_condiciones( )->visualizar( l_list-knumh_new ).
      WHEN OTHERS.
        IF l_list-knumh_new IS INITIAL.
          NEW zcl_ap_condiciones( )->visualizar( knumh = l_list-knumh pantalla = 'B' ).
        ELSE.
          NEW zcl_ap_condiciones( )->visualizar( knumh = l_list-knumh_new pantalla = 'B' ).
        ENDIF.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    DATA: i_fechas TYPE TABLE OF a929,
          i_knumh  TYPE TABLE OF knumh,
          i_esc    TYPE cond_scale_t,
          l_konp   TYPE konp,
          l_esc    TYPE condscale,
          l_msg    TYPE bapi_msg,
          r_knumh  TYPE RANGE OF knumh.
* Verificamos que en el escalado no se repita el precio en ninguna fila
    DATA: lv_kbetr TYPE konp-kbetr,
          lt_kbetr TYPE HASHED TABLE OF konp-kbetr WITH UNIQUE KEY table_line.
    DATA: lv_kstbm TYPE konp-kstbm,
          lt_kstbm TYPE HASHED TABLE OF konp-kstbm WITH UNIQUE KEY table_line.

    super->handle_user_command( e_salv_function ).

    get_seleccion( CHANGING t_tabla = i_carga ).

    DATA(o_prog) = NEW zcl_ap_dev( guardar_logz = 'X' ).
    CASE ucomm.
      WHEN 'EXCEL'.
        MOVE-CORRESPONDING i_carga TO i_cargas_imp.

        DATA(o_alvl) = NEW zcl_ap_alv( color = 'COLOR' tabla = 'I_CARGAS_IMP' handle = 'CARG' ).

        o_alvl->set_field_text( campo = 'PROLE' valor = 'Long.prod.' valor2 = 'Longitud producto' ).
        o_alvl->set_field_text( campo = 'PROWI' valor = 'Anch.prod.'  valor2 = 'Ancho producto' ).
        o_alvl->set_field_text( campo = 'PROHE' valor = 'Alt.prod.' valor2 = 'Altura producto' ).
        o_alvl->set_field_text( campo = 'IMPORTE' valor = 'N.Importe' valor2 = 'Nuevo importe' ).
        o_alvl->set_field( campo = 'PROLE,PROWI,PROHE' op = 'DECIMALS' valor = '0' ).
        o_alvl->set_field( campo = 'IMPORTE,KSTBM' op = 'NO_CERO' ).

        IF p_fiche IS INITIAL.
          zcl_ap_abap2xls=>alv_2_xls( alv = o_alvl->o_alv refresh_metadata = 'X' tabla = i_cargas_imp abrir = 'X' nombre_fichero = 'Actualización precios.xlsx' ).
        ELSE.
          zcl_ap_abap2xls=>alv_2_xls( alv = o_alvl->o_alv refresh_metadata = 'X' tabla = i_cargas_imp abrir = 'X' ruta = p_fiche  ).
        ENDIF.
      WHEN 'IMPORT'.
        LOOP AT i_carga ASSIGNING FIELD-SYMBOL(<carga>).
          CLEAR <carga>-check.
        ENDLOOP.
        set_seleccion( CHANGING t_tabla = i_carga ).

        NEW zcl_ap_abap2xls( )->lee_fichero( EXPORTING popup_select_file         = 'X'
                                                       fichero = p_fiche
                                                       get_datos     = 'X'
                                                       huge          = 'X'
                                                       mostrar_error = 'X'
                                             IMPORTING datos         = i_cargas_imp ).

        LOOP AT i_cargas_imp ASSIGNING FIELD-SYMBOL(<f>).
          DATA(l_tabix) = sy-tabix + 1.
          ASSIGN i_carga[ knumh = <f>-knumh klfn1 = <f>-klfn1 kopos = <f>-kopos ] TO FIELD-SYMBOL(<c>).
          IF sy-subrc <> 0.
            o_prog->message( p1 = 'Registro' p2 = l_tabix p3 = 'no se encuentra en selección' postponer = 'X' ).
          ELSE.
            DELETE <c>-color WHERE fname = ''.
            IF <f>-datbi = '88888888' OR <f>-datab = '88888888'.
              o_prog->message( p1 = 'Registro' p2 = l_tabix p3 = 'tiene error en fechas' postponer = 'X' ).
            ELSE.
              IF <f>-kzbzg IS INITIAL.
                IF <c>-datab = <f>-datab AND <c>-datbi = <f>-datbi.
                  IF     ( <c>-kbetr = <f>-importe OR <f>-importe = 0 )
                     AND <c>-kpein = <f>-kpein
                     AND <c>-konwa = <f>-konwa.
                    <c>-lights = zcl_ap_alv=>set_icono( icono = icon_equal_green mensaje = 'Registro no modificado' ).
                    <c>-check  = ''.
                  ELSEIF <f>-importe <> 0.
                    MOVE-CORRESPONDING <f> TO <c>.
                    <c>-lights = zcl_ap_alv=>set_icono( icono = icon_change mensaje = 'Se ha modificado precio' ).
                    <c>-check  = 'X'.
                    zcl_ap_alv_grid=>append_color( EXPORTING colorc = 'N' CHANGING tabla_color = <c>-color ).
                  ELSE.
                    <c>-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = 'Precio no puede ser 0' ).
                    zcl_ap_alv_grid=>append_color( EXPORTING colorc = 'R' CHANGING tabla_color = <c>-color ).
                  ENDIF.
                ELSE.
                  MOVE-CORRESPONDING <f> TO <c>.
                  <c>-lights = zcl_ap_alv=>set_icono( icono = icon_create mensaje = 'Se creará nueva partición de precio' ).
                  <c>-check  = 'X'.
                  zcl_ap_alv_grid=>append_color( EXPORTING colorc = 'N' int = 1 CHANGING tabla_color = <c>-color ).
                ENDIF.

              ELSE.
                CLEAR i_fechas.
                LOOP AT i_cargas_imp ASSIGNING FIELD-SYMBOL(<f2>) WHERE knumh = <f>-knumh.
                  CLEAR a929.
                  a929-datbi = <f2>-datbi.
                  a929-datab = <f2>-datab.
                  COLLECT a929 INTO i_fechas.
                ENDLOOP.
                IF lines( i_fechas ) > 1.
                  <c>-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = 'En escalas las fechas han de coincidir' ).
                  CONTINUE.
                ENDIF.

                COLLECT <f>-knumh INTO i_knumh.

                ASSIGN i_carga[ knumh = <f>-knumh klfn1 = <f>-klfn1 kopos = <f>-kopos kstbm = <f>-kstbm ] TO <c>.
                IF sy-subrc <> 0.
                  DATA(l_c) = <c>.
                  l_c-lights = zcl_ap_alv=>set_icono( icono = icon_create mensaje = 'Se creará nueva escala' ).
                  MOVE-CORRESPONDING <f> TO l_c.
                  l_c-check = 'X'.
                  zcl_ap_alv_grid=>append_color( EXPORTING colorc = 'N' int = 1 CHANGING tabla_color = l_c-color ).
                  APPEND l_c TO i_carga.
                ELSE.
                  IF <c>-datab = <f>-datab AND <c>-datbi = <f>-datbi.
                    IF     ( <c>-kbetr = <f>-importe OR <f>-importe = 0 )
                       AND <c>-kpein = <f>-kpein
                       AND <c>-konwa = <f>-konwa.
                      <c>-lights = zcl_ap_alv=>set_icono( icono = icon_equal_green mensaje = 'Registro no modificado' ).
                      <c>-check  = ''.
                    ELSEIF <f>-importe <> 0.
                      MOVE-CORRESPONDING <f> TO <c>.
                      <c>-lights = zcl_ap_alv=>set_icono( icono = icon_change mensaje = 'Se ha modificado precio' ).
                      <c>-check  = 'X'.
                      zcl_ap_alv_grid=>append_color( EXPORTING colorc = 'N' CHANGING tabla_color = <c>-color ).
                    ELSE.
                      <c>-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = 'Precio no puede ser 0' ).
                      zcl_ap_alv_grid=>append_color( EXPORTING colorc = 'R' CHANGING tabla_color = <c>-color ).
                    ENDIF.
                  ELSE.
                    MOVE-CORRESPONDING <f> TO <c>.
                    <c>-lights = zcl_ap_alv=>set_icono( icono = icon_create mensaje = 'Se creará nueva partición de precio' ).
                    <c>-check  = 'X'.
                    zcl_ap_alv_grid=>append_color( EXPORTING colorc = 'N' int = 1 CHANGING tabla_color = <c>-color ).
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDLOOP.

*        LOOP AT i_knumh ASSIGNING FIELD-SYMBOL(<knumh>).
*          LOOP AT i_carga ASSIGNING FIELD-SYMBOL(<carga>) WHERE knumh = <knumh> AND lights IS INITIAL.
*            <carga>-lights = zcl_ap_alv=>set_icono( icono = icon_delete mensaje = 'Se borrará escala' ).
*          ENDLOOP.
*        ENDLOOP.

        SORT i_carga BY tabix.

        set_seleccion( CHANGING t_tabla = i_carga ).
        refresh( refresh_mode = if_salv_c_refresh=>full ).
        o_prog->o_log->show_log( ).

      WHEN 'PRECIO' OR 'PRECIO_OF'.
        LOOP AT i_carga ASSIGNING <carga> WHERE check = 'X'.
          IF ucomm = 'PRECIO'.
            IF NOT <carga>-lights CS 'Se creará nueva partición de precio' AND
              NOT <carga>-lights CS 'Registro no modificado' AND
              <carga>-lights NE ''.
              MESSAGE '¡La opción de actualizar fecha sólo permite actualización de fechas!' TYPE 'I'.
              RETURN.
            ENDIF.
          ENDIF.

          IF <carga>-datbi IS INITIAL OR <carga>-datab IS INITIAL.
            MESSAGE condense( |Debe informar las fechas de validez para material { <carga>-matnr ALPHA = OUT } { <carga>-knumh ALPHA = OUT }| ) TYPE 'I'.
            RETURN.
          ENDIF.

          IF <carga>-datab > <carga>-datbi.
            MESSAGE 'Fecha inicio no puede ser mayor a fecha final' TYPE 'I'.
            RETURN.
          ENDIF.

          IF <carga>-importe = 0.
            IF ucomm = 'PRECIO'.
              IF <carga>-kbetr <> 0.
                <carga>-importe = <carga>-kbetr.
              ENDIF.
            ELSE.
              MESSAGE 'No seleccione registros con nuevo importe a 0' TYPE 'I'.
              RETURN.
            ENDIF.
          ENDIF.
          IF    <carga>-lights(3) = icon_change(3)
             OR <carga>-lights(3) = icon_create(3)
             OR <carga>-lights(3) = icon_delete(3).
            COLLECT <carga>-knumh INTO i_knumh.
          ELSE.
            o_prog->message( p1 = 'Material' p2 = <carga>-matnr p3 = 'Cliente=' p4 = <carga>-kunnr p5 = 'no tiene modificaciones de precio' postponer = 'X' ).
          ENDIF.
        ENDLOOP.
        LOOP AT i_knumh ASSIGNING FIELD-SYMBOL(<knumh>).
          ASSIGN i_carga[ knumh = <knumh> ] TO <carga>.
          CLEAR: a929, a927, i_esc, lt_kstbm, lt_kbetr.
          DATA(l_tabla) = |A{ <carga>-kotabnr }|.
          CASE <carga>-kotabnr.
            WHEN '929'.
              SELECT *
                FROM a929
                WHERE knumh = @<knumh>
                ORDER BY PRIMARY KEY
                INTO @a929
                UP TO 1 ROWS.
              ENDSELECT.
              ASSIGN a929 TO FIELD-SYMBOL(<registro>).
            WHEN '927'.
              SELECT *
                FROM a927
                WHERE knumh = @<knumh>
                ORDER BY PRIMARY KEY
                INTO @a927
                UP TO 1 ROWS.
              ENDSELECT.
              ASSIGN a927 TO <registro>.
          ENDCASE.

          IF <carga>-lights(3) = icon_create(3).
            DATA(l_new) = 'X'.
          ELSE.
            CLEAR l_new.
          ENDIF.

          CLEAR l_konp.
          IF <carga>-kzbzg IS INITIAL.
            MOVE-CORRESPONDING <carga> TO l_konp.
            l_konp-kbetr = <carga>-importe.
          ELSE.
            CLEAR l_konp-kbetr.
            LOOP AT i_carga ASSIGNING <carga> WHERE knumh = <knumh> AND lights(3) <> icon_delete(3).
              CLEAR l_esc.
              MOVE-CORRESPONDING <carga> TO l_esc.
              IF <carga>-importe IS INITIAL.
                l_esc-kbetr = <carga>-kbetr.
              ELSE.
                l_esc-kbetr = <carga>-importe.
              ENDIF.
              APPEND l_esc TO i_esc.

* En escalados se pone el precio más bajo
              IF l_esc-kbetr > l_konp-kbetr.
                l_konp-kbetr = l_esc-kbetr.
              ENDIF.
              IF <carga>-lights(3) = icon_create(3).
                l_new = 'X'.
              ENDIF.
            ENDLOOP.
            IF l_konp-kbetr = 0.
              o_prog->message( p1 = 'Error determinando precio escalado para material' p2 = <carga>-matnr p3 = 'Cliente=' p4 = <carga>-kunnr postponer = 'X' ).
              CONTINUE.
            ENDIF.

* Verificamos que no haya duplicados en escalas
            DATA(l_error_escalado) = ''.
            LOOP AT i_esc ASSIGNING FIELD-SYMBOL(<fs_esc>).
              lv_kbetr = <fs_esc>-kbetr.
              IF line_exists( lt_kbetr[ table_line = lv_kbetr ] ).
                " Si se encuentra un duplicado, puedes manejar el error aquí
                o_prog->message( p1 = 'Material' p2 = <carga>-matnr p3 = 'No puede tener repetir el mismo valor de importe' p4 = <fs_esc>-kbetr p5 = 'en escalados' postponer = 'X' ).
                l_error_escalado = 'X'.
              ELSE.
                " Si no es un duplicado, agregar a la tabla hash
                INSERT lv_kbetr INTO TABLE lt_kbetr.
              ENDIF.
            ENDLOOP.

            LOOP AT i_esc ASSIGNING <fs_esc>.
              lv_kstbm = <fs_esc>-kstbm.
              IF line_exists( lt_kstbm[ table_line = lv_kstbm ] ).
                " Si se encuentra un duplicado, puedes manejar el error aquí
                o_prog->message( p1 = 'Material' p2 = <carga>-matnr p3 = 'No puede tener repetir el mismo valor de cantidad de escala' p4 = <fs_esc>-kstbm p5 = 'en escalados' postponer = 'X' ).
                l_error_escalado = 'X'.
              ELSE.
                " Si no es un duplicado, agregar a la tabla hash
                INSERT lv_kstbm INTO TABLE lt_kstbm.
              ENDIF.
            ENDLOOP.

            IF l_error_escalado = 'X'.
              CONTINUE.
            ENDIF.
          ENDIF.

          CLEAR l_msg.
          IF ucomm = 'PRECIO'.
            CLEAR l_new.
            l_tabla = |A{ <carga>-kotabnr }|.
            SELECT SINGLE datab datbi FROM (l_tabla)
              INTO CORRESPONDING FIELDS OF a929
             WHERE knumh = <carga>-knumh.
            IF sy-subrc = 0.
              SELECT SINGLE knumh FROM (l_tabla)
                INTO CORRESPONDING FIELDS OF a929
               WHERE knumh <> <carga>-knumh
                 AND datbi <= <carga>-datab
                 AND datab >= <carga>-datbi.
              IF sy-subrc = 0.
                MESSAGE |No puede ampliar la fecha de validez porque hay otro registro para { <carga>-matnr } { <carga>-kunnr ALPHA = OUT }| TYPE 'I'.
                CONTINUE.
              ENDIF.

              IF <carga>-datab <> a929-datab OR <carga>-datbi <> a929-datbi.
                UPDATE (l_tabla)
                   SET datab = <carga>-datab
                       datbi = <carga>-datbi
                 WHERE knumh = <carga>-knumh.
                IF sy-subrc = 0.
                  UPDATE konh
                     SET datab = <carga>-datab
                         datbi = <carga>-datbi
                   WHERE knumh = <carga>-knumh.
                  IF sy-subrc = 0.
                    COMMIT WORK AND WAIT.
                  ELSE.
                    ROLLBACK WORK.                     "#EC CI_ROLLBACK
                    l_msg = 'Error actualizando fechas'.
                  ENDIF.
                ELSE.
                  l_msg = 'Error actualizando fechas'.
                ENDIF.
              ENDIF.
            ENDIF.
          ELSE.
            NEW zcl_ap_condiciones( )->actualizar_precio( EXPORTING kotabnr = <carga>-kotabnr
                                                                    kschl = <carga>-kschl
                                                                    registro = <registro>
                                                                    datab = <carga>-datab
                                                                    datbi = <carga>-datbi
                                                                    kbetr = l_konp-kbetr
                                                                    kpein = l_konp-kpein
                                                                    escalas = i_esc
                                                          IMPORTING message = l_msg
                                                                    knumh_new = DATA(l_knumh_new) ).
          ENDIF.

          IF NOT l_msg IS INITIAL.
            <carga>-lights = zcl_ap_alv=>set_icono( icono = icon_message_critical mensaje = l_msg ).
          ELSE.
            <carga>-lights = zcl_ap_alv=>set_icono( icono = icon_okay mensaje = 'Se ha actualizado la condición' ).
            COMMIT WORK AND WAIT.

            IF l_new IS INITIAL AND l_knumh_new IS INITIAL.
              <carga>-knumh_new = <carga>-knumh.
            ELSE.
              <carga>-knumh_new = l_knumh_new.
              IF <carga>-knumh_new IS INITIAL.
                <carga>-lights = zcl_ap_alv=>set_icono( icono = icon_warning mensaje = 'No encontramos nuevo registro de condición' ).
              ENDIF.
            ENDIF.

            IF NOT <carga>-knumh_new IS INITIAL AND ucomm = 'PRECIO_OF'.
              CLEAR ztsd0013.
              MOVE-CORRESPONDING <carga> TO ztsd0013.
              ztsd0013-knumh = <carga>-knumh_new.
              ztsd0013-erdat = sy-datum.
              ztsd0013-erzet = sy-uzeit.
              ztsd0013-ernam = sy-uname.
              CLEAR ztsd0013-vbeln.
              MODIFY ztsd0013 FROM ztsd0013.

              APPEND VALUE #( option = 'EQ' sign = 'I' low = ztsd0013-knumh ) TO r_knumh.

            ENDIF.
          ENDIF.
        ENDLOOP.
        set_seleccion( CHANGING t_tabla = i_carga ).
        refresh( refresh_mode = if_salv_c_refresh=>full ).

        IF NOT r_knumh IS INITIAL AND ucomm = 'PRECIO_OF'.
          COMMIT WORK AND WAIT.
          DATA(o_job) = NEW zcl_ap_jobs( jobname = 'CREAR_OFERTAS_CAMBIO_PRECIO' ).

          o_job->abrir( ).

          IF NOT o_job->jobcount IS INITIAL.
            TRY.
                CLEAR o_job->print_parameters-primm.
                SET PARAMETER ID 'Z_NO_VAR_DEF' FIELD 'X'.
                SUBMIT zrsd0051
                  AND RETURN
                       WITH s_knumh IN r_knumh
                       WITH p_ejec = 'X'
                       VIA JOB o_job->jobname NUMBER o_job->jobcount
                       TO SAP-SPOOL SPOOL PARAMETERS o_job->print_parameters WITHOUT SPOOL DYNPRO.

                o_job->cerrar( inmediato = 'X' ).
                IF NOT o_job->message IS INITIAL.
                  MESSAGE o_job->message TYPE 'I'.
                ELSE.
                  MESSAGE 'Se ha lanzado proceso de creación de ofertas en fondo. Espere mail con el resultado' TYPE 'I'.
                ENDIF.
              CATCH cx_root INTO DATA(o_root).              "#EC *
                MESSAGE o_root->get_text( ) TYPE 'I'.
            ENDTRY.
          ELSE.
            MESSAGE o_job->message TYPE 'I'.
          ENDIF.
        ENDIF.

        o_prog->o_log->show_log( ).

      WHEN 'CREAR'.
        LOOP AT i_carga ASSIGNING <carga> WHERE check = 'X'.
          IF        <carga>-lights(3)  = icon_failure(3)
             OR NOT <carga>-vbeln     IS INITIAL.
            MESSAGE 'No seleccione registros con solicitudes de oferta pendientes' TYPE 'I'.
            RETURN.
          ENDIF.
        ENDLOOP.

        LOOP AT i_carga ASSIGNING <carga> WHERE check = 'X'.
          CLEAR ztsd0013.
          MOVE-CORRESPONDING <carga> TO ztsd0013.
          ztsd0013-erdat = sy-datum.
          ztsd0013-erzet = sy-uzeit.
          ztsd0013-ernam = sy-uname.
          MODIFY ztsd0013 FROM ztsd0013.
          <carga>-lights = zcl_ap_alv=>set_icono( icono = icon_failure mensaje = 'Pendiente de crear oferta' ).
        ENDLOOP.
        refresh( refresh_mode = if_salv_c_refresh=>full ).

*      WHEN 'CREARP'.
*        SET PARAMETER ID 'Z_NO_VAR_DEF' FIELD 'X'.
*        DATA r_knumh TYPE RANGE OF knumh.
*        LOOP AT i_carga ASSIGNING <carga> WHERE check = 'X'.
*          IF NOT <carga>-knumh IS INITIAL.
*            APPEND VALUE #( option = 'EQ' sign = 'I' low = <carga>-knumh ) TO r_knumh.
*          ENDIF.
*        ENDLOOP.
*        IF sy-subrc NE 0.
*          SUBMIT zrsd0051
*            AND RETURN
*           VIA SELECTION-SCREEN.
*        ELSE.
*          SUBMIT zrsd0051
*            AND RETURN
*          WITH s_knumh IN r_knumh.
*        ENDIF.
*        SET PARAMETER ID 'Z_NO_VAR_DEF' FIELD ''.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    IF screen-name CP '*S_KUNNR*'.
      screen-active = SWITCH #( rb_prsol WHEN 'X' THEN 1 ELSE 0 ).
    ENDIF.
    IF screen-name CP '*S_KUNWE*'.
      screen-active = SWITCH #( rb_prdes WHEN 'X' THEN 1 ELSE 0 ).
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.

  zcl_ap_dynpro=>screen_visible( group1 = 'CAR' variable = p_carga ).


AT SELECTION-SCREEN ON p_vkorg.
  IF sy-ucomm <> 'RB_PREC'.
    IF p_vkorg IS INITIAL.
      MESSAGE 'Debe indicar la organización de ventas' TYPE 'E'.
    ENDIF.
  ENDIF.


AT SELECTION-SCREEN.
  IF sy-ucomm = 'ONLI'.
    IF p_datab IS INITIAL AND p_datbi IS INITIAL AND p_carga IS INITIAL.
      MESSAGE 'Debe indicar el periodo de validez' TYPE 'E'.
    ENDIF.
  ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_fiche.
  p_fiche = zcl_ap_ficheros=>popup_select_fichero( file_filter = zcl_ap_ficheros=>c_filtro_xlsx ).

START-OF-SELECTION.
  PERFORM f_start_of_selection.

END-OF-SELECTION.
  IF p_carga IS INITIAL.
    PERFORM f_mostrar_alv.
  ELSE.

    DATA(o_alv) = NEW lcl_alv( status             = 'STANDARD_ALV_DYN'
                               status_prog        = 'ZAP_STATUS'
                               color              = 'COLOR'
                               tabla = 'I_CARGA' ).

    o_alv->set_field_quitar( 'CHECK,TABIX' ).
    o_alv->set_field_hotspot( campo = 'VBELN,KNUMH,KNUMH_NEW' auto = 'X' ).
    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_text( campo = 'PROLE' valor = 'Long.prod.' valor2 = 'Longitud producto' ).
    o_alv->set_field_text( campo = 'PROWI' valor = 'Anch.prod.'  valor2 = 'Ancho producto' ).
    o_alv->set_field_text( campo = 'PROHE' valor = 'Alt.prod.' valor2 = 'Altura producto' ).
    o_alv->set_field_text( campo = 'IMPORTE' valor = 'N.Importe' valor2 = 'Nuevo importe' ).
    o_alv->set_field( campo = 'PROLE,PROWI,PROHE' op = 'DECIMALS' valor = '0' ).
    o_alv->set_field( campo = 'IMPORTE,KSTBM' op = 'NO_CERO' ).

    o_alv->add_button( button = 'F01' text = 'Generar plantilla excel'  icon = icon_xls ucomm = 'EXCEL' ).
    o_alv->add_button( button = 'F02' text = 'Importar excel'  icon = icon_import ucomm = 'IMPORT' ).
    o_alv->add_button( button = 'F03' text = 'Nueva tarifa y solicitar oferta'  icon = icon_execute_object ucomm = 'PRECIO_OF' ).
    o_alv->add_button( button = 'F04' text = 'Actualizar fecha de tarifa existente'  icon = icon_change ucomm = 'PRECIO' ).
*    o_alv->add_button( button = 'F04' text = 'Solicitar creación oferta'  icon = icon_system_mark ucomm = 'CREAR' ).
*    o_alv->add_button( button = 'F05' text = 'Creación ofertas'  icon = icon_create ucomm = 'CREARP' ).
    o_alv->show( ).

  ENDIF.

*&---------------------------------------------------------------------*
*&      Form  F_START_OF_SELECTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_start_of_selection.
  TYPES: BEGIN OF t_recargos,
           kschl TYPE kschl,
           werks TYPE a960-werks,
           lgort TYPE a960-zzlgort,
           kbetr TYPE konp-kbetr,
         END OF t_recargos,
         BEGIN OF t_recargosh,
           werks TYPE a960-werks,
           lgort TYPE a960-zzlgort,
           zr01  TYPE konp-kbetr,
           zcmo  TYPE konp-kbetr,
         END OF t_recargosh.

  DATA r_datbi TYPE RANGE OF dats.
  DATA: i_recargos  TYPE TABLE OF t_recargos,
        i_recargosh TYPE TABLE OF t_recargosh,
        i_alv_aux   TYPE STANDARD TABLE OF st_alv WITH DEFAULT KEY. "#EC DEFAULT_KEY.

  DATA(vl_fec_ini_validez) = COND #( WHEN p_datab IS NOT INITIAL THEN p_datab ELSE '00010101' ).
  DATA(vl_fec_fin_validez) = COND #( WHEN p_datbi IS NOT INITIAL THEN p_datbi ELSE vl_fec_ini_validez ).

  IF p_carga = 'X'.
*    r_datbi = VALUE #( ( option = 'EQ' sign = 'I' low = '99991231' ) ).

    IF p_datab IS INITIAL AND p_datbi IS INITIAL.
      CLEAR vl_fec_ini_validez.
      vl_fec_fin_validez = '99991231'.
    ENDIF.
  ENDIF.

  CASE 'X'.
    WHEN rb_prsol.
      DATA(l_kotabnr) = '929'.
      SELECT a929~vkorg, a929~vtweg, a929~kunnr, a929~matnr, a929~inco1, a929~kfrst, a929~datbi, a929~datab, a929~knumh,
             knvv~zzbrsch, t016t~brtxt, mvke~vmsta
        INTO TABLE @DATA(tl_precios)
        FROM a929 INNER JOIN konp ON konp~knumh = a929~knumh
                  INNER JOIN mvke ON  mvke~matnr = a929~matnr
                                  AND mvke~vkorg = a929~vkorg
                                  AND mvke~vtweg = a929~vtweg
                  INNER JOIN knvv ON  knvv~kunnr = a929~kunnr
                                  AND knvv~vkorg = a929~vkorg
                                  AND knvv~vtweg = a929~vtweg
             LEFT OUTER JOIN t016t ON  t016t~brsch = knvv~zzbrsch "#EC CI_BUFFJOIN.
                                   AND t016t~spras = @sy-langu
        WHERE a929~kschl    = 'ZPRC'
          AND a929~vkorg    = @p_vkorg
          AND a929~kunnr   IN @s_kunnr
          AND a929~matnr   IN @s_matnr
          AND a929~datab   <= @vl_fec_fin_validez
          AND a929~datbi   >= @vl_fec_ini_validez
          AND a929~datbi   IN @r_datbi
          AND mvke~vmsta   IN @s_vmsta
          AND knvv~zzbrsch IN @s_brsch.

    WHEN rb_prdes.
      l_kotabnr = '927'.
      SELECT a927~vkorg, a927~vtweg, a927~kunwe AS kunnr, a927~matnr, a927~inco1, a927~kfrst, a927~datbi, a927~datab, a927~knumh,
            knvv~zzbrsch, t016t~brtxt, mvke~vmsta
        INTO CORRESPONDING FIELDS OF TABLE @tl_precios
        FROM a927 INNER JOIN konp ON konp~knumh = a927~knumh
                  INNER JOIN mvke ON  mvke~matnr = a927~matnr
                                  AND mvke~vkorg = a927~vkorg
                                  AND mvke~vtweg = a927~vtweg
                  INNER JOIN knvv ON  knvv~kunnr = a927~kunwe
                                  AND knvv~vkorg = a927~vkorg
                                  AND knvv~vtweg = a927~vtweg
             LEFT OUTER JOIN t016t ON  t016t~brsch = knvv~zzbrsch "#EC CI_BUFFJOIN.
                                   AND t016t~spras = @sy-langu
        WHERE a927~kschl    = 'ZPRC'
          AND a927~vkorg    = @p_vkorg
          AND a927~kunwe   IN @s_kunwe
          AND a927~matnr   IN @s_matnr
          AND a927~datab   <= @vl_fec_fin_validez
          AND a927~datbi   >= @vl_fec_ini_validez
          AND a927~datbi   IN @r_datbi
          AND mvke~vmsta   IN @s_vmsta
          AND knvv~zzbrsch IN @s_brsch.
  ENDCASE.

  IF tl_precios IS INITIAL.
    RETURN.
  ENDIF.

  SORT tl_precios BY vkorg ASCENDING vtweg ASCENDING kunnr ASCENDING matnr ASCENDING inco1 ASCENDING kfrst ASCENDING datbi DESCENDING.
  IF p_carga IS INITIAL.
    DELETE ADJACENT DUPLICATES FROM tl_precios COMPARING vkorg vtweg kunnr matnr inco1 kfrst datbi knumh.
  ELSE.
    DELETE ADJACENT DUPLICATES FROM tl_precios COMPARING vkorg vtweg kunnr matnr inco1 kfrst.
  ENDIF.

  SELECT yhp_idx_td100~cuobj, marc~werks, marc~matnr, makt~maktx,
         yhp_idx_td100~prole, yhp_idx_td100~prowi, yhp_idx_td100~prohe,
         mara~mstae, mara~mstav, marc~mmsta
    INTO TABLE @DATA(tl_td100)
    FROM yhp_idx_td100 INNER JOIN ( marc INNER JOIN mara      ON mara~matnr = marc~matnr
                                         LEFT OUTER JOIN makt ON  makt~matnr = marc~matnr
                                                              AND makt~spras = @sy-langu )
                       ON marc~cuobj = yhp_idx_td100~cuobj
    FOR ALL ENTRIES IN @tl_precios
    WHERE marc~matnr           = @tl_precios-matnr
      AND yhp_idx_td100~prole IN @s_prole
      AND yhp_idx_td100~prowi IN @s_prowi
      AND yhp_idx_td100~prohe IN @s_prohe
      AND marc~werks          IN @s_werks
      AND mara~mstae          IN @s_mstae
      AND mara~mstav          IN @s_mstav
      AND marc~mmsta          IN @s_mmsta.

  IF tl_td100 IS INITIAL.
    RETURN.
  ENDIF.

  SELECT cuobj, mboar, board, flute                "#EC CI_NO_TRANSFORM
    INTO TABLE @DATA(tl_td110)
    FROM yhp_idx_td110
    FOR ALL ENTRIES IN @tl_td100
    WHERE cuobj = @tl_td100-cuobj
      AND mboar = 'S'.

  LOOP AT tl_precios ASSIGNING FIELD-SYMBOL(<fs_precios>).
    IF NOT line_exists( tl_td100[ matnr = <fs_precios>-matnr ] ).
      DELETE tl_precios. CONTINUE.
    ENDIF.
  ENDLOOP.
  IF tl_precios IS INITIAL.
    RETURN.
  ENDIF.

  SELECT knumh, kopos, kbetr, kpein, konwa, kzbzg, loevm_ko
    INTO TABLE @DATA(tl_konp)
    FROM konp
    FOR ALL ENTRIES IN @tl_precios
    WHERE knumh = @tl_precios-knumh.

  SELECT knumh, kopos, klfn1, kstbm, kbetr
    INTO TABLE @DATA(tl_konm)
    FROM konm
    FOR ALL ENTRIES IN @tl_precios
    WHERE knumh = @tl_precios-knumh.

  SELECT vkorg, vtweg, kunnr, matnr, kdmat
    INTO TABLE @DATA(tl_knmt)
    FROM knmt
    FOR ALL ENTRIES IN @tl_precios
    WHERE vkorg = @tl_precios-vkorg
      AND vtweg = @tl_precios-vtweg
      AND kunnr = @tl_precios-kunnr
      AND matnr = @tl_precios-matnr.

  SELECT kna1~kunnr, kna1~name1, kna1~pstlz, kna1~ort01, kna1~regio, t005u~bezei
    INTO TABLE @DATA(tl_kna1)
    FROM kna1 LEFT OUTER JOIN t005u ON  t005u~spras = @sy-langu "#EC *
                                    AND t005u~land1 = kna1~land1
                                    AND t005u~bland = kna1~regio
    FOR ALL ENTRIES IN @tl_precios
    WHERE kunnr = @tl_precios-kunnr.

  LOOP AT tl_precios ASSIGNING <fs_precios>.
    CLEAR wg_alv.
    MOVE-CORRESPONDING <fs_precios> TO wg_alv.

    ASSIGN tl_td100[ matnr = <fs_precios>-matnr ] TO FIELD-SYMBOL(<fs_td100>).
    IF sy-subrc = 0.
      MOVE-CORRESPONDING <fs_td100> TO wg_alv.

      ASSIGN tl_td110[ cuobj = <fs_td100>-cuobj ] TO FIELD-SYMBOL(<fs_td110>).
      IF sy-subrc = 0.
        MOVE-CORRESPONDING <fs_td110> TO wg_alv.
      ENDIF.
    ENDIF.

    ASSIGN tl_kna1[ kunnr = <fs_precios>-kunnr ] TO FIELD-SYMBOL(<fs_kna1>).
    IF sy-subrc = 0.
      MOVE-CORRESPONDING <fs_kna1> TO wg_alv.
      IF rb_prdes = 'X'.
        wg_alv-kunwe = wg_alv-kunnr. CLEAR wg_alv-kunnr.
      ENDIF.
    ENDIF.

    ASSIGN tl_knmt[ vkorg = <fs_precios>-vkorg
                    vtweg = <fs_precios>-vtweg
                    kunnr = <fs_precios>-kunnr
                    matnr = <fs_precios>-matnr ] TO FIELD-SYMBOL(<fs_knmt>).
    IF sy-subrc = 0.
      wg_alv-kdmat = <fs_knmt>-kdmat.
    ENDIF.

    ASSIGN tl_konp[ knumh = <fs_precios>-knumh ] TO FIELD-SYMBOL(<fs_konp>).
    IF sy-subrc = 0.
      IF NOT ( cbx_borr = 'X' OR <fs_konp>-loevm_ko = space ).
        CONTINUE.
      ENDIF.

      MOVE-CORRESPONDING <fs_konp> TO wg_alv.
      IF <fs_konp>-kzbzg = 'C'.
        LOOP AT tl_konm ASSIGNING FIELD-SYMBOL(<fs_konm>) WHERE knumh = <fs_precios>-knumh.
          wg_alv-kopos    = <fs_konm>-kopos.
          wg_alv-klfn1    = <fs_konm>-klfn1.
          wg_alv-kstbm    = <fs_konm>-kstbm.
          wg_alv-kbetr    = <fs_konm>-kbetr.

          wg_alv-imp_zr01 = wg_alv-kbetr.
          APPEND wg_alv TO tg_alv.

        ENDLOOP.
      ELSE.
        wg_alv-imp_zr01 = wg_alv-kbetr.
        APPEND wg_alv TO tg_alv.
      ENDIF.
    ENDIF.
  ENDLOOP.

  IF p_carga = 'X'.
    MOVE-CORRESPONDING tg_alv TO i_carga.
    LOOP AT i_carga ASSIGNING FIELD-SYMBOL(<carga>).
      <carga>-tabix   = sy-tabix.
      <carga>-kotabnr = l_kotabnr.
      <carga>-kschl   = 'ZPRC'.
      IF <carga>-loevm_ko = 'X'.
        <carga>-lights = zcl_ap_alv=>set_icono( icono = icon_equal_green mensaje = 'Condición borrada' ).
        zcl_ap_alv_grid=>append_color( EXPORTING campo = '' colorc = 'R' CHANGING tabla_color = <carga>-color ).
      ENDIF.

*      zcl_ap_alv_grid=>append_color( EXPORTING campo = 'KBETR' colorc = 'AZUL' CHANGING tabla_color = <carga>-color ).
      IF <carga>-kzbzg IS INITIAL.
        zcl_ap_alv_grid=>append_color( EXPORTING campo = 'IMPORTE,DATAB,DATBI,KSTBM,KPEIN' colorc = 'V' CHANGING tabla_color = <carga>-color ).
      ELSE.
        zcl_ap_alv_grid=>append_color( EXPORTING campo = 'IMPORTE,DATAB,DATBI,KSTBM,KPEIN,KNUMH,KSCHL,KZBZG,LOEVM_KO,KOTABNR' colorc = 'V' int = 1 CHANGING tabla_color = <carga>-color ).
        zcl_ap_alv_grid=>append_color( EXPORTING campo = 'KNUMH,KSCHL,KZBZG,LOEVM_KO,KOTABNR,KOPOS,KLFN1' colorc = 'AZUL' CHANGING tabla_color = <carga>-color ).
      ENDIF.
      SELECT vbeln
        FROM ztsd0013                                       "#EC *
        WHERE knumh = @<carga>-knumh
        ORDER BY PRIMARY KEY
        INTO @<carga>-vbeln
        UP TO 1 ROWS.
      ENDSELECT.
      IF sy-subrc = 0.
        IF <carga>-vbeln IS INITIAL.
          <carga>-lights = zcl_ap_alv=>set_icono( icono = icon_failure mensaje = 'Pendiente de crear oferta' ).
        ELSE.
          <carga>-lights = zcl_ap_alv=>set_icono( icono = icon_okay mensaje = 'Oferta creada' ).
        ENDIF.
      ENDIF.
    ENDLOOP.
  ELSE.
* APC20250103 Importe condición ZR01
    IF NOT s_lgort[] IS INITIAL.
      IF rb_prsol = 'X'.
        DATA(tabla) = 'A960'.
      ELSE.
        tabla = 'A962'.
      ENDIF.
      DATA(join) = |{ tabla } AS COND JOIN KONP ON KONP~KNUMH = COND~KNUMH JOIN TVKWZ ON TVKWZ~VKORG = COND~VKORG|.

      LOOP AT tg_alv ASSIGNING FIELD-SYMBOL(<alv>).

        IF rb_prsol = 'X'.
          DATA(where) = |COND~KUNNR = '{ <alv>-kunnr }'|.
        ELSE.
          where = |COND~KUNWE = '{ <alv>-kunwe }'|.
        ENDIF.

        CLEAR: i_recargos, i_recargosh.
        SELECT cond~kschl, cond~werks, zzlgort AS lgort, kbetr FROM (join)
          INTO TABLE @i_recargos
         WHERE cond~kschl IN ( 'ZR01', 'ZCMO' )
           AND cond~vkorg = @<alv>-vkorg
           AND cond~werks = @<alv>-werks
           AND zzlgort IN @s_lgort
           AND matnr = @<alv>-matnr
           AND zzmontaje = 'X'
           AND datab <= @vl_fec_fin_validez
           AND datbi >= @vl_fec_ini_validez
           AND loevm_ko = ''
           AND kbetr <> 0
           AND (where)
         GROUP BY cond~kschl, cond~werks, zzlgort, kbetr.
        IF sy-subrc <> 0.
          CONTINUE.
        ENDIF.

        LOOP AT i_recargos ASSIGNING FIELD-SYMBOL(<rec>).
          ASSIGN i_recargosh[ werks = <rec>-werks
                              lgort = <rec>-lgort ] TO FIELD-SYMBOL(<rech>).
          IF sy-subrc <> 0.
            APPEND INITIAL LINE TO i_recargosh ASSIGNING <rech>.
            <rech>-werks = <rec>-werks.
            <rech>-lgort = <rec>-lgort.
          ENDIF.
          ASSIGN COMPONENT <rec>-kschl OF STRUCTURE <rech> TO FIELD-SYMBOL(<valor>).
          <valor> = <rec>-kbetr.
        ENDLOOP.

        DATA(l_alv) = <alv>.
        LOOP AT i_recargosh ASSIGNING <rech>.
          IF <rech>-zcmo IS INITIAL.
            <rech>-zcmo = <rech>-zr01.
          ENDIF.
          IF sy-tabix = 1.
            MOVE-CORRESPONDING <rech> TO <alv>.
            <alv>-imp_zr01 = <alv>-zr01 + <alv>-kbetr.
          ELSE.
            MOVE-CORRESPONDING <rech> TO l_alv.
            l_alv-imp_zr01 = l_alv-zr01 + l_alv-kbetr.
            APPEND l_alv TO i_alv_aux.
          ENDIF.
        ENDLOOP.
      ENDLOOP.
      IF NOT i_alv_aux IS INITIAL.
        APPEND LINES OF i_alv_aux TO tg_alv.
        SORT tg_alv.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_MOSTRAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_mostrar_alv.
  DATA rl_column TYPE REF TO cl_salv_column_table.

  IF tg_alv IS INITIAL.
    MESSAGE 'No se han encontrado datos' TYPE 'S' DISPLAY LIKE 'W'.
    RETURN.
  ENDIF.

  TRY.
      cl_salv_table=>factory( IMPORTING r_salv_table = rl_alv
                              CHANGING  t_table      = tg_alv ).
    CATCH cx_salv_msg.
      RETURN.
  ENDTRY.

  DATA(wl_key) = VALUE salv_s_layout_key( report = sy-repid ).

  rl_alv->get_layout( )->set_key( wl_key ).
  rl_alv->get_layout( )->set_save_restriction( if_salv_c_layout=>restrict_none ).
  rl_alv->get_layout( )->set_default( abap_true ).
  rl_alv->get_functions( )->set_all( 'X' ).

  DATA(lr_selections) = rl_alv->get_selections( ).
  lr_selections->set_selection_mode( if_salv_c_selection_mode=>row_column ).

  PERFORM add_button IN PROGRAM zap_status USING 'F01' 'Imprimir' icon_print ''.

  rl_alv->set_screen_status(
      report        = 'ZAP_STATUS'
      pfstatus      = 'STANDARD_ALV_DYN'
      set_functions = rl_alv->c_functions_all ).

  DATA(o_events) = rl_alv->get_event( ).
  DATA(lr_event_handler) = NEW lcl_event_handler( ).
  SET HANDLER lr_event_handler->on_user_command   FOR o_events.

  DATA(rl_columns) = rl_alv->get_columns( ).
  rl_columns->set_optimize( ).

  TRY.
      rl_column ?= rl_columns->get_column( 'PROLE' ).
      rl_column->set_short_text( 'Long.prod.' ).
      rl_column->set_medium_text( 'Longitud producto' ).
      rl_column->set_long_text( 'Longitud producto' ).
      rl_column->set_decimals( '0' ).

      rl_column ?= rl_columns->get_column( 'PROWI' ).
      rl_column->set_short_text( 'Anch.prod.' ).
      rl_column->set_medium_text( 'Ancho producto' ).
      rl_column->set_long_text( 'Ancho producto' ).
      rl_column->set_decimals( '0' ).

      rl_column ?= rl_columns->get_column( 'PROHE' ).
      rl_column->set_short_text( 'Alt.prod.' ).
      rl_column->set_medium_text( 'Altura producto' ).
      rl_column->set_long_text( 'Altura producto' ).
      rl_column->set_decimals( '0' ).

      rl_column ?= rl_columns->get_column( 'KNUMH' ).
      rl_column->set_technical( ).
      rl_column ?= rl_columns->get_column( 'KZBZG' ).
      rl_column->set_technical( ).
      rl_column ?= rl_columns->get_column( 'KOPOS' ).
      rl_column->set_technical( ).
      rl_column ?= rl_columns->get_column( 'KLFN1' ).
      rl_column->set_technical( ).

      IF NOT s_lgort[] IS INITIAL.
        rl_column ?= rl_columns->get_column( 'ZR01' ).
        rl_column->set_short_text( ' RecMont' ).
        rl_column->set_medium_text( ' Recargo montaje' ).
        rl_column->set_long_text( ' Recargo montaje' ).

        rl_column ?= rl_columns->get_column( 'IMP_ZR01' ).
        rl_column->set_short_text( 'Imp+RecM.' ).
        rl_column->set_medium_text( 'Imp.+Rec.montaje' ).
        rl_column->set_long_text( 'Importe + Recargo montaje' ).

        rl_column ?= rl_columns->get_column( 'ZCMO' ).
        rl_column->set_short_text( ' CstMont' ).
        rl_column->set_medium_text( ' Coste Montaje' ).
        rl_column->set_long_text( ' Coste Montaje' ).

      ELSE.
        rl_column ?= rl_columns->get_column( 'ZR01' ).
        rl_column->set_technical( ).
*        rl_column ?= rl_columns->get_column( 'WERKS' ).
*        rl_column->set_technical( ).
        rl_column ?= rl_columns->get_column( 'LGORT' ).
        rl_column->set_technical( ).
        rl_column ?= rl_columns->get_column( 'IMP_ZR01' ).
        rl_column->set_technical( ).
        rl_column ?= rl_columns->get_column( 'ZCMO' ).
        rl_column->set_technical( ).
      ENDIF.

    CATCH cx_salv_not_found INTO DATA(o_alv).
      MESSAGE o_alv->get_text( ) TYPE 'I'.
  ENDTRY.
  rl_alv->display( ).
ENDFORM.




CLASS lcl_event_handler IMPLEMENTATION.

  METHOD on_user_command.
    DATA: i_sel TYPE TABLE OF st_alv.
    DATA(lo_selections) = rl_alv->get_selections( ).
    DATA(lt_rows) = lo_selections->get_selected_rows( ).

    LOOP AT lt_rows INTO DATA(ls_rows).
      READ TABLE tg_alv INTO DATA(alv) INDEX ls_rows.
      IF sy-subrc = 0.
        APPEND alv TO i_sel.
      ENDIF.
    ENDLOOP.
    IF i_sel IS INITIAL.
      MESSAGE 'No ha seleccionado nada' TYPE 'I'.
      RETURN.
    ENDIF.

    CASE e_salv_function.
      WHEN 'F01'.
        DATA: vl_retcode TYPE sy-subrc,
              vl_pdf     TYPE xstring.
        DATA vl_kunnr TYPE vbak-kunnr.

        DATA tl_vbeln TYPE wtysc_vbeln_tab.
        DATA: tl_posiciones TYPE zssdf_oferta_t_posiciones,
              tl_vbap       TYPE TABLE OF vbap.
        DATA: vbco3   TYPE vbco3,
              vbdkl	  TYPE vbdkl,
              tvbdpl  TYPE TABLE OF vbdpl,
              l_kunnr TYPE kunnr,
              l_vbak  TYPE vbak.

* Buscamos la última posición de pedido de ese material cliente.
        LOOP AT i_sel ASSIGNING FIELD-SYMBOL(<sel>).
          IF NOT l_kunnr IS INITIAL.
            IF l_kunnr NE <sel>-kunnr.
              MESSAGE 'Todas las posiciones han de ser del mismo cliente' TYPE 'I'.
              RETURN.
            ENDIF.
          ENDIF.
          l_kunnr = <sel>-kunnr.
          SELECT vbap~* FROM vbap JOIN vbak ON vbak~vbeln = vbap~vbeln
            INTO @DATA(l_vbap)
            UP TO 1 ROWS
           WHERE kunnr = @<sel>-kunnr
             AND matnr = @<sel>-matnr
          ORDER BY vbap~erdat DESCENDING.
          ENDSELECT.
          IF sy-subrc = 0.
            IF l_vbak IS INITIAL.
              SELECT SINGLE * FROM vbak
                INTO l_vbak
               WHERE vbeln = l_vbap-vbeln.
            ENDIF.
            l_vbap-netpr = <sel>-kbetr.
            IF NOT <sel>-klfn1 IS INITIAL.
              IF <sel>-kstbm IS INITIAL.
                l_vbap-kwmeng =  <sel>-kpein.
              ELSE.
                l_vbap-kwmeng =  <sel>-kstbm.
              ENDIF.
            ELSE.
              l_vbap-kwmeng = <sel>-kpein.
            ENDIF.
            IF NOT <sel>-kdmat IS INITIAL.
              l_vbap-arktx = <sel>-kdmat.
            ENDIF.
            l_vbap-vrkme = <sel>-konwa.
            APPEND l_vbap TO tl_vbap.
          ELSE.
            SELECT * FROM vbap
              INTO l_vbap
              UP TO 1 ROWS
             WHERE matnr = <sel>-matnr
              ORDER BY vbap~erdat DESCENDING.
            ENDSELECT.
            IF sy-subrc = 0.
              l_vbap-netpr = <sel>-kbetr.
              IF NOT <sel>-klfn1 IS INITIAL.
                l_vbap-kwmeng =  <sel>-kstbm.
              ELSE.
                l_vbap-kwmeng = <sel>-kpein.
              ENDIF.
              l_vbap-vrkme = <sel>-konwa.
              IF NOT <sel>-kdmat IS INITIAL.
                l_vbap-arktx = <sel>-kdmat.
              ENDIF.
              APPEND l_vbap TO tl_vbap.
            ELSE.
              CLEAR l_vbap.
              MOVE-CORRESPONDING <sel> TO l_vbap.
              IF NOT <sel>-kdmat IS INITIAL.
                l_vbap-arktx = <sel>-kdmat.
              ELSE.
                l_vbap-arktx = <sel>-maktx.
              ENDIF.
              l_vbap-netpr = <sel>-kbetr.
              IF NOT <sel>-klfn1 IS INITIAL.
                l_vbap-kwmeng =  <sel>-kstbm.
              ELSE.
                l_vbap-kwmeng = <sel>-kpein.
              ENDIF.
              l_vbap-vrkme = <sel>-konwa.
              SELECT SINGLE cuobj FROM marc
                INTO l_vbap-cuobj
               WHERE matnr = <sel>-matnr
                 AND werks = <sel>-werks.
              APPEND l_vbap TO tl_vbap.
            ENDIF.
          ENDIF.
        ENDLOOP.

        IF l_vbak IS INITIAL .
          SELECT * FROM vbak
            INTO l_vbak
            UP TO 1 ROWS
           WHERE kunnr = l_kunnr
            ORDER BY erdat DESCENDING.
          ENDSELECT.

        ENDIF.

        DATA gv_fm_name        TYPE        rs38l_fnam.
        DATA gv_interface_type TYPE        fpinterfacetype.
        CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'
          EXPORTING
            i_name           = 'ZSSDF_OFERTA'
          IMPORTING
            e_funcname       = gv_fm_name
            e_interface_type = gv_interface_type.


        DATA gv_fp_outputparams TYPE  sfpoutputparams.
        gv_fp_outputparams-dest     = 'PDF'. "Depends on user settings
        gv_fp_outputparams-nodialog = abap_true.
        gv_fp_outputparams-preview  = abap_false.
        gv_fp_outputparams-getpdf   = 'X'.
        gv_fp_outputparams-reqnew   = abap_true.


        CALL FUNCTION 'FP_JOB_OPEN'
          CHANGING
            ie_outputparams = gv_fp_outputparams
          EXCEPTIONS
            cancel          = 1
            usage_error     = 2
            system_error    = 3
            internal_error  = 4
            OTHERS          = 5.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.

        DATA: gv_fp_docparams     TYPE sfpdocparams.
        gv_fp_docparams-langu     = sy-langu.
*        gv_fp_docparams-replangu1 = vbdkl-spras_vko.     "sales org language
*        gv_fp_docparams-replangu2 = 'E'.
*        gv_fp_docparams-country   = vbdkl-land1.


        SET COUNTRY vbdkl-land1.

        CLEAR: l_vbak-bnddt.
        l_vbak-angdt = '99991231'.
        LOOP AT i_sel ASSIGNING <sel>.
          IF <sel>-datab < l_vbak-angdt.
            l_vbak-angdt = <sel>-datab.
          ENDIF.
          IF <sel>-datbi > l_vbak-bnddt.
            l_vbak-bnddt = <sel>-datbi.
          ENDIF.
        ENDLOOP.

        DATA: ls_pdf_file  TYPE fpformoutput.
        CALL FUNCTION gv_fm_name
          EXPORTING
            /1bcdwb/docparams  = gv_fp_docparams
            vbeln              = l_vbak-vbeln
            tp_vbap            = tl_vbap
            simulacion         = 'X'
            vbak               = l_vbak
          IMPORTING                                             "EHP5
            /1bcdwb/formoutput = ls_pdf_file                    "EHP5
          EXCEPTIONS
            usage_error        = 1
            system_error       = 2
            internal_error     = 3
            OTHERS             = 4.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.


        CALL FUNCTION 'FP_JOB_CLOSE'
          EXCEPTIONS
            usage_error    = 1
            system_error   = 2
            internal_error = 3
            OTHERS         = 4.

        SET COUNTRY space.


        IF ls_pdf_file-pdf IS NOT INITIAL.
          CALL FUNCTION 'Z_SEIS_MOSTRAR_PDF'
            EXPORTING
              iv_content = ls_pdf_file-pdf.
        ENDIF.


    ENDCASE.

  ENDMETHOD.

  METHOD on_link_click.

    CASE column.
      WHEN ''.
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.

ENDCLASS.
