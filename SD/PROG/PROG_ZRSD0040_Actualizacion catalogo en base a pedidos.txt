***********************************************************************
* TIPO : LISTADO
* TITULO : Actualización catálogo en base a pedidos
* DESCRIPCION : Actualización catálogo en base a pedidos
*
* AUTOR: Andrés Picazo                                FECHA: 03/06/2024
* ANALISTA: Alfredo García
*
***********************************************************************
REPORT zrsd0040.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: vbak, vbap, mara.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.

ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check        TYPE xfeld,
             lights       TYPE zico_estado_mensaje,
             kunnr        TYPE vbak-kunnr,
             kunnr_nombre TYPE kunnr_kh,
             vkorg        TYPE knvp-vkorg,
             vtweg        TYPE knvp-vtweg,
             spart        TYPE knvp-spart,
             vbeln        TYPE vbap-vbeln,
             auart        TYPE vbak-auart,
             ernam        TYPE vbak-ernam,
             erdat        TYPE vbak-erdat,
             posnr        TYPE vbap-posnr,
             matnr        TYPE vbap-matnr,
             arktx        TYPE vbap-arktx,
             mtart        TYPE mara-mtart,
             kwmeng       TYPE vbap-kwmeng,
             vrkme        TYPE vbap-vrkme,
             datab        TYPE kotg933-datab,
             datbi        TYPE kotg933-datbi,
             message      TYPE bapi_msg,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos.

    METHODS crear_condicion
      CHANGING !list TYPE t_listado.
ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA: o_prog          TYPE REF TO zcl_report,
      zst_sd_catalogo TYPE zst_sd_catalogo,
      kna1            TYPE kna1.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_kunnr FOR vbak-kunnr,
                s_vkorg FOR vbak-vkorg,
                s_vtweg FOR vbak-vtweg,
                s_spart FOR vbak-spart,
                s_ernam FOR vbak-ernam,
                s_erdat FOR vbak-erdat,
                s_vbeln FOR vbak-vbeln,
                s_auart FOR vbak-auart,
                s_matnr FOR vbap-matnr,
                s_mtart FOR mara-mtart.
SELECTION-SCREEN SKIP.
PARAMETERS: p_sinc  AS CHECKBOX DEFAULT 'X',
            p_solou AS CHECKBOX DEFAULT 'X'.
SELECTION-SCREEN END OF BLOCK b01.
SELECTION-SCREEN BEGIN OF BLOCK b03 WITH FRAME.
PARAMETERS: p_ejec AS CHECKBOX,
            p_log  TYPE zlog-proceso NO-DISPLAY.
SELECTION-SCREEN SKIP.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b03.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA l_list TYPE o_prog->t_listado.
    DATA o_bi   TYPE REF TO zcl_ap_batch_input.

    l_list = list.
    CASE column.
      WHEN 'KUNNR'.
        o_bi = NEW #( ).

        o_bi->inicio( ).

        o_bi->dynpro( program = 'SAPMV13G' dynpro = '0100' okcode = '/00' ).
        o_bi->campos( campo = 'G000-KSCHL' valor = 'ZA01' ). " Clase de lista/exclusión de materiales

        o_bi->dynpro( program = 'SAPLV14A' dynpro = '0100' okcode = '=WEIT' ).
        o_bi->campos( campo = 'RV130-SELKZ(01)' valor = '' ). " Indicador de selección en dynpros de lista
        o_bi->campos( campo = 'RV130-SELKZ(02)' valor = 'X' ). " Indicador de selección en dynpros de lista

* SEL_SCREEN 1000 INFO:170000350000000000000000000124929691540
        o_bi->dynpro( program = 'RV13G933' dynpro = '1000' okcode = '=ONLI' ).
        o_bi->campos( campo = 'F001' valor = l_list-vkorg ).
        o_bi->campos( campo = 'F002' valor = l_list-vtweg ).
        o_bi->campos( campo = 'F003' valor = l_list-spart ).
        o_bi->campos( campo = 'F004' valor = l_list-kunnr ).
        o_bi->campos( campo = 'SEL_DATE' valor = l_list-datab ).
*        o_bi->campos( campo = 'F005-LOW' valor = list-matnr ).

        o_bi->llamar_transaccion( tcode = 'VB03' modo = 'E' ).
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    check_ucomm_sel = 'EJEC'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'EJEC'.
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
          o_prog->crear_condicion( CHANGING list = <listado> ).
        ENDLOOP.
        IF sy-subrc = 0.
          refresh( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).

    IF p_ejec = 'X'.
      CLEAR cont.
      LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
        crear_condicion( CHANGING list = <listado> ).
        ADD 1 TO cont.
      ENDLOOP.
      IF NOT p_log IS INITIAL.
        IF cont = 0.
          IF sy-uname NE 'WF-BATCH' AND sy-uname NE 'SAP-WFRT'.
            IF NOT s_vbeln[] IS INITIAL.
              DATA(l_clave) = s_vbeln[ 1 ]-low.
            ENDIF.
            zcl_ap_log=>set_log( proceso = p_log clave = l_clave p1 = |No se requieren modificaciones en catálogo | msgty = 'S' ).
          ENDIF.
        ENDIF.
        LEAVE PROGRAM.
      ENDIF.
    ENDIF.
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    sgpi_texto( 'Seleccionando datos'(sda) ).

    SELECT vbak~kunnr, vbak~vkorg, vbak~vtweg, vbak~spart, vbak~vbeln, vbak~ernam, vbak~erdat, vbak~auart,
           kna1~name1 AS kunnr_nombre,
           vbap~posnr, vbap~matnr, vbap~arktx,
           mara~mtart,
           kotg933~datbi, kotg933~datab
      FROM vbak JOIN vbap ON vbak~vbeln = vbap~vbeln
                JOIN kna1 ON kna1~kunnr = vbak~kunnr
                JOIN mara ON mara~matnr = vbap~matnr
      LEFT OUTER JOIN kotg933 ON  kotg933~kunnr  = vbak~kunnr "#EC CI_BUFFJOIN.
                              AND kotg933~vkorg  = vbak~vkorg
                              AND kotg933~vtweg  = vbak~vtweg
                              AND kotg933~spart  = vbak~spart
                              AND kotg933~matnr  = vbap~matnr
                              AND kotg933~kappl  = 'V'
                              AND kotg933~kschl  = 'ZA01'
                              AND kotg933~datbi >= @sy-datum
                              AND kotg933~datab <= @sy-datum
      INTO CORRESPONDING FIELDS OF TABLE @i_listado
      WHERE vbak~kunnr IN @s_kunnr
        AND vbak~vbtyp = 'C'
        AND vbak~auart IN @s_auart
        AND vbak~vkorg IN @s_vkorg
        AND vbak~vtweg IN @s_vtweg
        AND vbak~spart IN @s_spart
        AND vbak~ernam IN @s_ernam
        AND vbak~erdat IN @s_erdat
        AND vbak~vbeln IN @s_vbeln
        AND vbap~matnr IN @s_matnr
     ORDER BY vbak~kunnr, vbak~vkorg, vbak~vtweg, vbak~spart, vbak~vbeln, vbap~posnr.

    IF p_sinc = 'X'.
      DELETE i_listado WHERE NOT datbi IS INITIAL.
    ENDIF.

    IF p_solou = 'X'.
      DATA: i_matcli TYPE TABLE OF t_listado,
            l_matcli TYPE t_listado.

      SORT i_listado BY erdat DESCENDING.
      LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
        l_matcli-matnr = <listado>-matnr.
        l_matcli-kunnr = <listado>-kunnr.
        l_matcli-vkorg = <listado>-vkorg.
        l_matcli-vtweg = <listado>-vtweg.
        l_matcli-spart = <listado>-spart.
        l_matcli-kwmeng = 1.
        COLLECT l_matcli INTO i_matcli.
      ENDLOOP.
      LOOP AT i_matcli INTO l_matcli WHERE kwmeng > 1.
        DATA(l_cont) = 0.
        LOOP AT i_listado TRANSPORTING NO FIELDS WHERE matnr = l_matcli-matnr
        AND kunnr = l_matcli-kunnr
          AND vkorg = l_matcli-vkorg
          AND vtweg = l_matcli-vtweg
          AND spart = l_matcli-spart.
          IF l_cont > 0.
            DELETE i_listado.
          ENDIF.
          ADD 1 TO l_cont.
        ENDLOOP.
      ENDLOOP.
      SORT i_listado BY kunnr vkorg vtweg spart vbeln posnr.
    ENDIF.


    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING <listado>.
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

      IF <listado>-datbi IS INITIAL.
        DATA(l_icono) = icon_yellow_light.
        <listado>-check = p_ejec.
      ELSE.
        l_icono = icon_green_light.
      ENDIF.

      set_status_list( EXPORTING message = <listado>-message icono = l_icono CHANGING list = <listado> ).
    ENDLOOP.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Grabar condición'  icon = icon_execute_object ucomm = 'EJEC' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page(
*    i_param = VALUE #( ( tipo = 'R' param = 'S_CREDAT' texto = 'F.Creación IDOC' tabla = '' campo = '' )
                          ).

    o_alv->set_field_hotspot( campo = 'KUNNR,VBELN' auto = 'X' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK' ).

    o_alv->set_orden( '' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.

  METHOD crear_condicion.
    DATA o_bi TYPE REF TO zcl_ap_batch_input.

    IF NOT list-datbi IS INITIAL.
      RETURN.
    ENDIF.

    SELECT datbi, datab
      FROM kotg933
      INTO CORRESPONDING FIELDS OF @list
      UP TO 1 ROWS
      WHERE kunnr = @list-kunnr
        AND vkorg = @list-vkorg
        AND vtweg = @list-vtweg
        AND spart = @list-spart
        AND matnr = @list-matnr
        AND kappl = 'V'
        AND kschl = 'ZA01'
        AND datbi >= @sy-datum
        AND datab <= @sy-datum
      ORDER BY PRIMARY KEY.
    ENDSELECT.
    IF sy-subrc = 0.
      list-message = 'Ya existe la condición'.
      list-lights  = zcl_ap_alv=>set_icono( icono = icon_green_light mensaje = list-message ).
      RETURN.
    ENDIF.

    o_bi = NEW #( ).

    o_bi->inicio( ).

    o_bi->dynpro( program = 'SAPMV13G' dynpro = '0100' okcode = '/00' ).
    o_bi->campos( campo = 'G000-KSCHL' valor = 'ZA01' ). " Clase de lista/exclusión de materiales

    o_bi->dynpro( program = 'SAPLV14A' dynpro = '0100' okcode = '=WEIT' ).
    o_bi->campos( campo = 'RV130-SELKZ(01)' valor = '' ). " Indicador de selección en dynpros de lista
    o_bi->campos( campo = 'RV130-SELKZ(02)' valor = 'X' ). " Indicador de selección en dynpros de lista

* SEL_SCREEN 1000 INFO:170000350000000000000000000124929691540
    o_bi->dynpro( program = 'RV13G933' dynpro = '1000' okcode = '=ONLI' ).
    o_bi->campos( campo = 'F001' valor = list-vkorg ).
    o_bi->campos( campo = 'F002' valor = list-vtweg ).
    o_bi->campos( campo = 'F003' valor = list-spart ).
    o_bi->campos( campo = 'F004' valor = list-kunnr ).
    o_bi->campos( campo = 'F005-LOW' valor = list-matnr ).
    o_bi->campos( campo = 'SEL_DATE' valor = list-erdat ).

    o_bi->dynpro( program = 'SAPMV13G' dynpro = '1933' okcode = '=SICH' ).
    o_bi->campos( campo = 'KOMGG-MATNR(01)' valor = list-matnr ).
    list-message = o_bi->llamar_transaccion( tcode = 'VB02' modo = modo_ct ).

    SELECT datbi, datab
      FROM kotg933
      INTO CORRESPONDING FIELDS OF @list
      UP TO 1 ROWS
      WHERE kunnr = @list-kunnr
        AND vkorg = @list-vkorg
        AND vtweg = @list-vtweg
        AND spart = @list-spart
        AND matnr = @list-matnr
        AND kappl = 'V'
        AND kschl = 'ZA01'
        AND datbi >= @sy-datum
        AND datab <= @sy-datum
      ORDER BY PRIMARY KEY.
    ENDSELECT.
    IF sy-subrc = 0.
      IF NOT p_log IS INITIAL.
        zcl_ap_log=>set_log( proceso = p_log clave = list-vbeln p1 = |Se ha creado la condición ZA01 { list-kunnr ALPHA = OUT } { list-matnr ALPHA = OUT } en el catálogo| msgty = 'S' ).
      ENDIF.
      list-message = 'Ya existe la condición'.
      list-lights  = zcl_ap_alv=>set_icono( icono = icon_green_light mensaje = list-message ).
      LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE     kunnr  = list-kunnr
                                                                AND vkorg  = list-vkorg
                                                                AND vtweg  = list-vtweg
                                                                AND spart  = list-spart
                                                                AND matnr  = list-matnr
                                                                AND vbeln <> list-vbeln.
        <listado>-message = list-message.
        <listado>-lights  = list-lights.
        <listado>-datbi   = list-datbi.
        <listado>-datab   = list-datab.
      ENDLOOP.
    ELSE.
      list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
      IF NOT p_log IS INITIAL.
        zcl_ap_log=>set_log( proceso = p_log clave = list-vbeln p1 = |Error { list-message } creando la condición ZA01 { list-kunnr ALPHA = OUT } { list-matnr ALPHA = OUT } en el catálogo| msgty = 'S' ).
      ENDIF.

    ENDIF.
  ENDMETHOD.

ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Backoffice por defecto' '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         o_dev              = o_prog ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  s_erdat[] = VALUE #( ( option = 'GT' sign = 'I' low = sy-datum - 30 ) ).
  s_mtart[] = zcl_mm_material_master=>s_get_mtarts_ramo( 'ZMM_PT_CARTON' ).
  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN OUTPUT.




AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'M01'.
      zcl_ap_parametros=>mantenimiento_st( clave = 'CORE_BODEF' ).
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

  IF p_ejec = 'X' AND NOT s_vbeln[] IS INITIAL AND NOT p_log IS INITIAL.
    DATA(l_clave) = s_vbeln[ 1 ]-low.
    IF zcl_ap_utils=>bloquear_programa( cprog = 'ZRSD0040' && l_clave intentos = 1 espera = 0 ).
      zcl_ap_log=>set_log( proceso = p_log clave = l_clave p1 = 'Existe bloqueo. Salimos' ).
    ENDIF.
  ENDIF.

  o_prog->main( ).
