*&---------------------------------------------------------------------*
*& Report  ZRSD0030
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zrsd0030.

TABLES: likp.

SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-t01.
SELECT-OPTIONS: s_vstel   FOR likp-vstel,
                s_wadati  FOR likp-wadat_ist.
SELECTION-SCREEN END OF BLOCK b01.


SELECTION-SCREEN BEGIN OF BLOCK b02 WITH FRAME TITLE text-t02.
PARAMETERS cbx_item TYPE mv50l-posda AS CHECKBOX.
PARAMETERS p_vari   TYPE slis_vari.
SELECTION-SCREEN END OF BLOCK b02.

SELECTION-SCREEN BEGIN OF BLOCK b03 WITH FRAME TITLE text-t03.
PARAMETERS p_dir    TYPE text255.
PARAMETERS p_file   TYPE ddfilename OBLIGATORY.

SELECTION-SCREEN COMMENT /05(70) text-c01.

SELECTION-SCREEN END OF BLOCK b03.

SELECTION-SCREEN BEGIN OF BLOCK blk3 WITH FRAME TITLE text-b03.
PARAMETERS: p_dftp TYPE text50,
            p_user TYPE text50,
            p_pass TYPE text50,
            p_ruta TYPE text255.
SELECTION-SCREEN END OF BLOCK blk3.



AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    IF screen-name = 'P_PASS'.
      screen-invisible = '1'.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.



START-OF-SELECTION.
  PERFORM f_start_of_selection.




*&---------------------------------------------------------------------*
*&      Form  F_START_OF_SELECTION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_start_of_selection .

  "Variante
  DATA: wl_varkey     TYPE ltdxkey,
        tl_dbfieldcat TYPE TABLE OF ltdxdata.


  IF p_vari IS NOT INITIAL.
    wl_varkey-report = 'SAPLV50Q'.
    wl_varkey-handle    = SWITCH #( cbx_item WHEN space THEN 'F1K' ELSE 'F1P' ).
    wl_varkey-log_group = '6'.
    wl_varkey-username  = space.
    wl_varkey-variant   = p_vari.
    wl_varkey-type      = 'F'.
    CALL FUNCTION 'LT_DBDATA_READ_FROM_LTDX'
      EXPORTING
        i_tool       = 'LT'
        is_varkey    = wl_varkey
      TABLES
        t_dbfieldcat = tl_dbfieldcat
      EXCEPTIONS
        not_found    = 1
        wrong_relid  = 2
        OTHERS       = 3.

    DELETE tl_dbfieldcat WHERE param <> 'NO_OUT'.
    DELETE tl_dbfieldcat WHERE value = 'X'.
  ENDIF.




  "Prepare
  cl_salv_bs_runtime_info=>set(
    EXPORTING display  = abap_false
              metadata = abap_true
              data     = abap_true ).


  "Llamada
  EXPORT cattaktiv = 'X' TO MEMORY ID 'CATT'.  "50A
  SUBMIT ws_monitor_outb_del_free WITH if_vstel IN s_vstel
                                  WITH it_wtist IN s_wadati
                                  WITH if_item  = cbx_item
                                  AND RETURN.
  FREE MEMORY ID 'CATT'.  "50A

  DO 20 TIMES.
    WAIT UP TO 1 SECONDS.
  ENDDO.

  "Get ALV data
  DATA rl_data TYPE REF TO data.
  FIELD-SYMBOLS: <tl_alv> TYPE STANDARD TABLE.



  TRY.
      DATA(wl_metadata) = cl_salv_bs_runtime_info=>get_metadata( ).
      cl_salv_bs_runtime_info=>get_data_ref( IMPORTING r_data =  rl_data ).
      ASSIGN rl_data->* TO <tl_alv>.

    CATCH cx_salv_bs_sc_runtime_info.
      MESSAGE 'Error al recuperar datos de ALV' TYPE 'E'.
  ENDTRY.
  DELETE wl_metadata-t_fcat WHERE tech = 'X'.

  IF tl_dbfieldcat IS INITIAL.
    DELETE wl_metadata-t_fcat WHERE no_out = 'X'.
    LOOP AT wl_metadata-t_fcat ASSIGNING FIELD-SYMBOL(<fs_fieldcat>).
      APPEND INITIAL LINE TO tl_dbfieldcat ASSIGNING FIELD-SYMBOL(<fs_dbfieldcat>).
      <fs_dbfieldcat>-key1 = <fs_fieldcat>-fieldname.
    ENDLOOP.
  ENDIF.


  DATA: tl_csv TYPE TABLE OF string.
  DATA: vl_csv TYPE string.

  "Cabecera del CSV
  LOOP AT tl_dbfieldcat ASSIGNING <fs_dbfieldcat>.
    "Comprobamos que el campo esté en la variante
    READ TABLE wl_metadata-t_fcat ASSIGNING <fs_fieldcat> WITH KEY fieldname = <fs_dbfieldcat>-key1.
    CHECK sy-subrc = 0.

    IF vl_csv IS INITIAL.
      vl_csv = <fs_fieldcat>-reptext.
    ELSE.
      CONCATENATE vl_csv <fs_fieldcat>-reptext INTO vl_csv SEPARATED BY cl_abap_char_utilities=>horizontal_tab.
    ENDIF.
  ENDLOOP.
  APPEND vl_csv TO tl_csv.

  "Lineas del CSV
  DATA vl_campo TYPE string.
  IF <tl_alv> IS ASSIGNED.
    LOOP AT <tl_alv> ASSIGNING FIELD-SYMBOL(<fs_alv>).
      CLEAR vl_csv.
      LOOP AT tl_dbfieldcat ASSIGNING <fs_dbfieldcat>.
        READ TABLE wl_metadata-t_fcat ASSIGNING <fs_fieldcat> WITH KEY fieldname = <fs_dbfieldcat>-key1.
        CHECK sy-subrc = 0.

        ASSIGN COMPONENT <fs_fieldcat>-fieldname OF STRUCTURE <fs_alv> TO FIELD-SYMBOL(<fs_campo>).
        CHECK sy-subrc = 0.
        vl_campo = <fs_campo>.

        IF vl_csv IS INITIAL.
          vl_csv = vl_campo.
        ELSE.
          CONCATENATE vl_csv vl_campo INTO vl_csv SEPARATED BY cl_abap_char_utilities=>horizontal_tab.
        ENDIF.
      ENDLOOP.

      APPEND vl_csv TO tl_csv.
    ENDLOOP.
  ENDIF.

  cl_salv_bs_runtime_info=>clear_all( ).


*  CALL FUNCTION 'GUI_DOWNLOAD'
*    EXPORTING
*      filename                = 'C:\TEMP\PRUEBA.CSV'
*    TABLES
*      data_tab                = tl_csv
*    EXCEPTIONS
*      file_write_error        = 1
*      no_batch                = 2
*      gui_refuse_filetransfer = 3
*      invalid_type            = 4
*      no_authority            = 5
*      unknown_error           = 6
*      header_not_allowed      = 7
*      separator_not_allowed   = 8
*      filesize_not_allowed    = 9
*      header_too_long         = 10
*      dp_error_create         = 11
*      dp_error_send           = 12
*      dp_error_write          = 13
*      unknown_dp_error        = 14
*      access_denied           = 15
*      dp_out_of_memory        = 16
*      disk_full               = 17
*      dp_timeout              = 18
*      file_not_found          = 19
*      dataprovider_exception  = 20
*      control_flush_error     = 21
*      OTHERS                  = 22.


  "Grabar fichero en ruta AL11
  DATA vl_path TYPE string.


*  SELECT SINGLE aliass, dirname
*    INTO @DATA(wl_user_dir)
*    FROM user_dir
*    WHERE aliass = @p_alias.
*  IF sy-subrc <> 0.
*    MESSAGE |No se ha encontrado el alias de directorio { p_alias } para la transación AL11| TYPE 'E'.
*  ENDIF.
*  vl_path = |{ wl_user_dir-dirname }/{ p_file }|.


  "Añadimos la fecha en el nombre del fichero
  DATA vl_date_external TYPE text20.
  DATA tl_fichero_split TYPE TABLE OF string.
  DATA vl_file TYPE string.

  vl_file = p_file.
  IF s_wadati-low IS NOT INITIAL.
    CALL FUNCTION 'CONVERT_DATE_TO_EXTERNAL'
      EXPORTING
        date_internal            = s_wadati-low
      IMPORTING
        date_external            = vl_date_external
      EXCEPTIONS
        date_internal_is_invalid = 1
        OTHERS                   = 2.
    SPLIT vl_file AT '.' INTO TABLE tl_fichero_split.

    IF lines( tl_fichero_split ) = 1.
      APPEND vl_date_external TO tl_fichero_split.
    ELSEIF lines( tl_fichero_split ) > 0.
      "Entendemos que la última es la extensión
      DATA(vl_idx_penultimo_token) = lines( tl_fichero_split ) - 1.
      READ TABLE tl_fichero_split ASSIGNING FIELD-SYMBOL(<fs_penultimo_token>) INDEX vl_idx_penultimo_token.
      IF sy-subrc = 0.
        <fs_penultimo_token> = <fs_penultimo_token> && '_' && vl_date_external.
      ENDIF.
    ENDIF.

    CONCATENATE LINES OF tl_fichero_split INTO vl_file SEPARATED BY '.'.
  ENDIF.

  IF p_dir IS NOT INITIAL.

    vl_path = |{ p_dir }/{ vl_file }|.


    OPEN DATASET vl_path FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
    LOOP AT tl_csv ASSIGNING FIELD-SYMBOL(<fs_csv>).
      TRANSFER <fs_csv> TO vl_path.
    ENDLOOP.
    CLOSE DATASET vl_path.

    MESSAGE |Fichero { vl_path } generado correctamente| TYPE 'S'.

  ENDIF.

  DATA: vl_fichero_final TYPE string.
  IF p_dftp IS NOT INITIAL.
    NEW zcl_ap_ftp( )->grabar_fichero( EXPORTING user     = p_user
                                                 password = p_pass
                                                 host     = p_dftp
                                                 directorio = p_ruta
                                                 fichero    = vl_file
                                                 i_tabla    = tl_csv
                                       IMPORTING message = DATA(vl_msg)
                                                 fichero_final = vl_fichero_final ).
    IF vl_msg IS NOT INITIAL.
      MESSAGE vl_msg TYPE 'I'.
    ELSE.
      MESSAGE |Fichero { vl_fichero_final } grabado en FTP| TYPE 'S'.
    ENDIF.
  ENDIF.


ENDFORM.
