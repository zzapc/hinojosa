*&---------------------------------------------------------------------*
*&  Include           ZRSD0021_MOD
*&---------------------------------------------------------------------*

MODULE status_100 OUTPUT.
  SET PF-STATUS '100'.
  SET TITLEBAR '10'.

  g_werks = zcl_utils_hpap_pp=>get_werks_from_user( ).

ENDMODULE.

MODULE status_101 OUTPUT.
  SET PF-STATUS '100'.
  SET TITLEBAR '10'.

  g_werks = zcl_utils_hpap_pp=>get_werks_from_user( ).

  CLEAR gt_clientes[].

  CALL METHOD zclpp_app_logistica=>get_clientes
    IMPORTING
      ot_clientes_hi = DATA(lt_clientes_hi)
      ot_clientes_ex = DATA(lt_clientes_ex).

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'GS_DYN101-KUNNR_EX'
      values          = lt_clientes_ex
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'GS_DYN101-KUNNR_HI'
      values          = lt_clientes_hi
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.


ENDMODULE.
MODULE status_103 OUTPUT.
  SET PF-STATUS '100'.
  SET TITLEBAR '10'.

*  CALL METHOD zclpp_app_logistica=>get_clientes
*    IMPORTING
*      ot_clientes = DATA(lt_clientes).
*
*
*  CALL FUNCTION 'VRM_SET_VALUES'
*    EXPORTING
*      id              = 'GS_DYN101-KUNNR'
*      values          = lt_clientes
*    EXCEPTIONS
*      id_illegal_name = 0
*      OTHERS          = 0.


*  CLEAR g_barcode.

*  SELECT SINGLE parva INTO g_werks FROM usr05
*  WHERE bname = sy-uname AND parid = 'WRK'.

*  PERFORM crear_objeto_app.

ENDMODULE.

MODULE user_command_0100 INPUT.

  CASE gs_dyn100-okcode.
    WHEN 'PICKING'.
      CLEAR gs_dyn101.
      SET SCREEN 0101.
    WHEN 'PICKING_OLD'.
      CALL TRANSACTION 'ZSD0007'.

    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.

MODULE user_command_0101 INPUT.
*
  CASE gs_dyn101-okcode.
    WHEN 'CONS'.
      CLEAR gs_dyn103.
      SET SCREEN 0103.
      RETURN.
    WHEN 'ACPT'.

      CLEAR gs_dyn102.

      IF gs_dyn101-kunnr_ex IS INITIAL AND gs_dyn101-kunnr_hi IS NOT INITIAL.
        gs_dyn101-kunnr = gs_dyn101-kunnr_hi.

      ELSEIF gs_dyn101-kunnr_ex IS NOT INITIAL AND gs_dyn101-kunnr_hi IS  INITIAL.
        gs_dyn101-kunnr = gs_dyn101-kunnr_ex.

      ELSEIF gs_dyn101-kunnr_ex IS NOT INITIAL AND gs_dyn101-kunnr_hi IS NOT INITIAL.
        gs_dyn101-kunnr = gs_dyn101-kunnr_hi.
      ELSEIF gs_dyn101-kunnr_ex IS  INITIAL AND gs_dyn101-kunnr_hi IS  INITIAL.
        MESSAGE |Seleccionar cliente.| TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

* Obtener datos de clientes
      DATA: l_kunnr TYPE kunnr.
      l_kunnr = |{ gs_dyn101-kunnr ALPHA = IN }|.
      CALL METHOD zcl_utils_hpap_pp=>get_datos_cliente
        EXPORTING
          i_kunnr = l_kunnr
        IMPORTING
          o_name1 = DATA(l_desc_cli).
      gs_dyn102-kunnr = |{ gs_dyn101-kunnr }|.
      gs_dyn102-name  = |{ l_desc_cli }|.

      PERFORM  preparar_alv_102.
      CHECK g_rc = '00'.

      SET SCREEN 102.

    WHEN 'BACK'.
*      LEAVE TO SCREEN 100.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.

MODULE user_command_0103 INPUT.

  CASE gs_dyn103-okcode.
    WHEN 'CONS' OR 'ACPT'.
      IF gs_dyn103-vbeln IS INITIAL.
        MESSAGE |Introducir nº entrega.| TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.

      CALL METHOD zclpp_app_logistica=>get_seleccion_entregas
        EXPORTING
*         i_cliente   = gs_dyn101-kunnr
          i_werks     = g_werks
          i_entrega   = gs_dyn103-vbeln
        IMPORTING
          ot_entregas = gs_dyn102-t_entregas
          o_rc        = g_rc.

      CASE g_rc.
        WHEN '02'.
          MESSAGE |Entrega sin lineas.| TYPE 'I' DISPLAY LIKE 'E'.
          RETURN.
        WHEN '00'.
          DATA(ls_reg) = gs_dyn102-t_entregas[ 1 ].
          gs_dyn104 = CORRESPONDING #( ls_reg ).
          gs_dyn104-kunnr = |{ gs_dyn104-kunnr ALPHA = OUT }|.
          g_dynpro = '0103'.
          SET SCREEN 104.

        WHEN OTHERS.
          MESSAGE |Entrega incorrecta.| TYPE 'I' DISPLAY LIKE 'E'.
          RETURN.
      ENDCASE.

    WHEN 'BACK'.
      LEAVE TO SCREEN 0101.
  ENDCASE.
ENDMODULE.

MODULE user_command_0102 INPUT.
*
  CASE gs_dyn102-okcode.
    WHEN 'PREV'.
      IF gs_dyn102-num_pag = 1.
        MESSAGE |Página inicial.| TYPE 'I' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.
        gs_dyn102-num_pag = gs_dyn102-num_pag - 1.
* Activar siempre y únicamente primer radiobutton.
        gs_dyn102-btn1 = 'X'.
        gs_dyn102-btn2 = ' '.
        gs_dyn102-btn3 = ' '.

      ENDIF.
    WHEN 'NEXT'.
      IF gs_dyn102-num_pag = gs_dyn102-tot_pag.
        MESSAGE |Última página.| TYPE 'I' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.
        gs_dyn102-num_pag = gs_dyn102-num_pag + 1.
* Activar siempre y únicamente primer radiobutton.
        gs_dyn102-btn1 = 'X'.
        gs_dyn102-btn2 = ' '.
        gs_dyn102-btn3 = ' '.
      ENDIF.

*    WHEN 'BTNSEL'.
**      PERFORM validar_linea_con_datos_102.
    WHEN 'ACPT'.
      g_dynpro = '0102'.
      PERFORM tratar_seleccion_datos_102.


    WHEN 'BACK'.
      LEAVE TO SCREEN 101.
  ENDCASE.
ENDMODULE.

MODULE user_command_0104 INPUT.
*
  CASE gs_dyn104-okcode.

*      DATA: l_rc TYPE char02.

    WHEN 'ACPT'. "F5

      PERFORM enqueue_vbeln_vl USING gs_dyn104-vbeln
                            CHANGING g_rc.
      IF g_rc = '01'.
        MESSAGE |Entrega bloqueada.| TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      CALL METHOD zclpp_app_logistica=>get_posiciones_entrega
        EXPORTING
          i_werks        = g_werks
          i_vbeln        = gs_dyn104-vbeln
        IMPORTING
          ot_pos_entrega = gs_dyn111-t_posiciones
          o_rc           = g_rc.
      IF g_rc <> '00'.
        MESSAGE |No se han encontrado posiciones.| TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

* Algoritmo para obtener el nº máximo de páginas.
      DATA(l_lineas) = lines( gs_dyn111-t_posiciones[] ).
      DATA(l_mod)    = l_lineas MOD 3.
      DATA(l_paginas) = CONV bseg-dmbtr( l_lineas / 3 ).

      gs_dyn111-tot_pag_dec = trunc( l_paginas )."Mover parte entera

      IF l_mod > 0.
        gs_dyn111-tot_pag_dec = gs_dyn111-tot_pag_dec + 1.
      ENDIF.

      gs_dyn111-tot_pag = gs_dyn111-tot_pag_dec.
      gs_dyn111-num_pag = 1.

      SET SCREEN 111.
    WHEN 'BACK'.
      PERFORM dequeue_vbeln_vl USING gs_dyn104-vbeln
                            CHANGING g_rc.
      gs_dyn102-btn1 = 'X'.
      CLEAR:  gs_dyn102-btn2,
              gs_dyn102-btn3.

      LEAVE TO SCREEN g_dynpro.

  ENDCASE.
ENDMODULE.

MODULE user_command_0111 INPUT.
*
  CASE gs_dyn111-okcode.
    WHEN 'PREV'.
      IF gs_dyn111-num_pag = 1.
        MESSAGE |Página inicial.| TYPE 'I' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.
        gs_dyn111-num_pag = gs_dyn111-num_pag - 1.
      ENDIF.
    WHEN 'NEXT'.
      IF gs_dyn111-num_pag = gs_dyn111-tot_pag.
        MESSAGE |Última página.| TYPE 'I' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.
        gs_dyn111-num_pag = gs_dyn111-num_pag + 1.
      ENDIF.
    WHEN 'CONS'.
      PERFORM tratar_seleccion_111.
      SET SCREEN 121.
    WHEN 'ACPT'.
      PERFORM tratar_seleccion_111.
      SET SCREEN 121.

    WHEN 'BACK'.
      PERFORM dequeue_vbeln_vl USING gs_dyn104-vbeln
                            CHANGING g_rc.
      gs_dyn102-btn1 = 'X'.
      CLEAR:  gs_dyn102-btn2,
              gs_dyn102-btn3.

      LEAVE TO SCREEN g_dynpro.

  ENDCASE.

ENDMODULE.

MODULE user_command_0121 INPUT.
  DATA: l_string  TYPE string,
        l_string2 TYPE string, "DTM
        l_string3 TYPE string, "DTM
        lv_answer TYPE c,      "DTM
        lv_brgew  TYPE brgew.  "DTM

  gs_dyn121-vbeln = |{ gs_dyn121-vbeln ALPHA = IN }|.

  CASE gs_dyn121-okcode.

    WHEN 'NOTAG'. " F9-Consulta stocks
      CLEAR gs_dyn141.

      CALL METHOD zclpp_app_logistica=>get_datos_stock
        EXPORTING
          i_werks        = g_werks
          i_matnr        = gs_dyn121-matnr
          i_kunnr        = gs_dyn104-kunnr
          i_lgort        = '1040'
          i_tp_calidad   = gs_dyn104-tp_stock
          i_vbeln        = <fs_reg_sel_111>-vbeln
          i_posnr        = <fs_reg_sel_111>-posnr
        IMPORTING
          ot_lotes_stock = gs_dyn141-t_lotes_stock.

      IF gs_dyn141-t_lotes_stock IS INITIAL.
        MESSAGE |Material sin stock para este cliente.| TYPE 'I'.
        EXIT.
      ENDIF.

* inicializar num.pag a 1 y tipo de ordenación inicial x Lote.
      gs_dyn141-num_pag = 1.
      gs_dyn141-tp_ord  = 'L'.
      PERFORM preparar_alv_141.

      LEAVE TO SCREEN 0141.
    WHEN 'CONS'. " F2-Consulta picking
      PERFORM gestionar_consulta_picking.
      CHECK gs_dyn131-t_lotes_pick[] IS NOT INITIAL. "Si no hay datos, se ha informado msg, no navegar a 131.
      LEAVE TO SCREEN 0131.
    WHEN 'BACK'.
      gs_dyn111-btn1 = 'X'.
      CLEAR: gs_dyn111-btn2,
             gs_dyn111-btn3,
             gs_dyn111-btn4.

      LEAVE TO SCREEN 0111.

*    WHEN 'ACEPT'. " F5-Aceptar-lectura codbar
    WHEN OTHERS.

      CALL METHOD zclpp_app_logistica=>lectura_codbar
        EXPORTING
          i_werks        = g_werks
          i_codbar       = gs_dyn121-barcode
          i_vbeln        = gs_dyn121-vbeln
          i_posnr        = gs_dyn121-posnr
          i_matnr        = gs_dyn121-matnr
          i_cant_entrega = gs_dyn121-cant_entrega
          i_cant_picking = gs_dyn121-cant_picking
        IMPORTING
          o_charg        = gs_dyn125-charg
          o_kg_lote      = DATA(l_kg_lote)
*         o_diferencia   = DATA(l_diferencia)
          o_diferencia   = gs_dyn125-dif
          o_rc           = g_rc.
      CASE g_rc.
        WHEN '00'.
          l_string = |Bobina { gs_dyn125-charg } leída ok|.
          CLEAR: gs_dyn121-barcode.
          gs_dyn121-cant_picking = gs_dyn121-cant_picking + l_kg_lote.
          gs_dyn121-charg        = gs_dyn125-charg.
          gs_dyn121-menge        = l_kg_lote.
          <fs_reg_sel_111>-cant_pick = <fs_reg_sel_111>-cant_pick + l_kg_lote.

* DTM - Se obtiene la cantidad total a entregar y
*       la cantidad total de picking de la entrega
          SELECT SINGLE btgew FROM likp
            WHERE vbeln EQ @<fs_reg_sel_111>-vbeln
          INTO @gs_dyn121-tot_entrega.

          SELECT SUM( kcmeng ) FROM lips
            WHERE vbeln EQ @<fs_reg_sel_111>-vbeln
              AND posnr NOT LIKE '9%'
          INTO @gs_dyn121-tot_picking.
* DTM

        WHEN '01'. l_string = |Bobina incorrecta.|.
        WHEN '02'. l_string = |Bobina incorrecta.|.
*        WHEN '03'. l_string = |Bobina expedida previamente.|.
*        WHEN '04'. l_string = |La bobina { l_charg } no existe en el almacén|.
        WHEN '05'. l_string = |La bobina { gs_dyn125-charg } no existe en el almacén|.
        WHEN '06'. l_string = |Calidad del lote { gs_dyn125-charg } incorrecta|.
        WHEN '07'. l_string = |Cliente del lote { gs_dyn125-charg } incorrecto.|.
        WHEN '08'. l_string = |La bobina NO está reprocesada. No se puede expedir.|.
        WHEN '09'. l_string = |Almacén incorrecto.|.
        WHEN '10'. l_string = |Antigüedad de bobina 2ª < 15 días.|.
        WHEN '11'. l_string = |Bobina sin fecha fabricación.|.

        WHEN '12'. " Validaciones OK, pero KG superados, mostrar popup.

          gs_dyn125-vbeln = gs_dyn121-vbeln.
          gs_dyn125-posnr = gs_dyn121-posnr.
          gs_dyn125-brgew = l_kg_lote.
          SET SCREEN 0125.

        WHEN '13'. l_string = |Material incorrecto.|.
        WHEN '14'. l_string = |Bobina ya leída.|.
        WHEN '15'. l_string = |Bobina ya expedida.|.
        WHEN '16'.

          gs_dyn130-vbeln = gs_dyn121-vbeln.
          gs_dyn130-posnr = gs_dyn121-posnr.
          gs_dyn130-brgew = l_kg_lote.
          gs_dyn130-charg = gs_dyn125-charg.
          SET SCREEN 0130.

        WHEN '17'. l_string = |Bobina a reprocesar.|.
        WHEN '30'. " metodo "anyadir bobina a entrega" ya ha mostrado el msg, no hacer nada
        WHEN OTHERS.
      ENDCASE.

      IF g_rc = '00'.
        MESSAGE l_string TYPE 'S'.
      ELSE.
        CHECK g_rc <> '12' AND g_rc <> '30' AND g_rc <> '16'. "Si el usuario cancela la lectura, no mostrar msg
        MESSAGE l_string TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.

  ENDCASE.
ENDMODULE.

MODULE user_command_0125 INPUT.
*  DATA: l_string TYPE string.


  CASE gs_dyn125-okcode.
    WHEN 'ACPT'.
*      l_string = |Error al actualizar entrega.|.

      CALL METHOD zclpp_app_logistica=>anyadir_bobina_a_entrega
        EXPORTING
          i_vbeln = gs_dyn125-vbeln
          i_posnr = gs_dyn125-posnr
          i_charg = gs_dyn125-charg
          i_brgew = gs_dyn125-brgew
        IMPORTING
          o_rc    = DATA(l_rc).
      IF l_rc <> '00'.
        MESSAGE |Error al añadir lote.| TYPE 'I' DISPLAY LIKE 'E'.
        LEAVE TO SCREEN 0121.
        EXIT.
      ELSE.

        l_string = |Bobina { gs_dyn125-charg } leída ok|.
        MESSAGE |{ l_string }| TYPE 'S'.

        CLEAR: gs_dyn121-barcode.

        gs_dyn121-cant_picking = gs_dyn121-cant_picking + l_kg_lote.
        gs_dyn121-charg        = gs_dyn125-charg.
        gs_dyn121-menge        = l_kg_lote.
        <fs_reg_sel_111>-cant_pick = <fs_reg_sel_111>-cant_pick + l_kg_lote.

* DTM - Se obtiene la cantidad total a entregar y
*       la cantidad total de picking de la entrega

        SELECT SINGLE btgew FROM likp
          WHERE vbeln EQ @<fs_reg_sel_111>-vbeln
        INTO @gs_dyn121-tot_entrega.

        SELECT SUM( kcmeng ) FROM lips
          WHERE vbeln EQ @<fs_reg_sel_111>-vbeln
            AND posnr NOT LIKE '9%'
        INTO @gs_dyn121-tot_picking.

* DTM

* DTM - Se obtiene la cantidad de entrega del lote actualizada
*       por si se ha sobrepasado la cantidad total

        SELECT SINGLE kcmeng FROM lips
          WHERE vbeln EQ @<fs_reg_sel_111>-vbeln
            AND posnr EQ @<fs_reg_sel_111>-posnr
        INTO @gs_dyn121-cant_entrega.

* DTM

        LEAVE TO SCREEN 0121.
        EXIT.

      ENDIF.

    WHEN 'BACK'.
      LEAVE TO SCREEN 0121.
      EXIT.
*        when
*        WHEN OTHERS.
  ENDCASE.

ENDMODULE.

MODULE user_command_0130 INPUT.

* Pantalla de aviso tras validación de antigüedad (DTM)
  CASE gs_dyn130-okcode.
    WHEN 'ACPT'.

      CALL METHOD zclpp_app_logistica=>anyadir_bobina_a_entrega
        EXPORTING
          i_vbeln = gs_dyn130-vbeln
          i_posnr = gs_dyn130-posnr
          i_charg = gs_dyn130-charg
          i_brgew = gs_dyn130-brgew
        IMPORTING
          o_rc    = l_rc.

      IF l_rc <> '00'.

        MESSAGE |Error al añadir lote.| TYPE 'I' DISPLAY LIKE 'E'.
        LEAVE TO SCREEN 0121.
        EXIT.

      ELSE.

        l_string = |Bobina { gs_dyn130-charg } leída ok|.
        MESSAGE |{ l_string }| TYPE 'S'.

        CLEAR: gs_dyn121-barcode.
        gs_dyn121-cant_picking     = gs_dyn121-cant_picking + l_kg_lote.
        gs_dyn121-charg            = gs_dyn130-charg.
        gs_dyn121-menge            = l_kg_lote.
        <fs_reg_sel_111>-cant_pick = <fs_reg_sel_111>-cant_pick + l_kg_lote.
        LEAVE TO SCREEN 0121.
        EXIT.

      ENDIF.

    WHEN 'BACK'.

      LEAVE TO SCREEN 0121.
      EXIT.

  ENDCASE.

ENDMODULE.

MODULE user_command_0131 INPUT.

  CASE gs_dyn131-okcode.

    WHEN 'PREV'.
      IF gs_dyn131-num_pag = 1.
        MESSAGE |Página inicial.| TYPE 'I' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.
        gs_dyn131-num_pag = gs_dyn131-num_pag - 1.
      ENDIF.

    WHEN 'NEXT'.
      IF gs_dyn131-num_pag = gs_dyn131-tot_pag.
        MESSAGE |Última página.| TYPE 'I' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.
        gs_dyn131-num_pag = gs_dyn131-num_pag + 1.
      ENDIF.

    WHEN 'BACK'.
      LEAVE TO SCREEN 0121.

*    WHEN 'DEL'.
*      PERFORM confirmar_borrado_f8_132.


    WHEN  'BTN01'.
*      CLEAR gs_dyn133.
*      gs_dyn133-vbeln     = gs_dyn121-vbeln.
*      gs_dyn133-posnr     = gs_dyn121-posnr.
*      gs_dyn133-charg     = gs_dyn131-charg01.
*      gs_dyn133-cant_pick = gs_dyn131-canti01.
*      SET SCREEN 0133.
      PERFORM confirmar_borrado_f8_132.
    WHEN  'BTN02'.
*      CLEAR gs_dyn133.
*      gs_dyn133-vbeln     = gs_dyn121-vbeln.
*      gs_dyn133-posnr     = gs_dyn121-posnr.
*      gs_dyn133-charg     = gs_dyn131-charg02.
*      gs_dyn133-cant_pick = gs_dyn131-canti02.
*      SET SCREEN 0133.
      PERFORM confirmar_borrado_f8_132.
    WHEN  'BTN03'.
*      CLEAR gs_dyn133.
*      gs_dyn133-vbeln     = gs_dyn121-vbeln.
*      gs_dyn133-posnr     = gs_dyn121-posnr.
*      gs_dyn133-charg     = gs_dyn131-charg03.
*      gs_dyn133-cant_pick = gs_dyn131-canti03.
*      SET SCREEN 0133.
      PERFORM confirmar_borrado_f8_132.
    WHEN  'BTN04'.
*      CLEAR gs_dyn133.
*      gs_dyn133-vbeln     = gs_dyn121-vbeln.
*      gs_dyn133-posnr     = gs_dyn121-posnr.
*      gs_dyn133-charg     = gs_dyn131-charg04.
*      gs_dyn133-cant_pick = gs_dyn131-canti04.
*      SET SCREEN 0133.
      PERFORM confirmar_borrado_f8_132.
    WHEN  'BTN05'.
*      CLEAR gs_dyn133.
*      gs_dyn133-vbeln     = gs_dyn121-vbeln.
*      gs_dyn133-posnr     = gs_dyn121-posnr.
*      gs_dyn133-charg     = gs_dyn131-charg05.
*      gs_dyn133-cant_pick = gs_dyn131-canti05.
*      SET SCREEN 0133.
      PERFORM confirmar_borrado_f8_132.
    WHEN  'BTN06'.
*      CLEAR gs_dyn133.
*      gs_dyn133-vbeln     = gs_dyn121-vbeln.
*      gs_dyn133-posnr     = gs_dyn121-posnr.
*      gs_dyn133-charg     = gs_dyn131-charg06.
*      gs_dyn133-cant_pick = gs_dyn131-canti06.
*      SET SCREEN 0133.
      PERFORM confirmar_borrado_f8_132.

* DTM - Botón Borrar Picking Completo
    WHEN 'DEL'.

      CLEAR gs_dyn134.
      gs_dyn134-vbeln     = gs_dyn121-vbeln.
      gs_dyn134-posnr     = gs_dyn121-posnr.
      gs_dyn134-charg     = gs_dyn131-charg01.
      gs_dyn134-cant_pick = gs_dyn131-canti01.
      SET SCREEN 0134.

* DTM
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

MODULE user_command_0132 INPUT.

  CASE gs_dyn132-okcode.
    WHEN 'DEL'.
      CLEAR gs_dyn133.
      gs_dyn133-vbeln     = gs_dyn121-vbeln.
      gs_dyn133-posnr     = gs_dyn121-posnr.
      gs_dyn133-charg     = gs_dyn132-charg.
      gs_dyn133-cant_pick = gs_dyn132-peso.

      SET SCREEN 0133.

    WHEN 'BACK'.
      LEAVE TO SCREEN 0131.

    WHEN OTHERS.
  ENDCASE.

ENDMODULE.

MODULE user_command_0133 INPUT.

  CASE gs_dyn133-okcode.
    WHEN 'ACPT'.
      PERFORM tratar_borrado_f8_133.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0132.

    WHEN OTHERS.
  ENDCASE.

ENDMODULE.

MODULE user_command_0134 INPUT. "DTM

  CASE gs_dyn134-okcode.
    WHEN 'ACPT'.
      PERFORM tratar_borrado_f8_134.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0121.

    WHEN OTHERS.
  ENDCASE.

ENDMODULE.

MODULE user_command_0141 INPUT.
  CASE gs_dyn141-okcode.
*    WHEN 'CONS'. " F2-Consulta picking
*      leave to SCREEN 0131.
*    WHEN 'BACK'.
*      LEAVE TO SCREEN 0111.

    WHEN 'PREV'.
      IF gs_dyn141-num_pag = 1.
        MESSAGE |Página inicial.| TYPE 'I' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.
        gs_dyn141-num_pag = gs_dyn141-num_pag - 1.
      ENDIF.
    WHEN 'NEXT'.
      IF gs_dyn141-num_pag = gs_dyn141-tot_pag.
        MESSAGE |Última página.| TYPE 'I' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.
        gs_dyn141-num_pag = gs_dyn141-num_pag + 1.
      ENDIF.
    WHEN 'BACK'.
      LEAVE TO SCREEN 0121.

    WHEN 'CONS'.
      gs_dyn141-num_pag = 1.
      CASE gs_dyn141-tp_ord.
        WHEN 'L'.
          gs_dyn141-tp_ord = 'P'.
          SORT gs_dyn141-t_lotes_stock BY cant_pick DESCENDING.
        WHEN 'P'.
          gs_dyn141-tp_ord = 'U'.
          SORT gs_dyn141-t_lotes_stock BY ubicacion ASCENDING.
        WHEN 'U'.
          gs_dyn141-tp_ord = 'L'.
          SORT gs_dyn141-t_lotes_stock BY charg ASCENDING.
        WHEN OTHERS.
      ENDCASE.



    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

MODULE status_102 OUTPUT.

  PERFORM pbo_102.
  SET CURSOR FIELD gs_dyn102-btn1.
*Se utiliza el group1 = FI2 y FI3 para ocultar la 2a y 3a fila.
  LOOP AT SCREEN.

    IF  screen-group1 = 'FI2' AND
       gs_dyn102-vbeln_2 IS INITIAL.
      screen-invisible = 1.
    ENDIF.

    IF  screen-group1 = 'FI3' AND
       gs_dyn102-vbeln_3 IS INITIAL.
      screen-invisible = 1.
    ENDIF.

    MODIFY SCREEN.

  ENDLOOP.

ENDMODULE.

MODULE status_131 OUTPUT.

  FIELD-SYMBOLS: <fs_grupo> TYPE data.
  FIELD-SYMBOLS: <fs_camp>  TYPE data.

  DATA: l_idx_st131 TYPE numc2.

  CLEAR gs_dyn131-okcode.

  gs_dyn131-titulo = |CONSULTAR PICKING ({ gs_dyn131-num_pag }/{ gs_dyn131-tot_pag })|.
  DATA(l_idx_131)  = ( ( gs_dyn131-num_pag - 1 ) * 6 ) + 1.

  PERFORM paginar_bob_stock_131.

  LOOP AT SCREEN.

    l_idx_st131 = 1.

* Rastrear lineas para ocultar las NO informadas.
    DO 10 TIMES.

      DATA(nom_grup2) = |F{ l_idx_st131 }|.
*      DATA(nom_camp) = |GS_DYN131-LINEA{ l_idx_st131 }|.
      DATA(nom_camp) = |GS_DYN131-BTN{ l_idx_st131 }|.
      ASSIGN (nom_camp) TO <fs_camp>.

      IF  screen-group1 = nom_grup2 AND
          <fs_camp> IS INITIAL.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.

      ADD 1 TO l_idx_st131.

    ENDDO.

  ENDLOOP.

ENDMODULE.

MODULE status_132 OUTPUT.

*        BEGIN OF gs_dyn132,
*        charg         TYPE charg_d,
*        matnr         TYPE matnr,
*        maktx         TYPE maktx,
*        calidad       TYPE c LENGTH 16,
*        ancho         TYPE n LENGTH 4,
*        gramaje       TYPE n LENGTH 4,
*        de            TYPE char01,
*        kunnr         TYPE kunnr,
*        peso          TYPE z_cantidad_sin_dec,
*      END OF gs_dyn132,
ENDMODULE.


MODULE status_133 OUTPUT.

  gs_dyn133-txt_msg1 = |El lote { gs_dyn133-charg }|.
  gs_dyn133-txt_msg2 = |se eliminará del picking.|.

ENDMODULE.

MODULE status_134 OUTPUT. "DTM

  gs_dyn134-vbeln = |{ gs_dyn134-vbeln ALPHA = OUT }|.

  gs_dyn134-txt_msg1 = |Se eliminarán del picking|.
  gs_dyn134-txt_msg2 = |TODOS los lotes de |.
  gs_dyn134-txt_msg3 = |la posición|.

ENDMODULE.

MODULE status_141 OUTPUT.


  CLEAR gs_dyn141-okcode.

*  DATA(l_lin)        = lines( gs_dyn141-t_lotes_stock ).
*  DATA(l_mod_141)    = l_lin MOD 10.
*
*  CLEAR l_paginas.
*  l_paginas = CONV bseg-dmbtr( l_lin / 10 ).
*  gs_dyn141-tot_pag_dec = trunc( l_paginas ).
*
*  IF l_mod_141 > 0.
*    gs_dyn141-tot_pag_dec = gs_dyn141-tot_pag_dec + 1.
*  ENDIF.
*
*  gs_dyn141-num_pag = 1.
*  gs_dyn141-tot_pag = gs_dyn141-tot_pag_dec.

* Rotular título segun ordenación y con info.de paginación
  CASE gs_dyn141-tp_ord.
    WHEN 'L'.
      gs_dyn141-titulo = |STOCK ORD X LOTE ({ gs_dyn141-num_pag }/{ gs_dyn141-tot_pag })|.
      gs_dyn141-btn_ord = |F2 Ord x peso|.
    WHEN 'P'.
      gs_dyn141-titulo = |STOCK ORD X PESO ({ gs_dyn141-num_pag }/{ gs_dyn141-tot_pag })|.
      gs_dyn141-btn_ord = |F2 Ord x ubic|.
    WHEN 'U'.
      gs_dyn141-titulo = |STOCK ORD X UBICACIÓN ({ gs_dyn141-num_pag }/{ gs_dyn141-tot_pag })|.
      gs_dyn141-btn_ord = |F2 Ord x lote|.
    WHEN OTHERS.
  ENDCASE.

  PERFORM paginar_bob_stock_141.


  LOOP AT SCREEN.

    DATA(l_idx_st141) = 1.

* Rastrear lineas para ocultar las NO informadas.
    DO 10 TIMES.

      DATA(nom_grup) = |F{ l_idx_st141 }|.
      nom_camp = |GS_DYN141-LINEA{ l_idx_st141 }|.
      ASSIGN (nom_camp) TO <fs_camp>.

      IF  screen-group1 = nom_grup AND
          <fs_camp> IS INITIAL.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.

      ADD 1 TO l_idx_st131.

    ENDDO.

  ENDLOOP.

ENDMODULE.


MODULE status_104 OUTPUT.

  CLEAR gs_dyn104-okcode.
  gs_dyn104-vbeln = |{ gs_dyn104-vbeln ALPHA = OUT }|.

ENDMODULE.

MODULE  status_111 OUTPUT.

  CLEAR gs_dyn111-okcode.
  gs_dyn111-titulo = |SELECCIONAR POSICION ({ gs_dyn111-num_pag }/{ gs_dyn111-tot_pag })|.
  DATA(l_idx111) = ( ( gs_dyn111-num_pag - 1 ) * 3 ) + 1.

  TRY.
      CLEAR: gs_dyn111-posnr_1     ,
             gs_dyn111-lfimg_1     ,
             gs_dyn111-maktx_1     ,
             gs_dyn111-cant_pick_1 .

* DTM - Se vuelve a recoger los datos de las posiciones actualizadas

      CLEAR: gs_dyn111-t_posiciones[].

      CALL METHOD zclpp_app_logistica=>get_posiciones_entrega
        EXPORTING
          i_werks        = g_werks
          i_vbeln        = gs_dyn104-vbeln
        IMPORTING
          ot_pos_entrega = gs_dyn111-t_posiciones
          o_rc           = g_rc.

      IF g_rc <> '00'.

        MESSAGE |No se han encontrado posiciones.| TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.

      ENDIF.

* DTM

      DATA(ls_posic)            = gs_dyn111-t_posiciones[ l_idx111 ].
      gs_dyn111-posnr_1       = ls_posic-posnr.
      gs_dyn111-lfimg_1       = ls_posic-lfimg.
      gs_dyn111-matnr_1       = ls_posic-matnr.
      gs_dyn111-maktx_1       = ls_posic-maktx.
      gs_dyn111-cant_pick_1   = ls_posic-cant_pick.
    CATCH cx_root .
  ENDTRY.


  TRY.
      CLEAR: gs_dyn111-posnr_2     ,
             gs_dyn111-lfimg_2     ,
             gs_dyn111-maktx_2     ,
             gs_dyn111-cant_pick_2 .

      l_idx111                 = l_idx111 + 1.
      ls_posic                = gs_dyn111-t_posiciones[ l_idx111 ].
      gs_dyn111-posnr_2     = ls_posic-posnr.
      gs_dyn111-lfimg_2     = ls_posic-lfimg.
      gs_dyn111-matnr_2     = ls_posic-matnr.
      gs_dyn111-maktx_2     = ls_posic-maktx.
      gs_dyn111-cant_pick_2 = ls_posic-cant_pick.
    CATCH cx_root .
  ENDTRY.


  TRY.
      CLEAR: gs_dyn111-posnr_3     ,
             gs_dyn111-lfimg_3     ,
             gs_dyn111-maktx_3     ,
             gs_dyn111-cant_pick_3 .

      l_idx111 = l_idx111 + 1.
      ls_posic                = gs_dyn111-t_posiciones[ l_idx111 ].
      gs_dyn111-posnr_3       = ls_posic-posnr.
      gs_dyn111-lfimg_3       = ls_posic-lfimg.
      gs_dyn111-matnr_3       = ls_posic-matnr.
      gs_dyn111-maktx_3       = ls_posic-maktx.
      gs_dyn111-cant_pick_3   = ls_posic-cant_pick.
    CATCH cx_root .
  ENDTRY.

*  TRY.
*      CLEAR: gs_dyn111-posnr_4     ,
*             gs_dyn111-lfimg_4     ,
*             gs_dyn111-maktx_4     ,
*             gs_dyn111-cant_pick_4 .
*
*      l_idx111 = l_idx111 + 1.
*      ls_posic                = gs_dyn111-t_posiciones[ l_idx111 ].
*      gs_dyn111-posnr_4       = ls_posic-posnr.
*      gs_dyn111-lfimg_4       = ls_posic-lfimg.
*      gs_dyn111-matnr_4       = ls_posic-matnr.
*      gs_dyn111-maktx_4       = ls_posic-maktx.
*      gs_dyn111-cant_pick_4   = ls_posic-cant_pick.
*    CATCH cx_root .
*  ENDTRY.



*GS_DYN111-POSNR_2
  LOOP AT SCREEN.

    IF  screen-group1 = 'FI2' AND
       gs_dyn111-posnr_2 IS INITIAL.
      screen-invisible = 1.
    ENDIF.

    IF  screen-group1 = 'FI3' AND
       gs_dyn111-posnr_3 IS INITIAL.
      screen-invisible = 1.
    ENDIF.
* 4a linea siempre invisible.
    IF  screen-group1 = 'FI4'." AND
*       gs_dyn111-posnr_4 IS INITIAL.
      screen-invisible = 1.
    ENDIF.

    MODIFY SCREEN.

  ENDLOOP.
ENDMODULE.

MODULE status_121 OUTPUT.

  CLEAR gs_dyn121-okcode.
  gs_dyn121-vbeln = |{ gs_dyn121-vbeln ALPHA = OUT }|.
ENDMODULE.

MODULE status_125 OUTPUT.

  CLEAR gs_dyn125-okcode.

*      l_msg = |Peso a entregar excedido en { l_diferencia } kg. ¿Desea continuar?|.
*      BEGIN OF      gs_dyn125,
*        txt1   TYPE char25,
*        txt2   TYPE char25,
*        txt3   TYPE char25,
*        okcode LIKE sy-ucomm,
*      END OF gs_dyn125,

  gs_dyn125-txt1 = |Peso a entregar excedido|.
  gs_dyn125-txt2 = |en { gs_dyn125-dif } kg.|.
  gs_dyn125-txt3 = |¿Desea continuar?|.

ENDMODULE.

MODULE status_130 OUTPUT.

  CLEAR gs_dyn130-okcode.

  gs_dyn130-txt1 = |Antigüedad de bobina 2ª|.
  gs_dyn130-txt2 = | < 15 días.|.
  gs_dyn130-txt3 = |¿Desea continuar?|.

ENDMODULE.
