*&---------------------------------------------------------------------*
*&  Include           ZRPP0072_F01
*&---------------------------------------------------------------------*
FORM montar_alv_sup.

  IF gs_dyn100-cont_sup IS NOT BOUND.

    CREATE OBJECT gs_dyn100-cont_sup
      EXPORTING
        container_name              = 'GS_DYN100-CONT_SUP'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.
        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn100-cont_sup
            container_name = 'GS_DYN100-CONT_SUP'
          IMPORTING
            r_salv_table   = gs_dyn100-alv_sup
          CHANGING
            t_table        = gt_datos_rv.
      CATCH cx_root .
    ENDTRY.

    PERFORM tunning_alv_sup.

    gs_dyn100-alv_sup->display( ).

  ENDIF.

ENDFORM.

FORM montar_alv_inf.

  IF gs_dyn100-cont_inf IS NOT BOUND.

    CREATE OBJECT gs_dyn100-cont_inf
      EXPORTING
        container_name              = 'GS_DYN100-CONT_INF'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.
        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn100-cont_inf
            container_name = 'GS_DYN100-CONT_INF'
          IMPORTING
            r_salv_table   = gs_dyn100-alv_inf
          CHANGING
            t_table        = gt_datos_entregas.
      CATCH cx_root .
    ENDTRY.

    PERFORM tunning_alv_inf.

    gs_dyn100-alv_inf->display( ).

*  ELSE.
*    TRY.
*        CALL METHOD gs_dyn100-alv_inf->set_data
*          CHANGING
*            t_table = gt_datos_sin_asig.
*
*      CATCH cx_root .
*    ENDTRY.
*
*    gs_dyn100-alv_inf->refresh( "s_stable     = 'X'
*                               refresh_mode = if_salv_c_refresh=>full ).
*    cl_gui_cfw=>flush( ).


  ENDIF.

ENDFORM.

FORM tunning_alv_sup.

  DATA: lr_functions  TYPE REF TO cl_salv_functions_list,
        lo_selections TYPE REF TO cl_salv_selections,
        l_text        TYPE string.
  DATA: lv_key    TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout TYPE REF TO cl_salv_layout.
  DATA: lr_columns        TYPE REF TO cl_salv_columns,
        lr_column         TYPE REF TO cl_salv_column_table,
        lr_cols_tab_color TYPE REF TO cl_salv_columns_table.


  DATA: lr_events TYPE REF TO cl_salv_events_table.
  lr_events = gs_dyn100-alv_sup->get_event( ).

  lo_selections = gs_dyn100-alv_sup->get_selections( ).
  lo_selections->set_selection_mode( cl_salv_selections=>single ).

  CREATE OBJECT gr_events_sup.
  SET HANDLER gr_events_sup->on_user_command FOR lr_events.
  SET HANDLER gr_events_sup->on_link_click FOR lr_events.


  lv_key-report = sy-repid.
  lo_layout = gs_dyn100-alv_sup->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn100-alv_sup->get_functions( ).
  lr_functions->set_all( 'X' ).

  TRY.
      l_text = 'Asignar entregas'.
      lr_functions->add_function(
        name     = 'ASIG_ENT'
        icon     = '@8U@'
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.

  TRY.
      l_text = 'Imprimir doc.'.
      lr_functions->add_function(
        name     = 'PRINT'
        icon     = '@0X@'
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.

  lr_columns = gs_dyn100-alv_sup->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.
      lr_cols_tab_color = gs_dyn100-alv_sup->get_columns( ).
      lr_cols_tab_color->set_color_column( 'COLOR' ).
    CATCH cx_salv_data_error.                           "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ID_REG_VEHICULO' ).
      lr_column->set_short_text( value  = 'Id.vehícul' ).
      lr_column->set_medium_text( value  = 'Id.reg. vehículo' ).
      lr_column->set_long_text( value  = 'Id.registro vehículo' ).
      lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).

    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TDLNR' ).
      lr_column->set_short_text( value  = 'Transport.' ).
      lr_column->set_medium_text( value  = 'Transportista' ).
      lr_column->set_long_text( value  = 'Transportista' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ZMATRICULA1' ).
      lr_column->set_short_text( value  = 'Matrícula' ).
      lr_column->set_medium_text( value  = 'Matricula' ).
      lr_column->set_long_text( value  = 'Matricula' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ZMATRICULA2' ).
      lr_column->set_short_text( value  = 'Matr.Rem.' ).
      lr_column->set_medium_text( value  = 'Matricula Rem.' ).
      lr_column->set_long_text( value  = 'Matricula Rem.' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'IND_REMOLQUE' ).
*      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
      lr_column->set_short_text( value  = '2º Remolq.' ).
      lr_column->set_medium_text( value  = '2º Remolque' ).
      lr_column->set_long_text( value  = '2º Remolque' ).
*      lr_column->set_cell_type( if_salv_c_cell_type=>checkbox_hotspot ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ICO_REMOLQUE' ).
      lr_column->set_short_text( value  = '2º Remolq.' ).
      lr_column->set_medium_text( value  = '2º Remolque' ).
      lr_column->set_long_text( value  = '2º Remolque' ).
      lr_column->set_icon( if_salv_c_bool_sap=>true ).

    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TARA' ).
      lr_column->set_short_text( value  = 'Tara' ).
      lr_column->set_medium_text( value  = 'Tara' ).
      lr_column->set_long_text( value  = 'Tara' ).

    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TARA2' ).
      lr_column->set_short_text( value  = 'Tara2' ).
      lr_column->set_medium_text( value  = 'Tara2' ).
      lr_column->set_long_text( value  = 'Tara2' ).

    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ICON_SITUACION' ).
      lr_column->set_short_text( value  = 'Estado' ).
      lr_column->set_medium_text( value  = 'Estado' ).
      lr_column->set_long_text( value  = 'Estado' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TKNUM' ).
      lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CONTENEDOR_LOG' ).
      lr_column->set_short_text( value  = 'Contenedor' ).
      lr_column->set_medium_text( value  = 'Contenedor logística' ).
      lr_column->set_long_text( value  = 'Contenedor logística' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'SW_TRANS_KO' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

* DTM - Peso permitido carga

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'PESO_P_CARGA' ).
      lr_column->set_short_text( value  = 'Carga Max.' ).
      lr_column->set_medium_text( value  = 'Carga Max.' ).
      lr_column->set_long_text( value  = 'Carga Max.' ).

    CATCH cx_salv_not_found .
  ENDTRY.

* DTM


*
*  TRY.
*      lr_column ?= lr_columns->get_column( columnname = 'VBELN' ).
*      lr_column->set_short_text( value  = 'Pedido' ).
*      lr_column->set_medium_text( value  = 'Pedido' ).
*      lr_column->set_long_text( value  = 'Pedido' ).
*    CATCH cx_salv_not_found .
*  ENDTRY.
*
*  TRY.
*      lr_column ?= lr_columns->get_column( columnname = 'DESC_CLI' ).
*      lr_column->set_short_text( value  = 'Desc.clien' ).
*      lr_column->set_medium_text( value  = 'Descrip. cliente' ).
*      lr_column->set_long_text( value  = 'Descripción cliente' ).
*    CATCH cx_salv_not_found .
*  ENDTRY.

ENDFORM.

FORM tunning_alv_inf.
  DATA: lr_functions      TYPE REF TO cl_salv_functions_list,
        l_text            TYPE string,
        lv_key            TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout         TYPE REF TO cl_salv_layout,
        lo_selections     TYPE REF TO cl_salv_selections,
        lr_columns        TYPE REF TO cl_salv_columns,
        lr_column         TYPE REF TO cl_salv_column_table,
        lr_cols_tab_color TYPE REF TO cl_salv_columns_table,
        lr_events         TYPE REF TO cl_salv_events_table.

  DATA: l_icon       TYPE string.

*  lo_selections = gs_dyn100-alv_inf->get_selections( ).
*  lo_selections->set_selection_mode( cl_salv_selections=>multiple ).
*
  lr_events = gs_dyn100-alv_inf->get_event( ).
*
  CREATE OBJECT gr_events_inf.
  SET HANDLER gr_events_inf->on_user_command FOR lr_events.
  SET HANDLER gr_events_inf->on_link_click   FOR lr_events.
*
*
  lv_key-report = |{ sy-repid }_entregas |.
  lo_layout = gs_dyn100-alv_inf->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).
*
  lr_functions = gs_dyn100-alv_inf->get_functions( ).
  lr_functions->set_all( 'X' ).

  TRY.
      lr_cols_tab_color = gs_dyn100-alv_inf->get_columns( ).
      lr_cols_tab_color->set_color_column( 'COLOR' ).
    CATCH cx_salv_data_error.                           "#EC NO_HANDLER
  ENDTRY.

*  TRY.
*      l_text = 'Asignar capacidad'.
*      lr_functions->add_function(
*        name     = 'ASIG_CAP'
*        icon     = '@8U@'
*        text     = l_text
*        tooltip  = l_text
*        position = if_salv_c_function_position=>right_of_salv_functions ).
*    CATCH cx_salv_wrong_call cx_salv_existing.
*  ENDTRY.
*


  lr_columns = gs_dyn100-alv_inf->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VBELN' ).
      lr_column->set_short_text( value  = 'Entrega' ).
      lr_column->set_medium_text( value  = 'Entrega' ).
      lr_column->set_long_text( value  = 'Entrega' ).
      lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).

    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'KUNNR' ).
      lr_column->set_short_text( value  = 'Cliente' ).
      lr_column->set_medium_text( value  = 'Cliente' ).
      lr_column->set_long_text( value  = 'Cliente' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'NAME1' ).
      lr_column->set_short_text( value  = 'Nom.client' ).
      lr_column->set_medium_text( value  = 'Nombre cliente' ).
      lr_column->set_long_text( value  = 'Nombre cliente' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE' ).
      lr_column->set_short_text( value  = 'Kg.entrega' ).
      lr_column->set_medium_text( value  = 'Kg. entrega' ).
      lr_column->set_long_text( value  = 'Kg. entrega' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CANT_PICK' ).
      lr_column->set_short_text( value  = 'Kg.picking' ).
      lr_column->set_medium_text( value  = 'Kg. picking' ).
      lr_column->set_long_text( value  = 'Kg. picking' ).
    CATCH cx_salv_not_found .
  ENDTRY.


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TP_STOCK' ).
      lr_column->set_short_text( value  = 'Tp.stock' ).
      lr_column->set_medium_text( value  = 'Tipo stock' ).
      lr_column->set_long_text( value  = 'Tipo stock' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'KOSTK' ).
      lr_column->set_short_text( value  = 'Estado' ).
      lr_column->set_medium_text( value  = 'Estado' ).
      lr_column->set_long_text( value  = 'Estado' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ERDAT' ).
      lr_column->set_short_text( value  = 'F.creación' ).
      lr_column->set_medium_text( value  = 'Fecha creación' ).
      lr_column->set_long_text( value  = 'Fecha creación' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'KUNNR' ).
      lr_column->set_short_text( value  = 'Destinat.' ).
      lr_column->set_medium_text( value  = 'Destinatario' ).
      lr_column->set_long_text( value  = 'Destinatario' ).
    CATCH cx_salv_not_found .
  ENDTRY.
*
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'NAME1' ).
      lr_column->set_short_text( value  = 'Nom.destin' ).
      lr_column->set_medium_text( value  = 'Nombre destinatario' ).
      lr_column->set_long_text( value  = 'Nombre destinatario' ).
    CATCH cx_salv_not_found .
  ENDTRY.

* DTM

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'PEDIDO' ).
      lr_column->set_short_text( value  = 'Ped. vta.' ).
      lr_column->set_medium_text( value  = 'Pedido ventas' ).
      lr_column->set_long_text( value  = 'Pedido ventas' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VBELN_CLI' ).
      lr_column->set_short_text( value  = 'Ped. clte.' ).
      lr_column->set_medium_text( value  = 'Pedido cliente' ).
      lr_column->set_long_text( value  = 'Pedido cliente' ).
    CATCH cx_salv_not_found .
  ENDTRY.
* DTM

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'PUEST_DISP' ).
      lr_column->set_short_text( value  = 'E80' ).
      lr_column->set_medium_text( value  = 'Env. E80' ).
      lr_column->set_long_text( value  = 'Envío a E80' ).
      lr_column->set_icon( if_salv_c_bool_sap=>true ).

    CATCH cx_salv_not_found .
  ENDTRY.

  "Añadimos botón para enviar entrega a E80 solo para Alqueria
  IF p_werks = '3000'.
    TRY.
        l_text = text-b01.
        l_icon = icon_stock.
        lr_functions->add_function(
          name     = 'E80ENVIO'
          icon     = l_icon
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.
  ENDIF.

ENDFORM.



FORM handle_user_command_sup USING i_ucomm TYPE salv_de_function.

  DATA: lt_rows_sup               TYPE salv_t_row,
        lt_entr_est               TYPE zclpp_gestion_cargas_picking=>tty_contab_entrega,
        lt_vbpok                  TYPE TABLE OF vbpok,                                   "DTM
        lt_prot                   TYPE TABLE OF prott,                                   "DTM
        ls_vbkok                  TYPE vbkok,                                            "DTM
        lv_pikmg                  TYPE brgew,                                            "DTM
        lv_string                 TYPE string,
        lt_entregas               TYPE tt_vbeln,
        lv_ret                    TYPE char02,
        lv_peso_alb               TYPE zpeso_alb,
        lv_vbeln                  TYPE vbeln_vl,                                         "DTM
        lv_cpick                  TYPE rfmng,                                            "DTM
        lv_error_any              TYPE xfeld,                                            "DTM
        lv_error_in_item_deletion TYPE xfeld,                                            "DTM
        lv_error_in_pod_update    TYPE xfeld,                                            "DTM
        lv_error_in_interface     TYPE xfeld,                                            "DTM
        lv_error_in_goods_issue   TYPE xfeld,                                            "DTM
        lv_error_in_final_check   TYPE xfeld,                                            "DTM
        lv_error_partner_update   TYPE xfeld,                                            "DTM
        lv_error_sernr_update     TYPE xfeld,                                            "DTM
        lv_error                  TYPE xfeld.                                            "DTM

  PERFORM obtener_seleccion USING gs_dyn100-alv_sup CHANGING lt_rows_sup.

  CASE i_ucomm.

    WHEN 'ASIG_ENT'.

      TRY .

          ASSIGN gt_datos_rv[ lt_rows_sup[ 1 ] ] TO FIELD-SYMBOL(<fs_datos_rv>).

        CATCH cx_root.
          MESSAGE |Seleccionar una carga.| TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.

      IF <fs_datos_rv>-tknum IS NOT INITIAL.
        MESSAGE |Transporte ya creado.| TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

* Si RV en espera, error
      IF <fs_datos_rv>-icon_situacion = '@1T@'.
        MESSAGE |Seleccionar una carga en destino.| TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      CALL FUNCTION 'ZMFPP_SELECCIONAR_ENTREGAS'
        EXPORTING
          i_werks         = gs_dyn100-werks
          iw_2o_remolque  = <fs_datos_rv>-ind_remolque
          iv_carga_max    = <fs_datos_rv>-peso_p_carga "DTM
        IMPORTING
          ot_entregas_sel = lt_entregas
          o_zzpeso_alb    = lv_peso_alb
          o_rc            = lv_ret.

      IF lv_ret = '02'.

        MESSAGE |No hay entregas disponibles para crear transporte| TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.

      ENDIF.

      IF lv_ret = '03' OR lv_ret = '11'.
        EXIT.
      ENDIF.

      CHECK lt_entregas IS NOT INITIAL.

* DTM -Se comprueba si la entrega tiene cantidad de picking pendiente

      " Se obtiene la posición de la entrega
      LOOP AT lt_entregas ASSIGNING FIELD-SYMBOL(<lfs_entregas>).

        CLEAR: ls_vbkok, lt_prot, lt_prot[].

        lv_vbeln = <lfs_entregas>.

        SELECT * FROM lips
          WHERE vbeln EQ @lv_vbeln
            AND kcmeng NE 0
        INTO TABLE @DATA(lt_lips).

        IF sy-subrc EQ 0.

          " Se comprueba si cada posición de la entrega tiene cantidad picking
          LOOP AT lt_lips ASSIGNING FIELD-SYMBOL(<lfs_lips>).

            CLEAR: lv_cpick.

            " Se recogen todos los lotes de cada posición
            SELECT rfmng, plmin FROM vbfa
              WHERE vbelv   EQ @lv_vbeln
                AND posnv   EQ @<lfs_lips>-posnr
                AND vbtyp_n EQ 'Q'
            INTO TABLE @DATA(lt_rfmng).

            IF sy-subrc EQ 0.

              " Se suma la cantidad de los lotes ya borrados
              " que dará la cantidad picking a borrar y se resta
              " la cantidad de los lotes añadidos tras anular
              " la salida de mercancías y borrar el transporte
              LOOP AT lt_rfmng ASSIGNING FIELD-SYMBOL(<lfs_rfmng>).

                IF <lfs_rfmng>-plmin EQ '-'.

                  lv_cpick = lv_cpick - <lfs_rfmng>-rfmng.

                ELSE.

                  lv_cpick = lv_cpick + <lfs_rfmng>-rfmng.

                ENDIF.

              ENDLOOP.

              IF lv_cpick IS NOT INITIAL.

                lv_pikmg = lv_cpick.

                " Se meten en la tabla de borrado los datos de cada posición con cantidad picking
                APPEND INITIAL LINE TO lt_vbpok ASSIGNING FIELD-SYMBOL(<lfs_vbpok>).
                <lfs_vbpok>-vbeln_vl = lv_vbeln.
                <lfs_vbpok>-posnr_vl = <lfs_lips>-posnr.
                <lfs_vbpok>-vbeln    = lv_vbeln.
                <lfs_vbpok>-posnn    = <lfs_lips>-posnr.
                <lfs_vbpok>-pikmg    = lv_pikmg.
                <lfs_vbpok>-plmin    = '-'.
                <lfs_vbpok>-vrkme    = <lfs_lips>-vrkme.
                <lfs_vbpok>-meins    = <lfs_lips>-meins.

                ls_vbkok-vbeln_vl = <lfs_entregas>.
                ls_vbkok-vbeln    = <lfs_entregas>.

              ENDIF.

            ENDIF.

          ENDLOOP.

          " Se elimina la cantidad picking para poder hacer la salida de mercancías
          CALL FUNCTION 'WS_DELIVERY_UPDATE_2'
            EXPORTING
              vbkok_wa                  = ls_vbkok
              synchron                  = 'X'
              commit                    = 'X'
              delivery                  = lv_vbeln
              update_picking            = 'X'
            IMPORTING
              ef_error_any              = lv_error_any
              ef_error_in_item_deletion = lv_error_in_item_deletion
              ef_error_in_pod_update    = lv_error_in_pod_update
              ef_error_in_interface     = lv_error_in_interface
              ef_error_in_goods_issue   = lv_error_in_goods_issue
              ef_error_in_final_check   = lv_error_in_final_check
              ef_error_partner_update   = lv_error_partner_update
              ef_error_sernr_update     = lv_error_sernr_update
            TABLES
              vbpok_tab                 = lt_vbpok
              prot                      = lt_prot
            EXCEPTIONS
              error_message             = 1
              OTHERS                    = 2.

          IF sy-subrc EQ 0. " Se ajusta la cantidad entrega a cantidad picking

            CLEAR: ls_vbkok, lt_prot, lt_prot[].
            ls_vbkok-vbeln_vl = lv_vbeln.
            ls_vbkok-wabuc = 'X'. " SM
            ls_vbkok-komue = 'X'. "Ajuste automático de cantidad entrega a cantidad picking"

            CALL FUNCTION 'WS_DELIVERY_UPDATE'
              EXPORTING
                vbkok_wa                  = ls_vbkok
                delivery                  = lv_vbeln
                update_picking            = 'X'         "Update Picking data
              IMPORTING
                ef_error_in_goods_issue_0 = lv_error
              TABLES
                prot                      = lt_prot
              EXCEPTIONS
                error_message             = 99.

            IF sy-subrc EQ 0 AND lv_error IS INITIAL.

              CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.

              DATA(lv_ajustado) = abap_true.

            ELSE.

              MESSAGE |Error en la contabilización de entrega.| TYPE 'I' DISPLAY LIKE 'E'.
              EXIT.

            ENDIF.

          ENDIF.

        ENDIF.

      ENDLOOP.

* DTM


* Tratamiento cuando hay transporte sin entregas creado anteriormente
      IF <fs_datos_rv>-sw_trans_ko = 'X'.

        DATA(lv_tknum_old) = zclpp_gestion_cargas_picking=>get_tknum_from_rv( i_id_reg_vehiculo = <fs_datos_rv>-id_reg_vehiculo
                                                                              i_werks           = p_werks ).

* DTM - Se comprueba que exista aún el transporte antiguo
        SELECT SINGLE tknum FROM vtfa
          WHERE tknum EQ @lv_tknum_old
        INTO @DATA(lv_tknum).

        IF sy-subrc EQ 0. "Si existe aún, se borra

          CALL METHOD zclpp_gestion_cargas_picking=>borrar_transporte
            EXPORTING
              i_werks = p_werks
              i_tknum = lv_tknum_old
            IMPORTING
              o_rc    = DATA(lv_rc).

        ENDIF.
* DTM

        CALL METHOD zclpp_reg_vehiculo_master=>actualizar_tknum
          EXPORTING
            i_werks       = p_werks
            i_id_reg_vehi = <fs_datos_rv>-id_reg_vehiculo
            i_tknum       = ' '
          IMPORTING
            o_rc          = lv_rc.

      ENDIF.

* Convertir a tabla con estado.
      LOOP AT lt_entregas INTO DATA(ls_entrega).

        APPEND INITIAL LINE TO lt_entr_est ASSIGNING FIELD-SYMBOL(<fs_entrega>).
        <fs_entrega>-vbeln = ls_entrega.

        TRY .
            <fs_entrega>-kostk = gt_datos_entregas[ vbeln = <fs_entrega>-vbeln ]-kostk.
          CATCH cx_root.

        ENDTRY.

      ENDLOOP.

      CALL METHOD zclpp_gestion_cargas_picking=>crear_transporte
        EXPORTING
          i_werks        = gs_dyn100-werks
          i_id_rv        = <fs_datos_rv>-id_reg_vehiculo
          i_cont_log     = <fs_datos_rv>-contenedor_log
          it_vbeln       = lt_entr_est
          i_peso_alb     = lv_peso_alb
          iw_2o_remolque = <fs_datos_rv>-ind_remolque
          iv_ajustado    = lv_ajustado "DTM
        IMPORTING
          o_tknum        = DATA(lv_tknum_new)
          o_rc           = lv_rc.

      CASE lv_rc.
        WHEN '00'.
          <fs_datos_rv>-tknum = lv_tknum_new.
          lv_string = |{ lv_tknum_new ALPHA = OUT }|.
          PERFORM refrescar_alvs.
          MESSAGE |Transporte { lv_string } creado correctamente.| TYPE 'S'.
        WHEN '02'.
          MESSAGE |Error en la creación del transporte.| TYPE 'I' DISPLAY LIKE 'E'.
        WHEN '04'.
          MESSAGE |Error al actualizar estado "Despacho expedición".| TYPE 'I' DISPLAY LIKE 'E'.
        WHEN '05'.
          MESSAGE |Error en la contabilización de entrega.| TYPE 'I' DISPLAY LIKE 'E'.
        WHEN OTHERS.
      ENDCASE.

      PERFORM refrescar_alvs.


    WHEN 'PRINT'.
      TRY .
          ASSIGN gt_datos_rv[ lt_rows_sup[ 1 ] ] TO <fs_datos_rv>.
        CATCH cx_root.
          MESSAGE |Seleccionar registro.| TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.

      IF <fs_datos_rv>-tknum  = ' '.
        MESSAGE |No es posible imprimir documentos sin crear un transporte.| TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      gs_dyn200-tknum = <fs_datos_rv>-tknum.
      CALL SCREEN 0200 STARTING AT 55 4 ENDING AT 110 12. "ancho - alto
    WHEN OTHERS.
  ENDCASE.

ENDFORM.

FORM handle_user_command_inf USING i_ucomm TYPE salv_de_function.

  DATA: lt_rows    TYPE salv_t_row,
        lt_pedidos TYPE  zclpp_capacidad_asignada=>tty_pedidos.

*  CASE i_ucomm.
*    WHEN 'REFRESCAR'.
*      gr_semana->refrescar_datos_ped_sin_asig( ).
*      PERFORM refrescar_alvs USING 'I'.
*    WHEN OTHERS.
*  ENDCASE.


ENDFORM.

FORM obtener_seleccion  USING p_alv TYPE REF TO cl_salv_table
                        CHANGING p_rows TYPE salv_t_row.
  DATA: lr_selections TYPE REF TO cl_salv_selections.

  lr_selections = p_alv->get_selections( ).
  p_rows       = lr_selections->get_selected_rows( ).

ENDFORM.


*FORM aviso CHANGING p_tipo TYPE char1.
*  DATA: lv_answer(1) TYPE c,
*        l_msg        TYPE string.
*
*  CASE p_tipo.
*    WHEN 'X'.
*      l_msg = |Fecha de entrega <= { gr_semana->gc_dias_margen_pedido ALPHA = OUT } días.|.
*    WHEN 'Y'.
*      l_msg = |Fecha de entrega > fecha capacidad + { gr_semana->gc_dias_maximos ALPHA = OUT } días.|.
*    WHEN 'Z'.
*      l_msg = |Reparto con OF creada.|.
*
*    WHEN OTHERS.
*  ENDCASE.
*
*  CALL FUNCTION 'POPUP_TO_CONFIRM'
*    EXPORTING
*      titlebar              = 'AVISO'
*      text_question         = l_msg
*      text_button_1         = 'Cancelar' "
*      icon_button_1         = 'ICON_CANCEL' "
*      text_button_2         = 'Continuar' " 'Cancelar'
*      icon_button_2         = 'ICON_OKAY' " 'Cancelar'
*      default_button        = '1'
*      display_cancel_button = ' '
*    IMPORTING
*      answer                = lv_answer
*    EXCEPTIONS
*      text_not_found        = 1
*      OTHERS                = 2.
*
*  IF lv_answer = '1'.
*    p_tipo = 'E'.
*  ENDIF.

*ENDFORM.

FORM refrescar_alvs. " USING p_which TYPE werks_d.

  PERFORM obtener_datos_rv.
  gs_dyn100-alv_sup->refresh( ).
  SORT gt_datos_rv ASCENDING BY fecha_dest hora_dest.

  PERFORM obtener_datos_entregas.
  gs_dyn100-alv_inf->refresh( ).

ENDFORM.

FORM obtener_datos_rv.

  CLEAR: gt_datos_rv[].

  CALL METHOD zclpp_gestion_cargas_picking=>get_datos_rv
    EXPORTING
      i_werks     = p_werks
    IMPORTING
      ot_datos_rv = gt_datos_rv.

  SORT gt_datos_rv ASCENDING BY fecha_dest hora_dest.

ENDFORM.

FORM obtener_datos_entregas.

  CLEAR: gt_datos_entregas[].

  CALL METHOD zclpp_gestion_cargas_picking=>get_entregas_centro
    EXPORTING
      i_werks     = p_werks
    IMPORTING
      ot_entregas = gt_datos_entregas.

ENDFORM.

FORM tratar_impresiones CHANGING p_error TYPE flag.

* Validar que se haya marcado algún documento
  IF gs_dyn200-sw_albaran     = ' ' AND
    gs_dyn200-sw_certf_carga  = ' ' AND
    gs_dyn200-sw_packing_list = ' '.
    MESSAGE |Marcar algún documento para imprimir.| TYPE 'I' DISPLAY LIKE 'E'.
    p_error = 'X'.
    EXIT.
  ENDIF.


  IF gs_dyn200-sw_albaran = 'X'.

    CALL METHOD zclpp_gestion_cargas_picking=>imprimir_albaranes
      EXPORTING
        i_tknum = gs_dyn200-tknum
      IMPORTING
        o_rc    = DATA(l_rc).

  ENDIF.

  IF gs_dyn200-sw_certf_carga = 'X'.
    CALL METHOD zclpp_gestion_cargas_picking=>imprimir_certif_trans_picking
      EXPORTING
        i_tknum           = gs_dyn200-tknum
        iw_picking_certif = 'C'
      IMPORTING
        o_rc              = l_rc.
    IF l_rc <> '00'.
      MESSAGE |Error al imprimir certificado de transporte.| TYPE 'I' DISPLAY LIKE 'E'.
      p_error = 'X'.
      EXIT.
    ENDIF.
  ENDIF.

  IF gs_dyn200-sw_packing_list = 'X'.
    CALL METHOD zclpp_gestion_cargas_picking=>imprimir_certif_trans_picking
      EXPORTING
        i_tknum           = gs_dyn200-tknum
        iw_picking_certif = 'P'
      IMPORTING
        o_rc              = l_rc.
    IF l_rc <> '00'.
      MESSAGE |Error al imprimir certificado de transporte.| TYPE 'I' DISPLAY LIKE 'E'.
      p_error = 'X'.
      EXIT.
    ENDIF.

  ENDIF.


ENDFORM.

FORM envio_entrega_e80.

  DATA: lt_selected_row TYPE salv_t_row,
        ls_selected_row LIKE LINE OF lt_selected_row,
        lv_lines        TYPE i,
        ls_datos        LIKE LINE OF gt_datos_entregas,
        lt_datos        LIKE gt_datos_entregas,
        likp            TYPE likp.

  lt_selected_row = gs_dyn100-alv_inf->get_selections( )->get_selected_rows( ).

  DESCRIBE TABLE lt_selected_row LINES lv_lines.

  IF lv_lines EQ 0. "No se han seleccionado lineas
    RETURN.
  ELSE.

    LOOP AT lt_selected_row INTO ls_selected_row.
      READ TABLE gt_datos_entregas INTO ls_datos INDEX ls_selected_row.

      IF ls_datos IS NOT INITIAL.

        IF  ls_datos-puest_disp = ' ' AND  ls_datos-kostk = 'A'.

          CALL FUNCTION 'Z_E80_ENVIO_ENTREGAS_PREPA'
            EXPORTING
              i_vbeln = ls_datos-vbeln
              i_werks = p_werks.

          UPDATE likp SET berot = '1'
           WHERE vbeln = ls_datos-vbeln.

          PERFORM obtener_datos_entregas.
          gs_dyn100-alv_inf->refresh( ).

          CLEAR: ls_selected_row, ls_datos.

        ELSEIF ls_datos-puest_disp NE ''.
          MESSAGE 'Entrega ya enviada' TYPE 'S'.

        ELSEIF ls_datos-kostk NE 'A'.
          MESSAGE 'Entrega con picking ya iniciado' TYPE 'S'.

        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
