*&---------------------------------------------------------------------*
*& Report  ZRSSD0001
*&
*&---------------------------------------------------------------------*
* Fecha: 03/10/2024
* Autor: PARTNERSAP - JGM. Empresa: SEIDOR
* Descripción:
* Proyecto Saiti. Modificación pedidos: campo VBAP-ZZFCONFS,
* Fecha de confirmación de servicio
*--------------------------------------------------------------------*
REPORT zrssd0001.

*--------------------------------------------------------------------*
* Declaraciones.
*--------------------------------------------------------------------*
TYPES: BEGIN OF gty_inputdata,
         field_01 TYPE char10,    "Pedido
         field_02 TYPE posnr_va,  "Posición
       END OF gty_inputdata.

TYPES gty_tab_inputdata TYPE STANDARD TABLE OF gty_inputdata.

DATA: gt_input TYPE gty_tab_inputdata.

*--------------------------------------------------------------------*
* Selección.
*--------------------------------------------------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.
PARAMETERS: p_filein TYPE string OBLIGATORY.
SELECTION-SCREEN END OF BLOCK b1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_filein.
  PERFORM f_file_input USING 'XLS'
                       CHANGING p_filein.

*--------------------------------------------------------------------*
* Inicio.
*--------------------------------------------------------------------*
START-OF-SELECTION.

  IF p_filein IS NOT INITIAL.
    PERFORM f_read_file USING p_filein
                        CHANGING gt_input.
  ENDIF.

  IF gt_input IS NOT INITIAL.
    PERFORM f_process CHANGING gt_input.
  ELSE.
*   "Error al abrir el fichero"
    MESSAGE s317(st) DISPLAY LIKE 'E'.
  ENDIF.


*--------------------------------------------------------------------*
* Subrutinas.
*--------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  F_FILE_INPUT
*&---------------------------------------------------------------------*
*       Leer ruta y nombre del fichero de entrada.
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_file_input  USING pi_ext TYPE char3
                   CHANGING po_fpath TYPE string.

  DATA: lt_file   TYPE filetable.
  DATA: ls_file   TYPE file_table.
  DATA: l_rc    TYPE i,
        l_title TYPE string.

  DATA: l_def_ext   TYPE string,
        l_def_fname TYPE string.

  l_title = text-t01.
  l_def_ext = pi_ext.
  l_def_fname = '*.' && pi_ext.

  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      window_title            = l_title
      default_extension       = l_def_ext
      default_filename        = l_def_fname
*     file_filter             =
*     with_encoding           =
*     initial_directory       =
*     multiselection          =
    CHANGING
      file_table              = lt_file
      rc                      = l_rc
*     user_action             =
*     file_encoding           =
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5.

  IF sy-subrc EQ 0 AND
      lt_file IS NOT INITIAL.

    READ TABLE lt_file INTO ls_file INDEX 1.
    IF sy-subrc EQ 0.
      po_fpath = ls_file-filename.
    ENDIF.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_READ_FILE
*&---------------------------------------------------------------------*
*       Leer fichero (formato Excel).
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_read_file  USING pi_file TYPE string
                  CHANGING pt_data TYPE gty_tab_inputdata.

  CONSTANTS:
    lc_inicol TYPE i VALUE 1,
    lc_endcol TYPE i VALUE 2,
    lc_inirow TYPE i VALUE 2,       "Con encabezado=2
*    lc_endrow TYPE i VALUE 1048576.
    lc_endrow TYPE i VALUE 65000.   "65536.

  FIELD-SYMBOLS:  <fs_line>.

  DATA: l_index(2)      TYPE n,
        l_line_name(16) TYPE c,     "Texto: 'LS_DATA-FIELD_..'
        l_file          TYPE rlgrap-filename.

  DATA: ls_excel TYPE alsmex_tabline,
        lt_excel TYPE STANDARD TABLE OF alsmex_tabline.

  DATA: ls_data  TYPE gty_inputdata.


  IF pi_file IS NOT INITIAL.

    l_file = pi_file.

    CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
      EXPORTING
        filename                = l_file
        i_begin_col             = lc_inicol
        i_begin_row             = lc_inirow
        i_end_col               = lc_endcol
        i_end_row               = lc_endrow
      TABLES
        intern                  = lt_excel
      EXCEPTIONS
        inconsistent_parameters = 1
        upload_ole              = 2
        OTHERS                  = 3.
    IF sy-subrc <> 0.
*     Implement suitable error handling here
    ENDIF.

    IF lt_excel IS NOT INITIAL.

      LOOP AT lt_excel INTO ls_excel.
        l_index = ls_excel-col.

        CONCATENATE 'LS_DATA-FIELD_' l_index INTO l_line_name.
        ASSIGN (l_line_name) TO <fs_line>.
        IF <fs_line> IS ASSIGNED.
          <fs_line> = ls_excel-value.
        ENDIF.
        AT END OF row.
          APPEND ls_data TO pt_data.
        ENDAT.
      ENDLOOP.

    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_PROCESS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_INPUT  text
*----------------------------------------------------------------------*
FORM f_process CHANGING pt_input TYPE gty_tab_inputdata.

  DATA: lv_new_date TYPE datum,
        lv_days     TYPE i,
        lv_flag_ok  TYPE flag.

  IF pt_input IS NOT INITIAL.

    LOOP AT pt_input ASSIGNING FIELD-SYMBOL(<fs_input>).
      <fs_input>-field_01 = |{ <fs_input>-field_01 ALPHA = IN }|.
    ENDLOOP.

    SORT pt_input BY field_01 field_02.

    SELECT vbeln, posnr, zzfconfs
      INTO TABLE @DATA(lt_vbap)
      FROM vbap
      FOR ALL ENTRIES IN @pt_input
      WHERE vbeln EQ @pt_input-field_01
        AND posnr EQ @pt_input-field_02.

    IF sy-subrc EQ 0.
      LOOP AT lt_vbap ASSIGNING FIELD-SYMBOL(<fs_vbap>).
*        <fs_vbap>-zzfconfs = <fs_vbap>-zzfconfs + 2.

        "Calcular fecha nueva: fecha ZZFCONFS + 2 días, teniendo en cuenta festivos y calendario:
        "Datos cabecera pedido:
        SELECT SINGLE *
          INTO @DATA(ls_vbak)
          FROM vbak
          WHERE vbeln EQ @<fs_vbap>-vbeln.

        IF sy-subrc EQ 0.
          "Destinatario pedido:
          SELECT SINGLE kunnr
            INTO @DATA(lv_kunwe)
            FROM vbpa
            WHERE vbeln EQ @<fs_vbap>-vbeln
              AND parvw EQ 'WE'.

          IF sy-subrc EQ 0.

            lv_new_date = <fs_vbap>-zzfconfs.
            lv_days = 2.  "Sumar 2 días, ver que no caiga en festivo.

            PERFORM f_calculate_new_date USING ls_vbak lv_kunwe lv_days
                                         CHANGING lv_new_date.
            IF lv_new_date IS NOT INITIAL.
              UPDATE vbap SET zzfconfs = lv_new_date
                          WHERE vbeln EQ <fs_vbap>-vbeln
                            AND posnr EQ <fs_vbap>-posnr.
              IF sy-subrc EQ 0.
                WRITE: / 'OK:', |{ <fs_vbap>-vbeln ALPHA = OUT }|, |{ <fs_vbap>-posnr ALPHA = OUT }|, <fs_vbap>-zzfconfs, '-->', lv_new_date.
                lv_flag_ok = 'X'.
              ELSE.
                WRITE: / 'ERROR:', |{ <fs_vbap>-vbeln ALPHA = OUT }|, |{ <fs_vbap>-posnr ALPHA = OUT }|.
              ENDIF.
            ENDIF.

          ELSE.
            WRITE: / 'Sin destinatario:', |{ <fs_vbap>-vbeln ALPHA = OUT }|, |{ <fs_vbap>-posnr ALPHA = OUT }|.
          ENDIF.
        ENDIF.

      ENDLOOP.

      IF lv_flag_ok EQ 'X'.
        COMMIT WORK AND WAIT.
      ENDIF.
    ELSE.
      WRITE: / 'No se han encontrado pedidos a modificar.'.
    ENDIF.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CALCULATE_NEW_DATE
*&---------------------------------------------------------------------*
*       REFERENCIA: Copiado/adaptado de:
*       Include: MV45AFZZ
*       Clase-método: zsclsd015=>dias_festivos
*----------------------------------------------------------------------*
*      -->P_LS_VBAK  text
*      -->P_LV_KUNWE  text
*      <--P_LV_NEW_DATE  text
*----------------------------------------------------------------------*
FORM f_calculate_new_date  USING    ps_vbak TYPE vbak
                                    p_kunwe TYPE kna1-kunnr
                                    p_days  TYPE i
                           CHANGING p_new_date TYPE sy-datum.
  DATA lv_fecha_1 TYPE datum.
  DATA lv_fecha_2 TYPE datum.

  SELECT SINGLE knfak
    FROM knva
    INTO @DATA(lv_knfak)
    WHERE kunnr = @p_kunwe.

  lv_fecha_1 = p_new_date.

  DO 200 TIMES.
    CALL FUNCTION 'FKK_ADD_WORKINGDAY'
      EXPORTING
        i_date      = lv_fecha_1
        i_days      = p_days
        i_calendar1 = lv_knfak
        i_calendar2 = 'ES'
      IMPORTING
        e_date      = lv_fecha_2.
*      e_return    =

    SELECT SINGLE COUNT(*) FROM zssdt016calendar
      WHERE kunwe EQ p_kunwe
        AND vkorg EQ ps_vbak-vkorg
        AND ( adatu LE lv_fecha_2 AND bdatu GE lv_fecha_2 ).

    IF sy-subrc EQ 0.
      "Si la fecha nueva (+2 días) cae dentro del período de festivos del destinatario, entonces seguir buscando.
      lv_fecha_1 = lv_fecha_2.
    ELSE.
      p_new_date = lv_fecha_2. "Fecha OK -> Salir.
      EXIT.
    ENDIF.
  ENDDO.

ENDFORM.
