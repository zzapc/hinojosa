*&---------------------------------------------------------------------*
*&  Include           ZRSD0016_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_DEFAULT_VALUES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_default_values .
  PERFORM get_custo_value USING 'ZRSD0016'
                                'DEFAULT_LGNUM'
                          CHANGING gv_default_lgort.

  PERFORM get_custo_value USING 'ZRSD0016'
                                'DEFAULT_MAT_EMB'
                          CHANGING gv_default_mat_emb.

  CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
    EXPORTING
      input        = gv_default_mat_emb
    IMPORTING
      output       = gv_default_mat_emb
    EXCEPTIONS
      length_error = 1
      OTHERS       = 2.
  IF sy-subrc <> 0 OR gv_default_mat_emb IS INITIAL.
    MESSAGE e215(zsd).
* Implement suitable error handling here
  ENDIF.



  plgort = gv_default_lgort.
ENDFORM.                    " GET_DEFAULT_VALUES
*&---------------------------------------------------------------------*
*&      Form  GET_CUSTO_VALUE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0006   text
*      -->P_0007   text
*      <--P_GV_DEFAULT_LGNUM  text
*----------------------------------------------------------------------*
FORM get_custo_value  USING p_appl TYPE zappl
                            p_clave TYPE zclave
                      CHANGING p_value.
  SELECT SINGLE valor
    INTO p_value
    FROM ztsdpar001
    WHERE appl = p_appl AND
          clave = p_clave.
ENDFORM.                    " GET_CUSTO_VALUE

FORM validar_entrega.
  DATA: lv_vbeln_e TYPE likp-vbeln.
  IF pvbeln_e IS NOT INITIAL.
*    SELECT SINGLE vbeln INTO @lv_vbeln_e
*      FROM likp
*      WHERE vbeln = @pvbeln_e.

    SELECT SINGLE vbeln INTO  lv_vbeln_e
     FROM likp
     WHERE vbeln = pvbeln_e.


    IF sy-subrc <> 0.
      MESSAGE e203(zsd).
    ENDIF.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos .
  CLEAR: gt_posentrega, gv_cli, gv_kunag.

  IF pvbeln_e IS INITIAL OR plgort IS INITIAL.
    MESSAGE s207(zsd) DISPLAY LIKE 'E'.
    LEAVE LIST-PROCESSING.
  ENDIF.

*  SELECT lips~vbeln, lips~posnr, lips~matnr, lips~werks, likp~kunag AS kunnr, lips~arktx, lips~lfimg AS kwmeng, lips~meins AS vrkme, lips~uepos, lips~pstyv, ztsdpalmont~zpaletmont
*    INTO CORRESPONDING FIELDS OF TABLE @gt_posentrega
*    FROM lips
*    INNER JOIN likp ON likp~vbeln = lips~vbeln
*    LEFT JOIN ztsdpalmont ON ztsdpalmont~vbeln = lips~vbeln AND ztsdpalmont~posnr = lips~posnr
*    WHERE lips~vbeln = @pvbeln_e.


  SELECT lips~vbeln lips~posnr lips~matnr lips~werks likp~kunag AS kunnr lips~arktx lips~lfimg AS kwmeng lips~meins AS vrkme lips~uepos lips~pstyv ztsdpalmont~zpaletmont
    INTO CORRESPONDING FIELDS OF TABLE gt_posentrega
    FROM lips
    INNER JOIN likp ON likp~vbeln = lips~vbeln
    LEFT JOIN ztsdpalmont ON ztsdpalmont~vbeln = lips~vbeln AND ztsdpalmont~posnr = lips~posnr
    WHERE lips~vbeln = pvbeln_e.



  IF gt_posentrega IS NOT INITIAL.
    LOOP AT gt_posentrega ASSIGNING FIELD-SYMBOL(<fs_pos>).
      IF <fs_pos>-pstyv = 'ZTA2'.
        <fs_pos>-indickit = 'P'.
      ELSEIF <fs_pos>-pstyv = 'ZTA3'.
        <fs_pos>-indickit = 'H'.
      ENDIF.

      IF <fs_pos>-indickit = 'P'.

        SELECT SINGLE zzkitcomp
          INTO <fs_pos>-zzkitcomp
          FROM zmarcpalet
          WHERE matnr = <fs_pos>-matnr AND
                werks = <fs_pos>-werks AND
                kunnr = <fs_pos>-kunnr.

        IF sy-subrc <> 0.
          SELECT SINGLE zzkitcomp
          INTO <fs_pos>-zzkitcomp
          FROM zmarcpalet
          WHERE matnr = <fs_pos>-matnr AND
                werks = <fs_pos>-werks AND
                kunnr = ''.
        ENDIF.

      ENDIF.

      IF <fs_pos>-zpaletmont = abap_true.
        <fs_pos>-zpaletmont_icon = icon_okay.
      ENDIF.

      IF <fs_pos>-zzkitcomp = 'S'.
        <fs_pos>-zzkitcomp_icon = icon_okay.
      ELSEIF <fs_pos>-zzkitcomp = 'N'.
        <fs_pos>-zzkitcomp_icon = icon_cancel.
      ENDIF.



      IF gv_kunag IS INITIAL.
        gv_kunag = <fs_pos>-kunnr.
        SELECT SINGLE name1
          INTO gv_cli_0100
          FROM kna1
          WHERE kunnr = <fs_pos>-kunnr.
      ENDIF.

    ENDLOOP.
  ENDIF.

ENDFORM.                    " OBTENER_DATOS

*&---------------------------------------------------------------------*
*&      Form  SET_COLUMNS_TECHNICAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LR_COLUMNS  text
*----------------------------------------------------------------------*
FORM set_columns_technical  USING ir_columns TYPE REF TO cl_salv_columns.

  DATA: lr_column  TYPE REF TO cl_salv_column,
        lr_column2 TYPE REF TO cl_salv_column_table.

  TRY.
      lr_column = ir_columns->get_column( 'WERKS' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'KUNNR' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'PSTYV' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'ZPALETMONT' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'ZPALETMONT' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'ZZKITCOMP' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column2 ?= ir_columns->get_column( 'ZPALETMONT_ICON' ).
      lr_column2->set_icon( if_salv_c_bool_sap=>true ).
      lr_column2->set_long_text( 'ZPALETMONT_ICON' ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column2 ?= ir_columns->get_column( 'ZZKITCOMP_ICON' ).
      lr_column2->set_icon( if_salv_c_bool_sap=>true ).
      lr_column2->set_long_text( 'ZZKITCOMP_ICON' ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

*  zzkitcomp_icon

ENDFORM.                    " SET_COLUMNS_TECHNICAL

FORM mostrar_datos .
  CALL SCREEN 100.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_0100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_0100 .
  DATA: lv_field TYPE char30.

  CASE g_okcode.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      LEAVE TO SCREEN 0.
    WHEN 'VER_ENT'.
      GET CURSOR FIELD lv_field.
      IF lv_field = 'PVBELN_E'.
        SET PARAMETER ID 'VL' FIELD pvbeln_e. "i guess parameter id is VRT
        CALL TRANSACTION 'VL03N' AND SKIP FIRST SCREEN.
      ENDIF.
  ENDCASE.
ENDFORM.                    " USER_COMMAND_0100

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DETALLES_PALETIZADO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ROW  text
*----------------------------------------------------------------------*
FORM mostrar_detalles_paletizado  USING    p_row TYPE i.

  DATA: ls_posent TYPE zssd0016ent.

  CLEAR:  gwa_detalle_cliente, gv_name, gv_maktx, gv_cli,
          gv_zzcapicu, gv_zzcanton, gv_zzretrac, gv_zztablero,
          gv_zzcajcont, gv_zzkitcomp, gv_zzmatpal, gv_vista_cliente.

  READ TABLE gt_posentrega INTO ls_posent INDEX p_row.
  IF sy-subrc = 0.
*    Seleccionar información de paletizado por cliente o por material/centro y mostrar dynpro 200
    SELECT SINGLE *
      INTO CORRESPONDING FIELDS OF gwa_detalle_cliente
      FROM zmarcpalet
      WHERE matnr = ls_posent-matnr AND
              werks = ls_posent-werks AND
              kunnr = ls_posent-kunnr.

    IF sy-subrc = 0.
*      PERFORM visibilidad_campos USING 0. "Mostrar campos de cliente
      gv_vista_cliente = abap_true.
      SELECT SINGLE name1 FROM kna1
      INTO gv_cli
      WHERE kunnr = ls_posent-kunnr.

    ELSE.
*      PERFORM visibilidad_campos USING 1. "Ocultar campos de cliente

      SELECT SINGLE *
      INTO CORRESPONDING FIELDS OF gwa_detalle_cliente
      FROM zmarcpalet
      WHERE matnr = ls_posent-matnr AND
            werks = ls_posent-werks AND
            kunnr = ''.
    ENDIF.

    IF gwa_detalle_cliente IS NOT INITIAL.
      PERFORM traer_descriptivos.
      CALL SCREEN 200.
    ELSE.
      MESSAGE i205(zsd) WITH ls_posent-matnr.
    ENDIF.

  ENDIF.

ENDFORM.                    " MOSTRAR_DETALLES_PALETIZADO

*&---------------------------------------------------------------------*
*&      Form  VISIBILIDAD_CAMPOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0      text
*----------------------------------------------------------------------*
FORM visibilidad_campos  USING p_visible TYPE i.
  LOOP AT SCREEN.
    IF screen-name = 'CLIENTE' OR
       screen-name = 'GWA_DETALLE_CLIENTE-KUNNR' OR
       screen-name = 'GV_CLI'.
      screen-invisible = p_visible.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.
ENDFORM.                    " VISIBILIDAD_CAMPOS

*&---------------------------------------------------------------------*
*&      Form  GET_VALUE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ZMARCPALET_ZRETRAC  text
*      <--P_GV_ZZRETRAC  text
*----------------------------------------------------------------------*
FORM get_value  USING    dom
                         campo
                CHANGING value.

  DATA:  lv_dom       TYPE          dd07l-domname,
         t_values_tab TYPE TABLE OF dd07v,
         wa_values    TYPE          dd07v.

  lv_dom = dom.

  CALL FUNCTION 'GET_DOMAIN_VALUES'
    EXPORTING
      domname         = lv_dom
      text            = 'X'
*     FILL_DD07L_TAB  = ' '
    TABLES
      values_tab      = t_values_tab
*     VALUES_DD07L    =
    EXCEPTIONS
      no_values_found = 1
      OTHERS          = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ELSE.
    READ TABLE t_values_tab INTO wa_values WITH KEY domvalue_l = campo.
    value = wa_values-ddtext.
  ENDIF.


ENDFORM.                    " GET_VALUE
*&---------------------------------------------------------------------*
*&      Form  TRAER_DESCRIPTIVOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM traer_descriptivos .

  PERFORM get_value USING 'ZZRETRAC'
                          gwa_detalle_cliente-zzretrac
                    CHANGING gv_zzretrac.

  PERFORM get_value USING 'ZZCAPICU'
                        gwa_detalle_cliente-zzcapicu
                  CHANGING gv_zzcapicu.

  PERFORM get_value USING 'ZZCAJCONT'
                          gwa_detalle_cliente-zzcajcont
                    CHANGING gv_zzcajcont.

  PERFORM get_value USING 'ZZCANTON'
                          gwa_detalle_cliente-zzcanton
                    CHANGING gv_zzcanton.

  PERFORM get_value USING 'ZZTABLERO'
                          gwa_detalle_cliente-zztablero
                    CHANGING gv_zztablero.

  PERFORM get_value USING 'ZZKITCOMP'
                           gwa_detalle_cliente-zzkitcomp
                    CHANGING gv_zzkitcomp.

  PERFORM get_mat_descripcion USING gwa_detalle_cliente-zzmatpal
                                 CHANGING gv_zzmatpal.

  PERFORM get_mat_descripcion USING gwa_detalle_cliente-matnr
                                 CHANGING gv_maktx.

  PERFORM get_werks_name USING gwa_detalle_cliente-werks
                                 CHANGING gv_name.

ENDFORM.                    " TRAER_DESCRIPTIVOS

*&---------------------------------------------------------------------*
*&      Form  GET_ZZMATPAL_DESCRIPCION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GWA_PALETIZADO_CENTRO_ZZMATPAL  text
*      <--P_GV_ZZMATPAL_200  text
*----------------------------------------------------------------------*
FORM get_mat_descripcion  USING    p_matnr
                               CHANGING p_maktx.
  SELECT SINGLE maktx FROM makt
    INTO p_maktx
    WHERE matnr = p_matnr AND
          spras = sy-langu.
ENDFORM.                    " GET_ZZMATPAL_DESCRIPCION

FORM get_werks_name  USING    p_werks
                               CHANGING p_name1.
  SELECT SINGLE name1 FROM t001w
    INTO p_name1
    WHERE werks = p_werks.

ENDFORM.                    " GET_ZZMATPAL_DESCRIPCION

FORM handle_user_command USING i_ucomm TYPE salv_de_function.

  DATA: lr_selections TYPE REF TO cl_salv_selections,
        lt_rows       TYPE        salv_t_row,
        lv_row        TYPE        i.

  lr_selections = gr_table->get_selections( ).

  lt_rows = lr_selections->get_selected_rows( ).

  IF lt_rows IS INITIAL.
    MESSAGE i206(zsd) DISPLAY LIKE 'E'.
  ELSE.
    READ TABLE lt_rows INTO lv_row INDEX 1.
    CASE i_ucomm.
      WHEN 'VER_PAL'.
        PERFORM mostrar_detalles_paletizado USING lv_row.
      WHEN 'PREP_KIT'.
        PERFORM preparar_kit USING lv_row.
    ENDCASE.
  ENDIF.


ENDFORM.                    " handle_user_command

*&---------------------------------------------------------------------*
*&      Form  PREPARAR_KIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ROW  text
*----------------------------------------------------------------------*
FORM preparar_kit  USING    p_row TYPE i.
  CLEAR: gv_pospaletizado.
  READ TABLE gt_posentrega INTO gv_pospaletizado INDEX p_row.

  IF gv_pospaletizado-indickit = 'P'.
    IF gv_pospaletizado-zpaletmont = abap_true.
      MESSAGE i216(zsd) DISPLAY LIKE 'W'.
    ENDIF.
    CALL SCREEN 300.
  ELSE.
    MESSAGE s210(zsd) DISPLAY LIKE 'E'.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_MATERIAL_LOTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_material_lote .
  DATA: lv_matnr           TYPE                   matnr,
        lv_charg           TYPE                   charg_d,
        lv_charg_aux       TYPE                   charg_d,
        lt_clbatch         TYPE STANDARD TABLE OF clbatch,
        lv_cliente_externo TYPE                   char10.

  CLEAR: gs_kit_0300, gv_maktx_0300.

  IF gv_mantr_charg_0300 IS NOT INITIAL.

*   Separar el material y lote por espacio
    SPLIT gv_mantr_charg_0300 AT ' ' INTO lv_matnr lv_charg.
*   Convertir material a código interno
    CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
      EXPORTING
        input        = lv_matnr
      IMPORTING
        output       = lv_matnr
      EXCEPTIONS
        length_error = 1
        OTHERS       = 2.
    IF sy-subrc <> 0.
      MESSAGE i212(zsd) DISPLAY LIKE 'E'. "Material leido incorrecto
      CLEAR: gs_kit_0300, gv_maktx_0300.
      EXIT.
    ENDIF.

*   Comprobar que el material sea el de alguna posición hija
*   gt_posentrega
    READ TABLE gt_posentrega WITH KEY matnr = lv_matnr uepos = gv_pospaletizado-posnr TRANSPORTING NO FIELDS.
    IF sy-subrc <> 0.
      MESSAGE i213(zsd) DISPLAY LIKE 'E'. "El material escaneado no está incluido en el KIT
      CLEAR: gs_kit_0300, gv_maktx_0300.
      EXIT.
    ENDIF.

*   Comprobar material y lote
    SELECT SINGLE matnr charg
      INTO (gs_kit_0300-matnr, gs_kit_0300-charg)
      FROM mcha
      WHERE matnr = lv_matnr AND
            charg = lv_charg.
    IF sy-subrc <> 0.
      MESSAGE i208(zsd) DISPLAY LIKE 'E'. "La combinación de material/lote no existe
      CLEAR: gs_kit_0300, gv_maktx_0300.
      EXIT.
    ENDIF.

* Comprobar que el material/lote no haya sido introducido anteriormente
    READ TABLE gt_kit_0300 WITH KEY matnr = gs_kit_0300-matnr charg = gs_kit_0300-charg TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      MESSAGE i211(zsd) DISPLAY LIKE 'E'. "El material/lote ya ha sido añadido anteriormente
      CLEAR: gs_kit_0300, gv_maktx_0300.
      EXIT.
    ENDIF.

* Comprobar que el material tenga stock libre
*    SELECT SINGLE clabs, meins, maktx
*      INTO ( @gs_kit_0300-lfimg, @gs_kit_0300-meins, @gs_kit_0300-maktx )"@gv_maktx_0300 )
*      FROM mchb
*      INNER JOIN mara ON mara~matnr = mchb~matnr
*      LEFT JOIN makt ON mara~matnr = makt~matnr
*      WHERE mara~matnr = @lv_matnr AND
*            werks = @gv_pospaletizado-werks AND
*            lgort = @plgort AND
*            charg = @lv_charg AND
*            makt~spras = @sy-langu AND
*            clabs > 0.

    SELECT SINGLE clabs meins maktx
      INTO ( gs_kit_0300-lfimg, gs_kit_0300-meins, gs_kit_0300-maktx )"@gv_maktx_0300 )
      FROM mchb
      INNER JOIN mara ON mara~matnr = mchb~matnr
      LEFT JOIN makt ON mara~matnr = makt~matnr AND
                        makt~spras = sy-langu
      WHERE mara~matnr = lv_matnr AND
            werks = gv_pospaletizado-werks AND
            lgort = plgort AND
            charg = lv_charg AND
*            makt~spras = sy-langu AND
            clabs > 0.



    IF sy-subrc <> 0.
      MESSAGE i209(zsd) DISPLAY LIKE 'E'. "La combinación de material/lote no tiene stock libre
      CLEAR: gs_kit_0300, gv_maktx_0300.
      EXIT.
    ENDIF.

* Comprobar que el material/lote pertenezca al cliente de la entrega
    WRITE gv_pospaletizado-kunnr TO lv_cliente_externo.

    CALL FUNCTION 'VB_BATCH_GET_DETAIL'
      EXPORTING
        matnr              = lv_matnr
        charg              = lv_charg
        werks              = gv_pospaletizado-werks
        get_classification = abap_true
      TABLES
        char_of_batch      = lt_clbatch
      EXCEPTIONS
        no_material        = 1
        no_batch           = 2
        no_plant           = 3
        material_not_found = 4
        plant_not_found    = 5
        no_authority       = 6
        batch_not_exist    = 7
        lock_on_batch      = 8
        OTHERS             = 9.
    IF sy-subrc <> 0.
      MESSAGE i217(zsd) DISPLAY LIKE 'E'. "El material/lote no pertenece al cliente
      CLEAR: gs_kit_0300, gv_maktx_0300.
      EXIT.
    ELSE.
      READ TABLE lt_clbatch WITH KEY atnam = 'Z_CLIENTE' atwtb = lv_cliente_externo TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        MESSAGE i217(zsd) DISPLAY LIKE 'E'. "El material/lote no pertenece al cliente
        CLEAR: gs_kit_0300, gv_maktx_0300.
        EXIT.
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.                    " GET_MATERIAL_LOTE
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_0300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_0300 .
  CASE g_okcode.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      CLEAR: g_okcode.
      LEAVE TO SCREEN 0.
    WHEN 'B_LIMPIAR_SCAN'.
      CLEAR: g_okcode.
      CLEAR: gs_kit_0300, gv_maktx_0300, gv_mantr_charg_0300.
    WHEN 'B_ADD'.
      CLEAR: g_okcode.
      PERFORM add_material.
    WHEN 'B_FIN_PALET'.
      CLEAR: g_okcode.
      PERFORM finalizar_palet.
    WHEN 'B_FIN_KIT'.
      CLEAR: g_okcode.
      PERFORM finalizar_kit.
    WHEN 'B_LIMPIAR'.
      CLEAR: g_okcode.
      CLEAR gt_kit_0300.
      gr_table_0300->refresh( ).
  ENDCASE.

ENDFORM.                    " USER_COMMAND_0300

*&---------------------------------------------------------------------*
*&      Form  STATUS_0300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_0300 .
  DATA: lr_selections TYPE REF TO cl_salv_selections,
        lt_rows       TYPE        salv_t_row,
        lt_column     TYPE        salv_t_column,
        l_icon        TYPE        string,
        ls_cell       TYPE        salv_s_cell.

  DATA: lr_functions TYPE REF TO cl_salv_functions_list,
        l_text       TYPE        string.

  DATA: lr_columns TYPE REF TO cl_salv_columns,
        lr_column  TYPE REF TO cl_salv_column_table.

  DATA: lr_events TYPE REF TO cl_salv_events_table.

  CLEAR: gv_mantr_charg_0300.
  LOOP AT SCREEN.
    IF screen-group1 = 'GR1'.
      IF gs_kit_0300-matnr IS INITIAL.
        screen-input = 0.
      ELSE.
        screen-input = 1.
      ENDIF.
    ENDIF.

    IF screen-group1 = 'GR2'.
      IF gt_kit_0300 IS INITIAL.
        screen-input = 0.
      ELSE.
        screen-input = 1.
      ENDIF.
    ENDIF.

    MODIFY SCREEN.
  ENDLOOP.

  IF gr_container_0300 IS NOT BOUND.

    IF cl_salv_table=>is_offline( ) EQ if_salv_c_bool_sap=>false.
      CREATE OBJECT gr_container_0300
        EXPORTING
          container_name = 'CONTAINER_0300'.
    ENDIF.

*... §2 create an ALV table
    TRY.
        cl_salv_table=>factory(
          EXPORTING
            r_container    = gr_container_0300
            container_name = 'CONTAINER_0300'
          IMPORTING
            r_salv_table   = gr_table_0300
          CHANGING
            t_table        = gt_kit_0300 ).
      CATCH cx_salv_msg.                                "#EC NO_HANDLER
    ENDTRY.

*... §3 Functions*
*... §3.1 activate ALV generic Functions
    lr_functions = gr_table_0300->get_functions( ).
    lr_functions->set_all( gc_true ).
*
*... §3.2 include own functions by setting own status
    l_icon = icon_delete.
    TRY.
        l_text = text-b03.
        lr_functions->add_function(
          name     = 'DELETE'
          icon     = l_icon
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.

*... set the columns technical

    lr_columns = gr_table_0300->get_columns( ).

    PERFORM set_columns_width_300 USING lr_columns.
*    lr_columns->set_optimize( gc_true ).

*... §6 register to the events of cl_salv_table

    lr_events = gr_table_0300->get_event( ).
    CREATE OBJECT gr_events_0300.
*
*... §6.1 register to the event USER_COMMAND
    SET HANDLER gr_events_0300->on_user_command FOR lr_events.
*... §7 selections
    lr_selections = gr_table_0300->get_selections( ).
*
*... §7.1 set selection mode
    lr_selections->set_selection_mode( if_salv_c_selection_mode=>multiple ).

*... §8 display the table
    gr_table_0300->display( ).
  ELSE.
    gr_table_0300->refresh( ).
  ENDIF.


ENDFORM.                    " STATUS_0300

FORM set_columns_width_300  USING ir_columns TYPE REF TO cl_salv_columns.

  DATA: lr_column TYPE REF TO cl_salv_column.

  TRY.
      lr_column = ir_columns->get_column( 'MAKTX' ).
*      lr_column->set_technical( if_salv_c_bool_sap=>true ).
      lr_column->set_output_length( 20 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

ENDFORM.                    " SET_COLUMNS_TECHNICAL

FORM set_columns_width_400  USING ir_columns TYPE REF TO cl_salv_columns.

  DATA: lr_column TYPE REF TO cl_salv_column.

  TRY.
      lr_column = ir_columns->get_column( 'MAKTX' ).
*      lr_column->set_technical( if_salv_c_bool_sap=>true ).
      lr_column->set_output_length( 24 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'MEINS' ).
*      lr_column->set_technical( if_salv_c_bool_sap=>true ).
      lr_column->set_output_length( 8 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  ADD_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM add_material .
  DATA: ls_poshija TYPE zssd0016ent.
* Validar condiciones
  READ TABLE gt_kit_0300 WITH KEY matnr = gs_kit_0300-matnr charg = gs_kit_0300-charg TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    MESSAGE i211(zsd) DISPLAY LIKE 'E'. "El material/lote ya ha sido añadido anteriormente
    CLEAR: gs_kit_0300, gv_maktx_0300.
    EXIT.
*    MESSAGE e211(zsd). "El material/lote ya ha sido añadido anteriormente
  ENDIF.

* Validar cantidades
  READ TABLE gt_posentrega WITH KEY matnr = gs_kit_0300-matnr uepos = gv_pospaletizado-posnr INTO ls_poshija.
  IF sy-subrc = 0.
    PERFORM validar_cantidad USING ls_poshija-kwmeng
                                   gs_kit_0300-matnr
                                   gs_kit_0300-lfimg.
  ENDIF.
  APPEND gs_kit_0300 TO gt_kit_0300.
  CLEAR: gs_kit_0300, gv_maktx_0300, gv_mantr_charg_0300.
  gr_table_0300->refresh( ).

ENDFORM.                    " ADD_MATERIAL
*&---------------------------------------------------------------------*
*&      Form  STATUS_0100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_0100 .
  DATA: l_icon TYPE string.
  IF gr_container IS NOT BOUND.

    IF cl_salv_table=>is_offline( ) EQ if_salv_c_bool_sap=>false.
      CREATE OBJECT gr_container
        EXPORTING
          container_name = 'CONTAINER'.
    ENDIF.

*... §2 create an ALV table
    TRY.
        cl_salv_table=>factory(
          EXPORTING
            r_container    = gr_container
            container_name = 'CONTAINER'
          IMPORTING
            r_salv_table   = gr_table
          CHANGING
            t_table        = gt_posentrega ).
      CATCH cx_salv_msg.                                "#EC NO_HANDLER
    ENDTRY.

*... §3 Functions
    DATA: lr_functions TYPE REF TO cl_salv_functions_list,
          l_text       TYPE        string.
*
*... §3.1 activate ALV generic Functions
    lr_functions = gr_table->get_functions( ).
    lr_functions->set_all( gc_true ).
*
*... §3.2 include own functions by setting own status
    TRY.
        l_text = text-b01.
        l_icon = icon_delivery_complete.
        lr_functions->add_function(
          name     = 'VER_PAL'
          icon     = l_icon
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.

    TRY.
        l_text = text-b02.
        l_icon = icon_packing.
        lr_functions->add_function(
          name     = 'PREP_KIT'
          icon     = l_icon
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.

*... set the columns technical
    DATA: lr_columns TYPE REF TO cl_salv_columns,
          lr_column  TYPE REF TO cl_salv_column_table.
*
    lr_columns = gr_table->get_columns( ).
    lr_columns->set_optimize( gc_true ).
*
    PERFORM set_columns_technical USING lr_columns.
*
**... §4 set hotspot column
*    try.
*        lr_column ?= lr_columns->get_column( 'HOTSPOT' ).
*        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
*        lr_column->set_icon( if_salv_c_bool_sap=>true ).
*        lr_column->set_long_text( 'HOTSPOT' ).
*      catch cx_salv_not_found.                          "#EC NO_HANDLER
*    endtry.
*
*... §6 register to the events of cl_salv_table
    DATA: lr_events TYPE REF TO cl_salv_events_table.

    lr_events = gr_table->get_event( ).

    CREATE OBJECT gr_events.
*
*... §6.1 register to the event USER_COMMAND
    SET HANDLER gr_events->on_user_command FOR lr_events.
*... §6.2 register to the event DOUBLE_CLICK
    SET HANDLER gr_events->on_double_click FOR lr_events.
**... §6.3 register to the event LINK_CLICK
*    set handler gr_events->on_link_click for lr_events.
*
*... §7 selections
    DATA: lr_selections TYPE REF TO cl_salv_selections,
          lt_rows       TYPE        salv_t_row,
          lt_column     TYPE        salv_t_column,
          ls_cell       TYPE        salv_s_cell.
*
    lr_selections = gr_table->get_selections( ).
*
*... §7.1 set selection mode
    lr_selections->set_selection_mode( if_salv_c_selection_mode=>single ).

*... §8 display the table
    gr_table->display( ).
  ELSE.
    gr_table->refresh( ).
  ENDIF.

ENDFORM.                    " STATUS_0100

FORM handle_user_command_0300 USING i_ucomm TYPE salv_de_function.

  DATA: lr_selections TYPE REF TO cl_salv_selections,
        lt_rows       TYPE        salv_t_row,
        lv_row        TYPE        i,
        lt_row_delete TYPE        ty_tt_tkit,
        ls_kit        TYPE        ty_tkit.

  lr_selections = gr_table_0300->get_selections( ).
  lt_rows = lr_selections->get_selected_rows( ).

  IF lt_rows IS INITIAL.
    MESSAGE i206(zsd) DISPLAY LIKE 'E'.
  ELSE.
    CASE i_ucomm.
      WHEN 'DELETE'.
        LOOP AT lt_rows INTO lv_row.
          READ TABLE gt_kit_0300 INTO ls_kit INDEX lv_row.
          IF sy-subrc = 0.
            APPEND ls_kit TO lt_row_delete.
          ENDIF.
        ENDLOOP.

        LOOP AT lt_row_delete INTO ls_kit.
          DELETE gt_kit_0300 WHERE matnr = ls_kit-matnr AND charg = ls_kit-charg.
        ENDLOOP.

        gr_table_0300->refresh( ).
    ENDCASE.
  ENDIF.


ENDFORM.                    " handle_user_command
*&---------------------------------------------------------------------*
*&      Form  FINALIZAR_KIT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM finalizar_kit .
  DATA: ls_ztsdpalmont TYPE                   ztsdpalmont,
        lt_ztsdpalmont TYPE STANDARD TABLE OF ztsdpalmont.

  CLEAR: gt_kit_0400, ls_ztsdpalmont.

*  SELECT DISTINCT a~matnr, c~maktx, a~charg, b~clabs AS lfimg, a~meins
*    INTO CORRESPONDING FIELDS OF TABLE @gt_kit_0400
*    FROM ztsdpalkit AS a
*    INNER JOIN mchb AS b ON a~matnr = b~matnr AND a~charg = b~charg
*    LEFT JOIN makt AS c ON a~matnr = c~matnr
*    WHERE a~vbeln = @gv_pospaletizado-vbeln AND
*          a~posnr = @gv_pospaletizado-posnr AND
*          b~werks = @gv_pospaletizado-werks AND
*          b~lgort = @plgort AND
*          c~spras = @sy-langu.


  SELECT DISTINCT a~matnr c~maktx a~charg b~clabs AS lfimg a~meins
    INTO CORRESPONDING FIELDS OF TABLE gt_kit_0400
    FROM ztsdpalkit AS a
    INNER JOIN mchb AS b ON a~matnr = b~matnr AND
                            a~charg = b~charg AND
                            b~lgort = plgort
    LEFT JOIN makt AS c ON a~matnr = c~matnr  AND
                           c~spras = sy-langu
    WHERE a~vbeln = gv_pospaletizado-vbeln AND
          a~posnr = gv_pospaletizado-posnr AND
          b~werks = gv_pospaletizado-werks." AND
*          b~lgort = plgort AND
*          c~spras = sy-langu.


  IF sy-subrc <> 0.
* Mostrar mensaje de error
    MESSAGE i214(zsd) DISPLAY LIKE 'E'. "No se ha generado ningun pallet para el kit
    EXIT.
  ENDIF.

  DELETE gt_kit_0400 WHERE lfimg = 0.
  IF gt_kit_0400 IS INITIAL.
    ls_ztsdpalmont-vbeln = gv_pospaletizado-vbeln.
    ls_ztsdpalmont-posnr = gv_pospaletizado-posnr.
    ls_ztsdpalmont-zpaletmont = abap_true.

    APPEND ls_ztsdpalmont TO lt_ztsdpalmont.
    MODIFY ztsdpalmont FROM TABLE lt_ztsdpalmont.
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
    ELSE.
      ROLLBACK WORK.
    ENDIF.

    PERFORM obtener_datos.
    gr_table_0300->refresh( ).
    gr_table->refresh( ).
    LEAVE TO SCREEN 0.
  ELSE.
    CALL SCREEN 400 STARTING AT 20 6.
    IF g_okcode = 'B_GEN'.
      LEAVE TO SCREEN 0.
      CLEAR g_okcode.
    ENDIF.
  ENDIF.


ENDFORM.                    " FINALIZAR_KIT
*&---------------------------------------------------------------------*
*&      Form  FINALIZAR_PALET
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM finalizar_palet .
  DATA: ls_kit          TYPE ty_tkit,
        lv_new_batch    TYPE charg_d,
        lt_return       TYPE bapiret2_t,
        ls_bapi_gm_head TYPE bapi2017_gm_head_01,
        ls_bapi_gm_item TYPE bapi2017_gm_item_create,
        ls_bapi_gm_code TYPE bapi2017_gm_code,
        ls_return       TYPE bapiret2.

  DATA: lt_allocvaluesnum  TYPE STANDARD TABLE OF bapi1003_alloc_values_num,
        lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char,
        lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr,
        lt_bapi_gm_item    TYPE STANDARD TABLE OF bapi2017_gm_item_create,
        lv_object          TYPE                   bapi1003_key-object,
        lv_class_name      TYPE                   klah-class,
        lv_mat_doc         TYPE                   bapi2017_gm_head_ret-mat_doc.

  DATA: ls_huhdrproposal TYPE                   bapihuhdrproposal,
        lt_itemsproposal TYPE STANDARD TABLE OF bapihuitmproposal,
        ls_itemsproposal TYPE                   bapihuitmproposal,
        ls_bapihuheader  TYPE                   bapihuheader.

*"      ALLOCVALUESCURR STRUCTURE  BAPI1003_ALLOC_VALUES_CURR

  SET UPDATE TASK LOCAL.

  LOOP AT gt_kit_0300 INTO ls_kit.

*   Crear nuevo lote para el material
    CLEAR: lv_new_batch, ls_return, lt_return.

    CALL FUNCTION 'BAPI_BATCH_CREATE'
      EXPORTING
        material = ls_kit-matnr
        plant    = gv_pospaletizado-werks
      IMPORTING
        batch    = lv_new_batch
      TABLES
        return   = lt_return.

    READ TABLE lt_return WITH KEY type = 'E' INTO ls_return.
    IF sy-subrc = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      MESSAGE ID ls_return-id TYPE ls_return-type
        NUMBER ls_return-number WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.
    ENDIF.

    CONCATENATE ls_kit-matnr ls_kit-charg INTO lv_object.

*   Obtener la clase del lote:
    CALL FUNCTION 'VB_BATCH_GET_DETAIL'
      EXPORTING
        matnr              = ls_kit-matnr
        charg              = ls_kit-charg
        werks              = gv_pospaletizado-werks
        get_classification = abap_true
      IMPORTING
        classname          = lv_class_name
      EXCEPTIONS
        no_material        = 1
        no_batch           = 2
        no_plant           = 3
        material_not_found = 4
        plant_not_found    = 5
        no_authority       = 6
        batch_not_exist    = 7
        lock_on_batch      = 8
        OTHERS             = 9.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

* Obtener los detalles del lote anterior
    CLEAR: lt_allocvaluesnum, lt_allocvalueschar, lt_allocvaluescurr, lt_return, ls_return.

    IF lv_class_name IS NOT INITIAL.

      CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
        EXPORTING
          objectkey       = lv_object "Material + Lote
          objecttable     = 'MCH1'
          classnum        = lv_class_name "
          classtype       = '023'
        TABLES
          allocvaluesnum  = lt_allocvaluesnum
          allocvalueschar = lt_allocvalueschar
          allocvaluescurr = lt_allocvaluescurr
          return          = lt_return.

      READ TABLE lt_return WITH KEY type = 'E' INTO ls_return.
      IF sy-subrc = 0.
        MESSAGE ID ls_return-id TYPE ls_return-type
          NUMBER ls_return-number WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4.
      ENDIF.

      CLEAR: ls_return, lt_return.
*   Copiar los detalles al lote nuevo
      CONCATENATE ls_kit-matnr lv_new_batch INTO lv_object.

      CALL FUNCTION 'BAPI_OBJCL_CHANGE'
        EXPORTING
          objectkey          = lv_object "Material + Lote
          objecttable        = 'MCH1'
          classnum           = lv_class_name
          classtype          = '023'
        TABLES
          allocvaluesnumnew  = lt_allocvaluesnum
          allocvaluescharnew = lt_allocvalueschar
          allocvaluescurrnew = lt_allocvaluescurr
          return             = lt_return.

      READ TABLE lt_return WITH KEY type = 'E' INTO ls_return.
      IF sy-subrc = 0.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        MESSAGE ID ls_return-id TYPE ls_return-type
          NUMBER ls_return-number WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = abap_true.
      ENDIF.

    ENDIF.

    CLEAR: ls_bapi_gm_item, ls_itemsproposal.

*   Datos para la BAPI de Mov. de materiales

    ls_bapi_gm_item-material = ls_kit-matnr.
    ls_bapi_gm_item-plant = gv_pospaletizado-werks.
    ls_bapi_gm_item-stge_loc = plgort.
    ls_bapi_gm_item-batch = ls_kit-charg.
    ls_bapi_gm_item-move_type = '311'. "309

    ls_bapi_gm_item-move_mat = ls_kit-matnr.
    ls_bapi_gm_item-entry_qnt = ls_kit-lfimg.
    ls_bapi_gm_item-move_plant = gv_pospaletizado-werks.
    ls_bapi_gm_item-move_stloc = plgort.
    ls_bapi_gm_item-move_batch = lv_new_batch.

    APPEND ls_bapi_gm_item TO lt_bapi_gm_item.

* Datos para la BAPI de crear HU

    ls_itemsproposal-hu_item_type = '1'.
    ls_itemsproposal-pack_qty = ls_kit-lfimg.
    ls_itemsproposal-base_unit_qty = ls_kit-meins.
    ls_itemsproposal-material = ls_kit-matnr.
    ls_itemsproposal-batch = lv_new_batch.
    ls_itemsproposal-plant = gv_pospaletizado-werks.
    ls_itemsproposal-stge_loc = plgort.

    APPEND ls_itemsproposal TO lt_itemsproposal.

  ENDLOOP.

  ls_bapi_gm_head-pstng_date = sy-datum.
  ls_bapi_gm_head-doc_date = sy-datum.
  ls_bapi_gm_code-gm_code = '04'.

  IF lt_bapi_gm_item IS NOT INITIAL.
    CLEAR: ls_return, lt_return.
    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = ls_bapi_gm_head
        goodsmvt_code    = ls_bapi_gm_code
*       TESTRUN          = ' '
*       GOODSMVT_REF_EWM =
      IMPORTING
*       GOODSMVT_HEADRET =
        materialdocument = lv_mat_doc
*       MATDOCUMENTYEAR  =
      TABLES
        goodsmvt_item    = lt_bapi_gm_item
        return           = lt_return.

    READ TABLE lt_return WITH KEY type = 'E' INTO ls_return.
    IF sy-subrc = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      MESSAGE ID ls_return-id TYPE ls_return-type
        NUMBER ls_return-number WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.
    ENDIF.
  ENDIF.

* Crear HU

  IF lv_mat_doc IS NOT INITIAL.
    CLEAR: ls_return, lt_return.

    ls_huhdrproposal-pack_mat = gv_default_mat_emb.
    ls_huhdrproposal-content = gv_pospaletizado-matnr.

    CALL FUNCTION 'BAPI_HU_CREATE'
      EXPORTING
        headerproposal = ls_huhdrproposal
      IMPORTING
        huheader       = ls_bapihuheader
      TABLES
        itemsproposal  = lt_itemsproposal
        return         = lt_return.

    READ TABLE lt_return WITH KEY type = 'E' INTO ls_return.
    IF sy-subrc = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      MESSAGE ID ls_return-id TYPE ls_return-type
        NUMBER ls_return-number WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.
    ENDIF.
  ENDIF.
* Si todo el proceso ha ido bien, guardar los materiales y la HU en la tabla ZTSDPALKIT.
* limpiar la tabla con materiales y actualizar los datos de la DYNPRO:
  DATA: ls_ztsdpalkit TYPE                   ztsdpalkit,
        lt_ztsdpalkit TYPE STANDARD TABLE OF ztsdpalkit.

  LOOP AT gt_kit_0300 INTO ls_kit.
    CLEAR: ls_ztsdpalkit.
    MOVE-CORRESPONDING ls_kit TO ls_ztsdpalkit.
    ls_ztsdpalkit-vbeln = gv_pospaletizado-vbeln.
    ls_ztsdpalkit-posnr = gv_pospaletizado-posnr.
    ls_ztsdpalkit-venum = ls_bapihuheader-hu_id.
    APPEND ls_ztsdpalkit TO lt_ztsdpalkit.
  ENDLOOP.
  MODIFY ztsdpalkit FROM TABLE lt_ztsdpalkit .
  IF sy-subrc = 0.
    COMMIT WORK AND WAIT.
  ELSE.
    ROLLBACK WORK.
  ENDIF.

* Imprimir las etiquetas de los lotes:
  DATA: lv_mtart TYPE mtart.

  LOOP AT lt_itemsproposal INTO ls_itemsproposal.
*    SELECT SINGLE mtart
*      INTO @DATA(lv_mtart)
*      FROM mara
*      WHERE matnr = @ls_itemsproposal-material.

    CLEAR: lv_mtart.
    SELECT SINGLE mtart
      INTO lv_mtart
      FROM mara
      WHERE matnr = ls_itemsproposal-material.



    IF lv_mtart = 'ZPLP'.
      CALL FUNCTION 'ZMFPM_ETIQUETAS'
        EXPORTING
          i_matnr = ls_itemsproposal-material
          i_charg = ls_itemsproposal-batch
          i_pnm   = 'X'.
    ELSEIF lv_mtart = 'ZPMP'.
      CALL FUNCTION 'ZMFPM_ETIQUETAS'
        EXPORTING
          i_matnr = ls_itemsproposal-material
          i_charg = ls_itemsproposal-batch
          i_lpm   = 'X'.
    ENDIF.
  ENDLOOP.

  CLEAR: gs_kit_0300, gt_kit_0300.

  gr_table_0300->refresh( ).

ENDFORM.                    " FINALIZAR_PALET
*&---------------------------------------------------------------------*
*&      Form  STATUS_0400
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_0400 .
  DATA: lr_selections TYPE REF TO cl_salv_selections,
        lr_functions  TYPE REF TO cl_salv_functions_list.
  DATA: lr_columns TYPE REF TO cl_salv_columns,
        lr_column  TYPE REF TO cl_salv_column_table.

  IF gr_container_0400 IS NOT BOUND.

    IF cl_salv_table=>is_offline( ) EQ if_salv_c_bool_sap=>false.
      CREATE OBJECT gr_container_0400
        EXPORTING
          container_name = 'CONTAINER_0400'.
    ENDIF.

*... §2 create an ALV table
    TRY.
        cl_salv_table=>factory(
          EXPORTING
            r_container    = gr_container_0400
            container_name = 'CONTAINER_0400'
          IMPORTING
            r_salv_table   = gr_table_0400
          CHANGING
            t_table        = gt_kit_0400 ).
      CATCH cx_salv_msg.                                "#EC NO_HANDLER
    ENDTRY.

    lr_functions = gr_table_0400->get_functions( ).
    lr_functions->set_all( gc_true ).

*... set the columns technical

    lr_columns = gr_table_0400->get_columns( ).
    PERFORM set_columns_width_400 USING lr_columns.

*... §7 selections
    lr_selections = gr_table_0400->get_selections( ).
*
*... §7.1 set selection mode
    lr_selections->set_selection_mode( if_salv_c_selection_mode=>single ).

    gr_table_0400->display( ).
  ELSE.
    gr_table_0400->refresh( ).
  ENDIF.
ENDFORM.                    " STATUS_0400
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_0400
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_0400 .
  CASE g_okcode.
    WHEN 'BACK' OR 'EXIT' OR 'CANCEL'.
      CLEAR: g_okcode.
      LEAVE TO SCREEN 0.
    WHEN 'B_GEN'.
      PERFORM generar_excedentes.
  ENDCASE.

ENDFORM.                    " USER_COMMAND_0400
*&---------------------------------------------------------------------*
*&      Form  GENERAR_EXCEDENTES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM generar_excedentes .

  DATA: ls_kit          TYPE                   ty_tkit,
        lv_new_batch    TYPE                   charg_d,
        lt_return       TYPE                   bapiret2_t,
        lt_return_lotes TYPE                   bapiret2_t,
        ls_bapi_gm_head TYPE                   bapi2017_gm_head_01,
        ls_bapi_gm_item TYPE                   bapi2017_gm_item_create,
        ls_bapi_gm_code TYPE                   bapi2017_gm_code,
        ls_return       TYPE                   bapiret2,
        ls_ztsdpalmont  TYPE                   ztsdpalmont,
        lt_ztsdpalmont  TYPE STANDARD TABLE OF ztsdpalmont.

  DATA: lt_allocvaluesnum  TYPE STANDARD TABLE OF bapi1003_alloc_values_num,
        lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char,
        lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr,
        lt_bapi_gm_item    TYPE STANDARD TABLE OF bapi2017_gm_item_create,
        lv_object          TYPE                   bapi1003_key-object,
        lv_class_name      TYPE                   klah-class,
        lv_mat_doc         TYPE                   bapi2017_gm_head_ret-mat_doc.

  DATA: ls_huhdrproposal TYPE                   bapihuhdrproposal,
        lt_itemsproposal TYPE STANDARD TABLE OF bapihuitmproposal,
        ls_itemsproposal TYPE                   bapihuitmproposal,
        ls_bapihuheader  TYPE                   bapihuheader.

*"      ALLOCVALUESCURR STRUCTURE  BAPI1003_ALLOC_VALUES_CURR

  SET UPDATE TASK LOCAL.

  LOOP AT gt_kit_0400 INTO ls_kit.

*   Crear nuevo lote para el material
    CLEAR: lv_new_batch, ls_return, lt_return.

    CALL FUNCTION 'BAPI_BATCH_CREATE'
      EXPORTING
        material = ls_kit-matnr
        plant    = gv_pospaletizado-werks
      IMPORTING
        batch    = lv_new_batch
      TABLES
        return   = lt_return.

    READ TABLE lt_return WITH KEY type = 'E' INTO ls_return.
    IF sy-subrc = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      MESSAGE ID ls_return-id TYPE ls_return-type
        NUMBER ls_return-number WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4.
    ELSE.
      APPEND LINES OF lt_return TO lt_return_lotes.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.
    ENDIF.

    CONCATENATE ls_kit-matnr ls_kit-charg INTO lv_object.

*   Obtener la clase del lote:
    CALL FUNCTION 'VB_BATCH_GET_DETAIL'
      EXPORTING
        matnr              = ls_kit-matnr
        charg              = ls_kit-charg
        werks              = gv_pospaletizado-werks
        get_classification = 'X'
      IMPORTING
        classname          = lv_class_name
      EXCEPTIONS
        no_material        = 1
        no_batch           = 2
        no_plant           = 3
        material_not_found = 4
        plant_not_found    = 5
        no_authority       = 6
        batch_not_exist    = 7
        lock_on_batch      = 8
        OTHERS             = 9.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

    IF lv_class_name IS NOT INITIAL.
* Obtener los detalles del lote anterior
      CLEAR: lt_allocvaluesnum, lt_allocvalueschar, lt_allocvaluescurr, lt_return, ls_return.

      CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
        EXPORTING
          objectkey       = lv_object "Material + Lote
          objecttable     = 'MCH1'
          classnum        = lv_class_name "
          classtype       = '023'
        TABLES
          allocvaluesnum  = lt_allocvaluesnum
          allocvalueschar = lt_allocvalueschar
          allocvaluescurr = lt_allocvaluescurr
          return          = lt_return.

      READ TABLE lt_return WITH KEY type = 'E' INTO ls_return.
      IF sy-subrc = 0.
        MESSAGE ID ls_return-id TYPE ls_return-type
          NUMBER ls_return-number WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4.
      ENDIF.

      CLEAR: ls_return, lt_return.
*   Copiar los detalles al lote nuevo

      CONCATENATE ls_kit-matnr lv_new_batch INTO lv_object.

      CALL FUNCTION 'BAPI_OBJCL_CHANGE'
        EXPORTING
          objectkey          = lv_object "Material + Lote
          objecttable        = 'MCH1'
          classnum           = lv_class_name
          classtype          = '023'
        TABLES
          allocvaluesnumnew  = lt_allocvaluesnum
          allocvaluescharnew = lt_allocvalueschar
          allocvaluescurrnew = lt_allocvaluescurr
          return             = lt_return.

      READ TABLE lt_return WITH KEY type = 'E' INTO ls_return.
      IF sy-subrc = 0.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        MESSAGE ID ls_return-id TYPE ls_return-type
          NUMBER ls_return-number WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = abap_true.
      ENDIF.
    ENDIF.

    CLEAR: ls_bapi_gm_item, ls_itemsproposal.

*   Datos para la BAPI de Mov. de materiales

    ls_bapi_gm_item-material = ls_kit-matnr.
    ls_bapi_gm_item-plant = gv_pospaletizado-werks.
    ls_bapi_gm_item-stge_loc = plgort.
    ls_bapi_gm_item-batch = ls_kit-charg.
    ls_bapi_gm_item-move_type = '311'. "309'.

    ls_bapi_gm_item-move_mat = ls_kit-matnr.
    ls_bapi_gm_item-entry_qnt = ls_kit-lfimg.
    ls_bapi_gm_item-move_plant = gv_pospaletizado-werks.
    ls_bapi_gm_item-move_stloc = plgort.
    ls_bapi_gm_item-move_batch = lv_new_batch.

    APPEND ls_bapi_gm_item TO lt_bapi_gm_item.

* Datos para la BAPI de crear HU

    ls_itemsproposal-hu_item_type = '1'.
    ls_itemsproposal-pack_qty = ls_kit-lfimg.
    ls_itemsproposal-base_unit_qty = ls_kit-meins.
    ls_itemsproposal-material = ls_kit-matnr.
    ls_itemsproposal-batch = lv_new_batch.
    ls_itemsproposal-plant = gv_pospaletizado-werks.
    ls_itemsproposal-stge_loc = plgort.

    APPEND ls_itemsproposal TO lt_itemsproposal.

  ENDLOOP.

  ls_bapi_gm_head-pstng_date = sy-datum.
  ls_bapi_gm_head-doc_date = sy-datum.
  ls_bapi_gm_code-gm_code = '04'.

  IF lt_bapi_gm_item IS NOT INITIAL.
    CLEAR: ls_return, lt_return.
    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = ls_bapi_gm_head
        goodsmvt_code    = ls_bapi_gm_code
      IMPORTING
        materialdocument = lv_mat_doc
      TABLES
        goodsmvt_item    = lt_bapi_gm_item
        return           = lt_return.

    READ TABLE lt_return WITH KEY type = 'E' INTO ls_return.
    IF sy-subrc = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      MESSAGE ID ls_return-id TYPE ls_return-type
        NUMBER ls_return-number WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4.
    ELSE.
      APPEND LINES OF lt_return TO lt_return_lotes.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.
    ENDIF.
  ENDIF.
  CLEAR: gt_kit_0400.

  ls_ztsdpalmont-vbeln = gv_pospaletizado-vbeln.
  ls_ztsdpalmont-posnr = gv_pospaletizado-posnr.
  ls_ztsdpalmont-zpaletmont = abap_true.

  APPEND ls_ztsdpalmont TO lt_ztsdpalmont.
  MODIFY ztsdpalmont FROM TABLE lt_ztsdpalmont.
  IF sy-subrc = 0.
    COMMIT WORK AND WAIT.
  ELSE.
    ROLLBACK WORK.
  ENDIF.

  CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
    TABLES
      i_bapiret2_tab = lt_return_lotes.

* Imprimir las etiquetas de los lotes:
  DATA: lv_mtart TYPE mtart.

  LOOP AT lt_itemsproposal INTO ls_itemsproposal.
*    SELECT SINGLE mtart
*      INTO @DATA(lv_mtart)
*      FROM mara
*      WHERE matnr = @ls_itemsproposal-material.

    CLEAR: lv_mtart.
    SELECT SINGLE mtart
         INTO lv_mtart
         FROM mara
         WHERE matnr = ls_itemsproposal-material.

    IF lv_mtart = 'ZPLP'.
      CALL FUNCTION 'ZMFPM_ETIQUETAS'
        EXPORTING
          i_matnr = ls_itemsproposal-material
          i_charg = ls_itemsproposal-batch
          i_pnm   = 'X'.
    ELSEIF lv_mtart = 'ZPMP'.
      CALL FUNCTION 'ZMFPM_ETIQUETAS'
        EXPORTING
          i_matnr = ls_itemsproposal-material
          i_charg = ls_itemsproposal-batch
          i_lpm   = 'X'.
    ENDIF.
  ENDLOOP.

  PERFORM obtener_datos.
  gr_table_0300->refresh( ).
  gr_table->refresh( ).
*  LEAVE TO LIST-PROCESSING.
*  SET SCREEN 100.
*  leave to screen 100.
*  SET SCREEN 100.
*  LEAVE SCREEN.
*  CALL SCREEN 100.
*  LEAVE SCREEN
  LEAVE TO SCREEN 0.


ENDFORM.                    " GENERAR_EXCEDENTES
*&---------------------------------------------------------------------*
*&      Form  VALIDAR_CANTIDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_POSHIJA_KWMENG  text
*----------------------------------------------------------------------*
FORM validar_cantidad  USING    p_kwmeng TYPE kwmeng
                                p_matnr TYPE matnr
                                p_lfimg TYPE lfimg.
  DATA: lv_kwmeng_acum TYPE kwmeng.
  DATA: lv_kwmeng_anterior TYPE kwmeng.
  DATA: ls_kit_300 TYPE ty_tkit.
* gv_pospaletizado

* Totalizar las cantidades en lista
  LOOP AT gt_kit_0300 INTO ls_kit_300 WHERE matnr = p_matnr.
    lv_kwmeng_acum = lv_kwmeng_acum + ls_kit_300-lfimg.
  ENDLOOP.

* Obtener cantidad ya paletizada anteriormente
  SELECT SINGLE SUM( lfimg )
    INTO lv_kwmeng_anterior
    FROM ztsdpalkit
    WHERE vbeln = gv_pospaletizado-vbeln AND
          posnr = gv_pospaletizado-posnr AND
          matnr = p_matnr
    GROUP BY vbeln posnr matnr.

  IF p_lfimg + lv_kwmeng_acum + lv_kwmeng_anterior > p_kwmeng.
    MESSAGE i218(zsd) DISPLAY LIKE 'W'.
  ENDIF.

ENDFORM.                    " VALIDAR_CANTIDAD
