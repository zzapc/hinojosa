FORM FRM_KONDI_WERT_924.
*{   INSERT         HEDK919188                                        1
*

 TYPES: BEGIN OF ty_zf15,
    tdlnr type tdlnr,
    vstel type vstel,
    vsbed type vsbed,
    regio type regio,
    pstlz type pstlz.
 TYPES: END OF ty_zf15.

 TYPES: BEGIN OF ty_km,
   kbetr type KBETR_KOND.
 TYPES: END OF ty_km.


 DATA: tt_zf15 type TABLE OF ty_zf15,
       tt_km type TABLE OF ty_km,
       l_km type ty_km.


FIELD-SYMBOLS:  <gasto> TYPE V54A0_SCD_ITEM,
                <gasto2> TYPE v54a0_scdd,
                <vfsi> TYPE  V54A0_VFSI_TAB,
                <gasto3> TYPE V54A0_REFOBJ,
                <gasto4> TYPE V54A0_REFOBJ,
                <gasto_tab> TYPE v54a0_refobj_tab,
                <cond> TYPE komv_t.




  DATA: l_precio  TYPE kwert,
        l_cant    TYPE menge_d,
        l_kbetr   TYPE kbetr,
        lv_tknum  TYPE tknum.

  DATA: t_vtts type TABLE OF vtts,
        t_vtts_p type TABLE OF vtts,
        t_vttp type TABLE OF vttp,
        l_vttp type vttp,
        t_vtsp type TABLE OF vtsp,
        l_vttk type vttk.

  DATA: wa_gasto TYPE char100 VALUE '(SAPMV54A)G_SCD_ITEM_WA'.
  DATA: wa_gasto2 TYPE char100 VALUE '(SAPLV54C)C_SCD'.
  DATA: wa_vsfi TYPE char100 VALUE '(SAPLV54B)G_VFSI[]'.
  DATA: wa_gasto3 TYPE char100 VALUE '(SAPLV54C)I_REFOBJ'.
  DATA: cond TYPE char100 VALUE '(SAPLV61A)TKOMV[]'.


  data: WA_SAVE_D TYPE CHAR100 VALUE '(SAPLV54U)I_REFOBJ_TAB'.
  ASSIGN (wa_gasto) TO <gasto>.

  ASSIGN (wa_gasto2) TO <gasto2>.
  ASSIGN (wa_gasto3) TO <gasto3>.
  ASSIGN (wa_vsfi) TO <vfsi>.
  ASSIGN (WA_SAVE_D) TO <gasto_tab>.
  If <gasto_tab> is ASSIGNED.
    READ TABLE <gasto_tab> ASSIGNING <gasto4> INDEX 1.
   ENDIF.
  ASSIGN (cond) TO <cond>.


  if <gasto3> is ASSIGNED OR <gasto> is ASSIGNED.
  If <gasto3> IS ASSIGNED.
    lv_tknum = <gasto3>-vttkf-tknum.
  ELSE.
    lv_tknum = <gasto>-vfkp-rebel.
  ENDIF.
  else.
    iF <gasto4> IS ASSIGNED.
      lv_tknum = <gasto4>-vttkf-tknum.
    endif.
  endif.

  check lv_tknum IS NOT INITIAL.
  DATA: t_tvro type TABLE OF tvro.


  SELECT * INTO TABLE t_vtts FROM vtts WHERE tknum = lv_tknum.

  SELECT c~route INTO CORRESPONDING FIELDS OF TABLE t_tvro FROM vttp as a inner join likp as b on a~vbeln = b~vbeln
    INNER JOIN TVRO as c on b~route = c~route
    WHERE a~tknum = lv_tknum
    ORDER BY c~distz DESCENDING.

  READ TABLE t_tvro into DATA(l_tvro) INDEX 1.


  SELECT * INTO TABLE t_vtts_p FROM vtts WHERE tknum = lv_tknum ORDER BY distz DESCENDING.

  SELECT SINGLE * INTO l_vttk FROM vttk WHERE tknum = lv_tknum.

  SELECT * INTO TABLE t_vttp FROM vttp WHERE tknum = lv_tknum.

  SELECT a~tdlnr d~vstel d~vsbed e~REGION as regio e~POST_CODE1 as pstlz
    INTO TABLE tt_zf15 FROM vttk as a
    inner join vtts as b on a~tknum = b~tknum
    inner join vttp as c on a~tknum = c~tknum
    inner join likp as d on c~vbeln = d~vbeln
    inner join adrc as e on b~adrnz = e~ADDRNUMBER
    WHERE a~tknum = lv_tknum.

SORT tt_zf15 by tdlnr vstel vsbed regio pstlz.

DELETE ADJACENT DUPLICATES FROM tt_zf15 COMPARING ALL FIELDS.


  SELECT * INTO TABLE t_vtsp FROM vtsp WHERE tknum = lv_tknum
    ORDER BY tsnum tpnum ASCENDING.

  DATA: l_precio_aux  TYPE kwert,
        l_precio_km   TYPE kwert,
        l_100         TYPE kbetr VALUE '100.00',
        l_kbetr_km    TYPE kbetr,
        l_total       TYPE kwert,
        l_volum_t     TYPE volum,
        l_entr_e      type i,
        l_por_km      TYPE menge_d,
        l_km_t        TYPE distz,
        l_km_e        TYPE distz,
        l_por_vol     TYPE volum,
        l_50_vol      TYPE kwert,
        l_50_km       TYPE kwert,
        t_likp type table of likp,
        l_fijo type flag.

        CLEAR: l_fijo.

  "Primera etapa para obtener el vstel
  "ASC >>> 05.06.24 En PRD llegan las etapas ordenadas de otra forma....
*  READ TABLE t_vtts into DATA(l_etapa1) index 1.
  DATA: lv_vstel_ini TYPE vstela,
        l_etapa1     TYPE vtts.
  CLEAR: l_etapa1, lv_vstel_ini.
  SELECT SINGLE * INTO l_etapa1 FROM vtts WHERE tknum = lv_tknum
                                            AND vstel <> lv_vstel_ini.
   "ASC <<< 05.06.24


  DATA(l_cont) = LINES( t_vtts ).

  "Precio por parada en las etapas
  SELECT SINGLE b~kbetr
    INTO l_kbetr
    FROM a952 AS a
    INNER JOIN konp AS b ON a~knumh = b~knumh
                        AND a~kschl = b~kschl
   WHERE a~kschl = 'ZF20'
     AND a~tdlnr = L_vttk-tdlnr
     AND a~vstel = l_etapa1-vstel
     AND a~route = komp-zzroute
     AND b~LOEVM_KO = space
     AND a~datab <= sy-datum
     AND a~datbi >= sy-datum
     AND a~kbstat = space.
   IF sy-subrc <> 0.
  SELECT SINGLE b~kbetr
    INTO l_kbetr
    FROM a944 AS a
    INNER JOIN konp AS b ON a~knumh = b~knumh
                        AND a~kschl = b~kschl
   WHERE a~kschl = 'ZF20'
     AND a~tdlnr = L_vttk-tdlnr
     AND a~vstel = l_etapa1-vstel
     AND a~vsbed = komk-vsbed
     AND a~regioz = komk-regioz
     AND b~LOEVM_KO = space
     AND a~datab <= sy-datum
     AND a~datbi >= sy-datum
     AND a~kbstat = space.
   IF sy-subrc <> 0.
     SELECT SINGLE b~kbetr
           INTO l_kbetr
           FROM a947 AS a
           INNER JOIN konp AS b ON a~knumh = b~knumh
                               AND a~kschl = b~kschl
          WHERE a~kschl = 'ZF20'
            AND a~tdlnr = L_vttk-tdlnr
            AND a~vstel = l_etapa1-vstel
            AND a~vsbed = komk-vsbed
            AND a~pstlzz = komk-pstlzz
            AND b~LOEVM_KO = space
            AND a~datab <= sy-datum
            AND a~datbi >= sy-datum
            AND a~kbstat = space.
       ENDIF.
   ENDIF.
*  Precio total por paradas
  l_precio = ( l_cont - 1 ) * l_kbetr.


  l_fijo = 'X'.
*   Precio por KM
  SELECT SINGLE b~kbetr
    INTO l_kbetr_km
    FROM a952 AS a
    INNER JOIN konp AS b ON a~knumh = b~knumh
                        AND a~kschl = b~kschl
   WHERE a~kschl = 'ZF22'
     AND a~tdlnr = L_vttk-tdlnr
     AND a~vstel = l_etapa1-vstel
     AND a~route = l_tvro-route
     AND b~LOEVM_KO = space
     AND a~datab <= sy-datum
     AND a~datbi >= sy-datum
     AND a~kbstat = space.
   IF sy-subrc <> 0.
     If tt_zf15 is not INITIAL.
      SELECT b~kbetr
         INTO table tt_km " l_kbetr_km
         FROM a944 AS a
         INNER JOIN konp AS b ON a~knumh = b~knumh
                         AND a~kschl = b~kschl
        FOR ALL ENTRIES IN tt_zf15
       WHERE a~kschl = 'ZF15'
         AND a~tdlnr = tt_zf15-tdlnr
         AND a~vstel = tt_zf15-vstel
         AND a~vsbed = tt_zf15-vsbed
         AND a~regioz = tt_zf15-regio
         AND b~LOEVM_KO = space
         AND a~datab <= sy-datum
         AND a~datbi >= sy-datum
         AND a~kbstat = space.
        If sy-subrc <> 0.
          SELECT b~kbetr
            INTO table tt_km " l_kbetr_km
            FROM a947 AS a
            INNER JOIN konp AS b ON a~knumh = b~knumh
                                AND a~kschl = b~kschl
            FOR ALL ENTRIES IN tt_zf15
           WHERE a~kschl = 'ZF15'
             AND a~tdlnr = tt_zf15-tdlnr
             AND a~vstel = tt_zf15-vstel
             AND a~vsbed = tt_zf15-vsbed
             AND a~pstlzz = tt_zf15-pstlz
             AND b~LOEVM_KO = space
             AND a~datab <= sy-datum
             AND a~datbi >= sy-datum
             AND a~kbstat = space.
        ENDIF.
      ENDIf.

      SORT tt_km by kbetr DESCENDING.

      IF l_kbetr_km is INITIAL.
        READ TABLE tt_km into l_km INDEX 1.
        If sy-subrc = 0.
          l_kbetr_km = l_km-kbetr.
        ENDIf.
      ENDIF.
   ENDIF.


  "ASC >>> 05.06.24 No está cogiendo bien la última etapa, hay que coger la que más km tenga.
*   READ TABLE t_vtts INTO DATA(l_vtts_f) INDEX l_cont. " última etapa
  SORT t_vtts BY distz DESCENDING.
  READ TABLE t_vtts INTO DATA(l_vtts_f) INDEX 1.
  "ASC <<< 05.06.24



*  KM de la última etapa
   If l_fijo is NOT INITIAL.
     l_precio_km = l_kbetr_km.
   else.
     l_precio_km = ( l_kbetr_km * l_vtts_f-distz ) / 1000.
   endif.
*   Volumen de las entregas
   SELECT * INTO CORRESPONDING FIELDS OF TABLE t_likp
     FROM vttp AS a
     INNER JOIN likp AS b ON a~vbeln = b~vbeln
     WHERE a~tknum = lv_tknum.

   SELECT SUM( b~volum )
     into l_volum_t
     FROM vttp as a
     inner join likp as b ON a~vbeln = b~vbeln
     WHERE a~tknum = lv_tknum.


  DATA: lv_tpnum type tpnum,
        l_vbeln_act type vbeln.

  CLEAR: lv_tpnum.

  l_vbeln_act = komp-userf1_num.

  MOVE komp-kposn TO lv_tpnum.

  READ TABLE t_vtsp INTO DATA(l_vtsp) INDEX lv_tpnum.

*  SELECT SINGLE * INTO l_vttp FROM vttp WHERE tknum = lv_tknum AND Tpnum = l_vtsp-tpnum.
  SELECT SINGLE * INTO l_vttp FROM vttp WHERE tknum = lv_tknum AND vbeln = l_vbeln_act.

*  READ TABLE t_likp INTO DATA(l_likp) WITH KEY vbeln = l_vttp-vbeln.
  READ TABLE t_likp INTO DATA(l_likp) WITH KEY vbeln = l_vbeln_act.
  CHECK sy-subrc = 0.

   l_total = l_precio + l_precio_km.

  IF l_volum_t IS NOT INITIAL.
    l_por_vol = ( l_likp-volum * l_100 / l_volum_t ) * 10.
  ENDIF.

  READ TABLE t_vtts INTO DATA(l_vtts_e) WITH KEY kunnz = l_likp-kunnr.

  SELECT SINGLE COUNT(*)
    into l_entr_e
    FROM vttp as a
    inner join likp as b ON a~vbeln = b~vbeln
    WHERE a~tknum = lv_tknum
      AND b~kunnr = l_likp-kunnr.

*  Km por entrega
   l_km_e = ( l_vtts_e-distz / l_entr_e ).

*  Km totales de todos los tramos.
   SELECT SUM( distz ) into l_km_t FROM vtts WHERE tknum = lv_tknum.

  l_por_km = ( ( l_km_e * l_100 ) / l_km_t ) * 10.

  l_50_vol = ( ( l_por_vol * 50  ) / 100 ) / 10.
  l_50_km  = ( ( l_por_km  * 50  ) / 100 ) / 10.

  xkwert =  ( ( l_50_vol + l_50_km ) * l_total ) / 10000.


  DATA(l_cont_likp) = LINES( t_likp ).

  CLEAR: l_precio_aux.

  READ TABLE t_likp into DATA(l_likp_pos) INDEX l_cont_likp.

  DATA(l_cont_vtsp) = LINES( t_vtsp ).
  READ TABLE t_vtsp into DATA(l_vtsp_aux) index l_cont_vtsp.

  READ TABLE t_vttp into DATA(l_vttp_pf) WITH KEY tpnum = l_vtsp_aux-tpnum.

  DATA(l_cont_cond) = lines( <cond> ).

  READ TABLE <cond> into DATA(l_cond) index l_cont_cond.

  DATA(l_cont_n) = l_cont_likp - 1.
**TKOMV[]
**
*  If <cond> is ASSIGNED.
*    If  ( l_cond-kposn MOD l_cont_n ) = 0 AND l_cond-kposn > 0.
*
*     LOOP AT <cond> ASSIGNING FIELD-SYMBOL(<pos_cond>) WHERE kschl = 'ZF30' AND kposn < l_cont_likp.
*       l_precio_aux = l_precio_aux + <pos_cond>-kwert.
*     ENDLOOP.
*
*     l_precio_aux = l_precio_aux + xkwert - l_total .
*
*    ENDIF.
*  ENDIF.

  ykbetr = konv-kbetr = xkwert = xkwert - l_precio_aux.


*  xkomv-ksteu = konv-ksteu = 'A'.
*  xkomv-kmprs = konv-kmprs = 'X'.

*}   INSERT
ENDFORM.
