*&---------------------------------------------------------------------*
*& Report  ZSSDD099                                                    *
* ZRSSDLE0001 - Monitor para expediciones Subco
*----------------------------------------------------------------------*
* Autor : Rodolfo Malea.SEIS                                           *
* Date : 30.04.2024                                                    *
*----------------------------------------------------------------------*
REPORT zrssdle0001.

"""""""""""""""""
" Constantes
"""""""""""""""""
CONSTANTS: cg_operation_borrar   TYPE msgfn VALUE '003',
           cg_operation_modif    TYPE msgfn VALUE '004',
           cg_operation_sust     TYPE msgfn VALUE '005',
           cg_operation_original TYPE msgfn VALUE '009',
           cg_operation_espera   TYPE msgfn VALUE '023',
           cg_operation_enviar   TYPE msgfn VALUE '018'.

CONSTANTS: cg_dynpro_main TYPE sy-dynnr VALUE '0100',
           cg_dynpro_zsto TYPE sy-dynnr VALUE '0110',
           cg_dynpro_ztra TYPE sy-dynnr VALUE '0120',
           cg_dynpro_vtas TYPE sy-dynnr VALUE '9002',
           cg_dynpro_impr TYPE sy-dynnr VALUE '9004',
           cg_dynpro_hu   TYPE sy-dynnr VALUE '9005'.

*CONSTANTS: cg_knumh_new TYPE a018-knumh VALUE '$000000001'.

CONSTANTS: cg_boton_anyadir     TYPE ui_func VALUE 'ANYADIR',
           cg_boton_transporte  TYPE ui_func VALUE 'TRANSPORTE',
           cg_boton_quitar      TYPE ui_func VALUE 'QUITAR',
           cg_boton_datos_trans TYPE ui_func VALUE 'DATOS_TRANS',
           cg_boton_refresh     TYPE ui_func VALUE 'REFRESH',
           cg_boton_imprimir    TYPE ui_func VALUE 'IMPRIMIR',
           cg_boton_ver_log     TYPE ui_func VALUE 'VERLOG',
           cg_boton_ver_adrnr   TYPE ui_func VALUE 'ADRNR',
           cg_boton_ver_adrnr2  TYPE ui_func VALUE 'ADRNR2',
           cg_boton_det_mat     TYPE ui_func VALUE 'DETMAT',
           cg_boton_def_hu      TYPE ui_func VALUE 'DEFHUS',
           cg_boton_finalizar   TYPE ui_func VALUE 'FINALI'.

*CONSTANTS: cg_doc_type_oferta TYPE vbak-auart VALUE 'ZVA'.

"""""""""""""""""
" Tipos de datos
"""""""""""""""""
TYPES: BEGIN OF st_lin_alv.
         INCLUDE TYPE zst_sdle_zrsdle0001_alv.
       TYPES END OF st_lin_alv.



"""""""""""""""""""""""
" Control pestañas
""""""""""""""""""""""
CONSTANTS: BEGIN OF c_c_ficha,
             tab1 LIKE sy-ucomm VALUE 'ZSTO',
             tab2 LIKE sy-ucomm VALUE 'ZTRA',
           END OF c_c_ficha.

CONTROLS:  c_ficha TYPE TABSTRIP.
DATA: BEGIN OF g_c_ficha,
        subscreen   LIKE sy-dynnr,
        prog        LIKE sy-repid VALUE sy-repid,
        pressed_tab LIKE sy-ucomm VALUE c_c_ficha-tab1,
      END OF g_c_ficha.

"""""""""""""""""
" Includes
"""""""""""""""""
INCLUDE zseis_patron_alv.
INCLUDE <cl_alv_control>.

"""""""""""""""""
" Variables globalres
"""""""""""""""""
*DATA: tg_excel         TYPE zssdd099_t_excel.
*
*DATA rg_excel TYPE REF TO zcl_excel.
TABLES: ztsdle0001, zst_sdle_zrsdle0001_datos_vta, zst_sdle_zrsdle0001_datos_semi, zst_sdle_zrsdle0001_datos_impr, zst_sdle_zrsdle0001_datos_hu.

DATA: gv_matnr TYPE matnr_d,
      gv_charg TYPE charg_d.

DATA: gs_trans_cab             TYPE zst_sdle_transp_cab,
      gv_ok                    TYPE xflag,
      gv_destino_trans         TYPE ztsdle0001-destino,
      gv_permite_venta         TYPE xflag,
      gv_show_alv_dynpro_venta TYPE xflag,
      gv_error_ejecucion       TYPE xflag,
      gv_error_ejecucion_1ar   TYPE xflag,
      vg_fentcl                TYPE zed_fecha_ent_cliente,
      vg_fentse                TYPE zed_fecha_ent_servicio,
      vg_zzfconfs              TYPE vbap-zzfconfs,
      vg_ebeln                 TYPE ebeln,
      vg_vbeln                 TYPE vbeln,
      vg_kunag                 TYPE zst_sdle_zrsdle0001_datos_vta-kunag,
      vg_kunwe                 TYPE zst_sdle_zrsdle0001_datos_vta-kunwe.


"""""""""""""""""
" Pantalla de selección
"""""""""""""""""
PARAMETERS: p_resp  TYPE zed_responsable MODIF ID res OBLIGATORY DEFAULT sy-uname,
            p_lifnr TYPE lifnr DEFAULT '0000100944',
            p_werks TYPE werks_d DEFAULT '2000',
            p_lgort TYPE lgort_d DEFAULT 'P001'.
SELECT-OPTIONS: s_matnrf FOR gv_matnr,
                s_chargf FOR gv_charg,
                s_matnrs FOR gv_matnr,
                s_fentcl FOR vg_fentcl,
                s_fentse FOR vg_fentse,
                s_fconfs FOR vg_zzfconfs,
                s_ebeln FOR vg_ebeln,
                s_vbeln FOR vg_vbeln,
                s_kunag FOR vg_kunag,
                s_kunwe FOR vg_kunwe.
PARAMETERS: p_consu TYPE xflag DEFAULT 'X' AS CHECKBOX.

SELECTION-SCREEN BEGIN OF BLOCK out WITH FRAME TITLE text-001.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_elik1 RADIOBUTTON GROUP grp1 DEFAULT 'X'.
SELECTION-SCREEN COMMENT (10) text-012 FOR FIELD p_elik1.
PARAMETERS: p_elik2 RADIOBUTTON GROUP grp1.
SELECTION-SCREEN COMMENT (10) text-013 FOR FIELD p_elik2.
PARAMETERS: p_elik3 RADIOBUTTON GROUP grp1.
SELECTION-SCREEN COMMENT (10) text-014 FOR FIELD p_elik3.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK out.

SELECTION-SCREEN BEGIN OF BLOCK out2 WITH FRAME TITLE text-015.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_proc1 RADIOBUTTON GROUP grp2.
SELECTION-SCREEN COMMENT (15) text-016 FOR FIELD p_proc1.
PARAMETERS: p_proc2 RADIOBUTTON GROUP grp2.
SELECTION-SCREEN COMMENT (20) text-017 FOR FIELD p_proc2.
PARAMETERS: p_proc3 RADIOBUTTON GROUP grp2.
SELECTION-SCREEN COMMENT (10) text-020 FOR FIELD p_proc3.
PARAMETERS: p_proc4 RADIOBUTTON GROUP grp2 DEFAULT 'X'.
SELECTION-SCREEN COMMENT (10) text-018 FOR FIELD p_proc4.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK out2.

AT SELECTION-SCREEN OUTPUT.
**  LOOP AT SCREEN.
**    IF screen-group1 = 'RES'.
**      screen-invisible = '1'.  " Oculta el campo
**      screen-active = '0'.     " Desactiva el campo
**      MODIFY SCREEN.
**    ENDIF.
**  ENDLOOP.

  """"""""""""""""""""""
  "Rutinas
  """"""""""""""""""""""

*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_initialization.
  DATA: wl_config_edit TYPE st_config_edit.

  vg_ventana_inicial            = cg_dynpro_main.
  vg_no_justif_cols             = 'X'.
  vg_alv_protegido_por_defecto  = 'X'.

  PERFORM f_config_dynpro USING  cg_dynpro_main ''  'T01' 'STA_0100' ' ' 'X'.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_zsto 'CC_ALV_ZSTO' 'T11' 'X'.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_ztra 'CC_ALV_ZTRA' 'T12' 'X'.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_vtas 'CC_ALV_VTAS' 'T92' 'X'.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_impr 'CC_ALV_IMPR' 'T94' 'X'.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_hu 'CC_ALV_DEFHU' 'T95' 'X'.


  CLEAR wl_config_edit.
  wl_config_edit-dynpro                 = cg_dynpro_hu.
*  wl_config_edit-es_cabecera            = 'X'.
*  wl_config_edit-nombre_tabla           = 'ZGL017'.
*  wl_config_edit-borrado_logico         = 'X'.
*  wl_config_edit-campo_borrado_logico   = 'BORRADO'.
  PERFORM f_config_dynpro_edit    USING  wl_config_edit.

  "Configuración objeto de bloqueo

  DATA(tl_params_objeto_bloqueo) = VALUE tt_config_params_bloqueo( ( nombre_param = 'NUMTRANSPORTE'
                                                                     nombre_campo = 'gs_trans_cab-NUMTRANSPORTE'
                                                                     es_variable  = 'X' ) ).
  PERFORM f_config_objeto_bloqueo USING 'EZ_ZTSDLE0001' tl_params_objeto_bloqueo.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CREAR_CATALOGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_catalogo TABLES it_catalogo TYPE lvc_t_fcat USING vp_dynnr.

**  wa_layout-info_fname = 'COLOR'.
**  wa_layout-sel_mode = 'A'.
  FREE it_catalogo.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZST_SDLE_ZRSDLE0001_ALV'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_catalogo[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  DELETE it_catalogo WHERE fieldname = 'NUMTRANSPORTE'.
  DELETE it_catalogo WHERE fieldname = 'POSICION'.
  DELETE it_catalogo WHERE fieldname = 'VDATU'.
  DELETE it_catalogo WHERE fieldname = 'ADRNR'.
  DELETE it_catalogo WHERE fieldname = 'ORIGEN_ZLNUM'.

*  DELETE it_catalogo WHERE fieldname = 'CHARG'.

  CASE vp_dynnr.
    WHEN cg_dynpro_zsto.
*      DELETE it_catalogo WHERE fieldname = 'MENGE_TEORICO'.
*      DELETE it_catalogo WHERE fieldname = 'MEINS_TEORICO'.
      DELETE it_catalogo WHERE fieldname = 'MENGE_REAL'.
      DELETE it_catalogo WHERE fieldname = 'MEINS_REAL'.
      DELETE it_catalogo WHERE fieldname = 'KWMENG_REAL'.
      DELETE it_catalogo WHERE fieldname = 'PROCESO'.
*      DELETE it_catalogo WHERE fieldname = 'KUNWE'.
*      DELETE it_catalogo WHERE fieldname = 'BSTKD'.
      DELETE it_catalogo WHERE fieldname = 'BSTDK'.
      DELETE it_catalogo WHERE fieldname = 'ZLNUM'.
      DELETE it_catalogo WHERE fieldname = 'LMEN1'.
      DELETE it_catalogo WHERE fieldname = 'MEINS'.

      DELETE it_catalogo WHERE fieldname = 'CONTADOR'.
      DELETE it_catalogo WHERE fieldname = 'TMENG'.
      DELETE it_catalogo WHERE fieldname = 'VHILM'.
      DELETE it_catalogo WHERE fieldname = 'MAKTX_VHILM'.

      LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>).

        CASE <fs_catalogo>-fieldname.
          WHEN 'TRATADO'.
            <fs_catalogo>-checkbox  = 'X'.
          WHEN 'PROCESO_DESC'.
            <fs_catalogo>-col_pos   = 0.
            <fs_catalogo>-scrtext_s = <fs_catalogo>-scrtext_m = <fs_catalogo>-scrtext_l = 'Proceso'.
            <fs_catalogo>-coltext = 'Proceso'.
          WHEN 'ZZFCONFS'.
            <fs_catalogo>-col_pos   = 20.
****          WHEN 'GBSTA'.
****            <fs_catalogo>-no_out = 'X'.
****          WHEN 'MSTAE'.
****            <fs_catalogo>-no_out = 'X'.
****          WHEN 'MSTAV'.
****            <fs_catalogo>-no_out = 'X'.
****          WHEN 'VMSTA'.
****            <fs_catalogo>-no_out = 'X'.
****          WHEN 'DESC_STATUS_MAT'.
****            <fs_catalogo>-no_out = 'X'.
        ENDCASE.
      ENDLOOP.

    WHEN cg_dynpro_ztra.
*      DELETE it_catalogo WHERE fieldname = 'MATNR_SE'.
*      DELETE it_catalogo WHERE fieldname = 'MAKTX_SE'.
      DELETE it_catalogo WHERE fieldname = 'STOCK'.
      DELETE it_catalogo WHERE fieldname = 'KWMENG_RESTO'.
      DELETE it_catalogo WHERE fieldname = 'MEINS_STOCK'.
      DELETE it_catalogo WHERE fieldname = 'MENGE_RESTO'.
*      DELETE it_catalogo WHERE fieldname = 'MENGE_TEORICO'.
*      DELETE it_catalogo WHERE fieldname = 'MEINS_TEORICO'.
      DELETE it_catalogo WHERE fieldname = 'MENGE_NEC_SE'.
      DELETE it_catalogo WHERE fieldname = 'MEINS_NEC_SE'.
      DELETE it_catalogo WHERE fieldname = 'NUMLOTES'.
*      DELETE it_catalogo WHERE fieldname = 'KUNAG'.
*      DELETE it_catalogo WHERE fieldname = 'VDATU'.
*      DELETE it_catalogo WHERE fieldname = 'NAME1'.
      DELETE it_catalogo WHERE fieldname = 'TRATADO'.
      DELETE it_catalogo WHERE fieldname = 'EBELN'.
      DELETE it_catalogo WHERE fieldname = 'EBELP'.
      DELETE it_catalogo WHERE fieldname = 'PROCESO'.
      DELETE it_catalogo WHERE fieldname = 'PROCESO_DESC'.
      DELETE it_catalogo WHERE fieldname = 'BSTDK'.

      DELETE it_catalogo WHERE fieldname = 'ZLNUM'.
      DELETE it_catalogo WHERE fieldname = 'LMEN1'.
      DELETE it_catalogo WHERE fieldname = 'MEINS'.

      DELETE it_catalogo WHERE fieldname = 'CONTADOR'.
      DELETE it_catalogo WHERE fieldname = 'TMENG'.
      DELETE it_catalogo WHERE fieldname = 'VHILM'.
      DELETE it_catalogo WHERE fieldname = 'MAKTX_VHILM'.

      DELETE it_catalogo WHERE fieldname = 'GBSTA'.
      DELETE it_catalogo WHERE fieldname = 'MSTAE'.
      DELETE it_catalogo WHERE fieldname = 'MSTAV'.
      DELETE it_catalogo WHERE fieldname = 'VMSTA'.
      DELETE it_catalogo WHERE fieldname = 'DESC_STATUS_MAT'.
      DELETE it_catalogo WHERE fieldname = 'ULTIMO_DESTINO'.

      LOOP AT it_catalogo ASSIGNING <fs_catalogo>.

        CASE <fs_catalogo>-fieldname.
          WHEN 'MATNR_FINAL'.
            <fs_catalogo>-col_pos   = 1.
          WHEN 'MAKTX_FINAL'.
            <fs_catalogo>-col_pos   = 2.
          WHEN 'VBELN'.
            <fs_catalogo>-col_pos   = 3.
          WHEN 'POSNR'.
            <fs_catalogo>-col_pos   = 4.
          WHEN 'KWMENG'.
            <fs_catalogo>-col_pos   = 5.
          WHEN 'KWMENG_REAL'.
            <fs_catalogo>-col_pos   = 6.
          WHEN 'VRKME'.
            <fs_catalogo>-col_pos   = 7.
          WHEN 'MATNR_SE'.
            <fs_catalogo>-col_pos   = 8.
          WHEN 'MAKTX_SE'.
            <fs_catalogo>-col_pos   = 9.
          WHEN 'MENGE_TEORICO'.
            <fs_catalogo>-col_pos   = 10.
          WHEN 'MEINS_TEORICO'.
            <fs_catalogo>-col_pos   = 11.
          WHEN 'MENGE_REAL'.
            <fs_catalogo>-col_pos   = 12.
          WHEN 'MEINS_REAL'.
            <fs_catalogo>-col_pos   = 13.
          WHEN 'KUNAG'.
            <fs_catalogo>-col_pos   = 14.
          WHEN 'NAME1'.
            <fs_catalogo>-col_pos   = 15.
          WHEN 'KUNWE'.
            <fs_catalogo>-col_pos   = 16.
          WHEN 'KUNWE_NAME1'.
            <fs_catalogo>-col_pos   = 17.
          WHEN 'BSTKD'.
            <fs_catalogo>-col_pos   = 18.
          WHEN 'VDATU'.
            <fs_catalogo>-col_pos   = 19.
          WHEN 'ZZFCONFS'.
            <fs_catalogo>-col_pos   = 20.
        ENDCASE.
      ENDLOOP.
    WHEN cg_dynpro_vtas.
      LOOP AT it_catalogo ASSIGNING <fs_catalogo>.
        IF <fs_catalogo>-fieldname <> 'MATNR_FINAL' AND
           <fs_catalogo>-fieldname <> 'MAKTX_FINAL' AND
           <fs_catalogo>-fieldname <> 'CHARG' AND
           <fs_catalogo>-fieldname <> 'KWMENG_REAL' AND
          <fs_catalogo>-fieldname <> 'VRKME'.
          DELETE it_catalogo.
        ELSE.

          CASE <fs_catalogo>-fieldname.
            WHEN 'MATNR_FINAL'.
              <fs_catalogo>-col_pos   = 1.
            WHEN 'CHARG'.
              <fs_catalogo>-col_pos   = 2.
            WHEN 'MAKTX_FINAL'.
              <fs_catalogo>-col_pos   = 3.
            WHEN 'KWMENG_REAL'.
              <fs_catalogo>-col_pos   = 4.
              <fs_catalogo>-edit = 'X'.
            WHEN 'VRKME'.
              <fs_catalogo>-col_pos   = 5.
          ENDCASE.
        ENDIF.
      ENDLOOP.
    WHEN cg_dynpro_impr.
      LOOP AT it_catalogo ASSIGNING <fs_catalogo>.
        IF <fs_catalogo>-fieldname <> 'ZLNUM' AND
           <fs_catalogo>-fieldname <> 'LMEN1' AND
           <fs_catalogo>-fieldname <> 'MEINS'.
          DELETE it_catalogo.
        ENDIF.
      ENDLOOP.
    WHEN cg_dynpro_hu.
      LOOP AT it_catalogo ASSIGNING <fs_catalogo>.
        IF <fs_catalogo>-fieldname = 'TMENG' OR
           <fs_catalogo>-fieldname = 'VHILM'.
          <fs_catalogo>-edit = 'X'.
        ENDIF.
        IF <fs_catalogo>-fieldname = 'MEINS'.
          <fs_catalogo>-no_out = 'X'.
        ENDIF.
        IF <fs_catalogo>-fieldname <> 'CONTADOR' AND
           <fs_catalogo>-fieldname <> 'TMENG' AND
           <fs_catalogo>-fieldname <> 'MEINS' AND
           <fs_catalogo>-fieldname <> 'VHILM' AND
           <fs_catalogo>-fieldname <> 'MAKTX_VHILM'.
          DELETE it_catalogo.
        ENDIF.
      ENDLOOP.
      "Añadimos campo ZZMARCA_EDIT, si no está ya indicado
      READ TABLE it_catalogo INTO wa_catalogo WITH KEY fieldname = 'ZZMARCA_EDIT'.
      IF sy-subrc <> 0.
        wa_catalogo-fieldname = 'ZZMARCA_EDIT'.
        wa_catalogo-tech      = 'X'.
        APPEND wa_catalogo TO it_catalogo.
      ENDIF.
  ENDCASE.

  LOOP AT it_catalogo ASSIGNING <fs_catalogo>.

    CASE <fs_catalogo>-fieldname.
      WHEN 'PROCESO_DESC'.
        <fs_catalogo>-outputlen = 15.
      WHEN 'MATNR_FINAL'.
        <fs_catalogo>-hotspot = 'X'.
        <fs_catalogo>-outputlen = 18.
      WHEN 'MATNR_SE'.
        <fs_catalogo>-hotspot = 'X'.
        <fs_catalogo>-outputlen = 18.
      WHEN 'EBELN'.
        <fs_catalogo>-hotspot = 'X'.
      WHEN 'VBELN'.
        <fs_catalogo>-hotspot = 'X'.
      WHEN 'CHARG'.
        <fs_catalogo>-outputlen = '10'.
      WHEN 'ELIKZ'.
        <fs_catalogo>-checkbox = 'X'.
        <fs_catalogo>-outputlen = 10.
    ENDCASE.
  ENDLOOP.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_PRE_LLENAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_pre_llenar_datos.
  IF p_consu IS NOT INITIAL.
    vg_solo_consulta = 'X'.
  ENDIF.
  gv_error_ejecucion_1ar = 'X'.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_LLENAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos TABLES tp_alv TYPE tt_lin_alv_patron USING vp_dynpro.
  DATA: wl_alv         TYPE zst_sdle_zrsdle0001_alv,
        tl_transportes TYPE ztt_sdle_transp_cab.
  DATA(fl_monitorexp_dpc_imp) = NEW zsscl_sdle_monitorexp_dpc_imp( ).
  CASE vp_dynpro.
    WHEN cg_dynpro_main.

      "
      " Buscar si hay un transporte pendiente.
      "
      CLEAR gs_trans_cab.
      TRY.
          tl_transportes = fl_monitorexp_dpc_imp->trans_cab_getlist( EXPORTING vp_estado = '1' vp_responsable = p_resp ).
*          tl_transportes = fl_monitorexp_dpc_imp->trans_cab_getlist( EXPORTING vp_estado = '1' ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR tl_transportes.
      ENDTRY.

      READ TABLE tl_transportes ASSIGNING FIELD-SYMBOL(<fs_transporte>) INDEX 1.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING <fs_transporte> TO gs_trans_cab.
      ELSE.
        "
        " Si no hay, creamos uno nuevo.
        "
        TRY.
            gs_trans_cab-werks = p_werks.
            gs_trans_cab-lgort = p_lgort.
            gs_trans_cab-responsable = p_resp.
            fl_monitorexp_dpc_imp->trans_cab_create( CHANGING wp_trans_cab = gs_trans_cab ).
          CATCH /iwbep/cx_mgw_busi_exception.
            CLEAR gs_trans_cab.
        ENDTRY.

      ENDIF.

    WHEN cg_dynpro_zsto.
      TRY.
          DATA lv_sel_elikz TYPE zed_sel_elikz.

          IF p_elik1 IS NOT INITIAL.
            lv_sel_elikz = 1.
          ENDIF.
          IF p_elik2 IS NOT INITIAL.
            lv_sel_elikz = 2.
          ENDIF.
          IF p_elik3 IS NOT INITIAL.
            lv_sel_elikz = 3.
          ENDIF.

          DATA(tl_datos_monitor) =  fl_monitorexp_dpc_imp->monitor_getlist( vp_lifnr = p_lifnr vp_werks = p_werks vp_lgort = p_lgort vp_sel_elikz = lv_sel_elikz ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR tl_datos_monitor.
      ENDTRY.

      LOOP AT tl_datos_monitor ASSIGNING FIELD-SYMBOL(<fs_datos>).
        CHECK <fs_datos>-matnr_final IN s_matnrf.
        CHECK <fs_datos>-charg IN s_chargf.
        CHECK <fs_datos>-matnr_se IN s_matnrs.
        CHECK <fs_datos>-fecha_ent_cliente IN s_fentcl.
        CHECK <fs_datos>-fecha_ent_servicio IN s_fentse.
        CHECK <fs_datos>-zzfconfs IN s_fconfs.

        CHECK <fs_datos>-ebeln IN s_ebeln.
        CHECK <fs_datos>-vbeln IN s_vbeln.
        CHECK <fs_datos>-kunag IN s_kunag.
        CHECK <fs_datos>-kunwe IN s_kunwe.

        IF p_proc1 IS NOT INITIAL AND <fs_datos>-proceso <> 'SC'.
          CONTINUE.
        ENDIF.
        IF p_proc2 IS NOT INITIAL AND <fs_datos>-proceso <> 'AR'.
          CONTINUE.
        ENDIF.
        IF p_proc3 IS NOT INITIAL AND <fs_datos>-proceso <> 'ME'.
          CONTINUE.
        ENDIF.

        MOVE-CORRESPONDING <fs_datos> TO wl_alv.
        PERFORM f_append_dato  TABLES   tp_alv  USING wl_alv.
      ENDLOOP.
    WHEN cg_dynpro_ztra.
      TRY.
          DATA(tl_posiciones) = fl_monitorexp_dpc_imp->trans_pos_getlist( gs_trans_cab-numtransporte ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR tl_posiciones.
      ENDTRY.
      LOOP AT tl_posiciones ASSIGNING FIELD-SYMBOL(<fs_posicion>).
        MOVE-CORRESPONDING <fs_posicion> TO wl_alv.
        PERFORM f_append_dato  TABLES   tp_alv  USING wl_alv.
      ENDLOOP.
  ENDCASE.

ENDFORM.


MODULE c_ficha_active_tab_set OUTPUT.
  c_ficha-activetab = g_c_ficha-pressed_tab.
  CASE g_c_ficha-pressed_tab.
    WHEN c_c_ficha-tab1.
      g_c_ficha-subscreen = cg_dynpro_zsto.
    WHEN c_c_ficha-tab2.
      g_c_ficha-subscreen = cg_dynpro_ztra.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

MODULE c_ficha_active_tab_get INPUT.
  okcode = sy-ucomm.
  CASE okcode.
    WHEN c_c_ficha-tab1.
      g_c_ficha-pressed_tab = c_c_ficha-tab1.
    WHEN c_c_ficha-tab2.
      g_c_ficha-pressed_tab = c_c_ficha-tab2.
    WHEN OTHERS.
  ENDCASE.


ENDMODULE.
**&---------------------------------------------------------------------*
**&      Form  f_handle_toolbar
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_OBJECT       text
**      -->P_INTERACTIVE  text
**----------------------------------------------------------------------*
FORM f_handle_toolbar USING vp_dynpro rp_object TYPE REF TO cl_alv_event_toolbar_set  p_interactive.
  DATA: wl_toolbar  TYPE stb_button,
        vl_function LIKE wl_toolbar-function.

  DELETE rp_object->mt_toolbar WHERE function = '&PRINT_BACK'.

  CASE vp_dynpro.
    WHEN cg_dynpro_zsto.
      DELETE rp_object->mt_toolbar WHERE function = '&LOCAL&INSERT_ROW'.
      DELETE rp_object->mt_toolbar WHERE function = 'BORRAR_FILA'.

*      IF vg_solo_consulta IS INITIAL.
      "Separador
      CLEAR wl_toolbar.
      wl_toolbar-butn_type = 3.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      CLEAR wl_toolbar.
      wl_toolbar-function   = cg_boton_imprimir.
      wl_toolbar-quickinfo = 'Imprimir etiquetas'(011).
      wl_toolbar-text       = 'Imprimir'(010).
      wl_toolbar-disabled   = ' '.
      wl_toolbar-icon =  icon_print.
      APPEND wl_toolbar TO rp_object->mt_toolbar.
*      ENDIF.

      IF vg_solo_consulta IS INITIAL AND gv_error_ejecucion IS INITIAL.

        "Separador
        CLEAR wl_toolbar.
        wl_toolbar-butn_type = 3.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

        CLEAR wl_toolbar.
        wl_toolbar-function   = cg_boton_anyadir.
        wl_toolbar-quickinfo = 'Añadir a picking'(003).
        wl_toolbar-text       = 'Añadir a picking'(003).
        wl_toolbar-disabled   = ' '.
        wl_toolbar-icon =  icon_ws_start_whse_proc_foregr.
        APPEND wl_toolbar TO rp_object->mt_toolbar.


        "Separador
        CLEAR wl_toolbar.
        wl_toolbar-butn_type = 3.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

        CLEAR wl_toolbar.
        wl_toolbar-function   = cg_boton_refresh.
        wl_toolbar-quickinfo = 'Refrescar'(009).
        wl_toolbar-text       = 'Refrescar'(009).
        wl_toolbar-disabled   = ' '.
        wl_toolbar-icon =  icon_refresh.
        APPEND wl_toolbar TO rp_object->mt_toolbar.



        CLEAR wl_toolbar.
        wl_toolbar-function   = cg_boton_ver_adrnr.
        wl_toolbar-quickinfo = 'Dirección'.
        wl_toolbar-text       = 'Dirección'.
        wl_toolbar-disabled   = ' '.
        wl_toolbar-icon =  icon_address.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

      ENDIF.
      CLEAR wl_toolbar.
      wl_toolbar-function   = cg_boton_det_mat.
      wl_toolbar-quickinfo = 'Detalle material'.
      wl_toolbar-text       = 'Detalle material'.
      wl_toolbar-disabled   = ' '.
      wl_toolbar-icon =  icon_generate.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      CLEAR wl_toolbar.
      wl_toolbar-function   = cg_boton_finalizar.
      wl_toolbar-quickinfo = 'Finalizar pedido'.
      wl_toolbar-text       = 'Finalizar pedido'.
      wl_toolbar-disabled   = ' '.
      wl_toolbar-icon = icon_incomplete.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

    WHEN cg_dynpro_ztra.
      DELETE rp_object->mt_toolbar WHERE function = '&LOCAL&INSERT_ROW'.
      DELETE rp_object->mt_toolbar WHERE function = 'BORRAR_FILA'.
      IF vg_solo_consulta IS INITIAL AND gv_error_ejecucion IS INITIAL.
        "Separador
        CLEAR wl_toolbar.
        wl_toolbar-butn_type = 3.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

        CLEAR wl_toolbar.
        wl_toolbar-function   = cg_boton_quitar.
        wl_toolbar-quickinfo = 'Quitar del transporte'(006).
        wl_toolbar-text       = 'Quitar del transporte'(006).
        wl_toolbar-disabled   = ' '.
        wl_toolbar-icon =  icon_delete_row.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

        CLEAR wl_toolbar.
        wl_toolbar-function   = cg_boton_datos_trans.
        wl_toolbar-quickinfo = 'Datos del transporte'(007).
        wl_toolbar-text       = 'Datos transporte'(008).
        wl_toolbar-disabled   = ' '.
        wl_toolbar-icon =  icon_unit_costing.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

        CLEAR wl_toolbar.
        wl_toolbar-function   = cg_boton_def_hu.
        wl_toolbar-quickinfo = 'Def. embalaje'(019).
        wl_toolbar-text       = 'Def. embalaje'(019).
        wl_toolbar-disabled   = ' '.
        wl_toolbar-icon =  icon_handling_unit.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

        CLEAR wl_toolbar.
        wl_toolbar-function   = cg_boton_transporte.
        wl_toolbar-quickinfo = 'Crear transporte'(005).
        wl_toolbar-text       = 'Crear transporte'(004).
        wl_toolbar-disabled   = ' '.
        wl_toolbar-icon =  icon_ws_truck.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

        CLEAR wl_toolbar.
        wl_toolbar-function   = cg_boton_ver_adrnr2.
        wl_toolbar-quickinfo = 'Dirección'.
        wl_toolbar-text       = 'Dirección'.
        wl_toolbar-disabled   = ' '.
        wl_toolbar-icon =  icon_address.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

      ENDIF.
      "Separador
      CLEAR wl_toolbar.
      wl_toolbar-butn_type = 3.
      APPEND wl_toolbar TO rp_object->mt_toolbar.

      CLEAR wl_toolbar.
      wl_toolbar-function   = cg_boton_ver_log.
      wl_toolbar-quickinfo = 'Log ejecución'.
      wl_toolbar-text       = 'Log ejecución'.
      wl_toolbar-disabled   = ' '.
      wl_toolbar-icon =  icon_protocol.
      APPEND wl_toolbar TO rp_object->mt_toolbar.


    WHEN cg_dynpro_vtas.
      DELETE rp_object->mt_toolbar WHERE function = '&LOCAL&INSERT_ROW'.
      DELETE rp_object->mt_toolbar WHERE function = 'BORRAR_FILA'.
    WHEN cg_dynpro_impr.
      DELETE rp_object->mt_toolbar WHERE function = '&LOCAL&INSERT_ROW'.
      DELETE rp_object->mt_toolbar WHERE function = 'BORRAR_FILA'.
    WHEN OTHERS.
  ENDCASE.
ENDFORM.                    "f_handle_toolbar
*&---------------------------------------------------------------------*
*&      Form  f_handle_user_command
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->E_UCOMM    text
*----------------------------------------------------------------------*
FORM f_handle_user_command USING e_ucomm.
  DATA: lv_error      TYPE xfeld,
        lv_num_lineas TYPE i.
  DATA: tl_index_rows TYPE lvc_t_row,
        wl_index_rows LIKE LINE OF tl_index_rows.

  DATA wl_trans_pos TYPE zst_sdle_transp_pos.
  DATA(fl_monitorexp_dpc_imp) = NEW zsscl_sdle_monitorexp_dpc_imp( ).


  DATA: vl_texto  TYPE text60,
        vl_answer TYPE char1.

  DATA: lr_mtart_venta TYPE RANGE OF mara-mtart.

  CLEAR lr_mtart_venta.
  APPEND INITIAL LINE TO lr_mtart_venta ASSIGNING FIELD-SYMBOL(<fs_mtart_venta>).
  <fs_mtart_venta>-option = 'EQ'.
  <fs_mtart_venta>-sign = 'I'.
  <fs_mtart_venta>-low = 'ZPTO'.

  CASE e_ucomm.
    WHEN vg_boton_alv_delete.
      IF sy-dynnr = cg_dynpro_hu.
        READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = cg_dynpro_hu.
        CHECK sy-subrc = 0.

        <fs_config_subscreen>-alv->refresh_table_display( ).

      ENDIF.
    WHEN cg_boton_refresh.

      PERFORM f_refresh_alvs.

    WHEN cg_boton_ver_adrnr OR cg_boton_ver_adrnr2.
      IF e_ucomm = cg_boton_ver_adrnr.
        READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_zsto.
      ELSE.
        READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_ztra.
      ENDIF.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas <> 1.
        MESSAGE 'Debe seleccionar una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv>) INDEX wl_index_rows-index.

      DATA: lv_fic_objecttype TYPE  swo_objtyp,
            lv_fic_objectkey  TYPE  swo_typeid,
            lv_fif_parvw      TYPE  parvw_4,
            lv_fif_posnr      TYPE  posnr,
            lv_fif_parnr      TYPE  sd_partner_parnr,
            lt_vbpav          TYPE TABLE OF vbpav,
            lt_xvbadr         TYPE TABLE OF sadrvb.

      lv_fic_objecttype = 'BUS2032'.

      lv_fif_parvw = 'WE'.
      lv_fif_posnr = '000000'.
      lv_fif_parnr = <fs_alv>-kunwe.

      IF <fs_alv>-vbeln IS NOT INITIAL.
        lv_fic_objectkey  = <fs_alv>-vbeln.
        lv_fif_posnr = <fs_alv>-posnr.

        SELECT SINGLE *
          FROM vbpa
          INTO @DATA(ls_vbpa)
          WHERE vbeln = @<fs_alv>-vbeln AND
                posnr = @<fs_alv>-posnr AND
                parvw = 'WE'.
        IF sy-subrc <> 0.
          SELECT SINGLE *
            FROM vbpa
            INTO CORRESPONDING FIELDS OF ls_vbpa
            WHERE vbeln = <fs_alv>-vbeln AND
                  posnr = '000000' AND
                  parvw = 'WE'.
        ENDIF.
        IF sy-subrc = 0.
          APPEND INITIAL LINE TO lt_vbpav ASSIGNING FIELD-SYMBOL(<fs_vbpav>).
          MOVE-CORRESPONDING ls_vbpa TO <fs_vbpav>.

          SELECT SINGLE *
            INTO @DATA(ls_adrc)
            FROM adrc
            WHERE addrnumber = @ls_vbpa-adrnr.
          IF sy-subrc <> 0.
            CLEAR ls_adrc.
          ENDIF.
          APPEND INITIAL LINE TO lt_xvbadr ASSIGNING FIELD-SYMBOL(<fs_xvbadr>).
          MOVE-CORRESPONDING ls_adrc TO <fs_xvbadr>.
        ENDIF.


        CALL FUNCTION 'SD_PARTNER_DATA_PUT'
          EXPORTING
            fic_objecttype              = lv_fic_objecttype
            fic_objectkey               = lv_fic_objectkey
          TABLES
            frt_xvbpa                   = lt_vbpav
*           FRT_YVBPA                   =
*           FRT_XVBUV                   =
*           FRT_HVBUV                   =
            frt_xvbadr                  = lt_xvbadr
*           FRT_YVBADR                  =
          EXCEPTIONS
            no_object_specified         = 1
            no_object_creation_possible = 2
            OTHERS                      = 3.
        IF sy-subrc <> 0.
          MESSAGE 'Error al mostrar datos de la dirección' TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.


*        CALL FUNCTION 'SD_PARTNER_ADDRESS_GET'
*          EXPORTING
*            fic_objecttype       = lv_fic_objecttype
*            fic_objectkey        = lv_fic_objectkey
*            fif_parvw            = lv_fif_parvw
*            fif_posnr            = lv_fif_posnr
*            fif_parnr            = lv_fif_parnr
**           FIF_RELOAD_TO_BUFFER = ' '
** IMPORTING
**           FES_OLD_ADDRESS_FORMAT       =
**           FES_ADDRESS_TYPE     =
**           FES_ADDR1            =
**           FES_ADDR2            =
**           FES_ADDR3            =
*          EXCEPTIONS
*            parameter_incomplete = 1
*            object_not_found     = 2
*            partner_not_found    = 3
*            no_address_found     = 4
*            format_not_available = 5
*            address_type_unknown = 6
*            OTHERS               = 7.
*        IF sy-subrc <> 0.
*          MESSAGE 'Error al mostrar datos de la dirección' TYPE 'I' DISPLAY LIKE 'E'.
*          EXIT.
*
*        ENDIF.


        CALL FUNCTION 'SD_PARTNER_ADDRESS_DIALOG'
          EXPORTING
            fic_objecttype       = lv_fic_objecttype
            fic_objectkey        = lv_fic_objectkey
            fif_parvw            = lv_fif_parvw
            fif_posnr            = lv_fif_posnr
            fif_parnr            = lv_fif_parnr
*           FIF_FIRST_MAINTAINING       = ' '
*           FIS_VBUV             = ' '
            fif_display_only     = 'X'
            fif_vkorg            = '2000'
*         IMPORTING
*           FEF_ADDRESS_CHANGED  =
*           FEF_CANCEL           =
          EXCEPTIONS
            parameter_incomplete = 1
            object_not_found     = 2
            no_address           = 3
            partner_not_found    = 4
            OTHERS               = 5.
        IF sy-subrc <> 0.
          MESSAGE 'Error al mostrar datos de la dirección' TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
        ENDIF.

      ENDIF.

    WHEN cg_boton_ver_log.

      SUBMIT zrssdle0003 WITH p_ntra = gs_trans_cab-numtransporte AND RETURN.

      gv_error_ejecucion_1ar = 'X'.
      cl_gui_cfw=>set_new_ok_code( 'DUMMY' ).
      cl_gui_cfw=>flush( ).

    WHEN cg_boton_def_hu.
      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_ztra.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas <> 1.
        MESSAGE 'Debe seleccionar una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

      CLEAR zst_sdle_zrsdle0001_datos_hu.
      MOVE-CORRESPONDING <fs_alv> TO zst_sdle_zrsdle0001_datos_hu.
      gv_ok = 'X'.
      CALL SCREEN 9005 STARTING AT 10 5.
      <fs_config_subscreen>-alv->check_changed_data( ).

    WHEN cg_boton_imprimir.
      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_zsto.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas <> 1.
        MESSAGE 'Debe seleccionar una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

      CLEAR zst_sdle_zrsdle0001_datos_impr.
      MOVE-CORRESPONDING <fs_alv> TO zst_sdle_zrsdle0001_datos_impr.
      IF <fs_alv>-matnr_se IS INITIAL.
        zst_sdle_zrsdle0001_datos_impr-meins = <fs_alv>-meins_stock.
      ELSE.
        zst_sdle_zrsdle0001_datos_impr-meins = <fs_alv>-vrkme.
      ENDIF.


      TRY.
          DATA(fl_zlnum_manager) = NEW zhcl_mmim_zlnum_manager( i_werks = p_werks i_lgort = p_lgort ).

          DATA(fl_bartender_print_manager) = NEW zcl_wm_bartender_print_manager( i_werks = p_werks i_lgort = '1400' ).

***          DATA(lt_zlnum) = fl_zlnum_manager->get_zlnum_data_4_matnr_charg( i_matnr = <fs_alv>-matnr_final i_charg = <fs_alv>-charg ).
***
***          READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen_impr>) WITH KEY subscreen = cg_dynpro_impr.
***          CLEAR <fs_config_subscreen_impr>-tabla.
***          LOOP AT lt_zlnum ASSIGNING FIELD-SYMBOL(<fs_zlnum>).
***            APPEND INITIAL LINE TO <fs_config_subscreen_impr>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv_impr>).
***            MOVE-CORRESPONDING <fs_zlnum> TO <fs_alv_impr>.
***            <fs_alv_impr>-origen_zlnum = 'Z'.
****              MOVE-CORRESPONDING <fs_alv> TO <fs_alv_vta>.
****            <fs_alv_vta>-kwmeng_real = <fs_alv>-stock.
****            <fs_alv_vta>-vrkme = <fs_alv>-meins_stock.
***
***          ENDLOOP.
***
***          IF <fs_config_subscreen_impr>-alv IS NOT INITIAL.
***            CALL METHOD <fs_config_subscreen_impr>-alv->refresh_table_display.
***          ENDIF.


          CALL SCREEN 9004 STARTING AT 10 5.
          <fs_config_subscreen>-alv->check_changed_data( ).

          CHECK gv_ok IS NOT INITIAL.

          READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen_impr>) WITH KEY subscreen = cg_dynpro_impr.
          CHECK sy-subrc = 0.

          CALL METHOD <fs_config_subscreen_impr>-alv->get_selected_rows
            IMPORTING
              et_index_rows = tl_index_rows.
          DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.


          DATA lt_zlnum_imprimir TYPE zhcl_mmim_zlnum_manager=>ty_t_zlnum.
          DATA lt_zlnum_imprimir_reales TYPE zhcl_mmim_zlnum_manager=>ty_t_zlnum.

          CLEAR lt_zlnum_imprimir.
          CLEAR lt_zlnum_imprimir_reales.
          LOOP AT tl_index_rows INTO wl_index_rows.
            READ TABLE <fs_config_subscreen_impr>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv_impr>) INDEX wl_index_rows-index.
            IF sy-subrc = 0.
              IF <fs_alv_impr>-origen_zlnum = 'Z'.
                APPEND INITIAL LINE TO lt_zlnum_imprimir ASSIGNING FIELD-SYMBOL(<fs_zlnum_imprimir>).
                <fs_zlnum_imprimir>-zlnum = <fs_alv_impr>-zlnum.
              ENDIF.
              IF <fs_alv_impr>-origen_zlnum = 'R'.
                APPEND INITIAL LINE TO lt_zlnum_imprimir_reales ASSIGNING FIELD-SYMBOL(<fs_zlnum_imprimir_reales>).
                <fs_zlnum_imprimir_reales>-zlnum = <fs_alv_impr>-zlnum.
              ENDIF.
            ENDIF.
          ENDLOOP.
          IF lt_zlnum_imprimir IS NOT INITIAL.
            TRY.
                fl_zlnum_manager->print_zlnum_list( lt_zlnum_imprimir ).
              CATCH zcx_exception.
                MESSAGE 'Error al imprimir etiquetas' TYPE 'I' DISPLAY LIKE 'E'.
                EXIT.
            ENDTRY.
          ENDIF.

          DATA lv_lenum TYPE lenum.
          LOOP AT lt_zlnum_imprimir_reales ASSIGNING <fs_zlnum_imprimir_reales>.
            lv_lenum = <fs_zlnum_imprimir_reales>-zlnum.
            CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
              EXPORTING
                input  = lv_lenum
              IMPORTING
                output = lv_lenum.

            TRY.
                fl_bartender_print_manager->set_new_label_data_4_old_lenum( i_mvttype = 'C'
                    i_lenum = lv_lenum ).
              CATCH zcx_exception.
                MESSAGE 'Error al imprimir etiquetas' TYPE 'I' DISPLAY LIKE 'E'.
                EXIT.
            ENDTRY.
          ENDLOOP.
          IF sy-subrc = 0 AND lt_zlnum_imprimir_reales IS NOT INITIAL. "APC20240927 Está imprimiendo una etiqueta vacía si eno entra en el loop
            fl_bartender_print_manager->send_label_data_2_bartender_fl( ).
          ENDIF.


*        LOOP AT <fs_config_subscreen_vtas>-tabla ASSIGNING <fs_alv_vta>.
*          CHECK <fs_alv_vta>-kwmeng_real IS NOT INITIAL.
*          CLEAR wl_trans_pos.
*          MOVE-CORRESPONDING <fs_alv_vta> TO wl_trans_pos.
*          wl_trans_pos-numtransporte = gs_trans_cab-numtransporte.
*          MOVE-CORRESPONDING zst_sdle_zrsdle0001_datos_vta TO wl_trans_pos.
*          TRY.
*
*              fl_monitorexp_dpc_imp->trans_pos_create( CHANGING wp_trans_pos = wl_trans_pos ).
*
*            CATCH /iwbep/cx_mgw_busi_exception.
*              MESSAGE 'Error al añadir posición al transporte' TYPE 'I' DISPLAY LIKE 'E'.
*              EXIT.
*          ENDTRY.
*        ENDLOOP.

        CATCH zcx_exception.
          MESSAGE 'Error al recuperar información etiquetas' TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.

    WHEN cg_boton_finalizar.
      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_zsto.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas <> 1.
        MESSAGE 'Debe seleccionar una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

      "
      " Validaciones previas
      "

      IF <fs_alv>-ebelp IS INITIAL.
        MESSAGE 'La posición no tiene pedido de compra.' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      "
      " Confirmación
      "
      vl_texto = '¿Desea finalizar el pedido de la posición seleccionada?'.
      CLEAR vl_answer.
      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          text_question  = vl_texto
        IMPORTING
          answer         = vl_answer
        EXCEPTIONS
          text_not_found = 1
          OTHERS         = 2.
      CHECK vl_answer = '1'.

      "
      " Acciones para cerrar
      "
      CLEAR lv_error.
      TRY.

          IF <fs_alv>-ebelp IS NOT INITIAL.
            DATA(lt_return) = fl_monitorexp_dpc_imp->cierre_ekpo( lp_ebeln = <fs_alv>-ebeln lp_ebelp = <fs_alv>-ebelp ).

            LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<fs_return>).
              IF <fs_return>-type = 'E' OR <fs_return>-type = 'A'.
                lv_error = 'X'.
                MESSAGE ID <fs_return>-id
                        TYPE 'I'
                        NUMBER <fs_return>-number
                        WITH <fs_return>-message_v1 <fs_return>-message_v2 <fs_return>-message_v3 <fs_return>-message_v4
                        DISPLAY LIKE 'E'.
                EXIT.
              ENDIF.
            ENDLOOP.

            IF lv_error IS INITIAL.
              <fs_alv>-elikz = 'X'.
            ENDIF.

          ENDIF.

          IF lv_error IS INITIAL AND <fs_alv>-posnr IS NOT INITIAL AND <fs_alv>-gbsta <> 'C'.
            lt_return = fl_monitorexp_dpc_imp->cierre_vbap( lp_vbeln = <fs_alv>-vbeln lp_posnr = <fs_alv>-posnr ).

            LOOP AT lt_return ASSIGNING <fs_return>.
              IF <fs_return>-type = 'E' OR <fs_return>-type = 'A'.
                lv_error = 'X'.
                MESSAGE ID <fs_return>-id
                        TYPE 'I'
                        NUMBER <fs_return>-number
                        WITH <fs_return>-message_v1 <fs_return>-message_v2 <fs_return>-message_v3 <fs_return>-message_v4
                        DISPLAY LIKE 'E'.
                EXIT.
              ENDIF.
            ENDLOOP.

            IF lv_error IS INITIAL.
              <fs_alv>-gbsta = 'C'.
            ENDIF.

          ENDIF.
          IF lv_error IS INITIAL.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
              EXPORTING
                wait = 'X'.

            <fs_config_subscreen>-alv->refresh_table_display( ).
            MESSAGE 'Documento finalizado correctamente.' TYPE 'I' DISPLAY LIKE 'S'.
          ENDIF.

        CATCH /iwbep/cx_mgw_busi_exception.
          MESSAGE 'Error al finalizar posición pedido de compra.' TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.

    WHEN cg_boton_det_mat.

      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_zsto.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas <> 1.
******        MESSAGE s285 DISPLAY LIKE 'I'.
        MESSAGE 'Debe seleccionar una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

***      SET PARAMETER ID 'MAT' FIELD <fs_alv>-matnr_final.
***      SET PARAMETER ID 'WRK' FIELD p_werks.
***
***      CALL TRANSACTION 'YHP_IDX_MGMT' AND SKIP FIRST SCREEN .

      DATA(rl_batch_input) = NEW zcl_seis_batch_input( 'YHP_IDX_MGMT' ).
      rl_batch_input->add_dynpro( vp_programa = 'SAPLYHP_IDX_QRY_UI_SEL' vp_dynpro   = '0100' ).
      rl_batch_input->add_field( vp_campo = 'BDC_OKCODE'    vp_valor = '=EXECUTE' ).
      rl_batch_input->add_field( vp_campo = 'YHP_IDX_QRY_S_SEL_VIS-FMAT'    vp_valor = 'X' ).

* BDC_SUBSCR  SAPLYHP_IDX_QRY_UI_SEL                  20000100SS_DYN_SEL
* BDC_SUBSCR  SAPLSSEL                                1105SUBSCREEN_CONTAINER
* BDC_CURSOR  %%DYN002-LOW
* %%DYN001-LOW  CORPNI00000247
* %%DYN002-LOW  2000


*      rl_batch_input->add_field( vp_campo = 'BDC_CURSOR'    vp_valor = '%%DYN002-LOW' ).
      rl_batch_input->add_field( vp_campo = '%%DYN001-LOW'    vp_valor = <fs_alv>-matnr_final ).
      rl_batch_input->add_field( vp_campo = '%%DYN002-LOW'    vp_valor = p_werks ).

      DATA: lv_modo TYPE char1.
      lv_modo = 'E'.
      rl_batch_input->set_modo( lv_modo ).
      DATA(tl_mensajes) = rl_batch_input->call_transaction( ).

    WHEN cg_boton_anyadir.

      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_zsto.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas = 0.
******        MESSAGE s285 DISPLAY LIKE 'I'.
        MESSAGE 'Debe seleccionar al menos una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

      "
      " Validaciones previas. No seleccionar a la vez SEMIS con PTs
      " No permitir seleccionar varios pedidos de venta a la vez.
      " No permitir seleccionar registros con pedidos de venta y sin pedidos de venta.
      "
      DATA: vl_con_pv      TYPE xflag,
            vl_sin_pv      TYPE xflag,
            vl_vbeln       TYPE text40,
            vl_vbeln_tmp   LIKE vl_vbeln,
            vl_mas_1pedido TYPE xflag.

      CLEAR: vl_con_pv, vl_sin_pv, vl_vbeln, vl_mas_1pedido, lv_error.
      LOOP AT tl_index_rows INTO wl_index_rows.
        READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
        IF <fs_alv>-tratado IS NOT INITIAL.
          MESSAGE 'La posición ya está añadida al transporte.' TYPE 'I' DISPLAY LIKE 'E'.
          lv_error = 'X'.
          EXIT.
        ENDIF.
        IF <fs_alv>-elikz IS NOT INITIAL.
          MESSAGE 'El pedido ya está completo. No se puede procesar' TYPE 'I' DISPLAY LIKE 'E'.
          lv_error = 'X'.
          EXIT.
        ENDIF.
        IF <fs_alv>-gbsta = 'C'.
          MESSAGE 'El pedido venta ya está completo. No se puede procesar' TYPE 'I' DISPLAY LIKE 'E'.
          lv_error = 'X'.
          EXIT.
        ENDIF.
        IF <fs_alv>-mstae IS NOT INITIAL OR
          <fs_alv>-mstav IS NOT INITIAL OR
          <fs_alv>-vmsta IS NOT INITIAL.
          MESSAGE 'Material bloqueado. No se puede procesar' TYPE 'I' DISPLAY LIKE 'E'.
          lv_error = 'X'.
          EXIT.
        ENDIF.


        IF <fs_alv>-proceso = 'SC' OR <fs_alv>-proceso = 'ME'.
          vl_con_pv = 'X'.
        ELSE.
          vl_sin_pv = 'X'.
        ENDIF.
        IF vl_con_pv IS NOT INITIAL AND <fs_alv>-vbeln IS NOT INITIAL.
          CONCATENATE <fs_alv>-vbeln <fs_alv>-posnr <fs_alv>-ebeln <fs_alv>-ebelp INTO vl_vbeln_tmp.
          IF vl_vbeln IS INITIAL.
            vl_vbeln = vl_vbeln_tmp.
          ENDIF.
          IF vl_vbeln <> vl_vbeln_tmp.
            vl_mas_1pedido = 'X'.
          ENDIF.
        ENDIF.
      ENDLOOP.

      IF vl_con_pv IS NOT INITIAL AND vl_sin_pv IS NOT INITIAL.
        MESSAGE 'No puede seleccionar estos registros a la vez. Posiciones con pedidos venta y sin.' TYPE 'I' DISPLAY LIKE 'E'.
        lv_error = 'X'.
        EXIT.
      ENDIF.
      IF vl_mas_1pedido IS NOT INITIAL.
        MESSAGE 'No puede seleccionar varios pedidos de venta a la vez.' TYPE 'I' DISPLAY LIKE 'E'.
        lv_error = 'X'.
        EXIT.
      ENDIF.

      "
      " Por cada pedido subco - posición, comprobar que están seleccionados todos los materiales.
      "
      DATA vl_incluido TYPE xflag.
      LOOP AT tl_index_rows INTO wl_index_rows.
        READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
        IF <fs_alv>-ebelp IS NOT INITIAL AND lv_error IS INITIAL.
          SELECT *
           FROM resb
           INTO TABLE @DATA(tl_resb)
           WHERE ebeln = @<fs_alv>-ebeln AND
                 ebelp = @<fs_alv>-ebelp AND
                 postp = 'L'.

          LOOP AT tl_resb ASSIGNING FIELD-SYMBOL(<fs_resb>).
            CLEAR vl_incluido.
            LOOP AT tl_index_rows ASSIGNING FIELD-SYMBOL(<fs_index_row>).
              READ TABLE <fs_config_subscreen>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv_hermano>) INDEX <fs_index_row>-index.
              IF sy-subrc = 0 AND
                <fs_alv_hermano>-ebeln = <fs_alv>-ebeln AND
                <fs_alv_hermano>-ebelp = <fs_alv>-ebelp AND
                <fs_alv_hermano>-matnr_se = <fs_resb>-matnr.
                vl_incluido = 'X'.
                EXIT.
              ENDIF.
            ENDLOOP.
            IF vl_incluido IS INITIAL.
              MESSAGE 'Debe seleccionar todos los semis implicados.' TYPE 'I' DISPLAY LIKE 'E'.
              lv_error = 'X'.
              EXIT.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDLOOP.
      CHECK lv_error IS INITIAL.
      "
      " Comprobar que no hay más posiciones en el alv del pedido seleccionado sin seleccionar.
      "
      DATA vl_indice LIKE sy-index.
      IF vl_vbeln IS NOT INITIAL.
        LOOP AT <fs_config_subscreen>-tabla ASSIGNING <fs_alv>.
          vl_indice = sy-tabix.
          CONCATENATE <fs_alv>-vbeln <fs_alv>-posnr <fs_alv>-ebeln <fs_alv>-ebelp INTO vl_vbeln_tmp.
          READ TABLE tl_index_rows INTO wl_index_rows WITH KEY index = vl_indice.
          IF sy-subrc <> 0 AND vl_vbeln_tmp = vl_vbeln.
            MESSAGE 'Debe seleccionar todas las posiciones del pedido.' TYPE 'I' DISPLAY LIKE 'E'.
            lv_error = 'X'.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.

      CHECK lv_error IS INITIAL.

      IF vl_con_pv IS NOT INITIAL.
        DATA vl_num_semi TYPE i.

        CLEAR zst_sdle_zrsdle0001_datos_semi.

        CLEAR vl_num_semi.

        gv_permite_venta = 'X'.

        LOOP AT tl_index_rows INTO wl_index_rows.
          READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
          IF sy-subrc = 0.
            SELECT SINGLE matnr
              FROM mara
              INTO @DATA(ls_mara)
              WHERE matnr = @<fs_alv>-matnr_final AND
                    mtart NOT IN @lr_mtart_venta.
            IF sy-subrc = 0.
              CLEAR gv_permite_venta.
            ENDIF.
            IF <fs_alv>-vbeln IS NOT INITIAL.
              CLEAR gv_permite_venta.
            ENDIF.

            ADD 1 TO vl_num_semi.
            zst_sdle_zrsdle0001_datos_semi-vbeln = <fs_alv>-vbeln.
            zst_sdle_zrsdle0001_datos_semi-posnr = <fs_alv>-posnr.
            zst_sdle_zrsdle0001_datos_semi-matnr_final = <fs_alv>-matnr_final.
            zst_sdle_zrsdle0001_datos_semi-maktx_final = <fs_alv>-maktx_final.
            zst_sdle_zrsdle0001_datos_semi-kwmeng = <fs_alv>-kwmeng_resto.
            zst_sdle_zrsdle0001_datos_semi-kwmeng_real = <fs_alv>-kwmeng_resto.
            zst_sdle_zrsdle0001_datos_semi-vrkme = <fs_alv>-vrkme.
            IF vl_num_semi = 1.
              zst_sdle_zrsdle0001_datos_semi-matnr_se_1  = <fs_alv>-matnr_se.
              zst_sdle_zrsdle0001_datos_semi-maktx_se_1 = <fs_alv>-maktx_se.
              zst_sdle_zrsdle0001_datos_semi-teorico_se_1 = <fs_alv>-menge_resto.
              zst_sdle_zrsdle0001_datos_semi-real_se_1 = <fs_alv>-menge_resto.
              zst_sdle_zrsdle0001_datos_semi-stock_se_1 = <fs_alv>-stock.
              zst_sdle_zrsdle0001_datos_semi-nec_otros_se_1 = <fs_alv>-menge_nec_se.
            ENDIF.
            IF vl_num_semi = 2.
              zst_sdle_zrsdle0001_datos_semi-matnr_se_2  = <fs_alv>-matnr_se.
              zst_sdle_zrsdle0001_datos_semi-maktx_se_2 = <fs_alv>-maktx_se.
              zst_sdle_zrsdle0001_datos_semi-teorico_se_2 = <fs_alv>-menge_resto.
              zst_sdle_zrsdle0001_datos_semi-real_se_2 = <fs_alv>-menge_resto.
              zst_sdle_zrsdle0001_datos_semi-stock_se_2 = <fs_alv>-stock.
              zst_sdle_zrsdle0001_datos_semi-nec_otros_se_2 = <fs_alv>-menge_nec_se.
            ENDIF.
            IF zst_sdle_zrsdle0001_datos_semi-kwmeng < 0. CLEAR zst_sdle_zrsdle0001_datos_semi-kwmeng. ENDIF.
            IF zst_sdle_zrsdle0001_datos_semi-kwmeng_real  < 0. CLEAR zst_sdle_zrsdle0001_datos_semi-kwmeng_real. ENDIF.
            IF zst_sdle_zrsdle0001_datos_semi-teorico_se_1  < 0. CLEAR zst_sdle_zrsdle0001_datos_semi-teorico_se_1. ENDIF.
            IF zst_sdle_zrsdle0001_datos_semi-real_se_1  < 0. CLEAR zst_sdle_zrsdle0001_datos_semi-real_se_1. ENDIF.
            IF zst_sdle_zrsdle0001_datos_semi-stock_se_1  < 0. CLEAR zst_sdle_zrsdle0001_datos_semi-stock_se_1. ENDIF.
            IF zst_sdle_zrsdle0001_datos_semi-nec_otros_se_1 < 0. CLEAR zst_sdle_zrsdle0001_datos_semi-nec_otros_se_1. ENDIF.
            IF zst_sdle_zrsdle0001_datos_semi-teorico_se_2  < 0. CLEAR zst_sdle_zrsdle0001_datos_semi-teorico_se_2. ENDIF.
            IF zst_sdle_zrsdle0001_datos_semi-real_se_2  < 0. CLEAR zst_sdle_zrsdle0001_datos_semi-real_se_2. ENDIF.
            IF zst_sdle_zrsdle0001_datos_semi-stock_se_2  < 0. CLEAR zst_sdle_zrsdle0001_datos_semi-stock_se_2. ENDIF.
            IF zst_sdle_zrsdle0001_datos_semi-nec_otros_se_2 < 0. CLEAR zst_sdle_zrsdle0001_datos_semi-nec_otros_se_2. ENDIF.
          ENDIF.
        ENDLOOP.
        CALL SCREEN 9001 STARTING AT 5 5.

        CHECK gv_ok IS NOT INITIAL.

        CLEAR zst_sdle_zrsdle0001_datos_vta.

        IF gv_permite_venta = 'X'.
          READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen_vtas>) WITH KEY subscreen = cg_dynpro_vtas.
          CLEAR <fs_config_subscreen_vtas>-tabla.
          IF <fs_config_subscreen_vtas>-alv IS NOT INITIAL.
            CALL METHOD <fs_config_subscreen_vtas>-alv->refresh_table_display.
          ENDIF.

          CLEAR gv_show_alv_dynpro_venta.

          CALL SCREEN 9002 STARTING AT 10 5.
*          <fs_config_subscreen_vtas>-alv->check_changed_data( ).

          CHECK gv_ok IS NOT INITIAL.

        ENDIF.

        "
        " Validaciones tolerancias.
        "
        LOOP AT tl_index_rows INTO wl_index_rows.
          READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
          IF sy-subrc = 0.
            CLEAR wl_trans_pos.
            MOVE-CORRESPONDING <fs_alv> TO wl_trans_pos.
            IF zst_sdle_zrsdle0001_datos_vta IS NOT INITIAL.
              MOVE-CORRESPONDING zst_sdle_zrsdle0001_datos_vta TO wl_trans_pos.
            ENDIF.
            wl_trans_pos-numtransporte = gs_trans_cab-numtransporte.
            wl_trans_pos-kwmeng_real = zst_sdle_zrsdle0001_datos_semi-kwmeng_real.
            wl_trans_pos-elikz = zst_sdle_zrsdle0001_datos_semi-elikz.
            DATA lv_error_txt TYPE text255.
            PERFORM f_validar_tolerancias
                  USING wl_trans_pos-ebeln
                        wl_trans_pos-ebelp
                        wl_trans_pos-vbeln
                        wl_trans_pos-posnr
                        ztsdle0001-destino
                        wl_trans_pos-kwmeng_real
                        wl_trans_pos-vrkme
                  CHANGING lv_error_txt.
            IF lv_error_txt IS NOT INITIAL.
              MESSAGE lv_error_txt TYPE 'I' DISPLAY LIKE 'E'.
              lv_error = 'X'.
              EXIT.
            ENDIF.

          ENDIF.
        ENDLOOP.
        CHECK lv_error IS INITIAL.

        LOOP AT tl_index_rows INTO wl_index_rows.
          READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
          IF sy-subrc = 0.
            CLEAR wl_trans_pos.
            MOVE-CORRESPONDING <fs_alv> TO wl_trans_pos.
            IF zst_sdle_zrsdle0001_datos_vta IS NOT INITIAL.
              MOVE-CORRESPONDING zst_sdle_zrsdle0001_datos_vta TO wl_trans_pos.
            ENDIF.
            wl_trans_pos-numtransporte = gs_trans_cab-numtransporte.
            wl_trans_pos-kwmeng_real = zst_sdle_zrsdle0001_datos_semi-kwmeng_real.
            wl_trans_pos-elikz = zst_sdle_zrsdle0001_datos_semi-elikz.
            IF wl_trans_pos-matnr_se = zst_sdle_zrsdle0001_datos_semi-matnr_se_1.
              wl_trans_pos-menge_real = zst_sdle_zrsdle0001_datos_semi-real_se_1.
            ENDIF.
            IF wl_trans_pos-matnr_se = zst_sdle_zrsdle0001_datos_semi-matnr_se_2.
              wl_trans_pos-menge_real = zst_sdle_zrsdle0001_datos_semi-real_se_2.
            ENDIF.
            wl_trans_pos-meins_real = <fs_alv>-meins_nec_se.

            TRY.

                fl_monitorexp_dpc_imp->trans_pos_create( CHANGING wp_trans_pos = wl_trans_pos ).

              CATCH /iwbep/cx_mgw_busi_exception.
                MESSAGE 'Error al añadir posición al transporte' TYPE 'I' DISPLAY LIKE 'E'.
                EXIT.
            ENDTRY.
          ENDIF.
        ENDLOOP.
      ELSE.

        gv_permite_venta = 'X'.
        gv_show_alv_dynpro_venta = 'X'.

        READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen_vtas> WITH KEY subscreen = cg_dynpro_vtas.
        CLEAR <fs_config_subscreen_vtas>-tabla.
        LOOP AT tl_index_rows INTO wl_index_rows.
          READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
          IF sy-subrc = 0.
            APPEND INITIAL LINE TO <fs_config_subscreen_vtas>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv_vta>).
            MOVE-CORRESPONDING <fs_alv> TO <fs_alv_vta>.
            <fs_alv_vta>-kwmeng_real = <fs_alv>-stock.
            <fs_alv_vta>-vrkme = <fs_alv>-meins_stock.

            SELECT SINGLE matnr
              FROM mara
              INTO @DATA(ls_mara_vta)
              WHERE matnr = @<fs_alv_vta>-matnr_final AND
                    mtart NOT IN @lr_mtart_venta.
            IF sy-subrc = 0.
              CLEAR gv_permite_venta.
            ENDIF.
          ENDIF.
        ENDLOOP.
        IF <fs_config_subscreen_vtas>-alv IS NOT INITIAL.
          CALL METHOD <fs_config_subscreen_vtas>-alv->refresh_table_display.
        ENDIF.

        CLEAR zst_sdle_zrsdle0001_datos_vta.


        CALL SCREEN 9002 STARTING AT 10 5.
        <fs_config_subscreen_vtas>-alv->check_changed_data( ).

        CHECK gv_ok IS NOT INITIAL.


        "
        " Validaciones tolerancias.
        "
        LOOP AT <fs_config_subscreen_vtas>-tabla ASSIGNING <fs_alv_vta>.
          CHECK <fs_alv_vta>-kwmeng_real IS NOT INITIAL.
          CLEAR wl_trans_pos.
          MOVE-CORRESPONDING <fs_alv_vta> TO wl_trans_pos.
          wl_trans_pos-numtransporte = gs_trans_cab-numtransporte.
          MOVE-CORRESPONDING zst_sdle_zrsdle0001_datos_vta TO wl_trans_pos.
          PERFORM f_validar_tolerancias
                USING wl_trans_pos-ebeln
                      wl_trans_pos-ebelp
                      wl_trans_pos-vbeln
                      wl_trans_pos-posnr
                      ztsdle0001-destino
                      wl_trans_pos-kwmeng_real
                      wl_trans_pos-vrkme
                CHANGING lv_error_txt.
          IF lv_error_txt IS NOT INITIAL.
            MESSAGE lv_error_txt TYPE 'I' DISPLAY LIKE 'E'.
            lv_error = 'X'.
            EXIT.
          ENDIF.
        ENDLOOP.
        CHECK lv_error IS INITIAL.



        LOOP AT <fs_config_subscreen_vtas>-tabla ASSIGNING <fs_alv_vta>.
          CHECK <fs_alv_vta>-kwmeng_real IS NOT INITIAL.
          CLEAR wl_trans_pos.
          MOVE-CORRESPONDING <fs_alv_vta> TO wl_trans_pos.
          wl_trans_pos-numtransporte = gs_trans_cab-numtransporte.
          MOVE-CORRESPONDING zst_sdle_zrsdle0001_datos_vta TO wl_trans_pos.
          TRY.

              fl_monitorexp_dpc_imp->trans_pos_create( CHANGING wp_trans_pos = wl_trans_pos ).

            CATCH /iwbep/cx_mgw_busi_exception.
              MESSAGE 'Error al añadir posición al transporte' TYPE 'I' DISPLAY LIKE 'E'.
              EXIT.
          ENDTRY.
        ENDLOOP.
      ENDIF.

      CHECK lv_error IS INITIAL.

      MESSAGE 'Posiciones añadidas al transporte' TYPE 'I' DISPLAY LIKE 'I'.
      PERFORM f_refresh_alvs.

      " Navego a la pestaña de transporte.
      CALL METHOD cl_gui_cfw=>set_new_ok_code( c_c_ficha-tab2 ).
      CALL METHOD cl_gui_cfw=>flush.



    WHEN cg_boton_quitar.

      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_ztra.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas = 0.
        MESSAGE 'Debe seleccionar al menos una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
*      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
*      READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

      CLEAR: vl_con_pv, vl_sin_pv, vl_vbeln, vl_mas_1pedido, lv_error.
      LOOP AT tl_index_rows INTO wl_index_rows.
        READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

        IF <fs_alv>-vbeln IS NOT INITIAL.
          vl_con_pv = 'X'.
        ELSE.
          vl_sin_pv = 'X'.
        ENDIF.
        IF <fs_alv>-vbeln IS NOT INITIAL.
          CONCATENATE <fs_alv>-vbeln <fs_alv>-posnr INTO vl_vbeln_tmp.
          IF vl_vbeln IS INITIAL.
            vl_vbeln = vl_vbeln_tmp.
          ENDIF.
          IF vl_vbeln <> vl_vbeln_tmp.
            vl_mas_1pedido = 'X'.
          ENDIF.
        ENDIF.
      ENDLOOP.

      IF vl_con_pv IS NOT INITIAL AND vl_sin_pv IS NOT INITIAL.
        MESSAGE 'No puede seleccionar estos registros a la vez. Posiciones con pedidos venta y sin.' TYPE 'I' DISPLAY LIKE 'E'.
        lv_error = 'X'.
        EXIT.
      ENDIF.
      IF vl_mas_1pedido IS NOT INITIAL.
        MESSAGE 'No puede seleccionar varios pedidos de venta a la vez.' TYPE 'I' DISPLAY LIKE 'E'.
        lv_error = 'X'.
        EXIT.
      ENDIF.

      "
      " Comprobar que no hay más posiciones en el alv del pedido seleccionado sin seleccionar.
      "
      IF vl_vbeln IS NOT INITIAL.
        LOOP AT <fs_config_subscreen>-tabla ASSIGNING <fs_alv>.
          vl_indice = sy-tabix.
          CONCATENATE <fs_alv>-vbeln <fs_alv>-posnr INTO vl_vbeln_tmp.
          READ TABLE tl_index_rows INTO wl_index_rows WITH KEY index = vl_indice.
          IF sy-subrc <> 0 AND vl_vbeln_tmp = vl_vbeln.
            MESSAGE 'Debe seleccionar todas las posiciones del pedido.' TYPE 'I' DISPLAY LIKE 'E'.
            lv_error = 'X'.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.

      CHECK lv_error IS INITIAL.

      vl_texto = '¿Desea quitar el registro del transporte?'.
      CLEAR vl_answer.
      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          text_question  = vl_texto
        IMPORTING
          answer         = vl_answer
        EXCEPTIONS
          text_not_found = 1
          OTHERS         = 2.
      CHECK vl_answer = '1'.

      LOOP AT tl_index_rows INTO wl_index_rows.
        READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
        IF sy-subrc = 0.
          CLEAR wl_trans_pos.
          MOVE-CORRESPONDING <fs_alv> TO wl_trans_pos.
          TRY.
              fl_monitorexp_dpc_imp->trans_pos_delete( wl_trans_pos ).

            CATCH /iwbep/cx_mgw_busi_exception.
              MESSAGE 'Error al liminar la posición del transporte' TYPE 'I' DISPLAY LIKE 'E'.
              EXIT.
          ENDTRY.
        ENDIF.
      ENDLOOP.
      PERFORM f_refresh_alvs.


    WHEN cg_boton_transporte.

      MOVE-CORRESPONDING gs_trans_cab TO ztsdle0001.
      CLEAR ztsdle0001-destino.
      ztsdle0001-wadat_ist = sy-datum.

      TRY.
          DATA(lt_trans_pos) = fl_monitorexp_dpc_imp->trans_pos_getlist( gs_trans_cab-numtransporte ).

          LOOP AT lt_trans_pos ASSIGNING FIELD-SYMBOL(<fs_pos>).
            IF <fs_pos>-destino IS NOT INITIAL.
              ztsdle0001-destino = <fs_pos>-destino.
            ENDIF.

            IF <fs_pos>-vbeln IS INITIAL AND <fs_pos>-kunag IS INITIAL.
              ztsdle0001-destino = 2.
            ENDIF.

            SELECT SINGLE matnr
              FROM mara
              INTO @DATA(ls_mara2)
              WHERE matnr = @<fs_pos>-matnr_final AND
                    mtart NOT IN @lr_mtart_venta.
            IF sy-subrc = 0.
              ztsdle0001-destino = 2.
            ENDIF.
          ENDLOOP.
        CATCH /iwbep/cx_mgw_busi_exception.
      ENDTRY.


      CALL SCREEN 9000 STARTING AT 10 5.

      CHECK gv_ok IS NOT INITIAL.
      MOVE-CORRESPONDING ztsdle0001 TO gs_trans_cab.
      TRY.
          fl_monitorexp_dpc_imp->trans_cab_update( gs_trans_cab ).

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.

        CATCH /iwbep/cx_mgw_busi_exception.
          MESSAGE 'Error al actualizar el transporte.' TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.

      TRY.
          fl_monitorexp_dpc_imp->validar_transporte( gs_trans_cab-numtransporte ).
        CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lo_excep).
          DATA(lv_txt_error) = lo_excep->get_text( ).
          MESSAGE lv_txt_error TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.

      TRY.
          fl_monitorexp_dpc_imp->procesar_transporte( gs_trans_cab-numtransporte ).

          MESSAGE 'Transporte procesado correctamente' TYPE 'I' DISPLAY LIKE 'S'.

***          LEAVE TO SCREEN 0.

        CATCH /iwbep/cx_mgw_busi_exception.
          MESSAGE 'Error al procesar el transporte. Revise log.' TYPE 'I' DISPLAY LIKE 'E'.

***          EXIT.
      ENDTRY.

      SUBMIT zrssdle0003 WITH p_ntra = gs_trans_cab-numtransporte AND RETURN.
      CLEAR gs_trans_cab.
      TRY.
          gs_trans_cab-werks = p_werks.
          gs_trans_cab-lgort = p_lgort.
          gs_trans_cab-responsable = p_resp.
          fl_monitorexp_dpc_imp->trans_cab_create( CHANGING wp_trans_cab = gs_trans_cab ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR gs_trans_cab.
      ENDTRY.

      PERFORM f_refresh_alvs.
      " Navego a la pestaña de transporte.
      CALL METHOD cl_gui_cfw=>set_new_ok_code( c_c_ficha-tab1 ).
      CALL METHOD cl_gui_cfw=>flush.



    WHEN cg_boton_datos_trans.

      MOVE-CORRESPONDING gs_trans_cab TO ztsdle0001.

      CALL SCREEN 9003 STARTING AT 10 5.

      CHECK gv_ok IS NOT  INITIAL.
      MOVE-CORRESPONDING ztsdle0001 TO gs_trans_cab.
      TRY.
          fl_monitorexp_dpc_imp->trans_cab_update( gs_trans_cab ).

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.


        CATCH /iwbep/cx_mgw_busi_exception.
          MESSAGE 'Error al actualizar el transporte.' TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  user_command_popup
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->R_UCOMM      text
*      -->RS_SELFIELD  text
*----------------------------------------------------------------------*
FORM user_command_popup USING r_ucomm LIKE sy-ucomm
                              rs_selfield TYPE slis_selfield.

*  CASE r_ucomm.
*    WHEN '&ONT'.
*      DATA: gd_repid LIKE sy-repid, "Exists
*            ref_grid TYPE REF TO cl_gui_alv_grid.
*      IF ref_grid IS INITIAL.
*        CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
*          IMPORTING
*            e_grid = ref_grid.
*      ENDIF.
*      IF NOT ref_grid IS INITIAL.
*        CALL METHOD ref_grid->check_changed_data .
*      ENDIF.
*  ENDCASE.


*(SAPLSLVC_FULLSCREEN)GT_GRID-GRID
ENDFORM.                    "USER_COMMAND
*&---------------------------------------------------------------------*
*&      Module  STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9000 OUTPUT.
  SET PF-STATUS 'STA_9000'.
  SET TITLEBAR 'T90'.

  CLEAR gv_ok.

  LOOP AT SCREEN.
    IF screen-group1 EQ 'DES' AND ztsdle0001-destino IS NOT INITIAL.
*      IF gv_solo_consulta = 'X' OR gv_cabecera_borrada = 'X'.
      screen-input = '0'.
*      ENDIF.

      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9000 INPUT.
  DATA: lv_error TYPE xflag.
  DATA: lv_msg TYPE string.
  CLEAR lv_error.

  CASE okcode.
    WHEN 'OK'.
      gv_ok = 'X'.




      IF ztsdle0001-destino IS INITIAL.
        lv_error = 'X'.
        CLEAR gv_ok.
        MESSAGE 'Debe indicar destino final.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.
      IF lv_error IS INITIAL AND ztsdle0001-wadat_ist IS INITIAL.
        lv_error = 'X'.
        CLEAR gv_ok.
        MESSAGE 'Debe indicar fecha movimiento mercancia.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.

      IF lv_error IS INITIAL AND ztsdle0001-zzconductor IS INITIAL.
        lv_error = 'X'.
        CLEAR gv_ok.
        MESSAGE 'Debe indicar conductor.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.
      IF lv_error IS INITIAL AND ztsdle0001-zzdni IS INITIAL.
        lv_error = 'X'.
        CLEAR gv_ok.
        MESSAGE 'Debe indicar DNI del conductor.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.
      IF lv_error IS INITIAL AND ztsdle0001-zzmatricula IS INITIAL.
        lv_error = 'X'.
        CLEAR gv_ok.
        MESSAGE 'Debe indicar matrícula.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.
      IF lv_error IS INITIAL AND ztsdle0001-zztelefono IS INITIAL.
        lv_error = 'X'.
        CLEAR gv_ok.
        MESSAGE 'Debe indicar teléfono.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.
    WHEN OTHERS.

  ENDCASE.
  IF lv_error IS INITIAL.
    LEAVE TO SCREEN 0.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_9001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9001 OUTPUT.
  SET PF-STATUS 'STA_9001'.
  SET TITLEBAR 'T91'.

  CLEAR gv_ok.

  CLEAR okcode.

  LOOP AT SCREEN.
    IF screen-group1 = 'SE1' AND zst_sdle_zrsdle0001_datos_semi-matnr_se_1 IS INITIAL.
      screen-invisible = 1.
      screen-active = 0.
      MODIFY SCREEN.
    ENDIF.
    IF screen-group1 = 'SE2' AND zst_sdle_zrsdle0001_datos_semi-matnr_se_2 IS INITIAL.
      screen-invisible = 1.
      screen-active = 0.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9001 INPUT.
  CLEAR lv_error.
  CLEAR lv_msg.

  CASE okcode.
    WHEN 'OK' OR space.
      gv_ok = 'X'.

      IF  zst_sdle_zrsdle0001_datos_semi-kwmeng_real IS INITIAL.
        lv_error = 'X'.
        CLEAR gv_ok.
        MESSAGE 'Debe indicar cantidad final real.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.

      lv_msg = 'SEMI &1. Debe indicar cantidad real.'.
      IF ( zst_sdle_zrsdle0001_datos_semi-matnr_se_1 IS NOT INITIAL AND
           zst_sdle_zrsdle0001_datos_semi-real_se_1 IS INITIAL ).
        lv_error = 'X'.
        CLEAR gv_ok.
        REPLACE ALL OCCURRENCES OF '&1' IN lv_msg WITH zst_sdle_zrsdle0001_datos_semi-matnr_se_1.
        MESSAGE lv_msg TYPE 'I' DISPLAY LIKE 'E' .
      ENDIF.
      IF ( zst_sdle_zrsdle0001_datos_semi-matnr_se_2 IS NOT INITIAL AND
           zst_sdle_zrsdle0001_datos_semi-real_se_2 IS INITIAL ).
        lv_error = 'X'.
        CLEAR gv_ok.
        REPLACE ALL OCCURRENCES OF '&1' IN lv_msg WITH zst_sdle_zrsdle0001_datos_semi-matnr_se_2.
        MESSAGE lv_msg TYPE 'I' DISPLAY LIKE 'E' .
      ENDIF.

      lv_msg = 'SEMI &1. Cantidad real no puede superar el stock.'.
      IF ( zst_sdle_zrsdle0001_datos_semi-matnr_se_1 IS NOT INITIAL AND
           zst_sdle_zrsdle0001_datos_semi-real_se_1 > zst_sdle_zrsdle0001_datos_semi-stock_se_1 ).
        lv_error = 'X'.
        CLEAR gv_ok.
        REPLACE ALL OCCURRENCES OF '&1' IN lv_msg WITH zst_sdle_zrsdle0001_datos_semi-matnr_se_1.
        MESSAGE lv_msg TYPE 'I' DISPLAY LIKE 'E' .
      ENDIF.
      IF ( zst_sdle_zrsdle0001_datos_semi-matnr_se_2 IS NOT INITIAL AND
           zst_sdle_zrsdle0001_datos_semi-real_se_2 > zst_sdle_zrsdle0001_datos_semi-stock_se_2 ).
        lv_error = 'X'.
        CLEAR gv_ok.
        REPLACE ALL OCCURRENCES OF '&1' IN lv_msg WITH zst_sdle_zrsdle0001_datos_semi-matnr_se_2.
        MESSAGE lv_msg TYPE 'I' DISPLAY LIKE 'E' .
      ENDIF.
    WHEN OTHERS.

  ENDCASE.
  IF lv_error IS INITIAL.
    LEAVE TO SCREEN 0.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_9002  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9002 OUTPUT.
  SET PF-STATUS 'STA_9002'.
  SET TITLEBAR 'T92'.

  CLEAR gv_ok.

  "Pantalla principal. Bloquear si borrado o sólo consulta
  LOOP AT SCREEN.
    screen-input = '1'.
    MODIFY SCREEN.
    IF zst_sdle_zrsdle0001_datos_vta-destino = 2 AND screen-group1 EQ 'VTA'.
      screen-input = '0'.
      MODIFY SCREEN.
    ENDIF.

    IF screen-group1 EQ 'VTA' AND gv_permite_venta IS INITIAL.
*      IF gv_solo_consulta = 'X' OR gv_cabecera_borrada = 'X'.
      screen-input = '0'.
*      ENDIF.

      MODIFY SCREEN.
    ENDIF.
***    IF screen-name EQ 'CC_ALV_VTAS' AND gv_show_alv_dynpro_venta IS INITIAL.
***      screen-output = '0'.
***      screen-invisible = '1'.
***      MODIFY SCREEN.
***    ENDIF.
  ENDLOOP.

  READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen_vtas>) WITH KEY subscreen = cg_dynpro_vtas.
  IF <fs_config_subscreen_vtas>-contenedor IS NOT INITIAL.
    IF gv_show_alv_dynpro_venta IS INITIAL.
      <fs_config_subscreen_vtas>-contenedor->set_visible( ' ' ).
    ELSE.
      <fs_config_subscreen_vtas>-contenedor->set_visible( 'X' ).
    ENDIF.
  ENDIF.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9002 INPUT.
  DATA lv_answer TYPE char1.
  CLEAR lv_error.
  CASE okcode.
    WHEN 'SELDES'.
      lv_error = 'X'.
    WHEN 'OK'.
      gv_ok = 'X'.
      IF zst_sdle_zrsdle0001_datos_vta-destino = 1.
        IF zst_sdle_zrsdle0001_datos_vta-kunag IS INITIAL OR
            zst_sdle_zrsdle0001_datos_vta-kunwe IS INITIAL OR
            zst_sdle_zrsdle0001_datos_vta-vdatu IS INITIAL OR
            zst_sdle_zrsdle0001_datos_vta-bstkd IS INITIAL.
          lv_error = 'X'.
          CLEAR gv_ok.
          MESSAGE 'Debe indicar los datos para la creación del pedido.' TYPE 'I' DISPLAY LIKE 'E'.
        ENDIF.
      ENDIF.
      IF zst_sdle_zrsdle0001_datos_vta-destino = 2.
        IF zst_sdle_zrsdle0001_datos_vta-kunag IS NOT INITIAL OR
            zst_sdle_zrsdle0001_datos_vta-kunwe IS NOT INITIAL OR
            zst_sdle_zrsdle0001_datos_vta-vdatu IS NOT INITIAL OR
            zst_sdle_zrsdle0001_datos_vta-bstkd IS NOT INITIAL.
          lv_error = 'X'.
          CLEAR gv_ok.
          MESSAGE 'No debe indicar los datos para la creación del pedido.' TYPE 'I' DISPLAY LIKE 'E'.
        ENDIF.
      ENDIF.

*      IF zst_sdle_zrsdle0001_datos_vta IS INITIAL.
*        CALL FUNCTION 'POPUP_TO_CONFIRM'
*          EXPORTING
**           TITLEBAR              = ' '
**           DIAGNOSE_OBJECT       = ' '
*            text_question         = 'No ha indicado datos ventas, ¿Va a realizar un traslado?'
**           TEXT_BUTTON_1         = 'Ja'(001)
**           ICON_BUTTON_1         = ' '
**           TEXT_BUTTON_2         = 'Nein'(002)
**           ICON_BUTTON_2         = ' '
**           DEFAULT_BUTTON        = '1'
*            display_cancel_button = ' '
**           USERDEFINED_F1_HELP   = ' '
**           START_COLUMN          = 25
**           START_ROW             = 6
**           POPUP_TYPE            =
**           IV_QUICKINFO_BUTTON_1 = ' '
**           IV_QUICKINFO_BUTTON_2 = ' '
*          IMPORTING
*            answer                = lv_answer.
*
*        IF lv_answer <> '1'.
*          CLEAR gv_ok.
*          lv_error = 'X'.
*        ENDIF.
*      ELSE.
*        " Validamos....
*      ENDIF.

    WHEN OTHERS.

  ENDCASE.
  IF lv_error IS INITIAL.
    LEAVE TO SCREEN 0.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_9002  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9004 OUTPUT.
  SET PF-STATUS 'STA_9004'.
  SET TITLEBAR 'T94'.

  CLEAR gv_ok.


  TRY.
      DATA(fl_zlnum_manager) = NEW zhcl_mmim_zlnum_manager( i_werks = p_werks i_lgort = p_lgort ).

      DATA(lt_zlnum) = fl_zlnum_manager->get_zlnum_data_4_matnr_charg( i_matnr = zst_sdle_zrsdle0001_datos_impr-matnr_final
                                                                       i_charg = zst_sdle_zrsdle0001_datos_impr-charg ).

      READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen_impr>) WITH KEY subscreen = cg_dynpro_impr.
      CLEAR <fs_config_subscreen_impr>-tabla.
      LOOP AT lt_zlnum ASSIGNING FIELD-SYMBOL(<fs_zlnum>).
        APPEND INITIAL LINE TO <fs_config_subscreen_impr>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv_impr>).
        MOVE-CORRESPONDING <fs_zlnum> TO <fs_alv_impr>.
        <fs_alv_impr>-origen_zlnum = 'Z'.
*              MOVE-CORRESPONDING <fs_alv> TO <fs_alv_vta>.
*            <fs_alv_vta>-kwmeng_real = <fs_alv>-stock.
*            <fs_alv_vta>-vrkme = <fs_alv>-meins_stock.

      ENDLOOP.

      SELECT *
        FROM mseg
        INTO TABLE @DATA(lt_mseg)
        WHERE werks = @p_werks AND
              matnr = @zst_sdle_zrsdle0001_datos_impr-matnr_final AND
              charg = @zst_sdle_zrsdle0001_datos_impr-charg AND
              bwart IN ('641', '647') AND
              vbeln_im <> ''.
      LOOP AT lt_mseg ASSIGNING FIELD-SYMBOL(<fs_mseg>).
        SELECT SINGLE *
          FROM mseg
          INTO @DATA(ls_mseg_anulacion)
          WHERE smbln = @<fs_mseg>-mblnr AND
                sjahr = @<fs_mseg>-mjahr AND
                smblp = @<fs_mseg>-zeile.
        IF sy-subrc = 0.
          DELETE lt_mseg.
        ENDIF.
      ENDLOOP.
      LOOP AT lt_mseg ASSIGNING <fs_mseg>.
        SELECT *
          FROM vbfa
*          inner join ltap on ( ltap~LGNUM = vbfa~lgnum and
*                               ltap~TANUM = vbfa~VBELN and
*                               ltap~TAPOS = vbfa~POSNN )
          INTO TABLE @DATA(lt_vbfa)
          WHERE vbelv = @<fs_mseg>-vbeln_im AND
                posnv = @<fs_mseg>-vbelp_im AND
                vbtyp_n = 'Q'.
        LOOP AT lt_vbfa ASSIGNING FIELD-SYMBOL(<fs_vbfa>).
          DATA: lv_tanum TYPE ltap-tanum,
                lv_tapos TYPE ltap-tapos.

          lv_tanum = <fs_vbfa>-vbeln.
          lv_tapos = <fs_vbfa>-posnn.
          SELECT SINGLE *
            FROM ltap
            INTO @DATA(ls_ltap)
            WHERE lgnum = @<fs_vbfa>-lgnum AND
                  tanum = @lv_tanum AND
                  tapos = @lv_tapos.
          IF sy-subrc = 0.
            APPEND INITIAL LINE TO <fs_config_subscreen_impr>-tabla ASSIGNING <fs_alv_impr>.
            <fs_alv_impr>-zlnum = ls_ltap-vlenr.
            <fs_alv_impr>-lmen1 = ls_ltap-nista.
            <fs_alv_impr>-meins = ls_ltap-meins.
            <fs_alv_impr>-origen_zlnum = 'R'.
          ENDIF.
        ENDLOOP.
      ENDLOOP.

      IF <fs_config_subscreen_impr>-alv IS NOT INITIAL.
        CALL METHOD <fs_config_subscreen_impr>-alv->refresh_table_display.
      ENDIF.

    CATCH zcx_exception.
      MESSAGE 'Error al recuperar información etiquetas' TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.
  ENDTRY.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9004 INPUT.
  DATA lv_volver TYPE xflag.
  DATA: tl_index_rows TYPE lvc_t_row,
        wl_index_rows LIKE LINE OF tl_index_rows,
        lv_num_lineas TYPE i.


  CLEAR lv_error.
  lv_volver = 'X'.
  CASE okcode.
    WHEN 'OK'.
      gv_ok = 'X'.
      READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen_imp>) WITH KEY subscreen = cg_dynpro_impr.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen_imp>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES lv_num_lineas.
      IF lv_num_lineas = 0.
        MESSAGE 'Debe seleccionar al menos una fila' TYPE 'I' DISPLAY LIKE 'E'.
        lv_error = 'X'.
        CLEAR gv_ok.
      ENDIF.

    WHEN 'ALTA'.

      gv_ok = 'X'.

      CLEAR lv_volver.

      IF zst_sdle_zrsdle0001_datos_impr-anzl1 IS INITIAL OR
          zst_sdle_zrsdle0001_datos_impr-lmen1 IS INITIAL.
        lv_error = 'X'.
        CLEAR gv_ok.
        MESSAGE 'No debe indicar los datos para la creación de nuevas etiquetas.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.

      IF lv_error IS INITIAL.
        TRY.
            fl_zlnum_manager = NEW zhcl_mmim_zlnum_manager( i_werks = p_werks i_lgort = p_lgort ).

            DATA(lt_return) = fl_zlnum_manager->set_new_zlnum_4_matnr_charg( i_matnr = zst_sdle_zrsdle0001_datos_impr-matnr_final
                                                                            i_charg = zst_sdle_zrsdle0001_datos_impr-charg
                                                                            i_anzl1 = zst_sdle_zrsdle0001_datos_impr-anzl1
                                                                            i_lmen1 = zst_sdle_zrsdle0001_datos_impr-lmen1
                                                                            i_meins = zst_sdle_zrsdle0001_datos_impr-meins
                                                                            i_commit = 'X' ).

            LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<fs_return>) WHERE type = 'E' OR type = 'A'.
              lv_error = 'X'.
              CLEAR gv_ok.
              MESSAGE 'Error al generar nuevas etiquetas' TYPE 'I' DISPLAY LIKE 'E'.
              EXIT.
            ENDLOOP.

          CATCH zcx_exception.
            MESSAGE 'Error al recuperar información etiquetas' TYPE 'I' DISPLAY LIKE 'E'.
            CLEAR gv_ok.
            lv_error = 'X'.
            EXIT.
        ENDTRY.
      ENDIF.
    WHEN OTHERS.

  ENDCASE.
  IF lv_error IS INITIAL AND lv_volver IS NOT INITIAL.
    LEAVE TO SCREEN 0.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_9003  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9003 OUTPUT.
  SET PF-STATUS 'STA_9003'.
  SET TITLEBAR 'T93'.

  CLEAR gv_ok.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9003  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9003 INPUT.

  CASE okcode.
    WHEN 'OK'.
      gv_ok = 'X'.
    WHEN OTHERS.

  ENDCASE.
  LEAVE TO SCREEN 0.
ENDMODULE.
FORM f_refresh_alvs.
  LOOP AT tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WHERE dynpro = cg_dynpro_main.
    " Recargar datos
    CLEAR <fs_config_subscreen>-tabla.
    PERFORM f_llenar_datos TABLES <fs_config_subscreen>-tabla USING <fs_config_subscreen>-subscreen.
    " Refrescar ALV
    IF <fs_config_subscreen>-alv IS NOT INITIAL.
      CALL METHOD <fs_config_subscreen>-alv->refresh_table_display.
    ENDIF.
  ENDLOOP.
ENDFORM.
FORM f_handle_hotspot_click
      USING vp_dynpro e_row e_column wp_alv TYPE st_lin_alv_patron.

  CASE e_column.
    WHEN 'MATNR_FINAL'.
      IF wp_alv-matnr_final IS NOT INITIAL.
        SET PARAMETER ID 'MAT' FIELD wp_alv-matnr_final.
        SET PARAMETER ID 'WRK' FIELD p_werks.
        SET PARAMETER ID 'LAG' FIELD p_lgort.

*K Basic Data 1
*C Classification
*V Sales: Sales Org. Data 1
*E Purchasing
*D MRP 1
*P Forecasting
*A Work Scheduling
*F Production Resources/Tools
*L General Plant Data / Storage 1
*S Warehouse Management 1
*Q Quality Management
*B Accounting 1
*G Costing 1
*X Plant Stock
*Z Storage Location Stock

*        SET PARAMETER ID 'MXX' FIELD 'DK' .

        CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN .
      ENDIF.
    WHEN 'MATNR_SE'.
      IF wp_alv-matnr_se IS NOT INITIAL.
        SET PARAMETER ID 'MAT' FIELD wp_alv-matnr_se.
        SET PARAMETER ID 'WRK' FIELD p_werks.
        SET PARAMETER ID 'LAG' FIELD p_lgort.
        CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN .
      ENDIF.

    WHEN 'VBELN'.
      IF wp_alv-vbeln IS NOT INITIAL.
        SET PARAMETER ID 'AUN' FIELD wp_alv-vbeln.
        CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN .
      ENDIF.

    WHEN 'EBELN'.
      IF wp_alv-ebeln IS NOT INITIAL.
        SET PARAMETER ID 'BES' FIELD wp_alv-ebeln.
        CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN .
      ENDIF.
  ENDCASE.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  PBO_1_0120  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_1_error_log OUTPUT.
  CHECK vg_solo_consulta IS INITIAL.

  DATA(fl_monitorexp_dpc_imp) = NEW zsscl_sdle_monitorexp_dpc_imp( ).

  DATA(lt_log) = fl_monitorexp_dpc_imp->trans_log_getlist( lp_numtransporte = gs_trans_cab-numtransporte lp_estado = fl_monitorexp_dpc_imp->gc_estado_log_nook ).
  DATA(lv_lines_log) = lines( lt_log ).

  CLEAR gv_error_ejecucion.

  IF lv_lines_log IS NOT INITIAL.
    gv_error_ejecucion = 'X'.

    IF gv_error_ejecucion_1ar IS NOT INITIAL.

      CLEAR gv_error_ejecucion_1ar.

      DATA lv_texto TYPE text255.
      lv_texto = 'El transporte se ha ejecutado con errores. Consulte el log.'.

*      MESSAGE 'El transporte se ha ejecutado con errores. Consulte el log.' type 'I' DISPLAY LIKE 'W'.

      CALL FUNCTION 'POPUP_TO_INFORM'
        EXPORTING
          titel = 'Información'
          txt1  = lv_texto
          txt2  = ' '.
*      CALL FUNCTION 'POPUP_TO_CONFIRM'
*        EXPORTING
*          text_question         = lv_texto
*          display_cancel_button = space.
**        IMPORTING
**          answer         = vl_answer
**        EXCEPTIONS
**          text_not_found = 1
**          OTHERS         = 2.

    ENDIF.
  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_9005  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9005 OUTPUT.
  SET PF-STATUS 'STA_9005'.
  SET TITLEBAR 'T95'.
  DATA: wl_alv         TYPE zst_sdle_zrsdle0001_alv.

  CHECK gv_ok IS NOT INITIAL.

  TRY.
      fl_monitorexp_dpc_imp = NEW zsscl_sdle_monitorexp_dpc_imp( ).

      DATA(lt_hus) = fl_monitorexp_dpc_imp->trans_hu_getlist( lp_numtransporte = gs_trans_cab-numtransporte
                                                              lp_matnr_final = zst_sdle_zrsdle0001_datos_hu-matnr_final
                                                              lp_charg = zst_sdle_zrsdle0001_datos_hu-charg ).

      READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen_hu>) WITH KEY subscreen = cg_dynpro_hu.
      IF sy-subrc = 0.
        CLEAR <fs_config_subscreen_hu>-tabla.
        IF <fs_config_subscreen_hu>-event_receiver IS NOT INITIAL. CLEAR <fs_config_subscreen_hu>-event_receiver->datos_modificados. ENDIF.
        LOOP AT lt_hus ASSIGNING FIELD-SYMBOL(<fs_hu>).
*          APPEND INITIAL LINE TO <fs_config_subscreen_hu>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv_hu>).
          MOVE-CORRESPONDING <fs_hu> TO wl_alv.
          wl_alv-meins = zst_sdle_zrsdle0001_datos_hu-vrkme.
          PERFORM f_append_dato  TABLES   <fs_config_subscreen_hu>-tabla  USING wl_alv.
        ENDLOOP.

        IF <fs_config_subscreen_hu>-alv IS NOT INITIAL.
          CALL METHOD <fs_config_subscreen_hu>-alv->refresh_table_display.
        ENDIF.

      ENDIF.


    CATCH zcx_exception.
      MESSAGE 'Error al recuperar definición embalaje' TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.
  ENDTRY.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9005  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9005 INPUT.

***  DATA: tl_index_rows TYPE lvc_t_row,
***        wl_index_rows LIKE LINE OF tl_index_rows,
***        lv_num_lineas TYPE i.
  DATA vl_refresh TYPE xfeld VALUE space.
  DATA: vl_cantidad_hu TYPE zst_sdle_zrsdle0001_datos_hu-kwmeng_real,
        lv_fieldname   TYPE lvc_fname.

  DATA: lt_rg_mtart TYPE RANGE OF mara-mtart,
        ls_mtart    LIKE LINE OF lt_rg_mtart.

  CLEAR ls_mtart.
  ls_mtart-option = 'EQ'.
  ls_mtart-sign = 'I'.
  ls_mtart-low = 'ZPAL'.

  CLEAR lv_error.
  lv_volver = 'X'.

  gv_ok = 'X'.

  CASE okcode.
    WHEN 'OK'.

      CLEAR vl_cantidad_hu.
      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen_hu> WITH KEY subscreen = cg_dynpro_hu.
      CHECK sy-subrc = 0.

      <fs_config_subscreen_hu>-alv->check_changed_data( IMPORTING e_valid = DATA(vl_valid) CHANGING c_refresh = vl_refresh ).

      CLEAR lv_fieldname.
      LOOP AT <fs_config_subscreen_hu>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv>).
        "
        " Quito lo borrado y así menos cosas que procesamos.
        "
        IF <fs_alv>-zzmarca_edit CP 'D*'.
          DELETE <fs_config_subscreen_hu>-tabla.
        ELSE.
          CLEAR <fs_alv>-it_estilos.
          ADD <fs_alv>-tmeng TO vl_cantidad_hu.
          IF lv_error IS INITIAL AND <fs_alv>-tmeng IS INITIAL.
            MESSAGE 'Debe indicar cantidad' TYPE 'I' DISPLAY LIKE 'E'.
            lv_error = 'X'.
            lv_fieldname = 'TMENG'.
          ENDIF.
          IF lv_error IS INITIAL AND <fs_alv>-vhilm IS INITIAL.
            MESSAGE 'Debe indicar material embalaje' TYPE 'I' DISPLAY LIKE 'E'.
            lv_error = 'X'.
            lv_fieldname = 'VHILM'.
          ENDIF.
          IF lv_error IS INITIAL AND <fs_alv>-vhilm IS NOT INITIAL.
            SELECT SINGLE *
              FROM mara
              INTO @DATA(ls_mara_pal)
              WHERE matnr = @<fs_alv>-vhilm AND
                    mtart IN @lt_rg_mtart.
            IF sy-subrc <> 0.
              MESSAGE 'El material indicado no es un palet' TYPE 'I' DISPLAY LIKE 'E'.
              lv_error = 'X'.
              lv_fieldname = 'VHILM'.
            ENDIF.
          ENDIF.
          IF lv_error IS INITIAL AND <fs_alv>-vhilm IS NOT INITIAL.
            SELECT SINGLE *
              FROM marc
              INTO @DATA(ls_marc_pal)
              WHERE matnr = @<fs_alv>-vhilm AND
                    werks = @p_werks.
            IF sy-subrc <> 0.
              MESSAGE 'El material no está dado de alta en el centro' TYPE 'I' DISPLAY LIKE 'E'.
              lv_error = 'X'.
              lv_fieldname = 'VHILM'.
            ENDIF.
          ENDIF.
          IF lv_error IS INITIAL AND <fs_alv>-vhilm IS NOT INITIAL.
            SELECT SINGLE *
              FROM mard
              INTO @DATA(ls_mard_pal)
              WHERE matnr = @<fs_alv>-vhilm AND
                    werks = @p_werks AND
                    lgort = @p_lgort.
            IF sy-subrc <> 0.
              MESSAGE 'El material no está dado de alta en el almacén' TYPE 'I' DISPLAY LIKE 'E'.
              lv_error = 'X'.
              lv_fieldname = 'VHILM'.
            ENDIF.
          ENDIF.
        ENDIF.
        IF lv_error IS NOT INITIAL.
          DATA: wl_estilo TYPE lvc_s_styl.
*          APPEND INITIAL LINE TO <fs_alv>-it_estilos ASSIGNING FIELD-SYMBOL(<fs_estilo>).
          wl_estilo-fieldname = lv_fieldname.
          wl_estilo-style = alv_style_color_inv_negative BIT-OR alv_style_font_bold. " cl_gui_alv_grid=>mc_style_disabled.
          INSERT wl_estilo INTO TABLE <fs_alv>-it_estilos.
          EXIT.
        ENDIF.
      ENDLOOP.

      "
      " Cantidad debe cuadrar.
      "
      IF lv_error IS INITIAL AND vl_cantidad_hu <> zst_sdle_zrsdle0001_datos_hu-kwmeng_real.
        MESSAGE 'Cantidad total embalada no suma cantidad a servir' TYPE 'I' DISPLAY LIKE 'E'.
        lv_error = 'X'.
      ENDIF.

      IF lv_error IS  INITIAL.
        DATA ls_hu TYPE zst_sdle_transp_hu.
        "
        " Borramos primero y luego grabamos.
        "
        TRY.
            fl_monitorexp_dpc_imp = NEW zsscl_sdle_monitorexp_dpc_imp( ).
            DATA(lt_hu_actuales) = fl_monitorexp_dpc_imp->trans_hu_getlist( lp_numtransporte = gs_trans_cab-numtransporte
                                                            lp_matnr_final = zst_sdle_zrsdle0001_datos_hu-matnr_final
                                                            lp_charg = zst_sdle_zrsdle0001_datos_hu-charg ).
            LOOP AT lt_hu_actuales INTO DATA(ls_hu_actual).
              MOVE-CORRESPONDING ls_hu_actual TO ls_hu.
              fl_monitorexp_dpc_imp->trans_hu_delete( ls_hu ).
            ENDLOOP.

            LOOP AT <fs_config_subscreen_hu>-tabla ASSIGNING <fs_alv>.

              MOVE-CORRESPONDING <fs_alv> TO ls_hu.
              ls_hu-numtransporte = gs_trans_cab-numtransporte.
              ls_hu-matnr_final = zst_sdle_zrsdle0001_datos_hu-matnr_final.
              ls_hu-charg = zst_sdle_zrsdle0001_datos_hu-charg.
              fl_monitorexp_dpc_imp->trans_hu_create( CHANGING wp_trans_hu = ls_hu ).
            ENDLOOP.
          CATCH zcx_exception.
            MESSAGE 'Error al actualizar definición embalaje' TYPE 'I' DISPLAY LIKE 'E'.
            EXIT.
        ENDTRY.
      ELSE.
        CALL METHOD <fs_config_subscreen_hu>-alv->refresh_table_display.
      ENDIF.
      IF lv_error IS NOT INITIAL. CLEAR lv_volver. ENDIF.
    WHEN 'CANCEL'.
      DATA: vl_answer        TYPE c,
            vl_titlebar      TYPE string,
            vl_text_question TYPE string,
            vl_error         TYPE xfeld,
            vl_msg_error     TYPE text255.

      CLEAR vl_refresh.

      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen_hu> WITH KEY subscreen = cg_dynpro_hu.
      CHECK sy-subrc = 0.

      <fs_config_subscreen_hu>-alv->check_changed_data( IMPORTING e_valid = vl_valid CHANGING c_refresh = vl_refresh ).
      IF <fs_config_subscreen_hu>-event_receiver->datos_modificados = 'X'.
***        vg_datos_modificados = 'X'.
***        EXIT.

        "Mensaje de advertencia si hay datos modificados
        MESSAGE s916(zseis) INTO vl_titlebar.
        vl_text_question = 'Hay datos modificados sin grabar. Si sale se perderan los cambios. ¿Desea continar?'.
        CLEAR vl_answer.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar              = vl_titlebar
            text_question         = vl_text_question
            default_button        = '1'
            display_cancel_button = ' '
          IMPORTING
            answer                = vl_answer
          EXCEPTIONS
            text_not_found        = 1
            OTHERS                = 2.
        IF vl_answer = '2'.
          CLEAR lv_volver.
          CLEAR gv_ok.
        ENDIF.

      ENDIF.

    WHEN OTHERS.


  ENDCASE.
  IF lv_error IS NOT INITIAL.
    CLEAR gv_ok.
  ENDIF.
  IF lv_error IS INITIAL AND lv_volver IS NOT INITIAL.
    LEAVE TO SCREEN 0.
  ENDIF.
ENDMODULE.
FORM f_pbo_post TABLES it_alv USING vp_dynnr.
**Filtramos por defecto todos los datos cuya marca empiece por 'B' (Borrados)
  DATA: lt_filter LIKE it_filter,
        wa_filter TYPE lvc_s_filt.
  IF vp_dynnr = cg_dynpro_hu.
    wa_filter-fieldname = 'ZZMARCA_EDIT'.
    wa_filter-sign    = 'E'.
    wa_filter-option  = 'CP'.
    wa_filter-low     = 'D*'.
    APPEND wa_filter TO lt_filter.

    READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen_hu> WITH KEY subscreen = cg_dynpro_hu.
    CHECK sy-subrc = 0.


    CALL METHOD <fs_config_subscreen_hu>-alv->set_filter_criteria
      EXPORTING
        it_filter = lt_filter.

  ENDIF.

ENDFORM.
FORM f_validar_tolerancias
  USING lp_ebeln TYPE ebeln
        lp_ebelp TYPE ebelp
        lp_vbeln TYPE vbeln
        lp_posnr TYPE posnr
        lp_destino TYPE zed_destino_trans_subco
        lp_kwmeng_real TYPE zed_kwmeng_real
        lp_vrkme TYPE vrkme
  CHANGING lp_error_txt TYPE text255.
  DATA: lv_cant_ya_procesado TYPE ekbe-menge,
        lv_cant_max          TYPE ekbe-menge,
        lv_cant_lim          TYPE ekbe-menge,
        lv_txt_tmp           TYPE text25,
        lv_error             TYPE xflag.

  CLEAR: lv_cant_ya_procesado, lv_cant_max, lv_cant_lim.

  CLEAR: lv_error, lp_error_txt.

  IF lp_ebelp IS NOT INITIAL.
    SELECT SINGLE *
      FROM ekpo
      INTO @DATA(ls_ekpo)
      WHERE ebeln = @lp_ebeln AND
            ebelp = @lp_ebelp.
    IF sy-subrc <> 0.
      CLEAR ls_ekpo.
    ENDIF.

    IF ls_ekpo-elikz IS NOT INITIAL.
      lp_error_txt = 'Posición del pedido &1 &2 está marcada como "Entrega final". No se puede continuar.'.
      REPLACE ALL OCCURRENCES OF '&1' IN lp_error_txt WITH lp_ebeln.
      REPLACE ALL OCCURRENCES OF '&2' IN lp_error_txt WITH lp_ebelp.
      lv_error = 'X'.
      MESSAGE lp_error_txt TYPE 'I' DISPLAY LIKE 'E'.
    ENDIF.
    CHECK lv_error IS INITIAL.

    SELECT *
      FROM ekbe
      INTO TABLE @DATA(lt_ekbe)
      WHERE ebeln = @ls_ekpo-ebeln AND
            ebelp = @ls_ekpo-ebelp AND
            bewtp = 'E'.
    LOOP AT lt_ekbe ASSIGNING FIELD-SYMBOL(<fs_ekbe>).
      IF <fs_ekbe>-bwart = '101'.
        ADD <fs_ekbe>-menge TO lv_cant_ya_procesado.
      ELSE.
        SUBTRACT <fs_ekbe>-menge FROM lv_cant_ya_procesado.
      ENDIF.
    ENDLOOP.

    IF ls_ekpo-uebtk IS INITIAL. " no es ilimitado.
      lv_cant_max = ls_ekpo-menge * ( 1 + ls_ekpo-uebto / 100 ).
      lv_cant_lim = lv_cant_max - lv_cant_ya_procesado.
      IF ( lv_cant_ya_procesado + lp_kwmeng_real ) > lv_cant_max.
*            lv_error = 'La cantidad indicada excede el máximo permitido en el pedido.'.
        lp_error_txt = 'La cantidad indicada &1 excede el máximo permitido &2 en el pedido &3 &4.'.
        lv_error = 'X'.
        WRITE lp_kwmeng_real TO lv_txt_tmp UNIT lp_vrkme.
        CONDENSE lv_txt_tmp.
        REPLACE ALL OCCURRENCES OF '&1' IN lp_error_txt WITH lv_txt_tmp.

        WRITE lv_cant_lim TO lv_txt_tmp UNIT lp_vrkme.
        CONDENSE lv_txt_tmp.
        REPLACE ALL OCCURRENCES OF '&2' IN lp_error_txt WITH lv_txt_tmp.

        WRITE lp_ebeln TO lv_txt_tmp.
        CONDENSE lv_txt_tmp.
        REPLACE ALL OCCURRENCES OF '&3' IN lp_error_txt WITH lv_txt_tmp.

        WRITE lp_ebelp TO lv_txt_tmp.
        CONDENSE lv_txt_tmp.
        REPLACE ALL OCCURRENCES OF '&4' IN lp_error_txt WITH lv_txt_tmp.

      ENDIF.
    ENDIF.

  ENDIF.

***  CHECK lv_error IS INITIAL.
***
***  CLEAR: lv_cant_ya_procesado, lv_cant_max.
***
***  IF lp_posnr IS NOT INITIAL.
***    SELECT SINGLE *
***      FROM vbap
***      INTO @DATA(ls_vbap)
***      WHERE vbeln = @lp_vbeln AND
***            posnr = @lp_posnr.
***    IF sy-subrc <> 0.
***      CLEAR ls_vbap.
***    ENDIF.
***
***    SELECT SINGLE *
***      FROM vbup
***      INTO @DATA(wl_vbup)
***      WHERE vbeln = @lp_vbeln AND
***            posnr = @lp_posnr.
***    IF sy-subrc <> 0.
***      CLEAR wl_vbup.
***    ENDIF.
***    IF lp_destino = 1.
***      SELECT *
***        FROM vbfa
***        INTO TABLE @DATA(lt_vbfa)
***        WHERE vbelv = @lp_vbeln AND
***              posnv = @lp_posnr AND
***              vbtyp_n = 'J'.
***
***      LOOP AT lt_vbfa ASSIGNING FIELD-SYMBOL(<fs_vbfa>).
***        DATA ls_menge TYPE ekpo-menge.
***        ls_menge = <fs_vbfa>-rfmng.
***        CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
***          EXPORTING
***            i_matnr              = ls_vbap-matnr
***            i_in_me              = <fs_vbfa>-meins
***            i_out_me             = ls_vbap-vrkme
***            i_menge              = ls_menge
***          IMPORTING
***            e_menge              = ls_menge
***          EXCEPTIONS
***            error_in_application = 1
***            error                = 2
***            OTHERS               = 3.
***        IF sy-subrc <> 0.
***          CLEAR ls_menge.
***        ENDIF.
***
***        ADD ls_menge TO lv_cant_ya_procesado.
***
***      ENDLOOP.
***
***
***      IF ls_vbap-uebtk IS INITIAL. " no es ilimitado.
***        lv_cant_max = ls_vbap-klmeng * ( 1 + ls_vbap-uebto / 100 ).
***        lv_cant_lim = lv_cant_max - lv_cant_ya_procesado.
***        IF ( lv_cant_ya_procesado + lp_kwmeng_real ) > lv_cant_max.
***          lv_error = 'La cantidad indicada &1 excede el máximo permitido &2 en el documento de venta &3 &4.'.
***          WRITE lp_kwmeng_real TO lv_txt_tmp UNIT lp_vrkme.
***          CONDENSE lv_txt_tmp.
***          REPLACE ALL OCCURRENCES OF '&1' IN lp_error_txt WITH lv_txt_tmp.
***
***          WRITE lv_cant_lim TO lv_txt_tmp UNIT lp_vrkme.
***          CONDENSE lv_txt_tmp.
***          REPLACE ALL OCCURRENCES OF '&2' IN lp_error_txt WITH lv_txt_tmp.
***
***          WRITE lp_vbeln TO lv_txt_tmp.
***          CONDENSE lv_txt_tmp.
***          REPLACE ALL OCCURRENCES OF '&3' IN lp_error_txt WITH lv_txt_tmp.
***
***          WRITE lp_posnr TO lv_txt_tmp.
***          CONDENSE lv_txt_tmp.
***          REPLACE ALL OCCURRENCES OF '&4' IN lp_error_txt WITH lv_txt_tmp.
***        ENDIF.
***      ENDIF.
***    ENDIF.
***  ENDIF.

ENDFORM.
