*&---------------------------------------------------------------------*
*&  Include           ZISD_GESTION_PICKING_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  SELECCIONAR_ENTREGAS_MC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM seleccionar_entregas_mc CHANGING p_vbeln TYPE vbeln_vl.
  DATA: BEGIN OF lw_vbeln,
          vbeln TYPE vbeln_vl,
          tddat TYPE tddat_d.
  DATA END OF lw_vbeln.
  DATA lt_vbeln LIKE lw_vbeln OCCURS 0.
  DATA lt_ftab TYPE STANDARD TABLE OF ddshretval.
  DATA lw_ftab TYPE ddshretval.

  SELECT likp~vbeln likp~tddat
    INTO CORRESPONDING FIELDS OF TABLE lt_vbeln
    FROM likp
    JOIN vbuk ON vbuk~vbeln = likp~vbeln
    WHERE vbuk~kostk IN ('A','B').

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
*     DDIC_STRUCTURE  = ' '
      retfield        = 'VBELN'
*     PVALKEY         = ' '
*     DYNPPROG        = ' '
*     DYNPNR          = ' '
*     DYNPROFIELD     = ' '
*     STEPL           = 0
      window_title    = 'Entregas'
*     VALUE           = ' '
      value_org       = 'S'
*     MULTIPLE_CHOICE = ' '
*     DISPLAY         = ' '
*     CALLBACK_PROGRAM       = ' '
*     CALLBACK_FORM   = ' '
*     CALLBACK_METHOD =
*     MARK_TAB        =
* IMPORTING
*     USER_RESET      =
    TABLES
      value_tab       = lt_vbeln
*     FIELD_TAB       =
      return_tab      = lt_ftab
*     DYNPFLD_MAPPING =
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.
  CHECK sy-subrc = 0.

  READ TABLE lt_ftab INTO lw_ftab INDEX 1.
  MOVE lw_ftab-fieldval TO p_vbeln.

ENDFORM.                    " SELECCIONAR_ENTREGAS_MC
*&---------------------------------------------------------------------*
*&      Form  SELECCIONAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM seleccionar_datos .
  DATA lt_vttk TYPE STANDARD TABLE OF vttk.
  DATA lw_vttk TYPE vttk.
  DATA lt_vbfa TYPE STANDARD TABLE OF vbfa.
  DATA lw_vbfa TYPE vbfa.
  DATA lt_likp TYPE STANDARD TABLE OF likp.
  DATA lw_likp TYPE likp.
  DATA lt_lips TYPE STANDARD TABLE OF lips.
  DATA lw_lips TYPE lips.
  DATA lt_vbuk TYPE STANDARD TABLE OF vbuk.
  DATA lw_vbuk TYPE vbuk.
  DATA lw_dato TYPE zesd_entregas_exped.
  DATA lw_vbup TYPE vbup.
  DATA l_pikmg TYPE pikmg.

* Leemos los datos de las tablas estandares

  SELECT * INTO TABLE lt_vttk FROM vttk    "Transportes
    WHERE dplbg IN sdplbg
      AND uplbg IN suplbg
      AND tknum IN stknum.

  CHECK sy-subrc = 0 AND lt_vttk[] IS NOT INITIAL.

  SELECT * INTO TABLE lt_vbfa FROM vbfa
    FOR ALL ENTRIES IN lt_vttk
    WHERE vbtyp_n = '8'  "documento siguiente = transporte
      AND vbtyp_v = 'J'  "documento anterior = entrega
      AND vbelv IN svbeln
      AND vbeln = lt_vttk-tknum.

  CHECK sy-subrc = 0 AND lt_vbfa[] IS NOT INITIAL.

  SELECT * INTO TABLE lt_likp FROM likp    "Entregas
    FOR ALL ENTRIES IN lt_vbfa
    WHERE vbeln = lt_vbfa-vbelv.

  CHECK sy-subrc = 0 AND lt_likp[] IS NOT INITIAL.

  SELECT * INTO TABLE lt_lips FROM lips    "Posiciones de entregas
    FOR ALL ENTRIES IN lt_likp
    WHERE vbeln = lt_likp-vbeln.

* Eliminamos las posiciones con lote, ya que serían las bobinas.
  DELETE lt_lips WHERE uecha <> ''.

  SELECT * INTO TABLE lt_vbuk FROM vbuk    "Status de entrega
    FOR ALL ENTRIES IN lt_likp
    WHERE vbeln = lt_likp-vbeln.

* Componemos los datos en la tabla de resultado.

  LOOP AT lt_vttk INTO lw_vttk.
    CLEAR lw_dato.
    lw_dato-dplbg = lw_vttk-dplbg.
    lw_dato-uplbg = lw_vttk-uplbg.
    lw_dato-sttrg = lw_vttk-sttrg.
    lw_dato-tknum = lw_vttk-tknum.

    PERFORM obtener_denominacion_stglob USING lw_dato-sttrg CHANGING lw_dato-txt_sttrg.

    LOOP AT lt_vbfa INTO lw_vbfa WHERE vbeln = lw_vttk-tknum.

      CLEAR lw_likp.
      READ TABLE lt_likp INTO lw_likp WITH KEY vbeln = lw_vbfa-vbelv.
      CHECK sy-subrc = 0.

      READ TABLE lt_vbuk INTO lw_vbuk WITH KEY vbeln = lw_likp-vbeln.  "Verificamos status A o B de la entrega
      CHECK sy-subrc = 0 AND ( lw_vbuk-kostk = 'A' OR lw_vbuk-kostk = 'B' ).

      lw_dato-kunnr = lw_likp-kunnr.
      SELECT SINGLE name1 INTO lw_dato-name1 FROM kna1 WHERE kunnr = lw_dato-kunnr.
      lw_dato-vbeln = lw_likp-vbeln.
      lw_dato-kostk = lw_vbuk-kostk.
      lw_dato-wbstk = lw_vbuk-wbstk.

      LOOP AT lt_lips INTO lw_lips WHERE vbeln = lw_likp-vbeln.
        lw_dato-posnr = lw_lips-posnr.
        lw_dato-matnr = lw_lips-matnr.

        IF lw_lips-charg IS INITIAL.
          lw_dato-brgew = lw_lips-kcmeng.
        ELSE.
          lw_dato-brgew = lw_lips-brgew.
        ENDIF.

* Calculamos la cantidad de picking.
        PERFORM calcular_picking USING lw_lips CHANGING l_pikmg.

        IF lw_lips-lfimg >= l_pikmg.
          lw_dato-g_lfimg_pdte = lw_lips-lfimg - l_pikmg.
        ELSE.
          lw_dato-g_lfimg_pdte = 0.
        ENDIF.
        lw_dato-meins = lw_lips-vrkme.
        lw_dato-gewei = lw_lips-gewei.

* Buscamos el status de la posición correspondiente al picking.
        PERFORM verificar_concluida USING lw_lips-vbeln lw_lips-posnr CHANGING lw_dato-concluida.

        SELECT SINGLE maktx INTO lw_dato-maktx FROM makt
          WHERE matnr = lw_dato-matnr
            AND spras = sy-langu.

        APPEND lw_dato TO gt_datos.
      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

  SORT gt_datos BY dplbg uplbg.

ENDFORM.                    " SELECCIONAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_RESULTADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_resultados .
  CALL SCREEN 9000.
ENDFORM.                    " MOSTRAR_RESULTADOS
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_9000
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_9000 .
  DATA l_okcode TYPE sy-ucomm.
  DATA lw_datos TYPE zesd_entregas_exped.

  l_okcode = okcode_9000.
  CLEAR okcode_9000.

  CASE l_okcode.
    WHEN 'REFRESH'.
      PERFORM refrescar_datos.
    WHEN 'REIMP'.
      PERFORM reimprimir_picking USING sy-dynnr.
    WHEN 'CONFIRMAR'.
      PERFORM iniciar_carga USING lw_datos 0.  "LW_DATOS va expresamente en blanco.
  ENDCASE.

ENDFORM.                    " USER_COMMAND_9000
*&---------------------------------------------------------------------*
*&      Form  EXIT_COMMAND_9000
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit_command_9000 .
  DATA l_okcode TYPE sy-ucomm.

  l_okcode = okcode_9000.
  CLEAR okcode_9000.

  LEAVE TO SCREEN 0.
ENDFORM.                    " EXIT_COMMAND_9000
*&---------------------------------------------------------------------*
*&      Form  CREAR_ALV_9000
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_alv_9000 .
  DATA l_repid TYPE sy-repid.
  DATA l_dynnr TYPE sy-dynnr.
  DATA lw_layout TYPE lvc_s_layo.
  DATA lw_variant TYPE disvariant.

  l_repid = sy-repid.
  l_dynnr = sy-dynnr.

  CREATE OBJECT g_cont_9000
    EXPORTING
      repid                       = l_repid
      dynnr                       = l_dynnr
      side                        = cl_gui_docking_container=>dock_at_top
      ratio                       = 95
    EXCEPTIONS
      cntl_error                  = 1
      cntl_system_error           = 2
      create_error                = 3
      lifetime_error              = 4
      lifetime_dynpro_dynpro_link = 5
      OTHERS                      = 6.

  IF sy-subrc <> 0.
    MESSAGE 'Error al generar listado ALV' TYPE 'I'.
    LEAVE TO SCREEN 0.
  ENDIF.

  CREATE OBJECT g_alv_9000
    EXPORTING
*     i_shellstyle      = 0
*     i_lifetime        =
      i_parent          = g_cont_9000
*     i_appl_events     = space
*     i_parentdbg       =
*     i_applogparent    =
*     i_graphicsparent  =
*     i_name            =
*     i_fcat_complete   = SPACE
    EXCEPTIONS
      error_cntl_create = 1
      error_cntl_init   = 2
      error_cntl_link   = 3
      error_dp_create   = 4
      OTHERS            = 5.
  IF sy-subrc <> 0.
    MESSAGE 'Error al generar listado ALV' TYPE 'I'.
    LEAVE TO SCREEN 0.
  ENDIF.

  PERFORM catalogo_campos_9000.

  lw_layout-zebra = si.
  lw_layout-sel_mode = 'A'.
  lw_layout-col_opt = si.

  lw_variant-report = sy-repid.
  IF pvari IS NOT INITIAL.
    lw_variant-variant = pvari.
  ENDIF.

  CALL METHOD g_alv_9000->set_table_for_first_display
    EXPORTING
      is_variant                    = lw_variant
      i_save                        = si
      is_layout                     = lw_layout
    CHANGING
      it_outtab                     = gt_datos
      it_fieldcatalog               = gt_fcat_9000
    EXCEPTIONS
      invalid_parameter_combination = 1
      program_error                 = 2
      too_many_lines                = 3
      OTHERS                        = 4.

  CREATE OBJECT g_evt_rec.
  SET HANDLER g_evt_rec->handler_double_click FOR g_alv_9000.

ENDFORM.                    " CREAR_ALV_9000
*&---------------------------------------------------------------------*
*&      Form  CATALOGO_CAMPOS_9000
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM catalogo_campos_9000 .
  DATA lw_fcat TYPE lvc_s_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
*     I_BUFFER_ACTIVE  =
      i_structure_name = 'ZESD_ENTREGAS_EXPED'
*     I_CLIENT_NEVER_DISPLAY       = 'X'
*     I_BYPASSING_BUFFER           =
*     I_INTERNAL_TABNAME           =
    CHANGING
      ct_fieldcat      = gt_fcat_9000
* EXCEPTIONS
*     INCONSISTENT_INTERFACE       = 1
*     PROGRAM_ERROR    = 2
*     OTHERS           = 3
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  LOOP AT gt_fcat_9000 INTO lw_fcat.
    CASE lw_fcat-fieldname.
      WHEN 'DPLBG'.
        lw_fcat-coltext = 'Fe.Planificada'.
        lw_fcat-col_pos = 1.
      WHEN 'UPBLG'.
        lw_fcat-coltext = 'Hora Planificada'.
        lw_fcat-col_pos = 2.
      WHEN 'TKNUM'.
        lw_fcat-coltext = 'Transporte'.
        lw_fcat-col_pos = 3.
      WHEN 'VBELN'.
        lw_fcat-coltext = 'Entrega'.
        lw_fcat-col_pos = 4.
      WHEN 'POSNR'.
        lw_fcat-coltext = 'Posición'.
        lw_fcat-col_pos = 5.
      WHEN 'MATNR'.
        lw_fcat-col_pos = 6.
      WHEN 'MAKTX'.
        lw_fcat-col_pos = 7.
      WHEN 'G_LFIMG_PDTE'.
        lw_fcat-coltext = 'Cantidad'.
        lw_fcat-col_pos = 8.
      WHEN 'MEINS'.
        lw_fcat-col_pos = 9.
      WHEN 'KOSTK'.
        lw_fcat-coltext = 'Status Picking'.
        lw_fcat-col_pos = 10.
      WHEN 'WBSTK'.
        lw_fcat-coltext = 'Status SM'.
        lw_fcat-col_pos = 11.
      WHEN 'STTRG'.
        lw_fcat-coltext = 'St.Global'.
        lw_fcat-col_pos = 12.
      WHEN 'TXT_STTRG'.
        lw_fcat-coltext = 'Denom.St.Global'.
        lw_fcat-col_pos = 13.
      WHEN 'BRGEW'.
        lw_fcat-no_out = si.
      WHEN 'GEWEI'.
        lw_fcat-no_out = si.
      WHEN 'CONCLUIDA'.
        lw_fcat-no_out = si.
    ENDCASE.
    MODIFY gt_fcat_9000 FROM lw_fcat.
  ENDLOOP.

ENDFORM.                    " CATALOGO_CAMPOS_9000
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DENOMINACION_STGLOB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LW_DATO_STTRG  text
*      <--P_LW_DATO_TXT_STTRG  text
*----------------------------------------------------------------------*
FORM obtener_denominacion_stglob  USING    p_sttrg TYPE sttrg
                                  CHANGING p_txt_sttrg TYPE zesd_sttrg_txt.
  DATA l_value TYPE domvalue_l.
  DATA l_texto TYPE val_text.

  CLEAR l_texto.

  MOVE p_sttrg TO l_value.

  CALL FUNCTION 'DOMAIN_VALUE_GET'
    EXPORTING
      i_domname  = 'STTRG'
      i_domvalue = l_value
    IMPORTING
      e_ddtext   = l_texto
    EXCEPTIONS
      not_exist  = 1
      OTHERS     = 2.

  IF sy-subrc = 0.
    p_txt_sttrg = l_texto.
  ENDIF.

ENDFORM.                    " OBTENER_DENOMINACION_STGLOB
*&---------------------------------------------------------------------*
*&      Form  BUSCAR_DISPOSICION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_PVARI  text
*----------------------------------------------------------------------*
FORM buscar_disposicion  CHANGING p_vari TYPE slis_vari.
  DATA l_repid TYPE sy-repid.
  DATA lw_variant TYPE disvariant.
  DATA l_exit TYPE c.
  DATA lw_variant_o TYPE disvariant.

  lw_variant-report = sy-repid.


  CALL FUNCTION 'LVC_VARIANT_F4'
    EXPORTING
      is_variant = lw_variant
      i_save     = 'A'
    IMPORTING
      e_exit     = l_exit
      es_variant = lw_variant_o
    EXCEPTIONS
      not_found  = 1
      OTHERS     = 2.

  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    IF l_exit NE 'X'.
* set name of layout on selection screen
      p_vari    = lw_variant_o-variant.
    ENDIF.
  ENDIF.


ENDFORM.                    " BUSCAR_DISPOSICION
*&---------------------------------------------------------------------*
*&      Form  INICIAR_CARGA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM iniciar_carga CHANGING pw_datos TYPE zesd_entregas_exped
                            p_index TYPE lvc_index.

  DATA lw_datos TYPE zesd_entregas_exped.
  DATA l_correcto TYPE bool VALUE si.
  DATA l_index TYPE sy-index.
  DATA l_tknum TYPE tknum.
  DATA l_enc TYPE bool.

  IF pw_datos IS INITIAL.
    PERFORM obtener_registro_sel_9000 CHANGING lw_datos l_correcto l_index.
  ELSE.
    lw_datos = pw_datos.
    l_index = p_index.
  ENDIF.

  CHECK l_correcto = si.

* Vamos a refrescar los datos antes de iniciar la carga.
  PERFORM refrescar_datos.

  PERFORM iniciar_carga_transp USING lw_datos-tknum CHANGING l_correcto.
  CHECK l_correcto = si.

  DO.
    PERFORM realizar_picking USING lw_datos l_index CHANGING l_correcto.
    IF l_correcto = no.
      EXIT.
    ELSE.

* Buscamos si existen más posiciones pendientes que no se hayan tratado
* para el mismo transporte. Si es así, navegamos automáticamente a esa posición.
      gt_tratadas-tknum = lw_datos-tknum.
      gt_tratadas-vbeln = lw_datos-vbeln.
      gt_tratadas-posnr = lw_datos-posnr.
      APPEND gt_tratadas.

      l_tknum = lw_datos-tknum.

      l_enc = no.
      LOOP AT gt_datos INTO lw_datos WHERE tknum = l_tknum AND kostk <> 'C'.
        l_index = sy-tabix.
        READ TABLE gt_tratadas WITH KEY tknum = lw_datos-tknum
                                        vbeln = lw_datos-vbeln
                                        posnr = lw_datos-posnr
                              TRANSPORTING NO FIELDS.
        CHECK sy-subrc <> 0.
        l_enc = si.
        EXIT.
      ENDLOOP.
      IF l_enc = no.
        EXIT.
      ENDIF.
    ENDIF.

  ENDDO.
  CHECK l_correcto = si.

* Si todas las posiciones tienen status B o C, pasamos a la última posición tratada
* y activamos el botón de finalizar carga.
  READ TABLE gt_datos TRANSPORTING NO FIELDS WITH KEY tknum = lw_datos-tknum
                                                      vbeln = lw_datos-vbeln
                                                      kostk = 'A'.
  IF sy-subrc <> 0.
    zesd_gestpick_bobinas_scr-status = st_fin_carga.
    PERFORM realizar_picking USING lw_datos l_index CHANGING l_correcto.
  ENDIF.

  g_alv_9000->refresh_table_display( ).
ENDFORM.                    " INICIAR_CARGA
*&---------------------------------------------------------------------*
*&      Form  INICIAR_CARGA_TRANSP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LW_DATOS_TKNUM  text
*      <--P_L_CORRECTO  text
*----------------------------------------------------------------------*
FORM iniciar_carga_transp  USING    p_tknum TYPE tknum
                           CHANGING p_correcto TYPE bool.

  DATA lw_vttk TYPE vttk.
  DATA lt_vttk TYPE STANDARD TABLE OF vttk.

  p_correcto = si.


*-Obtengo todos los datos referentes a la posicion a modificar
  SELECT SINGLE * FROM vttk INTO lw_vttk WHERE tknum = p_tknum.
  IF sy-subrc <> 0.
    MESSAGE 'Error al leer transporte' TYPE 'I'.
    p_correcto = no.
  ENDIF.
  CHECK p_correcto = si.

* Modifico los datos que deseo
  lw_vttk-dalbg = sy-datum.
  lw_vttk-ualbg = sy-uzeit.
  lw_vttk-stlbg = si.
  APPEND lw_vttk TO lt_vttk.

  CALL FUNCTION 'RV_SHIPMENT_UPDATE_DB'
    EXPORTING
      i_flag_tra_complete = 'X'
    TABLES
      db_vttk_upd         = lt_vttk.

  COMMIT WORK AND WAIT.

ENDFORM.                    " INICIAR_CARGA_TRANSP
*&---------------------------------------------------------------------*
*&      Form  REFRESCAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refrescar_datos .
  REFRESH gt_datos.
  CLEAR gt_datos.

  PERFORM seleccionar_datos.

  g_alv_9000->refresh_table_display( ).

ENDFORM.                    " REFRESCAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  REIMPRIMIR_PICKING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM reimprimir_picking USING p_dynnr TYPE sydynnr.

  DATA r_tknum TYPE range_c10 OCCURS 1 WITH HEADER LINE.
  DATA r_kscv2 TYPE msg2 OCCURS 1 WITH HEADER LINE.
  DATA r_nacv2 TYPE msg2 OCCURS 1 WITH HEADER LINE.
  DATA l_correcto TYPE bool.
  DATA lw_datos TYPE zesd_entregas_exped.
  DATA lw_nast TYPE nast.
  DATA l_subrc TYPE sy-subrc.
  DATA l_index TYPE sy-index.

  l_correcto = si.

  IF p_dynnr = '9000'.  "Reimprimirmos desde la pantalla principal. Buscamos registro seleccionado.
    PERFORM obtener_registro_sel_9000 CHANGING lw_datos l_correcto l_index.
  ELSEIF p_dynnr = '9001'.  "Reimprimimos desde la pantalla de las bobinas. Cogemos el registro actual.
    l_index = zesd_gestpick_bobinas_scr-indice.
    l_correcto = si.
    READ TABLE gt_datos INTO lw_datos INDEX l_index.
  ENDIF.

  CHECK l_correcto = si.

  SELECT SINGLE * INTO lw_nast FROM nast
    WHERE kappl = 'V2'
      AND objky = lw_datos-vbeln
      AND kschl = 'ZPIK'.
  IF sy-subrc <> 0.
    MESSAGE 'No se encontraron mensajes para este registro' TYPE 'I'.
    l_correcto = no.
  ENDIF.
  CHECK l_correcto = si.

  lw_nast-erdat = sy-datum.
  lw_nast-eruhr = sy-uzeit.
  lw_nast-nacha = 1.
  lw_nast-anzal = 1.
  lw_nast-vsztp = 3.
  lw_nast-manue = 'X'.
  lw_nast-datvr = sy-datum.
  lw_nast-uhrvr = sy-uzeit.
  lw_nast-usnam = sy-uname.
  lw_nast-vstat = 1.
  lw_nast-dimme = ''.
  lw_nast-delet = ''.

  CALL FUNCTION 'WFMC_MESSAGE_SINGLE'
    EXPORTING
      pi_nast  = lw_nast
    IMPORTING
      pe_rcode = l_subrc.

  IF l_subrc <> 0.
    MESSAGE 'Error al lanzar el mensaje LD00 para la entrega' TYPE 'I'.
    l_correcto = no.
  ELSE.
    MESSAGE 'Mensaje LD00 lanzado correctamente' TYPE 'I'.
    l_correcto = si.
  ENDIF.

  COMMIT WORK AND WAIT.





ENDFORM.                    " REIMPRIMIR_PICKING
*&---------------------------------------------------------------------*
*&      Form  OBTENER_REGISTRO_SEL_9000
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM obtener_registro_sel_9000  CHANGING pw_datos TYPE zesd_entregas_exped
                                         p_correcto TYPE bool
                                         p_index TYPE sy-index.
  DATA lt_rows TYPE lvc_t_row.
  DATA l_numreg TYPE i.
  DATA lw_row TYPE lvc_s_row.

  CLEAR pw_datos.

  p_correcto = no.

  g_alv_9000->get_selected_rows( IMPORTING et_index_rows = lt_rows ).

  DESCRIBE TABLE lt_rows LINES l_numreg.
  IF l_numreg <= 0.
    MESSAGE 'Debe marcar algun registro' TYPE 'I'.
  ELSEIF l_numreg > 1.
    MESSAGE 'Marque un solo registro' TYPE 'I'.
  ENDIF.

  CHECK l_numreg = 1.

  READ TABLE lt_rows INTO lw_row INDEX 1.
  READ TABLE gt_datos INTO pw_datos INDEX lw_row-index.
  CHECK sy-subrc = 0.

  p_correcto = si.
  p_index = lw_row-index.

ENDFORM.                    " OBTENER_REGISTRO_SEL_9000
*&---------------------------------------------------------------------*
*&      Form  REALIZAR_PICKING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_L_CORRECTO  text
*----------------------------------------------------------------------*
FORM realizar_picking  USING pw_datos TYPE zesd_entregas_exped
                             p_index TYPE sy-index
                       CHANGING p_correcto TYPE bool.

  PERFORM cargar_datos_9001 USING pw_datos p_index.

  CALL SCREEN 9001.
  IF sy-subrc = 0.  "Salida de 9001 tras grabar, no por comandos de exit.
    p_correcto = si.
  ELSE.
    p_correcto = no.  "Esto provocará que no se vaya a buscar otra posición.
  ENDIF.

ENDFORM.                    " REALIZAR_PICKING
*&---------------------------------------------------------------------*
*&      Form  EXIT_COMMAND_9001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit_command_9001 .
  DATA l_okcode TYPE sy-ucomm.

  l_okcode = okcode_9001.
  CLEAR okcode_9001.

* Esto será una salida por acción del usuario.
  sy-subrc = 4.
  LEAVE TO SCREEN 0.

ENDFORM.                    " EXIT_COMMAND_9001
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_9001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_9001 .
  DATA l_okcode TYPE sy-ucomm.

  l_okcode = okcode_9001.
  CLEAR okcode_9001.

  CASE l_okcode.
    WHEN 'SAVE'.      PERFORM guardar_picking.
    WHEN 'DELETE'.    PERFORM eliminar_bobina.
    WHEN 'REIMPR'.    PERFORM reimprimir_picking USING sy-dynnr.
    WHEN 'FIN_CARG'.  PERFORM finalizar_carga.
    WHEN ''.          PERFORM annadir_bobina.        "Será el enter,
    WHEN 'TRANSPORT'. PERFORM datos_transportista.
    WHEN 'CONTAB'.    PERFORM contabilizar_sm.
*    when 'ANULAR'.    perform anular_paso.
    WHEN 'IMPR_ALB'.  PERFORM imprimir_albaran.

  ENDCASE.
ENDFORM.                    " USER_COMMAND_9001
*&---------------------------------------------------------------------*
*&      Form  CALCULAR_PESO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LW_DATOS_TKNUM  text
*      <--P_ZESD_GESTPICK_BOBINAS_SCR_BTGE  text
*----------------------------------------------------------------------*
FORM calcular_peso  USING    p_tknum TYPE tknum
                    CHANGING p_btgew TYPE gsgew
                             p_gewei TYPE gewei.

  DATA lw_dato TYPE zesd_entregas_exped.

  CLEAR p_btgew.

  LOOP AT gt_datos INTO lw_dato WHERE tknum = p_tknum.
    ADD lw_dato-brgew TO p_btgew.
  ENDLOOP.

  p_gewei = lw_dato-gewei.

ENDFORM.                    " CALCULAR_PESO
*&---------------------------------------------------------------------*
*&      Form  CALCULAR_CANTIDADES_ENTREGA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PW_DATOS_TKNUM  text
*      <--P_ZESD_GESTPICK_BOBINAS_SCR_G_LF  text
*      <--P_ZESD_GESTPICK_BOBINAS_SCR_G_LF  text
*      <--P_ZESD_GESTPICK_BOBINAS_SCR_G_LF  text
*----------------------------------------------------------------------*
FORM calcular_cantidades_entrega  USING    p_vbeln TYPE vbeln_vl
                                           p_posnr TYPE posnr_vl
                                  CHANGING p_lfimg_prev TYPE lfimg
                                           p_lfimg_bob  TYPE lfimg
                                           p_lfimg_real TYPE lfimg.
  DATA lw_bobinas TYPE zesd_bobinas.
  DATA lw_lips TYPE lips.

  CLEAR p_lfimg_prev.
  CLEAR p_lfimg_bob.
  CLEAR p_lfimg_real.

  REFRESH gt_bobinas.

* Borramos igualmente las tablas de bobinas a crear / eliminar.
  REFRESH gt_bobinas_add.
  REFRESH gt_bobinas_del.

* Tomamos la posición principal y sus subposiciones, correspondientes a las bobinas.
  SELECT * FROM lips INTO lw_lips
    WHERE vbeln = p_vbeln
      AND ( posnr = p_posnr OR uecha = p_posnr ).

    IF lw_lips-posnr = p_posnr.  "Posición principal. Cantidad a entregar prevista
      p_lfimg_prev = lw_lips-lfimg.

      IF lw_lips-charg IS NOT INITIAL.  "La bobina está en la posición.
        ADD lw_lips-lfimg TO p_lfimg_bob.
        lw_bobinas-charg = lw_lips-charg.
        lw_bobinas-brgew = lw_lips-brgew.
        lw_bobinas-gewei = lw_lips-gewei.
        APPEND lw_bobinas TO gt_bobinas.
      ENDIF.

    ELSE.                        "SubPosición. Corresponde a una bobina.
      ADD lw_lips-lfimg TO p_lfimg_bob.

      lw_bobinas-charg = lw_lips-charg.  "Añadimos la bobina a la tabla para presentarla
      lw_bobinas-brgew = lw_lips-brgew.
      lw_bobinas-gewei = lw_lips-gewei.

      APPEND lw_bobinas TO gt_bobinas.
    ENDIF.

  ENDSELECT.

* La cantidad real corresponde a la suma de las cantidades de las bobinas.
* Es lo que tiene actualmente la expedición.
  p_lfimg_real = p_lfimg_bob.

ENDFORM.                    " CALCULAR_CANTIDADES_ENTREGA
*&---------------------------------------------------------------------*
*&      Form  CREAR_ALV_9001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_alv_9001 .
  DATA l_repid TYPE syrepid.
  DATA l_dynnr TYPE sydynnr.
  DATA lw_layout TYPE lvc_s_layo.
  DATA lt_tbar_exc TYPE ui_functions.

  l_repid = sy-repid.
  l_dynnr = sy-dynnr.

  CREATE OBJECT g_cont_9001
    EXPORTING
      container_name              = 'CONT_9001'
      repid                       = l_repid
      dynnr                       = l_dynnr
    EXCEPTIONS
      cntl_error                  = 1
      cntl_system_error           = 2
      create_error                = 3
      lifetime_error              = 4
      lifetime_dynpro_dynpro_link = 5
      OTHERS                      = 6.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.


  CREATE OBJECT g_alv_9001
    EXPORTING
      i_parent          = g_cont_9001
    EXCEPTIONS
      error_cntl_create = 1
      error_cntl_init   = 2
      error_cntl_link   = 3
      error_dp_create   = 4
      OTHERS            = 5.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  PERFORM catalogo_campos_9001.
  PERFORM excluir_botones_alv CHANGING lt_tbar_exc.

  lw_layout-zebra = si.
  lw_layout-sel_mode = 'A'.
  lw_layout-col_opt = si.

  g_alv_9001->set_table_for_first_display( EXPORTING is_layout            = lw_layout
                                                     it_toolbar_excluding = lt_tbar_exc
                                           CHANGING  it_outtab            = gt_bobinas
                                                     it_fieldcatalog      = gt_fcat_9001 ).
  g_alv_9001->refresh_table_display( ).

ENDFORM.                    " CREAR_ALV_9001
*&---------------------------------------------------------------------*
*&      Form  CATALOGO_CAMPOS_9001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM catalogo_campos_9001 .
  DATA lw_fcat TYPE lvc_s_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZESD_BOBINAS'
    CHANGING
      ct_fieldcat      = gt_fcat_9001.

  LOOP AT gt_fcat_9001 INTO lw_fcat.
    CASE lw_fcat-fieldname.
      WHEN 'CHARG'.
        lw_fcat-outputlen = 15.
      WHEN OTHERS.
    ENDCASE.
    MODIFY gt_fcat_9001 FROM lw_fcat.
  ENDLOOP.

ENDFORM.                    " CATALOGO_CAMPOS_9001
*&---------------------------------------------------------------------*
*&      Form  VERIFICAR_BOBINA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ZESD_GESTPICK_BOBINAS_SCR_CHAR  text
*----------------------------------------------------------------------*
FORM verificar_bobina  USING p_vbeln TYPE vbeln_vl
                             p_posnr TYPE posnr_vl
                       CHANGING p_charg TYPE charg_d.
  DATA lw_lips TYPE lips.
  DATA lw_mchb TYPE mchb.
  DATA l_continuar TYPE bool VALUE si.
  DATA l_objkey TYPE bapi1003_key-object.
  DATA lt_allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num.
  DATA lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char.
  DATA lw_allocvalueschar TYPE bapi1003_alloc_values_char.
  DATA lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr.
  DATA lt_return TYPE STANDARD TABLE OF bapiret2.
  DATA l_kunnr TYPE kunnr.
  DATA lw_likp TYPE likp.

  CHECK p_charg IS NOT INITIAL.

* Verificamos que la bobina no esté ya indicada.
  READ TABLE gt_bobinas WITH KEY charg = p_charg TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    MESSAGE i028(zsd) WITH p_charg.
    l_continuar = no.
    CLEAR p_charg.
  ENDIF.
  CHECK l_continuar = si.

  SELECT SINGLE * INTO lw_lips FROM lips
    WHERE vbeln = p_vbeln
      AND posnr = p_posnr.

  IF sy-subrc <> 0.
    MESSAGE i029(zsd) WITH p_vbeln.
    l_continuar = no.
    CLEAR p_charg.
  ENDIF.
  CHECK l_continuar = si.

  SELECT SINGLE * INTO lw_mchb FROM mchb
    WHERE matnr = lw_lips-matnr
      AND werks = lw_lips-werks
      AND lgort = lw_lips-lgort
      AND charg = p_charg.

  IF sy-subrc <> 0.
    MESSAGE i026(zsd) WITH p_charg lw_lips-matnr lw_lips-werks lw_lips-lgort.
    l_continuar = no.
    CLEAR p_charg.
  ELSEIF lw_mchb-clabs <= 0.
    MESSAGE i027(zsd) WITH p_charg lw_lips-matnr lw_lips-werks lw_lips-lgort.
    CLEAR p_charg.
  ENDIF.
  CHECK l_continuar = si.

* Verificamos el cliente y si está aprobado por calidad.
  CONCATENATE lw_lips-matnr p_charg INTO l_objkey.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_objkey
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_allocvaluesnum
      allocvalueschar = lt_allocvalueschar
      allocvaluescurr = lt_allocvaluescurr
      return          = lt_return.

  READ TABLE lt_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    MESSAGE 'No se ha podido obtener clasificación del lote' TYPE 'I'.
    l_continuar = no.
    CLEAR p_charg.
  ENDIF.
  CHECK l_continuar = si.

  READ TABLE lt_allocvalueschar INTO lw_allocvalueschar WITH KEY charact = 'LOBM_UDCODE'.
  IF sy-subrc <> 0 OR lw_allocvalueschar-value_char <> 'DE       A'.
    MESSAGE 'El lote no está aprobado en calidad. Revisar clasificación lote' TYPE 'I'.
    l_continuar = no.
    CLEAR p_charg.
  ENDIF.
  CHECK l_continuar = si.

  SELECT SINGLE * FROM likp INTO lw_likp WHERE vbeln = p_vbeln.

  READ TABLE lt_allocvalueschar INTO lw_allocvalueschar WITH KEY charact = 'Z_CLIENTE'.
  IF sy-subrc <> 0.
    MESSAGE 'No se ha indicado el cliente en el sistema de clasificación del lote' TYPE 'I'.
    l_continuar = no.
    CLEAR p_charg.
  ELSE.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = lw_allocvalueschar-value_char
      IMPORTING
        output = l_kunnr.

    IF l_kunnr <> lw_likp-kunag.
      MESSAGE 'El cliente del lote no es el de la entrega.' TYPE 'I'.
      l_continuar = no.
      CLEAR p_charg.
    ENDIF.
  ENDIF.

  CHECK l_continuar = si.

ENDFORM.                    " VERIFICAR_BOBINA
*&---------------------------------------------------------------------*
*&      Form  ANNADIR_BOBINA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM annadir_bobina .
  DATA lw_bobina TYPE zesd_bobinas.
  DATA l_correcto TYPE bool.
  DATA lw_lips TYPE lips.
  DATA lw_mchb TYPE mchb.

  CHECK zesd_gestpick_bobinas_scr-charg IS NOT INITIAL.

  lw_bobina-charg = zesd_gestpick_bobinas_scr-charg.

* Tomamos la cantidad.
  SELECT SINGLE * FROM lips INTO lw_lips
    WHERE vbeln = zesd_gestpick_bobinas_scr-vbeln
      AND posnr = zesd_gestpick_bobinas_scr-posnr.

  SELECT SINGLE * INTO lw_mchb FROM mchb
    WHERE matnr = lw_lips-matnr
      AND werks = lw_lips-werks
      AND lgort = lw_lips-lgort
      AND charg = zesd_gestpick_bobinas_scr-charg.

  lw_bobina-brgew = lw_mchb-clabs.
  SELECT SINGLE meins INTO lw_bobina-gewei FROM mara WHERE matnr = lw_lips-matnr.

*  PERFORM obtener_peso_bobina USING zesd_gestpick_bobinas_scr-charg
*                                    zesd_gestpick_bobinas_scr-matnr
*                              CHANGING lw_bobina-brgew
*                                       lw_bobina-gewei.
  APPEND lw_bobina TO gt_bobinas.

* Vamos a añadir la bobina igualmente a la tabla de bobinas a crear.
  APPEND lw_bobina TO gt_bobinas_add.

* Actualizamos el peso total expedido.
  ADD lw_bobina-brgew TO zesd_gestpick_bobinas_scr-btgew.
  ADD lw_bobina-brgew TO zesd_gestpick_bobinas_scr-g_lfimg_real.

  PERFORM verificar_peso_total CHANGING l_correcto.
  PERFORM verificar_cantidad_pos USING zesd_gestpick_bobinas_scr-g_lfimg_real
                                       zesd_gestpick_bobinas_scr-g_lfimg_prev.

  g_alv_9001->refresh_table_display( ).

ENDFORM.                    " ANNADIR_BOBINA
*&---------------------------------------------------------------------*
*&      Form  OBTENER_PESO_BOBINA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ZESD_GESTPICK_BOBINAS_SCR_CHAR  text
*      -->P_ZESD_GESTPICK_BOBINAS_SCR_MATN  text
*      <--P_LW_BOBINA_BRGEW  text
*      <--P_LW_BOBINA_GEWEI  text
*----------------------------------------------------------------------*
FORM obtener_peso_bobina  USING    p_charg TYPE charg_d
                                   p_matnr TYPE matnr
                          CHANGING p_brgew TYPE gsgew
                                   p_gewei TYPE gewei.

  DATA objectkey TYPE bapi1003_key-object.
  DATA lt_allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num.
  DATA lw_allocvaluesnum TYPE bapi1003_alloc_values_num.
  DATA lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char.
  DATA lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr.
  DATA lt_return TYPE STANDARD TABLE OF bapiret2.
  DATA l_continuar TYPE bool VALUE si.

  CLEAR p_brgew.
  CLEAR p_gewei.

  CONCATENATE p_matnr p_charg INTO objectkey.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = objectkey
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_allocvaluesnum
      allocvalueschar = lt_allocvalueschar
      allocvaluescurr = lt_allocvaluescurr
      return          = lt_return.

  READ TABLE lt_return WITH KEY type = 'E' TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    MESSAGE 'No se ha podido obtener el peso de la bobina' TYPE 'I'.
    l_continuar = no.
  ENDIF.
  CHECK l_continuar = si.

  READ TABLE lt_allocvaluesnum INTO lw_allocvaluesnum WITH KEY charact = 'Z_PESO'.
  CHECK sy-subrc = 0.

  MOVE lw_allocvaluesnum-value_from TO p_brgew.
  MOVE lw_allocvaluesnum-unit_from TO p_gewei.

ENDFORM.                    " OBTENER_PESO_BOBINA
*&---------------------------------------------------------------------*
*&      Form  GUARDAR_PICKING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM guardar_picking .
  DATA l_correcto TYPE bool VALUE si.
  DATA lw_datos TYPE zesd_entregas_exped.

  PERFORM verificar_peso_total CHANGING l_correcto.
  CHECK l_correcto = si.

  IF gt_bobinas[] IS INITIAL.
    PERFORM confirmar_grabar_vacio CHANGING l_correcto.
  ENDIF.
  CHECK l_correcto = si.

  PERFORM guardar_cambios CHANGING l_correcto.
  CHECK l_correcto = si.

  READ TABLE gt_datos INTO lw_datos INDEX zesd_gestpick_bobinas_scr-indice.

* Actualizamos la cantidad expedida, ya que será necesaria en las siguientes posiciones.
  lw_datos-brgew = zesd_gestpick_bobinas_scr-btgew.
  MODIFY gt_datos FROM lw_datos INDEX zesd_gestpick_bobinas_scr-indice TRANSPORTING brgew.

  PERFORM cargar_datos_9001 USING lw_datos zesd_gestpick_bobinas_scr-indice.

*  PERFORM cambiar_status_picking.

* Abandonamos la pantalla. Esta salida ha sido por grabación, no por acción del usuario.
  sy-subrc = 0.
  LEAVE TO SCREEN 0.

ENDFORM.                    " GUARDAR_PICKING
*&---------------------------------------------------------------------*
*&      Form  GUARDAR_CAMBIOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM guardar_cambios CHANGING p_ok TYPE bool.
  DATA lw_datos TYPE zesd_entregas_exped.

  p_ok = si.

* Si todo ha sido correcto, actualizamos algunos datos.
  READ TABLE gt_datos INTO lw_datos INDEX zesd_gestpick_bobinas_scr-indice.

  PERFORM actualizar_entrega USING lw_datos-vbeln lw_datos-posnr CHANGING p_ok.
  CHECK p_ok = si.

  COMMIT WORK AND WAIT.

  PERFORM calcular_status USING lw_datos-vbeln CHANGING lw_datos-kostk lw_datos-wbstk.

  IF lw_datos-kostk <> 'A'.
    lw_datos-concluida = si.
  ENDIF.
  MODIFY gt_datos FROM lw_datos TRANSPORTING kostk wbstk WHERE vbeln = lw_datos-vbeln.
  MODIFY gt_datos FROM lw_datos TRANSPORTING concluida WHERE vbeln = lw_datos-vbeln AND posnr = lw_datos-posnr.

  zesd_gestpick_bobinas_scr-kostk = lw_datos-kostk.
  zesd_gestpick_bobinas_scr-wbstk = lw_datos-wbstk.

  g_alv_9000->refresh_table_display( ).

ENDFORM.                    " GUARDAR_CAMBIOS
*&---------------------------------------------------------------------*
*&      Form  VERIFICAR_PESO_TOTAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_L_CORRECTO  text
*----------------------------------------------------------------------*
FORM verificar_peso_total  CHANGING p_correcto TYPE bool.

  IF zesd_gestpick_bobinas_scr-btgew < zesd_gestpick_bobinas_scr-allowed_twgt.
    p_correcto = si.
  ELSE.
    MESSAGE i669(vw) WITH zesd_gestpick_bobinas_scr-btgew        zesd_gestpick_bobinas_scr-gewei
                          zesd_gestpick_bobinas_scr-allowed_twgt zesd_gestpick_bobinas_scr-gewei.
    p_correcto = no.
  ENDIF.

ENDFORM.                    " VERIFICAR_PESO_TOTAL
*&---------------------------------------------------------------------*
*&      Form  VERIFICAR_PESOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM verificar_pesos .
  DATA l_correcto TYPE bool VALUE si.

* Se va a verificar siempre que el comando no sea DELETE.
* En este caso se verificará más adelante.

  CHECK okcode_9000 <> 'DELETE'.
  PERFORM verificar_peso_total CHANGING l_correcto.

ENDFORM.                    " VERIFICAR_PESOS
*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_BOBINA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM eliminar_bobina .
  DATA lw_bobina TYPE zesd_bobinas.
  DATA l_correcto TYPE bool VALUE si.
  DATA l_index TYPE sy-index.

  IF zesd_gestpick_bobinas_scr-wbstk = 'C'.
    MESSAGE 'La entrega está ya contabilizada. Imposible eliminar bobina' TYPE 'I'.
    l_correcto = no.
  ENDIF.
  CHECK l_correcto = si.

  PERFORM obtener_registro_sel_9001 CHANGING lw_bobina l_correcto l_index.
  CHECK l_correcto = si.

* Comprobamos si existe en la tabla de bobinas añadidas, en cuyo caso, solo
* tendremos que quitarla de ahi.
  READ TABLE gt_bobinas_add WITH KEY charg = lw_bobina-charg TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    DELETE gt_bobinas_add INDEX sy-tabix.
  ELSE.
    APPEND lw_bobina TO gt_bobinas_del.
  ENDIF.

  DELETE gt_bobinas INDEX l_index.

  SUBTRACT lw_bobina-brgew FROM zesd_gestpick_bobinas_scr-btgew.
  IF zesd_gestpick_bobinas_scr-btgew < 0.
    zesd_gestpick_bobinas_scr-btgew = 0.
  ENDIF.

  SUBTRACT lw_bobina-brgew FROM zesd_gestpick_bobinas_scr-g_lfimg_real.
  IF zesd_gestpick_bobinas_scr-g_lfimg_real < 0.
    zesd_gestpick_bobinas_scr-g_lfimg_real = 0.
  ENDIF.

  PERFORM verificar_peso_total CHANGING l_correcto.

  g_alv_9001->refresh_table_display( ).

ENDFORM.                    " ELIMINAR_BOBINA
*&---------------------------------------------------------------------*
*&      Form  OBTENER_REGISTRO_SEL_9001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM obtener_registro_sel_9001  CHANGING pw_bobina TYPE zesd_bobinas
                                         p_correcto TYPE bool
                                         p_index TYPE sy-index.
  DATA lt_rows TYPE lvc_t_row.
  DATA l_numreg TYPE i.
  DATA lw_row TYPE lvc_s_row.

  CLEAR pw_bobina.
  p_correcto = no.

  g_alv_9001->get_selected_rows( IMPORTING et_index_rows = lt_rows ).

  DESCRIBE TABLE lt_rows LINES l_numreg.
  IF l_numreg <= 0.
    MESSAGE 'Debe marcar algun registro' TYPE 'I'.
  ELSEIF l_numreg > 1.
    MESSAGE 'Marque un solo registro' TYPE 'I'.
  ENDIF.

  CHECK l_numreg = 1.

  READ TABLE lt_rows INTO lw_row INDEX 1.
  READ TABLE gt_bobinas INTO pw_bobina INDEX lw_row-index.
  CHECK sy-subrc = 0.

  p_correcto = si.
  p_index = lw_row-index.

ENDFORM.                    " OBTENER_REGISTRO_SEL_9000
*&---------------------------------------------------------------------*
*&      Form  STATUS_9001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_9001 .
  DATA lt_fcode_exc TYPE STANDARD TABLE OF sy-ucomm.

  CASE zesd_gestpick_bobinas_scr-status.
    WHEN st_en_carga.
      IF zesd_gestpick_bobinas_scr-kostk = 'A'.
        APPEND 'FIN_CARG' TO lt_fcode_exc.
      ENDIF.
      APPEND 'TRANSPORT' TO lt_fcode_exc.
      APPEND 'CONTAB' TO lt_fcode_exc.
    WHEN st_fin_carga.
*      APPEND 'SAVE' TO lt_fcode_exc.
      APPEND 'REIMPR' TO lt_fcode_exc.
      APPEND 'TRANSPORT' TO lt_fcode_exc.
      APPEND 'CONTAB' TO lt_fcode_exc.
    WHEN st_cont_sm.
      APPEND 'SAVE' TO lt_fcode_exc.
      APPEND 'REIMPR' TO lt_fcode_exc.
      APPEND 'FIN_CARG' TO lt_fcode_exc.
      APPEND 'DELETE' TO lt_fcode_exc.
    WHEN st_impr_alb.
      APPEND 'SAVE' TO lt_fcode_exc.
      APPEND 'CONTAB' TO lt_fcode_exc.
      APPEND 'FIN_CARG' TO lt_fcode_exc.
  ENDCASE.

  SET PF-STATUS 'PF9001' EXCLUDING lt_fcode_exc.

  SET TITLEBAR 'T9001'.

ENDFORM.                    " STATUS_9001
*&---------------------------------------------------------------------*
*&      Form  CARGAR_DATOS_9001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PW_DATOS  text
*----------------------------------------------------------------------*
FORM cargar_datos_9001  USING pw_datos TYPE zesd_entregas_exped
                              p_index TYPE syindex.
  DATA l_status TYPE num2.

* Antes de limpiar nos quedamos con el status.
  l_status = zesd_gestpick_bobinas_scr-status.
  IF l_status IS INITIAL.
    l_status = st_en_carga.
  ENDIF.

  CLEAR zesd_gestpick_bobinas_scr.
  CLEAR *zesd_gestpick_bobinas_scr.

* Componemos los datos para la pantalla.
  zesd_gestpick_bobinas_scr-dplbg = pw_datos-dplbg.
  zesd_gestpick_bobinas_scr-uplbg = pw_datos-uplbg.
  zesd_gestpick_bobinas_scr-kunnr = pw_datos-kunnr.
  zesd_gestpick_bobinas_scr-name1 = pw_datos-name1.
  zesd_gestpick_bobinas_scr-tknum = pw_datos-tknum.
  zesd_gestpick_bobinas_scr-vbeln = pw_datos-vbeln.
  PERFORM calcular_peso USING pw_datos-tknum CHANGING zesd_gestpick_bobinas_scr-btgew
                                                      zesd_gestpick_bobinas_scr-gewei.

  SELECT SINGLE allowed_twgt INTO zesd_gestpick_bobinas_scr-allowed_twgt FROM vttk
    WHERE tknum = pw_datos-tknum.

  zesd_gestpick_bobinas_scr-kostk = pw_datos-kostk.
  zesd_gestpick_bobinas_scr-wbstk = pw_datos-wbstk.
  zesd_gestpick_bobinas_scr-posnr = pw_datos-posnr.
  zesd_gestpick_bobinas_scr-matnr = pw_datos-matnr.
  zesd_gestpick_bobinas_scr-maktx = pw_datos-maktx.

  PERFORM calcular_cantidades_entrega USING pw_datos-vbeln
                                            pw_datos-posnr
                                      CHANGING zesd_gestpick_bobinas_scr-g_lfimg_prev
                                               zesd_gestpick_bobinas_scr-g_lfimg_bob
                                               zesd_gestpick_bobinas_scr-g_lfimg_real.

  SELECT SINGLE vrkme INTO zesd_gestpick_bobinas_scr-vrkme FROM lips
    WHERE vbeln = pw_datos-vbeln
      AND posnr = pw_datos-posnr.

  zesd_gestpick_bobinas_scr-indice = p_index.

* Reponemos el status.
  zesd_gestpick_bobinas_scr-status = l_status.

* Si la posición está en estatus B o C, se indicará que la posición está concluida.
  IF pw_datos-concluida = si.
    zesd_gestpick_bobinas_scr-observ = '¡¡¡ Posición con Picking ya Realizado !!!'.
  ELSE.
    CLEAR zesd_gestpick_bobinas_scr-observ.
  ENDIF.

  *zesd_gestpick_bobinas_scr = zesd_gestpick_bobinas_scr.

ENDFORM.                    " CARGAR_DATOS_9001
*&---------------------------------------------------------------------*
*&      Form  FINALIZAR_CARGA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM finalizar_carga .
  DATA l_continuar TYPE bool VALUE si.

  PERFORM cerrar_entrega CHANGING l_continuar.
  CHECK l_continuar = si.
  CLEAR zesd_gestpick_bobinas_scr-g_lfimg_real.

  CLEAR zesd_gestpick_bobinas_scr-tdlnr.
  CLEAR zesd_gestpick_bobinas_scr-td_name1.
  CLEAR zesd_gestpick_bobinas_scr-signi.
  CLEAR zesd_gestpick_bobinas_scr-tpbez.
  CLEAR zesd_gestpick_bobinas_scr-add01.
  CLEAR zesd_gestpick_bobinas_scr-text1.

  SELECT SINGLE tdlnr add01 INTO (zesd_gestpick_bobinas_scr-tdlnr, zesd_gestpick_bobinas_scr-add01)
  FROM vttk WHERE tknum = zesd_gestpick_bobinas_scr-tknum.

  IF zesd_gestpick_bobinas_scr-tdlnr IS NOT INITIAL.
    SELECT SINGLE name1 INTO zesd_gestpick_bobinas_scr-td_name1 FROM lfa1 WHERE lifnr = zesd_gestpick_bobinas_scr-tdlnr.
  ENDIF.

  IF zesd_gestpick_bobinas_scr-add01 IS NOT INITIAL.
    SELECT SINGLE bezei INTO zesd_gestpick_bobinas_scr-bezei FROM vtadd01t WHERE spras = sy-langu AND add_info = zesd_gestpick_bobinas_scr-add01.
  ENDIF.

  zesd_gestpick_bobinas_scr-dalen = sy-datum.
  zesd_gestpick_bobinas_scr-ualen = sy-uzeit.

  PERFORM solicitar_datos_expedicion CHANGING l_continuar.
  CHECK l_continuar = si.

  PERFORM finalizar_carga_transporte CHANGING l_continuar.
  IF l_continuar = si.
    zesd_gestpick_bobinas_scr-status = st_cont_sm.
  ENDIF.

ENDFORM.                    " FINALIZAR_CARGA
*&---------------------------------------------------------------------*
*&      Form  FINALIZAR_CARGA_TRANSPORTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM finalizar_carga_transporte CHANGING p_correcto TYPE bool.

  DATA lw_vttk TYPE vttk.
  DATA lt_vttk TYPE STANDARD TABLE OF vttk.

  p_correcto = si.

*-Obtengo todos los datos referentes a la posicion a modificar
  SELECT SINGLE * FROM vttk INTO lw_vttk WHERE tknum = zesd_gestpick_bobinas_scr-tknum.
  IF sy-subrc <> 0.
    MESSAGE 'Error al leer transporte' TYPE 'I'.
    p_correcto = no.
  ENDIF.
  CHECK p_correcto = si.

* Modifico los datos que deseo
  lw_vttk-dalen = zesd_gestpick_bobinas_scr-dalen.
  lw_vttk-ualen = zesd_gestpick_bobinas_scr-ualen.
  lw_vttk-stlad = si.

  APPEND lw_vttk TO lt_vttk.

  CALL FUNCTION 'RV_SHIPMENT_UPDATE_DB'
    EXPORTING
      i_flag_tra_complete = 'X'
    TABLES
      db_vttk_upd         = lt_vttk.

  COMMIT WORK AND WAIT.


ENDFORM.                    " FINALIZAR_CARGA_TRANSPORTE
*&---------------------------------------------------------------------*
*&      Form  SOLICITAR_DATOS_EXPEDICION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_L_CONTINUAR  text
*----------------------------------------------------------------------*
FORM solicitar_datos_expedicion  USING    p_continuar TYPE bool.
  DATA lw_vttk TYPE vttk.
  DATA lt_vttk TYPE STANDARD TABLE OF vttk.

  SELECT SINGLE tdlnr add01 INTO (zesd_gestpick_bobinas_scr-tdlnr, zesd_gestpick_bobinas_scr-add01)
  FROM vttk WHERE tknum = zesd_gestpick_bobinas_scr-tknum.

  IF zesd_gestpick_bobinas_scr-tdlnr IS NOT INITIAL.
    SELECT SINGLE name1 INTO zesd_gestpick_bobinas_scr-td_name1 FROM lfa1 WHERE lifnr = zesd_gestpick_bobinas_scr-tdlnr.
  ENDIF.

  IF zesd_gestpick_bobinas_scr-add01 IS NOT INITIAL.
    SELECT SINGLE bezei INTO zesd_gestpick_bobinas_scr-bezei FROM vtadd01t WHERE spras = sy-langu AND add_info = zesd_gestpick_bobinas_scr-add01.
  ENDIF.

  CALL SCREEN 9002 STARTING AT 5 5.

  IF sy-subrc = 0.
    p_continuar = si.
  ELSE.
    p_continuar = no.
  ENDIF.
  CHECK p_continuar = si.

  SELECT SINGLE * FROM vttk INTO lw_vttk WHERE tknum = zesd_gestpick_bobinas_scr-tknum.
  IF sy-subrc <> 0.
    MESSAGE 'Error al leer transporte' TYPE 'I'.
    p_continuar = no.
  ENDIF.
  CHECK p_continuar = si.

  lw_vttk-tdlnr = zesd_gestpick_bobinas_scr-tdlnr.
  lw_vttk-signi = zesd_gestpick_bobinas_scr-signi.
  lw_vttk-tpbez = zesd_gestpick_bobinas_scr-tpbez.
  lw_vttk-add01 = zesd_gestpick_bobinas_scr-add01.
  lw_vttk-text1 = zesd_gestpick_bobinas_scr-text1.

  APPEND lw_vttk TO lt_vttk.

  CALL FUNCTION 'RV_SHIPMENT_UPDATE_DB'
    EXPORTING
      i_flag_tra_complete = 'X'
    TABLES
      db_vttk_upd         = lt_vttk.

  COMMIT WORK AND WAIT.

ENDFORM.                    " SOLICITAR_DATOS_EXPEDICION
*&---------------------------------------------------------------------*
*&      Form  EXIT_COMMAND_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit_command_9002 .
  DATA l_okcode TYPE sy-ucomm.

  l_okcode = okcode_9002.
  CLEAR okcode_9002.

  MESSAGE 'Proceso cancelado por el usuario' TYPE 'I'.

  sy-subrc = 4.
  LEAVE TO SCREEN 0.

ENDFORM.                    " EXIT_COMMAND_9002
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_9002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_9002 .
  DATA l_okcode TYPE sy-ucomm.

  l_okcode = okcode_9002.
  CLEAR okcode_9002.

  CASE l_okcode.
    WHEN 'ACEPTAR'.
      sy-subrc = 0.
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.                    " USER_COMMAND_9002
*&---------------------------------------------------------------------*
*&      Form  CONTABILIZAR_SM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM contabilizar_sm .
  DATA l_correcto TYPE bool VALUE si.
  DATA lw_datos TYPE zesd_entregas_exped.

  PERFORM iniciar_despacho CHANGING l_correcto.
  CHECK l_correcto = si.

  PERFORM contabilizar_entrega CHANGING l_correcto.
  CHECK l_correcto = si.

  MESSAGE 'Entrega Contabilizada Correctamente' TYPE 'I'.

  COMMIT WORK AND WAIT.

* Recargamos el status de sm.
  SELECT SINGLE wbstk INTO zesd_gestpick_bobinas_scr-wbstk
    FROM vbuk
    WHERE vbeln = zesd_gestpick_bobinas_scr-vbeln.

  lw_datos-wbstk = zesd_gestpick_bobinas_scr-wbstk.
  MODIFY gt_datos FROM lw_datos TRANSPORTING wbstk WHERE vbeln = zesd_gestpick_bobinas_scr-vbeln.

  PERFORM actualizar_fin_plan_transporte USING zesd_gestpick_bobinas_scr-tknum.

ENDFORM.                    " CONTABILIZAR_SM
*&---------------------------------------------------------------------*
*&      Form  INICIAR_TRANSPORTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_L_CORRECTO  text
*----------------------------------------------------------------------*
FORM iniciar_despacho  CHANGING p_correcto TYPE bool.
  DATA lw_vttk TYPE vttk.
  DATA lt_vttk TYPE STANDARD TABLE OF vttk.

  p_correcto = si.

*-Obtengo todos los datos referentes a la posicion a modificar
  SELECT SINGLE * FROM vttk INTO lw_vttk WHERE tknum = zesd_gestpick_bobinas_scr-tknum.
  IF sy-subrc <> 0.
    MESSAGE 'Error al leer transporte' TYPE 'I'.
    p_correcto = no.
  ENDIF.
  CHECK p_correcto = si.

* Modifico los datos que deseo
  lw_vttk-dtabf = sy-datum.
  lw_vttk-uzabf = sy-uzeit.
  lw_vttk-stabf = si.
  APPEND lw_vttk TO lt_vttk.

  CALL FUNCTION 'RV_SHIPMENT_UPDATE_DB'
    EXPORTING
      i_flag_tra_complete = 'X'
    TABLES
      db_vttk_upd         = lt_vttk.

  COMMIT WORK AND WAIT.

ENDFORM.                    " INICIAR_TRANSPORTE
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ALBARAN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_albaran .
  DATA l_correcto TYPE bool VALUE si.

  PERFORM lanzar_mensaje_albaran CHANGING l_correcto.

  PERFORM lanzar_mensaje_transporte CHANGING l_correcto.

*  lanzar zctf del transporte.

  IF l_correcto = si.
    PERFORM iniciar_transporte CHANGING l_correcto.
  ENDIF.

ENDFORM.                    " IMPRIMIR_ALBARAN
*&---------------------------------------------------------------------*
*&      Form  LANZAR_MENSAJE_ALBARAN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_L_CORRECTO  text
*----------------------------------------------------------------------*
FORM lanzar_mensaje_albaran  CHANGING p_correcto TYPE bool.
  DATA r_tknum TYPE range_c10 OCCURS 1 WITH HEADER LINE.
  DATA r_kscv2 TYPE msg2 OCCURS 1 WITH HEADER LINE.
  DATA r_nacv2 TYPE msg2 OCCURS 1 WITH HEADER LINE.
  DATA lw_nast TYPE nast.
  DATA l_subrc TYPE sy-subrc.
  DATA l_index TYPE sy-index.

  p_correcto = si.

  SELECT SINGLE * INTO lw_nast FROM nast
    WHERE kappl = 'V2'
      AND objky = zesd_gestpick_bobinas_scr-vbeln
      AND kschl = 'ZLD0'.
  IF sy-subrc <> 0.
    MESSAGE 'No se encontraron mensajes para este registro' TYPE 'I'.
    p_correcto = no.
  ENDIF.
  CHECK p_correcto = si.

  lw_nast-erdat = sy-datum.
  lw_nast-eruhr = sy-uzeit.
  lw_nast-nacha = 1.
  lw_nast-anzal = 1.
  lw_nast-vsztp = 3.
  lw_nast-manue = 'X'.
  lw_nast-datvr = sy-datum.
  lw_nast-uhrvr = sy-uzeit.
  lw_nast-usnam = sy-uname.
  lw_nast-vstat = 1.
  lw_nast-dimme = ''.
  lw_nast-delet = ''.

  CALL FUNCTION 'WFMC_MESSAGE_SINGLE'
    EXPORTING
      pi_nast  = lw_nast
    IMPORTING
      pe_rcode = l_subrc.

  IF l_subrc <> 0.
    MESSAGE 'Error al lanzar el mensaje ZLD0 para la entrega' TYPE 'I'.
    p_correcto = no.
  ELSE.
    MESSAGE 'Mensaje ZLD0 lanzado correctamente' TYPE 'I'.
    p_correcto = si.
  ENDIF.

  COMMIT WORK AND WAIT.

ENDFORM.                    " LANZAR_MENSAJE_ALBARAN
*&---------------------------------------------------------------------*
*&      Form  INICIAR_TRANSPORTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM iniciar_transporte CHANGING p_correcto TYPE bool.
  DATA lw_vttk TYPE vttk.
  DATA lt_vttk TYPE STANDARD TABLE OF vttk.

  p_correcto = si.

*-Obtengo todos los datos referentes a la posicion a modificar
  SELECT SINGLE * FROM vttk INTO lw_vttk WHERE tknum = zesd_gestpick_bobinas_scr-tknum.
  IF sy-subrc <> 0.
    MESSAGE 'Error al leer transporte' TYPE 'I'.
    p_correcto = no.
  ENDIF.
  CHECK p_correcto = si.

* Modifico los datos que deseo
  lw_vttk-datbg = sy-datum.
  lw_vttk-uatbg = sy-uzeit.
  lw_vttk-sttbg = si.
  APPEND lw_vttk TO lt_vttk.

  CALL FUNCTION 'RV_SHIPMENT_UPDATE_DB'
    EXPORTING
      i_flag_tra_complete = 'X'
    TABLES
      db_vttk_upd         = lt_vttk.

  COMMIT WORK AND WAIT.

ENDFORM.                    " INICIAR_TRANSPORTE
*&---------------------------------------------------------------------*
*&      Form  HANDLER_DOUBLE_CLICK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_ROW  text
*      -->P_E_COLUMN  text
*      -->P_ES_ROW_NO  text
*----------------------------------------------------------------------*
FORM handler_double_click  USING    p_row TYPE lvc_s_row
                                    p_column TYPE lvc_s_col
                                    p_row_no TYPE lvc_s_roid.
  DATA lw_datos TYPE zesd_entregas_exped.

  READ TABLE gt_datos INTO lw_datos INDEX p_row-index.
  CHECK sy-subrc = 0.

  PERFORM iniciar_carga CHANGING lw_datos p_row-index.

ENDFORM.                    " HANDLER_DOUBLE_CLICK
*&---------------------------------------------------------------------*
*&      Form  EXCLUIR_BOTONES_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_TBAR_EXC  text
*----------------------------------------------------------------------*
FORM excluir_botones_alv  CHANGING pt_tbar_exc TYPE ui_functions.

  APPEND cl_gui_alv_grid=>mc_fc_detail TO pt_tbar_exc.
  APPEND cl_gui_alv_grid=>mc_fc_print TO pt_tbar_exc.
  APPEND cl_gui_alv_grid=>mc_fc_views TO pt_tbar_exc.
  APPEND cl_gui_alv_grid=>mc_mb_variant TO pt_tbar_exc.
  APPEND cl_gui_alv_grid=>mc_fc_graph TO pt_tbar_exc.
  APPEND cl_gui_alv_grid=>mc_fc_info TO pt_tbar_exc.

ENDFORM.                    " EXCLUIR_BOTONES_ALV
*&---------------------------------------------------------------------*
*&      Form  VERIFICAR_CANTIDAD_POS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ZESD_GESTPICK_BOBINAS_SCR_G_LF  text
*      -->P_ZESD_GESTPICK_BOBINAS_SCR_G_LF  text
*----------------------------------------------------------------------*
FORM verificar_cantidad_pos  USING    p_real TYPE menge_d
                                      p_prev TYPE menge_d.

  IF p_real > p_prev.
    MESSAGE 'Ctd en Bobinas mayor que Ctd Prevista' TYPE 'W'.
  ENDIF.

ENDFORM.                    " VERIFICAR_CANTIDAD_POS
*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_ENTREGA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LW_DATOS_VBELN  text
*      -->P_LW_DATOS_POSNR  text
*      <--P_L_CORRECTO  text
*----------------------------------------------------------------------*
FORM actualizar_entrega  USING    p_vbeln TYPE vbeln_vl
                                  p_posnr TYPE posnr
                         CHANGING p_correcto TYPE bool.

  DATA i_header_data LIKE bapiobdlvhdrchg. "Delivery header
  DATA i_header_control LIKE bapiobdlvhdrctrlchg. "delivery header control
  DATA i_delivery_no LIKE bapiobdlvhdrchg-deliv_numb. "deliver number
  DATA i_techn_control LIKE bapidlvcontrol. "TECHN_CONTROL
  DATA i_item_data LIKE bapiobdlvitemchg OCCURS 0 WITH HEADER LINE. "ITEM_DATA delivery item
  DATA i_item_control LIKE bapiobdlvitemctrlchg OCCURS 0 WITH HEADER LINE. "ITEM_CONTROL
  DATA i_return LIKE bapiret2 OCCURS 0 WITH HEADER LINE. "Return
  DATA lw_lips TYPE lips.
  DATA lw_bobina TYPE zesd_bobinas.
  DATA i_vbkok LIKE vbkok. "Delivery header
  DATA i_vbpok LIKE vbpok  OCCURS 0 WITH HEADER LINE. "Delivery Picking
  DATA l_vbeln_va TYPE vbeln.
  DATA l_posnr_va TYPE posnr.
  DATA l_pos_ppal TYPE bool.
  DATA v_error.
  DATA numreg TYPE i.
  DATA l_ctd_picking TYPE brgew.
  DATA lt_prot TYPE STANDARD TABLE OF prott.

  p_correcto = si.

  SELECT SINGLE * INTO lw_lips FROM lips
    WHERE vbeln = p_vbeln
      AND posnr = p_posnr.
  IF sy-subrc <> 0.
    MESSAGE i030(zsd) WITH p_vbeln p_posnr.
    p_correcto = no.
  ENDIF.
  CHECK p_correcto = si.

  SELECT SINGLE vbelv posnv FROM vbfa INTO (l_vbeln_va, l_posnr_va)
    WHERE vbeln = p_vbeln
      AND posnn = p_posnr
      AND vbtyp_n = 'J'
      AND vbtyp_v = 'C'.
  IF sy-subrc <> 0.
    MESSAGE i031(zsd) WITH p_vbeln p_posnr.
    p_correcto = no.
  ENDIF.
  CHECK p_correcto = si.

*Set Delivery Header data
  i_delivery_no = p_vbeln.
  i_header_data-deliv_numb = i_delivery_no.
  i_techn_control-upd_ind = 'U'.
  i_header_control-deliv_numb = i_delivery_no.

  CLEAR l_ctd_picking.
  LOOP AT gt_bobinas INTO lw_bobina.
    ADD lw_bobina-brgew TO l_ctd_picking.
  ENDLOOP.

  i_vbpok-vbeln_vl = lw_lips-vbeln. "Delivery NO
  i_vbpok-posnr_vl = lw_lips-posnr.
  i_vbpok-vbeln = l_vbeln_va. "Sales Order            "You must assign Sales order & Item number
  i_vbpok-posnn = l_posnr_va.       "Sales Order item
  i_vbpok-matnr = lw_lips-matnr.
  i_vbpok-lianp = si.
  i_vbpok-charg =  lw_bobina-charg.
* i_vbpok-lfimg = l_ctd_picking.     "Actual quantity delivered (in sales units)
  i_vbpok-lgmng = l_ctd_picking.     "Actual quantity delivered in stockkeeping units

  i_item_control-deliv_numb = i_delivery_no.
  i_item_control-deliv_item = p_posnr.
  i_item_control-chg_delqty = 'X'.
  APPEND i_item_control.

*Create Delivery item by WMS return batch split
  i_item_data-deliv_numb = i_delivery_no.

* Borramos primero las posiciones.
  LOOP AT gt_bobinas_del INTO lw_bobina.
    CLEAR i_item_data.
    CLEAR i_item_control.

    SELECT SINGLE * INTO lw_lips FROM lips
      WHERE vbeln = p_vbeln
        AND charg = lw_bobina-charg.

    CHECK sy-subrc = 0.

    IF lw_lips-uecha IS NOT INITIAL.  "Particion.
      i_item_data-deliv_item = lw_lips-posnr.
      i_item_data-hieraritem = p_posnr.            "The batch split record below delivery item hierary
      i_item_data-usehieritm = '1'.
      i_item_data-material = lw_lips-matnr.
      i_item_data-batch = lw_bobina-charg.
      i_item_data-dlv_qty = lw_bobina-brgew.
      i_item_data-fact_unit_nom = 1.
      i_item_data-fact_unit_denom = 1.

      i_item_control-deliv_numb = p_vbeln.
      i_item_control-deliv_item = i_item_data-deliv_item.
      i_item_control-del_item = 'X'.

    ELSE.                           "Posicion principal.
      i_item_data-deliv_item = lw_lips-posnr.
      i_item_data-hieraritem = p_posnr.            "The batch split record below delivery item hierary
      i_item_data-usehieritm = '1'.
      i_item_data-material = lw_lips-matnr.
      i_item_data-batch = ''.
      i_item_data-dlv_qty = lw_bobina-brgew.
      i_item_data-fact_unit_nom = 1.
      i_item_data-fact_unit_denom = 1.

      i_item_control-deliv_numb = p_vbeln.
      i_item_control-deliv_item = i_item_data-deliv_item.
      i_item_control-chg_delqty = 'X'.

    ENDIF.
    APPEND i_item_data.
    APPEND i_item_control.
  ENDLOOP.

* Creamos las nuevas particiones.
  SELECT MAX( posnr ) INTO i_item_data-deliv_item FROM lips WHERE vbeln = p_vbeln.

  LOOP AT gt_bobinas_add INTO lw_bobina.

    IF i_item_data-deliv_item(1) = '9'.
      ADD 1 TO i_item_data-deliv_item.
    ELSE.
      i_item_data-deliv_item = '900001'.
    ENDIF.

    i_item_data-hieraritem = p_posnr.            "The batch split record below delivery item hierary
    i_item_data-usehieritm = '1'.
    i_item_data-material = lw_lips-matnr.
    i_item_data-batch = lw_bobina-charg.
    i_item_data-dlv_qty = lw_bobina-brgew.
    i_item_data-fact_unit_nom = 1.
    i_item_data-fact_unit_denom = 1.
    APPEND i_item_data.

    i_item_control-deliv_numb = i_delivery_no.
    i_item_control-deliv_item = i_item_data-deliv_item.
    i_item_control-chg_delqty = 'X'.
    APPEND i_item_control.

    i_vbpok-vbeln_vl = i_delivery_no. "Delivery NO
    i_vbpok-posnr_vl = i_item_data-deliv_item.
    i_vbpok-vbeln = l_vbeln_va. "Sales Order            "You must assign Sales order & Item number
    i_vbpok-posnn = l_posnr_va.       "Sales Order item
    i_vbpok-matnr = lw_lips-matnr.
    i_vbpok-lianp = si.
    i_vbpok-charg =  lw_bobina-charg.
    i_vbpok-lfimg = lw_bobina-brgew.     "Actual quantity delivered (in sales units)
    i_vbpok-lgmng = lw_bobina-brgew.     "Actual quantity delivered in stockkeeping units
    i_vbpok-pikmg = lw_bobina-brgew.

    APPEND i_vbpok.

  ENDLOOP.


* Si solo existe una posición, no creará partición, así que cambiamos la posición en I_VBPOK.
  DESCRIBE TABLE i_vbpok LINES numreg.
  IF numreg <= 1.
    READ TABLE i_vbpok INDEX 1.
    i_vbpok-posnr_vl = p_posnr.
    MODIFY i_vbpok INDEX 1.
  ENDIF.

* Creamos las particiones.
  i_vbkok-vbeln_vl = lw_lips-vbeln.
*  i_vbkok-komue = si.

  break ablanco.

  CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
    EXPORTING
      header_data    = i_header_data
      header_control = i_header_control
      delivery       = i_delivery_no
      techn_control  = i_techn_control
    TABLES
      item_data      = i_item_data
      item_control   = i_item_control
      return         = i_return.

  READ TABLE i_return WITH KEY type = 'E'.
  IF sy-subrc = 0.
    MESSAGE ID i_return-id TYPE 'I' NUMBER i_return-number
      WITH i_return-message_v1 i_return-message_v2 i_return-message_v3 i_return-message_v4.
    p_correcto = no.
    ROLLBACK WORK.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X'.
  ENDIF.
  CHECK p_correcto = si.

  CALL FUNCTION 'DEQUEUE_ALL' EXPORTING _synchron = si.

* Vamos a verificar que las particiones están creadas. En caso contrario, damos mensaje de error.
* NOTA: Esto se realiza porque la BAPI no devuelve error si no es posible crear las particiones.
* Vamos a comprobar una de las posiciones.

  READ TABLE i_vbpok INDEX numreg.  "Tomamos el último registro.
  PERFORM verificar_particion_creada USING i_vbpok-vbeln_vl i_vbpok-charg CHANGING p_correcto.
  CHECK p_correcto = si.

* Actualizamos las cantidades.
  CALL FUNCTION 'WS_DELIVERY_UPDATE'
    EXPORTING
      vbkok_wa                  = i_vbkok
      delivery                  = i_vbkok-vbeln_vl
      update_picking            = 'X'         "Update Picking data
*     nicht_sperren             = si
    IMPORTING
      ef_error_in_goods_issue_0 = v_error
    TABLES
      vbpok_tab                 = i_vbpok
      prot                      = lt_prot
    EXCEPTIONS
      error_message             = 99.

  break ablanco.

  IF sy-subrc EQ 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X'.
  ELSE.
    MESSAGE 'Error al actualizar la entrega' TYPE 'I'.
    p_correcto = no.
  ENDIF.
  CHECK p_correcto = si.

  CALL FUNCTION 'DEQUEUE_ALL' EXPORTING _synchron = si.

  REFRESH gt_bobinas_add.

ENDFORM.                    " ACTUALIZAR_ENTREGA
*&---------------------------------------------------------------------*
*&      Form  CALCULAR_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LW_DATOS_VBELN  text
*      <--P_LW_DATO_KOSTK  text
*      <--P_LW_DATO_WBSTK  text
*----------------------------------------------------------------------*
FORM calcular_status  USING    p_vbeln TYPE vbeln_vl
                      CHANGING p_kostk TYPE kostk
                               p_wbstk TYPE wbstk.
  CLEAR p_kostk.
  CLEAR p_wbstk.

  SELECT SINGLE kostk wbstk INTO (p_kostk, p_wbstk) FROM vbuk
    WHERE vbeln = p_vbeln.

ENDFORM.                    " CALCULAR_STATUS
*&---------------------------------------------------------------------*
*&      Form  CARGAR_BOBINAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_VBPOK  text
*      -->P_P_VBELN  text
*----------------------------------------------------------------------*
FORM cargar_bobinas  TABLES   pt_vbpok STRUCTURE vbpok
                     USING    p_vbeln  TYPE vbeln_vl
                              p_posnr  TYPE posnr_vl
                              p_matnr  TYPE matnr.

  DATA l_posnr TYPE posnr.
  DATA lw_vbpok TYPE vbpok.
  DATA lw_bobina TYPE zesd_bobinas.

* Calculamos la posición.
  SELECT MAX( posnr ) INTO l_posnr FROM lips WHERE vbeln = p_vbeln.

  IF l_posnr(1) = '9'.
    ADD 1 TO l_posnr.
  ELSE.
    l_posnr = '900001'.
  ENDIF.

  LOOP AT gt_bobinas INTO lw_bobina.
    CLEAR lw_vbpok.
    lw_vbpok-vbeln_vl = p_vbeln.
    lw_vbpok-posnr_vl = l_posnr.
    lw_vbpok-vbeln = p_vbeln.
    lw_vbpok-posnn = p_posnr.
    lw_vbpok-matnr = p_matnr.
    lw_vbpok-charg = lw_bobina-charg.
    lw_vbpok-lfimg = lw_bobina-brgew.
    lw_vbpok-lgmng = lw_bobina-brgew.
    lw_vbpok-pikmg = lw_bobina-brgew.

    APPEND lw_vbpok TO pt_vbpok.

    ADD 1 TO l_posnr.
  ENDLOOP.

ENDFORM.                    " CARGAR_BOBINAS
*&---------------------------------------------------------------------*
*&      Form  CONFIRMAR_GRABAR_VACIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_L_CORRECTO  text
*----------------------------------------------------------------------*
FORM confirmar_grabar_vacio  CHANGING p_correcto TYPE bool.

  DATA respuesta TYPE c.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'Sin bobinas asignadas'
      text_question         = 'No ha asignado ninguna bobina. ¿Desea realmente grabar?'
      default_button        = '2'
      display_cancel_button = 'X'
    IMPORTING
      answer                = respuesta.

  IF respuesta = 'J' OR respuesta = 'Y' OR respuesta = '1'.
    p_correcto = si.
  ELSE.
    p_correcto = no.
  ENDIF.


ENDFORM.                    " CONFIRMAR_GRABAR_VACIO
*&---------------------------------------------------------------------*
*&      Form  CERRAR_ENTREGA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_L_CONTINUAR  text
*----------------------------------------------------------------------*
FORM cerrar_entrega  CHANGING p_continuar TYPE bool.
  DATA lw_vbkok TYPE vbkok.
  DATA v_error.
  DATA lt_prot TYPE STANDARD TABLE OF prott.

  p_continuar = si.

  break ablanco.

  lw_vbkok-vbeln_vl = zesd_gestpick_bobinas_scr-vbeln.
  lw_vbkok-komue = si.

* Actualizamos las cantidades.
  CALL FUNCTION 'WS_DELIVERY_UPDATE'
    EXPORTING
      vbkok_wa                  = lw_vbkok
      delivery                  = zesd_gestpick_bobinas_scr-vbeln
      update_picking            = 'X'         "Update Picking data
*     nicht_sperren             = si
    IMPORTING
      ef_error_in_goods_issue_0 = v_error
    TABLES
*     vbpok_tab                 = i_vbpok
      prot                      = lt_prot
    EXCEPTIONS
      error_message             = 99.

  break ablanco.

  IF sy-subrc EQ 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X'.
  ELSE.
    MESSAGE 'Error al actualizar la entrega' TYPE 'I'.
    p_continuar = no.
  ENDIF.
  CHECK p_continuar = si.

  CALL FUNCTION 'DEQUEUE_ALL' EXPORTING _synchron = si.


ENDFORM.                    " CERRAR_ENTREGA
*&---------------------------------------------------------------------*
*&      Form  CONTABILIZAR_ENTREGA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_L_CORRECTO  text
*----------------------------------------------------------------------*
FORM contabilizar_entrega  CHANGING p_continuar TYPE bool.
  DATA lw_vbkok TYPE vbkok.
  DATA v_error TYPE XFELD.
  DATA lt_prot TYPE STANDARD TABLE OF prott.

  p_continuar = si.

  break ablanco.

  lw_vbkok-vbeln_vl = zesd_gestpick_bobinas_scr-vbeln.
  lw_vbkok-wabuc = si.

* Actualizamos las cantidades.
  CALL FUNCTION 'WS_DELIVERY_UPDATE'
    EXPORTING
      vbkok_wa                  = lw_vbkok
      delivery                  = zesd_gestpick_bobinas_scr-vbeln
*     update_picking            = 'X'         "Update Picking data
*     nicht_sperren             = si
    IMPORTING
      ef_error_in_goods_issue_0 = v_error
    TABLES
*     vbpok_tab                 = i_vbpok
      prot                      = lt_prot
    EXCEPTIONS
      error_message             = 99.

  break ablanco.

  IF sy-subrc EQ 0 and v_error = no.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X'.
  ELSE.
    MESSAGE 'Error al actualizar la entrega' TYPE 'I'.
    p_continuar = no.
  ENDIF.

  CALL FUNCTION 'DEQUEUE_ALL' EXPORTING _synchron = si.

ENDFORM.                    " CONTABILIZAR_ENTREGA
*&---------------------------------------------------------------------*
*&      Form  LANZAR_MENSAJE_TRANSPORTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_L_CORRECTO  text
*----------------------------------------------------------------------*
FORM lanzar_mensaje_transporte  CHANGING p_correcto TYPE bool.
  DATA r_tknum TYPE range_c10 OCCURS 1 WITH HEADER LINE.
  DATA r_kscv2 TYPE msg2 OCCURS 1 WITH HEADER LINE.
  DATA r_nacv2 TYPE msg2 OCCURS 1 WITH HEADER LINE.
  DATA lw_nast TYPE nast.
  DATA l_subrc TYPE sy-subrc.
  DATA l_index TYPE sy-index.

  p_correcto = si.

  SELECT SINGLE * INTO lw_nast FROM nast
    WHERE kappl = 'V7'
      AND objky = zesd_gestpick_bobinas_scr-tknum
      AND kschl = 'ZCTF'.
  IF sy-subrc <> 0.
    MESSAGE 'No se encontraron mensajes para este registro' TYPE 'I'.
    p_correcto = no.
  ENDIF.
  CHECK p_correcto = si.

  lw_nast-erdat = sy-datum.
  lw_nast-eruhr = sy-uzeit.
  lw_nast-nacha = 1.
  lw_nast-anzal = 1.
  lw_nast-vsztp = 3.
  lw_nast-manue = 'X'.
  lw_nast-datvr = sy-datum.
  lw_nast-uhrvr = sy-uzeit.
  lw_nast-usnam = sy-uname.
  lw_nast-vstat = 1.
  lw_nast-dimme = ''.
  lw_nast-delet = ''.

  CALL FUNCTION 'WFMC_MESSAGE_SINGLE'
    EXPORTING
      pi_nast  = lw_nast
    IMPORTING
      pe_rcode = l_subrc.

  IF l_subrc <> 0.
    MESSAGE 'Error al lanzar el mensaje ZCTF para el transporte' TYPE 'I'.
    p_correcto = no.
  ELSE.
    MESSAGE 'Mensaje ZCTF lanzado correctamente' TYPE 'I'.
    p_correcto = si.
  ENDIF.

  COMMIT WORK AND WAIT.

ENDFORM.                    " LANZAR_MENSAJE_TRANSPORTE
*&---------------------------------------------------------------------*
*&      Form  VERIFICAR_PARTICION_CREADA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_I_VBPOK_VBELN_VL  text
*      -->P_I_VBPOK_POSNR_VL  text
*      <--P_P_CORRECTO  text
*----------------------------------------------------------------------*
FORM verificar_particion_creada  USING    p_vbeln TYPE vbeln_vl
                                          p_charg TYPE charg_d
                                 CHANGING p_correcto TYPE bool.
  DATA lw_lips TYPE lips.

  p_correcto = si.

  SELECT SINGLE * INTO lw_lips FROM lips
    WHERE vbeln = p_vbeln
      AND charg = p_charg.
  IF sy-subrc <> 0.
* Vamos a esperar 1 segundo y volveremos a realizar la busqueda.
    COMMIT WORK AND WAIT.

    WAIT UP TO 1 SECONDS.

    SELECT SINGLE * INTO lw_lips FROM lips
      WHERE vbeln = p_vbeln
        AND charg = p_charg.
  ENDIF.

  IF sy-subrc <> 0.
    p_correcto = no.
    MESSAGE 'Error al crear las particiones. Revise la entrega.' TYPE 'I'.
  ENDIF.
  CHECK p_correcto = si.

* Si la posición no comienza por 9, no se ha creado partición sino que se ha actualizado el lote.
* Verificamos que tenga indicado el lote.

*  IF p_posnr(1) <> '9' AND lw_lips-charg IS INITIAL.
*    p_correcto = no.
*    MESSAGE 'Error al crear las particiones. Revise la entrega.' TYPE 'I'.
*  ENDIF.
*  CHECK p_correcto = si.


ENDFORM.                    " VERIFICAR_PARTICION_CREADA
*&---------------------------------------------------------------------*
*&      Form  DATOS_TRANSPORTISTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM datos_transportista .
  DATA l_continuar TYPE bool VALUE si.

  PERFORM solicitar_datos_expedicion CHANGING l_continuar.
  CHECK l_continuar = si.

ENDFORM.                    " DATOS_TRANSPORTISTA
*&---------------------------------------------------------------------*
*&      Form  VERIFICAR_CONCLUIDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LW_LIPS_VBELN  text
*      -->P_LW_LIPS_POSNR  text
*      <--P_LW_DATO_CONCLUIDA  text
*----------------------------------------------------------------------*
FORM verificar_concluida  USING    p_vbeln TYPE vbeln
                                   p_posnr TYPE posnr
                          CHANGING p_concluida TYPE bool.
  DATA lw_lips TYPE lips.

  p_concluida = no.

  SELECT SINGLE * FROM lips INTO lw_lips WHERE vbeln = p_vbeln AND uecha = p_posnr.

  IF sy-subrc = 0.
    p_concluida = si.
  ELSE.
    p_concluida = no.
  ENDIF.

ENDFORM.                    " VERIFICAR_CONCLUIDA
*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_FIN_PLAN_TRANSPORTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ZESD_GESTPICK_BOBINAS_SCR_TKNU  text
*----------------------------------------------------------------------*
FORM actualizar_fin_plan_transporte  USING p_tknum TYPE tknum.
  DATA l_dpten TYPE dpten.
  DATA l_upten TYPE upten.
  DATA lw_vttk TYPE vttk.
  DATA lt_vttk TYPE STANDARD TABLE OF vttk.

  SELECT SINGLE * FROM vttk INTO lw_vttk WHERE tknum = p_tknum.

  PERFORM calcular_fecha USING lw_vttk CHANGING l_dpten l_upten.
  CHECK l_dpten IS NOT INITIAL.

* Modifico los datos que deseo
  lw_vttk-dpten = l_dpten.
  lw_vttk-upten = l_upten.
  lw_vttk-stten = si.
  APPEND lw_vttk TO lt_vttk.

  CALL FUNCTION 'RV_SHIPMENT_UPDATE_DB'
    EXPORTING
      i_flag_tra_complete = 'X'
    TABLES
      db_vttk_upd         = lt_vttk.

  COMMIT WORK AND WAIT.

ENDFORM.                    " ACTUALIZAR_FIN_PLAN_TRANSPORTE
*&---------------------------------------------------------------------*
*&      Form  CALCULAR_FECHA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LW_TKNUM  text
*      <--P_L_DPTEN  text
*      <--P_L_UPTEN  text
*----------------------------------------------------------------------*
FORM calcular_fecha  USING    pw_vttk TYPE vttk
                     CHANGING p_dpten TYPE dpten
                              p_upten TYPE upten.
  DATA l_fahztd TYPE fahztd.
  DATA l_fahztd_seg TYPE i.
  DATA l_dias TYPE i.
  DATA l_fini TYPE datum.
  DATA l_hini TYPE uzeit.

  CLEAR p_upten.
  CLEAR p_dpten.

  CHECK pw_vttk-route IS NOT INITIAL.

  l_fini = pw_vttk-dplen.
  l_hini = pw_vttk-uplen.
  CHECK l_fini IS NOT INITIAL.

  SELECT SINGLE fahztd INTO l_fahztd FROM tvro WHERE route = pw_vttk-route.
  PERFORM time_sec USING l_fahztd CHANGING l_fahztd_seg.

  l_dias = l_fahztd_seg / ( 3600 * 24 ).

  p_dpten = l_fini + l_dias.

  l_fahztd_seg = l_fahztd_seg - l_dias * 24 * 3600.
  p_upten = l_hini + l_fahztd_seg.

  IF p_upten(2) < l_hini(2).
    ADD 1 TO p_dpten.
  ENDIF.

ENDFORM.                    " CALCULAR_FECHA
*&---------------------------------------------------------------------*
*&      Form  TIME_SEC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_L_FAHZTD  text
*      <--P_L_FAHZTD_SEG  text
*----------------------------------------------------------------------*
FORM time_sec  USING    p_horas
               CHANGING p_seg.

  DATA: lv_formato TYPE i,
        lv_horas   TYPE p DECIMALS 4,
        lv_horas_i TYPE i,
        lv_horas_d TYPE i,
        lv_min     TYPE p DECIMALS 2,
        lv_min_i   TYPE i,
        lv_seg     TYPE i.

  CLEAR: lv_horas, lv_horas_i, lv_horas_d, lv_min.
  CLEAR: lv_min_i, lv_seg, lv_formato.

  lv_formato = p_horas.

  " Horas:
  lv_horas = lv_formato / 10000.
  lv_horas_i = trunc( lv_horas ).
  lv_horas_d = frac( lv_horas ).

  " Minutos:
  lv_min = lv_horas_d / 100.
  lv_min_i = trunc( lv_min ).
  lv_seg = frac( lv_min ).

  " Cálculo en segundos:
  p_seg = lv_horas_i * 3600 + lv_min_i * 60 + lv_seg.

ENDFORM.                    " TIME_SEC
*&---------------------------------------------------------------------*
*&      Form  CALCULAR_PICKING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LW_LIPS  text
*      <--P_L_PIKMG  text
*----------------------------------------------------------------------*
FORM calcular_picking  USING    pw_lips TYPE lips
                       CHANGING p_pikmg TYPE pikmg.

  CLEAR p_pikmg.

  CALL FUNCTION 'WB2_GET_PICK_QUANTITY'
    EXPORTING
      i_vbeln             = pw_lips-vbeln
      i_posnr             = pw_lips-posnr
*     I_MODE              = ' '
    IMPORTING
      e_pikmg             = p_pikmg
    EXCEPTIONS
      document_read_error = 1
      OTHERS              = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.                    " CALCULAR_PICKING
