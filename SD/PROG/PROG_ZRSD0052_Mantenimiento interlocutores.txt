***********************************************************************
* TIPO : LISTADO
* TITULO : Mantenimiento interlocutores
* DESCRIPCION : Mantenimiento interlocutores
*
* AUTOR: Andrés Picazo                                FECHA: 12/02/2025
* ANALISTA: Eduardo Peris
*
***********************************************************************
REPORT zrsd0052.


*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: knvv, knvp.

*------TABLAS INTERNAS-------------------------------------------------*


*------VARIABLES-------------------------------------------------------*


*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*

CLASS lcl_event_grid DEFINITION INHERITING FROM zcl_ap_alv_grid_eventos FINAL.
  PUBLIC SECTION.
    METHODS: visualizar_objeto REDEFINITION,
      data_changed REDEFINITION,
      data_changed_finished REDEFINITION,
      toolbar      REDEFINITION,
      user_command REDEFINITION,
      onf4         REDEFINITION.
ENDCLASS.                    "lcl_event_grid DEFINITION

*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF  t_listado,
             check             TYPE xfeld,
             lights            TYPE zico_estado_mensaje,
             kunnr             TYPE kunnr_kh,
             kunnr_nombre      TYPE zzname1_cliente,
             vkorg             TYPE knvp-vkorg,
             vtweg             TYPE knvp-vtweg,
             spart             TYPE knvp-spart,
             parvw             TYPE knvp-parvw,
             vtext             TYPE tpart-vtext,
             lifnr             TYPE lifnr,
             lifnr_nombre      TYPE name1,
             lifnr_prop        TYPE lfa1-lifnr,
             lifnr_prop_nombre TYPE lfa1-name1,
             message           TYPE bapi_msg,
             style             TYPE lvc_t_styl,
             color             TYPE lvc_t_scol,
             tabix             TYPE sy-tabix,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.
    DATA: i_listado     TYPE tt_listado,
          i_listado_ini TYPE tt_listado,
          i_listado_mod TYPE tt_listado.

    TYPES: BEGIN OF t_par,
             tipo_interlocutor TYPE parvw,
             comercial         TYPE string,
             interlocutor      TYPE lifnr,
           END OF t_par.
    DATA i_par TYPE TABLE OF t_par.

    TYPES: BEGIN OF t_mc,
             check        TYPE xfeld,
             comercial    TYPE string,
             interlocutor TYPE lifnr,
             name1        TYPE name1_lf,
           END OF t_mc.
    DATA i_mc TYPE TABLE OF t_mc.

    DATA: o_alv   TYPE REF TO zcl_ap_alv_grid,
          o_event TYPE REF TO lcl_event_grid.

    METHODS:  buscar_datos REDEFINITION,
      validaciones IMPORTING mod TYPE abap_bool DEFAULT '' CHANGING listado TYPE t_listado, "#EC NEEDED
      status_dynpro_0100,
      command_dynpro_0100,
      crear_interlocutor
        CHANGING !list TYPE t_listado.

ENDCLASS.                    "REPORT DEFINITION

DATA: o_prog          TYPE REF TO zcl_report,
      zst_sd_catalogo TYPE zst_sd_catalogo,
      kna1            TYPE kna1.

*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_parvw FOR knvp-parvw,
                s_kunnr FOR knvv-kunnr,
                s_lifnr FOR knvp-lifnr,
                s_vkorg FOR knvv-vkorg,
                s_vtweg FOR knvv-vtweg,
                s_spart FOR knvv-spart,
                s_ernam FOR knvv-ernam,
                s_erdat FOR knvv-erdat,
                s_ktokd FOR kna1-ktokd DEFAULT 'ZCLI'.
SELECTION-SCREEN SKIP 1.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b01.
__botones_plantilla.

************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************
CLASS lcl_event_grid IMPLEMENTATION.

  METHOD visualizar_objeto.
    DATA l_list TYPE o_prog->t_listado.
    l_list = list.
    CASE column.
*      WHEN 'BUKRS'.
*        MESSAGE l_list-bukrs TYPE 'I'.
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. "handle_double_click

  METHOD toolbar.

    super->toolbar( e_object = e_object e_interactive = e_interactive ).

  ENDMETHOD.                                               "toolbar

  METHOD user_command.

    CASE e_ucomm.
      WHEN OTHERS.
        super->user_command( e_ucomm = e_ucomm ).
    ENDCASE.

  ENDMETHOD.                                               "USER_COMMAND


  METHOD onf4.
    FIELD-SYMBOLS: <itab> TYPE lvc_t_modi.
    DATA: ls_modi TYPE lvc_s_modi,
          l_subrc TYPE sy-subrc,
          l_valor TYPE qpk1ac-code,
          l_ucomm TYPE sy-ucomm,
          l_fila  TYPE int4.

    ASSIGN er_event_data->m_data->* TO <itab>.

    READ TABLE o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) INDEX es_row_no-row_id.
    IF <listado>-parvw IS INITIAL.
      MESSAGE 'Línea debe tener tipo de interlocutor' TYPE 'I'.
      RETURN.
    ENDIF.

    LOOP AT o_prog->i_par ASSIGNING FIELD-SYMBOL(<par>) WHERE tipo_interlocutor = <listado>-parvw.
      APPEND VALUE #( comercial = <par>-comercial
                      interlocutor = <par>-interlocutor
                      name1 = o_prog->get( tabla = 'LFA1' clave = <par>-interlocutor ) ) TO o_prog->i_mc.
    ENDLOOP.
    IF sy-subrc NE 0.
      MESSAGE |El tipo de interlocutor { <listado>-parvw } no tiene a nadie parametrizado| TYPE 'I'.
      RETURN.
    ENDIF.

    ls_modi-row_id    = es_row_no-row_id.

    er_event_data->m_event_handled = 'X'.


    CALL FUNCTION 'Z_POPUP_ALV_AP'
      EXPORTING
        titulo   = 'Seleccione interlocutor'
        check    = 'X'
        botones  = 'OK_CANCEL'
        opciones = 'BOTONES_ESTANDARD=X'
        ancho    = 60
      IMPORTING
        ucomm    = l_ucomm
        fila     = l_fila
      TABLES
        t_datos  = o_prog->i_mc.

    IF l_ucomm IS INITIAL AND NOT l_fila IS INITIAL.
      l_ucomm = 'F01'.
      o_prog->i_mc[ l_fila ]-check = 'X'.
    ENDIF.

    IF l_ucomm = 'F01'.
      ASSIGN o_prog->i_mc[ check = 'X' ] TO FIELD-SYMBOL(<mc>).
      IF sy-subrc = 0.
        ls_modi-fieldname = 'LIFNR_PROP'.
        ls_modi-value = <mc>-interlocutor.
        APPEND ls_modi TO <itab>.

        ls_modi-fieldname = 'LIFNR_PROP_NOMBRE'.
        ls_modi-value = <mc>-name1.
        APPEND ls_modi TO <itab>.

        er_event_data->m_event_handled = 'X'.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD data_changed.

    ini_data_changed( cambios = er_data_changed->mt_good_cells  ).

    CLEAR o_prog->i_listado_mod.
    LOOP AT i_cambios_celda INTO cambio_celda.
      AT NEW row_id.
        READ TABLE o_prog->i_listado INTO DATA(l_listado_ini) INDEX cambio_celda-row_id. "#EC CI_SUBRC
        DATA(l_listado) = l_listado_ini.
      ENDAT.

      set_valor_mod( CHANGING datos = l_listado ).

      AT END OF row_id.
        o_prog->validaciones( EXPORTING mod = 'X' CHANGING listado = l_listado ).
        MODIFY o_prog->i_listado FROM l_listado INDEX cambio_celda-row_id.
        actualizar_fila( fila_ini = l_listado_ini fila_fin = l_listado er_data_changed = er_data_changed fila = cambio_celda-row_id ).
        IF l_listado-style NE l_listado_ini-style OR l_listado-color NE l_listado_ini-color.
          APPEND l_listado TO o_prog->i_listado_mod. "No me guarda los cambios en los estilos
        ENDIF.
      ENDAT.
    ENDLOOP.
  ENDMETHOD.                                               "data_changed

  METHOD data_changed_finished.

    IF NOT tabla_data_changed IS INITIAL.
      LOOP AT o_prog->i_listado_mod ASSIGNING FIELD-SYMBOL(<list_mod>).
        READ TABLE o_prog->i_listado ASSIGNING FIELD-SYMBOL(<list>) WITH KEY tabix = <list_mod>-tabix.
        IF sy-subrc = 0.
          <list> = <list_mod>.
        ENDIF.
        DELETE o_prog->i_listado_mod.
      ENDLOOP.
      IF sy-subrc = 0.
        o_alv->refrescar_grid( soft_refresh = '' ).
      ENDIF.
      CLEAR tabla_data_changed.
    ENDIF.

  ENDMETHOD.

ENDCLASS.                    "lcl_event_grid IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.

  METHOD buscar_datos.
    DATA r_parvw TYPE RANGE OF parvw.

    o_par->get_tabla_formateada( IMPORTING message = DATA(l_msg)
                                 CHANGING tabla = i_par ).
    IF NOT l_msg IS INITIAL.
      MESSAGE l_msg TYPE 'I'.
    ENDIF.

    sgpi_texto( 'Seleccionando datos'(sda) ).

    LOOP AT i_par ASSIGNING FIELD-SYMBOL(<par>) WHERE tipo_interlocutor IN s_parvw.
      APPEND VALUE #( option = 'EQ' sign = 'I' low = <par>-tipo_interlocutor ) TO r_parvw.
    ENDLOOP.
    IF sy-subrc NE 0.
      MESSAGE 'No se ha seleccionado ningún tipo de interlocutor parametrizado' TYPE 'I'.
      RETURN.
    ENDIF.
    SORT r_parvw.
    DELETE ADJACENT DUPLICATES FROM r_parvw.

    SELECT parvw, vtext FROM tpart
      INTO TABLE @DATA(i_tpart)
     WHERE spras = @sy-langu
       AND parvw IN @r_parvw.


    DATA(r_backof) = s_lifnr[].
    IF NOT s_lifnr[] IS INITIAL.
      IF lines( s_lifnr[] ) = 1.
        IF s_lifnr[ 1 ]-option = 'EQ' AND s_lifnr[ 1 ]-sign = 'I' AND s_lifnr[ 1 ]-low = ''.
          CLEAR r_backof[].
        ENDIF.
      ENDIF.
    ENDIF.
    SELECT knvv~kunnr, knvv~vkorg, knvv~vtweg, knvv~spart,
           kna1~name1 AS kunnr_nombre,
           knvp~parvw, knvp~lifnr,
           lfa1~name1 AS lifnr_nombre,
           tpart~vtext
      FROM knvv
      INNER JOIN kna1 ON kna1~kunnr = knvv~kunnr
      LEFT OUTER JOIN knvp ON  knvp~kunnr = knvv~kunnr
                           AND knvp~vkorg = knvv~vkorg
                           AND knvp~vtweg = knvv~vtweg
                           AND knvp~spart = knvv~spart
      LEFT OUTER JOIN tpart ON tpart~parvw = knvp~parvw
                           AND tpart~spras = @sy-langu
      LEFT OUTER JOIN lfa1 ON lfa1~lifnr = knvp~lifnr "#EC CI_BUFFJOIN.
      INTO CORRESPONDING FIELDS OF TABLE @i_listado
      WHERE knvv~kunnr IN @s_kunnr
        AND knvv~vkorg IN @s_vkorg
        AND knvv~vtweg IN @s_vtweg
        AND knvv~spart IN @s_spart
        AND knvv~ernam IN @s_ernam
        AND knvv~erdat IN @s_erdat
        AND knvp~lifnr IN @r_backof
*        AND knvp~parvw IN @r_parvw
        AND kna1~ktokd IN @s_ktokd
     ORDER BY knvv~kunnr, knvv~vkorg, knvv~vtweg, knvv~spart, knvp~parvw, knvp~lifnr.

    IF NOT s_lifnr IS INITIAL.
      DELETE i_listado WHERE NOT lifnr IN s_lifnr.
    ENDIF.

* Añadimos las interlocutores no existentes
    DATA i_list TYPE TABLE OF  t_listado.
    LOOP AT i_listado INTO DATA(l_listado).
      CLEAR: l_listado-parvw, l_listado-vtext, l_listado-lifnr, l_listado-lifnr_nombre.
      IF NOT line_exists( i_list[ kunnr = l_listado-kunnr
                                  vkorg = l_listado-vkorg
                                  vtweg = l_listado-vtweg
                                  spart = l_listado-spart ] ).
        APPEND l_listado TO i_list.
      ENDIF.
    ENDLOOP.
    LOOP AT i_list INTO l_listado.
      LOOP AT i_tpart ASSIGNING FIELD-SYMBOL(<tpart>).
        IF NOT line_exists( i_listado[ kunnr = l_listado-kunnr
                                       vkorg = l_listado-vkorg
                                       vtweg = l_listado-vtweg
                                       spart = l_listado-spart
                                       parvw = <tpart>-parvw ] ).
          l_listado-parvw = <tpart>-parvw.
          l_listado-vtext = <tpart>-vtext.
          APPEND l_listado TO i_listado.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    IF NOT r_parvw IS INITIAL.
      DELETE i_listado WHERE NOT parvw IN r_parvw.
    ENDIF.

    SORT i_listado BY kunnr vkorg vtweg spart parvw lifnr.

*    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
*    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
*      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).
*
*      IF <listado>-lifnr IS INITIAL.
*        DATA(l_icono) = icon_yellow_light.
*      ELSE.
*        LOOP AT i_listado TRANSPORTING NO FIELDS WHERE     kunnr       = <listado>-kunnr
*                                                       AND vkorg       = <listado>-vkorg
*                                                       AND vtweg       = <listado>-vtweg
*                                                       AND spart       = <listado>-spart
*                                                       AND parvw       = <listado>-parvw
*                                                       AND lifnr <> <listado>-lifnr.
*          EXIT.
*        ENDLOOP.
*        IF sy-subrc = 0.
*          <listado>-message = |Existe más de un { <listado>-vtext } para el cliente|.
*          l_icono = icon_deputy.
*        ELSE.
*          l_icono = icon_green_light.
*        ENDIF.
*      ENDIF.
*
*
*      set_status_list( EXPORTING message = <listado>-message icono = l_icono CHANGING list = <listado> ).
*    ENDLOOP.

    i_listado_ini = i_listado.

  ENDMETHOD.                                               "seleccionar_datos

  METHOD status_dynpro_0100.

    status_dynpro( EXPORTING cprog = 'ZAP_STATUS' status = 'ST_DYN' CHANGING i_listado = i_listado ).
    IF inicio IS INITIAL.
      inicio = 'X'.
      o_alv->add_button( button = 'F01' text = 'Modificar interlocutores'  icon = icon_execute_object ucomm = 'EJEC' ).
      o_alv->add_button( button = 'F02' text = 'Seleccionar en masa'  icon = icon_select_block ucomm = 'SEL' ).
      o_alv->variant-variant = p_vari.
      o_alv->registrar_mod( ).
      o_alv->set_layout( no_rowmove = 'X' no_rowins = 'X' style = 'STYLE' colort = 'COLOR' ).
      o_alv->quitar_opciones( cl_gui_alv_grid=>mc_fc_refresh ).
      o_alv->set_campos_tabint( i_listado[] ).
      o_alv->set_field_quitar( 'CHECK,tabix' ).
      o_alv->set_field_input( 'LIFNR_PROP' ).
      o_alv->set_field( campo = 'LIFNR_PROP' op = 'F4' ).

      o_alv->set_field_text(  campo = 'LIFNR' valor = 'Interlocutor' valor2 = 'Interlocutor actual' ).
      o_alv->set_field_text(  campo = 'LIFNR_NOMBRE' valor = 'Nombre interlocutor' valor2 = 'Nombre interlocutor actual' ).

      o_alv->set_field_text(  campo = 'LIFNR_PROP' valor = 'Nuevo int.' valor2 = 'Nuevo Interlocutor' ).
      o_alv->set_field_text(  campo = 'LIFNR_PROP_NOMBRE' valor = 'Nombre nuevo interlocutor' valor2 = 'Nombre nuevo interlocutor' ).

      o_alv->set_orden( 'KUNNR,KUNNR_NOMBRE,VKORG,VTWEG,SPART,PARVW,VTEXT,LIFNR' ).

      sgpi_texto( 'Generando informe' ).
      o_alv->show( CHANGING tabla = i_listado ).

      o_alv->set_seleccion( CHANGING t_tabla = i_listado ).
    ENDIF.

  ENDMETHOD.


  METHOD command_dynpro_0100.
    DATA: l_hay_sel,
          l_comm_sel TYPE string VALUE 'SEL',
          l_ucomm    TYPE sy-ucomm,
          l_fila     TYPE int4.

    command_dynpro( EXPORTING o_alv = o_alv seleccion = l_comm_sel solo_campos = 'LIFNR_PROP'
                            CHANGING i_listado = i_listado i_listado_ini = i_listado_ini hay_sel = l_hay_sel ).


    CASE ucomm.
      WHEN 'EJEC'.
        LOOP AT i_listado TRANSPORTING NO FIELDS WHERE NOT lifnr_prop IS INITIAL AND lights(3) = icon_red_light.
          MESSAGE 'No puede grabar si hay errores' TYPE 'I'.
          RETURN.
        ENDLOOP.
        LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE NOT lifnr_prop IS INITIAL.
          IF <listado>-lifnr_prop NE <listado>-lifnr.
            crear_interlocutor( CHANGING list = <listado> ).
          ENDIF.
        ENDLOOP.
        o_alv->refrescar_grid( ).
      WHEN 'SEL'.
        CLEAR aux1.
        LOOP AT i_listado ASSIGNING <listado>.
          __add_lista aux1 <listado>-parvw.
          IF aux1 CS ','.
            MESSAGE 'Seleccione un único tipo de interlocutor' TYPE 'I'.
            RETURN.
          ENDIF.
        ENDLOOP.


        CLEAR i_mc.
        LOOP AT i_par ASSIGNING FIELD-SYMBOL(<par>) WHERE tipo_interlocutor = <listado>-parvw.
          APPEND VALUE #( comercial = <par>-comercial
                          interlocutor = <par>-interlocutor
                          name1 = o_prog->get( tabla = 'LFA1' clave = <par>-interlocutor ) ) TO i_mc.
        ENDLOOP.
        IF sy-subrc NE 0.
          MESSAGE |El tipo de interlocutor { <listado>-parvw } no tiene a nadie parametrizado| TYPE 'I'.
          RETURN.
        ENDIF.



        CALL FUNCTION 'Z_POPUP_ALV_AP'
          EXPORTING
            titulo   = 'Seleccione interlocutor'
            check    = 'X'
            botones  = 'OK_CANCEL'
            opciones = 'BOTONES_ESTANDARD=X'
            ancho    = 60
          IMPORTING
            ucomm    = l_ucomm
            fila     = l_fila
          TABLES
            t_datos  = i_mc.

        IF l_ucomm IS INITIAL AND NOT l_fila IS INITIAL.
          l_ucomm = 'F01'.
          i_mc[ l_fila ]-check = 'X'.
        ENDIF.

        IF l_ucomm = 'F01'.
          ASSIGN i_mc[ check = 'X' ] TO FIELD-SYMBOL(<mc>).
          IF sy-subrc = 0.
            LOOP AT i_listado ASSIGNING <listado> WHERE check = 'X'.
              <listado>-lifnr_prop = <mc>-interlocutor.
              validaciones( EXPORTING mod = 'X' CHANGING listado = <listado> ).
            ENDLOOP.
            o_alv->refrescar_grid( ).
          ENDIF.
        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD validaciones.
    DATA l_icono TYPE icon_d.

    CLEAR: listado-message, listado-style, listado-color, listado-lights.

    IF mod = 'X'.
      listado-lifnr_prop_nombre = get( tabla = 'LFA1' clave = listado-lifnr_prop ).
      IF listado-lifnr_prop_nombre IS INITIAL.
        listado-message = 'Interlocutor incorrecto'.
      ENDIF.
    ENDIF.

    IF listado-message IS INITIAL AND NOT listado-lifnr_prop IS INITIAL.
      IF NOT line_exists( i_par[ tipo_interlocutor = listado-parvw
                                 interlocutor = listado-lifnr_prop ] ).
        listado-message = 'Interlocutor no permitido'.
      ENDIF.
    ENDIF.

    IF listado-lifnr_prop IS INITIAL.
      CLEAR l_icono.
    ELSEIF listado-message IS INITIAL.
      l_icono = icon_change.
    ELSE.
      l_icono = icon_red_light.
    ENDIF.


    set_status_list( EXPORTING message = listado-message icono = l_icono CHANGING list = listado ).

  ENDMETHOD.


  METHOD crear_interlocutor.
    DATA: yknvp  TYPE TABLE OF fknvp,
          xknvp  TYPE TABLE OF fknvp,
          l_knvp TYPE fknvp.

    IF list-lifnr_prop IS INITIAL.
      list-message = |No hay ningún { list-vtext } propuesto|.
      list-lights  = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
      RETURN.
    ENDIF.

    SELECT * FROM knvp                        "#EC CI_ALL_FIELDS_NEEDED
      INTO CORRESPONDING FIELDS OF TABLE yknvp
     WHERE kunnr = list-kunnr
       AND vkorg = list-vkorg
       AND vtweg = list-vtweg
       AND spart = list-spart
       AND parvw = list-parvw.

    IF line_exists( yknvp[ lifnr = list-lifnr_prop ] ).
      list-message = |Cliente ya contiene el { list-vtext } propuesto|.
      list-lights  = zcl_ap_alv=>set_icono( icono = icon_led_green mensaje = list-message ).
      RETURN.
    ENDIF.

    IF line_exists( yknvp[ parvw = list-parvw ] ).
      DATA(l_upd) = 'X'.
      UPDATE knvp
         SET lifnr = @list-lifnr_prop
       WHERE kunnr = @list-kunnr
         AND vkorg = @list-vkorg
         AND vtweg = @list-vtweg
         AND spart = @list-spart
         AND parvw = @list-parvw
         AND lifnr = @list-lifnr.
    ENDIF.



    xknvp[] = VALUE #( ( kunnr = list-kunnr
                         vkorg = list-vkorg
                         vtweg = list-vtweg
                         spart = list-spart
                         parvw = list-parvw
                         lifnr = list-lifnr_prop
                         kz = 'I' ) ).

    APPEND LINES OF yknvp TO xknvp.


*
    SELECT SINGLE * FROM kna1                               "#EC *
      INTO @DATA(l_kna1)
     WHERE kunnr = @list-kunnr.
*
    SELECT SINGLE * FROM knvv                               "#EC *
      INTO @DATA(l_knvv)
     WHERE kunnr = @list-kunnr
       AND vkorg = @list-vkorg
       AND vtweg = @list-vtweg
       AND spart = @list-spart.

    IF l_upd IS INITIAL.
      CALL FUNCTION 'SD_CUSTOMER_MAINTAIN_ALL'
        EXPORTING
          i_kna1                  = l_kna1
          i_knvv                  = l_knvv
          pi_postflag             = 'X'
        TABLES
          t_xknvp                 = xknvp
          t_yknvp                 = yknvp
        EXCEPTIONS
          client_error            = 1
          kna1_incomplete         = 2
          knb1_incomplete         = 3
          knb5_incomplete         = 4
          knvv_incomplete         = 5
          kunnr_not_unique        = 6
          sales_area_not_unique   = 7
          sales_area_not_valid    = 8
          insert_update_conflict  = 9
          number_assignment_error = 10
          number_not_in_range     = 11
          number_range_not_extern = 12
          number_range_not_intern = 13
          account_group_not_valid = 14
          parnr_invalid           = 15
          bank_address_invalid    = 16
          tax_data_not_valid      = 17
          no_authority            = 18
          company_code_not_unique = 19
          dunning_data_not_valid  = 20
          knb1_reference_invalid  = 21
          cam_error               = 22
          OTHERS                  = 23.
    ENDIF.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO list-message.
      list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
    ELSE.
      COMMIT WORK AND WAIT.
      SELECT lifnr
        FROM knvp
        INTO @knvp-lifnr
        UP TO 1 ROWS
        WHERE kunnr = @list-kunnr
          AND vkorg = @list-vkorg
          AND vtweg = @list-vtweg
          AND spart = @list-spart
          AND parvw = @list-parvw
          AND lifnr = @list-lifnr_prop
        ORDER BY PRIMARY KEY.
      ENDSELECT.
      IF sy-subrc = 0.
        CLEAR list-message.
        list-lights            = zcl_ap_alv=>set_icono( icono = icon_okay mensaje = list-message ).
        list-lifnr_nombre = get( tabla = 'LFA1' clave = list-lifnr ).
        i_listado_ini[ kunnr = list-kunnr
                       parvw = list-parvw
                       lifnr = list-lifnr ]-lifnr_prop = list-lifnr_prop.
      ELSE.
        ROLLBACK WORK.
        list-message = |No se ha podido asociar el { list-vtext } al cliente|.
        list-lights  = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
      ENDIF.
    ENDIF.
  ENDMETHOD.

ENDCLASS.                    "REPORT IMPLEMENTATION
*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.

  o_prog = NEW #( status       = 'INICIO_DYN'
                  guardar_logz = 'X'
                  status_prog  = 'ZAP_STATUS' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Interlocutores permitidos' '' ''.

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

  IF sy-batch IS INITIAL.
    o_prog->o_event = NEW #( boton_refrescar = 'X'
                             boton_excel     = 'Y'
                             o_prog          = o_prog ).

    o_prog->o_alv = NEW #( estructura = ''
                           o_event    = o_prog->o_event ).

    p_vari = o_prog->o_alv->get_default_layout( ).
  ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  IF NOT o_prog->o_alv IS INITIAL.
    p_vari = o_prog->o_alv->get_f4_layout( ).
  ENDIF.

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.

  CASE sy-ucomm.
    WHEN 'M01'.
      zcl_ap_parametros=>mantenimiento_st( clave = 'ZRSD0052' ).
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

AT SELECTION-SCREEN OUTPUT.
*  zcl_ap_dynpro=>screen_visible( group1 = 'PED' variable = p_pedid ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

  o_prog->buscar_datos( ).

  IF sy-batch IS INITIAL.
    CALL SCREEN 0100.
  ELSE.
    MESSAGE 'Este programa no se puede ejecutar en fondo'(pnf) TYPE 'E'.
  ENDIF.


*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*

MODULE status_0100 OUTPUT.

  o_prog->status_dynpro_0100( ).

ENDMODULE.                 " STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  o_prog->command_dynpro_0100( ).


ENDMODULE.                 " USER_COMMAND_0100  INPUT
