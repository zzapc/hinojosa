***********************************************************************
* TIPO : LISTADO
* TITULO : Asignación BackOffice a clientes
* DESCRIPCION : Asignación BackOffice a clientes
*
* AUTOR: Andrés Picazo                                FECHA: 03/06/2024
* ANALISTA: Alfredo García
*
***********************************************************************
REPORT zrsd0038.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: knvv, knvp.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.

ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check                  TYPE xfeld,
             lights                 TYPE zico_estado_mensaje,
             kunnr                  TYPE kunnr_kh,
             kunnr_nombre           TYPE zzname1_cliente,
             vkorg                  TYPE knvp-vkorg,
             vtweg                  TYPE knvp-vtweg,
             spart                  TYPE knvp-spart,
             parvw                  TYPE knvp-parvw,
             vtext                  TYPE tpart-vtext,
             backoffice             TYPE zed_backoffice,
             backoffice_nombre      TYPE zed_backoffice_nombre,
             ernam                  TYPE knvv-ernam,
             comp                   TYPE string,
             backoffice_prop        TYPE zed_backoffice,
             backoffice_prop_nombre TYPE zed_backoffice_nombre,
             message                TYPE bapi_msg,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos.

    METHODS crear_interlocutor
      CHANGING !list TYPE t_listado.
ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA: o_prog          TYPE REF TO zcl_report,
      zst_sd_catalogo TYPE zst_sd_catalogo,
      kna1            TYPE kna1.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_parvw FOR knvp-parvw,
                s_kunnr FOR knvv-kunnr,
                s_backof FOR zst_sd_catalogo-backoffice,
                s_vkorg FOR knvv-vkorg,
                s_vtweg FOR knvv-vtweg,
                s_spart FOR knvv-spart,
                s_ernam FOR knvv-ernam,
                s_erdat FOR knvv-erdat,
                s_ktokd FOR kna1-ktokd DEFAULT 'ZCLI'.
SELECTION-SCREEN END OF BLOCK b01.
*SELECTION-SCREEN BEGIN OF BLOCK b04 WITH FRAME TITLE text-exi.
*PARAMETERS: p_insert RADIOBUTTON GROUP g,
*            p_update RADIOBUTTON GROUP g,
*            p_ignore RADIOBUTTON GROUP g DEFAULT 'X'.
*SELECTION-SCREEN END OF BLOCK b04.
SELECTION-SCREEN BEGIN OF BLOCK b03 WITH FRAME.
PARAMETERS p_ejec AS CHECKBOX.
SELECTION-SCREEN SKIP.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b03.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    " TODO: variable is assigned but only used in commented-out code (ABAP cleaner)
    DATA l_list TYPE o_prog->t_listado.

    l_list = list.
    CASE column.
      WHEN OTHERS.
        DATA: o_bi TYPE REF TO zcl_ap_batch_input.
        CREATE OBJECT o_bi.

        o_bi->inicio( ).

* Maestro cliente: Pantalla de llamada: Visual./Modif. central
        o_bi->dynpro( program = 'SAPMF02D' dynpro = '0101' okcode = '/00').
        o_bi->campos( campo = 'RF02D-KUNNR' valor = l_list-kunnr ). " Número de cuenta del deudor
        o_bi->campos( campo = 'RF02D-VKORG' valor = l_list-vkorg ). " Organización de ventas
        o_bi->campos( campo = 'RF02D-VTWEG' valor = l_list-vtweg ). " Canal de distribución
        o_bi->campos( campo = 'RF02D-SPART' valor = l_list-spart ). " Sector
        o_bi->campos( campo = 'RF02D-D0324' valor = 'X'). " ¿Tratar datos?
*
** Maestro deudor: Ventas Funciones interlocutor
*        o_bi->dynpro( program = 'SAPMF02D' dynpro = '0324' okcode = '=PF03').

        o_bi->llamar_transaccion( tcode = 'XD03' modo = 'E').
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    check_ucomm_sel = 'EJEC'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'EJEC'.
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
          o_prog->crear_interlocutor( CHANGING list = <listado> ).
        ENDLOOP.
        IF sy-subrc = 0.
          refresh( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).

    IF p_ejec = 'X'.
      LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
        crear_interlocutor( CHANGING list = <listado> ).
      ENDLOOP.
    ENDIF.
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    DATA r_parvw TYPE RANGE OF parvw.

    sgpi_texto( 'Seleccionando datos'(sda) ).

    SELECT DISTINCT campo AS parvw FROM zparametros
      INTO TABLE @DATA(i_parvw_p)
     WHERE clave = 'CORE_BODEF'
       AND campo NE ''
       AND campo IN @s_parvw.
    IF sy-subrc NE 0.
      MESSAGE 'No se ha seleccionado ningún tipo de interlocutor parametrizado' TYPE 'I'.
      RETURN.
    ENDIF.

    LOOP AT i_parvw_p ASSIGNING FIELD-SYMBOL(<parvw>).
      APPEND VALUE #( option = 'EQ' sign = 'I' low = <parvw>-parvw ) TO r_parvw.
    ENDLOOP.

    SELECT parvw, vtext FROM tpart
      INTO TABLE @DATA(i_tpart)
     WHERE spras = @sy-langu
       AND parvw IN @r_parvw.


    DATA(r_backof) = s_backof[].
    IF NOT s_backof[] IS INITIAL.
      IF lines( s_backof[] ) = 1.
        IF s_backof[ 1 ]-option = 'EQ' AND s_backof[ 1 ]-sign = 'I' AND s_backof[ 1 ]-low = ''.
          CLEAR r_backof[].
        ENDIF.
      ENDIF.
    ENDIF.
    SELECT knvv~kunnr, knvv~vkorg, knvv~vtweg, knvv~spart, knvv~ernam,
           kna1~name1 AS kunnr_nombre,
           knvp~parvw, knvp~lifnr AS backoffice,
           lfa1~name1 AS backoffice_nombre,
           tpart~vtext
      FROM knvv
      INNER JOIN kna1 ON kna1~kunnr = knvv~kunnr
      LEFT OUTER JOIN knvp ON  knvp~kunnr = knvv~kunnr
                           AND knvp~vkorg = knvv~vkorg
                           AND knvp~vtweg = knvv~vtweg
                           AND knvp~spart = knvv~spart
      LEFT OUTER JOIN tpart ON tpart~parvw = knvp~parvw
                           AND tpart~spras = @sy-langu
      LEFT OUTER JOIN lfa1 ON lfa1~lifnr = knvp~lifnr "#EC CI_BUFFJOIN.
      INTO CORRESPONDING FIELDS OF TABLE @i_listado
      WHERE knvv~kunnr IN @s_kunnr
        AND knvv~vkorg IN @s_vkorg
        AND knvv~vtweg IN @s_vtweg
        AND knvv~spart IN @s_spart
        AND knvv~ernam IN @s_ernam
        AND knvv~erdat IN @s_erdat
        AND knvp~lifnr IN @r_backof
        AND knvp~parvw IN @r_parvw
        AND kna1~ktokd IN @s_ktokd
     ORDER BY knvv~kunnr, knvv~vkorg, knvv~vtweg, knvv~spart, knvp~parvw, knvp~lifnr.

    IF NOT s_backof IS INITIAL.
      DELETE i_listado WHERE NOT backoffice IN s_backof.
    ENDIF.

* Añadimos las interlocutores no existentes
    DATA i_list TYPE TABLE OF  t_listado.
    LOOP AT i_listado INTO DATA(l_listado).
      CLEAR: l_listado-parvw, l_listado-vtext, l_listado-backoffice, l_listado-backoffice_nombre.
      COLLECT l_listado INTO i_list.
    ENDLOOP.
    LOOP AT i_list INTO l_listado.
      LOOP AT i_tpart ASSIGNING FIELD-SYMBOL(<tpart>).
        IF NOT line_exists( i_listado[ kunnr = l_listado-kunnr
                                       vkorg = l_listado-vkorg
                                       vtweg = l_listado-vtweg
                                       spart = l_listado-spart
                                       parvw = <tpart>-parvw ] ).
          l_listado-parvw = <tpart>-parvw.
          l_listado-vtext = <tpart>-vtext.
          APPEND l_listado TO i_listado.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    SORT i_listado BY kunnr vkorg vtweg spart parvw backoffice.

    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

      IF <listado>-backoffice IS INITIAL.
        DATA(l_icono) = icon_yellow_light.
      ELSE.
        LOOP AT i_listado TRANSPORTING NO FIELDS WHERE     kunnr       = <listado>-kunnr
                                                       AND vkorg       = <listado>-vkorg
                                                       AND vtweg       = <listado>-vtweg
                                                       AND spart       = <listado>-spart
                                                       AND parvw       = <listado>-parvw
                                                       AND backoffice <> <listado>-backoffice.
          EXIT.
        ENDLOOP.
        IF sy-subrc = 0.
          <listado>-message = |Existe más de un { <listado>-vtext } para el cliente|.
          l_icono = icon_deputy.
        ELSE.
          l_icono = icon_green_light.
        ENDIF.
      ENDIF.

      <listado>-backoffice_prop = zcl_ap_parametros=>get_atributo1( clave = 'CORE_BODEF' campo = <listado>-parvw valor = <listado>-ernam ).
      IF NOT <listado>-backoffice_prop IS INITIAL.
        __poner_ceros <listado>-backoffice_prop.
        SELECT SINGLE name1 FROM lfa1
          INTO <listado>-backoffice_prop_nombre
         WHERE lifnr = <listado>-backoffice_prop.
        IF sy-subrc <> 0.
          IF <listado>-backoffice IS INITIAL.
            l_icono = icon_red_light.
            <listado>-message = condense( |No existe el nº de proveedor { <listado>-backoffice_prop }asociado al usuario { <listado>-ernam }| ).
          ENDIF.
        ELSE.
          IF <listado>-message IS INITIAL.
            <listado>-message = condense( |{ <listado>-vtext } { <listado>-backoffice_prop ALPHA = OUT } propuesto por usuario { <listado>-ernam }| ).
          ENDIF.
        ENDIF.
      ELSE.
        <listado>-backoffice_prop = zcl_ap_parametros=>get_atributo1( clave = 'CORE_BODEF' campo = <listado>-parvw valor = '' valor2 = <listado>-vkorg ).
        IF NOT <listado>-backoffice_prop IS INITIAL.
          __poner_ceros <listado>-backoffice_prop.
          SELECT SINGLE name1 FROM lfa1
            INTO <listado>-backoffice_prop_nombre
           WHERE lifnr = <listado>-backoffice_prop.
          IF sy-subrc <> 0.
            IF <listado>-backoffice IS INITIAL.
              l_icono = icon_red_light.
              <listado>-message = condense( |No existe el nº de proveedor { <listado>-backoffice_prop }asociado a la organización de ventas { <listado>-vkorg }| ).
            ENDIF.
          ELSE.
            IF <listado>-message IS INITIAL.
              <listado>-message = condense( |{ <listado>-vtext } { <listado>-backoffice_prop ALPHA = OUT } propuesto por organización de ventas { <listado>-vkorg }| ).
            ENDIF.

          ENDIF.
        ENDIF.
      ENDIF.
      IF NOT <listado>-backoffice_prop IS INITIAL.
        IF <listado>-backoffice IS INITIAL.
          <listado>-check = p_ejec.
          <listado>-comp = icon_create.
        ELSEIF <listado>-backoffice = <listado>-backoffice_prop.
          <listado>-comp = icon_equal_green.
        ELSE.
          <listado>-comp = icon_not_equal_red.
        ENDIF.
      ENDIF.


      set_status_list( EXPORTING message = <listado>-message icono = l_icono CHANGING list = <listado> ).
    ENDLOOP.

  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Asignar interlocutor'  icon = icon_execute_object ucomm = 'EJEC' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page(  ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK' ).
    o_alv->set_field_text(  campo = 'BACKOFFICE' valor = 'Interlocutor' valor2 = 'Interlocutor actual' ).
    o_alv->set_field_text(  campo = 'BACKOFFICE_NOMBRE' valor = 'Nombre interlocutor' valor2 = 'Nombre interlocutor actual' ).

    o_alv->set_field_text(  campo = 'BACKOFFICE_PROP' valor = 'I.Prop' valor2 = 'Interlocutor propuesto' ).
    o_alv->set_field_text(  campo = 'BACKOFFICE_PROP_NOMBRE' valor = 'I.Prop.Nombre' valor2 = 'Nombre interlocutor propuesto' ).
    o_alv->set_field_text(  campo = 'COMP' valor = 'Comp.' ).

    o_alv->set_orden( 'KUNNR,KUNNR_NOMBRE,VKORG,VTWEG,SPART,PARVW,VTEXT,BACKOFFICE' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.

  METHOD crear_interlocutor.
    DATA: yknvp  TYPE TABLE OF fknvp,
          xknvp  TYPE TABLE OF fknvp,
          l_knvp TYPE fknvp.

    IF list-backoffice_prop IS INITIAL.
      list-message = |No hay ningún { list-vtext } propuesto|.
      list-lights  = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
      RETURN.
    ENDIF.

    SELECT * FROM knvp                        "#EC CI_ALL_FIELDS_NEEDED
      INTO CORRESPONDING FIELDS OF TABLE yknvp
     WHERE kunnr = list-kunnr
       AND vkorg = list-vkorg
       AND vtweg = list-vtweg
       AND spart = list-spart
       AND parvw = list-parvw.

    IF line_exists( yknvp[ lifnr = list-backoffice_prop ] ).
      list-message = |Cliente ya contiene el { list-vtext } propuesto|.
      list-lights  = zcl_ap_alv=>set_icono( icono = icon_led_green mensaje = list-message ).
      RETURN.
    ENDIF.

    IF line_exists( yknvp[ parvw = list-parvw ] ).
      IF p_ejec = 'X'.
        list-message = |Cliente ya contiene otro { list-vtext }|.
        list-lights  = zcl_ap_alv=>set_icono( icono = icon_warning mensaje = list-message ).
        RETURN.
      ELSE.
        DATA(l_upd) = 'X'.
        UPDATE knvp
           SET lifnr = @list-backoffice_prop
         WHERE kunnr = @list-kunnr
           AND vkorg = @list-vkorg
           AND vtweg = @list-vtweg
           AND spart = @list-spart
           AND parvw = @list-parvw
           AND lifnr = @list-backoffice.

*        l_knvp = yknvp[ parvw = list-parvw
*                        lifnr = list-backoffice ].
*        l_knvp-kz = 'D'.

*        DELETE yknvp WHERE parvw = list-parvw AND lifnr = list-backoffice.


*        SELECT MAX( parza ) FROM knvp
*          INTO @DATA(l_parza)
*         WHERE kunnr = @list-kunnr
*           AND vkorg = @list-vkorg
*           AND vtweg = @list-vtweg
*           AND spart = @list-spart
*           AND parvw = @list-parvw.
*        ADD 1 TO l_parza.
      ENDIF.
    ENDIF.


    xknvp[] = VALUE #( ( kunnr = list-kunnr
                         vkorg = list-vkorg
                         vtweg = list-vtweg
                         spart = list-spart
                         parvw = list-parvw
                         lifnr = list-backoffice_prop
*                         parza = l_parza
                         kz = 'I' ) ).

    APPEND LINES OF yknvp TO xknvp.


*
    SELECT SINGLE * FROM kna1                               "#EC *
      INTO @DATA(l_kna1)
     WHERE kunnr = @list-kunnr.
*
    SELECT SINGLE * FROM knvv                               "#EC *
      INTO @DATA(l_knvv)
     WHERE kunnr = @list-kunnr
       AND vkorg = @list-vkorg
       AND vtweg = @list-vtweg
       AND spart = @list-spart.

    IF l_upd IS INITIAL.
      CALL FUNCTION 'SD_CUSTOMER_MAINTAIN_ALL'
        EXPORTING
          i_kna1                  = l_kna1
          i_knvv                  = l_knvv
          pi_postflag             = 'X'
        TABLES
          t_xknvp                 = xknvp
          t_yknvp                 = yknvp
        EXCEPTIONS
          client_error            = 1
          kna1_incomplete         = 2
          knb1_incomplete         = 3
          knb5_incomplete         = 4
          knvv_incomplete         = 5
          kunnr_not_unique        = 6
          sales_area_not_unique   = 7
          sales_area_not_valid    = 8
          insert_update_conflict  = 9
          number_assignment_error = 10
          number_not_in_range     = 11
          number_range_not_extern = 12
          number_range_not_intern = 13
          account_group_not_valid = 14
          parnr_invalid           = 15
          bank_address_invalid    = 16
          tax_data_not_valid      = 17
          no_authority            = 18
          company_code_not_unique = 19
          dunning_data_not_valid  = 20
          knb1_reference_invalid  = 21
          cam_error               = 22
          OTHERS                  = 23.
    ENDIF.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO list-message.
      list-lights = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
      IF sy-batch = 'X'.
        zcl_ap_exits=>log_st( exit = 'CLIENTE_CREAR_BACKOFFICE' clave = list-kunnr p1 = list-message msgty = 'E' ).
        MESSAGE list-message TYPE 'S'.
      ENDIF.
    ELSE.
      COMMIT WORK AND WAIT.
      SELECT lifnr
        FROM knvp
        INTO @list-backoffice
        UP TO 1 ROWS
        WHERE kunnr = @list-kunnr
          AND vkorg = @list-vkorg
          AND vtweg = @list-vtweg
          AND spart = @list-spart
          AND parvw = @list-parvw
          AND lifnr = @list-backoffice_prop
        ORDER BY PRIMARY KEY.
      ENDSELECT.
      IF sy-subrc = 0.
        CLEAR list-message.
        list-lights            = zcl_ap_alv=>set_icono( icono = icon_okay mensaje = list-message ).
        list-backoffice_nombre = get( tabla = 'LFA1' clave = list-backoffice ).
        IF sy-batch = 'X'.
          zcl_ap_exits=>log_st( exit = 'CLIENTE_CREAR_BACKOFFICE' clave = list-kunnr p1 = 'Se ha asignado el backoffice' p2 =  list-backoffice_prop msgty = 'S' ).
          MESSAGE |Se ha asignado el { list-vtext } { list-backoffice_prop } al cliente { list-kunnr }| TYPE 'S'.
        ENDIF.
      ELSE.
        ROLLBACK WORK.
        list-message = |No se ha podido asociar el { list-vtext } al cliente|.
        list-lights  = zcl_ap_alv=>set_icono( icono = icon_red_light mensaje = list-message ).
        IF sy-batch = 'X'.
          zcl_ap_exits=>log_st( exit = 'CLIENTE_CREAR_BACKOFFICE' clave = list-kunnr p1 = list-message msgty = 'E' ).
          MESSAGE list-message TYPE 'S'.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Interlocutores por defecto' '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         o_dev              = o_prog ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  DATA(r_vkorg) = NEW zcl_ap_parametros( clave = 'CORE_BODEF' )->get_rango_tabla_campo( campo = '' campo_rango = 'VALOR' ).
  IF NOT r_vkorg IS INITIAL.
    MOVE-CORRESPONDING r_vkorg TO s_vkorg[].
  ENDIF.
  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN OUTPUT.




AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'M01'.
      zcl_ap_parametros=>mantenimiento_st( clave = 'CORE_BODEF' ).
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).

FORM get_backoffice USING pe_parvw TYPE knvp-parvw
                          pe_ernam TYPE knvv-ernam
                          pe_vkorg TYPE knvv-vkorg
                 CHANGING ps_backoffice TYPE lifnr
                          ps_backoffice_nombre TYPE lfa1-name1
                          ps_message TYPE bapi_msg.

  CLEAR: ps_backoffice, ps_backoffice_nombre, ps_message.
  ps_backoffice = zcl_ap_parametros=>get_atributo1( clave = 'CORE_BODEF' campo = pe_parvw valor = pe_ernam ).
  IF NOT ps_backoffice IS INITIAL.
    __poner_ceros ps_backoffice.
    SELECT SINGLE name1 FROM lfa1
      INTO ps_backoffice_nombre
     WHERE lifnr = ps_backoffice.
    IF sy-subrc <> 0.
      ps_message = |No existe el nº de proveedor { ps_backoffice } asociado al usuario { pe_ernam }|.
      CLEAR ps_backoffice.
    ENDIF.
    RETURN.
  ELSE.
    ps_backoffice = zcl_ap_parametros=>get_atributo1( clave = 'CORE_BODEF' campo = pe_parvw valor = '' valor2 = pe_vkorg ).
    IF NOT ps_backoffice IS INITIAL.
      __poner_ceros ps_backoffice.
      SELECT SINGLE name1 FROM lfa1
        INTO ps_backoffice_nombre
       WHERE lifnr = ps_backoffice.
      IF sy-subrc <> 0.
        ps_message = |No existe el nº de proveedor { ps_backoffice } asociado a la organización de ventas { pe_vkorg }|.
        CLEAR ps_backoffice.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.
