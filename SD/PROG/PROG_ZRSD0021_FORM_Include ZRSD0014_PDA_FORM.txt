*&---------------------------------------------------------------------*
*&  Include           ZRSD0021_FORM
*&---------------------------------------------------------------------
************************************************************************
* ZPICKPAP v2.0
************************************************************************

FORM preparar_alv_102.
  DATA      l_txt(40) TYPE c.

  CALL METHOD zclpp_app_logistica=>get_seleccion_entregas
    EXPORTING
      i_werks     = g_werks
      i_cliente   = gs_dyn101-kunnr
*     i_entrega   =
    IMPORTING
      ot_entregas = gs_dyn102-t_entregas
      o_rc        = g_rc.
  IF g_rc <> '00'.
    MESSAGE |Cliente { gs_dyn101-kunnr } sin entregas.| TYPE 'I' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.


* Algoritmo para obtener el nº máximo de páginas.

  DATA(l_lineas) = lines( gs_dyn102-t_entregas[] ).
  DATA(l_mod)    = l_lineas MOD 3.

  DATA(l_paginas) = CONV bseg-dmbtr( l_lineas / 3 ).
  gs_dyn102-tot_pag_dec = trunc( l_paginas )."Mover parte entera

  IF l_mod > 0.
    gs_dyn102-tot_pag_dec = gs_dyn102-tot_pag_dec + 1.
  ENDIF.

  gs_dyn102-num_pag = 1.
  gs_dyn102-tot_pag = gs_dyn102-tot_pag_dec.

ENDFORM.

FORM preparar_alv_141.

  DATA(l_lin)        = lines( gs_dyn141-t_lotes_stock ).
  DATA(l_mod_141)    = l_lin MOD 10.

  DATA(l_num_pag) = CONV bseg-dmbtr( l_lin / 10 ).
  gs_dyn141-tot_pag_dec = trunc( l_num_pag ).

  IF l_mod_141 > 0.
    gs_dyn141-tot_pag_dec = gs_dyn141-tot_pag_dec + 1.
  ENDIF.

  gs_dyn141-num_pag = 1.
  gs_dyn141-tot_pag = gs_dyn141-tot_pag_dec.

ENDFORM.

FORM enqueue_vbeln_vl USING p_vbeln TYPE vbeln_vl
                      CHANGING p_rc TYPE char02.
  DATA: l_vbeln_in TYPE vbeln.

  l_vbeln_in = |{ p_vbeln ALPHA = IN }|.
  p_rc = '00'.

  CALL FUNCTION 'ENQUEUE_EVVBLKE'
    EXPORTING
*     MODE_LIKP      = 'E'
*     MANDT          = SY-MANDT
      vbeln          = l_vbeln_in
*     X_VBELN        = ' '
*     _SCOPE         = '2'
*     _WAIT          = ' '
*     _COLLECT       = ' '
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
    p_rc = '01'.
  ENDIF.


ENDFORM.

FORM dequeue_vbeln_vl USING p_vbeln TYPE vbeln_vl
                      CHANGING p_rc TYPE char02.
  DATA: l_vbeln_in TYPE vbeln.

  l_vbeln_in = |{ p_vbeln ALPHA = IN }|.
  p_rc = '00'.

  CALL FUNCTION 'DEQUEUE_EVVBLKE'
    EXPORTING
*     MODE_LIKP       = 'E'
*     MANDT = SY-MANDT
      vbeln = l_vbeln_in
*     X_VBELN         = ' '
*     _SCOPE          = '3'
*     _SYNCHRON       = ' '
*     _COLLECT        = ' '
    .
  IF sy-subrc <> 0.
    p_rc = '01'.
  ENDIF.


ENDFORM.

FORM pbo_102.

  CLEAR gs_dyn102-okcode.

  gs_dyn102-titulo = |SELECCIONAR ENTREGA ({ gs_dyn102-num_pag }/{ gs_dyn102-tot_pag })|.
  DATA(l_idx) = ( ( gs_dyn102-num_pag - 1 ) * 3 ) + 1.

* Actualizamos los datos de entregas para que, al ir hacia atrás,
* siempre se actualicen los datos
  IF gs_dyn111-okcode EQ 'BACK'.
    CLEAR: gs_dyn102-t_entregas[].

    CALL METHOD zclpp_app_logistica=>get_seleccion_entregas
      EXPORTING
        i_werks     = g_werks
        i_cliente   = gs_dyn101-kunnr
*       i_entrega   =
      IMPORTING
        ot_entregas = gs_dyn102-t_entregas
        o_rc        = g_rc.
    IF g_rc <> '00'.
      MESSAGE |Cliente { gs_dyn101-kunnr } sin entregas.| TYPE 'I' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
  ENDIF.

  TRY.
      CLEAR: gs_dyn102-vbeln_1      ,
             gs_dyn102-estado_1     ,
             gs_dyn102-tp_stock_1   ,
             gs_dyn102-cant_pick_1  ,
             gs_dyn102-cant_entre_1 .

      DATA(ls_entrega)          = gs_dyn102-t_entregas[ l_idx ].
      gs_dyn102-vbeln_1         = |{ ls_entrega-vbeln ALPHA = OUT }|.
      gs_dyn102-estado_1        = ls_entrega-estado.
      gs_dyn102-tp_stock_1      = ls_entrega-tp_stock.
      gs_dyn102-cant_pick_1     = ls_entrega-cant_pick.
      gs_dyn102-cant_entre_1    = ls_entrega-cant_entre.
    CATCH cx_root .
  ENDTRY.


  TRY.
      CLEAR: gs_dyn102-vbeln_2      ,
             gs_dyn102-estado_2     ,
             gs_dyn102-tp_stock_2   ,
             gs_dyn102-cant_pick_2  ,
             gs_dyn102-cant_entre_2 .

      l_idx                     = l_idx + 1.
      ls_entrega                = gs_dyn102-t_entregas[ l_idx ].
      gs_dyn102-vbeln_2         = |{ ls_entrega-vbeln ALPHA = OUT }|.
      gs_dyn102-tp_stock_2         = ls_entrega-tp_stock.
      gs_dyn102-estado_2        = ls_entrega-estado.
      gs_dyn102-cant_pick_2     = ls_entrega-cant_pick.
      gs_dyn102-cant_entre_2    = ls_entrega-cant_entre.
    CATCH cx_root .
  ENDTRY.


  TRY.

      CLEAR: gs_dyn102-vbeln_3      ,
             gs_dyn102-estado_3     ,
             gs_dyn102-tp_stock_3   ,
             gs_dyn102-cant_pick_3  ,
             gs_dyn102-cant_entre_3 .

      l_idx                    = l_idx + 1.
      ls_entrega               = gs_dyn102-t_entregas[ l_idx ].
      gs_dyn102-vbeln_3        = |{ ls_entrega-vbeln ALPHA = OUT }|.
      gs_dyn102-tp_stock_3     = ls_entrega-tp_stock.
      gs_dyn102-estado_3       = ls_entrega-estado.
      gs_dyn102-cant_pick_3    = ls_entrega-cant_pick.
      gs_dyn102-cant_entre_3   = ls_entrega-cant_entre.
    CATCH cx_root .
  ENDTRY.


ENDFORM.

FORM tratar_seleccion_datos_102. " USING p_idx.

  CLEAR gs_dyn104.
  CASE 'X'.
    WHEN gs_dyn102-btn1. gs_dyn104-vbeln = gs_dyn102-vbeln_1.
    WHEN gs_dyn102-btn2. gs_dyn104-vbeln = gs_dyn102-vbeln_2.
    WHEN gs_dyn102-btn3. gs_dyn104-vbeln = gs_dyn102-vbeln_3.
    WHEN OTHERS.
  ENDCASE.

  TRY.
      gs_dyn104-vbeln = |{ gs_dyn104-vbeln ALPHA = IN }|.
      DATA(ls_reg) = gs_dyn102-t_entregas[ vbeln = gs_dyn104-vbeln ].
      gs_dyn104 = CORRESPONDING #( ls_reg ).
      gs_dyn104-kunnr = |{ gs_dyn104-kunnr ALPHA = OUT }|.
      gs_dyn104-vbeln = |{ gs_dyn104-vbeln ALPHA = IN }|.
      SET SCREEN 104.

    CATCH cx_root .
      MESSAGE |Registro no encontrado.| TYPE 'I' DISPLAY LIKE 'E'.
  ENDTRY.

ENDFORM.

FORM tratar_seleccion_111.
  DATA: l_posnr TYPE posnr.

  CASE 'X'.
    WHEN gs_dyn111-btn1. l_posnr = gs_dyn111-posnr_1.
    WHEN gs_dyn111-btn2. l_posnr = gs_dyn111-posnr_2.
    WHEN gs_dyn111-btn3. l_posnr = gs_dyn111-posnr_3.
    WHEN gs_dyn111-btn4. l_posnr = gs_dyn111-posnr_4.
    WHEN OTHERS.
      RETURN.
  ENDCASE.

  ASSIGN gs_dyn111-t_posiciones[ posnr = l_posnr ] TO <fs_reg_sel_111>.
  IF sy-subrc = 0.

    gs_dyn121 = CORRESPONDING #( <fs_reg_sel_111> ).
    gs_dyn121-cant_entrega = <fs_reg_sel_111>-lfimg.
    gs_dyn121-cant_picking = <fs_reg_sel_111>-cant_pick.

* DTM - Se obtiene la cantidad total a entregar y
*       la cantidad total de picking de la entrega
    SELECT SINGLE btgew FROM likp
      WHERE vbeln EQ @<fs_reg_sel_111>-vbeln
    INTO @gs_dyn121-tot_entrega.

    SELECT SUM( kcmeng ) FROM lips
      WHERE vbeln EQ @<fs_reg_sel_111>-vbeln
        AND posnr NOT LIKE '9%'
    INTO @gs_dyn121-tot_picking.
* DTM

    SET SCREEN 121.

  ELSE.
    MESSAGE |Registro no encontrado.| TYPE 'I' DISPLAY LIKE 'E'.
  ENDIF.

ENDFORM.
FORM gestionar_consulta_picking.

  CALL METHOD zclpp_app_logistica=>consultar_picking_pos_entrega
    EXPORTING
      i_vbeln          = gs_dyn121-vbeln
      i_posnr          = gs_dyn121-posnr
    IMPORTING
      ot_lotes_picking = gs_dyn131-t_lotes_pick.

*      CALL METHOD zclpp_app_logistica=>get_posiciones_entrega
*        EXPORTING
*          i_vbeln        = gs_dyn104-vbeln
*        IMPORTING
*          ot_pos_entrega = gs_dyn111-t_posiciones
*          o_rc           = DATA(l_rc).
  IF gs_dyn131-t_lotes_pick IS INITIAL.
    CASE sy-dynnr.
      WHEN 0133 OR 0134. "DTM
        LEAVE TO SCREEN 0121.
      WHEN 0121.
        MESSAGE |No se han encontrado lotes.| TYPE 'I' DISPLAY LIKE 'E'.
        RETURN.
      WHEN OTHERS.
    ENDCASE.

  ENDIF.

* Algoritmo para obtener el nº máximo de páginas.
  DATA(l_lineas) = lines( gs_dyn131-t_lotes_pick[] ).
  DATA(l_mod)    = l_lineas MOD 6.
  DATA(l_paginas) = CONV bseg-dmbtr( l_lineas / 6 ).
  gs_dyn131-tot_pag_dec = trunc( l_paginas ). "Mover parte entera

  IF l_mod > 0.
    gs_dyn131-tot_pag_dec = gs_dyn131-tot_pag_dec + 1.
  ENDIF.

  gs_dyn131-tot_pag     = gs_dyn131-tot_pag_dec.
  gs_dyn131-num_pag = 1.

  SET SCREEN 131.


ENDFORM.

FORM paginar_bob_stock_131.

  FIELD-SYMBOLS: <fs_campo> TYPE data.
  FIELD-SYMBOLS: <fs_charg> TYPE data.
  FIELD-SYMBOLS: <fs_canti> TYPE data.
  DATA: l_idx_campo TYPE numc2,
        l_seguir    TYPE flag.

* Activar primer radiobutton.
  CLEAR:   gs_dyn131-btn01 ,
           gs_dyn131-btn02,
           gs_dyn131-btn03,
           gs_dyn131-btn04,
           gs_dyn131-btn05,
           gs_dyn131-btn06,
           gs_dyn131-btn07,
           gs_dyn131-btn08,
           gs_dyn131-btn09,
           gs_dyn131-btn10.

  DATA(l_idx_ini_tabla) = 1 + ( ( gs_dyn131-num_pag - 1 ) * 6 ).

  l_idx_campo = 1.

* Volcar datos de la tabla a los 10 campos de pantalla.
  DO 06 TIMES.

    TRY.
        DATA(ls_bob) = gs_dyn131-t_lotes_pick[ l_idx_ini_tabla ].
      CATCH cx_root .
        EXIT.
    ENDTRY.

    DATA(nom_camp)   = |GS_DYN131-BTN{ l_idx_campo }|.
    DATA(camp_charg) = |GS_DYN131-CHARG{ l_idx_campo }|.
    DATA(camp_canti) = |GS_DYN131-CANTI{ l_idx_campo }|.
    ASSIGN (nom_camp)   TO <fs_campo>.

    ASSIGN (nom_camp)   TO <fs_campo>.
    ASSIGN (camp_charg) TO <fs_charg>.
    ASSIGN (camp_canti) TO <fs_canti>.


    <fs_campo> = |{ ls_bob-charg } / { ls_bob-cant_pick } KG|.
    <fs_charg> = ls_bob-charg.
    <fs_canti> = ls_bob-cant_pick.

    ADD 1 TO: l_idx_campo    ,
              l_idx_ini_tabla.
  ENDDO.

ENDFORM.

FORM paginar_bob_stock_141.

  FIELD-SYMBOLS: <fs_campo> TYPE data.
  DATA: l_idx_campo TYPE numc2,
        l_seguir    TYPE flag.

* Activar primer radiobutton.
  CLEAR:  gs_dyn141-linea01,
          gs_dyn141-linea02,
          gs_dyn141-linea03,
          gs_dyn141-linea04,
          gs_dyn141-linea05,
          gs_dyn141-linea06,
          gs_dyn141-linea07,
          gs_dyn141-linea08,
          gs_dyn141-linea09,
          gs_dyn141-linea10.

  DATA(l_idx_ini_tabla) = 1 + ( ( gs_dyn141-num_pag - 1 ) * 10 ).

  l_idx_campo = 1.

* Volcar datos de la tabla a los 10 campos de pantalla.
  DO 10 TIMES.

    TRY.
        DATA(ls_bob) = gs_dyn141-t_lotes_stock[ l_idx_ini_tabla ].
      CATCH cx_root .
        EXIT.
    ENDTRY.

    DATA(nom_camp)   = |GS_DYN141-LINEA{ l_idx_campo }|.
    ASSIGN (nom_camp) TO <fs_campo>.

    <fs_campo> = |{ ls_bob-charg } / { ls_bob-cant_pick } KG / { ls_bob-ubicacion ALPHA = OUT }|.

    ADD 1 TO: l_idx_campo    ,
              l_idx_ini_tabla.
  ENDDO.
ENDFORM.

FORM confirmar_borrado_f8_132.
  FIELD-SYMBOLS: <fs_camp> TYPE any.

  DATA(l_idx_131)  = ( ( gs_dyn131-num_pag - 1 ) * 6 ).

*  CASE 'X'.
*    WHEN gs_dyn131-btn01. DATA(l_idx_tab) = 1.
*    WHEN gs_dyn131-btn02. l_idx_tab       = 2.
*    WHEN gs_dyn131-btn03. l_idx_tab       = 3.
*    WHEN gs_dyn131-btn04. l_idx_tab       = 4.
*    WHEN gs_dyn131-btn05. l_idx_tab       = 5.
*    WHEN gs_dyn131-btn06. l_idx_tab       = 6.
*    WHEN gs_dyn131-btn07. l_idx_tab       = 7.
*    WHEN gs_dyn131-btn08. l_idx_tab       = 8.
*    WHEN gs_dyn131-btn09. l_idx_tab       = 9.
*    WHEN gs_dyn131-btn10. l_idx_tab       = 10.
*  ENDCASE.


  CASE gs_dyn131-okcode.
    WHEN 'BTN01'. DATA(l_idx_tab) = 1.
    WHEN 'BTN02'. l_idx_tab       = 2.
    WHEN 'BTN03'. l_idx_tab       = 3.
    WHEN 'BTN04'. l_idx_tab       = 4.
    WHEN 'BTN05'. l_idx_tab       = 5.
    WHEN 'BTN06'. l_idx_tab       = 6.
    WHEN 'BTN07'. l_idx_tab       = 7.
    WHEN 'BTN08'. l_idx_tab       = 8.
    WHEN 'BTN09'. l_idx_tab       = 9.
    WHEN 'BTN10'. l_idx_tab       = 10.
  ENDCASE.
*gs_dyn131-okcode

  l_idx_131 = l_idx_131 + l_idx_tab.

* Obtener datos para datos de detalle de lote.
  CLEAR gs_dyn132.
  TRY.

      DATA(ls_datos_bob) = gs_dyn131-t_lotes_pick[ l_idx_131 ].

      gs_dyn132-matnr     = |{ gs_dyn121-matnr ALPHA = OUT }|.
      gs_dyn132-maktx     = gs_dyn121-maktx.
      gs_dyn132-charg     = ls_datos_bob-charg.
      gs_dyn132-peso      = ls_datos_bob-cant_pick.

      CALL METHOD zcl_utils_hpap_pp=>get_caracteristicas_lote
        EXPORTING
          i_matnr    = gs_dyn121-matnr
          i_charg    = ls_datos_bob-charg
          i_tp_lote  = 'B'
        IMPORTING
*         o_de       =
          o_de_char1 = gs_dyn132-de
          o_kunnr    = gs_dyn132-kunnr
*         o_fecha_fabric  =
*         o_vbeln    =
*         o_posnr    =
*         o_ubicacion     =
*         o_reproceso     =
*         o_motivo_reproc =
          o_rc       = DATA(l_rc).

      CALL METHOD zcl_utils_hpap_pp=>get_datos_material
        EXPORTING
          i_matnr   = gs_dyn121-matnr
        IMPORTING
          e_ancho   = gs_dyn132-ancho
          e_gramaje = gs_dyn132-gramaje
          e_calidad = gs_dyn132-calidad.

      SET SCREEN 0132.

    CATCH cx_root .
  ENDTRY.

ENDFORM.



FORM tratar_borrado_f8_133.

  CALL METHOD zclpp_app_logistica=>quitar_bobina_a_entrega
    EXPORTING
      i_vbeln = |{ gs_dyn133-vbeln ALPHA = IN }|
      i_posnr = gs_dyn133-posnr
      i_charg = gs_dyn133-charg
      i_brgew = gs_dyn133-cant_pick
    IMPORTING
      o_rc    = DATA(l_rc).

  IF l_rc = '00'. " Actualizar kg picking de las 2 pantallas: 121-lectura codbar y 111-selec.pos.entrega
    gs_dyn121-cant_picking     = gs_dyn121-cant_picking - gs_dyn133-cant_pick.

* DTM - Se obtiene la cantidad total a entregar y
*       la cantidad total de picking de la entrega
    SELECT SINGLE btgew FROM likp
      WHERE vbeln EQ @gs_dyn133-vbeln
    INTO @gs_dyn121-tot_entrega.

    SELECT SUM( kcmeng ) FROM lips
      WHERE vbeln EQ @gs_dyn133-vbeln
        AND posnr NOT LIKE '9%'
    INTO @gs_dyn121-tot_picking.
* DTM

    <fs_reg_sel_111>-cant_pick = gs_dyn121-cant_picking.
    MESSAGE |Lote { gs_dyn133-charg } borrado de la entrega ok.| TYPE 'S'.

    PERFORM gestionar_consulta_picking.

  ENDIF.

ENDFORM.

FORM tratar_borrado_f8_134.

  CALL METHOD zclpp_app_logistica=>quitar_bobinas_a_entregar
    EXPORTING
      i_vbeln = |{ gs_dyn134-vbeln ALPHA = IN }|
      i_posnr = gs_dyn134-posnr
      i_charg = gs_dyn134-charg
      i_brgew = gs_dyn134-cant_pick
    IMPORTING
      o_rc    = DATA(lv_rc).

  IF lv_rc = '00'. " Actualizar kg picking de las 2 pantallas: 121-lectura codbar y 111-selec.pos.entrega
    CLEAR: gs_dyn121-cant_picking.

* Se obtiene la cantidad total a entregar y
* la cantidad total de picking de la entrega
    SELECT SINGLE btgew FROM likp
      WHERE vbeln EQ @gs_dyn134-vbeln
    INTO @gs_dyn121-tot_entrega.

    SELECT SUM( kcmeng ) FROM lips
      WHERE vbeln EQ @gs_dyn134-vbeln
        AND posnr NOT LIKE '9%'
    INTO @gs_dyn121-tot_picking.

    <fs_reg_sel_111>-cant_pick = gs_dyn121-cant_picking.
    MESSAGE |Picking borrado ok.| TYPE 'S'.

    PERFORM gestionar_consulta_picking.

  ENDIF.

ENDFORM.
