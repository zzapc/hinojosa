*&---------------------------------------------------------------------*
*&  Include           ZSSDD005_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  INICIALIZAR
*&---------------------------------------------------------------------*
FORM inicializar .

  REFRESH: gt_datos,gt_datos_aux.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
FORM obtener_datos .
* Tengo stock libre de cliente >> 0
* Miro el status de pedido GBSTA de la posicion si este es C y
* WBSTK es C de las entregas del pedido ==> Libero el stock
  DATA: l_data TYPE zssds005a.
  CLEAR gt_datos[].
* Sacar todos los pedidos asignados que se han completado ( ctd pedido = ctd entrega o falta de suministro hace entender al sitema que la entrega está concluida )
*  o tienen motivio de rechazo
  SELECT a~matnr, a~werks, b~vbeln,b~posnr,d~gbstk,e~gbsta,a~kalab, b~vrkme,a~charg, a~lgort, b~abgru, b~kwmeng, c~augru
    INTO TABLE @DATA(t_matnr)
    FROM mska AS a
      INNER JOIN vbap AS b ON a~vbeln = b~vbeln AND a~matnr = b~matnr
      INNER JOIN vbak AS c ON a~vbeln = c~vbeln
      INNER JOIN vbuk AS d ON c~vbeln = d~vbeln
      INNER JOIN vbup AS e ON c~vbeln = e~vbeln
                          AND b~posnr = e~posnr
    WHERE a~werks IN @s_werks
      AND c~vkorg IN @s_vkorg
      AND c~vtweg IN @s_vtweg
      AND b~abgru IN @s_abgru
      AND c~spart IN @s_spart
      AND c~auart IN @s_auart
      AND c~vbeln IN @s_vbeln
      AND b~matnr IN @s_matnr
      AND b~charg IN @s_charg
      AND e~gbsta IN @s_gbsta
      AND d~gbstk IN @s_gbstk
      AND a~sobkz = @c_e       " solo pedidos de MTO
      AND (  b~abgru <> @space OR d~gbstk = 'C' ) "  motivo de rechazo o ctd pedido = ctd entrega
      AND a~kalab > 0. " stock libre asignado al pedidos es <> 0

*  IF t_matnr IS NOT INITIAL.
**   Por aqui solo pasan aquellos que tienenen ABGRU <> SPACE y la cantidad de pedido > cantidad de entrega
*    SELECT a~vgbel AS vbeln, a~vgpos AS posnr, a~vbeln AS vbeln_vl, a~posnr AS posnr_vl, lfimg, vrkme, kcmeng, meins
*      INTO TABLE @DATA(t_lips)
*      FROM lips AS a
*      INNER JOIN vbup AS b ON a~vbeln = b~vbeln AND a~posnr = b~posnr
*      FOR ALL ENTRIES IN @t_matnr
*      WHERE a~vgbel = @t_matnr-vbeln
*        AND a~vgpos = @t_matnr-posnr
*        AND b~gbsta <> 'C'.
*
*  ENDIF.


  LOOP AT t_matnr INTO DATA(l_matnr).

    CLEAR: l_data.
*    IF l_matnr-gbstk eq 'C'.
**   hay que liberar todo el stock asociado al pedido, por haber expedido la totalidad del pedido
*
*    elseif l_matnr-gbstk <> 'C'.
*     En LFIMG = MSKA-KALAB. Si no está cerrado el pedido. quitamos de ese stock
*    DATA lfimg_total TYPE lips-lfimg.
*    CLEAR lfimg_total.
*    LOOP AT t_lips INTO DATA(l_lips) WHERE vbeln = l_matnr-vbeln
*                                       AND posnr = l_matnr-posnr.
*
*      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
*        EXPORTING
*          i_matnr              = l_matnr-matnr
*          i_in_me              = l_lips-vrkme
*          i_out_me             = l_matnr-vrkme
*          i_menge              = l_lips-lfimg
*        IMPORTING
*          e_menge              = l_lips-lfimg
*        EXCEPTIONS
*          error_in_application = 1
*          error                = 2
*          OTHERS               = 3.
*
*
*      IF l_matnr-gbstk NE 'C' AND sy-subrc EQ 0.
*        l_matnr-kalab =   l_matnr-kalab - l_lips-lfimg.
**          l_matnr-lfimg =   l_matnr-lfimg - l_lips-lfimg.
*      ELSEIF sy-subrc NE 0.
*        CLEAR l_lips-lfimg.
*      ENDIF.
*      ADD l_lips-lfimg TO lfimg_total.
*      add l_lips-kcmeng to lfimg_total.
*    ENDLOOP.

*    ENDIF.

    l_data = CORRESPONDING #( l_matnr MAPPING meins = vrkme ).
*   add jtm 13.11.2022
    DATA lfimg_total TYPE lips-lfimg.
    CLEAR lfimg_total.
    SELECT * INTO TABLE @DATA(tt_vbfa) FROM vbfa WHERE vbelv EQ @l_matnr-vbeln
                                                   AND posnv EQ @l_matnr-posnr
                                                   AND vbtyp_n EQ 'J'
                                                   AND vbtyp_v EQ 'C'.
    IF sy-subrc EQ 0.
      SELECT * INTO TABLE @DATA(tt_lips) FROM lips FOR ALL ENTRIES IN @tt_vbfa
                                                   WHERE vbeln EQ @tt_vbfa-vbeln
                                                     AND posnr EQ @tt_vbfa-posnn.
      LOOP AT tt_lips INTO DATA(rt_lips) WHERE vgbel EQ l_matnr-vbeln
                                           AND vgpos EQ l_matnr-posnr.
        ADD rt_lips-lfimg TO lfimg_total.
        ADD rt_lips-kcmeng TO lfimg_total.
        DATA: wadat     TYPE likp-wadat,
              wadat_ist TYPE likp-wadat.
        SELECT SINGLE wbstk INTO @DATA(wbstk) FROM vbuk WHERE vbeln EQ @rt_lips-vbeln.
        SELECT SINGLE wadat wadat_ist INTO (wadat, wadat_ist) FROM likp WHERE vbeln EQ rt_lips-vbeln.
*        Si solo hay una entrega, tomo el valor
        IF l_data-wbstk IS INITIAL AND l_data-vbeln_vl IS INITIAL.
          l_data-wbstk = wbstk.
          l_data-vbeln_vl = rt_lips-vbeln.
          IF wadat_ist IS NOT INITIAL.
            MOVE wadat_ist TO l_data-wadat.
          ELSE.
            MOVE wadat TO l_data-wadat.
          ENDIF.
*        Si hay más entregas me quedo con la de status menor
        ELSEIF wbstk NE 'C'.
          l_data-wbstk = wbstk.
          l_data-vbeln_vl = rt_lips-vbeln.
          IF wadat_ist IS NOT INITIAL.
            MOVE wadat_ist TO l_data-wadat.
          ELSE.
            MOVE wadat TO l_data-wadat.
          ENDIF.

        ENDIF.
      ENDLOOP.

    ENDIF.
*    LOOP AT t_lips INTO DATA(l_lips) WHERE vbeln = l_matnr-vbeln
*                                       AND posnr = l_matnr-posnr.
*
*      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
*        EXPORTING
*          i_matnr              = l_matnr-matnr
*          i_in_me              = l_lips-vrkme
*          i_out_me             = l_matnr-vrkme
*          i_menge              = l_lips-lfimg
*        IMPORTING
*          e_menge              = l_lips-lfimg
*        EXCEPTIONS
*          error_in_application = 1
*          error                = 2
*          OTHERS               = 3.
*
*
*      IF l_matnr-gbstk NE 'C' AND sy-subrc EQ 0.
*        l_matnr-kalab =   l_matnr-kalab - l_lips-lfimg.
**          l_matnr-lfimg =   l_matnr-lfimg - l_lips-lfimg.
*      ELSEIF sy-subrc NE 0.
*        CLEAR l_lips-lfimg.
*      ENDIF.
*      ADD l_lips-lfimg TO lfimg_total.
*      add l_lips-kcmeng to lfimg_total.
*    ENDLOOP.

    CLEAR l_data-ctdwm.
    SELECT SINGLE maktx INTO l_data-maktx FROM makt WHERE matnr EQ l_data-matnr
                                                      AND spras EQ sy-langu.
    l_data-lfimg = lfimg_total.
    SELECT SINGLE lgnum INTO @DATA(lgnum) FROM t320 WHERE werks EQ @l_data-werks
                                                      AND lgort EQ @l_data-lgort.

    IF l_data-abgru IS NOT INITIAL.
      SELECT SINGLE bezei INTO l_data-bezei FROM tvagt WHERE abgru EQ l_data-abgru
                                                         AND spras EQ sy-langu.
    ENDIF.
    IF l_data-augru IS NOT INITIAL.
      SELECT SINGLE bezei INTO l_data-bezei_augru  FROM tvaut WHERE augru EQ l_data-augru
                                                                AND spras EQ sy-langu.
    ENDIF.

    CLEAR l_data-tt_lenum[].
    IF sy-subrc EQ 0 AND lgnum IS NOT INITIAL.
      DATA sonum TYPE lqua-sonum.
      sonum+0(10) = l_data-vbeln.
      sonum+10(6) = l_data-posnr.
      DATA rt_lenum TYPE zswm_change_lenum_sonum_scr.

      SELECT * INTO TABLE @DATA(tt_lqua) FROM lqua WHERE lgnum EQ @lgnum
                                                     AND matnr EQ @l_data-matnr
                                                     AND charg EQ @l_data-charg
                                                     AND werks EQ @l_data-werks
                                                     AND lgort EQ @l_data-lgort
                                                     AND bestq EQ @space
                                                     AND sobkz EQ 'E'
                                                     AND sonum EQ @sonum
                                                     AND ( lgtyp EQ '200'
                                                        OR lgtyp EQ '201'
                                                        OR lgtyp EQ '120'
                                                        OR lgtyp EQ '230' )
                                                     AND verme > 0.

      l_data-n_mat = sy-dbcnt.
      LOOP AT tt_lqua INTO DATA(rt_lqua).
        ADD rt_lqua-verme TO l_data-ctdwm.
        CLEAR rt_lenum.
        rt_lenum-lenum = rt_lqua-lenum.
        APPEND rt_lenum TO l_data-tt_lenum.
      ENDLOOP.
    ENDIF.
*   add jtm 22.11.2022
*   En reunión todos el día 22.11.2022 se determino que solo expedimos los de status global C cuando las entregas no existen o se han expedido ya
*   Los de motivo de rechazo siempre
*   fin de add jtm 22.11.2022
    IF    l_data-n_mat > 0
    AND   ( ( l_data-gbstk EQ 'C' AND ( l_data-wbstk IS INITIAL OR l_data-wbstk EQ 'C' )  )
           OR l_data-abgru IS NOT INITIAL ).
      l_data-procesable = abap_true.
    ENDIF.
*   fin de add jtm 13.11.2022
    APPEND l_data TO gt_datos.
  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PROCESAR
*&---------------------------------------------------------------------*
FORM procesar .

  DATA: t_return     TYPE bapiret2_t,
        l_log        TYPE bal_s_log,
        l_handle     TYPE balloghndl,
        l_mess       TYPE bal_s_msg,
        ta_loghandle TYPE bal_t_logh,
        l_guid       TYPE guid16,
        extnum       TYPE balnrext.


  REFRESH: gt_return.

  IF gt_datos_aux IS INITIAL.

    gt_datos_aux = gt_datos.

  ENDIF.

  LOOP AT gt_datos_aux INTO DATA(l_datos) WHERE n_mat > 0
                                            AND procesable EQ abap_true.
    REFRESH: t_return.
*   cambiar jtm 13.11.2022
*    CALL FUNCTION 'ZSSD005_STOCK_CHANGE'
*      EXPORTING
*        i_matnr   = l_datos-matnr     " Número de material
*        i_charg   = l_datos-charg    " Número de lote
*        i_vbeln   = l_datos-vbeln    " Número de documento comercial
*        i_posnr   = l_datos-posnr    " Número de posición del documento comercial
*        i_lfimg   = l_datos-lfimg    " Cantidad entregada efectivamente en UMV
*        i_vrkme   = l_datos-meins    " Unidad de medida de venta
*        i_werks   = l_datos-werks
*        i_lgort   = l_datos-lgort
*      IMPORTING
*        et_return = t_return.    " Tabla retorno
    LOOP AT l_datos-tt_lenum INTO DATA(rt_lenum).
      DATA(sw_tabix) = sy-tabix.
      SELECT SINGLE * INTO @DATA(lein) FROM lein BYPASSING BUFFER WHERE lenum EQ @rt_lenum-lenum.
      IF sy-subrc NE 0
      OR NOT ( lein-lgtyp EQ '200'
            OR lein-lgtyp EQ '201'
            OR lein-lgtyp EQ '230'
            OR lein-lgtyp EQ '120' ).
        DELETE l_datos-tt_lenum INDEX sw_tabix.
        CONTINUE.
      ENDIF.
*     add jtm 22.11.2022
      SELECT * INTO TABLE @DATA(tt_lqua) FROM lqua WHERE lgnum EQ @lein-lgnum
                                                     AND lenum EQ @lein-lenum.
      IF sy-dbcnt > 1.
        DELETE l_datos-tt_lenum INDEX sw_tabix.
        CONTINUE.
      ENDIF.
*     fin de add jtm 22.11.2022
*         CALL FUNCTION 'ENQUEUE_EZSWMUA'
*         EXPORTING
**          MODE_LEIN            = 'E'
**          MANDT                = SY-MANDT
*           LENUM                = rT_lenum-lenum
**          X_LENUM              = ' '
**          _SCOPE               = '2'
**          _WAIT                = ' '
**          _COLLECT             = ' '
*        EXCEPTIONS
*          FOREIGN_LOCK         = 1
*          SYSTEM_FAILURE       = 2
*          OTHERS               = 3
*                 .
*       IF sy-subrc <> 0.
*          delete l_datos-tT_lenum index Sw_tabix.
*          CONTINUE.
*       ENDIF.

    ENDLOOP.
    DATA tt_log TYPE bapiret2_t.
    CLEAR tt_log[].
    IF l_datos-tt_lenum[] IS NOT INITIAL.
      DATA zssdd005_str TYPE zssdd005_str.
      zssdd005_str-vgbel = l_datos-vbeln.
      zssdd005_str-vgpos = l_datos-posnr.
      zssdd005_str-gbstk = l_datos-gbstk.
      zssdd005_str-gbsta = l_datos-gbsta.
      zssdd005_str-abgru = l_datos-abgru.
      CALL FUNCTION 'ZSWM_CHANGE_SONUM_LENUM'
        EXPORTING
          tt_lenum  = l_datos-tt_lenum
          reg_traza = zssdd005_str
*         vbeln     = l_datos-vbeln
*         posnr     = l_datos-posnr
*         WAIT      = 'X'
        IMPORTING
*         GM_HEADRET       =
*         ERROR     =
          tt_log    = tt_log.
*     loop at l_datos-tT_lenum into rT_lenum.
*        CALL FUNCTION 'DEQUEUE_EZSWMUA'
*          EXPORTING
**           MODE_LEIN       = 'E'
**           MANDT           = SY-MANDT
*            LENUM           = rT_lenum-lenum
**           X_LENUM         = ' '
**           _SCOPE          = '3'
**           _SYNCHRON       = ' '
**           _COLLECT        = ' '
*                  .
*
*     endloop.
    ENDIF.
    IF tt_log[] IS NOT INITIAL.
      APPEND LINES OF tt_log TO t_return.
    ENDIF.
*   fin de cambiar jtm 13.11.2022
    APPEND LINES OF t_return TO gt_return.
    CLEAR: extnum.

    extnum = l_datos-vbeln && l_datos-posnr && l_datos-matnr && l_datos-charg.

    CALL FUNCTION 'ZMFFI_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZSSD005'    " Log aplicación: Nombre objeto (sigla de aplicación)
        subobjeto = 'ZSSD005'    " Log aplicación: Objeto inferior
        mensajes  = t_return    " Lista mensaje
        extnumber = extnum.    " Log aplicación: Identificación externa



  ENDLOOP.

  PERFORM mostrar_log.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_ALV
*&---------------------------------------------------------------------*
FORM mostrar_alv .


  CALL SCREEN 0001.

ENDFORM.
*&--------------------------------------------------------------------
*&      Form  load_data_into_grid
*&--------------------------------------------------------------------
FORM load_data_into_grid TABLES tabla       TYPE STANDARD TABLE
                         USING contenedor  TYPE REF TO cl_gui_custom_container
                               nombre_cont TYPE        scrfname
                               variant     LIKE        disvariant
                               estruc      LIKE        dd02l-tabname
                     CHANGING  alv         TYPE REF TO cl_gui_alv_grid
                               layout      TYPE        lvc_s_layo
                               it_fieldcat TYPE        lvc_t_fcat
                               excludin    TYPE        ui_functions.

  IF alv IS INITIAL.
    IF cl_gui_alv_grid=>offline( ) IS INITIAL.

      "CREATE OBJECT eventos.

      CREATE OBJECT contenedor
        EXPORTING
          container_name = nombre_cont
        EXCEPTIONS
          OTHERS         = 1.

      CREATE OBJECT alv
        EXPORTING
          i_parent = contenedor
        EXCEPTIONS
          OTHERS   = 1.

      CALL METHOD alv->register_edit_event
        EXPORTING
          i_event_id = cl_gui_alv_grid=>mc_evt_modified
        EXCEPTIONS
          error      = 1
          OTHERS     = 2.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.


    ELSE.

*      CREATE OBJECT alv
*        EXPORTING
*          i_parent = or_doc.

    ENDIF.

    PERFORM preparefieldcatalog USING    estruc
                                CHANGING it_fieldcat.

    PERFORM preparelayout       CHANGING layout.
    PERFORM rellenar_toolbar    CHANGING excludin.

    "SET HANDLER eventos->hotspot_click         FOR alv.

    CALL METHOD alv->set_table_for_first_display
      EXPORTING
        is_variant           = variant
        i_save               = 'A'
        is_layout            = layout
        it_toolbar_excluding = excludin
      CHANGING
        it_outtab            = tabla[]
        it_fieldcatalog      = it_fieldcat
      EXCEPTIONS
        OTHERS               = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSE.
    DATA: BEGIN OF ls_stable,
            row TYPE c,
            col TYPE c,
          END OF ls_stable.

    ls_stable-row = 'X'.
    ls_stable-col = 'X'.

    CALL METHOD alv->refresh_table_display
      EXPORTING
        is_stable = ls_stable.
  ENDIF.

ENDFORM.                    "load_data_into_grid

*&--------------------------------------------------------------------
*&      Form  preparefieldcatalog
*&--------------------------------------------------------------------
FORM preparefieldcatalog USING    estruc       LIKE dd02l-tabname
                         CHANGING it_fieldcat1 TYPE lvc_t_fcat.

  DATA: l_fieldcat TYPE LINE OF lvc_t_fcat.

  REFRESH it_fieldcat1.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active        = 'X'
      i_structure_name       = estruc
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_fieldcat1[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  LOOP AT it_fieldcat1 INTO l_fieldcat.
    CASE l_fieldcat-fieldname.
      WHEN 'VBELN'.
        l_fieldcat-hotspot = 'X'.
    ENDCASE.
    MODIFY it_fieldcat1 FROM l_fieldcat.
  ENDLOOP.

ENDFORM.                    "preparefieldcatalog

*&--------------------------------------------------------------------
*&      Form  preparelayout
*---------------------------------------------------------------------
FORM preparelayout CHANGING cwa_layout TYPE lvc_s_layo.

  cwa_layout-zebra      = 'X'.
  cwa_layout-sel_mode   = 'D'.
  cwa_layout-cwidth_opt = 'X'.

ENDFORM.                    "preparelayout

*&--------------------------------------------------------------------
*&      Form  rellenar_toolbar
*&--------------------------------------------------------------------
FORM rellenar_toolbar CHANGING excluirtool TYPE ui_functions.

  REFRESH: excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_append_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_copy TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_copy_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_cut TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_delete_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_insert_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_move_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_paste TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_paste_new_row TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_loc_undo TO excluirtool.
  APPEND cl_gui_alv_grid=>mc_fc_refresh TO excluirtool.

ENDFORM.                    "rellenar_toolbar
*&---------------------------------------------------------------------*
*&      Form  SELEC_DATOS
*&---------------------------------------------------------------------*
FORM selec_datos .



  CALL METHOD alv->get_selected_rows
    IMPORTING
      et_index_rows = DATA(t_rows).

  REFRESH: gt_datos_aux.

  LOOP AT t_rows INTO DATA(l_rows).

    READ TABLE gt_datos INTO DATA(l_dato) INDEX l_rows-index.
    IF sy-subrc = 0.
      APPEND l_dato TO gt_datos_aux.
    ENDIF.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
FORM mostrar_log .


  CHECK sy-binpt IS INITIAL AND sy-batch IS INITIAL AND gt_return[] IS NOT INITIAL.


* Variables para la creacion del log de incidencias
  DATA:
    l_log_handle TYPE balloghndl,
    mylog_handle TYPE bal_t_logh,
    l_s_log      TYPE bal_s_log,
    l_s_msg      TYPE bal_s_msg,
    l_msgno      TYPE symsgno.

* Creamos el log de incidencias
  l_s_log-extnumber  = 'Application Log Demo'(001).
  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log      = l_s_log
    IMPORTING
      e_log_handle = l_log_handle
    EXCEPTIONS
      OTHERS       = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  LOOP AT gt_return INTO DATA(mensajes).
    l_s_msg-msgid = mensajes-id.
    l_s_msg-msgno = mensajes-number.
    l_s_msg-msgty = mensajes-type.
    l_s_msg-msgv1 = mensajes-message_v1.
    l_s_msg-msgv2 = mensajes-message_v2.
    l_s_msg-msgv3 = mensajes-message_v3.
    l_s_msg-msgv4 = mensajes-message_v4.
    l_s_msg-probclass = '3'.

* Añadimos la incidencia al log
    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle = l_log_handle
        i_s_msg      = l_s_msg
      EXCEPTIONS
        OTHERS       = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDLOOP.

* Creamos el popup con el log de incidencias
  DATA l_s_display_profile TYPE bal_s_prof.

  CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
    IMPORTING
      e_s_display_profile = l_s_display_profile
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  l_s_display_profile-use_grid = 'X'.
  l_s_display_profile-disvariant-report = sy-repid.

* Mostramos el log de incidencias
  APPEND l_log_handle TO mylog_handle.
  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile = l_s_display_profile
      i_t_log_handle      = mylog_handle
    EXCEPTIONS
      OTHERS              = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
             WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* Refrescamos el log de incidencias
  CALL FUNCTION 'BAL_LOG_REFRESH'
    EXPORTING
      i_log_handle  = l_log_handle
    EXCEPTIONS
      log_not_found = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.







ENDFORM.
