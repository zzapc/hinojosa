***INCLUDE RVEXIEKS.

*TYPE-POOLS V50G.

INCLUDE l0mabt0k.
INCLUDE <icon>.

TABLES: sadr,                                               "SADR40A
        sscrfields,
        t001k,
        t005t,
        t604t,
        t606k,
        kna1,
        tpart,
        tvst,
        tvfkt,
        vbfa,
        vbpa.

*RANGES: R_HEFEL FOR T609I-HEFEL.
RANGES: r_thierisch FOR veiav-thierisch.
DATA: country_spec TYPE v50g_country_spec WITH HEADER LINE.
DATA: incompletion_data_header
                     TYPE v50g_incompletion_data WITH HEADER LINE.
DATA: sav_incompletion_data_header
                     TYPE v50g_incompletion_data_struc.
DATA: incompletion_data_item
                     TYPE v50g_incompletion_data WITH HEADER LINE.
DATA: sav_vexav LIKE vexav.
DATA: vbfa_tab LIKE vbfa OCCURS 10 WITH HEADER LINE.
DATA: undeleted_items TYPE v50g_undeleted_items WITH HEADER LINE.
DATA: incompletion_fields TYPE v50g_incompletion_criteria
                                      WITH HEADER LINE.
DATA: incompletion_fields_save TYPE v50g_incompletion_criteria.
DATA: no_log TYPE v50g_no_log WITH HEADER LINE.
DATA: alv_variant LIKE disvariant OCCURS 1 WITH HEADER LINE.
DATA: country_company_code LIKE t001-land1.
DATA: selection_log TYPE v50g_selection_log WITH HEADER LINE.
DATA: selection_log_open TYPE v50g_selection_log_open WITH HEADER LINE.
DATA: exclusion_flag TYPE v50g_exclusion_flag.
DATA: exclusion_data TYPE v50g_exclusion_data WITH HEADER LINE.
DATA: exclusion_item_types TYPE v50g_exclusion_item_types
                                     WITH HEADER LINE.
DATA: BEGIN OF table_structure_tab OCCURS 0.
        INCLUDE STRUCTURE dfies.
DATA: END OF table_structure_tab.
DATA: ref_veiav_late LIKE veiav OCCURS 1 WITH HEADER LINE.
DATA: ref_vexav_late LIKE vexav OCCURS 1 WITH HEADER LINE.
DATA: ref_vekac_late LIKE vekac OCCURS 1 WITH HEADER LINE.
DATA: ref_vesed_late LIKE vesed OCCURS 1 WITH HEADER LINE.
DATA: BEGIN OF no_ref_found OCCURS 5,
        belegnumr      LIKE veiav-belegnumr,
        hauptposi      LIKE veiav-hauptposi,
        goods_movement,
        p_vbrk         LIKE vbrk,
        p_vbrp         LIKE vbrp,
      END OF no_ref_found.
DATA: flg_item_inclusion.
DATA: flg_item_inclusion_eikp.
DATA: reference_direction LIKE veiav-arrivdepa.
CONSTANTS: con_exclusion VALUE 'E',
           con_inclusion VALUE 'I'.
CONSTANTS: con_level_global VALUE 'G',
           con_level_header VALUE 'H',
           con_level_item   VALUE 'I'.
CONSTANTS: con_mkmal_statwaren LIKE con_statwaren VALUE 'M#2STATWAREN',
           con_mkmal_ursprslnd LIKE con_ursprslnd VALUE 'M#2URSPRSLND'.
DATA: control_fields LIKE t609is.

DATA: selection     LIKE addr1_sel,
      address_value LIKE addr1_val.
RANGES: sav_dd_bukrs FOR t001-bukrs.
RANGES: sav_dd_werks FOR t001w-werks.
RANGES: sav_dd_vbeln FOR vbrk-vbeln.
DATA: sav_tfill LIKE sy-tfill.
DATA: sav_p_milnd LIKE t609i-land1.
DATA: sav_p_monat LIKE veiav-datummona.
DATA: sav_p_gjahr LIKE veiav-datumjahr.
DATA: sav_p_savoie LIKE rvsel-p_savoie.
DATA: sav_p_proto  LIKE rvsel-p_proto.
DATA: sav_vbeln LIKE vbrk-vbeln.
DATA: BEGIN OF int_t001k OCCURS 05,
        bwkey LIKE t001k-bwkey,
      END OF int_t001k.
DATA: hlp_text(50).
DATA: BEGIN OF int_t001w OCCURS 10,
        werks LIKE t001w-werks,
      END OF int_t001w.
DATA: BEGIN OF t001w_tab OCCURS 50,
        werks LIKE t001w-werks,
        land1 LIKE t001w-land1,
        vlfkz LIKE t001w-vlfkz,
      END OF t001w_tab.
DATA: komma VALUE ','.
DATA: hoch VALUE ''''.
*DATA: HLP_SPACE(2) VALUE ' 1'.
CONSTANTS: con_value_0001 TYPE f VALUE '0.001'.             "ALRK263037
DATA: con_kurstyp_mitte LIKE tcurr-kurst VALUE 'M',
      con_kurstyp_intra LIKE tcurr-kurst VALUE 'I',
      kurstyp           LIKE tcurr-kurst.
*     DEZ_STEL(01) TYPE X,             "Dezimalstellen
*     UEB_GWRT(15).
DATA: tfill_dd_werks LIKE sy-tfill.
DATA: first_run VALUE 'X'.
DATA: milnd_iso LIKE t005-intca.
DATA: gv_triangular(1) VALUE ' '.      "<<< insert HP_351916

* save areas
DATA: vbrk_ref LIKE vbrk.
DATA: vbrp_ref LIKE vbrp.

CONSTANTS: con_bsart_ican LIKE v50galv6-bsart VALUE 'ICAN',
           con_bsart_icrm LIKE v50galv6-bsart VALUE 'ICRM',
           con_bsart_iret LIKE v50galv6-bsart VALUE 'IRET'.

CONSTANTS: con_reporting_type_i TYPE v50g_i_reporting_type VALUE 'I',
           con_reporting_type_e TYPE v50g_i_reporting_type VALUE 'E',
           con_reporting_type_k TYPE v50g_i_reporting_type VALUE 'K',
           con_reporting_type_c TYPE v50g_i_reporting_type VALUE 'C',
           con_reporting_type_s TYPE v50g_i_reporting_type VALUE 'S'.

CONSTANTS: con_reporting_type_1 TYPE v50g_i_reporting_type VALUE '1',
           con_reporting_type_2 TYPE v50g_i_reporting_type VALUE '2',
           con_reporting_type_3 TYPE v50g_i_reporting_type VALUE '3',
           con_reporting_type_4 TYPE v50g_i_reporting_type VALUE '4'.

CONSTANTS: con_repid_saplv50g LIKE syst-repid VALUE 'SAPLV50G'.

CONSTANTS: con_msgid_eip LIKE syst-msgid VALUE 'EIP',
           con_msgty_e   LIKE syst-msgty VALUE 'E',
           con_msgty_i   LIKE syst-msgty VALUE 'I',
           con_msgty_s   LIKE syst-msgty VALUE 'S',
           con_msgty_w   LIKE syst-msgty VALUE 'W'.

CONSTANTS: con_direction_2 LIKE t609i-verei VALUE '2'.
*>>>>>>>>>>>>>> start ins hp_398968 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CONSTANTS: con_direction_1 LIKE t609i-verei VALUE '1'.
*>>>>>>>>>>>>>> end   ins hp_398968 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
CONSTANTS: con_t609r_verei_2 LIKE t609r-verei VALUE '2'.
CONSTANTS: con_process_step_s VALUE 'S',
           con_process_step_u VALUE 'U'.
CONSTANTS: con_parvw_we LIKE vbpa-parvw VALUE 'WE',
           con_parvw_ag LIKE vbpa-parvw VALUE 'AG',
           con_parvw_re LIKE vbpa-parvw VALUE 'RE'.
CONSTANTS: con_expvz_1 LIKE eikp-expvz VALUE '1',
           con_expvz_2 LIKE eikp-expvz VALUE '2',
           con_expvz_3 LIKE eikp-expvz VALUE '3',
           con_expvz_4 LIKE eikp-expvz VALUE '4',
           con_expvz_5 LIKE eikp-expvz VALUE '5',
           con_expvz_7 LIKE eikp-expvz VALUE '7',
           con_expvz_9 LIKE eikp-expvz VALUE '9'.

DATA: exclude_from_selection.
DATA: dummy_veiav LIKE veiav,
      dummy_vexav LIKE vexav,
      dummy_vekaa LIKE vekaa,
      dummy_vekab LIKE vekab,
      dummy_vekac LIKE vekac,
      dummy_vesed LIKE vesed.
DATA: dummy_msgv LIKE syst-msgv1.
DATA: dummy_country   LIKE vbrk-land1,
      dummy_bukrs     LIKE vbrk-bukrs,
      dummy_regio     LIKE veiav-bestiregi,
      dummy_werks     LIKE vbrp-werks,
      dummy_kundeuinr LIKE veiav-kundeuinr.
CONSTANTS: con_mkmal TYPE v50g_mkmal VALUE 'M#1'.
DATA: dummy_ifremdwak LIKE veiav-ifremdwak,
      dummy_ifremdweh LIKE veiav-ifremdweh,
      dummy_besonmaak LIKE veiav-besonmaak,
      dummy_versendld LIKE vexav-versendld.
DATA: flg_check_plants_vlfkz.
DATA: flg_service_item.

DATA: flg_incp_check.
*-- Kennzeichen kostenlos
DATA: flg_free_of_charge.
*-- DP&P data
DATA: gs_dpp_kna1 TYPE kna1.
DATA: gv_dpp_rvexieks_found TYPE c.

*-- Interne Tabelle zur Aufnahme von Positionstypenangaben
DATA: BEGIN OF tvap_tab OCCURS 0,                           "P45K000050
        pstyv LIKE tvap-pstyv,                              "P45K000050
        prsfd LIKE tvap-prsfd,                              "P45K000050
        fkrel LIKE tvap-fkrel,
      END OF tvap_tab.                                      "P45K000050
*-------Spezialfälle
DATA: spec_reg_tab LIKE t609ii OCCURS 3 WITH HEADER LINE.
CONSTANTS: con_gewicht_kg LIKE vbrp-gewei VALUE 'KG',
           con_gewicht_g  LIKE vbrp-gewei VALUE 'G'.
*-------Konstanten: Laender
DATA   : con_deutschland_d   LIKE t005-land1 VALUE 'D ',
         con_deutschland_004 LIKE t005-landa     VALUE '004'.

CONSTANTS:  eigene             LIKE veiav-genes VALUE space,
            aus_mm_fuer_sd     LIKE veiav-genes VALUE '1',
            aus_sd_fuer_mm     LIKE veiav-genes VALUE '2',
            aus_sd_fuer_mm_iii LIKE veiav-genes VALUE '3'.
DATA: firmennu   LIKE t001n-exfnr,       "Firmennr. beim stat. Bundesamt
      materialnu LIKE t001n-exmnr.     "Mat.-Nr. beim stat. Bundesamt
DATA   : con_intca_fi LIKE t005-intca VALUE 'FI'.
DATA   : con_intca_it LIKE t005-intca VALUE 'IT'.
DATA   : con_intca_de LIKE t005-intca VALUE 'DE'.
DATA   : con_intca_ch LIKE t005-intca VALUE 'CH'.
DATA   : con_intca_sm LIKE t005-intca VALUE 'SM'.
DATA   : con_intca_fr LIKE t005-intca VALUE 'FR'.
DATA   : con_intca_be LIKE t005-intca VALUE 'BE'.
DATA   : con_intca_cz LIKE t005-intca VALUE 'CZ'.
DATA   : con_intca_pl LIKE t005-intca VALUE 'PL'.

DATA   : con_code_reunion    LIKE t005-landa VALUE '372',
         con_code_guadeloupe LIKE t005-landa VALUE '458',
         con_code_martinique LIKE t005-landa VALUE '462',
         con_code_guayana    LIKE t005-landa VALUE '496',
         con_code_kanaren    LIKE t005-landa VALUE '021',
         con_code_spanien    LIKE t005-landa VALUE '011',
         con_code_frankreich LIKE t005-landa VALUE '001'.
DATA: ret_subrc LIKE syst-subrc.
CONSTANTS: con_import LIKE veiav-arrivdepa VALUE '1'.
CONSTANTS: con_export LIKE veiav-arrivdepa VALUE '2'.
CONSTANTS: con_export_import LIKE veiav-arrivdepa VALUE '0'.
DATA: eiguinr LIKE t001n-inknr,        "Eigene ID-Nummer
      zusatzn LIKE t001n-inznr.        "Zusatznummer
DATA: gv_tax_conv_factor TYPE txkrs_bkpf.

DATA       : p_euroc LIKE veiav-flageuroc.
DATA: flg_rvivst00_active.
*-- Anzeigevarianten
DATA: g_exit(1)  TYPE c,
      g_variant  LIKE disvariant,
      gx_variant LIKE disvariant.

DATA: popup_answer.

DATA: lines_incomp_log_e(4) TYPE n,
      lines_incomp_log_w(4) TYPE n,
      lines_incomp_log_i(4) TYPE n.
DATA: eigenmaak_floating TYPE v50g_floating.

*-- General EU check
DATA: gs_new_member_date_year  TYPE datumjahr,
      gs_new_member_date_month TYPE datummona,
      gv_new_member_country    TYPE intca.

DATA: BEGIN OF gs_new_eu_member,
        01_country TYPE intca VALUE 'XX', " 'BG',   "new EU member
        01_year    TYPE datumjahr VALUE '2007', "year of entry
        01_month   TYPE datummona VALUE '01',   "month of entry
        02_country TYPE intca     VALUE 'RO',
        02_year    TYPE datumjahr VALUE '2007',
        02_month   TYPE datummona VALUE '01',
        03_country TYPE intca     VALUE 'HR',
        03_year    TYPE datumjahr VALUE '2013',
        03_month   TYPE datummona VALUE '07',
        xx_country TYPE intca     VALUE 'XX',   "don't touch! end marker
        xx_year    TYPE datumjahr VALUE 'XXXX',  "...
        xx_month   TYPE datummona VALUE 'XX',    "...
      END OF gs_new_eu_member.

*-- Constants & Data for Brexit
CONSTANTS: gc_country_of_exit    TYPE intca VALUE 'GB',
           gc_date_of_intra_exit TYPE fkdat VALUE '99991231'.

CONSTANTS: gc_brexit_jan_2021    TYPE fkdat VALUE '20201231'. "BREXIT transition ends on date on Jan 01, 2021

DATA:      gv_check_date_exit    TYPE fkdat,
           gv_check_regio        TYPE regio,
           gv_check_pstlz        TYPE pstlz.

*-- Hilfsparameter zur Übergabe des Meldungsland an logische DB VXV
AT SELECTION-SCREEN ON p_milnd.        "Meldungsland
  p_vxvmi = p_milnd.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_varia.
*-- Value request for variant
  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = g_variant
      i_save     = 'A'
    IMPORTING
      e_exit     = g_exit
      es_variant = gx_variant
    EXCEPTIONS
      not_found  = 2.
  IF sy-subrc = 2.
    MESSAGE s484(ei).
  ELSE.
    IF g_exit = space.
      p_varia = gx_variant-variant.
    ENDIF.
  ENDIF.

*-- ALV Variantencheck
AT SELECTION-SCREEN ON p_varia.
* check variant
  IF NOT p_varia IS INITIAL.
    IF g_variant-report IS INITIAL.
      g_variant-report = sy-repid.
    ENDIF.
    gx_variant           = g_variant.
    gx_variant-variant   = p_varia.
    CALL FUNCTION 'REUSE_ALV_VARIANT_EXISTENCE'
      EXPORTING
        i_save     = 'A'
      CHANGING
        cs_variant = gx_variant.
    g_variant = gx_variant.
  ELSE.
    CLEAR g_variant.
    g_variant-report = sy-repid.
  ENDIF.

*---------------------------------------------------------------------*
*       FORM GET_ALTERNATIVE_QUANTITY                                 *
*---------------------------------------------------------------------*
*       Alternative Menge                                             *
*---------------------------------------------------------------------*

FORM get_alternative_quantity USING    reporting_country
                                          LIKE t609i-land1
                                       p_stawn LIKE eipo-stawn
                              CHANGING quantity
                                       subrc_besonmass LIKE sy-subrc.

  DATA: hlp_p_stawn LIKE eipo-stawn.

  hlp_p_stawn = p_stawn.

*-Lesen T604
  CLEAR t604-bemeh.
  SELECT SINGLE * FROM t604
         WHERE land1 = reporting_country
         AND   stawn = hlp_p_stawn.
  IF sy-subrc IS INITIAL AND t604-bemeh IS INITIAL.
    CLEAR quantity.
    EXIT.
  ELSEIF NOT sy-subrc IS INITIAL.
    SELECT SINGLE * FROM t604
           WHERE land1 = reporting_country
           AND   stawn = hlp_p_stawn(8).
    IF ( sy-subrc IS INITIAL AND t604-bemeh IS INITIAL )
       OR ( NOT sy-subrc IS INITIAL ).
      IF NOT sy-subrc IS INITIAL.
        subrc_besonmass = 4.
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_e
                                          '007'
                                          hlp_p_stawn
                                          reporting_country
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_item
                                          con_besonmaak.
      ENDIF.
      CLEAR quantity.
      EXIT.
    ENDIF.
  ENDIF.

*---Umrechnen Menge in alternative Mengeneinheit
  IF t604-bemeh NE vbrp-vrkme.
*-- Belegmengeneinheit = Basismengeneinheit ??
*-- ja --> Keine Umrechnung   nein --> Umrechnung in Basismengeneinheit
    IF vbrp-vrkme NE vbrp-meins.
*-- Umrechnung Belegeinheit in Basismengeneinheit

      PERFORM unit_conversion USING  true
                                     vbrp-matnr
                                     vbrp-vrkme
                                     vbrp-meins
                            CHANGING quantity
                                     subrc_besonmass.
      IF NOT subrc_besonmass IS INITIAL.

        IF subrc_besonmass = 1.
*-- Umrechnungsfaktoren nicht gefunden
          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_e
                                            '021'
                                            con_mkmal
                                            vbrp-vrkme
                                            vbrp-meins
                                            vbrp-matnr
                                            con_level_item
                                            con_besonmaak.
        ENDIF.
        EXIT.
      ENDIF.
    ENDIF.

*-- Umrechnung Basismengeneinheit in Besondere Maßeinheit
    PERFORM unit_conversion USING false
                                  vbrp-matnr
                                  t604-bemeh
                                  vbrp-meins
                         CHANGING quantity
                                  subrc_besonmass.
    IF subrc_besonmass = 1.
*-- Umrechnungsfaktoren nicht gefunden
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '021'
                                        con_mkmal
                                        vbrp-meins
                                        t604-bemeh
                                        vbrp-matnr
                                        con_level_item
                                        con_besonmaak.
    ENDIF.
  ENDIF.

ENDFORM.                    "GET_ALTERNATIVE_QUANTITY

*&---------------------------------------------------------------------*
*&      Form  UNIT_CONVERSION
*&---------------------------------------------------------------------*
*       Umrechnen von Mengeneinheiten                                  *
*----------------------------------------------------------------------*
*  -->   input    Umzurechnende Menge
*  -->   kzmeinh  'X' Menge bezieht sich auf Alternativmengeneinheit
*                 ' ' Menge bezieht sich auf Basismengeneinheit
*  -->   matnr    Materialnummer
*  -->   meinh    Alternativmengeneinheit
*  -->   meins    Basismengeneinheit
*  <--   output   Umgerechnete Menge
*  <--   subrc_besonmass  Fehlercode
*----------------------------------------------------------------------*
FORM unit_conversion USING kzmeinh
                           matnr
                           meinh
                           meins
                  CHANGING quantity
                           subrc_besonmass.

  CALL FUNCTION 'MATERIAL_UNIT_CONVERSION'
    EXPORTING
      input                = quantity
      kzmeinh              = kzmeinh
      matnr                = matnr
      meinh                = meinh
      meins                = meins
    IMPORTING
      output               = quantity
    EXCEPTIONS
      conversion_not_found = 1
      input_invalid        = 2
      material_not_found   = 3
      meinh_not_found      = 4
      meins_missing        = 5
      no_meinh             = 6
      output_invalid       = 7
      overflow             = 8
      OTHERS               = 9.

  IF NOT sy-subrc IS INITIAL.
    subrc_besonmass = sy-subrc.
  ENDIF.

ENDFORM.                    "UNIT_CONVERSION

*&---------------------------------------------------------------------*
*&      Form  ISSUE_LOG
*&---------------------------------------------------------------------*
FORM issue_log USING p_flow_of_goods LIKE veiav-arrivdepa
                     p_sed_servagent LIKE vesed-servagent.

* CALL FUNCTION 'RV_FTT_GOV_MEMORY_HANDLING'
*      EXPORTING
*           MODE          = 'I'
*           PROGRAM       = CON_REPID_SAPLV50G
*      TABLES
*           NO_LOG        = NO_LOG
*      EXCEPTIONS
*           ILLEGAL_MODE  = 1
*           EXPORT_FAILED = 2
*           IMPORT_FAILED = 3
*           OTHERS        = 4.
* IF SY-SUBRC <> 0.
*   NO_LOG-NO_LOG = FALSE.
* ELSE.
*   READ TABLE NO_LOG INDEX 1.
* ENDIF.

  IF no_log = false.
    CALL FUNCTION 'RV_FTT_GOV_ISSUE_LOG_SEL_REP'
      EXPORTING
        flow_of_goods            = p_flow_of_goods
        flg_simulation           = flg_simulation
        reporting_type           = reporting_type
        log_type                 = p_proto
        reporting_month          = p_monat
        reporting_year           = p_gjahr
        variant                  = g_variant
        country                  = milnd_iso
        calling_program          = con_calling_program
        sed_servagent            = p_sed_servagent
      TABLES
        selection_log            = selection_log
        selection_log_open       = selection_log_open
        incompletion_data_header = incompletion_data_header
        incompletion_data_item   = incompletion_data_item
      EXCEPTIONS
        wrong_reporting_type     = 1
        OTHERS                   = 2.

    IF sy-subrc NE 0.
      IF 1 = 2. ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                               " ISSUE_LOG

*&---------------------------------------------------------------------*
*&      Form  FILL_SELECTION_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM fill_selection_log USING VALUE(p_rechnweak) LIKE veiav-rechnweak
                              p_rechnweeh LIKE veiav-rechnweeh
                              VALUE(p_grenzweak) LIKE veiav-grenzweak
                              p_grenzweeh LIKE veiav-grenzweeh
                              VALUE(p_ifremdwak) LIKE veiav-ifremdwak
                              p_ifremdweh LIKE veiav-ifremdweh
                              VALUE(p_eigenmaak) TYPE v50g_floating
                              p_eigenmaeh LIKE veiav-eigenmaeh
                              VALUE(p_besonmaak) LIKE veiav-besonmaak
                              p_besonmaeh LIKE veiav-besonmaeh
                              p_bestiland LIKE veiav-bestiland
                              p_arrivdepa LIKE veiav-arrivdepa
                              p_statwaren LIKE veiav-statwaren
                              p_serviceitem LIKE veiav-serviceitem
                              p_kundeuinr LIKE veiav-kundeuinr
                              p_rfbsk     LIKE vbrk-rfbsk.
  IF p_rfbsk CA 'CDJ' OR flg_simulation = true.
    PERFORM negative_values_get USING    p_arrivdepa
                                CHANGING p_rechnweak
                                         p_grenzweak
                                         p_ifremdwak
                                         p_eigenmaak
                                         p_besonmaak.

    ADD 1 TO selection_log-lfdnr.
    selection_log-bukrs = vbrk-bukrs.
    selection_log-werks = vbrp-werks.
    selection_log-fkart = vbrk-fkart.
    selection_log-vbtyp = vbrk-vbtyp.
    selection_log-belegnumr = vbrk-vbeln.
    selection_log-hauptposi = vbrp-posnr.
    selection_log-uepos = vbrp-uepos.
    selection_log-stawn = p_statwaren.
    selection_log-rechnweak = p_rechnweak.
    selection_log-rechnweeh = p_rechnweeh.
    selection_log-grenzweak = p_grenzweak.
    selection_log-grenzweeh = p_grenzweeh.
    selection_log-ifremdwak = p_ifremdwak.
    selection_log-ifremdweh = p_ifremdweh.
    TRY.
      selection_log-eigenmaak = p_eigenmaak.
      selection_log-eigenmaak_dec6 = p_eigenmaak.
      selection_log-eigenmaeh = p_eigenmaeh.
    CATCH CX_SY_CONVERSION_OVERFLOW.
      " Value is too large and will cause exception
      CALL FUNCTION 'UNIT_CONVERSION'
        EXPORTING
          meins                = p_eigenmaeh
          mglme                = p_eigenmaak
          meinh                = vbrp-gewei
        IMPORTING
          o_mgame              = eigenmaak_floating
        EXCEPTIONS
          others = 1.
      IF sy-subrc = 0.
        selection_log-eigenmaak = eigenmaak_floating.
        selection_log-eigenmaak_dec6 = selection_log-eigenmaak.
        selection_log-eigenmaeh = vbrp-gewei.
      ENDIF.
    ENDTRY.
    selection_log-besonmaak = p_besonmaak.
    selection_log-besonmaeh = p_besonmaeh.
    selection_log-serviceitem = p_serviceitem.
    selection_log-deb_kred_uin = p_kundeuinr.
    IF flg_rvivst00_active = true.
      selection_log-versendld = p_bestiland.
      selection_log-bsart = vbrk-fkart.
      IF vbrk-vbtyp CA vbtyp_fkiv_gut.
        IF NOT vbrk-sfakn IS INITIAL.
          selection_log-bsart = con_bsart_ican.
        ELSE.
          IF vbrp-vgtyp CA vbtyp_delv OR
             vbrp-vgtyp CA vbtyp_reto.
            selection_log-bsart = con_bsart_iret.
          ELSE.
            selection_log-bsart = con_bsart_icrm.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSE.
      selection_log-bestiland = p_bestiland.
    ENDIF.
    selection_log-arrivdepa = p_arrivdepa.
    APPEND selection_log.
  ELSE.
    selection_log_open-belegnumr = vbrk-vbeln.
*   SELECTION_LOG_OPEN-HAUPTPOSI = VBRP-POSNR.
    CLEAR selection_log_open-hauptposi.
    selection_log_open-rfbsk     = p_rfbsk.
    COLLECT selection_log_open.
  ENDIF.
ENDFORM.                    "FILL_SELECTION_LOG

*&---------------------------------------------------------------------*
*&      Form  READ_INCOMPLETION_FIELDS
*&---------------------------------------------------------------------*
*       Felder für Unvollständigkeitsprüfung holen
*----------------------------------------------------------------------*
FORM read_incompletion_fields.

  CALL FUNCTION 'RV_FTT_GOV_INCOMPLETION_READ'
    EXPORTING
      i_country                      = p_milnd
*     I_DIRECTION                    = CON_EXPORT
      i_direction                    = con_export_import
      i_reporting_type               = reporting_type
      i_all_fields                   = false
    TABLES
      e_t_incompletion_fields        = incompletion_fields
    EXCEPTIONS
      no_incompletion_criteria_found = 1
      wrong_direction                = 2
      wrong_reporting_type           = 3
      OTHERS                         = 4.

* IF SY-SUBRC = 0.
*-- Ranges aufbauen
*   R_HEFEL-SIGN = 'E'.
*   R_HEFEL-OPTION = 'EQ'.
*   LOOP AT INCOMPLETION_FIELDS.
*     R_HEFEL-LOW = INCOMPLETION_FIELDS-HEFEL.
*     APPEND R_HEFEL.
*   ENDLOOP.
* ENDIF.

ENDFORM.                               " READ_INCOMPLETION_FIELDS

*&---------------------------------------------------------------------*
*&      Form  CHECK_P_MILND
*&---------------------------------------------------------------------*
*       Überprüfen des Parameters Meldungsland
*----------------------------------------------------------------------*
FORM check_p_milnd.

  IF sy-ucomm NE 'MORE'.
*   IF P_PROTO EQ 'B' OR
*      P_PROTO EQ 'E' OR
*      P_PROTO EQ 'F'.
    DATA: get    LIKE dynpread OCCURS 0 WITH HEADER LINE,
          report LIKE d020s-prog.

*-- Da das Meldungsland nach den Werken prozessiert wird, müssen
*-- Änderungen des Meldungslandes über FB DYNP_VALUES_READ geholt
*-- werden
    REFRESH get.
    get-fieldname = 'P_MILND'. APPEND get.

    report = sy-repid.

    CALL FUNCTION 'DYNP_VALUES_READ'
      EXPORTING
        dyname               = report
        dynumb               = sy-dynnr
      TABLES
        dynpfields           = get
      EXCEPTIONS
        invalid_abapworkarea = 1
        invalid_dynprofield  = 2
        invalid_dynproname   = 3
        invalid_dynpronummer = 4
        invalid_request      = 5
        no_fielddescription  = 6
        invalid_parameter    = 7
        undefind_error       = 8
        OTHERS               = 9.

    IF sy-subrc IS INITIAL.
      READ TABLE get INDEX 1 TRANSPORTING fieldvalue.
      p_milnd = get-fieldvalue.
*     TRANSLATE P_MILND TO UPPER CASE.
    ENDIF.

    IF p_milnd IS INITIAL.
      SET CURSOR FIELD 'P_MILND'.
      MESSAGE e479.
    ELSE.
      IF t005-land1 NE p_milnd.
        SELECT SINGLE * FROM t005 WHERE land1 = p_milnd.
        IF sy-subrc IS INITIAL.
        ELSE.
          SET CURSOR FIELD 'P_MILND'.
          MESSAGE e023.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

*-- ISO-Code des Meldungslandes holen
  READ TABLE t005_tab WITH KEY land1 = p_milnd BINARY SEARCH.
  IF sy-subrc IS INITIAL.
    IF t005_tab-intca IS INITIAL.
      SET CURSOR FIELD 'P_MILND'.
      MESSAGE e476 WITH p_milnd.
    ELSE.
      milnd_iso = t005_tab-intca.
    ENDIF.
  ENDIF.

ENDFORM.                               " CHECK_P_MILND

*&---------------------------------------------------------------------*
*&      Form  CHECK_EXPORT_LICENSE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_RET_CODE  text                                             *
*----------------------------------------------------------------------*
FORM check_export_license CHANGING p_exclusion_flag.

  CALL FUNCTION 'RV_FTT_GOV_EXP_DOCUMENTS_EXCL'
    EXPORTING
      i_reporting_type           = reporting_type
      i_sd_order_number          = vbrp-aubel
      i_sd_order_item_number     = vbrp-aupos
    IMPORTING
      e_exclusion_flag           = p_exclusion_flag
    EXCEPTIONS
      document_number_is_inital  = 1
      no_document_to_be_excluded = 2
      wrong_reporting_type       = 3
      OTHERS                     = 4.

  IF sy-subrc NE 0.
    IF 1 = 2. ENDIF.
  ENDIF.

ENDFORM.                    "CHECK_EXPORT_LICENSE

*&---------------------------------------------------------------------*
*&      Form  EXCLUSION_READ
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exclusion_read.

  CALL FUNCTION 'RV_FTT_GOV_EXCLUSION_READ'
    EXPORTING
      i_reporting_type        = reporting_type
    TABLES
      e_t_exclusion_data      = exclusion_data
    EXCEPTIONS
      no_exclusion_data_found = 1
      wrong_reporting_type    = 2
      OTHERS                  = 3.

  IF NOT sy-subrc IS INITIAL.
    IF 1 = 2. ENDIF.
  ENDIF.

ENDFORM.                               " EXCLUSION_READ

*&---------------------------------------------------------------------*
*&      Form  EXP_ITEM_TYPE_EXCL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exp_item_type_excl.

  CALL FUNCTION 'RV_FTT_GOV_EXP_ITEM_TYPE_EXCL'
    EXPORTING
      i_reporting_type              = reporting_type
    TABLES
      e_t_exclusion_item_types      = exclusion_item_types
    EXCEPTIONS
      no_exclusion_item_types_found = 1
      wrong_reporting_type          = 2
      OTHERS                        = 3.

  IF NOT sy-subrc IS INITIAL.
    IF 1 = 2. ENDIF.
  ENDIF.

ENDFORM.                               " EXP_ITEM_TYPE_EXCL

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_HELP_VALUES_CURRENCY
*&---------------------------------------------------------------------*
*       F4-Hilfe zur Meldewährung
*----------------------------------------------------------------------*
FORM display_help_values_currency.

  DATA: fieldname LIKE help_info-fieldname VALUE 'WAERS',
        tabname   LIKE help_info-tabname   VALUE 'TCURC'.

  CALL FUNCTION 'HELP_VALUES_GET'
    EXPORTING
      display      = ' '
      fieldname    = fieldname
      tabname      = tabname
    IMPORTING
      select_value = p_waers
    EXCEPTIONS
      OTHERS       = 0.

ENDFORM.                               " DISPLAY_HELP_VALUES_CURRENCY

*---------------------------------------------------------------------*
*       FORM PLANT_CHECK
*---------------------------------------------------------------------*
*       Bestimmung, ob Werke alle in einem Land
*       Gibt der Anwender keine Werke explizit in der Datenselektion
*       an, so werden alle Werke eines Buchungskreises über den
*       Bewertungskey ermittelt. Im Anschluß findet die Prüfung
*       statt, ob alle Werke aus einem Land stammen.
*       Gibt der Anwender explizit Werke an, so wird direkt geprüft,
*       ob alle Werke aus einem Land stammen.
*---------------------------------------------------------------------*
FORM plant_check TABLES h_dd_bukrs STRUCTURE dd_bukrs
                        h_dd_werks STRUCTURE dd_werks.

  DATA: hlp_land1 LIKE t005-land1.

  REFRESH: int_t001k,
           int_t001w.

  DATA: get    LIKE dynpread OCCURS 0 WITH HEADER LINE,
        report LIKE d020s-prog.

  CHECK sy-batch = false.

*-- Da das Meldungsland nach den Werken prozessiert wird, müssen
*-- Änderungen des Meldungslandes über FB DYNP_VALUES_READ geholt
*-- werden
  REFRESH get.
  get-fieldname = 'P_MILND'. APPEND get.

  report = sy-repid.

  CALL FUNCTION 'DYNP_VALUES_READ'
    EXPORTING
      dyname               = report
      dynumb               = sy-dynnr
    TABLES
      dynpfields           = get
    EXCEPTIONS
      invalid_abapworkarea = 1
      invalid_dynprofield  = 2
      invalid_dynproname   = 3
      invalid_dynpronummer = 4
      invalid_request      = 5
      no_fielddescription  = 6
      invalid_parameter    = 7
      undefind_error       = 8
      OTHERS               = 9.

  IF sy-subrc IS INITIAL.
    READ TABLE get INDEX 1 TRANSPORTING fieldvalue.
    p_milnd = get-fieldvalue.
*   TRANSLATE P_MILND TO UPPER CASE.
  ENDIF.

  DESCRIBE TABLE dd_werks LINES tfill_dd_werks.

  IF ( tfill_dd_werks IS INITIAL AND dd_bukrs[] NE sav_dd_bukrs[] )
     OR
     ( tfill_dd_werks IS INITIAL AND dd_bukrs[] EQ sav_dd_bukrs[]
      AND dd_werks[] NE sav_dd_werks[] )
     OR ( tfill_dd_werks NE 0 AND dd_bukrs[] NE sav_dd_bukrs[]
        AND NOT sav_dd_bukrs IS INITIAL )
     OR ( tfill_dd_werks IS INITIAL AND dd_bukrs[] EQ sav_dd_bukrs[]
          AND dd_werks[] IS INITIAL AND sav_dd_werks[] IS INITIAL ).
*-- Einlesen der Buchungskreise über Bewertungskreis
    SELECT bwkey FROM t001k INTO TABLE int_t001k
                    WHERE bukrs IN dd_bukrs.
    IF sy-subrc IS INITIAL.
*-- Einlesen der Werke
      SELECT werks FROM t001w
                   INTO CORRESPONDING FIELDS OF TABLE int_t001w
                        FOR ALL ENTRIES IN int_t001k
                        WHERE bwkey =  int_t001k-bwkey.
      IF sy-subrc IS INITIAL.
*-- Werksdaten in ranges konvertieren
        REFRESH sav_dd_werks.
        sav_dd_werks-sign = 'I'.
        sav_dd_werks-option = 'EQ'.
        LOOP AT int_t001w.
          sav_dd_werks-low = int_t001w-werks.
          APPEND sav_dd_werks.
        ENDLOOP.
      ELSE.
        MESSAGE e057.
      ENDIF.
    ELSE.
      MESSAGE e057.
    ENDIF.

*-- Buchungskreise retten
    REFRESH sav_dd_bukrs.
    APPEND LINES OF dd_bukrs TO sav_dd_bukrs.
  ELSE.
    IF NOT tfill_dd_werks IS INITIAL.
      sav_dd_werks[] = dd_werks[].
    ENDIF.
  ENDIF.

  DATA: h_dummy_bukrs LIKE t001-bukrs.

  IF NOT sav_dd_werks[] IS INITIAL.
    CLEAR: h_dummy_bukrs.
*-- Land umschlüsseln
    IF NOT p_milnd IS INITIAL.
      hlp_land1 = p_milnd.
    ENDIF.

    CALL FUNCTION 'CHECK_PLANTS_IN_SAME_COUNTRY'
      EXPORTING
        reporting_country           = hlp_land1
      TABLES
        t_plants                    = sav_dd_werks
      EXCEPTIONS
        different_countries         = 1
        diff_from_reporting_country = 2
        OTHERS                      = 3.

    CASE sy-subrc.
      WHEN '0'.
        dd_werks[] = sav_dd_werks[].
      WHEN '1'.
*     MESSAGE E231.
      WHEN '2'.
*      IF SSCRFIELDS-UCOMM NE '%003'.
        IF sscrfields-ucomm IS INITIAL OR sscrfields-ucomm = 'ONLI'.
          SELECT SINGLE * FROM t005t WHERE spras = sy-langu
                                       AND land1 = hlp_land1.
          IF NOT sy-subrc IS INITIAL.
            CLEAR t005t-landx.
          ENDIF.

          MESSAGE i475 WITH text-x01 t005t-landx.

          CALL FUNCTION 'RV_FTT_GOV_PLANTS_SELECT'
            EXPORTING
              i_bukrs         = ''
              i_country       = hlp_land1
              reduce_only     = 'X'
            TABLES
              plants          = sav_dd_werks
            EXCEPTIONS
              dialog_canceled = 1
              OTHERS          = 2.
          IF sy-subrc = 1 OR
             sav_dd_werks[] IS INITIAL.
            MESSAGE e475 WITH text-x01 t005t-landx.
          ENDIF.
          IF sy-subrc IS INITIAL.
            dd_werks[] = sav_dd_werks[].
          ENDIF.
        ENDIF.
      WHEN OTHERS.
*------- Nada
    ENDCASE.
  ENDIF.

ENDFORM.                    "PLANT_CHECK

*---------------------------------------------------------------------*
*       FORM INITIALIZATION                                           *
*---------------------------------------------------------------------*
*       Vorschlagswerte vor dem Senden des Anforderungsbilds          *
*---------------------------------------------------------------------*
FORM initialization.

*-- Initialisieren von folgenden Tabellen aus Typpool v50g:
*-- int_tab_t001n_global,  int_tab_t609i_global,
*-- int_tab_bukrs_id_no_global
  CALL FUNCTION 'RV_FTT_GOV_TABLES_INITIALIZE'.

***************************************************************
*   SAP GTS ECR / begin
***************************************************************
*   Keine Initialisierung wenn Aufruf von ECR, da ansonsten das
*   Selektionsdatum ueberschrieben wird
  IF   sy-calld = true        AND
     ( sy-tcode CS 'SAPSLL' OR
       sy-tcode CS 'IS_SD' ).
    EXIT.
  ENDIF.
***************************************************************
*   SAP GTS ECR / end
***************************************************************


* Setzen des Titels (Simulation oder 'Echtlauf')
  IF h_herku NE 'S'.
    IF sy-tcode = simulation_tcode.                         "VE24
      SET TITLEBAR '002'.
      flg_simulation = true.
    ELSE.
* Titel wie in Attributen definiert
      flg_simulation = false.
    ENDIF.
  ELSE.
    IF sy-tcode = 'VE43'
       OR sy-tcode = 'VE44'.
      SET TITLEBAR '002'.
      flg_simulation = true.
    ELSE.
* Titel wie in Attributen definiert
      flg_simulation = false.
    ENDIF.
  ENDIF.

  WRITE sy-datlo TO h_datum DD/MM/YYYY.
  h_datum      = sy-datlo.
  h_datum+6(2) = '01'.
  h_datum      = h_datum - 1.
*-übertragen in parameters
  p_monat = h_datum+4(2).
  p_gjahr = h_datum(4).
*-- Einlesen Tabelle T005
  SELECT land1 intca waers FROM t005
  INTO CORRESPONDING FIELDS OF TABLE t005_tab
  ORDER BY PRIMARY KEY.

*-- Default Variante ermitteln
  CLEAR g_variant.
  g_variant-report = sy-repid.
  gx_variant       = g_variant.
  CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
    EXPORTING
      i_save     = 'A'
    CHANGING
      cs_variant = gx_variant
    EXCEPTIONS
      not_found  = 4.
  IF sy-subrc = 0.
    p_varia = gx_variant-variant.
  ENDIF.
*-- Aufruf über ENPA per Variante ? Wenn ja -> NO_LOG = 'X'
  CALL FUNCTION 'RV_FTT_GOV_MEMORY_HANDLING'
    EXPORTING
      mode          = 'I'
      program       = con_repid_saplv50g
    TABLES
      no_log        = no_log
    EXCEPTIONS
      illegal_mode  = 1
      export_failed = 2
      import_failed = 3
      OTHERS        = 4.
  IF sy-subrc <> 0.
    no_log-no_log = false.
  ELSE.
    READ TABLE no_log INDEX 1.
  ENDIF.

ENDFORM.                    "INITIALIZATION

*&---------------------------------------------------------------------*
*&      Form  INCOMPLETION_APPEND
*&---------------------------------------------------------------------*
*       Unvollständigkeitsprotokoll: APPEND
*----------------------------------------------------------------------*
FORM incompletion_append USING p_msgid LIKE syst-msgid
                               p_msgty LIKE syst-msgty
                               p_msgno LIKE syst-msgno
                               p_msgv1 "LIKE SYST-MSGV1
                               p_msgv2 "LIKE SYST-MSGV2
                               p_msgv3 "LIKE SYST-MSGV3
                               p_msgv4 "LIKE SYST-MSGV4
                               p_level LIKE false
                               p_hefel LIKE t609i-hefel.
*-- Nicht bei offenen Geschäftsvorfällen
  CHECK vbrk-rfbsk CA 'CDJ' OR flg_simulation = true.

  IF p_msgty = con_msgty_i.
    CHECK p_uvmei = true.
  ENDIF.
  IF p_msgty = con_msgty_w.
    CHECK p_uvmew = true.
  ENDIF.

  READ TABLE incompletion_fields WITH KEY
                    hefel = p_hefel TRANSPORTING verei.
  CHECK sy-subrc = 0.

  IF reference_direction = con_export
     AND incompletion_fields-verei CN '02'.
    EXIT.
  ELSEIF reference_direction = con_import
     AND incompletion_fields-verei CN '01'.
    EXIT.
  ENDIF.

  IF p_level = con_level_global.
*-- Meldungsebene
*   CLEAR INCOMPLETION_DATA_HEADER-BELEGNUMR.
    incompletion_data_header-belegnumr = vbrk-vbeln.
    CLEAR incompletion_data_header-hauptposi.
    incompletion_data_header-msgid = p_msgid.
    incompletion_data_header-msgty = p_msgty.
    incompletion_data_header-msgno = p_msgno.
    incompletion_data_header-msgv1 = p_msgv1.
    incompletion_data_header-msgv2 = p_msgv2.
    incompletion_data_header-msgv3 = p_msgv3.
    incompletion_data_header-msgv4 = p_msgv4.
    incompletion_data_header-hefel = p_hefel.
    incompletion_data_header-uvlev = p_level.
    incompletion_data_header-arrivdepa = reference_direction.
    MOVE incompletion_data_header TO sav_incompletion_data_header.
    READ TABLE incompletion_data_header WITH KEY
                hauptposi = sav_incompletion_data_header-hauptposi
                msgid     = sav_incompletion_data_header-msgid
                msgty     = sav_incompletion_data_header-msgty
                msgno     = sav_incompletion_data_header-msgno
                msgv1     = sav_incompletion_data_header-msgv1
                msgv2     = sav_incompletion_data_header-msgv2
                msgv3     = sav_incompletion_data_header-msgv3
                msgv4     = sav_incompletion_data_header-msgv4
                hefel     = sav_incompletion_data_header-hefel
                uvlev     = sav_incompletion_data_header-uvlev.
    IF sy-subrc NE 0.
      APPEND incompletion_data_header.
    ENDIF.
    EXIT.
  ENDIF.

  IF p_level = con_level_header.
*-- Kopfebene
    incompletion_data_header-belegnumr = vbrk-vbeln.
    CLEAR: incompletion_data_header-hauptposi.
    incompletion_data_header-msgid = p_msgid.
    incompletion_data_header-msgty = p_msgty.
    incompletion_data_header-msgno = p_msgno.
    incompletion_data_header-msgv1 = p_msgv1.
    incompletion_data_header-msgv2 = p_msgv2.
    incompletion_data_header-msgv3 = p_msgv3.
    incompletion_data_header-msgv4 = p_msgv4.
    incompletion_data_header-hefel = p_hefel.
    incompletion_data_header-uvlev = p_level.
    incompletion_data_header-arrivdepa = reference_direction.
    MOVE incompletion_data_header TO sav_incompletion_data_header.
    READ TABLE incompletion_data_header WITH KEY
                belegnumr = sav_incompletion_data_header-belegnumr
                hauptposi = sav_incompletion_data_header-hauptposi
                msgid     = sav_incompletion_data_header-msgid
                msgty     = sav_incompletion_data_header-msgty
                msgno     = sav_incompletion_data_header-msgno
                msgv1     = sav_incompletion_data_header-msgv1
                msgv2     = sav_incompletion_data_header-msgv2
                msgv3     = sav_incompletion_data_header-msgv3
                msgv4     = sav_incompletion_data_header-msgv4
                hefel     = sav_incompletion_data_header-hefel
                uvlev     = sav_incompletion_data_header-uvlev.
    IF sy-subrc NE 0.
      APPEND incompletion_data_header.
    ENDIF.
  ELSEIF p_level = con_level_item.
*-- Positionsebene
    incompletion_data_item-belegnumr = vbrk-vbeln.
    incompletion_data_item-hauptposi = vbrp-posnr.
    incompletion_data_item-msgid = p_msgid.
    incompletion_data_item-msgty = p_msgty.
    incompletion_data_item-msgno = p_msgno.
    incompletion_data_item-msgv1 = p_msgv1.
    incompletion_data_item-msgv2 = p_msgv2.
    incompletion_data_item-msgv3 = p_msgv3.
    incompletion_data_item-msgv4 = p_msgv4.
    incompletion_data_item-hefel = p_hefel.
    incompletion_data_item-uvlev = p_level.
    incompletion_data_item-arrivdepa = reference_direction.
    APPEND incompletion_data_item.
  ENDIF.

ENDFORM.                               " INCOMPLETION_APPEND

*&---------------------------------------------------------------------*
*&      Form  INCOMPLETION_CHECK_RELEVANCE
*&---------------------------------------------------------------------*
*       Unvollständigkeitsprüfung für dieses Feld notwendig?
*----------------------------------------------------------------------*
FORM incompletion_check_relevance USING p_incomp_hefel
                                           LIKE t609i-hefel
                                  CHANGING p_flg_icomp LIKE space.

  CHECK p_proto = 'B' OR
        p_proto = 'E' OR
        p_proto = 'F'.

  READ TABLE incompletion_fields WITH KEY
                 hefel = p_incomp_hefel
                         BINARY SEARCH TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    p_flg_icomp = true.
  ELSE.
    p_flg_icomp = false.
  ENDIF.

ENDFORM.                               " INCOMPLETION_APPEND

*----------------------------------------------------------------------*
*       FORM  INCO_ZWEI
*----------------------------------------------------------------------*
*       Dieses Kennzeichen wird für das Land Frankreich und Spanien    *
*       als Zusatz zum INCOTERMS benötigt.                             *
*----------------------------------------------------------------------*
*       Dies wird folgendermaßen ermittelt :                           *
*                                                                      *
*       INCOTERMS      Eingang      Versendung                         *
*       ---------      -------      ----------                         *
*       EXW            2            1                                  *
*       FCA            1            2                                  *
*       FAS            1            2                                  *
*       FOB            1            2                                  *
*       CFR            1            2                                  *
*       CIF            1            2                                  *
*       CPT            1            2                                  *
*       CIP            1            2                                  *
*       DAF            1            2                                  *
*       DES            1            2                                  *
*       DEQ            1            2                                  *
*       DDU            1            2                                  *
*       DDP            1            2                                  *
*                                                                      *
*----------------------------------------------------------------------*
FORM inco_zwei CHANGING spanienid LIKE veiav-spanienid.

  CASE vbrk-inco1(1).
    WHEN 'C'.
      spanienid = '2'.
    WHEN 'E'.
      spanienid = '1'.
    WHEN 'F'.
      spanienid = '2'.
    WHEN 'D'.
      spanienid = '2'.
    WHEN OTHERS.
      spanienid = '2'.
  ENDCASE.

ENDFORM.                    "INCO_ZWEI

*----------------------------------------------------------------------*
*       FORM  INCO_ZWEI_ARRIVALS
*----------------------------------------------------------------------*
*       Dieses Kennzeichen wird für das Land Frankreich und Spanien    *
*       als Zusatz zum INCOTERMS benötigt.                             *
*----------------------------------------------------------------------*
*       Dies wird folgendermaßen so ermitteln :                        *
*                                                                      *
*       INCOTERMS      Eingang      Versendung                         *
*       ---------      -------      ----------                         *
*       EXW            2            1                                  *
*       FCA            1            2                                  *
*       FAS            1            2                                  *
*       FOB            1            2                                  *
*       CFR            1            2                                  *
*       CIF            1            2                                  *
*       CPT            1            2                                  *
*       CIP            1            2                                  *
*       DAF            1            2                                  *
*       DES            1            2                                  *
*       DEQ            1            2                                  *
*       DDU            1            2                                  *
*       DDP            1            2                                  *
*                                                                      *
*----------------------------------------------------------------------*
FORM inco_zwei_arrivals CHANGING spanienid LIKE veiav-spanienid.

  CASE vbrk-inco1(1).
    WHEN 'C'.
      spanienid = '1'.
    WHEN 'E'.
      spanienid = '2'.
    WHEN 'F'.
      spanienid = '1'.
    WHEN 'D'.
      spanienid = '1'.
    WHEN OTHERS.
      spanienid = '1'.
  ENDCASE.

ENDFORM.                    "INCO_ZWEI_ARRIVALS


*----------------------------------------------------------------------*
*        FORM GRENZWERT_WERK                                           *
*----------------------------------------------------------------------*
*        Umrechnung des Grenzwerts von der Hauswährung des Belegs      *
*        (aus Buchungskreis) in die Währung des Werks                  *
*----------------------------------------------------------------------*
FORM grenzwert_werk
     USING    h_datum   LIKE syst-datum
     CHANGING h_grwrt   LIKE eipo-grwrt
              h_currkey LIKE t001-waers.

  CLEAR: t005-waers, t005-kurst.

*------- Lesen der Währung des Landes und des Umrechnungskurstyps
*------- Falls Umrechnungskurstyp = ' ' --> Mittelkurs 'M'

  SELECT SINGLE land1
                      FROM t001w INTO t001w-land1
                      WHERE werks EQ vbrp-werks.

  IF sy-subrc IS INITIAL.

    SELECT SINGLE waers
                  kurst
                       FROM t005 INTO CORRESPONDING FIELDS OF t005
                       WHERE land1 EQ t001w-land1.

    IF sy-subrc IS INITIAL.
      h_currkey = t005-waers.
*------- Umrechnung nur, wenn Hauswährung <> Werkswährung
      IF t001-waers NE t005-waers.
        IF t005-kurst IS INITIAL.
          t005-kurst = con_kurstyp_mitte.
        ENDIF.

*------- Umrechnung Grenzübergangswert von Hauswährung in Belegwährung
        IF t001-waers NE vbrk-waerk.
          CALL FUNCTION 'CONVERT_TO_FOREIGN_CURRENCY'
            EXPORTING
              date             = h_datum
              foreign_currency = vbrk-waerk
              local_amount     = h_grwrt
              local_currency   = t001-waers
              rate             = vbrp-kursk
              type_of_rate     = con_kurstyp_mitte
            IMPORTING
              foreign_amount   = h_grwrt
            EXCEPTIONS
              no_rate_found    = 4.
        ENDIF.
*------- Umrechnung Grenzübergangswert von Belegwährung in Werkswährung
        IF sy-subrc IS INITIAL.
          IF t005-waers NE vbrk-waerk.
            CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
              EXPORTING
                date             = h_datum
                foreign_amount   = h_grwrt
                foreign_currency = vbrk-waerk
                local_currency   = t005-waers
                rate             = 0
                type_of_rate     = t005-kurst
              IMPORTING
                local_amount     = h_grwrt
              EXCEPTIONS
                no_rate_found    = 4.

            IF sy-subrc IS INITIAL.
*------- Nada
            ELSE.
              CLEAR: h_grwrt.
            ENDIF.
          ENDIF.
        ELSE.
          CLEAR: h_grwrt.
        ENDIF.

      ENDIF.
    ELSE.
      CLEAR: h_grwrt.
    ENDIF.
  ELSE.
    CLEAR: h_grwrt.
  ENDIF.

ENDFORM.                    "GRENZWERT_WERK

*----------------------------------------------------------------------*
*        FORM RECHNWERT_WERK                                           *
*----------------------------------------------------------------------*
*        Umrechnung des Rechnungswerts des Belegs in die Währung       *
*        des Werks                                                     *
*----------------------------------------------------------------------*
*        Routine GRENZWERT_WERK MUSS vorher laufen !                   *
*----------------------------------------------------------------------*
FORM rechnwert_werk
     USING    h_datum   LIKE syst-datum
     CHANGING h_netwr   LIKE vbrp-netwr
              h_currkey LIKE t001-waers.

  h_currkey = t005-waers.
  CLEAR: sy-subrc.

  IF    t005-waers IS INITIAL
     OR t005-kurst IS INITIAL
     OR t001-waers IS INITIAL.
    CLEAR: h_netwr.
  ELSE.
*------- Umrechnung Rechnungswert von Belegwährung in Hauswährung
    IF t001-waers NE vbrk-waerk.
      CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
        EXPORTING
          date             = h_datum
          foreign_amount   = h_netwr
          foreign_currency = vbrk-waerk
          local_currency   = t001-waers
          rate             = vbrp-kursk
          type_of_rate     = con_kurstyp_mitte
        IMPORTING
          local_amount     = h_netwr
        EXCEPTIONS
          no_rate_found    = 4.
    ENDIF.

*------- Umrechnung von Hauswährung in Werkswährung
    IF sy-subrc IS INITIAL.
      IF t005-waers NE t001-waers.
*------- Kurstyp Intrastat
        IF kurstyp = con_kurstyp_intra.
          t005-kurst = kurstyp.
        ENDIF.

        CALL FUNCTION 'CONVERT_TO_FOREIGN_CURRENCY'
          EXPORTING
            date             = h_datum
            foreign_currency = t005-waers
            local_amount     = h_netwr
            local_currency   = t001-waers
            rate             = 0
            type_of_rate     = t005-kurst
          IMPORTING
            foreign_amount   = h_netwr
          EXCEPTIONS
            no_rate_found    = 4.

        IF sy-subrc IS INITIAL.
*------- Nada
        ELSE.
          CLEAR: h_netwr.
        ENDIF.

      ENDIF.
    ELSE.
      CLEAR: h_netwr.
    ENDIF.
  ENDIF.

ENDFORM.                    "RECHNWERT_WERK

*&---------------------------------------------------------------------*
*&      Form  GET_EURO_CURRENCY_FLAG
*&---------------------------------------------------------------------*
FORM get_euro_currency_flag USING    p_p_waers LIKE tcurc-waers
                            CHANGING p_p_euroc LIKE veiav-flageuroc.

  DATA: con_eur LIKE tcurc-isocd VALUE 'EUR'.

  SELECT SINGLE * FROM tcurc WHERE waers = p_p_waers.
  IF sy-subrc IS INITIAL.
    IF tcurc-isocd = con_eur.
      p_p_euroc = true.
    ELSE.
      p_p_euroc = false.
    ENDIF.
  ENDIF.

ENDFORM.                               " GET_EURO_CURRENCY_FLAG

*&---------------------------------------------------------------------*
*&      Form  STORNO_HANDLING
*&---------------------------------------------------------------------*
*       Stornos erkennen und Referenzdaten ermitteln
*----------------------------------------------------------------------*
FORM storno_handling USING svbrp STRUCTURE vbrp
                  CHANGING p_irefmonat LIKE veiav-irefmonat
                           p_irefejahr LIKE veiav-irefejahr
                           p_irefbeleg LIKE veiav-irefbeleg
                           p_irefposit LIKE veiav-irefposit.

  DATA: ls_vbrk TYPE vbrk.
  DATA: ls_vbrp TYPE vbrp.

  DATA: BEGIN OF svbrk.
          INCLUDE STRUCTURE vbrk.
  DATA: END OF svbrk.
  DATA: BEGIN OF svbfa.
          INCLUDE STRUCTURE vbfa.
  DATA: END OF svbfa.

  MOVE vbrk TO ls_vbrk.
  MOVE vbrp TO ls_vbrp.

  IF vbrk-vbtyp = 'N'.

*-- Holen des Referenzdatums
    IF p_datum = 'A'.
      SELECT SINGLE fbuda FROM vbrp INTO vbrp-fbuda
                                      WHERE vbeln = ls_vbrk-sfakn
                                        AND posnr = ls_vbrp-posnr.
      p_irefmonat = vbrp-fbuda+4(2).
      p_irefejahr = vbrp-fbuda(4).
    ELSE.
      SELECT SINGLE fkdat FROM vbrk INTO vbrk-fkdat
                                      WHERE vbeln = ls_vbrk-sfakn.
      p_irefmonat = vbrk-fkdat+4(2).
      p_irefejahr = vbrk-fkdat(4).
    ENDIF.
    p_irefbeleg = ls_vbrk-sfakn.
    p_irefposit = ls_vbrp-posnr.

  ELSE.

*-- Storno zum Fakturabeleg ermitteln
    CHECK: NOT svbrp-vgbel IS INITIAL,
           NOT svbrp-vgpos IS INITIAL.

    SELECT * FROM vbfa INTO svbfa
                       WHERE vbelv = svbrp-vgbel
                         AND posnv = svbrp-vgpos
                         AND plmin = '-'.
      IF svbrk-vbeln NE svbfa-vbeln.
        SELECT SINGLE * FROM vbrk INTO svbrk
                           WHERE vbeln = svbfa-vbeln.
      ENDIF.

      IF sy-subrc = 0 AND svbrk-sfakn = svbrp-vbeln.
*-- Stornierung liegt vor --> Refernzdaten retten
        IF p_datum = 'A'.
          SELECT SINGLE fbuda FROM vbrp INTO vbrp-fbuda
                                          WHERE vbeln = svbrk-vbeln
                                            AND posnr = ls_vbrp-posnr.
          p_irefmonat = vbrp-fbuda+4(2).
          p_irefejahr = vbrp-fbuda(4).
        ELSE.
          p_irefmonat = svbrk-fkdat+4(2).
          p_irefejahr = svbrk-fkdat(4).
        ENDIF.
        p_irefbeleg = svbrk-vbeln.
        p_irefposit = ls_vbrp-posnr.
        EXIT.
      ENDIF.
    ENDSELECT.

  ENDIF.

  vbrk = ls_vbrk. vbrp = ls_vbrp.

ENDFORM.                    "STORNO_HANDLING

*&---------------------------------------------------------------------*
*&      Form  TUNING_VXV
*&---------------------------------------------------------------------*
*       Maßnahmen zur Verbessserung der Laufzeit der log. DB VXV
*----------------------------------------------------------------------*
FORM tuning_vxv.

*-- Zeitraum
  IF p_datum = 'A'.
    dd_fbuda-sign = 'I'. dd_fbuda-option = 'BT'.
    dd_fbuda-low(4) = p_gjahr.
    dd_fbuda-low+4(2) = p_monat.
    dd_fbuda-low+6(2) = '01'.
    dd_fbuda-high = dd_fbuda-low.
    dd_fbuda-high+6(2) = '31'.
    APPEND dd_fbuda.
  ELSE.
    dd_fkdat-sign = 'I'. dd_fkdat-option = 'BT'.
    dd_fkdat-low(4) = p_gjahr.
    dd_fkdat-low+4(2) = p_monat.
    dd_fkdat-low+6(2) = '01'.
    dd_fkdat-high = dd_fkdat-low.
    dd_fkdat-high+6(2) = '31'.
    APPEND dd_fkdat.
  ENDIF.

*-- Exportkennzeichen
*-- ab '99 auf EXNUM umgestellt wegen Einschlußkennzeichen
* DD_EXPKZ-SIGN = 'I'. DD_EXPKZ-OPTION = 'EQ'.
* DD_EXPKZ-LOW = 'X'.  APPEND DD_EXPKZ.
* DD_EXPKZ-LOW = 'Y'.  APPEND DD_EXPKZ.
* DD_EXPKZ-LOW = 'Z'.  APPEND DD_EXPKZ.
  dd_exnum-sign = 'E'. dd_exnum-option = 'EQ'.
  CLEAR dd_exnum-low.
  APPEND dd_exnum.

*-- Buchungsstatus
  IF flg_simulation = true.
    dd_rfbsk-sign = 'E'. dd_rfbsk-option = 'EQ'.
    dd_rfbsk-low  = 'C'.
    APPEND dd_rfbsk.
    dd_rfbsk-low  = 'E'.
    APPEND dd_rfbsk.
  ELSE.
    dd_rfbsk-sign = 'E'. dd_rfbsk-option = 'EQ'.
    dd_rfbsk-low  = 'E'.
    APPEND dd_rfbsk.
  ENDIF.

*  ELSE.
*    DD_RFBSK-SIGN = 'I'. DD_RFBSK-OPTION = 'EQ'.
*    DD_RFBSK-LOW = 'C'. APPEND DD_RFBSK.
*    DD_RFBSK-LOW = 'D'. APPEND DD_RFBSK.
*    DD_RFBSK-LOW = 'J'. APPEND DD_RFBSK.
*    DD_RFBSK-SIGN = 'E'. DD_RFBSK-OPTION = 'EQ'.
*    DD_RFBSK-LOW = 'A'. APPEND DD_RFBSK.
*  ENDIF.

ENDFORM.                    "TUNING_VXV

*&---------------------------------------------------------------------*
*&      Form  CHECK_P_WAERS
*&---------------------------------------------------------------------*
*       Prüfungen auf die Meldewährung
*----------------------------------------------------------------------*
FORM check_p_waers.

  IF p_waers IS INITIAL.
    READ TABLE t005_tab WITH KEY land1 = p_milnd BINARY SEARCH.
    IF sy-subrc IS INITIAL.
      IF t005_tab-waers IS INITIAL.
        CLEAR t005_tab.
        SET CURSOR FIELD 'P_WAERS'.
        MESSAGE e471.
      ELSE.
        local_currency = t005_tab-waers.
      ENDIF.
    ENDIF.
    p_waers = local_currency.
  ELSE.
    IF p_waers NE tcurc-waers.
      SELECT SINGLE * FROM tcurc WHERE waers = p_waers.
      IF NOT sy-subrc IS INITIAL.
        SET CURSOR FIELD 'P_WAERS'.
        MESSAGE e146 WITH p_waers.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                               " CHECK_P_WAERS

*&---------------------------------------------------------------------*
*&      Form  CALL_CUSTOMER_FUNCTION
*&---------------------------------------------------------------------*
*       Aufruf der User Exits zur Manipulation von Meldedaten.
*       Es werden zwei User Exits prozessiert, zum Zeitpunkt
*       der noch ungefüllten Tabellenstrukturen VEIAV, VEXAV etc.,
*       sowie zum Zeitpunkt der vom Selektionsprogramm gefüllten
*       Tabellenfelder.
*----------------------------------------------------------------------*
*      -->P_P_MILND  text
*----------------------------------------------------------------------*
FORM call_customer_function  USING
                             p_p_milnd LIKE t609i-land1
                             p_reporting_type TYPE v50g_i_reporting_type
                             p_direction LIKE t609i-verei
                             p_reporting_year LIKE veiav-datumjahr
                             p_reporting_month LIKE veiav-datummona
                             p_p_waers LIKE rvsel-gwaer
                             p_process_step
                 CHANGING    p_exclude_from_selection
                             p_vbrk
                             p_vbrp
                             p_eikp
                             p_eipo
                             p_veiav
                             p_vexav
                             p_vexav_var           "<<< insert HP_358414
                             p_vekaa
                             p_vekab
                             p_vekac
                             p_vesed.

  FIELD-SYMBOLS: <ls_db_reporting_record_bef>.
  FIELD-SYMBOLS: <ls_db_reporting_record>.
  FIELD-SYMBOLS: <lv_belegnumr>,
                 <lv_hauptposi>.
  FIELD-SYMBOLS: <lv_fieldvalue>.
  DATA: lv_tabix LIKE sy-tabix.
  DATA: ls_incomp_header TYPE v50g_incompletion_data_struc,
        ls_incomp_item   TYPE v50g_incompletion_data_struc.

  IF p_process_step = 'U'.
***************************************************************
*   SAP GTS ECR / begin
***************************************************************
*   do not perform customer function at level 'U' in case of
*   call from ECR extractor
    IF p_proto CA 'ST'.
      EXIT.
    ENDIF.
***************************************************************
*   SAP GTS ECR / end
***************************************************************
    CASE p_reporting_type.
      WHEN con_reporting_type_i.
        ASSIGN LOCAL COPY OF p_veiav
                     TO <ls_db_reporting_record_bef>.
        ASSIGN p_veiav TO <ls_db_reporting_record>.
      WHEN con_reporting_type_e.
        ASSIGN LOCAL COPY OF p_vexav
                     TO <ls_db_reporting_record_bef>.
        ASSIGN p_vexav TO <ls_db_reporting_record>.
      WHEN con_reporting_type_k.


      WHEN con_reporting_type_c.
        ASSIGN LOCAL COPY OF p_vexav_var
                     TO <ls_db_reporting_record_bef>.
        ASSIGN p_vexav_var TO <ls_db_reporting_record>.
      WHEN con_reporting_type_s.
        ASSIGN LOCAL COPY OF p_vesed
                     TO <ls_db_reporting_record_bef>.
        ASSIGN p_vesed TO <ls_db_reporting_record>.
    ENDCASE.
    IF p_reporting_type <> con_reporting_type_k.
      ASSIGN COMPONENT con_belegnumr OF STRUCTURE
                       <ls_db_reporting_record> TO <lv_belegnumr>.
      ASSIGN COMPONENT con_hauptposi OF STRUCTURE
                       <ls_db_reporting_record> TO <lv_hauptposi>.
    ENDIF.
  ENDIF.

  CALL FUNCTION 'RV_FTT_GOV_CARRIER_USER_EXIT'
    EXPORTING
      i_country                 = p_p_milnd
      i_reporting_type          = p_reporting_type
      i_direction               = p_direction
      i_reporting_year          = p_reporting_year
      i_reporting_month         = p_reporting_month
      i_reporting_currency      = p_p_waers
      i_process_step            = p_process_step
    IMPORTING
      e_exclude_from_selection  = p_exclude_from_selection
    CHANGING
      c_sd_invoice_header       = p_vbrk
      c_sd_invoice_line_item    = p_vbrp
      c_foreign_trade_header    = p_eikp
      c_foreign_trade_line_item = p_eipo
      c_record_intrastat        = p_veiav
      c_record_extrastat        = p_vexav
      c_record_kobra_a          = p_vekaa
      c_record_kobra_b          = p_vekab
      c_record_kobra_c          = p_vekac
*     C_RECORD_VAR              = P_VEXAV    "<<< delete HP_358414
      c_record_var              = p_vexav_var "<<< insert HP_358414
      c_record_vesed            = p_vesed
    EXCEPTIONS
      wrong_process_step        = 1
      wrong_direction           = 2
      wrong_reporting_type      = 3
      OTHERS                    = 4.

  IF sy-subrc <> 0.
    IF 1 = 2. ENDIF.
  ENDIF.

  CHECK p_process_step = 'U'.
  CHECK p_reporting_type <> con_reporting_type_k.
*-- Im Exit ergänzte Daten aus dem Unvollständigkeitsprotokoll
*-- entfernen.
  IF <ls_db_reporting_record_bef> <> <ls_db_reporting_record>.
*-- Prüfung für Fehler auf gobaler und Kopfebene
    LOOP AT incompletion_data_header INTO ls_incomp_header
                WHERE belegnumr = <lv_belegnumr>
                  AND NOT hefel IS INITIAL
                  AND msgty     = con_msgty_e.
      lv_tabix = sy-tabix.
      ASSIGN COMPONENT ls_incomp_header-hefel
                       OF STRUCTURE <ls_db_reporting_record> TO
                       <lv_fieldvalue>.
      IF sy-subrc = 0 AND
         NOT <lv_fieldvalue> IS INITIAL.
*------ Merkmal wurde per Exit ergänzt.
        DELETE incompletion_data_header INDEX lv_tabix.
      ENDIF.
    ENDLOOP.
*-- Prüfung für Fehler auf Positionsebene
    LOOP AT incompletion_data_item INTO ls_incomp_item
                WHERE belegnumr = <lv_belegnumr>
                  AND hauptposi = <lv_hauptposi>
                  AND NOT hefel IS INITIAL
                  AND uvlev     = con_level_item
                  AND msgty     = con_msgty_e.
      lv_tabix = sy-tabix.
      ASSIGN COMPONENT ls_incomp_item-hefel
                       OF STRUCTURE <ls_db_reporting_record> TO
                       <lv_fieldvalue>.
      IF sy-subrc = 0 AND
         NOT <lv_fieldvalue> IS INITIAL.
*------ Merkmal wurde per Exit ergänzt.
        DELETE incompletion_data_item INDEX lv_tabix.
      ENDIF.
    ENDLOOP.

  ENDIF.

ENDFORM.                               " CALL_CUSTOMER_FUNCTION
*&---------------------------------------------------------------------*
*&      Form  DETERMINE_PLANTS_FOR_SELECTION
*&---------------------------------------------------------------------*
*       Werke für die Selektion festlegen, sofern keine über DD_WERKS
*       durch den Anwender getroffen wurden.
*----------------------------------------------------------------------*
FORM determine_plants_for_selection.

  flg_check_plants_vlfkz = false.

  DESCRIBE TABLE dd_werks LINES sy-tfill.
  IF sy-tfill IS INITIAL.
    SELECT bwkey FROM t001k INTO TABLE int_t001k
                    WHERE bukrs IN dd_bukrs.
    IF sy-subrc IS INITIAL.
*-- Einlesen der Werke
      SELECT werks land1 vlfkz FROM t001w
                   INTO CORRESPONDING FIELDS OF TABLE t001w_tab
                        FOR ALL ENTRIES IN int_t001k
                        WHERE bwkey =  int_t001k-bwkey.

      DELETE t001w_tab WHERE land1 NE p_milnd.
      DESCRIBE TABLE t001w_tab LINES sy-tfill.
      IF NOT sy-tfill IS INITIAL.
        DELETE t001w_tab WHERE NOT vlfkz IS INITIAL.
        IF sy-subrc IS INITIAL.
          flg_check_plants_vlfkz = true.
        ENDIF.
      ELSE.
        flg_check_plants_vlfkz = false.
      ENDIF.
    ENDIF.

*-- Es sind bereits Einträge eingegeben worden --> Prüfung
  ELSE.
    SELECT werks vlfkz FROM t001w
                 INTO CORRESPONDING FIELDS OF TABLE t001w_tab
*                     FOR ALL ENTRIES IN DD_WERKS
                        WHERE werks IN dd_werks.
    IF sy-subrc IS INITIAL.
*-- Filialen etc. löschen
      DELETE t001w_tab WHERE NOT vlfkz IS INITIAL.
      IF sy-subrc IS INITIAL.
        flg_check_plants_vlfkz = true.
      ENDIF.
    ENDIF.
  ENDIF.

  IF flg_check_plants_vlfkz = true.
    SORT t001w_tab BY werks.
  ENDIF.

ENDFORM.                               " DETERMINE_PLANTS_FOR_SELECTION

*&---------------------------------------------------------------------*
*&      Form  ENQUEUE_DEQUEUE_TABLE
*&---------------------------------------------------------------------*
*       Tabellen für Echlauf sperren
*----------------------------------------------------------------------*
*  -->  P_ACTION   : 'E' Sperren, 'D' Entsperren
*  -->  P_VIEW_NAME: View-/Tabellenname
*----------------------------------------------------------------------*
FORM enqueue_dequeue_table USING p_action TYPE c
                                 p_view_name LIKE ocus-table.
  DATA: g_uname LIKE sy-uname.
  CALL FUNCTION 'VIEW_ENQUEUE'
    EXPORTING
      action               = p_action
      enqueue_mode         = 'E'
      view_name            = p_view_name
    EXCEPTIONS
      client_reference     = 1
      foreign_lock         = 2
      invalid_action       = 3
      invalid_enqueue_mode = 4
      system_failure       = 5
      table_not_found      = 6.

  IF NOT ( sy-subrc IS INITIAL ).
    CASE sy-subrc.
      WHEN 2.
*------- Tabelle p_view_name ist durch anderen Benutzer gesperrt.
        PERFORM read_enqueue USING p_view_name
                             CHANGING  g_uname.
        MESSAGE i369 WITH p_view_name g_uname.
        LEAVE LIST-PROCESSING.
      WHEN OTHERS.
        MESSAGE i253 WITH p_view_name sy-subrc.
        LEAVE LIST-PROCESSING.
    ENDCASE.
  ENDIF.

ENDFORM.                               " ENQUEUE_DEQUEUE_TABLE

*&---------------------------------------------------------------------*
*&      Form  READ_ENQUEUE
*&---------------------------------------------------------------------*
*       Der Name des Users, der die Tabelle l_view_name
*       sperrt, wird gelesen.
*----------------------------------------------------------------------*
FORM read_enqueue USING l_view_name LIKE ocus-table
                  CHANGING
                    loc_uname        LIKE sy-uname.

  DATA: loc_enq LIKE seqg3 OCCURS 0 WITH HEADER LINE.
  DATA: hlp_gclient LIKE seqg3-gclient.

  hlp_gclient = sy-mandt.

  CALL FUNCTION 'ENQUEUE_READ'
    EXPORTING
      gclient               = hlp_gclient
      gname                 = 'RSTABLE'
      guname                = space
    TABLES
      enq                   = loc_enq
    EXCEPTIONS
      communication_failure = 1
      system_failure        = 2
      OTHERS                = 3.
  IF sy-subrc IS INITIAL.
    LOOP AT loc_enq
            WHERE garg CS l_view_name.
    ENDLOOP.
    IF sy-subrc IS INITIAL.
      loc_uname = loc_enq-guname.
    ENDIF.
  ENDIF.

ENDFORM.                               " READ_ENQUEUE
*&---------------------------------------------------------------------*
*&      Form  CHECK_CURRENCIES
*&---------------------------------------------------------------------*
*       Prüfung, ob Meldewährung und Währung nicht gelöschter
*       Datensätze identisch sind.
*----------------------------------------------------------------------*
*      ---> P_VIEW_NAME: View-/Tabellenname für eventuelles Entsperren
*----------------------------------------------------------------------*
FORM check_currencies USING p_view_name LIKE ocus-table.

  LOOP AT undeleted_items TRANSPORTING NO FIELDS
                    WHERE ( rechnweeh NE local_currency
                       OR  grenzweeh NE local_currency )
                      AND ( NOT rechnweeh IS INITIAL
                            AND NOT grenzweeh IS INITIAL ).
    READ TABLE undeleted_items INDEX sy-tabix
     TRANSPORTING rechnweeh grenzweeh.
*-- Unterschiedliche Währungen gefunden
    PERFORM enqueue_dequeue_table USING 'D'
                                  p_view_name.
    MESSAGE i480 WITH local_currency text-t01
       undeleted_items-rechnweeh.
    LEAVE LIST-PROCESSING.
  ENDLOOP.

ENDFORM.                    "CHECK_CURRENCIES

*&---------------------------------------------------------------------*
*&      Form  CHECK_FREE_OF_CHARGE_ITEMS
*&---------------------------------------------------------------------*
*       Prüfen, ob es sich beim verwendeten Positionstypen
*       um eine kostenlose Position bzw. eine Position mit 100%-Rabatt
*       handelt.
*----------------------------------------------------------------------*
*  -->  P_PSTYV          Positionstyp
*  -->  P_PRSFD          Preisfindung durchfuehren
*  -->  P_NETWR          Nettowert
*  <--  P_FREE_OF_CHARGE Kennzeichen kostenlos ('X' ja, ' ' nein)
*----------------------------------------------------------------------*
FORM check_free_of_charge_items
                             USING    p_pstyv LIKE vbrp-pstyv
                                      p_prsfd LIKE vbrp-prsfd
                                      p_netwr LIKE vbrp-netwr
                             CHANGING p_free_of_charge LIKE false
                                      p_plants_abroad_invoice TYPE c.

  DATA: lv_plants_abroad_active LIKE bkpf-xusvr.
  p_plants_abroad_invoice = false.
  TABLES: tvap.

  p_free_of_charge = false.

  CHECK p_netwr IS INITIAL.

  IF tvap_tab-pstyv NE p_pstyv.
    READ TABLE tvap_tab WITH KEY pstyv = p_pstyv.
    IF NOT sy-subrc IS INITIAL.
*-- Keinen Eintrag in interner Tabelle gefunden, deswegen nachlesen
      SELECT SINGLE * FROM tvap WHERE pstyv = p_pstyv.
      IF sy-subrc IS INITIAL.
        tvap_tab-pstyv = tvap-pstyv.
        tvap_tab-prsfd = tvap-prsfd.
        tvap_tab-fkrel = tvap-fkrel.
        APPEND tvap_tab.
      ELSE.
        EXIT.
      ENDIF.
    ENDIF.
  ENDIF.

*-- Keine Preisfindung aktiv
  IF tvap_tab-prsfd IS INITIAL.
    p_free_of_charge = true.
  ENDIF.

*------- Preisfindung mit HW 33258 zur Errechnung des GRWR auch fuer
*------- kostenlose Positionen aktiv und Rechnungswert mit 100% Rabatt
*------- auf 0 ( = kostenlos ) reduziert <==> VBRP-PRSFD = 'B'
  IF NOT ( p_free_of_charge EQ true ) .
    IF ( p_prsfd EQ 'B' ) .
      p_free_of_charge = true.
    ENDIF.
  ENDIF.

*-- Rechnungswert wegen WIA Rechnung Null?
  IF tvap_tab-fkrel = 'J'.
    CALL FUNCTION 'CHECK_PLANTS_ABROAD_ACTIVE'
      EXPORTING
        i_cust        = 'X'
      IMPORTING
        e_fi_isactive = lv_plants_abroad_active.
    IF NOT lv_plants_abroad_active IS INITIAL.
      p_plants_abroad_invoice = true.
      p_free_of_charge = false.
    ENDIF.
  ENDIF.

ENDFORM.                               " CHECK_FREE_OF_CHARGE_ITEMS

*----------------------------------------------------------------------*
*       Form  GET_DEPARTMENTS
*----------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_VEIAV-BESTILAND  text                                      *
*----------------------------------------------------------------------*
*FORM GET_DEPARTMENTS CHANGING LAND LIKE VEIAV-BESTILAND.

*  IF MILND_ISO EQ CON_INTCA_DE.
*    IF T005-LANDA EQ CON_CODE_REUNION
*    OR T005-LANDA EQ CON_CODE_GUADELOUPE
*    OR T005-LANDA EQ CON_CODE_MARTINIQUE
*    OR T005-LANDA EQ CON_CODE_GUAYANA.
*      LAND = CON_CODE_FRANKREICH.
*    ENDIF.
*    IF T005-LANDA EQ CON_CODE_KANAREN.
*      LAND = CON_CODE_SPANIEN.
*    ENDIF.
*  ENDIF.

*ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CHECK_BATCHSPLIT_VALUES
*&---------------------------------------------------------------------*
*       Chargenpositionen mit Werten Null?                             *
*----------------------------------------------------------------------*
FORM check_batchsplit_values CHANGING ret_code LIKE sy-subrc.

  ret_code = 4.

*- Prüfen Chargenhauptposition
  IF  vbrp-charg IS INITIAL
  AND vbrp-vgtyp CA vbtyp_lief.
    CHECK vbrp-fkimg NE 0.
*- Prüfen Chargenunterposition
  ELSEIF  NOT vbrp-charg IS INITIAL
         AND NOT vbrp-uecha IS INITIAL
         AND     vbrp-uecha NE vbrp-posnr.
    CHECK vbrp-fkimg NE 0.
  ENDIF.

  ret_code = 0.

ENDFORM.                    "CHECK_BATCHSPLIT_VALUES


************************************************************************
*---                                                                ---*
*--- Routines to fill working tables                                ---*
*---                                                                ---*
************************************************************************

*----------------------------------------------------------------------*
*        FORM INVOICE_VALUE                                            *
*----------------------------------------------------------------------*
*        Umrechnung des Rechnungswerts des Belegs in die Meldewaehrung *
*----------------------------------------------------------------------*
FORM invoice_value
     USING    VALUE(h_p_dat) LIKE rvsel-p_datum
              VALUE(h_kurst) LIKE con_kurstyp_intra
              VALUE(h_mcurr) LIKE t005-waers            " Meldewaehrung
              VALUE(h_bcurr) LIKE vbrk-waerk            " Belegwaehrung
              VALUE(h_hcurr) LIKE t001-waers            " Hauswaehrung
              VALUE(h_kurrf) LIKE vbrk-kurrf
              VALUE(h_kursk) LIKE vbrp-kursk
              VALUE(h_fbuda) LIKE vbrp-fbuda
              VALUE(h_fkdat) LIKE vbrk-fkdat
              VALUE(h_brtwr) LIKE vbrp-brtwr
     CHANGING       h_netwr  LIKE vbrp-netwr
                    h_rechn  LIKE veiav-rechnwert
                    h_nweak  LIKE veiav-rechnweak
                    h_nweeh  LIKE veiav-rechnweeh
                    h_error  TYPE c.
  DATA:  h_datum LIKE syst-datum,
         h_exrat LIKE vbrp-kursk,
         h_subrc LIKE syst-subrc.

*------- Initialisierung
  CLEAR: h_error,
         h_nweak,
         h_nweeh.

*------- Datumsparameter
  IF h_p_dat = 'A'.
    h_datum = h_fbuda.
  ELSE.
    h_datum = h_fkdat.
  ENDIF.

*------- Setzen Nettowert (Kostenlose Lieferung, ...)
*  if h_netwr is initial.
*    h_netwr = h_brtwr.
*  endif.

*------- Setzen Umrechnungskurs
  IF NOT ( h_kurrf IS INITIAL ) .
    IF gv_tax_conv_factor IS INITIAL.
      h_exrat = h_kurrf.
    ELSE.
      h_exrat = gv_tax_conv_factor.  "Intrastat Czechia
    ENDIF.
  ELSE.
    h_exrat = h_kursk.
  ENDIF.

*------- Umrechnen Rechnungswert in Meldewaehrung
  IF NOT ( h_netwr IS INITIAL ).

    IF h_bcurr EQ h_mcurr.             " Belegwaehrung = Meldewaehrung
*------- Nada

    ELSE.                              " Belegwaehrung <> Meldewaehrung
      IF ( h_bcurr EQ h_hcurr ).       " Belegwaehrung =  Hauswaehrung
        " ---> Umrechnung B --> M
        CLEAR: h_exrat.
        PERFORM conv_to_local_curr USING    h_datum
                                              h_kurst
                                              h_bcurr
                                              h_mcurr
                                     CHANGING h_exrat
                                              h_netwr
                                              h_subrc.
        IF h_subrc NE 0.
          PERFORM incompletion_append USING syst-msgid
                                            con_msgty_e
                                            syst-msgno
                                            syst-msgv1
                                            syst-msgv2
                                            syst-msgv3
                                            syst-msgv4
                                            con_level_header
                                            con_rechnweak.
          h_error = true.
          EXIT.
        ENDIF.
      ELSE.                            " Belegwaehrung <> Meldewaehrung
        " Belegwaehrung <> Hauswaehrung
        IF ( h_hcurr EQ h_mcurr ).     " Hauswaehrung  =  Meldewaehrung
          " ---> Umrechnung B --> H (=M)

          IF h_kurst EQ con_kurstyp_intra.
            CLEAR: h_exrat.
          ENDIF.
          PERFORM conv_to_local_curr USING    h_datum
                                              h_kurst
                                              h_bcurr
                                              h_mcurr
                                     CHANGING h_exrat
                                              h_netwr
                                              h_subrc.
          IF h_subrc NE 0.
            PERFORM incompletion_append USING syst-msgid
                                              con_msgty_e
                                              syst-msgno
                                              syst-msgv1
                                              syst-msgv2
                                              syst-msgv3
                                              syst-msgv4
                                              con_level_header
                                              con_rechnweak.
            h_error = true.
            EXIT.
          ENDIF.
        ELSE.                          " Belegwaehrung <> Meldewaehrung
          " Belegwaehrung <> Hauswaehrung
          " Hauswaehrung  <> Meldewaehrung
          " ---> Umrechnung B --> M
          CLEAR h_exrat.
          PERFORM conv_to_local_curr USING    h_datum
                                              h_kurst
                                              h_bcurr
                                              h_mcurr
                                     CHANGING h_exrat
                                              h_netwr
                                              h_subrc.
          IF h_subrc NE 0.
            PERFORM incompletion_append USING syst-msgid
                                              con_msgty_e
                                              syst-msgno
                                              syst-msgv1
                                              syst-msgv2
                                              syst-msgv3
                                              syst-msgv4
                                              con_level_header
                                              con_rechnweak.
            h_error = true.
            EXIT.
          ENDIF.

        ENDIF.                         " Hauswaehrung  =  Meldewaehrung

      ENDIF.                           " Belegwaehrung =  Hauswaehrung

    ENDIF.                             " Belegwaehrung = Meldewaehrung

  ENDIF.

*------- Rechnungswert ungerundet
  h_nweak = h_netwr.
  h_nweeh = h_mcurr.

*------- Ergebnisse
  IF h_netwr IS INITIAL.
    h_error = 'X'.
  ENDIF.

ENDFORM.                    "INVOICE_VALUE

*&---------------------------------------------------------------------*
*&      Form  READ_BKPF
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM read_bkpf USING    ps_vbrk            TYPE vbrk
               CHANGING pv_tax_conv_factor TYPE txkrs_bkpf.

  DATA: BEGIN OF xbkpf OCCURS 1.
      INCLUDE STRUCTURE bkpf.
  DATA: END OF xbkpf.
  DATA:    lv_gjahr TYPE gjahr.
  STATICS: sv_vbeln TYPE vbeln_vf.


  CHECK  p_milnd EQ con_intca_cz.   "Czechia only

  IF ps_vbrk-vbeln NE sv_vbeln.

    CLEAR pv_tax_conv_factor.

*-- get VAT conversion factor from FI document
    lv_gjahr = ps_vbrk-fkdat(04).
    sv_vbeln = ps_vbrk-vbeln.

    IF ps_vbrk-rfbsk CA 'CDJ'.
      CALL FUNCTION 'FI_DOCUMENT_READ'
        EXPORTING
          i_awtyp     = 'VBRK'
          i_awref     = sv_vbeln
          i_awsys     = ps_vbrk-logsys
          i_bukrs     = ps_vbrk-bukrs
          i_gjahr     = lv_gjahr
        TABLES
          t_bkpf      = xbkpf
        EXCEPTIONS
          wrong_input = 1
          not_found   = 2.

      IF sy-subrc EQ 0.
        LOOP AT xbkpf WHERE gjahr EQ lv_gjahr.
          IF xbkpf-txkrs IS NOT INITIAL.
            pv_tax_conv_factor = xbkpf-txkrs.
          ENDIF.
          EXIT.
        ENDLOOP.
        IF sy-subrc NE 0.
          LOOP AT xbkpf.
            IF xbkpf-txkrs IS NOT INITIAL.
              pv_tax_conv_factor = xbkpf-txkrs.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDIF.

ENDFORM.
*----------------------------------------------------------------------*
*        FORM STATISTICAL_VALUE                                        *
*----------------------------------------------------------------------*
*        Umrechnung des Grenzuebergangswerts des Belegs in die         *
*        Meldewaehrung                                                 *
*----------------------------------------------------------------------*
*        ACHTUNG :  Grenzuebergangswert ist in HAUSWAEHRUNG !!!
*----------------------------------------------------------------------*
FORM statistical_value
     USING    VALUE(h_p_dat) LIKE rvsel-p_datum
              VALUE(h_kurst) LIKE con_kurstyp_intra
              VALUE(h_mcurr) LIKE t005-waers            " Meldewaehrung
              VALUE(h_bcurr) LIKE vbrk-waerk            " Belegwaehrung
              VALUE(h_hcurr) LIKE eikp-grwcu            " Hauswaehrung
              VALUE(h_kurrf) LIKE vbrk-kurrf
              VALUE(h_kursk) LIKE vbrp-kursk
              VALUE(h_fbuda) LIKE vbrp-fbuda
              VALUE(h_fkdat) LIKE vbrk-fkdat
     CHANGING       h_netwr  LIKE eipo-grwrt
*                   H_GRENZ  LIKE VEIAV-GRENZWERT
                    h_zweak  LIKE veiav-grenzweak
                    h_zweeh  LIKE veiav-grenzweeh
                    h_error  TYPE c.

  DATA:  h_datum LIKE syst-datum,
         h_exrat LIKE vbrp-kursk,
         h_grwrt LIKE vbrp-netwr,
         h_subrc LIKE syst-subrc.

*------- Initialisierung
  CLEAR: h_error,
         h_zweak,
         h_zweeh.

*------- Wertuebernahme
  h_grwrt = h_netwr.

*------- Datumsparameter
  IF h_p_dat = 'A'.
    h_datum = h_fbuda.
  ELSE.
    h_datum = h_fkdat.
  ENDIF.

*------- Setzen Umrechnungskurs
  IF NOT ( h_kurrf IS INITIAL ) .
    h_exrat = h_kurrf.
  ELSE.
    h_exrat = h_kursk.
  ENDIF.

*------- Umrechnen Grenzuebergangswert in Meldewaehrung
  IF NOT ( h_grwrt IS INITIAL ).

    IF h_mcurr EQ h_hcurr.             " Meldewaehrung =  Hauswaehrung
*------- Nada                          " ---> Keine Umrechnung
**** BEGIN of ALRK145204
      IF h_kurst EQ con_kurstyp_intra.
        IF ( h_hcurr EQ h_bcurr ).     " Hauswaehrung  =  Belegwaehrung
*------- Nada                          " ---> Keine Umrechnung
        ELSE.                          " Hauswaehrung  <>  Belegwaehrung
          " ---> Umrechnung H (G) -> B
          PERFORM conv_to_foreign_curr USING h_datum
                                             con_kurstyp_mitte
                                             h_bcurr
                                             h_hcurr
                                    CHANGING h_exrat
                                             h_grwrt
                                             h_subrc.
          IF h_subrc NE 0.
            PERFORM incompletion_append USING syst-msgid
                                              con_msgty_e
                                              syst-msgno
                                              syst-msgv1
                                              syst-msgv2
                                              syst-msgv3
                                              syst-msgv4
                                              con_level_header
                                              con_grenzweak.
            h_error = true.
            EXIT.
          ENDIF.

          IF ( h_bcurr NE h_mcurr ).   " Belegwaehrung <> Meldewaehrung
            CLEAR: h_exrat.
            PERFORM conv_to_local_curr USING    h_datum
                                                h_kurst
                                                h_bcurr
                                                h_mcurr
                                       CHANGING h_exrat
                                                h_grwrt
                                                h_subrc.
            IF h_subrc NE 0.
              PERFORM incompletion_append USING syst-msgid
                                                con_msgty_e
                                                syst-msgno
                                                syst-msgv1
                                                syst-msgv2
                                                syst-msgv3
                                                syst-msgv4
                                                con_level_header
                                                con_grenzweak.
              h_error = true.
              EXIT.
            ENDIF.
          ENDIF.                       " Belegwaehrung <> Meldewaehrung

        ENDIF.                         " Hauswaehrung  =  Belegwaehrung

      ENDIF.
**** END   of ALRK145204

    ELSE.                              " Meldewaehrung <> Hauswaehrung
      IF ( h_mcurr EQ h_bcurr ).       " Meldewaehrung =  Belegwaehrung
        " ---> Umrechnung H (G) --> M
        PERFORM conv_to_foreign_curr USING    h_datum
                                              h_kurst
                                              h_mcurr
                                              h_hcurr
                                     CHANGING h_exrat
                                              h_grwrt
                                              h_subrc.
        IF h_subrc NE 0.
          PERFORM incompletion_append USING syst-msgid
                                            con_msgty_e
                                            syst-msgno
                                            syst-msgv1
                                            syst-msgv2
                                            syst-msgv3
                                            syst-msgv4
                                            con_level_header
                                            con_grenzweak.
          h_error = true.
          EXIT.
        ENDIF.
      ELSE.                            " Meldewaehrung <> Hauswaehrung
        " Meldewaehrung <> Belegwaehrung
        IF ( h_hcurr EQ h_bcurr ).     " Hauswaehrung  =  Belegwaehrung
          " ---> Umrechnung H (G) --> M
          CLEAR: h_exrat.
          PERFORM conv_to_local_curr USING    h_datum
                                              h_kurst
                                              h_bcurr
                                              h_mcurr
                                       CHANGING h_exrat
                                                h_grwrt
                                                h_subrc.

          IF h_subrc NE 0.
            PERFORM incompletion_append USING syst-msgid
                                              con_msgty_e
                                              syst-msgno
                                              syst-msgv1
                                              syst-msgv2
                                              syst-msgv3
                                              syst-msgv4
                                              con_level_header
                                              con_grenzweak.
            h_error = true.
            EXIT.
          ENDIF.
        ELSE.                          " Meldewaehrung <> Hauswaehrung
          " Meldewaehrung <> Belegwaehrung
          " Hauswaehrung  <> Belegwaehrung
          " ---> Umrechnung H (G) -> B -> M
          PERFORM conv_to_foreign_curr USING h_datum
                                             con_kurstyp_mitte
                                             h_bcurr
                                             h_hcurr
                                    CHANGING h_exrat
                                             h_grwrt
                                             h_subrc.
          IF h_subrc NE 0.
            PERFORM incompletion_append USING syst-msgid
                                              con_msgty_e
                                              syst-msgno
                                              syst-msgv1
                                              syst-msgv2
                                              syst-msgv3
                                              syst-msgv4
                                              con_level_header
                                              con_grenzweak.
            h_error = true.
            EXIT.
          ENDIF.
          IF NOT ( h_grwrt IS INITIAL ).
            CLEAR: h_exrat.
            PERFORM conv_to_local_curr USING    h_datum
                                                h_kurst
                                                h_bcurr
                                                h_mcurr
                                       CHANGING h_exrat
                                                h_grwrt
                                                h_subrc.
            IF h_subrc NE 0.
              PERFORM incompletion_append USING syst-msgid
                                                con_msgty_e
                                                syst-msgno
                                                syst-msgv1
                                                syst-msgv2
                                                syst-msgv3
                                                syst-msgv4
                                                con_level_header
                                                con_grenzweak.
              h_error = true.
              EXIT.
            ENDIF.
          ENDIF.

        ENDIF.                         " Hauswaehrung  =  Belegwaehrung

      ENDIF.                           " Meldewaehrung =  Belegwaehrung

    ENDIF.                             " Meldewaehrung =  Hauswaehrung

  ENDIF.

*------- Rechnungswert ungerundet
  h_zweak = h_grwrt.
  h_zweeh = h_mcurr.

*------- Rechnungswert gerundet
* UNPACK H_GRWRT TO UEB_GWRT.
* PERFORM DEZISTELLEN USING UEB_GWRT
*                           H_MCURR
*                           H_GRENZ.

*------- Ergebnisse
* IF H_GRENZ IS INITIAL.
*   H_ERROR = 'X'.
* ENDIF.

*------- Wertrueckuebernahme
  h_netwr = h_grwrt.

ENDFORM.                    "STATISTICAL_VALUE

*----------------------------------------------------------------------*
*        FORM CONV_TO_FOREIGN_CURR
*----------------------------------------------------------------------*
*        Umrechnung des Wertes in Fremdwaehrung
*----------------------------------------------------------------------*
FORM conv_to_foreign_curr
     USING    VALUE(h_datum) LIKE syst-datum
              VALUE(h_kurst) LIKE t005-kurst
              VALUE(h_fcurr) LIKE t001-waers
              VALUE(h_lcurr) LIKE t001-waers
     CHANGING h_exrat        LIKE vbrp-kursk
              h_lamnt        LIKE vbrp-netwr
              subrc          LIKE syst-subrc.

  CALL FUNCTION 'CONVERT_TO_FOREIGN_CURRENCY'
    EXPORTING
      date             = h_datum
      foreign_currency = h_fcurr
      local_amount     = h_lamnt
      local_currency   = h_lcurr
      rate             = h_exrat
      type_of_rate     = h_kurst
    IMPORTING
      exchange_rate    = h_exrat
      foreign_amount   = h_lamnt
    EXCEPTIONS
      no_rate_found    = 1
      overflow         = 2
      no_factors_found = 3
      no_spread_found  = 4
      derived_2_times  = 5
      OTHERS           = 6.
*           NO_RATE_FOUND    = 1
*           OTHERS           = 2.

  IF NOT ( sy-subrc IS INITIAL ).
    subrc = sy-subrc.
    CLEAR: h_lamnt.
  ENDIF.

ENDFORM.                    "CONV_TO_FOREIGN_CURR

*----------------------------------------------------------------------*
*        FORM CONV_TO_LOCAL_CURR
*----------------------------------------------------------------------*
*        Umrechnung des Wertes in Lokalwaehrung
*----------------------------------------------------------------------*
FORM conv_to_local_curr
     USING    VALUE(h_datum) LIKE syst-datum
              VALUE(h_kurst) LIKE t005-kurst
              VALUE(h_fcurr) LIKE t001-waers
              VALUE(h_lcurr) LIKE t001-waers
     CHANGING h_exrat        LIKE vbrp-kursk
              h_famnt        LIKE vbrp-netwr
              subrc          LIKE syst-subrc.

  CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
    EXPORTING
      date             = h_datum
      foreign_amount   = h_famnt
      foreign_currency = h_fcurr
      local_currency   = h_lcurr
      rate             = h_exrat
      type_of_rate     = h_kurst
    IMPORTING
      exchange_rate    = h_exrat
      local_amount     = h_famnt
    EXCEPTIONS
      no_rate_found    = 1
      OTHERS           = 2.

  IF NOT ( sy-subrc IS INITIAL ).
    subrc = syst-subrc.
    CLEAR: h_famnt.
  ENDIF.

ENDFORM.                    "CONV_TO_LOCAL_CURR


*---------------------------------------------------------------------*
*       FORM BELEGNUMR                                                *
*---------------------------------------------------------------------*
*       Belegnummer (RF-Faktura-Nummer)                               *
*---------------------------------------------------------------------*
FORM belegnumr CHANGING belegnumr LIKE veiav-belegnumr.

*-- Keine Unvollständigkeitsprüfung erforderlich
  belegnumr = vbrk-vbeln.

ENDFORM.                    "BELEGNUMR

*---------------------------------------------------------------------*
*       FORM HAUPTPOSI                                                *
*---------------------------------------------------------------------*
*       Positionsnummer                                               *
*---------------------------------------------------------------------*
FORM hauptposi CHANGING hauptposi LIKE veiav-hauptposi.

*-- Keine Unvollständigkeitsprüfung erforderlich
  hauptposi = vbrp-posnr.

ENDFORM.                    "HAUPTPOSI


*---------------------------------------------------------------------*
*       FORM ARRIVDEPA                                                *
*---------------------------------------------------------------------*
*       Setzen des Eingangs-/Versandskennzeichen                      *
*---------------------------------------------------------------------*
FORM arrivdepa USING    flow_of_goods LIKE veiav-arrivdepa
               CHANGING arrivdepa LIKE veiav-arrivdepa.

*-- Keine Unvollständigkeitsprüfung erforderlich
  arrivdepa = flow_of_goods.

ENDFORM.                    "ARRIVDEPA

*---------------------------------------------------------------------*
*       FORM EIGENUINR                                                *
*---------------------------------------------------------------------*
*       Kennummer (auch UID-Nummer)                                   *
*---------------------------------------------------------------------*
FORM eigenuinr USING    bukrs     LIKE vbrk-bukrs
                        werksland LIKE veiav-werksland
                        bukrsland LIKE t001-land1
               CHANGING eigenuinr LIKE veiav-eigenuinr.
  eigenuinr = eiguinr.

*-- Unvollständigkeit EIGENUINR
  IF eigenuinr IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '022'
                                      bukrs
                                      werksland
                                      bukrsland
                                      dummy_msgv
                                      con_level_global
                                      con_eigenuinr.
  ENDIF.

ENDFORM.                    "EIGENUINR

*---------------------------------------------------------------------*
*       FORM NUMMBUKRS                                                *
*---------------------------------------------------------------------*
*       Buchungskreis                                                 *
*---------------------------------------------------------------------*
FORM nummbukrs USING    company_code LIKE t001-bukrs
               CHANGING nummbukrs LIKE veiav-nummbukrs.

*-- Keine Unvollständigkeitsprüfung erforderlich
  nummbukrs = company_code.

ENDFORM.                    "NUMMBUKRS

*---------------------------------------------------------------------*
*       FORM VERKAUFOR                                                *
*---------------------------------------------------------------------*
*       Verkaufsorganisation                                          *
*---------------------------------------------------------------------*
FORM verkaufor USING    sales_org LIKE vbrk-vkorg
               CHANGING verkaufor LIKE veiav-verkaufor.

*-- Keine Unvollständigkeitsprüfung erforderlich
  verkaufor = sales_org.

ENDFORM.                    "VERKAUFOR

*---------------------------------------------------------------------*
*       FORM DATUMMONA                                                *
*---------------------------------------------------------------------*
*       Berichtsmonat                                                 *
*---------------------------------------------------------------------*
FORM datummona CHANGING datummona LIKE veiav-datummona.

*-- Keine Unvollständigkeitsprüfung erforderlich
  datummona = p_monat.

ENDFORM.                    "DATUMMONA

*---------------------------------------------------------------------*
*       FORM DATUMJAHR                                                *
*---------------------------------------------------------------------*
*       Berichtsjahr                                                  *
*---------------------------------------------------------------------*
FORM datumjahr CHANGING datumjahr LIKE veiav-datumjahr.

*-- Keine Unvollständigkeitsprüfung erforderlich
  datumjahr = p_gjahr.

ENDFORM.                    "DATUMJAHR

*---------------------------------------------------------------------*
*       FORM FAKTDATUM                                                *
*---------------------------------------------------------------------*
*       Faktura-Datum in Form MMJJ                                    *
*---------------------------------------------------------------------*
FORM faktdatum CHANGING faktdatum LIKE veiav-faktdatum.

*-- Keine Unvollständigkeitsprüfung erforderlich
  faktdatum  = vbrk-fkdat.

ENDFORM.                    "FAKTDATUM

*---------------------------------------------------------------------*
*       FORM BELEGIDEN                                                *
*---------------------------------------------------------------------*
*       Vertriebsbelegtyp wird übernommen.                            *
*---------------------------------------------------------------------*
FORM belegiden CHANGING belegiden LIKE veiav-belegiden.

*-- Keine Unvollständigkeitsprüfung erforderlich
  IF vbrk-vbtyp CA vbtyp_fkiv AND
     NOT vbrk-sfakn IS INITIAL.
*-- Bei Stornos interner Gutschriften soll vereinfacht mit
*-- einem Stornobelegtypen weitergearbeitet werden...
    belegiden = vbtyp_stor.
  ELSE.
    belegiden = vbrk-vbtyp.
  ENDIF.

ENDFORM.                    "BELEGIDEN

*---------------------------------------------------------------------*
*       FORM BESTIREGI                                                *
*---------------------------------------------------------------------*
*       Bestimmungsregion                                             *
*---------------------------------------------------------------------*
* Bestimmungsregion ist für Versendung nicht relevant. Steuerung      *
* über Tabelle T609I möglich.                                         *
*---------------------------------------------------------------------*
FORM bestiregi USING reporting_country LIKE vbrk-land1
                     VALUE(destination_region) LIKE vbrk-regio
                     p_arrivdepa       LIKE veiav-arrivdepa
                     p_werks           LIKE t001w-werks
            CHANGING bestiregi         LIKE veiav-bestiregi.

*-- Ist Land überhaupt in Regionen unterteilt?
  IF NOT reporting_country IS INITIAL.
    SELECT * FROM t005s WHERE land1 = reporting_country.
      EXIT.
    ENDSELECT.

    IF sy-subrc NE 0.
*-- Land ist nicht in Regionen unterteilt --> Eintrag ins UNVO
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_i
                                        '003'
                                        reporting_country
                                        dummy_msgv
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_global
                                        con_bestiregi.
      EXIT.
    ENDIF.
  ENDIF.

  IF flg_rvivst00_active = true.

*-- Warenempfänger im Originalbeleg suchen
    SELECT SINGLE * FROM vbpa
           WHERE vbeln = vbrk-vbeln
           AND   posnr = vbrp-pospa
           AND   parvw = con_parvw_we.
    IF sy-subrc NE 0.
      SELECT SINGLE * FROM vbpa
             WHERE vbeln = vbrk-vbeln
             AND   posnr = '000000'
             AND   parvw = con_parvw_we.
      IF sy-subrc NE 0.
*-- Warenempfänger nicht in IV geführt, d.h. aus Vorgängerbeleg!
        SELECT SINGLE * FROM vbpa
           WHERE vbeln = vbrp-vgbel
           AND   posnr = vbrp-posnr
           AND   parvw = con_parvw_we.
        IF NOT ( sy-subrc IS INITIAL ) .
          SELECT SINGLE * FROM vbpa
                 WHERE vbeln = vbrp-vgbel
                 AND   posnr = '000000'
                 AND   parvw = con_parvw_we.
        ENDIF.
      ENDIF.
    ENDIF.

    IF sy-subrc IS INITIAL.

*<<<<<<<<<<<< begin of insertion HP_368525 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      IF vbpa-adrnr IS INITIAL.
        SELECT SINGLE * FROM  kna1
           WHERE kunnr  = vbpa-kunnr.
        IF sy-subrc = 0.
          sadr-regio = kna1-regio.
        ENDIF.
      ELSE.
*<<<<<<<<<<<< end of insertion HP_368525 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        selection-addrnumber = vbpa-adrnr.                  "SADR40A
        CALL FUNCTION 'ADDR_GET'
          EXPORTING
            address_selection = selection
            address_group     = 'BP'
          IMPORTING
            sadr              = sadr                        "SADR40A
          EXCEPTIONS
            parameter_error   = 1
            address_not_exist = 2
            version_not_exist = 3
            internal_error    = 4
            OTHERS            = 5.                          "SADR40A
      ENDIF.                           "<<< insert HP_368525


      IF sy-subrc IS INITIAL.          "Adresse gefunden
        destination_region = sadr-regio.                    "SADR40A
        IF destination_region IS INITIAL.
*-- Die Region in der Anschrift des Kunden &1 wurde nicht gefunden.
          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_e
                                            '027'
                                            vbpa-kunnr
                                            con_mkmal
                                            dummy_msgv
                                            dummy_msgv
                                            con_level_global
                                            con_bestiregi.
          EXIT.
        ENDIF.
      ELSE.
*-- Keine Adresse gefunden
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_e
                                          '026'
                                          vbpa-kunnr
                                          con_mkmal
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_global
                                          con_bestiregi.
        EXIT.
      ENDIF.
    ELSE.
*-- Keine entsprechende Partnerrolle gefunden
*-- Partnerrollenbezeichung nachlesen.
      SELECT SINGLE * FROM  tpart
             WHERE  spras       = sy-langu
             AND    parvw       = con_parvw_we.
      IF sy-subrc NE 0.
        CLEAR tpart-vtext.
      ENDIF.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '002'
*                                       CON_PARVW_WE
                                        tpart-vtext
                                        dummy_msgv
                                        con_mkmal
                                        dummy_msgv
                                        con_level_item
                                        con_bestiregi.
      EXIT.
    ENDIF.
*-- SD-Retouren handling
  ELSEIF flg_rvivst00_active = false
    AND p_arrivdepa = con_import.
*-- Bestimmungsregion aus dem Land des Werks ermitteln
    CLEAR destination_region.
    SELECT SINGLE regio INTO destination_region
                        FROM t001w
                        WHERE werks = p_werks.
    IF destination_region IS INITIAL.
*-- Die Region des Werkes &1 wurde nicht gefunden.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '005'
                                        p_werks
                                        dummy_msgv
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_global
                                        con_bestiregi.
      EXIT.
    ENDIF.

  ENDIF.

*-- Lesen der Region aus Tabelle T005S
  SELECT SINGLE * FROM t005s
         WHERE land1 = reporting_country
         AND   bland = destination_region.

  IF sy-subrc IS INITIAL.

    IF t005s-herbl IS NOT INITIAL.
      bestiregi = t005s-herbl.
    ELSE.
      bestiregi = destination_region.
    ENDIF.

    IF bestiregi IS INITIAL.
*-- Regionencodierung für interne Region &1 (Land '&2') nicht gefunden
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '004'
                                        t005s-bland
                                        t005s-land1
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_global
                                        con_bestiregi.
      EXIT.
    ENDIF.
  ELSE.
*-- Region des Warenempfängers nicht gepflegt

  ENDIF.

ENDFORM.                    "BESTIREGI

*---------------------------------------------------------------------*
*       FORM EINLADFGH                                                *
*---------------------------------------------------------------------*
*       Einladehafen bzw. Einladeflughafen                            *
*---------------------------------------------------------------------*
FORM einladfgh USING    VALUE(invoicing_country) LIKE t001-land1
                        VALUE(reporting_country) LIKE vbrk-land1
                CHANGING einladfgh LIKE veiav-einladfgh.

  CASE h_herku.

    WHEN 'I'.

*<<<<<<<<<<<<<< begin of deletion HP_185120 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
*      IF EIKP-EXPVZ EQ '1' OR          "Seeverkehr
*         EIKP-EXPVZ EQ '4'.            "Luftverkehr
*<<<<<<<<<<<<<< end of deletion HP_185120 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
*<<<<<<<<<<<<<< begin of insertion HP_185120 <<<<<<<<<<<<<<<<<<<<<<<<<<<
      IF eikp-expvz EQ '1' OR          "Seeverkehrehr
         eikp-expvz EQ '4' OR          "Luftverkehrehr
         ( eikp-expvz EQ '8' AND       "Binnenschiff
           milnd_iso EQ 'NL' ).
*<<<<<<<<<<<<<< end of insertion HP_185120 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        IF flg_rvivst00_active = true.
          CLEAR einladfgh.
          CALL FUNCTION 'FTRADE_CUSTOMS_OFFICE_SWITCH'
            EXPORTING
              i_direction             = con_t609r_verei_2
              i_source_country        = invoicing_country
              i_source_customs_office = eikp-zolla
              i_target_country        = reporting_country
            IMPORTING
              e_target_customs_office = einladfgh
            EXCEPTIONS
              no_entry_found          = 1
              wrong_direction         = 2
              OTHERS                  = 3.

          IF NOT ( sy-subrc IS INITIAL ) OR einladfgh IS INITIAL.
*-- Keine Umschlüsselung von land nach Land für Feld & gepflegt!
            PERFORM incompletion_append USING con_msgid_eip
                                              con_msgty_e
                                              '016'
                                              con_mkmal
                                              invoicing_country
                                              reporting_country
                                              con_einladfgh
                                              con_level_header
                                              con_einladfgh.
            EXIT.
          ENDIF.
        ELSE.
          einladfgh = eikp-zolla.
*-- Belegkopf: Feld &1 nicht gepflegt!
          IF eikp-zolla IS INITIAL.
            PERFORM incompletion_append USING con_msgid_eip
                                              con_msgty_e
                                              '010'
                                              con_mkmal
                                              vbrk-vbeln
                                              dummy_msgv
                                              dummy_msgv
                                              con_level_header
                                              con_einladfgh.
            EXIT.
          ENDIF.
        ENDIF.

      ELSE.
*-- Verkehrszweig ungleich  '1' oder '4'
*-- Feld &1 darf nur bei Verkehrszw. '1' oder '4' gemeldet werden
        IF NOT eikp-expvz IS INITIAL.
          CLEAR hlp_text.
*<<<<<<<<<<<<<< begin of deletion HP_185120 <<<<<<<<<<<<<<<<<<<<<<<<
*         CONCATENATE
*       HOCH CON_EXPVZ_1 HOCH KOMMA HOCH CON_EXPVZ_4 HOCH INTO HLP_TEXT.
*<<<<<<<<<<<<<< end of deletion HP_185120 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
*<<<<<<<<<<<<<< begin of insertion HP_185120 <<<<<<<<<<<<<<<<<<<<<<<<<<<
          IF milnd_iso NE 'NL'.
            CONCATENATE
            hoch con_expvz_1 hoch komma hoch con_expvz_4 hoch
            INTO hlp_text.
          ELSE.
            CONCATENATE
            hoch con_expvz_1 hoch komma hoch con_expvz_4 hoch komma hoch
            '8' hoch INTO hlp_text.
          ENDIF.
*<<<<<<<<<<<<<< end of insertion HP_185120 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<

          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_i
                                            '040'
                                            con_mkmal
                                            hlp_text
                                            eikp-expvz
                                            dummy_msgv
                                            con_level_header
                                            con_einladfgh.
          EXIT.
        ENDIF.
      ENDIF.

    WHEN OTHERS.

      einladfgh = eikp-zolla.
*-- Belegkopf: Feld &1 nicht gepflegt!
      IF eikp-zolla IS INITIAL.
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_e
                                          '010'
                                          con_mkmal
                                          vbrk-vbeln
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_header
                                          con_einladfgh.
        EXIT.
      ENDIF.

  ENDCASE.

ENDFORM.                    "EINLADFGH

*---------------------------------------------------------------------*
*       FORM AUSLADFGH                                                *
*---------------------------------------------------------------------*
*       Bestimmungszollstelle                                         *
*---------------------------------------------------------------------*
FORM ausladfgh CHANGING ausladfgh LIKE vesed-ausladfgh.

  ausladfgh = eikp-zollb.
*-- Belegkopf: Feld &1 nicht gepflegt!
  IF eikp-zollb IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '010'
                                      con_mkmal
                                      vbrk-vbeln
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_header
                                      con_ausladfgh.
    EXIT.
  ENDIF.

ENDFORM.                    "AUSLADFGH

*---------------------------------------------------------------------*
*       FORM URSPRSLND                                                *
*---------------------------------------------------------------------*
*       Ursprungsland                                                 *
*---------------------------------------------------------------------*
FORM ursprslnd  USING    country_dispatch    LIKE eipo-verld
                         country_origin      LIKE eipo-herkl
                         region_origin       LIKE eipo-herkr
                CHANGING ursprslnd LIKE veiav-ursprslnd.

  DATA: hlp_herkl LIKE eipo-herkl.

  hlp_herkl = country_origin.

*-- INTRASTAT: Deutschland:
*-- bei unbekanntem Warenursprung ist der Versendungsmitgliedstaat
*-- anzuschreiben.
  IF ( h_herku = 'I' AND flg_rvivst00_active = true )
     OR ( h_herku = 'I' AND reference_direction = con_import ).
    IF milnd_iso = con_intca_de.
      IF hlp_herkl IS INITIAL.
        ursprslnd = country_dispatch.
        hlp_herkl = country_dispatch.
        IF NOT ursprslnd IS INITIAL.
          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_i
                                            '044'
                                            ursprslnd
                                            dummy_msgv
                                            dummy_msgv
                                            dummy_msgv
                                            con_level_item
                                            con_ursprslnd.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  IF hlp_herkl IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '011'
                                      con_mkmal
                                      vbrk-vbeln
                                      vbrp-posnr
                                      dummy_msgv
                                      con_level_item
                                      con_ursprslnd.
    EXIT.
  ENDIF.

  IF h_herku = 'S'.
    ursprslnd = hlp_herkl.
    EXIT.
  ENDIF.

  IF h_herku = 'E' OR h_herku = 'K'.
    IF milnd_iso = con_intca_de.
      IF hlp_herkl = '004' OR hlp_herkl = 'DE' OR hlp_herkl = 'D'.
*-- Feld &1 wird nur bei ausländischem Warenursprung gemeldet.
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_i
                                          '042'
                                          con_mkmal
                                          dummy_msgv
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_item
                                          con_ursprslnd.
        EXIT.
      ENDIF.
    ENDIF.
  ENDIF.

  SELECT SINGLE * FROM t005
         WHERE land1 = hlp_herkl.
  IF sy-subrc IS INITIAL.
    IF p_numer = true.
      IF h_herku = 'I'.
        ursprslnd = t005-intcn.
        IF ursprslnd = '000'.
          CLEAR ursprslnd.
        ENDIF.
*-- EXTRA - VAR - KOBRA - SED
      ELSE.
        ursprslnd = t005-landa.
      ENDIF.
    ELSE.
      ursprslnd = t005-intca.
    ENDIF.

  ENDIF.

*- Ländercode Umschlüsseln falls erforderlich
  PERFORM read_spec_reg_tab USING    country_origin
                                     region_origin
                            CHANGING ursprslnd.

  IF ursprslnd IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '006'
                                      hlp_herkl
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_ursprslnd.
    EXIT.
  ENDIF.

ENDFORM.                    "URSPRSLND

*---------------------------------------------------------------------*
*       FORM VERFAHREN                                                *
*---------------------------------------------------------------------*
*       Statistisches Verfahren  (Im/Exportverfahren)                 *
*---------------------------------------------------------------------*
FORM verfahren USING    VALUE(invoicing_country) LIKE t001-land1
                        VALUE(reporting_country) LIKE vbrk-land1
          CHANGING verfahren                LIKE veiav-verfahren.

* DATA: HLP_VERFAHREN LIKE VEIAV-VERFAHREN.

  IF flg_rvivst00_active = true.
    CLEAR verfahren.
    CALL FUNCTION 'FTRADE_CUST_PROCEDURE_SWITCH'
      EXPORTING
        i_direction        = con_t609r_verei_2
        i_source_country   = invoicing_country
        i_source_procedure = eipo-exprf
        i_target_country   = reporting_country
      IMPORTING
        e_target_procedure = verfahren
      EXCEPTIONS
        no_entry_found     = 1
        wrong_direction    = 2
        OTHERS             = 3.

    IF NOT ( sy-subrc IS INITIAL ) OR verfahren IS INITIAL.
*-- Keine Umschlüsselung von land nach Land für Feld & gepflegt!
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '016'
                                        con_mkmal
                                        invoicing_country
                                        reporting_country
                                        con_verfahren
                                        con_level_item
                                        con_verfahren.
      EXIT.
    ENDIF.

  ELSE.

    verfahren = eipo-exprf.
*   IF H_HERKU = 'C' AND MILND_ISO = CON_INTCA_CH.
*     HLP_VERFAHREN = VERFAHREN.
*     IF HLP_VERFAHREN(1) ne '2' OR
*        HLP_VERFAHREN(1) ne '4' OR
*        HLP_VERFAHREN(1) ne '5'.
*-- Keine Fehlerbehandlung ... vorerst
*       EXIT.
*     ENDIF.
*   ENDIF.

*-- Belegposition: Feld &1 nicht gepflegt!
    IF eipo-exprf IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '011'
                                        con_mkmal
                                        vbrk-vbeln
                                        vbrp-posnr
                                        dummy_msgv
                                        con_level_item
                                        con_verfahren.
      EXIT.
    ENDIF.
  ENDIF.

ENDFORM.                    "VERFAHREN

*---------------------------------------------------------------------*
*       FORM VERKEHRZW                                                *
*---------------------------------------------------------------------*
*       Verkehrszweig                                                 *
*---------------------------------------------------------------------*
FORM verkehrzw USING    VALUE(invoicing_country) LIKE t001-land1
                        VALUE(reporting_country) LIKE vbrk-land1
          CHANGING verkehrzw                LIKE veiav-verkehrzw.

  IF flg_rvivst00_active = true.
    CLEAR verkehrzw.

    CALL FUNCTION 'FTRADE_MODE_TRANSPORT_SWITCH'
      EXPORTING
        i_direction             = con_t609r_verei_2
        i_source_country        = invoicing_country
        i_source_mode_transport = eikp-expvz
        i_target_country        = reporting_country
      IMPORTING
        e_target_mode_transport = verkehrzw
      EXCEPTIONS
        no_entry_found          = 1
        wrong_direction         = 2
        OTHERS                  = 3.

    IF NOT ( sy-subrc IS INITIAL ) OR verkehrzw IS INITIAL.
*-- Keine Umschlüsselung von land nach Land für Feld & gepflegt!
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '016'
                                        con_mkmal
                                        invoicing_country
                                        reporting_country
                                        con_verkehrzw
                                        con_level_header
                                        con_verkehrzw.
      EXIT.
    ENDIF.

  ELSE.

    verkehrzw = eikp-expvz.

    IF eikp-expvz IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '010'
                                        con_mkmal
                                        vbrk-vbeln
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_header
                                        con_verkehrzw.
      EXIT.
    ENDIF.

  ENDIF.

ENDFORM.                    "VERKEHRZW

*&---------------------------------------------------------------------*
*&      Form  NUMMWERKS
*&---------------------------------------------------------------------*
*       Werk                                                           *
*----------------------------------------------------------------------*
FORM nummwerks CHANGING nummwerks LIKE veiav-nummwerks.

*-- Keine Unvollständigkeitsprüfung erforderlich
  nummwerks = vbrp-werks.

ENDFORM.                    "NUMMWERKS

*----------------------------------------------------------------------*
*       Form  WERKSLAND
*----------------------------------------------------------------------*
*       Land des Werkes                                                *
*----------------------------------------------------------------------*
FORM werksland CHANGING werksland LIKE veiav-werksland.

*-- Keine Unvollständigkeitsprüfung erforderlich
  IF flg_rvivst00_active = true.

    werksland = p_milnd.

  ELSE.
*-- Im Falle von Dreiecksgeschäften nach Verfahren 31 muß die
*-- Meldung unter Land Frankreich abgelegt werden.
    IF milnd_iso = con_intca_fr AND
       gv_triangular = true.
      werksland = p_milnd.
    ELSE.
      SELECT SINGLE * FROM t001w WHERE werks = vbrp-werks.
      IF sy-subrc IS INITIAL.
        werksland = t001w-land1.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    "WERKSLAND

*----------------------------------------------------------------------*
*       Form  USERNNAME
*----------------------------------------------------------------------*
*       Ersteller                                                      *
*----------------------------------------------------------------------*
FORM usernname CHANGING usernname LIKE veiav-usernname.

*-- Keine Unvollständigkeitsprüfung erforderlich
  usernname = sy-uname.

ENDFORM.                    "USERNNAME

*---------------------------------------------------------------------*
*       FORM ZUSATZNUM                                                *
*---------------------------------------------------------------------*
*       Zusatznummer                                                  *
*---------------------------------------------------------------------*
FORM zusatznum USING    bukrs     LIKE vbrk-bukrs
                        werksland LIKE veiav-werksland
                        bukrsland LIKE t001-land1
               CHANGING zusatznum LIKE veiav-zusatznum.

  zusatznum = zusatzn.

  IF zusatznum IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_w
                                      '023'
                                      bukrs
                                      werksland
                                      bukrsland
                                      dummy_msgv
                                      con_level_global
                                      con_zusatznum.
    EXIT.
  ENDIF.

ENDFORM.                    "ZUSATZNUM

*---------------------------------------------------------------------*
*       FORM KUNDEUINR                                                *
*---------------------------------------------------------------------*
*       UID-Nr. des Kunden (Auftraggeber oder Warenempf. oder Regul.) *
*---------------------------------------------------------------------*
FORM kundeuinr USING    VALUE(invoicing_bukrs)   LIKE vbrk-bukrs
                        werksland                LIKE veiav-werksland
                        VALUE(invoicing_country) LIKE t001-land1
          CHANGING kundeuinr                LIKE veiav-kundeuinr.

  IF flg_rvivst00_active = true.
    CLEAR kundeuinr.
    CALL FUNCTION 'RV_FTT_GOV_ID_CODES_READ'
      EXPORTING
        i_company_code       = invoicing_bukrs
        i_country            = werksland
        i_reporting_type     = con_reporting_type_i
      IMPORTING
        e_vat_no             = kundeuinr
      EXCEPTIONS
        company_code_initial = 1
        country_initial      = 2
        wrong_reporting_type = 3
        OTHERS               = 4.

    IF sy-subrc NE 0 OR kundeuinr IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '024'
                                        invoicing_bukrs
                                        werksland
                                        invoicing_country
                                        dummy_msgv
                                        con_level_global
                                        con_kundeuinr.
      EXIT.
    ENDIF.

  ELSE.

    PERFORM get_partner_vat USING    con_kundeuinr
                            CHANGING kundeuinr.
  ENDIF.

ENDFORM.                    "KUNDEUINR

*---------------------------------------------------------------------*
*       FORM URSPRSREG                                                *
*---------------------------------------------------------------------*
*       Ursprungsregion                                               *
*---------------------------------------------------------------------*
FORM ursprsreg CHANGING ursprsreg LIKE veiav-ursprsreg.

  DATA: hlp_herkl LIKE eipo-herkl,
        hlp_herkr LIKE eipo-herkr.

  hlp_herkl = eipo-herkl.
  hlp_herkr = eipo-herkr.

********************* START OF INSERTION NOTE 204423 ******************
  IF ( p_regio = true ).
    SELECT SINGLE * FROM t001w
         WHERE werks = vbrp-werks.
    IF sy-subrc NE 0.
      CLEAR t001w.
    ELSE.
      hlp_herkl = t001w-land1.
      hlp_herkr = t001w-regio.
    ENDIF.
  ENDIF.
********************* END   OF INSERTION NOTE 204423 ******************

*-- Ist Land überhaupt in Regionen unterteilt?
  IF NOT hlp_herkl IS INITIAL.
    SELECT * FROM t005s WHERE land1 = hlp_herkl.
      EXIT.
    ENDSELECT.
    IF sy-subrc NE 0.
*-- Land ist nicht in Regionen unterteilt --> Eintrag ins UNVO
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_i
                                        '003'
                                        hlp_herkl
                                        dummy_msgv
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_global
                                        con_ursprsreg.
      EXIT.
    ENDIF.
  ENDIF.

*-- KOBRA - Fehlerprotokoll nicht füllen
  IF h_herku = 'K'.
    IF hlp_herkl NE con_intca_de
    AND hlp_herkl NE con_deutschland_004
    AND hlp_herkl NE con_deutschland_d
    AND hlp_herkl NE '   '.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_i
                                        '043'
                                        con_mkmal
                                        dummy_msgv
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_item
                                        con_ursprsreg.
      EXIT.
    ENDIF.
  ENDIF.

*-- INTRASTAT und EXTRASTAT - Fehlerprotokoll nicht füllen
  IF h_herku = 'I' OR h_herku = 'E'.
    IF ( milnd_iso EQ con_intca_de        AND
         hlp_herkl NE con_intca_de        AND
         hlp_herkl NE con_deutschland_d   AND
         hlp_herkl NE con_deutschland_004 AND
         hlp_herkl NE '   ' )
    OR
      ( milnd_iso EQ con_intca_cz AND
        hlp_herkl NE con_intca_cz AND
        hlp_herkl NE '   ' ).
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_i
                                        '043'
                                        con_mkmal
                                        dummy_msgv
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_item
                                        con_ursprsreg.
      EXIT.
    ENDIF.
  ENDIF.

* Italien: Wenn Ursprungsregion des Materials nicht gefüllt dann
*          muß das Feld mit der Region des Werks gefüllt werden,
*          das die Ware versendet.
  IF ( ( milnd_iso = con_intca_it OR milnd_iso = con_intca_be )
         AND hlp_herkr IS INITIAL )
         OR ( p_regio = true ).
    CLEAR t001w.
    SELECT SINGLE * FROM t001w
         WHERE werks = vbrp-werks.
    IF sy-subrc NE 0.
      CLEAR t001w.
    ELSE.
      hlp_herkl = t001w-land1.
      hlp_herkr = t001w-regio.
*-- Region im Werk nicht gepflegt
      IF hlp_herkr IS INITIAL.
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_e
                                          '005'
                                          vbrp-werks
                                          con_mkmal
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_global
                                          con_ursprsreg.
        EXIT.
      ENDIF.

    ENDIF.
  ENDIF.

  IF hlp_herkl IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '012'
                                      con_mkmal
                                      con_mkmal_ursprslnd
                                      vbrk-vbeln
                                      vbrp-posnr
                                      con_level_item
                                      con_ursprsreg.
    EXIT.
  ENDIF.

  IF hlp_herkr IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '011'
                                      con_mkmal
                                      vbrk-vbeln
                                      vbrp-posnr
                                      dummy_msgv
                                      con_level_item
                                      con_ursprsreg.
    EXIT.
  ENDIF.

*-- Uland und URegion sind zu diesem Zeitpunkt beide gefüllt
  SELECT SINGLE * FROM t005s
         WHERE land1 = hlp_herkl
         AND   bland = hlp_herkr.
  IF sy-subrc IS INITIAL.

    IF t005s-herbl IS NOT INITIAL.
      ursprsreg = t005s-herbl.
    ELSE.
      ursprsreg = hlp_herkr.
    ENDIF.

    IF ursprsreg IS INITIAL.
*-- Regionencodierung für interne Region &1 (Land '&2') nicht gefunden
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '004'
                                        t005s-bland
                                        t005s-land1
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_global
                                        con_ursprsreg.
      EXIT.
    ENDIF.
  ELSE.
*-- Kein Eintrag in T005S
*-- OFFEN
  ENDIF.

ENDFORM.                    "URSPRSREG

*---------------------------------------------------------------------*
*       FORM GENES                                                    *
*---------------------------------------------------------------------*
*       Erstellart                                                    *
*---------------------------------------------------------------------*
FORM genes USING    p_reference_direction LIKE veiav-arrivdepa
           CHANGING genes LIKE veiav-genes.

*-- Keine Unvollständigkeitsprüfung erforderlich
  IF p_reference_direction = con_export
       AND flg_rvivst00_active = false.
    genes = eigene.
  ELSEIF p_reference_direction = con_import
       AND flg_rvivst00_active = false.
    genes = aus_sd_fuer_mm_iii.
  ELSEIF p_reference_direction = con_import
       AND flg_rvivst00_active = true.
    genes = aus_sd_fuer_mm.
  ENDIF.

ENDFORM.                    "GENES

*---------------------------------------------------------------------*
*       FORM P_LANDKEY                                                *
*---------------------------------------------------------------------*
*       Verwendeter Länderschlüssel                                   *
*---------------------------------------------------------------------*
FORM p_landkey CHANGING p_landkey LIKE veiav-p_landkey.

*-- Keine Unvollständigkeitsprüfung erforderlich
  p_landkey = p_numer.

ENDFORM.                    "P_LANDKEY

*---------------------------------------------------------------------*
*       FORM THIERISCH                                                *
*---------------------------------------------------------------------*
*       Löschart                                                      *
*---------------------------------------------------------------------*
FORM thierisch CHANGING thierisch LIKE veiav-thierisch.

*-- Keine Unvollständigkeitsprüfung erforderlich
  thierisch = space.

ENDFORM.                    "THIERISCH

*---------------------------------------------------------------------*
*       FORM FLAGEUROC                                                *
*---------------------------------------------------------------------*
*       Eurokennzeichen                                               *
*---------------------------------------------------------------------*
FORM flageuroc CHANGING flageuroc LIKE veiav-flageuroc.

*-- Keine Unvollständigkeitsprüfung erforderlich
  flageuroc = p_euroc.

ENDFORM.                    "FLAGEUROC

*---------------------------------------------------------------------*
*       FORM SATZERDAT                                                *
*---------------------------------------------------------------------*
*       Erstelldatum                                                  *
*---------------------------------------------------------------------*
FORM satzerdat CHANGING satzerdat LIKE veiav-satzerdat.

*-- Keine Unvollständigkeitsprüfung erforderlich
  satzerdat = sy-datlo.

ENDFORM.                    "SATZERDAT

*---------------------------------------------------------------------*
*       FORM MANDT                                                    *
*---------------------------------------------------------------------*
*       Mandant                                                       *
*---------------------------------------------------------------------*
FORM mandt CHANGING mandt LIKE veiav-mandt.

*-- Keine Unvollständigkeitsprüfung erforderlich
  mandt = sy-mandt.

ENDFORM.                    "MANDT

*---------------------------------------------------------------------*
*       FORM CONTAINER                                                *
*---------------------------------------------------------------------*
*       Wird die Ware beim Grenzübergang in Containern befördert      *
*       1 = ja / 0 = nein                                             *
*---------------------------------------------------------------------*
FORM container CHANGING container LIKE vexav-container.

  IF h_herku = 'E'.
    IF milnd_iso = con_intca_de.
*-- Nicht bei Post,  festinstallierten Transporteinrichtungen
*-- und bei eigenem Antrieb.
      IF eikp-expvz = con_expvz_5
      OR eikp-expvz = con_expvz_7
      OR eikp-expvz = con_expvz_9.
        CLEAR hlp_text.
        CONCATENATE
        hoch con_expvz_5 hoch komma hoch con_expvz_7 hoch
                    komma hoch con_expvz_9 hoch INTO hlp_text.
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_i
                                          '041'
                                          con_mkmal
                                          hlp_text
                                          eikp-expvz
                                          dummy_msgv
                                          con_level_header
                                          con_container.
        EXIT.
      ENDIF.
    ENDIF.
  ENDIF.

  container = eikp-conta.
  IF h_herku NE 'S'.
    IF eikp-conta IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '010'
                                        con_mkmal
                                        vbrk-vbeln
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_header
                                        con_container.
      EXIT.
    ENDIF.
  ENDIF.

  IF h_herku EQ 'S'.
    IF eikp-expvz = con_expvz_1.
      CASE eikp-conta.
        WHEN '0'.
          container = '2'.
        WHEN '1'.
          container = '1'.
        WHEN OTHERS.
          CLEAR container.
      ENDCASE.
    ELSE.
      CLEAR container.
      IF NOT eikp-expvz IS INITIAL.
        CLEAR hlp_text.
        CONCATENATE hoch con_expvz_1 hoch INTO hlp_text.
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_i
                                          '040'
                                          con_mkmal
                                          hlp_text
                                          eikp-expvz
                                          dummy_msgv
                                          con_level_header
                                          con_container.
        EXIT.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    "CONTAINER

*---------------------------------------------------------------------*
*       FORM STAATSZUG                                                *
*---------------------------------------------------------------------*
*       Staatszugehörigkeit des grenzüberschreitenden                 *
*       aktiven Beförderungsmittels                                   *
*---------------------------------------------------------------------*
FORM staatszug  USING vbpa_land1 LIKE vbpa-land1
                      country_transport LIKE eikp-stgbe
             CHANGING staatszug LIKE vexav-staatszug.

  DATA: hlp_stgbe LIKE eikp-stgbe.

  hlp_stgbe = eikp-stgbe.

  IF h_herku = 'E'.
*-- In Deutschland nicht anzugeben bei Post- und Eisenbahnverkehr
*-- sowie bei festinstallierten Transporteinrichtungen oder bei
*-- eigenem Antrieb.
    IF milnd_iso = con_intca_de.                            "P45K017590
      IF eikp-expvz = con_expvz_2                           "P45K017590
         OR eikp-expvz = con_expvz_5                        "P45K017590
         OR eikp-expvz = con_expvz_7                        "P45K017590
         OR eikp-expvz = con_expvz_9.                       "P45K017590
        CLEAR hlp_text.
        CONCATENATE
        hoch con_expvz_2 hoch komma hoch con_expvz_5 hoch
                    komma hoch con_expvz_7 hoch
                    komma hoch con_expvz_9 hoch INTO hlp_text.
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_i
                                          '041'
                                          con_mkmal
                                          hlp_text
                                          eikp-expvz
                                          dummy_msgv
                                          con_level_header
                                          con_staatszug.
        EXIT.                                               "P45K017590
      ENDIF.                                                "P45K017590
    ENDIF.                                                  "P45K017590
  ENDIF.                                                    "P45K017590

*-- In der Schweiz nur bei Verkehrszweig Strasse anzugeben
  IF h_herku = 'C'.
    IF eikp-expvz NE con_expvz_3 AND NOT eikp-expvz IS INITIAL.
      CLEAR hlp_text.
      CONCATENATE hoch con_expvz_3 hoch INTO hlp_text.

      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_i
                                        '040'
                                        con_mkmal
                                        hlp_text
                                        eikp-expvz
                                        dummy_msgv
                                        con_level_header
                                        con_staatszug.
      EXIT.
    ENDIF.

    IF hlp_stgbe IS INITIAL.
      hlp_stgbe = vbpa_land1.
    ENDIF.
  ENDIF.

  IF hlp_stgbe IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '010'
                                      con_mkmal
                                      vbrk-vbeln
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_header
                                      con_staatszug.
    EXIT.
  ENDIF.

  SELECT SINGLE * FROM t005
         WHERE land1 = hlp_stgbe.
  IF sy-subrc = 0.
    IF p_numer = true.
      staatszug = t005-landa.
    ELSE.
      staatszug = t005-intca.
    ENDIF.
  ENDIF.

*********************** SPECIAL ***************************************
*- Ländercode Umschlüsseln falls erforderlich
  PERFORM read_spec_reg_tab USING    country_transport
                                     space
                            CHANGING staatszug.
********************** SPECIAL ***************************************

  IF staatszug IS INITIAL.

    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '006'
                                      hlp_stgbe
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_staatszug.
    EXIT.
  ENDIF.

ENDFORM.                    "STAATSZUG

*&--------------------------------------------------------------------*
*&      Form  BEFOERLND                                               *
*&--------------------------------------------------------------------*
*       Staatszugehörigkeit des Beförderungsmittels                   *
*---------------------------------------------------------------------*
FORM befoerlnd CHANGING befoerlnd LIKE vesed-befoerlnd.

  befoerlnd = eikp-stabe.
  IF befoerlnd IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '010'
                                      con_mkmal
                                      vbrk-vbeln
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_header
                                      con_befoerlnd.
    EXIT.
  ENDIF.

ENDFORM.                    "BEFOERLND

*&--------------------------------------------------------------------*
*&      Form  VESSELNAM                                               *
*&--------------------------------------------------------------------*
*       Transportmittelbezeichnung (Seeverkehr)                       *
*---------------------------------------------------------------------*
FORM vesselnam CHANGING vesselnam LIKE vesed-vesselnam.

  IF eikp-expvz = con_expvz_1.
    vesselnam = eikp-kzabe.
    IF vesselnam IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '010'
                                        con_mkmal
                                        vbrk-vbeln
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_header
                                        con_vesselnam.
      EXIT.
    ENDIF.
  ENDIF.

ENDFORM.                    "VESSELNAM

*---------------------------------------------------------------------*
*       FORM BFMGRENZE                                                *
*---------------------------------------------------------------------*
*       Befoerderungsmittel Grenze - KOBRA                            *
*---------------------------------------------------------------------*
FORM befigrenz CHANGING befigrenz LIKE vekab-befigrenz.

  befigrenz = eikp-kzgbe.

  IF eikp-kzgbe IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '010'
                                      con_mkmal
                                      vbrk-vbeln
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_header
                                      con_befigrenz.
    EXIT.
  ENDIF.

ENDFORM.                    "BEFIGRENZ

*---------------------------------------------------------------------*
*       FORM BFMABGANG                                                *
*---------------------------------------------------------------------*
*       Befoerderungsmittel Abgang _ KOBRA                            *
*---------------------------------------------------------------------*
FORM befiabgan CHANGING befiabgan LIKE vekab-befiabgan.

  befiabgan = eikp-kzabe.
  IF eikp-kzabe IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '010'
                                      con_mkmal
                                      vbrk-vbeln
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_header
                                      con_befiabgan.
    EXIT.
  ENDIF.

ENDFORM.                    "BEFIABGAN

*---------------------------------------------------------------------*
*       FORM WARENBEZE                                                *
*---------------------------------------------------------------------*
*       Warenbezeichnung                                              *
*---------------------------------------------------------------------*
FORM warenbeze CHANGING warenbeze LIKE vekac-warenbeze.

  DATA: hlp_stawn LIKE eipo-stawn.
  hlp_stawn = eipo-stawn.

  IF eipo-stawn IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '012'
                                      con_mkmal
                                      con_mkmal_statwaren
                                      vbrk-vbeln
                                      vbrp-posnr
                                      con_level_item
                                      con_warenbeze.
    EXIT.
  ENDIF.

  SELECT SINGLE * FROM t604t
         WHERE spras = t001-spras
         AND   land1 = p_milnd
         AND   stawn = hlp_stawn.
  IF sy-subrc = 0.
    warenbeze     = t604t-text1.
    warenbeze+40  = t604t-text2.
    warenbeze+80  = t604t-text3.
    warenbeze+120 = t604t-text4.
    warenbeze+160 = t604t-text5.
    warenbeze+200 = t604t-text6.
    CONDENSE warenbeze.
    IF warenbeze IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '030'
                                        hlp_stawn
                                        dummy_msgv
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_item
                                        con_warenbeze.
      EXIT.
    ENDIF.

  ELSE.                                                     "AS
    CONDENSE hlp_stawn NO-GAPS.
    WRITE hlp_stawn+0(8) TO hlp_stawn.
    SELECT SINGLE * FROM t604t
           WHERE spras = t001-spras
           AND   land1 = p_milnd
           AND   stawn = hlp_stawn.
  ENDIF.

  IF sy-subrc = 0.
    warenbeze     = t604t-text1.
    warenbeze+40  = t604t-text2.
    warenbeze+80  = t604t-text3.
    warenbeze+120 = t604t-text4.
    warenbeze+160 = t604t-text5.
    warenbeze+200 = t604t-text6.
    CONDENSE warenbeze.
    IF warenbeze IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '030'
                                        hlp_stawn
                                        dummy_msgv
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_item
                                        con_warenbeze.
      EXIT.
    ENDIF.

  ELSE.

    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '007'
                                      eipo-stawn
                                      p_milnd
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_item
                                      con_warenbeze.
  ENDIF.

ENDFORM.                    "WARENBEZE

*---------------------------------------------------------------------*
*       FORM EMPFEZOLL                                                *
*---------------------------------------------------------------------*
*       Zollnummer des Warenempfängers - WIRD NICHT GEFUELLT          *
*---------------------------------------------------------------------*
FORM empfezoll CHANGING empfezoll LIKE vekab-empfezoll.

  CLEAR empfezoll.

ENDFORM.                    "EMPFEZOLL

*---------------------------------------------------------------------*
*       FORM AUSF_ZOLL                                                *
*---------------------------------------------------------------------*
*       Zollnummer in T001Z (SAPI06)                                  *
*---------------------------------------------------------------------*
FORM ausfuzoll USING    bukrs     LIKE vbrk-bukrs
                        werksland LIKE veiav-werksland
                        bukrsland LIKE t001-land1
                        zollnumer
               CHANGING ausfuzoll LIKE vekab-ausfuzoll.

  ausfuzoll = zollnumer.

  IF ausfuzoll IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '022'
                                      bukrs
                                      werksland
                                      bukrsland
                                      dummy_msgv
                                      con_level_global
                                      con_ausfuzoll.
  ENDIF.

ENDFORM.                    "AUSFUZOLL

*---------------------------------------------------------------------*
*       FORM AUSF_SADR                                                *
*---------------------------------------------------------------------*
*       Adresse des Ausführers aus der Adreßdatei SADR zum Buchungs-  *
*       kreis aus T001.                                               *
*---------------------------------------------------------------------*
FORM ausf_sadr                                              "SADR40A
              CHANGING ausfuname LIKE vekab-ausfuname
                       ausfustra LIKE vekab-ausfustra
                       ausfunati LIKE vekab-ausfunati
                       ausfupost LIKE vekab-ausfupost
                       ausfuorte LIKE vekab-ausfuorte.

  DATA: hlp_land_ausfu LIKE t005-land1.

  IF NOT ( t001-adrnr IS INITIAL ).                         "SADR40A

    selection-addrnumber = t001-adrnr.                      "SADR40A

    CALL FUNCTION 'ADDR_GET'
      EXPORTING
        address_selection = selection
        address_group     = 'CA01'
      IMPORTING
        sadr              = sadr                            "SADR40A
      EXCEPTIONS
        parameter_error   = 1
        address_not_exist = 2
        version_not_exist = 3
        internal_error    = 4
        OTHERS            = 5.                              "SADR40A

    IF sy-subrc IS INITIAL.
*-------Name
      WRITE: sadr-name1 TO ausfuname.                       "SADR40A
      WRITE: sadr-name2 TO ausfuname+36.                    "SADR40A
*-------Straße
      ausfustra = sadr-stras.                               "SADR40A
*-------Land
      hlp_land_ausfu = sadr-land1.                          "SADR40A
*-------Postleitzahl
      ausfupost = sadr-pstlz.                               "SADR40A
*-------Ort
      ausfuorte = sadr-ort01.                               "SADR40A
    ENDIF.
  ENDIF.

*-- Es wurden Anschriftsdaten gefunden. Diese können aber
*-- unvollständig sein.
  IF ausfuname IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '032'
                                      t001-bukrs
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_ausfuname.
  ENDIF.

  IF ausfustra IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '032'
                                      t001-bukrs
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_ausfustra.
  ENDIF.

  IF ausfupost IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '032'
                                      t001-bukrs
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_ausfupost.
  ENDIF.

  IF ausfuorte IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '032'
                                      t001-bukrs
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_ausfuorte.
  ENDIF.

  IF hlp_land_ausfu IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '032'
                                      t001-land1
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_ausfunati.
  ENDIF.

  IF hlp_land_ausfu IS INITIAL.
    EXIT.
  ENDIF.

*-- Land des Ausführer nachlesen
  SELECT SINGLE * FROM t005
         WHERE land1 = hlp_land_ausfu.
  IF sy-subrc = 0.
    IF p_numer = 'X'.
      ausfunati = t005-landa.
    ELSE.
      ausfunati = t005-intca.
    ENDIF.
  ENDIF.

  IF ausfunati IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '006'
                                      hlp_land_ausfu
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_ausfunati.
    EXIT.
  ENDIF.

ENDFORM.                    "AUSF_SADR

*---------------------------------------------------------------------*
*       FORM WARENEMPF                                                *
*---------------------------------------------------------------------*
*       Adresse Warenempfaenger                                       *
*---------------------------------------------------------------------*
FORM warenempf CHANGING empfename LIKE vekab-empfename
                        empfestra LIKE vekab-empfestra
                        empfenati LIKE vekab-empfenati
                        empfepost LIKE vekab-empfepost
                        empfeorte LIKE vekab-empfeorte.

  DATA: hlp_land_we LIKE t005-land1.

  SELECT SINGLE * FROM vbpa
         WHERE vbeln = vbrk-vbeln
         AND   posnr = vbrp-pospa
         AND   parvw = con_parvw_we.

  IF sy-subrc NE 0.
    CLEAR vbpa.
    SELECT SINGLE * FROM vbpa
           WHERE vbeln = vbrk-vbeln
           AND   posnr = '000000'
           AND   parvw = con_parvw_we.
  ENDIF.

  IF sy-subrc = 0.
    IF vbpa-adrnr IS INITIAL.

      INCLUDE sd_dpp_rvexieks IF FOUND.

      IF gv_dpp_rvexieks_found IS INITIAL.
*-- Kundenstamm lesen
        SELECT SINGLE * FROM kna1
               WHERE kunnr = vbpa-kunnr.
      ENDIF.
      IF sy-subrc = 0.
        empfename    = kna1-name1.
        empfename+36 = kna1-name2.
        CONDENSE empfename.
        empfestra    = kna1-stras.
        hlp_land_we = kna1-land1.
        empfepost    = kna1-pstlz.
        empfeorte    = kna1-ort01.
      ENDIF.
    ELSE.
*-- Adresse nachlesen
      selection-addrnumber = vbpa-adrnr.

      CALL FUNCTION 'ADDR_GET'
        EXPORTING
          address_selection = selection
*         ADDRESS_GROUP     = 'CA01'                  "ALRK135829
          address_group     = 'BP  '                  "ALRK135829
        IMPORTING
          sadr              = sadr                    "SADR40A
        EXCEPTIONS
          parameter_error   = 1
          address_not_exist = 2
          version_not_exist = 3
          internal_error    = 4
          OTHERS            = 5.                      "SADR40A

      IF sy-subrc = 0.
        empfename    = sadr-name1.                          "SADR40A
        empfename+36 = sadr-name2.                          "SADR40A
        CONDENSE empfename.
        empfestra    = sadr-stras.                          "SADR40A
        hlp_land_we = sadr-land1.                           "SADR40A
        empfepost    = sadr-pstlz.                          "SADR40A
        empfeorte    = sadr-ort01.                          "SADR40A
      ELSE.
*-- Keine Adresse gefunnden
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_e
                                          '026'
                                          vbpa-kunnr
                                          con_mkmal
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_global
                                          con_empfename.
        EXIT.
      ENDIF.
    ENDIF.
  ELSE.
*-- Partnerrolle WE ist im Beleg nicht vorhanden
*-- Partnerrollenbezeichung nachlesen.
    SELECT SINGLE * FROM  tpart
           WHERE  spras       = sy-langu
           AND    parvw       = con_parvw_we.
    IF sy-subrc NE 0.
      CLEAR tpart-vtext.
    ENDIF.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '002'
*                                     CON_PARVW_WE
                                      tpart-vtext
                                      dummy_msgv
                                      con_mkmal
                                      dummy_msgv
                                      con_level_item
                                      con_empfename.
    EXIT.
  ENDIF.

*-- Es wurden Anschriftsdaten gefunden. Diese können aber
*-- unvollständig sein.
  IF empfename IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '031'
                                      vbpa-kunnr
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_empfename.
  ENDIF.

  IF empfestra IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '031'
                                      vbpa-kunnr
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_empfestra.
  ENDIF.

  IF empfepost IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '031'
                                      vbpa-kunnr
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_empfepost.
  ENDIF.

  IF empfeorte IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '031'
                                      vbpa-kunnr
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_empfeorte.
  ENDIF.

  IF hlp_land_we IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '031'
                                      vbpa-kunnr
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_empfenati.
  ENDIF.

  IF hlp_land_we IS INITIAL.
    EXIT.
  ENDIF.

*-- Land des Empfängers nachlesen
  SELECT SINGLE * FROM t005
         WHERE land1 = hlp_land_we.
  IF sy-subrc = 0.
    IF p_numer = 'X'.
      empfenati = t005-landa.
    ELSE.
      empfenati = t005-intca.
    ENDIF.
  ENDIF.

  IF empfenati IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '006'
                                      hlp_land_we
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_empfenati.
    EXIT.
  ENDIF.

ENDFORM.                    "WARENEMPF

*---------------------------------------------------------------------*
*       FORM FIRMNUMME                                                *
*---------------------------------------------------------------------*
*       Firmennummer in T001Z (SAPI05)                                *
*---------------------------------------------------------------------*
FORM firmnumme USING    bukrs     LIKE vbrk-bukrs
                        werksland LIKE veiav-werksland
                        bukrsland LIKE t001-land1
                        firmnume
               CHANGING firmnumme LIKE vekab-firmnumme.

  firmnumme = firmnume.

  IF firmnumme IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '022'
                                      bukrs
                                      werksland
                                      bukrsland
                                      dummy_msgv
                                      con_level_header
                                      con_firmnumme.
  ENDIF.

ENDFORM.                    "FIRMNUMME

*---------------------------------------------------------------------*
*       FORM VERAMONAT                                                *
*---------------------------------------------------------------------*
*       Monat aufbereitet nach Vorgabe der Oberzolldirektion          *
*---------------------------------------------------------------------*
FORM veramonat CHANGING veramonat LIKE vexav-veramonat.

  CASE p_monat.
    WHEN '01'.  veramonat = '1'.
    WHEN '02'.  veramonat = '2'.
    WHEN '03'.  veramonat = '3'.
    WHEN '04'.  veramonat = '4'.
    WHEN '05'.  veramonat = '5'.
    WHEN '06'.  veramonat = '6'.
    WHEN '07'.  veramonat = '7'.
    WHEN '08'.  veramonat = '8'.
    WHEN '09'.  veramonat = '9'.
    WHEN '10'.  veramonat = '0'.
    WHEN '11'.  veramonat = 'A'.
    WHEN '12'.  veramonat = 'B'.
  ENDCASE.

ENDFORM.                    "VERAMONAT

*---------------------------------------------------------------------*
*       FORM RUECKERST                                                *
*---------------------------------------------------------------------*
*       Rückerstattungscode für die Schweiz                           *
*---------------------------------------------------------------------*
FORM rueckerst CHANGING rueckerst LIKE vexav-rueckerst.

*-Ueberpruefung wegen Fehlerprotokoll
* IF VEXAV-RUECKERST GT 3.

ENDFORM.                    "RUECKERST

*---------------------------------------------------------------------*
*       FORM BEWIPFLIC                                                *
*---------------------------------------------------------------------*
*       Bewilligungspflichtige Güter die nur mit einer Bew.           *
*       exportiert werden dürfen.                                     *
*---------------------------------------------------------------------*
FORM bewipflic CHANGING bewipflic LIKE vexav-bewipflic.

ENDFORM.                    "BEWIPFLIC

*---------------------------------------------------------------------*
*       FORM BEWINUMME                                                *
*---------------------------------------------------------------------*
*       Bewilligungspflichtige Güter die nur mit einer Bew.           *
*       exportiert werden dürfen. Die erhaltene Bewilligungsnummer.   *
*---------------------------------------------------------------------*
FORM bewinumme CHANGING bewinumme LIKE vexav-bewinumme.

ENDFORM.                    "BEWINUMME

*---------------------------------------------------------------------*
*       FORM POSTLEITZ                                                *
*---------------------------------------------------------------------*
*       Postleitzahl des Abgangsortes gemäss Eingabe in der Selektion *
*       1 = Buchungskreis          2 = Verkaufsorganisation           *
*       3 = Werk                   4 = Versandstelle                  *
*---------------------------------------------------------------------*
FORM postleitz USING    pstlz     LIKE rvsel-p_pstlz
               CHANGING postleitz LIKE vexav-postleitz.

  CASE pstlz.                          "Eingegebene Selektionsebene
    WHEN 1.                            "Postleitzahl aus dem BUKRS
      selection-addrnumber = t001-adrnr.                    "SADR40A
    WHEN 2.                            "Postleitzahl aus der VKORG
      selection-addrnumber = tvko-adrnr.                    "SADR40A
    WHEN 3.                            "Postleitzahl aus dem WERK
      SELECT SINGLE * FROM t001w WHERE werks = vbrp-werks.
      IF sy-subrc = 0.
        selection-addrnumber = t001w-adrnr.                 "SADR40A
      ENDIF.
    WHEN 4.                            "Postleitzahl aus der VSTEL
      SELECT SINGLE * FROM tvst WHERE vstel = vbrp-vstel.
      IF sy-subrc = 0.
        selection-addrnumber = tvst-adrnr.                  "SADR40A
      ENDIF.
  ENDCASE.

  CALL FUNCTION 'ADDR_GET'
    EXPORTING
      address_selection = selection
      address_group     = 'CA01'
    IMPORTING
      sadr              = sadr                              "SADR40A
    EXCEPTIONS
      parameter_error   = 1
      address_not_exist = 2
      version_not_exist = 3
      internal_error    = 4
      OTHERS            = 5.                                "SADR40A

  IF sy-subrc = 0.
    postleitz = sadr-pstlz.                                 "SADR40A
    IF postleitz IS INITIAL.
*-- Adresse ist ohne Postleitzahl gepflegt
      CASE pstlz.                      "Eingegebene Selektionsebene
        WHEN 1.                        "Postleitzahl aus dem BUKRS
          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_e
                                            '032'
                                            t001-bukrs
                                            con_mkmal
                                            dummy_msgv
                                            dummy_msgv
                                            con_level_global
                                            con_postleitz.
          EXIT.
        WHEN 2.                        "Postleitzahl aus der VKORG
          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_e
                                            '037'
                                            tvko-vkorg
                                            con_mkmal
                                            dummy_msgv
                                            dummy_msgv
                                            con_level_global
                                            con_postleitz.
          EXIT.
        WHEN 3.                        "Postleitzahl aus dem WERK
          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_e
                                            '038'
                                            t001w-werks
                                            con_mkmal
                                            dummy_msgv
                                            dummy_msgv
                                            con_level_global
                                            con_postleitz.
          EXIT.
        WHEN 4.                        "Postleitzahl aus der VSTEL
          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_e
                                            '039'
                                            tvst-vstel
                                            con_mkmal
                                            dummy_msgv
                                            dummy_msgv
                                            con_level_global
                                            con_postleitz.
          EXIT.
      ENDCASE.
    ENDIF.
  ELSE.
*-- Adresse existiert nicht
    CASE pstlz.                        "Eingegebene Selektionsebene
      WHEN 1.                          "Postleitzahl aus dem BUKRS
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_e
                                          '033'
                                          t001-bukrs
                                          con_mkmal
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_global
                                          con_postleitz.
        EXIT.
      WHEN 2.                          "Postleitzahl aus der VKORG
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_e
                                          '034'
                                          tvko-vkorg
                                          con_mkmal
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_global
                                          con_postleitz.
        EXIT.
      WHEN 3.                          "Postleitzahl aus dem WERK
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_e
                                          '035'
                                          t001w-werks
                                          con_mkmal
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_global
                                          con_postleitz.
        EXIT.
      WHEN 4.                          "Postleitzahl aus der VSTEL
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_e
                                          '036'
                                          tvst-vstel
                                          con_mkmal
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_global
                                          con_postleitz.
        EXIT.
    ENDCASE.

  ENDIF.

ENDFORM.                    "POSTLEITZ
*----------------------------------------------------------------------*
*       Form  INLAIEVER
*----------------------------------------------------------------------*
*       Inländischer Verkehrszweig                                     *
*----------------------------------------------------------------------*
FORM inlaiever CHANGING inlaiever LIKE vexav-inlaiever.

  inlaiever = eikp-iever.

  IF eikp-iever IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '010'
                                      con_mkmal
                                      vbrk-vbeln
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_header
                                      con_inlaiever.
    EXIT.
  ENDIF.

ENDFORM.                    "INLAIEVER

*---------------------------------------------------------------------*
*       FORM HANDELSLD                                                *
*---------------------------------------------------------------------*
*       Handelsland --> Käuferland                                    *
*---------------------------------------------------------------------*
FORM handelsld CHANGING handelsld LIKE vexav-handelsld.

  DATA: hlp_parvw LIKE vbpa-parvw.
  DATA: hlp_vbeln LIKE vbrp-vbeln.
  DATA: hlp_posnr LIKE vbrp-posnr.

  IF h_herku = 'E' OR h_herku = 'K'.
*-- EXTRASTAT - KOBRA - Lesen Auftraggeber
    hlp_parvw = con_parvw_ag.
  ELSEIF h_herku = 'C'.
*-- VAR - Lesen Warenempfänger
    hlp_parvw = con_parvw_we.
  ENDIF.

  IF NOT vbrp-aubel IS INITIAL.
    IF vbrp-autyp = vbtyp_bestell.
*--   Kein Auftrag vorhanden - Faktura lesen
      hlp_vbeln = vbrp-vbeln.
      IF NOT vbrp-pospa IS INITIAL.
        hlp_posnr = vbrp-pospa.
      ELSE.
        hlp_posnr = vbrp-posnr.
      ENDIF.
    ELSE.
      hlp_vbeln = vbrp-aubel.
      hlp_posnr = vbrp-aupos.
    ENDIF.

  ELSE.
*-- Kein Auftrag vorhanden - Faktura lesen
    hlp_vbeln = vbrp-vbeln.
    IF NOT vbrp-pospa IS INITIAL.
      hlp_posnr = vbrp-pospa.
    ELSE.
      hlp_posnr = vbrp-posnr.
    ENDIF.
  ENDIF.

*-- Lesen mit posnr vbrp-aupos
  SELECT SINGLE * FROM vbpa
         WHERE vbeln = hlp_vbeln
         AND   posnr = hlp_posnr
         AND   parvw = hlp_parvw.
  IF sy-subrc NE 0.
*-- Lesen mit posnr 0
    SELECT SINGLE * FROM vbpa
           WHERE vbeln = hlp_vbeln
           AND   posnr = '000000'
           AND   parvw = hlp_parvw.
  ENDIF.

  IF sy-subrc NE 0.
*-- Keine entsprechende Partnerrolle gefunden
    SELECT SINGLE * FROM  tpart
           WHERE  spras       = sy-langu
           AND    parvw       = hlp_parvw.
    IF sy-subrc NE 0.
      CLEAR tpart-vtext.
    ENDIF.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '002'
*                                     HLP_PARVW
                                      tpart-vtext
                                      dummy_msgv
                                      con_mkmal
                                      dummy_msgv
                                      con_level_item
                                      con_handelsld.
    EXIT.
  ENDIF.

*-- Land in Partnertabelle ist leer --> Adresse Lesen
  IF vbpa-land1 IS INITIAL.
    CLEAR sadr.
    selection-addrnumber = vbpa-adrnr.                      "SADR40A
    CALL FUNCTION 'ADDR_GET'
      EXPORTING
        address_selection = selection
        address_group     = 'BP'
      IMPORTING
        sadr              = sadr                            "SADR40A
      EXCEPTIONS
        parameter_error   = 1
        address_not_exist = 2
        version_not_exist = 3
        internal_error    = 4
        OTHERS            = 5.                              "SADR40A

    IF sy-subrc IS INITIAL.            "Adresse gefunden
      vbpa-land1 = sadr-land1.                              "SADR40A
*-- Land in Adresse zu Partner &1 mit Partnerrolle &2 nicht gepflegt
      IF sadr-land1 IS INITIAL.                             "SADR40A
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_e
                                          '025'
                                          vbpa-kunnr
                                          con_mkmal
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_global
                                          con_handelsld.
        EXIT.
      ENDIF.
    ELSE.
*-- Keine Adresse gefunden
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '026'
                                        vbpa-kunnr
                                        con_mkmal
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_global
                                        con_handelsld.
      EXIT.
    ENDIF.
  ENDIF.

  SELECT SINGLE * FROM t005
         WHERE land1 = vbpa-land1.
  IF sy-subrc = 0.
    IF p_numer = true.
      handelsld = t005-landa.
    ELSE.
      handelsld = t005-intca.
    ENDIF.
  ENDIF.

*********************** SPECIAL ***************************************
*- Ländercode Umschlüsseln falls erforderlich
  IF sadr-adrnr IS INITIAL.
    selection-addrnumber = vbpa-adrnr.                      "SADR40A
    CALL FUNCTION 'ADDR_GET'
      EXPORTING
        address_selection = selection
        address_group     = 'BP'
      IMPORTING
        sadr              = sadr                            "SADR40A
      EXCEPTIONS
        parameter_error   = 1
        address_not_exist = 2
        version_not_exist = 3
        internal_error    = 4
        OTHERS            = 5.                              "SADR40A

    IF sy-subrc IS INITIAL.            "Adresse gefunden
      PERFORM read_spec_reg_tab USING    sadr-land1
                                         sadr-regio
                                CHANGING handelsld.
    ELSE.
      PERFORM read_spec_reg_tab USING    vbpa-land1
                                         space
                                CHANGING handelsld.
    ENDIF.
  ELSE.
    PERFORM read_spec_reg_tab USING    sadr-land1
                                       sadr-regio
                              CHANGING handelsld.
  ENDIF.

********************** SPECIAL ***************************************

  IF handelsld IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '006'
                                      vbpa-land1
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_handelsld.
    EXIT.
  ENDIF.

ENDFORM.                    "HANDELSLD

*---------------------------------------------------------------------*
*       FORM PLISO                                                    *
*---------------------------------------------------------------------*
*       ISO-Ländercode des Partnerlandes                              *
*---------------------------------------------------------------------*
FORM pliso CHANGING pliso LIKE vexav-pliso.

  READ TABLE t005_tab WITH KEY land1 = vbrk-land1
                              TRANSPORTING intca.

  IF sy-subrc IS INITIAL.
    pliso = t005_tab-intca.
  ENDIF.

*********************** SPECIAL ***************************************
*- Ländercode Umschlüsseln falls erforderlich
  PERFORM read_spec_reg_tab USING    vbrk-land1
                                     space
                            CHANGING pliso.
********************** SPECIAL ***************************************

  IF pliso IS INITIAL.

    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '006'
                                      vbrk-land1
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_global
                                      con_pliso.
    EXIT.
  ENDIF.

ENDFORM.                    "PLISO

*---------------------------------------------------------------------*
*       FORM FIRMENNUM                                                *
*---------------------------------------------------------------------*
*       Nummer beim statistischen Bundesamt (aus Tab. 001Z)           *
*---------------------------------------------------------------------*
FORM firmennum USING    bukrs     LIKE vbrk-bukrs
                        werksland LIKE veiav-werksland
                        bukrsland LIKE t001-land1
               CHANGING firmennum LIKE vexav-firmennum.


  firmennum = firmennu.
  IF firmennu IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '022'
                                      bukrs
                                      werksland
                                      bukrsland
                                      dummy_msgv
                                      con_level_global
                                      con_firmennum.
    EXIT.
  ENDIF.

ENDFORM.                    "FIRMENNUM

*---------------------------------------------------------------------*
*       FORM MATERIALN                                                *
*---------------------------------------------------------------------*
*       Materialnummer --> CH                                         *
*---------------------------------------------------------------------*
FORM materialn CHANGING materialn LIKE vexav-materialn.

*-- Keine Unvollständigkeitsprüfung erforderlich
  IF h_herku = 'S'.
    materialn = vbrp-matnr.
  ELSE.
    materialn = materialnu.
  ENDIF.

ENDFORM.                    "MATERIALN

*---------------------------------------------------------------------*
*       FORM SPANIENID                                                *
*---------------------------------------------------------------------*
*       Lieferbedingung : Teil II                                     *
*---------------------------------------------------------------------*
FORM spanienid CHANGING spanienid LIKE veiav-spanienid.

  IF p_spani = space.
    spanienid = vbrk-inco2(1).
    IF vbrk-inco2 IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '014'
                                        con_mkmal
                                        dummy_msgv
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_header
                                        con_spanienid.
      EXIT.
    ENDIF.

  ELSE.
    IF NOT ( vbrk-inco1 IS INITIAL ).
      IF ( flg_rvivst00_active = true )
      OR ( reference_direction = con_import
           AND flg_rvivst00_active = false ).
        PERFORM inco_zwei_arrivals CHANGING spanienid.
      ELSE.
        PERFORM inco_zwei CHANGING spanienid.
      ENDIF.
    ELSE.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '014'
                                        con_mkmal
                                        dummy_msgv
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_header
                                        con_spanienid.
      EXIT.
    ENDIF.
  ENDIF.

ENDFORM.                    "SPANIENID

*---------------------------------------------------------------------*
*       FORM LIEFRUINR                                                *
*---------------------------------------------------------------------*
*       Lieferanten UID : Nur für RVIVST00 von Relevanz               *
*---------------------------------------------------------------------*
FORM liefruinr USING    kundeuinr LIKE veiav-kundeuinr
                        VALUE(invoicing_bukrs)   LIKE vbrk-bukrs
                        werksland                LIKE veiav-werksland
                        VALUE(invoicing_country) LIKE t001-land1
               CHANGING liefruinr LIKE veiav-liefruinr.
*-- Routine nur von RVIVST00 verwendet --> Fehler kann nur
*-- in "Umschlüsselung" (siehe Routine KUNDEUINR) passiert sein!
  IF flg_rvivst00_active = true.
    liefruinr = kundeuinr.

    IF liefruinr IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '024'
                                        invoicing_bukrs
                                        werksland
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_global
                                        con_liefruinr.
      EXIT.
    ENDIF.
  ELSE.
    PERFORM get_partner_vat USING    con_liefruinr
                            CHANGING liefruinr.
  ENDIF.

ENDFORM.                    "LIEFRUINR

*---------------------------------------------------------------------*
*       FORM ARTGESCHA                                                *
*---------------------------------------------------------------------*
*       Art des Geschäftes                                            *
*---------------------------------------------------------------------*
FORM artgescha USING VALUE(invoicing_country) LIKE t001-land1
                     VALUE(reporting_country) LIKE vbrk-land1
               CHANGING artgescha LIKE veiav-artgescha.

  IF flg_rvivst00_active = true.
    CLEAR artgescha.
    CALL FUNCTION 'FTRADE_BUSINESS_TYPE_SWITCH'
      EXPORTING
        i_direction            = con_t609r_verei_2
        i_source_country       = invoicing_country
        i_source_business_type = eipo-exart
        i_target_country       = reporting_country
      IMPORTING
        e_target_business_type = artgescha
      EXCEPTIONS
        no_entry_found         = 1
        wrong_direction        = 2
        OTHERS                 = 3.

    IF NOT ( sy-subrc IS INITIAL )  OR artgescha IS INITIAL.
*-- Keine Umschlüsselung von land nach Land für Feld & gepflegt!
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '016'
                                        con_mkmal
                                        invoicing_country
                                        reporting_country
                                        con_artgescha
                                        con_level_item
                                        con_artgescha.
      EXIT.
    ENDIF.

  ELSE.
    artgescha = eipo-exart.
*-- Belegposition: Feld &1 nicht gepflegt!
    IF eipo-exart IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '011'
                                        con_mkmal
                                        vbrk-vbeln
                                        vbrp-posnr
                                        dummy_msgv
                                        con_level_item
                                        con_artgescha.
      EXIT.
    ENDIF.
  ENDIF.

ENDFORM.                    "ARTGESCHA

*---------------------------------------------------------------------*
*       FORM STATWAREN                                                *
*---------------------------------------------------------------------*
*       Statistische Warennummer : achtstellige Warennummer           *
*---------------------------------------------------------------------*
FORM statwaren USING    VALUE(invoicing_country) LIKE t001-land1
                        VALUE(reporting_country) LIKE vbrk-land1
               CHANGING statwaren LIKE veiav-statwaren.

  IF flg_rvivst00_active = true.
    CLEAR statwaren.
    CALL FUNCTION 'FTRADE_COMMODITY_CODE_SWITCH'
      EXPORTING
        i_direction              = con_t609r_verei_2
        i_source_country         = invoicing_country
        i_source_commodity_code  = eipo-stawn
        i_target_country         = reporting_country
        i_access_mat_master      = 'X'
        i_material_number        = vbrp-matnr
        i_call_within_trade_area = 'X'
      IMPORTING
        e_target_commodity_code  = statwaren
      EXCEPTIONS
        no_entry_found           = 1
        wrong_direction          = 2
        OTHERS                   = 3.
    IF sy-subrc NE 0 OR statwaren IS INITIAL.
*-- Keine Umschlüsselung von land nach Land für Feld & gepflegt!
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '016'
                                        con_mkmal
                                        invoicing_country
                                        reporting_country
                                        con_statwaren
                                        con_level_item
                                        con_statwaren.
      EXIT.
    ENDIF.

  ELSE.

    statwaren = eipo-stawn.
*-- Belegposition: Feld &1 nicht gepflegt!
    IF eipo-stawn IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '011'
                                        con_mkmal
                                        vbrk-vbeln
                                        vbrp-posnr
                                        dummy_msgv
                                        con_level_item
                                        con_statwaren.
      EXIT.
    ENDIF.
  ENDIF.

ENDFORM.                    "STATWAREN

*---------------------------------------------------------------------*
*       FORM LIEFERBED                                                *
*---------------------------------------------------------------------*
*       Lieferbedingung : Teil I                                      *
*---------------------------------------------------------------------*

FORM lieferbed CHANGING lieferbed LIKE veiav-lieferbed.

  lieferbed = vbrk-inco1.

  IF vbrk-inco1 IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '013'
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_header
                                      con_lieferbed.
    EXIT.
  ENDIF.

ENDFORM.                    "LIEFERBED

*---------------------------------------------------------------------*
*       FORM LIEFERWAE                                                *
*---------------------------------------------------------------------*
*       Währung des Lieferanten                                     *
*---------------------------------------------------------------------*

FORM lieferwae CHANGING lieferwae LIKE veiav-lieferwae.

  IF ( flg_rvivst00_active = true )
      OR ( reference_direction = con_import
           AND flg_rvivst00_active = false ).
    lieferwae = vbrk-waerk.
  ENDIF.

  IF lieferwae IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '008'
                                      vbrk-waerk
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_header
                                      con_lieferwae.
    EXIT.
  ENDIF.

ENDFORM.                    "LIEFERWAE


*---------------------------------------------------------------------*
*       FORM BESTILAND                                                *
*---------------------------------------------------------------------*
*       Bestimmungsmitgliedstaat                                      *
*---------------------------------------------------------------------*
FORM bestiland USING    destination_country LIKE vbrk-land1
                        destination_region  LIKE vbrk-regio
               CHANGING bestiland LIKE veiav-bestiland.

  IF h_herku = 'S'.
    bestiland = destination_country.
    EXIT.
  ENDIF.

*-Lesen T005
  SELECT SINGLE * FROM t005
         WHERE land1 = destination_country.
  IF sy-subrc IS INITIAL.
    IF p_numer = true.
*-- INTRASTAT
      IF h_herku = 'I'.
        bestiland = t005-intcn.
*        PERFORM GET_DEPARTMENTS CHANGING BESTILAND.
        IF bestiland = '000'.
          CLEAR bestiland.
        ENDIF.
      ELSE.
*-- EXTRASTAT - KOBRA - SED - VAR
        bestiland = t005-landa.
      ENDIF.
    ELSE.
      bestiland = t005-intca.
    ENDIF.
  ENDIF.

*- Ländercode Umschlüsseln falls erforderlich
  PERFORM read_spec_reg_tab USING    destination_country
                                     destination_region
                            CHANGING bestiland.

  IF bestiland IS INITIAL.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '006'
                                      destination_country
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_header
                                      con_bestiland.
    EXIT.
  ENDIF.


ENDFORM.                    "BESTILAND

*---------------------------------------------------------------------*
*       FORM BESONMASS                                                *
*---------------------------------------------------------------------*
*       Besondere Maßeinheit                                          *
*---------------------------------------------------------------------*
FORM besonmass USING    VALUE(statwaren) LIKE eipo-stawn
               CHANGING besonmaak LIKE veiav-besonmaak
                        besonmaeh LIKE veiav-besonmaeh.

  DATA: quantity TYPE f.

*-- Initialisieren der Übergabeparameter
  quantity = vbrp-fkimg.
  CLEAR subrc_besonmass.

  IF statwaren IS INITIAL.
*-- Belegposition: Feld &1 nicht gepflegt!
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '012'
                                      con_mkmal
                                      con_mkmal_statwaren
                                      vbrk-vbeln
                                      vbrp-posnr
                                      con_level_item
                                      con_besonmaak.
    EXIT.
  ENDIF.

  PERFORM get_alternative_quantity USING    p_milnd
                                            statwaren
                                   CHANGING quantity
                                            subrc_besonmass.
  besonmaeh = t604-bemeh.
  IF subrc_besonmass IS INITIAL.
    besonmaak = quantity.
  ELSE.
    CLEAR: besonmaak.
  ENDIF.

ENDFORM.                    "BESONMASS

*---------------------------------------------------------------------*
*       FORM EIGENMASS                                                *
*---------------------------------------------------------------------*
*       Eigenmasse in Kilogramm                                       *
*---------------------------------------------------------------------*
FORM eigenmass CHANGING eigenmaak LIKE veiav-eigenmaak
                        eigenmaeh LIKE veiav-eigenmaeh
                        eigenmass
                        eigenmaak_floating TYPE v50g_floating.

  DATA: flg_error VALUE ' '.

  CLEAR eigenmaak_floating.

  IF vbrp-ntgew IS INITIAL.
    IF ( eipo-stawn(2) = '71' OR
       eipo-stawn(4) = '9114' ) AND h_herku = 'C'.
      eigenmaeh = con_gewicht_g.
    ELSE.
      eigenmaeh = con_gewicht_kg.
    ENDIF.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '018'
                                      con_mkmal
                                      vbrp-matnr
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_item
                                      con_eigenmaak.
    EXIT.
  ENDIF.

*-- Sonderfall Schweiz:
*-- Bestimmte Materialgruppen müssen in Gramm gemeldet werden
  IF ( eipo-stawn(2) = '71' OR
     eipo-stawn(4) = '9114' ) AND h_herku = 'C'.
    eigenmaeh = con_gewicht_g.
    IF vbrp-gewei NE con_gewicht_g.
      CALL FUNCTION 'UNIT_CONVERSION'
        EXPORTING
          meins                = vbrp-gewei
          mglme                = vbrp-ntgew
          meinh                = con_gewicht_g
        IMPORTING
*         O_MGAME              = VBRP-NTGEW           "ALRK263037
          o_mgame              = eigenmaak_floating   "ALRK263037
        EXCEPTIONS
          conversion_not_found = 1
          different_dimension  = 2
          division_by_zero     = 3
          overflow             = 4
          t006d_entry_missing  = 5
          t006_entry_missing   = 6
          OTHERS               = 7.

      IF NOT sy-subrc IS INITIAL.
        flg_error = true.
        IF sy-subrc = 1.
*-- Umrechnungsfaktoren nicht gefunden
          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_e
                                            '021'
                                            con_mkmal
                                            vbrp-gewei
                                            con_gewicht_g
                                            vbrp-matnr
                                            con_level_item
                                            con_eigenmaak.
          EXIT.
        ENDIF.
      ELSE.
        eigenmaeh = con_gewicht_g.
*       EIGENMAAK = VBRP-NTGEW.                             "ALRK263037
        eigenmaak = eigenmaak_floating.                     "ALRK263037
        IF eigenmaak_floating < con_value_0001              "ALRK263037
           AND eigenmaak_floating > 0.
          PERFORM low_weight_handling
                                 USING    eigenmaak_floating "ALRK263037
                                 CHANGING eigenmaak         "ALRK263037
                                          eigenmass.        "ALRK263037
        ENDIF.                                              "ALRK263037
      ENDIF.
    ELSE.
      eigenmaeh = con_gewicht_g.
      eigenmaak_floating = vbrp-ntgew.
      eigenmaak = vbrp-ntgew.
    ENDIF.

  ELSE.

    eigenmaeh = con_gewicht_kg.
    IF vbrp-gewei NE con_gewicht_kg.
*------- Gewicht nicht in Kilogramm --> Umrechnung
*------- Gewicht wird auf ganze Stellen (KG) abgeschnitten
      CALL FUNCTION 'UNIT_CONVERSION'
        EXPORTING
          meins                = vbrp-gewei
          mglme                = vbrp-ntgew
          meinh                = con_gewicht_kg
        IMPORTING
*         O_MGAME              = VBRP-NTGEW           "ALRK263037
          o_mgame              = eigenmaak_floating   "ALRK263037
        EXCEPTIONS
          conversion_not_found = 1
          different_dimension  = 2
          division_by_zero     = 3
          overflow             = 4
          t006d_entry_missing  = 5
          t006_entry_missing   = 6
          OTHERS               = 7.
      IF NOT sy-subrc IS INITIAL.
        flg_error = true.
        IF sy-subrc = 1.
*-- Umrechnungsfaktoren nicht gefunden
          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_e
                                            '021'
                                            con_mkmal
                                            vbrp-gewei
                                            con_gewicht_g
                                            vbrp-matnr
                                            con_level_item
                                            con_eigenmaak.
          EXIT.
        ENDIF.
      ELSE.
*       EIGENMAAK = VBRP-NTGEW.                             "ALRK263037
        eigenmaak = eigenmaak_floating.                     "ALRK263037
        eigenmaeh = con_gewicht_kg.
        IF eigenmaak_floating < con_value_0001              "ALRK263037
           AND eigenmaak_floating > 0.
          PERFORM low_weight_handling
                                 USING    eigenmaak_floating "ALRK263037
                                 CHANGING eigenmaak         "ALRK263037
                                          eigenmass.        "ALRK263037
        ENDIF.                                              "ALRK263037
      ENDIF.
    ELSE.
      eigenmaeh = con_gewicht_kg.
      eigenmaak_floating = vbrp-ntgew.
      eigenmaak = vbrp-ntgew.
    ENDIF.
  ENDIF.

  IF flg_error = true.
    CLEAR: eigenmaak,
           eigenmaak_floating.
  ENDIF.

ENDFORM.                    "EIGENMASS

*---------------------------------------------------------------------*
*       FORM NLDBOCODE                                                *
*---------------------------------------------------------------------*
*       NL-DB-Code fuer die Niederlande                               *
*---------------------------------------------------------------------*
FORM nldbocode USING    VALUE(statwaren) LIKE eipo-stawn
               CHANGING nldbocode LIKE veiav-nldbocode.
*-- Keine Unvollständigkeitsprüfung erforderlich
  DATA: hlp_stawn LIKE eipo-stawn.

  hlp_stawn = statwaren.

  REPLACE '.'
              WITH space INTO hlp_stawn.
  WHILE sy-subrc IS INITIAL.
    REPLACE '.'
                WITH space INTO hlp_stawn.
  ENDWHILE.
  CONDENSE hlp_stawn NO-GAPS.

  nldbocode = hlp_stawn+8(2).

ENDFORM.                    "NLDBOCODE

*---------------------------------------------------------------------*
*       FORM RETOURCOD                                                *
*---------------------------------------------------------------------*
*       Retourenkennzeichen                                           *
*---------------------------------------------------------------------*
*  -->  RETOURCOD                                                     *
*---------------------------------------------------------------------*
FORM retourcod CHANGING retourcod LIKE veiav-retourcod.

*-- Keine Unvollständigkeitsprüfung erforderlich
  IF vbrk-vbtyp CA vbtyp_retour.
*-----Retouren-Fall
    IF vbrp-netwr < 0.
      retourcod = ' '.
    ELSE.
      retourcod = 'X'.
    ENDIF.
  ELSE.
*-----Normal-Fall
    IF vbrp-netwr < 0.
      retourcod = 'X'.
    ELSE.
      retourcod = ' '.
    ENDIF.
  ENDIF.

ENDFORM.                    "RETOURCOD

*---------------------------------------------------------------------*
*       FORM RECHNWERT                                                *
*---------------------------------------------------------------------*
*       Rechnungswert                                                 *
*---------------------------------------------------------------------*
FORM rechnwert CHANGING rechnweak   LIKE veiav-rechnweak
                        rechnweeh   LIKE veiav-rechnweeh.

  DATA: flg_error VALUE ' '.
  DATA: hlp_rechnwert LIKE veiav-rechnwert.
  DATA: lv_plants_abroad_invoice TYPE c.
  DATA: lv_waerk LIKE vbrk-waerk.
  DATA: lv_netwr LIKE vbrp-netwr.

  lv_waerk = vbrk-waerk.
  lv_netwr = vbrp-netwr.

*-- Initialisieren der Währungseinheit
  rechnweeh = local_currency.                               "P45K000050

*-- Bei kostenlosen Positionen wird kein Eintrag in das
*-- Unvollständigkeitsprotokoll vermerkt.
  PERFORM check_free_of_charge_items USING vbrp-pstyv
                                           vbrp-prsfd
                                           lv_netwr
                                  CHANGING flg_free_of_charge
                                           lv_plants_abroad_invoice.
*-- Rechnungswert ist Null wegen WIA. Übernahme des Bruttowertes.
  IF lv_netwr = 0
     AND lv_plants_abroad_invoice = true.
    MOVE vbrp-brtwr TO lv_netwr.
  ENDIF.

  IF lv_netwr IS INITIAL
     AND flg_free_of_charge = false.
    flg_error = true.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '019'
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_item
                                      con_rechnweak.
    EXIT.
  ELSEIF lv_netwr IS INITIAL
       AND flg_free_of_charge = true.
*-- Kostenlose Position
*   EXIT.                                         "<<< delete HP_207868
*<<<<<<<<<<<< begin of insertion HP_207868 <<<<<<<<<<<<<<<<<<<<<<<<<<<<
*    IF P_MILND = 'BE' OR P_MILND = 'B'.
    IF milnd_iso = con_intca_be OR
       milnd_iso = con_intca_fi.
      MOVE eipo-grwrt TO lv_netwr.
      MOVE eikp-grwcu TO lv_waerk.
    ELSE.
      EXIT.
    ENDIF.
*<<<<<<<<<<<<< end of insertion HP_207868 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  ENDIF.

  IF flg_error IS INITIAL
     AND NOT lv_netwr IS INITIAL.
    PERFORM invoice_value USING    p_datum
                                   kurstyp
                                   local_currency        " Meldewaehrung
                                   lv_waerk              " Belegwaehrung
                                   eikp-grwcu            " Hauswaehrung
                                   vbrk-kurrf
                                   vbrp-kursk
                                   vbrp-fbuda
                                   vbrk-fkdat
                                   vbrp-brtwr
                          CHANGING lv_netwr
                                   hlp_rechnwert
                                   rechnweak
                                   rechnweeh
                                   flg_error.
  ENDIF.

  IF flg_error = true.
    CLEAR: rechnweak.
    rechnweeh = local_currency.                             "P45K000050
  ENDIF.

ENDFORM.                    "RECHNWERT

*---------------------------------------------------------------------*
*       FORM GRENZWERT                                               *
*---------------------------------------------------------------------*
*       Statistischer Wert (Grenzübergangswert)                       *
*---------------------------------------------------------------------*
FORM grenzwert CHANGING grenzweak LIKE veiav-grenzweak
                        grenzweeh LIKE veiav-grenzweeh.

  DATA: flg_error,
        lv_grwrt  LIKE eipo-grwrt.

*-- Initialisieren der Währungsfelder
  lv_grwrt  = eipo-grwrt.
  grenzweeh = local_currency.

  IF eipo-grwrt IS INITIAL.
    flg_error = true.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '020'
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_item
                                      con_grenzweak.
    EXIT.
  ENDIF.

  IF flg_error IS INITIAL
     AND NOT eipo-grwrt IS INITIAL.
    PERFORM statistical_value USING    p_datum
                                       kurstyp
                                       local_currency    " Meldewaehrung
                                       vbrk-waerk        " Belegwaehrung
                                       eikp-grwcu        " Hauswaehrung
                                       vbrk-kurrf
                                       vbrp-kursk
                                       vbrp-fbuda
                                       vbrk-fkdat
                              CHANGING lv_grwrt
                                       grenzweak
                                       grenzweeh
                                       flg_error.
  ENDIF.

  IF flg_error = true.
    CLEAR: grenzweak.
    grenzweeh = local_currency.
  ENDIF.

ENDFORM.                    "GRENZWERT

*&---------------------------------------------------------------------*
*&      Form  IFREMDWER
*&---------------------------------------------------------------------*
*       In Italien muß der Rechnungswert auch in Fremdwährung          *
*       (währung des ISO-Ländercodes aus der VAT-Nummer)               *
*       angegeben werden.                                              *
*----------------------------------------------------------------------*
FORM ifremdwer USING    delivering_country LIKE t005-land1
               CHANGING ifremdwak LIKE veiav-ifremdwak
                        ifremdweh LIKE veiav-ifremdweh.

  DATA: flg_error VALUE ' '.
  DATA: hlp_ifremdwer LIKE veiav-ifremdwer.
  DATA: lv_plants_abroad_invoice TYPE c.
*-- Initialisieren der Währungseinheit
  ifremdweh = vbrk-waerk.

*-- Bei kostenlosen Positionen wird kein Eintrag in das
*-- Unvollständigkeitsprotokoll vermerkt.
  PERFORM check_free_of_charge_items USING vbrp-pstyv
                                           vbrp-prsfd
                                           vbrp-netwr
                                  CHANGING flg_free_of_charge
                                           lv_plants_abroad_invoice.
*-- Rechnungswert ist Null wegen WIA. Übernahme des Bruttowertes.
  IF vbrp-netwr = 0
     AND lv_plants_abroad_invoice = true.
    MOVE vbrp-brtwr TO vbrp-netwr.
  ENDIF.

  DATA: ls_t005 LIKE t005.
  DATA: hlp_ifremdweh LIKE veiav-ifremdweh.
  flg_error = false.
*-- determine vendor country currency
  SELECT SINGLE * FROM t005 INTO ls_t005
                  WHERE land1 = delivering_country.
  IF sy-subrc = 0.
    CASE ls_t005-intca.
      WHEN 'GB'. ifremdweh = 'GBP'.
      WHEN 'DK'. ifremdweh = 'DKK'.
      WHEN 'SE'. ifremdweh = 'SEK'.
      WHEN 'CY'.
        IF p_gjahr LT '2008'.
          ifremdweh = 'CYP'.
        ELSE.
          RETURN.
        ENDIF.
      WHEN 'CZ'. ifremdweh = 'CZK'.
      WHEN 'EE'.
        IF p_gjahr < 2011.
          ifremdweh = 'EEK'.
        ELSE.
          RETURN.
        ENDIF.
      WHEN 'HU'. ifremdweh = 'HUF'.
      WHEN 'LT'.
        IF p_gjahr < 2015.
          ifremdweh = 'LTL'.
        ELSE.
          RETURN.
        ENDIF.
      WHEN 'LV'.
        IF p_gjahr < 2014.
          ifremdweh = 'LVL'.
        ELSE.
          RETURN.
        ENDIF.
      WHEN 'MT'.
        IF p_gjahr LT '2008'.
          ifremdweh = 'MTL'.
        ELSE.
          RETURN.
        ENDIF.
      WHEN 'PL'. ifremdweh = 'PLN'.
      WHEN 'SK'.
        IF p_gjahr LT '2009'.
          ifremdweh = 'SKK'.
        ELSE.
          RETURN.
        ENDIF.
      WHEN 'BG'. ifremdweh = 'BGN'.
      WHEN 'RO'. ifremdweh = 'RON'.
      WHEN 'HR'. ifremdweh = 'HRK'.
      WHEN OTHERS.
        RETURN.
    ENDCASE.
  ENDIF.

  IF vbrp-netwr IS INITIAL
     AND flg_free_of_charge = false.
    flg_error = true.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_e
                                      '019'
                                      con_mkmal
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_item
                                      con_ifremdwak.
    EXIT.
  ELSEIF vbrp-netwr IS INITIAL
       AND flg_free_of_charge = true.
    EXIT.
  ENDIF.

  IF flg_error IS INITIAL
     AND NOT vbrp-netwr IS INITIAL.
    hlp_ifremdweh = ifremdweh.
    PERFORM invoice_value USING    p_datum
                                   kurstyp
                                 hlp_ifremdweh         " Meldewaehrung
                                 vbrk-waerk            " Belegwaehrung
                                  eikp-grwcu            " Hauswaehrung
                                   vbrk-kurrf
                                   vbrp-kursk
                                   vbrp-fbuda
                                   vbrk-fkdat
                                   vbrp-brtwr
                          CHANGING vbrp-netwr
                                   hlp_ifremdwer
                                   ifremdwak
                                   ifremdweh
                                   flg_error.
  ENDIF.
*-- Sofern ein Fehler aufgetreten muß das letzte Feld des
*-- Unvollständigkeitsprot. geändert werden (in den Routinen wird
*-- mit dem Rechnungswert gearbeitet).
  IF flg_error = true.
    DESCRIBE TABLE incompletion_data_header LINES sy-tfill.
    incompletion_data_header-hefel = con_ifremdwak.
    IF sy-tfill <> 0.
      MODIFY incompletion_data_header INDEX sy-tfill TRANSPORTING hefel.
    ENDIF.
  ENDIF.

  IF flg_error = true.
    CLEAR: ifremdwak.
  ENDIF.

ENDFORM.                    "IFREMDWER

*&---------------------------------------------------------------------*
*&      Form  ISESSIONE
*&---------------------------------------------------------------------*
*       Italien-Extra: Kennzeichen Normalposition (1) oder             *
*                      Berichtigung (2). Berichtigungen können nur     *
*                      manuell erstellt werden, daher ist hier nur     *
*                      1 möglich                                       *
*----------------------------------------------------------------------*
FORM isessione CHANGING isessione LIKE veiav-isessione.

*-- Keine Unvollständigkeitsprüfung erforderlich
  IF vbrk-vbtyp = 'N'.
    isessione = '2'.                   " Berichtigung
  ELSE.
    isessione = '1'.                   " Normale Geschäftsvorfälle
  ENDIF.

ENDFORM.                               " ISESSIONE

*&---------------------------------------------------------------------*
*&      Form  MATNR
*&---------------------------------------------------------------------*
*       Materialnummer                                                 *
*----------------------------------------------------------------------*
FORM matnr CHANGING matnr LIKE veiav-matnr.

  matnr = vbrp-matnr.

ENDFORM.                    "MATNR
*&---------------------------------------------------------------------*
*&      Form  KUNNR
*&---------------------------------------------------------------------*
*       Kundennummer - Auftraggeber                                    *
*----------------------------------------------------------------------*
FORM kunnr CHANGING kunnr LIKE veiav-kunnr.

  kunnr = vbrk-kunag.

ENDFORM.                    "KUNNR
*&---------------------------------------------------------------------*
*&      Form  LIFNR
*&---------------------------------------------------------------------*
*       Lieferantennummer - RVIVST00                                   *
*----------------------------------------------------------------------*
FORM lifnr CHANGING lifnr LIKE veiav-lifnr.

*-- vendor ID not required for RVIVST00 !

ENDFORM.                    "LIFNR

*---------------------------------------------------------------------*
*       FORM BESTIAERP                                                *
*---------------------------------------------------------------------*
*       Bestimmungsland in besonderem behördlichen Code               *
*---------------------------------------------------------------------*
FORM bestiaerp CHANGING bestiaerp LIKE vesed-bestiaerp.
*-- !!!!ACHTUNG!!! zählt zu BESTILAND --> UNVOP

  IF p_numer = true.
    SELECT * FROM t606k
           WHERE exlnd = vbrk-land1.
      EXIT.
    ENDSELECT.

    IF sy-subrc IS INITIAL.
      bestiaerp = t606k-usc05.
    ENDIF.
  ELSE.
    SELECT SINGLE * FROM t005
           WHERE land1 = vbrk-land1.
    IF sy-subrc IS INITIAL.
      bestiaerp = t005-intca.
    ENDIF.
  ENDIF.
ENDFORM.                    "BESTIAERP

*---------------------------------------------------------------------*
*       FORM URSPRAERP                                                *
*---------------------------------------------------------------------*
*       Ursprungland in besonderem behördlichen Code                  *
*---------------------------------------------------------------------*
FORM urspraerp CHANGING urspraerp LIKE vesed-urspraerp.
*-- !!!!ACHTUNG!!! zählt zu URSPRSLND --> UNVOP

  IF p_numer = true.
    SELECT * FROM t606k
           WHERE exlnd = eipo-herkl.
      EXIT.
    ENDSELECT.
    IF sy-subrc IS INITIAL.
      urspraerp = t606k-usc05.
    ENDIF.
  ELSE.
    SELECT SINGLE * FROM t005
           WHERE land1 = eipo-herkl.
    IF sy-subrc IS INITIAL.
      urspraerp = t005-intca.
    ENDIF.
  ENDIF.

ENDFORM.                    "URSPRAERP
*&---------------------------------------------------------------------*
*&      Form  REMOVE_FIELDS_FROM_INCOMP
*&---------------------------------------------------------------------*
*       Nicht zu prüfende Einträge gemäß Tabelle 609I eliminieren
*----------------------------------------------------------------------*
*FORM REMOVE_FIELDS_FROM_INCOMP.
*  DELETE INCOMPLETION_DATA_HEADER WHERE HEFEL IN R_HEFEL.
*  DELETE INCOMPLETION_DATA_ITEM WHERE HEFEL IN R_HEFEL.
*ENDFORM.                               " REMOVE_FIELDS_FROM_INCOMP

*&---------------------------------------------------------------------*
*&      Form  NEGATIVE_VALUES_GET
*&---------------------------------------------------------------------*
*       Stornos, Gutschriften etc. erhalten negative Ausprägung
*       auf den Selektionsprotokollen.
*----------------------------------------------------------------------*
FORM negative_values_get USING    p_arrivdepa LIKE veiav-arrivdepa
                         CHANGING p_rechnweak LIKE veiav-rechnweak
                                  p_grenzweak LIKE veiav-grenzweak
                                  p_ifremdwak LIKE veiav-ifremdwak
                                  p_eigenmaak TYPE v50g_floating
                                  p_besonmaak LIKE veiav-besonmaak.

  IF p_arrivdepa = con_export.
    IF vbrk-vbtyp CA vbtyp_fkiv_gut OR
       vbrk-vbtyp CA vbtyp_guts OR
       vbrk-vbtyp CA vbtyp_stor.
      p_rechnweak = p_rechnweak * -1.
      p_grenzweak = p_grenzweak * -1.
      p_ifremdwak = p_ifremdwak * -1.
      p_eigenmaak = p_eigenmaak * -1.
      p_besonmaak = p_besonmaak * -1.
    ENDIF.
  ELSE.
    IF vbrk-vbtyp CA vbtyp_fkiv_gut OR
       vbrk-vbtyp CA vbtyp_guts OR
       vbrk-vbtyp CA vbtyp_stor.
      p_rechnweak = p_rechnweak * -1.
      p_grenzweak = p_grenzweak * -1.
      p_ifremdwak = p_ifremdwak * -1.
      p_eigenmaak = p_eigenmaak * -1.
      p_besonmaak = p_besonmaak * -1.
    ENDIF.
  ENDIF.

ENDFORM.                               " NEGATIVE_VALUES_GET
*&---------------------------------------------------------------------*
*&      Form  SAPGUI_PROGRESS_INDICATOR
*&---------------------------------------------------------------------*
*       Anzeigen des Verarbeitungsfortschritts
*----------------------------------------------------------------------*
*      -->P_MSGS_VBELN  text
*      -->P_MSGS_KSCHL  text
*----------------------------------------------------------------------*
FORM sapgui_progress_indicator USING percentage TYPE i
                                     text LIKE textpool-entry.
  DATA: hlp_vbeln LIKE vbrk-vbeln.

  WRITE vbrk-vbeln TO hlp_vbeln NO-ZERO LEFT-JUSTIFIED.
  REPLACE '&1' WITH hlp_vbeln INTO text.

  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
      percentage = 0
      text       = text.

ENDFORM.                               " SAPGUI_PROGRESS_INDICATOR
*&---------------------------------------------------------------------*
*&      Form  SPEC_REGULATIONS_GET
*&---------------------------------------------------------------------*
*       Spezialfälle einlesen: Länder/Regionen - Einschluß/Ausschluß
*----------------------------------------------------------------------*
FORM spec_regulations_get TABLES   p_spec_reg_tab STRUCTURE t609ii
                          USING    p_reporting_type LIKE space
                                   p_reporting_country
                                               LIKE t609ii-milnd.

  CALL FUNCTION 'RV_FTT_GOV_SPEC_REGULATION_GET'
    EXPORTING
      reporting_type       = p_reporting_type
      reporting_country    = p_reporting_country
    TABLES
      table_data_t609ii    = p_spec_reg_tab
    EXCEPTIONS
      wrong_reporting_type = 1
      no_data_found        = 2
      OTHERS               = 3.
  IF sy-subrc <> 0.
    CHECK 1 = 1.
  ELSE.
    SORT p_spec_reg_tab BY land1 regio mabin mkonv.
  ENDIF.

ENDFORM.                               " SPEC_REGULATIONS_GET
*&---------------------------------------------------------------------*
*&      Form  READ_SPEC_REG_TAB
*&---------------------------------------------------------------------*
*       Sonderfälle - Umschlüsselung holen
*----------------------------------------------------------------------*
FORM read_spec_reg_tab USING    p_land1 LIKE t609ii-land1
                                p_regio LIKE t609ii-regio
                       CHANGING country.

  READ TABLE spec_reg_tab WITH KEY land1 = p_land1
                                   regio = p_regio
                                   mabin = true
                                   mkonv = true
                                   BINARY SEARCH.
  IF sy-subrc = 0.
    IF p_numer = true.
      country = spec_reg_tab-landa.
    ELSE.
      country = spec_reg_tab-intca.
    ENDIF.
    EXIT.
  ELSE.
    READ TABLE spec_reg_tab WITH KEY land1 = p_land1
                                     regio = '   '
                                     mabin = true
                                     mkonv = true
                                     BINARY SEARCH.
    IF sy-subrc = 0.
      IF p_numer = true.
        country = spec_reg_tab-landa.
      ELSE.
        country = spec_reg_tab-intca.
      ENDIF.
      EXIT.
    ENDIF.
  ENDIF.
ENDFORM.                               " READ_SPEC_REG_TAB
*&---------------------------------------------------------------------*
*&      Form  ENJOY_LOG
*&---------------------------------------------------------------------*
*       Enjoy log über Memory erstellen
*----------------------------------------------------------------------*
FORM enjoy_log USING    p_direct.

  DATA: mode.
  DATA: curr_report LIKE rsvar-report.
  DATA: selection_table_tab LIKE rsparams OCCURS 10 WITH HEADER LINE.
  DATA: calling_program_sel LIKE sy-repid OCCURS 1.
  DATA: lv_symodno(4) TYPE c.

  IF sy-tcode = 'ENPA'.
    DATA: enjoy_key(120).
    DATA: enjoy_log TYPE v50g_enjoy_log WITH HEADER LINE.
    enjoy_key = sy-mandt.
    CONCATENATE enjoy_key sy-uname INTO enjoy_key.
    CONCATENATE enjoy_key 'SAPLV50G' INTO enjoy_key.
    CONCATENATE enjoy_key sy-tcode INTO enjoy_key.
    WRITE sy-modno TO lv_symodno LEFT-JUSTIFIED.

    CONCATENATE enjoy_key lv_symodno INTO enjoy_key.
    IMPORT enjoy_key FROM MEMORY ID enjoy_key.
    IF sy-subrc = 0.
      FREE MEMORY ID enjoy_key.
    ENDIF.

    CLEAR: lines_incomp_log_e,
           lines_incomp_log_w,
           lines_incomp_log_i.

    IF p_proto EQ 'B' OR
       p_proto EQ 'E' OR
       p_proto EQ 'F'.
*-- Fehler
      LOOP AT incompletion_data_header
                           TRANSPORTING NO FIELDS
                           WHERE msgty = 'E'.
        ADD 1 TO lines_incomp_log_e.
      ENDLOOP.

      LOOP AT incompletion_data_item
                           TRANSPORTING NO FIELDS
                           WHERE msgty = 'E'.
        ADD 1 TO lines_incomp_log_e.
      ENDLOOP.
*-- Warnungen
      LOOP AT incompletion_data_header
                           TRANSPORTING NO FIELDS
                           WHERE msgty = 'W'.
        ADD 1 TO lines_incomp_log_w.
      ENDLOOP.
      LOOP AT incompletion_data_item
                           TRANSPORTING NO FIELDS
                           WHERE msgty = 'W'.
        ADD 1 TO lines_incomp_log_w.
      ENDLOOP.
*-- Informationen
      LOOP AT incompletion_data_header
                           TRANSPORTING NO FIELDS
                           WHERE msgty = 'I'.
        ADD 1 TO lines_incomp_log_i.
      ENDLOOP.
      LOOP AT incompletion_data_item
                           TRANSPORTING NO FIELDS
                           WHERE msgty = 'I'.
        ADD 1 TO lines_incomp_log_i.
      ENDLOOP.

    ENDIF.

    IF p_proto CA 'ABC'.
      mode = true.
    ELSE.
      mode = false.
    ENDIF.

    CALL FUNCTION 'RV_FTT_GOV_ENJOY_LOG_TEXTS_GET'
      EXPORTING
*       REPORTING_TYPE    =
        reporting_month   = p_monat
        reporting_year    = p_gjahr
        medium            = 'S'
        flow_of_goods     = p_direct
        log_type          = p_proto
        mode              = mode
        records_selected  = anz_satz
        lines_icomp_log_e = lines_incomp_log_e
        lines_icomp_log_w = lines_incomp_log_w
        lines_icomp_log_i = lines_incomp_log_i
      TABLES
        enjoy_log         = enjoy_log.

    EXPORT enjoy_log TO MEMORY ID enjoy_key.

*-- Unvollständigkeitsprotokoll
    IF p_proto EQ 'B' OR
       p_proto EQ 'E' OR
       p_proto EQ 'F'.
      CALL FUNCTION 'RV_FTT_GOV_MEMORY_HANDLING'
        EXPORTING
          mode                     = 'E'
          program                  = con_repid_saplv50g
        TABLES
          incompletion_data_header = incompletion_data_header
        EXCEPTIONS
          illegal_mode             = 1
          export_failed            = 2
          import_failed            = 3
          OTHERS                   = 4.
      CALL FUNCTION 'RV_FTT_GOV_MEMORY_HANDLING'
        EXPORTING
          mode                   = 'E'
          program                = con_repid_saplv50g
        TABLES
          incompletion_data_item = incompletion_data_item
        EXCEPTIONS
          illegal_mode           = 1
          export_failed          = 2
          import_failed          = 3
          OTHERS                 = 4.
      IF sy-subrc <> 0.
      ENDIF.
*-- Offene Geschäftsvorfälle übergeben
      CALL FUNCTION 'RV_FTT_GOV_MEMORY_HANDLING'
        EXPORTING
          mode               = 'E'
          program            = con_repid_saplv50g
        TABLES
          selection_log_open = selection_log_open
        EXCEPTIONS
          illegal_mode       = 1
          export_failed      = 2
          import_failed      = 3
          OTHERS             = 4.

*-- Aktuellen Report übergeben
      APPEND sy-repid TO calling_program_sel.

      CALL FUNCTION 'RV_FTT_GOV_MEMORY_HANDLING'
        EXPORTING
          mode                = 'E'
          program             = con_repid_saplv50g
        TABLES
          calling_program_sel = calling_program_sel
        EXCEPTIONS
          illegal_mode        = 1
          export_failed       = 2
          import_failed       = 3
          OTHERS              = 4.
      IF sy-subrc <> 0.
      ENDIF.
*-- Selektionparameter übergeben
      curr_report = sy-repid.

      CALL FUNCTION 'RS_REFRESH_FROM_SELECTOPTIONS'
        EXPORTING
          curr_report     = curr_report
        TABLES
          selection_table = selection_table_tab
        EXCEPTIONS
          not_found       = 1
          no_report       = 2
          OTHERS          = 3.

      IF sy-subrc = 0.
        CALL FUNCTION 'RV_FTT_GOV_MEMORY_HANDLING'
          EXPORTING
            mode              = 'E'
            program           = con_repid_saplv50g
          TABLES
            selection_table_1 = selection_table_tab
          EXCEPTIONS
            illegal_mode      = 1
            export_failed     = 2
            import_failed     = 3
            OTHERS            = 4.
        IF sy-subrc <> 0.
        ENDIF.
      ENDIF.

    ENDIF.

*-- Selektionsprotokoll
    IF p_proto EQ 'A' OR
       p_proto EQ 'B' OR
       p_proto EQ 'D' OR
       p_proto EQ 'E'.
      IF p_refre = false.
        CALL FUNCTION 'RV_FTT_GOV_MEMORY_HANDLING'
          EXPORTING
            mode          = 'E'
            program       = con_repid_saplv50g
          TABLES
            selection_log = selection_log
          EXCEPTIONS
            illegal_mode  = 1
            export_failed = 2
            import_failed = 3
            OTHERS        = 4.
      ENDIF.
      IF sy-subrc <> 0.
      ENDIF.

*-- Anzeigevariante übergeben
      REFRESH alv_variant.
      MOVE g_variant TO alv_variant.
      APPEND alv_variant.

      CALL FUNCTION 'RV_FTT_GOV_MEMORY_HANDLING'
        EXPORTING
          mode          = 'E'
          program       = con_repid_saplv50g
        TABLES
          alv_variant_1 = alv_variant
        EXCEPTIONS
          illegal_mode  = 1
          export_failed = 2
          import_failed = 3
          OTHERS        = 4.
      IF sy-subrc <> 0.
      ENDIF.
    ENDIF.

*-- Selektionparameter übergeben
    curr_report = sy-repid.

    CALL FUNCTION 'RS_REFRESH_FROM_SELECTOPTIONS'
      EXPORTING
        curr_report     = curr_report
      TABLES
        selection_table = selection_table_tab
      EXCEPTIONS
        not_found       = 1
        no_report       = 2
        OTHERS          = 3.

    IF sy-subrc = 0.
      CALL FUNCTION 'RV_FTT_GOV_MEMORY_HANDLING'
        EXPORTING
          mode              = 'E'
          program           = con_repid_saplv50g
        TABLES
          selection_table_1 = selection_table_tab
        EXCEPTIONS
          illegal_mode      = 1
          export_failed     = 2
          import_failed     = 3
          OTHERS            = 4.
      IF sy-subrc <> 0.
      ENDIF.
    ENDIF.

  ENDIF.

ENDFORM.                               " ENJOY_LOG
*&---------------------------------------------------------------------*
*&      Form  READ_T609IS
*&---------------------------------------------------------------------*
*       Allgemeine Einstellungen lesen
*----------------------------------------------------------------------*
FORM read_t609is USING    p_direction LIKE t609is-verei
                          p_reporting_country LIKE t609is-milnd
                          p_reporting_type LIKE t609is-metyp
                 CHANGING p_control_fields LIKE t609is.

  CALL FUNCTION 'RV_FTT_GOV_CONTROL_DATA_READ'
    EXPORTING
      i_reporting_type     = p_reporting_type
      i_country            = p_reporting_country
      i_direction          = p_direction
    IMPORTING
      e_rec_control_fields = p_control_fields
    EXCEPTIONS
      country_initial      = 1
      wrong_direction      = 2
      wrong_reporting_type = 3
      OTHERS               = 4.
  IF sy-subrc <> 0.
    CLEAR p_control_fields.
  ENDIF.

ENDFORM.                               " READ_T609IS

*&---------------------------------------------------------------------*
*&      Form  CALL_POPUP_TO_CONFIRM
*&---------------------------------------------------------------------*
*       Sicherheitsabfrage
*----------------------------------------------------------------------*
FORM call_popup_to_confirm USING    p_titlebar
                                    p_diagnose_object LIKE dokhl-object
                                    p_text_question
                                    p_text_button_1
*                                   P_ICON_BUTTON_1
                                    p_text_button_2
*                                   P_ICON_BUTTON_2
                          CHANGING  p_answer.
  DATA: icon_name LIKE icon-name VALUE 'ICON_MESSAGE_WARNING'.
  CLEAR p_answer.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = p_titlebar
      diagnose_object       = 'FT_GOV_DIALOG_001'
      text_question         = p_text_question
      text_button_1         = p_text_button_1
*     ICON_BUTTON_1         = ' '
      text_button_2         = p_text_button_2
*     ICON_BUTTON_2         = ' '
      default_button        = '1'
      display_cancel_button = 'X'
      start_column          = 22
      start_row             = 2
      popup_type            = icon_name
    IMPORTING
      answer                = p_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                               " CALL_POPUP_TO_CONFIRM
*************************** ALRK263037 ********************************
*&---------------------------------------------------------------------*
*&      Form  LOW_WEIGHT_HANDLING
*&---------------------------------------------------------------------*
*       Behandeln von Gewichten kleiner 0.001 KG
*----------------------------------------------------------------------*
FORM low_weight_handling USING    p_weight_floating TYPE f
                         CHANGING p_eigenmaak LIKE veiav-eigenmaak
                                  p_eigenmass." LIKE VEIAV-EIGENMASS.

  DATA: hlp_weight_floating TYPE v50g_floating.

  hlp_weight_floating = p_weight_floating.

  CLEAR p_eigenmass.

  CALL FUNCTION 'RV_FTT_GOV_LOW_WEIGHT_HANDLING'
    CHANGING
      c_weight                 = hlp_weight_floating
      c_multiplier_coded       = p_eigenmass
    EXCEPTIONS
      invalid_coded_multiplier = 1
      OTHERS                   = 2.
  IF sy-subrc = 0.
    p_eigenmaak = hlp_weight_floating.
  ELSE.
    CLEAR: p_eigenmaak.
  ENDIF.

ENDFORM.                               " LOW_WEIGHT_HANDLING
*************************** ALRK263037 ********************************
*&---------------------------------------------------------------------*
*&      Form  GET_REFERENCE_DATA
*&---------------------------------------------------------------------*
*       Bezugsfaktura ermitteln bei Gut- Lastschriften etc.
*----------------------------------------------------------------------*
FORM get_reference_data USING    p_logic
                                 p_vbrk LIKE vbrk
                                 p_vbrp LIKE vbrp
                                 p_reporting_type
                                 p_table_name
                                 p_arrivdepa LIKE veiav-arrivdepa
                                 p_reporting_country_iso LIKE t005-intca
                        CHANGING p_irefmonat LIKE veiav-irefmonat
                                 p_irefejahr LIKE veiav-irefejahr
                                 p_irefbeleg LIKE veiav-irefbeleg
                                 p_irefposit LIKE veiav-irefposit
                                 p_irefvdepa LIKE veiav-arrivdepa
                                 p_icorfortz LIKE veiav-icorfortz
                                 p_isessione LIKE veiav-isessione
                                 p_eigenmaak LIKE veiav-eigenmaak
                                 p_eigenmaak_float TYPE v50g_floating
                                 p_eigenmass
                                 p_besonmaak LIKE veiav-besonmaak
                                 p_rechnweak LIKE veiav-rechnweak.

  DATA: hlp_fkdat     LIKE vbrk-fkdat,
        hlp_fbuda     LIKE vbrp-fbuda,
        hlp_vbeln(15).
  DATA: vbeln LIKE vbrk-vbeln,
        posnr LIKE vbrp-posnr.
  DATA: lv_bonus_case TYPE c.

  DATA: sav_tfill LIKE sy-tfill.
  DATA: flg_goods_movement.
  DATA: wa_incompl_data_item TYPE V50G_INCOMPLETION_DATA_STRUC.

  REFRESH vbfa_tab.

*-- check if goods movement exists
  IF p_vbrp-vgtyp CA vbtyp_delv OR        "related to delivery
     p_vbrp-vgtyp CA vbtyp_reto OR        "related to return
   ( p_vbrp-vgtyp CA vbtyp_ganf AND       "related to credit memo request
     p_vbrp-msr_id IS NOT INITIAL ).      "and Advanced Returns Management
    flg_goods_movement = true.
  ELSE.
    flg_goods_movement = false.
  ENDIF.

  IF p_logic = true.
    IF flg_goods_movement = true.
      IF p_vbrk-vbtyp CA vbtyp_fakt_sto OR
         ( p_vbrk-vbtyp CA vbtyp_fkiv   AND
           NOT p_vbrk-sfakn IS INITIAL ).
        p_isessione = '2'.
      ELSE.
        p_isessione = '1'.
      ENDIF.
    ELSE.
      p_isessione = '2'.
    ENDIF.
  ELSE.
    p_isessione = '2'.
  ENDIF.

*<<<<<<<<<<<<<<<<<< begin of insertion HP_30576 <<<<<<<<<<<<<<<<<<<<<<<
*   Keine Referenzermittlung für Lastschriften auf Warenbewegungen
  IF ( p_vbrk-vbtyp CA vbtyp_fkiv_last                      "5
       OR p_vbrk-vbtyp CA vbtyp_last )                      "P
       AND p_vbrk-sfakn IS INITIAL
       AND flg_goods_movement = true.
    p_isessione = '1'.
    EXIT.
  ENDIF.
*<<<<<<<<<<<<<<<< end of insertion HP_305766 <<<<<<<<<<<<<<<<<<<<<<<<<<<



*-- Warenbewegungen auf Eingangsseite melden
  IF p_logic = true AND flg_goods_movement = true
  AND p_vbrk-vbtyp CN vbtyp_fakt_sto   "no cancellations
  AND NOT ( p_vbrk-vbtyp CA vbtyp_fkiv AND   "no int. cancellations
            NOT p_vbrk-sfakn IS INITIAL ).
    p_irefvdepa  = con_import.

    wa_incompl_data_item-arrivdepa = con_import.
    MODIFY incompletion_data_item FROM wa_incompl_data_item TRANSPORTING arrivdepa
                                 WHERE belegnumr = p_vbrk-vbeln
                                   AND hauptposi = p_vbrp-posnr.
*-- zudem muß in Deutschland bei Retouren der Rechnungswert
*-- auf Null gesetzt werden.
    IF p_reporting_country_iso = con_intca_de.
*-- Einträge aus UVP löschen
      DELETE incompletion_data_item
                               WHERE ( belegnumr = p_vbrk-vbeln
                                       AND hauptposi = p_vbrp-posnr )
                                  AND ( hefel = con_rechnwert
                                       OR hefel = con_rechnweak ).

      IF NOT p_rechnweak IS INITIAL.
*-- Information schreiben
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_i
                                          '047'
                                          dummy_msgv
                                          dummy_msgv
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_item
                                          con_rechnweak.
      ENDIF.
      CLEAR p_rechnweak.
    ENDIF.
    PERFORM determine_additional_info USING flg_goods_movement
                                            p_logic
                                            p_irefvdepa
                                            p_vbrk
                                   CHANGING p_icorfortz
                                            p_isessione.
    EXIT.
  ENDIF.

*-- Lieferbezogene Rechnung?
  IF flg_goods_movement = false.
    CLEAR: p_eigenmaak,
           p_eigenmaak_float,
           p_eigenmass,
           p_besonmaak.
*-- Einträge aus UVP löschen
    DELETE incompletion_data_item
                             WHERE ( belegnumr = p_vbrk-vbeln
                                     AND hauptposi = p_vbrp-posnr )
                                AND ( hefel = con_eigenmass
                                     OR hefel = con_eigenmaak
                                     OR hefel = con_besonmass
                                     OR hefel = con_besonmaak ).
*-- Information schreiben
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_i
                                      '046'
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_item
                                      con_eigenmaak.
    PERFORM incompletion_append USING con_msgid_eip
                                      con_msgty_i
                                      '046'
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      dummy_msgv
                                      con_level_item
                                      con_besonmaak.
  ENDIF.
*>>>>>>>>>>>>>>>>>>>>>> start of del hp_356794 >>>>>>>>>>>>>>>>>>>>>>>>
* CLEAR VBFA_TAB.

* READ TABLE VBFA_TAB INDEX 1 TRANSPORTING VBELN.

* IF VBFA_TAB-VBELN NE P_VBRK-VBELN.
*   REFRESH VBFA_TAB.
*   SELECT * INTO TABLE VBFA_TAB
*            FROM VBFA WHERE VBELN = P_VBRK-VBELN.
*>>>>>>>>>>>>>>>>>>>>>> end   of del hp_356794 >>>>>>>>>>>>>>>>>>>>>>>>
*>>>>>>>>>>>>>>>>>>>>>> start of ins hp_356794 >>>>>>>>>>>>>>>>>>>>>>>>
  CLEAR vbfa_tab.
  vbfa_tab-vbeln = p_vbrk-vbeln.
  vbfa_tab-posnn = p_vbrp-posnr.
  vbfa_tab-vbtyp_n = p_vbrk-vbtyp.
  DATA: lv_subrc LIKE sy-subrc,
        lv_vbeln LIKE vbfa-vbeln,
        lv_posnn LIKE vbfa-posnn,
        lv_vgtyp LIKE vbrk-vbtyp.
*-- erste Referenz anhängen
  vbfa_tab-vbelv = p_vbrp-vgbel.
  vbfa_tab-posnv = p_vbrp-vgpos.
  vbfa_tab-vbtyp_v = p_vbrp-vgtyp.
  APPEND vbfa_tab.

*-- initialisieren des rekursiven Aufrufs mit Vorgängerbelegtyp aus
*-- Faktura
  lv_vbeln = p_vbrp-vgbel.
  lv_posnn = p_vbrp-vgpos.
  lv_vgtyp = p_vbrp-vgtyp.
  WHILE lv_subrc = 0.
    PERFORM get_reference_doc USING    lv_vbeln
                                       lv_posnn
                                       lv_vgtyp
                              CHANGING lv_subrc
                                       vbfa_tab-vbelv
                                       vbfa_tab-posnv
                                       vbfa_tab-vbtyp_v.
    IF lv_subrc = 0.
*-- check for double entry
      READ TABLE vbfa_tab FROM vbfa_tab.
      IF sy-subrc EQ 0.
        lv_subrc = 4.
      ELSE.
        APPEND vbfa_tab.
        lv_vbeln = vbfa_tab-vbelv.
        lv_posnn = vbfa_tab-posnv.
        lv_vgtyp = vbfa_tab-vbtyp_v.
      ENDIF.
    ENDIF.
  ENDWHILE.
  SORT vbfa_tab BY vbelv posnv.
  DESCRIBE TABLE vbfa_tab LINES sy-tfill.
  IF sy-tfill = 0.
    sy-subrc = 4.
  ELSE.
    sy-subrc = 0.
  ENDIF.
*>>>>>>>>>>>>>>>>>>>>>> end   of ins hp_356794 >>>>>>>>>>>>>>>>>>>>>>>>
  IF sy-subrc <> 0.
*-- Keine Referenzbelege gefunden!
    IF ( p_logic = false )
    OR ( p_logic = true  AND flg_goods_movement = false ).
*-- Keine Referenz ermittelbar - handelt es sich um Rabatte? Wenn ja
*-- werden Rabatte in der Versendungsmeldung als Normalposition
*-- deklariert.
      IF milnd_iso = 'BE'.
        lv_bonus_case = false.
        PERFORM check_bonus_document USING    p_vbrk-fktyp
                                              p_vbrp-fkimg
                                              p_arrivdepa
                                     CHANGING p_irefmonat
                                              p_irefejahr
                                              p_irefbeleg
                                              p_irefposit
                                              p_irefvdepa
                                              p_icorfortz
                                              p_isessione
                                              lv_bonus_case.
        IF lv_bonus_case = true.
          EXIT.
        ENDIF.
      ENDIF.
      PERFORM get_doc_type_text USING p_vbrk-fkart
                                CHANGING tvfkt-vtext.
      WRITE p_vbrk-vbeln TO hlp_vbeln NO-ZERO.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_w
                                        '045'
                                        hlp_vbeln
                                        tvfkt-vtext
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_item
                                        con_irefbeleg.
      EXIT.
    ENDIF.
  ENDIF.
*>>>>>>>>>>>>>>>>>>>>>> start of del hp_356794 >>>>>>>>>>>>>>>>>>>>>>>>
*ENDIF.
*>>>>>>>>>>>>>>>>>>>>>> end   of del hp_356794 >>>>>>>>>>>>>>>>>>>>>>>>
*-- Stornos - Referenz in Belegtabelle vorhanden?
  IF ( p_vbrk-vbtyp CA vbtyp_fakt_sto OR
       p_vbrk-vbtyp CA vbtyp_fkiv )   AND
     NOT p_vbrk-sfakn IS INITIAL.
    vbfa_tab-vbelv = p_vbrk-sfakn.
    vbfa_tab-posnv = p_vbrp-posnr.
  ELSE.

*-- Vorgängerfaktura ermitteln
    DATA: lv_prefered_vbtyp(10).
    DO 5 TIMES.
      IF sy-index = 1.
        lv_prefered_vbtyp = vbtyp_rech.

*-- Special case Italy: Internal credit memo for return
        IF p_logic EQ false               AND  "Italy
           p_vbrk-vbtyp CA vbtyp_fkiv_gut AND  "Internal memo
           flg_goods_movement EQ true.         "... for return
          CONTINUE.                            "Skip to next index
        ENDIF.

      ELSEIF sy-index = 2.
        lv_prefered_vbtyp = vbtyp_prof.
      ELSEIF sy-index = 3.
        lv_prefered_vbtyp = vbtyp_last.
      ELSEIF sy-index = 4.
        lv_prefered_vbtyp = vbtyp_guts.
      ELSEIF sy-index = 5.
        lv_prefered_vbtyp = vbtyp_fkiv.
      ENDIF.
      DESCRIBE TABLE vbfa_tab LINES sav_tfill.
      WHILE sav_tfill >= 1.
        READ TABLE vbfa_tab INDEX sav_tfill.
        IF vbfa_tab-vbtyp_v CA lv_prefered_vbtyp
          AND vbfa_tab-posnn = p_vbrp-posnr.
          sy-subrc = 0.
          EXIT.
        ENDIF.
        sav_tfill = sav_tfill - 1.
        sy-subrc = 4.
      ENDWHILE.
      IF sy-subrc = 0.
        EXIT.
      ENDIF.
    ENDDO.
  ENDIF.

*-- Kein unmittelbarer Bezug zu Fakturabeleg vorhanden, daher
*-- Basisbeleg über Belegfluß (Lieferung/Auftrag) ermitteln
  IF sy-subrc = 0.
    vbeln = vbfa_tab-vbelv.
    posnr = vbfa_tab-posnv.
  ELSE.
*-- determine reference via order document
    LOOP AT vbfa_tab WHERE ( vbelv EQ p_vbrp-aubel )
                       AND ( vbtyp_v CA vbtyp_auft OR
                             vbtyp_v CA vbtyp_anfo ).
      EXIT.
    ENDLOOP.
*-- sales order number found in document flow
    IF sy-subrc = 0.
*-- determine date and time from document flow
      SELECT SINGLE erdat erzet FROM vbfa
               INTO (vbfa_tab-erdat, vbfa_tab-erzet)
               WHERE vbelv = vbfa_tab-vbelv
                 AND posnv = vbfa_tab-posnv
                 AND vbeln = vbfa_tab-vbeln
                 AND posnn = vbfa_tab-posnn
                 AND vbtyp_n = vbfa_tab-vbtyp_n.

      PERFORM determine_invoice_by_flow USING vbfa_tab
                                              p_vbrk
                                              p_vbrp-posnr
                                                p_reporting_type
                                                p_table_name
                                                p_arrivdepa
                                       CHANGING vbeln
                                                posnr
                                                p_irefmonat
                                                p_irefejahr
                                                p_irefbeleg
                                                p_irefposit
                                                p_irefvdepa.
      IF vbeln IS INITIAL
        AND posnr IS INITIAL.
*-- Kein Referenzbeleg gefunden!
        IF ( p_logic = false )
        OR ( p_logic = true  AND flg_goods_movement = false ).
*-- Keine Referenz ermittelbar - handelt es sich um Rabatte? Wenn ja
*-- werden Rabatte in der Versendungsmeldung als Normalposition
*-- deklariert.
          IF milnd_iso = 'BE'.
            lv_bonus_case = false.
            PERFORM check_bonus_document USING    p_vbrk-fktyp
                                                  p_vbrp-fkimg
                                                  p_arrivdepa
                                         CHANGING p_irefmonat
                                                  p_irefejahr
                                                  p_irefbeleg
                                                  p_irefposit
                                                  p_irefvdepa
                                                  p_icorfortz
                                                  p_isessione
                                                  lv_bonus_case.
            IF lv_bonus_case = true.
              EXIT.
            ENDIF.
          ENDIF.
          PERFORM get_doc_type_text USING p_vbrk-fkart
                                    CHANGING tvfkt-vtext.
          WRITE p_vbrk-vbeln TO hlp_vbeln NO-ZERO.
          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_w
                                            '045'
                                            hlp_vbeln
                                            tvfkt-vtext
                                            dummy_msgv
                                            dummy_msgv
                                            con_level_item
                                            con_irefbeleg.
          PERFORM determine_additional_info USING flg_goods_movement
                                                  p_logic
                                                  p_irefvdepa
                                                  p_vbrk
                                         CHANGING p_icorfortz
                                                  p_isessione.
          EXIT.
        ENDIF.
      ENDIF.
    ELSE.
*-- Kein Referenzbeleg gefunden!
      IF ( p_logic = false )
      OR ( p_logic = true  AND flg_goods_movement = false ).
*-- Keine Referenz ermittelbar - handelt es sich um Rabatte? Wenn ja
*-- werden Rabatte in der Versendungsmeldung als Normalposition
*-- deklariert.
        IF milnd_iso = 'BE'.
          lv_bonus_case = false.
          PERFORM check_bonus_document USING    p_vbrk-fktyp
                                                p_vbrp-fkimg
                                                p_arrivdepa
                                       CHANGING p_irefmonat
                                                p_irefejahr
                                                p_irefbeleg
                                                p_irefposit
                                                p_irefvdepa
                                                p_icorfortz
                                                p_isessione
                                                lv_bonus_case.
          IF lv_bonus_case = true.
            EXIT.
          ENDIF.
        ENDIF.
        PERFORM get_doc_type_text USING p_vbrk-fkart
                                  CHANGING tvfkt-vtext.
        WRITE p_vbrk-vbeln TO hlp_vbeln NO-ZERO.
        PERFORM incompletion_append USING con_msgid_eip
                                          con_msgty_w
                                          '045'
                                          hlp_vbeln
                                          tvfkt-vtext
                                          dummy_msgv
                                          dummy_msgv
                                          con_level_item
                                          con_irefbeleg.
        PERFORM determine_additional_info USING flg_goods_movement
                                                p_logic
                                                p_irefvdepa
                                                p_vbrk
                                       CHANGING p_icorfortz
                                                p_isessione.
        EXIT.
      ENDIF.
    ENDIF.
  ENDIF.

  IF sy-subrc = 0.
*-- Wurde Basisposition bereits gemeldet ?
    sy-subrc = 0.

    IF p_reporting_type EQ con_reporting_type_i AND
       ( p_vbrk-vbtyp CA vbtyp_fakt_sto         OR
         p_vbrk-vbtyp CA vbtyp_fkiv )   AND
       NOT p_vbrk-sfakn IS INITIAL.
      PERFORM table_single_read_cancel USING vbeln
                                             posnr
                                             p_vbrk-bukrs
                                             p_reporting_type
                                             p_table_name
                                             p_arrivdepa
                                    CHANGING p_irefmonat
                                             p_irefejahr
                                             p_irefbeleg
                                             p_irefposit
                                             p_irefvdepa
                                             sy-subrc.
    ELSE.
      PERFORM table_single_read USING vbeln
                                    posnr
                                    p_vbrk-bukrs
                                    p_reporting_type
                                    p_table_name
                                    p_arrivdepa
                           CHANGING p_irefmonat
                                    p_irefejahr
                                    p_irefbeleg
                                    p_irefposit
                                    p_irefvdepa
                                    sy-subrc.
    ENDIF.

    IF sy-subrc <> 0.
*-- Basisbeleg wurde nicht in den Arbeitsvorräten gefunden. Ist er
*-- im aktuellen Selektionslauf enthalten?
      READ TABLE selection_log WITH KEY belegnumr = vbeln
                                        hauptposi = posnr
                                        bukrs     = p_vbrk-bukrs.
      IF sy-subrc = 0.
        p_irefmonat = p_monat.
        p_irefejahr = p_gjahr.
        p_irefbeleg = selection_log-belegnumr.
        p_irefposit = selection_log-hauptposi.
        p_irefvdepa = selection_log-arrivdepa.
      ELSE.

*-- Kein Referenzbeleg gefunden! Beleg wird gerettet und am Ende der
*-- Verarbeitung nochmals geprüft (evtl. unterschiedliche Nummernkreis
*-- intervalle)
        no_ref_found-belegnumr = p_vbrk-vbeln.
        no_ref_found-hauptposi = p_vbrp-posnr.
        no_ref_found-goods_movement = flg_goods_movement.
        no_ref_found-p_vbrk = p_vbrk.
        no_ref_found-p_vbrp = p_vbrp.
        APPEND no_ref_found.
        p_irefbeleg = vbeln.
        p_irefposit = posnr.
        PERFORM determine_additional_info USING flg_goods_movement
                                                p_logic
                                                p_irefvdepa
                                                p_vbrk
                                       CHANGING p_icorfortz
                                                p_isessione.
        EXIT.

      ENDIF.
    ENDIF.
    PERFORM determine_additional_info USING flg_goods_movement
                                            p_logic
                                            p_irefvdepa
                                            p_vbrk
                                   CHANGING p_icorfortz
                                            p_isessione.
  ENDIF.

ENDFORM.                               " GET_REFERENCE_DATA
*&---------------------------------------------------------------------*
*&      Form  DETERMINE_INVOICE_BY_FLOW
*&---------------------------------------------------------------------*
*       Basisbeleg (Rechnung) von Auftrag bzw. Lieferung aus
*       ermitteln
*----------------------------------------------------------------------*
FORM determine_invoice_by_flow USING p_wa_vbfa LIKE vbfa
                                     p_vbrk       TYPE vbrk
                                     p_vbrp_posnr TYPE posnr_vf
                                     p_reporting_type
                                     p_table_name
                                     p_arrivdepa LIKE veiav-arrivdepa
                            CHANGING p_vbeln LIKE vbrk-vbeln
                                     p_posnr LIKE vbrp-posnr
                                     p_irefmonat LIKE veiav-irefmonat
                                     p_irefejahr LIKE veiav-irefejahr
                                     p_irefbeleg LIKE veiav-irefbeleg
                                     p_irefposit LIKE veiav-irefposit
                                     p_irefvdepa LIKE veiav-arrivdepa.

  DATA: prefered_vbtyp(10).

  DATA: lc_vbfa_tab LIKE vbfa OCCURS 10 WITH HEADER LINE.


  SELECT * INTO TABLE lc_vbfa_tab
             FROM vbfa WHERE vbelv EQ p_wa_vbfa-vbelv
                         AND posnv EQ p_wa_vbfa-posnv
                         AND erdat LE p_wa_vbfa-erdat.
  IF sy-subrc = 0.
    DELETE lc_vbfa_tab WHERE vbtyp_n CN vbtyp_fakt
                          OR vbtyp_n CA vbtyp_fakt_sto
                          OR ( erdat EQ p_wa_vbfa-erdat AND
                               erzet GT p_wa_vbfa-erzet ).

*-- partial cancellation processing
    IF p_vbrk-vbtyp CA vbtyp_fakt_sto AND
       p_vbrk-sfakn IS INITIAL.
*-- determine correct original invoice / delete other entries from VBFA_tab
      LOOP AT lc_vbfa_tab.
        SELECT SINGLE * FROM vbfa
                       WHERE vbelv EQ lc_vbfa_tab-vbeln
                         AND posnv EQ lc_vbfa_tab-posnn
                         AND vbeln EQ p_vbrk-vbeln
                         AND posnn EQ p_vbrp_posnr.
        IF sy-subrc NE 0.
          DELETE lc_vbfa_tab.
        ENDIF.
      ENDLOOP.
    ENDIF.
*-- end of partial cancellation processing

    DESCRIBE TABLE lc_vbfa_tab LINES sy-tfill.
    IF sy-tfill GT 0.
*-- eindeutige Zuordnung ist nicht möglich - Vorschlag erstellen
      CLEAR: p_vbeln,
             p_posnr.

      DO 4 TIMES.
        IF sy-index = 1.
          prefered_vbtyp = vbtyp_rech.
        ELSEIF sy-index = 2.
          prefered_vbtyp = vbtyp_prof.
        ELSEIF sy-index = 3.
          IF p_vbrk-vbtyp CA vbtyp_fakt_sto.    "check only for cancellation document
            prefered_vbtyp = vbtyp_last.
          ELSE.
            CONTINUE.
          ENDIF.
        ELSEIF sy-index = 4.
          IF p_vbrk-vbtyp CA vbtyp_fakt_sto.    "check only for cancellation document
            prefered_vbtyp = vbtyp_guts.
          ELSE.
            CONTINUE.
          ENDIF.
        ENDIF.
        LOOP AT lc_vbfa_tab WHERE vbtyp_n CA prefered_vbtyp.
          PERFORM table_single_read USING lc_vbfa_tab-vbeln
                                          lc_vbfa_tab-posnn
                                          p_vbrk-bukrs
                                          p_reporting_type
                                          p_table_name
                                          p_arrivdepa
                                 CHANGING p_irefmonat
                                          p_irefejahr
                                          p_irefbeleg
                                          p_irefposit
                                          p_irefvdepa
                                          sy-subrc.
          IF sy-subrc = 0.
            p_vbeln = p_irefbeleg.
            p_posnr = p_irefposit.
            EXIT.
          ENDIF.
        ENDLOOP.
        IF NOT p_vbeln IS INITIAL AND NOT p_posnr IS INITIAL.
          EXIT.
        ENDIF.
      ENDDO.
      EXIT.
    ENDIF.

*-- Vorgängerfaktura ermitteln
    DESCRIBE TABLE lc_vbfa_tab LINES sav_tfill.
    WHILE sav_tfill >= 1.
      READ TABLE lc_vbfa_tab INDEX sav_tfill.
      IF lc_vbfa_tab-vbtyp_n CA vbtyp_fakt
         AND lc_vbfa_tab-posnn = p_wa_vbfa-posnn
         AND lc_vbfa_tab-stufe <= p_wa_vbfa-stufe
         AND lc_vbfa_tab-vbeln <> p_wa_vbfa-vbeln.
        sy-subrc = 0.
        EXIT.
      ENDIF.
      sav_tfill = sav_tfill - 1.
      sy-subrc = 4.
    ENDWHILE.
  ENDIF.

  IF sy-subrc = 0.
    p_vbeln = lc_vbfa_tab-vbeln.
    p_posnr = lc_vbfa_tab-posnn.
  ENDIF.

ENDFORM.                               " DETERMINE_INVOICE_BY_FLOW
*&---------------------------------------------------------------------*
*&      Form  TABLE_SINGLE_READ
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM table_single_read USING    p_vbeln LIKE vbrk-vbeln
                                p_posnr LIKE vbrp-posnr
                                p_vbrk_bukrs LIKE vbrk-bukrs
                                p_reporting_type
                                p_table_name
                                p_arrivdepa LIKE veiav-arrivdepa
                       CHANGING p_irefmonat LIKE veiav-irefmonat
                                p_irefejahr LIKE veiav-irefejahr
                                p_irefbeleg LIKE veiav-irefbeleg
                                p_irefposit LIKE veiav-irefposit
                                p_irefvdepa LIKE veiav-arrivdepa
                                p_subrc LIKE sy-subrc.

  TABLES: *veiav,
          *vexav,
          *vesed,
          *vekac.
  p_subrc = 0.
  CASE p_reporting_type.
    WHEN con_reporting_type_i.
      IF *veiav-belegnumr <> p_vbeln
        AND *veiav-hauptposi <> p_posnr.
        SELECT SINGLE * FROM (p_table_name) INTO *veiav
*                       WHERE ARRIVDEPA = P_ARRIVDEPA
                        WHERE belegnumr = p_vbeln
                          AND hauptposi = p_posnr
                          AND nummbukrs = p_vbrk_bukrs.
      ENDIF.
      p_subrc = sy-subrc.
      IF p_subrc = 0.
        p_irefmonat = *veiav-datummona.
        p_irefejahr = *veiav-datumjahr.
        p_irefbeleg = *veiav-belegnumr.
        p_irefposit = *veiav-hauptposi.
        p_irefvdepa = *veiav-arrivdepa.
      ENDIF.

    WHEN con_reporting_type_e
      OR con_reporting_type_c.
      IF *vexav-belegnumr <> p_vbeln
        AND *vexav-hauptposi <> p_posnr.
        SELECT SINGLE * FROM (p_table_name) INTO *vexav
*                       WHERE ARRIVDEPA = P_ARRIVDEPA
                        WHERE belegnumr = p_vbeln
                          AND hauptposi = p_posnr
                          AND nummbukrs = p_vbrk_bukrs.
      ENDIF.
      p_subrc = sy-subrc.
      IF p_subrc = 0.
        p_irefmonat = *vexav-datummona.
        p_irefejahr = *vexav-datumjahr.
        p_irefbeleg = *vexav-belegnumr.
        p_irefposit = *vexav-hauptposi.
        p_irefvdepa = *vexav-arrivdepa.
      ENDIF.

    WHEN con_reporting_type_k.
      IF *vekac-belegnumr <> p_vbeln
        AND *vekac-hauptposi <> p_posnr.
        SELECT SINGLE * FROM (p_table_name) INTO *vekac
*                       WHERE ARRIVDEPA = P_ARRIVDEPA
                        WHERE belegnumr = p_vbeln
                          AND hauptposi = p_posnr
                          AND nummbukrs = p_vbrk_bukrs.
      ENDIF.
      p_subrc = sy-subrc.
      IF p_subrc = 0.
        p_irefmonat = *vekac-datummona.
        p_irefejahr = *vekac-datumjahr.
        p_irefbeleg = *vekac-belegnumr.
        p_irefposit = *vekac-hauptposi.
        p_irefvdepa = *vekac-arrivdepa.
      ENDIF.

    WHEN con_reporting_type_s.
      IF *vesed-belegnumr <> p_vbeln
        AND *vesed-hauptposi <> p_posnr.
        SELECT SINGLE * FROM (p_table_name) INTO *vesed
*                       WHERE ARRIVDEPA = P_ARRIVDEPA
                        WHERE belegnumr = p_vbeln
                          AND hauptposi = p_posnr
                          AND nummbukrs = p_vbrk_bukrs.
      ENDIF.
      p_subrc = sy-subrc.
      IF p_subrc = 0.
        p_irefmonat = *vesed-datummona.
        p_irefejahr = *vesed-datumjahr.
        p_irefbeleg = *vesed-belegnumr.
        p_irefposit = *vesed-hauptposi.
        p_irefvdepa = *vesed-arrivdepa.
      ENDIF.

    WHEN OTHERS.
  ENDCASE.

ENDFORM.                               " TABLE_SINGLE_READ
*&---------------------------------------------------------------------*
*&      Form  GET_DOC_TYPE_TEXT
*&---------------------------------------------------------------------*
*       Text zur Fakturaart lesen
*----------------------------------------------------------------------*
FORM get_doc_type_text USING    p_fkart LIKE vbrk-fkart
                       CHANGING p_vtext LIKE tvfkt-vtext.
  IF p_fkart NE tvfkt-fkart.
    SELECT SINGLE * FROM tvfkt WHERE spras = sy-langu
                                 AND fkart = p_fkart.
    IF sy-subrc <> 0.
      CLEAR: tvfkt-vtext,
             p_vtext.           .
    ELSE.
      p_vtext = tvfkt-vtext.
    ENDIF.
  ELSE.
    p_vtext = tvfkt-vtext.
  ENDIF.
ENDFORM.                               " GET_DOC_TYPE_TEXT
*&---------------------------------------------------------------------*
*&      Form  determine_additional_info
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM determine_additional_info USING p_flg_goods_movement
                                     p_logic
                                     p_irefvdepa LIKE veiav-arrivdepa
                                     p_vbrk LIKE vbrk
                            CHANGING p_icorfortz LIKE veiav-icorfortz
                                     p_isessione LIKE veiav-isessione.

  IF p_logic = true.
*-- Nur bei Warenbewegungen
    IF p_flg_goods_movement = true.
      IF p_vbrk-vbtyp CA vbtyp_fakt_sto
         OR ( p_vbrk-vbtyp CA vbtyp_fkiv AND
              NOT p_vbrk-sfakn IS INITIAL ).
        p_isessione = '2'.
      ELSE.
        p_isessione = '1'.
      ENDIF.
    ELSE.
      p_isessione = '2'.
    ENDIF.
  ELSE.
    p_isessione = '2'.
  ENDIF.

  IF p_isessione = '2'.
    IF ( p_logic = false )
      OR ( p_logic = true AND p_irefvdepa = con_export ).
*-- Vorzeichen ermitteln - Versendung
      IF p_vbrk-vbtyp CA vbtyp_fakt_gut OR
         p_vbrk-vbtyp CA vbtyp_stor.
        p_icorfortz = '-'.
      ELSEIF p_vbrk-vbtyp CA vbtyp_fkiv_last OR
             p_vbrk-vbtyp CA vbtyp_last OR
             p_vbrk-vbtyp CA vbtyp_stog.
        p_icorfortz = '+'.
      ENDIF.
    ELSE.                              "Retouren auf Eingangsseite
*-- Vorzeichen ermitteln - Eingang
      IF p_vbrk-vbtyp CA vbtyp_fakt_gut OR
         p_vbrk-vbtyp CA vbtyp_stor.
        p_icorfortz = '+'.
      ELSEIF p_vbrk-vbtyp CA vbtyp_fkiv_last OR
             p_vbrk-vbtyp CA vbtyp_last OR
             p_vbrk-vbtyp CA vbtyp_stog.
        p_icorfortz = '-'.
      ENDIF.
    ENDIF.
  ENDIF.


ENDFORM.                               " determine_additional_info

*&---------------------------------------------------------------------*
*&      Form  GET_COUNTRY_SPECIFICA
*&---------------------------------------------------------------------*
*       Landesspezifische Regeln holen
*----------------------------------------------------------------------*
FORM get_country_specifica.

  CALL FUNCTION 'RV_FTT_GOV_REPORT_INFO_GET'
    EXPORTING
      reporting_type         = h_herku
      country                = milnd_iso
    TABLES
      country_spec           = country_spec
    EXCEPTIONS
      invalid_reporting_type = 1
      no_country             = 2
      OTHERS                 = 3.

  IF sy-subrc <> 0.
    REFRESH country_spec.
    CLEAR country_spec.
  ELSE.
    READ TABLE country_spec INDEX 1.
  ENDIF.

ENDFORM.                               " GET_COUNTRY_SPECIFICA
*&---------------------------------------------------------------------*
*&      Form  DELETE_INCOMP_ENTRIES
*&---------------------------------------------------------------------*
*       delete entries from incompletion log
*----------------------------------------------------------------------*
FORM delete_incomp_entries  USING    pv_document
                                     pv_document_item.
  DELETE incompletion_data_item
                           WHERE belegnumr = pv_document
                             AND hauptposi = pv_document_item.
ENDFORM.                    " DELETE_INCOMP_ENTRIES

*&---------------------------------------------------------------------*
*&      Form  GET_PARTNER_VAT
*&---------------------------------------------------------------------*
*       Uid Nummer des Partners (Kunde - Lieferant) ermitteln
*----------------------------------------------------------------------*
FORM get_partner_vat USING    p_hefel LIKE t609i-hefel
                     CHANGING p_partner_vat.


  IF milnd_iso = con_intca_fr. "France

    IF NOT vbrk-stceg IS INITIAL.
      p_partner_vat = vbrk-stceg.
      EXIT.
    ENDIF.
    SELECT SINGLE * FROM vbpa
           WHERE vbeln = vbrk-vbeln
           AND   posnr = vbrp-posnr
           AND   parvw = con_parvw_we.
    IF sy-subrc <> 0.
      SELECT SINGLE * FROM vbpa
             WHERE vbeln = vbrk-vbeln
             AND   posnr = '000000'
             AND   parvw = con_parvw_we.
      IF sy-subrc <> 0.
        SELECT SINGLE * FROM vbpa
               WHERE vbeln = vbrp-vgbel
               AND   posnr = vbrp-vgpos
               AND   parvw = con_parvw_we.
        IF sy-subrc <> 0.
          SELECT SINGLE * FROM vbpa
                 WHERE vbeln = vbrp-vgbel
                 AND   posnr = '000000'
                 AND   parvw = con_parvw_we.
        ENDIF.
      ENDIF.
    ENDIF.
    IF sy-subrc = 0.
      IF NOT vbpa-stceg IS INITIAL.
        p_partner_vat = vbpa-stceg.
        EXIT.
      ELSE.

        INCLUDE sd_dpp_rvexieks IF FOUND.

        IF gv_dpp_rvexieks_found IS INITIAL.
          SELECT SINGLE * FROM kna1 WHERE kunnr = vbpa-kunnr.
        ENDIF.
        IF sy-subrc IS INITIAL.
          p_partner_vat = kna1-stceg.
          IF kna1-stceg IS INITIAL.
            PERFORM incompletion_append USING con_msgid_eip
                                              con_msgty_e
                                              '028'
                                              vbpa-kunnr
                                              dummy_msgv
                                              dummy_msgv
                                              dummy_msgv
                                              con_level_global
                                              p_hefel.
          ENDIF.
          EXIT.
        ENDIF.

      ENDIF.
    ENDIF.

    EXIT.

    SELECT SINGLE * FROM vbpa
           WHERE vbeln = vbrk-vbeln
           AND   posnr = vbrp-posnr
           AND   parvw = con_parvw_re.
    IF NOT ( sy-subrc IS INITIAL ) .
      SELECT SINGLE * FROM vbpa
             WHERE vbeln = vbrk-vbeln
             AND   posnr = '000000'
             AND   parvw = con_parvw_re.
    ENDIF.
    IF sy-subrc IS INITIAL.
      IF vbpa-land1 NE vbrk-land1 OR vbpa-land1 IS INITIAL.
        IF NOT vbpa-stceg IS INITIAL.
          p_partner_vat = vbpa-stceg.
          EXIT.
        ELSE.

          INCLUDE sd_dpp_rvexieks IF FOUND.

          IF gv_dpp_rvexieks_found IS INITIAL.
            SELECT SINGLE * FROM kna1 WHERE kunnr = vbpa-kunnr.
          ENDIF.
          IF sy-subrc IS INITIAL.
            p_partner_vat = kna1-stceg.
            IF kna1-stceg IS INITIAL.
              PERFORM incompletion_append USING con_msgid_eip
                                                con_msgty_e
                                                '028'
                                                vbpa-kunnr
                                                dummy_msgv
                                                dummy_msgv
                                                dummy_msgv
                                                con_level_global
                                                p_hefel.
            ENDIF.
            EXIT.
          ENDIF.
        ENDIF.
      ELSE.
        p_partner_vat = vbrk-stceg.
        IF vbrk-stceg IS INITIAL.
          PERFORM incompletion_append USING con_msgid_eip
                                            con_msgty_e
                                            '015'
                                            con_mkmal
                                            vbrk-vbeln
                                            dummy_msgv
                                            dummy_msgv
                                            con_level_header
                                            p_hefel.
          EXIT.
        ENDIF.
      ENDIF.
    ENDIF.

  ELSEIF milnd_iso = con_intca_pl     "Poland
      AND vbrk-land1 <> vbrk-stceg_l. "WE country and UIN country

    SELECT SINGLE * FROM vbpa
           WHERE vbeln = vbrk-vbeln
           AND   posnr = vbrp-posnr
           AND   parvw = con_parvw_we.
    IF sy-subrc <> 0.
      SELECT SINGLE * FROM vbpa
             WHERE vbeln = vbrk-vbeln
             AND   posnr = '000000'
             AND   parvw = con_parvw_we.
      IF sy-subrc <> 0.
        SELECT SINGLE * FROM vbpa
               WHERE vbeln = vbrp-vgbel
               AND   posnr = vbrp-vgpos
               AND   parvw = con_parvw_we.
        IF sy-subrc <> 0.
          SELECT SINGLE * FROM vbpa
                 WHERE vbeln = vbrp-vgbel
                 AND   posnr = '000000'
                 AND   parvw = con_parvw_we.
        ENDIF.
      ENDIF.
    ENDIF.

    IF sy-subrc = 0.

      IF NOT vbpa-stceg IS INITIAL.
        p_partner_vat = vbpa-stceg.
      ELSE.
        INCLUDE sd_dpp_rvexieks IF FOUND.

        IF gv_dpp_rvexieks_found IS INITIAL.
          SELECT SINGLE * FROM kna1 WHERE kunnr = vbpa-kunnr.
        ENDIF.

        IF sy-subrc IS INITIAL.
          p_partner_vat = kna1-stceg.
        ENDIF.
      ENDIF.
    ENDIF.

    IF p_partner_vat IS INITIAL.
      p_partner_vat = vbrk-stceg.
    ENDIF.

    IF p_partner_vat IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '015'
                                        con_mkmal
                                        vbrk-vbeln
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_header
                                        p_hefel.
      EXIT.
    ENDIF.

  ELSE.

    p_partner_vat = vbrk-stceg.
    IF vbrk-stceg IS INITIAL.
      PERFORM incompletion_append USING con_msgid_eip
                                        con_msgty_e
                                        '015'
                                        con_mkmal
                                        vbrk-vbeln
                                        dummy_msgv
                                        dummy_msgv
                                        con_level_header
                                        p_hefel.
      EXIT.
    ENDIF.

  ENDIF.

ENDFORM.                               " GET_PARTNER_VAT
*>>>>>>>>>>>>>>>>>>>>>> start of ins hp_356794 >>>>>>>>>>>>>>>>>>>>>>>>
*&---------------------------------------------------------------------*
*&      Form  GET_REFERENCE_DOC
*&---------------------------------------------------------------------*
*       Referenzbelege über Vorlagebelegtyp ermitteln
*----------------------------------------------------------------------*
*      <--PV_SUBRC  Returncode
*----------------------------------------------------------------------*
FORM get_reference_doc  USING    pv_vbeln   LIKE vbfa-vbeln
                                 pv_posnn   LIKE vbfa-posnn
                                 pv_vgtyp   LIKE vbrp-vgtyp
                        CHANGING pv_subrc   LIKE sy-subrc
                                 pv_vbelv   LIKE vbfa-vbelv
                                 pv_posnv   LIKE vbfa-posnv
                                 pv_vbtyp_v LIKE vbfa-vbtyp_v.

  DATA: lv_tablename TYPE tabname16.
  pv_subrc = 0.

*-- Faktura
  IF pv_vgtyp CA vbtyp_fakt.
    lv_tablename = 'VBRP'.
*-- Lieferung
  ELSEIF pv_vgtyp CA vbtyp_delv.
    lv_tablename = 'LIPS'.
*-- Auftrag
  ELSEIF pv_vgtyp CA vbtyp_auft.
    lv_tablename = 'VBAP'.
*-- Anforderungen
  ELSEIF pv_vgtyp CA vbtyp_anfo.
    lv_tablename = 'VBAP'.
*-- sonstiges
  ELSE.
    pv_subrc = 4.
    EXIT.
  ENDIF.

  SELECT SINGLE vgbel vgpos vgtyp
         FROM (lv_tablename) INTO (pv_vbelv, pv_posnv, pv_vbtyp_v)
         WHERE vbeln = pv_vbeln
           AND posnr = pv_posnn.
  IF sy-subrc <> 0.
    pv_subrc = 4.
    CLEAR: pv_vbelv, pv_posnv, pv_vbtyp_v.
    EXIT.
  ELSEIF pv_vbelv IS INITIAL.
    pv_subrc = 4.
    EXIT.
  ENDIF.

ENDFORM.                               " GET_REFERENCE_DOC
*>>>>>>>>>>>>>>>>>>>>>> end   of ins hp_356794 >>>>>>>>>>>>>>>>>>>>>>>>
*&---------------------------------------------------------------------*
*&      Form  CHECK_BONUS_DOCUMENT
*&---------------------------------------------------------------------*
*       Handelt es sich bei Faktura um Bonusabwicklung
*       (z.B. Jahresendrabatte) ?
*----------------------------------------------------------------------*
FORM check_bonus_document
                      USING    pv_inv_type     LIKE vbrk-fktyp
                               pv_inv_quantity LIKE vbrp-fkimg
                               pv_arrivdepa    LIKE veiav-arrivdepa
                      CHANGING pv_irefmonat    LIKE veiav-irefmonat
                               pv_irefejahr    LIKE veiav-irefejahr
                               pv_irefbeleg    LIKE veiav-irefbeleg
                               pv_irefposit    LIKE veiav-irefposit
                               pv_irefvdepa    LIKE veiav-arrivdepa
                               pv_icorfortz    LIKE veiav-icorfortz
                               pv_isessione    LIKE veiav-isessione
                               pv_bonus_case.
  IF ( pv_inv_type = 'B'
       OR pv_inv_type = 'C' ) AND
     ( pv_inv_quantity = 0 ).
    CLEAR: pv_irefmonat,
           pv_irefejahr,
           pv_irefbeleg,
           pv_irefposit.
    pv_isessione = '1'.
    pv_icorfortz = '-'.
    pv_irefvdepa = pv_arrivdepa.
    pv_bonus_case = true.
  ELSE.
    pv_bonus_case = false.
  ENDIF.

ENDFORM.                               " CHECK_BONUS_DOCUMENT
*&---------------------------------------------------------------------*
*&      Form  TABLE_SINGLE_READ_CANCEL
*&---------------------------------------------------------------------*
*       Lesen von Storno-Belegen mit Angabe der Warenrichtung
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM table_single_read_cancel USING p_vbeln LIKE vbrk-vbeln
                                    p_posnr LIKE vbrp-posnr
                                    p_vbrk_bukrs LIKE vbrk-bukrs
                                    p_reporting_type
                                    p_table_name
                                    p_arrivdepa LIKE veiav-arrivdepa
                           CHANGING p_irefmonat LIKE veiav-irefmonat
                                    p_irefejahr LIKE veiav-irefejahr
                                    p_irefbeleg LIKE veiav-irefbeleg
                                    p_irefposit LIKE veiav-irefposit
                                    p_irefvdepa LIKE veiav-arrivdepa
                                    p_subrc LIKE sy-subrc.

  DATA: struc_veiav LIKE veiav.

  p_subrc = 0.
  SELECT SINGLE * FROM (p_table_name)
                  INTO struc_veiav
                 WHERE arrivdepa = p_arrivdepa
                   AND belegnumr = p_vbeln
                   AND hauptposi = p_posnr
                   AND nummbukrs = p_vbrk_bukrs.
  p_subrc = sy-subrc.
  IF p_subrc = 0.
    p_irefmonat = struc_veiav-datummona.
    p_irefejahr = struc_veiav-datumjahr.
    p_irefbeleg = struc_veiav-belegnumr.
    p_irefposit = struc_veiav-hauptposi.
    p_irefvdepa = struc_veiav-arrivdepa.
  ENDIF.

ENDFORM.                               " TABLE_SINGLE_READ_CANCEL

*&
*&      Form  ECR_DATA_EXTRACT
*&
*       MAP logistics data to ECR API
*
FORM ecr_data_extract
                  USING    is_vbrk           TYPE vbrk
                           is_vbrp           TYPE vbrp
                           is_eikp           TYPE eikp
                           is_eipo           TYPE eipo
                           is_veiav          TYPE veiav
                           iv_extractor_type TYPE xfeld.

  DATA lv_function_ecr_pi TYPE rs38l_fnam.
  DATA ls_veiav           TYPE veiav.

  ls_veiav = is_veiav.
  PERFORM ecr_low_weight_handling_sd USING    is_veiav-eigenmass
                                              is_vbrp-ntgew
                                              is_vbrp-gewei
                                     CHANGING ls_veiav-eigenmaak
                                              ls_veiav-eigenmaeh.

  IF iv_extractor_type IS INITIAL.

    lv_function_ecr_pi = '/SAPSLL/MAP_ECR_SD'.
    CALL FUNCTION 'FUNCTION_EXISTS'
      EXPORTING
        funcname           = lv_function_ecr_pi
      EXCEPTIONS
        function_not_exist = 1
        OTHERS             = 2.
    IF sy-subrc <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      EXIT.
    ENDIF.

    CALL FUNCTION lv_function_ecr_pi
      EXPORTING
        is_vbrk  = is_vbrk
        is_vbrp  = is_vbrp
        is_eikp  = is_eikp
        is_eipo  = is_eipo
        is_veiav = ls_veiav.
  ELSE.


    lv_function_ecr_pi = '/SAPSLL/MAP_ECR_SD_IV'.
    CALL FUNCTION 'FUNCTION_EXISTS'
      EXPORTING
        funcname           = lv_function_ecr_pi
      EXCEPTIONS
        function_not_exist = 1
        OTHERS             = 2.
    IF sy-subrc <> 0.
*     MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
      EXIT.
    ENDIF.

    CALL FUNCTION lv_function_ecr_pi
      EXPORTING
        is_vbrk  = is_vbrk
        is_vbrp  = is_vbrp
        is_eikp  = is_eikp
        is_eipo  = is_eipo
        is_veiav = ls_veiav.
  ENDIF.

ENDFORM.                    " ECR_DATA_EXTRACT

*&
*&      form  ecr_data_transfer
*&
*       transfer collected api data to sap gts
*
FORM ecr_data_transfer  CHANGING cv_subrc          TYPE sy-subrc
                                 cv_records_number TYPE i.
  DATA lv_function_ecr_pi TYPE rs38l_fnam.

  lv_function_ecr_pi = '/SAPSLL/SEND_ECR_DATA'.
  CALL FUNCTION 'FUNCTION_EXISTS'
    EXPORTING
      funcname           = lv_function_ecr_pi
    EXCEPTIONS
      function_not_exist = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
*     message id sy-msgid type sy-msgty number sy-msgno
*             with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    EXIT.
  ENDIF.

  CALL FUNCTION lv_function_ecr_pi
    IMPORTING
      ev_records_number = cv_records_number
    EXCEPTIONS
      no_setup          = 1
      rfc_error         = 2
      no_data           = 3.

  IF sy-subrc <> 0.
    cv_subrc = sy-subrc.
  ELSE.
    cv_subrc = sy-subrc.
  ENDIF.

ENDFORM.                    " ECR_DATA_TRANSFER

*&
*&      form  ecr_extract_display
*&                                                                    *
*       show selected data on screen
*
FORM ecr_extract_display .

  DATA: lv_subrc TYPE sy-subrc.
  DATA lv_function_ecr_pi TYPE rs38l_fnam.
  lv_function_ecr_pi = '/SAPSLL/SHOW_ECR_DATA'.
  CALL FUNCTION 'FUNCTION_EXISTS'
    EXPORTING
      funcname           = lv_function_ecr_pi
    EXCEPTIONS
      function_not_exist = 1
      OTHERS             = 2.
  IF sy-subrc <> 0.
*     message id sy-msgid type sy-msgty number sy-msgno
*             with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    EXIT.
  ENDIF.


  CALL FUNCTION lv_function_ecr_pi.

ENDFORM.                    " ECR_EXTRACT_DISPLAY

***************************************************************
*   sap gts ecr / end
***************************************************************
*&---------------------------------------------------------------------*
*&      Form  display_help_values_pstyv
*&---------------------------------------------------------------------*
*       F4 help for item categories
*----------------------------------------------------------------------*
FORM display_help_values_pstyv USING pstyv.

  DATA: fieldname LIKE help_info-fieldname VALUE 'PSTYV',
        tabname   LIKE help_info-tabname   VALUE 'TVAP'.

  CALL FUNCTION 'HELP_VALUES_GET'
    EXPORTING
      display      = ' '
      fieldname    = fieldname
      tabname      = tabname
    IMPORTING
      select_value = pstyv
    EXCEPTIONS
      OTHERS       = 0.
ENDFORM.                    " display_help_values_pstyv

*&---------------------------------------------------------------------*
*&      Form  genes_service
*&---------------------------------------------------------------------*
*       set service item flag in VEIAV
*----------------------------------------------------------------------*
FORM serviceitem CHANGING serviceitem LIKE veiav-serviceitem.

  serviceitem = flg_service_item.

ENDFORM.                    " genes_service
***************************************************************
*   SAP GTS ECR / begin
***************************************************************

*---------------------------------------------------------------------*
*       FORM ecr_low_weight_handling_sd                               *
*---------------------------------------------------------------------*
*       Low weight handling for ECR Intrastat extractor               *
*---------------------------------------------------------------------*
*  -->  IS_VEIAV                                                      *
*  -->  IS_VBRP                                                       *
*  <--  ES_VEIAV                                                      *
*---------------------------------------------------------------------*
FORM ecr_low_weight_handling_sd
                            USING    iv_eigenmass      TYPE eigenmass
                                     iv_ntgew          TYPE ntgew_15
                                     iv_gewei          TYPE gewei
                            CHANGING cv_eigenmaak      TYPE eigenmaak
                                     cv_eigenmaeh      TYPE gewei.

  IF iv_eigenmass(2) = '99'.
    cv_eigenmaak = iv_ntgew.
    cv_eigenmaeh = iv_gewei.
  ENDIF.

ENDFORM.                    " ECR_LOW_WEIGHT_HANDLING_SD
*&---------------------------------------------------------------------*
*&      Form  fi_number
*&---------------------------------------------------------------------*
*       service item - read FI data
*----------------------------------------------------------------------*
FORM fi_number USING    vbeln     LIKE vbrk-vbeln
                        logsys    LIKE vbrk-logsys
                        bukrs     LIKE vbrk-bukrs
                        fkdat     LIKE vbrk-fkdat
                        rfbsk     LIKE vbrk-rfbsk
                        refbeleg  LIKE veiav-irefbeleg
                        refjahr   LIKE veiav-irefejahr
                        isessione LIKE veiav-isessione
               CHANGING fi_number LIKE veiav-fi_number
                        fi_date   LIKE veiav-fi_date.

  DATA: BEGIN OF xbkpf OCCURS 1.
          INCLUDE STRUCTURE bkpf.
  DATA: END OF xbkpf.
  DATA: BEGIN OF xbseg OCCURS 1.
          INCLUDE STRUCTURE bseg.
  DATA: END   OF xbseg.
  DATA: gjahr LIKE vbrk-gjahr.
  DATA: lv_vbeln LIKE vbrk-vbeln.

  IF isessione = '4'
    AND NOT refbeleg IS INITIAL
    AND NOT refjahr IS INITIAL.
    gjahr = refjahr.
    lv_vbeln = refbeleg.
  ELSE.
    gjahr = fkdat(04).
    lv_vbeln = vbeln.
  ENDIF.

  CLEAR: fi_number, fi_date.
  IF rfbsk CA 'CDJ'.
    CALL FUNCTION 'FI_DOCUMENT_READ'
      EXPORTING
        i_awtyp     = 'VBRK'
        i_awref     = lv_vbeln
        i_awsys     = logsys
        i_bukrs     = bukrs
        i_gjahr     = gjahr
      TABLES
        t_bkpf      = xbkpf
        t_bseg      = xbseg
      EXCEPTIONS
        wrong_input = 1
        not_found   = 2.

    IF sy-subrc EQ 0.
      LOOP AT xbkpf WHERE gjahr EQ gjahr.
        fi_number = xbkpf-belnr.
        fi_date   = xbkpf-budat.
        EXIT.
      ENDLOOP.
      IF sy-subrc NE 0.
        LOOP AT xbkpf.
          fi_number = xbkpf-belnr.
          fi_date   = xbkpf-budat.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " fi_number

*&---------------------------------------------------------------------*
*&      Form  service_code
*&---------------------------------------------------------------------*
*       service item: code number
*----------------------------------------------------------------------*
FORM service_code CHANGING service_code LIKE veiav-service_code.

ENDFORM.                    " service_code

*&---------------------------------------------------------------------*
*&      Form  supply_code
*&---------------------------------------------------------------------*
*       service item - supply method
*----------------------------------------------------------------------*
FORM supply_code CHANGING supply_code LIKE veiav-supply_code.

ENDFORM.                    " supply_code

*&---------------------------------------------------------------------*
*&      Form  payment_code
*&---------------------------------------------------------------------*
*       service item - payment method
*----------------------------------------------------------------------*
FORM payment_code CHANGING payment_code LIKE veiav-payment_code.

ENDFORM.                    " payment_code

*&---------------------------------------------------------------------*
*&      Form  payer_country
*&---------------------------------------------------------------------*
*       service item - payer's country
*----------------------------------------------------------------------*
FORM payer_country USING    pv_company_code  LIKE vbrk-bukrs
                   CHANGING payer_country LIKE veiav-payer_country.

  SELECT SINGLE land1 FROM t001
                      INTO payer_country
                     WHERE bukrs EQ pv_company_code.
  IF sy-subrc NE 0.
    CLEAR payer_country.
  ENDIF.

ENDFORM.                    " payer_country

*&---------------------------------------------------------------------*
*&      Form  check_service_reference
*&---------------------------------------------------------------------*
*       check reference datra for service item flag
*----------------------------------------------------------------------*
FORM check_service_reference USING p_vbrk      LIKE vbrk
                                   p_arrivdepa LIKE veiav-arrivdepa
                                   p_vbeln     LIKE vbrk-vbeln
                                   p_posnr     LIKE vbrp-posnr
                          CHANGING p_isessione LIKE veiav-isessione.

  DATA: struc_veiav LIKE veiav.

  IF ( p_vbrk-vbtyp CA vbtyp_fakt_sto OR
       p_vbrk-vbtyp CA vbtyp_fkiv )   AND
     NOT p_vbrk-sfakn IS INITIAL.

    SELECT SINGLE * FROM veiav
                    INTO struc_veiav
                   WHERE arrivdepa = p_arrivdepa
                     AND belegnumr = p_vbeln
                     AND hauptposi = p_posnr
                     AND nummbukrs = p_vbrk-bukrs.
    IF sy-subrc = 0.
      IF struc_veiav-serviceitem EQ true.
        p_isessione = '4'.
      ENDIF.
    ENDIF.

  ELSE.

    SELECT SINGLE * FROM veiav
                    INTO struc_veiav
                   WHERE belegnumr = p_vbeln
                     AND hauptposi = p_posnr
                     AND nummbukrs = p_vbrk-bukrs.
    IF sy-subrc = 0.
      IF struc_veiav-serviceitem EQ true.
        p_isessione = '4'.
      ENDIF.
    ENDIF.

  ENDIF.

  IF sy-subrc <> 0.
*-- referenced document not found on VEIAV / check selection log
    READ TABLE selection_log WITH KEY belegnumr = p_vbeln
                                      hauptposi = p_posnr
                                      bukrs     = p_vbrk-bukrs.
    IF sy-subrc = 0.
      IF selection_log-serviceitem EQ true.
        p_isessione = '4'.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " check_service_reference
