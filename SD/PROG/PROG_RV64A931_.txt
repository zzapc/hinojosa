FORM FRM_KONDI_WERT_931.
*{   INSERT         HEDK920776                                        1
*

  TYPES: ztt_VBAPVB type TABLE OF VBAPVB.
*
  FIELD-SYMBOLS: <fs_t> type ztt_VBAPVB.
**
*** not in display or print mode
**  check komk-trtyp ne 'A'.
**
**  check komp-kposn ne '000000'.
**  check xkomv-kdupl = 'B'.
ASSIGN ('(SAPMV45A)XVBAP[]') TO <fs_t>.

CHECK <fs_t> is assigned.

*
  READ TABLE <fs_t> ASSIGNING FIELD-SYMBOL(<fs_c>) WITH KEY posnr =  xkomv-kposn.
*  If <fs_c> is ASSIGNED AND <fs_c>-uepos is not INITIAL.

CHECK <fs_c> is assigned.


*SELECT SINGLE COUNT(*) FROM ZSSDT000_OF_PED WHERE vkorg = komk-vkorg and vtweg = komk-vtweg and spart = komk-spart and matnr = <fs_c>-matnr.
*  If sy-subrc = 0.
*    if xkomv-KPEIN = '1'.
*      xkomv-KPEIN = '1000'.
*    ENDIf.
*  ENDIf.

  SELECT SINGLE COUNT(*) FROM ZSSDTT000_POS_KI  WHERE vkorg = komk-vkorg and vtweg = komk-vtweg and spart = komk-spart
    AND ZSPOSKIT = 'P' AND pstyv = <fs_c>-pstyv.

    CHECK sy-subrc = 0.

    delete xkomv where kschl = 'ZPRC' and zaehk ne xkomv-zaehk. "MVR - 28.09.22 - Para que no queden ZPRC duplicadas

    xkomv-KINAK = 'X'.
    xkomv-KPEIN = '1000'.

  READ TABLE xkomv into DATA(l_xkomv) WITH KEY kschl = 'ZKUV' kposn = xkomv-kposn.
  If sy-subrc = 0.
    If l_xkomv-kwert = 0.
      XKWERT = 0.
      loop at xvbapu where uepos = xkomv-kposn.
        read table xkumko with key mandt = sy-mandt
                                   knumv = xkomv-knumv
                                   kposn = xvbapu-posnr
                                   kschl = 'ZKUV' binary search.
        if sy-subrc = 0.
          XKWERT = XKWERT + xkumko-kwert.
        endif.
      endloop.

    ELSE.
      xkomv-kwert = XKWERT = l_xkomv-kwert.
    ENDIF.

    l_xkomv-kwert = xkomv-kwert = XKWERT.

    IF <fs_c>-kwmeng > 0.
      xkomv-kbetr = ( l_xkomv-kwert * 1000000 ) / <fs_c>-kwmeng.
    endif.
  ENDIF.

*  MODIFY xkomv.   "MVR - 28.09.22 - Parece que no hace falta



*  data: tabix like sy-tabix.
*  data: rettxkumko like xkumko.
*

*
** Refresh Xkumko (Place the net value of the item in the global table.)
*  read table xkumko with key mandt = sy-mandt
*                             knumv = xkomv-knumv
*                             kposn = xkomv-kposn
*                             kschl = xkomv-kschl binary search.
*  tabix = sy-tabix.
*  xkomv-kawrt = komp-netwr.
*  move-corresponding xkomv to xkumko.
*  if not komp-kowrr is initial.
*    clear xkumko-kawrt.
*  endif.
*  rettxkumko = xkumko.
*
*  if sy-subrc = 0.
*    modify xkumko index tabix.
*  else.
*    insert xkumko index tabix.
*  endif.
*
*  READ TABLE <fs_t> ASSIGNING FIELD-SYMBOL(<fs_c>) WITH KEY posnr =  xkomv-kposn.
*  If <fs_c> is ASSIGNED AND <fs_c>-uepos is not INITIAL.
*    arbfeld = xkomv-kbetr.
*  ELSE..
*    arbfeld = 0.
*  LOOP AT <fs_t> ASSIGNING FIELD-SYMBOL(<fs>) where uepos = xkomv-kposn.
*    arbfeld = arbfeld + <fs>-netpr.
*  ENDLOOP.
*
*  ENDIF.
*
*
** prevent field overflow
*  catch system-exceptions conversion_errors = 1.
*    xkwert = arbfeld.                  "try to move
** Refresh Xkumko (Place the cumulated net value in the global table)
*    xkumko = rettxkumko.
*    xkumko-kwert = xkwert.
*    modify xkumko index tabix.
**    xkomv-kbetr = xkwert * 1000 / <fs_c>-kwmeng.
*    xkomv-waers = komk-waerk.
*    xkomv-kstat = 'X'.
*  endcatch.
*  if sy-subrc = 1.
*    message s802.
*    xkomv-kinak = 'X'.
*    xkomv-kstat = 'X'.
*    xkwert = 0.
*    xkomv-kbetr = 0.
*    xkomv-fxmsg = '802'.
*    komp-fxmsg  = '802'.
*    komp-prsok = ' '.
*  endif.
*}   INSERT
ENDFORM.
