**&---------------------------------------------------------------------*
**&  Include  YHP_SDU_SVCS
**&---------------------------------------------------------------------*



  data: LS_XVBAP       type VBAP,
        LV_EJECUTAR    type FLAG,
        LS_YVBAP       type VBAP,
        LT_XVBAP       type table of VBAP,
        LV_ANSWER      type STRING,
        LV_CHECK_ONCE  type FLAG,
        LV_POSNR_MEMOR type VBAP-POSNR,
        LV_POSNR_PARAM type VBAP-POSNR.

if 1 = 2.
  DATA LV_CLEAR TYPE POSNR VALUE IS INITIAL.
  SET PARAMETER ID 'Y_PAR_NEWPOS' FIELD LV_CLEAR.
endif.

  import LV_POSNR_MEMOR from memory id 'Y_MEM_NEWPOS'.
  get parameter id 'Y_PAR_NEWPOS' field LV_POSNR_PARAM.

  loop at XVBAP into LS_XVBAP where ABGRU = 'Z4'.
    read table YVBAP into LS_YVBAP with key POSNR = LS_XVBAP-POSNR .
    if LS_YVBAP-ABGRU <> 'Z4' and SY-SUBRC = 0.
      LV_EJECUTAR = ABAP_TRUE.
    endif.
  endloop.

  if SY-TCODE = 'VA22' and LV_EJECUTAR is not initial
                       and LV_POSNR_PARAM is initial
                       and LV_POSNR_MEMOR is initial
                       and LV_CHECK_ONCE is initial.

    call function 'POPUP_TO_CONFIRM'
      exporting
        TITLEBAR              = 'WARNING'
*       DIAGNOSE_OBJECT       = ' '
        TEXT_QUESTION         = 'It is going to create a new position including the new change. Do you agree?'
        TEXT_BUTTON_1         = 'OK'
        ICON_BUTTON_1         = 'ICON_CHECKED'
        TEXT_BUTTON_2         = 'CANCEL'
        ICON_BUTTON_2         = 'ICON_CANCEL'
*       DEFAULT_BUTTON        = '1'
        DISPLAY_CANCEL_BUTTON = ' '
*       USERDEFINED_F1_HELP   = ' '
*       START_COLUMN          = 25
*       START_ROW             = 6
*       POPUP_TYPE            =
*       IV_QUICKINFO_BUTTON_1 = ' '
*       IV_QUICKINFO_BUTTON_2 = ' '
      importing
        ANSWER                = LV_ANSWER
*     TABLES
*       PARAMETER             =
      exceptions
        TEXT_NOT_FOUND        = 1
        others                = 2.

    LV_CHECK_ONCE = ABAP_TRUE.

    if SY-SUBRC = 0 and LV_ANSWER = 1.

      submit YHP_SD_CREATE_POSNR with P_VBELN = YVBAP-VBELN
                                 with P_POSNR = YVBAP-POSNR
                                 exporting list to memory and return.

    endif.



  endif.




*  data: RS_MARC    type MARC.
*
**** Data declaration
*  data: LF_MSGTXT           type                   C.       "#EC NEEDED
*  data: LS_SELECTED_LINES   type                   YRF_TPM_S_INVOICE,
*        LS_RETURN            type                   BAPIRET2,
*        LS_ORDER_HEADER_INX  type                   BAPISDH1X,
*        LS_ORDER_ITEM_IN    type                   BAPISDITM,
*        LS_ORDER_ITEM_INX    type                   BAPISDITMX.
*  data: LT_SELECTED_LINES type                   YRF_TPM_TT_INVOICE,
*        LT_REFRESH_VBAP   type                   YRF_TPM_TT_INVOICE,
*        LT_ORDER_ITEM_IN  type standard table of BAPISDITM,
*        LT_ORDER_ITEM_INX  type standard table of BAPISDITMX,
*        LT_RETURN         type standard table of BAPIRET2.
*  data: LR_TOOL    type ref to            YCL_RF_TPM_TOOL,
*        LR_MESSAGE type ref to            /VCXI/CL_CKXM_MESSAGE.
**         DATA: vl_salesdocument        TYPE bapivbeln-vbeln,
**                    wl_quotation_header_inx TYPE bapisdh1x,
**                    wl_logic_switch         TYPE bapisdls,
**                    tl_return               TYPE TABLE OF bapiret2,
**                    tl_conditions_in        TYPE TABLE OF bapicond,
**                    tl_conditions_inx       TYPE TABLE OF bapicondx,
**                    tl_quotation_item_in    TYPE TABLE OF bapisditm,
**                    tl_quotation_item_inx   TYPE TABLE OF bapisditmx.
*  data TESTRUN like  BAPIFLAG-BAPIFLAG.
*
*
*  check SY-UNAME eq 'IRODRIGUEZ'.
*
*  loop at XVBAP into SL_XVBAP where ABGRU = 'Z4'.
****----------------------------------------------------------------------------
**** Add Item
*    select single * into S_TVAK from TVAK where AUART eq 'ZOF'.
*    sort T_XVBAP by POSNR descending.
*    read table T_XVBAP into data(LS_VBAP) index 1.
*    F_POSNR = LS_VBAP-POSNR + S_TVAK-INCPO.
*
*    clear SL_XVBAP-ABGRU.
*    SL_XVBAP-POSNR = F_POSNR.
*    SL_XVBAP-STDAT = SY-DATUM.
*
**** Get MARC
*    call function 'MARC_SINGLE_READ'
*      exporting
*        MATNR  = SL_XVBAP-MATNR
*        WERKS  = SL_XVBAP-WERKS
*      importing
*        WMARC  = RS_MARC
*      exceptions
*        others = 0.
*
*    SL_XVBAP-CUOBJ = RS_MARC-CUOBJ.
*
*    insert  SL_XVBAP into table XVBAP.
****   Build header
*    LS_ORDER_HEADER_INX-UPDATEFLAG = 'U'.
*
*    LS_ORDER_ITEM_IN-ITM_NUMBER    = 000020.
*    LS_ORDER_ITEM_IN-MATERIAL = 'SINGLE'.
*    LS_ORDER_ITEM_IN-PLANT = 2000.
*    LS_ORDER_ITEM_IN-TARGET_QTY = 1000.
**    LS_ORDER_ITEM_IN-SALES_UNIT = ."itab_ch-sales_unit.
**    LS_ORDER_ITEM_IN-VAL_TYPE = ."itab_ch-val_type.
*    append LS_ORDER_ITEM_IN to LT_ORDER_ITEM_IN.
*
*
*
*    LS_ORDER_ITEM_INX-UPDATEFLAG = 'I'.
*    LS_ORDER_ITEM_INX-ITM_NUMBER = 000020.
*    LS_ORDER_ITEM_INX-SALES_UNIT = 'X'.
*    LS_ORDER_ITEM_INX-MATERIAL = 'X'.
*    LS_ORDER_ITEM_INX-PLANT = 'X'.
*    LS_ORDER_ITEM_INX-TARGET_QTY = 'X'.
*    LS_ORDER_ITEM_INX-VAL_TYPE =  'X'.
*    append LS_ORDER_ITEM_INX to LT_ORDER_ITEM_INX.
*
*  endloop.
*
*  .
*  call function 'BAPI_SALESORDER_CHANGE'
*    exporting
*      SALESDOCUMENT     = SL_XVBAP-VBELN
**     ORDER_HEADER_IN   =
*      ORDER_HEADER_INX  = LS_ORDER_HEADER_INX
*      BEHAVE_WHEN_ERROR = 'P'
*    tables
*      RETURN            = LT_RETURN
*      ORDER_ITEM_IN     = LT_ORDER_ITEM_IN
*      ORDER_ITEM_INX    = LT_ORDER_ITEM_INX.
*
*  if SY-SUBRC is initial.
*    " LV_ERROR = ZCL_BAPI=>CHECK_FOR_ERRORS( LT_RET2 ).
*
**  if LV_ERROR is initial.
*    commit work.
**  endif.
*  endif.
*
**loop at LT_RET2 assigning <FS>.
**  <FS>-MESSAGE_V1 = ME->VBELN.
**endloop.
**
**BAPIRETURN[] = LT_RET2[].
****   Commit
**COMMIT WORK.
*
*
*
*
*
*


*  submit ZTEST1 with P_VBELN = VBAP-VBELN "parameters
*and return.
*
**DATA  SL_XVBAP type VBAPVB.
** Data declarations.
*  data:I_BAPI_VIEW like ORDER_VIEW.
*  data:SALES_DOCUMENTS like SALES_KEY occurs 0 with header line.
**ORDER_OUT
*  data:ORDER_ITEMS_OUT like BAPISDIT occurs 0 with header line.
*  data:ORDER_HEADERS_OUT like BAPISDHD occurs 0 with header line.
*  data:ORDER_HEADER_INX like BAPISDH1X.
****ORDER_IN
*  data:ORDER_ITEM_IN like BAPISDITM occurs 0 with header line.
*  data:ORDER_HEADER_IN like BAPISDH1 occurs 0 with header line.
*  data:ORDER_ITEM_INX like BAPISDITMX occurs 0 with header line.
*  data: I_HDR type BAPISDH1.
*  data: ITAB_ITEM          like BAPISDITEM  occurs 0 with header line.
*  data: ITAB_CH          like ITAB_ITEM  occurs 0 with header line.
*  data: S_ORDER_HEADER_IN like BAPISDH1.
*  data: S_ORDER_HEADER_INX like BAPISDH1X.
*  data: begin of I_ORDER_ITEM_IN occurs 0.
*          include structure BAPISDITM.
*        data: end   of I_ORDER_ITEM_IN.
*  data: begin of I_ORDER_ITEM_INX occurs 0.
*          include structure BAPISDITMX.
*        data: end   of I_ORDER_ITEM_INX.
*  data: begin of IT_RETURN occurs 0.
*          include structure BAPIRET2.
*        data: end of IT_RETURN.
*
*
*  ORDER_HEADER_IN-SD_DOC_CAT  = 'C'.
*  ORDER_HEADER_INX-UPDATEFLAG = 'U'.
*  I_BAPI_VIEW-HEADER = 'X'.
*  I_BAPI_VIEW-ITEM = 'X'.
*  SALES_DOCUMENTS-VBELN = VBAP-VBELN.
*  append SALES_DOCUMENTS.
*
*  T_XVBAP = XVBAP[].
*
*  loop at XVBAP into SL_XVBAP where ABGRU = 'Z4'.
*
**** Add Item
*    select single * into S_TVAK from TVAK where AUART eq 'ZOF'.
*    sort T_XVBAP by POSNR descending.
*    read table T_XVBAP into data(LS_VBAP) index 1.
*    F_POSNR = LS_VBAP-POSNR + S_TVAK-INCPO.
*
**   Header update indicator
*    S_ORDER_HEADER_INX-UPDATEFLAG = 'U'.
*    I_ORDER_ITEM_IN-ITM_NUMBER = F_POSNR. " ITAB_CH-ITM_NUMBER .
*    I_ORDER_ITEM_IN-MATERIAL   = SL_XVBAP-MATNR. "MATERIAL.
*    I_ORDER_ITEM_IN-TARGET_QTY = SL_XVBAP-ZMENG. " TARGET_QTY.
*    I_ORDER_ITEM_IN-SALES_UNIT = SL_XVBAP-VRKME. "ITAB_CH-SALES_UNIT.
*    I_ORDER_ITEM_IN-VAL_TYPE   = SL_XVBAP-BWTAR. "ITAB_CH-VAL_TYPE.
*
*    I_ORDER_ITEM_INX-UPDATEFLAG = 'I'.
*    I_ORDER_ITEM_INX-ITM_NUMBER = F_POSNR.
*    I_ORDER_ITEM_INX-MATERIAL   = SL_XVBAP-MATNR.
*    I_ORDER_ITEM_INX-TARGET_QTY = 'X'.
*    I_ORDER_ITEM_INX-SALES_UNIT = SL_XVBAP-VRKME.
*    I_ORDER_ITEM_INX-VAL_TYPE   =  'X'.
*    append: I_ORDER_ITEM_IN, I_ORDER_ITEM_INX.
*
*    call function 'BAPI_SALESORDER_CHANGE'
*      exporting
*        SALESDOCUMENT     = SALES_DOCUMENTS-VBELN
*        ORDER_HEADER_IN   = S_ORDER_HEADER_IN
*        ORDER_HEADER_INX  = S_ORDER_HEADER_INX
*        BEHAVE_WHEN_ERROR = 'P'
*      tables
*        RETURN            = IT_RETURN
*        ORDER_ITEM_IN     = I_ORDER_ITEM_IN
*        ORDER_ITEM_INX    = I_ORDER_ITEM_INX.
*
*    if SY-SUBRC eq 0.
*      call function 'BAPI_TRANSACTION_COMMIT'
*        exporting
*          WAIT = 'X'.
*    endif.
*
*  endloop.
