
class ZSSCL_SDLE_MONITORDEV_DPC_IMP definition
  public
  final
  create public .

public section.

  methods ANULAR_EM
    importing
      !LP_VBELN_VL type VBELN_VL
    returning
      value(LT_RETURN) type BAPIRET2_T
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods BORRAR_ENTREGA_DEV
    importing
      !LP_VBELN_VL type VBELN_VL
    returning
      value(TP_RETURN) type BAPIRET2_T .
  methods CONTABILIZAR_EM
    importing
      !LP_VBELN_VL type VBELN_VL
    returning
      value(TP_RETURN) type BAPIRET2_T .
  methods CREAR_ENTREGA_DEV
    importing
      !TP_DATOS type ZTT_SDLE_CREA_ENT_DEV
    returning
      value(TP_RETURN) type BAPIRET2_T .
  methods MONITOR_ENT_GETLIST
    importing
      !VP_WERKS type WERKS_D
      !VP_VSTEL type VSTEL
      !LP_R_VBELN type EFG_TAB_RANGES optional
      !LP_R_KUNAG type EFG_TAB_RANGES optional
      !LP_R_KUNWE type EFG_TAB_RANGES optional
      !LP_R_MATNRF type EFG_TAB_RANGES optional
      !LP_R_FECHA_ENT_CL type EFG_TAB_RANGES optional
      !LP_INC_FINALIZADAS type XFLAG optional
    returning
      value(TP_MONITOR_ENT) type ZTT_SDLE_MONITORDEV_ENT .
  methods MONITOR_GETLIST
    importing
      !VP_WERKS type WERKS_D
      !VP_VSTEL type VSTEL
      !LP_R_VBELN type EFG_TAB_RANGES optional
      !LP_R_KUNAG type EFG_TAB_RANGES optional
      !LP_R_KUNWE type EFG_TAB_RANGES optional
      !LP_R_MATNRF type EFG_TAB_RANGES optional
      !LP_R_FECHA_ENT_CL type EFG_TAB_RANGES optional
      !LP_INC_FINALIZADAS type XFLAG optional
    returning
      value(TP_MONITOR) type ZTT_SDLE_MONITORDEV .
protected section.
private section.
endclass. "ZSSCL_SDLE_MONITORDEV_DPC_IMP definition
class ZSSCL_SDLE_MONITORDEV_DPC_IMP implementation.
  METHOD anular_em.

    DATA(rl_batch_input) = NEW zcl_seis_batch_input( 'VL09' ).
    rl_batch_input->add_dynpro( vp_programa = 'RVV50L09' vp_dynpro   = '1000' ).
    rl_batch_input->add_field( vp_campo = 'I_VSTEL-LOW'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'I_VSTEL-LOW'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'I_VSTEL-HIGH'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'I_ROUTE-LOW'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'I_ROUTE-HIGH'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'I_DATUM-LOW'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'I_DATUM-HIGH'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'I_VBELN-LOW'    vp_valor = lp_vbeln_vl ).
    rl_batch_input->add_field( vp_campo = 'I_VBELN-HIGH'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'I_SAMMG-LOW'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'I_SAMMG-HIGH'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'I_TKNUM-LOW'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'I_TKNUM-HIGH'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'LF_ANAUS'    vp_valor = 'X' ).
    rl_batch_input->add_field( vp_campo = 'LF_AULIE'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'LF_ANLIE'    vp_valor = '' ).
    rl_batch_input->add_field( vp_campo = 'BDC_OKCODE'    vp_valor = '=ONLI' ).
    DATA: lv_modo TYPE char1.
    lv_modo = 'E'.
    rl_batch_input->set_modo( lv_modo ).
    DATA(tl_mensajes) = rl_batch_input->call_transaction( ).

    LOOP AT tl_mensajes ASSIGNING FIELD-SYMBOL(<fs_mesg>).
      APPEND INITIAL LINE TO lt_return ASSIGNING FIELD-SYMBOL(<fs_return>).
      <fs_return>-type = <fs_mesg>-msgtyp.
      <fs_return>-id = <fs_mesg>-msgid.
      <fs_return>-number = <fs_mesg>-msgnr.
*      <fs_return>-message = <fs_mesg>-text.
      <fs_return>-message_v1 = <fs_mesg>-msgv1.
      <fs_return>-message_v2 = <fs_mesg>-msgv2.
      <fs_return>-message_v3 = <fs_mesg>-msgv3.
      <fs_return>-message_v4 = <fs_mesg>-msgv4.
    ENDLOOP.


    "
    " Usar el módulo de función me causa problemas si se hace tras ejecutar otras funciones para modificar entregas.
    " https://zbap.net/abap-vl-302-delivery-does-not-exist-error-fca90f185e4d
    " https://community.sap.com/t5/application-development-discussions/problem-in-cancelling-a-goods-issue-with-ws-reverse-goods-issue/m-p/1107030

***    DATA: lv_vbeln TYPE  likp-vbeln,
***          lv_budat TYPE  sy-datlo,
***          lv_vbtyp TYPE  likp-vbtyp,
***          lt_mesg  TYPE TABLE OF mesg.
***
***    DATA: lv_mblnr TYPE mkpf-mblnr,
***          lv_mjahr TYPE mseg-mjahr.
***
***    SELECT SINGLE *
***      FROM vbuk
***      INTO @DATA(wl_vbuk)
***      WHERE vbeln = @lp_vbeln_vl.
***    IF sy-subrc <> 0.
***      CLEAR wl_vbuk.
***    ENDIF.
***
***    CHECK wl_vbuk-wbstk = 'C'.
***
***
******* REFRESH DELIVERY BUFFER
******    CALL FUNCTION 'LE_DELIVERY_REFRESH_BUFFER'
******      EXCEPTIONS
******        no_key_specified = 0
******        OTHERS           = 0.
***
***    CLEAR lt_return.
***
***    SELECT SINGLE *
***      FROM likp
***      INTO @DATA(wl_likp)
***      WHERE vbeln = @lp_vbeln_vl.
***
***    SELECT SINGLE *
***      FROM vbfa
***      INTO @DATA(wl_vbfa)
***      WHERE vbelv = @wl_likp-vbeln AND
***            bwart <> '' AND
***            vbtyp_n = 'R'.
***
***    lv_vbeln  = wl_likp-vbeln.
***    lv_budat = wl_likp-wadat_ist.
***    lv_vbtyp = wl_likp-vbtyp.
***    CLEAR lt_mesg.
***
***    lv_mblnr = wl_vbfa-vbeln.
***    lv_mjahr = wl_vbfa-mjahr.
***
***    CALL FUNCTION 'WS_REVERSE_GOODS_ISSUE'
***      EXPORTING
***        i_vbeln                   = lv_vbeln
***        i_budat                   = lv_budat
***        i_count                   = '001'
******        i_mblnr                   = lv_mblnr
***        i_tcode                   = 'VL09'
***        i_vbtyp                   = lv_vbtyp
****       I_MBLPO                   =
******        i_mjahr                   = lv_mjahr
****       I_POSNR                   =
****       I_SIMULATE                = ' '
****       I_SPE_BUDAT_UHR           =
****       I_SPE_BUDAT_ZONE          =
****       I_SPE_MDNUM_EWM           =
****       I_SPE_LOGSYS              =
****       I_SPE_CONFIRM_CENTRAL     = ' '
****       I_SPE_BILLING_REVERSAL    = ' '
**** IMPORTING
****       ES_EMKPF                  =
***      TABLES
***        t_mesg                    = lt_mesg
****       T_VBAPF                   =
****       T_VBFA                    =
***      EXCEPTIONS
***        error_reverse_goods_issue = 1
***        OTHERS                    = 2.
***    IF sy-subrc <> 0.
***      APPEND INITIAL LINE TO lt_return ASSIGNING FIELD-SYMBOL(<fs_return>).
***      <fs_return>-type = 'E'.
***      <fs_return>-message = 'Error al anular entrada de mercancía'.
***    ENDIF.
***
***    LOOP AT lt_mesg ASSIGNING FIELD-SYMBOL(<fs_mesg>).
***      APPEND INITIAL LINE TO lt_return ASSIGNING <fs_return>.
***      <fs_return>-type = <fs_mesg>-msgty.
****<fs_return>-ID =
***      <fs_return>-number = <fs_mesg>-txtnr.
***      <fs_return>-message = <fs_mesg>-text.
***      <fs_return>-message_v1 = <fs_mesg>-msgv1.
***      <fs_return>-message_v2 = <fs_mesg>-msgv2.
***      <fs_return>-message_v3 = <fs_mesg>-msgv3.
***      <fs_return>-message_v4 = <fs_mesg>-msgv4.
***    ENDLOOP.

  ENDMETHOD.
  METHOD borrar_entrega_dev.

    DATA: wl_header_data    TYPE bapiobdlvhdrchg,
          wl_header_control TYPE bapiobdlvhdrctrlchg,
          vl_delivery       TYPE bapiobdlvhdrchg-deliv_numb.

    CLEAR tp_return.

    wl_header_data-deliv_numb = lp_vbeln_vl.

    wl_header_control-deliv_numb = lp_vbeln_vl.
    wl_header_control-dlv_del = 'X'.

    vl_delivery = lp_vbeln_vl.

    CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
      EXPORTING
        header_data    = wl_header_data
        header_control = wl_header_control
        delivery       = vl_delivery
      TABLES
        return         = tp_return.
  ENDMETHOD.
  METHOD contabilizar_em.

    DATA: ls_vbkok                    TYPE vbkok,
          lt_prot                     TYPE STANDARD TABLE OF prott,
          lv_error_any_0              TYPE xfeld,
          lv_error_in_item_deletion_0 TYPE xfeld,
          lv_error_in_pod_update_0    TYPE xfeld,
          lv_error_in_interface_0     TYPE xfeld,
          lv_error_in_goods_issue_0   TYPE xfeld,
          lv_error_in_final_check_0   TYPE xfeld,
          lv_error_partner_update     TYPE xfeld,
          lv_error_sernr_update       TYPE xfeld.

    DATA ls_return TYPE bapiret2.

    CLEAR tp_return.

    CLEAR ls_vbkok.
    ls_vbkok-vbeln_vl = lp_vbeln_vl.
    ls_vbkok-wabuc = 'X'.

    CLEAR lt_prot.

    CALL FUNCTION 'WS_DELIVERY_UPDATE'
      EXPORTING
        vbkok_wa                    = ls_vbkok
        delivery                    = lp_vbeln_vl
*       update_picking              = 'X'         "Update Picking data
      IMPORTING
        ef_error_any_0              = lv_error_any_0
        ef_error_in_item_deletion_0 = lv_error_in_item_deletion_0
        ef_error_in_pod_update_0    = lv_error_in_pod_update_0
        ef_error_in_interface_0     = lv_error_in_interface_0
        ef_error_in_goods_issue_0   = lv_error_in_goods_issue_0
        ef_error_in_final_check_0   = lv_error_in_final_check_0
        ef_error_partner_update     = lv_error_partner_update
        ef_error_sernr_update       = lv_error_sernr_update
      TABLES
*       vbpok_tab                   = i_vbpok
        prot                        = lt_prot
      EXCEPTIONS
        error_message               = 99.

    IF sy-subrc <> 0 OR
       lv_error_any_0               = 'X' OR
       lv_error_in_item_deletion_0  = 'X' OR
       lv_error_in_pod_update_0     = 'X' OR
       lv_error_in_interface_0      = 'X' OR
       lv_error_in_goods_issue_0    = 'X' OR
       lv_error_in_final_check_0    = 'X' OR
       lv_error_partner_update      = 'X' OR
       lv_error_sernr_update        = 'X'.
      CLEAR ls_return.
      ls_return-type = sy-msgty.
      ls_return-id = sy-msgid.
      ls_return-number = sy-msgno.
      ls_return-message_v1 = sy-msgv1.
      ls_return-message_v2 = sy-msgv2.
      ls_return-message_v3 = sy-msgv3.
      ls_return-message_v4 = sy-msgv4.
      APPEND ls_return TO tp_return.
    ENDIF.
    IF lt_prot IS NOT INITIAL.
      LOOP AT lt_prot ASSIGNING FIELD-SYMBOL(<fs_prot>).

        MOVE-CORRESPONDING <fs_prot> TO ls_return.
        ls_return-type = <fs_prot>-msgty.
        ls_return-id = <fs_prot>-msgid.
        ls_return-number = <fs_prot>-msgno.
        ls_return-message_v1 = <fs_prot>-msgv1.
        ls_return-message_v2 = <fs_prot>-msgv2.
        ls_return-message_v3 = <fs_prot>-msgv3.
        ls_return-message_v4 = <fs_prot>-msgv4.
        APPEND ls_return TO tp_return.

      ENDLOOP.
    ENDIF.

  ENDMETHOD.
  METHOD crear_entrega_dev.
    DATA: lv_fecha_reparto TYPE vbak-vdatu,
          lv_delivery      TYPE bapishpdelivnumb-deliv_numb,
          lt_sales_order   TYPE TABLE OF bapidlvreftosalesorder,
          ls_sales_order   LIKE LINE OF lt_sales_order,
          lt_deliveries    TYPE TABLE OF bapishpdelivnumb,
          lt_return        TYPE TABLE OF bapiret2,
          lt_vbpok         TYPE TABLE OF vbpok,
          lt_prott         TYPE TABLE OF prott.


    CLEAR tp_return.

    CLEAR: lt_sales_order.
    LOOP AT tp_datos ASSIGNING FIELD-SYMBOL(<fs_dato>).
      CLEAR: ls_sales_order.
      ls_sales_order-ref_doc = <fs_dato>-vbeln.
      ls_sales_order-ref_item = <fs_dato>-posnr.
      ls_sales_order-dlv_qty = <fs_dato>-kwmeng.
      ls_sales_order-sales_unit = <fs_dato>-vrkme.
      APPEND ls_sales_order TO lt_sales_order.
    ENDLOOP.

    "
    " Creamos entrega.
    "
    CLEAR lt_return.
    CLEAR lv_delivery.
    CLEAR lv_fecha_reparto.
    lv_fecha_reparto = '99991231'. "ls_trans_cab-wadat_ist. " '99991231'.

    CALL FUNCTION 'BAPI_OUTB_DELIVERY_CREATE_SLS'
      EXPORTING
        due_date          = lv_fecha_reparto
      IMPORTING
        delivery          = lv_delivery
      TABLES
        sales_order_items = lt_sales_order
        deliveries        = lt_deliveries
        return            = tp_return.
  ENDMETHOD.
  METHOD monitor_ent_getlist.
    DATA: lt_auart TYPE RANGE OF vbak-auart,
          ls_auart LIKE LINE OF lt_auart.

    DATA: lr_vbeln        TYPE RANGE OF zst_sdle_monitordev-vbeln,
          lr_kunag        TYPE RANGE OF zst_sdle_monitordev-kunag,
          lr_kunwe        TYPE RANGE OF zst_sdle_monitordev-kunwe,
          lr_matnrf       TYPE RANGE OF zst_sdle_monitordev-matnr_final,
          lr_fecha_ent_cl TYPE RANGE OF zst_sdle_monitordev-fecha_ent_cliente,
          lr_wbstk        TYPE RANGE OF zst_sdle_monitordev_ent-wbstk,
          ls_wbstk        LIKE LINE OF lr_wbstk.

    lr_vbeln = lp_r_vbeln.
    lr_kunag = lp_r_kunag.
    lr_kunwe = lp_r_kunwe.
    lr_matnrf = lp_r_matnrf.
    lr_fecha_ent_cl = lp_r_fecha_ent_cl.

    ls_auart-sign = 'I'.
    ls_auart-option = 'EQ'.
    ls_auart-low = 'ZRED'.
    APPEND ls_auart TO lt_auart.

    CLEAR lr_wbstk.
    IF lp_inc_finalizadas IS INITIAL.
      ls_wbstk-sign = 'E'.
      ls_wbstk-option = 'EQ'.
      ls_wbstk-low = 'C'.
      APPEND ls_wbstk TO lr_wbstk.
    ENDIF.

    CLEAR tp_monitor_ent.

    "
    " Seleccionamos registros.
    "
    SELECT *
      FROM vbap
      INNER JOIN vbak ON ( vbap~vbeln = vbak~vbeln )
      LEFT OUTER JOIN makt ON ( makt~matnr = vbap~matnr AND makt~spras = @sy-langu )
      INTO TABLE @DATA(lt_vbap)
      WHERE vbak~auart IN @lt_auart AND
            vbap~werks = @vp_werks AND
            vbap~vstel = @vp_vstel AND
            vbap~vbeln IN @lr_vbeln AND
            vbak~kunnr IN @lr_kunag AND
            vbap~matnr IN @lr_matnrf.

    LOOP AT lt_vbap ASSIGNING FIELD-SYMBOL(<fs_vbap>).
      IF lr_fecha_ent_cl IS NOT INITIAL.
        SELECT MIN( edatu )
          FROM vbep
          INTO @DATA(lv_fecha_ent_cliente)
          WHERE vbeln = @<fs_vbap>-vbap-vbeln AND
                posnr = @<fs_vbap>-vbap-posnr.
        CHECK lv_fecha_ent_cliente IN lr_fecha_ent_cl.
      ENDIF.

      SELECT SINGLE *
        FROM vbfa
        INTO @DATA(ls_vbfa)
        WHERE vbelv = @<fs_vbap>-vbap-vbeln AND
              posnv = @<fs_vbap>-vbap-posnr AND
              vbtyp_n = 'T'.
      CHECK sy-subrc = 0.
      READ TABLE tp_monitor_ent INTO DATA(ls_monitor) WITH KEY vbeln = ls_vbfa-vbeln.
      IF sy-subrc <> 0.
        CLEAR ls_monitor.
        SELECT *
          FROM lips
          INNER JOIN vbuk ON ( lips~vbeln = vbuk~vbeln )
          INNER JOIN likp ON ( lips~vbeln = likp~vbeln )
          LEFT OUTER JOIN makt ON ( makt~matnr = lips~matnr AND makt~spras = @sy-langu )
          INTO TABLE @DATA(lt_lips)
          WHERE lips~vbeln = @ls_vbfa-vbeln AND
                lips~matnr IN @lr_matnrf and
                vbuk~wbstk in @lr_wbstk.
        CHECK sy-subrc = 0.
        LOOP AT lt_lips ASSIGNING FIELD-SYMBOL(<fs_lips>).
          MOVE-CORRESPONDING <fs_lips>-likp TO ls_monitor.
          MOVE-CORRESPONDING <fs_lips>-vbuk TO ls_monitor.
          MOVE-CORRESPONDING <fs_lips>-lips TO ls_monitor.

          ls_monitor-kunag = <fs_vbap>-vbak-kunnr.

          ls_monitor-matnr_final = <fs_lips>-lips-matnr.
          ls_monitor-maktx_final = <fs_lips>-makt-maktx.

          SELECT SINGLE name1
            INTO ls_monitor-name1
            FROM kna1
            WHERE kunnr = ls_monitor-kunag.
          "
          " Destinatario
          "
          SELECT SINGLE *
            FROM vbpa
            INTO @DATA(ls_vbpa_dest)
            WHERE vbeln = @<fs_vbap>-vbap-vbeln AND
                  posnr = @<fs_vbap>-vbap-posnr AND
                  parvw = 'WE'.
          IF sy-subrc <> 0.
            SELECT SINGLE *
              FROM vbpa
              INTO ls_vbpa_dest
              WHERE vbeln = <fs_vbap>-vbap-vbeln AND
                    posnr = '000000' AND
                    parvw = 'WE'.
          ENDIF.
          IF sy-subrc <> 0.
            CLEAR ls_vbpa_dest.
          ENDIF.
          ls_monitor-kunwe = ls_vbpa_dest-kunnr.
          CHECK ls_monitor-kunwe IN lr_kunwe.


          SELECT SINGLE name1
            FROM kna1
            INTO ls_monitor-kunwe_name1
            WHERE kunnr = ls_monitor-kunwe.
          IF sy-subrc <> 0.
            CLEAR ls_monitor-kunwe_name1.
          ENDIF.

          APPEND ls_monitor TO tp_monitor_ent.
        ENDLOOP.

      ENDIF.
    ENDLOOP.


  ENDMETHOD.
  METHOD monitor_getlist.
    DATA: lt_auart   TYPE RANGE OF vbak-auart,
          ls_auart   LIKE LINE OF lt_auart,
          ls_monitor TYPE zst_sdle_monitordev.

    DATA: lr_vbeln        TYPE RANGE OF zst_sdle_monitordev-vbeln,
          lr_kunag        TYPE RANGE OF zst_sdle_monitordev-kunag,
          lr_kunwe        TYPE RANGE OF zst_sdle_monitordev-kunwe,
          lr_matnrf       TYPE RANGE OF zst_sdle_monitordev-matnr_final,
          lr_fecha_ent_cl TYPE RANGE OF zst_sdle_monitordev-fecha_ent_cliente,
          lr_gbsta        TYPE RANGE OF zst_sdle_monitordev-gbsta,
          ls_gbsta        LIKE LINE OF lr_gbsta.

    lr_vbeln = lp_r_vbeln.
    lr_kunag = lp_r_kunag.
    lr_kunwe = lp_r_kunwe.
    lr_matnrf = lp_r_matnrf.
    lr_fecha_ent_cl = lp_r_fecha_ent_cl.


    ls_auart-sign = 'I'.
    ls_auart-option = 'EQ'.
    ls_auart-low = 'ZRED'.
    APPEND ls_auart TO lt_auart.

    CLEAR lr_gbsta.
    IF lp_inc_finalizadas IS INITIAL.
      ls_gbsta-sign = 'E'.
      ls_gbsta-option = 'EQ'.
      ls_gbsta-low = 'C'.
      APPEND ls_gbsta TO lr_gbsta.
    ENDIF.

    CLEAR tp_monitor.

    "
    " Seleccionamos registros.
    "
    SELECT *
      FROM vbap
      INNER JOIN vbak ON ( vbap~vbeln = vbak~vbeln )
      LEFT OUTER JOIN makt ON ( makt~matnr = vbap~matnr AND makt~spras = @sy-langu )
      INTO TABLE @DATA(lt_vbap)
      WHERE vbak~auart IN @lt_auart AND
            vbap~werks = @vp_werks AND
            vbap~vstel = @vp_vstel AND
            vbap~vbeln IN @lr_vbeln AND
            vbak~kunnr IN @lr_kunag AND
            vbap~matnr IN @lr_matnrf.

    LOOP AT lt_vbap ASSIGNING FIELD-SYMBOL(<fs_vbap>).
***      APPEND INITIAL LINE TO tp_monitor ASSIGNING FIELD-SYMBOL(<fs_monitor>).
      ls_monitor-matnr_final = <fs_vbap>-vbap-matnr.
      ls_monitor-charg = <fs_vbap>-vbap-charg.
      ls_monitor-maktx_final = <fs_vbap>-makt-maktx.
      ls_monitor-vbeln = <fs_vbap>-vbap-vbeln.
      ls_monitor-posnr = <fs_vbap>-vbap-posnr.
      ls_monitor-kwmeng = <fs_vbap>-vbap-kwmeng.
      ls_monitor-vrkme = <fs_vbap>-vbap-vrkme.
      CLEAR ls_monitor-fecha_ent_cliente.
      ls_monitor-kunag = <fs_vbap>-vbak-kunnr.
      CLEAR ls_monitor-name1.

      SELECT MIN( edatu )
        FROM vbep
        INTO ls_monitor-fecha_ent_cliente
        WHERE vbeln = <fs_vbap>-vbap-vbeln AND
              posnr = <fs_vbap>-vbap-posnr.
      CHECK ls_monitor-fecha_ent_cliente IN lr_fecha_ent_cl.

      SELECT SINGLE name1
        INTO ls_monitor-name1
        FROM kna1
        WHERE kunnr = ls_monitor-kunag.
      IF sy-subrc <> 0.
        CLEAR ls_monitor-name1.
      ENDIF.

      "
      " Destinatario
      "
      SELECT SINGLE *
        FROM vbpa
        INTO @DATA(ls_vbpa_dest)
        WHERE vbeln = @<fs_vbap>-vbap-vbeln AND
              posnr = @<fs_vbap>-vbap-posnr AND
              parvw = 'WE'.
      IF sy-subrc <> 0.
        SELECT SINGLE *
          FROM vbpa
          INTO ls_vbpa_dest
          WHERE vbeln = <fs_vbap>-vbap-vbeln AND
                posnr = '000000' AND
                parvw = 'WE'.
      ENDIF.
      IF sy-subrc <> 0.
        CLEAR ls_vbpa_dest.
      ENDIF.
      ls_monitor-kunwe = ls_vbpa_dest-kunnr.
*      ls_monitor-adrnr = ls_vbpa_dest-adrnr.
      CHECK ls_monitor-kunwe IN lr_kunwe.

      SELECT SINGLE name1
        FROM kna1
        INTO ls_monitor-kunwe_name1
        WHERE kunnr = ls_monitor-kunwe.
      IF sy-subrc <> 0.
        CLEAR ls_monitor-kunwe_name1.
      ENDIF.

      "
      " Pedido cliente
      "
      SELECT SINGLE *
        FROM vbkd
        INTO @DATA(ls_vbkd)
        WHERE vbeln = @<fs_vbap>-vbap-vbeln AND
              posnr = @<fs_vbap>-vbap-posnr.
      IF sy-subrc <> 0.
        SELECT SINGLE *
          FROM vbkd
          INTO CORRESPONDING FIELDS OF ls_vbkd
          WHERE vbeln = <fs_vbap>-vbap-vbeln AND
                posnr = '000000'.
      ENDIF.
      IF sy-subrc = 0.
        ls_monitor-bstkd = ls_vbkd-bstkd.
      ENDIF.

      CLEAR ls_monitor-gbsta.
      SELECT SINGLE *
        FROM vbup
        INTO @DATA(wl_vbup)
        WHERE vbeln = @ls_monitor-vbeln AND
              posnr = @ls_monitor-posnr.
      IF sy-subrc = 0.
        ls_monitor-gbsta = wl_vbup-gbsta.
      ENDIF.
      CHECK ls_monitor-gbsta IN lr_gbsta.


      CLEAR ls_monitor-mstae.
      CLEAR ls_monitor-mstav.
      CLEAR ls_monitor-vmsta.
      CLEAR ls_monitor-desc_status_mat.

      APPEND ls_monitor TO tp_monitor.
    ENDLOOP.

    IF tp_monitor IS NOT INITIAL.
      SELECT *
        INTO TABLE @DATA(lt_mara_final)
        FROM mara
        FOR ALL ENTRIES IN @tp_monitor
        WHERE matnr = @tp_monitor-matnr_final.
    ENDIF.

    LOOP AT tp_monitor ASSIGNING FIELD-SYMBOL(<fs_dato_monitor>).
      READ TABLE lt_mara_final INTO DATA(ls_mara_final) WITH KEY matnr = <fs_dato_monitor>-matnr_final.
      IF sy-subrc = 0.
        <fs_dato_monitor>-mstae = ls_mara_final-mstae.
        <fs_dato_monitor>-mstav = ls_mara_final-mstav.
      ENDIF.

      IF <fs_dato_monitor>-mstae IS NOT INITIAL.
        SELECT SINGLE mtstb
          FROM t141t
          INTO <fs_dato_monitor>-desc_status_mat
          WHERE spras = sy-langu AND
                mmsta = <fs_dato_monitor>-mstae.
        IF sy-subrc <> 0.
          CLEAR <fs_dato_monitor>-desc_status_mat.
        ENDIF.
      ENDIF.
      IF <fs_dato_monitor>-desc_status_mat IS INITIAL AND <fs_dato_monitor>-mstav IS NOT INITIAL.
        SELECT SINGLE vmstb
          FROM tvmst
          INTO <fs_dato_monitor>-desc_status_mat
          WHERE spras = sy-langu AND
                vmsta = <fs_dato_monitor>-mstav.
        IF sy-subrc <> 0.
          CLEAR <fs_dato_monitor>-desc_status_mat.
        ENDIF.
      ENDIF.
      IF <fs_dato_monitor>-desc_status_mat IS INITIAL AND <fs_dato_monitor>-vmsta IS NOT INITIAL.
        SELECT SINGLE vmstb
          FROM tvmst
          INTO <fs_dato_monitor>-desc_status_mat
          WHERE spras = sy-langu AND
                vmsta = <fs_dato_monitor>-vmsta.
        IF sy-subrc <> 0.
          CLEAR <fs_dato_monitor>-desc_status_mat.
        ENDIF.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.
