
class ZCL_ARBCIS_INVOICE_DETAIL_OUT definition
  public
  inheriting from CL_ARBCIS_TRIGGER_OUTBOUND
  final
  create public .

public section.

  constants GC_I type CHAR01 value 'I' ##NO_TEXT.
  data GV_LANG type SPRAS_ISO value 'EN' ##NO_TEXT.

  methods PROCESS
    importing
      value(IS_NAST) type NAST
      value(IS_MESSAGE_HEADER) type ARBCIS_BUS_DOC_MSG_HDR
      !IS_SO_HISTORY type ARBCIS_SO_VERS optional
    exporting
      !E_MESSAGE type ARBCIS_INVC_REQ_MSG
      !ET_MESSAGE type BAPIRETTAB
      !EV_RETURN_CODE type SY-SUBRC .

  methods IF_ARBCIS_TRIGGER_OUTBOUND~PROCESS
    redefinition .
protected section.
private section.

  types:
    TT_TAXCAT TYPE STANDARD TABLE OF arbcis_taxcat .

  constants GC_E type CHAR01 value 'E' ##NO_TEXT.
  constants GC_ERROR type I value '996' ##NO_TEXT.
  data GV_DOC type VBELN .
  data GT_LOG type ARBCIS_LONG_TEXT_T .
  data GO_BADI type ref to ARBCIS_INVOICE_REQUEST_OUT .
  constants GC_MSGID type CHAR20 value 'ARBCIS_MESSAGE' ##NO_TEXT.
  data MS_NAST type NAST .

  methods PROCESS_INVOICE
    importing
      !I_OBJECT_KEY type ARBCIS_OBJECT_KEY
    exporting
      !E_INVOICE_HEADER type VBDKR
      !E_INVOICE_ITEMS type TBL_VBDPR
      !E_CUSTOMER_SALES_DATA type KNVV
      !E_TAXDATA type KOMVD_T
      !E_ITEM_TAXDATA type KOMV_TAB
    raising
      CX_ARBCIS_APPL .
  methods MAP_INVOICE_HEADER
    importing
      !I_INVOICE_HEADER type VBDKR
      !I_CUSTOMER_SALES_DATA type KNVV
      !I_TAXDATA type KOMVD_T
      !I_COMMENTS type ARBCIS_ARIBA_COMMENT_TAB
    exporting
      !E_INVOICE_HEADER type ARBCIS_INVC_REQ_INVC
      !E_CREDIT_MEMO_IND type ABAP_BOOL
    raising
      CX_ARBCIS_APPL .
  methods MAP_INVOICE_ORDER
    importing
      !I_INVOICE_HEADER type VBDKR
      !I_INVOICE_ITEMS type TBL_VBDPR
      !I_TAXDATA type KOMVD_T
      !I_CREDIT_MEMO_IND type ABAP_BOOL
      !I_COMMENTS type ARBCIS_ARIBA_COMMENT_TAB
      !I_ITEM_TAXDATA type KOMV_TAB
    exporting
      !E_INVOICE type ARBCIS_INVC_REQ_INVC
    raising
      CX_ARBCIS_APPL .
  methods MAP_MESSAGE
    importing
      !I_MESSAGEHEADER type ARBCIS_BUS_DOC_MSG_HDR
      !I_INVOICE_HEADER type VBDKR
      !I_INVOICE_ITEMS type TBL_VBDPR
      !I_TAXDATA type KOMVD_T
      !I_CUSTOMER_SALES_DATA type KNVV
      !I_ITEM_TAXDATA type KOMV_TAB
    exporting
      !E_MESSAGE type ARBCIS_INVC_REQ_MSG
    raising
      CX_ARBCIS_APPL .
  methods FILL_APP_LOG .
  methods UPDATE_LOG
    importing
      !IS_LOG type ARBCIS_LONG_TEXT .
  methods CHECK_BILLING_DOC_RELEVANCE
    importing
      !I_INVOICE_HEADER type VBDKR
    raising
      CX_ARBCIS_APPL .
  methods FETCH_TEXTS
    importing
      !I_INVOICE_HEADER type VBDKR
      !I_INVOICE_ITEMS type TBL_VBDPR
    exporting
      !ET_COMMENTS type ARBCIS_ARIBA_COMMENT_TAB .
  methods SAVE_DOCUMENT_VERSION
    importing
      !I_INPUT type ARBCIS_INVC_REQ_MSG
      !I_VBELN type VBELN .
  methods MAP_HEADER_TAX
    importing
      !I_INVOICE_HEADER type VBDKR
      !I_TAXDATA type KOMVD_T
      !I_CREDIT_MEMO_IND type ABAP_BOOL
      !I_INVOICE_ITEM type ARBCIS_INVC_REQ_INVC
      !IT_KOMV type KOMV_TAB
      !IT_TAXCAT type TT_TAXCAT
      !IT_PRODTAX type ARBCIS_PRODUCT_TAX_TAB
      !IT_CHARGES type ARBCIS_CHARGES_TAB
    exporting
      !E_INVOICE type ARBCIS_INVC_REQ_INVC .
  methods GET_PARTNER_VATID
    importing
      !IV_PARTNER type KUNNR
      !IV_COUNTRY type LAND1 optional
    exporting
      !EV_VAT_ID type STCEG .
  methods GET_BANK_DETAILS
    importing
      !IS_INVOICE_HEADER type VBDKR
    exporting
      !ET_BANKDATA type ARBCIS_BANK_TAB
    raising
      CX_ARBCIS_APPL .
  methods MAP_SHIPMENT_AMOUNT
    importing
      !IT_KOMV type KOMV_TAB
      !IV_CURRENCY_CODE type ARBCIS_CURRENCY_CODE
      !IV_CREDIT_MEMO_IND type ABAP_BOOL
    exporting
      !EV_SHIPMENTAMOUNT type KWERT
    changing
      !CT_CHARGES type ARBCIS_CHARGES_TAB .
  methods SPECIAL_HANDLING_CHARGES
    importing
      !IT_KOMV type KOMV_TAB
      !IV_CURRENCY_CODE type ARBCIS_CURRENCY_CODE
      !IV_CREDIT_MEMO_IND type ABAP_BOOL
    exporting
      !EV_SPECIALHANDLINGCHARGES type KWERT
    changing
      !CT_CHARGES type ARBCIS_CHARGES_TAB .
  methods MAP_TAX_DETAILS
    importing
      !IT_KOMV type KOMV_TAB
      !I_CREDIT_MEMO_IND type ABAP_BOOL
      !IV_CURRENCY_CODE type ARBCIS_CURRENCY_CODE
      !IS_INVOICE_HEADER type VBDKR
      !IT_TAXCAT type TT_TAXCAT
    exporting
      !ET_PRODTAX type ARBCIS_PRODUCT_TAX_TAB
    changing
      !CS_PRICE type ARBCIS_INVC_REQ_INVC_ITM_PR .
endclass. "ZCL_ARBCIS_INVOICE_DETAIL_OUT definition
class ZCL_ARBCIS_INVOICE_DETAIL_OUT implementation.
METHOD CHECK_BILLING_DOC_RELEVANCE.
*-----------------------------------------------------------------------------*
* This method checks if the SD billing document is relevant to be sent to AN.
* The following invoices are currently supported:
* VBTYP: M - invoice, N - IV cancellation, O - credit memo, S - CR cancellation, P - debit memo
* FKTYP: A - order related, L - delivery related
* RFBSK: if relevant for accounting: C - relevant, E - relevant canceled
* POSAR: space - standard item
*-----------------------------------------------------------------------------*
   data:
     lt_vbrp       type table of vbrp,
     lv_rfbsk      type rfbsk,
     lv_message_v1 type symsgv,
     lv_message_v2 type symsgv.

  CONSTANTS:
     lc_invoice             TYPE vbtyp VALUE 'M',
     lc_iv_cancellation     TYPE vbtyp VALUE 'N',
     lc_credit_memo         TYPE vbtyp VALUE 'O',
     lc_cr_cancellation     TYPE vbtyp VALUE 'S',
     lc_order_related       TYPE fktyp VALUE 'A',
     lc_delivery_related    TYPE fktyp VALUE 'L',
     lc_relevant            TYPE rfbsk VALUE 'C',
     lc_relevant_canceled   TYPE rfbsk VALUE 'E'.

  FIELD-SYMBOLS:
    <fs_vbrp>     TYPE vbrp.

* 1) Check on VBTYP (document category)------------------------------------
  IF ( i_invoice_header-vbtyp NE lc_invoice AND
       i_invoice_header-vbtyp NE lc_iv_cancellation AND
       i_invoice_header-vbtyp NE lc_credit_memo AND
       i_invoice_header-vbtyp NE lc_cr_cancellation ).

    lv_message_v1 = i_invoice_header-vbeln.
    lv_message_v2 = i_invoice_header-vbtyp.
    RAISE EXCEPTION TYPE cx_arbcis_appl
                  EXPORTING message_id     = 'ARBCIS_MESSAGE'
                            message_number = '030'
                            message_v1     = lv_message_v1
                            message_v2     = lv_message_v2.
  ENDIF.

* 2) Check on FKTYP (billing category)------------------------------------
  IF ( i_invoice_header-fktyp NE lc_order_related AND
       i_invoice_header-fktyp NE lc_delivery_related ).
    lv_message_v1 = i_invoice_header-vbeln.
    lv_message_v2 = i_invoice_header-fktyp.
    RAISE EXCEPTION TYPE cx_arbcis_appl
                  EXPORTING message_id     = 'ARBCIS_MESSAGE'
                            message_number = '031'
                            message_v1     = lv_message_v1
                            message_v2     = lv_message_v2.
  ENDIF.

* 3) Check on RFBSK (accounting status)------------------------------------
  SELECT SINGLE rfbsk FROM vbrk INTO lv_rfbsk
    WHERE vbeln = i_invoice_header-vbeln.

  IF sy-subrc NE 0.
    lv_message_v1 = i_invoice_header-vbeln.
    RAISE EXCEPTION TYPE cx_arbcis_appl
              EXPORTING message_id     = 'ARBCIS_MESSAGE'
                        message_number = '032'
                        message_v1     = lv_message_v1.
  ENDIF.

  IF ( lv_rfbsk NE lc_relevant AND
       lv_rfbsk NE lc_relevant_canceled ).
    lv_message_v1 = i_invoice_header-vbeln.
    RAISE EXCEPTION TYPE cx_arbcis_appl
              EXPORTING message_id     = 'ARBCIS_MESSAGE'
                        message_number = '033'
                        message_v1     = lv_message_v1.
  ENDIF.

* 4) Check on item POSAR ------------------------------------
  SELECT * FROM vbrp INTO TABLE lt_vbrp
    WHERE vbeln = i_invoice_header-vbeln.

  IF sy-subrc NE 0.
    lv_message_v1 = i_invoice_header-vbeln.
    RAISE EXCEPTION TYPE cx_arbcis_appl
              EXPORTING message_id     = 'ARBCIS_MESSAGE'
                        message_number = '032'
                        message_v1     = lv_message_v1.
  ENDIF.

" START evitar error de posicion no estandar - SEIDOR 13.03.2024
*  LOOP AT lt_vbrp ASSIGNING <fs_vbrp>.
*    IF <fs_vbrp>-posar IS NOT INITIAL. " item is not a standard item, stop processing
*      lv_message_v1 = i_invoice_header-vbeln.
*      lv_message_v2 = <fs_vbrp>-posnr.
*      RAISE EXCEPTION TYPE cx_arbcis_appl
*          EXPORTING message_id     = 'ARBCIS_MESSAGE'
*                    message_number = '034'
*                    message_v1     = lv_message_v1
*                    message_v2     = lv_message_v2.
*    ENDIF.
*  ENDLOOP.
" END evitar error de posicion no estandar - SEIDOR 13.03.2024

ENDMETHOD.
METHOD FETCH_TEXTS.
*--------------------------------------------------------*
* Declaration
*--------------------------------------------------------*
  DATA:
       lo_comments     TYPE REF TO cl_arbcis_text_processing,
       ls_item         TYPE LINE OF tbl_vbdpr,
       ls_objkey       TYPE char30,
       lt_objkey       TYPE arbcis_objkey_t,
       lt_comments     TYPE arbcis_ariba_comment_tab.

  CREATE OBJECT lo_comments.
* Prepare Object Key.
** Add Order in internal format.
  ls_objkey = i_invoice_header-vbeln.
  APPEND ls_objkey TO lt_objkey[].
  CLEAR ls_objkey.
  LOOP AT i_invoice_items INTO ls_item.
    CONCATENATE i_invoice_header-vbeln ls_item-posnr INTO ls_objkey.
    APPEND ls_objkey TO lt_objkey[].
    CLEAR ls_objkey.
  ENDLOOP.
** Add Items as OrderItem Combination for 15 characters.
  CALL METHOD lo_comments->process_comments
    EXPORTING
      iv_doctype  = 'InvoiceRequest'
      it_objkey   = lt_objkey[]
      iv_mode     = 'O'
      iv_solution = 'AN'
    CHANGING
      ct_comment  = et_comments[].
ENDMETHOD.
METHOD FILL_APP_LOG.
  DATA: lo_log TYPE REF TO cl_arbcis_return_aplog_create,
      lv_ext TYPE balnrext.
  CREATE OBJECT lo_log.
*Map Billing Number to extnumber
  lv_ext = gv_doc.
  CALL METHOD lo_log->create_log_message
    EXPORTING
      iv_extnumber    = lv_ext
      iv_solution     = 'AN'
      iv_documenttype = 'InvoiceRequest'
      it_message      = gt_log[].

ENDMETHOD.
method GET_BANK_DETAILS.
*CI-1606{
  TYPES: BEGIN OF lty_t005,
         land1    TYPE  land1,
         bnkey    TYPE  bnkey,
         END OF lty_t005,

         BEGIN OF lty_t012k,
         bukrs    TYPE  bukrs,
         hbkid    TYPE  hbkid,
         hktid    TYPE  hktid,
         bankn    TYPE  bankn,
         bkont    TYPE  bkont,
         waers    TYPE  waers,
         END OF lty_t012k.

***Local Data Declarations***
  DATA: lt_t012     TYPE STANDARD TABLE OF t012,
        lt_t012k    TYPE STANDARD TABLE of lty_t012k,
        lt_t005     TYPE STANDARD TABLE OF lty_t005,
        lv_bankl    TYPE bankl,
        lv_iban     TYPE iban,
        ls_bnka     TYPE bnka,
        lv_iso_code TYPE intca,
        ls_bankdata TYPE arbcis_bank,
        ls_log      TYPE arbcis_long_text,
        lt_log      TYPE arbcis_long_text_t,
        lv_adrnr    TYPE adrnr,
        ls_vbadr    TYPE vbadr.

  FIELD-SYMBOLS:
        <fs_t012>   TYPE t012,
        <fs_t012k>  TYPE lty_t012k,
        <fs_t005>   TYPE lty_t005.

  CONSTANTS:
        lc_bankkey  TYPE CHAR1 VALUE '2'.

  REFRESH: lt_t012,lt_t012k,lt_t005.

**Get house bank details to populate in proxy
  SELECT * FROM t012
           INTO TABLE lt_t012
           WHERE bukrs = is_invoice_header-bukrs.
  IF lt_t012[] IS NOT INITIAL.
    SELECT bukrs hbkid hktid bankn bkont waers
             FROM t012k
             INTO TABLE lt_t012k
             FOR ALL ENTRIES IN lt_t012
             WHERE bukrs = lt_t012-bukrs
             AND   hbkid = lt_t012-hbkid
             ORDER BY PRIMARY KEY.
    IF sy-subrc = 0.
    SELECT land1 bnkey FROM t005
             INTO TABLE lt_t005
             FOR ALL ENTRIES IN lt_t012
             WHERE land1 = lt_t012-banks.
    IF sy-subrc = 0.
    SORT lt_t005 BY land1 .
    ENDIF.
    CLEAR: lv_adrnr.
    SELECT SINGLE adrnr FROM tvko
             INTO lv_adrnr
             WHERE vkorg = is_invoice_header-vkorg.
      IF sy-subrc = 0 AND lv_adrnr IS NOT INITIAL.
**Account name is sales organisation contact name
      CLEAR:ls_vbadr.
            CALL FUNCTION 'SD_ADDRESS_GET'
              EXPORTING
                fif_address_number      = lv_adrnr
                fif_address_type        = '1'
                fif_langu               = ms_nast-spras
              IMPORTING
                fes_address             = ls_vbadr
              EXCEPTIONS
                address_not_found       = 1
                address_type_not_exists = 2
                no_person_number        = 3
                others                  = 4.
      ENDIF.
    ENDIF.
   ENDIF.

  LOOP AT lt_t012 ASSIGNING <fs_t012>.
    CLEAR:lv_bankl.
*for normal bank bankkey
    lv_bankl = <fs_t012>-bankl.
*Get first bank account w.r.t document currency
    UNASSIGN <fs_t012k>.
    READ TABLE lt_t012k ASSIGNING <fs_t012k>
                        WITH KEY bukrs = <fs_t012>-bukrs
                                 hbkid = <fs_t012>-hbkid
                                 waers = is_invoice_header-waers.

    IF sy-subrc = 0 AND <fs_t012k> IS ASSIGNED.
      UNASSIGN <fs_t005>.
*If bankkey is 2, then bank key is overwritten
      READ TABLE lt_t005 ASSIGNING <fs_t005>
                          WITH KEY land1 = <fs_t012>-banks.
      IF sy-subrc = 0 AND <fs_t005>-bnkey = lc_bankkey. "obsolete setting
        lv_bankl = <fs_t012k>-bankn.
      ENDIF.
    ELSE.
*If no bank account in document currency then get first bank account
      UNASSIGN <fs_t012k>.
      READ TABLE lt_t012k ASSIGNING <fs_t012k>
                          WITH KEY bukrs = <fs_t012>-bukrs
                                   hbkid = <fs_t012>-hbkid.
      IF sy-subrc = 0 AND <fs_t012k> IS ASSIGNED.
        UNASSIGN <fs_t005>.
*If bankkey is 2, then bank key is overwritten
        READ TABLE lt_t005 ASSIGNING <fs_t005>
                           WITH KEY land1 = <fs_t012>-banks.
        IF sy-subrc = 0 AND <fs_t005>-bnkey = lc_bankkey. "obsolete setting
          lv_bankl = <fs_t012k>-bankn.
        ENDIF.
      ENDIF.
    ENDIF.
*Check bank address
    IF lv_bankl IS NOT INITIAL.
      CALL FUNCTION 'CHECK_BEGIN_BANK_ADDRESS'
        EXPORTING
          bank_country = <fs_t012>-banks
          bank_number  = lv_bankl
        EXCEPTIONS
          not_valid    = 1.
      IF sy-subrc  NE  0.
        IF sy-msgid IS NOT INITIAL.
          ls_log-message_id     = sy-msgid.
          ls_log-message_number = sy-msgno.
          ls_log-message_type   = sy-msgty.
          ls_log-message_v1     = sy-msgv1.
          ls_log-message_v2     = sy-msgv2.
          ls_log-message_v3     = sy-msgv3.
          ls_log-message_v4     = sy-msgv4.
        ELSE.
          ls_log-message_id     = gc_msgid.
          ls_log-message_number = '039'.
          ls_log-message_type   = gc_e.
          ls_log-message_v1     = <fs_t012>-hbkid.
          ls_log-message_v2     = <fs_t012>-banks.
          ls_log-message_v3     = lv_bankl.
        ENDIF.
        update_log(
           EXPORTING
             is_log = ls_log ).
      ELSE.
*Using bank account no, get bank account details.
        CLEAR: ls_bnka.
        CALL FUNCTION 'READ_BANK_ADDRESS'
          EXPORTING
            bank_country = <fs_t012>-banks
            bank_number  = lv_bankl
          IMPORTING
            bnka_wa      = ls_bnka
          EXCEPTIONS
            not_found    = 1
            others       = 2.
        IF sy-subrc <> 0.
          ls_log-message_id     = gc_msgid.
          ls_log-message_number = '039'.
          ls_log-message_type   = gc_e.
          ls_log-message_v1     = <fs_t012>-hbkid.
          ls_log-message_v2     = <fs_t012>-banks.
          ls_log-message_v3     = lv_bankl.
          update_log(
          EXPORTING
            is_log = ls_log ).
        ELSE.
*Get bank country code in ISO format
          CLEAR:lv_iso_code.
          IF <fs_t012>-banks IS NOT INITIAL.
            CALL FUNCTION 'COUNTRY_CODE_SAP_TO_ISO'
              EXPORTING
                sap_code  = <fs_t012>-banks
              IMPORTING
                iso_code  = lv_iso_code
              EXCEPTIONS
                not_found = 01.
            IF lv_iso_code IS NOT INITIAL.
              <fs_t012>-banks = lv_iso_code.
            ELSEIF sy-subrc IS NOT INITIAL.
              ls_log-message_id     = gc_msgid.
              ls_log-message_number = '040'.
              ls_log-message_type   = gc_e.
              ls_log-message_v1     = <fs_t012>-banks.
              update_log(
              EXPORTING
                is_log = ls_log ).
            ENDIF.
          ENDIF.
**Get International bank account number
          CLEAR:lv_iban.
            CALL FUNCTION 'READ_IBAN_FROM_DB'
              EXPORTING
                i_banks = <fs_t012>-banks
                i_bankl = <fs_t012>-bankl
                i_bankn = <fs_t012k>-bankn
                i_bkont = <fs_t012k>-bkont
              IMPORTING
                e_iban  = lv_iban.

          IF lv_iban IS NOT INITIAL.
            ls_bankdata-bank_name         = ls_bnka-banka.
            ls_bankdata-branch_name       = ls_bnka-brnch.
            ls_bankdata-bank_routing_id   = ls_bnka-swift.
            ls_bankdata-bank_country_code = <fs_t012>-banks.
            ls_bankdata-account_id        = lv_iban.
            ls_bankdata-iban_id           = lv_iban.
            ls_bankdata-account_name      = ls_vbadr-name1.
          ELSE.
            ls_bankdata-bank_name         = ls_bnka-banka.
            ls_bankdata-branch_name       = ls_bnka-brnch.
            ls_bankdata-bank_routing_id   = <fs_t012>-bankl.
            ls_bankdata-bank_country_code = <fs_t012>-banks.
            ls_bankdata-account_id        = <fs_t012k>-bankn.
            ls_bankdata-account_name      = ls_vbadr-name1.
          ENDIF.

**Fill all bank details to table
          APPEND ls_bankdata TO et_bankdata.
          CLEAR: ls_bankdata.
        ENDIF.
      ENDIF.
    ELSE.
      ls_log-message_id     = gc_msgid.
      ls_log-message_number = '039'.
      ls_log-message_type   =  gc_e.
      ls_log-message_v1     = <fs_t012>-hbkid.
      ls_log-message_v2     = <fs_t012>-banks.
      ls_log-message_v3     = lv_bankl.
      update_log(
      EXPORTING
        is_log = ls_log ).
    ENDIF.
  ENDLOOP.
***Raising exception incase of error message
   IF ls_log IS NOT INITIAL.
    DELETE TABLE gt_log[] FROM ls_log.
    RAISE EXCEPTION TYPE cx_arbcis_appl
                       EXPORTING message_id     = gc_msgid
                                 message_type   = gc_e
                                 message_number = ls_log-message_number
                                 message_v1     = ls_log-message_v1
                                 message_v2     = ls_log-message_v2
                                 message_v3     = ls_log-message_v3
                                 message_v4     = ls_log-message_v4.
   ENDIF.
*}CI-1606
endmethod.
method GET_PARTNER_VATID.
*CI:1606{
***Local Data declarations***
  DATA: lv_vat_id TYPE stceg.

  CLEAR: lv_vat_id.
*IG-24500{
*Get Vat Registration no. from customer master w.r.t Sold to country
  IF iv_country IS NOT INITIAL.
    SELECT SINGLE STCEG FROM KNAS
                        INTO lv_vat_id
                        WHERE kunnr = iv_partner
                        AND   LAND1 = iv_country.
  ENDIF.
*If VATID w.r.t Sold to country not found,
*Get Vat Registration no. from customer master
  IF lv_vat_id IS INITIAL.
*}IG-24500
    SELECT SINGLE stceg FROM kna1
                      INTO lv_vat_id
                      WHERE kunnr = iv_partner.
  ENDIF.
  IF lv_vat_id IS NOT INITIAL.
    ev_vat_id = lv_vat_id.
  ENDIF.
*}CI-1606
endmethod.
METHOD IF_ARBCIS_TRIGGER_OUTBOUND~PROCESS.
*----------------------------------------------------*
*-- Declaration for structure
*----------------------------------------------------*
  DATA:
        ls_invoice_header         TYPE vbdkr,
        ls_invoice_items          TYPE tbl_vbdpr,
        ls_customer_sales_data    TYPE knvv,
        ls_message                TYPE arbcis_invc_req_msg,
        ls_taxdata                TYPE komvd_t,
        ls_item_taxdata           TYPE komv_tab,
        ls_inv_req                TYPE arbcis_invoice_request,
        ls_ret_msg                TYPE bapiret2,
        ls_log                    TYPE arbcis_long_text,
        lt_badi_log               TYPE arbcis_long_text_t,
*-----------------------------------------------------*
*-- declaration for Local variables
*-----------------------------------------------------*
        lv_objectkey              TYPE arbcis_object_key,
        lv_msg                    TYPE string,
        lv_skip_oc                TYPE char01,
        lv_send                   TYPE xfeld,
        lv_skip                   TYPE char01.
*-----------------------------------------------------*
*-- Objects
*-----------------------------------------------------*
  DATA: lo_req      TYPE REF TO co_arbcis_invoice_request_out,
        lo_fault    TYPE REF TO cx_ai_system_fault,
        lo_exc      TYPE REF TO cx_arbcis_appl.

*Initialise BADI Object
  GET BADI go_badi.

*-- Assign NAST Objkey to global variable for logging.
  gv_doc = is_nast-objky.
* Fetch Order Data
  lv_objectkey = is_nast-objky.
  TRY .
      process_invoice(
          EXPORTING
            i_object_key          = lv_objectkey
          IMPORTING
            e_invoice_header      = ls_invoice_header
            e_invoice_items       = ls_invoice_items
            e_customer_sales_data = ls_customer_sales_data
            e_taxdata             = ls_taxdata
            e_item_taxdata        = ls_item_taxdata ).

*Check Order Relevance and Trigger Conditions
      check_billing_doc_relevance(
      EXPORTING
        i_invoice_header = ls_invoice_header ).

* Check and Re-assign default Language Key.
      IF is_nast-spras IS NOT INITIAL.
        TRY.
            cl_gdt_conversion=>language_code_outbound(
            EXPORTING
              im_value = is_nast-spras
            IMPORTING
              ex_value = gv_lang ).
          CATCH cx_gdt_conversion.
            IF gv_lang IS INITIAL.
              gv_lang = 'en'.
            ENDIF.
        ENDTRY.
      ENDIF.

*CI-1606{
*Sales org contact name needed w.r.t nast language key
      ms_nast = is_nast.
*}CI-1606
* Map Proxy Structure
      map_message(
              EXPORTING
                i_messageheader       = is_message_header
                i_invoice_header      = ls_invoice_header
                i_invoice_items       = ls_invoice_items
                i_taxdata             = ls_taxdata
                i_customer_sales_data = ls_customer_sales_data
                i_item_taxdata        = ls_item_taxdata
              IMPORTING
                e_message             = ls_message ).
    CATCH cx_arbcis_appl INTO lo_exc.
      lo_exc->get_message(
        RECEIVING
          rs_message = ls_ret_msg ).
* Raise exception for Message Log.
* Set error flag.
      IF ls_ret_msg-type = gc_e.
        ev_return_code = gc_error.
      ELSE.
        CLEAR ev_return_code.
      ENDIF.
      APPEND ls_ret_msg TO et_message[].
      ls_log-message_id = ls_ret_msg-id.
      ls_log-message_type = ls_ret_msg-type.
      ls_log-message_number = ls_ret_msg-number.
      ls_log-message_v1 = ls_ret_msg-message_v1.
      ls_log-message_v2 = ls_ret_msg-message_v2.
      ls_log-message_v3 = ls_ret_msg-message_v3.
      ls_log-message_v4 = ls_ret_msg-message_v4.
      update_log(
      EXPORTING
        is_log = ls_log ).
      fill_app_log( ).
      RETURN.
  ENDTRY.

  IF ls_message IS NOT INITIAL.

*Call Pre-Processing BADI
    CALL BADI go_badi->invoice_preprocess
      EXPORTING
        i_invoice_header = ls_invoice_header
        i_invoice_item   = ls_invoice_items
      CHANGING
        c_skip           = lv_skip
        c_message        = ls_message
        c_log            = lt_badi_log[].

    IF lt_badi_log[] IS NOT INITIAL.
      APPEND LINES OF lt_badi_log TO gt_log[].
    ENDIF.

*Assign message to invoice proxy structure
    ls_inv_req-invoice_request = ls_message.

    IF lv_skip IS INITIAL.
* Call Proxy.
      TRY.
          CREATE OBJECT lo_req.
          lo_req->invoice_request_out(
              EXPORTING
                output = ls_inv_req ).
        CATCH cx_ai_system_fault INTO lo_fault.
          lv_msg = lo_fault->if_message~get_text( ).
          ev_return_code = gc_error.
          ls_ret_msg-type = gc_e.
          ls_ret_msg-id = 'ARBCIS_MESSAGE'.
          ls_ret_msg-number = '007'.
          ls_ret_msg-message_v1 = lv_msg.
          APPEND ls_ret_msg TO et_message[].
* Add to log table.
          ls_log-comment = lv_msg.
          update_log(
          EXPORTING
            is_log = ls_log ).
          fill_app_log( ).
          RETURN.
      ENDTRY.
    ENDIF.
    CLEAR ls_log.
    CONCATENATE text-001
                ls_inv_req-invoice_request-invoice-id-content
                text-002
                text-003
                is_message_header-id-content INTO ls_log-comment SEPARATED BY space.
    update_log(
    EXPORTING
      is_log = ls_log ).

*Call Save document version
    save_document_version(
    EXPORTING
      i_input = ls_message
      i_vbeln = gv_doc ).

*Call Post Processing BADI
    CALL BADI go_badi->invoice_postprocess
      EXPORTING
        i_invoice_header = ls_invoice_header
        i_invoice_item   = ls_invoice_items
        i_message        = ls_message
      CHANGING
        c_log            = lt_badi_log[].
  ENDIF.
* Update Application Logs.
  fill_app_log( ).
** Return back to calling program.
  CLEAR ls_ret_msg.
  ls_ret_msg-type = gc_i.
  ls_ret_msg-id = 'ARBCIS_MESSAGE'.
  ls_ret_msg-number = '021'.
  ls_ret_msg-message_v1 = is_message_header-uuid-content.
  APPEND ls_ret_msg TO et_message[].
  CLEAR ev_return_code.
ENDMETHOD.
METHOD MAP_HEADER_TAX.
*---------------------------------------------*
*Declaration for Structure
*---------------------------------------------*
  DATA:
        ls_item_tmp            TYPE arbcis_invc_req_invc_itm_tab,
        ls_price               TYPE arbcis_invc_req_invc_itm_pr, "CI-1766
        ls_prodtax_tmp         TYPE LINE OF  arbcis_product_tax_tab, "CI-1766
*---------------------------------------------*
*Declaration for Local variables
*---------------------------------------------*
        lv_netwr_header        TYPE netwr,
        lv_currency_code       TYPE tcurc-isocd,
*CI-1766{
        lv_shipmentamount      TYPE kwert,
        lv_specialhandlingcharges TYPE kwert,
        lv_taxrate             TYPE msatz_f05l,
        lv_taxcat              TYPE arbcis_taxcategory,
        lv_tax_rate_decimals   TYPE i,
*}CI-1766
*---------------------------------------------*
*Declaration for Internal Table
*---------------------------------------------*
        lt_komv                TYPE komv_tab,
*CI-1766{
        lt_taxcat              TYPE STANDARD TABLE OF arbcis_taxcat,
        lt_komvd               TYPE komvd_t,
        lt_prodtax             TYPE arbcis_product_tax_tab,
        lt_prodtax_tmp         TYPE arbcis_product_tax_tab,
        lt_charges             TYPE arbcis_charges_tab,
*}CI-1766
*---------------------------------------------*
*Declaration for work area
*---------------------------------------------*
        lw_komvd               TYPE LINE OF komvd_t,
        lw_prodtax             TYPE LINE OF arbcis_product_tax_tab,
        lw_item_tmp            TYPE LINE OF arbcis_invc_req_invc_itm_tab,
        lw_item_prodtax        TYPE LINE OF arbcis_product_tax_tab,
        lw_taxdata             TYPE LINE OF komvd_t,
        lw_komv                TYPE LINE OF komv_tab,
        ls_charges             TYPE LINE OF arbcis_charges_tab. "CI-1766

* currency code
  TRY.
      CALL METHOD cl_gdt_conversion=>currency_code_outbound
        EXPORTING
          im_value = i_invoice_header-waerk
        IMPORTING
          ex_value = lv_currency_code.
    CATCH cx_gdt_conversion.
      IF lv_currency_code IS INITIAL.
        lv_currency_code = i_invoice_header-waerk.
      ENDIF.
  ENDTRY.
* -- Header Level Gross Amount and Net Amount
  TRY.
      CALL METHOD cl_gdt_conversion=>amount_outbound
        EXPORTING
          im_value         = i_invoice_header-netwr
          im_currency_code = i_invoice_header-waerk
        IMPORTING
          ex_value         = lv_netwr_header.
    CATCH cx_gdt_conversion .
  ENDTRY.
  IF i_credit_memo_ind = abap_true.
    IF lv_netwr_header GT 0.
      lv_netwr_header = lv_netwr_header * -1.
    ENDIF.
  ENDIF.
**CI-1766{
  lt_prodtax_tmp[] = it_prodtax[].
  IF i_invoice_item-item IS NOT INITIAL.

* Sum-up tax details in case tax rate and tax category are same for header/summary
    SORT lt_prodtax_tmp BY rate-decimal_value type_code-list_id.

    LOOP AT lt_prodtax_tmp INTO ls_prodtax_tmp.
      IF  ls_prodtax_tmp-rate-decimal_value = lw_prodtax-rate-decimal_value
      AND ls_prodtax_tmp-type_code-list_id  = lw_prodtax-type_code-list_id.
        CONTINUE.
      ELSE.
        LOOP AT it_prodtax INTO lw_prodtax WHERE rate-decimal_value = ls_prodtax_tmp-rate-decimal_value
                                                    AND type_code-list_id  = ls_prodtax_tmp-type_code-list_id.

          lw_item_prodtax-amount-content    = lw_item_prodtax-amount-content + lw_prodtax-amount-content.
          lw_item_prodtax-amount-currency_code = lv_currency_code.
          lw_item_prodtax-base_amount-content  = lw_item_prodtax-base_amount-content + lw_prodtax-base_amount-content.
          lw_item_prodtax-base_amount-currency_code = lv_currency_code.
          lw_item_prodtax-type_code-list_id = lw_prodtax-type_code-list_id.
          lw_item_prodtax-type_code-content = lw_prodtax-type_code-content.
          lw_item_prodtax-rate-decimal_value = lw_prodtax-rate-decimal_value.
        ENDLOOP.
*Build tax and base amount for Price node
* Tax Amount at each item level
        ls_price-tax_amount-content = ls_price-tax_amount-content + lw_item_prodtax-amount-content.
        ls_price-tax_amount-currency_code = lv_currency_code.

* Tax base amount
        ls_price-base_amount-content = lw_item_prodtax-base_amount-content.
        ls_price-base_amount-currency_code = lv_currency_code.

        APPEND lw_item_prodtax TO lt_prodtax.
        CLEAR: lw_item_prodtax.
      ENDIF.
    ENDLOOP.

    lt_komvd = i_taxdata.
    READ TABLE lt_komvd INTO  lw_komvd
                      WITH KEY koaid = 'B' "Price
                         kstat = ' '
                         kinak = ' '.
    IF sy-subrc = 0.
* Credit memo: only negative value
      IF i_credit_memo_ind = abap_true.
        IF lw_komvd-kwert GT 0.
          lw_komvd-kwert = lw_komvd-kwert * -1.
        ENDIF.
      ENDIF.
      ls_price-base_amount-content = lw_komvd-kwert.
      ls_price-base_amount-currency_code = lv_currency_code.
    ENDIF.

    CLEAR: ls_charges, lv_shipmentamount, lv_specialhandlingcharges.

    LOOP AT it_charges INTO ls_charges WHERE name-content = 'ShipmentAmount'.
      lv_shipmentamount = lv_shipmentamount + ls_charges-amount-content.
    ENDLOOP.
    IF lv_shipmentamount IS NOT INITIAL.
      ls_charges-amount-content = lv_shipmentamount.
      APPEND ls_charges TO lt_charges. CLEAR ls_charges.
    ENDIF.

    LOOP AT it_charges INTO ls_charges WHERE name-content = 'SpecialHandlingCharges'.
      lv_specialhandlingcharges = lv_specialhandlingcharges + ls_charges-amount-content.
    ENDLOOP.
    IF lv_specialhandlingcharges IS NOT INITIAL.
      ls_charges-amount-content = lv_specialhandlingcharges.
      APPEND ls_charges TO lt_charges.
      CLEAR ls_charges.
    ENDIF.

  ELSE.
    LOOP AT lt_komvd INTO lw_komvd WHERE kposn = '000000'.
      CALL METHOD me->map_tax_details
        EXPORTING
          it_komv           = it_komv
          it_taxcat         = it_taxcat
          i_credit_memo_ind = i_credit_memo_ind
          iv_currency_code  = lv_currency_code
          is_invoice_header = i_invoice_header
        IMPORTING
          et_prodtax        = lt_prodtax
        CHANGING
          cs_price          = ls_price.

*Shipment/Frieght charges
      CLEAR: lv_shipmentamount, lv_specialhandlingcharges.
      CALL METHOD me->map_shipment_amount
        EXPORTING
          it_komv           = it_komv
          iv_currency_code  = lv_currency_code
          iv_credit_memo_ind = i_credit_memo_ind
        IMPORTING
          ev_shipmentamount = lv_shipmentamount
        CHANGING
          ct_charges        = lt_charges.

*SpecialHandlingCharges
      CALL METHOD me->special_handling_charges
        EXPORTING
          it_komv                   = it_komv
          iv_currency_code          = lv_currency_code
          iv_credit_memo_ind        = i_credit_memo_ind
        IMPORTING
          ev_specialhandlingcharges = lv_specialhandlingcharges
        CHANGING
          ct_charges                = lt_charges.
    ENDLOOP.
  ENDIF.

* Tax Amount at header
  e_invoice-price-tax_amount-content = ls_price-tax_amount-content.
  e_invoice-price-tax_amount-currency_code = lv_currency_code.

* Tax BaseAmount at header
  e_invoice-price-base_amount-content = ls_price-base_amount-content.
  e_invoice-price-base_amount-currency_code = lv_currency_code.

*net amount (lv_netwr_item) already has charges
  e_invoice-price-net_amount-content =   lv_netwr_header + ls_price-tax_amount-content.
  e_invoice-price-net_amount-currency_code = lv_currency_code.
**Gross amount is equal to net amount since discount is not supported
  e_invoice-price-gross_amount-content = e_invoice-price-net_amount-content.
  e_invoice-price-gross_amount-currency_code = lv_currency_code.

  e_invoice-product_tax = lt_prodtax.
  e_invoice-price-charges = lt_charges.
*}CI-1766

  CLEAR: lt_prodtax[],ls_item_tmp.
  CLEAR: lw_prodtax,lw_taxdata,lw_prodtax,lw_item_tmp.
ENDMETHOD.
METHOD MAP_INVOICE_HEADER.
*-----------------------------------------------------------------*
*Declaration for Structure
*-----------------------------------------------------------------*
  DATA:
      ls_bapi_cc_detail       TYPE bapi0002_2,
      ls_bapi_cc_addrs        TYPE bapi0002_3,
      ls_bapi_return          TYPE bapireturn,
      ls_bapi_return1         TYPE bapireturn1,
      ls_companydata          TYPE bapikna106,
*----------------------------------------------------------------*
*Declaration for internal table
*----------------------------------------------------------------*
      ls_contact_person       TYPE arbcis_contact_person_tab,
      ls_telephone            TYPE arbcis_telephone_tab,
      ls_facsimile            TYPE arbcis_facsimile_tab,
      ls_address              TYPE arbcis_address1,
      ls_communication        TYPE arbcis_communication,
      lt_payment_terms        TYPE TABLE OF vtopis,
      lt_vbrk                 TYPE vbrk,
      ls_email                TYPE arbcis_email_tab,
      lt_comments             TYPE arbcis_ariba_comment_tab,
      lt_bankdata             TYPE arbcis_bank_tab, "CI-1606
*-----------------------------------------------------------------*
*Declaration for work area
*-----------------------------------------------------------------*
      lw_payment_terms        TYPE vtopis,
      lw_inv_payment_terms    TYPE arbcis_cash_discount_terms,
      lw_telephone            TYPE LINE OF arbcis_telephone_tab,
      lw_facsimile            TYPE LINE OF arbcis_facsimile_tab,
      lw_email                TYPE LINE OF arbcis_email_tab,
      lw_contact_person       TYPE LINE OF arbcis_contact_person_tab,
      lv_lines                TYPE i,
      lv_payload_id           TYPE arbcis_payload_id,
      lv_vat_id               TYPE stceg. "CI-1606
*------------------------------------------------------------------*
*Declaration for Constants
*------------------------------------------------------------------*
  DATA:
        lc_credit_memo        TYPE string VALUE 'CRM',
        lc_standard           TYPE string VALUE 'STD'.

*invoiceID
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = i_invoice_header-vbeln
    IMPORTING
      output = e_invoice_header-id-content.

*invoiceDate
  CALL METHOD cl_arbcis_common_util=>date_time_gmt
    EXPORTING
      i_date     = i_invoice_header-fkdat
    RECEIVING
      r_datetime = e_invoice_header-date_time-content.

*Purpose: Either 'standard' or 'lineLevelCreditMemo'
*VBTYP: O=Credit Memo, S=Credit Memo Cancellation
  IF i_invoice_header-vbtyp EQ 'O' OR
     i_invoice_header-vbtyp EQ 'S'.
    e_invoice_header-type_code = lc_credit_memo.
    e_credit_memo_ind = abap_true.
  ELSE.
    e_invoice_header-type_code = lc_standard.
    e_credit_memo_ind = abap_false.
  ENDIF.

*Operation: Either 'new' or 'delete' for a cancellation
* Depending on VBTYP: N=Invoice cancellation; S=Credit Memo cancellation
  IF i_invoice_header-vbtyp EQ 'N' OR
     i_invoice_header-vbtyp EQ 'S'.
*write logic to check against history table to confirm whether there is a invoice
    SELECT SINGLE * FROM vbrk INTO lt_vbrk
      WHERE vbeln = i_invoice_header-vbeln.
    IF sy-subrc EQ 0.
      e_invoice_header-cancellation_invoice_indicator = 'X'.
*Cancelled Document Payload ID
      SELECT SINGLE payload_id INTO lv_payload_id
        FROM arbcis_ivsd_vers
        WHERE vbeln = i_invoice_header-sfakn.
      IF sy-subrc EQ 0.
        e_invoice_header-document_reference-payload_id = lv_payload_id.
      ENDIF.
    ELSE.
      e_invoice_header-cancellation_invoice_indicator = ' '.
    ENDIF.
  ENDIF.

*-----------------------------------------------------------------------------*
*Invoice Partner - remitTo/from
*-----------------------------------------------------------------------------*
  CALL FUNCTION 'BAPI_COMPANYCODE_GETDETAIL'
    EXPORTING
      companycodeid       = i_invoice_header-bukrs
    IMPORTING
      companycode_detail  = ls_bapi_cc_detail
      companycode_address = ls_bapi_cc_addrs
      return              = ls_bapi_return.

*addressID: our account number at customer
  e_invoice_header-bill_from_party-internal_id-content = i_customer_sales_data-eikto.

*language code
  CALL METHOD cl_gdt_conversion=>language_code_outbound
    EXPORTING
      im_value = ls_bapi_cc_detail-langu
    IMPORTING
      ex_value = e_invoice_header-bill_from_party-address-organisation_form_of_address-name-language_code.

  e_invoice_header-bill_from_party-address-organisation_form_of_address-name-content = ls_bapi_cc_addrs-name.

*ContactPerson Postal Address
  ls_address-organisation_form_of_address-name-content = ls_bapi_cc_addrs-name.
  ls_address-physical_address-country_code = ls_bapi_cc_addrs-country.
  ls_address-physical_address-region_name = ls_bapi_cc_addrs-region.
  ls_address-physical_address-pobox_postal_code = ls_bapi_cc_addrs-postl_cod2.
  ls_address-physical_address-city_name = ls_bapi_cc_addrs-city.
  ls_address-physical_address-street_name = ls_bapi_cc_addrs-street.
*    ls_contact_person-address-physical_address-region_code = ls_bapi_cc_addrs-region.
*    ls_contact_person-address-physical_address-country_name = ls_bapi_cc_addrs-region.

*ContactPerson Phone
  lw_telephone-number-extension_id = ls_bapi_cc_addrs-tel1_ext.
  lw_telephone-number-country_code = ls_bapi_cc_addrs-country.
*    ls_telephone-number-subscriber_id = ls_bapi_cc_addrs-tel1_ext.
  APPEND lw_telephone TO ls_telephone.
  ls_communication-telephone = ls_telephone.

*facsimile
  lw_facsimile-number-extension_id = ls_bapi_cc_addrs-fax_extens.
  lw_facsimile-number-country_code = ls_bapi_cc_addrs-country.
*    ls_facsimile-number-subscriber_id = ls_bapi_cc_addrs-fax_extens.
  APPEND lw_facsimile TO ls_facsimile.
  ls_communication-facsimile = ls_facsimile.

*move communication to address
  ls_address-communication = ls_communication.

*move address to contact_person
  lw_contact_person-address = ls_address.
  APPEND lw_contact_person TO ls_contact_person.
  e_invoice_header-bill_from_party-contact_person = ls_contact_person.

*CI-1606{
*Company Code Vat Registration No.
  e_invoice_header-bill_from_party-vat_id = i_invoice_header-stceg_t001.
*}CI-1606
*------------------------------------------------------------------------------------*
* InvoicePartner - billTo
*------------------------------------------------------------------------------------*
  CALL FUNCTION 'BAPI_CUSTOMER_GETDETAIL1'
    EXPORTING
      customerno     = i_invoice_header-kunre
      pi_salesorg    = i_invoice_header-vkorg
    IMPORTING
      pe_companydata = ls_companydata
      return         = ls_bapi_return1.

*addressID: our account number at customer
  e_invoice_header-bill_to_party-internal_id-content = i_customer_sales_data-eikto.

*language code
  CALL METHOD cl_gdt_conversion=>language_code_outbound
    EXPORTING
      im_value = ls_companydata-langu
    IMPORTING
      ex_value = e_invoice_header-bill_to_party-address-organisation_form_of_address-name-language_code.

  e_invoice_header-bill_to_party-address-organisation_form_of_address-name-content = ls_companydata-name.

*clear all internal table and workarea
  CLEAR: ls_contact_person,
         ls_telephone,
         ls_facsimile,
         ls_address,
         lw_telephone,
         lw_facsimile,
         lw_contact_person,
         ls_communication.

*ContactPerson Postal Address
  ls_address-organisation_form_of_address-name-content = ls_companydata-name.
  ls_address-physical_address-country_code = ls_companydata-country.
  ls_address-physical_address-region_name = ls_companydata-region.
  ls_address-physical_address-pobox_postal_code = ls_companydata-postl_cod2.
  ls_address-physical_address-city_name = ls_companydata-city.
  ls_address-physical_address-street_name = ls_companydata-street.
*    ls_contact_person-address-physical_address-region_code = ls_companydata-region.
*    ls_contact_person-address-physical_address-country_name = ls_companydata-region.

*ContactPerson Phone
  lw_telephone-number-extension_id = ls_companydata-tel1_ext.
  lw_telephone-number-country_code = ls_companydata-country.
*    ls_telephone-number-subscriber_id = ls_companydata-tel1_ext.
  APPEND lw_telephone TO ls_telephone.
  ls_communication-telephone = ls_telephone.

*facsimile
  lw_facsimile-number-extension_id = ls_companydata-fax_extens.
  lw_facsimile-number-country_code = ls_companydata-country.
*    ls_facsimile-number-subscriber_id = ls_companydata-fax_extens.
  APPEND lw_facsimile TO ls_facsimile.
  ls_communication-facsimile = ls_facsimile.

*email
  lw_email-uri-content = ls_companydata-e_mail.
  APPEND lw_email TO ls_email.
  ls_communication-email = ls_email.

*move communication to address
  ls_address-communication = ls_communication.

*move address to contact_person
  lw_contact_person-address = ls_address.
  APPEND lw_contact_person TO ls_contact_person.
  e_invoice_header-bill_to_party-contact_person = ls_contact_person.

*CI-1606{
  CALL METHOD me->get_partner_vatid
   EXPORTING
     iv_partner =  i_invoice_header-kunre
     iv_country =  i_invoice_header-stceg_l "IG-24500
   IMPORTING
     ev_vat_id  =  lv_vat_id.
  e_invoice_header-bill_to_party-vat_id = lv_vat_id.
  CLEAR: lv_vat_id.
*}CI-1606
*-------------------------------------------------------------------------*
*Payment Terms
*-------------------------------------------------------------------------*
  IF i_invoice_header-zterm IS NOT INITIAL.

    CALL FUNCTION 'SD_PRINT_TERMS_OF_PAYMENT'
      EXPORTING
        bldat            = i_invoice_header-fkdat
        terms_of_payment = i_invoice_header-zterm
      TABLES
        top_text         = lt_payment_terms.
    IF lt_payment_terms IS NOT INITIAL.
      LOOP AT lt_payment_terms INTO lw_payment_terms.
        CASE sy-tabix.
          WHEN '1'.     "Maximum discount
            e_invoice_header-cash_discount_terms-maximum_cash_discount-days_value = lw_payment_terms-tage.
            e_invoice_header-cash_discount_terms-maximum_cash_discount-percent = lw_payment_terms-prz.
          WHEN '2'.     "Normal discount
            e_invoice_header-cash_discount_terms-normal_cash_discount-days_value = lw_payment_terms-tage.
            e_invoice_header-cash_discount_terms-normal_cash_discount-percent = lw_payment_terms-prz.
          WHEN OTHERS.  "full Payment
            e_invoice_header-cash_discount_terms-full_payment_due_days_value = lw_payment_terms-tage.
        ENDCASE.
      ENDLOOP.
    ENDIF.
  ENDIF.
*----------------------------------------------------------------------------*
*Comments
*----------------------------------------------------------------------------*
  lt_comments = i_comments[].
  DELETE lt_comments WHERE item_number IS NOT INITIAL.
  e_invoice_header-comments[] = lt_comments[].

*CI-1606{
*----------------------------------------------------------------------------*
*Bank
*----------------------------------------------------------------------------*

*  CALL METHOD me->get_bank_details
*   EXPORTING
*     is_invoice_header =  i_invoice_header
*   IMPORTING
*     et_bankdata       =  lt_bankdata[].
*
*  e_invoice_header-bank = lt_bankdata[].

*}CI-1606
ENDMETHOD.
METHOD map_invoice_order.
*---------------------------------------------*
*Declaration for Local structure
*---------------------------------------------*
  TYPES: BEGIN OF ty_vbak,
           vbeln TYPE vbak-vbeln,
           bstnk TYPE vbak-bstnk,
         END OF ty_vbak.
*---------------------------------------------*
*Declaration for Structure
*---------------------------------------------*
  DATA:
    ls_item                   TYPE arbcis_invc_req_invc_itm_tab,
    ls_po_ref                 TYPE arbcis_bus_tran_doc_ref_t,
    ls_comm_head_i            TYPE komk,
    ls_comm_item_i            TYPE komp,
    ls_message                TYPE arbcis_invc_req_msg,
*---------------------------------------------*
*Declaration for Local variables
*---------------------------------------------*
    lv_netwr_item             TYPE netwr,
    lv_netwr_header           TYPE netwr,
    lv_tax_rate_decimals      TYPE i,
    lv_tax_rate               TYPE msatz_f05l,
    lv_pricing_procedure      TYPE kalsm_d,
    lv_langu                  TYPE spras,
    lv_currency_code          TYPE tcurc-isocd,
    lv_lines                  TYPE i,
    lv_txjcd                  TYPE komk-txjcd,
    lv_bstnk                  TYPE TABLE OF vbak,
    lv_posnr                  TYPE TABLE OF vbap,
**CI-1766{
    lv_shipmentamount         TYPE kwert,
    lv_specialhandlingcharges TYPE kwert,
*}CI-1766
*---------------------------------------------*
*Declaration for Internal Table
*---------------------------------------------*
    lt_komv                   TYPE komv_tab,
    lt_komvd                  TYPE komvd_t,
    lt_taxdata                TYPE komvd_t,
    lt_vbak                   TYPE TABLE OF ty_vbak,
    lt_items                  TYPE tbl_vbdpr,
    lt_comments               TYPE arbcis_ariba_comment_tab,
    lt_taxcat                 TYPE STANDARD TABLE OF arbcis_taxcat,
**CI-1766{
    lt_charges                TYPE arbcis_charges_tab,
    lt_charges_tmp            TYPE arbcis_charges_tab,
    lt_prodtax                TYPE arbcis_product_tax_tab,
    lt_prodtax_tmp            TYPE arbcis_product_tax_tab,
*}CI-1766
*---------------------------------------------*
*Declaration for work area
*---------------------------------------------*
    lw_komvd                  TYPE LINE OF komvd_t,
    lw_komv                   TYPE LINE OF komv_tab,
    lw_item                   TYPE LINE OF arbcis_invc_req_invc_itm_tab,
    lw_po_ref                 TYPE LINE OF arbcis_bus_tran_doc_ref_t,
    lw_prodtax                TYPE LINE OF arbcis_product_tax_tab,
    lw_prodtax_header         TYPE LINE OF arbcis_product_tax_tab,
    lw_vbak                   TYPE ty_vbak,
    lw_taxcat                 TYPE arbcis_taxcat.

*---------------------------------------------*
*Declaration for field symbol
*---------------------------------------------*
  FIELD-SYMBOLS:
        <lfs_invoice_item>     TYPE vbdpr.
*---------------------------------------------*
*Declaration for constants
*---------------------------------------------*
  CONSTANTS:
    lc_each    TYPE string VALUE 'EA',
    lc_blank   TYPE string VALUE ' ',
    lc_english TYPE string VALUE 'en'.

* currency code
  TRY.
      CALL METHOD cl_gdt_conversion=>currency_code_outbound
        EXPORTING
          im_value = i_invoice_header-waerk
        IMPORTING
          ex_value = lv_currency_code.
    CATCH cx_gdt_conversion.
      IF lv_currency_code IS INITIAL.
        lv_currency_code = i_invoice_header-waerk.
      ENDIF.
  ENDTRY.

*get PO reference by vbak
  lt_items[] = i_invoice_items[].
  SORT lt_items BY vbeln_vauf.
  DELETE ADJACENT DUPLICATES FROM lt_items COMPARING vbeln_vauf.
  IF lt_items[] IS NOT INITIAL.
    SELECT vbeln bstnk FROM vbak
      INTO TABLE lt_vbak
      FOR ALL ENTRIES IN lt_items
      WHERE vbeln = lt_items-vbeln_vauf.
    IF sy-subrc EQ 0.
      SORT lt_vbak BY vbeln.
    ENDIF.
  ENDIF.

*get all item lines from the invoice
  LOOP AT i_invoice_items ASSIGNING <lfs_invoice_item>.

    "START Nos salteamos las posiciones, de pallets. SEIDOR 13.03.2024
    IF <lfs_invoice_item>-pstyv = 'ZHUP'.
      CONTINUE.
    ENDIF.
    "END Nos salteamos las posiciones, de pallets. SEIDOR 13.03.2024

*-- invoiceLineNumber
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = <lfs_invoice_item>-posnr
      IMPORTING
        output = lw_item-id.

*-- quantity
    IF i_credit_memo_ind = abap_true.
      IF <lfs_invoice_item>-fkimg GT 0.
        lw_item-quantity-content = <lfs_invoice_item>-fkimg * -1.
      ENDIF.
    ELSE.
      lw_item-quantity-content = <lfs_invoice_item>-fkimg.
    ENDIF.

*-- unit of measure
    IF <lfs_invoice_item>-vrkme IS INITIAL AND <lfs_invoice_item>-fkimg EQ 0.
      lw_item-quantity-unit_code = lc_each.
    ELSE.
      lw_item-quantity-unit_code = <lfs_invoice_item>-vrkme.
    ENDIF.

**Commenting this code as part of legacy defect IG-28386
**As part of this feature, We introduced unit price element which is apt for AN unit price element
*and moved the logic for calculating unit price downward.
**-- Unit Price
*    IF <lfs_invoice_item>-fkimg NE 0.
*      lw_item-price-net_unit_price-amount-content = <lfs_invoice_item>-netwr / <lfs_invoice_item>-fkimg.
*      lw_item-price-net_unit_price-amount-currency_code = lv_currency_code.
*    ENDIF.

*-- Price basis quantity and item quantity
*    IF <lfs_invoice_item>-kmein IS NOT INITIAL AND
*       <lfs_invoice_item>-vrkme NE <lfs_invoice_item>-kmein AND
*       <lfs_invoice_item>-fkimg IS NOT INITIAL.
**-- PriceBaseQuantity conversionfactor: quantity in price base UoM
*      lw_item-price-net_unit_price-base_quantity-content = <lfs_invoice_item>-kpein / <lfs_invoice_item>-fkimg.
*      lw_item-price-net_unit_price-base_quantity-unit_code = <lfs_invoice_item>-kmein.
*    ENDIF.

*-- Item reference PO number
    CLEAR: lw_po_ref,lw_item-purchase_order_reference.
    IF lt_vbak IS NOT INITIAL.
      READ TABLE lt_vbak INTO lw_vbak WITH KEY vbeln = <lfs_invoice_item>-vbeln_vauf BINARY SEARCH.
      IF sy-subrc EQ 0.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = lw_vbak-bstnk
          IMPORTING
            output = lw_po_ref-id.
      ENDIF.
*-- Item reference line number
      IF <lfs_invoice_item>-posex IS NOT INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <lfs_invoice_item>-posex
          IMPORTING
            output = lw_po_ref-item_id.
      ELSE.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = <lfs_invoice_item>-posnr_vauf
          IMPORTING
            output = lw_po_ref-item_id.

      ENDIF.
      APPEND lw_po_ref TO ls_po_ref.
      lw_item-purchase_order_reference = ls_po_ref.
    ENDIF.

*-- Seller ID
    IF <lfs_invoice_item>-matnr IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
        EXPORTING
          input  = <lfs_invoice_item>-matnr
        IMPORTING
          output = lw_item-product-seller_id.
*    ELSE.
*      lw_item-product-seller_id = lc_blank.
    ENDIF.

*-- Description
    lw_item-description-content = <lfs_invoice_item>-arktx.
*-- language
    IF i_invoice_header-spras_vko IS NOT INITIAL.
      TRY.
          CALL METHOD cl_gdt_conversion=>language_code_outbound
            EXPORTING
              im_value = i_invoice_header-spras_vko
            IMPORTING
              ex_value = lw_item-description-language_code.
        CATCH cx_gdt_conversion.
          IF lw_item-description-language_code IS INITIAL.
            lw_item-description-language_code = lc_english. "default to EN
          ENDIF.
      ENDTRY.
    ELSE."default to EN
      lw_item-description-language_code = lc_english.
    ENDIF.

*-- Determine amount
    TRY.
        CALL METHOD cl_gdt_conversion=>amount_outbound
          EXPORTING
            im_value         = <lfs_invoice_item>-netwr
            im_currency_code = i_invoice_header-waerk
          IMPORTING
            ex_value         = lv_netwr_item.
      CATCH cx_gdt_conversion .
    ENDTRY.
    IF i_credit_memo_ind = abap_true.
      IF lv_netwr_item GT 0.
        lv_netwr_item = lv_netwr_item * -1.
      ENDIF.
    ENDIF.

* GrossAmount: SubtotalAmount + taxes + shippingAmount + specialHandlingAmount
* (tax, shippingAmount and specialHandlingAmount are header values in ERP, and not considered for the item)
* --Line Level
* IG-23859{
* SAP Note 2971460
* Commented below code for fix of IG-23859. Gross Amount = Net Amount + Tax Amount. Calculation Code move below.
*    lw_item-price-gross_amount-content = lv_netwr_item.
*    lw_item-price-gross_amount-currency_code = lv_currency_code.
* }IG-23859

*Tax Mapping: Item Level
    lt_komv = i_item_taxdata.
    lt_komvd = i_taxdata.                                   "CI-1766
*call Tax processing BADI
    CALL BADI go_badi->invoice_taxprocess
      EXPORTING
        i_komv    = lt_komv
        i_komvd   = lt_komvd
      CHANGING
        c_message = ls_message.

*Delete duplicate entries from KOMV table
    SORT lt_komv BY knumv kposn.
    DELETE lt_komv WHERE kposn NE <lfs_invoice_item>-posnr.
    IF lt_komv[] IS NOT INITIAL.
      FREE: lt_taxcat.
      SELECT * FROM arbcis_taxcat
        INTO TABLE lt_taxcat
        FOR ALL ENTRIES IN lt_komv
        WHERE taxcode = lt_komv-mwsk1.
      IF sy-subrc EQ 0.
        SORT lt_taxcat BY taxcode countrycode.
      ENDIF.

**CI-1766 {
      CALL METHOD me->map_tax_details
        EXPORTING
          it_komv           = lt_komv
          it_taxcat         = lt_taxcat
          i_credit_memo_ind = i_credit_memo_ind
          iv_currency_code  = lv_currency_code
          is_invoice_header = i_invoice_header
        IMPORTING
          et_prodtax        = lt_prodtax
        CHANGING
          cs_price          = lw_item-price.

      APPEND LINES OF lt_prodtax TO lw_item-product_tax.
      APPEND LINES OF lt_prodtax TO lt_prodtax_tmp.


*Shipment/Frieght charges
      CLEAR: lv_shipmentamount, lv_specialhandlingcharges.
      CALL METHOD me->map_shipment_amount
        EXPORTING
          it_komv            = lt_komv
          iv_currency_code   = lv_currency_code
          iv_credit_memo_ind = i_credit_memo_ind
        IMPORTING
          ev_shipmentamount  = lv_shipmentamount
        CHANGING
          ct_charges         = lt_charges.

*SpecialHandlingCharges
      CALL METHOD me->special_handling_charges
        EXPORTING
          it_komv                   = lt_komv
          iv_currency_code          = lv_currency_code
          iv_credit_memo_ind        = i_credit_memo_ind
        IMPORTING
          ev_specialhandlingcharges = lv_specialhandlingcharges
        CHANGING
          ct_charges                = lt_charges.

      APPEND LINES OF lt_charges TO lw_item-price-charges.
      APPEND LINES OF lt_charges TO lt_charges_tmp.
      REFRESH lt_charges[].
    ENDIF.

*{IG-28386 Legacy defect
    READ TABLE lt_komv INTO  lw_komv
                   WITH KEY koaid = 'B' "Price
                      kstat = ' '
                      kinak = ' '.
    IF sy-subrc = 0.
      lw_item-price-base_amount-content = lw_komv-kwert.
      lw_item-price-base_amount-currency_code = lv_currency_code.
      lw_item-price-unit_price-amount-content = lw_item-price-base_amount-content / <lfs_invoice_item>-fkimg.
      lw_item-price-unit_price-amount-currency_code = lv_currency_code.
      IF i_credit_memo_ind = abap_true AND lw_item-price-base_amount-content GT 0.
        lw_item-price-base_amount-content = lw_item-price-base_amount-content * -1.
      ENDIF.
    ENDIF.
*-- Price basis quantity and item quantity
    IF <lfs_invoice_item>-kmein IS NOT INITIAL AND
       <lfs_invoice_item>-vrkme NE <lfs_invoice_item>-kmein AND
       <lfs_invoice_item>-fkimg IS NOT INITIAL.
*-- PriceBaseQuantity conversionfactor: quantity in price base UoM
      lw_item-price-unit_price-base_quantity-content = <lfs_invoice_item>-kpein / <lfs_invoice_item>-fkimg.
      lw_item-price-unit_price-base_quantity-unit_code = <lfs_invoice_item>-kmein.
    ENDIF.
*}IG-28386

*net amount (lv_netwr_item) already has charges
    lw_item-price-net_amount-content = lv_netwr_item + lw_item-price-tax_amount-content.
    lw_item-price-net_amount-currency_code = lv_currency_code.
*Gross amount is equal to net amount since discount we are not supporting
    lw_item-price-gross_amount-currency_code = lv_currency_code.
    lw_item-price-gross_amount-content = lw_item-price-net_amount-content.
*}CI-1766

*Comments
    lt_comments = i_comments[].
    DELETE lt_comments[] WHERE item_number <> <lfs_invoice_item>-posnr.
    lw_item-comments[] = lt_comments[].
    APPEND lw_item TO e_invoice-item.

    CLEAR: lt_comments[], lt_prodtax[].
    CLEAR: ls_comm_head_i,ls_comm_item_i,ls_po_ref,ls_item.
    CLEAR: lt_komv,lt_komvd,lw_item,lw_prodtax.
  ENDLOOP.  "Item close
  CLEAR: lw_vbak.

*Header Level Tax
  CALL METHOD me->map_header_tax
    EXPORTING
      i_invoice_header  = i_invoice_header
      i_taxdata         = i_taxdata
      i_credit_memo_ind = i_credit_memo_ind
      i_invoice_item    = e_invoice
      it_komv           = lt_komv
      it_taxcat         = lt_taxcat
      it_prodtax        = lt_prodtax_tmp
      it_charges        = lt_charges_tmp
    IMPORTING
      e_invoice         = e_invoice.

ENDMETHOD.
METHOD MAP_MESSAGE.
*-----------------------------------------------*
*Declaration for Local variables
*-----------------------------------------------*
  DATA: lv_crd_ind  TYPE abap_bool,
        lt_comments TYPE arbcis_ariba_comment_tab.

*Map message Header
  IF i_messageheader IS NOT INITIAL.
    e_message-message_header = i_messageheader.
  ENDIF.
*Fetch Comments
 fetch_texts(
    EXPORTING
      i_invoice_header = i_invoice_header
      i_invoice_items  = i_invoice_items
    IMPORTING
      et_comments      = lt_comments[] ).

*Map InvoiceDetailRequestHeader
  map_invoice_header(
    EXPORTING
      i_invoice_header      = i_invoice_header
      i_customer_sales_data = i_customer_sales_data
      i_taxdata             = i_taxdata
      i_comments            = lt_comments[]
    IMPORTING
      e_invoice_header      = e_message-invoice
      e_credit_memo_ind     = lv_crd_ind ).

TRY.
*Map Invoice Request Item
  map_invoice_order(
    EXPORTING
      i_invoice_header  = i_invoice_header
      i_invoice_items   = i_invoice_items
      i_taxdata         = i_taxdata
      i_credit_memo_ind = lv_crd_ind
      i_comments        = lt_comments[]
      i_item_taxdata    = i_item_taxdata
    IMPORTING
      e_invoice         = e_message-invoice ).
   CATCH cx_arbcis_appl.
     RAISE EXCEPTION TYPE cx_arbcis_appl
                    EXPORTING message_id = 'ARBCIS_MESSAGE'
                              message_number = '028'
                              message_type = gc_i.
  ENDTRY.

ENDMETHOD.
METHOD MAP_SHIPMENT_AMOUNT.
  DATA:  ls_komv    TYPE LINE OF komv_tab,
         ls_charges TYPE LINE OF arbcis_charges_tab.

  LOOP AT it_komv INTO ls_komv WHERE koaid ='A' AND kntyp = 'F'
  AND ( kinak IS INITIAL OR kinak = 'W' ).
    ls_charges-name-content  = 'ShipmentAmount' .
    ls_charges-amount-content  = ls_komv-kwert + ls_charges-amount-content.
    ls_charges-amount-currency_code = iv_currency_code..
  ENDLOOP.
  IF ls_charges IS NOT INITIAL.
  ev_shipmentamount =  ls_charges-amount-content.
    IF iv_credit_memo_ind = abap_true AND ls_charges-amount-content GT 0.
      ls_charges-amount-content =  ls_charges-amount-content * -1.
    ENDIF.
    APPEND ls_charges TO ct_charges.
  ENDIF.
  CLEAR: ls_komv-kwert, ls_charges.
ENDMETHOD.
METHOD MAP_TAX_DETAILS.

  DATA: ls_komv TYPE LINE OF komv_tab,
        ls_price TYPE arbcis_invc_req_invc_itm_pr,
        lt_taxcat              TYPE STANDARD TABLE OF arbcis_taxcat,
        ls_taxcat              TYPE arbcis_taxcat,
        ls_prodtax             TYPE LINE OF arbcis_product_tax_tab,
        lv_tax_rate            TYPE msatz_f05l,
        lv_pricing_procedure   TYPE kalsm_d,
        lv_langu               TYPE spras,
        lv_tax_rate_decimals   TYPE i.

  lt_taxcat = it_taxcat.
  LOOP AT it_komv INTO  ls_komv
                  WHERE koaid = 'D' "Tax
                    AND kstat IS INITIAL
                    AND kinak IS INITIAL.
*Tax Amount
* Credit memo: only negative value
    IF i_credit_memo_ind = abap_true.
      IF ls_komv-kwert GT 0.
        ls_komv-kwert = ls_komv-kwert * -1.
      ENDIF.
*Tax Base Amount
     IF ls_komv-kawrt GT 0.
        ls_komv-kawrt = ls_komv-kawrt * -1.
     ENDIF.
    ENDIF.
* Tax Amount at each item level
    cs_price-tax_amount-content = cs_price-tax_amount-content + ls_komv-kwert.
    cs_price-tax_amount-currency_code = iv_currency_code.

* Tax base amount at each item level
    cs_price-base_amount-content = ls_komv-kawrt.
    cs_price-base_amount-currency_code = iv_currency_code.

*Tax Detail
    READ TABLE lt_taxcat INTO ls_taxcat WITH KEY taxcode = ls_komv-mwsk1
                                                 countrycode = is_invoice_header-lland BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_prodtax-type_code-content = ls_taxcat-taxcode.
      ls_prodtax-type_code-list_id = ls_taxcat-tax_category.
    ELSE.
      READ TABLE lt_taxcat INTO ls_taxcat WITH KEY taxcode = ls_komv-mwsk1 BINARY SEARCH.
      IF sy-subrc EQ 0.
        ls_prodtax-type_code-content = ls_taxcat-taxcode.
        ls_prodtax-type_code-list_id = ls_taxcat-tax_category.
      ENDIF.
    ENDIF.

*Tax rate
    CLEAR: lv_tax_rate.
    lv_tax_rate = ls_komv-kbetr.
    DESCRIBE FIELD ls_komv-kbetr DECIMALS lv_tax_rate_decimals.
    IF lv_tax_rate_decimals EQ 2.
      DIVIDE lv_tax_rate BY 10.
      ls_prodtax-rate-decimal_value = lv_tax_rate.
    ELSE.
      ls_prodtax-rate-decimal_value = ls_komv-kbetr.
    ENDIF.

*Tax Description
    CALL FUNCTION 'FI_TAX_GET_PRICING_PROCEDURE'
      EXPORTING
        i_bukrs           = is_invoice_header-bukrs
      IMPORTING
        e_kalsm           = lv_pricing_procedure
      EXCEPTIONS
        bukrs_not_found   = 1
        country_not_found = 2
        kalsm_not_found   = 3
        parameter_error   = 4
        OTHERS            = 5.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.
      IF is_invoice_header-spras_vko IS INITIAL. " set default to english
        lv_langu = 'E'.
      ELSE.
        TRY.
            CALL METHOD cl_gdt_conversion=>language_code_outbound
              EXPORTING
                im_value = is_invoice_header-spras_vko
              IMPORTING
                ex_value = lv_langu.
          CATCH cx_gdt_conversion.
            IF lv_langu IS INITIAL.
              lv_langu = 'E'.
            ENDIF.
        ENDTRY.
      ENDIF.
      SELECT SINGLE text1
           FROM t007s
           INTO ls_prodtax-type_code-list_agency_id
           WHERE spras = lv_langu AND
                 kalsm = lv_pricing_procedure AND
                 mwskz = ls_komv-mwsk1.
    ENDIF.
*Taxable(Base) Amount & Tax Amount
    IF ls_komv-kawrt IS NOT INITIAL.
      IF i_credit_memo_ind = abap_true. "credit memo check
        IF ls_komv-kawrt GT 0.
          ls_prodtax-amount-content      = ls_komv-kwert * -1.
          ls_prodtax-base_amount-content = ls_komv-kawrt * -1.
        ELSE.
          ls_prodtax-amount-content      = ls_komv-kwert.
          ls_prodtax-base_amount-content = ls_komv-kawrt.
        ENDIF.
      ELSE.
        ls_prodtax-amount-content = ls_komv-kwert.
        ls_prodtax-base_amount-content = ls_komv-kawrt.
      ENDIF.
    ENDIF.
    ls_prodtax-base_amount-currency_code = iv_currency_code.
    ls_prodtax-amount-currency_code = iv_currency_code.

    APPEND ls_prodtax TO et_prodtax.
    CLEAR: ls_prodtax.
    CLEAR:ls_komv,ls_taxcat.
  ENDLOOP.
ENDMETHOD.
  METHOD process.
*----------------------------------------------------*
*-- Declaration for structure
*----------------------------------------------------*
    DATA:
      ls_invoice_header      TYPE vbdkr,
      ls_invoice_items       TYPE tbl_vbdpr,
      ls_customer_sales_data TYPE knvv,
      ls_message             TYPE arbcis_invc_req_msg,
      ls_taxdata             TYPE komvd_t,
      ls_item_taxdata        TYPE komv_tab,
      ls_inv_req             TYPE arbcis_invoice_request,
      ls_ret_msg             TYPE bapiret2,
      ls_log                 TYPE arbcis_long_text,
      lt_badi_log            TYPE arbcis_long_text_t,
*-----------------------------------------------------*
*-- declaration for Local variables
*-----------------------------------------------------*
      lv_objectkey           TYPE arbcis_object_key,
      lv_msg                 TYPE string,
      lv_skip_oc             TYPE char01,
      lv_send                TYPE xfeld,
      lv_skip                TYPE char01.
*-----------------------------------------------------*
*-- Objects
*-----------------------------------------------------*
    DATA: lo_req   TYPE REF TO co_arbcis_invoice_request_out,
          lo_fault TYPE REF TO cx_ai_system_fault,
          lo_exc   TYPE REF TO cx_arbcis_appl.

*Initialise BADI Object
    GET BADI go_badi.

*-- Assign NAST Objkey to global variable for logging.
    gv_doc = is_nast-objky.
* Fetch Order Data
    lv_objectkey = is_nast-objky.
    TRY .
        process_invoice(
            EXPORTING
              i_object_key          = lv_objectkey
            IMPORTING
              e_invoice_header      = ls_invoice_header
              e_invoice_items       = ls_invoice_items
              e_customer_sales_data = ls_customer_sales_data
              e_taxdata             = ls_taxdata
              e_item_taxdata        = ls_item_taxdata ).

*Check Order Relevance and Trigger Conditions
        check_billing_doc_relevance(
        EXPORTING
          i_invoice_header = ls_invoice_header ).

* Check and Re-assign default Language Key.
        IF is_nast-spras IS NOT INITIAL.
          TRY.
              cl_gdt_conversion=>language_code_outbound(
              EXPORTING
                im_value = is_nast-spras
              IMPORTING
                ex_value = gv_lang ).
            CATCH cx_gdt_conversion.
              IF gv_lang IS INITIAL.
                gv_lang = 'en'.
              ENDIF.
          ENDTRY.
        ENDIF.

*CI-1606{
*Sales org contact name needed w.r.t nast language key
        ms_nast = is_nast.
*}CI-1606
* Map Proxy Structure
        map_message(
                EXPORTING
                  i_messageheader       = is_message_header
                  i_invoice_header      = ls_invoice_header
                  i_invoice_items       = ls_invoice_items
                  i_taxdata             = ls_taxdata
                  i_customer_sales_data = ls_customer_sales_data
                  i_item_taxdata        = ls_item_taxdata
                IMPORTING
                  e_message             = ls_message ).
      CATCH cx_arbcis_appl INTO lo_exc.
        lo_exc->get_message(
          RECEIVING
            rs_message = ls_ret_msg ).
* Raise exception for Message Log.
* Set error flag.
        ls_ret_msg-type = gc_e. "JSA

        IF ls_ret_msg-type = gc_e.
          ev_return_code = gc_error.
        ELSE.
          CLEAR ev_return_code.
        ENDIF.
        APPEND ls_ret_msg TO et_message[].
        ls_log-message_id = ls_ret_msg-id.
        ls_log-message_type = ls_ret_msg-type.
        ls_log-message_number = ls_ret_msg-number.
        ls_log-message_v1 = ls_ret_msg-message_v1.
        ls_log-message_v2 = ls_ret_msg-message_v2.
        ls_log-message_v3 = ls_ret_msg-message_v3.
        ls_log-message_v4 = ls_ret_msg-message_v4.
        update_log(
        EXPORTING
          is_log = ls_log ).
        fill_app_log( ).
        RETURN.
    ENDTRY.

    IF ls_message IS NOT INITIAL.

*Call Pre-Processing BADI
      CALL BADI go_badi->invoice_preprocess
        EXPORTING
          i_invoice_header = ls_invoice_header
          i_invoice_item   = ls_invoice_items
        CHANGING
          c_skip           = lv_skip
          c_message        = ls_message
          c_log            = lt_badi_log[].

      IF lt_badi_log[] IS NOT INITIAL.
        APPEND LINES OF lt_badi_log TO gt_log[].
      ENDIF.

*Assign message to invoice proxy structure
      ls_inv_req-invoice_request = ls_message.

      IF lv_skip IS INITIAL.
* Call Proxy.
*        TRY.
*            CREATE OBJECT lo_req.
*            lo_req->invoice_request_out(
*                EXPORTING
*                  output = ls_inv_req ).
*          CATCH cx_ai_system_fault INTO lo_fault.
*            lv_msg = lo_fault->if_message~get_text( ).
*            ev_return_code = gc_error.
*            ls_ret_msg-type = gc_e.
*            ls_ret_msg-id = 'ARBCIS_MESSAGE'.
*            ls_ret_msg-number = '007'.
*            ls_ret_msg-message_v1 = lv_msg.
*            APPEND ls_ret_msg TO et_message[].
** Add to log table.
*            ls_log-comment = lv_msg.
*            update_log(
*            EXPORTING
*              is_log = ls_log ).
*            fill_app_log( ).
*            RETURN.
*        ENDTRY.
        e_message = ls_message.
      ENDIF.
      CLEAR ls_log.
      CONCATENATE text-001
                  ls_inv_req-invoice_request-invoice-id-content
                  text-002
                  text-003
                  is_message_header-id-content INTO ls_log-comment SEPARATED BY space.
      update_log(
      EXPORTING
        is_log = ls_log ).

*Call Save document version
      save_document_version(
      EXPORTING
        i_input = ls_message
        i_vbeln = gv_doc ).

*Call Post Processing BADI
      CALL BADI go_badi->invoice_postprocess
        EXPORTING
          i_invoice_header = ls_invoice_header
          i_invoice_item   = ls_invoice_items
          i_message        = ls_message
        CHANGING
          c_log            = lt_badi_log[].
    ENDIF.
* Update Application Logs.
*    fill_app_log( ).
*** Return back to calling program.
*    CLEAR ls_ret_msg.
*    ls_ret_msg-type = gc_i.
*    ls_ret_msg-id = 'ARBCIS_MESSAGE'.
*    ls_ret_msg-number = '021'.
*    ls_ret_msg-message_v1 = is_message_header-uuid-content.
*    APPEND ls_ret_msg TO et_message[].
*    CLEAR ev_return_code.

  ENDMETHOD.
METHOD PROCESS_INVOICE.
  DATA:
*---------------------------------------------*
*Declaration for Structures
*---------------------------------------------*
  ls_comwa               TYPE vbco3,
  ls_comm_head_i         TYPE komk,
  ls_comm_item_i         TYPE komp,
  ls_vtcom               TYPE vtcom,
*---------------------------------------------*
*Declaration for Internal Table
*---------------------------------------------*
  lt_komv                TYPE komv_tab,
  lt_komvd               TYPE komvd_t,
*---------------------------------------------*
*Declaration for Variables
*---------------------------------------------*
  lv_text_key_int        TYPE tdobname,
  lv_message_v1          TYPE symsgv.
*---------------------------------------------*
*Declaration for Field Symbols
*---------------------------------------------*
  FIELD-SYMBOLS:
    <lfs_komvd>             TYPE komvd,
    <lfs_komv>              TYPE komv.

*Assign Object Key
  ls_comwa-vbeln = i_object_key.

*Invoke RV_BILLING_PRINT_VIEW function to get Billing Document Header & Item data.
  CALL FUNCTION 'RV_BILLING_PRINT_VIEW'
    EXPORTING
      comwa                        = ls_comwa
    IMPORTING
      kopf                         = e_invoice_header
    TABLES
      pos                          = e_invoice_items
    EXCEPTIONS
      terms_of_payment_not_in_t052 = 1
      OTHERS                       = 2.
  IF sy-subrc <> 0.
*Raise Exception
    RAISE EXCEPTION TYPE cx_arbcis_appl
            EXPORTING message_id = 'ARBCIS_MESSAGE'
                      message_number = '008'
                      message_type = gc_e
                      message_v1 = 'Order data could not be fetched'(009).
  ENDIF.
*Invoke RV_PRICE_PRINT_HEAD function to get Tax Data.
*Assign vbeln and knumv
  ls_comm_head_i-belnr = e_invoice_header-vbeln.
  ls_comm_head_i-knumv = e_invoice_header-knumv.

  CALL FUNCTION 'RV_PRICE_PRINT_HEAD'
    EXPORTING
      comm_head_i = ls_comm_head_i
    TABLES
      tkomv       = lt_komv
      tkomvd      = lt_komvd.

*Determine relevant Tax lines, Charges & Discounts from komvd.
  LOOP AT lt_komvd ASSIGNING <lfs_komvd>.
    IF <lfs_komvd>-koaid EQ 'D'     "Taxes
      OR <lfs_komvd>-koaid EQ 'B'   "Prices     "to have base amount to calculate unit price (IG-28386)
      OR <lfs_komvd>-koaid EQ 'A'.  "Charges & Discounts
      IF <lfs_komvd>-kstat EQ ' ' AND
         <lfs_komvd>-kinak EQ ' ' OR <lfs_komvd>-kinak EQ 'W'. "Statistical Item
        APPEND <lfs_komvd> TO e_taxdata.
      ENDIF.
    ENDIF.
  ENDLOOP.

*Determine relevant Tax lines, Charges & Discounts from komv
  LOOP AT lt_komv ASSIGNING <lfs_komv>.
    IF <lfs_komv>-koaid EQ 'D'      "Taxes
    OR <lfs_komv>-koaid EQ 'B'      "Prices      "to have base amount to calculate unit price (IG-28386)
    OR <lfs_komv>-koaid EQ 'A'.     "Charges & Discounts
      IF <lfs_komv>-kstat EQ ' ' AND
           <lfs_komv>-kinak EQ ' ' OR <lfs_komv>-kinak EQ 'W'. "Statistical Item
        APPEND <lfs_komv> TO e_item_taxdata.
      ENDIF.
    ENDIF.
  ENDLOOP.

*Read Sales data from customer master
  ls_vtcom-mandt = sy-mandt.                  "*Client*
  ls_vtcom-vkorg = e_invoice_header-vkorg.   "*Sales Organization*
  ls_vtcom-vtweg = e_invoice_header-vtweg.   "*Distribution channel*
  ls_vtcom-spart = e_invoice_header-spart.   "*Division*
  ls_vtcom-kunnr = e_invoice_header-kunre.   "*Bill To Party*

  CALL FUNCTION 'VIEW_KNVV'
    EXPORTING
      comwa   = ls_vtcom
    IMPORTING
      knvv_wa = e_customer_sales_data
    EXCEPTIONS
      no_knvv = 1
      OTHERS  = 2.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.
ENDMETHOD.
METHOD SAVE_DOCUMENT_VERSION.
*---------------------------------------------*
*Declaration for Variables
*---------------------------------------------*
  DATA:
         lv_payloadid       TYPE arbcis_payload_id,
         lv_lastsenttstmp   TYPE timestamp,
*---------------------------------------------*
*Declaration for internal table
*---------------------------------------------*
         lt_ivsd_vers       TYPE arbcis_ivsd_vers.

*Enqueue to add entry to table
  CALL FUNCTION 'ENQUEUE_EARBCIS_IVSD_VER'
    EXPORTING
      mode_arbcis_ivsd_vers = 'E'
      mandt                 = sy-mandt
      vbeln                 = i_vbeln
    EXCEPTIONS
      foreign_lock          = 1
      system_failure        = 2
      OTHERS                = 3.
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  lt_ivsd_vers-mandt  = sy-mandt.
  lt_ivsd_vers-vbeln  = i_vbeln.
  lt_ivsd_vers-payload_id = i_input-message_header-id-content.
  lt_ivsd_vers-last_sent_tstamp  = i_input-message_header-creation_date_time.

*update version table

  IF NOT lt_ivsd_vers IS INITIAL.
    MODIFY arbcis_ivsd_vers FROM lt_ivsd_vers.
  ENDIF.
  IF sy-subrc NE 0.
    MESSAGE a037(arbcis_message)." DB update issue -> abort processing
  ENDIF.

*Dequeue
  CALL FUNCTION 'DEQUEUE_EARBCIS_IVSD_VER'
    EXPORTING
      mode_arbcis_ivsd_vers = 'E'
      mandt                 = sy-mandt
      vbeln                 = i_vbeln.

ENDMETHOD.
METHOD SPECIAL_HANDLING_CHARGES.
  DATA: ls_komv    TYPE LINE OF komv_tab,
        ls_charges TYPE LINE OF arbcis_charges_tab.

  LOOP AT it_komv INTO ls_komv WHERE koaid = 'A' AND kntyp NE 'F'
       AND kstat IS INITIAL AND ( kinak IS INITIAL OR kinak ='W' )
       AND kwert GT 0.
    ls_charges-name-content    = 'SpecialHandlingCharges' .
    ls_charges-amount-content  = ls_komv-kwert + ls_charges-amount-content.
    ls_charges-amount-currency_code = iv_currency_code..
  ENDLOOP.
  IF ls_charges IS NOT INITIAL.
*credit memo indicator is added
    ev_specialhandlingcharges = ls_charges-amount-content.
    IF iv_credit_memo_ind = abap_true AND ls_charges-amount-content GT 0.
      ls_charges-amount-content =  ls_charges-amount-content * -1.
    ENDIF.
    APPEND ls_charges TO ct_charges.
  ENDIF.
  CLEAR: ls_komv-kwert, ls_charges.

ENDMETHOD.
METHOD UPDATE_LOG.
  DATA: ls_log TYPE arbcis_long_text.
  ls_log = is_log.
  IF ls_log-message_id IS INITIAL.
    ls_log-message_id = 'ARBCIS_MESSAGE'.
    ls_log-message_number = '007'.
    ls_log-message_type = 'I'.
  ENDIF.
  APPEND ls_log TO gt_log[].
  CLEAR ls_log.
ENDMETHOD.
