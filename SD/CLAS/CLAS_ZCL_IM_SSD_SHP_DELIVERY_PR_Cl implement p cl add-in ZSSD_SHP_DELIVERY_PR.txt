
class ZCL_IM_SSD_SHP_DELIVERY_PR definition
  public
  final
  create public .

public section.

  interfaces IF_BADI_INTERFACE .
  interfaces IF_EX_LE_SHP_DELIVERY_PROC .
protected section.
private section.
endclass. "ZCL_IM_SSD_SHP_DELIVERY_PR definition
class ZCL_IM_SSD_SHP_DELIVERY_PR implementation.
  method IF_EX_LE_SHP_DELIVERY_PROC~CHANGE_DELIVERY_HEADER.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~CHANGE_DELIVERY_ITEM.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~CHANGE_FCODE_ATTRIBUTES.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~CHANGE_FIELD_ATTRIBUTES.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~CHECK_ITEM_DELETION.
*  -------------------------------------------------------------------------------------------*
*  add jtm 08.11.2022 WM  No se dejará borrar posiciones de entrega si esta tiene un picking
    DATA: ex_object_cx_root TYPE REF TO cx_root,
          ex_text           TYPE string,
          ex_text_long      TYPE string.
    TRY.
      CALL FUNCTION 'ZSWM_DELIVERY_POSITION'
        EXPORTING
          is_xlips                    = is_xlips
        IMPORTING
          CF_ITEM_NOT_DELETABLE       = cf_item_not_deletable
          CT_LOG                      = ct_log
                .

      CATCH cx_root INTO ex_object_cx_root.
        ex_text = ex_object_cx_root->get_text( ).
        ex_text_long = ex_object_cx_root->get_longtext( ).
    ENDTRY.

*  fin de add jtm 08.11.2022 WM  No se dejará borrar posiciones de entrega si esta tiene un picking
*  -------------------------------------------------------------------------------------------------*

  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~DELIVERY_DELETION.
  endmethod.
METHOD if_ex_le_shp_delivery_proc~delivery_final_check.

**********************************************************************
* Parámetros locales
**********************************************************************

****** TABLES

  DATA: lt_finchdel TYPE zzfinchdel_t.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** CHEQUEOS PAPEL

  CALL FUNCTION 'ZFM_SD_CHECK_PAP_VL10X'
    EXPORTING
      i_t_xlikp    = it_xlikp
      i_t_xlips    = it_xlips
      i_trtyp      = if_trtyp
    CHANGING
      c_t_finchdel = lt_finchdel.

  MOVE-CORRESPONDING lt_finchdel[] TO ct_finchdel[].

****** CHEQUEOS CARTÓN


ENDMETHOD.
  method IF_EX_LE_SHP_DELIVERY_PROC~DOCUMENT_NUMBER_PUBLISH.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~FILL_DELIVERY_HEADER.
  endmethod.
  METHOD if_ex_le_shp_delivery_proc~fill_delivery_item.
    DATA: l_error TYPE flag.
    CLEAR l_error.

    LOOP AT it_xlips INTO DATA(lw_xlips).
      LOOP AT it_xlips INTO DATA(lw_xlips_2) WHERE posnr <> lw_xlips-posnr
                                               AND vgbel = lw_xlips-vgbel
                                               AND vgpos = lw_xlips-vgpos.

       SELECT SINGLE *
          FROM vbak
          INTO @DATA(lw_vbak)
          WHERE vbeln = @lw_xlips-vgbel.
        l_error = 'X'.
        EXIT.
      ENDLOOP.
      IF l_error = 'X'.
        EXIT.
      ENDIF.
    ENDLOOP.


"EMP: 10.01.22 Comentamos
*    DATA: lw_log TYPE shp_badi_error_log.
*    IF l_error = 'X'.
*      lw_log-vbeln = lw_xlips_2-vbeln.
*      lw_log-posnr = lw_xlips_2-posnr.
*      lw_log-msgty = 'W'.
*      lw_log-msgid = 'ZSD'.
*      lw_log-msgno = '227'.
*      lw_log-msgv1 = ''.
*      lw_log-msgv2 = ''.
*      lw_log-msgv3 = ''.
*      lw_log-msgv4 = ''.
*      APPEND lw_log TO ct_log.
*    ENDIF.

* SMT - Condicionamos el mensaje 11.01.2022
  DATA: lw_log TYPE shp_badi_error_log.
    IF l_error = 'X'.
      READ TABLE it_xlikp INTO DATA(lw_xlikp) WITH KEY vbeln = lw_xlips-vbeln.
      IF sy-subrc = 0 AND lw_vbak IS NOT INITIAL.
        SELECT SINGLE *
          INTO @DATA(lw_cond)
          FROM zssdt000_cond_mt
          WHERE zzvkorg = @lw_vbak-vkorg
            AND zzvtweg = @lw_vbak-vtweg
            AND zzspart = @lw_vbak-spart
            AND zzvstel = @lw_xlikp-vstel
            AND zzpstyv = @lw_xlips-pstyv.
        IF sy-subrc <> 0.
          "Si no hay registro no mostramos error
          CLEAR l_error.
        ENDIF.
      ELSE.
        "Si no encontramos nada no hacemos validación
        CLEAR l_error.
      ENDIF.
    ENDIF.


  ENDMETHOD.
  method IF_EX_LE_SHP_DELIVERY_PROC~INITIALIZE_DELIVERY.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~ITEM_DELETION.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~PUBLISH_DELIVERY_ITEM.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~READ_DELIVERY.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~SAVE_AND_PUBLISH_BEFORE_OUTPUT.
  endmethod.
  method IF_EX_LE_SHP_DELIVERY_PROC~SAVE_AND_PUBLISH_DOCUMENT.
  endmethod.
  METHOD if_ex_le_shp_delivery_proc~save_document_prepare.
*  -------------------------------------------------------------*
*  add jtm 17.12.2021 WM  66494
*                        Tema plancha en las expediciones del 2001 y 2003 las
*                        posiciones de embalaje automatica no se deben expedir
*                        y en las entradas se debe determinar el almacén
    DATA: ex_object_cx_root TYPE REF TO cx_root,
          ex_text           TYPE string,
          ex_text_long      TYPE string.
    TRY.
        CALL FUNCTION 'ZSWM_MOD_ENTREGAS_EMBALAJE'
          CHANGING
            ct_xlikp = ct_xlikp
            ct_xlips = ct_xlips.

      CATCH cx_root INTO ex_object_cx_root.
        ex_text = ex_object_cx_root->get_text( ).
        ex_text_long = ex_object_cx_root->get_longtext( ).
    ENDTRY.

*  fin de add jtm 17.12.2021 Tema plancha
*  -------------------------------------------------------------*
    DATA: l_error TYPE flag.
    CLEAR l_error.

    LOOP AT ct_xlips INTO DATA(lw_xlips) WHERE uecha IS INITIAL.
      LOOP AT ct_xlips INTO DATA(lw_xlips_2) WHERE posnr <> lw_xlips-posnr
                                               AND vgbel = lw_xlips-vgbel
                                               AND vgpos = lw_xlips-vgpos
                                               AND uecha = space.
        l_error = 'X'.
        SELECT SINGLE *
          FROM vbak
          INTO @DATA(lw_vbak)
          WHERE vbeln = @lw_xlips-vgbel.
        EXIT.
      ENDLOOP.
      IF l_error = 'X'.
        EXIT.
      ENDIF.
    ENDLOOP.

    DATA: lw_log TYPE shp_badi_error_log.
    IF l_error = 'X'.
      READ TABLE ct_xlikp INTO DATA(lw_xlikp) WITH KEY vbeln = lw_xlips-vbeln.
      IF sy-subrc = 0 AND lw_vbak IS NOT INITIAL.
        SELECT SINGLE *
          INTO @DATA(lw_cond)
          FROM zssdt000_cond_mt
          WHERE zzvkorg = @lw_vbak-vkorg
            AND zzvtweg = @lw_vbak-vtweg
            AND zzspart = @lw_vbak-spart
            AND zzvstel = @lw_xlikp-vstel
            AND zzpstyv = @lw_xlips-pstyv.
        IF sy-subrc <> 0.
          "Si no hay registro no mostramos error
          CLEAR l_error.
        ENDIF.
      ELSE.
        "Si no encontramos nada no hacemos validación
        CLEAR l_error.
      ENDIF.
    ENDIF.


*    CLEAR l_error. "TODO: Crear tabla Z

    IF l_error = 'X'.
      MESSAGE e227(zsd).
*      lw_log-vbeln = lw_xlips_2-vbeln.
*      lw_log-posnr = lw_xlips_2-posnr.
*      lw_log-msgty = 'E'.
*      lw_log-msgid = 'ZSD'.
*      lw_log-msgno = '227'.
*      lw_log-msgv1 = ''.
*      lw_log-msgv2 = ''.
*      lw_log-msgv3 = ''.
*      lw_log-msgv4 = ''.
*      APPEND lw_log TO ct_log.
*      EXIT.
    ENDIF.

    DATA: lt_pos TYPE zssdtt01a,
          lw_pos TYPE zssds01a.

*    IF line_exists( ct_xlips[ zzmontaje = 'X' ] ).
    "Recuperamos los centros de Montaje para no tratar el siguiente código.
    SELECT * FROM zcmventa
      INTO TABLE @DATA(lt_cm).

    LOOP AT ct_xlips INTO lw_xlips WHERE zzmontaje = 'X' AND vbeln IS NOT INITIAL .
      "Comprobamos que no sea Centro de Mensaje
      READ TABLE lt_cm TRANSPORTING NO FIELDS WITH KEY werks = lw_xlips-werks lgort = lw_xlips-lgort.
      IF sy-subrc NE 0.

        READ TABLE ct_ylips INTO DATA(lw_ylips) WITH KEY vbeln = lw_xlips-vbeln posnr = lw_xlips-posnr.
        IF ( sy-subrc <> 0 ) OR ( sy-subrc = 0 AND lw_ylips-zzmontaje = '' ).
          lw_pos-vbeln_vl = lw_xlips-vbeln.
          lw_pos-posnr_vl = lw_xlips-posnr.
*        IF lw_xlips-vbeln IS INITIAL.
*          lw_pos-lfimg = lw_xlips-lfimg.
*        ENDIF.
          lw_pos-vrkme = lw_xlips-vrkme.
          lw_pos-vbeln_va = lw_xlips-vgbel.
          lw_pos-posnr_va = lw_xlips-vgpos.
          APPEND lw_pos TO lt_pos.
        ENDIF.

      ENDIF.
    ENDLOOP.

    IF lt_pos[] IS NOT INITIAL.
      CALL FUNCTION 'ZSSD01_MOD_PEDIDO'
        EXPORTING
          it_pedido = lt_pos.
    ENDIF.

*    ENDIF.

  ENDMETHOD.
endclass. "ZCL_IM_SSD_SHP_DELIVERY_PR definition
endclass. "ZCL_IM_SSD_SHP_DELIVERY_PR implementation
