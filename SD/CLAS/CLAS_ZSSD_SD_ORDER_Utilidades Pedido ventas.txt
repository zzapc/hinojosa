
CLASS zssd_sd_order DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    METHODS constructor
      IMPORTING
        i_vbeln TYPE vbeln_va .
    METHODS get_all
      IMPORTING
        i_posnr              TYPE posnr OPTIONAL
      EXPORTING
        ot_sales_doc         TYPE shp_sales_key_t
        ot_order_items       TYPE wiso_t_sdit
        ot_order_schedule    TYPE  bapisdhedutab
*        ot_order_business    TYPE zsdtt_bapisdbusi
*        ot_order_conditions  TYPE edi_sd_ordr_bapi_condition_tab
        ot_order_cond_header TYPE bbpt_cnd_mm_condhd
        ot_order_cond_item   TYPE bbpt_cnd_mm_condit
*        ot_order_textlines   TYPE bapitextli_t
*        ot_order_partners    TYPE edi_sd_ordr_bapi_p_address_tab
      .
    METHODS set_abgru
      IMPORTING
        i_posnr   TYPE posnr
        i_abgru   TYPE abgru
        i_commit  TYPE xfeld
      EXPORTING
        ot_return TYPE bapiret2_tab .

    METHODS set_all
      IMPORTING
        it_order_item     TYPE bapisditm_tt
        it_order_schedule TYPE cmp_t_schdl
*        it_order_conditions TYPE cod_tt_bapicond
        it_order_texts    TYPE bapisdtext_t
        i_commit          TYPE xfeld OPTIONAL
      EXPORTING
        ot_return         TYPE bapiret2_tab .
**************************************************************************
* Protected section of class. *
**************************************************************************
  PROTECTED SECTION.
**************************************************************************
* Private section of class. *
**************************************************************************
  PRIVATE SECTION.

    CONSTANTS c_u TYPE c VALUE 'U' ##NO_TEXT.
    DATA lt_sales_doc TYPE shp_sales_key_t .
    DATA lt_order_items TYPE wiso_t_sdit.
    DATA lt_order_schedule TYPE  bapisdhedutab.
*    DATA lt_order_business TYPE zsdtt_bapisdbusi .
*    DATA lt_order_conditions TYPE edi_sd_ordr_bapi_condition_tab .
    DATA lt_order_cond_header TYPE bbpt_cnd_mm_condhd .
    DATA lt_order_cond_item TYPE bbpt_cnd_mm_condit .
*    DATA lt_order_textlines TYPE bapitextli_t .
*    DATA lt_order_partners TYPE edi_sd_ordr_bapi_p_address_tab .
    DATA lv_vbeln TYPE vbeln_va .

    METHODS rellenar_flags
      IMPORTING
        i_nom_estruct TYPE any
        i_estruct     TYPE any
      CHANGING
        i_estructx    TYPE any .



**************************************************************************
* Types section of class. *
**************************************************************************


endclass. "ZSSD_SD_ORDER definition
class ZSSD_SD_ORDER implementation.
  METHOD constructor.

    lv_vbeln = i_vbeln.

    me->get_all(
*      EXPORTING
*        i_posnr              =                  " Item number of the SD document
      IMPORTING
        ot_sales_doc         =  lt_sales_doc
        ot_order_items       =  lt_order_items
        ot_order_schedule    =  lt_order_schedule
*        ot_order_business    =  lt_order_business
*        ot_order_conditions  =  lt_order_conditions
        ot_order_cond_header =  lt_order_cond_header
        ot_order_cond_item   =  lt_order_cond_item
*        ot_order_textlines   =  lt_order_textlines
*        ot_order_partners    =  lt_order_partners
    ).

  ENDMETHOD.
  METHOD get_all.

    REFRESH: ot_sales_doc, ot_order_cond_header,
             ot_order_cond_item.

    DATA i_bapi_view TYPE order_view.
    i_bapi_view = ' XXX    XX X     '.

    APPEND INITIAL LINE TO ot_sales_doc ASSIGNING FIELD-SYMBOL(<sales>).
    <sales>-vbeln = me->lv_vbeln.

    CALL FUNCTION 'BAPISDORDER_GETDETAILEDLIST'
      EXPORTING
        i_bapi_view         = i_bapi_view
        i_memory_read       = 'A' " Leer de la BBDD
      TABLES
        sales_documents     = ot_sales_doc
        order_items_out     = ot_order_items
        order_schedules_out = ot_order_schedule
*       order_business_out  = ot_order_business
*       order_conditions_out = ot_order_conditions
        order_cond_head     = ot_order_cond_header
        order_cond_item     = ot_order_cond_item
*       order_textlines_out = ot_order_textlines
*       order_partners_out  = ot_order_partners.
      .
    IF i_posnr IS NOT INITIAL.
      DATA(text_name) = me->lv_vbeln && i_posnr.
      DELETE ot_order_items      WHERE itm_number <> i_posnr.
      DELETE ot_order_schedule  WHERE itm_number <> i_posnr.
*      DELETE ot_order_business   WHERE itm_number <> i_posnr.
*      DELETE ot_order_conditions WHERE itm_number <> i_posnr.
      DELETE ot_order_cond_header      WHERE itm_number <> i_posnr.
      DELETE ot_order_cond_item      WHERE itm_number <> i_posnr.
*      DELETE ot_order_textlines  WHERE text_name  <> text_name.
    ENDIF.

*    DELETE ot_order_conditions WHERE condclass IS INITIAL.
*    DELETE ot_order_conditions WHERE makmanentr = 'D'.

  ENDMETHOD.
  METHOD rellenar_flags.

    DATA : lt_campos TYPE abap_compdescr_tab,
           lw_campos TYPE abap_compdescr,
           l_nombre  TYPE string.

    DATA : ref_table_des TYPE REF TO cl_abap_structdescr.
    FIELD-SYMBOLS: <f_valor> TYPE any, <f_flag> TYPE any.
    CLEAR i_estructx.

* Get the structure of the table.
    ref_table_des ?= cl_abap_typedescr=>describe_by_name( i_nom_estruct ).
    lt_campos[] = ref_table_des->components[].

    LOOP AT lt_campos INTO lw_campos.

      CONCATENATE 'i_estruct-' lw_campos-name INTO l_nombre.

      ASSIGN (l_nombre) TO <f_valor>.

      IF sy-subrc = 0.

        CONCATENATE 'i_estructx-' lw_campos-name INTO l_nombre.

        ASSIGN (l_nombre) TO <f_flag>.

        IF sy-subrc = 0.

          CLEAR <f_flag>.

          IF <f_valor> IS NOT INITIAL.

            <f_flag> = abap_true.

          ENDIF.

        ENDIF.

      ENDIF.

    ENDLOOP.

  ENDMETHOD.
  METHOD set_abgru.

    DATA: i_headerx         TYPE bapisdh1x,
          it_order_item     TYPE bapisditm_tt,
          it_order_schedule TYPE cmp_t_schdl,
*          it_order_conditions TYPE cod_tt_bapicond,
          it_order_texts    TYPE bapisdtext_t.

    REFRESH ot_return.

    me->get_all(
      EXPORTING
        i_posnr              =  i_posnr
      IMPORTING
        ot_sales_doc         = DATA(it_sales_doc)
        ot_order_items       = DATA(it_items)
        ot_order_schedule    = DATA(it_schedule)
*        ot_order_business    = DATA(it_business)
*        ot_order_conditions  = DATA(it_conditions)
        ot_order_cond_header = DATA(it_cond_hd)
        ot_order_cond_item   = DATA(it_cond_item)
*        ot_order_textlines   = DATA(it_text)
*        ot_order_partners    = DATA(it_partners)
    ).

    REFRESH: it_schedule, it_cond_hd, it_cond_item.

    LOOP AT it_items ASSIGNING FIELD-SYMBOL(<item>) WHERE itm_number = i_posnr.
      APPEND INITIAL LINE TO it_order_item ASSIGNING FIELD-SYMBOL(<item2>).
      <item2>-itm_number = <item>-itm_number.
      <item2>-reason_rej = i_abgru.
    ENDLOOP.

    me->set_all(
      EXPORTING
        it_order_item       = it_order_item
        it_order_schedule   = it_order_schedule
*        it_order_conditions = it_order_conditions
        it_order_texts      = it_order_texts
        i_commit            = i_commit
      IMPORTING
        ot_return           = ot_return
    ).

  ENDMETHOD.
  METHOD set_all.

    REFRESH ot_return.

    DATA: lt_order         TYPE bapisditm_tt,
          order_item_inx   TYPE TABLE OF bapisditmx,
          schedule_linesx  TYPE TABLE OF bapischdlx,
          conditions_inx   TYPE TABLE OF bapicondx,
          order_header_inx TYPE bapisdh1x.

    lt_order[] = it_order_item[].

    order_header_inx-updateflag = c_u.
    LOOP AT it_order_item INTO DATA(item).
      APPEND INITIAL LINE TO order_item_inx ASSIGNING FIELD-SYMBOL(<itemx>).
      me->rellenar_flags(
        EXPORTING
          i_nom_estruct = 'BAPISDITMX'
          i_estruct     = item
        CHANGING
          i_estructx    = <itemx>
      ).
      <itemx>-itm_number = item-itm_number.
      <itemx>-updateflag = c_u.
    ENDLOOP.

    LOOP AT it_order_schedule INTO DATA(sched).
      APPEND INITIAL LINE TO schedule_linesx ASSIGNING FIELD-SYMBOL(<sched>).

      me->rellenar_flags(
    EXPORTING
      i_nom_estruct = 'BAPISCHDLX'
      i_estruct     = sched
    CHANGING
      i_estructx    = <sched>
      ).

      <sched>-itm_number = sched-itm_number.
      <sched>-sched_line = sched-sched_line.
      <sched>-updateflag = c_u.

    ENDLOOP.
    DATA(lt_sched) = it_order_schedule[].

*    LOOP AT it_order_conditions INTO DATA(cond).
*      APPEND INITIAL LINE TO conditions_inx ASSIGNING FIELD-SYMBOL(<cond>).
*      me->rellenar_flags(
*    EXPORTING
*      i_nom_estruct = 'BAPICONDX'
*      i_estruct     = cond
*    CHANGING
*      i_estructx    = <cond>
*      ).
*
*      <cond>-itm_number = cond-itm_number.
*      <cond>-cond_st_no = cond-cond_st_no.
*      <cond>-cond_count = cond-cond_count.
*      <cond>-cond_type = cond-cond_type.
*      <cond>-updateflag = c_u.
*      <cond>-cond_unit = cond-cond_p_unt.
*      <cond>-cond_unit = 'X'.
*    ENDLOOP.
*    DATA(lt_cond) = it_order_conditions[].
    DATA(lt_texts) = it_order_texts[].

    CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
      EXPORTING
        salesdocument    = me->lv_vbeln
        order_header_inx = order_header_inx
*       logic_switch     = logic_switch
      TABLES
        return           = ot_return
        order_item_in    = lt_order
        order_item_inx   = order_item_inx
        schedule_lines   = lt_sched
        schedule_linesx  = schedule_linesx
*       conditions_in    = lt_cond
        conditions_inx   = conditions_inx
        order_text       = lt_texts.

    IF i_commit EQ 'X'.
*      SELECT SINGLE type FROM @ot_return AS tabla WHERE type IN ('A', 'E', 'X') INTO @DATA(type).
      LOOP AT ot_return TRANSPORTING NO FIELDS WHERE type EQ 'A' OR type EQ 'X' OR type EQ 'E'.
        EXIT.
      ENDLOOP.
      IF sy-subrc = 0.
        ROLLBACK WORK.
      ELSE.
        COMMIT WORK AND WAIT.
      ENDIF.
    ENDIF.

  ENDMETHOD.
