
class ZSSD_IF_OMP_ORDERS definition
  public
  final
  create public .

public section.

  methods DELETE_DOCUMENT
    importing
      !FT180 type T180
    changing
      !FVBAK type VBAK
      !FXVBAP type VA_VBAPVB_T
      !FXVBKD type VA_VBKDVB_T
      !FXVBPA type VA_VBPAVB_T
      !FXVBEP type VA_VBEPVB_T
      !FXVBUK type VA_VBUKVB_T .
  methods SAVE_DOCUMENT
    importing
      !F_UPDKZ type UPDKZ_D
      !FT180 type T180
    changing
      !FYVBLB type VA_VBLBVB_T
      !FXVBLB type VA_VBLBVB_T
      !FYVBADR type SHP_SADRVB_T
      !FXVBADR type SHP_SADRVB_T
      !FYVBFA type VA_VBFAVB_T
      !FYVBEP type VA_VBEPVB_T
      !FYVBKD type VA_VBKDVB_T
      !FYVBPA type VA_VBPAVB_T
      !FYVBUK type VA_VBUKVB_T
      !FYVBUP type VA_VBUPVB_T
      !FYFPLA type VA_FPLAVB_T
      !FYFPLT type VA_FPLTVB_T
      !FVBAK type VBAK
      !FXVBAP type VA_VBAPVB_T
      !FXKOMV type VA_KOMV_T
      !FXVBAPF type VA_VBAPF_T
      !FXVBFA type VA_VBFAVB_T
      !FXVBEP type VA_VBEPVB_T
      !FXVBKD type VA_VBKDVB_T
      !FXVBPA type VA_VBPAVB_T
      !FXVBUK type VA_VBUKVB_T
      !FXVBUP type VA_VBUPVB_T
      !FXFPLA type VA_FPLAVB_T
      !FXFPLT type VA_FPLTVB_T
      !FYVBAK type VBAK
      !FYVBAPF type VA_VBAPF_T
      !FYVBAP type VA_VBAPVB_T .
protected section.
private section.
endclass. "ZSSD_IF_OMP_ORDERS definition
class ZSSD_IF_OMP_ORDERS implementation.
  METHOD delete_document.
    DATA: vl_lanzar_job TYPE xflag.

    CLEAR vl_lanzar_job.

    "
    " Recorremos los repartos del pedido y borramos.
    "
    LOOP AT fxvbep ASSIGNING FIELD-SYMBOL(<fs_xvbep>).

      SELECT SINGLE *
        FROM zssd_if_omp_tr
        INTO @DATA(wl_zssd_if_omp_tr)
        WHERE vbeln = @fvbak-vbeln AND
              posnr = @<fs_xvbep>-posnr AND
              etenr = @<fs_xvbep>-etenr.
      IF sy-subrc <> 0.
        SELECT SINGLE *
          FROM zssd_if_omp_tr_p
          INTO @DATA(wl_zssd_if_omp_tr_p)
          WHERE vbeln = @fvbak-vbeln AND
                posnr = @<fs_xvbep>-posnr AND
                etenr = @<fs_xvbep>-etenr.
      ENDIF.
      CHECK sy-subrc = 0.

      "
      " Buscamos la posición padre. Valor actual.
      "
      READ TABLE fxvbap ASSIGNING FIELD-SYMBOL(<fs_xvbap>) WITH KEY posnr = <fs_xvbep>-posnr.
      CHECK sy-subrc = 0.
      "
      " Mandamos a OMP la información del requisito.
      "
      CALL FUNCTION 'ZSD_IF_OMP_TRANS_REQ_VBEP_PDTE'
        EXPORTING
          vp_accion = 'B'
          vp_vbeln  = fvbak-vbeln
          vp_posnr  = <fs_xvbep>-posnr
          vp_etenr  = <fs_xvbep>-etenr
          wp_vbak   = fvbak
          wp_vbap   = <fs_xvbap>
          wp_vbep   = <fs_xvbep>
          tp_vbkd   = fxvbkd
          tp_vbpa   = fxvbpa.

      vl_lanzar_job = 'X'.
    ENDLOOP.

    SELECT *
        FROM vbep
        INTO TABLE @DATA(tl_vbep)
        WHERE vbeln = @fvbak-vbeln.
    LOOP AT tl_vbep ASSIGNING FIELD-SYMBOL(<fs_vbep>).
      " Confirmar que se ha enviado a OMP
      SELECT SINGLE *
        FROM zssd_if_omp_tr
        INTO wl_zssd_if_omp_tr
        WHERE vbeln = fvbak-vbeln AND
              posnr = <fs_vbep>-posnr AND
              etenr = <fs_vbep>-etenr.
      IF sy-subrc <> 0.
        SELECT SINGLE *
          FROM zssd_if_omp_tr_p
          INTO wl_zssd_if_omp_tr_p
          WHERE vbeln = fvbak-vbeln AND
                posnr = <fs_vbep>-posnr AND
                etenr = <fs_vbep>-etenr.
      ENDIF.
      CHECK sy-subrc = 0.
      " Confirmar que no está en la tabla de cambios.
      READ TABLE fxvbep ASSIGNING <fs_xvbep> WITH KEY posnr = <fs_vbep>-posnr etenr = <fs_vbep>-etenr.
      IF sy-subrc <> 0.
        "
        " Mandamos a OMP la información del requisito.
        "
        CALL FUNCTION 'ZSD_IF_OMP_TRANS_REQ_VBEP_PDTE'
          EXPORTING
            vp_accion = 'M'
            vp_vbeln  = fvbak-vbeln
            vp_posnr  = <fs_vbep>-posnr
            vp_etenr  = <fs_vbep>-etenr.
*              wp_vbak   = fvbak
*              wp_vbap   = <fs_xvbap>
*              wp_vbep   = <fs_xvbep>
*              tp_vbkd   = fxvbkd
*              tp_vbpa   = fxvbpa.

        vl_lanzar_job = 'X'.
      ENDIF.
    ENDLOOP.

    IF vl_lanzar_job IS NOT INITIAL.
      CALL FUNCTION 'ZSD_IF_OMP_TRANS_REQ_SEND'.
    ENDIF.

  ENDMETHOD.
  METHOD save_document.
    " Ver clase de referencia IF_EX_BADI_SD_SALES
    " CL_EX_BADI_SD_SALES
    DATA: vl_bloquear         TYPE xflag,
          vl_liberar          TYPE xflag,
          vl_bloquear_reparto TYPE xflag,
          vl_liberar_reparto  TYPE xflag,
          vl_en_omp           TYPE xflag,
          vl_accion           TYPE zif_omp_trans_req_accion.
    DATA: vl_vbeln   TYPE vbep-vbeln,
          vl_num_req TYPE zssd_if_omp_tp_r-num_req.

    DATA: vl_lanzar_job TYPE xflag.

    DATA: rl_lifsk_fullfilled TYPE RANGE OF vbak-lifsk.

    CLEAR: rl_lifsk_fullfilled.
    APPEND INITIAL LINE TO rl_lifsk_fullfilled ASSIGNING FIELD-SYMBOL(<fs_rl_lifsk>).
    <fs_rl_lifsk>-option = 'EQ'.
    <fs_rl_lifsk>-sign = 'I'.
    <fs_rl_lifsk>-low = 'ZS'.


    CLEAR: vl_bloquear,
          vl_liberar,
          vl_accion.

    CLEAR vl_lanzar_job.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = fvbak-vbeln
      IMPORTING
        output = vl_vbeln.

*    IF fvbak-lifsk IS NOT INITIAL AND fyvbak-lifsk IS INITIAL.
*      vl_bloquear = 'X'.
*    ENDIF.
*    IF fvbak-lifsk IS NOT INITIAL AND
*      fyvbak-lifsk IS NOT INITIAL AND
*      fvbak-lifsk <> fyvbak-lifsk.
*      vl_bloquear = 'X'.
*    ENDIF.
*
*    IF fvbak-lifsk IS INITIAL AND fyvbak-lifsk IS NOT INITIAL.
*      vl_liberar = 'X'.
*    ENDIF.
    " Nuevo cálculo.
    DATA: vl_bloqueo_entrega_old TYPE xflag,
          vl_bloqueo_entrega_new TYPE xflag.

    CALL FUNCTION 'ZSD_IF_OMP_ES_BLOQ_ENTREGA'
      EXPORTING
        vp_lifsk   = fyvbak-lifsk
      IMPORTING
        vp_bloqueo = vl_bloqueo_entrega_old.
    CALL FUNCTION 'ZSD_IF_OMP_ES_BLOQ_ENTREGA'
      EXPORTING
        vp_lifsk   = fvbak-lifsk
      IMPORTING
        vp_bloqueo = vl_bloqueo_entrega_new.

    IF vl_bloqueo_entrega_new IS NOT INITIAL AND vl_bloqueo_entrega_old IS INITIAL.
      vl_bloquear = 'X'.
    ENDIF.
    IF vl_bloqueo_entrega_new IS NOT INITIAL AND
      vl_bloqueo_entrega_old IS NOT INITIAL AND
      fvbak-lifsk <> fyvbak-lifsk.
      vl_bloquear = 'X'.
    ENDIF.

    IF vl_bloqueo_entrega_new IS INITIAL AND vl_bloqueo_entrega_old IS NOT INITIAL.
      vl_liberar = 'X'.
    ENDIF.

    "
    " Recorremos los repartos del pedido y decidimos las acciones a realizar.
    "
    LOOP AT fxvbep ASSIGNING FIELD-SYMBOL(<fs_xvbep>).

      "
      " RMM Para fecha de carga, ponemos como hora fija las 23:00. Sólo para las altas.
      "
***      IF <fs_xvbep>-updkz = 'I'.
***        <fs_xvbep>-ezeit = '230000'.
***      ENDIF.

      CLEAR vl_accion.

      "
      " Miramos si ya se envió a OMP.
      "
      CLEAR vl_en_omp.
      SELECT SINGLE *
        FROM zssd_if_omp_tr
        INTO @DATA(wl_zssd_if_omp_tr)
        WHERE vbeln = @fvbak-vbeln AND
              posnr = @<fs_xvbep>-posnr AND
              etenr = @<fs_xvbep>-etenr.
      IF sy-subrc <> 0.
        SELECT SINGLE *
          FROM zssd_if_omp_tr_p
          INTO @DATA(wl_zssd_if_omp_tr_p)
          WHERE vbeln = @fvbak-vbeln AND
                posnr = @<fs_xvbep>-posnr AND
                etenr = @<fs_xvbep>-etenr.
      ENDIF.
      IF sy-subrc = 0.
        vl_en_omp = 'X'.
      ENDIF.

      IF vl_en_omp IS INITIAL.
        " Si no se ha enviado a OMP, como si fuera un alta.
        vl_accion = 'A'.
      ENDIF.

      "
      " Buscamos la posición padre. Valor actual.
      "
      READ TABLE fxvbap ASSIGNING FIELD-SYMBOL(<fs_xvbap>) WITH KEY posnr = <fs_xvbep>-posnr.

      READ TABLE fyvbap ASSIGNING FIELD-SYMBOL(<fs_yvbap>) WITH KEY posnr = <fs_xvbep>-posnr.
      IF sy-subrc = 0 AND vl_en_omp = 'X'.
        IF <fs_xvbap>-zzfconfs <> <fs_yvbap>-zzfconfs OR
          <fs_xvbap>-vstel <> <fs_yvbap>-vstel OR
          <fs_xvbap>-uebto <> <fs_yvbap>-uebto OR
          <fs_xvbap>-untto <> <fs_yvbap>-untto OR
          <fs_xvbap>-grkor <> <fs_yvbap>-grkor.
          vl_accion = 'M'.
        ENDIF.
      ENDIF.

      "
      " Buscamos los valores anteriores.
      "
      READ TABLE fyvbep ASSIGNING FIELD-SYMBOL(<fs_yvbep>)
        WITH KEY posnr = <fs_xvbep>-posnr etenr = <fs_xvbep>-etenr.
      IF sy-subrc = 0 AND vl_en_omp = 'X'.

        IF <fs_xvbep>-bmeng <> <fs_yvbep>-bmeng OR " Cantidad confirmada
          <fs_xvbep>-edatu <> <fs_yvbep>-edatu OR " Fecha de entrega
          <fs_xvbep>-ezeit <> <fs_yvbep>-ezeit OR " Hora de entrega
          <fs_xvbep>-lddat <> <fs_yvbep>-lddat OR " Fecha de carga
          <fs_xvbep>-lduhr <> <fs_yvbep>-lduhr OR " Hora de carga
          <fs_xvbep>-tddat <> <fs_yvbep>-tddat OR " Fecha de planificación de transporte
          <fs_xvbep>-tduhr <> <fs_yvbep>-tduhr. " Hora de planificación de transporte
          vl_accion = 'M'.
        ENDIF.

      ENDIF.

      IF vl_en_omp = 'X'.
        LOOP AT fyvbpa ASSIGNING FIELD-SYMBOL(<fs_yvbpa>) WHERE parvw = 'WE' OR parvw = 'AG'.
          vl_accion = 'M'.
          EXIT.
        ENDLOOP.
      ENDIF.

      CLEAR: vl_bloquear_reparto, vl_liberar_reparto.
      IF vl_bloquear IS INITIAL AND vl_liberar IS INITIAL.
        "
        " comprobamos a nivel de reparto.
        "
        IF <fs_yvbep> IS ASSIGNED.
          CALL FUNCTION 'ZSD_IF_OMP_ES_BLOQ_ENTREGA'
            EXPORTING
              vp_lifsk   = <fs_yvbep>-lifsp
            IMPORTING
              vp_bloqueo = vl_bloqueo_entrega_old.
        ENDIF.
        IF <fs_xvbep>-lifsp IS ASSIGNED.
          CALL FUNCTION 'ZSD_IF_OMP_ES_BLOQ_ENTREGA'
            EXPORTING
              vp_lifsk   = <fs_xvbep>-lifsp
            IMPORTING
              vp_bloqueo = vl_bloqueo_entrega_new.
        ENDIF.
        IF vl_bloqueo_entrega_new IS NOT INITIAL AND vl_bloqueo_entrega_old IS INITIAL.
          vl_bloquear_reparto = 'X'.
        ENDIF.
        IF vl_bloqueo_entrega_new IS NOT INITIAL AND
          vl_bloqueo_entrega_old IS NOT INITIAL AND
          <fs_yvbep> IS ASSIGNED AND
          <fs_xvbep> IS ASSIGNED AND
          <fs_xvbep>-lifsp <> <fs_yvbep>-lifsp.
          vl_bloquear_reparto = 'X'.
        ENDIF.

        IF vl_bloqueo_entrega_new IS INITIAL AND vl_bloqueo_entrega_old IS NOT INITIAL.
          vl_liberar_reparto = 'X'.
        ENDIF.
      ENDIF.


      IF vl_en_omp IS NOT INITIAL AND
        <fs_yvbep> IS ASSIGNED AND
        ( vl_bloquear IS NOT INITIAL OR
          vl_liberar IS NOT INITIAL OR
          vl_bloquear_reparto IS NOT INITIAL OR
          vl_liberar_reparto IS NOT INITIAL ).
        " Mandamos actualizaciones de estados.
        vl_accion = 'M'.
      ENDIF.

      IF <fs_xvbep>-lifsp IS ASSIGNED AND
        <fs_yvbep> IS ASSIGNED AND
        <fs_xvbep>-lifsp IN rl_lifsk_fullfilled.
        vl_accion = 'F'. "Terminar
      ENDIF.
      IF <fs_yvbep> IS ASSIGNED AND
        fvbak-lifsk IN rl_lifsk_fullfilled.
        vl_accion = 'F'. "Terminar
      ENDIF.


      IF vl_en_omp IS NOT INITIAL AND
        <fs_xvbap>-abgru IS NOT INITIAL. "Posición rechazada.
        vl_accion = 'B'. "Baja.
      ENDIF.



      IF vl_en_omp IS NOT INITIAL AND
         <fs_xvbep>-bmeng = 0.
        " Acción para poner en onHold. Es un reparto que han cambiado la fecha tras el envío y no se puede confirmar la
        " cantidad. Si cambiaran la fecha, el número de reparto sigue siendo el mismo, por eso no lo puedo dar de baja.
        vl_accion = 'X'.
      ENDIF.

      IF vl_en_omp IS NOT INITIAL AND
        <fs_xvbep>-updkz = 'I'.
        vl_accion = 'A'.
      ENDIF.

      IF vl_en_omp IS NOT INITIAL AND
        ( <fs_xvbap>-updkz = 'D' OR
          <fs_xvbep>-updkz = 'D' ).
        vl_accion = 'B'.
      ENDIF.

      IF vl_accion = 'A' AND <fs_xvbep>-bmeng = 0. CONTINUE. ENDIF.

      IF vl_en_omp IS INITIAL AND
        ( <fs_xvbap>-updkz = 'D' OR
          <fs_xvbep>-updkz = 'D' ).
        " Si la posición está borrada, pero no se ha mandado a OMP, ignoramos.
        CONTINUE.
      ENDIF.

      IF vl_accion IS INITIAL.
        LOOP AT fxvbpa ASSIGNING FIELD-SYMBOL(<fs_xvbpa>).
          IF <fs_xvbpa>-posnr IS INITIAL AND <fs_xvbpa>-updkz IS NOT INITIAL.
            vl_accion = 'M'.
            EXIT.
          ENDIF.
          IF <fs_xvbpa>-posnr = <fs_xvbep>-posnr AND <fs_xvbpa>-updkz IS NOT INITIAL.
            vl_accion = 'M'.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.

      " Confirmar que no está procesada e incluida en un transporte.
      CONCATENATE vl_vbeln '.' <fs_xvbep>-posnr '.' <fs_xvbep>-etenr INTO vl_num_req.
      SELECT SINGLE *
        FROM zssd_if_omp_tp_r
        INTO @DATA(wl_zssd_if_omp_tp_r)
        WHERE num_req = @vl_num_req.
      IF sy-subrc = 0.
        CLEAR vl_accion.
      ENDIF.

      IF vl_accion IS NOT INITIAL.
        "
        " Mandamos a OMP la información del requisito.
        "
        DATA vl_seleccionado TYPE xflag.
        CALL FUNCTION 'ZSD_IF_OMP_TRANS_REQ_VBEP_PDTE'
*          IN UPDATE TASK
          EXPORTING
            vp_accion       = vl_accion
            vp_vbeln        = fvbak-vbeln
            vp_posnr        = <fs_xvbep>-posnr
            vp_etenr        = <fs_xvbep>-etenr
            wp_vbak         = fvbak
            wp_vbap         = <fs_xvbap>
            wp_vbep         = <fs_xvbep>
            tp_vbkd         = fxvbkd
            tp_vbpa         = fxvbpa
            tp_vbuk         = fxvbuk
          IMPORTING
            vp_seleccionado = vl_seleccionado.

        IF vl_seleccionado IS NOT INITIAL.
          vl_lanzar_job = 'X'.
        ENDIF.

        IF vl_seleccionado IS INITIAL AND vl_accion = 'M' AND vl_en_omp IS NOT INITIAL.
          "
          " Tenemos que revisar si antes de la modificación sí que se había enviado para anular
          "
          CALL FUNCTION 'ZSD_IF_OMP_TRANS_REQ_VBEP_PDTE'
*          IN UPDATE TASK
            EXPORTING
              vp_accion       = 'B'
              vp_vbeln        = fvbak-vbeln
              vp_posnr        = <fs_xvbep>-posnr
              vp_etenr        = <fs_xvbep>-etenr
              wp_vbak         = fvbak
              wp_vbap         = <fs_xvbap>
              wp_vbep         = <fs_xvbep>
              tp_vbkd         = fxvbkd
              tp_vbpa         = fxvbpa
              tp_vbuk         = fxvbuk
              vp_forzar_envio = 'X'.

          vl_lanzar_job = 'X'.
        ENDIF.
      ENDIF.

    ENDLOOP.

    IF vl_bloquear IS NOT INITIAL OR vl_liberar IS NOT INITIAL.
      " Buscamos el resto de posiciones y mandamos modificación.
      SELECT *
        FROM vbep
        INTO TABLE @DATA(tl_vbep)
        WHERE vbeln = @fvbak-vbeln.
      LOOP AT tl_vbep ASSIGNING FIELD-SYMBOL(<fs_vbep>).
        " Confirmar que se ha enviado a OMP
        SELECT SINGLE *
          FROM zssd_if_omp_tr
          INTO wl_zssd_if_omp_tr
          WHERE vbeln = fvbak-vbeln AND
                posnr = <fs_vbep>-posnr AND
                etenr = <fs_vbep>-etenr.
        IF sy-subrc <> 0.
          SELECT SINGLE *
            FROM zssd_if_omp_tr_p
            INTO wl_zssd_if_omp_tr_p
            WHERE vbeln = fvbak-vbeln AND
                  posnr = <fs_vbep>-posnr AND
                  etenr = <fs_vbep>-etenr.
        ENDIF.
        CHECK sy-subrc = 0.
        " Confirmar que no está procesada e incluida en un transporte.
        CONCATENATE vl_vbeln '.' <fs_vbep>-posnr '.' <fs_vbep>-etenr INTO vl_num_req.
        SELECT SINGLE *
          FROM zssd_if_omp_tp_r
          INTO wl_zssd_if_omp_tp_r
          WHERE num_req = vl_num_req.
        CHECK sy-subrc <> 0.

        " Confirmar que no está en la tabla de cambios.
        READ TABLE fxvbep ASSIGNING <fs_xvbep> WITH KEY posnr = <fs_vbep>-posnr etenr = <fs_vbep>-etenr.
        IF sy-subrc <> 0.
          "
          " Mandamos a OMP la información del requisito.
          "
          vl_accion = 'M'.
          IF fvbak-lifsk IN rl_lifsk_fullfilled.
            vl_accion = 'F'. "Terminar
          ENDIF.
          CALL FUNCTION 'ZSD_IF_OMP_TRANS_REQ_VBEP_PDTE'
*            IN UPDATE TASK
            EXPORTING
              vp_accion       = vl_accion
              vp_vbeln        = fvbak-vbeln
              vp_posnr        = <fs_vbep>-posnr
              vp_etenr        = <fs_vbep>-etenr
*             wp_vbak         = fvbak
*             wp_vbap         = <fs_xvbap>
*             wp_vbep         = <fs_xvbep>
*             tp_vbkd         = fxvbkd
*             tp_vbpa         = fxvbpa.
            IMPORTING
              vp_seleccionado = vl_seleccionado.

          IF vl_seleccionado IS NOT INITIAL.
            vl_lanzar_job = 'X'.
          ENDIF.
        ENDIF.
      ENDLOOP.

    ENDIF.

    IF vl_lanzar_job IS NOT INITIAL.
      CALL FUNCTION 'ZSD_IF_OMP_TRANS_REQ_SEND'.
    ENDIF.


  ENDMETHOD.
