
class ZCL_ZRSD0033_TRANSPORTES definition
  public
  final
  create public .

public section.

  constants C_STTRG_DESPACHO_EXPED type VTTK-STTRG value '5' ##NO_TEXT.
  constants C_STTRG_INICIO_TRANSPORTE type VTTK-STTRG value '6' ##NO_TEXT.
  constants C_STTRG_FIN_TRANSPORTE type VTTK-STTRG value '7' ##NO_TEXT.

  class-methods CONVERTIR_TABLA_TEXTO_A_STRING
    importing
      !TP_TEXTO type TLINE_TAB
    returning
      value(VP_TEXTO) type STRING .
  methods TRANSPORTES_LIN_GETLIST
    importing
      value(VP_TKNUM) type ZRSD0033_S_TRANSPORTES_LIN-TKNUM optional
      value(VP_TDLNR) type ZRSD0033_S_TRANSPORTES_LIN-TDLNR optional
      value(VP_CLA_DESPACHADO) type XFELD optional
    returning
      value(TP_TRANSPORTES) type ZRSD0033_T_TRANSPORTES_LIN
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods TRANSPORTES_LIN_GETDETAIL
    importing
      value(VP_TKNUM) type ZRSD0033_S_TRANSPORTES_LIN-TKNUM
    returning
      value(WP_TRANSPORTE) type ZRSD0033_S_TRANSPORTES_LIN
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
protected section.

  methods TRANSPORTES_LIN_GETLIST_EXT
    changing
      value(TP_TRANSPORTES) type ZRSD0033_T_TRANSPORTES_LIN
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
private section.
endclass. "ZCL_ZRSD0033_TRANSPORTES definition
class ZCL_ZRSD0033_TRANSPORTES implementation.
  METHOD convertir_tabla_texto_a_string.
    DATA: vp_fecha     TYPE d,
          vp_hora      TYPE t,
          tp_texto_out LIKE tp_texto,
          vp_user      TYPE sy-uname.


*    CLEAR: vp_user, vp_fecha, vp_hora, vp_texto, tp_texto_out.

    DATA tl_texto_aux LIKE tp_texto.
    DATA: tl_cabecera       TYPE TABLE OF string.
    DATA: vl_token_cabecera TYPE string.
    DATA vl_line    TYPE tdline.
    DATA vl_format  TYPE tdformat.



    LOOP AT tp_texto ASSIGNING FIELD-SYMBOL(<fs_texto>).
      IF <fs_texto>-tdformat = '>X'.
        <fs_texto>-tdformat = <fs_texto>-tdline(2).
        <fs_texto>-tdline = <fs_texto>-tdline+2.
      ENDIF.
    ENDLOOP.

    LOOP AT tp_texto ASSIGNING <fs_texto>.
*      IF <fs_texto>-tdformat = '* '.
*        " * ----------------------------------------
*        " * 30.01.2018 13:26:16 SEIS SEIS (SEIS)
*        CLEAR: vp_user, vp_fecha, vp_hora, vp_texto, tp_texto_out.
*        SPLIT <fs_texto>-tdline AT space INTO TABLE tl_cabecera.
*        CHECK lines( tl_cabecera ) > 2.
*
*        READ TABLE tl_cabecera INTO vl_token_cabecera INDEX 2.
*        IF sy-subrc = 0.
*          CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
*            EXPORTING
*              date_external            = vl_token_cabecera
*            IMPORTING
*              date_internal            = vp_fecha
*            EXCEPTIONS
*              date_external_is_invalid = 1
*              OTHERS                   = 2.
*        ENDIF.
*
*        IF sy-subrc = 0.
*          READ TABLE tl_cabecera INTO vl_token_cabecera INDEX 3.
*          IF sy-subrc = 0.
*            CALL FUNCTION 'CONVERT_TIME_INPUT'
*              EXPORTING
*                input                     = vl_token_cabecera
*              IMPORTING
*                output                    = vp_hora
*              EXCEPTIONS
*                plausibility_check_failed = 1
*                wrong_format_in_input     = 2
*                OTHERS                    = 3.
*          ENDIF.
*        ENDIF.
*
*        IF sy-subrc <> 0.
*          CLEAR: vp_fecha, vp_hora.
*        ENDIF.
*
*      ELSE.
        vl_line   = <fs_texto>-tdline.
        vl_format = <fs_texto>-tdformat.

        IF vp_texto IS INITIAL.
          vp_texto = vl_line.
        ELSE.
          IF vl_format IS NOT INITIAL OR vl_format <> '='.
            CONCATENATE vp_texto vl_line INTO vp_texto SEPARATED BY cl_abap_char_utilities=>cr_lf.
          ELSE.
            CONCATENATE vp_texto vl_line INTO vp_texto SEPARATED BY space.
          ENDIF.
        ENDIF.

        APPEND INITIAL LINE TO tp_texto_out ASSIGNING FIELD-SYMBOL(<fs_texto_out>).
        <fs_texto_out>-tdformat = vl_format.
        <fs_texto_out>-tdline   = vl_line.

        REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>cr_lf    IN <fs_texto_out>-tdline WITH ''.
        REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>newline  IN <fs_texto_out>-tdline WITH ''.
        REPLACE ALL OCCURRENCES OF '##'  IN <fs_texto_out>-tdline WITH ''.

*      ENDIF.


    ENDLOOP.

  ENDMETHOD.
  method TRANSPORTES_LIN_GETDETAIL.
  endmethod.
  METHOD transportes_lin_getlist.

    DATA tl_tknum_rg TYPE RANGE OF vttk-tknum.
    DATA tl_tdlnr_rg TYPE RANGE OF vttk-tdlnr.
    DATA tl_sttrg_rg TYPE RANGE OF vttk-sttrg.


    IF vp_tknum IS NOT INITIAL.
      tl_tknum_rg = VALUE #( ( sign = 'I' option = 'EQ' low = vp_tknum ) ).
    ENDIF.
    IF vp_tdlnr IS NOT INITIAL.
      tl_tdlnr_rg = VALUE #( ( sign = 'I' option = 'EQ' low = vp_tdlnr ) ).
    ENDIF.

    IF vp_cla_despachado IS SUPPLIED.
      DATA(vl_sign) = SWITCH #( vp_cla_despachado WHEN 'X' THEN 'I' ELSE 'E' ).
      tl_sttrg_rg = VALUE #( sign = vl_sign option = 'EQ' ( low = c_sttrg_despacho_exped )
                                                          ( low = c_sttrg_inicio_transporte )
                                                          ( low = c_sttrg_fin_transporte ) ).
    ENDIF.

    SELECT vttk~tknum, vttk~tdlnr, vttk~sttrg, vttp~vbeln,
           lips~posnr, lips~werks, lips~matnr, lips~kdmat,
           likp~kunag, likp~kunnr, likp~anzpk
      INTO CORRESPONDING FIELDS OF TABLE @tp_transportes
      FROM vttk INNER JOIN vttp LEFT OUTER JOIN ( lips INNER JOIN likp ON likp~vbeln = lips~vbeln )
                                ON lips~vbeln = vttp~vbeln
                ON vttp~tknum = vttk~tknum
      WHERE vttk~tknum IN @tl_tknum_rg AND
            vttk~tdlnr IN @tl_tdlnr_rg AND
            vttk~sttrg IN @tl_sttrg_rg.


    transportes_lin_getlist_ext( CHANGING tp_transportes = tp_transportes ).
  ENDMETHOD.
  METHOD transportes_lin_getlist_ext.

    CHECK tp_transportes IS NOT INITIAL.

    DATA tl_lines TYPE TABLE OF tline.


    SELECT kunnr, name1, ort01
      INTO TABLE @DATA(tl_kna1_kunnr)
      FROM kna1
      FOR ALL ENTRIES IN @tp_transportes
      WHERE kunnr = @tp_transportes-kunnr.

    SELECT kunnr, name1
      INTO TABLE @DATA(tl_kna1_kunag)
      FROM kna1
      FOR ALL ENTRIES IN @tp_transportes
      WHERE kunnr = @tp_transportes-kunag.




    SELECT aufk~kdauf, aufk~kdpos, aufk~werks, aufk~aufnr,
           afko~gltrs, afko~gluzs, afko~gamng,
           afko~gltrp, afko~gsuzp, afko~gluzp
      INTO TABLE @DATA(tl_aufk)
      FROM aufk INNER JOIN afko ON afko~aufnr EQ aufk~aufnr
      FOR ALL ENTRIES IN @tp_transportes
      WHERE aufk~kdauf = @tp_transportes-vbeln AND
            aufk~kdpos = @tp_transportes-posnr AND
            aufk~werks = @tp_transportes-werks AND
            NOT EXISTS ( SELECT * FROM jest WHERE jest~objnr = aufk~objnr  AND
                                                  jest~inact = @space      AND
                                                  jest~stat  IN ('I0045', 'I0076') ).
    SORT tl_aufk BY kdauf kdpos werks
                    gltrs DESCENDING gluzs DESCENDING gamng DESCENDING.


    LOOP AT tp_transportes ASSIGNING FIELD-SYMBOL(<fs_transportes>).
*      <fs_transportes>-tdid     = '0001'.
      <fs_transportes>-tdid     = '0003'.
      <fs_transportes>-tdspras  = 'S'.
      <fs_transportes>-tdname   = <fs_transportes>-tknum.
      <fs_transportes>-tdobject = 'VTTK'.

      CLEAR tl_lines.
      CALL FUNCTION 'READ_TEXT'
        EXPORTING
          id       = <fs_transportes>-tdid
          language = <fs_transportes>-tdspras
          name     = <fs_transportes>-tdname
          object   = <fs_transportes>-tdobject
        TABLES
          lines    = tl_lines
        EXCEPTIONS
          OTHERS   = 1.
      IF sy-subrc = 0.
        <fs_transportes>-texto = convertir_tabla_texto_a_string( tl_lines ).
      ELSE.
        CLEAR: <fs_transportes>-tdid, <fs_transportes>-tdspras, <fs_transportes>-tdname, <fs_transportes>-tdobject.
      ENDIF.


      READ TABLE tl_kna1_kunag ASSIGNING FIELD-SYMBOL(<fs_kna1_kunag>) WITH KEY kunnr = <fs_transportes>-kunag.
      IF sy-subrc = 0.
        <fs_transportes>-name1_kunag = <fs_kna1_kunag>-name1.
      ENDIF.
      READ TABLE tl_kna1_kunnr ASSIGNING FIELD-SYMBOL(<fs_kna1_kunnr>) WITH KEY kunnr = <fs_transportes>-kunnr.
      IF sy-subrc = 0.
        <fs_transportes>-name1_kunnr  = <fs_kna1_kunnr>-name1.
        <fs_transportes>-ort01        = <fs_kna1_kunnr>-ort01.
      ENDIF.


      READ TABLE tl_aufk ASSIGNING FIELD-SYMBOL(<fs_aufk>) WITH KEY kdauf = <fs_transportes>-vbeln
                                                                    kdpos = <fs_transportes>-posnr
                                                                    werks = <fs_transportes>-werks.
      IF sy-subrc = 0.
        <fs_transportes>-aufnr = <fs_aufk>-aufnr.
        <fs_transportes>-gltrp = <fs_aufk>-gltrp.
        <fs_transportes>-gsuzp = <fs_aufk>-gsuzp.
        <fs_transportes>-gluzp = <fs_aufk>-gluzp.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.
