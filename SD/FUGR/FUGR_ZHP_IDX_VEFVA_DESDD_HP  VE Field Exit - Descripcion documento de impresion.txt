FUNCTION zhp_idx_vefva_desdd.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(IR_SVCEL) TYPE REF TO  /VCXI/CL_VKSRA_SVC_ELEMENT
*"     REFERENCE(IR_SVC) TYPE REF TO  /VCXI/CL_VKSRA_SVC
*"     REFERENCE(IR_REGVEFVA) TYPE REF TO  /VCXI/CL_VKSC_REGVEFVA
*"  CHANGING
*"     REFERENCE(CF_VALEX) TYPE  ZVCXI_PXS_DESDD
*"  RAISING
*"      /VCXI/CX_CKX
*"----------------------------------------------------------------------
*{   INSERT         HEDK933985                                        1

  DATA: lf_desdo TYPE        string,
        lf_guid  TYPE /vcxi/ckx_guid,
        lf_dokar TYPE dokar,
        lf_doknr TYPE doknr,
        lf_doktl TYPE doktl_d,
        lf_dokvr TYPE dokvr.
  DATA: ls_param  TYPE        /vcxi/vksr_s_param.
  DATA: lt_svcel  TYPE        /vcxi/ckx_tt_object.
  DATA: lr_svcel  TYPE REF TO /vcxi/cl_vksra_svc_element,
        lr_svcela TYPE REF TO /vcxi/cl_vksra_svc_element,
        lr_object TYPE REF TO /vcxi/if_ckx_object.

  CHECK ir_svcel IS BOUND.

*** Get Parameter Value
  TRY.
      ls_param = ir_svcel->get_param( EXPORTING if_parid = 'ZVCXI_PX_DESDO' ).
      lf_desdo = ls_param-strng.
    CATCH /vcxi/cx_ckx.
  ENDTRY..

  "check LF_DESDO is not initial.
  IF lf_desdo IS NOT INITIAL.

*** Get Doc Key
    lf_guid = lf_desdo.
    zcl_vcxi_xcss_bl_doc=>decrypt_guid( EXPORTING if_guid = lf_guid
                                        IMPORTING ef_dokar = lf_dokar
                                                  ef_doknr = lf_doknr
                                                  ef_doktl = lf_doktl
                                                  ef_dokvr = lf_dokvr ).

    SELECT SINGLE dktxt FROM  drat
      INTO cf_valex
     WHERE dokar  = lf_dokar
       AND doknr  = lf_doknr
       AND dokvr  = lf_dokvr
       AND doktl  = lf_doktl
       AND langu  = sy-langu.
    IF sy-subrc NE 0.
      SELECT SINGLE dktxt FROM  drat
        INTO cf_valex
       WHERE dokar  = lf_dokar
         AND doknr  = lf_doknr
         AND dokvr  = lf_dokvr
         AND doktl  = lf_doktl.
    ENDIF.
  ELSE.

    TRY.
        ls_param = ir_svcel->get_param( EXPORTING if_parid = 'ZVCXI_PX_DESDD' ).
        cf_valex = ls_param-strng.
      CATCH /vcxi/cx_ckx.
    ENDTRY..

*    lt_svcel = ir_svcel->/vcxi/if_ckx_object_h~get_children( ).
*    LOOP AT lt_svcel INTO lr_object.
*      MOVE lr_object ?TO lr_svcel.
*      IF lr_svcel->/vcxi/if_ckx_object~get_id( ) EQ 'MS_INK'.
*        MOVE lr_object ?TO lr_svcela.
*        TRY.
*            MOVE lr_svcela->get_param( if_parid = 'ZVCXI_PX_INKTN' ) TO ls_param.
*            cf_valex = ls_param-atwrt.
*          CATCH /vcxi/cx_ckx.
*            CLEAR ls_param.
*        ENDTRY.
*        EXIT.
*      ENDIF.
*    ENDLOOP.

  ENDIF.

*}   INSERT
ENDFUNCTION.
