FUNCTION zsui5_sd_get_fichas_fab.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_KUNNR) TYPE  KUNNR OPTIONAL
*"     VALUE(I_EJERCICIO) TYPE  MJAHR OPTIONAL
*"     VALUE(I_BACKOFFICE) TYPE  LIFNR OPTIONAL
*"     VALUE(I_REGIO) TYPE  REGIO OPTIONAL
*"     VALUE(I_CP) TYPE  PSTLZ OPTIONAL
*"     VALUE(I_FECHA_INI) TYPE  DATUM OPTIONAL
*"     VALUE(I_FECHA_FIN) TYPE  DATUM OPTIONAL
*"     VALUE(I_HISTORICO) TYPE  FLAG OPTIONAL
*"     VALUE(IR_VKORG) TYPE  RSELOPTION OPTIONAL
*"  EXPORTING
*"     VALUE(E_RETURN) TYPE  BAPIRET2_T
*"     VALUE(E_STOCK) TYPE  ZSUI5TT_SD_FICHAS_FAB
*"----------------------------------------------------------------------
  DATA: ls_return    TYPE bapiret2,
        lv_datum     TYPE sy-datum,
        lv_datum_ini TYPE sy-datum,
        lv_datum_fin TYPE sy-datum,
        ls_stock     TYPE zsui5s_sd_fichas_fab.
  DATA: r_vkorg     TYPE sd_vkorg_ranges.
  DATA:
    r_kunnr           TYPE RANGE OF kunnr,
    r_regio           TYPE RANGE OF regio,
    r_cp              TYPE RANGE OF pstlz,
    irg_fecha_reparto TYPE RANGE OF datum,
    r_gbsta           TYPE RANGE OF gbsta,
    r_objnr           TYPE RANGE OF objnr.

  RANGES: r_destinatario FOR kna1-kunnr.

  DATA: r_back_ofiice TYPE RANGE OF lifnr.
  IF i_backoffice IS NOT INITIAL.
    r_back_ofiice = VALUE #( ( sign = 'I' option = 'EQ' low = i_backoffice ) ) .
  ENDIF.

  IF i_kunnr IS NOT INITIAL.
    APPEND INITIAL LINE TO r_kunnr ASSIGNING FIELD-SYMBOL(<ls_kunnr>).
    <ls_kunnr>-option = 'EQ'.
    <ls_kunnr>-sign = 'I'.
    <ls_kunnr>-low = i_kunnr.
  ENDIF.

  IF i_cp IS NOT INITIAL.
    APPEND INITIAL LINE TO r_cp ASSIGNING FIELD-SYMBOL(<ls_cp>).
    <ls_cp>-option = 'EQ'.
    <ls_cp>-sign = 'I'.
    <ls_cp>-low = i_cp.
  ENDIF.

  IF i_regio IS NOT INITIAL.
    APPEND INITIAL LINE TO r_regio ASSIGNING FIELD-SYMBOL(<ls_regio>).
    <ls_regio>-option = 'EQ'.
    <ls_regio>-sign = 'I'.
    <ls_regio>-low = i_regio.
  ENDIF.

  IF i_historico IS INITIAL.
    APPEND INITIAL LINE TO r_gbsta ASSIGNING FIELD-SYMBOL(<ls_gbsta>).
    <ls_gbsta>-sign = 'I'.
    <ls_gbsta>-option = 'NE'.
    <ls_gbsta>-low = 'C'.
  ENDIF.

  IF i_ejercicio IS NOT INITIAL.
    lv_datum_fin = lv_datum = i_ejercicio && '12' && '31'.
    lv_datum_ini = i_ejercicio && '01' && '01'.
  ELSE.
    IF i_fecha_fin IS NOT INITIAL.
      lv_datum_fin = lv_datum = i_fecha_fin.
    ELSE.
      lv_datum_fin = lv_datum = sy-datum(4) && '12' && '31'.
    ENDIF.
    IF  i_fecha_ini IS NOT INITIAL.
      lv_datum_ini = i_fecha_ini.
    ELSE.
      lv_datum_ini = sy-datum(4) && '01' && '01'.
    ENDIF.
  ENDIF.

  IF i_fecha_ini IS NOT INITIAL AND i_fecha_fin IS INITIAL.
    APPEND INITIAL LINE TO irg_fecha_reparto ASSIGNING FIELD-SYMBOL(<ls_fecha_ini>).
    <ls_fecha_ini>-option = 'GE'.
    <ls_fecha_ini>-sign = 'I'.
    <ls_fecha_ini>-low = i_fecha_ini.

  ELSEIF i_fecha_ini IS NOT INITIAL AND  i_fecha_fin IS NOT INITIAL.
    APPEND INITIAL LINE TO irg_fecha_reparto ASSIGNING FIELD-SYMBOL(<ls_fecha_fin>).
    <ls_fecha_fin>-option = 'BT'.
    <ls_fecha_fin>-sign = 'I'.
    <ls_fecha_fin>-low = i_fecha_ini.
    <ls_fecha_fin>-high = i_fecha_fin.
  ENDIF.

  DATA: lt_situacion TYPE TABLE OF dd07v.
  CALL FUNCTION 'DD_DD07V_GET'
    EXPORTING
      domain_name = 'ZSSD_DO_SITUACION'
      langu       = sy-langu
      withtext    = 'X'
    TABLES
      dd07v_tab   = lt_situacion.

  SELECT a~kunnr, b~matnr, b~maktx, c~aufpl, c~werks, c~aufnr, c~stlan, c~gstrs, c~gltrs, c~gstrp, c~gltrp,  c~gstri, c~gltri, c~gsuzi, c~geuzi, c~objnr, c~gamng, c~gmein AS meins, c~igmng, c~kdauf AS ebeln, c~kdpos AS ebelp,
k~kdmat, k~postx,
   up~gbsta, c~gsuzp, c~gluzp, af~wemng AS gwemg, c~zzsubco_ebeln AS ped_traslado, c~zzsubco_ebelp AS ped_traslado_pos, c~gluzs, ep~edatu, ek~eindt, af~wemng
    FROM knvp AS vp
    INNER JOIN kna1 AS ka ON ka~kunnr = vp~kunnr
*      INNER JOIN kna1 AS k2 ON ka~kunnr = vp~kunn2
    INNER JOIN kotg933  AS a ON a~kunnr = ka~kunnr
    INNER JOIN makt AS b ON b~matnr = a~matnr AND b~spras = @sy-langu
    INNER JOIN caufv AS c ON c~plnbez = b~matnr AND ( c~gstrp >= @lv_datum_ini AND c~gstrp <= @lv_datum_fin )
    INNER JOIN afpo AS af ON af~aufnr = c~aufnr
    INNER JOIN  tvkwz AS t ON vp~vkorg = t~vkorg AND c~werks = t~werks
    LEFT JOIN vbep AS ep ON ep~vbeln = c~kdauf AND ep~posnr = c~kdpos AND ep~bmeng > 0
    LEFT JOIN vbup AS up ON up~vbeln = c~kdauf AND up~posnr = c~kdpos
    LEFT JOIN eket AS ek ON ek~ebeln = c~zzsubco_ebeln AND ek~ebelp = c~zzsubco_ebelp AND ek~menge > 0
    LEFT JOIN knmt AS k ON k~matnr = a~matnr AND k~kunnr = a~kunnr AND k~vkorg = a~vkorg AND k~vtweg = a~vtweg
    INTO TABLE @DATA(lt_data)
    WHERE vp~lifnr IN @r_back_ofiice AND vp~parvw = 'A1' AND vp~vkorg IN @ir_vkorg
    AND ka~regio IN @r_regio
    AND ka~pstlz IN @r_cp
    AND a~kunnr IN @r_kunnr
    AND a~kappl = 'V'
    AND a~kschl = 'ZA01'
    AND a~vkorg IN @r_vkorg
    AND a~vtweg = '10'
    AND a~spart = '10'
    AND a~matnr NE @space
    AND a~datbi >= @lv_datum
    AND a~datab <= @lv_datum
    .

  IF r_gbsta IS NOT INITIAL.
    DELETE lt_data WHERE gbsta NOT IN r_gbsta.
  ENDIF.

  IF irg_fecha_reparto IS NOT INITIAL.
    DELETE lt_data WHERE edatu NOT IN irg_fecha_reparto AND edatu NE '00000000'.
    DELETE lt_data WHERE eindt NOT IN irg_fecha_reparto AND eindt NE '00000000'.
  ENDIF.

  IF lt_data IS INITIAL.
    CLEAR ls_return.
    ls_return-id = 'ZSSD_UI5'.
    ls_return-type = 'E'.
    ls_return-number = '001'.
    ls_return-message_v1 = |{ i_backoffice ALPHA = OUT }|.
    APPEND ls_return TO e_return.
  ELSE.

    SORT lt_data BY aufnr.
    DELETE ADJACENT DUPLICATES FROM lt_data COMPARING aufnr.

    "Borramos los registros que tienen pedido y no pertenece al cliente.
*    DELETE lt_data WHERE ebeln NE space AND kunnr_vbak NE i_kunnr.
    IF lt_data IS INITIAL.
      CLEAR ls_return.
      ls_return-id = 'ZSSD_UI5'.
      ls_return-type = 'E'.
      ls_return-number = '001'.
      ls_return-message_v1 = |{ i_kunnr ALPHA = OUT }|.
      APPEND ls_return TO e_return.
    ELSE.
      "Obtenemos los status de las ordenes para eliminar los registros para histórico
      IF i_historico IS INITIAL.
        SELECT a~objnr, b~aufnr, b~plnbez AS matnr, b~kdauf AS vbeln, b~kdpos AS posnr, b~werks
          FROM jest AS a
          INNER JOIN caufv AS b ON a~objnr = b~objnr
          INTO TABLE @DATA(lt_estado)
          FOR ALL ENTRIES IN @lt_data
          WHERE a~objnr = @lt_data-objnr
          AND inact = ''
          AND stat = 'I0045'.
        IF sy-subrc = 0.
          "Obtenemos el stoch de la MCHB de las ordenes que tienen pedido asociado y tengan stock para no eliminarlas
          DATA(lt_ord_pedido) = lt_estado.
          DELETE lt_ord_pedido WHERE vbeln = ''.
          IF lt_ord_pedido IS NOT INITIAL.
            SELECT matnr, werks, charg,  clabs, cumlm,  cinsm,  ceinm,  cspem,  cretm,  cvmla,  cvmum,  cvmin,  cvmei,  cvmsp,  cvmre
              FROM mchb
              INTO TABLE @DATA(lt_stocks)
              FOR ALL ENTRIES IN @lt_ord_pedido
              WHERE matnr = @lt_ord_pedido-matnr
              AND werks = @lt_ord_pedido-werks
              AND charg = @lt_ord_pedido-aufnr+2.
          ENDIF.

          LOOP AT lt_estado ASSIGNING FIELD-SYMBOL(<ls_estado>).
            IF <ls_estado>-vbeln IS INITIAL.
              APPEND INITIAL LINE TO r_objnr ASSIGNING FIELD-SYMBOL(<ls_objnr>).
              <ls_objnr>-sign = 'I'.
              <ls_objnr>-option = 'EQ'.
              <ls_objnr>-low = <ls_estado>-objnr.
            ELSE.
              "Si existe pedido relacionado hay que comprobar que no exisa stock para ese material/centro/lote.
              LOOP AT lt_stocks ASSIGNING FIELD-SYMBOL(<ls_stocks>) WHERE matnr = <ls_estado>-matnr AND werks = <ls_estado>-werks AND charg = <ls_estado>-aufnr AND ( clabs NE 0 OR cumlm NE 0
                OR cinsm NE 0 OR ceinm NE 0 OR cspem NE 0 OR cretm NE 0 OR cretm NE 0
                  OR cvmla NE 0 OR cvmum NE 0 OR cvmin NE 0 OR cvmei NE 0 OR cvmsp NE 0 OR cvmre NE 0 ).
                EXIT.
              ENDLOOP.
              IF sy-subrc NE 0.
                APPEND INITIAL LINE TO r_objnr ASSIGNING <ls_objnr>.
                <ls_objnr>-sign = 'I'.
                <ls_objnr>-option = 'EQ'.
                <ls_objnr>-low = <ls_estado>-objnr.
              ENDIF.
            ENDIF.

          ENDLOOP.

          DELETE lt_data WHERE objnr IN r_objnr.
          IF lt_data IS INITIAL.
            CLEAR ls_return.
            ls_return-id = 'ZSSD_UI5'.
            ls_return-type = 'E'.
            ls_return-number = '001'.
            ls_return-message_v1 = |{ i_kunnr ALPHA = OUT }|.
            APPEND ls_return TO e_return.
          ENDIF.
        ENDIF.
      ENDIF.

      "Obtenemos Fecha de Liberación
      SELECT objnr, udate, utime
        FROM jcds
        INTO TABLE @DATA(lt_jcds)
        FOR ALL ENTRIES IN @lt_data
        WHERE objnr = @lt_data-objnr
        AND stat = 'I0002'
        AND inact = @space.

      "Obtenemos Cantidades relacionados con pedido
      SELECT vbeln, posnr, kavin, kavsp
        FROM mska
        INTO TABLE @DATA(lt_mska)
        FOR ALL ENTRIES IN @lt_data
      WHERE vbeln = @lt_data-ebeln
      AND posnr = @lt_data-ebelp
        AND ( kavin > 0 OR  kavsp > 0 )
        .

      SELECT matnr, werks, charg,   cinsm,    cspem
            FROM mchb
            INTO TABLE @DATA(lt_mchb)
            FOR ALL ENTRIES IN @lt_data
            WHERE matnr = @lt_data-matnr
            AND werks = @lt_data-werks
            AND charg = @lt_data-aufnr+2.

      "Obtenemos la fecha de confirmación
      SELECT a~vbeln, a~posnr, a~mbdat, b~kunnr, a~edatu, ka~name1 AS kunnrname
        FROM vbep AS a
        INNER JOIN vbak AS b ON b~vbeln = a~vbeln
        INNER JOIN kna1 AS ka ON ka~kunnr = b~kunnr
        INTO TABLE @DATA(lt_vbep)
        FOR ALL ENTRIES IN @lt_data
        WHERE a~vbeln = @lt_data-ebeln
        AND a~posnr = @lt_data-ebelp
        AND bmeng > 0.
      IF sy-subrc = 0.
        SORT lt_vbep BY vbeln posnr mbdat.
      ENDIF.

      "Obtenemos los datos del pedido de Compras
      DATA: r_traslado TYPE RANGE OF ebeln.

      r_traslado = VALUE #( FOR pos IN lt_data WHERE ( ped_traslado IS NOT INITIAL ) ( sign = 'I' option = 'EQ' low = pos-ped_traslado ) ).
      IF r_traslado IS NOT INITIAL.
        SELECT a~ebeln, a~ebelp, e~lifnr, l~name1, b~vbelv, b~posnv, vk~kunnr, k~name1 AS name_kunnr, a~lgort, tl~lgobe, cm~lgort AS centro_montaje
          FROM ekko AS e
          INNER JOIN ekpo AS a ON a~ebeln = e~ebeln
          INNER JOIN lfa1 AS l ON l~lifnr = e~lifnr
          LEFT JOIN vbfa AS b ON b~vbeln = a~ebeln AND b~vbtyp_n = 'V' AND b~vbtyp_v = 'C'
          LEFT JOIN vbak AS vk ON vk~vbeln = b~vbelv
          LEFT JOIN kna1 AS k ON k~kunnr = vk~vbeln
          LEFT JOIN t001l AS tl ON a~lgort = tl~lgort AND tl~werks = a~werks
          LEFT JOIN zcmventa AS cm ON cm~werks =  tl~werks AND cm~lgort = tl~lgort
          INTO TABLE @DATA(lt_traslados)
          WHERE e~ebeln IN @r_traslado.
      ENDIF.

      "Obtenemos la Cantidad Entregada
      DATA: r_charg TYPE RANGE OF charg_d.
      r_charg = VALUE #( FOR data IN lt_data WHERE ( aufnr IS NOT INITIAL ) ( sign = 'I' option = 'EQ' low = |{ data-aufnr ALPHA = OUT }| ) ).
      SELECT lgnum, lqnum, matnr, werks, charg, gesme
        FROM lqua
        INTO TABLE @DATA(lt_lqua)
        FOR ALL ENTRIES IN @lt_data
        WHERE matnr = @lt_data-matnr
        AND werks = @lt_data-werks
        AND charg IN @r_charg
        AND gesme NE 0.

      "Obtenemos la fecha Real de Inicio
      SELECT aufnr, budat_mkpf
        FROM mseg
        INTO TABLE @DATA(lt_fecha_real)
        FOR ALL ENTRIES IN @lt_data
              WHERE aufnr = @lt_data-aufnr.
      IF sy-subrc = 0.
        SORT lt_fecha_real BY aufnr budat_mkpf.
        DELETE ADJACENT DUPLICATES FROM lt_fecha_real COMPARING aufnr.
      ENDIF.

      "Obtenemos los materiales de utillaje.
      SELECT c~vbeln, c~posnr, c~matnr, c~zmeng, c~zieme, b~vkorg, b~vtweg, d~dwerk AS werks, c~kwmeng
        FROM  vbap AS c
        INNER JOIN vbak AS b ON b~vbeln = c~vbeln
        LEFT JOIN mvke  AS d ON d~matnr = c~matnr AND d~vkorg = b~vkorg AND d~vtweg = b~vtweg
        INTO TABLE @DATA(lt_vbap)
        FOR ALL ENTRIES IN @lt_data
        WHERE c~vbeln = @lt_data-ebeln
        AND c~posnr = @lt_data-ebelp .
      IF sy-subrc = 0.

        "Obtenemos los materiales de utillaje.
        SELECT DISTINCT a~matnr, a~werks, b~prton, mb~mstae AS bloqueo_a, c~dcutt, mc~mstae AS bloqueo_b
          FROM marc AS a
          LEFT JOIN yhp_idx_td130 AS b ON b~cuobj = a~cuobj
          LEFT JOIN mara AS mb ON mb~matnr = b~prton
          LEFT JOIN yhp_idx_td100 AS c ON b~cuobj = a~cuobj
          LEFT JOIN mara AS mc ON mc~matnr = c~dcutt
          INTO TABLE @DATA(lt_utillaje)
          FOR ALL ENTRIES IN @lt_vbap
          WHERE a~matnr = @lt_vbap-matnr
          AND a~werks = @lt_vbap-werks
          AND ( mb~mstae NE @space OR mc~mstae NE @space ).
      ENDIF.

      "Obtenemos los textos de la posiciones de las operaciones
      SELECT aufpl, aplzl, arbpl, ltxa1
        FROM afvc AS a
        INNER JOIN crhd AS b ON b~objid = a~arbid
        INTO TABLE @DATA(lt_afvc)
        FOR ALL ENTRIES IN @lt_data
        WHERE aufpl = @lt_data-aufpl.
      IF sy-subrc = 0.
        SORT lt_afvc BY aufpl aplzl arbpl ltxa1.
      ENDIF.

      "Status de las ordenes
      SELECT objnr, stat
        FROM jest
        INTO TABLE @DATA(lt_jest)
        FOR ALL ENTRIES IN @lt_data[]
        WHERE objnr = @lt_data-objnr
          AND inact = @space.

      "Obtenemos la ruta para el WebGUI de la Tx XD02
      DATA: lv_hostname TYPE string,
            lv_port     TYPE string.
      CALL FUNCTION 'TH_GET_VIRT_HOST_DATA'
        EXPORTING
          protocol       = 0
          virt_idx       = 0
*         LOCAL          = 1
        IMPORTING
          hostname       = lv_hostname
          port           = lv_port
        EXCEPTIONS
          not_found      = 1
          internal_error = 2
          OTHERS         = 3.
      IF sy-subrc = 0.
        LOOP AT lt_data ASSIGNING FIELD-SYMBOL(<ls_data>).
          CLEAR ls_stock.
          MOVE-CORRESPONDING <ls_data> TO ls_stock.

          clear: ls_stock-kunnr.

          READ TABLE lt_vbep INTO DATA(ls_vbep) WITH KEY vbeln = <ls_data>-ebeln posnr = <ls_data>-ebelp.
          IF sy-subrc = 0.
            ls_stock-bstdk_e = ls_vbep-edatu.
            ls_stock-kunnr = ls_vbep-kunnr.
            ls_stock-kunnrname = ls_vbep-kunnrname.
          ELSE.
            ls_stock-bstdk_e = <ls_data>-eindt.
          ENDIF.

          "Asignamos Fecha Orden Liberada.
          READ TABLE lt_jcds INTO DATA(ls_jcds) WITH KEY objnr = <ls_data>-objnr.
          IF sy-subrc = 0.
            ls_stock-geuzi = ls_jcds-utime.
            ls_stock-gstri = ls_jcds-udate.
          ELSE.
            CLEAR: ls_stock-geuzi, ls_stock-gstri.
          ENDIF.

          "Asignamos la cantidad entregada
          DATA lv_aufnr TYPE charg_d.
          lv_aufnr = |{ <ls_data>-aufnr ALPHA = OUT }|.
          CLEAR ls_stock-gwemg.
          LOOP AT lt_lqua INTO DATA(ls_lqua) WHERE matnr = <ls_data>-matnr AND werks = <ls_data>-werks AND charg = lv_aufnr.
            ls_stock-gwemg =  ls_stock-gwemg + ls_lqua-gesme.
          ENDLOOP.
          IF sy-subrc = 0.
            ls_stock-gwemg =  <ls_data>-wemng - ls_stock-gwemg.
          ENDIF.

          "Asignamos la fecha real
          READ TABLE lt_fecha_real INTO DATA(ls_fecha_real) WITH KEY aufnr = <ls_data>-aufnr.
          IF sy-subrc = 0.
            ls_stock-gltri = ls_fecha_real-budat_mkpf.
          ELSE.
            CLEAR ls_stock-gltri.
          ENDIF.

          "Obtenemos bloqueo material utillaje.
          READ TABLE lt_vbap INTO DATA(ls_vbap) WITH KEY  vbeln = <ls_data>-ebeln posnr = <ls_data>-ebelp.
          IF sy-subrc = 0.
            ls_stock-zieme = ls_vbap-zieme.
            ls_stock-zmeng = ls_vbap-kwmeng.
            ls_stock-gamng = ls_vbap-kwmeng. "MTS; 19.07.2024 Cambiamos Cantidad Solicitada por VBAP-KWMENG si hay pedido
            READ TABLE lt_utillaje INTO DATA(ls_utillaje) WITH KEY matnr = ls_vbap-matnr.
            IF sy-subrc = 0.
              ls_stock-bloqueo_visible = 'X'.
              IF ls_utillaje-bloqueo_a IS NOT INITIAL OR ls_utillaje-bloqueo_b IS NOT INITIAL.
                ls_stock-bloqueado = 'X'.
              ENDIF.
            ENDIF.
          ELSE.
            ls_stock-zieme = <ls_data>-meins.
            ls_stock-zmeng = <ls_data>-gamng.
*            CLEAR ls_stock-gamng."MTS; 19.07.2024 Cambiamos Cantidad Solicitada por blanco si NO hay pedido

          ENDIF.

          "Asignamos Pedido Ventas relacionado con Pedido Compras
          READ TABLE lt_traslados INTO DATA(ls_traslado) WITH KEY ebeln = ls_stock-ped_traslado ebelp = ls_stock-ped_traslado_pos.
          IF sy-subrc = 0.
            IF ls_traslado-vbelv IS NOT INITIAL.
              CLEAR: ls_stock-ped_traslado, ls_stock-ped_traslado_pos.
*              ls_stock-ebeln = ls_traslado-vbelv.
*              ls_stock-ebelp = ls_traslado-posnv+1.
*              ls_stock-kunnr = ls_traslado-kunnr.
*              ls_stock-kunnrname = ls_traslado-name_kunnr.

            ELSE.
              CLEAR: ls_stock-kunnr, ls_stock-kunnrname.
              IF ls_traslado-centro_montaje IS NOT INITIAL.
                ls_stock-cliente_traslado = ls_traslado-lgort.
                ls_stock-name_cliente_traslado = ls_traslado-lgobe.
              ELSE.
                ls_stock-proveedor_subco = ls_traslado-lifnr.
                ls_stock-name_proveedor_subco = ls_traslado-name1.
              ENDIF.
            ENDIF.
          ENDIF.

          ls_stock-igmng = <ls_data>-gamng."MTS: 19.07.2024 Planificada: Cantidad de la OF. CAUFVD-GAMNG

          IF  ls_stock-matnr IS NOT INITIAL.
            ls_stock-urlmaterial = 'http://'&& lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*MM03%20RMMG1-MATNR=' && ls_stock-matnr .
          ENDIF.
          IF  <ls_data>-stlan IS NOT INITIAL.
            ls_stock-url_lista = 'http://'&& lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*CS03%20RC29N-MATNR=' && ls_stock-matnr  && ';RC29N-STLAN=' && <ls_data>-stlan && ';RC29N-WERKS=' && <ls_data>-werks  .
          ENDIF.
          IF  <ls_data>-werks IS NOT INITIAL.
            ls_stock-url_hoja_ruta = 'http://'&& lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*CO02%20CAUFVD-AUFNR=' && ls_stock-aufnr && ';DYNP_OKCODE=VGUE'.
          ENDIF.
          IF ls_stock-aufnr IS NOT INITIAL.
            ls_stock-url_orden = 'http://'&& lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*CO03%20CAUFVD-AUFNR=' && ls_stock-aufnr .
          ENDIF.

          IF ls_stock-ebeln IS NOT INITIAL.
            ls_stock-url_vbeln = 'http://'&& lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*VA03%20VBAK-VBELN=' && ls_stock-ebeln .
          ENDIF.

          IF ls_stock-ped_traslado IS NOT INITIAL.
            ls_stock-url_ped_traslado = 'http://'&& lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*ME23N%20MEPO_SELECT-EBELN=' && ls_stock-ped_traslado && ';MEPO_SELECT-BSTYP_F=X;DYNP_OKCODE=MECHOB' .
          ENDIF.

          IF ls_stock-proveedor_subco IS NOT INITIAL.
            ls_stock-url_proveedor_subco = 'http://'&& lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*XK03%20RF02K-LIFNR=' && ls_stock-proveedor_subco &&
';RF02K-BUKRS=2000;RF02K-EKORG=1000;RF02K-D0110=X;RF02K-D0120=X;RF02K-D0130=X;RF02K-D0380=X;RF02K-D0210=X;RF02K-D0215=X;RF02K-D0230=X;RF02K-D0610=X;RF02K-D0310=X;WRF02K-D0320=X' .
          ENDIF.

          ls_stock-url_kunnr = 'http://'&& lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*XD03%20RF02D-KUNNR=' && ls_stock-kunnr .


          IF ls_stock-ebelp = '000000'.
            CLEAR ls_stock-ebelp.
          ENDIF.

*          ls_stock-kunnr = i_kunnr.
          ls_stock-ejercicio = i_ejercicio.

          "Obtenemos el status
          CALL FUNCTION 'STATUS_TEXT_EDIT'
            EXPORTING
*             CLIENT           = SY-MANDT
*             FLG_USER_STAT    = ' '
              objnr            = <ls_data>-objnr
*             ONLY_ACTIVE      = 'X'
              spras            = sy-langu
*             BYPASS_BUFFER    = ' '
            IMPORTING
*             ANW_STAT_EXISTING       =
*             E_STSMA          =
              line             = ls_stock-sttxt
*             USER_LINE        =
*             STONR            =
            EXCEPTIONS
              object_not_found = 1
              OTHERS           = 2.
          IF sy-subrc <> 0.
* Implement suitable error handling here
          ENDIF.

          "Cantidad total dependiendo de si tiene Pedido o no
          ls_stock-total = ls_stock-igmng.
          IF <ls_data>-ebeln IS NOT INITIAL.
            LOOP AT lt_mska INTO DATA(ls_mska) WHERE vbeln = <ls_data>-ebeln AND posnr = <ls_data>-ebelp.
              ls_stock-total = ls_stock-total - ( ls_mska-kavin + ls_mska-kavsp ).
            ENDLOOP.
          ELSE.
            LOOP AT lt_mchb INTO DATA(ls_mchb) WHERE matnr = <ls_data>-matnr AND werks = <ls_data>-werks AND charg = <ls_data>-aufnr+2.
              ls_stock-total = ls_stock-total - ( ls_mchb-cinsm + ls_mchb-cspem ).
            ENDLOOP.
          ENDIF.

          LOOP AT lt_afvc INTO DATA(ls_afvc) WHERE aufpl = <ls_data>-aufpl.
            CONCATENATE ls_stock-ltxa1 ls_afvc-arbpl INTO ls_stock-ltxa1 SEPARATED BY space.
          ENDLOOP.

          "Situación
          READ TABLE lt_jest INTO DATA(ls_jest) WITH KEY objnr = <ls_data>-objnr
                                                   stat  = 'I0001'.
          IF sy-subrc = 0.
            ls_stock-situacion = '00'.
          ENDIF.

          READ TABLE lt_jest INTO ls_jest WITH KEY objnr = <ls_data>-objnr
                                                   stat  = 'I0513'.
          IF sy-subrc = 0.
            ls_stock-situacion = '01'.
          ENDIF.

          READ TABLE lt_jest INTO ls_jest WITH KEY objnr = <ls_data>-objnr
                                                   stat  = 'I0002'.
          IF sy-subrc = 0.
            ls_stock-situacion = '04'.
          ENDIF.

          "Rellenamos descriptivo
          IF ls_stock-situacion IS NOT INITIAL.
            READ TABLE lt_situacion INTO DATA(ls_situacion) WITH KEY domvalue_l = ls_stock-situacion.
            IF sy-subrc = 0.
              ls_stock-situacion_txt = ls_situacion-ddtext.
            ENDIF.
          ENDIF.

          APPEND ls_stock TO e_stock.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDIF.


ENDFUNCTION.
