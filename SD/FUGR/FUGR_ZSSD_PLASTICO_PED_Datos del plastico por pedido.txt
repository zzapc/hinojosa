FUNCTION zssd_plastico_ped.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(VBELN) TYPE  VBELN_VA
*"     REFERENCE(YCIP) TYPE  FLAG DEFAULT 'X'
*"     REFERENCE(YZIP) TYPE  FLAG DEFAULT 'X'
*"  EXPORTING
*"     REFERENCE(DATOS) TYPE  ZSSDTT_PLASTICO_DATOS
*"----------------------------------------------------------------------
  DATA: lw_datos     TYPE zssds_plastico_datos,
        lw_header    TYPE thead,
        lt_lines     TYPE TABLE OF tline,
        lw_lines     TYPE tline,
        lw_konp      TYPE /sei/ie5_ed_tarifa,
        l_precio_txt TYPE c LENGTH 30,
        l_kilos_txt  TYPE c LENGTH 30,
        l_imp_txt    TYPE c LENGTH 30,
        lv_check     TYPE flag,
        ts1          TYPE timestampl,
        ts2          TYPE timestampl,
        lv_letra     TYPE c LENGTH 3,
        lv_flag_save TYPE flag,
        l_tx_exe     TYPE zssds_plastico_datos-tx_exe,
        lt_prcd      TYPE tty_prcd_ped,
        lw_prcd      TYPE ty_prcd_ped.

  "Declaración de variables
  "**********************************************************************
  CONSTANTS: lv_texto_regimen TYPE string VALUE 'Regimen fiscal impuesto al plástico:'.

  RANGES: lr_kschl FOR KONV-kschl.

  IF ycip IS INITIAL AND yzip IS INITIAL.
    RETURN.
  ENDIF.

  "Ponemos una espera activa hasta que se rellenen las tablas
  GET TIME STAMP FIELD ts2.

  lv_check = abap_false.
  WHILE lv_check = abap_false.

    SELECT SINGLE vbeln
      INTO @DATA(l_vbeln)
      FROM vbak
      WHERE vbeln = @vbeln.

    IF sy-subrc EQ 0.
      lv_check = abap_true.
      EXIT.
    ENDIF.

    GET TIME STAMP FIELD ts1.

    DATA(seconds) = cl_abap_tstmp=>subtract(
      EXPORTING
        tstmp1 = ts1
        tstmp2 = ts2 ).

    IF seconds > 5.
      lv_check = abap_true.
      EXIT.
    ENDIF.
  ENDWHILE.

  "Averiguamos la sociedad y descartamos si no son 1500, 1440 o 1600
  SELECT SINGLE bukrs_vf, vkorg, vtweg, spart
    FROM vbak
    WHERE vbeln = @vbeln
    INTO ( @DATA(l_bukrs), @DATA(l_vkorg), @DATA(l_vtweg), @DATA(l_spart) ).
  IF l_bukrs <> '1500' AND l_bukrs <> '1400' AND l_bukrs <> '1600'.
    RETURN.
  ENDIF.

  DATA: lt_out TYPE /sei/ie5_tt_fra_vta.
  CLEAR lt_out[].

  CALL FUNCTION 'ZSSD_IE5_PEDIDO_VTAS'
    EXPORTING
      i_vbeln = vbeln
    IMPORTING
      t_out   = lt_out.

  "Obtenemos las condiciones de precio de las facturas
  IF ycip IS NOT INITIAL.
    lr_kschl = 'IEQYCIP'.
    APPEND lr_kschl.
  ENDIF.
  IF yzip IS NOT INITIAL.
    lr_kschl = 'IEQYZIP'.
    APPEND lr_kschl.
  ENDIF.

  SELECT vbak~vbeln, vbap~posnr, vbap~uepos, vbak~audat,
         vbap~vgbel, vbap~vgtyp, vbap~matnr, vbap~charg,
         prcd~knumv, prcd~kposn, prcd~kschl, prcd~kawrt,
         prcd~kwert, prcd~kbetr, prcd~kpein, prcd~kmein
    INTO CORRESPONDING FIELDS OF TABLE @lt_prcd
    FROM vbak
     INNER JOIN vbap ON vbak~vbeln = vbap~vbeln
     INNER JOIN KONV AS prcd ON vbak~knumv = prcd~knumv AND vbap~posnr = prcd~kposn
    WHERE vbak~vbeln = @vbeln
      AND prcd~kschl IN @lr_kschl.

  "Obtenemos la tarifa
  READ TABLE lt_prcd INTO lw_prcd INDEX 1.
  CALL FUNCTION '/SEI/IE5_LEER_TARIFA'
    EXPORTING
      i_date = lw_prcd-audat
    IMPORTING
      o_konp = lw_konp.
  WRITE lw_konp-kbetr TO l_precio_txt.
  CONDENSE l_precio_txt.

  "Obtenemos los descriptivos de los regimenes especiales
  SELECT *
    INTO TABLE @DATA(lt_denom)
    FROM /sei/ie5_tc001.

  DATA: l_saltar TYPE flag.
  LOOP AT lt_prcd INTO lw_prcd.

    l_saltar = 'X'.
    READ TABLE lt_out WITH KEY vbeln = lw_prcd-vbeln
                               posnr = lw_prcd-posnr
                               no_relev = ''
                               TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      CLEAR l_saltar.
    ELSE.
      IF lw_prcd-uepos IS NOT INITIAL.
        LOOP AT lt_prcd INTO DATA(lw_prcd_uepos) WHERE uepos = lw_prcd-uepos.
          READ TABLE lt_out WITH KEY vbeln = lw_prcd_uepos-vbeln
                                     posnr = lw_prcd_uepos-posnr
                                     no_relev = ''
                                     TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            CLEAR l_saltar.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

    IF l_saltar = 'X'.
      CONTINUE.
    ENDIF.

    PERFORM agrupar_fact_uecha USING lw_prcd yzip ycip CHANGING datos.

  ENDLOOP.


  LOOP AT datos ASSIGNING FIELD-SYMBOL(<fs_datos>).
    <fs_datos>-tarifa = lw_konp-kbetr.
    <fs_datos>-moneda = lw_konp-konwa.

    LOOP AT lt_out INTO DATA(lw_out) WHERE vbeln = <fs_datos>-vbeln AND posnr = <fs_datos>-posnr AND no_relev = ''.
    ENDLOOP.
    IF sy-subrc <> 0 AND <fs_datos>-total_imp = 0 AND <fs_datos>-total_kg = 0.
      CONTINUE.
    ENDIF.

    CLEAR: l_imp_txt, l_kilos_txt.
    WRITE <fs_datos>-total_imp TO l_imp_txt.
    WRITE <fs_datos>-total_kg  TO l_kilos_txt.
    CONDENSE: l_imp_txt, l_kilos_txt.

    LOOP AT lt_out INTO lw_out WHERE vbeln = <fs_datos>-vbeln AND posnr = <fs_datos>-posnr.

      IF l_bukrs = '1400' OR l_bukrs = '1600'.
        <fs_datos>-tx_exe = 'La cantidad de plástico no reciclado y el importe del impuesto'(001).

        CONCATENATE <fs_datos>-tx_exe 'sobre los envases de plástico no reutilizables son:'(002)
          INTO <fs_datos>-tx_exe SEPARATED BY space.

        CONCATENATE <fs_datos>-tx_exe l_precio_txt 'EUR/Kg por'(003) l_kilos_txt 'Kg de plástico no reciclado son'(004)
          l_imp_txt 'EUR.'(005) INTO <fs_datos>-tx_exe SEPARATED BY space.
      ENDIF.

      READ TABLE lt_denom ASSIGNING FIELD-SYMBOL(<fs_denom>) WITH KEY id_regimen_fiscal = lw_out-id_regimen_fiscal.
      IF sy-subrc EQ 0.
        CLEAR lv_letra.
        CONCATENATE '(' <fs_denom>-tipo_regimen_anexo_vii ')' INTO lv_letra.
        CONCATENATE lv_texto_regimen lv_letra <fs_denom>-denom_regimen INTO l_tx_exe SEPARATED BY space.
      ELSE.
        READ TABLE lt_denom ASSIGNING <fs_denom> WITH KEY id_regimen_fiscal = '01'.
        IF sy-subrc EQ 0.
          CLEAR lv_letra.
          CONCATENATE '(' <fs_denom>-tipo_regimen_anexo_vii ')' INTO lv_letra.
          CONCATENATE lv_texto_regimen lv_letra <fs_denom>-denom_regimen INTO l_tx_exe SEPARATED BY space.
        ENDIF.
      ENDIF.

      CONCATENATE <fs_datos>-tx_exe l_tx_exe INTO <fs_datos>-tx_exe SEPARATED BY space.

    ENDLOOP.

  ENDLOOP.

ENDFUNCTION.
