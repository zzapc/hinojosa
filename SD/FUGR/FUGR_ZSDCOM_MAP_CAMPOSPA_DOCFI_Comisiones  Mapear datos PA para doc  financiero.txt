FUNCTION zsdcom_map_campospa_docfi.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(IS_DATO) TYPE  ZTSDCOM_POS
*"     VALUE(I_TIPOA) TYPE  ZSDCOM_TIPOA
*"  TABLES
*"      ET_CARACPA STRUCTURE  BAPIACKEC9 OPTIONAL
*"      ET_VALUEPA STRUCTURE  BAPIACKEV9 OPTIONAL
*"----------------------------------------------------------------------

  DATA: lo_patable  TYPE REF TO data.

  DATA: lti_fieldpa TYPE TABLE OF ztsdcom003.

  DATA: ls_fieldpa  TYPE ztsdcom003,
        ls_caract   TYPE bapiackec9,
        ls_value    TYPE bapiackev9.

  DATA: lv_erkrs    TYPE erkrs,
        lv_patable  TYPE se16n_tab.

  FIELD-SYMBOLS: <fs_patable> TYPE any,
                 <fs_value>   TYPE any,
                 <fs_ref>     TYPE any.


* Inicializamos
  REFRESH: et_caracpa, et_valuepa.

* Recuperamos la sociedad PA de la sociedad
  PERFORM recuperar_soc_pa USING    is_dato-bukrs
                           CHANGING lv_erkrs.
  CHECK lv_erkrs IS NOT INITIAL.

* Recuperamos todos los campos que mapearemos en PA
  SELECT * INTO TABLE lti_fieldpa
      FROM  ztsdcom003
      WHERE tipoa = i_tipoa.
  CHECK sy-subrc = 0.

* Creamos el nombre de la tabla de partidas PA
  CONCATENATE 'CE1' lv_erkrs INTO lv_patable.

* Creamos la estructura de la tabla dinámicamente
  CREATE DATA lo_patable TYPE (lv_patable).
  CHECK sy-subrc = 0.
  ASSIGN lo_patable->* TO <fs_patable>.
  CHECK sy-subrc = 0.

* Recuperamos la partida PA contabilizada de la factura de ventas original
  SELECT SINGLE * INTO <fs_patable>
      FROM  (lv_patable)
      WHERE rbeln      = is_dato-vbeln
      AND   rposn      = is_dato-posnr
      AND   copa_awtyp = 'VBRK'.
  CHECK sy-subrc = 0.

* Recorremos la tabla de campos PA a mapear rellenando las tablas de salida
  LOOP AT lti_fieldpa INTO ls_fieldpa.

    UNASSIGN <fs_value>.
*   Si el campo PA tiene en el custo un campo de mapeo, mapeamos de la
*   estructra IS_DATO (de la que nos llega
    IF ls_fieldpa-fieldmap IS NOT INITIAL.
      ASSIGN COMPONENT ls_fieldpa-fieldmap OF STRUCTURE is_dato TO <fs_value>.
      CHECK sy-subrc = 0.
*   Si el campo PA NO tiene campo mapeo, cogemos el mismo valor que hayamos
*   recuperado de PA
    ELSE.
      ASSIGN COMPONENT ls_fieldpa-fieldname OF STRUCTURE <fs_patable> TO <fs_value>.
      CHECK sy-subrc = 0.
    ENDIF.

*   Chequeamos que hay valor
    CHECK <fs_value> IS NOT INITIAL.

*   Si el campo tiene referencia (moneda o UM), sacamos el valor del campo referencia
    IF ls_fieldpa-fieldref IS NOT INITIAL.
      ASSIGN COMPONENT ls_fieldpa-fieldref OF STRUCTURE <fs_patable> TO <fs_ref>.
      CHECK sy-subrc = 0.
    ENDIF.

*   Según el tipo de campo: característica o valor; rellenamos uan tabla u otra
    CASE ls_fieldpa-tipoc.
*     Característica
      WHEN '01'.
        CLEAR ls_caract.
        ls_caract-fieldname = ls_fieldpa-fieldname.
        ls_caract-character = <fs_value>.
        APPEND ls_caract TO et_caracpa.

*     Valor
      WHEN '02'.
        CLEAR ls_value.
        ls_value-fieldname = ls_fieldpa-fieldname.
*       Para importes
        IF ls_fieldpa-tipov = '01'.
          ls_value-curr_type  = '00'.
          ls_value-amt_valcom = <fs_value>.
          ls_value-currency   = <fs_ref>.
*       Para cantidades
        ELSE.
          ls_value-qua_valcom = <fs_value>.
          ls_value-base_uom   = <fs_ref>.
        ENDIF.
        APPEND ls_value TO et_valuepa.

    ENDCASE.
  ENDLOOP.

ENDFUNCTION.
