FUNCTION zssd_fill_zcli_debitor.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  EXPORTING
*"     REFERENCE(E_KUNNR) TYPE  KUNNR
*"     REFERENCE(E_STCD1) TYPE  STCD1
*"     REFERENCE(E_BUKRS) TYPE  BUKRS
*"     REFERENCE(E_VKORG) TYPE  VKORG
*"  TABLES
*"      T_IDOC_DATA STRUCTURE  EDIDD
*"  EXCEPTIONS
*"      NIF_EXISTS
*"----------------------------------------------------------------------

  FIELD-SYMBOLS <x_idoc_data>  TYPE edidd.
  DATA ls_e1kna1m  TYPE e1kna1m.
  DATA ls_e1knb1m  TYPE e1knb1m.
  DATA ls_e1knvvm  TYPE e1knvvm.
  DATA ls_ze1adrc  TYPE ze1adrc.

  " Actualizar estructura E1KNA1M para el campo nombre si viene vacio
  READ TABLE t_idoc_data ASSIGNING <x_idoc_data> WITH KEY segnam = 'E1KNA1M'.
  IF sy-subrc EQ 0.
    ls_e1kna1m = <x_idoc_data>-sdata.
    IF ls_e1kna1m-ktokd = 'ZCLI' OR ls_e1kna1m-ktokd = 'ZPOT'.

      SELECT SINGLE * INTO @DATA(x_kna1_aux)
        FROM kna1
        WHERE stcd1 = @ls_e1kna1m-stcd1.
      IF sy-subrc EQ 0.
        IF ls_e1kna1m-kunnr IS INITIAL.
          ls_e1kna1m-kunnr = x_kna1_aux-kunnr.
        ENDIF.
      ENDIF.



      IF ls_e1kna1m-name1 IS INITIAL.
        READ TABLE t_idoc_data INTO DATA(ls_idoc_data) WITH KEY segnam = 'ZE1ADRC'.
        IF sy-subrc EQ 0.
          ls_ze1adrc = ls_idoc_data-sdata.
          ls_e1kna1m-name1 = ls_ze1adrc-name.
        ENDIF.
        IF ls_e1kna1m-name1 IS INITIAL.
          ls_e1kna1m-name1 = x_kna1_aux-name1.
        ENDIF.
        <x_idoc_data>-sdata = ls_e1kna1m.
      ENDIF.
      IF ls_e1kna1m-ktokd <> 'ZCLI'.
      ELSE.
        DELETE t_idoc_data WHERE segnam = 'ZE1ADRC'.
      ENDIF.
    ENDIF.
  ENDIF.

  " Actualizar estructura E1KNB1M
  IF x_kna1_aux IS NOT INITIAL.
    READ TABLE t_idoc_data ASSIGNING <x_idoc_data> WITH KEY segnam = 'E1KNB1M'.
    IF sy-subrc EQ 0.
      IF ls_e1kna1m-ktokd = 'ZCLI'.
        ls_e1knb1m = <x_idoc_data>-sdata.

        " Valida si ya existe en sociedad
        SELECT SINGLE *
         FROM knb1 INTO @DATA(x_knb1_aux)
         WHERE kunnr EQ @x_kna1_aux-kunnr
           AND bukrs EQ @ls_e1knb1m-bukrs.
        IF sy-subrc EQ 0.
          DATA(lv_exits_bukrs) = abap_true.
          DELETE t_idoc_data WHERE segnam = 'E1KNB1M'. " Se borra el segmento sociedad para que no intente actualizar
        ELSE.
          SELECT * UP TO 1 ROWS
            FROM knb1 INTO @x_knb1_aux
            WHERE kunnr EQ @x_kna1_aux-kunnr.
          ENDSELECT.
          IF sy-subrc EQ 0.
            ls_e1knb1m-akont = x_knb1_aux-akont.
            ls_e1knb1m-zwels = x_knb1_aux-zwels.
            ls_e1knb1m-zterm = x_knb1_aux-zterm.
            <x_idoc_data>-sdata = ls_e1knb1m.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    READ TABLE t_idoc_data ASSIGNING <x_idoc_data> WITH KEY segnam = 'E1KNVVM'.
    IF sy-subrc EQ 0.
      IF ls_e1kna1m-ktokd = 'ZCLI'.
        ls_e1knvvm = <x_idoc_data>-sdata.

        " Valida si la org. de ventas existe
        SELECT SINGLE * INTO @DATA(x_knvv_aux)
         FROM knvv
         WHERE kunnr EQ @x_kna1_aux-kunnr
           AND vkorg EQ @ls_e1knvvm-vkorg.

        IF sy-subrc EQ 0.
          IF lv_exits_bukrs EQ abap_true.
            e_kunnr = x_kna1_aux-kunnr.
            e_stcd1 = x_kna1_aux-stcd1.
            e_bukrs = x_knb1_aux-bukrs.
            e_vkorg = ls_e1knvvm-vkorg.
            RAISE nif_exists.
          ENDIF.
        ENDIF.

        CLEAR x_knb1_aux.
        SELECT SINGLE knb1~* INTO @x_knb1_aux
          FROM tvko
          INNER JOIN knb1 ON knb1~bukrs EQ tvko~bukrs AND knb1~kunnr EQ @x_kna1_aux-kunnr
          WHERE vkorg EQ @x_knvv_aux-vkorg.

        IF sy-subrc EQ 0.
          ls_e1knvvm-zterm = x_knb1_aux-zterm.
          <x_idoc_data>-sdata = ls_e1knvvm. " Actualizar estructura E1KNVVM
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

  CLEAR: ls_idoc_data, ls_ze1adrc, ls_e1kna1m,  x_kna1_aux, ls_e1knvvm.

ENDFUNCTION.
