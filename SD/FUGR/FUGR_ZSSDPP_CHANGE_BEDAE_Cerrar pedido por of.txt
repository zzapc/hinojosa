FUNCTION zssdpp_change_bedae.
*"----------------------------------------------------------------------
*"*"Módulo funciones actualiz.
*"
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_AUFNR) TYPE  AUFNR
*"     VALUE(I_SCHED_TYPE) TYPE  ETTYP OPTIONAL
*"     VALUE(I_COMMIT) TYPE  FLAG OPTIONAL
*"----------------------------------------------------------------------

  CALL FUNCTION 'ZSSDPP_CHANGE_BEDAE_FONDO' IN BACKGROUND TASK DESTINATION 'NONE'
    EXPORTING
      i_aufnr      = i_aufnr    " Número de orden
      i_sched_type = i_sched_type    " Tipo de posición del reparto
      i_commit     = i_commit.    " Indicador general

*  DATA: c_veces TYPE i VALUE 20.
*  DATA: e_error   TYPE flag,
*        et_return TYPE bapiret2_t.
*
*  DATA: l_salesdocument    TYPE  bapivbeln-vbeln,
*        l_order_header_in  TYPE  bapisdhead1,
*        l_order_header_inx TYPE  bapisdhead1x,
*        t_return           TYPE  bapiret2_t,
*        t_item_in          TYPE TABLE OF  bapisditem,
*        l_item_in          TYPE bapisditem,
*        t_item_inx         TYPE TABLE OF bapisditemx,
*        l_item_inx         TYPE bapisditemx.
*
*  DATA: head_simulate TYPE bapisdhead,
*        it_items_s    TYPE TABLE OF bapiitemin,
*        l_item_s      TYPE bapiitemin,
*        it_items_out  TYPE TABLE OF bapiitemex,
*        it_partners   TYPE TABLE OF bapiparnr,
*        l_parnr       TYPE bapipartnr.
*
*
*  DATA: t_schedule_in  TYPE TABLE OF bapischedule,
*        l_schedule_in  TYPE bapischedule,
*        t_schedule_inx TYPE TABLE OF  bapischedulex,
*        l_schedule_inx TYPE bapischedulex.
*
*  DATA: l_resto         TYPE kwmeng,
*        l_resto_sim     TYPE kwmeng,
*        l_resto_reparto TYPE kwmeng.
*
*  IF i_sched_type IS INITIAL.
*    i_sched_type = 'CN'.
*  ENDIF.
*
*  SELECT SINGLE * INTO @DATA(l_aufk) FROM aufk WHERE aufnr = @i_aufnr.
*  SELECT SINGLE * INTO @DATA(l_afpo) FROM afpo WHERE aufnr = @i_aufnr.
*
*  IF l_aufk-kdauf IS INITIAL.
*    SELECT SINGLE kdauf kdpos INTO ( l_aufk-kdauf, l_aufk-kdpos ) FROM zpp0002 WHERE aufnr = i_aufnr.
*  ENDIF.
*
*  SELECT SINGLE * INTO @DATA(l_vbap) FROM vbap WHERE vbeln = @l_aufk-kdauf AND posnr = @l_aufk-kdpos.
*
*  SELECT SINGLE * INTO @DATA(l_vbak) FROM vbak WHERE vbeln = @l_aufk-kdauf.
*
*  CHECK l_aufk-kdauf IS NOT INITIAL.
*
*  SELECT * INTO TABLE @DATA(t_vbep) FROM vbep WHERE vbeln = @l_aufk-kdauf AND posnr = @l_aufk-kdpos.
*
*  l_salesdocument = l_aufk-kdauf.
*
*  l_order_header_inx-updateflag = 'U'.
*
*  l_item_in-itm_number = l_vbap-posnr.
*  l_item_in-material = l_vbap-matnr.
*
*  APPEND l_item_in TO t_item_in.
*
*  l_item_inx-itm_number = l_vbap-posnr.
*  l_item_inx-updateflag = 'U'.
*  APPEND l_item_inx TO t_item_inx.
*
*  LOOP AT t_vbep INTO DATA(l_vbep).
*    l_schedule_in-itm_number = l_vbap-posnr.
*    l_schedule_in-sched_line = l_vbep-etenr.
*    l_schedule_in-sched_type = i_sched_type.
*    APPEND l_schedule_in TO t_schedule_in.
*
*    l_schedule_inx-itm_number = l_vbap-posnr.
*    l_schedule_inx-sched_line = l_vbep-etenr.
*    l_schedule_inx-sched_type = 'X'.
*    l_schedule_inx-updateflag = 'U'.
*
*    APPEND l_schedule_inx TO t_schedule_inx.
*
*  ENDLOOP.
*
*
*  CLEAR: et_return.
*
*  CALL FUNCTION 'DIALOG_SET_NO_DIALOG'.
*
*  CALL FUNCTION 'BAPI_SALESDOCUMENT_CHANGE'
*    EXPORTING
*      salesdocument    = l_salesdocument
*      order_header_in  = l_order_header_in
*      order_header_inx = l_order_header_inx
**     simulation       = SPACE
*    TABLES
*      return           = et_return
*      item_in          = t_item_in
*      item_inx         = t_item_inx
*      schedule_in      = t_schedule_in
*      schedule_inx     = t_schedule_inx.
*
*  IF i_commit IS NOT INITIAL.
*    LOOP AT et_return TRANSPORTING NO FIELDS WHERE type CA 'EAX'.
*      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*      e_error = 'X'.
*      RETURN.
*    ENDLOOP.
*
*    REFRESH: et_return.
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*      EXPORTING
*        wait = 'X'.
*
*  ENDIF.
*  DATA(lo_log) =  NEW zcl_seidor_guardar_log( ).
*  lo_log->refresh( ).
*
*
*  LOOP AT et_return INTO DATA(ls_return).
*    lo_log->guardar_mensaje(
*      EXPORTING
*        i_type       = ls_return-type
*        i_id         = ls_return-id
*        i_number     = ls_return-number
*        i_message_v1 = ls_return-message_v1
*        i_message_v2 = ls_return-message_v2
*        i_message_v3 = ls_return-message_v3
*        i_message_v4 = ls_return-message_v4
*        ).
*  ENDLOOP.
*
*  DATA: objeto    TYPE balobj_d,
*        subobjeto  TYPE balsubobj,
*        extnumber  TYPE balnrext.
*
*  extnumber = i_aufnr.
*
*  lo_log->guardar_log(
*    EXPORTING
*    objeto    = 'ZPP'    " Log aplicación: Nombre objeto (sigla de aplicación)
*    subobjeto = 'ZPP2001_3'    " Log aplicación: Objeto inferior
*    extnumber =  extnumber  " Log aplicación: Identificación externa
*    IMPORTING
*    lognumber = DATA(lv_lognum)    " Número de LOG
*    ).
ENDFUNCTION.
