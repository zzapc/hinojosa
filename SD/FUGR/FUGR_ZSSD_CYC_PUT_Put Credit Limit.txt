FUNCTION zssd_cyc_put.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_KKBER) TYPE  KKBER
*"     VALUE(I_KUNNR) TYPE  KUNNR
*"     VALUE(I_KRAUS) TYPE  KRAUS_CM
*"     VALUE(I_WAERS) TYPE  WAERS
*"     VALUE(I_AMOUNT) TYPE  AMOUNTHR
*"  EXPORTING
*"     VALUE(E_AMOUNT) TYPE  AMOUNTHR
*"     VALUE(E_DESC) TYPE  CHAR40
*"  TABLES
*"      RETURN STRUCTURE  BAPIRET2
*"----------------------------------------------------------------------

  "START TYPES & DATA-----------------------
  TYPES: BEGIN OF ty_datos,
           batch_mode_status(40) TYPE c,
         END OF ty_datos.

  TYPES: BEGIN OF ty_application_summary,
           buyer_i_d(40)               TYPE c,
           request_date(40)            TYPE c,
           request_amount(40)          TYPE c,
           request_amount_currency(40) TYPE c,
           requestsequential(40)       TYPE c,
           duration(40)                TYPE c.
  TYPES: END OF ty_application_summary.

  TYPES: BEGIN OF ty_decision_resolution,
           resolution_desc(40)     TYPE c,
           resolution_amount(40)   TYPE c,
           resolution_currency(40) TYPE c.
  TYPES: END OF ty_decision_resolution.

  TYPES: BEGIN OF ty_credit_limiti_decision,
           policy(40)          TYPE c,
           buyer_i_d(40)       TYPE c,
           application_summary TYPE ty_application_summary,
           decision_resolution TYPE ty_decision_resolution.
  TYPES: END OF ty_credit_limiti_decision.

  TYPES: BEGIN OF ty_response_status,
           status_desc(40) TYPE c,
           status_date(40) TYPE c,
           status_code(40) TYPE c.
  TYPES: END OF ty_response_status.

  TYPES: BEGIN OF ty_respuesta,
           credit_limiti_decision TYPE ty_credit_limiti_decision,
           response_status        TYPE ty_response_status,
           response_message(40)   TYPE c.
  TYPES: END OF ty_respuesta.

  DATA lt_respuesta TYPE TABLE OF ty_respuesta.
  DATA l_respuesta TYPE ty_respuesta.


  DATA: l_cyc_id     TYPE string,
        l_cyc_secret TYPE string.

  DATA:
    lo_http_client TYPE REF TO if_http_client,
    ls_return      TYPE bapiret2,
    lv_data        TYPE xstring,
    lv_json        TYPE string,
    lv_response    TYPE string,
    lv_http_code   TYPE i,
    lv_http_reason TYPE string,
    lv_url         TYPE string.

  DATA:
    lv_status_code TYPE c.



  FIELD-SYMBOLS:
    <data>        TYPE data,
    <results>     TYPE any,
    <structure>   TYPE any,
    <field>       TYPE any,
    <field_value> TYPE data.


  "END TYPES & DATA-------------------------

  CONSTANTS:
    co_content_type TYPE string VALUE 'application/json'.

* >> MVR - 29.03.23 - Leemos URL de tabla Z
*  IF i_kraus IS INITIAL.
*
*    SELECT SINGLE stcd1, land1 INTO @DATA(l_kna1)
*      FROM kna1
*      WHERE kunnr = @i_kunnr.
*
**      Obtenemos el codigo ISO 3 posiciones dek pais
*
*    SELECT SINGLE intca3 INTO @DATA(l_pais)
*      FROM t005
*      WHERE land1 = @l_kna1-land1.
*
*
*    lv_url = 'https://apipre.creditoycaucion.es/creditlimitsapi/creditLimitApplications/country/' && l_pais && '/nreg/' && l_kna1-stcd1 && '?amount=' && i_amount && '&currency=' && i_waers && '&duration=10'.
*  ELSE.
*    lv_url = 'https://apipre.creditoycaucion.es/creditlimitsapi/creditLimitApplications/' && i_kraus && '?amount=' && i_amount && '&currency=' && i_waers && '&duration=10'.
*  ENDIF.
  SELECT SINGLE url INTO lv_url
    FROM zssd_cyc_urls
    WHERE kkber = i_kkber.
  IF sy-subrc EQ 0.
    IF i_kraus IS INITIAL.
      SELECT SINGLE stcd1, land1 INTO @DATA(l_kna1)
        FROM kna1
        WHERE kunnr = @i_kunnr.
*      Obtenemos el codigo ISO 3 posiciones dek pais
      SELECT SINGLE intca3 INTO @DATA(l_pais)
        FROM t005
        WHERE land1 = @l_kna1-land1.
      lv_url = lv_url && 'country/' && l_pais && '/nreg/' && l_kna1-stcd1 && '?amount=' && i_amount && '&currency=' && i_waers && '&duration=10'.
    ELSE.
      lv_url = lv_url && i_kraus && '?amount=' && i_amount && '&currency=' && i_waers && '&duration=10'.
    ENDIF.
  ENDIF.
* << MVR - 29.03.23

  ls_return-id = 'ZSSD_CYC'.
  ls_return-number = '001'.
  ls_return-type = 'I'.
  ls_return-message_v1 = i_kunnr.
  ls_return-message_v2 = i_kkber.
  APPEND ls_return TO return.

  "Generate HTTP Client
  cl_http_client=>create_by_url(
    EXPORTING
      url = lv_url
    IMPORTING
      client = lo_http_client
    EXCEPTIONS
      argument_not_found  = 1
      plugin_not_active   = 2
      internal_error      = 3
    OTHERS                = 4
  ).

  IF sy-subrc <> 0.
    ls_return-id = 'ZSSD_CYC'.
    ls_return-number = '002'.
    ls_return-type = 'E'.
    ls_return-message_v1 = lv_url.
    RETURN.
  ENDIF.

  SELECT SINGLE client_id client_secret INTO (l_cyc_id, l_cyc_secret )
    FROM zssd_cyc_soc
    WHERE kkber = i_kkber.

  "Prepare call
  lo_http_client->request->set_method( 'PUT' ).
  lo_http_client->request->set_content_type( co_content_type ).
  lo_http_client->request->set_header_field( name = 'X-IBM-Client-Secret' value = l_cyc_secret ).
  lo_http_client->request->set_header_field( name = 'X-IBM-Client-Id' value = l_cyc_id ).
  lo_http_client->propertytype_logon_popup = if_http_client=>co_disabled.


  "Sending the request
  lo_http_client->send(
    EXCEPTIONS
      http_communication_failure  = 1
      http_invalid_state          = 2
  ).

  "Receiving the response
  lo_http_client->receive(
    EXCEPTIONS
      http_communication_failure  = 1
      http_invalid_state          = 2
      http_processing_failed      = 3
  ).
  lv_response = lo_http_client->response->get_cdata( ).

  "Get the status of the response
  CALL METHOD lo_http_client->response->get_status
    IMPORTING
      code   = lv_http_code
      reason = lv_http_reason.


  "Format response
  /ui2/cl_json=>deserialize( EXPORTING json = lv_response pretty_name = /ui2/cl_json=>pretty_mode-camel_case
                            CHANGING data = l_respuesta ).

  IF lv_http_code = 200. "OK

    IF l_respuesta-response_status-status_code = 0.

      ls_return-id = 'ZSSD_CYC'.
      ls_return-number = '005'.
      ls_return-type = 'E'.
      ls_return-message_v1 = l_respuesta-response_message .
*      ls_return-message_v2 = e_amount.
      APPEND ls_return TO return.

    ELSE.

      e_amount = l_respuesta-credit_limiti_decision-decision_resolution-resolution_amount.
      e_desc = l_respuesta-credit_limiti_decision-decision_resolution-resolution_desc.

      ls_return-id = 'ZSSD_CYC'.
      ls_return-number = '004'.
      ls_return-type = 'I'.
      ls_return-message_v1 = e_desc .
      ls_return-message_v2 = e_amount.
      APPEND ls_return TO return.
    ENDIF.


  ELSE.
    "ERROR, en la llamada al servicio
    ls_return-id = 'ZSSD_CYC'.
    ls_return-number = '003'.
    ls_return-type = 'E'.
    ls_return-message_v1 = lv_http_code.
    ls_return-message_v2 = lv_http_reason.
    APPEND ls_return TO return.
    RETURN.
  ENDIF.


ENDFUNCTION.
