FUNCTION zssd034_get_orders.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(IRG_VBELN) TYPE  EDM_VBELN_RANGE_TT OPTIONAL
*"     VALUE(IRG_AUART) TYPE  FIP_T_AUART_RANGE OPTIONAL
*"     VALUE(IRG_BSTNK) TYPE  FAGL_R_T_BSTNK_RANGE OPTIONAL
*"     VALUE(IRG_KUNNR) TYPE  RANGE_KUNNR_TAB OPTIONAL
*"     VALUE(IRG_LIFNR) TYPE  FAGL_RANGE_T_LIFNR OPTIONAL
*"     VALUE(IRG_KLABC) TYPE  ZSD_TT_RANGE_KLABC OPTIONAL
*"     VALUE(IRG_KUNWE) TYPE  SHP_KUNWE_RANGE_T OPTIONAL
*"     VALUE(IRG_AUFNR) TYPE  RANGE_AUFNR_TAB OPTIONAL
*"     VALUE(IRG_FECH_INI) TYPE  TRGR_DATE OPTIONAL
*"     VALUE(IRG_FECHA_REPARTO) TYPE  TRGR_DATE OPTIONAL
*"     VALUE(IRG_FECH_FIN) TYPE  TRGR_DATE OPTIONAL
*"     VALUE(IRG_KDMAT) TYPE  EDM_KDMAT35_RANGE_TT OPTIONAL
*"     VALUE(IRG_MATNR) TYPE  ZSD_TT_RANGE_MATNR OPTIONAL
*"     VALUE(IV_SITUACION) TYPE  ZSSD_DE_SITUACION OPTIONAL
*"     VALUE(IV_CARGA_PLANIF) TYPE  ZSSD_DE_CANT_PLANIF OPTIONAL
*"     VALUE(IV_GJAHR) TYPE  GJAHR OPTIONAL
*"     VALUE(IV_ANY) TYPE  FLAG DEFAULT 'X'
*"     VALUE(IV_CITA) TYPE  FLAG DEFAULT 'X'
*"     VALUE(IV_SUBCO) TYPE  FLAG DEFAULT 'X'
*"     VALUE(IV_FECHA) TYPE  FLAG DEFAULT 'X'
*"     VALUE(IV_CANT) TYPE  FLAG DEFAULT 'X'
*"     VALUE(IV_HOMOL) TYPE  FLAG DEFAULT 'X'
*"     VALUE(IRG_LIFNR_A1) TYPE  FAGL_RANGE_T_LIFNR OPTIONAL
*"     VALUE(IRG_ERDAT) TYPE  TRGR_DATE OPTIONAL
*"     VALUE(I_HISTORICO) TYPE  FLAG OPTIONAL
*"     VALUE(I_360) TYPE  FLAG OPTIONAL
*"     VALUE(IRG_VKORG) TYPE  FKK_RT_VKORG OPTIONAL
*"     VALUE(I_CP) TYPE  PSTLZ OPTIONAL
*"  EXPORTING
*"     VALUE(OT_OUTPUT) TYPE  ZSSD034_TT_PEDIDOS_BACKOFFICE
*"     VALUE(OT_RETURN) TYPE  BAPIRET2_T
*"----------------------------------------------------------------------
  DATA: lv_erdat      TYPE erdat,
        lv_posnr      TYPE posnr,
        lv_ekgrp      TYPE ekgrp,
        lv_lifnr      TYPE lifnr,
        lv_tdname     TYPE  thead-tdname,
        lt_clas_stock TYPE  ckmcso_bedae_t,
        lines         TYPE TABLE OF tline,
        header        TYPE thead,
        gs_output     TYPE  zssd034_s_pedidos_backoffice,
        r_cp          TYPE RANGE OF pstlz.
  DATA: r_gbsta TYPE RANGE OF gbsta.
  TYPES: BEGIN OF ty_jest_oper,
           aufnr TYPE aufnr,
           vornr TYPE vornr,
           aufpl TYPE co_aufpl,
           objnr TYPE j_objnr.
  TYPES: END OF ty_jest_oper.
  DATA t_max_oper TYPE TABLE OF ty_jest_oper.

  CONSTANTS: c_tdid_zcp2 TYPE  thead-tdid VALUE 'ZPC2',
             c_tdobject  TYPE  thead-tdobject VALUE 'VBBK'.

  IF iv_gjahr IS INITIAL.
    lv_erdat = |{ sy-datum(4) }| && |1231|.
  ELSE.
    lv_erdat = |{ iv_gjahr }| && |1231|.
  ENDIF.

  IF i_historico IS INITIAL.
    APPEND INITIAL LINE TO r_gbsta ASSIGNING FIELD-SYMBOL(<ls_gbsta>).
    <ls_gbsta>-sign = 'I'.
    <ls_gbsta>-option = 'NE'.
    <ls_gbsta>-low = 'C'.

  ENDIF.

  IF i_360 IS INITIAL.
    APPEND INITIAL LINE TO irg_vkorg ASSIGNING FIELD-SYMBOL(<ls_vkorg>).
    <ls_vkorg>-sign = 'I'.
    <ls_vkorg>-option = 'EQ'.
    <ls_vkorg>-low = '2001'.

  ENDIF.

  IF i_cp IS NOT INITIAL.
    APPEND INITIAL LINE TO r_cp ASSIGNING FIELD-SYMBOL(<ls_cp>).
    <ls_cp>-option = 'EQ'.
    <ls_cp>-sign = 'I'.
    <ls_cp>-low = i_cp.
  ENDIF.

  "Recuperamos los datos de la tabla de Parametrización BEDAE
  CALL FUNCTION 'ZSSD_BEDAE_RANGO'
    IMPORTING
*     E_CLAS_PEDIDO       =
      e_clas_stock = lt_clas_stock.



  SELECT k~vbeln,
         k~bstnk,
         k~kunnr,
         k~vdatu,
         k~erdat AS audat,
         k~auart,
*         k~zzfechaconfirmacion,
*         ep~wadat AS zzfechaconfirmacion,
         p~zzfconfs AS zzfechaconfirmacion,
         ep~bmeng,
         k~vkorg,
         k~vtweg,
         k~spart,
         p~bedae,
         p~posnr,
         p~matnr,
         p~werks,
         p~arktx,
         p~kwmeng,
         p~vrkme,
         p~meins,
         p~charg,
         p~route,
         p~lgort,
         p~zstatp,
         p~cuobj,
         m~hoehe,
         m~breit,
         m~laeng,
         pa~lifnr,
         ep~etenr,
         ep~banfn,
         ep~bnfpo,
         kna1_kunnr~name1 AS name1_kunnr,
         knvv~klabc,
         uk~cmgst,
         k~lifsk,
         mt~maktx,
         y~board AS calidad,
         p~abgru,
         t~bezei AS desc_abgru,
         tb~bdtxt AS desc_bedae,
         ep~zzbstkd,
         p~kzwi4 AS zm2_venta,
         ep~wmeng,
         kw~pstlz,
         vbpa_we~kunnr AS kunwe
    FROM vbak AS k
    INNER JOIN vbap AS p  ON k~vbeln = p~vbeln
    INNER JOIN vbup ON vbup~vbeln = p~vbeln AND vbup~posnr = p~posnr
    INNER JOIN mara AS m  ON p~matnr = m~matnr
    INNER JOIN makt AS mt ON m~matnr = mt~matnr
                         AND mt~spras = @sy-langu
    INNER JOIN vbep AS ep ON p~vbeln = ep~vbeln
                         AND p~posnr = ep~posnr
    LEFT JOIN vbep AS ep2 ON p~vbeln = ep2~vbeln
                         AND p~posnr = ep2~posnr
                         AND ep~etenr = ep2~etenr
                         AND ep2~bmeng > 0
    LEFT OUTER JOIN vbpa AS pa ON k~vbeln = pa~vbeln
                              AND pa~parvw = 'Y0'
    INNER JOIN vbuk AS uk ON k~vbeln = uk~vbeln
    INNER JOIN kna1 AS kna1_kunnr ON k~kunnr = kna1_kunnr~kunnr
    INNER JOIN knvv AS knvv ON k~kunnr = knvv~kunnr
                           AND k~vkorg = knvv~vkorg
                           AND k~vtweg = knvv~vtweg
                           AND k~spart = knvv~spart
    INNER JOIN vbpa AS vbpa_we ON k~vbeln = vbpa_we~vbeln
                                AND vbpa_we~parvw = 'WE'
    INNER JOIN kna1 AS kw ON vbpa_we~kunnr = kw~kunnr
    INNER JOIN marc AS c ON c~matnr = m~matnr AND p~werks = c~werks

*    LEFT JOIN yhp_idx_td110 AS y ON y~cuobj = c~cuobj AND y~mboar = 'S' En el mboar 'S' viene el semi
    LEFT JOIN yhp_idx_td110 AS y ON y~cuobj = c~cuobj AND y~mboar = 'P'
    LEFT JOIN tvagt AS t ON t~abgru = p~abgru AND t~spras = @sy-langu
    LEFT JOIN t459w AS tb ON tb~bedae = p~bedae AND tb~spras = @sy-langu
    INTO TABLE @DATA(lt_output)
    WHERE k~vbeln IN @irg_vbeln[]
      AND k~erdat IN @irg_erdat[]
      AND p~matnr IN @irg_matnr[]
      AND k~vbeln IN @irg_vbeln[]
      AND k~auart IN @irg_auart[]
      AND k~kunnr IN @irg_kunnr[]
*      AND k~zzfechaconfirmacion IN @irg_fech_ini[]
      AND ep~wadat IN @irg_fech_ini[]
      AND k~vkorg IN @irg_vkorg                             "EQ '2001'
      AND k~vtweg EQ '10'
      AND k~spart EQ '10'
      AND k~vbtyp EQ 'C'  "Pedido
*      AND uk~gbstk NE 'C' "Pendientes de entregar/facturar "ASC 08.11.22 Petición en el arranque
      AND k~audat <= @lv_erdat
      AND k~bstnk IN @irg_bstnk
      AND pa~lifnr IN @irg_lifnr[]
      AND vbpa_we~kunnr IN @irg_kunwe
      AND kw~pstlz IN @r_cp "Filtramos por el CP de la App 360
      AND ep2~edatu IN @irg_fecha_reparto
    AND vbup~gbsta IN @r_gbsta.




  "Centros de la organizaciones de ventas
  "JCB 02.06.23. 77534 - FALTAN DATOS EN BO PEDIDO 25704
  IF lt_output IS NOT INITIAL.
    SELECT vkorg, vtweg, werks
      INTO TABLE @DATA(tl_tvkwz)
      FROM tvkwz
      FOR ALL ENTRIES IN @lt_output
      WHERE vkorg = @lt_output-vkorg AND
            vtweg = @lt_output-vtweg.

    SELECT marc~werks, marc~matnr, marc~cuobj, yhp_idx_td110~board AS calidad
      INTO TABLE @DATA(tl_marc)
      FROM marc LEFT OUTER JOIN yhp_idx_td110 ON yhp_idx_td110~cuobj = marc~cuobj AND
                                                 yhp_idx_td110~mboar = 'P'

      FOR ALL ENTRIES IN @lt_output
      WHERE marc~matnr =  @lt_output-matnr AND
            marc~cuobj <> '000000000000000000'.
  ENDIF.

  DATA tl_werks_rg TYPE RANGE OF marc-werks.
  LOOP AT lt_output ASSIGNING FIELD-SYMBOL(<fs_output1>) WHERE cuobj IS INITIAL.
    tl_werks_rg = VALUE #( FOR wl_tvkwz IN tl_tvkwz WHERE ( vkorg = <fs_output1>-vkorg AND
                                                            vtweg = <fs_output1>-vtweg )
                                                          ( sign = 'I' option = 'EQ' low = wl_tvkwz-werks ) ).
    IF tl_werks_rg IS NOT INITIAL.
      LOOP AT tl_marc ASSIGNING FIELD-SYMBOL(<fs_marc>) WHERE matnr = <fs_output1>-matnr AND
                                                              werks IN tl_werks_rg.
        <fs_output1>-cuobj    = <fs_marc>-cuobj.
        <fs_output1>-calidad  = <fs_marc>-calidad.
        EXIT.
      ENDLOOP.
    ENDIF.
  ENDLOOP.
  "FIN JCB 02.06.23. 77534 - FALTAN DATOS EN BO PEDIDO 25704



  REFRESH ot_output.
  DATA(lt_out_aux) = lt_output[].
  SORT lt_out_aux BY vbeln posnr etenr.
  DELETE ADJACENT DUPLICATES FROM lt_out_aux COMPARING vbeln posnr etenr.

  LOOP AT lt_out_aux INTO DATA(ls_out_aux).

    LOOP AT lt_output INTO DATA(ls_output) WHERE vbeln = ls_out_aux-vbeln
                                             AND posnr = ls_out_aux-posnr
                                             AND etenr = ls_out_aux-etenr.

    ENDLOOP.
    CLEAR gs_output.
    MOVE-CORRESPONDING ls_output TO gs_output.

    "JCB 27.04.23. SD - Añadir M2 pedido en ZSSD034
    IF ls_output-kwmeng <> 0.
      gs_output-zm2_venta_rep = ls_output-zm2_venta * ls_output-wmeng / ls_output-kwmeng.

*      CALL FUNCTION 'ROUND'
*        EXPORTING
*          input         = gs_output-zm2_venta_rep
*          sign          = 'X'
*        IMPORTING
*          output        = gs_output-zm2_venta_rep
*        EXCEPTIONS
*          input_invalid = 1
*          overflow      = 2
*          type_invalid  = 3
*          OTHERS        = 4.
    ENDIF.
    "FIN JCB 27.04.23. SD - Añadir M2 pedido en ZSSD034
    gs_output-cant_pos_cli = ls_output-kwmeng.


    "Estado de Credito
    IF ls_output-cmgst = 'B' OR ls_output-cmgst = 'C'.
      gs_output-stat_credito = 'X'.
    ENDIF.

    "Estado de Bloqueo entrega
    IF ls_output-lifsk NE ''.
      gs_output-stat_bloq_entre = 'X'.
    ENDIF.

    APPEND gs_output TO ot_output.

  ENDLOOP.




*  DELETE lt_output WHERE route IS INITIAL.
  SORT lt_output BY route.
*  DELETE ADJACENT DUPLICATES FROM lt_output COMPARING route.

  IF lt_output[] IS NOT INITIAL.

    SELECT cuobj, cself, shuty, shunt, packp, prqty, prqty_uom, tbqty, tbqty_uom, length, length_uom, width, width_uom, height, height_uom
      INTO TABLE @DATA(lt_td151_unit)
      FROM yhp_idx_td151
      FOR ALL ENTRIES IN @lt_output[]
      WHERE cuobj = @lt_output-cuobj
        AND shuty = 'UNIT'.

    SELECT cuobj, cself, shuty, shunt, packp, prqty, prqty_uom, tbqty, tbqty_uom
      INTO TABLE @DATA(lt_td151_group)
      FROM yhp_idx_td151
      FOR ALL ENTRIES IN @lt_output[]
      WHERE cuobj = @lt_output-cuobj
        AND shuty = 'GROUP'.

    DATA(lt_output_banfn) = lt_output.
    DELETE lt_output_banfn WHERE banfn IS INITIAL.

    IF lt_output_banfn[] IS NOT INITIAL.
      SELECT banfn , bnfpo, ebeln
        FROM ekpo
        INTO TABLE @DATA(lt_banfn)
        FOR ALL ENTRIES IN @lt_output_banfn[]
        WHERE banfn = @lt_output_banfn-banfn
          AND bnfpo = @lt_output_banfn-bnfpo.
    ENDIF.

    SELECT route, traztd
      FROM tvro INTO TABLE @DATA(lt_tvro)
      FOR ALL ENTRIES IN @lt_output[]
      WHERE route = @lt_output-route.

    SORT lt_tvro BY route.
    DELETE ADJACENT DUPLICATES FROM lt_tvro COMPARING route.

    SELECT kunnr, vkorg, vtweg, spart, zzcita_previa FROM knvv
      INTO TABLE @DATA(lt_knvv)
      FOR ALL ENTRIES IN @lt_output[]
      WHERE kunnr = @lt_output-kunnr
        AND vkorg = @lt_output-vkorg
        AND vtweg = @lt_output-vtweg
        AND spart = @lt_output-spart.

    SELECT vkorg, vtweg, kunnr, matnr, kdmat, postx FROM knmt
      INTO TABLE @DATA(lt_knmt)
      FOR ALL ENTRIES IN @lt_output[]
      WHERE vkorg = @lt_output-vkorg
        AND vtweg = @lt_output-vtweg
        AND kunnr = @lt_output-kunnr
        AND matnr = @lt_output-matnr.

    DATA(lt_pedidos_stock) = lt_output[].
    IF i_360 IS INITIAL.
      DELETE lt_pedidos_stock WHERE bedae NOT IN lt_clas_stock." NE '011' utilizamos la tabla de parametrización.
    ENDIF.

    IF lt_pedidos_stock[] IS NOT INITIAL.
      SELECT vbeln, posnr, etenr, bmeng
        FROM vbep
        INTO TABLE @DATA(lt_vbep)
        FOR ALL ENTRIES IN @lt_pedidos_stock[]
        WHERE vbeln = @lt_pedidos_stock-vbeln
          AND posnr = @lt_pedidos_stock-posnr.
*          AND etenr = @lt_pedidos_stock-etenr.
      DELETE lt_vbep WHERE bmeng IS INITIAL.
    ENDIF.

    "04.07.22 Nos piden cambiar la forma de calcular la fecha preferente de entrega
    SELECT vbeln, posnr, etenr, edatu,wmeng AS bmeng, bmeng AS b_menge, wadat, wmeng AS bmeng_aux
      FROM vbep
      INTO TABLE @DATA(lt_reparto)
      FOR ALL ENTRIES IN @lt_output[]
      WHERE vbeln = @lt_output-vbeln
        AND posnr = @lt_output-posnr.
*        AND etenr = @lt_output-etenr.
    SORT lt_reparto BY vbeln DESCENDING posnr DESCENDING etenr ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_reparto COMPARING vbeln posnr etenr.


    SELECT t1~vbeln, posnr, wadat_ist, vgbel, vgpos, lfimg, t1~erdat, t1~erzet INTO TABLE @DATA(it_entrega)
      FROM likp AS t1 INNER JOIN lips AS t2 ON t1~vbeln EQ t2~vbeln
      FOR ALL ENTRIES IN @lt_output
      WHERE vgbel EQ @lt_output-vbeln
      AND   vgpos EQ @lt_output-posnr.


    SORT it_entrega BY erdat erzet ASCENDING.


  ENDIF.

  IF ot_output[] IS NOT INITIAL.

    "Buscamos interlocutores WE
    SELECT vbak~vbeln,
           vbpa_we~posnr,
           vbpa_we~kunnr AS kunwe,
           kna1_we~name1 AS name1_kunwe,
           kna1_we~land1,
           kna1_we~ort01
      INTO TABLE @DATA(lt_vbeln_we)
      FROM vbak
      INNER JOIN vbap ON vbak~vbeln = vbap~vbeln
      INNER JOIN vbpa AS vbpa_we ON vbap~vbeln = vbpa_we~vbeln
                                AND vbpa_we~parvw = 'WE'
      INNER JOIN kna1 AS kna1_we ON vbpa_we~kunnr = kna1_we~kunnr
      FOR ALL ENTRIES IN @ot_output[]
      WHERE vbak~vbeln = @ot_output-vbeln.

    "Buscamos interlocutores P1
    SELECT vbak~vbeln,
           vbpa_p1~posnr,
           vbpa_p1~lifnr AS parvw_p1,
           lfa1_p1~name1 AS name1_p1
      INTO TABLE @DATA(lt_vbeln_p1)
      FROM vbak
      INNER JOIN vbap ON vbak~vbeln = vbap~vbeln
      INNER JOIN vbpa AS vbpa_p1 ON vbap~vbeln = vbpa_p1~vbeln
                                AND vbpa_p1~parvw = 'P1'
      INNER JOIN lfa1 AS lfa1_p1 ON vbpa_p1~lifnr = lfa1_p1~lifnr
      FOR ALL ENTRIES IN @ot_output[]
      WHERE vbak~vbeln = @ot_output-vbeln.

    "Buscamos interlocutores P2
    SELECT vbak~vbeln,
           vbpa_p2~posnr,
           vbpa_p2~lifnr AS parvw_p2,
           lfa1_p2~name1 AS name1_p2
      INTO TABLE @DATA(lt_vbeln_p2)
      FROM vbak
      INNER JOIN vbap ON vbak~vbeln = vbap~vbeln
      INNER JOIN vbpa AS vbpa_p2 ON vbap~vbeln = vbpa_p2~vbeln
                                AND vbpa_p2~parvw = 'P2'
      INNER JOIN lfa1 AS lfa1_p2 ON vbpa_p2~lifnr = lfa1_p2~lifnr
      FOR ALL ENTRIES IN @ot_output[]
      WHERE vbak~vbeln = @ot_output-vbeln.

    "Buscamos interlocutores P3
    SELECT vbak~vbeln,
           vbpa_p3~posnr,
           vbpa_p3~lifnr AS parvw_p3,
           lfa1_p3~name1 AS name1_p3
      INTO TABLE @DATA(lt_vbeln_p3)
      FROM vbak
      INNER JOIN vbap ON vbak~vbeln = vbap~vbeln
      INNER JOIN vbpa AS vbpa_p3 ON vbap~vbeln = vbpa_p3~vbeln
                                AND vbpa_p3~parvw = 'P3'
      INNER JOIN lfa1 AS lfa1_p3 ON vbpa_p3~lifnr = lfa1_p3~lifnr
      FOR ALL ENTRIES IN @ot_output[]
      WHERE vbak~vbeln = @ot_output-vbeln.

    "Buscamos interlocutores VE
    SELECT vbak~vbeln,
           vbpa_ve~posnr,
           vbpa_ve~lifnr AS parvw_ve,
           lfa1_ve~name1 AS name1_ve
      INTO TABLE @DATA(lt_vbeln_ve)
      FROM vbak
      INNER JOIN vbap ON vbak~vbeln = vbap~vbeln
      INNER JOIN vbpa AS vbpa_ve ON vbap~vbeln = vbpa_ve~vbeln
                                AND vbpa_ve~parvw = 'VE'
      INNER JOIN lfa1 AS lfa1_ve ON vbpa_ve~lifnr = lfa1_ve~lifnr
      FOR ALL ENTRIES IN @ot_output[]
      WHERE vbak~vbeln = @ot_output-vbeln.

    "Buscamos interlocutores A1
    SELECT vbak~vbeln,
           vbpa_a1~posnr,
           vbpa_a1~lifnr AS parvw_a1,
           lfa1_a1~name1 AS name1_a1
      INTO TABLE @DATA(lt_vbeln_a1)
      FROM vbak
      INNER JOIN vbap ON vbak~vbeln = vbap~vbeln
      INNER JOIN vbpa AS vbpa_a1 ON vbap~vbeln = vbpa_a1~vbeln
                                AND vbpa_a1~parvw = 'A1'
      INNER JOIN lfa1 AS lfa1_a1 ON vbpa_a1~lifnr = lfa1_a1~lifnr
      FOR ALL ENTRIES IN @ot_output[]
      WHERE vbak~vbeln = @ot_output-vbeln.

    SELECT lifnr,
           name1 AS name1_lifnr
      INTO TABLE @DATA(lt_vbeln_comercial)
      FROM lfa1
      FOR ALL ENTRIES IN @ot_output[]
      WHERE lfa1~lifnr = @ot_output-lifnr.

    SORT lt_vbeln_comercial BY lifnr.
    DELETE ADJACENT DUPLICATES FROM lt_vbeln_comercial COMPARING lifnr.

    "Reparto de pedidos contra stock.

    "Buscamos ordenes
    SELECT aufnr, kdauf, kdpos, aufpl, objnr, plnbez
      FROM caufv
      INTO TABLE @DATA(lt_caufv)
      FOR ALL ENTRIES IN @ot_output[]
      WHERE kdauf = @ot_output-vbeln
        AND kdpos = @ot_output-posnr
        AND aufnr IN @irg_aufnr[].

    "Averigüamos de esas ordenes, cuales son de productos terminados
    IF lt_caufv[] IS NOT INITIAL.
      SELECT matnr, mtart FROM mara INTO TABLE @DATA(lt_mara) FOR ALL ENTRIES IN @lt_caufv[] WHERE matnr = @lt_caufv-plnbez.
      DATA: lv_tabix LIKE sy-tabix.
      CLEAR lv_tabix.
      LOOP AT lt_caufv INTO DATA(ls_caufv).
        lv_tabix = sy-tabix.
        READ TABLE lt_mara WITH KEY matnr = ls_caufv-plnbez
                                    mtart = 'ZPTO' TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          DELETE lt_caufv INDEX lv_tabix.
        ENDIF.
      ENDLOOP.
    ENDIF.

    "Status de las ordenes
    IF lt_caufv[] IS NOT INITIAL.
      SELECT objnr, stat
        FROM jest
        INTO TABLE @DATA(lt_jest)
        FOR ALL ENTRIES IN @lt_caufv[]
        WHERE objnr = @lt_caufv-objnr
          AND inact = @space.
    ENDIF.

    LOOP AT lt_jest INTO DATA(ls_jest) WHERE stat = 'I0076'.
      READ TABLE lt_caufv WITH KEY objnr = ls_jest-objnr TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        DELETE lt_caufv WHERE objnr = ls_jest-objnr .
      ENDIF.
    ENDLOOP.

    SORT lt_caufv BY kdauf kdpos.

    SELECT aufnr, posnr, kdauf, kdpos, wemng, charg
      FROM afpo
      INTO TABLE @DATA(lt_afpo)
      FOR ALL ENTRIES IN @ot_output[]
      WHERE kdauf = @ot_output-vbeln
        AND kdpos = @ot_output-posnr.

    IF lt_afpo IS NOT INITIAL.
      "Recuperamos las tolerancias del RegistroInfo
      SELECT vkorg, vtweg, matnr, kunnr, untto, uebto
        FROM knmt
        INTO TABLE @DATA(lt_tolerancia)
         FOR ALL ENTRIES IN @ot_output[]
        WHERE matnr = @ot_output-matnr
        AND kunnr = @ot_output-kunnr
        AND vkorg = '2001'
        AND vtweg = '10'.

      SELECT aufnr, gltrs, gstrs, gluzs, gsuzs
        FROM afko
        INTO TABLE @DATA(lt_afko)
        FOR ALL ENTRIES IN @lt_afpo[]
        WHERE aufnr = @lt_afpo-aufnr.

      "MTS: Recuperamos la cantidad anuqne las ordenes este en PTBO o CTEC
*      DATA rg_aufnr TYPE RANGE OF aufnr.
*      SELECT aufnr AS low
*        INTO CORRESPONDING FIELDS OF TABLE @rg_aufnr
*        FROM jest AS t1 INNER JOIN aufk AS t2 ON t1~objnr EQ t2~objnr
*        FOR ALL ENTRIES IN @lt_afpo
*        WHERE aufnr EQ @lt_afpo-aufnr
*        AND stat IN ( 'I0045', 'I0076' ) "Excluimos las PTBO o CTEC
*        AND inact EQ @space.
*
*      IF sy-subrc = 0.
*        LOOP AT rg_aufnr ASSIGNING FIELD-SYMBOL(<rg>).
*          <rg>-sign = 'I'.
*          <rg>-option = 'EQ'.
*        ENDLOOP.
*
*        DELETE lt_afpo WHERE aufnr IN rg_aufnr.
*        DELETE lt_afko WHERE aufnr IN rg_aufnr.
*      ENDIF.
    ENDIF.

    SORT lt_caufv BY kdauf kdpos.

    "Buscamos la entrega
    SELECT vbelv, posnv, vbeln, posnn, vbtyp_n, vbtyp_v
      FROM vbfa
      INTO TABLE @DATA(lt_vbfa)
      FOR ALL ENTRIES IN @ot_output[]
      WHERE vbelv = @ot_output-vbeln
        AND posnv = @ot_output-posnr
        AND vbtyp_v = 'C'.

    SORT lt_vbfa BY vbeln.

    IF sy-subrc = 0 AND lt_vbfa[] IS NOT INITIAL.
      SELECT vbeln, vbeln AS entrega, wadat_ist
        FROM likp
        INTO TABLE @DATA(lt_likp)
        FOR ALL ENTRIES IN @lt_vbfa[]
        WHERE vbeln = @lt_vbfa-vbeln.

      SORT lt_likp BY vbeln.
      DELETE ADJACENT DUPLICATES FROM lt_likp COMPARING vbeln.
      LOOP AT lt_likp ASSIGNING FIELD-SYMBOL(<fs_likp>).
        CLEAR <fs_likp>-vbeln.
        READ TABLE lt_vbfa INTO DATA(ls_vbfa) WITH KEY vbeln = <fs_likp>-entrega BINARY SEARCH.
        IF sy-subrc = 0.
          <fs_likp>-vbeln = ls_vbfa-vbelv.
        ENDIF.
      ENDLOOP.

      "Recuperamos los repartos de los pedidos
      SELECT vbeln, posnr, edatu, ezeit, etenr, bmeng, vrkme, banfn
        FROM vbep
        INTO TABLE @DATA(lt_vbep_pedido)
        FOR ALL ENTRIES IN @lt_vbfa[]
        WHERE vbeln = @lt_vbfa-vbelv
        AND posnr = @lt_vbfa-posnv.
      IF sy-subrc = 0.
        SORT lt_vbep_pedido BY vbeln posnr edatu ezeit.
      ENDIF.

      "Recuperamos las cantidades de las entregas de los repartos.
      SELECT  a~vbelv, a~posnv, a~vbeln, a~posnn, a~vbtyp_n, a~vbtyp_v, b~lfimg, b~vrkme
      FROM vbfa AS a
      INNER JOIN  lips AS b ON b~vbeln = a~vbeln AND b~posnr = a~posnn
      INTO TABLE @DATA(lt_vbfa_cantidades)
      FOR ALL ENTRIES IN @ot_output[]
      WHERE a~vbelv = @ot_output-vbeln
        AND a~posnv = @ot_output-posnr
        AND a~vbtyp_v = 'C'
        AND a~vbtyp_n = 'J'.
      IF sy-subrc = 0.
        SORT lt_vbfa_cantidades BY  vbelv posnv vbeln posnn.

      ENDIF.

    ENDIF.

    IF lt_likp IS NOT INITIAL.
      SELECT * INTO TABLE @DATA(lt_lips) FROM lips FOR ALL ENTRIES IN @lt_likp  WHERE vbeln = @lt_likp-vbeln.
    ENDIF.

    "Documentos de ventas. Datos comerciales
    SELECT vbeln,
           posnr,
           bstdk_e,
           bstkd
      INTO TABLE @DATA(lt_vbkd)
      FROM vbkd
      FOR ALL ENTRIES IN @ot_output[]
      WHERE vbeln = @ot_output-vbeln.

    SELECT * INTO TABLE @DATA(it_vbup_aux)
   FROM vbup
   FOR ALL ENTRIES IN @ot_output
   WHERE vbeln EQ @ot_output-vbeln
   AND posnr EQ @ot_output-posnr.

  ENDIF.

  "Obtenemos la ruta para el WebGUI
  DATA: lv_hostname TYPE string,
        lv_port     TYPE string.

  CALL FUNCTION 'TH_GET_VIRT_HOST_DATA'
    EXPORTING
      protocol       = 0
      virt_idx       = 0
*     LOCAL          = 1
    IMPORTING
      hostname       = lv_hostname
      port           = lv_port
    EXCEPTIONS
      not_found      = 1
      internal_error = 2
      OTHERS         = 3.

  DATA: lt_situacion TYPE TABLE OF dd07v.
  CALL FUNCTION 'DD_DD07V_GET'
    EXPORTING
      domain_name = 'ZSSD_DO_SITUACION'
      langu       = sy-langu
      withtext    = 'X'
    TABLES
      dd07v_tab   = lt_situacion.

  "Buscamos la ruta relacionada con el material/centro
  SELECT a~werks, b~coper, a~matnr, b~arbpl, a~cuobj
  INTO TABLE @DATA(lt_ruta)
  FROM marc AS a
  INNER JOIN yhp_idx_td310 AS b ON b~cuobj = a~cuobj AND b~cself = '1'
    FOR ALL ENTRIES IN @ot_output
  WHERE a~werks = @ot_output-werks AND
        a~matnr = @ot_output-matnr.
  IF sy-subrc = 0.
    SORT lt_ruta BY werks coper.
    "Recuperamos los semielaborados del material
    SELECT y~cuobj, b~coper, a~matnr, b~arbpl
      INTO TABLE @DATA(lt_ruta_semi)
      FROM yhp_idx_td110 AS y
        INNER JOIN marc AS a ON a~matnr = y~p_matnr
        INNER JOIN yhp_idx_td310 AS b ON b~cuobj = a~cuobj AND b~cself = '1'
        FOR ALL ENTRIES IN @lt_ruta
        WHERE y~cuobj = @lt_ruta-cuobj
          AND y~mboar = 'P'.
    IF sy-subrc = 0.
      SORT lt_ruta_semi BY cuobj coper.
    ENDIF.
  ENDIF.


  IF lt_caufv IS NOT INITIAL.
    SELECT *
      INTO TABLE @DATA(t_cali)
      FROM resb AS a
      INNER JOIN mara AS b ON a~matnr = b~matnr
      INNER JOIN marc AS c ON a~matnr = c~matnr
      LEFT OUTER JOIN yhp_idx_td110 AS d ON c~cuobj = d~cuobj AND mboar = 'P'
      FOR ALL ENTRIES IN @lt_caufv
      WHERE a~aufnr = @lt_caufv-aufnr
        AND c~cuobj <> @space
        AND b~mtart = 'ZPSE'.
  ENDIF.

***  "ASC >>> 13.12.2022 Cambiamos la forma de calcular el status de situación 02 YA NO ES NECESARIO
***  IF ot_output IS NOT INITIAL.
***
***    SELECT a~aufnr vornr b~aufpl b~objnr INTO TABLE t_max_oper
***      FROM aufk AS d
***      INNER JOIN afko AS a ON d~aufnr = a~aufnr
***      INNER JOIN afvc AS b ON a~aufpl = b~aufpl
***      INNER JOIN jest AS c ON b~objnr = c~objnr
***      FOR ALL ENTRIES IN ot_output
***      WHERE d~kdauf = ot_output-vbeln
***        AND d~kdpos = ot_output-posnr
***        AND stat = 'I0010' AND inact = ''.
***
****    SORT t_max_oper BY aufnr vornr DESCENDING.
****    DELETE ADJACENT DUPLICATES FROM t_max_oper COMPARING aufnr.
****
****    IF t_max_oper IS NOT INITIAL.
****
****      SELECT objnr, stat
****        INTO TABLE @DATA(t_jest_vornr)
****        FROM jest
****        FOR ALL ENTRIES IN @t_max_oper
****        WHERE objnr = @t_max_oper-objnr
****          AND stat = 'I0010' AND inact = ''.
****
****    ENDIF.
***
***
***  ENDIF.
***"ASC <<< 13.12.2022 Cambiamos la forma de calcular el status de situación 02 YA NO ES NECESARIO

  LOOP AT ot_output ASSIGNING FIELD-SYMBOL(<fs_output>).

    READ TABLE lt_vbkd ASSIGNING FIELD-SYMBOL(<fs_vbkd>) WITH KEY vbeln = <fs_output>-vbeln
                                                                  posnr = '000000'.
    IF sy-subrc = 0 AND <fs_vbkd>-bstkd IS NOT INITIAL.
      <fs_output>-bstnk = <fs_vbkd>-bstkd.
    ENDIF.

    "Concatenamos la Ruta
    LOOP AT lt_ruta INTO DATA(ls_data) WHERE werks = <fs_output>-werks AND matnr = <fs_output>-matnr.
      IF ( ls_data-coper = 1 ).
        "Añadimos la ruta de los semielaborados si existe.
        LOOP AT lt_ruta_semi INTO DATA(ls_ruta_semi) WHERE cuobj = ls_data-cuobj.
          IF ( ls_ruta_semi-coper = 1 ).
            <fs_output>-ruta = ls_ruta_semi-arbpl.
          ELSE.
            CONCATENATE <fs_output>-ruta '-' ls_ruta_semi-arbpl INTO <fs_output>-ruta.
          ENDIF.
        ENDLOOP.
        IF sy-subrc NE 0.
          <fs_output>-ruta = ls_data-arbpl.
        ELSE.
          CONCATENATE <fs_output>-ruta '-' ls_data-arbpl INTO <fs_output>-ruta.
        ENDIF.
      ELSE.
        CONCATENATE <fs_output>-ruta '-' ls_data-arbpl INTO <fs_output>-ruta.
      ENDIF.
    ENDLOOP.

    IF <fs_output>-hoehe IS NOT INITIAL.
      <fs_output>-hoehe = ceil( <fs_output>-hoehe ).
    ENDIF.
    IF <fs_output>-breit IS NOT INITIAL.
      <fs_output>-breit = ceil( <fs_output>-breit ).
    ENDIF.
    IF <fs_output>-laeng IS NOT INITIAL.
      <fs_output>-laeng = ceil( <fs_output>-laeng ).
    ENDIF.

    IF <fs_output>-prqty  IS NOT INITIAL.
      <fs_output>-prqty  = ceil( <fs_output>-prqty  ).
    ENDIF.

    "Medidas palet
    READ TABLE lt_td151_unit INTO DATA(ls_td151) WITH KEY cuobj = <fs_output>-cuobj.
    IF sy-subrc = 0.
      <fs_output>-lhmng1 = ls_td151-tbqty. "JCB 14.06.23. Cajas por palets

      DATA: lv_menge TYPE menge_d.
      IF <fs_output>-vrkme EQ 'ST'.
        lv_menge = <fs_output>-kwmeng.
      ELSE.
        CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
          EXPORTING
            i_matnr              = <fs_output>-matnr
            i_in_me              = <fs_output>-vrkme
            i_out_me             = 'ST'
            i_menge              = <fs_output>-kwmeng
          IMPORTING
            e_menge              = lv_menge
          EXCEPTIONS
            error_in_application = 1
            error                = 2
            OTHERS               = 3.
      ENDIF.

      IF ls_td151-tbqty > 0.
        <fs_output>-tbqty  = lv_menge / ls_td151-tbqty.
      ENDIF.
      <fs_output>-tbqty_uom = ls_td151-tbqty_uom.

      <fs_output>-tbqty = ceil( <fs_output>-tbqty ).

      <fs_output>-length     = ls_td151-length.
      <fs_output>-length      = ceil( <fs_output>-length ).
      <fs_output>-length_uom = ls_td151-length_uom.

      <fs_output>-width      = ls_td151-width.
      <fs_output>-width      = ceil( <fs_output>-width ).
      <fs_output>-width_uom  = ls_td151-width_uom.

      <fs_output>-height     = ls_td151-height.
      <fs_output>-height     = ceil( <fs_output>-height ).
      <fs_output>-height_uom = ls_td151-height_uom.

    ENDIF.

    "Cajas Paquete
    READ TABLE lt_td151_group INTO DATA(ls_td151_group) WITH KEY cuobj = <fs_output>-cuobj.
    IF sy-subrc = 0.
      DATA: lv_var1 TYPE p DECIMALS 0.
      lv_var1 = ls_td151_group-prqty.
*      <fs_output>-prqty = ls_td151_group-prqty.
      <fs_output>-prqty = lv_var1.
    ENDIF.

    "Solicitud de pedido de compras
    READ TABLE lt_output INTO ls_output WITH KEY vbeln = <fs_output>-vbeln
                                                 posnr = <fs_output>-posnr.
    IF sy-subrc = 0.
      READ TABLE lt_banfn INTO DATA(ls_banfn) WITH KEY banfn = ls_output-banfn
                                                       bnfpo = ls_output-bnfpo.
      IF sy-subrc = 0.
        <fs_output>-ebeln = ls_banfn-ebeln.
        <fs_output>-banfn = ls_banfn-banfn.
        <fs_output>-bnfpo = ls_banfn-bnfpo.
      ENDIF.
    ENDIF.


    "Fecha servicio final
    READ TABLE lt_vbfa INTO ls_vbfa WITH KEY vbelv = <fs_output>-vbeln
                                             posnv = <fs_output>-posnr.
    IF sy-subrc = 0.
      READ TABLE lt_likp INTO DATA(ls_likp) WITH KEY entrega = ls_vbfa-vbeln
                                                     vbeln   = <fs_output>-vbeln.
      IF sy-subrc = 0 AND ls_likp-wadat_ist IS NOT INITIAL.
        READ TABLE lt_output INTO ls_output WITH KEY vbeln = <fs_output>-vbeln
                                                     posnr = <fs_output>-posnr.
        IF sy-subrc = 0 AND ls_output-route IS NOT INITIAL.
          READ TABLE lt_tvro INTO DATA(ls_tvro) WITH KEY route = ls_output-route.
          IF sy-subrc  = 0.
            DATA: lv_dist(10) TYPE c,
                  lv_i        TYPE p.

            CALL FUNCTION 'CONVERSION_EXIT_TSTRG_OUTPUT'
              EXPORTING
                input  = ls_tvro-traztd
              IMPORTING
                output = lv_dist.

            CALL FUNCTION 'MOVE_CHAR_TO_NUM'
              EXPORTING
                chr             = lv_dist
              IMPORTING
                num             = lv_i
              EXCEPTIONS
                convt_no_number = 1
                convt_overflow  = 2
                OTHERS          = 3.

            <fs_output>-zz_fecha_servicio_final = ls_likp-wadat_ist + lv_i.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    "Comercial
    READ TABLE lt_vbeln_comercial INTO DATA(ls_vbeln_comercial) WITH KEY lifnr = <fs_output>-lifnr.
    IF sy-subrc = 0.
      <fs_output>-name1_lifnr = ls_vbeln_comercial-name1_lifnr.
    ENDIF.

    "Planificado en transporte
    "Fecha servicio final
*    READ TABLE lt_vbfa INTO ls_vbfa WITH KEY vbelv   = <fs_output>-vbeln
*                                             posnv   = <fs_output>-posnr
*                                             vbtyp_n = 'J'.
*    IF sy-subrc = 0.
*      READ TABLE lt_likp INTO ls_likp WITH KEY entrega = ls_vbfa-vbeln
*                                               vbeln   = <fs_output>-vbeln.
*      IF sy-subrc = 0.
*        SELECT SINGLE tknum INTO @<fs_output>-tknum FROM vttp WHERE vbeln = @ls_likp-entrega.
*        IF sy-subrc = 0.
*          <fs_output>-cant_palnif = abap_true.
*        ENDIF.
*      ENDIF.
*    ENDIF.
    DATA: lv_suma_cantidad TYPE lips-lfimg.
    DATA: lv_tabix_reparto TYPE i.
    DATA(lt_vbfa_cant_temp) = lt_vbfa_cantidades.

    "Los repartos los tenemos ordenados por fechas para replicar lo que hace el estandar al repartir las cantidades de las entregas relacionadas con el pedido/posición
    LOOP AT lt_vbep_pedido INTO DATA(ls_vbep_pedido) WHERE vbeln = <fs_output>-vbeln AND posnr = <fs_output>-posnr AND bmeng NE 0 ."AND etenr = <fs_output>-etenr.
      CLEAR: lv_suma_cantidad, lv_tabix_reparto.
      LOOP AT lt_vbfa_cant_temp ASSIGNING FIELD-SYMBOL(<ls_vbfa_cantidad>) WHERE vbelv   = ls_vbep_pedido-vbeln AND posnv   = ls_vbep_pedido-posnr AND lfimg NE 0.
        ADD 1 TO lv_tabix_reparto.

        IF ls_vbep_pedido-etenr = <fs_output>-etenr.
          lv_suma_cantidad = lv_suma_cantidad + <ls_vbfa_cantidad>-lfimg.

          IF lv_suma_cantidad >= ls_vbep_pedido-bmeng.
            SELECT SINGLE tknum INTO @<fs_output>-tknum FROM vttp WHERE vbeln = @<ls_vbfa_cantidad>-vbeln.
            IF sy-subrc = 0.
              <fs_output>-cant_palnif = abap_true.
            ENDIF.
            DATA(lv_encontrado) = 'X'.
            EXIT.
          ENDIF.
        ENDIF.
        IF lv_tabix_reparto < <fs_output>-etenr.
          IF <ls_vbfa_cantidad>-lfimg >= ls_vbep_pedido-bmeng.
            <ls_vbfa_cantidad>-lfimg = <ls_vbfa_cantidad>-lfimg - ls_vbep_pedido-bmeng.
          ELSE.
            CLEAR <ls_vbfa_cantidad>-lfimg.
          ENDIF.
        ELSE.
          EXIT.
        ENDIF.
      ENDLOOP.
      IF lv_encontrado IS NOT INITIAL.
        CLEAR lv_encontrado.
        EXIT.
      ENDIF.
    ENDLOOP.
    "STATUS

    "Morado, se mostrará el semáforo cuando el cliente tiene indicado que necesita cita previa
    CLEAR: lv_tdname, lines, lines[].
    DATA(lv_aux) = |{ <fs_output>-vbeln ALPHA = IN }|.
    MOVE lv_aux TO lv_tdname.
    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        id                      = c_tdid_zcp2
        language                = sy-langu
        name                    = lv_tdname
        object                  = c_tdobject
      IMPORTING
        header                  = header
      TABLES
        lines                   = lines
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.
    IF sy-subrc = 0.
      IF lines[] IS NOT INITIAL.
        <fs_output>-stat_cita = 'M'.
      ENDIF.
    ENDIF.

    "Rojo, Fecha de servicio final es mayor a la fecha de entrega demandada por el cliente.
    "Comparar Fecha de salida de mercancías de entrega asociada a la posición del pedido con VBKD-BSTDK_E
    "Obtenemos la fecha de la SM
    READ TABLE lt_vbfa INTO ls_vbfa WITH KEY vbelv = <fs_output>-vbeln
                                             posnv = <fs_output>-posnr.
    IF sy-subrc = 0.
      READ TABLE lt_likp INTO ls_likp WITH KEY entrega = ls_vbfa-vbeln
                                               vbeln   = <fs_output>-vbeln.
      IF sy-subrc = 0 AND ls_likp-wadat_ist IS NOT INITIAL.
        READ TABLE lt_vbkd INTO DATA(ls_vbkd) WITH KEY vbeln = <fs_output>-vbeln
                                                       posnr = <fs_output>-posnr.
        IF sy-subrc <> 0.
          READ TABLE lt_vbkd INTO ls_vbkd WITH KEY vbeln = <fs_output>-vbeln.
        ENDIF.
        IF sy-subrc = 0.
          IF ls_likp-wadat_ist > ls_vbkd-bstdk_e.
            <fs_output>-stat_fecha = 'R'.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    "Amarillo, si la orden tiene que ser homologada, está información estará indicada en la orden de producción
    READ TABLE lt_caufv INTO ls_caufv WITH KEY kdauf = <fs_output>-vbeln
                                               kdpos = <fs_output>-posnr BINARY SEARCH.
    IF sy-subrc = 0.
      SELECT SINGLE aufpl, aplzl, usr10 FROM afvu INTO @DATA(ls_afvu) WHERE aufpl = @ls_caufv-aufpl
                                                                        AND usr10 = 'X'.
      IF sy-subrc = 0.
        <fs_output>-stat_homol = 'A'.
      ENDIF.
    ENDIF.

    "Ejercicio
    <fs_output>-gjahr = <fs_output>-audat(4).


    "Orden de fab.
    READ TABLE lt_caufv INTO ls_caufv WITH KEY kdauf = <fs_output>-vbeln
                                               kdpos = <fs_output>-posnr BINARY SEARCH.
    IF sy-subrc = 0.
      <fs_output>-aufnr = ls_caufv-aufnr.

      "Fecha inicio, fecha fin
      READ TABLE lt_afko INTO DATA(ls_afko) WITH KEY aufnr = <fs_output>-aufnr.
      IF sy-subrc = 0.
        <fs_output>-fecha_ini = ls_afko-gstrs.
        <fs_output>-fecha_fin = ls_afko-gltrs.
        <fs_output>-gluzs     = ls_afko-gluzs.
        <fs_output>-gsuzs     = ls_afko-gsuzs.
      ENDIF.

      "Verde, si la orden de fabricación tiene asociadas operaciones de subcontratación
      IF <fs_output>-aufnr IS NOT INITIAL.
*      SELECT SINGLE rsnum, rspos, rsart FROM resb INTO @DATA(ls_resb) WHERE aufnr = @<fs_output>-aufnr
*                                                                        AND postp = 'N'
*                                                                        AND dbskz = 'F'
*                                                                        AND ekgrp <> @lv_ekgrp
*                                                                        AND lifnr <> @lv_lifnr.
*      IF sy-subrc = 0.
*        <fs_output>-stat_subco = 'V'.
*      ENDIF.

        SELECT SINGLE afko~aufpl, steus
          INTO @DATA(ls_afvc)
          FROM afko
          INNER JOIN afvc ON afko~aufpl EQ afvc~aufpl
          WHERE afko~aufnr EQ @<fs_output>-aufnr
            AND afvc~steus EQ 'PP02'.
        IF sy-subrc = 0.
          <fs_output>-stat_subco = 'V'.
        ENDIF.
      ENDIF.

      "Naranja, si hay diferencia entre la cantidad de pedido y la cantidad producida
      IF <fs_output>-aufnr IS NOT INITIAL.
        READ TABLE lt_afpo INTO DATA(ls_afpo) WITH KEY aufnr = <fs_output>-aufnr
                                                       kdauf = <fs_output>-vbeln
                                                       kdpos = <fs_output>-posnr.
        IF sy-subrc = 0.
          DATA(cant_tol_exceso) = ls_afpo-wemng.
          DATA(cant_tol_falta) = ls_afpo-wemng.
          "Recuperamos la tolerancia
          READ TABLE lt_tolerancia INTO DATA(ls_tole) WITH KEY matnr = <fs_output>-matnr kunnr = <fs_output>-kunnr.
          IF sy-subrc = 0.
            cant_tol_exceso = cant_tol_exceso + ( cant_tol_exceso * ls_tole-uebto / 100 ).
            cant_tol_falta = cant_tol_falta + ( cant_tol_falta * ls_tole-untto / 100 ).
          ENDIF.
          IF cant_tol_falta > <fs_output>-kwmeng OR <fs_output>-kwmeng > cant_tol_exceso.
            <fs_output>-stat_cant = 'N'.
          ENDIF.
        ENDIF.
      ENDIF.


      "Material semi

      READ TABLE t_cali INTO DATA(l_cali) WITH KEY a-aufnr = <fs_output>-aufnr.
      IF sy-subrc = 0.
        <fs_output>-semi = l_cali-b-matnr.
        <fs_output>-board = l_cali-d-board.
      ENDIF.


      "Situación
      READ TABLE lt_jest INTO ls_jest WITH KEY objnr = ls_caufv-objnr
                                               stat  = 'I0001'.
      IF sy-subrc = 0.
        <fs_output>-situacion = '00'.
      ENDIF.

      READ TABLE lt_jest INTO ls_jest WITH KEY objnr = ls_caufv-objnr
                                               stat  = 'I0513'.
      IF sy-subrc = 0.
        <fs_output>-situacion = '01'.
      ENDIF.

      READ TABLE lt_jest INTO ls_jest WITH KEY objnr = ls_caufv-objnr
                                               stat  = 'I0002'.
      IF sy-subrc = 0.
        <fs_output>-situacion = '04'.
      ENDIF.

      "ASC >>> 13.12.2022 Cambiamos la forma de calcular el status de situación 02
*      READ TABLE t_max_oper INTO DATA(l_pos) WITH KEY aufnr = <fs_output>-aufnr.
*      IF sy-subrc = 0.
**        read table t_jest_vornr into DATA(l_jest_vornr) WITH KEY objnr = l_pos-objnr.
**        If sy-subrc = 0.
*        <fs_output>-situacion = '02'.
**        ENDIf.
*      ENDIF.
*      IF ls_afpo-wemng > 0.
*        <fs_output>-situacion = '02'.
*      ENDIF.
      "ASC <<< 13.12.2022 Cambiamos la forma de calcular el status de situación 02

      DATA: l_situ TYPE char2.

      CLEAR: l_situ.

      READ TABLE lt_jest INTO ls_jest WITH KEY objnr = ls_caufv-objnr
                                               stat  = 'I0045'.
      IF sy-subrc = 0.

        l_situ = '02'. "Terminado

      ENDIF.
      READ TABLE lt_jest INTO ls_jest WITH KEY objnr = ls_caufv-objnr
                                                     stat  = 'I0010'.
      IF sy-subrc = 0.
        <fs_output>-situacion  = '05'. "Fabricado Parcialmente
      ENDIF.


      READ TABLE lt_jest INTO ls_jest WITH KEY objnr = ls_caufv-objnr
                                               stat  = 'I0046'.
      IF sy-subrc = 0.
        l_situ = '02'.
      ENDIF.

      IF l_situ = '02'.
        READ TABLE lt_afpo INTO ls_afpo WITH KEY aufnr = <fs_output>-aufnr
                                                 kdauf = <fs_output>-vbeln
                                                 kdpos = <fs_output>-posnr.
        IF sy-subrc = 0 AND ls_afpo-wemng = 0.
          <fs_output>-situacion = '03'. "Borrar
        ENDIF.
      ENDIF.


      "Rellenamos descriptivo
      IF <fs_output>-situacion IS NOT INITIAL.
        READ TABLE lt_situacion INTO DATA(ls_situacion) WITH KEY domvalue_l = <fs_output>-situacion.
        IF sy-subrc = 0.
          <fs_output>-situacion_txt = ls_situacion-ddtext.
        ENDIF.
      ENDIF.
    ENDIF.

    "Estado de Subcontratación del Pedido
    IF i_360 IS NOT INITIAL.
      READ TABLE lt_vbep_pedido INTO DATA(ls_pedido2) WITH KEY vbeln = <fs_output>-vbeln  posnr = <fs_output>-posnr etenr = <fs_output>-etenr.
      IF sy-subrc = 0 AND ls_pedido2-banfn IS NOT INITIAL.
        <fs_output>-stat_subco = 'V'.

      ENDIF.
    ENDIF.

    IF i_360 IS INITIAL.
      "Cantidad producida en control de calidad
      DATA: lv_pedido_ke TYPE flag.
      CLEAR lv_pedido_ke.
      SELECT SINGLE * FROM zscot002_bedae INTO @DATA(ls_bedae) WHERE vkorg =  @ls_output-vkorg
                                                                 AND vtweg =  @ls_output-vtweg
                                                                 AND spart =  @ls_output-spart
                                                                 AND auart =  @ls_output-auart
                                                                 AND bedae =  @ls_output-bedae.
      IF sy-subrc = 0.
        lv_pedido_ke = abap_true.
      ENDIF.

      IF lv_pedido_ke = abap_true.
        SELECT SUM( kains ) FROM mska INTO <fs_output>-cant_prod_cal WHERE matnr = ls_output-matnr
                                                                       AND werks = ls_output-werks
                                                                       AND vbeln = ls_output-vbeln
                                                                       AND posnr = ls_output-posnr.
      ELSE.
        READ TABLE lt_output INTO ls_output WITH KEY vbeln = <fs_output>-vbeln
                                                     posnr = <fs_output>-posnr.
        IF sy-subrc = 0.
          READ TABLE lt_afpo INTO ls_afpo WITH KEY aufnr = <fs_output>-aufnr
                                                   kdauf = <fs_output>-vbeln
                                                   kdpos = <fs_output>-posnr.
          IF sy-subrc = 0 AND ls_afpo-charg IS NOT INITIAL.
            SELECT SUM( cinsm ) FROM mchb INTO <fs_output>-cant_prod_cal WHERE matnr = ls_output-matnr
                                                                           AND werks = ls_output-werks
                                                                           AND charg = ls_afpo-charg.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSE.
      SELECT SUM( insme ) FROM mard INTO <fs_output>-cant_prod_cal WHERE matnr = ls_output-matnr
                                                                           AND werks = ls_output-werks
                                                                           AND lgort = '1400'.
    ENDIF.

    IF i_360 IS INITIAL.
      "Cantidad stock
      IF lv_pedido_ke = abap_true.
        SELECT SUM( kalab ) FROM mska INTO <fs_output>-cant_stock WHERE matnr = ls_output-matnr
                                                                    AND werks = ls_output-werks
                                                                    AND vbeln = ls_output-vbeln
                                                                    AND posnr = ls_output-posnr.
      ELSE.

        READ TABLE lt_output INTO ls_output WITH KEY vbeln = <fs_output>-vbeln
                                                     posnr = <fs_output>-posnr.
        "Nos piden que en lugar de totalizar el lote de la entrega, totalice todo el material centro.
*    LOOP AT lt_vbfa INTO ls_vbfa WHERE vbelv = <fs_output>-vbeln
*                                   AND posnv = <fs_output>-posnr.
*      IF sy-subrc = 0.
*        SELECT SINGLE charg FROM lips INTO @DATA(lv_charg) WHERE vbeln = @ls_vbfa-vbeln
*                                                             AND posnr = @ls_vbfa-posnn.
*        IF sy-subrc = 0.
        SELECT SUM( clabs ) FROM mchb INTO @DATA(lv_clabs) WHERE matnr = @ls_output-matnr
                                                             AND werks = @ls_output-werks.
*                                                               AND charg = @lv_charg.
        <fs_output>-cant_stock = <fs_output>-cant_stock + lv_clabs.
*        ENDIF.
*      ENDIF.
*    ENDLOOP.
      ENDIF.
    ELSE.
      SELECT SUM( labst ) FROM mard INTO <fs_output>-cant_stock WHERE matnr = ls_output-matnr
                                                                           AND werks = ls_output-werks
                                                                           AND lgort = '1400'.
    ENDIF.

    "Material de cliente
    READ TABLE lt_output INTO ls_output WITH KEY vbeln = <fs_output>-vbeln
                                                 posnr = <fs_output>-posnr.
    IF sy-subrc = 0.
      READ TABLE lt_knmt INTO DATA(ls_knmt) WITH KEY vkorg = ls_output-vkorg
                                                     vtweg = ls_output-vtweg
                                                     kunnr = ls_output-kunnr
                                                     matnr = ls_output-matnr.
      IF sy-subrc = 0.
        <fs_output>-kdmat = ls_knmt-kdmat.
        <fs_output>-postx = ls_knmt-postx.
      ENDIF.
    ENDIF.

    "Cantidad servida (enviada o en entrega)
    DATA lv_lfimg LIKE lips-lfimg.
    LOOP AT lt_vbfa INTO ls_vbfa WHERE vbelv = <fs_output>-vbeln
                                   AND posnv = <fs_output>-posnr
                                   AND vbtyp_n = 'J'.
      CLEAR lv_lfimg.
      SELECT SINGLE vbeln INTO @DATA(lv_vbeln) FROM lips WHERE vbeln = @ls_vbfa-vbeln
                                                           AND uecha = @ls_vbfa-posnn.
      IF sy-subrc = 0.
*        SELECT SUM( lfimg ) FROM lips INTO lv_lfimg WHERE vbeln = ls_vbfa-vbeln
*                                                      AND uecha = ls_vbfa-posnn.
      ELSE.
        SELECT SINGLE lfimg FROM lips INTO lv_lfimg WHERE vbeln = ls_vbfa-vbeln
                                                      AND posnr = ls_vbfa-posnn.
      ENDIF.
      SELECT SINGLE vbeln, wbsta,gbsta INTO @DATA(ls_vbup) FROM vbup WHERE vbeln = @ls_vbfa-vbeln
                                                                  AND posnr = @ls_vbfa-posnn.

      IF   ls_vbup-wbsta EQ 'A'.
        <fs_output>-lfimg = <fs_output>-lfimg + lv_lfimg.
      ELSE.
        <fs_output>-lfimg_servido = <fs_output>-lfimg_servido + lv_lfimg.
      ENDIF.
    ENDLOOP.

    "Cantidad producida libre
    READ TABLE lt_afpo INTO ls_afpo WITH KEY aufnr = <fs_output>-aufnr
                                             kdauf = <fs_output>-vbeln
                                             kdpos = <fs_output>-posnr.
    IF sy-subrc = 0.
*      <fs_output>-cant_prod_lib = <fs_output>-kwmeng - ls_afpo-wemng.
      <fs_output>-cant_prod_lib = ls_afpo-wemng.
    ENDIF.

    "Restos

    READ TABLE it_vbup_aux ASSIGNING FIELD-SYMBOL(<fs_pos>) WITH KEY vbeln = <fs_output>-vbeln posnr = <fs_output>-posnr.
    IF sy-subrc = 0.
      "ASC 07.11.22 Nos pinden cambiar el calculo
      <fs_output>-resto = <fs_output>-kwmeng -  <fs_output>-lfimg - <fs_output>-lfimg_servido.

      IF <fs_output>-resto > 0 AND <fs_pos>-gbsta = 'C'.
        <fs_output>-resto = 0.
      ENDIF.
*    <fs_output>-resto = <fs_output>-cant_prod_lib - <fs_output>-lfimg.
      IF <fs_output>-resto < 0.
        CLEAR <fs_output>-resto.
      ENDIF.
    ENDIF.
    "Interlocutores
    "WE
    READ TABLE lt_vbeln_we INTO DATA(ls_vbeln_we) WITH KEY vbeln = <fs_output>-vbeln
                                                           posnr = <fs_output>-posnr.

    IF sy-subrc <> 0.
      READ TABLE lt_vbeln_we INTO ls_vbeln_we WITH KEY vbeln = <fs_output>-vbeln
                                                       posnr = lv_posnr.
    ENDIF.
    <fs_output>-kunwe       = ls_vbeln_we-kunwe.
    <fs_output>-name1_kunwe = ls_vbeln_we-name1_kunwe.
    <fs_output>-ort01       = ls_vbeln_we-ort01.

    "P1
    READ TABLE lt_vbeln_p1 INTO DATA(ls_vbeln_p1) WITH KEY vbeln = <fs_output>-vbeln
                                                           posnr = <fs_output>-posnr.

    IF sy-subrc <> 0.
      CLEAR: ls_vbeln_p1-parvw_p1,ls_vbeln_p1-name1_p1.

      READ TABLE lt_vbeln_p1 INTO ls_vbeln_p1 WITH KEY vbeln = <fs_output>-vbeln
                                                       posnr = lv_posnr.
      IF sy-subrc <> 0.
        CLEAR: ls_vbeln_p1-parvw_p1,ls_vbeln_p1-name1_p1.
      ENDIF.

    ENDIF.
    <fs_output>-parvw_p1 = ls_vbeln_p1-parvw_p1.
    <fs_output>-name1_p1 = ls_vbeln_p1-name1_p1.

    "P2
    READ TABLE lt_vbeln_p2 INTO DATA(ls_vbeln_p2) WITH KEY vbeln = <fs_output>-vbeln
                                                           posnr = <fs_output>-posnr.

    IF sy-subrc <> 0.
      CLEAR: ls_vbeln_p2-parvw_p2,ls_vbeln_p2-name1_p2.

      READ TABLE lt_vbeln_p2 INTO ls_vbeln_p2 WITH KEY vbeln = <fs_output>-vbeln
                                                       posnr = lv_posnr.
    ENDIF.
    <fs_output>-parvw_p2 = ls_vbeln_p2-parvw_p2.
    <fs_output>-name1_p2 = ls_vbeln_p2-name1_p2.

    "P3
    READ TABLE lt_vbeln_p3 INTO DATA(ls_vbeln_p3) WITH KEY vbeln = <fs_output>-vbeln
                                                           posnr = <fs_output>-posnr.

    IF sy-subrc <> 0.
      READ TABLE lt_vbeln_p3 INTO ls_vbeln_p3 WITH KEY vbeln = <fs_output>-vbeln
                                                       posnr = lv_posnr.
    ENDIF.
    <fs_output>-parvw_p3 = ls_vbeln_p3-parvw_p3.
    <fs_output>-name1_p3 = ls_vbeln_p3-name1_p3.

    "VE
    READ TABLE lt_vbeln_ve INTO DATA(ls_vbeln_ve) WITH KEY vbeln = <fs_output>-vbeln
                                                           posnr = <fs_output>-posnr.

    IF sy-subrc <> 0.
      READ TABLE lt_vbeln_ve INTO ls_vbeln_ve WITH KEY vbeln = <fs_output>-vbeln
                                                       posnr = lv_posnr.
    ENDIF.
    <fs_output>-parvw_ve = ls_vbeln_ve-parvw_ve.
    <fs_output>-name1_ve = ls_vbeln_ve-name1_ve.

    "A1
    READ TABLE lt_vbeln_a1 INTO DATA(ls_vbeln_a1) WITH KEY vbeln = <fs_output>-vbeln
                                                           posnr = <fs_output>-posnr.

    IF sy-subrc <> 0.
      READ TABLE lt_vbeln_a1 INTO ls_vbeln_a1 WITH KEY vbeln = <fs_output>-vbeln
                                                       posnr = lv_posnr.
    ENDIF.
    <fs_output>-parvw_a1 = ls_vbeln_a1-parvw_a1.
    <fs_output>-name1_a1 = ls_vbeln_a1-name1_a1.

    "Obtenemos la ruta para el WebGUI a la VA03 y la CO03
    IF <fs_output>-vbeln  IS NOT INITIAL.
      <fs_output>-url_va03 = 'http://' && lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*VA03%20VBAK-VBELN=' && <fs_output>-vbeln .
    ENDIF.
    IF <fs_output>-aufnr IS NOT INITIAL.
      <fs_output>-url_co03 = 'http://' && lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*CO03%20CAUFVD-AUFNR=' && <fs_output>-aufnr .
    ENDIF.
    IF <fs_output>-tknum IS NOT INITIAL.
      <fs_output>-url_tknum = 'http://' && lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*VT03N%20VTTK-TKNUM=' && <fs_output>-tknum.
    ENDIF.
    IF <fs_output>-kunnr IS NOT INITIAL.
      <fs_output>-url_kunnr = 'http://' && lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*XD03%20RF02D-KUNNR=' && <fs_output>-kunnr && '%3BRF02D-VKORG=' && ls_output-vkorg && '%3BRF02D-VTWEG=' && ls_output-vtweg &&
'%3BRF02D-SPART=' && ls_output-spart.
    ENDIF.

    IF <fs_output>-kunwe IS NOT INITIAL.
      <fs_output>-url_kunwe = 'http://' && lv_hostname && ':' && lv_port && '/sap/bc/gui/sap/its/webgui?~transaction=*XD03%20RF02D-KUNNR=' && <fs_output>-kunwe && '%3BRF02D-VKORG=' && ls_output-vkorg && '%3BRF02D-VTWEG=' && ls_output-vtweg &&
'%3BRF02D-SPART=' && ls_output-spart.
    ENDIF.

    "Cantidad confirmada
    READ TABLE lt_vbep INTO DATA(ls_vbep) WITH KEY vbeln = <fs_output>-vbeln
                                                   posnr = <fs_output>-posnr
                                                   etenr = <fs_output>-etenr.
    IF sy-subrc = 0.
      <fs_output>-cant_conf = <fs_output>-kwmeng = ls_vbep-bmeng.
    ENDIF.

    "JCB 21.03.24. Ticket 82039 ZSSD034. Comento cálculo de lfimg_servido
*    <fs_output>-lfimg_servido = ls_vbep-bmeng.

    " SMT - INI - 23.01.2023 13:16:58 -  Actualizamos las cantidades para los repartos.
    DATA: l_ult TYPE flag.



    DATA(t_reparto_l) = lt_reparto.

    DELETE t_reparto_l WHERE vbeln <> <fs_output>-vbeln OR posnr <> <fs_output>-posnr.

    DATA(l_max) = lines( t_reparto_l ).

    LOOP AT lt_reparto ASSIGNING FIELD-SYMBOL(<vbep_ps>) WHERE vbeln = <fs_output>-vbeln
                                                           AND posnr = <fs_output>-posnr
                                                           AND etenr = <fs_output>-etenr.

      CLEAR: l_ult.

      IF sy-tabix = l_max.
        l_ult = 'X'.
      ENDIF.

      LOOP AT it_entrega ASSIGNING FIELD-SYMBOL(<l_entrega>) WHERE vgbel = <fs_output>-vbeln
                           AND vgpos = <fs_output>-posnr
                           AND lfimg > 0.

        IF <l_entrega>-lfimg >= <vbep_ps>-bmeng_aux.
          <vbep_ps>-bmeng_aux = 0.
          <l_entrega>-lfimg = <l_entrega>-lfimg - <vbep_ps>-bmeng.
          <vbep_ps>-b_menge = <vbep_ps>-bmeng.
          <vbep_ps>-wadat = <l_entrega>-wadat_ist.

          IF <l_entrega>-lfimg > 0 AND l_ult IS NOT INITIAL..
            <vbep_ps>-b_menge =  <vbep_ps>-b_menge + <l_entrega>-lfimg.
          ENDIF.
          EXIT.
        ELSE.
          <vbep_ps>-bmeng_aux = <vbep_ps>-bmeng_aux - <l_entrega>-lfimg.
          <l_entrega>-lfimg = 0.
        ENDIF.
      ENDLOOP.
      IF sy-subrc <> 0.
        <vbep_ps>-b_menge = 0.
        CLEAR: <vbep_ps>-wadat.
      ENDIF.


    ENDLOOP.

    " SMT - FIN - 23.01.2023 13:17:11 - Actualizamos las cantidades para los repartos.


    "04.07.22 Fecha preferente de entrea
    READ TABLE lt_reparto INTO DATA(ls_reparto) WITH KEY vbeln = <fs_output>-vbeln
                                                         posnr = <fs_output>-posnr
                                                         etenr = <fs_output>-etenr.
    IF sy-subrc = 0.
      <fs_output>-kwmeng = ls_reparto-bmeng.
      IF i_360 IS INITIAL.
        <fs_output>-vdatu = ls_reparto-edatu.
      ELSE.
        READ TABLE lt_reparto INTO DATA(ls_reparto2) WITH KEY vbeln = <fs_output>-vbeln
                                                         posnr = <fs_output>-posnr.
        IF sy-subrc = 0.
          <fs_output>-vdatu = ls_reparto2-edatu.
*          <fs_output>-zz_fecha_asignacion = ls_reparto-edatu.
        ENDIF.
      ENDIF.

      "JCB 21.03.24. Ticket 82039 ZSSD034. Comento cálculo de lfimg_servido y fecha entrega
      "<fs_output>-lfimg_servido = ls_reparto-b_menge.
      "<fs_output>-wadat_ist = ls_reparto-wadat.

*      <fs_output>-resto = <fs_output>-kwmeng - ls_reparto-b_menge.

      IF <fs_output>-resto < 0.
        CLEAR <fs_output>-resto.
      ENDIF.
    ENDIF.

    "Fecha asignada a cliente
    IF <fs_output>-fecha_fin IS NOT INITIAL.
      READ TABLE lt_tvro INTO ls_tvro WITH KEY route = ls_output-route.
      IF sy-subrc  = 0.
        CALL FUNCTION 'CONVERSION_EXIT_TSTRG_OUTPUT'
          EXPORTING
            input  = ls_tvro-traztd
          IMPORTING
            output = lv_dist.

        CALL FUNCTION 'MOVE_CHAR_TO_NUM'
          EXPORTING
            chr             = lv_dist
          IMPORTING
            num             = lv_i
          EXCEPTIONS
            convt_no_number = 1
            convt_overflow  = 2
            OTHERS          = 3.

        <fs_output>-zz_fecha_asignacion = <fs_output>-fecha_fin + lv_i.
      ENDIF.
    ENDIF.
*    "Fecha Cliente
*    READ TABLE lt_vbkd INTO ls_vbkd  WITH KEY vbeln = <fs_output>-vbeln
*                                                         posnr = <fs_output>-posnr.
*    IF sy-subrc = 0.
*      <fs_output>-vdatu = ls_vbkd-bstkd.
*    ELSE.
*      CLEAR <fs_output>-vdatu.
*    ENDIF.

    "JCB 21.03.24. Ticket 82039 ZSSD034.  fecha entrega de la entrega!
    <fs_output>-wadat_ist = ls_likp-wadat_ist.

    "Fase de la orden
    READ TABLE lt_caufv INTO ls_caufv WITH KEY kdauf = <fs_output>-vbeln
                                               kdpos = <fs_output>-posnr BINARY SEARCH.
    IF sy-subrc = 0.

      SELECT a~stat, b~txt04
            INTO TABLE @DATA(lt_stat)
            FROM jest AS a
            INNER JOIN tj02t AS b ON a~stat = b~istat
            WHERE objnr = @ls_caufv-objnr
              AND inact <> 'X'
              AND spras = @sy-langu.

      LOOP AT lt_stat INTO DATA(ls_stat).
        CONCATENATE <fs_output>-stat_txt ls_stat-txt04 INTO <fs_output>-stat_txt SEPARATED BY space.
      ENDLOOP.

    ENDIF.

    IF <fs_output>-aufnr IS NOT INITIAL.

      DATA: number        LIKE  bapi_order_key-order_number,
            order_objects LIKE  bapi_pp_order_objects,
            operation     TYPE TABLE OF bapi_order_operation1,
            component     TYPE TABLE OF bapi_order_component.

      CLEAR: number, order_objects, operation[], component[].

      number = <fs_output>-aufnr.
      order_objects-components = 'X'.
      order_objects-operations = 'X'.

      CALL FUNCTION 'BAPI_PRODORD_GET_DETAIL'
        EXPORTING
          number        = number
          order_objects = order_objects
        TABLES
          operation     = operation
          component     = component.
      LOOP AT operation INTO DATA(ls_operation).
        IF <fs_output>-ltxa1_all IS INITIAL.
          <fs_output>-ltxa1_all = |{ ls_operation-description }|.
        ELSE.
          <fs_output>-ltxa1_all = |{ <fs_output>-ltxa1_all }| && | - | && |{ ls_operation-description }|.
        ENDIF.
        "Fechas

      ENDLOOP.
      LOOP AT component INTO DATA(ls_component) WHERE withdrawn_quantity > 0.
      ENDLOOP.
      IF sy-subrc = 0.
        READ TABLE operation INTO ls_operation WITH KEY operation_number = ls_component-operation.
        IF sy-subrc = 0.
          <fs_output>-arbpl = ls_operation-work_center.
          IF <fs_output>-situacion = '02' OR <fs_output>-situacion = '03'.
            CLEAR: <fs_output>-arbpl, <fs_output>-ltxa1_all.
          ENDIF.
          <fs_output>-ltxa1 = ls_operation-work_center_text.
          <fs_output>-late_sched_fin_date_exec = ls_operation-late_sched_fin_date_exec.
          <fs_output>-late_sched_fin_time_exec = ls_operation-late_sched_fin_time_exec.
        ENDIF.
      ENDIF.
    ENDIF.


    "JCB 14.06.23. Cajas por palets. Si ya está no se calcula
    IF <fs_output>-lhmng1 IS INITIAL.
      READ TABLE lt_output INTO ls_output WITH KEY vbeln = <fs_output>-vbeln
                                                   posnr = <fs_output>-posnr.
      IF sy-subrc = 0.
        SELECT SINGLE * INTO @DATA(ls_t320) FROM t320 WHERE werks = @ls_output-werks
                                                        AND lgort = @ls_output-lgort.
        IF sy-subrc NE 0.
          SELECT SINGLE * INTO @ls_t320 FROM t320 WHERE werks = @ls_output-werks.
        ENDIF.
        IF sy-subrc = 0.
          SELECT SINGLE lhmg1 INTO <fs_output>-lhmng1 FROM mlgn WHERE matnr = ls_output-matnr
                                                                  AND lgnum = ls_t320-lgnum.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDLOOP.

  IF i_360 IS NOT INITIAL.
    "Eliminamos las posiciones con reparto cero y que existan
    LOOP AT ot_output INTO DATA(ls_output1) WHERE cant_conf = 0.
      lv_tabix = sy-tabix.
      READ TABLE lt_vbep INTO ls_vbep WITH KEY vbeln = ls_output1-vbeln
                                                   posnr = ls_output1-posnr.
      IF sy-subrc = 0.
        IF ls_vbep-etenr NE ls_output1-etenr AND ls_vbep-bmeng NE 0.
          DELETE ot_output INDEX lv_tabix.
        ELSE.

        ENDIF.
      ENDIF.
    ENDLOOP.

  ENDIF.

*  DELETE ot_output WHERE situacion = '03'. "Comentamos, ahora si que quieren que aparezcan

  IF irg_lifnr_a1[] IS NOT INITIAL.
    DELETE ot_output WHERE parvw_a1 NOT IN irg_lifnr_a1[].
  ENDIF.

  IF irg_fech_fin[] IS NOT INITIAL.
    DELETE ot_output WHERE zz_fecha_servicio_final NOT IN irg_fech_fin[].
  ENDIF.

  IF irg_aufnr[] IS NOT INITIAL.
    DELETE ot_output WHERE aufnr NOT IN irg_aufnr[].
  ENDIF.

  IF irg_kdmat[] IS NOT INITIAL.
    DELETE ot_output WHERE kdmat NOT IN irg_kdmat[].
  ENDIF.

  IF iv_situacion IS NOT INITIAL.
    DELETE ot_output WHERE situacion NE iv_situacion.
  ENDIF.

  IF iv_carga_planif IS NOT INITIAL.
    DELETE ot_output WHERE cant_palnif NE iv_carga_planif.
  ENDIF.

  "Status de pedido
  DATA lv_str_where TYPE string.
  DATA lv_str_where_any TYPE string.
  DATA(lt_output_aux) = ot_output[].

  CLEAR: lv_str_where, lv_str_where_any, ot_output[].

  IF iv_any IS NOT INITIAL.
    lv_str_where_any = |{ lv_str_where_any }| && | stat_cita  IS INITIAL AND |.
    lv_str_where_any = |{ lv_str_where_any }| && | stat_subco IS INITIAL AND |.
    lv_str_where_any = |{ lv_str_where_any }| && | stat_fecha IS INITIAL AND |.
    lv_str_where_any = |{ lv_str_where_any }| && | stat_cant  IS INITIAL AND |.
    lv_str_where_any = |{ lv_str_where_any }| && | stat_homol IS INITIAL |.
  ENDIF.

  IF iv_cita IS NOT INITIAL.
    IF lv_str_where IS NOT INITIAL. lv_str_where = |{ lv_str_where }| && | OR |.  ENDIF.
    lv_str_where = |{ lv_str_where }| && | stat_cita IS NOT INITIAL |.
  ENDIF.

  IF iv_subco IS NOT INITIAL.
    IF lv_str_where IS NOT INITIAL. lv_str_where = |{ lv_str_where }| && | OR |.  ENDIF.
    lv_str_where = |{ lv_str_where }| && | stat_subco IS NOT INITIAL |.
  ENDIF.

  IF iv_fecha IS NOT INITIAL.
    IF lv_str_where IS NOT INITIAL. lv_str_where = |{ lv_str_where }| && | OR |.  ENDIF.
    lv_str_where = |{ lv_str_where }| && | stat_fecha IS NOT INITIAL |.
  ENDIF.

  IF iv_cant IS NOT INITIAL.
    IF lv_str_where IS NOT INITIAL. lv_str_where = |{ lv_str_where }| && | OR |.  ENDIF.
    lv_str_where = |{ lv_str_where }| && | stat_cant IS NOT INITIAL |.
  ENDIF.

  IF iv_homol IS NOT INITIAL.
    IF lv_str_where IS NOT INITIAL. lv_str_where = |{ lv_str_where }| && | OR |.  ENDIF.
    lv_str_where = |{ lv_str_where }| && | stat_homol IS NOT INITIAL |.
  ENDIF.

  IF lv_str_where_any IS NOT INITIAL.
    LOOP AT lt_output_aux INTO DATA(ls_out) WHERE (lv_str_where_any).
      APPEND ls_out TO ot_output.
    ENDLOOP.
  ENDIF.

  IF lv_str_where IS NOT INITIAL.
    LOOP AT lt_output_aux INTO ls_out WHERE (lv_str_where).
      APPEND ls_out TO ot_output.
    ENDLOOP.
  ENDIF.

  IF ot_output[] IS NOT INITIAL.
    SELECT * INTO TABLE @DATA(it_vbap)
      FROM vbap
      FOR ALL ENTRIES IN @ot_output
      WHERE vbeln EQ @ot_output-vbeln
      AND posnr EQ @ot_output-posnr.

    SELECT * INTO TABLE @DATA(it_vbup)
     FROM vbup
     FOR ALL ENTRIES IN @ot_output
     WHERE vbeln EQ @ot_output-vbeln
     AND posnr EQ @ot_output-posnr.

    SORT it_vbup BY vbeln posnr.

    SELECT * INTO TABLE @DATA(it_vbak)
      FROM vbak
      FOR ALL ENTRIES IN @ot_output
      WHERE vbeln EQ @ot_output-vbeln.

    SORT it_vbap BY vbeln posnr ASCENDING.
    SORT it_vbak BY vbeln.

    SELECT vbeln, posnr, etenr, edatu, bmeng INTO TABLE @DATA(it_vbep)
      FROM vbep
      FOR ALL ENTRIES IN @ot_output
      WHERE vbeln EQ @ot_output-vbeln
      AND posnr EQ @ot_output-posnr
      AND etenr EQ 1.

    SORT it_vbep BY vbeln posnr ASCENDING.

    SELECT t1~vbeln, posnr, wadat_ist, vgbel, vgpos, lfimg INTO TABLE @DATA(it_likp)
      FROM likp AS t1 INNER JOIN lips AS t2 ON t1~vbeln EQ t2~vbeln
      FOR ALL ENTRIES IN @ot_output
      WHERE vgbel EQ @ot_output-vbeln
      AND   vgpos EQ @ot_output-posnr.

    SORT it_likp BY vbeln posnr ASCENDING.

  ENDIF.

  DATA: it_vbap_fm TYPE  va_vbapvb_t.
  DATA: it_datos TYPE STANDARD TABLE OF zssd006_s_stock_libre_alv.

  LOOP AT ot_output ASSIGNING FIELD-SYMBOL(<outp>).

    READ TABLE it_vbap ASSIGNING FIELD-SYMBOL(<fs_vbap>) WITH KEY vbeln = <outp>-vbeln posnr = <outp>-posnr BINARY SEARCH.
    CHECK sy-subrc = 0.
    READ TABLE it_vbup ASSIGNING FIELD-SYMBOL(<fs_vbup>) WITH KEY vbeln = <outp>-vbeln posnr = <outp>-posnr BINARY SEARCH.
    CHECK sy-subrc = 0.
    READ TABLE it_vbak ASSIGNING FIELD-SYMBOL(<fs_vbak>) WITH KEY vbeln = <outp>-vbeln BINARY SEARCH.
    CHECK sy-subrc = 0.

    FREE it_vbap_fm.

    APPEND INITIAL LINE TO it_vbap_fm ASSIGNING FIELD-SYMBOL(<fm>).
    MOVE-CORRESPONDING <fs_vbap> TO <fm>.

    FREE it_datos.

    CALL FUNCTION 'ZSD006_CHECK_STOCK_LIBRE'
      EXPORTING
        it_vbap         = it_vbap_fm
        posnr           = <fs_vbap>-posnr
        i_vbak          = <fs_vbak>
        i_no_show_popup = abap_true
*     IMPORTING
*       E_CONTINUE_SAVE =
      TABLES
        ot_output       = it_datos.

    LOOP AT it_datos ASSIGNING FIELD-SYMBOL(<datos>) WHERE vbeln_cli IS INITIAL.
      <outp>-labst_libre = <datos>-labst_libre.
      <outp>-labst = <datos>-labst.
      <outp>-labst_ofs = <datos>-labst_ofs.
      <outp>-labst_pedido = <datos>-labst_pedido.
      <outp>-labst_pedido_sa = <datos>-labst_pedido_sa.
    ENDLOOP.

    LOOP AT it_datos ASSIGNING <datos> WHERE vbeln_cli IS NOT INITIAL.
      <outp>-labst_pedido = <outp>-labst_pedido + <datos>-labst_pedido.
      <outp>-labst_pedido_sa = <outp>-labst_pedido_sa + <datos>-labst_pedido_sa.
    ENDLOOP.
*o  Cant.ent.pend.
*#  LIPS-LFIMG (VBUP-WBSTA = A) # Cantidad en entrega asociada al pedido/posición SIN SM.
*o  Cant.ent.enviada
*#  LIPS-LFIMG (VBUP-WBSTA = C) # Cantidad en entrega asociada al pedido/posición CON SM.
*o  Ctd.ped.
*#  VBAP-KWMENG # Cantidad del pedido
*    <outp>-resto_sumin = <outp>-kwmeng - <outp>-lfimg_servido.
*    <outp>-resto_no_sumin = <outp>-kwmeng - <outp>-lfimg.
*
*    SELECT SINGLE vbeln, wbsta INTO @DATA(ls_vbup2) FROM vbup WHERE vbeln = @<outp>-vbeln
*                                                          AND posnr = @<outp>-posnr.
*    IF ls_vbup2-wbsta EQ 'A'.
    "Sin AM
*      <outp>-resto_sumin = 0.
    IF <outp>-lfimg > 0.
      <outp>-resto_no_sumin = ( <outp>-cant_prod_lib + <outp>-cant_prod_cal ) - <outp>-lfimg.
      IF <outp>-cant_prod_lib = 0 AND <outp>-cant_prod_cal = 0.
        <outp>-resto_no_sumin = <outp>-kwmeng - <outp>-lfimg.
      ENDIF.
      IF <outp>-resto_no_sumin < 0.
        <outp>-resto_no_sumin = 0.
      ENDIF.
    ENDIF.
*    ELSEIF ls_vbup2-wbsta EQ 'C'.
    "Con SM
    IF <outp>-lfimg_servido > 0.
      <outp>-resto_sumin = ( <outp>-cant_prod_lib + <outp>-cant_prod_cal ) - <outp>-lfimg_servido.
      IF <outp>-cant_prod_lib = 0 AND <outp>-cant_prod_cal = 0.
        <outp>-resto_sumin = <outp>-kwmeng - <outp>-lfimg_servido.
      ENDIF.
*      <outp>-resto_no_sumin = 0.
      IF <outp>-resto_sumin < 0.
        <outp>-resto_sumin = 0.
      ENDIF.
    ENDIF.

    IF <fs_vbup>-gbsta = 'C'.
      <outp>-resto_sumin = 0.
    ENDIF.
*    ENDIF.

*    READ TABLE it_likp WITH KEY vgbel = <outp>-vbeln vgpos = <outp>-posnr ASSIGNING FIELD-SYMBOL(<fs_likp2>).
*    IF sy-subrc = 0.
*      <outp>-wadat_ist = <fs_likp2>-wadat_ist.
*    ENDIF.

    READ TABLE it_vbep WITH KEY vbeln = <outp>-vbeln posnr = <outp>-posnr etenr = 1 ASSIGNING FIELD-SYMBOL(<fs_vbep>).
    IF sy-subrc = 0.
      <outp>-eindt = <fs_vbep>-edatu.
    ENDIF.

  ENDLOOP.

*
*RESTO_NO_SUMIN

  CLEAR: ot_return[].

ENDFUNCTION.
