FUNCTION zsdcom_imprimir_propliq_comis.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(IS_CABLIQ) TYPE  ZSSDCOM_PRLIQCAB_KEY
*"     VALUE(I_LIFNR) TYPE  LIFNR
*"  EXPORTING
*"     VALUE(ET_RETURN) TYPE  BAPIRET2_T
*"  CHANGING
*"     VALUE(C_TDDEST) TYPE  RSPOPNAME
*"----------------------------------------------------------------------

  DATA: lti_pos       TYPE zttsdcom_prliqpos_print.
  DATA: it_pos    TYPE zttsdcom_prliqpos_print.
  DATA: ls_cab    TYPE zssdcom_prliqcab_print,
        ls_pos    TYPE zssdcom_prliqpos_print,
        ls_imp    TYPE zssdcom_prliqimp_print,
        ls_return TYPE bapiret2.

  DATA: lv_sform    TYPE na_fname,
        lv_formtype TYPE na_formtype,
        lv_waerk    TYPE waerk.

  DATA lv_email TYPE flag.

* Sacamos el formulario y el tipo que tiene el comisionista
  SELECT SINGLE sform formtype email
      INTO (lv_sform, lv_formtype, lv_email)
      FROM  ztsdcom002
      WHERE bukrs = is_cabliq-bukrs
      AND   lifnr = i_lifnr.

* Si el comisionista no tiene formulario asignado -> ERROR
  IF lv_sform IS INITIAL OR lv_formtype IS INITIAL.
    ls_return-id         = 'ZSDCOM'.
    ls_return-type       = 'E'.
    ls_return-number     = '019'.
    ls_return-message_v1 = is_cabliq-bukrs.
    ls_return-message_v2 = i_lifnr.
    APPEND ls_return TO et_return.
    EXIT.
  ENDIF.

* Sacamos los datos de cabecera de impresión
  CALL FUNCTION 'ZSDCOM_IMPR_PROPLIQ_CABECERA'
    EXPORTING
      is_cabliq = is_cabliq
      i_lifnr   = i_lifnr
    IMPORTING
      es_cab    = ls_cab.

* Sacamos las posiciones a imprimir
  CALL FUNCTION 'ZSDCOM_IMPR_PROPLIQ_POSICIONES'
    EXPORTING
      is_cabliq = is_cabliq
      i_lifnr   = i_lifnr
    IMPORTING
      et_pos    = lti_pos.

  TYPES: BEGIN OF ty_waerk,
           waerk TYPE waerk.
  TYPES: END OF ty_waerk.
  DATA: lt_monedas TYPE TABLE OF ty_waerk.

  "SELECT DISTINCT waerk FROM @lti_pos AS l INTO TABLE @DATA(lt_monedas).
  LOOP AT lti_pos INTO DATA(lsi_pos_a).
    APPEND lsi_pos_a-waerk TO lt_monedas.
  ENDLOOP.


  LOOP AT lt_monedas INTO DATA(ls_monedas).
    CLEAR it_pos[].
    LOOP AT lti_pos INTO DATA(lsi_pos) WHERE waerk = ls_monedas-waerk.
      DATA(l_waerk) = lsi_pos-waerk.
      APPEND lsi_pos TO it_pos.
    ENDLOOP.

* Rellenamos la estructura de importes
    CALL FUNCTION 'ZSDCOM_IMPR_PROPLIQ_IMPORTES'
      EXPORTING
        is_cabliq   = is_cabliq
        i_lifnr     = i_lifnr
        it_pos      = it_pos "lti_pos
      IMPORTING
        es_importes = ls_imp.

* Lanzamos la impresión del formulario
    CASE lv_formtype.
*   Smartform
      WHEN '1'.
        CALL FUNCTION 'ZSDCOM_IMPR_PROPUESTA_SF'
          EXPORTING
            i_sform  = lv_sform
            is_cab   = ls_cab
            is_imp   = ls_imp
            it_pos   = it_pos "lti_pos
            email    = lv_email
          CHANGING
            c_tddest = c_tddest.
        CLEAR c_tddest.
*   PDF
      WHEN '2'.
        CALL FUNCTION 'ZSDCOM_IMPR_PROPUESTA_PDF'
          EXPORTING
            i_sform  = lv_sform
            is_cab   = ls_cab
            is_imp   = ls_imp
            it_pos   = it_pos "lti_pos
          CHANGING
            c_tddest = c_tddest.
        CLEAR c_tddest.
    ENDCASE.

  ENDLOOP.

ENDFUNCTION.
