FUNCTION zfm_sd_get_shp_cdata.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_VBELN) TYPE  VBELN
*"     REFERENCE(I_POSNR) TYPE  POSNR OPTIONAL
*"  EXPORTING
*"     REFERENCE(E_SHIPMENT_S_DATA) TYPE  ZSHIPMENT_S_DATA
*"  EXCEPTIONS
*"      NO_VALID_IPARAMS
*"      NO_VALID_ITYPE
*"----------------------------------------------------------------------

**********************************************************************
* Tipos locales
**********************************************************************

  TYPES: BEGIN OF ty_data,
           itype    TYPE char1,
           werks    TYPE werks_d,
           vbeln    TYPE vbeln,
           posnr    TYPE posnr,
           kwmeng   TYPE kwmeng,
           cuobj_p  TYPE cuobj,
           vbeln_vl TYPE vbeln,
           posnr_vl TYPE posnr,
           lfimg_vl TYPE lfimg,
           cuobj_e  TYPE cuobj,
           aufnr    TYPE aufnr,
           gstrs    TYPE co_gstrs,
           gsuzs    TYPE co_gsuzs,
           gltrs    TYPE co_gltrs,
           gluzs    TYPE co_gluzs,
           gstrp    TYPE co_gstrp,
           cuobj_o  TYPE cuobj,
         END OF ty_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_lcl_data    TYPE ty_data,
        ls_custom_data TYPE zshipment_s_data,
        lv_type_doc    TYPE c,
        lv_cuobj       TYPE cuobj,
        lv_menge       TYPE menge_d.

  DATA: lo_idx_mng   TYPE REF TO zcl_hp_vcpp_idx_manager,
        ls_idx_td151 TYPE yhp_idx_td151.

  DATA: lv_string TYPE string,
        lt_lines  TYPE TABLE OF tline,
        ls_line   TYPE tline,
        lv_tdname TYPE thead-tdname.

**********************************************************************
* Validaciones
**********************************************************************

***--> Parámetros IMPORT

  IF ( i_vbeln IS INITIAL ).
    RAISE no_valid_iparams.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

***--> NIVEL: CABECERA o CABECERA+POSICIÓN

  IF ( i_posnr IS NOT SUPPLIED OR i_posnr LE 0 ). "Nivel cabecera solo

*** DATOS DE CABECERA

** Tipo de documento

    "Comprobamos si pedido venta
    SELECT SINGLE vbeln
      FROM vbak
      INTO ( ls_lcl_data-vbeln )
     WHERE vbeln EQ i_vbeln.

    "Chequeo
    IF ( sy-subrc EQ 0 ). "PV

      ls_lcl_data-itype = 'P'.

    ELSE. "Otro

      "Comprobamos si es entrega
      SELECT SINGLE vbeln
        FROM likp
        INTO ( ls_lcl_data-vbeln_vl )
       WHERE vbeln EQ i_vbeln.

      "Chequeo
      IF ( sy-subrc EQ 0 ). "ES

        ls_lcl_data-itype = 'E'.

      ELSE. "Otro

        RAISE no_valid_iparams. "Salimos.

      ENDIF.

    ENDIF.

***--> TEXTOS

*** CABECERA

** Normas envío cabecera

    CLEAR: lv_tdname, lv_string.
    MOVE i_vbeln TO lv_tdname.
    CONDENSE lv_tdname NO-GAPS.

    PERFORM get_text_for USING 'ZC02' 'S' lv_tdname 'VBBK' CHANGING lv_string.

    MOVE lv_string TO ls_custom_data-zznormas_envio_k.

  ELSE. "Nivel cabecera + posición

    SELECT SINGLE kdmat
      FROM lips
      INTO ls_custom_data-zzkdmat
      WHERE vbeln EQ i_vbeln AND
            posnr EQ i_posnr.


*** CABECERA + POSICIÓN

** Comprobamos tipo de documento IMPORT

    "Comprobamos si pedido venta
    SELECT SINGLE vbeln posnr kwmeng werks cuobj
      FROM vbap
      INTO ( ls_lcl_data-vbeln, ls_lcl_data-posnr, ls_lcl_data-kwmeng, ls_lcl_data-werks, ls_lcl_data-cuobj_p )
     WHERE vbeln EQ i_vbeln
       AND posnr EQ i_posnr.

    "Chequeo
    IF ( sy-subrc EQ 0 ). "PV

      ls_lcl_data-itype = 'P'.

      "Intentamos obtener entrega
      SELECT SINGLE vbeln posnr cuobj
        FROM lips
        INTO ( ls_lcl_data-vbeln_vl, ls_lcl_data-posnr_vl, ls_lcl_data-cuobj_e )
       WHERE vgbel EQ ls_lcl_data-vbeln
         AND posnr EQ ls_lcl_data-posnr.

    ELSE. "Otro

      "Comprobamos si es entrega
      SELECT SINGLE vbeln posnr vgbel vgpos werks lfimg cuobj
        FROM lips
        INTO ( ls_lcl_data-vbeln_vl, ls_lcl_data-posnr_vl, ls_lcl_data-vbeln, ls_lcl_data-posnr, ls_lcl_data-werks, ls_lcl_data-lfimg_vl, ls_lcl_data-cuobj_e )
       WHERE vbeln EQ i_vbeln
         AND posnr EQ i_posnr.

      "Chequeo
      IF ( sy-subrc EQ 0 ). "ES

        ls_lcl_data-itype = 'E'.

        SELECT SINGLE kwmeng cuobj
          FROM vbap
          INTO ( ls_lcl_data-kwmeng, ls_lcl_data-cuobj_p )
         WHERE vbeln EQ ls_lcl_data-vbeln
           AND posnr EQ ls_lcl_data-posnr.

      ELSE. "Otro

        RAISE no_valid_iparams. "Salimos.

      ENDIF.

    ENDIF.

***--> OF

*  SELECT SINGLE a~aufnr b~gstrs b~gsuzs MAX( b~gltrs ) MAX( b~gluzs ) b~cuobj max( b~gamng )
*    FROM aufk AS a LEFT JOIN afko AS b
*      ON a~aufnr EQ b~aufnr
*    INTO ( ls_lcl_data-aufnr, ls_lcl_data-gstrs, ls_lcl_data-gsuzs, ls_lcl_data-gltrs, ls_lcl_data-gluzs, ls_lcl_data-cuobj_o, ls_custom_data-zzgamng )
*   WHERE a~kdauf EQ ls_lcl_data-vbeln
*     AND a~kdpos EQ ls_lcl_data-posnr
*     AND a~werks EQ ls_lcl_data-werks
*   GROUP BY a~aufnr b~gstrs b~gsuzs b~gltrs b~gluzs b~cuobj b~gamng.


    SELECT a~aufnr, b~gstrs, b~gsuzs, b~gltrs, b~gluzs, b~cuobj, b~gamng, b~gstrp, a~objnr
      INTO TABLE @DATA(tl_aufk)
      FROM aufk AS a LEFT JOIN afko AS b ON a~aufnr EQ b~aufnr
      UP TO 1 ROWS
      WHERE a~kdauf EQ @ls_lcl_data-vbeln AND
            a~kdpos EQ @ls_lcl_data-posnr AND
            a~werks EQ @ls_lcl_data-werks AND
            NOT EXISTS ( SELECT * FROM jest WHERE jest~objnr = a~objnr  AND
                                                  jest~inact = @space   AND
                                                  jest~stat  IN ('I0045', 'I0076') )    "Cierre técnico, petición de borrado
      ORDER BY gltrs DESCENDING, gluzs DESCENDING, b~gamng DESCENDING.

    READ TABLE tl_aufk ASSIGNING FIELD-SYMBOL(<fs_aufk>) INDEX 1.
    IF sy-subrc = 0.
      ls_lcl_data-aufnr = <fs_aufk>-aufnr.
      ls_lcl_data-gstrs = <fs_aufk>-gstrs.
      ls_lcl_data-gsuzs = <fs_aufk>-gsuzs.
      ls_lcl_data-gltrs = <fs_aufk>-gltrs.
      ls_lcl_data-gluzs = <fs_aufk>-gluzs.
      ls_lcl_data-gstrp = <fs_aufk>-gstrp.
      ls_lcl_data-cuobj_o = <fs_aufk>-cuobj.
      ls_custom_data-zzgamng = <fs_aufk>-gamng.

      MOVE ls_lcl_data-aufnr TO ls_custom_data-zzaufnr.
      MOVE ls_lcl_data-gstrs TO ls_custom_data-zzgstrs.
      MOVE ls_lcl_data-gsuzs TO ls_custom_data-zzgsuzs.
      MOVE ls_lcl_data-gltrs TO ls_custom_data-zzgltrs.
      MOVE ls_lcl_data-gluzs TO ls_custom_data-zzgluzs.
      MOVE ls_lcl_data-gstrp TO ls_custom_data-zzgstrp.
    ENDIF.

***--> CUOBJ

** Configuración

    "Comprobamos con que objeto de configuración vamos a trabajar
    " - Primera opción -> Configuración OF
    " - Segunda opción -> Documento de parametros de entrada (P=pedido; E=entrega)
    " - Tercera opción -> Documento no parametros de entrada
    IF ( ls_lcl_data-cuobj_o IS NOT INITIAL AND ls_lcl_data-cuobj_o GT 0 ). "Tenemos OF y configuración

      MOVE ls_lcl_data-cuobj_o TO lv_cuobj.

    ELSE.  "No tenemos OF ni configuración

      CASE ls_lcl_data-itype.

        WHEN 'P'. "Pedido ventas

          "Comprobamos si tenemos configuración en pedido
          IF ( ls_lcl_data-cuobj_p IS NOT INITIAL AND ls_lcl_data-cuobj_p GT 0 ). "Si

            MOVE ls_lcl_data-cuobj_p TO lv_cuobj.

          ELSE. "No

            "Comprobamos si tenemos configuración en entrega
            IF ( ls_lcl_data-cuobj_e IS NOT INITIAL AND ls_lcl_data-cuobj_e GT 0 ). "Si

              MOVE ls_lcl_data-cuobj_e TO lv_cuobj.

            ENDIF.

          ENDIF.

        WHEN 'E'. "Entrega salida

          "Comprobamos si tenemos configuración en entrega
          IF ( ls_lcl_data-cuobj_e IS NOT INITIAL AND ls_lcl_data-cuobj_e GT 0 ). "Si

            MOVE ls_lcl_data-cuobj_e TO lv_cuobj.

          ELSE. "No

            "comprobamos si tenemos configuración en pedido
            IF ( ls_lcl_data-cuobj_p IS NOT INITIAL AND ls_lcl_data-cuobj_p GT 0 ). "Si

              MOVE ls_lcl_data-cuobj_p TO lv_cuobj.

            ENDIF.

          ENDIF.

        WHEN OTHERS.

          RAISE no_valid_itype.

      ENDCASE.

    ENDIF.

    CHECK lv_cuobj IS NOT INITIAL AND lv_cuobj GT 0.

***--> IDX Tables

    CLEAR: lo_idx_mng.

    CREATE OBJECT lo_idx_mng TYPE zcl_hp_vcpp_idx_manager
      EXPORTING
        i_cuobj          = lv_cuobj   " Configuración (número de objeto interno)
      EXCEPTIONS
        no_valid_iparams = 1
        OTHERS           = 2.

    IF ( lo_idx_mng IS BOUND ).

*** IDX 100 - Datos del producto

      lo_idx_mng->get_td100_data(
        RECEIVING
          e_yhp_idx_td100 = DATA(ls_idx_td100)
        EXCEPTIONS
          no_values       = 1
          OTHERS          = 2
      ).
      IF ( sy-subrc EQ 0 ).

** Ancho

        MOVE ls_idx_td100-prole TO  ls_custom_data-zzprole.

** Largo

        MOVE ls_idx_td100-prowi TO ls_custom_data-zzprowi.

      ENDIF.

*** IDX 151 - Datos paletizado

      CLEAR: ls_idx_td151.

      lo_idx_mng->get_td151_data(
        EXPORTING
          i_shuty          = 'UNIT'" MTS: 02.11.22 Modificamos A UNIT para calculo palets  estaba en STACK 'STACK'    " VCXI-XCS: ID for Shipping Unit Type
        RECEIVING
          e_yhp_idx_td151  = ls_idx_td151
        EXCEPTIONS
          no_valid_iparams = 1
          no_values        = 2
          OTHERS           = 3
      ).
      IF ( sy-subrc EQ 0 ).

** Cantidad de pallets en la entrega


        CLEAR: lv_menge.

        CASE ls_lcl_data-itype.
          WHEN 'P'.
            MOVE ls_lcl_data-kwmeng TO lv_menge.
          WHEN 'E'.
            MOVE ls_lcl_data-lfimg_vl TO lv_menge.
          WHEN OTHERS.
            MOVE ls_lcl_data-lfimg_vl TO lv_menge.
        ENDCASE.

        TRY .
            ls_custom_data-zzcantpale = ceil( lv_menge / ls_idx_td151-tbqty ).
            "JCB 26.10.22. SD - 74192 - Añadir campos en VL10E
            ls_custom_data-zzcantpale_gamng = ceil( ls_custom_data-zzgamng / ls_idx_td151-tbqty ).
          CATCH cx_sy_zerodivide cx_sy_arithmetic_overflow.
        ENDTRY.

        "JVM - añadir cantidad pale para VL10E
        IF sy-tcode EQ 'VL10E'.

        ENDIF.
        "FJVM

      ENDIF.

** Dimensiones SHIPUNIT

      CLEAR: ls_idx_td151.

      lo_idx_mng->get_td151_data(
        EXPORTING
          i_shuty          = 'UNIT'    " VCXI-XCS: ID for Shipping Unit Type
        RECEIVING
          e_yhp_idx_td151  = ls_idx_td151
        EXCEPTIONS
          no_valid_iparams = 1
          no_values        = 2
          OTHERS           = 3
      ).
      IF ( sy-subrc EQ 0 ).

        MOVE ls_idx_td151-length              TO ls_custom_data-zzlength.
        MOVE ls_idx_td151-length_uom          TO ls_custom_data-zzlength_uom.
        MOVE ls_idx_td151-width               TO ls_custom_data-zzwidth.
        MOVE ls_idx_td151-width_uom           TO ls_custom_data-zzwidth_uom.
        MOVE ls_idx_td151-height              TO ls_custom_data-zzheight.
        MOVE ls_idx_td151-height_uom          TO ls_custom_data-zzheight_uom.
        MOVE ls_idx_td151-weigth              TO ls_custom_data-zzweigth.
        MOVE ls_idx_td151-weigth_uom          TO ls_custom_data-zzweigth_uom.
        MOVE ls_idx_td151-overhang_length     TO ls_custom_data-zzoverhang_length.
        MOVE ls_idx_td151-overhang_length_uom TO ls_custom_data-zzoverhang_length_uom.
        MOVE ls_idx_td151-overhang_width      TO ls_custom_data-zzoverhang_width.
        MOVE ls_idx_td151-overhang_width_uom  TO ls_custom_data-zzoverhang_width_uom.

      ENDIF.

    ENDIF.

***--> TEXTOS

*** CABECERA

** Normas envío cabecera

    CLEAR: lv_tdname, lv_string.
    MOVE i_vbeln TO lv_tdname.
    CONDENSE lv_tdname NO-GAPS.

    PERFORM get_text_for USING 'ZC02' 'S' lv_tdname 'VBBK' CHANGING lv_string.

    MOVE lv_string TO ls_custom_data-zznormas_envio_k.

*** POSICIÓN

** Normas envío posición

    CLEAR: lv_tdname, lv_string.
    CONCATENATE i_vbeln i_posnr INTO lv_tdname.
    CONDENSE lv_tdname NO-GAPS.

    PERFORM get_text_for USING 'ZC03' 'S' lv_tdname 'VBBP' CHANGING lv_string.

    MOVE lv_string TO ls_custom_data-zznormas_envio_p.

  ENDIF.

***--> Devolvemos datos

  MOVE-CORRESPONDING ls_custom_data TO e_shipment_s_data.

ENDFUNCTION.
