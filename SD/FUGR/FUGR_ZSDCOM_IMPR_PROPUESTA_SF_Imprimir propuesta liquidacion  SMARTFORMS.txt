FUNCTION zsdcom_impr_propuesta_sf.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_SFORM) TYPE  NA_FNAME
*"     VALUE(IS_CAB) TYPE  ZSSDCOM_PRLIQCAB_PRINT
*"     VALUE(IS_IMP) TYPE  ZSSDCOM_PRLIQIMP_PRINT
*"     VALUE(IT_POS) TYPE  ZTTSDCOM_PRLIQPOS_PRINT
*"     VALUE(EMAIL) TYPE  FLAG OPTIONAL
*"  CHANGING
*"     VALUE(C_TDDEST) TYPE  RSPOPNAME OPTIONAL
*"----------------------------------------------------------------------

  DATA: ls_control TYPE ssfctrlop,
        ls_output  TYPE ssfcompop,
        ls_options TYPE ssfcresop.

  DATA: lv_formname TYPE tdsfname,
        lv_funcion  TYPE rs38l_fnam,
        lv_dialog   TYPE flag.

* Cargamos los parámetros de impresión
  IF c_tddest IS INITIAL.
    c_tddest = 'LOCL'.
  ENDIF.
  ls_output-tddest    = c_tddest.
  ls_output-tdnewid   = 'X'.
  ls_output-tdimmed   = 'X'.
*  ls_output-tddelete  = 'X'.
  lv_dialog           = 'X'.

  "Chequear que tenga email
  DATA l_adr6 TYPE adr6.
  SELECT SINGLE * INTO l_adr6 FROM adr6
  WHERE addrnumber = is_cab-adrnr_lifnr
  AND flgdefault = 'X'.
  IF l_adr6-smtp_addr IS NOT INITIAL AND email = 'X'.
    ls_control-getotf   = 'X'.
    ls_control-no_dialog = 'X'.
  ENDIF.

* Si tenemos impresora, no mostramos el cuadro de diálogo <--  CVP se permite previsualizar (sale siempre popup)
*  IF c_tddest IS NOT INITIAL.
*    ls_control-no_dialog = 'X'.
*    CLEAR lv_dialog.
*  ENDIF.

* Recuperamos el nombre del módulo de funciones
  lv_formname = i_sform.
  CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
    EXPORTING
      formname           = lv_formname
    IMPORTING
      fm_name            = lv_funcion
    EXCEPTIONS
      no_form            = 1
      no_function_module = 2
      OTHERS             = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*Mdiez ******************************************************************** 01/02/2017
*VALUE(IT_POS) TYPE  ZTTSDCOM_PRLIQPOS_PRINT
*  DATA: it_poseur TYPE zttsdcom_prliqpos_print,
*        it_posusd TYPE zttsdcom_prliqpos_print.
*  DATA: wa_pos TYPE LINE OF zttsdcom_prliqpos_print.
*VALUE(IS_IMP) TYPE  ZSSDCOM_PRLIQIMP_PRINT
*  DATA: is_impeur TYPE zssdcom_prliqimp_print.
*  DATA: is_impusd TYPE zssdcom_prliqimp_print.

*  is_impeur = is_imp.
*  is_impusd = is_imp.
*  CLEAR: is_impeur-ztot_com,is_impusd-ztot_com.

*  LOOP AT it_pos INTO wa_pos.
*    IF wa_pos-waerk = 'EUR'.
*      is_impeur-ztot_com = is_impeur-ztot_com + wa_pos-zimp_liq.
*      is_impeur-waers = 'EUR'.
*      APPEND wa_pos TO it_poseur.
*    ELSEIF wa_pos-waerk = 'USD'.
*      is_impusd-ztot_com = is_impusd-ztot_com + wa_pos-zimp_liq.
*      is_impusd-waers = 'USD'.
*      APPEND wa_pos TO it_posusd.
*    ENDIF.
*  ENDLOOP.
*  "Recalculamos el indicador de iva
*  DATA e_fwste LIKE bset-fwste.
*  DATA t_mwdat TYPE TABLE OF rtax1u15.
*  DATA importe LIKE bseg-wrbtr.
*  CLEAR t_mwdat[].
*  CLEAR e_fwste.
*  importe = is_impusd-ztot_com.
*  CALL FUNCTION 'CALCULATE_TAX_FROM_NET_AMOUNT'
*    EXPORTING
*      i_bukrs = is_cab-bukrs
*      i_mwskz = is_impusd-mwskz
*      i_waers = 'USD'
*      i_wrbtr = importe
*    IMPORTING
*      e_fwste = e_fwste
*    TABLES
*      t_mwdat = t_mwdat.
*
*  is_impusd-mwsbk = e_fwste.
*  CLEAR t_mwdat[].
*  CLEAR e_fwste.
*
*  importe = is_impeur-ztot_com.
*  CALL FUNCTION 'CALCULATE_TAX_FROM_NET_AMOUNT'
*    EXPORTING
*      i_bukrs = is_cab-bukrs
*      i_mwskz = is_impeur-mwskz
*      i_waers = 'EUR'
*      i_wrbtr = importe
*    IMPORTING
*      e_fwste = e_fwste
*    TABLES
*      t_mwdat = t_mwdat.
*  is_impeur-mwsbk = e_fwste.

  DATA l_ssfcrescl TYPE ssfcrescl.
*  IF it_posusd IS NOT INITIAL.
  CALL FUNCTION lv_funcion
    EXPORTING
      control_parameters = ls_control
      output_options     = ls_output
      user_settings      = lv_dialog
      is_cab             = is_cab
      is_imp             = is_imp "is_impusd
      it_pos             = it_pos "it_posusd
    IMPORTING
      job_output_options = ls_options
      job_output_info    = l_ssfcrescl
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
*  ENDIF.

* Cargamos la impresora elegida (si está vacía)
  IF c_tddest IS INITIAL.
    c_tddest = ls_options-tddest.
  ENDIF.

  IF l_ssfcrescl-otfdata[] IS NOT INITIAL AND email = 'X' AND l_adr6-smtp_addr IS NOT INITIAL.
    DATA gv_title              TYPE so_obj_des.
    DATA lv_transfer_bin   TYPE sx_boolean.
    DATA lv_len                TYPE so_obj_len.
    DATA  li_objhead         TYPE soli_tab.
    DATA lv_bin_filesize TYPE i.
    DATA lw_content                  TYPE soli.
    DATA  lw_otf         TYPE itcoo.
    DATA  gi_main_text     TYPE bcsy_text.
    DATA: lv_email       TYPE ad_smtpadr,
          lv_sent_to_all TYPE os_boolean.
    DATA: gv_subject         TYPE so_obj_des.
    DATA: li_content_txt TYPE soli_tab,
          li_content_hex TYPE solix_tab.
    DATA: go_send_request  TYPE REF TO  cl_bcs,
          go_document      TYPE REF TO  cl_document_bcs,
          lo_recipient     TYPE REF TO  if_recipient_bcs,
          lo_bcs_exception TYPE REF TO  cx_bcs.
    DATA li_pdf_tab          TYPE TABLE OF tline.
    CALL FUNCTION 'CONVERT_OTF'
      EXPORTING
        format                = 'PDF'
      IMPORTING
        bin_filesize          = lv_bin_filesize
      TABLES
        otf                   = l_ssfcrescl-otfdata[]
        lines                 = li_pdf_tab
      EXCEPTIONS
        err_max_linewidth     = 1
        err_format            = 2
        err_conv_not_possible = 3
        err_bad_otf           = 4
        OTHERS                = 5.
    REFRESH li_content_txt.
    LOOP AT l_ssfcrescl-otfdata INTO lw_otf.
      CLEAR lw_content.
      CONCATENATE lw_otf-tdprintcom lw_otf-tdprintpar
             INTO lw_content.
      APPEND lw_content TO li_content_txt.
    ENDLOOP.
    REFRESH : li_content_hex,
                 li_objhead.

    CLEAR : lv_transfer_bin,
              lv_len.

    CALL FUNCTION 'SX_OBJECT_CONVERT_OTF_PDF'
      EXPORTING
        format_src      = 'OTF'
        format_dst      = 'PDF'
      CHANGING
        transfer_bin    = lv_transfer_bin
        content_txt     = li_content_txt
        content_bin     = li_content_hex
        objhead         = li_objhead
        len             = lv_len
      EXCEPTIONS
        err_conv_failed = 1
        OTHERS          = 2.

    TRY.
*/.. Create persistent send request
        go_send_request = cl_bcs=>create_persistent( ).
        gv_subject = 'COMISIONES A LIQUIDAR'.
        go_document = cl_document_bcs=>create_document(
              i_type    = 'RAW'
              i_text    = gi_main_text
              i_subject = gv_subject ).

        IF NOT li_content_hex IS INITIAL.
          gv_title = 'Comisiones' && sy-datum && sy-uzeit.
          go_document->add_attachment(
            i_attachment_type      =  'PDF'
            i_attachment_subject  =  gv_title
            i_attachment_size      =   lv_len
            i_att_content_hex       =   li_content_hex ).
        ENDIF.

*/.. Add document object to send request
        go_send_request->set_document( go_document ).
        lv_email = l_adr6-smtp_addr.
*/.. Add recipient (e-mail address)
*/.. create recipient object
        lo_recipient = cl_cam_address_bcs=>create_internet_address(
        lv_email ).
*/.. Add recipient object to send request
        go_send_request->add_recipient( lo_recipient ).
*/.. Send document
        lv_sent_to_all = go_send_request->send( i_with_error_screen =
        abap_true ).
        COMMIT WORK.
        IF lv_sent_to_all IS INITIAL.
          "Error Message
        ELSE.
          MESSAGE s368(00) WITH 'Email enviado Correctamente'.
        ENDIF.
*/.. Exception handling
      CATCH cx_bcs INTO lo_bcs_exception.
        "Exception Handling
    ENDTRY.
  ENDIF.

ENDFUNCTION.
