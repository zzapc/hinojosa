FUNCTION zsd_if_omp_delivery_create_sc.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(VP_KUNNR) TYPE  KUNNR
*"     REFERENCE(VP_VSTEL) TYPE  VSTEL
*"     REFERENCE(VP_DUE_DATE) TYPE  BAPIDLVCREATEHEADER-DUE_DATE
*"     REFERENCE(TP_ITEMS) TYPE  ZSSD_IF_OMP_T_DLV_CREATE_ITEM
*"  EXPORTING
*"     REFERENCE(VP_DELIV_NUMB) TYPE  VBELN_VL
*"     REFERENCE(TP_RETURN) TYPE  BAPIRET2_T
*"----------------------------------------------------------------------

  DATA: tl_xkomdlgn TYPE TABLE OF komdlgn,
        wl_xkomdlgn LIKE LINE OF tl_xkomdlgn.

  DATA wl_xvbsk TYPE vbsk.

  DATA: tl_xvbfs  TYPE TABLE OF vbfs,
        tl_xvbls  TYPE TABLE OF vbls,
        tl_xxlips TYPE TABLE OF lips.

  LOOP AT tp_items ASSIGNING FIELD-SYMBOL(<fs_item>).
    SELECT SINGLE *
      FROM ekko
      INTO @DATA(wl_ekko)
      WHERE ebeln = @<fs_item>-ref_doc.
    CHECK sy-subrc = 0.

    SELECT SINGLE *
      FROM ekpo
      INTO @DATA(wl_ekpo)
      WHERE ebeln = @<fs_item>-ref_doc AND
            ebelp = @<fs_item>-ref_item.
    CHECK sy-subrc = 0.

    SELECT SINGLE *
      FROM resb
      INTO @DATA(wl_resb)
      WHERE ebeln = @<fs_item>-ref_doc AND
            ebelp = @<fs_item>-ref_item.


    CLEAR wl_xkomdlgn.


    IF NOT wl_ekko-lifnr IS INITIAL.
      DATA: wl_lfm1 TYPE lfm1.

      CALL FUNCTION 'VENDOR_MASTER_DATA_SELECT_12'
        EXPORTING
          pi_lifnr       = wl_ekko-lifnr
          pi_ekorg       = wl_ekko-ekorg
        IMPORTING
          pe_lfm1        = wl_lfm1
        EXCEPTIONS
          no_entry_found = 1
          OTHERS         = 2.

      wl_xkomdlgn-vsbed = wl_lfm1-vsbed.
    ELSE.
      CLEAR wl_xkomdlgn-vsbed.
    ENDIF.

    wl_xkomdlgn-kunwe = vp_kunnr. "'0000103895'.
    wl_xkomdlgn-bwart = '541'.

    wl_xkomdlgn-adrnr_li = wl_ekko-adrnr.
    wl_xkomdlgn-lifnr = wl_ekko-lifnr.
    wl_xkomdlgn-inco1 = wl_ekko-inco1.
    wl_xkomdlgn-inco2 = wl_ekko-inco2.
    wl_xkomdlgn-exnum = wl_ekko-exnum.
    wl_xkomdlgn-bukrs_best = wl_ekko-bukrs.
    wl_xkomdlgn-matnr = <fs_item>-matnr.
    wl_xkomdlgn-werks = wl_ekpo-werks.
    wl_xkomdlgn-lgort = wl_resb-lgort. "'1400'. "TODO

    wl_xkomdlgn-vrkme = wl_ekpo-meins.
    wl_xkomdlgn-meins = wl_ekpo-lmein.
    wl_xkomdlgn-umvkz = wl_ekpo-umrez.
    wl_xkomdlgn-umvkn = wl_ekpo-umren.
    wl_xkomdlgn-insmk = wl_ekpo-insmk.
    wl_xkomdlgn-kzfme = wl_ekpo-kzfme.
    wl_xkomdlgn-kzvbr = wl_ekpo-kzvbr.
    wl_xkomdlgn-lfimg = <fs_item>-dlv_qty.
    wl_xkomdlgn-lfdat = vp_due_date.. "sy-datum.
*  wl_xkomdlgn-lfuhr = p_uzeit. TODO
    wl_xkomdlgn-vstel = vp_vstel.
    wl_xkomdlgn-vkorg = '2000'.
    wl_xkomdlgn-vtweg = '10'.
    wl_xkomdlgn-spart = '10'.

*  wl_xkomdlgn-traid = wl_ekpo-traid."CARRIER CODE
*  wl_xkomdlgn-lifex = wl_ekpo-lifex."External ID
*  wl_xkomdlgn-bolnr = wl_ekpo-bolnr."Bill Of Lading
*  wl_xkomdlgn-xabln = wl_ekpo-xabln."Goods Receipt/Issue Slip Number
*
    wl_xkomdlgn-vgbel = wl_ekpo-ebeln.
    wl_xkomdlgn-vgpos = wl_ekpo-ebelp.
    wl_xkomdlgn-lfart = 'ZLB'.
    wl_xkomdlgn-vgtyp = 'V'.
    wl_xkomdlgn-kzazu = 'X'.
***  wl_xkomdlgn-knttp = wl_ekpo-knttp.
*  wl_xkomdlgn-sobkz = wl_ekpo-sobkz. " no funciona, lo dejamos en blanco.
    CLEAR wl_xkomdlgn-sobkz.

    IF wl_ekpo-matnr IS INITIAL OR wl_ekpo-pstyp = '6'.
      wl_xkomdlgn-posar = 'B'.
    ENDIF.
***  wl_xkomdlgn-ematn = wl_ekpo-ematn.
    wl_xkomdlgn-mfrnr = wl_ekpo-mfrnr.
    wl_xkomdlgn-mfrpn = wl_ekpo-mfrpn.
    wl_xkomdlgn-emnfr = wl_ekpo-emnfr.
***  wl_xkomdlgn-cuobj = wl_ekpo-cuobj.
    wl_xkomdlgn-uebto = wl_ekpo-uebto.
    wl_xkomdlgn-untto = wl_ekpo-untto.
    wl_xkomdlgn-uebtk = wl_ekpo-uebtk.
*wl_xkomdlgn-lichn = p_licha.
***wl_xkomdlgn-charg = p_charg.
***  wl_xkomdlgn-bwtar = wl_ekpo-bwtar.
    wl_xkomdlgn-kdmat = wl_ekpo-idnlf.
***  wl_xkomdlgn-arktx = wl_ekpo-txz01.
    wl_xkomdlgn-mfrgr = wl_ekpo-mfrgr.
****  wl_xkomdlgn-gewei = wl_ekpo-gewei.
****  wl_xkomdlgn-voleh = wl_ekpo-voleh.
****  wl_xkomdlgn-ntgew = wl_ekpo-ntgew * wl_xkomdlgn-lfimg.
****  wl_xkomdlgn-brgew = wl_ekpo-brgew * wl_xkomdlgn-lfimg.
****  wl_xkomdlgn-volum = wl_ekpo-volum * wl_xkomdlgn-lfimg.
    wl_xkomdlgn-ean11 = wl_ekpo-ean11.
*  wl_xkomdlgn-podrel = t163l-podrel.
    wl_xkomdlgn-aktnr = wl_ekpo-aktnr.
    wl_xkomdlgn-abeln = wl_ekpo-abeln.
    wl_xkomdlgn-abelp = wl_ekpo-abelp.
*  xkomdlgn-ltssf = only SORT criteria IN vl31n
    wl_xkomdlgn-aurel = wl_ekpo-aurel.
    wl_xkomdlgn-idnlf = wl_ekpo-idnlf.
***  wl_xkomdlgn-matkl = wl_ekpo-matkl.

    CLEAR wl_xkomdlgn-grkor.
    CLEAR wl_xkomdlgn-kmpmg.
    CLEAR wl_xkomdlgn-uepos.
    CLEAR wl_xkomdlgn-uepvw.                                "549736

    IF wl_ekpo-pstyp EQ '2'.
      wl_xkomdlgn-sobkz = 'K'.
    ENDIF.

***  IF wl_ekpo-sobkz EQ 'E' OR wl_ekpo-sobkz EQ 'Q'.
***
***    DATA: tl_xekkn TYPE TABLE OF ekkn,
***          wl_xekkn LIKE LINE OF tl_xekkn.
***
***    CALL FUNCTION 'MMPUR_EKKN_READ_EBELN_EBELP'
***      EXPORTING
***        pi_ebeln             = wl_ekpo-ebeln
***        pi_ebelp             = wl_ekpo-ebelp
***        pi_bypassing_buffer  = ' '
***        pi_refresh_buffer    = 'X'
***      TABLES
***        pto_ekkn_po          = tl_xekkn
***      EXCEPTIONS
***        no_records_requested = 1
***        OTHERS               = 2.
***
***    IF sy-subrc EQ 0.
***      READ TABLE tl_xekkn INTO wl_xekkn INDEX 1.
***    ENDIF.
***    IF sy-subrc EQ 0.
***      wl_xkomdlgn-ps_psp_pnr = wl_xekkn-ps_psp_pnr.
***      wl_xkomdlgn-vbelv = wl_xekkn-vbeln.
***      wl_xkomdlgn-posnv = wl_xekkn-vbelp.
***    ENDIF.
***  ENDIF.


    wl_xkomdlgn-lgnum = '200'.
    wl_xkomdlgn-lgtyp = '916'.
    CLEAR wl_xkomdlgn-lgpla.
    wl_xkomdlgn-kzdlg = 'X'.
    CLEAR wl_xkomdlgn-flgwm.
    wl_xkomdlgn-bwlvs = '601'.

    "
    " Calculo de la ruta
    "
    SELECT SINGLE *
      FROM kna1
      INTO @DATA(wl_kna1)
      WHERE kunnr = @vp_kunnr.
    IF sy-subrc = 0.
      SELECT SINGLE *
        FROM knvv
        INTO @DATA(wl_knvv)
        WHERE kunnr = @vp_kunnr AND
              vkorg = @wl_xkomdlgn-vkorg AND
              vtweg = @wl_xkomdlgn-vtweg AND
              spart = @wl_xkomdlgn-spart.
    ENDIF.
    IF sy-subrc = 0.
      SELECT SINGLE *
        FROM tvst
        INTO @DATA(wl_tvst)
        WHERE vstel = @vp_vstel.
    ENDIF.
    IF sy-subrc = 0.
      SELECT SINGLE *
        FROM mara
        INTO @DATA(wl_mara)
        WHERE matnr = @wl_xkomdlgn-matnr.
    ENDIF.
    IF sy-subrc = 0.
      SELECT SINGLE *
        FROM trolz
        INTO @DATA(wl_trolz)
        WHERE azone = @wl_tvst-azone AND
              vsbed = @wl_knvv-vsbed AND
              tragr = @wl_mara-tragr AND
              lzone = @wl_kna1-lzone.
    ENDIF.
    IF sy-subrc = 0.
      wl_xkomdlgn-route = wl_trolz-route.
    ENDIF.
    IF wl_xkomdlgn-route IS INITIAL.
      wl_xkomdlgn-route = 'Z00000'.
    ENDIF.


    APPEND wl_xkomdlgn TO tl_xkomdlgn.
  ENDLOOP.

  CALL FUNCTION 'GN_DELIVERY_CREATE'
    EXPORTING
      no_commit           = 'X'
      vbsk_i              = wl_xvbsk
      if_no_deque         = 'X'
      if_mass_read_mat_sw = 'X'
      vbls_pos_rueck      = 'X'
    TABLES
      xkomdlgn            = tl_xkomdlgn
      xvbfs               = tl_xvbfs
      xvbls               = tl_xvbls
      xxlips              = tl_xxlips.

  CLEAR vp_deliv_numb.
  CLEAR tp_return.

  LOOP AT tl_xvbfs ASSIGNING FIELD-SYMBOL(<fs_xvbfs>).
    APPEND INITIAL LINE TO tp_return ASSIGNING FIELD-SYMBOL(<fs_return>).
    MOVE-CORRESPONDING <fs_xvbfs> TO <fs_return>.
    <fs_return>-type = <fs_xvbfs>-msgty.
    <fs_return>-id = <fs_xvbfs>-msgid.
    <fs_return>-number = <fs_xvbfs>-msgno.
*<fs_return>-MESSAGE = <fs_xvbfs>-
    <fs_return>-message_v1 = <fs_xvbfs>-msgv1.
    <fs_return>-message_v2 = <fs_xvbfs>-msgv2.
    <fs_return>-message_v3 = <fs_xvbfs>-msgv3.
    <fs_return>-message_v4 = <fs_xvbfs>-msgv4.

  ENDLOOP.

  IF vp_deliv_numb IS INITIAL.
    READ TABLE tl_xvbls ASSIGNING FIELD-SYMBOL(<fs_xvbls>) INDEX 1.
    IF sy-subrc = 0.
      vp_deliv_numb = <fs_xvbls>-vbeln_lif.
    ENDIF.
  ENDIF.

*  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*    EXPORTING
*      wait = 'X'.




ENDFUNCTION.
