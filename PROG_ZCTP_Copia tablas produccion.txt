*&---------------------------------------------------------------------*
*& Report  ZMMB0015
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT  zctp.

TABLES: vbrk, vbrp, kna1, vbak, mara, likp, adrc, lfa1, ekko, eban, eina, caufv, afko, bkpf, vekp, resb,
        mkpf, mseg, edidc, crhd, mcha, kona.

DATA: v_sistema TYPE char40 VALUE zcl_c=>rfc_produccion,
      l_string  TYPE string,
      l_string2 TYPE string.

DEFINE get_tabla.
  if l_string is initial. message 'Error clave vacía' type 'E'. endif.
  zcl_ap_sgpi=>text( texto = &1 texto2 = l_string ).
  call function 'Z_RFC_GET_TABLA'
    exporting
      tabla      = &1
      clave      = l_string
      actualizar = 'X'
      sistema    = v_sistema.
END-OF-DEFINITION.

DEFINE get_tabla_clave.
  if l_string is initial. message 'Error clave vacía' type 'E'. endif.
  zcl_ap_sgpi=>text( texto = &1 texto2 = l_string ).
  call function 'Z_RFC_GET_TABLA'
    exporting
      tabla       = &1
      clave       = l_string
      campo_clave = &2
      actualizar  = 'X'
      sistema     = v_sistema.
END-OF-DEFINITION.

DEFINE get_tabla_clave_string2.
  if l_string is initial. message 'Error clave vacía' type 'E'. endif.
  zcl_ap_sgpi=>text( texto = &1 texto2 = l_string ).
  call function 'Z_RFC_GET_TABLA'
    exporting
      tabla       = &1
      clave       = l_string2
      campo_clave = &2
      actualizar  = 'X'
      sistema     = v_sistema.
END-OF-DEFINITION.

DEFINE get_tabla2.
  if l_string is initial. message 'Error clave vacía' type 'E'. endif.
  zcl_ap_sgpi=>text( texto = &1 texto2 = l_string  texto3 = l_string2 ).
  call function 'Z_RFC_GET_TABLA'
    exporting
      tabla      = &1
      clave      = l_string
      clave2     = l_string2
      actualizar = 'X'
      sistema    = v_sistema.
END-OF-DEFINITION.

DEFINE get_tabla_inicio_clave.
  if l_string is initial. message 'Error clave vacía' type 'E'. endif.
  zcl_ap_sgpi=>text( texto = &1 texto2 = l_string ).
  call function 'Z_RFC_GET_TABLA'
    exporting
      tabla        = &1
      clave        = l_string
      inicio_clave = '%'
      campo_clave  = &2
      actualizar   = 'X'
      sistema      = v_sistema.
END-OF-DEFINITION.


PARAMETERS: p_pedsd LIKE vbak-vbeln.
PARAMETERS: p_flujo AS CHECKBOX,
            p_reini AS CHECKBOX,
            p_anti  AS CHECKBOX.

PARAMETERS: p_entre LIKE likp-vbeln.

PARAMETERS: p_factsd LIKE vbrk-vbeln.

PARAMETERS: p_bukrs LIKE bkpf-bukrs,
            p_belnr LIKE bkpf-belnr,
            p_gjahr LIKE bkpf-gjahr.

PARAMETERS: p_ebeln LIKE ekko-ebeln,
            p_aufnr LIKE caufv-aufnr.

PARAMETERS: p_kunnr LIKE kna1-kunnr,
            p_lifnr LIKE lfa1-lifnr,
            p_matnr LIKE mara-matnr,
            p_charg LIKE mcha-charg.

PARAMETERS: p_exidv LIKE vekp-exidv.

PARAMETERS: p_laufd LIKE reguh-laufd,
            p_laufi LIKE reguh-laufi.

PARAMETERS: p_mblnr LIKE mkpf-mblnr,
            p_mjahr LIKE mkpf-mjahr.

PARAMETERS: p_docnu LIKE edidc-docnum.

PARAMETERS: p_recur LIKE crhd-arbpl.
PARAMETERS: p_adrnr LIKE lfa1-adrnr.

PARAMETERS: p_tknum LIKE vttk-tknum,
            p_knuma LIKE kona-knuma.

SELECTION-SCREEN SKIP.
PARAMETERS: p_fixa AS CHECKBOX.

SELECTION-SCREEN SKIP.
PARAMETERS: p_sobre AS CHECKBOX.
SELECTION-SCREEN SKIP.
PARAMETERS: p_prd RADIOBUTTON GROUP sis,
            p_qas RADIOBUTTON GROUP sis.

INITIALIZATION.

AT SELECTION-SCREEN.
  IF p_prd = 'X'.
    v_sistema = zcl_c=>rfc_produccion.
  ELSEIF p_qas = 'X'.
    v_sistema = zcl_c=>rfc_calidad.
  ENDIF.

  IF sy-sysid = zcl_c=>entorno_produccion.
    MESSAGE 'Este programa no se puede utilizar en producción' TYPE 'E'.
  ENDIF.




START-OF-SELECTION.

  IF NOT p_pedsd IS INITIAL.
    PERFORM copia_pedido USING p_pedsd p_flujo p_sobre p_anti p_reini.
  ENDIF.

  IF NOT p_entre IS INITIAL.
    PERFORM copia_entrega USING p_entre.
  ENDIF.

  IF NOT p_factsd IS INITIAL.
    PERFORM copia_factura USING p_factsd.
  ENDIF.

  IF NOT p_belnr IS INITIAL.
    PERFORM copia_doc_fi USING p_bukrs p_belnr p_gjahr.
  ENDIF.

  IF NOT p_kunnr IS INITIAL.
    PERFORM copia_cliente USING p_kunnr.
  ENDIF.

  IF NOT p_lifnr IS INITIAL.
    PERFORM copia_proveedor USING p_lifnr.
  ENDIF.

  IF NOT p_matnr IS INITIAL.
    PERFORM copia_material USING p_matnr.
  ENDIF.

  IF NOT p_charg IS INITIAL.
    PERFORM copia_lote USING p_charg.
  ENDIF.


  IF NOT p_ebeln IS INITIAL.
    PERFORM copia_pedido_mm USING p_ebeln.
  ENDIF.

  IF NOT p_aufnr IS INITIAL.
    PERFORM copia_orden USING p_aufnr.
  ENDIF.

  IF NOT p_exidv IS INITIAL.
    PERFORM copiar_caja USING p_exidv.
  ENDIF.

  IF NOT p_laufd IS INITIAL AND NOT p_laufi IS INITIAL.
    PERFORM copiar_pago USING p_laufd p_laufi.
  ENDIF.

  IF NOT p_mblnr IS INITIAL AND NOT p_mjahr IS INITIAL.
    PERFORM copiar_docmat USING p_mblnr p_mjahr.
  ENDIF.

  IF NOT p_docnu IS INITIAL.
    PERFORM copiar_idoc USING p_docnu.
  ENDIF.

  IF NOT p_fixa IS INITIAL.
    PERFORM corregir_direcciones.
  ENDIF.

  IF NOT p_adrnr IS INITIAL.
    PERFORM copia_adrc USING p_adrnr.
  ENDIF.

  IF NOT p_tknum IS INITIAL.
    PERFORM copia_transporte USING p_tknum.
  ENDIF.



*&---------------------------------------------------------------------*
*&      Form  copia_pedido
*&---------------------------------------------------------------------*
*       Copia pedido sd
FORM copia_pedido USING p_vbeln p_flujo p_sobre p_anti p_reini.
  DATA: i_likp TYPE TABLE OF likp WITH HEADER LINE,
        i_vbpa TYPE TABLE OF vbpa WITH HEADER LINE.

  l_string = p_vbeln.

  get_tabla: 'VBAK', 'VBAP', 'VBKD', 'VBUK', 'VBUP', 'VBPA', 'VBEP'.

  SELECT SINGLE * FROM vbak
   WHERE vbeln = p_vbeln.
  IF sy-subrc NE 0.
    MESSAGE 'Error al copiar la pedido' TYPE 'E'.
  ENDIF.

  get_tabla_clave: 'NAST' 'OBJKY'.

  get_tabla_inicio_clave: 'STXH' 'TDNAME',
                          'STXL' 'TDNAME'.


  IF p_flujo = 'X'.
    get_tabla_clave: 'VBFA' 'VBELN',
                     'MSKA' 'VBELN'.
  ENDIF.

  IF p_reini = 'X'.
    UPDATE vbuk
      SET bestk = 'C'
          lfstk = 'A'
          lfgsk = 'A'
          abstk = 'A'
          gbstk = 'A'
     WHERE vbeln = p_vbeln.

    UPDATE vbup
      SET besta = 'C'
          lfsta = 'A'
          lfgsa = 'A'
          absta = 'A'
          gbsta = 'A'
          fksaa = 'A'
     WHERE vbeln = p_vbeln.
  ENDIF.

  IF NOT vbak-knumv IS INITIAL.
    l_string = vbak-knumv.
    get_tabla: 'KONV'.
  ENDIF.

  CONCATENATE 'VB' p_vbeln INTO l_string.
  get_tabla_inicio_clave: 'JEST' 'OBJNR',                          'JSTO' 'OBJNR'.

  DATA i_vbap TYPE TABLE OF vbap WITH HEADER LINE.
  SELECT * FROM vbap
   INTO TABLE i_vbap
  WHERE vbeln = p_vbeln.

  LOOP AT i_vbap.
    PERFORM copia_material USING i_vbap-matnr.
  ENDLOOP.

  DEFINE get_tabla_pa.
    get_tabla_clave &1 'PAOBJNR'.
  END-OF-DEFINITION.


  PERFORM copia_intercolutores USING p_vbeln.

  IF p_flujo = 'X'.
    DATA i_vbfa TYPE TABLE OF vbfa WITH HEADER LINE.
    SELECT * FROM vbfa
      INTO TABLE i_vbfa
     WHERE vbeln = p_vbeln.

    LOOP AT i_vbfa.
      IF i_vbfa-vbtyp_v = 'C'.
      ELSEIF i_vbfa-vbtyp_v = 'J'.
        i_likp-vbeln = i_vbfa-vbelv.
        COLLECT i_likp.
      ENDIF.
    ENDLOOP.

    LOOP AT i_likp.
      SELECT SINGLE * FROM likp
       WHERE vbeln = i_likp-vbeln.
      IF sy-subrc NE 0 OR p_sobre = 'X'.
        PERFORM copia_entrega USING i_likp-vbeln.
      ENDIF.
    ENDLOOP.

  ENDIF.

  DEFINE get_tabla_clave_fi.
    get_tabla_clave_string2: &1 'BELNR'.
  END-OF-DEFINITION.

  DATA: i_vbrp TYPE TABLE OF vbrp WITH HEADER LINE.

  IF p_anti = 'X'.
    l_string = p_vbeln.

    get_tabla_clave: 'BSID' 'VBEL2',
                     'BSAD' 'VBEL2'.

    DATA i_bsid TYPE TABLE OF bsid WITH HEADER LINE.
    SELECT * FROM bsid
      INTO TABLE i_bsid
     WHERE vbel2 = l_string.

    SELECT * FROM bsad
      APPENDING CORRESPONDING FIELDS OF TABLE i_bsid
     WHERE vbel2 = l_string.

    LOOP AT i_bsid.
      IF ( i_bsid-blart = 'DR' OR i_bsid-blart = 'NL' ) AND p_reini = 'X'.
        IF i_bsid-augbl IS INITIAL.
          DELETE FROM bsid
           WHERE bukrs = i_bsid-bukrs
             AND kunnr = i_bsid-kunnr
             AND belnr = i_bsid-belnr
             AND gjahr = i_bsid-gjahr.
        ELSE.
          DELETE FROM bsad
           WHERE bukrs = i_bsid-bukrs
             AND kunnr = i_bsid-kunnr
             AND belnr = i_bsid-belnr
             AND gjahr = i_bsid-gjahr.
        ENDIF.
      ELSE.
        PERFORM copia_doc_fi USING i_bsid-bukrs i_bsid-belnr i_bsid-gjahr.
      ENDIF.
    ENDLOOP.


  ENDIF.
ENDFORM.                    "copia_pedido

*&---------------------------------------------------------------------*
*&      Form  copia_factura
*&---------------------------------------------------------------------*
FORM copia_factura USING p_vbeln.
  DATA: i_vbak TYPE TABLE OF vbak WITH HEADER LINE,
        i_likp TYPE TABLE OF likp WITH HEADER LINE.
  l_string = p_vbeln.

  get_tabla: 'VBRK', 'VBRP', 'VBPA', 'VBFA', 'VBUK', 'VBUP'.

  SELECT SINGLE * FROM vbrk
   WHERE vbeln = p_vbeln.
  IF sy-subrc NE 0.
    MESSAGE 'Error al copiar la factura' TYPE 'E'.
  ENDIF.


  get_tabla_clave: 'NAST' 'OBJKY',
                   'VBFA' 'VBELN'.

  get_tabla_inicio_clave: 'STXH' 'TDNAME',
                          'STXL' 'TDNAME'.

  get_tabla_clave: 'NAST' 'OBJKY'.

  get_tabla_clave: 'BKPF' 'AWKEY'.

  SELECT SINGLE * FROM bkpf
   WHERE awtyp = 'VBRK'
     AND awkey = p_vbeln.
  IF sy-subrc = 0.
    PERFORM copia_doc_fi USING bkpf-bukrs bkpf-belnr bkpf-gjahr.
  ENDIF.

  IF NOT vbrk-knumv IS INITIAL.
    l_string = vbrk-knumv.
    get_tabla: 'KONV'.
  ENDIF.

  PERFORM copia_intercolutores USING p_vbeln.

  DATA i_vbfa TYPE TABLE OF vbfa WITH HEADER LINE.
  SELECT * FROM vbfa
    INTO TABLE i_vbfa
   WHERE vbeln = p_vbeln.

  LOOP AT i_vbfa.
    l_string = i_vbfa-vbelv.
    IF i_vbfa-vbtyp_v = 'C'.
      i_vbak-vbeln = i_vbfa-vbelv.
      COLLECT i_vbak.
    ELSEIF i_vbfa-vbtyp_v = 'J'.
      i_likp-vbeln = i_vbfa-vbelv.
      COLLECT i_likp..
    ENDIF.
  ENDLOOP.
  LOOP AT i_vbak.
    SELECT SINGLE * FROM vbak
     WHERE vbeln = i_vbak-vbeln.
    IF sy-subrc NE 0 OR p_sobre = 'X'.
      PERFORM copia_pedido USING i_vbak-vbeln 'X' p_sobre 'X' ''.
    ENDIF.
  ENDLOOP.
  LOOP AT i_likp.
    SELECT SINGLE * FROM likp
     WHERE vbeln = i_likp-vbeln.
    IF sy-subrc NE 0 OR p_sobre = 'X'.
      PERFORM copia_entrega USING i_likp-vbeln.
    ENDIF.
  ENDLOOP.
ENDFORM.                    "copia_factura


*&---------------------------------------------------------------------*
*&      Form  copia_entrega
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_VBELN    text
*----------------------------------------------------------------------*
FORM copia_entrega USING p_vbeln.
  l_string = p_vbeln.

  get_tabla: 'LIKP', 'LIPS', 'VBUK', 'VBUP', 'VBPA'.

  SELECT SINGLE * FROM likp
   WHERE vbeln = p_vbeln.
  IF sy-subrc NE 0.
    MESSAGE 'Error al copiar entrega' TYPE 'E'.
  ENDIF.


  get_tabla_clave: 'NAST' 'OBJKY',
                   'VBFA' 'VBELN',
                   'VBFA' 'VBELV',
                   'VEPO' 'VBELN',
                   'VEKP' 'VPOBJKEY',
                   'EKKN' 'VBELN'.



  PERFORM copia_intercolutores USING p_vbeln.

  DATA i_lips TYPE TABLE OF lips WITH HEADER LINE.
  SELECT * FROM lips
    INTO TABLE i_lips
   WHERE vbeln = p_vbeln.

* Para pruebas monitor
  IF p_reini = 'X'.
    UPDATE vbuk
      SET wbstk = 'A'
     WHERE vbeln = p_vbeln.

    UPDATE vbup
      SET kosta = 'A'
          lvsta = 'A'
     WHERE vbeln = p_vbeln.

    DELETE FROM vbfa WHERE vbeln = p_vbeln.
  ENDIF.

  DATA i_vekp TYPE TABLE OF vekp WITH HEADER LINE.
  SELECT * FROM vekp
    INTO TABLE i_vekp
   WHERE vpobjkey = p_vbeln.

  DEFINE get_tabla_lote.
    get_tabla_clave &1 'CHARG'.
  END-OF-DEFINITION.

  LOOP AT i_lips WHERE NOT charg IS INITIAL.
    get_tabla_lote: 'MCHA', 'MCHB', 'MCH1'.
  ENDLOOP.

  CONCATENATE 'VB' p_vbeln INTO l_string.
  get_tabla_inicio_clave 'JSTO' 'OBJNR'.


  SELECT * FROM vekp
    INTO TABLE i_vekp
   WHERE vpobjkey = p_vbeln.

  LOOP AT i_vekp.
    PERFORM copiar_caja USING i_vekp-exidv.
  ENDLOOP.

ENDFORM.                    "copia_entrega

*&---------------------------------------------------------------------*
*&      Form  copia_doc_fi
*&---------------------------------------------------------------------*

FORM copia_doc_fi USING p_bukrs p_belnr p_gjahr.

  l_string = p_bukrs.
  l_string2 = p_belnr.
  get_tabla2:  'BKPF', 'BSEG', 'BSET'.
  get_tabla_clave_fi: 'BSIS', 'BSIK', 'BSAS', 'BSAK', 'BSID'.

  CONCATENATE p_bukrs p_belnr INTO l_string.
  get_tabla_inicio_clave: 'STXH' 'TDNAME',
                          'STXL' 'TDNAME'.


ENDFORM.                    "copia_doc_fi

*&---------------------------------------------------------------------*
*&      Form  copia_intercolutores
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_VBELN    text
*----------------------------------------------------------------------*
FORM copia_intercolutores USING p_vbeln.
  DATA i_vbpa TYPE TABLE OF vbpa WITH HEADER LINE.

  SELECT * FROM vbpa
    INTO TABLE i_vbpa
   WHERE vbeln = p_vbeln.
  LOOP AT i_vbpa WHERE kunnr NE ''.
    PERFORM copia_cliente USING i_vbpa-kunnr.
  ENDLOOP.

  LOOP AT i_vbpa WHERE adrnr NE ''.
    l_string = i_vbpa-adrnr.
    get_tabla_clave: 'ADRC' 'ADDRNUMBER'.
  ENDLOOP.


ENDFORM.                    "copia_intercolutores

*&---------------------------------------------------------------------*
*&      Form  copia_cliente
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_KUNNR    text
*----------------------------------------------------------------------*
FORM copia_cliente USING p_kunnr.

  l_string = p_kunnr.

  SELECT SINGLE * FROM kna1
   WHERE kunnr = p_kunnr.
  IF sy-subrc NE 0 OR p_sobre = 'X'.
    get_tabla: 'KNA1', 'KNB1', 'KNAS', 'KNVV', 'KNKK', 'KNVP'.

    SELECT SINGLE * FROM adrc
     WHERE addrnumber = kna1-adrnr.
    IF sy-subrc NE 0 OR p_sobre = 'X'.
      IF NOT kna1-adrnr IS INITIAL.
        l_string = kna1-adrnr.
        get_tabla_clave: 'ADRC' 'ADDRNUMBER'.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    "copia_cliente

*&---------------------------------------------------------------------*
*&      Form  copia_proveedor
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LIFNR    text
*----------------------------------------------------------------------*
FORM copia_proveedor USING p_lifnr.

  l_string = p_lifnr.

  SELECT SINGLE * FROM lfa1
   WHERE lifnr = p_lifnr.
  IF sy-subrc NE 0 OR p_sobre = 'X'.
    get_tabla: 'LFA1', 'LFB1', 'LFM1', 'LFBK'.

    SELECT SINGLE * FROM adrc
     WHERE addrnumber = lfa1-adrnr.
    IF sy-subrc NE 0 OR p_sobre = 'X'.
      IF NOT lfa1-adrnr IS INITIAL.
        l_string = lfa1-adrnr.
        get_tabla_clave: 'ADRC' 'ADDRNUMBER',
                         'ADR2' 'ADDRNUMBER',
                         'ADR4' 'ADDRNUMBER',
                         'ADR6' 'ADDRNUMBER'.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    "copia_proveedor
*&---------------------------------------------------------------------*
*&      Form  copia_material
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_MATNR    text
*----------------------------------------------------------------------*
FORM copia_material USING p_matnr.

  SELECT SINGLE * FROM mara
   WHERE matnr = p_matnr.
  IF sy-subrc NE 0 OR p_sobre = 'X'.
    l_string = p_matnr.
    get_tabla: 'MARA', 'MAKT', 'MARC', 'MARD', 'MBEW', 'MLGN', 'MVKE', 'MLAN', 'MEAN', 'MARM'.
  ENDIF.

  IF p_reini = 'X'.
    IF zcl_ap_popup=>confirmar( '¿Seguro de querer copiar HUs?' ).
      l_string = p_matnr.
      get_tabla_clave: 'LQUA' 'MATNR',
                       'MCHA' 'MATNR',
                       'MCHB' 'MATNR',
                       'MCH1' 'MATNR'.
    ENDIF.
  ENDIF.

ENDFORM.                    "copia_material

FORM copia_lote USING p_charg.

  DEFINE get_tabla_lote.
    get_tabla_clave &1 'CHARG'.
  END-OF-DEFINITION.

  SELECT SINGLE * FROM mcha
    INTO mcha
   WHERE charg = p_charg.
  IF sy-subrc NE 0 OR p_sobre = 'X'.
    l_string = p_charg.
    get_tabla_lote: 'MCHA', 'MCHB', 'MCH1'.
  ENDIF.

ENDFORM.                    "copia_material

*&---------------------------------------------------------------------*
*&      Form  copia_pedido_mm
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_EBELN    text
*----------------------------------------------------------------------*
FORM copia_pedido_mm USING p_ebeln.
  DATA: i_banfn TYPE TABLE OF string WITH HEADER LINE,
        i_infnr TYPE TABLE OF string WITH HEADER LINE,
        i_matnr TYPE TABLE OF string WITH HEADER LINE.

  l_string = p_ebeln.
  get_tabla: 'EKKO', 'EKPO', 'EKKN', 'EKET', 'EKBE', 'EKBZ', 'EIPA'.

  SELECT SINGLE * FROM ekko
   WHERE ebeln = p_ebeln.
  IF sy-subrc NE 0.
    MESSAGE 'Error al copiar la pedido' TYPE 'E'.
  ENDIF.

  get_tabla_clave: 'NAST' 'OBJKY'.
  get_tabla_inicio_clave: 'STXH' 'TDNAME',
                          'STXL' 'TDNAME'.

  PERFORM copia_proveedor USING ekko-lifnr.

  IF NOT ekko-knumv IS INITIAL.
    l_string = ekko-knumv.
    get_tabla: 'KONV'.
  ENDIF.

  SELECT banfn FROM ekpo
    INTO i_banfn
   WHERE ebeln = p_ebeln
     AND banfn NE ''.
    COLLECT i_banfn.
  ENDSELECT.

  LOOP AT i_banfn.
    SELECT SINGLE * FROM eban
     WHERE banfn = i_banfn.
    IF sy-subrc NE 0.
      l_string = i_banfn.
      get_tabla 'EBAN'.
    ENDIF.
  ENDLOOP.

  SELECT infnr FROM ekpo
    INTO i_infnr
   WHERE ebeln = p_ebeln
     AND infnr NE ''.
    COLLECT i_infnr.
  ENDSELECT.

  LOOP AT i_infnr.
    SELECT SINGLE * FROM eina
     WHERE infnr = i_infnr.
    IF sy-subrc NE 0.
      l_string = i_infnr.
      get_tabla: 'EINA', 'EINE'.
    ENDIF.
  ENDLOOP.

  SELECT matnr FROM ekpo
    INTO i_matnr
   WHERE ebeln = p_ebeln
     AND matnr NE ''.
    COLLECT i_matnr.
  ENDSELECT.


  LOOP AT i_matnr.
    PERFORM copia_material USING i_matnr.
  ENDLOOP.
ENDFORM.                    "copia_pedido_mm

*&---------------------------------------------------------------------*
*&      Form  orden_prov
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_AUFNR    text
*----------------------------------------------------------------------*
FORM copia_orden USING p_aufnr.
  DATA: i_matnr TYPE TABLE OF string WITH HEADER LINE,
        i_jest  TYPE TABLE OF jest WITH HEADER LINE.

  l_string = p_aufnr.


  get_tabla_clave 'AUFM' 'AUFNR'.

  SELECT SINGLE * FROM afko
   WHERE aufnr = p_aufnr.
  IF sy-subrc NE 0 OR p_sobre = 'X'.

    get_tabla: 'AFKO', 'AFPO', 'AUFK'.
    get_tabla_clave 'RESB' 'AUFNR'.

    CONCATENATE 'OR' p_aufnr INTO l_string.
    get_tabla: 'JSTO', 'JEST'.

    CONCATENATE 'OV' p_aufnr  INTO l_string.
*    get_tabla_inicio_clave: 'JSTO' 'AUFNR',
*                            'JEST' 'AUFNR'.

    SELECT SINGLE * FROM afko
     WHERE aufnr = p_aufnr.
    IF sy-subrc = 0.
      l_string = afko-aufpl.
      get_tabla: 'AFVC', 'AFVV', 'AFVU', 'AFFL'.

      CONCATENATE 'OV' afko-aufpl INTO l_string.
      get_tabla_inicio_clave: 'JSTO' 'OBJNR',
                              'JEST' 'OBJNR'.

    ENDIF.

    SELECT matnr FROM afpo
      INTO i_matnr
     WHERE aufnr = p_aufnr
       AND matnr NE ''.
      COLLECT i_matnr.
    ENDSELECT.

    SELECT rsnum rspos matnr FROM resb
      INTO (resb-rsnum, resb-rspos, i_matnr)
     WHERE aufnr = p_aufnr
       AND matnr NE ''.
      COLLECT i_matnr.
      CONCATENATE 'OK' resb-rsnum resb-rspos INTO i_jest-objnr.
      COLLECT i_jest.
    ENDSELECT.

    LOOP AT i_matnr.
      PERFORM copia_material USING i_matnr.
    ENDLOOP.

    LOOP AT i_jest.
      l_string = i_jest-objnr.
      get_tabla: 'JEST', 'JSTO'.
    ENDLOOP.
  ENDIF.

ENDFORM.                    "copia_proveedor

*&---------------------------------------------------------------------*
*&      Form  copiar_caja
*&---------------------------------------------------------------------*
FORM copiar_caja USING p_exidv.

  l_string = p_exidv.
  get_tabla_clave 'VEKP' 'EXIDV'.

  SELECT SINGLE * FROM vekp
   WHERE exidv = p_exidv.

  CHECK sy-subrc = 0.

  l_string = vekp-venum.
  get_tabla: 'VEPO', 'LEIN'.

  CONCATENATE 'HU' vekp-venum INTO l_string.
  get_tabla: 'JSTO', 'JEST', 'HUSSTAT'.

ENDFORM.                    "copiar_caja

*&---------------------------------------------------------------------*
*&      Form  copiar_pago
*&---------------------------------------------------------------------*
FORM copiar_pago USING p_laufd p_laufi.

  l_string = p_laufd.
  l_string2 = p_laufi.
  get_tabla2:  'REGUH', 'REGUP', 'REGUV'.

ENDFORM.                    "copia_doc_fi

*&---------------------------------------------------------------------*
*&      Form  copiar_docmat
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_MBLNR    text
*      -->P_MJAHR    text
*----------------------------------------------------------------------*
FORM copiar_docmat USING p_mblnr p_mjahr.

  l_string = p_mblnr.
  l_string2 = p_mjahr.
  get_tabla2:  'MKPF', 'MSEG'.

  CONCATENATE p_mblnr p_mjahr '0001' INTO l_string.
  get_tabla_clave: 'NAST' 'OBJKY'.

  CONCATENATE p_mblnr p_mjahr '0002' INTO l_string.
  get_tabla_clave: 'NAST' 'OBJKY'.

ENDFORM.                    "copiar_docmat

*&---------------------------------------------------------------------*
*&      Form  copiar_idoc
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_DOCNUM   text
*----------------------------------------------------------------------*
FORM copiar_idoc USING p_docnum.

  l_string = p_docnum.
  get_tabla2:  'EDIDC', 'EDID4'.

ENDFORM.                    "copiar_idoc

*&---------------------------------------------------------------------*
*&      Form  corregir_direcciones
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM corregir_direcciones.
  DATA: i_adrnr   TYPE TABLE OF adrnr WITH HEADER LINE,
        l_cambios.

  SELECT DISTINCT adrnr FROM lfa1
    INTO TABLE i_adrnr
   WHERE adrnr NE ''.

  SELECT DISTINCT adrnr FROM kna1
    APPENDING TABLE i_adrnr
   WHERE adrnr NE ''.


  LOOP AT i_adrnr.
    SELECT SINGLE * FROM adrc
     WHERE addrnumber = i_adrnr.
    IF sy-subrc NE 0.
      l_string = i_adrnr.
      get_tabla_clave: 'ADRC' 'ADDRNUMBER'.
      l_cambios = 'X'.
    ENDIF.
  ENDLOOP.

  IF l_cambios = 'X'.
    SUBMIT z_fix_address WITH testrun = ''.
  ENDIF.

ENDFORM.                    "corregir_direcciones

FORM copia_adrc USING p_adrnr.

  CHECK NOT p_adrnr IS INITIAL.

  SELECT SINGLE * FROM adrc
   WHERE addrnumber = p_adrnr.
  IF sy-subrc NE 0 OR p_sobre = 'X'.
    IF NOT p_adrnr IS INITIAL.
      l_string = p_adrnr.
      get_tabla_clave: 'ADRC' 'ADDRNUMBER',
                       'ADR2' 'ADDRNUMBER',
                       'ADR4' 'ADDRNUMBER',
                       'ADR6' 'ADDRNUMBER'.
    ENDIF.
  ENDIF.
ENDFORM.                    "copia_adrc

FORM copia_transporte USING p_tknum.

  l_string = p_tknum.
  get_tabla:  'VTTK', 'VTTP', 'VTTS', 'VTSP', 'VTFA'.

  get_tabla_clave: 'NAST' 'OBJKY'.

  get_tabla_inicio_clave: 'STXH' 'TDNAME',
                          'STXL' 'TDNAME'.

  DATA i_vttp TYPE TABLE OF vttp WITH HEADER LINE.
  SELECT * FROM vttp
    INTO TABLE i_vttp
   WHERE tknum = p_tknum.

  LOOP AT i_vttp.
    SELECT SINGLE vbeln FROM likp
      INTO i_vttp-vbeln
     WHERE vbeln = i_vttp-vbeln.
    IF sy-subrc NE 0.
      PERFORM copia_entrega USING i_vttp-vbeln.
    ENDIF.
  ENDLOOP.

ENDFORM.                    "copiar_idoc
