class ZCL_GOS definition
  public
  final
  create public .

public section.

  class-methods URLS_GOS_ST
    importing
      !TIPO type SRGBTBREL-TYPEID_A
      !CLAVE type SRGBTBREL-INSTID_A
    returning
      value(TABLA) type ZTAB_URL_GOS .
  class-methods INSERTAR_URL_GOS_ST
    importing
      !TIPO type SRGBTBREL-TYPEID_A
      !CLAVE type SRGBTBREL-INSTID_A
      !URL type STRING
      !TITULO type STRING
    returning
      value(ERROR) type EKKO-LOEKZ .
  class-methods VISUALIZAR_FICHERO_ST
    importing
      !FICHERO type STRING .
  class-methods GET_URL_POR_TITULO_ST
    importing
      !TIPO type SRGBTBREL-TYPEID_A
      !CLAVE type SRGBTBREL-INSTID_A
      !TITULO type STRING
    returning
      value(URL) type STRING .
  class-methods ATTA_GOS_ST
    importing
      !TIPO type SRGBTBREL-TYPEID_A
      !CLAVE type SRGBTBREL-INSTID_A
    returning
      value(TABLA) type ZTAB_URL_GOS .
  class-methods BORRAR_URL_GOS_ST
    importing
      !TIPO type SRGBTBREL-TYPEID_A
      !CLAVE type SRGBTBREL-INSTID_A
      !URL type STRING
      !TITULO type STRING
    returning
      value(ERROR) type EKKO-LOEKZ .
protected section.
private section.
endclass. "ZCL_GOS definition
class ZCL_GOS implementation.
method ATTA_GOS_ST.
  DATA: l_url TYPE zest_url_gos,
        l_soodk TYPE soodk,
        i_urls TYPE TABLE OF srgbtbrel,
        l_srgbtbrel TYPE srgbtbrel,
        i_objcont TYPE TABLE OF soli,
        l_objcont TYPE soli,
        l_sood2 TYPE sood2,
        l_aux TYPE string.

  SELECT * FROM srgbtbrel
    INTO TABLE i_urls
   WHERE reltype = 'ATTA'
     AND instid_a = clave
     AND typeid_a = tipo
     AND catid_a = 'BO'.

  LOOP AT i_urls INTO l_srgbtbrel.
    l_soodk = l_srgbtbrel-instid_b+17.
    REFRESH i_objcont.
    CALL FUNCTION 'SO_OBJECT_READ'
      EXPORTING
*   FILTER                           =
        folder_id                        = l_srgbtbrel-instid_b(17)
*   FORWARDER                        =
        object_id                        = l_soodk
*   OWNER                            =
*   F_MAILER                         = ' '
 IMPORTING
*   OBJECT_FL_DISPLAY                =
    object_hd_display                = l_sood2
*   OBJECT_RC_DISPLAY                =
      TABLES
        objcont                          = i_objcont
*   OBJHEAD                          =
*   OBJPARA                          =
*   OBJPARB                          =
     EXCEPTIONS
       active_user_not_exist            = 1
       communication_failure            = 2
       component_not_available          = 3
       folder_not_exist                 = 4
       folder_no_authorization          = 5
       object_not_exist                 = 6
       object_no_authorization          = 7
       operation_no_authorization       = 8
       owner_not_exist                  = 9
       parameter_error                  = 10
       substitute_not_active            = 11
       substitute_not_defined           = 12
       system_failure                   = 13
       x_error                          = 14
       OTHERS                           = 15.

    LOOP AT i_objcont INTO l_objcont.
      l_url-titulo = l_sood2-objdes.
      CALL FUNCTION 'WRF_PBAS_TIMESTAMP_TO_DATE'
        EXPORTING
          i_timestamp       = l_srgbtbrel-utctime
          i_tzone           = sy-zonlo
        IMPORTING
          e_datlo           = l_url-fecha_creacion
          e_timlo           = l_url-hora_creacion
        EXCEPTIONS
          invalid_date      = 1
          invalid_time      = 2
          invalid_date_time = 3
          OTHERS            = 4.
      l_url-url = l_srgbtbrel-instid_b.
      APPEND l_url TO tabla.
    ENDLOOP.

  ENDLOOP.



endmethod.
method BORRAR_URL_GOS_ST.
  data: ls_fol_id type soodk,
  ls_obj_id type soodk,
  ls_obj_data type sood1,
  ls_folmem_k type sofmk,
  ls_note type borident,
  ls_object type borident,
  lv_ep_note type borident-objkey,
  lv_offset type i.

  data: l_url type zest_url_gos,
        l_soodk type soodk,
        i_urls type table of srgbtbrel,
        l_srgbtbrel type srgbtbrel,
        i_objcont type table of soli,
        l_objcont type soli,
        l_sood2 type sood2,
        l_aux type string,
        l_folder_id type soodk.

  data: it_objhead type standard table of soli,
        it_content type standard table of soli,
        wa_content type soli.

  error = 'X'.

  ls_object-objkey = clave.
  ls_object-objtype = tipo.


  call function 'SO_FOLDER_ROOT_ID_GET'
    exporting
      region    = 'B'
    importing
      folder_id = ls_fol_id
    exceptions
      others    = 1.

  ls_obj_data-objsns = 'O'.
  ls_obj_data-objla = sy-langu.
  ls_obj_data-objdes = titulo.

  refresh it_content.
  concatenate '&KEY&' url into wa_content.
  append wa_content to it_content.

  select * from srgbtbrel
    into table i_urls
   where reltype = 'URL'
     and instid_a = clave
     and typeid_a = tipo
     and catid_a = 'BO'.

  loop at i_urls into l_srgbtbrel.
    if l_srgbtbrel-instid_b(17) = ls_fol_id.
      l_soodk = l_srgbtbrel-instid_b+17.
      refresh i_objcont.
      l_folder_id = l_srgbtbrel-instid_b(17).

      call function 'SO_OBJECT_READ'
        exporting
*   FILTER                           =
          folder_id                        = l_folder_id
*   FORWARDER                        =
          object_id                        = l_soodk
*   OWNER                            =
*   F_MAILER                         = ' '
   importing
*   OBJECT_FL_DISPLAY                =
      object_hd_display                = l_sood2
*   OBJECT_RC_DISPLAY                =
        tables
          objcont                          = i_objcont
*   OBJHEAD                          =
*   OBJPARA                          =
*   OBJPARB                          =
       exceptions
         active_user_not_exist            = 1
         communication_failure            = 2
         component_not_available          = 3
         folder_not_exist                 = 4
         folder_no_authorization          = 5
         object_not_exist                 = 6
         object_no_authorization          = 7
         operation_no_authorization       = 8
         owner_not_exist                  = 9
         parameter_error                  = 10
         substitute_not_active            = 11
         substitute_not_defined           = 12
         system_failure                   = 13
         x_error                          = 14
         others                           = 15.

      loop at i_objcont into l_objcont.
        if l_objcont+5 = url.
          ls_obj_id = l_soodk.
        endif.
      endloop.
    endif.
  endloop.

  if not ls_obj_id is initial.
    call function 'SO_OBJECT_DELETE'
      exporting
        folder_id             = ls_fol_id
*   FORWARDER                        = ' '
*   F_UNREAD_DELETE                  = ' '
        object_id                        = ls_obj_id
*   OWNER                            = ' '
*   PUT_IN_WASTEBASKET               = 'X'
      exceptions
       communication_failure            = 1
       folder_not_empty                 = 2
       folder_not_exist                 = 3
       folder_no_authorization          = 4
       forwarder_not_exist              = 5
       object_not_exist                 = 6
       object_no_authorization          = 7
       operation_no_authorization       = 8
       owner_not_exist                  = 9
       substitute_not_active            = 10
       substitute_not_defined           = 11
       system_failure                   = 12
       x_error                          = 13
       others                           = 14.

    if sy-subrc = 0 and ls_object-objkey is not initial.
      ls_folmem_k-foltp = ls_fol_id-objtp.
      ls_folmem_k-folyr = ls_fol_id-objyr.
      ls_folmem_k-folno = ls_fol_id-objno.
      ls_folmem_k-doctp = ls_obj_id-objtp.
      ls_folmem_k-docyr = ls_obj_id-objyr.
      ls_folmem_k-docno = ls_obj_id-objno.
      lv_ep_note = ls_folmem_k.
      ls_note-objtype = 'MESSAGE'.
      ls_note-objkey = lv_ep_note.

      call function 'BINARY_RELATION_DELETE_COMMIT'
        exporting
          obj_rolea          = ls_object
          obj_roleb          = ls_note
          relationtype       = 'URL'
        exceptions
          entry_not_existing = 1
          internal_error     = 2
          no_relation        = 3
          no_role            = 4
          others             = 5.

      if sy-subrc = 0.
        clear error.
      endif.
    endif.
  endif.


endmethod.
method GET_URL_POR_TITULO_ST.
  DATA: l_url  TYPE zest_url_gos,
        i_urls TYPE ztab_url_gos.

  i_urls = URLS_GOS_ST( tipo = tipo clave = clave ).

  clear url.
  loop at i_urls into l_url where titulo = titulo
                              and url ne ''.
    url = l_url-url.
    exit.
  endloop.

endmethod.
method INSERTAR_URL_GOS_ST.
  DATA: ls_fol_id TYPE soodk,
  ls_obj_id TYPE soodk,
  ls_obj_data TYPE sood1,
  ls_folmem_k TYPE sofmk,
  ls_note TYPE borident,
  ls_object TYPE borident,
  lv_ep_note TYPE borident-objkey,
  lv_offset TYPE i.

  DATA: it_objhead TYPE STANDARD TABLE OF soli,
        it_content TYPE STANDARD TABLE OF soli,
        wa_content TYPE soli.

  error = 'X'.

  ls_object-objkey = clave.
  ls_object-objtype = tipo.


  CALL FUNCTION 'SO_FOLDER_ROOT_ID_GET'
    EXPORTING
      region    = 'B'
    IMPORTING
      folder_id = ls_fol_id
    EXCEPTIONS
      OTHERS    = 1.

  ls_obj_data-objsns = 'O'.
  ls_obj_data-objla = sy-langu.
  ls_obj_data-objdes = titulo.

  REFRESH it_content.
  CONCATENATE '&KEY&' url INTO wa_content.
  APPEND wa_content TO it_content.

  CALL FUNCTION 'SO_OBJECT_INSERT'
    EXPORTING
      folder_id             = ls_fol_id
      object_type           = 'URL'
      object_hd_change      = ls_obj_data
    IMPORTING
      object_id             = ls_obj_id
    TABLES
      objhead               = it_objhead
      objcont               = it_content
    EXCEPTIONS
      active_user_not_exist = 35
      folder_not_exist      = 6
      object_type_not_exist = 17
      owner_not_exist       = 22
      parameter_error       = 23
      OTHERS                = 1000.

  IF sy-subrc = 0 AND ls_object-objkey IS NOT INITIAL.
    ls_folmem_k-foltp = ls_fol_id-objtp.
    ls_folmem_k-folyr = ls_fol_id-objyr.
    ls_folmem_k-folno = ls_fol_id-objno.
    ls_folmem_k-doctp = ls_obj_id-objtp.
    ls_folmem_k-docyr = ls_obj_id-objyr.
    ls_folmem_k-docno = ls_obj_id-objno.
    lv_ep_note = ls_folmem_k.
    ls_note-objtype = 'MESSAGE'.
    ls_note-objkey = lv_ep_note.
    CALL FUNCTION 'BINARY_RELATION_CREATE_COMMIT'
      EXPORTING
        obj_rolea    = ls_object
        obj_roleb    = ls_note
        relationtype = 'URL'
      EXCEPTIONS
        OTHERS       = 1.
   if sy-subrc = 0.
     clear error.
   endif.
  ENDIF.



endmethod.
method URLS_GOS_ST.

  DATA: l_url TYPE zest_url_gos,
        l_soodk TYPE soodk,
        i_urls TYPE TABLE OF srgbtbrel,
        l_srgbtbrel TYPE srgbtbrel,
        i_objcont TYPE TABLE OF soli,
        l_objcont TYPE soli,
        l_sood2 TYPE sood2,
        l_aux TYPE string,
        l_folder_id type SOODK.

  SELECT * FROM srgbtbrel
    INTO TABLE i_urls
   WHERE reltype = 'URL'
     AND instid_a = clave
     AND typeid_a = tipo
     AND catid_a = 'BO'.

  LOOP AT i_urls INTO l_srgbtbrel.
    l_soodk = l_srgbtbrel-instid_b+17.
    REFRESH i_objcont.
    l_folder_id = l_srgbtbrel-instid_b(17).
    CALL FUNCTION 'SO_OBJECT_READ'
      EXPORTING
*   FILTER                           =
        folder_id                        = l_folder_id
*   FORWARDER                        =
        object_id                        = l_soodk
*   OWNER                            =
*   F_MAILER                         = ' '
 IMPORTING
*   OBJECT_FL_DISPLAY                =
    object_hd_display                = l_sood2
*   OBJECT_RC_DISPLAY                =
      TABLES
        objcont                          = i_objcont
*   OBJHEAD                          =
*   OBJPARA                          =
*   OBJPARB                          =
     EXCEPTIONS
       active_user_not_exist            = 1
       communication_failure            = 2
       component_not_available          = 3
       folder_not_exist                 = 4
       folder_no_authorization          = 5
       object_not_exist                 = 6
       object_no_authorization          = 7
       operation_no_authorization       = 8
       owner_not_exist                  = 9
       parameter_error                  = 10
       substitute_not_active            = 11
       substitute_not_defined           = 12
       system_failure                   = 13
       x_error                          = 14
       OTHERS                           = 15.

    LOOP AT i_objcont INTO l_objcont.
      l_url-titulo = l_sood2-objdes.
      CALL FUNCTION 'WRF_PBAS_TIMESTAMP_TO_DATE'
        EXPORTING
          i_timestamp       = l_srgbtbrel-utctime
          i_tzone           = sy-zonlo
        IMPORTING
          e_datlo           = l_url-fecha_creacion
          e_timlo           = l_url-hora_creacion
        EXCEPTIONS
          invalid_date      = 1
          invalid_time      = 2
          invalid_date_time = 3
          OTHERS            = 4.
      SPLIT l_objcont AT '&KEY&' INTO l_aux l_url-url.
      APPEND l_url TO tabla.
    ENDLOOP.

  ENDLOOP.


endmethod.
METHOD visualizar_fichero_st.
  DATA: l_file(255),
         l_ext(50).

  IF fichero(3) = 'FOL' AND fichero+17(3) = 'EXT'.
    DATA: i_doc TYPE TABLE OF sood4,
          l_doc TYPE sood4.
    APPEND fichero TO i_doc.
    CALL FUNCTION 'SO_DOCUMENTS_MANAGER'
      EXPORTING
        activity          = 'DISP'
*           OFFICE_USER       =
     TABLES
       documents         = i_doc.
  ELSE.
    DATA: l_fichero   TYPE dsvasdocid,
          l_ruta      TYPE dsvasdocid,
          l_nombre    TYPE dsvasdocid,
          l_extension TYPE dsvasdocid,
          l_dappl     TYPE draw-dappl,
          l_program(255),
          l_aux(255).

    l_fichero = fichero.

    l_extension = l_fichero(8).
    TRANSLATE l_extension TO LOWER CASE.
    IF l_extension CS 'https://' OR l_extension CS 'http://'.
      CALL FUNCTION 'PRGN_GENER_EXECUTE_URL'
        EXPORTING
          node_data = l_fichero.
    ELSE.
      CALL FUNCTION 'DSVAS_DOC_FILENAME_SPLIT'
        EXPORTING
          pf_docid     = l_fichero
        IMPORTING
          pf_directory = l_ruta
          pf_filename  = l_nombre
          pf_extension = l_extension.

      l_dappl = l_extension.
      TRANSLATE l_dappl TO UPPER CASE.                      "#EC *
      l_file = fichero.
      CALL FUNCTION 'CV120_START_APPLICATION'
        EXPORTING
          pf_dappl       = l_dappl
          pf_file        = l_file
        EXCEPTIONS
          error          = 1
          file_not_found = 2
          OTHERS         = 3.
      IF sy-subrc NE 0.
        CALL FUNCTION 'CV120_GET_APPL_FROM_REGISTRY'
          EXPORTING
            pf_apptp         = '1'
            pf_file          = fichero
          IMPORTING
            pfx_program      = l_program
          EXCEPTIONS
            no_valid_program = 1
            OTHERS           = 2.
        IF sy-subrc NE 0.
          l_file = fichero.
          CONCATENATE '.' l_dappl INTO l_ext.
          REPLACE l_ext WITH '.HTM' INTO l_file.
          CALL FUNCTION 'CV120_GET_APPL_FROM_REGISTRY'
            EXPORTING
              pf_apptp         = '1'
              pf_file          = l_file
            IMPORTING
              pfx_program      = l_program
            EXCEPTIONS
              no_valid_program = 1
              OTHERS           = 2.
        ENDIF.
        IF NOT l_fichero IS INITIAL.
          SPLIT l_program+1 AT '"' INTO l_program l_aux.
          IF l_program(1) = ':'.
            CONCATENATE 'c' l_program INTO l_program.
          ENDIF.
          REPLACE '%f' WITH '' INTO l_program.
          CONCATENATE '"' fichero '"' INTO l_aux.
          CALL FUNCTION 'WS_EXECUTE'
            EXPORTING
              commandline        = l_aux
              program            = l_program
            EXCEPTIONS
              frontend_error     = 1
              no_batch           = 2
              prog_not_found     = 3
              illegal_option     = 4
              gui_refuse_execute = 5
              OTHERS             = 6.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDMETHOD.
