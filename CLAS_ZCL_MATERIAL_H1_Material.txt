* Tabla caché con algunos datos importantes de material
TYPES: BEGIN OF t_mat,
         matnr TYPE matnr,
         meins TYPE meins,
       END OF t_mat,
       tt_mat TYPE SORTED TABLE OF t_mat WITH UNIQUE KEY matnr.
TYPES: BEGIN OF t_mat_conv_ctd,
         matnr  TYPE matnr,
         unori  TYPE meins, "Unidad origen
         undes  TYPE meins, "Unidad destino
         ctori  TYPE mengev, "Cantidad origen
         ctdes  TYPE mengev, "Cantidad destino
       END OF t_mat_conv_ctd,
       tt_mat_conv_ctd TYPE SORTED TABLE OF t_mat_conv_ctd WITH UNIQUE KEY matnr unori undes ctori ctdes.
class zcl_material_h1 definition
  public
  create public .

public section.

  data RETURN type BAPIRET2 .
  data MESSAGES type CFX_BI_TT_BAPI_MATRETURN2 .

  class-methods VISUALIZAR
    importing
      !MATNR type MARA-MATNR
      !VISTAS type T130M-PSTAT optional
      !NVISTA type I optional
      !WERKS type RMMG1-WERKS optional
      !LGORT type RMMG1-LGORT optional
      !LGNUM type RMMG1-LGNUM optional
      !LGTYP type RMMG1-LGTYP optional
      !VKORG type MVKE-VKORG optional
      !VTWEG type MVKE-VTWEG optional
      !MODIFICAR type ABAP_BOOL default '' .
  class-methods GET_DESCRIPCION
    importing
      !MATNR type MAKT-MATNR
      !SPRAS type MAKT-SPRAS default SY-LANGU
    preferred parameter MATNR
    returning
      value(MAKTX) type MAKT-MAKTX .
  class-methods GET_UNIDAD_BASE
    importing
      !MATNR type MARA-MATNR
    returning
      value(MEINS) type MARA-MEINS .
  class-methods CONVERTIR_UNIDAD
    importing
      !MATNR type MATNR
      !CANTIDAD type MENGE_D
      !UNIDAD_ORIGEN type MEINS
      !UNIDAD_DESTINO type MEINS
    returning
      value(RESULTADO) type MENGE_D .
  class-methods VER_STOCKS
    importing
      !MATNR type MATNR
      !WERKS type WERKS_D optional
      !LGORT type LGORT_D optional .
  class-methods GET_DETALLE_COSTES
    importing
      !MATNR type MATNR
      !WERKS type WERKS_D .
  class-methods GET_VALOR
    importing
      !MATNR type MATNR
      !WERKS type WERKS_D
      !CANTIDAD type MENGE_D optional
    returning
      value(VALOR) type DMBTR .
  methods GET_DESCR
    importing
      !MATNR type MAKT-MATNR
      !SPRAS type MAKT-SPRAS default SY-LANGU
    preferred parameter MATNR
    returning
      value(MAKTX) type MAKT-MAKTX .
  class-methods GET_GRUPO_ARTICULOS
    importing
      !MATNR type MATNR
    returning
      value(MATKL) type MATKL .
  class-methods GET_TEXTO_STRING
    importing
      !MATNR type MATNR
      !ID type STXH-TDID
      !SPRAS type SPRAS default SY-LANGU
    returning
      value(STRING) type STRING .
  methods UPDATE .
  methods INI_UPDATE
    importing
      !MATNR type MATNR .
  methods ADD_DATOS_BASICOS
    importing
      !MARA type MARA .
  methods ADD_TEXTOS_BREVES
    importing
      !I_MAKT type MAKT_TAB .
  methods ADD_DATOS_VENTAS
    importing
      !MVKE type MVKE .
  methods ADD_DATOS_IMPUESTOS
    importing
      !I_MLAN type MLAN_TAB optional
      !TAXCLASSIFICATIONS type T_BAPI_MLAN optional
    preferred parameter I_MLAN .
  class-methods DETERMINA_CAMBIOS_CAMPOS
    importing
      !ORIGINAL type ANY
      !MODIFICACION type ANY
    changing
      !CAMBIOS type ANY .
  methods ADD_DATOS_CENTRO
    importing
      !MARC type MARC
      !COMPRAS type SICHT_E default ''
      !MRP type SICHT_D default ''
      !PREP_TRABAJO type SICHT_A default ''
      !COMERCIAL type SICHT_V default ''
      !COSTES type SICHT_B default ''
      !CALIDAD type SICHT_Q default '' .
  methods ADD_DATOS_CONTABILIDAD
    importing
      !MBEW type MBEW
      !CONTABILIDAD type ABAP_BOOL default 'X'
      !COSTES type ABAP_BOOL default '' .
  class-methods EDIT_CLASIFICACION
    importing
      !MATNR type MATNR
      !VISUALIZAR type ABAP_BOOL default 'X' .
  methods ADD_DATOS_ALMACEN_WM
    importing
      !MLGN type MLGN .
  methods ADD_UNIDADES_MEDIDA
    importing
      !I_MARM type MARM_TAB
      !MEINS type MEINS
      !BORRAR type ABAP_BOOL default '' .
  methods ADD_DATOS_ALMACEN
    importing
      !MARD type MARD .
  methods ADD_DATOS_TIPO_ALMACEN_WM
    importing
      !MLGT type MLGT .
  methods ADD_EXTENSIONIN
    importing
      !I_EXTENSIONIN type BAPIPAREX_T
      !I_EXTENSIONINX type ZBAPIPAREXX_T .
protected section.

  data CLIENTDATA type BAPI_MARA .
  data CLIENTDATAX type BAPI_MARAX .
  data MATERIAL type MATNR .
  data NEW_MARA type MARA .
private section.

  data I_MAKT type MAKT_TAB .
  data HEADDATA type BAPIMATHEAD .
  data MATERIALDESCRIPTION type T_BAPI_MAKT .
  data SALESDATA type BAPI_MVKE .
  data SALESDATAX type BAPI_MVKEX .
  data TAXCLASSIFICATIONS type T_BAPI_MLAN .
  data PLANTDATA type BAPI_MARC .
  data PLANTDATAX type BAPI_MARCX .
  data VALUATIONDATA type BAPI_MBEW .
  data VALUATIONDATAX type BAPI_MBEWX .
  data WAREHOUSENUMBERDATA type BAPI_MLGN .
  data WAREHOUSENUMBERDATAX type BAPI_MLGNX .
  data UNITSOFMEASURE type T_BAPI_MARM .
  data UNITSOFMEASUREX type T_BAPI_MARMX .
  data STORAGELOCATIONDATA type BAPI_MARD .
  data STORAGELOCATIONDATAX type BAPI_MARDX .
  data STORAGETYPEDATA type BAPI_MLGT .
  data STORAGETYPEDATAX type BAPI_MLGTX .
  data EXTENSIONIN type BAPIPAREX_T .
  data EXTENSIONINX type ZBAPIPAREXX_T .
endclass. "ZCL_MATERIAL_H1 definition
class ZCL_MATERIAL_H1 implementation.
method ADD_DATOS_ALMACEN.
  DATA: l_storagelocationdata TYPE bapi_mard,
        l_mard TYPE mard,
        l_bapi_mard_ga TYPE bapi_mard_ga,
        i_return TYPE TABLE OF bapireturn.

* Recupero datos en BD para comporar
  SELECT SINGLE * FROM mard
    INTO l_mard
   WHERE matnr = material
     AND werks = mard-werks
     AND lgort = mard-lgort.

  CALL FUNCTION 'MAP2E_MARD_TO_BAPI_MARD_GA'
    EXPORTING
      mard         = l_mard
    CHANGING
      bapi_mard_ga = l_bapi_mard_ga.

  MOVE-CORRESPONDING l_bapi_mard_ga TO l_storagelocationdata.

* Convierto a estructura de la BAPI
  CALL FUNCTION 'MAP2E_MARD_TO_BAPI_MARD_GA'
    EXPORTING
      mard         = mard
    CHANGING
      bapi_mard_ga = l_bapi_mard_ga.

  MOVE-CORRESPONDING l_bapi_mard_ga TO storagelocationdata.

  determina_cambios_campos( EXPORTING original     = l_storagelocationdata
                                      modificacion = storagelocationdata
                            CHANGING  cambios      = storagelocationdatax ).

  storagelocationdatax-plant    = storagelocationdata-plant.
  storagelocationdatax-stge_loc = storagelocationdata-stge_loc.
  headdata-storage_view = 'X'.

endmethod.
method ADD_DATOS_ALMACEN_WM.
  DATA: l_warehousenumberdata TYPE bapi_mlgn,
        l_mlgn TYPE mlgn,
        l_bapi_mlgn_ga TYPE bapi_mlgn_ga,
        i_return TYPE TABLE OF bapireturn.

* Recupero datos en BD para comparar
  SELECT SINGLE * FROM mlgn
    INTO l_mlgn
   WHERE matnr = material
     AND lgnum = mlgn-lgnum.

  CALL FUNCTION 'MAP2E_MLGN_TO_BAPI_MLGN_GA'
    EXPORTING
      mlgn         = l_mlgn
    CHANGING
      bapi_mlgn_ga = l_bapi_mlgn_ga.

  MOVE-CORRESPONDING l_bapi_mlgn_ga TO l_warehousenumberdata.

* Convierto a estructura de la BAPI
  CALL FUNCTION 'MAP2E_MLGN_TO_BAPI_MLGN_GA'
    EXPORTING
      mlgn         = mlgn
    CHANGING
      bapi_mlgn_ga = l_bapi_mlgn_ga.

  MOVE-CORRESPONDING l_bapi_mlgn_ga TO warehousenumberdata.


  determina_cambios_campos( EXPORTING original     = l_warehousenumberdata
                                      modificacion = warehousenumberdata
                            CHANGING  cambios      = warehousenumberdatax ).

  warehousenumberdatax-whse_no = warehousenumberdata-whse_no.
  headdata-warehouse_view = 'X'.

endmethod.
method ADD_DATOS_BASICOS.
  DATA: l_clientdata TYPE bapi_mara,
        l_mara TYPE mara,
        i_return TYPE TABLE OF bapireturn.

* Recupero datos en BD para comporar
  SELECT SINGLE * FROM mara
    INTO l_mara
   WHERE matnr = material.

  CALL FUNCTION 'CFX_MAP2E_MARA_TO_BAPI_MARA'
    EXPORTING
      mara      = l_mara
    CHANGING
      bapi_mara = l_clientdata.

* Convierto a estructura de la BAPI
  CALL FUNCTION 'CFX_MAP2E_MARA_TO_BAPI_MARA'
    EXPORTING
      mara      = mara
    CHANGING
      bapi_mara = clientdata.

  determina_cambios_campos( EXPORTING original     = l_clientdata
                                      modificacion = clientdata
                            CHANGING  cambios      = clientdatax ).

  IF NOT mara IS INITIAL.
    headdata-ind_sector = mara-mbrsh.
    headdata-matl_type  = mara-mtart.
  ENDIF.

  headdata-basic_view = 'X'.

  me->new_mara = mara.

endmethod.
method ADD_DATOS_CENTRO.
  DATA: l_plantdata TYPE bapi_marc,
        l_marc TYPE marc,
        i_return TYPE TABLE OF bapireturn.

* Recupero datos en BD para comporar
  SELECT SINGLE * FROM marc
    INTO l_marc
   WHERE matnr = material
     AND werks = marc-werks.

  CALL FUNCTION 'CFX_MAP2E_MARC_TO_BAPI_MARC'
    EXPORTING
      marc      = l_marc
    CHANGING
      bapi_marc = l_plantdata.

* Convierto a estructura de la BAPI
  CALL FUNCTION 'CFX_MAP2E_MARC_TO_BAPI_MARC'
    EXPORTING
      marc      = marc
    CHANGING
      bapi_marc = plantdata.


  determina_cambios_campos( EXPORTING original     = l_plantdata
                                      modificacion = plantdata
                            CHANGING  cambios      = plantdatax ).

  plantdatax-plant = plantdata-plant.
  headdata-purchase_view = compras.
  headdata-mrp_view = mrp.
  headdata-work_sched_view = prep_trabajo.
  headdata-sales_view = comercial.
  headdata-cost_view = costes.
  headdata-quality_view = calidad.

endmethod.
method ADD_DATOS_CONTABILIDAD.
  DATA: l_valuationdata TYPE bapi_mbew,
        l_mbew TYPE mbew,
        l_bapi_mbew_ga TYPE bapi_mbew_ga,
        i_return TYPE TABLE OF bapireturn.

* Recupero datos en BD para comporar
  SELECT SINGLE * FROM mbew
    INTO l_mbew
   WHERE matnr = material
     AND bwkey = mbew-bwkey.

  CALL FUNCTION 'MAP2E_MBEW_TO_BAPI_MBEW_GA'
    EXPORTING
      mbew                         = l_mbew
      h_waers                      = 'EUR'
    CHANGING
      bapi_mbew_ga                 = l_bapi_mbew_ga
    EXCEPTIONS
      error_converting_curr_amount = 1
      OTHERS                       = 2.
  MOVE-CORRESPONDING l_bapi_mbew_ga TO l_valuationdata.

* Convierto a estructura de la BAPI
  CALL FUNCTION 'MAP2E_MBEW_TO_BAPI_MBEW_GA'
    EXPORTING
      mbew                         = mbew
      h_waers                      = 'EUR'
    CHANGING
      bapi_mbew_ga                 = l_bapi_mbew_ga
    EXCEPTIONS
      error_converting_curr_amount = 1
      OTHERS                       = 2.
  MOVE-CORRESPONDING l_bapi_mbew_ga TO valuationdata.


  determina_cambios_campos( EXPORTING original     = l_valuationdata
                                      modificacion = valuationdata
                            CHANGING  cambios      = valuationdatax ).

  valuationdatax-val_area = valuationdata-val_area.
  headdata-account_view = contabilidad.
  headdata-cost_view = costes.

endmethod.
method ADD_DATOS_IMPUESTOS.
  DATA: l_mlan TYPE mlan,
        l_bapi_mlan TYPE bapi_mlan,
        i_tstl TYPE TABLE OF tstl,
        l_tstl TYPE tstl.

  IF taxclassifications IS INITIAL.
    LOOP AT i_mlan INTO l_mlan.
      CLEAR l_bapi_mlan.
      l_bapi_mlan-depcountry = l_mlan-aland.

      SELECT * FROM tstl
        INTO TABLE i_tstl
       WHERE talnd = l_mlan-aland.
      l_bapi_mlan-taxclass_1 = l_mlan-taxm1.
      READ TABLE i_tstl INTO l_tstl WITH KEY lfdnr = 1.
      IF sy-subrc = 0.
        l_bapi_mlan-tax_type_1 = l_tstl-tatyp.
      ENDIF.
      l_bapi_mlan-taxclass_2 = l_mlan-taxm2.
      READ TABLE i_tstl INTO l_tstl WITH KEY lfdnr = 2.
      IF sy-subrc = 0.
        l_bapi_mlan-tax_type_2 = l_tstl-tatyp.
      ENDIF.
      APPEND l_bapi_mlan TO me->taxclassifications.
    ENDLOOP.
  ELSE.
    me->taxclassifications = taxclassifications.
  ENDIF.

  headdata-basic_view = 'V'.

endmethod.
METHOD add_datos_tipo_almacen_wm.

  DATA: l_storagetype_data TYPE bapi_mlgt,
        l_mlgt             TYPE mlgt,
        l_bapi_mlgt_ga     TYPE bapi_mlgt_ga,
        i_return           TYPE TABLE OF bapireturn.

* Recupero datos en BD para comparar
  SELECT SINGLE *
    FROM mlgt
    INTO l_mlgt
   WHERE matnr = material
     AND lgnum = mlgt-lgnum
     AND lgtyp = mlgt-lgtyp.

  CALL FUNCTION 'MAP2E_MLGT_TO_BAPI_MLGT_GA'
    EXPORTING
      mlgt         = l_mlgt
    CHANGING
      bapi_mlgt_ga = l_bapi_mlgt_ga.

  MOVE-CORRESPONDING l_bapi_mlgt_ga TO l_storagetype_data.

* Convierto a estructura de la BAPI
  CALL FUNCTION 'MAP2E_MLGT_TO_BAPI_MLGT_GA'
    EXPORTING
      mlgt         = mlgt
    CHANGING
      bapi_mlgt_ga = l_bapi_mlgt_ga.

  MOVE-CORRESPONDING l_bapi_mlgt_ga TO storagetypedata.


  determina_cambios_campos( EXPORTING original     = l_storagetype_data
                                      modificacion = storagetypedata
                            CHANGING  cambios      = storagetypedatax ).

  storagetypedatax-whse_no    = storagetypedata-whse_no.
  storagetypedatax-stge_type  = storagetypedata-stge_type.
  headdata-storage_view = 'X'.

ENDMETHOD.
method ADD_DATOS_VENTAS.
  DATA: l_salesdata TYPE bapi_mvke,
        l_mvke TYPE mvke,
        l_bapi_mvke_ga TYPE bapi_mvke_ga,
        i_return TYPE TABLE OF bapireturn.

* Recupero datos en BD para comporar
  SELECT SINGLE * FROM mvke
    INTO l_mvke
   WHERE matnr = material
     AND vkorg = mvke-vkorg
     AND vtweg = mvke-vtweg.

  CALL FUNCTION 'MAP2E_MVKE_TO_BAPI_MVKE_GA'
    EXPORTING
      mvke         = l_mvke
    CHANGING
      bapi_mvke_ga = l_bapi_mvke_ga.

  MOVE-CORRESPONDING l_bapi_mvke_ga TO l_salesdata.

* Convierto a estructura de la BAPI
  CALL FUNCTION 'MAP2E_MVKE_TO_BAPI_MVKE_GA'
    EXPORTING
      mvke         = mvke
    CHANGING
      bapi_mvke_ga = l_bapi_mvke_ga.

  MOVE-CORRESPONDING l_bapi_mvke_ga TO salesdata.

  determina_cambios_campos( EXPORTING original     = l_salesdata
                                      modificacion = salesdata
                            CHANGING  cambios      = salesdatax ).

  salesdatax-sales_org = salesdata-sales_org.
  salesdatax-distr_chan = salesdata-distr_chan.
  headdata-sales_view = 'X'.

endmethod.
  METHOD add_extensionin.

    MOVE-CORRESPONDING i_extensionin TO extensionin.
    MOVE-CORRESPONDING i_extensioninx TO extensioninx.


*    DATA: l_storagetype_data TYPE bapi_mlgt,
*          l_mlgt             TYPE mlgt,
*          l_bapi_mlgt_ga     TYPE bapi_mlgt_ga,
*          i_return           TYPE TABLE OF bapireturn.
*
**   Recupero datos en BD para comparar
*    SELECT SINGLE *
*      FROM mlgt
*      INTO l_mlgt
*     WHERE matnr = material
*       AND lgnum = mlgt-lgnum
*       AND lgtyp = mlgt-lgtyp.
*
*    CALL FUNCTION 'MAP2E_MLGT_TO_BAPI_MLGT_GA'
*      EXPORTING
*        mlgt         = l_mlgt
*      CHANGING
*        bapi_mlgt_ga = l_bapi_mlgt_ga.
*
*    MOVE-CORRESPONDING l_bapi_mlgt_ga TO l_storagetype_data.
*
**   Convierto a estructura de la BAPI
*    CALL FUNCTION 'MAP2E_MLGT_TO_BAPI_MLGT_GA'
*      EXPORTING
*        mlgt         = mlgt
*      CHANGING
*        bapi_mlgt_ga = l_bapi_mlgt_ga.
*
*    MOVE-CORRESPONDING l_bapi_mlgt_ga TO storagetypedata.
*
*
*    determina_cambios_campos( EXPORTING original     = l_storagetype_data
*                                        modificacion = storagetypedata
*                              CHANGING  cambios      = storagetypedatax ).
*
*    storagetypedatax-whse_no    = storagetypedata-whse_no.
*    storagetypedatax-stge_type  = storagetypedata-stge_type.
*    headdata-storage_view = 'X'.






  ENDMETHOD.
method ADD_TEXTOS_BREVES.
  DATA: l_makt TYPE makt,
        l_makt_bd TYPE makt,
        l_bapi_makt TYPE bapi_makt.

  LOOP AT i_makt INTO l_makt.
    CLEAR l_bapi_makt.
    l_bapi_makt-langu = l_makt-spras.
    l_bapi_makt-matl_desc = l_makt-maktx.

    IF l_makt-maktx = ''.
      SELECT SINGLE * FROM makt
        INTO l_makt_bd
       WHERE matnr = material
         AND spras = l_makt-spras.
      IF sy-subrc = 0.
        l_bapi_makt-del_flag = 'X'.
      ENDIF.
    ENDIF.
    APPEND l_bapi_makt TO materialdescription.
  ENDLOOP.

  headdata-basic_view = 'X'.

endmethod.
method ADD_UNIDADES_MEDIDA.
  DATA: l_marm TYPE marm,
        l_marm_bd TYPE marm,
        l_bapi_marm TYPE bapi_marm,
        l_bapi_marmx TYPE bapi_marmx,
        i_marm_bd TYPE TABLE OF marm.

  SELECT * FROM marm
    INTO TABLE i_marm_bd
   WHERE matnr = material
     AND meinh NE meins.

  LOOP AT i_marm INTO l_marm WHERE ty2tq NE 'D'.
    CLEAR l_bapi_marm.
    l_bapi_marm-alt_unit = l_marm-meinh.
    l_bapi_marm-numerator = l_marm-umrez.
    l_bapi_marm-denominatr = l_marm-umren.
    APPEND l_bapi_marm TO unitsofmeasure.

    CLEAR l_bapi_marmx.
    l_bapi_marmx-alt_unit = l_marm-meinh.
    CLEAR l_marm_bd.
    READ TABLE i_marm_bd INTO l_marm_bd WITH KEY meinh = l_marm-meinh.

    IF l_marm_bd-umrez NE l_marm-umrez.
      l_bapi_marmx-numerator = 'X'.
    ENDIF.
    IF l_marm_bd-umren NE l_marm-umren.
      l_bapi_marmx-denominatr = 'X'.
    ENDIF.
    APPEND l_bapi_marmx TO unitsofmeasurex.

  ENDLOOP.

  IF borrar = 'X'.
    LOOP AT i_marm INTO l_marm_bd WHERE ty2tq = 'D'.
* Como la BAPI no permite borrado, lo hacemos a pelo
      DELETE FROM marm
       WHERE matnr = material
         AND meinh = l_marm_bd-meinh.
    ENDLOOP.
  ENDIF.

  headdata-basic_view = 'X'.

endmethod.
method CONVERTIR_UNIDAD.

  CLEAR resultado.
  CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
    EXPORTING
      i_matnr              = matnr
      i_in_me              = unidad_origen
      i_out_me             = unidad_destino
      i_menge              = cantidad
    IMPORTING
      e_menge              = resultado
    EXCEPTIONS
      error_in_application = 1
      error                = 2
      OTHERS               = 3.

endmethod.
method DETERMINA_CAMBIOS_CAMPOS.
  FIELD-SYMBOLS: <original>   TYPE ANY,
                 <modificacion> TYPE ANY,
                 <campo_x> TYPE ANY,
               <original_comp>   TYPE ANY,
               <modificacion_comp> TYPE ANY,
               <campo_x_comp> TYPE ANY.

  ASSIGN: original TO <original>,
          modificacion TO <modificacion>,
          cambios TO <campo_x>.

  WHILE sy-subrc = 0.
    ASSIGN COMPONENT sy-index OF STRUCTURE <original> TO <original_comp>.
    IF sy-subrc NE 0.
      EXIT.
    ENDIF.
    ASSIGN COMPONENT sy-index OF STRUCTURE <modificacion> TO <modificacion_comp>.
    ASSIGN COMPONENT sy-index OF STRUCTURE <campo_x> TO <campo_x_comp>.
    IF <original_comp> NE <modificacion_comp>.
      <campo_x_comp> = 'X'.
    ENDIF.
  ENDWHILE.

endmethod.
method EDIT_CLASIFICACION.
  DATA: updateflag TYPE  rmclk-updat,
        classtype  TYPE  rmclf-klart,
        typetext   TYPE  rmclf-artxt,
        l_maktx    TYPE rmclf-obtxt,
        l_object   TYPE rmclf-objek,
        l_status,
        l_klart TYPE inob-klart.

  l_object = matnr.
  l_maktx = get_descripcion( matnr ).

  SELECT SINGLE klart FROM inob
    INTO l_klart
   WHERE obtab = 'MARA'
     AND objek = matnr.
  IF sy-subrc NE 0.
    SELECT SINGLE klart FROM kssk
      INTO l_klart
     WHERE objek = matnr.
  ENDIF.

  IF visualizar IS INITIAL.
    l_status = '2'.
  ELSE.
    l_status = '3'.
  ENDIF.

  DO.
    CALL FUNCTION 'CLFM_OBJECT_CLASSIFICATION'
         EXPORTING  table         = 'MARA'
                    ptable        = 'MARA'
                    object        = l_object
                    objtxt        = l_maktx
                    classtype     = l_klart
*                  typetext      = 'XX'
                    status        = l_status
                    initflag      = 'X'
                    ref_datuv     = sy-datum                "wk/4.0a
         IMPORTING  updateflag    = updateflag
                    classtype     = classtype
                    typetext      = typetext
*                 CLASS         = KLASSE               "mk/26.04.93
*                 CLASS_TEXT    = KLASSENTEXT
                    ok_code       = sy-ucomm
         EXCEPTIONS classification_not_found = 1
                    class_not_valid          = 2.           "ch zu 3.0D
    IF sy-ucomm NE 'WECH'.
      EXIT.
    ENDIF.
  ENDDO.
  IF sy-ucomm = 'SAVE'.
    COMMIT WORK AND WAIT.
  ENDIF.

endmethod.
method GET_DESCR.
  DATA makt TYPE makt.

  clear makt.
  READ TABLE i_makt INTO makt WITH KEY matnr = matnr
                                       spras = spras
                              BINARY SEARCH.
  IF sy-subrc NE 0.
    READ TABLE i_makt INTO makt WITH KEY matnr = matnr.
    IF sy-subrc NE 0.
      makt-maktx = get_descripcion( matnr = matnr
                                    spras = spras ).
      IF sy-subrc = 0.
        makt-matnr = matnr.
        makt-spras = spras.
        APPEND makt TO i_makt.
        SORT i_makt.
      ENDIF.
    ENDIF.
  ENDIF.
  maktx = makt-maktx.

endmethod.
method GET_DESCRIPCION.

  CLEAR maktx.
  SELECT SINGLE maktx FROM  makt
    INTO maktx
   WHERE matnr  = matnr
     AND spras  = spras.
  IF sy-subrc NE 0.
* Si no encuentra el texto en el idioma dado, lo devuelve en inglés, si lo hay
    IF maktx is initial.
      SELECT SINGLE maktx FROM  makt
        INTO maktx
       WHERE matnr  = matnr
         and spras  = 'E'.
    ENDIF.
* Sino en español, si lo hay
    IF spras NE 'S'.
      SELECT SINGLE maktx FROM  makt
        INTO maktx
       WHERE matnr  = matnr
         AND spras  = 'S'.
    ENDIF.
* Si no, en lo que encuentre
    IF maktx is initial.
      SELECT SINGLE maktx FROM  makt
        INTO maktx
       WHERE matnr  = matnr.
    ENDIF.
  ENDIF.

endmethod.
method GET_DETALLE_COSTES.
  DATA keko TYPE keko.

  TYPE-POOLS: kkb03, kkbg0, kkb04, ck, kkblo.

  DATA: i_ckis TYPE TABLE OF ckis,
        i_items TYPE TABLE OF bapiitemizationlist,
          l_header TYPE bapiitemizationheader,
          l_return TYPE  bapireturn,
          l_werks TYPE keko-werks.

  DATA: t_sa_tabin TYPE ck_strukturtab,
        t_kis1 TYPE TABLE OF kis1,
        t_xheader TYPE  kkblo_t_listheader,
        t_kisk_obj TYPE  kkb03_citem,
        t_out_items TYPE  kkb04_t_items,
        l_item TYPE kkb04_items,
        e_head TYPE  kkb04_head.

  SELECT * FROM keko
    INTO keko
    UP TO 1 ROWS
   WHERE werks = werks
     AND matnr = matnr
   ORDER BY kadky DESCENDING.
  ENDSELECT.

  CALL FUNCTION 'K_KKB_ITEMIZATION'
    EXPORTING
      i_kdauf              = ''
      i_kadky              = keko-kadky
      i_tvers              = '01'
      i_klvar              = keko-klvar
      i_kokrs              = keko-kokrs
      i_matnr              = keko-matnr
      i_werks              = keko-werks
      i_explosion          = ''
      i_auflo              = 0
      i_sicht              = '01'
      i_maton              = ''
      i_bz_losgr           = 1
      i_keko               = keko
      i_kalnr              = keko-kalnr
      i_erzka_given        = ''
      i_erzka              = ''
      i_no_output          = 'X'
    IMPORTING
      e_head               = e_head
    TABLES
      t_sa_tabin           = t_sa_tabin
      t_kis1               = t_kis1
      t_xheader            = t_xheader
      t_kisk_obj           = t_kisk_obj
      t_out_items          = t_out_items
    EXCEPTIONS
      input_incomplete     = 1
      input_not_unique     = 2
      no_calculation_found = 3
      no_items_found       = 4
      wrong_input          = 5
      user_abend           = 6
      OTHERS               = 7.

endmethod.
method GET_GRUPO_ARTICULOS.

  clear matkl.
  select single matkl from mara
    into matkl
   where matnr = matnr.

endmethod.
method GET_TEXTO_STRING.

  string = zcl_ap_textos=>get_texto_string( id = id object = 'MATERIAL' name = matnr spras = spras ).

endmethod.
method GET_UNIDAD_BASE.

  CLEAR meins.
  SELECT SINGLE meins FROM  mara
    INTO meins
   WHERE matnr  = matnr.

endmethod.
method GET_VALOR.
  DATA: l_mbew TYPE mbew.

  SELECT SINGLE * FROM mbew
    INTO l_mbew
   WHERE matnr = matnr
     AND bwkey = werks.
  IF sy-subrc = 0.
    IF l_mbew-peinh NE 0.
      IF l_mbew-vprsv = 'V'.
        valor = l_mbew-verpr / l_mbew-peinh.
      ELSE.
        valor = l_mbew-stprs / l_mbew-peinh.
      ENDIF.
    ENDIF.
  ENDIF.

  if cantidad ne 0.
    valor = valor * cantidad.
  endif.
endmethod.
method INI_UPDATE.

  CLEAR: return, headdata, clientdata, materialdescription, new_mara, salesdata, salesdatax, taxclassifications, warehousenumberdata.

  me->material = matnr.
  headdata-material = me->material.

endmethod.
METHOD update.

  CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
    EXPORTING
      headdata                   = headdata
      clientdata                 = clientdata
      clientdatax                = clientdatax
      plantdata                  = plantdata
      plantdatax                 = plantdatax
*     FORECASTPARAMETERS         =
*     FORECASTPARAMETERSX        =
*     PLANNINGDATA               =
*     PLANNINGDATAX              =
      storagelocationdata        = storagelocationdata
      storagelocationdatax       = storagelocationdatax
      valuationdata              = valuationdata
      valuationdatax             = valuationdatax
      warehousenumberdata        = warehousenumberdata
      warehousenumberdatax       = warehousenumberdatax
      salesdata                  = salesdata
      salesdatax                 = salesdatax
      storagetypedata            = storagetypedata
      storagetypedatax           = storagetypedatax
*     FLAG_ONLINE                = ' '
*     FLAG_CAD_CALL              = ' '
*     NO_DEQUEUE                 = ' '
*     NO_ROLLBACK_WORK           = ' '
    IMPORTING
      return                     = return
    TABLES
      materialdescription        = materialdescription
      unitsofmeasure             = unitsofmeasure
      unitsofmeasurex            = unitsofmeasurex
*     INTERNATIONALARTNOS        =
*     MATERIALLONGTEXT           =
      taxclassifications         = taxclassifications
      returnmessages             = messages
*     PRTDATA                    =
*     PRTDATAX                   =
      EXTENSIONIN                = extensionin
      EXTENSIONINX               = extensioninx
            .

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.

  CALL FUNCTION 'DEQUEUE_ALL'.


ENDMETHOD.
method VER_STOCKS.
  DATA: r_werks TYPE RANGE OF werks_d,
        l_werks LIKE LINE OF r_werks,
        r_lgort TYPE RANGE OF lgort_d,
        l_lgort LIKE LINE OF r_lgort.

  IF NOT werks IS INITIAL.
    l_werks-option = 'EQ'.
    l_werks-sign   = 'I'.
    l_werks-low    = werks.
    APPEND l_werks TO r_werks.
  ENDIF.

  IF NOT lgort IS INITIAL.
    l_lgort-option = 'EQ'.
    l_lgort-sign   = 'I'.
    l_lgort-low    = lgort.
    APPEND l_lgort TO r_lgort.
  ENDIF.

  SUBMIT rmmmbestn
     AND RETURN
    WITH ms_matnr = matnr
    WITH ms_werks IN r_werks
    WITH ms_lgort IN r_lgort.

endmethod.
method VISUALIZAR.

  DATA o_bi TYPE REF TO zcl_ap_batch_input.
  DATA l_mensaje TYPE bapireturn1-message.
  CREATE OBJECT o_bi.

* Acceso: Nº de material, clase de material, ramo etc.
  o_bi->dynpro( program = 'SAPLMGMM' dynpro = '0060').
  o_bi->campos( campo = 'BDC_OKCODE' valor = '=AUSW').
  o_bi->campos( campo = 'RMMG1-MATNR' valor = matnr ). " Número de material

  DATA: i_bdcmm TYPE TABLE OF bdcdata,
        l_bdcdata TYPE bdcdata,
        l_contvista TYPE i.

  FREE i_bdcmm.
  CALL FUNCTION 'MATERIAL_BTCI_SELECTION_NEW'
    EXPORTING
      material                  = matnr
      selection                 = vistas
      tcode                     = 'MM03'
    TABLES
      btci_d0070                = i_bdcmm
    EXCEPTIONS
      material_not_found        = 1
      material_number_missing   = 2
      material_type_missing     = 3
      material_type_not_found   = 4
      no_active_dynpro_selected = 5
      no_authority              = 6
      OTHERS                    = 7.

  CLEAR l_contvista.
  LOOP AT i_bdcmm INTO l_bdcdata.
    IF sy-tabix > 17.
      DELETE i_bdcmm.
    ELSE.
      IF NOT nvista IS INITIAL.
        IF l_bdcdata-fval = 'X'.
          ADD 1 TO l_contvista.
        ENDIF.
        IF l_contvista NE nvista.
          CLEAR l_bdcdata-fval.
          MODIFY i_bdcmm FROM l_bdcdata.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.

  o_bi->append_bdcdata( i_bdcmm ).

  IF NOT werks IS INITIAL OR
     NOT lgort IS INITIAL OR
     NOT lgnum IS INITIAL OR
     NOT lgtyp IS INITIAL.
    o_bi->dynpro( program = 'SAPLMGMM' dynpro = '0080').
    IF NOT werks IS INITIAL.
      o_bi->campos( campo = 'RMMG1-WERKS' valor = werks ). " Centro
    ENDIF.
    IF NOT lgort IS INITIAL.
      o_bi->campos( campo = 'RMMG1-LGORT' valor = lgort ). " Almacén
    ENDIF.
    IF NOT lgnum IS INITIAL.
      o_bi->campos( campo = 'RMMG1-LGNUM' valor = lgnum ). " NºAlmacén
    ENDIF.
    IF NOT lgtyp IS INITIAL.
      o_bi->campos( campo = 'RMMG1-LGTYP' valor = lgtyp ). " Tipo Almacén
    ENDIF.
    IF NOT vkorg IS INITIAL.
      o_bi->campos( campo = 'RMMG1-VKORG' valor = vkorg ).
    ENDIF.
    IF NOT vtweg IS INITIAL.
      o_bi->campos( campo = 'RMMG1-VTWEG' valor = vtweg ).
    ENDIF.
  ENDIF.

  IF modificar IS INITIAL.
    l_mensaje = o_bi->llamar_transaccion( tcode = 'MM03'
                        modo = 'E').
  ELSE.
    l_mensaje = o_bi->llamar_transaccion( tcode = 'MM02'
                        modo = 'E').
  ENDIF.

endmethod.
