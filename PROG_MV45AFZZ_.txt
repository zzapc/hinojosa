**INCLUDE MV45AFZZ .

************************************************************************
*                                                                      *
* This include is reserved for user modifications                      *
*                                                                      *
* Forms for sales document processing                                  *
*                                                                      *
* The name of modification modules should begin with 'ZZ'.             *
*                                                                      *
************************************************************************
DATA: wg_destinatario_actual LIKE xvbpa.  "Cambios de destinatario. Controlamos que no se lance más de una vez




*---------------------------------------------------------------------*
*       FORM ZZEXAMPLE                                                *
*---------------------------------------------------------------------*
*       text......................................                    *
*---------------------------------------------------------------------*
*FORM ZZEXAMPLE.

*  ...

*ENDFORM.

*eject
*---------------------------------------------------------------------*
*       FORM USEREXIT_DELETE_DOCUMENT                                 *
*---------------------------------------------------------------------*
*       This userexit can be used to delete data in additional tables *
*       when a sales document is deleted.                             *
*                                                                     *
*      This form is called in dialog at the end of form BELEG_LOESCHEN*
*      just before form BELEG_SICHERN is performed to delete the      *
*      datas on the database.                                         *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_delete_document.

ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_FIELD_MODIFICATION                              *
*---------------------------------------------------------------------*
*       This userexit can be used to modify the attributes of         *
*       screen fields.                                                *
*       This form is processed for each field in the screen.          *
*                                                                     *
*       The use of the fields screen-group1 to screen-group4 is:      *
*                                                                     *
*       Screen-group1: Automatic modification contolles by transaction*
*                      MFAW.                                          *
*       Screen-group2: Contents 'LOO' for steploop-fields.            *
*       Screen-group3: Used for modififaction, which are dependent on *
*                      control tables or other fix information.       *
*       Screen-group4: Unused                                         *
*                                                                     *
*       For field mofifications, which are dependent on the document  *
*       status, you can use the status field in the workareas         *
*       XVBAP for item status and XVBUK for header status.            *
*                                                                     *
*       This form is called from module FELDAUSWAHL.                  *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_field_modification.
*CASE screen-name.
*  WHEN 'VBAK-ZZFECHACONFIRMA'.
*    SCREEN-ACTIVE = 1.
**  WHEN .
*  WHEN OTHERS.
*ENDCASE.
* CASE SCREEN-GROUP3.
*   WHEN '900'.
*     IF VBAK-VBTYP NE 'A'.
*       SCREEN-ACTIVE = 0.
*     ENDIF.
* ENDCASE.

* CASE SCREEN-NAME.
*   WHEN 'VBAK-VBELN'.
*     SCREEN-ACTIVE = 0.
* ENDCASE.

ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_MOVE_FIELD_TO_VBAK                              *
*---------------------------------------------------------------------*
*       This userexit can be used to move some fields into the sales  *
*       dokument header workaerea VBAK.                               *
*                                                                     *
*       SVBAK-TABIX = 0:  Create header                               *
*       SVBAK-TABIX > 0:  Change header                               *
*                                                                     *
*       This form is called at the end of form VBAK_FUELLEN.          *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_move_field_to_vbak.

*  vbak-zzfield = xxxx-zzfield2.
  DATA: l_vbkd          TYPE vbkd,
        l_vbkd_anterior TYPE vbkd.

*** YHP: Forward Handling into class
  ycl_hp_sdu=>move_field_to_vbak( EXPORTING is_vbak      = vbak
                                            it_yvbap     = yvbap[]
                                            it_yvbep     = yvbep[]
                                            it_xvbuv     = xvbuv[]
                                  CHANGING  cf_fcode     = fcode
                                            cs_svbkd     = svbkd
                                            cs_vbak      = vbak
                                            cs_tvak      = tvak
                                            cs_vbap      = vbap
                                            cs_vbap_old  = *vbap
                                            cs_rv45a     = rv45a
                                            ct_xvbap     = xvbap[]
                                            ct_xvbep     = xvbep[]
                                            ct_xvbkd     = xvbkd[]
                                            ct_xkomv     = xkomv[] ).


*Asignar Clase de riesgo ZCM si la Clase de pedido es ZTA3
*Revisar condicionamiento para el caso de ejecución vía monitor Centro de montaje.

  "MTS 16.01.2024 Comentado para que AICOMP pueda realizar cambios en el código y transportarlo
*  IF sy-tcode = 'VA01' AND vbak-auart = 'ZTA3' AND vbak-ctlpc <> 'ZCM'.
*
*    vbak-ctlpc = 'ZCM'.
*
*  ENDIF.
  "FIN MTS 16.01.2024 Comentado para que AICOMP pueda realizar cambios en el código y transportarlo

* EBA 24/04/14. Copiar la Vía de Pago desde el maestro de clientes a los
* pedidos.
  IF sy-tcode = 'VA01' OR sy-tcode = 'VA02'.
    IF vbak-vbtyp = 'C'.    "Pedidos normales.
      IF xvbkd-zlsch IS INITIAL.
        READ TABLE xvbkd INTO l_vbkd WITH KEY posnr = '000000'.
        IF sy-subrc = 0.
          DATA: via_pago LIKE knb1-zwels.
          CLEAR: via_pago.
          SELECT SINGLE zwels FROM knb1 INTO via_pago
           WHERE kunnr = xvbak-kunnr
             AND bukrs = xvbak-bukrs_vf.
          IF sy-subrc = 0.
            vbkd-zlsch = xvbkd-zlsch = via_pago.
          ENDIF.
        ENDIF.
      ENDIF.
    ELSEIF vbak-vbtyp = 'K' OR vbak-vbtyp = 'L'.
* SCT 11/05/18 Id.48233 Se limpia el campo Referencia XBLNR de la cabecera
* del pedido, para que no se arrastre a factura FI en Sol.Abono/Credito.
* En FI este campo Referencia es el que se sube al SII como num.fra.
      CLEAR vbak-xblnr.
      CLEAR vbak-zuonr.
    ENDIF.


    "JCB 05.10.23. 78666. SD - Advertencia al indicar destinatario distinto al del listado cliente
    "Al introducir un destinatario de mercancias de un pedido el sistema checkee si el destinatario de mercancias introducido pertenece al listado de destinatarios del cliente.
    "Para revisar si el destinatario de mercancias indicado pertenece al listado del cliente hay que ir a la tabla KNVP
    "En el campo KUNN2 se indica el destinatario de mercancias del cliente y se comprueba si el valor mostrado
    "en KUNNR es el mismo que el valor introducido en el campo 'Solicitante' del pedido de ventas.
    IF xvbak-weupda = 'X' OR svbak-tabix = 0.  "Cambio de destinatario o altas
      DATA wl_knvp TYPE knvp.
      DATA: wl_vbpa TYPE vbpa.
      CLEAR wl_vbpa.
      READ TABLE xvbpa INTO wl_vbpa WITH KEY vbeln = vbak-vbeln
                                             posnr = '000000'
                                             parvw = 'WE'.
      IF wl_vbpa-kunnr IS NOT INITIAL AND wl_vbpa-kunnr <> wg_destinatario_actual-kunnr.
        wg_destinatario_actual = wl_vbpa.

        SELECT SINGLE *
          INTO wl_knvp
          FROM knvp
          WHERE kunnr = vbak-kunnr AND
                vkorg = vbak-vkorg AND
                vtweg = vbak-vtweg AND
                spart = vbak-spart AND
                parvw = 'WE'        AND
                kunn2 = wl_vbpa-kunnr.
        IF sy-subrc <> 0.
          MESSAGE 'El destinatario de mercancias no pertenece al listado de destinatarios del cliente' TYPE 'I' DISPLAY LIKE 'W'.
        ENDIF.

        "JCB 12.10.23. 79375 - AVISO PARA PEDIDOS ZTA2 CUANDO EL DESTINATARIO ES CONSIGNA
        IF vbak-auart = 'ZTA2'.
          SELECT SINGLE *
            INTO wl_knvp
            FROM knvp
            WHERE kunnr = wl_vbpa-kunnr AND
                  vkorg = vbak-vkorg    AND
                  vtweg = vbak-vtweg    AND
                  spart = vbak-spart    AND
                  parvw = 'SB'          AND
                  kunn2 = wl_vbpa-kunnr.
          "Si encuentra valor significa que nuestro destinatario de mercancías debe de ser consigna y tiene que salir un aviso.
          IF sy-subrc = 0.
            MESSAGE 'El destinatario de es consigna. Debería utilizar clase de pedido ZKB' TYPE 'I' DISPLAY LIKE 'W'.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.


  CASE sy-tcode.
    WHEN 'VA21' OR 'VA22'.

***    SMT - 01/02/2022 fecha de fin de validez de la oferta se rellene siempre por defecto con el valor: 31.12.9999
      IF vbak-bnddt IS INITIAL.
        vbak-bnddt = '99991231'.
      ENDIF.
  ENDCASE.

  "$. SAS Seidor # INI 07.02.2022 09:35:26 GADSD033
*
  IF sy-tcode = 'VA01' OR sy-tcode = 'VA02'.
    IF vbak-zzfechaconfirmacion IS INITIAL.

      DATA lt_vbep TYPE STANDARD TABLE OF vbepvb.
      DATA lv_count TYPE i.

      SELECT COUNT(*) FROM zssdt033 INTO lv_count
        WHERE vkorg = vbak-vkorg
        AND vtweg = vbak-vtweg
        AND spart = vbak-spart
        AND auart = vbak-auart.

      IF sy-subrc = 0.

        " -  Caso 01: Pedido con todas las posiciones confirmadas
        IF vbuk-bestk = 'C'.

          lt_vbep = VALUE #( FOR vw_vbep IN  xvbep[] WHERE ( bmeng <> 0 ) ( vw_vbep ) ).

          SORT lt_vbep BY edatu DESCENDING.

          TRY .
              vbak-zzfechaconfirmacion = lt_vbep[ 1 ]-edatu.
              IF vbak-lifsk = 'Z3'.
                vbak-lifsk = ''.
              ELSEIF vbak-auart = 'ZKB'. " BG se quita bloqueo de entrega para pedidos ZKB
                vbak-lifsk = ''.
              ENDIF.

            CATCH cx_sy_itab_line_not_found INTO DATA(vv_error_fec_conf).

          ENDTRY.


        ELSE.
          " -	Caso 02: Pedido con posiciones con OFs confirmadas y no confirmadas
          IF line_exists( xvbup[ besta = 'C' ] ).

            lt_vbep = VALUE #( FOR vw_vbep IN  xvbep[] WHERE ( bmeng <> 0 ) ( vw_vbep ) ).
            SORT lt_vbep BY edatu ASCENDING.
            TRY .
                vbak-zzfechaconfirmacion = lt_vbep[ 1 ]-edatu.
                IF vbak-lifsk = 'Z3'.
                  vbak-lifsk = ''.
                ELSEIF vbak-auart = 'ZKB'. " BG se quita bloqueo de entrega para pedidos ZKB
                  vbak-lifsk = ''.
                ENDIF.
              CATCH cx_sy_itab_line_not_found INTO vv_error_fec_conf.

            ENDTRY.

          ELSE. " -	Caso 03: Planes de entrega

            lt_vbep = VALUE #( FOR vw_vbep IN  xvbep[] WHERE ( bmeng <> 0 ) ( vw_vbep ) ).
            SORT lt_vbep BY edatu ASCENDING.
            TRY .
                vbak-zzfechaconfirmacion = lt_vbep[ 1 ]-edatu.
                IF vbak-lifsk = 'Z3'.
                  vbak-lifsk = ''.
                ENDIF.
              CATCH cx_sy_itab_line_not_found INTO vv_error_fec_conf.

            ENDTRY.

          ENDIF.

        ENDIF.

      ENDIF.
    ENDIF.




*****    Borramos función de interlocutor S8 si no es de destinatário
*
*  SELECT SINGLE COUNT( * ) FROM zssdt000_auart_c WHERE auart = vbak-auart and active = 1.
*    If sy-subrc = 0.
*    READ TABLE xvbpa INTO DATA(l_vbpa) WITH KEY parvw = 'SB'.
*    IF sy-subrc = 0.
*      READ TABLE xvbpa INTO DATA(l_vbpa_we) WITH KEY parvw = 'WE'.
*      If sy-subrc = 0.
*        SELECT SINGLE COUNT( * ) FROM knvp where kunnr = l_vbpa_we AND parvw = 'SB'
*                                    AND KUNN2 = l_vbpa-kunnr AND vkorg = vbak-vkorg
*                                    AND vtweg = vbak-vtweg AND spart = vbak-spart.
*        If sy-subrc <> 0.
*
*          DELETE xvbpa WHERE parvw = 'SB'.
*        ENDIF.
*      ENDIf.
*    ENDIF.
*
*    ENDIF.



  ENDIF.

  "$. SAS Seidor # FIN 07.02.2022 09:35:35 GADSD033

  IF sy-tcode = 'VA01'.
    DATA: l_auart TYPE auart.
    IF svbak-tabix = 1 AND rv45a-ketdat IS NOT INITIAL.

      CLEAR: l_auart.

      SELECT SINGLE auart INTO l_auart FROM vbak WHERE vbeln = vbak-vgbel.

      SELECT SINGLE COUNT(*) FROM zssdt000_ofped_r
        WHERE auart = l_auart AND vkorg = vbak-vkorg
          AND vtweg = vbak-vtweg AND spart = vbak-spart
          AND active = 1.

      IF sy-subrc = 0.

        LOOP AT xvbep ASSIGNING FIELD-SYMBOL(<vbep>) WHERE etenr IS NOT INITIAL.
          CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
            EXPORTING
              date_external            = rv45a-ketdat    " external date formatting
*             accept_initial_date      =     " Single-Character Indicator
            IMPORTING
              date_internal            = <vbep>-edatu    " internal date formatting
            EXCEPTIONS
              date_external_is_invalid = 1
              OTHERS                   = 2.
          IF sy-subrc <> 0.
*         MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ENDIF.
        ENDLOOP.

        svbak-tabix = 2.
      ENDIF.

    ENDIF.
  ENDIF.
ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_MOVE_FIELD_TO_VBAP                              *
*---------------------------------------------------------------------*
*       This userexit can be used to move some fields into the sales  *
*       dokument item workaerea VBAP                                  *
*                                                                     *
*       SVBAP-TABIX = 0:  Create item                                 *
*       SVBAP-TABIX > 0:  Change item                                 *
*                                                                     *
*       This form is called at the end of form VBAP_FUELLEN.          *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_move_field_to_vbap.

*  VBAP-zzfield = xxxx-zzfield2.
* EBA 08/06/2014. AMPLIAR USER-EXIT CON LA FUNCIONALIDAD DE LA CAUSA DE
* RETRASO.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_xvbap  TYPE vbap,
        lv_estat  TYPE j_estat,
        lv_msg    TYPE string,
        ls_return TYPE bapiret2.

  DATA: l_vtext TYPE vtext,
        l_modif TYPE flag.

  DATA: lv_gvcin TYPE /vcxi/vkcr_gvcin,
        lt_vctml TYPE /vcxi/vkcr_tt_vcmdl.



  "IVL 21/05/2024:
  "Comments to look for an alternative with a new feature

*  data: LV_ROBTAB type INOB-ROBTAB,
*        LV_ROBJEK type INOB-ROBJEK,
*        LV_WERKS  type MARC-WERKS.
*  data: LF_DISPLAY type FLAG.
*
*
*  if SY-TCODE = 'VA21' or SY-TCODE = 'VA22'.
*
*    if VBAP-LGORT <> XVBAP-LGORT.
*
*      LV_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = VBAP-CUOBJ ).
*      LT_VCTML = /VCXI/CL_VKCR_GATEWAY=>GET_MODEL( IF_GVCIN = LV_GVCIN ).
*      read table LT_VCTML into data(LS_VCTML) with key GVCIN = LV_GVCIN.
*
*      data(LS_OWNER) = LS_VCTML-OWNER.
*
*      LV_ROBTAB = LS_OWNER-OBJECT_TYPE.
*      LV_ROBJEK = LS_OWNER-OBJECT_KEY.
*
*      if XVBAP-LGORT is not initial.
*
*        case VBAP-WERKS.
*          when '2001'.
*            LV_WERKS = '2000'.
*          when others.
*            LV_WERKS = '2001'.
*        endcase.
*
*
*        call function 'CE_C_PROCESSING'
*          exporting
*            INSTANCE                       = VBAP-CUOBJ
*            DATE                           = VBAP-STDAT
*            DISPLAY                        = 'X'
*            OBJECT_ID                      = LV_ROBTAB
*            OBJECT                         = LV_ROBJEK
*            PLANT                          = LV_WERKS
*            NO_DIALOG                      = 'X'
*          exceptions
*            INTERNAL_ERROR                 = 1
*            INSTANCE_NOT_FOUND             = 2
*            REFERENCE_INSTANCE_NOT_FOUND   = 3
*            INSTANCE_IS_A_CLASSIFICATION   = 4
*            NO_PLANT                       = 5
*            NO_QUANTITY                    = 6
*            NO_CONNECTION_TO_CONFIGURATION = 7
*            MATERIAL_VARIANT_NOT_ALLOWED   = 8
*            INTERNAL_ERROR_ECM             = 9
*            EOASL_NOT_ALLOWED              = 10
*            MAXASL_NOT_ALLOWED             = 11
*            XC_UNPROCESSED_DATA            = 12
*            XC_FAILURE_PROCESSING_DATA     = 13
*            NO_BOM                         = 14
*            NO_KNOWLEDGE_BASE_FOUND        = 15
*            ORDER_BOM_ERROR                = 16
*            others                         = 17.
*
*        if SY-SUBRC = 0.
*
*          call function 'CE_C_PROCESSING'
*            exporting
*              INSTANCE                       = VBAP-CUOBJ
*              DATE                           = VBAP-STDAT
*              DISPLAY                        = 'X'
*              OBJECT_ID                      = LV_ROBTAB
*              OBJECT                         = LV_ROBJEK
*              PLANT                          = VBAP-WERKS
*              NO_DIALOG                      = 'X'
*            exceptions
*              INTERNAL_ERROR                 = 1
*              INSTANCE_NOT_FOUND             = 2
*              REFERENCE_INSTANCE_NOT_FOUND   = 3
*              INSTANCE_IS_A_CLASSIFICATION   = 4
*              NO_PLANT                       = 5
*              NO_QUANTITY                    = 6
*              NO_CONNECTION_TO_CONFIGURATION = 7
*              MATERIAL_VARIANT_NOT_ALLOWED   = 8
*              INTERNAL_ERROR_ECM             = 9
*              EOASL_NOT_ALLOWED              = 10
*              MAXASL_NOT_ALLOWED             = 11
*              XC_UNPROCESSED_DATA            = 12
*              XC_FAILURE_PROCESSING_DATA     = 13
*              NO_BOM                         = 14
*              NO_KNOWLEDGE_BASE_FOUND        = 15
*              ORDER_BOM_ERROR                = 16
*              others                         = 17.
*
*        endif.
*      endif.
*    endif.
*  endif.



  IF vbak-vkorg = '4000'.
    IF vbap-zzcausa_retraso NE *vbap-zzcausa_retraso .
*    oR  vbap-zzred ne *vbap-zzred.
      LOOP AT xvbap WHERE posnr = vbap-posnr
                      AND  zzcausa_retraso NE vbap-zzcausa_retraso .
*                      or  zzred ne vbap-zzred ).
        xvbap-zzcausa_retraso = vbap-zzcausa_retraso.
*      xvbap-zzred           = vbap-zzred.
        IF xvbap-updkz = ''.
          xvbap-updkz = 'U'.
        ENDIF.
        MODIFY xvbap.
      ENDLOOP.
    ENDIF.
  ENDIF.



  IF vbap-zzsupanm2 NE *vbap-zzsupanm2 .
    LOOP AT xvbap WHERE posnr = vbap-posnr
                    AND  zzsupanm2 NE vbap-zzsupanm2 .
*                      or  zzred ne vbap-zzred ).
      xvbap-zzsupanm2 = vbap-zzsupanm2.
      MODIFY xvbap.
    ENDLOOP.
  ENDIF.



  "JCB 26.10.22. Comentado, el tratamiento está debajo.
  "Con este tratamiento, si había algún error al determinar estado, se actualizaban los hijos igual
  "Además no se modificaba el descriptor
*  LOOP AT xvbap WHERE uepos = vbap-posnr.
*    IF vbap-zstatp IS NOT INITIAL OR *vbap-zstatp IS NOT INITIAL.
*      xvbap-zstatp = vbap-zstatp.
*
*      MODIFY xvbap.
*    ENDIF.
*  ENDLOOP.
  "FIN JCB 26.10.22. Comentado, el tratamiento está debajo.

*--> FCARDONA - Sincronizar status de posición con status de usuario.

*** Comento para adaptar lógica.
*
*  IF vbap-zstatp NE *vbap-zstatp .
*    LOOP AT xvbap WHERE posnr = vbap-posnr
*                    AND  zstatp NE vbap-zstatp .
**                      or  zzred ne vbap-zzred ).
*      xvbap-zstatp = vbap-zstatp.
*
*      SELECT SINGLE   vtext INTO l_vtext FROM zssdtt000_stat_p
*        WHERE zstatp = vbap-zstatp AND spras = sy-langu.
*      IF sy-subrc = 0.
*        xvbap-zvtext = vbap-zvtext = l_vtext.
*      ENDIF.
*
*      MODIFY xvbap.
*    ENDLOOP.
*  ENDIF.

* APC20240712 Si estamos desde el programa de actualización de posiciones queremos permitir fijar el status
  IF sy-binpt = 'X' AND *vbap-posnr IS INITIAL.
    GET PARAMETER ID 'ZPERM_CAMBIO_STATUS' FIELD DATA(l_permitir_cambio_status).
    IF l_permitir_cambio_status = 'X'.
      *vbap-zstatp = vbap-zstatp.
    ENDIF.
  ENDIF.

  DATA: lv_cad_ok TYPE flag.
  CLEAR: lv_cad_ok.

*** General Userexit handling call
  DATA lv_stch(1).
  lv_cad_ok = ycl_hp_sdu=>move_field_to_vbap( EXPORTING if_tabix    = svbap-tabix
                                                        is_old_vbap = *vbap
                                                        is_vbak     = vbak
                                                        IMPORTING ef_stch = lv_stch
                                              CHANGING  cs_vbap     = vbap
                                                        ct_xvbap    = xvbap[]
                                                       ).

***  "Vemos si hay cambio de status.
  IF ( vbap-zstatp NE *vbap-zstatp ) AND lv_stch IS INITIAL.

    "Obtenemos posición a modificar
    READ TABLE xvbap WITH KEY posnr = vbap-posnr.

    "Si se obtiene registro
    IF ( sy-subrc EQ 0 ).

*--> INI FCARDONA 13.07.2022 encapsulamiento de modificación de status de usuario

* Comentamos por lógica nueva
*
*      "Obtenemos código de status de usuario a modificar
*      select single ESTAT
*        from TJ30T
*        into LV_ESTAT
*       where TXT04 = VBAP-ZSTATP
*         and STSMA = 'ZS000001'
*         and SPRAS = 'S'.
*
*      "Si se ha obtenido
*      if ( LV_ESTAT is not initial ).
*
*        call function 'STATUS_CHANGE_EXTERN'
*          exporting
*            OBJNR               = VBAP-OBJNR
*            USER_STATUS         = LV_ESTAT
*          exceptions
*            OBJECT_NOT_FOUND    = 1
*            STATUS_INCONSISTENT = 2
*            STATUS_NOT_ALLOWED  = 3
*            others              = 4.
*        if ( SY-SUBRC = 0 ).
*
*          loop at XVBAP where POSNR   eq VBAP-POSNR
*                          and ZSTATP  ne VBAP-ZSTATP.
**
*            XVBAP-ZSTATP = VBAP-ZSTATP.
*
*            select single VTEXT
*              into L_VTEXT
*              from ZSSDTT000_STAT_P
*             where ZSTATP = VBAP-ZSTATP
*               and SPRAS = SY-LANGU.
*
*            if SY-SUBRC = 0.
*              XVBAP-ZVTEXT = VBAP-ZVTEXT = L_VTEXT.
*            endif.
*
*            modify XVBAP.
*
*          endloop.
*
*        else.
*
*          concatenate 'Pos.' VBAP-POSNR ':' 'No es posible modificar el status de usuario. No se modifica status en posición.' into LV_MSG separated by SPACE.
*          message LV_MSG type 'W'.
*          VBAP-ZSTATP = *VBAP-ZSTATP.
*
*        endif.
*
*      else.
*
*        concatenate 'Pos.' VBAP-POSNR ':' 'No existe el status de usuario. No se modifica status en posición.' into LV_MSG separated by SPACE.
*        message LV_MSG type 'W'.
*        VBAP-ZSTATP = *VBAP-ZSTATP.
*
*      endif.

* Nueva lógica
      "PaFi Aicomp 06.05.22 Proyecto Ventas Packaging
      "JBL 22/11/2022 We need to check CAD status before ZSTATP is changed to prevent unwanted changes
      "This is moved to line 448 from line 715. Also, lv_cad_ok logic is created
*      data: LR_SDU type ref to YCL_HP_SDU.
*      data LV_CAD_OK type FLAG.
*      clear LV_CAD_OK.
*      create object LR_SDU.
*      if LR_SDU is bound.
*        LV_CAD_OK = LR_SDU->MOVE_FIELD_TO_VBAP( exporting IF_TABIX = SVBAP-TABIX
*                                                  IS_OLD_VBAP = *VBAP
*                                                  IS_VBAK  = VBAK
*                                        changing  CS_VBAP  = VBAP
*                                                  CT_XVBAP = XVBAP[] ).
*      endif.

      "End PaFi 03.05.22
      CALL FUNCTION 'ZSD_UPD_USER_STATUS_4_VBAP'
        EXPORTING
          i_objnr      = vbap-objnr
          i_new_status = vbap-zstatp
*         I_COMMIT     =
        IMPORTING
          e_return     = ls_return
        EXCEPTIONS
          no_changed   = 1
          OTHERS       = 2.

      "Comprobamos actualización de status de usuario
      IF ( sy-subrc = 0 ) OR lv_cad_ok IS INITIAL. "JBL 22/11/2022 new lv_cad_ok logic
        DATA lt_xvbap LIKE TABLE OF xvbap.
        lt_xvbap[] = xvbap[].
        DELETE lt_xvbap WHERE zstatp EQ vbap-zstatp.
        DATA lt_zss TYPE TABLE OF zssdtt000_stat_p.
        IF lt_xvbap[] IS NOT INITIAL.
          SELECT vtext zstatp
            INTO CORRESPONDING FIELDS OF TABLE lt_zss
            FROM zssdtt000_stat_p
            FOR ALL ENTRIES IN lt_xvbap
            WHERE zstatp  = lt_xvbap-zstatp  AND
                  spras   = sy-langu.
        ENDIF.

        LOOP AT xvbap WHERE posnr   EQ vbap-posnr AND
                            zstatp  NE vbap-zstatp.

          xvbap-zstatp = vbap-zstatp.

          READ TABLE lt_zss INTO DATA(ls_zss) WITH KEY zstatp = vbap-zstatp.

          IF sy-subrc = 0.
            xvbap-zvtext = ls_zss-vtext.
          ENDIF.

          MODIFY xvbap.
        ENDLOOP.

        "JCB 05.12.24. 086606 - Rechazo posicion automatico cuando se cambia a estado A6 en oferta HPP
        DATA wl_zpar_of_rec_aut TYPE zparametros.
        SELECT SINGLE *
          INTO CORRESPONDING FIELDS OF wl_zpar_of_rec_aut
          FROM zparametros
          WHERE clave   = 'OF_REC_AUT' AND
                campo   = vbak-vkorg   AND
                valor   = vbap-werks   AND
                valor2  = vbap-zstatp.
        IF sy-subrc = 0.
          vbap-abgru = wl_zpar_of_rec_aut-atributo1.
        ENDIF.


      ELSE. "KO
        CONCATENATE 'Pos.' vbap-posnr ':' ls_return-message 'Status de posición no se modifica.' INTO lv_msg SEPARATED BY space.
        MESSAGE lv_msg TYPE 'W'.
        vbap-zstatp = *vbap-zstatp.
      ENDIF.

*<-- FIN FCARDONA 13.07.2022 encapsulamiento de modificación de status de usuario

    ENDIF.

  ENDIF.


*<-- FCARDONA - Sincronizar status de posición con status de usuario.

  CLEAR: l_modif.

  IF vbap-zzrecargo_montaje NE *vbap-zzrecargo_montaje .
    LOOP AT xvbap WHERE posnr = vbap-posnr
                    AND  zzrecargo_montaje NE vbap-zzrecargo_montaje .
*                      or  zzred ne vbap-zzred ).
      xvbap-zzrecargo_montaje = vbap-zzrecargo_montaje.

      l_modif = 'X'.

      MODIFY xvbap.
    ENDLOOP.
  ENDIF.

  IF vbap-zzimporte_troquel NE *vbap-zzimporte_troquel .
*    LOOP AT xvbap WHERE posnr = vbap-posnr "JCB 74151 - SD - Precio cliché y troquel cuando hay multiquantity
    LOOP AT xvbap WHERE ( posnr = vbap-posnr OR uepos = vbap-posnr )
                    AND  zzimporte_troquel NE vbap-zzimporte_troquel .
*                      or  zzred ne vbap-zzred ).
      xvbap-zzimporte_troquel = vbap-zzimporte_troquel.

      l_modif = 'X'.

      MODIFY xvbap.
    ENDLOOP.
  ENDIF.

  IF vbap-zzimporte_cliche NE *vbap-zzimporte_cliche .
*    LOOP AT xvbap WHERE posnr = vbap-posnr "JCB 74151 - SD - Precio cliché y troquel cuando hay multiquantity
    LOOP AT xvbap WHERE ( posnr = vbap-posnr OR uepos = vbap-posnr )
                    AND  zzimporte_cliche NE vbap-zzimporte_cliche .
*                      or  zzred ne vbap-zzred ).
      xvbap-zzimporte_cliche = vbap-zzimporte_cliche.

      l_modif = 'X'.

      MODIFY xvbap.
    ENDLOOP.
  ENDIF.

  IF vbap-zstatp NE *vbap-zstatp.
    CLEAR lt_xvbap[]. REFRESH lt_xvbap.
    lt_xvbap[] = xvbap[].
    DELETE lt_xvbap WHERE zstatp EQ vbap-zstatp.
    IF lt_xvbap[] IS NOT INITIAL.
      SELECT vtext zstatp
    INTO CORRESPONDING FIELDS OF TABLE lt_zss
    FROM zssdtt000_stat_p
        FOR ALL ENTRIES IN lt_xvbap
   WHERE zstatp = lt_xvbap-zstatp
     AND spras = sy-langu.
    ENDIF.

    LOOP AT xvbap WHERE ( posnr = vbap-posnr OR uepos = vbap-posnr )
                    AND  zstatp NE vbap-zstatp.
      xvbap-zstatp = vbap-zstatp.

      READ TABLE lt_zss INTO ls_zss WITH KEY zstatp = vbap-zstatp.
      IF sy-subrc = 0.
        xvbap-zvtext = ls_zss-vtext.
      ENDIF.
      xvbap-updkz = 'U'.
*      L_MODIF = 'X'. "JCB: Creo que esto no va aquí porque actualizamos una fila que no es la tratada en este momento
      MODIFY xvbap.
    ENDLOOP.
  ENDIF.


  "JCB 31.10.22 SD 74237. Completar campo 'Cantidad anual'
  IF vbap-kwmeng NE *vbap-kwmeng.
    LOOP AT xvbap WHERE posnr = vbap-posnr AND  zzsupanm2 IS INITIAL.
      xvbap-zzsupanm2 = vbap-kwmeng.
      l_modif = 'X'.
      MODIFY xvbap.
    ENDLOOP.
  ENDIF.







  DATA: wa_vbap  TYPE vbap,
        lv_mtart TYPE mtart.

  IF xvbak-vkorg = '4000'.
* Informamos el Producto de la venta siguiendo las siguiente casuísticas:
*  Si estamos en una posición principal (el campo VBAP-UEPOS vale 0 o inicial),
*   llevaremos al nuevo campo el valor VBAP-MATNR.
*  Si estamos en una posición secundaria (el campo VBAP-UEPOS tiene el valor de
*   la posición padre). Recuperaremos el material de la posición padre y si es
*   del tipo de material de este (buscaremos en la tabla MARA el campo MTART) es
*   ZCON, entonces llevaremos al campo Producto de la venta el material de la
*   posición superior. Si el material superior es de otro tipo diferente a ZCON,
*   llevaremos a la posición el mismo material de la posición inferior.
    IF vbap-uepos IS INITIAL.
      CLEAR: lv_mtart.
      SELECT SINGLE mtart FROM mara
        INTO lv_mtart
       WHERE matnr = vbap-matnr.
*      IF lv_mtart = 'ZSER'.
*        CLEAR: vbap-zzmatnrv.
      IF lv_mtart NE 'ZSER'.
*      ELSE.
        vbap-zzmatnrv  = vbap-matnr.
      ENDIF.
*      MODIFY vbap.
    ELSE.
      READ TABLE xvbap INTO wa_vbap WITH KEY posnr = vbap-uepos.
      IF sy-subrc = 0.
        SELECT SINGLE mtart FROM mara
          INTO lv_mtart
          WHERE matnr = wa_vbap-matnr.
*
        IF lv_mtart = 'ZCON'.
          vbap-zzmatnrv =  wa_vbap-matnr.
***        ELSEIF lv_mtart = 'ZSER'.
***          CLEAR: vbap-zzmatnrv.
        ELSE.
          vbap-zzmatnrv  = vbap-matnr.
        ENDIF.
*        MODIFY vbap.
      ENDIF.
    ENDIF.

*   Valor por defecto en los pedidos de ventas
    IF vbap-werks IS NOT INITIAL.
      IF vbap-lgort IS INITIAL.
        IF xvbak-auart = 'ZRE2' OR xvbak-auart = 'ZRE'.
          vbap-lgort = '4010'.
        ELSE.
          IF vbap-vstel IS INITIAL OR vbap-vstel = '4000'.
*            vbap-lgort = '1400'.
          ELSE.
            CASE vbap-vstel.
              WHEN 'M001'.
                vbap-lgort = 'M001'.
              WHEN 'M002'.
                vbap-lgort = 'M002'.
              WHEN 'M003'.
                vbap-lgort = 'M003'.
              WHEN 'M004'.
                vbap-lgort = 'M004'.
              WHEN 'M005'.
                vbap-lgort = 'M005'.
              WHEN OTHERS.
*                vbap-lgort = '1400'.
            ENDCASE.
          ENDIF.
        ENDIF.
*        MODIFY vbap.
      ENDIF.
    ENDIF.
  ENDIF.

*-> INI FCARDONA 18.01.2022 GAPSD032 añadir campos Z oferta

  DATA: ls_new_komv TYPE komv.

  "Recorremos la tabla XKOMV para ver si hay cambios y actualizar los precios
****  LOOP AT xkomv WHERE kposn = vbap-posnr AND ( kschl = 'ZR01' OR kschl = 'ZTRO' OR kschl = 'ZCLI' ).
****    CASE xkomv-kschl.
****      WHEN 'ZR01'.
****        IF ( xkomv-kbetr NE vbap-zzrecargo_montaje ).
****
****          MOVE vbap-zzrecargo_montaje TO xkomv-kbetr.
****          xkomv-updkz = abap_true.
****
****          MODIFY xkomv.
****
****        ENDIF.
****
****        PERFORM preisfindung_gesamt USING 'C'.
****
****      WHEN 'ZTRO'.
****
****        IF ( xkomv-kbetr NE vbap-zzimporte_troquel ).
****
****          MOVE vbap-zzimporte_troquel TO xkomv-kbetr.
****          xkomv-updkz = abap_true.
****
****          MODIFY xkomv.
****
****        ENDIF.
****
****        PERFORM preisfindung_gesamt USING 'C'.
****
****      WHEN 'ZCLI'.
****
****        IF ( xkomv-kbetr NE vbap-zzimporte_cliche ).
****
****          MOVE vbap-zzimporte_cliche TO xkomv-kbetr.
****          xkomv-updkz = abap_true.
****
****          MODIFY xkomv.
****
****        ENDIF.
****
****        PERFORM preisfindung_gesamt USING 'C'.
****
****    ENDCASE.
****
****  ENDLOOP.

  IF l_modif = 'X'.
    PERFORM preisfindung_gesamt USING 'C'.
  ENDIF.

*<-- FIN FCARDONA 18.01.2022 GAPSD032 añadir campos Z oferta

*  SMT - INI  08.02.2022 - Borrar objeto de imputación para OF.

  SELECT SINGLE COUNT(*) FROM zssdt000_copof WHERE auarv =  tvcpa-auarv.
  IF sy-subrc = 0.
    CLEAR: cvbap-sobkz, cvbap-posnv, cvbap-vbelv.
  ENDIF.

*  SMT - FIN  08.02.2022 - Borrar objeto de imputación para OF.


  "PaFi Aicomp 06.05.22 Proyecto Ventas Packaging
  "JBL 22/11/2022 We need to check CAD status before ZSTATP is changed to prevent unwanted changes
  "This is moved to line 448 from line 715
* DATA: lr_sdu TYPE REF TO ycl_hp_sdu.

* CREATE OBJECT lr_sdu.
* IF lr_sdu IS BOUND.
*   lr_sdu->move_field_to_vbap( EXPORTING if_tabix = svbap-tabix
*                                         is_old_vbap = *vbap
*                                        is_vbak  = vbak
*                               CHANGING  cs_vbap  = vbap
*                                         ct_xvbap = xvbap[] ).
* ENDIF.
  "End PaFi 03.05.22
**
***--> FCARDONA - Mover status a status de usuario
**
************************************************************************
*** Lógica
************************************************************************
**
*** Modificamos estado para cada posición.
**
**  CLEAR: wa_vbap, lv_estat, lv_msg.
**
**  READ TABLE xvbap WITH KEY posnr = vbap-uepos.
**
**  IF ( sy-subrc EQ 0 AND xvbap-zstatp NE vbap-zstatp ).
**
**    SELECT SINGLE estat
**      FROM tj30t
**      INTO lv_estat
**     WHERE txt04 = xvbap-zstatp
**       AND STSMA = 'ZS000001'
**       AND spras = 'S'.
**
**    IF ( lv_estat IS NOT INITIAL ).
**
**      CALL FUNCTION 'STATUS_CHANGE_EXTERN'
**        EXPORTING
**          objnr                     = vbap-objnr
**          user_status               = lv_estat
**       EXCEPTIONS
**         object_not_found          = 1
**         status_inconsistent       = 2
**         status_not_allowed        = 3
**         OTHERS                    = 4
**                .
**      IF ( sy-subrc <> 0 ).
**        CONCATENATE 'Pos.' xvbap-posnr ':' 'No es posible modificar el status de usuario.' INTO lv_msg SEPARATED BY space.
**        MESSAGE lv_msg TYPE 'W'.
**        xvbap-zstatp = vbap-zstatp.
**
**      ENDIF.
**
**    ENDIF.
**
**  ENDIF.
**









ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_MOVE_FIELD_TO_VBEP                              *
*---------------------------------------------------------------------*
*       This userexit can be used to move some fields into the sales  *
*       dokument schedule line workaerea VBEP                         *
*                                                                     *
*       SVBEP-TABIX = 0:  Create schedule line                        *
*       SVBEP-TABIX > 0:  Change schedule line                        *
*                                                                     *
*       This form is called at the end of form VBEP_FUELLEN.          *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_move_field_to_vbep.

*  VBEP-zzfield = xxxx-zzfield2.

ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_MOVE_FIELD_TO_VBKD                              *
*---------------------------------------------------------------------*
*       This userexit can be used to move some fields into the sales  *
*       dokument business data workaerea VBKD                         *
*                                                                     *
*       SVBKD-TABIX = 0:  Create data                                 *
*       SVBKD-TABIX > 0:  Change data                                 *
*                                                                     *
*       This form is called at the end of form VBKD_FUELLEN.          *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_move_field_to_vbkd.

*  VBKD-zzfield = xxxx-zzfield2.

* Variables a utilizar:
  DATA: BEGIN OF t_knvp OCCURS 0.
          INCLUDE STRUCTURE knvp.
        DATA: END OF t_knvp.
  DATA: nped_cli LIKE vbkd-bstkd,
        fped_cli LIKE vbkd-bstdk.
  CLEAR: t_knvp.
  REFRESH: t_knvp.

** EBA 24/04/2014.
** Heredar el campo Zona de ventas (VBKD-BZIRK) a partir de los datos
** maestros del Destinatario de mercancías del documento
*  SELECT SINGLE bzirk FROM knvv INTO vbkd-bzirk
*     WHERE kunnr = kuwev-kunnr
*       AND vkorg = vbak-vkorg
*       AND vtweg = vbak-vtweg
*       AND spart = vbak-spart.

* EBA 20/07/2014. AÑADO EL Nº DE PEDIDO DEL CLIENTE Y LA FECHA DEL
* PEDIDO DEL CLIENTE ORIGINAL PARA PODER TRAZARLO AL DOC. ORGIEN,
* EN CASO DE QUE EL DOCUMENTO SE CREE CON REFERENCIA A UNA FACTURA Y
* SEA UNA DEVOLUCIÓN. AÑADO LA COMPROBACIÓN DE QUE EL Nº DE PEDIDO DE
* CLIENTE NO ESTÉ RELLENO PARA NO BORRARLO EN VL02N.
  IF vbak-vbtyp = 'H' AND vbkd-bstkd IS INITIAL.
    CLEAR: nped_cli, fped_cli.

    SELECT SINGLE bstkd bstdk FROM vbkd INTO (nped_cli, fped_cli)
     WHERE vbeln = cvbrp-aubel
       AND posnr = cvbrp-aupos.
    vbkd-bstkd = nped_cli.
    vbkd-bstdk = fped_cli.
    IF sy-subrc <> 0.
      SELECT SINGLE bstkd bstdk FROM vbkd INTO (nped_cli, fped_cli)
       WHERE vbeln = cvbrp-aubel.
      vbkd-bstkd = nped_cli.
      vbkd-bstdk = fped_cli.
    ENDIF.
  ENDIF.


* INI CGIJON - 08.08.19 - SAT 7000027015 - ticket 56481
  DATA: lv_zterm TYPE vbkd-zterm.

  IF vbak-vkorg = '4000' AND vbak-vbtyp = 'C'.

    lv_zterm = xvbkd-zterm.

    IF svbkd-tabix = 0. "Create data
      IF xvbkd-zterm IS NOT INITIAL AND xvbkd-zterm <> vbkd-zterm.
        vbkd-zterm = lv_zterm.
        MESSAGE i056(zsd) WITH 'La condición de pago no puede modificarse. Por defecto es' xvbkd-zterm.
      ENDIF.

    ELSE. "Change data
      IF xvbkd-zterm <> vbkd-zterm.
        vbkd-zterm = lv_zterm.
        MESSAGE i056(zsd) WITH 'La condición de pago no puede modificarse.' 'Por defecto es' xvbkd-zterm.
      ENDIF.
    ENDIF.
  ENDIF.
* FIN CGIJON - 08.08.19 - SAT 7000027015 - ticket 56481


ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_NUMBER_RANGE                                    *
*---------------------------------------------------------------------*
*       This userexit can be used to determine the numberranges for   *
*       the internal document number.                                 *
*                                                                     *
*       US_RANGE_INTERN - internal number range                       *
*                                                                     *
*       This form is called from form BELEG_SICHERN                   *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_number_range USING us_range_intern.

* Example: Numer range from TVAK like in standard
* US_RANGE_INTERN = TVAK-NUMKI.

ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_PRICING_PREPARE_TKOMK                           *
*---------------------------------------------------------------------*
*       This userexit can be used to move additional fields into the  *
*       communication table which is used for pricing:                *
*                                                                     *
*       TKOMK for header fields                                       *
*                                                                     *
*       This form is called from form PREISFINDUNG_VORBEREITEN.       *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_pricing_prepare_tkomk.

*  TKOMK-zzfield = xxxx-zzfield2.

*---------------------------------------------------------------------*
* AMPLIACIÓN KOMK PARA CIPASI
*---------------------------------------------------------------------*
  SELECT SINGLE busab FROM knb1
    INTO tkomk-zzbusab
    WHERE bukrs = tkomk-bukrs AND
          kunnr = tkomk-kunnr.


  "JCB 27.06.24. 83171 - Añadir campo ZZPSTLZ codigo postal secuencia acceso
  "El valor lo tenemos en KNA1-PSTLZ. A KNA1 entramos con KNA1  KUNNR = VBPA  KUNNR.
  "VBPA  KUNNR lo obtenemos con VBPA  VBELN = Nº Pedido & VBPA  POSNR = VACIO & VBPA  PARVW = WE.
  READ TABLE xvbpa ASSIGNING FIELD-SYMBOL(<fs_xvbpa>) WITH KEY vbeln = vbak-vbeln
                                                               posnr = '000000'
                                                               parvw = 'WE'.
  IF sy-subrc = 0.
    SELECT SINGLE pstlz
      INTO tkomk-zzpstlz
      FROM kna1
      WHERE kunnr = <fs_xvbpa>-kunnr.
  ENDIF.



  "MTS 16.01.2024 Comentado para que AICOMP pueda realizar cambios en el código y transportarlo
  "ASC >>> 28.12.23 Royalties LIDL
*  READ TABLE xvbpa INTO DATA(ls_xvbpa) WITH KEY parvw = 'R1'.
*  IF sy-subrc = 0.
*    tkomk-zroy_lidl = ls_xvbpa-lifnr.
*  ENDIF.
  "ASC <<< 28.12.23 Royalties LIDL
  "FIN MTS 16.01.2024 Comentado para que AICOMP pueda realizar cambios en el código y transportarlo

ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_PRICING_PREPARE_TKOMP                           *
*---------------------------------------------------------------------*
*       This userexit can be used to move additional fields into the  *
*       communication table which is used for pricing:                *
*                                                                     *
*       TKOMP for item fields                                         *
*                                                                     *
*       This form is called from form PREISFINDUNG_VORBEREITEN.       *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_pricing_prepare_tkomp.

*  TKOMP-zzfield = xxxx-zzfield2.
* EBA. 10/06/2014. Determinación de precios intercompañía.
* Se rellenan los campos de Org. Ventas, Canal y Sector intercompañía.
* Se trata de dar valor al campo Organización de Ventas Interna
* (ZZVKOIV), Canal Interno (ZZVTWIV), y el Sector (ZZSPAIV) para que
* en las ventas a clientes finales, se pueda determinar el coste de
* la compra intercompañía que se realizará al utilizar centros de
* distintas sociedades.
  SELECT * FROM t001w WHERE werks = vbap-werks.
    tkomp-zzvkoiv = t001w-vkorg.
    tkomp-zzvtwiv = t001w-vtweg.
    tkomp-zzspaiv = t001w-spart.
  ENDSELECT.

* EBA. 08/06/2014. Alimentar el campo ZZCALIDAD para determinar precios.
  SELECT SINGLE zzcalidad FROM mara INTO tkomp-zzcalidad
     WHERE matnr = xvbap-matnr.

* EBA. 02/01/2017. Alimentar el campo ZZGRAMAJE para determinar precios.
  SELECT SINGLE zzgramaje FROM mara INTO tkomp-zzgramaje
     WHERE matnr = xvbap-matnr.

*---------------------------------------------------------------------*
* AMPLIACIÓN KOMP PARA CIPASI
*---------------------------------------------------------------------*
  tkomp-zzlgort = xvbap-lgort.
  "EMP: 15.12.21
  tkomp-zzmontaje = xvbap-zzmontaje.
  "FIN EMP: 15.12.21

* INI CGIJON - 02.04.20 - SAT 7000031049 - TICKET 60239
* validación a nivel de posición del pedido de ventas para verificar que
* si el valor de la clase de condición ZPR0 es inferior al valor de
* la clase de condición VPRS, no permita guardar el documento de venta.
  IF vbak-vkorg = '4000'.
    DATA: lv_zpr0 TYPE kwert,
          lv_vprs TYPE kwert.

    READ TABLE xkomv INTO DATA(wa_zpr0) WITH KEY kposn = vbap-posnr
                                                 kschl = 'ZPR0'.
    IF sy-subrc = 0.
      lv_zpr0 = wa_zpr0-kwert. "( wa_zpr0-kwert / wa_zpr0-kumza ) / wa_zpr0-kumne.

      READ TABLE xkomv INTO DATA(wa_vprs) WITH KEY kposn = vbap-posnr
                                                   kschl = 'VPRS'.
      IF sy-subrc = 0.
        lv_vprs =  wa_vprs-kwert. "( wa_vprs-kwert / wa_vprs-kumza ) / wa_vprs-kumne.

        IF lv_zpr0 < lv_vprs.
          MESSAGE w056(zsd) WITH 'Error en la posición' vbap-posnr
                                 'El pvp es inferior al coste producción'
                                  DISPLAY LIKE 'E'.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
* FIN CGIJON - 02.04.20 - SAT 7000031049 - TICKET 60239

*  SMT - Añadir ruta y puesto expedición
  tkomp-zzroute = vbap-route.
  tkomp-zzvstel = vbap-vstel.
*  SMT - Añadir ruta y puesto expedición

*  DF - Añadir Tipo de material
  DATA: l_mtart LIKE mara-mtart.
  CLEAR l_mtart.
  SELECT SINGLE mtart
      INTO l_mtart
      FROM mara
      WHERE matnr = tkomp-matnr.

  tkomp-mtart = l_mtart.

*  DF - 05072023_Añadir BEDAE
  DATA: l_bedae LIKE vbap-bedae.
  tkomp-zzbedae = vbap-bedae.

*  "PaFi Aicomp 03.05.22 Proyecto Ventas Packaging
  TRY.
      ycl_hp_sdu=>pricing_prepare_tkomp_mv45a( EXPORTING is_vbap  = vbap
                                                         it_xvbap = xvbap[]
                                               CHANGING  cs_tkomp = tkomp ).
    CATCH /vcxi/cx_ckx.
  ENDTRY.

ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_READ_DOCUMENT                                   *
*---------------------------------------------------------------------*
*       This userexit can be used to read data in additional tables   *
*       when the program reads a sales document.                      *
*                                                                     *
*       This form is called at the end of form BELEG_LESEN.           *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_read_document.

  READ TABLE xvbpa INTO wg_destinatario_actual WITH KEY vbeln = vbak-vbeln
                                                        posnr = '000000'
                                                        parvw = 'WE'.



ENDFORM.
*eject

*---------------------------------------------------------------------*
*       FORM USEREXIT_SAVE_DOCUMENT                                   *
*---------------------------------------------------------------------*
*       This userexit can be used to save data in additional tables   *
*       when a document is saved.                                     *
*                                                                     *
*       If field T180-TRTYP contents 'H', the document will be        *
*       created, else it will be changed.                             *
*                                                                     *
*       This form is called at from form BELEG_SICHERN, before COMMIT *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_save_document.

* APC20241018 Autorización según margen de contribución
  zcl_exits_sd=>autorizacion_margen_contrib( EXPORTING solo_grabar = 'X'
                                             CHANGING  vbak  = vbak
                                                       xvbap = xvbap[]
                                                       yvbap = yvbap[]
                                                       xkomv = xkomv[]
                                                       ).

*APC20240625 En algunas ocasiones, cuando venimos del configurador, da un error de cálculo de costes
* y el pedido se graba correctamente, pero inmediamente después de ponerlo todo a blanco, vuelve a intentar grabar sin datos
* Como eso no debería suceder nunca, como mínimo damos un error
  IF vbak-kunnr IS INITIAL.
    MESSAGE 'Incoherencia grabando datos' TYPE 'E'.
  ENDIF.

* ini cgijon - 07.08.19 - sat 7000026842- Ticket ## 56273
  IF xvbuk-cmgst = 'B' AND vbkd-zterm = '0001'.
    MESSAGE 'Condición de pago cliente 0001: Pagadero inmediatamente sin DP' TYPE 'I'.
  ENDIF.
* fin cgijon - 07.08.19 - sat 7000026842- Ticket ## 56273

* Example:
* CALL FUNCTION 'ZZ_EXAMPLE'
*      IN UPDATE TASK
*      EXPORTING
*           ZZTAB = ZZTAB.




  "GAPSD084 - Aviso en el pedido de un precio con escalados
*Ir a la tabla VBAK y revisar el dato de KNUMV. Como esta es una comprobación que se tiene que hacer antes de guardar el pedido seguramente no tengamos aun numero
*de pedido por lo que habría que checkear en la tabla XVBAK.
*Con el dato de KNUMV hay que ir a la tabla
*KONV con KONV  KNUMV = XVBAK  KNUMV & KONV  KSCHL = ZPRC &
*KONV  KPOSN = Nº posición que hemos introducido en el pedido de ventas.
*
*Con estos datos debemos de obtener el valor de KONV  KNUMH y a continuación se debe de ir a la tabla KONP con KONP  KNUMH = KONV  KNUMH
*y revisar el valor de STFKZ. Si el campo STFKZ tiene valor entonces debe de aparecer el mensaje de tipo warning y si el campo está vacío no debe de aparecer nada.


*Le he estado echando un ojo a esto y realmente a KONV entramos solo con KONV  KNUMV = VBAK  KNUMV y KONV  KSCHL = ZPRC y
*tenemos que revisar todos los registros si alguno tiene escalados. Si alguno lo tiene, recuperamos el valor de KPOSN para indicar cual es la posición (o posiciones) que tienen escalas.


*  DATA tl_kposn TYPE TABLE OF konv-kposn.
  DATA: vl_lista_kposn TYPE text100.
  IF t180-trtyp = 'H'. "En creación
    IF xvbak-auart = 'ZTA2' OR xvbak-auart = 'ZKB' OR xvbak-auart = 'ZG' OR  xvbak-auart = 'ZRED'.
      LOOP AT xkomv ASSIGNING FIELD-SYMBOL(<fs_xkomv>) WHERE kschl = 'ZPRC' AND
                                                             stfkz <> space.
        IF vl_lista_kposn IS INITIAL.
          vl_lista_kposn = <fs_xkomv>-kposn.
        ELSE.
          vl_lista_kposn = |{ vl_lista_kposn }, { <fs_xkomv>-kposn }|.
        ENDIF.
      ENDLOOP.

*      SELECT konv~kposn
*        INTO TABLE tl_kposn
*        FROM konp INNER JOIN konv ON konv~knumh = konp~knumh
*        WHERE konv~knumv = xvbak-knumv AND
*              konv~kschl = 'ZPRC' AND
*              konp~stfkz  <> space.
*      LOOP AT tl_kposn ASSIGNING FIELD-SYMBOL(<fs_kposn>).
*        IF vl_lista_kposn IS INITIAL.
*          vl_lista_kposn = <fs_kposn>.
*        ELSE.
*          vl_lista_kposn = |{ vl_lista_kposn }, { <fs_kposn> }|.
*        ENDIF.
*      ENDLOOP.
*
*
      IF vl_lista_kposn IS NOT INITIAL.
        MESSAGE i002(zssd) WITH vl_lista_kposn. "Las siguientes posiciones tienen escalas: &
      ENDIF.
    ENDIF.
  ENDIF.





* Guardamos el nº de repartos por posición
  DATA: l_nrepartos TYPE zn_repartos.
  LOOP AT xvbap.
    IF NOT xvbap-vbeln IS INITIAL.
      DATA(l_vbeln) = xvbap-vbeln.
    ELSE.
      l_vbeln = vbak-vbeln.
    ENDIF.
    IF NOT l_vbeln IS INITIAL.
      CLEAR l_nrepartos.
      LOOP AT xvbep TRANSPORTING NO FIELDS WHERE vbeln = xvbap-vbeln
                                             AND posnr = xvbap-posnr.
        ADD 1 TO l_nrepartos.
      ENDLOOP.
      UPDATE zvbap_hpg
         SET n_repartos = l_nrepartos
       WHERE vbeln = l_vbeln
         AND posnr = xvbap-posnr.
      IF sy-subrc NE 0.
        DATA zvbap_hpg TYPE zvbap_hpg.
        zvbap_hpg-vbeln = l_vbeln.
        zvbap_hpg-posnr = xvbap-posnr.
        zvbap_hpg-n_repartos = l_nrepartos.
        INSERT zvbap_hpg FROM zvbap_hpg.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDFORM.
*eject
*---------------------------------------------------------------------*
*       FORM USEREXIT_SAVE_DOCUMENT_PREPARE                           *
*---------------------------------------------------------------------*
*       This userexit can be used for changes or checks, before a     *
*       document is saved.                                            *
*                                                                     *
*       If field T180-TRTYP contents 'H', the document will be        *
*       created, else it will be changed.                             *
*                                                                     *
*       This form is called at the beginning of form BELEG_SICHERN    *
*                                                                     *
*---------------------------------------------------------------------*
FORM userexit_save_document_prepare.

  DATA: wa_vbap  TYPE vbap,
        lv_mtart TYPE mtart,
        lv_posnr TYPE posnr.

  DATA l_matkl TYPE matkl.

*APC20240625 En algunas ocasiones, cuando venimos del configurador, da un error de cálculo de costes
* y el pedido se graba correctamente, pero inmediamente después de ponerlo todo a blanco, vuelve a intentar grabar sin datos
* Como eso no debería suceder nunca, como mínimo damos un error
  IF vbak-kunnr IS INITIAL.
    MESSAGE 'Incoherencia grabando datos' TYPE 'E'.
  ENDIF.

  LOOP AT xvbap WHERE pstyv = 'ZSC1' AND updkz NE 'D'.
    SELECT SINGLE matnr FROM marc
      INTO xvbap-matnr
     WHERE matnr = xvbap-matnr
       AND werks = xvbap-werks
       AND mmsta = 'Z4'.
    IF sy-subrc = 0.
      MESSAGE |Material { xvbap-matnr } bloqueado para fabricar| TYPE 'E'.
    ENDIF.
  ENDLOOP.

  "JCB 13.09.22. Comprobar campo producto de venta sólo en:
  " - 3000 (Papelera LAlquería)
  " - 3020 (Papelera de Sarrià)
  " - 4000 (Cipasi).
  IF vbak-vkorg = '3000' OR vbak-vkorg = '3020' OR vbak-vkorg = '4000'.
    LOOP AT xvbap INTO wa_vbap WHERE zzmatnrv IS INITIAL.
      SELECT SINGLE mtart FROM mara
                INTO lv_mtart
                WHERE matnr = wa_vbap-matnr.
      CHECK lv_mtart = 'ZSER'.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = wa_vbap-posnr
        IMPORTING
          output = lv_posnr.

      MESSAGE e056(zsd) WITH 'En la posición' lv_posnr 'Debe cumplimentar el campo Producto de Venta'.
    ENDLOOP.
  ENDIF.



  "JCB 28.11.24. 86716. No permitir KSV en tipo de posicion ZSC1
  LOOP AT xvbap INTO wa_vbap.
    IF wa_vbap-pstyv = 'ZSC1' AND vbap-bedae = 'KSV'.
      MESSAGE e003(zssd) WITH vbap-bedae wa_vbap-pstyv. "No se permite la clase de necesidad KSV en este tipo de posición.
    ENDIF.
  ENDLOOP.


*  Interlocutor SB en consigna obligatorio
  IF xvbak_updkz <> 'D'.
    SELECT SINGLE COUNT( * ) FROM zssdt000_auart_c WHERE auart = vbak-auart AND active = 1.
    IF sy-subrc = 0.
      READ TABLE xvbpa INTO DATA(l_vbpa) WITH KEY parvw = 'SB'.
      IF sy-subrc <> 0.
        MESSAGE e000(zssd) WITH 'SB'.
      ENDIF.
    ENDIF.
  ENDIF.


  "JCB 28.11.24. 85817.  ERROR DESTINATARIO EN STOCK DE CONSIGNA
  "Igualar siempre la funcion de interlocutor SB con el valor que tenga el WE
  READ TABLE xvbpa ASSIGNING FIELD-SYMBOL(<fs_xvpa_destinatario>) WITH KEY parvw = 'WE'.
  IF sy-subrc = 0 AND <fs_xvpa_destinatario>-updkz CA 'IU'.
    READ TABLE xvbpa ASSIGNING FIELD-SYMBOL(<fs_xvpa_consigna>) WITH KEY parvw = 'SB'.
    IF sy-subrc = 0 AND <fs_xvpa_consigna>-updkz <> 'D'.
      DATA wl_vbpa_aux TYPE vbpa.
      MOVE-CORRESPONDING <fs_xvpa_destinatario> TO wl_vbpa_aux.
      MOVE-CORRESPONDING wl_vbpa_aux TO <fs_xvpa_consigna>.
      <fs_xvpa_consigna>-parvw = 'SB'.

      "Marcamos como modificado
      IF <fs_xvpa_consigna>-updkz IS INITIAL.
        <fs_xvpa_consigna>-updkz = 'U'.
      ENDIF.
    ENDIF.
  ENDIF.





*49645-Hinojosa Paper - HJNS Paper, validación en pedidos ZINT y pedidos venta para asegurar código 2ª
  LOOP AT xvbap INTO wa_vbap WHERE updkz NE 'D'.
    SELECT SINGLE matkl FROM mara INTO l_matkl WHERE matnr = wa_vbap-matnr.
    IF sy-subrc EQ 0 AND l_matkl = '10199' AND xvbak-zzsegcal NE '2'.
      MESSAGE 'Materiales Hinojosa Non-Standard Paper permitidos únicamente en pedidos de 2ª calidad' TYPE 'E'.
    ENDIF.
  ENDLOOP.

  "ASC >>> 21.09.2022 Avisar en caso de que el calculo de coste sea erroneo
  DATA: BEGIN OF t_keko OCCURS 20.
          INCLUDE STRUCTURE keko.
        DATA: END OF t_keko.
  FIELD-SYMBOLS <fs_keko> TYPE t_keko.

  ASSIGN ('(saplckdi)t_keko[]') TO <fs_keko>.
  IF sy-subrc = 0.
    LOOP AT xvbap INTO wa_vbap WHERE updkz NE 'D'.

      READ TABLE <fs_keko> WITH KEY matnr  = wa_vbap-matnr
                                    loekz  = space
                                    maxmsg = 'E' TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        MESSAGE i398(00) WITH 'Error en el calculo del product costing'.
      ENDIF.
    ENDLOOP.
  ENDIF.

  "77935 - DIFERENTES TOLERANCIAS ENTREGA MISMO CLIENTE MISMO MATERIAL
  DATA: wl_vbpa TYPE vbpa,
        wl_knvv TYPE knvv.
  IF xvbak-vkorg <> '3000' AND xvbak-vkorg <> '3020' AND xvbak-vtweg = '10' AND xvbak-spart = '10'.
    LOOP AT xvbap[] ASSIGNING FIELD-SYMBOL(<fs_xvbap>) WHERE updkz NE 'D'.
      CHECK <fs_xvbap>-uebto IS INITIAL OR <fs_xvbap>-untto IS INITIAL.
      READ TABLE xvbpa INTO wl_vbpa WITH KEY vbeln = <fs_xvbap>-vbeln
                                             posnr = <fs_xvbap>-posnr
                                             parvw = 'WE'.

      IF sy-subrc <> 0.
        READ TABLE xvbpa INTO wl_vbpa WITH KEY vbeln = <fs_xvbap>-vbeln
                                               posnr = '000000'
                                               parvw = 'WE'.


      ENDIF.
      IF sy-subrc = 0.
        SELECT SINGLE kunnr vkorg vtweg spart uebto untto
          INTO CORRESPONDING FIELDS OF wl_knvv
          FROM knvv
          WHERE kunnr = wl_vbpa-kunnr AND
                vkorg = xvbak-vkorg   AND
                vtweg = xvbak-vtweg   AND
                spart = xvbak-spart.
        IF sy-subrc = 0.
          IF <fs_xvbap>-uebto IS INITIAL. <fs_xvbap>-uebto = wl_knvv-uebto. ENDIF.
          IF <fs_xvbap>-untto IS INITIAL. <fs_xvbap>-untto = wl_knvv-untto. ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

* Ini BG 18.12.2023 - GAPSD061 Chequeo en oferta condición ZR01
  IF sy-tcode = 'VA21' OR sy-tcode = 'VA22'.
    DATA: e_error TYPE  flag,
          e_posnr TYPE  posnr,
          e_lgort TYPE  lgort_d,
          e_msg   TYPE bapi_msg.

    CALL FUNCTION 'ZSSD061_CHEQUEO_ZR01'
      EXPORTING
        i_vbak  = vbak
      IMPORTING
        e_error = e_error
        e_posnr = e_posnr
        e_lgort = e_lgort
        e_msg   = e_msg
      TABLES
        t_vbap  = xvbap
        t_komv  = xkomv.

    IF e_error IS NOT INITIAL.
      MESSAGE e_msg TYPE 'E'.
    ENDIF.
  ENDIF.
* Fin BG 18.12.2023 - GAPSD061 Chequeo en oferta condición ZR01

*  SMT - INI - Si todo va bien lanzamos IDOC de pedidos.

  CALL FUNCTION 'ZSSD_SEND_IDOC_SALES' IN UPDATE TASK
    EXPORTING
      i_handle = vbak-handle
      i_trtyp  = t180-trtyp.

*  SMT - FIN

  "JCB 02.03.2023. 75597 - SD - Bloqueo de entrega ZS
  DATA: wl_xvbep LIKE xvbep.
  IF vbak-vkorg <> '3000' AND vbak-vkorg <> '3020' AND xvbap[] IS NOT INITIAL.
    LOOP AT xvbap ASSIGNING FIELD-SYMBOL(<fs_vbap>).
      READ TABLE yvbap ASSIGNING FIELD-SYMBOL(<fs_yvbap>) WITH KEY vbeln = <fs_vbap>-vbeln
                                                                   posnr = <fs_vbap>-posnr.

      CHECK sy-subrc = 0.
      CHECK <fs_vbap>-untto IS INITIAL.  "Comprobamos que el nuevo valor esté en blanco


      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_vbap-posnr
        IMPORTING
          output = lv_posnr.

      READ TABLE xvbep INTO wl_xvbep WITH KEY vbeln = <fs_vbap>-vbeln
                                              posnr = <fs_vbap>-posnr
                                              lifsp = 'ZS'.
      IF sy-subrc = 0.
*          MESSAGE e058(zsd) WITH lv_posnr.
        <fs_vbap>-untto = '99.9'.
*        <fs_vbap>-UEBTK = 'X'.

      ELSEIF wl_xvbep-lifsp IS INITIAL.
        "VBAP  UNTTO debe ser el mismo que el que tiene el destinatario de las mercancías.
        READ TABLE xvbpa INTO wl_vbpa WITH KEY vbeln = <fs_vbap>-vbeln
                                               posnr = <fs_vbap>-vbeln
                                               parvw = 'WE'.
        IF sy-subrc <> 0.
          READ TABLE xvbpa INTO wl_vbpa WITH KEY vbeln = <fs_vbap>-vbeln
                                                 posnr = '000000'
                                                 parvw = 'WE'.
        ENDIF.
        IF sy-subrc = 0.
          SELECT SINGLE kunnr vkorg vtweg spart untto
            INTO CORRESPONDING FIELDS OF wl_knvv
            FROM knvv
            WHERE kunnr = wl_vbpa-kunnr AND
                  vkorg = vbak-vkorg   AND
                  vtweg = vbak-vtweg   AND
                  spart = vbak-spart.
        ENDIF.
        IF sy-subrc = 0.
          <fs_vbap>-untto = wl_knvv-untto.
*        <fs_vbap>-UEBTK = space.
*            MESSAGE e059(zsd) WITH lv_posnr.


        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.




*      SELECT SINGLE mtart FROM mara
*                INTO lv_mtart
*                WHERE matnr = wa_vbap-matnr.
*      CHECK lv_mtart = 'ZSER'.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*        EXPORTING
*          input  = wa_vbap-posnr
*        IMPORTING
*          output = lv_posnr.
*
*      MESSAGE e056(zsd) WITH 'En la posición' lv_posnr 'Debe cumplimentar el campo Producto de Venta'.
*    ENDLOOP.
*si en el campo VBEP  LIFSP tiene el valor ZS. Si es así, entonces el campo VBAP  UNTTO debe tener valor 100.
*La forma de entrar en VBAP seria con VBAP  VBELN = VBEP  VBELN & VBAP  POSNR = VBEP  POSNR.
*
*Si luego quitamos el valor de VBEP  LIFSP entonces el valor de VBAP  UNTTO debe ser el mismo que el que tiene el destinatario de las mercancías.
*Para ello vamos a VBPA con VBPA  VBELN = VBAP  VBELN & VBPA - POSNR = VBAP  POSNR & VBPA  PARVW = WE,
*si no existe valor entonces entrar de la misma forma pero con VBPA  POSNR = vacio y obtener el valor del campo KUNNR.
*Después ir a KNVV con KNVV  KUNNR = VBPA  KUNNR & KNVV  VKORG = VBAK  VKORG & KNVV  VTWEG = VBAP  VTWEG & KNVV  SPART = VBPA  SPART
  "y obtener el valor de UNTTO.

*  LOOP AT xvbap INTO wa_vbap WHERE updkz NE 'D' and KZWI4 < 1000.
*      MESSAGE |Pos. { wa_vbap-posnr } es menor a 1.000 M²| TYPE 'W'.
*  ENDLOOP.

  "ASC >>>  17.12.2021 - GAPSD006 - Aviso de disponibilidad de stock de libre utilización
*  DATA: lv_active        TYPE active,
*        lv_continue_save TYPE flag.
*  CLEAR: lv_active, lv_continue_save.
*
*
*
*  CHECK vbak-vbtyp = 'C'. " SMT - 10.01.2022 - Solo debe saltar aviso en pedidos, no en ofertas.
*
*  IF sy-tcode EQ 'VA01' OR sy-tcode EQ 'VA02'.
*    LOOP AT xvbap INTO wa_vbap WHERE updkz EQ 'I'
*                                  OR updkz EQ 'U'.
*    ENDLOOP.
*    IF sy-subrc = 0.
*      SELECT SINGLE active FROM zssdt000_cond INTO lv_active WHERE vkorg = vbak-vkorg
*                                                               AND vtweg = vbak-vtweg
*                                                               AND auart = vbak-auart.
*      IF lv_active = 1 AND sy-subrc = 0.
*        CALL FUNCTION 'ZSD006_CHECK_STOCK_LIBRE'
*          EXPORTING
*            it_vbap         = xvbap[]
*          IMPORTING
*            e_continue_save = lv_continue_save.
*
*        IF lv_continue_save IS INITIAL.
***          CLEAR t180-trtyp.  -- SMT 31/01/2022 Comentamos la líena, da actualización cancelada
*          gf_exit_save_document_prepare = 'X'. "smt - 31/01/2022 Con esto evitamos que se guarde el pedido
*        ENDIF.
*      ENDIF.
*    ENDIF.
*  ENDIF.


  "ASC <<<  17.12.2021 - GAPSD006 - Aviso de disponibilidad de stock de libre utilización


    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""$"$\SE:(6) Forma USEREXIT_SAVE_DOCUMENT_PREPARE, Final                                                                                                       A
ENDFORM.
*eject

*&---------------------------------------------------------------------*
*&      Module  ZZPBO_DATOS_ADICIONALES_B  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE zzpbo_datos_adicionales_b OUTPUT.
  DATA g_zzsegcal TYPE zzsegcal.

  CLEAR g_zzsegcal.
  SELECT SINGLE texto INTO g_zzsegcal FROM ztsd0004 WHERE spras = sy-langu AND
                                                         zzsegal = vbak-zzsegcal.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  ZZ_F4_ZZSEGCAL  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE zz_f4_zzsegcal INPUT.
*TABLAS PARA MATCHCODE
  DATA: BEGIN OF it_match OCCURS 0,  "Esta tabla nos devuelve la ayuda
          shlpname  TYPE ddshretval-shlpname,
          fieldname TYPE ddshretval-fieldname,
          recordpos TYPE ddshretval-recordpos,
          fieldval  TYPE ddshretval-fieldval,
          retfield  TYPE ddshretval-retfield,
        END OF it_match.

* Esta tabla es donde almacenamos los resultados
  DATA: BEGIN OF it_t001l OCCURS 0,
          zzsegal TYPE zcod_sc,
          spras   TYPE spras,
          texto   TYPE zzsegcal,
        END OF it_t001l.

* buscamos el texto del código indicado como segunda calidad
  SELECT zzsegal spras texto FROM ztsd0004
    INTO TABLE it_t001l
    WHERE spras EQ sy-langu.

* Se hace uso de la función que convoca al matchcode y transforma nuestra tabla interna
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'ZZSEGAL'
      window_title    = 'Segunda Calidad'
      value_org       = 'S'
    TABLES
      value_tab       = it_t001l
      return_tab      = it_match
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.

* Si todo es correcto
  IF sy-subrc EQ 0.
*   Leemos lo que obtenermos y se lo pasamos a nuestro campo del dynpro
    READ TABLE it_match INDEX 1.
    MOVE it_match-fieldval TO vbak-zzsegcal.
    READ TABLE it_t001l INTO DATA(ls) WITH KEY zzsegal = vbak-zzsegcal.
    g_zzsegcal = ls-texto.

    PERFORM preisfindung_gesamt USING 'B'.
  ENDIF.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  ZZ_ZZSEGCAL  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE zz_zzsegcal INPUT.

  IF vbak-zzsegcal NE ''.
    SELECT SINGLE texto INTO g_zzsegcal FROM ztsd0004 WHERE spras = sy-langu AND
                                                          zzsegal = vbak-zzsegcal.
    IF sy-subrc NE 0.
      MESSAGE 'Codigo de calidad erróneo' TYPE 'E'.
    ELSE.
      PERFORM preisfindung_gesamt USING 'B'.
    ENDIF.
  ELSE.
    PERFORM preisfindung_gesamt USING 'B'.
  ENDIF.
ENDMODULE.
