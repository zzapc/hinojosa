***********************************************************************
* TIPO : MANTENIMIENTO
* TITULO : Mantenimiento parámetros
* DESCRIPCION : Mantenimiento parámetros
*
* AUTOR: Andrés Picazo                                FECHA: 01/03/2020
* ANALISTA: Andrés Picazo
*
***********************************************************************
REPORT  zparametros.

TABLES: zparametros,
        ztclave_param.

CLASS lcl_event_grid DEFINITION INHERITING FROM zcl_ap_alv_grid_eventos FINAL.
  PUBLIC SECTION.
    METHODS: data_changed REDEFINITION,
      user_command REDEFINITION,
      toolbar      REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF  t_listado,
             check      TYPE xfeld,
             lights     TYPE zico_estado_mensaje,
             clave      TYPE zparametros-clave,
             campo      TYPE zparametros-campo,
             valor      TYPE zparametros-valor,
             valor2     TYPE zparametros-valor2,
             valor3     TYPE zparametros-valor3,
             valor4     TYPE zparametros-valor4,
             atributo1  TYPE zparametros-atributo1,
             atributo2  TYPE zparametros-atributo2,
             atributo3  TYPE zparametros-atributo3,
             atributo4  TYPE zparametros-atributo4,
             atributo5  TYPE zparametros-atributo5,
             atributo6  TYPE zparametros-atributo6,
             atributo7  TYPE zparametros-atributo7,
             atributo8  TYPE zparametros-atributo8,
             atributo9  TYPE zparametros-atributo9,
             atributo10 TYPE zparametros-atributo10,
             comentario TYPE zparametros-comentario,
             aenam      TYPE zparametros-aenam,
             aedat      TYPE zparametros-aedat,
             aezet      TYPE zparametros-aezet,
             message    TYPE bapi_msg,
             style      TYPE lvc_t_styl,
             color      TYPE lvc_t_scol,
             updkz      TYPE char1,
             tabix      TYPE int4,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado     TYPE tt_listado,
          i_listado_ini TYPE tt_listado,
          campos_clave  TYPE string VALUE 'CAMPO,VALOR,VALOR2,VALOR3,VALOR4',
          tabix         TYPE sy-tabix.

    DATA: o_alv   TYPE REF TO zcl_ap_alv_grid,
          o_event TYPE REF TO lcl_event_grid.

    METHODS: buscar_datos REDEFINITION,

      validaciones IMPORTING !mod    TYPE abap_bool DEFAULT ''
                   CHANGING  listado TYPE t_listado ##NEEDED,

      status_dynpro_0100,
      command_dynpro_0100.

ENDCLASS.

DATA o_prog TYPE REF TO zcl_report ##NEEDED.

PARAMETERS: p_clave LIKE zparametros-clave MATCHCODE OBJECT
                                                     ztclave_param,
            p_campo LIKE zparametros-campo,
            p_valor LIKE zparametros-valor.

SELECTION-SCREEN SKIP 1.

PARAMETERS: p_alv  RADIOBUTTON GROUP g DEFAULT 'X' MODIF ID no,
            p_sm30 RADIOBUTTON GROUP g MODIF ID no.
SELECTION-SCREEN SKIP 1.
PARAMETERS p_vis AS CHECKBOX.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************
CLASS lcl_event_grid IMPLEMENTATION.
  METHOD toolbar.
    super->toolbar( e_object = e_object e_interactive = e_interactive ).

    add_boton( function = 'COPIAR' icon = icon_system_copy text = 'Copiar' quickinfo = 'Copiar' e_object = e_object ).
  ENDMETHOD.

  METHOD user_command.
    DATA: l_listado TYPE o_prog->t_listado,
          l_hay_sel TYPE c LENGTH 1.

    CASE e_ucomm.
      WHEN 'NUEVO'.
        l_listado-clave = p_clave.
        l_listado-campo = p_campo.
        l_listado-valor = p_valor.
        o_prog->tabix = o_prog->tabix + 1.
        l_listado-tabix = o_prog->tabix.
        o_prog->validaciones( EXPORTING mod = 'I' CHANGING listado = l_listado ).
        APPEND l_listado TO o_prog->i_listado.

        o_alv->refrescar_grid( ).
      WHEN 'BORRAR'.
        o_alv->comprobar_cambios( ).
        o_alv->set_marca_filas_sel( EXPORTING validar_seleccion = 'X' CHANGING t_tabla = o_prog->i_listado hay_sel = l_hay_sel ).
        IF l_hay_sel = 'X'.
          LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
            IF <listado>-updkz = 'I'.
              DELETE o_prog->i_listado.
            ELSEIF <listado>-updkz = 'D'.
              CLEAR: <listado>-updkz, <listado>-lights, <listado>-check.
              o_prog->validaciones( EXPORTING mod = 'U' CHANGING listado = <listado> ).
            ELSE.
              o_prog->validaciones( EXPORTING mod = 'D' CHANGING listado = <listado> ).
            ENDIF.
          ENDLOOP.
          o_alv->refrescar_grid( ).
        ENDIF.

      WHEN 'COPIAR'.
        o_alv->comprobar_cambios( ).
        o_alv->set_marca_filas_sel( EXPORTING validar_seleccion = 'X' CHANGING t_tabla = o_prog->i_listado hay_sel = l_hay_sel ).
        IF l_hay_sel = 'X'.
          LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
            CLEAR <listado>-check.
            l_listado = <listado>.
            o_prog->validaciones( EXPORTING mod = 'I' CHANGING listado = l_listado ).
            APPEND l_listado TO o_prog->i_listado.
          ENDLOOP.
          SORT o_prog->i_listado BY tabix.
          LOOP AT o_prog->i_listado ASSIGNING <listado>.
            <listado>-tabix = sy-tabix.
          ENDLOOP.
          o_alv->refrescar_grid( soft_refresh = '' ).
        ENDIF.
      WHEN OTHERS.
        super->user_command( e_ucomm = e_ucomm ).
    ENDCASE.
  ENDMETHOD.

  METHOD data_changed.
    ini_data_changed( cambios = er_data_changed->mt_good_cells  ).

    LOOP AT i_cambios_celda INTO cambio_celda.
      AT NEW row_id.
        READ TABLE o_prog->i_listado INTO DATA(l_listado_ini) INDEX cambio_celda-row_id. "#EC CI_SUBRC
        DATA(l_listado) = l_listado_ini.
      ENDAT.

      set_valor_mod( CHANGING datos = l_listado ).

      AT END OF row_id.
        o_prog->validaciones( EXPORTING mod = 'U' CHANGING listado = l_listado ).
        MODIFY o_prog->i_listado FROM l_listado INDEX cambio_celda-row_id.
        actualizar_fila( fila_ini = l_listado_ini fila_fin = l_listado er_data_changed = er_data_changed fila = cambio_celda-row_id ).
      ENDAT.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD buscar_datos.
    sgpi_texto( 'Seleccionando datos'(sda) ).
    CLEAR i_listado.
    SELECT * FROM zparametros
      INTO CORRESPONDING FIELDS OF TABLE i_listado
     WHERE clave = p_clave
      ORDER BY PRIMARY KEY.

    IF NOT p_campo IS INITIAL.
      DELETE i_listado WHERE campo <> p_campo.
    ENDIF.

    IF NOT p_valor IS INITIAL.
      DELETE i_listado WHERE valor <> p_valor.
    ENDIF.

    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
      tabix = sy-tabix.
      <listado>-tabix = tabix.
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

      validaciones( CHANGING listado = <listado> ).
    ENDLOOP.

    i_listado_ini = i_listado.
  ENDMETHOD.                                               " seleccionar_datos

  METHOD status_dynpro_0100.
    IF inicio IS NOT INITIAL.
      RETURN.
    ENDIF.

    CONCATENATE 'Mantenimiento parámetros' p_clave p_campo INTO string SEPARATED BY space.
    status_dynpro( EXPORTING cprog = 'ZAP_STATUS' status = 'ST_DYN' titulo = string CHANGING i_listado = i_listado ).

    inicio = 'X'.

    o_alv->registrar_mod( ).
    o_alv->set_layout( ancho_optimizado = 'X' no_rowmove = 'X' no_rowins = 'X' style = 'STYLE' colort = 'COLOR' ).
    o_alv->quitar_opciones( cl_gui_alv_grid=>mc_fc_refresh ).
    o_alv->set_campos_tabint( i_listado[] ).
    o_alv->set_field_quitar( 'CHECK,MESSAGE,TABIX,UPDKZ' ).
    o_alv->set_field_noout( 'CLAVE' ).
    IF NOT p_campo IS INITIAL.
      o_alv->set_field_noout( 'CAMPO' ).
    ENDIF.
    IF NOT p_valor IS INITIAL.
      o_alv->set_field_noout( 'VALOR' ).
    ENDIF.

    DEFINE set_campo.
      IF NOT ztclave_param-&1 IS INITIAL.
        IF ztclave_param-&1 = 'INVISIBLE'.
          o_alv->set_field_quitar( '&1'  ).
        ELSE.
          o_alv->set_field_text( campo = '&1' valor = ztclave_param-&1 ).
        ENDIF.
      ELSEIF '&1' = 'VALOR3' OR '&1' = 'VALOR4'. "Claves recientes, que no se suelen usar
         o_alv->set_field_quitar( '&1'  ).
      ENDIF.
    END-OF-DEFINITION.

    DEFINE set_campo_new.
      IF NOT ztclave_param-&1 IS INITIAL.
        IF ztclave_param-&1 = 'INVISIBLE'.
          o_alv->set_field_quitar( '&1'  ).
        ELSE.
          o_alv->set_field_text( campo = '&1' valor = ztclave_param-&1 ).
        ENDIF.
      ELSE.
        o_alv->set_field_quitar( '&1'  ).
      ENDIF.
    END-OF-DEFINITION.

    set_campo: campo, valor, valor2, valor3, valor4, atributo1, atributo2, atributo3, atributo4, comentario.
    set_campo_new: atributo5, atributo6, atributo7, atributo8, atributo9, atributo10.

    IF p_vis IS INITIAL.
      o_alv->add_button( button = 'F01' text = 'Grabar' icon = icon_system_save ucomm = 'GRABAR' ).
      o_alv->add_button( button = 'M01' text = 'Grabar JSON' ucomm = 'JSON' ).

      IF sy-sysid = zcl_c=>entorno_desarrollo.
        o_alv->add_button( button = 'F02' text = 'Crear OT'  icon =  icon_import_transport_request ucomm = 'OT' ).
        o_alv->add_button( button = 'F03' text = 'Comparar con producción'  icon =  icon_compare ucomm = 'COMP' ).
      ELSE.
        o_alv->add_button( button = 'F03' text = 'Comparar con desarrollo'  icon =  icon_compare ucomm = 'COMP' ).
      ENDIF.
      o_alv->set_field_input( 'ATRIBUTO1,ATRIBUTO2,ATRIBUTO3,ATRIBUTO4,ATRIBUTO5,ATRIBUTO6,ATRIBUTO7,ATRIBUTO8,ATRIBUTO9,ATRIBUTO10,COMENTARIO' ).
    ENDIF.

    sgpi_texto( 'Generando informe' ).
    o_alv->show( CHANGING tabla = i_listado ).

    CONCATENATE ztclave_param-descripcion p_campo p_valor INTO string SEPARATED BY space.
    o_alv->set_titulo( string ).
  ENDMETHOD.

  METHOD command_dynpro_0100.
    DATA: l_comm_sel           TYPE string VALUE 'OT',
          l_hay_sel            TYPE c LENGTH 1,
          zparametros          TYPE zparametros,
          zparametros_bd       TYPE zparametros,
          l_objectid           TYPE cdhdr-objectid,
          i_icdtxt_zparametros TYPE TABLE OF cdtxt,
          l_cont               TYPE i.
    DATA: i_list_dup TYPE TABLE OF t_listado,
          l_list_dup TYPE t_listado.
    DATA: l_key  TYPE c LENGTH 120,
          i_keys TYPE TABLE OF string.

    command_dynpro( EXPORTING o_alv = o_alv seleccion = l_comm_sel
                            CHANGING i_listado = i_listado i_listado_ini = i_listado_ini hay_sel = l_hay_sel ).

    CASE ucomm.
      WHEN 'GRABAR'.
        LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
          IF line_exists( i_list_dup[ clave = <listado>-clave campo = <listado>-campo
                                      valor = <listado>-valor  valor2 = <listado>-valor2
                                      valor3 = <listado>-valor3 valor4 = <listado>-valor4 ] ).
            i_list_dup[ clave  = <listado>-clave campo = <listado>-campo
                        valor  = <listado>-valor  valor2 = <listado>-valor2
                        valor3 = <listado>-valor3 valor4 = <listado>-valor4 ]-tabix = 2.
          ELSE.
            l_list_dup-clave  = <listado>-clave.
            l_list_dup-campo  = <listado>-campo.
            l_list_dup-valor  = <listado>-valor.
            l_list_dup-valor2 = <listado>-valor2.
            l_list_dup-valor3 = <listado>-valor3.
            l_list_dup-valor4 = <listado>-valor4.
            l_list_dup-tabix  = 1.
            APPEND l_list_dup TO i_list_dup.
          ENDIF.
          CLEAR <listado>-color.
        ENDLOOP.
        LOOP AT i_list_dup ASSIGNING FIELD-SYMBOL(<list>) WHERE tabix > 1.
          LOOP AT i_listado ASSIGNING <listado> WHERE clave = <list>-clave AND campo = <list>-campo
                                                  AND valor = <list>-valor AND valor2 = <list>-valor2
                                                  AND valor3 = <list>-valor3 AND valor4 = <list>-valor4.
            set_status_list( EXPORTING color = 'R' CHANGING list = <listado> ).
          ENDLOOP.
        ENDLOOP.
        IF sy-subrc = 0.
          MESSAGE 'No puede grabar si hay duplicados' TYPE 'I'.
          o_alv->refrescar_grid( ).
          RETURN.
        ENDIF.

        LOOP AT i_listado ASSIGNING <listado> WHERE updkz <> ''.

          MOVE-CORRESPONDING <listado> TO zparametros.

          SELECT SINGLE funcname FROM tfdir
            INTO @DATA(l_funcname)
           WHERE funcname = 'ZPARAMETROS_WRITE_DOCUMENT'.
          IF sy-subrc = 0.
            CLEAR zparametros_bd.
            SELECT SINGLE * FROM  ('ZPARAMETROS')
              INTO zparametros_bd
             WHERE clave  = <listado>-clave
               AND campo  = <listado>-campo
               AND valor  = <listado>-valor
               AND valor2 = <listado>-valor2
               AND valor3 = <listado>-valor3
               AND valor4 = <listado>-valor4.
            CLEAR: zparametros_bd-aedat, zparametros_bd-aezet, zparametros_bd-aenam.

            l_objectid = zparametros+3(115).
            CALL FUNCTION l_funcname
              EXPORTING
                objectid                = l_objectid
                tcode                   = 'ZPARAMETROS'
                utime                   = sy-uzeit
                udate                   = sy-datum
                username                = sy-uname
                object_change_indicator = <listado>-updkz
                n_zparametros           = zparametros
                o_zparametros           = zparametros_bd
                upd_zparametros         = <listado>-updkz
              TABLES
                icdtxt_zparametros      = i_icdtxt_zparametros.
          ENDIF.

          l_cont = l_cont + 1.
          IF <listado>-updkz = 'D'.
            DELETE FROM zparametros
             WHERE clave  = <listado>-clave
               AND campo  = <listado>-campo
               AND valor  = <listado>-valor
               AND valor2 = <listado>-valor2
               AND valor3 = <listado>-valor3
               AND valor4 = <listado>-valor4.
            IF sy-subrc = 0.
              DELETE i_listado.
            ENDIF.
          ELSE.
            <listado>-aenam = sy-uname.
            <listado>-aedat = sy-datum.
            <listado>-aezet = sy-uzeit.
            CLEAR: <listado>-updkz, <listado>-lights, <listado>-message, <listado>-style.
            CLEAR zparametros.
            MOVE-CORRESPONDING <listado> TO zparametros.
            MODIFY zparametros FROM zparametros.
          ENDIF.
        ENDLOOP.

        IF l_cont = 0.
          MESSAGE 'No había cambios' TYPE 'S'.
        ELSE.
          MESSAGE |Se han grabado { l_cont } registros| TYPE 'S'.
          i_listado_ini = i_listado.
        ENDIF.
        o_alv->refrescar_grid( ).

      WHEN 'OT'.
        LOOP AT i_listado ASSIGNING <listado> WHERE check = 'X'.
          MOVE-CORRESPONDING <listado> TO zparametros.
          zparametros-mandt = sy-mandt.
          l_key = zparametros(119) && '*'. "Debería ser 188, pero SAP restringe, así que se limita a los 3 primero campos clave
          APPEND l_key TO i_keys.
        ENDLOOP.

        zcl_ap_utils=>grabar_tabla_en_ot( tabla = 'ZPARAMETROS' i_keys = i_keys ).

      WHEN 'COMP'.
        SUBMIT zap_comparar_tablas
          AND RETURN
               WITH s_table = 'ZPARAMETROS'
               WITH p_clave = p_clave
               WITH p_clave2 = p_campo.

      WHEN 'JSON'.
        zcl_ap_segw=>get_json( EXPORTING datos = i_listado IMPORTING json = DATA(l_json) ).
        IF NOT l_json IS INITIAL.
          zcl_ap_ficheros=>grabar_xstring( fichero = |{ p_clave }.json| dialogo = 'X' string = l_json ).
        ENDIF.
    ENDCASE.
  ENDMETHOD.

  METHOD validaciones.
    DATA campos_edit TYPE string.

    CLEAR: listado-message, listado-style, listado-color, listado-lights.

    CASE mod.
      WHEN 'I'.
        listado-updkz = 'I'.
      WHEN 'D'.
        listado-updkz = 'D'.
      WHEN 'U'.
        IF listado-updkz IS INITIAL.
          ASSIGN i_listado_ini[ tabix = listado-tabix ] TO FIELD-SYMBOL(<ini>).
          IF sy-subrc NE 0.
            listado-updkz = 'U'.
          ELSEIF <ini> <> listado.
            listado-updkz = 'U'.
          ENDIF.
        ENDIF.
    ENDCASE.

    CASE listado-updkz.
      WHEN 'I'.
        DATA(l_icono) = icon_create.
        campos_edit = 'VALOR2,VALOR3,VALOR4'.
        IF p_valor IS INITIAL.
          __add_lista campos_edit 'VALOR'.
        ENDIF.

        IF p_campo IS INITIAL.
          __add_lista campos_edit 'CAMPO'.
        ENDIF.
      WHEN 'D'.
        l_icono = icon_delete.
      WHEN 'U'.
        l_icono = icon_change.
    ENDCASE.

    set_status_list( EXPORTING message = listado-message icono = l_icono campos_editables = campos_edit CHANGING list = listado ).
  ENDMETHOD.
ENDCLASS.

INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  guardar_logz = 'X'
                  status_prog  = 'ZAP_STATUS' ).

  sscrfields-functxt_03 = |{ icon_mail } Plantillas mail|.
  sscrfields-functxt_04 = |{ icon_list } Mantenimientos|.
  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

  IF zcl_ap_autorizacion=>es_usuario_sistemas( ).
    sscrfields-functxt_02 = |{ icon_system_extended_help } Gestión exits|.
  ELSE.
    CLEAR sscrfields-functxt_02.
  ENDIF.
  zcl_ap_documentos=>get_documentos_por_clas( EXPORTING tcode = 'ZPARAMETROS'
                                                        clasificacion = 'MANUAL'
                                              IMPORTING i_documentos = DATA(i_documentos)
                                                        eliminados = DATA(l_eliminados) ).
  IF NOT i_documentos IS INITIAL.
    sscrfields-functxt_05 = icon_message_information.
    PERFORM set_sscrfields IN PROGRAM zap_status USING sscrfields IF FOUND.
  ENDIF.

  PERFORM add_button IN PROGRAM zap_status USING: 'M01' 'Claves' '' '',
                                                  'M02' 'Log modificaciones' '' ''.

  IF sy-batch IS INITIAL.
    o_prog->o_event = NEW #( boton_refrescar = 'X'
                             boton_excel     = 'Y'
                             boton_nuevo     = 'X'
                             boton_borrar    = 'X'
                             o_prog          = o_prog ).

    o_prog->o_alv   = NEW #( estructura = ''
                             o_event    = o_prog->o_event ).
  ENDIF.

* Ya no queremos mantenimiento por SM30
AT SELECTION-SCREEN OUTPUT.
  p_alv = 'X'.
  p_sm30 = ''.
  zcl_ap_dynpro=>screen_visible( group1 = 'NO' variable = '' ).

AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'M01'.
      IF p_clave IS INITIAL.
        zcl_ap_utils=>mantener_tabla( tabla = 'ZTCLAVE_PARAM' ).
      ELSE.
        zcl_ap_utils=>mantener_tabla( tabla = 'ZTCLAVE_PARAM' campo_filtro = 'CLAVE_PARAM' op_filtro = 'EQ' valor_filtro = p_clave ).
      ENDIF.
    WHEN 'M02'.
      RANGES r_id FOR cdhdr-objectid.
      IF NOT p_clave IS INITIAL.
        r_id-option = 'CP'.
        r_id-sign   = 'I'.
        CONCATENATE p_clave '*' INTO r_id-low.
        APPEND r_id.
      ENDIF.
      SUBMIT zcontrol_cambios
        AND RETURN
             VIA SELECTION-SCREEN
             WITH p_object = 'ZPARAMETROS'
             WITH s_id IN r_id.
    WHEN 'ONLI'.
      IF p_clave IS INITIAL.
        MESSAGE 'Informe campo clave' TYPE 'E'.
      ELSE.
        SELECT SINGLE * FROM ('ZTCLAVE_PARAM')
          INTO ztclave_param
         WHERE clave_param = p_clave.
        IF sy-subrc = 0.
          sy-title = ztclave_param-descripcion.
        ENDIF.
      ENDIF.
    WHEN 'FC02'.
      SUBMIT zap_exits
             VIA SELECTION-SCREEN
        AND RETURN.
    WHEN 'FC03'.
      SUBMIT zap_textos_mail
             VIA SELECTION-SCREEN
             AND RETURN.
    WHEN 'FC04'.
      SUBMIT zspro
      AND RETURN.
    WHEN 'FC05'.
      zcl_ap_documentos=>popup_list( tcode = 'ZPARAMETROS' clasificacion = 'MANUAL' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

START-OF-SELECTION.
  IF p_sm30 = 'X'.
    DATA o_par TYPE REF TO zcl_ap_parametros.

    o_par = NEW #(
        clave = p_clave
        campo = p_campo ).

    IF p_vis IS INITIAL.
      o_par->mantenimiento( alv = '' ).
    ELSE.
      o_par->mantenimiento( alv = '' action = 'S' ).
    ENDIF.

  ELSEIF p_alv = 'X'.

    o_prog->buscar_datos( ).

    IF sy-batch IS INITIAL.
      CALL SCREEN 0100.
    ELSE.
      MESSAGE 'Este programa no se puede ejecutar en fondo'(pnf) TYPE 'E'.
    ENDIF.
  ENDIF.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*

MODULE status_0100 OUTPUT.

  o_prog->status_dynpro_0100( ).

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  o_prog->command_dynpro_0100( ).


ENDMODULE.
