
class ZCL_ZSUI5_CM_TRASLADOS_DPC_EXT definition
  public
  inheriting from ZCL_ZSUI5_CM_TRASLADOS_DPC
  create public .

public section.

  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_DEEP_ENTITY
    redefinition .
protected section.

  methods ENTREGASTRANSPOR_GET_ENTITY
    redefinition .
  methods ENTREGASTRANSPOR_GET_ENTITYSET
    redefinition .
  methods POSICIONESENTREG_GET_ENTITYSET
    redefinition .
  methods TRANSPORTESSET_GET_ENTITYSET
    redefinition .
private section.

  methods CUSTOME_CREATE_DEEP_TRASLADOS
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IO_EXPAND type ref to /IWBEP/IF_MGW_ODATA_EXPAND
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITY_C
      !IO_DATA_PROVIDER type ref to /IWBEP/IF_MGW_ENTRY_PROVIDER
    exporting
      !ER_DEEP_ENTITY type ZCL_ZSUI5_CM_TRASLADOS_MPC_EXT=>TS_DEEP_CREAR_TRASLADO
      !ER_RETURN type BAPIRET2_T .
endclass. "ZCL_ZSUI5_CM_TRASLADOS_DPC_EXT definition
class ZCL_ZSUI5_CM_TRASLADOS_DPC_EXT implementation.
  METHOD /iwbep/if_mgw_appl_srv_runtime~create_deep_entity.
    DATA: custome_create_pedido_traslado TYPE zcl_zsui5_cm_traslados_mpc_ext=>ts_deep_crear_traslado,
          lt_return                      TYPE bapiret2_t.

    CASE iv_entity_set_name.
      WHEN 'EntregasTransporteSet'.
        CALL METHOD me->custome_create_deep_traslados
          EXPORTING
            iv_entity_name          = iv_entity_name
            iv_entity_set_name      = iv_entity_set_name
            iv_source_name          = iv_source_name
            it_key_tab              = it_key_tab
            it_navigation_path      = it_navigation_path
            io_expand               = io_expand
            io_tech_request_context = io_tech_request_context
            io_data_provider        = io_data_provider
          IMPORTING
            er_return               = lt_return
            er_deep_entity          = custome_create_pedido_traslado.

        LOOP AT lt_return INTO DATA(ls_return) WHERE type NE 'E' AND type NE 'A' AND type NE ''.
          APPEND INITIAL LINE TO custome_create_pedido_traslado-mensajesdeepset ASSIGNING FIELD-SYMBOL(<ls_mensaje>).
          <ls_mensaje>-type = ls_return-type.
          MESSAGE ID ls_return-id TYPE ls_return-type NUMBER ls_return-number WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3
          ls_return-message_v4 INTO <ls_mensaje>-mensaje.
        ENDLOOP.

        copy_data_to_ref(
          EXPORTING
          is_data = custome_create_pedido_traslado
          CHANGING
          cr_data = er_deep_entity
          ).
        READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
        IF sy-subrc NE 0.

          DATA(io_message_container) = /iwbep/if_mgw_conv_srv_runtime~get_message_container( ).

*          io_message_container->add_messages_from_bapi(
*             it_bapi_messages = lt_return
*             iv_add_to_response_header = abap_true
*             iv_determine_leading_msg = /iwbep/if_message_container=>gcs_leading_msg_search_option-first
*           ).

        ELSE.
          DATA(lo_logger)            = /iwbep/if_mgw_conv_srv_runtime~get_logger( ).
          io_message_container = /iwbep/if_mgw_conv_srv_runtime~get_message_container( ).
          DATA(lv_error_category)    = /iwbep/if_message_container=>gcs_error_category-processing.

          io_message_container->add_messages_from_bapi(
             iv_error_category = lv_error_category
             it_bapi_messages = lt_return
              iv_add_to_response_header = abap_true
             iv_determine_leading_msg = /iwbep/if_message_container=>gcs_leading_msg_search_option-first
           ).

          RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
            EXPORTING
              textid = /iwbep/cx_mgw_busi_exception=>business_error.

        ENDIF.
    ENDCASE.
  ENDMETHOD.
  METHOD custome_create_deep_traslados.
    DATA: lr_deep_entity TYPE zcl_zsui5_cm_traslados_mpc_ext=>ts_deep_crear_traslado,
          i_header       TYPE  zsuis_cm_entregas_traslados,
          i_positions    TYPE  zsuitt_cm_posiciones_ent_trasla,
          lt_return      TYPE  bapiret2_t,
          ls_entrega     TYPE  zsuis_cm_entregas_traslados.

    io_data_provider->read_entry_data(
      IMPORTING
      es_data = lr_deep_entity ).

    MOVE-CORRESPONDING lr_deep_entity TO i_header.
    MOVE-CORRESPONDING lr_deep_entity-entregaposiciones TO i_positions.
    IF i_header-centro_montaje IS INITIAL.
      i_header-centro_montaje = '2000'.
    ENDIF.
    IF i_header-almacen_montaje IS INITIAL.
      i_header-almacen_montaje = 'CM01'.
    ENDIF.

    IF i_header-vbeln IS INITIAL.
      CALL FUNCTION 'ZUI5_CM_CREAR_PEDIDO_TRASLADO'
        EXPORTING
          i_header    = i_header
          i_positions = i_positions
        IMPORTING
          e_return    = lt_return
          e_pedido    = ls_entrega.
    ELSE.
      CALL FUNCTION 'ZUI5_CM_EDITAR_PEDIDO_TRASLADO'
        EXPORTING
          i_header    = i_header
          i_positions = i_positions
        IMPORTING
          e_return    = lt_return
          e_pedido    = ls_entrega.
    ENDIF.

    MOVE-CORRESPONDING ls_entrega TO er_deep_entity.

    er_deep_entity = lr_deep_entity.

    MOVE-CORRESPONDING lt_return TO er_return.

  ENDMETHOD.
  METHOD entregastranspor_get_entity.
*-------------------------------------------------------------
*  Data declaration
*-------------------------------------------------------------
    DATA i_tknum TYPE zif_zui5_cm_get_entregas_trasl=>tknum.
    DATA i_vbeln TYPE zif_zui5_cm_get_entregas_trasl=>vbeln_vl.
    DATA o_data  TYPE zif_zui5_cm_get_entregas_trasl=>zsuitt_cm_entregas_traslados.
    DATA o_return  TYPE zif_zui5_cm_get_entregas_trasl=>bapiret2_t.
    DATA ls_o_data  TYPE LINE OF zif_zui5_cm_get_entregas_trasl=>zsuitt_cm_entregas_traslados.
    DATA ls_o_return  TYPE LINE OF zif_zui5_cm_get_entregas_trasl=>bapiret2_t.
    DATA lv_rfc_name TYPE tfdir-funcname.
    DATA lv_destination TYPE rfcdest.
    DATA lv_subrc TYPE syst-subrc.
    DATA lv_exc_msg TYPE /iwbep/mgw_bop_rfc_excep_text.
    DATA lx_root TYPE REF TO cx_root.
    DATA ls_converted_keys LIKE er_entity.
    DATA lv_source_entity_set_name TYPE string.
    DATA lo_dp_facade TYPE REF TO /iwbep/if_mgw_dp_facade.

*-------------------------------------------------------------
*  Map the runtime request to the RFC - Only mapped attributes
*-------------------------------------------------------------
* Get all input information from the technical request context object
* Since DPC works with internal property names and runtime API interface holds external property names
* the process needs to get the all needed input information from the technical request context object
* Get key table information - for direct call
    io_tech_request_context->get_converted_keys(
      IMPORTING
        es_key_values = ls_converted_keys ).

* Maps key fields to function module parameters

    lv_source_entity_set_name = io_tech_request_context->get_source_entity_set_name( ).

    IF lv_source_entity_set_name = 'EntregasTransporteSet' AND
       lv_source_entity_set_name NE io_tech_request_context->get_entity_set_name( ).

      io_tech_request_context->get_converted_source_keys(
      IMPORTING es_key_values = ls_converted_keys ).

    ENDIF.

    i_vbeln = ls_converted_keys-vbeln.
    i_tknum = ls_converted_keys-tknum.

    "Añadimos la tabla de navegación
    IF it_navigation_path IS NOT INITIAL.
      LOOP AT it_navigation_path INTO DATA(ls_nav_path) WHERE nav_prop = 'TransporteEntregas'.
        LOOP AT ls_nav_path-key_tab INTO DATA(ls_key_tab).
          CASE ls_key_tab-name.
            WHEN 'Tknum'.
              i_tknum = ls_key_tab-value.
            WHEN 'Vbeln'.
              i_vbeln = ls_key_tab-value.
          ENDCASE.
        ENDLOOP.
      ENDLOOP.
    ENDIF.

* Get RFC destination
    lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
    lv_destination = /iwbep/cl_sb_gen_dpc_rt_util=>get_rfc_destination( io_dp_facade = lo_dp_facade ).

*-------------------------------------------------------------
*  Call RFC function module
*-------------------------------------------------------------
    lv_rfc_name = 'ZUI5_CM_GET_ENTREGAS_TRASLADO'.

    IF lv_destination IS INITIAL OR lv_destination EQ 'NONE'.

      TRY.
          CALL FUNCTION lv_rfc_name
            EXPORTING
              i_vbeln        = i_vbeln
              i_tknum        = i_tknum
            IMPORTING
              o_return       = o_return
              o_data         = o_data
            EXCEPTIONS
              system_failure = 1000 message lv_exc_msg
              OTHERS         = 1002.

          lv_subrc = sy-subrc.
*in case of co-deployment the exception is raised and needs to be caught
        CATCH cx_root INTO lx_root.
          lv_subrc = 1001.
          lv_exc_msg = lx_root->if_message~get_text( ).
      ENDTRY.

    ELSE.

      CALL FUNCTION lv_rfc_name DESTINATION lv_destination
        EXPORTING
          i_vbeln               = i_vbeln
          i_tknum               = i_tknum
        IMPORTING
          o_return              = o_return
          o_data                = o_data
        EXCEPTIONS
          system_failure        = 1000 MESSAGE lv_exc_msg
          communication_failure = 1001 MESSAGE lv_exc_msg
          OTHERS                = 1002.

      lv_subrc = sy-subrc.

    ENDIF.

*-------------------------------------------------------------
*  Map the RFC response to the caller interface - Only mapped attributes
*-------------------------------------------------------------
*-------------------------------------------------------------
* Error and exception handling
*-------------------------------------------------------------
    IF lv_subrc <> 0.
* Execute the RFC exception handling process
      me->/iwbep/if_sb_dpc_comm_services~rfc_exception_handling(
        EXPORTING
          iv_subrc            = lv_subrc
          iv_exp_message_text = lv_exc_msg ).
    ENDIF.

    IF o_return IS NOT INITIAL.
      me->/iwbep/if_sb_dpc_comm_services~rfc_save_log(
        EXPORTING
          iv_entity_type = iv_entity_name
          it_return      = o_return
          it_key_tab     = it_key_tab ).
    ENDIF.

*-------------------------------------------------------------------------*
*             - Post Backend Call -
*-------------------------------------------------------------------------*
* Map properties from the backend to the Gateway output response structure


* In GetEntity operation we support only read for the first entry in the response table

    READ TABLE o_data INTO ls_o_data INDEX 1.
    er_entity-tknum = ls_o_data-tknum.
    er_entity-vbeln = ls_o_data-vbeln.
    er_entity-ekgrp = ls_o_data-ekgrp.
    er_entity-ekgrp_name = ls_o_data-ekgrp_name.
    er_entity-erdat = ls_o_data-erdat.
    er_entity-ebeln = ls_o_data-ebeln.
    er_entity-lgort_dest = ls_o_data-lgort_dest.
    er_entity-lgort_dest_name = ls_o_data-lgort_dest_name.
    er_entity-wadat = ls_o_data-wadat.
    er_entity-estado_ee_desc = ls_o_data-estado_ee_desc.
    er_entity-estado_ee = ls_o_data-estado_ee.
    er_entity-vbeln_entrante = ls_o_data-vbeln_entrante.
  ENDMETHOD.
  METHOD entregastranspor_get_entityset.
*-------------------------------------------------------------
*  Data declaration
*-------------------------------------------------------------
    DATA ir_destinatario  TYPE zif_zui5_cm_get_entregas_trasl=>shp_kunwe_range_t.
    DATA ir_destinatario_nombre  TYPE zif_zui5_cm_get_entregas_trasl=>zsuis_cm_nombres_rang.
    DATA ir_fecha  TYPE zif_zui5_cm_get_entregas_trasl=>date_t_range.
    DATA ir_incoterm  TYPE zif_zui5_cm_get_entregas_trasl=>shp_inco1_range_t.
    DATA ir_ruta  TYPE zif_zui5_cm_get_entregas_trasl=>shp_route_range_t.
    DATA ir_tknum  TYPE zif_zui5_cm_get_entregas_trasl=>shp_tknum_range_t.
    DATA ir_vbeln  TYPE zif_zui5_cm_get_entregas_trasl=>/eby/_lbapidlv_range_vbeln.
    DATA o_data  TYPE zif_zui5_cm_get_entregas_trasl=>zsuitt_cm_entregas_traslados.
    DATA o_return  TYPE zif_zui5_cm_get_entregas_trasl=>bapiret2_t.
    DATA ls_ir_destinatario  TYPE LINE OF zif_zui5_cm_get_entregas_trasl=>shp_kunwe_range_t.
    DATA ls_ir_destinatario_nombre  TYPE LINE OF zif_zui5_cm_get_entregas_trasl=>zsuis_cm_nombres_rang.
    DATA ls_ir_fecha  TYPE LINE OF zif_zui5_cm_get_entregas_trasl=>date_t_range.
    DATA ls_ir_incoterm  TYPE LINE OF zif_zui5_cm_get_entregas_trasl=>shp_inco1_range_t.
    DATA ls_ir_ruta  TYPE LINE OF zif_zui5_cm_get_entregas_trasl=>shp_route_range_t.
    DATA ls_ir_tknum  TYPE LINE OF zif_zui5_cm_get_entregas_trasl=>shp_tknum_range_t.
    DATA ls_ir_vbeln  TYPE LINE OF zif_zui5_cm_get_entregas_trasl=>/eby/_lbapidlv_range_vbeln.
    DATA ls_o_data  TYPE LINE OF zif_zui5_cm_get_entregas_trasl=>zsuitt_cm_entregas_traslados.
    DATA ls_o_return  TYPE LINE OF zif_zui5_cm_get_entregas_trasl=>bapiret2_t.
    DATA lv_rfc_name TYPE tfdir-funcname.
    DATA lv_destination TYPE rfcdest.
    DATA lv_subrc TYPE syst-subrc.
    DATA lv_exc_msg TYPE /iwbep/mgw_bop_rfc_excep_text.
    DATA lx_root TYPE REF TO cx_root.
    DATA lo_filter TYPE  REF TO /iwbep/if_mgw_req_filter.
    DATA lt_filter_select_options TYPE /iwbep/t_mgw_select_option.
    DATA lv_filter_str TYPE string.
    DATA ls_paging TYPE /iwbep/s_mgw_paging.
    DATA ls_converted_keys LIKE LINE OF et_entityset.
    DATA lv_source_entity_set_name TYPE string.
    DATA transportesset_get_entityset TYPE LINE OF zcl_zsui5_cm_traslados_mpc=>tt_transportes.
    DATA ls_filter TYPE /iwbep/s_mgw_select_option.
    DATA ls_filter_range TYPE /iwbep/s_cod_select_option.
    DATA lr_wadat LIKE RANGE OF ls_converted_keys-wadat.
    DATA ls_wadat LIKE LINE OF lr_wadat.
    DATA lr_tknum LIKE RANGE OF ls_converted_keys-tknum.
    DATA ls_tknum LIKE LINE OF lr_tknum.
    DATA lr_vbeln LIKE RANGE OF ls_converted_keys-vbeln.
    DATA ls_vbeln LIKE LINE OF lr_vbeln.
    DATA lo_dp_facade TYPE REF TO /iwbep/if_mgw_dp_facade.
    DATA ls_gw_o_data LIKE LINE OF et_entityset.
    DATA lv_skip     TYPE int4.
    DATA lv_top      TYPE int4.

    "MTS: Ajustes filtro OR
    DATA lt_filter_select_options_and TYPE /iwbep/t_mgw_select_option.
    DATA lt_filter_select_options_temp TYPE /iwbep/t_mgw_select_option.
    DATA lt_filter_select_options_or TYPE /iwbep/t_mgw_select_option.
    DATA lv_veces TYPE i.
    DATA posicion TYPE i.
    DATA o_data_temp  TYPE zif_zui5_cm_get_entregas_trasl=>zsuitt_cm_entregas_traslados.
    DATA ir_tknum_nav  TYPE zif_zui5_cm_get_entregas_trans=>shp_tknum_range_t.
    "MTS: Ajustes filtro OR

*-------------------------------------------------------------
*  Map the runtime request to the RFC - Only mapped attributes
*-------------------------------------------------------------
* Get all input information from the technical request context object
* Since DPC works with internal property names and runtime API interface holds external property names
* the process needs to get the all needed input information from the technical request context object
* Get filter or select option information
    lo_filter = io_tech_request_context->get_filter( ).
    lt_filter_select_options = lo_filter->get_filter_select_options( ).
    lv_filter_str = lo_filter->get_filter_string( ).

* Check if the supplied filter is supported by standard gateway runtime process
    IF  lv_filter_str            IS NOT INITIAL
    AND lt_filter_select_options IS INITIAL.
      " If the string of the Filter System Query Option is not automatically converted into
      " filter option table (lt_filter_select_options), then the filtering combination is not supported
      " Log message in the application log
*   me->/iwbep/if_sb_dpc_comm_services~log_message(
*     EXPORTING
*       iv_msg_type   = 'E'
*       iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*       iv_msg_number = 025 ).
*   " Raise Exception
*   RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*     EXPORTING
*       textid = /iwbep/cx_mgw_tech_exception=>internal_error.
      zcl_search_dpc=>filtros_or( EXPORTING iv_instancia = me iv_data = ls_gw_o_data IMPORTING et_filter_select_options_and = lt_filter_select_options_and et_filter_select_options_or = lt_filter_select_options_or ).
      "MTS: Ajustes filtro OR
    ENDIF.
    IF iv_search_string IS NOT INITIAL.
      zcl_search_dpc=>search_or( EXPORTING iv_instancia = me iv_search = iv_search_string iv_data = ls_gw_o_data it_filter_select_options = lt_filter_select_options
                 IMPORTING et_filter_select_options_or = lt_filter_select_options_or ).
    ENDIF.

* Get key table information
    io_tech_request_context->get_converted_source_keys(
      IMPORTING
        es_key_values  = ls_converted_keys ).

    ls_paging-top = io_tech_request_context->get_top( ).
    ls_paging-skip = io_tech_request_context->get_skip( ).

* Maps key fields to function module parameters
    IF it_key_tab IS NOT INITIAL.

      lv_source_entity_set_name = io_tech_request_context->get_source_entity_set_name( ).

      IF  lv_source_entity_set_name = 'TransportesSet'.
        " Convert keys to appropriate entity set structure
        io_tech_request_context->get_converted_source_keys(
          IMPORTING
            es_key_values  = transportesset_get_entityset ).
        ls_ir_tknum-low = transportesset_get_entityset-tknum. " Equivalent to 'Tknum' property in the service
        ls_ir_tknum-option = 'EQ'.
        ls_ir_tknum-sign = 'I'.
        APPEND ls_ir_tknum TO ir_tknum_nav.

      ENDIF.

    ENDIF.

    "MTS: Ajustes filtro OR
    IF lt_filter_select_options_or IS NOT INITIAL OR lt_filter_select_options_and IS NOT INITIAL.
      DESCRIBE TABLE lt_filter_select_options_or LINES lv_veces.
      IF lv_veces IS INITIAL.
        lv_veces = 1.
      ENDIF.
    ELSE.
      lv_veces = 1.
    ENDIF.

    CLEAR posicion.

    IF lt_filter_select_options IS NOT INITIAL.
      zcl_search_dpc=>filtro_mayusculas(
     EXPORTING
       iv_data = ls_gw_o_data
       CHANGING
       ct_filter_select_options = lt_filter_select_options ).

      APPEND LINES OF lt_filter_select_options TO lt_filter_select_options_and.
    ENDIF.

    DO lv_veces TIMES.
      CLEAR: o_data, ir_destinatario, ir_destinatario_nombre, ir_fecha, ir_incoterm, ir_ruta, ir_tknum, ir_vbeln.

      IF ir_tknum_nav IS NOT INITIAL.
        APPEND LINES OF ir_tknum_nav TO ir_tknum.
      ENDIF.

      ADD 1 TO posicion.
      READ TABLE lt_filter_select_options_or INTO DATA(ls_option_or) INDEX posicion.
      IF sy-subrc = 0.
        lt_filter_select_options = lt_filter_select_options_and.

        APPEND ls_option_or TO lt_filter_select_options.
      ELSE.
        lt_filter_select_options = lt_filter_select_options_and.
      ENDIF.
      "MTS: Ajustes filtro OR

      IF it_filter_select_options IS NOT INITIAL.

* Maps filter table lines to function module parameters
        LOOP AT lt_filter_select_options INTO ls_filter.

          CASE ls_filter-property.

            WHEN 'WADAT'.              " Equivalent to 'Wadat' property in the service
              lo_filter->convert_select_option(
                EXPORTING
                  is_select_option = ls_filter
                IMPORTING
                  et_select_option = lr_wadat ).

              LOOP AT lr_wadat INTO ls_wadat.
                ls_ir_fecha-high = ls_wadat-high.
                ls_ir_fecha-low = ls_wadat-low.
                ls_ir_fecha-option = ls_wadat-option.
                ls_ir_fecha-sign = ls_wadat-sign.
                APPEND ls_ir_fecha TO ir_fecha.
              ENDLOOP.
              CLEAR lr_wadat.
            WHEN 'ALMACEN_MONTAJE'.

            WHEN 'TKNUM'.              " Equivalent to 'Tknum' property in the service
              lo_filter->convert_select_option(
                EXPORTING
                  is_select_option = ls_filter
                IMPORTING
                  et_select_option = lr_tknum ).

              LOOP AT lr_tknum INTO ls_tknum.
                ls_ir_tknum-high = ls_tknum-high.
                ls_ir_tknum-low = ls_tknum-low.
                ls_ir_tknum-option = ls_tknum-option.
                ls_ir_tknum-sign = ls_tknum-sign.
                APPEND ls_ir_tknum TO ir_tknum.
              ENDLOOP.
              CLEAR lr_tknum.
            WHEN 'VBELN'.              " Equivalent to 'Vbeln' property in the service
              lo_filter->convert_select_option(
                EXPORTING
                  is_select_option = ls_filter
                IMPORTING
                  et_select_option = lr_vbeln ).

              LOOP AT lr_vbeln INTO ls_vbeln.
                ls_ir_vbeln-deliv_numb_high = ls_vbeln-high.
                ls_ir_vbeln-deliv_numb_low = ls_vbeln-low.
                ls_ir_vbeln-option = ls_vbeln-option.
                ls_ir_vbeln-sign = ls_vbeln-sign.
                APPEND ls_ir_vbeln TO ir_vbeln.
              ENDLOOP.
              CLEAR lr_vbeln.

            WHEN OTHERS.
*       SARCE INI 3###########################################
              " Log message in the application log
              IF NOT iv_search_string IS INITIAL.
                DATA(vv_jump_search) = 'X'.
                CONTINUE.
              ENDIF.
*      SARCE FIN 3###########################################
              " Log message in the application log
              me->/iwbep/if_sb_dpc_comm_services~log_message(
                EXPORTING
                  iv_msg_type   = 'E'
                  iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                  iv_msg_number = 020
                  iv_msg_v1     = ls_filter-property ).
              " Raise Exception
              RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
                EXPORTING
                  textid = /iwbep/cx_mgw_tech_exception=>internal_error.
          ENDCASE.

        ENDLOOP.

*      SARCE INI 4###########################################
        IF vv_jump_search = 'X'.
          vv_jump_search = ''.
          CONTINUE.
        ENDIF.
        "MTS: Ajustes
*      SARCE FIN 4###########################################
      ENDIF.

* Get RFC destination
      lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
      lv_destination = /iwbep/cl_sb_gen_dpc_rt_util=>get_rfc_destination( io_dp_facade = lo_dp_facade ).

*-------------------------------------------------------------
*  Call RFC function module
*-------------------------------------------------------------
      lv_rfc_name = 'ZUI5_CM_GET_ENTREGAS_TRASLADO'.

      IF lv_destination IS INITIAL OR lv_destination EQ 'NONE'.

        TRY.
            CALL FUNCTION lv_rfc_name
              EXPORTING
                ir_incoterm            = ir_incoterm
                ir_fecha               = ir_fecha
                ir_ruta                = ir_ruta
                ir_destinatario_nombre = ir_destinatario_nombre
                ir_destinatario        = ir_destinatario
                ir_tknum               = ir_tknum
                ir_vbeln               = ir_vbeln
              IMPORTING
                o_return               = o_return
                o_data                 = o_data
              EXCEPTIONS
                system_failure         = 1000 message lv_exc_msg
                OTHERS                 = 1002.

            lv_subrc = sy-subrc.
*in case of co-deployment the exception is raised and needs to be caught
          CATCH cx_root INTO lx_root.
            lv_subrc = 1001.
            lv_exc_msg = lx_root->if_message~get_text( ).
        ENDTRY.

      ELSE.

        CALL FUNCTION lv_rfc_name DESTINATION lv_destination
          EXPORTING
            ir_incoterm            = ir_incoterm
            ir_fecha               = ir_fecha
            ir_ruta                = ir_ruta
            ir_destinatario_nombre = ir_destinatario_nombre
            ir_destinatario        = ir_destinatario
            ir_tknum               = ir_tknum
            ir_vbeln               = ir_vbeln
          IMPORTING
            o_return               = o_return
            o_data                 = o_data
          EXCEPTIONS
            system_failure         = 1000 MESSAGE lv_exc_msg
            communication_failure  = 1001 MESSAGE lv_exc_msg
            OTHERS                 = 1002.

        lv_subrc = sy-subrc.

      ENDIF.

      "MTS: Ajustes
      APPEND LINES OF o_data TO o_data_temp.
*-------------------------------------------------------------
*  Map the RFC response to the caller interface - Only mapped attributes
*-------------------------------------------------------------
*-------------------------------------------------------------
* Error and exception handling
*-------------------------------------------------------------
      IF lv_subrc <> 0.
* Execute the RFC exception handling process
        me->/iwbep/if_sb_dpc_comm_services~rfc_exception_handling(
          EXPORTING
            iv_subrc            = lv_subrc
            iv_exp_message_text = lv_exc_msg ).
      ENDIF.

      IF o_return IS NOT INITIAL.
        me->/iwbep/if_sb_dpc_comm_services~rfc_save_log(
          EXPORTING
            iv_entity_type = iv_entity_name
            it_return      = o_return
            it_key_tab     = it_key_tab ).
      ENDIF.

    ENDDO. "MTS Ajustes
    o_data = o_data_temp.

*-------------------------------------------------------------------------*
*             - Post Backend Call -
*-------------------------------------------------------------------------*
    IF ls_paging-skip IS NOT INITIAL.
*  If the Skip value was requested at runtime
*  the response table will provide backend entries from skip + 1, meaning start from skip +1
*  for example: skip=5 means to start get results from the 6th row
      lv_skip = ls_paging-skip + 1.
    ENDIF.
*  The Top value was requested at runtime but was not handled as part of the function interface
    IF  ls_paging-top <> 0
    AND lv_skip IS NOT INITIAL.
*  if lv_skip > 0 retrieve the entries from lv_skip + Top - 1
*  for example: skip=5 and top=2 means to start get results from the 6th row and end in row number 7
      lv_top = ls_paging-top + lv_skip - 1.
    ELSEIF ls_paging-top <> 0
    AND    lv_skip IS INITIAL.
      lv_top = ls_paging-top.
    ELSE.
      lv_top = lines( o_data ).
    ENDIF.


    "Ordenamos
    IF it_order IS NOT INITIAL.
      SORT o_data BY zcl_search_dpc=>sort_string( EXPORTING iv_instancia = me  ).
      DELETE ADJACENT DUPLICATES FROM o_data.
    ENDIF.

*  - Map properties from the backend to the Gateway output response table -

    LOOP AT o_data INTO ls_o_data
*  Provide the response entries according to the Top and Skip parameters that were provided at runtime
         FROM lv_skip TO lv_top.
*  Only fields that were mapped will be delivered to the response table
      ls_gw_o_data-tknum = ls_o_data-tknum.
      ls_gw_o_data-vbeln = ls_o_data-vbeln.
      ls_gw_o_data-wadat = ls_o_data-wadat.
      ls_gw_o_data-ekgrp = ls_o_data-ekgrp.
      ls_gw_o_data-ekgrp_name = ls_o_data-ekgrp_name.
      ls_gw_o_data-erdat = ls_o_data-erdat.
      ls_gw_o_data-ebeln = ls_o_data-ebeln.
      ls_gw_o_data-lgort_dest = ls_o_data-lgort_dest.
      ls_gw_o_data-lgort_dest_name = ls_o_data-lgort_dest_name.
      ls_gw_o_data-estado_ee_desc = ls_o_data-estado_ee_desc.
      ls_gw_o_data-estado_ee = ls_o_data-estado_ee.
      ls_gw_o_data-vbeln_entrante = ls_o_data-vbeln_entrante.
      APPEND ls_gw_o_data TO et_entityset.
      CLEAR ls_gw_o_data.
    ENDLOOP.

  ENDMETHOD.
  METHOD posicionesentreg_get_entityset.
*-------------------------------------------------------------
*  Data declaration
*-------------------------------------------------------------
    DATA ir_alto  TYPE zif_zui5_cm_get_pos_entregas_t=>zsuitt_cm_dimensiones_range.
    DATA ir_ancho  TYPE zif_zui5_cm_get_pos_entregas_t=>zsuitt_cm_dimensiones_range.
    DATA ir_largo  TYPE zif_zui5_cm_get_pos_entregas_t=>zsuitt_cm_dimensiones_range.
    DATA ir_lote  TYPE zif_zui5_cm_get_pos_entregas_t=>ranges_charg_tt.
    DATA ir_maktx  TYPE zif_zui5_cm_get_pos_entregas_t=>fip_t_maktx_range.
    DATA ir_matnr  TYPE zif_zui5_cm_get_pos_entregas_t=>ranges_matnr_tt.
    DATA ir_tknum  TYPE zif_zui5_cm_get_pos_entregas_t=>shp_tknum_range_t.
    DATA ir_vbeln  TYPE zif_zui5_cm_get_pos_entregas_t=>/eby/_lbapidlv_range_vbeln.
    DATA o_data  TYPE zif_zui5_cm_get_pos_entregas_t=>zsuitt_cm_posiciones_ent_trasl.
    DATA o_return  TYPE zif_zui5_cm_get_pos_entregas_t=>bapiret2_t.
    DATA ls_ir_alto  TYPE LINE OF zif_zui5_cm_get_pos_entregas_t=>zsuitt_cm_dimensiones_range.
    DATA ls_ir_ancho  TYPE LINE OF zif_zui5_cm_get_pos_entregas_t=>zsuitt_cm_dimensiones_range.
    DATA ls_ir_largo  TYPE LINE OF zif_zui5_cm_get_pos_entregas_t=>zsuitt_cm_dimensiones_range.
    DATA ls_ir_lote  TYPE LINE OF zif_zui5_cm_get_pos_entregas_t=>ranges_charg_tt.
    DATA ls_ir_maktx  TYPE LINE OF zif_zui5_cm_get_pos_entregas_t=>fip_t_maktx_range.
    DATA ls_ir_matnr  TYPE LINE OF zif_zui5_cm_get_pos_entregas_t=>ranges_matnr_tt.
    DATA ls_ir_tknum  TYPE LINE OF zif_zui5_cm_get_pos_entregas_t=>shp_tknum_range_t.
    DATA ls_ir_vbeln  TYPE LINE OF zif_zui5_cm_get_pos_entregas_t=>/eby/_lbapidlv_range_vbeln.
    DATA ls_o_data  TYPE LINE OF zif_zui5_cm_get_pos_entregas_t=>zsuitt_cm_posiciones_ent_trasl.
    DATA ls_o_return  TYPE LINE OF zif_zui5_cm_get_pos_entregas_t=>bapiret2_t.
    DATA lv_rfc_name TYPE tfdir-funcname.
    DATA lv_destination TYPE rfcdest.
    DATA lv_subrc TYPE syst-subrc.
    DATA lv_exc_msg TYPE /iwbep/mgw_bop_rfc_excep_text.
    DATA lx_root TYPE REF TO cx_root.
    DATA lo_filter TYPE  REF TO /iwbep/if_mgw_req_filter.
    DATA lt_filter_select_options TYPE /iwbep/t_mgw_select_option.
    DATA lv_filter_str TYPE string.
    DATA ls_paging TYPE /iwbep/s_mgw_paging.
    DATA ls_converted_keys LIKE LINE OF et_entityset.
    DATA lv_source_entity_set_name TYPE string.
    DATA entregastranspor_get_entityset TYPE LINE OF zcl_zsui5_cm_traslados_mpc=>tt_entregastransporte.
    DATA ls_filter TYPE /iwbep/s_mgw_select_option.
    DATA ls_filter_range TYPE /iwbep/s_cod_select_option.
    DATA lr_charg LIKE RANGE OF ls_converted_keys-charg.
    DATA ls_charg LIKE LINE OF lr_charg.
    DATA lr_alto LIKE RANGE OF ls_converted_keys-alto.
    DATA ls_alto LIKE LINE OF lr_alto.
    DATA lr_ancho LIKE RANGE OF ls_converted_keys-ancho.
    DATA ls_ancho LIKE LINE OF lr_ancho.
    DATA lr_largo LIKE RANGE OF ls_converted_keys-largo.
    DATA ls_largo LIKE LINE OF lr_largo.
    DATA lr_maktx LIKE RANGE OF ls_converted_keys-maktx.
    DATA ls_maktx LIKE LINE OF lr_maktx.
    DATA lr_matnr LIKE RANGE OF ls_converted_keys-matnr.
    DATA ls_matnr LIKE LINE OF lr_matnr.
    DATA lr_vbeln LIKE RANGE OF ls_converted_keys-vbeln.
    DATA ls_vbeln LIKE LINE OF lr_vbeln.
    DATA lr_tknum LIKE RANGE OF ls_converted_keys-tknum.
    DATA ls_tknum LIKE LINE OF lr_tknum.
    DATA lo_dp_facade TYPE REF TO /iwbep/if_mgw_dp_facade.
    DATA ls_gw_o_data LIKE LINE OF et_entityset.
    DATA lv_skip     TYPE int4.
    DATA lv_top      TYPE int4.
    DATA: i_tknum TYPE tknum,
          i_vbeln TYPE vbeln_vl.

    "MTS: Ajustes filtro OR
    DATA lt_filter_select_options_and TYPE /iwbep/t_mgw_select_option.
    DATA lt_filter_select_options_temp TYPE /iwbep/t_mgw_select_option.
    DATA lt_filter_select_options_or TYPE /iwbep/t_mgw_select_option.
    DATA lv_veces TYPE i.
    DATA posicion TYPE i.
    DATA o_data_temp  TYPE zif_zui5_cm_get_pos_entregas_t=>zsuitt_cm_posiciones_ent_trasl.
    DATA ir_tknum_temp  TYPE zif_zui5_cm_get_pos_entregas_t=>shp_tknum_range_t.
    DATA ir_vbeln_temp  TYPE zif_zui5_cm_get_pos_entregas_t=>/eby/_lbapidlv_range_vbeln.
    DATA transportesset_get_entityset TYPE LINE OF zcl_zsui5_cm_gestion_t_mpc=>tt_transportes.
    "MTS: Ajustes filtro OR
*-------------------------------------------------------------
*  Map the runtime request to the RFC - Only mapped attributes
*-------------------------------------------------------------
* Get all input information from the technical request context object
* Since DPC works with internal property names and runtime API interface holds external property names
* the process needs to get the all needed input information from the technical request context object
* Get filter or select option information
    lo_filter = io_tech_request_context->get_filter( ).
    lt_filter_select_options = lo_filter->get_filter_select_options( ).
    lv_filter_str = lo_filter->get_filter_string( ).

* Check if the supplied filter is supported by standard gateway runtime process
    IF  lv_filter_str            IS NOT INITIAL
    AND lt_filter_select_options IS INITIAL.
      " If the string of the Filter System Query Option is not automatically converted into
      " filter option table (lt_filter_select_options), then the filtering combination is not supported
      " Log message in the application log
*      me->/iwbep/if_sb_dpc_comm_services~log_message(
*        EXPORTING
*          iv_msg_type   = 'E'
*          iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*          iv_msg_number = 025 ).
*      " Raise Exception
*      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*        EXPORTING
*          textid = /iwbep/cx_mgw_tech_exception=>internal_error.
      "MTS: Ajustes filtro OR
      zcl_search_dpc=>filtros_or( EXPORTING iv_instancia = me iv_data = ls_gw_o_data IMPORTING et_filter_select_options_and = lt_filter_select_options_and et_filter_select_options_or = lt_filter_select_options_or ).
      "MTS: Ajustes filtro OR
    ENDIF.
    IF iv_search_string IS NOT INITIAL.
      zcl_search_dpc=>search_or( EXPORTING iv_instancia = me iv_search = iv_search_string iv_data = ls_gw_o_data it_filter_select_options = lt_filter_select_options
                 IMPORTING et_filter_select_options_or = lt_filter_select_options_or ).
    ENDIF.

* Get key table information
    io_tech_request_context->get_converted_source_keys(
      IMPORTING
        es_key_values  = ls_converted_keys ).

    ls_paging-top = io_tech_request_context->get_top( ).
    ls_paging-skip = io_tech_request_context->get_skip( ).

* Maps key fields to function module parameters
    IF it_key_tab IS NOT INITIAL.

      lv_source_entity_set_name = io_tech_request_context->get_source_entity_set_name( ).

      IF  lv_source_entity_set_name = 'EntregasTransporteSet'.
        " Convert keys to appropriate entity set structure
        io_tech_request_context->get_converted_source_keys(
          IMPORTING
            es_key_values  = entregastranspor_get_entityset ).
        ls_ir_tknum-low = entregastranspor_get_entityset-tknum. " Equivalent to 'Tknum' property in the service
        ls_ir_tknum-option = 'EQ'.
        ls_ir_tknum-sign = 'I'.
        APPEND ls_ir_tknum TO ir_tknum_temp.

        ls_ir_vbeln-deliv_numb_low = entregastranspor_get_entityset-vbeln. " Equivalent to 'Vbeln' property in the service
        ls_ir_vbeln-option = 'EQ'.
        ls_ir_vbeln-sign = 'I'.
        APPEND ls_ir_vbeln TO ir_vbeln_temp.

      ENDIF.


      IF  lv_source_entity_set_name = 'TransportesSet'.
        " Convert keys to appropriate entity set structure
        io_tech_request_context->get_converted_source_keys(
          IMPORTING
            es_key_values  = transportesset_get_entityset ).
        ls_ir_tknum-low = transportesset_get_entityset-tknum. " Equivalent to 'Tknum' property in the service
        ls_ir_tknum-option = 'EQ'.
        ls_ir_tknum-sign = 'I'.
        APPEND ls_ir_tknum TO ir_tknum_temp.

      ENDIF.


    ENDIF.

    "MTS: Ajustes filtro OR
    IF lt_filter_select_options_or IS NOT INITIAL OR lt_filter_select_options_and IS NOT INITIAL.
      DESCRIBE TABLE lt_filter_select_options_or LINES lv_veces.
      IF lv_veces IS INITIAL.
        lv_veces = 1.
      ENDIF.
    ELSE.
      lv_veces = 1.
    ENDIF.

    CLEAR posicion.

    IF lt_filter_select_options IS NOT INITIAL.
       zcl_search_dpc=>filtro_mayusculas(
      EXPORTING
        iv_data = ls_gw_o_data
        CHANGING
        ct_filter_select_options = lt_filter_select_options ).

      APPEND LINES OF lt_filter_select_options TO lt_filter_select_options_and.
    ENDIF.

    DO lv_veces TIMES.
      CLEAR: o_data, ir_alto, ir_ancho, ir_largo, ir_lote, ir_maktx, ir_matnr, ir_tknum, ir_vbeln.
      IF ir_tknum_temp IS NOT INITIAL.
        ir_tknum = ir_tknum_temp.
      ENDIF.

      IF ir_vbeln_temp IS NOT INITIAL.
        ir_vbeln = ir_vbeln_temp.
      ENDIF.

      ADD 1 TO posicion.
      READ TABLE lt_filter_select_options_or INTO DATA(ls_option_or) INDEX posicion.
      IF sy-subrc = 0.
        lt_filter_select_options = lt_filter_select_options_and.

        APPEND ls_option_or TO lt_filter_select_options.
      ELSE.
        lt_filter_select_options = lt_filter_select_options_and.
      ENDIF.
      "MTS: Ajustes filtro OR
      IF it_filter_select_options IS NOT INITIAL.

* Maps filter table lines to function module parameters
        LOOP AT lt_filter_select_options INTO ls_filter.

          CASE ls_filter-property.
            WHEN 'CHARG'.              " Equivalent to 'Charg' property in the service
              lo_filter->convert_select_option(
                EXPORTING
                  is_select_option = ls_filter
                IMPORTING
                  et_select_option = lr_charg ).

              LOOP AT lr_charg INTO ls_charg.
                ls_ir_lote-high = ls_charg-high.
                ls_ir_lote-low = ls_charg-low.
                ls_ir_lote-option = ls_charg-option.
                ls_ir_lote-sign = ls_charg-sign.
                APPEND ls_ir_lote TO ir_lote.
              ENDLOOP.
              CLEAR lr_charg.
            WHEN 'ALTO'.              " Equivalent to 'Alto' property in the service
              lo_filter->convert_select_option(
                EXPORTING
                  is_select_option = ls_filter
                IMPORTING
                  et_select_option = lr_alto ).

              LOOP AT lr_alto INTO ls_alto.
                ls_ir_alto-high = ls_alto-high.
                ls_ir_alto-low = ls_alto-low.
                ls_ir_alto-option = ls_alto-option.
                ls_ir_alto-sign = ls_alto-sign.
                APPEND ls_ir_alto TO ir_alto.
              ENDLOOP.
              CLEAR lr_alto.
            WHEN 'ANCHO'.              " Equivalent to 'Ancho' property in the service
              lo_filter->convert_select_option(
                EXPORTING
                  is_select_option = ls_filter
                IMPORTING
                  et_select_option = lr_ancho ).

              LOOP AT lr_ancho INTO ls_ancho.
                ls_ir_ancho-high = ls_ancho-high.
                ls_ir_ancho-low = ls_ancho-low.
                ls_ir_ancho-option = ls_ancho-option.
                ls_ir_ancho-sign = ls_ancho-sign.
                APPEND ls_ir_ancho TO ir_ancho.
              ENDLOOP.
              CLEAR lr_ancho.
            WHEN 'LARGO'.              " Equivalent to 'Largo' property in the service
              lo_filter->convert_select_option(
                EXPORTING
                  is_select_option = ls_filter
                IMPORTING
                  et_select_option = lr_largo ).

              LOOP AT lr_largo INTO ls_largo.
                ls_ir_largo-high = ls_largo-high.
                ls_ir_largo-low = ls_largo-low.
                ls_ir_largo-option = ls_largo-option.
                ls_ir_largo-sign = ls_largo-sign.
                APPEND ls_ir_largo TO ir_largo.
              ENDLOOP.
              CLEAR lr_largo.
            WHEN 'MAKTX'.              " Equivalent to 'Maktx' property in the service
              lo_filter->convert_select_option(
                EXPORTING
                  is_select_option = ls_filter
                IMPORTING
                  et_select_option = lr_maktx ).

              LOOP AT lr_maktx INTO ls_maktx.
                ls_ir_maktx-high = ls_maktx-high.
                ls_ir_maktx-low = ls_maktx-low.
                ls_ir_maktx-option = ls_maktx-option.
                ls_ir_maktx-sign = ls_maktx-sign.
                APPEND ls_ir_maktx TO ir_maktx.
              ENDLOOP.
              CLEAR lr_maktx.
            WHEN 'MATNR'.              " Equivalent to 'Matnr' property in the service
              lo_filter->convert_select_option(
                EXPORTING
                  is_select_option = ls_filter
                IMPORTING
                  et_select_option = lr_matnr ).

              LOOP AT lr_matnr INTO ls_matnr.
                ls_ir_matnr-high = ls_matnr-high.
                ls_ir_matnr-low = ls_matnr-low.
                ls_ir_matnr-option = ls_matnr-option.
                ls_ir_matnr-sign = ls_matnr-sign.
                APPEND ls_ir_matnr TO ir_matnr.
              ENDLOOP.
              CLEAR lr_matnr.
            WHEN 'VBELN'.              " Equivalent to 'Vbeln' property in the service
              lo_filter->convert_select_option(
                EXPORTING
                  is_select_option = ls_filter
                IMPORTING
                  et_select_option = lr_vbeln ).

              LOOP AT lr_vbeln INTO ls_vbeln.
                ls_ir_vbeln-deliv_numb_high = ls_vbeln-high.
                ls_ir_vbeln-deliv_numb_low = ls_vbeln-low.
                ls_ir_vbeln-option = ls_vbeln-option.
                ls_ir_vbeln-sign = ls_vbeln-sign.
                APPEND ls_ir_vbeln TO ir_vbeln.
              ENDLOOP.
              CLEAR lr_vbeln.
            WHEN 'TKNUM'.              " Equivalent to 'Tknum' property in the service
              lo_filter->convert_select_option(
                EXPORTING
                  is_select_option = ls_filter
                IMPORTING
                  et_select_option = lr_tknum ).

              LOOP AT lr_tknum INTO ls_tknum.
                ls_ir_tknum-high = ls_tknum-high.
                ls_ir_tknum-low = ls_tknum-low.
                ls_ir_tknum-option = ls_tknum-option.
                ls_ir_tknum-sign = ls_tknum-sign.
                APPEND ls_ir_tknum TO ir_tknum.
              ENDLOOP.
              CLEAR lr_tknum.

            WHEN OTHERS.
*       SARCE INI 3###########################################
              " Log message in the application log
              IF NOT iv_search_string IS INITIAL.
                DATA(vv_jump_search) = 'X'.
                CONTINUE.
              ENDIF.
*      SARCE FIN 3###########################################
              " Log message in the application log
              me->/iwbep/if_sb_dpc_comm_services~log_message(
                EXPORTING
                  iv_msg_type   = 'E'
                  iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                  iv_msg_number = 020
                  iv_msg_v1     = ls_filter-property ).
              " Raise Exception
              RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
                EXPORTING
                  textid = /iwbep/cx_mgw_tech_exception=>internal_error.
          ENDCASE.

        ENDLOOP.
*      SARCE INI 4###########################################
        IF vv_jump_search = 'X'.
          vv_jump_search = ''.
          CONTINUE.
        ENDIF.
        "MTS: Ajustes
*      SARCE FIN 4###########################################
      ENDIF.

* Get RFC destination
      lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
      lv_destination = /iwbep/cl_sb_gen_dpc_rt_util=>get_rfc_destination( io_dp_facade = lo_dp_facade ).

*-------------------------------------------------------------
*  Call RFC function module
*-------------------------------------------------------------
      lv_rfc_name = 'ZUI5_CM_GET_POS_ENTREGAS_TRAS'.

      "Añadimos la tabla de navegación
      IF it_navigation_path IS NOT INITIAL.
        LOOP AT it_navigation_path INTO DATA(ls_nav_path) WHERE nav_prop = 'TransporteEntregas'.
          LOOP AT ls_nav_path-key_tab INTO DATA(ls_key_tab).
            CASE ls_key_tab-name.
              WHEN 'Tknum'.
                APPEND  VALUE #( sign = 'I' option = 'EQ' low = |{ ls_key_tab-value ALPHA = IN }| ) TO ir_tknum.
              WHEN 'Vbeln'.
                APPEND  VALUE #( sign = 'I' option = 'EQ' deliv_numb_low = |{ ls_key_tab-value ALPHA = IN }| ) TO ir_vbeln.
            ENDCASE.
          ENDLOOP.
        ENDLOOP.
      ENDIF.

      IF lv_destination IS INITIAL OR lv_destination EQ 'NONE'.

        TRY.
            CALL FUNCTION lv_rfc_name
              EXPORTING
                ir_lote        = ir_lote
                ir_alto        = ir_alto
                ir_ancho       = ir_ancho
                ir_largo       = ir_largo
                ir_maktx       = ir_maktx
                ir_matnr       = ir_matnr
                ir_vbeln       = ir_vbeln
                ir_tknum       = ir_tknum
              IMPORTING
                o_return       = o_return
                o_data         = o_data
              EXCEPTIONS
                system_failure = 1000 message lv_exc_msg
                OTHERS         = 1002.

            lv_subrc = sy-subrc.
*in case of co-deployment the exception is raised and needs to be caught
          CATCH cx_root INTO lx_root.
            lv_subrc = 1001.
            lv_exc_msg = lx_root->if_message~get_text( ).
        ENDTRY.

      ELSE.

        CALL FUNCTION lv_rfc_name DESTINATION lv_destination
          EXPORTING
            ir_lote               = ir_lote
            ir_alto               = ir_alto
            ir_ancho              = ir_ancho
            ir_largo              = ir_largo
            ir_maktx              = ir_maktx
            ir_matnr              = ir_matnr
            ir_vbeln              = ir_vbeln
            ir_tknum              = ir_tknum
          IMPORTING
            o_return              = o_return
            o_data                = o_data
          EXCEPTIONS
            system_failure        = 1000 MESSAGE lv_exc_msg
            communication_failure = 1001 MESSAGE lv_exc_msg
            OTHERS                = 1002.

        lv_subrc = sy-subrc.

      ENDIF.

      "MTS: Ajustes
      APPEND LINES OF o_data TO o_data_temp.
*-------------------------------------------------------------
*  Map the RFC response to the caller interface - Only mapped attributes
*-------------------------------------------------------------
*-------------------------------------------------------------
* Error and exception handling
*-------------------------------------------------------------
      IF lv_subrc <> 0.
* Execute the RFC exception handling process
        me->/iwbep/if_sb_dpc_comm_services~rfc_exception_handling(
          EXPORTING
            iv_subrc            = lv_subrc
            iv_exp_message_text = lv_exc_msg ).
      ENDIF.

      IF o_return IS NOT INITIAL.
        me->/iwbep/if_sb_dpc_comm_services~rfc_save_log(
          EXPORTING
            iv_entity_type = iv_entity_name
            it_return      = o_return
            it_key_tab     = it_key_tab ).
      ENDIF.

    ENDDO. "MTS Ajustes
    o_data = o_data_temp.

*-------------------------------------------------------------------------*
*             - Post Backend Call -
*-------------------------------------------------------------------------*
    IF ls_paging-skip IS NOT INITIAL.
*  If the Skip value was requested at runtime
*  the response table will provide backend entries from skip + 1, meaning start from skip +1
*  for example: skip=5 means to start get results from the 6th row
      lv_skip = ls_paging-skip + 1.
    ENDIF.
*  The Top value was requested at runtime but was not handled as part of the function interface
    IF  ls_paging-top <> 0
    AND lv_skip IS NOT INITIAL.
*  if lv_skip > 0 retrieve the entries from lv_skip + Top - 1
*  for example: skip=5 and top=2 means to start get results from the 6th row and end in row number 7
      lv_top = ls_paging-top + lv_skip - 1.
    ELSEIF ls_paging-top <> 0
    AND    lv_skip IS INITIAL.
      lv_top = ls_paging-top.
    ELSE.
      lv_top = lines( o_data ).
    ENDIF.

    "Ordenamos
    IF it_order IS NOT INITIAL.
      SORT o_data BY zcl_search_dpc=>sort_string( EXPORTING iv_instancia = me  ).
      DELETE ADJACENT DUPLICATES FROM o_data.
    ENDIF.

*  - Map properties from the backend to the Gateway output response table -

    LOOP AT o_data INTO ls_o_data
*  Provide the response entries according to the Top and Skip parameters that were provided at runtime
         FROM lv_skip TO lv_top.
*  Only fields that were mapped will be delivered to the response table
      ls_gw_o_data-alto = ls_o_data-alto.
      ls_gw_o_data-ancho = ls_o_data-ancho.
      ls_gw_o_data-largo = ls_o_data-largo.
      ls_gw_o_data-maktx = ls_o_data-maktx.
      ls_gw_o_data-matnr = ls_o_data-matnr.
      ls_gw_o_data-vbeln = ls_o_data-vbeln.
      ls_gw_o_data-tknum = ls_o_data-tknum.
      ls_gw_o_data-txt_tipo_pallet = ls_o_data-txt_tipo_pallet.
      ls_gw_o_data-dimensiones = ls_o_data-dimensiones.
      ls_gw_o_data-cajas_pallets = ls_o_data-cajas_pallets.
      ls_gw_o_data-num_pallets = ls_o_data-num_pallets.
      ls_gw_o_data-tipo_pallet = ls_o_data-tipo_pallet.
      ls_gw_o_data-ebeln = ls_o_data-ebeln.
      ls_gw_o_data-ebelp = ls_o_data-ebelp.
      ls_gw_o_data-hsdat = ls_o_data-hsdat.
      ls_gw_o_data-meins = ls_o_data-meins.
      ls_gw_o_data-lfimg = ls_o_data-lfimg.
      ls_gw_o_data-charg = ls_o_data-charg.
      ls_gw_o_data-status_text = ls_o_data-status_text.
      ls_gw_o_data-status_lote = ls_o_data-status_lote.
      ls_gw_o_data-alto_uom = ls_o_data-alto_uom.
      ls_gw_o_data-ancho_uom = ls_o_data-ancho_uom.
      ls_gw_o_data-largo_uom = ls_o_data-largo_uom.
      ls_gw_o_data-lgort = ls_o_data-lgort.
      ls_gw_o_data-werks = ls_o_data-werks.
      ls_gw_o_data-posnr = ls_o_data-posnr.
      APPEND ls_gw_o_data TO et_entityset.
      CLEAR ls_gw_o_data.
    ENDLOOP.

  ENDMETHOD.
  METHOD transportesset_get_entityset.
*-------------------------------------------------------------
*  Data declaration
*-------------------------------------------------------------
    DATA e_data  TYPE zif_zui5_cm_get_trans_traslado=>zsuitt_cm_get_transportes.
    DATA e_return  TYPE zif_zui5_cm_get_trans_traslado=>bapiret2_t.
    DATA ir_conductor  TYPE zif_zui5_cm_get_trans_traslado=>zsuis_cm_zzconductor_rang.
    DATA ir_conductor_name  TYPE zif_zui5_cm_get_trans_traslado=>zsuis_cm_nombres_rang.
    DATA ir_destinatario  TYPE zif_zui5_cm_get_trans_traslado=>shp_kunwe_range_t.
    DATA ir_destinatario_nombre  TYPE zif_zui5_cm_get_trans_traslado=>zsuis_cm_nombres_rang.
    DATA ir_fecha_crea  TYPE zif_zui5_cm_get_trans_traslado=>date_t_range.
    DATA ir_lgort  TYPE zif_zui5_cm_get_trans_traslado=>range_t_lgort_d.
    DATA ir_matricula  TYPE zif_zui5_cm_get_trans_traslado=>isi_signi_ra.
    DATA ir_route  TYPE zif_zui5_cm_get_trans_traslado=>shp_route_range_t.
    DATA ir_route_name  TYPE zif_zui5_cm_get_trans_traslado=>zsui5tt_cm_name_route.
    DATA ir_status  TYPE zif_zui5_cm_get_trans_traslado=>zsuis_cm_status_trans_range.
    DATA ir_status_nombre  TYPE zif_zui5_cm_get_trans_traslado=>zsuis_cm_textos_dominio_rang.
    DATA ir_transporte  TYPE zif_zui5_cm_get_trans_traslado=>shp_tknum_range_t.
    DATA ir_transportista  TYPE zif_zui5_cm_get_trans_traslado=>md_range_t_lifnr.
    DATA ir_transportista_nombre  TYPE zif_zui5_cm_get_trans_traslado=>zsuis_cm_nombres_rang.
    DATA ir_werks  TYPE zif_zui5_cm_get_trans_traslado=>range_t_werks_d.
    DATA ls_e_data  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>zsuitt_cm_get_transportes.
    DATA ls_e_return  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>bapiret2_t.
    DATA ls_ir_conductor  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>zsuis_cm_zzconductor_rang.
    DATA ls_ir_conductor_name  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>zsuis_cm_nombres_rang.
    DATA ls_ir_destinatario  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>shp_kunwe_range_t.
    DATA ls_ir_destinatario_nombre  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>zsuis_cm_nombres_rang.
    DATA ls_ir_fecha_crea  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>date_t_range.
    DATA ls_ir_lgort  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>range_t_lgort_d.
    DATA ls_ir_matricula  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>isi_signi_ra.
    DATA ls_ir_route  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>shp_route_range_t.
    DATA ls_ir_route_name  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>zsui5tt_cm_name_route.
    DATA ls_ir_status  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>zsuis_cm_status_trans_range.
    DATA ls_ir_status_nombre  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>zsuis_cm_textos_dominio_rang.
    DATA ls_ir_transporte  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>shp_tknum_range_t.
    DATA ls_ir_transportista  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>md_range_t_lifnr.
    DATA ls_ir_transportista_nombre  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>zsuis_cm_nombres_rang.
    DATA ls_ir_werks  TYPE LINE OF zif_zui5_cm_get_trans_traslado=>range_t_werks_d.
    DATA lv_rfc_name TYPE tfdir-funcname.
    DATA lv_destination TYPE rfcdest.
    DATA lv_subrc TYPE syst-subrc.
    DATA lv_exc_msg TYPE /iwbep/mgw_bop_rfc_excep_text.
    DATA lx_root TYPE REF TO cx_root.
    DATA lo_filter TYPE  REF TO /iwbep/if_mgw_req_filter.
    DATA lt_filter_select_options TYPE /iwbep/t_mgw_select_option.
    DATA lv_filter_str TYPE string.
    DATA ls_paging TYPE /iwbep/s_mgw_paging.
    DATA ls_converted_keys LIKE LINE OF et_entityset.
    DATA ls_filter TYPE /iwbep/s_mgw_select_option.
    DATA ls_filter_range TYPE /iwbep/s_cod_select_option.
    DATA lr_lgort LIKE RANGE OF ls_converted_keys-lgort.
    DATA ls_lgort LIKE LINE OF lr_lgort.
    DATA lr_werks LIKE RANGE OF ls_converted_keys-werks.
    DATA ls_werks LIKE LINE OF lr_werks.
    DATA lr_almacen_montaje LIKE RANGE OF ls_converted_keys-almacen_montaje.
    DATA ls_almacen_montaje LIKE LINE OF lr_almacen_montaje.
    DATA lr_centro_montaje LIKE RANGE OF ls_converted_keys-centro_montaje.
    DATA ls_centro_montaje LIKE LINE OF lr_centro_montaje.
    DATA lr_route_name LIKE RANGE OF ls_converted_keys-route_name.
    DATA ls_route_name LIKE LINE OF lr_route_name.
    DATA lr_route LIKE RANGE OF ls_converted_keys-route.
    DATA ls_route LIKE LINE OF lr_route.
    DATA lr_kunwe_name LIKE RANGE OF ls_converted_keys-kunwe_name.
    DATA ls_kunwe_name LIKE LINE OF lr_kunwe_name.
    DATA lr_kunwe LIKE RANGE OF ls_converted_keys-kunwe.
    DATA ls_kunwe LIKE LINE OF lr_kunwe.
    DATA lr_erdat LIKE RANGE OF ls_converted_keys-erdat.
    DATA ls_erdat LIKE LINE OF lr_erdat.
    DATA lr_sttrg_name LIKE RANGE OF ls_converted_keys-sttrg_name.
    DATA ls_sttrg_name LIKE LINE OF lr_sttrg_name.
    DATA lr_sttrg LIKE RANGE OF ls_converted_keys-sttrg.
    DATA ls_sttrg LIKE LINE OF lr_sttrg.
    DATA lr_signi LIKE RANGE OF ls_converted_keys-signi.
    DATA ls_signi LIKE LINE OF lr_signi.
    DATA lr_zzconductor_name LIKE RANGE OF ls_converted_keys-zzconductor_name.
    DATA ls_zzconductor_name LIKE LINE OF lr_zzconductor_name.
    DATA lr_zzconductor LIKE RANGE OF ls_converted_keys-zzconductor.
    DATA ls_zzconductor LIKE LINE OF lr_zzconductor.
    DATA lr_tdlnr_name LIKE RANGE OF ls_converted_keys-tdlnr_name.
    DATA ls_tdlnr_name LIKE LINE OF lr_tdlnr_name.
    DATA lr_tdlnr LIKE RANGE OF ls_converted_keys-tdlnr.
    DATA ls_tdlnr LIKE LINE OF lr_tdlnr.
    DATA lr_tknum LIKE RANGE OF ls_converted_keys-tknum.
    DATA ls_tknum LIKE LINE OF lr_tknum.
    DATA lo_dp_facade TYPE REF TO /iwbep/if_mgw_dp_facade.
    DATA ls_gw_e_data LIKE LINE OF et_entityset.
    DATA lv_skip     TYPE int4.
    DATA lv_top      TYPE int4.

    "MTS: Ajustes filtro OR
    DATA lt_filter_select_options_and TYPE /iwbep/t_mgw_select_option.
    DATA lt_filter_select_options_temp TYPE /iwbep/t_mgw_select_option.
    DATA lt_filter_select_options_or TYPE /iwbep/t_mgw_select_option.
    DATA lv_veces TYPE i.
    DATA posicion TYPE i.
    DATA e_data_temp  TYPE zif_zui5_cm_get_trans_traslado=>zsuitt_cm_get_transportes.
    "MTS: Ajustes filtro OR
*-------------------------------------------------------------
*  Map the runtime request to the RFC - Only mapped attributes
*-------------------------------------------------------------
* Get all input information from the technical request context object
* Since DPC works with internal property names and runtime API interface holds external property names
* the process needs to get the all needed input information from the technical request context object
* Get filter or select option information
    lo_filter = io_tech_request_context->get_filter( ).
    lt_filter_select_options = lo_filter->get_filter_select_options( ).
    lv_filter_str = lo_filter->get_filter_string( ).

* Check if the supplied filter is supported by standard gateway runtime process
    IF  lv_filter_str            IS NOT INITIAL
    AND lt_filter_select_options IS INITIAL.
      " If the string of the Filter System Query Option is not automatically converted into
      " filter option table (lt_filter_select_options), then the filtering combination is not supported
      " Log message in the application log
*   me->/iwbep/if_sb_dpc_comm_services~log_message(
*     EXPORTING
*       iv_msg_type   = 'E'
*       iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*       iv_msg_number = 025 ).
*   " Raise Exception
*   RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*     EXPORTING
*       textid = /iwbep/cx_mgw_tech_exception=>internal_error.
      "MTS: Ajustes filtro OR
      zcl_search_dpc=>filtros_or( EXPORTING iv_instancia = me iv_data = ls_gw_e_data IMPORTING et_filter_select_options_and = lt_filter_select_options_and et_filter_select_options_or = lt_filter_select_options_or ).
      "MTS: Ajustes filtro OR
    ENDIF.
    IF iv_search_string IS NOT INITIAL.
      zcl_search_dpc=>search_or( EXPORTING iv_instancia = me iv_search = iv_search_string iv_data = ls_gw_e_data it_filter_select_options = lt_filter_select_options
                 IMPORTING et_filter_select_options_or = lt_filter_select_options_or ).
    ENDIF.

* Get key table information
    io_tech_request_context->get_converted_source_keys(
      IMPORTING
        es_key_values  = ls_converted_keys ).

    ls_paging-top = io_tech_request_context->get_top( ).
    ls_paging-skip = io_tech_request_context->get_skip( ).

    "MTS: Ajustes filtro OR
    IF lt_filter_select_options_or IS NOT INITIAL OR lt_filter_select_options_and IS NOT INITIAL.
      DESCRIBE TABLE lt_filter_select_options_or LINES lv_veces.
      IF lv_veces IS INITIAL.
        lv_veces = 1.
      ENDIF.
    ELSE.
      lv_veces = 1.
    ENDIF.

    CLEAR posicion.

    IF lt_filter_select_options IS NOT INITIAL.
      zcl_search_dpc=>filtro_mayusculas(
     EXPORTING
       iv_data = ls_gw_e_data
       CHANGING
       ct_filter_select_options = lt_filter_select_options ).

      APPEND LINES OF lt_filter_select_options TO lt_filter_select_options_and.
    ENDIF.

    DO lv_veces TIMES.
      CLEAR: e_data, ir_conductor, ir_conductor_name, ir_destinatario, ir_destinatario_nombre, ir_fecha_crea, ir_lgort,
      ir_matricula, ir_route, ir_route_name, ir_status, ir_status_nombre, ir_transporte, ir_transportista, ir_transportista_nombre,
      ir_werks.

      ADD 1 TO posicion.
      READ TABLE lt_filter_select_options_or INTO DATA(ls_option_or) INDEX posicion.
      IF sy-subrc = 0.
        lt_filter_select_options = lt_filter_select_options_and.

        APPEND ls_option_or TO lt_filter_select_options.
      ELSE.
        lt_filter_select_options = lt_filter_select_options_and.
      ENDIF.
      "MTS: Ajustes filtro OR

* Maps filter table lines to function module parameters
      LOOP AT lt_filter_select_options INTO ls_filter.

        CASE ls_filter-property.
          WHEN 'LGORT'.              " Equivalent to 'Lgort' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_lgort ).

            LOOP AT lr_lgort INTO ls_lgort.
              ls_ir_lgort-high = ls_lgort-high.
              ls_ir_lgort-low = ls_lgort-low.
              ls_ir_lgort-option = ls_lgort-option.
              ls_ir_lgort-sign = ls_lgort-sign.
              APPEND ls_ir_lgort TO ir_lgort.
            ENDLOOP.
            CLEAR lr_lgort.
          WHEN 'WERKS'.              " Equivalent to 'Werks' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_werks ).

            LOOP AT lr_werks INTO ls_werks.
              ls_ir_werks-high = ls_werks-high.
              ls_ir_werks-low = ls_werks-low.
              ls_ir_werks-option = ls_werks-option.
              ls_ir_werks-sign = ls_werks-sign.
              APPEND ls_ir_werks TO ir_werks.
            ENDLOOP.
            CLEAR lr_werks.
          WHEN 'ALMACEN_MONTAJE'.              " Equivalent to 'AlmacenMontaje' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_almacen_montaje ).

            LOOP AT lr_almacen_montaje INTO ls_almacen_montaje.
              ls_ir_lgort-high = ls_almacen_montaje-high.
              ls_ir_lgort-low = ls_almacen_montaje-low.
              ls_ir_lgort-option = ls_almacen_montaje-option.
              ls_ir_lgort-sign = ls_almacen_montaje-sign.
              APPEND ls_ir_lgort TO ir_lgort.
            ENDLOOP.
            CLEAR lr_almacen_montaje.
          WHEN 'CENTRO_MONTAJE'.              " Equivalent to 'CentroMontaje' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_centro_montaje ).

            LOOP AT lr_centro_montaje INTO ls_centro_montaje.
              ls_ir_werks-high = ls_centro_montaje-high.
              ls_ir_werks-low = ls_centro_montaje-low.
              ls_ir_werks-option = ls_centro_montaje-option.
              ls_ir_werks-sign = ls_centro_montaje-sign.
              APPEND ls_ir_werks TO ir_werks.
            ENDLOOP.
            CLEAR lr_centro_montaje.
          WHEN 'ROUTE_NAME'.              " Equivalent to 'RouteName' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_route_name ).

            LOOP AT lr_route_name INTO ls_route_name.
              ls_ir_route_name-high = ls_route_name-high.
              ls_ir_route_name-low = ls_route_name-low.
              ls_ir_route_name-option = ls_route_name-option.
              ls_ir_route_name-sign = ls_route_name-sign.
              APPEND ls_ir_route_name TO ir_route_name.
            ENDLOOP.
            CLEAR lr_route_name.
          WHEN 'ROUTE'.              " Equivalent to 'Route' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_route ).

            LOOP AT lr_route INTO ls_route.
              ls_ir_route-high = ls_route-high.
              ls_ir_route-low = ls_route-low.
              ls_ir_route-option = ls_route-option.
              ls_ir_route-sign = ls_route-sign.
              APPEND ls_ir_route TO ir_route.
            ENDLOOP.
            CLEAR lr_route.
          WHEN 'KUNWE_NAME'.              " Equivalent to 'KunweName' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_kunwe_name ).

            LOOP AT lr_kunwe_name INTO ls_kunwe_name.
              ls_ir_destinatario_nombre-high = ls_kunwe_name-high.
              ls_ir_destinatario_nombre-low = ls_kunwe_name-low.
              ls_ir_destinatario_nombre-option = ls_kunwe_name-option.
              ls_ir_destinatario_nombre-sign = ls_kunwe_name-sign.
              APPEND ls_ir_destinatario_nombre TO ir_destinatario_nombre.
            ENDLOOP.
            CLEAR lr_kunwe_name.
          WHEN 'KUNWE'.              " Equivalent to 'Kunwe' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_kunwe ).

            LOOP AT lr_kunwe INTO ls_kunwe.
              ls_ir_destinatario-high = ls_kunwe-high.
              ls_ir_destinatario-low = ls_kunwe-low.
              ls_ir_destinatario-option = ls_kunwe-option.
              ls_ir_destinatario-sign = ls_kunwe-sign.
              APPEND ls_ir_destinatario TO ir_destinatario.
            ENDLOOP.
            CLEAR lr_kunwe.
          WHEN 'ERDAT'.              " Equivalent to 'Erdat' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_erdat ).

            LOOP AT lr_erdat INTO ls_erdat.
              ls_ir_fecha_crea-high = ls_erdat-high.
              ls_ir_fecha_crea-low = ls_erdat-low.
              ls_ir_fecha_crea-option = ls_erdat-option.
              ls_ir_fecha_crea-sign = ls_erdat-sign.
              APPEND ls_ir_fecha_crea TO ir_fecha_crea.
            ENDLOOP.
            CLEAR lr_erdat.
          WHEN 'STTRG_NAME'.              " Equivalent to 'SttrgName' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_sttrg_name ).

            LOOP AT lr_sttrg_name INTO ls_sttrg_name.
              ls_ir_status_nombre-high = ls_sttrg_name-high.
              ls_ir_status_nombre-low = ls_sttrg_name-low.
              ls_ir_status_nombre-option = ls_sttrg_name-option.
              ls_ir_status_nombre-sign = ls_sttrg_name-sign.
              APPEND ls_ir_status_nombre TO ir_status_nombre.
            ENDLOOP.
            CLEAR lr_sttrg_name.
          WHEN 'STTRG'.              " Equivalent to 'Sttrg' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_sttrg ).

            LOOP AT lr_sttrg INTO ls_sttrg.
              ls_ir_status-high = ls_sttrg-high.
              ls_ir_status-low = ls_sttrg-low.
              ls_ir_status-option = ls_sttrg-option.
              ls_ir_status-sign = ls_sttrg-sign.
              APPEND ls_ir_status TO ir_status.
            ENDLOOP.
            CLEAR lr_sttrg.
          WHEN 'SIGNI'.              " Equivalent to 'Signi' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_signi ).

            LOOP AT lr_signi INTO ls_signi.
              ls_ir_matricula-high = ls_signi-high.
              ls_ir_matricula-low = ls_signi-low.
              ls_ir_matricula-option = ls_signi-option.
              ls_ir_matricula-sign = ls_signi-sign.
              APPEND ls_ir_matricula TO ir_matricula.
            ENDLOOP.
            CLEAR lr_signi.
          WHEN 'ZZCONDUCTOR_NAME'.              " Equivalent to 'ZzconductorName' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_zzconductor_name ).

            LOOP AT lr_zzconductor_name INTO ls_zzconductor_name.
              ls_ir_conductor_name-high = ls_zzconductor_name-high.
              ls_ir_conductor_name-low = ls_zzconductor_name-low.
              ls_ir_conductor_name-option = ls_zzconductor_name-option.
              ls_ir_conductor_name-sign = ls_zzconductor_name-sign.
              APPEND ls_ir_conductor_name TO ir_conductor_name.
            ENDLOOP.
            CLEAR lr_zzconductor_name.
          WHEN 'ZZCONDUCTOR'.              " Equivalent to 'Zzconductor' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_zzconductor ).

            LOOP AT lr_zzconductor INTO ls_zzconductor.
              ls_ir_conductor-high = ls_zzconductor-high.
              ls_ir_conductor-low = ls_zzconductor-low.
              ls_ir_conductor-option = ls_zzconductor-option.
              ls_ir_conductor-sign = ls_zzconductor-sign.
              APPEND ls_ir_conductor TO ir_conductor.
            ENDLOOP.
            CLEAR lr_zzconductor.
          WHEN 'TDLNR_NAME'.              " Equivalent to 'TdlnrName' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_tdlnr_name ).

            LOOP AT lr_tdlnr_name INTO ls_tdlnr_name.
              ls_ir_transportista_nombre-high = ls_tdlnr_name-high.
              ls_ir_transportista_nombre-low = ls_tdlnr_name-low.
              ls_ir_transportista_nombre-option = ls_tdlnr_name-option.
              ls_ir_transportista_nombre-sign = ls_tdlnr_name-sign.
              APPEND ls_ir_transportista_nombre TO ir_transportista_nombre.
            ENDLOOP.
            CLEAR lr_tdlnr_name.
          WHEN 'TDLNR'.              " Equivalent to 'Tdlnr' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_tdlnr ).

            LOOP AT lr_tdlnr INTO ls_tdlnr.
              ls_ir_transportista-high = ls_tdlnr-high.
              ls_ir_transportista-low = ls_tdlnr-low.
              ls_ir_transportista-option = ls_tdlnr-option.
              ls_ir_transportista-sign = ls_tdlnr-sign.
              APPEND ls_ir_transportista TO ir_transportista.
            ENDLOOP.
            CLEAR lr_tdlnr.
          WHEN 'TKNUM'.              " Equivalent to 'Tknum' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_tknum ).

            LOOP AT lr_tknum INTO ls_tknum.
              ls_ir_transporte-high = ls_tknum-high.
              ls_ir_transporte-low = ls_tknum-low.
              ls_ir_transporte-option = ls_tknum-option.
              ls_ir_transporte-sign = ls_tknum-sign.
              APPEND ls_ir_transporte TO ir_transporte.
            ENDLOOP.
            CLEAR lr_tknum.

          WHEN OTHERS.
*       SARCE INI 3###########################################
            " Log message in the application log
            IF NOT iv_search_string IS INITIAL.
              DATA(vv_jump_search) = 'X'.
              CONTINUE.
            ENDIF.
*      SARCE FIN 3###########################################
            " Log message in the application log
            me->/iwbep/if_sb_dpc_comm_services~log_message(
              EXPORTING
                iv_msg_type   = 'E'
                iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                iv_msg_number = 020
                iv_msg_v1     = ls_filter-property ).
            " Raise Exception
            RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
              EXPORTING
                textid = /iwbep/cx_mgw_tech_exception=>internal_error.
        ENDCASE.

      ENDLOOP.
*      SARCE INI 4###########################################
      IF vv_jump_search = 'X'.
        vv_jump_search = ''.
        CONTINUE.
      ENDIF.
      "MTS: Ajustes
*      SARCE FIN 4###########################################
* Get RFC destination
      lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
      lv_destination = /iwbep/cl_sb_gen_dpc_rt_util=>get_rfc_destination( io_dp_facade = lo_dp_facade ).

*-------------------------------------------------------------
*  Call RFC function module
*-------------------------------------------------------------
      lv_rfc_name = 'ZUI5_CM_GET_TRANS_TRASLADOS'.

      IF lv_destination IS INITIAL OR lv_destination EQ 'NONE'.

        TRY.
            CALL FUNCTION lv_rfc_name
              EXPORTING
                ir_lgort                = ir_lgort
                ir_werks                = ir_werks
                ir_route_name           = ir_route_name
                ir_route                = ir_route
                ir_destinatario_nombre  = ir_destinatario_nombre
                ir_destinatario         = ir_destinatario
                ir_fecha_crea           = ir_fecha_crea
                ir_status_nombre        = ir_status_nombre
                ir_status               = ir_status
                ir_matricula            = ir_matricula
                ir_conductor_name       = ir_conductor_name
                ir_conductor            = ir_conductor
                ir_transportista_nombre = ir_transportista_nombre
                ir_transportista        = ir_transportista
                ir_transporte           = ir_transporte
              IMPORTING
                e_return                = e_return
                e_data                  = e_data
              EXCEPTIONS
                system_failure          = 1000 message lv_exc_msg
                OTHERS                  = 1002.

            lv_subrc = sy-subrc.
*in case of co-deployment the exception is raised and needs to be caught
          CATCH cx_root INTO lx_root.
            lv_subrc = 1001.
            lv_exc_msg = lx_root->if_message~get_text( ).
        ENDTRY.

      ELSE.

        CALL FUNCTION lv_rfc_name DESTINATION lv_destination
          EXPORTING
            ir_lgort                = ir_lgort
            ir_werks                = ir_werks
            ir_route_name           = ir_route_name
            ir_route                = ir_route
            ir_destinatario_nombre  = ir_destinatario_nombre
            ir_destinatario         = ir_destinatario
            ir_fecha_crea           = ir_fecha_crea
            ir_status_nombre        = ir_status_nombre
            ir_status               = ir_status
            ir_matricula            = ir_matricula
            ir_conductor_name       = ir_conductor_name
            ir_conductor            = ir_conductor
            ir_transportista_nombre = ir_transportista_nombre
            ir_transportista        = ir_transportista
            ir_transporte           = ir_transporte
          IMPORTING
            e_return                = e_return
            e_data                  = e_data
          EXCEPTIONS
            system_failure          = 1000 MESSAGE lv_exc_msg
            communication_failure   = 1001 MESSAGE lv_exc_msg
            OTHERS                  = 1002.

        lv_subrc = sy-subrc.

      ENDIF.

      "MTS: Ajustes
      APPEND LINES OF e_data TO e_data_temp.
*-------------------------------------------------------------
*  Map the RFC response to the caller interface - Only mapped attributes
*-------------------------------------------------------------
*-------------------------------------------------------------
* Error and exception handling
*-------------------------------------------------------------
      IF lv_subrc <> 0.
* Execute the RFC exception handling process
        me->/iwbep/if_sb_dpc_comm_services~rfc_exception_handling(
          EXPORTING
            iv_subrc            = lv_subrc
            iv_exp_message_text = lv_exc_msg ).
      ENDIF.

      IF e_return IS NOT INITIAL.
        me->/iwbep/if_sb_dpc_comm_services~rfc_save_log(
          EXPORTING
            iv_entity_type = iv_entity_name
            it_return      = e_return
            it_key_tab     = it_key_tab ).
      ENDIF.


    ENDDO. "MTS Ajustes
    e_data = e_data_temp.


*-------------------------------------------------------------------------*
*             - Post Backend Call -
*-------------------------------------------------------------------------*
    IF ls_paging-skip IS NOT INITIAL.
*  If the Skip value was requested at runtime
*  the response table will provide backend entries from skip + 1, meaning start from skip +1
*  for example: skip=5 means to start get results from the 6th row
      lv_skip = ls_paging-skip + 1.
    ENDIF.
*  The Top value was requested at runtime but was not handled as part of the function interface
    IF  ls_paging-top <> 0
    AND lv_skip IS NOT INITIAL.
*  if lv_skip > 0 retrieve the entries from lv_skip + Top - 1
*  for example: skip=5 and top=2 means to start get results from the 6th row and end in row number 7
      lv_top = ls_paging-top + lv_skip - 1.
    ELSEIF ls_paging-top <> 0
    AND    lv_skip IS INITIAL.
      lv_top = ls_paging-top.
    ELSE.
      lv_top = lines( e_data ).
    ENDIF.

    "Ordenamos
    IF it_order IS NOT INITIAL.
      SORT e_data BY zcl_search_dpc=>sort_string( EXPORTING iv_instancia = me  ).
      DELETE ADJACENT DUPLICATES FROM e_data.
    ENDIF.

*  - Map properties from the backend to the Gateway output response table -

    LOOP AT e_data INTO ls_e_data
*  Provide the response entries according to the Top and Skip parameters that were provided at runtime
         FROM lv_skip TO lv_top.
*  Only fields that were mapped will be delivered to the response table
      ls_gw_e_data-lgort = ls_e_data-lgort.
      ls_gw_e_data-werks = ls_e_data-werks.
      ls_gw_e_data-almacen_montaje = ls_e_data-almacen_montaje.
      ls_gw_e_data-centro_montaje = ls_e_data-centro_montaje.
      ls_gw_e_data-route_name = ls_e_data-route_name.
      ls_gw_e_data-route = ls_e_data-route.
      ls_gw_e_data-kunwe_name = ls_e_data-kunwe_name.
      ls_gw_e_data-kunwe = ls_e_data-kunwe.
      ls_gw_e_data-erdat = ls_e_data-erdat.
      ls_gw_e_data-sttrg_name = ls_e_data-sttrg_name.
      ls_gw_e_data-sttrg = ls_e_data-sttrg.
      ls_gw_e_data-signi = ls_e_data-signi.
      ls_gw_e_data-zzconductor_name = ls_e_data-zzconductor_name.
      ls_gw_e_data-zzconductor = ls_e_data-zzconductor.
      ls_gw_e_data-tdlnr_name = ls_e_data-tdlnr_name.
      ls_gw_e_data-tdlnr = ls_e_data-tdlnr.
      ls_gw_e_data-tknum = ls_e_data-tknum.
      ls_gw_e_data-borrable = ls_e_data-borrable.
      ls_gw_e_data-editable = ls_e_data-editable.
      ls_gw_e_data-remolque = ls_e_data-remolque.
      ls_gw_e_data-telefono = ls_e_data-telefono.
      APPEND ls_gw_e_data TO et_entityset.
      CLEAR ls_gw_e_data.
    ENDLOOP.

  ENDMETHOD.
