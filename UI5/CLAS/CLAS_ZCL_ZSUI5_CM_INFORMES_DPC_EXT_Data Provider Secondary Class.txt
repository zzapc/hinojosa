
class ZCL_ZSUI5_CM_INFORMES_DPC_EXT definition
  public
  inheriting from ZCL_ZSUI5_CM_INFORMES_DPC
  create public .

public section.
protected section.

  methods PEDIDOSSTOCKSET_GET_ENTITY
    redefinition .
  methods PEDIDOSSTOCKSET_GET_ENTITYSET
    redefinition .
  methods ESTADOSREPARTOSE_GET_ENTITYSET
    redefinition .
private section.
endclass. "ZCL_ZSUI5_CM_INFORMES_DPC_EXT definition
class ZCL_ZSUI5_CM_INFORMES_DPC_EXT implementation.
  METHOD estadosrepartose_get_entityset.
*-------------------------------------------------------------
*  Data declaration
*-------------------------------------------------------------

    DATA e_data  TYPE zif_zui5_cm_informe_get_estado=>zsui5tt_cm_informe_estados.
    DATA e_data_temp  TYPE zif_zui5_cm_informe_get_estado=>zsui5tt_cm_informe_estados.
    DATA r_desc_estado  TYPE zif_zui5_cm_informe_get_estado=>rseloption.
    DATA r_estado  TYPE zif_zui5_cm_informe_get_estado=>rseloption.
    DATA r_explicacion  TYPE zif_zui5_cm_informe_get_estado=>rseloption.
    DATA r_tipo_estado  TYPE zif_zui5_cm_informe_get_estado=>rseloption.
    DATA e_return  TYPE zif_zui5_cm_informe_get_estado=>bapiret2_t.
    DATA ls_e_data  TYPE LINE OF zif_zui5_cm_informe_get_estado=>zsui5tt_cm_informe_estados.
    DATA ls_r_desc_estado  TYPE LINE OF zif_zui5_cm_informe_get_estado=>rseloption.
    DATA ls_r_estado  TYPE LINE OF zif_zui5_cm_informe_get_estado=>rseloption.
    DATA ls_r_explicacion  TYPE LINE OF zif_zui5_cm_informe_get_estado=>rseloption.
    DATA ls_r_tipo_estado  TYPE LINE OF zif_zui5_cm_informe_get_estado=>rseloption.
    DATA ls_e_return  TYPE LINE OF zif_zui5_cm_informe_get_estado=>bapiret2_t.
    DATA lv_rfc_name TYPE tfdir-funcname.
    DATA lv_destination TYPE rfcdest.
    DATA lv_subrc TYPE syst-subrc.
    DATA lv_exc_msg TYPE /iwbep/mgw_bop_rfc_excep_text.
    DATA lx_root TYPE REF TO cx_root.
    DATA lo_filter TYPE  REF TO /iwbep/if_mgw_req_filter.
    DATA lt_filter_select_options TYPE /iwbep/t_mgw_select_option.
    DATA lv_filter_str TYPE string.
    DATA ls_paging TYPE /iwbep/s_mgw_paging.
    DATA ls_converted_keys LIKE LINE OF et_entityset.
    DATA ls_filter TYPE /iwbep/s_mgw_select_option.
    DATA ls_filter_range TYPE /iwbep/s_cod_select_option.
    DATA lr_explicacion LIKE RANGE OF ls_converted_keys-explicacion.
    DATA ls_explicacion LIKE LINE OF lr_explicacion.
    DATA lr_descripcion LIKE RANGE OF ls_converted_keys-descripcion.
    DATA ls_descripcion LIKE LINE OF lr_descripcion.
    DATA lr_tipo_estado LIKE RANGE OF ls_converted_keys-tipo_estado.
    DATA ls_tipo_estado LIKE LINE OF lr_tipo_estado.
    DATA lr_estado LIKE RANGE OF ls_converted_keys-estado.
    DATA ls_estado LIKE LINE OF lr_estado.
    DATA lo_dp_facade TYPE REF TO /iwbep/if_mgw_dp_facade.
    DATA ls_gw_e_data LIKE LINE OF et_entityset.
    DATA lv_skip     TYPE int4.
    DATA lv_top      TYPE int4.

    "MTS: Ajustes filtro OR
    DATA lt_filter_select_options_and TYPE /iwbep/t_mgw_select_option.
    DATA lt_filter_select_options_temp TYPE /iwbep/t_mgw_select_option.
    DATA lt_filter_select_options_or TYPE /iwbep/t_mgw_select_option.
    DATA lv_veces TYPE i.
    DATA posicion TYPE i.
    "MTS: Ajustes filtro OR

*-------------------------------------------------------------
*  Map the runtime request to the RFC - Only mapped attributes
*-------------------------------------------------------------
* Get all input information from the technical request context object
* Since DPC works with internal property names and runtime API interface holds external property names
* the process needs to get the all needed input information from the technical request context object
* Get filter or select option information
    lo_filter = io_tech_request_context->get_filter( ).
    lt_filter_select_options = lo_filter->get_filter_select_options( ).
    lv_filter_str = lo_filter->get_filter_string( ).

* Check if the supplied filter is supported by standard gateway runtime process
    IF  lv_filter_str            IS NOT INITIAL
    AND lt_filter_select_options IS INITIAL.
      " If the string of the Filter System Query Option is not automatically converted into
      " filter option table (lt_filter_select_options), then the filtering combination is not supported
      " Log message in the application log
*   me->/iwbep/if_sb_dpc_comm_services~log_message(
*     EXPORTING
*       iv_msg_type   = 'E'
*       iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*       iv_msg_number = 025 ).
*   " Raise Exception
*   RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*     EXPORTING
*       textid = /iwbep/cx_mgw_tech_exception=>internal_error.
      "MTS: Ajustes filtro OR
      zcl_search_dpc=>filtros_or( EXPORTING iv_instancia = me iv_data = ls_gw_e_data IMPORTING et_filter_select_options_and = lt_filter_select_options_and et_filter_select_options_or = lt_filter_select_options_or ).
      "MTS: Ajustes filtro OR
    ENDIF.
    IF iv_search_string IS NOT INITIAL.
      zcl_search_dpc=>search_or( EXPORTING iv_instancia = me iv_search = iv_search_string iv_data = ls_gw_e_data it_filter_select_options = lt_filter_select_options
                 IMPORTING et_filter_select_options_or = lt_filter_select_options_or ).
    ENDIF.

* Get key table information
    io_tech_request_context->get_converted_source_keys(
      IMPORTING
        es_key_values  = ls_converted_keys ).

    ls_paging-top = io_tech_request_context->get_top( ).
    ls_paging-skip = io_tech_request_context->get_skip( ).

    "MTS: Ajustes filtro OR
    IF lt_filter_select_options_or IS NOT INITIAL OR lt_filter_select_options_and IS NOT INITIAL.
      DESCRIBE TABLE lt_filter_select_options_or LINES lv_veces.
      IF lv_veces IS INITIAL.
        lv_veces = 1.
      ENDIF.
    ELSE.
      lv_veces = 1.
    ENDIF.

    CLEAR posicion.

    IF lt_filter_select_options IS NOT INITIAL.
      zcl_search_dpc=>filtro_mayusculas(
     EXPORTING
       iv_data = ls_gw_e_data
       CHANGING
       ct_filter_select_options = lt_filter_select_options ).

      APPEND LINES OF lt_filter_select_options TO lt_filter_select_options_and.
    ENDIF.

    DO lv_veces TIMES.
      CLEAR: e_data, r_desc_estado, r_estado, r_explicacion, r_tipo_estado.

      ADD 1 TO posicion.
      READ TABLE lt_filter_select_options_or INTO DATA(ls_option_or) INDEX posicion.
      IF sy-subrc = 0.
        lt_filter_select_options = lt_filter_select_options_and.

        APPEND ls_option_or TO lt_filter_select_options.
      ELSE.
        lt_filter_select_options = lt_filter_select_options_and.
      ENDIF.
      "MTS: Ajustes filtro OR

* Maps filter table lines to function module parameters
      LOOP AT lt_filter_select_options INTO ls_filter.

        CASE ls_filter-property.
          WHEN 'EXPLICACION'.              " Equivalent to 'Explicacion' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_explicacion ).

            LOOP AT lr_explicacion INTO ls_explicacion.
              ls_r_explicacion-sign = ls_explicacion-sign.
              ls_r_explicacion-option = ls_explicacion-option.
              ls_r_explicacion-low = ls_explicacion-low.
              ls_r_explicacion-high = ls_explicacion-high.
              APPEND ls_r_explicacion TO r_explicacion.
            ENDLOOP.
            CLEAR lr_explicacion.
          WHEN 'DESCRIPCION'.              " Equivalent to 'Descripcion' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_descripcion ).

            LOOP AT lr_descripcion INTO ls_descripcion.
              ls_r_desc_estado-sign = ls_descripcion-sign.
              ls_r_desc_estado-option = ls_descripcion-option.
              ls_r_desc_estado-low = ls_descripcion-low.
              ls_r_desc_estado-high = ls_descripcion-high.
              APPEND ls_r_desc_estado TO r_desc_estado.
            ENDLOOP.
            CLEAR lr_descripcion.
          WHEN 'TIPO_ESTADO'.              " Equivalent to 'TipoEstado' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_tipo_estado ).

            LOOP AT lr_tipo_estado INTO ls_tipo_estado.
              ls_r_tipo_estado-sign = ls_tipo_estado-sign.
              ls_r_tipo_estado-option = ls_tipo_estado-option.
              ls_r_tipo_estado-low = ls_tipo_estado-low.
              ls_r_tipo_estado-high = ls_tipo_estado-high.
              APPEND ls_r_tipo_estado TO r_tipo_estado.
            ENDLOOP.
            CLEAR lr_tipo_estado.
          WHEN 'ESTADO'.              " Equivalent to 'Estado' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_estado ).

            LOOP AT lr_estado INTO ls_estado.
              ls_r_estado-sign = ls_estado-sign.
              ls_r_estado-option = ls_estado-option.
              ls_r_estado-low = ls_estado-low.
              ls_r_estado-high = ls_estado-high.
              APPEND ls_r_estado TO r_estado.
            ENDLOOP.
            CLEAR lr_estado.

          WHEN OTHERS.
*       sarce ini 3###########################################
            " Log message in the application log
            IF NOT iv_search_string IS INITIAL.
              DATA(vv_jump_search) = 'X'.
              CONTINUE.
            ENDIF.
*      SARCE FIN 3###########################################
            " Log message in the application log
            me->/iwbep/if_sb_dpc_comm_services~log_message(
              EXPORTING
                iv_msg_type   = 'E'
                iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                iv_msg_number = 020
                iv_msg_v1     = ls_filter-property ).
            " Raise Exception
            RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
              EXPORTING
                textid = /iwbep/cx_mgw_tech_exception=>internal_error.
        ENDCASE.

      ENDLOOP.

*      SARCE INI 4###########################################
      IF vv_jump_search = 'X'.
        vv_jump_search = ''.
        CONTINUE.
      ENDIF.
      "MTS: Ajustes
*      SARCE FIN 4###########################################


* Get RFC destination
      lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
      lv_destination = /iwbep/cl_sb_gen_dpc_rt_util=>get_rfc_destination( io_dp_facade = lo_dp_facade ).

*-------------------------------------------------------------
*  Call RFC function module
*-------------------------------------------------------------
      lv_rfc_name = 'ZUI5_CM_INFORME_GET_ESTADOS'.

      IF lv_destination IS INITIAL OR lv_destination EQ 'NONE'.

        TRY.
            CALL FUNCTION lv_rfc_name
              EXPORTING
                r_explicacion  = r_explicacion
                r_desc_estado  = r_desc_estado
                r_tipo_estado  = r_tipo_estado
                r_estado       = r_estado
              IMPORTING
                e_data         = e_data
                e_return       = e_return
              EXCEPTIONS
                system_failure = 1000 message lv_exc_msg
                OTHERS         = 1002.

            lv_subrc = sy-subrc.
*in case of co-deployment the exception is raised and needs to be caught
          CATCH cx_root INTO lx_root.
            lv_subrc = 1001.
            lv_exc_msg = lx_root->if_message~get_text( ).
        ENDTRY.

      ELSE.

        CALL FUNCTION lv_rfc_name DESTINATION lv_destination
          EXPORTING
            r_explicacion         = r_explicacion
            r_desc_estado         = r_desc_estado
            r_tipo_estado         = r_tipo_estado
            r_estado              = r_estado
          IMPORTING
            e_data                = e_data
            e_return              = e_return
          EXCEPTIONS
            system_failure        = 1000 MESSAGE lv_exc_msg
            communication_failure = 1001 MESSAGE lv_exc_msg
            OTHERS                = 1002.

        lv_subrc = sy-subrc.

      ENDIF.

      "MTS: Ajustes
      APPEND LINES OF e_data TO e_data_temp.

*-------------------------------------------------------------
*  Map the RFC response to the caller interface - Only mapped attributes
*-------------------------------------------------------------
*-------------------------------------------------------------
* Error and exception handling
*-------------------------------------------------------------
      IF lv_subrc <> 0.
* Execute the RFC exception handling process
        me->/iwbep/if_sb_dpc_comm_services~rfc_exception_handling(
          EXPORTING
            iv_subrc            = lv_subrc
            iv_exp_message_text = lv_exc_msg ).
      ENDIF.

      IF e_return IS NOT INITIAL.
        me->/iwbep/if_sb_dpc_comm_services~rfc_save_log(
          EXPORTING
            iv_entity_type = iv_entity_name
            it_return      = e_return
            it_key_tab     = it_key_tab ).
      ENDIF.

    ENDDO. "MTS Ajustes
    e_data = e_data_temp.

*-------------------------------------------------------------------------*
*             - Post Backend Call -
*-------------------------------------------------------------------------*
    IF ls_paging-skip IS NOT INITIAL.
*  If the Skip value was requested at runtime
*  the response table will provide backend entries from skip + 1, meaning start from skip +1
*  for example: skip=5 means to start get results from the 6th row
      lv_skip = ls_paging-skip + 1.
    ENDIF.
*  The Top value was requested at runtime but was not handled as part of the function interface
    IF  ls_paging-top <> 0
    AND lv_skip IS NOT INITIAL.
*  if lv_skip > 0 retrieve the entries from lv_skip + Top - 1
*  for example: skip=5 and top=2 means to start get results from the 6th row and end in row number 7
      lv_top = ls_paging-top + lv_skip - 1.
    ELSEIF ls_paging-top <> 0
    AND    lv_skip IS INITIAL.
      lv_top = ls_paging-top.
    ELSE.
      lv_top = lines( e_data ).
    ENDIF.

    "Ordenamos
    IF it_order IS NOT INITIAL.
      SORT e_data BY zcl_search_dpc=>sort_string( EXPORTING iv_instancia = me  ).
      DELETE ADJACENT DUPLICATES FROM e_data.
    ENDIF.

*  - Map properties from the backend to the Gateway output response table -

    LOOP AT e_data INTO ls_e_data
*  Provide the response entries according to the Top and Skip parameters that were provided at runtime
         FROM lv_skip TO lv_top.
*  Only fields that were mapped will be delivered to the response table
      ls_gw_e_data-estado = ls_e_data-estado.
      ls_gw_e_data-tipo_estado = ls_e_data-tipo_estado.
      ls_gw_e_data-descripcion = ls_e_data-descripcion.
      ls_gw_e_data-explicacion = ls_e_data-explicacion.
      APPEND ls_gw_e_data TO et_entityset.
      CLEAR ls_gw_e_data.
    ENDLOOP.

  ENDMETHOD.
  METHOD pedidosstockset_get_entity.
*-------------------------------------------------------------
*  Data declaration
*-------------------------------------------------------------
    DATA e_data  TYPE zif_zui5_cm_informe_get_stocks=>zsui5tt_cm_informe_stocks.
    DATA e_return  TYPE zif_zui5_cm_informe_get_stocks=>bapiret2_t.
    DATA r_entrega  TYPE zif_zui5_cm_informe_get_stocks=>sd_vbeln_ranges.
    DATA r_lgort  TYPE zif_zui5_cm_informe_get_stocks=>zttpp_range_lgort.
    DATA r_posnr  TYPE zif_zui5_cm_informe_get_stocks=>isauto_xlo_range_t_posnr_vl.
    DATA r_vbeln  TYPE zif_zui5_cm_informe_get_stocks=>sd_vbeln_ranges.
    DATA r_werks  TYPE zif_zui5_cm_informe_get_stocks=>werks_t_range.
    DATA ls_e_data  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>zsui5tt_cm_informe_stocks.
    DATA ls_e_return  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>bapiret2_t.
    DATA ls_r_entrega  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>sd_vbeln_ranges.
    DATA ls_r_lgort  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>zttpp_range_lgort.
    DATA ls_r_posnr  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>isauto_xlo_range_t_posnr_vl.
    DATA ls_r_vbeln  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>sd_vbeln_ranges.
    DATA ls_r_werks  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>werks_t_range.
    DATA lv_rfc_name TYPE tfdir-funcname.
    DATA lv_destination TYPE rfcdest.
    DATA lv_subrc TYPE syst-subrc.
    DATA lv_exc_msg TYPE /iwbep/mgw_bop_rfc_excep_text.
    DATA lx_root TYPE REF TO cx_root.
    DATA ls_converted_keys LIKE er_entity.
    DATA lv_source_entity_set_name TYPE string.
    DATA lo_dp_facade TYPE REF TO /iwbep/if_mgw_dp_facade.

*-------------------------------------------------------------
*  Map the runtime request to the RFC - Only mapped attributes
*-------------------------------------------------------------
* Get all input information from the technical request context object
* Since DPC works with internal property names and runtime API interface holds external property names
* the process needs to get the all needed input information from the technical request context object
* Get key table information - for direct call
    io_tech_request_context->get_converted_keys(
      IMPORTING
        es_key_values = ls_converted_keys ).

* Maps key fields to function module parameters

    lv_source_entity_set_name = io_tech_request_context->get_source_entity_set_name( ).

    IF lv_source_entity_set_name = 'PedidosStockSet' AND
       lv_source_entity_set_name NE io_tech_request_context->get_entity_set_name( ).

      io_tech_request_context->get_converted_source_keys(
      IMPORTING es_key_values = ls_converted_keys ).

    ENDIF.

    ls_r_entrega-low = ls_converted_keys-entrega.
    ls_r_lgort-low = ls_converted_keys-lgort.
    ls_r_posnr-low = ls_converted_keys-posnr.
    ls_r_vbeln-low = ls_converted_keys-vbeln.
    ls_r_werks-low = ls_converted_keys-werks.
* Append lines of table parameters in the function call
    IF ls_r_entrega IS NOT INITIAL.
      ls_r_entrega-sign = 'I'.
      ls_r_entrega-option = 'EQ'.
      APPEND ls_r_entrega TO r_entrega.
    ENDIF.
    IF ls_r_lgort IS NOT INITIAL.
      ls_r_lgort-sign = 'I'.
      ls_r_lgort-option = 'EQ'.
      APPEND ls_r_lgort TO r_lgort.
    ENDIF.
    IF ls_r_posnr IS NOT INITIAL.
      ls_r_posnr-sign = 'I'.
      ls_r_posnr-option = 'EQ'.
      APPEND ls_r_posnr TO r_posnr.
    ENDIF.
    IF ls_r_vbeln IS NOT INITIAL.
      ls_r_vbeln-sign = 'I'.
      ls_r_vbeln-option = 'EQ'.
      APPEND ls_r_vbeln TO r_vbeln.
    ENDIF.
    IF ls_r_werks IS NOT INITIAL.
      ls_r_werks-sign = 'I'.
      ls_r_werks-option = 'EQ'.
      APPEND ls_r_werks TO r_werks.
    ENDIF.

* Get RFC destination
    lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
    lv_destination = /iwbep/cl_sb_gen_dpc_rt_util=>get_rfc_destination( io_dp_facade = lo_dp_facade ).

*-------------------------------------------------------------
*  Call RFC function module
*-------------------------------------------------------------
    lv_rfc_name = 'ZUI5_CM_INFORME_GET_STOCKS'.

    IF lv_destination IS INITIAL OR lv_destination EQ 'NONE'.

      TRY.
          CALL FUNCTION lv_rfc_name
            EXPORTING
              r_werks        = r_werks
              r_lgort        = r_lgort
              r_vbeln        = r_vbeln
              r_posnr        = r_posnr
              r_entrega      = r_entrega
            IMPORTING
              e_return       = e_return
              e_data         = e_data
            EXCEPTIONS
              system_failure = 1000 message lv_exc_msg
              OTHERS         = 1002.

          lv_subrc = sy-subrc.
*in case of co-deployment the exception is raised and needs to be caught
        CATCH cx_root INTO lx_root.
          lv_subrc = 1001.
          lv_exc_msg = lx_root->if_message~get_text( ).
      ENDTRY.

    ELSE.

      CALL FUNCTION lv_rfc_name DESTINATION lv_destination
        EXPORTING
          r_werks               = r_werks
          r_lgort               = r_lgort
          r_vbeln               = r_vbeln
          r_posnr               = r_posnr
          r_entrega             = r_entrega
        IMPORTING
          e_return              = e_return
          e_data                = e_data
        EXCEPTIONS
          system_failure        = 1000 MESSAGE lv_exc_msg
          communication_failure = 1001 MESSAGE lv_exc_msg
          OTHERS                = 1002.

      lv_subrc = sy-subrc.

    ENDIF.

*-------------------------------------------------------------
*  Map the RFC response to the caller interface - Only mapped attributes
*-------------------------------------------------------------
*-------------------------------------------------------------
* Error and exception handling
*-------------------------------------------------------------
    IF lv_subrc <> 0.
* Execute the RFC exception handling process
      me->/iwbep/if_sb_dpc_comm_services~rfc_exception_handling(
        EXPORTING
          iv_subrc            = lv_subrc
          iv_exp_message_text = lv_exc_msg ).
    ENDIF.

    IF e_return IS NOT INITIAL.
      me->/iwbep/if_sb_dpc_comm_services~rfc_save_log(
        EXPORTING
          iv_entity_type = iv_entity_name
          it_return      = e_return
          it_key_tab     = it_key_tab ).
    ENDIF.

*-------------------------------------------------------------------------*
*             - Post Backend Call -
*-------------------------------------------------------------------------*
* Map properties from the backend to the Gateway output response structure


* In GetEntity operation we support only read for the first entry in the response table

    READ TABLE e_data INTO ls_e_data INDEX 1.
    er_entity-entrega = ls_e_data-entrega.
    er_entity-posnr = ls_e_data-posnr.
    er_entity-vbeln = ls_e_data-vbeln.
    er_entity-kunnr = ls_e_data-kunnr.
    er_entity-kunnr_name = ls_e_data-kunnr_name.
    er_entity-matnr = ls_e_data-matnr.
    er_entity-maktx = ls_e_data-maktx.
    er_entity-dimensiones = ls_e_data-dimensiones.
    er_entity-erdat = ls_e_data-erdat.
    er_entity-aufnr = ls_e_data-aufnr.
    er_entity-estado = ls_e_data-estado.
    er_entity-desc_estado = ls_e_data-desc_estado.
    er_entity-tipo_estado = ls_e_data-tipo_estado.
    er_entity-ctd_pedido = ls_e_data-ctd_pedido.
    er_entity-pte_servir = ls_e_data-pte_servir.
    er_entity-ctd_ent_pte_servir = ls_e_data-ctd_ent_pte_servir.
    er_entity-cantidad_servida = ls_e_data-cantidad_servida.
    er_entity-ctd_stock_muelle = ls_e_data-ctd_stock_muelle.
    er_entity-ctd_fabricada = ls_e_data-ctd_fabricada.
    er_entity-meins = ls_e_data-meins.
    er_entity-etenr = ls_e_data-etenr.
    er_entity-eindt = ls_e_data-eindt.
    er_entity-werks = ls_e_data-werks.
    er_entity-lgort = ls_e_data-lgort.
    er_entity-estado_orden = ls_e_data-estado_orden.
    er_entity-estado_orden_txt = ls_e_data-estado_orden_txt.
    er_entity-fecha_fin_orden = ls_e_data-fecha_fin_orden.
    er_entity-hora_fin_orden = ls_e_data-hora_fin_orden.
  ENDMETHOD.
  METHOD pedidosstockset_get_entityset.
*-------------------------------------------------------------
*  Data declaration
*-------------------------------------------------------------
    DATA e_data  TYPE zif_zui5_cm_informe_get_stocks=>zsui5tt_cm_informe_stocks.
    DATA e_data_temp  TYPE zif_zui5_cm_informe_get_stocks=>zsui5tt_cm_informe_stocks.
    DATA r_dimensiones  TYPE zif_zui5_cm_informe_get_stocks=>rseloption.
    DATA ls_r_dimensiones  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>rseloption.
    DATA e_return  TYPE zif_zui5_cm_informe_get_stocks=>bapiret2_t.
    DATA r_aufnr  TYPE zif_zui5_cm_informe_get_stocks=>range_t_aufnr.
    DATA r_entrega  TYPE zif_zui5_cm_informe_get_stocks=>sd_vbeln_ranges.
    DATA r_erdat  TYPE zif_zui5_cm_informe_get_stocks=>date_t_range.
    DATA r_eindt  TYPE zif_zui5_cm_informe_get_stocks=>date_t_range.
    DATA r_kunnr  TYPE zif_zui5_cm_informe_get_stocks=>trty_kunnr_range.
    DATA r_lgort  TYPE zif_zui5_cm_informe_get_stocks=>zttpp_range_lgort.
    DATA r_maktx  TYPE zif_zui5_cm_informe_get_stocks=>fip_t_maktx_range.
    DATA r_matnr  TYPE zif_zui5_cm_informe_get_stocks=>ranges_matnr.
    DATA r_nombre  TYPE zif_zui5_cm_informe_get_stocks=>zsuis_cm_nombres_rang.
    DATA r_vbeln  TYPE zif_zui5_cm_informe_get_stocks=>sd_vbeln_ranges.
    DATA r_werks  TYPE zif_zui5_cm_informe_get_stocks=>werks_t_range.
    DATA ls_e_data  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>zsui5tt_cm_informe_stocks.
    DATA ls_e_return  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>bapiret2_t.
    DATA ls_r_aufnr  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>range_t_aufnr.
    DATA ls_r_entrega  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>sd_vbeln_ranges.
    DATA ls_r_erdat  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>date_t_range.
    DATA ls_r_kunnr  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>trty_kunnr_range.
    DATA ls_r_lgort  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>zttpp_range_lgort.
    DATA ls_r_maktx  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>fip_t_maktx_range.
    DATA ls_r_matnr  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>ranges_matnr.
    DATA ls_r_nombre  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>zsuis_cm_nombres_rang.
    DATA ls_r_vbeln  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>sd_vbeln_ranges.
    DATA ls_r_werks  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>werks_t_range.
    DATA lv_rfc_name TYPE tfdir-funcname.
    DATA lv_destination TYPE rfcdest.
    DATA lv_subrc TYPE syst-subrc.
    DATA lv_exc_msg TYPE /iwbep/mgw_bop_rfc_excep_text.
    DATA lx_root TYPE REF TO cx_root.
    DATA lo_filter TYPE  REF TO /iwbep/if_mgw_req_filter.
    DATA lt_filter_select_options TYPE /iwbep/t_mgw_select_option.
    DATA lv_filter_str TYPE string.
    DATA ls_paging TYPE /iwbep/s_mgw_paging.
    DATA ls_converted_keys LIKE LINE OF et_entityset.
    DATA ls_filter TYPE /iwbep/s_mgw_select_option.
    DATA ls_filter_range TYPE /iwbep/s_cod_select_option.
    DATA lr_entrega LIKE RANGE OF ls_converted_keys-entrega.
    DATA ls_entrega LIKE LINE OF lr_entrega.
    DATA lr_werks LIKE RANGE OF ls_converted_keys-werks.
    DATA ls_werks LIKE LINE OF lr_werks.
    DATA lr_lgort LIKE RANGE OF ls_converted_keys-lgort.
    DATA ls_lgort LIKE LINE OF lr_lgort.
    DATA lr_kunnr LIKE RANGE OF ls_converted_keys-kunnr.
    DATA ls_kunnr LIKE LINE OF lr_kunnr.
    DATA lr_kunnr_name LIKE RANGE OF ls_converted_keys-kunnr_name.
    DATA ls_kunnr_name LIKE LINE OF lr_kunnr_name.
    DATA lr_matnr LIKE RANGE OF ls_converted_keys-matnr.
    DATA ls_matnr LIKE LINE OF lr_matnr.
    DATA lr_maktx LIKE RANGE OF ls_converted_keys-maktx.
    DATA ls_maktx LIKE LINE OF lr_maktx.
    DATA lr_erdat LIKE RANGE OF ls_converted_keys-erdat.
    DATA ls_erdat LIKE LINE OF lr_erdat.
    DATA lr_aufnr LIKE RANGE OF ls_converted_keys-aufnr.
    DATA ls_aufnr LIKE LINE OF lr_aufnr.
    DATA lr_vbeln LIKE RANGE OF ls_converted_keys-vbeln.
    DATA ls_vbeln LIKE LINE OF lr_vbeln.
    DATA lr_dimensiones LIKE RANGE OF ls_converted_keys-dimensiones.
    DATA ls_dimensiones LIKE LINE OF lr_dimensiones.
    DATA lo_dp_facade TYPE REF TO /iwbep/if_mgw_dp_facade.
    DATA ls_gw_e_data LIKE LINE OF et_entityset.
    DATA lv_skip     TYPE int4.
    DATA lv_top      TYPE int4.
    DATA r_estado  TYPE zif_zui5_cm_informe_get_stocks=>rseloption.
    DATA r_desc_estado  TYPE zif_zui5_cm_informe_get_stocks=>rseloption.
    DATA ls_r_desc_estado  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>rseloption.
    DATA ls_r_estado  TYPE LINE OF zif_zui5_cm_informe_get_stocks=>rseloption.
    DATA lr_desc_estado LIKE RANGE OF ls_converted_keys-desc_estado.
    DATA ls_desc_estado LIKE LINE OF lr_desc_estado.
    DATA lr_estado LIKE RANGE OF ls_converted_keys-estado.
    DATA ls_estado LIKE LINE OF lr_estado.

    "MTS: Ajustes filtro OR
    DATA lt_filter_select_options_and TYPE /iwbep/t_mgw_select_option.
    DATA lt_filter_select_options_temp TYPE /iwbep/t_mgw_select_option.
    DATA lt_filter_select_options_or TYPE /iwbep/t_mgw_select_option.
    DATA lv_veces TYPE i.
    DATA posicion TYPE i.
    "MTS: Ajustes filtro OR

*-------------------------------------------------------------
*  Map the runtime request to the RFC - Only mapped attributes
*-------------------------------------------------------------
* Get all input information from the technical request context object
* Since DPC works with internal property names and runtime API interface holds external property names
* the process needs to get the all needed input information from the technical request context object
* Get filter or select option information
    lo_filter = io_tech_request_context->get_filter( ).
    lt_filter_select_options = lo_filter->get_filter_select_options( ).
    lv_filter_str = lo_filter->get_filter_string( ).

* Check if the supplied filter is supported by standard gateway runtime process
    IF  lv_filter_str            IS NOT INITIAL
    AND lt_filter_select_options IS INITIAL.
      " If the string of the Filter System Query Option is not automatically converted into
      " filter option table (lt_filter_select_options), then the filtering combination is not supported
      " Log message in the application log
*   me->/iwbep/if_sb_dpc_comm_services~log_message(
*     EXPORTING
*       iv_msg_type   = 'E'
*       iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*       iv_msg_number = 025 ).
*   " Raise Exception
*   RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*     EXPORTING
*       textid = /iwbep/cx_mgw_tech_exception=>internal_error.
      "MTS: Ajustes filtro OR
      zcl_search_dpc=>filtros_or( EXPORTING iv_instancia = me iv_data = ls_gw_e_data IMPORTING et_filter_select_options_and = lt_filter_select_options_and et_filter_select_options_or = lt_filter_select_options_or ).
      "MTS: Ajustes filtro OR
    ENDIF.
    IF iv_search_string IS NOT INITIAL.
      zcl_search_dpc=>search_or( EXPORTING iv_instancia = me iv_search = iv_search_string iv_data = ls_gw_e_data it_filter_select_options = lt_filter_select_options
                 IMPORTING et_filter_select_options_or = lt_filter_select_options_or ).
    ENDIF.

* Get key table information
    io_tech_request_context->get_converted_source_keys(
      IMPORTING
        es_key_values  = ls_converted_keys ).

    ls_paging-top = io_tech_request_context->get_top( ).
    ls_paging-skip = io_tech_request_context->get_skip( ).

    "MTS: Ajustes filtro OR
    IF lt_filter_select_options_or IS NOT INITIAL OR lt_filter_select_options_and IS NOT INITIAL.
      DESCRIBE TABLE lt_filter_select_options_or LINES lv_veces.
      IF lv_veces IS INITIAL.
        lv_veces = 1.
      ENDIF.
    ELSE.
      lv_veces = 1.
    ENDIF.

    CLEAR posicion.

    IF lt_filter_select_options IS NOT INITIAL.
      zcl_search_dpc=>filtro_mayusculas(
     EXPORTING
       iv_data = ls_gw_e_data
       CHANGING
       ct_filter_select_options = lt_filter_select_options ).

      APPEND LINES OF lt_filter_select_options TO lt_filter_select_options_and.
    ENDIF.

    DO lv_veces TIMES.
      CLEAR: e_data, r_aufnr, r_erdat, r_kunnr, r_maktx, r_matnr, r_nombre, r_lgort, r_werks, r_entrega, r_vbeln,
      r_estado, r_desc_estado, r_eindt, r_dimensiones.

      ADD 1 TO posicion.
      READ TABLE lt_filter_select_options_or INTO DATA(ls_option_or) INDEX posicion.
      IF sy-subrc = 0.
        lt_filter_select_options = lt_filter_select_options_and.

        APPEND ls_option_or TO lt_filter_select_options.
      ELSE.
        lt_filter_select_options = lt_filter_select_options_and.
      ENDIF.
      "MTS: Ajustes filtro OR

* Maps filter table lines to function module parameters
      LOOP AT lt_filter_select_options INTO ls_filter.

        CASE ls_filter-property.
          WHEN 'DIMENSIONES'.              " Equivalent to 'Dimensiones' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_dimensiones ).

            LOOP AT lr_dimensiones INTO ls_dimensiones.
              ls_r_dimensiones-sign = ls_dimensiones-sign.
              ls_r_dimensiones-option = ls_dimensiones-option.
              ls_r_dimensiones-low = ls_dimensiones-low.
              ls_r_dimensiones-high = ls_dimensiones-high.
              APPEND ls_r_dimensiones TO r_dimensiones.
            ENDLOOP.
            CLEAR lr_dimensiones.
          WHEN 'DESC_ESTADO'.              " Equivalent to 'DescEstado' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_desc_estado ).

            LOOP AT lr_desc_estado INTO ls_desc_estado.
              ls_r_desc_estado-sign = ls_desc_estado-sign.
              ls_r_desc_estado-option = ls_desc_estado-option.
              ls_r_desc_estado-low = ls_desc_estado-low.
              ls_r_desc_estado-high = ls_desc_estado-high.
              APPEND ls_r_desc_estado TO r_desc_estado.
            ENDLOOP.
            CLEAR lr_desc_estado.
          WHEN 'ESTADO'.              " Equivalent to 'Estado' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_estado ).

            LOOP AT lr_estado INTO ls_estado.
              ls_r_estado-sign = ls_estado-sign.
              ls_r_estado-option = ls_estado-option.
              ls_r_estado-low = ls_estado-low.
              ls_r_estado-high = ls_estado-high.
              APPEND ls_r_estado TO r_estado.
            ENDLOOP.
            CLEAR lr_estado.
          WHEN 'ENTREGA'.              " Equivalent to 'Entrega' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_entrega ).

            LOOP AT lr_entrega INTO ls_entrega.
              ls_r_entrega-high = ls_entrega-high.
              ls_r_entrega-low = ls_entrega-low.
              ls_r_entrega-option = ls_entrega-option.
              ls_r_entrega-sign = ls_entrega-sign.
              APPEND ls_r_entrega TO r_entrega.
            ENDLOOP.
            CLEAR lr_entrega.
          WHEN 'WERKS'.              " Equivalent to 'Werks' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_werks ).

            LOOP AT lr_werks INTO ls_werks.
              ls_r_werks-high = ls_werks-high.
              ls_r_werks-low = ls_werks-low.
              ls_r_werks-option = ls_werks-option.
              ls_r_werks-sign = ls_werks-sign.
              APPEND ls_r_werks TO r_werks.
            ENDLOOP.
            CLEAR lr_werks.
          WHEN 'LGORT'.              " Equivalent to 'Lgort' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_lgort ).

            LOOP AT lr_lgort INTO ls_lgort.
              ls_r_lgort-sign = ls_lgort-sign.
              ls_r_lgort-option = ls_lgort-option.
              ls_r_lgort-low = ls_lgort-low.
              ls_r_lgort-high = ls_lgort-high.
              APPEND ls_r_lgort TO r_lgort.
            ENDLOOP.
            CLEAR lr_lgort.
          WHEN 'KUNNR'.              " Equivalent to 'Kunnr' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_kunnr ).

            LOOP AT lr_kunnr INTO ls_kunnr.
              ls_r_kunnr-high = ls_kunnr-high.
              ls_r_kunnr-low = ls_kunnr-low.
              ls_r_kunnr-option = ls_kunnr-option.
              ls_r_kunnr-sign = ls_kunnr-sign.
              APPEND ls_r_kunnr TO r_kunnr.
            ENDLOOP.
            CLEAR lr_kunnr.
          WHEN 'KUNNR_NAME'.              " Equivalent to 'KunnrName' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_kunnr_name ).

            LOOP AT lr_kunnr_name INTO ls_kunnr_name.
              ls_r_nombre-high = ls_kunnr_name-high.
              ls_r_nombre-low = ls_kunnr_name-low.
              ls_r_nombre-option = ls_kunnr_name-option.
              ls_r_nombre-sign = ls_kunnr_name-sign.
              APPEND ls_r_nombre TO r_nombre.
            ENDLOOP.
            CLEAR lr_kunnr_name.
          WHEN 'MATNR'.              " Equivalent to 'Matnr' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_matnr ).

            LOOP AT lr_matnr INTO ls_matnr.
              ls_r_matnr-high = ls_matnr-high.
              ls_r_matnr-low = ls_matnr-low.
              ls_r_matnr-option = ls_matnr-option.
              ls_r_matnr-sign = ls_matnr-sign.
              APPEND ls_r_matnr TO r_matnr.
            ENDLOOP.
            CLEAR lr_matnr.
          WHEN 'MAKTX'.              " Equivalent to 'Maktx' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_maktx ).

            LOOP AT lr_maktx INTO ls_maktx.
              ls_r_maktx-high = ls_maktx-high.
              ls_r_maktx-low = ls_maktx-low.
              ls_r_maktx-option = ls_maktx-option.
              ls_r_maktx-sign = ls_maktx-sign.
              APPEND ls_r_maktx TO r_maktx.
            ENDLOOP.
            CLEAR lr_maktx.
          WHEN 'ERDAT'.              " Equivalent to 'Erdat' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_erdat ).

            LOOP AT lr_erdat INTO ls_erdat.
              ls_r_erdat-high = ls_erdat-high.
              ls_r_erdat-low = ls_erdat-low.
              ls_r_erdat-option = ls_erdat-option.
              ls_r_erdat-sign = ls_erdat-sign.
              APPEND ls_r_erdat TO r_erdat.
            ENDLOOP.
            CLEAR lr_erdat.
          WHEN 'EINDT'.              " Equivalent to 'Erdat' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_erdat ).

            LOOP AT lr_erdat INTO ls_erdat.
              ls_r_erdat-high = ls_erdat-high.
              ls_r_erdat-low = ls_erdat-low.
              ls_r_erdat-option = ls_erdat-option.
              ls_r_erdat-sign = ls_erdat-sign.
              APPEND ls_r_erdat TO r_eindt.
            ENDLOOP.
            CLEAR lr_erdat.
          WHEN 'AUFNR'.              " Equivalent to 'Aufnr' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_aufnr ).

            LOOP AT lr_aufnr INTO ls_aufnr.
              ls_r_aufnr-high = ls_aufnr-high.
              ls_r_aufnr-low = ls_aufnr-low.
              ls_r_aufnr-option = ls_aufnr-option.
              ls_r_aufnr-sign = ls_aufnr-sign.
              APPEND ls_r_aufnr TO r_aufnr.
            ENDLOOP.
            CLEAR lr_aufnr.
          WHEN 'VBELN'.              " Equivalent to 'Vbeln' property in the service
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lr_vbeln ).

            LOOP AT lr_vbeln INTO ls_vbeln.
              ls_r_vbeln-sign = ls_vbeln-sign.
              ls_r_vbeln-option = ls_vbeln-option.
              ls_r_vbeln-low = ls_vbeln-low.
              ls_r_vbeln-high = ls_vbeln-high.
              APPEND ls_r_vbeln TO r_vbeln.
            ENDLOOP.
            CLEAR lr_vbeln.

          WHEN OTHERS.
*       sarce ini 3###########################################
            " Log message in the application log
            IF NOT iv_search_string IS INITIAL.
              DATA(vv_jump_search) = 'X'.
              CONTINUE.
            ENDIF.
*      SARCE FIN 3###########################################
            " Log message in the application log
            me->/iwbep/if_sb_dpc_comm_services~log_message(
              EXPORTING
                iv_msg_type   = 'E'
                iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                iv_msg_number = 020
                iv_msg_v1     = ls_filter-property ).
            " Raise Exception
            RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
              EXPORTING
                textid = /iwbep/cx_mgw_tech_exception=>internal_error.
        ENDCASE.

      ENDLOOP.

*      SARCE INI 4###########################################
      IF vv_jump_search = 'X'.
        vv_jump_search = ''.
        CONTINUE.
      ENDIF.
      "MTS: Ajustes
*      SARCE FIN 4###########################################

* Get RFC destination
      lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
      lv_destination = /iwbep/cl_sb_gen_dpc_rt_util=>get_rfc_destination( io_dp_facade = lo_dp_facade ).

*-------------------------------------------------------------
*  Call RFC function module
*-------------------------------------------------------------
      lv_rfc_name = 'ZUI5_CM_INFORME_GET_STOCKS'.

      IF lv_destination IS INITIAL OR lv_destination EQ 'NONE'.

        TRY.
            CALL FUNCTION lv_rfc_name
              EXPORTING
                r_werks        = r_werks
                r_kunnr        = r_kunnr
                r_nombre       = r_nombre
                r_matnr        = r_matnr
                r_maktx        = r_maktx
                r_erdat        = r_erdat
                r_aufnr        = r_aufnr
                r_lgort        = r_lgort
                r_entrega      = r_entrega
                r_vbeln        = r_vbeln
                r_desc_estado  = r_desc_estado
                r_estado       = r_estado
                r_edatu        = r_eindt
                r_dimensiones  = r_dimensiones
              IMPORTING
                e_return       = e_return
                e_data         = e_data
              EXCEPTIONS
                system_failure = 1000 message lv_exc_msg
                OTHERS         = 1002.

            lv_subrc = sy-subrc.
*in case of co-deployment the exception is raised and needs to be caught
          CATCH cx_root INTO lx_root.
            lv_subrc = 1001.
            lv_exc_msg = lx_root->if_message~get_text( ).
        ENDTRY.

      ELSE.

        CALL FUNCTION lv_rfc_name DESTINATION lv_destination
          EXPORTING
            r_werks               = r_werks
            r_kunnr               = r_kunnr
            r_nombre              = r_nombre
            r_matnr               = r_matnr
            r_maktx               = r_maktx
            r_erdat               = r_erdat
            r_aufnr               = r_aufnr
            r_lgort               = r_lgort
            r_entrega             = r_entrega
            r_vbeln               = r_vbeln
            r_desc_estado         = r_desc_estado
            r_estado              = r_estado
            r_edatu               = r_eindt
            r_dimensiones         = r_dimensiones
          IMPORTING
            e_return              = e_return
            e_data                = e_data
          EXCEPTIONS
            system_failure        = 1000 MESSAGE lv_exc_msg
            communication_failure = 1001 MESSAGE lv_exc_msg
            OTHERS                = 1002.

        lv_subrc = sy-subrc.

      ENDIF.

      "MTS: Ajustes
      APPEND LINES OF e_data TO e_data_temp.

*-------------------------------------------------------------
*  Map the RFC response to the caller interface - Only mapped attributes
*-------------------------------------------------------------
*-------------------------------------------------------------
* Error and exception handling
*-------------------------------------------------------------
      IF lv_subrc <> 0.
* Execute the RFC exception handling process
        me->/iwbep/if_sb_dpc_comm_services~rfc_exception_handling(
          EXPORTING
            iv_subrc            = lv_subrc
            iv_exp_message_text = lv_exc_msg ).
      ENDIF.

      IF e_return IS NOT INITIAL.
        me->/iwbep/if_sb_dpc_comm_services~rfc_save_log(
          EXPORTING
            iv_entity_type = iv_entity_name
            it_return      = e_return
            it_key_tab     = it_key_tab ).
      ENDIF.

    ENDDO. "MTS Ajustes
    e_data = e_data_temp.
*-------------------------------------------------------------------------*
*             - Post Backend Call -
*-------------------------------------------------------------------------*
    IF ls_paging-skip IS NOT INITIAL.
*  If the Skip value was requested at runtime
*  the response table will provide backend entries from skip + 1, meaning start from skip +1
*  for example: skip=5 means to start get results from the 6th row
      lv_skip = ls_paging-skip + 1.
    ENDIF.
*  The Top value was requested at runtime but was not handled as part of the function interface
    IF  ls_paging-top <> 0
    AND lv_skip IS NOT INITIAL.
*  if lv_skip > 0 retrieve the entries from lv_skip + Top - 1
*  for example: skip=5 and top=2 means to start get results from the 6th row and end in row number 7
      lv_top = ls_paging-top + lv_skip - 1.
    ELSEIF ls_paging-top <> 0
    AND    lv_skip IS INITIAL.
      lv_top = ls_paging-top.
    ELSE.
      lv_top = lines( e_data ).
    ENDIF.

    "Ordenamos
    IF it_order IS NOT INITIAL.
      SORT e_data BY zcl_search_dpc=>sort_string( EXPORTING iv_instancia = me  ).
      DELETE ADJACENT DUPLICATES FROM e_data.
    ENDIF.

*  - Map properties from the backend to the Gateway output response table -

    LOOP AT e_data INTO ls_e_data
*  Provide the response entries according to the Top and Skip parameters that were provided at runtime
         FROM lv_skip TO lv_top.
*  Only fields that were mapped will be delivered to the response table
      ls_gw_e_data-dimensiones = ls_e_data-dimensiones.
      ls_gw_e_data-vbeln = ls_e_data-vbeln.
      ls_gw_e_data-posnr = ls_e_data-posnr.
      ls_gw_e_data-estado = ls_e_data-estado.
      ls_gw_e_data-desc_estado = ls_e_data-desc_estado.
      ls_gw_e_data-tipo_estado = ls_e_data-tipo_estado.
      ls_gw_e_data-ctd_pedido = ls_e_data-ctd_pedido.
      ls_gw_e_data-pte_servir = ls_e_data-pte_servir.
      ls_gw_e_data-ctd_ent_pte_servir = ls_e_data-ctd_ent_pte_servir.
      ls_gw_e_data-cantidad_servida = ls_e_data-cantidad_servida.
      ls_gw_e_data-ctd_stock_muelle = ls_e_data-ctd_stock_muelle.
      ls_gw_e_data-ctd_fabricada = ls_e_data-ctd_fabricada.
      ls_gw_e_data-meins = ls_e_data-meins.
      ls_gw_e_data-entrega = ls_e_data-entrega.
      ls_gw_e_data-etenr = ls_e_data-etenr.
      ls_gw_e_data-eindt = ls_e_data-eindt.
      ls_gw_e_data-werks = ls_e_data-werks.
      ls_gw_e_data-lgort = ls_e_data-lgort.
      ls_gw_e_data-kunnr = ls_e_data-kunnr.
      ls_gw_e_data-kunnr_name = ls_e_data-kunnr_name.
      ls_gw_e_data-matnr = ls_e_data-matnr.
      ls_gw_e_data-maktx = ls_e_data-maktx.
      ls_gw_e_data-erdat = ls_e_data-erdat.
      ls_gw_e_data-aufnr = ls_e_data-aufnr.
      ls_gw_e_data-kunnr_name = ls_e_data-kunnr_name.
      ls_gw_e_data-estado_orden = ls_e_data-estado_orden.
      ls_gw_e_data-estado_orden_txt = ls_e_data-estado_orden_txt.
      ls_gw_e_data-fecha_fin_orden = ls_e_data-fecha_fin_orden.
      ls_gw_e_data-hora_fin_orden = ls_e_data-hora_fin_orden.
      APPEND ls_gw_e_data TO et_entityset.
      CLEAR ls_gw_e_data.
    ENDLOOP.

  ENDMETHOD.
endclass. "ZCL_ZSUI5_CM_INFORMES_DPC_EXT implementation
