
class ZCL_ZUI5_WM_BOBINE_ECM_DPC_EXT definition
  public
  inheriting from ZCL_ZUI5_WM_BOBINE_ECM_DPC
  create public .

public section.

  constants GC_ACTION_ASSIGN_BOBINE type STRING value 'assignBobine' ##NO_TEXT.
  constants GC_ACTION_MOVE_BOBINE type STRING value 'moveBobine' ##NO_TEXT.
  constants GC_ACTION_CLOSE_RSNUM type STRING value 'closeRsnum' ##NO_TEXT.
  constants GC_ACTION_GET1STASSIGNED type STRING value 'getFirstPedprogidAssigned' ##NO_TEXT.
  constants GC_ACTION_REMOVE_BOBINE type STRING value 'removeBobine' ##NO_TEXT.
  constants GC_ACTION_VAL_BOBINE_DIAM type STRING value 'validateBobineDiam' ##NO_TEXT.
  constants GC_ACTION_CHECK_RSNUM_EXIST type STRING value 'checkRsnumExistence' ##NO_TEXT.

  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~EXECUTE_ACTION
    redefinition .
protected section.

  methods EXECUTE_ACTION_CHK_RSNUM_EXIST
    importing
      !IV_ACTION_NAME type STRING optional
      !IT_PARAMETER type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_FUNC_IMPORT optional
    exporting
      !ER_DATA type ref to DATA
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods EXECUTE_ACTION_GET1STASSIGNED
    importing
      !IV_ACTION_NAME type STRING optional
      !IT_PARAMETER type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_FUNC_IMPORT optional
    exporting
      !ER_DATA type ref to DATA
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods EXECUTE_ACTION_VAL_BOBINE_DIAM
    importing
      !IV_ACTION_NAME type STRING optional
      !IT_PARAMETER type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_FUNC_IMPORT optional
    exporting
      !ER_DATA type ref to DATA
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods EXECUTE_ACTION_VAL_CLOSE_RSNUM
    importing
      !IV_ACTION_NAME type STRING optional
      !IT_PARAMETER type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_FUNC_IMPORT optional
    exporting
      !ER_DATA type ref to DATA
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods EXECUTE_ACTION_ASSIGN_BOBINE
    importing
      !IV_ACTION_NAME type STRING optional
      !IT_PARAMETER type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_FUNC_IMPORT optional
    exporting
      !ER_DATA type ref to DATA
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods EXECUTE_ACTION_MOVE_BOBINE
    importing
      !IV_ACTION_NAME type STRING optional
      !IT_PARAMETER type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_FUNC_IMPORT optional
    exporting
      !ER_DATA type ref to DATA
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods EXECUTE_ACTION_REMOVE_BOBINE
    importing
      !IV_ACTION_NAME type STRING optional
      !IT_PARAMETER type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_FUNC_IMPORT optional
    exporting
      !ER_DATA type ref to DATA
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods TRATAR_KEY_ENTITYSET
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !WP_ENTITY type DATA
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods TRATAR_KEY_ENTITY
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITY optional
    exporting
      !WP_ENTITY type DATA
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION .

  methods BOBINESET_CREATE_ENTITY
    redefinition .
  methods BOBINESET_GET_ENTITY
    redefinition .
  methods BOBINESET_GET_ENTITYSET
    redefinition .
  methods CENTROSSET_GET_ENTITY
    redefinition .
  methods MAQUINASSET_GET_ENTITY
    redefinition .
  methods PEDPROGIDSET_GET_ENTITY
    redefinition .
  methods PEDPROGIDSET_GET_ENTITYSET
    redefinition .
  methods TVARVCSET_GET_ENTITY
    redefinition .
  methods TVARVCSET_GET_ENTITYSET
    redefinition .
  PRIVATE SECTION.
endclass. "ZCL_ZUI5_WM_BOBINE_ECM_DPC_EXT definition
class ZCL_ZUI5_WM_BOBINE_ECM_DPC_EXT implementation.
  METHOD  /iwbep/if_mgw_appl_srv_runtime~execute_action.
    CASE iv_action_name.
      WHEN gc_action_check_rsnum_exist.
        me->execute_action_chk_rsnum_exist(
                EXPORTING
                  iv_action_name               = iv_action_name
                  it_parameter                 =  it_parameter
                  io_tech_request_context      = io_tech_request_context
                IMPORTING
                  er_data                      = er_data
        ).
      WHEN gc_action_get1stassigned.
        me->execute_action_get1stassigned(
            EXPORTING
              iv_action_name               = iv_action_name
              it_parameter                 =  it_parameter
              io_tech_request_context      = io_tech_request_context
            IMPORTING
              er_data                      = er_data
        ).
      WHEN gc_action_close_rsnum.
        me->execute_action_val_close_rsnum(
          EXPORTING
            iv_action_name               = iv_action_name
            it_parameter                 =  it_parameter
            io_tech_request_context      = io_tech_request_context
          IMPORTING
            er_data                      = er_data
        ).
      WHEN gc_action_val_bobine_diam.
        me->execute_action_val_bobine_diam(
          EXPORTING
            iv_action_name               = iv_action_name
            it_parameter                 = it_parameter
            io_tech_request_context      = io_tech_request_context
          IMPORTING
            er_data                      = er_data
        ).
      WHEN gc_action_assign_bobine.
        me->execute_action_assign_bobine(
          EXPORTING
            iv_action_name               = iv_action_name
            it_parameter                 = it_parameter
            io_tech_request_context      = io_tech_request_context
          IMPORTING
            er_data                      = er_data
        ).
      WHEN gc_action_move_bobine.
        me->execute_action_move_bobine(
          EXPORTING
            iv_action_name               = iv_action_name
            it_parameter                 = it_parameter
            io_tech_request_context      = io_tech_request_context
          IMPORTING
            er_data                      = er_data
        ).
      WHEN gc_action_remove_bobine.
        me->execute_action_remove_bobine(
          EXPORTING
            iv_action_name               = iv_action_name
            it_parameter                 = it_parameter
            io_tech_request_context      = io_tech_request_context
          IMPORTING
            er_data                      = er_data
        ).
      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_not_impl_exc=>method_not_implemented
            action = iv_action_name.
    ENDCASE.
  ENDMETHOD.
  METHOD bobineset_create_entity.
    RETURN. " discontinued
*    DATA ls_data TYPE zcl_zui5_wm_bobine_ecm_mpc=>ts_bobine.
*    io_data_provider->read_entry_data( IMPORTING es_data = ls_data ).
*    DATA(lr_ref) = zcl_wm_nt_generic=>get_instance(
**        iv_langu = SY-LANGU
*).
*    DATA(lv_succ) = lr_ref->bobecm_create_consumption(
*      EXPORTING
**        iv_lgnum = ZCL_WM_CONSTANTS=>GC_DEFAULT_LGNUM
*        is_data  = ls_data
*   ).
*    IF lv_succ = abap_false.
*      RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
*        EXPORTING
*          textid            = /iwbep/cx_mgw_busi_exception=>business_error_unlimited
*          message_unlimited = CONV #( text-001 ).
*    ENDIF.
*
*    CHECK ls_data-update_diam = abap_true.
*
*    " must create to for remaining diameter
*    lv_succ = lr_ref->create_to_4_diamet_ret(
*      EXPORTING
**        iv_lgnum = ZCL_WM_CONSTANTS=>GC_DEFAULT_LGNUM
*        is_data  = ls_data
*    ).
*
*    IF lv_succ = abap_false.
*      RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
*        EXPORTING
*          textid            = /iwbep/cx_mgw_busi_exception=>business_error_unlimited
*          message_unlimited = CONV #( text-002 ).
*
*    ENDIF.

  ENDMETHOD.
  METHOD bobineset_get_entity.

    DATA(lv_werks) =  zcl_wm_nt_generic=>read_http_header_val(
        EXPORTING
          iv_name   = zcl_wm_nt_generic=>gc_http_head_werks
          iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
      ).


    DATA(lv_lgnum) = zcl_wm_nt_generic=>get_lgnum(
                       iv_werks = CONV #( lv_werks )
*                       iv_lgort =
                   ).

    TRY.
        DATA(lv_bobine) = CONV lqua-lenum( it_key_tab[ name = 'Id' ]-value ).

        CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
          EXPORTING
            input           = lv_bobine   " External entry
          IMPORTING
            output          = lv_bobine   " Edited storage unit number for sto
          EXCEPTIONS
            check_failed    = 1
            not_numeric     = 2
            t344_get_failed = 3
            wrong_length    = 4
            OTHERS          = 5.

        DATA(ls_data) = zcl_wm_zwm_ecm_bobine_dao=>get_entry(
          EXPORTING
            iv_id_bob_ecm    = CONV #( it_key_tab[ name = 'IdPedprog' ]-value )
            iv_bobine        = lv_bobine
        )->get_data( ).

        DATA(lt_lqua) = zcl_wm_nt_generic=>get_bobine_info(
        EXPORTING
          iv_lgnum    =  zcl_wm_nt_generic=>get_lgnum(
                             iv_werks = CONV #( lv_werks )
*                               iv_lgort =
                         )
            iv_bobine    = ls_data-bobine
*            iv_matnr    =
*            iv_qty_only = ABAP_TRUE
      ).
        IF lines( lt_lqua ) > 0.
          DATA(ls_lqua) = lt_lqua[ 1 ].
        ENDIF.


        er_entity = VALUE #(
      id = ls_data-bobine
matnr = ls_lqua-matnr
charg = ls_data-bobine
werks = lv_werks
diametro = ls_data-diametro
meins = ls_lqua-meins
id_pedprog = ls_data-id_bob_ecm
update_diam = ls_data-saved
       ).
      CATCH cx_root.
    ENDTRY.
**      CATCH zcx_wm_exception.    "
*
*    DATA(lt_data) = zcl_wm_nt_generic=>get_instance(
**        iv_langu = SY-LANGU
*       )->build_bobecm_bob_ui5(
*         EXPORTING
*        iv_lgnum = COND #( WHEN lv_lgnum IS NOT INITIAL THEN lv_lgnum ELSE zcl_wm_constants=>gc_default_lgnum )
*           iv_id    = CONV #( it_key_tab[ name = 'Id' ]-value )
*       ) .
*    CHECK lines( lt_data ) > 0.
    "    er_entity = CORRESPONDING #( lt_data[ 1 ] ).
  ENDMETHOD.
  METHOD bobineset_get_entityset.

    IF iv_filter_string IS NOT INITIAL AND iv_filter_string CS 'IdPedprog'.

      SPLIT iv_filter_string AT 'eq' INTO TABLE DATA(lt_str).
      DATA(lv_id) = CONV zwm_ecm_bobine-id_bob_ecm( lt_str[ 2 ] ).
      REPLACE ALL OCCURRENCES OF '''' IN lv_id WITH space.
      REPLACE ALL OCCURRENCES OF ')' IN lv_id WITH space.
      CONDENSE lv_id NO-GAPS.

    ENDIF.

    IF line_exists( it_navigation_path[ nav_prop = 'PEDPROGID_BOBINE_NAV' ] ).
      lv_id =  it_key_tab[ name = 'Id' ]-value .
    ENDIF.

    DATA(lv_werks) =  zcl_wm_nt_generic=>read_http_header_val(
    EXPORTING
      iv_name   = zcl_wm_nt_generic=>gc_http_head_werks
      iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
  ).

    DATA(lt_data) = zcl_wm_zwm_ecm_bobine_dao=>query_by_id_bob_ecm( iv_id_bob_ecm = lv_id ).

    SORT lt_data BY created_at ASCENDING.

    LOOP AT lt_data INTO DATA(ls_data).
      DATA(lt_lqua) = zcl_wm_nt_generic=>get_bobine_info(
         EXPORTING
           iv_lgnum    =  zcl_wm_nt_generic=>get_lgnum(
                              iv_werks = CONV #( lv_werks )
*                               iv_lgort =
                          )
             iv_bobine    = ls_data-bobine
*            iv_matnr    =
*            iv_qty_only = ABAP_TRUE
       ).
      IF lines( lt_lqua ) > 0.
        DATA(ls_lqua) = lt_lqua[ 1 ].
      ENDIF.
      APPEND VALUE #(
      id = ls_data-bobine
matnr = ls_lqua-matnr
charg = ls_data-bobine
werks = lv_werks
diametro = ls_data-diametro
meins = ls_lqua-meins
id_pedprog = ls_data-id_bob_ecm
update_diam = ls_data-saved
       ) TO et_entityset.
    ENDLOOP.

  ENDMETHOD.
  method CENTROSSET_GET_ENTITY.

    tratar_key_entity( EXPORTING io_tech_request_context = io_tech_request_context
                       IMPORTING wp_entity               = er_entity ).

    er_entity = zcl_wm_nt_generic=>get_instance( )->centros_getdetail( er_entity-werks ).

  endmethod.
  METHOD execute_action_assign_bobine.
    DATA ls_ecm TYPE zwm_ecm_bobine.
    DATA ls_bapiret2 TYPE bapiret2.
    IF lines( it_parameter ) < 2.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
        EXPORTING
          textid = /iwbep/cx_mgw_not_impl_exc=>wrong_data_container
          action = iv_action_name.
    ENDIF.
    TRY.
        ls_ecm-bobine = CONV lqua-lenum( it_parameter[ name = 'Id' ]-value ).
        CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
          EXPORTING
            input           = ls_ecm-bobine   " External entry
          IMPORTING
            output          = ls_ecm-bobine   " Edited storage unit number for sto
          EXCEPTIONS
            check_failed    = 1
            not_numeric     = 2
            t344_get_failed = 3
            wrong_length    = 4
            OTHERS          = 5.
        ls_ecm-id_bob_ecm =  it_parameter[ name = 'IdPedProg' ]-value .
        ls_ecm-diametro = it_parameter[ name = 'Diametro' ]-value .
        ls_ecm-saved = it_parameter[ name = 'Saved' ]-value .
      CATCH cx_root.
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>key_structure_error
            action = iv_action_name.

    ENDTRY.


    IF ls_ecm-saved = abap_true.
      DATA(lr_ref) = zcl_wm_zwm_ecm_bobine_dao=>create_entry(
   EXPORTING
     iv_id_bob_ecm = ls_ecm-id_bob_ecm
     iv_bobine     = ls_ecm-bobine
 ).
      TRY.
          lr_ref->set_diametro( iv_diametro = ls_ecm-diametro ).
        CATCH zcx_wm_exception INTO DATA(lr_exc).
          RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
            EXPORTING
              msg_code = lr_exc->get_text( )
              action   = iv_action_name.

      ENDTRY.
    ELSE.
      lr_ref = zcl_wm_zwm_ecm_bobine_dao=>create_entry(
      EXPORTING
        iv_id_bob_ecm = ls_ecm-id_bob_ecm
        iv_bobine     = ls_ecm-bobine
    ).

      " clear entry if it is persistent already
      lr_ref->delete_entry( iv_commit = abap_true iv_related = abap_true ).

      lr_ref = zcl_wm_zwm_ecm_bobine_dao=>create_entry(
       EXPORTING
         iv_id_bob_ecm = ls_ecm-id_bob_ecm
         iv_bobine     = ls_ecm-bobine
     ).
    ENDIF.


    " now save
    TRY.
        lr_ref->save_data(
*        iv_commit = ABAP_TRUE
        ).
        CALL FUNCTION 'CONVERSION_EXIT_LENUM_OUTPUT'
          EXPORTING
            input           = ls_ecm-bobine   " Storage unit number (internal form
          IMPORTING
            output          = ls_ecm-bobine   " Storage unit number (output format
          EXCEPTIONS
            t344_get_failed = 1
            OTHERS          = 2.

        ls_bapiret2-type = 'S'.
        ls_bapiret2-message = ls_ecm-id_bob_ecm && '/' && ls_ecm-bobine.
        ls_bapiret2-parameter = ls_ecm-saved.

        IF ls_ecm-saved = abap_true.
          DATA(lv_nlpla) =  zcl_wm_nt_generic=>read_http_header_val(
      EXPORTING
        iv_name   = zcl_wm_nt_generic=>gc_http_head_nlpla
        iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
    ).

          DATA(lv_werks) =  zcl_wm_nt_generic=>read_http_header_val(
              EXPORTING
                iv_name   = zcl_wm_nt_generic=>gc_http_head_werks
                iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
            ).
          SELECT SINGLE lgnum FROM t320 INTO @DATA(lv_lgnum) WHERE werks = @lv_werks.
          zcl_wm_nt_generic=>close_rsnum( iv_last = abap_true iv_nlpla = CONV #( lv_nlpla ) iv_lgnum = lv_lgnum ).
        ENDIF.

      CATCH cx_root.
        ls_bapiret2-type = 'E'.
    ENDTRY.

    me->copy_data_to_ref(
      EXPORTING
        is_data = ls_bapiret2
      CHANGING
        cr_data = er_data
    ).
  ENDMETHOD.
  METHOD execute_action_chk_rsnum_exist.
    IF lines( it_parameter ) < 1.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
        EXPORTING
          textid = /iwbep/cx_mgw_not_impl_exc=>wrong_data_container
          action = iv_action_name.
    ENDIF.



    DATA(lv_rsnum) = it_parameter[ name = 'IV_ID' ]-value .
    SELECT SINGLE @abap_true FROM resb
    INTO @DATA(lv_exist)
    WHERE rsnum = @lv_rsnum.

    DATA(ls_bapiret2) = VALUE bapiret2( type = COND #( WHEN lv_exist = abap_true THEN 'S' ELSE 'E ') message = lv_rsnum ).
    me->copy_data_to_ref(
EXPORTING
is_data = ls_bapiret2
CHANGING
cr_data = er_data
).


  ENDMETHOD.
  METHOD execute_action_get1stassigned.
    DATA ls_ret TYPE zcl_zui5_wm_bobine_ecm_mpc=>ts_pedprogid.
    me->pedprogidset_get_entityset(
      EXPORTING
        iv_entity_name               = CONV #( zcl_zui5_wm_bobine_ecm_mpc=>gc_pedprogid )
        iv_entity_set_name           = zcl_zui5_wm_bobine_ecm_mpc=>gc_pedprogid && 'Set'
        iv_source_name               = CONV #( zcl_zui5_wm_bobine_ecm_mpc=>gc_pedprogid )
        it_filter_select_options     = VALUE #( )    " Table of select options
        is_paging                    = VALUE #( )    " Paging structure
        it_key_tab                   = VALUE #( )    " Table for name value pairs
        it_navigation_path           = VALUE #( )    " Table of navigation paths
        it_order                     = VALUE #( )    " The sorting order
        iv_filter_string             = VALUE #( )    " Table for name value pairs
        iv_search_string             = VALUE #( )
        "io_tech_request_context      = io_tech_request_context
      IMPORTING
        et_entityset                 = DATA(lt_pedprogid)    " Returning data
*        es_response_context          =
    ).

    LOOP AT lt_pedprogid INTO DATA(ls_pedprogid)
    WHERE editable = abap_true.
      IF lines( zcl_wm_zwm_ecm_bobine_dao=>query_by_id_bob_ecm(
          EXPORTING
            iv_id_bob_ecm     = ls_pedprogid-id
*            iv_not_saved_only = ABAP_TRUE
        ) ) > 0.
        ls_ret = ls_pedprogid.
        EXIT.
      ENDIF.
    ENDLOOP.

    IF ls_ret IS INITIAL.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
        EXPORTING
          textid            = /iwbep/cx_mgw_busi_exception=>business_error
          message_unlimited = CONV #( text-006 ).
    ENDIF.

    me->copy_data_to_ref(
EXPORTING
is_data = ls_ret
CHANGING
cr_data = er_data
).

  ENDMETHOD.
  METHOD execute_action_move_bobine.

    DATA ls_bapiret2 TYPE bapiret2.

    IF lines( it_parameter ) < 2.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
        EXPORTING
          textid = /iwbep/cx_mgw_not_impl_exc=>wrong_data_container
          action = iv_action_name.
    ENDIF.

    DATA(lv_werks) =  zcl_wm_nt_generic=>read_http_header_val(
    EXPORTING
      iv_name   = zcl_wm_nt_generic=>gc_http_head_werks
      iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
  ).


    DATA(lv_lgnum) = zcl_wm_nt_generic=>get_lgnum(
                       iv_werks = CONV #( lv_werks )
*                       iv_lgort =
                   ).

    TRY.
        DATA(lv_bobine) = it_parameter[ name = 'IV_BOBINE' ]-value .
        DATA(lv_nlpla) =  it_parameter[ name = 'IV_DEST_NLPLA' ]-value .
      CATCH cx_root.
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>key_structure_error
            action = iv_action_name.

    ENDTRY.

    CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
      EXPORTING
        input           = lv_bobine    " External entry
      IMPORTING
        output          = lv_bobine    " Edited storage unit number for sto
      EXCEPTIONS
        check_failed    = 1
        not_numeric     = 2
        t344_get_failed = 3
        wrong_length    = 4
        OTHERS          = 5.

    zcl_wm_nt_generic=>movebobine(
      EXPORTING
        iv_bobine     = CONV #( lv_bobine )
        iv_dest_nlpla = CONV #( lv_nlpla )
        iv_lgnum      = lv_lgnum
        iv_bwlvs = zcl_wm_nt_generic=>gc_move_type_918
      IMPORTING
        es_ltak       = DATA(ls_ltak)
        ev_subrc      = DATA(lv_subrc)
    ).

    ls_bapiret2-type = COND #( WHEN lv_subrc = 0 THEN 'S' ELSE 'E' ).
    ls_bapiret2-message = ls_ltak-lgnum && '/' && ls_ltak-tanum.

    me->copy_data_to_ref(
  EXPORTING
    is_data = ls_bapiret2
  CHANGING
    cr_data = er_data
).


  ENDMETHOD.
  METHOD execute_action_remove_bobine.

    DATA ls_bapiret2 TYPE bapiret2.

    IF lines( it_parameter ) < 1.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
        EXPORTING
          textid = /iwbep/cx_mgw_not_impl_exc=>wrong_data_container
          action = iv_action_name.
    ENDIF.

    DATA(lv_werks) =  zcl_wm_nt_generic=>read_http_header_val(
    EXPORTING
      iv_name   = zcl_wm_nt_generic=>gc_http_head_werks
      iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
  ).
    DATA(lv_nlpla) =  zcl_wm_nt_generic=>read_http_header_val(
    EXPORTING
      iv_name   = zcl_wm_nt_generic=>gc_http_head_nlpla
      iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
  ).


    DATA(lv_lgnum) = zcl_wm_nt_generic=>get_lgnum(
                       iv_werks = CONV #( lv_werks )
*                       iv_lgort =
                   ).

    TRY.
        DATA(lv_bobine) = it_parameter[ name = 'IV_BOBINE' ]-value .
      CATCH cx_root.
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>key_structure_error
            action = iv_action_name.

    ENDTRY.

    CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
      EXPORTING
        input           = lv_bobine    " External entry
      IMPORTING
        output          = lv_bobine    " Edited storage unit number for sto
      EXCEPTIONS
        check_failed    = 1
        not_numeric     = 2
        t344_get_failed = 3
        wrong_length    = 4
        OTHERS          = 5.

    DATA(lt_ecl) = zcl_wm_zwm_ecm_bobine_dao=>query_by_bobine(
                   iv_lgnum         = lv_lgnum
                   iv_bobine        = CONV #( lv_bobine )
*                   iv_no_tanum_only = ABAP_TRUE
               ).

    IF lines( lt_ecl ) = 0.
      ls_bapiret2-type = 'I'.
      ls_bapiret2-message = text-003.
      me->copy_data_to_ref(
EXPORTING
is_data = ls_bapiret2
CHANGING
cr_data = er_data
).
      RETURN.
    ENDIF.

    DATA(lv_cnt) = 0.
    LOOP AT lt_ecl INTO DATA(ls_ecl).
      TRY.
          zcl_wm_zwm_ecm_bobine_dao=>get_entry(
            EXPORTING
              iv_id_bob_ecm    = ls_ecl-id_bob_ecm
              iv_bobine        = ls_ecl-bobine
*          RECEIVING
*            rr_ref           =
          )->delete_entry( iv_commit = abap_true ).
        CATCH zcx_wm_exception.    "
      ENDTRY.
      lv_cnt = lv_cnt + 1.
    ENDLOOP.

    ls_bapiret2-type = COND #( WHEN lv_cnt > 0 THEN 'S' ELSE 'E' ).
    ls_bapiret2-message = |{ text-004 } { lv_cnt }|.
    ls_bapiret2-message_v1 = it_parameter[ name = 'IV_BOBINE' ]-value.

    me->copy_data_to_ref(
    EXPORTING
    is_data = ls_bapiret2
    CHANGING
    cr_data = er_data
    ).


  ENDMETHOD.
  METHOD execute_action_val_bobine_diam.
    DATA ls_bapiret2 TYPE bapiret2.

    IF lines( it_parameter ) < 2.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
        EXPORTING
          textid = /iwbep/cx_mgw_not_impl_exc=>wrong_data_container
          action = iv_action_name.
    ENDIF.

    DATA(lv_werks) =  zcl_wm_nt_generic=>read_http_header_val(
    EXPORTING
      iv_name   = zcl_wm_nt_generic=>gc_http_head_werks
      iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
  ).


    DATA(lv_lgnum) = zcl_wm_nt_generic=>get_lgnum(
                       iv_werks = CONV #( lv_werks )
*                       iv_lgort =
                   ).

    TRY.
        DATA(lv_bobine) = it_parameter[ name = 'IV_BOBINE' ]-value .
        DATA(lv_diametro) =  it_parameter[ name = 'IV_DIAMETRO' ]-value .
      CATCH cx_root.
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>key_structure_error
            action = iv_action_name.

    ENDTRY.

    CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
      EXPORTING
        input           = lv_bobine    " External entry
      IMPORTING
        output          = lv_bobine    " Edited storage unit number for sto
      EXCEPTIONS
        check_failed    = 1
        not_numeric     = 2
        t344_get_failed = 3
        wrong_length    = 4
        OTHERS          = 5.

    ls_bapiret2-type = COND #( WHEN zcl_wm_nt_generic=>validate_mat_diam(
                   iv_bobine   = CONV #( lv_bobine )
                   iv_lgnum    = lv_lgnum
                   iv_diametro = CONV #( lv_diametro )
               ) = abap_true THEN 'S' ELSE 'E' ).
    ls_bapiret2-message = COND #( WHEN ls_bapiret2-type = 'E' THEN text-005 ELSE VALUE #( ) ).

    me->copy_data_to_ref(
  EXPORTING
    is_data = ls_bapiret2
  CHANGING
    cr_data = er_data
).

  ENDMETHOD.
  METHOD execute_action_val_close_rsnum.
    IF lines( it_parameter ) < 1.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
        EXPORTING
          textid = /iwbep/cx_mgw_not_impl_exc=>wrong_data_container
          action = iv_action_name.
    ENDIF.

    DATA(lv_werks) =  zcl_wm_nt_generic=>read_http_header_val(
    EXPORTING
      iv_name   = zcl_wm_nt_generic=>gc_http_head_werks
      iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
  ).

    TRY.
        DATA(lv_rsnum) = it_parameter[ name = 'Id' ]-value .
        DATA(ls_bapiret2) = zcl_wm_nt_generic=>close_rsnum( iv_rsnum = CONV #( lv_rsnum ) ).
        me->copy_data_to_ref(
EXPORTING
  is_data = ls_bapiret2
CHANGING
  cr_data = er_data
).
      CATCH cx_root.
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>key_structure_error
            action = iv_action_name.

    ENDTRY.


  ENDMETHOD.
  method MAQUINASSET_GET_ENTITY.
    tratar_key_entity( EXPORTING io_tech_request_context = io_tech_request_context
                       IMPORTING wp_entity               = er_entity ).

    er_entity = zcl_wm_nt_generic=>get_instance( )->maquinas_getdetail( er_entity-id ).
  endmethod.
  METHOD pedprogidset_get_entity.
    CLEAR er_entity.
    IF lines( it_key_tab ) = 0.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
        EXPORTING
          textid = VALUE #( msgid = 'ZUI5' msgno = '001' ).
    ENDIF.

    " get pars
    DATA(lv_nlpla) =  zcl_wm_nt_generic=>read_http_header_val(
        EXPORTING
          iv_name   = zcl_wm_nt_generic=>gc_http_head_nlpla
          iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
      ).

    DATA(lv_werks) =  zcl_wm_nt_generic=>read_http_header_val(
        EXPORTING
          iv_name   = zcl_wm_nt_generic=>gc_http_head_werks
          iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
      ).

    DATA(lv_currentid) =  zcl_wm_nt_generic=>read_http_header_val(
    EXPORTING
      iv_name   = zcl_wm_nt_generic=>gc_http_head_currentid
      iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
  ).

    DATA(lv_lgnum) = zcl_wm_nt_generic=>get_lgnum(
                       iv_werks = CONV #( lv_werks )
*                       iv_lgort =
                   ).

    DATA(lt_data) = zcl_wm_nt_generic=>get_instance(
*        iv_langu = SY-LANGU
    )->build_bobecm_list_ui5_v2(
      EXPORTING
        iv_lgnum = COND #( WHEN lv_lgnum IS NOT INITIAL THEN lv_lgnum ELSE zcl_wm_constants=>gc_default_lgnum )
        iv_nlpla = CONV #( lv_nlpla )
        iv_current_id = CONV #( lv_currentid )
    ).

    TRY.
        er_entity = CORRESPONDING #( lt_data[ id = it_key_tab[ name = 'Id' ]-value ] ).
      CATCH cx_root.
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
    ENDTRY.
    "er_entityset = CORRESPONDING #( lt_data[ id = ] ).

  ENDMETHOD.
  METHOD pedprogidset_get_entityset.
    CLEAR et_entityset.
    " get pars
    DATA(lv_nlpla) =  zcl_wm_nt_generic=>read_http_header_val(
        EXPORTING
          iv_name   = zcl_wm_nt_generic=>gc_http_head_nlpla
          iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
      ).

    DATA(lv_werks) =  zcl_wm_nt_generic=>read_http_header_val(
        EXPORTING
          iv_name   = zcl_wm_nt_generic=>gc_http_head_werks
          iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
      ).

    DATA(lv_currentid) =  zcl_wm_nt_generic=>read_http_header_val(
        EXPORTING
          iv_name   = zcl_wm_nt_generic=>gc_http_head_currentid
          iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
      ).


    DATA(lv_lgnum) = zcl_wm_nt_generic=>get_lgnum(
                       iv_werks = CONV #( lv_werks )
*                       iv_lgort =
                   ).

    DATA(lt_data) = zcl_wm_nt_generic=>get_instance(
*        iv_langu = SY-LANGU
    )->build_bobecm_list_ui5_v2(
      EXPORTING
        iv_lgnum = COND #( WHEN lv_lgnum IS NOT INITIAL THEN lv_lgnum ELSE zcl_wm_constants=>gc_default_lgnum )
        iv_nlpla = CONV #( lv_nlpla )
        iv_current_id = CONV #( lv_currentid )
    ).


    et_entityset = CORRESPONDING #( lt_data ).

  ENDMETHOD.
  METHOD TRATAR_KEY_ENTITY.


    DATA(vl_source_entity_type_name)  = io_tech_request_context->get_source_entity_type_name( ).
    DATA(vl_entity_type_name)         = io_tech_request_context->get_entity_type_name( ).


    CASE vl_source_entity_type_name.
*      WHEN 'AlbaranesCab'.
*        DATA wl_albaranes_cab TYPE zmm_ui5_s_albaranes_cab.
*        io_tech_request_context->get_converted_source_keys( IMPORTING es_key_values  = wl_albaranes_cab ).
*        wl_albaranes_cab = albaranes_cab_getdetail(
*                              vp_werks         = wl_albaranes_cab-werks
*                              vp_contador      = wl_albaranes_cab-contador
*                              vp_posicion_alb  = wl_albaranes_cab-posicion_alb ).
*        MOVE-CORRESPONDING wl_albaranes_cab TO wp_entity.
*
      WHEN OTHERS.
        io_tech_request_context->get_converted_keys( IMPORTING es_key_values  = wp_entity ).
    ENDCASE.

  ENDMETHOD.
  METHOD TRATAR_KEY_ENTITYSET.
    DATA(vl_source_entity_type_name)  = io_tech_request_context->get_source_entity_type_name( ).
    DATA(vl_entity_type_name)         = io_tech_request_context->get_entity_type_name( ).

    CASE vl_source_entity_type_name.
*      WHEN 'TiposFichaje'.
*        DATA wl_tipos_fichaje TYPE zhr_s_ss_tipos_fichaje.
*        io_tech_request_context->get_converted_source_keys( IMPORTING es_key_values  = wl_tipos_fichaje ).
*        wl_tipos_fichaje = tipos_fichaje_getdetail( wl_tipos_fichaje-id ).
*        MOVE-CORRESPONDING wl_tipos_fichaje TO wp_entity.
*
      WHEN OTHERS.
        io_tech_request_context->get_converted_source_keys( IMPORTING es_key_values  = wp_entity ).
    ENDCASE.


  ENDMETHOD.
  METHOD tvarvcset_get_entity.
    IF lines( it_key_tab ) = 0.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
        EXPORTING
          textid = VALUE #( msgid = 'ZUI5' msgno = '001' ).
    ENDIF.
    TRY.
        DATA(lv_name) = CONV tvarvc-name( it_key_tab[ name = 'Name' ]-value ).
        DATA(lv_type) = CONV tvarvc-type( it_key_tab[ name = 'Type' ]-value ).
        DATA(lv_numb) = CONV tvarvc-numb( it_key_tab[ name = 'Numb' ]-value ).
      CATCH cx_root.
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = VALUE #( msgid = 'ZUI5' msgno = '001' ).

    ENDTRY.

    SELECT SINGLE * FROM tvarvc INTO CORRESPONDING FIELDS OF er_entity
      WHERE name = lv_name AND type = lv_type AND numb = lv_numb.


  ENDMETHOD.
  METHOD tvarvcset_get_entityset.

    SELECT * FROM tvarvc UP TO 10 ROWS
      INTO CORRESPONDING FIELDS OF TABLE et_entityset
      WHERE (iv_filter_string).
  ENDMETHOD.
