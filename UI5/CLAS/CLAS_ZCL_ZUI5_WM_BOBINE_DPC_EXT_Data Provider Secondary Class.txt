
CLASS zcl_zui5_wm_bobine_dpc_ext DEFINITION
  PUBLIC
  INHERITING FROM zcl_zui5_wm_bobine_dpc
  CREATE PUBLIC .

  PUBLIC SECTION.
    CONSTANTS: gc_action_getsubstmat TYPE string VALUE 'getSubstCompMaterial'.
    METHODS /iwbep/if_mgw_appl_srv_runtime~execute_action
         REDEFINITION .
  PROTECTED SECTION.

    METHODS execute_action_getmatsubstcomp
      IMPORTING
        !iv_action_name          TYPE string
        !it_parameter            TYPE /iwbep/t_mgw_name_value_pair
        !io_tech_request_context TYPE REF TO /iwbep/if_mgw_req_func_import
      EXPORTING
        !er_data                 TYPE REF TO data
      RAISING
        /iwbep/cx_mgw_busi_exception
        /iwbep/cx_mgw_tech_exception .

    METHODS mchaset_get_entity
         REDEFINITION .
    METHODS mchaset_get_entityset
         REDEFINITION .
  PRIVATE SECTION.
endclass. "ZCL_ZUI5_WM_BOBINE_DPC_EXT definition
class ZCL_ZUI5_WM_BOBINE_DPC_EXT implementation.
  METHOD /iwbep/if_mgw_appl_srv_runtime~execute_action.
    CASE iv_action_name.
      WHEN gc_action_getsubstmat.
        me->execute_action_getmatsubstcomp(
          EXPORTING
            iv_action_name               = iv_action_name
            it_parameter                 = it_parameter
            io_tech_request_context      = io_tech_request_context
          IMPORTING
            er_data                      = er_data
        ).

      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_not_impl_exc=>method_not_implemented
            action = iv_action_name.
    ENDCASE.
  ENDMETHOD.
  METHOD execute_action_getmatsubstcomp.
    IF lines( it_parameter ) < 1.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
        EXPORTING
          textid = /iwbep/cx_mgw_not_impl_exc=>wrong_data_container
          action = iv_action_name.
    ENDIF.

    DATA(lv_werks) =  zcl_wm_nt_generic=>read_http_header_val(
    EXPORTING
      iv_name   = zcl_wm_nt_generic=>gc_http_head_werks
      iv_facade = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ) )
  ).


    TRY.
        DATA(lv_matnr) = CONV mara-matnr( it_parameter[ name = 'IV_MATNR' ]-value ).

        CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
          EXPORTING
            input        = lv_matnr
          IMPORTING
            output       = lv_matnr
          EXCEPTIONS
            length_error = 1
            OTHERS       = 2.
        zcl_wm_nt_generic=>get_mat_subs_comp(
                  EXPORTING
                    iv_matnr  = lv_matnr
                    iv_werks  = CONV #( lv_werks )
                  IMPORTING
                    et_subst  = DATA(lt_subst)
                    et_compat = DATA(lt_compat)
                ).

        DATA(lt_mara) = VALUE mara_tt( ) .
        LOOP AT lt_subst INTO DATA(ls_mara).
          APPEND INITIAL LINE TO lt_mara ASSIGNING FIELD-SYMBOL(<fs_mara>).
          CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
            EXPORTING
              input  = ls_mara-matnr
            IMPORTING
              output = <fs_mara>-matnr.
        ENDLOOP.

        LOOP AT lt_compat INTO ls_mara.
          APPEND INITIAL LINE TO lt_mara ASSIGNING <fs_mara>.
          CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
            EXPORTING
              input  = ls_mara-matnr
            IMPORTING
              output = <fs_mara>-matnr.
        ENDLOOP.


        me->copy_data_to_ref(
      EXPORTING
        is_data = lt_mara
      CHANGING
        cr_data = er_data
    ).
      CATCH cx_root.
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>key_structure_error
            action = iv_action_name.

    ENDTRY.



  ENDMETHOD.
  METHOD mchaset_get_entity.
    IF lines( it_key_tab ) = 0.
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
        EXPORTING
          textid = VALUE #( msgid = 'ZUI5' msgno = '001' ).
    ENDIF.
    TRY.
        DATA(lv_charg) = CONV lqua-lenum( it_key_tab[ name = 'Charg' ]-value ).
        DATA(lv_werks) = CONV mcha-werks( it_key_tab[ name = 'Werks' ]-value ).
      CATCH cx_root.
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = VALUE #( msgid = 'ZUI5' msgno = '001' ).

    ENDTRY.

    " apply conv exit
    CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
      EXPORTING
        input           = lv_charg   " External entry
      IMPORTING
        output          = lv_charg  " Edited storage unit number for sto
      EXCEPTIONS
        check_failed    = 1
        not_numeric     = 2
        t344_get_failed = 3
        wrong_length    = 4
        OTHERS          = 5.

    "KYV/RDM - 20200326 - performance
*    DATA(lv_lgnum) = zcl_wm_constants=>gc_default_lgnum.
    DATA(lv_lgnum) = zcl_wm_nt_generic=>get_lgnum( iv_werks = lv_werks ).
    DATA(wl_centro) = zcl_wm_nt_generic=>get_instance( )->centros_getdetail(  vp_werks  = CONV #( lv_werks ) ).



    SELECT SINGLE werks, lenum AS charg, matnr FROM lqua INTO CORRESPONDING FIELDS OF @er_entity
    WHERE
    "      werks = @lv_werks "KYV/RDM - 20200326 - performance
    lgnum = @lv_lgnum "KYV/RDM - 20200326 - performance
    AND lenum = @lv_charg.

    " cvivo - si está activod regul.UA, no se admiten lecturas que no existan en MM+WM
    IF wl_centro-consumos_puede_regularizar_ua EQ abap_true.
      IF sy-subrc <> 0.
        "Verificar si ha existido en algún momento
        SELECT SINGLE lgnum, tanum, tapos
        INTO @DATA(wl_ltap)
              FROM ltap
              WHERE vlenr = @lv_charg.
        IF sy-subrc = 0.
          zcl_seis_odata_utils=>lanzar_excepcion( 'La UA introducida ya está dada de baja./nRegularice la cantidad antes de registrar un consumo'(002) ).
        ELSE.
          zcl_seis_odata_utils=>lanzar_excepcion( 'La UA introducida no existe en el sistema./nVerifique que ha leído el código de barras correcto'(001) ).
        ENDIF.
      ELSE. " AHORA VALIDAMOS EN MM
        SELECT SINGLE lqua~* FROM lqua
        INNER JOIN mchb
        ON lqua~charg EQ mchb~charg
        AND lqua~werks EQ mchb~werks
        AND lqua~matnr EQ mchb~matnr
        WHERE lenum = @lv_charg
        AND   lgnum = @lv_lgnum
        AND   ( mchb~clabs GT 0 OR mchb~cspem GT 0 )
        INTO @DATA(wl_lqua).

        IF sy-subrc NE 0.
          zcl_seis_odata_utils=>lanzar_excepcion( 'UA leída no está completamente almacenada, avise al responsable' ).
        ENDIF.
      ENDIF.
    ENDIF.



  ENDMETHOD.
  METHOD mchaset_get_entityset.

    SELECT * FROM lqua UP TO 10 ROWS
      INTO CORRESPONDING FIELDS OF TABLE et_entityset
      WHERE (iv_filter_string).
  ENDMETHOD.
