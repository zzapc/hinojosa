FUNCTION ZSWM_CHECK_UI5_MATERIAL.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(LGNUM) TYPE  LGNUM OPTIONAL
*"     VALUE(WERKS) TYPE  WERKS_D OPTIONAL
*"     REFERENCE(MATNR) TYPE  MATNR
*"     REFERENCE(TCODE) TYPE  TCODE OPTIONAL
*"  EXPORTING
*"     REFERENCE(ERROR) TYPE  FLAG
*"     REFERENCE(TT_LOG) TYPE  BAPIRET2_TT
*"     REFERENCE(OK) TYPE  FLAG
*"----------------------------------------------------------------------
*    140  El centro & no apunta a un número de almacén
*    141  El material & no existe
*    142  El material & no existe para el número de almacén &
*    143  El material & no tiene el "Indicador especial de mov.LVS" relleno en &
*    144  El material & no tiene datos de paletización en el número de almacén &
*    145  El material & no existe en el centro &
*    146 El tipo de material & del material & no esta habilitado para esta funcio.
    data matnr_aux type matnr.

    if lgnum is INITIAL and werks is not INITIAL.
      select SINGLE lgnum into lgnum from t320 where werks eq werks.
      if sy-subrc ne 0.
        move abap_true to error.
*        matnr_aux = |{ matnr ALPHA = OUT }|.
        PERFORM mensaje USING 'E' 'ZSWM_UI5' '140' werks space space space CHANGING tt_log[].
      endif.
    endif.
    if werks is INITIAL.
      select SINGLE werks into werks from t320 where lgnum eq lgnum.
    endif.
    check error ne abap_true.
    select SINGLE mtart into @datA(mtart) From mara where matnr eq @matnr.
    if sy-subrc ne 0.
        matnr_aux = |{ matnr ALPHA = OUT }|.
        PERFORM mensaje USING 'E' 'ZSWM_UI5' '141' matnr_aux space space space CHANGING tt_log[].
        move abap_true to error.
    else.
      select SINGLE * into @data(mlgn) from mlgn where matnr eq @matnr
                                                   and lgnum eq @lgnum.

      if sy-subrc ne 0.
        matnr_aux = |{ matnr ALPHA = OUT }|.
        PERFORM mensaje USING 'E' 'ZSWM_UI5' '142' matnr_aux lgnum space space CHANGING tt_log[].
        move abap_true to error.
      elseif mlgn-BSSKZ is INITIAL.
        matnr_aux = |{ matnr ALPHA = OUT }|.
        PERFORM mensaje USING 'E' 'ZSWM_UI5' '143' matnr_aux lgnum space space CHANGING tt_log[].
        move abap_true to error.
      elseif mlgn-LHMG1 is INITIAL
          or mlgn-LHME1 is INITIAL
          or mlgn-LETY1 is INITIAL.
        matnr_aux = |{ matnr ALPHA = OUT }|.
        PERFORM mensaje USING 'E' 'ZSWM_UI5' '144' matnr_aux lgnum space space CHANGING tt_log[].
        move abap_true to error.
      endif.
    endif.
    check error ne abap_true.

    select COUNT( * ) from marc where matnr eq matnr
                                  and werks eq werks.

    if sy-subrc ne 0.
        matnr_aux = |{ matnr ALPHA = OUT }|.
        PERFORM mensaje USING 'E' 'ZSWM_UI5' '145' matnr_aux werks space space CHANGING tt_log[].
        move abap_true to error.
    else.
      data rr_mtart type FIP_T_MTART_RANGE.
       CALL FUNCTION 'ZSWM_SET_GET_VALUES'
         EXPORTING
           SHORTNAME                = 'ZSWM_PLANCHA_MTART'
*          TT_SHORTNAME             =
*          NO_AUTHORITY_CHECK       = 'X'
*          LANGU                    = SYST-LANGU
*          TT_FIELDNAME             =
         IMPORTING
           RR_MTART                 = rr_mtart
                 .
       if mtart not in rr_mtart.
         matnr_aux = |{ matnr ALPHA = OUT }|.
         PERFORM mensaje USING 'E' 'ZSWM_UI5' '146' mtart matnr_aux  space space CHANGING tt_log[].
         move abap_true to error.
       endif.
    endif.
    check error ne abap_true.
    move abap_true to Ok.



ENDFUNCTION.
