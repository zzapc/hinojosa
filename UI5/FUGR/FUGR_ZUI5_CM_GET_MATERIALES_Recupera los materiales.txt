FUNCTION zui5_cm_get_materiales.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(IR_MATNR) TYPE  RANGES_MATNR_TT OPTIONAL
*"     VALUE(IR_MAKTX) TYPE  FIP_T_MAKTX_RANGE OPTIONAL
*"     VALUE(IR_LARGO) TYPE  ZSUITT_CM_DIMENSIONES_RANGE OPTIONAL
*"     VALUE(IR_ALTO) TYPE  ZSUITT_CM_DIMENSIONES_RANGE OPTIONAL
*"     VALUE(IR_ANCHO) TYPE  ZSUITT_CM_DIMENSIONES_RANGE OPTIONAL
*"     VALUE(IR_LOTE) TYPE  RANGES_CHARG_TT OPTIONAL
*"     VALUE(IR_STATUS) TYPE  ZUI5R_CM_STATUS OPTIONAL
*"     VALUE(IR_KUNNR) TYPE  ZSUI_CM_KUNNR_RANGE_T OPTIONAL
*"     VALUE(IR_STOCK_LIBRE) TYPE  ZSUITT_CM_CANTIDAD_RANGE OPTIONAL
*"     VALUE(IR_STOCK_PEDIDO) TYPE  ZSUITT_CM_CANTIDAD_RANGE OPTIONAL
*"     VALUE(IR_STOCK_TOTAL) TYPE  ZSUITT_CM_CANTIDAD_RANGE OPTIONAL
*"     VALUE(IR_TPLST) TYPE  ZSUITT_CM_TPLST_RANGE OPTIONAL
*"     VALUE(I_CENTRO_MONTAJE) TYPE  WERKS_D OPTIONAL
*"     VALUE(I_ALMACEN_MONTAJE) TYPE  LGORT_D OPTIONAL
*"     VALUE(I_TKNUM) TYPE  TKNUM OPTIONAL
*"     VALUE(IR_MEDIDACAJA) TYPE  RSELOPTION OPTIONAL
*"     VALUE(I_TOP) TYPE  INT4 OPTIONAL
*"     VALUE(I_SKIP) TYPE  INT4 OPTIONAL
*"     VALUE(IT_ORDER) TYPE  /IWBEP/T_MGW_TECH_ORDER OPTIONAL
*"  EXPORTING
*"     VALUE(O_DATA) TYPE  ZSUITT_CM_MATERIALES
*"     VALUE(O_RETURN) TYPE  BAPIRET2_T
*"----------------------------------------------------------------------
  DATA(vv_top) = i_top.
  DATA: lt_tipo_monitor TYPE TABLE OF zcmventa_transp,
        r_monitor       TYPE rseloption.

  DATA: v_str_largo TYPE char20,
        v_str_alto  TYPE char20,
        v_str_ancho TYPE char20,
        v_dimension TYPE char61.

  DATA: r_aufnr  TYPE RANGE OF aufnr,
        lv_aufnr TYPE aufnr.

  DATA: o_status      TYPE  zui5_cm_sm_status,
        o_status_text TYPE  ddtext.

  DATA: lv_pallets_cant TYPE zsuis_cm_materiales-num_pallets,
        lv_alta_cant    TYPE zsuis_cm_materiales-cajas_pallets.

  DATA: vv_tipo_trans TYPE zcmventa_transp-monitor.

  IF i_centro_montaje IS INITIAL.
    i_centro_montaje = '2000'.
    i_almacen_montaje = 'CM01'.
  ENDIF.


  APPEND VALUE #( sign = 'I' option = 'EQ' low = 'CM_VENTAS' ) TO r_monitor.
  APPEND VALUE #( sign = 'I' option = 'EQ' low = 'CM_DEV' ) TO r_monitor.


  CALL FUNCTION 'ZUI5_CM_GET_TIPO_TRANS_CM'
    EXPORTING
      i_werks       = i_centro_montaje
      i_lgort       = i_almacen_montaje
      ir_monitor    = r_monitor
*   IMPORTING
*     ER_SHTYP      =
    TABLES
      it_tipo_trans = lt_tipo_monitor.

  SELECT SINGLE shtyp FROM vttk
    INTO @DATA(vv_shtyp)
    WHERE tknum = @i_tknum.
  IF sy-subrc = 0.
    READ TABLE lt_tipo_monitor INTO DATA(ls_monitor) WITH KEY shtyp = vv_shtyp.
    IF sy-subrc = 0.
      vv_tipo_trans = ls_monitor-monitor.
    ENDIF.
  ENDIF.
  IF vv_tipo_trans = 'CM_VENTAS'.

    SELECT DISTINCT a~matnr, b~maktx, a~werks, yhp~prole AS largo, yhp~prole_uom AS largo_uom, yhp~prowi AS ancho, yhp~prowi_uom AS ancho_uom, yhp~prohe AS alto, yhp~prohe_uom AS alto_uom,
    ka~zzkunnr AS kunnr, k~name1 AS kunnr_name, a~charg, t~lgort, ma~meins, mc~clabs AS stock_libre, mk~kalab AS stock_pedido, c~mmsta, ma~mstae,
    yhp2~tbqty AS cajas_pallets, yhp3~pmatn AS tipo_pallet, yhp3txt~maktx AS txt_tipo_pallet
    FROM t001l AS t
      INNER JOIN mcha AS a ON a~werks = t~werks
      INNER JOIN mara AS ma ON ma~matnr = a~matnr
      INNER JOIN makt AS b ON b~matnr = ma~matnr AND b~spras = @sy-langu
      INNER JOIN marc AS c ON c~matnr = a~matnr AND c~werks = a~werks
      INNER JOIN mard AS d ON d~werks = t~werks AND d~lgort = t~lgort AND d~matnr = c~matnr
      LEFT JOIN mchb AS mc ON mc~matnr = a~matnr AND mc~werks = a~werks AND mc~lgort = t~lgort AND mc~charg = a~charg
      LEFT JOIN mska  AS mk ON mk~matnr = a~matnr AND mk~werks = a~werks AND mk~lgort = t~lgort AND mc~charg = a~charg
      LEFT JOIN yhp_idx_td100  AS yhp ON yhp~cuobj = c~cuobj
      LEFT JOIN yhp_idx_td151  AS yhp2 ON yhp2~cuobj = c~cuobj AND yhp2~shuty = 'UNIT'
      LEFT JOIN yhp_idx_td160  AS yhp3 ON yhp3~cuobj = c~cuobj
      LEFT JOIN makt AS yhp3txt ON yhp3txt~matnr = yhp3~pmatn AND yhp3txt~spras = @sy-langu
       LEFT JOIN mch1 AS ka ON ka~matnr = a~matnr AND ka~charg = a~charg
  LEFT JOIN kna1 AS k ON k~kunnr = ka~zzkunnr
      INTO TABLE @DATA(lt_data)
      WHERE t~werks = @i_centro_montaje
      AND t~lgort = @i_almacen_montaje
      AND a~matnr IN @ir_matnr
      AND b~maktx IN @ir_maktx
      AND a~charg IN @ir_lote
*    AND a~zzkunnr IN @ir_kunnr
      AND yhp~prole IN @ir_largo
      AND yhp~prowi IN @ir_ancho
      AND yhp~prohe IN @ir_alto
      AND ( mc~clabs > 0 OR mk~kalab > 0 )
      AND yhp~prole IN @ir_largo
      AND yhp~prohe IN @ir_alto
      AND yhp~prowi IN @ir_ancho
      AND a~charg IN @ir_lote
      AND ka~zzkunnr IN @ir_kunnr
      AND mc~clabs IN @ir_stock_libre
      AND mk~kalab IN @ir_stock_pedido
      .
    IF sy-subrc = 0.
*      SORT lt_data BY (tv_sort).
*      DELETE ADJACENT DUPLICATES FROM lt_data.
*
*      IF i_top IS INITIAL.
*        vv_top = lines( lt_data ).
*      ENDIF.
      r_aufnr = VALUE #( FOR reg IN lt_data ( sign = 'I' option = 'EQ' low = COND #( WHEN strlen( reg-charg ) = 8 THEN |{ reg-charg ALPHA = IN }|
                                                                                     WHEN strlen( reg-charg ) = 9 THEN |{ reg-charg+1 ALPHA = IN }|
                                                                                     ELSE |{ reg-charg+2 ALPHA = IN }| ) ) ).

      "Consulta 01 CONSUMO REAL
      SELECT aufnr, lgort, matnr, charg, menge
        FROM mseg
        INTO TABLE @DATA(lt_consumo_real)
        WHERE aufnr IN @r_aufnr
*        AND lgort = '5000'
        .

      "Consulta 02 CONSUMO TEORICO
      SELECT aufnr, matnr, bdmng
        FROM resb
        INTO TABLE @DATA(lt_consumo_teorico)
        WHERE aufnr IN @r_aufnr
        AND lgort = '5000'.

      "Obtenemos las cajas por pallets de la orden
*        Entrar en CAUFV con valor de AUFNR
*        Recuperar AUFPL
*        Entrar en AFVC con AUFPL y recuperar APLZL para el mayor VORNR
*        Entrar en AFVV con AUFPL y APLZL y recuperar UMREZ
      SELECT a~aufnr, b~vornr, c~umrez
        FROM caufv AS a
        INNER JOIN afvc AS b ON b~aufpl = a~aufpl
        INNER JOIN afvv AS c ON b~aplzl = c~aplzl AND b~aufpl = c~aufpl
        INTO TABLE @DATA(lt_cajas_pallets)
        WHERE aufnr IN @r_aufnr
        ORDER BY  a~aufnr, b~vornr DESCENDING.
      IF sy-subrc = 0.
        DELETE ADJACENT DUPLICATES FROM lt_cajas_pallets COMPARING aufnr.
      ENDIF.


      SELECT aufnr, gamng
        FROM caufv
        INTO TABLE @DATA(lt_consumo_teorico_cant)
        WHERE aufnr IN @r_aufnr.


      LOOP AT lt_data ASSIGNING FIELD-SYMBOL(<ls_data>)." FROM i_skip TO  vv_top.


        "Comprobamos si el lote está regularizado pertenece al cliente filtrado por IR_KUNNR el campo ZZKUNR
        IF ( <ls_data>-charg(1) = 'R' OR <ls_data>-charg(2) = 'AR' ) AND  ( ir_kunnr IS NOT INITIAL AND <ls_data>-kunnr NOT IN ir_kunnr ).
          CONTINUE.
        ENDIF.

        WRITE <ls_data>-largo TO v_str_largo LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
        WRITE <ls_data>-alto  TO v_str_alto  LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
        WRITE <ls_data>-ancho TO v_str_ancho LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.

        v_dimension = |{ v_str_largo }x{ v_str_alto }x{ v_str_ancho }|.

        IF v_dimension NOT IN ir_medidacaja AND ir_medidacaja IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        CALL FUNCTION 'ZUI5_CM_STATUS_LOTE'
          EXPORTING
            i_werks       = <ls_data>-werks
            i_lgort       = <ls_data>-lgort
            i_charg       = <ls_data>-charg
          IMPORTING
            o_status      = o_status
            o_status_text = o_status_text.

        IF o_status IS INITIAL OR ( o_status NOT IN ir_status AND ir_status IS NOT INITIAL ).
          CONTINUE.

        ENDIF.

        APPEND INITIAL LINE TO o_data ASSIGNING FIELD-SYMBOL(<ls_o_data>).

        MOVE-CORRESPONDING <ls_data> TO <ls_o_data>.
        <ls_o_data>-stock_total = <ls_o_data>-stock_libre + <ls_o_data>-stock_pedido.
        <ls_o_data>-status_lote = o_status.
        <ls_o_data>-status_text = o_status_text.

        <ls_o_data>-dimensiones = v_dimension.

        "Marcamos estado si esta bloqueado por maestro
        IF ( <ls_data>-mmsta NE '00' AND <ls_data>-mmsta IS NOT INITIAL ) OR ( <ls_data>-mstae NE '00' AND <ls_data>-mstae IS NOT INITIAL ).
          <ls_o_data>-estado = 'X'.
        ENDIF.

        "Pallet por defecto
        CASE strlen( <ls_o_data>-charg ).
          WHEN 8.
            lv_aufnr =  |{ <ls_o_data>-charg ALPHA = IN }|.
          WHEN 9.
            lv_aufnr =  |{ <ls_o_data>-charg+1 ALPHA = IN }|.
          WHEN OTHERS.
            lv_aufnr =  |{ <ls_o_data>-charg+2 ALPHA = IN }|.
        ENDCASE.
        READ TABLE lt_consumo_real INTO DATA(ls_consumo_real_p) WITH KEY aufnr = lv_aufnr lgort = '5000'.
        IF sy-subrc = 0.
          <ls_o_data>-tipo_pallet = ls_consumo_real_p-matnr.
          CLEAR: lv_pallets_cant, lv_alta_cant.
          LOOP AT lt_consumo_real INTO ls_consumo_real_p WHERE aufnr = lv_aufnr AND lgort = '5000'.
            lv_pallets_cant = lv_pallets_cant + ls_consumo_real_p-menge.
          ENDLOOP.
          LOOP AT lt_consumo_real INTO DATA(ls_consumo_real_cant) WHERE aufnr = lv_aufnr AND matnr = <ls_o_data>-matnr AND charg = <ls_o_data>-charg.
            lv_alta_cant = lv_alta_cant + ls_consumo_real_cant-menge.
          ENDLOOP.
*          IF sy-subrc = 0 AND lv_pallets_cant NE 0.
*            <ls_o_data>-cajas_pallets = ceil( lv_alta_cant / lv_pallets_cant ).
*          ENDIF.
        ELSE.
          READ TABLE lt_consumo_teorico INTO DATA(ls_consumo_teorico) WITH KEY aufnr = lv_aufnr.
          IF sy-subrc = 0.
            <ls_o_data>-tipo_pallet = ls_consumo_teorico-matnr.
*            READ TABLE lt_consumo_teorico_cant INTO DATA(ls_consumo_teorico_cant) WITH KEY aufnr = lv_aufnr.
*            IF sy-subrc = 0 AND ls_consumo_teorico-bdmng NE 0.
*              <ls_o_data>-cajas_pallets = ceil( ls_consumo_teorico_cant-gamng / ls_consumo_teorico-bdmng ).
*            ENDIF.
          ENDIF.
        ENDIF.

        READ TABLE lt_cajas_pallets INTO DATA(ls_cajas_pallet) WITH KEY aufnr = lv_aufnr..
        IF sy-subrc = 0.
          <ls_o_data>-cajas_pallets = ls_cajas_pallet-umrez.
        ENDIF.

        IF <ls_o_data>-status_lote = '00' OR <ls_o_data>-status_lote = '01'.
          <ls_o_data>-cajas_pallets = 0.
        ENDIF.



      ENDLOOP.

    ELSE.
*    APPEND INITIAL LINE TO o_return ASSIGNING FIELD-SYMBOL(<ls_return>).
*    <ls_return>-type = 'E'.
*    <ls_return>-id = 'ZUI5_CM'.
*    <ls_return>-number = '005'.
    ENDIF.

  ELSEIF vv_tipo_trans = 'CM_DEV'.

    CHECK ( ir_largo IS NOT INITIAL AND ir_ancho IS NOT INITIAL AND ir_alto IS NOT INITIAL ) OR  ir_matnr IS NOT INITIAL OR ir_maktx IS NOT INITIAL.

    SELECT DISTINCT ma~matnr, b~maktx, c~werks, yhp~prole AS largo, yhp~prole_uom AS largo_uom, yhp~prowi AS ancho, yhp~prowi_uom AS ancho_uom, yhp~prohe AS alto, yhp~prohe_uom AS alto_uom,
     t~lgort, ma~meins,  mk~kalab AS stock_pedido, c~mmsta, ma~mstae,
    yhp2~tbqty AS cajas_pallets, yhp3~pmatn AS tipo_pallet, yhp3txt~maktx AS txt_tipo_pallet
    FROM t001l AS t
*      INNER JOIN mcha AS a ON a~werks = t~werks
      INNER JOIN marc AS c ON c~werks = t~werks
      INNER JOIN mard AS d ON d~werks = t~werks AND d~lgort = t~lgort AND d~matnr = c~matnr
      INNER JOIN mara AS ma ON ma~matnr = c~matnr
      INNER JOIN makt AS b ON b~matnr = ma~matnr AND b~spras = @sy-langu
*      INNER JOIN marc AS c ON c~matnr = a~matnr AND c~werks = a~werks
*      LEFT JOIN mchb AS mc ON mc~matnr = a~matnr AND mc~werks = a~werks AND mc~lgort = t~lgort AND mc~charg = a~charg
      LEFT JOIN mska  AS mk ON mk~matnr = ma~matnr AND mk~werks = c~werks AND mk~lgort = t~lgort
      LEFT JOIN yhp_idx_td100  AS yhp ON yhp~cuobj = c~cuobj
      LEFT JOIN yhp_idx_td151  AS yhp2 ON yhp2~cuobj = c~cuobj AND yhp2~shuty = 'UNIT'
      LEFT JOIN yhp_idx_td160  AS yhp3 ON yhp3~cuobj = c~cuobj
      LEFT JOIN makt AS yhp3txt ON yhp3txt~matnr = yhp3~pmatn AND yhp3txt~spras = @sy-langu
*      LEFT JOIN kna1 AS k ON k~kunnr = a~zzkunnr
      INTO CORRESPONDING FIELDS OF TABLE @lt_data
*      UP TO 10000 ROWS
      WHERE t~werks = @i_centro_montaje
      AND t~lgort = @i_almacen_montaje
      AND ma~matnr IN @ir_matnr
      AND b~maktx IN @ir_maktx
*      AND a~charg IN @ir_lote
*    AND a~zzkunnr IN @ir_kunnr
      AND yhp~prole IN @ir_largo
      AND yhp~prowi IN @ir_ancho
      AND yhp~prohe IN @ir_alto
*    AND ( mc~clabs > 0 OR mk~kalab > 0 )
    .
    IF sy-subrc = 0.

*      SORT lt_data BY (tv_sort).
*      DELETE ADJACENT DUPLICATES FROM lt_data.
*      IF i_top IS INITIAL.
*        vv_top = lines( lt_data ).
*      ENDIF.

*      r_aufnr = VALUE #( FOR reg IN lt_data ( sign = 'I' option = 'EQ' low = COND #( WHEN strlen( reg-charg ) = 8 THEN |{ reg-charg ALPHA = IN }|
*                                                                                          WHEN strlen( reg-charg ) = 9 THEN |{ reg-charg+1 ALPHA = IN }|
*                                                                                          ELSE |{ reg-charg+2 ALPHA = IN }| ) ) ).
*      "Consulta 01 CONSUMO REAL
*      SELECT aufnr, matnr, menge
*        FROM mseg
*        INTO TABLE @lt_consumo_real
*        WHERE aufnr IN @r_aufnr
*        AND lgort = '5000'.
*
*      "Consulta 02 CONSUMO TEORICO
*      SELECT aufnr, matnr, bdmng
*        FROM resb
*        INTO TABLE @lt_consumo_teorico
*        WHERE aufnr IN @r_aufnr
*        AND lgort = '5000'.

      LOOP AT lt_data ASSIGNING <ls_data>." FROM i_skip TO vv_top.
        "Comprobamos si el lote está regularizado pertenece al cliente filtrado por IR_KUNNR el campo ZZKUNR
*        IF <ls_data>-charg(1) = 'R' AND  ir_kunnr IS NOT INITIAL AND <ls_data>-kunnr NOT IN ir_kunnr .
*          CONTINUE.
*        ENDIF.

        WRITE <ls_data>-largo TO v_str_largo LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
        WRITE <ls_data>-alto  TO v_str_alto  LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
        WRITE <ls_data>-ancho TO v_str_ancho LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.

        v_dimension = |{ v_str_largo }x{ v_str_ancho }x{ v_str_alto }|.

        IF v_dimension NOT IN ir_medidacaja AND ir_medidacaja IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        CALL FUNCTION 'ZUI5_CM_STATUS_LOTE'
          EXPORTING
            i_werks       = <ls_data>-werks
            i_lgort       = <ls_data>-lgort
            i_charg       = <ls_data>-charg
          IMPORTING
            o_status      = o_status
            o_status_text = o_status_text.

*        IF o_status IS INITIAL OR ( o_status NOT IN ir_status AND ir_status IS NOT INITIAL ).
*          CONTINUE.
*
*        ENDIF.
        APPEND INITIAL LINE TO o_data ASSIGNING <ls_o_data>.

        MOVE-CORRESPONDING <ls_data> TO <ls_o_data>.
*        <ls_o_data>-stock_total = <ls_o_data>-stock_libre + <ls_o_data>-stock_pedido.
        <ls_o_data>-status_lote = o_status.
        <ls_o_data>-status_text = o_status_text.

        <ls_o_data>-dimensiones = v_dimension.

        "Marcamos estado si esta bloqueado por maestro
        IF ( <ls_data>-mmsta NE '00' AND <ls_data>-mmsta IS NOT INITIAL ) OR ( <ls_data>-mstae NE '00' AND <ls_data>-mstae IS NOT INITIAL ).
          <ls_o_data>-estado = 'X'.
        ENDIF.

*        "Pallet por defecto
*        CASE strlen( <ls_o_data>-charg ).
*          WHEN 8.
*            lv_aufnr =  |{ <ls_o_data>-charg ALPHA = IN }|.
*          WHEN 9.
*            lv_aufnr =  |{ <ls_o_data>-charg+1 ALPHA = IN }|.
*          WHEN OTHERS.
*            lv_aufnr =  |{ <ls_o_data>-charg+2 ALPHA = IN }|.
*        ENDCASE.
*        READ TABLE lt_consumo_real INTO ls_consumo_real WITH KEY aufnr = lv_aufnr.
*        IF sy-subrc = 0.
*          <ls_o_data>-tipo_pallet = ls_consumo_real-matnr.
*          <ls_o_data>-cajas_pallets = ceil( ls_consumo_real-menge ).
*        ELSE.
*          READ TABLE lt_consumo_teorico INTO ls_consumo_teorico WITH KEY aufnr = lv_aufnr.
*          IF sy-subrc = 0.
*            <ls_o_data>-tipo_pallet = ls_consumo_teorico-matnr.
*            <ls_o_data>-cajas_pallets = ceil( ls_consumo_teorico-bdmng ).
*          ENDIF.
*        ENDIF.

        IF <ls_o_data>-status_lote = '00' OR <ls_o_data>-status_lote = '01'.
          <ls_o_data>-cajas_pallets = 0.
          <ls_o_data>-tipo_pallet = ''.
        ENDIF.

      ENDLOOP.

    ELSE.
*    APPEND INITIAL LINE TO o_return ASSIGNING FIELD-SYMBOL(<ls_return>).
*    <ls_return>-type = 'E'.
*    <ls_return>-id = 'ZUI5_CM'.
*    <ls_return>-number = '005'.
    ENDIF.

  ELSE.
    SELECT DISTINCT a~matnr, b~maktx, a~werks, yhp~prole AS largo, yhp~prole_uom AS largo_uom, yhp~prowi AS ancho, yhp~prowi_uom AS ancho_uom, yhp~prohe AS alto, yhp~prohe_uom AS alto_uom,
    ka~zzkunnr AS kunnr, k~name1 AS kunnr_name, a~charg, t~lgort, ma~meins, mc~clabs AS stock_libre, mk~kalab AS stock_pedido, c~mmsta, ma~mstae,
    yhp2~tbqty AS cajas_pallets, yhp3~pmatn AS tipo_pallet, yhp3txt~maktx AS txt_tipo_pallet
    FROM t001l AS t
      INNER JOIN mcha AS a ON a~werks = t~werks
      INNER JOIN mara AS ma ON ma~matnr = a~matnr
      INNER JOIN makt AS b ON b~matnr = ma~matnr AND b~spras = @sy-langu
      INNER JOIN marc AS c ON c~matnr = a~matnr AND c~werks = a~werks
      INNER JOIN mard AS d ON d~werks = t~werks AND d~lgort = t~lgort AND d~matnr = c~matnr
      LEFT JOIN mchb AS mc ON mc~matnr = a~matnr AND mc~werks = a~werks AND mc~lgort = t~lgort AND mc~charg = a~charg
      LEFT JOIN mska  AS mk ON mk~matnr = a~matnr AND mk~werks = a~werks AND mk~lgort = t~lgort AND mc~charg = a~charg
      LEFT JOIN yhp_idx_td100  AS yhp ON yhp~cuobj = c~cuobj
      LEFT JOIN yhp_idx_td151  AS yhp2 ON yhp2~cuobj = c~cuobj AND yhp2~shuty = 'UNIT'
      LEFT JOIN yhp_idx_td160  AS yhp3 ON yhp3~cuobj = c~cuobj
      LEFT JOIN makt AS yhp3txt ON yhp3txt~matnr = yhp3~pmatn AND yhp3txt~spras = @sy-langu
      LEFT JOIN mch1 AS ka ON ka~matnr = a~matnr AND ka~charg = a~charg
      LEFT JOIN kna1 AS k ON k~kunnr = ka~zzkunnr
      INTO TABLE @lt_data
      WHERE t~werks = @i_centro_montaje
      AND t~lgort = @i_almacen_montaje
      AND a~matnr IN @ir_matnr
      AND b~maktx IN @ir_maktx
      AND a~charg IN @ir_lote
*        AND a~zzkunnr IN @ir_kunnr
      AND yhp~prole IN @ir_largo
      AND yhp~prowi IN @ir_ancho
      AND yhp~prohe IN @ir_alto
      AND ( mc~clabs > 0 OR mk~kalab > 0 )
            AND yhp~prole IN @ir_largo
      AND yhp~prowi IN @ir_ancho
      AND yhp~prohe IN @ir_alto
      AND ( mc~clabs > 0 OR mk~kalab > 0 )
      AND yhp~prole IN @ir_largo
      AND yhp~prohe IN @ir_alto
      AND yhp~prowi IN @ir_ancho
      AND a~charg IN @ir_lote
      AND ka~zzkunnr IN @ir_kunnr
      AND mc~clabs IN @ir_stock_libre
      AND mk~kalab IN @ir_stock_pedido
  .
    IF sy-subrc = 0.
*      SORT lt_data BY (tv_sort).
*      DELETE ADJACENT DUPLICATES FROM lt_data.
*      IF i_top IS INITIAL.
*        vv_top = lines( lt_data ).
*      ENDIF.
      r_aufnr = VALUE #( FOR reg IN lt_data ( sign = 'I' option = 'EQ' low = COND #( WHEN strlen( reg-charg ) = 8 THEN |{ reg-charg ALPHA = IN }|
                                                                                          WHEN strlen( reg-charg ) = 9 THEN |{ reg-charg+1 ALPHA = IN }|
                                                                                          ELSE |{ reg-charg+2 ALPHA = IN }| ) ) ).

      "Consulta 01 CONSUMO REAL
      SELECT aufnr, lgort, matnr, charg, menge
        FROM mseg
        INTO TABLE @lt_consumo_real
        WHERE aufnr IN @r_aufnr
*        AND lgort = '5000'
        .

      "Consulta 02 CONSUMO TEORICO
      SELECT aufnr, matnr, bdmng
        FROM resb
        INTO TABLE @lt_consumo_teorico
        WHERE aufnr IN @r_aufnr
        AND lgort = '5000'.

      SELECT aufnr, gamng
        FROM caufv
        INTO TABLE @lt_consumo_teorico_cant
        WHERE aufnr IN @r_aufnr.

      "Obtenemos las cajas por pallets de la orden
*        Entrar en CAUFV con valor de AUFNR
*        Recuperar AUFPL
*        Entrar en AFVC con AUFPL y recuperar APLZL para el mayor VORNR
*        Entrar en AFVV con AUFPL y APLZL y recuperar UMREZ
      SELECT a~aufnr, b~vornr, c~umrez
        FROM caufv AS a
        INNER JOIN afvc AS b ON b~aufpl = a~aufpl
        INNER JOIN afvv AS c ON b~aplzl = c~aplzl AND b~aufpl = c~aufpl
        INTO TABLE @lt_cajas_pallets
        WHERE aufnr IN @r_aufnr
        ORDER BY  a~aufnr, b~vornr DESCENDING.
      IF sy-subrc = 0.
        DELETE ADJACENT DUPLICATES FROM lt_cajas_pallets COMPARING aufnr.
      ENDIF.

      LOOP AT lt_data ASSIGNING <ls_data>." FROM i_skip TO  vv_top.
        "Comprobamos si el lote está regularizado pertenece al cliente filtrado por IR_KUNNR el campo ZZKUNR
        IF ( <ls_data>-charg(1) = 'R' OR <ls_data>-charg(2) = 'AR' ) AND  ( ir_kunnr IS NOT INITIAL AND <ls_data>-kunnr NOT IN ir_kunnr ).
          CONTINUE.
        ENDIF.

        WRITE <ls_data>-largo TO v_str_largo LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
        WRITE <ls_data>-alto  TO v_str_alto  LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
        WRITE <ls_data>-ancho TO v_str_ancho LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.

        v_dimension = |{ v_str_largo }x{ v_str_ancho }x{ v_str_alto }|.

        IF v_dimension NOT IN ir_medidacaja AND ir_medidacaja IS NOT INITIAL.
          CONTINUE.
        ENDIF.

        CALL FUNCTION 'ZUI5_CM_STATUS_LOTE'
          EXPORTING
            i_werks       = <ls_data>-werks
            i_lgort       = <ls_data>-lgort
            i_charg       = <ls_data>-charg
          IMPORTING
            o_status      = o_status
            o_status_text = o_status_text.

        IF o_status IS INITIAL OR ( o_status NOT IN ir_status AND ir_status IS NOT INITIAL ).
          CONTINUE.

        ENDIF.
        APPEND INITIAL LINE TO o_data ASSIGNING <ls_o_data>.

        MOVE-CORRESPONDING <ls_data> TO <ls_o_data>.
        <ls_o_data>-stock_total = <ls_o_data>-stock_libre + <ls_o_data>-stock_pedido.
        <ls_o_data>-status_lote = o_status.
        <ls_o_data>-status_text = o_status_text.

        <ls_o_data>-dimensiones = v_dimension.

        "Marcamos estado si esta bloqueado por maestro
        IF ( <ls_data>-mmsta NE '00' AND <ls_data>-mmsta IS NOT INITIAL ) OR ( <ls_data>-mstae NE '00' AND <ls_data>-mstae IS NOT INITIAL ).
          <ls_o_data>-estado = 'X'.
        ENDIF.

        "Pallet por defecto
        CASE strlen( <ls_o_data>-charg ).
          WHEN 8.
            lv_aufnr =  |{ <ls_o_data>-charg ALPHA = IN }|.
          WHEN 9.
            lv_aufnr =  |{ <ls_o_data>-charg+1 ALPHA = IN }|.
          WHEN OTHERS.
            lv_aufnr =  |{ <ls_o_data>-charg+2 ALPHA = IN }|.
        ENDCASE.
        READ TABLE lt_consumo_real INTO ls_consumo_real_p WITH KEY aufnr = lv_aufnr lgort = '5000'.
        IF sy-subrc = 0.
          <ls_o_data>-tipo_pallet = ls_consumo_real_p-matnr.
          CLEAR: lv_pallets_cant, lv_alta_cant.
          LOOP AT lt_consumo_real INTO ls_consumo_real_p WHERE aufnr = lv_aufnr AND lgort = '5000'.
            lv_pallets_cant = lv_pallets_cant + ls_consumo_real_p-menge.
          ENDLOOP.
          LOOP AT lt_consumo_real INTO ls_consumo_real_cant WHERE aufnr = lv_aufnr AND matnr = <ls_o_data>-matnr AND charg = <ls_o_data>-charg.
            lv_alta_cant = lv_alta_cant + ls_consumo_real_cant-menge.
          ENDLOOP.
*          IF sy-subrc = 0 AND lv_pallets_cant NE 0.
*            <ls_o_data>-cajas_pallets = ceil( lv_alta_cant / lv_pallets_cant ).
*          ENDIF.
        ELSE.
          READ TABLE lt_consumo_teorico INTO ls_consumo_teorico WITH KEY aufnr = lv_aufnr.
          IF sy-subrc = 0.
            <ls_o_data>-tipo_pallet = ls_consumo_teorico-matnr.
*            READ TABLE lt_consumo_teorico_cant INTO ls_consumo_teorico_cant WITH KEY aufnr = lv_aufnr.
*            IF sy-subrc = 0 AND ls_consumo_teorico-bdmng NE 0.
*              <ls_o_data>-cajas_pallets = ceil( ls_consumo_teorico_cant-gamng / ls_consumo_teorico-bdmng ).
*            ENDIF.
          ENDIF.
        ENDIF.

        READ TABLE lt_cajas_pallets INTO ls_cajas_pallet WITH KEY aufnr = lv_aufnr..
        IF sy-subrc = 0.
          <ls_o_data>-cajas_pallets = ls_cajas_pallet-umrez.
        ENDIF.

        IF <ls_o_data>-status_lote = '00' OR <ls_o_data>-status_lote = '01'.
          <ls_o_data>-cajas_pallets = 0.
        ENDIF.

      ENDLOOP.

    ELSE.
*    APPEND INITIAL LINE TO o_return ASSIGNING FIELD-SYMBOL(<ls_return>).
*    <ls_return>-type = 'E'.
*    <ls_return>-id = 'ZUI5_CM'.
*    <ls_return>-number = '005'.
    ENDIF.
  ENDIF.



ENDFUNCTION.
