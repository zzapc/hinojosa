FUNCTION zui5_check_entrega_eti.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(ETIQUETA) TYPE  ZUI5_ETIQUETA
*"     VALUE(CLIENTE) TYPE  KUNNR
*"     VALUE(ENTREGA) TYPE  VBELN_VL
*"  EXPORTING
*"     VALUE(O_BAPI_RETURN) TYPE  BAPIRET2
*"     VALUE(O_MATERIALES_ENTREGA) TYPE  ZUI5_TT_MAT_ENTREGA
*"----------------------------------------------------------------------

  TYPES: BEGIN OF ty_hu_stock,
           matnr TYPE matnr,
           werks TYPE werks_d,
           lgort TYPE lgort_d,
           charg TYPE charg_d,
           clabs TYPE labst,
         END OF ty_hu_stock.

  DATA: ls_etiqueta       TYPE zui5_s_datos_etiqueta,
        lv_tipo_mercancia TYPE char1,
        lt_lips           TYPE TABLE OF lips,
        ls_lips           TYPE lips,
        lt_clbatch        TYPE TABLE OF clbatch,
        ls_clbatch        TYPE clbatch,
        lv_classname      LIKE klah-class,
        lv_ymcha          TYPE mcha,
        lv_exidv          TYPE exidv,
        lt_hu_stock       TYPE TABLE OF ty_hu_stock,
        ls_hu_stock       TYPE ty_hu_stock,
        lv_codigo_kit_hu  LIKE vekp-inhalt,
        lv_posicion_hu    LIKE vekp-venum,
        lv_tipo_ped       TYPE lfart,
        lt_vepo           TYPE TABLE OF vepo,
        ls_vepo           TYPE vepo,
        ls_mchb           TYPE mchb.

  DATA: lt_return             TYPE bapiret2,
        ls_materiales_entrega TYPE zui5_s_mat_entrega.

  DATA: lv_stock TYPE labst.

  DATA: lv_material       TYPE matnr,
        lv_objeto(10)     TYPE c,
        lv_objeto_aux(20) TYPE c,
        lv_tipo_material  TYPE mtart,
        lv_material_lote  TYPE xchpf.

  SPLIT etiqueta AT ' ' INTO lv_material lv_objeto_aux.
  CONDENSE lv_objeto_aux NO-GAPS.
  lv_objeto = lv_objeto_aux(10).

  CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
    EXPORTING
      input  = lv_material
    IMPORTING
      output = lv_material.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = cliente
    IMPORTING
      output = cliente.


*Funcion que recupera los valores de la mercancia
  CALL FUNCTION 'ZUI5_MF_CHECK_ETIQUETA'
    EXPORTING
      etiqueta         = etiqueta
    IMPORTING
      o_datos_etiqueta = ls_etiqueta
      o_bapi_return    = lt_return.

  CALL FUNCTION 'ZUI5_CHECK_TIPO'
    EXPORTING
      etiqueta       = etiqueta
    IMPORTING
      tipo_mercancia = lv_tipo_mercancia.

*Convertimos el formato del codigo de cliente
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = cliente
    IMPORTING
      output = cliente.

  SELECT SINGLE lfart
    INTO lv_tipo_ped
    FROM likp
    WHERE vbeln = entrega.

*CASO 1 -> HU
  IF lv_tipo_mercancia = 'A'.
*Recuperamos las posiciones del HU
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = lv_objeto
      IMPORTING
        output = lv_exidv.

*Recuperamos la posicion del hu y el codigo del material que corresponde al kit
    SELECT SINGLE venum inhalt
      INTO (lv_posicion_hu,lv_codigo_kit_hu)
      FROM vekp
      WHERE exidv = lv_exidv.

*Recuperamos el almacen donde esta almacenado el hu
    SELECT *
      INTO TABLE lt_vepo
      FROM vepo
      WHERE venum = lv_posicion_hu.

    LOOP AT lt_vepo INTO ls_vepo.

      IF lv_tipo_ped <> 'ZNL'.
*Comprobamos si el solicitante es el mismo que en la caracteristica Z_CLIENTE
        CALL FUNCTION 'VB_BATCH_GET_DETAIL'
          EXPORTING
            matnr              = ls_vepo-matnr
            charg              = ls_vepo-charg
            werks              = '4000'
            get_classification = 'X'
          IMPORTING
            ymcha              = lv_ymcha
            classname          = lv_classname
          TABLES
            char_of_batch      = lt_clbatch.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.

        READ TABLE lt_clbatch INTO ls_clbatch WITH KEY atnam = 'Z_CLIENTE'.
        IF sy-subrc = 0.
          IF ls_clbatch-atwtb <> cliente.
*Si el cliente no corresponde, se muestra el error
            o_bapi_return-type = 'W'.
            o_bapi_return-id = 'Z_WM'.
            o_bapi_return-number = '009'.

            CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
              EXPORTING
                id         = o_bapi_return-id
                number     = o_bapi_return-number
                language   = sy-langu
                textformat = 'ASC'
              IMPORTING
                message    = o_bapi_return-message.
*          EXIT.
          ENDIF.
        ENDIF.
      ENDIF.

*Controlamos si cada lote esta en el almacen de producto terminado
      SELECT SINGLE *
        INTO ls_mchb
        FROM mchb
        WHERE werks = '4000' AND lgort = '1400' AND charg = ls_vepo-charg AND clabs > 0.
      IF sy-subrc = 0.
*Si el lote no esta en el almacen de producto terminado, devolvemos el error
        o_bapi_return-type = 'E'.
        o_bapi_return-id = 'Z_WM'.
        o_bapi_return-number = '023'.

        CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
          EXPORTING
            id         = o_bapi_return-id
            number     = o_bapi_return-number
            language   = sy-langu
            textformat = 'ASC'
          IMPORTING
            message    = o_bapi_return-message.
       EXIT.
      ENDIF.

      ls_materiales_entrega-cantidad = ls_vepo-vemng.
      ls_materiales_entrega-material = ls_vepo-matnr.
      ls_materiales_entrega-codigo_lote = ls_vepo-charg.
      ls_materiales_entrega-tipo_mercancia = lv_tipo_mercancia.
      APPEND ls_materiales_entrega TO o_materiales_entrega.

    ENDLOOP.
*CASO 2 -> LOTE
  ELSEIF lv_tipo_mercancia = 'B'.
    IF lv_tipo_ped <> 'ZNL'.
*Comprobamos si el solicitante es el mismo que en la caracteristica Z_CLIENTE
      CALL FUNCTION 'VB_BATCH_GET_DETAIL'
        EXPORTING
          matnr              = lv_material
          charg              = ls_etiqueta-codigo_lote
          werks              = '4000'
          get_classification = 'X'
        IMPORTING
          ymcha              = lv_ymcha
          classname          = lv_classname
        TABLES
          char_of_batch      = lt_clbatch.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      READ TABLE lt_clbatch INTO ls_clbatch WITH KEY atnam = 'Z_CLIENTE'.
      IF sy-subrc = 0.
        IF ls_clbatch-atwtb <> cliente.
*Si el cliente no corresponde, se muestra el error
          o_bapi_return-type = 'W'.
          o_bapi_return-id = 'Z_WM'.
          o_bapi_return-number = '009'.

          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              id         = o_bapi_return-id
              number     = o_bapi_return-number
              language   = sy-langu
              textformat = 'ASC'
            IMPORTING
              message    = o_bapi_return-message.
*        EXIT.
        ENDIF.
      ENDIF.
    ENDIF.

*Comprobamos si el lote esta en el almacen 1400
    SELECT SINGLE *
      INTO ls_mchb
      FROM mchb
      WHERE werks = '4000' AND lgort = '1400' AND charg = lv_objeto AND clabs > 0.
    IF sy-subrc <> 0.
      o_bapi_return-type = 'E'.
      o_bapi_return-id = 'Z_WM'.
      o_bapi_return-number = '023'.

      CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
        EXPORTING
          id         = o_bapi_return-id
          number     = o_bapi_return-number
          language   = sy-langu
          textformat = 'ASC'
        IMPORTING
          message    = o_bapi_return-message.
      EXIT.
    ENDIF.

*Recuperamos la cantidad de lote, el codigo de material y el codigo de lote.
    ls_materiales_entrega-cantidad =  ls_etiqueta-cantidad.
    ls_materiales_entrega-material = lv_material.
    ls_materiales_entrega-codigo_lote = ls_etiqueta-codigo_lote.
    ls_materiales_entrega-tipo_mercancia = lv_tipo_mercancia.
    APPEND ls_materiales_entrega TO o_materiales_entrega.

  ELSE.
*Recuperamos el stock el material
    SELECT SINGLE labst
      INTO lv_stock
      FROM mard
      WHERE matnr = lv_material AND lgort = ls_etiqueta-almacen AND werks = '4000'.
    IF lv_stock > 0.
*Añadimos el material y la cantidad al listado de salida
      ls_materiales_entrega-material = lv_material.
      ls_materiales_entrega-cantidad = lv_stock.
      ls_materiales_entrega-tipo_mercancia = lv_tipo_mercancia.
      APPEND ls_materiales_entrega TO o_materiales_entrega.

    ELSE.
*Si no hay stock para el material
      o_bapi_return-type = 'S'.
      o_bapi_return-id = 'Z_WM'.
      o_bapi_return-number = '010'.

      CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
        EXPORTING
          id         = o_bapi_return-id
          number     = o_bapi_return-number
          language   = sy-langu
          textformat = 'ASC'
        IMPORTING
          message    = o_bapi_return-message.
      EXIT.

    ENDIF.
  ENDIF.


ENDFUNCTION.
