FUNCTION zui5_cm_informe_get_stocks.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(R_ENTREGA) TYPE  SD_VBELN_RANGES OPTIONAL
*"     VALUE(R_KUNNR) TYPE  TRTY_KUNNR_RANGE OPTIONAL
*"     VALUE(R_VKORG) TYPE  SD_VKORG_RANGES OPTIONAL
*"     VALUE(R_MATNR) TYPE  RANGES_MATNR OPTIONAL
*"     VALUE(R_MTART) TYPE  GDS_SELRANGE_MTART_TAB OPTIONAL
*"     VALUE(R_EDATU) TYPE  DATE_T_RANGE OPTIONAL
*"     VALUE(R_BRSCH) TYPE  TAB_RANGE_C4 OPTIONAL
*"     VALUE(R_VBELN) TYPE  SD_VBELN_RANGES OPTIONAL
*"     VALUE(R_WERKS) TYPE  WERKS_T_RANGE OPTIONAL
*"     VALUE(R_PSTLZ) TYPE  TAB_RANGE_C10 OPTIONAL
*"     VALUE(R_AUDAT) TYPE  DATE_T_RANGE OPTIONAL
*"     VALUE(R_REGIO) TYPE  TAB_RANGE_C3 OPTIONAL
*"     VALUE(R_CONTRATO) TYPE  SD_VBELN_RANGES OPTIONAL
*"     VALUE(R_BSTNK) TYPE  /SPE/RET_RANGE_C20_T OPTIONAL
*"     VALUE(R_KUNWE) TYPE  TRTY_KUNNR_RANGE OPTIONAL
*"     VALUE(R_POSNR) TYPE  ISAUTO_XLO_RANGE_T_POSNR_VL OPTIONAL
*"     VALUE(R_AUART) TYPE  TMS_T_AUART_RANGE OPTIONAL
*"     VALUE(R_BEDAE) TYPE  GDS_SELRANGE_MTART_TAB OPTIONAL
*"     VALUE(R_ERDAT) TYPE  DATE_T_RANGE OPTIONAL
*"     VALUE(R_MATKL) TYPE  GDS_SELRANGE_MATKL_TAB OPTIONAL
*"     VALUE(R_KLABC) TYPE  ZSD_TT_RANGE_KLABC OPTIONAL
*"     VALUE(R_AUFNR) TYPE  RANGE_T_AUFNR OPTIONAL
*"     VALUE(R_LGORT) TYPE  ZTTPP_RANGE_LGORT OPTIONAL
*"     VALUE(R_MAKTX) TYPE  FIP_T_MAKTX_RANGE OPTIONAL
*"     VALUE(R_NOMBRE) TYPE  ZSUIS_CM_NOMBRES_RANG OPTIONAL
*"     VALUE(R_ESTADO) TYPE  RSELOPTION OPTIONAL
*"     VALUE(R_DESC_ESTADO) TYPE  RSELOPTION OPTIONAL
*"     VALUE(R_DIMENSIONES) TYPE  RSELOPTION OPTIONAL
*"  EXPORTING
*"     VALUE(E_RETURN) TYPE  BAPIRET2_T
*"     VALUE(E_DATA) TYPE  ZSUI5TT_CM_INFORME_STOCKS
*"----------------------------------------------------------------------
  DATA: v_str_largo TYPE char20,
        v_str_alto  TYPE char20,
        v_str_ancho TYPE char20.
  DATA: r_estado_sel TYPE RANGE OF zed_estado_reparto.

  DATA(o_sd) = NEW zhcl_sd_core( ).
  DATA(i_rep) = o_sd->get_repartos( r_kunnr = r_kunnr
                                    r_matnr = r_matnr
                                    r_edatu = r_edatu
                                    r_vbeln = r_vbeln
                                    r_werks = r_werks
                                    add_pedidos_traslado = abap_true
                                    add_ordenes = abap_false
                                    add_pedidos_ventas = abap_false
                                    r_posnr = r_posnr
                                    r_erdat = r_erdat
                                    r_aufnr = r_aufnr
                                    r_lgort = r_lgort
      ).

  "Recuperamos los descriptivos de los estados del pedido
  SELECT * FROM ztsd0010
    INTO TABLE @DATA(lt_textos_estado)
    WHERE descripcion IN @r_desc_estado
    ORDER BY estado, tipo_estado.

  "Filtro Estados
  IF r_estado IS NOT INITIAL.
    DELETE i_rep WHERE estado NOT IN r_estado.
  ENDIF.

  "Filtro Texto Estados
  IF r_desc_estado IS NOT INITIAL.
    r_estado_sel = VALUE #( FOR ls IN lt_textos_estado ( sign = 'I' option = 'EQ' low = ls-estado ) ).
    IF r_estado_sel IS NOT INITIAL.
      DELETE i_rep WHERE estado NOT IN r_estado_sel.
    ENDIF.
  ENDIF.

  "Filtro Texto Material
  IF r_maktx IS NOT INITIAL.
    DELETE i_rep WHERE arktx NOT IN r_maktx.
  ENDIF.

  LOOP AT i_rep ASSIGNING FIELD-SYMBOL(<ls_rep>).
    APPEND INITIAL LINE TO e_data ASSIGNING FIELD-SYMBOL(<ls_data>).
    MOVE-CORRESPONDING <ls_rep> TO <ls_data>.
    <ls_data>-kunnr_name = <ls_rep>-name1_kunnr.
    <ls_data>-maktx = <ls_rep>-arktx.

    "Asignamos las dimensiones
    WRITE <ls_rep>-length TO v_str_largo LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
    WRITE <ls_rep>-height  TO v_str_alto  LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
    WRITE <ls_rep>-width TO v_str_ancho LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
    <ls_data>-dimensiones = |{ v_str_largo }x{ v_str_ancho }x{ v_str_alto }|.

    <ls_data>-estado_orden = <ls_rep>-situacion.
    <ls_data>-estado_orden_txt  = <ls_rep>-situacion_txt.
    <ls_data>-fecha_fin_orden  = <ls_rep>-gltrs.
    <ls_data>-hora_fin_orden  = <ls_rep>-gluzs.

    <ls_data>-ctd_fabricada = <ls_rep>-cant_prod_lib.
    <ls_data>-ctd_pedido = <ls_rep>-kwmeng.

    <ls_data>-ctd_ent_pte_servir = <ls_rep>-lfimg. "Cantidad de reparto  MENGE
    <ls_data>-cantidad_servida = <ls_rep>-lfimg_servido. "Cantidad entregada  WEMNG
    <ls_data>-ctd_stock_muelle = <ls_rep>-lfimg. "Cantidad de salida  WAMNG

    <ls_data>-eindt = <ls_rep>-edatu.

    READ TABLE lt_textos_estado INTO DATA(ls_texto) WITH KEY estado = <ls_rep>-estado tipo_estado = <ls_rep>-tipo_estado BINARY SEARCH.
    IF sy-subrc = 0.
      <ls_data>-desc_estado = ls_texto-descripcion.
    ENDIF.
  ENDLOOP.

  IF r_dimensiones IS NOT INITIAL.
    DELETE e_data WHERE dimensiones NOT IN r_dimensiones.
  ENDIF.


ENDFUNCTION.
