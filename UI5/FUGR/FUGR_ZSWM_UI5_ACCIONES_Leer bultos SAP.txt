FUNCTION zswm_ui5_acciones.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     VALUE(OPERARIO) TYPE  ZLNUM_OPER OPTIONAL
*"     VALUE(LENUM) TYPE  LENUM OPTIONAL
*"     VALUE(REPROCESO) TYPE  FLAG OPTIONAL
*"     VALUE(RECORTE) TYPE  FLAG OPTIONAL
*"     VALUE(CAMBIO_STATUS) TYPE  FLAG OPTIONAL
*"     VALUE(MENGE_NEW) TYPE  MENGE_D OPTIONAL
*"     VALUE(BESTQ_NEW) TYPE  BESTQ OPTIONAL
*"     VALUE(LGNUM_FORZADO) TYPE  LGNUM OPTIONAL
*"     VALUE(GRUPO_DEFECTO) TYPE  QCODEGRP OPTIONAL
*"     VALUE(CODIGO_DEFECTO) TYPE  QCODE OPTIONAL
*"     VALUE(LGPLA_REP) TYPE  LGPLA OPTIONAL
*"  EXPORTING
*"     VALUE(OK) TYPE  FLAG
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"     VALUE(REGISTRO) TYPE  ZSWM_READ_EXIDV_STR
*"----------------------------------------------------------------------
*  DATA:
*    zswm_read_exidv_bloq_lqua_str TYPE zswm_read_exidv_bloq_lqua_str,
*    zswm_read_exidv_bloq_lein_str TYPE zswm_read_exidv_bloq_lein_str,
*    zswm_read_exidv_bloq_lagp_str TYPE zswm_read_exidv_bloq_lagp_str,
*    zswm_read_exidv_doc_str       TYPE zswm_read_exidv_doc_str.


  PERFORM break USING 'ZSWM_UI5_ACCIONES'.

  DATA: data_u            TYPE zswm_data_ui5_eeeoo_str,
        r_param           TYPE zswm_data_ui5_param_str,
        r_funcionalidades TYPE zswm_data_ui5_func_str.
  DATA: tanum TYPE ltap-tanum.
  CLEAR tanum.
* add jtm 23.11.2022
  IF lgnum_forzado IS NOT INITIAL.
    data_u-lgnum = lgnum_forzado.
  ELSE.
* fin de add jtm 23.11.2022
    CALL FUNCTION 'ZSWM_GET_DATA_USER_UI5'
      EXPORTING
        uname      = uname
        statu      = 'X'
        no_gen_log = abap_true
        tcode      = tcode
      IMPORTING
        data_user  = data_u
*       ERROR      =
*       TT_LOG     =
      .
    data_u-operario = operario.
  ENDIF. " add jtm 23.11.2022
  lenum = |{ lenum ALPHA = IN }|.
  PERFORM read_lenum USING lenum tcode data_u '' '' CHANGING registro error tt_log.
  CHECK error NE abap_true.
* add jtm 03.11.2022
  IF registro-lgtyp EQ 'MUE'
  OR registro-lgtyp EQ '230'. " Reprocesos
*    El bulto & está en un tipo de almacén & prohibido para cambios
*   add jtm 23.11.2022
    IF registro-lgtyp EQ '230' AND sy-tcode EQ 'ZSWMUT010'.
    ELSE.
*   fin de add jtm 23.11.2022
      MOVE abap_true TO error.
      PERFORM mensaje USING 'E' 'ZSWM_UI5' '186' lenum registro-lgtyp space space CHANGING tt_log[].
    ENDIF. " add jtm 23.11.2022
  ENDIF.
  CHECK error NE abap_true.
* fin de add jtm 03.11.2022

  CASE abap_true.
    WHEN cambio_status.
      IF registro-bestq EQ bestq_new.
*         No se ha cambiado el status de stock en la UA &
        PERFORM mensaje USING 'E' 'ZSWM_UI5' '101' registro-lenum space space space CHANGING tt_log[].
        MOVE abap_true TO error.
*     add jtm 04.11.2022
      ELSEIF registro-bestq EQ 'Q'.
*        Bulto & en reproceso. No se puede cambiar de estatus.
        PERFORM mensaje USING 'E' 'ZSWM_UI5' '188' registro-lenum space space space CHANGING tt_log[].
        MOVE abap_true TO error.
*     fin de add jtm 04.11.2022
      ELSE.
        PERFORM cambio_status USING data_u  bestq_new grupo_defecto codigo_defecto CHANGING registro error tt_log ok.
      ENDIF.
    WHEN reproceso.

      PERFORM reproceso USING data_u 'Q' grupo_defecto codigo_defecto lgpla_rep CHANGING registro error tt_log ok.
    WHEN recorte.
*     add jtm 04.11.2022
      IF registro-bestq EQ 'Q'.
*       Bulto & en reproceso. No se puede hacer recorte
        PERFORM mensaje USING 'E' 'ZSWM_UI5' '187' registro-lenum space space space CHANGING tt_log[].
        MOVE abap_true TO error.
      ELSE.
*     fin de add jtm 04.11.2022
        IF menge_new EQ registro-verme.
          MOVE abap_true TO error.
*       No se ha cambiado la cantidad de la UA &
          PERFORM mensaje USING 'E' 'ZSWM_UI5' '100' registro-lenum space space space CHANGING tt_log[].
        ELSE.
          CALL FUNCTION 'ZSWM_CREATE_BIN'
            EXPORTING
              lgnum = data_u-lgnum
              lgtyp = '998'
              lgpla = 'RECORTE'
              lgber = '001'
              lptyp = 'GN'
*         IMPORTING
*             TT_LOG        =
            .
          DATA: nltyp TYPE ltap-nltyp,
                nlpla TYPE ltap-nlpla,
                vltyp TYPE ltap-vltyp,
                vlpla TYPE ltap-vlpla,
                nlenr TYPE ltap-nlenr,
                vlenr TYPE ltap-vlenr,
                ctd   TYPE rl03t-anfme,
                altme TYPE ltap-altme.

          CLEAR tanum.
          IF menge_new < registro-verme.
*          Sentido UBICACION -->998 RECORTE
            vltyp = registro-lgtyp.
            vlpla = registro-lgpla.
            vlenr = registro-lenum.

            nltyp = '998'.
            nlpla = 'RECORTE'.
            CLEAR nlenr.
            ctd = registro-verme - menge_new.
            altme = registro-meins.
          ELSE.
*          Sentido UBICACION <-- 998 RECORTE
            vltyp = '998'.
            vlpla = 'RECORTE'.

            nltyp = registro-lgtyp.
            nlpla = registro-lgpla.
            nlenr = registro-lenum.
            CLEAR vlenr.
            ctd =  menge_new - registro-verme .
            altme = registro-meins.
          ENDIF.
          CALL FUNCTION 'L_TO_CREATE_SINGLE' DESTINATION 'NONE'
            EXPORTING
              i_lgnum               = data_u-lgnum   " Número de almacén
              i_bwlvs               = '999'
*             i_betyp               = 'O'    " Tipo de necesidades
*             i_benum               = is_ltbk-benum    " Número de necesidades
              i_matnr               = registro-matnr    " Número de material
              i_werks               = registro-werks    " Centro
              i_lgort               = registro-lgort
              i_charg               = registro-charg
              i_bestq               = registro-bestq    " Diferenciación de stock
              i_sobkz               = registro-sobkz    " Indicador de stock especial
              i_sonum               = registro-sonum    " Número de stock especial
              i_letyp               = registro-letyp    " Tipo de unidad de almacén
              i_anfme               = ctd    " Ctd. solicitada
              i_altme               = altme    " Unidad de medida
*             i_wdatu               = INIT_DATUM    " Fecha de entrada mcías.
*             i_vfdat               = INIT_DATUM
*             i_zeugn               = SPACE    " Número de certificado
*             i_lznum               = is_ltbk-lznum    " Número adicional de ref.
              i_squit               = abap_true    " Confirm. inmed.
*             i_nidru               = SPACE    " No imprimir
*             i_drukz               = SPACE    " Ind. de impresión
*             i_ldest               = SPACE    " Impresora
*             i_wempf               = SPACE    " Receptor mercancías
*             i_ablad               = SPACE    " Lugar de descarga
              i_vltyp               = vltyp    " Tipo de almacén 'desde'       """JCB: Al pasarle la UA no hará falta pasar ubicación origen
              "i_vlber               = ls_lqua-l    " Area de almacenamiento 'desde'
              i_vlpla               = vlpla    " Ubic. 'desde'                 """JCB: Al pasarle la UA no hará falta pasar ubicación origen
*             i_vppos               = SPACE    " Posición en la ubicación 'desde'
              i_vlenr               = vlenr    " Uni-alm procedencia
*             i_vlqnr               = SPACE    " Cuanto 'desde'
***      i_nltyp               = ls_lqua-lgtyp    " Tipo de almacén 'hacia'
              i_nltyp               = nltyp    " Tipo de almacén 'hacia'    JCB: Cambiado por ubicacion destino
*             i_nlber               = SPACE    " Area de almacenamiento 'hacia'
***      i_nlpla               = ls_lqua-lgpla    " Ubic. 'hacia'
              i_nlpla               = nlpla   " Ubic. 'hacia'    JCB: Cambiado por ubicacion destino
*             i_nppos               = SPACE    " Posición en la ubicación 'hacia'
              i_nlenr               = nlenr    " Uni.almacén destino
*             i_nlqnr               = SPACE    " Cuanto 'hacia'
*             i_rltyp               = SPACE    " Tipo de almacén de retorno
*             i_rlber               = SPACE    " Area de almacenamiento de retorno
*             i_rlpla               = SPACE    " Ubicación de retorno
*             i_rlqnr               = SPACE    " Cuanto retorno
*             i_update_task         = SPACE
*             i_commit_work         = 'X'
*             i_bname               = SY-UNAME    " Usuario que crea la OT
              i_kompl               = space    " Crear OT aun si no se cubre la cantidad total -> cvivo - Es necesario desmarcarlo porque si se lanza para UMA, si la conversión
              " no cuadra 100%, falla. Es decir, si se pide la OT para 10,012 metros, esa ctd en KG es p.e. 4,5645; como no hay 4 decimales en SAP,
              " hace la OT para la cantidad que sí cuadra, es decir 10,011m p.e.; si no está este parámetro desactivado, no deja descuadrar cantidades
*             i_solex               = 0
*             i_pernr               = 0
*             i_ausfb               = SPACE
*             i_sgt_scat            = SPACE
            IMPORTING
              e_tanum               = tanum   " Número de orden de transporte
*             e_ltap                =     " Posición de orden de transporte
*      TABLES
*             t_ltak                =
*             t_ltap_vb             =
            EXCEPTIONS
              no_to_created         = 1
              bwlvs_wrong           = 2
              betyp_wrong           = 3
              benum_missing         = 4
              betyp_missing         = 5
              foreign_lock          = 6
              vltyp_wrong           = 7
              vlpla_wrong           = 8
              vltyp_missing         = 9
              nltyp_wrong           = 10
              nlpla_wrong           = 11
              nltyp_missing         = 12
              rltyp_wrong           = 13
              rlpla_wrong           = 14
              rltyp_missing         = 15
              squit_forbidden       = 16
              manual_to_forbidden   = 17
              letyp_wrong           = 18
              vlpla_missing         = 19
              nlpla_missing         = 20
              sobkz_wrong           = 21
              sobkz_missing         = 22
              sonum_missing         = 23
              bestq_wrong           = 24
              lgber_wrong           = 25
              xfeld_wrong           = 26
              date_wrong            = 27
              drukz_wrong           = 28
              ldest_wrong           = 29
              update_without_commit = 30
              no_authority          = 31
              material_not_found    = 32
              lenum_wrong           = 33
              error_message         = 34
              OTHERS                = 35.
          IF sy-subrc EQ 0.
            MOVE abap_true TO ok.
            COMMIT WORK AND WAIT.
            PERFORM read_lenum USING lenum tcode data_u '' '' CHANGING registro error tt_log.
            CALL FUNCTION 'ZSWM_PRINT_EXIDV'
              EXPORTING
                tcode    = tcode
                uname    = uname
                operario = operario
                lenum    = lenum
*               tt_lenum = tt_lenum
                mvttype  = 'R'
              IMPORTING
                error    = error
                tt_log   = tt_log.

          ELSE.
            MOVE abap_true TO error.
            ROLLBACK WORK.
            PERFORM mensaje USING 'E' sy-msgid sy-msgno sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 CHANGING tt_log[].
          ENDIF.
        ENDIF.
      ENDIF.
  ENDCASE.
ENDFUNCTION.
