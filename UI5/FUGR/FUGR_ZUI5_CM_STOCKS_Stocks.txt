FUNCTION zui5_cm_stocks.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_MATNR) TYPE  RANGES_MATNR_TT OPTIONAL
*"     VALUE(I_CHARG) TYPE  RANGES_CHARG_TT OPTIONAL
*"     VALUE(I_STATUS) TYPE  ZUI5R_CM_STATUS OPTIONAL
*"     VALUE(I_ALTO) TYPE  ZUI5R_CM_ALTO OPTIONAL
*"     VALUE(I_LARGO) TYPE  ZUI5R_CM_LARGO OPTIONAL
*"     VALUE(I_ANCHO) TYPE  ZUI5R_CM_ANCHO OPTIONAL
*"     VALUE(IR_WERKS) TYPE  RANGE_T_WERKS_D OPTIONAL
*"     VALUE(IR_LGORT) TYPE  RANGE_T_LGORT_D OPTIONAL
*"     VALUE(IR_BUDAT) TYPE  RANGES_BUDAT_TT OPTIONAL
*"     VALUE(IR_KUNNR) TYPE  RANGE_KUNNR_TAB OPTIONAL
*"     VALUE(IR_KUNNR_NAME) TYPE  ZSUIS_CM_NOMBRES_RANG OPTIONAL
*"     VALUE(IR_KDMAT) TYPE  SHP_KDMAT_RANGE_T OPTIONAL
*"     VALUE(IR_MAKTX) TYPE  FIP_T_MAKTX_RANGE OPTIONAL
*"     VALUE(IR_STATUS_TEXT) TYPE  ZSUITT_RANGE_DDTEXT OPTIONAL
*"     VALUE(IR_MEDIDACAJA) TYPE  RSELOPTION OPTIONAL
*"  EXPORTING
*"     VALUE(O_STOCK) TYPE  ZUI5TT_CM_STOCK
*"----------------------------------------------------------------------

  DATA: wa_stock           TYPE zui5s_cm_stock,
        v_werks            TYPE werks_d,
        v_lote_2d          TYPE charg_d,
        v_lote_3d          TYPE charg_d,

        v_filtro_dimension TYPE flag.

  DATA: ir_charg2 TYPE RANGE OF charg_d.

  SELECT mchb~matnr, mchb~werks, mchb~lgort, mchb~charg, maktx, clabs, meins, bwtar, mchb~ersda, mch1~zzkunnr AS kunnr, kna1~name1 AS kunnr_name,
    mara~mstae, mara~mstav, marc~mmsta, mvke~vmsta, mchb~zzcm_montaje, mchb~zzcm_defectuosa, mchb~cspem
    FROM mchb
    INNER JOIN mara ON mara~matnr EQ mchb~matnr
    INNER JOIN mcha ON mcha~matnr EQ mchb~matnr AND mcha~werks EQ mchb~werks AND mcha~charg EQ mchb~charg
    LEFT JOIN mch1 ON mcha~matnr EQ mch1~matnr AND mch1~charg EQ mcha~charg
    LEFT JOIN makt ON makt~matnr EQ mchb~matnr AND makt~spras EQ 'S'
    LEFT JOIN marc ON marc~matnr EQ mchb~matnr AND marc~werks EQ mchb~werks
    LEFT JOIN t001w ON t001w~werks EQ mchb~werks
    LEFT JOIN mvke ON mvke~matnr EQ mara~matnr AND mvke~vkorg EQ t001w~vkorg AND mvke~vtweg EQ '10'
    LEFT JOIN kna1 ON kna1~kunnr EQ mch1~zzkunnr
    INTO TABLE @DATA(t_mchb)
    WHERE mchb~werks IN @ir_werks
      AND mchb~lgort IN @ir_lgort
      AND ( mchb~clabs GT 0 OR mchb~cspem GT 0 )
      AND mchb~charg IN @i_charg
      AND mchb~matnr IN @i_matnr
      AND mchb~lvorm <> 'X'
    AND kna1~kunnr IN @ir_kunnr
    AND kna1~name1 IN @ir_kunnr_name
    AND makt~maktx IN @ir_maktx
    AND mchb~ersda IN @ir_budat.

  CHECK sy-subrc EQ 0.

  "Recuperamos los lotes de Devolución ADxxxx o Dxxxx
  APPEND INITIAL LINE TO ir_charg2 ASSIGNING FIELD-SYMBOL(<ls_charg2>).
  <ls_charg2>-sign = 'I'.
  <ls_charg2>-option = 'CP'.
  <ls_charg2>-low = 'AD*'. "Pendiente modificar por Lote

  APPEND INITIAL LINE TO ir_charg2 ASSIGNING <ls_charg2>.
  <ls_charg2>-sign = 'I'.
  <ls_charg2>-option = 'CP'.
  <ls_charg2>-low = 'D*'.

  SELECT mchb~matnr, mchb~werks, mchb~lgort, mchb~charg, maktx, clabs, meins, bwtar, mchb~ersda, mch1~zzkunnr AS kunnr, kna1~name1 AS kunnr_name,
      mara~mstae, mara~mstav, marc~mmsta, mvke~vmsta, mchb~zzcm_montaje, mchb~zzcm_defectuosa, mchb~cspem
      FROM mchb
      INNER JOIN mara ON mara~matnr EQ mchb~matnr
      INNER JOIN mcha ON mcha~matnr EQ mchb~matnr AND mcha~werks EQ mchb~werks AND mcha~charg EQ mchb~charg
      LEFT JOIN mch1 ON mcha~matnr EQ mch1~matnr AND mch1~charg EQ mcha~charg
      LEFT JOIN makt ON makt~matnr EQ mchb~matnr AND makt~spras EQ 'S'
      LEFT JOIN marc ON marc~matnr EQ mchb~matnr AND marc~werks EQ mchb~werks
      LEFT JOIN t001w ON t001w~werks EQ mchb~werks
      LEFT JOIN mvke ON mvke~matnr EQ mara~matnr AND mvke~vkorg EQ t001w~vkorg AND mvke~vtweg EQ '10'
      LEFT JOIN kna1 ON kna1~kunnr EQ mch1~zzkunnr
      APPENDING TABLE @t_mchb
      WHERE mchb~werks IN @ir_werks
        AND mchb~lgort IN @ir_lgort
        AND mchb~cspem GT 0
        AND ( mchb~charg IN @i_charg AND mchb~charg IN @ir_charg2 )
        AND mchb~matnr IN @i_matnr
        AND mchb~lvorm <> 'X'
      AND kna1~kunnr IN @ir_kunnr
      AND kna1~name1 IN @ir_kunnr_name
      AND makt~maktx IN @ir_maktx
      AND mchb~ersda IN @ir_budat.

  " Obtenemos material cliente.
  SELECT kunnr, matnr, kdmat
    FROM knmt
    INTO TABLE @DATA(t_knmt)
    FOR ALL ENTRIES IN @t_mchb
    WHERE matnr EQ @t_mchb-matnr
    AND kdmat IN @ir_kdmat.

  " Obtenemos configuración del material
  SELECT werks, matnr, yhp_idx_td100~cuobj, prole AS largo, prowi AS ancho, prohe AS alto
    FROM marc
    INNER JOIN yhp_idx_td100 ON yhp_idx_td100~cuobj EQ marc~cuobj
    INTO TABLE @DATA(t_conf)
    FOR ALL ENTRIES IN @t_mchb
    WHERE werks EQ @t_mchb-werks
      AND matnr EQ @t_mchb-matnr.

  IF i_alto IS NOT INITIAL OR i_ancho IS NOT INITIAL OR i_largo IS NOT INITIAL.

    v_filtro_dimension = 'X'.

    SELECT werks, matnr, yhp_idx_td100~cuobj, prole AS largo, prowi AS ancho, prohe AS alto
      FROM marc
      INNER JOIN yhp_idx_td100 ON yhp_idx_td100~cuobj EQ marc~cuobj
      INTO TABLE @DATA(t_conf_filtro)
      FOR ALL ENTRIES IN @t_mchb
      WHERE werks EQ @t_mchb-werks
        AND matnr EQ @t_mchb-matnr
        AND prole IN @i_largo
        AND prowi IN @i_ancho
        AND prohe IN @i_alto.

  ENDIF.

  SORT t_knmt BY matnr kunnr.
  DELETE ADJACENT DUPLICATES FROM t_knmt COMPARING matnr kunnr.

  LOOP AT t_mchb ASSIGNING FIELD-SYMBOL(<fs_mchb>).
    CLEAR: wa_stock, v_lote_2d, v_lote_3d.

    READ TABLE t_conf INTO DATA(wa_conf) WITH KEY matnr = <fs_mchb>-matnr werks = <fs_mchb>-werks.
    IF sy-subrc EQ 0.

      IF v_filtro_dimension EQ 'X'.
        READ TABLE t_conf_filtro TRANSPORTING NO FIELDS WITH KEY matnr = <fs_mchb>-matnr werks = <fs_mchb>-werks.
        IF sy-subrc EQ 4.
          CONTINUE.
        ENDIF.
      ENDIF.

      DATA: v_str_largo TYPE char20,
            v_str_alto  TYPE char20,
            v_str_ancho TYPE char20.

      WRITE wa_conf-largo TO v_str_largo LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
      WRITE wa_conf-alto  TO v_str_alto  LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
      WRITE wa_conf-ancho TO v_str_ancho LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.

      wa_stock-largo = wa_conf-largo.
      wa_stock-alto = wa_conf-alto.
      wa_stock-ancho = wa_conf-ancho.

      wa_stock-dimension = |{ v_str_largo }x{ v_str_ancho }x{ v_str_alto }|.

      IF wa_stock-dimension NOT IN ir_medidacaja AND ir_medidacaja IS NOT INITIAL.
        CONTINUE.
      ENDIF.
    ELSE.
      IF ir_medidacaja IS NOT INITIAL.
        CONTINUE.
      ENDIF.
    ENDIF.

*    IF <fs_mchb>-mstae IS NOT INITIAL
*      OR <fs_mchb>-mmsta IS NOT INITIAL
*      OR <fs_mchb>-mstav IS NOT INITIAL
*      OR <fs_mchb>-vmsta IS NOT INITIAL.
    IF <fs_mchb>-mstav IS NOT INITIAL. "MTS 02.10.2024 ajuste Correo "Cambio Monitor de Montaje"
      wa_stock-matnr_bloq = 'X'.
    ENDIF.

    wa_stock-werks = <fs_mchb>-werks.
    wa_stock-lgort = <fs_mchb>-lgort.
    wa_stock-matnr = <fs_mchb>-matnr.
    wa_stock-charg = <fs_mchb>-charg.
    wa_stock-maktx = <fs_mchb>-maktx.
    wa_stock-cant_disp = <fs_mchb>-clabs.
    wa_stock-cant_disp_uom = <fs_mchb>-meins.
    wa_stock-bwtar = <fs_mchb>-bwtar.
    wa_stock-budat = <fs_mchb>-ersda.
    wa_stock-kunnr = <fs_mchb>-kunnr.
    wa_stock-kunnr_name = <fs_mchb>-kunnr_name.

    wa_stock-cant_bloq_montaje = <fs_mchb>-zzcm_montaje.
    wa_stock-cant_bloq_montaje_uom = <fs_mchb>-meins.
    wa_stock-cant_bloq_defectuosa = <fs_mchb>-zzcm_defectuosa.
    wa_stock-cant_bloq_defectuosa_uom = <fs_mchb>-meins.
    wa_stock-cant_devolucion = <fs_mchb>-cspem - ( <fs_mchb>-zzcm_montaje + <fs_mchb>-zzcm_defectuosa ) .
    wa_stock-cant_devolucion_uom = <fs_mchb>-meins.

    CALL FUNCTION 'ZUI5_CM_STATUS_LOTE'
      EXPORTING
        i_werks       = wa_stock-werks
        i_lgort       = wa_stock-lgort
        i_charg       = wa_stock-charg
      IMPORTING
        o_status      = wa_stock-status
        o_status_text = wa_stock-status_text
        o_lote_2d     = v_lote_2d
        o_lote_3d     = v_lote_3d.

    IF wa_stock-status IS INITIAL.
      CONTINUE.
    ENDIF.

    IF ir_status_text IS NOT INITIAL AND wa_stock-status_text IN ir_status_text[].
      CONTINUE.
    ENDIF.
    " Los lotes 3D tienen como fecha de contabilización la de su lote 2D.
    " Comprobamos si el lote de la iteración es 3D.
    IF v_lote_3d EQ wa_stock-charg.
      " Estamos procesando un Lote 3D.
      " Comprobamos si tenemos el lote 2d en t_mchb
      READ TABLE t_mchb INTO DATA(wa_mchb_2d) WITH KEY charg = v_lote_2d.
      IF sy-subrc EQ 0.
        wa_stock-budat = wa_mchb_2d-ersda.
      ELSE.
        SELECT SINGLE ersda FROM mchb INTO @wa_stock-budat
          WHERE charg EQ @v_lote_2d.
      ENDIF.
    ENDIF.


    DATA(t_knmt_mat) = t_knmt.
    DELETE t_knmt_mat WHERE matnr <> <fs_mchb>-matnr.
    READ TABLE t_knmt_mat INTO DATA(wa_knmt_mat) INDEX 1.
    IF sy-subrc EQ 0.
      wa_stock-kdmat = wa_knmt_mat-kdmat.
    ELSE.
      "Si existe filtro KDMAT y no aparece en nuestro tabla no añadimos el registro.
      IF ir_kdmat IS NOT INITIAL.
        CONTINUE.
      ENDIF.
    ENDIF.


    "Flag activación botón Merma Anular
    wa_stock-merma_bloq = COND #( WHEN ( wa_stock-status = '02' OR wa_stock-status = '03' ) AND wa_stock-cant_bloq_montaje NE 0 THEN abap_true ELSE abap_false ) .

    APPEND wa_stock TO o_stock.

  ENDLOOP.

  DELETE o_stock WHERE status NOT IN i_status.

ENDFUNCTION.
