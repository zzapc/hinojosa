FUNCTION zswm_get_data_user_ui5.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(UNAME) TYPE  XUBNAME DEFAULT SY-UNAME
*"     VALUE(STATU) TYPE  FLAG DEFAULT 'X'
*"     VALUE(TCODE) TYPE  SY-TCODE DEFAULT ''
*"     VALUE(NO_GEN_LOG) TYPE  FLAG OPTIONAL
*"  EXPORTING
*"     VALUE(DATA_USER) TYPE  ZSWM_DATA_UI5_EEEOO_STR
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"----------------------------------------------------------------------
  PERFORM break USING 'ZSWM_GET_DATA_USER_UI5'.
* Datos de usuario y EEOO GAPOF01
  CLEAR: error, tt_log[], data_user, data_user-tt320[].
  SELECT SINGLE * INTO @DATA(reg_wkqu)
                  FROM lrf_wkqu WHERE bname EQ @uname
                                  AND statu EQ @statu.

  IF sy-subrc NE 0.
    MOVE abap_true TO error.
    PERFORM mensaje USING 'E' 'ZSWM_UI5' '000' uname space space space CHANGING tt_log[].
  ELSE.
    data_user-lgnum = reg_wkqu-lgnum.
    data_user-uname = uname.
    SELECT SINGLE lnumt INTO data_user-lnumt FROM t300t WHERE lgnum EQ data_user-lgnum
                                                          AND spras EQ sy-langu.
    IF sy-subrc NE 0
    OR data_user-lnumt IS INITIAL.
      SELECT SINGLE lnumt INTO data_user-lnumt FROM t300t WHERE lgnum EQ data_user-lgnum
                                                            AND spras EQ 'S'.
    ENDIF.
    DATA tt320 TYPE wrf_sit_tt320.
    SELECT * INTO CORRESPONDING FIELDS OF TABLE data_user-tt320 FROM t320 WHERE lgnum EQ reg_wkqu-lgnum ORDER BY  werks lgort.    " JME 26.07.2024 ATC
    tt320 = data_user-tt320.
    DELETE ADJACENT DUPLICATES FROM tt320 COMPARING werks.
    READ TABLE tt320 INTO DATA(rt_t320) INDEX 1.
    IF sy-subrc EQ 0.
      MOVE rt_t320-werks TO data_user-werks.
      MOVE rt_t320-lgort TO data_user-lgort.
    ENDIF.
    IF tcode IS NOT INITIAL.
      data_user-tcode = tcode.
      SELECT SINGLE ttext INTO data_user-ttext FROM tstct WHERE tcode EQ tcode
                                                            AND sprsl EQ sy-langu.
      IF sy-subrc NE 0.
        CLEAR data_user-ttext.
      ENDIF.
    ELSE.
      data_user-ttext = 'Gestión de almacenes Plancha'.
    ENDIF.

    "Recuperamos Flag Configuración App WM para activar funcionalidad por Almacén
    SELECT * FROM zwm_rf_func
      INTO TABLE @DATA(lt_parametros)
      WHERE func IN ( 'MOTIVO_REPROCESOS', 'VERIFICAR_MUELLE_UI5_EXPE', 'COMENTARIOS_DESDE_OMP', 'SUBCO_COMPRAS_UI5' , 'SUBCO_OF_UI5' , 'ENTRADAS_UI5_DESDE_CM',
                      'VER_BOTON_APROV_ALMACENES_PT' ).
    IF sy-subrc = 0.
      DATA(lv_campo) = 'LG' && data_user-lgnum.
      LOOP AT lt_parametros INTO DATA(ls_parametro).
        ASSIGN COMPONENT lv_campo OF STRUCTURE ls_parametro TO FIELD-SYMBOL(<ls_valor>).
        IF <ls_valor> IS ASSIGNED.
          CASE ls_parametro-func.
            WHEN 'MOTIVO_REPROCESOS'.
              data_user-activo_reproceso = <ls_valor>.
            WHEN 'VERIFICAR_MUELLE_UI5_EXPE'.
              data_user-activo_verifica_muelle = <ls_valor>.
            WHEN 'COMENTARIOS_DESDE_OMP'.
              data_user-activo_comentario_omp = <ls_valor>.
            WHEN 'SUBCO_COMPRAS_UI5'.
              data_user-activo_sub_ped = <ls_valor>.
            WHEN 'SUBCO_OF_UI5'.
              data_user-activo_sub = <ls_valor>.
            WHEN 'ENTRADAS_UI5_DESDE_CM'.
              data_user-activo_cm = <ls_valor>.
            WHEN 'VER_BOTON_APROV_ALMACENES_PT'.
              data_user-activo_aprov = <ls_valor>.
          ENDCASE.
          UNASSIGN <ls_valor>.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.

  CHECK no_gen_log NE abap_true.
  CALL METHOD zcl_ui5_log=>save_log
    EXPORTING
      mf     = 'ZSWM_GET_DATA_USER_UI5'
      uname  = uname
      statu  = statu
      tcode  = tcode
      error  = error
      lgnum  = data_user-lgnum
*     operario =
      tt_log = tt_log
      commit = abap_true.



ENDFUNCTION.
