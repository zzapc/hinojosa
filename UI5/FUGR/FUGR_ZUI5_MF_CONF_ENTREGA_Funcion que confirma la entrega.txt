FUNCTION zui5_mf_conf_entrega.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_CABECERA_ENTREGA) TYPE  ZUI5_S_ENTREGA_CABECERA
*"     VALUE(I_POSICIONES_ENTREGA) TYPE  ZUI5_TT_MAT_ENTREGA
*"  EXPORTING
*"     VALUE(O_BAPI_RETURN) TYPE  BAPIRET2
*"----------------------------------------------------------------------
  DATA: ls_header_data    TYPE bapiobdlvhdrchg,
        ls_header_control TYPE bapiobdlvhdrctrlchg,
        ls_techn_control  TYPE bapidlvcontrol,
        ls_item_data      TYPE bapiobdlvitemchg,
        lt_item_data      TYPE TABLE OF bapiobdlvitemchg,
        ls_item_control   TYPE bapiobdlvitemctrlchg,
        lt_item_control   TYPE TABLE OF bapiobdlvitemctrlchg,
        lv_num_pos        TYPE i,
        ls_return         TYPE bapiret2,
        lt_return         TYPE TABLE OF bapiret2.

  DATA lv_ctd_picking TYPE brgew.
  DATA l_vbeln_va TYPE vbeln.
  DATA l_posnr_va TYPE posnr.

  DATA:ls_vbkok LIKE vbkok,
       lt_vbpok TYPE TABLE OF vbpok,
       ls_vbpok LIKE vbpok,
       lt_prot  TYPE TABLE OF prott.

  DATA: ls_lips               TYPE lips,
        lt_lips               TYPE TABLE OF lips,
        ls_lips_pos           TYPE lips,
        lt_pos_entrega_aux    TYPE zui5_tt_mat_entrega,
        ls_posiciones_entrega TYPE zui5_s_mat_entrega,
        ls_pos_entrega_aux    TYPE zui5_s_mat_entrega.

  DATA: delivery_no LIKE bapiobdlvhdrchg-deliv_numb.

*Recuperamos las posiciones de la entrega
  SELECT * INTO TABLE lt_lips FROM lips
     WHERE vbeln = i_cabecera_entrega-cod_entrega.

*Seteamos los datos de cabecera
  delivery_no = i_cabecera_entrega-cod_entrega.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = delivery_no
    IMPORTING
      output = delivery_no.

  ls_header_data-deliv_numb = delivery_no.
  ls_header_control-deliv_numb = delivery_no.

  ls_techn_control-upd_ind = 'U'.


  LOOP AT i_posiciones_entrega INTO ls_posiciones_entrega.
*Si la cantidad de picking es 0 no actualizamos nada de esa posicion
    IF ls_posiciones_entrega-cantidad <> 0.
*Controlamos si una posicion tiene mas de un lote en la entrega
      lt_pos_entrega_aux = i_posiciones_entrega.
      DELETE lt_pos_entrega_aux WHERE posicion <> ls_posiciones_entrega-posicion.
      DESCRIBE TABLE lt_pos_entrega_aux LINES lv_num_pos.

*Si solo hay una posicion, el numero de posicion es el mismo que el de la entrega (no existen subposiciones)
      IF lv_num_pos > 1.
        IF ls_item_data-deliv_item(1) = '9'.
          ADD 1 TO ls_item_data-deliv_item.
        ELSE.
          ls_item_data-deliv_item = '900001'.
        ENDIF.
      ELSE.
        ls_item_data-deliv_item = ls_posiciones_entrega-posicion.
      ENDIF.


      ls_item_data-deliv_numb = ls_posiciones_entrega-cod_entrega.
      ls_item_data-hieraritem = ls_posiciones_entrega-posicion.
      ls_item_data-usehieritm = '1'.
      ls_item_data-material = ls_posiciones_entrega-material.
      ls_item_data-dlv_qty = ls_posiciones_entrega-cantidad.
      ls_item_data-dlv_qty_imunit = ls_posiciones_entrega-cantidad.
      ls_item_data-fact_unit_denom = ls_posiciones_entrega-umvkn.
      ls_item_data-fact_unit_nom = ls_posiciones_entrega-umvkz.
      ls_item_data-sales_unit = ls_posiciones_entrega-vrkme.
      ls_item_data-batch = ls_posiciones_entrega-codigo_lote.

      ls_item_control-deliv_numb = ls_posiciones_entrega-cod_entrega.
      ls_item_control-deliv_item = ls_item_data-deliv_item.

      IF ls_posiciones_entrega-uecha IS NOT INITIAL.
        ls_item_control-del_item = 'X'.
      ELSE.
        ls_item_control-chg_delqty = 'X'.
      ENDIF.

      ls_vbpok-vbeln_vl = ls_posiciones_entrega-cod_entrega.
      ls_vbpok-posnr_vl = ls_item_data-deliv_item.
      ls_vbpok-vbeln = ls_posiciones_entrega-pedido.
      ls_vbpok-posnn = ls_posiciones_entrega-pos_ped.
      ls_vbpok-matnr = ls_posiciones_entrega-material.
      ls_vbpok-charg = ls_posiciones_entrega-codigo_lote.
      ls_vbpok-lfimg = ls_posiciones_entrega-cantidad.
      ls_vbpok-lgmng = ls_posiciones_entrega-cantidad.
      ls_vbpok-pikmg = ls_posiciones_entrega-cantidad.
      ls_vbpok-werks = ls_posiciones_entrega-centro.

      APPEND ls_vbpok TO lt_vbpok.
      CLEAR ls_vbpok.

      APPEND ls_item_control TO lt_item_control.
      APPEND ls_item_data TO lt_item_data.
    ENDIF.
  ENDLOOP.

  IF lt_item_data IS NOT INITIAL.
    CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
      EXPORTING
        header_data    = ls_header_data
        header_control = ls_header_control
        delivery       = delivery_no
        techn_control  = ls_techn_control
      TABLES
        item_data      = lt_item_data
        item_control   = lt_item_control
        return         = lt_return.

    READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
    IF sy-subrc = 0.
      o_bapi_return-type = 'E'.
      o_bapi_return-id = ls_return-id.
      o_bapi_return-number = ls_return-number.

      SELECT SINGLE text
        INTO o_bapi_return-message
        FROM t100
        WHERE sprsl = 'S'
        AND arbgb = o_bapi_return-id
        AND msgnr = o_bapi_return-number.

      ROLLBACK WORK.
    ELSE.

      COMMIT WORK AND WAIT.

      ls_vbkok-vbeln_vl = delivery_no.
      ls_vbkok-vbtyp_vl = 'J'.
      ls_vbkok-anzpk = i_cabecera_entrega-num_bultos.
      ls_vbkok-volum = i_cabecera_entrega-volumen.
      ls_vbkok-voleh = i_cabecera_entrega-unidad_vol.
      ls_vbkok-kzapk = 'X'.
      ls_vbkok-kzvol = 'X'.


      IF i_cabecera_entrega-flag_tipo = 'X'.
        ls_vbkok-wabuc = 'X'.
      ELSE.
        ls_vbkok-wabuc = ''.
      ENDIF.

      ls_vbkok-komue = 'X'.

      IF lt_vbpok IS NOT INITIAL.
        CALL FUNCTION 'WS_DELIVERY_UPDATE'
          EXPORTING
            vbkok_wa       = ls_vbkok
            delivery       = delivery_no
            update_picking = 'X'
*           if_database_update_1   = '1'
*           if_error_messages_send = 'X'
          TABLES
            vbpok_tab      = lt_vbpok
            prot           = lt_prot.
        IF sy-subrc = 0.
          COMMIT WORK AND WAIT.

*      CLEAR: ls_vbkok, lt_prot.
*      ls_vbkok-wabuc = 'X'.
*      ls_vbkok-vbeln_vl = ls_posiciones_entrega-cod_entrega.
*
**Realizamos la salida de mercancias
*      IF i_cabecera_entrega-flag_tipo = 'X'.
*        CALL FUNCTION 'WS_DELIVERY_UPDATE'
*          EXPORTING
*            vbkok_wa = ls_vbkok
*            delivery = delivery_no
*          TABLES
**           vbpok_tab              = lt_vbpok
*            prot     = lt_prot.
*
*        IF sy-subrc = 0.
*          COMMIT WORK.
*        ENDIF.

*      ENDIF.

*Devolvemos mensaje de exito
          o_bapi_return-type = 'S'.
          o_bapi_return-id = 'Z_WM'.
          o_bapi_return-number = '011'.

          CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
            EXPORTING
              id         = o_bapi_return-id
              number     = o_bapi_return-number
              language   = sy-langu
              textformat = 'ASC'
            IMPORTING
              message    = o_bapi_return-message.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.

*No hay posiciones con picking
    o_bapi_return-type = 'W'.
    o_bapi_return-id = 'Z_WM'.
    o_bapi_return-number = '022'.

    CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
      EXPORTING
        id         = o_bapi_return-id
        number     = o_bapi_return-number
        language   = sy-langu
        textformat = 'ASC'
      IMPORTING
        message    = o_bapi_return-message.

  ENDIF.

ENDFUNCTION.
