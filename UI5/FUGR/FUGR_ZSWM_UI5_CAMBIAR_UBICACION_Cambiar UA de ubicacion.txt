FUNCTION zswm_ui5_cambiar_ubicacion.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     VALUE(OPERARIO) TYPE  ZLNUM_OPER OPTIONAL
*"     VALUE(LGTYP) TYPE  LGTYP OPTIONAL
*"     VALUE(LGPLA) TYPE  LGPLA OPTIONAL
*"     VALUE(TT_BULTOS) TYPE  ZSWM_READ_EXIDV_STR_TT OPTIONAL
*"     VALUE(RT_BULTOS) TYPE  ZSWM_READ_EXIDV_STR OPTIONAL
*"     VALUE(GRUPO_DEFECTO) TYPE  QCODEGRP OPTIONAL
*"     VALUE(CODIGO_DEFECTO) TYPE  QCODE OPTIONAL
*"     VALUE(LGPLA_REP) TYPE  LGPLA OPTIONAL
*"  EXPORTING
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"     VALUE(OK) TYPE  FLAG
*"----------------------------------------------------------------------
  PERFORM break USING 'ZSWM_UI5_CAMBIAR_UBICACION'.
  DATA: data_u            TYPE zswm_data_ui5_eeeoo_str,
        r_param           TYPE zswm_data_ui5_param_str,
        r_funcionalidades TYPE zswm_data_ui5_func_str.

  CALL FUNCTION 'ZSWM_GET_DATA_USER_UI5'
    EXPORTING
      uname      = uname
      statu      = 'X'
      no_gen_log = abap_true
      tcode      = tcode
    IMPORTING
      data_user  = data_u
*     ERROR      =
*     TT_LOG     =
    .
  data_u-operario = operario.
  IF tt_bultos[] IS INITIAL.
    APPEND rt_bultos TO tt_bultos.
  ENDIF.
  DATA cadena TYPE barcode.
  IF lgtyp IS INITIAL.
    SELECT lgtyp INTO lgtyp FROM lagp UP TO 1 ROWS
                                      WHERE lgnum EQ data_u-lgnum
                                        AND lgpla EQ lgpla.
    ENDSELECT.
  ENDIF.
  TRANSLATE lgpla TO UPPER CASE.
  cadena = lgpla.
*  TRANSLATE cadena to UPPER CASE.
  DATA r_ubicacion TYPE zswm_ui5_lagp_str.
  CALL FUNCTION 'ZSWM_CHECK_UI5_BIN'
    EXPORTING
      tcode         = tcode
*     UNAME         = SY-UNAME
*     cadena        =
      lgpla         = lgpla
    IMPORTING
*     OK            =
      error         = error
      tt_log        = tt_log
      reg_ubicacion = r_ubicacion.

  IF error NE abap_true.
    IF r_ubicacion-skzse EQ abap_true
    OR r_ubicacion-skzsi EQ abap_true.
      MOVE abap_true TO error.
*      Ubicación &/&/& bloqueada para entradas
      PERFORM mensaje USING 'E' 'ZSWM_UI5' '098' data_u-lgnum r_ubicacion-lgtyp r_ubicacion-lgpla space CHANGING tt_log[].
    ENDIF.
    IF error NE abap_true.
*     -----------------------------------------------------------------------------------------------*
*     add jtm 13.11.2022
      LOOP AT tt_bultos INTO rt_bultos.
        SELECT SINGLE * INTO @DATA(lein) FROM lein WHERE lenum EQ @rt_bultos-lenum.
        CHECK lein-lgtyp EQ 'MUE'
          AND tcode      EQ 'ZWM_RF_UI5_PIN_002'.
        MOVE abap_true TO error.
*        El bulto & está en el picking de la entrega &. No se puede cambiar ubica.
        DATA lenum_aux(20).
        DATA vbeln_aux(10).
        lenum_aux = |{ rt_bultos-lenum ALPHA = OUT }|.
        vbeln_aux = |{ lein-lgpla ALPHA = OUT }|.
        PERFORM mensaje USING 'E' 'ZSWM_UI5' '193' lenum_aux vbeln_aux space space CHANGING tt_log[].
        EXIT.
      ENDLOOP.
      IF error NE abap_true.
*     fin de add jtm 13.11.2022
*     -----------------------------------------------------------------------------------------------*

        LOOP AT tt_bultos INTO rt_bultos.
          SELECT SINGLE * INTO lein FROM lein WHERE lenum EQ rt_bultos-lenum.
          DATA tanum TYPE ltak-tanum.
          CHECK lein-lgtyp NE lgtyp
             OR lein-lgpla NE lgpla.
          IF lgpla EQ lgpla_rep AND rt_bultos-bestq NE 'Q'.
            PERFORM reproceso USING data_u 'Q' grupo_defecto codigo_defecto lgpla_rep CHANGING rt_bultos error tt_log ok.
          ELSE.
            PERFORM cambiar_ubicacion_ua USING rt_bultos-lenum rt_bultos-letyp '999' lgtyp lgpla data_u CHANGING rt_bultos tanum error tt_log ok.
          ENDIF.
        ENDLOOP.
      ENDIF. " add jtm 13.11.2022
    ENDIF.
  ENDIF.



ENDFUNCTION.
