FUNCTION zswm_save_invetory_ui5.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  SY-UNAME DEFAULT SY-UNAME
*"     VALUE(OPERARIO) TYPE  ZLNUM_OPER OPTIONAL
*"     VALUE(LGTYP) TYPE  LGTYP OPTIONAL
*"     VALUE(LGPLA) TYPE  LGPLA OPTIONAL
*"     VALUE(TT_REGISTROS) TYPE  ZSWM_READ_EXIDV_STR_TT OPTIONAL
*"  EXPORTING
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"     VALUE(IVNUM) TYPE  LVS_IVNUM
*"     VALUE(IVNUM_CLOSE) TYPE  FLAG
*"----------------------------------------------------------------------
  DATA:
    zswm_ui5_ivnum TYPE zswm_ui5_ivnum,
    zswm_ui5_ivpos TYPE zswm_ui5_ivpos,
    r_log          TYPE zswm_ui5_log_id.
  DATA: data_u            TYPE zswm_data_ui5_eeeoo_str,
        r_param           TYPE zswm_data_ui5_param_str,
        r_funcionalidades TYPE zswm_data_ui5_func_str.
  DATA : cont_10   TYPE i,
         cont_20   TYPE i,
         cont_30   TYPE i,
         error_aux TYPE flag.
  PERFORM break USING 'ZSWM_SAVE_INVETORY_UI5'.

  CALL FUNCTION 'ZSWM_GET_DATA_USER_UI5'
    EXPORTING
      uname      = uname
      statu      = 'X'
      no_gen_log = abap_true
      tcode      = tcode
    IMPORTING
      data_user  = data_u
*     ERROR      =
*     TT_LOG     =
    .
  data_u-operario = operario.
  SELECT * INTO TABLE @DATA(tt_lqua) FROM lqua WHERE lgnum EQ @data_u-lgnum
                                                 AND lgtyp EQ @lgtyp
                                                 AND lgpla EQ @lgpla.
  CLEAR zswm_ui5_ivnum.
  zswm_ui5_ivnum-lgnum  = data_u-lgnum.
  zswm_ui5_ivnum-lgtyp  = lgtyp.
  zswm_ui5_ivnum-lgpla  = lgpla.
  zswm_ui5_ivnum-mandt  = sy-mandt.
  zswm_ui5_ivnum-erdat  =
  zswm_ui5_ivnum-aedat  = sy-datum.
  zswm_ui5_ivnum-erzeit =
  zswm_ui5_ivnum-aezeit = sy-uzeit.
  zswm_ui5_ivnum-ernam  =
  zswm_ui5_ivnum-aenam  = uname.
  zswm_ui5_ivnum-operario = operario.

  SELECT SINGLE nukiv INTO @DATA(nukiv) FROM t340d WHERE lgnum EQ @data_u-lgnum.

  DATA: rango TYPE inri-object VALUE 'LVS_IVNUM'.

  CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      nr_range_nr             = nukiv
      object                  = rango
      quantity                = '1'
      subobject               = data_u-lgnum
*     TOYEAR                  = '0000'
      ignore_buffer           = 'X'
    IMPORTING
      number                  = zswm_ui5_ivnum-ivnum
*     QUANTITY                =
*     RETURNCODE              =
    EXCEPTIONS
      interval_not_found      = 1
      number_range_not_intern = 2
      object_not_found        = 3
      quantity_is_0           = 4
      quantity_is_not_1       = 5
      interval_overflow       = 6
      buffer_overflow         = 7
      OTHERS                  = 8.
  IF sy-subrc NE 0.
    MOVE abap_true TO error.
    PERFORM mensaje USING 'E' sy-msgid sy-msgno sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 CHANGING tt_log[].
  ELSE.
    DATA terminal TYPE xuterminal.
    CALL FUNCTION 'TERMINAL_ID_GET'
*     EXPORTING
*      USERNAME                   = SY-UNAME
      IMPORTING
        terminal             = terminal
      EXCEPTIONS
        multiple_terminal_id = 1
        no_terminal_found    = 2
        OTHERS               = 3.

    zswm_ui5_ivnum-terminal  =
    zswm_ui5_ivnum-aterminal = terminal.
*    INSERT INTO zswm_ui5_ivnum VALUES zswm_ui5_ivnum.
    DATA ivpos TYPE lvs_ivpos.
    ivpos = 0.
    LOOP AT tt_registros INTO DATA(rt_registros).
      CLEAR zswm_ui5_ivpos.
      MOVE-CORRESPONDING zswm_ui5_ivnum TO zswm_ui5_ivpos.
      MOVE-CORRESPONDING rt_registros   TO zswm_ui5_ivpos.
      ADD 1 TO ivpos.
      zswm_ui5_ivpos-ivpos = ivpos.
*     Caso A. La UA está en la ubicación que le corresponde ==> No hacemos nada
      IF zswm_ui5_ivpos-lgpla EQ lgpla.
        zswm_ui5_ivpos-status = '10'.
        zswm_ui5_ivpos-ok     = abap_true.
        ADD 1 TO cont_10.
      ELSE.
*        Caso B. La UA está ubicada en otra ubicación
        zswm_ui5_ivpos-status = '20'.
        DATA tanum TYPE ltak-tanum.
        SELECT SINGLE * INTO @DATA(lein) FROM lein WHERE lenum EQ @rt_registros-lenum.
        CALL FUNCTION 'L_TO_CREATE_MOVE_SU' DESTINATION 'NONE'
          EXPORTING
            i_lenum               = lein-lenum
            i_bwlvs               = '999'
*           I_LZNUM               = ' '
            i_nltyp               = lgtyp
*           I_NLBER               =
            i_nlpla               = lgpla
*           I_NPPOS               = ' '
            i_squit               = abap_true
            i_letyp               = lein-letyp
*           I_NIDRU               = ' '
*           I_DRUKZ               = ' '
*           I_LDEST               = ' '
*           I_UPDATE_TASK         = ' '
            i_commit_work         = 'X'
*           I_BNAME               = SY-UNAME
*           I_SOLEX               = 0
*           I_PERNR               = 0
*           I_BETYP               = ' '
*           I_BENUM               = ' '
          IMPORTING
            e_tanum               = tanum
*           E_NLTYP               =
*           E_NLBER               =
*           E_NLPLA               =
*           E_NPPOS               =
*                 TABLES
*           T_LTAP_MOVE_SU        =
*           T_LTAK                =
*           T_LTAP_VB             =
          EXCEPTIONS
            not_confirmed_to      = 1
            foreign_lock          = 2
            bwlvs_wrong           = 3
            betyp_wrong           = 4
            nltyp_wrong           = 5
            nlpla_wrong           = 6
            nltyp_missing         = 7
            nlpla_missing         = 8
            squit_forbidden       = 9
            lgber_wrong           = 10
            xfeld_wrong           = 11
            drukz_wrong           = 12
            ldest_wrong           = 13
            no_stock_on_su        = 14
            su_not_found          = 15
            update_without_commit = 16
            no_authority          = 17
            benum_required        = 18
            ltap_move_su_wrong    = 19
            lenum_wrong           = 20
*           OTHERS                = 21
            error_message         = 98
            OTHERS                = 99.
        IF sy-subrc EQ 0.
          ADD 1 TO cont_20.
          zswm_ui5_ivpos-ok = abap_true.
          zswm_ui5_ivpos-tanum = tanum.
          zswm_ui5_ivpos-tapos = '0001'.
        ELSE.
          MOVE-CORRESPONDING sy TO r_log.
          MESSAGE ID r_log-msgid TYPE r_log-msgty NUMBER r_log-msgno WITH r_log-msgv1 r_log-msgv2 r_log-msgv3 r_log-msgv4 INTO r_log-message.
          MOVE r_log-message TO zswm_ui5_ivpos-message.
          ADD 1 TO cont_20.
          MOVE abap_true TO error_aux.
        ENDIF.
      ENDIF.
      DELETE tt_lqua WHERE lenum EQ rt_registros-lenum.
      INSERT INTO zswm_ui5_ivpos VALUES zswm_ui5_ivpos.
    ENDLOOP.
    LOOP AT tt_lqua INTO DATA(rt_lqua).
      CLEAR zswm_ui5_ivpos.
      MOVE-CORRESPONDING zswm_ui5_ivnum TO zswm_ui5_ivpos.
      PERFORM read_lenum USING rt_lqua-lenum tcode data_u lgtyp lgpla CHANGING rt_registros error tt_log.
      CHECK error NE abap_true.
      MOVE-CORRESPONDING rt_registros   TO zswm_ui5_ivpos.
      ADD 1 TO ivpos.
      zswm_ui5_ivpos-ivpos  = ivpos.
      zswm_ui5_ivpos-status = '30'.
      zswm_ui5_ivpos-nc     = abap_true.
      DATA lgpla_aux TYPE lagp-lgpla.

      lgpla_aux = 'DIFPLANCHA'.
      SELECT SINGLE * INTO @DATA(r_lagp) FROM lagp WHERE lgnum EQ @data_u-lgnum
                                                     AND lgtyp EQ '999'
                                                     AND lgpla EQ @lgpla_aux.
      IF sy-subrc NE 0.
        SELECT SINGLE lgber INTO @DATA(lgber) FROM lagp
             WHERE lgnum EQ @data_u-lgnum
               AND lgtyp EQ '999'.
        CALL FUNCTION 'ZSWM_CREATE_BIN'
          EXPORTING
            lgnum = data_u-lgnum
            lgtyp = '999'
            lgpla = lgpla_aux
            lgber = lgber
            lptyp = 'GN'.
      ENDIF.
      SELECT SINGLE * INTO lein FROM lein WHERE lenum EQ rt_registros-lenum.
      CALL FUNCTION 'L_TO_CREATE_MOVE_SU' DESTINATION 'NONE'
        EXPORTING
          i_lenum               = lein-lenum
          i_bwlvs               = '999'
*         I_LZNUM               = ' '
          i_nltyp               = '999'
*         I_NLBER               =
          i_nlpla               = lgpla_aux
*         I_NPPOS               = ' '
          i_squit               = abap_true
          i_letyp               = lein-letyp
*         I_NIDRU               = ' '
*         I_DRUKZ               = ' '
*         I_LDEST               = ' '
*         I_UPDATE_TASK         = ' '
          i_commit_work         = 'X'
*         I_BNAME               = SY-UNAME
*         I_SOLEX               = 0
*         I_PERNR               = 0
*         I_BETYP               = ' '
*         I_BENUM               = ' '
        IMPORTING
          e_tanum               = tanum
*         E_NLTYP               =
*         E_NLBER               =
*         E_NLPLA               =
*         E_NPPOS               =
*                 TABLES
*         T_LTAP_MOVE_SU        =
*         T_LTAK                =
*         T_LTAP_VB             =
        EXCEPTIONS
          not_confirmed_to      = 1
          foreign_lock          = 2
          bwlvs_wrong           = 3
          betyp_wrong           = 4
          nltyp_wrong           = 5
          nlpla_wrong           = 6
          nltyp_missing         = 7
          nlpla_missing         = 8
          squit_forbidden       = 9
          lgber_wrong           = 10
          xfeld_wrong           = 11
          drukz_wrong           = 12
          ldest_wrong           = 13
          no_stock_on_su        = 14
          su_not_found          = 15
          update_without_commit = 16
          no_authority          = 17
          benum_required        = 18
          ltap_move_su_wrong    = 19
          lenum_wrong           = 20
*         OTHERS                = 21
          error_message         = 98
          OTHERS                = 99.
      IF sy-subrc EQ 0.
        ADD 1 TO cont_30.
        zswm_ui5_ivpos-ok    = abap_true.
        zswm_ui5_ivpos-tanum = tanum.
        zswm_ui5_ivpos-tapos = '0001'.
*        zswm_ui5_ivpos-xnull = abap_true.
      ELSE.
        MOVE-CORRESPONDING sy TO r_log.
        MESSAGE ID r_log-msgid TYPE r_log-msgty NUMBER r_log-msgno WITH r_log-msgv1 r_log-msgv2 r_log-msgv3 r_log-msgv4 INTO r_log-message.
        MOVE r_log-message TO zswm_ui5_ivpos-message.

        MOVE abap_true TO error_aux.
        ADD 1 TO cont_30.
      ENDIF.
      INSERT INTO zswm_ui5_ivpos VALUES zswm_ui5_ivpos.
    ENDLOOP.
    IF cont_10 > 0 OR cont_20 > 0 OR cont_30 > 0 AND error_aux NE abap_true.
      IF cont_10 > 0 AND cont_20 <= 0 AND cont_30 <= 0.
        ivnum_close                = abap_true.
      ENDIF.
      zswm_ui5_ivnum-ivnum_close = abap_true.
    ENDIF.
*   add jtm 10.11.2022-------------------------------------------------------------*
    DATA zswm_ui5_inv_ubi TYPE zswm_ui5_inv_ubi.
    SELECT * INTO zswm_ui5_inv_ubi UP TO 1 ROWS FROM zswm_ui5_inv_ubi
        WHERE lgnum EQ data_u-lgnum
          AND lgtyp EQ lgtyp
          AND lgpla EQ lgpla
          AND statu EQ 'I' .
    ENDSELECT.
    IF sy-subrc EQ 0.
      SELECT * INTO TABLE @DATA(tt_bultos_raros) FROM zswm_ui5_inv_upo
                                            WHERE lgnum  EQ @zswm_ui5_inv_ubi-lgnum
                                              AND lgtyp  EQ @zswm_ui5_inv_ubi-lgtyp
                                              AND lgpla  EQ @zswm_ui5_inv_ubi-lgpla
                                              AND etenr  EQ @zswm_ui5_inv_ubi-etenr.
      IF sy-subrc EQ 0.
        DESCRIBE TABLE tt_bultos_raros LINES DATA(n_bultos_raros).
        zswm_ui5_ivnum-nbnid = n_bultos_raros.
        update ZSWM_UI5_INV_upo set ivnum = zswm_ui5_ivnum-ivnum
                                            WHERE lgnum  EQ zswm_ui5_inv_ubi-lgnum
                                              AND lgtyp  EQ zswm_ui5_inv_ubi-lgtyp
                                              AND lgpla  EQ zswm_ui5_inv_ubi-lgpla
                                              AND etenr  EQ zswm_ui5_inv_ubi-etenr.
      ENDIF.
      UPDATE zswm_ui5_inv_ubi SET operario = operario
                                  aedat    = sy-datum
                                  aezet    = sy-uzeit
                                  aenam    = sy-uname
                                  statu    = 'F'
                                  ivnum    = zswm_ui5_ivnum-ivnum
                              WHERE lgnum  EQ zswm_ui5_inv_ubi-lgnum
                                AND lgtyp  EQ zswm_ui5_inv_ubi-lgtyp
                                AND lgpla  EQ zswm_ui5_inv_ubi-lgpla
                                AND etenr  EQ zswm_ui5_inv_ubi-etenr.

    ENDIF.
*   fin de add jtm 10.11.2022---------------------------------------------------------*

    INSERT INTO zswm_ui5_ivnum VALUES zswm_ui5_ivnum.
    COMMIT WORK AND WAIT.
    ivnum = zswm_ui5_ivnum-ivnum.

  ENDIF.
*10	Stock leído en ubicación correcta
*20	Stock leído en distinta ubicación
*30	Stock no leído

ENDFUNCTION.
