FUNCTION zswm_ui5_em_subcontratacion.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  XUBNAME DEFAULT SY-UNAME
*"     VALUE(OPERARIO) TYPE  ZLNUM_OPER OPTIONAL
*"     VALUE(AUFNR) TYPE  AUFNR OPTIONAL
*"     VALUE(TT_BULTOS_OF) TYPE  ZSWM_CHECK_PO_UI5_BULTOS_TT OPTIONAL
*"  EXPORTING
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"     VALUE(OK) TYPE  FLAG
*"----------------------------------------------------------------------
  DATA: data_user         TYPE  zswm_data_ui5_eeeoo_str,
        r_funcionalidades TYPE  zswm_data_ui5_func_str.
  data t_bultos_cu like ZSWM_UI5_NLPLA OCCURS 0 WITH HEADER LINE. " add jtm 21.03.2023 JTM AMPLWM002 Ubicar entradas RF

  DATA data_of TYPE zswm_check_ofs_ui5_str.
  CLEAR: error, tt_log[], data_of,
         t_bultos_cu[]. " add jtm 21.03.2023 JTM AMPLWM002 Ubicar entradas RF
  PERFORM break USING 'ZSWM_UI5_EM_SUBCONTRATACION'.
  CALL FUNCTION 'ZSWM_GET_DATA_USER_UI5'
    EXPORTING
      uname      = uname
      statu      = 'X'
      no_gen_log = abap_true
    IMPORTING
      data_user  = data_user
*     ERROR      =
*     TT_LOG     =
    .



  aufnr = |{ aufnr ALPHA = IN }|.
* add jtm 19.10.2022
* EM De subcontratación permite acceder por OF o por PO. Pero en el alta si se ha accedido por PO da error
  select SINGLE COUNT( * ) from caufv where aufnr eq aufnr.
  if sy-subrc ne 0.
      DATA: banfn TYPE eban-banfn,
            bnfpo TYPE eban-bnfpo.
      CLEAR: banfn, bnfpo.
      SELECT SINGLE banfn bnfpo INTO (banfn, bnfpo) FROM ekpo WHERE ebeln EQ aufnr+2.
      if sy-subrc eq 0 and banfn is not INITIAL.
        SELECT SINGLE rsnum INTO @DATA(rsnum) FROM eban WHERE banfn EQ @banfn
                                                          AND bnfpo EQ @bnfpo.
        if sy-subrc eq 0 and rsnum is not INITIAL.
           select aufnr into @data(aufnr_sub) from resb up to 1 ROWS where rsnum eq @rsnum.
           ENDSELECT.
           if sy-subrc eq 0.
              move aufnr_sub to aufnr.
           endif.
        endif.
      endif.
  endif.
* fin de add jtm 19.10.2022
  PERFORM es_pedido_of_delivery USING aufnr data_user CHANGING data_of error tt_log.

  IF error NE abap_true.
    DATA ctd_alta TYPE menge_d.
    ctd_alta = 0.
    LOOP AT tt_bultos_of INTO DATA(rt_bultos_of).
      DATA(sw_tabix) = sy-tabix.
      ADD rt_bultos_of-lfimg TO ctd_alta.
      rt_bultos_of-exidv = |{ rt_bultos_of-exidv ALPHA = IN }|.
      MODIFY tt_bultos_of FROM rt_bultos_of INDEX sw_tabix.
    ENDLOOP.
    DATA: mblnr TYPE mkpf-mblnr, mjahr LIKE mkpf-mjahr.
    PERFORM bapi_101_of USING data_user-lgnum data_of ctd_alta CHANGING error tt_log mblnr mjahr.
    IF error NE abap_true.
      PERFORM bapi_101_em TABLES t_bultos_cu " add jtm 21.03.2023 JTM AMPLWM002 Ubicar entradas RF
                            USING data_user-lgnum data_of tt_bultos_of CHANGING error tt_log.
    ENDIF.
    CASE error.
      WHEN abap_true.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*        IMPORTING
*          RETURN        =
          .
      WHEN OTHERS.
*       add jtm 21.03.2023 JTM AMPLWM002 Ubicar entradas RF
        if t_bultos_cu[] is not INITIAL.
           loop at t_bultos_cu.
             modify ZSWM_UI5_NLPLA from t_bultos_cu.
*              insert into ZSWM_UI5_NLPLA values t_bultos_cu.
           endloop.
        endif.
        CALL FUNCTION 'ZSWM_UI5_UBICAR_ENTRADA'
          EXPORTING
            lgnum         = data_user-lgnum
*           vbeln         =
            AUFNR         = aufnr
*           QRFC          = 'X'
*           COMMIT        = ''
*         IMPORTING
*           ERROR         =
*           TT_LOG        =
                  .

*       fin de add jtm 21.03.2023 JTM AMPLWM002 Ubicar entradas RF
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'
*       IMPORTING
*           RETURN        =
          .
        MOVE abap_true TO ok.
*       add jtm 01.09.2022
        DATA: tt_lenum TYPE zswm_print_exidv_lenum_tt,
              rt_lenum TYPE zswm_print_exidv_lenum_scr.
        CLEAR tt_lenum[].
        loop at tt_bultos_of into rt_bultos_of.

          rt_lenum-lenum = rt_bultos_of-exidv.
          COLLECT rt_lenum INTO tt_lenum.
        ENDLOOP.
        IF sy-subrc EQ 0.
          CALL FUNCTION 'ZSWM_PRINT_EXIDV'
            EXPORTING
              tcode    = tcode
              uname    = uname
              operario = operario
*             LENUM    =
              tt_lenum = tt_lenum
              mvttype  = 'A'
            IMPORTING
              error    = error
              tt_log   = tt_log_global.
        endif.
*        endif.
*       fin de add jtm 01.09.2022
      ENDCASE.
    ENDIF.




  ENDFUNCTION.
