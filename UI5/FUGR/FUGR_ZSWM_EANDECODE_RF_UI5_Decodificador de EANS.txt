FUNCTION zswm_eandecode_rf_ui5.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(BARCODE_IN) TYPE  BARCODE OPTIONAL
*"     VALUE(LGNUM) TYPE  LGNUM OPTIONAL
*"  EXPORTING
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"     VALUE(EXIDV) TYPE  EXIDV
*"     VALUE(LENUM) TYPE  LENUM
*"     VALUE(R_ETIQUETA_CLIENTE) TYPE  ZSWM_ETIQUETA_CARDEDEU_STR
*"     VALUE(LENUM2) TYPE  LENUM
*"----------------------------------------------------------------------
*-----------------------------------------------------------------------*
* Por este MF se debe pasar cuando se lea cualquier etiqueta de bulto
* Un CB leible por estos procesos puede tener las distintas medidas
* [0, 20] LENUM o EXIDV es la medida máxima estandar SAP
* Puede ser que existan etiquetas de 30 [Cardedeu] aunque se grabe luego
* con otro valor distinto. Por lo tanto permitiremos etiquetas de
* [0,20] o de 30 el resto damos por hecho que no puede ser
*-----------------------------------------------------------------------*
  DATA: barcode TYPE barcode.
  DATA: lifnr   TYPE lifnr.
*  data: dwerk   type ekko-dwerk.
* A) Quitamos espacio a la izquierda
  barcode = barcode_in.
  CHECK barcode IS NOT INITIAL.
  WHILE barcode+0(1) EQ space.
    barcode = barcode+1.
  ENDWHILE.
*  data(n_leng_Barcode) = strlen( barcode ).
* B) Hay un tratamiento según el proceso o transacción
  CASE tcode.
    WHEN c_barcode_inventa  " Inventario
      OR c_barcode_cambubi  " CAmbio de ubicación
      OR c_barcode_consuls  " Consulta
      OR c_barcode_unirpic.  " Unir picos
      PERFORM descrifrar USING barcode CHANGING exidv r_etiqueta_cliente error tt_log.
      PERFORM existe_o_no_existe USING exidv 'existe' lgnum CHANGING lenum error tt_log.
    WHEN c_barcode_traerbu. " Traer bultos
      PERFORM descrifrar USING barcode CHANGING exidv r_etiqueta_cliente error tt_log.
      PERFORM existe_o_no_existe USING exidv 'no_existe' lgnum CHANGING lenum error tt_log.
*       PERFORM bulto_externo USING exidv lenum LGNUM CHANGING ERROR TT_LOG.
    WHEN c_barcode_picking. " Expedir
      PERFORM descrifrar USING barcode CHANGING exidv r_etiqueta_cliente error tt_log.
      PERFORM existe_o_no_existe USING exidv 'existe' lgnum CHANGING lenum error tt_log.
    WHEN c_entrada_plan_gr. " Entradas grupo
      PERFORM descrifrar USING barcode CHANGING exidv r_etiqueta_cliente error tt_log.
      PERFORM existe_o_no_existe USING exidv 'no_existe' lgnum CHANGING lenum error tt_log.

    WHEN c_entrada_sin_ree. " Entrada sin reeti
      PERFORM descrifrar USING barcode CHANGING exidv r_etiqueta_cliente error tt_log.
      PERFORM existe_o_no_existe USING exidv 'no_existe' lgnum CHANGING lenum error tt_log.
      IF error NE abap_true AND r_etiqueta_cliente-lifnr IS NOT INITIAL.
        r_etiqueta_cliente-exidv = exidv.
        r_etiqueta_cliente-lifnr = lifnr.
      ENDIF.
    WHEN c_entrada_con_ree OR c_entrada_cm. " entradas con reetiquetaje
*     No hace falta en este proceso se introduce cantidades y el sistema es el que va creando los bultos
    WHEN c_barcode_aprov.   " Aprovisionamiento
      PERFORM descrifrar USING barcode CHANGING exidv r_etiqueta_cliente error tt_log.
      PERFORM existe_o_no_existe USING exidv 'existe' lgnum CHANGING lenum error tt_log.
      IF error = 'X'.
        CLEAR: error, tt_log[].
        RETURN.
      ENDIF.

    WHEN OTHERS.
  ENDCASE.

  lenum2 = lenum.
  CHECK error EQ abap_true.
  CLEAR : exidv, lenum, r_etiqueta_cliente.


ENDFUNCTION.
