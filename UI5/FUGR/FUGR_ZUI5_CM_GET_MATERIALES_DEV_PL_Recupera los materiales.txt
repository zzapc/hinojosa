FUNCTION zui5_cm_get_materiales_dev_pl.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(IR_MATNR) TYPE  RANGES_MATNR_TT OPTIONAL
*"     VALUE(IR_MAKTX) TYPE  FIP_T_MAKTX_RANGE OPTIONAL
*"     VALUE(IR_LARGO) TYPE  ZSUITT_CM_DIMENSIONES_RANGE OPTIONAL
*"     VALUE(IR_ALTO) TYPE  ZSUITT_CM_DIMENSIONES_RANGE OPTIONAL
*"     VALUE(IR_ANCHO) TYPE  ZSUITT_CM_DIMENSIONES_RANGE OPTIONAL
*"     VALUE(IR_LOTE) TYPE  RANGES_CHARG_TT OPTIONAL
*"     VALUE(IR_STATUS) TYPE  ZUI5R_CM_STATUS OPTIONAL
*"     VALUE(IR_KUNNR) TYPE  ZSUI_CM_KUNNR_RANGE_T OPTIONAL
*"     VALUE(IR_STOCK_LIBRE) TYPE  ZSUITT_CM_CANTIDAD_RANGE OPTIONAL
*"     VALUE(IR_STOCK_PEDIDO) TYPE  ZSUITT_CM_CANTIDAD_RANGE OPTIONAL
*"     VALUE(IR_STOCK_TOTAL) TYPE  ZSUITT_CM_CANTIDAD_RANGE OPTIONAL
*"     VALUE(IR_TPLST) TYPE  ZSUITT_CM_TPLST_RANGE OPTIONAL
*"     VALUE(I_CENTRO_MONTAJE) TYPE  WERKS_D OPTIONAL
*"     VALUE(I_ALMACEN_MONTAJE) TYPE  LGORT_D OPTIONAL
*"     VALUE(I_TKNUM) TYPE  TKNUM OPTIONAL
*"     VALUE(IR_MEDIDACAJA) TYPE  RSELOPTION OPTIONAL
*"     VALUE(I_TOP) TYPE  INT4 OPTIONAL
*"     VALUE(I_SKIP) TYPE  INT4 OPTIONAL
*"     VALUE(IT_ORDER) TYPE  /IWBEP/T_MGW_TECH_ORDER OPTIONAL
*"     VALUE(IR_TIPO_DEV) TYPE  ZSUITT_CM_TIPO_DEVOLUCION OPTIONAL
*"     VALUE(IR_TIPO_DEV_NAME) TYPE  RSELOPTION OPTIONAL
*"  EXPORTING
*"     VALUE(O_DATA) TYPE  ZSUITT_CM_MATERIALES_DEV_PLANT
*"     VALUE(O_RETURN) TYPE  BAPIRET2_T
*"----------------------------------------------------------------------
  DATA(vv_top) = i_top.


  DATA: v_str_largo TYPE char20,
        v_str_alto  TYPE char20,
        v_str_ancho TYPE char20,
        v_dimension TYPE char61.

  DATA: r_aufnr  TYPE RANGE OF aufnr,
        lv_aufnr TYPE aufnr.

  DATA: o_status      TYPE  zui5_cm_sm_status,
        o_status_text TYPE  ddtext.

  IF i_centro_montaje IS INITIAL.
    i_centro_montaje = '2000'.
    i_almacen_montaje = 'CM01'.
  ENDIF.

  SELECT DISTINCT a~matnr, b~maktx, a~werks, yhp~prole AS largo, yhp~prole_uom AS largo_uom, yhp~prowi AS ancho, yhp~prowi_uom AS ancho_uom, yhp~prohe AS alto, yhp~prohe_uom AS alto_uom,
  ka~zzkunnr AS kunnr, k~name1 AS kunnr_name, a~charg, t~lgort, ma~meins, mc~clabs AS stock_libre, mk~kalab AS stock_pedido, c~mmsta, ma~mstae,
  yhp2~tbqty AS cajas_pallets, yhp3~pmatn AS tipo_pallet, yhp3txt~maktx AS txt_tipo_pallet, mc~zzcm_montaje, mc~zzcm_defectuosa, mc~cspem, mc~clabs
  FROM t001l AS t
    INNER JOIN mcha AS a ON a~werks = t~werks
    INNER JOIN mara AS ma ON ma~matnr = a~matnr
    INNER JOIN makt AS b ON b~matnr = ma~matnr AND b~spras = @sy-langu
    INNER JOIN marc AS c ON c~matnr = a~matnr AND c~werks = a~werks
    LEFT JOIN mchb AS mc ON mc~matnr = a~matnr AND mc~werks = a~werks AND mc~lgort = t~lgort AND mc~charg = a~charg
    LEFT JOIN mska  AS mk ON mk~matnr = a~matnr AND mk~werks = a~werks AND mk~lgort = t~lgort AND mc~charg = a~charg
    LEFT JOIN yhp_idx_td100  AS yhp ON yhp~cuobj = c~cuobj
    LEFT JOIN yhp_idx_td151  AS yhp2 ON yhp2~cuobj = c~cuobj AND yhp2~shuty = 'UNIT'
    LEFT JOIN yhp_idx_td160  AS yhp3 ON yhp3~cuobj = c~cuobj
    LEFT JOIN makt AS yhp3txt ON yhp3txt~matnr = yhp3~pmatn AND yhp3txt~spras = @sy-langu
     LEFT JOIN mch1 AS ka ON ka~matnr = a~matnr AND ka~charg = a~charg
LEFT JOIN kna1 AS k ON k~kunnr = ka~zzkunnr
    INTO TABLE @DATA(lt_data)
    WHERE t~werks = @i_centro_montaje
    AND t~lgort = @i_almacen_montaje
    AND a~matnr IN @ir_matnr
    AND b~maktx IN @ir_maktx
    AND a~charg IN @ir_lote
*    AND a~zzkunnr IN @ir_kunnr
    AND yhp~prole IN @ir_largo
    AND yhp~prowi IN @ir_ancho
    AND yhp~prohe IN @ir_alto
    AND ( mc~clabs > 0 OR mk~kalab > 0 OR mc~cspem > 0 )
    AND yhp~prole IN @ir_largo
    AND yhp~prohe IN @ir_alto
    AND yhp~prowi IN @ir_ancho
    AND a~charg IN @ir_lote
    AND ka~zzkunnr IN @ir_kunnr
    AND mc~clabs IN @ir_stock_libre
    AND mk~kalab IN @ir_stock_pedido
    .
  IF sy-subrc = 0.
*      SORT lt_data BY (tv_sort).
*      DELETE ADJACENT DUPLICATES FROM lt_data.
*
*      IF i_top IS INITIAL.
*        vv_top = lines( lt_data ).
*      ENDIF.
    r_aufnr = VALUE #( FOR reg IN lt_data ( sign = 'I' option = 'EQ' low = COND #( WHEN strlen( reg-charg ) = 8 THEN |{ reg-charg ALPHA = IN }|
                                                                                   WHEN strlen( reg-charg ) = 9 THEN |{ reg-charg+1 ALPHA = IN }|
                                                                                   ELSE |{ reg-charg+2 ALPHA = IN }| ) ) ).

    "Consulta 01 CONSUMO REAL
    SELECT aufnr, matnr, menge
      FROM mseg
      INTO TABLE @DATA(lt_consumo_real)
      WHERE aufnr IN @r_aufnr
      AND lgort = '5000'.

    "Consulta 02 CONSUMO TEORICO
    SELECT aufnr, matnr, bdmng
      FROM resb
      INTO TABLE @DATA(lt_consumo_teorico)
      WHERE aufnr IN @r_aufnr
      AND lgort = '5000'.

    "Obtenemos las cajas por pallets de la orden
*        Entrar en CAUFV con valor de AUFNR
*        Recuperar AUFPL
*        Entrar en AFVC con AUFPL y recuperar APLZL para el mayor VORNR
*        Entrar en AFVV con AUFPL y APLZL y recuperar UMREZ
    SELECT a~aufnr, b~vornr, c~umrez
      FROM caufv AS a
      INNER JOIN afvc AS b ON b~aufpl = a~aufpl
      INNER JOIN afvv AS c ON b~aplzl = c~aplzl AND b~aufpl = c~aufpl
      INTO TABLE @DATA(lt_cajas_pallets)
      WHERE aufnr IN @r_aufnr
      ORDER BY  a~aufnr, b~vornr DESCENDING.
    IF sy-subrc = 0.
      DELETE ADJACENT DUPLICATES FROM lt_cajas_pallets COMPARING aufnr.
    ENDIF.

    "Recuperamos descriptivo tipo devolución
    SELECT domvalue_l, ddtext
      FROM dd07t
      INTO TABLE @DATA(lt_tipo_dev)
      WHERE domname = 'ZUI5D_CM_TIPO_DEVOLUCION'.

    "Recuperamos motivos de pedidos Material Lote
    SELECT a~matnr, a~charg, b~erdat, b~augru, c~bezei
      FROM vbap AS a
      INNER JOIN vbak AS b ON b~vbeln = a~vbeln AND b~vbtyp = 'H'
      LEFT JOIN tvaut AS c ON c~augru = b~augru
      INTO TABLE @DATA(lt_augru_vbak)
      FOR ALL ENTRIES IN @lt_data
      WHERE a~matnr = @lt_data-matnr
      AND a~charg = @lt_data-charg
      AND b~augru NE @space.
    IF sy-subrc = 0.
      SORT lt_augru_vbak BY matnr charg erdat DESCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_augru_vbak COMPARING matnr charg erdat.
    ENDIF.


    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(<ls_data>)." FROM i_skip TO  vv_top.

      CALL FUNCTION 'ZUI5_CM_STATUS_LOTE'
        EXPORTING
          i_werks       = <ls_data>-werks
          i_lgort       = <ls_data>-lgort
          i_charg       = <ls_data>-charg
        IMPORTING
          o_status      = o_status
          o_status_text = o_status_text.

      IF ( o_status IS INITIAL OR o_status = '00' OR o_status = '01' ) OR ( o_status NOT IN ir_status AND ir_status IS NOT INITIAL ).
        CONTINUE.

      ENDIF.

      "Comprobamos si el lote está regularizado pertenece al cliente filtrado por IR_KUNNR el campo ZZKUNR
      IF ( <ls_data>-charg(1) = 'R' OR <ls_data>-charg(2) = 'AR' ) AND  ( ir_kunnr IS NOT INITIAL AND <ls_data>-kunnr NOT IN ir_kunnr ).
        CONTINUE.
      ENDIF.

      WRITE <ls_data>-largo TO v_str_largo LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
      WRITE <ls_data>-alto  TO v_str_alto  LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.
      WRITE <ls_data>-ancho TO v_str_ancho LEFT-JUSTIFIED NO-GROUPING DECIMALS 0.

      v_dimension = |{ v_str_largo }x{ v_str_alto }x{ v_str_ancho }|.

      IF v_dimension NOT IN ir_medidacaja AND ir_medidacaja IS NOT INITIAL.
        CONTINUE.
      ENDIF.



      APPEND INITIAL LINE TO o_data ASSIGNING FIELD-SYMBOL(<ls_o_data>).

      MOVE-CORRESPONDING <ls_data> TO <ls_o_data>.
      <ls_o_data>-stock_total = <ls_o_data>-stock_libre + <ls_o_data>-stock_pedido + <ls_data>-cspem .
      <ls_o_data>-status_lote = o_status.
      <ls_o_data>-status_text = o_status_text.

      <ls_o_data>-dimensiones = v_dimension.

      "Marcamos estado si esta bloqueado por maestro
      IF ( <ls_data>-mmsta NE '00' AND <ls_data>-mmsta IS NOT INITIAL ) OR ( <ls_data>-mstae NE '00' AND <ls_data>-mstae IS NOT INITIAL ).
        <ls_o_data>-estado = 'X'.
      ENDIF.

      "Pallet por defecto
      CASE strlen( <ls_o_data>-charg ).
        WHEN 8.
          lv_aufnr =  |{ <ls_o_data>-charg ALPHA = IN }|.
        WHEN 9.
          lv_aufnr =  |{ <ls_o_data>-charg+1 ALPHA = IN }|.
        WHEN OTHERS.
          lv_aufnr =  |{ <ls_o_data>-charg+2 ALPHA = IN }|.
      ENDCASE.
      READ TABLE lt_consumo_real INTO DATA(ls_consumo_real) WITH KEY aufnr = lv_aufnr.
      IF sy-subrc = 0.
        <ls_o_data>-tipo_pallet = ls_consumo_real-matnr.
*        <ls_o_data>-cajas_pallets = ceil( ls_consumo_real-menge ).
      ELSE.
        READ TABLE lt_consumo_teorico INTO DATA(ls_consumo_teorico) WITH KEY aufnr = lv_aufnr.
        IF sy-subrc = 0.
          <ls_o_data>-tipo_pallet = ls_consumo_teorico-matnr.
*          <ls_o_data>-cajas_pallets = ceil( ls_consumo_teorico-bdmng ).
        ENDIF.
      ENDIF.

      READ TABLE lt_cajas_pallets INTO DATA(ls_cajas_pallet) WITH KEY aufnr = lv_aufnr..
      IF sy-subrc = 0.
        <ls_o_data>-cajas_pallets = ls_cajas_pallet-umrez.
      ENDIF.

      "Añadimos tantos registros como stock tengamos
      READ TABLE lt_tipo_dev INTO DATA(ls_tipo_dev) WITH KEY domvalue_l = 'LI'.
      IF sy-subrc = 0.
        <ls_o_data>-tipo_devolucion = 'LI'.
        <ls_o_data>-tipo_devolucion_name = ls_tipo_dev-ddtext.
      ENDIF.
      IF <ls_data>-zzcm_montaje NE 0.
        APPEND INITIAL LINE TO o_data ASSIGNING FIELD-SYMBOL(<ls_o_data2>).
        MOVE-CORRESPONDING <ls_o_data> TO <ls_o_data2>.
        <ls_o_data2>-stock_libre = <ls_data>-zzcm_montaje.

        READ TABLE lt_tipo_dev INTO ls_tipo_dev WITH KEY domvalue_l = 'ME'.
        IF sy-subrc = 0.
          <ls_o_data2>-tipo_devolucion = 'ME'.
          <ls_o_data2>-tipo_devolucion_name = ls_tipo_dev-ddtext.
        ENDIF.

        CLEAR: <ls_o_data2>-tipo_pallet, <ls_o_data2>-cajas_pallets.
      ENDIF.
      IF <ls_data>-zzcm_defectuosa NE 0.
        APPEND INITIAL LINE TO o_data ASSIGNING <ls_o_data2>.
        MOVE-CORRESPONDING <ls_o_data> TO <ls_o_data2>.
        <ls_o_data2>-stock_libre = <ls_data>-zzcm_defectuosa.

        READ TABLE lt_tipo_dev INTO ls_tipo_dev WITH KEY domvalue_l = 'DF'.
        IF sy-subrc = 0.
          <ls_o_data2>-tipo_devolucion = 'DF'.
          <ls_o_data2>-tipo_devolucion_name = ls_tipo_dev-ddtext.
        ENDIF.

        CLEAR: <ls_o_data2>-tipo_pallet, <ls_o_data2>-cajas_pallets.
      ENDIF.

      DATA(lv_devolucion) = <ls_data>-cspem - ( <ls_data>-zzcm_montaje + <ls_data>-zzcm_defectuosa ) .
      IF lv_devolucion NE 0.
        APPEND INITIAL LINE TO o_data ASSIGNING <ls_o_data2>.
        MOVE-CORRESPONDING <ls_o_data> TO <ls_o_data2>.
        <ls_o_data2>-stock_libre = <ls_data>-cspem - ( <ls_data>-zzcm_montaje + <ls_data>-zzcm_defectuosa ) .

        "Recuperamos motivo de la devolución
        READ TABLE lt_augru_vbak INTO DATA(ls_augru_vbak) WITH KEY matnr = <ls_o_data>-matnr charg = <ls_o_data>-charg.
        IF sy-subrc = 0.
          <ls_o_data2>-zzaugru = ls_augru_vbak-augru.
          <ls_o_data2>-zzaugru_name = ls_augru_vbak-bezei.
        ENDIF.

        READ TABLE lt_tipo_dev INTO ls_tipo_dev WITH KEY domvalue_l = 'DV'.
        IF sy-subrc = 0.
          <ls_o_data2>-tipo_devolucion = 'DV'.
          <ls_o_data2>-tipo_devolucion_name = ls_tipo_dev-ddtext.
        ENDIF.

      ENDIF.
    ENDLOOP.

    "Borramos los registros filtrados por el tipo de devolución
    IF ir_tipo_dev IS NOT INITIAL.
      DELETE o_data WHERE tipo_devolucion NOT IN ir_tipo_dev.
    ENDIF.

    IF ir_tipo_dev_name IS NOT INITIAL.
      DELETE o_data WHERE tipo_devolucion_name NOT IN ir_tipo_dev_name.
    ENDIF.

    "Borramos los registros stock_libre = 0.
    DELETE o_data WHERE stock_libre = 0.

  ENDIF.


ENDFUNCTION.
