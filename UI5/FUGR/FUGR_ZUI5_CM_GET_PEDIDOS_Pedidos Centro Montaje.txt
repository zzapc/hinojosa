FUNCTION zui5_cm_get_pedidos.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_WERKS) TYPE  WERKS_D OPTIONAL
*"     VALUE(I_LGORT) TYPE  LGORT_D OPTIONAL
*"     VALUE(I_EBELN) TYPE  EBELN OPTIONAL
*"     VALUE(I_EBELP) TYPE  EBELP OPTIONAL
*"     VALUE(IR_WERKS) TYPE  RANGE_T_WERKS_D OPTIONAL
*"     VALUE(IR_LGORT) TYPE  RANGE_T_LGORT_D OPTIONAL
*"     VALUE(IR_LGORT_DEST) TYPE  RANGE_T_LGORT_D OPTIONAL
*"     VALUE(IR_WERKS_DEST) TYPE  RANGE_T_WERKS_D OPTIONAL
*"     VALUE(IR_MATNR) TYPE  RANGES_MATNR_TT OPTIONAL
*"     VALUE(IR_MAKTX) TYPE  FIP_T_MAKTX_RANGE OPTIONAL
*"     VALUE(IR_LARGO) TYPE  ZSUITT_CM_DIMENSIONES_RANGE OPTIONAL
*"     VALUE(IR_ALTO) TYPE  ZSUITT_CM_DIMENSIONES_RANGE OPTIONAL
*"     VALUE(IR_ANCHO) TYPE  ZSUITT_CM_DIMENSIONES_RANGE OPTIONAL
*"     VALUE(IR_BEDAT) TYPE  WPOCS_BEDAT_RANGE_TAB OPTIONAL
*"     VALUE(IR_EBELN) TYPE  RANGE_EBELN_IN_T OPTIONAL
*"     VALUE(IR_EBELP) TYPE  FIP_T_EBELP_RANGE OPTIONAL
*"     VALUE(IR_EINDT) TYPE  WPOCS_BEDAT_RANGE_TAB OPTIONAL
*"     VALUE(IR_BUDAT_MKPF) TYPE  WPOCS_BEDAT_RANGE_TAB OPTIONAL
*"     VALUE(IR_KUNNR) TYPE  RANGE_KUNNR_TAB OPTIONAL
*"     VALUE(IR_KUNNR_NAME) TYPE  ZSUIS_CM_NOMBRES_RANG OPTIONAL
*"     VALUE(IR_CHARG) TYPE  ZPPR_CHARG_D OPTIONAL
*"     VALUE(IR_ZZMATPAL) TYPE  RANGES_MATNR_TT OPTIONAL
*"     VALUE(IR_ZZMATPAL_DESC) TYPE  FIP_T_MAKTX_RANGE OPTIONAL
*"  EXPORTING
*"     VALUE(E_RETURN) TYPE  BAPIRET2_T
*"     VALUE(E_DATA) TYPE  ZSCMTT_PEDIDOS_TRASLADO
*"----------------------------------------------------------------------
  DATA: lv_fecha  TYPE datum,
        v_lote_2d TYPE charg_d,
        v_lote_3d TYPE charg_d.

  IF i_werks IS NOT INITIAL.
    APPEND INITIAL LINE TO ir_werks ASSIGNING FIELD-SYMBOL(<ls_werks>).
    <ls_werks>-sign = 'I'.
    <ls_werks>-option = 'EQ'.
    <ls_werks>-low = i_werks.

  ENDIF.

  IF i_lgort IS NOT INITIAL.
    APPEND INITIAL LINE TO ir_lgort ASSIGNING FIELD-SYMBOL(<ls_lgort>).
    <ls_lgort>-sign = 'I'.
    <ls_lgort>-option = 'EQ'.
    <ls_lgort>-low = i_lgort.

  ENDIF.

  IF i_ebeln IS NOT INITIAL.
    APPEND INITIAL LINE TO ir_werks ASSIGNING FIELD-SYMBOL(<ls_ebeln>).
    <ls_ebeln>-sign = 'I'.
    <ls_ebeln>-option = 'EQ'.
    <ls_ebeln>-low = i_ebeln.

  ENDIF.

  IF i_ebelp IS NOT INITIAL.
    APPEND INITIAL LINE TO ir_werks ASSIGNING FIELD-SYMBOL(<ls_ebelp>).
    <ls_ebelp>-sign = 'I'.
    <ls_ebelp>-option = 'EQ'.
    <ls_ebelp>-low = i_ebelp.

  ENDIF.

  lv_fecha = sy-datum - 31.

  SELECT a~reswk, b~reslo, b~werks, b~lgort, a~bedat, b~matnr, d~maktx, yhp~length  AS largo, yhp~height_uom AS largo_uom, yhp~width  AS ancho, yhp~width_uom AS ancho_uom, yhp~height  AS alto, yhp~height_uom AS alto_uom,
    a~ebeln, b~ebelp, e~eindt, b~menge, b~meins, a~kunnr, b~zzmatpal, mk~maktx AS zzmatpal_desc, b~zzcantpal, b~zzcanxpal, " m~budat_mkpf,
    e~charg, k~name1 AS kunnr_name
    FROM ekko AS a
    INNER JOIN ekpo AS b ON b~ebeln = a~ebeln
    INNER JOIN makt AS d ON d~matnr = b~matnr AND d~spras = @sy-langu
    INNER JOIN marc AS c ON c~matnr = b~matnr AND c~werks = b~werks
    LEFT JOIN eket AS e ON e~ebeln = a~ebeln AND e~ebelp = b~ebelp
    LEFT JOIN yhp_idx_td151  AS yhp ON yhp~cuobj = c~cuobj AND yhp~shuty = 'BASE_BOX'
    LEFT JOIN kna1 AS k ON k~kunnr = a~kunnr
    LEFT JOIN makt AS mk ON mk~matnr = b~zzmatpal AND mk~spras = @sy-langu
    INTO TABLE @DATA(lt_data)
    WHERE a~reswk IN @ir_werks
    AND b~reslo IN @ir_lgort
    AND b~lgort IN @ir_lgort_dest
    AND b~werks IN @ir_werks_dest
    AND a~bedat IN @ir_bedat
    AND d~maktx IN @ir_maktx
    AND b~matnr IN @ir_matnr
    AND yhp~length IN @ir_largo
    AND yhp~width IN @ir_ancho
    AND yhp~height IN @ir_alto
    AND a~ebeln IN @ir_ebeln
    AND b~ebelp IN @ir_ebelp
    AND e~eindt IN @ir_eindt
    AND a~kunnr IN @ir_kunnr
    AND k~name1 IN @ir_kunnr_name
    AND e~charg IN @ir_charg
    AND b~zzmatpal IN @ir_zzmatpal
    AND mk~maktx IN @ir_zzmatpal_desc
    AND a~aedat >= @lv_fecha
    AND b~loekz = @space.

  IF sy-subrc = 0.

    "Recuperamos datos material cliente
    SELECT matnr, kunnr, kdmat
      FROM knmt
      INTO TABLE @DATA(lt_knmt)
      FOR ALL ENTRIES IN @lt_data
      WHERE matnr = @lt_data-matnr
      AND kunnr = @lt_data-kunnr.

    "Recuperamos estados de la Entrega Entrante GBSTK = 'A' o GBSTK = 'C'
    SELECT a~ebeln, a~ebelp, b~vbeln, c~gbstk, d~ddtext
      FROM  ekbe AS a
      INNER JOIN vbfa AS b ON b~vbelv = a~belnr AND b~vbtyp_n = '7' " AND b~posnv = a~ebelp
      INNER JOIN vbuk AS c ON c~vbeln = b~vbeln
      INNER JOIN dd07t AS d ON d~domname = 'STATV' AND d~domvalue_l = c~gbstk AND d~ddlanguage = @sy-langu
      INTO TABLE @DATA(lt_estados)
      FOR ALL ENTRIES IN @lt_data
      WHERE a~ebeln = @lt_data-ebeln
      AND a~ebelp = @lt_data-ebelp
      AND a~bewtp = 'L'.

    MOVE-CORRESPONDING lt_data TO e_data.

    LOOP AT e_data ASSIGNING FIELD-SYMBOL(<ls_data>).
      "Asignamos Material de cliente. si existe más de uno lo mostramos vacio
      LOOP AT lt_knmt INTO DATA(ls_knmt) WHERE matnr = <ls_data>-matnr AND kunnr = <ls_data>-kunnr.
        <ls_data>-kdmat = ls_knmt-kdmat.
        IF sy-tabix > 1.
          CLEAR <ls_data>-kdmat.
          EXIT.
        ENDIF.
      ENDLOOP.

      "Asignamos Estado entrega
      READ TABLE lt_estados INTO DATA(ls_estado) WITH KEY ebeln = <ls_data>-ebeln ebelp = <ls_data>-ebelp.
      IF sy-subrc = 0.
        <ls_data>-entrega_entrante = ls_estado-vbeln.
        <ls_data>-estado_ent_entrante = ls_estado-gbstk.
        <ls_data>-estado_ent_entrante_text = ls_estado-ddtext.
      ENDIF.

      <ls_data>-dimensiones = |{ <ls_data>-alto && 'x' && <ls_data>-ancho && 'x' && <ls_data>-largo }|.

      CALL FUNCTION 'ZUI5_CM_STATUS_LOTE'
        EXPORTING
          i_werks       = <ls_data>-werks
          i_lgort       = <ls_data>-lgort
          i_charg       = <ls_data>-charg
        IMPORTING
          o_status      = <ls_data>-status
          o_status_text = <ls_data>-status_text
          o_lote_2d     = v_lote_2d
          o_lote_3d     = v_lote_3d.

      " Los lotes 3D tienen como fecha de contabilización la de su lote 2D.
      " Comprobamos si el lote de la iteración es 3D.
      IF v_lote_3d EQ <ls_data>-charg.
        " Estamos procesando un Lote 3D.
        SELECT SINGLE ersda FROM mchb INTO @<ls_data>-budat_mkpf
          WHERE charg EQ @v_lote_2d.
      ELSE.
        SELECT SINGLE ersda FROM mchb INTO @<ls_data>-budat_mkpf
           WHERE charg EQ @<ls_data>-charg.
      ENDIF.
    ENDLOOP.

    "Eliminamos si filtramos por fecha contabilización
    IF ir_budat_mkpf IS NOT INITIAL.
      DELETE e_data WHERE budat_mkpf NOT IN ir_budat_mkpf.
    ENDIF.
  ENDIF.

ENDFUNCTION.
