FUNCTION zui5_cm_change_pos_entrega.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_VBELN) TYPE  VBELN_VL
*"     VALUE(I_SALESDOCUMENT) TYPE  VBELN_VA
*"     VALUE(I_HEADER) TYPE  ZSUIS_CM_ENTREGAS OPTIONAL
*"     VALUE(I_POSITIONS) TYPE  ZSUITT_CM_POSICIONES_ENTREGA OPTIONAL
*"  EXPORTING
*"     VALUE(E_RETURN) TYPE  BAPIRET2_T
*"     VALUE(E_PR) TYPE  VBELN_VL
*"  TABLES
*"      IT_ITEMS_DEL STRUCTURE  BAPISDITM OPTIONAL
*"      IT_SCHEDULE_DEL STRUCTURE  BAPISCHDL OPTIONAL
*"----------------------------------------------------------------------
  DATA: header_data          TYPE  bapiobdlvhdrchg,
        header_control       TYPE  bapiobdlvhdrctrlchg,
        delivery             TYPE  bapiobdlvhdrchg-deliv_numb,
        item_data            TYPE TABLE OF  bapiobdlvitemchg,
        lt_return            TYPE bapiret2_t,
        new_item_data        TYPE TABLE OF  bapiobdlvitem,
        item_control         TYPE TABLE OF  bapiobdlvitemctrlchg,
        lv_date_vbep         TYPE datum,
        existe_new_positions TYPE flag.

  DATA: r_posnr     TYPE RANGE OF posnr_va,
        r_posnr_new TYPE RANGE OF posnr_va.
  CONSTANTS: v_veces TYPE i VALUE 10.

  CLEAR: e_return, existe_new_positions.

  SELECT vbeln, posnr, kwmeng, vrkme, charg, umvkz, umvkn, matnr
    FROM vbap
    INTO TABLE @DATA(lt_posiciones)
    WHERE vbeln = @i_salesdocument.
  IF sy-subrc = 0.
    "Borramos las posiciones marcadas para borrar en entrega y pedido
    r_posnr = VALUE #( FOR pos IN it_items_del ( sign = 'I' option = 'EQ' low = pos-itm_number ) ).

    IF r_posnr IS NOT INITIAL.
      DELETE lt_posiciones WHERE posnr IN r_posnr.
    ENDIF.

    SELECT a~vbeln, a~posnr, a~vgbel, a~vgpos, b~wbstk, a~lfimg, a~lgmng, a~lfimg_flo, a~lgmng_flo, a~umvkz, a~umvkn , a~umrev, a~charg, c~vbtyp
        FROM lips AS a
        INNER JOIN vbuk AS b ON b~vbeln = a~vbeln
        INNER JOIN likp AS c ON c~vbeln = b~vbeln
        INTO TABLE @DATA(lt_lips)
        WHERE a~vbeln = @i_vbeln.
    IF sy-subrc = 0.
      header_data-deliv_numb = i_vbeln.
      LOOP AT lt_posiciones INTO DATA(ls_pos_ped) .
        LOOP AT lt_lips INTO DATA(ls_lips)  WHERE vgbel = ls_pos_ped-vbeln AND vgpos = ls_pos_ped-posnr.
          APPEND INITIAL LINE TO item_data ASSIGNING FIELD-SYMBOL(<ls_item>).
          <ls_item>-deliv_numb = i_vbeln.
          <ls_item>-deliv_item = ls_lips-posnr.
          <ls_item>-batch = ls_pos_ped-charg.
          <ls_item>-dlv_qty = ls_pos_ped-kwmeng.
          <ls_item>-base_uom = ls_pos_ped-vrkme.
          <ls_item>-dlv_qty_imunit = ls_pos_ped-kwmeng.
          <ls_item>-fact_unit_nom = ls_pos_ped-umvkz.
          <ls_item>-fact_unit_denom = ls_pos_ped-umvkn.

          APPEND INITIAL LINE TO item_control ASSIGNING FIELD-SYMBOL(<ls_item_c>).
          <ls_item_c>-deliv_numb = i_vbeln.
          <ls_item_c>-deliv_item = ls_lips-posnr.
          <ls_item_c>-chg_delqty = 'X'.
        ENDLOOP.
        IF sy-subrc NE 0.
          existe_new_positions = 'X'.
          APPEND INITIAL LINE TO r_posnr_new ASSIGNING FIELD-SYMBOL(<ls_posnr_new>).
          <ls_posnr_new>-sign = 'I'.
          <ls_posnr_new>-option = 'EQ'.
          <ls_posnr_new>-low = ls_pos_ped-posnr.
*          APPEND INITIAL LINE TO item_data ASSIGNING <ls_item>.
*          <ls_item>-deliv_numb = i_vbeln.
*          <ls_item>-deliv_item = ls_pos_ped-posnr * 10.
*          <ls_item>-batch = ls_pos_ped-charg.
*          <ls_item>-dlv_qty = ls_pos_ped-kwmeng.
*          <ls_item>-base_uom = ls_pos_ped-vrkme.
*          <ls_item>-dlv_qty_imunit = ls_pos_ped-kwmeng.
*          <ls_item>-fact_unit_nom = ls_pos_ped-umvkz.
*          <ls_item>-fact_unit_denom = ls_pos_ped-umvkn.
*
*          APPEND INITIAL LINE TO item_control ASSIGNING <ls_item_c>.
*          <ls_item_c>-deliv_numb = i_vbeln.
*          <ls_item_c>-deliv_item = ls_lips-posnr.
*          <ls_item_c>-chg_delqty = 'X'.

        ENDIF.
      ENDLOOP.

      "Eliminamos las posiciones de la entrega que no exista el pedido
      LOOP AT lt_lips INTO ls_lips.
        READ TABLE lt_posiciones TRANSPORTING NO FIELDS WITH KEY vbeln = ls_lips-vgbel posnr = ls_lips-vgpos.
        IF sy-subrc NE 0.
          APPEND INITIAL LINE TO item_data ASSIGNING <ls_item>.
          <ls_item>-deliv_numb = i_vbeln.
          <ls_item>-deliv_item = ls_lips-posnr.

          APPEND INITIAL LINE TO item_control ASSIGNING <ls_item_c>.
          <ls_item_c>-deliv_numb = i_vbeln.
          <ls_item_c>-deliv_item = ls_lips-posnr.
          <ls_item_c>-del_item = 'X'.
        ENDIF.
      ENDLOOP.


      DO v_veces TIMES.
        CLEAR e_return.
        CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
          EXPORTING
            header_data    = header_data
            header_control = header_control
            delivery       = i_vbeln
          TABLES
            item_data      = item_data
            item_control   = item_control
*           new_item_data  = new_item_data
            return         = e_return
          EXCEPTIONS
            error_message  = 1
            OTHERS         = 2.
        READ TABLE e_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
        IF sy-subrc IS INITIAL.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          WAIT UP TO 1 SECONDS.
        ELSE.
          EXIT.

        ENDIF.
      ENDDO.
      READ TABLE e_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
      IF sy-subrc IS NOT INITIAL.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.

        "Borramos la posición del pedido si existen posiciones a borrar
        IF it_items_del[] IS NOT INITIAL.
          PERFORM mensajes_pasos USING 'ZUI5_CM' 'I' '051' i_salesdocument '' '' ''CHANGING lt_return.
          PERFORM modificar_pedido_del USING i_header
                                             i_positions
                                       CHANGING lt_return
                                             it_items_del[]
                                             it_schedule_del[]
                                             i_salesdocument.
          APPEND LINES OF lt_return TO e_return.
        ENDIF.
        READ TABLE e_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
        IF sy-subrc NE 0.

          "Añadimos las posiciones nuevas del pedido a la entrega
          IF existe_new_positions IS NOT INITIAL.
            PERFORM mensajes_pasos USING 'ZUI5_CM' 'I' '046' i_vbeln '' '' ''CHANGING e_return.

            "Recuepramos la fecha de entrega para recuperarla.
            SELECT posnr, edatu FROM vbep
              INTO TABLE @DATA(lt_vbep)
              WHERE vbeln = @i_salesdocument
              AND posnr IN @r_posnr_new
              ORDER BY posnr DESCENDING.
            IF sy-subrc = 0.
              READ TABLE lt_vbep INTO DATA(ls_vbep) INDEX 1.
              IF sy-subrc = 0.
                lv_date_vbep = ls_vbep-edatu.
              ENDIF.
            ENDIF.
            CLEAR lt_return.
            CALL FUNCTION 'ZUI5_CM_ADD_POS_ENTREGA'
              EXPORTING
                delivery      = i_vbeln
                salesdocument = i_salesdocument
                date          = lv_date_vbep
              IMPORTING
                e_return      = lt_return.
            APPEND LINES OF lt_return TO e_return.


          ENDIF.
        ENDIF.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

      ENDIF.


    ENDIF.
  ENDIF.
ENDFUNCTION.
