FUNCTION zui5_cm_get_trans_traslados.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_ALMACEN_MONTAJE) TYPE  LGORT_D OPTIONAL
*"     VALUE(I_TRANSPORTE) TYPE  TKNUM OPTIONAL
*"     VALUE(IR_TRANSPORTE) TYPE  SHP_TKNUM_RANGE_T OPTIONAL
*"     VALUE(IR_TRANSPORTISTA) TYPE  MD_RANGE_T_LIFNR OPTIONAL
*"     VALUE(IR_CONDUCTOR) TYPE  ZSUIS_CM_ZZCONDUCTOR_RANG OPTIONAL
*"     VALUE(IR_MATRICULA) TYPE  ISI_SIGNI_RA OPTIONAL
*"     VALUE(IR_STATUS) TYPE  ZSUIS_CM_STATUS_TRANS_RANGE OPTIONAL
*"     VALUE(IR_FECHA_CREA) TYPE  DATE_T_RANGE OPTIONAL
*"     VALUE(IR_DESTINATARIO) TYPE  SHP_KUNWE_RANGE_T OPTIONAL
*"     VALUE(IR_TRANSPORTISTA_NOMBRE) TYPE  ZSUIS_CM_NOMBRES_RANG
*"       OPTIONAL
*"     VALUE(IR_DESTINATARIO_NOMBRE) TYPE  ZSUIS_CM_NOMBRES_RANG
*"       OPTIONAL
*"     VALUE(IR_STATUS_NOMBRE) TYPE  ZSUIS_CM_TEXTOS_DOMINIO_RANG
*"       OPTIONAL
*"     VALUE(IR_TPLST) TYPE  ZSUITT_CM_TPLST_RANGE OPTIONAL
*"     VALUE(IR_WERKS) TYPE  RANGE_T_WERKS_D OPTIONAL
*"     VALUE(IR_LGORT) TYPE  RANGE_T_LGORT_D OPTIONAL
*"     VALUE(IR_CONDUCTOR_NAME) TYPE  ZSUIS_CM_NOMBRES_RANG OPTIONAL
*"     VALUE(IR_ROUTE) TYPE  SHP_ROUTE_RANGE_T OPTIONAL
*"     VALUE(IR_ROUTE_NAME) TYPE  ZSUI5TT_CM_NAME_ROUTE OPTIONAL
*"  EXPORTING
*"     VALUE(E_RETURN) TYPE  BAPIRET2_T
*"     VALUE(E_DATA) TYPE  ZSUITT_CM_GET_TRANSPORTES
*"----------------------------------------------------------------------
  DATA: lv_mes             TYPE datum,
        ls_parametros      TYPE zcmventa,
        lv_centro_montaje  TYPE werks_d,
        lv_almacen_montaje TYPE lgort_d.

  DATA ir_shtyp  TYPE rseloption.
  DATA ir_monitor  TYPE rseloption.

  IF ir_werks IS NOT INITIAL.
    READ TABLE ir_werks INTO DATA(wa_werks) INDEX 1.
    IF sy-subrc EQ 0.
      lv_centro_montaje = wa_werks-low.
    ENDIF.
  ENDIF.

  IF ir_lgort IS NOT INITIAL.
    READ TABLE ir_lgort INTO DATA(wa_lgort) INDEX 1.
    IF sy-subrc EQ 0.
      lv_almacen_montaje = wa_lgort-low.
    ENDIF.
  ELSEIF i_almacen_montaje IS NOT INITIAL.
    lv_almacen_montaje = i_almacen_montaje.
  ENDIF.

  IF i_transporte IS NOT INITIAL.
    APPEND INITIAL LINE TO ir_transporte ASSIGNING  FIELD-SYMBOL(<ls_trans>).
    <ls_trans>-sign = 'I'.
    <ls_trans>-option = 'EQ'.
    <ls_trans>-low = i_transporte.
  ENDIF.

  IF ir_werks IS NOT INITIAL AND ir_lgort IS NOT INITIAL.
    CALL FUNCTION 'ZUI5_CM_GET_PARAMETROS_CM'
      EXPORTING
        i_werks      = lv_centro_montaje
        i_lgort      = lv_almacen_montaje
      IMPORTING
        e_parametros = ls_parametros.

    APPEND INITIAL LINE TO ir_tplst ASSIGNING FIELD-SYMBOL(<ls_tplst>).
    <ls_tplst>-tplst_sign = 'I'.
    <ls_tplst>-tplst_option = 'EQ'.
    <ls_tplst>-tplst_low = ls_parametros-tplst.

  ENDIF.

  "Recuperamos los transportes asociados al Monitor de Traslados CM_TRAS
  ir_monitor = VALUE #( ( sign = 'I' option = 'EQ' low = 'CM_TRAS' ) ).

  CALL FUNCTION 'ZUI5_CM_GET_TIPO_TRANS_CM'
    EXPORTING
      i_werks    = lv_centro_montaje
      i_lgort    = lv_almacen_montaje
      ir_monitor = ir_monitor
    IMPORTING
      er_shtyp   = ir_shtyp.

  CHECK ir_shtyp IS NOT INITIAL.

  IF ir_fecha_crea[] IS INITIAL.
    lv_mes = sy-datum - 120. "Obtener únicamente registros de transportes creados en los últimos 3 días.
    ir_fecha_crea = VALUE #( ( sign = 'I'
                               option = 'GE'
                               low = lv_mes ) ).
  ENDIF.

  SELECT DISTINCT a~tknum, a~tdlnr, e~name1 AS tdlnr_name , a~zzdni AS zzconductor, a~zzconductor AS zzconductor_name, a~signi, a~sttrg, f~ddtext AS sttrg_name,
     a~erdat, c~kunnr AS kunwe, d~name1 AS kunwe_name, a~route, t~bezei AS route_name, a~tpbez AS remolque, a~text1 AS telefono
    FROM vttk AS a
    LEFT JOIN vttp AS b ON b~tknum = a~tknum
    LEFT JOIN likp AS c ON c~vbeln = b~vbeln
    LEFT JOIN kna1 AS d ON d~kunnr = c~kunnr
    LEFT JOIN lfa1 AS e ON e~lifnr = a~tdlnr
    LEFT JOIN dd07t AS f ON f~domvalue_l = a~sttrg AND f~domname = 'STTRG' AND f~ddlanguage = @sy-langu
    LEFT JOIN vtadd01t AS v ON v~add_info = a~zzconductor AND v~spras = @sy-langu
    LEFT JOIN tvrot AS t ON t~route = a~route AND t~spras = @sy-langu
    INTO TABLE @DATA(lt_data)
    WHERE a~tknum IN @ir_transporte
    AND a~tdlnr IN @ir_transportista
    AND a~zzconductor IN @ir_conductor
    AND a~signi IN @ir_matricula
    AND a~sttrg IN @ir_status
    AND a~erdat IN @ir_fecha_crea
    AND c~kunnr IN @ir_destinatario
    AND d~name1 IN @ir_destinatario_nombre
    AND e~name1 IN @ir_transportista_nombre
    AND f~ddtext IN @ir_status_nombre
    AND a~tplst IN @ir_tplst
    AND v~bezei IN @ir_conductor_name
    AND a~route IN @ir_route
    AND t~bezei IN @ir_route_name
    AND a~shtyp IN @ir_shtyp.

  IF sy-subrc NE 0.
*    APPEND INITIAL LINE TO e_return ASSIGNING FIELD-SYMBOL(<ls_return>).
*    <ls_return>-type = 'E'.
*    <ls_return>-id = 'ZUI5_CM'.
*    <ls_return>-number = '003'.
  ELSE.
    MOVE-CORRESPONDING lt_data TO e_data.
    "Comprobamos si el transporte es editable o borrable
    SELECT DISTINCT v~tknum, a~vgbel, a~vgpos, a~vbeln, a~posnr,  b~fkstk, b~abstk, b~gbstk, e~werks, e~lgort, e~reslo, ek~reswk
      FROM vttp AS v
      INNER JOIN lips AS a ON v~vbeln = a~vbeln
      INNER JOIN ekko AS ek ON ek~ebeln = a~vgbel
      INNER JOIN ekpo AS e ON e~ebeln = ek~ebeln "AND e~ebelp = vgpos
      LEFT JOIN vbuk AS b ON b~vbeln = a~vgbel
      INTO TABLE @DATA(lt_pedidos)
      FOR ALL ENTRIES IN @e_data
      WHERE v~tknum = @e_data-tknum.
*    IF sy-subrc = 0.
    LOOP AT e_data ASSIGNING FIELD-SYMBOL(<ls_edata>).
      DATA(lv_tabix) = sy-tabix.
      READ TABLE lt_pedidos INTO DATA(ls_pedido) WITH KEY tknum = <ls_edata>-tknum.
      IF sy-subrc = 0.
        <ls_edata>-werks = ls_pedido-reswk.
        <ls_edata>-lgort = ls_pedido-reslo.
        IF ir_werks IS NOT INITIAL AND ls_pedido-reswk NOT IN ir_werks.
          DELETE e_data INDEX lv_tabix.
          CONTINUE.
        ENDIF.
        IF ir_lgort IS NOT INITIAL AND ls_pedido-reslo NOT IN ir_lgort.
          DELETE e_data INDEX lv_tabix.
          CONTINUE.
        ENDIF.
      ELSE.
        <ls_edata>-werks = lv_centro_montaje.
        <ls_edata>-lgort = lv_almacen_montaje.
      ENDIF.
      <ls_edata>-centro_montaje = lv_centro_montaje.
      <ls_edata>-almacen_montaje = lv_almacen_montaje.

      "El transporte es editable si existe un pedido sin facturar
      READ TABLE lt_pedidos TRANSPORTING NO FIELDS WITH KEY tknum = <ls_edata>-tknum fkstk = ''.
      IF sy-subrc = 0.
        <ls_edata>-editable = abap_true.


        "El transporte es borrable si todos los pedido están sin facturar.
        READ TABLE lt_pedidos TRANSPORTING NO FIELDS WITH KEY tknum = <ls_edata>-tknum fkstk = 'C'.
        IF sy-subrc NE 0.
          <ls_edata>-borrable = abap_true.
        ENDIF.
      ENDIF.


    ENDLOOP.
*    ENDIF.
  ENDIF.

  SORT e_data BY tknum DESCENDING.
  DELETE ADJACENT DUPLICATES FROM e_data COMPARING tknum.

ENDFUNCTION.
