FUNCTION zui5_cm_get_number_charg_dev.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_WERKS) TYPE  WERKS_D
*"     REFERENCE(I_LGORT) TYPE  LGORT_D
*"     REFERENCE(I_MATNR) TYPE  MATNR
*"     REFERENCE(I_MONTADO) TYPE  FLAG OPTIONAL
*"     VALUE(I_KUNNR) TYPE  KUNNR OPTIONAL
*"  EXPORTING
*"     REFERENCE(E_CHARG_2D) TYPE  CHARG_D
*"     REFERENCE(E_CHARG_3D) TYPE  CHARG_D
*"     REFERENCE(T_RETURN) TYPE  BAPIRET2_T
*"----------------------------------------------------------------------

  DATA vl_new_lote TYPE zui_cm_lote_dev.
  DATA lv_charg TYPE charg_d.
  DATA lv_charg_2d TYPE charg_d.
  DATA lv_charg_3d TYPE charg_d.
  DATA wl_batchattributes TYPE bapibatchatt.
  DATA tl_return TYPE STANDARD TABLE OF bapiret2.

  DATA: r_charg TYPE RANGE OF charg_d.
  i_kunnr = |{ i_kunnr ALPHA = IN }|.

  "Recuperamos Lote 2d si I_MONTADO = ''.
  IF i_montado IS INITIAL.
    lv_charg = 'D*'.
    r_charg = VALUE #( ( sign = 'E' option = 'CP' low = lv_charg ) ).

    lv_charg = 'R*'.
    APPEND VALUE #(  sign = 'E' option = 'CP' low = lv_charg )  TO r_charg.
    SELECT SINGLE werks, lgort, sort2
          FROM twlad
          INNER JOIN adrc ON adrc~addrnumber EQ twlad~adrnr
          INTO @DATA(wa_adrc)
          WHERE werks EQ @i_werks
            AND lgort EQ @i_lgort.
    IF sy-subrc = 0.
      lv_charg = |{ wa_adrc-sort2(1) && '*' }|.
      APPEND VALUE #(  sign = 'E' option = 'CP' low = lv_charg )  TO r_charg.

      CLEAR lv_charg.
    ENDIF.
*    SELECT matnr, charg, ersda  FROM mcha INTO TABLE @DATA(lt_lote_2d) "e_charg_2d
*      WHERE matnr = @i_matnr
*      AND werks = @i_werks
*      AND charg IN @r_charg
*      ORDER BY ersda DESCENDING
*      .
    SELECT b~matnr, b~charg, a~erdat
      FROM vbak AS a
      INNER JOIN vbap AS b ON b~vbeln = a~vbeln
      INTO TABLE @DATA(lt_lote_2d)
      WHERE a~kunnr = @i_kunnr
      AND b~matnr = @i_matnr
      AND ( b~charg IN @r_charg AND b~charg NE '')
      AND b~werks = @i_werks
      ORDER BY a~erdat DESCENDING.
    IF sy-subrc = 0.
      READ TABLE lt_lote_2d INTO DATA(ls_lote_2d) INDEX 1.
      IF sy-subrc = 0.
        e_charg_2d = ls_lote_2d-charg.
      ENDIF.
    ENDIF.
  ENDIF.

  "Recuperamos Lote 3d si I_MONTADO = 'X'.
  IF i_montado IS NOT INITIAL.
    SELECT SINGLE werks, lgort, sort2
          FROM twlad
          INNER JOIN adrc ON adrc~addrnumber EQ twlad~adrnr
          INTO @wa_adrc
          WHERE werks EQ @i_werks
            AND lgort EQ @i_lgort.
    IF sy-subrc = 0.
      lv_charg = |{ wa_adrc-sort2(1) && '*' }|.
      r_charg = VALUE #( ( sign = 'I' option = 'CP' low = lv_charg ) ).

      CLEAR lv_charg.
    ENDIF.

*    SELECT matnr, charg, ersda  FROM mcha INTO TABLE @DATA(lt_lote_3d) " e_charg_3d
*      WHERE matnr = @i_matnr
*       AND werks = @i_werks
*      AND charg IN @r_charg
*      .
    SELECT b~matnr, b~charg, a~erdat
      FROM vbak AS a
      INNER JOIN vbap AS b ON b~vbeln = a~vbeln
      INTO TABLE @DATA(lt_lote_3d)
      WHERE a~kunnr = @i_kunnr
      AND b~matnr = @i_matnr
      AND b~charg IN @r_charg
      AND b~werks = @i_werks
      ORDER BY a~erdat DESCENDING.
    IF sy-subrc = 0.
      READ TABLE lt_lote_3d INTO DATA(ls_lote_3d) INDEX 1.
      IF sy-subrc = 0.
        e_charg_3d = ls_lote_3d-charg.
      ENDIF.
    ENDIF.
  ENDIF.

  IF e_charg_2d IS INITIAL AND e_charg_3d IS INITIAL.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        nr_range_nr             = '2'
        object                  = 'ZLOTEDEV'
*       QUANTITY                = '1'
*       SUBOBJECT               = ' '
*       TOYEAR                  = '0000'
*       IGNORE_BUFFER           = ' '
      IMPORTING
        number                  = vl_new_lote
*       QUANTITY                =
*       RETURNCODE              =
      EXCEPTIONS
        interval_not_found      = 1
        number_range_not_intern = 2
        object_not_found        = 3
        quantity_is_0           = 4
        quantity_is_not_1       = 5
        interval_overflow       = 6
        buffer_overflow         = 7
        OTHERS                  = 8.
    IF sy-subrc = 0.

      vl_new_lote(1) = 'D'.
      lv_charg = vl_new_lote.

      CALL FUNCTION 'ZUI5_CM_STATUS_LOTE'
        EXPORTING
          i_werks   = i_werks
          i_lgort   = i_lgort
          i_charg   = lv_charg
        IMPORTING
*         O_STATUS  =
*         O_STATUS_TEXT       =
          o_lote_2d = lv_charg_2d
          o_lote_3d = lv_charg_3d.

      IF NOT lv_charg_2d IS INITIAL AND e_charg_2d IS INITIAL.

        wl_batchattributes-val_type = lv_charg_2d.

        CALL FUNCTION 'BAPI_BATCH_CREATE'
          EXPORTING
            material             = i_matnr
            batch                = lv_charg_2d
            plant                = i_werks
            batchstoragelocation = i_lgort
            batchattributes      = wl_batchattributes
          IMPORTING
            batch                = e_charg_2d
          TABLES
            return               = tl_return.

        IF NOT line_exists( tl_return[ type = 'E' ] ).
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.

        ELSE.
          MOVE-CORRESPONDING tl_return TO t_return KEEPING TARGET LINES.
        ENDIF.
      ENDIF.

      IF NOT lv_charg_3d IS INITIAL AND e_charg_3d IS INITIAL.
        wl_batchattributes-val_type = lv_charg_3d.

        CALL FUNCTION 'BAPI_BATCH_CREATE'
          EXPORTING
            material             = i_matnr
            batch                = lv_charg_3d
            plant                = i_werks
            batchstoragelocation = i_lgort
            batchattributes      = wl_batchattributes
          IMPORTING
            batch                = e_charg_3d
          TABLES
            return               = tl_return.

        IF NOT line_exists( tl_return[ type = 'E' ] ).
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.

        ELSE.
          MOVE-CORRESPONDING tl_return TO t_return KEEPING TARGET LINES.
        ENDIF.
      ENDIF.

    ENDIF.

  ENDIF.


ENDFUNCTION.
