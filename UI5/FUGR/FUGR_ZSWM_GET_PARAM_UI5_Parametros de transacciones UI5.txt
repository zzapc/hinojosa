FUNCTION ZSWM_GET_PARAM_UI5.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(DATA_USER) TYPE  ZSWM_DATA_UI5_EEEOO_STR OPTIONAL
*"     VALUE(TCODE) TYPE  TCODE OPTIONAL
*"     VALUE(UNAME) TYPE  XUBNAME DEFAULT SY-UNAME
*"     VALUE(STATU) TYPE  FLAG DEFAULT 'X'
*"     VALUE(NO_GEN_LOG) TYPE  FLAG OPTIONAL
*"  EXPORTING
*"     VALUE(R_PARAM) TYPE  ZSWM_DATA_UI5_PARAM_STR
*"     VALUE(R_FUNCIONALIDADES) TYPE  ZSWM_DATA_UI5_FUNC_STR
*"     VALUE(ERROR) TYPE  FLAG
*"     VALUE(TT_LOG) TYPE  BAPIRET2_TT
*"----------------------------------------------------------------------
    PERFORM break USING 'ZSWM_GET_PARAM_UI5'.

  if uname is not INITIAl
  and data_user-uname is INITIAL.

     CALL FUNCTION 'ZSWM_GET_DATA_USER_UI5'
      EXPORTING
        UNAME           = uname
        STATU           = statu
        TCODE           = tcode
      NO_GEN_LOG      = abap_true
       IMPORTING
         DATA_USER       = data_user
*        ERROR           =
*        TT_LOG          =
               .

  endif.
  clear:  r_param,
          r_param-RR_BSTART[],
          r_param-RR_MTART[],
          R_PARAM-rr_lgtyp[].

   select * into TABLE @data(tT_param) from zwm_param
           where lgnum eq @data_user-lgnum
             and tcode eq @tcode
             and werks eq @data_user-werks.
   if sy-subrc eq 0.
        read TABLE tT_param into data(reg_param) index 1.
        move-CORRESPONDING reg_param to r_param.
        select SINGLE vstel into r_param-vstel from t001w where werks eq reg_param-werks.
        loop at tT_param into reg_param.
            if reg_param-mtart is not INITIAL.
              data: r_mtart type FIP_S_MTART_RANGE.
              clear r_mtart.
              r_mtart+0(3) = 'IEQ'.
              r_mtart-low  = reg_param-mtart.
              append r_mtart to r_param-rr_mtart.
            endif.
            if reg_param-vltyp is not initial.
               data: r_lgtyp type MDG_BS_MAT_S_RANGE_LGTYP.
               clear r_lgtyp.
               r_lgtyp+0(3) = 'IEQ'.
               r_lgtyp-low  = Reg_PARAM-vltyp.
               append r_lgtyp to R_PARAM-rr_lgtyp.
            endif.
        ENDLOOP.
        data r_bsart type RPO_S_BSART_RANGE.
        r_param-SDABW = '0030'.
        case tcode.
        when 'ZWM_RF_UI5_ENT_001'.
           clear r_bsart.
           r_bsart+0(3) = 'IEQ'.
           r_bsart-low  = 'ZPT1'.
           append r_bsart to r_param-rr_bstart.
           r_param-abfer  = '1'.
        when OTHERS.
          r_param-abfer  = '2'.
        endcase.
        CALL FUNCTION 'ZSWM_GET_FUNC_UI5'
          EXPORTING
            data_user               = data_user
            tcode                   = tcode
          IMPORTING
            R_FUNCIONALIDADES       = r_funcionalidades
                  .

   else.
       move abap_true to error.
*      Transacción & no habilitada para UI5 en nº de almacén &
       PERFORM mensaje USING 'E' 'ZSWM_UI5' '025' tcode data_user-lgnum space space CHANGING tT_log[].
   endif.

  check no_gen_log ne abap_true.
  CALL METHOD zcl_ui5_log=>save_log
     EXPORTING
      mf                  = 'ZSWM_GET_PARAM_UI5'
      uname               = uname
      statu               = statu
      tcode               = tcode
      error               = error
      lgnum               = data_user-lgnum
*     operario            =
      reg_parametros      = r_param
      reg_funcionalidades = R_FUNCIONALIDADES
      tt_log              = tT_log
      commit              = abap_true
      .


ENDFUNCTION.
