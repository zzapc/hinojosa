*&---------------------------------------------------------------------*
*&  Include           ZSWM_PROCESSINVENTORY_UI5_CLS
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&  Include           ZSWM_SIMULAR_UI5_CLS
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Include          ZSEWM_STOCK_ALV_C01
*&---------------------------------------------------------------------*

CLASS lcl_report DEFINITION.

  PUBLIC SECTION.
    CLASS-METHODS handle_hotspot_click
                FOR EVENT hotspot_click OF cl_gui_alv_grid
      IMPORTING e_column_id
                es_row_no.

ENDCLASS.               "LCL_REPORT

*&---------------------------------------------------------------------*
*&       Class (Implementation)  LCL_REPORT
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_report IMPLEMENTATION.
  METHOD handle_hotspot_click.
*----------------------------------------------------------------------*
    CHECK es_row_no-sub_row_id EQ 0.   " !!
    read TABLE t_alv into ZSWM_UI5_IVNUM_STR index es_row_no-row_id.
    if sy-subrc eq 0.
      PERFORM get_seleccion_pos TABLES t_pos t_999 t_dni USING ZSWM_UI5_IVNUM_STR.
      call SCREEN 0200.
      PERFORM get_data TABLES t_alv.
      CALL FUNCTION 'SAPGUI_SET_FUNCTIONCODE'
        EXPORTING
          functioncode           = '='
        EXCEPTIONS
          function_not_supported = 1
          OTHERS                 = 2.

    endif.
*    DATA: rt_select_list TYPE zswm_tknum_select_list.
*    CASE sy-dynnr.
*      WHEN '0400'.
*        READ TABLE gt_select_list INTO rt_select_list INDEX es_row_no-row_id.
*        CHECK sy-subrc EQ 0.
*        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*          EXPORTING
*            input  = rt_select_list-tknum
*          IMPORTING
*            output = data_u-tknum.
*        CALL FUNCTION 'SAPGUI_SET_FUNCTIONCODE'
*          EXPORTING
*            functioncode           = 'B_CONT'
*          EXCEPTIONS
*            function_not_supported = 1
*            OTHERS                 = 2.
*        IF sy-subrc <> 0.
** Implement suitable error handling here
*        ENDIF.
*      WHEN '0600'.
*        CASE e_column_id-fieldname.
*          WHEN 'TKNUM'.
*            READ TABLE tt_transportes INTO DATA(rt_transportes_2) INDEX es_row_no-row_id.
*            CHECK sy-subrc EQ 0.
*            data_u-tknum = rt_transportes_2-tknum.
**            data_u-tknum = rt_transportes_2-tknum.
**                       read TABLE tt_transportes into RT_transportes with key tknum = RT_transportes_2-tknum.
**         if sy-subrc eq 0.
**            clear ZSWM_DATA_INCL_TRANSPORTES_STR.
**            move-CORRESPONDING RT_transportes to ZSWM_DATA_INCL_TRANSPORTES_STR.
**         endif.
*        ENDCASE.
*      WHEN '0700'.
*        CASE e_column_id-fieldname.
*          WHEN 'VBELN'.
*            READ TABLE tt_head INTO DATA(rt_head) INDEX es_row_no-row_id.
*            CHECK sy-subrc EQ 0.
*            data_u-vbeln = rt_head-vbeln.
*
*        ENDCASE.
*      WHEN '0800'.
*        CASE e_column_id-fieldname.
*          WHEN 'VBELN'.
*            READ TABLE tt_entre INTO DATA(rt_entre) INDEX es_row_no-row_id.
*            CHECK sy-subrc EQ 0.
*            data_u-posnr = rt_entre-posnr.
*          WHEN 'EXIDV'.
*            READ TABLE tt_picking INTO DATA(rt_picking) INDEX es_row_no-row_id.
*            CHECK sy-subrc EQ 0.
*            DATA frase TYPE barcode.
*            CONCATENATE '¿Eliminar la UA:' rt_picking-exidv ' de la entrega:' data_u-vbeln '/' data_u-posnr '?' INTO frase.
*            DATA: answer TYPE c.
*            CALL FUNCTION 'POPUP_TO_CONFIRM'
*              EXPORTING
**               TITLEBAR       = ' '
**               DIAGNOSE_OBJECT             = ' '
*                text_question  = frase
*                text_button_1  = 'Si'(001)
**               ICON_BUTTON_1  = ' '
*                text_button_2  = 'No'(002)
**               ICON_BUTTON_2  = ' '
**               DEFAULT_BUTTON = '1'
**               DISPLAY_CANCEL_BUTTON       = 'X'
**               USERDEFINED_F1_HELP         = ' '
**               START_COLUMN   = 25
**               START_ROW      = 6
**               POPUP_TYPE     =
**               IV_QUICKINFO_BUTTON_1       = ' '
**               IV_QUICKINFO_BUTTON_2       = ' '
*              IMPORTING
*                answer         = answer
**              TABLES
**               PARAMETER      =
*              EXCEPTIONS
*                text_not_found = 1
*                OTHERS         = 2.
*            IF answer eq '1'.
*              data barcode type barcode.
*              barcode = rt_picking-exidv.
*              CALL FUNCTION 'ZSWM_DESHACER_PICKING_UI5'
*                EXPORTING
*                  tcode    = data_u-tcode
*                  uname    = data_u-uname
*                  operario = data_u-operario
*                  tknum    = data_u-tknum
*                  vbeln    = data_u-vbeln
*                  posnr    = data_u-posnr
*                  barcode  = barcode
*                IMPORTING
*                  error    = error
*                  tt_log   = tt_log.
*              IF error EQ abap_true.
*                PERFORM show_log TABLES tt_log[].
*              ENDIF.
*            ENDIF.
*        ENDCASE.
*    ENDCASE.
**      IF sw_cod IS NOT INITIAL.
**        READ TABLE gt_select_list INTO rt_select_list WITH KEY cod = sw_cod.
**        IF sy-subrc EQ 0.
**          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
**            EXPORTING
**              input  = rt_select_list-tknum
**            IMPORTING
**              output = data_u-tknum.
**          CLEAR data_delivery.
**          CLEAR data_delivery-tt_bultos[].
**
***            datA_u-tknum = Rt_select_list-tknum.
**          CALL SCREEN 0500.
**          SET SCREEN 0.
**          LEAVE SCREEN.
**        ENDIF.
**      ENDIF.
*
**        CALL FUNCTION 'ZSWM_GET_SHIPMENT_OUT_UI5'
**         EXPORTING
**           TCODE              = data_u-tcode
**           UNAME              = SY-UNAME
**           TKNUM              = rt_selecT_list-tknum
***           VBELN              =
***           POSNR              =
**         IMPORTING
***           LT_VTTK            =
***           ERROR              =
***           TT_LOG             =
**            TT_TRANP_OUT       = TT_TRANP_OUT
**            TT_HEAD            = tt_head
**            TT_ENTRE           = tt_entre
***           TT_PICKING         =
***           TT_STOCK           =
**                  .
**         read TABLE TT_TRANP_OUT into data(RT_transp_out) with key tknum = rt_select_list-tknum.
**         if sy-subrc eq 0.
**            clear ZSWM_DATA_INCL_TRANSPORTES_STR.
**            move-CORRESPONDING rt_transp_out to ZSWM_DATA_INCL_TRANSPORTES_STR.
**         endif.
*    CALL FUNCTION 'SAPGUI_SET_FUNCTIONCODE'
*      EXPORTING
*        functioncode           = '='
*      EXCEPTIONS
*        function_not_supported = 1
*        OTHERS                 = 2.
*    IF sy-subrc <> 0.
** Implement suitable error handling here
*    ENDIF.
*
**    endcase.
**    READ TABLE <t_list> ASSIGNING <wa_list> INDEX es_row_no-row_id.
**    CHECK sy-subrc EQ 0.
**
**    CASE e_column_id-fieldname.
**      WHEN 'MATNR'.
**        ASSIGN COMPONENT 'MATNR' OF STRUCTURE <wa_list> TO <value_aux>.
**        SET PARAMETER ID 'MAT' FIELD <value_aux>.
**        ASSIGN COMPONENT 'WERKS' OF STRUCTURE <wa_list> TO <value_aux>.
**        SET PARAMETER ID 'WRK' FIELD <value_aux>.
**        CALL TRANSACTION 'MD04' AND SKIP FIRST SCREEN.
**    ENDCASE.
  ENDMETHOD.                    "handle_hotspot_click
*----------------- eo method handle_hotspot_click ---------------------*
ENDCLASS.
