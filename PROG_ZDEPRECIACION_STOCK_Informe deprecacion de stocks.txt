***********************************************************************
* TIPO : LISTADO
* TITULO : Informe deprecación de stocks
* DESCRIPCION : Informe deprecación de stocks
*
* AUTOR: Andrés Picazo                                FECHA: 11/04/2024
* ANALISTA: SEIDOR
*
***********************************************************************
REPORT zdepreciacion_stock.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: bkpf,
        uf05a,
        bsis.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.

DATA v_mensaje TYPE string.

*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check            TYPE xfeld,
             lights           TYPE zico_estado_mensaje,
             matnr            TYPE matnr,
             maktx            TYPE maktx,
             meins            TYPE meins,
             mtart            TYPE mtart,
             werks            TYPE werks_d,
             lgort            TYPE lgort_d,
             charg            TYPE charg_d,
             lotes            TYPE string,
             bwtar            TYPE mcha-bwtar,
             ersda            TYPE mcha-ersda,
             hsdat            TYPE mcha-hsdat,
             fecha_101        TYPE mcha-hsdat,
             fcalculo         TYPE mcha-hsdat,
             dias_stk         TYPE int4,
             vbeln            TYPE mska-vbeln,
             pedidos          TYPE string,
             kunnr            TYPE vbak-kunnr,
             clientes         TYPE string,
             name1            TYPE zzname1_cliente,
             brsch            TYPE knvv-zzbrsch,
             brtxt            TYPE t016t-brtxt,
             posnr            TYPE mska-posnr,
             kalab            TYPE mska-kalab,
             kains            TYPE mska-kains,
             kaspe            TYPE mska-kaspe,
             lfgja            TYPE mbew-lfgja,
             lfmon            TYPE mbew-lfmon,
             lbkum            TYPE mbew-lbkum,
             salk3            TYPE mbew-salk3,
             meses_stk        TYPE zmeses_stk,
             regla            TYPE string,
             depreciacion     TYPE zdepreciacion,
             valor_depreciado TYPE zvalor_depreciado,
             gsber            TYPE gsber,
             tipo_industria   TYPE string,
             bukrs            TYPE bukrs,
             kostl            TYPE kostl,
             clave            TYPE string,
             message          TYPE bapi_msg,
             agrup            TYPE abap_bool,
             error            TYPE abap_bool,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado,
           BEGIN OF t_apuntes,
             check          TYPE xfeld,
             lights         TYPE zico_estado_mensaje,
             gsber          TYPE gsber,
             tipo_industria TYPE string,
             buzei          TYPE bseg-buzei,
             bschl          TYPE bschl,
             hkont          TYPE hkont,
             txt50          TYPE txt50_skat,
             kostl          TYPE kostl,
             dmbtr          TYPE dmbtr,
             sgtxt          TYPE sgtxt,
             message        TYPE bapi_msg,
           END OF t_apuntes.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv ##NEEDED.

    DATA: o_grid          TYPE REF TO zcl_ap_alv_grid,
          o_event         TYPE REF TO zcl_ap_alv_grid_eventos,
          i_apuntes       TYPE TABLE OF t_apuntes,
          v_fecha_ini_mes TYPE dats,
          v_fecha_fin_mes TYPE dats.

    METHODS  main.

    METHODS: listado,
             seleccionar_datos,
             generar_apuntes,
             contabilizar,

      anular_documento IMPORTING bukrs        TYPE bukrs
                                 belnr        TYPE belnr_d
                                 gjahr        TYPE gjahr
                       RETURNING VALUE(error) TYPE abap_bool.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA: o_prog TYPE REF TO zcl_report,
      mcha   TYPE mcha,
      mchb   TYPE mchb,
      mska   TYPE mska,
      knvv   TYPE knvv,
      mara   TYPE mara.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE TEXT-sel.
  PARAMETERS: p_gjahr LIKE bkpf-gjahr OBLIGATORY,
              p_monat LIKE bkpf-monat OBLIGATORY.
  SELECT-OPTIONS: s_werks FOR mchb-werks OBLIGATORY,
                  s_mtart FOR mara-mtart MODIF ID no.
  PARAMETERS: p_cstk AS CHECKBOX DEFAULT 'X',
              p_lmd  AS CHECKBOX DEFAULT 'X'.
SELECTION-SCREEN END OF BLOCK b01.
SELECTION-SCREEN BEGIN OF BLOCK b02 WITH FRAME TITLE TEXT-tst.
  SELECT-OPTIONS: s_lgort FOR mchb-lgort,
                  s_matnr FOR mchb-matnr,
                  s_charg FOR mchb-charg,
                  s_bwtar FOR mcha-bwtar,
                  s_kunnr FOR knvv-kunnr,
                  s_vbeln FOR mska-vbeln,
                  s_brsch FOR knvv-zzbrsch.
SELECTION-SCREEN END OF BLOCK b02.
SELECTION-SCREEN BEGIN OF BLOCK b03 WITH FRAME.
  PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b03.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA l_list TYPE o_prog->t_listado.

    l_list = list.
    CASE column.
      WHEN 'LFGJA' OR 'LFMON' OR 'LBKUM' OR 'SALK3'.
        zcl_ap_material=>visualizar( matnr = l_list-matnr werks = l_list-werks ).
      WHEN 'CHARG'.
        zcl_ap_lote=>ver( matnr = l_list-matnr charg = l_list-charg werks = l_list-werks ).

      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    check_ucomm_sel = 'EJEC'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'EJEC'.
        IF line_exists( o_prog->i_listado[ check = 'X' error = 'X' ] ).
          MESSAGE 'No seleccione lotes con error' TYPE 'I'.
          RETURN.
        ENDIF.
        o_prog->generar_apuntes( ).
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    DATA l_per_ant TYPE dats.

    v_fecha_ini_mes = |{ p_gjahr }{ p_monat }01|.
    v_fecha_fin_mes = zcl_ap_fechas=>get_ultimo_dia_mes( v_fecha_ini_mes ).

    SELECT bukrs, belnr, gjahr FROM zdep_stock_log
      INTO TABLE @DATA(i_doc)
     WHERE lfgja    = @p_gjahr
       AND lfmon    = @p_monat
       AND werks   IN @s_werks
       AND anulado  = ''
     GROUP BY bukrs, belnr, gjahr.

    LOOP AT i_doc ASSIGNING FIELD-SYMBOL(<doc>).
      SELECT SINGLE stblg FROM bkpf
        INTO @DATA(l_stblg)
       WHERE bukrs = @<doc>-bukrs
         AND belnr = @<doc>-belnr
         AND gjahr = @<doc>-gjahr.
      IF sy-subrc <> 0.
        CONTINUE.
      ENDIF.

      IF l_stblg IS INITIAL.
        v_mensaje = 'Existe documento previo de este periodo'.
        IF anular_documento( bukrs = <doc>-bukrs
                             belnr = <doc>-belnr
                             gjahr = <doc>-gjahr ) = 'X'.
          RETURN.
        ENDIF.
      ELSE.
        UPDATE zdep_stock_log
           SET anulado = 'X'
         WHERE bukrs = <doc>-bukrs
           AND belnr = <doc>-belnr
           AND gjahr = <doc>-gjahr.
      ENDIF.
    ENDLOOP.

    l_per_ant = v_fecha_ini_mes - 1.
    SELECT bukrs belnr gjahr FROM zdep_stock_log
      INTO TABLE i_doc
     WHERE lfgja    = l_per_ant(4)
       AND lfmon    = l_per_ant+4(2)
       AND werks   IN s_werks
       AND anulado  = ''
     GROUP BY bukrs belnr gjahr.
    LOOP AT i_doc ASSIGNING <doc>.
      SELECT SINGLE stblg FROM bkpf
        INTO l_stblg
       WHERE bukrs = <doc>-bukrs
         AND belnr = <doc>-belnr
         AND gjahr = <doc>-gjahr.
      IF sy-subrc <> 0.
        CONTINUE.
      ENDIF.

      IF l_stblg IS INITIAL.
        v_mensaje = |Existe documento previo del periodo anterior { l_per_ant(4) } { l_per_ant+4(2) }|.
        IF anular_documento( bukrs = <doc>-bukrs
                             belnr = <doc>-belnr
                             gjahr = <doc>-gjahr ) = 'X'.
          RETURN.
        ENDIF.
      ELSE.
        UPDATE zdep_stock_log
           SET anulado = 'X'
         WHERE bukrs = <doc>-bukrs
           AND belnr = <doc>-belnr
           AND gjahr = <doc>-gjahr.
      ENDIF.
    ENDLOOP.

    seleccionar_datos( ).
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    TYPES: BEGIN OF t_cont_claves,
             clave TYPE string,
             cont  TYPE i,
           END OF t_cont_claves,
           BEGIN OF t_dep,
             brsch          TYPE brsch,
             regla          TYPE string,
             valor          TYPE p LENGTH 10 DECIMALS 3,
             tipo_industria TYPE string,
             desde          TYPE int4,
             hasta          TYPE int4,
           END OF t_dep.

    DATA: l_dep         TYPE t_dep,
          l_msg         TYPE string,
          i_dep         TYPE TABLE OF t_dep,
          l_cont_claves TYPE t_cont_claves,
          i_cont_claves TYPE TABLE OF t_cont_claves,
          i_list_det    TYPE TABLE OF t_listado.
    DATA l_icono TYPE icon_d.

    LOOP AT o_par->i_par ASSIGNING FIELD-SYMBOL(<par>) WHERE campo = 'DEPRECIACION'.
      CLEAR l_dep.
      l_dep-brsch          = <par>-valor.
      l_dep-regla          = <par>-valor2.
      l_dep-tipo_industria = <par>-atributo2.
      <par>-valor2 = to_upper( <par>-valor2 ).
      IF <par>-valor2 CS '<T'.
        SPLIT <par>-valor2 AT '<T' INTO DATA(l_ini) DATA(l_resto).
        IF l_ini IS INITIAL.
          MESSAGE |Revisa el parámetro DEPRECIACION { <par>-valor } { <par>-valor2 }. Debe ser MES<t<MES | TYPE 'I'.
          RETURN.
        ELSE.
          l_dep-desde = l_ini.
          SPLIT <par>-valor2 AT '<T<' INTO l_ini l_resto.
          IF l_ini IS INITIAL.
            MESSAGE |Revisa el parámetro DEPRECIACION { <par>-valor } { <par>-valor2 }. Debe ser MES<t<MES | TYPE 'I'.
            RETURN.
          ELSE.
            l_dep-hasta = l_resto.
          ENDIF.
        ENDIF.
        zcl_ap_string=>string2ctd(
          EXPORTING
            ctd_texto = <par>-atributo1
           IMPORTING
             cantidad  = l_dep-valor
             mensaje   = l_msg ).
        IF NOT l_msg IS INITIAL.
          MESSAGE |Revisa el parámetro DEPRECIACION { <par>-valor } { <par>-atributo1 }. { l_msg } | TYPE 'I'.
          RETURN.
        ENDIF.
        APPEND l_dep TO i_dep.
      ELSE.
        MESSAGE |Revisa el parámetro DEPRECIACION { <par>-valor } { <par>-valor2 }. Debe ser MES<t<MES | TYPE 'I'.
        RETURN.
      ENDIF.
    ENDLOOP.

    sgpi_texto( 'Seleccionando lotes de stock de cliente' ).
    SELECT mara~matnr, mara~mtart, mara~meins,
           makt~maktx,
           mska~werks, mska~lgort, mska~charg,
           mska~kalab, mska~kains, mska~kaspe,
           mska~vbeln, mska~posnr,
           vbak~kunnr,
           kna1~name1,
           knvv~zzbrsch AS brsch,
           t016t~brtxt,
           mcha~bwtar, mcha~ersda, mcha~hsdat
      FROM mara JOIN mska ON mara~matnr = mska~matnr
               JOIN vbak ON vbak~vbeln = mska~vbeln
               JOIN kna1 ON vbak~kunnr = kna1~kunnr
               JOIN mcha ON  mska~matnr = mcha~matnr
                         AND mska~werks = mcha~werks
                         AND mska~charg = mcha~charg
               LEFT OUTER JOIN knvv ON  knvv~kunnr = vbak~kunnr
                                    AND knvv~vkorg = mska~werks
                                    AND knvv~vtweg = '10'
                                    AND knvv~spart = '10'
               LEFT OUTER JOIN t016t ON  t016t~brsch = knvv~zzbrsch
                                     AND t016t~spras = @sy-langu
               LEFT OUTER JOIN makt ON  makt~matnr = mara~matnr
                                    AND makt~spras = @sy-langu
      INTO CORRESPONDING FIELDS OF TABLE @i_listado
     WHERE mara~mtart   IN @s_mtart
       AND mara~matnr   IN @s_matnr
       AND mska~werks   IN @s_werks
       AND mska~lgort   IN @s_lgort
       AND mska~charg   IN @s_charg
       AND mska~vbeln   IN @s_vbeln
       AND vbak~kunnr   IN @s_kunnr
       AND knvv~zzbrsch IN @s_brsch
       AND mcha~bwtar   IN @s_bwtar
       AND (    kalab <> 0
             OR kains <> 0
             OR kaspe <> 0 ).

    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
      sgpi_texto( texto1 = 'Buscando fechas de producción' cant_porc = 100 ).

      CONCATENATE <listado>-matnr <listado>-werks <listado>-lgort <listado>-bwtar INTO <listado>-clave.

* Si el material no tiene informada fecha producción, buscamos la fecha del primer 101 del lote
      IF <listado>-hsdat IS INITIAL.
        SELECT budat_mkpf FROM mseg
          INTO <listado>-fecha_101
          UP TO 1 ROWS
         WHERE matnr = <listado>-matnr
           AND werks = <listado>-werks
           AND charg = <listado>-charg
           AND bwart = '101'
         ORDER BY budat_mkpf ASCENDING.
        ENDSELECT.
        <listado>-fcalculo = <listado>-fecha_101.
      ELSE.
        <listado>-fcalculo = <listado>-hsdat.
      ENDIF.

      l_cont_claves-clave = <listado>-clave.
      l_cont_claves-cont  = 1.
      COLLECT l_cont_claves INTO i_cont_claves.
    ENDLOOP.

* Borramos lotes creados con fecha posterior al periodo seleccionado
    DELETE i_listado WHERE fcalculo > v_fecha_fin_mes.

* Sólo queremos una fila por material/clase de valoración
    sgpi_texto( 'Agrupando valores' ).
    LOOP AT i_cont_claves INTO l_cont_claves WHERE cont > 1.
      aux1 = |({ l_cont_claves-cont })|.
      CONDENSE aux1 NO-GAPS.
      LOOP AT i_listado ASSIGNING <listado> WHERE clave = l_cont_claves-clave AND agrup = ''.
        APPEND <listado> TO i_list_det.
        DATA(l_listado) = <listado>.
        DELETE i_listado.
        CLEAR: l_listado-vbeln,
               l_listado-posnr,
               l_listado-charg,
               l_listado-ersda,
               l_listado-hsdat,
               l_listado-fecha_101,
               l_listado-fcalculo,
               l_listado-kunnr,
               l_listado-name1.
        l_listado-agrup = 'X'.
        COLLECT l_listado INTO i_listado.
      ENDLOOP.
      LOOP AT i_listado ASSIGNING <listado> WHERE agrup = 'X'.
        LOOP AT i_list_det ASSIGNING FIELD-SYMBOL(<det>) WHERE clave = <listado>-clave.
          __add_lista_no0 <listado>-pedidos <det>-vbeln.
          __add_lista_no0 <listado>-clientes <det>-kunnr.
          __add_lista <listado>-lotes <det>-charg.
          IF <listado>-fcalculo IS INITIAL OR ( NOT <det>-fcalculo IS INITIAL AND <det>-fcalculo < <listado>-fcalculo ).
            <listado>-fcalculo = <det>-fcalculo.
          ENDIF.
        ENDLOOP.
        IF NOT <listado>-pedidos CS ','.
          <listado>-vbeln = <det>-vbeln.
          <listado>-posnr = <det>-posnr.
        ELSE.
          SPLIT <listado>-pedidos AT ',' INTO TABLE DATA(i_ped).
          <listado>-vbeln = condense( |({ lines( i_ped ) })| ).
        ENDIF.
        IF NOT <listado>-clientes CS ','.
          <listado>-kunnr = <det>-kunnr.
          <listado>-name1 = <det>-name1.
        ELSE.
          SPLIT <listado>-clientes AT ',' INTO TABLE DATA(i_cli).
          <listado>-kunnr = condense( |({ lines( i_cli ) })| ).
        ENDIF.
        IF NOT <listado>-lotes CS ','.
          <listado>-charg     = <det>-charg.
          <listado>-ersda     = <det>-ersda.
          <listado>-hsdat     = <det>-hsdat.
          <listado>-fecha_101 = <det>-fecha_101.
          <listado>-fcalculo  = <det>-fcalculo.
        ELSE.
          SPLIT <listado>-lotes AT ',' INTO TABLE DATA(i_lot).
          <listado>-charg = condense( |({ lines( i_lot ) })| ).
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    sgpi_texto( texto1 = 'Calculando tiempo en stock' ).
    LOOP AT i_listado ASSIGNING <listado> WHERE NOT fcalculo IS INITIAL.
      <listado>-dias_stk  = v_fecha_fin_mes - <listado>-fcalculo.
      <listado>-meses_stk = <listado>-dias_stk / 30.
    ENDLOOP.

    sgpi_texto( texto1 = 'Buscamos valoración de stock' ).
    LOOP AT i_listado ASSIGNING <listado> WHERE bwtar <> ''.
      IF sy-datum(4) = p_gjahr AND sy-datum+4(2) = p_monat.
        SELECT SINGLE lbkum salk3 FROM mbew
          INTO CORRESPONDING FIELDS OF <listado>
         WHERE matnr = <listado>-matnr
           AND bwkey = <listado>-werks
           AND bwtar = <listado>-bwtar.
        IF sy-subrc = 0.
          <listado>-lfgja = p_gjahr.
          <listado>-lfmon = p_monat.
        ENDIF.
      ELSE.
        SELECT lfgja lfmon lbkum salk3 FROM mbewh
          INTO CORRESPONDING FIELDS OF <listado>
          UP TO 1 ROWS
         WHERE matnr = <listado>-matnr
           AND bwkey = <listado>-werks
           AND bwtar = <listado>-bwtar
           AND ( ( lfgja = p_gjahr AND lfmon <= p_monat )
                 OR lfgja < p_gjahr )
         ORDER BY lfgja DESCENDING lfmon DESCENDING.
        ENDSELECT.
      ENDIF.
    ENDLOOP.

    IF p_cstk = 'X'.
      DELETE i_listado WHERE salk3 = 0.
    ENDIF.

    SELECT werks, gsber FROM t134g
      INTO TABLE @DATA(i_div)
     WHERE werks IN @s_werks
       AND spart  = '10'
    ORDER BY werks.

    sgpi_texto( texto1 = 'Validaciones' ).
    LOOP AT i_listado ASSIGNING <listado>.
      DATA(l_brsch) = <listado>-brsch.
      CLEAR l_icono.
      IF <listado>-salk3 IS INITIAL.
        IF sy-datum(4) = p_gjahr AND sy-datum+4(2) = p_monat.
          <listado>-message = 'Stock sin valoración'.
        ELSE.
          <listado>-message = 'Stock son valoración en periodo seleccionado'.
        ENDIF.
        <listado>-error = 'X'.
        l_icono = icon_system_stop_recording.
      ELSEIF <listado>-fcalculo IS INITIAL.
        <listado>-message = 'No se ha podido encontrar fecha de producción del lote'.
        l_icono = icon_date.
        <listado>-error = 'X'.
      ELSEIF <listado>-kunnr IS INITIAL.
        <listado>-message = 'No se ha encontrado ningún cliente asignado. Asignamos lógica agricultura'.
        l_brsch = 'A01'.
        l_icono = icon_customer.
      ELSEIF <listado>-brsch IS INITIAL.
        <listado>-message = 'Existe cliente, pero tiene el campo tipología vacío. Asignamos lógica agricultura'.
        l_brsch = 'A01'.
        l_icono = icon_position_hr.
      ELSE.
        l_icono = icon_yellow_light.
      ENDIF.

      ASSIGN i_div[ werks = <listado>-werks ] TO FIELD-SYMBOL(<div>).
      IF sy-subrc = 0.
        <listado>-gsber = <div>-gsber.
      ENDIF.

      ASSIGN o_par->i_par[ campo  = 'DIVISION'
                           valor  = <listado>-gsber
                           valor2 = 'CECO' ] TO <par>.
      IF sy-subrc = 0.
        <listado>-kostl = <par>-atributo1.
        __poner_ceros <listado>-kostl.
      ENDIF.

      IF <listado>-error IS INITIAL.
        LOOP AT i_dep ASSIGNING FIELD-SYMBOL(<dep>) WHERE     brsch  = l_brsch
                                                          AND hasta <> 0
                                                          AND hasta <= <listado>-meses_stk
                                                          AND desde >= <listado>-meses_stk.
          <listado>-regla          = <dep>-regla.
          <listado>-depreciacion   = <dep>-valor.
          <listado>-tipo_industria = <dep>-tipo_industria.
          EXIT.
        ENDLOOP.
        IF <listado>-regla IS INITIAL.
          LOOP AT i_dep ASSIGNING <dep> WHERE brsch = l_brsch AND desde < <listado>-meses_stk.
            <listado>-regla          = <dep>-regla.
            <listado>-depreciacion   = <dep>-valor.
            <listado>-tipo_industria = <dep>-tipo_industria.
            EXIT.
          ENDLOOP.
        ENDIF.
        IF <listado>-regla IS INITIAL.
          IF line_exists( i_dep[ brsch = l_brsch ] ).
            <listado>-message = |No es necesario realizar depreciación por no tener el mínimo nº de meses parametrizados|.
            l_icono = icon_green_light.
            <listado>-error = 'X'.
            IF p_lmd = 'X'.
              DELETE i_listado.
              CONTINUE.
            ENDIF.
          ELSE.
            <listado>-message = |No se ha encontrado parametrización para mercado { l_brsch }|.
            l_icono = icon_red_light.
            <listado>-error = 'X'.
          ENDIF.
        ELSE.
          IF <listado>-depreciacion = 0.
            <listado>-message = |La regla encontrada tiene valor 0|.
            l_icono = icon_red_light.
            <listado>-error = 'X'.
          ELSE.
            <listado>-valor_depreciado = <listado>-salk3 * <listado>-depreciacion.
            <listado>-check            = 'X'.

            SELECT SINGLE bukrs FROM t001k
              INTO <listado>-bukrs
             WHERE bwkey = <listado>-werks.
          ENDIF.
        ENDIF.
      ENDIF.
      set_status_list( EXPORTING message = <listado>-message icono = l_icono CHANGING list = <listado> ).
    ENDLOOP.

    SORT i_listado BY matnr
                      werks
                      lgort
                      bwtar
                      kunnr.
  ENDMETHOD.

  METHOD generar_apuntes.
    DATA: i_bukrs            TYPE TABLE OF bukrs,
          l_t001             TYPE t001,
          l_cuenta_debe      TYPE hkont,
          l_cuenta_debe_txt  TYPE txt50_skat,
          l_cuenta_haber     TYPE hkont,
          l_cuenta_haber_txt TYPE txt50_skat,
          l_apuntes          TYPE t_apuntes,
          l_buzei            TYPE bseg-buzei.

    CLEAR bkpf.
    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X' AND error = ''.
      COLLECT <listado>-bukrs INTO i_bukrs.
    ENDLOOP.
    IF sy-subrc <> 0.
      MESSAGE 'Debe seleccionar algún registro válido' TYPE 'I'.
      RETURN.
    ELSE.
      IF lines( i_bukrs ) > 1.
        MESSAGE 'Seleccione una única sociedad' TYPE 'I'.
        RETURN.
      ELSE.
        SELECT SINGLE bukrs waers ktopl FROM t001
          INTO CORRESPONDING FIELDS OF l_t001
         WHERE bukrs = <listado>-bukrs.
        MOVE-CORRESPONDING l_t001 TO bkpf.
      ENDIF.
    ENDIF.

    bkpf-blart = o_par->get_atr1( campo = 'CLASE_DOC' ).
    IF bkpf-blart IS INITIAL.
      MESSAGE 'Parametrice CLASE_DOC' TYPE 'I'.
      RETURN.
    ENDIF.

    l_cuenta_debe = o_par->get_atr1( campo = 'CUENTA' valor = 'DEBE' ).
    IF l_cuenta_debe IS INITIAL.
      MESSAGE 'Parametrice CUENTA DEBE' TYPE 'I'.
      RETURN.
    ELSE.
      __poner_ceros l_cuenta_debe.
      SELECT SINGLE txt50 FROM skat
        INTO l_cuenta_debe_txt
       WHERE spras = sy-langu
         AND ktopl = l_t001-ktopl
         AND saknr = l_cuenta_debe.
      IF sy-subrc <> 0.
        MESSAGE |Cuenta { l_cuenta_debe } incorrecta| TYPE 'I'.
        RETURN.
      ENDIF.
    ENDIF.
    l_cuenta_haber = o_par->get_atr1( campo = 'CUENTA' valor = 'HABER' ).
    IF l_cuenta_haber IS INITIAL.
      MESSAGE 'Parametrice CUENTA HABER' TYPE 'I'.
      RETURN.
    ELSE.
      __poner_ceros l_cuenta_haber.
      SELECT SINGLE txt50 FROM skat
        INTO l_cuenta_haber_txt
       WHERE spras = sy-langu
         AND ktopl = l_t001-ktopl
         AND saknr = l_cuenta_haber.
      IF sy-subrc <> 0.
        MESSAGE |Cuenta { l_cuenta_haber } incorrecta| TYPE 'I'.
        RETURN.
      ENDIF.
    ENDIF.

    bkpf-budat = v_fecha_fin_mes.
    bkpf-bldat = v_fecha_fin_mes.

    LOOP AT i_listado ASSIGNING <listado> WHERE check = 'X' AND error = ''.
      CLEAR l_apuntes.
      MOVE-CORRESPONDING <listado> TO l_apuntes.
      CLEAR: l_apuntes-lights,
             l_apuntes-message.
      l_apuntes-sgtxt = |División: { <listado>-gsber } { <listado>-tipo_industria }|.
      l_apuntes-bschl = '40'.
      l_apuntes-hkont = l_cuenta_debe.
      l_apuntes-txt50 = l_cuenta_debe_txt.
      l_apuntes-dmbtr = <listado>-valor_depreciado.
      COLLECT l_apuntes INTO i_apuntes.
      l_apuntes-bschl = '50'.
      l_apuntes-hkont = l_cuenta_haber.
      l_apuntes-txt50 = l_cuenta_haber_txt.
      l_apuntes-dmbtr = - <listado>-valor_depreciado.
      CLEAR l_apuntes-kostl.
      COLLECT l_apuntes INTO i_apuntes.
    ENDLOOP.

    LOOP AT i_apuntes ASSIGNING FIELD-SYMBOL(<apunte>).
      l_buzei = l_buzei + 1.
      <apunte>-buzei = l_buzei.
    ENDLOOP.

    PERFORM guardar_botones_v2 IN PROGRAM zap_status.
    CALL SCREEN 0100.
    PERFORM restaurar_botones_v2 IN PROGRAM zap_status.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Realizar depreciación'  icon = icon_execute_object ucomm = 'EJEC' ).
    o_alv->add_button( button = 'F02' text = 'Excel'  icon = icon_xls ucomm = 'EXCEL' ).

    o_alv->set_layout( p_vari ).
    o_alv->set_field_hotspot( campo = 'MATNR,VBELN,KUNNR,CHARG,LBKUM,SALK3' auto  = 'X' ).
    o_alv->set_top_of_page( ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_text( campo = 'FECHA_101' valor = 'F.Alta' valor2 = 'Fecha del primer 101 del lote' ).
    o_alv->set_field_text( campo = 'FCALCULO' valor = 'F.Cálculo' valor2 = 'Fecha que se usará en los cálculos' ).
    o_alv->set_field_text( campo = 'DIAS_STK' valor = 'T.Stk.Días' valor2 = 'Días en stock desde fecha producción - primer día mes periodo seleccionado' ).
    o_alv->set_field_text( campo = 'MESES_STK' valor = 'T.Stk.Meses' valor2 = 'Meses en stock desde fecha producción - primer día mes periodo seleccionado' ).
    o_alv->set_field_quitar( 'CHECK,CLAVE,AGRUP,LOTES,CLIENTES,PEDIDOS,ERROR' ).
    o_alv->set_field_text( campo = 'REGLA' valor = 'Regla' valor2 = 'Regla para calculo depreciación' ).
    o_alv->set_field_text( campo = 'TIPO_INDUSTRIA' valor = 'Tipo Ind.' valor2 = 'Tipo Industria' ).

    o_alv->set_orden( 'MATNR,MAKTX,MEINS,MTART,WERKS,LGORT,CHARG' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.

  METHOD contabilizar.
    DATA: l_documentheader TYPE bapiache09,
          l_accountgl      TYPE bapiacgl09,
          l_currencyamount TYPE bapiaccr09,
          l_obj_key        TYPE awkey.

    " TODO: variable is assigned but never used (ABAP cleaner)
    DATA: i_documentheader TYPE STANDARD TABLE OF bapiache09,
          i_accountgl      TYPE STANDARD TABLE OF bapiacgl09,
          i_currencyamount TYPE STANDARD TABLE OF bapiaccr09,
          i_return         TYPE STANDARD TABLE OF bapiret2.
    DATA: l_log TYPE zdep_stock_log,
          i_log TYPE TABLE OF zdep_stock_log.

    l_documentheader-username   = sy-uname.
    l_documentheader-header_txt = bkpf-bktxt.
    l_documentheader-comp_code  = bkpf-bukrs.
    l_documentheader-doc_date   = bkpf-bldat.
    l_documentheader-pstng_date = bkpf-budat.
    l_documentheader-doc_type   = bkpf-blart.
    l_documentheader-ref_doc_no = bkpf-belnr.
    APPEND  l_documentheader TO i_documentheader.

    LOOP AT i_apuntes ASSIGNING FIELD-SYMBOL(<apunte>).
      l_accountgl-itemno_acc = <apunte>-buzei.
      l_accountgl-gl_account = <apunte>-hkont.
      l_accountgl-comp_code  = bkpf-bukrs.
      l_accountgl-costcenter = <apunte>-kostl.
      l_accountgl-item_text  = <apunte>-sgtxt.
      APPEND l_accountgl TO i_accountgl.

      l_currencyamount-itemno_acc = l_accountgl-itemno_acc.
      l_currencyamount-curr_type  = '00'.
      l_currencyamount-currency   = bkpf-waers.
      l_currencyamount-amt_doccur = <apunte>-dmbtr.
      APPEND l_currencyamount TO i_currencyamount.
    ENDLOOP.

    CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
      EXPORTING
        documentheader = l_documentheader
      IMPORTING
        obj_key        = l_obj_key
      TABLES
        accountgl      = i_accountgl
        currencyamount = i_currencyamount
        return         = i_return.

    IF line_exists( i_return[ type = 'E' ] ).
      ROLLBACK WORK.
      CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
        TABLES
          i_bapiret2_tab = i_return.
    ELSE.
      bkpf-belnr = l_obj_key(10).
      bkpf-gjahr = l_obj_key+14(4).
      bkpf-cpudt = sy-datum.
      bkpf-cputm = sy-uzeit.

      LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X' AND error IS INITIAL.
        <listado>-error  = 'Y'.
        <listado>-lights = zcl_ap_alv=>set_icono( icono = icon_okay mensaje = |Se ha contabilizado el documento { bkpf-belnr ALPHA = OUT }| ).
        CLEAR l_log.
        MOVE-CORRESPONDING <listado> TO l_log.
        MOVE-CORRESPONDING bkpf TO l_log.
        l_log-lfgja = p_gjahr.
        l_log-lfmon = p_monat.
        ASSIGN i_apuntes[ gsber          = <listado>-gsber
                          tipo_industria = <listado>-tipo_industria
                          kostl          = <listado>-kostl ] TO <apunte>.
        IF sy-subrc = 0.
          l_log-buzei = <apunte>-buzei.
        ENDIF.
        APPEND l_log TO i_log.
      ENDLOOP.

      MODIFY zdep_stock_log FROM TABLE i_log.
      CLEAR i_apuntes.

      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.

      MESSAGE |Se ha contabilizado documento { bkpf-belnr ALPHA = OUT }| TYPE 'I'.
      o_alv->refresh( ).
    ENDIF.
  ENDMETHOD.

  METHOD anular_documento.
    DATA: l_bkpf     TYPE bkpf,
          l_reversal TYPE bapiacrev,
          i_return   TYPE TABLE OF bapiret2.

    CLEAR: bsis,
           uf05a,
           error.

    SELECT SINGLE bukrs belnr gjahr awtyp awkey budat FROM bkpf
      INTO CORRESPONDING FIELDS OF l_bkpf
     WHERE bukrs = bukrs
       AND belnr = belnr
       AND gjahr = gjahr.
    IF sy-subrc <> 0.
      MESSAGE |No existe el documento { bukrs } { belnr } { gjahr }| TYPE 'I'.
      RETURN.
    ENDIF.

    MOVE-CORRESPONDING l_bkpf TO bsis.

    uf05a-stgrd = '01'.

    CALL SCREEN 0200 STARTING AT 3 3 ENDING AT 76 9.

    IF sy-ucomm = 'OK'.
      l_reversal-obj_type   = l_bkpf-awtyp.
      l_reversal-obj_key    = l_bkpf-awkey.
      l_reversal-obj_key_r  = l_bkpf-awkey.
      l_reversal-reason_rev = uf05a-stgrd.
      l_reversal-pstng_date = bsis-budat.

      CALL FUNCTION 'BAPI_ACC_DOCUMENT_REV_POST'
        EXPORTING
          reversal = l_reversal
          bus_act  = 'RFBU'
        TABLES
          return   = i_return[].

      IF line_exists( i_return[ type = 'E' ] ).
        error = 'X'.
        ROLLBACK WORK.
        CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
          TABLES
            i_bapiret2_tab = i_return.
      ELSE.
        ASSIGN i_return[ number = '605' ] TO FIELD-SYMBOL(<msg>).
        IF sy-subrc = 0.
          MESSAGE |Ha anulado el documento con { <msg>-message_v2(10) ALPHA = OUT }| TYPE 'I'.
        ELSE.
          MESSAGE 'Ha anulado el documento' TYPE 'I'.
        ENDIF.

        UPDATE zdep_stock_log
           SET anulado = 'X'
         WHERE bukrs = bukrs
           AND belnr = belnr
           AND gjahr = gjahr.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.

      ENDIF.
    ELSE.
      IF zcl_ap_popup=>confirmar( titulo = 'Confirme seguir sin anular'
                                  texto = 'No ha anulado documento'
                                  texto2  = '¿Está seguro de querer seguir sin hacerlo?' ) = ''.
        error = 'X'.
      ENDIF.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  prog         = 'DEPR_STOCK'
                  no_param     = 'X'
                  guardar_logz = '' ).

  PERFORM add_button IN PROGRAM zap_status
    USING 'M01'
          'Parámetros'
          ''
          ''.
  PERFORM add_button IN PROGRAM zap_status
    USING 'M02'
          'Log'(log)
          ''
          ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         o_dev              = o_prog ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  o_prog->initialization_i( EXPORTING boton_manual = |{ icon_doc }Especificaciones|
                            CHANGING sscrfields = sscrfields ).

  s_mtart[] = zcl_mm_material_zpt=>zintf_mm_material_master~s_get_mtart_compatibles( i_setname = zcl_mm_material_zpt=>_c_setname_value ). " EC *

AT SELECTION-SCREEN OUTPUT.
  zcl_ap_dynpro=>screen_input( group1 = 'NO' variable = '' ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'M02'.
      CALL FUNCTION 'SE16N_START'
        EXPORTING
          i_tab     = 'ZDEP_STOCK_LOG'
          i_display = 'X'.
    WHEN 'ONLI'.
      SELECT werks FROM t001w
        INTO TABLE @DATA(i_werks)
        WHERE werks IN @s_werks.
      LOOP AT i_werks ASSIGNING FIELD-SYMBOL(<werks>).
        AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
                        ID 'ACTVT' FIELD '03'
                        ID 'WERKS' FIELD <werks>-werks.
        IF sy-subrc <> 0.
          MESSAGE |No autorizado a centro { <werks>-werks }| TYPE 'E'.
        ENDIF.
      ENDLOOP.

    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.


AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.

  SET PF-STATUS 'ST_DYN' OF PROGRAM 'ZAP_STATUS'.
  SET TITLEBAR '100'.

  IF o_prog->o_grid IS INITIAL.
    o_prog->o_event = NEW #( boton_refrescar = 'X'
                             boton_excel     = 'Y'
                             o_prog          = o_prog ).

    o_prog->o_grid  = NEW #( estructura = ''
                            o_event    = o_prog->o_event ).

    o_prog->o_grid->add_button( button = 'F01' text = 'Contabilizar'  icon = icon_execute_object ucomm = 'CONT' forzar = 'X' ).
    o_prog->o_grid->set_campos_tabint( o_prog->i_apuntes ).
    o_prog->o_grid->set_field_quitar( 'CHECK' ).
    o_prog->o_grid->show( CHANGING tabla = o_prog->i_apuntes ).
  ELSE.
    o_prog->o_grid->refrescar_grid( ).
  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  o_prog->command_dynpro( EXPORTING o_alv = o_prog->o_grid
                          CHANGING i_listado = o_prog->i_apuntes i_listado_ini = o_prog->i_apuntes ).


  CASE o_prog->ucomm.
    WHEN 'CONT'.
      o_prog->contabilizar( ).
      IF NOT bkpf-belnr IS INITIAL.
        LEAVE TO SCREEN 0.
      ENDIF.

    WHEN 'BACK'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
  SET PF-STATUS 'OK_CANCEL' OF PROGRAM 'ZAP_STATUS'.
  SET TITLEBAR '200'.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  CASE sy-ucomm.
    WHEN '&IC1'.
      zcl_ap_doc_fi=>fb03( bukrs = bsis-bukrs belnr = bsis-belnr gjahr = bsis-gjahr ).
    WHEN 'OK'.
      LEAVE TO SCREEN 0.
    WHEN 'CANCEL'.
      CLEAR: uf05a,
             bsis.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_MOT_ANUL  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_mot_anul INPUT.

  CHECK sy-ucomm = 'OK'.
  IF uf05a-stgrd IS INITIAL.
    MESSAGE 'Informe motivo de anulación' TYPE 'E'.
  ENDIF.

ENDMODULE.
