*----------------------------------------------------------------------*
*   INCLUDE J_3RMOBVEDF04                                               *
*&---------------------------------------------------------------------*
*&      Form  alv_prepare
*&---------------------------------------------------------------------*
FORM alv_prepare
    USING p_pa_docs  TYPE j_3rmoptved2
          p_pa_adcst TYPE j_3rmoptved5.

  DATA: l_new(1) TYPE c,
        l_col    TYPE i.

  FIELD-SYMBOLS:  <structure> TYPE any.

  ASSIGN COMPONENT 'FIELD_LINK' OF STRUCTURE listmat TO <structure>.

  IF sy-subrc IS INITIAL.
    l_new = gc_true.
    l_col = 1.
  ELSE.
    CLEAR: l_new, l_col.
  ENDIF.


  IF NOT p_pa_docs IS INITIAL.
* define keyinfo for relatios two tables
    CLEAR gs_keyinfo.
    IF NOT l_new IS INITIAL.
      gs_keyinfo-header01 = 'FIELD_LINK'.
      gs_keyinfo-item01   = 'FIELD_LINK'.
    ELSE.
      gs_keyinfo-header01 = 'XMATNR'.
      gs_keyinfo-item01   = 'XMATNR'.
      gs_keyinfo-header02 = 'BWTAR'.
      gs_keyinfo-item02   = 'BWTAR'.
      gs_keyinfo-header03 = 'WERK'.
      gs_keyinfo-item03   = 'WERK'.
      gs_keyinfo-header04 = 'LGORT'.
      gs_keyinfo-item04   = 'LGORT'.
      gs_keyinfo-header05 = 'SOBKZ'.
      gs_keyinfo-item05   = 'SOBKZ'.
    ENDIF.
    PERFORM layout_build USING gs_layout.

* with document moving catalogue
    PERFORM e01_fieldcat_init  CHANGING gt_field_hier[].
* ANTY DUMP ----------- SEE NOTE 0315983 FOR EXAMPLE
    READ TABLE gt_field_hier INDEX 1 INTO ws_fieldcat.
    IF sy-subrc IS INITIAL.
      MOVE ws_fieldcat-tabname TO ws_fieldcat-qtabname.
      MODIFY gt_field_hier FROM ws_fieldcat TRANSPORTING qtabname
                 WHERE NOT qtabname IS INITIAL.
      READ TABLE gt_field_hier INDEX 1 INTO ws_fieldcat.
      MOVE ws_fieldcat-tabname TO ws_fieldcat-ctabname.
      MODIFY gt_field_hier FROM ws_fieldcat TRANSPORTING ctabname
                 WHERE NOT ctabname IS INITIAL.
    ENDIF.
* ANTY DUMP ----------- SEE NOTE 0315983 FOR EXAMPLE
* column header update
    LOOP AT gt_field_hier INTO ws_fieldcat.
      ws_fieldcat-lowercase = 'X'.                          "1133366
      IF ws_fieldcat-fieldname = 'LINKK'
          AND l_new IS INITIAL.
        ws_fieldcat-no_out = gc_true.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'DELTSALKD' OR
          ws_fieldcat-fieldname = 'DELTSALKK' OR
          ws_fieldcat-fieldname = 'YCHANGPRICE' OR
          ws_fieldcat-fieldname = 'BISMT' OR
          ws_fieldcat-fieldname = 'FIELD_LINK' OR
          ws_fieldcat-fieldname = 'HKONT' OR
          ws_fieldcat-fieldname = 'BWAERS' OR
          ws_fieldcat-fieldname = 'XBLNR' OR
          ws_fieldcat-fieldname = 'EBELN' OR
          ws_fieldcat-fieldname = 'RESWK' OR
          ws_fieldcat-fieldname = 'PSPNR' OR
          ws_fieldcat-fieldname = 'VBELN' OR
          ws_fieldcat-fieldname = 'POSNR' OR
          ws_fieldcat-fieldname = 'VTWEG' OR
          ws_fieldcat-fieldname = 'KUNNR_AG' OR
          ws_fieldcat-fieldname = 'NAME_AG' OR
          ws_fieldcat-fieldname = 'KUNNR_WE' OR
          ws_fieldcat-fieldname = 'NAME_WE' OR
          ws_fieldcat-fieldname = 'LIFNR' OR
          ws_fieldcat-fieldname = 'NAME_LIFNR' OR
          ws_fieldcat-fieldname = 'MFRNR' OR
          ws_fieldcat-fieldname = 'NAME_PRDLIFNR' OR
          ws_fieldcat-fieldname = 'BANNER_DOC' OR
          ws_fieldcat-fieldname = 'ROUTE' OR
          ws_fieldcat-fieldname = 'EKGRP' OR
          ws_fieldcat-fieldname = 'MTART' OR
          ws_fieldcat-fieldname = 'MATKL' OR
          ws_fieldcat-fieldname = 'BWTTY' OR
          ws_fieldcat-fieldname = 'BWKEY' OR
          ws_fieldcat-fieldname = 'LASTDATE' OR
          ws_fieldcat-fieldname = 'TBLSB' OR
          ws_fieldcat-fieldname = 'VPRSV' OR
          ws_fieldcat-fieldname = 'STPRS' OR
          ws_fieldcat-fieldname = 'PEINH' OR                "1270601
          ws_fieldcat-fieldname = 'BWMOD' OR
          ws_fieldcat-fieldname = 'KTOPL' OR
          ws_fieldcat-fieldname = 'LBKUM' OR
          ws_fieldcat-fieldname = 'SORTL' OR
          ws_fieldcat-fieldname = 'YBUKRS'.

        ws_fieldcat-no_out = gc_true.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'SOBKZ'.
        ws_fieldcat-emphasize = gc_true.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'XBELNR' OR
         ws_fieldcat-fieldname = 'BELEGNR' OR
         ws_fieldcat-fieldname = 'EBELN' OR
         ws_fieldcat-fieldname = 'VBELN' OR
         ws_fieldcat-fieldname = 'XMATNR'.
        ws_fieldcat-emphasize = gc_true.
        ws_fieldcat-hotspot = gc_true.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'BEGPRICE1'.
        ws_fieldcat-outputlen = 16.
        ws_fieldcat-ctabname = 'LISTMAT'.
        ws_fieldcat-cfieldname = 'WAERS'.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'MAKTX'.
        ws_fieldcat-outputlen = 48.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'BEGREMN' OR
          ws_fieldcat-fieldname = 'ENDREMN'.
        ws_fieldcat-qfieldname = 'YMEINS'.
        ws_fieldcat-qtabname   = 'LISTMAT'.
        ws_fieldcat-no_zero = gc_true.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'DELTLBKUMD' OR
          ws_fieldcat-fieldname = 'DELTLBKUMK'.
        ws_fieldcat-qfieldname = 'YMEINS'.
        ws_fieldcat-qtabname   = 'LISTMAT'.
        ws_fieldcat-no_out = gc_true.
        ws_fieldcat-no_zero = gc_true.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'BEGSUM' OR
          ws_fieldcat-fieldname = 'ENDSUM'.
        ws_fieldcat-no_zero = gc_true.
        ws_fieldcat-ctabname = 'LISTMAT'.
        ws_fieldcat-cfieldname = 'WAERS'.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'XCHANGPRICE'.
        ws_fieldcat-ctabname = 'DOCMAT'.
        ws_fieldcat-cfieldname = 'XWAERS'.
        ws_fieldcat-no_zero = gc_true.
        IF p_pa_adcst IS INITIAL.
          ws_fieldcat-no_out = gc_true.
        ENDIF.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'XMENSH_IN' OR
          ws_fieldcat-fieldname = 'XMENSH_OUT'.
        ws_fieldcat-qfieldname = 'XMEINS'.
        ws_fieldcat-qtabname   = 'DOCMAT'.
        ws_fieldcat-no_zero = gc_true.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'XDMSHB_IN' OR
          ws_fieldcat-fieldname = 'XDMSHB_OUT'.
        ws_fieldcat-ctabname = 'DOCMAT'.
        ws_fieldcat-cfieldname = 'XWAERS'.
        ws_fieldcat-no_zero = gc_true.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
* special column without visualization
      IF ws_fieldcat-fieldname = 'COLOR_BANNER'.
        ws_fieldcat-tech = gc_true.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'XWRBT_IN' OR
          ws_fieldcat-fieldname = 'XWRBT_OUT'.
        ws_fieldcat-no_out = gc_true.
        ws_fieldcat-no_zero = gc_true.
        ws_fieldcat-ctabname = 'DOCMAT'.
        ws_fieldcat-cfieldname = 'BWAERS'.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'J_3RFTYPEDOC'.
        ws_fieldcat-outputlen = 1.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'J_3RMKTNRTYPE'.
        ws_fieldcat-outputlen = 4.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'XKTNR'.
        ws_fieldcat-outputlen = 4.
        MODIFY gt_field_hier FROM ws_fieldcat.
      ENDIF.
    ENDLOOP.
    PERFORM e06_t_sort_build USING gt_sort[]. " p_pa_adcst.
  ELSE.
* without document moving catalogue
    PERFORM e02_fieldcat_init  CHANGING gt_field_simp[].
* ANTY DUMP ----------- SEE NOTE 0315983 FOR EXAMPLE
    READ TABLE gt_field_simp INDEX 1 INTO ws_fieldcat.
    IF sy-subrc IS INITIAL.
      MOVE ws_fieldcat-tabname TO ws_fieldcat-qtabname.
      MODIFY gt_field_simp FROM ws_fieldcat TRANSPORTING qtabname
                 WHERE NOT qtabname IS INITIAL.
      READ TABLE gt_field_simp INDEX 1 INTO ws_fieldcat.
      MOVE ws_fieldcat-tabname TO ws_fieldcat-ctabname.
      MODIFY gt_field_simp FROM ws_fieldcat TRANSPORTING ctabname
                 WHERE NOT ctabname IS INITIAL.
    ENDIF.
* ANTY DUMP ----------- SEE NOTE 0315983 FOR EXAMPLE
    LOOP AT gt_field_simp INTO ws_fieldcat.
      IF  ws_fieldcat-fieldname = 'VTWEG' OR
          ws_fieldcat-fieldname = 'BANNER_DOC' OR
          ws_fieldcat-fieldname = 'EKGRP' OR
          ws_fieldcat-fieldname = 'MTART' OR
          ws_fieldcat-fieldname = 'MATKL' OR
          ws_fieldcat-fieldname = 'FIELD_LINK' OR
          ws_fieldcat-fieldname = 'BWTTY' OR
          ws_fieldcat-fieldname = 'BWKEY' OR
          ws_fieldcat-fieldname = 'LASTDATE' OR
          ws_fieldcat-fieldname = 'TBLSB' OR
          ws_fieldcat-fieldname = 'VPRSV' OR
          ws_fieldcat-fieldname = 'STPRS' OR
          ws_fieldcat-fieldname = 'PEINH' OR                "1270601
          ws_fieldcat-fieldname = 'BWMOD' OR
          ws_fieldcat-fieldname = 'KTOPL' OR
          ws_fieldcat-fieldname = 'LBKUM' OR
          ws_fieldcat-fieldname = 'SORTL' OR
          ws_fieldcat-fieldname = 'YBUKRS'.

        ws_fieldcat-no_out = gc_true.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'XMATNR'.
        ws_fieldcat-col_pos = 1.
        ws_fieldcat-row_pos = 1.
        ws_fieldcat-emphasize = gc_true.
        ws_fieldcat-hotspot = gc_true.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'BWTAR'.
        ws_fieldcat-col_pos = 2.
        ws_fieldcat-row_pos = 1.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'WERK'.
        ws_fieldcat-col_pos = 3.
        ws_fieldcat-row_pos = 1.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'LGORT'.
        ws_fieldcat-col_pos = 4.
        ws_fieldcat-row_pos = 1.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'SOBKZ'.
        ws_fieldcat-col_pos = 5.
        ws_fieldcat-row_pos = 1.
        ws_fieldcat-outputlen = 1.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'LINKK'.
        IF NOT l_new IS INITIAL.
          ws_fieldcat-col_pos = 6.
          ws_fieldcat-row_pos = 1.
        ELSE.
          ws_fieldcat-no_out = gc_true.
        ENDIF.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'WAERS'.
        IF l_new IS INITIAL.
          ws_fieldcat-col_pos = 6.
          ws_fieldcat-row_pos = 1.
        ELSE.
          ws_fieldcat-no_out = gc_true.
        ENDIF.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'YMEINS'.
        ws_fieldcat-col_pos = 7.
        ws_fieldcat-row_pos = 1.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'BEGPRICE1'.
        ws_fieldcat-outputlen = 16.
        IF l_new IS INITIAL.
          ws_fieldcat-col_pos = 8.
          ws_fieldcat-row_pos = 1.
          MODIFY gt_field_simp FROM ws_fieldcat.
        ELSE.
          ws_fieldcat-col_pos = 15.
          ws_fieldcat-row_pos = 2.
          MODIFY gt_field_simp FROM ws_fieldcat.
        ENDIF.
      ENDIF.
      IF ws_fieldcat-fieldname = 'BEGREMN'.
        ws_fieldcat-col_pos = 9 + l_col.
        ws_fieldcat-row_pos = 1.
        ws_fieldcat-no_zero = gc_true.
        ws_fieldcat-qfieldname = 'YMEINS'.
        ws_fieldcat-qtabname   = 'LISTMAT'.
        ws_fieldcat-outputlen = 17.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'DELTLBKUMD'.
        ws_fieldcat-col_pos = 18 + l_col.
        ws_fieldcat-row_pos = 2.
        ws_fieldcat-qfieldname = 'YMEINS'.
        ws_fieldcat-qtabname   = 'LISTMAT'.
        ws_fieldcat-no_zero = gc_true.
        ws_fieldcat-outputlen = 17.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'ENDREMN'.
        ws_fieldcat-col_pos = 10  + l_col.
        ws_fieldcat-row_pos = 1.
        ws_fieldcat-qfieldname = 'YMEINS'.
        ws_fieldcat-qtabname   = 'LISTMAT'.
        ws_fieldcat-no_zero = gc_true.
        ws_fieldcat-outputlen = 17.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'DELTLBKUMK'.
        ws_fieldcat-col_pos = 19  + l_col.
        ws_fieldcat-row_pos = 2.
        ws_fieldcat-qfieldname = 'YMEINS'.
        ws_fieldcat-qtabname   = 'LISTMAT'.
        ws_fieldcat-no_zero = gc_true.
        ws_fieldcat-outputlen = 17.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'BEGSUM'.
        ws_fieldcat-col_pos = 11  + l_col.
        ws_fieldcat-row_pos = 1.
        ws_fieldcat-no_zero = gc_true.
        ws_fieldcat-outputlen = 17.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'DELTSALKD'.
        ws_fieldcat-col_pos = 20  + l_col.
        ws_fieldcat-row_pos = 2.
        ws_fieldcat-qfieldname = 'WAERS'.
        ws_fieldcat-qtabname   = 'LISTMAT'.
        ws_fieldcat-no_zero = gc_true.
        ws_fieldcat-outputlen = 17.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'ENDSUM'.
        ws_fieldcat-col_pos = 12  + l_col.
        ws_fieldcat-row_pos = 1.
        ws_fieldcat-no_zero = gc_true.
        ws_fieldcat-outputlen = 17.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'DELTSALKK'.
        ws_fieldcat-col_pos = 21 + l_col.
        ws_fieldcat-row_pos = 2.
        ws_fieldcat-qfieldname = 'WAERS'.
        ws_fieldcat-qtabname   = 'LISTMAT'.
        ws_fieldcat-no_zero = gc_true.
        ws_fieldcat-outputlen = 17.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'BKLAS'.
        ws_fieldcat-col_pos = 13.
        ws_fieldcat-row_pos = 2.
        ws_fieldcat-outputlen = 4.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'XSAKNR'.
        ws_fieldcat-col_pos = 14.
        ws_fieldcat-row_pos = 2.
        ws_fieldcat-outputlen = 10.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'BISMT'
          OR ws_fieldcat-fieldname = 'HKONT'.
        ws_fieldcat-col_pos = 22 .
        ws_fieldcat-row_pos = 2.
        ws_fieldcat-no_out = gc_true.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
      IF ws_fieldcat-fieldname = 'MAKTX'.
        ws_fieldcat-col_pos = 16 + l_col.
        ws_fieldcat-row_pos = 2.
        IF l_new IS INITIAL.
          IF p_pa_adcst IS INITIAL.
            ws_fieldcat-outputlen = 52.
          ELSE.
            ws_fieldcat-outputlen = 34.
          ENDIF.
        ELSE.
          IF p_pa_adcst IS INITIAL.
            ws_fieldcat-outputlen = 30.
          ELSE.
            ws_fieldcat-outputlen = 12.
          ENDIF.
        ENDIF.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.

      IF ws_fieldcat-fieldname = 'YCHANGPRICE'.
        ws_fieldcat-ctabname =   'LISTMAT'.
        ws_fieldcat-cfieldname = 'XWAERS'.
        ws_fieldcat-col_pos = 17  + l_col.
        ws_fieldcat-row_pos = 2.
        ws_fieldcat-no_zero = gc_true.
        ws_fieldcat-outputlen = 17.
        IF p_pa_adcst IS INITIAL.
          ws_fieldcat-no_out = gc_true.
        ENDIF.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
* special column without visualization
      IF ws_fieldcat-fieldname = 'COLOR_BANNER'.
        ws_fieldcat-tech = gc_true.
        MODIFY gt_field_simp FROM ws_fieldcat.
      ENDIF.
    ENDLOOP.
  ENDIF.

  PERFORM e03_eventtab_build USING gt_events[].


* PERFORM e07_sp_group_build USING gt_sp_group[].

ENDFORM.                    " alv_prepare
*&---------------------------------------------------------------------*
*&      Form  alv_show
*&---------------------------------------------------------------------*
FORM alv_show
    USING ppa_docs TYPE type_1c.

  IF ppa_docs = 'X'.

    CALL FUNCTION 'REUSE_ALV_HIERSEQ_LIST_DISPLAY'
      EXPORTING
        i_callback_program       = g_repid
        i_callback_pf_status_set = gc_status_hier
        i_callback_user_command  = gc_user_command
        is_layout                = gs_layout
        it_fieldcat              = gt_field_hier[]
*       it_special_groups        = gt_sp_group[]
        it_sort                  = gt_sort[]
*       i_default                = g_default
        i_save                   = gc_save
        is_variant               = g_variant
        it_events                = gt_events[]
*       it_event_exit            = g_event_exit
        i_tabname_header         = gc_tabname_header
        i_tabname_item           = gc_tabname_item
        is_keyinfo               = gs_keyinfo
      TABLES
        t_outtab_header          = listmat[]
        t_outtab_item            = docmat[].
  ELSE.
    CALL FUNCTION 'REUSE_ALV_LIST_DISPLAY'
      EXPORTING
*       I_INTERFACE_CHECK        = ' '
        i_callback_program       = g_repid
        i_callback_pf_status_set = gc_status_simp
        i_callback_user_command  = gc_user_command
        i_structure_name         = gc_structure_head
*       is_layout                = gs_layout
        it_fieldcat              = gt_field_simp[]
*       IT_EXCLUDING             =
*       IT_SPECIAL_GROUPS        =
*       IT_SORT                  =
*       IT_FILTER                =
*       IS_SEL_HIDE              =
*       I_DEFAULT                = 'X'
        i_save                   = gc_save
        is_variant               = g_variant
        it_events                = gt_events[]
*       it_event_exit            = g_event_exit
*       IS_PRINT                 =
*       I_SCREEN_START_COLUMN    = 0
*       I_SCREEN_START_LINE      = 0
*       I_SCREEN_END_COLUMN      = 0
*       I_SCREEN_END_LINE        = 0
*       IMPORTING
*       E_EXIT_CAUSED_BY_CALLER  =
*       ES_EXIT_CAUSED_BY_USER   =
      TABLES
        t_outtab                 = listmat[].
*       EXCEPTIONS
*           PROGRAM_ERROR            = 1
*           OTHERS                   = 2.
  ENDIF.


ENDFORM.                    " alv_show
*&---------------------------------------------------------------------*
*&      Form  layout_build
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_LAYOUT  text
*----------------------------------------------------------------------*
FORM layout_build
    USING p_gs_layout TYPE slis_layout_alv.
  p_gs_layout-info_fieldname = 'COLOR_BANNER'.
  p_gs_layout-group_change_edit = gc_true.
ENDFORM.                    " layout_build
*&---------------------------------------------------------------------*
*&      Form  e01_fieldcat_init
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GT_FIELD_HIER[]  text
*----------------------------------------------------------------------*
FORM e01_fieldcat_init
    CHANGING e01_lt_fieldcat TYPE slis_t_fieldcat_alv.

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
*     I_PROGRAM_NAME     =
      i_internal_tabname = gc_tabname_header
      i_structure_name   = gc_structure_head
*     I_CLIENT_NEVER_DISPLAY       = 'X'
*     I_INCLNAME         =
*     i_bypassing_buffer = gc_true
*     I_BUFFER_ACTIVE    =
*     I_MODE             =
    CHANGING
      ct_fieldcat        = e01_lt_fieldcat[]
*  exceptions
*     inconsistent_interface       = 1
*     program_error      = 2
*     others             = 3
    .
*if sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*endif.


*CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
*    EXPORTING
**           I_PROGRAM_NAME         =
*        i_internal_tabname     = gc_tabname_header
*        i_structure_name       = gc_structure_head
**           I_CLIENT_NEVER_DISPLAY = gc_true
*    CHANGING
*        ct_fieldcat            = e01_lt_fieldcat[].

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
*     I_PROGRAM_NAME     =
      i_internal_tabname = gc_tabname_item
      i_structure_name   = gc_structure_items
*     I_CLIENT_NEVER_DISPLAY = gc_true
    CHANGING
      ct_fieldcat        = e01_lt_fieldcat[].

* Hide HKONT field for docmat level, as it is not filled       "1375994
  DELETE e01_lt_fieldcat[]
    WHERE fieldname = 'HKONT' AND tabname = gc_tabname_item.

ENDFORM.                    " e01_fieldcat_init
*&---------------------------------------------------------------------*
*&      Form  e02_fieldcat_init
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GT_FIELD_SIMP[]  text
*----------------------------------------------------------------------*
FORM e02_fieldcat_init
    CHANGING e01_lt_fieldcat TYPE slis_t_fieldcat_alv.

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
*     I_PROGRAM_NAME     =
      i_internal_tabname = gc_tabname_header
      i_structure_name   = gc_structure_head
*     I_CLIENT_NEVER_DISPLAY = gc_true
    CHANGING
      ct_fieldcat        = e01_lt_fieldcat[].
ENDFORM.                    " e02_fieldcat_init
*&---------------------------------------------------------------------*
*&      Form  e03_eventtab_build
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_EVENTS[]  text
*----------------------------------------------------------------------*
FORM e03_eventtab_build
    USING e03_lt_events TYPE slis_t_event.

  DATA: ls_event TYPE slis_alv_event,
        l_rec    TYPE i.

*
  CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
    EXPORTING
      i_list_type = 0
    IMPORTING
      et_events   = e03_lt_events.

  READ TABLE e03_lt_events
      WITH KEY name = slis_ev_top_of_page
          INTO ls_event.
  IF sy-subrc IS INITIAL.
    l_rec = sy-tabix.
    MOVE gc_formname_top_of_page TO ls_event-form.
    MODIFY e03_lt_events FROM ls_event INDEX l_rec.
  ENDIF.
  READ TABLE e03_lt_events
      WITH KEY name = slis_ev_end_of_page
          INTO ls_event.
  IF sy-subrc IS INITIAL.
    l_rec = sy-tabix.
    MOVE gc_formname_end_of_page TO ls_event-form.
    MODIFY e03_lt_events FROM ls_event INDEX l_rec.
  ENDIF.

ENDFORM.                    " e03_eventtab_build
*&---------------------------------------------------------------------*
*&      Form  e06_t_sort_build
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_SORT[]  text
*----------------------------------------------------------------------*
FORM e06_t_sort_build
    USING e06_lt_sort TYPE slis_t_sortinfo_alv.
*    pp_pa_adcst TYPE J_3RMOPTVED5.

  DATA: ls_sort TYPE slis_sortinfo_alv.

  CLEAR ls_sort.
*IF NOT PP_pa_adcst IS INITIAL.
**    LS_SORT-TABNAME   = G_TABNAME_HEADER.
**    LS_SORT-SPOS      = 1.
**    LS_SORT-FIELDNAME = 'XMATNR'.
**    APPEND LS_SORT TO E06_LT_SORT.
**    LS_SORT-SPOS      = 2.
**    LS_SORT-FIELDNAME = 'BWTAR'.
**    APPEND LS_SORT TO E06_LT_SORT.
*    LS_SORT-SPOS      = 1.
*    LS_SORT-FIELDNAME = 'WERK'.
*    APPEND LS_SORT TO E06_LT_SORT.
*    LS_SORT-SPOS      = 2.
*    LS_SORT-FIELDNAME = 'LGORT'.
*    LS_SORT-GROUP = '*'.
*    APPEND LS_SORT TO E06_LT_SORT.
*    LS_SORT-UP        = gc_true.
*    LS_SORT-TABNAME   = G_TABNAME_ITEM.
*    LS_SORT-SPOS      = 3.
*    LS_SORT-FIELDNAME = 'BUDAT'.
*    CLEAR LS_SORT-GROUP.
*    APPEND LS_SORT TO E06_LT_SORT.
*ELSE.
  ls_sort-up        = gc_true.
  ls_sort-tabname   = gc_tabname_item.
  ls_sort-spos      = 1.
  ls_sort-fieldname = 'BUDAT'.
  CLEAR ls_sort-group.
  APPEND ls_sort TO e06_lt_sort.
*ENDIF.

ENDFORM.                    " e06_t_sort_build

*&---------------------------------------------------------------------*
*&      Form  TOP_OF_PAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM top_of_page.                                           "#EC CALLED
* header ALV filling
  PERFORM e04_comment_build
      USING g_dlow  g_dhigh
            gd_made gt_made
*        l_sort
          gt_list_top_of_page[].

ENDFORM.                    " TOP_OF_PAGE
*&---------------------------------------------------------------------*
*&      Form  e04_comment_build
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_G_DLOW  text
*      -->P_G_DHIGH  text
*      -->P_GD_MADE  text
*      -->P_GT_MADE  text
*      -->P_GT_LIST_TOP_OF_PAGE[]  text
*----------------------------------------------------------------------*
FORM e04_comment_build
    USING p_data_low  TYPE d
          p_data_high TYPE d
          p_dtstrl    LIKE gd_made
          p_time      LIKE gt_made
*          l_sort      TYPE c
    e04_lt_top_of_page TYPE slis_t_listheader.

  DATA: ls_line       TYPE slis_listheader,
        l_linesize(3) TYPE n,
        l_pageno(4)   TYPE n,
        l_dtstrl(10)  TYPE c,
        l_dtstrh(10)  TYPE c.
*      l_time(8) TYPE c.
*      l_lgort      LIKE j_3rmlistmat-lgort.

  WRITE: p_data_low  TO l_dtstrl,
         p_data_high TO l_dtstrh.

  CLEAR ls_line.
  REFRESH e04_lt_top_of_page.
  ls_line-typ  = gc_item_typ_s.
  ls_line-info = text-004.
  APPEND ls_line TO e04_lt_top_of_page.
  CONCATENATE text-005 l_dtstrl text-006 l_dtstrh
      INTO ls_line-info SEPARATED BY space.
  APPEND ls_line TO e04_lt_top_of_page.

  CONCATENATE text-008 p_dtstrl p_time
      INTO ls_line-info SEPARATED BY space.
  APPEND ls_line TO e04_lt_top_of_page.
* CLEAR ls_line.
*IF NOT L_SORT IS INITIAL.
*    PERFORM GET_LGORT USING SY-PAGNO CHANGING L_LGORT.
*
*    CONCATENATE TEXT-210 L_LGORT
*        INTO LS_LINE-INFO SEPARATED BY SPACE.
*    APPEND LS_LINE TO E04_LT_TOP_OF_PAGE.
*ENDIF.
  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary = e04_lt_top_of_page.
* page number
  l_linesize = sy-linsz - 6.
  l_pageno = sy-pagno. "- 1.
  WRITE: AT (l_linesize) l_pageno NO-ZERO.

ENDFORM.                    " e04_comment_build

*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM end_of_page.                                           "#EC CALLED
* ULINE.
* WRITE sy-pagno.
* ULINE.
ENDFORM.                    " END_OF_PAGE
*---------------------------------------------------------------------*
*  FORM PF_STATUS_SET for two tables materials and dokumments         *
*---------------------------------------------------------------------*
FORM pf_status_hier                                         "#EC CALLED
    USING extab TYPE slis_t_extab.
  SET PF-STATUS 'STATUS_HIER' EXCLUDING extab.
ENDFORM.
*---------------------------------------------------------------------*
*  FORM PF_STATUS_SET_ONE for two tables materials                    *
*---------------------------------------------------------------------*
FORM pf_status_simp                                         "#EC CALLED
    USING extab TYPE slis_t_extab.
  SET PF-STATUS 'STATUS_SIMP' EXCLUDING extab.
ENDFORM.

*---------------------------------------------------------------------*
*       FORM doc_show                                                 *
*---------------------------------------------------------------------*
FORM doc_show                                               "#EC CALLED
     USING rf_ucomm TYPE syucomm
        rs_selfield TYPE slis_selfield.

  DATA:
    lw_docmat   TYPE type_docmat,
    lw_listmat  TYPE type_listmat,
    l_rf_ucomm  TYPE syucomm,
    l_pspnr(30) TYPE c,
    l_str(30)   TYPE c.
  MOVE rs_selfield-sel_tab_field TO l_str.
  TRANSLATE l_str TO UPPER CASE.
  l_rf_ucomm = rf_ucomm.
  CLEAR rf_ucomm.

  CASE l_rf_ucomm.
    WHEN  '&IC1'.                      "interactive call
      IF l_str(6) EQ 'DOCMAT'.
        READ TABLE docmat INTO lw_docmat
          INDEX rs_selfield-tabindex.
        IF sy-subrc IS INITIAL.
          IF  NOT lw_docmat-notrights IS INITIAL.
            MESSAGE e003.
            EXIT.
          ENDIF.
* accounting document
          IF l_str+7(6) EQ 'XBELNR'.
            IF NOT lw_docmat-xbelnr IS INITIAL
                AND lw_docmat-xbelnr NE gc_doc_phantom.
              SET PARAMETER ID 'BUK' FIELD lw_docmat-xbukrs.
              SET PARAMETER ID 'BLN' FIELD lw_docmat-xbelnr.
              SET PARAMETER ID 'GJR' FIELD lw_docmat-xgjahr.
              CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
            ENDIF.
* material document
          ELSEIF l_str+7(7) EQ 'BELEGNR'.
            IF NOT lw_docmat-belegnr IS INITIAL
                AND lw_docmat-belegnr NE gc_doc_phantom.
              SET PARAMETER ID 'MBN' FIELD lw_docmat-belegnr.
              SET PARAMETER ID 'MJA' FIELD lw_docmat-xgjahr.
              CALL TRANSACTION 'MB03' AND SKIP FIRST SCREEN.
            ENDIF.
* purchase order
          ELSEIF l_str+7(5) EQ 'EBELN'.
            IF NOT lw_docmat-ebeln IS INITIAL.
              SET PARAMETER ID 'BES' FIELD lw_docmat-ebeln.
              CALL TRANSACTION 'ME23' AND SKIP FIRST SCREEN.
            ENDIF.
* sale order
          ELSEIF l_str+7(5) EQ 'VBELN'.
            IF NOT lw_docmat-vbeln IS INITIAL.
              SET PARAMETER ID 'AUN' FIELD lw_docmat-vbeln.
              CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
            ENDIF.
* stock overview
          ELSEIF l_str+7(6) EQ 'XMATNR'.
            SET PARAMETER ID 'MAT' FIELD lw_docmat-xmatnr.
            SET PARAMETER ID 'WRK' FIELD lw_docmat-werk.
            SET PARAMETER ID 'LAG' FIELD lw_docmat-lgort.
            SET PARAMETER ID 'CHA' FIELD lw_docmat-bwtar.
            CALL TRANSACTION 'MMBE'
            AND SKIP FIRST SCREEN.
* WBS element
          ELSEIF l_str+7(5) EQ 'PSPNR'.
            IF NOT lw_docmat-pspnr IS INITIAL.
              WRITE lw_docmat-pspnr TO l_pspnr.
              SET PARAMETER ID 'PRO' FIELD l_pspnr.
              CALL TRANSACTION 'CJ03' AND SKIP FIRST SCREEN.
            ENDIF.
          ELSE.
            rf_ucomm = '&ETA'.
          ENDIF.
        ELSE.
          rf_ucomm = '&ETA'.
        ENDIF.
      ELSEIF l_str(7) EQ 'LISTMAT'.
        READ TABLE listmat INTO lw_listmat
          INDEX rs_selfield-tabindex.
        IF sy-subrc IS INITIAL.
          IF NOT lw_listmat-notrights IS INITIAL.
            MESSAGE e004.
            EXIT.
          ENDIF.
          IF l_str+8(6) EQ 'XMATNR'.
            SET PARAMETER ID 'MAT' FIELD lw_listmat-xmatnr.
            SET PARAMETER ID 'WRK' FIELD lw_listmat-werk.
            SET PARAMETER ID 'LAG' FIELD lw_listmat-lgort.
            SET PARAMETER ID 'CHA' FIELD lw_listmat-bwtar.
            CALL TRANSACTION 'MMBE'
            AND SKIP FIRST SCREEN.
          ELSE.
            rf_ucomm = '&ETA'.
          ENDIF.
        ELSE.
          rf_ucomm = '&ETA'.
        ENDIF.
      ENDIF.
  ENDCASE.
ENDFORM.                " doc_show
*&---------------------------------------------------------------------*
*&      Form  CONVERTIR_UMA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM convertir_uma . " cvivo
  DATA: l_menge TYPE bstmg,
        l_ok(1).

  IF pa_meinh IS NOT INITIAL.
    LOOP AT listmat ASSIGNING <list> WHERE ymeins NE pa_meinh.
      CLEAR: l_ok, l_menge.
      MOVE <list>-begremn TO l_menge.

      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
        EXPORTING
          i_matnr              = <list>-xmatnr
          i_in_me              = <list>-ymeins
          i_out_me             = pa_meinh
          i_menge              = l_menge
        IMPORTING
          e_menge              = l_menge
        EXCEPTIONS
          error_in_application = 1
          error                = 2
          OTHERS               = 3.

      IF sy-subrc EQ 0.

        MOVE l_menge TO <list>-begremn.
        MOVE abap_true TO l_ok.
      ENDIF.

      IF sy-subrc EQ 0.
        CLEAR l_menge.
        MOVE <list>-endremn TO l_menge.

        CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
          EXPORTING
            i_matnr              = <list>-xmatnr
            i_in_me              = <list>-ymeins
            i_out_me             = pa_meinh
            i_menge              = l_menge
          IMPORTING
            e_menge              = l_menge
          EXCEPTIONS
            error_in_application = 1
            error                = 2
            OTHERS               = 3.

        IF sy-subrc EQ 0.
          MOVE l_menge TO <list>-endremn.
          MOVE abap_true TO l_ok.
        ENDIF.

        CLEAR l_menge.
        IF <list>-deltlbkumd NE 0.
          MOVE <list>-deltlbkumd TO l_menge.

          CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
            EXPORTING
              i_matnr              = <list>-xmatnr
              i_in_me              = <list>-ymeins
              i_out_me             = pa_meinh
              i_menge              = l_menge
            IMPORTING
              e_menge              = l_menge
            EXCEPTIONS
              error_in_application = 1
              error                = 2
              OTHERS               = 3.

          IF sy-subrc EQ 0.
            MOVE l_menge TO <list>-deltlbkumd.
            MOVE abap_true TO l_ok.
          ENDIF.
        ENDIF.

        CLEAR l_menge.
        IF <list>-deltlbkumk NE 0.
          MOVE <list>-deltlbkumk TO l_menge.

          CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
            EXPORTING
              i_matnr              = <list>-xmatnr
              i_in_me              = <list>-ymeins
              i_out_me             = pa_meinh
              i_menge              = l_menge
            IMPORTING
              e_menge              = l_menge
            EXCEPTIONS
              error_in_application = 1
              error                = 2
              OTHERS               = 3.
          IF sy-subrc EQ 0.
            MOVE l_menge TO <list>-deltlbkumk.
            MOVE abap_true TO l_ok.
          ENDIF.

        ENDIF.
      ENDIF.
      IF l_ok NE space.
        <list>-ymeins = pa_meinh.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM. " cvivo
