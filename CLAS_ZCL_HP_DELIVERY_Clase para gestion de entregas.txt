
class ZCL_HP_DELIVERY definition
  public
  final
  create public .

public section.

  types:
    BEGIN OF ty_data,
    s_delivery_header       TYPE bapidlvhdr,
    s_delivery_header_sts   TYPE bapidlvhdrsts,
    t_delivery_item         TYPE bapidlvitem_t,
    t_delivery_item_sts     TYPE bapidlvitemsts_t,
    t_delivery_partner      TYPE bapidlvpartners_t,
    t_document_flow         TYPE bapidocflow_t,
    t_foreign_trade_header  TYPE ztt_bapiforeigntradehdr,
    t_foreign_trade_item    TYPE ztt_bapiforeigntradeitem,
    t_hu_header             TYPE ztt_BAPIDLVHANDLINGUNITHDR,
  END OF ty_data .

  data _VBELN type VBELN_VL read-only .
  data _VBTYP type VBTYP read-only .
  data _S_DATA type TY_DATA read-only .

  class-methods S_CREATE_INB_DELIVERY_4_EBELN
    importing
      !I_EBELN type EBELN
      !I_EBELP type EBELP
      !I_VERUR type VERUR_VL
      !I_VBSK type VBSK optional
      !I_NO_COMMIT type BOOLEAN default ' '
    returning
      value(R_O_DELIVERY) type ref to ZCL_HP_DELIVERY
    raising
      ZCX_EXCEPTION .
  class-methods S_CREATE_INB_DELIVERY_4_EBELP
    importing
      !I_EBELN type EBELN
      !I_EBELP type EBELP
      !I_VERUR type VERUR_VL
      !I_LFART type LFART default 'EL'
      !I_VGTYP type VGTYP default 'V'
      !I_KZAZU type KZAZU_D default 'X'
      !I_LFIMG type LFIMG default ''
      !I_VBSK type VBSK optional
      !I_NO_COMMIT type BOOLEAN default ' '
    returning
      value(R_O_DELIVERY) type ref to ZCL_HP_DELIVERY
    raising
      ZCX_EXCEPTION .
  class-methods S_CREATE_INB_DELIVERY_W_DATA
    importing
      !I_VBSK type VBSK optional
      !I_NO_COMMIT type BOOLEAN default ' '
      !I_T_XKOMDLGN type XKOMDLGN
    returning
      value(R_O_DELIVERY) type ref to ZCL_HP_DELIVERY
    raising
      ZCX_EXCEPTION .
  class-methods S_GET_XKOMDLGN_4_PO_DATA
    importing
      !I_EBELN type EBELN
      !I_EBELP type EBELP
      !I_CHARG type CHARG_D optional
      !I_LICHN type LICHN optional
      !I_VERUR type VERUR_VL optional
      !I_LFART type LFART default 'EL'
      !I_VGTYP type VGTYP default 'V'
      !I_KZAZU type KZAZU_D default 'X'
      !I_LFIMG type LFIMG default ''
    returning
      value(R_S_KOMDLGN) type KOMDLGN
    raising
      ZCX_EXCEPTION .
  methods CONSTRUCTOR
    importing
      !I_VBELN type VBELN_VL
    raising
      ZCX_EXCEPTION .
  methods GET_DLV_ITEM
    importing
      !I_VBELP type VBELP
      !I_GET_SUBPOSITIONS type BOOLEAN default 'X'
    returning
      value(R_T_BAPIDLVITEM) type BAPIDLVITEM_T .
  methods GET_DLV_ITEM_STS
    importing
      !I_VBELP type VBELP
      !I_GET_SUBPOSITIONS type BOOLEAN default 'X'
    returning
      value(R_T_BAPIDLVITEM_STS) type BAPIDLVITEMSTS_T .
  methods IS_PICKED
    returning
      value(R_BOOL) type BOOLEAN .
  methods IS_POSTED
    returning
      value(R_BOOL) type BOOLEAN .
  methods POST
    raising
      ZCX_EXCEPTION .
  class-methods S_GET_DELIVERY_4_VERUR
    importing
      !I_VERUR type VERUR_VL
    returning
      value(R_O_DELIVERY) type ref to ZCL_HP_DELIVERY .
  methods DELETE .
protected section.
private section.

  class-data _SC_CL_MSGID_LABEL type MSGID value 'ZCL_HP_DELIVERY' ##NO_TEXT.
  class-data _S_VBTYP_INBOUND_DELIVERY type VBTYP value 'I' ##NO_TEXT.
  class-data _S_VBTYP_OUTBOUND_DELIVERY type VBTYP value 'O' ##NO_TEXT.

  methods _CHANGE_DELIVERY_INBOUND
    importing
      !I_UPDATE_INDICATOR type CHAR1
      !I_T_ITEMS_2_CHANGE type ZTT_BAPIIBDLVITEMCHG optional
    raising
      ZCX_EXCEPTION .
  methods _POST_INB_DELIVERY
    raising
      ZCX_EXCEPTION .
  methods _READ_DATA
    raising
      ZCX_EXCEPTION .
  methods _SET_NEW_INBDLV_ITEM .
endclass. "ZCL_HP_DELIVERY definition
class ZCL_HP_DELIVERY implementation.
METHOD _change_delivery_inbound.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_items         TYPE TABLE OF bapiibdlvitemchg,
        lt_items_control TYPE TABLE OF bapiibdlvitemctrlchg,
        lt_bapiret2      TYPE TABLE OF bapiret2.

  DATA: ls_header_data    TYPE bapiibdlvhdrchg,
        ls_header_control TYPE bapiibdlvhdrctrlchg,
        ls_techn_control  TYPE bapidlvcontrol,
        ls_item_control   TYPE bapiibdlvitemctrlchg.

  DATA: lv_message TYPE scx_attrname.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

  IF ( i_update_indicator IS INITIAL ).
    CLEAR: lv_message.
    MOVE text-004 TO lv_message.
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno   = '004' i_msgid   = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty   = 'E' i_message = lv_message ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** MOVE IMPORT DATA TO WORK DATA

  MOVE-CORRESPONDING i_t_items_2_change[] TO lt_items[].

**** FILL DATA

*** HEADER

** DATA

  CLEAR: ls_header_data.
  MOVE me->_vbeln TO ls_header_data-deliv_numb.

** CONTROL

  "Marcamos cambio de cantidad
  CLEAR: ls_header_control.
  MOVE me->_vbeln TO ls_header_control-deliv_numb.

  "
  CASE i_update_indicator.
    WHEN 'A'.
      "No hacemos nada
    WHEN 'C'.
      "No hacemos nada
    WHEN 'D'.
      "Marcamos borrado de línea
      MOVE abap_true TO ls_header_control-dlv_del.
    WHEN OTHERS.
      "No hacemos nada
  ENDCASE.

** TECH CONTROL

  CLEAR ls_techn_control.
  MOVE abap_true TO ls_techn_control-upd_ind.

*** ITEM

** CONTROL

  CLEAR: lt_items_control.
  LOOP AT lt_items INTO DATA(ls_item).

    CLEAR: ls_item_control.
    IF ( ls_item-deliv_numb IS NOT INITIAL AND ls_item-deliv_item IS NOT INITIAL ).
      MOVE ls_item-deliv_numb TO ls_item_control-deliv_numb.
      MOVE ls_item-deliv_item TO ls_item_control-deliv_item.

      CASE i_update_indicator.
        WHEN 'A'.
          "No hacemos nada
        WHEN 'C'.
          "Marcamos cambio de cantidad
          MOVE abap_true TO ls_item_control-chg_delqty.
        WHEN 'D'.
          "Marcamos borrado de línea
          MOVE abap_true TO ls_item_control-del_item.
        WHEN OTHERS.
          "No hacemos nada
      ENDCASE.

      APPEND ls_item_control TO lt_items_control.
    ENDIF.

  ENDLOOP.

**** CHANGE INBOUND DELIVERY

  CALL FUNCTION 'BAPI_INB_DELIVERY_CHANGE'
    EXPORTING
      header_data    = ls_header_data
      header_control = ls_header_control
      delivery       = me->_vbeln
*     TECHN_CONTROL  =
    TABLES
*     HEADER_PARTNER =
*     HEADER_PARTNER_ADDR        =
*     HEADER_DEADLINES           =
      item_data      = lt_items
      item_control   = lt_items_control
*     ITEM_SERIAL_NO =
*     EXTENSION1     =
*     EXTENSION2     =
      return         = lt_bapiret2
*     TOKENREFERENCE =
*     HANDLING_UNIT_HEADER       =
*     HANDLING_UNIT_ITEM         =
*     PARTIAL_GR_OBJECTS         =
    .

  READ TABLE lt_bapiret2 INTO DATA(ls_bapiret2) WITH KEY type = 'E'.
  IF ( sy-subrc EQ 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = ls_bapiret2-number i_msgid = ls_bapiret2-id i_msgty = ls_bapiret2-type i_msgv1   = ls_bapiret2-message_v1 i_msgv2 =
ls_bapiret2-message_v2 i_msgv3 = ls_bapiret2-message_v3 i_msgv4 = ls_bapiret2-message_v4  ) ).
  ENDIF.

ENDMETHOD.
METHOD _post_inb_delivery.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_prot TYPE TABLE OF prott.

  DATA: ls_vbkok TYPE vbkok,
        ls_td100 TYPE scx_t100key.

  DATA: lv_error TYPE xfeld.

**********************************************************************
* Validaciones
**********************************************************************

**** CHECK IF ALREADY POSTED

  IF ( me->is_posted( ) ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '602' i_msgid = 'VL' i_msgty = 'E' ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** SET VBKOK DATA

  ls_vbkok-wadat_ist = sy-datum.
  ls_vbkok-vbeln_vl  = me->_vbeln.
  ls_vbkok-komue = 'X'.
  ls_vbkok-wabuc = 'X'.

**** REFRESH HU PACKING

  CALL FUNCTION 'HU_PACKING_REFRESH'.

**** REFRESH DELIVERY BUFFER

  CALL FUNCTION 'LE_DELIVERY_REFRESH_BUFFER'
    EXCEPTIONS
      no_key_specified = 0
      OTHERS           = 0.

**** POST

  CALL FUNCTION 'WS_DELIVERY_UPDATE_2'
    EXPORTING
      vbkok_wa       = ls_vbkok
      delivery       = me->_vbeln
      update_picking = 'X'
    IMPORTING
      ef_error_any   = lv_error
    TABLES
      prot           = lt_prot.

**** CHECK RESULT AND SAVE

  READ TABLE lt_prot INTO DATA(ls_prot) WITH KEY msgty = 'E'.
  IF ( sy-subrc EQ 0 ).
    CLEAR: ls_td100.
    MOVE ls_prot-msgno TO ls_td100-msgno.
    MOVE ls_prot-msgid TO ls_td100-msgid.
    MOVE ls_prot-msgv1 TO ls_td100-attr1.
    MOVE ls_prot-msgv2 TO ls_td100-attr2.
    MOVE ls_prot-msgv3 TO ls_td100-attr3.
    MOVE ls_prot-msgv4 TO ls_td100-attr4.
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = ls_td100 ).
  ENDIF.

  CLEAR: ls_prot.
  READ TABLE lt_prot INTO ls_prot WITH KEY msgty = 'A'.
  IF ( sy-subrc EQ 0 ).
    CLEAR: ls_td100.
    MOVE ls_prot-msgno TO ls_td100-msgno.
    MOVE ls_prot-msgid TO ls_td100-msgid.
    MOVE ls_prot-msgv1 TO ls_td100-attr1.
    MOVE ls_prot-msgv2 TO ls_td100-attr2.
    MOVE ls_prot-msgv3 TO ls_td100-attr3.
    MOVE ls_prot-msgv4 TO ls_td100-attr4.
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = ls_td100 ).
  ENDIF.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.

**** READ DATA

  me->_read_data( ).

ENDMETHOD.
METHOD _read_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_controls TYPE bapidlvbuffercontrol,

        lt_r_vbeln  TYPE /eby/_lbapidlv_range_vbeln,
        ls_r_vbeln  TYPE bapidlv_range_vbeln.

  DATA: lt_bapiret2 TYPE bapiret2_tt,
        lv_message  TYPE scx_attrname.

  DATA: lt_deliveries_headers     TYPE bapidlvhdr_t,
        lt_deliveries_header_sts  TYPE bapidlvhdrsts_t.

**********************************************************************
* Validaciones
**********************************************************************

  CHECK me->_vbeln IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

**** CLEAR DATA

  CLEAR me->_s_data.

**** SET CONTROLS

  MOVE abap_true TO ls_controls-bypassing_buffer.
  MOVE abap_true TO ls_controls-head_status.
  MOVE abap_true TO ls_controls-item.
  MOVE abap_true TO ls_controls-item_status.
  MOVE abap_true TO ls_controls-ft_data.
  MOVE abap_true TO ls_controls-doc_flow.
  MOVE abap_true TO ls_controls-head_partner.
  MOVE abap_true TO ls_controls-hu_data.

**** SET VBELN

  CLEAR: ls_r_vbeln.
  ls_r_vbeln-sign           = 'I'.
  ls_r_vbeln-option         = 'EQ'.
  ls_r_vbeln-deliv_numb_low = me->_vbeln.
  APPEND ls_r_vbeln TO lt_r_vbeln.

**** READ DATA

  CALL FUNCTION 'BAPI_DELIVERY_GETLIST'
    EXPORTING
      is_dlv_data_control     = ls_controls
    TABLES
      it_vbeln                = lt_r_vbeln
      et_delivery_header      = lt_deliveries_headers
      et_delivery_item        = me->_s_data-t_delivery_item
      et_delivery_header_sts  = lt_deliveries_header_sts
      et_delivery_item_sts    = me->_s_data-t_delivery_item_sts
      et_delivery_partner     = me->_s_data-t_delivery_partner
      et_document_flow        = me->_s_data-t_document_flow
      et_foreign_trade_header = me->_s_data-t_foreign_trade_header
      et_foreign_trade_item   = me->_s_data-t_foreign_trade_item
      et_hu_header            = me->_s_data-t_hu_header
*     ET_ITEM_SERIAL_NO       =
*     EXTENSIONIN             =
*     EXTENSIONOUT            =
      return                  = lt_bapiret2.


  "Se comprueba resultado.
  IF ( sy-subrc EQ 0 ). "Se han obtenido resultados

    READ TABLE lt_deliveries_headers INTO me->_s_data-s_delivery_header WITH KEY vbeln = me->_vbeln.
    IF ( sy-subrc NE 0 ).
      CLEAR: lv_message.
      MOVE text-001 TO lv_message.
      RAISE EXCEPTION TYPE zcx_exception EXPORTING textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' i_message = lv_message ).
    ELSE.
      CASE me->_s_data-s_delivery_header-vbtyp.
        WHEN '7'.
          MOVE zcl_hp_delivery=>_s_vbtyp_inbound_delivery TO me->_vbtyp.
        WHEN 'J'.
          MOVE zcl_hp_delivery=>_s_vbtyp_outbound_delivery TO me->_vbtyp.
        WHEN OTHERS.
          CLEAR: lv_message.
          MOVE text-001 TO lv_message.
          RAISE EXCEPTION TYPE zcx_exception EXPORTING textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' i_message = lv_message ).
      ENDCASE.
    ENDIF.

    READ TABLE lt_deliveries_header_sts INTO me->_s_data-s_delivery_header_sts WITH KEY vbeln = me->_vbeln.
    IF ( sy-subrc NE 0 ).
      CLEAR: lv_message.
      MOVE text-001 TO lv_message.
      RAISE EXCEPTION TYPE zcx_exception EXPORTING textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' i_message = lv_message ).
    ENDIF.

  ELSE. "No se han obtenido resultados.

    READ TABLE lt_bapiret2 INTO DATA(ls_bapiret2) WITH KEY type = 'E'.
    IF ( sy-subrc EQ 0 ).
      RAISE EXCEPTION TYPE zcx_exception EXPORTING textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = ls_bapiret2-number i_msgid = ls_bapiret2-id i_msgty = ls_bapiret2-type i_msgv1 = ls_bapiret2-message_v1 i_msgv2 =
ls_bapiret2-message_v2 i_msgv3 = ls_bapiret2-message_v3 i_msgv4 = ls_bapiret2-message_v4 ).
    ELSE.
      CLEAR: lv_message.
      MOVE text-001 TO lv_message.
      RAISE EXCEPTION TYPE zcx_exception EXPORTING textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' i_message = lv_message ).
    ENDIF.

  ENDIF.

ENDMETHOD.
METHOD _set_new_inbdlv_item.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****



**** SET ITEM

*  me->



ENDMETHOD.
METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

    DATA: lv_message  TYPE scx_attrname.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

*** NOT INITIAL

    IF ( i_vbeln IS INITIAL ).
*      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_ i_msgty = 'E' ) ).
    ENDIF.

*** EXISTS

    SELECT COUNT(*) UP TO 1 ROWS
      FROM likp
     WHERE vbeln EQ i_vbeln.

    IF ( sy-subrc NE 0 ).
*      zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = me->_c_cl_msgid_label i_msgty = 'E' ) ).
    ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** TKNUM

    MOVE i_vbeln TO me->_vbeln.

**** READ DATA

    me->_read_data( ).

ENDMETHOD.
  method DELETE.
  endmethod.
METHOD get_dlv_item.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

  CHECK i_vbelp IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

**** RETURN DATA

  LOOP AT me->_s_data-t_delivery_item INTO DATA(ls_delivery_item).

    IF ( ls_delivery_item-posnr EQ i_vbelp ).
      APPEND ls_delivery_item TO r_t_bapidlvitem.
      IF ( i_get_subpositions IS INITIAL ).
        EXIT.
      ENDIF.
    ENDIF.

    IF ( i_get_subpositions IS NOT INITIAL ).
      IF ( ls_delivery_item-uecha EQ i_vbelp ).
        APPEND ls_delivery_item TO r_t_bapidlvitem.
      ENDIF.
    ENDIF.

  ENDLOOP.



ENDMETHOD.
METHOD GET_DLV_ITEM_STS.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_dlv_items LIKE me->_s_data-t_delivery_item.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

  CHECK i_vbelp IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

**** GET POSITION DATA

  lt_dlv_items = me->get_dlv_item( i_vbelp = i_vbelp i_get_subpositions = i_get_subpositions ).

**** RETURN DATA

  LOOP AT me->_s_data-t_delivery_item_sts INTO DATA(ls_delivery_item_sts).

    READ TABLE lt_dlv_items TRANSPORTING NO FIELDS WITH KEY vbeln = ls_delivery_item_sts-vbeln posnr = ls_delivery_item_sts-posnr.
    IF ( sy-subrc EQ 0 ).
      APPEND ls_delivery_item_sts TO r_t_bapidlvitem_sts.
    ENDIF.

  ENDLOOP.

ENDMETHOD.
METHOD is_picked.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** CHECK HEADER STATUS

  IF ( me->_s_data-s_delivery_header_sts-wbstk EQ 'B' ).
    MOVE abap_true TO r_bool.
  ENDIF.

ENDMETHOD.
METHOD IS_POSTED.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** CHECK HEADER STATUS

  IF ( me->_s_data-s_delivery_header_sts-wbstk EQ 'C' ).
    MOVE abap_true TO r_bool.
  ENDIF.

ENDMETHOD.
METHOD post.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**** CHECK IF ALREADY POSTED

  IF ( me->is_posted( ) ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '602' i_msgid = 'VL' i_msgty = 'E' ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** INBOUND DELIVERY

  IF ( me->_vbtyp EQ zcl_hp_delivery=>_s_vbtyp_inbound_delivery ).
    me->_post_inb_delivery( ).
  ENDIF.

**** OUTBOUND DELIVERY

  IF ( me->_vbtyp EQ zcl_hp_delivery=>_s_vbtyp_outbound_delivery ).
    "TODO
  ENDIF.

ENDMETHOD.
METHOD S_CREATE_INB_DELIVERY_4_EBELN.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_xkomdlgn TYPE xkomdlgn,
        ls_xkomdlgn TYPE komdlgn.

  DATA: ls_vbsk     TYPE vbsk.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

*** EBELN

  IF ( i_ebeln IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

  SELECT COUNT(*) UP TO 1 ROWS
    FROM ekko
   WHERE ebeln EQ i_ebeln
     AND loekz EQ space.

  IF ( sy-subrc NE 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

*** EBELP

  IF ( i_ebelp IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

  SELECT COUNT(*) UP TO 1 ROWS
    FROM ekpo
   WHERE ebeln EQ i_ebeln
     AND ebelp EQ i_ebelp
     AND loekz EQ space.

  IF ( sy-subrc NE 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

*** VERUR

  IF ( i_verur IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

**** VBSK
*
*  IF ( i_vbsk IS INITIAL ).
*    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
*  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** SET VBSK

  IF ( i_vbsk IS NOT INITIAL ).
    MOVE i_vbsk TO ls_vbsk.
  ELSE.
    CLEAR: ls_vbsk.
    ls_vbsk-mandt = sy-mandt.
    ls_vbsk-ernam = sy-uname.
    ls_vbsk-erdat = sy-datum.
    ls_vbsk-uzeit = sy-uzeit.
    ls_vbsk-smart = 'L'.
  ENDIF.

**** SET LT_XKOMDLGN

*** GET EKKO/EKPO DATA

  SELECT SINGLE *
    INTO @DATA(ls_ekko)
    FROM ekko
   WHERE ebeln EQ @i_ebeln.

  SELECT SINGLE *
    INTO @DATA(ls_ekpo)
    FROM ekpo
   WHERE ebeln = @i_ebeln
     AND ebelp = @i_ebelp.

  CLEAR: ls_xkomdlgn.

** EKKO

*   ls_xkomdlgn-rfbel = i_ebeln.
*   ls_xkomdlgn-rfpos = i_ebelp.
  ls_xkomdlgn-lfdat = sy-datum.
  ls_xkomdlgn-lifnr = ls_ekko-lifnr.

** EKPO

  ls_xkomdlgn-arktx = ls_ekpo-txz01.
  ls_xkomdlgn-matnr = ls_ekpo-matnr.
  ls_xkomdlgn-uebtk = ls_ekpo-uebtk.
  ls_xkomdlgn-uebto = ls_ekpo-uebto.
  ls_xkomdlgn-untto = ls_ekpo-untto.
  ls_xkomdlgn-werks = ls_ekpo-werks.
  ls_xkomdlgn-lgort = ls_ekpo-lgort.
  ls_xkomdlgn-vrkme = ls_ekpo-meins.
  ls_xkomdlgn-meins = ls_ekpo-lmein.
  ls_xkomdlgn-umvkz = ls_ekpo-umrez.
  ls_xkomdlgn-umvkn = ls_ekpo-umren.
  ls_xkomdlgn-vgbel = ls_ekpo-ebeln.
  ls_xkomdlgn-vgpos = ls_ekpo-ebelp.

** OTHERS

*  ls_xkomdlgn-charg = ''.
  ls_xkomdlgn-lfart = 'EL'.
  ls_xkomdlgn-lfimg = space.
  ls_xkomdlgn-vgtyp = 'V'.
  ls_xkomdlgn-kzazu = 'X'.
  ls_xkomdlgn-verur = i_verur.
  ls_xkomdlgn-lifex = i_verur.

** APPEND

  APPEND ls_xkomdlgn TO lt_xkomdlgn.

**** CREATE DELIVERY

  r_o_delivery = zcl_hp_delivery=>s_create_inb_delivery_w_data( i_vbsk = ls_vbsk i_t_xkomdlgn = lt_xkomdlgn ).

ENDMETHOD.
METHOD S_CREATE_INB_DELIVERY_4_EBELP.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_xkomdlgn TYPE xkomdlgn,
        ls_xkomdlgn TYPE komdlgn.

  DATA: ls_vbsk     TYPE vbsk.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

*** EBELN

  IF ( i_ebeln IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

  SELECT COUNT(*) UP TO 1 ROWS
    FROM ekko
   WHERE ebeln EQ i_ebeln
     AND loekz EQ space.

  IF ( sy-subrc NE 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

*** EBELP

  IF ( i_ebelp IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

  SELECT COUNT(*) UP TO 1 ROWS
    FROM ekpo
   WHERE ebeln EQ i_ebeln
     AND ebelp EQ i_ebelp
     AND loekz EQ space.

  IF ( sy-subrc NE 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

*** VERUR

  IF ( i_verur IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

**** LFART

  IF ( i_lfart IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

**** VGTYP

  IF ( i_vgtyp IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

**** KZAZU

  IF ( i_kzazu IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** SET VBSK

  IF ( i_vbsk IS NOT INITIAL ).
    MOVE i_vbsk TO ls_vbsk.
  ELSE.
    CLEAR: ls_vbsk.
    ls_vbsk-mandt = sy-mandt.
    ls_vbsk-ernam = sy-uname.
    ls_vbsk-erdat = sy-datum.
    ls_vbsk-uzeit = sy-uzeit.
    ls_vbsk-smart = 'L'.
  ENDIF.

**** SET LT_XKOMDLGN

*** GET EKKO/EKPO DATA

  SELECT SINGLE *
    INTO @DATA(ls_ekko)
    FROM ekko
   WHERE ebeln EQ @i_ebeln.

  SELECT SINGLE *
    INTO @DATA(ls_ekpo)
    FROM ekpo
   WHERE ebeln = @i_ebeln
     AND ebelp = @i_ebelp.

  CLEAR: ls_xkomdlgn.

** EKKO

*   ls_xkomdlgn-rfbel = i_ebeln.
*   ls_xkomdlgn-rfpos = i_ebelp.
  ls_xkomdlgn-lfdat = sy-datum.
  ls_xkomdlgn-lifnr = ls_ekko-lifnr.

** EKPO

  ls_xkomdlgn-arktx = ls_ekpo-txz01.
  ls_xkomdlgn-matnr = ls_ekpo-matnr.
  ls_xkomdlgn-uebtk = ls_ekpo-uebtk.
  ls_xkomdlgn-uebto = ls_ekpo-uebto.
  ls_xkomdlgn-untto = ls_ekpo-untto.
  ls_xkomdlgn-werks = ls_ekpo-werks.
  ls_xkomdlgn-lgort = ls_ekpo-lgort.
  ls_xkomdlgn-vrkme = ls_ekpo-meins.
  ls_xkomdlgn-meins = ls_ekpo-lmein.
  ls_xkomdlgn-umvkz = ls_ekpo-umrez.
  ls_xkomdlgn-umvkn = ls_ekpo-umren.
  ls_xkomdlgn-vgbel = ls_ekpo-ebeln.
  ls_xkomdlgn-vgpos = ls_ekpo-ebelp.

** OTHERS

*  ls_xkomdlgn-charg = ''.
  ls_xkomdlgn-lfart = i_lfart.
  ls_xkomdlgn-lfimg = i_lfimg.
  ls_xkomdlgn-vgtyp = i_vgtyp.
  ls_xkomdlgn-kzazu = i_kzazu.
  ls_xkomdlgn-verur = i_verur.
  ls_xkomdlgn-lifex = i_verur.

** APPEND

  APPEND ls_xkomdlgn TO lt_xkomdlgn.

**** CREATE DELIVERY

  r_o_delivery = zcl_hp_delivery=>s_create_inb_delivery_w_data( i_vbsk = ls_vbsk i_t_xkomdlgn = lt_xkomdlgn ).

ENDMETHOD.
METHOD S_CREATE_INB_DELIVERY_W_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_vbsk_import TYPE vbsk,
        lt_vbfs        TYPE shp_vbfs_t,
        lt_vbls        TYPE shp_vbls_t,
        lv_no_commit   TYPE boolean.

  DATA: ls_vbsk     TYPE vbsk.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

*** I_VBSK

  CLEAR: ls_vbsk.
  IF ( i_vbsk IS INITIAL ).
    ls_vbsk-mandt = sy-mandt.
    ls_vbsk-ernam = sy-uname.
    ls_vbsk-erdat = sy-datum.
    ls_vbsk-uzeit = sy-uzeit.
    ls_vbsk-smart = 'L'.
  ELSE.
    MOVE i_vbsk TO ls_vbsk.
  ENDIF.

*** I_T_XKOMDLGN

  CHECK lines( i_t_xkomdlgn ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

**** CREATE DELIVERY

  CALL FUNCTION 'GN_DELIVERY_CREATE'
    EXPORTING
      vbsk_i    = ls_vbsk
      no_commit = i_no_commit
*     IF_SYNCHRON                = 'X'
*     VBLS_POS_RUECK             = ' '
*     IF_CREATE_DEC              = ' '
*     IF_NO_DEQUE                = ' '
*     IT_HANDLING_UNITS          =
*     IF_QUAN_NO_CHECK           =
*     IF_MASS_READ_MAT_SW        = ' '
*     IS_DELIVERY_EXTEND         =
*     IS_CONTROL                 =
*     IS_BORGR_CONTROL           =
*     IF_NO_INIT                 = ' '
*     IF_NO_PARTNER_DIALOG       = 'X'
*     IF_CHECK_UOM               = ' '
*     IT_LECOMP =
*     IF_CALL_ACTIVITY           = ' '
    IMPORTING
      vbsk_e    = ls_vbsk_import
*     ET_SPLITPROT               =
*     ET_VBADR  =
*     ET_VBPA   =
    TABLES
      xkomdlgn  = i_t_xkomdlgn
      xvbfs     = lt_vbfs
      xvbls     = lt_vbls
*     XXLIPS    =
*     XVERKO    =
*     XVERPO    =
*     IT_GN_PARTNER              =
*     IT_GN_LIPSPO               =
*     IT_GN_LIPSRF               =
*     IT_GN_TEXTH                =
*     IT_GN_TEXTL                =
*     IT_GN_HUSERNR              =
*     IT_GN_SERNR                =
*     IT_TMSTMP =
*     ET_SPE_VBFS                =
*     IT_BAPIADDR1               =
*     IT_GN_HU_HEADER_EPC        =
*     IT_GN_HU_ITEMS_EPC         =
    .

**** RESULT

  "Leo tabla de errores
  READ TABLE lt_vbfs INTO DATA(ls_vbfs) WITH KEY msgty = 'E'.
  IF ( sy-subrc IS INITIAL ). "Hay errores

    ROLLBACK WORK.

    MOVE ls_vbfs-msgno TO sy-msgno.
    MOVE ls_vbfs-msgid TO sy-msgid.
    MOVE ls_vbfs-msgty TO sy-msgty.
    MOVE ls_vbfs-msgv1 TO sy-msgv1.
    MOVE ls_vbfs-msgv2 TO sy-msgv2.
    MOVE ls_vbfs-msgv3 TO sy-msgv3.
    MOVE ls_vbfs-msgv4 TO sy-msgv4.

    RAISE EXCEPTION TYPE zcx_exception
      EXPORTING
        textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = sy-msgno i_msgid = sy-msgid i_msgty = sy-msgty i_msgv1 = sy-msgv1 i_msgv2 = sy-msgv2 i_msgv3 = sy-msgv3
        i_msgv4 = sy-msgv4 ).

  ELSE. "No hay errores

*** CREATE OBJECT

    READ TABLE lt_vbls INTO DATA(ls_vbls) INDEX 1.
    IF ( sy-subrc EQ 0 ).
      r_o_delivery = NEW zcl_hp_delivery( i_vbeln = ls_vbls-vbeln_lif ).
    ENDIF.

  ENDIF.

ENDMETHOD.
METHOD s_get_delivery_4_verur.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** SELECT DATA

  SELECT SINGLE vbeln
    FROM likp
    INTO @DATA(lv_vbeln)
   WHERE verur EQ @i_verur.

  CHECK sy-subrc EQ 0.

**** INSTANCE

  TRY .
    r_o_delivery = NEW zcl_hp_delivery( i_vbeln = lv_vbeln ).
  CATCH zcx_exception.
  ENDTRY.

ENDMETHOD.
METHOD S_GET_XKOMDLGN_4_PO_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT DATA

*** EBELN

  IF ( i_ebeln IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

  SELECT COUNT(*) UP TO 1 ROWS
    FROM ekko
   WHERE ebeln EQ i_ebeln
     AND loekz EQ space.

  IF ( sy-subrc NE 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

*** EBELP

  IF ( i_ebelp IS INITIAL ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

  SELECT COUNT(*) UP TO 1 ROWS
    FROM ekpo
   WHERE ebeln EQ i_ebeln
     AND ebelp EQ i_ebelp
     AND loekz EQ space.

  IF ( sy-subrc NE 0 ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_delivery=>_sc_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** MAP DATA

*** GET EKKO/EKPO DATA

  SELECT SINGLE *
    INTO @DATA(ls_ekko)
    FROM ekko
   WHERE ebeln EQ @i_ebeln.

  SELECT SINGLE *
    INTO @DATA(ls_ekpo)
    FROM ekpo
   WHERE ebeln = @i_ebeln
     AND ebelp = @i_ebelp.

** EKKO

*   ls_xkomdlgn-rfbel = i_ebeln.
*   ls_xkomdlgn-rfpos = i_ebelp.
  r_s_komdlgn-lfdat = sy-datum.
  r_s_komdlgn-lifnr = ls_ekko-lifnr.

** EKPO

  r_s_komdlgn-arktx = ls_ekpo-txz01.
  r_s_komdlgn-matnr = ls_ekpo-matnr.
  r_s_komdlgn-uebtk = ls_ekpo-uebtk.
  r_s_komdlgn-uebto = ls_ekpo-uebto.
  r_s_komdlgn-untto = ls_ekpo-untto.
  r_s_komdlgn-werks = ls_ekpo-werks.
  r_s_komdlgn-lgort = ls_ekpo-lgort.
  r_s_komdlgn-vrkme = ls_ekpo-meins.
  r_s_komdlgn-meins = ls_ekpo-lmein.
  r_s_komdlgn-umvkz = ls_ekpo-umrez.
  r_s_komdlgn-umvkn = ls_ekpo-umren.
  r_s_komdlgn-vgbel = ls_ekpo-ebeln.
  r_s_komdlgn-vgpos = ls_ekpo-ebelp.

** OTHERS

  r_s_komdlgn-charg = i_charg.
  r_s_komdlgn-lfart = i_lfart.
  r_s_komdlgn-lfimg = i_lfimg.
  r_s_komdlgn-vgtyp = i_vgtyp.
  r_s_komdlgn-kzazu = i_kzazu.
  r_s_komdlgn-verur = i_verur.
  r_s_komdlgn-lifex = i_verur.
  r_s_komdlgn-lichn = i_lichn.

ENDMETHOD.
