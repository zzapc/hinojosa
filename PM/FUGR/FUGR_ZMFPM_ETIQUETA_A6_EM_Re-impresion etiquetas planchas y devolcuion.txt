FUNCTION zmfpm_etiqueta_a6_em.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_MBLNR) TYPE  MBLNR OPTIONAL
*"     VALUE(I_MJAHR) TYPE  MJAHR OPTIONAL
*"     VALUE(I_MATNR) TYPE  MATNR
*"     VALUE(I_CHARG) TYPE  CHARG_D
*"     VALUE(I_AUFNR) TYPE  AUFNR OPTIONAL
*"     REFERENCE(I_LSUBP) TYPE  FLAG OPTIONAL
*"     REFERENCE(I_LGRA) TYPE  FLAG OPTIONAL
*"     VALUE(I_BWART) TYPE  BWART
*"     REFERENCE(I_ZEILE) TYPE  MBLPO OPTIONAL
*"  EXPORTING
*"     REFERENCE(LS_DATOS) TYPE  ZSPM0005
*"----------------------------------------------------------------------
  DATA: ls_tabla TYPE zzdatos,
        l_form   TYPE fpname,
        lv_charg TYPE charg_d.

  DATA: l_werks TYPE werks_d,
        l_mblnr TYPE mblnr,
        l_mjahr TYPE mjahr,
        l_zeile TYPE mblpo,
        l_shkzg TYPE shkzg.

  DATA: l_zzlgort    TYPE aufk-zzlgort,
        l_kunnr      TYPE aufk-zzkunnr4,
        l_zzdestcmcr TYPE aufk-zzdestcmcr,
        l_name1      TYPE name1.

  DATA: lv_zzcolor TYPE mara-zzcolor,
        lv_color   TYPE mara-color.

  DATA: l_erfmg TYPE mseg-erfmg.

  " Lote, Orden, Material y descripción
  ls_datos-matnr = i_matnr. " Material
  lv_charg = i_charg. " Lote
  ls_datos-mblnr = i_mblnr.
  " Obtenemos la orden a partir de material y lote

  TYPES: BEGIN OF ty_mseg,
           matnr      TYPE matnr,
           charg      TYPE charg_d,
           werks      TYPE werks_d,
           aufnr      TYPE aufnr,
           mblnr      TYPE mblnr,
           mjahr      TYPE mjahr,
           zeile      TYPE mblpo,
           meins      TYPE meins,
           erfmg      TYPE erfmg,
           bwart      TYPE bwart,
           cputm_mkpf TYPE cputm,
           cpudt_mkpf TYPE budat,
           shkzg      TYPE shkzg.
  TYPES: END OF ty_mseg.

  DATA: lt_mseg  TYPE TABLE OF ty_mseg,
        ls_mseg  TYPE          ty_mseg,
        ls_mseg1 TYPE          ty_mseg.

  IF i_zeile IS INITIAL.
    IMPORT zeile TO l_zeile FROM MEMORY ID 'ZEILE'.

    FREE MEMORY ID 'ZEILE'.
  ELSE.
    l_zeile = i_zeile.
  ENDIF.

*  IF i_mblnr IS NOT INITIAL AND i_mjahr IS NOT INITIAL.

    SELECT * FROM mseg
      INTO CORRESPONDING FIELDS OF TABLE lt_mseg
      WHERE   mblnr = i_mblnr
        AND   mjahr = i_mjahr.
*  ELSE.
*    SELECT * FROM mseg
*      INTO CORRESPONDING FIELDS OF TABLE lt_mseg
*      WHERE   bwart EQ i_bwart
*        AND   matnr EQ ls_datos-matnr
*        AND   charg EQ lv_charg
*        ORDER BY cpudt_mkpf cputm_mkpf ASCENDING.
*
*  ENDIF.

  READ TABLE lt_mseg INTO ls_mseg WITH KEY zeile = l_zeile.
  IF sy-subrc = 0.
    ls_datos-aufnr = ls_mseg-aufnr.
    ls_datos-meins = ls_mseg-meins.
    ls_datos-fecha_entrada = ls_mseg-cpudt_mkpf.
    ls_datos-hora_entrada = ls_mseg-cputm_mkpf.
    ls_datos-mblnr = ls_mseg-mblnr.
    ls_datos-erfmg = ls_mseg-erfmg.
  ENDIF.

  IF lv_charg IS NOT INITIAL.
    CONCATENATE 'LOTE:' lv_charg INTO ls_datos-charg_txt SEPARATED BY space.
  ENDIF.

  " Color y descripcion del color
  SELECT SINGLE zzcolor color
    FROM mara
    INTO (lv_zzcolor, lv_color)
    WHERE matnr EQ ls_datos-matnr.

  IF lv_zzcolor IS NOT INITIAL.
    CONCATENATE 'COLOR:' lv_zzcolor lv_color INTO ls_datos-color SEPARATED BY space.
  ENDIF.

  " Codigo de barras
  ls_datos-barcode = |{ i_matnr ALPHA = OUT }{ i_charg }|.
  CONDENSE ls_datos-barcode.

  " Descripción material
  SELECT SINGLE maktx INTO ls_datos-maktx
    FROM makt
    WHERE matnr EQ ls_datos-matnr.

*  LOOP AT lt_mseg INTO ls_mseg WHERE matnr = ls_datos-matnr.
*    IF i_bwart EQ '101' AND
*       ls_mseg-mblnr IS NOT INITIAL  AND
*       ls_mseg-zeile IS NOT INITIAL.
*      ls_datos-erfmg = ls_datos-erfmg + ls_mseg-erfmg.
*
*    ELSEIF i_bwart EQ '309' AND ls_mseg-shkzg = 'H'.
*      l_erfmg = -1 * ( ls_mseg-erfmg ).
*      ls_datos-erfmg = ls_datos-erfmg + l_erfmg.
*    ELSEIF i_bwart EQ '309' AND ls_mseg-shkzg = 'S'.
*      ls_datos-erfmg = ls_datos-erfmg + ls_mseg-erfmg.
*
*    ELSEIF i_bwart EQ '701' AND ls_mseg-shkzg = 'H'.
*      l_erfmg = -1 * ( ls_mseg-erfmg ).
*      ls_datos-erfmg = ls_datos-erfmg + l_erfmg.
*    ELSEIF i_bwart EQ '701' AND ls_mseg-shkzg = 'S'.
*      ls_datos-erfmg = ls_datos-erfmg + ls_mseg-erfmg.
*    ENDIF.
*  ENDLOOP.

  " proveedor y lote proveedor
  DATA: lv_lifnr TYPE elifn,
        lv_licha TYPE lichn.

  SELECT SINGLE lifnr licha
  FROM mch1
  INTO (lv_lifnr, lv_licha)
  WHERE matnr EQ ls_datos-matnr
  AND   charg EQ lv_charg.

  SELECT SINGLE name1
    FROM lfa1
    INTO ls_datos-name1
    WHERE lifnr EQ lv_lifnr.

  IF lv_lifnr IS NOT INITIAL AND ls_datos-name1 IS NOT INITIAL.
    CONCATENATE 'PROVEEDOR:' lv_lifnr '/' ls_datos-name1 INTO ls_datos-lifnr SEPARATED BY space.
  ELSEIF ls_datos-name1 IS INITIAL.
    CONCATENATE 'PROVEEDOR:' lv_lifnr INTO ls_datos-lifnr SEPARATED BY space.
  ENDIF.
  IF lv_licha IS NOT INITIAL.
    CONCATENATE 'LOTE PROVEEDOR:' lv_licha INTO ls_datos-licha SEPARATED BY space.
  ENDIF.

  ls_datos-matnr = |{ ls_datos-matnr ALPHA = OUT }|.

ENDFUNCTION.
