
class YCL_IM_RF_TPM_WORKORDER_CONF definition
  public
  final
  create public .

public section.

  interfaces IF_BADI_INTERFACE .
  interfaces IF_EX_WORKORDER_CONFIRM .
protected section.
private section.
endclass. "YCL_IM_RF_TPM_WORKORDER_CONF definition
class YCL_IM_RF_TPM_WORKORDER_CONF implementation.
  method IF_EX_WORKORDER_CONFIRM~AT_CANCEL_CHECK.
  endmethod.
method IF_EX_WORKORDER_CONFIRM~AT_SAVE.

  constants:
        LC_CONFIRMATION   type          CHAR1 value 'H',
        LC_CANCELATION    type          CHAR1 value 'V'.

  data: LF_NOUSE          type          YRF_TPR_NOUSE,
        LF_NOUSC          type          YRF_TPR_NOUSC,
        LF_SIGN           type          SIGN.
  data: LS_ORDER_OBJECTS  type          BAPI_PP_ORDER_OBJECTS,
        LS_RETURN         type          BAPIRET2.
  data: LT_OPERATION      type table of BAPI_ORDER_OPERATION1,
        LT_PROD_REL_TOOL  type table of BAPI_ORDER_PROD_REL_TOOLS.
  data: LR_BL_TOOL        type ref to   YCL_RF_TPM_TOOL.

  field-symbols:
        <S_OPERATION>     type          BAPI_ORDER_OPERATION1,
        <S_PROD_REL_TOOL> type          BAPI_ORDER_PROD_REL_TOOLS.

*** To avoid long runtimes only request operations and PRTs
  LS_ORDER_OBJECTS-OPERATIONS     = ABAP_TRUE.
  LS_ORDER_OBJECTS-PROD_REL_TOOLS = ABAP_TRUE.

*** Execute the BAPI
  call function 'BAPI_PRODORD_GET_DETAIL'
    exporting
      NUMBER        = IS_CONFIRMATION-AUFNR
      ORDER_OBJECTS = LS_ORDER_OBJECTS
    importing
      RETURN        = LS_RETURN
    tables
      OPERATION     = LT_OPERATION
      PROD_REL_TOOL = LT_PROD_REL_TOOL.

*** Read the operation information for the currently confirmed Operation
  read table LT_OPERATION assigning <S_OPERATION> with key SEQUENCE_NO      = IS_CONFIRMATION-APLFL
                                                           OPERATION_NUMBER = IS_CONFIRMATION-VORNR.

*** Normally there must be a match, but we do not wanna see dumps, so checking is better
  check <S_OPERATION> is assigned.

*** Loop all PRTs that are related to this operation and update the information in their material master
  loop at LT_PROD_REL_TOOL assigning <S_PROD_REL_TOOL> where ROUTING_NO = <S_OPERATION>-ROUTING_NO
                                                         and COUNTER    = <S_OPERATION>-COUNTER.
    try.
        LR_BL_TOOL = YCL_RF_TPM_TOOL=>GET_INSTANCE_BY_MATNR( IF_MATNR   = <S_PROD_REL_TOOL>-MATERIAL
                                                             IF_WERKS   = <S_OPERATION>-PROD_PLANT ).
        LF_NOUSE = IS_CONFIRMATION-LMNGA.
        LF_NOUSC = IS_CONFIRMATION-LMNGA.

        case I_TYPE.
          when LC_CONFIRMATION.
            LF_SIGN = '+'.
          when LC_CANCELATION.
            LF_SIGN = '-'.
        endcase.

        LR_BL_TOOL->ADD_NOUSE( IF_NOUSE = LF_NOUSE
                               IF_SIGN  = LF_SIGN ).
        if LF_SIGN = '+'.
          LR_BL_TOOL->ADD_NOUSC( IF_NOUSC = LF_NOUSC
                                 IF_SIGN  = LF_SIGN ).
        else.
***         do nothing
        endif.

        if I_TYPE = LC_CONFIRMATION.
          LR_BL_TOOL->SET_DALPR( IF_DALPR = IS_CONFIRMATION-BUDAT ).
          LR_BL_TOOL->SET_LAUFN( IF_LAUFN = IS_CONFIRMATION-AUFNR ).
        endif.

        LR_BL_TOOL->UPDATE_MATERIAL_MASTER( IF_NO_COMMIT = ABAP_TRUE ).
      catch /VCXI/CX_CKX .
    endtry.

  endloop.

endmethod.
  method IF_EX_WORKORDER_CONFIRM~BEFORE_UPDATE.
  endmethod.
  method IF_EX_WORKORDER_CONFIRM~IN_UPDATE.
  endmethod.
  method IF_EX_WORKORDER_CONFIRM~INDIVIDUAL_CAPACITY.
  endmethod.
endclass. "YCL_IM_RF_TPM_WORKORDER_CONF definition
endclass. "YCL_IM_RF_TPM_WORKORDER_CONF implementation
