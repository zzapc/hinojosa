*&---------------------------------------------------------------------*
*&  Include           ZRPM0001_F01
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos .
  IF p_ctro IS NOT INITIAL OR p_all IS NOT INITIAL OR p_jer IS NOT INITIAL.
    PERFORM obtener_ctro.
  ENDIF.
  IF p_tro IS NOT INITIAL OR p_all IS NOT INITIAL OR p_jer IS NOT INITIAL.
    PERFORM obtener_tro.
  ENDIF.
  IF p_jcli IS NOT INITIAL OR p_all IS NOT INITIAL OR p_jer IS NOT INITIAL.
    PERFORM obtener_jcli.
  ENDIF.
  IF p_cli IS NOT INITIAL OR p_all IS NOT INITIAL OR p_jer IS NOT INITIAL.
    PERFORM obtener_cli.
  ENDIF.
ENDFORM.                    " OBTENER_DATOS
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_datos .
* Mostrar todos los ALV y la estructura jerárquica
  IF p_all IS NOT INITIAL OR p_jer IS NOT INITIAL.
* Configurar las subscreens a mostrar
    IF p_ctro IS NOT INITIAL OR p_all IS NOT INITIAL OR p_jer IS NOT INITIAL.
      dynnr_ctro = '0201'. "Subscreen Copias de troqueles
    ENDIF.
    IF p_tro IS NOT INITIAL OR p_all IS NOT INITIAL OR p_jer IS NOT INITIAL.
      dynnr_tro = '0301'. "Subscreen Troqueles
    ENDIF.
    IF p_jcli IS NOT INITIAL OR p_all IS NOT INITIAL OR p_jer IS NOT INITIAL.
      dynnr_jcli = '0401'. "Subscreen Juegos de clichés
    ENDIF.
    IF p_cli IS NOT INITIAL OR p_all IS NOT INITIAL OR p_jer IS NOT INITIAL.
      dynnr_cli = '0501'. "Subscreen Clichés
    ENDIF.

    CALL SCREEN 100.
  ELSE.
*   Mostrar solo el ALV que se requiere
    IF p_ctro IS NOT INITIAL.
      PERFORM f_mostrar_salv USING  gr_custom_container_ctro
                                    gr_table_ctro
                                    'CC_CTRO'
                                    gt_pm0001_vis
                                    'SET_COLUMNS_TECHNICAL_0201'
                                    abap_false
                                    '0011'
                                    abap_true.
    ELSEIF p_tro IS NOT INITIAL.
      PERFORM f_mostrar_salv USING  gr_custom_container_tro
                                    gr_table_tro
                                    'CC_TRO'
                                    gt_pm0002_vis
                                    'SET_COLUMNS_TECHNICAL_0301'
                                    abap_false
                                    '0012'
                                    abap_true.
    ELSEIF p_jcli IS NOT INITIAL.
      PERFORM f_mostrar_salv USING  gr_custom_container_jcli
                                    gr_table_jcli
                                    'CC_JCLI'
                                    gt_pm0003_vis
                                    'SET_COLUMNS_TECHNICAL_0401'
                                    abap_false
                                    '0013'
                                    abap_true.
    ELSEIF p_cli IS NOT INITIAL.
      PERFORM f_mostrar_salv USING  gr_custom_container_cli
                                    gr_table_cli
                                    'CC_CLI'
                                    gt_pm0004_vis
                                    'SET_COLUMNS_TECHNICAL_0501'
                                    abap_false
                                    '0014'
                                    abap_true.
    ENDIF.

  ENDIF.

ENDFORM.                    " MOSTRAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  OBTENER_CTRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_ctro .
  DATA: lt_materiales   TYPE STANDARD TABLE OF ztpm0008,
        lv_db_syntax    TYPE                   string,
        lv_where_syntax TYPE                   string.

  IF so_zplp IS NOT INITIAL.
    SELECT *
      APPENDING TABLE lt_materiales
      FROM ztpm0008
      WHERE matnrzplp IN so_zplp AND
            copiatro IN so_ctro.
    IF sy-subrc <> 0.
      EXIT.
    ENDIF.
  ENDIF.
  IF so_zpmp IS NOT INITIAL.
    SELECT *
      APPENDING TABLE lt_materiales
      FROM ztpm0008
      WHERE matnrzpmp IN so_zpmp AND
            copiatro IN so_ctro.
    IF sy-subrc <> 0.
      EXIT.
    ENDIF.
  ENDIF.



  SORT lt_materiales BY copiatro.
  DELETE ADJACENT DUPLICATES FROM lt_materiales COMPARING copiatro.
  lv_db_syntax = 'ztpm0001 AS a'
  & ' LEFT JOIN ztpm0009 AS b ON a~copiatro = b~copiatro'.

  IF p_jer IS NOT INITIAL.
    CONCATENATE lv_db_syntax 'LEFT JOIN ztpm0002 AS c ON a~copiatro = c~copiatro'
    & ' LEFT JOIN ztpm0005 AS d ON d~copiatro = a~copiatro'
    & ' LEFT JOIN ztpm0004 AS e ON e~juegocli = d~juegocli'
    INTO lv_db_syntax SEPARATED BY space.
  ENDIF.

  IF lt_materiales IS NOT INITIAL.
    lv_where_syntax = 'a~copiatro = @lt_materiales-copiatro AND'.
  ENDIF.

  CONCATENATE lv_where_syntax 'a~copiatro IN @so_ctro AND'
  & ' b~juektx IN @so_denct AND'
  & ' a~refantig IN @so_refct AND'
  & ' a~swerk IN @so_werks AND'
  & ' a~planchonet IN @so_plaan AND'
  & ' a~pllargonet IN @so_plalg AND'
  & ' a~cajancho IN @so_cajan AND'
  & ' a~cajlargo IN @so_cajlg AND'
  & ' a~cajalto IN @so_cajal AND'
  INTO lv_where_syntax SEPARATED BY space.


* >>> DBM 04.10.1981 - Añadir campos dimensionales
  CONCATENATE lv_where_syntax 'a~demasancho IN @so_dan AND'
  & ' a~demaslargo IN @so_dlar AND'
  & ' a~zzplalgbr IN @so_lcuch AND'
  & ' a~zzplaanbr IN @so_acuch AND'
  INTO lv_where_syntax SEPARATED BY space.
* <<< DBM 04.10.1981 - Añadir campos dimensionales

  IF p_jer IS NOT INITIAL.
    CONCATENATE lv_where_syntax 'c~equnr IN @so_tro AND'
    & ' d~juegocli IN @so_jcli AND'
    & ' e~equnr IN @so_cli AND' INTO lv_where_syntax SEPARATED BY space.
  ENDIF.

  CONCATENATE lv_where_syntax 'b~spras = @sy-langu' INTO lv_where_syntax SEPARATED BY space.

  IF lt_materiales IS NOT INITIAL.
    SELECT DISTINCT a~copiatro, b~juektx, a~swerk, a~pzagolt, a~pllargonet, a~planchonet, a~cajlargo, a~cajancho,
                a~cajalto, a~refantig, a~demasancho, a~demaslargo, a~zzplalgbr, a~zzplaanbr
    INTO CORRESPONDING FIELDS OF TABLE @gt_pm0001
    FROM (lv_db_syntax)
    FOR ALL ENTRIES IN @lt_materiales
    WHERE (lv_where_syntax).
  ELSE.
    SELECT DISTINCT a~copiatro, b~juektx, a~swerk, a~pzagolt, a~pllargonet, a~planchonet, a~cajlargo, a~cajancho,
                a~cajalto, a~refantig, a~demasancho, a~demaslargo, a~zzplalgbr, a~zzplaanbr
    INTO CORRESPONDING FIELDS OF TABLE @gt_pm0001
    FROM (lv_db_syntax)
    WHERE (lv_where_syntax).
  ENDIF.

  gt_pm0001_vis = gt_pm0001. "Por defecto mostrar todos sin filtrar.
ENDFORM.                    " OBTENER_CTRO
*&---------------------------------------------------------------------*
*&      Form  OBTENER_TRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_tro .
  DATA: lt_status       TYPE STANDARD TABLE OF bapi_itob_status,
        lt_user_status  TYPE STANDARD TABLE OF bapi_itob_status,
        lt_pm0002       TYPE                   zttpm0002_alv,
        lv_stat_text    TYPE                   zstatus_txt,
        lv_excluir      TYPE xfeld,
        lv_incluir      TYPE xfeld,
        lv_db_syntax    TYPE                   string,
        lv_where_syntax TYPE                   string.

  CLEAR: gt_pm0002.

  lv_db_syntax = 'equi AS a'.

  CONCATENATE lv_db_syntax 'LEFT JOIN ztpm0002 AS b ON a~equnr = b~equnr'
  & ' LEFT JOIN equz AS c ON a~equnr = c~equnr'
  & ' LEFT JOIN iloa AS e ON e~iloan = c~iloan' INTO lv_db_syntax SEPARATED BY space.

  CONCATENATE lv_db_syntax 'LEFT JOIN eqkt AS d ON a~equnr = d~equnr'
  & ' LEFT OUTER JOIN ztpm0011 AS f ON a~zztipo = f~tipo AND f~spras = d~spras'
  & ' LEFT OUTER JOIN ztpm0012 AS g ON a~zzmaq = g~maq AND f~spras = d~spras' INTO lv_db_syntax SEPARATED BY space.


  IF p_jer IS NOT INITIAL AND gt_pm0001 IS NOT INITIAL.
    lv_where_syntax = 'b~copiatro = @gt_pm0001-copiatro AND'.
  ENDIF.

  CONCATENATE lv_where_syntax 'a~eqtyp = @c_equtro AND'
  & ' a~equnr IN @so_tro AND'
  & ' d~eqktu IN @so_dentr AND'
  & ' b~equnrs IN @so_equtq AND'
  & ' a~zztipo IN @so_tipot AND'
  & ' e~tplnr IN @so_ubitr AND'
  & ' a~zzmaq IN @so_maqtr AND'
  & ' e~swerk IN @so_werks AND'
  & ' a~zzrefantig IN @so_reftr AND'
  & ' c~datbi = ''99991231'' AND'
  INTO lv_where_syntax SEPARATED BY space.

  CONCATENATE lv_where_syntax 'd~spras = @sy-langu' INTO lv_where_syntax SEPARATED BY space.
  IF p_jer IS NOT INITIAL AND gt_pm0001 IS NOT INITIAL.
    SELECT DISTINCT a~equnr, d~eqktx, b~copiatro, b~equnrs, e~swerk, a~zztipo, f~trotx, e~tplnr, a~zzmaq, g~maqtx, a~zzrefantig", f~stat, g~txt30
      INTO CORRESPONDING FIELDS OF TABLE @lt_pm0002
      FROM (lv_db_syntax)
      FOR ALL ENTRIES IN @gt_pm0001
      WHERE (lv_where_syntax).
  ELSEIF p_jer IS INITIAL OR so_tro IS NOT INITIAL.
    SELECT DISTINCT a~equnr, d~eqktx, b~copiatro, b~equnrs, e~swerk, a~zztipo, f~trotx, e~tplnr, a~zzmaq, g~maqtx, a~zzrefantig", f~stat, g~txt30
      INTO CORRESPONDING FIELDS OF TABLE @lt_pm0002
      FROM (lv_db_syntax)
      WHERE (lv_where_syntax).
  ENDIF.

*  Recorrer cada registro y buscar los posibles estados
  LOOP AT lt_pm0002 ASSIGNING FIELD-SYMBOL(<fs_pm0002>).
    CLEAR: lt_status, lv_stat_text, lv_excluir, lv_incluir.
    CALL FUNCTION 'BAPI_EQUI_GETSTATUS'
      EXPORTING
        equipment     = <fs_pm0002>-equnr
      TABLES
        system_status = lt_status
        user_status   = lt_user_status.

    LOOP AT lt_user_status INTO DATA(ls_stat)." WHERE status IN so_statt.
      IF ls_stat-text IN so_statt.
        lv_incluir = abap_true.
      ENDIF.
      CONCATENATE lv_stat_text ls_stat-text INTO lv_stat_text SEPARATED BY space.
    ENDLOOP.

    LOOP AT lt_status INTO ls_stat." WHERE status IN so_statt.
      IF ls_stat-text IN so_statt.
        lv_incluir = abap_true.
      ENDIF.
      CONCATENATE lv_stat_text ls_stat-text INTO lv_stat_text SEPARATED BY space.
    ENDLOOP.

    IF so_stext IS NOT INITIAL.
      LOOP AT lt_user_status INTO ls_stat WHERE text IN so_stext.
        lv_excluir = abap_true.
      ENDLOOP.
      IF lv_excluir IS INITIAL.
        LOOP AT lt_status INTO ls_stat WHERE text IN so_stext.
          lv_excluir = abap_true.
        ENDLOOP.
      ENDIF.
    ENDIF.

    IF lv_incluir = abap_true AND lv_excluir IS INITIAL AND ( lv_stat_text IS NOT INITIAL OR so_statt IS INITIAL ).
      <fs_pm0002>-stat_txt = lv_stat_text.
      APPEND <fs_pm0002> TO gt_pm0002.
    ENDIF.
  ENDLOOP.

  gt_pm0002_vis = gt_pm0002. "Por defecto mostrar todos sin filtrar.

ENDFORM.                    " OBTENER_TRO
*&---------------------------------------------------------------------*
*&      Form  OBTENER_JCLI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_jcli.
  DATA: lt_materiales   TYPE STANDARD TABLE OF ztpm0008,
        lv_db_syntax    TYPE                   string,
        lv_where_syntax TYPE                   string.

  lv_db_syntax = 'ztpm0003 AS a'
  & ' LEFT JOIN ztpm0010 AS b ON a~juegocli = b~juegocli'
  & ' LEFT JOIN ztpm0005 AS c ON a~juegocli = c~juegocli'
  & ' LEFT JOIN ztpm0008 AS e ON a~juegocli = e~juegocli'.

  IF p_jer IS NOT INITIAL.
    CONCATENATE lv_db_syntax "'LEFT JOIN ztpm0001 AS d ON a~copiatro = d~copiatro'
    'LEFT JOIN ztpm0004 AS f ON f~juegocli = a~juegocli'
    INTO lv_db_syntax SEPARATED BY space.
  ENDIF.

  CONCATENATE lv_where_syntax 'a~juegocli IN @so_jcli AND'
  & ' b~juektx IN @so_dencj AND'
  & ' a~refantig IN @so_refcj AND'
  & ' a~swerk IN @so_werks AND'
  & ' a~kunnr IN @so_kunnr AND'
  & ' a~planchonet IN @so_plaan AND'
  & ' a~pllargonet IN @so_plalg AND' INTO lv_where_syntax SEPARATED BY space.

  CONCATENATE lv_where_syntax 'a~cajancho IN @so_cajan AND'
  & ' a~cajlargo IN @so_cajlg AND'
  & ' a~cajalto IN @so_cajal AND'
  & ' e~matnrzplp IN @so_zplp AND'
  & ' e~matnrzpmp IN @so_zpmp AND'
  INTO lv_where_syntax SEPARATED BY space.

  IF p_jer IS NOT INITIAL AND gt_pm0001 IS NOT INITIAL.
    CONCATENATE lv_where_syntax 'c~copiatro = @gt_pm0001-copiatro AND'
    INTO lv_where_syntax SEPARATED BY space.
  ENDIF.
  IF p_jer IS NOT INITIAL.
    CONCATENATE lv_where_syntax 'f~equnr IN @so_cli AND'
    INTO lv_where_syntax SEPARATED BY space.
  ENDIF.

  CONCATENATE lv_where_syntax 'b~spras = @sy-langu' INTO lv_where_syntax SEPARATED BY space.

  IF p_jer IS NOT INITIAL AND gt_pm0001 IS NOT INITIAL.
    SELECT DISTINCT a~juegocli, b~juektx, c~copiatro, a~swerk, a~kunnr, a~pllargonet, a~planchonet, a~cajlargo, a~cajancho,
                    a~cajalto, a~refantig
    INTO CORRESPONDING FIELDS OF TABLE @gt_pm0003
    FROM (lv_db_syntax)
    FOR ALL ENTRIES IN @gt_pm0001
    WHERE (lv_where_syntax).
  ELSEIF p_jer IS INITIAL OR so_jcli IS NOT INITIAL OR so_cli IS NOT INITIAL.
    SELECT DISTINCT a~juegocli, b~juektx, c~copiatro, a~swerk, a~kunnr, a~pllargonet, a~planchonet, a~cajlargo, a~cajancho,
                  a~cajalto, a~refantig
    INTO CORRESPONDING FIELDS OF TABLE @gt_pm0003
    FROM (lv_db_syntax)
    WHERE (lv_where_syntax).
  ENDIF.

  gt_pm0003_vis = gt_pm0003. "Por defecto mostrar todos sin filtrar.

ENDFORM.                    " OBTENER_JCLI
*&---------------------------------------------------------------------*
*&      Form  OBTENER_CLI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_cli .
  DATA: lt_status       TYPE STANDARD TABLE OF bapi_itob_status,
        lt_user_status  TYPE STANDARD TABLE OF bapi_itob_status,
        lt_pm0004       TYPE                   zttpm0004_alv,
        lv_stat_text    TYPE                   zstatus_txt,
        lv_db_syntax    TYPE                   string,
        lv_excluir      TYPE xfeld,
        lv_incluir      TYPE xfeld,
        lv_where_syntax TYPE                   string.

  CLEAR: gt_pm0004.

  lv_db_syntax = 'equi AS a'
    & ' LEFT JOIN equz AS c ON a~equnr  = c~equnr'
    & ' LEFT JOIN iloa AS e ON e~iloan = c~iloan'
    & ' LEFT JOIN eqkt AS d ON a~equnr  = d~equnr'.

  CONCATENATE lv_db_syntax 'LEFT JOIN ztpm0011 AS f ON a~zztipo = f~tipo AND f~spras = d~spras'
    & ' LEFT JOIN ztpm0012 AS g ON a~zzmaq = g~maq AND g~spras = d~spras'
    & ' LEFT JOIN ztmm0015 AS h ON a~zzcolor = h~zzcolor'
    INTO lv_db_syntax SEPARATED BY space.

  CONCATENATE lv_db_syntax
  'LEFT JOIN ztpm0004 AS b ON a~equnr = b~equnr'
  INTO lv_db_syntax SEPARATED BY space.

  CONCATENATE lv_where_syntax 'a~eqtyp = @c_equcli AND'
  & ' a~equnr IN @so_cli AND'
  & ' d~eqktu IN @so_dencl AND'
  & ' a~zztipo IN @so_tipoc AND'
  & ' e~tplnr IN @so_ubicl AND'
  INTO lv_where_syntax SEPARATED BY space.

  CONCATENATE lv_where_syntax 'a~zzmaq IN @so_maqcl AND'
  & ' e~swerk IN @so_werks AND'
  & ' a~zzrefantig IN @so_refcl AND'
  & ' c~datbi = ''99991231'' AND'
  INTO lv_where_syntax SEPARATED BY space.

  IF p_jer IS NOT INITIAL AND gt_pm0003 IS NOT INITIAL.
    CONCATENATE lv_where_syntax 'b~juegocli = @gt_pm0003-juegocli AND'
    INTO lv_where_syntax SEPARATED BY space.
  ENDIF.

  CONCATENATE lv_where_syntax 'd~spras = @sy-langu' INTO lv_where_syntax SEPARATED BY space.

  IF p_jer IS NOT INITIAL AND gt_pm0003 IS NOT INITIAL.
    SELECT DISTINCT a~equnr, d~eqktx, b~juegocli, e~swerk, a~zzcolor, h~zzcolordes, a~zztipo, f~trotx, e~tplnr,
                    a~zzmaq, g~maqtx, a~zzrefantig
      INTO CORRESPONDING FIELDS OF TABLE @lt_pm0004
      FROM (lv_db_syntax)
      FOR ALL ENTRIES IN @gt_pm0003
      WHERE (lv_where_syntax).
  ELSEIF p_jer IS INITIAL OR so_cli IS NOT INITIAL.
    SELECT DISTINCT a~equnr, d~eqktx, b~juegocli, e~swerk, a~zzcolor, h~zzcolordes, a~zztipo, f~trotx, e~tplnr,
                    a~zzmaq, g~maqtx, a~zzrefantig
      INTO CORRESPONDING FIELDS OF TABLE @lt_pm0004
      FROM (lv_db_syntax)
      WHERE (lv_where_syntax).
  ENDIF.

*  Recorrer cada registro y buscar los posibles estados
  LOOP AT lt_pm0004 ASSIGNING FIELD-SYMBOL(<fs_pm0004>).
    CLEAR: lt_status, lv_stat_text, lv_incluir, lv_excluir.

    CALL FUNCTION 'BAPI_EQUI_GETSTATUS'
      EXPORTING
        equipment     = <fs_pm0004>-equnr
      TABLES
        system_status = lt_status
        user_status   = lt_user_status.

    LOOP AT lt_user_status INTO DATA(ls_stat).". WHERE status IN so_statc.
      IF ls_stat-text IN so_statc.
        lv_incluir = abap_true.
      ENDIF.
      CONCATENATE lv_stat_text ls_stat-text INTO lv_stat_text SEPARATED BY space.
    ENDLOOP.

    LOOP AT lt_status INTO ls_stat." WHERE status IN so_statc.
      IF ls_stat-text IN so_statc.
        lv_incluir = abap_true.
      ENDIF.
      CONCATENATE lv_stat_text ls_stat-text INTO lv_stat_text SEPARATED BY space.
    ENDLOOP.

    IF so_stexc IS NOT INITIAL.
      LOOP AT lt_user_status INTO ls_stat WHERE text IN so_stexc.
        lv_excluir = abap_true.
      ENDLOOP.
      IF lv_excluir IS INITIAL.
        LOOP AT lt_status INTO ls_stat WHERE text IN so_stexc.
          lv_excluir = abap_true.
        ENDLOOP.
      ENDIF.
    ENDIF.

    IF lv_incluir = abap_true AND lv_excluir IS INITIAL AND ( lv_stat_text IS NOT INITIAL OR so_statc IS INITIAL ).
      <fs_pm0004>-stat_txt = lv_stat_text.
      APPEND <fs_pm0004> TO gt_pm0004.
    ENDIF.
  ENDLOOP.

  gt_pm0004_vis = gt_pm0004. "Por defecto mostrar todos sin filtrar.

ENDFORM.                    " OBTENER_CLI

*&---------------------------------------------------------------------*
*&      Form  EDIT_VIEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM edit_view .
  IF g_edit_mode = abap_true.
    g_edit_mode = abap_false.
  ELSE.
*   Validar permisos para modificar
    AUTHORITY-CHECK OBJECT 'ZPM01'
    ID 'ACTVT' FIELD '01'. " read access
    IF sy-subrc = 0.
      g_edit_mode = abap_true.
    ELSE.
      MESSAGE e144(zpp).
    ENDIF.
  ENDIF.
ENDFORM.                    " EDIT_VIEW
*&---------------------------------------------------------------------*
*&      Form  OCULTAR_BOTONES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM ocultar_botones .
  IF g_edit_mode <> abap_true.
    LOOP AT SCREEN.
      IF screen-group1 = 'EDI'.
        screen-input = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " OCULTAR_BOTONES

*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_1201
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_1201 .
  DATA: lv_okcode TYPE sy-ucomm.
  MOVE-CORRESPONDING zspm0001_alv TO gs_pm0001.
  MOVE gv_okcode_1201 TO lv_okcode.
  CLEAR gv_okcode_1201.

  PERFORM recalcular_cuchillas.

  CASE lv_okcode.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      CLEAR: gs_pm0001, zspm0001_alv.
      LEAVE TO SCREEN 0.
    WHEN 'B_SAV_CT'.
      IF gs_pm0001-copiatro IS INITIAL. "Creando
        PERFORM crear_copia_troqueles.
      ELSE. "Modificando
        PERFORM guardar_copia_troqueles.
      ENDIF.
*     Actualizar las tablas de Copias de troqueles, tree y worklist.
      CLEAR: gs_pm0001, zspm0001_alv.
  ENDCASE.

ENDFORM.                    " USER_COMMAND_1201
*&---------------------------------------------------------------------*
*&      Form  EXIT_1201
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit_1201 .
  DATA: lv_okcode TYPE sy-ucomm.

  MOVE gv_okcode_1201 TO lv_okcode.
  CLEAR gv_okcode_1201.

  CASE lv_okcode.
    WHEN 'BACK' OR 'CANC' OR 'EXIT'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM.                    " EXIT_1201
*&---------------------------------------------------------------------*
*&      Form  EXIT_1301
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit_1301 .
  DATA: lv_okcode TYPE sy-ucomm.

  MOVE gv_okcode_1301 TO lv_okcode.
  CLEAR gv_okcode_1301.

  CASE lv_okcode.
    WHEN 'BACK' OR 'CANC' OR 'EXIT'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM.                    " EXIT_1301

*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_0100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_0100 .
  DATA: lv_okcode TYPE sy-ucomm.

  MOVE gv_okcode TO lv_okcode.
  CLEAR gv_okcode.

  CASE lv_okcode.
    WHEN 'REFRESH'.
      PERFORM obtener_datos.
      PERFORM mostrar_datos.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      LEAVE TO SCREEN 0.
    WHEN 'BCOL_CTRO'. "Control de collapse/expand de copias de troqueles
      dynnr_ctro = '0202'. "Dynpro vacía
    WHEN 'BEXP_CTRO'.
      dynnr_ctro = '0201'. "Dynpro con datos
    WHEN 'BCOL_TRO'. "Control de collapse/expand de copias de troqueles
      dynnr_tro = '0302'. "Dynpro vacía
    WHEN 'BEXP_TRO'.
      dynnr_tro = '0301'. "Dynpro con datos
    WHEN 'BCOL_JCLI'. "Control de collapse/expand de copias de troqueles
      dynnr_jcli = '0402'. "Dynpro vacía
    WHEN 'BEXP_JCLI'.
      dynnr_jcli = '0401'. "Dynpro con datos
    WHEN 'BCOL_CLI'. "Control de collapse/expand de copias de troqueles
      dynnr_cli = '0502'. "Dynpro vacía
    WHEN 'BEXP_CLI'.
      dynnr_cli = '0501'. "Dynpro con datos
    WHEN 'EDIT_VIEW'.
      PERFORM edit_view.

* >>> Control de acciones sobre botonera de Copias de troqueles
    WHEN 'B_ADD_CT'. "Crear copia de troqueles
      CLEAR: gs_pm0001, zspm0001_alv.
      CALL SCREEN 1201 STARTING AT 48 10.
    WHEN 'B_EDI_CT'. "Editar copia de troqueles
      PERFORM editar_copia_troqueles.
    WHEN 'B_DEL_CT'. "Eliminar copia de troqueles
      PERFORM eliminar_copia_troqueles.
    WHEN 'B_MAT_CT'. "Mostrar ventana de materiales
      PERFORM lista_mat_ctro.
* <<< Control de acciones sobre botonera de Copias de troqueles

* >>> Control de acciones sobre botonera Troqueles
    WHEN 'B_ADD_T'. "Crear troquel (equipo en transacción IE01)
      PERFORM crear_troquel.
    WHEN 'B_EDI_T'. "Modificar troquel
      PERFORM editar_troquel.
    WHEN 'B_CON_T'. "Asignar troquel a juego de troqueles
      PERFORM conectar_troquel.
    WHEN 'B_DES_T'. "Desasignar troquel a juego de troqueles
      PERFORM desconectar_troquel.
* <<< Control de acciones sobre botonera Troqueles

* >>> Control de acciones sobre botonera de Juegos de cliché
    WHEN 'B_ADD_JC'.
      PERFORM b_add_jc.
    WHEN 'B_EDI_JC'. "Modificar juego cliché
      PERFORM b_edi_jc.
    WHEN 'B_CON_JC'. "Asignar juego de clichés a juego de troqueles
      PERFORM conectar_juegocli.
    WHEN 'B_DES_JC'. "Desasignar juego de clichés a juego de troqueles
      PERFORM desconectar_jcli.
    WHEN 'B_DEL_JC'. "Eliminar juego de clichés
      PERFORM eliminar_juego_cliches.
    WHEN 'B_MAT_JC'.
      PERFORM lista_mat_jcli.
* <<< Control de acciones sobre botonera de Juegos de cliché

* >>> Control de acciones sobre botonera de Clichés
    WHEN 'B_ADD_C'. "Crear troquel (equipo en transacción IE01)
      PERFORM crear_cliche.
    WHEN 'B_EDI_C'. "Modificar troquel
      PERFORM editar_cliche.
    WHEN 'B_CON_C'. "Asignar troquel a juego de troqueles
      PERFORM conectar_cliche.
    WHEN 'B_DES_C'. "Desasignar troquel a juego de troqueles
      PERFORM desconectar_cliche.
* <<< Control de acciones sobre botonera de Clichés

  ENDCASE.
ENDFORM.                    " USER_COMMAND_0100
*&---------------------------------------------------------------------*
*&      Form  EDITAR_COPIA_TROQUELES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM editar_copia_troqueles.
  DATA: lr_selections TYPE REF TO cl_salv_selections.
  DATA: lt_rows     TYPE salv_t_row,
        lv_copiatro TYPE ztpm0001-copiatro,
        l_row       TYPE i.

  gr_table_ctro->get_metadata( ). "Si esto no actualiza los datos

  lr_selections = gr_table_ctro->get_selections( ).
  lt_rows = lr_selections->get_selected_rows( ).
  IF lt_rows IS INITIAL.
    MESSAGE e145(zpp). "Debe seleccionar un registro para modificarlo
  ENDIF.

  READ TABLE lt_rows INTO l_row INDEX 1.
  IF sy-subrc = 0.
    READ TABLE gt_pm0001_vis INTO gs_pm0001 INDEX l_row.
    IF sy-subrc = 0.
      lv_copiatro = gs_pm0001-copiatro.
*     Bloquear registro
      CALL FUNCTION 'ENQUEUE_EZLOCKPM0001'
        EXPORTING
          copiatro       = lv_copiatro
        EXCEPTIONS
          foreign_lock   = 1
          system_failure = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      CALL SCREEN 1201 STARTING AT 48 10.

*     Desbloquear registro
      CALL FUNCTION 'DEQUEUE_EZLOCKPM0001'
        EXPORTING
          copiatro = lv_copiatro.
    ELSE.
      MESSAGE e146(zpp). "No se ha podido determinar el registro
    ENDIF.
  ENDIF.
ENDFORM.                    " EDITAR_COPIA_TROQUELES
*&---------------------------------------------------------------------*
*&      Form  CREAR_COPIA_TROQUELES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_copia_troqueles .
  DATA: lv_copiatro TYPE zcopiatro,
        ls_pm0001   TYPE ztpm0001, "Tabla de copias de troqueles
        ls_pm0009   TYPE ztpm0009, "Tabla de textos
        lv_ctro_key TYPE lvc_nkey.

  PERFORM obtener_consecutivo_ctro CHANGING lv_copiatro.
  gs_pm0001-copiatro = lv_copiatro.

* Bloquear tabla
  CALL FUNCTION 'ENQUEUE_EZLOCKPM0001'
    EXPORTING
      copiatro       = lv_copiatro
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  MOVE-CORRESPONDING gs_pm0001 TO ls_pm0001.
  MOVE-CORRESPONDING gs_pm0001 TO ls_pm0009.
  ls_pm0009-spras = sy-langu.

  INSERT ztpm0001 FROM ls_pm0001.

  IF sy-subrc <> 0.
    MESSAGE e147(zpp).
    ROLLBACK WORK.
  ELSE.
    INSERT ztpm0009 FROM ls_pm0009.
    COMMIT WORK AND WAIT.
*   Añadir el registro creado a la tabla del ALV
    APPEND gs_pm0001 TO gt_pm0001.
    APPEND gs_pm0001 TO gt_pm0001_vis.
*   Añadir el registro creado al árbol
    PERFORM add_ctro_line USING     gr_tree
                                    gs_pm0001
                                    gv_root_key
                          CHANGING  lv_ctro_key.

*   Refrescar el ALV y el Tree.
    gr_tree->display( ).
    gr_tree->get_nodes( )->expand_all( ).
    gr_table_ctro->refresh( ).
    MESSAGE s148(zpp) WITH lv_copiatro.
    LEAVE TO SCREEN 0.
  ENDIF.
*     Desbloquear registro
  CALL FUNCTION 'DEQUEUE_EZLOCKPM0001'
    EXPORTING
      copiatro = lv_copiatro.
ENDFORM.                    " CREAR_COPIA_TROQUELES

*&---------------------------------------------------------------------*
*&      Form  GUARDAR_COPIA_TROQUELES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM guardar_copia_troqueles .
  DATA: ls_pm0001     TYPE ztpm0001, "Tabla de copias de troqueles
        ls_pm0009     TYPE ztpm0009, "Tabla de textos
        lv_tree_ident TYPE zident_tree.

  MOVE-CORRESPONDING gs_pm0001 TO ls_pm0001.
  MOVE-CORRESPONDING gs_pm0001 TO ls_pm0009.
  ls_pm0009-spras = sy-langu.

  UPDATE ztpm0001 FROM ls_pm0001.

  IF sy-subrc <> 0.
    MESSAGE e149(zpp).
    ROLLBACK WORK.
  ELSE.
    UPDATE ztpm0009 FROM ls_pm0009.
    COMMIT WORK AND WAIT.
*   Modificar el registro en las tablas del ALV
    READ TABLE gt_pm0001 ASSIGNING FIELD-SYMBOL(<fs_pm0001>) WITH KEY copiatro = ls_pm0001-copiatro.
    IF sy-subrc = 0 AND <fs_pm0001> IS ASSIGNED.
      MOVE-CORRESPONDING gs_pm0001 TO <fs_pm0001>.
    ENDIF.
    READ TABLE gt_pm0001_vis ASSIGNING FIELD-SYMBOL(<fs_pm0001_vis>) WITH KEY copiatro = ls_pm0001-copiatro.
    IF sy-subrc = 0 AND <fs_pm0001_vis> IS ASSIGNED.
      MOVE-CORRESPONDING gs_pm0001 TO <fs_pm0001_vis>.
    ENDIF.

*   Actualizar el registro modificado en el árbol (Descriptivo)
    WRITE gs_pm0001-copiatro TO lv_tree_ident.
    PERFORM actualizar_nodo USING gc_tipoctro
                                  lv_tree_ident
                                  gs_pm0001-juektx
                                  gr_tree.

*   Refrescar el ALV y el Tree.
    gr_tree->display( ).
    gr_tree->get_nodes( )->expand_all( ).
    gr_table_ctro->refresh( ).
    MESSAGE s150(zpp) WITH gs_pm0001-copiatro.
    LEAVE TO SCREEN 0.
  ENDIF.

ENDFORM.                    " GUARDAR_COPIA_TROQUELES


*&---------------------------------------------------------------------*
*&      Form  OBTENER_CONSECUTIVO_CTRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LV_COPIATRO  text
*----------------------------------------------------------------------*
FORM obtener_consecutivo_ctro  CHANGING p_copiatro TYPE zcopiatro.
  DATA: lt_copiatro      TYPE STANDARD TABLE OF zcopiatro,
        lv_lastnumber(8) TYPE                   c,
        lv_last_copiatro TYPE                   zcopiatro.

  SELECT copiatro FROM ztpm0001 UP TO 1 ROWS
    INTO TABLE lt_copiatro
    ORDER BY copiatro DESCENDING.

  IF sy-subrc = 0.
    READ TABLE lt_copiatro INTO lv_last_copiatro INDEX 1.
    lv_lastnumber = lv_last_copiatro+2.
    lv_lastnumber = lv_lastnumber + 1.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = lv_lastnumber
      IMPORTING
        output = lv_lastnumber.

    CONCATENATE gc_tipoctro lv_lastnumber INTO p_copiatro.
  ELSE.
    CONCATENATE gc_tipoctro '00000001' INTO p_copiatro.
  ENDIF.
ENDFORM.                    " OBTENER_CONSECUTIVO_CTRO

*&---------------------------------------------------------------------*
*&      Form  OBTENER_CONSECUTIVO_TRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_EQUNR  text
*----------------------------------------------------------------------*
FORM obtener_consecutivo_equi USING     p_tipo TYPE ztipo_tree
                              CHANGING  p_equnr TYPE equnr.

  DATA: lt_equnr         TYPE STANDARD TABLE OF equnr,
        lv_lastnumber(9) TYPE                   c,
        lv_likecond(2)   TYPE                   c,
        lv_last_equnr    TYPE                   equnr.

  CONCATENATE p_tipo '%' INTO lv_likecond.

  SELECT equnr FROM equi UP TO 1 ROWS
    INTO TABLE lt_equnr
    WHERE eqtyp = p_tipo AND equnr LIKE lv_likecond
    ORDER BY equnr DESCENDING.

  IF sy-subrc = 0.
    READ TABLE lt_equnr INTO lv_last_equnr INDEX 1.
    lv_lastnumber = lv_last_equnr+1.
    lv_lastnumber = lv_lastnumber + 1.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = lv_lastnumber
      IMPORTING
        output = lv_lastnumber.

    CONCATENATE p_tipo lv_lastnumber INTO p_equnr.
  ELSE.
    CONCATENATE p_tipo '000000001' INTO p_equnr.
  ENDIF.
ENDFORM.                    " OBTENER_CONSECUTIVO_TRO

FORM obtener_consecutivo_jcli  CHANGING p_juegocli TYPE zjuegocli.
  DATA: lt_juegocli      TYPE STANDARD TABLE OF zjuegocli,
        lv_lastnumber(8) TYPE                   c,
        lv_last_juegocli TYPE                   zjuegocli.

  SELECT juegocli FROM ztpm0003 UP TO 1 ROWS
    INTO TABLE lt_juegocli
    ORDER BY juegocli DESCENDING.

  IF sy-subrc = 0.
    READ TABLE lt_juegocli INTO lv_last_juegocli INDEX 1.
    lv_lastnumber = lv_last_juegocli+2.
    lv_lastnumber = lv_lastnumber + 1.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = lv_lastnumber
      IMPORTING
        output = lv_lastnumber.

    CONCATENATE gc_tipojcli lv_lastnumber INTO p_juegocli.
  ELSE.
    CONCATENATE gc_tipojcli '00000001' INTO p_juegocli.
  ENDIF.
ENDFORM.                    " OBTENER_CONSECUTIVO_CTRO
*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_NODO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM actualizar_nodo USING p_tipo TYPE ztipo_tree
                           p_clave TYPE zident_tree
                           p_new_desc TYPE zjuektx
                           p_tree TYPE REF TO cl_salv_tree.

  DATA: lr_nodes      TYPE REF TO cl_salv_nodes,
        lt_nodes      TYPE        salv_t_nodes,
        ls_node       TYPE        salv_s_nodes,
        lv_text_value TYPE        lvc_value,
        ls_data       TYPE REF TO data.

  FIELD-SYMBOLS: <ls_data_row> TYPE zspm0001_tree.

  lr_nodes = p_tree->get_nodes( ).

  lt_nodes = lr_nodes->get_all_nodes( ).

  LOOP AT lt_nodes INTO ls_node.
    ls_data = ls_node-node->get_data_row( ).
    ASSIGN ls_data->* TO <ls_data_row>.
    IF <ls_data_row>-tipo = p_tipo AND <ls_data_row>-clave = p_clave.
      <ls_data_row>-descriptivo = p_new_desc.
      ls_node-node->set_data_row( <ls_data_row> ).
      lv_text_value = p_new_desc.
      ls_node-node->set_text( lv_text_value ).
    ENDIF.
  ENDLOOP.

ENDFORM.                    " ACTUALIZAR_NODO

FORM copiatro_modificable USING p_copiatro TYPE zcopiatro
                         CHANGING p_nomod TYPE xfeld.
  DATA: lv_copiatro TYPE zcopiatro.

  " Hacer selects a tablas para evitar tablas internas desactualizadas por uso de filtros.
  SELECT SINGLE copiatro
    INTO lv_copiatro
    FROM ztpm0002
    WHERE copiatro = p_copiatro.
  IF sy-subrc <> 0.
    SELECT SINGLE copiatro
    INTO lv_copiatro
    FROM ztpm0005
    WHERE copiatro = p_copiatro.
    IF sy-subrc = 0.
      p_nomod = abap_true.
    ENDIF.
  ELSE.
    p_nomod = abap_true.
  ENDIF.
ENDFORM.

FORM juegocli_modificable USING p_juegocli TYPE zjuegocli
                         CHANGING p_nomod TYPE xfeld.

  DATA: lv_juegocli TYPE zcopiatro.

  " Hacer selects a tablas para evitar tablas internas desactualizadas por uso de filtros.

  SELECT SINGLE juegocli
    INTO lv_juegocli
    FROM ztpm0004
    WHERE juegocli = p_juegocli.

  IF sy-subrc = 0.
    p_nomod = abap_true.
  ELSE.
    SELECT SINGLE juegocli
    INTO lv_juegocli
    FROM ztpm0005
    WHERE juegocli = p_juegocli.
    IF sy-subrc = 0.
      p_nomod = abap_true.
    ENDIF.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_COPIA_TROQUELES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM eliminar_copia_troqueles .

  DATA: lr_selections   TYPE REF TO cl_salv_selections,
        lt_rows         TYPE        salv_t_row,
        lv_copiatro     TYPE        ztpm0001-copiatro,
        lv_message      TYPE        string,
        lv_answer(1)    TYPE        c,
        lv_tree_ident   TYPE        zident_tree,
        ls_pm0001       TYPE        zspm0001_alv,
        l_row           TYPE        i,
        lv_nomod        TYPE        xfeld,
        lv_matasignados TYPE        xfeld.

  gr_table_ctro->get_metadata( ). "Si esto no actualiza los datos

  lr_selections = gr_table_ctro->get_selections( ).
  lt_rows = lr_selections->get_selected_rows( ).
  IF lt_rows IS INITIAL.
    MESSAGE e145(zpp). "Debe seleccionar un registro para modificarlo
  ENDIF.

  READ TABLE lt_rows INTO l_row INDEX 1.
  IF sy-subrc = 0.
    READ TABLE gt_pm0001_vis INTO ls_pm0001 INDEX l_row.

    PERFORM copiatro_modificable USING ls_pm0001-copiatro
                              CHANGING lv_nomod.

    IF lv_nomod = abap_true.
      MESSAGE e154(zpp) WITH ls_pm0001-copiatro.
    ENDIF.

    MESSAGE s153(zpp) INTO lv_message WITH ls_pm0001-copiatro.

    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        text_question  = lv_message
      IMPORTING
        answer         = lv_answer
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.

    IF lv_answer = '1'.

      IF sy-subrc = 0.
        lv_copiatro = ls_pm0001-copiatro.
*     Bloquear registro
        CALL FUNCTION 'ENQUEUE_EZLOCKPM0001'
          EXPORTING
            copiatro       = lv_copiatro
          EXCEPTIONS
            foreign_lock   = 1
            system_failure = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.

*      Comprobar si tiene materiales asignados
        PERFORM materiales_asignados USING lv_copiatro
                                           ''
                                     CHANGING lv_matasignados.
        IF lv_matasignados = abap_true.
          CALL FUNCTION 'ENQUEUE_EZLOCKPM0008'
            EXPORTING
              x_copiatro     = lv_copiatro
            EXCEPTIONS
              foreign_lock   = 1
              system_failure = 2
              OTHERS         = 3.
          IF sy-subrc <> 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ENDIF.
        ENDIF.
*       Eliminar de la base de datos

        DELETE FROM ztpm0001 WHERE copiatro = lv_copiatro.

        IF sy-subrc <> 0.
          ROLLBACK WORK.
          MESSAGE e151(zpp) WITH lv_copiatro.
        ELSE.

          IF lv_matasignados = abap_true.
            DELETE FROM ztpm0008 WHERE copiatro = lv_copiatro.

            IF sy-subrc <> 0.
              ROLLBACK WORK.
              MESSAGE e216(zpp) WITH lv_copiatro.
            ENDIF.

          ENDIF.

          MESSAGE s152(zpp) WITH lv_copiatro.
          COMMIT WORK AND WAIT.

*       Actualizar tablas y tree
          DELETE gt_pm0001 WHERE copiatro = lv_copiatro.
          DELETE gt_pm0001_vis WHERE copiatro = lv_copiatro.

          WRITE lv_copiatro TO lv_tree_ident.
          PERFORM delete_tree_node USING gc_tipoctro
                                         lv_tree_ident
                                         gr_tree.

*       Refrescar ALV y Tree
          gr_table_ctro->refresh( ).
          gr_tree->display( ).
          gr_tree->get_nodes( )->expand_all( ).
        ENDIF.
*     Desbloquear registro
        CALL FUNCTION 'DEQUEUE_EZLOCKPM0001'
          EXPORTING
            copiatro = lv_copiatro.

        IF lv_matasignados = abap_true.
          CALL FUNCTION 'DEQUEUE_EZLOCKPM0008'
            EXPORTING
              copiatro = lv_copiatro.
        ENDIF.

      ELSE.
        MESSAGE e146(zpp). "No se ha podido determinar el registro
      ENDIF.

    ENDIF.
  ENDIF.


*
ENDFORM.                    " ELIMINAR_COPIA_TROQUELES
*&---------------------------------------------------------------------*
*&      Form  DELETE_TREE_NODE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GC_TIPOCTRO  text
*      -->P_LV_COPIATRO  text
*----------------------------------------------------------------------*
FORM delete_tree_node  USING    p_tipo TYPE ztipo_tree
                                p_clave TYPE zident_tree
                                p_tree TYPE REF TO cl_salv_tree.

  DATA: lr_node TYPE REF TO cl_salv_node.

  PERFORM encontrar_nodo USING p_tipo
                               p_clave
                               p_tree
                         CHANGING lr_node.

  IF lr_node IS NOT INITIAL.
    lr_node->delete( ).
  ENDIF.

ENDFORM.                    " DELETE_TREE_NODE

FORM datos_trans_ie01 USING p_equnr TYPE equnr
                            p_type TYPE ztipo_tree
                            p_swerk TYPE swerk
                      CHANGING p_bdcdata_tab TYPE bdcdata_tab.

  PERFORM fill_bdc_data USING 'SAPMIEQ0' '100' 'X' '' ''
                        CHANGING p_bdcdata_tab. "Parametros iniciales

  IF p_equnr IS NOT INITIAL.
    PERFORM fill_bdc_data USING '' '' '' 'BDC_CURSOR' 'RM63E-EQUNR'
                          CHANGING p_bdcdata_tab.
    PERFORM fill_bdc_data USING '' '' '' 'BDC_OKCODE' '/00'
                          CHANGING p_bdcdata_tab.
    PERFORM fill_bdc_data USING '' '' '' 'RM63E-EQUNR' p_equnr
                          CHANGING p_bdcdata_tab.
  ELSE.
    PERFORM fill_bdc_data USING '' '' '' 'BDC_CURSOR' 'RM63E-EQTYP'
                        CHANGING p_bdcdata_tab.
    PERFORM fill_bdc_data USING '' '' '' 'BDC_OKCODE' '/00'
                          CHANGING p_bdcdata_tab.
    PERFORM fill_bdc_data USING '' '' '' 'RM63E-EQTYP' p_type
                          CHANGING p_bdcdata_tab.

    IF p_swerk IS NOT INITIAL. "Si hay copia de troquel seleccionada añadir el centro
      PERFORM fill_bdc_data USING 'SAPMIEQ0' '101' 'X' '' ''
                          CHANGING p_bdcdata_tab.
      PERFORM fill_bdc_data USING '' '' '' 'BDC_OKCODE' 'T\02'
                            CHANGING p_bdcdata_tab.

      PERFORM fill_bdc_data USING 'SAPMIEQ0' '101' 'X' '' ''
                          CHANGING p_bdcdata_tab.
      PERFORM fill_bdc_data USING '' '' '' 'BDC_CURSOR' 'ITOB-SWERK'
                          CHANGING p_bdcdata_tab.
      PERFORM fill_bdc_data USING '' '' '' 'BDC_OKCODE' '/00'
                            CHANGING p_bdcdata_tab.
      PERFORM fill_bdc_data USING '' '' '' 'ITOB-SWERK' p_swerk
                          CHANGING p_bdcdata_tab.
    ENDIF.
  ENDIF.



ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  CREAR_TROQUEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_troquel .

  DATA: lv_cod_tro    TYPE                   equnr,
        ls_pm0001     TYPE                   zspm0001_alv,
        ls_pm0002     TYPE                   zspm0002_alv,
        lt_trans_mess TYPE STANDARD TABLE OF bdcmsgcoll,
        ls_trans_mess TYPE                   bdcmsgcoll.

  DATA: lt_bdcdata_tab TYPE bdcdata_tab,
        opt            TYPE ctu_params.

  PERFORM obtener_fila_seleccionada USING     gr_table_ctro
                                              gt_pm0001_vis
                                    CHANGING  ls_pm0001.

* > Para el caso de usar codificación inteligente (afecta rendimiento)
*  PERFORM obtener_consecutivo_equi USING gc_tipotro
*                                      CHANGING lv_cod_tro.
* < Para el caso de usar codificación inteligente (afecta rendimiento)

* Rellenar parámetros de tabla bdcdata_tab
  PERFORM datos_trans_ie01 USING ''
                                 gc_tipotro
                                 ls_pm0001-swerk
                      CHANGING   lt_bdcdata_tab.


  TRY.
      opt-dismode = 'E'.
      opt-updmode = 'L'.

      CALL TRANSACTION 'IE01' WITH AUTHORITY-CHECK
                            USING lt_bdcdata_tab OPTIONS FROM opt
                            MESSAGES INTO lt_trans_mess.

      READ TABLE lt_trans_mess INTO ls_trans_mess WITH KEY msgtyp = 'E'.
      IF sy-subrc = 0.
        MESSAGE ID ls_trans_mess-msgid TYPE ls_trans_mess-msgtyp NUMBER ls_trans_mess-msgnr
        WITH ls_trans_mess-msgv1 ls_trans_mess-msgv2 ls_trans_mess-msgv3 ls_trans_mess-msgv4.
      ELSE.
        READ TABLE lt_trans_mess INTO ls_trans_mess WITH KEY msgtyp = 'S'.
        IF sy-subrc = 0.
          lv_cod_tro = ls_trans_mess-msgv1.
*         Añadir los datos del nuevo troquel a la tabla del ALV
          PERFORM update_troquel USING     lv_cod_tro
                                           abap_true
                                 CHANGING  ls_pm0002.
          gr_table_tro->refresh( ). "Actualizar los datos del ALV

          IF ls_pm0002 IS NOT INITIAL.
            IF ls_pm0001 IS NOT INITIAL.
*           Mostrar pantalla de asignación de troquel
              gs_pm0002 = ls_pm0002.
              gs_pm0002-copiatro = ls_pm0001-copiatro.
              CALL SCREEN '1202' STARTING AT 48 10.
              IF gs_pm0002 IS NOT INITIAL AND gs_pm0002-copiatro IS INITIAL. "Se canceló la asignación
                PERFORM add_tro_line USING gr_worklist
                            gs_pm0002
                            ''.
                gr_worklist->display( ).
                CLEAR: gs_pm0002.
              ENDIF.
            ELSE.
*           Añadir el troquel al listado de pendientes de asignar
              PERFORM add_tro_line USING  gr_worklist
                                          ls_pm0002
                                          ''.
              gr_worklist->display( ). "Actualizar listado de pendientes
            ENDIF.
          ENDIF.

        ENDIF.
      ENDIF.
    CATCH cx_sy_authorization_error.
      MESSAGE e155(zpp).
  ENDTRY.
ENDFORM.                    " CREAR_TROQUEL


FORM fill_bdc_data USING VALUE(p_program)
                      VALUE(p_dynpro)
                      VALUE(p_dynbegin)
                      VALUE(p_fnam)
                      VALUE(p_fval)
                   CHANGING pt_bdcdata TYPE bdcdata_tab.
  DATA: ls_bcdata TYPE bdcdata.

  IF p_dynbegin = 'X' .
    ls_bcdata-program = p_program .
    ls_bcdata-dynpro  = p_dynpro .
    ls_bcdata-dynbegin = p_dynbegin .
    APPEND ls_bcdata TO pt_bdcdata.
  ELSE.
    ls_bcdata-fnam = p_fnam.
    ls_bcdata-fval = p_fval.
    CONDENSE ls_bcdata-fval.
    APPEND ls_bcdata TO pt_bdcdata.
  ENDIF.                               " IF p_dynbeg..

ENDFORM .

*&---------------------------------------------------------------------*
*&      Form  EDITAR_TROQUEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM editar_troquel .

  DATA: lv_cod_tro    TYPE                   equnr,
        lv_tree_ident TYPE                   zident_tree,
        ls_pm0002     TYPE                   zspm0002_alv,
        lt_trans_mess TYPE STANDARD TABLE OF bdcmsgcoll,
        ls_trans_mess TYPE                   bdcmsgcoll,
        lr_tree       TYPE REF TO            cl_salv_tree.

  DATA: lt_bdcdata_tab TYPE bdcdata_tab,
        opt            TYPE ctu_params.

  PERFORM obtener_fila_seleccionada USING   gr_table_tro
                                            gt_pm0002_vis
                                  CHANGING  ls_pm0002.
  IF ls_pm0002 IS INITIAL.
    MESSAGE e145(zpp).
  ENDIF.

  PERFORM datos_trans_ie01 USING ls_pm0002-equnr
                                 gc_tipotro
                                 ''
                      CHANGING   lt_bdcdata_tab.

  TRY.
      opt-dismode = 'E'.
      opt-updmode = 'L'.
*
      CALL TRANSACTION 'IE02' WITH AUTHORITY-CHECK
                            USING lt_bdcdata_tab OPTIONS FROM opt
                            MESSAGES INTO lt_trans_mess.

      READ TABLE lt_trans_mess INTO ls_trans_mess WITH KEY msgtyp = 'E'.
      IF sy-subrc = 0.
        MESSAGE ID ls_trans_mess-msgid TYPE ls_trans_mess-msgtyp NUMBER ls_trans_mess-msgnr
        WITH ls_trans_mess-msgv1 ls_trans_mess-msgv2 ls_trans_mess-msgv3 ls_trans_mess-msgv4.
      ELSE.
        READ TABLE lt_trans_mess INTO ls_trans_mess WITH KEY msgtyp = 'S'.
        IF sy-subrc = 0.
          lv_cod_tro = ls_trans_mess-msgv1.
*         Añadir los datos del nuevo troquel a la tabla del ALV
          PERFORM update_troquel USING     lv_cod_tro
                                           abap_false
                                 CHANGING  ls_pm0002.
          gr_table_tro->refresh( ). "Actualizar los datos del ALV

*         Actualizar datos en el arbol
          IF ls_pm0002-copiatro IS NOT INITIAL.
            lr_tree = gr_tree.
          ELSE.
            lr_tree = gr_worklist.
          ENDIF.
          WRITE ls_pm0002-equnr TO lv_tree_ident.
          PERFORM actualizar_nodo USING gc_tipotro
                                        lv_tree_ident
                                        ls_pm0002-eqktx
                                        lr_tree.

          IF ls_pm0002-copiatro IS NOT INITIAL.
            gr_tree->display( ).
            gr_tree->get_nodes( )->expand_all( ).
          ELSE.
            gr_worklist->display( ).
          ENDIF.
        ENDIF.
      ENDIF.
    CATCH cx_sy_authorization_error.
      MESSAGE e155(zpp).
  ENDTRY.

ENDFORM.                    " CREAR_TROQUEL

FORM update_troquel USING p_equnr TYPE equnr
                          p_new TYPE xfeld
                    CHANGING ps_pm0002 TYPE zspm0002_alv.

  DATA: ls_pm0002      TYPE                   zspm0002_alv,
        lt_status      TYPE STANDARD TABLE OF bapi_itob_status,
        lt_user_status TYPE STANDARD TABLE OF bapi_itob_status,
        lv_stat_text   TYPE                   zstatus_txt.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_equnr
    IMPORTING
      output = p_equnr.
* Select distinta a la de obtener datos para no tener en cuenta los filtros
  SELECT SINGLE a~equnr, d~eqktx, b~copiatro, b~equnrs, e~swerk, a~zztipo, f~trotx, e~tplnr, a~zzmaq, g~maqtx, a~zzrefantig
  INTO CORRESPONDING FIELDS OF @ls_pm0002
  FROM equi AS a
  LEFT JOIN ztpm0002 AS b ON a~equnr = b~equnr
  LEFT JOIN equz AS c ON a~equnr  = c~equnr
  LEFT JOIN iloa AS e ON e~iloan = c~iloan
  LEFT JOIN eqkt AS d ON a~equnr  = d~equnr
  LEFT OUTER JOIN ztpm0011 AS f ON a~zztipo = f~tipo AND f~spras = d~spras
  LEFT OUTER JOIN ztpm0012 AS g ON a~zzmaq = g~maq AND f~spras = d~spras
  WHERE a~equnr = @p_equnr AND
        c~datbi = '99991231' AND
        d~spras = @sy-langu.

  IF sy-subrc = 0.
    CLEAR: lt_status, lv_stat_text.
    CALL FUNCTION 'BAPI_EQUI_GETSTATUS'
      EXPORTING
        equipment     = ls_pm0002-equnr
      TABLES
        system_status = lt_status
        user_status   = lt_user_status.

    LOOP AT lt_user_status INTO DATA(ls_stat) WHERE status IN so_statt.
      CONCATENATE lv_stat_text ls_stat-text INTO lv_stat_text SEPARATED BY space.
    ENDLOOP.

    LOOP AT lt_status INTO ls_stat WHERE status IN so_statt.
      CONCATENATE lv_stat_text ls_stat-text INTO lv_stat_text SEPARATED BY space.
    ENDLOOP.

    ls_pm0002-stat_txt = lv_stat_text.
    IF p_new = abap_true.
      APPEND ls_pm0002 TO gt_pm0002.
      APPEND ls_pm0002 TO gt_pm0002_vis.
    ELSE.
      PERFORM actualizar_tpm0002  USING  ls_pm0002.
    ENDIF.
    ps_pm0002 = ls_pm0002.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  ASIGNAR_TROQUEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM asignar_troquel USING p_pm0002 TYPE zspm0002_alv.
  DATA: lv_copiatro   TYPE zcopiatro,
        lv_copiatro2  TYPE zcopiatro,
        lv_message    TYPE string,
        lv_answer(1)  TYPE c,
        lv_asignar    TYPE xfeld,
        lv_swerk      TYPE swerk,
        ls_pm0002     TYPE ztpm0002,
        ls_pm0002_alv TYPE zspm0002_alv,
*        lv_equnr      TYPE equnr,
        lv_ctro_key   TYPE zident_tree,
        lv_tro_key    TYPE zident_tree,
        lv_father_key TYPE lvc_nkey.

  IF p_pm0002-copiatro IS NOT INITIAL.
    lv_asignar = abap_true.
*    Existe copia de troquel?
    SELECT SINGLE copiatro swerk
      INTO ( lv_copiatro, lv_swerk )
      FROM ztpm0001
      WHERE copiatro = p_pm0002-copiatro.

    IF sy-subrc <> 0.
      MESSAGE e156(zpp) WITH p_pm0002-copiatro.
    ENDIF.

    IF lv_swerk <> p_pm0002-swerk.
      MESSAGE e161(zpp).
    ENDIF.

*   Está el troquel asignado?
    SELECT SINGLE copiatro
        INTO lv_copiatro2
        FROM ztpm0002
        WHERE equnr = p_pm0002-equnr.

    IF sy-subrc = 0.
      MESSAGE e159(zpp) WITH p_pm0002-equnr lv_copiatro2.
    ENDIF.

    IF p_pm0002-equnrs = 'P'.
* Hay otro troquel principal?
      SELECT SINGLE *
        INTO CORRESPONDING FIELDS OF ls_pm0002_alv
        FROM ztpm0002
        WHERE copiatro = p_pm0002-copiatro AND
              equnrs = 'P'.

      IF sy-subrc = 0.
        MESSAGE s157(zpp) INTO lv_message WITH ls_pm0002_alv-equnr.

        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            text_question  = lv_message
          IMPORTING
            answer         = lv_answer
          EXCEPTIONS
            text_not_found = 1
            OTHERS         = 2.

        IF lv_answer = '1'.

*       Cambiar el registro principal
          UPDATE ztpm0002 SET equnrs = 'S'
                WHERE copiatro = p_pm0002-copiatro AND
                      equnr = ls_pm0002_alv-equnr.
          IF sy-subrc <> 0.
            MESSAGE e158(zpp).
            ROLLBACK WORK.
          ELSE.
            COMMIT WORK AND WAIT.
            ls_pm0002_alv-equnrs = 'S'.
            READ TABLE gt_pm0002 ASSIGNING FIELD-SYMBOL(<fs_pm0002>) WITH KEY equnr = ls_pm0002_alv-equnr.
            IF sy-subrc = 0 AND <fs_pm0002> IS ASSIGNED.
              <fs_pm0002>-equnrs = ls_pm0002_alv-equnrs.
            ENDIF.
            READ TABLE gt_pm0002_vis ASSIGNING FIELD-SYMBOL(<fs_pm0002_vis>) WITH KEY equnr = ls_pm0002_alv-equnr.
            IF sy-subrc = 0 AND <fs_pm0002_vis> IS ASSIGNED.
              <fs_pm0002_vis>-equnrs = ls_pm0002_alv-equnrs.
            ENDIF.
          ENDIF.
        ELSE.
          lv_asignar = abap_false.
        ENDIF.

      ENDIF.

    ENDIF.

    IF lv_asignar = abap_true.
      MOVE-CORRESPONDING p_pm0002 TO ls_pm0002.
      INSERT ztpm0002 FROM ls_pm0002.
      IF sy-subrc <> 0.
        MESSAGE e160(zpp) WITH ls_pm0002-equnr ls_pm0002-copiatro.
        ROLLBACK WORK.
      ELSE.
        COMMIT WORK AND WAIT.
        PERFORM actualizar_tpm0002 USING p_pm0002.

        gr_table_tro->refresh( ).
*       Añadir elemento a árbol de asignaciones
        WRITE ls_pm0002-copiatro TO lv_ctro_key.
        PERFORM find_tree_key USING     gc_tipoctro
                                        lv_ctro_key
                                        gr_tree
                              CHANGING  lv_father_key.

        IF lv_father_key IS NOT INITIAL.
          PERFORM add_tro_line USING gr_tree
                                     p_pm0002
                                     lv_father_key.
          gr_tree->display( ).
          gr_tree->get_nodes( )->expand_all( ).
        ENDIF.
*       Eliminar elemento del árbol de pendientes (worklist)
        WRITE ls_pm0002-equnr TO lv_tro_key.
        PERFORM delete_tree_node USING  gc_tipotro
                                        lv_tro_key
                                        gr_worklist.
        gr_worklist->display( ).
        MESSAGE s164(zpp) WITH ls_pm0002-equnr lv_ctro_key.
      ENDIF.
    ENDIF.

    IF lv_answer <> '2'.
      CLEAR: gs_pm0002, zspm0002_alv.
      LEAVE TO SCREEN 0.
    ENDIF.

  ENDIF.
ENDFORM.                    " ASIGNAR_TROQUEL
*&---------------------------------------------------------------------*
*&      Form  FIND_FATHER_KEY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM find_tree_key  USING       p_tipo TYPE ztipo_tree
                                p_clave TYPE zident_tree
                                p_tree TYPE REF TO cl_salv_tree
                      CHANGING  p_key TYPE lvc_nkey.

  DATA: lr_node TYPE REF TO cl_salv_node.

  PERFORM encontrar_nodo USING p_tipo
                               p_clave
                               p_tree
                         CHANGING lr_node.

  IF lr_node IS NOT INITIAL.
    p_key = lr_node->get_key( ).
  ENDIF.


ENDFORM.                    " FIND_FATHER_KEY

FORM encontrar_nodo USING       p_tipo TYPE ztipo_tree
                                p_clave TYPE zident_tree
                                p_tree TYPE REF TO cl_salv_tree
                    CHANGING    p_node TYPE REF TO cl_salv_node.

  DATA: lr_nodes TYPE REF TO cl_salv_nodes,
        lt_nodes TYPE        salv_t_nodes,
        ls_node  TYPE        salv_s_nodes,
        ls_data  TYPE REF TO data.

  FIELD-SYMBOLS: <ls_data_row> TYPE zspm0001_tree.

  lr_nodes = p_tree->get_nodes( ).
  lt_nodes = lr_nodes->get_all_nodes( ).

  LOOP AT lt_nodes INTO ls_node.
    ls_data = ls_node-node->get_data_row( ).
    ASSIGN ls_data->* TO <ls_data_row>.
    IF <ls_data_row>-tipo = p_tipo AND <ls_data_row>-clave = p_clave.
      p_node = ls_node-node.
      EXIT.
    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_TPM0002
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_PM0002  text
*----------------------------------------------------------------------*
FORM actualizar_tpm0002  USING  ps_pm0002 TYPE zspm0002_alv.
  READ TABLE gt_pm0002 ASSIGNING FIELD-SYMBOL(<fs_pm0002>) WITH KEY equnr = ps_pm0002-equnr.
  IF sy-subrc = 0 AND <fs_pm0002> IS ASSIGNED.
    <fs_pm0002> = ps_pm0002.
  ENDIF.
  READ TABLE gt_pm0002_vis ASSIGNING FIELD-SYMBOL(<fs_pm0002_vis>) WITH KEY equnr = ps_pm0002-equnr.
  IF sy-subrc = 0 AND <fs_pm0002_vis> IS ASSIGNED.
    <fs_pm0002_vis> = ps_pm0002.
  ENDIF.
ENDFORM.                    " ACTUALIZAR_TPM0002


*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_TPM0003
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_PM0002  text
*----------------------------------------------------------------------*
FORM actualizar_tpm0003  USING  ps_pm0003 TYPE zspm0003_alv.
  READ TABLE gt_pm0003 ASSIGNING FIELD-SYMBOL(<fs_pm0003>) WITH KEY juegocli = ps_pm0003-juegocli.
  IF sy-subrc = 0 AND <fs_pm0003> IS ASSIGNED.
    <fs_pm0003> = ps_pm0003.
  ENDIF.
  READ TABLE gt_pm0003_vis ASSIGNING FIELD-SYMBOL(<fs_pm0003_vis>) WITH KEY juegocli = ps_pm0003-juegocli.
  IF sy-subrc = 0 AND <fs_pm0003_vis> IS ASSIGNED.
    <fs_pm0003_vis> = ps_pm0003.
  ENDIF.
ENDFORM.                    " ACTUALIZAR_TPM0003

*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_TPM0004
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_PM0002  text
*----------------------------------------------------------------------*
FORM actualizar_tpm0004  USING  ps_pm0004 TYPE zspm0004_alv.
  READ TABLE gt_pm0004 ASSIGNING FIELD-SYMBOL(<fs_pm0004>) WITH KEY equnr = ps_pm0004-equnr.
  IF sy-subrc = 0 AND <fs_pm0004> IS ASSIGNED.
    <fs_pm0004> = ps_pm0004.
  ENDIF.
  READ TABLE gt_pm0004_vis ASSIGNING FIELD-SYMBOL(<fs_pm0004_vis>) WITH KEY equnr = ps_pm0004-equnr.
  IF sy-subrc = 0 AND <fs_pm0004_vis> IS ASSIGNED.
    <fs_pm0004_vis> = ps_pm0004.
  ENDIF.
ENDFORM.                    " ACTUALIZAR_TPM0004

*&---------------------------------------------------------------------*
*&      Form  CONECTAR_TROQUEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM conectar_troquel .
  DATA: ls_tro_sel  TYPE zspm0002_alv,
        ls_ctro_sel TYPE zspm0001_alv.

* Obtener troquel seleccionado
  PERFORM obtener_fila_seleccionada USING     gr_table_tro
                                              gt_pm0002_vis
                                    CHANGING  ls_tro_sel.
  IF ls_tro_sel IS INITIAL.
    MESSAGE e163(zpp).
  ENDIF.

  IF ls_tro_sel-copiatro IS NOT INITIAL.
    MESSAGE e159(zpp) WITH ls_tro_sel-equnr ls_tro_sel-copiatro. "El troquel & ya está asignado a la copia de troqueles &
  ENDIF.
* Obtener copia de troquel seleccionada.
  PERFORM obtener_fila_seleccionada USING   gr_table_ctro
                                            gt_pm0001_vis
                                  CHANGING  ls_ctro_sel.
  IF ls_ctro_sel IS NOT INITIAL.
    ls_tro_sel-copiatro = ls_ctro_sel-copiatro.
  ENDIF.
  gs_pm0002 = ls_tro_sel.
  CALL SCREEN '1202' STARTING AT 48 10.
ENDFORM.                    " CONECTAR_TROQUEL

FORM obtener_fila_seleccionada  USING pr_salv TYPE REF TO cl_salv_table
                                      p_table TYPE table
                                CHANGING ps_sel.

  DATA: lr_selections TYPE REF TO cl_salv_selections,
        lt_rows       TYPE        salv_t_row,
        l_row         TYPE        i.

  pr_salv->get_metadata( ).
  lr_selections = pr_salv->get_selections( ).
  lt_rows = lr_selections->get_selected_rows( ).
  IF lt_rows IS NOT INITIAL.
    READ TABLE lt_rows INTO l_row INDEX 1.
    IF sy-subrc = 0.
      READ TABLE p_table INTO ps_sel INDEX l_row.
    ENDIF.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_1202
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_1202 .
  DATA: lv_okcode TYPE sy-ucomm.
  MOVE-CORRESPONDING zspm0002_alv TO gs_pm0002.
  MOVE gv_okcode_1201 TO lv_okcode.
  CLEAR gv_okcode_1201.

  CASE lv_okcode.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
*     Si se cancela, adicionar el troquel a arbol de pendientes (worklist)
      CLEAR: gs_pm0002-copiatro.
      CLEAR: zspm0002_alv.
      LEAVE TO SCREEN 0.
    WHEN 'B_ACEPTAR'.
      PERFORM asignar_troquel USING gs_pm0002.
*     Limpiar todo.
*      CLEAR: gs_pm0002, zspm0002_alv.
*      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM.                    " USER_COMMAND_1202

*&---------------------------------------------------------------------*
*&      Form  EXIT_1202
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit_1202 .
  DATA: lv_okcode TYPE sy-ucomm.

  MOVE gv_okcode_1201 TO lv_okcode.
  CLEAR gv_okcode_1201.

  CASE lv_okcode.
    WHEN 'BACK' OR 'CANC' OR 'EXIT'.
      CLEAR: gs_pm0002-copiatro.
      CLEAR: zspm0002_alv.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM.                    " EXIT_1202
*&---------------------------------------------------------------------*
*&      Form  DESCONECTAR_TROQUEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM desconectar_troquel .
  DATA: ls_tro_sel    TYPE zspm0002_alv,
        lv_message    TYPE string,
        lv_tree_ident TYPE zident_tree,
        lv_answer(1)  TYPE c,
        lv_copiatro   TYPE zcopiatro.

* Obtener troquel seleccionado
  PERFORM obtener_fila_seleccionada USING     gr_table_tro
                                              gt_pm0002_vis
                                    CHANGING  ls_tro_sel.
  IF ls_tro_sel IS INITIAL.
    MESSAGE e163(zpp).
  ENDIF.

  IF ls_tro_sel-copiatro IS INITIAL.
    MESSAGE e170(zpp) WITH ls_tro_sel-equnr.
  ENDIF.

* Confirmar y desconectar.
  MESSAGE s165(zpp) INTO lv_message WITH ls_tro_sel-equnr ls_tro_sel-copiatro.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      text_question  = lv_message
    IMPORTING
      answer         = lv_answer
    EXCEPTIONS
      text_not_found = 1
      OTHERS         = 2.

  IF lv_answer = '1'.
    DELETE FROM ztpm0002 WHERE equnr = ls_tro_sel-equnr AND copiatro = ls_tro_sel-copiatro.
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
      IF ls_tro_sel-equnrs = 'P'. "Si era el principal proponer para que seleccione otro como principal
*       (solo si hay más troqueles asignados)

        SELECT SINGLE copiatro
          FROM ztpm0002
          INTO lv_copiatro
          WHERE copiatro = ls_tro_sel-copiatro.

        IF sy-subrc = 0.
          gs_pm0002 = ls_tro_sel.
          CALL SCREEN 1203 STARTING AT 48 10.
          CLEAR: gs_pm0002.
        ELSE.
          MESSAGE s171(zpp) WITH ls_tro_sel-equnr. "El troquel & ha sido desasignado correctamente
        ENDIF.
      ELSE.
        MESSAGE s171(zpp) WITH ls_tro_sel-equnr. "El troquel & ha sido desasignado correctamente
      ENDIF.

*     Actualizar tablas y árboles.
      CLEAR: ls_tro_sel-equnrs, ls_tro_sel-copiatro.
      PERFORM actualizar_tpm0002 USING ls_tro_sel.
      gr_table_tro->refresh( ).
      WRITE ls_tro_sel-equnr TO lv_tree_ident.
      PERFORM delete_tree_node USING gc_tipotro
                                     lv_tree_ident
                                     gr_tree.
      gr_tree->display( ).
      PERFORM add_tro_line USING  gr_worklist
                                  ls_tro_sel
                                  ''.
      gr_worklist->display( ).
    ELSE.
      ROLLBACK WORK.
      MESSAGE e166(zpp) WITH ls_tro_sel-equnr ls_tro_sel-copiatro. "Error al desasignar el troquel & de la copia de troqueles &
    ENDIF.
  ENDIF.

ENDFORM.                    " DESCONECTAR_TROQUEL
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_1203
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_1203 .
  DATA: lv_okcode TYPE sy-ucomm.
  MOVE gv_okcode_1203 TO lv_okcode.
  CLEAR gv_okcode_1203.

  CASE lv_okcode.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
*     Si se cancela, nada
      MESSAGE s171(zpp) WITH gs_pm0002-equnr.
      CLEAR: gs_pm0002.
      LEAVE TO SCREEN 0.
    WHEN 'B_ACEPTAR'.
      PERFORM cambiar_troquel_principal.
*     Limpiar todo.
      CLEAR: gs_pm0002.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM.                    " USER_COMMAND_1203
*&---------------------------------------------------------------------*
*&      Form  HELP_TRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM help_tro .

  DATA: lt_ctro TYPE zttpm0002_alv.
  LOOP AT gt_pm0002 INTO DATA(ls_pm0002) WHERE copiatro = gs_pm0002-copiatro AND equnr <> gs_pm0002-equnr.
    APPEND ls_pm0002 TO lt_ctro.
  ENDLOOP.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'EQUNR'
      dynpprog        = sy-repid
      dynpnr          = sy-dynnr
      dynprofield     = 'GV_NUEVO_TRO_PRINC'
      value_org       = 'S'
    TABLES
      value_tab       = lt_ctro
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFORM.                    " HELP_TRO
*&---------------------------------------------------------------------*
*&      Form  CAMBIAR_TROQUEL_PRINCIPAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM cambiar_troquel_principal.
  DATA: ls_pm0002 TYPE zspm0002_alv.
*  Comprobar que el troquel introducido es válido.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = gv_nuevo_tro_princ
    IMPORTING
      output = gv_nuevo_tro_princ.

  READ TABLE gt_pm0002 WITH KEY equnr = gv_nuevo_tro_princ copiatro = gs_pm0002-copiatro INTO ls_pm0002.
  IF sy-subrc = 0.
    UPDATE ztpm0002 SET equnrs = 'P' WHERE equnr = gv_nuevo_tro_princ AND copiatro = gs_pm0002-copiatro.
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
      MESSAGE s169(zpp) WITH ls_pm0002-equnr gs_pm0002-copiatro.
    ELSE.
      ROLLBACK WORK.
      MESSAGE e168(zpp) WITH ls_pm0002-equnr.
    ENDIF.
    ls_pm0002-equnrs = 'P'.
    PERFORM actualizar_tpm0002 USING ls_pm0002.
  ELSE.
    MESSAGE e167(zpp).
  ENDIF.
ENDFORM.                    " CAMBIAR_TROQUEL_PRINCIPAL

*&---------------------------------------------------------------------*
*&      Form  EXIT_1203
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit_1203 .
* Si se cancela, nada
  MESSAGE s171(zpp) WITH gs_pm0002-equnr.
  CLEAR: gs_pm0002.
  LEAVE TO SCREEN 0.
ENDFORM.                    " EXIT_1203
*&---------------------------------------------------------------------*
*&      Form  FILTER_BY_NODE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_NODE_KEY  text
*----------------------------------------------------------------------*
FORM filter_by_node  USING  p_node_key.

  DATA: lr_nodes      TYPE REF TO cl_salv_nodes,
        lr_node       TYPE REF TO cl_salv_node,
        ls_data       TYPE REF TO data,
        lr_selections TYPE REF TO cl_salv_selections,
        lt_rows       TYPE salv_t_row.

  FIELD-SYMBOLS: <ls_data_row> TYPE zspm0001_tree.

  lr_nodes = gr_tree->get_nodes( ).
  lr_node = lr_nodes->get_node( p_node_key ).
  ls_data = lr_node->get_data_row( ).
  ASSIGN ls_data->* TO <ls_data_row>.

  CASE <ls_data_row>-tipo.
    WHEN gc_tiporaiz.
      PERFORM filtrar_raiz.
    WHEN gc_tipoctro.
      PERFORM filtrar_copiatro USING <ls_data_row>-clave.
    WHEN gc_tipotro.
      PERFORM filtrar_tro USING <ls_data_row>-clave.
    WHEN gc_tipojcli.
      PERFORM filtrar_jcli USING <ls_data_row>-clave.
    WHEN gc_tipocli.
      PERFORM filtrar_cli USING <ls_data_row>-clave.
    WHEN OTHERS.
  ENDCASE.

  lr_selections = gr_table_ctro->get_selections( ).
  lr_selections->set_selected_rows( lt_rows ).
  gr_table_ctro->refresh( ).

  lr_selections = gr_table_tro->get_selections( ).
  lr_selections->set_selected_rows( lt_rows ).
  gr_table_tro->refresh( ).

  lr_selections = gr_table_jcli->get_selections( ).
  lr_selections->set_selected_rows( lt_rows ).
  gr_table_jcli->refresh( ).

  lr_selections = gr_table_cli->get_selections( ).
  lr_selections->set_selected_rows( lt_rows ).
  gr_table_cli->refresh( ).

ENDFORM.                    " FILTER_BY_NODE
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_1301
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_1301 .
  DATA: lv_okcode TYPE sy-ucomm.
  MOVE-CORRESPONDING zspm0003_alv TO gs_pm0003.
  MOVE gv_okcode_1301 TO lv_okcode.
  CLEAR gv_okcode_1301.

  CASE lv_okcode.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      CLEAR: gs_pm0003, zspm0003_alv.
      LEAVE TO SCREEN 0.
    WHEN 'B_SAV_JC'.
      IF gs_pm0003-juegocli IS INITIAL. "Creando
        PERFORM crear_juego_cliches.
      ELSE. "Modificando
        PERFORM guardar_juego_cliches.
      ENDIF.

*     Actualizar las tablas de Copias de torqueles, tree y worklist.
      CLEAR: gs_pm0003, zspm0003_alv.", gv_editar_0201.
  ENDCASE.

ENDFORM.                    " USER_COMMAND_1301

*&---------------------------------------------------------------------*
*&      Form  CREAR_JUEGO_CLICHES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_juego_cliches.
  DATA: lv_juegocli TYPE zjuegocli,
        ls_pm0003   TYPE ztpm0003, "Tabla de juegos de cliches
        ls_pm0010   TYPE ztpm0010, "Tabla de textos
        lv_jcli_key TYPE lvc_nkey,
        lv_error    TYPE xfeld.

*  CLEAR: gs_pm0003-copiatro.
  IF gs_pm0001 IS NOT INITIAL.
    PERFORM validar_asign_jcli_to_ctro USING gs_pm0001
                                             gs_pm0003.
  ENDIF.

  PERFORM obtener_consecutivo_jcli CHANGING lv_juegocli.
  gs_pm0003-juegocli = lv_juegocli.

* Bloquear tabla
  CALL FUNCTION 'ENQUEUE_EZLOCKPM0003'
    EXPORTING
      juegocli       = lv_juegocli
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  MOVE-CORRESPONDING gs_pm0003 TO ls_pm0003.
  MOVE-CORRESPONDING gs_pm0003 TO ls_pm0010.
  ls_pm0010-spras = sy-langu.

  INSERT ztpm0003 FROM ls_pm0003.

  IF sy-subrc <> 0.
    MESSAGE e147(zpp).
    ROLLBACK WORK.
  ELSE.
    INSERT ztpm0010 FROM ls_pm0010.
    COMMIT WORK AND WAIT.

*   Asignar a juego de troquel si fila marcada.
    IF gs_pm0001 IS NOT INITIAL.
      PERFORM asignar_jcli_to_ctro USING    gs_pm0001
                                            abap_false
                                   CHANGING gs_pm0003
                                            lv_error.
    ENDIF.

*   Añadir el registro creado a la tabla del ALV
    APPEND gs_pm0003 TO gt_pm0003.
    APPEND gs_pm0003 TO gt_pm0003_vis.
    gr_table_jcli->refresh( ).

    IF gs_pm0003-copiatro IS INITIAL. "Añadir el registro creado al worklist
      PERFORM add_jcli_line USING     gr_worklist
                                      gs_pm0003
                                      ''
                            CHANGING  lv_jcli_key.
      gr_worklist->display( ).
    ENDIF.


    IF gs_pm0001 IS NOT INITIAL.
      IF gs_pm0003-copiatro IS NOT INITIAL.
        MESSAGE s172(zpp) WITH lv_juegocli gs_pm0003-copiatro. "Se ha creado el juego de clichés & y se ha asignado a la cop. de troq. &
      ELSE.
        MESSAGE s173(zpp) WITH lv_juegocli gs_pm0001-copiatro. "El juego de clichés & creado no ha podido ser asignado a la cop. troq. &
      ENDIF.
    ELSE.
      MESSAGE s174(zpp) WITH lv_juegocli. "Se ha creado el juego de clichés &
    ENDIF.

    LEAVE TO SCREEN 0.
  ENDIF.
*     Desbloquear registro
  CALL FUNCTION 'DEQUEUE_EZLOCKPM0003'
    EXPORTING
      juegocli = lv_juegocli.
ENDFORM.                    " CREAR_JUEGO_CLICHES

*&---------------------------------------------------------------------*
*&      Form  GUARDAR_JUEGO_CLICHES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM guardar_juego_cliches .
  DATA: ls_pm0003     TYPE        ztpm0003, "Tabla de juegos de cliches
        ls_pm0010     TYPE        ztpm0010, "Tabla de textos
        lv_tree       TYPE REF TO cl_salv_tree,
        lv_tree_ident TYPE        zident_tree.

  MOVE-CORRESPONDING gs_pm0003 TO ls_pm0003.
  MOVE-CORRESPONDING gs_pm0003 TO ls_pm0010.
  ls_pm0010-spras = sy-langu.

  UPDATE ztpm0003 FROM ls_pm0003.

  IF sy-subrc <> 0.
    MESSAGE e149(zpp).
    ROLLBACK WORK.
  ELSE.
    UPDATE ztpm0010 FROM ls_pm0010.
    COMMIT WORK AND WAIT.
*   Modificar el registro en las tablas del ALV
    PERFORM actualizar_tpm0003 USING gs_pm0003.

*   Actualizar el registro modificado en el árbol (Descriptivo)
    WRITE gs_pm0003-juegocli TO lv_tree_ident.
    IF gs_pm0003-copiatro IS NOT INITIAL.
      lv_tree = gr_tree.
    ELSE.
      lv_tree = gr_worklist.
    ENDIF.
    PERFORM actualizar_nodo USING gc_tipojcli
                                  lv_tree_ident
                                  gs_pm0003-juektx
                                  lv_tree.

*   Refrescar el ALV y el Tree.
    lv_tree->display( ).
    lv_tree->get_nodes( )->expand_all( ).
    gr_table_jcli->refresh( ).
    MESSAGE s176(zpp) WITH gs_pm0003-juegocli.
    LEAVE TO SCREEN 0.
  ENDIF.

ENDFORM.                    " GUARDAR_JUEGO_CLICHES


*&---------------------------------------------------------------------*
*&      Form  B_ADD_JC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM b_add_jc .
* Obtener copia de troquel seleccionada.
  PERFORM obtener_fila_seleccionada USING     gr_table_ctro
                                              gt_pm0001_vis
                                    CHANGING  gs_pm0001.
  IF gs_pm0001 IS NOT INITIAL.
    gs_pm0003-copiatro = gs_pm0001-copiatro.
    gs_pm0003-planchonet = gs_pm0001-planchonet.
    gs_pm0003-pllargonet = gs_pm0001-pllargonet.
    gs_pm0003-swerk = gs_pm0001-swerk.
  ENDIF.
  CALL SCREEN 1301 STARTING AT 48 10.
  CLEAR: gs_pm0003, zspm0003_alv, gs_pm0001.
ENDFORM.                    " B_ADD_JC

*&---------------------------------------------------------------------*
*&      Form  B_EDI_JC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM b_edi_jc .
  CLEAR: gs_pm0003.
* Obtener juego de clientes seleccionada.
  PERFORM obtener_fila_seleccionada USING gr_table_jcli
                                          gt_pm0003_vis
                                    CHANGING gs_pm0003.

  IF gs_pm0003 IS INITIAL.
    MESSAGE e163(zpp).
  ENDIF.

  CALL FUNCTION 'ENQUEUE_EZLOCKPM0003'
    EXPORTING
      juegocli       = gs_pm0003-juegocli
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  CALL SCREEN 1301 STARTING AT 48 10.

  CALL FUNCTION 'DEQUEUE_EZLOCKPM0003'
    EXPORTING
      juegocli = gs_pm0003-juegocli.

  CLEAR: gs_pm0003, zspm0003_alv, gs_pm0001.
ENDFORM.                    " B_EDI_JC

*&---------------------------------------------------------------------*
*&      Form  ASIGNAR_JCLI_TO_CTRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_PM0001  text
*      -->P_GS_PM0003  text
*      <--P_LV_ASIGNADO  text
*      <--P_LV_ERROR  text
*----------------------------------------------------------------------*
FORM asignar_jcli_to_ctro  USING    ps_pm0001 TYPE zspm0001_alv
                                    p_update TYPE xfeld
                           CHANGING ps_pm0003 TYPE zspm0003_alv
                                    p_error TYPE xfeld.

  DATA: lv_ctro_key       TYPE zident_tree,
        lv_jcli_key_s     TYPE zident_tree,
        lv_jcli_key       TYPE lvc_nkey,
        lv_father_key     TYPE lvc_nkey,
        ls_asign          TYPE ztpm0005,
        lv_error          TYPE xfeld,
        lv_error_cantidad TYPE xfeld,
        lv_matasig        TYPE xfeld.


  IF ps_pm0001 IS NOT INITIAL.
    IF ps_pm0001-pllargonet = ps_pm0003-pllargonet AND ps_pm0001-planchonet = ps_pm0003-planchonet.

      ls_asign-juegocli = ps_pm0003-juegocli.
      ls_asign-copiatro = ps_pm0001-copiatro.

*     Comprobar si tiene materiales asignados
      PERFORM materiales_asignados USING ''
                                         ls_asign-juegocli
                                   CHANGING lv_matasig.

      IF lv_matasig = abap_true.
        PERFORM validar_asignacion_materiales USING ls_asign-juegocli
                                                    ls_asign-copiatro
                                              CHANGING lv_error
                                                       lv_error_cantidad.

        IF lv_error IS NOT INITIAL.

        ELSEIF lv_error_cantidad IS NOT INITIAL.

        ENDIF.

        CALL FUNCTION 'ENQUEUE_EZLOCKPM0008'
          EXPORTING
            x_juegocli     = ls_asign-juegocli
          EXCEPTIONS
            foreign_lock   = 1
            system_failure = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
      ENDIF.

      INSERT ztpm0005 FROM ls_asign.
      IF sy-subrc = 0.

        IF lv_matasig = abap_true.
          UPDATE ztpm0008 SET copiatro = ls_asign-copiatro WHERE juegocli = ls_asign-juegocli.
          IF sy-subrc <> 0.
            ROLLBACK WORK.
            MESSAGE e219(zpp). "Error al asignar los materiales a la copia de troquel
          ENDIF.
        ENDIF.

        COMMIT WORK AND WAIT.

        ps_pm0003-copiatro = ls_asign-copiatro.

*       Actualizar tablas ALV:
        PERFORM actualizar_tpm0003 USING ps_pm0003.
*       Actualizar árbol
        WRITE ps_pm0003-copiatro TO lv_ctro_key.
        PERFORM find_tree_key USING      gc_tipoctro
                                         lv_ctro_key
                                         gr_tree
                               CHANGING  lv_father_key.

        IF lv_father_key IS NOT INITIAL.
          PERFORM add_jcli_line USING     gr_tree
                                          ps_pm0003
                                          lv_father_key
                                CHANGING  lv_jcli_key.
          gr_tree->display( ).
          gr_tree->get_nodes( )->expand_all( ).
        ENDIF.

        IF p_update = abap_true. "Actualizando (Eliminar del Worklist)
          WRITE ps_pm0003-juegocli TO lv_jcli_key_s.
          PERFORM delete_tree_node USING  gc_tipojcli
                                          lv_jcli_key_s
                                          gr_worklist.
        ENDIF.
      ELSE.
        ROLLBACK WORK.
        p_error = abap_true.
      ENDIF.
    ELSE.
      CLEAR ps_pm0003-copiatro.
    ENDIF.
  ENDIF.

ENDFORM.                    " ASIGNAR_JCLI_TO_CTRO
*&---------------------------------------------------------------------*
*&      Form  VALIDAR_ASIGN_JCLI_TO_CTRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_PM0001  text
*      -->P_GS_PM0003  text
*----------------------------------------------------------------------*
FORM validar_asign_jcli_to_ctro  USING    ps_pm0001 TYPE zspm0001_alv
                                          ps_pm0003 TYPE zspm0003_alv.

  IF ps_pm0001-pllargonet <> ps_pm0003-pllargonet OR ps_pm0001-planchonet <> ps_pm0003-planchonet OR ps_pm0001-swerk <> ps_pm0003-swerk.
    MESSAGE e175(zpp).
  ENDIF.

ENDFORM.                    " VALIDAR_ASIGN_JCLI_TO_CTRO

*&---------------------------------------------------------------------*
*&      Form  VALIDAR_ASIGN_CLI_TO_JCLI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_PM0001  text
*      -->P_GS_PM0003  text
*----------------------------------------------------------------------*
FORM validar_asign_cli_to_jcli  USING    ps_pm0003 TYPE zspm0003_alv
                                         ps_pm0004 TYPE zspm0004_alv
                                CHANGING lv_error TYPE xfeld.
  CLEAR: lv_error.
  IF ps_pm0003-swerk <> ps_pm0004-swerk.
    lv_error = abap_true.
    MESSAGE e195(zpp).
  ENDIF.

ENDFORM.                    " VALIDAR_ASIGN_CLI_TO_JCLI

*&---------------------------------------------------------------------*
*&      Form  eliminar_juego_cliches
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM eliminar_juego_cliches .

  DATA: lv_juegocli   TYPE ztpm0003-juegocli,
        lv_message    TYPE string,
        lv_answer(1)  TYPE c,
        lv_tree_ident TYPE zident_tree,
        ls_pm0003     TYPE zspm0003_alv,
        lv_matasig    TYPE xfeld,
        lv_nomod      TYPE xfeld.

  CLEAR: gs_pm0003.
* Obtener juego de clientes seleccionada.
  PERFORM obtener_fila_seleccionada USING gr_table_jcli
                                          gt_pm0003_vis
                                    CHANGING ls_pm0003.
  IF ls_pm0003 IS INITIAL.
    MESSAGE e163(zpp).
  ENDIF.

  IF ls_pm0003-copiatro IS NOT INITIAL.
    MESSAGE e178(zpp) WITH ls_pm0003-juegocli ls_pm0003-copiatro.
  ENDIF.

  PERFORM juegocli_modificable USING ls_pm0003-juegocli
                            CHANGING lv_nomod.

  IF lv_nomod = abap_true.
    MESSAGE e177(zpp) WITH ls_pm0003-juegocli.
  ENDIF.

  MESSAGE s179(zpp) INTO lv_message WITH ls_pm0003-juegocli.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      text_question  = lv_message
    IMPORTING
      answer         = lv_answer
    EXCEPTIONS
      text_not_found = 1
      OTHERS         = 2.

  IF lv_answer = '1'.

    IF sy-subrc = 0.
      lv_juegocli = ls_pm0003-juegocli.
*     Bloquear registro
      CALL FUNCTION 'ENQUEUE_EZLOCKPM0003'
        EXPORTING
          juegocli       = lv_juegocli
        EXCEPTIONS
          foreign_lock   = 1
          system_failure = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
*   Comprobar si tiene materiales asignados
      PERFORM materiales_asignados USING ls_pm0003-copiatro
                                         lv_juegocli
                                   CHANGING lv_matasig.
      IF lv_matasig = abap_true.
        CALL FUNCTION 'ENQUEUE_EZLOCKPM0008'
          EXPORTING
            x_juegocli     = lv_juegocli
          EXCEPTIONS
            foreign_lock   = 1
            system_failure = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
      ENDIF.

*     Eliminar de la base de datos
      DELETE FROM ztpm0003 WHERE juegocli = lv_juegocli.

      IF sy-subrc <> 0.
        MESSAGE e180(zpp) WITH lv_juegocli.
        ROLLBACK WORK.
      ELSE.
        IF lv_matasig = abap_true.
          DELETE FROM ztpm0008 WHERE juegocli = lv_juegocli.
          IF sy-subrc <> 0.
            MESSAGE e217(zpp) WITH lv_juegocli.
            ROLLBACK WORK.
          ENDIF.
        ENDIF.

        MESSAGE s181(zpp) WITH lv_juegocli.
        COMMIT WORK AND WAIT.

*       Actualizar tablas y tree
        DELETE gt_pm0003 WHERE juegocli = lv_juegocli.
        DELETE gt_pm0003_vis WHERE juegocli = lv_juegocli.

        WRITE lv_juegocli TO lv_tree_ident.

        PERFORM delete_tree_node USING gc_tipojcli
                                       lv_tree_ident
                                       gr_worklist.

*       Refrescar ALV y Tree (Solo se eliminan juegos no asignados)
        gr_table_jcli->refresh( ).
        gr_worklist->display( ).
      ENDIF.
*     Desbloquear registro
      CALL FUNCTION 'DEQUEUE_EZLOCKPM0003'
        EXPORTING
          juegocli = lv_juegocli.

      IF lv_matasig = abap_true.
        CALL FUNCTION 'DEQUEUE_EZLOCKPM0008'
          EXPORTING
            juegocli = lv_juegocli.
      ENDIF.
    ELSE.
      MESSAGE e146(zpp). "No se ha podido determinar el registro
    ENDIF.

  ENDIF.
*  ENDIF.


*
ENDFORM.                    " eliminar_juego_cliches
*&---------------------------------------------------------------------*
*&      Form  CONECTAR_JUEGOCLI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM conectar_juegocli .
  DATA: ls_pm0001 TYPE zspm0001_alv,
        ls_pm0003 TYPE zspm0003_alv,
        lv_error  TYPE xfeld.

  CLEAR: gs_pm0001.
  PERFORM obtener_fila_seleccionada USING gr_table_ctro
                                        gt_pm0001_vis
                                  CHANGING ls_pm0001.

  PERFORM obtener_fila_seleccionada USING gr_table_jcli
                                        gt_pm0003_vis
                                  CHANGING ls_pm0003.

  IF ls_pm0003 IS INITIAL.
    MESSAGE e183(zpp).
  ENDIF.

  IF ls_pm0003-copiatro IS NOT INITIAL.
    MESSAGE e186(zpp) WITH ls_pm0003-juegocli ls_pm0003-copiatro.
  ENDIF.

  IF ls_pm0001 IS NOT INITIAL. "Hay una fila seleccionada
    PERFORM validar_asign_jcli_to_ctro USING ls_pm0001
                                         ls_pm0003.

    PERFORM asignar_jcli_to_ctro USING  ls_pm0001
                                        abap_false
                             CHANGING   ls_pm0003
                                        lv_error.

    IF lv_error IS NOT INITIAL.
      MESSAGE e184(zpp).
    ELSE.
      MESSAGE s185(zpp) WITH ls_pm0003-juegocli ls_pm0003-copiatro.
    ENDIF.
  ELSE.
    gs_pm0003 = ls_pm0003.
    CALL SCREEN 1302 STARTING AT 48 10.
    CLEAR gs_pm0003.
  ENDIF.

ENDFORM.                    " CONECTAR_JUEGOCLI

*&---------------------------------------------------------------------*
*&      Form  EXIT_1302
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit_1302 .
  DATA: lv_okcode TYPE sy-ucomm.

  MOVE gv_okcode_1302 TO lv_okcode.
  CLEAR gv_okcode_1302.

  CASE lv_okcode.
    WHEN 'BACK' OR 'CANC' OR 'EXIT'.
      CLEAR: gs_pm0003, zspm0003_alv.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM.                    " EXIT_1202

*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_1302
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_1302 .
  DATA: lv_okcode TYPE sy-ucomm.
  MOVE-CORRESPONDING zspm0003_alv TO gs_pm0003.
  MOVE gv_okcode_1302 TO lv_okcode.
  CLEAR gv_okcode_1302.

  CASE lv_okcode.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      CLEAR: zspm0003_alv.", gs_pm0002.
      LEAVE TO SCREEN 0.
    WHEN 'B_ACEPTAR'.
      PERFORM asignar_jcli USING gs_pm0003.
      CLEAR: gs_pm0003, zspm0003_alv.", gv_editar_0201.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM.                    " USER_COMMAND_1202

*&---------------------------------------------------------------------*
*&      Form  ASIGNAR_JCLI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM asignar_jcli     USING p_pm0003 TYPE zspm0003_alv.
  DATA: lv_copiatro TYPE zcopiatro,
        lv_error    TYPE xfeld,
        ls_pm0001   TYPE zspm0001_alv.

  IF p_pm0003-copiatro IS NOT INITIAL.
*    Existe copia de troquel?
    SELECT SINGLE *
      INTO CORRESPONDING FIELDS OF ls_pm0001
      FROM ztpm0001
      WHERE copiatro = p_pm0003-copiatro.

    IF sy-subrc <> 0.
      MESSAGE e156(zpp) WITH p_pm0003-copiatro. "La copia de troqueles & no existe
    ENDIF.

*   Está el juego de clichés asignado a otra copia de troqueles?
    SELECT SINGLE copiatro
        INTO lv_copiatro
        FROM ztpm0005
        WHERE juegocli = p_pm0003-juegocli.

    IF sy-subrc = 0.
      MESSAGE e186(zpp) WITH p_pm0003-juegocli lv_copiatro. "El juego de clichés & ya está asignado a la copia de troqueles &
    ENDIF.

    PERFORM validar_asign_jcli_to_ctro USING ls_pm0001
                                         p_pm0003.

    PERFORM asignar_jcli_to_ctro USING  ls_pm0001
                                        abap_true
                             CHANGING   p_pm0003
                                        lv_error.

    IF lv_error IS NOT INITIAL.
      MESSAGE e184(zpp). "Ha ocurrido un error al asignar el juego de clichés a la copia de troq.
    ELSE.
      MESSAGE s185(zpp) WITH p_pm0003-juegocli p_pm0003-copiatro. "Juego de clichés & asignado correctamente a la copia de troqueles &
    ENDIF.

  ENDIF.
ENDFORM.                    " ASIGNAR_JCLI
*&---------------------------------------------------------------------*
*&      Form  VALIDAR_COPIATRO_1302
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM validar_copiatro_1302 .
  DATA: ls_pm0001 TYPE zspm0001_alv.

  IF zspm0003_alv-copiatro IS NOT INITIAL.
*    Existe copia de troquel?
    SELECT SINGLE *
      INTO CORRESPONDING FIELDS OF ls_pm0001
      FROM ztpm0001
      WHERE copiatro = zspm0003_alv-copiatro.

    IF sy-subrc <> 0.
      MESSAGE e156(zpp) WITH zspm0003_alv-copiatro. "La copia de troqueles & no existe
    ENDIF.

    PERFORM validar_asign_jcli_to_ctro USING ls_pm0001
                                            zspm0003_alv.
  ENDIF.
ENDFORM.                    " VALIDAR_COPIATRO_1302

*&---------------------------------------------------------------------*
*&      Form  VALIDAR_JUEGOCLI_1402
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM validar_juegocli_1402 .
  DATA: ls_pm0003 TYPE zspm0003_alv,
        lv_error  TYPE xfeld.

  IF zspm0004_alv-juegocli IS NOT INITIAL.
*    Existe juego de cliché?
    SELECT SINGLE *
      INTO CORRESPONDING FIELDS OF ls_pm0003
      FROM ztpm0003
      WHERE juegocli = zspm0004_alv-juegocli.

    IF sy-subrc <> 0.
      MESSAGE e191(zpp) WITH zspm0004_alv-juegocli. "El juego de clichés & no existe
    ENDIF.

    PERFORM validar_asign_cli_to_jcli USING ls_pm0003
                                            zspm0004_alv
                                      CHANGING lv_error.
  ENDIF.
ENDFORM.                    " VALIDAR_JUEGOCLI_1402

*&---------------------------------------------------------------------*
*&      Form  DESCONECTAR_TROQUEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM desconectar_jcli .
  DATA: ls_jcli_sel   TYPE zspm0003_alv,
        lv_message    TYPE string,
        lv_tree_ident TYPE zident_tree,
        lv_jcli_key   TYPE lvc_nkey,
        lv_matasig    TYPE xfeld,
        lv_answer(1)  TYPE c.

* Obtener juego de clichés seleccionado
  PERFORM obtener_fila_seleccionada USING     gr_table_jcli
                                              gt_pm0003_vis
                                    CHANGING  ls_jcli_sel.
  IF ls_jcli_sel IS INITIAL.
    MESSAGE e163(zpp). "Debe seleccionar un registro para modificarlo
  ENDIF.

  IF ls_jcli_sel-copiatro IS INITIAL.
    MESSAGE e187(zpp) WITH ls_jcli_sel-juegocli. "El juego de clichés & no está asignado a ninguna copia de troqueles
  ENDIF.

* Confirmar y desconectar.
  MESSAGE s188(zpp) INTO lv_message WITH ls_jcli_sel-juegocli ls_jcli_sel-copiatro. "¿Desea desasignar el juego de clichés & de la copia de troqueles &?
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      text_question  = lv_message
    IMPORTING
      answer         = lv_answer
    EXCEPTIONS
      text_not_found = 1
      OTHERS         = 2.

  IF lv_answer = '1'.
*   Comprobar si tiene materiales asignados
    PERFORM materiales_asignados USING ls_jcli_sel-copiatro
                                       ls_jcli_sel-juegocli
                                 CHANGING lv_matasig.
    IF lv_matasig = abap_true.
      CALL FUNCTION 'ENQUEUE_EZLOCKPM0008'
        EXPORTING
          x_juegocli     = ls_jcli_sel-juegocli
        EXCEPTIONS
          foreign_lock   = 1
          system_failure = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDIF.

    DELETE FROM ztpm0005 WHERE juegocli = ls_jcli_sel-juegocli AND copiatro = ls_jcli_sel-copiatro.
    IF sy-subrc = 0.
      IF lv_matasig = abap_true.
        UPDATE ztpm0008 SET copiatro = '' WHERE juegocli = ls_jcli_sel-juegocli.
        IF sy-subrc <> 0.
          ROLLBACK WORK.
          MESSAGE s218(zpp). "Error al desasignar los materiales de la copia de troquel
        ENDIF.
      ENDIF.

      COMMIT WORK AND WAIT.
      MESSAGE s189(zpp). "El juego de clichés ha sido desasignado correctamente

*     Actualizar tablas y árboles.
      CLEAR: ls_jcli_sel-copiatro.
      PERFORM actualizar_tpm0003 USING ls_jcli_sel.
      gr_table_jcli->refresh( ).
      WRITE ls_jcli_sel-juegocli TO lv_tree_ident.
      PERFORM delete_tree_node USING gc_tipojcli
                                     lv_tree_ident
                                     gr_tree.
      gr_tree->display( ).
      PERFORM add_jcli_line USING  gr_worklist
                                  ls_jcli_sel
                                  ''
                            CHANGING lv_jcli_key.
      gr_worklist->display( ).
    ELSE.
      ROLLBACK WORK.
      MESSAGE e190(zpp) WITH ls_jcli_sel-juegocli ls_jcli_sel-copiatro. "Error al desasignar el juego de clichés & de la copia de troqueles &
    ENDIF.
  ENDIF.

ENDFORM.                    " DESCONECTAR_TROQUEL

*&---------------------------------------------------------------------*
*&      Form  EXIT_1402
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit_1402 .
  DATA: lv_okcode TYPE sy-ucomm.

  MOVE gv_okcode_1402 TO lv_okcode.
  CLEAR gv_okcode_1402.

  CASE lv_okcode.
    WHEN 'BACK' OR 'CANC' OR 'EXIT'.
      CLEAR: gs_pm0004, zspm0004_alv.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM.                    " EXIT_1402

*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_1402
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_1402 .
  DATA: lv_okcode TYPE sy-ucomm.
  MOVE-CORRESPONDING zspm0004_alv TO gs_pm0004.
  MOVE gv_okcode_1402 TO lv_okcode.
  CLEAR gv_okcode_1402.

  CASE lv_okcode.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      CLEAR: zspm0004_alv.", gs_pm0002.
      LEAVE TO SCREEN 0.
    WHEN 'B_ACEPTAR'.
      PERFORM asignar_cli USING gs_pm0004.
      CLEAR: gs_pm0004, zspm0004_alv.", gv_editar_0201.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDFORM.                    " USER_COMMAND_1402

*&---------------------------------------------------------------------*
*&      Form  ASIGNAR_CLI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM asignar_cli     USING p_pm0004 TYPE zspm0004_alv.
  DATA: lv_juegocli  TYPE zjuegocli,
        lv_error     TYPE xfeld,
        lv_error_val TYPE xfeld,
        ls_pm0003    TYPE zspm0003_alv.

  IF p_pm0004-juegocli IS NOT INITIAL.
*   Existe juego de clichés?
*   En el caso que se desee permitir multiple asignación de juegos de clichés a troqueles esto habría que cambiarlo
    SELECT SINGLE *
      INTO CORRESPONDING FIELDS OF ls_pm0003
      FROM ztpm0003
      LEFT JOIN ztpm0005 ON ztpm0003~juegocli = ztpm0005~juegocli
      LEFT JOIN ztpm0010 ON ztpm0003~juegocli = ztpm0010~juegocli AND spras = sy-langu
      WHERE ztpm0003~juegocli = p_pm0004-juegocli.

    IF sy-subrc <> 0.
      MESSAGE e191(zpp) WITH p_pm0004-juegocli. "El juego de clichés & no existe
    ENDIF.

*   Está el cliché asignado a otro juego de clichés?
    SELECT SINGLE juegocli
        INTO lv_juegocli
        FROM ztpm0004
        WHERE equnr = p_pm0004-equnr.

    IF sy-subrc = 0.
      MESSAGE e192(zpp) WITH p_pm0004-equnr lv_juegocli. "El cliché & ya está asignado al juego de clichés &
    ENDIF.

    PERFORM validar_asign_cli_to_jcli USING ls_pm0003
                                         p_pm0004
                                      CHANGING lv_error_val.

    PERFORM asignar_cli_to_jcli USING  ls_pm0003
                                        abap_true
                             CHANGING   p_pm0004
                                        lv_error.

    IF lv_error IS NOT INITIAL.
      MESSAGE e193(zpp). "Ha ocurrido un error al asignar el cliché al juego de clichés
    ELSE.
      MESSAGE s194(zpp) WITH p_pm0004-equnr ls_pm0003-juegocli. "Juego de clichés & asignado correctamente a la copia de troqueles &
    ENDIF.

  ENDIF.
ENDFORM.                    " ASIGNAR_JCLI

*&---------------------------------------------------------------------*
*&      Form  ASIGNAR_CLI_TO_JCLI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_PM0001  text
*      -->P_GS_PM0003  text
*      <--P_LV_ASIGNADO  text
*      <--P_LV_ERROR  text
*----------------------------------------------------------------------*
FORM asignar_cli_to_jcli  USING     ps_pm0003 TYPE zspm0003_alv
                                    p_update TYPE xfeld
                           CHANGING ps_pm0004 TYPE zspm0004_alv
*                                    p_asignado TYPE xfeld
                                    p_error TYPE xfeld.

  DATA: lv_jcli_key   TYPE zident_tree,
        lv_cli_key    TYPE zident_tree,
        lv_father_key TYPE lvc_nkey,
        lv_error      TYPE xfeld,
        ls_pm0004     TYPE ztpm0004.


  IF ps_pm0003 IS NOT INITIAL.

    PERFORM validar_asign_cli_to_jcli  USING    ps_pm0003
                                                ps_pm0004
                                       CHANGING lv_error.
    IF lv_error IS INITIAL.
      MOVE-CORRESPONDING ps_pm0004 TO ls_pm0004.
      INSERT ztpm0004 FROM ls_pm0004.
      IF sy-subrc <> 0.
        MESSAGE e196(zpp) WITH ls_pm0004-equnr ls_pm0004-juegocli.
        ROLLBACK WORK.
      ELSE.
        COMMIT WORK AND WAIT.
        PERFORM actualizar_tpm0004 USING ps_pm0004.
*
        gr_table_cli->refresh( ).
*       Añadir elemento a árbol de asignaciones o worklist según sea el caso
        WRITE ls_pm0004-juegocli TO lv_jcli_key.
        WRITE ls_pm0004-equnr TO lv_cli_key.
        IF ps_pm0003-copiatro IS NOT INITIAL. "El juego de clichés está asignado
          PERFORM find_tree_key USING   gc_tipojcli
                                        lv_jcli_key
                                        gr_tree
                              CHANGING  lv_father_key.

        ELSE. "Juego de clichés no asignado
          PERFORM find_tree_key USING gc_tipojcli
                                      lv_jcli_key
                                      gr_tree
                            CHANGING  lv_father_key.

          IF lv_father_key IS INITIAL. "No tenía hijos asignados
            PERFORM find_tree_key USING gc_tipojcli
                                      lv_jcli_key
                                      gr_worklist
                            CHANGING  lv_father_key.
            IF lv_father_key IS NOT INITIAL.
              CLEAR: lv_father_key.
              PERFORM delete_tree_node USING  gc_tipojcli
                                          lv_jcli_key
                                          gr_worklist.

              PERFORM add_jcli_line USING gr_tree
                                     ps_pm0003
                                     gv_root_key
                                    CHANGING lv_father_key.
            ENDIF.
          ENDIF.
        ENDIF.

        IF lv_father_key IS NOT INITIAL.
          PERFORM delete_tree_node USING  gc_tipocli
                                        lv_cli_key
                                        gr_worklist.

          PERFORM add_cli_line USING gr_tree
                                     ps_pm0004
                                     lv_father_key.
        ENDIF.

        gr_tree->display( ).
        gr_tree->get_nodes( )->expand_all( ).
        gr_worklist->display( ).
        gr_worklist->get_nodes( )->expand_all( ).
        MESSAGE s197(zpp) WITH ls_pm0004-equnr lv_jcli_key.

      ENDIF.

    ELSE.
      CLEAR ps_pm0004-juegocli.
    ENDIF.
  ENDIF.

ENDFORM.                    " ASIGNAR_CLI_TO_JCLI

*&---------------------------------------------------------------------*
*&      Form  CREAR_CLICHE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_cliche .

  DATA: lv_cod_cli    TYPE                   equnr,
        lv_message    TYPE                   string,
        lv_answer(1)  TYPE                   c,
        lv_tree_ident TYPE                   zident_tree,
        ls_pm0003     TYPE                   zspm0003_alv,
        ls_pm0004     TYPE                   zspm0004_alv,
        l_row         TYPE                   i,
        lt_trans_mess TYPE STANDARD TABLE OF bdcmsgcoll,
        ls_trans_mess TYPE                   bdcmsgcoll,
        lv_nomod      TYPE                   xfeld.

  DATA: lt_bdcdata_tab TYPE bdcdata_tab,
        opt            TYPE ctu_params.

  PERFORM obtener_fila_seleccionada USING     gr_table_jcli
                                              gt_pm0003_vis
                                    CHANGING  ls_pm0003.

* > Para el caso de usar codificación inteligente (afecta rendimiento)
*  PERFORM obtener_consecutivo_equi USING gc_tipotro
*                                      CHANGING lv_cod_tro.
* < Para el caso de usar codificación inteligente (afecta rendimiento)

* Rellenar parámetros de tabla bdcdata_tab
  PERFORM datos_trans_ie01 USING ''
                                 gc_tipocli
                                 ls_pm0003-swerk
                      CHANGING   lt_bdcdata_tab.


  TRY.
      opt-dismode = 'E'.
      opt-updmode = 'L'.

      CALL TRANSACTION 'IE01' WITH AUTHORITY-CHECK
                            USING lt_bdcdata_tab OPTIONS FROM opt
                            MESSAGES INTO lt_trans_mess.

      READ TABLE lt_trans_mess INTO ls_trans_mess WITH KEY msgtyp = 'E'.
      IF sy-subrc = 0.
        MESSAGE ID ls_trans_mess-msgid TYPE ls_trans_mess-msgtyp NUMBER ls_trans_mess-msgnr
        WITH ls_trans_mess-msgv1 ls_trans_mess-msgv2 ls_trans_mess-msgv3 ls_trans_mess-msgv4.
      ELSE.
        READ TABLE lt_trans_mess INTO ls_trans_mess WITH KEY msgtyp = 'S'.
        IF sy-subrc = 0.
          lv_cod_cli = ls_trans_mess-msgv1.
*         Añadir los datos del nuevo cliché a la tabla del ALV
          PERFORM update_cliche USING     lv_cod_cli
                                          abap_true
                                CHANGING  ls_pm0004.
          gr_table_cli->refresh( ). "Actualizar los datos del ALV

          IF ls_pm0004 IS NOT INITIAL.
            IF ls_pm0003 IS NOT INITIAL.
*           Mostrar pantalla de asignación de cliché
              gs_pm0004 = ls_pm0004.
              gs_pm0004-juegocli = ls_pm0003-juegocli.
              CALL SCREEN '1402' STARTING AT 48 10.
              IF gs_pm0004 IS NOT INITIAL AND gs_pm0004-juegocli IS INITIAL. "Se canceló la asignación
                PERFORM add_cli_line USING gr_worklist
                            gs_pm0004
                            ''.
                gr_worklist->display( ).
                CLEAR: gs_pm0004.
              ENDIF.
            ELSE.
*           Añadir el cliché al listado de pendientes de asignar
              PERFORM add_cli_line USING  gr_worklist
                                          ls_pm0004
                                          ''.
              gr_worklist->display( ). "Actualizar listado de pendientes
            ENDIF.
          ENDIF.

        ENDIF.
      ENDIF.
    CATCH cx_sy_authorization_error.
      MESSAGE e155(zpp).
  ENDTRY.
ENDFORM.                    " CREAR_CLICHE

FORM update_cliche USING    p_equnr TYPE equnr
                            p_new TYPE xfeld
                   CHANGING ps_pm0004 TYPE zspm0004_alv.

  DATA: ls_pm0004      TYPE                   zspm0004_alv,
        lt_status      TYPE STANDARD TABLE OF bapi_itob_status,
        lt_user_status TYPE STANDARD TABLE OF bapi_itob_status,
        lv_stat_text   TYPE                   zstatus_txt.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_equnr
    IMPORTING
      output = p_equnr.

  SELECT SINGLE a~equnr, d~eqktx, b~juegocli, e~swerk, a~zztipo, f~trotx, e~tplnr, a~zzmaq, g~maqtx, a~zzrefantig, a~zzcolor, h~zzcolordes ", f~stat, g~txt30
  INTO CORRESPONDING FIELDS OF @ls_pm0004
  FROM equi AS a
  LEFT JOIN ztpm0004 AS b ON a~equnr = b~equnr
  LEFT JOIN equz AS c ON a~equnr  = c~equnr
  LEFT JOIN iloa AS e ON e~iloan = c~iloan
  LEFT JOIN eqkt AS d ON a~equnr  = d~equnr
  LEFT OUTER JOIN ztpm0011 AS f ON a~zztipo = f~tipo AND f~spras = d~spras
  LEFT OUTER JOIN ztpm0012 AS g ON a~zzmaq = g~maq AND f~spras = d~spras
  LEFT JOIN ztmm0015 AS h ON a~zzcolor = h~zzcolor
  WHERE a~equnr = @p_equnr AND
        c~datbi = '99991231' AND
        d~spras = @sy-langu.

  IF sy-subrc = 0.
    CLEAR: lt_status, lv_stat_text.
    CALL FUNCTION 'BAPI_EQUI_GETSTATUS'
      EXPORTING
        equipment     = ls_pm0004-equnr
      TABLES
        system_status = lt_status
        user_status   = lt_user_status.

    LOOP AT lt_user_status INTO DATA(ls_stat) WHERE status IN so_statt.
      CONCATENATE lv_stat_text ls_stat-text INTO lv_stat_text SEPARATED BY space.
    ENDLOOP.

    LOOP AT lt_status INTO ls_stat WHERE status IN so_statt.
      CONCATENATE lv_stat_text ls_stat-text INTO lv_stat_text SEPARATED BY space.
    ENDLOOP.

    ls_pm0004-stat_txt = lv_stat_text.

    IF p_new = abap_true.
      APPEND ls_pm0004 TO gt_pm0004.
      APPEND ls_pm0004 TO gt_pm0004_vis.
    ELSE.
      PERFORM actualizar_tpm0004  USING  ls_pm0004.
    ENDIF.

    ps_pm0004 = ls_pm0004.
  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  CONECTAR_CLICHE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM conectar_cliche.
  DATA: ls_cli_sel  TYPE zspm0004_alv,
        ls_jcli_sel TYPE zspm0003_alv.

* Obtener liché seleccionado
  PERFORM obtener_fila_seleccionada USING     gr_table_cli
                                              gt_pm0004_vis
                                    CHANGING  ls_cli_sel.
  IF ls_cli_sel IS INITIAL.
    MESSAGE e163(zpp). "Debe seleccionar un registro para modificarlo
  ENDIF.

  IF ls_cli_sel-juegocli IS NOT INITIAL.
    MESSAGE e192(zpp) WITH ls_cli_sel-equnr ls_cli_sel-juegocli. "El cliché & ya está asignado al juego de clichés &
  ENDIF.

* Obtener juego de cliché seleccionada.
  PERFORM obtener_fila_seleccionada USING   gr_table_jcli
                                            gt_pm0003_vis
                                  CHANGING  ls_jcli_sel.
  IF ls_jcli_sel IS NOT INITIAL.
    ls_cli_sel-juegocli = ls_jcli_sel-juegocli.
  ENDIF.
  gs_pm0004 = ls_cli_sel.
  CALL SCREEN '1402' STARTING AT 48 10.
ENDFORM.                    " CONECTAR_CLICHE

*&---------------------------------------------------------------------*
*&      Form  DESCONECTAR_CLICHE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM desconectar_cliche .
  DATA: ls_cli_sel    TYPE zspm0004_alv,
        lv_message    TYPE string,
        lv_tree_ident TYPE zident_tree,
        lv_equnr      TYPE equnr,
        ls_jcli_sel   TYPE zspm0003_alv,
        lv_jcli_sel   TYPE zjuegocli,
        lv_jcli_key   TYPE lvc_nkey,
        lv_answer(1)  TYPE c.

* Obtener troquel seleccionado
  PERFORM obtener_fila_seleccionada USING     gr_table_cli
                                              gt_pm0004_vis
                                    CHANGING  ls_cli_sel.
  IF ls_cli_sel IS INITIAL.
    MESSAGE e163(zpp).
  ENDIF.

  IF ls_cli_sel-juegocli IS INITIAL.
    MESSAGE e198(zpp) WITH ls_cli_sel-equnr. "El cliché & no está asignado a ningún juego de clichés
  ENDIF.

* Confirmar y desconectar.
  MESSAGE s199(zpp) INTO lv_message WITH ls_cli_sel-equnr ls_cli_sel-juegocli. "¿Confirma que desea desasignar el cliché & del juego de clichés &?
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
*     TITLEBAR       = ' '
*     DIAGNOSE_OBJECT             = ' '
      text_question  = lv_message
    IMPORTING
      answer         = lv_answer
    EXCEPTIONS
      text_not_found = 1
      OTHERS         = 2.

  IF lv_answer = '1'.
    DELETE FROM ztpm0004 WHERE equnr = ls_cli_sel-equnr AND juegocli = ls_cli_sel-juegocli.
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
      MESSAGE s200(zpp) WITH ls_cli_sel-equnr. "El cliché & ha sido desasignado correctamente

*     Actualizar tablas y árboles.
      lv_jcli_sel = ls_cli_sel-juegocli.
      CLEAR: ls_cli_sel-juegocli.
      PERFORM actualizar_tpm0004 USING ls_cli_sel.
      gr_table_cli->refresh( ).
      WRITE ls_cli_sel-equnr TO lv_tree_ident.

      PERFORM delete_tree_node USING gc_tipocli
                                     lv_tree_ident
                                     gr_tree.

*     Comprobar si e juego de clientes no tiene más hijos
      SELECT SINGLE equnr
        INTO lv_equnr
        FROM ztpm0004 WHERE juegocli = lv_jcli_sel.

      IF sy-subrc <> 0.
        SELECT SINGLE *
          INTO CORRESPONDING FIELDS OF ls_jcli_sel
          FROM ztpm0003
          LEFT JOIN ztpm0005 ON ztpm0005~juegocli = ztpm0003~juegocli
          LEFT JOIN ztpm0010 ON ztpm0003~juegocli = ztpm0010~juegocli AND spras = sy-langu
          WHERE ztpm0003~juegocli = lv_jcli_sel.

        IF ls_jcli_sel-copiatro IS INITIAL.
          WRITE lv_jcli_sel TO lv_tree_ident.
          PERFORM delete_tree_node USING gc_tipojcli
                                       lv_tree_ident
                                       gr_tree.

          PERFORM add_jcli_line USING  gr_worklist
                                       ls_jcli_sel
                                       ''
                                CHANGING lv_jcli_key.
        ENDIF.


      ENDIF.

      gr_tree->display( ).
      PERFORM add_cli_line USING  gr_worklist
                                  ls_cli_sel
                                  ''.
      gr_worklist->display( ).
    ELSE.
      ROLLBACK WORK.
      MESSAGE e201(zpp) WITH ls_cli_sel-equnr ls_cli_sel-juegocli. "Error al desasignar el cliché & del juego de clichés &
    ENDIF.
  ENDIF.
ENDFORM.                    " DESCONECTAR_CLICHE

*&---------------------------------------------------------------------*
*&      Form  EDITAR_CLICHE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM editar_cliche .

  DATA:
    lv_cod_cli    TYPE                   equnr,
    lv_tree_ident TYPE                   zident_tree,
    ls_pm0004     TYPE                   zspm0004_alv,
    lt_trans_mess TYPE STANDARD TABLE OF bdcmsgcoll,
    ls_trans_mess TYPE                   bdcmsgcoll,
    lr_tree       TYPE REF TO            cl_salv_tree.

  DATA: lt_bdcdata_tab TYPE bdcdata_tab,
        opt            TYPE ctu_params.

  PERFORM obtener_fila_seleccionada USING   gr_table_cli
                                            gt_pm0004_vis
                                  CHANGING  ls_pm0004.
  IF ls_pm0004 IS INITIAL.
    MESSAGE e145(zpp). "Debe seleccionar un registro para modificarlo
  ENDIF.

  PERFORM datos_trans_ie01 USING ls_pm0004-equnr
                                 gc_tipocli
                                 ''
                      CHANGING   lt_bdcdata_tab.

  TRY.
      opt-dismode = 'E'.
      opt-updmode = 'L'.
*
      CALL TRANSACTION 'IE02' WITH AUTHORITY-CHECK
                            USING lt_bdcdata_tab OPTIONS FROM opt
                            MESSAGES INTO lt_trans_mess.

      READ TABLE lt_trans_mess INTO ls_trans_mess WITH KEY msgtyp = 'E'.
      IF sy-subrc = 0.
        MESSAGE ID ls_trans_mess-msgid TYPE ls_trans_mess-msgtyp NUMBER ls_trans_mess-msgnr
        WITH ls_trans_mess-msgv1 ls_trans_mess-msgv2 ls_trans_mess-msgv3 ls_trans_mess-msgv4.
      ELSE.
        READ TABLE lt_trans_mess INTO ls_trans_mess WITH KEY msgtyp = 'S'.
        IF sy-subrc = 0.
          lv_cod_cli = ls_trans_mess-msgv1.
*         Añadir los datos del nuevo cliché a la tabla del ALV
          PERFORM update_cliche USING     lv_cod_cli
                                          abap_false
                                CHANGING  ls_pm0004.
          gr_table_cli->refresh( ). "Actualizar los datos del ALV

*         Actualizar datos en el arbol
          IF ls_pm0004-juegocli IS NOT INITIAL.
            lr_tree = gr_tree.
          ELSE.
            lr_tree = gr_worklist.
          ENDIF.
          WRITE ls_pm0004-equnr TO lv_tree_ident.
          PERFORM actualizar_nodo USING gc_tipocli
                                        lv_tree_ident
                                        ls_pm0004-eqktx
                                        lr_tree.

          IF ls_pm0004-juegocli IS NOT INITIAL.
            gr_tree->display( ).
            gr_tree->get_nodes( )->expand_all( ).
          ELSE.
            gr_worklist->display( ).
          ENDIF.
        ENDIF.
      ENDIF.
    CATCH cx_sy_authorization_error.
      MESSAGE e155(zpp).
  ENDTRY.

ENDFORM.                    " EDITAR_CLICHE
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_2001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_2001 .
  DATA: lv_okcode TYPE sy-ucomm.
  MOVE gv_okcode_2001 TO lv_okcode.
  CLEAR gv_okcode_2001.

  CASE lv_okcode.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      CLEAR: gt_pm0008.
      LEAVE TO SCREEN 0.
    WHEN 'B_GUARDAR'.
      PERFORM validar_cambios.
  ENDCASE.
ENDFORM.                    " USER_COMMAND_2001
*&---------------------------------------------------------------------*
*&      Form  LISTA_MAT_CTRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM lista_mat_ctro .
  DATA: ls_pm0001 TYPE zspm0001_alv,
        ls_pm0008 TYPE zspm0008_alv.

  CLEAR: gv_pm0008_initial, gs_pm0001.

  PERFORM obtener_fila_seleccionada USING   gr_table_ctro
                                            gt_pm0001_vis
                                  CHANGING  gs_pm0001.

  IF gs_pm0001 IS INITIAL.
    MESSAGE e145(zpp). "Debe seleccionar un registro para modificarlo
  ENDIF.

* Bloquear registros
  IF g_edit_mode = abap_true.
    CALL FUNCTION 'ENQUEUE_EZLOCKPM0008'
      EXPORTING
        x_copiatro     = gs_pm0001-copiatro
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

  PERFORM obtener_materiales USING gs_pm0001-copiatro
                                   ''
                             CHANGING gt_pm0008.

  CALL SCREEN '2001' STARTING AT 48 10.

  IF g_edit_mode = abap_true.
    CALL FUNCTION 'DEQUEUE_EZLOCKPM0008'
      EXPORTING
        x_copiatro = gs_pm0001-copiatro.
  ENDIF.
  CLEAR: gs_pm0001.

ENDFORM.                    " LISTA_MAT_CTRO
*&---------------------------------------------------------------------*
*&      Form  OBTENER_MATERIALES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_PM0001_COPIATRO  text
*      -->P_6676   text
*      <--P_GT_PM0008  text
*----------------------------------------------------------------------*
FORM obtener_materiales  USING    p_copiatro TYPE zcopiatro
                                  p_juegocli TYPE zjuegocli
                         CHANGING pt_pm0008 TYPE zttpm0008_alv.

  DATA: lv_where TYPE string.

  IF p_juegocli IS NOT INITIAL.
    lv_where = 'copiatro = p_copiatro AND juegocli = p_juegocli'.
  ELSEIF p_copiatro IS NOT INITIAL.
    lv_where = 'copiatro = p_copiatro'.
  ENDIF.


  IF p_copiatro IS NOT INITIAL OR p_juegocli IS NOT INITIAL.
    SELECT copiatro agru matnrzplp posgol b~zzplalgnt AS zzplalgntplp b~zzplaannt AS zzplaanntplp juegocli matnrzpmp c~zzcajlgext c~zzcajanext c~zzcajalext
      INTO CORRESPONDING FIELDS OF TABLE pt_pm0008
      FROM ztpm0008 AS a
      INNER JOIN mara AS b ON a~matnrzplp = b~matnr
      INNER JOIN mara AS c ON a~matnrzpmp = c~matnr
      WHERE (lv_where).
  ENDIF.

ENDFORM.                    " OBTENER_MATERIALES

*&---------------------------------------------------------------------*
*&      Form  LISTA_MAT_CTRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM lista_mat_jcli .
  DATA: ls_pm0003 TYPE zspm0003_alv,
        ls_pm0008 TYPE zspm0008_alv.

  CLEAR: gv_pm0008_initial, gs_pm0003.

  PERFORM obtener_fila_seleccionada USING   gr_table_jcli
                                            gt_pm0003_vis
                                  CHANGING  gs_pm0003.

  IF gs_pm0003 IS INITIAL.
    MESSAGE e145(zpp). "Debe seleccionar un registro para modificarlo
  ENDIF.

* Bloquear registros
  IF g_edit_mode = abap_true.
    CALL FUNCTION 'ENQUEUE_EZLOCKPM0008'
      EXPORTING
        x_copiatro     = gs_pm0003-copiatro
        x_juegocli     = gs_pm0003-juegocli
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.

  PERFORM obtener_materiales USING gs_pm0003-copiatro
                                   gs_pm0003-juegocli
                             CHANGING gt_pm0008.

  CALL SCREEN '2001' STARTING AT 48 10.

  IF g_edit_mode = abap_true.
    CALL FUNCTION 'DEQUEUE_EZLOCKPM0008'
      EXPORTING
        x_copiatro = gs_pm0003-copiatro
        x_juegocli = gs_pm0003-juegocli.
  ENDIF.
  CLEAR: gs_pm0003.

ENDFORM.                    " LISTA_MAT_CTRO


*&---------------------------------------------------------------------*
*&      Form  VALIDAR_CAMBIOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM validar_cambios .
  DATA: l_valid         TYPE                   c,
        ls_pm0008       TYPE                   zspm0008_alv,
        ls_pm0008_db    TYPE                   ztpm0008,
        lv_fieldname    TYPE                   lvc_fname,
        lo_data_changed TYPE REF TO            cl_alv_changed_data_protocol,
        lt_fieldcat_lvc TYPE                   lvc_t_fcat,
        ls_layout_lvc   TYPE                   lvc_s_layo,
        lt_matcollect   TYPE STANDARD TABLE OF ty_matcollect,
        ls_matcollect   TYPE                   ty_matcollect,
        lv_padre_posgol TYPE                   int4,
        lv_pzagolt      TYPE                   ztpm0001-pzagolt,
        lt_delta_cells  TYPE                   lvc_t_modi.

  FIELD-SYMBOLS: <fs_mod> TYPE zttpm0008_alv.

  CALL METHOD g_grid_mat->check_changed_data
    IMPORTING
      e_valid = l_valid.
*
  IF l_valid IS NOT INITIAL. "Validar las columnas obligatorias
    CREATE OBJECT lo_data_changed
      EXPORTING
        i_calling_alv = g_grid_mat.

    CALL METHOD g_grid_mat->get_frontend_fieldcatalog
      IMPORTING
        et_fieldcatalog = lt_fieldcat_lvc.

    CALL METHOD g_grid_mat->get_frontend_layout
      IMPORTING
        es_layout = ls_layout_lvc.

    lo_data_changed->mt_fieldcatalog[] = lt_fieldcat_lvc.
    lo_data_changed->ms_layout = ls_layout_lvc.

    LOOP AT gt_pm0008 INTO ls_pm0008.
      MOVE-CORRESPONDING ls_pm0008 TO ls_matcollect.
      COLLECT ls_matcollect INTO lt_matcollect.
    ENDLOOP.

    IF gs_pm0001 IS NOT INITIAL.
      lv_padre_posgol = gs_pm0001-pzagolt.
*      lv_copiatro = gs_pm0001-copiatro.
    ELSEIF gs_pm0003 IS NOT INITIAL.
*      gs_pm0003-
      SELECT SINGLE pzagolt
        FROM ztpm0001
        INTO lv_pzagolt
        WHERE copiatro = gs_pm0003-copiatro.
      IF sy-subrc = 0.
        lv_padre_posgol = lv_pzagolt.
*        lv_copiatro = gs_pm0003-copiatro.
      ENDIF.
    ENDIF.

    LOOP AT gt_pm0008 INTO ls_pm0008.
      IF <fs_mod> IS ASSIGNED.
        APPEND ls_pm0008 TO <fs_mod>.
      ENDIF.
      IF ( ls_pm0008-copiatro IS INITIAL AND ls_pm0008-juegocli IS INITIAL ).
        CLEAR: l_valid.
        CALL METHOD lo_data_changed->add_protocol_entry
          EXPORTING
            i_msgid     = 'ZPP'
            i_msgno     = '209'
            i_msgty     = 'E'
            i_fieldname = 'COPIATRO'
            i_row_id    = sy-tabix.
      ENDIF.
      IF ( ls_pm0008-matnrzplp IS INITIAL )."IS INITIAL OR ls_pm0008-matnrzpmp IS INITIAL.
        CLEAR: l_valid.
        CALL METHOD lo_data_changed->add_protocol_entry
          EXPORTING
            i_msgid     = 'ZPP'
            i_msgno     = '209'
            i_msgty     = 'E'
            i_fieldname = 'MATNRZPLP'
            i_row_id    = sy-tabix.
      ENDIF.
      IF ( ls_pm0008-matnrzpmp IS INITIAL ).
        CLEAR: l_valid.
        CALL METHOD lo_data_changed->add_protocol_entry
          EXPORTING
            i_msgid     = 'ZPP'
            i_msgno     = '209'
            i_msgty     = 'E'
            i_fieldname = 'MATNRZPMP'
            i_row_id    = sy-tabix.
      ENDIF.
      IF ls_pm0008-copiatro IS NOT INITIAL.
        READ TABLE lt_matcollect WITH KEY agru = ls_pm0008-agru
                                        matnrzplp = ls_pm0008-matnrzplp
                                        juegocli = ls_pm0008-juegocli
                                        copiatro = ls_pm0008-copiatro
           INTO ls_matcollect.
        IF ls_matcollect-posgol <> lv_padre_posgol.
          CLEAR: l_valid.
          CALL METHOD lo_data_changed->add_protocol_entry
            EXPORTING
              i_msgid     = 'ZPP'
              i_msgno     = '215'
              i_msgty     = 'E'
              i_fieldname = 'POSGOL'
              i_msgv1     = ls_pm0008-agru
              i_row_id    = sy-tabix.
        ENDIF.
      ENDIF.

    ENDLOOP.

    IF l_valid IS INITIAL.
      lo_data_changed->display_protocol( ).
    ELSE.
      lo_data_changed->refresh_protocol( ).
    ENDIF.

  ENDIF.

  IF l_valid IS INITIAL.
    MESSAGE e210(zpp).
  ELSE.
    IF gs_pm0001 IS NOT INITIAL.
      DELETE FROM ztpm0008 WHERE copiatro = gs_pm0001-copiatro.
    ELSEIF gs_pm0003 IS NOT INITIAL.
      DELETE FROM ztpm0008 WHERE copiatro = gs_pm0003-copiatro AND juegocli = gs_pm0003-juegocli.
    ENDIF.
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
    ENDIF.
    LOOP AT gt_pm0008 INTO ls_pm0008.
      MOVE-CORRESPONDING ls_pm0008 TO ls_pm0008_db.
      INSERT ztpm0008 FROM ls_pm0008_db.
      IF sy-subrc <> 0.
        ROLLBACK WORK.
        MESSAGE e212(zpp) WITH sy-tabix.
      ENDIF.
    ENDLOOP.
    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
      IF gs_pm0001 IS NOT INITIAL.
        MESSAGE s213(zpp) WITH gs_pm0001-copiatro.
      ELSEIF gs_pm0003 IS NOT INITIAL.
        MESSAGE s214(zpp) WITH gs_pm0003-juegocli.
      ENDIF.

    ENDIF.

  ENDIF.
ENDFORM.                    " VALIDAR_CAMBIOS

FORM materiales_asignados USING p_copiatro TYPE zcopiatro
                                p_juegocli TYPE zjuegocli
                          CHANGING p_asignados TYPE xfeld.
  DATA: lv_where     TYPE string,
        lv_matnrzpmp TYPE zmatnrzpmp.

  CLEAR: p_asignados.
  IF p_juegocli IS NOT INITIAL.
    lv_where = 'copiatro = p_copiatro and juegocli = p_juegocli'.
  ELSEIF p_copiatro IS NOT INITIAL.
    lv_where = 'copiatro = p_copiatro'.
  ENDIF.

  SELECT SINGLE matnrzpmp
    INTO lv_matnrzpmp
    FROM ztpm0008
    WHERE (lv_where).
  IF sy-subrc = 0.
    p_asignados = abap_true.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  VALIDAR_ASIGNACION_MATERIALES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ASIGN_JUEGOCLI  text
*      -->P_LS_ASIGN_COPIATRO  text
*      <--P_LV_ERROR  text
*----------------------------------------------------------------------*
FORM validar_asignacion_materiales  USING    p_juegocli TYPE zjuegocli
                                             p_copiatro TYPE zcopiatro
                                    CHANGING p_error_longitudes TYPE xfeld
                                             p_error_cantidad.

  DATA: lt_pm0008  TYPE                   zttpm0008_alv,
        lv_matkl   TYPE mara-matkl,
        ls_pm0001  TYPE                   ztpm0001,
        lt_matcoll TYPE STANDARD TABLE OF ty_matcollect,
        ls_matcoll TYPE                   ty_matcollect.

  CLEAR: p_error_longitudes, p_error_cantidad.
  IF p_juegocli IS NOT INITIAL  AND p_copiatro IS NOT INITIAL.
    PERFORM obtener_materiales USING    ''
                                        p_juegocli
                               CHANGING lt_pm0008.

    IF lt_pm0008 IS NOT INITIAL.
      SELECT SINGLE *
        INTO ls_pm0001
        FROM ztpm0001
        WHERE copiatro = p_copiatro.
      IF sy-subrc = 0.
        LOOP AT lt_pm0008 INTO DATA(ls_pm0008).
*  DBM 04.10.2017 >>> Validar longitudes sólo para mat. distintos de rollos
          SELECT SINGLE matkl
            INTO lv_matkl
            FROM mara
            WHERE matnr = ls_pm0008-matnrzplp.
          IF  lv_matkl <> '90220' AND
*  DBM 04.10.2017 <<< Validar longitudes sólo para mat. distintos de rollos
              ( ls_pm0008-zzplaanntplp <> ls_pm0001-planchonet OR
                ls_pm0008-zzplalgntplp <> ls_pm0001-pllargonet ).
            p_error_longitudes = abap_true.
            EXIT.
          ENDIF.
          MOVE-CORRESPONDING ls_pm0008 TO ls_matcoll.
          COLLECT ls_matcoll INTO lt_matcoll.
        ENDLOOP.
        LOOP AT lt_matcoll INTO ls_matcoll.
          IF ls_matcoll-posgol <> ls_pm0001-pzagolt.
            p_error_cantidad = abap_true.
            EXIT.
          ENDIF.
        ENDLOOP.
      ELSE.
        p_error_longitudes = abap_true.
      ENDIF.
    ENDIF.


  ELSE.
    p_error_longitudes = abap_true.
  ENDIF.

ENDFORM.                    " VALIDAR_ASIGNACION_MATERIALES
*&---------------------------------------------------------------------*
*&      Form  FILTRAR_COPIATRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<LS_DATA_ROW>_CLAVE  text
*----------------------------------------------------------------------*
FORM filtrar_copiatro  USING    p_clave.
  DATA: lv_copiatro TYPE zcopiatro.

  PERFORM filtrar_raiz.

  lv_copiatro = p_clave.
  " Eliminar del ALV las copias no seleccionadas
  DELETE gt_pm0001_vis WHERE copiatro <> lv_copiatro.
  " Eliminar troqueles no asignados a la copia
  DELETE gt_pm0002_vis WHERE copiatro <> lv_copiatro.
  " Eliminar los juegos de cliché no asignados a esta copia.
  DELETE gt_pm0003_vis WHERE copiatro <> lv_copiatro.
  " Eliminar clichés no asignados a copia de troqueles
  CLEAR gt_pm0004_vis.
  LOOP AT gt_pm0003_vis INTO DATA(ls_pm0003).
    LOOP AT gt_pm0004 INTO DATA(ls_pm0004) WHERE juegocli = ls_pm0003-juegocli.
      APPEND ls_pm0004 TO gt_pm0004_vis.
    ENDLOOP.
  ENDLOOP.
ENDFORM.                    " FILTRAR_COPIATRO
*&---------------------------------------------------------------------*
*&      Form  FILTRAR_RAIZ
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM filtrar_raiz .
  gt_pm0001_vis = gt_pm0001.
  gt_pm0002_vis = gt_pm0002.
  gt_pm0003_vis = gt_pm0003.
  gt_pm0004_vis = gt_pm0004.
ENDFORM.                    " FILTRAR_RAIZ
*&---------------------------------------------------------------------*
*&      Form  FILTRAR_TRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<LS_DATA_ROW>_CLAVE  text
*----------------------------------------------------------------------*
FORM filtrar_tro  USING    p_clave.

  DATA: lv_equnr TYPE equnr.

  PERFORM filtrar_raiz.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_clave
    IMPORTING
      output = lv_equnr.

  " Eliminar troqueles distintos al seleccionado
  DELETE gt_pm0002_vis WHERE equnr <> lv_equnr.
  READ TABLE gt_pm0002_vis INTO DATA(ls_pm0002) INDEX 1.

  " Eliminar del ALV las copias que no contienen al troquel
  DELETE gt_pm0001_vis WHERE copiatro <> ls_pm0002-copiatro.

*  CLEAR: gt_pm0003_vis, gt_pm0004_vis.
  CLEAR: gt_pm0003_vis, gt_pm0004_vis.
  LOOP AT gt_pm0002_vis INTO ls_pm0002 .
    LOOP AT gt_pm0003 INTO DATA(ls_pm0003) WHERE copiatro = ls_pm0002-copiatro.
      APPEND ls_pm0003 TO gt_pm0003_vis.
      LOOP AT gt_pm0004 INTO DATA(ls_pm0004) WHERE juegocli = ls_pm0003-juegocli.
        APPEND ls_pm0004 TO gt_pm0004_vis.
      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                    " FILTRAR_TRO
*&---------------------------------------------------------------------*
*&      Form  FILTRAR_JCLI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<LS_DATA_ROW>_CLAVE  text
*----------------------------------------------------------------------*
FORM filtrar_jcli  USING    p_clave.

  DATA: lv_juegocli TYPE zjuegocli.

  PERFORM filtrar_raiz.
  lv_juegocli = p_clave.

*  " Eliminar los juegos de cliché distintos al seleccionado
  DELETE gt_pm0003_vis WHERE juegocli <> lv_juegocli.

*  " Eliminar clichés no asignados al juego de clichés
  CLEAR gt_pm0004_vis.
  LOOP AT gt_pm0003_vis INTO DATA(ls_pm0003).
    LOOP AT gt_pm0004 INTO DATA(ls_pm0004) WHERE juegocli = lv_juegocli.
      APPEND ls_pm0004 TO gt_pm0004_vis.
    ENDLOOP.
    " Eliminar del ALV las copias que no contienen al cliché
    DELETE gt_pm0001_vis WHERE copiatro <> ls_pm0003-copiatro.
  ENDLOOP.

  " Eliminar troqueles distintos al seleccionado
  CLEAR: gt_pm0002_vis.
  LOOP AT gt_pm0001_vis INTO DATA(ls_pm0001).
    LOOP AT gt_pm0002 INTO DATA(ls_pm0002) WHERE copiatro = ls_pm0001-copiatro.
      APPEND ls_pm0002 TO gt_pm0002_vis.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                    " FILTRAR_JCLI
*&---------------------------------------------------------------------*
*&      Form  FILTRAR_CLI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<LS_DATA_ROW>_CLAVE  text
*----------------------------------------------------------------------*
FORM filtrar_cli  USING    p_clave.

  DATA: lv_equnr TYPE equnr.

  PERFORM filtrar_raiz.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_clave
    IMPORTING
      output = lv_equnr.

  " Eliminar clichés distintos al seleccionado
  DELETE gt_pm0004_vis WHERE equnr <> lv_equnr.

  CLEAR: gt_pm0003_vis, gt_pm0001_vis, gt_pm0002_vis.
  LOOP AT gt_pm0004_vis INTO DATA(ls_pm0004).
    " Eliminar los juegos de cliché no padres del cliché.
    LOOP AT gt_pm0003 INTO DATA(ls_pm0003) WHERE juegocli = ls_pm0004-juegocli.
      APPEND ls_pm0003 TO gt_pm0003_vis.
      LOOP AT gt_pm0001 INTO DATA(ls_pm0001) WHERE copiatro = ls_pm0003-copiatro.
        APPEND ls_pm0001 TO gt_pm0001_vis.
      ENDLOOP.
    ENDLOOP.
  ENDLOOP.

  LOOP AT gt_pm0001_vis INTO ls_pm0001.
    LOOP AT gt_pm0002 INTO DATA(ls_pm0002) WHERE copiatro = ls_pm0001-copiatro.
      APPEND ls_pm0002 TO gt_pm0002_vis.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                    " FILTRAR_CLI
*&---------------------------------------------------------------------*
*&      Form  DESACTIVAR_FILTRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM desactivar_filtros.
  IF p_jer IS NOT INITIAL.
    LOOP AT SCREEN.
      IF ( screen-group1 = 'JER' ) .
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " DESACTIVAR_FILTRO

FORM variante_defecto.
  DATA: tp_subrc LIKE sy-subrc.
  DATA: tp_repid LIKE rsvar-report.
  DATA: tp_variant LIKE rsvar-variant.

  tp_repid = sy-repid.
  CLEAR tp_variant.
  tp_variant = 'U_'.
  WRITE sy-uname TO tp_variant+2.

  CALL FUNCTION 'RS_VARIANT_EXISTS'
    EXPORTING
      report  = tp_repid
      variant = tp_variant
    IMPORTING
      r_c     = tp_subrc
    EXCEPTIONS
      OTHERS  = 9.

  IF sy-subrc = 0.
    IF NOT tp_subrc IS INITIAL.
      CLEAR tp_variant.
      tp_variant = 'U_'.
      WRITE sy-sysid TO tp_variant+2.

      CALL FUNCTION 'RS_VARIANT_EXISTS'
        EXPORTING
          report  = tp_repid
          variant = tp_variant
        IMPORTING
          r_c     = tp_subrc
        EXCEPTIONS
          OTHERS  = 9.
      CHECK sy-subrc = 0.
    ENDIF.

    IF tp_subrc = 0.
      CALL FUNCTION 'RS_SUPPORT_SELECTIONS'
        EXPORTING
          report               = tp_repid
          variant              = tp_variant
        EXCEPTIONS
          variant_not_existent = 01
          variant_obsolete     = 02.
    ENDIF.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  RECALCULAR_CUCHILLAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recalcular_cuchillas .
  gs_pm0001-zzplaanbr = gs_pm0001-planchonet - gs_pm0001-demasancho.
  gs_pm0001-zzplalgbr = gs_pm0001-pllargonet - gs_pm0001-demaslargo.
ENDFORM.
