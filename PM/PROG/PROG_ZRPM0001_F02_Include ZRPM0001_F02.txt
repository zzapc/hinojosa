*&---------------------------------------------------------------------*
*&  Include           ZRPM0001_F02
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  F_MOSTRAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_G_GRID_1  text
*      -->P_G_CONTAINER_ALV1  text
*      -->P_G_CUSTOM_CONTAINER_1  text
*      -->P_0020   text
*----------------------------------------------------------------------*
FORM f_mostrar_alv USING p_structure_name
                         p_table
                         p_container        TYPE scrfname
                         p_handler      TYPE REF TO lcl_handle_events_2001" TO lcl_handle_events
                         p_handler_class TYPE char30
                         p_custom_container TYPE REF TO cl_gui_custom_container
                         p_layout_handle TYPE slis_handl
                         pt_editable TYPE stty_sr_string_range
                         pt_autovalues TYPE stty_sr_string_range
                         p_initial TYPE xfeld
                         p_stylefname         TYPE lvc_fname
                   CHANGING p_grid TYPE REF TO cl_gui_alv_grid.

  DATA: lt_fieldcat          TYPE lvc_t_fcat WITH HEADER LINE,
        ls_layout            TYPE lvc_s_layo,
        lt_toolbar_excluding TYPE ui_functions,
        ls_is_var            TYPE disvariant,
        ls_is_stable         TYPE lvc_s_stbl.

  IF p_custom_container IS INITIAL.
    " Los objetos del contenedor y el alv se crean solo una vez
    " al principio de la entrada a la pantalla
    " Creamos la instancia contenedor
    CREATE OBJECT p_custom_container
      EXPORTING
        container_name = p_container.

    " Creamos la instancia alv
    CREATE OBJECT p_grid "g_grid_mat
      EXPORTING
        i_parent = p_custom_container.

    " Creamos el catálogo de campos
    PERFORM f_alv_crear_field_catalog USING p_structure_name
                                            pt_editable
                                            pt_autovalues
                                   CHANGING lt_fieldcat[].

    " Preparamos la visualización del alv
    PERFORM f_alv_crear_layout USING p_grid"g_grid_mat
                                     p_stylefname
                            CHANGING ls_layout
                                     lt_toolbar_excluding.

    " Mostramos el alv
    ls_is_var-report = sy-repid.
    ls_is_var-handle = p_layout_handle."'0001'.

    " Para los eventos
    CREATE OBJECT p_handler TYPE (p_handler_class).
    SET HANDLER p_handler->handle_data_changed FOR p_grid."g_grid_mat.

    CALL METHOD p_grid->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_enter.

    CALL METHOD p_grid->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

    IF p_initial = abap_true.
      CALL METHOD p_handler->set_table_is_initial.
    ELSE.
      CALL METHOD p_handler->set_table_is_not_initial.
    ENDIF.

    CALL METHOD p_grid->set_table_for_first_display
      EXPORTING
        is_layout            = ls_layout
        it_toolbar_excluding = lt_toolbar_excluding
        i_save               = 'A'
        i_default            = abap_true
        is_variant           = ls_is_var
      CHANGING
        it_outtab            = p_table
        it_fieldcatalog      = lt_fieldcat[].

    IF pt_editable IS NOT INITIAL.
      CALL METHOD p_grid->set_ready_for_input
        EXPORTING
          i_ready_for_input = 1.
    ENDIF.
  ELSE.
    " El resto de veces simplemente refrescamos el alv
    ls_is_stable-col = abap_true.
    ls_is_stable-row = abap_true.

    IF p_initial = abap_true.
      CALL METHOD p_handler->set_table_is_initial.
    ELSE.
      CALL METHOD p_handler->set_table_is_not_initial.
    ENDIF.

    " Creamos el catálogo de campos
    PERFORM f_alv_crear_field_catalog USING p_structure_name
                                            pt_editable
                                            pt_autovalues
                                   CHANGING lt_fieldcat[].

    CALL METHOD p_grid->set_frontend_fieldcatalog
      EXPORTING
        it_fieldcatalog = lt_fieldcat[].

    CALL METHOD p_grid->refresh_table_display
      EXPORTING
        is_stable = ls_is_stable.

    IF pt_editable IS NOT INITIAL.
      CALL METHOD p_grid->set_ready_for_input
        EXPORTING
          i_ready_for_input = 1.
    ELSE.
      CALL METHOD p_grid->set_ready_for_input
        EXPORTING
          i_ready_for_input = 0.
    ENDIF.
  ENDIF.


ENDFORM.                    " F_MOSTRAR_ALV
*&---------------------------------------------------------------------*
*&      Form  F_ALV_CREAR_FIELD_CATALOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_STRUCTURE_NAME  text
*      <--P_LT_FIELDCAT[]  text
*----------------------------------------------------------------------*
FORM f_alv_crear_field_catalog USING p_structure_name
                                     pt_editables TYPE stty_sr_string_range
                                     pt_autovalues TYPE stty_sr_string_range
                               CHANGING pt_fieldcat TYPE lvc_t_fcat.

  " Generámos el catálogo de campos a mostrar con sus propiedades
  REFRESH: pt_fieldcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = p_structure_name
    CHANGING
      ct_fieldcat            = pt_fieldcat[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  LOOP AT pt_fieldcat ASSIGNING FIELD-SYMBOL(<fs_fcat>).
    IF pt_editables IS NOT INITIAL AND  <fs_fcat>-fieldname IN pt_editables.
      <fs_fcat>-edit = 'X'.
      <fs_fcat>-checktable = '!'.
    ENDIF.

    IF pt_autovalues IS NOT INITIAL AND <fs_fcat>-fieldname IN pt_autovalues.
      <fs_fcat>-auto_value = 'X'.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " F_ALV_CREAR_FIELD_CATALOG
*&---------------------------------------------------------------------*
*&      Form  F_ALV_CREAR_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_LAYOUT  text
*      <--P_LT_TOOLBAR_EXCLUDING  text
*----------------------------------------------------------------------*
FORM f_alv_crear_layout USING p_grid               TYPE REF TO cl_gui_alv_grid
                              p_stylefname         TYPE lvc_fname
                     CHANGING ps_layout            TYPE lvc_s_layo
                              pt_toolbar_excluding TYPE ui_functions.

  " Forma de visualización de los datos en el alv
  DATA: ls_toolbar TYPE ui_func.

  CLEAR ps_layout.
  REFRESH pt_toolbar_excluding.

  ps_layout-zebra = abap_true.
  ps_layout-sel_mode = 'B'.
  ps_layout-stylefname = p_stylefname.

  " Quitamos los botones no necesarios del alv
  ls_toolbar = cl_gui_alv_grid=>mc_fc_loc_copy .
  APPEND ls_toolbar TO pt_toolbar_excluding.
  ls_toolbar = cl_gui_alv_grid=>mc_fc_loc_cut .
  APPEND ls_toolbar TO pt_toolbar_excluding.
  ls_toolbar = cl_gui_alv_grid=>mc_fc_loc_copy_row .
  APPEND ls_toolbar TO pt_toolbar_excluding.
  ls_toolbar = cl_gui_alv_grid=>mc_fc_loc_insert_row .
  APPEND ls_toolbar TO pt_toolbar_excluding.
  ls_toolbar = cl_gui_alv_grid=>mc_fc_loc_paste .
  APPEND ls_toolbar TO pt_toolbar_excluding.
  ls_toolbar = cl_gui_alv_grid=>mc_fc_loc_undo .
  APPEND ls_toolbar TO pt_toolbar_excluding.
  ls_toolbar = cl_gui_alv_grid=>mc_fc_loc_paste_new_row .
  APPEND ls_toolbar TO pt_toolbar_excluding.
  ls_toolbar = cl_gui_alv_grid=>mc_fc_refresh .
  APPEND ls_toolbar TO pt_toolbar_excluding.
  ls_toolbar = cl_gui_alv_grid=>mc_fc_graph .
  APPEND ls_toolbar TO pt_toolbar_excluding.

ENDFORM.                    " F_ALV_CREAR_LAYOUT


* INI DBUENO 31.07.2017
* Subrutina para mostrar SALV genérico
FORM f_mostrar_salv USING p_custom_container TYPE REF TO cl_gui_custom_container
                          p_salv_table TYPE REF TO cl_salv_table
                          p_container_name TYPE scrfname
                          p_table
                          p_columns_perform TYPE string
                          p_optimize_cols TYPE xfeld
                          p_handle TYPE slis_handl
                          p_full_screen TYPE xfeld.

  DATA: l_icon TYPE string.
  DATA: lr_selections TYPE REF TO cl_salv_selections.
  DATA: lr_events    TYPE REF TO cl_salv_events_table,
        lr_layout    TYPE REF TO cl_salv_layout,
        lv_cont_name TYPE        string,
        ls_key       TYPE        salv_s_layout_key.

  IF p_custom_container IS NOT BOUND OR p_full_screen = abap_true.
    lv_cont_name = p_container_name.
*
    IF p_full_screen IS INITIAL AND cl_salv_table=>is_offline( ) EQ if_salv_c_bool_sap=>false.
      CREATE OBJECT p_custom_container
        EXPORTING
          container_name = p_container_name.
    ENDIF.
*
*... Crear tabla ALV
    IF p_full_screen IS INITIAL.
      TRY.
          cl_salv_table=>factory(
            EXPORTING
              r_container    = p_custom_container
              container_name = lv_cont_name
            IMPORTING
              r_salv_table   = p_salv_table
            CHANGING
              t_table        = p_table ).
        CATCH cx_salv_msg.                              "#EC NO_HANDLER
      ENDTRY.
    ELSE.
      TRY.
          cl_salv_table=>factory(
          EXPORTING
          list_display = abap_false
            IMPORTING
              r_salv_table   = p_salv_table

            CHANGING
              t_table        = p_table ).
        CATCH cx_salv_msg.                              "#EC NO_HANDLER
      ENDTRY.
    ENDIF.

*
**... Funciones del ALV
    DATA: lr_functions TYPE REF TO cl_salv_functions_list,
          l_text       TYPE        string.
**
**... Genéricas
    IF p_full_screen IS INITIAL.
      lr_functions = p_salv_table->get_functions( ).
      lr_functions->set_all( gc_true ).
      lr_functions->set_group_aggregation( abap_false ).
      lr_functions->set_group_subtotal( abap_false ).
      lr_functions->set_group_view( abap_false ).
      lr_functions->set_graphics( abap_false ).
    ELSE.
      p_salv_table->set_screen_status(  pfstatus      =  'SALV_FULLSCREEN'
                                    report        =  sy-repid
                                    set_functions = p_salv_table->c_functions_all ).
    ENDIF.
**
*
**... Configurar las columnas
    DATA: lr_columns TYPE REF TO cl_salv_columns,
          lr_column  TYPE REF TO cl_salv_column_table.
*
    lr_columns = p_salv_table->get_columns( ).
    lr_columns->set_optimize( p_optimize_cols ).
**
    IF p_columns_perform IS NOT INITIAL.
      PERFORM (p_columns_perform) IN PROGRAM zrpm0001 USING lr_columns IF FOUND.
    ENDIF.

**... Definir método de selección
    lr_selections = p_salv_table->get_selections( ).
    lr_selections->set_selection_mode( if_salv_c_selection_mode=>row_column ).

*... Definir layout
    lr_layout = p_salv_table->get_layout( ).
    ls_key-report = sy-repid.
    ls_key-handle = p_handle.
    lr_layout->set_key( ls_key ).
    lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
    lr_layout->set_default( abap_true ).

**... Mostrar el ALV
    p_salv_table->display( ).
  ELSE.
*... Actualizar le ALV
    p_salv_table->refresh( ).
  ENDIF.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  STATUS_0201
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_0201 .
  PERFORM ocultar_botones.

* Mostrar ALV clásico
*  PERFORM f_mostrar_alv USING 'ZSPM0001_ALV'
*                              gt_pm0001_vis
*                              g_grid_ctro
*                              'CC_CTRO'
*                              gr_events
*                              'LCL_HANDLE_EVENTS_0201'
*                              gr_custom_container_ctro
*                              '0001'.

* Mostrar SALV
  PERFORM f_mostrar_salv USING gr_custom_container_ctro
                         gr_table_ctro
                         'CC_CTRO'
                         gt_pm0001_vis
                         'SET_COLUMNS_TECHNICAL_0201'
                         abap_false
                         '0001'
                         abap_false.

ENDFORM.                    " STATUS_0201


FORM set_columns_technical_0201  USING ir_columns TYPE REF TO cl_salv_columns.

  DATA: lr_column  TYPE REF TO cl_salv_column,
        lr_column2 TYPE REF TO cl_salv_column_table.

  TRY.
      lr_column = ir_columns->get_column( 'SWERK' ).
      lr_column->set_output_length( 8 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'PZAGOLT' ).
      lr_column->set_output_length( 8 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'PLLARGONET' ).
      lr_column->set_output_length( 10 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'PLANCHONET' ).
      lr_column->set_output_length( 10 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'CAJLARGO' ).
      lr_column->set_output_length( 8 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'CAJANCHO' ).
      lr_column->set_output_length( 8 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'CAJALTO' ).
      lr_column->set_output_length( 8 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'REFANTIG' ).
      lr_column->set_output_length( 10 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  STATUS_0301
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_0301 .
  PERFORM ocultar_botones.

  PERFORM f_mostrar_salv USING gr_custom_container_tro
                          gr_table_tro
                          'CC_TRO'
                          gt_pm0002_vis
                          'SET_COLUMNS_TECHNICAL_0301'
                          abap_false
                          '0002'
                          abap_false.

ENDFORM.                    " STATUS_0301

FORM set_columns_technical_0301  USING ir_columns TYPE REF TO cl_salv_columns.

  DATA: lr_column  TYPE REF TO cl_salv_column,
        lr_column2 TYPE REF TO cl_salv_column_table,
        lv_text_s  TYPE        scrtext_s,
        lv_text_m  TYPE        scrtext_m,
        lv_text_l  TYPE        scrtext_l.

  TRY.
      lr_column = ir_columns->get_column( 'ZZTIPO' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'ZZMAQ' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lv_text_s = text-c01.
      lv_text_m = text-c03.
      lv_text_l = text-c05.
      lr_column = ir_columns->get_column( 'TROTX' ).
      lr_column->set_short_text( lv_text_s ).
      lr_column->set_medium_text( lv_text_m ).
      lr_column->set_long_text( lv_text_l ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lv_text_s = text-c02.
      lv_text_m = text-c04.
      lv_text_l = text-c06.
      lr_column = ir_columns->get_column( 'MAQTX' ).
      lr_column->set_short_text( lv_text_s ).
      lr_column->set_medium_text( lv_text_m ).
      lr_column->set_long_text( lv_text_l ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  STATUS_0401
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_0401 .
  PERFORM ocultar_botones.

  PERFORM f_mostrar_salv USING gr_custom_container_jcli
                          gr_table_jcli
                          'CC_JCLI'
                          gt_pm0003_vis
                          'SET_COLUMNS_TECHNICAL_0401'
                          abap_false
                          '0003'
                          abap_false.

ENDFORM.                    " STATUS_0401

FORM set_columns_technical_0401  USING ir_columns TYPE REF TO cl_salv_columns.

  DATA: lr_column  TYPE REF TO cl_salv_column,
        lr_column2 TYPE REF TO cl_salv_column_table.

  TRY.
      lr_column = ir_columns->get_column( 'SWERK' ).
      lr_column->set_output_length( 8 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'PLLARGONET' ).
      lr_column->set_output_length( 9 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'PLANCHONET' ).
      lr_column->set_output_length( 9 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'CAJLARGO' ).
      lr_column->set_output_length( 8 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'CAJANCHO' ).
      lr_column->set_output_length( 8 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'CAJALTO' ).
      lr_column->set_output_length( 8 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'REFANTIG' ).
      lr_column->set_output_length( 10 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  STATUS_0501
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_0501 .
  PERFORM ocultar_botones.

  PERFORM f_mostrar_salv USING gr_custom_container_cli
                        gr_table_cli
                        'CC_CLI'
                        gt_pm0004_vis
                        'SET_COLUMNS_TECHNICAL_0501'
                        abap_false
                        '0004'
                        abap_false.

ENDFORM.                    " STATUS_0501

FORM set_columns_technical_0501  USING ir_columns TYPE REF TO cl_salv_columns.

  DATA: lr_column  TYPE REF TO cl_salv_column,
        lr_column2 TYPE REF TO cl_salv_column_table,
        lv_text_s  TYPE        scrtext_s,
        lv_text_m  TYPE        scrtext_m,
        lv_text_l  TYPE        scrtext_l.

  TRY.
      lr_column = ir_columns->get_column( 'ZZTIPO' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lr_column = ir_columns->get_column( 'ZZMAQ' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lv_text_s = text-c07.
      lv_text_m = text-c08.
      lv_text_l = text-c09.
      lr_column = ir_columns->get_column( 'TROTX' ).
      lr_column->set_short_text( lv_text_s ).
      lr_column->set_medium_text( lv_text_m ).
      lr_column->set_long_text( lv_text_l ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
  TRY.
      lv_text_s = text-c02.
      lv_text_m = text-c04.
      lv_text_l = text-c06.
      lr_column = ir_columns->get_column( 'MAQTX' ).
      lr_column->set_short_text( lv_text_s ).
      lr_column->set_medium_text( lv_text_m ).
      lr_column->set_long_text( lv_text_l ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREATE_TREE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_tree .

  DATA: lv_root_key TYPE        lvc_nkey,
        lv_ctro_key TYPE        lvc_nkey,
        lv_jcli_key TYPE        lvc_nkey,
        ls_jcli     TYPE        zspm0003_alv,
        ls_cli      TYPE        zspm0004_alv,
        nodes       TYPE REF TO cl_salv_nodes.

  PERFORM build_tree_header.
  PERFORM add_root_line CHANGING lv_root_key.

  gv_root_key = lv_root_key.

* Añadir Copias de troqueles a la jerarquía
  LOOP AT gt_pm0001 INTO DATA(ls_ctro).
    PERFORM add_ctro_line USING     gr_tree
                                    ls_ctro
                                    lv_root_key
                          CHANGING  lv_ctro_key.
*   Añadir troqueles a la jerarquía de copias de troqueles
    LOOP AT gt_pm0002 INTO DATA(ls_tro) WHERE copiatro = ls_ctro-copiatro. "Quitar para probar jerarquía
      PERFORM add_tro_line USING    gr_tree
                                    ls_tro
                                    lv_ctro_key.
    ENDLOOP.

*   Añadir Juegos de clichés a la jerarquía de copias de troqueles
    LOOP AT gt_pm0003 INTO ls_jcli WHERE copiatro = ls_ctro-copiatro. "Quitar para probar jerarquía
      PERFORM add_jcli_line USING     gr_tree
                                      ls_jcli
                                      lv_ctro_key
                            CHANGING  lv_jcli_key.

      LOOP AT gt_pm0004 INTO ls_cli WHERE juegocli = ls_jcli-juegocli. "Quitar para probar jerarquía
        PERFORM add_cli_line USING  gr_tree
                                    ls_cli
                                    lv_jcli_key.
      ENDLOOP.
    ENDLOOP.

  ENDLOOP.

* Añadir Juegos de clichés sin jerarquía (solo si tienen hijos)
  LOOP AT gt_pm0003 INTO ls_jcli WHERE copiatro = ''.
    READ TABLE gt_pm0004 WITH KEY juegocli = ls_jcli-juegocli TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      PERFORM add_jcli_line USING     gr_tree
                                    ls_jcli
                                    lv_root_key
                          CHANGING  lv_jcli_key.

      LOOP AT gt_pm0004 INTO ls_cli WHERE juegocli = ls_jcli-juegocli.
        PERFORM add_cli_line USING  gr_tree
                                    ls_cli
                                    lv_jcli_key.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

  nodes = gr_tree->get_nodes( ).
  nodes->expand_all( ).

ENDFORM.                    " CREATE_TREE

*&---------------------------------------------------------------------*
*&      Form  build_worklist_header
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_worklist_header .
  DATA: settings TYPE REF TO cl_salv_tree_settings.
  DATA: title TYPE salv_de_tree_text.

  settings = gr_worklist->get_tree_settings( ).
  settings->set_hierarchy_header( text-hd3 ).
  settings->set_hierarchy_tooltip( text-ht4 ).
  settings->set_hierarchy_size( 40 ).

  title = sy-title.
  settings->set_header( title ).
ENDFORM.                    " build_worklist_header


*&---------------------------------------------------------------------*
*&      Form  build_tree_header
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM build_tree_header .
  DATA: settings TYPE REF TO cl_salv_tree_settings.
  DATA: title TYPE salv_de_tree_text.

  settings = gr_tree->get_tree_settings( ).
  settings->set_hierarchy_header( text-hd1 ).
  settings->set_hierarchy_tooltip( text-ht1 ).
  settings->set_hierarchy_size( 40 ).

  title = sy-title.
  settings->set_header( title ).

ENDFORM.                    " build_header
*&---------------------------------------------------------------------*
*&      Form  SET_COLUMNS_TECHNICAL_TREE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_columns_technical_tree USING ir_columns TYPE REF TO cl_salv_columns.
  DATA: lr_column  TYPE REF TO cl_salv_column,
        lr_column2 TYPE REF TO cl_salv_column_table.

  TRY.
      lr_column = ir_columns->get_column( 'DESCRIPTIVO' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'TIPO' ).
      lr_column->set_output_length( 8 ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.
ENDFORM.                    " SET_COLUMNS_TECHNICAL_TREE

*&---------------------------------------------------------------------*
*&      Form  ADD_CTRO_LINE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_CTRO  text
*      -->P_LV_ROOT_KEY  text
*      <--P_LV_CTRO_KEY  text
*----------------------------------------------------------------------*
FORM add_ctro_line  USING    p_tree TYPE REF TO cl_salv_tree
                             p_ls_ctro TYPE zspm0001_alv
                             p_lv_root_key TYPE lvc_nkey
                    CHANGING p_lv_ctro_key TYPE lvc_nkey.

  DATA: nodes          TYPE REF TO cl_salv_nodes,
        node           TYPE REF TO cl_salv_node,
        text           TYPE        lvc_value,
        ls_pm0001_tree TYPE        zspm0001_tree,
        image1         TYPE        salv_de_tree_image.

  nodes = p_tree->get_nodes( ).

  ls_pm0001_tree-descriptivo = p_ls_ctro-juektx.
  ls_pm0001_tree-tipo = gc_tipoctro.
  WRITE p_ls_ctro-copiatro TO ls_pm0001_tree-clave.

  TRY.
      text = ls_pm0001_tree-descriptivo.
      image1 = icon_ps_project_definition."'@EC@'.

      CALL METHOD nodes->add_node
        EXPORTING
          related_node   = p_lv_root_key
          relationship   = if_salv_c_node_relation=>last_child
          data_row       = ls_pm0001_tree
          collapsed_icon = image1
          expanded_icon  = image1
          text           = text
        RECEIVING
          node           = node.

      p_lv_ctro_key = node->get_key( ).

    CATCH cx_salv_msg.
  ENDTRY.


ENDFORM.                    " ADD_CTRO_LINE
*&---------------------------------------------------------------------*
*&      Form  ADD_ROOT_LINE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LV_ROOT_KEY  text
*----------------------------------------------------------------------*
FORM add_root_line  CHANGING p_lv_root_key TYPE lvc_nkey.

  DATA: nodes          TYPE REF TO cl_salv_nodes,
        node           TYPE REF TO cl_salv_node,
        text           TYPE        lvc_value,
        ls_pm0001_tree TYPE        zspm0001_tree,
        image1         TYPE        salv_de_tree_image.


  nodes = gr_tree->get_nodes( ).
  ls_pm0001_tree-tipo = gc_tiporaiz.

  TRY.
      text = text-hd2.
      image1 = icon_inspection_lot.

      CALL METHOD nodes->add_node
        EXPORTING
          related_node   = ''
          relationship   = if_salv_c_node_relation=>last_child
          data_row       = ls_pm0001_tree
          collapsed_icon = image1
          expanded_icon  = image1
          text           = text
        RECEIVING
          node           = node.

      p_lv_root_key = node->get_key( ).
    CATCH cx_salv_msg.
  ENDTRY.

ENDFORM.                    " ADD_ROOT_LINE
*&---------------------------------------------------------------------*
*&      Form  ADD_TRO_LINE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_TRO  text
*      -->P_LV_CTRO_KEY  text
*----------------------------------------------------------------------*
FORM add_tro_line  USING    p_tree TYPE REF TO cl_salv_tree
                            p_ls_tro TYPE zspm0002_alv
                            p_lv_ctro_key TYPE lvc_nkey.

  DATA: nodes          TYPE REF TO cl_salv_nodes,
        node           TYPE REF TO cl_salv_node,
        text           TYPE        lvc_value,
        ls_pm0001_tree TYPE        zspm0001_tree,
        image1         TYPE        salv_de_tree_image.

  nodes = p_tree->get_nodes( ).

  ls_pm0001_tree-descriptivo = p_ls_tro-eqktx.
  ls_pm0001_tree-tipo = gc_tipotro.
  WRITE p_ls_tro-equnr TO ls_pm0001_tree-clave.

  TRY.
      text = ls_pm0001_tree-descriptivo.
      image1 = icon_ps_wbs_element.

      CALL METHOD nodes->add_node
        EXPORTING
          related_node   = p_lv_ctro_key
          relationship   = if_salv_c_node_relation=>last_child
          data_row       = ls_pm0001_tree
          collapsed_icon = image1
          expanded_icon  = image1
          text           = text
        RECEIVING
          node           = node.

    CATCH cx_salv_msg.
  ENDTRY.

ENDFORM.                    " ADD_TRO_LINE
*&---------------------------------------------------------------------*
*&      Form  ADD_JCLI_LINE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_TRO  text
*      -->P_LV_CTRO_KEY  text
*      <--P_LV_JCLI_KEY  text
*----------------------------------------------------------------------*
FORM add_jcli_line  USING    p_tree TYPE REF TO cl_salv_tree
                             p_ls_cli TYPE zspm0003_alv
                             p_lv_ctro_key TYPE lvc_nkey
                    CHANGING p_lv_jcli_key TYPE lvc_nkey.

  DATA: nodes          TYPE REF TO cl_salv_nodes,
        node           TYPE REF TO cl_salv_node,
        text           TYPE        lvc_value,
        ls_pm0001_tree TYPE        zspm0001_tree,
        image1         TYPE        salv_de_tree_image.

  nodes = p_tree->get_nodes( ).

  ls_pm0001_tree-descriptivo = p_ls_cli-juektx.
  ls_pm0001_tree-tipo = gc_tipojcli.
  WRITE p_ls_cli-juegocli TO ls_pm0001_tree-clave.

  TRY.
      text = ls_pm0001_tree-descriptivo.
      image1 = icon_ps_network_header."'@EC@'.

      CALL METHOD nodes->add_node
        EXPORTING
          related_node   = p_lv_ctro_key
          relationship   = if_salv_c_node_relation=>last_child
          data_row       = ls_pm0001_tree
          collapsed_icon = image1
          expanded_icon  = image1
          text           = text
        RECEIVING
          node           = node.

      p_lv_jcli_key = node->get_key( ).

    CATCH cx_salv_msg.
  ENDTRY.

ENDFORM.                    " ADD_JCLI_LINE
*&---------------------------------------------------------------------*
*&      Form  ADD_CLI_LINE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_CLI  text
*      -->P_LV_JCLI_KEY  text
*----------------------------------------------------------------------*
FORM add_cli_line  USING    p_tree TYPE REF TO cl_salv_tree
                            p_ls_cli TYPE zspm0004_alv
                            p_lv_jcli_key TYPE lvc_nkey.

  DATA: nodes          TYPE REF TO cl_salv_nodes,
        node           TYPE REF TO cl_salv_node,
        text           TYPE        lvc_value,
        ls_pm0001_tree TYPE        zspm0001_tree,
        image1         TYPE        salv_de_tree_image.

  nodes = p_tree->get_nodes( ).

  ls_pm0001_tree-descriptivo = p_ls_cli-eqktx.
  ls_pm0001_tree-tipo = gc_tipocli.
  WRITE p_ls_cli-equnr TO ls_pm0001_tree-clave.

  TRY.
      text = ls_pm0001_tree-descriptivo.
      image1 = icon_ps_network_activity.

      CALL METHOD nodes->add_node
        EXPORTING
          related_node   = p_lv_jcli_key
          relationship   = if_salv_c_node_relation=>last_child
          data_row       = ls_pm0001_tree
          collapsed_icon = image1
          expanded_icon  = image1
          text           = text
        RECEIVING
          node           = node.

    CATCH cx_salv_msg.
  ENDTRY.

ENDFORM.                    " ADD_CLI_LINE
*&---------------------------------------------------------------------*
*&      Form  CREATE_DOCKING
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_docking .
  DATA: lr_functions TYPE REF TO cl_salv_functions_tree.
  DATA: lr_columns TYPE REF TO cl_salv_columns.
  DATA: lr_events TYPE REF TO cl_salv_events_tree.

  CHECK docking_cont IS INITIAL.
  CREATE OBJECT docking_cont
    EXPORTING
      side      = cl_gui_docking_container=>dock_at_left
      extension = 400
      caption   = text-006
    EXCEPTIONS
      OTHERS    = 1.

  IF NOT sy-subrc IS INITIAL.
    MESSAGE a000(tree_control_msg).
  ENDIF.

* Create splitter container
  CREATE OBJECT splitter_container
    EXPORTING
      parent        = docking_cont
      sash_position = 60
      orientation   = 0
    EXCEPTIONS
      OTHERS        = 1.
  IF NOT sy-subrc IS INITIAL.
    MESSAGE a000(tree_control_msg).
  ENDIF.

* Assign (structure) tree and worklist (tree) container
*  CREATE OBJECT sp_tree_container
*    EXPORTING
*      rows    = 2
*      columns = 1
*      metric  = 'DYNP'
*      parent  = splitter_container->top_left_container.
*  CALL METHOD sp_tree_container->get_container
*    EXPORTING
*      row       = 1
*      column    = 1
*    RECEIVING
*      container = tb_tree_container.
*  CALL METHOD sp_tree_container->get_container
*    EXPORTING
*      row       = 2
*      column    = 1
*    RECEIVING
*      container = tree_container.
*  CALL METHOD sp_tree_container->set_row_sash
*    EXPORTING
*      id    = 1
*      type  = cl_gui_splitter_container=>type_movable
*      value = cl_gui_splitter_container=>false.
*  CALL METHOD sp_tree_container->set_border
*    EXPORTING
*      border = space.               "gfw_false.
*  CALL METHOD sp_tree_container->set_row_mode
*    EXPORTING
*      mode = cl_gui_splitter_container=>mode_absolute.
**  IF g_options-show_toolbar = c_charx.
*  CALL METHOD sp_tree_container->set_row_height
*    EXPORTING
*      id     = 1
*      height = 21. "c_tb_height.
*
**   tree_container->set_height( 300 ).

  tree_container = splitter_container->top_left_container.
  worklist_container = splitter_container->bottom_right_container.

* Construir árbol de jerarquía
  IF gr_tree IS INITIAL.
    TRY.
        cl_salv_tree=>factory(
          EXPORTING
            r_container  = tree_container
          IMPORTING
            r_salv_tree = gr_tree
          CHANGING
            t_table      = gt_tree ).
      CATCH cx_salv_no_new_data_allowed cx_salv_error.
        EXIT.
    ENDTRY.

    PERFORM create_tree.

    lr_functions = gr_tree->get_functions( ).
    lr_functions->set_all( gc_true ).

    lr_columns = gr_tree->get_columns( ).
    lr_functions->set_group_print( abap_false ).
    lr_functions->set_group_aggregation( abap_false ).
    lr_functions->set_group_layout( abap_false ).

    lr_events = gr_tree->get_event( ).
    CREATE OBJECT gr_tree_events.
    SET HANDLER gr_tree_events->on_double_click FOR lr_events.

    PERFORM set_columns_technical_tree USING lr_columns.

    gr_tree->display( ).
  ENDIF.

* Construir árbol de objetos sin asignar

  IF gr_worklist IS INITIAL.
    TRY.
        cl_salv_tree=>factory(
          EXPORTING
            r_container  = worklist_container
          IMPORTING
            r_salv_tree = gr_worklist
          CHANGING
            t_table      = gt_worklist ).
      CATCH cx_salv_no_new_data_allowed cx_salv_error.
        EXIT.
    ENDTRY.

    PERFORM create_worklist.

    lr_functions = gr_worklist->get_functions( ).
    lr_functions->set_all( gc_true ).
    lr_functions->set_group_print( abap_false ).
    lr_functions->set_group_aggregation( abap_false ).
    lr_functions->set_group_layout( abap_false ).

    lr_columns = gr_worklist->get_columns( ).

    PERFORM set_columns_technical_tree USING lr_columns.

    gr_worklist->display( ).
  ENDIF.
ENDFORM.                    " CREATE_DOCKING
*&---------------------------------------------------------------------*
*&      Form  CREATE_WORKLIST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_worklist .

  DATA: lv_root_key TYPE        lvc_nkey,
        lv_ctro_key TYPE        lvc_nkey,
        lv_jcli_key TYPE        lvc_nkey,
        nodes       TYPE REF TO cl_salv_nodes.

  PERFORM build_worklist_header.

*   Añadir Juegos de clichés sueltos (solo si no tienen hijos)
  LOOP AT gt_pm0003 INTO DATA(ls_jcli) WHERE copiatro IS INITIAL.
    READ TABLE gt_pm0004 WITH KEY juegocli = ls_jcli-juegocli TRANSPORTING NO FIELDS.
    IF sy-subrc <> 0.
      PERFORM add_jcli_line USING     gr_worklist
                                    ls_jcli
                                    ''
                          CHANGING  lv_jcli_key.
    ENDIF.
*
*
*    LOOP AT gt_pm0004 INTO DATA(ls_cli) WHERE juegocli = ls_jcli-juegocli.
*      PERFORM add_cli_line USING  gr_worklist
*                                  ls_cli
*                                  lv_jcli_key.
*    ENDLOOP.
  ENDLOOP.

*   Añadir troqueles sueltos
  LOOP AT gt_pm0002 INTO DATA(ls_tro) WHERE copiatro IS INITIAL.
    PERFORM add_tro_line USING    gr_worklist
                                  ls_tro
                                  ''.
  ENDLOOP.

*   Añadir clichés sueltos
  LOOP AT gt_pm0004 INTO DATA(ls_cli) WHERE juegocli IS INITIAL.
    PERFORM add_cli_line USING  gr_worklist
                                ls_cli
                                ''.
  ENDLOOP.

  nodes = gr_worklist->get_nodes( ).
  nodes->expand_all( ).

ENDFORM.                    " CREATE_WORKLIST
*&---------------------------------------------------------------------*
*&      Form  STATUS_1201
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_1201 .
  DATA: lv_nomod   TYPE xfeld,
        lv_matasig TYPE xfeld.
  IF gs_pm0001-copiatro IS NOT INITIAL.
    PERFORM copiatro_modificable USING gs_pm0001-copiatro
                                CHANGING lv_nomod.

*   Comprobar si tiene materiales asignados
    PERFORM materiales_asignados USING gs_pm0001-copiatro
                                       ''
                                 CHANGING lv_matasig.
  ENDIF.

  MOVE-CORRESPONDING gs_pm0001 TO zspm0001_alv.

  IF lv_nomod = abap_true OR lv_matasig = abap_true. "Desactivar campos no editables
    LOOP AT SCREEN.
      IF screen-group1 = 'CRE'.
        screen-input = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " STATUS_1201
*&---------------------------------------------------------------------*
*&      Form  STATUS_1202
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_1202 .
  MOVE-CORRESPONDING gs_pm0002 TO zspm0002_alv.
  zspm0002_alv-equnrs = 'P'. "DBM
ENDFORM.                    " STATUS_1202
*&---------------------------------------------------------------------*
*&      Form  STATUS_1203
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_1203 .
  CLEAR gv_nuevo_tro_princ.
ENDFORM.                    " STATUS_1203

*&---------------------------------------------------------------------*
*&      Form  STATUS_1301
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_1301 .
  DATA: lv_nomod   TYPE xfeld,
        lv_matasig TYPE xfeld.

  IF gs_pm0003-juegocli IS NOT INITIAL.
    PERFORM juegocli_modificable  USING gs_pm0003-juegocli
                                  CHANGING lv_nomod.

*   Comprobar si tiene materiales asignados
    PERFORM materiales_asignados USING gs_pm0003-copiatro
                                       gs_pm0003-juegocli
                                 CHANGING lv_matasig.

    LOOP AT SCREEN.
      IF screen-group2 = 'NOE'. "Campos no editables nunca
        screen-input = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.

  ENDIF.

  MOVE-CORRESPONDING gs_pm0003 TO zspm0003_alv.

  IF gs_pm0003-copiatro IS NOT INITIAL OR lv_nomod = abap_true OR lv_matasig = abap_true. "Desactivar campos no editables (cuando está asignado o tiene hijos)
    LOOP AT SCREEN.
      IF screen-group1 = 'CRE'.
        screen-input = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " STATUS_1201

*&---------------------------------------------------------------------*
*&      Form  STATUS_1302
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_1302 .
  MOVE-CORRESPONDING gs_pm0003 TO zspm0003_alv.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  STATUS_1402
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_1402 .
  MOVE-CORRESPONDING gs_pm0004 TO zspm0004_alv.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  STATUS_2001
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM status_2001 .
* Mostrar ALV clásico
  DATA: lt_editable   TYPE stty_sr_string_range,
        ls_edit       TYPE sstr_sr_string_range,
        lt_autovalues TYPE stty_sr_string_range,
        ls_auto       TYPE sstr_sr_string_range,
        ls_pm0008     TYPE zspm0008_alv,
        lt_celltab    TYPE lvc_t_styl,
        ls_celltab    TYPE lvc_s_styl,
        l_mode        TYPE raw4,
        lt_cols_edit  TYPE wb2_char30.

  IF g_edit_mode = abap_true.
    ls_edit-option = 'EQ'.
    ls_edit-sign = 'I'.

    ls_edit-low = 'AGRU'.
    APPEND ls_edit TO lt_editable.
    APPEND ls_edit-low TO lt_cols_edit.
    ls_edit-low = 'MATNRZPLP'.
    APPEND ls_edit TO lt_editable.
    APPEND ls_edit-low TO lt_cols_edit.
    ls_edit-low = 'POSGOL'.
    APPEND ls_edit TO lt_editable.
    APPEND ls_edit-low TO lt_cols_edit.
    ls_edit-low = 'MATNRZPMP'.
    APPEND ls_edit TO lt_editable.
    APPEND ls_edit-low TO lt_cols_edit.
  ELSE.
    LOOP AT SCREEN.
      IF screen-name = 'B_GUARDAR'.
        screen-invisible = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

  CLEAR: lt_celltab.
  IF gt_pm0008 IS INITIAL. "Añadir la primera fila por defecto
    gv_pm0008_initial = abap_true.
  ELSE.
    PERFORM fill_celltab USING 'RO'
                        lt_cols_edit
                        CHANGING lt_celltab.
    LOOP AT gt_pm0008 ASSIGNING FIELD-SYMBOL(<fs_pm0008>).
      <fs_pm0008>-celltab = lt_celltab.
      IF <fs_pm0008>-juegocli IS NOT INITIAL AND gs_pm0001 IS NOT INITIAL.
        ls_celltab-fieldname = ' '.
        ls_celltab-style = cl_gui_alv_grid=>mc_style_no_delete_row. " row not deleted
        INSERT ls_celltab INTO TABLE <fs_pm0008>-celltab.
      ENDIF.



    ENDLOOP.
    CLEAR: gv_pm0008_initial.
  ENDIF.

  PERFORM f_mostrar_alv USING 'ZSPM0008_ALV'
                              gt_pm0008
                              'GC_CUSTOM_CONTAINER_MAT'
                              gr_events_2001
                              'LCL_HANDLE_EVENTS_2001'
                              gr_custom_container_mat
                              '5000'
                              lt_editable
                              lt_autovalues
                              gv_pm0008_initial
                              'CELLTAB'
                        CHANGING g_grid_mat.

  IF gs_pm0001 IS NOT INITIAL.
    gr_events_2001->set_copiatro( gs_pm0001-copiatro ).
    gr_events_2001->set_juegocli( '' ).
  ELSEIF gs_pm0003 IS NOT INITIAL.
    gr_events_2001->set_copiatro( gs_pm0003-copiatro ).
    gr_events_2001->set_juegocli( gs_pm0003-juegocli ).
  ENDIF.

*                        CHANGING g_grid_mat.
ENDFORM.                    " STATUS_2001

FORM fill_celltab USING VALUE(p_mode)
                        pt_cols TYPE wb2_char30
                  CHANGING pt_celltab TYPE lvc_t_styl.
  DATA: ls_celltab TYPE lvc_s_styl,
        l_mode     TYPE raw4,
        lv_colname TYPE string.
* This forms sets the style of columns 'PRICE', FLDATE and PLANETYPE
* editable

  IF p_mode EQ 'RW'.
    l_mode = cl_gui_alv_grid=>mc_style_enabled.
  ELSE.                                "p_mode eq 'RO'
    l_mode = cl_gui_alv_grid=>mc_style_disabled.
  ENDIF.

  LOOP AT pt_cols INTO DATA(ls_col).
    ls_celltab-fieldname = ls_col.
    ls_celltab-style = l_mode + cl_gui_alv_grid=>mc_style_no_delete_row.
*    ls_celltab-style = cl_gui_alv_grid=>mc_style_no_delete_row.
    INSERT ls_celltab INTO TABLE pt_celltab.
  ENDLOOP.

ENDFORM.                               " FILL_CELLTAB
