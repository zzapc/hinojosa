*&---------------------------------------------------------------------*
*&  Include           ZRPM0001_CLS
*&---------------------------------------------------------------------*
*

*---------------------------------------------------------------------*
*       CLASS lsalv_cl_handle_events DEFINITION
*---------------------------------------------------------------------*
* §4.1 define a local class for handling events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lsalv_cl_handle_events DEFINITION.
  PUBLIC SECTION.
    METHODS:
      on_double_click FOR EVENT double_click OF cl_salv_events_tree
        IMPORTING node_key columnname,
      on_user_command FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function.
ENDCLASS.                    "lcl_handle_events DEFINITION

*---------------------------------------------------------------------*
*       CLASS lsalv_cl_handle_events IMPLEMENTATION
*---------------------------------------------------------------------*
* §4.2 implement the events for handling the events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lsalv_cl_handle_events IMPLEMENTATION.
  METHOD on_double_click.
    PERFORM filter_by_node USING node_key.
  ENDMETHOD.                    "on_double_click

  METHOD on_user_command.
*    perform handle_user_command using e_salv_function.
  ENDMETHOD.                    "on_user_command
ENDCLASS.                    "lcl_handle_events IMPLEMENTATION


*&---------------------------------------------------------------------*
*&       Class lcl_handle_events
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_handle_events DEFINITION ABSTRACT.

* PUBLICO: Los métodos de los eventos
  PUBLIC SECTION.

*    METHODS handle_toolbar ABSTRACT
*                  FOR EVENT toolbar OF cl_gui_alv_grid
*      IMPORTING e_object e_interactive.
*
    METHODS:
      handle_user_command ABSTRACT FOR EVENT user_command OF cl_gui_alv_grid
        IMPORTING e_ucomm,
      handle_changed_sel  ABSTRACT FOR EVENT delayed_changed_sel_callback OF cl_gui_alv_grid,
      handle_data_changed ABSTRACT FOR EVENT data_changed OF cl_gui_alv_grid
        IMPORTING er_data_changed.


*    METHODS handle_hotspot_click ABSTRACT
*                  FOR EVENT hotspot_click OF cl_gui_alv_grid
*      IMPORTING e_row_id e_column_id es_row_no .

ENDCLASS.                    "lcl_application DEFINITION

*&---------------------------------------------------------------------*
*&       Class (Implementation)  lcl_handle_events
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
*CLASS lcl_handle_events IMPLEMENTATION.
*
*ENDCLASS.                    "lcl_application IMPLEMENTATION

*---------------------------------------------------------------------*
*       CLASS lcl_handle_events_0201 DEFINITION
*---------------------------------------------------------------------*
* §5.1 define a local class for handling events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lcl_handle_events_0201 DEFINITION INHERITING FROM lcl_handle_events.
  PUBLIC SECTION.
*    TYPES:
*      lt_zpm0008_alv_keys TYPE zttpm0008_alv_key,
*      lt_zpm0008_alv      TYPE zttpm0008_alv.

    METHODS:
      handle_user_command REDEFINITION,
      handle_changed_sel REDEFINITION,
      handle_data_changed REDEFINITION.



ENDCLASS.                    "lcl_handle_events_0201 DEFINITION

*---------------------------------------------------------------------*
*       CLASS lcl_handle_events_0201 IMPLEMENTATION
*---------------------------------------------------------------------*
* §5.2 implement the events for handling the events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lcl_handle_events_0201 IMPLEMENTATION.
  METHOD handle_user_command.
    CASE e_ucomm.
      WHEN 'B_GUARDAR'.
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.                    "handle_user_command
  METHOD handle_changed_sel.

  ENDMETHOD.
  METHOD handle_data_changed.

  ENDMETHOD.




ENDCLASS.                    "lcl_handle_events_0201 IMPLEMENTATION

*---------------------------------------------------------------------*
*       CLASS lcl_handle_events_2001 DEFINITION
*---------------------------------------------------------------------*
* §5.1 define a local class for handling events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lcl_handle_events_2001 DEFINITION." INHERITING FROM lcl_handle_events.
  PUBLIC SECTION.
*    METHODS:
*      handle_user_command REDEFINITION,
*      handle_changed_sel REDEFINITION,
*      handle_data_changed REDEFINITION.
    METHODS:
      handle_user_command FOR EVENT user_command OF cl_gui_alv_grid
        IMPORTING e_ucomm,
      handle_changed_sel  FOR EVENT delayed_changed_sel_callback OF cl_gui_alv_grid,
      handle_data_changed
                    FOR EVENT data_changed OF cl_gui_alv_grid
        IMPORTING er_data_changed.
*      handle_data_changed_finished
*                    FOR EVENT data_changed_finished OF cl_gui_alv_grid
*        IMPORTING er_data_changed.

    METHODS:
      get_inserted_rows
        EXPORTING
          inserted_rows TYPE zttpm0008_alv_key.

    METHODS:
      get_deleted_rows
        EXPORTING
          deleted_rows TYPE zttpm0008_alv.

    METHODS:
      refresh_delta_tables.

    METHODS: set_table_is_initial.

    METHODS: set_table_is_not_initial.

    METHODS: table_is_initial
      RETURNING VALUE(initial) TYPE char01.

    METHODS: set_copiatro
      IMPORTING p_copiatro TYPE zcopiatro.

    METHODS: get_copiatro
      RETURNING VALUE(p_copiatro) TYPE zcopiatro.

    METHODS: set_juegocli
      IMPORTING p_juegocli TYPE zjuegocli.

    METHODS: get_juegocli
      RETURNING VALUE(p_juegocli) TYPE zjuegocli.

  PRIVATE SECTION.

* §4.Define internal tables to remember inserted and deleted lines,
*    thus the delta between input made after the last saving.

    DATA: inserted_rows TYPE zttpm0008_alv_key,
          deleted_rows  TYPE zttpm0008_alv,
          copiatro      TYPE zcopiatro,
          juegocli      TYPE zjuegocli.


* This flag is set if any error occured in one of the
* following methods:
    DATA: error_in_data TYPE c.

* This flag signals that no records were read for the flight
* table initially:
    DATA: initial_table TYPE c.

    METHODS:
      fill_default_cols
        IMPORTING
          pr_data_changed TYPE REF TO cl_alv_changed_data_protocol.

    METHODS:
      check_double_entries
        IMPORTING
          pr_data_changed TYPE REF TO cl_alv_changed_data_protocol.

    METHODS:
      update_delta_tables
        IMPORTING
          pr_data_changed TYPE REF TO cl_alv_changed_data_protocol.

    METHODS:
      perform_semantic_checks
        IMPORTING
          pr_data_changed TYPE REF TO cl_alv_changed_data_protocol.

    METHODS:
      get_cell_values
        IMPORTING
          row_id          TYPE int4
          pr_data_changed TYPE REF TO cl_alv_changed_data_protocol
        EXPORTING
          key             TYPE zspm0008_alv_key.
ENDCLASS.                    "lcl_handle_events_0201 DEFINITION

*---------------------------------------------------------------------*
*       CLASS lcl_handle_events_2001 IMPLEMENTATION
*---------------------------------------------------------------------*
* §5.2 implement the events for handling the events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lcl_handle_events_2001 IMPLEMENTATION.
  METHOD handle_changed_sel.

  ENDMETHOD.                    "handle_changed_sel

  METHOD handle_user_command.

  ENDMETHOD.                    "handle_user_command


  METHOD set_copiatro.
    copiatro = p_copiatro.
  ENDMETHOD.                    "set_copiatro
  METHOD get_copiatro.
    p_copiatro = copiatro.
  ENDMETHOD.                    "get_copiatro
  METHOD set_juegocli.
    juegocli = p_juegocli.
  ENDMETHOD.                    "set_juegocli
  METHOD get_juegocli.
    p_juegocli = juegocli.
  ENDMETHOD.                    "get_juegocli

  METHOD fill_default_cols.

    DATA: ls_pm0008 TYPE zspm0008_alv.
    FIELD-SYMBOLS: <fs_mod> TYPE table.
    LOOP AT pr_data_changed->mt_inserted_rows INTO DATA(dl_ins_row).
      ASSIGN pr_data_changed->mp_mod_rows->* TO <fs_mod>.
      LOOP AT <fs_mod> INTO ls_pm0008.
        IF copiatro IS NOT INITIAL AND ls_pm0008-copiatro IS INITIAL.
          ls_pm0008-copiatro = copiatro.
        ENDIF.
        IF juegocli IS NOT INITIAL AND ls_pm0008-juegocli IS INITIAL.
          ls_pm0008-juegocli = juegocli.
        ENDIF.
        MODIFY <fs_mod> FROM ls_pm0008 INDEX sy-tabix.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.                    "handle_user_command

  METHOD handle_data_changed.
*
    DATA: ls_good TYPE lvc_s_modi,
          ls_new  TYPE lvc_s_moce.

    error_in_data = space.
    CALL METHOD fill_default_cols( er_data_changed ).


* check if there exist double entries
    CALL METHOD check_double_entries( er_data_changed ).

* remember new or deleted lines for saving
    CALL METHOD update_delta_tables( er_data_changed ).

* check mt_good_cells semantically
    CALL METHOD perform_semantic_checks( er_data_changed ).

    IF error_in_data = 'X'.
      CALL METHOD er_data_changed->display_protocol.
    ENDIF.

  ENDMETHOD.

*-----------------------------------------------------------------------
  METHOD check_double_entries.
    DATA: lt_good_cells TYPE zttpm0008_alv_key,
          ls_good_new   TYPE zspm0008_alv_key,
          ls_good       TYPE lvc_s_modi,
          ls_good_sec   TYPE lvc_s_modi,
          ls_key        TYPE zspm0008_alv_key,
          ls_smaterial  TYPE zspm0008_alv,
          lv_value      TYPE string,
          lv_matnrzpmp  TYPE zspm0008_alv-matnrzpmp,
          lv_copiatro   TYPE zspm0008_alv-copiatro,
          lv_matnrzplp  TYPE zspm0008_alv-matnrzplp,
          lv_juegocli   TYPE zspm0008_alv-juegocli,
          l_del_row     TYPE lvc_s_moce,
          ls_outtab     TYPE zspm0008_alv,
          ls_mod_row    TYPE zspm0008_alv,
          l_reentered   TYPE c.

    FIELD-SYMBOLS: <fs_mod> TYPE zttpm0008_alv.

    LOOP AT pr_data_changed->mt_good_cells INTO ls_good.
      CASE ls_good-fieldname.
        WHEN 'MATNRZPMP' OR 'MATNRZPLP'.
          CALL METHOD pr_data_changed->get_cell_value
            EXPORTING
              i_row_id    = ls_good-row_id
              i_fieldname = ls_good-fieldname
            IMPORTING
              e_value     = lv_value.

          ASSIGN pr_data_changed->mp_mod_rows->* TO <fs_mod>.
          READ TABLE <fs_mod> INTO ls_mod_row INDEX ls_good-tabix.

          IF lv_value IS NOT INITIAL.
            READ TABLE pr_data_changed->mt_good_cells INTO ls_good_sec WITH KEY tabix = ls_good-tabix fieldname = 'COPIATRO'.
            IF sy-subrc = 0.
              CALL METHOD pr_data_changed->get_cell_value
                EXPORTING
                  i_row_id    = ls_good_sec-row_id
                  i_fieldname = ls_good_sec-fieldname
                IMPORTING
                  e_value     = lv_copiatro.
            ELSE.
              lv_copiatro = ls_mod_row-copiatro.
            ENDIF.

            READ TABLE pr_data_changed->mt_good_cells INTO ls_good_sec WITH KEY tabix = ls_good-tabix fieldname = 'MATNRZPMP'.
            IF sy-subrc = 0.
              CALL METHOD pr_data_changed->get_cell_value
                EXPORTING
                  i_row_id    = ls_good_sec-row_id
                  i_fieldname = ls_good_sec-fieldname
                IMPORTING
                  e_value     = lv_matnrzpmp.
            ELSE.
              lv_matnrzpmp = ls_mod_row-matnrzpmp.
            ENDIF.

            READ TABLE pr_data_changed->mt_good_cells INTO ls_good_sec WITH KEY tabix = ls_good-tabix fieldname = 'MATNRZPLP'.
            IF sy-subrc = 0.
              CALL METHOD pr_data_changed->get_cell_value
                EXPORTING
                  i_row_id    = ls_good_sec-row_id
                  i_fieldname = ls_good_sec-fieldname
                IMPORTING
                  e_value     = lv_matnrzplp.
            ELSE.
              lv_matnrzplp = ls_mod_row-matnrzplp.
            ENDIF.

            READ TABLE pr_data_changed->mt_good_cells INTO ls_good_sec WITH KEY tabix = ls_good-tabix fieldname = 'JUEGOCLI'.
            IF sy-subrc = 0.
              CALL METHOD pr_data_changed->get_cell_value
                EXPORTING
                  i_row_id    = ls_good_sec-row_id
                  i_fieldname = ls_good_sec-fieldname
                IMPORTING
                  e_value     = lv_juegocli.
            ELSE.
              lv_juegocli = ls_mod_row-juegocli.
            ENDIF.

            IF ( lv_copiatro IS NOT INITIAL OR lv_juegocli IS NOT INITIAL ) AND lv_matnrzpmp IS NOT INITIAL AND lv_matnrzplp IS NOT INITIAL.
              READ TABLE lt_good_cells WITH KEY
                              copiatro = lv_copiatro
                              matnrzplp = lv_matnrzplp
                              juegocli = lv_juegocli
                              matnrzpmp = lv_matnrzpmp
                              TRANSPORTING NO FIELDS.
*
              IF sy-subrc = 0."Existe un registro con los mismos parámetros clave
                CALL METHOD pr_data_changed->add_protocol_entry
                  EXPORTING
                    i_msgid     = 'ZPP'
                    i_msgno     = '208' "Está intentando insertar un registro duplicado
                    i_msgty     = 'E'
                    i_fieldname = ls_good-fieldname
                    i_row_id    = ls_good-row_id.

                error_in_data = 'X'.
              ELSE.
                ls_good_new-copiatro = lv_copiatro.
                ls_good_new-matnrzplp = lv_matnrzplp.
                ls_good_new-juegocli = lv_juegocli.
                ls_good_new-matnrzpmp = lv_matnrzpmp.
                ls_good_new-row_id = ls_good-row_id.
                APPEND ls_good_new TO lt_good_cells.
              ENDIF.
            ENDIF.
          ENDIF.
      ENDCASE.
    ENDLOOP.

    LOOP AT lt_good_cells INTO ls_good_new.
      READ TABLE gt_pm0008 WITH KEY
                    copiatro = ls_good_new-copiatro
                    matnrzplp = ls_good_new-matnrzplp
                    juegocli = ls_good_new-juegocli
                    matnrzpmp = ls_good_new-matnrzpmp
                    TRANSPORTING NO FIELDS.

      IF sy-subrc = 0.
        l_reentered = space.
        LOOP AT pr_data_changed->mt_deleted_rows INTO l_del_row.
          READ TABLE gt_pm0008 INTO ls_outtab INDEX l_del_row-row_id.
          IF sy-subrc NE 0.
            MESSAGE i208(zpp). "Está intentando insertar un registro duplicado
          ELSEIF
                    ls_outtab-copiatro EQ ls_good_new-copiatro
                AND ls_outtab-matnrzplp EQ ls_good_new-matnrzplp
                AND ls_outtab-juegocli EQ ls_good_new-juegocli
                AND ls_outtab-matnrzpmp EQ ls_good_new-matnrzpmp.
            l_reentered = 'X'.
          ENDIF.
        ENDLOOP.

        IF l_reentered NE 'X'.
          CALL METHOD pr_data_changed->add_protocol_entry
            EXPORTING
              i_msgid     = 'ZPP'
              i_msgno     = '208' "Está intentando insertar un registro duplicado
              i_msgty     = 'E'
              i_fieldname = 'MATNRZPMP'
              i_row_id    = ls_good_new-row_id.

          error_in_data = 'X'.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
*-------------------------------------------------------
  METHOD update_delta_tables.
    DATA: l_ins_row    TYPE lvc_s_moce,
          l_del_row    TYPE lvc_s_moce,
          ls_key       TYPE zspm0008_alv_key,
          ls_smaterial TYPE zspm0008_alv,
          ls_outtab    TYPE zspm0008_alv.

    LOOP AT pr_data_changed->mt_deleted_rows INTO l_del_row.
      READ TABLE gt_pm0008 INTO ls_outtab INDEX l_del_row-row_id.
      IF sy-subrc NE 0.
        MESSAGE i202(zpp)."Fehler beim Löschen
      ELSE.
        MOVE-CORRESPONDING ls_outtab TO ls_smaterial.
        APPEND ls_smaterial TO deleted_rows.
        DELETE me->inserted_rows
             WHERE copiatro = ls_outtab-copiatro AND
                   matnrzplp = ls_outtab-matnrzplp AND
                   juegocli = ls_outtab-juegocli AND
                   matnrzpmp = ls_outtab-matnrzpmp.
      ENDIF.
    ENDLOOP.

    IF me->table_is_initial( ) EQ 'X'.
      CALL METHOD get_cell_values
        EXPORTING
          row_id          = 1
          pr_data_changed = pr_data_changed
        IMPORTING
          key             = ls_key.

      APPEND ls_key TO inserted_rows.
      CALL METHOD me->set_table_is_not_initial.
    ENDIF.

    LOOP AT pr_data_changed->mt_inserted_rows INTO l_ins_row.
      CALL METHOD get_cell_values
        EXPORTING
          row_id          = l_ins_row-row_id
          pr_data_changed = pr_data_changed
        IMPORTING
          key             = ls_key.
      APPEND ls_key TO inserted_rows.
    ENDLOOP.

  ENDMETHOD.
*---------------------------------------------------------
  METHOD get_cell_values.
** COPIATRO
    CALL METHOD pr_data_changed->get_cell_value
      EXPORTING
        i_row_id    = row_id
        i_fieldname = 'COPIATRO'
      IMPORTING
        e_value     = key-copiatro.
*
    IF sy-subrc NE 0.
      MESSAGE i203(zpp).  "Error interno al insertar una línea
    ENDIF.
** MATNRZPMP
    CALL METHOD pr_data_changed->get_cell_value
      EXPORTING
        i_row_id    = row_id
        i_fieldname = 'MATNRZPMP'
      IMPORTING
        e_value     = key-matnrzpmp.

    IF sy-subrc NE 0.
      MESSAGE i203(zpp).  "Error interno al insertar una línea
    ENDIF.
** JUEGOCLI
    CALL METHOD pr_data_changed->get_cell_value
      EXPORTING
        i_row_id    = row_id
        i_fieldname = 'JUEGOCLI'
      IMPORTING
        e_value     = key-juegocli.

    IF sy-subrc NE 0.
      MESSAGE i203(zpp).  "Error interno al insertar una línea
    ENDIF.
** MATNRZPLP
    CALL METHOD pr_data_changed->get_cell_value
      EXPORTING
        i_row_id    = row_id
        i_fieldname = 'MATNRZPLP'
      IMPORTING
        e_value     = key-matnrzplp.

    IF sy-subrc NE 0.
      MESSAGE i203(zpp).  "Error interno al insertar una línea
    ENDIF.
  ENDMETHOD.

*---------------------------------------------------------
  METHOD perform_semantic_checks.
    DATA: ls_good           TYPE lvc_s_modi,
          ls_good_sec       TYPE lvc_s_modi,
          lv_matnrzpmp      TYPE zmatnrzpmp,
          lv_matnrzplp      TYPE zmatnrzplp,
          lv_copiatro       TYPE zcopiatro,
          lv_agrupador      TYPE zagru,
          lv_zzcajlgext     TYPE zcajlgext,
          lv_zzcajanext     TYPE zcajanext,
          lv_juegocli       TYPE zjuegocli,
          lv_zzplalgntplp   TYPE zplalgnt,
          lv_zzplaanntplp   TYPE zplaannt,
          lv_zzcajalext     TYPE zcajalext,
          lv_pllargonet     TYPE zplalgnt,
          lv_largo_inf      TYPE zplalgnt,
          lv_largo_sup      TYPE zplalgnt,
          lv_ancho_inf      TYPE zplaannt,
          lv_ancho_sup      TYPE zplaannt,
          lv_matkl          TYPE mara-matkl,
          ls_pm0008         TYPE zspm0008_alv,
          lv_posgol         TYPE int4, "zposgol,
          lv_posgol_tro     TYPE zpzagolt,
          lv_posgol_tro_int TYPE int4, "zpzagolt,
          lv_posgol_total   TYPE int4, "zposgol,
          lv_planchonet     TYPE zplaannt,
          lv_werks          TYPE swerk,
          ls_ztpm0013       TYPE ztpm0013.
*
    LOOP AT pr_data_changed->mt_good_cells INTO ls_good.
      CLEAR: lv_posgol_total.
      CASE ls_good-fieldname.
        WHEN 'POSGOL'.
          CALL METHOD pr_data_changed->get_cell_value
            EXPORTING
              i_row_id    = ls_good-row_id
              i_fieldname = ls_good-fieldname
            IMPORTING
              e_value     = lv_posgol.
          READ TABLE gt_pm0008 INTO ls_pm0008 INDEX ls_good-row_id.
          lv_copiatro = ls_pm0008-copiatro.
          lv_agrupador = ls_pm0008-agru.
          lv_matnrzplp = ls_pm0008-matnrzplp.

          IF lv_copiatro IS NOT INITIAL.
            SELECT SINGLE pzagolt
              INTO lv_posgol_tro
              FROM ztpm0001
              WHERE copiatro = lv_copiatro.

*           Sumar las posgol de todos los materiales en tabla
            LOOP AT gt_pm0008 INTO ls_pm0008 WHERE  copiatro = lv_copiatro AND
                                                    agru = lv_agrupador AND
                                                    matnrzplp = lv_matnrzplp.
              IF sy-tabix <> ls_good-row_id.
                lv_posgol_total = lv_posgol_total + ls_pm0008-posgol.
              ENDIF.
            ENDLOOP.
            lv_posgol_total = lv_posgol_total + lv_posgol.

            IF lv_posgol_tro < lv_posgol_total.
              CALL METHOD pr_data_changed->add_protocol_entry
                EXPORTING
                  i_msgid     = 'ZPP'
                  i_msgno     = '207'
                  i_msgty     = 'E'
                  i_fieldname = ls_good-fieldname
                  i_row_id    = ls_good-row_id.
              error_in_data = 'X'.
            ENDIF.
          ENDIF.
        WHEN 'MATNRZPLP'.
          CLEAR: lv_pllargonet, lv_planchonet, lv_matkl.
          CALL METHOD pr_data_changed->get_cell_value
            EXPORTING
              i_row_id    = ls_good-row_id
              i_fieldname = ls_good-fieldname
            IMPORTING
              e_value     = lv_matnrzplp.

          IF lv_matnrzplp IS NOT INITIAL.

            CALL METHOD pr_data_changed->get_cell_value
              EXPORTING
                i_row_id    = ls_good-row_id
                i_fieldname = 'POSGOL'
              IMPORTING
                e_value     = lv_posgol.

            SELECT SINGLE zzplalgnt zzplaannt matkl
            INTO (lv_zzplalgntplp, lv_zzplaanntplp, lv_matkl)
            FROM mara
            WHERE matnr = lv_matnrzplp AND
                  mtart = 'ZPLP'.

            IF sy-subrc NE 0.
              CALL METHOD pr_data_changed->add_protocol_entry
                EXPORTING
                  i_msgid     = 'ZPP'
                  i_msgno     = '205'
                  i_msgty     = 'E'
                  i_fieldname = ls_good-fieldname
                  i_row_id    = ls_good-row_id.
              error_in_data = 'X'.
            ELSE.
              READ TABLE gt_pm0008 INTO ls_pm0008 INDEX ls_good-row_id.
              lv_copiatro = ls_pm0008-copiatro.
              lv_juegocli = ls_pm0008-juegocli.
              lv_agrupador = ls_pm0008-agru.

              IF lv_juegocli IS NOT INITIAL.
                SELECT SINGLE pllargonet planchonet
                  INTO (lv_pllargonet, lv_planchonet)
                  FROM ztpm0003
                  WHERE juegocli = lv_juegocli.
                IF sy-subrc = 0.
                  IF lv_matkl = '90220' OR ( lv_pllargonet = lv_zzplalgntplp AND lv_planchonet = lv_zzplaanntplp ).
                    CALL METHOD pr_data_changed->modify_cell
                      EXPORTING
                        i_row_id    = ls_good-row_id
                        i_fieldname = 'ZZPLALGNTPLP'
                        i_value     = lv_zzplalgntplp.
                    CALL METHOD pr_data_changed->modify_cell
                      EXPORTING
                        i_row_id    = ls_good-row_id
                        i_fieldname = 'ZZPLAANNTPLP'
                        i_value     = lv_zzplaanntplp.
*                   Solo vaciar la cantidad de golpes si no es nueva
                    READ TABLE pr_data_changed->mt_good_cells
                                WITH KEY  fieldname = 'POSGOL'
                                          row_id = ls_good-row_id
                                          TRANSPORTING NO FIELDS.
                    IF sy-subrc <> 0.
                      CALL METHOD pr_data_changed->modify_cell
                        EXPORTING
                          i_row_id    = ls_good-row_id
                          i_fieldname = 'POSGOL'
                          i_value     = '0'.
                    ENDIF.
                  ELSE.
                    CALL METHOD pr_data_changed->add_protocol_entry
                      EXPORTING
                        i_msgid     = 'ZPP'
                        i_msgno     = '206'
                        i_msgty     = 'E'
                        i_fieldname = ls_good-fieldname
                        i_row_id    = ls_good-row_id.
                    error_in_data = 'X'.
                  ENDIF.
                ENDIF.
              ELSEIF lv_copiatro IS NOT INITIAL.
                SELECT SINGLE pllargonet planchonet swerk " 07.03.2018 - cvivo - 46930
                  INTO (lv_pllargonet, lv_planchonet, lv_werks) " 07.03.2018 - cvivo - 46930
                  FROM ztpm0001
                  WHERE copiatro = lv_copiatro.
                IF sy-subrc = 0.
                  IF lv_matkl = '90220' OR ( lv_pllargonet = lv_zzplalgntplp AND lv_planchonet = lv_zzplaanntplp ).
                    CALL METHOD pr_data_changed->modify_cell
                      EXPORTING
                        i_row_id    = ls_good-row_id
                        i_fieldname = 'ZZPLALGNTPLP'
                        i_value     = lv_zzplalgntplp.
                    CALL METHOD pr_data_changed->modify_cell
                      EXPORTING
                        i_row_id    = ls_good-row_id
                        i_fieldname = 'ZZPLAANNTPLP'
                        i_value     = lv_zzplaanntplp.
*                   Solo vaciar la cantidad de golpes si no es nueva
                    READ TABLE pr_data_changed->mt_good_cells
                                WITH KEY  fieldname = 'POSGOL'
                                          row_id = ls_good-row_id
                                          TRANSPORTING NO FIELDS.
                    IF sy-subrc <> 0.
                      CALL METHOD pr_data_changed->modify_cell
                        EXPORTING
                          i_row_id    = ls_good-row_id
                          i_fieldname = 'POSGOL'
                          i_value     = ''.
                    ENDIF.
                  ELSE.
* ini 07.03.2018 - cvivo - 46930 Validación medidas utillaje-plancha
                    SELECT SINGLE * FROM ztpm0013 INTO ls_ztpm0013
                      WHERE werks EQ lv_werks.

                    IF sy-subrc EQ 0.
                      CLEAR: lv_largo_inf, lv_largo_sup, lv_ancho_inf, lv_ancho_sup.
                      lv_largo_inf = lv_pllargonet - ls_ztpm0013-largo_inf. " establecemos las tolerancias configuradas
                      lv_largo_sup = lv_pllargonet + ls_ztpm0013-largo_sup.
                      lv_ancho_inf = lv_planchonet - ls_ztpm0013-ancho_inf.
                      lv_ancho_sup = lv_planchonet + ls_ztpm0013-ancho_sup.

                      IF ( lv_zzplalgntplp BETWEEN lv_largo_inf AND lv_largo_sup )
                        AND ( lv_zzplaanntplp BETWEEN lv_ancho_inf AND lv_ancho_sup ). " si está en tolerancia -> warning
*                        MESSAGE ID 'ZPP' TYPE 'W' NUMBER 206.
                        CALL METHOD pr_data_changed->add_protocol_entry
                          EXPORTING
                            i_msgid     = 'ZPP'
                            i_msgno     = '206'
                            i_msgty     = 'W'
                            i_fieldname = ls_good-fieldname
                            i_row_id    = ls_good-row_id.
                        error_in_data = 'X'.
                      ELSE. " si está fuera -> error
                        CALL METHOD pr_data_changed->add_protocol_entry
                          EXPORTING
                            i_msgid     = 'ZPP'
                            i_msgno     = '206'
                            i_msgty     = 'E'
                            i_fieldname = ls_good-fieldname
                            i_row_id    = ls_good-row_id.
                        error_in_data = 'X'.
                      ENDIF.
                    ELSE. " si no hay tolerancias lanzamos el error
                      CALL METHOD pr_data_changed->add_protocol_entry
                        EXPORTING
                          i_msgid     = 'ZPP'
                          i_msgno     = '206'
                          i_msgty     = 'E'
                          i_fieldname = ls_good-fieldname
                          i_row_id    = ls_good-row_id.
                      error_in_data = 'X'.
                    ENDIF.
* fin 07.03.2018 - cvivo - 46930
                  ENDIF.
                ENDIF.
              ENDIF.

              IF lv_copiatro IS NOT INITIAL.
                SELECT SINGLE pzagolt
                  INTO lv_posgol_tro
                  FROM ztpm0001
                  WHERE copiatro = lv_copiatro.

*           Sumar las posgol de todos los materiales en tabla
                LOOP AT gt_pm0008 INTO ls_pm0008 WHERE  copiatro = lv_copiatro AND
                                                        agru = lv_agrupador AND
                                                        matnrzplp = lv_matnrzplp.
                  IF sy-tabix <> ls_good-row_id.
                    lv_posgol_total = lv_posgol_total + ls_pm0008-posgol.
                  ENDIF.
                ENDLOOP.
                lv_posgol_total = lv_posgol_total + lv_posgol.

                IF lv_posgol_tro < lv_posgol_total.
                  CALL METHOD pr_data_changed->add_protocol_entry
                    EXPORTING
                      i_msgid     = 'ZPP'
                      i_msgno     = '207'
                      i_msgty     = 'E'
                      i_fieldname = ls_good-fieldname
                      i_row_id    = ls_good-row_id.
                  error_in_data = 'X'.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.

        WHEN 'MATNRZPMP'.
          CLEAR: lv_zzplalgntplp, lv_zzplaanntplp, lv_zzcajlgext, lv_zzcajanext, lv_zzcajalext, lv_matkl.
          CALL METHOD pr_data_changed->get_cell_value
            EXPORTING
              i_row_id    = ls_good-row_id
              i_fieldname = ls_good-fieldname
            IMPORTING
              e_value     = lv_matnrzpmp.

          IF lv_matnrzpmp IS NOT INITIAL.
            SELECT SINGLE zzplalgnt zzplaannt zzcajlgext zzcajanext zzcajalext matkl
            INTO (lv_zzplalgntplp, lv_zzplaanntplp, lv_zzcajlgext, lv_zzcajanext, lv_zzcajalext, lv_matkl)
            FROM mara
            WHERE matnr = lv_matnrzpmp AND
                  mtart = 'ZPMP'.

            IF sy-subrc NE 0.
              CALL METHOD pr_data_changed->add_protocol_entry
                EXPORTING
                  i_msgid     = 'ZPP'
                  i_msgno     = '204'
                  i_msgty     = 'E'
                  i_fieldname = ls_good-fieldname
                  i_row_id    = ls_good-row_id.
              error_in_data = 'X'.
            ELSE.

              READ TABLE gt_pm0008 INTO ls_pm0008 INDEX ls_good-row_id.
              lv_copiatro = ls_pm0008-copiatro.
              lv_juegocli = ls_pm0008-juegocli.
              lv_agrupador = ls_pm0008-agru.
* >>> DBM 05.10.2017 Se desactiva la validación de dimensiones para ZPMP
*              IF lv_juegocli IS NOT INITIAL.
*                SELECT SINGLE pllargonet planchonet
*                  INTO (lv_pllargonet, lv_planchonet)
*                  FROM ztpm0003
*                  WHERE juegocli = lv_juegocli.
*                IF sy-subrc = 0.
*                  IF lv_matkl <> '90220' AND ( lv_pllargonet <> lv_zzplalgntplp OR lv_planchonet <> lv_zzplaanntplp ).
*                    CALL METHOD pr_data_changed->add_protocol_entry
*                      EXPORTING
*                        i_msgid     = 'ZPP'
*                        i_msgno     = '206'
*                        i_msgty     = 'E'
*                        i_fieldname = ls_good-fieldname
*                        i_row_id    = ls_good-row_id.
*                    error_in_data = 'X'.
*                  ENDIF.
*                ENDIF.
*              ELSEIF lv_copiatro IS NOT INITIAL.
*                SELECT SINGLE pllargonet planchonet
*                  INTO (lv_pllargonet, lv_planchonet)
*                  FROM ztpm0001
*                  WHERE copiatro = lv_copiatro.
*                IF sy-subrc = 0.
*                  IF lv_matkl <> '90220' AND ( lv_pllargonet <> lv_zzplalgntplp OR lv_planchonet <> lv_zzplaanntplp ).
*                    CALL METHOD pr_data_changed->add_protocol_entry
*                      EXPORTING
*                        i_msgid     = 'ZPP'
*                        i_msgno     = '206'
*                        i_msgty     = 'E'
*                        i_fieldname = ls_good-fieldname
*                        i_row_id    = ls_good-row_id.
*                    error_in_data = 'X'.
*                  ENDIF.
*                ENDIF.
*              ENDIF.
* <<< DBM 05.10.2017 Se desactiva la validación de dimensiones para ZPMP
              IF error_in_data IS INITIAL.
                CALL METHOD pr_data_changed->modify_cell
                  EXPORTING
                    i_row_id    = ls_good-row_id
                    i_fieldname = 'ZZCAJLGEXT'
                    i_value     = lv_zzcajlgext.
                CALL METHOD pr_data_changed->modify_cell
                  EXPORTING
                    i_row_id    = ls_good-row_id
                    i_fieldname = 'ZZCAJANEXT'
                    i_value     = lv_zzcajanext.
                CALL METHOD pr_data_changed->modify_cell
                  EXPORTING
                    i_row_id    = ls_good-row_id
                    i_fieldname = 'ZZCAJALEXT'
                    i_value     = lv_zzcajalext.
              ENDIF.

            ENDIF.
          ENDIF.
      ENDCASE.
    ENDLOOP.
  ENDMETHOD.

*------------------------------------------------------

  METHOD get_inserted_rows.
    inserted_rows = me->inserted_rows.
  ENDMETHOD.
*------------------------------------------------------

  METHOD get_deleted_rows.
    deleted_rows = me->deleted_rows.
  ENDMETHOD.
*------------------------------------------------------
  METHOD refresh_delta_tables.
    CLEAR me->inserted_rows[].
    CLEAR me->deleted_rows[].
  ENDMETHOD.
*------------------------------------------------------
  METHOD set_table_is_initial.
    initial_table = 'X'.
  ENDMETHOD.
*------------------------------------------------------
  METHOD set_table_is_not_initial.
    initial_table = space.
  ENDMETHOD.
*------------------------------------------------------
  METHOD table_is_initial.
    IF initial_table = 'X'.
      initial = 'X'.
    ELSE.
      initial = space.
    ENDIF.
  ENDMETHOD.
ENDCLASS.                    "lcl_handle_events_2001 IMPLEMENTATION
