
class ZCL_UTILS_MTO definition
  public
  inheriting from ZCL_UTILS
  final
  create public .

public section.

  data _S_VBAK type VBAK read-only .
  data _S_VBAP type VBAP read-only .
  data _T_AUFK type TT_AUFK read-only .
  data _T_EBAN type MEREQ_T_EBAN read-only .
  data _T_EKPO type ME_EKPO read-only .
  data _T_VBEP type TT_VBEP read-only .
  data _VBELN type VBELN read-only .
  data _VBELP type VBELP read-only .

  class-methods S_GET_INSTANCE_4_AUFNR
    importing
      !I_AUFNR type AUFNR
    returning
      value(R_O_UTILS_MTO) type ref to ZCL_UTILS_MTO .
  class-methods S_GET_INSTANCE_4_MEREQ
    importing
      !I_BANFN type BANFN
      !I_BNFPO type BNFPO
    returning
      value(R_O_UTILS_MTO) type ref to ZCL_UTILS_MTO .
  methods CONSTRUCTOR
    importing
      !I_VBELN type VBELN
      !I_VBELP type VBELP
    raising
      ZCX_MM_EXCEPTION .
protected section.
private section.

  class-data _C_CL_MSGID_LABEL type MSGID value 'ZCL_UTILS_MTO' ##NO_TEXT.

  methods _GET_BD_T_AUFK_4_MTO
    returning
      value(R_T_AUFK) type TT_AUFK .
  methods _GET_BD_T_EBAN_4_MTO
    returning
      value(R_T_EBAN) type MEREQ_T_EBAN .
  methods _GET_BD_T_VBAK_4_MTO
    returning
      value(R_S_VBAK) type VBAK .
  methods _GET_BD_T_VBAP_4_MTO
    returning
      value(R_S_VBAP) type VBAP .
  methods _GET_BD_T_VBEP_4_MTO
    returning
      value(R_T_VBEP) type TT_VBEP .
  methods _GET_BD_T_EKPO_4_MTO
    returning
      value(R_T_EKPO) type ME_EKPO .
endclass. "ZCL_UTILS_MTO definition
class ZCL_UTILS_MTO implementation.
METHOD _GET_BD_T_AUFK_4_MTO.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_aufnr TYPE aufnr.

**********************************************************************
* Validaciones^
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** GET DATA

  SELECT *
    FROM aufk
    INTO CORRESPONDING FIELDS OF TABLE r_t_aufk
   WHERE kdauf EQ me->_vbeln
     AND kdpos EQ me->_vbelp
     AND NOT EXISTS ( SELECT *
                        FROM jest
                       WHERE jest~objnr = aufk~objnr
                         AND jest~inact = space
                         AND jest~stat  IN ('I0076') ).

*    IF ( sy-subrc EQ 0 AND lv_aufnr IS NOT INITIAL ).
*      APPEND lv_aufnr TO r_t_aufnr.
*    ENDIF.
*
*  ENDSELECT.

ENDMETHOD.
METHOD _get_bd_t_eban_4_mto.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_ebkn TYPE ebkn,
        ls_eban TYPE eban.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

***** FILL DATA

**** EBKN para PV y posición

  SELECT *
    FROM ebkn
    INTO CORRESPONDING FIELDS OF ls_ebkn
   WHERE vbeln EQ me->_vbeln
     AND vbelp EQ me->_vbelp
     AND loekz EQ space.

    SELECT SINGLE *
      FROM eban
      INTO CORRESPONDING FIELDS OF ls_eban
     WHERE banfn EQ ls_ebkn-banfn
       AND bnfpo EQ ls_ebkn-bnfpo
       AND loekz EQ space.

    IF ( sy-subrc EQ 0 ).

      APPEND ls_eban TO r_t_eban.

    ENDIF.

  ENDSELECT.

**** EBKN para OF

  IF ( lines( me->_t_aufk ) GT 0 ).

    SELECT *
      FROM ebkn
      INTO CORRESPONDING FIELDS OF ls_ebkn
      FOR ALL ENTRIES IN me->_t_aufk
     WHERE aufnr EQ me->_t_aufk-aufnr.

      SELECT SINGLE *
        FROM eban
        INTO CORRESPONDING FIELDS OF ls_eban
       WHERE banfn EQ ls_ebkn-banfn
         AND bnfpo EQ ls_ebkn-bnfpo
         AND loekz EQ space.

      IF ( sy-subrc EQ 0 ).

        APPEND ls_eban TO r_t_eban.

      ENDIF.

    ENDSELECT.

  ENDIF.

ENDMETHOD.
METHOD _get_bd_t_ekpo_4_mto.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_ekkn TYPE ekkn,
        ls_ekpo TYPE ekpo.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

***** FILL DATA

**** EBKN para PV y posición

  SELECT *
    FROM ekkn
    INTO CORRESPONDING FIELDS OF ls_ekkn
   WHERE vbeln EQ me->_vbeln
     AND vbelp EQ me->_vbelp
     AND loekz EQ space.

    SELECT SINGLE *
      FROM ekpo
      INTO CORRESPONDING FIELDS OF ls_ekpo
     WHERE ebeln EQ ls_ekkn-ebeln
       AND ebelp EQ ls_ekkn-ebelp
       AND loekz EQ space.

    IF ( sy-subrc EQ 0 ).

      APPEND ls_ekpo TO r_t_ekpo.

    ENDIF.

  ENDSELECT.

**** EBKN para OF

  IF ( lines( me->_t_aufk ) GT 0 ).

    SELECT *
      FROM ekkn
      INTO CORRESPONDING FIELDS OF ls_ekkn
      FOR ALL ENTRIES IN me->_t_aufk
     WHERE aufnr EQ me->_t_aufk-aufnr.

      SELECT SINGLE *
        FROM ekpo
        INTO CORRESPONDING FIELDS OF ls_ekpo
       WHERE ebeln EQ ls_ekkn-ebeln
         AND ebelp EQ ls_ekkn-ebelp
         AND loekz EQ space.

      IF ( sy-subrc EQ 0 ).

        APPEND ls_ekpo TO r_t_ekpo.

      ENDIF.

    ENDSELECT.

  ENDIF.


ENDMETHOD.
METHOD _get_bd_t_vbak_4_mto.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

***** FILL DATA

  SELECT SINGLE *
    FROM vbak
    INTO CORRESPONDING FIELDS OF r_s_vbak
   WHERE vbeln EQ me->_vbeln.

ENDMETHOD.
METHOD _get_bd_t_vbap_4_mto.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

***** FILL DATA

  SELECT SINGLE *
    FROM vbap
    INTO CORRESPONDING FIELDS OF r_s_vbap
   WHERE vbeln EQ me->_vbeln
     AND posnr EQ me->_vbelp.

ENDMETHOD.
METHOD _get_bd_t_vbep_4_mto.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

***** FILL DATA

  SELECT *
    FROM vbep
    INTO CORRESPONDING FIELDS OF TABLE r_t_vbep
   WHERE vbeln EQ me->_vbeln
     AND posnr EQ me->_vbelp.

ENDMETHOD.
METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_message TYPE sstring.

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT

*** I_VBELN

  IF ( i_vbeln IS INITIAL ).
    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_utils_mto=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_mto=>_c_cl_msgid_label i_msgty = 'E' ).
  ENDIF.

*** I_VBELP

  IF ( i_vbelp IS INITIAL ).
    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_utils_mto=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_mto=>_c_cl_msgid_label i_msgty = 'E' ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

***** SUPER

  super->constructor( ).

**** CHECK AND FILL ATRIBUTES

  SELECT COUNT(*) UP TO 1 ROWS
    FROM vbap
   WHERE vbeln EQ i_vbeln
     AND posnr EQ i_vbelp.

  IF ( sy-subrc EQ 0 ).

    MOVE i_vbeln TO me->_vbeln.
    MOVE i_vbelp TO me->_vbelp.

    me->_s_vbak   = me->_get_bd_t_vbak_4_mto( ).
    me->_s_vbap   = me->_get_bd_t_vbap_4_mto( ).
    me->_t_vbep   = me->_get_bd_t_vbep_4_mto( ).
    me->_t_aufk   = me->_get_bd_t_aufk_4_mto( ).
    me->_t_eban   = me->_get_bd_t_eban_4_mto( ).
    me->_t_ekpo   = me->_get_bd_t_ekpo_4_mto( ).

*** CHECK MTS o MTO

    "Consideramos que si no tiene OFs ni SolPeds asociadas es MTO y no podemos obtener referencias
    IF ( lines( me->_t_aufk ) LE 0 AND lines( me->_t_eban ) LE 0 ).

      CLEAR lv_message.
      MOVE text-001 TO lv_message.
      RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '001' i_msgid = me->_c_cl_msgid_label i_msgty = 'E' i_message = lv_message ).

    ENDIF.

  ELSE.

    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = zcl_utils_mto=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_mto=>_c_cl_msgid_label i_msgty = 'E' ).

  ENDIF.

ENDMETHOD.
METHOD s_get_instance_4_aufnr.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_vbeln TYPE vbeln,
        lv_vbelp TYPE vbelp.

**********************************************************************
* Validaciones
**********************************************************************

***** IMPORT DATA

  CHECK i_aufnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

***** FILL DATA

  "Intentamos ver PV asociado a OF
  SELECT SINGLE aufk~kdauf aufk~kdpos
    FROM aufk
    INTO (lv_vbeln, lv_vbelp)
   WHERE aufk~aufnr EQ i_aufnr
     AND NOT EXISTS ( SELECT *
                        FROM jest
                       WHERE jest~objnr = aufk~objnr
                         AND jest~inact = space
                         AND jest~stat  IN ('I0076') ).    "Cierre técnico, petición de borrado

  IF ( sy-subrc EQ 0 AND lv_vbeln IS NOT INITIAL AND lv_vbelp IS NOT INITIAL ).

    "Devolvemos instancia
    TRY.
        r_o_utils_mto = NEW zcl_utils_mto( i_vbeln = lv_vbeln i_vbelp = lv_vbelp ).
      CATCH zcx_mm_exception.
    ENDTRY.

    EXIT.

  ENDIF.

ENDMETHOD.
METHOD s_get_instance_4_mereq.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_aufnr TYPE aufnr,
        lv_vbeln TYPE vbeln,
        lv_vbelp TYPE vbelp.

**********************************************************************
* Validaciones
**********************************************************************

***** IMPORT DATA

  CHECK i_banfn IS NOT INITIAL.
  CHECK i_bnfpo IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

***** FILL DATA

  "EBKN, obtengo OF
  SELECT SINGLE aufnr, vbeln, vbelp
    FROM ebkn
    INTO ( @lv_aufnr, @lv_vbeln, @lv_vbelp )
   WHERE banfn EQ @i_banfn
     AND bnfpo EQ @i_bnfpo.

  "Se chequea si pedido y posición no son iniciales
  IF ( lv_vbeln IS NOT INITIAL AND lv_vbelp IS NOT INITIAL ).

    "Devolvemos instancia
    TRY.
      r_o_utils_mto = NEW zcl_utils_mto( i_vbeln = lv_vbeln i_vbelp = lv_vbelp ).
    CATCH zcx_mm_exception.
    ENDTRY.

    EXIT.

  ELSE. "Son iniciales

    "Compruebo si la SolPed va contra OF y no contra PV
    IF ( lv_aufnr IS NOT INITIAL ).

      "Devolvemos instancia
      r_o_utils_mto = zcl_utils_mto=>s_get_instance_4_aufnr( i_aufnr = lv_aufnr ).

      EXIT.

    ENDIF.

  ENDIF.

ENDMETHOD.
