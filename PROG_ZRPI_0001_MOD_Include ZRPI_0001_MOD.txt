*&---------------------------------------------------------------------*
*&  Include           ZRPI_0001_MOD
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.

  SET PF-STATUS '0100'.
  SET TITLEBAR '0100'.

  IF g_custom_container IS INITIAL.
*   Creamos los objetos
    CREATE OBJECT g_custom_container
      EXPORTING
        container_name = gc_container.
    CREATE OBJECT grid
      EXPORTING
        i_parent = g_custom_container.

**   Para los eventos
    CREATE OBJECT g_application.
    SET HANDLER g_application->handle_data_changed FOR grid.
    SET HANDLER g_application->handle_data_changed_finished FOR grid.
    SET HANDLER g_application->handle_toolbar
                g_application->handle_user_command FOR ALL INSTANCES.
*    SET HANDLER g_application->handle_user_command FOR grid.

*   Cuando es editable -> para que escuche los eventos: ENTER...
    CALL METHOD grid->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

*   Recuperar datos de la caracteristica seleccionada
    PERFORM sacar_datos.
*   Mostramos el ALV
    PERFORM mostrar_datos.
  ELSE.
    CALL METHOD grid->refresh_table_display.
  ENDIF.

ENDMODULE.                 " STATUS_0100  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  CASE gv_okcode.
*   Para volver
    WHEN 'EXIT'.
      PERFORM inicializar_datos.

      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'BACK'.
      PERFORM inicializar_datos.

      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'SAVE'.

      CALL METHOD grid->check_changed_data.
*      CALL METHOD grid->handle_data_changed_finished.

** BORRAR REGISTROS
      IF NOT gt_caract_del[] IS INITIAL.
**------Transfer with ABAP outbound proxy via Java inbound proxy to Java Runtime Cache
        CREATE OBJECT lo_vmr_proxy.
        PERFORM borrar_registros.
      ENDIF.

** INSERTAR REGISTROS
      IF NOT gt_caract_new[] IS INITIAL.
**------Transfer with ABAP outbound proxy via Java inbound proxy to Java Runtime Cache
        CREATE OBJECT lo_vmr_proxy.
        PERFORM crear_registros.
      ENDIF.

** MODIFICAR REGISTROS
      IF NOT  gt_caract_modif[] IS INITIAL.
**------Transfer with ABAP outbound proxy via Java inbound proxy to Java Runtime Cache
        CREATE OBJECT lo_vmr_proxy.
        PERFORM modificar_registros.
      ENDIF.


* inicializar tablas
      PERFORM inicializar_datos.

      SET SCREEN 0.
      LEAVE SCREEN.

  ENDCASE.
  CLEAR gv_okcode.

ENDMODULE.                 " USER_COMMAND_0100  INPUT
