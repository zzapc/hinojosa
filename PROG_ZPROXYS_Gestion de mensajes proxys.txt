***********************************************************************
* TIPO : LISTADO
* TITULO : Gestión de mensajes proxys
* DESCRIPCION : Gestión de mensajes proxys
*
* AUTOR: Andrés Picazo                                FECHA: 01/01/2025
* ANALISTA: Alfredo Garcia
*
***********************************************************************
REPORT zproxys.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: sxmspmast, sxmspemas.

DATA o_proxy   TYPE REF TO zcl_ap_proxy.
*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_alv FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check      TYPE xfeld,
             lights     TYPE zico_estado_mensaje,
             fecha_exe  TYPE dats,
             hora_exe   TYPE uzeit,
             fecha_env  TYPE dats,
             hora_env   TYPE uzeit,
             pid        TYPE sxmspmast-pid,
             msgguid    TYPE sxmspmast-msgguid,
             ob_system  TYPE sxmspemas-ob_system,
             ob_name    TYPE sxmspemas-ob_name,
             ib_system  TYPE sxmspemas-ib_system,
             ib_name    TYPE sxmspemas-ib_name,
             adminuser  TYPE sxmspmast-adminuser,
             itfaction  TYPE sxmspmast-itfaction,
             vers       TYPE sxmspmast-vers,
             msgtype    TYPE sxmspmast-msgtype,
             msgstate   TYPE sxmspmast-msgstate,
             errcat     TYPE sxmsperror-errcat,
             errcode    TYPE sxmsperror-errcode,
             restart    TYPE sxmsmstat-restart,
             message    TYPE bapi_msg,
             lights_log TYPE icon_d,
             proceso    TYPE zlog-proceso,
             msg_log    TYPE zlog-message,
             msgv1      TYPE sy-msgv1,
             msgv2      TYPE sy-msgv2,
             msgv3      TYPE sy-msgv3,
             msgv4      TYPE sy-msgv4,
             color      TYPE lvc_t_scol,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv.


    METHODS  main.

    METHODS: listado,
      seleccionar_datos.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA o_prog TYPE REF TO zcl_report.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_fecha FOR sy-datum DEFAULT sy-datum,
                s_hora  FOR sy-uzeit,
                s_fechae FOR sy-datum,
                s_horae  FOR sy-uzeit,
                s_user   FOR sxmspmast-adminuser,
                s_msgsta FOR sxmspmast-msgstate MATCHCODE OBJECT zsxmsmstatt,
                s_msguid FOR sxmspemas-msgguid.
SELECTION-SCREEN END OF BLOCK b01.
SELECTION-SCREEN BEGIN OF BLOCK b02 WITH FRAME TITLE text-emi.
PARAMETERS: p_emi AS CHECKBOX DEFAULT 'X'.
SELECT-OPTIONS: s_obsys FOR sxmspemas-ob_system,
                s_obnam FOR sxmspemas-ob_name.
SELECTION-SCREEN END OF BLOCK b02.

SELECTION-SCREEN BEGIN OF BLOCK b03 WITH FRAME TITLE text-rec.
PARAMETERS: p_rec AS CHECKBOX DEFAULT 'X'.
SELECT-OPTIONS: s_ibsys FOR sxmspemas-ib_system,
                s_ibnam FOR sxmspemas-ib_name.
SELECTION-SCREEN END OF BLOCK b03.

SELECTION-SCREEN BEGIN OF BLOCK b04 WITH FRAME TITLE text-opc.
PARAMETERS p_log AS CHECKBOX.
SELECTION-SCREEN SKIP.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b04.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA:l_list    TYPE o_prog->t_listado,
         im_msgkey TYPE sxmsmkey,
         pay_bytes TYPE xstring,
         payload   TYPE string.

    l_list = list.
    CASE column.
      WHEN 'MSGGUID'.
        message = '?'.

      WHEN 'IB_NAME' OR 'OB_NAME'.
        IF column = 'IB_NAME'.
          SELECT SINGLE * FROM sproxreg
            INTO @DATA(sproxreg)
           WHERE ifr_intf = @l_list-ib_name.
        ELSE.
          SELECT SINGLE object obj_name FROM sproxhdr
            INTO (sproxreg-object, sproxreg-obj_name)
           WHERE ifr_name = l_list-ob_name.
        ENDIF.

        IF sy-subrc = 0.

          DATA: o_bi      TYPE REF TO zcl_ap_batch_input,
                l_mensaje TYPE bapireturn1-message.
          CREATE OBJECT o_bi.

          o_bi->inicio( ).

          o_bi->dynpro( program = 'SAPLWB_INITIAL_TOOL' dynpro = '0100' okcode = '=WB_OTHER_OBJECT').

          o_bi->dynpro( program = 'SAPLSEWB_CONTROL' dynpro = '0400' okcode = '=TOGGLE').
          o_bi->campos( campo = 'G_0400_DATA-USE_QUICKSEARCH' valor = '').
          o_bi->campos( campo = 'G_0400_DATA-USE_FILTER' valor = 'X').

          o_bi->dynpro( program = 'SAPLSEWB_CONTROL' dynpro = '0400' okcode = '=0600').
          o_bi->campos( campo = 'G_0400_DATA-USE_FILTER' valor = 'X').
          o_bi->campos( campo = 'RSEUX-CT' valor = 'X'). " ED: Casilla de selección transacción
          o_bi->campos( campo = 'WBSCREENELEMENTS-OBJECT_TYPE' valor = 'ABAP DCL Source'). " Texto breve explicativo

          o_bi->dynpro( program = 'SAPLSEWB_CONTROL' dynpro = '0400' okcode = '=DISPLAY').
          o_bi->campos( campo = 'G_0400_DATA-USE_FILTER' valor = 'X').
          o_bi->campos( campo = 'DATA_0200-USE_INT' valor = 'X').
          o_bi->campos( campo = 'DATA_0200-OBJ_NAME' valor = sproxreg-obj_name ).
          o_bi->campos( campo = 'DATA_0200-OBJECT' valor = sproxreg-object ).

          l_mensaje = o_bi->llamar_transaccion( tcode = 'SE80' modo = 'E').
        ENDIF.

      WHEN OTHERS.
        SUBMIT rsxmb_display_msg_vers_new
          AND RETURN
          WITH msgguid = l_list-msgguid.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    DATA: lt_restart_msgs TYPE sxmsadminmsgt,
          lt_result       TYPE sxmsadminresulttab.

    check_ucomm_sel = 'RESTART,BORRAR,LOG'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'LOG'.
        DATA: r_clave TYPE RANGE OF zlog-clave.
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
          APPEND VALUE #( option = 'CP' sign = 'I' low = <listado>-msgguid && '*' ) TO r_clave.
        ENDLOOP.
        IF sy-subrc = 0.
          DATA r_fecha TYPE RANGE OF sy-datum.
          SUBMIT zlog
          AND RETURN
          WITH s_clave IN r_clave
          WITH s_fecha IN r_fecha.
          refresh( ).
        ENDIF.
      WHEN 'RESTART'.
        IF line_exists( o_prog->i_listado[ check = 'X' restart = '' ] ).
          DATA(l_forzar) = zcl_ap_popup=>confirmar( texto = 'Alguno de los mensaje seleccionados no permite reanudación'
                                                    texto2 = '¿Desea forzar el reproceso de manera forzada?' ).
          IF l_forzar IS INITIAL.
            MESSAGE 'No se procesa ningún mensaje' TYPE 'S'.
            RETURN.
          ENDIF.
        ENDIF.

        DATA(success) = ''.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          COMMIT WORK AND WAIT.
* restart the messages
          lt_restart_msgs = VALUE #( ( msgguid = <listado>-msgguid
                                       pid     = <listado>-pid
                                       version = <listado>-vers ) ).

          IF <listado>-restart IS INITIAL.
*** CASOS ESPECIALES (Cómo no se dejan reprocesar los mensajes de entrada finalizados, en los casos que nos interese, tendremos que poner código específico).
            IF <listado>-ib_name = 'SI_BHS_CONSUM_BOB_MAT_PRIMA_IN_BHS_TO_SAP'.
              o_proxy->get_payload( EXPORTING msgid = CONV #( <listado>-msgguid )
                                              pid     = <listado>-pid
                                    IMPORTING payload_string = DATA(l_payload) ).
              IF NOT l_payload IS INITIAL.
                DATA: input_bhs TYPE zmt_bhs_consum_bob_mat_prima_i.
                o_proxy->datos_from_payload( EXPORTING payload = l_payload
                                             IMPORTING datos = input_bhs-mt_bhs_consum_bob_mat_prima_in-items ).
                IF NOT input_bhs-mt_bhs_consum_bob_mat_prima_in-items IS INITIAL.
                  DATA(o_bhs) = NEW zcl_si_bhs_consum_bob_mat_prim( ).
                  BREAK-POINT.
                  o_prog->aux1 = <listado>-msgguid.
                  SET PARAMETER ID 'ZMSGGUID' FIELD o_prog->aux1.
                  o_bhs->zii_si_bhs_consum_bob_mat_prim~si_bhs_consum_bob_mat_prima_in( input = input_bhs ).
                ENDIF.
              ENDIF.
              CONTINUE.
            ELSE.
              DATA(l_msgstate) = <listado>-msgstate.

              CALL FUNCTION 'SXMS_SET_STATE'
                EXPORTING
                  im_msgguid        = <listado>-msgguid
                  im_pid            = <listado>-pid
                  im_message_status = '019'. "Cambio manual
              .
*
              SELECT SINGLE msgstate FROM sxmspvers
                INTO @DATA(l_msgstate_v)
                WHERE msgguid = @<listado>-msgguid
                  AND pid     = @<listado>-pid
                  AND vers    = @<listado>-vers.
*
*            UPDATE sxmspmast
*               SET msgstate = '016'
**                   adminuser = sy-uname
*              WHERE msgguid = <listado>-msgguid
*                AND pid     = <listado>-pid.
*
              IF l_msgstate_v NE '019' AND l_msgstate_v NE '001'.
                UPDATE sxmspvers
                   SET msgstate = '001' "Scheduled
                  WHERE msgguid = <listado>-msgguid
                    AND pid     = <listado>-pid
                    AND vers = <listado>-vers.
              ENDIF.
            ENDIF.
          ENDIF.

*        CALL FUNCTION 'SXMS_SHM_REDIRECT_ON_SRV' "DESTINATION destination
*          EXPORTING
*            msgguid               = <listado>-msgguid
*            pipelineid            = <listado>-pid
*            start_version         = start_version
*            queue                 = queue
*          EXCEPTIONS
*            no_rfc_call_allowed   = 1
*            system_failure        = 2 MESSAGE msg
*            communication_failure = 3 MESSAGE msg.

          CALL FUNCTION 'SXMB_INVOKE_ADMIN_ACTION_INT'
            EXPORTING
              im_msgs            = lt_restart_msgs
              im_action          = 'R'
              im_skip_validation = 'X'
              im_restart_trace   = ''
            IMPORTING
              ex_admin_result    = lt_result.
          LOOP AT lt_result ASSIGNING FIELD-SYMBOL(<result>).
            IF <result>-was_successful = if_xms_main=>co_true.
              success = 'X'.
            ELSE.
              ROLLBACK WORK.
* Si ha dado error, dejo el status que tenía
*              IF <listado>-restart IS INITIAL.
*                UPDATE sxmspmast
*                   SET msgstate = l_msgstate
*                  WHERE msgguid = <listado>-msgguid
*                    AND pid     = <listado>-pid.
*              ENDIF.
              MESSAGE <result>-text TYPE 'I' DISPLAY LIKE 'E'.
            ENDIF.
          ENDLOOP.
          IF success = 'X'.
            MESSAGE 'Procesamiento de mensaje planificado de nuevo' TYPE 'S'.
          ENDIF.
        ENDLOOP.
*        IF sy-subrc = 0.
*          refresh( ).
*        ENDIF.
      WHEN 'BORRAR'.
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
          DELETE FROM sxmspmast
            WHERE msgguid = <listado>-msgguid
              AND pid     = <listado>-pid.
          DELETE FROM sxmspemas
            WHERE msgguid = <listado>-msgguid
              AND pid     = <listado>-pid.
          DELETE FROM sxmspvers
            WHERE msgguid = <listado>-msgguid
              AND pid     = <listado>-pid.
          DELETE o_prog->i_listado.
        ENDLOOP.
        set_seleccion( CHANGING t_tabla = o_prog->i_listado ).
        refresh( ).
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.

    o_proxy = NEW #( ).
    seleccionar_datos( ).
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    DATA: rt_pid      TYPE RANGE OF sxmspmast-pid,
          rt_exetime  TYPE RANGE OF sxmspmast-exetimest,
          rt_sendtime TYPE RANGE OF sxmspmast-sendtimest,
          lr_exetime  LIKE LINE OF rt_exetime,
          l_icono     TYPE icon_d,
          l_listado   TYPE t_listado.

    IF p_emi = 'X'.
      APPEND VALUE #( option = 'EQ' sign = 'I' low = 'SENDER' ) TO rt_pid.
    ENDIF.
    IF p_rec = 'X'.
      APPEND VALUE #( option = 'EQ' sign = 'I' low = 'RECEIVER' ) TO rt_pid.
    ENDIF.

    IF NOT s_fecha[] IS INITIAL.
      LOOP AT s_fecha ASSIGNING FIELD-SYMBOL(<fecha>).
        CLEAR lr_exetime.
        lr_exetime-option = <fecha>-option.
        lr_exetime-sign = <fecha>-sign.
        lr_exetime-low = <fecha>-low && '000000.000'.
        IF NOT <fecha>-high IS INITIAL.
          lr_exetime-high = <fecha>-high && '240000.000'.
        ELSE.
          lr_exetime-high = <fecha>-low && '240000.000'.
        ENDIF.
        IF lr_exetime-option = 'EQ'..
          lr_exetime-option = 'BT'.
        ENDIF.
        APPEND lr_exetime TO rt_exetime.
      ENDLOOP.
    ENDIF.

    IF NOT s_fechae[] IS INITIAL.
      LOOP AT s_fechae ASSIGNING <fecha>.
        CLEAR lr_exetime.
        lr_exetime-option = <fecha>-option.
        lr_exetime-sign = <fecha>-sign.
        lr_exetime-low = <fecha>-low && '000000.000'.
        IF NOT <fecha>-high IS INITIAL.
          lr_exetime-high = <fecha>-high && '240000.000'.
        ELSE.
          lr_exetime-high = <fecha>-low && '240000.000'.
        ENDIF.
        IF lr_exetime-option = 'EQ'..
          lr_exetime-option = 'BT'.
        ENDIF.
        APPEND lr_exetime TO rt_sendtime.
      ENDLOOP.
    ENDIF.

    sgpi_texto( 'Seleccionando datos'(sda) ).
    SELECT DISTINCT
           mast~msgguid,         mast~pid,  mast~msgtype,
           mast~msgstate,        mast~qosmode,          mast~exetimest,
           mast~inittimest,      mast~sendtimest,       mast~sndrguid,
           mast~queueguid,       mast~eo_refid,         mast~eo_refval,
           mast~adapt_typ,       mast~adapt_stat,       mast~parentmsg,
           mast~childcount,      mast~client,           mast~adminuser,
           mast~gen_entry,       mast~manualstat,       mast~retrycount,
           mast~itfaction,       mast~commitact,        mast~eo_refid_i,
           mast~eo_refvl_i,      mast~adapt_tp_i,       mast~rest_vers,
           mast~eo_refid_o,      mast~eo_refvl_o,       mast~queueint,
           mast~ref_to_msg,      mast~ref_to_rec_msg,   mast~ack_state,
           mast~reorg,           mast~rnd_number,       mast~vers,
           mast~security,        mast~ws_hash_code,     mast~retrycount_man,
           mast~userinfostorage, mast~userinfodata,     mast~msg_size,
           mast~host,

           emas~ob_system,       emas~ob_ns,            emas~ob_name,
           emas~ob_party,        emas~ob_party_type,    emas~ob_party_agency,
           emas~ob_operation,
           emas~ib_system,       emas~ib_ns,            emas~ib_name,
           emas~ib_party,        emas~ib_party_type,    emas~ib_party_agency,
           emas~ib_operation,

           error~errcat,         error~errcode,

           sxmsmstat~icon_id,    sxmsmstat~restart, sxmsmstatt~msgtxt

           INTO TABLE @DATA(i_datos)
      FROM sxmspmast AS mast  INNER JOIN sxmspemas AS emas ON emas~msgguid       = mast~msgguid
                                                          AND emas~pid           = mast~pid
           LEFT OUTER JOIN  sxmsperror AS error ON error~msgguid = mast~msgguid
           LEFT OUTER JOIN  sxmsmstat ON sxmsmstat~msgstate = mast~msgstate
           LEFT OUTER JOIN  sxmsmstatt ON sxmsmstatt~msgstate = mast~msgstate
                                      AND langu = @sy-langu
      WHERE mast~pid             IN   @rt_pid
        AND mast~exetimest       IN   @rt_exetime
        AND mast~sendtimest       IN   @rt_sendtime
        AND  mast~adminuser       IN   @s_user
        AND  mast~msgstate        IN   @s_msgsta
*             AND  mast~adapt_typ       LIKE im_adapt_typ
*             AND  mast~adapt_tp_i      LIKE im_adapt_typ_i
*             AND  mast~eo_refid        LIKE im_eo_refid
*             AND  mast~eo_refval       LIKE im_eo_refval
*             AND  mast~queueint        LIKE im_queueid ESCAPE '#'
*             AND  mast~reorg           IN   rt_reorg
*             AND  mast~msgtype         LIKE im_msg_type
*             AND ( mast~retrycount_man  <= im_man_retryco
*                   OR   mast~retrycount_man  IS NULL )
*             AND  mast~adapt_stat      IN   rt_astat
*             AND  mast~msgstate        IN   rt_msgstate
*             AND  mast~parentmsg       IN   rt_parent
*             AND  mast~ref_to_msg      IN   rt_ref_to_msg
*             AND  mast~queueguid       LIKE im_queueguid
*             AND  mast~manualstat      LIKE im_manualstat
*
              AND  emas~ib_system       IN   @s_ibsys
*             AND  emas~ib_ns           IN   rt_ib_ns
              AND  emas~ib_name         IN   @s_ibnam
*             AND  emas~ib_party        IN   rt_ib_party
*             AND  emas~ib_party_type   IN   rt_ib_party_type
*             AND  emas~ib_party_agency IN   rt_ib_party_agency
*             AND  emas~ib_operation    IN   rt_ib_operation
              AND  emas~ob_system       IN   @s_obsys
*             AND  emas~ob_ns           IN   rt_ob_ns
              AND  emas~ob_name         IN   @s_obnam
*             AND  emas~ob_party        IN   rt_ob_party
*             AND  emas~ob_party_type   IN   rt_ob_party_type
*             AND  emas~ob_party_agency IN   rt_ob_party_agency
*             AND  emas~ob_operation    IN   rt_ob_operation
*
              AND mast~msgguid          IN   @s_msguid.
    .
    o_prog->o_sgpi->get_filas_tabla( i_datos[] ).
    LOOP AT i_datos ASSIGNING FIELD-SYMBOL(<datos>).
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).
      CLEAR l_listado.
      MOVE-CORRESPONDING <datos> TO l_listado.
      CONVERT TIME STAMP <datos>-exetimest TIME ZONE sy-zonlo
         INTO DATE l_listado-fecha_exe TIME l_listado-hora_exe.

      IF NOT ( l_listado-fecha_exe IN s_fecha AND l_listado-hora_exe IN s_hora ).
        CONTINUE.
      ENDIF.

      CONVERT TIME STAMP <datos>-sendtimest TIME ZONE sy-zonlo
         INTO DATE l_listado-fecha_env TIME l_listado-hora_env.

      IF NOT ( l_listado-fecha_env IN s_fechae AND l_listado-hora_env IN s_horae ).
        CONTINUE.
      ENDIF.

      l_listado-message = <datos>-msgtxt.
      l_icono = <datos>-icon_id.
      CASE l_listado-msgstate.
        WHEN '003'.
          DATA(l_color) = 'V'.
        WHEN '014'.
          l_color = 'N'.
      ENDCASE.


      set_status_list( EXPORTING message = l_listado-message icono = l_icono color = l_color CHANGING list = l_listado ).
      APPEND l_listado TO i_listado.
    ENDLOOP.

    IF NOT i_listado IS INITIAL AND p_log = 'X'.
      DATA: r_clave TYPE RANGE OF zlog-clave,
            i_list  TYPE TABLE OF t_listado.

      LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>).
        APPEND VALUE #( option = 'CP' sign = 'I' low = <listado>-msgguid && '*' ) TO r_clave.
      ENDLOOP.
      SELECT clave, proceso, msgty, msgv1, msgv2, msgv3, msgv4, message AS msg_log FROM zlog
        INTO TABLE @DATA(i_log)
       WHERE clave IN @r_clave
       ORDER BY PRIMARY KEY.
      LOOP AT i_log ASSIGNING FIELD-SYMBOL(<log>) WHERE clave CS '-'.
        SPLIT <log>-clave AT '-' INTO <log>-clave aux1.
      ENDLOOP.
      DATA l_list TYPE t_listado.
      LOOP AT i_listado INTO l_listado.
        IF line_exists( i_log[ clave = l_listado-msgguid ] ).
          DELETE i_listado.
          LOOP AT i_log ASSIGNING <log> WHERE clave = l_listado-msgguid.
            CASE <log>-msgty.
              WHEN 'S' OR 'I'.
                l_listado-lights_log = icon_led_green.
              WHEN 'E' OR 'A'.
                l_listado-lights_log = icon_led_red.
              WHEN 'W'.
                l_listado-lights_log = icon_led_yellow.
              WHEN OTHERS.
                l_listado-lights_log = icon_dummy.
            ENDCASE.
            MOVE-CORRESPONDING <log> TO l_listado.
            APPEND l_listado TO i_list.
          ENDLOOP.
        ENDIF.
      ENDLOOP.
      APPEND LINES OF i_list TO i_listado.

    ENDIF.


    SORT i_listado BY fecha_exe hora_exe msgguid.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Log'  icon = icon_sym_log_server ucomm = 'LOG' ).
    o_alv->add_button( button = 'F02' text = 'Reanudación'  icon = icon_execute_object ucomm = 'RESTART' ).
    IF sy-sysid = zcl_c=>entorno_desarrollo.
      o_alv->add_button( button = 'M01' text = 'Borrar'  icon = icon_execute_object ucomm = 'BORRAR' ).
    ENDIF.

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page( ).

    o_alv->set_field_hotspot( campo = 'MSGGUID' auto = 'X' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK' ).
    o_alv->set_field_noout( 'MSGTYPE,MSGSTATE' ).

    IF p_log IS INITIAL.
      o_alv->set_field_quitar( 'LIGHTS_LOG,PROCESO,MSG_LOG,MSGV1,MSGV2,MSGV3,MSGV4' ).
    ELSE.
      o_alv->set_field_text( campo = 'LIGHTS_LOG' valor = 'Log' valor2 = 'Estado log' ).
    ENDIF.
    o_alv->set_orden( 'FECHA_EXE,HORA_EXE,FECHA_ENV,HORA_ENV,MSGGUID' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Log'(log) '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         color              = 'COLOR'
                         o_dev              = o_prog ).

  p_vari = o_prog->o_alv->get_default_layout( ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN OUTPUT.
  o_prog->handle = ''.
  IF o_prog->o_alv IS INITIAL OR o_prog->handle <> o_prog->aux1.
    o_prog->aux1 = o_prog->handle.
    IF NOT o_prog->o_alv IS INITIAL.
      o_prog->o_alv->free( ).
      CLEAR o_prog->o_alv.
    ENDIF.
    o_prog->o_alv = NEW #( status           = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         handle             = o_prog->handle
                         o_dev              = o_prog ).
    p_vari = o_prog->o_alv->get_default_layout( ).
  ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      IF s_msguid[] IS INITIAL.
        IF p_rec IS INITIAL AND p_emi IS INITIAL.
          MESSAGE 'Seleccione tipo mensajes emitidos y/o recibidos' TYPE 'E'.
        ENDIF.
        IF s_fecha[] IS INITIAL.
          MESSAGE 'Debe indicar fecha de selección' TYPE 'E'.
        ENDIF.
      ENDIF.
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
