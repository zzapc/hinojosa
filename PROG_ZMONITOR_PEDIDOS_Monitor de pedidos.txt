***********************************************************************
* TIPO : LISTADO
* TITULO : Monitor de pedidos
* DESCRIPCION : Monitor de pedidos
*
* AUTOR: Andrés Picazo                                FECHA: 20/06/2022
* ANALISTA: Silvia Camps
*
***********************************************************************
REPORT zmonitor_pedidos.


*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: vbak, vbkd, vbap, vbup, vbrk, lips, tvpod, mara, vttk, jvkomk.


*------TABLAS INTERNAS-------------------------------------------------*


*------VARIABLES-------------------------------------------------------*


*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*

CLASS lcl_event_grid DEFINITION INHERITING FROM zcl_ap_alv_grid_eventos FINAL.
  PUBLIC SECTION.
    METHODS: double_click          REDEFINITION,
      hotspot_click         REDEFINITION,
      data_changed          REDEFINITION,
      data_changed_finished REDEFINITION,
      toolbar               REDEFINITION,
      user_command          REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF  t_comun,
             check       TYPE xfeld,
             lights      TYPE zico_estado_mensaje,
             vbeln       TYPE vbeln_va,
             auart       TYPE vbak-auart,
             vdatu       TYPE vbak-vdatu,
             prsdt       TYPE vbkd-prsdt,
             erdat       TYPE vbap-erdat,
             kunnr       TYPE kunag,
             name_ag     TYPE name_ag,
             kunwe       TYPE kunwe,
             name_we     TYPE name1_we,
             vkorg       TYPE vkorg,
             vtweg       TYPE vtweg,
             spart       TYPE spart,
             bstkd       TYPE vbkd-bstkd,
             bstdk       TYPE vbkd-bstdk,
             entrega1    TYPE vbeln_vl,
             wadat_ist   TYPE wadat_ist,
             abhov       TYPE vbak-abhov,
             entregap    TYPE posnr,
             entregas    TYPE string,
             transporte1 TYPE tknum,
             daten       TYPE vttk-daten,
             tdlnr       TYPE tdlnr,
             tdlnr_t     TYPE name1,
             transportes TYPE string,
             factura1    TYPE vbeln_vf,
             fkart       TYPE fkart,
             bukrs       TYPE bukrs,
             fkdat       TYPE fkdat,
             budat       TYPE budat,
             facturap    TYPE posnr,
             facturas    TYPE string,
             lfstk       TYPE vbuk-lfstk,
             gbstk       TYPE vbuk-gbstk,
             abstk       TYPE vbuk-abstk,
             podkz       TYPE vbkd-podkz,
             knumv       TYPE vbak-knumv,
             netwr       TYPE vbak-netwr,
             waerk       TYPE vbak-waerk,
             lifsk       TYPE vbak-lifsk, " bloqueo entrega
           END OF t_comun.

    TYPES: BEGIN OF  t_cab.
            INCLUDE TYPE t_comun.
    TYPES:   message TYPE bapi_msg,
             style   TYPE lvc_t_styl,
             color   TYPE lvc_t_scol,
             END OF t_cab,
             tt_cab TYPE STANDARD TABLE OF t_cab.

    DATA: i_cab     TYPE tt_cab,
          i_cab_ini TYPE tt_cab.

    TYPES: BEGIN OF  t_pos.
            INCLUDE TYPE t_comun.
    TYPES:   posnr             TYPE vbap-posnr,
             matnr             TYPE vbap-matnr,
             arktx             TYPE vbap-arktx,
             mtart             TYPE mara-mtart,
             abgru             TYPE vbap-abgru,
             kwmeng            TYPE vbap-kwmeng,
             vrkme             TYPE vbap-vrkme,
             kwmeng_sust       TYPE vbap-kwmeng,
             netwr_p           TYPE vbap-netwr,
             meins             TYPE mara-meins,
             ind_inc           TYPE string,
             lfimg             TYPE lips-lfimg,
             vrkme_e           TYPE lips-vrkme,
             lfimg_unp         TYPE lips-lfimg,
             pikmg             TYPE pikmg,
             lfimg_sust        TYPE lfimg,
             ctd_falta         TYPE lfimg,
             sust              TYPE string,
             ctd_pend          TYPE mcvbapb-olime,
             podkz_p           TYPE vbkd-podkz,
             ctd_are           TYPE tvpod-podmg,
             grund             TYPE tvpod-grund,
             pdsta             TYPE vbup-pdsta,
             faltas            TYPE mcvbapb-olime,
             fdisp             TYPE vbak-vdatu,
             pstyv             TYPE vbap-pstyv,
             werks             TYPE vbap-werks,
             lgort             TYPE vbap-lgort,
             vstel             TYPE vbap-vstel,
             edatu             TYPE vbep-edatu,
             erdat_p           TYPE vbap-erdat,
             lfsta             TYPE vbup-lfsta,
             fksta             TYPE vbup-fksta,
             gbsta             TYPE vbup-gbsta,
             absta             TYPE vbup-absta,
             fkimg             TYPE vbrp-fkimg,
             netwr_f           TYPE vbrp-netwr,
             message           TYPE bapi_msg,
             error             TYPE xfeld,
             style             TYPE lvc_t_styl,
             color             TYPE lvc_t_scol,
             campos_mod        TYPE string,
             END OF t_pos,
             tt_pos TYPE STANDARD TABLE OF t_pos.

    DATA: i_pos     TYPE tt_pos,
          i_pos_ini TYPE tt_pos.

    DATA: o_alv   TYPE REF TO zcl_ap_alv_grid,
          o_event TYPE REF TO lcl_event_grid.

    METHODS: buscar_datos   REDEFINITION,
      buscar_pedidos IMPORTING vbeln TYPE vbeln_va DEFAULT '',

      validar_cab IMPORTING !mod TYPE abap_bool DEFAULT ''
                  CHANGING  cab  TYPE t_cab,

      validar_pos IMPORTING !mod   TYPE abap_bool DEFAULT ''
                            !print TYPE abap_bool DEFAULT ''
                  CHANGING  !pos   TYPE t_pos,

      status_dynpro_0100,
      command_dynpro_0100,
      get_handle RETURNING VALUE(handle) TYPE string,
      init,

      get_estado_pos IMPORTING vbeln    TYPE vbeln_va
                               posnr    TYPE posnr
                     EXPORTING icono    TYPE icon_d
                               !message TYPE bapi_msg,

      get_estado_cab IMPORTING vbeln    TYPE vbeln_va
                               cab      TYPE t_cab
                     EXPORTING icono    TYPE icon_d
                               !message TYPE bapi_msg.


ENDCLASS.                    " REPZGSDD440_MONITOR_PEDIDOSORT DEFINITION

DATA o_prog TYPE REF TO zcl_report ##NEEDED.

*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME.
SELECT-OPTIONS: s_vkorg FOR vbak-vkorg,
                s_vtweg FOR vbak-vtweg,
                s_spart FOR vbak-spart,
                s_auart FOR vbak-auart,
                s_kunnr FOR vbak-kunnr,
                s_vdatu FOR vbak-vdatu,
                s_erdat FOR vbak-erdat,
                s_bstkd FOR vbkd-bstkd,
                s_bstdk FOR vbkd-bstdk,
                s_vbeln FOR vbak-vbeln,
                s_tknum FOR vttk-tknum,
                s_daten FOR vttk-daten,
                s_lifsk FOR vbak-lifsk,
                s_podkz FOR vbkd-podkz,
                s_entre FOR lips-vbeln.
SELECTION-SCREEN SKIP.
SELECT-OPTIONS: s_matnr FOR vbap-matnr,
                s_pstyv FOR vbap-pstyv,
                s_mtart FOR mara-mtart,
                s_podkzp FOR vbkd-podkz NO-DISPLAY.
SELECTION-SCREEN SKIP.
PARAMETERS: p_cab RADIOBUTTON GROUP g DEFAULT 'X' USER-COMMAND g,
            p_det RADIOBUTTON GROUP g.
SELECTION-SCREEN SKIP.
PARAMETERS p_vari LIKE disvariant-variant.                ".
SELECTION-SCREEN END OF BLOCK b01.
__botones_plantilla.

************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************
CLASS lcl_event_grid IMPLEMENTATION.
  METHOD double_click.
    IF p_det = 'X'.
      READ TABLE o_prog->i_pos ASSIGNING FIELD-SYMBOL(<pos>) INDEX e_row-index.
      IF sy-subrc = 0.
        CASE e_column.
          WHEN 'FPREF_PPC' OR 'FINI_POF' OR 'FINI_PPRO'.
            zcl_ap_orden_pp=>ver_md04( matnr = <pos>-matnr werks = <pos>-werks ).
          WHEN OTHERS.
        ENDCASE.
      ENDIF.
    ELSE.
      READ TABLE o_prog->i_cab ASSIGNING FIELD-SYMBOL(<cab>) INDEX e_row-index.
      IF sy-subrc = 0.
        CASE e_column.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD hotspot_click.
    TYPES: BEGIN OF t_stock,
             lgtyp TYPE lqua-lgtyp,
             lgpla TYPE lqua-lgpla,
             sonum TYPE lqua-sonum,
             verme TYPE lqua-verme,
             meins TYPE lqua-meins,
           END OF t_stock.

    GET TIME.
    DATA(l_hora) = sy-uzeit.
    IF o_alv->nombre_tabla = 'I_CAB'.
      READ TABLE o_prog->i_cab ASSIGNING FIELD-SYMBOL(<cab>) INDEX es_row_no-row_id.
      IF sy-subrc = 0.
        CASE e_column_id.
          WHEN OTHERS.
            DATA(l_vbeln) = <cab>-vbeln.
            super->hotspot_click( e_column_id = e_column_id es_row_no = es_row_no ).
* Los pedidos tardan en grabar, por lo que no sirve ver si hay cambios, así que siempre esperamos un segundo
*            SELECT objectid
*              FROM cdhdr
*              INTO @DATA(l_objectid)
*              UP TO 1 ROWS
*              WHERE objectclas = @zcl_ap_pedido_sd=>c_objectclas
*                AND objectid = @l_vbeln
*                AND udate = @sy-datum
*                AND utime >= @l_hora
*              ORDER BY PRIMARY KEY.
*            ENDSELECT.
*            IF sy-subrc = 0.
            COMMIT WORK AND WAIT.
            WAIT UP TO 1 SECONDS.
            o_prog->buscar_pedidos( vbeln = l_vbeln ).
            o_prog->o_alv->refrescar_grid( soft_refresh = '' ).
*            ENDIF.
        ENDCASE.
      ENDIF.
    ELSE.
      READ TABLE o_prog->i_pos ASSIGNING FIELD-SYMBOL(<pos>) INDEX es_row_no-row_id.
      IF sy-subrc = 0.
        CASE e_column_id.
          WHEN OTHERS.
            l_vbeln = <pos>-vbeln.
            super->hotspot_click( e_column_id = e_column_id es_row_no = es_row_no ).
* Los pedidos tardan en grabar, por lo que no sirve ver si hay cambios, así que siempre esperamos un segundo
*            SELECT objectid
*              FROM cdhdr
*              INTO @l_objectid
*              UP TO 1 ROWS
*              WHERE objectclas = @zcl_ap_pedido_sd=>c_objectclas
*                AND objectid = @l_vbeln
*                AND udate = @sy-datum
*                AND utime >= @l_hora
*              ORDER BY PRIMARY KEY.
*            ENDSELECT.
*            IF sy-subrc = 0.
            COMMIT WORK AND WAIT.
            WAIT UP TO 1 SECONDS.
            o_prog->buscar_pedidos( vbeln = l_vbeln ).
            o_prog->o_alv->refrescar_grid( soft_refresh = 'X' ).
*            ENDIF.
        ENDCASE.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD toolbar.
    super->toolbar( e_object = e_object e_interactive = e_interactive ).
  ENDMETHOD.

  METHOD user_command.
    CASE e_ucomm.
      WHEN OTHERS.
        super->user_command( e_ucomm = e_ucomm ).
    ENDCASE.
  ENDMETHOD.

  METHOD data_changed.
    ini_data_changed( cambios = er_data_changed->mt_good_cells  ).

    LOOP AT i_cambios_celda INTO cambio_celda.
      AT NEW row_id.
        IF o_alv->nombre_tabla = 'I_POS'.
          READ TABLE o_prog->i_pos INTO DATA(l_pos) INDEX cambio_celda-row_id. "#EC CI_SUBRC
          CLEAR tabla_data_changed.
        ENDIF.
      ENDAT.

      IF o_alv->nombre_tabla = 'I_POS'.
        set_valor_mod( CHANGING datos = l_pos ).
      ENDIF.

      AT END OF row_id.
        IF o_alv->nombre_tabla = 'I_POS'.
          o_prog->validar_pos( EXPORTING mod = 'X' CHANGING pos = l_pos ).
          __add_lista l_pos-campos_mod tabla_data_changed.
          MODIFY o_prog->i_pos FROM l_pos INDEX cambio_celda-row_id.
        ENDIF.
      ENDAT.
    ENDLOOP.
  ENDMETHOD.

  METHOD data_changed_finished.
    IF NOT tabla_data_changed IS INITIAL.
      o_alv->refrescar_grid( ).
      CLEAR tabla_data_changed.
    ENDIF.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD buscar_datos.
    CLEAR: i_cab,
           i_pos.
    buscar_pedidos( ).
  ENDMETHOD.                                               " seleccionar_datos

  METHOD buscar_pedidos.
    DATA: r_vbeln TYPE RANGE OF vbeln_va,
          l_pos   TYPE t_pos,
          r_uepos TYPE RANGE OF vbap-uepos.
    DATA i_tknum        TYPE TABLE OF tknum.

    IF NOT s_tknum[] IS INITIAL.
      IF s_tknum[ 1 ]-low NE ''.
        DATA(l_sel_tr) = 'X'.
      ENDIF.
    ENDIF.


    IF NOT vbeln IS INITIAL.
      APPEND VALUE #( option = 'EQ' sign = 'I' low = vbeln ) TO r_vbeln.
      DELETE i_cab WHERE vbeln = vbeln.
      DELETE i_pos WHERE vbeln = vbeln.
    ELSE.
      IF NOT s_entre[] IS INITIAL OR ( l_sel_tr = 'X' OR NOT s_daten[] IS INITIAL ).
        IF l_sel_tr IS INITIAL AND s_daten[] IS INITIAL.
          SELECT DISTINCT vgbel FROM lips
            INTO TABLE @DATA(i_ent)
           WHERE vbeln IN @s_entre
             AND vgbel <> ''.
        ELSE.
          SELECT DISTINCT vgbel FROM lips JOIN vttp ON lips~vbeln = vttp~vbeln
                                          JOIN vttk ON vttp~tknum = vttk~tknum
            INTO TABLE @i_ent
           WHERE vttp~vbeln IN @s_entre
             AND lips~vgbel <> ''
             AND vttp~tknum IN @s_tknum
             AND vttk~daten IN @s_daten.
        ENDIF.
        IF sy-subrc <> 0.
          MESSAGE 'No existen entregas válidas' TYPE 'I'.
          RETURN.
        ELSE.
          LOOP AT i_ent ASSIGNING FIELD-SYMBOL(<ent>).
            APPEND VALUE #( option = 'EQ' sign = 'I' low = <ent>-vgbel ) TO r_vbeln.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.

    sgpi_texto( 'Seleccionando datos'(sda) ).

    SELECT * FROM vbak JOIN vbkd ON vbak~vbeln = vbkd~vbeln
                       JOIN vbuk ON vbak~vbeln = vbuk~vbeln
      APPENDING CORRESPONDING FIELDS OF TABLE i_cab
     WHERE vbak~vbeln IN s_vbeln
       AND vbak~vbeln IN r_vbeln
       AND auart IN s_auart
       AND vdatu IN s_vdatu
       AND vkorg IN s_vkorg
       AND vtweg IN s_vtweg
       AND spart IN s_spart
       AND podkz IN s_podkz
       AND kunnr IN s_kunnr
       AND erdat IN s_erdat
       AND bstkd IN s_bstkd
       AND vbkd~bstdk IN s_bstdk
       AND posnr = '000000'
       AND vbak~vbtyp = 'C'
       AND vbak~lifsk IN s_lifsk.

    o_prog->o_sgpi->get_filas_tabla( i_cab[] ).
    LOOP AT i_cab ASSIGNING FIELD-SYMBOL(<cab>) WHERE vbeln IN r_vbeln.
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

      AUTHORITY-CHECK OBJECT 'V_VBAK_AAT'
                      ID 'AUART' FIELD <cab>-auart
                      ID 'ACTVT' FIELD '03'.
      IF sy-subrc <> 0.
        DELETE i_cab.
        CONTINUE.
      ENDIF.

      CLEAR <cab>-fkdat.
      <cab>-name_ag = get( tabla = 'KNA1' clave = <cab>-kunnr ).

      SELECT SINGLE bstkd bstdk FROM vbkd
        INTO (<cab>-bstkd, <cab>-bstdk)
       WHERE vbeln = <cab>-vbeln
         AND posnr = '000000'.

      SELECT SINGLE kunnr FROM vbpa
        INTO <cab>-kunwe
       WHERE vbeln = <cab>-vbeln
         AND parvw = 'WE'.
      <cab>-name_we = get( tabla = 'KNA1' clave = <cab>-kunwe ).

* Buscamos entregas
      CLEAR i_tknum.
      SELECT DISTINCT vbeln FROM vbfa
        INTO TABLE @DATA(i_entregas)
       WHERE vbelv = @<cab>-vbeln
         AND vbtyp_n = 'J'
         AND stufe = 0
       ORDER BY vbeln.
      IF sy-subrc = 0.
        CLEAR cont.
        LOOP AT i_entregas ASSIGNING FIELD-SYMBOL(<entrega>).
          SELECT SINGLE vbeln, wadat_ist FROM likp
            INTO (@<entrega>-vbeln, @DATA(l_wadat_ist))
           WHERE vbeln = @<entrega>-vbeln.
          IF sy-subrc = 0.
            cont = cont + 1.
            IF cont = 1.
              <cab>-entrega1  = <entrega>-vbeln.
              <cab>-wadat_ist = l_wadat_ist.
            ELSE.
              __add_lista_no0 <cab>-entregas <entrega>-vbeln.
            ENDIF.
          ENDIF.
        ENDLOOP.

        IF NOT i_entregas IS INITIAL.
          SELECT vttp~tknum FROM vttp JOIN vttk ON vttp~tknum = vttk~tknum
            APPENDING TABLE i_tknum
           FOR ALL ENTRIES IN i_entregas
          WHERE vbeln = i_entregas-vbeln
            AND vttp~tknum IN s_tknum
            AND daten IN s_daten.
          IF sy-subrc NE 0 AND ( NOT s_tknum IS INITIAL OR NOT s_daten[] IS INITIAL ).
            DELETE i_cab.
            CONTINUE.
          ENDIF.
        ENDIF.


        CLEAR cont.
        LOOP AT i_tknum ASSIGNING FIELD-SYMBOL(<tknum>).
          cont = cont + 1.
          IF cont = 1.
            <cab>-transporte1 = <tknum>.
            SELECT SINGLE daten tdlnr FROM vttk
              INTO (<cab>-daten, <cab>-tdlnr)
             WHERE tknum = <cab>-transporte1.
            <cab>-tdlnr_t = get( tabla = 'LFA1' clave = <cab>-tdlnr ).
          ELSE.
            __add_lista_no0 <cab>-transportes <tknum>.
          ENDIF.
        ENDLOOP.
      ELSE.
        IF NOT <cab>-transporte1 IN s_tknum.
          DELETE i_cab.
          CONTINUE.
        ENDIF.
      ENDIF.
      IF NOT <cab>-entregas IS INITIAL.
        <cab>-entregas = zcl_ap_alv=>set_icono( icono = icon_delivery mensaje = <cab>-entregas ).
      ENDIF.



      IF NOT <cab>-transportes IS INITIAL.
        <cab>-transportes = zcl_ap_alv=>set_icono( icono = icon_transport mensaje = <cab>-transportes ).
      ENDIF.

* Buscamos facturas
      SELECT DISTINCT vbeln, erdat, erzet FROM vbfa
        INTO TABLE @DATA(i_facturas)
       WHERE vbelv = @<cab>-vbeln
         AND vbtyp_n IN ( 'M', 'N', 'O' )
         AND stufe = 0
       ORDER BY vbeln.
      IF sy-subrc <> 0 AND NOT i_entregas IS INITIAL.
        SELECT DISTINCT vbeln erdat erzet FROM vbfa
          INTO TABLE i_facturas
          FOR ALL ENTRIES IN i_entregas
         WHERE vbelv = i_entregas-vbeln
           AND vbtyp_n IN ( 'M', 'N', 'O' )
           AND stufe = 0.
      ENDIF.
      IF NOT i_facturas IS INITIAL.
        SORT i_facturas BY erdat
                           erzet
                           vbeln.
        CLEAR cont.
        LOOP AT i_facturas ASSIGNING FIELD-SYMBOL(<factura>).
          SELECT SINGLE fkdat, fkart, bukrs FROM vbrk
            INTO CORRESPONDING FIELDS OF @vbrk
           WHERE vbeln = @<factura>-vbeln
             AND fksto = ''
             AND sfakn = ''.
          IF sy-subrc <> 0.
            CONTINUE.
          ENDIF.

          cont = cont + 1.
          IF cont = 1.
            <cab>-factura1 = <factura>-vbeln.
            <cab>-fkdat    = vbrk-fkdat.
            <cab>-fkart    = vbrk-fkart.
            <cab>-bukrs    = vbrk-bukrs.
            SELECT SINGLE budat FROM bkpf
              INTO <cab>-budat
             WHERE awtyp = 'VBRK'
               AND awkey = <factura>-vbeln.
          ELSE.
            __add_lista_no0 <cab>-facturas <factura>-vbeln.
          ENDIF.
        ENDLOOP.
      ENDIF.
      IF NOT <cab>-facturas IS INITIAL.
        <cab>-facturas = zcl_ap_alv=>set_icono( icono = icon_convert mensaje = <cab>-facturas ).
      ENDIF.

      validar_cab( CHANGING cab = <cab> ).
    ENDLOOP.

    LOOP AT i_cab ASSIGNING <cab> WHERE vbeln IN r_vbeln.
      SELECT vbap~posnr, vbap~matnr, kdmat, posex, arktx, mvgr1, mvgr2, kwmeng, lsmeng, zmeng, vrkme,
             pstyv, werks, lgort, vstel,
             abgru, lfsta, fksta, gbsta, absta, kzwi6, netwr AS netwr_p, erdat AS erdat_p,
             vbkd~posnr AS vbkd_posnr, podkz AS podkz_p,
             mara~mtart
        FROM vbap JOIN vbup ON vbap~vbeln = vbup~vbeln
                           AND vbap~posnr = vbup~posnr
                  JOIN mara ON vbap~matnr = mara~matnr
       LEFT OUTER JOIN vbkd ON vbap~vbeln = vbkd~vbeln
                           AND vbap~posnr = vbkd~posnr
        INTO TABLE @DATA(i_pos_ent)
       WHERE vbap~vbeln = @<cab>-vbeln
         AND vbap~matnr IN @s_matnr
         AND pstyv IN @s_pstyv
         AND podkz IN @s_podkzp
         AND mtart IN @s_mtart
         AND uepos IN @r_uepos.
      IF sy-subrc <> 0.
        DELETE i_cab.
        CONTINUE.
      ELSE.
        DATA(l_hay_pos) = ''.
        LOOP AT i_pos_ent ASSIGNING FIELD-SYMBOL(<pos_ent>).
          CLEAR l_pos.
          MOVE-CORRESPONDING <cab> TO l_pos.
          MOVE-CORRESPONDING <pos_ent> TO l_pos.

          IF <pos_ent>-vbkd_posnr IS INITIAL AND <cab>-podkz = 'X'.
            l_pos-podkz_p = 'X'.
          ENDIF.

* APC20200916 La cantidad que queremos considerar depende de...
          IF <pos_ent>-lsmeng > 0. " Si tenemos cantidad entrega confirmada, cogemos este valor
            l_pos-kwmeng = <pos_ent>-lsmeng.
          ELSEIF <pos_ent>-zmeng > 0. " Si no, normalmente tendremos informada la cantidad previsata
            l_pos-kwmeng = <pos_ent>-zmeng.
          ELSE.
            " En cualquier otro caso, dejamos lo que tuviera KWMENG.
          ENDIF.

          l_pos-meins = get( tabla = 'MEINS' clave = l_pos-matnr ).

           SELECT SINGLE edatu FROM vbep
           INTO l_pos-edatu
          WHERE vbeln = <cab>-vbeln
            AND posnr = <pos_ent>-posnr.

          CLEAR: l_pos-entrega1,
                 l_pos-entregas.
          CLEAR i_entregas.
          SELECT vbeln, posnn, rfmng, meins FROM vbfa
            INTO TABLE @DATA(i_entregasp)
           WHERE vbelv = @<cab>-vbeln
             AND posnv = @<pos_ent>-posnr
             AND vbtyp_n = 'J'
             AND stufe = 0
            ORDER BY vbeln.
          CLEAR cont.
          LOOP AT i_entregasp ASSIGNING FIELD-SYMBOL(<entregap>).
            SELECT SINGLE lfimg vrkme FROM lips
              INTO CORRESPONDING FIELDS OF lips
            WHERE vbeln = <entregap>-vbeln
              AND posnr = <entregap>-posnn.
            IF sy-subrc <> 0.
              CONTINUE.
            ENDIF.

            l_pos-lfimg     = l_pos-lfimg + lips-lfimg.

            l_pos-lfimg_unp = l_pos-lfimg_unp + o_cache->get_mat( matnr          = l_pos-matnr
                                                                  unidad_origen  = lips-vrkme
                                                                  unidad_destino = l_pos-vrkme
                                                                  cantidad       = lips-lfimg ).
            l_pos-vrkme_e   = <entregap>-meins.
            SELECT SINGLE vbeln FROM likp
              INTO <entregap>
             WHERE vbeln = <entregap>-vbeln.
            IF sy-subrc = 0.
              DATA(l_ctd_picking) = zcl_ap_entregas=>get_ctd_picking( vbeln = <entregap>-vbeln posnr = <entregap>-posnn add_subpos = '' select = 'X' ).
              l_pos-pikmg = l_pos-pikmg + l_ctd_picking.

              cont = cont + 1.
              IF cont = 1.
                l_pos-entrega1 = <entregap>-vbeln.
                l_pos-entregap = <entregap>-posnn.

                SELECT SINGLE pdsta FROM vbup
                  INTO (l_pos-pdsta)
                 WHERE vbeln = l_pos-entrega1
                   AND posnr = l_pos-entregap.
              ELSEIF l_pos-entrega1 <> <entregap>-vbeln.
                __add_lista_no0 l_pos-entregas <entregap>-vbeln.
              ENDIF.

              CLEAR tvpod-podmg.
              SELECT SUM( podmg ) FROM tvpod
                INTO tvpod-lfimg
               WHERE vbeln = <entregap>-vbeln
                 AND posnr = <entregap>-posnn.
              IF tvpod-lfimg <> 0.
                l_pos-ctd_are = l_pos-ctd_are + tvpod-lfimg.
              ELSE.
                IF l_pos-pdsta = 'C'.
                  SELECT SINGLE posnr FROM tvpod
                    INTO lips-posnr
                   WHERE vbeln = <entregap>-vbeln
                     AND posnr = <entregap>-posnn.
                  IF sy-subrc <> 0.
                    l_pos-ctd_are = l_pos-ctd_are + lips-lfimg.
                  ENDIF.
                ENDIF.
              ENDIF.

              IF l_pos-grund IS INITIAL.
                SELECT SINGLE grund FROM tvpod
                  INTO (l_pos-grund)
                 WHERE vbeln = <entregap>-vbeln
                   AND posnr = <entregap>-posnn
                   AND grund <> ''.
              ENDIF.

              l_pos-ctd_falta = l_pos-kwmeng - l_pos-lfimg .
            ENDIF.

            CLEAR i_tknum.
            SELECT tknum FROM vttp
              APPENDING TABLE i_tknum
             FOR ALL ENTRIES IN i_entregasp
            WHERE vbeln = i_entregasp-vbeln.
            SORT i_tknum.
            DELETE ADJACENT DUPLICATES FROM i_tknum.

            CLEAR cont.
            LOOP AT i_tknum ASSIGNING <tknum>.
              cont = cont + 1.
              IF cont = 1.
                l_pos-transporte1 = <tknum>.
              ELSE.
                __add_lista_no0 l_pos-transportes <tknum>.
              ENDIF.
            ENDLOOP.
          ENDLOOP.
          IF NOT l_pos-entregas IS INITIAL.
            l_pos-entregas = zcl_ap_alv=>set_icono( icono = icon_delivery mensaje = l_pos-entregas ).
          ENDIF.

          IF NOT l_pos-transportes IS INITIAL.
            l_pos-transportes = zcl_ap_alv=>set_icono( icono = icon_transport mensaje = l_pos-transportes ).
          ENDIF.
          l_pos-ctd_pend  = l_pos-kwmeng - l_pos-lfimg_unp.
          IF l_pos-ctd_are > 0.
            l_pos-faltas = l_pos-ctd_pend - l_pos-ctd_are.
          ENDIF.

          IF <cab>-entrega1 IS INITIAL.
            <cab>-entrega1 = l_pos-entrega1.
            <cab>-entregas = l_pos-entregas.
          ENDIF.

* Buscamos facturas
          IF NOT <cab>-factura1 IS INITIAL.
            CLEAR: l_pos-factura1,
                   l_pos-facturas,
                   l_pos-fkdat.
            CLEAR i_facturas.
            SELECT DISTINCT vbeln, posnn, erdat, erzet FROM vbfa
              INTO TABLE @DATA(i_facturasp)
                 WHERE vbelv = @<cab>-vbeln
                   AND posnv = @<pos_ent>-posnr
                   AND stufe = 0
               AND vbtyp_n IN ( 'M', 'N', 'O' )
             ORDER BY vbeln.
            IF sy-subrc <> 0 AND NOT i_entregasp IS INITIAL.
              SELECT DISTINCT vbeln posnn erdat erzet FROM vbfa
                INTO TABLE i_facturasp
                FOR ALL ENTRIES IN i_entregasp
               WHERE vbelv = i_entregasp-vbeln
                 AND posnv = i_entregasp-posnn
                 AND stufe = 0
                 AND vbtyp_n IN ( 'M', 'N', 'O' ).
            ENDIF.
            IF NOT i_facturasp IS INITIAL.
              SORT i_facturasp BY erdat
                                  erzet
                                  vbeln.
              CLEAR cont.
              LOOP AT i_facturasp ASSIGNING FIELD-SYMBOL(<facturap>).
                SELECT SINGLE fkdat fkart bukrs FROM vbrk
                  INTO CORRESPONDING FIELDS OF vbrk
                 WHERE vbeln = <facturap>-vbeln
                   AND fksto = ''
                   AND sfakn = ''.
                IF sy-subrc <> 0.
                  CONTINUE.
                ENDIF.

                cont = cont + 1.
                IF cont = 1.
                  l_pos-factura1 = <facturap>-vbeln.
                  l_pos-facturap = <facturap>-posnn.
                  l_pos-fkdat    = vbrk-fkdat.
                  l_pos-fkart    = vbrk-fkart.
                  l_pos-bukrs    = vbrk-bukrs.
                  SELECT SINGLE budat FROM bkpf
                    INTO l_pos-budat
                   WHERE awtyp = 'VBRK'
                     AND awkey = <facturap>-vbeln.

                  SELECT SINGLE fkimg netwr AS netwr_f FROM vbrp
                    INTO CORRESPONDING FIELDS OF l_pos
                   WHERE vbeln = <facturap>-vbeln
                     AND posnr = <facturap>-posnn.
                ELSE.
                  __add_lista_no0 l_pos-facturas <facturap>-vbeln.
                ENDIF.
              ENDLOOP.
            ENDIF.
            IF NOT l_pos-facturas IS INITIAL.
              l_pos-facturas = zcl_ap_alv=>set_icono( icono = icon_convert mensaje = l_pos-facturas ).
            ENDIF.
          ENDIF.

          validar_pos( CHANGING pos = l_pos ).

          APPEND l_pos TO i_pos.
          l_hay_pos = 'X'.
        ENDLOOP.
        IF l_hay_pos IS INITIAL.
          DELETE i_cab.
          CONTINUE.
        ENDIF.
      ENDIF.
    ENDLOOP.

    SORT i_cab BY vbeln.
    SORT i_pos BY vbeln
                  posnr.
    i_cab_ini = i_cab.
    i_pos_ini = i_pos.
  ENDMETHOD.                                               " seleccionar_datos

  METHOD status_dynpro_0100.
    DATA(l_excluir) = 'GRABAR'.

    status_dynpro( EXPORTING cprog = 'ZAP_STATUS' status = 'ST_DYN' excluir = l_excluir CHANGING i_listado = i_cab ).
    IF inicio IS NOT INITIAL.
      RETURN.
    ENDIF.

    inicio = 'X'.

    o_alv->variant-variant = p_vari.

*      o_alv->add_button( button = 'F02' text = 'Listado entregas'  icon = icon_delivery ).

    o_alv->add_button( button = 'F01' text = 'Flujo'  icon = icon_te_receipts ucomm = 'FLUJO' ).

    IF p_cab = 'X'.
      o_alv->nombre_tabla = 'I_CAB'.
      o_alv->set_campos_tabint( i_cab[] ).
      o_alv->set_field(  campo = 'LIGHTS,VBELN' op = 'KEY' ).
      o_alv->set_orden( 'VBELN' ).
      o_alv->set_field_quitar( 'ENTREGAP,FACTURAP' ).
      o_alv->set_field_text( campo = 'ABHOV' valor = 'HoraSol.Ent.' valor2 = 'Hora Solicitada Entrega' ).
    ELSEIF p_det = 'X'.
*          o_alv->add_button( button = 'F01' text = 'Generar entrega'  icon = icon_ws_truck ).
      o_alv->nombre_tabla = 'I_POS'.
      o_alv->set_campos_tabint( i_pos[] ).

      o_alv->set_field(  campo = 'LIGHTS,VBELN' op = 'KEY' ).
      o_alv->set_orden( 'VBELN,VDATU,PRSDT,AUART,ERDAT,KUNNR,NAME_AG' ).
      o_alv->set_field_noout( 'KUNWE,NAME_WE,BSTKD' ).
      o_alv->set_field_quitar('CAMPOS_MOD,ERROR,LFIMG_UNP,KWMENG_SUST').

      o_alv->set_field_hotspot( campo = 'MATNR' auto = 'X' ).
      o_alv->set_field_text( campo = 'ABHOV' valor = 'HoraSol.Ent.' valor2 = 'Hora Solicitada Entrega' ).
      o_alv->set_field_text( campo = 'CTD_PEND' valor = 'C.Pend.' valor2 = 'Cantidad pendiente de entregar' ).
      o_alv->set_field_text( campo = 'FALTAS' valor = 'Faltas' valor2 = 'Faltas:Ctd.ARE - Ctd.Pedido Rectificada' ).
      o_alv->set_field_text( campo = 'CTD_ARE' valor = 'C.ARE' valor2 = 'Cantidad confirmada ARE' ).
      o_alv->set_field_text( campo = 'NETWR_P' valor = 'Neto Posición' valor2 = 'Valor neto posición' ).
      o_alv->set_field_text( campo = 'ERDAT_P' valor = 'F.Cr.Pos.' valor2 = 'Fecha creación posición' ).
      o_alv->set_field_text( campo = 'NETWR_F' valor = 'Neto Factura' valor2 = 'Valor neto factura' ).
      o_alv->set_field( campo = 'CTD_ARE' op = 'NO_CERO' ).
      o_alv->set_field_text( campo = 'CTD_FALTA' valor = 'Ctd.Falta' valor2 = 'Cantidad faltante' ).
      o_alv->set_field_text( campo = 'SUST' valor = 'Sust.' valor2 = 'Material sustitutivo' ).
      o_alv->set_field_text( campo = 'LFIMG_SUST' valor = 'Ctd.Sust.' valor2 = 'Ctd.sustitutivo' ).
      o_alv->set_field(  campo = 'CTD_FALTA,CTD_PEND,FALTAS' op = 'NO_CERO' ).

    ENDIF.

    o_alv->registrar_mod( ).
    o_alv->set_layout( no_rowmove = 'X' no_rowins = 'X' style = 'STYLE' colort = 'COLOR' ).
    o_alv->quitar_opciones( cl_gui_alv_grid=>mc_fc_refresh ).
    o_alv->set_field_quitar( 'CHECK,KNUMV' ).
    o_alv->set_field_hotspot( campo = 'VBELN,KUNNR' auto = 'X'  ).
    o_alv->set_field_hotspot( campo = 'KUNWE' valor = 'XD03'  ).

    o_alv->set_field_text( campo = 'ENTREGA1' valor = 'Entrega' ).
    o_alv->set_field_text( campo = 'ENTREGAP' valor = 'P.Ent.' valor2 = 'Posición entrega' ).
    o_alv->set_field_text( campo = 'FACTURAP' valor = 'P.Fac.' valor2 = 'Posición factura' ).
    o_alv->set_field_text( campo = 'ENTREGAS' valor = 'Entregas' valor2 = 'Más entregas' ).
    o_alv->set_field_text( campo = 'TRANSPORTES' valor = 'Transportes' valor2 = 'Más transportes' ).
    o_alv->set_field_text( campo = 'FACTURA1' valor = 'Factura' ).
    o_alv->set_field_text( campo = 'FACTURAS' valor = 'Facturas' valor2 = 'Más facturas' ).
    o_alv->set_field_text( campo = 'NETWR' valor = 'Neto Cabecera' valor2 = 'Valor neto cabecera' ).
    o_alv->set_field_hotspot( campo = 'ENTREGA1,ENTREGAS' valor = 'VL03N'  ).
    o_alv->set_field_hotspot( campo = 'FACTURA1,FACTURAS' valor = 'VF03'  ).
    o_alv->set_field_hotspot( campo = 'TRANSPORTE1,TRANSPORTES' valor = 'VT03N'  ).
    o_alv->set_field_text( campo = 'ERDAT' valor = 'F.Cr.Cab.' valor2 = 'Fecha creación cabecera' ).
    o_alv->set_field_text( campo = 'WADAT_IST' valor = 'FExpedición' valor2 = 'Fecha de expedición' ).

    sgpi_texto( 'Generando informe' ).

    IF p_cab = 'X'.
      o_alv->show( EXPORTING handle = CONV #( get_handle( ) ) CHANGING tabla = i_cab ).
    ELSEIF p_det = 'X'.
      o_alv->show( EXPORTING handle = CONV #( get_handle( ) ) CHANGING tabla = i_pos ).
    ENDIF.

    o_alv->set_seleccion( CHANGING t_tabla = i_cab ).
  ENDMETHOD.

  METHOD command_dynpro_0100.
    DATA: l_tabla    TYPE REF TO data,
          l_comm_sel TYPE string VALUE 'FLUJO ',
          l_hay_sel  TYPE c LENGTH 1.

    FIELD-SYMBOLS <tabla> TYPE STANDARD TABLE.

    IF p_cab = 'X'.
      l_tabla = REF #( i_cab ).
    ELSE.
      l_tabla = REF #( i_pos ).
    ENDIF.
    ASSIGN l_tabla->* TO <tabla>.

    command_dynpro( EXPORTING o_alv         = o_alv
                              seleccion     = l_comm_sel
                    CHANGING  i_listado     = <tabla>
                              i_listado_ini = <tabla>
                              hay_sel       = l_hay_sel ).

    IF zcl_ap_lista=>es_elemento( lista = l_comm_sel elemento = ucomm ).
      IF l_hay_sel IS INITIAL.
        RETURN.
      ELSE.

      ENDIF.
    ENDIF.

    CASE ucomm.
      WHEN 'FLUJO'.
        DATA(o_bi) = NEW zcl_ap_batch_input( ).
        LOOP AT <tabla> ASSIGNING FIELD-SYMBOL(<linea>).
          ASSIGN COMPONENT 'CHECK' OF STRUCTURE <linea> TO FIELD-SYMBOL(<check>).
          IF <check> <> 'X'.
            CONTINUE.
          ENDIF.

          o_bi->inicio( ).

          ASSIGN COMPONENT 'VBELN' OF STRUCTURE <linea> TO FIELD-SYMBOL(<vbeln>).
          ASSIGN COMPONENT 'POSNR' OF STRUCTURE <linea> TO FIELD-SYMBOL(<posnr>).
          IF sy-subrc = 0.
            o_bi->dynpro( program = 'SAPMV45A' dynpro = '0102' okcode = '=UER2' ).
            o_bi->campos( campo = 'VBAK-VBELN' valor = <vbeln> ).
            o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '=POPO' ).
            o_bi->dynpro( program = 'SAPMV45A' dynpro = '0251' okcode = '=POSI' ).
            o_bi->campos( campo = 'RV45A-POSNR' valor = <posnr> ). " Número de posición del documento comercial

            o_bi->dynpro( program = 'SAPMV45A' dynpro = '4001' okcode = '=IFLU' ).
            o_bi->campos( campo = 'RV45A-VBAP_SELKZ(01)' valor = 'X' ). " Indicador de selección en dynpros de lista
          ELSE.
            o_bi->dynpro( program = 'SAPMV45A' dynpro = '0102' okcode = '=IFLU' ).
            o_bi->campos( campo = 'VBAK-VBELN' valor = <vbeln> ).
          ENDIF.

          o_bi->llamar_transaccion( tcode = 'VA03' modo = 'E' ).
        ENDLOOP.
    ENDCASE.
  ENDMETHOD.

  METHOD validar_cab.
    DATA l_resaltar_campos TYPE string.

    CLEAR: cab-message,
           cab-style,
           cab-color,
           cab-lights.

    get_estado_cab( EXPORTING vbeln   = cab-vbeln
                              cab     = cab
                    IMPORTING icono   = DATA(l_icono)
                              message = cab-message ).

    IF NOT cab-lifsk IS INITIAL.
      __add_lista l_resaltar_campos 'LIFSK'.
    ENDIF.

    set_status_list( EXPORTING icono = l_icono resaltar_campos = l_resaltar_campos color_resalte = 'R' CHANGING list = cab ).
  ENDMETHOD.

  METHOD init.
  ENDMETHOD.

  METHOD get_handle.
    handle = p_cab && '_' && 'C'.
  ENDMETHOD.

  METHOD get_estado_pos.
    CLEAR: icono,
           message.

    SELECT vbeln, lfimg, pstyv FROM lips
      INTO TABLE @DATA(i_ent)
     WHERE vgbel = @vbeln
       AND vgpos = @posnr.

    IF i_ent[] IS INITIAL.
* - ROJO, no se han generado entregas (Texto semáforo "Sin entregas")
      icono = icon_red_light.
      message = 'Sin entregas'.
    ELSE.
      DATA(l_ctd_entrega) = REDUCE lfimg( INIT x = 0 FOR ent IN i_ent NEXT x = x + ent-lfimg ).
      DATA(i_ent_simple) = zcl_ap_fs=>get_col_tabla( tabla = i_ent campo = 'VBELN' ).
      " TODO: variable is assigned but never used (ABAP cleaner)
      LOOP AT i_ent_simple ASSIGNING FIELD-SYMBOL(<ent>).
        icono = icon_yellow_light.
        message = 'Entregado parcialmente'.
      ENDLOOP.

      SELECT SINGLE kwmeng, lsmeng, zmeng FROM vbap
        INTO (@DATA(l_kwmeng), @DATA(l_lsmeng), @DATA(l_zmeng) )
       WHERE vbeln = @vbeln
         AND posnr = @posnr.

      IF l_lsmeng > 0.
        l_kwmeng = l_lsmeng.
      ELSEIF l_zmeng > 0.
        l_kwmeng = l_zmeng.
      ENDIF.

      IF l_ctd_entrega >= l_kwmeng.
        icono = icon_green_light.
        message = 'Entregado totalmente'.
      ELSE.
        icono = icon_yellow_light.
        message = 'Entregado parcialmente'.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD get_estado_cab.
    DATA i_iconos TYPE TABLE OF icon_d.

    CLEAR: icono,
           message.

    IF NOT cab-lifsk IS INITIAL.
      icono = icon_warning.
      message = |Bloqueado para entrega { cab-lifsk }|.
    ELSE.
      SELECT posnr FROM vbap
        INTO TABLE @DATA(i_posnr)
       WHERE vbeln = @vbeln
         AND abgru = ''.

      LOOP AT i_posnr ASSIGNING FIELD-SYMBOL(<posnr>).
        get_estado_pos( EXPORTING vbeln   = vbeln
                                  posnr   = <posnr>-posnr
                        IMPORTING icono   = DATA(l_icono)
                                  message = DATA(l_msg) ).
        IF NOT l_icono IS INITIAL.
          COLLECT l_icono INTO i_iconos.
          DATA(l_message) = l_msg.
        ENDIF.
      ENDLOOP.

      IF lines( i_iconos ) = 1.
        icono   = l_icono.
        message = l_message.
      ELSEIF lines( i_iconos ) > 1.
        icono   = icon_yellow_light.
        message = 'Entregado parcialmente'.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD validar_pos.
    DATA l_resaltar_campos TYPE string.

    CLEAR: pos-message,
           pos-style,
           pos-color,
           pos-lights,
           pos-error.


    IF NOT pos-vbeln IS INITIAL.
      get_estado_pos( EXPORTING vbeln   = pos-vbeln
                                posnr   = pos-posnr
                      IMPORTING icono   = DATA(l_icono)
                                message = pos-message ).

    ENDIF.

    IF NOT pos-grund IS INITIAL.
      IF pos-ctd_are <> pos-lfimg.
        l_resaltar_campos = 'GRUND,CTD_ARE'.
      ENDIF.
    ENDIF.

    IF NOT pos-abgru IS INITIAL.
      __add_lista l_resaltar_campos 'ABGRU'.
    ENDIF.

    SELECT SINGLE vbeln, vbtyp_n FROM vbfa
      INTO (@DATA(l_vbeln_dev), @DATA(l_vbtyp_n))
     WHERE vbelv = @pos-vbeln
       AND posnv = @pos-posnr
       AND vbtyp_n IN ( 'H', " Devolución
                        'O', " Abono
                        'P' ). " Nota de cargo
    IF sy-subrc = 0.
      DATA(l_tipo) = get( tabla = 'D VBTYP' clave = l_vbtyp_n ).
      SELECT SINGLE auart FROM vbak
        INTO @DATA(l_auart)
       WHERE vbeln = @l_vbeln_dev.
      IF sy-subrc = 0.
        pos-ind_inc = |Pedido de { l_tipo } { l_auart }|.
        pos-ind_inc = zcl_ap_alv=>set_icono( icono = icon_led_yellow mensaje = pos-ind_inc ).
      ELSE.
        pos-ind_inc = |{ l_tipo }|.
        pos-ind_inc = zcl_ap_alv=>set_icono( icono = icon_system_help mensaje = pos-ind_inc ).
      ENDIF.

    ENDIF.

    set_status_list( EXPORTING icono = l_icono resaltar_campos = l_resaltar_campos color_resalte = 'R' CHANGING list = pos ).
  ENDMETHOD.

ENDCLASS.
*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

  IF sy-batch IS INITIAL.
    o_prog->o_event = NEW #( boton_refrescar = 'X'
                             boton_excel     = 'Y'
                             o_prog          = o_prog ).

    o_prog->o_alv   = NEW #( estructura = ''
                             o_event    = o_prog->o_event ).

    o_prog->o_alv->key_layout-handle = o_prog->get_handle( ).
    IF p_vari IS INITIAL.
      p_vari = o_prog->o_alv->get_default_layout( ).
    ENDIF.
  ENDIF.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  o_prog->o_alv->key_layout-handle = o_prog->get_handle( ).
  IF NOT o_prog->o_alv IS INITIAL.
    p_vari = o_prog->o_alv->get_f4_layout( ).
  ENDIF.

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' excluir = 'P_PED_*,P_CAB,P_DET' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

AT SELECTION-SCREEN OUTPUT.
  zcl_ap_dynpro=>screen_visible( group1 = 'POS' variable = p_det ).

  o_prog->o_alv->key_layout-handle = o_prog->get_handle( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->init( ).
  o_prog->buscar_datos( ).

  IF sy-batch IS INITIAL.
    CALL SCREEN 0100.
  ELSE.
    MESSAGE 'Este programa no se puede ejecutar en fondo'(pnf) TYPE 'E'.
  ENDIF.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*

MODULE status_0100 OUTPUT.

  o_prog->status_dynpro_0100( ).

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  o_prog->command_dynpro_0100( ).

ENDMODULE.
