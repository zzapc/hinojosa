
class ZCL_SI_OMP_PROD_REPLENISHMENT1 definition
  public
  create public .

public section.

  interfaces ZII_SI_OMP_PROD_REPLENISHMENT1 .

  methods CARGA_NT_MODIFICADAS
    importing
      !IV_LGNUM type LGNUM
    exporting
      !ET_NT_MODIFICADAS type ZTT_LTBK .
  methods BORRA_NT_ABIERTAS
    importing
      !IV_LGNUM type LGNUM
      !IV_WERKS type WERKS_D
      !IV_CHARG type CHARG_D optional
      !IT_NT_MODIFICADAS type ZTT_LTBK
    exporting
      !ET_NT_BORRADAS type ZTT_LTBK .
  methods ERROR_MATERIAL_LOG
    importing
      !PI_SUBRC type SYST_SUBRC
    returning
      value(PC_KO) type STRING .
  methods ENVIA_MAIL_NOTIFICACION
    importing
      !IT_NT_NOTIFICADAS type ZTT_LTBK
      !IT_NT_BORRADAS type ZTT_LTBK
      !IV_WERKS type WERKS_D
      value(IT_LOG) type ZTTWM0001 .
  methods CREAR_NTS
    importing
      !IV_LGORT type LGORT_D
      !IV_BWART type BWART
    exporting
      !EV_HAY_ERROR type XFELD
    changing
      !CT_LTBK type ZTT_LTBK
      !CT_LTBP type LEINT_LTBP_T
      !CV_OK type TBNUM
      !CV_KO type BAPI_MSG .
protected section.
private section.

  data GAT_BDCDATA type BDCDATA_TAB .
  constants GAC_NODATA type BDC_FVAL value '/' ##NO_TEXT.
  data:
    gac_th(4) value '<th>' ##NO_TEXT.
  data:
    gac_thf(5) value '</th>' ##NO_TEXT.
  data:
    gac_tr(4) value '<tr>' ##NO_TEXT.
  data:
    gac_trf(5) value '</tr>' ##NO_TEXT.
  data:
    gac_td(4) value '<td>' ##NO_TEXT.
  data:
    gac_tdf(5) value '</td>' ##NO_TEXT.

  methods BORRA_NECESIDAD
    importing
      !PI_LGNUM type LGNUM
      !PI_TBNUM type TBNUM
    returning
      value(PR_BORRADA) type ABAP_BOOL .
  methods NOTIFICA_BORRADA
    importing
      !PI_LGNUM type LGNUM
      !PI_TBNUM type TBNUM
    exporting
      !PT_NT_BORRADAS type ZTT_LTBK .
  methods F_BDC_DYNPRO
    importing
      !PE_DYN type BDC_DYNR
      !PE_PROG type BDC_PROG
    exporting
      !PT_BDCDATA type BDC_PROG .
  methods F_BDC_FIELD
    importing
      !PE_FNAM type FNAM_____4
      !PE_FVAL type BDC_FVAL .
  methods DAME_TABLA_CREADAS
    importing
      value(IT_LOG) type ZTTWM0001
    changing
      !PT_MESS type SOLI_TAB .
  methods DAME_TABLE_ERRORES
    importing
      value(IT_LOG) type ZTTWM0001
    changing
      !PT_MESS type SOLI_TAB .
endclass. "ZCL_SI_OMP_PROD_REPLENISHMENT1 definition
class ZCL_SI_OMP_PROD_REPLENISHMENT1 implementation.
  method BORRA_NECESIDAD.

    DATA: ls_opt TYPE ctu_params,
          lt_msg TYPE TABLE OF bdcmsgcoll,
          lv_aux TYPE bdc_fval.

    REFRESH GAT_BDCDATA.
    CLEAR pr_borrada.

    ls_opt-nobinpt = abap_true.
    ls_opt-dismode = 'N'.

    f_bdc_dynpro( EXPORTING pe_prog = 'SAPML02B' pe_dyn = '0100').
    f_bdc_field( EXPORTING pe_fnam = 'BDC_CURSOR' pe_fval = 'LTBK-TBNUM' ).
    f_bdc_field( EXPORTING pe_fnam = 'BDC_OKCODE' pe_fval ='/00' ).
    MOVE pi_lgnum TO lv_aux.
    f_bdc_field( EXPORTING pe_fnam = 'LTBK-LGNUM' pe_fval = lv_aux ).
    MOVE pi_tbnum TO lv_aux.
    f_bdc_field( EXPORTING pe_fnam = 'LTBK-TBNUM' pe_fval = lv_aux ).

    f_bdc_dynpro( EXPORTING pe_prog = 'SAPML02B' pe_dyn = '1103').
    f_bdc_field( EXPORTING pe_fnam = 'BDC_OKCODE' pe_fval = '=DLK' ).

    f_bdc_dynpro( EXPORTING pe_prog = 'SAPLSPO1' pe_dyn = '0400').
    f_bdc_field( EXPORTING pe_fnam = 'BDC_OKCODE' pe_fval = '=YES' ).

    CALL TRANSACTION 'LB02' USING GAT_BDCDATA OPTIONS FROM ls_opt MESSAGES INTO lt_msg .

    LOOP AT lt_msg INTO DATA(ls_msg) WHERE msgtyp = 'E'.

      CLEAR pr_borrada.

    ENDLOOP.
    IF sy-subrc NE 0.
      pr_borrada = abap_true.
    ENDIF.

  endmethod.
  METHOD borra_nt_abiertas.


    DATA: lt_ltbk  TYPE ztt_ltbk,
          lt_ltbp  TYPE leint_ltbp_t,
          ls_ltbc  TYPE ltbc,
          lv_canc  TYPE abap_bool,
          lt_ltbc  TYPE STANDARD TABLE OF ltbc,
          ls_ltbk  TYPE ltbk,
          ls_modif TYPE ltbk,
          lv_ok    TYPE abap_bool.

    IF lv_canc IS NOT INITIAL.

      SELECT * FROM ltbp
        INTO CORRESPONDING FIELDS OF TABLE lt_ltbp
        WHERE lgnum = iv_lgnum AND
              elikz = space AND
              werks = iv_werks.
*         AND charg = '2000' .  " en el original estaba peró CVIVO comentó luego quitarlo el 20-3-19

      IF lt_ltbp IS NOT INITIAL.
        SELECT *
          FROM ltbk
          INTO CORRESPONDING FIELDS OF TABLE lt_ltbk
          FOR ALL ENTRIES IN lt_ltbp
          WHERE lgnum EQ lt_ltbp-lgnum AND
                tbnum EQ lt_ltbp-tbnum .

      ENDIF.

    ELSE.
* seleccionamos las NT abiertas y no modificadas!!!
      SELECT *
        FROM ltbk
        INTO CORRESPONDING FIELDS OF TABLE lt_ltbk
        WHERE lgnum = iv_lgnum AND
              statu = space AND
              betyp = 'O' AND
              tbpri EQ ' '.

* miramos que las necesidades no sean del mismo ID de trabajo que las modificadas
      LOOP AT it_nt_modificadas INTO ls_modif.
        LOOP AT lt_ltbk INTO ls_ltbk WHERE benum = ls_modif-benum.
          DELETE lt_ltbk INDEX sy-tabix.
        ENDLOOP.
      ENDLOOP.

    ENDIF.

    LOOP AT lt_ltbk INTO ls_modif.

      lv_ok =  borra_necesidad( EXPORTING pi_lgnum = ls_modif-lgnum
                                          pi_tbnum = ls_modif-tbnum ).

      IF lv_ok IS NOT INITIAL.
        REFRESH lt_ltbc.

        SELECT *
          FROM ltbp
          INTO CORRESPONDING FIELDS OF TABLE lt_ltbp
          WHERE lgnum = ls_modif-lgnum AND
                tbnum = ls_modif-tbnum.

        LOOP AT lt_ltbp ASSIGNING FIELD-SYMBOL(<ls>).

          MOVE-CORRESPONDING <ls> TO ls_ltbc.

          APPEND ls_ltbc TO lt_ltbc.

        ENDLOOP.

        IF lt_ltbc IS NOT INITIAL.

          CALL FUNCTION 'L_TR_CANCEL'
            EXPORTING
              i_save_only_all      = 'X'
*             i_update_task        =
              i_commit_work        = 'X'
            TABLES
              t_ltbc               = lt_ltbc
            EXCEPTIONS
              item_error           = 1
              no_update_item_error = 2
              no_update_no_entry   = 3
              tr_locked            = 4
              OTHERS               = 5.
          IF sy-subrc <> 0.
* Implement suitable error handling here
          ELSE.
            LOOP AT lt_ltbc INTO ls_ltbc.

              notifica_borrada( EXPORTING pi_lgnum = ls_ltbc-lgnum
                                          pi_tbnum = ls_ltbc-tbnum
                                IMPORTING pt_nt_borradas = et_nt_borradas ).
            ENDLOOP.
          ENDIF.

        ENDIF.
      ELSE.
        notifica_borrada( EXPORTING pi_lgnum = ls_modif-lgnum
                                    pi_tbnum = ls_modif-tbnum
                          IMPORTING pt_nt_borradas = et_nt_borradas ).
      ENDIF.

    ENDLOOP.


  ENDMETHOD.
  METHOD carga_nt_modificadas.

* seleccionamos las NT abiertas y no modificadas!!!
    SELECT *
      FROM ltbk
      INTO TABLE et_nt_modificadas
      WHERE lgnum = iv_lgnum AND
            statu = space AND
            betyp = 'O' AND
            tbpri NE ' '.

    IF et_nt_modificadas[] IS NOT INITIAL.
      SELECT *
      FROM ltbk
      APPENDING TABLE et_nt_modificadas
      FOR ALL ENTRIES IN et_nt_modificadas
      WHERE lgnum = et_nt_modificadas-lgnum AND
            benum = et_nt_modificadas-benum.
    ENDIF.


  ENDMETHOD.
  METHOD crear_nts.

    DATA: lt_ltba TYPE STANDARD TABLE OF ltba,
          ls_ltba TYPE ltba,
          ls_ltbk TYPE ltbk,
          ls_ltbp TYPE ltbp,
          lv_mess TYPE bapi_msg,
          ls_ret  TYPE bapiret2.

    READ TABLE ct_ltbk INTO ls_ltbk INDEX 1.
    IF sy-subrc EQ 0.
      MOVE-CORRESPONDING ls_ltbk TO ls_ltba.

      LOOP AT ct_ltbp INTO ls_ltbp.
        MOVE-CORRESPONDING ls_ltbp TO ls_ltba.
        CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
          EXPORTING
            input        = ls_ltba-matnr
          IMPORTING
            output       = ls_ltba-matnr
          EXCEPTIONS
            length_error = 1
            OTHERS       = 2.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.


        ls_ltba-menga = ls_ltbp-menge.

        IF ls_ltbp-meins = 'UN'.
          ls_ltba-altme = 'ST'.
        ELSE.
          ls_ltba-altme = ls_ltbp-meins.
        ENDIF.

        ls_ltba-lgort = iv_lgort.
        ls_ltba-bwlvs = iv_bwart.
        ls_ltba-nlpla = ls_ltbk-nlpla.
        ls_ltba-betyp = 'O'.
        APPEND ls_ltba TO lt_ltba.
      ENDLOOP.

    ENDIF.

    CALL FUNCTION 'L_TR_CREATE'
      EXPORTING
        i_single_item         = 'X'
        i_save_only_all       = 'X'
*       I_UPDATE_TASK         =
        i_commit_work         = 'X'
      TABLES
        t_ltba                = lt_ltba
      EXCEPTIONS
        item_error            = 1
        no_entry_in_int_table = 2
        item_without_number   = 3
        no_update_item_error  = 4
        OTHERS                = 5.

    IF sy-subrc <> 0.

      LOOP AT lt_ltba INTO ls_ltba.
        CALL FUNCTION 'BAPI_MESSAGE_GETDETAIL'
          EXPORTING
            id         = ls_ltba-msgid
            number     = ls_ltba-msgno
            language   = sy-langu
            textformat = 'RTF'
            message_v1 = ls_ltba-msgv1
            message_v2 = ls_ltba-msgv2
            message_v3 = ls_ltba-msgv3
            message_v4 = ls_ltba-msgv4
          IMPORTING
            message    = lv_mess.

        CONCATENATE cv_ko lv_mess INTO cv_ko SEPARATED BY space.
        ev_hay_error = abap_true.
      ENDLOOP.

    ELSE.
      LOOP AT lt_ltba INTO ls_ltba WHERE tbnum IS NOT INITIAL.

        cv_ok = ls_ltba-tbnum.

      ENDLOOP.

    ENDIF.

  ENDMETHOD.
  METHOD dame_tabla_creadas.
    DATA: lv_aux     TYPE string,
          lt_message TYPE soli_tab,
          ls_log     TYPE ZSWM0002,
          ls_message TYPE soli.

    ls_message-line = '<b> <u>·<p> Resumen de NTs creadas por cinumber </b> </u/> </p>'.
    APPEND ls_message TO lt_message.

    CONCATENATE '<table style="width:100%">' gac_tr
                gac_th 'CInumber' gac_thf
                gac_th 'PaperStation' gac_thf
                gac_th 'NT' gac_thf
                gac_th 'Material' gac_thf
                gac_th 'Cantidad' gac_thf gac_trf
                INTO ls_message-line.
    APPEND ls_message TO lt_message.

    LOOP AT it_log INTO ls_log.
      CLEAR ls_message.
      IF ls_log-ok_1 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation1' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ok_1 gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_1 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_1 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.
      IF ls_log-ok_2 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation2' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ok_2 gac_tdf    INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_2 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_2 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.
      IF ls_log-ok_3 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation3' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ok_3 gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_3 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_3 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.
      IF ls_log-ok_4 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation4' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ok_4 gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_4 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_4 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.
      IF ls_log-ok_5 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation5' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ok_5 gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_5 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_5 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.
      IF ls_log-ok_6 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation6' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ok_6 gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_6 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_6 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.

    ENDLOOP.
    ls_message-line = '</table>'.
    APPEND ls_message TO lt_message.

    APPEND LINES OF lt_message TO pt_mess.

  ENDMETHOD.
  METHOD DAME_TABLE_ERRORES.
    DATA: ls_message TYPE soli,
          lt_message TYPE soli_tab,
          ls_log     TYPE ZSWM0002,
          lv_aux     TYPE string.

    ls_message-line = '<b> <u>·<p> Resumen de errores por cinumber </b> </u/> </p>'.
    APPEND ls_message TO lt_message.

    CONCATENATE '<table style="width:100%">' gac_tr
                gac_th 'CInumber' gac_thf
                gac_th 'PaperStation' gac_thf
                gac_th 'Error' gac_thf
                gac_th 'Material' gac_thf
                gac_th 'Cantidad' gac_thf gac_trf
                INTO ls_message-line.
    APPEND ls_message TO lt_message.

    LOOP AT it_log INTO ls_log.
      CLEAR ls_message.
      IF ls_log-ko_1 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation1' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ko_1 gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_1 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_1 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.
      IF ls_log-ko_2 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation2' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ko_2 gac_tdf    INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_2 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_2 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.
      IF ls_log-ko_3 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation3' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ko_3 gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_3 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_3 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.
      IF ls_log-ko_4 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation4' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ko_4 gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_4 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_4 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.
      IF ls_log-ko_5 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation5' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ko_5 gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_5 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_5 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.
      IF ls_log-ko_6 IS NOT INITIAL.
        CONCATENATE gac_tr gac_td ls_log-cinumber gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td 'PaperStation6' gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-ko_6 gac_tdf INTO ls_message-line.
        CONCATENATE ls_message-line gac_td ls_log-matnr_6 gac_tdf INTO ls_message-line.
        MOVE ls_log-menge_6 TO lv_aux. CONDENSE lv_aux.
        CONCATENATE ls_message-line gac_td lv_aux gac_tdf gac_trf INTO ls_message-line.
        APPEND ls_message TO lt_message.
      ENDIF.

    ENDLOOP.
    ls_message-line = '</table>'.
    APPEND ls_message TO lt_message.

    APPEND LINES OF lt_message TO pt_mess.
  ENDMETHOD.
  METHOD envia_mail_notificacion.

    CONSTANTS: lc_th(4)  VALUE '<th>',
               lc_thf(5) VALUE '</th>',
               lc_tr(4)  VALUE '<tr>',
               lc_trf(5) VALUE '</tr>',
               lc_td(4)  VALUE '<td>',
               lc_tdf(5) VALUE '</td>'.

    DATA: ls_mails       TYPE ztmm0025,
          lt_addr        TYPE bcsy_smtpa,
          lo_send_email  TYPE REF TO cl_bcs,
          lo_document    TYPE REF TO cl_document_bcs,
          lo_recipient   TYPE REF TO if_recipient_bcs,
          lv_sent_to_all TYPE os_boolean,
          lo_sender      TYPE REF TO cl_cam_address_bcs,
          lv_sender      TYPE adr6-smtp_addr,
          lv_subject     TYPE so_obj_des,
          lt_message     TYPE soli_tab,
          ls_message     TYPE soli,
          ls_ltbk        TYPE ltbk,
          lv_lin         TYPE i,
          ls_ret         TYPE bapiret2,
          lv_message     TYPE bapi_msg,
          lv_aux         TYPE string,
          ls_log         TYPE zswm0002.

    SELECT SINGLE * FROM ztmm0025
      INTO ls_mails
      WHERE werks EQ iv_werks AND
            proceso = '3'.

    IF sy-subrc EQ 0 AND ls_mails IS NOT INITIAL.

      IF ls_mails-email1 NE space.
        APPEND ls_mails-email1 TO lt_addr.
      ENDIF.
      IF ls_mails-email2 NE space.
        APPEND ls_mails-email2 TO lt_addr.
      ENDIF.
      IF ls_mails-email3 NE space.
        APPEND ls_mails-email3 TO lt_addr.
      ENDIF.
      IF ls_mails-email4 NE space.
        APPEND ls_mails-email4 TO lt_addr.
      ENDIF.

* Inicialización de la clase
      lo_send_email = cl_bcs=>create_persistent( ).

* Cuerpo del email

* Necesidades borradas
      LOOP AT it_nt_borradas INTO ls_ltbk.
        IF sy-tabix EQ 1.
          DESCRIBE TABLE it_nt_borradas LINES lv_lin.
          MOVE lv_lin TO lv_aux.
          CONDENSE lv_aux.
          CONCATENATE '<font size="+3"> <b> <u>·<p> Necesidades borradas. Total ' lv_aux '</b> </u/> </p> </font>' INTO lv_aux SEPARATED BY space.
          ls_message-line = lv_aux.
          APPEND ls_message TO lt_message.
          CLEAR ls_message.
        ENDIF.
        CONCATENATE '<p> Nº necesidad' ls_ltbk-tbnum 'Texto' ls_ltbk-tbktx INTO lv_aux SEPARATED BY space.
        ls_message-line = lv_aux.
        APPEND ls_message TO lt_message.
        CLEAR ls_message.
      ENDLOOP.

* Necesidades Modificadas
      LOOP AT it_nt_notificadas INTO ls_ltbk.
        IF sy-tabix EQ 1.
          DESCRIBE TABLE it_nt_notificadas LINES lv_lin.
          MOVE lv_lin TO lv_aux.
          CONDENSE lv_aux.
          CONCATENATE '<font size="+3">·<b> <u>·<p>  Necesidades modificadas . Total ' lv_aux '</b> </u/> </p> </font>' INTO lv_aux SEPARATED BY space.
          ls_message-line = lv_aux.
          APPEND ls_message TO lt_message.
          CLEAR ls_message.
        ENDIF.
        CONCATENATE '<p>Nº necesidad' ls_ltbk-tbnum 'Texto' ls_ltbk-tbktx '</p>' INTO lv_aux SEPARATED BY space.
        ls_message-line = lv_aux.
        APPEND ls_message TO lt_message.
        CLEAR ls_message.
      ENDLOOP.

      ls_message-line = '<font size="+3"> <b> <u>·<p> Resumen del resultado del fichero </p></font>'.
      APPEND ls_message TO lt_message.
      ls_message-line = text-sty.
      APPEND ls_message TO lt_message.

* tabla resumen de NTs creadas
      dame_tabla_creadas( EXPORTING it_log = it_log
                           CHANGING pt_mess = lt_message ).

* tabla resumen de errores
      dame_table_errores( EXPORTING it_log = it_log
                           CHANGING pt_mess = lt_message ).


* Crear documento
      CONCATENATE 'Log de Interface OMP a SAP, centro' iv_werks INTO lv_subject SEPARATED BY space.

      lo_document =  cl_document_bcs=>create_document( i_type    =  'HTM'
                                                        i_subject =  lv_subject
                                                        i_text    =  lt_message ).
* Enviar documento al email
      lo_send_email->set_document( lo_document ).

* Añadir remitente
      lv_sender = 'sap@hinojosa.es'.

      lo_sender = cl_cam_address_bcs=>create_internet_address( lv_sender  ).
      lo_send_email->set_sender( i_sender = lo_sender ).

* Añadir destinatarios al email
      LOOP AT lt_addr ASSIGNING FIELD-SYMBOL(<fs_addr>).
        lo_recipient = cl_cam_address_bcs=>create_internet_address( <fs_addr> ).
        lo_send_email->add_recipient( i_recipient = lo_recipient ).
      ENDLOOP.
      IF ls_mails-lista NE space. " 58445 - Envío a listas de distribución
        lo_recipient = cl_distributionlist_bcs=>getu_persistent( i_dliname = ls_mails-lista i_private = space ).
        lo_send_email->add_recipient( i_recipient = lo_recipient i_express = 'X' ).
      ENDIF.

* Enviar email
      TRY.
          lv_sent_to_all = lo_send_email->send( i_with_error_screen = 'X' ).
        CATCH cx_send_req_bcs .

      ENDTRY.

*  COMMIT WORK. " no se puede porque estamos en UPDATE!

      IF lv_sent_to_all EQ 'X'.
*   Enviado Correctamente
      ELSE.
*   Error al enviar
      ENDIF.

    ENDIF.
  ENDMETHOD.
  METHOD error_material_log.
    CASE pi_subrc.
      WHEN 1.
        MOVE text-e01 TO pc_ko.
      WHEN 2.
        MOVE text-e02 TO pc_ko.
      WHEN 3.
        MOVE text-e03 TO pc_ko.
      WHEN 4.
        MOVE text-e04 TO pc_ko.
      WHEN 5.
        MOVE text-e05 TO pc_ko.
      WHEN 6.
        MOVE text-e06 TO pc_ko.
      WHEN 7.
    ENDCASE.
  ENDMETHOD.
  METHOD f_bdc_dynpro.
    DATA: ls_bdc TYPE bdcdata.

    ls_bdc-program  = pe_prog.
    ls_bdc-dynpro   = pe_dyn.
    ls_bdc-dynbegin = abap_true.
    APPEND ls_bdc TO gat_bdcdata.
  ENDMETHOD.
  METHOD f_bdc_field.
    DATA: ls_bdc TYPE bdcdata.

    IF pe_fval  <> gac_nodata.
      ls_bdc-fnam  = pe_fnam.
      ls_bdc-fval   = pe_fval.
      APPEND ls_bdc TO gat_bdcdata.
    ENDIF.
  ENDMETHOD.
  METHOD notifica_borrada.
    DATA: ls_ltbk TYPE ltbk.

    SELECT SINGLE *
      FROM ltbk
      INTO CORRESPONDING FIELDS OF ls_ltbk
      WHERE lgnum = pi_lgnum AND
            tbnum = pi_tbnum.

    IF sy-subrc EQ 0.
      APPEND ls_ltbk TO pt_nt_borradas.
    ENDIF.
  ENDMETHOD.
  METHOD zii_si_omp_prod_replenishment1~si_omp_prod_replenishment_in_o.
*** **** INSERT IMPLEMENTATION HERE **** ***


    DATA: "lo_omp_bernabeu     TYPE REF TO zwm_cl_omp_intf_cb,
          lo_omp_hinojosa     TYPE REF TO zwm_cl_omp_intf_hi,
          lv_hay_error        TYPE xfeld,
          lt_hardcodes        TYPE  ztt_wm001,
          lv_warehouse_number TYPE lgnum,
          lv_cont_inf         TYPE i.


*  Vemos de que centro se trata, en función del número de almacén WM
    READ TABLE input-mt_omp_prod_replenishment_in_o-message-ompci ASSIGNING FIELD-SYMBOL(<ls>) INDEX 1.

    WRITE <ls>-warehouse_number TO lv_warehouse_number.
    CONDENSE lv_warehouse_number.

    CLEAR lv_hay_error.


    CASE lv_warehouse_number.
      WHEN '240'.
*      Estoy en Bernabeu

*  posibilidad de hacer bucle infinito y parar la interfase
        SELECT SINGLE * INTO @DATA(ls_tvarvc_inf)
        FROM tvarvc
        WHERE name = 'Z_DEBUG_INTF_APROV_CB'.

        IF sy-subrc = 0 AND ls_tvarvc_inf-low = 'X'.
          WHILE lv_cont_inf = 0.
            CONTINUE.
          ENDWHILE.
        ENDIF.



*        CREATE OBJECT lo_omp_bernabeu
*          EXPORTING
*            data                  = input
*            oref_intf_omp_general = me.
*
*        IF lo_omp_bernabeu IS INITIAL.
*          EXIT.
*        ENDIF.
*
*
*        CALL METHOD lo_omp_bernabeu->gton_interfase.


      WHEN '200'.
*      Estoy en Hinojosa

*  posibilidad de hacer bucle infinito y parar la interfase
        CLEAR: ls_tvarvc_inf.
        SELECT SINGLE * INTO ls_tvarvc_inf
        FROM tvarvc
        WHERE name = 'Z_DEBUG_INTF_APROV_HI'.

        IF sy-subrc = 0 AND ls_tvarvc_inf-low = 'X'.
          WHILE lv_cont_inf = 0.
            CONTINUE.
          ENDWHILE.
        ENDIF.



        CREATE OBJECT lo_omp_hinojosa
          EXPORTING
            data                  = input
            oref_intf_omp_general = me.

        IF lo_omp_hinojosa IS INITIAL.
          EXIT.
        ENDIF.


        CALL METHOD lo_omp_hinojosa->gton_interfase.

      WHEN OTHERS.

    ENDCASE.


  ENDMETHOD.
