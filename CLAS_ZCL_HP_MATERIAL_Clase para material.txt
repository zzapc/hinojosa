
class ZCL_HP_MATERIAL definition
  public
  create public .

public section.

  data _MATNR type MATNR read-only .
  data _MM_MASTER_DATA type ZST_HP_MM_MASTER_DATA read-only .
  class-data S_CLASS_LABEL type SYMSGID read-only value 'ZCL_HP_MATERIAL' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !I_MATNR type MATNR
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
      !I_VKORG type VKORG optional
      !I_VTWEG type VTWEG optional
      !I_LGNUM type LGNUM optional
      !I_LGTYP type LGTYP optional
      !I_BWKEY type BWKEY optional
      !I_BWTAR type BWTAR_D optional
    raising
      ZCX_EXCEPTION .
  methods GET_MCHB_STOCKS
    returning
      value(E_T_MCHB) type MCHB_TTY .
protected section.
private section.

  methods _CHECK_CONSTRUCTOR_IMPORT_DATA
    importing
      !I_MATNR type MATNR
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
    returning
      value(R_ISOK) type BOOLEAN .
  methods _SET_FICO_DATA
    importing
      !I_BWKEY type BWKEY
      !I_BWTAR type BWTAR_D optional
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_LGORT
    importing
      !I_LGORT type LGORT_D
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_MM_MASTER_DATA
    importing
      !I_WERKS type WERKS_D optional
      !I_LGORT type LGORT_D optional
      !I_VKORG type VKORG optional
      !I_VTWEG type VTWEG optional
      !I_LGNUM type LGNUM optional
      !I_LGTYP type LGTYP optional
      !I_BWKEY type BWKEY optional
      !I_BWTAR type BWTAR_D optional
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_PP_DATA
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_SD_DATA
    importing
      !I_VKORG type VKORG
      !I_VTWEG type VTWEG
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_WERKS
    importing
      !I_WERKS type WERKS_D optional
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_WM_DATA
    importing
      !I_LGNUM type LGNUM
      !I_LGTYP type LGTYP
    raising
      ZCX_MM_EXCEPTION .
  methods _SET_MM_DATA
    importing
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D .
  methods _GET_MARA_DATA .
endclass. "ZCL_HP_MATERIAL definition
class ZCL_HP_MATERIAL implementation.
METHOD _check_constructor_import_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

***** MATNR

  CHECK i_matnr IS NOT INITIAL.

***** WERKS

  CHECK i_werks IS NOT INITIAL.

***** LGORT

  CHECK i_lgort IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

****** CHECKS

***** MATNR EXISTS

  SELECT COUNT(*) UP TO 1 ROWS
    FROM mara
   WHERE matnr EQ i_matnr.

  CHECK sy-subrc EQ 0.

***** WERKS EXISTS

  SELECT COUNT(*) UP TO 1 ROWS
    FROM t001w
   WHERE werks EQ i_werks.

  CHECK sy-subrc EQ 0.

***** LGORT EXISTS IN WERKS

  SELECT COUNT(*) UP TO 1 ROWS
    FROM t001l
   WHERE werks EQ i_werks
     AND lgort EQ i_lgort.

  CHECK sy-subrc EQ 0.

***** MATNR IN WERKS

  SELECT COUNT(*) UP TO 1 ROWS
    FROM marc
   WHERE matnr EQ i_matnr
     AND werks EQ i_werks.

  CHECK sy-subrc EQ 0.

***** MATNR IN LGORT

  SELECT COUNT(*) UP TO 1 ROWS
    FROM mard
   WHERE matnr EQ i_matnr
     AND werks EQ i_werks
     AND lgort EQ i_lgort.

  CHECK sy-subrc EQ 0.

***** RETURN OK

  MOVE abap_true TO r_isok.

ENDMETHOD.
  method _GET_MARA_DATA.
  endmethod.
METHOD _set_fico_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_land TYPE land1.

**********************************************************************
* Validaciones
**********************************************************************

  IF ( i_bwtar IS INITIAL ).
    "TODO
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** MBEW

  SELECT SINGLE *
    FROM mbew
    INTO _mm_master_data-mbew
   WHERE matnr EQ _mm_master_data-mara-matnr
     AND bwtar EQ i_bwtar
     AND bwkey EQ i_bwkey.

*** MLAN

  CALL FUNCTION 'CONVERSION_EXIT_ISOLA_OUTPUT'
    EXPORTING
      input         = sy-langu
    IMPORTING
      output        = lv_land.

  SELECT SINGLE *
    FROM mlan
    INTO _mm_master_data-mlan
   WHERE matnr EQ _mm_master_data-mara-matnr
     AND aland EQ lv_land.

ENDMETHOD.
METHOD _SET_LGORT.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  IF ( _mm_master_data-marc-werks IS INITIAL ).
    "TODO
  ENDIF.

  IF ( i_lgort IS INITIAL ).
    "TODO
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** MARD

  SELECT SINGLE *
    FROM mard
    INTO _mm_master_data-mard
   WHERE matnr EQ _mm_master_data-mara-matnr
     AND werks EQ _mm_master_data-marc-werks
     AND lgort EQ i_lgort.

ENDMETHOD.
METHOD _set_mm_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** GET/SET DATA





ENDMETHOD.
METHOD _set_mm_master_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

****** SET MASTER DATA










*** WERKS, LGORT AND PP DATA

  TRY.
      me->_set_werks( i_werks = i_werks ).
      me->_set_pp_data( ).
      me->_set_lgort( i_lgort = i_lgort ).
    CATCH zcx_mm_exception.
      "No necesario
  ENDTRY.

*** WM DATA

  TRY.
      me->_set_wm_data( i_lgnum = i_lgnum i_lgtyp = i_lgtyp ).
    CATCH zcx_mm_exception.
      "No necesario
  ENDTRY.

*** SD DATA

  TRY.
      me->_set_sd_data( i_vkorg = i_vkorg i_vtweg = i_vtweg ).
    CATCH zcx_mm_exception.
      "No necesario
  ENDTRY.

*** FICO DATA

  TRY.
      me->_set_fico_data( i_bwkey = i_bwkey i_bwtar = i_bwtar ).
    CATCH zcx_mm_exception.
      "No necesario
  ENDTRY.

ENDMETHOD.
METHOD _SET_PP_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_marc     TYPE mdg_bs_mat_t_marc,
        ls_marc     TYPE LINE OF mdg_bs_mat_t_marc,
        lt_message  TYPE mdg_bs_mat_t_mat_msg.

**********************************************************************
* Validaciones
**********************************************************************

  IF ( _mm_master_data-marc-werks IS INITIAL ).
    "TODO
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** MPOP

  MOVE-CORRESPONDING _mm_master_data-marc TO ls_marc.

  APPEND ls_marc TO lt_marc.

  CALL FUNCTION 'MDG_BS_MAT_DB_READ_MPOP'
    EXPORTING
      it_marc          = lt_marc
    IMPORTING
      et_mpop          = _mm_master_data-mpop
      et_message       = lt_message.

*** MPGD

  CALL FUNCTION 'MPGD_SINGLE_READ'
    EXPORTING
*     KZRFB            = ' '
*     MAXTZ            = 0
      matnr            = _mm_master_data-marc-matnr
      werks            = _mm_master_data-marc-werks
    IMPORTING
      wmpgd            = _mm_master_data-mpgd
*      O_MPGD           =
    EXCEPTIONS
      not_found        = 1
      wrong_call       = 2
      OTHERS           = 3.

ENDMETHOD.
METHOD _SET_SD_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  IF ( i_vkorg IS INITIAL ).
    "TODO
  ENDIF.

  IF ( i_vtweg IS INITIAL ).
    "TODO
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** MVKE

  SELECT SINGLE *
    FROM mvke
    INTO _mm_master_data-mvke
   WHERE matnr EQ _mm_master_data-mara-matnr
     AND vkorg EQ i_vkorg
     AND vtweg EQ i_vtweg.

ENDMETHOD.
METHOD _SET_WERKS.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  IF ( i_werks IS INITIAL ).
    "TODO
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** MARC

  SELECT SINGLE *
    FROM marc
    INTO _mm_master_data-marc
   WHERE matnr EQ _mm_master_data-mara-matnr
     AND werks EQ i_werks.

ENDMETHOD.
METHOD _SET_WM_DATA.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  IF ( _mm_master_data-mard-lgort IS INITIAL ).
    "TODO
  ENDIF.

  IF ( i_lgnum IS INITIAL ).
    "TODO
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** MLGN

  SELECT SINGLE *
    FROM mlgn
    INTO _mm_master_data-mlgn
   WHERE matnr EQ _mm_master_data-mara-matnr
     AND lgnum EQ i_lgnum.

*** MLGT

  SELECT SINGLE *
    FROM mlgt
    INTO _mm_master_data-mlgt
   WHERE matnr EQ _mm_master_data-mara-matnr
     AND lgnum EQ i_lgnum
     AND lgtyp EQ i_lgtyp.

ENDMETHOD.
METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT PARAMS

  IF ( me->_check_constructor_import_data( i_matnr = i_matnr i_werks = i_werks i_lgort = i_lgort ) EQ abap_false ).
    zcl_utils=>zif_msg_utils~s_launch_exception( i_textid = zcl_utils=>zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_hp_material=>s_class_label i_msgty = 'E' ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

****** SET DATA

  MOVE i_matnr TO me->_matnr.





*** MATNR

  SELECT SINGLE *
    FROM mara
    INTO _mm_master_data-mara
   WHERE matnr EQ i_matnr.

  IF ( sy-subrc NE 0 ).
*    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid =
  ENDIF.

*** MAKT

  SELECT SINGLE *
    FROM makt
    INTO _mm_master_data-makt
   WHERE matnr EQ i_matnr
     AND spras EQ sy-langu.

*** MARM

  SELECT *
    FROM marm
    INTO CORRESPONDING FIELDS OF TABLE _mm_master_data-marm_tab
   WHERE matnr EQ i_matnr.

*** BUSINESS STRUCTURE DATA

  TRY .
    me->_set_mm_master_data( i_werks = i_werks i_vkorg = i_vkorg i_vtweg = i_vtweg i_lgort = i_lgort i_lgnum = i_lgnum i_lgtyp = i_lgtyp i_bwkey = i_bwkey i_bwtar = i_bwtar ).
  CATCH zcx_mm_exception.
    "No necesario
  ENDTRY.

ENDMETHOD.
METHOD get_mchb_stocks.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** PREPARE DATA




*** MCHB

*  SELECT *
*    FROM mchb
*    INTO CORRESPONDING FIELDS OF TABLE e_t_mchb
*   WHERE werks



ENDMETHOD.
