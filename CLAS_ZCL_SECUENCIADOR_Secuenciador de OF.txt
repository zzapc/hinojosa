TYPES: BEGIN OF ty_datos_aux,
         secuencia   TYPE zchar14,
         aufnr       TYPE aufnr,
         num_fabr    TYPE znum_fabr,
         objnr       TYPE j_objnr,
         werks       TYPE werks_d,
         matkl       TYPE zzcalidad,
         zzebeln1    TYPE vbeln_va,
         zzebelp1    TYPE posnr_va,
         zzurgt1     TYPE zzurgt1,
         zzebeln2    TYPE vbeln_va,
         zzebelp2    TYPE posnr_va,
         zzurgt2     TYPE zzurgt2,
         zzebeln3    TYPE vbeln_va,
         zzebelp3    TYPE posnr_va,
         zzurgt3     TYPE zzurgt3,
         zzkunnr1    TYPE kunnr,
         zzkunnr2    TYPE kunnr,
         zzkunnr3    TYPE kunnr,
         zzancho1    TYPE	zancho1,
         zzancho2    TYPE	zancho2,
         zzancho3    TYPE zancho3,
         plnbez      TYPE matnr,
         gamng       TYPE gamng,
         gmein       TYPE meins,
*         row_id      TYPE int4,
         gstrs       TYPE co_gstrs,
         stat        TYPE j_status,
         inact       TYPE j_inact,
         auart       TYPE auart,
         stat_user   TYPE zstat_user,
         icon_estado TYPE zicon_estado,
**NLC.15.01.24.Añadimos hora 1ª notificación.
         gsuzi       TYPE co_gsuzi,
**FIN.NLC.15.01.24.Añadimos hora 1ª notificación.
       END OF ty_datos_aux.
*       begin of ty_ord_mat_ancho,
*         aufnr       TYPE aufnr,
*         matnr       type matnr,
*         zzancho     type zancho,
*       end of ty_ord_mat_ancho.

class ZCL_SECUENCIADOR definition
  public
  final
  create public .

public section.

  types:
*  types TTY_DATOS_NOTIF_POPE .
    BEGIN OF ty_ord_mat_ancho,
        aufnr         TYPE aufnr,
        matnr         TYPE matnr,
        zzebeln1      TYPE zzebeln1,
        zzebelp1      TYPE zzebelp1,
        zzfecha_entr1 TYPE zfecha_entr1, "fecha entrega
        kunnr1        TYPE kunnr,
        zzebeln2      TYPE zzebeln1,
        zzebelp2      TYPE zzebelp1,
        zzfecha_entr2 TYPE zfecha_entr2, "fecha entrega
        kunnr2        TYPE kunnr,
        zzebeln3      TYPE zzebeln1,
        zzebelp3      TYPE zzebelp1,
        zzfecha_entr3 TYPE zfecha_entr3, "fecha entrega
        kunnr3        TYPE kunnr,
        zzancho1      TYPE zancho1,
        zzancho2      TYPE zancho2,
        zzancho3      TYPE zancho3,

        zzancho       TYPE zancho,
      END OF ty_ord_mat_ancho .
  types:
    begin of ty_of_bobina,
        aufnr   type aufnr,
        zzancho type zancho,
        zzebeln type ebeln,
        zzebelp type ebelp,
      end of ty_of_bobina .
  types:
    BEGIN OF zti_aufnr,
        aufnr TYPE aufnr,
      END OF zti_aufnr .
  types:
    tty_ord_mat_ancho  TYPE STANDARD TABLE OF ty_ord_mat_ancho .
  types:
    tty_of_bobina       TYPE STANDARD TABLE OF ty_of_bobina .
  types:
    tty_aufnr          TYPE STANDARD TABLE OF zti_aufnr .
  types:
    TTY_DATOS_NOTIF_POPE type STANDARD TABLE OF zepp0028_lotes .

  constants GC_3020 type WERKS_D value '3020' ##NO_TEXT.
  constants GC_3000 type WERKS_D value '3000' ##NO_TEXT.
  constants GC_ZI01 type AUFART value 'ZI01' ##NO_TEXT.
  constants GC_I0001_ABIERTA type J_STATUS value 'I0001' ##NO_TEXT.
  constants GC_I0002_LIBERADA type J_STATUS value 'I0002' ##NO_TEXT.
  constants GC_I0045_OUT type J_STATUS value 'I0045' ##NO_TEXT.
  constants GC_I0115_ERR_COSTES type J_STATUS value 'I0115' ##NO_TEXT.
  constants GC_E0001 type J_STATUS value 'E0001' ##NO_TEXT.
  class-data GC_TIME_ALV_POPE type ZED_AF_TIMER .
  class-data GC_KG_ROLLO_3000 type MENGE_D .
  class-data GC_KG_ROLLO_3020 type MENGE_D .
  class-data GC_TORNADAS_3000 type MENGE_D .
  class-data GC_TORNADAS_3020 type MENGE_D .
  class-data GCT_DESTINATARIOS_3020 type ZTTPP0001 .
  class-data GCT_DESTINATARIOS_3000 type ZTTPP0001 .
  class-data GCT_CLIENTES_PROPIOS type TRGR_KUNNR .

  class-methods OBTENER_DATOS_SECUENCIADOR
    importing
      !I_WERKS type WERKS_D
      !I_SO_FECHAS type TRGR_DATE
    exporting
      !OT_ZTPP0009 type ZT_TPP0009 .
  class-methods OBTENER_ROLLO_Y_TORNADAS
    importing
      !I_WERKS type WERKS_D
      !I_KG type ZGAMNG
    exporting
      !O_ROLLOS type ZZROLLOS
      !O_TORNADAS type ZTORNADA .
  class-methods CALC_KG_Y_ROLLOS_NOTIFIC_ORDEN
    importing
      !I_WERKS type WERKS_D
      !I_AUFNR type AUFNR
    exporting
      !O_KG_TOTALES type MENGE_D
      !O_ROLLOS type ZZROLLOS .
  class-methods OBTENER_NOMBRE_CLIENTE
    importing
      !I_KUNNR type KUNNR
    exporting
      !O_NAME type NAME1_GP .
  class-methods OBTENER_ANCHO_MAT_PEDIDO_POS
    importing
      !I_EBELN type VBELN_VA
      !I_EBELP type POSNR_VA
    exporting
      !O_ANCHO type ZANCHO .
  class-methods OBTENER_KG_PULPER
    importing
      !I_WERKS type WERKS_D
      !I_AUFNR type AUFNR
    exporting
      !O_NUM_ROLLOS type ZROLLOS_NOTIF
      !O_KG_PULPER type ZKG_PULPER .
  class-methods PROGRAMAR_SECUENCIADOR
    importing
      !IT_ZTPP0009 type ZT_TPP0009
      !IT_VALUES_FECHA_HORA type TY_SVAL
      !I_WERKS type WERKS_D
    exporting
      !OT_ZTPP0009 type ZT_TPP0009
      !OT_RETURN type SUBRC .
  class-methods INCREMENTAR_HORAS
    importing
      !I_FECHA type D
      !I_HORA type T
      !I_SEGUNDOS_ADD type T
    exporting
      !O_FECHA type D
      !O_HORA type T .
  class-methods GUARDAR_ZTPP0009
    importing
      !IT_ZTPP0009 type ZT_TPP0009
      !I_WERKS type WERKS_D .
  class-methods OBTENER_DATOS_SEQ_POPE
    importing
      !I_WERKS type WERKS_D
    exporting
      !OT_ZTPP0009 type ZT_TPP0009 .
  class-methods SET_ICONS
    importing
      !IT_ZTPP0009 type ZT_TPP0009
    exporting
      !OT_ZTPP0009 type ZT_TPP0009 .
  class-methods CLASS_CONSTRUCTOR .
  class-methods OBTENER_OF_BOBINA
    importing
      !I_AUFNR_ROLLO type AUFNR
    exporting
      !OT_AUFNR_BOBINA type TTY_OF_BOBINA .
  class-methods GET_ANCHO_MATNR_OF_BOBINA
    importing
      !I_AUFNR_ROLLO type AUFNR
    exporting
      !O_OF_MAT_ANCHO type TY_ORD_MAT_ANCHO .
  class-methods OBTENER_DATOS_SEQUENCIADOR_30V
    importing
      !I_WERKS type WERKS_D
    exporting
      !OT_ZTPP0009 type ZT_TPP0009 .
  class-methods VALIDAR_ROLLOS_1020
    importing
      !I_WERKS type WERKS_D
      !I_AUFNR type AUFNR
    exporting
      !O_ERROR type FLAG .
  class-methods OBTENER_DATOS_POPE
    importing
      !I_AUFNR type AUFNR
      !I_WERKS type WERKS_D
    exporting
      !OT_DATOS type TTY_DATOS_NOTIF_POPE .
  class-methods OBTENER_CONST_CALC_RADIO_POPE
    importing
      !I_WERKS type WERKS_D
    returning
      value(R_RADIO) type INT4 .
  class-methods UPD_DIRECT_O_DIFER_ZTPP0009
    importing
      !I_WERKS type WERKS_D
      !I_AUFNR type AUFNR
      !I_NUM_FABR type ZNUM_FABR
      !I_IND_FIN_X type FLAG optional
      !I_IND_FIN type ZIND_FIN optional
      !I_IND_OBS_POPE_X type FLAG optional
      !I_OBSERV_POPE type ZOBSERV_POPE optional
    exporting
      !O_UPD_DIFERIDO type FLAG .
  class-methods TRATAR_ZTPP0009_UPD .
  PROTECTED SECTION.
private section.
endclass. "ZCL_SECUENCIADOR definition
class ZCL_SECUENCIADOR implementation.
  METHOD calc_kg_y_rollos_notific_orden.

    SELECT SUM( menge ) , COUNT(*)
      FROM aufm
      INTO ( @DATA(l_sum_not) , @DATA(l_cont_not) )
      WHERE bwart = '101'   AND
            werks = @i_werks AND
            aufnr = @i_aufnr.

    SELECT SUM( menge ) , COUNT(*)
      FROM aufm
      INTO ( @DATA(l_sum_del) , @DATA(l_cont_del) )
      WHERE bwart = '102'   AND
            werks = @i_werks AND
            aufnr = @i_aufnr.

    o_kg_totales = l_sum_not - l_sum_del.
    o_rollos     = l_cont_not - l_cont_del.

  ENDMETHOD.
  METHOD class_constructor.

    SELECT *
      FROM ztpp0033
      INTO TABLE @DATA(lt_ztpp0033).

    TRY.

        gc_time_alv_pope = CONV #( lt_ztpp0033[ id_parm = 'TIME_UPD' ]-valor ).

        gc_kg_rollo_3000 = lt_ztpp0033[ werks = '3000' id_parm = 'KG_ROLLO' ]-valor.
        gc_kg_rollo_3020 = lt_ztpp0033[ werks = '3020' id_parm = 'KG_ROLLO' ]-valor.
        gc_tornadas_3000 = lt_ztpp0033[ werks = '3000' id_parm = 'TORNADAS' ]-valor.
        gc_tornadas_3020 = lt_ztpp0033[ werks = '3020' id_parm = 'TORNADAS' ]-valor.

      CATCH cx_root .
    ENDTRY.

data:
*     lt_emails      TYPE         zttpp0001,
     l_destinatario     type  AD_SMTPADR.

    LOOP AT lt_ztpp0033 into data(ls_destinatario) where id_parm cp 'SEND@*' and werks = '3020'.
      l_destinatario = ls_destinatario-observ.
      insert l_destinatario into TABLE gct_destinatarios_3020.
    ENDLOOP.

    LOOP AT lt_ztpp0033 into ls_destinatario where id_parm cp 'SEND@*' and werks = '3000'.
      l_destinatario = ls_destinatario-observ.
      insert l_destinatario into TABLE gct_destinatarios_3000.
    ENDLOOP.

* Obtener Rango de clientes propios:
    GCT_CLIENTES_PROPIOS[] = VALUE TRGR_KUNNR( FOR ls_ztpp0033 IN lt_ztpp0033
                                               WHERE ( id_parm cp 'CLI_PROP*' )
                                             ( sign = 'I' option = 'EQ' low = ls_ztpp0033-valor )
                                            ).


  ENDMETHOD.
  METHOD get_ancho_matnr_of_bobina.

    CALL METHOD zcl_secuenciador=>obtener_of_bobina
      EXPORTING
        i_aufnr_rollo   = i_aufnr_rollo
      IMPORTING
        ot_aufnr_bobina = DATA(lt_aufnr_bobina).

    CLEAR o_of_mat_ancho.

* Antigua seleccion para obtener los datos directamente de OF bobinas, no cal, directamente desde OF Rollo
*    SELECT k~aufnr , k~plnbez AS matnr , u~zzkunnr1 as kunnr ,  u~zzebeln1 as zzebeln, u~zzebelp1 as zzebelp , m~zzancho , u~ZZFEC_ENTREG1 as fecentr
*      FROM afko       AS k
*      INNER JOIN mara AS m ON k~plnbez = m~matnr
*      INNER JOIN aufk AS u ON k~aufnr  = u~aufnr
**      INNER JOIN vbep AS v ON v~vbeln  = u~zzebeln1 and v~posnr = u~zzebelp1
*      INTO CORRESPOvbeNDING FIELDS OF TABLE @ot_of_mat_ancho
*      FOR ALL ENTRIES IN @lt_aufnr_bobina
*      WHERE k~aufnr = @lt_aufnr_bobina-aufnr.

    SELECT  SINGLE k~aufnr , k~plnbez AS matnr ,
           u~zzebeln1 , u~zzebelp1 , u~zzfec_entreg1 AS zzfecha_entr1 , u~zzkunnr1,
           u~zzebeln2 , u~zzebelp2 , u~zzfec_entreg2 AS zzfecha_entr2 , u~zzkunnr2,
           u~zzebeln3 , u~zzebelp3 , u~zzfec_entreg3 AS zzfecha_entr3 , u~zzkunnr3,
           m~zzancho
      FROM afko       AS k
      INNER JOIN mara AS m ON k~plnbez = m~matnr
      INNER JOIN aufk AS u ON k~aufnr  = u~aufnr
      INTO @o_of_mat_ancho
      WHERE k~aufnr = @i_aufnr_rollo.

* Para obtener el ancho de los pedido 1/2/3, buscaremos en el pedido/posición en el ancho de material de la orden de bobina correspondiente
    TRY.
      o_of_mat_ancho-zzancho1 = lt_aufnr_bobina[ zzebeln = o_of_mat_ancho-zzebeln1
                                                 zzebelp = o_of_mat_ancho-zzebelp1 ]-zzancho.
    CATCH cx_root .
    ENDTRY.

    TRY.
      o_of_mat_ancho-zzancho2 = lt_aufnr_bobina[ zzebeln = o_of_mat_ancho-zzebeln2
                                                 zzebelp = o_of_mat_ancho-zzebelp2 ]-zzancho.
    CATCH cx_root .
    ENDTRY.

    TRY.
      o_of_mat_ancho-zzancho3 = lt_aufnr_bobina[ zzebeln = o_of_mat_ancho-zzebeln3
                                                 zzebelp = o_of_mat_ancho-zzebelp3 ]-zzancho.
    CATCH cx_root .
    ENDTRY.

  ENDMETHOD.
  METHOD guardar_ztpp0009.
    DATA l_cont TYPE i.

    DATA(lt_ztpp0009) = it_ztpp0009[].

    LOOP AT lt_ztpp0009 ASSIGNING FIELD-SYMBOL(<fs_ztp09>).
*      IF <fs_ztp09>-zindex EQ 0.
*        READ TABLE gti_datos INTO ls_datos WITH KEY aufnr = <fs_datos>-aufnr.
*        <fs_ztp09>-zindex = ls_datos-zindex.
*      ELSE.
      l_cont = l_cont + 1.
      <fs_ztp09>-zindex = l_cont.
*      ENDIF.
    ENDLOOP.

    DELETE FROM ztpp0009 WHERE werks = i_werks.
    MODIFY ztpp0009 FROM TABLE lt_ztpp0009.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

  ENDMETHOD.
  METHOD incrementar_horas.

    CALL FUNCTION 'C14B_ADD_TIME'
      EXPORTING
        i_starttime = i_hora
        i_startdate = i_fecha
        i_addtime   = i_segundos_add
      IMPORTING
        e_endtime   = o_hora
        e_enddate   = o_fecha.

  ENDMETHOD.
  METHOD obtener_ancho_mat_pedido_pos.
    DATA: lv_matnr TYPE matnr.
    DATA: l_ebeln TYPE ebeln,
          l_ebelp TYPE ebelp.

    l_ebeln = |{ i_ebeln ALPHA = IN }|.
    l_ebelp = |{ i_ebelp ALPHA = IN }|.

    IF l_ebeln(4) EQ '0044'. "Pedido de compras
      CLEAR lv_matnr.
      SELECT SINGLE matnr
        FROM ekpo
        INTO lv_matnr
        WHERE ebeln = l_ebeln
        AND ebelp   = l_ebelp.
    ELSE. "Pedido de ventas
      CLEAR lv_matnr.
      SELECT SINGLE matnr
        FROM vbap
        INTO lv_matnr
        WHERE vbeln = i_ebeln
        AND posnr   = i_ebelp.
    ENDIF.

    SELECT SINGLE zzancho
      FROM mara
    INTO o_ancho
    WHERE matnr EQ lv_matnr.

  ENDMETHOD.
  METHOD obtener_const_calc_radio_pope.

    SELECT SINGLE valor
      FROM ztpp0033
      INTO @DATA(l_valor_radio)
      WHERE werks   = @i_werks AND
            id_parm = 'RADIO_POPE'.
    IF sy-subrc = 0.
      r_radio = l_valor_radio.
    ELSE.
      CLEAR r_radio.
    ENDIF.
  ENDMETHOD.
  METHOD obtener_datos_pope.

    DATA: l_objkey           TYPE                   objnum,
          lt_allocvaluesnum  TYPE STANDARD TABLE OF bapi1003_alloc_values_num,  " WITH HEADER LINE,
          lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char, " WITH HEADER LINE,
          lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr, " WITH HEADER LINE,
          lt_return          TYPE STANDARD TABLE OF bapiret2,
          l_defectos         TYPE abap_bool.
    .

    CLEAR ot_datos.

* Obtener mov 101 y 102 de lotes asociados a OF.
    SELECT aufnr , matnr , charg , menge , bwart , mblnr , mjahr FROM aufm
      INTO TABLE @DATA(lt_aufm)
      WHERE werks = @i_werks AND
            aufnr = @i_aufnr AND
            ( bwart = '101' OR
              bwart = '102'  ) .

* Loop para leer 101 y 102 y cumplimentar datos de lote rollo.
    LOOP AT lt_aufm INTO DATA(wa_aufm).
      APPEND INITIAL LINE TO ot_datos ASSIGNING FIELD-SYMBOL(<fs_reg>).
      <fs_reg>-matnr = wa_aufm-matnr.
      <fs_reg>-charg = wa_aufm-charg.
      <fs_reg>-brgew = wa_aufm-menge.
      <fs_reg>-mblnr = wa_aufm-mblnr.
      <fs_reg>-mjahr = wa_aufm-mjahr.

* Determinar ID (tipo mov)
      CASE wa_aufm-bwart.
*        WHEN '101'. <fs_reg>-tipo_sem = icon_checked.
        WHEN '101'. <fs_reg>-tipo_sem = '@08@'. " Green light .
                    <fs_reg>-tipo     = ' '.
        WHEN '102'. <fs_reg>-tipo_sem = icon_red_light.
                    <fs_reg>-tipo     = 'P'.
                    <fs_reg>-brgew = <fs_reg>-brgew * -1.
        WHEN OTHERS.
      ENDCASE.

* Obtener el flag de defectos.
      CLEAR l_defectos.
      DATA(l_aufnr) = |{ i_aufnr ALPHA = IN }|.
      SELECT SINGLE flag_defectos INTO l_defectos FROM ztpp0030
                     WHERE aufnr = l_aufnr AND
                           werks = i_werks AND
                           matnr = <fs_reg>-matnr AND
                           charg = <fs_reg>-charg.
      IF l_defectos EQ abap_true.
        <fs_reg>-defectos = icon_incomplete.
      ELSE.
        <fs_reg>-defectos = icon_checked.
      ENDIF.

* Obtemos características de rollo.
      CLEAR l_objkey.
      l_objkey = |{ wa_aufm-matnr ALPHA = IN }{ wa_aufm-charg ALPHA = IN }|.
      CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
        EXPORTING
          objectkey       = l_objkey
          objecttable     = 'MCH1'
          classnum        = 'Z_ROLLO'
          classtype       = '023'
        TABLES
          allocvaluesnum  = lt_allocvaluesnum
          allocvalueschar = lt_allocvalueschar
          allocvaluescurr = lt_allocvaluescurr
          return          = lt_return.
      IF line_exists( lt_return[ type = 'E' ] ).
      ELSE.
* Obtener Diámetro y cálculo de Radio.
        TRY.
            <fs_reg>-diametro = lt_allocvaluesnum[ charact = 'Z_DIAMETRO1' ]-value_from.
            <fs_reg>-radio = ( <fs_reg>-diametro - obtener_const_calc_radio_pope( i_werks = i_werks ) ) / 2.

            IF <fs_reg>-radio < 0.
              <fs_reg>-radio = 0.
            ENDIF.

          CATCH cx_root .
        ENDTRY.

      ENDIF.
    ENDLOOP.


  ENDMETHOD.
  METHOD obtener_datos_secuenciador.

    DATA: lti_datos_aux TYPE TABLE OF ty_datos_aux,
          lti_ztpp0009  TYPE TABLE OF ztpp0009
          .

* Obtenemos los datos según especificaciones, para todos los registros
* que encontremos con los siguiente filtros
    SELECT afko~aufnr aufk~auart aufk~werks aufk~objnr aufk~zzebeln1 aufk~zzebelp1 aufk~zzurgt1 afko~gsuzi "NLC.15.01.24.Añadimos afko~gsuzi. Hora 1ª notificación.
           aufk~zzebeln2 aufk~zzebelp2 aufk~zzurgt2 aufk~zzebeln3 aufk~zzebelp3 aufk~zzurgt3 aufk~zzkunnr1
           aufk~zzkunnr2 aufk~zzkunnr3 afko~plnbez afko~gamng afko~gmein afko~gstrs
           jest~objnr jest~stat jest~inact
      FROM aufk
      INNER JOIN afko ON aufk~aufnr EQ afko~aufnr
      INNER JOIN jest ON aufk~objnr EQ jest~objnr
      INTO CORRESPONDING FIELDS OF TABLE lti_datos_aux
         WHERE aufk~werks EQ i_werks AND
               aufk~auart EQ gc_zi01 AND
               ( jest~stat EQ gc_i0001_abierta OR jest~stat EQ gc_i0002_liberada )  AND " Abiertas y Liberadas
               jest~inact EQ space AND
               afko~gstrs IN i_so_fechas.

    SORT lti_datos_aux BY aufnr werks plnbez ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lti_datos_aux COMPARING ALL FIELDS.

* Recuperamos los datos que ya tiene la tabla z
    SELECT *
      FROM ztpp0009
      APPENDING CORRESPONDING FIELDS OF TABLE lti_ztpp0009
      WHERE werks = i_werks AND
            auart EQ gc_zi01
      ORDER BY zindex.

* Incorporamos ordenes nuevas a la tabla ZTPP0009.
    LOOP AT lti_datos_aux ASSIGNING FIELD-SYMBOL(<fs_datos>).

      READ TABLE lti_ztpp0009 ASSIGNING FIELD-SYMBOL(<fs_0009>) WITH KEY werks = <fs_datos>-werks
                                                         aufnr = <fs_datos>-aufnr.
      IF sy-subrc <> 0. " Si no existe en la ZTPP0009, generamos registro
        APPEND INITIAL LINE TO lti_ztpp0009 ASSIGNING FIELD-SYMBOL(<fs_ztpp0009>).
        <fs_ztpp0009> = CORRESPONDING #( <fs_datos> ).
        CALL METHOD zcl_secuenciador=>get_ancho_matnr_of_bobina
          EXPORTING
            i_aufnr_rollo  = <fs_datos>-aufnr
          IMPORTING
            o_of_mat_ancho = DATA(ls_datos_pedidos).

        <fs_ztpp0009>-kunnr1          = ls_datos_pedidos-kunnr1.
        <fs_ztpp0009>-zzebeln1        = |{ ls_datos_pedidos-zzebeln1 ALPHA = OUT }|.
        <fs_ztpp0009>-zzebelp1        = |{ ls_datos_pedidos-zzebelp1 ALPHA = OUT }|.
        <fs_ztpp0009>-zzancho1        = ls_datos_pedidos-zzancho.
        <fs_ztpp0009>-zzfecha_entr1   = ls_datos_pedidos-zzfecha_entr1.
        <fs_ztpp0009>-zzancho1        = ls_datos_pedidos-zzancho1.
        CALL METHOD obtener_nombre_cliente
          EXPORTING
            i_kunnr = <fs_ztpp0009>-kunnr1
          IMPORTING
            o_name  = <fs_ztpp0009>-name1.

        <fs_ztpp0009>-kunnr2          = ls_datos_pedidos-kunnr2.
        <fs_ztpp0009>-zzebeln2        = |{ ls_datos_pedidos-zzebeln2 ALPHA = OUT }|.
        <fs_ztpp0009>-zzebelp2        = |{ ls_datos_pedidos-zzebelp2 ALPHA = OUT }|.
        <fs_ztpp0009>-zzancho2        = ls_datos_pedidos-zzancho.
        <fs_ztpp0009>-zzfecha_entr2   = ls_datos_pedidos-zzfecha_entr2.
        <fs_ztpp0009>-zzancho2        = ls_datos_pedidos-zzancho2.
        CALL METHOD obtener_nombre_cliente
          EXPORTING
            i_kunnr = <fs_ztpp0009>-kunnr2
          IMPORTING
            o_name  = <fs_ztpp0009>-name2.

        <fs_ztpp0009>-kunnr3          = ls_datos_pedidos-kunnr3.
        <fs_ztpp0009>-zzebeln3        = |{ ls_datos_pedidos-zzebeln3 ALPHA = OUT }|.
        <fs_ztpp0009>-zzebelp3        = |{ ls_datos_pedidos-zzebelp3 ALPHA = OUT }|.
        <fs_ztpp0009>-zzancho3        = ls_datos_pedidos-zzancho.
        <fs_ztpp0009>-zzfecha_entr3   = ls_datos_pedidos-zzfecha_entr3.
        <fs_ztpp0009>-zzancho3        = ls_datos_pedidos-zzancho3.
        CALL METHOD obtener_nombre_cliente
          EXPORTING
            i_kunnr = <fs_ztpp0009>-kunnr3
          IMPORTING
            o_name  = <fs_ztpp0009>-name3.

**NLC.15.01.24.Añadimos hora 1ª notificación.
        <fs_ztpp0009>-gsuzi           = <fs_datos>-gsuzi.
**FIN.NLC.15.01.24.Añadimos hora 1ª notificación.




      ELSE.
        CALL METHOD zcl_secuenciador=>get_ancho_matnr_of_bobina
          EXPORTING
            i_aufnr_rollo  = <fs_0009>-aufnr
          IMPORTING
            o_of_mat_ancho = ls_datos_pedidos.

        <fs_0009>-kunnr1          = ls_datos_pedidos-kunnr1.
        <fs_0009>-zzebeln1        = |{ ls_datos_pedidos-zzebeln1 ALPHA = OUT }|.
        <fs_0009>-zzebelp1        = |{ ls_datos_pedidos-zzebelp1 ALPHA = OUT }|.
        <fs_0009>-zzancho1        = ls_datos_pedidos-zzancho.
        <fs_0009>-zzfecha_entr1   = ls_datos_pedidos-zzfecha_entr1.
        <fs_0009>-zzancho1        = ls_datos_pedidos-zzancho1.
        CALL METHOD obtener_nombre_cliente
          EXPORTING
            i_kunnr = <fs_0009>-kunnr1
          IMPORTING
            o_name  = <fs_0009>-name1.

        <fs_0009>-kunnr2          = ls_datos_pedidos-kunnr2.
        <fs_0009>-zzebeln2        = |{ ls_datos_pedidos-zzebeln2 ALPHA = OUT }|.
        <fs_0009>-zzebelp2        = |{ ls_datos_pedidos-zzebelp2 ALPHA = OUT }|.
        <fs_0009>-zzancho2        = ls_datos_pedidos-zzancho.
        <fs_0009>-zzfecha_entr2   = ls_datos_pedidos-zzfecha_entr2.
        <fs_0009>-zzancho2        = ls_datos_pedidos-zzancho2.
        CALL METHOD obtener_nombre_cliente
          EXPORTING
            i_kunnr = <fs_0009>-kunnr2
          IMPORTING
            o_name  = <fs_0009>-name2.

        <fs_0009>-kunnr3          = ls_datos_pedidos-kunnr3.
        <fs_0009>-zzebeln3        = |{ ls_datos_pedidos-zzebeln3 ALPHA = OUT }|.
        <fs_0009>-zzebelp3        = |{ ls_datos_pedidos-zzebelp3 ALPHA = OUT }|.
        <fs_0009>-zzancho3        = ls_datos_pedidos-zzancho.
        <fs_0009>-zzfecha_entr3   = ls_datos_pedidos-zzfecha_entr3.
        <fs_0009>-zzancho3        = ls_datos_pedidos-zzancho3.
        CALL METHOD obtener_nombre_cliente
          EXPORTING
            i_kunnr = <fs_0009>-kunnr3
          IMPORTING
            o_name  = <fs_0009>-name3.

**NLC.15.01.24.Añadimos hora 1ª notificación.
        <fs_0009>-gsuzi           = <fs_datos>-gsuzi.
**FIN.NLC.15.01.24.Añadimos hora 1ª notificación.



      ENDIF.

    ENDLOOP.

* Obtener estados de orden de las OF del secuenciador.
    SELECT *
      INTO TABLE @DATA(lt_estados_ok)
      FROM jest
      FOR ALL ENTRIES IN @lti_ztpp0009
      WHERE objnr  = @lti_ztpp0009-objnr  AND
            ( stat = @gc_i0001_abierta    OR    "abierta
              stat = @gc_i0002_liberada ) AND    "liberada
*              stat = @gc_e0002 OR    " Finalizado
*              stat = @gc_e0003 ) AND "Bloqueada
            inact EQ @space.

* Obtenemos datos de material, para cumplimentar campos en ZTPP0009.
    SELECT  ma~matnr , ma~matkl , ma~zzgramaje , ma~zzancho , mk~maktx
    APPENDING TABLE @DATA(lt_mara)
      FROM mara AS ma
      INNER JOIN makt AS mk ON ma~matnr = mk~matnr
      FOR ALL ENTRIES IN @lti_ztpp0009
      WHERE ma~matnr  =  @lti_ztpp0009-plnbez.

    DATA(l_num_lines) = 0.

* Cumplimentaremos todos los descriptivos para la presentación.
    LOOP AT lti_ztpp0009 ASSIGNING <fs_ztpp0009>.

      CLEAR <fs_ztpp0009>-stat.

      IF <fs_ztpp0009>-stat IS INITIAL.
        TRY.
            <fs_ztpp0009>-stat = lt_estados_ok[ objnr = <fs_ztpp0009>-objnr
                                                stat  = gc_i0002_liberada ]-stat.  "i0002 estado Liberada
            <fs_ztpp0009>-icon_estado = '@5Y@'.
          CATCH cx_root .
        ENDTRY.
      ENDIF.

      IF <fs_ztpp0009>-stat IS INITIAL.
        TRY.
            <fs_ztpp0009>-stat = lt_estados_ok[ objnr = <fs_ztpp0009>-objnr
                                                stat  = gc_i0001_abierta ]-stat.        "i0001 estado Abierta
            CLEAR <fs_ztpp0009>-icon_estado.                                     " Icono en Blanco
          CATCH cx_root .
            CLEAR <fs_ztpp0009>-aufnr.
            CONTINUE.
        ENDTRY.
      ENDIF.

      CASE 'X'.
        WHEN <fs_ztpp0009>-ind_bloq.
          <fs_ztpp0009>-icon_estado = '@06@'.

        WHEN <fs_ztpp0009>-ind_fin.
          <fs_ztpp0009>-icon_estado = '@DF@'.

        WHEN <fs_ztpp0009>-ind_calidad_ok.
          <fs_ztpp0009>-icon_estado = '@EJ@'.

        WHEN OTHERS.
      ENDCASE.

      CHECK <fs_ztpp0009>-stat IS NOT INITIAL.

* Datos de material.
      TRY.
          <fs_ztpp0009>-matnr      = <fs_ztpp0009>-plnbez.
          <fs_ztpp0009>-matkl      = lt_mara[ matnr = <fs_ztpp0009>-plnbez ]-matkl.
          <fs_ztpp0009>-zzgramaje  = lt_mara[ matnr = <fs_ztpp0009>-plnbez ]-zzgramaje.
          <fs_ztpp0009>-zzancho    = lt_mara[ matnr = <fs_ztpp0009>-plnbez ]-zzancho.
          <fs_ztpp0009>-maktx      = lt_mara[ matnr = <fs_ztpp0009>-plnbez ]-maktx.
        CATCH cx_root .
          CLEAR: <fs_ztpp0009>-matkl,
                 <fs_ztpp0009>-zzgramaje,
                 <fs_ztpp0009>-zzancho,
                 <fs_ztpp0009>-maktx.
      ENDTRY.

      IF <fs_ztpp0009>-kg_fabricacion IS NOT INITIAL AND
         <fs_ztpp0009>-rollos         IS INITIAL.
        CALL METHOD zcl_secuenciador=>obtener_rollo_y_tornadas
          EXPORTING
            i_werks    = <fs_ztpp0009>-werks
            i_kg       = <fs_ztpp0009>-kg_fabricacion
          IMPORTING
            o_rollos   = <fs_ztpp0009>-rollos
            o_tornadas = <fs_ztpp0009>-tornadas.
      ELSEIF <fs_ztpp0009>-gamng          IS NOT INITIAL AND
             <fs_ztpp0009>-rollos         IS INITIAL.
        CALL METHOD zcl_secuenciador=>obtener_rollo_y_tornadas
          EXPORTING
            i_werks    = <fs_ztpp0009>-werks
            i_kg       = <fs_ztpp0009>-gamng
          IMPORTING
            o_rollos   = <fs_ztpp0009>-rollos
            o_tornadas = <fs_ztpp0009>-tornadas.
      ENDIF.

      CALL METHOD zcl_secuenciador=>calc_kg_y_rollos_notific_orden
        EXPORTING
          i_werks      = <fs_ztpp0009>-werks
          i_aufnr      = <fs_ztpp0009>-aufnr
        IMPORTING
          o_kg_totales = <fs_ztpp0009>-kg_fabricados
          o_rollos     = <fs_ztpp0009>-rollos_notif.


* Para Num_Fabr 0 , originales de OF (sin desdoblar ni repetir), trasladamos kg.Plan a Kg.fabricacion
      IF <fs_ztpp0009>-num_fabr = 0.
        <fs_ztpp0009>-kg_fabricacion = <fs_ztpp0009>-gamng.
      ENDIF.

      l_num_lines             = l_num_lines + 1.
      <fs_ztpp0009>-secuencia = l_num_lines.

    ENDLOOP.

    DELETE lti_ztpp0009 WHERE aufnr = ' '.

    CLEAR ot_ztpp0009[].
    ot_ztpp0009[] = lti_ztpp0009[].


    CALL METHOD zcl_secuenciador=>guardar_ztpp0009
      EXPORTING
        it_ztpp0009 = ot_ztpp0009[]
        i_werks     = i_werks.

  ENDMETHOD.
  METHOD obtener_datos_seq_pope.

    DATA: ls_ztpp0009 LIKE LINE OF ot_ztpp0009.
* Obtener datos del secuenciador.
    SELECT * FROM ztpp0009
      APPENDING TABLE @DATA(lt_ztpp0009)
      WHERE werks = @i_werks        AND
*            STAT  = 'I0002'
            ind_bloq        = ' '   AND
*            ind_fin         = ' '   AND
            ind_calidad_ok  = ' '
            ORDER BY zindex.

* OBtención de estado de OF's
    SELECT *
      INTO TABLE @DATA(lt_estados_ok)
      FROM jest
      FOR ALL ENTRIES IN @lt_ztpp0009
      WHERE objnr  = @lt_ztpp0009-objnr AND
            ( stat = @gc_i0002_liberada ) AND    "liberada
            inact EQ @space.

* Obtener Rollos notificados y Kg Pulper de OF's.
    SELECT aufnr , charg , bwart , menge
      INTO TABLE @DATA(lt_aufm)
      FROM aufm
     FOR ALL ENTRIES IN @lt_ztpp0009
     WHERE aufnr = @lt_ztpp0009-aufnr AND
         ( bwart = '101' OR bwart = '102' ) AND
           werks = @i_werks.

    DATA lr_aufnr TYPE RANGE OF aufnr.
    CLEAR lr_aufnr[].
    LOOP AT lt_ztpp0009 ASSIGNING FIELD-SYMBOL(<ls_ztpp09>).
      TRY.
          <ls_ztpp09>-stat = lt_estados_ok[ objnr = <ls_ztpp09>-objnr ]-stat.

* Trasladado al Seq. y consecuentemente en la grabacion de datos.  Ya vendrán los kg trasladados cuando toque (num.fabr.=0).
*          IF <ls_ztpp09>-num_fabr = 0.
*            <ls_ztpp09>-kg_fabricacion = <ls_ztpp09>-gamng.
*          ENDIF.
        CATCH cx_root .
          CLEAR: <ls_ztpp09>-aufnr , <ls_ztpp09>-stat.
          CONTINUE.
      ENDTRY.

      CALL METHOD zcl_secuenciador=>calc_kg_y_rollos_notific_orden
        EXPORTING
          i_werks      = <ls_ztpp09>-werks
          i_aufnr      = <ls_ztpp09>-aufnr
        IMPORTING
          o_kg_totales = <ls_ztpp09>-kg_fabricados
          o_rollos     = <ls_ztpp09>-rollos_notif.

* Guardamos las ordenes que tengan una fabricación adicional (num.fabr.>99)
      IF <ls_ztpp09>-num_fabr > 99.
        APPEND VALUE #( sign = 'I' option = 'EQ' low = <ls_ztpp09>-aufnr ) TO lr_aufnr.
      ENDIF.

    ENDLOOP.

    DELETE lt_ztpp0009 WHERE aufnr = ' ' OR stat = ' '.
* Borramos fabr. finalizadas y calidad Ok, cuando ya existen fabr.repetidas.
    IF lr_aufnr IS NOT INITIAL.
      DELETE lt_ztpp0009 WHERE aufnr IN lr_aufnr AND num_fabr < 100 AND ( ind_fin = 'X' OR ind_calidad_ok = 'X' ).
    ENDIF.

* CMS - 19-02-2021 - Aplicar cambios pendientes a la visualizacion en ZPP0028S
* Obtener cambios pendientes.
    SELECT *
      INTO TABLE @DATA(lt_pendientes)
      FROM ztpp0009_blq
      WHERE tratado = ' '
      ORDER BY erdat  ASCENDING ,
               erzeit ASCENDING.

* Aplicar cambios pendientes.
    LOOP AT lt_pendientes INTO DATA(ls_pend).
      TRY.
          ASSIGN lt_ztpp0009[ werks     = ls_pend-werks
                              aufnr     = ls_pend-aufnr
                              num_fabr  = ls_pend-num_fabr

                               ] TO FIELD-SYMBOL(<fs_reg>).
          IF sy-subrc = 0.
            IF ls_pend-ind_fin_x = 'X'.
              <fs_reg>-ind_fin = ls_pend-ind_fin.
            ENDIF.

            IF ls_pend-observ_pope_x = 'X'.
              <fs_reg>-observ_pope = ls_pend-observ_pope.
            ENDIF.
          ENDIF.
        CATCH cx_root .
      ENDTRY.
    ENDLOOP.
* Fin aplicación de cambios pendientes.



    ot_ztpp0009[] = lt_ztpp0009[].

    CALL METHOD zcl_secuenciador=>set_icons
      EXPORTING
        it_ztpp0009 = ot_ztpp0009
      IMPORTING
        ot_ztpp0009 = ot_ztpp0009.

    LOOP AT lt_ztpp0009 ASSIGNING <ls_ztpp09>.

      IF <ls_ztpp09>-observ_pope IS NOT INITIAL.
        <ls_ztpp09>-zicon_obs_pope = '@19@'.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.
  METHOD obtener_datos_sequenciador_30v.

    DATA: ls_ztpp0009 LIKE LINE OF ot_ztpp0009.
* Obtener datos del secuenciador.
    SELECT * FROM ztpp0009
      APPENDING TABLE @DATA(lt_ztpp0009)
      WHERE werks = @i_werks        AND
            stat  = 'I0002'
            ORDER BY zindex.

* OBtención de estado de OF's
    SELECT *
      INTO TABLE @DATA(lt_estados_ok)
      FROM jest
      FOR ALL ENTRIES IN @lt_ztpp0009
      WHERE objnr  = @lt_ztpp0009-objnr AND
            ( stat = @gc_i0002_liberada ) AND    "liberada
            inact EQ @space.

* Obtener Rollos notificados y Kg Pulper de OF's.
    SELECT aufnr , charg , bwart , menge
      INTO TABLE @DATA(lt_aufm)
      FROM aufm
     FOR ALL ENTRIES IN @lt_ztpp0009
     WHERE aufnr = @lt_ztpp0009-aufnr AND
         ( bwart = '101' OR bwart = '102' ) AND
           werks = @i_werks.


    LOOP AT lt_ztpp0009 ASSIGNING FIELD-SYMBOL(<ls_ztpp09>).
      TRY.
          <ls_ztpp09>-stat = lt_estados_ok[ objnr = <ls_ztpp09>-objnr ]-stat.

* Trasladado al Seq. y consecuentemente en la grabacion de datos.  Ya vendrán los kg trasladados cuando toque (num.fabr.=0).
*          IF <ls_ztpp09>-num_fabr = 0.
*            <ls_ztpp09>-kg_fabricacion = <ls_ztpp09>-gamng.
*          ENDIF.
        CATCH cx_root .
          CLEAR: <ls_ztpp09>-aufnr , <ls_ztpp09>-stat.
          CONTINUE.
      ENDTRY.

      CALL METHOD zcl_secuenciador=>calc_kg_y_rollos_notific_orden
        EXPORTING
          i_werks      = <ls_ztpp09>-werks
          i_aufnr      = <ls_ztpp09>-aufnr
        IMPORTING
          o_kg_totales = <ls_ztpp09>-kg_fabricados
          o_rollos     = <ls_ztpp09>-rollos_notif.

    ENDLOOP.

    DELETE lt_ztpp0009 WHERE aufnr = ' ' OR stat = ' '.

    LOOP AT lt_ztpp0009 ASSIGNING <ls_ztpp09>.

      IF <ls_ztpp09>-observ_pope IS NOT INITIAL.
        <ls_ztpp09>-zicon_obs_pope = '@0S@'.
      ENDIF.

      IF <ls_ztpp09>-observaciones IS NOT INITIAL.
        <ls_ztpp09>-zicon_observa = '@AH@'.
      ENDIF.

    ENDLOOP.

* CMS - 19-02-2021 - Aplicar cambios pendientes a la visualizacion en ZPP0030V
* Obtener cambios pendientes.
    SELECT *
      INTO TABLE @DATA(lt_pendientes)
      FROM ztpp0009_blq
      WHERE tratado = ' '
      ORDER BY erdat  ASCENDING ,
               erzeit ASCENDING.

* Aplicar cambios pendientes.
    LOOP AT lt_pendientes INTO DATA(ls_pend).
      TRY.
          ASSIGN lt_ztpp0009[ werks     = ls_pend-werks
                              aufnr     = ls_pend-aufnr
                              num_fabr  = ls_pend-num_fabr

                               ] TO FIELD-SYMBOL(<fs_reg>).
          IF sy-subrc = 0.
            IF ls_pend-ind_fin_x = 'X'.
              <fs_reg>-ind_fin = ls_pend-ind_fin.
            ENDIF.

            IF ls_pend-observ_pope_x = 'X'.
              <fs_reg>-observ_pope = ls_pend-observ_pope.
            ENDIF.
          ENDIF.
        CATCH cx_root .
      ENDTRY.
    ENDLOOP.
* Fin aplicación de cambios pendientes.



    ot_ztpp0009[] = lt_ztpp0009[].

    CALL METHOD zcl_secuenciador=>set_icons
      EXPORTING
        it_ztpp0009 = ot_ztpp0009
      IMPORTING
        ot_ztpp0009 = ot_ztpp0009.

  ENDMETHOD.
  METHOD obtener_kg_pulper.

    DATA: lv_kg_pulper TYPE menge_d.


    SELECT charg , bwart , menge
      FROM aufm
      INTO TABLE @DATA(t_aufm)
      WHERE ( bwart = '101' OR bwart = '102' ) AND
             werks = @i_werks AND
             aufnr = @i_aufnr.

    LOOP AT t_aufm INTO DATA(wa_aufm).
      CLEAR: lv_kg_pulper.

      SELECT SINGLE * FROM mseg
       INTO @DATA(ls_mseg_309)
       WHERE bwart = '309' AND
             werks = @i_werks AND
             charg = @wa_aufm-charg.

      IF sy-subrc = 0.
        SELECT SINGLE menge FROM mseg
          INTO lv_kg_pulper
          WHERE mblnr = ls_mseg_309-mblnr AND
            mjahr = ls_mseg_309-mjahr AND
          charg <> ls_mseg_309-charg.
      ENDIF.

      CASE wa_aufm-bwart.
        WHEN '101'.
          o_num_rollos = o_num_rollos + 1.
          o_kg_pulper  = o_kg_pulper  + lv_kg_pulper.
        WHEN '102'.
          o_num_rollos = o_num_rollos - 1.
          o_kg_pulper  = o_kg_pulper  - lv_kg_pulper.
      ENDCASE.
    ENDLOOP.


  ENDMETHOD.
  METHOD obtener_nombre_cliente.

    SELECT SINGLE name1 FROM kna1
 INTO o_name
 WHERE kunnr EQ i_kunnr.


  ENDMETHOD.
  METHOD obtener_of_bobina.

    clear ot_aufnr_bobina[].
* Obtenemos las OF de bonina y su ancho y pedido/posicion asociadas.
    SELECT aufk~aufnr , zzancho , zzebeln1 as zzebeln , zzebelp1 as zzebelp
      FROM aufk
      INNER JOIN afko ON afko~aufnr = aufk~aufnr
      INNER JOIN mara ON mara~matnr = afko~plnbez
      INTO CORRESPONDING FIELDS OF TABLE @ot_aufnr_bobina
      WHERE zzaufnr_rollo = @i_aufnr_rollo AND
            auart = 'ZI02'.

  ENDMETHOD.
  METHOD obtener_rollo_y_tornadas.

    CASE i_werks.
      WHEN  gc_3020. " Sarrià
        o_tornadas = gc_tornadas_3020.
        o_rollos   = ceil( i_kg / gc_kg_rollo_3020 ).
      WHEN  gc_3000. " l'Alquería
        o_tornadas = gc_tornadas_3000.
        o_rollos   = ceil( i_kg / gc_kg_rollo_3000 ).
    ENDCASE.

  ENDMETHOD.
  METHOD programar_secuenciador.

    DATA: l_hora_prog_ant  TYPE t,
          l_fecha_prog_ant TYPE d,
          l_addtime        TYPE t.

    ot_ztpp0009[] = it_ztpp0009[].

    LOOP AT ot_ztpp0009 ASSIGNING FIELD-SYMBOL(<fs_ztp09>).

* Si la orden no está liberada, limpiamos campos programación y continue.
      IF <fs_ztp09>-stat     <> gc_i0002_liberada OR
         <fs_ztp09>-ind_fin  = 'X'       OR
         <fs_ztp09>-ind_bloq = 'X'.
        CLEAR: <fs_ztp09>-fecha_prog  , <fs_ztp09>-hora_prog,
               <fs_ztp09>-fecha_final , <fs_ztp09>-hora_final.
        CONTINUE.
      ENDIF.

      IF l_hora_prog_ant IS INITIAL AND l_fecha_prog_ant IS INITIAL.
        TRY.
            l_fecha_prog_ant = it_values_fecha_hora[ fieldname = 'FECHA_PROG' ]-value.
            l_hora_prog_ant  = it_values_fecha_hora[ fieldname = 'HORA_PROG' ]-value.

*            <fs_ztp09>-fecha_prog = it_values_fecha_hora[ fieldname = 'FECHA_PROG' ]-value.
*            <fs_ztp09>-hora_prog  = it_values_fecha_hora[ fieldname = 'HORA_PROG' ]-value.
          CATCH cx_root .
            ot_return = 1.
            EXIT.
        ENDTRY.
      ENDIF.

* Si detectamos Paro, incrementamos las horas.
      IF <fs_ztp09>-horas_paro > 0.
        l_addtime = <fs_ztp09>-horas_paro * 3600.
        CALL METHOD zcl_secuenciador=>incrementar_horas
          EXPORTING
            i_fecha        = l_fecha_prog_ant
            i_hora         = l_hora_prog_ant
            i_segundos_add = l_addtime
          IMPORTING
            o_fecha        = <fs_ztp09>-fecha_prog
            o_hora         = <fs_ztp09>-hora_prog.

        l_fecha_prog_ant  = <fs_ztp09>-fecha_prog.
        l_hora_prog_ant   = <fs_ztp09>-hora_prog.
      ENDIF.

      <fs_ztp09>-fecha_prog = l_fecha_prog_ant.
      <fs_ztp09>-hora_prog  = l_hora_prog_ant.

**Sumamos una hora x rollo a la fecha final y variables ant.
      l_addtime = <fs_ztp09>-rollos * 3600.

      CALL METHOD zcl_secuenciador=>incrementar_horas
        EXPORTING
          i_fecha        = l_fecha_prog_ant
          i_hora         = l_hora_prog_ant
          i_segundos_add = l_addtime
        IMPORTING
          o_fecha        = l_fecha_prog_ant
          o_hora         = l_hora_prog_ant.

      <fs_ztp09>-fecha_final = l_fecha_prog_ant.
      <fs_ztp09>-hora_final  = l_hora_prog_ant.

    ENDLOOP.

    CALL METHOD zcl_secuenciador=>set_icons
      EXPORTING
        it_ztpp0009 = ot_ztpp0009
      IMPORTING
        ot_ztpp0009 = ot_ztpp0009.


    CALL METHOD zcl_secuenciador=>guardar_ztpp0009
      EXPORTING
        it_ztpp0009 = ot_ztpp0009
        i_werks     = i_werks.

  ENDMETHOD.
  METHOD set_icons.

    DATA: lv_calidad_ant TYPE zzcalidad,
          lv_gramaje_ant TYPE zzgramaje,
          lv_ancho_ant   TYPE zancho,
          lv_cont        TYPE i.

    ot_ztpp0009[] = it_ztpp0009[].

    LOOP AT ot_ztpp0009 ASSIGNING FIELD-SYMBOL(<fs_datos>).
      lv_cont = lv_cont + 1.

*Index
      <fs_datos>-zindex = lv_cont.

*Cambio de calidad, gramaje y ancho
      IF <fs_datos>-matkl NE lv_calidad_ant.
        <fs_datos>-icon_calidad = '@9Z@'.
      ELSE.
        CLEAR <fs_datos>-icon_calidad.
      ENDIF.

      IF <fs_datos>-zzgramaje NE lv_gramaje_ant.
        <fs_datos>-icon_gramaje = '@U6@'.
      ELSE.
        CLEAR <fs_datos>-icon_gramaje.
      ENDIF.

      IF <fs_datos>-zzancho NE lv_ancho_ant.
        <fs_datos>-icon_ancho = '@UF@'.
      ELSE.
        CLEAR <fs_datos>-icon_ancho.
      ENDIF.

      CLEAR: <fs_datos>-zicon_observa ,
             <fs_datos>-zicon_obs_pope ,
             <fs_datos>-zicon_bop_par.

      IF <fs_datos>-observ_pope IS NOT INITIAL.
        <fs_datos>-zicon_obs_pope = '@0S@'.
      ENDIF.

      IF <fs_datos>-observaciones IS NOT INITIAL.
        <fs_datos>-zicon_observa = '@AH@'.
      ENDIF.

      IF <fs_datos>-zzebeln2 IS NOT INITIAL.
        <fs_datos>-zicon_bop_par = '@46@'.
      ENDIF.

* Icono de ESTADO de Fabricación
      CASE 'X'.
        WHEN <fs_datos>-ind_bloq.
          <fs_datos>-icon_estado = '@06@'.

        WHEN <fs_datos>-ind_fin.
            <fs_datos>-icon_estado = '@DF@'.
        WHEN <fs_datos>-ind_calidad_ok.
            <fs_datos>-icon_estado = '@EJ@'.

        WHEN OTHERS.
          CASE <fs_datos>-stat.
            WHEN gc_i0002_liberada. " Liberada
              IF <fs_datos>-num_fabr < 100.
              <fs_datos>-icon_estado = '@5Y@'.   "Bandera Verda
              else.
                <fs_datos>-icon_estado = '@9B@'. "'@F1@'. " Bandereta roja
              ENDIF.
            WHEN gc_i0001_abierta.  "Abierta
              CLEAR <fs_datos>-icon_estado.
            WHEN OTHERS.
          ENDCASE.
      ENDCASE.

      CLEAR: lv_calidad_ant,lv_gramaje_ant, lv_ancho_ant.
      lv_calidad_ant = <fs_datos>-matkl.
      lv_gramaje_ant = <fs_datos>-zzgramaje.
      lv_ancho_ant = <fs_datos>-zzancho.

    ENDLOOP.



  ENDMETHOD.
  METHOD tratar_ztpp0009_upd.


* Recuperamos registros pendientes de tratar, ordenados cronológicamente ascendente
    SELECT *
      INTO TABLE @DATA(lt_pendientes)
      FROM ztpp0009_blq
      WHERE tratado = ' '
      ORDER BY erdat  ASCENDING ,
               erzeit ASCENDING.

    LOOP AT lt_pendientes INTO DATA(ls_pend).

      IF ls_pend-ind_fin_x = 'X'.

        UPDATE   ztpp0009
        SET ind_fin     = ls_pend-ind_fin
        WHERE werks     = ls_pend-werks AND
              aufnr     = ls_pend-aufnr AND
              num_fabr  = ls_pend-num_fabr.

      ENDIF.

      IF ls_pend-observ_pope_x = 'X'.

        UPDATE   ztpp0009
        SET observ_pope = ls_pend-observ_pope
        WHERE werks     = ls_pend-werks AND
              aufnr     = ls_pend-aufnr AND
              num_fabr  = ls_pend-num_fabr.

      ENDIF.

* Marcar el registro como tratado.
      UPDATE ztpp0009_blq
      SET tratado = 'X'
        WHERE werks     = ls_pend-werks AND
              aufnr     = ls_pend-aufnr AND
              num_fabr  = ls_pend-num_fabr.

    ENDLOOP.

  ENDMETHOD.
  METHOD upd_direct_o_difer_ztpp0009.

    DATA: ls_ztpp0009_upd TYPE ztpp0009_blq.

    CLEAR: o_upd_diferido.

    CALL FUNCTION 'ENQUEUE_EZPP0030_QUEUE'
      EXPORTING
        mode_ztpp0009  = 'E'
        werks          = i_werks
        x_werks        = ' '
        _scope         = '2'
        _wait          = ' '
        _collect       = ' '
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.

    IF sy-subrc <> 0. "Centro bloqueado, registramos actualización en ZTPP009_UPD

      o_upd_diferido = 'X'.
      CLEAR ls_ztpp0009_upd.
      ls_ztpp0009_upd-werks     = i_werks.
      ls_ztpp0009_upd-aufnr     = i_aufnr.
      ls_ztpp0009_upd-num_fabr  = i_num_fabr.
      ls_ztpp0009_upd-tratado   = ' '.
      ls_ztpp0009_upd-erdat     = sy-datum.
      ls_ztpp0009_upd-erzeit    = sy-uzeit.
      ls_ztpp0009_upd-eruser    = sy-uname.

      IF i_ind_fin_x = 'X'.
        ls_ztpp0009_upd-ind_fin_x = 'X'.
        ls_ztpp0009_upd-ind_fin   = i_ind_fin.
      ENDIF.

      IF i_ind_obs_pope_x = 'X'.
        ls_ztpp0009_upd-observ_pope_x = 'X'.
        ls_ztpp0009_upd-observ_pope = i_observ_pope.
      ENDIF.

      INSERT ztpp0009_blq FROM ls_ztpp0009_upd.

    ELSE. "  bloqueo de centro OK, y hacemos la actualización directa

      CALL METHOD zcl_secuenciador=>tratar_ztpp0009_upd.

      IF i_ind_fin_x = 'X'. "actualización de IND_FIN

        UPDATE   ztpp0009
        SET ind_fin     = i_ind_fin
        WHERE werks     = i_werks AND
              aufnr     = i_aufnr AND
              num_fabr  = i_num_fabr.

      ENDIF.

      IF i_ind_obs_pope_x = 'X'. "actualización de Observaciones POPE

        UPDATE   ztpp0009
        SET observ_pope = i_observ_pope
        WHERE werks     = i_werks AND
              aufnr     = i_aufnr AND
              num_fabr  = i_num_fabr.

      ENDIF.

      CALL FUNCTION 'DEQUEUE_EZPP0030_QUEUE'
        EXPORTING
          mode_ztpp0009 = 'E'
          werks         = i_werks
          x_werks       = ' '
          _scope        = '3'
          _synchron     = ' '
          _collect      = ' '.


    ENDIF.

  ENDMETHOD.
  method VALIDAR_ROLLOS_1020.

    select au~charg
      from aufm as au
      inner join mchb as mc on au~werks = mc~werks and
                               au~charg = mc~charg
      into table @data(lt_charg)
      where au~werks = @i_werks and
            au~aufnr = @i_aufnr and
            au~bwart = '101'   and
            mc~lgort = '1020'  and
            mc~clabs > 0.
      IF sy-subrc <> 0.
        clear o_error.
      else.
        o_error = 'X'.
      ENDIF.
  endmethod.
