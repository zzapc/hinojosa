*&---------------------------------------------------------------------*
*&  Include           ZRINV0001_I01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  CASE gv_okcode.
*   Cancelar
*    WHEN 'CANC'.
*      CALL SELECTION-SCREEN '0002' STARTING AT 15 5..
**      SET SCREEN 0.
**      LEAVE SCREEN.
*
**   Retroceder.
*    WHEN 'BACK'.
*      CALL SELECTION-SCREEN '0002' STARTING AT 15 5..
*
**      SET SCREEN 0.
**      LEAVE SCREEN.

*   Salir
    WHEN 'EXIT' OR 'CANC' OR 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'SM_TERMINA'.
      CALL TRANSACTION 'ZMM0029'.
  ENDCASE.

  CLEAR gv_okcode.

ENDMODULE.                 " USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  CASE gv_okcode2.
    WHEN 'SHOWLOG'.
      CLEAR gv_okcode2.
      DATA: t_log LIKE ztinv_log OCCURS 0 WITH HEADER LINE.
      SELECT * INTO CORRESPONDING FIELDS OF TABLE t_log
          FROM ztinv_log WHERE docum   EQ zsinv0001_grid-docum
                           AND version EQ zsinv0001_grid-version.
      IF sy-subrc NE 0.
        MESSAGE i398(00) WITH 'No hay log'.
      ELSE.
        DATA: t_men LIKE bapiret2 OCCURS 0 WITH HEADER LINE.
        REFRESH t_men.
        LOOP AT t_log.
          t_men-type    = t_log-tipo.
          t_men-id      = t_log-id.
          t_men-number  = t_log-numero.

          t_men-message_v1  = t_log-m1.
          t_men-message_v2  = t_log-m2.
          t_men-message_v3  = t_log-m3.
          t_men-message_v4  = t_log-m4.
          APPEND t_men.
        ENDLOOP.
        PERFORM log_inventario TABLES t_men USING zsinv0001_grid-docum 'LOG'.

      ENDIF.
    WHEN 'IMPACTO'.
      CLEAR gv_okcode2.
      PERFORM impacto_economico USING 'X' CHANGING gv_imp_calc.
*   Cancelar
*    WHEN 'CANC'.
*      clear gv_okcode2.
*      LEAVE TO SCREEN 0100.
**   Retroceder.
*    WHEN 'BACK'.
*      clear gv_okcode2.
*      LEAVE TO SCREEN 0100.
**   Salir
*    WHEN 'EXIT'.
*      clear gv_okcode2.
*      LEAVE TO SCREEN 0100.

*   Cambiar status
    WHEN 'CHANGE'.
      PERFORM cambio_de_status.

*   exportar inventario a csv
    WHEN 'EXPORT'.
      PERFORM export.

*   importar csv a inventario
    WHEN 'IMPORT'.
      PERFORM import.

*   finalizar inventario
    WHEN 'FINAL'.
      PERFORM finalizar.

  ENDCASE.

  CLEAR gv_okcode2.
ENDMODULE.                 " USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.

*  DATA: error TYPE xfeld.

  CASE gv_okcode4.

*   Aceptar:
    WHEN 'ACEPTAR'.
      CLEAR: gv_okcode4.
*      IF gv_werks IS INITIAL.
*        error = 'X'.
**       Informe el centro
*        MESSAGE i000(zinv) .
*
*      ELSE.
*        PERFORM chequear_centro USING gv_werks
*                                CHANGING error.
*      ENDIF.
*
*      IF gv_lgort IS INITIAL.
*        error = 'X'.
**       Informe el almacen
*        MESSAGE i001(zinv) .
*      ELSE.
*        PERFORM chequear_almacen USING gv_lgort
*                                 CHANGING error.
*      ENDIF.
*
*      IF error IS NOT INITIAL.
*        CALL SCREEN '0300' STARTING AT 10 5.
*      ELSE.

      IF gv_werks IS NOT INITIAL AND gv_lgort IS NOT INITIAL.
        PERFORM crear_inventario CHANGING gv_werks
                                          gv_lgort
                                          gv_mtart.
        CLEAR: gv_werks, gv_lgort, gv_mtart.
        LEAVE TO SCREEN 0.
      ENDIF.
*      ENDIF.

*   Cancelar:
    WHEN 'CANCELAR'.
      CLEAR: gv_okcode4.
      LEAVE TO SCREEN 0.

    WHEN 'CANCEL'.
      CLEAR: gv_okcode4.
      LEAVE TO SCREEN 0.

    WHEN 'CANC'.
      CLEAR: gv_okcode4.
      LEAVE TO SCREEN 0.

    WHEN 'BACK'.
      CLEAR: gv_okcode4.
      LEAVE TO SCREEN 0.
  ENDCASE.


ENDMODULE.                 " USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0400  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0400 INPUT.

  CASE gv_okcode5.
    WHEN 'ACEPTAR'.
      PERFORM f_file_open_dialog CHANGING gv_file.

      PERFORM f_front_process USING gv_file
                              CHANGING gv_error.
    WHEN 'CANCELAR'.
      LEAVE TO SCREEN 0100.

  ENDCASE.

  CLEAR gv_okcode5.
ENDMODULE.                 " USER_COMMAND_0400  INPUT
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_CENTRO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_centro INPUT.


  IF gv_werks IS INITIAL.
    CLEAR: gv_okcode4.
*    error = 'X'.
    MESSAGE e100. "El centro es un campo obligatorio.
  ELSE.
    CLEAR lv_werks.
    SELECT SINGLE werks INTO lv_werks
      FROM t001w
      WHERE werks = gv_werks.

    IF lv_werks IS INITIAL.
      CLEAR: gv_okcode4.
*    error = 'X'.
      MESSAGE e101. "Centro indicado no existe.
    ELSE.
      AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
                  ID 'ACTVT' FIELD '03'
                  ID 'WERKS' FIELD gv_werks.

      IF sy-subrc <> 0.
        CLEAR: gv_okcode4.
*      error = 'X'.
        MESSAGE e103(zmm) WITH gv_werks. "No tiene autorización al centro &.
      ENDIF.

    ENDIF.
  ENDIF.

ENDMODULE.                 " VALIDAR_CENTRO  INPUT
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_ALMACEN  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_almacen INPUT.
  DATA: ls_inv_ci TYPE ztinv_ci.

  IF gv_lgort IS INITIAL.
*    error = 'X'.
    MESSAGE e110(zmm). "El almacén es un campo obligatorio.
  ELSE.
    CLEAR lv_lgort.
    SELECT SINGLE lgort INTO lv_lgort
      FROM t001l
      WHERE werks = gv_werks
      AND lgort = gv_lgort.

    IF lv_lgort IS INITIAL.
      CLEAR: gv_lgort.
*      error = 'X'.
      MESSAGE e102(zmm). "Almacén indicado no existe.
    ELSE.
      IF gv_papel = 'X'.
        gv_mtart = c_zpap.
      ELSEIF gv_recorte = 'X'.
        gv_mtart = c_zrec.
      ENDIF.

      SELECT SINGLE * INTO ls_inv_ci
        FROM ztinv_ci
        WHERE mtart = gv_mtart
        AND werks = gv_werks
        AND lgort = gv_lgort
         AND ( status <> 'F' AND status <> 'B' ).
      IF sy-subrc EQ 0.
*      IF ls_inv_ci IS NOT INITIAL. " Ya existe el inventario
        CLEAR: gv_okcode4.
        MESSAGE e104(zmm) " DISPLAY LIKE 'E'
                WITH ls_inv_ci-docum gv_werks gv_lgort gv_mtart .
      ENDIF.
    ENDIF.
  ENDIF.

ENDMODULE.                 " VALIDAR_ALMACEN  INPUT
*&---------------------------------------------------------------------*
*&      Module  SALIR_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE salir_command_0300 INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.                 " SALIR_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*&      Module  CHECK_CAMBIAR_TERM  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE check_cambiar_term INPUT.
  DATA: r_ztinv_ci_old TYPE ztinv_ci,
        r_ztinv_te     TYPE ztinv_te.
  IF zsinv0001_grid-term IS NOT INITIAL.
    SELECT SINGLE * INTO r_ztinv_te     FROM ztinv_te WHERE term   EQ zsinv0001_grid-term.
    IF sy-subrc NE 0.
      MESSAGE e398(00) WITH 'No existe el terminal:' zsinv0001_grid-term.
    ENDIF.
  ELSE.
    CLEAR zsinv0001_grid-codint.
  ENDIF.
  SELECT SINGLE * INTO r_ztinv_ci_old FROM ztinv_ci WHERE docum EQ zsinv0001_grid-docum.
  IF r_ztinv_ci_old-term NE zsinv0001_grid-term.
    zsinv0001_grid-codint = r_ztinv_te-codint.
    UPDATE ztinv_ci SET term   = zsinv0001_grid-term
                        codint = zsinv0001_grid-codint
                        aedat  = sy-datum
                        aezeit = sy-uzeit
                        aenam  = sy-uname
                  WHERE docum EQ zsinv0001_grid-docum.
    DATA: rti_mostrar TYPE zsinv0001_grid.
    READ TABLE gti_mostrar INTO rti_mostrar WITH KEY docum = zsinv0001_grid-docum.

    rti_mostrar-term = zsinv0001_grid-term.
    rti_mostrar-codint = zsinv0001_grid-codint.
    rti_mostrar-aedat  = sy-datum.
    rti_mostrar-aezeit = sy-uzeit.
    rti_mostrar-aenam  = sy-uname.
    MODIFY gti_mostrar FROM rti_mostrar INDEX sy-tabix.
*       Refrescamos el ALV
    PERFORM refrescar_alv.
  ENDIF.

ENDMODULE.                 " CHECK_CAMBIAR_TERM  INPUT
*&---------------------------------------------------------------------*
*&      Module  SALIR_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE salir_0200 INPUT.
  CASE gv_okcode2.
    WHEN 'CANC' OR 'EXIT' OR 'BACK'.
      DATA: sw_bloq.
      PERFORM bloquear_inventario USING zsinv0001_grid-docum 'D' CHANGING sw_bloq.

      CLEAR gv_okcode2.

      SET SCREEN 100. LEAVE SCREEN.

  ENDCASE.
ENDMODULE.                 " SALIR_0200  INPUT
