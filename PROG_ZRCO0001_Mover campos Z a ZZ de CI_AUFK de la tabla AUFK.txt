*&---------------------------------------------------------------------*
*& Report  ZRCO0001
*&
*&---------------------------------------------------------------------*
*&  Cod transac: COR2
*&  Nombre tabla: AUFK
*& Objeto bloqueo: ESORDER
*&---------------------------------------------------------------------*

REPORT zrco0001.

TABLES: aufk.

TYPES: BEGIN OF ltyp_aufk_red,
         aufnr TYPE aufnr,
         auart TYPE aufart,
         autyp TYPE auftyp.
        INCLUDE TYPE  ci_aufk.
TYPES: END OF ltyp_aufk_red.

DATA: lt_aufk_red TYPE TABLE OF ltyp_aufk_red,
      ls_aufk_red TYPE          ltyp_aufk_red,
      lv_log      TYPE          c LENGTH 100.

SELECT-OPTIONS: s_aufnr FOR aufk-aufnr.

START-OF-SELECTION.
*Obtengo los registros posibles a modificar

  SELECT aufnr auart autyp
  zkunnr1
  zkunnr2
  zkunnr3
  zebeln1
  zebelp1
  zfec_entreg1
  zebeln2
  zebelp2
  zfec_entreg2
  zebeln3
  zebelp3
  zfec_entreg3
  zrollos1
  ztor1
  zrollos2
  ztor2
  zrollos3
  ztor3
  zmotivo
  zsecuencia
  zurgt1
  zurgt2
  zurgt3
  zaufnr_rollo
  zzkunnr1
  zzkunnr2
  zzkunnr3
  zzebeln1
  zzebelp1
  zzfec_entreg1
  zzebeln2
  zzebelp2
  zzfec_entreg2
  zzebeln3
  zzebelp3
  zzfec_entreg3
  zzrollos1
  zztor1
  zzrollos2
  zztor2
  zzrollos3
  zztor3
  zzmotivo
  zzsecuencia
  zzurgt1
  zzurgt2
  zzurgt3
  zzaufnr_rollo
    FROM aufk
    INTO TABLE lt_aufk_red
    WHERE aufnr IN s_aufnr AND
       ( zkunnr1 EQ space OR zkunnr2 EQ space
       OR zkunnr3 EQ space OR zebeln1 EQ space
       OR zebelp1 EQ space OR zfec_entreg1 EQ space
       OR zebeln2 EQ space OR zebelp2 EQ space
       OR zfec_entreg2  EQ space OR zebeln3 EQ space
       OR zebelp3  EQ space OR zfec_entreg3 EQ space
       OR zrollos1 EQ space OR ztor1 EQ space
       OR zrollos2 EQ space OR ztor2 EQ space
       OR zrollos3 EQ space OR ztor3 EQ space
       OR zmotivo EQ space OR zsecuencia EQ space
       OR zurgt1 EQ space OR zurgt2 EQ space
       OR zurgt3 EQ space OR zaufnr_rollo EQ space ).

  LOOP AT lt_aufk_red INTO ls_aufk_red.

    CALL FUNCTION 'ENQUEUE_ESORDER'
      EXPORTING
*       MODE_AUFK      = 'E'
*       MANDT          = SY-MANDT
        aufnr          = ls_aufk_red-aufnr
*       X_AUFNR        = ' '
*       _SCOPE         = '2'
*       _WAIT          = ' '
*       _COLLECT       = ' '
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
*  Escribir en log para posterior tratamiento.
      CLEAR: lv_log.
      CONCATENATE text-t01 ls_aufk_red-aufnr text-t02
      INTO lv_log SEPARATED BY space.

      WRITE lv_log.

      CONTINUE.

    ELSE.

      UPDATE aufk
      SET
      zzkunnr1  = ls_aufk_red-zkunnr1
      zzkunnr2  = ls_aufk_red-zkunnr2
      zzkunnr3  = ls_aufk_red-zkunnr3
      zzebeln1  = ls_aufk_red-zebeln1
      zzebelp1  = ls_aufk_red-zebelp1
      zzfec_entreg1	=	ls_aufk_red-zfec_entreg1
      zzebeln2  = ls_aufk_red-zebeln2
      zzebelp2  = ls_aufk_red-zebelp2
      zzfec_entreg2	=	ls_aufk_red-zfec_entreg2
      zzebeln3  = ls_aufk_red-zebeln3
      zzebelp3  = ls_aufk_red-zebelp3
      zzfec_entreg3	=	ls_aufk_red-zfec_entreg3
      zzrollos1	=	ls_aufk_red-zrollos1
      zztor1  = ls_aufk_red-ztor1
      zzrollos2	=	ls_aufk_red-zrollos2
      zztor2  = ls_aufk_red-ztor2
      zzrollos3	=	ls_aufk_red-zrollos3
      zztor3  = ls_aufk_red-ztor3
      zzmotivo  = ls_aufk_red-zmotivo
      zzsecuencia	=	ls_aufk_red-zsecuencia
      zzurgt1	=	ls_aufk_red-zurgt1
      zzurgt2	=	ls_aufk_red-zurgt2
      zzurgt3	=	ls_aufk_red-zurgt3
      zzaufnr_rollo	=	ls_aufk_red-zaufnr_rollo

      WHERE aufnr = ls_aufk_red-aufnr.

      IF sy-subrc NE 0.
        CLEAR: lv_log.
        CONCATENATE text-t01 ls_aufk_red-aufnr text-t04
        INTO lv_log SEPARATED BY space.

        WRITE lv_log.

      ENDIF.


      CALL FUNCTION 'DEQUEUE_ESORDER'
        EXPORTING
*         MODE_AUFK       = 'E'
*         MANDT = SY-MANDT
          aufnr = ls_aufk_red-aufnr
*         X_AUFNR         = ' '
*         _SCOPE          = '3'
*         _SYNCHRON       = ' '
*         _COLLECT        = ' '
        .


    ENDIF.



  ENDLOOP.
