*&---------------------------------------------------------------------*
*&  Include           ZSBC000_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
FORM obtener_datos .

  DATA: cs_cofile  TYPE ctslg_cofile,
        l_settings TYPE ctslg_settings.

  SELECT a~trkorr trstatus as4text INTO CORRESPONDING FIELDS OF TABLE gt_alv
    FROM e070 AS a INNER JOIN e07t AS b ON a~trkorr = b~trkorr WHERE a~trkorr IN so_tkorr.


  LOOP AT gt_alv ASSIGNING FIELD-SYMBOL(<trkorr>).

    CALL FUNCTION 'TR_READ_GLOBAL_INFO_OF_REQUEST'
      EXPORTING
        iv_trkorr   = <trkorr>-trkorr
*       iv_dir_type = 'T'
        is_settings = l_settings
*       iv_suppress_deleted_steps = ' '
*       it_comm_systems           =
      IMPORTING
        es_cofile   = cs_cofile
*       ev_user     =
*       ev_project  =
      .

    READ TABLE cs_cofile-systems INTO DATA(l_system) WITH KEY systemid = p_syst.

    READ TABLE l_system-steps INTO DATA(l_step) WITH KEY stepid = '!'.
    IF sy-subrc NE 0.
      READ TABLE l_system-steps INTO l_step WITH KEY stepid = 'I'.
    ENDIF.

    READ TABLE l_step-actions INTO DATA(l_act) INDEX 1.
    <trkorr>-udatum =  l_act-date.
    <trkorr>-uzeit =  l_act-time.
    CLEAR l_step.
  ENDLOOP.







ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ALV_MOSTRAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_mostrar .

  DATA: ls_lvc_s_layo TYPE lvc_s_layo,
        ls_variant    TYPE disvariant.

* Variante
  PERFORM alv_prepare_variant CHANGING ls_variant.

* Preparamos el catálogo de campos
  PERFORM alv_prepare_fielcat.

* Preparamos el layout
  PERFORM alv_prepare_layout CHANGING ls_lvc_s_layo.

** Preparamos eventos
*  PERFORM alv_prepare_events.

* Mostramos el ALV
  CALL METHOD gcl_grid->set_table_for_first_display
    EXPORTING
      i_buffer_active    = ' '
      i_bypassing_buffer = 'X'
      is_layout          = ls_lvc_s_layo
      i_structure_name   = 'ZSBC000A'
      is_variant         = ls_variant
      i_save             = 'A'
    CHANGING
      it_outtab          = gt_alv[]
      it_fieldcatalog    = gt_fieldcat.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  alv_prepare_variant
*&---------------------------------------------------------------------*
FORM alv_prepare_variant CHANGING ps_variant TYPE disvariant .


*  IF NOT p_varian IS INITIAL.
  ps_variant-report      = sy-repid.
  ps_variant-handle      = space.
  ps_variant-log_group   = space.
  ps_variant-username    = space.
*  ps_variant-variant     = p_varian.
  ps_variant-text        = space.
  ps_variant-dependvars  = space.
*  ENDIF.


ENDFORM.                    "alv_prepare_variant
*&---------------------------------------------------------------------*
*&      Form  alv_prepare_fielcat
*&---------------------------------------------------------------------*
FORM alv_prepare_fielcat.

  DATA: ls_fcat TYPE lvc_s_fcat.
  DATA: lv_tabix TYPE sytabix.


  REFRESH: gt_fieldcat_ant, gt_fieldcat.

* Pasar tabla interna al formato del fieldcat
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_program_name         = sy-repid
      i_structure_name       = 'ZSBC000A'
      i_inclname             = sy-repid
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = gt_fieldcat_ant
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

* Pasar el anterior fieldcat al formato del nuevo
  CALL FUNCTION 'LVC_TRANSFER_FROM_SLIS'
    EXPORTING
      it_fieldcat_alv = gt_fieldcat_ant
    IMPORTING
      et_fieldcat_lvc = gt_fieldcat
    TABLES
      it_data         = gt_alv
    EXCEPTIONS
      it_data_missing = 1
      OTHERS          = 2.

** Recorremos el catálogo de campos modificandolo

  LOOP AT gt_fieldcat INTO ls_fcat.
    lv_tabix = sy-tabix.
    CASE ls_fcat-fieldname.
      WHEN 'TRKORR'.
        ls_fcat-hotspot = 'X'.

*
    ENDCASE.
    MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.

  ENDLOOP.


ENDFORM.                    "alv_prepare_fielcat
*&---------------------------------------------------------------------*
*&      Form  ALV_PREPARE_LAYOUT
*&---------------------------------------------------------------------*
FORM alv_prepare_layout CHANGING ls_lvc_s_layo TYPE lvc_s_layo.

* Para que muestre el ancho de las columnas optimizado
  ls_lvc_s_layo-cwidth_opt = 'X'.
  ls_lvc_s_layo-sel_mode   = 'A'.

ENDFORM.                    " ALV_PREPARE_LAYOUT
*&---------------------------------------------------------------------*
*&      Form  OBTENER_VARIANTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_VARIAN  text
*----------------------------------------------------------------------*
FORM obtener_variante  CHANGING c_variant TYPE disvariant-variant.

  DATA: ls_variant TYPE disvariant,
        l_exit     TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
*     it_default_fieldcat =
    IMPORTING
      e_exit     = l_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 2.

  IF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    IF l_exit EQ space.
      c_variant = ls_variant-variant.
    ENDIF.
  ENDIF.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_EVENT_UCOMM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_ROW_ID  text
*      -->P_E_COLUMN_ID  text
*      -->P_ES_ROW_NO  text
*----------------------------------------------------------------------*
FORM f_event_ucomm  USING p_row_id p_column_id p_row_no STRUCTURE lvc_s_roid.


  DATA: wa_datos TYPE zsbc000a,
        t_tkorrs TYPE ctslg_trkorrs,
        l_tkorrs TYPE ctslg_head.

*    leemos la tabla con datos y pasamos a la estructura la linea
*    seleccionada
  READ TABLE gt_alv INDEX p_row_no-row_id INTO wa_datos.
  CASE p_column_id.
    WHEN 'TRKORR'.
      IF NOT wa_datos-trkorr IS INITIAL.

        CLEAR: l_tkorrs.
        REFRESH: t_tkorrs.

        l_tkorrs-trkorr = wa_datos-trkorr.
        APPEND l_tkorrs TO t_tkorrs.

        CALL FUNCTION 'TR_LOG_OVERVIEW_REQUESTS'
          EXPORTING
            it_trkorrs   = t_tkorrs
*           iv_dir_type  = 'T'
*           is_settings  =
*           is_sort_description =
*           iv_first_node_text  =
*           iv_title     =
*           iv_prog_top_of_page =
*           iv_form_top_of_page =
*           is_popup     =
*           it_comm_sysnames    =     " Table of System Names
          EXCEPTIONS
            e_wrong_call = 1
            OTHERS       = 2.
        IF sy-subrc <> 0.
*         MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
      ENDIF.


  ENDCASE.


ENDFORM.
