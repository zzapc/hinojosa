FUNCTION zeic_obtener_datos_visor.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(IC_BUKRS) LIKE  /COCKPIT/THDR-COMP_CODE
*"     VALUE(IC_BELNR) LIKE  /COCKPIT/THDR-SAP_DOC_NO
*"     VALUE(IC_GJAHR) LIKE  /COCKPIT/THDR-FISCAL_YEAR
*"     VALUE(IC_FORMATO) TYPE  ZEIC_FORMATO
*"     VALUE(IC_IND_RESCAN) TYPE  ZEIC_RESCAN OPTIONAL
*"     VALUE(IC_RUTA) TYPE  ZEIC_RUTA_FICHERO
*"     VALUE(IC_ORIGEN) TYPE  /COCKPIT/DDOCNO OPTIONAL
*"     VALUE(IC_FICH_CAB) TYPE  ZEIC_FICH_CAB OPTIONAL
*"     VALUE(IC_FICH_LIN) TYPE  ZEIC_FICH_LINEA OPTIONAL
*"  TABLES
*"      E_TAB_MESSAGES STRUCTURE  BAPIRET2
*"  CHANGING
*"     VALUE(IB_ERROR) TYPE  BOOLE-BOOLE OPTIONAL
*"----------------------------------------------------------------------

  DATA: ls_separador1(1)   TYPE c VALUE '#',
        ls_separador2(2)   TYPE c VALUE '##',
        ls_separador4(4)   TYPE c VALUE '####',
        ls_separador5(5)   TYPE c VALUE '#####',
        ls_separador6(6)   TYPE c VALUE '######',
        ls_separador7(7)   TYPE c VALUE '#######',
        ls_separador9(9)   TYPE c VALUE '#########',
        ls_separador10(10) TYPE c VALUE '##########'.

  DATA: BEGIN OF lt_tab_cab_file,
            id_guid(18)         TYPE c,
            imagefile(255)      TYPE c,
            fact_num(50)        TYPE c,  "Tiene conversión si caracter
*especial '#' en texto
            buyer(25)           TYPE C,
            supplier(140)       TYPE c,
            periodo_contable(4) TYPE c,
            total_fact(18)      TYPE c,
            descuento(18)       TYPE c,
            base_imp(18)        TYPE c,
            tipo_iva(7)         TYPE c,
            import_iva(18)      TYPE c,
            fecha_fact(8)       TYPE d,
            fecha_oper(8)       TYPE d,
            fecha_trans(8)      TYPE d,
            datos_prov(255)     TYPE c,
            datos_soc(255)      TYPE c,
            origen(14)           TYPE c,
        END OF lt_tab_cab_file.

  DATA: BEGIN OF lt_tab_det_file,
            id_guid(18)         TYPE c,
            num_lin(3)          TYPE c,
            base_imp(18)        TYPE c, "P,
            tipo_iva(7)         TYPE c, "P,
            import_iva(18)      TYPE c, "P,
        END OF lt_tab_det_file.

  DATA: lt_tab_cab              LIKE TABLE OF lt_tab_cab_file WITH
HEADER LINE,
        lt_tab_det              LIKE TABLE OF lt_tab_det_file WITH
HEADER LINE.

  DATA: lt_tab_datos_det        LIKE zeic_datos_det OCCURS 0 WITH
HEADER LINE,
        lt_zeic_visor           LIKE zeic_visor OCCURS 0 WITH HEADER
LINE.

  DATA: ls_datos_cab            LIKE zeic_datos_carga.

  DATA: ls_datos_cadena(500)    TYPE c.

  DATA: ls_ruta_imagen          TYPE zeic_visor-ruta_descarga,
        ls_ruta_descarga        TYPE zeic_visor-ruta_descarga,
        ls_ruta_exe_cifrado     TYPE zeic_visor-ruta_descarga,
        ls_nombre_exe           TYPE zeic_visor-ruta_descarga,
        ls_ruta_cabecera        TYPE string,
        ls_ruta_detalle         TYPE string.

  DATA: BEGIN OF lt_tab_text OCCURS  0,
        text(5000)  TYPE c,
        END OF lt_tab_text.

  DATA: BEGIN OF lt_tab_text_1 OCCURS  0,
        text(5000)  TYPE c,
        END OF lt_tab_text_1.

  DATA: ic_invoice_ind          TYPE /cockpit/dinv_ind.

  CLEAR: ib_error.

* Si el formato es FID (tif de firma digital) se genera ficheros para
*  el visor
*  if ic_formato = con_formato_fid.

** Se verifica si hay que generar ficheros para la sociedad
*    select * from zeic_visor into corresponding fields of table
*  lt_zeic_visor.


*    if sy-subrc <> 0.
*      ib_error = con_true.
*    endif.
*
*    check ib_error = con_false.
*
*    clear: ls_ruta_descarga,ls_ruta_imagen.

*    read table lt_zeic_visor index 1.
*    ls_ruta_descarga =  lt_zeic_visor-ruta_descarga.
*
*    ls_ruta_imagen = ic_ruta_imagen.

  CONCATENATE ic_ruta ic_fich_cab   INTO ls_ruta_cabecera.
  CONCATENATE ic_ruta ic_fich_lin   INTO ls_ruta_detalle.

  CLEAR: ls_datos_cab, lt_tab_datos_det.
  REFRESH: lt_tab_datos_det.

  CALL FUNCTION 'ZEIC_OBTENER_DOCUMENTO'
    EXPORTING
      ic_bukrs        = ic_bukrs
      ic_belnr        = ic_belnr
      ic_gjahr        = ic_gjahr
    IMPORTING
      e_datos_cab     = ls_datos_cab
    TABLES
      c_tab_datos_det = lt_tab_datos_det
      e_tab_messages  = e_tab_messages
    CHANGING
      ib_error        = ib_error
      ic_factura      = ic_invoice_ind
    EXCEPTIONS
      error_occured   = 1.


  IF ib_error = con_true.


  ELSE.

    CLEAR lt_tab_cab.
    REFRESH lt_tab_cab.

    lt_tab_cab-id_guid             = ls_datos_cab-guid.
    lt_tab_cab-imagefile           = ls_ruta_imagen.
    lt_tab_cab-fact_num            = ls_datos_cab-xblnr.
    lt_tab_cab-buyer               = ls_datos_cab-comp_name.
    lt_tab_cab-datos_soc           = ls_datos_cab-datos_soc.
    lt_tab_cab-supplier            = ls_datos_cab-name.
    lt_tab_cab-datos_prov          = ls_datos_cab-datos_prov.
    lt_tab_cab-periodo_contable    = ''.
    lt_tab_cab-descuento           = 0.
    lt_tab_cab-fecha_fact          = ls_datos_cab-bldat.
    lt_tab_cab-fecha_oper          = ls_datos_cab-bldat.
    lt_tab_cab-fecha_trans         = ls_datos_cab-budat.
    IF ic_ind_rescan IS INITIAL.
      lt_tab_cab-origen              = ic_origen.
    ELSE.
      lt_tab_cab-origen              = ic_ind_rescan.
    ENDIF.
    lt_tab_cab-tipo_iva            = ls_datos_cab-tax_rate1.

    IF ic_invoice_ind = con_true.
*   es una factura, importes positivos
      lt_tab_cab-total_fact          = ls_datos_cab-wrbtr.
      lt_tab_cab-base_imp            = ls_datos_cab-base1.
      lt_tab_cab-import_iva          = ls_datos_cab-tax_amount1.
    ELSE.
*   es un abono, importes negativos
      lt_tab_cab-total_fact          = ls_datos_cab-wrbtr * -1.
      lt_tab_cab-base_imp            = ls_datos_cab-base1 * -1.
      lt_tab_cab-import_iva          = ls_datos_cab-tax_amount1 * -1.

*   colocamos los signos delante para el fichero
      CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
        CHANGING
          value = lt_tab_cab-total_fact.

      CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
        CHANGING
          value = lt_tab_cab-base_imp.

      CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
        CHANGING
          value = lt_tab_cab-tipo_iva.

      CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
        CHANGING
          value = lt_tab_cab-import_iva.

    ENDIF.

    APPEND lt_tab_cab.

    CLEAR lt_tab_det.
    REFRESH lt_tab_det.

    LOOP AT lt_tab_datos_det.

      lt_tab_det-id_guid    = lt_tab_datos_det-guid.
      lt_tab_det-num_lin    = lt_tab_datos_det-buzei.
      lt_tab_det-tipo_iva   = lt_tab_datos_det-tax_rate.

      IF ic_invoice_ind = con_true.
*     es una factura, importes positivos
        lt_tab_det-base_imp   = lt_tab_datos_det-wrbtr.
        lt_tab_det-import_iva = lt_tab_datos_det-tax_amount.
      ELSE.
*     es un abono, importes negativos
        lt_tab_det-base_imp   = lt_tab_datos_det-wrbtr * -1.
        lt_tab_det-import_iva = lt_tab_datos_det-tax_amount * -1.

*     Se cambia el signo delante para el fichero.
        CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
          CHANGING
            value = lt_tab_det-base_imp.

        CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
          CHANGING
            value = lt_tab_det-import_iva.

      ENDIF.

      APPEND lt_tab_det.

    ENDLOOP.

    CLEAR lt_tab_text_1.
    REFRESH lt_tab_text_1.

    LOOP AT lt_tab_cab.
      REPLACE ALL OCCURRENCES OF '#' IN  lt_tab_cab-fact_num WITH '¿?'.
      REPLACE ALL OCCURRENCES OF '#' IN  lt_tab_cab-datos_soc WITH '¿?'.
      REPLACE ALL OCCURRENCES OF '#' IN  lt_tab_cab-datos_prov WITH
'¿?'.
      REPLACE ALL OCCURRENCES OF '#' IN  lt_tab_cab-buyer WITH '¿?'.
      REPLACE ALL OCCURRENCES OF '#' IN  lt_tab_cab-supplier WITH '¿?'.

      CLEAR:   ls_datos_cadena.

      CONCATENATE
            lt_tab_cab-id_guid
            ls_separador1
            lt_tab_cab-imagefile
            ls_separador1
            lt_tab_cab-fact_num
            ls_separador1
            lt_tab_cab-buyer
            ls_separador1
            lt_tab_cab-datos_soc
            ls_separador1
            lt_tab_cab-supplier
            ls_separador1
            lt_tab_cab-datos_prov
            ls_separador1
            lt_tab_cab-periodo_contable
            ls_separador4
            lt_tab_cab-origen
*     INI: Se incluye el documento FI (Se añade un # entre el campo
*anterior y este!)
            ls_separador1
            ic_belnr
*     FIN: Inclusion Doc. FI
            ls_separador2
            lt_tab_cab-total_fact
            ls_separador1
            lt_tab_cab-descuento
            ls_separador1
            lt_tab_cab-base_imp
            ls_separador1
            lt_tab_cab-tipo_iva
            ls_separador1
            lt_tab_cab-import_iva
            ls_separador7
            lt_tab_cab-fecha_fact
            ls_separador1
            lt_tab_cab-fecha_oper
            ls_separador9
            lt_tab_cab-fecha_trans
            ls_separador10
      INTO ls_datos_cadena.

      lt_tab_text_1-text = ls_datos_cadena.
      APPEND lt_tab_text_1.

    ENDLOOP.


    PERFORM bajada_fichero TABLES lt_tab_text_1
                                  e_tab_messages
                           USING  ls_ruta_cabecera
                                  ib_error.
    "ic_Proceso.
    IF ib_error = con_true.
    ELSE.
* Se descargan datos de detalle si se descargó cabecera.

      CLEAR lt_tab_text.
      REFRESH lt_tab_text.

      LOOP AT lt_tab_det.

        CLEAR:   ls_datos_cadena.

        CONCATENATE
          lt_tab_det-id_guid
          ls_separador1
          lt_tab_det-num_lin
          ls_separador1
          lt_tab_det-base_imp
          ls_separador1
          lt_tab_det-tipo_iva
          ls_separador1
          lt_tab_det-import_iva
        INTO ls_datos_cadena.

        lt_tab_text-text = ls_datos_cadena.
        APPEND lt_tab_text.

      ENDLOOP.

      PERFORM bajada_fichero TABLES lt_tab_text
                                    e_tab_messages
                             USING  ls_ruta_detalle
                                    ib_error.
      "ic_Proceso .


    ENDIF.
  ENDIF.
*  endif.

ENDFUNCTION.
