*&---------------------------------------------------------------------*
*&  Include           ZOCRPD_REPORTING_SU
*&---------------------------------------------------------------------*


DEFINE ficheiro2.
  if sy-batch = 'X'.
    perform efetua_selecoes_ficheiro2.
  else.

    converter i_header i_data_header.

    call function 'GUI_DOWNLOAD'
      EXPORTING
        filename = &1
        CODEPAGE                        = '4110'
      TABLES
        data_tab = &2.





    call function 'GUI_DOWNLOAD'
      EXPORTING
        filename = &1
        CODEPAGE                        = '4110'
        append   = 'X'
      TABLES
        data_tab = &3.

  endif.
END-OF-DEFINITION.
DEFINE ficheiro3.
  if sy-batch = 'X'.
    perform efetua_selecoes_ficheiro3.
  else.

    converter i_header i_data_header.

    call function 'GUI_DOWNLOAD'
      EXPORTING
        filename = &1
        CODEPAGE                        = '4110'
      TABLES
        data_tab = &2.


    call function 'GUI_DOWNLOAD'
      EXPORTING
        filename = &1
        CODEPAGE                        = '4110'
        append   = 'X'
      TABLES
        data_tab = &3.

  endif.
END-OF-DEFINITION.


DEFINE ficheiro4.


  if sy-batch = 'X'.
    perform efetua_selecoes_ficheiro2.
  else.


  endif.

END-OF-DEFINITION.

*}   INSERT

DEFINE converter.
  call function 'SAP_CONVERT_TO_CSV_FORMAT'
    EXPORTING
      i_field_seperator    = p_sep
    TABLES
      i_tab_sap_data       = &1
    CHANGING
      i_tab_converted_data = &2
    EXCEPTIONS
      conversion_failed    = 1
      others               = 2.
END-OF-DEFINITION.
DEFINE ficheiro.
  if sy-batch = 'X'.
    perform efetua_selecoes_ficheiro.
  else.

    converter i_header i_data_header.

    call function 'GUI_DOWNLOAD'
      EXPORTING
        filename = &1
        CODEPAGE                        = '4110'
      TABLES
        data_tab = &2.


    call function 'GUI_DOWNLOAD'
      EXPORTING
        filename = &1
        CODEPAGE                        = '4110'
        append   = 'X'
      TABLES
        data_tab = &3.

  endif.
END-OF-DEFINITION.
*&---------------------------------------------------------------------*
*&      Form  efetua_selecoes
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM efetua_selecoes_thdr.
  DATA: it_thdr TYPE STANDARD TABLE OF /cockpit/thdr.

  DATA:
    d_bline TYPE /cockpit/thdr-bline_date,
    d_dsct  TYPE /cockpit/thdr-dsct_days1.
  DATA: d_pmnttrms    TYPE /cockpit/thdr-pmnttrms,
        wa_t052       TYPE t052,
        d_fiscal_year TYPE /cockpit/thdr-fiscal_year,
        wa_bkpf       TYPE bkpf,
        d_date(30).


  DATA: doc_d TYPE RANGE OF /cockpit/thdr-doc_date WITH HEADER LINE .

  doc_d-sign = 'I'.
  doc_d-option = 'BT'.

  doc_d-high = sy-datum.


  DATA: date      LIKE p0001-begda,
        years     LIKE t5a4a-dlyyr VALUE 50,
        days      LIKE t5a4a-dlydy,
        months    LIKE t5a4a-dlymo,
        calc_date LIKE p0001-begda.

  date = sy-datum.

  CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
    EXPORTING
      date      = date
      days      = days
      months    = months
      signum    = '-'
      years     = years
    IMPORTING
      calc_date = calc_date.


*CONCATENATE calc_date+2(6) calc_date+2(4) calc_date(4) into  doc_d-low.

  doc_d-low = calc_date.

  CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
    EXPORTING
      date      = date
      days      = days
      months    = months
      signum    = '+'
      years     = years
    IMPORTING
      calc_date = calc_date.

*CONCATENATE calc_date+2(6) calc_date+2(4) calc_date(4) into  doc_d-high.

  doc_d-high = calc_date.


  APPEND doc_d.




  SELECT
    /cockpit/thdr~invoice_guid
    /cockpit/thdr~zeic_invoice_id
    /cockpit/thdr~ref_doc_no
    "/cockpit/thdr~sap_doc_no - passar a usar o campo docno
    /cockpit/thdr~docno
    /cockpit/thdr~cp_doc_type
    /cockpit/thdr~po_number
    /cockpit/thdr~invoice_ind
    /cockpit/thdr~cr_user
    /cockpit/thdr~comp_code
    /cockpit/thdr~vendor_no
    /cockpit/thdr~gross_amount
    /cockpit/thdr~net_amount
    /cockpit/thdr~bline_date
    /cockpit/thdr~currency
    /cockpit/thdr~cr_timestamp
    /cockpit/thdr~status
    /cockpit/thdr~pstng_date
    /cockpit/thdr~doc_type
* data de lançamento
    /cockpit/thdr~netdt
*/cockpit/thdr~augdt
    /cockpit/thdr~ch_user
*/cockpit/thdr~ch_timestamp
  /cockpit/thdr~doc_date
  FROM /cockpit/thdr
        INTO
  (wa_data-invoice_guid,
    wa_data-invoice_id,
    wa_data-ref_doc_no,
    wa_data-invoice_erp_number," - passar o usar o campo docno
    wa_data-cp_doc_type, wa_data-po_number, wa_data-invoice_ind,
    wa_data-cr_user, wa_data-buyer, wa_data-vendor_no, wa_data-gross_amount,
    wa_data-net_amount ,
    wa_data-timestamp_payment_date,
    wa_data-currency,
    wa_data-timestamp_begin_erp,
    wa_data-status,
*    wa_data-timestamp_erp_reg,
    wa_data-timestamp_release_date,
    wa_data-doc_type,
*  wa_data-timestamp_due_date,
*  wa_data-timestamp_begin_erp,
    wa_data-timestamp_due_date,
    wa_data-cr_user,
    wa_data-timestamp_erp_reg  )
            UP TO p_selmax ROWS
            WHERE
                  docno           IN sel_doc AND
                  zeic_invoice_id IN sel_id AND
                  comp_code       IN sel_bukr AND
                  status          IN l_selopt_status AND
                  doc_date        IN sel_date AND
                  ( cr_timestamp IN lt_selopt_timestamp OR ch_timestamp IN lt_selopt_timestamp )
                  ORDER BY cr_timestamp DESCENDING.

*                  fi_mm_flg   IN l_selopt_fi_mm_flg AND
**                  status       in l_selopt_status and
*                  comp_code    IN sel_bukr AND
*                  doc_date IN doc_d AND
*                  ( cr_timestamp IN lt_selopt_timestamp OR ch_timestamp IN lt_selopt_timestamp ) "AND
*                  zeic_invoice_id IN sel_id
*                  ORDER BY cr_timestamp DESCENDING.





    SELECT SINGLE /cockpit/cproct~description FROM /cockpit/thist
      INNER JOIN
      /cockpit/cproct ON
      ( /cockpit/cproct~process = /cockpit/thist~process AND
      /cockpit/cproct~language = sy-langu )
      INTO wa_data-posting_type
    WHERE /cockpit/thist~invoice_guid = wa_data-invoice_guid.


    CLEAR: wa_data-gross_amount_original,
           wa_data-net_amount_original.
    SELECT SINGLE gross_amount net_amount FROM /cockpit/thdrv
      INTO (wa_data-gross_amount_original,
             wa_data-net_amount_original )
      WHERE invoice_guid = wa_data-invoice_guid.
    IF sy-subrc NE 0.
      SELECT SINGLE gross_amount net_amount FROM /cockpit/thdro
        INTO (wa_data-gross_amount_original,
               wa_data-net_amount_original )
        WHERE invoice_guid = wa_data-invoice_guid.
    ENDIF.




    CLEAR: d_bline, d_dsct, d_pmnttrms, wa_t052, d_fiscal_year.

    CLEAR wa_data-timestamp_payment_date.
    SELECT SINGLE bline_date dsct_days1 pmnttrms fiscal_year FROM /cockpit/thdr
      INTO (d_bline, d_dsct, d_pmnttrms, d_fiscal_year)
      WHERE invoice_guid = wa_data-invoice_guid.

    IF d_bline IS NOT INITIAL AND d_dsct IS NOT INITIAL AND sy-subrc = 0.
      wa_data-timestamp_payment_date = d_bline + d_dsct.
    ENDIF.



    SELECT SINGLE * FROM t052 INTO wa_t052
      WHERE zterm = d_pmnttrms.

    DATA: d_date_tim TYPE /cockpit/thdr-cr_timestamp.

*    IF d_bline IS NOT INITIAL.
**      d_date_tim = d_bline + wa_t052-ZTAG1.
*      wa_data-timestamp_due_date = d_bline + wa_t052-ztag1.
*    ELSE.
**      d_date_tim = wa_data-TIMESTAMP_ERP_REG + wa_t052-ZTAG1.
*      wa_data-timestamp_due_date = wa_data-timestamp_erp_reg + wa_t052-ztag1.
*    ENDIF.


*IF d_date_tim is NOT INITIAL.
*  write d_date_tim to wa_data-TIMESTAMP_DUE_DATE.
*ENDIF.
    CLEAR wa_bkpf.
    SELECT SINGLE * FROM bkpf INTO wa_bkpf
      WHERE bukrs = wa_data-buyer AND
            belnr = wa_data-invoice_erp_number AND
            gjahr = d_fiscal_year.
    IF sy-subrc = 0.
      CLEAR d_date.
      CONCATENATE wa_bkpf-budat
                  wa_bkpf-cputm
                  INTO d_date SEPARATED BY space.
      wa_data-timestamp_release_date = d_date.
    ENDIF.

*wa_data-timestamp_release_date




*TIMESTAMP_DUE_DATE type /cockpit/thdr-CR_TIMESTAMP, "data limite pagamento
    APPEND wa_data TO it_data.


    PERFORM progress_bar USING 'Upload'
                               10
                               100.



  ENDSELECT.


  DELETE it_data WHERE invoice_id IS INITIAL.


*trata datas
  DATA: time_stamp TYPE timestamp,
        dat        TYPE d,
        tim        TYPE t,
        tz         TYPE ttzz-tzone,
        dst        TYPE c LENGTH 1,
        wathdr     TYPE /cockpit/thdr,
        dc(30).



*TIMESTAMP_PAYMENT_DATE type /cockpit/thdr-bline_date,
*TIMESTAMP_BEGIN_ERP type /cockpit/thdr-cr_timestamp,
*STATUS type /cockpit/thdr-STATUS,
*TIMESTAMP_ERP_REG type /cockpit/thdr-pstng_Date,
*DOC_TYPE type /cockpit/thdr-DOC_TYPE,
*END OF it2_data.

  DATA dtab TYPE sy-tabix.

*it_datah
  DATA: d(10), t(8).

  DATA name TYPE ddobjname VALUE '/COCKPIT/MPROCESS_STATUS'.
  DATA it_dd07v TYPE STANDARD TABLE OF dd07v.
  DATA wa_dd07v TYPE dd07v.
  DATA dlangu TYPE sy-langu VALUE 'EN'.
  CALL FUNCTION 'DDIF_DOMA_GET'
    EXPORTING
      name      = name
*     STATE     = 'A'
      langu     = dlangu
* IMPORTING
*     GOTSTATE  =
*     DD01V_WA  =
    TABLES
      dd07v_tab = it_dd07v
* EXCEPTIONS
*     ILLEGAL_INPUT       = 1
*     OTHERS    = 2
    .
  IF sy-subrc <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.


*  DATA: it_wf_msg TYPE STANDARD TABLE OF zocrpd_wf_msg WITH HEADER LINE.
*
*  SELECT * FROM zocrpd_wf_msg INTO TABLE it_wf_msg.



  LOOP AT it_data INTO wa_data.

    CLEAR wa_datah.

    MOVE-CORRESPONDING wa_data TO wa_datah.

*    wa_datah-timestamp_payment_date = wa_data-timestamp_payment_date.
*
*    CLEAR dc.
*    dc = wa_datah-timestamp_payment_date.
*    CONCATENATE dc '000000' INTO dc.
*    IF dc IS NOT INITIAL AND dc > 0.
*      CLEAR time_stamp.
*      CONDENSE dc.
*
*      time_stamp = dc(14).
*
*      CONVERT TIME STAMP time_stamp TIME ZONE tz
*              INTO DATE dat TIME tim DAYLIGHT SAVING TIME dst.
*      CLEAR d.
*      CLEAR t.
*
*      CONCATENATE dat+6(2) '-' dat+4(2) '-' dat(4) INTO d.
*      CONCATENATE tim(2) ':' tim+2(2) ':' tim+4(2) INTO t.
*
    CONCATENATE wa_datah-timestamp_payment_date+6(2) '-'
                 wa_datah-timestamp_payment_date+4(2) '-'
                 wa_datah-timestamp_payment_date(4)
                 INTO wa_datah-timestamp_payment_date.

*      CLEAR wa_datah-timestamp_payment_date.
*
*      CONCATENATE  d t
*       INTO wa_datah-timestamp_payment_date SEPARATED BY space.
*    ELSE.
*      CLEAR wa_datah-timestamp_payment_date.
*    ENDIF.


*    IF wa_data-timestamp_due_date IS NOT INITIAL.

      CONCATENATE wa_data-timestamp_due_date+6(2) '-'
                  wa_data-timestamp_due_date+4(2) '-'
                  wa_data-timestamp_due_date(4)
                  INTO wa_data-timestamp_due_date.

*      CLEAR wa_datah-timestamp_due_date .
*      CONCATENATE  d t
*       INTO wa_datah-timestamp_due_date SEPARATED BY space.
*    ELSE.
*      CLEAR wa_datah-timestamp_due_date.
*
*    ENDIF.

    CLEAR: dc, time_stamp.

    dc = wa_datah-timestamp_begin_erp.
    CONDENSE dc.

    time_stamp = dc(14).

    CONVERT TIME STAMP time_stamp TIME ZONE tz
            INTO DATE dat TIME tim DAYLIGHT SAVING TIME dst.

    CLEAR d.
    CLEAR t.

    CONCATENATE dat+6(2) '-' dat+4(2) '-' dat(4) INTO d.
    CONCATENATE tim(2) ':' tim+2(2) ':' tim+4(2) INTO t.

    CONCATENATE  d t
     INTO wa_datah-timestamp_begin_erp SEPARATED BY space.

    CLEAR dc.
    dc = wa_data-timestamp_erp_reg.
    IF dc IS NOT INITIAL.
      CLEAR time_stamp.

      CONDENSE dc.

      time_stamp = dc(14).

      CONVERT TIME STAMP time_stamp TIME ZONE tz
              INTO DATE dat TIME tim DAYLIGHT SAVING TIME dst.

      CLEAR d.
      CLEAR t.

      CONCATENATE dat+6(2) '-' dat+4(2) '-' dat(4) INTO d.
      CONCATENATE tim(2) ':' tim+2(2) ':' tim+4(2) INTO t.


      CLEAR wa_datah-timestamp_erp_reg.
**********************************************************************
* fica com a data de exportação
      CONCATENATE sy-datum+6(2) '-' sy-datum+4(2) '-' sy-datum(4) INTO d.
      CONCATENATE sy-uzeit(2) ':' sy-uzeit+2(2) ':' sy-uzeit+4(2) INTO t.
**********************************************************************
      CONCATENATE  d t
       INTO wa_datah-timestamp_erp_reg SEPARATED BY space.


    ENDIF.

    SELECT SINGLE butxt FROM t001 INTO wa_datah-buyer
      WHERE bukrs = wa_datah-buyer.

    SELECT SINGLE name1 FROM lfa1 INTO wa_datah-vendor_no
      WHERE lifnr = wa_datah-vendor_no.

    DATA: description TYPE /cockpit/cptypt-description.
    CLEAR description.
    SELECT SINGLE description FROM /cockpit/cptypt INTO description"wa_datah-CP_DOC_TYPE
      WHERE cp_doc_type = wa_datah-cp_doc_type AND
            language = 'EN'."sy-langu.
    IF sy-subrc NE 0.
      CONCATENATE 'FT' ' - ' 'Generic Document' INTO wa_datah-cp_doc_type.
*      wa_datah-CP_DOC_TYPE = 'Documento Genérico'.
    ELSE.
      CONCATENATE wa_datah-cp_doc_type ' - ' description INTO wa_datah-cp_doc_type.
    ENDIF.
    DATA: ltext TYPE t003t-ltext.
    CLEAR ltext.
    SELECT SINGLE ltext FROM t003t INTO ltext"wa_datah-DOC_TYPE
      WHERE
            spras = 'EN' AND
            blart = wa_datah-doc_type.
    IF sy-subrc = 0.
      CONCATENATE wa_datah-doc_type ' - ' ltext INTO wa_datah-doc_type.
    ENDIF.

    READ TABLE it_dd07v INTO wa_dd07v WITH KEY domvalue_l = wa_datah-status.
    IF sy-subrc = 0.
      wa_datah-status = wa_dd07v-ddtext.
    ENDIF.

* conversao e fatura/credito
    IF wa_datah-invoice_ind NE 'X'.
      CONCATENATE '-' wa_datah-gross_amount INTO wa_datah-gross_amount.CONDENSE wa_datah-gross_amount.
      CONCATENATE '-' wa_datah-gross_amount_original INTO wa_datah-gross_amount_original.CONDENSE wa_datah-gross_amount_original.
      CONCATENATE '-' wa_datah-net_amount INTO wa_datah-net_amount.CONDENSE wa_datah-net_amount.
      CONCATENATE '-' wa_datah-net_amount_original INTO wa_datah-net_amount_original.CONDENSE wa_datah-net_amount_original.
*      wa_datah-GROSS_AMOUNT = wa_datah-GROSS_AMOUNT * -1.
*      wa_datah-GROSS_AMOUNT_ORIGINAL = wa_datah-GROSS_AMOUNT_ORIGINAL * -1.
*      wa_datah-NET_AMOUNT = wa_datah-NET_AMOUNT * -1.
*      wa_datah-NET_AMOUNT_ORIGINAL = wa_datah-NET_AMOUNT_ORIGINAL * -1.
    ENDIF.


    IF wa_datah-invoice_ind = 'X'.
      wa_datah-invoice_ind = 'Debit'.
    ELSE.
      wa_datah-invoice_ind = 'Credit'.
    ENDIF.

* conversão de datas:

*    IF wa_datah-timestamp_release_date IS NOT INITIAL.
*
*      CLEAR d.
*      CLEAR t.
*

    CONCATENATE wa_datah-timestamp_release_date+6(2) '-'
                wa_datah-timestamp_release_date+4(2) '-'
                wa_datah-timestamp_release_date(4)
                INTO wa_datah-timestamp_release_date.

*      CONCATENATE wa_datah-timestamp_release_date+6(2) '-'
*                  wa_datah-timestamp_release_date+4(2) '-'
*                  wa_datah-timestamp_release_date(4) INTO d.
*      CONCATENATE wa_datah-timestamp_release_date+09(2) ':'
*                  wa_datah-timestamp_release_date+11(2) ':'
*                  wa_datah-timestamp_release_date+13(2) INTO t.
*      CLEAR wa_datah-timestamp_release_date.
*      CONCATENATE  d t
*       INTO wa_datah-timestamp_release_date SEPARATED BY space.
*
*
*
*    ENDIF.
    DATA wa_sta TYPE /cockpit/tstat.
    SELECT SINGLE * FROM /cockpit/tstat INTO wa_sta.
    IF sy-subrc = 0.
      CASE wa_sta-posting_type.
        WHEN 01.wa_datah-posting_type = 'Manual'.
        WHEN OTHERS.wa_datah-posting_type = 'Automatic'.
      ENDCASE.

*      CASE wa_sta-status.
*        WHEN 03 .wa_datah-status_pay = 'Release'.
*        WHEN 09.wa_datah-status_pay = 'Paid'.
*        WHEN OTHERS.wa_datah-status_pay = 'Pending'.
*      ENDCASE.


    ENDIF.



    IF wa_datah-invoice_id IS NOT INITIAL.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_datah-invoice_id
        IMPORTING
          output = wa_datah-invoice_id.



    ENDIF.



**********************************************************************
**********************************************************************
**********************************************************************
    DATA wa_t TYPE /cockpit/thdr.
    CLEAR wa_t.

*  doc_date_emissao * (Data Scan)  (Data Emissão da Factura) ,
*  doc_trat_transfer * (Data 1º Tratamento em ERP)  (Data Transfer | data em que chegou a cockpit),
*  doc_post_aprov * (Data de Contabilização)  (Data da Última Aprovação em Workflow);
*
*    SELECT SINGLE doc_date PSTNG_DATE FROM /cockpit/thdr INTO (wa_t-doc_date, wa_t-PSTNG_DATE)
*      WHERE invoice_guid = wa_data-invoice_guid.
***********************************************************************
***********************************************************************
*    IF wa_t-doc_date IS NOT INITIAL AND wa_t-PSTNG_DATE IS NOT INITIAL.
*      DATA: date1 TYPE  d,
*            date2 TYPE  d.
*      CLEAR: date1, date2.
*
*      CLEAR wa_datah-doc_date_emissao.
*
*      date1 = wa_t-doc_date.
*      date2 = wa_t-data_rececao.
*      CALL FUNCTION 'SD_DATETIME_DIFFERENCE'
*        EXPORTING
*          date1            = date1
*          time1            = '120000'
*          date2            = date2
*          time2            = '120000'
*        IMPORTING
*          datediff         = wa_datah-doc_date_emissao
*        EXCEPTIONS
*          invalid_datetime = 1
*          OTHERS           = 2.
*      IF sy-subrc <> 0.
** Implement suitable error handling here
*      ENDIF.
*    ENDIF.


**********************************************************************
**********************************************************************
    DATA: it_t TYPE STANDARD TABLE OF /cockpit/thdr WITH HEADER LINE.
    DATA: it_tv TYPE STANDARD TABLE OF /cockpit/thdrv WITH HEADER LINE.
    DATA: it_to TYPE STANDARD TABLE OF /cockpit/thdro WITH HEADER LINE.

    CLEAR wa_t.

    CLEAR: it_t[], it_to[], it_tv[].

    SELECT * FROM /cockpit/thdr INTO TABLE it_t
      WHERE invoice_guid = wa_data-invoice_guid.

    SELECT * FROM /cockpit/thdrv INTO TABLE it_tv
      WHERE invoice_guid = wa_data-invoice_guid.
    LOOP AT it_tv.
      CLEAR it_t.
      MOVE-CORRESPONDING it_tv TO it_t.
      APPEND it_t.
    ENDLOOP.
    SELECT * FROM /cockpit/thdro INTO TABLE it_to
      WHERE invoice_guid = wa_data-invoice_guid.
    LOOP AT it_to.
      CLEAR it_t.
      MOVE-CORRESPONDING it_to TO it_t.
      APPEND it_t.
    ENDLOOP.
    SORT it_t BY version ASCENDING.

    LOOP AT it_t INTO wa_t WHERE cr_user IS NOT INITIAL.
      EXIT.
    ENDLOOP.
    IF sy-subrc = 0.
      DATA: difference TYPE i.

      IF wa_t-ch_timestamp IS NOT INITIAL AND wa_t-cr_timestamp IS NOT INITIAL.
*        CLEAR wa_datah-doc_trat_transfer.

        DATA:
          timestamp1  LIKE  ccupeaka-timestamp,
          timestamp2  LIKE  ccupeaka-timestamp,
          difference2 TYPE  i.

        timestamp1 = wa_t-ch_timestamp.
        timestamp2 = wa_t-cr_timestamp.

        CALL FUNCTION 'CCU_TIMESTAMP_DIFFERENCE'
          EXPORTING
            timestamp1 = timestamp1
            timestamp2 = timestamp2
          IMPORTING
            difference = difference2.
        IF difference2 > 0.
*          wa_datah-doc_trat_transfer = difference2 / 86400.
        ENDIF.
      ENDIF.
    ENDIF.
**********************************************************************
**********************************************************************
* (Data de Contabilização)  (Data da Última Aprovação em Workflow);
**********************************************************************
    DATA: it_tw TYPE STANDARD TABLE OF /cockpit/twc,
          wa_tw TYPE /cockpit/twc.

    CLEAR wa_tw.

    SELECT SINGLE * FROM /cockpit/twc INTO wa_tw
      WHERE invoice_guid = wa_data-invoice_guid AND
            wc_status = '04'.
    IF sy-subrc = 0.
      DATA: ev_date      TYPE  sydatum,
            iv_timestamp TYPE  ad_tstamp.

      CLEAR wa_t.
      SELECT SINGLE * FROM /cockpit/thdr INTO wa_t
        WHERE invoice_guid = wa_data-invoice_guid.

      IF wa_tw-wc_ch_timestamp IS NOT INITIAL AND wa_t-pstng_date IS NOT INITIAL AND wa_t-status = '03'.




        CLEAR: iv_timestamp, ev_date.

        DATA: d_ch(30).

        d_ch = wa_tw-wc_ch_timestamp.

        CONDENSE d_ch.

        TRY.
            iv_timestamp = d_ch(14).
          CATCH cx_sy_conversion_no_number.
        ENDTRY.
        IF iv_timestamp IS NOT INITIAL.


          CLEAR ev_date.
          CLEAR wa_datah-timestamp_erp_reg.

          CALL FUNCTION 'ADDR_CONVERT_TIMESTAMP_TO_DATE'
            EXPORTING
              iv_timestamp = iv_timestamp
*             IV_HIGH      = ' '
            IMPORTING
              ev_date      = ev_date.

*          CALL FUNCTION 'SD_DATETIME_DIFFERENCE'
*            EXPORTING
*              date1            = wa_t-pstng_date
*              time1            = '120000'
*              date2            = ev_date
*              time2            = '120000'
*            IMPORTING
*              datediff         = wa_datah-timestamp_erp_reg
*            EXCEPTIONS
*              invalid_datetime = 1
*              OTHERS           = 2.
        ENDIF.
      ENDIF.


    ENDIF.



*    loop at it_t into wa_t where status = '02'.
**      if sy-langu = 'EN'.
*      wa_datah-doc_errors_hist = 'Errors'.
**      else.
**        wa_datah-doc_errors_hist = 'Erros'.
**      endif.
*      exit.
*    endloop.
*    if sy-subrc ne 0.
*      wa_datah-doc_errors_hist = 'OK'.
*    endif.


    DATA: wa_bkpf1    TYPE bkpf,
          wa_thd      TYPE /cockpit/thdr,
          e_timestamp LIKE  tzonref-tstamps.
    CLEAR wa_bkpf1.


    SELECT SINGLE * FROM /cockpit/thdr INTO wa_thd
      WHERE invoice_guid = wa_data-invoice_guid.

**********************************************************************
**********************************************************************
    IF wa_data-status = '03'.




      DATA: i_datlo LIKE  sy-datlo,
            i_timlo LIKE  sy-timlo.
*            e_timestamp1 like  tzonref-tstamps.


      IF wa_thd-fi_mm_flg = 'FI'.

        SELECT SINGLE * FROM bkpf INTO wa_bkpf1
          WHERE bukrs = wa_thd-comp_code AND
                belnr = wa_thd-sap_doc_no AND
                gjahr = wa_thd-fiscal_year.
        IF sy-subrc = 0.

          i_datlo = wa_bkpf1-cpudt.
          i_timlo = wa_bkpf1-cputm.

          CALL FUNCTION 'CONVERT_INTO_TIMESTAMP'
            EXPORTING
              i_datlo     = i_datlo
              i_timlo     = i_timlo
              i_tzone     = sy-zonlo
            IMPORTING
              e_timestamp = e_timestamp.

*          wa_datah-timestamp_due_date = e_timestamp.

        ENDIF.

      ELSEIF wa_thd-fi_mm_flg = 'MM'.

        DATA: d_awkey TYPE bkpf-awkey.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = wa_thd-sap_doc_no
          IMPORTING
            output = wa_thd-sap_doc_no.

        CONCATENATE wa_thd-sap_doc_no wa_thd-fiscal_year INTO d_awkey.

        SELECT SINGLE * FROM bkpf INTO wa_bkpf1
          WHERE bukrs = wa_thd-comp_code AND
                gjahr = wa_thd-fiscal_year AND
                awtyp = 'RMRP' AND
                awkey = d_awkey.
        IF sy-subrc = 0.

          i_datlo = wa_bkpf1-cpudt.
          i_timlo = wa_bkpf1-cputm.

          CLEAR e_timestamp.

          CALL FUNCTION 'CONVERT_INTO_TIMESTAMP'
            EXPORTING
              i_datlo     = i_datlo
              i_timlo     = i_timlo
              i_tzone     = sy-zonlo
            IMPORTING
              e_timestamp = e_timestamp.

          wa_datah-timestamp_erp_reg = e_timestamp.

        ENDIF.






      ENDIF.



      DATA: time_stamp1 TYPE timestamp,
            dat1        TYPE d,
            tim1        TYPE t,
            tz1         TYPE ttzz-tzone,
            dst1        TYPE c LENGTH 1,
            wathdr1     TYPE /cockpit/thdr,
            dc1(30).

      DATA: d1(10), t1(8).

      IF wa_datah-timestamp_erp_reg IS NOT INITIAL.




**********************************************************************
**********************************************************************
        CLEAR: dc1, time_stamp1, dat1, tim1, d1, t1.
        dc1 = wa_datah-timestamp_erp_reg.
        CONDENSE dc1.
        TRY.
            time_stamp1 = dc1(14).
          CATCH cx_sy_conversion_no_number.
        ENDTRY.
        IF time_stamp1 IS NOT INITIAL.


          CONVERT TIME STAMP time_stamp1 TIME ZONE tz
                  INTO DATE dat1 TIME tim1 DAYLIGHT SAVING TIME dst.
          CLEAR d1.
          CLEAR t1.

          CONCATENATE dat1+6(2) '-' dat1+4(2) '-' dat1(4) INTO d1.
          CONCATENATE tim1(2) ':' tim1+2(2) ':' tim1+4(2) INTO t1.
          CLEAR wa_datah-timestamp_erp_reg.
          CONCATENATE  d1 t1
           INTO wa_datah-timestamp_erp_reg SEPARATED BY space.

        ENDIF.
**********************************************************************
**********************************************************************



      ENDIF.


    ENDIF.

**********************************************************************
**********************************************************************


    IF wa_thd-currency NE 'EUR'.

      DATA: trate         LIKE tcurr-ukurs.

      IF wa_datah-timestamp_erp_reg IS NOT INITIAL.
        CALL FUNCTION 'CONVERT_TO_FOREIGN_CURRENCY'
          EXPORTING
            date             = i_datlo
            foreign_currency = 'EUR'
            local_amount     = wa_thd-gross_amount
            local_currency   = wa_thd-currency
          IMPORTING
            exchange_rate    = trate
*           foreign_amount   = wa_datah-gross_amount
          EXCEPTIONS
            no_rate_found    = 1
            overflow         = 2
            no_factors_found = 3
            no_spread_found  = 4
            derived_2_times  = 5
            OTHERS           = 6.
        IF sy-subrc = 0.
          IF trate IS NOT INITIAL.
            IF wa_data-gross_amount_original IS NOT INITIAL. wa_datah-gross_amount_original = wa_data-gross_amount_original / trate. ENDIF.
            IF wa_data-net_amount_original IS NOT INITIAL. wa_datah-net_amount_original = wa_data-net_amount_original / trate. ENDIF.
            IF wa_data-net_amount IS NOT INITIAL. wa_datah-net_amount = wa_data-net_amount / trate. ENDIF.

            wa_datah-gross_amount = wa_thd-gross_amount / trate.
            wa_datah-currency = 'EUR'.
          ENDIF.
        ELSE.
          CLEAR wa_datah-currency.
        ENDIF.

      ELSE.

        IF wa_thd-pstng_date IS NOT INITIAL.

          i_datlo = wa_thd-pstng_date.

          CALL FUNCTION 'CONVERT_TO_FOREIGN_CURRENCY'
            EXPORTING
              date             = i_datlo
              foreign_currency = 'EUR'
              local_amount     = wa_thd-gross_amount
              local_currency   = wa_thd-currency
            IMPORTING
              exchange_rate    = trate
*             foreign_amount   = wa_datah-gross_amount
            EXCEPTIONS
              no_rate_found    = 1
              overflow         = 2
              no_factors_found = 3
              no_spread_found  = 4
              derived_2_times  = 5
              OTHERS           = 6.
          IF sy-subrc = 0.
            IF trate IS NOT INITIAL.
              IF wa_data-gross_amount_original IS NOT INITIAL. wa_datah-gross_amount_original = wa_data-gross_amount_original / trate. ENDIF.
              IF wa_data-net_amount_original IS NOT INITIAL. wa_datah-net_amount_original = wa_data-net_amount_original / trate. ENDIF.
              IF wa_data-net_amount IS NOT INITIAL. wa_datah-net_amount = wa_data-net_amount / trate. ENDIF.
              wa_datah-gross_amount = wa_thd-gross_amount / trate.
              wa_datah-currency = 'EUR'.
            ENDIF.
          ELSE.
            CLEAR wa_datah-currency.
          ENDIF.



        ELSE.

          i_datlo = sy-datum.

          CALL FUNCTION 'CONVERT_TO_FOREIGN_CURRENCY'
            EXPORTING
              date             = i_datlo
              foreign_currency = 'EUR'
              local_amount     = wa_thd-gross_amount
              local_currency   = wa_thd-currency
            IMPORTING
              exchange_rate    = trate
*             foreign_amount   = wa_datah-gross_amount
            EXCEPTIONS
              no_rate_found    = 1
              overflow         = 2
              no_factors_found = 3
              no_spread_found  = 4
              derived_2_times  = 5
              OTHERS           = 6.
          IF sy-subrc = 0.
            IF trate IS NOT INITIAL.
              IF wa_data-gross_amount_original IS NOT INITIAL. wa_datah-gross_amount_original = wa_data-gross_amount_original / trate. ENDIF.
              IF wa_data-net_amount_original IS NOT INITIAL. wa_datah-net_amount_original = wa_data-net_amount_original / trate. ENDIF.
              IF wa_data-net_amount IS NOT INITIAL. wa_datah-net_amount = wa_data-net_amount / trate. ENDIF.
              wa_datah-gross_amount = wa_thd-gross_amount / trate.
              wa_datah-currency = 'EUR'.
            ENDIF.
          ELSE.
            CLEAR wa_datah-currency.
          ENDIF.
        ENDIF.




      ENDIF.
      IF wa_datah-currency IS INITIAL.
        CLEAR wa_datah-gross_amount.
      ENDIF.



    ENDIF.
**********************************************************************
*** Numero de linhas finais
**********************************************************************
    IF wa_thd-status = '03'.


      IF wa_thd-fi_mm_flg = 'MM'.
        DATA: it_item TYPE STANDARD TABLE OF /cockpit/titem.
        SELECT * FROM /cockpit/titem INTO TABLE it_item
          WHERE invoice_guid = wa_data-invoice_guid.
        IF sy-subrc = 0.
          DESCRIBE TABLE it_item LINES wa_datah-num_linhas.
        ENDIF.
      ELSEIF wa_thd-fi_mm_flg = 'FI'.
        DATA: it_account TYPE STANDARD TABLE OF /cockpit/tacct.
        SELECT * FROM /cockpit/tacct INTO TABLE it_account
    WHERE invoice_guid = wa_data-invoice_guid.
        IF sy-subrc = 0.
          DESCRIBE TABLE it_account LINES wa_datah-num_linhas.
        ENDIF.
      ENDIF.

    ENDIF.
**********************************************************************
*** Numero de linhas iniciais
**********************************************************************
    IF wa_thd-fi_mm_flg = 'MM'.
      DATA: it_itemo TYPE STANDARD TABLE OF /cockpit/titemo.
      SELECT * FROM /cockpit/titemo INTO TABLE it_itemo
        WHERE invoice_guid = wa_data-invoice_guid.
      IF sy-subrc = 0.
        DESCRIBE TABLE it_itemo LINES wa_datah-num_linhas_i.
      ENDIF.
    ELSEIF wa_thd-fi_mm_flg = 'FI'.
      DATA: it_accounto TYPE STANDARD TABLE OF /cockpit/taccto.
      SELECT * FROM /cockpit/taccto INTO TABLE it_accounto
  WHERE invoice_guid = wa_data-invoice_guid.
      IF sy-subrc = 0.
        DESCRIBE TABLE it_accounto LINES wa_datah-num_linhas_i.
      ENDIF.
    ENDIF.


**********************************************************************
**********************************************************************

    CLEAR: dc1, time_stamp1, dat1, tim1, d1, t1.
    dc1 = wa_datah-timestamp_erp_reg.
    CONDENSE dc1.
    CONCATENATE dc1 '000000' INTO dc1.
    TRY.
        time_stamp1 = dc1(14).
      CATCH cx_sy_conversion_no_number.
    ENDTRY.
    IF time_stamp1 IS NOT INITIAL.


      CONVERT TIME STAMP time_stamp1 TIME ZONE tz
              INTO DATE dat1 TIME tim1 DAYLIGHT SAVING TIME dst.
      CLEAR d1.
      CLEAR t1.

      CONCATENATE dat1+6(2) '-' dat1+4(2) '-' dat1(4) INTO d1.
      CONCATENATE tim1(2) ':' tim1+2(2) ':' tim1+4(2) INTO t1.
*      CLEAR wa_datah-timestamp_postdate.
*      CONCATENATE  d1 t1
*       INTO wa_datah-timestamp_postdate SEPARATED BY space.
    ENDIF.
**********************************************************************
**********************************************************************




**********************************************************************
**********************************************************************

    CLEAR: dc1, time_stamp1, dat1, tim1, d1, t1.
*    dc1 = wa_datah-ch_datahora.
    CONDENSE dc1.
    CONCATENATE dc1 '000000' INTO dc1.
    TRY.
        time_stamp1 = dc1(14).
      CATCH cx_sy_conversion_no_number.
    ENDTRY.
    IF time_stamp1 IS NOT INITIAL.


      CONVERT TIME STAMP time_stamp1 TIME ZONE tz
              INTO DATE dat1 TIME tim1 DAYLIGHT SAVING TIME dst.
      CLEAR d1.
      CLEAR t1.

      CONCATENATE dat1+6(2) '-' dat1+4(2) '-' dat1(4) INTO d1.
      CONCATENATE tim1(2) ':' tim1+2(2) ':' tim1+4(2) INTO t1.
*      CLEAR: wa_datah-ch_datahora.
*      CONCATENATE  d1 t1
*       INTO wa_datah-ch_datahora SEPARATED BY space.
    ENDIF.
**********************************************************************
**********************************************************************
*
*    CONCATENATE wa_datah-doc_date+6(2) '-'
*                wa_datah-doc_date+4(2) '-'
*                wa_datah-doc_date(4) INTO wa_datah-doc_date.


    DATA: wa_twc TYPE /cockpit/twc.
    SELECT SINGLE * FROM /cockpit/twc INTO wa_twc
      WHERE invoice_guid = wa_data-invoice_guid.
    IF sy-subrc = 0.
*      wa_datah-workflow = 'X'.
    ENDIF.




**********************************************************************
**********************************************************************


*    REFRESH gt_messages.
*
*    SELECT a~counter a~id a~type a~mes_number a~invoice_guid a~hist_guid
*           a~cr_timestamp a~username b~docno c~process d~cont d~msg
*           INTO CORRESPONDING FIELDS OF TABLE gt_messages
*           FROM ( ( ( /cockpit/tmsg AS a
*                    INNER JOIN /cockpit/thdr AS b
*                    ON a~invoice_guid EQ b~invoice_guid )
*                    INNER JOIN /cockpit/thist AS c
*                    ON a~invoice_guid EQ c~invoice_guid AND
*                    a~hist_guid EQ c~hist_guid )
*
*                    INNER JOIN zocrpd_errorsmsg AS d
*                    ON d~id EQ a~id AND
*                    d~mes_number EQ a~mes_number )
*
*           WHERE b~invoice_guid = wa_data-invoice_guid.
*    IF sy-subrc = 0.
**      SORT gt_messages BY cr_timestamp DESCENDING.
**      READ TABLE gt_messages INDEX 1.
**
**      wa_datah-message_id = gt_messages-cont.
**      wa_datah-message_hist = gt_messages-msg.
**      wa_datah-doc_errors_hist = 'Errors'.
*    ELSE.
*
*      SELECT a~counter a~id a~type a~mes_number a~invoice_guid a~hist_guid
*             a~cr_timestamp a~username b~docno c~process
*             INTO CORRESPONDING FIELDS OF TABLE gt_messages
*             FROM ( ( /cockpit/tmsg AS a
*                      INNER JOIN /cockpit/thdr AS b
*                      ON a~invoice_guid EQ b~invoice_guid )
*                      INNER JOIN /cockpit/thist AS c
*                      ON a~invoice_guid EQ c~invoice_guid AND
*                      a~hist_guid EQ c~hist_guid )
*
*             WHERE b~invoice_guid = wa_data-invoice_guid AND
*                   a~type = 'E'.
*
*
*      IF sy-subrc = 0.
**        wa_datah-message_id = '0'.
**        wa_datah-doc_errors_hist = 'Errors'.
*      ELSE.
*
**        wa_datah-doc_errors_hist = 'OK'.
*      ENDIF.
*
*
*    ENDIF.

**********************************************************************
**********************************************************************


*    IF wa_thd-zocrpd_wf_type_msg IS NOT INITIAL.
*      wa_datah-workflow_errors_id = wa_thd-zocrpd_wf_type_msg.
*
*
*
*      READ TABLE it_wf_msg WITH KEY cont = wa_datah-workflow_errors_id.
*      IF sy-subrc = 0.
*        wa_datah-workflow_errors_desc = it_wf_msg-msg.
*      ENDIF.
*
*    ENDIF.






**********************************************************************
**********************************************************************

*  ZOCRPD_ERRORSMSG
*
*    IF wa_datah-augdt IS NOT INITIAL.
*      CLEAR: d1, t1.
*      CONCATENATE wa_datah-augdt(4) '-' wa_datah-augdt+4(2) '-' wa_datah-augdt+6(2) INTO d1.
*      CONCATENATE '00:00' ':00' INTO t1.
*
*      CONCATENATE d1 t1 INTO wa_datah-augdt SEPARATED BY space.
*
*
*    ENDIF.

**********************************************************************
**********************************************************************


    APPEND wa_datah TO it_datah.


  ENDLOOP.



ENDFORM.                    " efetua_selecoes


FORM progress_bar  USING    VALUE(p_value)
                            p_tabix
                            p_nlines.
  DATA: w_text(40),
        w_percentage      TYPE p,
        gd_percent        TYPE p,
        w_percent_char(3).

  w_percentage = ( p_tabix / p_nlines ) * 100.
  w_percent_char = w_percentage.
  SHIFT w_percent_char LEFT DELETING LEADING ' '.
  CONCATENATE p_value w_percent_char '% ' INTO w_text.

  IF w_percentage GT gd_percent OR p_tabix EQ 1.
    CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
      EXPORTING
        percentage = w_percentage
        text       = w_text.
    gd_percent = w_percentage.
  ENDIF.
ENDFORM.                    " PROGRESS_BAR


*---------------------------------------------------------------------*
*       FORM convert_type_2_selopt                                    *
*---------------------------------------------------------------------*
FORM convert_type_2_selopt
                    TABLES l_selopt_fi_mm_flg STRUCTURE /cockpit/rfimm
                     USING i_sel_type_fi LIKE comms-commit_sw
                           i_sel_type_mm LIKE comms-commit_sw.

  CHECK:
    ( p_fi = con_true  AND p_mm = con_false ) OR
    ( p_fi = con_false AND p_mm = con_true ).

  IF p_fi = con_true.
    l_selopt_fi_mm_flg-sign = 'I'.
    l_selopt_fi_mm_flg-opt = 'EQ'.
    l_selopt_fi_mm_flg-low = p_fi.
    APPEND l_selopt_fi_mm_flg.
  ENDIF.
  IF i_sel_type_mm = con_true.
    l_selopt_fi_mm_flg-sign = 'I'.
    l_selopt_fi_mm_flg-opt = 'EQ'.
    l_selopt_fi_mm_flg-low = p_mm.
    APPEND l_selopt_fi_mm_flg.
  ENDIF.

ENDFORM.                    "convert_type_2_selopt
*---------------------------------------------------------------------*
*       FORM convert_stat_2_selopt                                    *
*---------------------------------------------------------------------*
FORM convert_stat_2_selopt
                  TABLES l_selopt_status STRUCTURE /cockpit/rstatus
                         l_selopt_doc_status STRUCTURE /cockpit/rstatus
                   USING i_sel_stat_new
                         i_sel_stat_error
                         i_sel_stat_posted
                         i_sel_stat_parked
                         i_sel_stat_rejected.
  IF i_sel_stat_new = con_true.
    l_selopt_status-sign = 'I'.
    l_selopt_status-opt = 'EQ'.
    l_selopt_status-low = con_status_new.
    APPEND l_selopt_status.
  ENDIF.
  IF i_sel_stat_error = con_true.
    l_selopt_status-sign = 'I'.
    l_selopt_status-opt = 'EQ'.
    l_selopt_status-low = con_status_error.
    APPEND l_selopt_status.
  ENDIF.
  IF i_sel_stat_posted = con_true OR
     i_sel_stat_parked = con_true.
    l_selopt_status-sign = 'I'.
    l_selopt_status-opt = 'EQ'.
    l_selopt_status-low = con_status_processed.
    APPEND l_selopt_status.
  ENDIF.
  IF i_sel_stat_rejected = con_true.
    l_selopt_status-sign = 'I'.
    l_selopt_status-opt = 'EQ'.
    l_selopt_status-low = con_status_refused.
    APPEND l_selopt_status.
  ENDIF.

  IF i_sel_stat_new = con_true OR
    l_selopt_doc_status-sign = 'I'.
    l_selopt_doc_status-opt = 'EQ'.
    l_selopt_doc_status-low = con_status_new.
    APPEND l_selopt_doc_status.
  ENDIF.
  IF i_sel_stat_error = con_true OR
    l_selopt_doc_status-sign = 'I'.
    l_selopt_doc_status-opt = 'EQ'.
    l_selopt_doc_status-low = con_status_error.
    APPEND l_selopt_doc_status.
  ENDIF.
  IF i_sel_stat_posted = con_true OR
     i_sel_stat_parked = con_true OR
    l_selopt_doc_status-sign = 'I'.
    l_selopt_doc_status-opt = 'EQ'.
    l_selopt_doc_status-low = con_status_processed.
    APPEND l_selopt_doc_status.
  ENDIF.
  IF i_sel_stat_rejected = con_true OR
    l_selopt_doc_status-sign = 'I'.
    l_selopt_doc_status-opt = 'EQ'.
    l_selopt_doc_status-low = con_status_refused.
    APPEND l_selopt_doc_status.
  ENDIF.

ENDFORM.                    "convert_stat_2_selopt
*&---------------------------------------------------------------------*
*&      Form  efetua_selecoes_ficheiro
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM efetua_selecoes_ficheiro .

  FIELD-SYMBOLS <hex_container> TYPE x.
  DATA mess(60).
*{   INSERT         JM3K901618                                        4
  p_clpath = path.
*}   INSERT

*OPEN DATASET p_clpath FOR OUTPUT MESSAGE MESS.
  OPEN DATASET p_clpath FOR OUTPUT IN TEXT MODE ENCODING UTF-8 MESSAGE mess.
  CHECK sy-subrc = 0.

  DATA: l_string(100).
*{   INSERT         JM3K901618                                        3
*   CLEAR line_fich.
*   Transferir linha de Cab
  DATA:
    BEGIN OF ta_header,
*      invoice_id             type string,
*      ref_doc_no             type string,
*      invoice_erp_number     type string,
*      posting_type           type string,
*      document_type_ic       type string,
*      po_number              type string,
*      credit_or_debit        type string,
*      user                   type string,
*      buyer                  type string,
*      supplier               type string,
*      gross_amount           type string,
*      gross_amount_original  type string,
*      net_amount             type string,
*      net_amount_original    type string,
*      currency               type string,
*      timestamp_release_date type string,
*      timestamp_due_date     type string,
*      timestamp_payment_date type string,
*      timestamp_begin_erp    type string,
*      document_status        type string,
*      timestamp_reg          type string,
*      doc_type               type string,
*      timestamp_postdate     type string,
*      status_pay             type string,

**********************************************************************
* (Data Scan)  (Data Emissão da Factura) ,
* (Data 1º Tratamento em ERP)  (Data Transfer | data em que chegou a cockpit),
* (Data de Contabilização)  (Data da Última Aprovação em Workflow);
**********************************************************************
*      doc_date_emissao       type string,
*      doc_trat_transfer      type string,
*      doc_post_aprov         type string,
**********************************************************************
**********************************************************************




      invoice_id             TYPE string,
      ref_doc_no             TYPE string,
      invoice_erp_number     TYPE string,
      posting_type           TYPE string,
      cp_doc_type            TYPE string,
      po_number              TYPE string,
      invoice_ind            TYPE string,
      cr_user                TYPE string,
      buyer                  TYPE string,
      vendor_no              TYPE string,
      gross_amount           TYPE string,
      gross_amount_original  TYPE string,
      net_amount             TYPE string,
      net_amount_original    TYPE string,
      currency               TYPE string,
      timestamp_release_date TYPE string,
      timestamp_due_date     TYPE string,
      timestamp_payment_date TYPE string,
      timestamp_begin_erp    TYPE string,
      status                 TYPE string,
      timestamp_erp_reg      TYPE string,
      doc_type               TYPE string,
      timestamp_postdate     TYPE string,
      status_pay             TYPE string,
      augdt                  TYPE string,
      doc_date_emissao       TYPE string,
      doc_trat_transfer      TYPE string,
      doc_post_aprov         TYPE string,
      doc_errors_hist        TYPE string,
      doc_post_action        TYPE string,
      num_linhas             TYPE string,
      ch_utilizador          TYPE string,
      ch_datahora            TYPE string,
      doc_date               TYPE string,
      num_linhas_i           TYPE string,
      workflow               TYPE string,
      message_id             TYPE string,
      message_hist           TYPE string,
      workflow_errors_id     TYPE string,
      workflow_errors_desc   TYPE string,



    END OF ta_header.


  DATA:
    p_separator   TYPE  c,
    line_fich     TYPE string,
    aux_fname(30),
    BEGIN OF it_fields OCCURS 0,
      field(30),
    END OF it_fields,
    descr_str TYPE REF TO cl_abap_structdescr.


  READ TABLE i_header INTO w_header INDEX 1.
  CONCATENATE
  w_header-col_01
  w_header-col_02
  w_header-col_03
  w_header-col_04
  w_header-col_05
  w_header-col_06
  w_header-col_07
  w_header-col_08
  w_header-col_09
  w_header-col_10
  w_header-col_11
  w_header-col_12
  w_header-col_13
  w_header-col_14
  w_header-col_15
  w_header-col_16
  w_header-col_17
  w_header-col_18
  w_header-col_19
  w_header-col_20
  w_header-col_21
  w_header-col_22
  w_header-col_23
  w_header-col_24

  w_header-col_25
  w_header-col_26
  w_header-col_27
  w_header-col_28
 w_header-col_29
  w_header-col_30
  w_header-col_31
  w_header-col_32

  w_header-col_33
  w_header-col_34
 w_header-col_35
  w_header-col_36
  w_header-col_37
  w_header-col_38
  w_header-col_39
  w_header-col_40
  INTO line_fich SEPARATED BY ';'.

  TRANSFER line_fich  TO p_clpath.

  FIELD-SYMBOLS: <header>    LIKE LINE OF i_header,
                 <fs_field>  TYPE any,
                 <sep_field> TYPE any,
                 <fs_comp>   TYPE abap_compdescr.


  CONSTANTS: gc_hex_tab  TYPE x  VALUE 9.

* Obter lista de Campos da estrutura para o ficheiro
  descr_str ?=
      cl_abap_typedescr=>describe_by_data( ta_header ).

  ASSIGN p_separator TO <sep_field> TYPE 'X'.
  <sep_field> = ';'."gc_hex_tab.

  p_separator = ';'.

* Criar Lista de Campos para Cabeçalho do Ficheiro
  LOOP AT descr_str->components ASSIGNING <fs_comp>.
    it_fields-field = <fs_comp>-name.
    APPEND it_fields.
  ENDLOOP.

  FIELD-SYMBOLS <wa_data>  LIKE LINE OF it2_datah. "it_data.

  DATA: d_char(100) TYPE c.

  LOOP AT it_datah ASSIGNING <wa_data>.

*}   INSERT
*{   DELETE         JM3K901618                                        5
*\  LOOP AT it_data INTO wa_data.
*}   DELETE
*{   INSERT         JM3K901618                                        2
**********************************************************************
*** Criação do ficheiro
**********************************************************************
    CLEAR line_fich.

    LOOP AT it_fields.
      CLEAR d_char.
      aux_fname = it_fields-field.
      TRANSLATE aux_fname TO UPPER CASE.
      IF <fs_field> IS ASSIGNED.
        UNASSIGN <fs_field>.
      ENDIF.
      ASSIGN COMPONENT aux_fname
          OF STRUCTURE <wa_data> TO <fs_field>.

      IF sy-subrc = 0 AND <fs_field> IS ASSIGNED.


        d_char = <fs_field>.

        SHIFT d_char LEFT DELETING LEADING space.

        IF sy-tabix = 1.
          line_fich = d_char.
        ELSE.
          CONCATENATE line_fich p_separator d_char
                INTO line_fich.
        ENDIF.
      ENDIF.
    ENDLOOP.

    TRANSFER line_fich  TO p_clpath.
**********************************************************************
**********************************************************************

*}   INSERT

*{   DELETE         JM3K901618                                        1
*\    CALL METHOD cl_abap_container_utilities=>fill_container_c
*\      EXPORTING
*\        im_value               = wa_data
*\      IMPORTING
*\        ex_container           = l_string
*\      EXCEPTIONS
*\        illegal_parameter_type = 1
*\        OTHERS                 = 2.
*\
*\
*\*    ASSIGN wa_data TO <hex_container> CASTING.
*\    TRANSFER l_string TO p_clpath.
*}   DELETE


*    TRANSFER wa_data TO p_clpath.
  ENDLOOP.
  CLOSE DATASET p_clpath.

ENDFORM.                    " efetua_selecoes_ficheiro
*&---------------------------------------------------------------------*
*&      Form  efetua_selecoes_erros
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM efetua_selecoes_erros .
  DATA: it_thdr TYPE STANDARD TABLE OF /cockpit/thdr.
* tabela /cockpit/terrorv
*INVOICE_GUID
*STRUCTURE
*LINE
*CHECK_TYPE
*CH_TIMESTAMP
*ERROR_VERSION
*FIELDNAME
*PROCESS
  SELECT /cockpit/terrorv~invoice_guid
         /cockpit/terrorv~fieldname
         /cockpit/cchkt~description
         /cockpit/terrorv~ch_timestamp
  FROM /cockpit/terrorv
    INNER JOIN /cockpit/cchkt
    ON /cockpit/terrorv~check_type = /cockpit/cchkt~check_type AND
       /cockpit/cchkt~lanuage = sy-langu
    INTO (wa_data_e-invoice_guid, wa_data_e-field_id, wa_data_e-field_erp_status, wa_data_e-timestamp_field_erp_reg )
    FOR ALL ENTRIES IN it_data
    WHERE invoice_guid = it_data-invoice_guid.

    SELECT SINGLE zeic_invoice_id FROM /cockpit/thdr INTO wa_data_e-invoice_id
      WHERE invoice_guid = wa_data_e-invoice_guid.


    IF wa_data_e-invoice_id IS NOT INITIAL.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_data_e-invoice_id
        IMPORTING
          output = wa_data_e-invoice_id.



    ENDIF.



*    CLEAR wa_data_e2.
*    MOVE-CORRESPONDING wa_data_e TO wa_data_e2.
*    APPEND wa_data_e2 TO it_data_e2.
  ENDSELECT.
ENDFORM.                    " efetua_selecoes_erros
*&---------------------------------------------------------------------*
*&      Form  efetua_selecoes_workflow
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM efetua_selecoes_workflow .


*data: it_datawf like STANDARD TABLE OF wf_data_e,
*      wa_datawf like LINE OF wf_data_e.
*trata datas
  DATA: time_stamp TYPE timestamp,
        dat        TYPE d,
        tim        TYPE t,
        tz         TYPE ttzz-tzone,
        dst        TYPE c LENGTH 1,
        wathdr     TYPE /cockpit/thdr,
        dc(30).
  DATA: d(10), t(8).

*  SELECT /cockpit/twc~invoice_guid
*         /cockpit/twc~wc_id
*         dd07v~ddtext
*         /cockpit/twcs~wc_user
*         /cockpit/twc_ump~department
*         /cockpit/twc~wc_ch_timestamp
*         /cockpit/twcs~wc_ch_timestamp
*  FROM /cockpit/twc
*      INNER JOIN /cockpit/twcs
*      ON /cockpit/twc~invoice_guid = /cockpit/twcs~invoice_guid
*      INNER JOIN dd07v
*      ON ( domname = '/COCKPIT/MWC_STATUS' AND
*         ddlanguage = sy-langu AND
*         valpos = /cockpit/twcs~wc_status )
*  INNER JOIN /cockpit/twc_ump
*  ON /cockpit/twc_ump~wc_user = /cockpit/twcs~wc_user
*      INTO (wa_data_wf-invoice_guid, wa_data_wf-workflow_id,
*      wa_data_wf-workflow_stage, wa_data_wf-user_wf,
*      wa_data_wf-department, wa_data_wf-timestamp_initial_wf_stage,
*      wa_data_wf-timestamp_final_wf_stage", wa_data_wf-TIMESTAMP_INITIAL_WF_STAGE,
*      )
*      FOR ALL ENTRIES IN it_data
*      WHERE /cockpit/twc~invoice_guid = it_data-invoice_guid.
*
*    APPEND wa_data_wf  TO it_data_wf.
*
*  ENDSELECT.

  SELECT invoice_guid
         wc_id
*         dd07v~ddtext
*         /cockpit/twcs~wc_user
*         /cockpit/twc_ump~department
         wc_ch_timestamp
*         /cockpit/twcs~wc_ch_timestamp
  FROM /cockpit/twc
*      INNER JOIN /cockpit/twcs
*      ON /cockpit/twc~invoice_guid = /cockpit/twcs~invoice_guid
*      INNER JOIN dd07v
*      ON ( domname = '/COCKPIT/MWC_STATUS' AND
*         ddlanguage = sy-langu AND
*         valpos = /cockpit/twcs~wc_status )
*  INNER JOIN /cockpit/twc_ump
*  ON /cockpit/twc_ump~wc_user = /cockpit/twcs~wc_user
      INTO
    (wa_data_wf-invoice_guid,
    wa_data_wf-workflow_id,
*    wa_data_wf-workflow_stage,
*    wa_data_wf-user_wf,
*    wa_data_wf-department,
    wa_data_wf-timestamp_initial_wf_stage)
*    wa_data_wf-timestamp_final_wf_stage", wa_data_wf-TIMESTAMP_INITIAL_WF_STAGE,

      FOR ALL ENTRIES IN it_data
      WHERE /cockpit/twc~invoice_guid = it_data-invoice_guid.

    APPEND wa_data_wf  TO it_data_wf.

  ENDSELECT.

  DATA: d_tab   TYPE sy-tabix,
        d_stage TYPE /cockpit/twcs-wc_status.
  LOOP AT it_data_wf INTO wa_data_wf.
    d_tab = sy-tabix.

    SELECT SINGLE wc_user wc_ch_timestamp wc_status FROM /cockpit/twcs INTO (wa_data_wf-user_wf, wa_data_wf-timestamp_final_wf_stage, d_stage )
      WHERE invoice_guid = wa_data_wf-invoice_guid.

    SELECT SINGLE department FROM /cockpit/twc_ump INTO wa_data_wf-department
      WHERE wc_user = wa_data_wf-user_wf.

    SELECT SINGLE ddtext FROM dd07v INTO wa_data_wf-workflow_stage
      WHERE ( domname = '/COCKPIT/MWC_STATUS' AND
             ddlanguage = sy-langu AND
             valpos = d_stage ).

    MODIFY it_data_wf FROM wa_data_wf INDEX d_tab.


  ENDLOOP.










*  w_header-col_01 = 'INVOICE_ID'.
*  w_header-col_02 = 'INICIO_WF'.
*  w_header-col_03 = 'FIM_WF'.
*  w_header-col_04 = 'ZEIC_WF_TPERRO'.
*  w_header-col_05 = 'ZEIC_WF_TPART'.
*  w_header-col_06 = 'WC_UTILIZADORES'.
*  w_header-col_07 = 'WC_MAILS'.
*  w_header-col_08 = 'WC_INICIADOR'.
*  w_header-col_09 = 'WC_TIPO_WF'.











ENDFORM.                    " efetua_selecoes_workflow
*&---------------------------------------------------------------------*
*&      Form  cabecalho
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM cabecalho .
  PERFORM efetua_selecoes_thdr.
  PERFORM altera_montantes.
  converter it_datah i_data.
  PERFORM prepare_file_header.
  CLEAR path.
  CONCATENATE p_clpath 'INVOICE_ERP_'
  sy-datum
*  sy-datum+4(2) sy-datum+2(2) sy-datum(4)
  '.txt' INTO path.
  ficheiro path i_data_header i_data.
ENDFORM.                    " cabecalho
*&---------------------------------------------------------------------*
*&      Form  erros
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM erros .
  PERFORM efetua_selecoes_erros.
*  converter it_data_e2 i_data_e.
  PERFORM prepare_file_erros.
  CLEAR path.
  CONCATENATE p_clpath 'FIELD_INVOICE_ERP_file1.txt' INTO path.
*{   REPLACE        JM3K901618                                        1
*\  ficheiro path i_data_header i_data_e.
*  CONCATENATE p_clpath2 'FIELD_INVOICE_ERP_file1.txt' INTO path.
  ficheiro2 path i_data_header i_data_e.
*}   REPLACE
ENDFORM.                    " erros
*&---------------------------------------------------------------------*
*&      Form  workflow
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM workflow .
  PERFORM efetua_selecoes_workflow.
  converter it_data_wf i_data_wf.
  PERFORM prepare_file_header.
  CLEAR path.
  CONCATENATE p_clpath 'DOC_INVOICE_WF_file1.txt' INTO path.
*{   REPLACE        JM3K901618                                        1
*\  ficheiro path i_data_header i_data_wf.
  ficheiro2 path i_data_header i_data_wf.
*}   REPLACE
ENDFORM.                    " workflow


*&---------------------------------------------------------------------*
*&      Form  prepare_file_header
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM prepare_file_header.
  REFRESH i_header.
  w_header-col_01 = 'INVOICE_ID'.
  w_header-col_02 = 'REF_DOC_NO'.
  w_header-col_03 = 'INVOICE_ERP_NUMBER'.
  w_header-col_04 = 'POSTING_TYPE'.
  w_header-col_05 = 'DOCUMENT_TYPE_IC'.
  w_header-col_06 = 'PO_NUMBER'.
  w_header-col_07 = 'CREDIT_OR_DEBIT'.
  w_header-col_08 = 'USER'.
  w_header-col_09 = 'BUYER'.
  w_header-col_10 = 'SUPPLIER'.
  w_header-col_11 = 'GROSS_AMOUNT'.
  w_header-col_12 = 'GROSS_AMOUNT_ORIGINAL'.
  w_header-col_13 = 'NET_AMOUNT'.
  w_header-col_14 = 'NET_AMOUNT_ORIGINAL'.
  w_header-col_15 = 'CURRENCY'.
  w_header-col_16 = 'TIMESTAMP_RELEASE_DATE'.
  w_header-col_17 = 'TIMESTAMP_DUE_DATE'.
  w_header-col_18 = 'TIMESTAMP_PAYMENT_DATE'.
  w_header-col_19 = 'TIMESTAMP_BEGIN_ERP'.
  w_header-col_20 = 'DOCUMENT_STATUS'.
  w_header-col_21 = 'TIMESTAMP_REG'.
  w_header-col_22 = 'DOC_TYPE'.
  w_header-col_23 = 'TIMESTAMP_POSTDATE'.
  w_header-col_24 = 'STATUS_PAY'.
  w_header-col_25 = 'AUGDT'.
  w_header-col_26 = 'DOC_DATE_EMISSAO'.
  w_header-col_27 = 'DOC_TRAT_TRANSFER'.
  w_header-col_28 = 'DOC_POST_APROV'.
  w_header-col_29 = 'DOC_ERRORS_HIST'.
  w_header-col_30 = 'DOC_POST_ACTION'.
  w_header-col_31 = 'NUM_LINHAS'.
  w_header-col_32 = 'CH_UTILIZADOR'.
  w_header-col_33 = 'CH_DATAHORA'.
  w_header-col_34 = 'DOC_DATE'.
  w_header-col_35 = 'NUM_LINHAS_I'.
  w_header-col_36 = 'WORKFLOW'.
  w_header-col_37 = 'MESSAGE_ID'.
  w_header-col_38 = 'MESSAGE_HIST'.
  w_header-col_39 = 'MSG_WF_ID'.
  w_header-col_40 = 'MSG_WF_ID_DESCR'.
  APPEND w_header TO i_header.
  CLEAR w_header.

ENDFORM.                    "prepare_file_header
*&---------------------------------------------------------------------*
*&      Form  datas
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM datas .
  PERFORM convert_type_2_selopt TABLES l_selopt_fi_mm_flg
                                 USING p_fi
                                       p_mm.


*  perform convert_stat_2_selopt tables l_selopt_status
*                                       l_selopt_doc_status
*                                 using p_create
*                                       p_error
*                                       p_proces
*                                       p_park
*                                       p_refuse.

  PERFORM convert_date_to_tst_range(/cockpit/saplprocess)
    TABLES lt_selopt_timestamp
      sel_date."sel_sdat.
ENDFORM.                    " datas
*&---------------------------------------------------------------------*
*&      Form  PREPARE_FILE_ERROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prepare_file_erros .

  REFRESH i_header.
  w_header-col_01 = 'INVOICE_ID'.
*  w_header-col_02 = 'INVOICE_GUID'.
  w_header-col_02 = 'FIELD_ID'.
  w_header-col_03 = 'FIELD_ERP_STATUS'.
  w_header-col_04 = 'TIMESTAMP_REG'.



  APPEND w_header TO i_header.
  CLEAR w_header.

ENDFORM.                    " PREPARE_FILE_ERROS
*&---------------------------------------------------------------------*
*&      Form  ALTERA_MONTANTES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM altera_montantes .

*GROSS_AMOUNT type /cockpit/thdr-GROSS_AMOUNT,
*GROSS_AMOUNT_ORIGINAL type /cockpit/thdr-GROSS_AMOUNT,
*NET_AMOUNT type /cockpit/thdr-NET_AMOUNT,
*NET_AMOUNT_ORIGINAL type /cockpit/thdr-NET_AMOUNT,
*CURRENCY type /cockpit/thdr-CURRENCY,

  DATA: d_gross(30),
        d_grosso(30),
        d_net(30),
        d_neto(30),
        d_tab TYPE sy-tabix.

  LOOP AT it_datah INTO wa_datah.

    d_tab = sy-tabix.

    CALL FUNCTION 'HRCM_STRING_TO_AMOUNT_CONVERT'
      EXPORTING
        string            = wa_datah-gross_amount
        decimal_separator = ','
*       THOUSANDS_SEPARATOR       = ','
*       WAERS             = ' '
      IMPORTING
        betrg             = wa_datah-gross_amount
* EXCEPTIONS
*       CONVERT_ERROR     = 1
*       OTHERS            = 2
      .
    REPLACE ALL OCCURRENCES OF '.' IN wa_datah-gross_amount WITH ','.
    CALL FUNCTION 'HRCM_STRING_TO_AMOUNT_CONVERT'
      EXPORTING
        string            = wa_datah-gross_amount_original
        decimal_separator = ','
*       THOUSANDS_SEPARATOR       = ','
*       WAERS             = ' '
      IMPORTING
        betrg             = wa_datah-gross_amount_original
* EXCEPTIONS
*       CONVERT_ERROR     = 1
*       OTHERS            = 2
      .
    REPLACE ALL OCCURRENCES OF '.' IN wa_datah-gross_amount_original WITH ','.
    CALL FUNCTION 'HRCM_STRING_TO_AMOUNT_CONVERT'
      EXPORTING
        string            = wa_datah-net_amount
        decimal_separator = ','
*       THOUSANDS_SEPARATOR       = ','
*       WAERS             = ' '
      IMPORTING
        betrg             = wa_datah-net_amount
* EXCEPTIONS
*       CONVERT_ERROR     = 1
*       OTHERS            = 2
      .
    REPLACE ALL OCCURRENCES OF '.' IN wa_datah-net_amount WITH ','.
    CALL FUNCTION 'HRCM_STRING_TO_AMOUNT_CONVERT'
      EXPORTING
        string            = wa_datah-net_amount_original
        decimal_separator = ','
*       THOUSANDS_SEPARATOR       = ','
*       WAERS             = ' '
      IMPORTING
        betrg             = wa_datah-net_amount_original
* EXCEPTIONS
*       CONVERT_ERROR     = 1
*       OTHERS            = 2
      .
    REPLACE ALL OCCURRENCES OF '.' IN wa_datah-net_amount_original WITH ','.

    MODIFY it_datah FROM wa_datah INDEX d_tab.

  ENDLOOP.


ENDFORM.                    " ALTERA_MONTANTES
*&---------------------------------------------------------------------*
*&      Form  WORKFLOW2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM workflow2 .

  PERFORM efetua_selecoes_workflow.



  REFRESH i_header.
  w_header-col_01 = 'INVOICE_ID'.
  w_header-col_02 = 'INICIO_WF'.
  w_header-col_03 = 'FIM_WF'.
  w_header-col_04 = 'ZEIC_WF_TPERRO'.
  w_header-col_05 = 'ZEIC_WF_TPART'.
  w_header-col_06 = 'WC_UTILIZADORES'.
  w_header-col_07 = 'WC_MAILS'.
  w_header-col_08 = 'WC_INICIADOR'.
  w_header-col_09 = 'WC_TIPO_WF'.


  APPEND w_header TO i_header.
  CLEAR w_header.

  CLEAR path.
  CONCATENATE p_clpath 'DOC_INVOICE_WF_file1_'
  sy-datum

  '.txt' INTO path.

*        invoice_guid               type /cockpit/thdr-invoice_guid,
*        invoice_id                 type /cockpit/thdr-invoice_id, " 'INVOICE_ID'.
*        timestamp_initial_wf_stage type /cockpit/twc-wc_ch_timestamp,
*        timestamp_final_wf_stage   type /cockpit/twcs-wc_ch_timestamp,
*        workflow_id                type /cockpit/twc-wc_id,
*        workflow_stage             type dd07v-ddtext,
*        user_wf                    type /cockpit/twcs-wc_user,
*        department                 type /cockpit/twc_ump-department,
**********************************************************************
***
  DATA: BEGIN OF it2_data_wf1 OCCURS 0,
          invoice_id                 TYPE /cockpit/thdr-zeic_invoice_id,
          workflow_id                TYPE /cockpit/twc-wc_id,
          workflow_stage             TYPE dd07v-ddtext,
          user_wf                    TYPE /cockpit/twcs-wc_user,
          department                 TYPE /cockpit/twc_ump-department,

          timestamp_initial_wf_stage TYPE /cockpit/twc-wc_ch_timestamp,
          timestamp_final_wf_stage   TYPE /cockpit/twcs-wc_ch_timestamp,

        END OF it2_data_wf1.


*  w_header-col_01 = 'INVOICE_ID'.
*  w_header-col_02 = 'INICIO_WF'.
*  w_header-col_03 = 'FIM_WF'.
*  w_header-col_04 = 'ZEIC_WF_TPERRO'.
*  w_header-col_05 = 'ZEIC_WF_TPART'.
*  w_header-col_06 = 'WC_UTILIZADORES'.
*  w_header-col_07 = 'WC_MAILS'.
*  w_header-col_08 = 'WC_INICIADOR'.
*  w_header-col_09 = 'WC_TIPO_WF'.

  DATA: BEGIN OF it2_data_wf2 OCCURS 0,
          invoice_id                 TYPE /cockpit/thdr-zeic_invoice_id,
          timestamp_initial_wf_stage TYPE /cockpit/twc-wc_ch_timestamp,
          timestamp_final_wf_stage   TYPE /cockpit/twcs-wc_ch_timestamp,
          zeic_wf_tperro,
          zeic_wf_tpart,
          wc_utilizadores            TYPE char255,
          wc_mails                   TYPE char255,
          wc_iniciador               TYPE char255,
          workflow_id                TYPE char255,
        END OF it2_data_wf2.




  DATA: it_data_wf1 LIKE STANDARD TABLE OF it2_data_wf1,
        wa_data_wf1 LIKE LINE OF it2_data_wf1,
        it_data_wf2 LIKE STANDARD TABLE OF it2_data_wf2,
        wa_data_wf2 LIKE LINE OF it2_data_wf2,
        it_twcs     TYPE STANDARD TABLE OF /cockpit/twcs WITH HEADER LINE,
        it_ump      TYPE STANDARD TABLE OF /cockpit/twc_ump WITH HEADER LINE.
  DATA: wa_idt TYPE STANDARD TABLE OF /cockpit/cwc_idt WITH HEADER LINE.

  DATA: time_stamp TYPE timestamp,
        dat        TYPE d,
        tim        TYPE t,
        tz         TYPE ttzz-tzone,
        dst        TYPE c LENGTH 1,
        wathdr     TYPE /cockpit/thdr,
        dc(30).

  DATA: d(10), t(8).

  LOOP AT it_data_wf INTO wa_data_wf.

    CLEAR: wa_data_wf1, wa_data_wf2.

    MOVE-CORRESPONDING wa_data_wf TO wa_data_wf1.

    READ TABLE it_data INTO wa_data WITH KEY invoice_guid = wa_data_wf-invoice_guid.
    wa_data_wf1-invoice_id = wa_data-invoice_id.
    APPEND wa_data_wf1 TO  it_data_wf1.



    MOVE-CORRESPONDING wa_data_wf TO wa_data_wf2.

    REFRESH: it_twcs, it_ump.
    SELECT * FROM /cockpit/twcs INTO TABLE it_twcs
      WHERE invoice_guid =  wa_data_wf-invoice_guid.
    LOOP AT it_twcs.
      SELECT * FROM /cockpit/twc_ump INTO TABLE it_ump
        WHERE wc_user = it_twcs-wc_user.
      LOOP AT it_ump.
        CONCATENATE it_ump-email_uc ',' wa_data_wf2-wc_mails INTO wa_data_wf2-wc_mails.
      ENDLOOP.


      CONCATENATE it_twcs-wc_user ',' wa_data_wf2-wc_utilizadores INTO wa_data_wf2-wc_utilizadores.
    ENDLOOP.

    SELECT SINGLE wc_initiator FROM /cockpit/twc INTO wa_data_wf2-wc_iniciador
      WHERE invoice_guid =  wa_data_wf-invoice_guid.



    CLEAR wa_idt.
    SELECT SINGLE * FROM /cockpit/cwc_idt INTO wa_idt
      WHERE wc_id = wa_data_wf2-workflow_id AND
            language = sy-langu.
    IF sy-subrc = 0.
      SELECT SINGLE * FROM /cockpit/cwc_idt INTO wa_idt
        WHERE wc_id = wa_data_wf2-workflow_id.
    ENDIF.

    IF wa_idt IS NOT INITIAL.
      CONCATENATE wa_data_wf2-workflow_id ' - ' wa_idt-wc_name INTO wa_data_wf2-workflow_id.
    ENDIF.

    READ TABLE it_data INTO wa_data WITH KEY invoice_guid = wa_data_wf-invoice_guid.
    wa_data_wf2-invoice_id = wa_data-invoice_id.


**********************************************************************
**********************************************************************
*** Get dates
**********************************************************************
    DATA: ic_guid        TYPE /cockpit/thdr-invoice_guid,
          et_status_past TYPE STANDARD TABLE OF /cockpit/swc_status_past WITH HEADER LINE,
          et_status_curr TYPE STANDARD TABLE OF /cockpit/swc_status_past WITH HEADER LINE,
          datt(10),
          timm(10),
          d_mail         TYPE /cockpit/twc_ump-email_uc.

    REFRESH: et_status_past, et_status_curr.
    ic_guid = wa_data_wf-invoice_guid.




    CALL FUNCTION '/COCKPIT/WC_STATUS_GET'
      EXPORTING
        ic_guid        = ic_guid
      TABLES
        et_status_curr = et_status_curr
        et_status_past = et_status_past
      EXCEPTIONS
        error_occured  = 1
        OTHERS         = 2.
    IF sy-subrc = 0 AND et_status_past[] IS NOT INITIAL OR et_status_curr[] IS NOT INITIAL.
      CLEAR: wa_data_wf2-wc_mails, wa_data_wf2-wc_utilizadores.
      SORT et_status_past BY wc_version ASCENDING.




      LOOP AT et_status_curr.

        CLEAR: datt, timm.

        IF et_status_curr-wc_status_icon = '@E2@'. " Inicio

          CONCATENATE et_status_curr-wc_date+6(2) '-' et_status_curr-wc_date+4(2) '-' et_status_curr-wc_date(4) INTO datt.
          CONCATENATE et_status_curr-wc_time(2) ':' et_status_curr-wc_time+2(2) ':' et_status_curr-wc_time+4(2) INTO timm.

*          CONCATENATE datt timm
*           INTO
*          wa_data_wf2-timestamp_initial_wf_stage SEPARATED BY space.

          CLEAR:
          wa_data_wf2-timestamp_final_wf_stage.
          CLEAR d_mail.
          SELECT SINGLE email_uc FROM /cockpit/twc_ump INTO d_mail
            WHERE wc_user = et_status_past-wc_user.

          IF wa_data_wf2-wc_mails CS d_mail.
          ELSE.
            CONCATENATE d_mail ',' wa_data_wf2-wc_mails INTO wa_data_wf2-wc_mails.
            CONCATENATE et_status_curr-wc_user ',' wa_data_wf2-wc_utilizadores INTO wa_data_wf2-wc_utilizadores.

          ENDIF.




        ENDIF.

        IF et_status_curr-wc_status_icon = '@0V@' OR " Aprovação
           et_status_curr-wc_status_icon = '@2W@' OR " Recall
           et_status_curr-wc_status_icon = '@4R@' OR " Transferido
           et_status_curr-wc_status_icon = '@0W@'. " Rejeitado


          CONCATENATE et_status_curr-wc_date+6(2) '-' et_status_curr-wc_date+4(2) '-' et_status_curr-wc_date(4) INTO datt.
          CONCATENATE et_status_curr-wc_time(2) ':' et_status_curr-wc_time+2(2) ':' et_status_curr-wc_time+4(2) INTO timm.

*          CONCATENATE datt timm
*           INTO
*          wa_data_wf2-timestamp_final_wf_stage SEPARATED BY space.


          IF et_status_curr-wc_status_icon NE '@4R@'." Transferido.


            CLEAR d_mail.
            SELECT SINGLE email_uc FROM /cockpit/twc_ump INTO d_mail
              WHERE wc_user = et_status_curr-wc_user.

            IF wa_data_wf2-wc_mails CS d_mail.
            ELSE.
              CONCATENATE d_mail ',' wa_data_wf2-wc_mails INTO wa_data_wf2-wc_mails.
              CONCATENATE et_status_curr-wc_user ',' wa_data_wf2-wc_utilizadores INTO wa_data_wf2-wc_utilizadores.

            ENDIF.

*          concatenate d_mail ',' wa_data_wf2-wc_mails into wa_data_wf2-wc_mails.
*          concatenate et_status_curr-wc_user ',' wa_data_wf2-wc_utilizadores into wa_data_wf2-wc_utilizadores.

          ENDIF.

          APPEND wa_data_wf2 TO it_data_wf2.


        ENDIF.

      ENDLOOP.












      LOOP AT et_status_past.

        CLEAR: datt, timm.

        IF et_status_past-wc_status_icon = '@E2@'. " Inicio

          CONCATENATE et_status_past-wc_date+6(2) '-' et_status_past-wc_date+4(2) '-' et_status_past-wc_date(4) INTO datt.
          CONCATENATE et_status_past-wc_time(2) ':' et_status_past-wc_time+2(2) ':' et_status_past-wc_time+4(2) INTO timm.

*          CONCATENATE datt timm
*           INTO
*          wa_data_wf2-timestamp_initial_wf_stage SEPARATED BY space.

          CLEAR:
          wa_data_wf2-timestamp_final_wf_stage.
          CLEAR d_mail.
          SELECT SINGLE email_uc FROM /cockpit/twc_ump INTO d_mail
            WHERE wc_user = et_status_past-wc_user.

          IF wa_data_wf2-wc_mails CS d_mail.
          ELSE.
            CONCATENATE d_mail ',' wa_data_wf2-wc_mails INTO wa_data_wf2-wc_mails.
            CONCATENATE et_status_past-wc_user ',' wa_data_wf2-wc_utilizadores INTO wa_data_wf2-wc_utilizadores.

          ENDIF.

*          concatenate d_mail ',' wa_data_wf2-wc_mails into wa_data_wf2-wc_mails.
*          concatenate et_status_past-wc_user ',' wa_data_wf2-wc_utilizadores into wa_data_wf2-wc_utilizadores.


        ENDIF.

        IF et_status_past-wc_status_icon = '@0V@' OR " Aprovação
           et_status_past-wc_status_icon = '@2W@' OR " Recall
           et_status_past-wc_status_icon = '@4R@' OR " Transferido
           et_status_past-wc_status_icon = '@0W@'. " Rejeitado


          CONCATENATE et_status_past-wc_date+6(2) '-' et_status_past-wc_date+4(2) '-' et_status_past-wc_date(4) INTO datt.
          CONCATENATE et_status_past-wc_time(2) ':' et_status_past-wc_time+2(2) ':' et_status_past-wc_time+4(2) INTO timm.

*          CONCATENATE datt timm
*           INTO
*          wa_data_wf2-timestamp_final_wf_stage SEPARATED BY space.



          CLEAR d_mail.
          SELECT SINGLE email_uc FROM /cockpit/twc_ump INTO d_mail
            WHERE wc_user = et_status_past-wc_user.

          IF wa_data_wf2-wc_mails CS d_mail.
          ELSE.
            CONCATENATE d_mail ',' wa_data_wf2-wc_mails INTO wa_data_wf2-wc_mails.
            CONCATENATE et_status_past-wc_user ',' wa_data_wf2-wc_utilizadores INTO wa_data_wf2-wc_utilizadores.

          ENDIF.

*          concatenate d_mail ',' wa_data_wf2-wc_mails into wa_data_wf2-wc_mails.
*          concatenate et_status_past-wc_user ',' wa_data_wf2-wc_utilizadores into wa_data_wf2-wc_utilizadores.


          APPEND wa_data_wf2 TO it_data_wf2.

        ENDIF.

      ENDLOOP.
      IF wa_data_wf2-timestamp_final_wf_stage IS INITIAL.

        CONCATENATE et_status_past-wc_date+6(2) '-' et_status_past-wc_date+4(2) '-' et_status_past-wc_date(4) INTO datt.
        CONCATENATE et_status_past-wc_time(2) ':' et_status_past-wc_time+2(2) ':' et_status_past-wc_time+4(2) INTO timm.
*
*        CONCATENATE datt timm
*         INTO
*        wa_data_wf2-timestamp_final_wf_stage SEPARATED BY space.


*        concatenate sy-datum+6(2) '-' sy-datum+4(2) '-' sy-datum(4)
*        space
*        sy-uzeit(2) ':' sy-uzeit+2(2) ':' sy-uzeit+4(2) into
*        wa_data_wf2-timestamp_final_wf_stage.


        CLEAR d_mail.
        SELECT SINGLE email_uc FROM /cockpit/twc_ump INTO d_mail
          WHERE wc_user = et_status_past-wc_user.

        CONCATENATE d_mail ',' wa_data_wf2-wc_mails INTO wa_data_wf2-wc_mails.
        CONCATENATE et_status_past-wc_user ',' wa_data_wf2-wc_utilizadores INTO wa_data_wf2-wc_utilizadores.

        APPEND wa_data_wf2 TO it_data_wf2.
      ENDIF.


    ELSE.

**********************************************************************
**********************************************************************
*          timestamp_initial_wf_stage(30), " type /cockpit/twc-wc_ch_timestamp, 20170717083027.4118060
*          timestamp_final_wf_stage(30), "   type /cockpit/twcs-wc_ch_timestamp, 20170717083027.4118060
*      CONDENSE wa_data_wf2-timestamp_initial_wf_stage.
*      CONDENSE wa_data_wf2-timestamp_final_wf_stage.

*      CLEAR: datt, timm.
*      CONCATENATE wa_data_wf2-timestamp_initial_wf_stage+6(2) '-' wa_data_wf2-timestamp_initial_wf_stage+4(2) '-' wa_data_wf2-timestamp_initial_wf_stage(4) INTO datt.
*      CONCATENATE wa_data_wf2-timestamp_initial_wf_stage+8(2) ':' wa_data_wf2-timestamp_initial_wf_stage+10(2) ':' wa_data_wf2-timestamp_initial_wf_stage+12(2) INTO timm.
*
*      CONCATENATE datt timm
*       INTO
*      wa_data_wf2-timestamp_final_wf_stage SEPARATED BY space.
*
*      CLEAR: datt, timm.
*      CONCATENATE wa_data_wf2-timestamp_final_wf_stage+6(2) '-' wa_data_wf2-timestamp_final_wf_stage+4(2) '-' wa_data_wf2-timestamp_final_wf_stage(4) INTO datt.
*      CONCATENATE wa_data_wf2-timestamp_final_wf_stage+8(2) ':' wa_data_wf2-timestamp_final_wf_stage+10(2) ':' wa_data_wf2-timestamp_final_wf_stage+12(2) INTO timm.
*
*      CONCATENATE datt timm
*       INTO
*      wa_data_wf2-timestamp_final_wf_stage SEPARATED BY space.
*
***********************************************************************
***********************************************************************
      APPEND wa_data_wf2 TO it_data_wf2.

    ENDIF.








    CLEAR: wa_data_wf2.

  ENDLOOP.







*
*  converter it_data_wf2 "it_tempos
*            i_data_wf.

  DATA: e_header TYPE truxs_t_text_data.

*  converter i_header e_header.


*{   REPLACE        JM3K901618                                        1
*\  ficheiro path e_header i_data_wf.
*  ficheiro3 path e_header i_data_wf.
*}   REPLACE




*  converter it_data_wf i_data_wf.
*  PERFORM prepare_file_header.
*  CLEAR path.
*  CONCATENATE p_clpath 'DOC_INVOICE_WF_file1.txt' INTO path.
*  ficheiro path i_data_header i_data_wf.
*
*
*
*  PERFORM efetua_selecoes_workflow.
*  converter it_data_wf i_data_wf.
*  PERFORM prepare_file_header.
*  CLEAR path.
*  CONCATENATE p_clpath 'DOC_INVOICE_WF_file1.txt' INTO path.
*  ficheiro path i_data_header i_data_wf.


ENDFORM.                    " WORKFLOW2
*{   INSERT         JM3K901618                                        1






FORM efetua_selecoes_ficheiro2 .

  FIELD-SYMBOLS <hex_container> TYPE x.
  DATA mess(60).

  p_clpath = path.


*OPEN DATASET p_clpath FOR OUTPUT MESSAGE MESS.
  OPEN DATASET p_clpath FOR OUTPUT IN TEXT MODE ENCODING UTF-8.
  CHECK sy-subrc = 0.

  DATA: l_string(100).

*   CLEAR line_fich.
*   Transferir linha de erro

  DATA:
    BEGIN OF ta_header,
      invoice_id       TYPE string,
      field_id         TYPE string,
      field_erp_status TYPE string,
      timestamp_reg    TYPE string,

    END OF ta_header.


  DATA:
    p_separator   TYPE  c,
    line_fich     TYPE string,
    aux_fname(30),
    BEGIN OF it_fields OCCURS 0,
      field(30),
    END OF it_fields,
    descr_str TYPE REF TO cl_abap_structdescr.


  READ TABLE i_header INTO w_header INDEX 1.
  CONCATENATE
  w_header-col_01
  w_header-col_02
  w_header-col_03
  w_header-col_04
  INTO line_fich SEPARATED BY ';'.

  TRANSFER line_fich  TO p_clpath.

  FIELD-SYMBOLS: <header>    LIKE LINE OF i_header,
                 <fs_field>  TYPE any,
                 <sep_field> TYPE any,
                 <fs_comp>   TYPE abap_compdescr.


  CONSTANTS: gc_hex_tab  TYPE x  VALUE 9.

* Obter lista de Campos da estrutura para o ficheiro
  descr_str ?=
      cl_abap_typedescr=>describe_by_data( ta_header ).

  ASSIGN p_separator TO <sep_field> TYPE 'X'.
  <sep_field> = gc_hex_tab.

  p_separator = ';'.

* Criar Lista de Campos para Cabeçalho do Ficheiro
  LOOP AT descr_str->components ASSIGNING <fs_comp>.
    it_fields-field = <fs_comp>-name.
    APPEND it_fields.
  ENDLOOP.

  FIELD-SYMBOLS <wa_data>  LIKE LINE OF it_data_e.

  DATA: d_char(100) TYPE c.

  LOOP AT it_data_e ASSIGNING <wa_data>.

**********************************************************************
*** Criação do ficheiro
**********************************************************************
    CLEAR line_fich.

    LOOP AT it_fields.
      CLEAR d_char.
      aux_fname = it_fields-field.
      TRANSLATE aux_fname TO UPPER CASE.
      IF <fs_field> IS ASSIGNED.
        UNASSIGN <fs_field>.
      ENDIF.
      ASSIGN COMPONENT aux_fname
          OF STRUCTURE <wa_data> TO <fs_field>.

      IF sy-subrc = 0 AND <fs_field> IS ASSIGNED.
        d_char = <fs_field>.


        IF sy-tabix = 1.
          line_fich = d_char.
        ELSE.
          CONCATENATE line_fich p_separator d_char
                INTO line_fich.
        ENDIF.
      ENDIF.

    ENDLOOP.

    TRANSFER line_fich  TO p_clpath.
**********************************************************************
**********************************************************************

  ENDLOOP.
  CLOSE DATASET p_clpath.

ENDFORM.                    " efetua_selecoes_ficheiro2


FORM efetua_selecoes_ficheiro3 .

  FIELD-SYMBOLS <hex_container> TYPE x.
  DATA mess(60).

  p_clpath = path.


*OPEN DATASET p_clpath FOR OUTPUT MESSAGE MESS.
  OPEN DATASET p_clpath FOR OUTPUT IN TEXT MODE ENCODING UTF-8.
  CHECK sy-subrc = 0.

  DATA: l_string(100).

*   CLEAR line_fich.
*   Transferir linha de Cab


  w_header-col_01 = 'INVOICE_GUID'.
  w_header-col_02 = 'INICIO_WF'.
  w_header-col_03 = 'FIM_WF'.
  w_header-col_04 = 'ZEIC_WF_TPERRO'.
  w_header-col_05 = 'ZEIC_WF_TPART'.
  w_header-col_06 = 'WC_UTILIZADORES'.
  w_header-col_07 = 'WC_MAILS'.
  w_header-col_08 = 'WC_INICIADOR'.
  w_header-col_09 = 'WC_TIPO_WF'.
  w_header-col_10 = 'ZEIC_INVOICE_ID'.


  DATA:
    BEGIN OF ta_header,
      invoice_guid    TYPE string,
      inicio_wf       TYPE string,
      fim_wf          TYPE string,
      zeic_wf_tperro  TYPE string,
      zeic_wf_tpart   TYPE string,
      wc_utilizadores TYPE string,
      wc_mails        TYPE string,
      wc_iniciador    TYPE string,
      wc_tipo_wf      TYPE string,
      zeic_invoice_id TYPE string,
    END OF ta_header.


  DATA:
    p_separator   TYPE  c,
    line_fich     TYPE string,
    aux_fname(30),
    BEGIN OF it_fields OCCURS 0,
      field(30),
    END OF it_fields,
    descr_str TYPE REF TO cl_abap_structdescr.


  READ TABLE i_header INTO w_header INDEX 1.
  CONCATENATE
  w_header-col_01
  w_header-col_02
  w_header-col_03
  w_header-col_04
  w_header-col_05
  w_header-col_06
  w_header-col_07
  w_header-col_08
  w_header-col_09
  w_header-col_10

  INTO line_fich SEPARATED BY ';'.

  TRANSFER line_fich  TO p_clpath.

  FIELD-SYMBOLS: <header>    LIKE LINE OF i_header,
                 <fs_field>  TYPE any,
                 <sep_field> TYPE any,
                 <fs_comp>   TYPE abap_compdescr.


  CONSTANTS: gc_hex_tab  TYPE x  VALUE 9.

* Obter lista de Campos da estrutura para o ficheiro
  descr_str ?=
      cl_abap_typedescr=>describe_by_data( ta_header ).

  ASSIGN p_separator TO <sep_field> TYPE 'X'.
  <sep_field> = gc_hex_tab.

  p_separator = ';'.
* Criar Lista de Campos para Cabeçalho do Ficheiro
  LOOP AT descr_str->components ASSIGNING <fs_comp>.
    it_fields-field = <fs_comp>-name.
    APPEND it_fields.
  ENDLOOP.

  FIELD-SYMBOLS <wa_data>  LIKE LINE OF i_data_wf.

  DATA: d_char(100) TYPE c.

  LOOP AT i_data_wf ASSIGNING <wa_data>.

**********************************************************************
*** Criação do ficheiro
**********************************************************************
    CLEAR line_fich.
    line_fich = <wa_data>.
*      LOOP AT it_fields.
*        clear d_char.
*        aux_fname = it_fields-field.
*        TRANSLATE aux_fname TO UPPER CASE.
*        IF <fs_field> is ASSIGNED.
*          UNASSIGN <fs_field>.
*        ENDIF.
*        ASSIGN COMPONENT aux_fname
*            OF STRUCTURE <wa_data> TO <fs_field>.
*
*        IF sy-subrc = 0 and <fs_field> is ASSIGNED.
*
*
*        d_char = <fs_field>.
*
*
*        IF sy-tabix = 1.
*          line_fich = d_char.
*        ELSE.
*          CONCATENATE line_fich p_separator d_char
*                INTO line_fich.
*        ENDIF.
*
*        endif.
*      ENDLOOP.

    TRANSFER line_fich  TO p_clpath.
**********************************************************************
**********************************************************************

  ENDLOOP.
  CLOSE DATASET p_clpath.

ENDFORM.                    " efetua_selecoes_ficheiro2
*&---------------------------------------------------------------------*
*&      Form  WORKFLOW3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM workflow3 .


*        invoice_guid               type /cockpit/thdr-invoice_guid,
*        invoice_id                 type /cockpit/thdr-invoice_id, " 'INVOICE_ID'.
*        timestamp_initial_wf_stage type /cockpit/twc-wc_ch_timestamp,
*        timestamp_final_wf_stage   type /cockpit/twcs-wc_ch_timestamp,
*        workflow_id                type /cockpit/twc-wc_id,
*        workflow_stage             type dd07v-ddtext,
*        user_wf                    type /cockpit/twcs-wc_user,
*        department                 type /cockpit/twc_ump-department,
**********************************************************************
***
  DATA: BEGIN OF it2_data_wf1 OCCURS 0,
          invoice_id                 TYPE /cockpit/thdr-zeic_invoice_id,
          workflow_id                TYPE /cockpit/twc-wc_id,
          workflow_stage             TYPE dd07v-ddtext,
          user_wf                    TYPE /cockpit/twcs-wc_user,
          department                 TYPE /cockpit/twc_ump-department,

          timestamp_initial_wf_stage TYPE /cockpit/twc-wc_ch_timestamp,
          timestamp_final_wf_stage   TYPE /cockpit/twcs-wc_ch_timestamp,

        END OF it2_data_wf1.



  DATA: BEGIN OF it2_data_wf2 OCCURS 0,
          invoice_id                 TYPE /cockpit/thdr-zeic_invoice_id,
          timestamp_initial_wf_stage TYPE /cockpit/twc-wc_ch_timestamp,
          timestamp_final_wf_stage   TYPE /cockpit/twcs-wc_ch_timestamp,
          zeic_wf_tperro,
          zeic_wf_tpart,
          wc_utilizadores            TYPE char255,
          wc_mails                   TYPE char255,
          wc_iniciador               TYPE char255,
          workflow_id                TYPE char255,
        END OF it2_data_wf2.




  DATA: it_data_wf1 LIKE STANDARD TABLE OF it2_data_wf1,
        wa_data_wf1 LIKE LINE OF it2_data_wf1,
        it_twcs     TYPE STANDARD TABLE OF /cockpit/twcs WITH HEADER LINE,
        it_ump      TYPE STANDARD TABLE OF /cockpit/twc_ump WITH HEADER LINE.
  DATA: wa_idt TYPE STANDARD TABLE OF /cockpit/cwc_idt WITH HEADER LINE.

  DATA: time_stamp TYPE timestamp,
        dat        TYPE d,
        tim        TYPE t,
        tz         TYPE ttzz-tzone,
        dst        TYPE c LENGTH 1,
        wathdr     TYPE /cockpit/thdr,
        dc(30).

  DATA: d(10), t(8).

  DATA:
    et_status_next TYPE STANDARD TABLE OF  /cockpit/swc_status_next WITH HEADER LINE,
    et_status_curr TYPE STANDARD TABLE OF  /cockpit/swc_status_past WITH HEADER LINE,
    et_status_past TYPE STANDARD TABLE OF  /cockpit/swc_status_past WITH HEADER LINE.



  DATA:
    et_status_next_l TYPE STANDARD TABLE OF  /cockpit/swc_status_next WITH HEADER LINE,
    et_status_curr_l TYPE STANDARD TABLE OF  /cockpit/swc_status_past WITH HEADER LINE,
    et_status_past_l TYPE STANDARD TABLE OF  /cockpit/swc_status_past WITH HEADER LINE.

  DATA:
    et_status_next_a TYPE STANDARD TABLE OF  /cockpit/swc_status_next WITH HEADER LINE,
    et_status_curr_a TYPE STANDARD TABLE OF  /cockpit/swc_status_past WITH HEADER LINE,
    et_status_past_a TYPE STANDARD TABLE OF  /cockpit/swc_status_past WITH HEADER LINE.
**********************************************************************
**********************************************************************
*** Get workflows ativos para as guids enviadas
**********************************************************************
**********************************************************************
  DATA: ic_guid LIKE  /cockpit/thdr-invoice_guid.

  DATA: es_wc_status LIKE  /cockpit/swc_status,

        datt(10),
        timm(10).


**********************************************************************
*** Utilizador e mails
**********************************************************************
  SELECT * FROM /cockpit/twc_ump INTO TABLE it_ump.
**********************************************************************
**********************************************************************



  LOOP AT it_data INTO wa_data.

    ic_guid = wa_data-invoice_guid.

    REFRESH: et_status_next, et_status_curr, et_status_past.
    CLEAR es_wc_status.
    CALL FUNCTION '/COCKPIT/WC_STATUS_GET'
      EXPORTING
        ic_guid        = ic_guid
*       IS_HEADER      =
*       IC_LANGUAGE    = SY-LANGU
*       IB_RFC_CALL    =
*       IC_WC_NO       =
*       IB_NOTES       =
*       IN_VERSION     =
      IMPORTING
        es_wc_status   = es_wc_status
*       EC_NEXT_NAME   =
*       EC_CURR_NAME   =
*       EC_PAST_NAME   =
      TABLES
        et_status_next = et_status_next
        et_status_curr = et_status_curr
        et_status_past = et_status_past
*       ET_MESSAGE     =
*       ET_NOTE_HDR    =
*       ET_NOTE_BOD    =
      EXCEPTIONS
        error_occured  = 1
        OTHERS         = 2.
    IF sy-subrc = 0.



*      clear: datt, timm.
*      concatenate wa_data_wf2-timestamp_final_wf_stage+6(2) '-' wa_data_wf2-timestamp_final_wf_stage+4(2) '-' wa_data_wf2-timestamp_final_wf_stage(4) into datt.
*      concatenate wa_data_wf2-timestamp_final_wf_stage+8(2) ':' wa_data_wf2-timestamp_final_wf_stage+10(2) ':' wa_data_wf2-timestamp_final_wf_stage+12(2) into timm.
*
*      concatenate datt timm
*       into
*      wa_data_wf2-timestamp_final_wf_stage separated by space.



*      DELETE et_status_curr WHERE wc_user IS INITIAL.
*      LOOP AT et_status_curr.
*        CLEAR wa_data_wf_now.
*        MOVE-CORRESPONDING et_status_curr TO wa_data_wf_now.
*        wa_data_wf_now-invoice_id = wa_data-invoice_id.
*        wa_data_wf_now-wc_utilizadores = et_status_curr-wc_user.
*        READ TABLE it_ump WITH KEY wc_user = wa_data_wf_now-wc_utilizadores.
*        IF sy-subrc = 0.
*          wa_data_wf_now-wc_mails = it_ump-email_uc.
*        ENDIF.
*        wa_data_wf_now-wc_iniciador = es_wc_status-cr_user.
*        wa_data_wf_now-workflow_id = es_wc_status-wc_id.
*
*        IF et_status_curr-wc_date IS NOT INITIAL AND et_status_curr-wc_time IS NOT  INITIAL.
*          CONCATENATE
*          et_status_curr-wc_date+6(2) '-' et_status_curr-wc_date+4(2) '-' et_status_curr-wc_date(4) INTO datt.
*
*          CONCATENATE
*          et_status_curr-wc_time(2) ':' et_status_curr-wc_time+2(2) ':' et_status_curr-wc_time+4(2) INTO timm.
*          CONCATENATE datt timm
*           INTO
*          wa_data_wf_now-timestamp_initial_wf_stage SEPARATED BY space.
*
*
*          CONCATENATE
*          sy-datum+6(2) '-' sy-datum+4(2) '-' sy-datum(4) INTO datt.
*          CONCATENATE
*          sy-uzeit(2) ':' sy-uzeit+2(2) ':' sy-uzeit+4(2) INTO timm.
*          CONCATENATE datt timm
*           INTO
*          wa_data_wf_now-timestamp_final_wf_stage SEPARATED BY space.
*
*        ENDIF.
*
*        APPEND wa_data_wf_now TO it_data_wf_now.
*      ENDLOOP.



*      DELETE et_status_next WHERE wc_user IS INITIAL.
*      LOOP AT et_status_next.
*        CLEAR wa_data_wf_next.
*        MOVE-CORRESPONDING et_status_next TO wa_data_wf_next.
*        wa_data_wf_next-invoice_id = wa_data-invoice_id.
*        wa_data_wf_next-wc_utilizadores = et_status_next-wc_user.
*        READ TABLE it_ump WITH KEY wc_user = wa_data_wf_next-wc_utilizadores.
*        IF sy-subrc = 0.
*          wa_data_wf_next-wc_mails = it_ump-email_uc.
*        ENDIF.
*        wa_data_wf_next-wc_iniciador = es_wc_status-cr_user.
*        wa_data_wf_next-workflow_id = es_wc_status-wc_id.
*        APPEND wa_data_wf_next TO it_data_wf_next.
*      ENDLOOP.
*
*      DELETE et_status_past WHERE wc_user IS INITIAL.
*      LOOP AT et_status_past.
*        CLEAR wa_data_wf_ant.
*        MOVE-CORRESPONDING et_status_past TO wa_data_wf_ant.
*        wa_data_wf_ant-invoice_id = wa_data-invoice_id.
*        wa_data_wf_ant-wc_utilizadores = et_status_past-wc_user.
*        READ TABLE it_ump WITH KEY wc_user = wa_data_wf_ant-wc_utilizadores.
*        IF sy-subrc = 0.
*          wa_data_wf_ant-wc_mails = it_ump-email_uc.
*        ENDIF.
*        wa_data_wf_ant-wc_iniciador = es_wc_status-cr_user.
*        wa_data_wf_ant-workflow_id = es_wc_status-wc_id.
*        APPEND wa_data_wf_ant TO it_data_wf_ant.
*      ENDLOOP.



    ENDIF.

  ENDLOOP.


*

















  DATA: "it_twcs  type standard table of /cockpit/twcs,
    wa_twcs  TYPE /cockpit/twcs,
    ic_wc_no LIKE  /cockpit/twc-wc_no.





**********************************************************************
**********************************************************************
*** Get workflows antigos
**********************************************************************
**********************************************************************
*  data: ic_guid like  /cockpit/thdr-invoice_guid.

  LOOP AT it_data INTO wa_data.

    REFRESH it_twcs.
    SELECT * FROM /cockpit/twcs INTO TABLE it_twcs
      WHERE invoice_guid = wa_data-invoice_guid.
    IF sy-subrc = 0.
      SORT it_twcs BY wc_no DESCENDING.
      DELETE ADJACENT DUPLICATES FROM it_twcs COMPARING wc_no.

      ic_guid = wa_data-invoice_guid.

      LOOP AT it_twcs INTO wa_twcs.
        ic_wc_no = wa_twcs-wc_no.

        REFRESH: et_status_next, et_status_curr, et_status_past.
        CLEAR es_wc_status.
        CALL FUNCTION '/COCKPIT/WC_STATUS_GET'
          EXPORTING
            ic_guid        = ic_guid
*           IS_HEADER      =
*           IC_LANGUAGE    = SY-LANGU
*           IB_RFC_CALL    =
            ic_wc_no       = ic_wc_no
*           IB_NOTES       =
*           IN_VERSION     =
          IMPORTING
            es_wc_status   = es_wc_status
*           EC_NEXT_NAME   =
*           EC_CURR_NAME   =
*           EC_PAST_NAME   =
          TABLES
            et_status_next = et_status_next
            et_status_curr = et_status_curr
            et_status_past = et_status_past
*           ET_MESSAGE     =
*           ET_NOTE_HDR    =
*           ET_NOTE_BOD    =
          EXCEPTIONS
            error_occured  = 1
            OTHERS         = 2.
        IF sy-subrc = 0.

*          DELETE et_status_curr WHERE wc_user IS INITIAL.
*          LOOP AT et_status_curr.
*            CLEAR wa_data_wf_now.
*            MOVE-CORRESPONDING et_status_curr TO wa_data_wf_now.
*            wa_data_wf_now-invoice_id = wa_data-invoice_id.
*            wa_data_wf_now-wc_utilizadores = et_status_curr-wc_user.
*            READ TABLE it_ump WITH KEY wc_user = wa_data_wf_now-wc_utilizadores.
*            IF sy-subrc = 0.
*              wa_data_wf_now-wc_mails = it_ump-email_uc.
*            ENDIF.
*            wa_data_wf_now-wc_iniciador = es_wc_status-cr_user.
*            wa_data_wf_now-workflow_id = es_wc_status-wc_id.
*            APPEND wa_data_wf_now TO it_data_wf_now.
*          ENDLOOP.
*
*
*
*          DELETE et_status_next WHERE wc_user IS INITIAL.
*          LOOP AT et_status_next.
*            CLEAR wa_data_wf_next.
*            MOVE-CORRESPONDING et_status_next TO wa_data_wf_next.
*            wa_data_wf_next-invoice_id = wa_data-invoice_id.
*            wa_data_wf_next-wc_utilizadores = et_status_next-wc_user.
*            READ TABLE it_ump WITH KEY wc_user = wa_data_wf_next-wc_utilizadores.
*            IF sy-subrc = 0.
*              wa_data_wf_next-wc_mails = it_ump-email_uc.
*            ENDIF.
*            wa_data_wf_next-wc_iniciador = es_wc_status-cr_user.
*            wa_data_wf_next-workflow_id = es_wc_status-wc_id.
*            APPEND wa_data_wf_next TO it_data_wf_next.
*          ENDLOOP.
*
*          DELETE et_status_past WHERE wc_user IS INITIAL.
*          LOOP AT et_status_past.
*            CLEAR wa_data_wf_ant.
*            MOVE-CORRESPONDING et_status_past TO wa_data_wf_ant.
*            wa_data_wf_ant-invoice_id = wa_data-invoice_id.
*            wa_data_wf_ant-wc_utilizadores = et_status_past-wc_user.
*            READ TABLE it_ump WITH KEY wc_user = wa_data_wf_ant-wc_utilizadores.
*            IF sy-subrc = 0.
*              wa_data_wf_ant-wc_mails = it_ump-email_uc.
*            ENDIF.
*            wa_data_wf_ant-wc_iniciador = es_wc_status-cr_user.
*            wa_data_wf_ant-workflow_id = es_wc_status-wc_id.
*            APPEND wa_data_wf_ant TO it_data_wf_ant.
*          ENDLOOP.



        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDLOOP.


*  SORT it_data_wf_ant.
*  DELETE ADJACENT DUPLICATES FROM it_data_wf_ant COMPARING ALL FIELDS.
*  SORT it_data_wf_next.
*  DELETE ADJACENT DUPLICATES FROM it_data_wf_next COMPARING ALL FIELDS.
*  SORT it_data_wf_now.
*  DELETE ADJACENT DUPLICATES FROM it_data_wf_now COMPARING ALL FIELDS.


*  it_data_wf_ant2[] = it_data_wf_ant[].

  SORT it_data BY invoice_id DESCENDING.
  DELETE ADJACENT DUPLICATES FROM it_data COMPARING invoice_id.

  LOOP AT it_data INTO wa_data.

*    LOOP AT it_data_wf_ant INTO wa_data_wf_ant WHERE invoice_id = wa_data-invoice_id.
*      IF wa_data_wf_ant-wc_status_icon = '@E2@'. " Enviado
*        CLEAR wa_data_wf_ant2.
*        MOVE-CORRESPONDING wa_data_wf_ant TO wa_data_wf_ant2.
*
*        IF wa_data_wf_ant2-wc_date IS NOT INITIAL AND wa_data_wf_ant2-wc_time IS NOT  INITIAL.
*          CONCATENATE
*          wa_data_wf_ant2-wc_date+6(2) '-' wa_data_wf_ant2-wc_date+4(2) '-' wa_data_wf_ant2-wc_date(4) INTO datt.
*
*          CONCATENATE
*          wa_data_wf_ant2-wc_time(2) ':' wa_data_wf_ant2-wc_time+2(2) ':' wa_data_wf_ant2-wc_time+4(2) INTO timm.
*          CONCATENATE datt timm
*           INTO
*          wa_data_wf_ant2-timestamp_initial_wf_stage SEPARATED BY space.
*
*        ENDIF.
*      ENDIF.
*
*
*      IF wa_data_wf_ant-wc_status_icon = '@2W@' OR " - retomado
*         wa_data_wf_ant-wc_status_icon = '@0V@' OR " - liberado
*         wa_data_wf_ant-wc_status_icon = '@0W@'. " - rejeitado
*
*        IF wa_data_wf_ant-wc_date IS NOT INITIAL AND wa_data_wf_ant-wc_time IS NOT  INITIAL.
*          CONCATENATE
*          wa_data_wf_ant-wc_date+6(2) '-' wa_data_wf_ant-wc_date+4(2) '-' wa_data_wf_ant-wc_date(4) INTO datt.
*
*          CONCATENATE
*          wa_data_wf_ant-wc_time(2) ':' wa_data_wf_ant-wc_time+2(2) ':' wa_data_wf_ant-wc_time+4(2) INTO timm.
*          CONCATENATE datt timm
*           INTO
*          wa_data_wf_ant2-timestamp_final_wf_stage SEPARATED BY space.
*          APPEND wa_data_wf_ant2 TO it_data_wf_ant2.
*        ENDIF.
*      ENDIF.
*    ENDLOOP.
  ENDLOOP.



  DATA: d_tix TYPE sy-tabix.
*      wa_idt type /cockpit/cwc_idt.
*  LOOP AT it_data_wf_ant2 INTO wa_data_wf_ant2.
*    d_tix = sy-tabix.
*    CLEAR wa_idt.
*    SELECT SINGLE * FROM /cockpit/cwc_idt INTO wa_idt
*      WHERE wc_id = wa_data_wf_ant2-workflow_id AND
*            language = sy-langu.
*    IF sy-subrc NE 0.
*      SELECT SINGLE * FROM /cockpit/cwc_idt INTO wa_idt
*        WHERE wc_id = wa_data_wf_ant2-workflow_id.
*    ENDIF.
*
*    IF wa_idt IS NOT INITIAL.
*      CONCATENATE wa_data_wf_ant2-workflow_id ' - ' wa_idt-wc_name INTO wa_data_wf_ant2-wc_tipo_wf.
*      MODIFY it_data_wf_ant2 FROM wa_data_wf_ant2 INDEX d_tix.
*    ENDIF.
*  ENDLOOP.
*
*  LOOP AT it_data_wf_now INTO wa_data_wf_now.
*    d_tix = sy-tabix.
*    CLEAR wa_idt.
*    SELECT SINGLE * FROM /cockpit/cwc_idt INTO wa_idt
*      WHERE wc_id = wa_data_wf_now-workflow_id AND
*            language = sy-langu.
*    IF sy-subrc NE 0.
*      SELECT SINGLE * FROM /cockpit/cwc_idt INTO wa_idt
*        WHERE wc_id = wa_data_wf_now-workflow_id.
*    ENDIF.
*
*    IF wa_idt IS NOT INITIAL.
*      CONCATENATE wa_data_wf_now-workflow_id ' - ' wa_idt-wc_name INTO wa_data_wf_now-wc_tipo_wf.
*      MODIFY it_data_wf_now FROM wa_data_wf_now INDEX d_tix.
*    ENDIF.
*  ENDLOOP.
*
*  DELETE it_data_wf_now WHERE timestamp_initial_wf_stage IS INITIAL.
*  DELETE it_data_wf_ant2 WHERE timestamp_initial_wf_stage IS INITIAL.


**********************************************************************
**********************************************************************
*** Exportação
**********************************************************************

  REFRESH i_header.


  w_header-col_01 = 'INVOICE_ID'.
  w_header-col_02 = 'BEGIN_STEP_WF'.
  w_header-col_03 = 'END_STEP_WF'.
  w_header-col_04 = 'ZEIC_WF_TPERRO'.
  w_header-col_05 = 'ZEIC_WF_TPART'.
  w_header-col_06 = 'USER_STEP_WF'.
  w_header-col_07 = 'MAIL_USER_STEP_WF'.
  w_header-col_08 = 'BEGIN_USER_WF'.
  w_header-col_09 = 'WORKFLOW_ID'.
  w_header-col_10 = 'WC_STEP_ID'.
  w_header-col_11 = 'WC_STEP_NAME'.
  w_header-col_12 = 'WC_POS'.
  w_header-col_13 = 'WC_SUBPOS'.
  w_header-col_14 = 'WC_VERSION'.
  w_header-col_15 = 'WC_DATE'.
  w_header-col_16 = 'WC_TIME'.
  w_header-col_17 = 'WC_USERTYPE'.
  w_header-col_18 = 'WC_USER'.
  w_header-col_19 = 'WC_USERDISP'.
  w_header-col_20 = 'WC_STATUS_ICON'.
  w_header-col_21 = 'WF_STATE'.
  w_header-col_22 = 'WC_DUEDATE'.
  w_header-col_23 = 'WC_REM'.
  w_header-col_24 = 'WC_TIPO_WF'.
  APPEND w_header TO i_header.
  CLEAR w_header.

  CLEAR path.
  CONCATENATE p_clpath 'DOC_INVOICE_WF_NOW_'
  sy-datum

  '.txt' INTO path.



*  converter it_data_wf_now " NOW
*            i_data_wf.

  DATA: e_header TYPE truxs_t_text_data.

*  converter i_header e_header.


  IF sy-batch = 'X'.


    FIELD-SYMBOLS <hex_container> TYPE x.
    DATA mess(60).

    p_clpath = path.


*OPEN DATASET p_clpath FOR OUTPUT MESSAGE MESS.
    OPEN DATASET p_clpath FOR OUTPUT IN TEXT MODE ENCODING UTF-8.
    CHECK sy-subrc = 0.

    DATA: l_string(100).

*   CLEAR line_fich.
*   Transferir linha de Cab
    w_header-col_01 = 'INVOICE_ID'.
    w_header-col_02 = 'BEGIN_STEP_WF'.
    w_header-col_03 = 'END_STEP_WF'.
    w_header-col_04 = 'ZEIC_WF_TPERRO'.
    w_header-col_05 = 'ZEIC_WF_TPART'.
    w_header-col_06 = 'USER_STEP_WF'.
    w_header-col_07 = 'MAIL_USER_STEP_WF'.
    w_header-col_08 = 'BEGIN_USER_WF'.
    w_header-col_09 = 'WORKFLOW_ID'.
    w_header-col_10 = 'WC_STEP_ID'.
    w_header-col_11 = 'WC_STEP_NAME'.
    w_header-col_12 = 'WC_POS'.
    w_header-col_13 = 'WC_SUBPOS'.
    w_header-col_14 = 'WC_VERSION'.
    w_header-col_15 = 'WC_DATE'.
    w_header-col_16 = 'WC_TIME'.
    w_header-col_17 = 'WC_USERTYPE'.
    w_header-col_18 = 'WC_USER'.
    w_header-col_19 = 'WC_USERDISP'.
    w_header-col_20 = 'WC_STATUS_ICON'.
    w_header-col_21 = 'WF_STATE'.
    w_header-col_22 = 'WC_DUEDATE'.
    w_header-col_23 = 'WC_REM'.
    w_header-col_24 = 'WC_TIPO_WF'.

    DATA:
      BEGIN OF ta_header,
        invoice_id        TYPE string,
        begin_step_wf     TYPE string,
        end_step_wf       TYPE string,
        zeic_wf_tperro    TYPE string,
        zeic_wf_tpart     TYPE string,
        user_step_wf      TYPE string,
        mail_user_step_wf TYPE string,
        begin_user_wf     TYPE string,
        workflow_id       TYPE string,
        wc_step_id        TYPE string,
        wc_step_name      TYPE string,
        wc_pos            TYPE string,
        wc_subpos         TYPE string,
        wc_version        TYPE string,
        wc_date           TYPE string,
        wc_time           TYPE string,
        wc_usertype       TYPE string,
        wc_user           TYPE string,
        wc_userdisp       TYPE string,
        wc_status_icon    TYPE string,
        wf_state          TYPE string,
        wc_duedate        TYPE string,
        wc_rem            TYPE string,
        wc_tipo_wf        TYPE string,
      END OF ta_header.


    DATA:
      p_separator   TYPE  c,
      line_fich     TYPE string,
      aux_fname(30),
      BEGIN OF it_fields OCCURS 0,
        field(30),
      END OF it_fields,
      descr_str TYPE REF TO cl_abap_structdescr.


    READ TABLE i_header INTO w_header INDEX 1.
    CONCATENATE
    w_header-col_01
    w_header-col_02
    w_header-col_03
    w_header-col_04
    w_header-col_05
    w_header-col_06
    w_header-col_07
    w_header-col_08
    w_header-col_09
    w_header-col_10

    w_header-col_11
    w_header-col_12
    w_header-col_13
    w_header-col_14
    w_header-col_15
    w_header-col_16
    w_header-col_17
    w_header-col_18
    w_header-col_19
    w_header-col_20


    w_header-col_21
    w_header-col_22
    w_header-col_23
    w_header-col_24
    INTO line_fich SEPARATED BY ';'.
*CONCATENATE line_fich cL_ABAP_ChaR_UTILITIES=>NEWLINE into line_fich.
    TRANSFER line_fich  TO p_clpath.

    FIELD-SYMBOLS: <header>    LIKE LINE OF i_header,
                   <fs_field>  TYPE any,
                   <sep_field> TYPE any,
                   <fs_comp>   TYPE abap_compdescr.


    CONSTANTS: gc_hex_tab  TYPE x  VALUE 9.

* Obter lista de Campos da estrutura para o ficheiro
    descr_str ?=
        cl_abap_typedescr=>describe_by_data( ta_header ).

    ASSIGN p_separator TO <sep_field> TYPE 'X'.
    <sep_field> = gc_hex_tab.

    p_separator = ';'.
* Criar Lista de Campos para Cabeçalho do Ficheiro
    LOOP AT descr_str->components ASSIGNING <fs_comp>.
      it_fields-field = <fs_comp>-name.
      APPEND it_fields.
    ENDLOOP.

    FIELD-SYMBOLS <wa_data>  LIKE LINE OF i_data_wf.

    DATA: d_char(100) TYPE c.


    CONCATENATE
    w_header-col_01
    w_header-col_02
    w_header-col_03
    w_header-col_04
    w_header-col_05
    w_header-col_06
    w_header-col_07
    w_header-col_08
    w_header-col_09
    w_header-col_10

    w_header-col_11
    w_header-col_12
    w_header-col_13
    w_header-col_14
    w_header-col_15
    w_header-col_16
    w_header-col_17
    w_header-col_18
    w_header-col_19
    w_header-col_20


    w_header-col_21
    w_header-col_22
    w_header-col_23
    w_header-col_24
    INTO line_fich SEPARATED BY ';'.

*    transfer line_fich  to p_clpath.
*
*line_fich =  cl_abap_char_utilities=>cr_lf.
*    transfer line_fich  to p_clpath.


    LOOP AT i_data_wf ASSIGNING <wa_data>.
**********************************************************************
*** Criação do ficheiro
**********************************************************************
      CLEAR line_fich.
      line_fich = <wa_data>.
*      CONCATENATE line_fich cl_abap_char_utilities=>cr_lf into line_fich.
      TRANSFER line_fich  TO p_clpath.
**********************************************************************
**********************************************************************
    ENDLOOP.
    CLOSE DATASET p_clpath.


  ELSE.
*    converter i_header i_data_header.

    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        filename = path
        codepage = '4110'
      TABLES
        data_tab = i_data_header.

    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        filename = path
        codepage = '4110'
        append   = 'X'
      TABLES
        data_tab = i_data_wf.

  ENDIF.
**********************************************************************
**********************************************************************


*  p_clpath = p_clpath2.
**********************************************************************
*** Antigos
**********************************************************************
  CLEAR path.
  CONCATENATE p_clpath 'DOC_INVOICE_WF_ANT_'
  sy-datum

  '.txt' INTO path.


  REFRESH i_data_wf.
*  converter it_data_wf_ant2 " NOW
*            i_data_wf.

  IF sy-batch = 'X'.


    p_clpath = path.







*OPEN DATASET p_clpath FOR OUTPUT MESSAGE MESS.
    OPEN DATASET p_clpath FOR OUTPUT IN TEXT MODE ENCODING UTF-8.
    CHECK sy-subrc = 0.


    CONCATENATE
    w_header-col_01
    w_header-col_02
    w_header-col_03
    w_header-col_04
    w_header-col_05
    w_header-col_06
    w_header-col_07
    w_header-col_08
    w_header-col_09
    w_header-col_10

    w_header-col_11
    w_header-col_12
    w_header-col_13
    w_header-col_14
    w_header-col_15
    w_header-col_16
    w_header-col_17
    w_header-col_18
    w_header-col_19
    w_header-col_20


    w_header-col_21
    w_header-col_22
    w_header-col_23
    w_header-col_24
    INTO line_fich SEPARATED BY ';'.
*CONCATENATE line_fich cL_ABAP_ChaR_UTILITIES=>NEWLINE into line_fich.
    TRANSFER line_fich  TO p_clpath.
*clear line_fich.
*line_fich =  cl_abap_char_utilities=>cr_lf.
*    transfer line_fich  to p_clpath.



    LOOP AT i_data_wf ASSIGNING <wa_data>.
**********************************************************************
*** Criação do ficheiro
**********************************************************************
      CLEAR line_fich.
      line_fich = <wa_data>.
*      CONCATENATE line_fich cL_ABAP_ChaR_UTILITIES=>NEWLINE into line_fich.
      TRANSFER line_fich  TO p_clpath.
**********************************************************************
**********************************************************************
**** New line
*clear line_fich.
*line_fich =  cl_abap_char_utilities=>cr_lf.
*    transfer line_fich  to p_clpath.
**********************************************************************
    ENDLOOP.
    CLOSE DATASET p_clpath.

  ELSE.
*    converter i_header i_data_header.

    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        filename = path
        codepage = '4110'
      TABLES
        data_tab = i_data_header.

    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        filename = path
        codepage = '4110'
        append   = 'X'
      TABLES
        data_tab = i_data_wf.

  ENDIF.


ENDFORM.
