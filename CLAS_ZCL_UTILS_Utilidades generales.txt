
class ZCL_UTILS definition
  public
  create public .

public section.

  interfaces ZIF_MSG_UTILS
      data values _C_CL_MSGID_LABEL = 'ZCL_UTILS'
                  _C_CL_MSGID_LABEL_STATIC = 'ZCL_UTILS' .

  methods CONSTRUCTOR .
  methods CHECK_IF_STRING_IS_NUMERIC
    importing
      !I_VALUE type STRING
    returning
      value(E_NUMERIC) type BOOLEAN .
  methods SHOW_PROGRESS
    importing
      !I_CURRENT_LINE type I
      !I_TOTAL_LINES type I .
  class-methods S_LAUNCH_POPUP_VALUES
    importing
      !I_TITLE type STRING
      !I_T_FIELDS type TY_SVAL
    returning
      value(R_T_VALUES) type TY_SVAL .
protected section.
private section.
endclass. "ZCL_UTILS definition
class ZCL_UTILS implementation.
  METHOD CHECK_IF_STRING_IS_NUMERIC.

    IF ( i_value IS NOT INITIAL ).

      IF ( i_value CO '0123456789' ).
        e_numeric = abap_true.
      ELSE.
        e_numeric = abap_false.
      ENDIF.

    ENDIF.

  ENDMETHOD.
  METHOD CONSTRUCTOR.

    me->zif_msg_utils~_c_cl_msgid_label = 'ZCL_UTILS'.

  ENDMETHOD.
METHOD s_launch_popup_values.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

****** IMPORT DATA

  CHECK lines( i_t_fields ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

****** PREPARE DATA

  MOVE-CORRESPONDING i_t_fields[] TO r_t_values[].

****** CALL POPUP

  CALL FUNCTION 'POPUP_GET_VALUES'
    EXPORTING
      popup_title     = i_title
    TABLES
      fields          = r_t_values
    EXCEPTIONS
      error_in_fields = 1
      OTHERS          = 2.
  IF sy-subrc <> 0.
    CLEAR r_t_values[].
  ENDIF.

ENDMETHOD.
METHOD show_progress.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_msg    TYPE string,
        lv_per(3) TYPE c.

**********************************************************************
* Lógica
**********************************************************************

** Mensaje

*  MOVE i_percentage TO lv_per.

*  CONCATENATE 'Progreso:' lv_per '%' INTO lv_msg SEPARATED BY space.

** Progreso

  cl_progress_indicator=>progress_indicate(
    EXPORTING
      i_text               = | Líneas procesadas: { i_current_line } de { i_total_lines } |
*      i_msgid              =
*      i_msgno              =
*      i_msgv1              =
*      i_msgv2              =
*      i_msgv3              =
*      i_msgv4              =
      i_processed          = i_current_line
      i_total              = i_total_lines
      i_output_immediately = abap_true
*    IMPORTING
*      e_progress_sent      =
  ).

ENDMETHOD.
METHOD ZIF_MSG_UTILS~LAUNCH_EXCEPTION.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

***** RAISE

  RAISE EXCEPTION TYPE zcx_exception EXPORTING textid = i_textid.

ENDMETHOD.
METHOD zif_msg_utils~s_create_raising_message.

**********************************************************************
* Parámetros locales
**********************************************************************

  FIELD-SYMBOLS: <fs_text> TYPE any.

  DATA: lv_text  TYPE char255,
        lv_attr1 TYPE scx_attrname.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** SYSTEM MESSAGE

  "Intentamos obtener mensaje de sistema
  CALL FUNCTION 'FORMAT_MESSAGE'
    EXPORTING
      id              = i_msgid
      lang            = 'S'
      no              = i_msgno
      v1              = i_msgv1
      v2              = i_msgv2
      v3              = i_msgv3
      v4              = i_msgv4
    IMPORTING
      msg             = lv_text
    EXCEPTIONS
      not_found       = 1
      OTHERS          = 2.

  "Comprobamos si es mensaje de sistema
  CASE sy-subrc.

    WHEN 0. "Encuentra mensaje

      sy-msgty = i_msgty.
      sy-msgid = e_textid-msgid = i_msgid.
      sy-msgno = e_textid-msgno = i_msgno.
      e_textid-attr1 = lv_text.
      MOVE lv_text TO sy-msgv1.

*** MENSAJE CUSTOM

    WHEN 1. "No encuentra mensaje

      sy-msgty = i_msgty.
      sy-msgid = e_textid-msgid = i_msgid.
      sy-msgno = e_textid-msgno = i_msgno.

      "Vemos si se ha informado el texto del mensaje
      IF ( i_message IS NOT INITIAL ). "Se informa

        CLEAR: lv_attr1.
        MOVE i_message TO lv_attr1.

        "Asignamos el texto al FS.
        ASSIGN lv_attr1 TO <fs_text>.

      ELSE. " No se informa el texto del mensaje

        "Buscamos texto de la clase para el mensaje
        CONCATENATE 'TEXT-' i_msgno INTO lv_attr1.

        "Asignamos el texto al FS.
        ASSIGN (lv_attr1) TO <fs_text>.

      ENDIF.

      "Si el FS se ha asignado existe mensaje
      IF ( <fs_text> IS ASSIGNED ).

        "Comprobamos si mensaje tiene texto
        IF ( <fs_text> IS INITIAL ). "Sin texto

          "Lanzamos mensaje genérico
          e_textid-msgno = sy-msgno = '999'.
          e_textid-msgid = sy-msgid = zcl_utils=>zif_msg_utils~_c_cl_msgid_label_static.
          e_textid-attr1 = sy-msgv1 = text-999.
          e_textid-attr2 = sy-msgv2 = space.
          e_textid-attr3 = sy-msgv3 = space.
          e_textid-attr4 = sy-msgv4 = space.

        ELSE. "Se recupera texto

          "Lanzamos mensaje con texto
          e_textid-msgno = sy-msgno = i_msgno.
          e_textid-msgid = sy-msgid = i_msgid.

          MOVE <fs_text> TO lv_text.

          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv1.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv2.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv3.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv4.

          e_textid-attr1 = sy-msgv1 = lv_text.
          e_textid-attr2 = sy-msgv2 = i_msgv1.
          e_textid-attr3 = sy-msgv3 = i_msgv2.
          e_textid-attr4 = sy-msgv4 = i_msgv3.

        ENDIF.

      ELSE. "No se ha asignado

        "Lanzamos mensaje genérico
        e_textid-msgno = sy-msgno = '999'.
        e_textid-msgid = sy-msgid = zcl_utils=>zif_msg_utils~_c_cl_msgid_label_static.
        e_textid-attr1 = sy-msgv1 = text-999.
        e_textid-attr2 = sy-msgv2 = space.
        e_textid-attr3 = sy-msgv3 = space.
        e_textid-attr4 = sy-msgv4 = space.

      ENDIF.

      UNASSIGN <fs_text>.

  ENDCASE.



ENDMETHOD.
METHOD zif_msg_utils~s_generate_bapiret2.

**********************************************************************
* Parámetros locales
**********************************************************************

  FIELD-SYMBOLS: <fs_text> TYPE any.

  DATA: lv_text  TYPE char255,
        lv_attr1 TYPE scx_attrname.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** SYSTEM MESSAGE

  "Intentamos obtener mensaje de sistema
  CALL FUNCTION 'FORMAT_MESSAGE'
    EXPORTING
      id              = i_id
      lang            = 'S'
      no              = i_number
      v1              = i_message_v1
      v2              = i_message_v2
      v3              = i_message_v3
      v4              = i_message_v4
    IMPORTING
      msg             = lv_text
    EXCEPTIONS
      not_found       = 1
      OTHERS          = 2.

  "Comprobamos si es mensaje de sistema
  CASE sy-subrc.

    WHEN 0. "Encuentra mensaje

      sy-msgty = r_bapiret2-type        = i_type.
      sy-msgid = r_bapiret2-id          = i_id.
      sy-msgno = r_bapiret2-number      = i_number.
      sy-msgv1 = r_bapiret2-message_v1  = i_message_v1.
      sy-msgv2 = r_bapiret2-message_v2  = i_message_v2.
      sy-msgv3 = r_bapiret2-message_v3  = i_message_v3.
      sy-msgv4 = r_bapiret2-message_v4  = i_message_v4.
      r_bapiret2-field  = i_field.
      r_bapiret2-log_no = i_log_no.
      r_bapiret2-log_msg_no = i_log_msg_no.
      r_bapiret2-parameter = i_parameter.
      r_bapiret2-row = i_row.
      r_bapiret2-system = i_system.
      r_bapiret2-message = lv_text.
      MOVE lv_text TO sy-msgv1.

*** MENSAJE CUSTOM

    WHEN 1. "No encuentra mensaje

      sy-msgty = r_bapiret2-type       = i_type.
      sy-msgid = r_bapiret2-id         = i_id.
      sy-msgno = r_bapiret2-number     = i_number.
      sy-msgv1 = r_bapiret2-message_v1 = i_message_v1.
      sy-msgv2 = r_bapiret2-message_v2 = i_message_v2.
      sy-msgv3 = r_bapiret2-message_v3 = i_message_v3.
      sy-msgv4 = r_bapiret2-message_v4 = i_message_v4.

      "Vemos si se ha informado el texto del mensaje
      IF ( i_message IS NOT INITIAL ). "Se informa

        CLEAR: lv_attr1.
        MOVE i_message TO lv_attr1.

        "Asignamos el texto al FS.
        ASSIGN lv_attr1 TO <fs_text>.

      ELSE. " No se informa el texto del mensaje

        "Buscamos texto de la clase para el mensaje
        CONCATENATE 'TEXT-' i_number INTO lv_attr1.

        "Asignamos el texto al FS.
        ASSIGN (lv_attr1) TO <fs_text>.

      ENDIF.

      "Si el FS se ha asignado existe mensaje
      IF ( <fs_text> IS ASSIGNED ).

        "Comprobamos si mensaje tiene texto
        IF ( <fs_text> IS INITIAL ). "Sin texto

          "Lanzamos mensaje genérico
          r_bapiret2-number = sy-msgno = '999'.
          r_bapiret2-id     = sy-msgid = zcl_utils=>zif_msg_utils~_c_cl_msgid_label_static.
          r_bapiret2-message = text-999.
          r_bapiret2-message_v1 = sy-msgv1 = i_message_v1.
          r_bapiret2-message_v2 = sy-msgv2 = i_message_v2.
          r_bapiret2-message_v3 = sy-msgv3 = i_message_v3.
          r_bapiret2-message_v4 = sy-msgv4 = i_message_v4.
          r_bapiret2-field  = i_field.
          r_bapiret2-log_no = i_log_no.
          r_bapiret2-log_msg_no = i_log_msg_no.
          r_bapiret2-parameter = i_parameter.
          r_bapiret2-row = i_row.
          r_bapiret2-system = i_system.

        ELSE. "Se recupera texto

          "Lanzamos mensaje con texto
          r_bapiret2-number = sy-msgno = i_number.
          r_bapiret2-id     = sy-msgid = i_id.

          MOVE <fs_text> TO lv_text.

          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_message_v1.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_message_v2.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_message_v3.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_message_v4.

          r_bapiret2-message_v1 = sy-msgv1 = i_message_v1.
          r_bapiret2-message_v2 = sy-msgv2 = i_message_v2.
          r_bapiret2-message_v3 = sy-msgv3 = i_message_v3.
          r_bapiret2-message_v4 = sy-msgv4 = i_message_v4.
          r_bapiret2-message    = lv_text.
          r_bapiret2-field  = i_field.
          r_bapiret2-log_no = i_log_no.
          r_bapiret2-log_msg_no = i_log_msg_no.
          r_bapiret2-parameter = i_parameter.
          r_bapiret2-row = i_row.
          r_bapiret2-system = i_system.

        ENDIF.

      ELSE. "No se ha asignado

        "Lanzamos mensaje genérico
        r_bapiret2-number = sy-msgno = '999'.
        r_bapiret2-id     = sy-msgid = zcl_utils=>zif_msg_utils~_c_cl_msgid_label_static.
        r_bapiret2-message = text-999.
        r_bapiret2-message_v1 = sy-msgv1 = i_message_v1.
        r_bapiret2-message_v2 = sy-msgv2 = i_message_v2.
        r_bapiret2-message_v3 = sy-msgv3 = i_message_v3.
        r_bapiret2-message_v4 = sy-msgv4 = i_message_v4.
        r_bapiret2-field  = i_field.
        r_bapiret2-log_no = i_log_no.
        r_bapiret2-log_msg_no = i_log_msg_no.
        r_bapiret2-parameter = i_parameter.
        r_bapiret2-row = i_row.
        r_bapiret2-system = i_system.

      ENDIF.

      UNASSIGN <fs_text>.

  ENDCASE.



ENDMETHOD.
  METHOD ZIF_MSG_UTILS~S_GENERATE_RAISING_MESSAGE.

    FIELD-SYMBOLS: <fs_text> TYPE any.

    DATA: lv_text  TYPE char255,
          lv_attr1 TYPE scx_attrname.

    "Intentamos obtener mensaje de sistema
    CALL FUNCTION 'FORMAT_MESSAGE'
      EXPORTING
        id              = i_msgid
        lang            = 'S'
        no              = i_msgno
        v1              = i_msgv1
        v2              = i_msgv2
        v3              = i_msgv3
        v4              = i_msgv4
      IMPORTING
        msg             = lv_text
      EXCEPTIONS
        not_found       = 1
        OTHERS          = 2.

    CASE sy-subrc.

      WHEN 0. "Encuentra mensaje

        sy-msgty = i_msgty.
        sy-msgid = e_textid-msgid = i_msgid.
        sy-msgno = e_textid-msgno = i_msgno.
        e_textid-attr1 = lv_text.
        MOVE lv_text TO sy-msgv1.

      WHEN 1. "No encuentra mensaje

        sy-msgty = i_msgty.
        sy-msgid = e_textid-msgid = i_msgid.
        sy-msgno = e_textid-msgno = i_msgno.

        "Vemos si se ha informado el texto del mensaje
        IF ( i_message IS NOT INITIAL ). "Se informa

          CLEAR: lv_attr1.
          MOVE i_message TO lv_attr1.

          "Asignamos el texto al FS.
          ASSIGN lv_attr1 TO <fs_text>.

        ELSE. " No se informa el texto del mensaje

          "Buscamos texto de la clase para el mensaje
          CONCATENATE 'TEXT-' i_msgno INTO lv_attr1.

          "Asignamos el texto al FS.
          ASSIGN (lv_attr1) TO <fs_text>.

        ENDIF.

        "Si el FS se ha asignado existe mensaje
        IF ( <fs_text> IS ASSIGNED ).

          "Comprobamos si mensaje tiene texto
          IF ( <fs_text> IS INITIAL ). "Sin texto

            "Lanzamos mensaje genérico
            e_textid-msgno = sy-msgno = '999'.
            e_textid-msgid = sy-msgid = me->zif_msg_utils~_c_cl_msgid_label.
            e_textid-attr1 = sy-msgv1 = text-999.
            e_textid-attr2 = sy-msgv2 = space.
            e_textid-attr3 = sy-msgv3 = space.
            e_textid-attr4 = sy-msgv4 = space.

          ELSE. "Se recupera texto

            "Lanzamos mensaje con texto
            e_textid-msgno = sy-msgno = i_msgno.
            e_textid-msgid = sy-msgid = i_msgid.

            MOVE <fs_text> TO lv_text.

            REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv1.
            REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv2.
            REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv3.
            REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv4.

            e_textid-attr1 = sy-msgv1 = lv_text.
            e_textid-attr2 = sy-msgv2 = i_msgv1.
            e_textid-attr3 = sy-msgv3 = i_msgv2.
            e_textid-attr4 = sy-msgv4 = i_msgv3.

          ENDIF.

        ELSE. "No se ha asignado

          "Lanzamos mensaje genérico
          e_textid-msgno = sy-msgno = '999'.
          e_textid-msgid = sy-msgid = me->zif_msg_utils~_c_cl_msgid_label.
          e_textid-attr1 = sy-msgv1 = text-999.
          e_textid-attr2 = sy-msgv2 = space.
          e_textid-attr3 = sy-msgv3 = space.
          e_textid-attr4 = sy-msgv4 = space.

        ENDIF.

        UNASSIGN <fs_text>.

    ENDCASE.

  ENDMETHOD.
METHOD zif_msg_utils~s_launch_exception.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

***** RAISE

  RAISE EXCEPTION TYPE zcx_exception EXPORTING textid = i_textid.

ENDMETHOD.
