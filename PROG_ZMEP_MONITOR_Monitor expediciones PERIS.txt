*&---------------------------------------------------------------------*
*& Report  ZSSDD099                                                    *
* GAPSD099 - Programa para cargar nuevas ofertas y precios             *
*----------------------------------------------------------------------*
* Autor : Rodolfo Malea.SEIS                                           *
* Date : 05.12.2023                                                    *
*----------------------------------------------------------------------*
REPORT zmep_monitor.

"""""""""""""""""
" Constantes
"""""""""""""""""
CONSTANTS: cg_operation_borrar   TYPE msgfn VALUE '003',
           cg_operation_modif    TYPE msgfn VALUE '004',
           cg_operation_sust     TYPE msgfn VALUE '005',
           cg_operation_original TYPE msgfn VALUE '009',
           cg_operation_espera   TYPE msgfn VALUE '023',
           cg_operation_enviar   TYPE msgfn VALUE '018'.

CONSTANTS: cg_dynpro_main TYPE sy-dynnr VALUE '0100',
           cg_dynpro_zsto TYPE sy-dynnr VALUE '0110',
           cg_dynpro_ztra TYPE sy-dynnr VALUE '0120'.

*CONSTANTS: cg_knumh_new TYPE a018-knumh VALUE '$000000001'.

CONSTANTS: cg_boton_anyadir    TYPE ui_func VALUE 'ANYADIR',
           cg_boton_transporte TYPE ui_func VALUE 'TRANSPORTE',
           cg_boton_quitar     TYPE ui_func VALUE 'QUITAR'.

*CONSTANTS: cg_doc_type_oferta TYPE vbak-auart VALUE 'ZVA'.

"""""""""""""""""
" Tipos de datos
"""""""""""""""""
TYPES: BEGIN OF st_lin_alv.
         INCLUDE TYPE zmonitor_s_alv.
       TYPES END OF st_lin_alv.



"""""""""""""""""""""""
" Control pestañas
""""""""""""""""""""""
CONSTANTS: BEGIN OF c_c_ficha,
             tab1 LIKE sy-ucomm VALUE 'ZSTO',
             tab2 LIKE sy-ucomm VALUE 'ZTRA',
           END OF c_c_ficha.

CONTROLS:  c_ficha TYPE TABSTRIP.
DATA: BEGIN OF g_c_ficha,
        subscreen   LIKE sy-dynnr,
        prog        LIKE sy-repid VALUE sy-repid,
        pressed_tab LIKE sy-ucomm VALUE c_c_ficha-tab1,
      END OF g_c_ficha.

"""""""""""""""""
" Includes
"""""""""""""""""
INCLUDE zseis_patron_alv.

"""""""""""""""""
" Variables globalres
"""""""""""""""""
*DATA: tg_excel         TYPE zssdd099_t_excel.
*
*DATA rg_excel TYPE REF TO zcl_excel.
TABLES: zmep_trans_cab, zmonitor_s_datos_vta, zmonitor_s_datos_semis.

DATA: vg_matnr TYPE matnr_d.

DATA: wg_trans_cab     TYPE zperis_s_trans_cab,
      vg_ok            TYPE xflag,
      vg_destino_trans TYPE zmep_trans_cab-destino.


"""""""""""""""""
" Pantalla de selección
"""""""""""""""""
PARAMETERS: p_lifnr TYPE lifnr DEFAULT '0000100944',
            p_werks TYPE werks_d DEFAULT '2000',
            p_lgort TYPE lgort_d DEFAULT 'P001'.
SELECT-OPTIONS: s_matnr FOR vg_matnr.
PARAMETERS: p_consu TYPE xflag DEFAULT 'X' AS CHECKBOX.




""""""""""""""""""""""
"Rutinas
""""""""""""""""""""""

*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_initialization.

  vg_ventana_inicial            = cg_dynpro_main.
  vg_no_justif_cols             = ' '.
  vg_alv_protegido_por_defecto  = 'X'.

  PERFORM f_config_dynpro USING  cg_dynpro_main ''  'T01' 'STA_0100' ' ' 'X'.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_zsto 'CC_ALV_ZSTO' 'T11' 'X'.
  PERFORM f_config_subscreen USING  cg_dynpro_main cg_dynpro_ztra 'CC_ALV_ZTRA' 'T12' 'X'.

  "Configuración objeto de bloqueo

  DATA(tl_params_objeto_bloqueo) = VALUE tt_config_params_bloqueo( ( nombre_param = 'NUMTRANSPORTE'
                                                                     nombre_campo = 'WG_TRANS_CAB-NUMTRANSPORTE'
                                                                     es_variable  = 'X' ) ).
  PERFORM f_config_objeto_bloqueo USING 'EZMEP_TRANS_CAB' tl_params_objeto_bloqueo.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CREAR_CATALOGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_catalogo TABLES it_catalogo TYPE lvc_t_fcat USING vp_dynnr.

**  wa_layout-info_fname = 'COLOR'.
**  wa_layout-sel_mode = 'A'.


  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZMONITOR_S_ALV'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_catalogo[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  DELETE it_catalogo WHERE fieldname = 'NUMTRANSPORTE'.
  DELETE it_catalogo WHERE fieldname = 'POSICION'.

  CASE vp_dynnr.
    WHEN cg_dynpro_zsto.
      DELETE it_catalogo WHERE fieldname = 'MENGE_TEORICO'.
      DELETE it_catalogo WHERE fieldname = 'MEINS_TEORICO'.
      DELETE it_catalogo WHERE fieldname = 'MENGE_REAL'.
      DELETE it_catalogo WHERE fieldname = 'MEINS_REAL'.
      DELETE it_catalogo WHERE fieldname = 'TIPO'.
    WHEN cg_dynpro_ztra.
*      DELETE it_catalogo WHERE fieldname = 'MATNR_PT'.
*      DELETE it_catalogo WHERE fieldname = 'MAKTX_PT'.
*      DELETE it_catalogo WHERE fieldname = 'MATNR_SE'.
*      DELETE it_catalogo WHERE fieldname = 'MAKTX_SE'.
      DELETE it_catalogo WHERE fieldname = 'MENGE_NEC_SE'.
      DELETE it_catalogo WHERE fieldname = 'MEINS_NEC_SE'.
      DELETE it_catalogo WHERE fieldname = 'NUMLOTES'.
      DELETE it_catalogo WHERE fieldname = 'KUNNG'.
      DELETE it_catalogo WHERE fieldname = 'VDATU'.
      DELETE it_catalogo WHERE fieldname = 'NAME1'.
      DELETE it_catalogo WHERE fieldname = 'TRATADO'.
      DELETE it_catalogo WHERE fieldname = 'TIPO'.
  ENDCASE.

  LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>).
    CASE <fs_catalogo>-fieldname.
      WHEN 'TRATADO'.
        <fs_catalogo>-checkbox  = 'X'.
*        <fs_catalogo>-outputlen = 10.
*      WHEN 'ESCALAS'.
*        <fs_catalogo>-checkbox  = 'X'.
*        <fs_catalogo>-outputlen = 9.
*      WHEN 'SEMAFORO'.
*        <fs_catalogo>-icon      = 'X'.
*        <fs_catalogo>-outputlen = 6.
*        <fs_catalogo>-col_pos   = 0.
*      WHEN 'MSG_LOG'.
*        <fs_catalogo>-outputlen = 80.
*      WHEN 'PROCESADO'.
*        DELETE it_catalogo. CONTINUE.
*      WHEN 'KSTBM'.
*        IF vp_dynnr = cg_dynpro_ofertas.
*          <fs_catalogo>-col_pos   = 9.
*          <fs_catalogo>-scrtext_s = <fs_catalogo>-scrtext_m = <fs_catalogo>-scrtext_l = 'Cantidad'(002).
*          <fs_catalogo>-coltext = 'Cantidad'(002).
*        ENDIF.
    ENDCASE.
  ENDLOOP.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_PRE_LLENAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_pre_llenar_datos.
  IF p_consu IS NOT INITIAL.
    vg_solo_consulta = 'X'.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  F_LLENAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos TABLES tp_alv TYPE tt_lin_alv_patron USING vp_dynpro.
  DATA: wl_alv         TYPE zmonitor_s_alv,
        tl_transportes TYPE zperis_t_trans_cab.
  DATA(rl_peris_dpc_imp) = NEW zcl_peris_dpc_imp( ).
  CASE vp_dynpro.
    WHEN cg_dynpro_main.

      "
      " Buscar si hay un transporte pendiente.
      "
      CLEAR wg_trans_cab.
      TRY.
          tl_transportes = rl_peris_dpc_imp->trans_cab_getlist( EXPORTING vp_estado = '1' ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR tl_transportes.
      ENDTRY.

      READ TABLE tl_transportes ASSIGNING FIELD-SYMBOL(<fs_transporte>) INDEX 1.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING <fs_transporte> TO wg_trans_cab.
      ELSE.
        "
        " Si no hay, creamos uno nuevo.
        "
        TRY.
            rl_peris_dpc_imp->trans_cab_create( CHANGING wp_trans_cab = wg_trans_cab ).
          CATCH /iwbep/cx_mgw_busi_exception.
            CLEAR wg_trans_cab.
        ENDTRY.

      ENDIF.

    WHEN cg_dynpro_zsto.
      TRY.
          DATA(tl_datos_monitor) =  rl_peris_dpc_imp->monitor_getlist( vp_lifnr = p_lifnr vp_werks = p_werks vp_lgort = p_lgort ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR tl_datos_monitor.
      ENDTRY.

      LOOP AT tl_datos_monitor ASSIGNING FIELD-SYMBOL(<fs_datos>).
        MOVE-CORRESPONDING <fs_datos> TO wl_alv.
        PERFORM f_append_dato  TABLES   tp_alv  USING wl_alv.
      ENDLOOP.
    WHEN cg_dynpro_ztra.
      TRY.
          DATA(tl_posiciones) = rl_peris_dpc_imp->trans_pos_getlist( wg_trans_cab-numtransporte ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CLEAR tl_posiciones.
      ENDTRY.
      LOOP AT tl_posiciones ASSIGNING FIELD-SYMBOL(<fs_posicion>).
        MOVE-CORRESPONDING <fs_posicion> TO wl_alv.
        PERFORM f_append_dato  TABLES   tp_alv  USING wl_alv.
      ENDLOOP.
  ENDCASE.

ENDFORM.


MODULE c_ficha_active_tab_set OUTPUT.
  c_ficha-activetab = g_c_ficha-pressed_tab.
  CASE g_c_ficha-pressed_tab.
    WHEN c_c_ficha-tab1.
      g_c_ficha-subscreen = cg_dynpro_zsto.
    WHEN c_c_ficha-tab2.
      g_c_ficha-subscreen = cg_dynpro_ztra.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

MODULE c_ficha_active_tab_get INPUT.
  okcode = sy-ucomm.
  CASE okcode.
    WHEN c_c_ficha-tab1.
      g_c_ficha-pressed_tab = c_c_ficha-tab1.
    WHEN c_c_ficha-tab2.
      g_c_ficha-pressed_tab = c_c_ficha-tab2.
    WHEN OTHERS.
  ENDCASE.


ENDMODULE.
**&---------------------------------------------------------------------*
**&      Form  f_handle_toolbar
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_OBJECT       text
**      -->P_INTERACTIVE  text
**----------------------------------------------------------------------*
FORM f_handle_toolbar USING vp_dynpro rp_object TYPE REF TO cl_alv_event_toolbar_set  p_interactive.
  DATA: wl_toolbar  TYPE stb_button,
        vl_function LIKE wl_toolbar-function.

  CASE vp_dynpro.
    WHEN cg_dynpro_zsto.
      DELETE rp_object->mt_toolbar WHERE function = '&LOCAL&INSERT_ROW'.
      DELETE rp_object->mt_toolbar WHERE function = 'BORRAR_FILA'.

      IF vg_solo_consulta IS INITIAL.

        "Separador
        CLEAR wl_toolbar.
        wl_toolbar-butn_type = 3.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

        CLEAR wl_toolbar.
        wl_toolbar-function   = cg_boton_anyadir.
        wl_toolbar-quickinfo = 'Añadir a picking'(003).
        wl_toolbar-text       = 'Añadir a picking'(003).
        wl_toolbar-disabled   = ' '.
        wl_toolbar-icon =  icon_ws_start_whse_proc_foregr.
        APPEND wl_toolbar TO rp_object->mt_toolbar.
      ENDIF.
    WHEN cg_dynpro_ztra.
      DELETE rp_object->mt_toolbar WHERE function = '&LOCAL&INSERT_ROW'.
      DELETE rp_object->mt_toolbar WHERE function = 'BORRAR_FILA'.
      IF vg_solo_consulta IS INITIAL.
        "Separador
        CLEAR wl_toolbar.
        wl_toolbar-butn_type = 3.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

        CLEAR wl_toolbar.
        wl_toolbar-function   = cg_boton_quitar.
        wl_toolbar-quickinfo = 'Quitar del transporte'(006).
        wl_toolbar-text       = 'Quitar del transporte'(006).
        wl_toolbar-disabled   = ' '.
        wl_toolbar-icon =  icon_delete_row.
        APPEND wl_toolbar TO rp_object->mt_toolbar.

        CLEAR wl_toolbar.
        wl_toolbar-function   = cg_boton_transporte.
        wl_toolbar-quickinfo = 'Crear transporte'(005).
        wl_toolbar-text       = 'Crear transporte'(004).
        wl_toolbar-disabled   = ' '.
        wl_toolbar-icon =  icon_ws_truck.
        APPEND wl_toolbar TO rp_object->mt_toolbar.
      ENDIF.

    WHEN OTHERS.
  ENDCASE.
ENDFORM.                    "f_handle_toolbar
*&---------------------------------------------------------------------*
*&      Form  f_handle_user_command
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->E_UCOMM    text
*----------------------------------------------------------------------*
FORM f_handle_user_command USING e_ucomm.
  DATA: vl_error      TYPE xfeld,
        vl_num_lineas TYPE i.
  DATA: tl_index_rows TYPE lvc_t_row,
        wl_index_rows LIKE LINE OF tl_index_rows.

  DATA wl_trans_pos TYPE zperis_s_trans_pos.
  DATA(rl_peris_dpc_imp) = NEW zcl_peris_dpc_imp( ).

  DATA: vl_texto  TYPE text60,
        vl_answer TYPE char1.

  CASE e_ucomm.
    WHEN cg_boton_anyadir.

      READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = cg_dynpro_zsto.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES vl_num_lineas.
      IF vl_num_lineas = 0.
******        MESSAGE s285 DISPLAY LIKE 'I'.
        MESSAGE 'Debe seleccionar al menos una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
      READ TABLE <fs_config_subscreen>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv>) INDEX wl_index_rows-index.

      "
      " Validaciones previas. No seleccionar a la vez SEMIS con PTs
      " No permitir seleccionar varios pedidos de venta a la vez.
      " No permitir seleccionar registros con pedidos de venta y sin pedidos de venta.
      "
      DATA: vl_con_pv      TYPE xflag,
            vl_sin_pv      TYPE xflag,
            vl_vbeln       TYPE text20,
            vl_vbeln_tmp   LIKE vl_vbeln,
            vl_mas_1pedido TYPE xflag.

      CLEAR: vl_con_pv, vl_sin_pv, vl_vbeln, vl_mas_1pedido, vl_error.
      LOOP AT tl_index_rows INTO wl_index_rows.
        READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
        IF <fs_alv>-tratado IS NOT INITIAL.
          MESSAGE 'La posición ya está añadida al transporte.' TYPE 'I' DISPLAY LIKE 'E'.
          vl_error = 'X'.
          EXIT.
        ENDIF.

        IF <fs_alv>-vbeln IS NOT INITIAL.
          vl_con_pv = 'X'.
        ELSE.
          vl_sin_pv = 'X'.
        ENDIF.
        IF <fs_alv>-vbeln IS NOT INITIAL.
          CONCATENATE <fs_alv>-vbeln <fs_alv>-posnr INTO vl_vbeln_tmp.
          IF vl_vbeln IS INITIAL.
            vl_vbeln = vl_vbeln_tmp.
          ENDIF.
          IF vl_vbeln <> vl_vbeln_tmp.
            vl_mas_1pedido = 'X'.
          ENDIF.
        ENDIF.
      ENDLOOP.

      IF vl_con_pv IS NOT INITIAL AND vl_sin_pv IS NOT INITIAL.
        MESSAGE 'No puede seleccionar estos registros a la vez. Posiciones con pedidos venta y sin.' TYPE 'I' DISPLAY LIKE 'E'.
        vl_error = 'X'.
        EXIT.
      ENDIF.
      IF vl_mas_1pedido IS NOT INITIAL.
        MESSAGE 'No puede seleccionar varios pedidos de venta a la vez.' TYPE 'I' DISPLAY LIKE 'E'.
        vl_error = 'X'.
        EXIT.
      ENDIF.

      "
      " Comprobar que no hay más posiciones en el alv del pedido seleccionado sin seleccionar.
      "
      DATA vl_indice LIKE sy-index.
      IF vl_vbeln IS NOT INITIAL.
        LOOP AT <fs_config_subscreen>-tabla ASSIGNING <fs_alv>.
          vl_indice = sy-tabix.
          CONCATENATE <fs_alv>-vbeln <fs_alv>-posnr INTO vl_vbeln_tmp.
          READ TABLE tl_index_rows INTO wl_index_rows WITH KEY index = vl_indice.
          IF sy-subrc <> 0 AND vl_vbeln_tmp = vl_vbeln.
            MESSAGE 'Debe seleccionar todas las posiciones del pedido.' TYPE 'I' DISPLAY LIKE 'E'.
            vl_error = 'X'.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.

      CHECK vl_error IS INITIAL.

      IF vl_con_pv IS NOT INITIAL.
        DATA vl_num_semi TYPE i.

        CLEAR zmonitor_s_datos_semis.

        CLEAR vl_num_semi.
        LOOP AT tl_index_rows INTO wl_index_rows.
          READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
          IF sy-subrc = 0.
            ADD 1 TO vl_num_semi.
            zmonitor_s_datos_semis-vbeln = <fs_alv>-vbeln.
            zmonitor_s_datos_semis-posnr = <fs_alv>-posnr.
            zmonitor_s_datos_semis-matnr_pt = <fs_alv>-matnr_pt.
            zmonitor_s_datos_semis-maktx_pt = <fs_alv>-maktx_pt.
            zmonitor_s_datos_semis-kwmeng = <fs_alv>-kwmeng.
            zmonitor_s_datos_semis-vrkme = <fs_alv>-vrkme.
            IF vl_num_semi = 1.
              zmonitor_s_datos_semis-matnr_se_1  = <fs_alv>-matnr_se.
              zmonitor_s_datos_semis-maktx_se_1 = <fs_alv>-maktx_se.
              zmonitor_s_datos_semis-teorico_se_1 = <fs_alv>-menge_teorico.
              zmonitor_s_datos_semis-real_se_1 = 0.
              zmonitor_s_datos_semis-stock_se_1 = <fs_alv>-stock.
              zmonitor_s_datos_semis-nec_otros_se_1 = <fs_alv>-menge_nec_se.
            ENDIF.
            IF vl_num_semi = 2.
              zmonitor_s_datos_semis-matnr_se_2  = <fs_alv>-matnr_se.
              zmonitor_s_datos_semis-maktx_se_2 = <fs_alv>-maktx_se.
              zmonitor_s_datos_semis-teorico_se_2 = <fs_alv>-menge_teorico.
              zmonitor_s_datos_semis-real_se_2 = 0.
              zmonitor_s_datos_semis-stock_se_2 = <fs_alv>-stock.
              zmonitor_s_datos_semis-nec_otros_se_2 = <fs_alv>-menge_nec_se.
            ENDIF.
          ENDIF.
        ENDLOOP.
        CALL SCREEN 9001 STARTING AT 5 5.
      ELSE.
        CLEAR zmonitor_s_datos_vta.
        CALL SCREEN 9002 STARTING AT 10 5.
      ENDIF.
      CHECK vg_ok IS NOT INITIAL.

      LOOP AT tl_index_rows INTO wl_index_rows.
        READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
        IF sy-subrc = 0.
          CLEAR wl_trans_pos.
          MOVE-CORRESPONDING <fs_alv> TO wl_trans_pos.
          wl_trans_pos-numtransporte = wg_trans_cab-numtransporte.
          IF wl_trans_pos-matnr_se = zmonitor_s_datos_semis-matnr_se_1.
            wl_trans_pos-menge_real = zmonitor_s_datos_semis-real_se_1.
          ENDIF.
          IF wl_trans_pos-matnr_se = zmonitor_s_datos_semis-matnr_se_2.
            wl_trans_pos-menge_real = zmonitor_s_datos_semis-real_se_2.
          ENDIF.
          TRY.

              rl_peris_dpc_imp->trans_pos_create( CHANGING wp_trans_pos = wl_trans_pos ).

            CATCH /iwbep/cx_mgw_busi_exception.
              MESSAGE 'Error al añadir posición al transporte' TYPE 'I' DISPLAY LIKE 'E'.
              EXIT.
          ENDTRY.
        ENDIF.
      ENDLOOP.
      MESSAGE 'Posiciones añadidas al transporte' TYPE 'I' DISPLAY LIKE 'I'.
      PERFORM f_refresh_alvs.

      " Navego a la pestaña de transporte.
      CALL METHOD cl_gui_cfw=>set_new_ok_code( c_c_ficha-tab2 ).
      CALL METHOD cl_gui_cfw=>flush.



    WHEN cg_boton_quitar.

      READ TABLE tg_config_subscreen ASSIGNING <fs_config_subscreen> WITH KEY subscreen = cg_dynpro_ztra.
      CHECK sy-subrc = 0.

      CALL METHOD <fs_config_subscreen>-alv->get_selected_rows
        IMPORTING
          et_index_rows = tl_index_rows.
      DESCRIBE TABLE tl_index_rows LINES vl_num_lineas.
      IF vl_num_lineas = 0.
        MESSAGE 'Debe seleccionar al menos una fila' TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
*      READ TABLE tl_index_rows INTO wl_index_rows INDEX 1.
*      READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

      CLEAR: vl_con_pv, vl_sin_pv, vl_vbeln, vl_mas_1pedido, vl_error.
      LOOP AT tl_index_rows INTO wl_index_rows.
        READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.

        IF <fs_alv>-vbeln IS NOT INITIAL.
          vl_con_pv = 'X'.
        ELSE.
          vl_sin_pv = 'X'.
        ENDIF.
        IF <fs_alv>-vbeln IS NOT INITIAL.
          CONCATENATE <fs_alv>-vbeln <fs_alv>-posnr INTO vl_vbeln_tmp.
          IF vl_vbeln IS INITIAL.
            vl_vbeln = vl_vbeln_tmp.
          ENDIF.
          IF vl_vbeln <> vl_vbeln_tmp.
            vl_mas_1pedido = 'X'.
          ENDIF.
        ENDIF.
      ENDLOOP.

      IF vl_con_pv IS NOT INITIAL AND vl_sin_pv IS NOT INITIAL.
        MESSAGE 'No puede seleccionar estos registros a la vez. Posiciones con pedidos venta y sin.' TYPE 'I' DISPLAY LIKE 'E'.
        vl_error = 'X'.
        EXIT.
      ENDIF.
      IF vl_mas_1pedido IS NOT INITIAL.
        MESSAGE 'No puede seleccionar varios pedidos de venta a la vez.' TYPE 'I' DISPLAY LIKE 'E'.
        vl_error = 'X'.
        EXIT.
      ENDIF.

      "
      " Comprobar que no hay más posiciones en el alv del pedido seleccionado sin seleccionar.
      "
      IF vl_vbeln IS NOT INITIAL.
        LOOP AT <fs_config_subscreen>-tabla ASSIGNING <fs_alv>.
          vl_indice = sy-tabix.
          CONCATENATE <fs_alv>-vbeln <fs_alv>-posnr INTO vl_vbeln_tmp.
          READ TABLE tl_index_rows INTO wl_index_rows WITH KEY index = vl_indice.
          IF sy-subrc <> 0 AND vl_vbeln_tmp = vl_vbeln.
            MESSAGE 'Debe seleccionar todas las posiciones del pedido.' TYPE 'I' DISPLAY LIKE 'E'.
            vl_error = 'X'.
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.

      CHECK vl_error IS INITIAL.

      vl_texto = '¿Desea quitar el registro del transporte?'.
      CLEAR vl_answer.
      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          text_question  = vl_texto
        IMPORTING
          answer         = vl_answer
        EXCEPTIONS
          text_not_found = 1
          OTHERS         = 2.
      CHECK vl_answer = '1'.

      LOOP AT tl_index_rows INTO wl_index_rows.
        READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX wl_index_rows-index.
        IF sy-subrc = 0.
          CLEAR wl_trans_pos.
          MOVE-CORRESPONDING <fs_alv> TO wl_trans_pos.
          TRY.
              rl_peris_dpc_imp->trans_pos_delete( wl_trans_pos ).

            CATCH /iwbep/cx_mgw_busi_exception.
              MESSAGE 'Error al liminar la posición del transporte' TYPE 'I' DISPLAY LIKE 'E'.
              EXIT.
          ENDTRY.
        ENDIF.
      ENDLOOP.
      PERFORM f_refresh_alvs.


    WHEN cg_boton_transporte.

      CALL SCREEN 9000 STARTING AT 10 5.

      CHECK vg_ok IS NOT INITIAL.
      TRY.
          rl_peris_dpc_imp->procesar_transporte( wg_trans_cab-numtransporte ).
        CATCH /iwbep/cx_mgw_busi_exception.
          MESSAGE 'Error al procesar el transporte. Revise log.' TYPE 'I' DISPLAY LIKE 'E'.
          EXIT.
      ENDTRY.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  user_command_popup
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->R_UCOMM      text
*      -->RS_SELFIELD  text
*----------------------------------------------------------------------*
FORM user_command_popup USING r_ucomm LIKE sy-ucomm
                              rs_selfield TYPE slis_selfield.

*  CASE r_ucomm.
*    WHEN '&ONT'.
*      DATA: gd_repid LIKE sy-repid, "Exists
*            ref_grid TYPE REF TO cl_gui_alv_grid.
*      IF ref_grid IS INITIAL.
*        CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
*          IMPORTING
*            e_grid = ref_grid.
*      ENDIF.
*      IF NOT ref_grid IS INITIAL.
*        CALL METHOD ref_grid->check_changed_data .
*      ENDIF.
*  ENDCASE.


*(SAPLSLVC_FULLSCREEN)GT_GRID-GRID
ENDFORM.                    "USER_COMMAND
*&---------------------------------------------------------------------*
*&      Module  STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9000 OUTPUT.
  SET PF-STATUS 'STA_9000'.
  SET TITLEBAR 'T90'.

  CLEAR vg_ok.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9000 INPUT.

  CASE okcode.
    WHEN 'OK'.
      vg_ok = 'X'.
    WHEN OTHERS.

  ENDCASE.
  LEAVE TO SCREEN 0.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_9001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9001 OUTPUT.
  SET PF-STATUS 'STA_9001'.
  SET TITLEBAR 'T91'.

  CLEAR vg_ok.

  CLEAR okcode.

  LOOP AT SCREEN.
    IF screen-group1 = 'SE2' AND zmonitor_s_datos_semis-matnr_se_2 IS INITIAL.
      screen-invisible = 1.
      screen-active = 0.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9001 INPUT.
  DATA: vl_error TYPE xflag.

  CLEAR vl_error.

  CASE okcode.
    WHEN 'OK' OR space.
      vg_ok = 'X'.

      IF ( zmonitor_s_datos_semis-matnr_se_1 IS NOT INITIAL AND
           zmonitor_s_datos_semis-real_se_1 IS INITIAL ) OR
         ( zmonitor_s_datos_semis-matnr_se_2 IS NOT INITIAL AND
           zmonitor_s_datos_semis-real_se_2 IS INITIAL ).
        vl_error = 'X'.
        MESSAGE 'Debe indicar cantidad real.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.
    WHEN OTHERS.

  ENDCASE.
  IF vl_error IS INITIAL.
    LEAVE TO SCREEN 0.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_9002  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9002 OUTPUT.
  SET PF-STATUS 'STA_9002'.
  SET TITLEBAR 'T92'.

  CLEAR vg_ok.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9002  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9002 INPUT.
  CASE okcode.
    WHEN 'OK'.
      vg_ok = 'X'.
    WHEN OTHERS.

  ENDCASE.
  LEAVE TO SCREEN 0.
ENDMODULE.
FORM f_refresh_alvs.
  LOOP AT tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WHERE dynpro = cg_dynpro_main.
    " Recargar datos
    CLEAR <fs_config_subscreen>-tabla.
    PERFORM f_llenar_datos TABLES <fs_config_subscreen>-tabla USING <fs_config_subscreen>-subscreen.
    " Refrescar ALV
    IF <fs_config_subscreen>-alv IS NOT INITIAL.
      CALL METHOD <fs_config_subscreen>-alv->refresh_table_display.
    ENDIF.
  ENDLOOP.
ENDFORM.
