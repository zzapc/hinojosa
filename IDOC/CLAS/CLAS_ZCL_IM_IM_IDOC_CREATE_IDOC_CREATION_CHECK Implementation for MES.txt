
class ZCL_IM_IM_IDOC_CREATE definition
  public
  final
  create public .

public section.

  interfaces IF_EX_IDOC_CREATION_CHECK .
protected section.
private section.

  constants GC_MESTYP_MATMAS type EDI_MESTYP value 'MATMAS' ##NO_TEXT.
  constants GC_MESTYP_WMMBXY type EDI_MESTYP value 'WMMBXY' ##NO_TEXT.
  constants GC_DIRECT_OUT type EDI_DIRECT value '1' ##NO_TEXT.
  constants GC_DIRECT_IN type EDI_DIRECT value '2' ##NO_TEXT.

  methods IDOC_DATA_CHECK_OUT
    importing
      value(IDOC_CONTROL) type EDIDC
      value(IDOC_DATA) type EDIDD_TT
    changing
      value(CREATE_IDOC) type C optional .
  methods IDOC_DATA_CHECK_OUT_WMMBXY
    importing
      value(IDOC_CONTROL) type EDIDC
      value(IDOC_DATA) type EDIDD_TT
    changing
      value(CREATE_IDOC) type C optional .
  methods IDOC_DATA_CHECK_OUT_MATMAS
    importing
      value(IDOC_CONTROL) type EDIDC
      value(IDOC_DATA) type EDIDD_TT
    changing
      value(CREATE_IDOC) type C optional .
endclass. "ZCL_IM_IM_IDOC_CREATE definition
class ZCL_IM_IM_IDOC_CREATE implementation.
  METHOD idoc_data_check_out.


    CASE idoc_control-mestyp.
      WHEN gc_mestyp_WMMBXY.
        idoc_data_check_out_WMMBXY( EXPORTING idoc_control = idoc_control
                                              idoc_data    = idoc_data
                                    CHANGING create_idoc  = create_idoc ).

*     WHEN gc_mestyp_MATMAS.
*        idoc_data_check_out_MATMAS( EXPORTING idoc_control = idoc_control
*                                              idoc_data    = idoc_data
*                                    CHANGING create_idoc  = create_idoc ).


      WHEN OTHERS.
*       Do nothing
    ENDCASE.


  ENDMETHOD.
  METHOD idoc_data_check_out_matmas.
    DATA: ls_e1maram TYPE e1maram,
          ls_e1marcm TYPE e1marcm.

    FIELD-SYMBOLS:
      <fs_idoc_data>   TYPE edidd,
      <fs_idoc_data_1> TYPE edidd.


*   verificamos que el material es del tipo de material y grupo de artículos
*   adecuado para que se genere el idoc.
    READ TABLE idoc_data ASSIGNING <fs_idoc_data> WITH KEY segnam = 'E1MARAM'.
    IF sy-subrc = 0.
      ls_e1maram  = <fs_idoc_data>-sdata.

      IF ls_e1maram-mtart IS NOT INITIAL AND ls_e1maram-matkl IS NOT INITIAL.

        LOOP AT idoc_data ASSIGNING <fs_idoc_data_1> WHERE segnam = 'E1MARCM'.

          ls_e1marcm  = <fs_idoc_data_1>-sdata.

          SELECT SINGLE werks FROM ztmes_centros
            INTO @DATA(lv_werks)
            WHERE werks = @ls_e1marcm-werks.

          IF sy-subrc = 0.
            SELECT SINGLE * FROM ztmes_matmas
              INTO @DATA(wa_ztmatmas)
              WHERE werks = @ls_e1marcm-werks AND
                    mtart = @ls_e1maram-mtart AND
                    matkl = @ls_e1maram-matkl.

            IF sy-subrc <> 0.
              CLEAR create_idoc.
*              DELETE idoc_data WHERE docnum = <fs_idoc_data_1>-docnum AND
*                                     segnum = <fs_idoc_data_1>-segnum AND
*                                     segnam = <fs_idoc_data_1>-segnam AND
*                                     psgnum = <fs_idoc_data_1>-psgnum AND
*                                     hlevel = <fs_idoc_data_1>-hlevel AND
*                                     dtint2 = <fs_idoc_data_1>-dtint2.
            ELSE.
*             verificamos si se ha cambiado la descripción del material, tipo de material, grupo de artículos o unidad de media.
*              U  Actualización
*              I  Insertar
*              E  Borrar (documentación campo individual)
*              D  Borrar
*              J  Insertar (documentación campo individual)

              SELECT * FROM cdhdr
                INTO TABLE @DATA(t_cdhr)
                WHERE objectclas = 'MATERIAL' AND
                      objectid = @ls_e1maram-matnr AND
                      udate = @sy-datum.


              SORT t_cdhr BY udate utime DESCENDING.
              READ TABLE t_cdhr INTO DATA(wa_cdhr) INDEX 1.

              SELECT SINGLE * FROM cdpos
                INTO @DATA(wa_cdpos)
                WHERE objectclas = @wa_cdhr-objectclas AND
                      objectid = @wa_cdhr-objectid AND
                      changenr = @wa_cdhr-changenr AND
                      tabname = 'MARA' AND
                      ( fname = 'MAKTX' OR fname = 'MATKL' OR fname = 'MTART' OR fname = 'GEWEI' ).

              IF sy-subrc = 0.
                CASE wa_cdhr-change_ind.
                  WHEN 'E' OR 'D'. "Borrar
                    "SIEMPRE MANDAMOS EL IDCO
                  WHEN 'U'. "Actualización - SOLO MANDAMOS EL IDOC SI SE HA MODIFICADO LOS CAMPOS INDICADOS EN LAS ESPECIFICACIONES.
                    CLEAR create_idoc.
                  WHEN 'I' OR 'J'. "  Insertar
                    CLEAR create_idoc.
                ENDCASE.
              ENDIF.
            ENDIF.

            IF <fs_idoc_data> IS NOT INITIAL.
              UNASSIGN <fs_idoc_data>.
            ENDIF.
          ENDIF.
        ENDLOOP.

        IF <fs_idoc_data_1> IS NOT INITIAL.
          UNASSIGN <fs_idoc_data_1>.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD idoc_data_check_out_wmmbxy.

    DATA: ls_e1mbxyi TYPE e1mbxyi,
          lv_matnr   TYPE matnr,
          lv_mtart   TYPE mara-mtart,
          lv_matkl   TYPE mara-matkl.

    FIELD-SYMBOLS:
      <fs_idoc_data>     TYPE edidd.

*   verificamos que el material es del tipo de material y grupo de artículos
*   adecuado para que se genere el idoc.
    READ TABLE idoc_data ASSIGNING <fs_idoc_data> WITH KEY segnam = 'E1MBXYI'.
    IF sy-subrc = 0.
      ls_e1mbxyi  = <fs_idoc_data>-sdata.

      SELECT SINGLE werks FROM ztmes_centros
                  INTO @DATA(lv_werks)
                  WHERE werks = @ls_e1mbxyi-werks.

      IF sy-subrc = 0.
        IF ls_e1mbxyi-matnr IS NOT INITIAL.

          CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
            EXPORTING
              input        = ls_e1mbxyi-matnr
            IMPORTING
              output       = lv_matnr
            EXCEPTIONS
              length_error = 1
              OTHERS       = 2.


          SELECT SINGLE mtart matkl FROM mara
            INTO (lv_mtart, lv_matkl)
            WHERE matnr = lv_matnr.

          IF sy-subrc = 0.
            SELECT SINGLE * FROM ztmes_matprima
              INTO @DATA(wa_lote_matprima)
              WHERE werks = @ls_e1mbxyi-werks AND
                    mtart = @lv_mtart AND
                    matkl = @lv_matkl.

            IF sy-subrc <> 0.
              CLEAR create_idoc.
            ENDIF.
            UNASSIGN <fs_idoc_data>.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.
  METHOD if_ex_idoc_creation_check~idoc_data_check.
    CASE idoc_control-direct.
*     Outbound IDOCS
      WHEN gc_direct_out.
        idoc_data_check_out( EXPORTING idoc_control = idoc_control
                                       idoc_data    = idoc_data
                              CHANGING create_idoc  = create_idoc ).
      WHEN gc_direct_in.
*     Inbound IDOCS

      WHEN OTHERS.
*       Do nothing
    ENDCASE.

  ENDMETHOD.
