*&---------------------------------------------------------------------*
*&  Include           ZSSD_IDOC_ORDER_F01
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
FORM get_data .

  SELECT * INTO TABLE gt_data FROM vbak
    WHERE vbeln IN s_vbeln
      AND vkorg IN s_vkorg
      AND vtweg IN s_vtweg
      AND spart IN s_spart
      AND kunnr IN s_kunnr.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PROCESS
*&---------------------------------------------------------------------*
FORM process .

  CONSTANTS: c_edi_extern   TYPE edi_rcvpor VALUE 'SALESFORCE', "ZHPP_01',
             c_rcvprn       TYPE edi_rcvprn VALUE 'SALESFORCE', "'ZHPPCLNT100',
             c_ls_d         TYPE edi_rcvprt VALUE 'LS',
             c_ls_r         TYPE edi_sndprt VALUE 'LS',
             c_zmsg         TYPE edi_mestyp VALUE 'ZPRECIOS_P01',
             c_zstpm_orders TYPE edi_idoctp VALUE 'ZPRECIOS_P01',
             c_precio       TYPE segname VALUE 'ZPRECIOS_SALESFORCE',
             c_precio_esc   TYPE segname VALUE 'ZPRECIOS_SALESFORCE_ESC'.

  DATA: ls_idoc_header       TYPE edidc,
        lt_idoc_comm_control TYPE TABLE OF edidc,
        ls_idoc_comm_control TYPE edidc,
        lt_return            TYPE bapiret2_t,
        tt_return            TYPE bapiret2_t,
        ls_return            TYPE bapiret2,
        ls_return1           TYPE bapiret1,
        t_edidd              TYPE edidd_tt,
        t_edidd_aux          TYPE edidd_tt.

  DATA: p_gt_data      TYPE TABLE OF vbak.

  IF sy-batch IS NOT INITIAL.

    p_gt_data = gt_data.
  ELSE.

    PERFORM filas_seleccionadas USING alv
                              CHANGING p_gt_data.

  ENDIF.

  DATA(l_cont) = lines( p_gt_data ).

  LOOP AT p_gt_data INTO DATA(l_data).

    CALL FUNCTION 'ZSSD_IDOC_SALES_ORDER'
      EXPORTING
        i_vbeln   = l_data-vbeln    " Número de documento comercial
        i_trtyp   = 'S'    " Tipo de transacción
      IMPORTING
        et_return = lt_return.    " Tabla retorno

*    COMMIT WORK AND WAIT.
        call FUNCTION 'DB_COMMIT'.
        CALL FUNCTION 'DEQUEUE_ALL'.


    APPEND LINES OF lt_return TO tt_return.

  ENDLOOP.

  cl_rmsl_message=>display( tt_return ).


  IF sy-batch IS INITIAL.
    MESSAGE s398(00) WITH l_cont 'IDOCs creados correctamente' space space.
  ENDIF.
*  COMMIT WORK.
  COMMIT WORK AND WAIT.




ENDFORM.

*&---------------------------------------------------------------------*
*& Form LOAD_DATA_INTO_GRID
*&---------------------------------------------------------------------*
FORM load_data_into_grid TABLES tabla       TYPE STANDARD TABLE
                         USING contenedor  TYPE REF TO cl_gui_custom_container
                               nombre_cont TYPE        scrfname
                               variant     LIKE        disvariant
                               estruc      LIKE        dd02l-tabname
                     CHANGING  alv         TYPE REF TO cl_gui_alv_grid
                               layout      TYPE        lvc_s_layo
                               it_fieldcat TYPE        lvc_t_fcat
                               excludin    TYPE        ui_functions.

  IF alv IS INITIAL.
    IF cl_gui_alv_grid=>offline( ) IS INITIAL.

      "CREATE OBJECT eventos.

      CREATE OBJECT contenedor
        EXPORTING
          container_name = nombre_cont
        EXCEPTIONS
          OTHERS         = 1.

      CREATE OBJECT alv
        EXPORTING
          i_parent = contenedor
        EXCEPTIONS
          OTHERS   = 1.

      CALL METHOD alv->register_edit_event
        EXPORTING
          i_event_id = cl_gui_alv_grid=>mc_evt_modified
        EXCEPTIONS
          error      = 1
          OTHERS     = 2.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

    ELSE.

*      CREATE OBJECT alv
*        EXPORTING
*          i_parent = or_doc.

    ENDIF.

    PERFORM preparefieldcatalog USING    estruc
                                CHANGING it_fieldcat.

    PERFORM preparelayout       CHANGING layout.
    PERFORM rellenar_toolbar    CHANGING excludin.


    CALL METHOD alv->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

    CALL METHOD alv->set_table_for_first_display
      EXPORTING
        is_variant           = variant
        i_save               = 'A'
        is_layout            = layout
        it_toolbar_excluding = excludin
      CHANGING
        it_outtab            = tabla[]
        it_fieldcatalog      = it_fieldcat
      EXCEPTIONS
        OTHERS               = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ELSE.

    CALL METHOD alv->refresh_table_display
      EXPORTING
        is_stable = gs_stable.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form PREPAREFIELDCATALOG
*&---------------------------------------------------------------------*
FORM preparefieldcatalog USING    estruc       LIKE dd02l-tabname
                         CHANGING it_fieldcat1 TYPE lvc_t_fcat.

  DATA: l_fieldcat TYPE LINE OF lvc_t_fcat.

  REFRESH it_fieldcat1.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_buffer_active        = 'X'
      i_structure_name       = estruc
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_fieldcat1[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  LOOP AT it_fieldcat1 INTO l_fieldcat.
    CASE l_fieldcat-fieldname.
      WHEN 'VBELN'.

      WHEN OTHERS.
    ENDCASE.
    MODIFY it_fieldcat1 FROM l_fieldcat.
  ENDLOOP.

ENDFORM.


*&---------------------------------------------------------------------*
*& Form PREPARELAYOUT
*&---------------------------------------------------------------------*
FORM preparelayout CHANGING cwa_layout TYPE lvc_s_layo.

  cwa_layout-zebra      = 'X'.
  cwa_layout-cwidth_opt = 'X'.
  cwa_layout-sel_mode   = 'A'.
*  cwa_layout-sel_mode = space.
*  cwa_layout-no_rowmark = abap_false.
ENDFORM.


*&---------------------------------------------------------------------*
*& Form RELLENAR_TOOLBAR
*&---------------------------------------------------------------------*
FORM rellenar_toolbar CHANGING excluirtool TYPE ui_functions.

  REFRESH: excluirtool.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form FILAS_SELECCIONADAS
*&---------------------------------------------------------------------*
FORM filas_seleccionadas USING alv TYPE REF TO cl_gui_alv_grid
                      CHANGING pt_output_sel.

  TYPES: tt_lines LIKE gt_data. "WITH EMPTY KEY.

  CALL METHOD alv->get_selected_rows
    IMPORTING
      et_index_rows = DATA(it_rows).

  IF it_rows IS NOT INITIAL.
    DATA(pt_output_aux) = VALUE tt_lines( FOR wa_indx IN it_rows ( gt_data[ wa_indx-index ] ) ).
  ENDIF.

  pt_output_sel = pt_output_aux.

ENDFORM.                    " filas_seleccionadas
