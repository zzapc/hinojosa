FUNCTION zspp_if_omp_order_complete.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(INPUT_METHOD) LIKE  BDWFAP_PAR-INPUTMETHD
*"     VALUE(MASS_PROCESSING) LIKE  BDWFAP_PAR-MASS_PROC
*"  EXPORTING
*"     VALUE(WORKFLOW_RESULT) LIKE  BDWF_PARAM-RESULT
*"     VALUE(APPLICATION_VARIABLE) LIKE  BDWF_PARAM-APPL_VAR
*"     VALUE(IN_UPDATE_TASK) LIKE  BDWFAP_PAR-UPDATETASK
*"     VALUE(CALL_TRANSACTION_DONE) LIKE  BDWFAP_PAR-CALLTRANS
*"  TABLES
*"      IDOC_CONTRL STRUCTURE  EDIDC
*"      IDOC_DATA STRUCTURE  EDIDD
*"      IDOC_STATUS STRUCTURE  BDIDOCSTAT
*"      RETURN_VARIABLES STRUCTURE  BDWFRETVAR
*"      SERIALIZATION_INFO STRUCTURE  BDI_SER
*"  EXCEPTIONS
*"      WRONG_FUNCTION_CALLED
*"----------------------------------------------------------------------

  DATA(lo_log) =  NEW zcl_seidor_guardar_log( ).

  CONSTANTS: c_processed_idocs(15) VALUE 'Processed_IDOCs',
             c_appl_objects(12)    VALUE 'Appl_Objects'.

  DATA: wa_head TYPE zspp_order_head,
        it_head TYPE TABLE OF zspp_order_head.

  CLEAR: wa_head, it_head[], it_head.

  TRY .
      DATA(lv_mensaje) = idoc_contrl[ 1 ]-mestyp.
    CATCH cx_root.
  ENDTRY.
  "Por la forma en que nos enviará la información OMP puede venir en varios STEPS que corresponden a la misma operación
  "y por tanto tener varios CI_NUMBER para las OF y operaciones de la misma, así como distintas fechas para los pasos de
  "máquina, de modo que debemos recorrer la infomración y quedarnos con las fechas que corresponan de más temprana
  "y más tardía
  LOOP AT idoc_data INTO DATA(wa_data_head) WHERE segnam EQ 'ZSPP_ORDER_HEAD'.
    wa_head = wa_data_head-sdata.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = wa_head-orden
      IMPORTING
        output = wa_head-orden.

    APPEND wa_head TO it_head.

  ENDLOOP.

  DATA: wa_return TYPE bapiret2,
        it_return TYPE TABLE OF bapi_order_return,
        it_orders TYPE TABLE OF bapi_order_key,
        lv_number TYPE aufnr.

  LOOP AT it_head ASSIGNING FIELD-SYMBOL(<fs_head>).

    REFRESH: it_return, it_orders.
    CLEAR: it_return, it_orders, wa_return.

    APPEND INITIAL LINE TO it_orders ASSIGNING FIELD-SYMBOL(<orden>).
    <orden>-order_number = lv_number = <fs_head>-orden.


    workflow_result = '99999'.
    CLEAR idoc_status.
    idoc_status-msgty    = 'S'.
    idoc_status-msgid    = 'ZEDI_OMP'.
    idoc_status-msgno    = '006'.
    idoc_status-msgv1    = lv_number.
    idoc_status-msgv2    = ''.
    idoc_status-msgv3    = ''.
    idoc_status-msgv4    = ''.
    idoc_status-status   = '51'.
    idoc_status-repid    = sy-repid.
    CLEAR return_variables.
    return_variables-wf_param = 'Error_IDOCs'.
    LOOP AT idoc_contrl.
      idoc_status-docnum = idoc_contrl-docnum.
      APPEND idoc_status.
      return_variables-doc_number = idoc_contrl-docnum.
      APPEND return_variables.
    ENDLOOP.

    CALL FUNCTION 'DIALOG_SET_NO_DIALOG'.

    CALL FUNCTION 'BAPI_PRODORD_COMPLETE_TECH'
      EXPORTING
        scope_compl_tech   = '2'
        work_process_group = 'COWORK_BAPI'
        work_process_max   = 99
      IMPORTING
        return             = wa_return
      TABLES
        orders             = it_orders
        detail_return      = it_return
*       APPLICATION_LOG    =
      .


    IF wa_return-type IS NOT INITIAL.
      workflow_result = '99999'.
      CLEAR idoc_status.
      idoc_status-msgty    = wa_return-type.
      idoc_status-msgid    = wa_return-id.
      idoc_status-msgno    = wa_return-number.
      idoc_status-msgv1    = wa_return-message_v1.
      idoc_status-msgv2    = wa_return-message_v2.
      idoc_status-msgv3    = wa_return-message_v3.
      idoc_status-msgv4    = wa_return-message_v4.
      idoc_status-status   = '51'.
      idoc_status-repid    = sy-repid.
      CLEAR return_variables.
      return_variables-wf_param = 'Error_IDOCs'.
      LOOP AT idoc_contrl.
        idoc_status-docnum = idoc_contrl-docnum.
        APPEND idoc_status.
        return_variables-doc_number = idoc_contrl-docnum.
        APPEND return_variables.
      ENDLOOP.
      IF wa_return-type EQ 'E' OR wa_return-type EQ 'A' OR wa_return-type EQ 'X'.
        DATA(lv_error) = 'X'.
      ENDIF.
      DATA(lv_add) = 'X'.
    ENDIF.
    LOOP AT it_return INTO DATA(wa_ret).
      IF wa_ret-type IS NOT INITIAL.
        CLEAR idoc_status.
        idoc_status-msgty    = wa_ret-type.
        idoc_status-msgid    = wa_ret-id.
        idoc_status-msgno    = wa_ret-number.
        idoc_status-msgv1    = wa_ret-message_v1.
        idoc_status-msgv2    = wa_ret-message_v2.
        idoc_status-msgv3    = wa_ret-message_v3.
        idoc_status-msgv4    = wa_ret-message_v4.
        idoc_status-status   = '62'.
        idoc_status-repid    = sy-repid.
        CLEAR return_variables.
        return_variables-wf_param = 'Log IDOCs'.
        LOOP AT idoc_contrl.
          idoc_status-docnum = idoc_contrl-docnum.
          APPEND idoc_status.
          return_variables-doc_number = idoc_contrl-docnum.
          APPEND return_variables.
        ENDLOOP.
        lv_add = 'X'.
      ENDIF.
    ENDLOOP.

    IF lv_add IS INITIAL.
      workflow_result = '99999'.
      CLEAR idoc_status.
      idoc_status-msgty    = 'S'.
      idoc_status-msgid    = 'ZEDI_OMP'.
      idoc_status-msgno    = '005'.
      idoc_status-msgv1    = lv_number.
      idoc_status-msgv2    = ''.
      idoc_status-msgv3    = ''.
      idoc_status-msgv4    = ''.
      idoc_status-status   = '51'.
      idoc_status-repid    = sy-repid.
      CLEAR return_variables.
      return_variables-wf_param = 'Error_IDOCs'.
      LOOP AT idoc_contrl.
        idoc_status-docnum = idoc_contrl-docnum.
        APPEND idoc_status.
        return_variables-doc_number = idoc_contrl-docnum.
        APPEND return_variables.
      ENDLOOP.
    ENDIF.

    COMMIT WORK AND WAIT.

    PERFORM wait_aufnr USING lv_number.

    CLEAR: lv_add.

  ENDLOOP.

  IF lv_error IS INITIAL.

*    WAIT UP TO 2 SECONDS.
*
*    CALL FUNCTION 'ZSSDPP_CLOSE_SO'
*      EXPORTING
*        i_aufnr = lv_number    " Número de orden
*      IMPORTING
*       e_error =     " Indicador general
*       et_return =     " Tabla retorno
      .
  ENDIF.

  DATA: i_type       TYPE bapi_mtype,
        i_id         TYPE symsgid,
        i_number     TYPE symsgno,
        i_message_v1 TYPE symsgv,
        i_message_v2 TYPE symsgv,
        i_message_v3 TYPE symsgv,
        i_message_v4 TYPE symsgv.

  LOOP AT idoc_status INTO DATA(wa_status).
    i_type = wa_status-msgty.
    i_id = wa_status-msgid.
    i_number = wa_status-msgno.
    i_message_v1 = wa_status-msgv1.
    i_message_v2 = wa_status-msgv2.
    i_message_v3 = wa_status-msgv3.
    i_message_v4 = wa_status-msgv4.
    lo_log->guardar_mensaje(
    EXPORTING
      i_type       = i_type
      i_id         = i_id
      i_number     = i_number
      i_message_v1 = i_message_v1
      i_message_v2 = i_message_v2
      i_message_v3 = i_message_v3
      i_message_v4 = i_message_v4
      ).
  ENDLOOP.
  IF sy-subrc = 0.
    lo_log->guardar_log(
    EXPORTING
      objeto    = 'ZEDI_OMP'    " Log aplicación: Nombre objeto (sigla de aplicación)
*      subobjeto = 'ZEDI_OMP'    " Log aplicación: Objeto inferior
      subobjeto = 'ZORDCOMP'    " Log aplicación: Objeto inferior
*    extnumber =     " Log aplicación: Identificación externa
    IMPORTING
    lognumber = DATA(lv_lognum)    " Número de LOG
          ).
  ENDIF.
  DATA it_logtab TYPE bapiret2_tab.
  lo_log->get_bapiret_tab(
    IMPORTING
    gt_bapiret = it_logtab
  ).
  LOOP AT it_logtab TRANSPORTING NO FIELDS WHERE type EQ 'E' OR type EQ 'A' OR type EQ 'X'.
    DATA(lv_err_idoc) = 'X'.
    EXIT.
  ENDLOOP.
  LOOP AT idoc_status TRANSPORTING NO FIELDS WHERE msgty EQ 'E' OR msgty EQ 'A' OR msgty EQ 'X'.
    lv_err_idoc = 'X'.
    EXIT.
  ENDLOOP.
  REFRESH idoc_status.
  CLEAR idoc_status.

  workflow_result = '99999'.
  CLEAR idoc_status.

  IF lv_err_idoc = 'X'.
    idoc_status-msgty    = 'E'.
    idoc_status-status   = '63'.
  ELSE.
    idoc_status-msgty    = 'S'.
    idoc_status-status   = '53'.
  ENDIF.
  idoc_status-msgid    = '00'.
  idoc_status-msgno    = '398'.
  idoc_status-msgv1    = 'Revisar LOG de Aplicación'.
  idoc_status-msgv2    = ''.
  idoc_status-msgv3    = ''.
  idoc_status-msgv4    = ''.

  idoc_status-repid    = sy-repid.
  idoc_status-appl_log = lv_lognum.
  CLEAR return_variables.
  return_variables-wf_param = 'PROCESS_IDOCs'.
  LOOP AT idoc_contrl.
    idoc_status-docnum = idoc_contrl-docnum.
    APPEND idoc_status.
    return_variables-doc_number = idoc_contrl-docnum.
    APPEND return_variables.
  ENDLOOP.

  SORT return_variables.
  DELETE ADJACENT DUPLICATES FROM return_variables.


  CALL FUNCTION 'DB_COMMIT'.
  CALL FUNCTION 'DEQUEUE_ALL'.
  COMMIT WORK.

ENDFUNCTION.
