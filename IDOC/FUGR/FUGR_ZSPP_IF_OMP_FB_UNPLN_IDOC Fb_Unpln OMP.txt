FUNCTION zspp_if_omp_fb_unpln.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(INPUT_METHOD) LIKE  BDWFAP_PAR-INPUTMETHD
*"     VALUE(MASS_PROCESSING) LIKE  BDWFAP_PAR-MASS_PROC
*"  EXPORTING
*"     VALUE(WORKFLOW_RESULT) LIKE  BDWF_PARAM-RESULT
*"     VALUE(APPLICATION_VARIABLE) LIKE  BDWF_PARAM-APPL_VAR
*"     VALUE(IN_UPDATE_TASK) LIKE  BDWFAP_PAR-UPDATETASK
*"     VALUE(CALL_TRANSACTION_DONE) LIKE  BDWFAP_PAR-CALLTRANS
*"  TABLES
*"      IDOC_CONTRL STRUCTURE  EDIDC
*"      IDOC_DATA STRUCTURE  EDIDD
*"      IDOC_STATUS STRUCTURE  BDIDOCSTAT
*"      RETURN_VARIABLES STRUCTURE  BDWFRETVAR
*"      SERIALIZATION_INFO STRUCTURE  BDI_SER
*"  EXCEPTIONS
*"      WRONG_FUNCTION_CALLED
*"----------------------------------------------------------------------

* APC20241126 Verificamos si hay un job activo.
  SELECT jobcount FROM tbtco
    INTO @DATA(l_jobcount)
    UP TO 1 ROWS
     WHERE jobname  = 'ZIDOC_FBPLN'
       AND status   = 'R'. "Job en ejecución
  ENDSELECT.
  IF sy-subrc = 0.
    message 'Job ZIDOC_FBPLN en ejecución, imposible continuar' type 'I'.
* Si está activo, salimos sin hacer nada
    RETURN.
  ENDIF.


  CALL FUNCTION 'ZSPP_IF_OMP_FB_PLN'
    EXPORTING
      input_method          = input_method
      mass_processing       = mass_processing
      i_sched_type          = 'CP'
    IMPORTING
      workflow_result       = workflow_result
      application_variable  = application_variable
      in_update_task        = in_update_task
      call_transaction_done = call_transaction_done
    TABLES
      idoc_contrl           = idoc_contrl
      idoc_data             = idoc_data
      idoc_status           = idoc_status
      return_variables      = return_variables
      serialization_info    = serialization_info
    EXCEPTIONS
      wrong_function_called = 1
      OTHERS                = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

ENDFUNCTION.
