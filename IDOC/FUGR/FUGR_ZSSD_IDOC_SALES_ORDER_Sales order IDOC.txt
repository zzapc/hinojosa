FUNCTION zssd_idoc_sales_order.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_VBELN) TYPE  VBELN
*"     REFERENCE(I_TRTYP) TYPE  TRTYP
*"  EXPORTING
*"     REFERENCE(ET_RETURN) TYPE  BAPIRET2_T
*"----------------------------------------------------------------------

  CONSTANTS: c_edi_extern TYPE edi_rcvpor VALUE 'SALESFORCE', "ZHPP_01',
             c_rcvprn     TYPE edi_rcvprn VALUE 'SALESFORCE', "'ZHPPCLNT100',
             c_ls_d       TYPE edi_rcvprt VALUE 'LS',
             c_ls_r       TYPE edi_sndprt VALUE 'LS',
*             c_zmsg         TYPE edi_mestyp VALUE 'ZMATMAS_P01',
*             c_zstpm_orders TYPE edi_idoctp VALUE 'ZMATMAS_P01',
             c_order      TYPE segname VALUE 'ZPEDIDOS_SALESFORCE'.

  DATA: t_data    TYPE zpedidostt_salesforce,
        seg_order TYPE zpedidos_salesforce.

  DATA: created_m_idocs LIKE sy-tabix.
  DATA: created_comm_idocs LIKE sy-tabix.
  DATA: created_c_idocs LIKE sy-tabix.
  DATA: done_since_commit LIKE sy-tabix.

  DATA: ls_idoc_header       TYPE edidc,
        lt_idoc_comm_control TYPE TABLE OF edidc,
        ls_idoc_comm_control TYPE edidc,
        lt_return            TYPE bapiret2_t,
        ls_return            TYPE bapiret2,
        ls_return1           TYPE bapiret1,
        t_edidd              TYPE edidd_tt,
        t_edidd_aux          TYPE edidd_tt.


  DATA: l_zstpm_orders TYPE edi_idoctp,
        l_zmsg         TYPE edi_mestyp.

  DATA: l_edidd   TYPE edidd,
        seg_matnr TYPE zmateriales_salesforce.

  DATA: lv_auxlevel    TYPE edi_segnum,
        l_message_type TYPE tbdme-mestyp.




  CASE i_trtyp.
    WHEN 'H'.
      l_message_type = 'ZORDERS_P01'.
    WHEN OTHERS.
      l_message_type = 'ZORDERS_P02'.
  ENDCASE.

  l_zstpm_orders = l_message_type.
  l_zmsg = l_message_type.

  SELECT a~kunnr,b~posnr, b~matnr, b~abgru, c~bezei AS abgru_txt, a~bukrs_vf, vkorg, a~knumv, a~vdatu, a~erdat, vtweg,a~spart, a~auart, A~AUDAT INTO TABLE @DATA(t_pos)
  FROM vbak AS a
  INNER JOIN vbap AS b ON a~vbeln = b~vbeln
  LEFT OUTER JOIN tvagt AS c ON b~abgru = c~abgru AND spras = @sy-langu
  WHERE a~vbeln = @i_vbeln.

  READ TABLE t_pos INTO DATA(l_prim) INDEX 1.
  SELECT SINGLE COUNT(*) FROM zssdt001 WHERE vkorg = l_prim-vkorg AND spart = l_prim-spart AND vtweg = l_prim-vtweg AND uso = 1.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.
    SELECT SINGLE COUNT(*) FROM ZSSD000_INT_PED WHERE vkorg = l_prim-vkorg AND spart = l_prim-spart AND vtweg = l_prim-vtweg AND auart = l_prim-auart.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.


  SELECT * INTO TABLE @DATA(t_vbep) FROM vbep WHERE vbeln = @i_vbeln.

  SELECT * INTO TABLE @DATA(t_vbuk) FROM vbuk WHERE vbeln = @i_vbeln.

  SELECT * INTO TABLE @DATA(t_vbup) FROM vbup WHERE vbeln = @i_vbeln.

  SELECT * INTO TABLE @DATA(t_komv) FROM konv FOR ALL ENTRIES IN @t_pos WHERE knumv = @t_pos-knumv.

  SELECT * INTO TABLE @DATA(t_vbpa) FROM vbpa WHERE vbeln = @i_vbeln.

  SELECT * INTO TABLE @DATA(t_entrega) FROM likp AS a
    INNER JOIN lips AS b ON a~vbeln = b~vbeln
    INNER JOIN vbuk AS c ON a~vbeln = c~vbeln
    WHERE vgbel = @i_vbeln.

  IF t_entrega IS NOT INITIAL.
    SELECT * INTO TABLE @DATA(t_fact) FROM  vbrk AS a INNER JOIN vbrp AS b ON a~vbeln = b~vbeln
      FOR ALL ENTRIES IN @t_entrega
      WHERE b~vgbel = @t_entrega-a-vbeln.

  ENDIF.
*  SELECT * INTO TABLE @DATA(t_lips) FROM lips WHERE vgbel = @i_vbeln.

*  IF t_likp IS NOT INITIAL.
*    SELECT * INTO TABLE @DATA(t_vbrk) FROM lips WHERE vgbel = @i_vbeln.
*
*    SELECT * INTO TABLE @DATA(t_vbrp) FROM lips WHERE vgbel = @i_vbeln.
*
*  ENDIF.

SELECT * INTO TABLE @DATA(t_afpo) FROM afpo as a
  inner join mara as b on a~matnr = b~matnr
  WHERE  kdauf = @i_vbeln
    and b~mtart in ('ZPTC','ZPTF','ZPTK','ZPTL','ZPTO' ).
.

  If t_afpo is not INITIAL.

    SELECT * INTO TABLE @DATA(t_aufk) FROM aufk FOR ALL ENTRIES IN @t_afpo WHERE aufnr = @t_afpo-a-aufnr.

  ENDIf.


  IF t_aufk IS NOT INITIAL.

    SELECT * INTO TABLE @DATA(t_afko) FROM afko FOR ALL ENTRIES IN @t_aufk WHERE  aufnr = @t_aufk-aufnr.
    SELECT * INTO TABLE @DATA(t_caufv) FROM caufv FOR ALL ENTRIES IN @t_aufk WHERE  aufnr = @t_aufk-aufnr.
*
*    SELECT * into TABLE @DATA(T_afpo) FROM afpo for ALL ENTRIES IN @t_aufk WHERE  aufnr = @t_aufk-aufnr.
*    SELECT * into TABLE @DATA(T_afpo) FROM afpo for ALL ENTRIES IN @t_aufk WHERE  aufnr = @t_aufk-aufnr.
*    SELECT * into TABLE @DATA(T_afpo) FROM afpo for ALL ENTRIES IN @t_aufk WHERE  aufnr = @t_aufk-aufnr.

  ENDIF.

  DATA: l_campo  TYPE char12,
        l_campo2 TYPE char12.

  LOOP AT t_pos INTO DATA(l_data).

    CLEAR: seg_order.

    lv_auxlevel = lv_auxlevel + 1.

    l_edidd-segnam = c_order.
    l_edidd-segnum = lv_auxlevel.


    seg_order-kunnr = l_data-kunnr.
    seg_order-matnr = l_data-matnr.

    seg_order-libre004 = l_data-posnr.

    READ TABLE t_vbpa INTO DATA(l_vbpa_we) WITH KEY parvw = 'WE'.
    IF sy-subrc = 0.
      seg_order-kunwa = l_vbpa_we-kunnr.
    ENDIF.


    READ TABLE t_vbpa INTO DATA(l_vbpa_y0) WITH KEY parvw = 'Y0'.
    IF sy-subrc = 0.
      seg_order-partner_01 = l_vbpa_y0-lifnr.
    ENDIF.


    READ TABLE t_vbpa INTO DATA(l_vbpa_p1) WITH KEY parvw = 'P1'.
    IF sy-subrc = 0.
      seg_order-partner_02 = l_vbpa_p1-lifnr.
    ENDIF.

    READ TABLE t_vbpa INTO DATA(l_vbpa_p2) WITH KEY parvw = 'P2'.
    IF sy-subrc = 0.
      seg_order-partner_03 = l_vbpa_p2-lifnr.
    ENDIF.

    seg_order-auart = l_data-auart.
    seg_order-vbeln = i_vbeln.
    seg_order-absta_bez = l_data-abgru && ' - ' && l_data-abgru_txt.

    seg_order-libre048 = lines( t_pos ).
    seg_order-libre048 = condense( seg_order-libre048 ).
*    seg_order-libre004 = 1.
    seg_order-libre025 = l_data-audat. "l_data-erdat. "<- Modificado-SEIDOR_05.06.24

    seg_order-bukrs_vf = l_data-bukrs_vf.
    seg_order-vkorg = l_data-vkorg.


*    Producción
    SORT t_caufv BY aufnr DESCENDING. "ARA 22.04.24 - Puede exitir más de una OF por pedido/pos.
    READ TABLE t_caufv INTO DATA(l_caufv) WITH KEY kdauf = i_vbeln kdpos = l_data-posnr plnbez = l_data-matnr.
      IF sy-subrc = 0.
        seg_order-gamng = trunc( l_caufv-gamng ) .
        seg_order-gltrs = l_caufv-gltrs.
        seg_order-gltri_fecultfab = seg_order-gltri_feculmani = l_caufv-gltri.
        seg_order-gwemg_cantfab = seg_order-gwemg_cantmani = trunc( l_caufv-igmng ).
        seg_order-gamng = condense( seg_order-gamng ).
        seg_order-gwemg_cantfab = condense( seg_order-gwemg_cantfab ).
        seg_order-gwemg_cantmani = condense( seg_order-gwemg_cantmani ).
      ENDIF.

*    READ TABLE t_aufk INTO DATA(l_aufk) WITH KEY kdauf = i_vbeln kdpos = l_data-posnr. "ARA 22.04.24 - Puede exitir más de una OF por pedido/pos.
     READ TABLE t_aufk INTO DATA(l_aufk) WITH KEY aufnr = l_caufv-aufnr. "ARA 22.04.24 - Puede exitir más de una OF por pedido/pos.
    IF sy-subrc = 0.
      READ TABLE t_afko INTO DATA(l_afko) WITH KEY aufnr = l_aufk-aufnr.
      IF sy-subrc = 0.

      ENDIF.

      READ TABLE t_afpo INTO DATA(l_afpo) WITH KEY a-aufnr = l_aufk-aufnr.
      IF sy-subrc = 0.

      ENDIF.
    ENDIF.

    seg_order-aufnr_01 = l_aufk-aufnr.

    DATA: l_cant_entr TYPE lfimg.
    DATA: l_cant_fact TYPE lfimg.

    CLEAR: l_cant_entr,l_cant_fact.

    LOOP AT t_entrega INTO DATA(l_entrega) WHERE b-vgpos = l_data-posnr.
      IF l_entrega-c-wbstk = 'C'.
        l_cant_entr = l_cant_entr + l_entrega-b-lfimg.
      ENDIF.
      LOOP AT t_fact INTO DATA(l_fact) WHERE b-vgbel = l_entrega-a-vbeln.
        l_cant_fact = l_cant_fact + l_fact-b-fklmg.
      ENDLOOP.
    ENDLOOP.
    If sy-subrc <> 0.
      CLEAR: l_entrega,l_fact.
    ENDIF.
    seg_order-vsmng = trunc( l_cant_entr ).
    seg_order-vsmng = condense( seg_order-vsmng ).

    seg_order-wadat_ist = l_entrega-a-wadat_ist.
    seg_order-vbeln_likp = l_entrega-a-vbeln.

    seg_order-vsmng_cantfact = trunc( l_cant_fact ).
    seg_order-vsmng_cantfact = condense( seg_order-vsmng_cantfact ).

    seg_order-fkdat = l_fact-a-fkdat.
    seg_order-vbeln_vbrk = l_fact-a-vbeln.




    READ TABLE t_komv INTO DATA(l_komv_zprc) WITH KEY kschl = 'ZPRC' kposn = l_data-posnr.
    IF sy-subrc = 0.
      seg_order-kbetr = l_komv_zprc-kbetr.
    ENDIF.
    seg_order-kbetr = condense( seg_order-kbetr ).


    DATA: l_index  TYPE sy-tabix,
          l_mbdata TYPE mbdat.

    CLEAR: l_index,l_mbdata.

    l_index = 1.

    LOOP AT t_vbep INTO DATA(l_vbep) WHERE posnr = l_data-posnr.
      CLEAR: l_campo, l_campo2.


      CHECK l_vbep-wmeng > 0.

      IF l_mbdata IS INITIAL.
        l_mbdata = l_vbep-mbdat.
      ENDIF.

      l_campo = 'KETDAT_0' && l_index.
      l_campo2 = 'KWMENG_0' && l_index.

      ASSIGN COMPONENT l_campo OF STRUCTURE seg_order TO FIELD-SYMBOL(<ketdat>).
      IF <ketdat> IS ASSIGNED.
        <ketdat> = l_vbep-edatu.
      ENDIF.
      ASSIGN COMPONENT l_campo2 OF STRUCTURE seg_order TO FIELD-SYMBOL(<kwmeng>).
      IF <kwmeng> IS ASSIGNED.
        <kwmeng> = trunc( l_vbep-wmeng ).

        <kwmeng> = condense( <kwmeng> ).
      ENDIF.

      l_index = l_index + 1.
    ENDLOOP.

    seg_order-etdat = seg_order-ketdat_01.
    seg_order-mbdat = l_mbdata.

    "ZSSD000_VALOR_903 - Valana
*    seg_order-valana = l_komv_zprc-kbetr * 10.

    "ZSSD000_OTRO_COSTE
    DATA: l_825 TYPE kwert.
    "si hay stunr 150 Z100  Descuento 100%
    READ TABLE t_komv INTO DATA(l_konv_zc01) WITH KEY kschl = 'ZC01' kposn = l_data-posnr.
*    IF sy-subrc = 0.
*      l_825 = abs( l_konv_zc01-kwert ).
*    ENDIF.
    "INI M.C.

    "ZSSD000_VALOR_SUB
    DATA: l_valor_sub TYPE kwert.
    "stunr 25 -> Precio 10  20
    CLEAR: l_valor_sub.
    LOOP AT t_komv INTO DATA(l_komv_sub) WHERE stunr >= 10 AND stunr <= 20 AND kposn = l_data-posnr.
      l_valor_sub = l_valor_sub + l_komv_sub-kwert.
    ENDLOOP.

    seg_order-valana = abs( l_valor_sub ) -  abs( l_konv_zc01-kwert ).
    seg_order-valana = condense( seg_order-valana ).

    "ZSSD000_COSTE_PROD
    DATA: l_valor_prod TYPE kwert.
    " stunr 931 -> Importe total costes de produc	810	870
    CLEAR: l_valor_prod.
    LOOP AT t_komv INTO DATA(l_komv_rod) WHERE stunr >= 810 AND stunr <= 870 AND kposn = l_data-posnr.
      l_valor_prod = l_valor_prod + l_komv_rod-kwert.
    ENDLOOP.


    seg_order-cosmilcaj = l_valor_prod.
    seg_order-cosmilcaj = condense( seg_order-cosmilcaj ).

    "ZSSD000_OTRO_COSTE
    DATA: l_valor_otro TYPE kwert.
    "si hay stunr 150 Z100  Descuento 100%
    READ TABLE t_komv INTO DATA(l_konv_z100) WITH KEY kschl = 'Z100' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_valor_otro = abs( l_konv_z100-kwert ).
    ELSE.
*        Sumamos el stunr 45 -> TOT Dto Comercial 30  40, si hay ZD01 o ZD02
      DATA: l_valor_45 TYPE kwert.
      CLEAR: l_valor_45.
      LOOP AT t_komv INTO DATA(l_komv_45) WHERE stunr >= 810 AND stunr <= 870 AND kposn = l_data-posnr.
        l_valor_45 = l_valor_45 + l_komv_45-kwert.
        IF NOT line_exists( t_komv[ kschl = 'ZD01' kposn = l_data-posnr ] ) AND NOT line_exists( t_komv[ kschl = 'ZD02' kposn = l_data-posnr ] ).
          CLEAR: l_valor_45.
        ENDIF.
      ENDLOOP.

*        Sumamos el stunr 65 -> TOT Dto Pronto Pago 50  60, si hay ZD03 o ZD04
      DATA: l_valor_65 TYPE kwert.
      CLEAR: l_valor_65.
      LOOP AT t_komv INTO DATA(l_komv_65) WHERE stunr >= 810 AND stunr <= 870 AND kposn = l_data-posnr.
        l_valor_65 = l_valor_65 + l_komv_65-kwert.
        IF NOT line_exists( t_komv[ kschl = 'ZD03' kposn = l_data-posnr ] ) AND NOT line_exists( t_komv[ kschl = 'ZD04' kposn = l_data-posnr ] ).
          CLEAR: l_valor_65.
        ENDIF.
      ENDLOOP.

      l_valor_otro = abs( l_valor_45 ) + abs( l_valor_65 ).

    ENDIF.
*        Sumamos kschl ZA00
    DATA: l_za00 TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_za00) WITH KEY kschl = 'ZA00' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_za00 = l_komv_za00-kwert.
    ENDIF.
*        Sumamos kschl ZA01
    DATA: l_za01 TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_za01) WITH KEY kschl = 'ZA01' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_za01 = l_komv_za01-kwert.
    ENDIF.
*        Sumamos kschl ZA02
    DATA: l_za02 TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_za02) WITH KEY kschl = 'ZA02' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_za02 = l_komv_za02-kwert.
    ENDIF.
*        Sumamos kschl ZA03
    DATA: l_za03 TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_za03) WITH KEY kschl = 'ZA03' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_za03 = l_komv_za03-kwert.
    ENDIF.
*        Sumamos kschl ZA04
    DATA: l_za04 TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_za04) WITH KEY kschl = 'ZA04' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_za04 = l_komv_za04-kwert.
    ENDIF.

    l_valor_otro = l_valor_otro + abs( l_za00 ) + abs( l_za01 ) + abs( l_za02 ) + abs( l_za03 ) + abs( l_za04 ).

    "stunr 750 -> Importe comisiones  725 740, si hay ZCP0 o ZCP1 o ZCP2 o ZCP3
    DATA: l_valor_750 TYPE kwert.
    CLEAR: l_valor_750.
    LOOP AT t_komv INTO DATA(l_komv_750) WHERE stunr >= 810 AND stunr <= 870 AND kposn = l_data-posnr.
      l_valor_750 = l_valor_750 + l_komv_750-kwert.
      IF NOT line_exists( t_komv[ kschl = 'ZCP0' kposn = l_data-posnr ] ) AND NOT line_exists( t_komv[ kschl = 'ZCP1' kposn = l_data-posnr ] )
        AND NOT line_exists( t_komv[ kschl = 'ZCP2' kposn = l_data-posnr ] ) AND NOT line_exists( t_komv[ kschl = 'ZCP3' kposn = l_data-posnr ] ).
        CLEAR: l_valor_750.
      ENDIF.
    ENDLOOP.

    l_valor_otro = l_valor_otro + abs( l_valor_750 ).


    seg_order-mdc = l_valor_sub - l_valor_prod - l_valor_otro.

    seg_order-mdc = condense( seg_order-mdc ).
    "FIN M.C.

    DATA: l_zp07 TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_zp07) WITH KEY kschl = 'ZP07' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_zp07 = l_komv_zp07-kwert.
    ENDIF.
    seg_order-vam2 = l_zp07.
    seg_order-vam2 = condense( seg_order-vam2 ).


    DATA: l_zp08 TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_zp08) WITH KEY kschl = 'ZP08' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_zp08 = l_komv_zp08-kwert.
    ENDIF.
    seg_order-mdcm2 = l_zp08.
    seg_order-mdcm2 = condense( seg_order-mdcm2 ).


    DATA: l_zcli TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_zcli) WITH KEY kschl = 'ZCLI' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_zcli = l_komv_zcli-kwert.
    ENDIF.
    seg_order-impclifac = l_zcli.
    seg_order-impclifac = condense( seg_order-impclifac ).

    DATA: l_ztro TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_ztro) WITH KEY kschl = 'ZTRO' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_ztro = l_komv_ztro-kwert.
    ENDIF.
    seg_order-imptrofac = l_ztro.
    seg_order-imptrofac = condense( seg_order-imptrofac ).


    DATA: l_zd01 TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_zd01) WITH KEY kschl = 'ZD01' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_zd01 = l_komv_zd01-kbetr.
    ENDIF.
    seg_order-libre019 = l_zd01.
    seg_order-libre019 = condense( seg_order-libre019 ).

    DATA: l_zd02 TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_zd02) WITH KEY kschl = 'ZD02' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_zd02 = l_komv_zd02-kwert.
    ENDIF.
    seg_order-libre020 = l_zd02.
    seg_order-libre020 = condense( seg_order-libre020 ).

    DATA: l_zd03 TYPE kwert.
    READ TABLE t_komv INTO DATA(l_komv_zd03) WITH KEY kschl = 'ZD03' kposn = l_data-posnr.
    IF sy-subrc = 0.
      l_zd03 = l_komv_zd03-kbetr.
    ENDIF.
    seg_order-libre021 = l_zd03.
    seg_order-libre021 = condense( seg_order-libre021 ).


    IF seg_order-libre019 CA '-'.
      REPLACE '-' IN seg_order-libre019 WITH ''.
      seg_order-libre019 = '-' && seg_order-libre019.
    ENDIF.

    IF seg_order-libre021 CA '-'.
      REPLACE '-' IN seg_order-libre021 WITH ''.
      seg_order-libre021 = '-' && seg_order-libre021.
    ENDIF.
    IF seg_order-libre020 CA '-'.
      REPLACE '-' IN seg_order-libre020 WITH ''.
      seg_order-libre020 = '-' && seg_order-libre020.
    ENDIF.
    IF seg_order-mdcm2 CA '-'.
      REPLACE '-' IN seg_order-mdcm2 WITH ''.
      seg_order-mdcm2 = '-' && seg_order-mdcm2.
    ENDIF.
    IF seg_order-mdc CA '-'.
      REPLACE '-' IN seg_order-mdc WITH ''.
      seg_order-mdc = '-' && seg_order-mdc.
    ENDIF.
    IF seg_order-valana CA '-'.
      REPLACE '-' IN seg_order-valana WITH ''.
      seg_order-valana = '-' && seg_order-valana.
    ENDIF.
    IF seg_order-vam2 CA '-'.
      REPLACE '-' IN seg_order-vam2 WITH ''.
      seg_order-vam2 = '-' && seg_order-vam2.
    ENDIF.

    l_edidd-sdata = seg_order.


    APPEND l_edidd TO t_edidd.

  ENDLOOP.

  ls_idoc_header-mandt  = sy-mandt.
  ls_idoc_header-direct = '1'.
  ls_idoc_header-rcvpor = c_edi_extern.
  ls_idoc_header-rcvprt = c_ls_d.
  ls_idoc_header-rcvprn = c_rcvprn.
  ls_idoc_header-sndprt = c_ls_r.
  ls_idoc_header-sndprn = sy-uname.
  ls_idoc_header-mestyp = l_zmsg.
  ls_idoc_header-idoctp = 'ZPEDIDOS_SALESFORCE'.
"ARA Ajuste envñío IDOS inmediatamente
  ls_idoc_header-outmod = '2'.

  SORT t_edidd BY segnum ASCENDING.

  CALL FUNCTION 'MASTER_IDOC_DISTRIBUTE' "IN UPDATE TASK
    EXPORTING
      master_idoc_control            = ls_idoc_header
    TABLES
      communication_idoc_control     = lt_idoc_comm_control
      master_idoc_data               = t_edidd
    EXCEPTIONS
      error_in_idoc_control          = 1
      error_writing_idoc_status      = 2
      error_in_idoc_data             = 3
      sending_logical_system_unknown = 4
      OTHERS                         = 5.
  IF sy-subrc <> 0.
    "KO
    ls_return-type        = sy-msgty.
    ls_return-number      = sy-msgno.
    ls_return-id          = sy-msgid.
    ls_return-message_v1  = sy-msgv1.
    ls_return-message_v2  = sy-msgv2.
    ls_return-message_v3  = sy-msgv3.
    ls_return-message_v4  = sy-msgv4.
    APPEND ls_return TO lt_return.
  ELSE.
    "OK
    READ TABLE lt_idoc_comm_control INTO DATA(ls_control_record_out) INDEX 1.
    CHECK sy-subrc = 0.
    DATA(docnum) = ls_control_record_out-docnum.
    ls_return-type        = 'S'.
    ls_return-number      = '398'.
    ls_return-id          = '00'.
    ls_return-message_v1  = docnum.
    APPEND ls_return TO lt_return.


  ENDIF.


  created_m_idocs = created_m_idocs + 1.
  created_c_idocs = created_c_idocs + created_comm_idocs.
  done_since_commit = done_since_commit + 1.


  "at t_marakey







ENDFUNCTION.
