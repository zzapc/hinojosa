*&---------------------------------------------------------------------*
*&  Include           ZRPI_0001_CLASS
*&---------------------------------------------------------------------*

* Para los eventos
CLASS lcl_application DEFINITION DEFERRED.
DATA  g_application TYPE REF TO lcl_application.
DATA: gs_toolbar TYPE stb_button.

*&---------------------------------------------------------------------*
*&  Include           ZIEG_ALV_EDITABLE_CLASS
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&       Class lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application DEFINITION.

* PUBLICO: Los métodos de los eventos
  PUBLIC SECTION.

*   Evento para actualizar los datos antes de que se modifique la tabla
    METHODS handle_data_changed
                  FOR EVENT data_changed OF cl_gui_alv_grid
      IMPORTING er_data_changed e_onf4
                  e_onf4_before e_onf4_after e_ucomm.
*Evento para actualizar los datos después de modificar la tabla
    METHODS handle_data_changed_finished
                  FOR EVENT data_changed_finished OF cl_gui_alv_grid
      IMPORTING e_modified et_good_cells.
*Evento para detectar accion botonera
    METHODS handle_user_command
                  FOR EVENT user_command OF cl_gui_alv_grid
      IMPORTING e_ucomm.
*Evento para que añada botones al menu
    METHODS handle_toolbar
                  FOR EVENT toolbar OF cl_gui_alv_grid
      IMPORTING e_object e_interactive.

    METHODS handle_f4
                  FOR EVENT onf4 OF cl_gui_alv_grid
      IMPORTING e_fieldname
                  es_row_no
                  er_event_data
                  et_bad_cells.

*   Privado
  PRIVATE SECTION.
    DATA: it_insert TYPE TABLE OF ty_insert.

ENDCLASS.                    "lcl_application DEFINITION

*&---------------------------------------------------------------------*
*&       Class (Implementation)  lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application IMPLEMENTATION.

* Para los cambios (antes de que se modifique la tabla del ALV)
* EN ESTE METODO NOS GUARDAMOS EL VALOR ANTIGUO PARA PODER ENVIAR A PI EL QUE QUEREMOS BORRAR
* PARA DESPUES INSERTAR EL NUEVO
  METHOD handle_data_changed.

    DATA: lv_index LIKE sy-tabix.
    CLEAR lv_index.
*   Tablas internas
    DATA: lti_mod_cells TYPE lvc_t_modi.    "Cuando se modifican líneas

*   Estructuras internas
    DATA: ls_celda TYPE lvc_s_modi.
*          ls_modif LIKE gti_modif.

*   Recuperamos las líneas modificadas
    lti_mod_cells = er_data_changed->mt_mod_cells.

*   Para las líneas insertadas
    IF lti_mod_cells[] IS NOT INITIAL.
      LOOP AT lti_mod_cells INTO ls_celda.
        READ TABLE gt_caract INTO gs_caract
        INDEX ls_celda-row_id.
        IF sy-subrc = 0.

          CLEAR lv_index.
          READ TABLE gt_reg_camb INTO gs_reg_camb
          WITH KEY zcodigo = gs_caract-zcodigo
                   bukrs = gs_caract-bukrs
                   werks = gs_caract-werks
                   zcontador = gs_caract-zcontador.
          IF sy-subrc = 0.
            lv_index = sy-tabix.
            gs_reg_camb-zcodigo_ant = gs_caract-zvalor_externo.
            gs_reg_camb-zcodigo_new = ls_celda-value.

            MODIFY gt_reg_camb FROM gs_reg_camb INDEX lv_index.
          ELSE.

            CLEAR gs_reg_camb.
            gs_reg_camb-datum = sy-datum.
            gs_reg_camb-uzeit = sy-uzeit.
            gs_reg_camb-usuario = sy-uname.
            gs_reg_camb-zcodigo = gs_caract-zcodigo.
            gs_reg_camb-bukrs =  gs_caract-bukrs.
            gs_reg_camb-werks = gs_caract-werks.
            gs_reg_camb-zcontador = gs_caract-zcontador.
            gs_reg_camb-zcodigo_ant = gs_caract-zvalor_externo.
            gs_reg_camb-zcodigo_new = ls_celda-value.

            APPEND gs_reg_camb TO gt_reg_camb.

          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.                    "handle_data_changed

***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_user_command
***********************************************************************

  METHOD handle_user_command.
    DATA: index_rows TYPE lvc_t_row.

    REFRESH lt_sel_rows.
*    REFRESH lt_rows_no.
    CASE e_ucomm.
      WHEN 'BT_NEW'.

        CALL METHOD grid->get_selected_rows
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows.
        CALL METHOD cl_gui_cfw=>flush.

        PERFORM anadir_lineas.

      WHEN OTHERS.
    ENDCASE.

*    CALL METHOD cl_gui_cfw=>flush.
*    CLEAR ls_selected_line.
*    READ TABLE lt_rows INDEX 1 INTO ls_selected_line.

*    CASE e_ucomm.
*      WHEN 'BT_SAVE' OR 'SAVE'.
**        PERFORM modificar_ordenes TABLES ti_datos
**                                         it_datoscarga.
**
*      WHEN OTHERS.
*    ENDCASE.
    CALL METHOD grid->refresh_table_display.


  ENDMETHOD.                    "handle_user_command
***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_menu_button
***********************************************************************
  METHOD handle_toolbar.
*   Icono crear y lanzar bapi
    CLEAR gs_toolbar.
    MOVE  'BT_NEW'                    TO gs_toolbar-function.
    MOVE  icon_create            TO gs_toolbar-icon.
    MOVE  'Crear nuevo registro'   TO gs_toolbar-quickinfo.
**    MOVE 0                             TO gs_toolbar-butn_type.
    MOVE  'Crear Registro'               TO gs_toolbar-text.
    MOVE space                         TO gs_toolbar-disabled.
    APPEND gs_toolbar                  TO e_object->mt_toolbar.

  ENDMETHOD.                    "handle_toolbar
***********************************************************************
* CLASS   c_event_receiver
* METHOD  handle_data_changed_finished
***********************************************************************
* para los cambios (después de que se modifique la tabla del alv)
  METHOD handle_data_changed_finished.

    DATA: ls_modif  TYPE LINE OF lvc_t_modi,
          ls_modif2 TYPE LINE OF lvc_t_modi.

    DATA: lv_index LIKE sy-tabix.
    CLEAR lv_index.

    DATA: lti_celltab TYPE lvc_t_styl,
          ls_celltab  TYPE lvc_s_styl,
          ls_fcat     TYPE lvc_s_fcat.
    DATA: ls_ins TYPE ty_insert.

*   Recorremos la tabla de la clase actualizando la global
    LOOP AT et_good_cells INTO ls_modif.

      READ TABLE gt_caract INTO gs_caract INDEX ls_modif-row_id.

      CASE ls_modif-fieldname.
        WHEN 'ZVALOR_EXTERNO'.
* Añadimos en la tabla de registros modificados
          CLEAR lv_index.
          READ TABLE gt_caract_modif INTO gs_caract_modif
          WITH KEY zcodigo = gs_caract-zcodigo
                   bukrs = gs_caract-bukrs
                   werks = gs_caract-werks
                   zvalor_sap = gs_caract-zvalor_sap
                   zcontador = gs_caract-zcontador.
          IF sy-subrc = 0.
            lv_index = sy-tabix.
            gs_caract_modif-zvalor_externo = gs_caract-zvalor_externo.
            MODIFY gt_caract_modif FROM gs_caract_modif INDEX lv_index.

          ELSE.

            APPEND gs_caract TO gt_caract_modif.
          ENDIF.

        WHEN 'LOEKZ'.
* Añadimos en la tabla de registros marcados para borrado
          APPEND gs_caract TO gt_caract_del.
      ENDCASE.

    ENDLOOP.
*   Refrescamos el ALV
*    CALL METHOD grid->refresh_table_display.
*   Inicializamos la tabla de la clase
    CLEAR: it_insert.
    REFRESH: it_insert.


  ENDMETHOD.                    "handle_data_changed_finished


  METHOD handle_f4.
    PERFORM f4 USING e_fieldname
                     es_row_no
                     er_event_data
                     et_bad_cells.
  ENDMETHOD.

ENDCLASS.                    "lcl_application IMPLEMENTATION
