
class ZCL_SI_DECEM_MS2_INB definition
  public
  create public .

public section.

  interfaces ZII_SI_DECEM_MS2_INB .
protected section.
private section.
endclass. "ZCL_SI_DECEM_MS2_INB definition
class ZCL_SI_DECEM_MS2_INB implementation.
  METHOD zii_si_decem_ms2_inb~si_decem_ms2_inb.
*------------------------------------------------------------------------------------------
*   Recibimos de MES la decisión de empleo para un lote de inspección MES determinado.
    DATA: wa_row TYPE zdt_decem_l.
*------------------------------------------------------------------------------------------

*   declaración de variables
    DATA: lv_extnumber TYPE balnrext,
          lv_number    TYPE bapi2045ud-insplot,
          lv_ud_data   TYPE bapi2045ud, "Datos p.tomar decisión de empleo
          wa_return    TYPE bapireturn1,
          t_return     TYPE TABLE OF bapiret2,
          wa_return_2  TYPE bapiret2,
          ls_gendata   TYPE bapi2045d_il0,
          lv_objectkey TYPE objnum.

    DATA: num_reg     TYPE sy-tabix,
          lv_prueflos TYPE qplos.

*   variables envio mail.
    DATA: lt_addr        TYPE bcsy_smtpa,
          lo_send_email  TYPE REF TO cl_bcs,
          lo_document    TYPE REF TO cl_document_bcs,
          lo_recipient   TYPE REF TO if_recipient_bcs,
          lv_sent_to_all TYPE os_boolean,
          lo_sender      TYPE REF TO cl_cam_address_bcs,
          lv_sender      TYPE adr6-smtp_addr,
          lv_subject     TYPE so_obj_des,
          lt_message     TYPE soli_tab,
          ls_message     TYPE soli.
*------------------------------------------------------------------------------------------

    DATA(o_log) = NEW zcl_ap_log( object = 'MES_DECEM'
                                  report = 'ZCL_SI_DECEM_MS2_INB'
                                  clave  = zcl_ap_proxy=>GET_MSGGUID( ) ).

*   recuperamos los destinatios del mail en caso de que la interface genere errores.
    SELECT * FROM ztmes_mail
      INTO TABLE @DATA(t_mail)
      WHERE interface = 'CAL'.

    LOOP AT input-mt_decem-row INTO wa_row.
      o_log->log( msgty = 'I'
                  message  = 'Inicio proceso'
                  msgv1    = wa_row-centro
                   msgv2    = wa_row-num_lote_mes
                   msgv3    = wa_row-num_lote_sap
                   msgv4    = wa_row-num_lote_inspeccion_sap ).
*      SELECT prueflos FROM qals
*        INTO TABLE @DATA(t_prueflos)
*        WHERE werk  = @wa_row-centro AND
*              charg = @wa_row-num_lote_sap AND
*              ktextlos = @wa_row-num_lote_mes.
*
*
*      DESCRIBE TABLE t_prueflos LINES num_reg.
*      READ TABLE  t_prueflos  INTO DATA(wa_prueflos) INDEX num_reg.
*
*      lv_prueflos = wa_prueflos-prueflos.

      lv_prueflos = wa_row-num_lote_inspeccion_sap.

      CLEAR: t_return, lv_ud_data, lv_number, wa_return, wa_return_2.
      REFRESH: t_return.


      lv_ud_data-insplot = lv_prueflos. "Nº lote inspección
      lv_ud_data-ud_selected_set = 'DE'. "Conjunto de selección de la decisión de empleo
      lv_ud_data-ud_plant = wa_row-centro. "centro
      lv_ud_data-ud_code_group  = 'DE'."grupo de códigos de decisión de empleo
      lv_ud_data-ud_code = wa_row-de. "Código de decisión de empleo
      lv_ud_data-ud_recorded_by_user = sy-uname. "Creador de la decisión de empleo
      lv_ud_data-ud_recorded_on_date = sy-datum. "Fecha de código para la decisión de empleo
      lv_ud_data-ud_recorded_at_time = sy-uzeit. "Hora de entrada de decisión de empleo
      lv_ud_data-ud_text_line	= ''. "Texto breve p. notificación de la decisión de empleo
      lv_ud_data-ud_force_completion  = 'X'. "Cancelación de inspección permitida
*      lv_ud_data-ud_stock_posting  = 'X'. "Contabilización stocks independiente de proceso no visible


      lv_number = lv_prueflos.

      CALL FUNCTION 'BAPI_INSPLOT_SETUSAGEDECISION'
        EXPORTING
          number  = lv_number
          ud_data = lv_ud_data
*         LANGUAGE             =
        IMPORTING
*         UD_RETURN_DATA       =
*         STOCK_DATA           =
          return  = wa_return
*       TABLES
*         SYSTEM_STATUS        =
*         USER_STATUS          =
        .

      IF wa_return-type = 'E'.
        lv_extnumber = lv_prueflos.

        MOVE-CORRESPONDING wa_return TO wa_return_2.
        APPEND wa_return_2 TO t_return.

        CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
          EXPORTING
            objeto    = 'ZSAP_MES'
            subobjeto = 'ZDECISION_EMPLEO'
            mensajes  = t_return[]
            extnumber = lv_extnumber.

        LOOP AT t_return ASSIGNING FIELD-SYMBOL(<msg>).
          IF <msg>-message IS INITIAL.
            MESSAGE ID <msg>-id TYPE 'S' NUMBER <msg>-number
                    WITH <msg>-message_v1 <msg>-message_v2 <msg>-message_v3 <msg>-message_v4
                    INTO <msg>-message.
          ENDIF.
          o_log->log( msgid    = <msg>-id
                     msgty    = <msg>-type
                     msgno    = <msg>-number
                     message  = <msg>-message
                     msgv1    = wa_row-centro
                     msgv2    = wa_row-num_lote_mes
                     msgv3    = wa_row-num_lote_sap
                     msgv4    = lv_prueflos ).
        ENDLOOP.
        IF sy-subrc NE 0.
          o_log->log( msgty = 'I'
                     message  = 'Fin proceso'
                     msgv1    = wa_row-centro
                       msgv2    = wa_row-num_lote_mes
                       msgv3    = wa_row-num_lote_sap
                       msgv4    = lv_prueflos ).
        ENDIF.

        READ TABLE t_mail INTO DATA(ls_mails) WITH KEY werks = wa_row-centro.
        IF sy-subrc = 0.

          IF ls_mails-mail_1 NE space.
            APPEND ls_mails-mail_1 TO lt_addr.
          ENDIF.
          IF ls_mails-mail_2 NE space.
            APPEND ls_mails-mail_2 TO lt_addr.
          ENDIF.
          IF ls_mails-mail_3 NE space.
            APPEND ls_mails-mail_3 TO lt_addr.
          ENDIF.
          IF ls_mails-mail_4 NE space.
            APPEND ls_mails-mail_4 TO lt_addr.
          ENDIF.
          IF ls_mails-mail_5 NE space.
            APPEND ls_mails-mail_5 TO lt_addr.
          ENDIF.

*         Inicialización de la clase
          lo_send_email = cl_bcs=>create_persistent( ).


*         cuerpo del mail
          CLEAR: lt_message.
          REFRESH: lt_message.
          CONCATENATE 'Se ha producido un error en la interface MES – SAP (CAL) a las' sy-uzeit 'del' sy-datum
            INTO ls_message SEPARATED BY space.
          APPEND ls_message TO lt_message.


*         Crear documento
          lv_subject = 'Error integración MES – SAP (CAL)'.

          lo_document =  cl_document_bcs=>create_document( i_type    =  'HTM'
                                                           i_subject =  lv_subject
                                                           i_text    =  lt_message ).
*         Enviar documento al email
          lo_send_email->set_document( lo_document ).

*         Añadir remitente
*          SELECT SINGLE * FROM usr21
*            INTO @DATA(wa_usr21)
*            WHERE bname = @sy-uname.
*
*          IF sy-subrc = 0.
*            SELECT SINGLE smtp_addr FROM adr6
*              INTO  lv_sender
*              WHERE addrnumber = wa_usr21-addrnumber AND
*              persnumber = wa_usr21-persnumber.
*          ENDIF.

          lv_sender = 'sap@hinojosa.es'.

          lo_sender = cl_cam_address_bcs=>create_internet_address( lv_sender  ).
          lo_send_email->set_sender( i_sender = lo_sender ).

*         Añadir destinatarios al email
          DATA l_emails TYPE string.
          LOOP AT lt_addr ASSIGNING FIELD-SYMBOL(<fs_addr>).
            lo_recipient = cl_cam_address_bcs=>create_internet_address( <fs_addr> ).
            lo_send_email->add_recipient( i_recipient = lo_recipient ).
            __add_lista l_emails <fs_addr>.
          ENDLOOP.


*         Enviar email
          TRY.
              lv_sent_to_all = lo_send_email->send( i_with_error_screen = 'X' ).
            CATCH cx_send_req_bcs .
          ENDTRY.
          o_log->log( p1 = 'Se ha enviado mail a ' p2 = l_emails msgty = 'I'
                                          msgv1    = wa_row-centro msgv2    = wa_row-num_lote_mes msgv3    = wa_row-num_lote_sap msgv4    = lv_prueflos ).
          COMMIT WORK.
        ELSE.
          o_log->log( p1 = 'No se envian errores por mail porque no se encuentran destinatarios' msgty = 'E'
                                          msgv1    = wa_row-centro msgv2    = wa_row-num_lote_mes msgv3    = wa_row-num_lote_sap msgv4    = lv_prueflos ).
        ENDIF.
      ELSE.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.

        CALL FUNCTION 'BAPI_INSPLOT_GETDETAIL'
          EXPORTING
            number       = lv_number
*           LANGUAGE     =
          IMPORTING
            general_data = ls_gendata
*           TASK_LIST_DATA              =
*           STOCK_DATA   =
*           ACCOUNTING_DATA             =
*           USAGE_DECISION_DATA         =
*           CUSTOMER_INCLUDE_DATA       =
*           RETURN       =
*         TABLES
*           SYSTEM_STATUS               =
*           USER_STATUS  =
*           MATERIAL_DOCUMENTS          =
          .

        CONCATENATE ls_gendata-material ls_gendata-batch INTO lv_objectkey.

        CALL FUNCTION 'Z_E80_ENVIO_STOCK_BOBINA'
          EXPORTING
            i_werks          = ls_gendata-plant
*           I_CHARG          =
            i_objek          = lv_objectkey
          EXCEPTIONS
            lote_inexistente = 1
            OTHERS           = 2.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.

        o_log->log( msgty    = 'S'
                    message  = 'Decisión de empleado tomada con éxito'
                    msgv1    = wa_row-centro
                    msgv2    = wa_row-num_lote_mes
                    msgv3    = wa_row-num_lote_sap
                    msgv4    = lv_prueflos ).

      ENDIF.
    ENDLOOP.


  ENDMETHOD.
endclass. "ZCL_SI_DECEM_MS2_INB definition
endclass. "ZCL_SI_DECEM_MS2_INB implementation
