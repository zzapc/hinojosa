*----------------------------------------------------------------------*
*   INCLUDE J_3RMOBVEDF01                                              *
*&---------------------------------------------------------------------*
*&      Form  f4_for_variant
*&---------------------------------------------------------------------*
form f4_for_variant
    changing pp_varnt type slis_vari.

  data: l_exit(1)  type c.

  if sy-ucomm eq 'GET'.
    exit.
  endif.

  call function 'REUSE_ALV_VARIANT_F4'
      exporting
          is_variant          = g_variant
          i_save              = gc_save
          i_tabname_header    = gc_tabname_header
          i_tabname_item      = gc_tabname_item
*           it_default_fieldcat =
      importing
          e_exit              = l_exit
          es_variant          = gx_variant
      exceptions
          not_found = 2.
  if sy-subrc = 2.
    message id sy-msgid type 'S'      number sy-msgno
            with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  else.
    if l_exit = space.
      pp_varnt = gx_variant-variant.
    endif.
  endif.
endform.                    " f4_for_variant
*&---------------------------------------------------------------------*
*&      Form  test_matkl
*&---------------------------------------------------------------------*
form test_matkl
    tables p_so_matkl type tt_so_matkl
    changing p_tbmattyp type type_tab.

  data:
      l_rec   type sytabix,
      l_matkl type matkl.                                   "#EC NEEDED

  if sy-ucomm eq 'GET'.
    exit.
  endif.

  if sy-dynnr = 1000.
    if tabs-dynnr = 500.
      describe table p_so_matkl lines l_rec.

      if not l_rec is initial.
        select matkl from t023
            into l_matkl up to 1 rows
            where matkl in p_so_matkl.
        endselect.
        if not sy-subrc is initial.
          if sy-ucomm eq 'ONLI'.
            l_matkl = p_so_matkl-low.
            message e006 with l_matkl.
          endif.
        endif.
      endif.
    endif.
  endif.

  describe table p_so_matkl lines l_rec.

  if not l_rec is initial.
    select matkl from t023
        into l_matkl up to 1 rows
        where matkl in p_so_matkl.
    endselect.
    if not sy-subrc is initial.
      if tabs-dynnr ne 0500.
        sy-ucomm = 'TAB00'.
        ok_code  = 'TAB00'.
        tabs-dynnr = 0500.
        tabs-activetab = 'TAB00'.
      endif.
    endif.
    concatenate '@1E@' text-tb1 into p_tbmattyp.
  endif.

endform.                    " test_matkl
*&---------------------------------------------------------------------*
*&      Form  test_mtart
*&---------------------------------------------------------------------*
form test_mtart
    tables p_so_mtart type tt_so_mtart
    changing p_tbmattyp type type_tab.

  data:
      l_mtart type mtart,
      l_rec   type sytabix.

*IF sy-ucomm NE 'ONLI'.
*    EXIT.
*ENDIF.

  if sy-ucomm eq 'GET'.
    exit.
  endif.

  if sy-dynnr = 1000.
    if tabs-dynnr = 500.
      describe table p_so_mtart lines l_rec.
      if not l_rec is initial.
        select single mtart from t134 into t134             "#EC *
            bypassing buffer
            where mtart in p_so_mtart.
        if not sy-subrc is initial.
          if sy-ucomm eq 'ONLI'.
            l_mtart = p_so_mtart-low.
            message e005 with l_mtart.
          endif.
        endif.
      endif.
    endif.
  endif.

  describe table p_so_mtart lines l_rec.

  if not l_rec is initial.

    select single mtart from t134 into t134                 "#EC *
        bypassing buffer
        where mtart in p_so_mtart.
    if not sy-subrc is initial.
      if tabs-dynnr ne 0500.
        sy-ucomm = 'TAB00'.
        ok_code  = 'TAB00'.
        tabs-dynnr = 0500.
        tabs-activetab = 'TAB00'.
      endif.
    endif.

    concatenate '@1E@' text-tb1 into p_tbmattyp.
  endif.

endform.                    " test_mtart
*&---------------------------------------------------------------------*
*&      Form  test_werk
*&---------------------------------------------------------------------*
form test_werk
    tables p_so_werks type tt_so_werks.

  data: l_rec       type sytabix,
        lw_so_werks like line of p_so_werks,
        l_werks     type werks_d,
        l_already   type type_1c ,
        l_modify    type type_1c .                          "#EC NEEDED

  import l_already l_modify from memory id g_key_memory.

  if not l_already is initial.
    exit.
  endif.

*IF sy-ucomm NE 'ONLI'.
*    EXIT.
*ENDIF.

  if sy-ucomm eq 'GET'.
    exit.
  endif.

  describe table p_so_werks lines l_rec.
  if l_rec is initial.
    exit.
  endif.

  if sy-ucomm eq 'ONLI'.
    if p_so_werks-low is initial.
      message w001.
    endif.
  endif.

  select single werks from t001w into l_werks               "#EC *
      where werks in p_so_werks.
  if not sy-subrc is initial.
    if  l_rec eq 1                                               "1978294 start
    and p_so_werks-sign = 'I'
    and p_so_werks-option = 'EQ'.
      message e002 with p_so_werks-low.                          "1417445
    else.
      message e030.
    endif.                                                       "1978294 end
  endif.

  loop at p_so_werks into lw_so_werks.
    l_rec = sy-tabix.
    authority-check object 'M_MATE_WRK'
       id 'ACTVT' field '03'
       id 'WERKS' field lw_so_werks-low.
    if not sy-subrc is initial.
      message e016 with lw_so_werks-low.
      delete p_so_werks index l_rec.
    endif.
  endloop.

endform.                    " test_werk

*&---------------------------------------------------------------------*
*&      Form  test_matnr
*&---------------------------------------------------------------------*
form test_matnr
    tables p_so_matnr type j3rm_t_matnr
           p_so_werks type tt_so_werks                      "#EC *
           pgso_matnr type j3rm_t_matnr.

  data:
      l_rec    type sytabix,
      l_banner type type_1c ,
      l_matnr  type matnr,
      lv_cnt   type i,                                         "1978294
*    l_matnr1 LIKE mara-matnr,       "#EC NEEDED
      l_werks  type werks_d,
      lt_matnr type standard table of type_matnr_struc,
      lwso_matnr type j3rm_s_matnr,
      ltso_matnr type j3rm_t_matnr.

  ltso_matnr[] = p_so_matnr[].
*if sy-ucomm ne 'ONLI'.
*    exit.
*endif.

  if sy-ucomm eq 'GET'.
    exit.
  endif.

  DESCRIBE TABLE p_so_matnr LINES lv_cnt.                      "1978294 start
  if lv_cnt ne 1
  or p_so_matnr-sign ne 'I'
  or p_so_matnr-option ne 'EQ'.
    return.
  endif.                                                       "1978294 end
  l_matnr = p_so_matnr-low.

  DESCRIBE TABLE p_so_werks LINES lv_cnt.                      "1978294 start
  if lv_cnt = 1
  and p_so_werks-sign = 'I'
  and p_so_werks-option = 'EQ'.
    l_werks = p_so_werks-low.
  endif.                                                       "1978294 end

* check star in material line selection
  replace gc_sign_star into l_matnr with gc_symbol_0.

  if sy-subrc is initial.
    l_banner          = gc_true.
    l_matnr           = p_so_matnr-low.
    lwso_matnr-sign   = gc_sign_i.
    lwso_matnr-option = gc_option_cp.
    lwso_matnr-low    = l_matnr.
    do 18 times.
      concatenate gc_symbol_0 lwso_matnr-low
          into lwso_matnr-low.
      append lwso_matnr to ltso_matnr.
      if lwso_matnr-low+17(1) = gc_sign_star.
        append lwso_matnr to ltso_matnr.
        exit.
      endif.
    enddo.
  endif.

  if not l_matnr is initial
      and not p_so_werks is initial.                           "1978294
    select matnr from marc up to 1 rows
        appending table lt_matnr
        where matnr in ltso_matnr
          and werks in p_so_werks.
    select matnr from msku up to 1 rows
        appending table lt_matnr
        where matnr in ltso_matnr
          and werks in p_so_werks.
    select matnr from mska up to 1 rows
        appending table lt_matnr
        where matnr in ltso_matnr
          and werks in p_so_werks.
    select matnr from mspr up to 1 rows
        appending table lt_matnr
        where matnr in ltso_matnr
          and werks in p_so_werks.
    select matnr from mslb up to 1 rows
        appending table lt_matnr
        where matnr in ltso_matnr
          and werks in p_so_werks.
    describe table lt_matnr lines l_rec.
    if l_rec is initial.
      if l_werks is not initial.                               "1978294 start
        message e008 with l_matnr l_werks.
      else.
        message e009 with l_matnr.
      endif.                                                   "1978294 end
    endif.
  elseif not l_matnr is initial
      and p_so_werks is initial.                               "1978294
    select matnr from mara up to 1 rows
        into table lt_matnr
        where matnr in ltso_matnr.
    if not sy-subrc is initial.
      message e009 with l_matnr.
    endif.
  endif.

  if not l_banner is initial.
    pgso_matnr[] = ltso_matnr[].
  endif.

endform.                    " test_matnr
*&---------------------------------------------------------------------*
*&      Form  test_bwtar
*&---------------------------------------------------------------------*
form test_bwtar
    tables p_so_bwtar type tt_so_bwtar
    using  p_event type type_1c
    changing p_tbmattyp type type_tab.

  data:
      l_bwtar type bwtar_d,                                 "#EC NEEDED
      l_not   type type_1c,
      l_ucomm type syucomm,
      l_rec   type sytabix.

  describe table p_so_bwtar lines l_rec.

  if not l_rec is initial.
    select single bwtar from mbew into l_bwtar              "#EC *
        where bwtar in p_so_bwtar.
    if not sy-subrc is initial.
      select single bwtar from qbew into l_bwtar            "#EC *
          where bwtar in p_so_bwtar.
      if not sy-subrc is initial.
        select single bwtar from ebew into l_bwtar          "#EC *
            where bwtar in p_so_bwtar.
        if not sy-subrc is initial.
          l_not = gc_true.
          if tabs-dynnr ne 0500.
            l_ucomm  = sy-ucomm.
            sy-ucomm = 'TAB00'.                           "#EC WRITE_OK
            sy-dynnr = 0500.                              "#EC WRITE_OK
            ok_code  = 'TAB00'.
            tabs-dynnr = 0500.
            tabs-activetab = 'TAB00'.
          endif.
        endif.
      endif.
    endif.
    if p_tbmattyp(4) ne '@1E@'.
      concatenate '@1E@' text-tb1 into p_tbmattyp.
    endif.
  endif.

  if sy-dynnr = 0500.
    if l_not = gc_true
    and l_rec   = 1                                            "1978294
    and p_so_bwtar-sign   = 'I'                                "1978294
    and p_so_bwtar-option = 'EQ'.                              "1978294

      if p_event = gc_true
          or sy-ucomm = 'ONLI'
          or l_ucomm  = 'ONLI'.
        message e007 with p_so_bwtar-low.
      else.
        message w007 with p_so_bwtar-low.
      endif.
    endif.
  endif.


endform.                    " test_bwtar
*&---------------------------------------------------------------------*
*&      Form  test_charg
*&---------------------------------------------------------------------*
form test_charg
    tables p_so_charg type tt_so_charg
    using  p_event type type_1c
    changing p_tbmattyp type type_tab.

  data:
      l_charg type charg_d,                                 "#EC NEEDED
      l_not   type type_1c,
      l_ucomm type syucomm,
      l_rec   type sytabix.

  describe table p_so_charg lines l_rec.

* exclude batch processing                                     "1114541
  If l_rec Is Not Initial And pa_batch Is Initial.             "1114541
    Clear p_so_charg[]. Clear p_so_charg.                      "1114541
    Clear l_rec.                                               "1114541
    Message W285(M7).       "Batch will be reset               "1114541
  Endif.                                                       "1114541

  if not l_rec is initial.
    select single charg from mcha into l_charg              "#EC *
        where charg in p_so_charg.
    if not sy-subrc is initial.
      l_not = gc_true.
      if tabs-dynnr ne 0500.
        l_ucomm  = sy-ucomm.
        sy-ucomm = 'TAB00'.                               "#EC WRITE_OK
        sy-dynnr = 0500.                                  "#EC WRITE_OK
        ok_code  = 'TAB00'.
        tabs-dynnr = 0500.
        tabs-activetab = 'TAB00'.
      endif.
    endif.
    if p_tbmattyp(4) ne '@1E@'.
      concatenate '@1E@' text-tb1 into p_tbmattyp.
    endif.
  endif.

  if sy-dynnr = 0500.
    if l_not = gc_true
    and l_rec   = 1                                            "1978294
    and p_so_charg-sign   = 'I'                                "1978294
    and p_so_charg-option = 'EQ'.                              "1978294

      if p_event = gc_true
          or sy-ucomm = 'ONLI'
          or l_ucomm  = 'ONLI'.
        message e032 with p_so_charg-low.                      "1978294
      else.
        message w032 with p_so_charg-low.                      "1978294
      endif.
    endif.
  endif.


endform.                    " test_charg

*&---------------------------------------------------------------------*
*&      Form  selektion_vorbereiten
*&---------------------------------------------------------------------*
*FORM selektion_vorbereiten.
*
*TYPES:
*    BEGIN OF type_projekt,
*        pspnr TYPE ps_psp_pnr,
*        post1 TYPE ps_post1,
*    END OF type_projekt.
*
*DATA:
*    lt_projekt TYPE STANDARD TABLE OF type_projekt,
*    lw_projekt TYPE type_projekt.
*
*REFRESH so_pspnr.
*IF NOT so_posid IS INITIAL.
**    CLEAR xnot_q.
*    SELECT pspnr psphi post1
*           FROM prps INTO CORRESPONDING FIELDS OF TABLE lt_projekt
*           WHERE posid IN so_posid.
*    IF sy-subrc IS INITIAL.
*        SORT lt_projekt.
*        LOOP AT Lt_projekt INTO lw_projekt.
*            MOVE lw_projekt-pspnr TO so_pspnr-low.
*            MOVE gc_option_eq TO so_pspnr-option.
*            MOVE gc_sign_i  TO so_pspnr-sign.
*            APPEND so_pspnr.
*        ENDLOOP.
**    else.
**        xnot_q = gc_true.
*    ENDIF.
*ENDIF.
*
*ENDFORM.                    " selektion_vorbereiten
*&---------------------------------------------------------------------*
*&      Form  test_save_data
*&---------------------------------------------------------------------*
form test_save_data
    using p_savem type j_3rmoptved7
          p_restm type j_3rmoptved8
          p_bukrs type bukrs
          p_hkont type hkont
          p_werks type werks_d
          p_budat type budat
          p_rever type j_3rmoptved3
          p_adcst type j_3rmoptved5.

  data: l_ndxkey    type indx_srtfd,
        l_relid     type indx_relid,
        l_mode(1)   type c,                                    "1430397
        l_result(1) type c,
        l_already   type type_1c ,
        l_modify    type type_1c .                          "#EC NEEDED

  import l_already l_modify from memory id g_key_memory.

  if not l_already is initial.
    exit.
  endif.

  if p_savem is initial and p_restm is initial.                "1430397
    exit.
  endif.
  if not p_savem is initial
      and not p_restm is initial.
    message e014.
  endif.

  check sy-ucomm = 'ONLI'.                                     "1430397 start

  perform fill_indxkey
    using p_werks
          p_bukrs
          p_hkont
          p_budat
          p_rever
          p_adcst
    changing l_ndxkey
             l_mode.                                           "1430397 end

  if l_ndxkey is initial.
    exit.
  endif.

  select single relid
    from indx
    into l_relid
      where relid = 'IM'
        and srtfd = l_ndxkey.                               "#EC *

  if sy-subrc is initial and not p_savem is initial.           "1430397
*   stored list exists in Save mode                            "1430397
    if g_bkgrd is initial.
      call function 'POPUP_TO_CONFIRM'
           exporting
               titlebar              = text-101
*                 DIAGNOSE_OBJECT       = ' '
               text_question         = text-100
               text_button_1         = text-030
               icon_button_1         = 'ICON_OKAY'
               text_button_2         = text-031
               icon_button_2         = 'ICON_CANCEL'
               default_button        = '2'
               display_cancel_button = ' '
*                 USERDEFINED_F1_HELP   = ' '
               start_column          = 25
               start_row             = 6
               popup_type            = 'ICON_DELETE'
          importing
               answer                = l_result
*            TABLES
*                 PARAMETER             =
           exceptions
                text_not_found        = 1
           others                = 2.
      if sy-subrc is initial and l_result = gc_symbol_1.
        g_erase = gc_true.
      else.
        exit.
      endif.
    else.
      g_erase = gc_true.   "stored list will be overwritten    "1430397 start
      if l_mode = 1.
        message w015
          with p_werks p_budat+4(2) p_budat(4).
      elseif l_mode = 2.
        message w024
          with p_bukrs p_hkont p_budat+4(2) p_budat(4).
      endif.                                                   "1430397 end
    endif.
    export l_already l_modify g_erase                          "1163961
        to memory id g_key_memory.                             "1163961

  elseif not sy-subrc is initial and not p_restm is initial.   "1430397 start
*   stored list doesn't exist in Read mode
    if g_bkgrd is initial.
      call function 'POPUP_TO_CONFIRM'
           exporting
               titlebar              = text-103
               text_question         = text-102
               text_button_1         = text-030
               icon_button_1         = 'ICON_OKAY'
               text_button_2         = text-031
               icon_button_2         = 'ICON_CANCEL'
               default_button        = '2'
               display_cancel_button = ' '
          importing
               answer                = l_result
           exceptions
               text_not_found        = 1
               others                = 2.
      if sy-subrc is initial and not l_result = gc_symbol_1.
        g_erase = gc_true. "data will not be processed
      else.
        exit.
      endif.
    else.
      g_erase = gc_false.  "data will be processed
      if l_mode = 1.
        message w025
          with p_werks p_budat+4(2) p_budat(4).
      elseif l_mode = 2.
        message w026
          with p_bukrs p_hkont p_budat+4(2) p_budat(4).
      endif.
    endif.
    export l_already l_modify g_erase
        to memory id g_key_memory.                             "1430397 end
  endif.

endform.                    " test_save_data
*&---------------------------------------------------------------------*
*&      Form  test_lgort
*&---------------------------------------------------------------------*
form test_lgort
    tables p_so_werks type tt_so_werks
           p_so_lgort type tt_so_lgort
    using  p_event type type_1c
    changing p_tbmattyp type type_tab.

  data:
      l_rec   type sytabix,
      l_recw  type i,                                          "1978294
      l_not   type type_1c,
      l_ucomm type syucomm,
      l_lgort type lgort_d.                                 "#EC NEEDED

  if sy-ucomm eq 'GET'.
    exit.
  endif.

  if p_so_lgort-low = gc_str_phantom.
    exit.
  endif.

  describe table p_so_lgort lines l_rec.

  if not l_rec is initial.

    select single lgort from t001l into l_lgort             "#EC *
        where werks in p_so_werks
          and lgort in p_so_lgort.
    if not sy-subrc is initial.
      l_not = gc_true.
      if tabs-dynnr ne 0500.
        l_ucomm  = sy-ucomm.
        sy-ucomm = 'TAB00'.                               "#EC WRITE_OK
        sy-dynnr = 0500.                                  "#EC WRITE_OK
        ok_code  = 'TAB00'.
        tabs-dynnr = 0500.
        tabs-activetab = 'TAB00'.
      endif.
    endif.
    if p_tbmattyp(4) ne '@1E@'.
      concatenate '@1E@' text-tb1 into p_tbmattyp.
    endif.
  else.
    exit.
  endif.

  describe table p_so_werks lines l_recw.                      "1978294 start

  if sy-dynnr = 0500.
    if l_not = gc_true
    and l_rec  = 1 and l_recw = 1
    and p_so_lgort-sign   = 'I' and p_so_lgort-option = 'EQ'
    and p_so_werks-sign   = 'I' and p_so_werks-option = 'EQ'.  "1978294 end
      if p_event = gc_true
          or sy-ucomm = 'ONLI'
          or l_ucomm  = 'ONLI'.
        message e010 with p_so_lgort-low p_so_werks-low.
      else.
        message w010 with p_so_lgort-low p_so_werks-low.
      endif.
    endif.
  endif.


endform.                    " test_lgort
*&---------------------------------------------------------------------*
*&      Form  pai_of_selection_screen
*&---------------------------------------------------------------------*
form pai_of_selection_screen
     using p_pa_varnt type slis_vari
           p_pa_docs  type j_3rmoptved2
*           p_pa_savem TYPE j_3rmoptved7
*           p_bukrs TYPE bukrs
*           p_hkont LIKE bseg-hkont
*           p_werks type WERKS_D
     changing p_g_variant  like g_variant
              p_gx_variant like gx_variant
              p_g_repid    like g_repid.

  data l_repid(40) type c.

  if sy-ucomm ne 'ONLI'.
    exit.
  endif.

  if not p_pa_docs is initial.
    concatenate p_g_repid 'D' into l_repid.
  else.
    concatenate p_g_repid 'O' into l_repid.
  endif.

  if not p_pa_varnt is initial.
    move p_g_variant to p_gx_variant.
    move p_pa_varnt  to gx_variant-variant.
    call function 'REUSE_ALV_VARIANT_EXISTENCE'
      exporting
        i_save     = gc_save
      changing
        cs_variant = p_gx_variant.
    p_g_variant = p_gx_variant.
  else.
    clear p_g_variant.
    g_variant-report = l_repid.
  endif.

endform.                    " pai_of_selection_screen
*&---------------------------------------------------------------------*
*&      Form  refill_save_select_parameters
*&---------------------------------------------------------------------*
form refill_save_select_parameters
    using p_savem type j_3rmoptved7
          p_bukrs type bukrs
          p_hkont type hkont
          p_werks type werks_d.

  data:
        l_already(1) type c,
        l_modify(1)  type c.

  if sy-ucomm eq 'GET'.
    exit.
  endif.

  if p_savem is initial.
    exit.
  endif.

  import l_already l_modify from memory id g_key_memory.
  if sy-subrc is initial.
    if not l_already is initial.
      if g_bkgrd is initial and not l_modify is initial.
        message i011.
      endif.
      if not g_bkgrd is initial and not l_modify is initial.
        message w011.
      endif.
      exit.
    endif.
  endif.

  if not p_werks is initial and p_bukrs is initial
                            and p_hkont is initial.            "1254987
*   save on Plant level
    check sy-ucomm = 'ONLI' or sy-ucomm = 'OPT1'.              "1254987
    perform save_werk_and_stop.

  elseif p_werks is initial and not p_bukrs is initial
                            and not p_hkont is initial.
*   save on Company Code and G/L Account level
    check sy-ucomm = 'ONLI' or sy-ucomm = 'OPT1'.              "1254987
    perform save_bukrs_hkont_and_stop.

  else.
*   it's not possible to save report with other parameters
    message e012.
  endif.

endform.                    " refill_save_select_parameters
*&---------------------------------------------------------------------*
*&      Form  refill_rest_select_parameters
*&---------------------------------------------------------------------*
form refill_rest_select_parameters
    using p_restm type j_3rmoptved8
          p_savem type j_3rmoptved7
          p_bukrs type bukrs
          p_hkont type hkont
          p_werks type werks_d.

  data:
        l_already(1) type c,
        l_modify(1)  type c.

  if p_restm is initial.
    exit.
  endif.

  if not p_restm is initial and
      not p_savem is initial.
    message e014.
    exit.
  endif.

  import l_already l_modify from memory id g_key_memory.
  if sy-subrc is initial.
    if not l_already is initial.
      if g_bkgrd is initial and not l_modify is initial.
        message i011.
      endif.
      if not g_bkgrd is initial and not l_modify is initial.
        message w011.
      endif.
      exit.
    endif.
  endif.

  if not p_werks is initial and p_bukrs is initial
                            and p_hkont is initial.            "1254987
*   restore on Plant level
    check sy-ucomm = 'ONLI' or sy-ucomm = 'OPT1'.              "1254987
    perform rest_werk_and_stop.

  elseif p_werks is initial and not p_bukrs is initial
                            and not p_hkont is initial.
*   restore on Company Code and G/L Account level
    check sy-ucomm = 'ONLI' or sy-ucomm = 'OPT1'.              "1254987
    perform rest_bukrs_hkont_and_stop.

  else.
*   it's not possible to restore report with other parameters
    message e013.
  endif.

endform.                    " refill_rest_select_parameters
*&---------------------------------------------------------------------*
*&      Form  rest_bukrs_hkont_and_stop
*&---------------------------------------------------------------------*
form rest_bukrs_hkont_and_stop.

  data:
      l_already type type_1c ,
      l_modify  type type_1c ,
      lcur_rec  type sytabix,
      lw_seltab type rsparams,
      wa_seltab type rsparams,
      d1        type d,
      d2        type d.

  refresh seltab_cur.
  call function 'RS_REFRESH_FROM_SELECTOPTIONS'
    exporting
      curr_report     = g_repid
    tables
      selection_table = seltab_cur
    exceptions
      not_found       = 1
      no_report       = 2
      others          = 3.
  if sy-subrc is initial.
    loop at seltab_cur into lw_seltab.
      wa_seltab = lw_seltab.
      lcur_rec = sy-tabix.
      at new selname.
        case wa_seltab-selname.
          when 'PA_ONLSP' or 'SO_WERKS' or 'SO_MATKL' or
               'SO_MTART' or 'SO_SOBKZ' or 'SO_BWTAR' or
               'SO_LGORT' or 'SO_MATNR' or
               'SO_KUNNR' or 'SO_LIFNR' or 'SO_VBELN' or
               'SO_POSID'.
            update_selection_record.       " macro
          when 'PA_MOVED'.
            update_selection_record_1.                      " macro 1
          when 'SO_HKONT' or 'SO_BUKRS'.
            update_selection_record_2.                      " macro 2
          when 'SO_BUDAT'.
            update_selection_record_3.                      " macro 3
        endcase.
        continue.
      endat.
      delete seltab_cur index lcur_rec.
      l_modify = gc_true.
    endloop.
  endif.

  l_already = gc_true.

  export l_already l_modify g_erase to memory id g_key_memory. "1163961

  submit (g_repid) with selection-table seltab_cur
      and return.

  g_exit = gc_true.

  stop.

endform.                    " rest_bukrs_hkont_and_stop
*&---------------------------------------------------------------------*
*&      Form  rest_werk_and_stop
*&---------------------------------------------------------------------*
form rest_werk_and_stop.

  data:
      l_already type type_1c ,
      l_modify  type type_1c ,
      lcur_rec  type sytabix,
      lw_seltab type rsparams,
      wa_seltab type rsparams,
      d1        type d,
      d2        type d.

  refresh seltab_cur.
  call function 'RS_REFRESH_FROM_SELECTOPTIONS'
    exporting
      curr_report     = g_repid
    tables
      selection_table = seltab_cur
    exceptions
      not_found       = 1
      no_report       = 2
      others          = 3.
  if sy-subrc is initial.
    loop at seltab_cur into lw_seltab.
      wa_seltab = lw_seltab.
      lcur_rec = sy-tabix.
      at new selname.
        case wa_seltab-selname.
          when 'PA_ONLSP' or 'SO_HKONT' or 'SO_MATKL' or
               'SO_MTART' or 'SO_SOBKZ' or 'SO_BWTAR' or
               'SO_LGORT' or 'SO_MATNR' or
               'SO_KUNNR' or 'SO_LIFNR' or 'SO_VBELN' or
               'SO_POSID' or 'SO_BUKRS'.
            update_selection_record.       " macro
          when 'PA_MOVED'.
            update_selection_record_1.                      " macro 1
          when 'SO_WERKS'.
            update_selection_record_2.                      " macro 2
          when 'SO_BUDAT'.
            update_selection_record_3.                      " macro 3
        endcase.
        continue.
      endat.
      delete seltab_cur index lcur_rec.
      l_modify = gc_true.
    endloop.
  endif.

  l_already = gc_true.

  export l_already l_modify g_erase to memory id g_key_memory. "1163961

  submit (g_repid) with selection-table seltab_cur
      and return.

  g_exit = gc_true.

  stop.

endform.                    " rest_werk_and_stop
*&---------------------------------------------------------------------*
*&      Form  save_bukrs_hkont_and_stop
*&---------------------------------------------------------------------*
form save_bukrs_hkont_and_stop.

  data:
      l_already type type_1c ,
      l_modify  type type_1c ,
      lcur_rec  type sytabix,
      lw_seltab type rsparams,
      wa_seltab type rsparams,
      d1        type d,
      d2        type d.

  refresh seltab_cur.

  call function 'RS_REFRESH_FROM_SELECTOPTIONS'
    exporting
      curr_report     = g_repid
    tables
      selection_table = seltab_cur
    exceptions
      not_found       = 1
      no_report       = 2
      others          = 3.

  if sy-subrc is initial.
    loop at seltab_cur into lw_seltab.
      wa_seltab = lw_seltab.
      lcur_rec = sy-tabix.
      at new selname.
        case wa_seltab-selname.
          when 'PA_RESTM' or 'PA_ONLSP' or 'SO_WERKS' or
               'SO_MATKL' or 'SO_MTART' or 'SO_SOBKZ' or
               'SO_BWTAR' or 'SO_LGORT' or 'SO_MATNR' or
               'SO_KUNNR' or 'SO_LIFNR' or 'SO_VBELN' or
               'SO_POSID'.
            update_selection_record.       " macro
          when 'PA_MOVED'.
            update_selection_record_1.                      " macro 1
          when 'SO_HKONT' or 'SO_BUKRS'.
            update_selection_record_2.                      " macro 2
          when 'SO_BUDAT'.
            update_selection_record_3.                      " macro 3
        endcase.
        continue.
      endat.
      delete seltab_cur index lcur_rec.
      l_modify = gc_true.
    endloop.
  endif.

  l_already = gc_true.

  export l_already l_modify g_erase to memory id g_key_memory. "1163961

  submit (g_repid) with selection-table seltab_cur and return.

  g_exit = gc_true.

  stop.

endform.                    " save_bukrs_hkont_and_stop
*&---------------------------------------------------------------------*
*&      Form  save_werk_and_stop
*&---------------------------------------------------------------------*
form save_werk_and_stop.

  data:
      l_already type type_1c ,
      l_modify  type type_1c ,
      lcur_rec  type sytabix,
      lw_seltab type rsparams,
      wa_seltab type rsparams,
      d1        type d,
      d2        type d.

  refresh seltab_cur.

  call function 'RS_REFRESH_FROM_SELECTOPTIONS'
    exporting
      curr_report     = g_repid
    tables
      selection_table = seltab_cur
    exceptions
      not_found       = 1
      no_report       = 2
      others          = 3.

  if sy-subrc is initial.
    loop at seltab_cur into lw_seltab.
      wa_seltab = lw_seltab.
      lcur_rec = sy-tabix.
      at new selname.
        case wa_seltab-selname.
          when 'PA_RESTM' or 'PA_ONLSP' or 'SO_HKONT' or
               'SO_MATKL' or 'SO_MTART' or 'SO_SOBKZ' or
               'SO_BWTAR' or 'SO_LGORT' or 'SO_MATNR' or
               'SO_KUNNR' or 'SO_LIFNR' or 'SO_VBELN' or
               'SO_POSID' or 'SO_BUKRS'.
            update_selection_record.       " macro
          when 'PA_MOVED'.
            update_selection_record_1.                      " macro 1
          when 'SO_WERKS'.
            update_selection_record_2.                      " macro 2
          when 'SO_BUDAT'.
            update_selection_record_3.                      " macro 3
        endcase.
        continue.
      endat.
      delete seltab_cur index lcur_rec.
      l_modify = gc_true.
    endloop.
  endif.
  l_already = gc_true.
  export l_already l_modify g_erase to memory id g_key_memory. "1163961
  submit (g_repid) with selection-table seltab_cur and return.
  g_exit = gc_true.
  stop.

endform.                    " save_werk_and_stop
*&---------------------------------------------------------------------*
*&      Form  test_bukrs
*&---------------------------------------------------------------------*
form test_bukrs
    tables pso_werks type tt_so_werks
    using  pso_bukrs type bukrs.

  data: l_werks type werks_d,
        l_bukrs type bukrs,
        where_cond   type string,                              "1417445
        lv_some      type char1,                               "1978294 start
        lv_rec       type i,
        lv_one       type char1,                               "1978294 end
        lt_bukrs     type range of bukrs with header line.

  if sy-ucomm eq 'GET'.
    exit.
  endif.

  check pso_bukrs is not initial or pso_werks is not initial.  "1417445

  if pso_bukrs is not initial.
    lt_bukrs-sign = gc_sign_i.
    lt_bukrs-option = gc_option_eq.
    lt_bukrs-low = pso_bukrs.
    Append lt_bukrs.
    Call Function 'BUKRS_AUTHORITY_CHECK'
      Exporting xdatabase = 'B'
      Tables    xbukreis  = lt_bukrs.
  endif.

  if pso_werks is not initial and pso_bukrs is not initial.
    describe table pso_werks lines lv_rec.                     "1978294 start
    if lv_rec eq 1
    and pso_werks-sign   eq 'I'
    and pso_werks-option eq 'EQ'.
      lv_one = 'X'.
    endif.                                                     "1978294 end

    select * from t001w where werks in pso_werks.              "1666710 start
      select single * from t001k where bwkey = t001w-bwkey
                                   and bukrs = pso_bukrs.
      if sy-subrc ne 0.
        if lv_one = 'X'.                                       "1978294 start
          message e018 with t001w-werks pso_bukrs.
        endif.
      else.
        lv_some = 'X'.                                         "1978294 end
      endif.
    endselect.                                                 "1666710 end

    if lv_some is initial.                                     "1978294 start
      message e031 with pso_bukrs.
    endif.                                                     "1978294 end
  endif.

endform.                    " test_bukrs
*&---------------------------------------------------------------------*
*&      Form  check_update_seltabs
*&---------------------------------------------------------------------*
form check_update_seltabs
    tables p_so_lgort type tt_so_lgort
           p_so_charg type tt_so_charg
           p_so_mtart type tt_so_mtart
           p_so_matkl type tt_so_matkl
           p_so_bwtar type tt_so_bwtar
           p_so_sobkz type tt_so_sobkz
           p_so_kunnr type tt_so_kunnr
           p_so_lifnr type tt_so_lifnr
           p_so_vbeln type tt_so_vbeln
           p_so_posid type tt_so_posid
    using p_pa_onlsp  type type_1c
    changing p_tbmattyp type type_tab
             p_tbspecst type type_tab.                      "#EC *

  data:
      l_rec   type sytabix.

IF p_so_lgort IS NOT INITIAL OR                           "ACC30 >>>
  p_so_charg IS NOT INITIAL OR
  p_so_mtart IS NOT INITIAL OR
  p_so_matkl IS NOT INITIAL OR
  p_so_bwtar IS NOT INITIAL.
  CALL FUNCTION 'ICON_CREATE'
    EXPORTING
      name                  = 'ICON_DISPLAY_MORE'
      text                  = text-tb1
      info                  = text-tb1
    IMPORTING
      RESULT                = p_tbmattyp
    EXCEPTIONS
      OTHERS                = 0.
ELSE.
  CALL FUNCTION 'ICON_CREATE'
    EXPORTING
      name                  = 'ICON_ENTER_MORE'
      text                  = text-tb1
      info                  = text-tb1
    IMPORTING
      RESULT                = p_tbmattyp
    EXCEPTIONS
      OTHERS                = 0.
ENDIF.                                                   "ACC30 <<<

IF p_pa_onlsp IS NOT INITIAL OR                          "ACC30 >>>
  p_so_sobkz IS NOT INITIAL OR
  p_so_kunnr IS NOT INITIAL OR
  p_so_lifnr IS NOT INITIAL OR
  p_so_vbeln IS NOT INITIAL OR
  p_so_posid IS NOT INITIAL.
  CALL FUNCTION 'ICON_CREATE'
   EXPORTING
     name                  = 'ICON_DISPLAY_MORE'
     text                  = text-tb2
     info                  = text-tb2
   IMPORTING
     RESULT                = p_tbspecst
   EXCEPTIONS
     OTHERS                = 0.
ELSE.
    CALL FUNCTION 'ICON_CREATE'
      EXPORTING
        name                  = 'ICON_ENTER_MORE'
        text                  = text-tb2
        info                  = text-tb2
      IMPORTING
        RESULT                = p_tbspecst
      EXCEPTIONS
        OTHERS                = 0.
ENDIF.                                                   "ACC30 <<<


endform.                    " check_update_seltabs
*&---------------------------------------------------------------------*
*&      Form  check_account
*&---------------------------------------------------------------------*
form check_account
    tables pso_saknr type j3rm_t_saknr
    using  pp_bukrs  type bukrs.                            "#EC *

  data:
      l_rec   type sytabix,
      l_saknr type saknr.

  if sy-ucomm eq 'GET'.
    exit.
  endif.

  describe table pso_saknr lines l_rec.

  if l_rec is initial.
    exit.
  endif.

  if not pp_bukrs is initial.
    select saknr up to 1 rows
        into l_saknr
        from skb1     "#EC CI_GENBUFF
        where bukrs = pp_bukrs
          and saknr in pso_saknr.                     "#EC CI_SGLSELECT
    endselect.
    if l_saknr is initial.
      message e020 with pp_bukrs.
    endif.
  endif.

endform.                    " check_account
*&---------------------------------------------------------------------*
*&      Form  test_variant
*&---------------------------------------------------------------------*
form test_variant
    using ppa_docs  type j_3rmoptved2
          pg_repid  like sy-repid
          ppa_varnt type slis_vari.

  if sy-ucomm eq 'GET'.
    exit.
  endif.

  clear g_variant.

  if ppa_varnt <> space.
    g_variant-variant = ppa_varnt.
  else.
    exit.
  endif.

  if ppa_docs is initial.
    concatenate pg_repid 'O' into g_variant-report.
  else.
    concatenate pg_repid 'D' into g_variant-report.
  endif.

  gx_variant = g_variant.

  call function 'REUSE_ALV_VARIANT_DEFAULT_GET'
    exporting
      i_save     = gc_save
    changing
      cs_variant = gx_variant
    exceptions
      not_found  = 2.
  if sy-subrc = 2.
    message e021.
  endif.


endform.                    " test_variant
*&---------------------------------------------------------------------*
*&      Form  test_sobkz
*&---------------------------------------------------------------------*
form test_sobkz
    tables pso_sobkz type tt_so_sobkz.

  data:
      l_sobkz type sobkz,                                   "#EC NEEDED
      l_rec   type sytabix.

  if sy-ucomm eq 'GET'.
    exit.
  endif.

  if pso_sobkz-low is initial.
    exit.
  endif.

  describe table pso_sobkz lines l_rec.

  if not l_rec is initial.

    select single sobkz from t148 into l_sobkz              "#EC *
          where sobkz in pso_sobkz.

*    IF NOT sy-subrc IS INITIAL.
*
*    ENDIF.

  endif.
endform.                    " test_sobkz
*&---------------------------------------------------------------------*
*&      Form  test_options
*&---------------------------------------------------------------------*
form test_options  using    ppa_batch type j_3rmoptved11       "1363385
                   changing ppa_valch type j_3rmoptved13.

  if ppa_valch is not initial and ppa_batch is initial.
*   val. type change cannot be processed if split by batches is deactivated
    clear pa_valch.
    message w022.
  endif.

endform.                    " test_options                     "1363385
