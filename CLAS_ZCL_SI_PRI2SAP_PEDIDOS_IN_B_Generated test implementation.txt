
class ZCL_SI_PRI2SAP_PEDIDOS_IN_B definition
  public
  create public .

public section.

  interfaces ZII_SI_PRI2SAP_PEDIDOS_IN_B .
protected section.
private section.
endclass. "ZCL_SI_PRI2SAP_PEDIDOS_IN_B definition
class ZCL_SI_PRI2SAP_PEDIDOS_IN_B implementation.
  METHOD zii_si_pri2sap_pedidos_in_b~si_pri2sap_pedidos_in_b.
*---------------------------------------------------------
* INPUT  TYPE ZMT_PEDIDO_PRISMA
* OUTPUTTYPE ZMT_PEDIDO_PRISMA_RESPONSE
*---------------------------------------------------------

    DATA: wa_poheader    TYPE bapimepoheader,
          wa_poheaderx   TYPE bapimepoheaderx,

          lv_posnr       TYPE bapimepoitem-po_item,
          lt_poitem      TYPE TABLE OF bapimepoitem,
          wa_poitem      TYPE bapimepoitem,
          lt_poitemx     TYPE TABLE OF bapimepoitemx,
          wa_poitemx     TYPE bapimepoitemx,

*          lw_pocond      TYPE bapimepocond,
*          lt_pocond      TYPE bapimepocond_tp,
          lt_poschedule  TYPE bapimeposchedule_tp,
          wa_poschedule  TYPE bapimeposchedule,

          lv_etenr       TYPE etenr,
          lt_poschedulex TYPE TABLE OF bapimeposchedulx,
          wa_poschedulex TYPE bapimeposchedulx,

          lt_poaccount   TYPE TABLE OF bapimepoaccount,
          wa_poaccount   TYPE bapimepoaccount,

          lt_poaccountx  TYPE TABLE OF bapimepoaccountx,
          wa_poaccountx  TYPE bapimepoaccountx,

          lt_return      TYPE TABLE OF bapiret2,

          lv_pedido      TYPE bapimepoheader-po_number.

    DATA: lv_string   TYPE  char30,
          lv_float    TYPE f,
          lv_dec      TYPE string,
          lv_decimals TYPE i,
          l_msg       TYPE string.

    DATA: lv_purchase_unit  TYPE gewei.


    DATA(o_log) = NEW zcl_ap_log( object = 'PRISMA_PED'
                                  report = 'ZCL_SI_PRI2SAP_PEDIDOS_IN_B'
                                  clave  = zcl_ap_proxy=>get_msgguid( ) ).

    DEFINE set_log.
      o_log->log( msgty    = &1
                  message  = &2
                  msgv1    = input-mt_pedido_prisma-company
                  msgv2    = input-mt_pedido_prisma-supplier
                  msgv3    = input-mt_pedido_prisma-purchase_order_type
                  msgv4    = input-mt_pedido_prisma-purchase_order ).
    END-OF-DEFINITION.

    CLEAR: lv_pedido,
           wa_poheader,
           wa_poheaderx,
           lt_poitem[],
           lt_poitemx[],
           lt_return[].

*   RECUPERAMOS LOS REGISTROS DE LA TABLA DE PARAMÉTROS RELACIONADOS CON EL CENTRO QUE NOS PASA PRISMA
    SELECT SINGLE param2 FROM ztwm001
      INTO @DATA(lv_param2)
      WHERE cprog = 'ZINTF_PEDIDOS_PRISMA' AND
            param1 = 'WERKS' AND
            param3 = @input-mt_pedido_prisma-company.

    IF sy-subrc = 0.
      SELECT * FROM ztwm001
      INTO TABLE @DATA(t_ztwm001)
      WHERE cprog = 'ZINTF_PEDIDOS_PRISMA' AND
            param2 = @lv_param2.
    ENDIF.

    "CABECERA: INPUT-MT_PEDIDO_PRISMA
    "Clase Documento
    READ TABLE t_ztwm001 INTO DATA(wa_ztwm001) WITH KEY param1 = 'DOC_TYPE'.
    IF sy-subrc = 0.
      wa_poheader-doc_type  = wa_ztwm001-param3. "'ZPE2'.

      l_msg = |Se recupera tipo documento { wa_ztwm001-param3 } desde parámetro DOC_TYPE'|.
      set_log 'S' l_msg.

    ELSE.
      set_log 'E' 'No se ha encontrado parámetro DOC_TYPE'.
    ENDIF.

    "Proveedor
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = input-mt_pedido_prisma-supplier
      IMPORTING
        output = wa_poheader-vendor.

    "Org. Compras
    READ TABLE t_ztwm001 INTO wa_ztwm001 WITH KEY param1 = 'PURCH_ORG'.
    IF sy-subrc = 0.
      wa_poheader-purch_org = wa_ztwm001-param3. "'1000'.

      l_msg = |Se recupera organización de compras { wa_ztwm001-param3 } desde parámetro PURCH_ORG'|.
      set_log 'S' l_msg.
    ELSE.
      set_log 'E' 'No se ha encontrado parámetro PURCH_ORG'.
    ENDIF.



    "Grupo Compras: Depende de sociedad. 714 si sociedad es 3000 // 814 si sociedad es 3020
    READ TABLE t_ztwm001 INTO wa_ztwm001 WITH KEY param1 = 'PUR_GROUP'.
    IF sy-subrc = 0.
      wa_poheader-pur_group = wa_ztwm001-param3.

      l_msg = |Se recupera grupo de compras { wa_ztwm001-param3 } desde parámetro PUR_GROUP'|.
      set_log 'S' l_msg.
    ELSE.
      set_log 'E' 'No se ha encontrado parámetro PUR_GROUP'.
    ENDIF.

*    CASE input-mt_pedido_prisma-company.
*      WHEN '3000'.
*        wa_poheader-pur_group = '714'.
*      WHEN '3020'.
*        wa_poheader-pur_group = '814'.
*    ENDCASE.

    "Sociedad
    SELECT SINGLE bukrs FROM t001k INTO wa_poheader-comp_code
          WHERE bwkey = input-mt_pedido_prisma-company.

    wa_poheader-creat_date = sy-datum. "Fecha de creación del registro

    wa_poheaderx-doc_type  = abap_true.
    wa_poheaderx-vendor = abap_true.
    wa_poheaderx-purch_org = abap_true.
    wa_poheaderx-pur_group = abap_true.
    wa_poheaderx-comp_code = abap_true.
    wa_poheaderx-creat_date = abap_true.

    "POSICIONES
    CLEAR: lv_posnr, lv_etenr.

    READ TABLE input-mt_pedido_prisma-purchase_order_line INTO DATA(wa_post) INDEX 1.
    o_log->log( msgty = 'I'
               message  = 'Inicio proceso'
               msgv1    = input-mt_pedido_prisma-company
               msgv2    = input-mt_pedido_prisma-supplier
               msgv3    = input-mt_pedido_prisma-purchase_order_type
               msgv4    = input-mt_pedido_prisma-purchase_order ).

    LOOP AT input-mt_pedido_prisma-purchase_order_line INTO DATA(wa_pos).
      CLEAR: wa_poitem, wa_poitemx, wa_poschedule, wa_poschedulex.

      ADD 10 TO lv_posnr.

      wa_poitem-po_item = lv_posnr.

* APC22050207 Intentamos leer el nuevo parámetro
      READ TABLE t_ztwm001 INTO wa_ztwm001 WITH KEY param1 = 'MATERIAL_' && input-mt_pedido_prisma-purchase_order_type.
      IF sy-subrc = 0.
        wa_poitem-material = wa_ztwm001-param3.


        l_msg = |Se recupera material { wa_ztwm001-param3 } desde parámetro MATERIAL_{ input-mt_pedido_prisma-purchase_order_type }|.
        set_log 'S' l_msg.
      ELSE.
* FIN APC22050207
        READ TABLE t_ztwm001 INTO wa_ztwm001 WITH KEY param1 = 'MATERIAL'.
        IF sy-subrc = 0.
          wa_poitem-material = wa_ztwm001-param3. "'000000000007000001'.

          l_msg = |Se recupera material { wa_ztwm001-param3 } desde parámetro MATERIAL'|.
          set_log 'W' l_msg.
        ELSE.
          set_log 'E' 'No se ha encontrado parámetro MATERIAL*'.
        ENDIF.
      ENDIF.

      CONCATENATE wa_pos-item  wa_pos-item_name INTO wa_poitem-short_text SEPARATED BY '-'.
*      wa_poitem-short_text = wa_pos-item_name .

      SELECT SINGLE matkl FROM mara
        INTO wa_poitem-matl_group
        WHERE matnr = wa_poitem-material.

      wa_poitem-plant       = input-mt_pedido_prisma-company.
      wa_poitem-stge_loc       = ''.

*      "tratamos el campo cantida que viene de prisma para convertirlo a numerico
*      lv_string = wa_pos-item_quantity.
*      REPLACE '.' IN lv_string WITH ','.
*
*      CALL FUNCTION 'C14DG_CHAR_NUMBER_CONVERSION'
*        EXPORTING
*          i_string                   = lv_string
*        IMPORTING
*          e_float                    = lv_float
*          e_dec                      = lv_dec
*          e_decimals                 = lv_decimals
*        EXCEPTIONS
*          wrong_characters           = 1
*          first_character_wrong      = 2
*          arithmetic_sign            = 3
*          multiple_decimal_separator = 4
*          thousandsep_in_decimal     = 5
*          thousand_separator         = 6
*          number_too_big             = 7
*          OTHERS                     = 8.
*      IF sy-subrc <> 0.
**       Implement suitable error handling here
*      ELSE.
*        MOVE lv_dec TO wa_poitem-quantity.
*      ENDIF.


* >> JJR 12.07.2023
*      lv_string = wa_pos-item_quantity.
*      REPLACE ',' IN lv_string WITH '.'.

*      wa_poitem-quantity = lv_string.
      wa_poitem-quantity = wa_pos-item_quantity.
* << JJR 12.07.2023

*      "hacemos la conversión a UN
*      lv_purchase_unit  = wa_pos-purchase_unit.
*      CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
*        EXPORTING
*          input          = lv_purchase_unit
*          language       = 'S'
*        IMPORTING
*          output         = lv_purchase_unit
*        EXCEPTIONS
*          unit_not_found = 1
*          OTHERS         = 2.
*      IF sy-subrc <> 0.
** Implement suitable error handling here
*      ENDIF.
*
*      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
*        EXPORTING
*          i_matnr              = wa_poitem-material
*          i_in_me              = lv_purchase_unit
*          i_out_me             = 'ST'
*          i_menge              = wa_poitem-quantity
*        IMPORTING
*          e_menge              = wa_poitem-quantity
*        EXCEPTIONS
*          error_in_application = 1
*          error                = 2
*          OTHERS               = 3.
*      IF sy-subrc <> 0.
**       Implement suitable error handling here
*      ENDIF.


      READ TABLE t_ztwm001 INTO wa_ztwm001 WITH KEY param1 = 'PO_UNIT'.
      IF sy-subrc = 0.
        wa_poitem-po_unit  = wa_ztwm001-param3. "'ST' . "wa_pos-purchase_unit.
      ELSE.
        set_log 'E' 'No se ha encontrado parámetro PO_UNIT'.
      ENDIF.

      wa_poitem-net_price   = wa_pos-net_price.

      READ TABLE t_ztwm001 INTO wa_ztwm001 WITH KEY param1 = 'ACCTASSCAT'.
      IF sy-subrc = 0.
        wa_poitem-acctasscat = wa_ztwm001-param3.  "'Z'.
        l_msg = |Se recupera cuenta { wa_ztwm001-param3 } desde parámetro ACCTASSCAT'|.
        set_log 'S' l_msg.
      ELSE.
        set_log 'E' 'No se ha encontrado parámetro ACCTASSCAT'.
      ENDIF.

      APPEND  wa_poitem TO lt_poitem.

      wa_poitemx-po_item    = wa_poitem-po_item.
      wa_poitemx-material = abap_true.
      wa_poitemx-short_text = abap_true.
      wa_poitemx-matl_group = abap_true.
      wa_poitemx-plant = abap_true.
      wa_poitemx-stge_loc = abap_true.
      wa_poitemx-quantity = abap_true.
      wa_poitemx-po_unit = abap_true.
      wa_poitemx-net_price = abap_true.
      wa_poitemx-acctasscat = abap_true.
      APPEND  wa_poitemx TO lt_poitemx.

      wa_poaccount-po_item    = wa_poitem-po_item.

* APC22050207 Intentamos leer el nuevo parámetro
      READ TABLE t_ztwm001 INTO wa_ztwm001 WITH KEY param1 = 'COSTCENTER_' && input-mt_pedido_prisma-purchase_order_type.
      IF sy-subrc = 0.
        wa_poaccount-costcenter = wa_ztwm001-param3.
        l_msg = |Se recupera dentro de coste { wa_ztwm001-param3 } desde parámetro COSTCENTER_{ input-mt_pedido_prisma-purchase_order_type }|.
        set_log 'S' l_msg.

      ELSE.
* FIN APC22050207
        READ TABLE t_ztwm001 INTO wa_ztwm001 WITH KEY param1 = 'COSTCENTER'.
        IF sy-subrc = 0.
          wa_poaccount-costcenter = wa_ztwm001-param3.

          l_msg = |Se recupera centro de coste { wa_ztwm001-param3 } desde parámetro COSTCENTER'|.
          set_log 'W' l_msg.
        ELSE.
          set_log 'E' 'No se ha encontrado parámetro COSTCENTER*'.
        ENDIF.
      ENDIF.
*      CASE input-mt_pedido_prisma-company.
*        WHEN '3000'.
*          wa_poaccount-costcenter = '0030003405'.
*        WHEN '3020'.
*          wa_poaccount-costcenter = '0030203405'.
*      ENDCASE.

      APPEND wa_poaccount TO lt_poaccount.

      wa_poaccountx-po_item    = wa_poitem-po_item.
      wa_poaccountx-costcenter = abap_true.
      APPEND wa_poaccountx TO lt_poaccountx.

    ENDLOOP.



    CALL FUNCTION 'BAPI_PO_CREATE1'
      EXPORTING
        poheader         = wa_poheader
        poheaderx        = wa_poheaderx
*       no_price_from_po = price_po
      IMPORTING
        exppurchaseorder = lv_pedido
      TABLES
        return           = lt_return
        poitem           = lt_poitem
        poitemx          = lt_poitemx
*       poschedule       = lt_poschedule
*       poschedulex      = lt_poschedulex
*       pocond           = lt_pocond
*       pocondx          = lt_pocondx
        poaccount        = lt_poaccount
        poaccountx       = lt_poaccountx.
    .


    IF lv_pedido IS NOT INITIAL.

      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.

      output-mt_pedido_prisma_response-custom_sappurchase_order = lv_pedido.
*      output-mt_pedido_prisma_response-error = ''.
*      output-mt_pedido_prisma_response-message = ''.

    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

      DATA: wa_error TYPE zdt_pedido_prisma_response_mes.

      LOOP AT lt_return INTO DATA(wa_return) WHERE type = 'E'.
        output-mt_pedido_prisma_response-custom_sappurchase_order = ''.
        output-mt_pedido_prisma_response-error = abap_true.

        CONCATENATE wa_return-message
                    wa_return-message_v1
                    wa_return-message_v2
                    wa_return-message_v3
                    wa_return-message_v4
        INTO wa_error-message_linea SEPARATED BY space. "output-mt_pedido_prisma_response-message SEPARATED BY space.

        APPEND wa_error TO output-mt_pedido_prisma_response-message.
      ENDLOOP.

    ENDIF.

* Este warning no nos interesa
    DELETE lt_return WHERE type = 'W' AND id = 'ME' AND number = '040'.
* Sólo queremos guardar una vez el log, y no por líneas
    SORT lt_return BY id type number message.
    DELETE ADJACENT DUPLICATES FROM lt_return COMPARING id type number message.

* Quito errores técnicos de BAPI que no aportan nada si hay otros más explicativos
    LOOP AT lt_return TRANSPORTING NO FIELDS WHERE type = 'E' AND id NE 'BAPI'.
      DELETE lt_return WHERE id = 'BAPI'.
      EXIT.
    ENDLOOP.

    LOOP AT lt_return INTO wa_return.
      o_log->log( msgid    = wa_return-id
                  msgty    = wa_return-type
                  msgno    = wa_return-number
                  message  = wa_return-message
                  msgv1    = input-mt_pedido_prisma-company
                  msgv2    = input-mt_pedido_prisma-supplier
                  msgv3    = input-mt_pedido_prisma-purchase_order_type
                  msgv4    = input-mt_pedido_prisma-purchase_order ).
    ENDLOOP.

  ENDMETHOD.
endclass. "ZCL_SI_PRI2SAP_PEDIDOS_IN_B definition
endclass. "ZCL_SI_PRI2SAP_PEDIDOS_IN_B implementation
