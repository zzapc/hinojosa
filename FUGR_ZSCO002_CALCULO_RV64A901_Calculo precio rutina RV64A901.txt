FUNCTION zsco002_calculo_rv64a901.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_VBAK) TYPE  VBAK
*"     REFERENCE(I_VBAP) TYPE  VBAPVB OPTIONAL
*"     REFERENCE(I_KSCHL) TYPE  KSCHL OPTIONAL
*"  EXPORTING
*"     REFERENCE(E_XKWERT) TYPE  KWERT
*"     REFERENCE(ET_XKWERT) TYPE  ZSCOTT0002_KBERT
*"     REFERENCE(E_FOUND) TYPE  FLAG
*"----------------------------------------------------------------------
  TYPES: BEGIN OF ty_keko,
           vbeln TYPE vbeln,
           posnr TYPE posnr,
           bwdat TYPE ck_bwdat,
           kalnr TYPE ck_kalnr1,
           losau TYPE ck_losau,
           kstel TYPE kstel.
  TYPES: END OF ty_keko.

  TYPES: BEGIN OF ty_keko_full,
           vbeln TYPE vbeln,
           posnr TYPE posnr,
           bwdat TYPE ck_bwdat,
           kalnr TYPE ck_kalnr1,
           losau TYPE ck_losau,
           kstel TYPE kstel.
           INCLUDE STRUCTURE ckf_cost_components.
         TYPES: END OF ty_keko_full.

  DATA: lt_keko            TYPE TABLE OF ty_keko,
        ls_keko            TYPE ty_keko,
        lt_keko_full       TYPE TABLE OF ty_keko_full,
        ls_keko_full       TYPE ty_keko_full,
        lv_str_fields      TYPE string,
        lv_str_coste       TYPE string,
        lv_kstel           TYPE kstel,
        lv_coste           TYPE zsco_de_kbetr, "kstel,
        ls_xkwert          TYPE  zscos0002_kbert,
        ls_zssdt000_of_ped TYPE zssdt000_of_ped.

  DATA: lt_keko_memoria TYPE TABLE OF keko,
        lt_keph_memoria TYPE TABLE OF keph.

  FIELD-SYMBOLS: <fts_keko> TYPE STANDARD TABLE,
                 <fts_keph> TYPE STANDARD TABLE.

  CLEAR lv_str_fields.

  IF i_kschl IS NOT INITIAL AND i_vbap IS NOT INITIAL.
    "Obtenemos Vinculo elementos de coste - condiciones de precio
    SELECT SINGLE *
      FROM zscot002_kschl
      INTO @DATA(ls_zscot002)
      WHERE zzvkorg = @i_vbak-vkorg
        AND zzvtweg = @i_vbak-vtweg
        AND zzspart = @i_vbak-spart
        AND zzkschl = @i_kschl.

    lv_str_fields = | keko~vbeln, keko~posnr, keko~kalnr, keko~losau, | && |{ ls_zscot002-zzkstxxx }| && | as KSTEL |.

    "Obtenemos el CC del producto
    SELECT SINGLE (lv_str_fields)
      FROM keko
      INNER JOIN keph ON keko~bzobj = keph~bzobj
                     AND keko~kalnr = keph~kalnr
                     AND keko~kalka = keph~kalka
                     AND keko~kadky = keph~kadky
                     AND keko~tvers = keph~tvers
                     AND keko~bwvar = keph~bwvar
                     AND keko~kkzma = keph~kkzma
      INTO CORRESPONDING FIELDS OF @ls_keko
      WHERE keko~vbeln =  @i_vbap-vbeln
        AND keko~posnr =  @i_vbap-posnr
        AND keko~kalsm <> @space
        AND keko~stnum <> @space
        AND keph~kkzst = @space.

    IF sy-subrc <> 0 AND i_vbap-kalnr IS NOT INITIAL.

*      IF sy-uname EQ 'PARTNERSAP' OR sy-uname EQ 'CONSULTOR SD'.

*      ASSIGN ('(SAPLCKDI)T_KEPH[]') TO <fts_keph>.
      ASSIGN ('(SAPMV45A)GT_KEPH_MEMORIA[]') TO <fts_keph>.
      CHECK <fts_keph> IS ASSIGNED.

*      ASSIGN ('(SAPLCKDI)T_KEKO[]') TO <fts_keko>.
      ASSIGN ('(SAPMV45A)GT_KEKO_MEMORIA[]') TO <fts_keko>.
      CHECK <fts_keko> IS ASSIGNED.

      "Si lanzamos product costing por estándar y no lo hemos hecho desde nuestro código en la exit, necesitamos coger las variables del estándar
      IF <fts_keph> IS INITIAL.
        ASSIGN ('(SAPLCKDI)T_KEPH[]') TO <fts_keph>.
        CHECK <fts_keph> IS ASSIGNED.
        ASSIGN ('(SAPLCKDI)T_KEKO[]') TO <fts_keko>.
        CHECK <fts_keko> IS ASSIGNED.
      ENDIF.

      MOVE-CORRESPONDING <fts_keph> TO lt_keph_memoria.
      MOVE-CORRESPONDING <fts_keko> TO lt_keko_memoria.

      LOOP AT lt_keph_memoria INTO DATA(ls_keph_memoria) WHERE kkzst = space. "'X'.
        READ TABLE lt_keko_memoria INTO DATA(ls_keko_memoria) WITH KEY bzobj = ls_keph_memoria-bzobj
                                                                       kalnr = ls_keph_memoria-kalnr
                                                                       kalka = ls_keph_memoria-kalka
                                                                       kadky = ls_keph_memoria-kadky
                                                                       tvers = ls_keph_memoria-tvers
                                                                       bwvar = ls_keph_memoria-bwvar
                                                                       kkzma = ls_keph_memoria-kkzma
                                                                       posnr = i_vbap-posnr.
        IF sy-subrc = 0.
          MOVE-CORRESPONDING ls_keko_memoria TO ls_keko.
          ASSIGN COMPONENT ls_zscot002-zzkstxxx OF STRUCTURE ls_keph_memoria TO FIELD-SYMBOL(<fs_kstel>).
          ls_keko-kstel = <fs_kstel>.
        ENDIF.
      ENDLOOP.

*      READ TABLE lt_keph_memoria INTO DATA(ls_keph_memoria) WITH KEY kkzst = space. "'X'.
*      IF sy-subrc = 0.
*        READ TABLE lt_keko_memoria INTO DATA(ls_keko_memoria) WITH KEY bzobj = ls_keph_memoria-bzobj
*                                                                       kalnr = ls_keph_memoria-kalnr
*                                                                       kalka = ls_keph_memoria-kalka
*                                                                       kadky = ls_keph_memoria-kadky
*                                                                       tvers = ls_keph_memoria-tvers
*                                                                       bwvar = ls_keph_memoria-bwvar
*                                                                       kkzma = ls_keph_memoria-kkzma.
*        IF sy-subrc = 0.
*          MOVE-CORRESPONDING ls_keko_memoria TO ls_keko.
*          ASSIGN COMPONENT ls_zscot002-zzkstxxx OF STRUCTURE ls_keph_memoria TO FIELD-SYMBOL(<fs_kstel>).
*          ls_keko-kstel = <fs_kstel>.
*        ENDIF.
*      ENDIF.
    ENDIF.

* >> MVR - 27.09.22 - GAPSD054_RELOCATED
    IF ls_keko IS INITIAL.

      "ASC >>> 17.11.2022 Comprobamos si es un material configurable
      CLEAR ls_zssdt000_of_ped.
      SELECT SINGLE * FROM zssdt000_of_ped INTO ls_zssdt000_of_ped WHERE vkorg = i_vbak-vkorg
                                                                     AND vtweg = i_vbak-vtweg
                                                                     AND spart = i_vbak-spart
                                                                     AND matnr = i_vbap-matnr.
      IF sy-subrc <> 0.
        "ASC <<< 17.11.2022 Comprobamos si es un material configurable

        lv_str_fields = | keko~BWDAT, keko~vbeln, keko~posnr, keko~kalnr, keko~losau,| && | { ls_zscot002-zzkstxxx }| && | as KSTEL |.

        "Primero buscamos con la cantidad exacta.
        SELECT (lv_str_fields)
         FROM keko
         INNER JOIN keph ON keko~bzobj = keph~bzobj
                        AND keko~kalnr = keph~kalnr
                        AND keko~kalka = keph~kalka
                        AND keko~kadky = keph~kadky
                        AND keko~tvers = keph~tvers
                        AND keko~bwvar = keph~bwvar
                        AND keko~kkzma = keph~kkzma
         INNER JOIN vbak ON keko~vbeln = vbak~vbeln
                        AND vbak~vbtyp = 'B' "Oferta
         INTO CORRESPONDING FIELDS OF TABLE @lt_keko
         WHERE keko~matnr = @i_vbap-matnr
*          AND keko~kalsm <> @space
           AND keko~stnum <> @space
           AND keph~kkzst = @space
           AND keko~losau = @i_vbap-kwmeng.
        IF sy-subrc <> 0.
          SELECT (lv_str_fields)
            FROM keko
            INNER JOIN keph ON keko~bzobj = keph~bzobj
                           AND keko~kalnr = keph~kalnr
                           AND keko~kalka = keph~kalka
                           AND keko~kadky = keph~kadky
                           AND keko~tvers = keph~tvers
                           AND keko~bwvar = keph~bwvar
                           AND keko~kkzma = keph~kkzma
            INNER JOIN vbak ON keko~vbeln = vbak~vbeln
                           AND vbak~vbtyp = 'B' "Oferta
            INTO CORRESPONDING FIELDS OF TABLE @lt_keko
            WHERE keko~matnr = @i_vbap-matnr
*          AND keko~kalsm <> @space
              AND keko~stnum <> @space
              AND keph~kkzst = @space.
        ENDIF.

        SORT lt_keko BY bwdat DESCENDING.
        READ TABLE lt_keko INTO ls_keko INDEX 1.
      ENDIF.
* << MVR - 27.09.22

    ENDIF.

    CLEAR lv_kstel.

    IF ls_keko IS NOT INITIAL.
      e_found = 'X'.
    ENDIF.

    IF ls_keko-losau > 0.
      lv_coste = ls_keko-kstel / ls_keko-losau.
    ENDIF.

    e_xkwert = i_vbap-kwmeng * lv_coste.

  ELSE.

    SELECT vbeln, posnr, kwmeng FROM vbap INTO TABLE @DATA(lt_vbap) WHERE vbeln = @i_vbak-vbeln.

    "Obtenemos Vinculo elementos de coste - condiciones de precio
    SELECT *
      FROM zscot002_kschl
      INTO TABLE @DATA(lt_zscot002)
      WHERE zzvkorg = @i_vbak-vkorg
        AND zzvtweg = @i_vbak-vtweg
        AND zzspart = @i_vbak-spart.

    "Montamos el select dinámico
    lv_str_fields = | keko~vbeln, keko~posnr, keko~kalnr, keko~losau |.
    LOOP AT lt_zscot002 INTO ls_zscot002.
      lv_str_fields = |{ lv_str_fields }|  && | , | && |{ ls_zscot002-zzkstxxx }| && | as | && |{ ls_zscot002-zzkstxxx }|.
    ENDLOOP.

    "Obtenemos el CC del producto
    SELECT (lv_str_fields)
      FROM keko
      INNER JOIN keph ON keko~bzobj = keph~bzobj
                     AND keko~kalnr = keph~kalnr
                     AND keko~kalka = keph~kalka
                     AND keko~kadky = keph~kadky
                     AND keko~tvers = keph~tvers
                     AND keko~bwvar = keph~bwvar
                     AND keko~kkzma = keph~kkzma
      INTO CORRESPONDING FIELDS OF TABLE @lt_keko_full
      WHERE keko~vbeln =  @i_vbak-vbeln
        AND keko~kalsm <> @space
        AND keko~stnum <> @space
        AND keph~kkzst = @space.

    LOOP AT lt_vbap INTO DATA(ls_vbap).
      CLEAR ls_xkwert.
      ls_xkwert-posnr = ls_vbap-posnr.
      LOOP AT lt_zscot002 INTO ls_zscot002.
        ls_xkwert-kschl = ls_zscot002-zzkschl.
        LOOP AT lt_keko_full INTO ls_keko_full WHERE posnr = ls_vbap-posnr.
          ASSIGN COMPONENT ls_zscot002-zzkstxxx OF STRUCTURE ls_keko_full TO FIELD-SYMBOL(<fs>).
          IF <fs> IS ASSIGNED.
            IF ls_keko_full-losau > 0.
              ls_xkwert-kwert =  ( <fs> / ls_keko_full-losau ) * ls_vbap-kwmeng.
              APPEND ls_xkwert TO et_xkwert.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.
  ENDIF.

ENDFUNCTION.
