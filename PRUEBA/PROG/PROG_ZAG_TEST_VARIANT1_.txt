*&---------------------------------------------------------------------*
*& Report  ZAG_TEST_VARIANT1
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
report ZAG_TEST_VARIANT1.

data: JVARI_DESC   like VARID,
      RC           like SY-SUBRC,
      VARIANT_TEXT like VARIT-VTEXT,
      JVT          like VARIT occurs 0 with header line,
      SELPA        like RSPARAMS occurs 0 with header line,
      PARMS        like RSPARAMS occurs 0 with header line,
      OBJS         like VANZ occurs 0 with header line.

parameters: P_VAR like RSVAR-VARIANT. "NAME OF VARIANT

JVARI_DESC-REPORT = SY-REPID.
JVARI_DESC-VARIANT = P_VAR.
JVARI_DESC-ENAME = 'EXAMPLES'.
JVT-REPORT = SY-REPID.
JVT-VARIANT = P_VAR.
JVT-LANGU = SY-LANGU.
JVT-VTEXT = 'FUNCTION EXAMPLES'.

append JVT.
clear SELPA.
SELPA-SIGN = 'I'.
SELPA-OPTION = 'EQ'.
SELPA-KIND = 'P'.
SELPA-SELNAME = 'P_VAR'.
SELPA-LOW = P_VAR.
append SELPA.


call function 'RS_VARIANT_EXISTS'
  exporting
    REPORT              = JVARI_DESC-REPORT
    VARIANT             = P_VAR
  importing
    R_C                 = RC
  exceptions
    NOT_AUTHORIZED      = 1
    NO_REPORT           = 2
    REPORT_NOT_EXISTENT = 3
    REPORT_NOT_SUPPLIED = 4
    others              = 5.

if RC = 0 and SY-SUBRC eq 0.

  call function 'RS_VARIANT_DELETE'
    exporting
      REPORT               = JVARI_DESC-REPORT
      VARIANT              = P_VAR
      FLAG_CONFIRMSCREEN   = ABAP_FALSE
      FLAG_DELALLCLIENT    = ABAP_FALSE
    exceptions
      NOT_AUTHORIZED       = 1
      NOT_EXECUTED         = 2
      NO_REPORT            = 3
      REPORT_NOT_EXISTENT  = 4
      REPORT_NOT_SUPPLIED  = 5
      VARIANT_LOCKED       = 6
      VARIANT_NOT_EXISTENT = 7
      NO_CORR_INSERT       = 8
      VARIANT_PROTECTED    = 9
      others               = 10.

  if SY-SUBRC ne 0.

    write: 'UNABLE TO DELETE VARIANT:', P_VAR ,'STATUS=', SY-SUBRC.

    exit.

  else.

    write:/ P_VAR, 'DELETED'.

  endif.

else.

  write:/ P_VAR, 'DOES NOT EXIST'.

endif. " ALREADY EXISTS

call function 'RS_CREATE_VARIANT'
  exporting
    CURR_REPORT               = JVARI_DESC-REPORT
    CURR_VARIANT              = P_VAR
    VARI_DESC                 = JVARI_DESC
  tables
    VARI_CONTENTS             = SELPA
    VARI_TEXT                 = JVT
  exceptions
    ILLEGAL_REPORT_OR_VARIANT = 1
    ILLEGAL_VARIANTNAME       = 2
    NOT_AUTHORIZED            = 3
    NOT_EXECUTED              = 4
    REPORT_NOT_EXISTENT       = 5
    REPORT_NOT_SUPPLIED       = 6
    VARIANT_EXISTS            = 7
    VARIANT_LOCKED            = 8
    others                    = 9.

if SY-SUBRC eq 0.

  write:/ 'VARIANT', P_VAR, 'CREATED FOR PROGRAM', JVARI_DESC-REPORT.

else.

  write:/ 'VARIANT', P_VAR, 'NOT CREATED FOR PROGRAM', JVARI_DESC-REPORT.

  exit.

endif.

call function 'RS_VARIANT_CONTENTS'
  exporting
    REPORT               = JVARI_DESC-REPORT
    VARIANT              = P_VAR
  tables
    VALUTAB              = PARMS
    OBJECTS              = OBJS
  exceptions
    VARIANT_NON_EXISTENT = 1
    VARIANT_OBSOLETE     = 2
    others               = 3.

if SY-SUBRC ne 0.

  write : / 'ERROR READING VARIANT CONTENTS.'.

else.

  call function 'RS_VARIANT_TEXT'
    exporting
      LANGU       = SY-LANGU
      CURR_REPORT = JVARI_DESC-REPORT
      VARIANT     = P_VAR
    importing
      V_TEXT      = VARIANT_TEXT.

  write:/ 'VARIANT DESCRIPTION:', VARIANT_TEXT.

  loop at PARMS.

    check PARMS-LOW ne SPACE or PARMS-HIGH ne SPACE.

    read table OBJS with key NAME = PARMS-SELNAME.

    write : /2 PARMS-SELNAME, OBJS-TEXT,

    45 PARMS-KIND,

    PARMS-SIGN,

    PARMS-OPTION,

    PARMS-LOW,

    PARMS-HIGH.

    new-line.

  endloop.

  skip.

endif.
