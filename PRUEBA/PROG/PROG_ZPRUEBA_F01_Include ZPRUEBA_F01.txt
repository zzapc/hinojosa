*&---------------------------------------------------------------------*
*&  Include           ZPRUEBA_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  SELECCION_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM seleccion_datos .



*  DATA: rg_vbeln TYPE RANGE OF vbak-vbeln.
*  DATA: rwa_vbeln LIKE LINE OF rg_vbeln.
*
*  rwa_vbeln-sign = 'I'.
*  rwa_vbeln-option = 'EQ'.
*  rwa_vbeln-low = '0000001212'.
*  APPEND rwa_vbeln TO  rg_vbeln .




  SELECT vbak~vbeln vbap~posnr matnr arktx vbap~kwmeng vbap~vrkme
    FROM vbak
    INNER JOIN vbap ON ( vbak~vbeln = vbap~vbeln )
        INTO TABLE gt_pedidos
    WHERE vbak~vbeln IN so_vbeln. "AND
*          vbep~bmeng IS NOT NULL.


  break developer.

*  DATA: lv_nombre TYPE znombre.
*  DATA(lv_nombre_1) = 'PEPE'.
*
** SELECCIÓN DE 1 REGISTRO (CON TODOS LOS CAMPOS DE LA TABLA)
*  SELECT SINGLE * FROM zempleado
*    INTO wa_empleados.
*
*  SELECT SINGLE * FROM zempleado
*    INTO @DATA(wa_empleados_xx).
*
** SELECCIÓN DE TODOS LOS REGISTROS Y TODOS LOS CAMPOS DE UNA TABLA
*  SELECT * FROM zempleado
*    INTO TABLE gt_empleados.
*
*  SELECT * FROM zempleado
*      INTO TABLE @DATA(gt_empleados_xx)
*    WHERE nombre = 'PEPE'.
*
*  lv_nombre  = 'PEPE'.
*  SELECT * FROM zempleado
*    INTO TABLE @DATA(gt_empleados_xxx)
*  WHERE nombre = @lv_nombre.
*
*
** SELECT TODOS LOS REGISTROS DE UNA TABLA CON X CAMPOS
*  SELECT id_empleado nombre FROM zempleado
*    INTO TABLE gt_empleado_1.
*
*  SELECT id_empleado, nombre FROM zempleado
*  INTO TABLE @DATA(gt_empleados_yy).
*
** SELECT CON FOR ALL ENTRIES
*  SELECT * FROM mara
*    INTO TABLE @DATA(t_mara).
*
** MÁS OPTIMO (1 ACCESO A BBDD)
*  CHECK t_mara[] IS NOT INITIAL.
*  SELECT * FROM makt
*    INTO TABLE @DATA(t_makt)
*    FOR ALL ENTRIES IN @t_mara
*    WHERE matnr = @t_mara-matnr AND
*          spras = @sy-langu.
*
*  LOOP AT t_mara INTO DATA(wa_mara).
*    READ TABLE t_makt INTO DATA(wa_makt_1) WITH KEY matnr = wa_mara-matnr.
*  ENDLOOP.
*
** MENOS OPTIMO (N ACCESOS A BBDD)
*  LOOP AT t_mara INTO wa_mara.
*    SELECT SINGLE * FROM makt
*      INTO @DATA(wa_makt)
*      WHERE matnr = @wa_mara-matnr.
*  ENDLOOP.
*
*
***** LOOP
*  LOOP AT gt_empleado_1 INTO gwa_empleado_1.
*  ENDLOOP.
*
*  LOOP AT gt_empleado_1 ASSIGNING <fs_empleado>.
*  ENDLOOP.
*
*
**** IF
*  IF gt_empleado_1[] IS NOT INITIAL.
*    "
*  ELSE.
*    "
*  ENDIF.
*
**** WHILE
*  WHILE lv_nombre IS NOT INITIAL.
*  ENDWHILE.
*
**** CASE
*  CASE lv_nombre.
*    WHEN 'PEPE'.
*      "
*    WHEN 'JOSE' OR 'LUIS'.
*      "
*    WHEN OTHERS.
*
*  ENDCASE.
*
*
** MOVE-CORRESPONDING
*  SELECT nombre FROM zempleado
*    INTO CORRESPONDING FIELDS OF TABLE gt_empleados.

  DATA(variable) = 2.
  DATA: variable2 TYPE c LENGTH 2.
  WRITE variable TO variable2 .

  variable = '3'.
  MOVE variable TO variable2 .



  DATA: variable4 TYPE c LENGTH 2,
        variable5 TYPE n.
  variable4 = '2'.
  WRITE variable4 TO variable5 .

  DATA: lv_dec TYPE  p.




  CALL FUNCTION 'ISM_CONVERT_CHAR_TO_DEC'
    EXPORTING
      i_char = '3455'
    IMPORTING
      e_dec  = lv_dec
    EXCEPTIONS
      error  = 1
      OTHERS = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.




*  MOVE variable TO variable2.
*  CONCATENATE variable variable2 INTO variable3.
*  SPLIT variable3 AT ',' INTO variable variable2.
*





ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FIELDCAT_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_FCAT  text
*----------------------------------------------------------------------*
FORM fieldcat_200  CHANGING p_lt_fcat.
  DATA: ls_fcat TYPE lvc_s_fcat.


  CLEAR: lt_fcat.
  REFRESH: lt_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZPEDIDOS'
    CHANGING
      ct_fieldcat      = lt_fcat
    EXCEPTIONS
      OTHERS           = 3.

  IF sy-subrc = 0.
    LOOP AT lt_fcat INTO ls_fcat.
      CASE ls_fcat-fieldname.
        WHEN 'VBELN'.
*          ls_fcat-coltext = text-001.
*          ls_fcat-scrtext_l = text-001.
*          ls_fcat-scrtext_m = text-001.
*          ls_fcat-scrtext_s  = text-001.
          ls_fcat-hotspot = 'X'.

      ENDCASE.
      MODIFY lt_fcat FROM ls_fcat.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir .
  DATA: index_rows       TYPE  lvc_t_row,
        lt_sel_rows      TYPE lvc_t_roid,
        ls_selected_line LIKE LINE OF lt_sel_rows.



  DATA: i_rowindex TYPE lvc_t_row,
        wa_row     TYPE LINE OF lvc_t_row.


  CALL METHOD gr_grid_200->get_selected_rows
    IMPORTING
      et_index_rows = i_rowindex.

  LOOP AT i_rowindex INTO wa_row.
    READ TABLE gt_pedidos INTO ls_dato INDEX wa_row-index.
    IF sy-subrc = 0.
      APPEND ls_dato TO lt_impresion.
    ENDIF.
  ENDLOOP.


  IF  p_rb1 = 'X'. "smartforms
    PERFORM imprimir_smartforms USING lt_impresion.
  ELSE. "p_rb2 = 'X' "adobeforms
    PERFORM imprimir_adobeforms USING lt_impresion.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LAYOUT_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_LAYOUT  text
*----------------------------------------------------------------------*
FORM layout_200  CHANGING ls_layout TYPE lvc_s_layo.
  ls_layout-zebra = 'X'.
  ls_layout-cwidth_opt = 'X'.
  ls_layout-sel_mode = 'A'.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_SMARTFORMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_smartforms USING t_impresion.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ADOBEFORMS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_adobeforms  USING t_impresion.
  DATA: lv_fm_name         TYPE        rs38l_fnam,
        lv_form            TYPE na_fname,
        ls_fp_outputparams TYPE sfpoutputparams,
        lv_fp_docparams    TYPE sfpdocparams,
        ls_pdf_file        TYPE fpformoutput,
        lv_interface_type  TYPE fpinterfacetype.

  ls_fp_outputparams-device = 'PRINTER'.
  ls_fp_outputparams-getpdf = ' '.
  ls_fp_outputparams-nodialog = ' '.
  ls_fp_outputparams-reqnew = 'X'.
  ls_fp_outputparams-reqimm = 'X'.
** Destino impresora que se recupera de la tabla ZWM_PARAM.
*  ls_fp_outputparams-dest =  p_tddest.

*OPEN FORM
  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  TRY.
*      p_tddest = ls_fp_outputparams-dest.
* Function to find the FM name.
      CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'
        EXPORTING
          i_name           = lv_form
        IMPORTING
          e_funcname       = lv_fm_name
          e_interface_type = lv_interface_type.

*    CATCH cx_root INTO lv_w_cx_root.
*      lv_mesg = lv_w_cx_root->get_text( ).
*      MESSAGE lv_mesg TYPE 'E'.

  ENDTRY.

*  SET COUNTRY 'ES'.



  lv_fp_docparams-langu     = sy-langu.
  lv_fp_docparams-country   = 'ES'.


  CALL FUNCTION lv_fm_name
    EXPORTING
      /1bcdwb/docparams  = lv_fp_docparams
*     ls_eti             = p_eti
    IMPORTING                                             "EHP5
      /1bcdwb/formoutput = ls_pdf_file                    "EHP5
    EXCEPTIONS
      usage_error        = 1
      system_error       = 2
      internal_error     = 3
      OTHERS             = 4.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.

  IF sy-subrc EQ 0.
    MESSAGE text-iok TYPE 'S'.
  ENDIF.

ENDFORM.
