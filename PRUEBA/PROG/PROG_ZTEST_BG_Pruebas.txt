**&---------------------------------------------------------------------*
**& Report  ZTEST_BG
**&
**&---------------------------------------------------------------------*
**&
**&
**&---------------------------------------------------------------------*
REPORT ztest_bg.

TABLES vbap.

PARAMETERS: pa_file TYPE eps2filnam DEFAULT '/usr/sap/HED/CyC/'.

SELECT-OPTIONS: so_werks FOR vbap-werks.

START-OF-SELECTION.

  DATA: lt_files TYPE STANDARD TABLE OF eps2fili.

  CALL FUNCTION 'EPS2_GET_DIRECTORY_LISTING'
    EXPORTING
      iv_dir_name            = pa_file
*     file_mask              = ''
* IMPORTING
*     DIR_NAME               =
*     FILE_COUNTER           =
*     ERROR_COUNTER          =
    TABLES
      dir_list               = lt_files
    EXCEPTIONS
      invalid_eps_subdir     = 1
      sapgparam_failed       = 2
      build_directory_failed = 3
      no_authorization       = 4
      read_directory_failed  = 5
      too_many_read_errors   = 6
      empty_directory_list   = 7
      OTHERS                 = 8.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

*  DELETE lt_files WHERE name NA '.CSV'.

  CHECK lt_files[] IS NOT INITIAL.

*
*
*DATA: lr_cnfidx        TYPE REF TO ycl_hp_idx,
*      lt_cm            TYPE TABLE OF zssdt_cm,
*      lv_calculo_x(10) TYPE p DECIMALS 5,
*      lv_sblar(10)     TYPE p DECIMALS 5,
*      lv_wmeng(10)     TYPE p DECIMALS 5,
*      lv_zwmeng(10)    TYPE p DECIMALS 5,
*      t_rte            TYPE yhp_omp_tt_rte,
*      s_vbap_x         TYPE vbap,
*      t_msg            TYPE esp1_message_tab_type,
*      s_msg            TYPE esp1_message_wa_type.
*
*IF sy-tcode = 'VA21' OR sy-tcode = 'VA22'.
*
*  SELECT * FROM zssdt_cm INTO TABLE lt_cm
*    WHERE vkorg = vbak-vkorg
*      AND vtweg = vbak-vtweg
*      AND auart = vbak-auart.
*  IF sy-subrc EQ 0.
*
*    REFRESH t_msg.
*    LOOP AT xvbap INTO DATA(ls_xvbap_aux).
*      CLEAR: lv_calculo_x, lr_cnfidx, lv_sblar, lv_wmeng, lv_zwmeng, t_rte,  s_vbap_x.
*      " Datos Actualizados
*      READ TABLE xvbep INTO DATA(ls_xvbep_aux) WITH KEY vbeln = ls_xvbap_aux-vbeln
*                                                        posnr = ls_xvbap_aux-posnr.
*      IF sy-subrc EQ 0.
*        " Datos Originales
*        READ TABLE yvbep INTO DATA(ls_yvbep_aux) WITH KEY vbeln = ls_xvbap_aux-vbeln
*                                                    posnr = ls_xvbap_aux-posnr.
*        IF sy-subrc = 0.
**          IF ls_xvbep_aux-wmeng <> ls_yvbep_aux-wmeng AND ls_xvbap_aux-bedae <> 'KSV'.
*          IF ls_xvbap_aux-bedae <> 'KSV'.
*            MOVE-CORRESPONDING ls_xvbap_aux TO s_vbap_x.
*
*            TRY.
*                ycl_hp_sdu=>pricing_prepare_tkomp_mv45a( EXPORTING is_vbap  = s_vbap_x
*                                                                   it_xvbap = xvbap[]
*                                                          CHANGING cs_tkomp = tkomp ).
*              CATCH /vcxi/cx_ckx.
*            ENDTRY.
*
*            TRY.
*                lr_cnfidx ?= ycl_hp_idx=>/vcxi/if_ckx_object~get_instance( if_guid = CONV /vcxi/ckx_guid( vbap-cuobj ) ).
*                CHECK lr_cnfidx IS BOUND.
*                lr_cnfidx->get_data(
*                         IMPORTING
*                           et_spec_db  = DATA(lt_spec)  " HP: IndexDB - Specification - DB
*                           et_board_db = DATA(lt_board) " HP: IndexDB - Board - DB
*                           et_print_db = DATA(lt_print) " HP: IndexDB - Printing- DB
*                          et_shipu_db = DATA(lt_shipu)  " HP: IndexDB - Shipping Units - DB "SMT - Añadir campo Container a Tkomp
*                      et_rte_db   = DATA(lt_rte_db)     " HP: IndexDB - Routing - DB
*                      ).
*
*                t_rte = CORRESPONDING #( lt_rte_db ).
*
*                TRY.
*                    "Specification data
*                    SORT lt_spec BY sblar DESCENDING.
*                    CHECK lt_spec[] IS NOT INITIAL.
*                    DATA(ls_spec) = lt_spec[ 1 ].
*                  CATCH cx_sy_itab_line_not_found.
*                ENDTRY.
*
*              CATCH /vcxi/cx_ckx.
*            ENDTRY.
*
*            CHECK lt_board[] IS NOT INITIAL.
*            DATA(ls_board) = lt_board[ 1 ].
*
*
*            CLEAR lt_cm[].
*
*            IF t_rte[] IS NOT INITIAL.
*
*              SELECT * FROM zssdt_cm INTO TABLE lt_cm
*                FOR ALL ENTRIES IN t_rte
*                WHERE vkorg = vbak-vkorg
*                  AND vtweg = vbak-vtweg
*                  AND werks = ls_xvbap_aux-werks
*                  AND auart = vbak-auart
*                  AND pstyv = ls_xvbap_aux-pstyv
*                  AND board = ls_board-board
*                  AND flute = ls_board-flute
*                  AND arbpl = t_rte-arbpl.
*
*            ENDIF.
*
*            IF lt_cm[] IS INITIAL.
*
*              SELECT * FROM zssdt_cm INTO TABLE lt_cm
*                FOR ALL ENTRIES IN t_rte
*                WHERE vkorg = vbak-vkorg
*                  AND vtweg = vbak-vtweg
*                  AND werks = ls_xvbap_aux-werks
*                  AND auart = vbak-auart
*                  AND pstyv = ls_xvbap_aux-pstyv
*                  AND arbpl = t_rte-arbpl.
*
*            ENDIF.
*
*            IF lt_cm[] IS INITIAL .
*
*              SELECT * FROM zssdt_cm INTO TABLE lt_cm
*                WHERE vkorg = vbak-vkorg
*                  AND vtweg = vbak-vtweg
*                  AND werks = ls_xvbap_aux-werks
*                  AND auart = vbak-auart
*                  AND pstyv = ls_xvbap_aux-pstyv
*                  AND board = ls_board-board
*                  AND flute = ls_board-flute.
*
*            ENDIF.
*
*            IF lt_cm[] IS NOT INITIAL.
*              SORT lt_cm BY zwmeng ASCENDING.
*              DATA(ls_cm) = lt_cm[ 1 ].
*
*
*              lv_sblar = ls_spec-sblar.
*              lv_wmeng = ls_xvbep_aux-wmeng.
*              lv_calculo_x = lv_sblar * lv_wmeng.
*              lv_calculo_x = lv_calculo_x / 1000.
*              lv_zwmeng = ls_cm-zwmeng * 100.
*
*              IF lv_calculo_x LT lv_zwmeng.
*                CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*                  EXPORTING
*                    input  = ls_xvbep_aux-posnr
*                  IMPORTING
*                    output = lv_posnr.
*
*                s_msg-msgid = 'ZSD'.
*                s_msg-msgty = 'W'.
*                s_msg-msgno = '229'.
*                s_msg-msgv1 = lv_posnr.
*                s_msg-msgv2 = ls_cm-zwmeng.
*                APPEND s_msg TO t_msg.
*              ENDIF.
*            ENDIF.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*    ENDLOOP.
*
*    IF t_msg[] IS NOT INITIAL.
*      CALL FUNCTION 'C14Z_MESSAGES_SHOW_AS_POPUP'
*        TABLES
*          i_message_tab = t_mseg[].
*    ENDIF.
*  ENDIF.
*ENDIF.
