*&---------------------------------------------------------------------*
*& Report  ZSPPWMRESBALT
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zsppwmresbalt.
DATA: ret                TYPE bapiret1,
      timetickets        TYPE TABLE OF bapi_pp_timeticket WITH HEADER LINE,
      bapi_item          TYPE TABLE OF bapi2017_gm_item_create WITH HEADER LINE,
      link_conf_goodsmov TYPE TABLE OF bapi_link_conf_goodsmov WITH HEADER LINE,
      detail_return      TYPE TABLE OF bapi_coru_return WITH HEADER LINE.
DATA: aux_txt04 LIKE tj02t-txt04,
      aux_liber TYPE flag,
      aux_lgnum TYPE ltak-lgnum,
      aux_rsnum LIKE resb-rsnum.
DATA: lv_canti_101 TYPE menge_d,
      lv_canti_102 TYPE menge_d.

TABLES: caufvd,
        tj02t,
        marc,
        pkhd.

SELECTION-SCREEN BEGIN OF BLOCK bl1 WITH FRAME TITLE text-bl1.
PARAMETERS: p_aufnr LIKE caufvd-aufnr OBLIGATORY,
            p_werks LIKE caufvd-werks,
            p_auart LIKE caufvd-auart,
            p_txt04 LIKE tj02t-txt04.
SELECTION-SCREEN END OF BLOCK bl1.
selection-SCREEN begin of BLOCK bl2 WITH FRAME TITLE text-bl2.
PARAMETERS: p_matnr LIKE afpo-matnr,
            p_pwerk LIKE afpo-pwerk,
            p_plgor LIKE afpo-lgort,
            p_charg LIKE afpo-charg,
            p_menge LIKE lips-lfimg,
            p_meins LIKE lips-vrkme.
selection-SCREEN begin of BLOCK bl3 WITH FRAME TITLE text-bl3.

PARAMETERS:
            p_LHMG1 type LVS_LHMNG1,
            p_LHME1 type  LHMEH1,
            p_LETY1 type LVS_LETYP1.
SELECTION-SCREEN END OF BLOCK bl3.

PARAMETERS:
            p_genhy type flag,
            p_exidv LIKE vekp-exidv.
SELECTION-SCREEN END OF BLOCK bl2.
PARAMETERS: p_break type flag DEFAULT 'X'.
INITIALIZATION.
  CALL FUNCTION 'POPUP_TO_INFORM'
    EXPORTING
      titel         = text-tit
      txt1          = text-tx1
      txt2          = text-tx2
      TXT3          = text-tx3
      TXT4          = text-tx4
            .


*at SELECTION-SCREEN.
at SELECTION-SCREEN on BLOCK bl1.
    data liberada type flag.
    PERFORM existe_of USING p_aufnr CHANGING p_werks p_auart p_TXT04 liberada aux_rsnum aux_lgnum.
    if p_werks is INITIAL.
        MESSAGE e017(CO) with p_aufnr.
    elseif liberada ne abap_true.
                 MESSAGE e398(00) with text-e01.
    endif.
at SELECTION-SCREEN on BLOCK bl2.
  check p_exidv is not INITIAL
    and p_pwerk is not INITIAL
    and p_plgor is not INITIAL.
  data lenum type lein-lenum.
  CALL FUNCTION 'CONVERSION_EXIT_LENUM_INPUT'
    EXPORTING
      input                 = p_exidv
   IMPORTING
     OUTPUT                = lenum
   EXCEPTIONS
     CHECK_FAILED          = 1
     NOT_NUMERIC           = 2
     T344_GET_FAILED       = 3
     WRONG_LENGTH          = 4
     OTHERS                = 5
            .
  IF sy-subrc <> 0.
     MESSAGE id sy-msgid type 'I' NUMBER sy-msgno with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  else.
     select SINGLE * into @data(T320) from t320 where werks eq @p_pwerk
                                                  and lgort eq @p_plgor.
     if sy-subrc eq 0.
        select SINGLE * into @data(lein) from lein where lenum eq @lenum.
        if sy-subrc eq 0.
           MESSAGE e398(00) with 'la UA ya existe'.
        else.
        endif.
     endif.
  ENDIF.

AT SELECTION-SCREEN.
  IF p_aufnr IS NOT INITIAL
    AND p_matnr IS INITIAL.
    SELECT SINGLE matnr pwerk lgort charg INTO (p_matnr, p_pwerk, p_plgor, p_charg) FROM afpo WHERE aufnr EQ p_aufnr.
    if sy-subrc eq 0.
      select SINGLE lgnum into @data(lgnum) from t320 where werks eq @p_pwerk.
      if sy-subrc eq 0.
          select single  lhmg1 lhme1 lety1 into (p_LHMG1, p_LHME1, p_LETY1) from mlgn where lgnum eq lgnum
                                                                                        and matnr eq p_matnr.
      endif.
    endif.
  ENDIF.
  IF p_matnr IS NOT INITIAL.
    SELECT SINGLE meins INTO p_meins FROM mara WHERE matnr EQ p_matnr.
  ENDIF.
    check p_genhy eq abap_true
      and p_exidv is  INITIAL.
    CALL FUNCTION 'ZSWM_GET_EXIDV_NUMBER'
      EXPORTING
        lgnum         = '201'
      IMPORTING
        EXIDV         = p_exidv
*       ERROR         =
*       TT_LOG        =
              .


AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'P_WERKS'
        OR 'P_AUART'
        OR 'P_TXT04'
        OR 'P_MEINS'
        OR 'P_LGNUM'
        OR 'P_PWERK'
        OR 'P_PLGOR'
        OR 'P_LGTYP'
        OR 'P_RSNUM'
        OR 'P_RSPOS'
        or 'P_LHMG1'
        or 'P_LHME1'
        or 'P_LETY1'.
        screen-input = 0.
      WHEN 'P_MATNR'
        OR 'P_CHARG'
        OR 'P_LGNUM'
        OR 'P_LGTYP'
        OR 'P_LGPLA'
        OR 'P_RSNUM'
        OR 'P_RSPOS'
        OR 'P_MENGE'.
        PERFORM existe_of USING p_aufnr CHANGING caufvd-werks caufvd-auart aux_txt04 aux_liber aux_rsnum aux_lgnum.
        IF aux_liber EQ abap_true.
        ELSE.
          screen-input = 0.
        ENDIF.
    ENDCASE.
    MODIFY SCREEN.
  ENDLOOP.

START-OF-SELECTION.
  CLEAR: bapi_item, bapi_item[], timetickets, timetickets[],
         link_conf_goodsmov, link_conf_goodsmov[], detail_return,
         detail_return[].
***************************************************************
***                 Timeticket por defecto                  ***
***************************************************************
  timetickets-orderid          = p_aufnr.
  timetickets-operation        = '0010'.
  timetickets-plant            = p_pwerk.
*  timetickets-conf_quan_unit_iso
*                               = p_meins.

*  SELECT MAX( vornr )
*    INTO timetickets-operation
*  FROM afko AS t1 INNER JOIN afvc AS t2
*  ON t1~aufpl EQ t2~aufpl
*  WHERE t1~aufnr EQ p_aufnr.

*  timetickets-postg_date       = sy-datum.
*  timetickets-conf_activity1   = 0."p_wa-cantidad.
*  timetickets-conf_acti_unit1  = 'MIN'.
  APPEND timetickets.

*  data propose type BAPI_PP_CONF_PROP.
*  clear propose.
*  propose-quantity =
*  propose-activity = abap_true.
*
*  CALL FUNCTION 'BAPI_PRODORDCONF_GET_TT_PROP'
*    EXPORTING
*      PROPOSE                  = propose
**   IMPORTING
**     RETURN                   =
*    TABLES
*      timetickets              = timetickets
*     GOODSMOVEMENTS           = bapi_item
*     LINK_CONF_GOODSMOV       = link_conf_goodsmov
*     DETAIL_RETURN            = detail_return
*            .
*   BREAK-POINT.


  bapi_item-orderid    = p_aufnr.
  bapi_item-material   = p_matnr.
  bapi_item-plant      = p_pwerk.
  bapi_item-stge_loc   = p_plgor.
  bapi_item-batch      = p_charg.
  bapi_item-move_type  = '101'.
  bapi_item-mvt_ind    = 'F'.
  bapi_item-entry_qnt  = p_menge.
  bapi_item-entry_uom  = p_meins.
  bapi_item-unload_pt  = p_exidv.
  bapi_item-spec_mvmt = space.
  bapi_item-item_text = 'Prueba alta'.
*  bapi_item-SU_PL_STCK_1 = 1 . " Número de unidades de almacén a entrar
*bapi_item-ST_UN_QTYY_1  = p_menge.   " Ctd.por un.almacén a almacenar en UMA
*select SINGLE isocode into  bapi_item-st_un_qtyy_1_iso from t006 where MSEHI eq p_meins.
*move 'PL' to bapi_item-UNITTYPE_1  .
  APPEND bapi_item.

****************************************************************
****                 Timeticket por defecto                  ***
****************************************************************
*  timetickets-orderid          = p_aufnr.
*  timetickets-operation        = '0010'.
**  SELECT MAX( vornr )
**    INTO timetickets-operation
**  FROM afko AS t1 INNER JOIN afvc AS t2
**  ON t1~aufpl EQ t2~aufpl
**  WHERE t1~aufnr EQ p_aufnr.
*
*  timetickets-postg_date       = sy-datum.
*  timetickets-plant            = p_pwerk.
*  timetickets-conf_activity1   = 0."p_wa-cantidad.
*  timetickets-conf_acti_unit1  = 'MIN'.
*  APPEND timetickets.
  DESCRIBE TABLE bapi_item.
  DO sy-tfill TIMES.
    link_conf_goodsmov-index_confirm  = '1'.
    link_conf_goodsmov-index_goodsmov = sy-index.
    APPEND link_conf_goodsmov.
  ENDDO.

  CALL FUNCTION 'BAPI_PRODORDCONF_CREATE_TT'
    EXPORTING
      post_wrong_entries = '2'
*     TESTRUN            =
*     CALL_ON_INBOUND_QUEUE          = ' '
    IMPORTING
      return             = ret
    TABLES
      timetickets        = timetickets
      goodsmovements     = bapi_item
      link_conf_goodsmov = link_conf_goodsmov
*     CHARACTERISTICS_WIPBATCH       =
*     LINK_CONF_CHAR_WIPBATCH        =
      detail_return      = detail_return
*     CHARACTERISTICS_BATCH          =
*     LINK_GM_CHAR_BATCH =
    .
  if p_break eq abap_true.
BREAK-POINT.
endif.
loop at detail_return where type eq 'E'
                        or type eq 'A'.
endloop.
if sy-subrc eq 0.
   CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
else.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' "Execute external Commit when using BAPIs
      EXPORTING
        wait = 'X'.
endif.

FORM existe_of  USING    p_aufnr LIKE caufvd-aufnr
                CHANGING p_werks LIKE caufvd-werks
                         p_auart LIKE caufvd-auart
                         p_txt04 LIKE tj02t-txt04
                         p_liber TYPE flag
                         p_rsnum LIKE resb-rsnum
                         p_lgnum LIKE resb-lgnum.
  DATA objnr LIKE caufvd-objnr.
  CLEAR: p_werks, p_auart, p_txt04, p_liber, p_rsnum.

  SELECT SINGLE werks auart objnr rsnum INTO (p_werks, p_auart, objnr, p_rsnum) FROM caufv WHERE aufnr EQ p_aufnr.
  IF sy-subrc EQ 0.
    SELECT SINGLE COUNT( * )  FROM jest WHERE objnr EQ objnr
    AND stat  EQ 'I0002'
    AND inact NE abap_true.
    IF sy-subrc EQ 0.
      MOVE abap_true TO p_liber.
      SELECT SINGLE txt04 INTO p_txt04 FROM tj02t WHERE istat EQ 'I0002'
      AND spras EQ sy-langu.
    ENDIF.
  ELSE.
    CLEAR: p_werks, p_auart, p_txt04, p_liber, p_rsnum.
  ENDIF.
  IF p_werks IS NOT INITIAL.
    SELECT lgnum INTO p_lgnum FROM resb WHERE rsnum EQ p_rsnum.
      CHECK p_lgnum IS NOT INITIAL.
    ENDSELECT.
  ENDIF.
ENDFORM.
