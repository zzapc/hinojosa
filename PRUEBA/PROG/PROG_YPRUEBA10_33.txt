*&---------------------------------------------------------------------*
*& Report  YPRUEBA10
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT yprueba10.
*Obtener el GUID de la instancia del VC a través del objeto de configuración (CUOBJ)
*"----------------------------------------------------------------------
DATA: lf_gvcin  TYPE  /vcxi/vkcr_gvcin.

*** <Insertar lógica para obtener el CUOBJ y llenar LF_CUOBJ> *** <(i.e. VBAP-CUOBJ, MARC-CUOBJ, etc.)>
SELECT SINGLE cuobj FROM vbap
  INTO @DATA(lf_cuobj)
 WHERE vbeln = '0020006613'.

*DATA datos TYPE yhp_svcs_s_tool_vis.

*NEW zhcl_ai_core( )->get_datos_ve( EXPORTING cuobj = lf_cuobj
*                                      id = 'TOOL_DCUT'
*                                      value_extractor = 'ZHP_TOOL_HANDLING'
*                            IMPORTING datos = datos
*                                      message = DATA(l_msg) ).

DATA DATOS TYPE YHP_SMD_MBQ_S_TOOL_PRINT_VE.
NEW zhcl_ai_core( )->get_datos_ve( EXPORTING cuobj = lf_cuobj
                                      id = 'CSTEP_PRINT'
                                      value_extractor = 'TOOLINFO_PRINT'
                            IMPORTING datos = datos
                                      message = DATA(l_msg) ).

BREAK-POINT.

*
**** Levantar GUID de la instancia VC
*lf_gvcin = /vcxi/cl_vkcr_gateway=>get_gvcin_by_cuobj( if_cuobj = lf_cuobj ).
*
**instanciar el objeto smartvc a través del guid
**"----------------------------------------------------------------------
*DATA: lr_svc TYPE REF TO /vcxi/cl_vksra_svc.
*
**** Obtenemos instancia del SmartVC API
*lr_svc = /vcxi/cl_vksra_svc=>get_instance( if_gvcin = lf_gvcin ).
*
**Establecer el elemento SmartVC deseado como punto de partida para el Modelo de Extracción
**"----------------------------------------------------------------------
*DATA:  lr_object TYPE REF TO /vcxi/if_ckx_object,
*      lr_svcel  TYPE REF TO /vcxi/cl_vksra_svc_element.
**DATA: lt_svcel  TYPE REF TO /vcxi/ckx_tt_object.
*
**** Buscar elementos con ID SmartVC deseado (ej. componente corrugado)
**DATA(lt_svcel) = lr_svc->get_svc_elements( if_id    = 'COMP_P1'
*DATA(lt_svcel) = lr_svc->get_svc_elements( if_id    = 'TOOL_DCUT'
*                                     if_inuse = abap_true ).
*
**** Usar primer record (en case de múltiples se utiliza un LOOP)
*READ TABLE lt_svcel INTO lr_object INDEX 1.
*
*
**** Convertimos el tipo genérico al elemento SmartVC
*TRY.
*    MOVE lr_object ?TO lr_svcel.
*  CATCH cx_sy_move_cast_error.
*    CLEAR: lr_svcel.
*ENDTRY.
*
**CONSTANTS: lc_ivemo_idx_box TYPE /vcxi/vksc_ivemo VALUE 'TOOLINFO_DCUT'.
**CONSTANTS: lc_ivemo_idx_box TYPE /vcxi/vksc_ivemo VALUE 'IDX_BOX'.
*CONSTANTS: lc_ivemo_idx_box TYPE /vcxi/vksc_ivemo VALUE 'ZHP_TOOL_HANDLING'.
*DATA: lr_valex  TYPE REF TO data.
**FIELD-SYMBOLS: <s_box_ve> TYPE YHP_SMD_MBQ_S_TOOL_DCUT_VE.
*FIELD-SYMBOLS: <s_box_ve> TYPE YHP_SVCS_S_TOOL_VIS.
*
*TRY.
**** Ejecutar la Extracción de Valores (Datos)
*    lr_valex = lr_svc->get_valex( if_ivemo       = lc_ivemo_idx_box
*                                  ir_svc_element = lr_svcel ).
*    CHECK lr_valex IS BOUND.
*
**** Movemos la referencia(apuntador) a un tipo definido
*    ASSIGN lr_valex->* TO <s_box_ve>.
*
*  CATCH /vcxi/cx_ckx INTO DATA(lr_cx_ckx).
*    write / lr_cx_ckx->get_text( ).
*    CLEAR: lr_valex.
*ENDTRY.
*
**** Continuamos si se encontraron datos
*CHECK <s_box_ve> IS ASSIGNED.
