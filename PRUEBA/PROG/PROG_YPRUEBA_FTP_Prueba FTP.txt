*&---------------------------------------------------------------------*
*& Report  YPRUEBA_FTP
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT yprueba_ftp.

DATA i_tabla TYPE TABLE OF string.

*i_tabla = VALUE #( ( `linea1` ) ( `linea2` ) ).
*NEW zcl_ap_ftp( )->grabar_fichero( EXPORTING
**                                   user = 'dlpuser'
**                                   password = 'rNrKYTX9g7z3RgJRmxWuGHbeu'
**                                   host = 'ftp.dlptest.com'
*                                   user = 'C1=FTP_USUARIO'
*                                   password = 'C1=FTP_PASSWORD'
*                                   host = 'C1=FTP_IP'
*                                   parametros = 'BARTENDER'
*                                   fichero = 'prueba.txt'
*                                   directorio = '202f4'
*                                   i_tabla = i_tabla
*                                   IMPORTING message = DATA(l_msg) ).
*WRITE : / l_msg.


zcl_ap_ftp=>matar_sesiones_rfc( ).
DATA(o_ftp) = NEW zcl_ap_ftp( ).

DATA(message) = o_ftp->connect( user               = 'sapservicehpp@hinojosagroup.es'
         password           = 'H1n02014'
         host               = '10.200.26.99 6543'
).

IF NOT message IS INITIAL.
  o_ftp->disconnect( ).
ELSE.
  o_ftp->cd( 'HPG_CYC_SAP_OUT_PRO' ).

  IF o_ftp->error_comando = 'X'.
    WRITE o_ftp->mensaje_error.
  ELSE.
*    DATA(i_dir) = o_ftp->get_lista_ficheros( ).

*    cl_demo_output=>display( i_dir ).

    DATA: i_lineas2 TYPE TABLE OF string,
          i_lineas1 TYPE TABLE OF string.
    o_ftp->leer_fichero( EXPORTING fichero = 'S0145129_DIA20250218-045914-591.CSV'
                                   no_desconectar = 'X'
                                   binario = 'X'
                                 IMPORTING message = DATA(l_msg)
                                           xstring = DATA(xstring)
*                                             i_tabla = i_lineas1
                                            ).
    o_ftp->disconnect( ).

    IF NOT l_msg IS INITIAL.
      MESSAGE |Error leyendo fichero| TYPE 'E'.
    ENDIF.

    SELECT cpcodepage, cpcomment FROM tcp00
      INTO TABLE @DATA(i_codepages)
      WHERE cpcodepage = '1100'.

    LOOP AT i_codepages ASSIGNING FIELD-SYMBOL(<cp>).
      WRITE: / <cp>-cpcodepage, <cp>-cpcomment.
      CLEAR: i_lineas1, i_lineas2.
      TRY.
*          zcl_ap_string=>string2tabla( EXPORTING string = zcl_ap_string=>xstring2string( xstring = xstring encoding = '1100' )
*                                       CHANGING tabla = i_lineas2 ).

          DATA: l_xstring TYPE xstring,
                loc_conv  TYPE REF TO cl_abap_conv_in_ce,
                string    TYPE string.

          l_xstring = xstring.
*          IF NOT xstring IS INITIAL AND descomprimir = 'X'.
*            TRY.
*                cl_abap_gzip=>decompress_binary( EXPORTING gzip_in = xstring
**                                                     gzip_in_len = -1
*                                                 IMPORTING raw_out = l_xstring
**                                                     raw_out_len =
*                  ).
*              CATCH cx_parameter_invalid_range.
*              CATCH cx_sy_buffer_overflow.
*            ENDTRY.
*          ELSE.
*            l_xstring = xstring.
*          ENDIF.

          loc_conv = cl_abap_conv_in_ce=>create( input       = l_xstring
                                                 encoding    = CONV #( <cp>-cpcodepage ) ).
*                                                 replacement = '?'
*                                                 ignore_cerr = abap_false ).

*          TRY.
          loc_conv->read( IMPORTING data = string ).
*            CATCH cx_root INTO DATA(o_root).
*              WRITE: / 'Error conv:', o_root->get_text( ).
*          ENDTRY.
          FIELD-SYMBOLS: <lfs_hex> TYPE x.
          DATA l_char TYPE c.
          l_char = string+206(1).
          ASSIGN l_char TO <lfs_hex> TYPE 'X'.
          WRITE: / string,
                   string+206(1), <lfs_hex>.



          SPLIT string AT cl_abap_char_utilities=>cr_lf INTO TABLE i_lineas2.

          WRITE: / 'Nº líneas', lines( i_lineas2 ).
          LOOP AT i_lineas2 ASSIGNING FIELD-SYMBOL(<lin>).
            WRITE: / <lin>.
          ENDLOOP.
        CATCH cx_root INTO DATA(o_root).
          WRITE: / 'Error:', o_root->get_text( ).
      ENDTRY.
    ENDLOOP.
*    BREAK-POINT  .

  ENDIF.


ENDIF.
