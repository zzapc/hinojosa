*&---------------------------------------------------------------------*
*& Report  ZSPPWMRESBCON
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zsppwmresbcon.
TABLES: caufvd,
        tj02t,
        marc,
        pkhd.
DATA: aux_txt04 LIKE tj02t-txt04,
      aux_liber TYPE flag,
      aux_lgnum TYPE ltak-lgnum,
      aux_rsnum LIKE resb-rsnum.

SELECTION-SCREEN BEGIN OF BLOCK bl1 WITH FRAME TITLE text-bl1.
PARAMETERS: p_aufnr LIKE caufvd-aufnr OBLIGATORY,

            p_werks LIKE caufvd-werks,
            p_auart LIKE caufvd-auart,
            p_txt04 LIKE tj02t-txt04.
SELECTION-SCREEN END OF BLOCK bl1.
SELECT-OPTIONS: s_aufnr FOR caufvd-aufnr.
SELECTION-SCREEN BEGIN OF BLOCK bl2 WITH FRAME TITLE text-bl2.
PARAMETERS: p_matnr LIKE resb-matnr,
            p_charg LIKE resb-charg,
            p_lgnum LIKE resb-lgnum,
            p_lenum like lein-lenum, " add jtm 24.04.2024
            p_lgtyp LIKE resb-lgtyp DEFAULT '100',
            p_lgpla LIKE resb-lgpla,
            p_rsnum LIKE resb-rsnum,
            p_menge LIKE lips-lfimg,
            p_meins LIKE lips-vrkme,
            p_rspos LIKE resb-rspos.
SELECTION-SCREEN END OF BLOCK bl2.
INITIALIZATION.
  CALL FUNCTION 'POPUP_TO_INFORM'
    EXPORTING
      titel         = text-tit
      txt1          = text-tx1
      txt2          = text-tx2
      TXT3          = text-tx3
      TXT4          = text-tx4
            .
AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'P_WERKS'
        OR 'P_AUART'
        OR 'P_TXT04'
        OR 'P_MEINS'
        OR 'P_LGNUM'
*        OR 'P_LGTYP' " del jtm 24.04.2024
        OR 'P_RSNUM'
        OR 'P_RSPOS'.
        screen-input = 0.
      WHEN 'P_MATNR'
        OR 'P_CHARG'
        OR 'P_LGNUM'
        OR 'P_LGTYP'
        OR 'P_LGPLA'
        OR 'P_RSNUM'
        OR 'P_RSPOS'
        OR 'P_MENGE'
        or 'P_LENUM'. " add jtm 24.04.2024
        PERFORM existe_of USING p_aufnr CHANGING caufvd-werks caufvd-auart aux_txt04 aux_liber aux_rsnum aux_lgnum.
        IF aux_liber EQ abap_true.
        ELSE.
          screen-input = 0.
        ENDIF.
    ENDCASE.

    MODIFY SCREEN.
  ENDLOOP.

AT SELECTION-SCREEN ON BLOCK bl2.
  PERFORM existe_of USING p_aufnr CHANGING caufvd-werks caufvd-auart aux_txt04 aux_liber aux_rsnum aux_lgnum.
  CHECK aux_liber EQ abap_true.
  CLEAR: p_meins.
  SELECT SINGLE meins INTO p_meins FROM mara WHERE matnr EQ p_matnr.

AT SELECTION-SCREEN ON BLOCK bl1.
  DATA liberada TYPE flag.
  PERFORM existe_of USING p_aufnr CHANGING p_werks p_auart p_txt04 liberada p_rsnum p_lgnum.
  IF p_werks IS INITIAL.
    MESSAGE e017(co) WITH p_aufnr.
  ELSEIF liberada NE abap_true.
    MESSAGE e398(00) WITH text-e01.
  ENDIF.
* add jtm 24.04.2024
  at SELECTION-SCREEN.
     if p_lgnum is not INITIAL.

     endif.
* fin de add jtm 24.04.2024
START-OF-SELECTION.
  DATA sw_seguir TYPE flag.
  CLEAR sw_seguir.
  WRITE:/ 'OF:        ', p_aufnr,
        / 'Centro:    ', p_werks,
        / 'Tpo Orden: ', p_auart.

*   BREAK-POINT.
  PERFORM existe_of USING p_aufnr CHANGING caufvd-werks caufvd-auart aux_txt04 aux_liber aux_rsnum aux_lgnum.
  CASE aux_liber.
    WHEN abap_true . WRITE: 'Orden liberada'.
    WHEN OTHERS.     WRITE: 'Orden no liberada', ' imposible NOTIFICAR' COLOR 6.
  ENDCASE.
  CHECK aux_liber EQ abap_true
    AND p_matnr   IS NOT INITIAL
    AND p_menge   > 0.
  MOVE abap_true TO sw_seguir.
  SELECT SINGLE * FROM marc WHERE matnr EQ p_matnr
  AND werks EQ p_werks.
  IF sy-subrc NE 0.
    CLEAR sw_seguir.
    WRITE:/10 'Material no dado de alta en centro:', p_werks COLOR 6.
  ENDIF.
  CHECK sw_seguir EQ abap_true.
  IF ( marc-xchar EQ abap_true AND p_charg IS INITIAL ).
    CLEAR sw_seguir.
    WRITE:/10 'El material está sujeto a lotes y este no se ha informado' COLOR 6.

  ENDIF.
  CHECK sw_seguir EQ abap_true.
  IF  ( marc-xchar NE abap_true AND p_charg IS NOT INITIAL ).
    CLEAR sw_seguir.
    WRITE:/10 'El material no está sujeto a lotes y este se ha informado' COLOR 6.

  ENDIF.
  CHECK sw_seguir EQ abap_true.
  IF p_charg IS NOT INITIAL.
    SELECT COUNT( * ) FROM mch1 WHERE matnr EQ p_matnr
    AND charg EQ p_charg.
    IF sy-subrc NE 0.
      WRITE:/10 'Lote no existe' COLOR 6.
      CLEAR sw_seguir.
    ENDIF.
  ENDIF.
  CHECK sw_seguir EQ abap_true.
* add jtm 24.02.2024
  ranges: r_lenum for lqua-lenum.
  clear: r_lenum, r_lenum[].
  if p_lenum is not INITIAL.
     r_lenum+0(3) = 'IEQ'. r_lenum-low = p_lenum. append r_lenum.
  endif.
* fin de add jtm 24.04.2024
  SELECT * INTO TABLE @DATA(tt_lqua) FROM lqua WHERE  lgnum EQ @p_lgnum
                                                  AND matnr EQ @p_matnr
                                                  AND werks EQ @p_werks
                                                  AND lgtyp EQ @p_lgtyp
                                                  AND lgpla EQ @p_lgpla
                                                  and LENum in @r_lenum. " add jtm 24.04.2024
  IF sy-subrc NE 0.
    WRITE:/10 'No hay stock' COLOR 6.
    CLEAR sw_seguir.
  ENDIF.

  CHECK sw_seguir EQ abap_true.
  IF p_charg IS NOT INITIAL.
    READ TABLE tt_lqua WITH KEY charg = p_charg TRANSPORTING NO FIELDS.
    IF sy-subrc NE 0.
      CLEAR sw_seguir.
      WRITE:/10 'No hay stock de ese lote' COLOR 6.
    ENDIF.
  ENDIF.
  CHECK sw_seguir EQ abap_true.
  SELECT * INTO TABLE @DATA(tt_resb) FROM resb WHERE rsnum EQ @p_rsnum.
  DELETE tt_resb WHERE matnr NE p_matnr.
  DATA lote_vacio TYPE resb-charg.
  DATA mov_planificado TYPE flag.
  DATA informar_reserva TYPE flag.
  CLEAR mov_planificado.
  READ TABLE tt_resb INTO DATA(rt_resb) WITH KEY lgnum = p_lgnum
                                                 lgtyp = p_lgtyp
                                                 lgpla = p_lgpla
                                                 matnr = p_matnr
                                                 charg = p_charg.

  IF sy-subrc NE 0.
    READ TABLE tt_resb INTO       rt_resb WITH KEY lgnum = p_lgnum
                                                   lgtyp = p_lgtyp
                                                   lgpla = p_lgpla
                                                   matnr = p_matnr
                                                   charg = lote_vacio.
    IF sy-subrc EQ 0.
      MOVE abap_true TO mov_planificado.
    ENDIF.
  ELSE.
    MOVE abap_true TO mov_planificado.
  ENDIF.
  SELECT SINGLE mtart INTO @DATA(mtart) FROM mara WHERE matnr EQ @p_matnr.
  IF mtart EQ 'ZPAP'.
    SELECT SINGLE * FROM pkhd WHERE prvbe EQ rt_resb-prvbe
    AND werks EQ p_werks.
    IF sy-subrc NE 0
    OR pkhd-berkz EQ '4'.
      MOVE abap_false TO mov_planificado.
      DELETE tt_resb WHERE matnr NE p_matnr.
      DESCRIBE TABLE tt_resb LINES DATA(n_reservas).
      IF n_reservas EQ 1.
        informar_reserva = abap_true.
        READ TABLE tt_resb INTO rt_resb INDEX 1.
      ELSEIF n_reservas > 1.
        SELECT * INTO TABLE @DATA(tt_cis) FROM zsppt_cinumbers WHERE aufnr EQ @p_aufnr.
        DELETE tt_cis WHERE tbnum IS INITIAL.
        SORT tt_cis BY matnr estacion.
        DELETE ADJACENT DUPLICATES FROM tt_cis COMPARING matnr estacion.
        DESCRIBE TABLE tt_cis LINES DATA(n_cisnumbers).
        IF n_cisnumbers < 0.
          MOVE abap_true TO informar_reserva.
          READ TABLE tt_resb INTO rt_resb INDEX 1.
        ELSEIF n_cisnumbers EQ 1.
          MOVE abap_true TO informar_reserva.
          READ TABLE tt_resb INTO rt_resb INDEX 1.
        ELSE.
          DATA: n_paso TYPE i.
          n_paso = 0.
          LOOP AT tt_cis INTO DATA(rt_cis)." where estacion eq p_lgpla.
            ADD 1 TO n_paso.
            CHECK rt_cis-estacion EQ p_lgpla.
            EXIT.
          ENDLOOP.
          IF n_paso <= n_reservas.
            MOVE abap_true TO informar_reserva.
            READ TABLE tt_resb INTO rt_resb INDEX n_paso.
          ELSE.
            MOVE abap_true TO informar_reserva.
            LOOP AT tt_resb INTO rt_resb.
            ENDLOOP.
          ENDIF.
        ENDIF.
*     describe TABLE tT_cis
      ENDIF.
    ENDIF.
  ENDIF.
  IF mov_planificado NE abap_true
  AND tt_resb[] IS NOT INITIAL.
*     informar_reserva = abap_true.
*     select * into TABLE @data(tT_cis) from ZSPPT_CINUMBERS where aufnr eq @p_aufnr.
*     delete tT_cis where tbnum is INITIAL.
*     sort tt_cis by matnr estacion.
*     delete ADJACENT DUPLICATES FROM tt_cis COMPARING matnr estacion.
*     describe TABLE tT_cis
*      clear sW_seguir.
    WRITE:/10 'El stock no está ubicado según reserva. SEGUIMOS' COLOR 3.
  ENDIF.
  CHECK sw_seguir EQ abap_true.
  DATA: ls_goodsmvt_header  TYPE         bapi2017_gm_head_01,
        ls_goodsmvt_code    TYPE         bapi2017_gm_code,
        ls_goodsmvt_item    TYPE         bapi2017_gm_item_create,
        ls_return           TYPE         bapiret2,
        lt_return           TYPE         bapiret2_t,
        lv_materialdocument TYPE bapi2017_gm_head_ret-mat_doc,
        lv_matdocumentyear  TYPE bapi2017_gm_head_ret-doc_year,

        lt_goodsmvt_item    TYPE TABLE OF bapi2017_gm_item_create.
  REFRESH: lt_goodsmvt_item, lt_return.
  CLEAR: ls_goodsmvt_code, ls_goodsmvt_header, ls_return, lv_matdocumentyear, lv_materialdocument.

  ls_goodsmvt_code = '06'.
  ls_goodsmvt_header-pstng_date  = sy-datum." ps_ord_cons-budat.
  ls_goodsmvt_header-doc_date    = sy-datum."ps_ord_cons-budat.
  ls_goodsmvt_header-header_txt  = text-003.

  CLEAR: ls_goodsmvt_item.
  ls_goodsmvt_item-material = p_matnr.
  ls_goodsmvt_item-orderid  = p_aufnr.
  ls_goodsmvt_item-plant = p_werks. "'3000'.
  ls_goodsmvt_item-batch = p_charg.
  ls_goodsmvt_item-move_type = '261'.
  ls_goodsmvt_item-stck_type = ' '. " Libre utilización
  ls_goodsmvt_item-entry_qnt = p_menge.
  ls_goodsmvt_item-entry_uom = p_meins.
  ls_goodsmvt_item-UNLOAD_PT = p_lenum. " add jtm 24.04.2024
  case mov_planificado.
  when abap_true.
    ls_goodsmvt_item-reserv_no = p_rsnum.
    ls_goodsmvt_item-res_item = rt_resb-rspos.
    ls_goodsmvt_item-stge_loc = rt_resb-lgort.
  when OTHERS.
    READ TABLE tt_lqua INTO DATA(rt_lqua) INDEX 1.
    ls_goodsmvt_item-stge_loc = rt_lqua-lgort.
    ls_goodsmvt_item-stge_type                   = p_lgtyp.
    ls_goodsmvt_item-stge_bin                    = p_lgpla.
    IF informar_reserva EQ abap_true.
*      ls_goodsmvt_item-reserv_no = rt_resb-rsnum.
*      ls_goodsmvt_item-res_item = rt_resb-rspos.

    ENDIF.
  ENDCASE.
  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.

  CLEAR: lv_materialdocument, lv_matdocumentyear.
  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_goodsmvt_header
      goodsmvt_code    = ls_goodsmvt_code
    IMPORTING
      materialdocument = lv_materialdocument
      matdocumentyear  = lv_matdocumentyear
    TABLES
      goodsmvt_item    = lt_goodsmvt_item
      return           = lt_return.
  DATA error TYPE flag.
  CLEAR error.
  LOOP AT lt_return INTO ls_return WHERE type EQ 'E'
                                      OR type EQ 'A'.
  ENDLOOP.
  IF sy-subrc EQ 0.
    error = abap_true.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*       IMPORTING
*         RETURN        =
      .

  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*       EXPORTING
*         WAIT          =
*       IMPORTING
*         RETURN        =
      .
    WRITE:/10 'Movimiento realizado:', lv_matdocumentyear, lv_materialdocument.
    DATA tanum TYPE ltak-tanum.
    DATA: mblnr LIKE mkpf-mblnr,
          mjahr LIKE mkpf-mjahr.
    mblnr = lv_materialdocument.
    mjahr = lv_matdocumentyear.
    CALL FUNCTION 'ZSWM_EJECUTAR_NECESIDAD'
      EXPORTING
*       LGNUM     =
*       TBNUM     =
        mblnr     = mblnr
        mjahr     = mjahr
        wait      = abap_true
*       MODE_BI   = 'N'
      IMPORTING
*       ERROR     =
        tt_return = lt_return[]
        tanum     = tanum.
    WRITE:/10 'OT:', tanum.
    LOOP AT lt_return INTO ls_return.
      WRITE:/ ls_return-type, ls_return-id, ls_return-number.

      WRITE:/ ls_return-message.

    ENDLOOP.
  ENDIF.
  IF lt_return[] IS NOT INITIAL.
    WRITE:/ 'LOG'.
  ENDIF.
  LOOP AT lt_return INTO ls_return.
    WRITE:/ ls_return-type, ls_return-id, ls_return-number.

    WRITE:/ ls_return-message.

  ENDLOOP.
*&---------------------------------------------------------------------*
*&      Form  EXISTE_OF
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_AUFNR  text
*      <--P_P_WERKS  text
*      <--P_P_AUART  text
*      <--P_P_TXT04  text
*----------------------------------------------------------------------*
FORM existe_of  USING    p_aufnr LIKE caufvd-aufnr
                CHANGING p_werks LIKE caufvd-werks
                         p_auart LIKE caufvd-auart
                         p_txt04 LIKE tj02t-txt04
                         p_liber TYPE flag
                         p_rsnum LIKE resb-rsnum
                         p_lgnum LIKE resb-lgnum.
  DATA objnr LIKE caufvd-objnr.
  CLEAR: p_werks, p_auart, p_txt04, p_liber, p_rsnum.

  SELECT SINGLE werks auart objnr rsnum INTO (p_werks, p_auart, objnr, p_rsnum) FROM caufv WHERE aufnr EQ p_aufnr.
  IF sy-subrc EQ 0.
    SELECT SINGLE COUNT( * )  FROM jest WHERE objnr EQ objnr
    AND stat  EQ 'I0002'
    AND inact NE abap_true.
    IF sy-subrc EQ 0.
      MOVE abap_true TO p_liber.
      SELECT SINGLE txt04 INTO p_txt04 FROM tj02t WHERE istat EQ 'I0002'
      AND spras EQ sy-langu.
    ENDIF.
  ELSE.
    CLEAR: p_werks, p_auart, p_txt04, p_liber, p_rsnum.
  ENDIF.
  IF p_werks IS NOT INITIAL.
    SELECT lgnum INTO p_lgnum FROM resb WHERE rsnum EQ p_rsnum.
      CHECK p_lgnum IS NOT INITIAL.
      exit. " add jtm 24.04.2024
    ENDSELECT.
    if p_lgnum is INITIAL.
       select SINGLE lgnum into p_lgnum from t320 where werks eq p_werks. " add jtm 24.04.2024
    endif.
  ENDIF.
ENDFORM.
