
class ZCL_UTILS_ALV_GRID definition
  public
  inheriting from ZCL_UTILS
  create public .

public section.

  interfaces IF_ALV_RM_GRID_FRIEND .

  data S_VARIANT type DISVARIANT read-only .
  data S_LAYOUT type LVC_S_LAYO read-only .
  data T_FCAT type LVC_T_FCAT read-only .

  class-events EV_TOOLBAR
    exporting
      value(I_OBJECT) type ref to CL_ALV_EVENT_TOOLBAR_SET .
  class-events EV_USER_COMMAND .

  methods BUILD_FCAT
    importing
      !I_DATA type ANY
    returning
      value(R_T_FCAT) type LVC_T_FCAT .
  methods CONSTRUCTOR
    importing
      !I_LAYOUT type LVC_S_LAYO optional
      !I_CONTAINER type ref to CL_GUI_CONTAINER
    raising
      ZCX_WM_EXCEPTION .
  methods GET_OUTTAB
    exporting
      value(E_OUTTAB) type ANY .
  methods ON_DATA_CHANGE
    for event DATA_CHANGED of CL_GUI_ALV_GRID_EXT
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods ON_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID_EXT
    importing
      !E_OBJECT .
  methods ON_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID_EXT
    importing
      !E_UCOMM .
  methods REFRESH_ALV .
  methods SET_S_LAYOUT
    importing
      !I_LAYOUT type LVC_S_LAYO .
  methods SET_S_VARIANT
    importing
      !I_VARIANT type DISVARIANT .
  methods SET_T_FCAT
    importing
      !I_LVC_T_FCAT type LVC_T_FCAT .
  methods SHOW_ALV_GRID
    changing
      !C_OUTTAB type ANY TABLE
    raising
      ZCX_MM_EXCEPTION .
  methods IS_LAUNCHED
    returning
      value(E_LAUNCHED) type ABAP_BOOL .
  methods FINALIZE .
  methods SELECT_ALL .
  methods GET_SELECTED_DATA
    exporting
      value(E_T_DATA) type ANY .
  class-methods S_BUILD_CUSTOM_CONTAINER
    importing
      !I_DYNPROG type SYREPID
      !I_DYNNR type SYDYNNR
      !I_CONTAINER_NAME type C
    returning
      value(R_CUSTOM_CONTAINER) type ref to CL_GUI_CUSTOM_CONTAINER
    raising
      ZCX_WM_EXCEPTION .
  class-methods S_BUILD_BASIC_LAYOUT
    returning
      value(R_LAYOUT) type LVC_S_LAYO .
protected section.

  data _O_ALV_GRID type ref to CL_GUI_ALV_GRID_EXT .
  data _O_CUSTOM_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .

  methods _REFRESH_DATA .
  methods _LAUNCH_POPUP_MSG
    importing
      !I_MSG1 type STRING
      !I_MSG2 type STRING optional
      !I_MSG3 type STRING optional
      !I_MSG4 type STRING optional .
  methods _LAUNCH_POPUP_TO_CONFIRM
    importing
      !I_QUESTION type STRING
      !I_POPUP_TYPE type ICON-NAME
    returning
      value(R_IS_OK) type ABAP_BOOL .
  methods _LAUNCH_POPUP_VALUES_GET
    importing
      !I_VALUECHECK type ABAP_BOOL default ''
    changing
      !C_T_VAL type TY_SVAL
    returning
      value(R_CODE) type CHAR1 .
private section.

  class-data _C_CL_MSGID_LABEL type MSGID value 'ZCL_UTILS_ALV_GRID' ##NO_TEXT.
  data _O_CONTAINER type ref to CL_GUI_CONTAINER .
  data _LAUNCHED type ABAP_BOOL .

  events EV_DATA_CHANGE .

  methods _REGISTER_EVENTS .
  methods _SET_BASIC_EVENTS .
endclass. "ZCL_UTILS_ALV_GRID definition
class ZCL_UTILS_ALV_GRID implementation.
METHOD _launch_popup_msg.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  CHECK i_msg1 IS NOT INITIAL.


**********************************************************************
* Lógica
**********************************************************************

*** LAUNCH POPUP

  CALL FUNCTION 'POPUP_TO_INFORM'
    EXPORTING
      titel         = 'Atención'
      txt1          = i_msg1
      txt2          = i_msg2
      txt3          = i_msg3
      txt4          = i_msg4.

ENDMETHOD.
METHOD _launch_popup_to_confirm.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_answer TYPE c.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** LAUNCH POPUP

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar                    = 'Atención'
*     DIAGNOSE_OBJECT             = ' '
      text_question               = i_question
      text_button_1               = 'Aceptar'
      icon_button_1               = 'ICON_CHECKED'
      text_button_2               = 'Cancelar'
      icon_button_2               = 'ICON_CANCEL'
      popup_type                  = i_popup_type
      display_cancel_button       = abap_false
*     IV_QUICKINFO_BUTTON_1       = ' '
*     IV_QUICKINFO_BUTTON_2       = ' '
    IMPORTING
      answer                      = lv_answer
*    TABLES
*      parameter                   =
    EXCEPTIONS
      text_not_found              = 1
      OTHERS                      = 2.


  "Si hay respuesta
  IF ( sy-subrc EQ 0 ).

    "Si es positiva
    IF ( lv_answer = '1' ).

      MOVE abap_true TO r_is_ok.

    ENDIF.

  ENDIF.

ENDMETHOD.
METHOD _launch_popup_values_get.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** LAUNCH POPUP

  CALL FUNCTION 'POPUP_GET_VALUES'
    EXPORTING
      no_value_check        = i_valuecheck
      popup_title           = 'Introduzca valor'
*     START_COLUMN          = '5'
*     START_ROW             = '5'
    IMPORTING
      returncode            = r_code
    tables
      fields                = c_t_val
    EXCEPTIONS
      error_in_fields       = 1
      OTHERS                = 2.


ENDMETHOD.
METHOD _refresh_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_stable TYPE lvc_s_stbl.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** REFRESH TABLE

  CLEAR: ls_stable.
  MOVE abap_true TO ls_stable-col.
  MOVE abap_true TO ls_stable-row.

  me->_o_alv_grid->refresh_table_display(
    EXPORTING
      is_stable      = ls_stable
*      i_soft_refresh =
    EXCEPTIONS
      finished       = 1
      OTHERS         = 2
  ).
  IF sy-subrc <> 0.
*   MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*  cl_gui_cfw=>set_new_ok_code( 'Foo' ).

*cl_gui_cfw=>flush( ).

*  cl_gui_cfw=>flush(
**    EXCEPTIONS
**      cntl_system_error = 1
**      cntl_error        = 2
**      others            = 3
*  ).
*  IF sy-subrc <> 0.
*   MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF..

*    WHEN 'VEAZ'.
*      SET PARAMETER ID 'QLS' FIELD OBJECT_TAB-PRUEFLOS.
*      IF G_AKTYP = 'V'.
*        IF OBJECT_TAB-KZ_QAVE IS INITIAL.        "kein VE getroffen.
*          PERFORM CALL_TRANSACTION_F16 USING 'QA11'.
*        ELSE.
*          PERFORM CALL_TRANSACTION_F16 USING 'QA12'.
*        ENDIF.
*      ELSE.
*        PERFORM CALL_TRANSACTION_F16 USING 'QA13'.
*      ENDIF.


ENDMETHOD.
method _REGISTER_EVENTS.

**********************************************************************
* Parametros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** CLICK ENTER EDIT EVENT

  _o_alv_grid->register_edit_event(
    EXPORTING
      i_event_id =  cl_gui_alv_grid=>mc_evt_enter
    EXCEPTIONS
      error      = 1
      others     = 2
  ).

endmethod.
METHOD _set_basic_events.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

** CHECK

  CHECK me->_o_alv_grid IS BOUND.

**********************************************************************
* Lógica
**********************************************************************

*** SET HANDLER EVENTS

** ON_TOOLBAR

  SET HANDLER me->on_toolbar FOR _o_alv_grid.

** ON_USER_COMMAND

  SET HANDLER me->on_user_command FOR _o_alv_grid.

** ON EDIT ENTER

  SET HANDLER me->on_data_change FOR _o_alv_grid.

** ON_CONTEXT_MENU

*  SET HANDLER lcl_eventhandler=>on_context_menu FOR go_grid.


endmethod.
METHOD build_fcat.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_columns_data TYPE ddfields,
        ls_fcat         TYPE lvc_s_fcat.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** GET COLUMNS DATA

  TRY .
    lt_columns_data = zcl_utils_tables=>s_get_structure_desc( i_structure = i_data ).
  CATCH zcx_exception.
  ENDTRY.

  IF ( sy-subrc = 0 ).

    LOOP AT lt_columns_data INTO DATA(ls_columns_data).

      CLEAR: ls_fcat.
      MOVE-CORRESPONDING ls_columns_data TO ls_fcat.
      APPEND ls_fcat TO r_t_fcat.

    ENDLOOP.

  ENDIF.

ENDMETHOD.
METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_variant  TYPE disvariant,
        ls_layout   TYPE lvc_s_layo.

  DATA: lv_message  TYPE sstring.

**********************************************************************
* Super
**********************************************************************

*** PREPARE DATA

  super->constructor( ).

**********************************************************************
* Validaciones
**********************************************************************

*** IMPORT PARAMS

  IF ( i_container IS NOT BOUND ).
    CLEAR: lv_message.
    MOVE text-001 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '002' i_msgty = 'E' i_msgid = me->_c_cl_msgid_label i_message = lv_message ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** INIT DATA

  "Create new ALV grid
  CREATE OBJECT me->_o_alv_grid
    EXPORTING
      i_parent          = i_container
    EXCEPTIONS
      error_cntl_create = 1
      error_cntl_init   = 2
      error_cntl_link   = 3
      error_dp_create   = 4
      OTHERS            = 5.

  IF sy-subrc <> 0.

    CLEAR: lv_message.
    MOVE text-002 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '002' i_msgty = 'E' i_msgid = me->_c_cl_msgid_label i_message = lv_message ).

  ENDIF.

** BASIC EVENTS

  me->_set_basic_events( ).

** REGISTER EVENTS

  me->_register_events( ).

** BASIC VARIANT

  CLEAR: ls_variant.
  ls_variant-report   = sy-repid.
  me->set_s_variant( i_variant = ls_variant ).

** LAYOUT

  IF ( i_layout IS NOT INITIAL ).

    me->set_s_layout( i_layout = i_layout ).

  ELSE.

    me->set_s_layout( i_layout = zcl_utils_alv_grid=>s_build_basic_layout( ) ).

  ENDIF.

** OTHERS

* hide all visible emtpty columns at first display:
  _o_alv_grid->set_hide_empty_columns( EXPORTING iv_hide_empty_columns = abap_false ).


ENDMETHOD.
METHOD finalize.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** CONTAINER

*** FREE CONTAINER

  IF ( me->_o_alv_grid->parent IS BOUND ).

    me->_o_alv_grid->parent->free(
      EXCEPTIONS
        cntl_error        = 1
        cntl_system_error = 2
        others            = 3
        ).

  ENDIF.

**** ALV

  IF ( me->_o_alv_grid IS BOUND ).

*** FREE ALV

    me->_o_alv_grid->free(
      EXCEPTIONS
        cntl_error        = 1
        cntl_system_error = 2
        others            = 3
    ).

*** FINALIZE ALV

    me->_o_alv_grid->finalize( ).

  ENDIF.

ENDMETHOD.
METHOD get_outtab.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_data TYPE REF TO data.

  FIELD-SYMBOLS: <ft_data> TYPE ANY TABLE.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** GET OUTTAB

*  lo_data ?= ME->_O_ALV_GRID->mr_table.

  ASSIGN me->_o_alv_grid->mr_table->* TO <ft_data>.

  MOVE-CORRESPONDING <ft_data>[] TO e_outtab.

ENDMETHOD.
METHOD get_selected_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  FIELD-SYMBOLS: <ft_data> TYPE STANDARD TABLE,
                 <fte_data> TYPE STANDARD TABLE.

  DATA: lt_row    TYPE lvc_t_row,
        ls_row    TYPE lvc_s_row,
        lt_rowid  TYPE lvc_t_roid.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** GET SELECTED ROWS

  "Obtengo líneas seleccionadas
  me->_o_alv_grid->get_selected_rows(
    IMPORTING
      et_index_rows = lt_row
      et_row_no     = lt_rowid
  ).

*** GET TABLE DATA

  "Obtengo datos
  ASSIGN me->_o_alv_grid->mr_table->* TO <ft_data>.
  ASSIGN e_t_data TO <fte_data>.

  CHECK <ft_data> IS ASSIGNED.
  CHECK <fte_data> IS ASSIGNED.

*** EXPORT DATA

  LOOP AT lt_row INTO ls_row.

    READ TABLE <ft_data> ASSIGNING FIELD-SYMBOL(<fs_data>) INDEX ls_row-index.
    IF ( sy-subrc EQ 0 ).
      APPEND <fs_data> TO <fte_data>.
    ENDIF.

  ENDLOOP.

ENDMETHOD.
METHOD is_launched.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** RETURN

  MOVE me->_launched TO e_launched.

ENDMETHOD.
METHOD on_data_change.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

ENDMETHOD.
METHOD on_toolbar.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

ENDMETHOD.
METHOD on_user_command.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** USER COMMAND

  CASE e_ucomm.
    WHEN 'BACK'.
      RETURN.
    WHEN 'EXIT'.
      RETURN.
    WHEN 'CANCEL'.
      RETURN.
  ENDCASE.

ENDMETHOD.
METHOD refresh_alv.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_stable TYPE lvc_s_stbl.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** REFRESH DATA

  CLEAR: ls_stable.
  MOVE abap_true TO ls_stable-col.
  MOVE abap_true TO ls_stable-row.

  me->_o_alv_grid->refresh_table_display(
    EXPORTING
      is_stable      = ls_stable
*      i_soft_refresh =
    EXCEPTIONS
      finished       = 1
      OTHERS         = 2
  ).

ENDMETHOD.
METHOD s_build_basic_layout.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** BUILD BASIC LAYOUT

  CLEAR: r_layout.
  r_layout-grid_title = sy-title.
  r_layout-cwidth_opt = 'X'.
  r_layout-col_opt    = abap_true.
  r_layout-smalltitle = 'X'.
  r_layout-zebra      = abap_true.
  r_layout-no_toolbar = abap_true.

ENDMETHOD.
METHOD s_build_custom_container.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_message TYPE string.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** CONTAINER

  "create new container for main screen
  CREATE OBJECT r_custom_container
    EXPORTING
      container_name              = i_container_name
      style                       = cl_gui_custom_container=>ws_maximizebox
      repid                       = i_dynprog
      dynnr                       = i_dynnr    " Report To Which this Container is Linked
    EXCEPTIONS
      cntl_error                  = 1
      cntl_system_error           = 2
      create_error                = 3
      lifetime_error              = 4
      lifetime_dynpro_dynpro_link = 5
      OTHERS                      = 6.

  IF ( sy-subrc <> 0 ).

    CLEAR: lv_message.
    MOVE text-002 TO lv_message.
    RAISE EXCEPTION TYPE zcx_wm_exception EXPORTING textid = zcl_utils_alv_grid=>zif_msg_utils~s_create_raising_message( i_msgno = '002' i_msgid = zcl_utils_alv_grid=>zif_msg_utils~_c_cl_msgid_label_static i_message = lv_message ).

  ENDIF.

ENDMETHOD.
METHOD select_all.

**********************************************************************
* Parámetros locales
**********************************************************************

  FIELD-SYMBOLS: <ft_data> TYPE ANY TABLE.

  DATA: lt_selections TYPE lvc_t_row,
        ls_selection  TYPE lvc_s_row.

  DATA: lv_lines      TYPE i.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** GET ALL lINES,

  ASSIGN me->_o_alv_grid->mr_table->* TO <ft_data>.

  me->_o_alv_grid->get_selected_rows(
    IMPORTING
      et_index_rows = lt_selections
*      et_row_no     =
  ).

  CLEAR lt_selections.

  IF ( <ft_data> IS ASSIGNED ).

    lv_lines = lines( <ft_data> ).

    DO lv_lines TIMES.

      CLEAR ls_selection.
      MOVE syst-index TO ls_selection-index.
      APPEND ls_selection TO lt_selections.

    ENDDO.

    me->_o_alv_grid->set_selected_rows( it_index_rows = lt_selections ).

  ENDIF.

ENDMETHOD.
METHOD set_s_layout.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** SET LAYOUT

  me->s_layout = i_layout.

ENDMETHOD.
METHOD set_s_variant.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** SET VARIANT

  me->s_variant = i_variant.

ENDMETHOD.
METHOD set_t_fcat.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  CHECK lines( i_lvc_t_fcat ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

*** SET FCAT

  me->t_fcat = i_lvc_t_fcat.

ENDMETHOD.
METHOD show_alv_grid.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA : lv_str_name TYPE dd02l-tabname.

  DATA: lv_message TYPE sstring.

**********************************************************************
* Validaciones
**********************************************************************

*  CHECK lines( c_outtab ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

*** GET OUTTAB STRUCTURE NAME

  zcl_utils_tables=>s_get_structure_name(
    EXPORTING
      i_structure       = c_outtab
    RECEIVING
      e_name            = lv_str_name
    EXCEPTIONS
      no_ddic_name      = 1
      OTHERS            = 2
  ).
  IF ( sy-subrc <> 0 ).
    RAISE EXCEPTION TYPE zcx_mm_exception EXPORTING textid = me->zif_msg_utils~s_generate_raising_message( i_msgno = '003' i_msgty = 'E' i_msgid = zcl_utils_alv_grid=>_c_cl_msgid_label i_message = lv_message ).
  ENDIF.

*** LAUNCH ALV

  _o_alv_grid->set_table_for_first_display(
    EXPORTING
      is_variant       = me->s_variant
      i_save           = 'A'
      is_layout        = me->s_layout
      i_structure_name = lv_str_name
    CHANGING
      it_outtab        = c_outtab
      it_fieldcatalog  = me->t_fcat
    EXCEPTIONS
      OTHERS           = 1 ).

  IF ( sy-subrc EQ 0 ).
    MOVE abap_true TO me->_launched.
  ENDIF.

ENDMETHOD.
