*&---------------------------------------------------------------------*
*&  Include           ZRPI_0001_FORMS
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  SACAR_DATOS
*&---------------------------------------------------------------------*
*       text,
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sacar_datos .
  DATA lv_tipo TYPE zedpi0003.

* RECUPERAMOS EL TIPO DE CARACTERISTICA
  CLEAR lv_tipo.
  SELECT SINGLE ztipo INTO lv_tipo
  FROM ztpi0001
  WHERE zcodigo = p_zcod.

* BUSCAMOS LA CARACTERISTICA EN SU TABLA CORRESPONDIENTE
  IF lv_tipo = 'F'.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_caract_old
    FROM ztpi0002
    WHERE zcodigo = p_zcod
    AND loekz = ''.

  ELSEIF lv_tipo = 'V'.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_caract_old
    FROM ztpi0003
    WHERE zcodigo = p_zcod
    AND loekz = ''.

  ENDIF.

  LOOP AT gt_caract_old INTO gs_caract_old.
    gs_caract = gs_caract_old.
    APPEND gs_caract TO gt_caract.
  ENDLOOP.

ENDFORM.                    " SACAR_DATOS

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_datos .

  DATA: ls_variant TYPE disvariant.
  DATA: lti_exc TYPE ui_functions.
  DATA ls_exc TYPE ui_func.

* Preparamos el catálogo de campos
  PERFORM prepare_fielcat.
* Cargamos los campos que son editables y los que no
  PERFORM set_edit_mode.


* Para que muestre el ancho de las columnas optimizado
  t_layout-cwidth_opt = 'X'.
*  t_layout-box_fname = 'BOX'.
*  t_layout-stylefname = 'CELLTAB'.
  t_layout-sel_mode   = 'U'.

  ls_variant-report   = sy-repid.

* Excluir botones
  ls_exc = cl_gui_alv_grid=>mc_fg_edit.
  APPEND ls_exc TO lti_exc.

*   Cuando es editable -> para que escuche los eventos: ENTER...
  CALL METHOD grid->register_edit_event
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_modified.

* Mostrar alv
  CALL METHOD grid->set_table_for_first_display
    EXPORTING
      i_structure_name     = 'ZRPI_0001_GRID'
      is_layout            = t_layout
      is_variant           = ls_variant
      i_save               = ''
      i_default            = 'X'
      it_toolbar_excluding = lti_exc
    CHANGING
      it_outtab            = gt_caract[]
      it_fieldcatalog      = gti_fieldcat.

  SET HANDLER g_application->handle_data_changed FOR grid.
  SET HANDLER g_application->handle_data_changed_finished FOR grid.
  SET HANDLER
*              g_application->handle_menu_button
              g_application->handle_user_command
*              g_application->handle_data_changed
*              g_application->handle_hotspot_click
              g_application->handle_toolbar FOR ALL INSTANCES.

* Cargamos el ALV en modo editable
  CALL METHOD grid->set_ready_for_input
    EXPORTING
      i_ready_for_input = 1.

ENDFORM.                    " MOSTRAR_DATOS


*&---------------------------------------------------------------------*
*&      Form  PREPARE_FIELCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prepare_fielcat .

*Variable auxiliar
  DATA: ls_fieldcat  TYPE lvc_s_fcat,
        ls_group_alv TYPE lvc_s_sgrp.

* Recuperamos el catálogo de campos de la estructura
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZRPI_0001_GRID'
    CHANGING
      ct_fieldcat      = gti_fieldcat.

* Lo recorremos haciendo las modificaciones necesarias
  LOOP AT gti_fieldcat INTO ls_fieldcat.

* INTRODUCIMOS CABECERA LISTADO ALV
    CASE ls_fieldcat-fieldname.

      WHEN 'BOX'.
        ls_fieldcat-tabname    = 'type_datos'.
        ls_fieldcat-ref_field   = 'BOX'.
        ls_fieldcat-ref_table   = 'ZRPI_0001_GRID'.
        ls_fieldcat-fieldname  = 'BOX'.
        ls_fieldcat-checkbox = 'X'.
*        ls_fieldcat-edit = 'X'.

      WHEN 'CELLTAB'.
*        ls_fieldcat-checkbox = 'X'.
*        ls_fieldcat-edit = 'X'.
        ls_fieldcat-no_out     = 'X'.

      WHEN 'ZVALOR_SAP'.
        ls_fieldcat-scrtext_l = 'Valor en SAP'.
        ls_fieldcat-scrtext_m = 'Valor SAP'.
        ls_fieldcat-scrtext_s = 'Valor SAP'.
        ls_fieldcat-reptext   = 'Valor SAP'.
*        ls_fieldcat-edit = 'X'.

      WHEN 'ZVALOR_EXTERNO'.
        ls_fieldcat-scrtext_l = 'Valor Externo'.
        ls_fieldcat-scrtext_m = 'Valor EXT.'.
        ls_fieldcat-scrtext_s = 'Valor EXT.'.
        ls_fieldcat-reptext   = 'Valor EXT.'.
        ls_fieldcat-edit = 'X'.

      WHEN 'LOEKZ'.
*        ls_fieldcat-ROLLNAME = 'ELOEK'. "ZABPI_0001
*        ls_fieldcat-f4availabl = 'X'.
        ls_fieldcat-ref_table = 'ZRPI_0001_GRID'.
        ls_fieldcat-ref_field = 'LOEKZ'.
        ls_fieldcat-domname = 'ELOEK'.
        ls_fieldcat-edit = 'X'.
        ls_fieldcat-checkbox = 'X'.



    ENDCASE.
*   Modificamos
    MODIFY gti_fieldcat FROM ls_fieldcat.
  ENDLOOP.

ENDFORM.                    " PREPARE_FIELCAT


*&---------------------------------------------------------------------*
*&      Form  SET_EDIT_MODE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_edit_mode .

ENDFORM.                    " SET_EDIT_MODE


*&---------------------------------------------------------------------*
*&      Form  F4
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_E_FIELDNAME  text
*      -->P_ES_ROW_NO  text
*      -->P_ER_EVENT_DATA  text
*      -->P_ET_BAD_CELLS  text
*----------------------------------------------------------------------*
FORM f4  USING    r_fieldname TYPE lvc_fname
              rs_row_no TYPE lvc_s_roid
              rr_event_data TYPE REF TO cl_alv_event_data
              rt_bad_cells TYPE lvc_t_modi.                 "#EC *

  FIELD-SYMBOLS: <lt_f4> TYPE lvc_t_modi.
  DATA: ls_f4 TYPE lvc_s_modi.

  ASSIGN rr_event_data->m_data->* TO <lt_f4>.
  ls_f4-fieldname = r_fieldname.
  ls_f4-row_id = rs_row_no-row_id.
  ls_f4-value = 'BLUBBER'.
  APPEND ls_f4 TO <lt_f4>.
  rr_event_data->m_event_handled = 'X'.

ENDFORM.                    " F4

*&---------------------------------------------------------------------*
*&      Form  AÑADIR_LINEAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM anadir_lineas .
  DATA zreturncode TYPE c VALUE 'A'.
  DATA zfields LIKE sval OCCURS 0 WITH HEADER LINE.
  DATA ls_fields TYPE sval.
* POPUP PARA RECOGER LOS VALORES NUEVOS
  CLEAR zreturncode.
  CLEAR zfields.
  REFRESH zfields.


  CLEAR zfields.
  zfields-tabname = 'ZTPI0002'.
  zfields-fieldname = 'BUKRS'.
  zfields-field_obl = 'X'.
  APPEND zfields.

  CLEAR zfields.
  zfields-tabname = 'ZTPI0002'.
  zfields-fieldname = 'WERKS'.
  zfields-field_obl = 'X'.
  APPEND zfields.

  CLEAR zfields.
  zfields-tabname = 'ZTPI0002'.
  zfields-fieldname = 'ZVALOR_SAP'.
  zfields-field_obl = 'X'.
  zfields-fieldtext = text-003.
  APPEND zfields.

  CLEAR zfields.
  zfields-tabname = 'ZTPI0002'.
  zfields-fieldname = 'ZVALOR_EXTERNO'.
  zfields-field_obl = 'X'.
  zfields-fieldtext = text-004.
  APPEND zfields.

  CALL FUNCTION 'POPUP_GET_VALUES'
    EXPORTING
*     NO_VALUE_CHECK  = ' '
      popup_title     = text-002
*     START_COLUMN    = '5'
*     START_ROW       = '5'
    IMPORTING
      returncode      = zreturncode
    TABLES
      fields          = zfields
    EXCEPTIONS
      error_in_fields = 1
      OTHERS          = 2.

  IF zreturncode IS INITIAL.

    gs_caract_new-zcodigo = gv_codigo.
    gs_caract_new-zdescripcion = gv_desc.

    LOOP AT zfields INTO ls_fields.

      CASE ls_fields-fieldname.
        WHEN 'BUKRS'.
          gs_caract_new-bukrs = ls_fields-value.
        WHEN 'WERKS'.
          gs_caract_new-werks = ls_fields-value.
        WHEN 'ZVALOR_SAP'.
          gs_caract_new-zvalor_sap = ls_fields-value.
        WHEN 'ZVALOR_EXTERNO'.
          gs_caract_new-zvalor_externo = ls_fields-value.
        WHEN OTHERS.
      ENDCASE.
    ENDLOOP.

    READ TABLE gt_caract INTO gs_caract
    WITH KEY  zcodigo = gv_codigo
              bukrs = gs_caract_new-bukrs
              werks = gs_caract_new-werks
              zvalor_sap = gs_caract_new-zvalor_sap
              loekz = ''.
    IF sy-subrc <> 0.
      APPEND gs_caract_new TO gt_caract_new.
      APPEND gs_caract_new TO gt_caract.
    ELSE.
      MESSAGE s000 DISPLAY LIKE 'E'.
    ENDIF.

  ENDIF.

ENDFORM.                    " AÑADIR_LINEAS

*&---------------------------------------------------------------------*
*&      Form  BORRAR_REGISTROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM borrar_registros .

  DATA lv_tipo TYPE zedpi0003.
  CLEAR gv_operation.

* RECUPERAMOS EL TIPO DE CARACTERISTICA
  CLEAR lv_tipo.
  SELECT SINGLE ztipo INTO lv_tipo
  FROM ztpi0001
  WHERE zcodigo = p_zcod.

  LOOP AT gt_caract_del INTO gs_caract_del.

* BUSCAMOS LA CARACTERISTICA EN SU TABLA CORRESPONDIENTE
    IF lv_tipo = 'F'.
      UPDATE ztpi0002
      FROM gs_caract_del.
      IF sy-subrc = 0.
* OPERACION QUE SE VA A REALIZAR
        gv_operation = 'Delete'.
* SE BUSCA EL GRUPO ID QUE TIENE EN LA TABLA
        CLEAR gv_group_id.
        SELECT SINGLE group_id INTO gv_group_id
        FROM ztpi0002
        WHERE zcontador = gs_caract_del-zcontador
        AND zcodigo = gs_caract_del-zcodigo
        AND bukrs = gs_caract_del-bukrs
        AND werks = gs_caract_del-werks
        AND zvalor_sap = gs_caract_del-zvalor_sap.

        PERFORM sincro_pi USING gv_operation
                                gv_group_id
                                lv_tipo
                                gs_caract_del.

      ENDIF.
    ELSEIF lv_tipo = 'V'.
      UPDATE ztpi0003
      FROM gs_caract_del.
      IF sy-subrc = 0.
* OPERACION QUE SE VA A REALIZAR
        gv_operation = 'Delete'.

* SE BUSCA EL GRUPO ID QUE TIENE EN LA TABLA
        CLEAR gv_group_id.
        SELECT SINGLE group_id INTO gv_group_id
        FROM ztpi0003
        WHERE zcontador = gs_caract_del-zcontador
        AND zcodigo = gs_caract_del-zcodigo
        AND bukrs = gs_caract_del-bukrs
        AND werks = gs_caract_del-werks
        AND zvalor_sap = gs_caract_del-zvalor_sap.

        PERFORM sincro_pi USING gv_operation
                                gv_group_id
                                lv_tipo
                                gs_caract_del.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " BORRAR_REGISTROS

*&---------------------------------------------------------------------*
*&      Form  SINCRO_PI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GV_OPERATION  text
*      -->P_GS_CARACT_DEL  text
*----------------------------------------------------------------------*
FORM sincro_pi  USING    lv_operation
                         lv_group_id
                         lv_tipo
                         p_caract TYPE ztpi0002.

  lwa_item-operation = lv_operation.
* Los grupos deben ser unicos por tipo de caracteristica y valor sap
*  buscaremosel registro en la tabla
*  SELECT SINGLE group_id INTO lwa_item-group_id
*  FROM ztpi0001
*  WHERE zcodigo = p_caract-zcodigo.
  lwa_item-group_id = lv_group_id.

** EN DESARROLLO SAP TIENE UN CONTEXTO DIFERENTE A QAS Y PRO.
** AL FINAL SE DECIDE DEJAR UNO SOLO
*  IF sy-sysid = 'HED'.
    IF lv_tipo = 'F'.
      lwa_item-context   = gc_context_df.
    ELSEIF lv_tipo = 'V'.
      lwa_item-context   = gc_context_dv.
    ENDIF.
*  ELSE.
*    IF lv_tipo = 'F'.
*      lwa_item-context   = gc_context_f.
*    ELSEIF lv_tipo = 'V'.
*      lwa_item-context   = gc_context_v.
*    ENDIF.
*  ENDIF.


  CONCATENATE p_caract-bukrs p_caract-werks INTO lwa_item-identifier-agency.
  lwa_item-identifier-scheme   = p_caract-zcodigo.
  lwa_item-identifier-value  = p_caract-zvalor_externo.
  APPEND lwa_item TO lwa_output-value_mapping_replication-item.

* En caso de insertar tambien se debe añadir el valor de SAP. PI en caso de que exista NO lo duplicara
  IF lv_operation = 'Insert'.
    lwa_item-identifier-agency = 'SAP'.
    lwa_item-identifier-scheme   = p_caract-zcodigo.
    lwa_item-identifier-value  = p_caract-zvalor_sap.
    APPEND lwa_item TO lwa_output-value_mapping_replication-item.
  ENDIF.

  TRY.
      CALL METHOD lo_vmr_proxy->execute_synchronous
        EXPORTING
          output = lwa_output
        IMPORTING
          input  = lwa_input.

    CATCH cx_ai_system_fault INTO lo_sys_fault.
      WRITE:/ lo_sys_fault->errortext.

    CATCH cx_svmr_value_mapping_rep INTO lo_vmr_fault.
      WRITE:/ lo_vmr_fault->standard-fault_text.

    CATCH cx_ai_application_fault INTO lo_appl_fault.
      CALL METHOD lo_appl_fault->if_message~get_text
        RECEIVING
          result = l_appl_fault_text.
      WRITE:/ l_appl_fault_text.
  ENDTRY.

  IF sy-subrc = 0.
    WRITE:/ 'Cache was succesfully deleted with status: ', lwa_input-status.
  ELSE.
    WRITE:/ 'Old PI cache data could not be deleted, action cancelt'.
    LEAVE PROGRAM.
  ENDIF.

  CLEAR:   lwa_item, lwa_output.

ENDFORM.                    " SINCRO_PI


*&---------------------------------------------------------------------*
*&      Form  CREAR_REGISTROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_registros .

  DATA lv_tipo TYPE zedpi0003.
  DATA: lv_count TYPE num.
  CLEAR: gv_operation, lv_count.

* RECUPERAMOS EL TIPO DE CARACTERISTICA
  CLEAR lv_tipo.
  SELECT SINGLE ztipo INTO lv_tipo
  FROM ztpi0001
  WHERE zcodigo = p_zcod.

  LOOP AT gt_caract_new INTO gs_caract_new.

* BUSCAMOS LA CARACTERISTICA EN SU TABLA CORRESPONDIENTE
    IF lv_tipo = 'F'.

      SELECT SINGLE group_id  INTO gv_group_id
      FROM ztpi0002
      WHERE zcodigo = gs_caract_new-zcodigo
*      AND bukrs = gs_caract_new-bukrs
*      AND werks = gs_caract_new-werks
      AND zvalor_sap = gs_caract_new-zvalor_sap.
      IF sy-subrc = 0.

        gs_caract_new-group_id = gv_group_id.

        SELECT MAX( zcontador )  INTO gs_caract_new-zcontador
    FROM ztpi0002
    WHERE zcodigo = gs_caract_new-zcodigo
    AND bukrs = gs_caract_new-bukrs
    AND werks = gs_caract_new-werks
    AND zvalor_sap = gs_caract_new-zvalor_sap.
        IF sy-subrc = 0.
          gs_caract_new-zcontador = gs_caract_new-zcontador + 1.
        ENDIF.

      ELSE.

        gs_caract_new-zcontador = 1.

*   create a guid for a pair of values
        CALL FUNCTION 'ICF_CREATE_GUID'
          IMPORTING
            id = gv_group_id.

        gs_caract_new-group_id = gv_group_id.

      ENDIF.


      ztpi0002 = gs_caract_new.
      INSERT ztpi0002.
      IF sy-subrc = 0.
        gv_operation = 'Insert'.
        PERFORM sincro_pi USING gv_operation
                                gv_group_id
                                lv_tipo
                                gs_caract_new.

      ENDIF.
    ELSEIF lv_tipo = 'V'.

      SELECT SINGLE group_id  INTO gv_group_id
            FROM ztpi0003
            WHERE zcodigo = gs_caract_new-zcodigo
*      AND bukrs = gs_caract_new-bukrs
*      AND werks = gs_caract_new-werks
            AND zvalor_sap = gs_caract_new-zvalor_sap.
      IF sy-subrc = 0.

        gs_caract_new-group_id = gv_group_id.

        SELECT MAX( zcontador )  INTO gs_caract_new-zcontador
    FROM ztpi0003
    WHERE zcodigo = gs_caract_new-zcodigo
    AND bukrs = gs_caract_new-bukrs
    AND werks = gs_caract_new-werks
    AND zvalor_sap = gs_caract_new-zvalor_sap.
        IF sy-subrc = 0.
          gs_caract_new-zcontador = gs_caract_new-zcontador + 1.
        ENDIF.

      ELSE.

        gs_caract_new-zcontador = 1.

*   create a guid for a pair of values
        CALL FUNCTION 'ICF_CREATE_GUID'
          IMPORTING
            id = gv_group_id.

        gs_caract_new-group_id = gv_group_id.

      ENDIF.


      ztpi0003 = gs_caract_new.
      INSERT ztpi0003.
      IF sy-subrc = 0.
        gv_operation = 'Insert'.
        PERFORM sincro_pi USING gv_operation
                                gv_group_id
                                lv_tipo
                                gs_caract_new.

      ENDIF.

*      SELECT MAX( zcontador ) INTO gs_caract_new-zcontador
*      FROM ztpi0003
*      WHERE zcodigo = gs_caract_new-zcodigo
*      AND bukrs = gs_caract_new-bukrs
*      AND werks = gs_caract_new-werks
*      AND zvalor_sap = gs_caract_new-zvalor_sap.
*      IF sy-subrc = 0.
*        gs_caract_new-zcontador = gs_caract_new-zcontador + 1.
*
*        SELECT SINGLE group_id  INTO gv_group_id
*        FROM ztpi0003
*        WHERE zcodigo = gs_caract_new-zcodigo
*        AND bukrs = gs_caract_new-bukrs
*        AND werks = gs_caract_new-werks
*        AND zvalor_sap = gs_caract_new-zvalor_sap.
*        IF gv_group_id IS INITIAL.
**   create a guid for a pair of values
*          CALL FUNCTION 'ICF_CREATE_GUID'
*            IMPORTING
*              id = gv_group_id.
*
*          gs_caract_new-group_id = gv_group_id.
*        ENDIF.
*
*      ELSE.
*        gs_caract_new-zcontador = 1.
*
**   create a guid for a pair of values
*        CALL FUNCTION 'ICF_CREATE_GUID'
*          IMPORTING
*            id = gv_group_id.
*
*      ENDIF.
*
*      ztpi0003 = gs_caract_new.
*      INSERT ztpi0003.
*      IF sy-subrc = 0.
*        gv_operation = 'Insert'.
*        PERFORM sincro_pi USING gv_operation
*                                gv_group_id
*                                lv_tipo
*                                gs_caract_new.
*      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " CREAR_REGISTROS

*&---------------------------------------------------------------------*
*&      Form  MODIFICAR_REGISTROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM modificar_registros .

  DATA lv_tipo TYPE zedpi0003.
  DATA: lv_count TYPE num.
  CLEAR: gv_operation, lv_count.
  DATA: gs_caract_modif2 TYPE ztpi0002.

* RECUPERAMOS EL TIPO DE CARACTERISTICA
  CLEAR lv_tipo.
  SELECT SINGLE ztipo INTO lv_tipo
  FROM ztpi0001
  WHERE zcodigo = p_zcod.

  LOOP AT gt_caract_modif INTO gs_caract_modif.

    READ TABLE gt_caract_old INTO gs_caract_old
    WITH KEY zcodigo = gs_caract_modif-zcodigo
             bukrs = gs_caract_modif-bukrs
             werks = gs_caract_modif-werks
             zvalor_sap = gs_caract_modif-zvalor_sap
             zcontador = gs_caract_modif-zcontador.

* BUSCAMOS LA CARACTERISTICA EN SU TABLA CORRESPONDIENTE
    IF lv_tipo = 'F'.

      SELECT SINGLE * INTO gs_caract_modif2
      FROM ztpi0002
      WHERE zcodigo = gs_caract_old-zcodigo
      AND bukrs = gs_caract_old-bukrs
      AND werks = gs_caract_old-werks
      AND zvalor_sap = gs_caract_old-zvalor_sap
      AND zcontador = gs_caract_old-zcontador.
      IF sy-subrc = 0.
        gs_caract_modif2-zvalor_externo =  gs_caract_modif-zvalor_externo.

        gv_group_id = gs_caract_modif2-group_id.

        UPDATE ztpi0002
        FROM gs_caract_modif2.
        IF sy-subrc = 0.
* PRIMERO SE BORRA EL REGISTRO DE PI
          gv_operation = 'Delete'.
          gs_caract_modif2-zvalor_externo =  gs_caract_old-zvalor_externo.
          PERFORM sincro_pi USING gv_operation
                                  gv_group_id
                                  lv_tipo
                                  gs_caract_modif2.

* SEGUNDO SE CREA EL REGISTRO DE PI
          gs_caract_modif2-zvalor_externo = gs_caract_modif-zvalor_externo.

          gv_operation = 'Insert'.
          PERFORM sincro_pi USING gv_operation
                                  gv_group_id
                                  lv_tipo
                                  gs_caract_modif2.
        ENDIF.

      ENDIF.

    ELSEIF lv_tipo = 'V'.

      SELECT SINGLE * INTO gs_caract_modif2
            FROM ztpi0003
            WHERE zcodigo = gs_caract_old-zcodigo
            AND bukrs = gs_caract_old-bukrs
            AND werks = gs_caract_old-werks
            AND zvalor_sap = gs_caract_old-zvalor_sap
            AND zcontador = gs_caract_old-zcontador.
      IF sy-subrc = 0.
        gs_caract_modif2-zvalor_externo =  gs_caract_modif-zvalor_externo.

        gv_group_id = gs_caract_modif2-group_id.

        UPDATE ztpi0003
        FROM gs_caract_modif2.
        IF sy-subrc = 0.
* PRIMERO SE BORRA EL REGISTRO DE PI
          gv_operation = 'Delete'.
          gs_caract_modif2-zvalor_externo =  gs_caract_old-zvalor_externo.
          PERFORM sincro_pi USING gv_operation
                                  gv_group_id
                                  lv_tipo
                                  gs_caract_modif2.

* SEGUNDO SE CREA EL REGISTRO DE PI
          gs_caract_modif2-zvalor_externo = gs_caract_modif-zvalor_externo.

          gv_operation = 'Insert'.
          PERFORM sincro_pi USING gv_operation
                                  gv_group_id
                                  lv_tipo
                                  gs_caract_modif2.
        ENDIF.

      ENDIF.

*      SELECT SINGLE * INTO gs_caract_modif2
*            FROM ztpi0003
*            WHERE zcodigo = gs_caract_old-zcodigo
*            AND bukrs = gs_caract_old-bukrs
*            AND werks = gs_caract_old-werks
*            AND zvalor_sap = gs_caract_old-zvalor_sap
*            AND zcontador = gs_caract_old-zcontador.
*      IF sy-subrc = 0.
*        gs_caract_modif2-zvalor_externo =  gs_caract_modif-zvalor_externo.
*
*        gv_group_id = gs_caract_modif2-group_id.
*
*        UPDATE ztpi0003
*        FROM gs_caract_modif2.
*        IF sy-subrc = 0.
** PRIMERO SE BORRA EL REGISTRO DE PI
*          gv_operation = 'Delete'.
*          gs_caract_modif2-zvalor_externo =  gs_caract_old-zvalor_externo.
*          PERFORM sincro_pi USING gv_operation
*                                  gv_group_id
*                                  lv_tipo
*                                  gs_caract_modif2.
*
** SEGUNDO SE CREA EL REGISTRO DE PI
*          gs_caract_modif2-zvalor_externo = gs_caract_modif-zvalor_externo.
*
*          gv_operation = 'Insert'.
*          PERFORM sincro_pi USING gv_operation
*                                  gv_group_id
*                                  lv_tipo
*                                  gs_caract_modif2.
*        ENDIF.
*
*      ENDIF.

    ENDIF.

* Actializar tabla de registro de cambios
    CLEAR ztpi0004.
    ztpi0004-datum = sy-datum.
    ztpi0004-uzeit = sy-uzeit.
    ztpi0004-usuario = sy-uname.
    ztpi0004-zcodigo = gv_codigo.
    ztpi0004-bukrs = gs_caract_modif-bukrs.
    ztpi0004-werks = gs_caract_modif-werks.
    ztpi0004-zcodigo_ant = gs_caract_old-zvalor_externo.
    ztpi0004-zcodigo_new = gs_caract_modif-zvalor_externo.
    ztpi0004-zcontador = gs_caract_modif-zcontador.
    INSERT ztpi0004.

  ENDLOOP.

ENDFORM.                    " MODIFICAR_REGISTROS

*&---------------------------------------------------------------------*
*&      Form  INICIALIZAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializar_datos .

  CLEAR : gt_caract_del,
          gt_caract_new,
          gt_caract_modif,
          gt_caract_old,
          gt_caract.

  REFRESH: gt_caract_del,
           gt_caract_new,
           gt_caract_modif,
           gt_caract_old,
           gt_caract.



ENDFORM.                    " INICIALIZAR_DATOS
