
class ZCL_SI_SMILE80_SU_DRP_IN_SMILE definition
  public
  create public .

public section.

  interfaces ZII_SI_SMILE80_SU_DRP_IN_SMILE .
protected section.
private section.
endclass. "ZCL_SI_SMILE80_SU_DRP_IN_SMILE definition
class ZCL_SI_SMILE80_SU_DRP_IN_SMILE implementation.
  METHOD zii_si_smile80_su_drp_in_smile~si_smile80_su_drp_in_smile_to.
*** **** INSERT IMPLEMENTATION HERE **** ***

    DATA: lv_ubicacion  TYPE char30,
          lv_ubi_sap    TYPE char30,
          lv_lote       TYPE char30,
          lv_werks      TYPE werks,
          lv_letra_lote TYPE c LENGTH 1,
          lv_matnr      TYPE matnr,
          lv_longitud   TYPE i.

    DATA: lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
          lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
          ls_valueschar LIKE LINE OF lt_valueschar,
          lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr,
          lt_return     TYPE bapiret2_t.

    DATA: BEGIN OF ls_matnr,
            matnr TYPE matnr,
            ersda TYPE ersda,
          END OF ls_matnr,
          lt_matnr  LIKE STANDARD TABLE OF ls_matnr,
          l_obj_key TYPE ausp-objek.

    lv_ubicacion = input-mt_smile80_su_drp_in_smile_to-document-body-drop_off_location.

    lv_lote = input-mt_smile80_su_drp_in_smile_to-document-body-lpn.

    CONDENSE lv_ubicacion NO-GAPS. "Eliminamos espacios en blanco
    CONDENSE lv_lote NO-GAPS.

*     Determina el material como el ultimo material que aparece en la tabla
*     de maestros de lote MCHA

    lv_letra_lote = lv_lote+3(1).

    IF lv_letra_lote = 'P'.

      lv_werks = '3000'.

    ENDIF.

    SELECT mcha~matnr mcha~ersda
                 INTO TABLE lt_matnr
                 FROM mcha JOIN mara ON mcha~matnr = mara~matnr
                 WHERE mtart = 'ZPAP' AND werks = lv_werks AND charg = lv_lote
                 ORDER BY mcha~ersda_tmstp DESCENDING. "mcha~ersda DESCENDING.
    IF sy-subrc NE 0.
      "Lote incorrecto
    ENDIF.

    DATA(lt_matnr_aux) = lt_matnr.

    DELETE ADJACENT DUPLICATES FROM lt_matnr_aux COMPARING ersda.

    IF lines( lt_matnr_aux ) NE lines( lt_matnr ).
      "Significa que hay un material con fecha duplicada
      LOOP AT lt_matnr INTO ls_matnr.
        SELECT SINGLE @abap_true INTO @DATA(l_var) FROM  mara
                                 WHERE matnr = @ls_matnr-matnr AND
                                       mtart = 'ZPAP'.
        IF sy-subrc NE 0.
          DELETE lt_matnr WHERE matnr = ls_matnr-matnr.
        ENDIF.
      ENDLOOP.
    ENDIF.

    TRY.
        lv_matnr = |{ lt_matnr[ 1 ]-matnr ALPHA = IN }| .
      CATCH cx_sy_itab_line_not_found.
*        RAISE lote_incorrecto.
    ENDTRY.


*   Leer caracteeristicas del lote
    l_obj_key = |{ lv_matnr }{ lv_lote }|.

    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = l_obj_key
        objecttable     = 'MCH1'
        classnum        = 'Z_BOBINA'
        classtype       = '023'
      TABLES
        allocvaluesnum  = lt_valuesnum
        allocvalueschar = lt_valueschar
        allocvaluescurr = lt_valuescurr
        return          = lt_return.

    lv_longitud = strlen( lv_ubicacion ).
    lv_longitud = lv_longitud - 4.

    IF lv_ubicacion CP 'E80_*' OR lv_ubicacion CP 'STAG_*' OR lv_ubicacion CP 'IN_'.

      SHIFT lv_ubicacion BY 4 PLACES LEFT.

    ELSE.

      lv_ubicacion = '9999'.

    ENDIF.

    READ TABLE lt_valueschar ASSIGNING FIELD-SYMBOL(<fs>) WITH KEY charact = 'Z_UBIC_HPAP'.
    IF sy-subrc EQ 0.
      <fs>-value_char = <fs>-value_neutral = lv_ubicacion.
    ELSE.
      ls_valueschar-charact    = 'Z_UBIC_HPAP'.
      ls_valueschar-value_char = ls_valueschar-value_neutral = lv_ubicacion.
      APPEND ls_valueschar TO lt_valueschar.
    ENDIF.

    CALL FUNCTION 'BAPI_OBJCL_CHANGE'
      EXPORTING
        objectkey          = l_obj_key
        objecttable        = 'MCH1'
        classnum           = 'Z_BOBINA'
        classtype          = '023'
      TABLES
        allocvaluesnumnew  = lt_valuesnum
        allocvaluescharnew = lt_valueschar
        allocvaluescurrnew = lt_valuescurr
        return             = lt_return.

    COMMIT WORK AND WAIT.

  ENDMETHOD.
endclass. "ZCL_SI_SMILE80_SU_DRP_IN_SMILE definition
endclass. "ZCL_SI_SMILE80_SU_DRP_IN_SMILE implementation
