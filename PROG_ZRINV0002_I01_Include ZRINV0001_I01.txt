*&---------------------------------------------------------------------*
*&  Include           ZRINV0002_I01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.
  CASE gv_okcode.
    WHEN 'EXIT' OR 'CANC'." OR 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'BACK'.
      CALL SELECTION-SCREEN '0002'.
    WHEN 'CREAR_INV'.
      CALL SCREEN 0300 STARTING AT 10 10.
  ENDCASE.

  CLEAR gv_okcode.
ENDMODULE.                 " USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  CASE gv_okcode2.
    WHEN 'SHOWLOG' OR 'LOG'.
      CLEAR gv_okcode2.

      g_extnumber = zsinv0002_grid-docum.

      CALL FUNCTION 'APPL_LOG_DISPLAY'
        EXPORTING
          object                    = 'ZMM'
          subobject                 = 'ZINV2'
          external_number           = g_extnumber
          date_from                 = zsinv0002_grid-erdat " para que salgan siempre todos
          suppress_selection_dialog = 'X'.

    WHEN 'IMPACTO'.
      CLEAR gv_okcode2.

      CALL FUNCTION 'ZMM_INV_IMPACTO_ECONOMICO'
        EXPORTING
          docum   = zsinv0002_grid-docum
          display = 'X'.

      SELECT SINGLE impacto moneda FROM ztinv2_ci
        INTO (zsinv0002_grid-impacto, zsinv0002_grid-moneda)
        WHERE docum EQ zsinv0002_grid-docum.

*   Cambiar status
    WHEN 'CHANGE'.
      PERFORM cambio_de_status.

      PERFORM listado_posiciones USING zsinv0002_grid-docum
                                       zsinv0002_grid-status.

      SELECT SINGLE * FROM ztinv2_ci
        INTO CORRESPONDING FIELDS OF zsinv0002_grid
        WHERE docum EQ zsinv0002_grid-docum.

*   finalizar inventario
    WHEN 'FINAL'.
      PERFORM finalizar.

      SELECT SINGLE * FROM ztinv2_ci
        INTO CORRESPONDING FIELDS OF zsinv0002_grid
        WHERE docum EQ zsinv0002_grid-docum.

    WHEN 'MULTI'.
      IF zsinv0002_grid-multi IS NOT INITIAL.
        SELECT * FROM ztinv2_ci_multi
          INTO CORRESPONDING FIELDS OF TABLE gti_mostrar5
          WHERE docum EQ zsinv0002_grid-docum.

        LOOP AT gti_mostrar5 ASSIGNING <mostrar5>.
          MOVE-CORRESPONDING zsinv0002_grid TO <mostrar5>.
        ENDLOOP.

        CALL SCREEN '0500'.
      ENDIF.
    WHEN 'UPDATE'.
      PERFORM actualizar_inventario USING zsinv0002_grid-docum.

  ENDCASE.

  CLEAR gv_okcode2.
ENDMODULE.                 " USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.
  DATA: error TYPE xfeld.

  CASE gv_okcode4.
*   Aceptar:
    WHEN 'ACEPTAR'.
      CLEAR: gv_okcode4.
      IF p3_werks IS NOT INITIAL AND p3_lgort IS NOT INITIAL.
        PERFORM crear_inventario CHANGING p3_werks
                                          p3_lgort
                                          s3_mtart[]
                                          s3_matnr[]
                                          ztinv2_ci.

        CLEAR: p3_werks, p3_lgort.
        REFRESH: s3_mtart, s3_matnr.
        LEAVE TO SCREEN 0.
      ENDIF.
*      ENDIF.
*   Cancelar:
    WHEN 'CANCELAR'.
      CLEAR: gv_okcode4.
      LEAVE TO SCREEN 0.
    WHEN 'CANCEL'.
      CLEAR: gv_okcode4.
      LEAVE TO SCREEN 0.
    WHEN 'CANC'.
      CLEAR: gv_okcode4.
      LEAVE TO SCREEN 0.
    WHEN 'BACK'.
      CLEAR: gv_okcode4.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.                 " USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_CENTRO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_centro INPUT.
  IF gv_werks IS INITIAL.
    CLEAR: gv_okcode4.
*    error = 'X'.
    MESSAGE e100. "El centro es un campo obligatorio.
  ELSE.
    CLEAR lv_werks.
    SELECT SINGLE werks INTO lv_werks
      FROM t001w
      WHERE werks = gv_werks.

    IF lv_werks IS INITIAL.
      CLEAR: gv_okcode4.
*    error = 'X'.
      MESSAGE e101. "Centro indicado no existe.
    ELSE.
      AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
                  ID 'ACTVT' FIELD '03'
                  ID 'WERKS' FIELD gv_werks.

      IF sy-subrc <> 0.
        CLEAR: gv_okcode4.
*      error = 'X'.
        MESSAGE e103(zmm) WITH gv_werks. "No tiene autorización al centro &.
      ENDIF.
    ENDIF.
  ENDIF.
ENDMODULE.                 " VALIDAR_CENTRO  INPUT
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_ALMACEN  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_almacen INPUT.
  DATA: ls_inv_ci TYPE ztinv2_ci.

  IF gv_lgort IS INITIAL.
*    error = 'X'.
    MESSAGE e110(zmm). "El almacén es un campo obligatorio.
  ELSE.
    CLEAR lv_lgort.
    SELECT SINGLE lgort INTO lv_lgort
      FROM t001l
      WHERE werks = gv_werks
      AND lgort = gv_lgort.

    IF lv_lgort IS INITIAL.
      CLEAR: gv_lgort.
*      error = 'X'.
      MESSAGE e102(zmm). "Almacén indicado no existe.
    ELSE.
      SELECT SINGLE * INTO ls_inv_ci
        FROM ztinv2_ci
        WHERE werks = gv_werks
        AND lgort = gv_lgort
         AND ( status <> 'F' AND status <> 'B' ).
      IF sy-subrc EQ 0.
*      IF ls_inv_ci IS NOT INITIAL. " Ya existe el inventario
        CLEAR: gv_okcode4.
        MESSAGE e104(zmm) " DISPLAY LIKE 'E'
                WITH ls_inv_ci-docum gv_werks gv_lgort .
      ENDIF.
    ENDIF.
  ENDIF.
ENDMODULE.                 " VALIDAR_ALMACEN  INPUT
*&---------------------------------------------------------------------*
*&      Module  SALIR_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE salir_command_0300 INPUT.
  LEAVE TO SCREEN 0.
ENDMODULE.                 " SALIR_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*&      Module  SALIR_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE salir_0200 INPUT.
  CASE gv_okcode2.
    WHEN 'CANC' OR 'EXIT' OR 'BACK'.
      DATA: sw_bloq.

      PERFORM bloquear_inventario USING zsinv0002_grid-docum 'D' CHANGING sw_bloq.

      PERFORM recuperar_datos.

      CLEAR gv_okcode2.

      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.                 " SALIR_0200  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0500  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0500 INPUT.
  CASE gv_okcode5.
*    WHEN 'BACK'.
*      LEAVE TO SCREEN 0100.
*    WHEN 'EXIT' OR 'CANC'.
*      SET SCREEN 0.
*      LEAVE SCREEN.
  ENDCASE.

  CLEAR gv_okcode5.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  SALIR_0500  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE salir_0500 INPUT.
  CASE gv_okcode5.
    WHEN 'BACK'.
      CLEAR gv_okcode5.
      LEAVE TO SCREEN 0.
    WHEN 'EXIT' OR 'CANC'.
      SET SCREEN 0. LEAVE SCREEN.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_1000 INPUT.
  DATA: lv_answer(1),
        sw_bloqueado(1).

  CASE gv_okcode1000.
    WHEN 'EXIT' OR 'CANC' OR 'BACK'.
      PERFORM bloquear_inventario USING ztinv2_ci-docum 'D' CHANGING sw_bloqueado. "desbloquear

      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'DOC_REC'.
      CLEAR gv_docum_int.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = gv_docum
        IMPORTING
          output = gv_docum_int.

      SELECT SINGLE * FROM ztinv2_ci
        WHERE docum EQ gv_docum_int.

      IF sy-subrc NE 0.
        MESSAGE 'Documento de inventario no existe' TYPE 'E'.
      ENDIF.
    WHEN 'ENTE'. " continuar recuento
      IF ztinv2_ci IS INITIAL.
        CLEAR gv_docum_int.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = gv_docum
          IMPORTING
            output = gv_docum_int.

        SELECT SINGLE * FROM ztinv2_ci
          WHERE docum EQ gv_docum_int.

        IF sy-subrc NE 0.
          MESSAGE 'Documento de inventario no existe' TYPE 'E'.
        ENDIF.
      ENDIF.

      IF ztinv2_ci-status NE 'I' AND ztinv2_ci-status NE 'P'.
        MESSAGE 'Recuento posible solo para status "inicial" o "en proceso", modifique el status' TYPE 'E'.
      ENDIF.

      PERFORM bloquear_inventario USING ztinv2_ci-docum 'B' CHANGING sw_bloqueado. "bloquear

      IF sw_bloqueado EQ 'S'.
        CALL SCREEN '1001'.
      ENDIF.
    WHEN 'FIN'.
      CLEAR lv_answer.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          text_question         = '¿Desea finalizar el recuento?'
          titlebar              = 'Finalizar recuento'
*         text_button_1         = text-010
          icon_button_1         = 'ICON_OKAY'
          icon_button_2         = 'ICON_CANCEL'
*         text_button_2         = text-011
          display_cancel_button = space
          default_button        = '2'
          start_column          = 10
          start_row             = 10
        IMPORTING
          answer                = lv_answer.

      CASE lv_answer.
        WHEN '1'.
          CLEAR sw_bloqueado.

          PERFORM bloquear_inventario USING ztinv2_ci-docum 'B' CHANGING sw_bloqueado. "bloquear

          IF sw_bloqueado EQ 'S'.
            CALL FUNCTION 'ZMM_INV_FINALIZAR'
              EXPORTING
                docum = ztinv2_ci-docum.

            PERFORM bloquear_inventario USING ztinv2_ci-docum 'D' CHANGING sw_bloqueado. "desbloquear
            MESSAGE s160(zmm).

            CLEAR: gv_docum, gv_docum_int, ztinv2_ci.
          ENDIF.

        WHEN '2'.
      ENDCASE.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXIT_1000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit_1000 INPUT.
  PERFORM bloquear_inventario USING ztinv2_ci-docum 'D' CHANGING sw_bloqueado. "desbloquear

  CASE gv_okcode1000.
    WHEN 'EXIT' OR 'CANC' OR 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.
    WHEN 'LISTADO'.
      CALL TRANSACTION 'ZMM4041'.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXIT_1001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit_1001 INPUT.
  CLEAR: gv_etiqueta, ztinv2_pi-menge_new.

  CASE gv_okcode1001.
    WHEN 'EXIT' OR 'CANC' OR 'BACK'.
      PERFORM bloquear_inventario USING ztinv2_ci-docum 'D' CHANGING sw_bloqueado. " desbloquear

      CLEAR: ztinv2_ci, ztinv2_pi, gv_okcode1001, gv_etiqueta, gv_maktx,
         gv_lgobe, gv_lgobe_new, gv_name1, ztinv2_pi-menge_new, gv_cantidad.

      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'LIST_POS'.
      MOVE-CORRESPONDING ztinv2_ci TO zsinv0002_grid.

      PERFORM listado_posiciones USING zsinv0002_grid-docum
                                       zsinv0002_grid-status.
      CALL SCREEN '0200'.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_1001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_1001 INPUT.
  DATA: dynpfields TYPE TABLE OF dynpread WITH HEADER LINE.

  CASE gv_okcode1001.
    WHEN 'EXIT' OR 'CANC' OR 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'ENTE'. " esto se ejecutará en el módulo LECTURA_ETIQUETA
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  LECTURA_ETIQUETA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE lectura_etiqueta INPUT.

  IF gv_okcode1001 EQ 'LIST_POS'.
    CLEAR: gv_etiqueta, ztinv2_pi-menge_new.
  ENDIF.

  IF gv_etiqueta IS NOT INITIAL.
    CALL FUNCTION 'ZMM_INV_RECUENTO'
      EXPORTING
        docum          = ztinv2_ci-docum
        etiqueta       = gv_etiqueta
        cantidad       = ztinv2_pi-menge_new
        corregir       = gv_corregir
      IMPORTING
        matnr          = ztinv2_pi-matnr
        maktx          = gv_maktx
        charg          = ztinv2_pi-charg
        lgort          = ztinv2_pi-lgort_new
        lgobe          = gv_lgobe_new
        ubicacion      = gv_ubicacion
        txt_ubicacion  = gv_txt_ubicacion
        menge_new      = gv_cantidad
        meins          = ztinv2_pi-meins
        return         = return
      EXCEPTIONS
        error_lectura  = 1
        falta_cantidad = 2
        OTHERS         = 3.

    IF sy-subrc <> 0 AND sy-subrc <> 2.
      CLEAR: gv_etiqueta, gv_okcode1001, ztinv2_pi-menge_new. " limpiamos tanto si hay error como si no

      MESSAGE ID return-id TYPE return-type NUMBER  return-number
                                              WITH  return-message_v1
                                                    return-message_v2
                                                    return-message_v3
                                                    return-message_v4.
    ELSEIF sy-subrc EQ 2.
      LOOP AT SCREEN.
        IF screen-name EQ 'ZTINV2_PI-MENGE_NEW'.
          screen-input = 1.
          MODIFY SCREEN.
        ENDIF.
      ENDLOOP.

      SET CURSOR FIELD 'ZTINV2_PI-MENGE_NEW'.
      CLEAR gv_okcode1001.

      MESSAGE ID return-id TYPE return-type NUMBER  return-number
                                              WITH  return-message_v1
                                                    return-message_v2
                                                    return-message_v3
                                                    return-message_v4.
    ELSE.
      CLEAR: gv_etiqueta, gv_okcode1001, ztinv2_pi-menge_new. " limpiamos tanto si hay error como si no
    ENDIF.
  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  CORRECCION_CANTIDAD  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE correccion_cantidad INPUT.

  IF gv_corregir IS NOT INITIAL.
    LOOP AT SCREEN.
      IF screen-name EQ 'ZTINV2_PI-MENGE_NEW'.
        screen-input = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ELSE.
    LOOP AT SCREEN.
      IF screen-name EQ 'ZTINV2_PI-MENGE_NEW'.
        screen-input = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDMODULE.
