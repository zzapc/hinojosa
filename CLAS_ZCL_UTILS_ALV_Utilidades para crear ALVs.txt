
class ZCL_UTILS_ALV definition
  public
  inheriting from ZCL_UTILS
  final
  create public .

public section.

  methods CONSTRUCTOR
    importing
      value(I_T_DATA) type ANY TABLE .
  methods SHOW_ALV .
  methods SET_ALV_DATA .
  methods SET_AS_POPUP
    importing
      !I_START_COLUMN type I
      !I_START_LINE type I
      !I_END_COLUMN type I
      !I_END_LINE type I
      !I_TITLE type STRING .
  class-methods S_SHOW_ALV_POPUP
    importing
      value(I_T_DATA) type ANY TABLE
    exceptions
      NO_VALID_IPARAMS
      ERROR_ALV_FACTORY .
protected section.
private section.

  data _O_SALV_TABLE type ref to CL_SALV_TABLE .
  data _O_SALV_TREE type ref to CL_SALV_TREE .
  data C_T_DATA type ref to DATA .

  methods ON_LINK_CLICK
    for event LINK_CLICK of CL_SALV_EVENTS_TABLE
    importing
      !ROW
      !COLUMN .
  methods ON_USER_COMMAND
    for event ADDED_FUNCTION of CL_SALV_EVENTS
    importing
      !E_SALV_FUNCTION .
endclass. "ZCL_UTILS_ALV definition
class ZCL_UTILS_ALV implementation.
METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA lr_functions     TYPE REF TO cl_salv_functions_list.
  DATA lr_display       TYPE REF TO cl_salv_display_settings.
  DATA lr_layout        TYPE REF TO cl_salv_layout.
  DATA ls_key           TYPE salv_s_layout_key.
  DATA lr_selections    TYPE REF TO cl_salv_selections.
  DATA lr_events        TYPE REF TO cl_salv_events_table.

**********************************************************************
* Validaciones
**********************************************************************


**********************************************************************
* Lógica
**********************************************************************

  super->constructor( ).

  GET REFERENCE OF i_t_data INTO c_t_data.

  FIELD-SYMBOLS: <fl_t_data> TYPE ANY TABLE.

  ASSIGN me->c_t_data->* TO <fl_t_data>.

  TRY.

    cl_salv_table=>factory(
      IMPORTING
        r_salv_table = _o_salv_table
      CHANGING
        t_table      = <fl_t_data> ).

  CATCH cx_salv_msg.                                  "#EC NO_HANDLER

  ENDTRY.

  _o_salv_table->set_screen_status( report = sy-repid pfstatus = space set_functions = _o_salv_table->c_functions_all ).

* Functions
  lr_functions = _o_salv_table->get_functions( ).

* Activate ALV generic Functions
  lr_functions->set_all( abap_true ).

* Display settings
  lr_display = _o_salv_table->get_display_settings( ).
  lr_display->set_striped_pattern( cl_salv_display_settings=>true ).

* Layout settings
  lr_layout = _o_salv_table->get_layout( ).
  ls_key-report = sy-repid.
  lr_layout->set_key( ls_key ).
  lr_layout->set_default( abap_true ).
  lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).

* Selections
  lr_selections = _o_salv_table->get_selections( ).
  lr_selections->set_selection_mode( if_salv_c_selection_mode=>none ).

*  PERFORM set_columns_alv.
**********************************************************************

  DATA lr_columns       TYPE REF TO cl_salv_columns_table.
  DATA lr_column        TYPE REF TO cl_salv_column_table.

* Set columns options
  lr_columns = _o_salv_table->get_columns( ).
  lr_columns->set_optimize( abap_true ).

*  TRY.
*      lr_column ?= lr_columns->get_column( 'MATKL' ).
*      lr_column->set_long_text( CONV #( text-c01 ) ).
*      lr_column->set_medium_text( CONV #( text-c01 ) ).
*      lr_column->set_short_text( CONV #( text-c01 ) ).
*      lr_column->set_tooltip( CONV #( text-c01 ) ).
*      lr_column->set_edit_mask( space ).
*      lr_column->set_optimized( ).
*  CATCH cx_salv_not_found cx_salv_data_error.         "#EC NO_HANDLER
*  ENDTRY.
*
*  TRY.
*      lr_column ?= lr_columns->get_column( 'WGBEZ' ).
*      lr_column->set_long_text( CONV #( text-c02 ) ).
*      lr_column->set_medium_text( CONV #( text-c02 ) ).
*      lr_column->set_short_text( CONV #( text-c02 ) ).
*      lr_column->set_tooltip( CONV #( text-c02 ) ).
*      lr_column->set_edit_mask( space ).
*      lr_column->set_optimized( ).
*  CATCH cx_salv_not_found cx_salv_data_error.         "#EC NO_HANDLER
*  ENDTRY.

  TRY.
*      lr_column ?= lr_columns->get_column( 'CONTADOR' ).
*      lr_column->set_long_text( CONV #( text-c03 ) ).
*      lr_column->set_medium_text( CONV #( text-c03 ) ).
*      lr_column->set_short_text( CONV #( text-c03 ) ).
*      lr_column->set_tooltip( CONV #( text-c03 ) ).
*      lr_column->set_edit_mask( space ).
*      lr_column->set_optimized( ).
  CATCH cx_salv_not_found cx_salv_data_error.

  ENDTRY.

**********************************************************************


*  Events
  lr_events = _o_salv_table->get_event( ).

*  CREATE OBJECT lr_event_handler.
  SET HANDLER me->on_link_click   FOR lr_events.
  SET HANDLER me->on_user_command FOR lr_events.

ENDMETHOD.
METHOD on_link_click.

  CASE column.
    WHEN ''.
    WHEN OTHERS.
  ENDCASE.

ENDMETHOD.
METHOD on_user_command.

*  DATA lr_selections TYPE REF TO cl_salv_selections.
*  DATA lt_rows       TYPE salv_t_row.
*  DATA lt_data       TYPE STANDARD TABLE OF ty_data.

*  gr_table->refresh( ).

ENDMETHOD.
METHOD s_show_alv_popup.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_salv_table TYPE REF TO cl_salv_table,
        lt_data       TYPE REF TO data.

  DATA lr_functions     TYPE REF TO cl_salv_functions_list.
  DATA lr_display       TYPE REF TO cl_salv_display_settings.
  DATA lr_layout        TYPE REF TO cl_salv_layout.
  DATA ls_key           TYPE salv_s_layout_key.
  DATA lr_selections    TYPE REF TO cl_salv_selections.
  DATA lr_events        TYPE REF TO cl_salv_events_table.

**********************************************************************
* Validaciones
**********************************************************************

*** ITABLE

  IF ( lines( i_t_data ) LE 0 ).
    RAISE no_valid_iparams.
  ENDIF.


**********************************************************************
* Lógica
**********************************************************************

*** ITABLE

  GET REFERENCE OF i_t_data INTO lt_data.
  FIELD-SYMBOLS: <fl_t_data> TYPE ANY TABLE.
  ASSIGN lt_data->* TO <fl_t_data>.

  IF ( <fl_t_data> IS NOT ASSIGNED ).
    RAISE no_valid_iparams.
  ENDIF.

*** ALV FACTORY

  TRY.

    cl_salv_table=>factory(
      IMPORTING
        r_salv_table = lo_salv_table
      CHANGING
        t_table      = <fl_t_data> ).

  CATCH cx_salv_msg.                                  "#EC NO_HANDLER

  ENDTRY.

  IF ( lo_salv_table IS NOT BOUND ).
    RAISE error_alv_factory.
  ENDIF.

*** ALV FUNCTIONS

** SCREEN STATUS

*  lo_salv_table->set_screen_status( report = sy-repid pfstatus = space set_functions = lo_salv_table->c_functions_all ).
*
*** Functions
*
*  lr_functions = lo_salv_table->get_functions( ).
*
*** Activate ALV generic Functions
*
*  lr_functions->set_all( abap_true ).
*
** Display settings
*  lr_display = lo_salv_table->get_display_settings( ).
*  lr_display->set_striped_pattern( cl_salv_display_settings=>true ).
*
** Layout settings
*  lr_layout = lo_salv_table->get_layout( ).
*  ls_key-report = sy-repid.
*  lr_layout->set_key( ls_key ).
*  lr_layout->set_default( abap_true ).
*  lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
*
** Selections
*  lr_selections = lo_salv_table->get_selections( ).
*  lr_selections->set_selection_mode( if_salv_c_selection_mode=>none ).


*** ALV POPUP

  lo_salv_table->set_screen_popup( start_column = 100 start_line  = 100 ).

*** ALV DISPLAY

  lo_salv_table->display( ).

ENDMETHOD.
  method SET_ALV_DATA.



  endmethod.
METHOD set_as_popup.

**********************************************************************
* Parámetros locales
**********************************************************************

  CONSTANTS: lc_dcolumn TYPE i VALUE 100,
             lc_dline   TYPE i VALUE 50.

  DATA: lv_scolumn  TYPE i,
        lv_ecolumn  TYPE i,
        lv_sline    TYPE i,
        lv_eline    TYPE i,
        lv_title    TYPE string.

**********************************************************************
* Validaciones
**********************************************************************

*** DIMENSIONS

  IF ( lv_scolumn IS INITIAL OR lv_sline IS INITIAL ).

*    CLEAR: lv_scolumn, lv_sline, lv_ecolumn, lv_eline.

  ELSE.

    IF ( lv_ecolumn IS INITIAL OR lv_eline IS INITIAL ).

*        lv_scolumn

    ENDIF.

  ENDIF.



**********************************************************************
* Lógica
**********************************************************************


  _o_salv_table->set_screen_popup(
                  start_column = i_start_column
                  end_column  = i_end_column
                  start_line  = i_start_line
                  end_line    = i_end_line ).


ENDMETHOD.
METHOD show_alv.

  FIELD-SYMBOLS: <fl_t_data> TYPE ANY TABLE.

*  ASSIGN me->c_t_data->* TO <fl_t_data>.

*  ASSIGN _o_salv_table->r_table->* TO <fl_t_data>.

  _o_salv_table->display( ).

ENDMETHOD.
