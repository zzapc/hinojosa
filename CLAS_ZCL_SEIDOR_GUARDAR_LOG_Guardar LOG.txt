
class ZCL_SEIDOR_GUARDAR_LOG definition
  public
  final
  create public .

public section.

  methods GET_BAPIRET_TAB
    exporting
      !GT_BAPIRET type BAPIRET2_TAB .
  methods CONSTRUCTOR .
  methods GUARDAR_LOG
    importing
      !OBJETO type BALOBJ_D
      !SUBOBJETO type BALSUBOBJ
      !EXTNUMBER type BALNREXT optional
    exporting
      !LOGNUMBER type BALOGNR .
  methods MOSTRAR_POPUP_LOG
    importing
      !LOGNUMBER type BALOGNR .
  methods GUARDAR_MENSAJE
    importing
      !I_TYPE type BAPI_MTYPE
      !I_ID type SYMSGID
      !I_NUMBER type SYMSGNO
      !I_MESSAGE_V1 type SYMSGV
      !I_MESSAGE_V2 type SYMSGV optional
      !I_MESSAGE_V3 type SYMSGV optional
      !I_MESSAGE_V4 type SYMSGV optional .
  methods MOSTRAR_LOG_EXTERNO
    importing
      !OBJECT type BALHDR-OBJECT default SPACE
      !SUBOBJECT type BALHDR-SUBOBJECT default SPACE
      !EXTERNAL type BALHDR-EXTNUMBER default SPACE
      !DATE_FROM type BALHDR-ALDATE default SY-DATUM
      !DATE_TO type BALHDR-ALDATE default SY-DATUM
      !OBJECT_ATTRIBUTE type CHAR1 optional
      !SUBOBJECT_ATTRIBUTE type CHAR1 optional
      !EXTERNAL_NUMBER_ATTRIBUTE type CHAR1 optional
      !TIME_FROM type BALHDR-ALTIME default '000000'
      !TIME_TO type BALHDR-ALTIME default SY-UZEIT
      !TITLE_SELECTION_SCREEN type STRING default SPACE
      !TITLE_LIST_SCREEN type STRING default SPACE
      !COLUMN_SELECTION type BALDISP optional
      !COLUMN_SELECTION_MSG_JUMP type BALDISP2-MSG_JUMP default '1'
      !EXTERNAL_NUMBER_DISPLAY_LENGTH type I default 20
      !I_S_DISPLAY_PROFILE type BAL_S_PROF optional
      !I_VARIANT_REPORT type SY-REPID default SPACE
      !I_SRT_BY_TIMSTMP type BOOLEAN default SPACE .
  methods REFRESH .
  methods SET_BAPIRET_TAB
    importing
      !LT_BAPIRET type BAPIRET2_TAB .
protected section.
private section.

  data:
    GT_MENSAJES TYPE STANDARD TABLE OF bapiret2 .
endclass. "ZCL_SEIDOR_GUARDAR_LOG definition
class ZCL_SEIDOR_GUARDAR_LOG implementation.
  method CONSTRUCTOR.
  endmethod.
  METHOD get_bapiret_tab.

    gt_bapiret[] = gt_mensajes[].

  ENDMETHOD.
  METHOD guardar_log.

    DATA: wa_mensajes TYPE bapiret2.
    DATA: clave       TYPE balnrext.
    DATA: linea       TYPE balnrext.
    DATA numlog TYPE bal_t_lgnm.

* Variables para la creacion del log
    DATA:
      l_log_handle TYPE balloghndl,
      l_s_log      TYPE bal_s_log,
      l_s_msg      TYPE bal_s_msg,
      l_msgno      TYPE symsgno,
      ta_loghandle TYPE bal_t_logh.

    l_s_log-object          = objeto.
    l_s_log-subobject       = subobjeto.
    l_s_log-aldate_del      = sy-datum + 100.
    l_s_log-del_before      = space.
    l_s_log-extnumber = extnumber.

    CALL FUNCTION 'BAL_LOG_CREATE'
      EXPORTING
        i_s_log      = l_s_log
      IMPORTING
        e_log_handle = l_log_handle
      EXCEPTIONS
        OTHERS       = 1.

    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    LOOP AT gt_mensajes INTO wa_mensajes.
      l_s_msg-msgty    = wa_mensajes-type    .
      l_s_msg-msgid    = wa_mensajes-id    .
      l_s_msg-msgno    = wa_mensajes-number    .
      l_s_msg-msgv1    = wa_mensajes-message_v1    .
      l_s_msg-msgv2    = wa_mensajes-message_v2    .
      l_s_msg-msgv3    = wa_mensajes-message_v3    .
      l_s_msg-msgv4    = wa_mensajes-message_v4    .

* Añadimos la incidencia al log
      CALL FUNCTION 'BAL_LOG_MSG_ADD'
        EXPORTING
          i_log_handle = l_log_handle
          i_s_msg      = l_s_msg
        EXCEPTIONS
          OTHERS       = 1.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDLOOP.

    REFRESH ta_loghandle.
    APPEND l_log_handle TO ta_loghandle.

    CALL FUNCTION 'BAL_DB_SAVE'
      EXPORTING
        i_client         = sy-mandt
        i_in_update_task = ''
        i_save_all       = 'X'
        i_t_log_handle   = ta_loghandle
      IMPORTING
        e_new_lognumbers = numlog
      EXCEPTIONS
        log_not_found    = 1
        save_not_allowed = 2
        numbering_error  = 3
        OTHERS           = 4.
    IF sy-subrc = 0.
      IF NOT numlog IS INITIAL.
        lognumber = numlog[ 1 ]-lognumber.
      ENDIF.
    ENDIF.


* Refrescamos el log de incidencias
    CALL FUNCTION 'BAL_LOG_REFRESH'
      EXPORTING
        i_log_handle  = l_log_handle
      EXCEPTIONS
        log_not_found = 1
        OTHERS        = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.
  method GUARDAR_MENSAJE.

DATA l_return TYPE bapiret2.
  DATA msg_v1 TYPE symsgv.
  DATA msg_v2 TYPE symsgv.
  DATA msg_v3 TYPE symsgv.
  DATA msg_v4 TYPE symsgv.
  DATA l_type TYPE bapi_mtype.

  msg_v1 = I_MESSAGE_V1.
  msg_v2 = I_MESSAGE_V2.
  msg_v3 = I_MESSAGE_V3.
  msg_v4 = I_MESSAGE_V4.

*  CONDENSE msg_v1 NO-GAPS.
*  CONDENSE msg_v2 NO-GAPS.
*  CONDENSE msg_v3 NO-GAPS.
*  CONDENSE msg_v4 NO-GAPS.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = msg_v1
    IMPORTING
      output = msg_v1.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = msg_v2
    IMPORTING
      output = msg_v2.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = msg_v3
    IMPORTING
      output = msg_v3.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = msg_v4
    IMPORTING
      output = msg_v4.


*  if p_type = 'E'.
*    l_type = 'W'.
*  else.
  l_type = i_type.
*  ENDIF.

  CALL FUNCTION 'FS_BAPI_BAPIRET2_FILL'
    EXPORTING
      type   = l_type
      cl     = i_id
      number = i_number
      par1   = msg_v1
      par2   = msg_v2
      par3   = msg_v3
      par4   = msg_v4
*     LOG_NO = ' '
*     LOG_MSG_NO       = ' '
*     PARAMETER        = ' '
*     ROW    = 0
*     FIELD  = ' '
    IMPORTING
      return = l_return.

  APPEND l_return TO gt_mensajes.
  endmethod.
  METHOD mostrar_log_externo.

    CALL FUNCTION 'APPL_LOG_DISPLAY'
      EXPORTING
        object                         = object
        subobject                      = subobject
        external_number                = external
        object_attribute               = object_attribute
        subobject_attribute            = subobject_attribute
        external_number_attribute      = external_number_attribute
        date_from                      = date_from
        time_from                      = time_from
        date_to                        = date_to
        time_to                        = time_to
        title_selection_screen         = title_selection_screen
        title_list_screen              = title_list_screen
        column_selection               = column_selection
        suppress_selection_dialog      = 'X'
        column_selection_msg_jump      = column_selection_msg_jump
        external_number_display_length = external_number_display_length
        i_s_display_profile            = i_s_display_profile
        i_variant_report               = i_variant_report
        i_srt_by_timstmp               = i_srt_by_timstmp
*             IMPORTING
*       NUMBER_OF_PROTOCOLS            =
      EXCEPTIONS
        no_authority                   = 1
        OTHERS                         = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.
  ENDMETHOD.
  METHOD mostrar_popup_log.

    TYPES:
      BEGIN OF szal_lognumber,
        item LIKE lognumber,
      END OF szal_lognumber.

    DATA lt_balm TYPE TABLE OF balm.
    DATA l_balm TYPE balm.

    DATA szal_lognumbers TYPE STANDARD TABLE OF szal_lognumber .
    DATA lognum TYPE szal_lognumber.

    DATA lt_return TYPE TABLE OF bapiret2.
    DATA l_return TYPE bapiret2.

    lognum-item = lognumber.
    APPEND lognum TO szal_lognumbers.

    CALL FUNCTION 'APPL_LOG_READ_DB_WITH_LOGNO'
      TABLES
        lognumbers = szal_lognumbers
        messages   = lt_balm.

    LOOP AT lt_balm INTO l_balm.

*cargamos la tabla BAPIRET2
      l_return-type   = l_balm-msgty.
      l_return-id     = l_balm-msgid.
      l_return-number = l_balm-msgno.
      MESSAGE ID l_balm-msgid TYPE l_balm-msgty NUMBER l_balm-msgno
             WITH l_balm-msgv1 l_balm-msgv2
                  l_balm-msgv3 l_balm-msgv4
             INTO l_return-message.
      CONDENSE l_return-message.

      l_return-message_v1 = l_balm-msgv1.
      l_return-message_v2 = l_balm-msgv2.
      l_return-message_v3 = l_balm-msgv3.
      l_return-message_v4 = l_balm-msgv4.
      l_return-system     = sy-sysid.

      APPEND l_return TO lt_return.
    ENDLOOP.

    DATA: wa_mensajes TYPE bapiret2.

* En modo BatchInput no debe saltar la ventana
    CHECK sy-binpt EQ space.

* Variables para la creacion del log de incidencias
    DATA:
      l_log_handle TYPE balloghndl,
      mylog_handle TYPE bal_t_logh,
      l_s_log      TYPE bal_s_log,
      l_s_msg      TYPE bal_s_msg,
      l_msgno      TYPE symsgno.

* Creamos el log de incidencias
    l_s_log-extnumber  = 'Application Log Demo'(001).
    CALL FUNCTION 'BAL_LOG_CREATE'
      EXPORTING
        i_s_log      = l_s_log
      IMPORTING
        e_log_handle = l_log_handle
      EXCEPTIONS
        OTHERS       = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    LOOP AT lt_return INTO wa_mensajes.
      l_s_msg-msgid = wa_mensajes-id.
      l_s_msg-msgno = wa_mensajes-number.
      l_s_msg-msgty = wa_mensajes-type.
      l_s_msg-msgv1 = wa_mensajes-message_v1.
      l_s_msg-msgv2 = wa_mensajes-message_v2.
      l_s_msg-msgv3 = wa_mensajes-message_v3.
      l_s_msg-msgv4 = wa_mensajes-message_v4.
      l_s_msg-probclass = '3'.

* Añadimos la incidencia al log
      CALL FUNCTION 'BAL_LOG_MSG_ADD'
        EXPORTING
          i_log_handle = l_log_handle
          i_s_msg      = l_s_msg
        EXCEPTIONS
          OTHERS       = 1.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
    ENDLOOP.

* Creamos el popup con el log de incidencias
    DATA l_s_display_profile TYPE bal_s_prof.

    CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
      IMPORTING
        e_s_display_profile = l_s_display_profile
      EXCEPTIONS
        OTHERS              = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    l_s_display_profile-use_grid = 'X'.
    l_s_display_profile-disvariant-report = sy-repid.

* Mostramos el log de incidencias
    APPEND l_log_handle TO mylog_handle.
    CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
      EXPORTING
        i_s_display_profile = l_s_display_profile
        i_t_log_handle      = mylog_handle
      EXCEPTIONS
        OTHERS              = 1.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

* Refrescamos el log de incidencias
    CALL FUNCTION 'BAL_LOG_REFRESH'
      EXPORTING
        i_log_handle  = l_log_handle
      EXCEPTIONS
        log_not_found = 1
        OTHERS        = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.
  METHOD refresh.

    REFRESH gt_mensajes.

  ENDMETHOD.
  METHOD set_bapiret_tab.


    gt_mensajes[] = lt_bapiret[].


  ENDMETHOD.
