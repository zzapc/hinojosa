
class ZHCL_AI_CORE definition
  public
  inheriting from ZHCL_CORE
  final
  create public .

public section.

  types:
    tt_cuobj TYPE STANDARD TABLE OF cuobjs WITH KEY cuobj .

  data I_CUOBJ type TT_CUOBJ .

  methods ES_CONSISTENTE_CUOBJ
    importing
      !CUOBJ type CUOBJ
      !FUNCION_SAP type ABAP_BOOL default ''
      !PROCESAR type ABAP_BOOL default ''
    exporting
      !MESSAGE type BAPI_MSG
    returning
      value(SI) type ABAP_BOOL .
  methods GET_VALORES_CUOBJ
    importing
      !CUOBJ type CUOBJ
    exporting
      !MESSAGE type BAPI_MSG
    returning
      value(I_VALUES) type /VCXI/VKCR_TT_VALUE .
  methods COMPLETAR_CUOBJ
    importing
      !TIPO type CUIB_OBJTYP
      !GET_CLAVES type ABAP_BOOL default ''
    changing
      !TABLA type TABLE .
  methods GET_DATOS_VE
    importing
      !CUOBJ type CUOBJ optional
      !ID type /VCXI/CKX_ID
      !VALUE_EXTRACTOR type /VCXI/VKSC_IVEMO optional
      !INSTANCIA type /VCXI/VKCR_GVCIN optional
    exporting
      !DATOS type ANY
      !MESSAGE type BAPI_MSG .
  methods FIND_BY_CLSUI
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !CLSUI type STRING
      !NAVEGAR_A_PADRE type ABAP_BOOL default ''
    exporting
      !MESSAGE type BAPI_MSG
    returning
      value(GATE) type ref to /VCXI/CL_VKSR_GATE .
  class-methods VISUALIZAR_CUOBJ
    importing
      !CUOBJ type CUOBJ .
  methods GET_CONFIGURATION
    importing
      !CUOBJ type CUOBJ
    exporting
      !MESSAGE type BAPI_MSG
    returning
      value(CONFIGURATION) type IBCO2_INSTANCE_TAB2 .
  methods GET_CARACTERISTICAS
    importing
      !CUOBJ type MARC-CUOBJ
    returning
      value(CARACT) type ZT_SEL_CAR .
  methods FIND_BY_CUOBJ_ID
    importing
      !CUOBJ type CUOBJ optional
      !ID type STRING
      !NAVEGAR_A_HIJOS type STRING default ''
      !PADRE type ref to /VCXI/CL_VKSRA_SVC_ELEMENT optional
    exporting
      !MESSAGE type BAPI_MSG
    changing
      !TRAZA type TABLE_OF_STRINGS
    returning
      value(ELEMENT) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT .
  PROTECTED SECTION.

  PRIVATE SECTION.
endclass. "ZHCL_AI_CORE definition
class ZHCL_AI_CORE implementation.
  METHOD completar_cuobj.
    LOOP AT tabla ASSIGNING FIELD-SYMBOL(<tabla>).
      ASSIGN COMPONENT 'CUOBJ' OF STRUCTURE <tabla> TO FIELD-SYMBOL(<cuobj>).
      IF sy-subrc <> 0.
        CONTINUE.
      ENDIF.

      IF <cuobj> IS INITIAL.
        CASE tipo.
          WHEN 'MARC'.
            ASSIGN COMPONENT 'MATNR' OF STRUCTURE <tabla> TO FIELD-SYMBOL(<matnr>).
            IF sy-subrc = 0.
              IF NOT <matnr> IS INITIAL.
                ASSIGN COMPONENT 'WERKS' OF STRUCTURE <tabla> TO FIELD-SYMBOL(<werks>).
                IF sy-subrc = 0.
                  IF NOT <werks> IS INITIAL.
                    SELECT SINGLE cuobj FROM marc
                      INTO <cuobj>
                     WHERE matnr = <matnr>
                       AND werks = <werks>.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
        ENDCASE.
      ELSEIF get_claves = 'X'.
        CASE tipo.
          WHEN 'MARC'.
            ASSIGN COMPONENT 'MATNR' OF STRUCTURE <tabla> TO <matnr>.
            IF sy-subrc = 0.
              ASSIGN COMPONENT 'WERKS' OF STRUCTURE <tabla> TO <werks>.
              IF sy-subrc = 0.
                IF <matnr> IS INITIAL OR <werks> IS INITIAL.
                  SELECT matnr, werks
                    FROM marc                          "#EC CI_NOFIELD.
                    WHERE cuobj = @<cuobj>
                    ORDER BY PRIMARY KEY
                    INTO (@<matnr>, @<werks>)
                    UP TO 1 ROWS.
                  ENDSELECT.
                ENDIF.
              ENDIF.
            ENDIF.
        ENDCASE.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD es_consistente_cuobj.
    DATA i_conf TYPE TABLE OF conf_out.
    DATA: l_marc TYPE marc,
          l_inob TYPE inob,
          l_vbap TYPE vbap.

    CLEAR: si, message.

    IF procesar IS INITIAL.
      IF funcion_sap IS INITIAL.
        DATA(i_values) = get_valores_cuobj( EXPORTING cuobj   = cuobj
                                           IMPORTING message = message ).

        si = xsdbool( line_exists( i_values[ atnam = 'HP_CONSISTENT'
                                             atwrt = 'X' ] ) ).
      ELSE.
        CALL FUNCTION 'VC_I_GET_CONFIGURATION'
          EXPORTING
            instance            = cuobj
*           BUSINESS_OBJECT     =
*           LANGUAGE            = SY-LANGU
*           PRINT_SALES         = ' '
*           PRINT_PURCHASE      = ' '
*           PRINT_ENGINEERING   = ' '
*           IDOC_MODE           = ' '
*           ANW_SICHT           = ' '
*           EXCL_IND            = ' '
*           IV_INVALID_POSSIBLE = ' '
*           IV_MAX_MASSPROCESSING       = 0
*           IV_EXPLICIT_ORGAREA = ' '
*           IV_NO_DESCRIPTION   = ' '
*           IV_USER             = ' '
*           IV_NO_VALUE_CHECK   = 'X'
*           IV_NO_DIALOG        = ' '
*           IV_DISPLAY_WARNING  = ' '
          TABLES
            configuration       = i_conf
*           CONFIGURATION_IDOC  =
          EXCEPTIONS
            instance_not_found  = 1
            internal_error      = 2
            no_class_allocation = 3
            instance_not_valid  = 4
            OTHERS              = 5.
        IF sy-subrc <> 0.
          si = es_consistente_cuobj( cuobj ).
        ELSE.
          si = xsdbool( line_exists( i_conf[ atnam = 'HP_CONSISTENT'
                                             atwrt = 'X' ] ) ).
        ENDIF.
      ENDIF.
    ELSE.
      SELECT matnr, werks, stdpd
        FROM marc                                      "#EC CI_NOFIELD.
        WHERE cuobj = @cuobj
        ORDER BY PRIMARY KEY
        INTO CORRESPONDING FIELDS OF @l_marc
        UP TO 1 ROWS.
      ENDSELECT.
      IF sy-subrc = 0.
        l_inob-cuobj       = l_marc-cuobj.
        l_inob-robtab      = 'MARA'.
        l_inob-robjek      = l_marc-stdpd.

        l_inob-obtab       = 'MARC'.
        l_inob-objek(18)   = l_marc-matnr.
        l_inob-objek+18(4) = l_marc-werks.
      ELSE.
        SELECT vbeln, posnr, matnr, werks
          FROM vbap                                    "#EC CI_NOFIELD.
          WHERE cuobj = @cuobj
          ORDER BY PRIMARY KEY
          INTO CORRESPONDING FIELDS OF @l_vbap
          UP TO 1 ROWS.
        ENDSELECT.
        IF sy-subrc = 0.
          SELECT SINGLE stdpd FROM marc
            INTO CORRESPONDING FIELDS OF l_marc
           WHERE matnr = l_vbap-matnr
             AND werks = l_vbap-werks.

          l_inob-cuobj       = l_vbap-cuobj.
          l_inob-robtab      = 'MARA'.
          l_inob-robjek      = l_marc-stdpd.

          l_inob-obtab       = 'VBPS'.
          l_inob-objek(10)   = l_vbap-vbeln.
          l_inob-objek+10(6) = l_vbap-posnr.
        ENDIF.
      ENDIF.

      IF l_inob IS INITIAL.
        message = `No se ha podido determinar origen de CUOBJ`.
        RETURN.
      ENDIF.
      CALL FUNCTION 'CE_C_PROCESSING'
        EXPORTING
          instance                       = cuobj
*         REFERENCE_INSTANCE             =
          date                           = sy-datum
          display                        = ' '
          object_id                      = l_inob-robtab
          object                         = l_inob-robjek
          owner_id                       = l_inob-obtab
*         HEADER_SCREEN                  =
          plant                          = l_marc-werks
          no_dialog                      = abap_true
*         MATERIAL_VARIANT               =
*         NO_F8                          = ' '
*         NO_F11                         = ' '
          sub_type                       = '05'
*         SIMULATION                     = ' '
          type                           = 'E'
*         EFFECTIVITY                    =
*         INITIALIZATION                 = ' '
*         CALLED_FROM_SALES              = ' '
*         BOM_APPLICATION                =
*         IS_BUSINESS_OBJECT             =
*         IV_PROFILE_COUNTER             =
*   IMPORTING
*         RETURN_WITH_FUNCTIONKEY        =
*         NEW_INSTANCE                   =
*   TABLES
*         APPLICATION_INPUT              =
*         APPLICATION_OUTPUT             =
        EXCEPTIONS
          internal_error                 = 1
          instance_not_found             = 2
          reference_instance_not_found   = 3
          instance_is_a_classification   = 4
          no_plant                       = 5
          no_quantity                    = 6
          no_connection_to_configuration = 7
          material_variant_not_allowed   = 8
          internal_error_ecm             = 9
          eoasl_not_allowed              = 10
          maxasl_not_allowed             = 11
          xc_unprocessed_data            = 12
          xc_failure_processing_data     = 13
          no_bom                         = 14
          no_knowledge_base_found        = 15
          order_bom_error                = 16
          OTHERS                         = 17.
      IF sy-subrc <> 0.
        message = `Error procesando configuración`.
        RETURN.
      ENDIF.

      DATA(lt_config) = get_configuration( cuobj ).
      IF lt_config IS INITIAL.
        message = `Error recuperando configuración`.
        RETURN.
      ENDIF.

      READ TABLE lt_config INTO DATA(ls_config) INDEX 1.
      CASE ls_config-conf-cstatus.
        WHEN '2'.
          message = `Bloqueado tras cambios de configuración`.
        WHEN '5'.
          message = `Inconsistente tras cambios de configuración`.
        WHEN OTHERS.
          si = 'X'.
      ENDCASE.
*
    ENDIF.
  ENDMETHOD.
  METHOD find_by_clsui.
    CLEAR: gate, message.

    TRY.
        DATA(lt_gate) = ir_gate->get_prvdr(   if_inuse = abap_true ).
      CATCH /vcxi/cx_ckx INTO DATA(o_ckx).
        message = |No se encuentra prvdr { o_ckx->get_text( ) }|.
        RETURN.
    ENDTRY.

    LOOP AT lt_gate ASSIGNING FIELD-SYMBOL(<gate_ui>).
      TRY.
          DATA(l_ui) = <gate_ui>->get_clsui( ).
          IF l_ui = clsui.
            gate = <gate_ui>.
            RETURN.
          ENDIF.
        CATCH /vcxi/cx_ckx INTO o_ckx. "#EC *
      ENDTRY.
    ENDLOOP.

    IF gate IS INITIAL.
      IF navegar_a_padre = 'X'.
        TRY.
            DATA(l_padre) = ir_gate->get_parent( ).
            IF l_padre IS BOUND.
              gate = find_by_clsui( ir_gate = l_padre
                                    clsui   = clsui
                                    navegar_a_padre = 'X' ).
            ENDIF.
          CATCH /vcxi/cx_ckx.
            RETURN.
        ENDTRY.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD find_by_cuobj_id.
    DATA: l_ele  TYPE REF TO /vcxi/cl_vksra_svc_element,
          l_id   TYPE /vcxi/ckx_id,
          string TYPE string.


    CLEAR: element, message.

    IF padre IS INITIAL.
      TRY.
          DATA(lf_gvcin) = /vcxi/cl_vkcr_gateway=>get_gvcin_by_cuobj( if_cuobj = cuobj ).
          IF lf_gvcin IS INITIAL.
            message = 'No existe la configuración'.
            RETURN.
          ENDIF.
        CATCH cx_root INTO DATA(o_root).
          message = o_root->get_text( ).
          RETURN.
      ENDTRY.

      TRY.
          DATA(lr_svc) = /vcxi/cl_vksra_svc=>get_instance( if_gvcin = lf_gvcin ).
          IF lf_gvcin IS INITIAL.
            message = 'No existe instancia'.
            RETURN.
          ENDIF.
        CATCH cx_root INTO o_root.
          message = o_root->get_text( ).
          RETURN.
      ENDTRY.

      DATA(elementos) = lr_svc->get_svc_elements( ir_svc_element_parent = l_ele ).
    ELSE.
      elementos = padre->/vcxi/if_ckx_object_h~get_children( ).
    ENDIF.

    LOOP AT elementos ASSIGNING FIELD-SYMBOL(<objeto>).
      MOVE <objeto> ?TO l_ele.
      MOVE l_ele->/vcxi/if_ckx_object~get_id( ) TO l_id.

      string =  |Elemento: { l_id }|. APPEND string TO traza.

      IF l_id = id.
        string =  |¡Se encuentra!|. APPEND string TO traza.
        element = l_ele.
        RETURN.
      ENDIF.
    ENDLOOP.

    string =  |¡No se ha encontrado ID { id }|. APPEND string TO traza.

* No ha encontrado valor
    IF NOT navegar_a_hijos IS INITIAL.
      SPLIT navegar_a_hijos AT ',' INTO DATA(hijo) DATA(resto).
      LOOP AT elementos ASSIGNING <objeto>.
        MOVE <objeto> ?TO l_ele.
        MOVE l_ele->/vcxi/if_ckx_object~get_id( ) TO l_id.
        IF hijo CS '*'.
          DATA(r_hijo) = VALUE rstt_t_range_string( ( option = 'CP' sign = 'I' low = hijo ) ).
        ELSE.
          r_hijo = VALUE rstt_t_range_string( ( option = 'EQ' sign = 'I' low = hijo ) ).
        ENDIF.

        IF l_id IN r_hijo.
          string =  |¡Se encuentra hijo { hijo }|. APPEND string TO traza.
          element = find_by_cuobj_id( EXPORTING padre = l_ele
                                                navegar_a_hijos = resto
                                                id = id
                                      IMPORTING message = message
                                       CHANGING traza = traza ).
          IF NOT element IS INITIAL.
            RETURN.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.
  METHOD get_caracteristicas.
    DATA: car   TYPE zsel_car,
          cabn  TYPE cabn,
          l_p16 TYPE cha_class_data-sollwert,
          l_c16 TYPE cha_class_view-sollwert.

    DATA(i_conf) = get_configuration( cuobj ).

    LOOP AT i_conf ASSIGNING FIELD-SYMBOL(<conf>).
      LOOP AT <conf>-values ASSIGNING FIELD-SYMBOL(<car>).
        CLEAR car.
        MOVE-CORRESPONDING <car> TO car.
        car-charact = o_cache->get( tabla = 'ATINN_EXT' clave = <car>-atinn ).

        car-charact = o_cache->get( tabla = 'ATINN_EXT' clave = <car>-atinn ).
        o_cache->get_cache_mem( EXPORTING tabla = 'CABN' clave = <car>-atinn
                               IMPORTING valor = cabn-atfor valor2 = cabn-msehi ).
        IF o_cache->enc IS INITIAL.
          SELECT atfor, msehi
            FROM cabn
            WHERE atinn = @<car>-atinn
              AND lkenz = ''
            ORDER BY PRIMARY KEY
            INTO (@cabn-atfor, @cabn-msehi)
            UP TO 1 ROWS.
          ENDSELECT.
          o_cache->set_cache_mem( tabla = 'CABN' clave = <car>-atinn   valor = cabn-atfor valor2 = cabn-msehi ).
        ENDIF.

        CASE cabn-atfor.
          WHEN 'CHAR'.
            car-tipo_car = 'C'.
            car-value    = <car>-atwrt.
          WHEN 'DATS'.
            car-tipo_car = 'D'.
            CALL FUNCTION 'CTCV_CONVERT_FLOAT_TO_DATE'
              EXPORTING
                float = <car>-atflv
              IMPORTING
                date  = car-value.
          WHEN OTHERS.
            IF NOT <car>-atwrt IS INITIAL.
              car-value = <car>-atwrt.
            ELSE.
              car-tipo_car  = 'F'.
              car-value_num = <car>-atflv.

              l_p16 = <car>-atflv.
              CALL FUNCTION 'QSS0_FLTP_TO_CHAR_CONVERSION'
                EXPORTING
                  i_number_of_digits = 3
                  i_fltp_value       = l_p16
                IMPORTING
                  e_char_field       = l_c16.

              car-value = condense( l_c16 ).
              IF NOT <car>-atflb IS INITIAL.
                car-value_num_to = <car>-atflb.
                WRITE <car>-atflb TO car-value_to.
                l_p16 = <car>-atflb.
                CALL FUNCTION 'QSS0_FLTP_TO_CHAR_CONVERSION'
                  EXPORTING
                    i_number_of_digits = 3
                    i_fltp_value       = l_p16
                  IMPORTING
                    e_char_field       = l_c16.
                car-value_to = condense( l_c16 ).
              ENDIF.
            ENDIF.
        ENDCASE.
        APPEND car TO caract.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.
  METHOD get_configuration.
    CLEAR: message, configuration.

    CALL FUNCTION 'CUCB_GET_CONFIGURATION'
      EXPORTING
        instance                     = cuobj
      IMPORTING
        configuration                = configuration
      EXCEPTIONS
        invalid_input                = 1
        invalid_instance             = 2
        instance_is_a_classification = 3
        OTHERS                       = 4.
    IF sy-subrc <> 0.
      message = `Error recuperando configuración`.
    ENDIF.
  ENDMETHOD.
  METHOD get_datos_ve.
*Obtener el GUID de la instancia del VC a través del objeto de configuración (CUOBJ)
*"----------------------------------------------------------------------

    DATA lf_gvcin TYPE /vcxi/vkcr_gvcin.
*instanciar el objeto smartvc a través del guid
*"----------------------------------------------------------------------
    DATA lr_svc   TYPE REF TO /vcxi/cl_vksra_svc.
*Establecer el elemento SmartVC deseado como punto de partida para el Modelo de Extracción
*"----------------------------------------------------------------------
    DATA: lr_object TYPE REF TO /vcxi/if_ckx_object,
          lr_svcel  TYPE REF TO /vcxi/cl_vksra_svc_element.
    DATA lr_valex TYPE REF TO data.

    FIELD-SYMBOLS <datos> TYPE any.

    CLEAR: datos, message.

*** Levantar GUID de la instancia VC
    IF instancia IS INITIAL.
      TRY.
          lf_gvcin = /vcxi/cl_vkcr_gateway=>get_gvcin_by_cuobj( if_cuobj = cuobj ).
        CATCH /vcxi/cx_ckx INTO DATA(o_ckx).
          message = |Error recuperando instancia { o_ckx->get_text( ) }|.
          RETURN.
      ENDTRY.
    ELSE.
      lf_gvcin = instancia.
    ENDIF.

*** Obtenemos instancia del SmartVC API
    TRY.
        lr_svc = /vcxi/cl_vksra_svc=>get_instance( if_gvcin = lf_gvcin ).
      CATCH /vcxi/cx_ckx INTO o_ckx.
        message = |Error recuperando instancia { o_ckx->get_text( ) }|.
        RETURN.
    ENDTRY.

*** Buscar elementos con ID SmartVC deseado
    TRY.
        DATA(lt_svcel) = lr_svc->get_svc_elements( if_id    = id
                                             if_inuse = abap_true ).
      CATCH /vcxi/cx_ckx INTO o_ckx.
        message = |Error recuperando SVC Element { o_ckx->get_text( ) }|.
        RETURN.
    ENDTRY.

*** Usar primer record (en case de múltiples se utiliza un LOOP)
    READ TABLE lt_svcel INTO lr_object INDEX 1.
    IF sy-subrc <> 0.
      message = |No se ha podido posicionar en elemento { id }|.
      RETURN.
    ENDIF.

*** Convertimos el tipo genérico al elemento SmartVC
    TRY.
        lr_svcel ?= lr_object.
      CATCH cx_sy_move_cast_error.
        CLEAR lr_svcel.
        message = 'Error convirtiendo a elemento SmartVC'.
        RETURN.
    ENDTRY.

    TRY.
*** Ejecutar la Extracción de Valores (Datos)
        lr_valex = lr_svc->get_valex( if_ivemo       = value_extractor
                                      ir_svc_element = lr_svcel ).
        IF lr_valex IS BOUND.

*** Movemos la referencia(apuntador) a un tipo definido
          ASSIGN lr_valex->* TO <datos>.
          IF sy-subrc = 0.
            datos = <datos>.
          ENDIF.
        ENDIF.

      CATCH /vcxi/cx_ckx INTO DATA(lr_cx_ckx).
        message = lr_cx_ckx->get_text( ).
    ENDTRY.
  ENDMETHOD.
  METHOD get_valores_cuobj.
    CLEAR: i_values, message.

    TRY.
        DATA(lf_gvcin) = /vcxi/cl_vkcr_gateway=>get_gvcin_by_cuobj( if_cuobj = cuobj ).
        " TODO: variable is assigned but never used (ABAP cleaner)
        DATA(rr_svc) = /vcxi/cl_vksra_svc=>get_instance( if_gvcin = lf_gvcin ).
      CATCH /vcxi/cx_ckx INTO DATA(o_ckx).
        message = o_ckx->get_text( ).
        RETURN.
    ENDTRY.

    IF lf_gvcin IS NOT INITIAL.
      TRY.
          i_values = /vcxi/cl_vkcr_gateway=>get_value_all( if_gvcin = lf_gvcin ).
        CATCH /vcxi/cx_ckx INTO o_ckx.
          message = o_ckx->get_text( ).
          RETURN.
      ENDTRY.
    ENDIF.
  ENDMETHOD.
  METHOD visualizar_cuobj.
    DATA l_incl2 TYPE incl_bild.

    CALL FUNCTION 'VC_I_DISPLAY_CONFIGURATION'
      EXPORTING
        instance           = cuobj
        include_screen     = l_incl2
      EXCEPTIONS
        instance_not_found = 1
        internal_error     = 2
        OTHERS             = 3.
    IF sy-subrc <> 0.
      MESSAGE 'Error visualizando configurador' TYPE 'I'.
    ENDIF.
  ENDMETHOD.
