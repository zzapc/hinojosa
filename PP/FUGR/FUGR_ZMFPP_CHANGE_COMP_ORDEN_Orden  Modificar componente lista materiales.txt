FUNCTION ZMFPP_CHANGE_COMP_ORDEN.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_AUFNR) TYPE  AUFNR
*"     REFERENCE(IS_COMP_KEY) TYPE  COXT_S_ORD_COMP_KEY
*"     REFERENCE(IS_COMP_DATA) TYPE  ZSTPP_COMP_ORDEN
*"  TABLES
*"      ET_RETURN STRUCTURE  BAPIRET2
*"----------------------------------------------------------------------

  DATA: lti_return      TYPE coxt_t_bapireturn,
        lti_aufnr_key   TYPE TABLE OF ord_pre.

  DATA: ls_aufnr_key    TYPE ord_pre,
        ls_canti        TYPE coxt_s_quantity,
        ls_cantix       TYPE coxt_s_quantityx,
        ls_material     TYPE coxt_material,
        ls_materialx    TYPE coxt_materialx,
        ls_return       TYPE coxt_bapireturn,
        ls_bapret       TYPE bapiret2,
        ls_resb         TYPE resb,
        ls_resbd        TYPE resbd.

  DATA: ls_order_key    TYPE coxt_ord_key,
        ls_conf_canti   TYPE coxt_s_quantity,
        ls_conf_cantix  TYPE coxt_s_quantityx,
        ls_almacen      TYPE coxt_s_storage_location,
        ls_almacenx     TYPE coxt_s_storage_locationx,
        ls_lote         TYPE coxt_batch,
        ls_lotex        TYPE coxt_batchx,
        ls_conf_obj     TYPE coxt_config_object,
        ls_conf_objx    TYPE coxt_config_objectx.

  DATA: lv_aplzl        TYPE co_aplzl,
        lv_error        TYPE c,
        lv_change       TYPE flag.


* Inicializamos
  CLEAR: lv_change, et_return.
  REFRESH et_return.

* Sacamos los datos del componente en la base de datos
  SELECT SINGLE * INTO ls_resb
      FROM  resb
      WHERE rsnum = is_comp_key-rsnum
      AND   rspos = is_comp_key-rspos
      AND   rsart = is_comp_key-rsart.
  CHECK sy-subrc = 0.

* Si ha modificado la cantidad de la reserva --> Cargamos las
* estructuras de cantidad
***  CLEAR: ls_canti, ls_cantix.
***  IF is_comp_data-menge <> ls_resb-bdmng.
***    ls_canti-quantity   = is_comp_data-menge.
***    ls_canti-uom        = ls_resb-meins.
***    ls_cantix-quantity  = 'X'.
***    ls_cantix-uom       = 'X'.
****   Marcamos la modificación
***    lv_change = 'X'.
***  ENDIF.

* Si se ha modificado el material --> Cargamos las estructuras del
* material
  CLEAR: ls_material, ls_materialx.
  ls_material   = is_comp_data-matnr.
  IF is_comp_data-matnr <> ls_resb-matnr.
    ls_materialx  = 'X'.
*   Marcamos la modificación
    lv_change = 'X'.
  ENDIF.

* Si se ha modificado el lote --> Cargamos las estructuras del lote
***  IF is_comp_data-charg <> ls_resb-charg.
***    ls_lote   = is_comp_data-charg.
***    ls_lotex  = 'X'.
****   Marcamos la modificación
***    lv_change = 'X'.
***  ENDIF.

* Chequeamos que ha habido algún cambio en el componente
  CHECK lv_change = 'X'.

* Datos del centro/almacén (son obligatorios para la función)
  CLEAR ls_almacen.
  ls_almacen-werks = ls_resb-werks.
  ls_almacen-lgort = ls_resb-lgort.


* Inicializamos las tablas internas para la función
  CALL FUNCTION 'CO_XT_ORDER_INITIALIZE'.

* Llamamos a la función que modifica el componente
  ls_order_key = i_aufnr.
  CALL FUNCTION 'CO_XT_COMPONENT_CHANGE'
    EXPORTING
      is_order_key               = ls_order_key
      is_order_component_key     = is_comp_key
      is_requirement_quantity    = ls_canti
      is_requirement_quantityx   = ls_cantix
      is_confirmed_quantity      = ls_conf_canti
      is_confirmed_quantityx     = ls_conf_cantix
      i_material                 = ls_material
      i_materialx                = ls_materialx
      is_storage_location        = ls_almacen
      is_storage_locationx       = ls_almacenx
      i_batch                    = ls_lote
      i_batchx                   = ls_lotex
      i_mi_configuration_object  = ls_conf_obj
      i_mi_configuration_objectx = ls_conf_objx
    IMPORTING
      es_bapireturn              = ls_return
      e_error_occurred           = lv_error.

* Añadimos mensajes al log
  IF ls_return-type = 'E'.
    MOVE-CORRESPONDING ls_return TO ls_bapret.
    APPEND ls_bapret TO et_return.
    EXIT.
  ENDIF.

* Preparamos el COMMIT
  CALL FUNCTION 'CO_XT_ORDER_PREPARE_COMMIT'.

* Ejecutamos el COMMIT
  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.

* Si todo va bien añadimos un mensaje de éxito al log
  CLEAR ls_bapret.
  ls_bapret-type    = 'S'.
  ls_bapret-id      = 'ZPP'.
  ls_bapret-number  = '082'.
  APPEND ls_bapret TO et_return.

ENDFUNCTION.
