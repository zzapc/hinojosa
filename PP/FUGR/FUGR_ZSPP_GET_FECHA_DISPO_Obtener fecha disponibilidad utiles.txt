FUNCTION zspp_get_fecha_dispo.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_MATNR) TYPE  MATNR
*"  EXPORTING
*"     REFERENCE(O_FDISPO) TYPE  DATUM
*"     REFERENCE(O_HDISPO) TYPE  UZEIT
*"----------------------------------------------------------------------
  CLEAR: o_fdispo, o_hdispo.
  "MODIFICACIONES 17/10/2023
*Envío FECHA LIBERACIÓN STOPCODES BLOQUEO:
*Fecha de pedido/solicitud si esta es a futuro.
*Si no tiene, enviar fecha actual + días en tabla TVARVC (ZOMP_DISPO_UTILES).
  "FMODIFICACIONES 17/10/2023

  "Buscamos fecha a futuro en SolP SIN pedido
*  SELECT MAX( lfdat ) INTO @DATA(lv_fecha) FROM eban
*    WHERE matnr EQ @i_matnr
*    AND loekz EQ @space
*    AND lfdat > @sy-datum
*    AND NOT EXISTS ( SELECT ebeln FROM ekpo WHERE bnfpo EQ eban~bnfpo AND banfn EQ eban~banfn AND loekz EQ @space ).
*  IF sy-subrc = 0 AND lv_fecha IS NOT INITIAL.
*    o_fdispo = lv_fecha.
*    o_hdispo = '180000'.
*  ELSE.
  SELECT t1~ebeln, t2~ebelp, t4~eindt "t3~budat_mkpf, t3~mblnr, t3~zeile
    INTO TABLE @DATA(it_ped)
        FROM ekko AS t1 INNER JOIN ekpo AS t2 ON t2~ebeln EQ t1~ebeln
        INNER JOIN eket AS t4 ON t4~ebeln EQ t2~ebeln AND t4~ebelp EQ t2~ebelp AND t4~etenr EQ 1
        WHERE t2~matnr EQ @i_matnr
        AND t4~eindt > @sy-datum
        "pediod que no tenga entrada de mercancías ya hecha, ya que en ese caso debe haberse liberado ya
        AND NOT EXISTS ( SELECT * FROM mseg AS t3 WHERE t3~ebeln EQ t2~ebeln AND t3~ebelp EQ t2~ebelp AND t3~bwart = '101' ).
  IF sy-subrc = 0.
    SORT it_ped BY eindt DESCENDING.
    o_fdispo = it_ped[ 1 ]-eindt.
    o_hdispo = '180000'.
  ELSE.
    SELECT SINGLE low INTO @DATA(dias) FROM tvarvc WHERE name EQ 'ZOMP_DISPO_UTILES'.
    IF sy-subrc = 0.
      o_fdispo = sy-datum + dias.
      o_hdispo = '180000'.
    ELSE.
      o_fdispo = '99991231'.
      o_hdispo = '180000'.
    ENDIF.
  ENDIF.
*  ENDIF.

*  "Buscamos si tiene una SolP abierta sin pedido asociada, si tiene, esa será la fecha de disponibilidad
*  SELECT MAX( lfdat ) INTO @DATA(lv_fecha) FROM eban
*    WHERE matnr EQ @i_matnr
*    AND loekz EQ @space
*    AND NOT EXISTS ( SELECT ebeln FROM ekpo WHERE bnfpo EQ eban~bnfpo AND banfn EQ eban~banfn AND loekz EQ @space ).
*  IF lv_fecha IS NOT INITIAL.
*    "Si tiene una SolP viva, la fecha será la de la SolP + 1 día
*    o_fdispo = lv_fecha + 1.
*    o_hdispo = '180000'.
*  ELSE.
*    "obtener pedido más reciente, si tiene EM será la fecha de la EM, si no tiene será la fecha de la
*    "EKET. Si no hay pedido, buscamos si hay SolP y será la fecha de la SolP. Si no hay ningún
*    "objeto, pasamos fecha = fecha del día + 1.
*    SELECT t1~ebeln, t2~ebelp, t4~eindt, t3~budat_mkpf, t3~mblnr, t3~zeile INTO TABLE @DATA(it_ped)
*          FROM ekko AS t1 INNER JOIN ekpo AS t2 ON t2~ebeln EQ t1~ebeln
*          INNER JOIN eket AS t4 ON t4~ebeln EQ t2~ebeln AND t4~ebelp EQ t2~ebelp AND t4~etenr EQ 1
*          LEFT OUTER JOIN mseg AS t3 ON t3~ebeln EQ t2~ebeln AND t3~ebelp EQ t2~ebelp AND t3~bwart eq '101'
*          WHERE t2~matnr EQ @i_matnr.
**          AND bwart EQ '101'.
**          AND NOT EXISTS ( SELECT mblnr FROM mseg WHERE t3~gjahr EQ mseg~sjahr
**                             AND t3~mblnr EQ mseg~smbln
**                             AND t3~zeile EQ mseg~smblp ).
*    IF sy-subrc = 0.
*      DATA(it_ped_aux) = it_ped[].
*      DELETE it_ped_aux[] WHERE mblnr IS INITIAL.
*      IF it_ped_aux[] IS NOT INITIAL.
*        SELECT ebeln, ebelp, smbln, smblp INTO TABLE @DATA(it_ped_anul)
*          FROM mseg
*          FOR ALL ENTRIES IN @it_ped_aux
*          WHERE smbln EQ @it_ped_aux-mblnr
*          AND smblp EQ @it_ped_aux-zeile.
*
*        LOOP AT it_ped_anul INTO DATA(wa_anul).
*          READ TABLE it_ped WITH KEY ebeln = wa_anul-ebeln ebelp = wa_anul-ebelp mblnr = wa_anul-smbln zeile = wa_anul-smblp TRANSPORTING NO FIELDS.
*          IF sy-subrc = 0.
*            DELETE it_ped INDEX sy-tabix.
*          ENDIF.
*        ENDLOOP.
*      ENDIF.
*
*    ENDIF.
*
**    IF sy-subrc <> 0.
*    IF it_ped[] IS INITIAL.
*      "Si no tiene pedido, ni SOLP ni nada, y su Status es disponible, buscamos la característica HP_DAAVL la fecha de disponibilidad será la del día
*      DATA lv_obj TYPE inob-cuobj.
*      DATA it_config TYPE TABLE OF conf_out.
*
*      SELECT SINGLE cuobj INTO @lv_obj
*            FROM mara INNER JOIN marc ON mara~matnr EQ marc~matnr
*            WHERE mara~matnr EQ @i_matnr.
*
*      REFRESH it_config.
*
*      CALL FUNCTION 'VC_I_GET_CONFIGURATION'
*        EXPORTING
*          instance            = lv_obj
**         BUSINESS_OBJECT     =
**         LANGUAGE            = SY-LANGU
**         PRINT_SALES         = ' '
**         PRINT_PURCHASE      = ' '
**         PRINT_ENGINEERING   = ' '
**         IDOC_MODE           = ' '
**         ANW_SICHT           = ' '
**         EXCL_IND            = ' '
**         IV_INVALID_POSSIBLE = ' '
**         IV_MAX_MASSPROCESSING       = 0
**         IV_EXPLICIT_ORGAREA = ' '
**         IV_NO_DESCRIPTION   = ' '
**         IV_USER             = ' '
**         IV_NO_VALUE_CHECK   = 'X'
**         IV_NO_DIALOG        = ' '
**         IV_DISPLAY_WARNING  = ' '
*        TABLES
*          configuration       = it_config
**         CONFIGURATION_IDOC  =
*        EXCEPTIONS
*          instance_not_found  = 1
*          internal_error      = 2
*          no_class_allocation = 3
*          instance_not_valid  = 4
*          OTHERS              = 5.
*      IF sy-subrc <> 0.
*      ENDIF.
*
*      READ TABLE it_config WITH KEY atnam = 'HP_DAAVL' ASSIGNING FIELD-SYMBOL(<fs_dispo>).
*      IF sy-subrc <> 0.
*        "Está disponible, si hay stock fecha de disponibilidad no se modifica de la obtenida en la select,
*        "por defecto tendrá fecha de disponibilidad la del día
*        SELECT SUM( labst ) INTO @DATA(lv_stock) FROM mard WHERE matnr EQ @i_matnr.
*        IF lv_stock <= 0.
*          "No hay stock, por tanto no está disponible
*          SELECT SINGLE low INTO @DATA(dias) FROM tvarvc WHERE name EQ 'ZOMP_DISPO_UTILES'.
*          IF sy-subrc = 0.
*            o_fdispo = sy-datum + dias.
*            o_hdispo = '180000'.
*          ELSE.
*            o_fdispo = '99991231'.
*            o_hdispo = '180000'.
*          ENDIF.
*        ELSE.
*          "Si tiene stock y no tiene fechas, será la fecha del día
*          o_fdispo = sy-datum.
*          o_hdispo = '180000'.
*        ENDIF.
*
*      ELSE.
*        o_fdispo = <fs_dispo>-atwrt+6(4) && <fs_dispo>-atwrt+3(2) && <fs_dispo>-atwrt(2).
*        o_hdispo = '180000'.
*      ENDIF.
*
*    ELSE.
*      SORT it_ped BY eindt DESCENDING.
*      LOOP AT it_ped INTO DATA(wa_ped) WHERE budat_mkpf IS INITIAL OR budat_mkpf = space.
*        EXIT.
*      ENDLOOP.
*      IF sy-subrc = 0.
*        "Tiene un pedido pendiente por tanto la fecha dispo será la del pedido + 1 día
*        o_fdispo = wa_ped-eindt + 1.
*        o_hdispo = '180000'.
*      ELSE.
*        "Si no tiene pedidos pendientes de entrar será la de la última EM
*        SORT it_ped BY budat_mkpf DESCENDING.
*        READ TABLE it_ped INTO wa_ped INDEX 1.
*        o_fdispo = wa_ped-budat_mkpf.
*        o_hdispo = '180000'.
*      ENDIF.
*
*    ENDIF.
*  ENDIF.

ENDFUNCTION.
