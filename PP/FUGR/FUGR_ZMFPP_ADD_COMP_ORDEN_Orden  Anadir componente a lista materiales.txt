FUNCTION zmfpp_add_comp_orden.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_AUFNR) TYPE  AUFNR
*"     VALUE(I_VORNR) TYPE  VORNR
*"  TABLES
*"      IT_COMP STRUCTURE  ZSTPP_COMP_ORDEN
*"      ET_RETURN STRUCTURE  BAPIRET2 OPTIONAL
*"----------------------------------------------------------------------

  DATA: lti_return TYPE coxt_t_bapireturn.

  DATA: ls_comp   TYPE zstpp_comp_orden,
        ls_canti  TYPE coxt_s_quantity,
        ls_stloc  TYPE coxt_s_storage_location,
        ls_stlocx TYPE coxt_s_storage_locationx,
        ls_batch  TYPE coxt_batch,
        ls_batchx TYPE coxt_batchx,
        ls_return TYPE coxt_bapireturn,
        ls_bapret TYPE bapiret2,
        ls_resbd  TYPE resbd.

  DATA: lv_aplzl TYPE co_aplzl,
        lv_error TYPE c.

  TYPES: BEGIN OF ts_resb_bt.

  INCLUDE STRUCTURE resbb.
  TYPES:

    indold     LIKE sy-tabix,

    no_req_upd LIKE sy-datar,

    END OF ts_resb_bt.

  TYPES tt_resb_bt TYPE TABLE OF ts_resb_bt.

  FIELD-SYMBOLS <lt_resb_bt> TYPE tt_resb_bt.

  FIELD-SYMBOLS <ls_resb_bt> TYPE ts_resb_bt.

  DATA lf_numc TYPE numc4.

* Inicializamos
  CLEAR et_return.
  REFRESH et_return.

* Sacamos el contador de la operación en la hoja de ruta
  SELECT SINGLE a~aplzl INTO lv_aplzl
      FROM  afvc AS a INNER JOIN afko AS b
                 ON a~aufpl = b~aufpl
      WHERE a~vornr = i_vornr
      AND   b~aufnr = i_aufnr.
  CHECK sy-subrc = 0.

* Recorremos los componentes añadiendolos a la orden
  LOOP AT it_comp INTO ls_comp.

*   Inicializamos las variables
    CLEAR: ls_return, lv_error, ls_resbd.
    ls_canti-quantity = ls_comp-menge.
    ls_canti-uom      = ls_comp-meins.
    ls_stloc-werks    = ls_comp-werks.
    ls_stloc-lgort    = ls_comp-lgort.
    ls_stlocx-werks   = 'X'.
    ls_stlocx-lgort   = 'X'.

*   Lote
    IF ls_comp-charg IS NOT INITIAL.
      ls_batch  = ls_comp-charg.
      ls_batchx = 'X'.
    ENDIF.

*   Inicializamos
    CALL FUNCTION 'CO_XT_ORDER_INITIALIZE'.

*   Llamamos a la función que añade el componente
    CALL FUNCTION 'CO_XT_COMPONENT_ADD'
      EXPORTING
        is_order_key         = i_aufnr
        i_material           = ls_comp-matnr
        is_requ_quan         = ls_canti
        i_operation          = lv_aplzl
        is_storage_location  = ls_stloc
        is_storage_locationx = ls_stlocx
        i_batch              = ls_batch
        i_batchx             = ls_batchx
        i_postp              = ls_comp-postp
        i_posno              = ls_comp-posno
      IMPORTING
        es_bapireturn        = ls_return
        e_error_occurred     = lv_error
        es_resbd_created     = ls_resbd.



*   Añadimos mensajes al log
    IF ls_return-type = 'E'.
      MOVE-CORRESPONDING ls_return TO ls_bapret.
      APPEND ls_bapret TO et_return.
      CONTINUE.
    ENDIF.

* Indicar nº posición en lista de materiales:
    ASSIGN ('(SAPLCOBC)RESB_BT[]') TO <lt_resb_bt>.

    LOOP AT <lt_resb_bt> ASSIGNING <ls_resb_bt>.
      lf_numc = sy-tabix * 10.
      <ls_resb_bt>-posnr = lf_numc.
    ENDLOOP.

*   Preparamos el COMMIT
    CALL FUNCTION 'CO_XT_ORDER_PREPARE_COMMIT'.

*   Ejecutamos el COMMIT
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

  ENDLOOP.

* Chequeamos que todo es correcto
  CHECK et_return[] IS INITIAL.

* Si todo va bien añadimos un mensaje de éxito al log
  IF et_return[] IS INITIAL.
    CLEAR ls_bapret.
    ls_bapret-type    = 'S'.
    ls_bapret-id      = 'ZPP'.
    ls_bapret-number  = '020'.
    APPEND ls_bapret TO et_return.
  ENDIF.

ENDFUNCTION.
