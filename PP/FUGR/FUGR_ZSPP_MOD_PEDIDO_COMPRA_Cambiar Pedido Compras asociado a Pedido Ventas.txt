FUNCTION zspp_mod_pedido_compra.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_VBELN) TYPE  VBELN_VL
*"     VALUE(I_POSNR) TYPE  POSNR_VL
*"     VALUE(I_EDATU) TYPE  DATUM OPTIONAL
*"     VALUE(I_MENGE) TYPE  MENGE_D OPTIONAL
*"----------------------------------------------------------------------
  DATA: purchaseorder  TYPE  bapimepoheader-po_number,
        lt_return      TYPE  bapiret2_t,
        lt_return_all  TYPE  bapiret2_t,
        lt_poitem      TYPE  TABLE OF bapimepoitem,
        lt_poitemx     TYPE  TABLE OF bapimepoitemx,
        lt_poschedule  TYPE  TABLE OF  bapimeposchedule,
        lt_poschedulex TYPE  TABLE OF  bapimeposchedulx.

  SELECT ebeln, ebelp
    FROM ekkn
    INTO TABLE @DATA(lt_ekkn)
    WHERE vbeln = @i_vbeln
    AND vbelp = @i_posnr
    ORDER BY ebeln, ebelp.  " JME 18.07.2024 ATC
  IF sy-subrc = 0.
    LOOP AT lt_ekkn INTO DATA(ls_ekkn) .
      CLEAR: lt_poitem, lt_poitemx, lt_poschedule, lt_poschedulex, lt_return.
      APPEND INITIAL LINE TO lt_poitem ASSIGNING FIELD-SYMBOL(<ls_poitem>).
      <ls_poitem>-po_item = ls_ekkn-ebelp.

      IF i_edatu IS NOT INITIAL.
        <ls_poitem>-quantity = i_menge.
      ELSE.
        <ls_poitem>-no_more_gr = 'X'.
      ENDIF.

      APPEND INITIAL LINE TO lt_poitemx ASSIGNING FIELD-SYMBOL(<ls_poitemx>).
      <ls_poitemx>-po_item = ls_ekkn-ebelp.
      IF i_edatu IS NOT INITIAL.
        <ls_poitemx>-quantity = 'X'.
      ELSE.
        <ls_poitemx>-no_more_gr = 'X'.
      ENDIF.

      IF i_edatu IS NOT INITIAL.
        APPEND INITIAL LINE TO lt_poschedule ASSIGNING FIELD-SYMBOL(<ls_poschedule>).
        <ls_poschedule>-po_item = ls_ekkn-ebelp.
        <ls_poschedule>-delivery_date = i_edatu.
        <ls_poitemx>-quantity = i_menge.

        APPEND INITIAL LINE TO lt_poschedulex ASSIGNING FIELD-SYMBOL(<ls_poschedulex>).
        <ls_poschedulex>-po_item = ls_ekkn-ebelp.
        <ls_poschedulex>-delivery_date = 'X'.
        <ls_poschedulex>-quantity = 'X'.
      ENDIF.

      AT END OF ebeln.
        purchaseorder = ls_ekkn-ebeln.
        CALL FUNCTION 'BAPI_PO_CHANGE'
          EXPORTING
            purchaseorder = purchaseorder
          TABLES
            return        = lt_return
            poitem        = lt_poitem
            poitemx       = lt_poitemx.

        APPEND LINES OF lt_return TO lt_return_all.
      ENDAT.
    ENDLOOP.
  ENDIF.

  "Buardamos el log
  DATA(lo_log) =  NEW zcl_seidor_guardar_log( ).
  lo_log->refresh( ).

  LOOP AT lt_return_all INTO DATA(ls_return).
    lo_log->guardar_mensaje(
      EXPORTING
        i_type       = ls_return-type
        i_id         = ls_return-id
        i_number     = ls_return-number
        i_message_v1 = ls_return-message_v1
        i_message_v2 = ls_return-message_v2
        i_message_v3 = ls_return-message_v3
        i_message_v4 = ls_return-message_v4
        ).
  ENDLOOP.

  DATA: objeto    TYPE balobj_d,
        subobjeto	TYPE balsubobj,
        extnumber	TYPE balnrext.

  extnumber = i_vbeln && '/' && i_posnr.

  lo_log->guardar_log(
    EXPORTING
    objeto    = 'ZPP'    " Log aplicación: Nombre objeto (sigla de aplicación)
    subobjeto = 'ZRECHAZO'    " Log aplicación: Objeto inferior
    extnumber =  extnumber  " Log aplicación: Identificación externa
    IMPORTING
    lognumber = DATA(lv_lognum)    " Número de LOG
    ).

ENDFUNCTION.
