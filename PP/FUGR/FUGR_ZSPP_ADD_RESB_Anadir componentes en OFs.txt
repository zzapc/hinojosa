FUNCTION zspp_add_resb.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_AUFNR) TYPE  AUFNR
*"     VALUE(I_MATNR) TYPE  MATNR
*"     VALUE(I_WERKS) TYPE  WERKS_D
*"     VALUE(I_LGORT) TYPE  LGORT_D
*"     VALUE(I_MENGE) TYPE  MENGE_D
*"     VALUE(I_MEINS) TYPE  MEINS
*"     VALUE(I_CHARG) TYPE  CHARG_D
*"     VALUE(I_VORNR) TYPE  VORNR
*"     VALUE(I_CONCEPTO_CLAS) TYPE  SORTP
*"     VALUE(I_CINUMBER) TYPE  CHAR20 OPTIONAL
*"  EXPORTING
*"     VALUE(O_RETURN) TYPE  BAPIRET2_TAB
*"----------------------------------------------------------------------
  DATA lv_desbloqueo TYPE xflag.

  CLEAR lv_desbloqueo.
  DO 10 TIMES.
    CALL FUNCTION 'ZMFPP_BLOQUEO_ORDEN'
      EXPORTING
        aufnr      = i_aufnr
      IMPORTING
        desbloqueo = lv_desbloqueo.

    IF lv_desbloqueo IS NOT INITIAL.
      EXIT.
    ENDIF.
  ENDDO.

  IF lv_desbloqueo IS INITIAL.
    APPEND INITIAL LINE TO o_return ASSIGNING FIELD-SYMBOL(<erro>).
    <erro>-type = 'E'.
    <erro>-id = '00'.
    <erro>-number = '398'.
    <erro>-message_v1 = 'Orden'.
    <erro>-message_v2 = i_aufnr.
    <erro>-message_v3 = 'está bloq por usuario.'.
*    <erro>-message_v4 = 'Imposible añadir componente' && i_matnr.                       " JME 18.07.2024 ATC
    <erro>-message_v4 = 'Imposible añadir componente' && |{ i_matnr  ALPHA = OUT }|.     " JME 18.07.2024 ATC
    MESSAGE ID <erro>-id TYPE <erro>-type NUMBER <erro>-number
    WITH <erro>-message_v1  <erro>-message_v2 <erro>-message_v3 <erro>-message_v4
    INTO <erro>-message.
    EXIT.
  ENDIF.

  DATA : is_order_key            TYPE  coxt_ord_key,
         is_requirement_quantity TYPE  coxt_s_quantity,
         i_material              TYPE  coxt_material,
         is_storage_location     TYPE  coxt_s_storage_location,
         is_storage_locationx    TYPE  coxt_s_storage_locationx,
         i_batch                 TYPE  coxt_batch,
         i_batchx                TYPE  coxt_batchx,
         i_postp                 TYPE  resb-postp,
         i_posno                 TYPE cif_r3res-positionno,
         i_operation             TYPE afvc-aplzl,
         i_cant_conf             TYPE coxt_s_quantity,
         i_cant_confx            TYPE coxt_s_quantityx.

  is_order_key = i_aufnr.
  i_material = i_matnr.
  i_cant_conf-quantity = is_requirement_quantity-quantity = i_menge.
  i_cant_conf-uom = is_requirement_quantity-uom = i_meins.
  is_storage_location-werks = i_werks.
  is_storage_location-lgort = i_lgort.
  is_storage_locationx-werks = 'X'.
  is_storage_locationx-lgort = 'X'.

  i_postp = 'L'.

  CALL FUNCTION 'DIALOG_SET_NO_DIALOG'.

  DATA lv_aplzl TYPE co_aplzl.
  SELECT SINGLE aplzl
  FROM afko AS t1 INNER JOIN afvc AS t2
  ON t1~aufpl EQ t2~aufpl
  INTO lv_aplzl
  WHERE vornr EQ i_vornr AND aufnr EQ i_aufnr AND loekz EQ space.
  i_operation = lv_aplzl.
  i_batch = i_charg.
  i_cant_confx = i_batchx = 'X'.

  DATA ret TYPE  coxt_bapireturn.
  CLEAR ret.

  SELECT MAX( posnr ) INTO @DATA(lv_posnr)
*    FROM stpo AS t1 INNER JOIN afko AS t2 ON t1~stlnr EQ t2~stlnr
    FROM resb
    WHERE aufnr EQ @i_aufnr.

*  lv_posnr = lv_posnr + 10. "APC20250219 Se estába sumando dos veces el 10
*  i_posno = i_posno + 10.
CALL FUNCTION 'DIALOG_SET_NO_DIALOG'.
  CALL FUNCTION 'CO_XT_COMPONENT_ADD'
    EXPORTING
      is_order_key         = is_order_key
      i_material           = i_material
      is_requ_quan         = is_requirement_quantity
      is_conf_quan         = i_cant_conf
      is_conf_quanx        = i_cant_confx
      i_operation          = i_operation
*     I_SEQUENCE           =
      is_storage_location  = is_storage_location
      is_storage_locationx = is_storage_locationx
      i_batch              = i_batch
      i_batchx             = i_batchx
*     I_CUOBJ              =
*     I_CUOBJX             =
*     I_BATCH_SEL_CUOBJ    =
*     I_BATCH_SEL_CUOBJX   =
      i_postp              = i_postp
*     I_KZKUP              =
*     I_KZKUPX             =
*     I_XFEHL              =
*     I_XFEHLX             =
*     I_SOBKZ              =
*     I_SOBKZX             =
*     I_KDAUF              =
*     I_KDAUFX             =
*     I_KDPOS              =
*     I_KDPOSX             =
*     I_PSPEL              =
*     I_PSPELX             =
      i_posno              = i_posno
*     I_KZAUS              =
*     I_KZAUSX             =
*     I_NAFKZ              =
*     I_NAFKZX             =
*     I_NOMAT              =
*     I_NOMATX             =
*     I_NFUML              =
*     I_NFUMLX             =
*     I_NFPKZ              =
*     I_NFPKZX             =
*     I_NOMNG              =
*     I_NOMNGX             =
    IMPORTING
*     ES_AFPO              =
*     ES_ISSUEDATE         =
      es_bapireturn        = ret
*     E_ERROR_OCCURRED     =
*     ES_RESBD_CREATED     =
* TABLES
*     RESBT_EXP            =
    .
  WAIT UP TO 1 SECONDS.
  APPEND INITIAL LINE TO o_return ASSIGNING FIELD-SYMBOL(<fs_ret>).
  MOVE-CORRESPONDING ret TO <fs_ret>.

  IF ret-type EQ 'A' OR ret-type EQ 'E' OR ret-type EQ 'X'.
    RETURN.
  ENDIF.
CALL FUNCTION 'DIALOG_SET_NO_DIALOG'.
  CALL FUNCTION 'CO_XT_ORDER_PREPARE_COMMIT'.
  WAIT UP TO 1 SECONDS.
  DATA resb TYPE TABLE OF resbdget.
  DATA lv_aufnr TYPE aufnr.
  lv_aufnr = i_aufnr.
  CALL FUNCTION 'DIALOG_SET_NO_DIALOG'.
  CALL FUNCTION 'CO_BC_RESBD_OF_ORDER_GET'
    EXPORTING
      aufnr_act      = lv_aufnr
      get_old        = ' '
      no_maktx       = 'X'
      no_statx       = 'X'
      check_deleted  = ' '
      no_read        = ' '
      check_vbkz_del = 'X'
      i_archive      = ' '
    TABLES
*     ARESB_EXP      =
      resbd_get      = resb.

  DATA lv_num TYPE sy-tabix.
  DATA wa_resb TYPE resbdget.
*  FIELD-SYMBOLS <fs_resb> TYPE resbdget.
*  DATA lv_indice_old TYPE sy-tabix.
  DATA lv_rspos TYPE rspos.
*  "Modificamos los valores de la línea original para ajustar las cantidades
*  READ TABLE resb WITH KEY posnr = i_posnr ASSIGNING <fs_resb>.
*  lv_indice_old = sy-tabix.
*  <fs_resb>-bdmng = <fs_resb>-bdmng - i_menge.
*  <fs_resb>-erfmg = <fs_resb>-erfmg - i_menge.
*  <fs_resb>-splkz = 1.
*  lv_rspos = <fs_resb>-rspos.
*  DATA resb_act TYPE resbd.
*  MOVE-CORRESPONDING <fs_resb> TO resb_act.
*
*  WAIT UP TO 1 SECONDS.
*  CALL FUNCTION 'CO_BT_RESB_UPDATE'
*    EXPORTING
*      resb_new  = resb_act
*      tabix_old = lv_indice_old
**     NO_DUM_UPD           = ' '
**     NO_REQ_PROCESS       = ' '
**     INS_MODE  = ' '
**     FLG_OCM   = ' '
**     I_RGEKZ_UPD          = ' '
**     IMPORTING
**     TABIX_NEW =
*    .

  DESCRIBE TABLE resb LINES lv_num.
  "La última línea será la que hemos añadido
  READ TABLE resb INTO wa_resb INDEX lv_num.
  IF sy-subrc = 0.
    "El matkl no lo trae correctamente, lo rescatamos
    SELECT SINGLE matkl FROM mara INTO wa_resb-matkl WHERE matnr = wa_resb-matnr.

    DATA resb_upd TYPE resbd.
    MOVE-CORRESPONDING wa_resb TO resb_upd.
    resb_upd-vornr = i_vornr.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = resb_upd-vornr
      IMPORTING
        output = resb_upd-vornr.

    resb_upd-sortf = i_concepto_clas.
    IF i_cinumber IS NOT INITIAL.
      resb_upd-potx1 = i_cinumber.
    ENDIF.
    resb_upd-posnr = lv_posnr + 10.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = resb_upd-posnr
      IMPORTING
        output = resb_upd-posnr.
    WAIT UP TO 1 SECONDS.
    CALL FUNCTION 'DIALOG_SET_NO_DIALOG'.
    CALL FUNCTION 'CO_BT_RESB_UPDATE'
      EXPORTING
        resb_new  = resb_upd
        tabix_old = lv_num
*       NO_DUM_UPD           = ' '
*       NO_REQ_PROCESS       = ' '
*       INS_MODE  = ' '
*       FLG_OCM   = ' '
*       I_RGEKZ_UPD          = ' '
*     IMPORTING
*       TABIX_NEW =
      .

  ENDIF.

  COMMIT WORK AND WAIT.

*  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*   EXPORTING
*     WAIT          =
*   IMPORTING
*     RETURN        =
  .
  WAIT UP TO 1 SECONDS.

ENDFUNCTION.
