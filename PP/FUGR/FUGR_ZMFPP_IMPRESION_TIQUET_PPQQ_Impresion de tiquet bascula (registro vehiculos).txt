FUNCTION zmfpp_impresion_tiquet_ppqq.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_WERKS) TYPE  WERKS_D
*"     REFERENCE(I_ID_REG_VEHICULO) TYPE  ZID_REG_VEHICULO
*"----------------------------------------------------------------------

  DATA:   gs_output_param TYPE sfpoutputparams,
          lf_formname     TYPE fpname VALUE 'ZESPPF_BASCULA_PPQQ',
          lf_fm_name      TYPE rs38l_fnam,
          ls_doc_param    TYPE sfpdocparams.
  DATA: lt_months TYPE STANDARD TABLE OF t247.

  DATA: ls_datos_form TYPE zclpp_reg_vehiculo_prodquimico=>ty_listado_ppqq.
  DATA: ls_59 TYPE ztpp0059.

  CLEAR gs_output_param.

  gs_output_param-dest = zcl_utils_hpap_pp=>determinar_disp_impresion( ).

*  SELECT SINGLE padest
*    INTO @gs_output_param-dest
*    FROM ztpp0007
*    WHERE uname = @sy-uname AND
*          werks = @i_werks.

  IF sy-subrc <> 0.
    gs_output_param-dest = 'LOCAL'.
  ENDIF.

  gs_output_param-reqimm = 'X'.
  gs_output_param-reqnew = 'X'.
  gs_output_param-nodialog = ' '. " No diálogo
  gs_output_param-copies = 2.

  CLEAR ls_datos_form.

* Datos del RV
  SELECT SINGLE * INTO CORRESPONDING FIELDS OF @ls_59
      FROM ztpp0059
      WHERE id_reg_vehiculo = @i_id_reg_vehiculo AND
            werks           = @i_werks.

* Datos del conductor
  SELECT SINGLE * INTO @DATA(ls_datos_cond)
    FROM ztpp0056
    WHERE dninie = @ls_59-dninie.

* Nombre del transportista
  SELECT SINGLE name1 INTO @DATA(l_nom_trans)
    FROM zvpp_transportis
    WHERE lifnr = @ls_datos_cond-tdlnr.

  SELECT SINGLE name1
    INTO @ls_datos_form-werks
    FROM t001w
    WHERE werks = @i_werks.

  ls_datos_form-nombre_cond                  = |{ ls_datos_cond-nombre } { ls_datos_cond-apellidos }|.
  ls_datos_form-desc_tranp                   = l_nom_trans.
  ls_datos_form-zmatricula             = ls_59-zmatricula1.

  CALL FUNCTION 'MONTH_NAMES_GET'
    EXPORTING
      language              = sy-langu
* IMPORTING
*     RETURN_CODE           =
    TABLES
      month_names           = lt_months
    EXCEPTIONS
      month_names_not_found = 1
      OTHERS                = 2.
  IF sy-subrc = 0.
  ENDIF.

  CASE i_werks.
    WHEN '3000'. ls_datos_form-txt_lugar_fecha = |En l'Alqueria d'Asnar, a|.
    WHEN '3020'. ls_datos_form-txt_lugar_fecha = |En Sarrià de Ter, a|.
    WHEN OTHERS.
  ENDCASE.

* Añadimos fecha del dia.
  ls_datos_form-txt_lugar_fecha = |{ ls_datos_form-txt_lugar_fecha } { sy-datum+6(2) } de|.

* Añadimos mes alpha.
  TRY.
      ls_datos_form-txt_lugar_fecha = |{ ls_datos_form-txt_lugar_fecha } { lt_months[ mnr = sy-datum+4(2) ]-ltx } de|.

    CATCH cx_root .
  ENDTRY.

* Añadimos fecha del dia.
  ls_datos_form-txt_lugar_fecha = |{ ls_datos_form-txt_lugar_fecha } { sy-datum(4) }.|.
  ls_datos_form-werks_code      = i_werks.


* IMPRESIÓN ETIQUETA:
  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = gs_output_param
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.

  IF sy-langu = 'S'.
    ls_doc_param-langu = 'S'.
    ls_doc_param-country = 'ES'.
  ELSE.
    ls_doc_param-langu = 'E'.
    ls_doc_param-country = 'US'.
  ENDIF.

*&---- Get the name of the generated function module
  CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'           "& Form Processing Generation
    EXPORTING
      i_name     = lf_formname
    IMPORTING
      e_funcname = lf_fm_name.



  CALL FUNCTION lf_fm_name
    EXPORTING
      /1bcdwb/docparams = ls_doc_param
      datos_entrada     = ls_datos_form
* IMPORTING
*     /1BCDWB/FORMOUTPUT       =
    EXCEPTIONS
      usage_error       = 1
      system_error      = 2
      internal_error    = 3
      OTHERS            = 4.

* Close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
*   IMPORTING
*     E_RESULT             = result
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.



ENDFUNCTION.
