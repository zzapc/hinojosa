FUNCTION zpp_obsoletos.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_MATNR) TYPE  MATNR OPTIONAL
*"     VALUE(I_WERKS) TYPE  WERKS_D OPTIONAL
*"     VALUE(I_LGORT) TYPE  LGORT_D OPTIONAL
*"  EXPORTING
*"     VALUE(E_DATA) TYPE  ZTPP0027ALV
*"  EXCEPTIONS
*"      E_MTART
*"      E_NODATA
*"----------------------------------------------------------------------
  CONSTANTS: gc_true      TYPE sap_bool VALUE 'X',
             gc_mtart     TYPE mara-mtart VALUE 'ZPLP',
             gc_mtart_pmp TYPE mara-mtart VALUE 'ZPMP'.


  DATA: lv_matnr         TYPE matnr,
        lv_zzcolor       TYPE zcolor,
        lv_zzplalgnt     TYPE zplalgnt,
        lv_zzplaannt     TYPE zplaannt,
        lv_zzgrampla     TYPE zgrampla,
        lv_mtart         TYPE mtart,
        lv_matkl         TYPE matkl,
        lv_zzplalgntint  TYPE i,
        lv_zzplaanntint  TYPE i,
        lv_zzplalgntint2 TYPE i,
        lv_zzplaanntint2 TYPE i.

  DATA: gt_outtab_aux TYPE STANDARD TABLE OF zspp0027alv.

  DATA: lv_ratio1 TYPE i,
        lv_ratio2 TYPE i.

  SELECT SINGLE matnr, zzcolor, zzplalgnt, zzplaannt, mtart, zzgrampla, matkl
    INTO ( @lv_matnr, @lv_zzcolor, @lv_zzplalgnt, @lv_zzplaannt, @lv_mtart, @lv_zzgrampla, @lv_matkl )
    FROM mara
    WHERE matnr = @i_matnr AND
          mtart = @gc_mtart.

  IF sy-subrc <> 0.
*    RAISE e_mtart.
*    EXIT.
*   Obtener materiales ZPMP

    SELECT SINGLE matnr, zzcolor, zzplalgnt, zzplaannt, mtart, matkl
    INTO ( @lv_matnr, @lv_zzcolor, @lv_zzplalgnt, @lv_zzplaannt, @lv_mtart, @lv_matkl )
    FROM mara
    WHERE matnr = @i_matnr AND
          mtart = @gc_mtart_pmp.

    IF sy-subrc <> 0.
      RAISE e_mtart.
      EXIT.
    ENDIF.

  ENDIF.
  IF lv_mtart = gc_mtart and lv_matkl <> '90220'.

    lv_zzplalgntint = lv_zzplalgnt.
    lv_zzplaanntint = lv_zzplaannt.

    SELECT  a~matnr, b~werks, b~lgort, b~charg, c~maktx, a~zzcolor, a~zzplalgnt, a~zzplaannt, a~meins,
            b~clabs, b~cumlm, b~cinsm, b~ceinm, b~cspem, b~cretm, b~cvmla, b~cvmum, b~cvmin, b~cvmei,", a~zzplalgnt AS zzplalgntint, a~zzplaannt AS zzplaanntint,
            b~cvmsp, b~cvmre, a~mtart", cast( a~zzplalgnt as fltp ) as zplalgntint
      INTO CORRESPONDING FIELDS OF TABLE @gt_outtab_aux
      FROM mara AS a
      INNER JOIN mchb AS b ON a~matnr = b~matnr
      LEFT JOIN makt AS c ON a~matnr = c~matnr
      WHERE "a~matnr = @lv_matnr AND
            b~werks = @i_werks AND
            b~lgort = @i_lgort AND
            a~zzcolor = @lv_zzcolor AND
            a~zzgrampla = @lv_zzgrampla AND
            b~clabs > 0 AND
            a~mtart = @gc_mtart AND
            c~spras = @sy-langu.

    IF sy-subrc <> 0.
      RAISE e_nodata.
      EXIT.
    ENDIF.

    LOOP AT gt_outtab_aux ASSIGNING FIELD-SYMBOL(<fs_pos>).
      lv_zzplalgntint2 = <fs_pos>-zzplalgnt.
      lv_zzplaanntint2 = <fs_pos>-zzplaannt.

      PERFORM obtener_caracteristicas CHANGING <fs_pos>.

      IF lv_zzplalgntint2 >= lv_zzplalgntint AND lv_zzplaanntint2 >= lv_zzplaanntint.
        <fs_pos>-zzcantplan = ( lv_zzplalgntint2 DIV lv_zzplalgntint ) * ( lv_zzplaanntint2 DIV lv_zzplaanntint ) * <fs_pos>-clabs.
        APPEND <fs_pos> TO e_data.
      ENDIF.
    ENDLOOP.

  ELSEIF lv_mtart = gc_mtart_pmp or lv_matkl = '90220'.

    SELECT  a~matnr, b~werks, b~lgort, b~charg, c~maktx, a~zzcolor, a~zzplalgnt, a~zzplaannt, a~meins,
            b~clabs, b~cumlm, b~cinsm, b~ceinm, b~cspem, b~cretm, b~cvmla, b~cvmum, b~cvmin, b~cvmei,", a~zzplalgnt AS zzplalgntint, a~zzplaannt AS zzplaanntint,
            b~cvmsp, b~cvmre, a~mtart", cast( a~zzplalgnt as fltp ) as zplalgntint
      INTO CORRESPONDING FIELDS OF TABLE @gt_outtab_aux
      FROM mara AS a
      INNER JOIN mchb AS b ON a~matnr = b~matnr
      LEFT JOIN makt AS c ON a~matnr = c~matnr
      WHERE a~matnr = @lv_matnr AND
            b~werks = @i_werks AND
            b~lgort = @i_lgort AND
*            a~zzcolor = @lv_zzcolor AND
            b~clabs > 0 AND
            c~spras = @sy-langu.

    IF sy-subrc <> 0.
      RAISE e_nodata.
      EXIT.
    ENDIF.

    LOOP AT gt_outtab_aux ASSIGNING FIELD-SYMBOL(<fs_pos_2>).
      <fs_pos_2>-zzcantplan = <fs_pos_2>-clabs.
      APPEND <fs_pos_2> TO e_data.
    ENDLOOP.


  ENDIF.

ENDFUNCTION.

FORM obtener_caracteristicas CHANGING ls_pos TYPE zspp0027alv.

  DATA: lt_return          TYPE                   bapiret2_t,
        lt_allocvaluesnum  TYPE STANDARD TABLE OF bapi1003_alloc_values_num,
        lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char,
        ls_allocvalueschar TYPE                   bapi1003_alloc_values_char,
        lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr,
        lv_class           TYPE                   klasse_d,
        lv_object          TYPE                   bapi1003_key-object.

*  IF p_class IS NOT INITIAL.

  CONCATENATE ls_pos-matnr ls_pos-charg INTO lv_object.

*  CLEAR: pt_allocvaluesnum, pt_allocvalueschar, pt_allocvaluescurr, lt_return.

  IF ls_pos-mtart = 'ZPMP'.
    lv_class = 'Z_ZPMP'.
  ELSEIF ls_pos-mtart = 'ZPLP'.
    lv_class = 'Z_ZPLP'.
  ENDIF.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object "Material + Lote
      objecttable     = 'MCH1'
      classnum        = lv_class "
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_allocvaluesnum
      allocvalueschar = lt_allocvalueschar
      allocvaluescurr = lt_allocvaluescurr
      return          = lt_return.

  READ TABLE lt_allocvalueschar INTO ls_allocvalueschar WITH KEY charact = 'Z_PEDIDO'.
  IF sy-subrc = 0.
    ls_pos-vbeln = ls_allocvalueschar-value_char.
  ENDIF.

  READ TABLE lt_allocvalueschar INTO ls_allocvalueschar WITH KEY charact = 'Z_POSICION'.
  IF sy-subrc = 0.
    ls_pos-posnr = ls_allocvalueschar-value_char.
  ENDIF.

  READ TABLE lt_allocvalueschar INTO ls_allocvalueschar WITH KEY charact = 'Z_CLIENTE'.
  IF sy-subrc = 0.
    ls_pos-kunnr = ls_allocvalueschar-value_char.
  ENDIF.

  READ TABLE lt_allocvalueschar INTO ls_allocvalueschar WITH KEY charact = 'Z_NOMBRE_CLIENTE'.
  IF sy-subrc = 0.
    ls_pos-name1 = ls_allocvalueschar-value_char.
  ENDIF.

  IF ls_pos-cspem > 0.
    ls_pos-stock_bloqueado = abap_true.
  ENDIF.

ENDFORM.
