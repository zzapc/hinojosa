FUNCTION zpp_get_tiempos.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_WERKS) TYPE  WERKS_D OPTIONAL
*"     VALUE(I_LINEA) TYPE  ZLINEA OPTIONAL
*"     VALUE(I_MODO) TYPE  ZMODO OPTIONAL
*"     VALUE(I_GRAMAJE) TYPE  ZZGRAMAJE OPTIONAL
*"  EXPORTING
*"     VALUE(E_TIEMPOS) TYPE  ZTPP0021
*"----------------------------------------------------------------------

  DATA: t_ztpp0021    TYPE TABLE OF ztpp0021,
        e_tiempos_inf TYPE  ztpp0021,
        e_tiempos_sup TYPE  ztpp0021,
        lv_limit_inf  TYPE sy-tabix,
        lv_limit_sup  TYPE sy-tabix.


* primero verificamos que la tabla de tiempos tiene algun dato, para que esta función
* no entre en un bucle
  CLEAR: t_ztpp0021. REFRESH: t_ztpp0021.
  SELECT * FROM ztpp0021
    INTO TABLE t_ztpp0021
    WHERE werks = i_werks AND
          linea = i_linea AND
          modo = i_modo.

  IF sy-subrc = 0.
    READ TABLE t_ztpp0021 INTO e_tiempos WITH KEY  gramaje = i_gramaje.
    IF sy-subrc <> 0 OR ( e_tiempos-minmod IS INITIAL OR e_tiempos-numoper IS INITIAL ).

      CALL FUNCTION 'ZPP_GET_TIEMPOS_INF'
        EXPORTING
          i_werks   = i_werks
          i_linea   = i_linea
          i_modo    = i_modo
          i_gramaje = i_gramaje
        IMPORTING
          e_tiempos = e_tiempos_inf.

      lv_limit_inf = i_gramaje - e_tiempos_inf-gramaje.


      CALL FUNCTION 'ZPP_GET_TIEMPOS_SUP'
        EXPORTING
          i_werks   = i_werks
          i_linea   = i_linea
          i_modo    = i_modo
          i_gramaje = i_gramaje
        IMPORTING
          e_tiempos = e_tiempos_sup.

      lv_limit_sup = e_tiempos_sup-gramaje - i_gramaje.


      IF e_tiempos_inf-gramaje IS INITIAL.
        e_tiempos = e_tiempos_sup.
      ELSEIF e_tiempos_sup-gramaje IS INITIAL.
        e_tiempos = e_tiempos_inf.
      ELSE.
        IF lv_limit_inf <= lv_limit_sup.
          e_tiempos = e_tiempos_inf.
        ELSE.
          e_tiempos = e_tiempos_sup.
        ENDIF.
      ENDIF.

      IF e_tiempos-minmod IS INITIAL AND e_tiempos-numoper IS NOT INITIAL.
        CALL FUNCTION 'ZPP_GET_TIEMPOS'
          EXPORTING
            i_werks   = i_werks
            i_linea   = i_linea
            i_modo    = i_modo
            i_gramaje = e_tiempos-gramaje
          IMPORTING
            e_tiempos = e_tiempos.

      ENDIF.
    ENDIF.
  ENDIF.

*  DATA: t_ztpp0021      TYPE TABLE OF ztpp0021,
*        T_ztpp0021_inf TYPE TABLE OF ztpp0021,
*        wa_ztpp0021_inf TYPE  ztpp0021,
*        T_ztpp0021_sup TYPE TABLE OF ztpp0021,
*        wa_ztpp0021_sup TYPE  ztpp0021,
*        lv_limit_inf    TYPE sy-tabix,
*        lv_limit_sup    TYPE sy-tabix,
*        wa_ztpp0021     TYPE ztpp0021,
*        wa_ztpp0019     TYPE ztpp0019.
*
*  DATA: lv_gramaje TYPE  zzgramaje.
*
** primero verificamos que la tabla de tiempos tiene algun dato, para que esta función
** no entre en un bucle
*  CLEAR: t_ztpp0021. REFRESH: t_ztpp0021.
*  SELECT * FROM ztpp0021
*    INTO TABLE t_ztpp0021
*    WHERE werks = i_werks AND
*          linea = i_linea AND
*          modo = i_modo.
*
*  IF sy-subrc = 0.
**   Buscamos los Tiempos y operarios para el gramaje en cuestión.
**   Si no existe para dicho gramaje, buscamos para el gramaje más próximo
*    read table t_ztpp0021 into e_tiempos with key  gramaje = i_gramaje.
*
*    IF sy-subrc <> 0 OR e_tiempos-minmod IS INITIAL OR e_tiempos-numoper IS INITIAL.
*      "  obtengo los gramajes inferiores
*      CLEAR:  T_ztpp0021_inf, wa_ztpp0021_inf.
*      REFRESH: T_ztpp0021_inf.
*      LOOP AT T_ztpp0021 INTO wa_ztpp0021_inf WHERE gramaje < i_gramaje.
*        APPEND wa_ztpp0021_inf TO T_ztpp0021_inf.
*      ENDLOOP.
*
**     nos quedamos con el gramaje inferior más próximo.
*      SORT T_ztpp0021_inf BY GRAMAJE DESCENDING.
*      READ TABLE T_ztpp0021_inf INTO wa_ztpp0021_inf INDEX 1.
*
*      lv_limit_inf = i_gramaje - wa_ztpp0021_inf-gramaje.
*
*      " obtengo los gramajes superiores
*      CLEAR: T_ztpp0021_sup, wa_ztpp0021_sup.
*      refresh: T_ztpp0021_sup.
*      LOOP AT T_ztpp0021 INTO wa_ztpp0021_SUP WHERE gramaje > i_gramaje.
*        APPEND wa_ztpp0021_sup TO T_ztpp0021_sup.
*      ENDLOOP.
*
**     nos quedamos con el gramaje superior más próximo.
*      SORT T_ztpp0021_sup BY GRAMAJE ASCENDING.
*      READ TABLE T_ztpp0021_sup INTO wa_ztpp0021_sup INDEX 1.
*
*      lv_limit_sup = wa_ztpp0021_sup-gramaje - i_gramaje.
*
*      IF lv_limit_inf < lv_limit_sup.
*        e_tiempos = wa_ztpp0021_inf.
*      ELSE.
*        e_tiempos = wa_ztpp0021_sup.
*      ENDIF.
*
*
*      IF wa_ztpp0021_sup-minmod IS INITIAL OR wa_ztpp0021_sup-numoper IS INITIAL.
*        lv_gramaje = wa_ztpp0021_sup-gramaje.
*
*        CALL FUNCTION 'ZPP_GET_TIEMPOS'
*          EXPORTING
*            i_werks   = i_werks
*            i_linea   = i_linea
*            i_modo    = i_modo
*            i_gramaje = lv_gramaje
*          IMPORTING
*            e_tiempos = e_tiempos.
*      ENDIF.
*    ENDIF.
*  ENDIF.
ENDFUNCTION.
