FUNCTION zmfpp_etiq_rollo_alta.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_ROLLO) TYPE  ZSPP_ETIQ_ROLLO_ALTA OPTIONAL
*"     VALUE(I_REIMP_PESO) TYPE  XFLAG OPTIONAL
*"     VALUE(I_NODIALOG) TYPE  FPNODIALOG OPTIONAL
*"  EXPORTING
*"     REFERENCE(O_PRINTPARMS) TYPE  SFPOUTPUTPARAMS
*"     REFERENCE(O_RC) TYPE  CHAR2
*"----------------------------------------------------------------------
  DATA: lv_ancho        TYPE zancho,
        lv_ancho_txt(4),
        lv_long         TYPE i,
        lv_ebeln        TYPE vbeln_va,
        lv_ebelp        TYPE posnr_va,
        lv_repart       TYPE char4,
        lv_matnr        TYPE matnr.

* GST - 29/04/2015 ->
  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        lv_peso              TYPE erfmg.
* GST - 29/04/2015 <-

  CONSTANTS: c_ceros(10)      VALUE '0000000000'.

  DATA ls_etiq_rollo TYPE zstpp_etiq_rollo.

  MOVE-CORRESPONDING i_rollo TO ls_etiq_rollo.

  " Logo nivel cliente:
*  CONCATENATE 'E:\logos\' i_rollo-werks '.jpg' INTO ls_etiq_rollo-logo_url.
*  CONDENSE ls_etiq_rollo-logo_url.

  CALL FUNCTION 'ZRECUPERA_LOGOS_SOCIEDAD'
    EXPORTING
      iv_bukrs = i_rollo-werks
    IMPORTING
      ev_path  = ls_etiq_rollo-logo_url.


  " Pedido/Posición:
*  ls_etiq_rollo-ebeln = p_ebeln.
*  ls_etiq_rollo-ebelp = p_ebelp.

  CLEAR: lv_ebeln, lv_ebelp.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = ls_etiq_rollo-ebeln
    IMPORTING
      output = lv_ebeln.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = ls_etiq_rollo-ebelp
    IMPORTING
      output = lv_ebelp.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = i_rollo-zzrepart1
    IMPORTING
      output = lv_repart.

  CONCATENATE lv_ebeln lv_ebelp lv_repart INTO ls_etiq_rollo-ped_pos
              SEPARATED BY '/'.

  ls_etiq_rollo-zzrepart1 = |{ i_rollo-zzrepart1 ALPHA = OUT }|.
  ls_etiq_rollo-zzrepart2 = |{ i_rollo-zzrepart2 ALPHA = OUT }|.
  ls_etiq_rollo-zzrepart3 = |{ i_rollo-zzrepart3 ALPHA = OUT }|.
  " Material:
  IF i_rollo-matnr IS NOT INITIAL.
    ls_etiq_rollo-matnr = i_rollo-matnr.
*    SELECT SINGLE ktext INTO ls_etiq_rollo-ktext
*      FROM caufv
*      WHERE aufnr = i_rollo-aufnr.
    SELECT SINGLE maktx INTO ls_etiq_rollo-ktext
    FROM makt
    WHERE matnr = i_rollo-matnr
    AND spras = sy-langu.

    CLEAR lv_matnr.
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'   " JME 18.07.2024 ATC
    CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'    " JME 18.07.2024 ATC
      EXPORTING
        input  = ls_etiq_rollo-matnr
      IMPORTING
        output = lv_matnr.

    IF ls_etiq_rollo-ktext IS NOT INITIAL.
      CONCATENATE lv_matnr ls_etiq_rollo-ktext INTO ls_etiq_rollo-matnr_txt
            SEPARATED BY ' - '.
    ELSE.
      ls_etiq_rollo-matnr_txt = lv_matnr.
    ENDIF.
  ENDIF.

  " Diámetro:
  IF i_rollo-diametro IS NOT INITIAL.
    WRITE i_rollo-diametro TO ls_etiq_rollo-diametro.
    CONDENSE ls_etiq_rollo-diametro.
    CONCATENATE ls_etiq_rollo-diametro 'mm' INTO ls_etiq_rollo-diametro SEPARATED BY space.
  ENDIF.



  SELECT SINGLE name1 INTO ls_etiq_rollo-name1
    FROM lfa1
    WHERE lifnr = ls_etiq_rollo-zzkunnr1.

  IF sy-subrc EQ 0.
    CONCATENATE ls_etiq_rollo-zzkunnr1 ls_etiq_rollo-name1 INTO ls_etiq_rollo-zzkunnr1
                SEPARATED BY ' - '.
  ELSE.
    SELECT SINGLE name1 INTO ls_etiq_rollo-name1
                        FROM kna1
                        WHERE kunnr = ls_etiq_rollo-zzkunnr1.
    IF sy-subrc EQ 0.
      CONCATENATE ls_etiq_rollo-zzkunnr1 ls_etiq_rollo-name1 INTO ls_etiq_rollo-zzkunnr1
               SEPARATED BY ' - '.
    ENDIF.
  ENDIF.

  SELECT SINGLE name1 INTO ls_etiq_rollo-name1
  FROM lfa1
  WHERE lifnr = ls_etiq_rollo-zzkunnr2.

  IF sy-subrc EQ 0.
    CONCATENATE ls_etiq_rollo-zzkunnr2 ls_etiq_rollo-name1 INTO ls_etiq_rollo-zzkunnr2
                SEPARATED BY ' - '.
  ELSE.
    SELECT SINGLE name1 INTO ls_etiq_rollo-name1
                        FROM kna1
                        WHERE kunnr = ls_etiq_rollo-zzkunnr2.
    IF sy-subrc EQ 0.
      CONCATENATE ls_etiq_rollo-zzkunnr2 ls_etiq_rollo-name1 INTO ls_etiq_rollo-zzkunnr2
               SEPARATED BY ' - '.
    ENDIF.
  ENDIF.

  SELECT SINGLE name1 INTO ls_etiq_rollo-name1
  FROM lfa1
  WHERE lifnr = ls_etiq_rollo-zzkunnr3.

  IF sy-subrc EQ 0.
    CONCATENATE ls_etiq_rollo-zzkunnr3 ls_etiq_rollo-name1 INTO ls_etiq_rollo-zzkunnr3
                SEPARATED BY ' - '.
  ELSE.
    SELECT SINGLE name1 INTO ls_etiq_rollo-name1
                        FROM kna1
                        WHERE kunnr = ls_etiq_rollo-zzkunnr3.
    IF sy-subrc EQ 0.
      CONCATENATE ls_etiq_rollo-zzkunnr3 ls_etiq_rollo-name1 INTO ls_etiq_rollo-zzkunnr3
               SEPARATED BY ' - '.
    ENDIF.
  ENDIF.

  " Lote:
  ls_etiq_rollo-charg = i_rollo-charg.
  CONDENSE ls_etiq_rollo-charg.

  " Ancho:
  CLEAR: lv_ancho, lv_ancho_txt.
  SELECT SINGLE zzancho INTO lv_ancho
    FROM mara
    WHERE matnr = i_rollo-matnr.

  ls_etiq_rollo-ancho = lv_ancho.
  WRITE lv_ancho TO lv_ancho_txt.
  CONDENSE lv_ancho_txt.

  IF lv_ancho_txt IS NOT INITIAL.
    IF lv_ancho_txt+0(1) = '0'.
      ls_etiq_rollo-ancho_txt = lv_ancho_txt+1(3).
    ENDIF.
    IF lv_ancho_txt+0(2) = '00'.
      ls_etiq_rollo-ancho_txt = lv_ancho_txt+2(2).
    ENDIF.
    IF lv_ancho_txt+0(3) = '000'.
      ls_etiq_rollo-ancho_txt = lv_ancho_txt+3(1).
    ENDIF.
    IF ls_etiq_rollo-ancho_txt IS INITIAL AND lv_ancho_txt IS NOT INITIAL AND lv_ancho_txt NE '0000'.
      ls_etiq_rollo-ancho_txt = lv_ancho_txt.
    ENDIF.
  ENDIF.
  CONDENSE ls_etiq_rollo-ancho_txt.

* Ini CMS - Añadir 'mm' al campo ancho_txt
  ls_etiq_rollo-ancho_txt = |{ ls_etiq_rollo-ancho_txt } mm|.
* End CMS

  ls_etiq_rollo-tornada = i_rollo-tornada.

  " Código de barra:
  CLEAR lv_long.
  lv_long = strlen( ls_etiq_rollo-charg ).
  OVERLAY ls_etiq_rollo-charg WITH c_ceros.
  SHIFT ls_etiq_rollo-charg BY lv_long PLACES LEFT CIRCULAR.

  CONCATENATE ls_etiq_rollo-ebeln ls_etiq_rollo-ebelp ls_etiq_rollo-matnr ls_etiq_rollo-charg
              INTO ls_etiq_rollo-bar_rollo.

* GST - 04/05/2015 ->
  " Código barras rollo sin material:
  CONCATENATE ls_etiq_rollo-ebeln ls_etiq_rollo-ebelp ls_etiq_rollo-charg
              INTO ls_etiq_rollo-bar_rollo_2.


  ls_etiq_rollo-bar_rollo = ls_etiq_rollo-charg.
  ls_etiq_rollo-bar_rollo_2 = ls_etiq_rollo-charg.

* GST - 04/05/2015 <-


* GST - 23/11/2015 ->
*  ls_etiq_rollo-aufnr = ps_aufk-aufnr.
*  ls_etiq_rollo-werks = ps_aufk-werks.
*  ls_etiq_rollo-auart = ps_aufk-auart.
* GST - 23/11/2015 <-

* GST - 29/04/2015 ->
  IF i_reimp_peso = 'X'.
    CLEAR lv_object.
    CLEAR: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.
    REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.

    CONCATENATE i_rollo-matnr i_rollo-charg INTO lv_object.

    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = lv_object
        objecttable     = 'MCH1'
        classnum        = 'Z_ROLLO'
        classtype       = '023'
*       KEYDATE         = SY-DATUM
*       UNVALUATED_CHARS       = ' '
*       LANGUAGE        = SY-LANGU
* IMPORTING
*       STATUS          =
*       STANDARDCLASS   =
      TABLES
        allocvaluesnum  = lt_alloc_values_num
        allocvalueschar = lt_alloc_values_char
        allocvaluescurr = lt_alloc_values_curr
        return          = lt_return.

    CLEAR: lv_peso.
    LOOP AT lt_alloc_values_num INTO ls_alloc_values_num.
      CASE ls_alloc_values_num-charact.
        WHEN 'Z_PESO1'.
          lv_peso = trunc( ls_alloc_values_num-value_from ).
* GST - 21/05/2015 ->
        WHEN 'Z_VELOCIDAD_MAQUINA'.
          ls_etiq_rollo-zvelocidad = ls_alloc_values_num-value_from.
* GST - 21/05/2015 <-
      ENDCASE.
    ENDLOOP.

    IF lv_peso IS NOT INITIAL.
      ls_etiq_rollo-zpeso = lv_peso.
    ELSE.
      ls_etiq_rollo-zpeso = i_rollo-peso.
    ENDIF.
  ELSE.
* GST - 29/04/2015 <-

    " Peso:
    ls_etiq_rollo-zpeso = i_rollo-peso.
*  REPLACE '.' IN ls_etiq_rollo-zpeso WITH space.

* GST - 29/04/2015 ->
  ENDIF.

* Ini CMS - Añadir 'kg' al campo zpeso
  IF ls_etiq_rollo-zpeso IS NOT INITIAL.
    ls_etiq_rollo-zpeso_txt = ls_etiq_rollo-zpeso.
    SPLIT ls_etiq_rollo-zpeso_txt AT '.' INTO ls_etiq_rollo-zpeso_txt DATA(l_txt).
    CONDENSE ls_etiq_rollo-zpeso_txt NO-GAPS.
    ls_etiq_rollo-zpeso_txt = |{ ls_etiq_rollo-zpeso_txt } kg|.
  ENDIF.
  ls_etiq_rollo-auart = 'ZI01'.


* End CMS

  DATA: lf_formname     TYPE fpname VALUE 'ZESPPF_ETIQ_ROLLO_A4_ALTA',
        lf_fm_name      TYPE rs38l_fnam,
        ls_doc_param    TYPE sfpdocparams,
        gs_output_param TYPE sfpoutputparams.

  DATA: lv_padest TYPE rspopname.

* PARÁMETROS DE IMPRESIÓN:

*  CLEAR gs_output_param.
*  gs_output_param-dest = 'LOCA'.
*  gs_output_param-reqimm = 'X'.
**  gs_output_param-nodialog = 'X'. " No diálogo
*  gs_output_param-reqnew = 'X'.
*  gs_output_param-copies    = 2.


* GST - 23/11/2015 ->

  CLEAR lv_padest.

  lv_padest = zcl_utils_hpap_pp=>determinar_disp_impresion( ).


*  SELECT SINGLE padest INTO lv_padest
*    FROM ztpp0007
*    WHERE werks = ls_etiq_rollo-werks
*    AND auart = ls_etiq_rollo-auart
*    AND uname = sy-uname.
*
*  IF lv_padest IS INITIAL.
*
*    SELECT SINGLE padest INTO lv_padest
*      FROM ztpp0007
*      WHERE werks = ls_etiq_rollo-werks
*      AND auart = ls_etiq_rollo-auart.
*
*  ENDIF.

  IF lv_padest IS NOT INITIAL.

    CLEAR gs_output_param.
    gs_output_param-dest = lv_padest.
    gs_output_param-reqimm = 'X'.
    gs_output_param-nodialog = i_nodialog. " No diálogo
    gs_output_param-reqnew = 'X'.
    gs_output_param-copies    = 2.

  ELSE.

    CLEAR gs_output_param.
    gs_output_param-dest = 'LOCA'.
    gs_output_param-reqimm = 'X'.
    gs_output_param-nodialog = i_nodialog. " No diálogo
    gs_output_param-reqnew = 'X'.
    gs_output_param-copies    = 2.

  ENDIF.

* GST - 23/11/2015 <-

* ---
* IMPRESIÓN ETIQUETA:
  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = gs_output_param
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.

  IF sy-subrc <> 0.
    o_rc = sy-subrc.
    RETURN.
  ENDIF.

  CLEAR o_printparms.
  o_printparms = gs_output_param.

*&---- Get the name of the generated function module
  CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'           "& Form Processing Generation
    EXPORTING
      i_name     = lf_formname
    IMPORTING
      e_funcname = lf_fm_name.

  IF sy-langu = 'S'.
    ls_doc_param-langu = 'S'.
    ls_doc_param-country = 'ES'.
  ELSE.
    ls_doc_param-langu = 'E'.
    ls_doc_param-country = 'US'.
  ENDIF.

  CALL FUNCTION lf_fm_name
    EXPORTING
      /1bcdwb/docparams = ls_doc_param
      etiq_rollo        = ls_etiq_rollo
* IMPORTING
*     /1BCDWB/FORMOUTPUT       =
    EXCEPTIONS
      usage_error       = 1
      system_error      = 2
      internal_error    = 3
      OTHERS            = 4.

* Close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
*   IMPORTING
*     E_RESULT             = result
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
* GST - 29/04/2015 <-
*  DATA: lv_auart      TYPE aufart,
*        lv_sfcpf      TYPE co_prodprf,
*        ls_aufk       TYPE aufk,
*        ls_etiq_rollo TYPE zstpp_etiq_rollo.
*
** Chequear que la orden es de tipo rollo:
*  CLEAR: lv_auart, lv_sfcpf.
*
*  DATA l_impresion TYPE abap_bool.
*
*  SELECT SINGLE sfcpf INTO lv_sfcpf
*    FROM caufv
*    WHERE aufnr = i_rollo-aufnr.
*
*  CHECK lv_sfcpf = 'ZI01'.
*
** Seleccionar datos de la orden de proceso:
*  CLEAR ls_aufk.
*  SELECT SINGLE * INTO ls_aufk
*    FROM aufk
*    WHERE aufnr = i_rollo-aufnr.
*
*  IF ls_aufk IS NOT INITIAL.
*
*    IF i_rollo-kunnr IS NOT INITIAL AND i_rollo-pedido IS NOT INITIAL AND i_rollo-posicion IS NOT INITIAL.
*      CLEAR ls_etiq_rollo.
*      PERFORM dat_etiq_rollo USING i_rollo
*                                   i_rollo-kunnr
*                                   i_rollo-pedido
*                                   i_rollo-posicion
*                                   ls_aufk
** GST - 29/04/2015 ->
*                                   i_reimp_peso
** GST - 29/04/2015 <-
*                              CHANGING ls_etiq_rollo.
*      PERFORM imprimir_etiq_rollo USING ls_etiq_rollo
** GST - 23/11/2015 ->
*                                        i_nodialog.
** GST - 23/11/2015 <-
*      l_impresion = abap_true.
*    ELSE.
*
*      " Cliente/Pedido/Posición (1):
*      IF ls_aufk-zzkunnr1 IS NOT INITIAL AND ls_aufk-zzebeln1 IS NOT INITIAL AND ls_aufk-zzebelp1 IS NOT INITIAL.
*        CLEAR ls_etiq_rollo.
*        CONDENSE: ls_aufk-zzkunnr1, ls_aufk-zzebeln1, ls_aufk-zzebelp1.
*        PERFORM dat_etiq_rollo USING i_rollo
*                                     ls_aufk-zzkunnr1
*                                     ls_aufk-zzebeln1
*                                     ls_aufk-zzebelp1
*                                     ls_aufk
** GST - 29/04/2015 ->
*                                     i_reimp_peso
** GST - 29/04/2015 <-
*                                CHANGING ls_etiq_rollo.
*        PERFORM imprimir_etiq_rollo USING ls_etiq_rollo
** GST - 23/11/2015 ->
*                                          i_nodialog.
** GST - 23/11/2015 <-
*        l_impresion = abap_true.
*      ENDIF.
*
*      " Cliente/Pedido/Posición (2):
*      IF ls_aufk-zzkunnr2 IS NOT INITIAL AND ls_aufk-zzebeln2 IS NOT INITIAL AND ls_aufk-zzebelp2 IS NOT INITIAL.
*        CLEAR ls_etiq_rollo.
*        CONDENSE: ls_aufk-zzkunnr2, ls_aufk-zzebeln2, ls_aufk-zzebelp2.
*        PERFORM dat_etiq_rollo USING i_rollo
*                                     ls_aufk-zzkunnr2
*                                     ls_aufk-zzebeln2
*                                     ls_aufk-zzebelp2
*                                     ls_aufk
** GST - 29/04/2015 ->
*                                     i_reimp_peso
** GST - 29/04/2015 <-
*                                CHANGING ls_etiq_rollo.
*        PERFORM imprimir_etiq_rollo USING ls_etiq_rollo
** GST - 23/11/2015 ->
*                                          i_nodialog.
** GST - 23/11/2015 <-
*        l_impresion = abap_true.
*      ENDIF.
*
*      " Cliente/Pedido/Posición (3):
*      IF ls_aufk-zzkunnr3 IS NOT INITIAL AND ls_aufk-zzebeln3 IS NOT INITIAL AND ls_aufk-zzebelp3 IS NOT INITIAL.
*        CLEAR ls_etiq_rollo.
*        CONDENSE: ls_aufk-zzkunnr3, ls_aufk-zzebeln3, ls_aufk-zzebelp3.
*        PERFORM dat_etiq_rollo USING i_rollo
*                                     ls_aufk-zzkunnr3
*                                     ls_aufk-zzebeln3
*                                     ls_aufk-zzebelp3
*                                     ls_aufk
** GST - 29/04/2015 ->
*                                     i_reimp_peso
** GST - 29/04/2015 <-
*                                CHANGING ls_etiq_rollo.
*        PERFORM imprimir_etiq_rollo USING ls_etiq_rollo
** GST - 23/11/2015 ->
*                                          i_nodialog.
** GST - 23/11/2015 <-
*        l_impresion = abap_true.
*      ENDIF.
*
*    ENDIF.
*
*    IF l_impresion EQ abap_false.
*      MESSAGE 'No se encuentran datos de cliente o pedido en orden de fabricación. No se imprime etiqueta' TYPE 'I'.
*    ENDIF.
*  ELSE.
*    MESSAGE 'Orden de fabricación en blanco´.No se imprime etiqueta' TYPE 'I'.
*  ENDIF.

ENDFUNCTION.
