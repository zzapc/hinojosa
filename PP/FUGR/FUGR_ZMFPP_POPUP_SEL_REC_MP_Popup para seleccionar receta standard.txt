FUNCTION zmfpp_popup_sel_rec_mp.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_WERKS) TYPE  WERKS_D
*"     REFERENCE(I_CALIDAD) TYPE  ZZCALIDAD
*"  EXPORTING
*"     REFERENCE(O_ID_RECETA) TYPE  ZID_RECETA
*"----------------------------------------------------------------------

*CALL METHOD zclpp_consumo_recetas_mp=>obtener_datos_receta_consumida
*  EXPORTING
*    i_werks                 = i_werks
*    i_id_receta             = i_calidad
*  IMPORTING
*    os_datos_form_receta_mp = data(ls_datos_rec)
*    os_datos_consumo        = data(lt_kg_cons)
*    o_rc                    = data(l_rc).

* Obtención de registros de recetas planificadas de MP
  CALL METHOD zclpp_recetas_mp=>obtener_lista_recetas_mp
    EXPORTING
      i_werks           = i_werks
      i_calidad         = i_calidad
    IMPORTING
      ot_cab_recetas_mp = DATA(lt_40).



  CLEAR g_id_receta.
* Obtener descripción de calidad.
  g_datos_rec_mp = CORRESPONDING #( lt_40 ).
  LOOP AT g_datos_rec_mp ASSIGNING FIELD-SYMBOL(<fs>).
    <fs>-descr_calid = zclpp_recetas_mp=>obtener_descr_calidad(
                                                i_werks   = <fs>-werks
                                                i_calidad = <fs>-zcalidad ).
  ENDLOOP.


  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = go_alv
        CHANGING
          t_table      = g_datos_rec_mp[] ).

    CATCH cx_salv_msg.
  ENDTRY.

* Titulo ALV
  gr_display = go_alv->get_display_settings( ).
  gr_display->set_list_header( 'Seleccionar receta MP' ).

* Grabar disposición.
  CLEAR lv_key.
  lv_key-report         = sy-repid.
*  lv_key_popup-logical_group  = '1'.
  lv_key-handle         = '2'.
  lo_layout = go_alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = go_alv->get_functions( ).
  lr_functions->set_all( 'X' ).

* Formateo de columnas.
  DATA:
    lo_column  TYPE REF TO cl_salv_column,
    lo_columns TYPE REF TO cl_salv_columns_table.

  TRY.
      lo_columns = go_alv->get_columns( ).
      lo_column = lo_columns->get_column( 'ID_RECETA' ).
      lo_column->set_short_text( 'Receta' ).
      lo_column->set_medium_text( 'Receta' ).
      lo_column->set_long_text( 'Receta' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'DESCR_CALID' ).
      lo_column->set_short_text( 'Desc. cal.' ).
      lo_column->set_medium_text( 'Desc. calidad' ).
      lo_column->set_long_text( 'Desc. calidad' ).

    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column = lo_columns->get_column( 'DESCRIP_REC' ).
      lo_column->set_short_text( 'Desc. rec.' ).
      lo_column->set_medium_text( 'Desc. receta' ).
      lo_column->set_long_text( 'Desc. receta' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'OBSERVACIONES' ).
      lo_column->set_short_text( 'Observac.' ).
      lo_column->set_medium_text( 'Observaciones' ).
      lo_column->set_long_text( 'Observaciones' ).

    CATCH cx_root .
  ENDTRY.



  TRY.
      CALL METHOD go_alv->set_screen_status
        EXPORTING
          report        = sy-repid
          pfstatus      = 'STD_ALV_POPUP'
          set_functions = go_alv->c_functions_all.
    CATCH cx_root .
  ENDTRY.

  IF go_alv IS BOUND.

* Assign selection mode: Single
    DATA    lr_selections2            TYPE REF TO cl_salv_selections.
    lr_selections2 = go_alv->get_selections( ).
    lr_selections2->set_selection_mode( if_salv_c_selection_mode=>single ).

*   Get the event object
    DATA: lo_events TYPE REF TO cl_salv_events_table.
    lo_events = go_alv->get_event( ).
*
*   Instantiate the event handler object
    CREATE OBJECT gr_events_pop_mp.
    SET HANDLER gr_events_pop_mp->on_user_command_mp        FOR lo_events.
*    SET HANDLER gr_events_pop_mp->on_link_click               FOR lo_events.

    go_alv->set_screen_popup(
      start_column = 10      "i_start_column
      end_column   = 182    "i_end_column
      start_line   = 1      "i_start_line
      end_line     = 20 ).  "i_end_line

    go_alv->display( ).

  ELSE.
*   mark an already marked item again
    CLEAR lt_selected_rows.
    lr_selections2 = go_alv->get_selections( ).
    lr_selections2->set_selected_rows( lt_selected_rows ).
    IF NOT lv_item_pointer IS INITIAL.
      APPEND lv_item_pointer TO lt_selected_rows.
      lr_selections2->set_selected_rows( lt_selected_rows ).
    ENDIF.

*   refresh table display
    go_alv->refresh( ).
  ENDIF.

  o_id_receta = g_id_receta.


ENDFUNCTION.
