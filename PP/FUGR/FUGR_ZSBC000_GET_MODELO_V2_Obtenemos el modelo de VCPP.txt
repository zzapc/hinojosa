function ZSBC000_GET_MODELO_V2.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     VALUE(I_CUOBJ) TYPE  CUOBJ
*"     VALUE(I_TABIX) TYPE  SYST_TABIX
*"  EXPORTING
*"     VALUE(E_VALUES) TYPE  YHP_IDX_S_BOX_VE
*"     VALUE(ET_VALUES) TYPE  YHP_IDX_TT_BOX_VE
*"----------------------------------------------------------------------

  data: LF_IVEMO_BOX type /VCXI/VKSC_IVEMO value 'IDX_BOX'.
*----------------------------------------------------------------------*

  try.
      data(LF_GVCIN) = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = I_CUOBJ ).
      data(RR_SVC) = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = LF_GVCIN ).
    catch /VCXI/CX_CKX.

  endtry.

*                   CATCH /vcxi/cx_ckx.  " .
  if LF_GVCIN is not initial.
    try.
        data(LT_VALUES) = /VCXI/CL_VKCR_GATEWAY=>GET_VALUE_ALL( IF_GVCIN = LF_GVCIN ).
      catch /VCXI/CX_CKX.    "
    endtry.
  endif.

*** Comprobamos si el material está configurado
  read table LT_VALUES with key ATNAM = 'HP_CONSISTENT'
                           ATWRT = ABAP_TRUE transporting no fields.
  if SY-SUBRC = 0.
    data(LT_SVCEL) = RR_SVC->GET_SVC_ELEMENTS( IF_ID = 'COMP_P1'
                                         IF_INUSE = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).

    data: LR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.

*** Iteramos components para extraer datos
    loop at LT_SVCEL into data(LR_OBJECT).
*      check SY-TABIX = I_TABIX.
      try.
          move LR_OBJECT ?to LR_SVCEL.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_SVCEL.
      endtry.

***   Value Extraction
      try.
          call function 'YHP_IDX_CLEAR_MBOARD'.

***       Get Value Extraction
          data(LR_VALEX) = RR_SVC->GET_VALEX( IF_IVEMO        = LF_IVEMO_BOX
                                              IR_SVC_ELEMENT  = LR_SVCEL ).
          check LR_VALEX is bound.

***       Dereferencing of extracted data
          assign LR_VALEX->* to field-symbol(<S_BOX_VE>).
        catch /VCXI/CX_CKX.
          clear: LR_VALEX.
          return.
      endtry.

      E_VALUES = <S_BOX_VE>.
      append E_VALUES to ET_VALUES.

    endloop.

  endif.


*** Borramos assignaciones
  unassign <S_BOX_VE>.
  clear E_VALUES.

*** Retornamos el componente requerido basado en el indice
  if I_TABIX gt 0.
    read table ET_VALUES assigning <S_BOX_VE> index I_TABIX.
  else.
    read table ET_VALUES assigning <S_BOX_VE> index 1.
  endif.

  check <S_BOX_VE> is assigned.
  move-corresponding <S_BOX_VE> to E_VALUES.

endfunction.
