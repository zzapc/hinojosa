FUNCTION zpp_planproduccion01.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(NUM_ORDEN) TYPE  AUFNR OPTIONAL
*"     VALUE(FECHA_DESDE) TYPE  CHAR10 OPTIONAL
*"     VALUE(SOLO_ABIERTAS) TYPE  XFELD OPTIONAL
*"     VALUE(CENTRO) TYPE  WERKS_D OPTIONAL
*"  EXPORTING
*"     VALUE(T_ZPLANPRODUCCION) TYPE  ZTTPP_PLANPRODUCCION
*"----------------------------------------------------------------------
  TYPES:  BEGIN  OF ty_orden,
            aufnr TYPE aufnr,
            objnr TYPE j_objnr,
          END    OF ty_orden.

  TYPES: ttyp_orden TYPE STANDARD TABLE OF ty_orden.

  TYPES:  BEGIN  OF ty_jest,
            objnr TYPE j_objnr,
            stat  TYPE j_status,
            inact TYPE j_inact,
            txt04 TYPE j_txt04,
          END    OF ty_jest.

  DATA: lt_status  TYPE TABLE OF ty_orden,
        lt_mostrar TYPE TABLE OF ty_orden,
        lt_ordenes TYPE TABLE OF ty_orden,
        lt_jest    TYPE TABLE OF ty_jest.

  DATA: wa_planpro TYPE zspp_planproduccion.

  DATA: t_ordenes_imp  TYPE TABLE OF caufv,
        wa_ordenes_imp TYPE          caufv.

  DATA: wa_order_objects     TYPE          bapi_pi_order_objects,
        wa_order_objects_aux TYPE bapi_pi_order_objects,
        t_return             TYPE          bapiret2,
        t_header             TYPE TABLE OF bapi_order_header1,
        wa_header            TYPE          bapi_order_header1,
        t_position           TYPE TABLE OF bapi_order_item,
        t_sequence           TYPE TABLE OF bapi_order_sequence,
        t_phase              TYPE TABLE OF bapi_order_phase,
        t_phase_aux          TYPE TABLE OF bapi_order_phase,
        t_phase_aux2         TYPE TABLE OF bapi_order_phase,
        wa_phase             TYPE          bapi_order_phase,
        wa_phase_aux         TYPE          bapi_order_phase,
        wa_phase_aux2        TYPE         bapi_order_phase,
        t_trigger_point      TYPE TABLE OF bapi_order_trigger_point,
        t_component          TYPE TABLE OF bapi_order_component,
        wa_component         TYPE          bapi_order_component,
        t_prod_rel_tool      TYPE TABLE OF bapi_order_prod_rel_tools.

  DATA: wa_afvv        TYPE afvv,
        lv_mtart       TYPE mtart,
        lv_matkl       TYPE matkl,
        lv_lib         TYPE flag,
        lv_entr        TYPE flag,
        lv_ctec        TYPE flag,
        lv_cerr        TYPE flag,
        long_text      TYPE char10,
        output         TYPE char10,
        short_text     TYPE char10,
        lv_beskz       TYPE beskz,
        lv_datum_desde TYPE sy-datum,
        lv_datum_hasta TYPE sy-datum,
        lv_fecha       TYPE c LENGTH 10,
        lv_hora        TYPE c LENGTH 8,
        lv_cad(256),
        lv_zzsectmat   TYPE zsectmat,
        lv_iloan       TYPE iloan,
        lv_ubicacion   TYPE tplnr,
        e_tdiff        LIKE  tvro-fahztd,
        lv_minutos     TYPE i,
        lv_lgort       TYPE lgort_d,
        lv_kunnr       TYPE kunnr,
        lv_matnr_pal   TYPE matnr.

  TYPES: BEGIN  OF ty_equnr,
           equnr TYPE equnr,
         END    OF ty_equnr.

  DATA: lt_equnr          TYPE TABLE OF ty_equnr,
        ls_equnr          TYPE ty_equnr,
        lv_contador_equnr TYPE i,
        lv_aufpl          TYPE co_aufpl,
        lv_bearz          TYPE bearzeit,
        lv_beaze          TYPE beaze,
        lv_objnr          TYPE j_objnr.
*  Diferencia de fechas
  DATA: var1 TYPE p DECIMALS 10,
        var2 TYPE i,
        var3 TYPE i.

  TYPES:  BEGIN  OF ty_pal,
            zzunipal    TYPE zzunipal,
            zzunibas    TYPE zzunibas,
            zzunialt    TYPE zzunialt,
            zzcajpaq    TYPE zzcajpaq,
            zzpaqbas    TYPE zzpaqbas,
            zzpaqalt    TYPE zzpaqalt,
            zzcapicu    TYPE zzcapicu,
            zzretrac    TYPE zzretrac,
            zzcajcont	  TYPE zzcajcont,
            zzcanton    TYPE zzcanton,
            zztablero	  TYPE zztablero,
            zzkitcomp	  TYPE zzkitcomp,
            zzpalletlar	TYPE zpalletlar,
            zzpalletanc	TYPE zpalletanc,
            zzlgrealpal	TYPE zzlgrealpal,
            zzanrealpal	TYPE zzanrealpal,
            zzalrealpal	TYPE zzalrealpal,
            zzobspalet  TYPE zzobspalet,
          END    OF ty_pal.

  DATA: ls_pal TYPE ty_pal.

  TYPES:  BEGIN  OF ty_aufk,
            zzaufnr_ext	    TYPE zzaufnr_ext,
            zzlgort	        TYPE zzlgort,
            zzkunnr4        TYPE zzkunnr4,
            zzebeln4        TYPE zzebeln4,
            zzebelp4        TYPE zzebelp4,
            zzmatventa      TYPE zzmatventa,
            zzteji          TYPE zzteji,
            zzcoex          TYPE zzcoex,
            zzttocorona     TYPE zzttocorona,
            zzadignifugo    TYPE zzadignifugo,
            zzaduv          TYPE zzaduv,
            zzadantest      TYPE zzadantest,
            zzadanthum      TYPE zzadanthum,
            zzadespum       TYPE zzadespum,
            zzlargfab	      TYPE zzlargfab,
            zzacnhofab      TYPE zzacnhofab,
            zzlargminfab    TYPE zzlargminfab,
            zzlargmaxfab    TYPE zzlargmaxfab,
            zzpesoteopl	    TYPE zzpesoteopl,
            zzanchminfab    TYPE zanchminfab,
            zzanchmaxfab    TYPE zzanchmaxfab,
            zzpesoteominpl  TYPE zzpesoteominpl,
            zzpesoteomaxpl  TYPE zzpesoteomaxpl,
            zzespmaxpl      TYPE zzespmaxpl,
            zzespminpl      TYPE zzespminpl,
            zzdestcmcr      TYPE zzdestino,
            zzimpresion	    TYPE zzimpresion,
            zzconductividad TYPE zzconductividad,
            zzgramajeinput  TYPE zzgramajeinput,
          END    OF ty_aufk.

  DATA: ls_aufk TYPE ty_aufk.

  TYPES: BEGIN OF ty_mara,
           zzespesor  TYPE zespesor,
           zzgrampla  TYPE zgrampla,
           zzgramfin  TYPE zgramfin,
           zzcolor    TYPE zzcolor,
           zzaptoalim TYPE zaptoalim,
           zzplaannt  TYPE zplaannt,
           zzplalgnt  TYPE zplalgnt,
           zzhend01	  TYPE zhend01,
           zzhend02	  TYPE zhend02,
           zzhend03   TYPE zhend03,
           zzhend04   TYPE zhend04,
           zzhend05   TYPE zhend05,
           zzhend06   TYPE zhend06,
           ntgew      TYPE ntgew,  " cvivo - 46030 - 02.05.2018 Peso para conversión a planchas/hora
         END OF ty_mara.

  DATA: ls_mara      TYPE ty_mara.
  DATA: lv_street     TYPE ad_street,
        lv_post_code1 TYPE ad_pstcd1,
        lv_city1      TYPE ad_city1,
        lv_region     TYPE regio,
        lv_country    TYPE land1,
        lv_adrnr      TYPE ad_addrnum,
        lv_landx      TYPE landx,
        lv_bezei      TYPE bezei,
        lv_name1      TYPE name1,
        lv_contador   TYPE i,
        lv_num_reg    TYPE i,
        lv_cont_lines TYPE i,
        lv_stat	      TYPE j_status.

  DATA: lv_orden TYPE aufnr.
  FIELD-SYMBOLS: <fs_orden> TYPE ty_orden.

  IF num_orden IS NOT INITIAL.
**  Ponemos ceros a la orden
    lv_orden = |{ num_orden ALPHA = IN }|.

**  Montamos cadena para pasar al select
    CONCATENATE lv_cad 'caufv~aufnr = lv_orden AND autyp = `40` AND (auart = `ZC01` OR auart = `ZC02` OR auart = `ZC03` OR auart = `ZC04`)' INTO lv_cad.

**  Sino, si la fecha desde no es inicial
  ELSEIF fecha_desde IS NOT INITIAL.
    CONCATENATE fecha_desde(4) fecha_desde+5(2) fecha_desde+8(2) INTO lv_datum_desde.
    lv_datum_hasta = '99991231'.

    IF centro IS NOT INITIAL.
      CONCATENATE lv_cad 'werks = centro AND' INTO lv_cad.
    ENDIF.

**  Montamos cadena para pasar al select
    CONCATENATE lv_cad ' (gstrs >= lv_datum_desde AND gstrs <= lv_datum_hasta )  AND autyp = `40` AND (auart = `ZC01` OR auart = `ZC02` OR auart = `ZC03` OR auart = `ZC04`)' INTO lv_cad SEPARATED BY space.
**  Sino,
  ELSE.
    IF centro IS NOT INITIAL.
      CONCATENATE lv_cad 'werks = centro AND' INTO lv_cad.
    ENDIF.
**  Montamos cadena para pasar al select
    CONCATENATE lv_cad 'autyp = `40` AND (auart = `ZC01` OR auart = `ZC02` OR auart = `ZC03` OR auart = `ZC04`)' INTO lv_cad SEPARATED BY space.
  ENDIF.

  SELECT aufnr
         objnr
   FROM caufv
   INTO TABLE lt_ordenes
    WHERE (lv_cad).

  IF num_orden IS INITIAL.
    IF solo_abiertas = 'X'. "'X' = PLANIFICADAS EN FIRME
**  Recuperamos los status de las ordenes
      IF lt_ordenes[] IS NOT INITIAL.
        SELECT objnr stat inact txt04 FROM jest AS a
          INNER JOIN tj02t AS b ON a~stat = b~istat
          INTO TABLE lt_jest
          FOR ALL ENTRIES IN lt_ordenes
          WHERE objnr = lt_ordenes-objnr
            AND ( stat  = 'I0002') "OR stat  = 'I0012' )
            AND inact = ''
            AND spras = 'S'.
      ENDIF.

**  Status activo liberadas y que no estén entregadas totalmente
      LOOP AT lt_ordenes ASSIGNING <fs_orden>.
        READ TABLE lt_jest ASSIGNING FIELD-SYMBOL(<fs_jest>) WITH KEY objnr = <fs_orden>-objnr
                                                                      stat  = 'I0002'
                                                                      inact = ''.
        IF sy-subrc = 0.
          APPEND <fs_orden> TO lt_status.
        ENDIF.
      ENDLOOP.

    ELSE. "'' = CERRADAS
      IF lt_ordenes[] IS NOT INITIAL.
**  Recuperamos los status de las ordenes
        SELECT objnr stat inact txt04 FROM jest AS a
          INNER JOIN tj02t AS b ON a~stat = b~istat
          INTO TABLE lt_jest
          FOR ALL ENTRIES IN lt_ordenes
          WHERE objnr = lt_ordenes-objnr
            AND ( stat  = 'I0002' OR stat  = 'I0045' OR stat  = 'I0076' OR stat  = 'I0046' )
            AND inact = ''
            AND spras = 'S'.
      ENDIF.
**  Iteramos sobre las ordenes
      LOOP AT lt_ordenes ASSIGNING <fs_orden>.
**  Status activo liberadas y entregadas totalmente
        READ TABLE lt_jest ASSIGNING <fs_jest> WITH KEY objnr = <fs_orden>-objnr
                                                        stat  = 'I0002'
                                                        inact = ''.
        IF sy-subrc = 0.
          APPEND <fs_orden> TO lt_status.
          CONTINUE.
        ENDIF.

**  Status activo cerradas técnicamente y que no tengan estatus Petición borrado activo
        READ TABLE lt_jest ASSIGNING <fs_jest> WITH KEY objnr = <fs_orden>-objnr
                                                stat = 'I0045'
                                                inact = ''.
        IF sy-subrc = 0.
          READ TABLE lt_jest ASSIGNING <fs_jest> WITH KEY objnr = <fs_orden>-objnr
                                                  stat = 'I0076'.
          IF sy-subrc <> 0.
            APPEND <fs_orden> TO lt_status.
          ELSEIF <fs_jest>-inact = 'X'.
            APPEND <fs_orden> TO lt_status.
          ENDIF.
          CONTINUE.
        ENDIF.

*       status activo cerradas y que no tengan estatus Petición borrado activo
        READ TABLE lt_jest ASSIGNING <fs_jest> WITH KEY objnr = <fs_orden>-objnr
                                                stat = 'I0046'
                                                inact = ''.
        IF sy-subrc = 0.
          READ TABLE lt_jest ASSIGNING <fs_jest> WITH KEY objnr = <fs_orden>-objnr
                                                  stat = 'I0076'.
          IF sy-subrc <> 0.
            APPEND <fs_orden> TO lt_status.
          ELSEIF <fs_jest>-inact = 'X'.
            APPEND <fs_orden> TO lt_status.
          ENDIF.
          CONTINUE.
        ENDIF.

      ENDLOOP.

    ENDIF.
  ELSE.
    lt_status[] = lt_ordenes[].
  ENDIF.

  IF lt_status[] IS NOT INITIAL.

    LOOP AT lt_status ASSIGNING <fs_orden>.

      CLEAR: t_header, t_position, t_sequence, t_phase,
         t_trigger_point, t_component, t_prod_rel_tool.
      REFRESH: t_header, t_position, t_sequence, t_phase,
               t_trigger_point, t_component, t_prod_rel_tool.

**  Indicamos las estructuras a obtener.
      wa_order_objects-header = 'X'.
      wa_order_objects-positions = ''.
      wa_order_objects-sequences = ''.
      wa_order_objects-phases = 'X'.
      wa_order_objects-components = ''.
      wa_order_objects-prod_rel_tools = ''.
      wa_order_objects-trigger_points = ''.
      wa_order_objects-secondary_resources = ''.

      CALL FUNCTION 'BAPI_PROCORD_GET_DETAIL'
        EXPORTING
          number        = <fs_orden>-aufnr
          order_objects = wa_order_objects
        IMPORTING
          return        = t_return
        TABLES
          header        = t_header
          position      = t_position
          sequence      = t_sequence
          phase         = t_phase
          trigger_point = t_trigger_point
          component     = t_component
          prod_rel_tool = t_prod_rel_tool.

      t_phase_aux[] = t_phase[].
      CLEAR wa_phase.
      DELETE t_phase WHERE superior_operation EQ ''.
      DESCRIBE TABLE t_phase LINES lv_num_reg.
      CLEAR lv_cont_lines.
      LOOP AT t_phase INTO wa_phase." WHERE superior_operation <> ''.
        lv_cont_lines = lv_cont_lines + 1.
        READ TABLE t_header INTO wa_header INDEX 1.
        IF sy-subrc = 0.
          " Número de la OF
          CLEAR wa_planpro.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = wa_header-order_number
            IMPORTING
              output = wa_planpro-numeroorden.
        ENDIF.

**   Recuepramos los datos para despues calcular el coste catidad/hora
        CLEAR lv_aufpl.
        SELECT SINGLE aufpl INTO lv_aufpl
          FROM afko
          WHERE aufnr EQ wa_header-order_number.

        IF lv_aufpl IS NOT INITIAL.
          CLEAR: lv_bearz, lv_beaze,lv_objnr.
          SELECT SINGLE bearz beaze objnr INTO ( lv_bearz, lv_beaze, lv_objnr )
            FROM afvv INNER JOIN afvc ON afvv~aufpl EQ afvc~aufpl
            AND afvv~aplzl EQ afvc~aplzl
            WHERE afvv~aufpl EQ lv_aufpl AND afvc~vornr EQ wa_phase-operation_number.
        ENDIF.

**  Descartamos las operaciones con el flag de peticion de borrado.
        IF lv_objnr IS NOT INITIAL.
          CLEAR lv_stat.
          SELECT SINGLE stat INTO lv_stat
            FROM jest
            WHERE objnr EQ lv_objnr AND stat EQ 'I0013' AND inact <> 'X'.

          IF lv_stat IS NOT INITIAL.
            CONTINUE.
          ENDIF.
        ENDIF.

**  Fechaprefabricación
        CONCATENATE wa_header-production_start_date wa_header-sched_start_time INTO wa_planpro-fechapreffabricacion.
**  Numero linea
        IF wa_phase-control_key EQ 'ZP05'.
          wa_planpro-numerolinea = 'SUBCO01'.
        ELSE.
          wa_planpro-numerolinea = wa_phase-resource.
        ENDIF.
**  Codigo
        wa_planpro-codigo = wa_header-material.
**  Operación
        wa_planpro-operacion = wa_phase-operation_number.
**  Descripcion
        wa_planpro-descripcion = wa_header-material_text.
**  CantidadFabricarOF
        MOVE wa_header-target_quantity TO wa_planpro-cantidadfabricarof.
**  Tipo de producto
        IF wa_header-order_type EQ 'ZC01'.
          wa_planpro-tipoproducto = 'P'.
        ENDIF.

        IF wa_header-order_type EQ 'ZC02'.
          IF lv_cont_lines EQ lv_num_reg.
            wa_planpro-tipoproducto = 'T'.
          ELSE.
            wa_planpro-tipoproducto = 'W'.
          ENDIF.
        ENDIF.

        IF wa_header-order_type EQ 'ZC04'.
          wa_planpro-tipoproducto = 'E'.
        ENDIF.

**  Familia producto
        CLEAR lv_matkl.
        SELECT SINGLE matkl FROM mara
        INTO lv_matkl
        WHERE matnr = wa_header-material.

        IF lv_matkl IS NOT INITIAL.
          SELECT SINGLE wgbez FROM t023t
            INTO wa_planpro-familiaproducto
            WHERE spras = 'S' AND
                  matkl = lv_matkl.
        ENDIF.

        CLEAR :output.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
          EXPORTING
            input          = wa_header-unit
            language       = sy-langu
          IMPORTING
            long_text      = long_text
            output         = output
            short_text     = short_text
          EXCEPTIONS
            unit_not_found = 1
            OTHERS         = 2.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.

        MOVE output TO wa_planpro-unidadmedidacodigo.

        wa_planpro-huellasteoricasobj = '1'.
        wa_planpro-factorconversion = '1'.

**  golpesHora
        IF lv_bearz IS NOT INITIAL AND  lv_beaze IS NOT INITIAL AND lv_bearz NE 0.
          IF lv_beaze EQ 'S'.
            wa_planpro-golpeshorasistemamarcha =  wa_phase-quantity / ( lv_bearz / 3600 ).
          ENDIF.
          IF lv_beaze EQ 'H'.
            wa_planpro-golpeshorasistemamarcha =  wa_phase-quantity / lv_bearz.
          ENDIF.
          IF lv_beaze EQ 'MIN'.
            wa_planpro-golpeshorasistemamarcha =  wa_phase-quantity / ( lv_bearz / 60 ).
          ENDIF.
        ENDIF.

**  Almacen(Para ZC04 recuperarlo de la tabla AFPO)
*        IF wa_header-order_type EQ 'ZC04'.
        SELECT SINGLE lgort INTO wa_planpro-almacen
          FROM afpo
          WHERE aufnr EQ wa_header-order_number AND matnr EQ wa_header-material.
*        ELSE.
*          SELECT SINGLE zzlgort INTO wa_planpro-almacen
*            FROM aufk
*            WHERE aufnr EQ wa_header-order_number.
*        ENDIF.

**  FactorCiclosPiezaBuenaMaquina
        IF wa_header-order_type EQ 'ZC02'.
          IF wa_phase-control_recipe_destination EQ 'Z4'.

            DATA: lv_zzcopiatro TYPE zcopiatro.
            SELECT SINGLE zzcopiatro INTO lv_zzcopiatro
            FROM aufk
            WHERE aufnr EQ wa_header-order_number.

            IF lv_zzcopiatro IS NOT INITIAL.
              SELECT SINGLE pzagolt INTO wa_planpro-factorciclospiezabuenamaquina
                FROM ztpm0001
                WHERE copiatro EQ lv_zzcopiatro.

              SELECT SINGLE pzagolt INTO wa_planpro-factorciclospiezaprocesadamaqu
                FROM ztpm0001
                WHERE copiatro EQ lv_zzcopiatro.
            ENDIF.

            IF wa_planpro-factorciclospiezabuenamaquina IS INITIAL.
              wa_planpro-factorciclospiezabuenamaquina = '1'.
            ENDIF.

            IF wa_planpro-factorciclospiezaprocesadamaqu IS INITIAL.
              wa_planpro-factorciclospiezaprocesadamaqu = '1'.
            ENDIF.
          ELSE.
            wa_planpro-factorciclospiezabuenamaquina = '1'.
            wa_planpro-factorciclospiezaprocesadamaqu = '1'.
          ENDIF.
        ELSE.
          wa_planpro-factorciclospiezabuenamaquina = '1'.
          wa_planpro-factorciclospiezaprocesadamaqu = '1'.
        ENDIF.

**  Status orden
        IF wa_header-system_status IS NOT INITIAL.
          IF ( wa_header-system_status CS 'LIB.' AND wa_header-system_status CS 'ENTR' ) OR wa_header-system_status CS 'CTEC'.
            wa_planpro-estadoorden = '6'.
          ELSEIF ( wa_header-system_status CS 'LIB.' AND ( NOT wa_header-system_status CS 'ENTR' ) ) OR ( wa_header-system_status CS 'REL' AND ( NOT wa_header-system_status CS 'DLV' ) ).
            MOVE '2' TO wa_planpro-estadoorden.
          ENDIF.
        ENDIF.

***  Metadatos
        CLEAR ls_mara.
        SELECT SINGLE zzespesor
                      zzgrampla
                      zzgramfin
                      zzcolor
                      zzaptoalim
                      zzplaannt
                      zzplalgnt
                      zzhend01
                      zzhend02
                      zzhend03
                      zzhend04
                      zzhend05
                      zzhend06
                      ntgew " cvivo - 46030 - 02.05.2018 Peso para conversión a planchas/hora
          INTO ls_mara
          FROM mara
          WHERE matnr EQ wa_header-material.

        CLEAR lv_zzsectmat.
        SELECT SINGLE zzsectmat INTO lv_zzsectmat
          FROM marc
           WHERE matnr EQ wa_header-material AND werks EQ '4000'.

        CLEAR ls_aufk.

* ini 09.03.2018 - cvivo - 46030 Velocidad objetivo y máxima desde ZTPP0025
        IF ls_mara-zzgrampla GT 0. " si hay tamaño plancha intento buscar el rango correspondiente
          SELECT SINGLE * FROM ztpp0025
            WHERE werks     EQ @wa_header-production_plant
              AND zzsectmat EQ @lv_zzsectmat " primero vemos si para el sector hay
              AND zzgrampla_desde LE @ls_mara-zzgrampla
              AND zzgrampla_hasta GE @ls_mara-zzgrampla
              AND arbpl     EQ @wa_planpro-numerolinea
              INTO @DATA(ls_ztpp0025).

          IF sy-subrc EQ 0." si hay entrada aquí, sobreescribimos las velocidades calculadas antes
            IF ls_ztpp0025-conversion IS NOT INITIAL AND ls_mara-ntgew NE 0. " cvivo - 46030 - 02.05.2018 Peso para conversión a planchas/hora
              wa_planpro-golpeshorasistemamarcha  = ls_ztpp0025-vel_obj / ls_mara-ntgew.
              wa_planpro-golpeshoramaxsistema     = ls_ztpp0025-vel_max / ls_mara-ntgew.
            ELSE.
              wa_planpro-golpeshorasistemamarcha  = ls_ztpp0025-vel_obj.
              wa_planpro-golpeshoramaxsistema     = ls_ztpp0025-vel_max.
            ENDIF.
          ELSE.
            SELECT SINGLE * FROM ztpp0025
              INTO ls_ztpp0025
              WHERE werks     EQ wa_header-production_plant "luego probamos sin sector
                AND zzsectmat EQ space
                AND zzgrampla_desde LE ls_mara-zzgrampla
                AND zzgrampla_hasta GE ls_mara-zzgrampla
                AND arbpl     EQ wa_planpro-numerolinea.

            IF sy-subrc EQ 0." si hay entrada aquí, sobreescribimos las velocidades calculadas antes
              IF ls_ztpp0025-conversion IS NOT INITIAL AND ls_mara-ntgew NE 0. " cvivo - 46030 - 02.05.2018 Peso para conversión a planchas/hora
                wa_planpro-golpeshorasistemamarcha  = ls_ztpp0025-vel_obj / ls_mara-ntgew.
                wa_planpro-golpeshoramaxsistema     = ls_ztpp0025-vel_max / ls_mara-ntgew.
              ELSE.
                wa_planpro-golpeshorasistemamarcha  = ls_ztpp0025-vel_obj.
                wa_planpro-golpeshoramaxsistema     = ls_ztpp0025-vel_max.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

        IF ls_ztpp0025 IS INITIAL. " si no hay gramaje plancha, busco entradas sin rango de gramaje
          SELECT SINGLE * FROM ztpp0025
            INTO ls_ztpp0025
            WHERE werks     EQ wa_header-production_plant "luego probamos sin sector
              AND zzsectmat EQ lv_zzsectmat " primero vemos si para el sector hay
              AND zzgrampla_desde EQ 0
              AND zzgrampla_hasta EQ 0
              AND arbpl     EQ wa_planpro-numerolinea.

          IF sy-subrc EQ 0." si hay entrada aquí, sobreescribimos las velocidades calculadas antes
            IF ls_ztpp0025-conversion IS NOT INITIAL AND ls_mara-ntgew NE 0. " cvivo - 46030 - 02.05.2018 Peso para conversión a planchas/hora
              wa_planpro-golpeshorasistemamarcha  = ls_ztpp0025-vel_obj / ls_mara-ntgew.
              wa_planpro-golpeshoramaxsistema     = ls_ztpp0025-vel_max / ls_mara-ntgew.
            ELSE.
              wa_planpro-golpeshorasistemamarcha  = ls_ztpp0025-vel_obj.
              wa_planpro-golpeshoramaxsistema     = ls_ztpp0025-vel_max.
            ENDIF.
          ELSE.
            SELECT SINGLE * FROM ztpp0025
              INTO ls_ztpp0025
              WHERE werks     EQ wa_header-production_plant "luego probamos sin sector
                AND zzsectmat EQ space
                AND zzgrampla_desde EQ 0
                AND zzgrampla_hasta EQ 0
                AND arbpl     EQ wa_planpro-numerolinea.

            IF sy-subrc EQ 0." si hay entrada aquí, sobreescribimos las velocidades calculadas antes
              IF ls_ztpp0025-conversion IS NOT INITIAL AND ls_mara-ntgew NE 0. " cvivo - 46030 - 02.05.2018 Peso para conversión a planchas/hora
                wa_planpro-golpeshorasistemamarcha  = ls_ztpp0025-vel_obj / ls_mara-ntgew.
                wa_planpro-golpeshoramaxsistema     = ls_ztpp0025-vel_max / ls_mara-ntgew.
              ELSE.
                wa_planpro-golpeshorasistemamarcha  = ls_ztpp0025-vel_obj.
                wa_planpro-golpeshoramaxsistema     = ls_ztpp0025-vel_max.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
*        IF ls_ztpp0025-conversion_poses IS NOT INITIAL. " ahora lo convertimos en función de las poses
        IF wa_planpro-factorciclospiezabuenamaquina GT 0.
          wa_planpro-golpeshorasistemamarcha = wa_planpro-golpeshorasistemamarcha * wa_planpro-factorciclospiezabuenamaquina.
          wa_planpro-golpeshoramaxsistema = wa_planpro-golpeshoramaxsistema * wa_planpro-factorciclospiezabuenamaquina.
        ENDIF.
*        ENDIF.
        CLEAR ls_ztpp0025.
* fin 09.03.2018 - cvivo - 46030

**  Tolerancias de Trabajo
        SELECT SINGLE
                      zzaufnr_ext
                      zzlgort
                      zzkunnr4
                      zzebeln4
                      zzebelp4
                      zzmatventa
                      zzteji
                      zzcoex
                      zzttocorona
                      zzadignifugo
                      zzaduv
                      zzadantest
                      zzadanthum
                      zzadespum
                      zzlargfab
                      zzacnhofab
                      zzlargminfab
                      zzlargmaxfab
                      zzpesoteopl
                      zzanchminfab
                      zzanchmaxfab
                      zzpesoteominpl
                      zzpesoteomaxpl
                      zzespmaxpl
                      zzespminpl
                      zzdestcmcr
                      zzimpresion
                      zzconductividad
                      zzgramajeinput
          INTO ls_aufk
          FROM aufk
          WHERE aufnr EQ wa_header-order_number.

**  Metadatos caracteristicas
        wa_planpro-metadatos-caracteristicas-gramaje = ls_mara-zzgrampla.
        wa_planpro-metadatos-caracteristicas-color = ls_mara-zzcolor.
        wa_planpro-metadatos-caracteristicas-sector = lv_zzsectmat.
        wa_planpro-metadatos-caracteristicas-ancho = ls_mara-zzplaannt.

**  Metadatos Vistacliente
        wa_planpro-metadatos-vistacliente-hendido01 = ls_mara-zzhend01.
        wa_planpro-metadatos-vistacliente-hendido02 = ls_mara-zzhend02.
        wa_planpro-metadatos-vistacliente-hendido03 = ls_mara-zzhend03.
        wa_planpro-metadatos-vistacliente-hendido04 = ls_mara-zzhend04.
        wa_planpro-metadatos-vistacliente-hendido05 = ls_mara-zzhend05.
        wa_planpro-metadatos-vistacliente-hendido06 = ls_mara-zzhend06.
        wa_planpro-metadatos-vistacliente-ancho_max_fab = ls_aufk-zzanchmaxfab.
        wa_planpro-metadatos-vistacliente-ancho_min_fab = ls_aufk-zzanchminfab.
        wa_planpro-metadatos-vistacliente-ancho_plancha = ls_mara-zzplaannt.
        IF ls_mara-zzaptoalim EQ 'S'.
          wa_planpro-metadatos-vistacliente-apto_alimentario = 'Si'.
        ELSE.
          wa_planpro-metadatos-vistacliente-apto_alimentario = 'No'.
        ENDIF.
        wa_planpro-metadatos-vistacliente-destino_de_plancha = ls_aufk-zzdestcmcr.
        wa_planpro-metadatos-vistacliente-largo_max_fab = ls_aufk-zzlargmaxfab.
        wa_planpro-metadatos-vistacliente-largo_min_fab = ls_aufk-zzlargminfab.
        wa_planpro-metadatos-vistacliente-largo_plancha =  ls_mara-zzplalgnt.
**  Pasamos de KG a G.
        IF lv_matkl = '90220'.
          wa_planpro-metadatos-vistacliente-peso_max = ls_aufk-zzpesoteomaxpl * 1000.
          wa_planpro-metadatos-vistacliente-peso_min = ls_aufk-zzpesoteominpl  * 1000.
          wa_planpro-metadatos-vistacliente-peso_teorico = ls_aufk-zzpesoteopl  * 1000.
        ELSE.

          wa_planpro-metadatos-vistacliente-peso_max = ls_aufk-zzpesoteomaxpl.
          wa_planpro-metadatos-vistacliente-peso_min = ls_aufk-zzpesoteominpl.
          wa_planpro-metadatos-vistacliente-peso_teorico = ls_aufk-zzpesoteopl.

        ENDIF.
        wa_planpro-metadatos-vistacliente-producto_de_venta = ls_aufk-zzmatventa.
        wa_planpro-metadatos-vistacliente-espesor_maximo = ls_aufk-zzespmaxpl.
        wa_planpro-metadatos-vistacliente-espesor_minimo = ls_aufk-zzespminpl.
        wa_planpro-metadatos-vistacliente-gramaje_input = ls_aufk-zzgramajeinput.
        wa_planpro-metadatos-vistacliente-ancho_fab = ls_aufk-zzacnhofab.
        wa_planpro-metadatos-vistacliente-largo_fab = ls_aufk-zzlargfab.
        wa_planpro-metadatos-vistacliente-espesor = ls_mara-zzespesor.
        wa_planpro-metadatos-vistacliente-gramaje_plancha = ls_mara-zzgrampla.
        wa_planpro-metadatos-vistacliente-gramaje_final = ls_mara-zzgramfin.

**  Metadatos configuraciones
        IF ls_aufk-zzadantest IS NOT INITIAL.
          wa_planpro-metadatos-configuraciones-anti_estatico = 'Si'.
        ELSE.
          wa_planpro-metadatos-configuraciones-anti_estatico = 'No'.
        ENDIF.

        IF ls_aufk-zzadanthum IS NOT INITIAL.
          wa_planpro-metadatos-configuraciones-anti_humedad = 'Si'.
        ELSE.
          wa_planpro-metadatos-configuraciones-anti_humedad = 'No'.
        ENDIF.

        IF ls_aufk-zzcoex IS NOT INITIAL.
          wa_planpro-metadatos-configuraciones-coextrusion = 'Si'.
        ELSE.
          wa_planpro-metadatos-configuraciones-coextrusion = 'No'.
        ENDIF.

        IF ls_aufk-zzconductividad IS NOT INITIAL.
          wa_planpro-metadatos-configuraciones-conductividad = 'Si'.
        ELSE.
          wa_planpro-metadatos-configuraciones-conductividad = 'No'.
        ENDIF.

        IF ls_aufk-zzttocorona IS NOT INITIAL.
          wa_planpro-metadatos-configuraciones-corona = 'Si'.
        ELSE.
          wa_planpro-metadatos-configuraciones-corona = 'No'.
        ENDIF.

        IF ls_aufk-zzadespum IS NOT INITIAL.
          wa_planpro-metadatos-configuraciones-espumante = 'Si'.
        ELSE.
          wa_planpro-metadatos-configuraciones-espumante = 'No'.
        ENDIF.

        IF ls_aufk-zzadignifugo IS NOT INITIAL.
          wa_planpro-metadatos-configuraciones-ignifugo = 'Si'.
        ELSE.
          wa_planpro-metadatos-configuraciones-ignifugo = 'No'.
        ENDIF.

        IF ls_aufk-zzaduv IS NOT INITIAL.
          wa_planpro-metadatos-configuraciones-uv = 'Si'.
        ELSE.
          wa_planpro-metadatos-configuraciones-uv = 'No'.
        ENDIF.

        IF ls_aufk-zzimpresion IS NOT INITIAL.
          wa_planpro-metadatos-configuraciones-impresion = 'Si'.
        ELSE.
          wa_planpro-metadatos-configuraciones-impresion = 'No'.
        ENDIF.

        IF ls_aufk-zzteji IS NOT INITIAL.
          wa_planpro-metadatos-configuraciones-tejido = 'Si'.
        ELSE.
          wa_planpro-metadatos-configuraciones-tejido = 'No'.
        ENDIF.

        IF wa_header-order_type EQ 'ZC02'. "Utillajes solo para ZC02

          REFRESH lt_equnr[].
          SELECT equnr INTO TABLE lt_equnr
            FROM ztpp0013
            WHERE aufnr EQ wa_header-order_number AND vornr EQ wa_phase-operation_number AND zzptbo EQ ''.

          IF lt_equnr[] IS NOT INITIAL.

            CLEAR lv_contador_equnr.
            LOOP AT lt_equnr INTO ls_equnr.

              lv_contador_equnr = lv_contador_equnr + 1.

              CLEAR lv_iloan.
              SELECT SINGLE iloan INTO lv_iloan
                FROM equz
                WHERE equnr EQ ls_equnr-equnr AND datbi > sy-datum.

              IF lv_iloan IS NOT INITIAL.

                CLEAR lv_ubicacion.
                SELECT SINGLE tplnr INTO lv_ubicacion
                  FROM iloa
                  WHERE iloan EQ lv_iloan.

              ENDIF.

              CASE lv_contador_equnr.
                WHEN 1.
                  wa_planpro-metadatos-utillajes-numero_utillaje1 = ls_equnr-equnr.
                  wa_planpro-metadatos-utillajes-ubicacion1 = lv_ubicacion.
                WHEN 2.
                  wa_planpro-metadatos-utillajes-numero_utillaje2 = ls_equnr-equnr.
                  wa_planpro-metadatos-utillajes-ubicacion2 = lv_ubicacion.
                WHEN 3.
                  wa_planpro-metadatos-utillajes-numero_utillaje3 = ls_equnr-equnr.
                  wa_planpro-metadatos-utillajes-ubicacion3 = lv_ubicacion.
                WHEN 4.
                  wa_planpro-metadatos-utillajes-numero_utillaje4 = ls_equnr-equnr.
                  wa_planpro-metadatos-utillajes-ubicacion4 = lv_ubicacion.
                WHEN 5.
                  wa_planpro-metadatos-utillajes-numero_utillaje5 = ls_equnr-equnr.
                  wa_planpro-metadatos-utillajes-ubicacion5 = lv_ubicacion.
              ENDCASE.

            ENDLOOP.
          ENDIF.
        ENDIF.

**  Metadatos paletizado
        CLEAR lv_matnr_pal.
        IF wa_header-order_type EQ 'ZC01'.
          lv_matnr_pal = wa_header-material.
        ENDIF.

        IF wa_header-order_type EQ 'ZC02'.
          IF ls_aufk-zzmatventa IS NOT INITIAL.
            lv_matnr_pal = ls_aufk-zzmatventa.
          ELSE.
            lv_matnr_pal = wa_header-material.
          ENDIF.
        ENDIF.

        IF wa_header-order_type EQ 'ZC04'.
          lv_matnr_pal = wa_header-material.
        ENDIF.

        CLEAR ls_pal.
        SELECT SINGLE  zzunipal zzunibas zzunialt zzcajpaq
                       zzpaqbas zzpaqalt zzcapicu zzretrac zzcajcont
                       zzcanton zztablero zzkitcomp
                       zzpalletlar zzpalletanc zzlgrealpal
                       zzanrealpal zzalrealpal zzobspalet
          INTO ls_pal
          FROM zmarcpalet
          WHERE matnr EQ lv_matnr_pal AND werks EQ '4000' AND  kunnr EQ ls_aufk-zzkunnr4.

        IF ls_pal IS INITIAL.

          CLEAR ls_pal.
          SELECT SINGLE  zzunipal zzunibas zzunialt zzcajpaq
                         zzpaqbas zzpaqalt zzcapicu zzretrac zzcajcont
                         zzcanton zztablero zzkitcomp
                         zzpalletlar zzpalletanc zzlgrealpal
                         zzanrealpal zzalrealpal zzobspalet
            INTO ls_pal
            FROM zmarcpalet
            WHERE matnr EQ lv_matnr_pal AND werks EQ '4000' AND kunnr EQ ''.

        ENDIF.

        wa_planpro-metadatos-datos_de_paletizado-alto_pallet_real = ls_pal-zzalrealpal.
        wa_planpro-metadatos-datos_de_paletizado-ancho_pallet = ls_pal-zzpalletanc.
        wa_planpro-metadatos-datos_de_paletizado-ancho_pallet_real = ls_pal-zzanrealpal.
        wa_planpro-metadatos-datos_de_paletizado-caja_contenedora = ls_pal-zzcajcont.
        wa_planpro-metadatos-datos_de_paletizado-cantoneras = ls_pal-zzcanton.
        wa_planpro-metadatos-datos_de_paletizado-capiculado = ls_pal-zzcapicu.
        wa_planpro-metadatos-datos_de_paletizado-kits_completos = ls_pal-zzkitcomp.
        wa_planpro-metadatos-datos_de_paletizado-largo_pallet = ls_pal-zzpalletlar.
        wa_planpro-metadatos-datos_de_paletizado-largo_pallet_real = ls_pal-zzlgrealpal.
        wa_planpro-metadatos-datos_de_paletizado-observaciones_paletizado = ls_pal-zzobspalet.
        wa_planpro-metadatos-datos_de_paletizado-paquetes_por_altura = ls_pal-zzpaqalt.
        wa_planpro-metadatos-datos_de_paletizado-paquetes_por_base = ls_pal-zzpaqbas.
        wa_planpro-metadatos-datos_de_paletizado-retractilado = ls_pal-zzretrac.
        wa_planpro-metadatos-datos_de_paletizado-tablero = ls_pal-zztablero.
        wa_planpro-metadatos-datos_de_paletizado-unidades_altura = ls_pal-zzunialt.
        wa_planpro-metadatos-datos_de_paletizado-unidades_por_base = ls_pal-zzunibas.
        wa_planpro-metadatos-datos_de_paletizado-unidades_por_pallet = ls_pal-zzunipal.
        wa_planpro-metadatos-datos_de_paletizado-unidades_por_paquete = ls_pal-zzcajpaq.

**  Metadatos Etiquetado
**  Direccion del cliente
        IF ls_aufk-zzdestcmcr EQ 'C' OR ls_aufk-zzdestcmcr IS INITIAL.

          CLEAR lv_kunnr.
          SELECT SINGLE kunnr INTO lv_kunnr
            FROM vbpa
            WHERE vbeln EQ ls_aufk-zzebeln4 AND parvw = 'WE'.

          wa_planpro-metadatos-etiquetado-cliente = ls_aufk-zzkunnr4.

          CLEAR lv_name1.
          SELECT SINGLE name1 INTO lv_name1
            FROM kna1
            WHERE kunnr EQ ls_aufk-zzkunnr4.

          CLEAR:lv_street, lv_post_code1, lv_city1.
          SELECT SINGLE  street post_code1 city1 INTO (lv_street, lv_post_code1, lv_city1)
            FROM adrc INNER JOIN kna1 ON adrc~addrnumber = kna1~adrnr
            WHERE kna1~kunnr EQ lv_kunnr.

          wa_planpro-metadatos-etiquetado-nom_cliente = lv_name1.

          CONCATENATE lv_street lv_post_code1 lv_city1 INTO wa_planpro-metadatos-etiquetado-direccion_envio SEPARATED BY space.

**  Direccion del almacen
        ELSEIF ls_aufk-zzdestcmcr EQ 'M' OR ls_aufk-zzdestcmcr EQ 'R'.

          wa_planpro-metadatos-etiquetado-cliente = ls_aufk-zzlgort.

          SELECT SINGLE lgobe INTO  wa_planpro-metadatos-etiquetado-nom_cliente
            FROM t001l
            WHERE lgort EQ ls_aufk-zzlgort AND werks EQ '4000'.

          CLEAR lv_adrnr.
          SELECT SINGLE adrnr INTO lv_adrnr
            FROM twlad
            WHERE werks	EQ '4000' AND lgort EQ ls_aufk-zzlgort.

          CLEAR:lv_street, lv_post_code1, lv_city1,lv_region,lv_country.
          SELECT SINGLE post_code1 city1 region country INTO (lv_post_code1, lv_city1,lv_region,lv_country)
            FROM adrc
            WHERE addrnumber EQ lv_adrnr.

**  Pais y region
          CLEAR: lv_landx.
          SELECT SINGLE landx INTO lv_landx
            FROM t005t
            WHERE spras EQ 'S' AND land1 EQ lv_country.

          CLEAR: lv_bezei.
          SELECT SINGLE bezei INTO lv_bezei
            FROM t005u
            WHERE spras EQ 'S' AND land1 EQ lv_country AND bland EQ lv_region.

          CONCATENATE lv_street lv_post_code1 lv_city1 lv_landx lv_bezei INTO wa_planpro-metadatos-etiquetado-direccion_envio SEPARATED BY space.

        ENDIF.

        wa_planpro-metadatos-etiquetado-pedido = ls_aufk-zzebeln4.
        wa_planpro-metadatos-etiquetado-pos_pedido = ls_aufk-zzebelp4.
        wa_planpro-metadatos-etiquetado-tratamiento_corona = ls_aufk-zzttocorona.
        wa_planpro-metadatos-etiquetado-color = ls_mara-zzcolor.
        IF ls_mara-zzaptoalim EQ 'S'.
          wa_planpro-metadatos-etiquetado-apto_alimentario = 'Si'.
        ELSE.
          wa_planpro-metadatos-etiquetado-apto_alimentario = 'No'.
        ENDIF.
        IF wa_header-order_type EQ 'ZC01'.
          wa_planpro-metadatos-etiquetado-orden_fabricacion_destino = ls_aufk-zzaufnr_ext.
        ENDIF.

**  Buscamos las operaciones de la orden destino
        IF wa_header-order_type EQ 'ZC01'.

          wa_order_objects_aux-phases = 'X'.

          REFRESH t_phase_aux[].

          CALL FUNCTION 'BAPI_PROCORD_GET_DETAIL'
            EXPORTING
              number        = ls_aufk-zzaufnr_ext
              order_objects = wa_order_objects_aux
            IMPORTING
              return        = t_return
            TABLES
              phase         = t_phase_aux.

          DELETE t_phase_aux WHERE superior_operation EQ ''.
          CLEAR: wa_phase_aux , lv_contador.
          LOOP AT t_phase_aux INTO wa_phase_aux.

            lv_contador = lv_contador + 1.

            CASE lv_contador.
              WHEN 1.
                IF wa_phase_aux-control_key EQ 'ZP05'.
                  CONCATENATE wa_phase_aux-operation_number 'SUBCO01' wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion1 SEPARATED BY space.
                ELSE.
                  CONCATENATE wa_phase_aux-operation_number wa_phase_aux-resource wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion1 SEPARATED BY space.
                ENDIF.

              WHEN 2.
                IF wa_phase_aux-control_key EQ 'ZP05'.
                  CONCATENATE wa_phase_aux-operation_number 'SUBCO01' wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion2 SEPARATED BY space.
                ELSE.
                  CONCATENATE wa_phase_aux-operation_number wa_phase_aux-resource wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion2 SEPARATED BY space.
                ENDIF.
              WHEN 3.
                IF wa_phase_aux-control_key EQ 'ZP05'.
                  CONCATENATE wa_phase_aux-operation_number 'SUBCO01' wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion3 SEPARATED BY space.
                ELSE.
                  CONCATENATE wa_phase_aux-operation_number wa_phase_aux-resource wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion3 SEPARATED BY space.
                ENDIF.
              WHEN 4.
                IF wa_phase_aux-control_key EQ 'ZP05'.
                  CONCATENATE wa_phase_aux-operation_number 'SUBCO01' wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion4 SEPARATED BY space.
                ELSE.
                  CONCATENATE wa_phase_aux-operation_number wa_phase_aux-resource wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion4 SEPARATED BY space.
                ENDIF.
            ENDCASE.
          ENDLOOP.

**  Buscamos las operaciones de la propia orden.
        ELSEIF  wa_header-order_type EQ 'ZC02'.

          DELETE t_phase_aux WHERE superior_operation EQ ''.
          DELETE t_phase_aux WHERE operation_number EQ wa_phase-operation_number.
          CLEAR: wa_phase_aux , lv_contador.
          LOOP AT t_phase_aux INTO wa_phase_aux.

            lv_contador = lv_contador + 1.

            CASE lv_contador.
              WHEN 1.

                IF wa_phase_aux-control_key EQ 'ZP05'.
                  CONCATENATE wa_phase_aux-operation_number 'SUBCO01' wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion1 SEPARATED BY space.
                ELSE.
                  CONCATENATE wa_phase_aux-operation_number wa_phase_aux-resource wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion1 SEPARATED BY space.
                ENDIF.

              WHEN 2.
                IF wa_phase_aux-control_key EQ 'ZP05'.
                  CONCATENATE wa_phase_aux-operation_number 'SUBCO01' wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion2 SEPARATED BY space.
                ELSE.
                  CONCATENATE wa_phase_aux-operation_number wa_phase_aux-resource wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion2 SEPARATED BY space.
                ENDIF.
              WHEN 3.
                IF wa_phase_aux-control_key EQ 'ZP05'.
                  CONCATENATE wa_phase_aux-operation_number 'SUBCO01' wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion3 SEPARATED BY space.
                ELSE.
                  CONCATENATE wa_phase_aux-operation_number wa_phase_aux-resource wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion3 SEPARATED BY space.
                ENDIF.
              WHEN 4.
                IF wa_phase_aux-control_key EQ 'ZP05'.
                  CONCATENATE wa_phase_aux-operation_number 'SUBCO01' wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion4 SEPARATED BY space.
                ELSE.
                  CONCATENATE wa_phase_aux-operation_number wa_phase_aux-resource wa_phase_aux-description INTO wa_planpro-metadatos-etiquetado-proxima_operacion4 SEPARATED BY space.
                ENDIF.

            ENDCASE.

          ENDLOOP.

        ENDIF.

        APPEND wa_planpro TO t_zplanproduccion.

      ENDLOOP.

    ENDLOOP.
  ENDIF.


ENDFUNCTION.
