FUNCTION zmfpp_etiq_bob_pulper_scada.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_BOBINA) TYPE  ZSPP_ETIQ_BOBINA_PULPER OPTIONAL
*"----------------------------------------------------------------------

  DATA: lf_formname          TYPE fpname VALUE 'ZESPPF_ETIQ_BOBINA_A3_PULPER',
        lf_fm_name           TYPE rs38l_fnam,
        ls_eti               TYPE zstpp_etiq_bobina_pulper,
        ls_doc_param         TYPE sfpdocparams,
        gs_output_param      TYPE sfpoutputparams,
        v_name               LIKE thead-tdname,
        ls_aufk              TYPE aufk,
        ls_vbak              TYPE vbak,
        ls_mara              TYPE mara,
        ls_mara_plnbez       TYPE mara,
        lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        lv_num               TYPE i,
        lv_unit              TYPE meins,
        lv_ebeln             TYPE vbeln_va,
        lv_ebelp             TYPE posnr_va,
        lv_peso_n            TYPE n LENGTH 4,
        lv_long_n            TYPE n LENGTH 5,
        lv_adrnr             TYPE adrnr,
        lv_sort2             TYPE ad_sort2,
        lv_kunnr             TYPE kunnr,
        lv_name1             TYPE ad_name1,
        lv_fec_n             TYPE n LENGTH 8,
        lv_fsc(30),
        lv_cust(30),
        lv_reproc(12),
        lv_com_escada(30),
        lv_pedido            TYPE vbeln_va,
        lv_posicion          TYPE posnr_va,
        lv_aufnr             TYPE aufnr.

  DATA: lv_padest TYPE rspopname.

* RELLENAR LA ESTRUCTURA A IMPRIMIR
  CLEAR: ls_eti, ls_aufk, ls_vbak, ls_mara, lv_kunnr, ls_mara_plnbez, lv_pedido, lv_posicion, lv_aufnr.

  CLEAR: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.


  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = i_bobina-aufnr
    IMPORTING
      output = lv_aufnr.

* Recuperamos datos de la orden:
  SELECT SINGLE * INTO ls_aufk
    FROM aufk
    WHERE aufnr = lv_aufnr.

* Pedido:
  IF i_bobina-pedido IS NOT INITIAL.
    ls_eti-vbeln = i_bobina-pedido.
  ELSE.
    ls_eti-vbeln = ls_aufk-zzebeln1.
  ENDIF.


  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = ls_eti-vbeln
    IMPORTING
      output = lv_pedido.


* Posición:
  IF i_bobina-posicion IS NOT INITIAL.
    ls_eti-posnr = i_bobina-posicion.
  ELSE.
    ls_eti-posnr = ls_aufk-zzebelp1.
  ENDIF.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = ls_eti-posnr
    IMPORTING
      output = lv_posicion.


* Cliente:

  IF i_bobina-kunnr IS NOT INITIAL.
    lv_kunnr = i_bobina-kunnr.
  ELSE.
    lv_kunnr = ls_aufk-zzkunnr1.
  ENDIF.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = lv_kunnr
    IMPORTING
      output = lv_kunnr.

* 1) Material o material de cliente:(KDMAT)

  IF ls_eti-vbeln IS NOT INITIAL.
*   Recuperamos el cliente, la organización ventas y el canal
    SELECT SINGLE * INTO ls_vbak
       FROM vbak
       WHERE vbeln = lv_pedido.

    IF ls_vbak IS NOT INITIAL.
*   Recuperamos el codigo de material de cliente
      SELECT SINGLE kdmat FROM knmt
                          INTO ls_eti-kdmat
                          WHERE vkorg = ls_vbak-vkorg
                          AND   vtweg = ls_vbak-vtweg
                          AND   matnr = i_bobina-matnr
                          AND   kunnr = ls_vbak-kunnr.
    ENDIF.

  ENDIF.

  IF ls_eti-kdmat IS INITIAL.
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'     " JME 18.07.2024 ATC
    CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'      " JME 18.07.2024 ATC
      EXPORTING
        input  = i_bobina-matnr
      IMPORTING
        output = ls_eti-kdmat.

  ENDIF.

  CONDENSE ls_eti-kdmat.

*  2) Calidad internacional:
  SELECT SINGLE * INTO ls_mara
    FROM mara
    WHERE matnr = i_bobina-matnr.

  IF i_bobina-plnbez IS INITIAL.
    SELECT SINGLE plnbez INTO i_bobina-plnbez
      FROM afko
      WHERE aufnr = lv_aufnr.
  ENDIF.

  SELECT SINGLE * INTO ls_mara_plnbez
    FROM mara
    WHERE matnr = i_bobina-plnbez.

  SELECT SINGLE bezei INTO ls_eti-bezei
    FROM ztmm0002t
    WHERE zzcalidad = ls_mara-zzcalidad
    AND spras = sy-langu.

  CONDENSE ls_eti-bezei.
  TRANSLATE ls_eti-bezei TO UPPER CASE.

* 3) Pedido Cliente/Posición:
  IF lv_pedido IS NOT INITIAL AND lv_posicion IS NOT INITIAL.
    SELECT SINGLE bstkd INTO ls_eti-bstkd
      FROM vbkd
      WHERE vbeln = lv_pedido
      AND posnr = lv_posicion.
  ENDIF.

  IF ls_eti-bstkd IS INITIAL.

    CLEAR: lv_ebeln, lv_ebelp.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = lv_pedido
      IMPORTING
        output = lv_ebeln.


    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = lv_posicion
      IMPORTING
        output = lv_ebelp.


    CONCATENATE lv_ebeln lv_ebelp INTO ls_eti-bstkd SEPARATED BY '/'.
  ENDIF.

  CONDENSE ls_eti-bstkd.

* 4) Calidad comercial:
  SELECT SINGLE wgbez60 INTO ls_eti-wgbez60
    FROM t023t
    WHERE spras = sy-langu
    AND matkl = ls_mara_plnbez-matkl.
  CONDENSE ls_eti-wgbez60.
  TRANSLATE ls_eti-wgbez60 TO UPPER CASE.

* 5) Gramaje:
  IF ls_mara_plnbez-zzgramaje IS NOT INITIAL.
    IF ls_mara_plnbez-zzgramaje+0(1) = '0'.
      ls_eti-gramaje = ls_mara_plnbez-zzgramaje+1(3).
    ENDIF.
    IF ls_mara_plnbez-zzgramaje+0(2) = '00'.
      ls_eti-gramaje = ls_mara_plnbez-zzgramaje+2(2).
    ENDIF.
    IF ls_mara_plnbez-zzgramaje+0(3) = '000'.
      ls_eti-gramaje = ls_mara_plnbez-zzgramaje+3(1).
    ENDIF.
    IF ls_eti-gramaje IS INITIAL AND ls_mara_plnbez-zzgramaje IS NOT INITIAL AND ls_mara_plnbez-zzgramaje NE '0000'.
      ls_eti-gramaje = ls_mara_plnbez-zzgramaje.
    ENDIF.
  ENDIF.
  CONDENSE ls_eti-gramaje.

* 6) Ancho:
  IF ls_mara-zzancho IS NOT INITIAL.
    IF ls_mara-zzancho+0(1) = '0'.
      ls_eti-ancho = ls_mara-zzancho+1(3).
    ENDIF.
    IF ls_mara-zzancho+0(2) = '00'.
      ls_eti-ancho = ls_mara-zzancho+2(2).
    ENDIF.
    IF ls_mara-zzancho+0(3) = '000'.
      ls_eti-ancho = ls_mara-zzancho+3(1).
    ENDIF.
    IF ls_eti-ancho IS INITIAL AND ls_mara-zzancho IS NOT INITIAL AND ls_mara-zzancho NE '0000'.
      ls_eti-ancho = ls_mara-zzancho.
    ENDIF.
  ENDIF.
  CONDENSE ls_eti-ancho.

* Recupero datos fuera de la característica:

* Diámetro:

  IF i_bobina-diametro IS NOT INITIAL.
    WRITE i_bobina-diametro TO ls_eti-diametro.
    REPLACE '.' IN ls_eti-diametro WITH space.
    CONDENSE ls_eti-diametro.
    CONCATENATE ls_eti-diametro 'mm' INTO ls_eti-diametro SEPARATED BY space.
  ENDIF.

* Peso:

  IF i_bobina-peso IS NOT INITIAL.
    WRITE i_bobina-peso TO ls_eti-peso.
    REPLACE '.' IN ls_eti-peso WITH space.
    CONDENSE ls_eti-peso.
  ENDIF.

* Longitud:
  IF i_bobina-longitud IS NOT INITIAL.
    WRITE i_bobina-longitud TO ls_eti-metros.
    REPLACE '.' IN ls_eti-metros WITH space.
    CONDENSE ls_eti-metros.
  ENDIF.

* Fecha de fabricación:
  IF i_bobina-fec_fabricacion IS NOT INITIAL.
    WRITE i_bobina-fec_fabricacion TO ls_eti-fec_fab.
    CONDENSE ls_eti-fec_fab.
    CONCATENATE ls_eti-fec_fab+6(2) ls_eti-fec_fab+4(2) ls_eti-fec_fab+0(4)
                INTO ls_eti-fec_fab SEPARATED BY '.'.
  ENDIF.


* 7) Datos de características:
  CLEAR lv_object.
  CONCATENATE i_bobina-matnr i_bobina-charg INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA_PULPER'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

  " Valores de características numéricos:
  CLEAR: lv_fec_n, lv_fsc.
  LOOP AT lt_alloc_values_num INTO ls_alloc_values_num.
    CLEAR: lv_num, lv_unit.
    CASE ls_alloc_values_num-charact.
        " Diámetro (mm):
      WHEN 'Z_DIAMETRO'.
        IF ls_eti-diametro IS INITIAL.
          lv_num = trunc( ls_alloc_values_num-value_from ).
          lv_unit = ls_alloc_values_num-unit_from.
          IF lv_unit IS INITIAL.
            lv_unit = 'mm'.
          ENDIF.
          WRITE lv_num TO ls_eti-diametro.
          REPLACE '.' IN ls_eti-diametro WITH space.
          CONDENSE ls_eti-diametro.
          CONCATENATE ls_eti-diametro lv_unit INTO ls_eti-diametro SEPARATED BY space.
        ENDIF.
        " Peso (kg):
      WHEN 'Z_PESO'.
        IF i_bobina-peso IS INITIAL.
          lv_num = trunc( ls_alloc_values_num-value_from ).
          lv_unit = ls_alloc_values_num-unit_from.
          WRITE lv_num TO ls_eti-peso.
          REPLACE '.' IN ls_eti-peso WITH space.
          CONDENSE ls_eti-peso.
        ENDIF.
        " Longitud (m):
      WHEN 'Z_LONGITUD_B'.
        IF ls_eti-metros IS INITIAL.
          lv_num = trunc( ls_alloc_values_num-value_from ).
          lv_unit = ls_alloc_values_num-unit_from.
          WRITE lv_num TO ls_eti-metros.
          REPLACE '.' IN ls_eti-metros WITH space.
          CONDENSE ls_eti-metros.
        ENDIF.
        " Fecha fabricación:
      WHEN 'Z_FECHA_FABRICACION'.
        IF ls_eti-fec_fab IS INITIAL.
          lv_num = ls_alloc_values_num-value_from.
          lv_fec_n = lv_num.
          WRITE lv_fec_n TO ls_eti-fec_fab.
          CONDENSE ls_eti-fec_fab.
          CONCATENATE ls_eti-fec_fab+6(2) ls_eti-fec_fab+4(2) ls_eti-fec_fab+0(4)
                      INTO ls_eti-fec_fab SEPARATED BY '.'.
        ENDIF.
      WHEN 'Z_FSC_PORCENTAJE'.
        lv_num = ls_alloc_values_num-value_from.
        WRITE lv_num TO lv_fsc.
        CONDENSE lv_fsc.
        CONCATENATE lv_fsc '%' INTO lv_fsc.
        CONCATENATE 'FSC Recycled' lv_fsc INTO lv_fsc SEPARATED BY space.

    ENDCASE.
  ENDLOOP.

  CLEAR: lv_cust, lv_com_escada, lv_reproc.
  LOOP AT lt_alloc_values_char INTO ls_alloc_values_char.
    CASE ls_alloc_values_char-charact.
        " Cliente:
      WHEN 'Z_CLIENTE'.
        IF lv_kunnr IS INITIAL.
          CONDENSE ls_alloc_values_char-value_char.
          lv_kunnr = ls_alloc_values_char-value_char.
        ENDIF.
        " Cadena Custodia:
      WHEN 'Z_CAS_CUS'.
        lv_cust = ls_alloc_values_char-value_char.
        CONDENSE lv_cust.
        TRANSLATE lv_cust TO UPPER CASE.

        " Reproceso:
      WHEN 'Z_REPROCESO'.
        IF ls_alloc_values_char-value_neutral = '1'.
          lv_reproc = ls_alloc_values_char-value_char.
          CONDENSE lv_reproc.
          TRANSLATE lv_reproc TO UPPER CASE.
        ENDIF.

        " Comentario a ESCADA:
      WHEN 'Z_COMENTARIO_A_ESCADA'.
        lv_com_escada = ls_alloc_values_char-value_char.
        CONDENSE lv_com_escada.
        TRANSLATE lv_com_escada TO UPPER CASE.
    ENDCASE.
  ENDLOOP.

* 8) Código barra producto:
  CLEAR: lv_peso_n, lv_long_n.
  lv_peso_n = ls_eti-peso.
  lv_long_n = ls_eti-metros.

  CONCATENATE ls_mara-zzcalidad+0(2) ls_mara-zzgramaje+1(3) ls_mara-zzancho lv_peso_n lv_long_n
              INTO ls_eti-bar_producto.

* 9) Bobina:
  ls_eti-bobina = i_bobina-charg.
  CONDENSE ls_eti-bobina.
  TRANSLATE ls_eti-bobina TO UPPER CASE.

* 10) Código de barra bobina:

  IF i_bobina-werks IS INITIAL.
    IF ls_aufk-werks IS NOT INITIAL.
      i_bobina-werks = ls_aufk-werks.
    ELSE.
      i_bobina-werks = '3000'.
    ENDIF.
  ENDIF.

  CLEAR: lv_adrnr, lv_sort2.
  SELECT SINGLE adrnr INTO lv_adrnr
    FROM t001w
    WHERE werks = i_bobina-werks.
  IF lv_adrnr IS NOT INITIAL.
    SELECT SINGLE sort2 INTO lv_sort2
      FROM adrc
      WHERE addrnumber = lv_adrnr.
    CONDENSE lv_sort2.
  ENDIF.
  CONCATENATE i_bobina-charg lv_sort2+0(4) INTO ls_eti-bar_bobina.

* 11) Denominación del cliente:

  IF lv_kunnr IS NOT INITIAL.
    CLEAR: lv_adrnr, lv_name1.
    SELECT SINGLE adrnr INTO lv_adrnr
    FROM kna1
    WHERE kunnr = lv_kunnr.
    IF lv_adrnr IS NOT INITIAL.
      SELECT SINGLE name1 INTO lv_name1
        FROM adrc
        WHERE addrnumber = lv_adrnr.
      CONDENSE lv_name1.
      ls_eti-cliente = lv_name1.
    ELSE.
      SELECT SINGLE adrnr INTO lv_adrnr
      FROM lfa1
      WHERE lifnr = lv_kunnr.
      IF lv_adrnr IS NOT INITIAL.
        SELECT SINGLE name1 INTO lv_name1
          FROM adrc
          WHERE addrnumber = lv_adrnr.
        CONDENSE lv_name1.
        ls_eti-cliente = lv_name1.
      ENDIF.
    ENDIF.
  ENDIF.

* 12) Observaciones:
*     Comentario reproceso:
  IF lv_reproc IS NOT INITIAL.
    IF ls_eti-observac_bob IS INITIAL.
      ls_eti-observac_bob = lv_reproc.
    ELSE.
      CONCATENATE ls_eti-observac_bob lv_reproc INTO ls_eti-observac_bob
         SEPARATED BY ' / '.
    ENDIF.
  ENDIF.
*     Comentario cadena custodia:
  IF lv_cust IS NOT INITIAL.
    IF ls_eti-observac_bob IS INITIAL.
      ls_eti-observac_bob = lv_cust.
    ELSE.
      CONCATENATE ls_eti-observac_bob lv_cust INTO ls_eti-observac_bob
        SEPARATED BY ' / '.
    ENDIF.
  ENDIF.
*     Comentario FSC:
  IF lv_fsc IS NOT INITIAL.
    IF ls_eti-observac_bob IS INITIAL.
      ls_eti-observac_bob = lv_fsc.
    ELSE.
      CONCATENATE ls_eti-observac_bob lv_fsc INTO ls_eti-observac_bob
        SEPARATED BY ' / '.
    ENDIF.
  ENDIF.
*     Comentario a ESCADA:
  IF lv_com_escada IS NOT INITIAL AND lv_reproc IS INITIAL.
    IF ls_eti-observac_bob IS INITIAL.
      ls_eti-observac_bob = lv_com_escada.
    ELSE.
      CONCATENATE ls_eti-observac_bob lv_com_escada INTO ls_eti-observac_bob
        SEPARATED BY ' / '.
    ENDIF.
  ENDIF.

*  13) Codigo de barras para PULPER

  CONCATENATE i_bobina-matnr i_bobina-charg INTO i_bobina-cod_barras.
  ls_eti-cod_barras = i_bobina-cod_barras.

** PARÁMETROS DE IMPRESIÓN:
*  CLEAR gs_output_param.
*  gs_output_param-dest = 'LOCA'.
** Impresión no automática:
*  gs_output_param-reqimm = ''.
*  gs_output_param-nodialog = 'X'. " No diálogo
*  gs_output_param-reqnew = 'X'.
*  gs_output_param-receiver = 'OPEPROPAP2'.
*  gs_output_param-covtitle = 'Etiqueta Bobina Pulper'.

* GST - 23/11/2015 ->

  CLEAR lv_padest.
  lv_padest = zcl_utils_hpap_pp=>determinar_disp_impresion( ).

*  SELECT SINGLE padest INTO lv_padest
*    FROM ztpp0007
*    WHERE werks = ls_aufk-werks
*    AND auart = ls_aufk-auart
*    AND uname = sy-uname.

*  IF lv_padest IS INITIAL.
*
*    SELECT SINGLE padest INTO lv_padest
*      FROM ztpp0007
*      WHERE werks = ls_aufk-werks
*      AND auart = ls_aufk-auart.
*
*  ENDIF.

  IF lv_padest IS NOT INITIAL.

    CLEAR gs_output_param.
    gs_output_param-dest = lv_padest.
* Impresión automática:
    gs_output_param-reqimm = 'X'.
    gs_output_param-nodialog = 'X'. " No diálogo
    gs_output_param-reqnew = 'X'.
    gs_output_param-receiver = 'OPEPROPAP2'.
    gs_output_param-covtitle = 'Etiqueta Bobina Pulper'.

  ELSE.

    CLEAR gs_output_param.
    gs_output_param-dest = 'LOCA'.
* Impresión automática:
    gs_output_param-reqimm = 'X'.
    gs_output_param-nodialog = 'X'. " No diálogo
    gs_output_param-reqnew = 'X'.
    gs_output_param-receiver = 'OPEPROPAP2'.
    gs_output_param-covtitle = 'Etiqueta Bobina Pulper'.

  ENDIF.

* GST - 23/11/2015 <-

* IMPRESIÓN ETIQUETA:
  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = gs_output_param
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.

*&---- Get the name of the generated function module
  CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'           "& Form Processing Generation
    EXPORTING
      i_name     = lf_formname
    IMPORTING
      e_funcname = lf_fm_name.

  IF sy-langu = 'S'.
    ls_doc_param-langu = 'S'.
    ls_doc_param-country = 'ES'.
  ELSE.
    ls_doc_param-langu = 'E'.
    ls_doc_param-country = 'US'.
  ENDIF.

  CALL FUNCTION lf_fm_name
    EXPORTING
      /1bcdwb/docparams = ls_doc_param
      etiq_bobina       = ls_eti
* IMPORTING
*     /1BCDWB/FORMOUTPUT       =
    EXCEPTIONS
      usage_error       = 1
      system_error      = 2
      internal_error    = 3
      OTHERS            = 4.

* Close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
*   IMPORTING
*     E_RESULT             = result
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.

ENDFUNCTION.
