FUNCTION zmfpp_impresion_tiquet_bascula.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_WERKS) TYPE  WERKS_D
*"     REFERENCE(I_ID_REG_VEHICULO) TYPE  ZID_REG_VEHICULO
*"----------------------------------------------------------------------

  DATA: gs_output_param TYPE sfpoutputparams,
        lf_formname     TYPE fpname VALUE 'ZESPPF_BASCULA_VEHICULO',
        lf_fm_name      TYPE rs38l_fnam,
        ls_doc_param    TYPE sfpdocparams.

  DATA: ls_datos_form TYPE zspp_tiquet_bascula_vehiculo.
  DATA: ls_59 TYPE ztpp0059.

  CLEAR gs_output_param.

  gs_output_param-dest = zcl_utils_hpap_pp=>determinar_disp_impresion( ).

*  CASE i_werks.
*    WHEN '3000'.
*      gs_output_param-dest = 'GAR2'.
*    WHEN '3020'.
*      gs_output_param-dest = 'GAR3'.
*    WHEN OTHERS.
*  ENDCASE.

  gs_output_param-reqimm = 'X'.
  gs_output_param-reqnew = 'X'.
  gs_output_param-nodialog = ' '. " No diálogo
  gs_output_param-copies = 2.

  CLEAR ls_datos_form.

* Datos del RV
  SELECT SINGLE * INTO CORRESPONDING FIELDS OF @ls_59
      FROM ztpp0059
      WHERE id_reg_vehiculo = @i_id_reg_vehiculo.


* Datos del conductor
  SELECT SINGLE * INTO @DATA(ls_datos_cond)
    FROM ztpp0056
    WHERE dninie = @ls_59-dninie.

* Datos del vehículo
*  SELECT SINGLE * INTO @DATA(ls_datos_vehi)
*    FROM ztpp0057
*    WHERE zmatricula1 = @ls_59-zmatricula1.


* Nombre del transportista
  SELECT SINGLE name1 INTO @DATA(l_nom_trans)
    FROM zvpp_transportis
    WHERE lifnr = @ls_datos_cond-tdlnr.

  ls_datos_form-werks                   = ls_59-werks.
  ls_datos_form-id_reg_vehiculo         = ls_59-id_reg_vehiculo.

  ls_datos_form-dninie                  = ls_59-dninie.
  ls_datos_form-nombre                  = |{ ls_datos_cond-nombre } { ls_datos_cond-apellidos }|.
  ls_datos_form-tdlnr                   = ls_datos_cond-tdlnr.
  ls_datos_form-telefono                = ls_datos_cond-telefono.
  ls_datos_form-name1                   = l_nom_trans.

  ls_datos_form-zmatricula1             = ls_59-zmatricula1.
  ls_datos_form-zmatricula2             = ls_59-zmatricula2.

* Si está activado Ind 2º remolque, mostramos PB2 y Tara2
  CASE ls_59-ind_remolque.
    WHEN ' '. ls_datos_form-ind_remolque = 'No'.
    WHEN 'X'.
      ls_datos_form-ind_remolque = 'Sí'.

      ls_datos_form-txt_peso_bruto_remo = |Peso bruto 2| .
      ls_datos_form-peso_bruto_remol    = zclpp_reg_vehiculo_master=>formatear_campo_cantidad( ls_59-peso_bruto_remol ).

      ls_datos_form-txt_tara_remol      = |Tara 2| .
      ls_datos_form-tara_remol          = zclpp_reg_vehiculo_master=>formatear_campo_cantidad( ls_59-tara_remol ).

    WHEN OTHERS.
  ENDCASE.

* Montar campo formulario: Destino
  TRY.
      ls_datos_form-destino  =  |{ zclpp_reg_vehiculo_master=>gt_destinos[ werks      = ls_59-werks
                                                                           id_destino = ls_59-destino ]-descr_destino }|.
    CATCH cx_root .
  ENDTRY.

* Montar campo formulario: TP_CARGA según sea el Destino.
  CASE ls_59-destino.
    WHEN '01'. "Materia prima

* Obtención de la descr.material de la 1ª posición de nuestro registro de entrada
      SELECT SINGLE makt~maktx
        INTO @DATA(l_desc_matnr)
        FROM ztmm0007
        INNER JOIN ztmm0006 ON ztmm0006~zentrada = ztmm0007~zentrada AND ztmm0007~posnr = 1
        INNER JOIN makt     ON ztmm0007~matnr    = makt~matnr        AND spras = @sy-langu
        WHERE ztmm0006~id_reg_vehiculo = @ls_59-id_reg_vehiculo.

      IF sy-subrc = 0.
        ls_datos_form-tp_carga = l_desc_matnr.
      ENDIF.

    WHEN '03'. "Residuos
      SELECT SINGLE id_tp_residuo_1 " Obtenemos SÓLO el Id_tp_residuo_1 (LER)
        INTO @DATA(l_ler)
        FROM ztpp0063
        WHERE werks           = @ls_59-werks AND
              id_reg_vehiculo = @ls_59-id_reg_vehiculo.

      IF sy-subrc = 0.
        ls_datos_form-tp_carga = l_ler.
      ENDIF.

    WHEN OTHERS.
      ls_datos_form-tp_carga =  |{ zclpp_reg_vehiculo_master=>gt_tp_carga[ werks    = ls_59-werks
                                                                           tp_carga = ls_59-tp_carga ]-descr_tp_carga }|.
  ENDCASE.


  ls_datos_form-albaran    = ls_59-albaran.
  IF ls_59-tknum IS NOT INITIAL.
    ls_datos_form-tknum      = ls_59-tknum.
    ls_datos_form-txt_tknum      = |Transporte|.
  ENDIF.

  ls_datos_form-peso_bruto = zclpp_reg_vehiculo_master=>formatear_campo_cantidad( ls_59-peso_bruto ).
  ls_datos_form-tara       = zclpp_reg_vehiculo_master=>formatear_campo_cantidad( ls_59-tara ).
*  ls_datos_form-peso_neto  = zclpp_reg_vehiculo_master=>formatear_campo_cantidad( ls_59-peso_neto ).
  ls_datos_form-peso_neto  = zclpp_reg_vehiculo_master=>formatear_campo_cantidad_2( ls_59-peso_neto ).

  IF ls_59-contenedor_entr IS NOT INITIAL.

    ls_datos_form-txt_cont_entr           = 'Cont. entrada'.
    ls_datos_form-contenedor_entr         = |{ ls_59-contenedor_entr }|.
    ls_datos_form-peso_contenedor_entr    = zclpp_reg_vehiculo_master=>formatear_campo_cantidad( ls_59-peso_cont_entr ).

  ENDIF.


  IF ls_59-contenedor_sali IS NOT INITIAL.
    ls_datos_form-txt_cont_sali           = 'Cont. salida'.
    ls_datos_form-contenedor_sali         = |{ ls_59-contenedor_sali }|.
    ls_datos_form-peso_contenedor_sali = zclpp_reg_vehiculo_master=>formatear_campo_cantidad( ls_59-peso_cont_sali ).
  ENDIF.

  ls_datos_form-fecha_hora_sal    = |{ ls_59-fecha_sal DATE = USER } / { ls_59-hora_sal TIME = ISO }|.
  ls_datos_form-fecha_hora_dia    = |{ sy-datum DATE = USER } / { sy-uzeit TIME = ISO }|.

  IF ls_59-contenedor_log IS NOT INITIAL.
    ls_datos_form-txt_contenedorlog           = 'Nº contenedor'.
    ls_datos_form-contenedor_log              = ls_59-contenedor_log.
  ENDIF.



*  SHIFT ls_datos_form-peso_bruto RIGHT. "DELETING TRAILING ' '.
*  SHIFT ls_datos_form-tara        RIGHT. " DELETING TRAILING ' '.
*  SHIFT ls_datos_form-peso_neto        RIGHT. " DELETING TRAILING ' '.

************************************************************

* IMPRESIÓN ETIQUETA:
  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = gs_output_param
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.

  IF sy-langu = 'S'.
    ls_doc_param-langu = 'S'.
    ls_doc_param-country = 'ES'.
  ELSE.
    ls_doc_param-langu = 'E'.
    ls_doc_param-country = 'US'.
  ENDIF.

*&---- Get the name of the generated function module
  CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'           "& Form Processing Generation
    EXPORTING
      i_name     = lf_formname
    IMPORTING
      e_funcname = lf_fm_name.


  DATA: l_string TYPE string.
  CALL FUNCTION lf_fm_name
    EXPORTING
      /1bcdwb/docparams = ls_doc_param
      datos_entrada     = ls_datos_form
*     string_lopd       = l_string
* IMPORTING
*     /1BCDWB/FORMOUTPUT       =
    EXCEPTIONS
      usage_error       = 1
      system_error      = 2
      internal_error    = 3
      OTHERS            = 4.

* Close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
*   IMPORTING
*     E_RESULT             = result
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.



ENDFUNCTION.
