FUNCTION zmfpp_seleccionar_entregas.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_WERKS) TYPE  WERKS_D
*"     REFERENCE(IW_2O_REMOLQUE) TYPE  FLAG
*"     REFERENCE(IV_CARGA_MAX) TYPE  Z_CANTIDAD_SIN_DEC OPTIONAL
*"  EXPORTING
*"     REFERENCE(OT_ENTREGAS_SEL) TYPE  TT_VBELN
*"     REFERENCE(O_RC) TYPE  CHAR02
*"     REFERENCE(O_ZZPESO_ALB) TYPE  ZPESO_ALB
*"----------------------------------------------------------------------
  DATA: lo_selections TYPE REF TO cl_salv_selections,
        lr_columns    TYPE REF TO cl_salv_columns,
* Formateo de columnas.
        lo_column     TYPE REF TO cl_salv_column,
        lo_columns    TYPE REF TO cl_salv_columns_table.

  clear: gt_entregas_selec, g_kg_totales, g_rc.

  gw_2o_remolque = iw_2o_remolque.
  gv_carga_max   = iv_carga_max.

  CALL METHOD zclpp_gestion_cargas_picking=>get_entregas_centro
    EXPORTING
      i_werks     = i_werks
    IMPORTING
      ot_entregas = gt_entregas_totales.

* Filtrar entregas en estado "C", completadas.
  DELETE gt_entregas_totales WHERE kostk <> 'B' and kostk <> 'C'.

  IF gt_entregas_totales is INITIAL.
    o_rc = '02'.
    exit.
  ENDIF.

  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = go_alv
        CHANGING
          t_table      = gt_entregas_totales ) .

    CATCH cx_salv_msg.
  ENDTRY.

* Titulo ALV
  gr_display = go_alv->get_display_settings( ).
  gr_display->set_list_header( 'Seleccionar entregas' ).



* Grabar disposición.
  CLEAR lv_key.
  lv_key-report         = sy-repid.
*  lv_key_popup-logical_group  = '1'.
  lv_key-handle         = '2'.
  lo_layout = go_alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  gr_functions = go_alv->get_functions( ).
  gr_functions->set_all( 'X' ).

  lr_columns = go_alv->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.
      gr_cols_tab_color = go_alv->get_columns( ).
      gr_cols_tab_color->set_color_column( 'COLOR' ).
    CATCH cx_salv_data_error.                           "#EC NO_HANDLER
  ENDTRY.


  TRY.
      lo_columns = go_alv->get_columns( ).
      lo_column = lo_columns->get_column( 'VBELN' ).
      lo_column->set_short_text( 'Entrega' ).
      lo_column->set_medium_text( 'Entrega' ).
      lo_column->set_long_text( 'Entrega' ).

    CATCH cx_root .
  ENDTRY.
  TRY.
*      lo_columns = go_alv->get_columns( ).
      lo_column = lo_columns->get_column( 'KUNNR' ).
      lo_column->set_short_text( 'Cliente' ).
      lo_column->set_medium_text( 'Cliente' ).
      lo_column->set_long_text( 'Cliente' ).

    CATCH cx_root .
  ENDTRY.
  TRY.
*      lo_columns = go_alv->get_columns( ).
      lo_column = lo_columns->get_column( 'NAME1' ).
      lo_column->set_short_text( 'Nom.client' ).
      lo_column->set_medium_text( 'Nombre cliente' ).
      lo_column->set_long_text( 'Nombre cliente' ).

    CATCH cx_root .
  ENDTRY.
  TRY.
*      lo_columns = go_alv->get_columns( ).
      lo_column = lo_columns->get_column( 'MENGE' ).
      lo_column->set_short_text( 'Kg.entrega' ).
      lo_column->set_medium_text( 'Kg. entrega' ).
      lo_column->set_long_text( 'Kg. entrega' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
*      lo_columns = go_alv->get_columns( ).
      lo_column = lo_columns->get_column( 'CANT_PICK' ).
      lo_column->set_short_text( 'Kg.picking' ).
      lo_column->set_medium_text( 'Kg. picking' ).
      lo_column->set_long_text( 'Kg. picking' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
*      lo_columns = go_alv->get_columns( ).
      lo_column = lo_columns->get_column( 'TP_STOCK' ).
      lo_column->set_short_text( 'Tp. stock' ).
      lo_column->set_medium_text( 'Tipo stock' ).
      lo_column->set_long_text( 'Tipo stock' ).
      CALL METHOD lo_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.

    CATCH cx_root .

  ENDTRY.

  TRY.
*      lo_columns = go_alv->get_columns( ).
      lo_column = lo_columns->get_column( 'KOSTK' ).
      lo_column->set_short_text( 'Estado' ).
      lo_column->set_medium_text( 'Estado' ).
      lo_column->set_long_text( 'Estado' ).
      CALL METHOD lo_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.

    CATCH cx_root .

  ENDTRY.
  TRY.
*      lo_columns = go_alv->get_columns( ).
      lo_column = lo_columns->get_column( 'ERDAT' ).
      lo_column->set_short_text( 'F.creación' ).
      lo_column->set_medium_text( 'Fecha creación' ).
      lo_column->set_long_text( 'Fecha creación' ).

    CATCH cx_root .

  ENDTRY.


  TRY.
      CALL METHOD go_alv->set_screen_status
        EXPORTING
          report        = sy-repid
          pfstatus      = 'STD_ALV_POPUP'
          set_functions = go_alv->c_functions_all.
    CATCH cx_root .
  ENDTRY.

  IF go_alv IS BOUND.

    lo_selections = go_alv->get_selections( ).
    lo_selections->set_selection_mode( cl_salv_selections=>multiple ).
    DATA: lo_events TYPE REF TO cl_salv_events_table.
    lo_events = go_alv->get_event( ).
*
*   Instantiate the event handler object
    CREATE OBJECT gr_events_popup.
    SET HANDLER gr_events_popup->on_user_command        FOR lo_events.


    go_alv->set_screen_popup(
      start_column = 70      "i_start_column
      end_column   = 182    "i_end_column
      start_line   = 1      "i_start_line
      end_line     = 20 ).  "i_end_line

    go_alv->display( ).

  ENDIF.


  ot_entregas_sel = gt_entregas_selec.
  o_zzpeso_alb    = g_kg_totales.
  o_rc = g_rc.

ENDFUNCTION.
