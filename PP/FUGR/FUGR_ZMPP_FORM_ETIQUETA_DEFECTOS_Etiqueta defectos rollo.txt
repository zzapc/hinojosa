FUNCTION zmpp_form_etiqueta_defectos.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_AUFNR) TYPE  AUFNR
*"     REFERENCE(I_WERKS) TYPE  WERKS_D
*"     REFERENCE(I_MATNR) TYPE  MATNR
*"     REFERENCE(I_CHARG) TYPE  CHARG_D
*"----------------------------------------------------------------------

  CONSTANTS: c_form_defectos  TYPE fpname VALUE 'ZESPPF_DEFECTOS',
             c_form_sin_defec TYPE fpname VALUE 'ZESPPF_SINDEFECTOS'.

  DATA: l_formulari TYPE fpname.
  DATA: fm_name         TYPE rs38l_fnam.
  DATA: ls_zpp0030         TYPE zessdi_defectos,
        gt_values_defectos TYPE STANDARD TABLE OF bapicharactvaluesdescr.
  DATA:  lt_bapiret2       TYPE STANDARD TABLE OF bapiret2.
  DATA: lv_padest       TYPE rspopname,
        fp_docparams    TYPE sfpdocparams,
        fp_outputparams TYPE sfpoutputparams.
  DATA: lt_obsv TYPE zessdi_defectos_obsv.
  DATA: l_string TYPE string.


  CLEAR ls_zpp0030.

* Obtenemos datos de defectos del lote de rollo
  SELECT SINGLE *
    FROM ztpp0030
    INTO @DATA(ps_reg)
    WHERE aufnr = @i_aufnr AND
          werks = @i_werks AND
          matnr = @i_matnr AND
          charg = @i_charg.

  ls_zpp0030-aufnr               = ps_reg-aufnr.
  ls_zpp0030-werks              = ps_reg-werks.
  ls_zpp0030-matnr              = ps_reg-matnr.
  ls_zpp0030-charg              = ps_reg-charg.
  ls_zpp0030-defecto1           = ps_reg-defecto1.
  ls_zpp0030-defecto2           = ps_reg-defecto2.
  ls_zpp0030-defecto3           = ps_reg-defecto3.
  ls_zpp0030-defecto1_lt        = ps_reg-defecto1_lt.
  ls_zpp0030-defecto2_lt        = ps_reg-defecto2_lt.
  ls_zpp0030-defecto3_lt        = ps_reg-defecto3_lt.
  ls_zpp0030-defecto_ancho_lt   = ps_reg-defecto_ancho_lt.
  ls_zpp0030-bob_pulper_total   = ps_reg-bob_pulper_total.
  ls_zpp0030-bob_pulper_parcial = ps_reg-bob_pulper_parcial.
  ls_zpp0030-defecto1_c         = ps_reg-defecto1_c.
  ls_zpp0030-defecto2_c         = ps_reg-defecto2_c.
  ls_zpp0030-defecto3_c         = ps_reg-defecto3_c.
  ls_zpp0030-defecto_ancho_c    = ps_reg-defecto_ancho_c.
  ls_zpp0030-defecto1_lc        = ps_reg-defecto1_lc.
  ls_zpp0030-defecto2_lc        = ps_reg-defecto2_lc.
  ls_zpp0030-defecto3_lc        = ps_reg-defecto3_lc.
  ls_zpp0030-defecto_ancho_lc   = ps_reg-defecto_ancho_lc.
  ls_zpp0030-cabo_lt            = ps_reg-cabo_lt.
  ls_zpp0030-cabo_lc            = ps_reg-cabo_lc.

*   Seleccion motivos PULPER
  SELECT * FROM zvpp_carac_recha INTO TABLE @DATA(lt_zvpp_carac_recha).

* Obtener descriptivos de defectos.
  CALL FUNCTION 'BAPI_CHARACT_GETDETAIL'
    EXPORTING
      charactname        = 'Z_DEFECTOS'
      keydate            = sy-datum
      language           = sy-langu
    TABLES
      charactvaluesdescr = gt_values_defectos
      return             = lt_bapiret2.

  TRY.
      ls_zpp0030-defecto1 = lt_zvpp_carac_recha[ atzhl = ls_zpp0030-defecto1 ]-atwtb.
    CATCH cx_root .
  ENDTRY.
  TRY.
      ls_zpp0030-defecto2 = lt_zvpp_carac_recha[ atzhl = ls_zpp0030-defecto2 ]-atwtb.
    CATCH cx_root .
  ENDTRY.
  TRY.
      ls_zpp0030-defecto3 = lt_zvpp_carac_recha[ atzhl = ls_zpp0030-defecto3 ]-atwtb.
    CATCH cx_root .
  ENDTRY.

  TRY.
      ls_zpp0030-defecto1_lt = gt_values_defectos[ value_char = ls_zpp0030-defecto1_lt ]-description.
    CATCH cx_root .
  ENDTRY.
  TRY.
      ls_zpp0030-defecto2_lt = gt_values_defectos[ value_char = ls_zpp0030-defecto2_lt ]-description.
    CATCH cx_root .
  ENDTRY.
  TRY.
      ls_zpp0030-defecto3_lt = gt_values_defectos[ value_char = ls_zpp0030-defecto3_lt ]-description.
    CATCH cx_root .
  ENDTRY.
  TRY.
      ls_zpp0030-defecto1_c = gt_values_defectos[ value_char = ls_zpp0030-defecto1_c ]-description.
    CATCH cx_root .
  ENDTRY.
  TRY.
      ls_zpp0030-defecto2_c = gt_values_defectos[ value_char = ls_zpp0030-defecto2_c ]-description.
    CATCH cx_root .
  ENDTRY.
  TRY.
      ls_zpp0030-defecto3_c = gt_values_defectos[ value_char = ls_zpp0030-defecto3_c ]-description.
    CATCH cx_root .
  ENDTRY.
  TRY.
      ls_zpp0030-defecto1_lc = gt_values_defectos[ value_char = ls_zpp0030-defecto1_lc ]-description.
    CATCH cx_root .
  ENDTRY.
  TRY.
      ls_zpp0030-defecto2_lc = gt_values_defectos[ value_char = ls_zpp0030-defecto2_lc ]-description.
    CATCH cx_root .
  ENDTRY.
  TRY.
      ls_zpp0030-defecto3_lc = gt_values_defectos[ value_char = ls_zpp0030-defecto3_lc ]-description.
    CATCH cx_root .
  ENDTRY.

* Obtener observaciones POPE:
  SELECT *
    INTO TABLE @DATA(lt_lines)
    FROM ztpp0031
    WHERE aufnr   = @ls_zpp0030-aufnr AND
          matnr   = @ls_zpp0030-matnr AND
          charg   = @ls_zpp0030-charg AND
          tp_ubic = ' ' AND
          werks   = @ls_zpp0030-werks
    ORDER BY seq.

  LOOP AT lt_lines INTO DATA(ls_line).
    APPEND INITIAL LINE TO lt_obsv ASSIGNING FIELD-SYMBOL(<fs_obs>).
    <fs_obs> = CORRESPONDING #( ls_line ).
  ENDLOOP.

* Obtener observaciones bobinadora:
  SELECT tdline
  FROM ztpp0031
  INTO TABLE @DATA(lt_tdlines)
  WHERE aufnr   = @ls_zpp0030-aufnr AND
        matnr   = @ls_zpp0030-matnr AND
        charg   = @ls_zpp0030-charg AND
        tp_ubic = 'B'
    ORDER BY seq ASCENDING.

*Rellenamos lineas de observaciones
  LOOP AT lt_tdlines INTO DATA(ls_line2).
    IF ls_line IS NOT INITIAL.
      l_string = |{ l_string }{ ls_line2-tdline }|.
    ENDIF.
  ENDLOOP.

  lv_padest = zcl_utils_hpap_pp=>determinar_disp_impresion( ).
  IF lv_padest IS NOT INITIAL.
    CLEAR fp_outputparams.
    fp_outputparams-dest = lv_padest.
    fp_outputparams-reqimm = 'X'.
    fp_outputparams-nodialog = ' '. " No diálogo
    fp_outputparams-reqnew = 'X'.
    fp_outputparams-copies    = 2.
  ELSE.
    CLEAR fp_outputparams.
    fp_outputparams-dest = 'LOCA'.
    fp_outputparams-reqimm = 'X'.
    fp_outputparams-nodialog = ' '. " No diálogo
    fp_outputparams-reqnew = 'X'.
    fp_outputparams-copies    = 2.
  ENDIF.

* Impresión de etiqueta de Notificación de defectos.
  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
    IF sy-subrc EQ 1.
*      MESSAGE 'Proceso cancelado' TYPE 'S'.
    ELSE.
      MESSAGE 'Error FP_JOB_OPEN' TYPE 'S' DISPLAY LIKE 'E'.
    ENDIF.
    EXIT.
  ENDIF.

*      DATA: l_formulari TYPE fpname.

  CLEAR l_formulari.
  CASE ps_reg-sin_defectos.

    WHEN 'X'.  l_formulari = c_form_sin_defec.

    WHEN ' '.  l_formulari = c_form_defectos.
    WHEN OTHERS.
  ENDCASE.

  CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'           "& Form Processing Generation
    EXPORTING
      i_name     = l_formulari
    IMPORTING
      e_funcname = fm_name.

  CALL FUNCTION fm_name
    EXPORTING
      /1bcdwb/docparams = fp_docparams
      defectos          = ls_zpp0030
      observaciones     = lt_obsv
      observaciones2    = l_string
    EXCEPTIONS
      usage_error       = 1
      system_error      = 2
      internal_error    = 3.


  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.





ENDFUNCTION.
