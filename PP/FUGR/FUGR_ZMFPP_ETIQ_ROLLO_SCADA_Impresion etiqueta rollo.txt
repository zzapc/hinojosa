FUNCTION ZMFPP_ETIQ_ROLLO_SCADA.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_ROLLO) TYPE  ZSPP_ETIQ_ROLLO_SCADA OPTIONAL
*"----------------------------------------------------------------------

  DATA: lv_auart  TYPE aufart,
        lv_sfcpf  TYPE co_prodprf,
        ls_aufk   TYPE aufk,
        ls_etiq_rollo type ZSTPP_ETIQ_ROLLO_SCADA.

* Chequear que la orden es de tipo rollo:
  CLEAR: lv_auart, lv_sfcpf.

CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
  EXPORTING
    input         = i_rollo-aufnr
 IMPORTING
   OUTPUT        = i_rollo-aufnr.


  SELECT SINGLE sfcpf INTO lv_sfcpf
    FROM caufv
    WHERE aufnr = i_rollo-aufnr.

  CHECK lv_sfcpf = 'ZI01'.

* Seleccionar datos de la orden de proceso:
  CLEAR ls_aufk.
  SELECT SINGLE * INTO ls_aufk
    FROM aufk
    WHERE aufnr = i_rollo-aufnr.

  IF ls_aufk IS NOT INITIAL.

    IF i_rollo-kunnr is not initial and i_rollo-pedido is not initial and i_rollo-posicion is not initial.
      clear ls_etiq_rollo.
      PERFORM dat_etiq_rollo_scada using i_rollo
                                   i_rollo-kunnr
                                   i_rollo-pedido
                                   i_rollo-posicion
                                   ls_aufk
                              changing ls_etiq_rollo.
*      PERFORM imprimir_etiq_rollo using ls_etiq_rollo.
      PERFORM imprimir_etiq_rollo_scada using ls_etiq_rollo.

    ELSE.

    " Cliente/Pedido/Posición (1):
    IF ls_aufk-zzkunnr1 IS NOT INITIAL AND ls_aufk-zzebeln1 IS NOT INITIAL AND ls_aufk-zzebelp1 IS NOT INITIAL.
      clear ls_etiq_rollo.
      condense: ls_aufk-zzkunnr1, ls_aufk-zzebeln1, ls_aufk-zzebelp1.
      PERFORM dat_etiq_rollo_scada using i_rollo
                                   ls_aufk-zzkunnr1
                                   ls_aufk-zzebeln1
                                   ls_aufk-zzebelp1
                                   ls_aufk
                              changing ls_etiq_rollo.
*      PERFORM imprimir_etiq_rollo using ls_etiq_rollo.
      PERFORM imprimir_etiq_rollo_scada using ls_etiq_rollo.

    ENDIF.

    " Cliente/Pedido/Posición (2):
    IF ls_aufk-zzkunnr2 IS NOT INITIAL AND ls_aufk-zzebeln2 IS NOT INITIAL AND ls_aufk-zzebelp2 IS NOT INITIAL.
      clear ls_etiq_rollo.
      condense: ls_aufk-zzkunnr2, ls_aufk-zzebeln2, ls_aufk-zzebelp2.
      PERFORM dat_etiq_rollo_scada using i_rollo
                                   ls_aufk-zzkunnr2
                                   ls_aufk-zzebeln2
                                   ls_aufk-zzebelp2
                                   ls_aufk
                              changing ls_etiq_rollo.
*      PERFORM imprimir_etiq_rollo using ls_etiq_rollo.
      PERFORM imprimir_etiq_rollo_scada using ls_etiq_rollo.
    ENDIF.

    " Cliente/Pedido/Posición (3):
    IF ls_aufk-zzkunnr3 IS NOT INITIAL AND ls_aufk-zzebeln3 IS NOT INITIAL AND ls_aufk-zzebelp3 IS NOT INITIAL.
      clear ls_etiq_rollo.
      condense: ls_aufk-zzkunnr3, ls_aufk-zzebeln3, ls_aufk-zzebelp3.
      PERFORM dat_etiq_rollo_scada using i_rollo
                                   ls_aufk-zzkunnr3
                                   ls_aufk-zzebeln3
                                   ls_aufk-zzebelp3
                                   ls_aufk
                              changing ls_etiq_rollo.
*      PERFORM imprimir_etiq_rollo using ls_etiq_rollo.
      PERFORM imprimir_etiq_rollo_scada using ls_etiq_rollo.
    ENDIF.

    ENDIF.

  ENDIF.

ENDFUNCTION.
