FUNCTION zmfpp_etiq_bobina.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(I_BOBINA) TYPE  ZSPP_ETIQ_BOBINA OPTIONAL
*"     VALUE(I_REIMP_PESO) TYPE  XFLAG OPTIONAL
*"     VALUE(I_NODIALOG) TYPE  FPNODIALOG OPTIONAL
*"     VALUE(I_PADEST) TYPE  RSPOPNAME OPTIONAL
*"     VALUE(I_IMPR_AUTOMATICA) TYPE  FLAG OPTIONAL
*"----------------------------------------------------------------------

  DATA: "lf_formname_old       TYPE fpname VALUE 'ZESPPF_ETIQ_BOBINA_A3',
    lf_formname           TYPE fpname, " VALUE 'ZESPPF_ETIQ_BOBINA_A4',
    lf_fm_name            TYPE rs38l_fnam,
    ls_eti                TYPE zstpp_etiq_bobina,
    ls_doc_param          TYPE sfpdocparams,
    gs_output_param       TYPE sfpoutputparams,
    v_name                LIKE thead-tdname,
    ls_aufk               TYPE aufk,
    ls_vbak               TYPE vbak,
    ls_mara               TYPE mara,
    lv_object             TYPE objnum,
    lt_alloc_values_num   TYPE tt_bapi1003_alloc_values_num,
    lt_alloc_values_char  TYPE tt_bapi1003_alloc_values_char,
    lt_alloc_values_curr  TYPE tt_bapi1003_alloc_values_curr,
    lt_return             TYPE bapiret2_tab,
    ls_alloc_values_num   TYPE bapi1003_alloc_values_num,
    ls_alloc_values_char  TYPE bapi1003_alloc_values_char,
    lv_num                TYPE i,
    lv_unit               TYPE meins,
    lv_ebeln              TYPE vbeln_va,
    lv_ebelp              TYPE posnr_va,
    lv_peso_n             TYPE n LENGTH 4,
    lv_long_n             TYPE n LENGTH 5,
    lv_adrnr              TYPE adrnr,
    lv_sort2              TYPE ad_sort2,
    lv_kunnr              TYPE kunnr,
    lv_name1              TYPE ad_name1,
    lv_fec_n              TYPE n LENGTH 8,
    lv_fsc(30),
    lv_cust(30),
    lv_reproc(12),
    lv_com_escada(30),
    lv_c_reproc(30),
    lv_c_reproc_scada(30),
    lv_peso               TYPE zpeso_carac.

  DATA: lv_padest TYPE rspopname.

* Flag para tratar etiqueta antigua/etiqueta nueva.
  SELECT SINGLE flag_inactivo
    INTO @DATA(l_flag)
    FROM ztpp0032
    WHERE apl   = 'ETIQUETA_DINA4' AND
          werks = @i_bobina-werks.

  IF l_flag = ' '.
    lf_formname = 'ZESPPF_ETIQ_BOBINA_A3'.
  ELSE.
    lf_formname = 'ZESPPF_ETIQ_BOBINA_A4'.
  ENDIF.

  IF i_impr_automatica = 'X'.
    lf_formname = 'ZESPPF_ETIQ_BOBINA_A4_V2_AUTO'.
  ENDIF.


* RELLENAR LA ESTRUCTURA A IMPRIMIR
  CLEAR: ls_eti, ls_aufk, ls_vbak, ls_mara, lv_kunnr.

  CLEAR: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.

* Recuperamos datos de la orden:
  SELECT SINGLE * INTO ls_aufk
    FROM aufk
    WHERE aufnr = i_bobina-aufnr.

* 1) Material o material de cliente:(KDMAT)

***  IF ls_aufk-zzebeln1 IS NOT INITIAL.
****   Recuperamos el cliente, la organización ventas y el canal
***    SELECT SINGLE * INTO ls_vbak
***       FROM vbak
***       WHERE vbeln = ls_aufk-zzebeln1.
***
***    IF ls_vbak IS NOT INITIAL.
****   Recuperamos el codigo de material de cliente
***      SELECT SINGLE kdmat FROM knmt
***                          INTO ls_eti-kdmat
***                          WHERE vkorg = ls_vbak-vkorg
***                          AND   vtweg = ls_vbak-vtweg
***                          AND   matnr = i_bobina-matnr
***                          AND   kunnr = ls_vbak-kunnr.
***    ENDIF.
***
**** GST - 08/06/2015 ->
***  ELSEIF i_bobina-pedido IS NOT INITIAL.
***
****   Recuperamos el cliente, la organización ventas y el canal
***    SELECT SINGLE * INTO ls_vbak
***       FROM vbak
***       WHERE vbeln = i_bobina-pedido.
***
***    IF ls_vbak IS NOT INITIAL.
****   Recuperamos el codigo de material de cliente
***      SELECT SINGLE kdmat FROM knmt
***                          INTO ls_eti-kdmat
***                          WHERE vkorg = ls_vbak-vkorg
***                          AND   vtweg = ls_vbak-vtweg
***                          AND   matnr = i_bobina-matnr
***                          AND   kunnr = ls_vbak-kunnr.
***    ENDIF.
***
**** GST - 08/06/2015 <-
***  ENDIF.

  IF ls_aufk-zzkunnr1 IS NOT INITIAL.
    lv_kunnr = ls_aufk-zzkunnr1.
* GST - 08/06/2015 ->
  ELSEIF i_bobina-kunnr IS NOT INITIAL.
    lv_kunnr = i_bobina-kunnr.
* GST - 08/06/2015 <-
  ENDIF.



  IF ls_eti-kdmat IS INITIAL.
    " Se eliminan los ceros de la izquierda del material
    SHIFT i_bobina-matnr LEFT DELETING LEADING '0'.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = i_bobina-matnr
      IMPORTING
        output = ls_eti-kdmat.

  ENDIF.

  CONDENSE ls_eti-kdmat.


  DATA: lv_matnr TYPE matnr.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = i_bobina-matnr
    IMPORTING
      output = lv_matnr.


*  2) Calidad internacional:
  SELECT SINGLE * INTO ls_mara
    FROM mara
    WHERE matnr = lv_matnr. "i_bobina-matnr.

  SELECT SINGLE bezei INTO ls_eti-bezei
    FROM ztmm0002t
    WHERE zzcalidad = ls_mara-zzcalidad
    AND spras = sy-langu.

  CONDENSE ls_eti-bezei.
  TRANSLATE ls_eti-bezei TO UPPER CASE.

* 3) Pedido Cliente/Posición:
  IF ls_aufk-zzebeln1 IS NOT INITIAL.
    ls_eti-vbeln = ls_aufk-zzebeln1.
  ELSEIF i_bobina-pedido IS NOT INITIAL.
    ls_eti-vbeln = i_bobina-pedido.
  ENDIF.

  IF ls_aufk-zzebelp1 IS NOT INITIAL.
    ls_eti-posnr = ls_aufk-zzebelp1.
  ELSEIF i_bobina-posicion IS NOT INITIAL.
    ls_eti-posnr = i_bobina-posicion.
  ENDIF.


  IF ls_aufk-zzebeln1 IS NOT INITIAL AND ls_aufk-zzebelp1 IS NOT INITIAL.
    SELECT SINGLE bstkd INTO ls_eti-bstkd
      FROM vbkd
      WHERE vbeln = ls_aufk-zzebeln1
      AND posnr = ls_aufk-zzebelp1.
  ENDIF.

* GST - 08/06/2015 ->
  IF ls_eti-bstkd IS INITIAL AND i_bobina-pedido IS NOT INITIAL AND i_bobina-posicion IS NOT INITIAL.
    SELECT SINGLE bstkd INTO ls_eti-bstkd
      FROM vbkd
      WHERE vbeln = i_bobina-pedido
      AND posnr = i_bobina-posicion.
  ENDIF.
* GST - 08/06/2015 <-

  IF ls_eti-bstkd IS INITIAL.

    CLEAR: lv_ebeln, lv_ebelp.

    IF ls_aufk-zzebeln1 IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = ls_aufk-zzebeln1
        IMPORTING
          output = lv_ebeln.

    ELSEIF ls_eti-vbeln IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = ls_eti-vbeln
        IMPORTING
          output = lv_ebeln.
    ENDIF.

    IF ls_aufk-zzebelp1 IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = ls_aufk-zzebelp1
        IMPORTING
          output = lv_ebelp.

    ELSEIF ls_eti-posnr IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = ls_eti-posnr
        IMPORTING
          output = lv_ebelp.

    ENDIF.

    CONCATENATE lv_ebeln lv_ebelp INTO ls_eti-bstkd SEPARATED BY '/'.
  ENDIF.

  CONDENSE ls_eti-bstkd.

* 4) Calidad comercial:
  SELECT SINGLE wgbez60 INTO ls_eti-wgbez60
    FROM t023t
    WHERE spras = sy-langu
    AND matkl = ls_mara-matkl.
  CONDENSE ls_eti-wgbez60.
  TRANSLATE ls_eti-wgbez60 TO UPPER CASE.

* 5) Gramaje:
  IF ls_mara-zzgramaje IS NOT INITIAL.
    IF ls_mara-zzgramaje+0(1) = '0'.
      ls_eti-gramaje = ls_mara-zzgramaje+1(3).
    ENDIF.
    IF ls_mara-zzgramaje+0(2) = '00'.
      ls_eti-gramaje = ls_mara-zzgramaje+2(2).
    ENDIF.
    IF ls_mara-zzgramaje+0(3) = '000'.
      ls_eti-gramaje = ls_mara-zzgramaje+3(1).
    ENDIF.
    IF ls_eti-gramaje IS INITIAL AND ls_mara-zzgramaje IS NOT INITIAL AND ls_mara-zzgramaje NE '0000'.
      ls_eti-gramaje = ls_mara-zzgramaje.
    ENDIF.
  ENDIF.
  CONDENSE ls_eti-gramaje.
*
* 6) Ancho:
  IF ls_mara-zzancho IS NOT INITIAL.
    IF ls_mara-zzancho+0(1) = '0'.
      ls_eti-ancho = ls_mara-zzancho+1(3).
    ENDIF.
    IF ls_mara-zzancho+0(2) = '00'.
      ls_eti-ancho = ls_mara-zzancho+2(2).
    ENDIF.
    IF ls_mara-zzancho+0(3) = '000'.
      ls_eti-ancho = ls_mara-zzancho+3(1).
    ENDIF.
    IF ls_eti-ancho IS INITIAL AND ls_mara-zzancho IS NOT INITIAL AND ls_mara-zzancho NE '0000'.
      ls_eti-ancho = ls_mara-zzancho.
    ENDIF.
  ENDIF.
  CONDENSE ls_eti-ancho.

* 7) Datos de características:
  CLEAR lv_object.
*  CONCATENATE i_bobina-matnr i_bobina-charg INTO lv_object.
  CONCATENATE lv_matnr i_bobina-charg INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

  " Valores de características numéricos:
  CLEAR: lv_fec_n, lv_fsc.
  LOOP AT lt_alloc_values_num INTO ls_alloc_values_num.
    CLEAR: lv_num, lv_unit.
    CASE ls_alloc_values_num-charact.
        " Diámetro (mm):
      WHEN 'Z_DIAMETRO'.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        lv_unit = ls_alloc_values_num-unit_from.
        IF lv_unit IS INITIAL.
          lv_unit = 'mm'.
        ENDIF.
        WRITE lv_num TO ls_eti-diametro.
        REPLACE '.' IN ls_eti-diametro WITH space.
        CONDENSE ls_eti-diametro.
        CONCATENATE ls_eti-diametro lv_unit INTO ls_eti-diametro SEPARATED BY space.
        " Peso (kg):
      WHEN 'Z_PESO'.
* GST - 29/04/2015 ->
        CLEAR lv_peso.
*        IF i_reimp_peso = 'X'.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        lv_unit = ls_alloc_values_num-unit_from.
        WRITE lv_num TO lv_peso.

*          IF lv_peso IS NOT INITIAL.
*            ls_eti-peso = lv_peso.
*            REPLACE '.' IN ls_eti-peso WITH space.
*            CONDENSE ls_eti-peso.
*          ELSE.
*            ls_eti-peso = i_bobina-peso.
*            REPLACE '.' IN ls_eti-peso WITH space.
*            CONDENSE ls_eti-peso.
*          ENDIF.
*        ELSE.
*          IF i_bobina-peso IS INITIAL.
*            lv_num = trunc( ls_alloc_values_num-value_from ).
*            lv_unit = ls_alloc_values_num-unit_from.
*            WRITE lv_num TO ls_eti-peso.
*            REPLACE '.' IN ls_eti-peso WITH space.
*            CONDENSE ls_eti-peso.
*          ELSE.
*            ls_eti-peso = i_bobina-peso.
*            REPLACE '.' IN ls_eti-peso WITH space.
*            CONDENSE ls_eti-peso.
*          ENDIF.
*        ENDIF.
* GST - 29/04/2015 <-
        " Longitud (m):
      WHEN 'Z_LONGITUD_B'.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        lv_unit = ls_alloc_values_num-unit_from.
        WRITE lv_num TO ls_eti-metros.
        REPLACE '.' IN ls_eti-metros WITH space.
        CONDENSE ls_eti-metros.
        " Fecha fabricación:
      WHEN 'Z_FECHA_FABRICACION'.
        lv_num = ls_alloc_values_num-value_from.
        lv_fec_n = lv_num.
        WRITE lv_fec_n TO ls_eti-fec_fab.
        CONDENSE ls_eti-fec_fab.
        CONCATENATE ls_eti-fec_fab+6(2) ls_eti-fec_fab+4(2) ls_eti-fec_fab+0(4)
                    INTO ls_eti-fec_fab SEPARATED BY '.'.
*        CONCATENATE ls_eti-fec_fab+0(2) ls_eti-fec_fab+2(2) ls_eti-fec_fab+4(4)
*                    INTO ls_eti-fec_fab SEPARATED BY '.'.
      WHEN 'Z_FSC_PORCENTAJE'.
        lv_num = ls_alloc_values_num-value_from.
        WRITE lv_num TO lv_fsc.
        CONDENSE lv_fsc.
        CONCATENATE lv_fsc '%' INTO lv_fsc.
        CONCATENATE 'FSC Recycled' lv_fsc INTO lv_fsc SEPARATED BY space.

* GST - 29/04/2015 ->
      WHEN 'Z_EMPALMES'. " Nº Empalmes
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO ls_eti-empalmes.
        REPLACE '.' IN ls_eti-empalmes WITH space.
        CONDENSE ls_eti-empalmes.
* GST - 29/04/2015 <-
    ENDCASE.
  ENDLOOP.

  CLEAR: lv_cust, lv_com_escada, lv_reproc, lv_c_reproc, lv_c_reproc_scada.
  LOOP AT lt_alloc_values_char INTO ls_alloc_values_char.
    CASE ls_alloc_values_char-charact.
        " Cliente:
      WHEN 'Z_CLIENTE'.
*        IF lv_kunnr IS INITIAL.
        CONDENSE ls_alloc_values_char-value_char.
        lv_kunnr = ls_alloc_values_char-value_char.
*        ENDIF.
        " Cadena Custodia:
      WHEN 'Z_CAS_CUS'.
        lv_cust = ls_alloc_values_char-value_char.
        CONDENSE lv_cust.
        TRANSLATE lv_cust TO UPPER CASE.

        " Reproceso:
      WHEN 'Z_REPROCESO'.
        IF ls_alloc_values_char-value_neutral = '1'.
          lv_reproc = ls_alloc_values_char-value_char.
          CONDENSE lv_reproc.
          TRANSLATE lv_reproc TO UPPER CASE.
        ENDIF.

        " Comentario a ESCADA:
      WHEN 'Z_COMENTARIO_A_ESCADA'.
        lv_com_escada = ls_alloc_values_char-value_char.
        CONDENSE lv_com_escada.
        TRANSLATE lv_com_escada TO UPPER CASE.

        " Motivo REPROCESO:
      WHEN 'ZPPI_MOTIVO_REPROCESO_BOBINA'.
        lv_c_reproc = ls_alloc_values_char-value_char.
        CONDENSE lv_c_reproc.
        TRANSLATE lv_c_reproc TO UPPER CASE.

* GST - 22/10/2015 ->
        " Motivo REPROCESO SCADA:
      WHEN 'Z_MOTIVO_REPROCESO_BOBINA'.
        lv_c_reproc_scada = ls_alloc_values_char-value_char.
        CONDENSE lv_c_reproc_scada.
        TRANSLATE lv_c_reproc_scada TO UPPER CASE.
* GST - 22/10/2015 <-

*       YTG Si el puesto de trabajo de la bobina está vacio, traerlo de las características
      WHEN 'Z_PUESTO_TRABAJO'.
        IF i_bobina-arbpl_ent IS INITIAL.
          ls_eti-arbpl_ent = ls_alloc_values_char-value_char.
        ENDIF.
*        lv_c_reproc_scada = ls_alloc_values_char-value_char.
*        CONDENSE lv_c_reproc_scada.
*        TRANSLATE lv_c_reproc_scada TO UPPER CASE.


    ENDCASE.
  ENDLOOP.


  CALL METHOD zcl_utils_hpap_pp=>get_material_cliente_externo
    EXPORTING
      i_werks = i_bobina-werks
      i_matnr = i_bobina-matnr
      i_kunnr = lv_kunnr
    IMPORTING
      o_matnr = ls_eti-kdmat.

* GST - 29/04/2015 ->
  IF i_reimp_peso = 'X'.
    IF lv_peso IS NOT INITIAL.
      ls_eti-peso = lv_peso.
      REPLACE '.' IN ls_eti-peso WITH space.
      CONDENSE ls_eti-peso.
    ELSE.
      ls_eti-peso = trunc( i_bobina-peso ).
      REPLACE '.' IN ls_eti-peso WITH space.
      CONDENSE ls_eti-peso.
    ENDIF.
  ELSE.
    IF i_bobina-peso IS NOT INITIAL.
      ls_eti-peso = trunc( i_bobina-peso ).
      REPLACE '.' IN ls_eti-peso WITH space.
      CONDENSE ls_eti-peso.
    ELSE.
      ls_eti-peso = lv_peso.
      REPLACE '.' IN ls_eti-peso WITH space.
      CONDENSE ls_eti-peso.
    ENDIF.
  ENDIF.
* GST - 29/04/2015 <-

** YTG 19/09/2016 Ticket:14095_->
*  IF i_bobina-menge IS NOT INITIAL.
*
*    ls_eti-peso = i_bobina-menge.
*
*    REPLACE '.' IN ls_eti-peso WITH space.
*    CONDENSE ls_eti-peso.
*  ENDIF.
** YTG 19/09/2016 Ticket:14095 <-

* GST - 22/10/2015 - Motivo reproceso SCADA ->
  IF lv_c_reproc IS INITIAL AND lv_c_reproc_scada IS NOT INITIAL.
    lv_c_reproc = lv_c_reproc_scada.
  ENDIF.
* GST - 22/10/2015 - Motivo reproceso SCADA <-

* 8) Código barra producto:
  CLEAR: lv_peso_n, lv_long_n.
  lv_peso_n = ls_eti-peso.
  lv_long_n = ls_eti-metros.

  CONCATENATE ls_mara-zzcalidad+0(2) ls_mara-zzgramaje+1(3) ls_mara-zzancho lv_peso_n lv_long_n
  INTO ls_eti-bar_producto.

* 9) Bobina:
  ls_eti-bobina = i_bobina-charg.
  CONDENSE ls_eti-bobina.
  TRANSLATE ls_eti-bobina TO UPPER CASE.

* 10) Código de barra bobina:
  CLEAR: lv_adrnr, lv_sort2.
  SELECT SINGLE adrnr INTO lv_adrnr
    FROM t001w
    WHERE werks = i_bobina-werks.
  IF lv_adrnr IS NOT INITIAL.
    SELECT SINGLE sort2 INTO lv_sort2
      FROM adrc
      WHERE addrnumber = lv_adrnr.
    CONDENSE lv_sort2.
  ENDIF.
  CONCATENATE i_bobina-charg lv_sort2+0(4) INTO ls_eti-bar_bobina.

* 11) Denominación del cliente:

  IF lv_kunnr IS NOT INITIAL.

* Se deja el acceso como estaba.
* Cuando se trate de un cliente externo (numérico) fallará el acceso por faltarle los ceros iniciales.
* Alpha input para clientes externos.
    lv_kunnr = |{ lv_kunnr ALPHA = IN }|.

    CLEAR: lv_adrnr, lv_name1.
    SELECT SINGLE adrnr INTO lv_adrnr
    FROM kna1
    WHERE kunnr = lv_kunnr.
    IF lv_adrnr IS NOT INITIAL.
      SELECT SINGLE name1 INTO lv_name1
        FROM adrc
        WHERE addrnumber = lv_adrnr.
      CONDENSE lv_name1.
      ls_eti-cliente = lv_name1.
    ELSE.
      SELECT SINGLE adrnr INTO lv_adrnr
      FROM lfa1
      WHERE lifnr = lv_kunnr.
      IF lv_adrnr IS NOT INITIAL.
        SELECT SINGLE name1 INTO lv_name1
          FROM adrc
          WHERE addrnumber = lv_adrnr.
        CONDENSE lv_name1.
        ls_eti-cliente = lv_name1.
      ENDIF.
    ENDIF.
  ENDIF.

* 12) Observaciones:
*     Comentario reproceso:
  IF lv_reproc IS NOT INITIAL.
    IF ls_eti-observac_bob IS INITIAL.
      ls_eti-observac_bob = lv_reproc.
    ELSE.
      CONCATENATE ls_eti-observac_bob lv_reproc INTO ls_eti-observac_bob
         SEPARATED BY ' / '.
    ENDIF.
  ENDIF.

*  Motivo de reproceso:
  IF lv_reproc IS NOT INITIAL.
    IF lv_c_reproc IS NOT INITIAL.
      IF ls_eti-observac_bob IS INITIAL.
        ls_eti-observac_bob = lv_c_reproc.
      ELSE.
        CONCATENATE ls_eti-observac_bob lv_c_reproc INTO ls_eti-observac_bob
           SEPARATED BY ' / '.
      ENDIF.
    ENDIF.
  ENDIF.

*     Comentario cadena custodia:
  IF lv_cust IS NOT INITIAL.
    IF ls_eti-observac_bob IS INITIAL.
      ls_eti-observac_bob = lv_cust.
    ELSE.
      CONCATENATE ls_eti-observac_bob lv_cust INTO ls_eti-observac_bob
        SEPARATED BY ' / '.
    ENDIF.
  ENDIF.

*APC20250321 Solicitado por Nuria, eliminar FSC Recycled
**     Comentario FSC:
*  lv_fsc = 'FSC Recycled'.
*  IF lv_fsc IS NOT INITIAL .
*    IF ls_eti-observac_bob IS INITIAL .
*      ls_eti-observac_bob = lv_fsc.
*    ELSE.
*      CONCATENATE ls_eti-observac_bob lv_fsc INTO ls_eti-observac_bob
*        SEPARATED BY ' / '.
*    ENDIF.
*  ENDIF.


*     Comentario a ESCADA:
  IF lv_com_escada IS NOT INITIAL AND lv_reproc IS INITIAL.
    IF ls_eti-observac_bob IS INITIAL.
      ls_eti-observac_bob = lv_com_escada.
    ELSE.
      CONCATENATE ls_eti-observac_bob lv_com_escada INTO ls_eti-observac_bob
        SEPARATED BY ' / '.
    ENDIF.
  ENDIF.

* YTG 07.09.2016
  ls_eti-werks_ent = i_bobina-werks_ent.
  IF i_bobina-arbpl_ent IS NOT INITIAL.
    ls_eti-arbpl_ent = i_bobina-arbpl_ent.

  ENDIF.

  "JCB 21.02.23. Almacén para sentido desbob.
  ls_eti-lgort = i_bobina-lgort.


* INI CGIJON - 13.03.17 -  Ticket ## 25719
** YTG 07.09.2016
**25.11.2016 Esta modificación
**  uitar el descriptivo que hay al final del formulario sobre "FSC recycled" para el centro 3020.
*  IF  ls_eti-werks_ent  = '3020' .
*    ls_eti-observac_bob = ''.
*  ENDIF.
* FIN CGIJON - 13.03.17 -  Ticket ## 25719

** YTG 07.09.2016
*** 25.11.2016 Esta modificación
*  uitar el descriptivo que hay al final del formulario sobre "FSC recycled" para el centro 3020.
** PARÁMETROS DE IMPRESIÓN:

*  CLEAR gs_output_param.
*  gs_output_param-dest = 'LOCA'.
*  gs_output_param-reqimm = 'X'.
*  gs_output_param-reqnew = 'X'.
**  gs_output_param-nodialog = 'X'. " No diálogo


* GST - 23/11/2015 ->

  CLEAR lv_padest.

* Determinación del dispositivo de impresión.
  IF i_padest IS NOT INITIAL.
    lv_padest = i_padest.
  ELSE.
    lv_padest = zcl_utils_hpap_pp=>determinar_disp_impresion( ).
  ENDIF.

* UDEFINE - ampliacion para poder indicar el disp.impresion como parametro
*  IF i_padest IS INITIAL.
*
** YTG 18/10/2016 -7000012469 Ticket_##_18483
*    IF   "sy-tcode = 'ZPP0012' OR sy-tcode = 'ZPP0022' OR sy-tcode = 'ZPP0023' OR sy-tcode = 'ZPP0025' OR
*       sy-tcode = 'ZPP0010' OR sy-tcode = 'ZPP0032' OR sy-tcode = 'ZPP0033' OR sy-tcode = 'ZPP0034' or
**       sy-tcode = 'ZPP0046' OR
*      sy-tcode = 'ZPP0046B'.
*      SELECT SINGLE padest INTO lv_padest
*        FROM ztpp0008
*        WHERE arbpl = ls_eti-arbpl_ent.
*
*    ELSE.
*      SELECT SINGLE padest INTO lv_padest
*        FROM ztpp0007
*        WHERE werks = ls_aufk-werks
*        AND auart = ls_aufk-auart
*        AND uname = sy-uname.
*
*      IF lv_padest IS INITIAL.
*        SELECT SINGLE padest INTO lv_padest
*          FROM ztpp0007
*          WHERE werks = ls_aufk-werks
*          AND auart = ls_aufk-auart.
*      ENDIF.
*    ENDIF.
*
*  ELSE.
*    lv_padest = i_padest.
*  ENDIF.
*** YTG 18/10/2016 -7000012469 Ticket_##_18483



  IF lv_padest IS NOT INITIAL.
    CLEAR gs_output_param.
    gs_output_param-dest = lv_padest.
    gs_output_param-reqimm = 'X'.
    gs_output_param-reqnew = 'X'.
    gs_output_param-nodialog = i_nodialog. " No diálogo
  ELSE.
    CLEAR gs_output_param.
    gs_output_param-dest = 'LOCA'.
    gs_output_param-reqimm = 'X'.
    gs_output_param-reqnew = 'X'.
    gs_output_param-nodialog = i_nodialog. " No diálogo
  ENDIF.

* GST - 23/11/2015 <-

** uDEFINE - Si es una bobina de Sarria NSP quitar palabra Pulper
*
*  SELECT SINGLE matkl into @data(l_matkl) from mara where matnr eq @i_bobina-matnr.
*
*  IF ( i_bobina-werks EQ '3020' or ls_aufk-werks eq '3020' ) AND l_matkl eq '10199' ."NSP.
*    lf_formname = lf_formname_nsp."Cambiamos el Formulario
*  ENDIF.
*

* 31-03-2021 - CMS - 57299 Si es impresión automática, informamos parámetro para dispositivo ZEBRA.
  DATA: lw_auto_manual TYPE char1.
  IF i_impr_automatica = 'X'.

*    IF i_bobina-werks = '3000'.
*      CLEAR gs_output_param-job_profile.
*    ELSE.
    gs_output_param-job_profile = 'Adobe/Print/ZPLSettings'.
*    ENDIF.

    lw_auto_manual = 'A'.
  ELSE.
    lw_auto_manual = 'M'.
  ENDIF.

* IMPRESIÓN ETIQUETA:
  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = gs_output_param
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.

*&---- Get the name of the generated function module
  CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'           "& Form Processing Generation
    EXPORTING
      i_name     = lf_formname
    IMPORTING
      e_funcname = lf_fm_name.

  IF sy-langu = 'S'.
    ls_doc_param-langu = 'S'.
    ls_doc_param-country = 'ES'.
  ELSE.
    ls_doc_param-langu = 'E'.
    ls_doc_param-country = 'US'.
  ENDIF.

  CALL FUNCTION lf_fm_name
    EXPORTING
      /1bcdwb/docparams = ls_doc_param
      etiq_bobina       = ls_eti
      i_impr_auto       = lw_auto_manual
* IMPORTING
*     /1BCDWB/FORMOUTPUT       =
    EXCEPTIONS
      usage_error       = 1
      system_error      = 2
      internal_error    = 3
      OTHERS            = 4.

* Close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
*   IMPORTING
*     E_RESULT             = result
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.

ENDFUNCTION.
