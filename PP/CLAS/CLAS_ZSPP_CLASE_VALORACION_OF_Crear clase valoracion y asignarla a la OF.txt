
class ZSPP_CLASE_VALORACION_OF definition
  public
  final
  create public .

public section.

  class-methods CREAR_CLASE_VALORACION
    importing
      !I_MATNR type MATNR
      !I_AUFNR type AUFNR optional
      !I_WERKS type WERKS_D
      !I_BWTAR type BWTAR_D optional
      !I_BKLAS type BKLAS optional
      !I_STPRS type STPRS optional
      !I_PEINH type PEINH optional
      !I_VPRSV type VPRSV optional
    returning
      value(O_CLASE) type BWTAR_D .
  class-methods ASIGNAR_CLASE_A_LOTE
    importing
      !I_BWTAR type BWTAR_D
      !I_CHARG type CHARG_D
      !I_MATNR type MATNR
      !I_WERKS type WERKS_D .
protected section.
private section.
endclass. "ZSPP_CLASE_VALORACION_OF definition
class ZSPP_CLASE_VALORACION_OF implementation.
  METHOD asignar_clase_a_lote.


    DATA: attrib    TYPE bapibatchatt,
          attribx   TYPE bapibatchattx,
          it_return TYPE STANDARD TABLE OF bapiret2.

    attrib-val_type = i_bwtar.
    attribx-val_type = abap_true.

    CALL FUNCTION 'BAPI_BATCH_CHANGE'
      EXPORTING
        material         = i_matnr
        batch            = i_charg
        plant            = i_werks
        batchattributes  = attrib
        batchattributesx = attribx
*       BATCHCONTROLFIELDS       =
*       INTERNALNUMBERCOM        =
*       EXTENSION1       =
*       MATERIAL_EVG     =
*   IMPORTING
*       BATCHATTRIBUTES  =
      TABLES
        return           = it_return.


  ENDMETHOD.
  METHOD crear_clase_valoracion.

    CHECK i_matnr IS NOT INITIAL.
    IF i_aufnr IS SUPPLIED.
      CHECK i_aufnr IS NOT INITIAL AND i_aufnr CO '0123456789'.
    ELSEIF i_bwtar IS SUPPLIED.
      CHECK i_bwtar IS NOT INITIAL AND i_bklas IS NOT INITIAL.
    ENDIF.

    DATA: wa_headdata   TYPE bapimathead,
          wa_valuation  TYPE bapi_mbew,
          wa_valuationx TYPE bapi_mbewx,
          wa_ret        TYPE bapiret2,
          lv_af         TYPE aufnr.

    SELECT SINGLE mtart, mbrsh FROM mara WHERE matnr = @i_matnr INTO @DATA(lv_mtart).

    wa_headdata-material = i_matnr.
    wa_headdata-account_view = abap_true.
    wa_headdata-ind_sector = lv_mtart-mbrsh.
    wa_headdata-matl_type = lv_mtart-mtart.

    wa_valuation-val_area = wa_valuationx-val_area = i_werks.

    lv_af = |{ i_aufnr ALPHA = OUT }|.
    CONDENSE lv_af NO-GAPS.

    IF i_bwtar IS NOT INITIAL.
      wa_valuation-val_type = wa_valuationx-val_type = i_bwtar.
      wa_valuation-val_class = i_bklas.
      wa_valuationx-val_class = 'X'.
    ELSE.
      wa_valuation-val_type = wa_valuationx-val_type = lv_af.
      wa_valuation-val_class = '5021'.
      wa_valuationx-val_class = 'X'.
    ENDIF.

    IF i_bwtar IS NOT INITIAL.
      wa_valuation-price_ctrl = 'S'.
      wa_valuationx-price_ctrl = abap_true.
      wa_valuation-moving_pr = '0'.
      wa_valuationx-moving_pr = abap_true.
    ENDIF.

    " Inicio BG 17/06/2026 Agregar precio estandar, variable, categoria de valoración,
    " cantidad base e indicador control de precios
    " Se llama desde la ampliación: ZSPP_WORKORDER_UPDATE method at_release
    IF i_stprs IS NOT INITIAL.
      wa_valuation-std_price   = i_stprs.
      wa_valuationx-std_price  = abap_true.
      wa_valuation-moving_pr   = i_stprs.
      wa_valuationx-moving_pr  = abap_true.
      IF i_bklas IS NOT INITIAL.
        wa_valuation-val_class = i_bklas.
        wa_valuationx-val_class = abap_true.

        wa_valuation-vm_so_stk  = i_bklas.
        wa_valuationx-vm_so_stk = abap_true.

        wa_valuation-vm_p_stock  = i_bklas.
        wa_valuationx-vm_p_stock = abap_true.

      ENDIF.
      IF i_peinh IS NOT INITIAL.
        wa_valuation-price_unit = i_peinh.
        wa_valuationx-price_unit = abap_true.
      ENDIF.
      IF i_vprsv IS NOT INITIAL.
        wa_valuation-price_ctrl = i_vprsv .
        wa_valuationx-price_ctrl = abap_true.
      ENDIF.

    ENDIF.
    " Fin BG 17/06/2026 Agregar precio estandar

    CALL FUNCTION 'BAPI_MATERIAL_SAVEDATA'
      EXPORTING
        headdata       = wa_headdata
*       clientdata     =
*       clientdatax    =
*       plantdata      =
*       plantdatax     =
*       forecastparameters   =
*       forecastparametersx  =
*       planningdata   =
*       planningdatax  =
*       storagelocationdata  =
*       storagelocationdatax =
        valuationdata  = wa_valuation
        valuationdatax = wa_valuationx
*       warehousenumberdata  =
*       warehousenumberdatax =
*       salesdata      =
*       salesdatax     =
*       storagetypedata      =
*       storagetypedatax     =
*       flag_online    = SPACE
*       flag_cad_call  = SPACE
*       no_dequeue     = SPACE
*       no_rollback_work     = SPACE
      IMPORTING
        return         = wa_ret
*      TABLES
*       materialdescription  =
*       unitsofmeasure =
*       unitsofmeasurex      =
*       internationalartnos  =
*       materiallongtext     =
*       taxclassifications   =
*       returnmessages =
*       prtdata        =
*       prtdatax       =
*       extensionin    =
*       extensioninx   =
      .

    IF wa_ret-type EQ 'S'.
      o_clase = lv_af.
    ELSE.
      o_clase = space.
    ENDIF.

  ENDMETHOD.
