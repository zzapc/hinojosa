
class ZSPP_CL_WORKORDER_UPDATE definition
  public
  final
  create public .

public section.

  interfaces IF_BADI_INTERFACE .
  interfaces IF_EX_WORKORDER_UPDATE .
protected section.
private section.
endclass. "ZSPP_CL_WORKORDER_UPDATE definition
class ZSPP_CL_WORKORDER_UPDATE implementation.
  method IF_EX_WORKORDER_UPDATE~ARCHIVE_OBJECTS.
  endmethod.
  method IF_EX_WORKORDER_UPDATE~AT_DELETION_FROM_DATABASE.
  endmethod.
  METHOD if_ex_workorder_update~at_release.
**  add jtm 06.04.2022 lanzamos evento
**   I_AKTYP TYPE RC27S-AKTYP  Transaktionstyp
**   I_NO_DIALOG  TYPE C  DEFAULT SPACE Kennzeichen: kein Dialog
**     I_FLG_COL_RELEASE  TYPE C  DEFAULT SPACE Kennzeichen: Sammelfreigabe
**   IS_HEADER_DIALOG  TYPE COBAI_S_HEADER_DIALOG  Auftragskopf in Dialogstruktur
**   FREE_FAILED_ERROR   Fehlermeldung aufgetreten
*
*    DATA: ex_object_cx_root TYPE REF TO cx_root,
*          ex_text           TYPE string,
*          ex_text_long      TYPE string.
*
*      TRY.
*        CALL FUNCTION 'ZSWM_BADI_OF_LIB_EVENTO'
*          EXPORTING
*            aufnr         = is_header_dialog-aufnr
*                  .
*
*        CATCH cx_root INTO ex_object_cx_root.
*          ex_text = ex_object_cx_root->get_text( ).
*          ex_text_long = ex_object_cx_root->get_longtext( ).
*      ENDTRY.
**  fin de add jtm 06.04.2022 lanzamos evento de creción de necesidades de WM

"INI ARA 02.07.2024 - Cambio lógica de AT_RELEASE a AT_SAVE y con condiciones CTEC y no existen altas
*"INI ARA 25.06.24 - Cambio lógica de AT_RELEASE a AT_SAVE
*  DATA:LV_REL_FLG TYPE CHAR01 .
*  IF I_AKTYP EQ 'V' OR I_AKTYP EQ 'H'.
*    LV_REL_FLG = 'X'.
*    EXPORT P1 = LV_REL_FLG  TO MEMORY ID 'ZREL' .
*  ENDIF.

*    "JVM - 18/12/2023 - GAPPP008
*    "Verificamos si el material tiene valoración separada por lote
*    "BG 17/06/2024 Se grega búsqueda de precio estandar(STPRS),  categoria de valoración,
*    "cantidad base, e indicador control de precios, para actualizar vista de costos del material
*    "Se filtra solo para KZBWS EQ space - Ninguna valoración de stocks
*    SELECT SINGLE bwtty, stprs, bklas, peinh, vprsv
*     FROM mbew AS t1 INNER JOIN t001k AS t2 ON t1~bwkey EQ t2~bwkey
*      WHERE matnr = @is_header_dialog-matnr
*       AND t1~bwkey = @is_header_dialog-werks
*       AND t2~bukrs = @is_header_dialog-bukrs
*      INTO (@DATA(lv_bwtty), @DATA(lv_stprs), @DATA(lv_bklas), @DATA(lv_peinh), @DATA(lv_vprsv)).
*
*    IF lv_bwtty = 'X'.
*
*      "Verificamos si el material gestiona lote
*      SELECT SINGLE xchpf INTO @DATA(lv_lote)
*        FROM marc
*        WHERE matnr = @is_header_dialog-matnr
*        AND werks = @is_header_dialog-werks.
*      IF lv_lote = abap_true.
*        FIELD-SYMBOLS <ft> TYPE ANY TABLE.
*        ASSIGN ('(SAPLCOB1)AFPO_BT[]') TO <ft>.
*        IF sy-subrc = 0.
*          DATA string TYPE string.
*          string = 'aufnr = is_header_dialog-aufnr'.
*          LOOP AT <ft> ASSIGNING FIELD-SYMBOL(<fs>) WHERE (string).
*            EXIT.
*          ENDLOOP.
*          IF sy-subrc = 0.
*            ASSIGN ('(SAPLCOKO1)AFPOD-BWTAR') TO FIELD-SYMBOL(<fs2>).
*            IF sy-subrc = 0.
*              ASSIGN COMPONENT 'BWTAR' OF STRUCTURE <fs> TO FIELD-SYMBOL(<fs1>).
*              IF sy-subrc = 0.
*                " Solo si es Ninguna valoración de stocks
*                ASSIGN COMPONENT 'KZBWS' OF STRUCTURE <fs> TO FIELD-SYMBOL(<fs_kzbws>).
*                IF <fs_kzbws> IS ASSIGNED.
*                  IF <fs_kzbws> = space.
*                    zspp_clase_valoracion_of=>crear_clase_valoracion(
*                      EXPORTING
*                        i_matnr = is_header_dialog-matnr
*                        i_aufnr = is_header_dialog-aufnr
*                        i_werks = is_header_dialog-werks
*                        i_bklas = lv_bklas
*                        i_stprs = lv_stprs
*                        i_peinh = lv_peinh
*                        i_vprsv = lv_vprsv
*                      RECEIVING
*                        o_clase = DATA(lv_bwtar)
*                    ).
*                    IF lv_bwtar IS INITIAL.
*                      MESSAGE e001(zspp_clase_val) WITH is_header_dialog-matnr RAISING "DISPLAY LIKE 'E'.
**                RAISE
*                      free_failed_error.
*                    ELSE.
*                      <fs1> = <fs2> = lv_bwtar.
*                      DATA lv_batch TYPE charg_d.
*                      lv_batch = lv_bwtar.
*                    ENDIF.
*                  ENDIF.
*                ENDIF.
*              ENDIF.
*            ENDIF.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*    "FJVM - 18/12/2023 - GAPPP008
**"FIN ARA 25.06.24 - Cambio lógica de AT_RELEASE a AT_SAVE
"FIN ARA 02.07.2024 - Cambio lógica de AT_RELEASE a AT_SAVE y con condiciones CTEC y no existen altas

  ENDMETHOD.
  METHOD if_ex_workorder_update~at_save.

*   add jtm 06.04.2022 lanzamos evento
    IF is_header_dialog-sttxt CS 'LIB.'
    or is_header_dialog-sttxt cs 'REL'.   " add jtm 01.11.2022 cuando viene de OMP puede que se esté ejecutando en INGLES
      DATA: ex_object_cx_root TYPE REF TO cx_root,
            ex_text           TYPE string,
            ex_text_long      TYPE string.

      TRY.
          CALL FUNCTION 'ZSWM_BADI_OF_LIB_EVENTO'
            EXPORTING
              aufnr = is_header_dialog-aufnr.

        CATCH cx_root INTO ex_object_cx_root.
          ex_text = ex_object_cx_root->get_text( ).
          ex_text_long = ex_object_cx_root->get_longtext( ).
      ENDTRY.
    ENDIF.
*   fin de add jtm 06.04.2022 lanzamos evento de creción de necesidades de WM


"INI ARA 02.07.2024 - Cambio lógica de AT_RELEASE a AT_SAVE y con condiciones CTEC y no existen altas
IF ( is_header_dialog-sttxt CS 'CTEC' or is_header_dialog-sttxt cs 'TECO' ) AND is_header_dialog-igmng IS INITIAL.
*"INI ARA 25.06.24 - Cambio lógica de AT_RELEASE a AT_SAVE
*"Primero condicionamos a que estemos guardando una OF tras la primera liberación.
*DATA:LV_REL_FLG TYPE CHAR01 .
*IMPORT  P1 = LV_REL_FLG  FROM MEMORY ID 'ZREL' .
*IF SY-SUBRC = 0 AND LV_REL_FLG EQ'X'.
*  FREE MEMORY ID 'ZREL'.
*  CLEAR LV_REL_FLG.
 "JVM - 18/12/2023 - GAPPP008
    "Verificamos si el material tiene valoración separada por lote
    "BG 17/06/2024 Se grega búsqueda de precio estandar(STPRS),  categoria de valoración,
    "cantidad base, e indicador control de precios, para actualizar vista de costos del material
    "Se filtra solo para KZBWS EQ space - Ninguna valoración de stocks
    SELECT SINGLE bwtty, stprs, bklas, peinh, vprsv
     FROM mbew AS t1 INNER JOIN t001k AS t2 ON t1~bwkey EQ t2~bwkey
      WHERE matnr = @is_header_dialog-matnr
       AND t1~bwkey = @is_header_dialog-werks
       AND t2~bukrs = @is_header_dialog-bukrs
      INTO (@DATA(lv_bwtty), @DATA(lv_stprs), @DATA(lv_bklas), @DATA(lv_peinh), @DATA(lv_vprsv)).

    IF lv_bwtty = 'X'.

      "Verificamos si el material gestiona lote
      SELECT SINGLE xchpf INTO @DATA(lv_lote)
        FROM marc
        WHERE matnr = @is_header_dialog-matnr
        AND werks = @is_header_dialog-werks.
      IF lv_lote = abap_true.
        FIELD-SYMBOLS <ft> TYPE ANY TABLE.
        ASSIGN ('(SAPLCOB1)AFPO_BT[]') TO <ft>.
        IF sy-subrc = 0.
          DATA string TYPE string.
          string = 'aufnr = is_header_dialog-aufnr'.
          LOOP AT <ft> ASSIGNING FIELD-SYMBOL(<fs>) WHERE (string).
            EXIT.
          ENDLOOP.
          IF sy-subrc = 0.
            ASSIGN ('(SAPLCOKO1)AFPOD-BWTAR') TO FIELD-SYMBOL(<fs2>).
            IF sy-subrc = 0.
              ASSIGN COMPONENT 'BWTAR' OF STRUCTURE <fs> TO FIELD-SYMBOL(<fs1>).
              IF sy-subrc = 0.
                " Solo si es Ninguna valoración de stocks
                ASSIGN COMPONENT 'KZBWS' OF STRUCTURE <fs> TO FIELD-SYMBOL(<fs_kzbws>).
                IF <fs_kzbws> IS ASSIGNED.
                  IF <fs_kzbws> = space.
                    zspp_clase_valoracion_of=>crear_clase_valoracion(
                      EXPORTING
                        i_matnr = is_header_dialog-matnr
                        i_aufnr = is_header_dialog-aufnr
                        i_werks = is_header_dialog-werks
                        i_bklas = lv_bklas
                        i_stprs = lv_stprs
                        i_peinh = lv_peinh
                        i_vprsv = lv_vprsv
                      RECEIVING
                        o_clase = DATA(lv_bwtar)
                    ).
                    IF lv_bwtar IS INITIAL.
                      MESSAGE e001(zspp_clase_val) WITH is_header_dialog-matnr RAISING "DISPLAY LIKE 'E'.
*                RAISE
                      error_with_message.
                    ELSE.
                      <fs1> = <fs2> = lv_bwtar.
                      DATA lv_batch TYPE charg_d.
                      lv_batch = lv_bwtar.
"INI ARA 02.07.2024 - Cambio lógica de AT_RELEASE a AT_SAVE y con condiciones CTEC y no existen altas
*                      zspp_clase_valoracion_of=>asignar_clase_a_lote(
*                        EXPORTING
*                          i_bwtar = lv_bwtar
*                          i_charg = lv_batch
*                          i_matnr = is_header_dialog-matnr
*                          i_werks = is_header_dialog-werks ).
"FIN ARA 02.07.2024 - Cambio lógica de AT_RELEASE a AT_SAVE y con condiciones CTEC y no existen altas
                    ENDIF.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
    "FJVM - 18/12/2023 - GAPPP008
* ENDIF.
*"FIN ARA 25.06.24 - Cambio lógica de AT_RELEASE a AT_SAVE
 ENDIF.
"FIN ARA 02.07.2024 - Cambio lógica de AT_RELEASE a AT_SAVE y con condiciones CTEC y no existen altas
  ENDMETHOD.
  METHOD if_ex_workorder_update~before_update.


    DATA: it_header_func         TYPE cobai_t_header,
          it_item_func           TYPE cobai_t_item,
          it_sequence_func       TYPE cobai_t_sequence,
          it_operation_func      TYPE cobai_t_operation,
          it_component_func      TYPE cobai_t_component,
          it_doclink_func        TYPE cobai_t_doclink,
          it_prt_allocation_func TYPE cobai_t_prt_allocation.


    it_header_func[] = it_header[].
    it_item_func[] = it_item[].
    it_sequence_func[] = it_sequence[].
    it_operation_func[] = it_operation[].
    it_component_func[] = it_component[].
    it_prt_allocation_func[] = it_prt_allocation[].
    it_doclink_func[] = it_doclink[].


*    IF sy-uname EQ 'CONSULTOR PP' AND it_header[ 1 ]-aufnr CS '40000729'.
*      DO.
*      ENDDO.
*    ENDIF.
    DATA lv_objnr TYPE j_objnr.


*  Puede haber dos casos:
*  -  Una orden con solo una operación PP02 # NO se manda la orden
*  -  Una orden con varias operaciones
*  O  Todas las operaciones PP02 (caso que creo NO debería darse) # NO se manda la orden
*  O  Operaciones con PP02 y PP0X # Se manda la orden y solo las operaciones que son diferentes de PP02
*  O  Tampoco se envían las operaciones PP03
    DELETE it_operation_func WHERE steus EQ 'PP02' OR steus EQ 'PP03'.
    DESCRIBE TABLE it_operation_func LINES DATA(numopers).
    IF numopers > 0.

      DATA: it_callstack TYPE  abap_callstack,
            et_callstack TYPE  sys_callst.

      CALL FUNCTION 'SYSTEM_CALLSTACK'
*     EXPORTING
*       MAX_LEVEL          = 0
        IMPORTING
          callstack    = it_callstack
          et_callstack = et_callstack.

      READ TABLE et_callstack TRANSPORTING NO FIELDS WITH KEY progname = 'ZSPP_CREAR_OF_PEDIDO'.
      IF sy-subrc = 0.
        DATA(lv_enviar) = 'X'.
      ELSE.
        CLEAR lv_enviar.
      ENDIF.
      "JVM - ADD 12/06/2024 GAPPP025 GAPCM025 OF desde pedido subco (002)
      IF lv_enviar IS INITIAL.
        LOOP AT et_callstack TRANSPORTING NO FIELDS WHERE eventname = 'MODIFICA_OF_SUBCO' OR progname CS 'SUBCO'.
          EXIT.
        ENDLOOP.
        IF sy-subrc = 0.
          lv_enviar = 'X'.
        ELSE.
          CLEAR lv_enviar.
        ENDIF.
      ENDIF.
      "JVM - FIN ADD 12/06/2024 GAPPP025 GAPCM025 OF desde pedido subco (002)
      "JVM - ADD arranque XATIVA, relectura de datos maestros desde COHV debe dejar reenviar
      IF ( sy-tcode EQ 'COOIS' OR sy-tcode EQ 'COHV' ) AND ( sy-ucomm = 'OPT1' OR sy-ucomm = 'ENT1' ).
        lv_enviar = abap_true.
      ENDIF.
      "JVM - FIN ADD arranque XATIVA, relectura de datos maestros desde COHV debe dejar reenviar

      "INI JVM - Grafos al replanificar no se están borrando sus NTs ni se envían sus ORDERS ni DELETES
      LOOP AT et_callstack TRANSPORTING NO FIELDS WHERE eventname EQ 'ZSPP_IF_OMP_FB_UNPLN'."eventname EQ 'BAPI_PRODORD_CHANGE'.
        LOOP AT et_callstack TRANSPORTING NO FIELDS WHERE eventname EQ 'BAPI_PRODORD_CHANGE'.
          lv_enviar = abap_true.
        ENDLOOP.
      ENDLOOP.
      "FJVM - Grafos al replanificar no se están borrando sus NTs ni se envían sus ORDERS ni DELETES

      LOOP AT et_callstack TRANSPORTING NO FIELDS WHERE eventname EQ 'ZSPP_ADD_RESB' OR eventname EQ 'ZSPP_IF_OMP_FB_PLN' OR eventname EQ 'BAPI_PRODORD_GET_DETAIL'
                                                     OR eventname EQ 'BAPI_PRODORD_CHANGE' OR eventname EQ 'CO_XT_OPERATION_CHANGE' OR eventname EQ 'BAPI_PRODORD_SCHEDULE'
                                                     OR eventname EQ 'CO_XT_COMPONENT_ADD' OR eventname EQ 'CO_XT_ORDER_PREPARE_COMMIT'
                                                     OR eventname EQ 'CO_BC_RESBD_OF_ORDER_GET' OR eventname EQ 'CO_BT_RESB_UPDATE'
                                                     OR eventname CS 'SHIFCLOSURE' OR eventname CS 'ZSPP_IDOC_INPUT_NOTI'.

        EXIT.
      ENDLOOP.
      IF sy-subrc <> 0 OR lv_enviar EQ abap_true.
        DATA lv_aufnr TYPE aufnr.
*        READ TABLE it_header INTO DATA(is_header_dialog) INDEX 1.
        LOOP AT it_header INTO DATA(is_header_dialog).
          lv_aufnr = is_header_dialog-aufnr.
          CONCATENATE 'OR' lv_aufnr INTO lv_objnr.
          READ TABLE it_status WITH KEY objnr = lv_objnr stat = 'I0076' inact = space TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            DATA(lv_ptbo) = 'X'.
          ELSE.
            CLEAR lv_ptbo.
          ENDIF.


          READ TABLE it_status WITH KEY objnr = lv_objnr stat = 'I0045' inact = space TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            DATA(lv_ctec) = 'X'.
          ELSE.
            CLEAR lv_ctec.
          ENDIF.

          "Añadir el status CERR también
          READ TABLE it_status WITH KEY objnr = lv_objnr stat = 'I0046' inact = space TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            DATA(lv_cerr) = 'X'.
          ELSE.
            CLEAR lv_cerr.
          ENDIF.
          "FJVM Añadir el status CERR


          READ TABLE it_status WITH KEY objnr = lv_objnr stat = 'I0002' inact = space TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            DATA(lv_lib) = 'X'.
          ELSE.
            CLEAR lv_lib.
          ENDIF.

*        IF NOT ( is_header_dialog-sttxt CS 'CTEC' OR is_header_dialog-sttxt CS 'CERR' )."JVM - DEL enviar sólo con PTBO
*          IF NOT ( is_header_dialog-sttxt CS 'PTBO' )."JVM - DEL enviar sólo con PTBO
          IF lv_ptbo = space."JVM - DEL enviar sólo con PTBO

*            IF is_header_dialog-sttxt CS 'CTEC'.
            IF lv_ctec = 'X' OR lv_cerr EQ 'X'.
              RETURN.
            ENDIF.

            it_header_func[] = it_header[].
            DELETE it_header_func WHERE aufnr <> is_header_dialog-aufnr.
            it_item_func[] = it_item[].
            DELETE it_item_func WHERE aufnr <> is_header_dialog-aufnr.
            it_sequence_func[] = it_sequence[].
            DELETE it_sequence_func WHERE aufpl <> is_header_dialog-aufpl.
            it_operation_func[] = it_operation[].
            DELETE it_operation_func WHERE aufpl <> is_header_dialog-aufpl.
            it_component_func[] = it_component[].
            DELETE it_component_func WHERE aufnr <> is_header_dialog-aufnr.
            it_prt_allocation_func[] = it_prt_allocation[].
            DELETE it_prt_allocation_func WHERE aufpl <> is_header_dialog-aufpl.


            DELETE it_header_func WHERE vbkz = 'D'.
            DELETE it_item_func WHERE vbkz = 'D'.
            DELETE it_sequence_func WHERE vbkz = 'D'.
            DELETE it_operation_func WHERE vbkz = 'D'.
            DELETE it_component_func WHERE vbkz = 'D'.
*            DELETE it_prt_allocation_func WHERE vbkz = 'D'.
            DELETE it_doclink_func WHERE vbkz = 'D'.


* Verificamos que sólo lanzaremos el IDOC cuando el centro sea full SAP y OMP
            DATA(o_wrk) = NEW zhcl_core_wrk( ).
            ASSIGN o_wrk->i_par_centro[ werks = is_header_dialog-werks ] TO FIELD-SYMBOL(<par_centro>).
            IF sy-subrc NE 0.
              CONTINUE.
            ELSEIF NOT ( <par_centro>-full_sap = 'X' AND <par_centro>-mes = 'OMP' ).
              CONTINUE.
            ENDIF.


*            IF is_header_dialog-sttxt CS 'LIB'.
            IF lv_lib = 'X'.
              "Si está liberada, verificamos si ha habido un cambio de fechas, si lo hubiera, enviamos el idoc, sino no hacemos nada
              CALL FUNCTION 'ZSPP_IDOC_ORDERS_FECHAS_LIB'
                TABLES
                  it_header    = it_header_func
                  it_item      = it_item_func
                  it_component = it_component_func.
*              RETURN. "DEL JVM - incidencia envío idocs parciales cuando se modifican dos repartos
              CONTINUE.
            ENDIF.

*            it_doclink_func[] = it_doclink[].

            CALL FUNCTION 'ZSPP_IDOC_ORDERS' IN BACKGROUND TASK DESTINATION 'NONE'
*      CALL FUNCTION 'ZSPP_IDOC_ORDERS2'
              TABLES
*               i_aufnr           = lv_aufnr   " Número de orden
                it_header         = it_header_func
                it_item           = it_item_func
                it_sequence       = it_sequence_func
*               it_operation      = it_operation_func
                it_operation      = it_operation_func
                it_component      = it_component_func
                it_doclink        = it_doclink_func
                it_prt_allocation = it_prt_allocation_func.
          ELSE.

            CALL FUNCTION 'ZSPP_IDOC_ORDERS_DELETE' "STARTING NEW TASK 'T1'
              EXPORTING
                i_aufnr = lv_aufnr.   " Número de orden

          ENDIF.
        ENDLOOP.
      ENDIF.

    ENDIF.



  ENDMETHOD.
  method IF_EX_WORKORDER_UPDATE~CMTS_CHECK.
  endmethod.
  METHOD if_ex_workorder_update~in_update.

    DATA: it_callstack TYPE  abap_callstack,
          et_callstack TYPE  sys_callst.

    CALL FUNCTION 'SYSTEM_CALLSTACK'
*     EXPORTING
*       MAX_LEVEL          = 0
      IMPORTING
        callstack    = it_callstack
        et_callstack = et_callstack.

    READ TABLE it_header INTO DATA(wa_head) INDEX 1.
    IF sy-subrc = 0 AND wa_head-vbkz EQ 'I'.
      DATA(lv_creacion_of) = 'X'.
    ENDIF.

*    "TEMPORALMENTE para el arranque
*    IF sy-tcode EQ 'CO02'.
*      DATA(lv_modif_of) = 'X'.
*    ENDIF.
*
**    READ TABLE et_callstack WITH KEY eventname = 'ZSPP_IF_OMP_FB_PLN' TRANSPORTING NO FIELDS.
*    LOOP AT et_callstack TRANSPORTING NO FIELDS WHERE ( eventname EQ 'ZSPP_ADD_RESB' OR eventname EQ 'ZSPP_IF_OMP_FB_PLN' OR eventname EQ 'BAPI_PRODORD_GET_DETAIL'
*    OR eventname EQ 'BAPI_PRODORD_CHANGE' OR eventname EQ 'CO_XT_OPERATION_CHANGE' OR eventname EQ 'BAPI_PRODORD_SCHEDULE'
*    OR eventname EQ 'CO_XT_COMPONENT_ADD' OR eventname EQ 'CO_XT_ORDER_PREPARE_COMMIT'
*    OR eventname EQ 'CO_BC_RESBD_OF_ORDER_GET' OR eventname EQ 'CO_BT_RESB_UPDATE'
*    OR eventname CS 'SHIFCLOSURE' OR eventname CS 'ZSPP_IDOC_INPUT_NOTI'
*      OR eventname CS 'LOCAL_UPDATE_TASK' OR eventname CS 'CORUPROC' OR eventname CS 'CORUAFWP' ).
*      EXIT.
*    ENDLOOP.
*    IF sy-subrc <> 0 OR lv_creacion_of = 'X' OR lv_modif_of EQ 'X'.
     if lv_creacion_of = 'X' and NEW zhcl_core_wrk( )->es_full_sap_omp( wa_head-werks ).

      DATA: lv_orden  TYPE aufnr,
            lv_matnr  TYPE matnr,
            lv_status TYPE char20.
      TRY .
          LOOP AT it_header ASSIGNING FIELD-SYMBOL(<z>)."JVM - incidencia STOPCODES 23/02/2024
*            lv_orden = it_header[ 1 ]-aufnr."JVM - incidencia STOPCODES 23/02/2024
            lv_orden = <z>-aufnr. "JVM - Incidencia STOPCODES 23/02/2024
*            IF lv_modif_of NE 'X'.
*              CHECK it_prt_allocation[] IS NOT INITIAL.
*              CHECK it_prt_allocation[] <> it_prt_allocation_old[].
*              IF lv_creacion_of <> 'X'.
*                CHECK sy-tcode(2) = 'CO'.
*              ENDIF.
*            ENDIF.

            DATA(lt_prt_alloc) = it_prt_allocation[]. "JVM - incidencia STOPCODES 23/02/2024
            DELETE lt_prt_alloc WHERE aufpl <> <z>-aufpl. "JVM - incidencia STOPCODES 23/02/2024
            DATA(lt_operation) = it_operation[]. "JVM - incidencia STOPCODES 23/02/2024
            DELETE lt_operation WHERE aufpl <> <z>-aufpl. "JVM - incidencia STOPCODES 23/02/2024
            DATA(lt_header) = it_header[]. "JVM - incidencia STOPCODES 23/02/2024
            DELETE lt_header WHERE aufnr <> <z>-aufnr. "JVM - incidencia STOPCODES 23/02/2024

*APC20240210 Guardamos los datos para que los procese el WF
            zcl_ap_log=>set_log( proceso = 'WF_MOD_ORD' clave = lv_orden p1 = 'Se graban datos en BADI para ZSPP_IDOC_ORDERS_STOPCODES' msgty = 'I' ).
            zcl_ap_cache=>set_cache( report = 'ZSPP_IDOC_ORDERS_STOPCODES'
                                     clave = lv_orden
                                     valores = lt_prt_alloc[]
                                     valores2 = lt_operation[]
                                     valores3 = lt_header[]
                                     max_duracion = 1 ).

*            CALL FUNCTION 'ZSPP_IDOC_ORDERS_STOPCODES'
*              EXPORTING
*                i_matnr      = lv_matnr
*                i_status     = lv_status
*                i_aufnr      = lv_orden
**               it_mafs      = it_prt_allocation "JVM - incidencia STOPCODES 23/02/2024
*                it_mafs      = lt_prt_alloc
**               it_operation = it_operation "JVM - incidencia STOPCODES 23/02/2024
*                it_operation = lt_operation
**               it_header    = it_header. "JVM - incidencia STOPCODES 23/02/2024
*                it_header    = lt_header.
          ENDLOOP."JVM - incidencia STOPCODES 23/02/2024
        CATCH cx_root.

      ENDTRY.

    ENDIF.


    "JVM - Verificar si hay datos de centro de montaje para el lote
    DATA lv_auf TYPE charg_d.
    LOOP AT it_header INTO DATA(wa_headlote).
      lv_auf  = |{ wa_headlote-aufnr ALPHA = OUT }|.
      CONDENSE lv_auf.
      SELECT SINGLE * INTO @DATA(wa_aufk) FROM aufk WHERE aufnr = @wa_headlote-aufnr.
      IF sy-subrc = 0 AND wa_aufk-zzsubco_ebeln IS NOT INITIAL.
        SELECT SINGLE * INTO @DATA(wa_mcha) FROM mcha WHERE matnr = @wa_headlote-matnr AND charg = @lv_auf.
        IF sy-subrc = 0.
          wa_mcha-zzbstkd = wa_aufk-zzped_cliente.
          wa_mcha-zzkunnr = wa_aufk-zzcliente.
          MODIFY mcha FROM wa_mcha.
        ENDIF.
      ENDIF.
    ENDLOOP.
    "FJVM - Verificar si hay datos de centro de montaje para el lote
  ENDMETHOD.
  method IF_EX_WORKORDER_UPDATE~INITIALIZE.
  endmethod.
  method IF_EX_WORKORDER_UPDATE~NUMBER_SWITCH.
  endmethod.
  method IF_EX_WORKORDER_UPDATE~REORG_STATUS_ACT_CHECK.
  endmethod.
  method IF_EX_WORKORDER_UPDATE~REORG_STATUS_ACTIVATE.
  endmethod.
  method IF_EX_WORKORDER_UPDATE~REORG_STATUS_REVOKE.
  endmethod.
endclass. "ZSPP_CL_WORKORDER_UPDATE definition
endclass. "ZSPP_CL_WORKORDER_UPDATE implementation
