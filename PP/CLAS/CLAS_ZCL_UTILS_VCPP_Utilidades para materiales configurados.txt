
class ZCL_UTILS_VCPP definition
  public
  inheriting from ZCL_UTILS
  create public .

public section.

  data _CUOBJ type CUOBJ read-only .

  class-methods S_GET_CUOBJ_4_MATNR_CHARG
    importing
      !I_MATNR type MATNR
      !I_CHARG type CHARG_D
    returning
      value(E_CUOBJ) type CUOBJ
    exceptions
      NO_VALID_IPARAMS
      NO_VALUES .
protected section.
private section.
endclass. "ZCL_UTILS_VCPP definition
class ZCL_UTILS_VCPP implementation.
METHOD S_GET_CUOBJ_4_MATNR_CHARG.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_cuobj TYPE cuobj.

**********************************************************************
* Validaciones
**********************************************************************

*** IMPORT

** MATNR

  IF ( i_matnr IS INITIAL ).

    RAISE no_valid_iparams.

  ELSE.

    SELECT COUNT(*)
      FROM mara
     WHERE matnr EQ i_matnr.

    IF ( sy-subrc NE 0 ).
      RAISE no_valid_iparams.
    ENDIF.

  ENDIF.

** CHARG

  IF ( i_charg IS INITIAL ).

    RAISE no_valid_iparams.

  ELSE.

    SELECT COUNT(*)
      FROM mcha
     WHERE matnr EQ i_matnr
       AND charg EQ i_charg.

    IF ( sy-subrc NE 0 ).
      RAISE no_valid_iparams.
    ENDIF.

  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** Intentamos obtener de OF

  SELECT SINGLE cuobj
    FROM afpo
    INTO lv_cuobj
   WHERE matnr EQ i_matnr
     AND charg EQ i_charg.

  IF ( sy-subrc NE 0 OR lv_cuobj IS INITIAL OR lv_cuobj LE 0 ).



  ENDIF.

*** Volcamos valor a export

  IF ( lv_cuobj IS INITIAL OR lv_cuobj LE 0 ).
    RAISE no_values.
  ENDIF.

  MOVE lv_cuobj TO e_cuobj.

ENDMETHOD.
endclass. "ZCL_UTILS_VCPP implementation
