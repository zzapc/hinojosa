
CLASS zclpp_gestion_cargas_picking DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF ty_datos_rv,
        tknum           TYPE tknum,
        id_reg_vehiculo TYPE zid_reg_vehiculo, "link a consulta RV
        dninie          TYPE zdninie,
        nombre          TYPE znombre,
        apellidos       TYPE zapellidos,
        telefono        TYPE ztelefono,
        zmatricula1     TYPE char7,
        zmatricula2     TYPE char8,
        ind_remolque    TYPE zind_remolque,
        ico_remolque    TYPE icon_d,
        tara            TYPE z_cantidad_sin_dec,
        tara2           TYPE z_cantidad_sin_dec,
        peso_p_carga    TYPE z_cantidad_sin_dec, "DTM
        tdlnr           TYPE tdlnr,
        nom_transp      TYPE name1_gp,
        contenedor_log  TYPE zid_cont_log, "contenedor logística
*        icon_situacion  TYPE icon_d,
        icon_situacion  TYPE char4,
**•	Icono de situación del vehículo:
**o	Vehículo en destino # ICON_RELEASE, 5Y
**o	Vehículo en espera # ICON_TIME, 1T
**o	Vehículo con transporte borrado

        fecha_dest      TYPE datum,
        hora_dest       TYPE uzeit,
        sw_trans_ko     TYPE flag,
        color           TYPE  lvc_t_scol,
      END OF ty_datos_rv .
    TYPES:
      tty_datos_rv TYPE STANDARD TABLE OF ty_datos_rv .
    TYPES:
      BEGIN OF ty_datos_entregas,
        vbeln      TYPE vbeln_vl,
        kunnr      TYPE kunnr,
        name1      TYPE name1_gp,
        menge      TYPE z_cantidad_sin_dec,
        cant_pick  TYPE z_cantidad_sin_dec,
        tp_stock   TYPE char5,
        kostk      TYPE kostk,
        erdat      TYPE erdat,
        color      TYPE lvc_t_scol,
        pedido     TYPE ebeln, "DTM
        vbeln_cli  TYPE bstnk, "DTM
        puest_disp TYPE berot,
      END OF ty_datos_entregas .
    TYPES:
      tty_datos_entregas TYPE STANDARD TABLE OF ty_datos_entregas .
    TYPES:
      BEGIN OF ty_contab_entrega,
        vbeln TYPE vbeln_vl,
*        kunnr     TYPE kunnr,
*        name1     TYPE name1_gp,
*        menge     TYPE z_cantidad_sin_dec,
*        cant_pick TYPE z_cantidad_sin_dec,
*        tp_stock  TYPE char5,
        kostk TYPE kostk,
*        erdat     TYPE erdat,
*        color     TYPE  lvc_t_scol,
      END OF ty_contab_entrega .
    TYPES:
      tty_contab_entrega TYPE STANDARD TABLE OF ty_contab_entrega .

    DATA gs_vttk TYPE vttk .
    CLASS-DATA gc_clase_transp TYPE shtyp VALUE 'Z001' ##NO_TEXT.
    CLASS-DATA gc_kg_max_sin_remolque TYPE z_cantidad_sin_dec VALUE 40800 ##NO_TEXT.
    CLASS-DATA gc_kg_max_con_remolque TYPE z_cantidad_sin_dec VALUE 75000 ##NO_TEXT.
    CLASS-DATA gs_dias_selec_entregas TYPE dlydy VALUE 30 ##NO_TEXT.

    METHODS constructor
      IMPORTING
        !i_tknum TYPE tknum .
    CLASS-METHODS get_datos_rv
      IMPORTING
        !i_werks     TYPE werks_d
      EXPORTING
        !ot_datos_rv TYPE tty_datos_rv .
    CLASS-METHODS get_entregas_centro
      IMPORTING
        !i_werks     TYPE werks_d
      EXPORTING
        !ot_entregas TYPE tty_datos_entregas .
    CLASS-METHODS crear_transporte
      IMPORTING
        !i_werks        TYPE werks_d
        !i_id_rv        TYPE zid_reg_vehiculo
        !it_vbeln       TYPE tty_contab_entrega
        !i_peso_alb     TYPE zpeso_alb
        !iw_2o_remolque TYPE zind_remolque
        !i_cont_log     TYPE zid_cont_log
        !iv_ajustado    TYPE flag OPTIONAL
      EXPORTING
        !o_tknum        TYPE tknum
        !o_rc           TYPE char02 .
    CLASS-METHODS borrar_transporte
      IMPORTING
        !i_werks TYPE werks_d
        !i_tknum TYPE tknum
      EXPORTING
        !o_rc    TYPE char02 .
    CLASS-METHODS get_tknum_from_rv
      IMPORTING
        !i_werks           TYPE werks_d
        !i_id_reg_vehiculo TYPE zid_reg_vehiculo
      RETURNING
        VALUE(r_tknum)     TYPE tknum .
    CLASS-METHODS lanzar_msg_albaran
      IMPORTING
        !i_vbeln TYPE vbeln_vl
        !i_msg   TYPE sna_kschl
      EXPORTING
        !o_rc    TYPE char02 .
    CLASS-METHODS get_entregas_de_transporte
      IMPORTING
        !i_tknum        TYPE tknum
      RETURNING
        VALUE(rt_vbeln) TYPE tt_vbeln .
    CLASS-METHODS imprimir_albaranes
      IMPORTING
        !i_tknum TYPE tknum
        !i_mail  TYPE flag DEFAULT ' '
      EXPORTING
        !o_rc    TYPE char02 .
    CLASS-METHODS imprimir_certif_trans_picking
      IMPORTING
        !i_tknum           TYPE tknum
        !iw_picking_certif TYPE char1
      EXPORTING
        !o_rc              TYPE char02 .
    CLASS-METHODS contabilizar_entregas
      IMPORTING
        !i_tknum     TYPE tknum
        !it_vbeln    TYPE tty_contab_entrega
        !iv_ajustado TYPE flag OPTIONAL
      EXPORTING
        !o_rc        TYPE char02 .
    CLASS-METHODS estado_transp_despacho_exped
      IMPORTING
        !i_tknum        TYPE tknum
        !i_peso_alb     TYPE zpeso_alb OPTIONAL
        !iw_2o_remolque TYPE zind_remolque
      EXPORTING
        !o_rc           TYPE char02 .
    CLASS-METHODS estado_ini_transporte
      IMPORTING
        !i_tknum TYPE tknum
      EXPORTING
        !o_rc    TYPE char02 .
protected section.
private section.
endclass. "ZCLPP_GESTION_CARGAS_PICKING definition
class ZCLPP_GESTION_CARGAS_PICKING implementation.

  METHOD lanzar_msg_albaran.
    DATA l_subrc TYPE sy-subrc.

    o_rc = '00'.

    SELECT SINGLE *
      INTO @DATA(ls_nast)
      FROM nast
      WHERE kappl = 'V2'              AND
            objky = @i_vbeln AND       "zesd_gestpick_bobinas_scr-vbeln
*            kschl = 'ZLD0'.
            kschl = @i_msg.
    IF sy-subrc <> 0.
      MESSAGE 'No se encontraron mensajes para este registro' TYPE 'I'.
      o_rc = '01'.
      EXIT.
    ENDIF.

    ls_nast-erdat = sy-datum.
    ls_nast-eruhr = sy-uzeit.

    CASE i_msg.
      WHEN 'ZMAI'.
        ls_nast-nacha = 5. " Envia externo. valor anterior: 1.
      WHEN 'ZLD0'.
        ls_nast-nacha = 1.
      WHEN OTHERS.
    ENDCASE.

    ls_nast-anzal = 4. "DTM - Se sacan 4 copias.
    ls_nast-vsztp = 3.
    ls_nast-manue = 'X'.
    ls_nast-datvr = sy-datum.
    ls_nast-uhrvr = sy-uzeit.
    ls_nast-usnam = sy-uname.
    ls_nast-vstat = 1.
    ls_nast-dimme = 'X'.
    ls_nast-delet = ''.

TRY .

    CALL FUNCTION 'WFMC_MESSAGE_SINGLE'
      EXPORTING
        pi_nast  = ls_nast
      IMPORTING
        pe_rcode = l_subrc.

    IF l_subrc <> 0.
*      MESSAGE 'Error al lanzar el mensaje ZLD0 para la entrega' TYPE 'I' DISPLAY LIKE 'E'.
      o_rc = '02'.
    ELSE.
      MESSAGE |Impresión de albarán { i_vbeln ALPHA = OUT } realizada correctamente.| TYPE 'S'.
    ENDIF.

    COMMIT WORK AND WAIT.

CATCH cx_root.
      o_rc = '02'.

ENDTRY.


  ENDMETHOD.
* **************************************************************
* Método para imprimir el certificado de carga o packing list. *
* **************************************************************
  METHOD imprimir_certif_trans_picking.

    DATA l_subrc TYPE sy-subrc.
    DATA l_kschl TYPE kschl.

    CASE iw_picking_certif.
      WHEN 'P'. l_kschl = 'ZPAK'. "Lista de contenido (packing list)
      WHEN 'C'. l_kschl = 'ZCTF'. "Cerfiticado de carga
      WHEN OTHERS.
        o_rc = '04'. "Opción de impresión incorrecta
    ENDCASE.
    SELECT SINGLE *
      INTO @DATA(ls_nast)
       FROM nast
  WHERE kappl = 'V7'
    AND objky = @i_tknum
    AND kschl = @l_kschl.

    IF sy-subrc <> 0.
      o_rc = '01'.
      EXIT.
    ENDIF.

    ls_nast-erdat = sy-datum.
    ls_nast-eruhr = sy-uzeit.
    ls_nast-nacha = 1.
    ls_nast-anzal = 2. "DTM - Se sacan 2 copias
    ls_nast-vsztp = 3.
    ls_nast-manue = 'X'.
    ls_nast-datvr = sy-datum.
    ls_nast-uhrvr = sy-uzeit.
    ls_nast-usnam = sy-uname.
    ls_nast-vstat = 1.
    ls_nast-dimme = 'X'.
    ls_nast-delet = ''.

    CALL FUNCTION 'WFMC_MESSAGE_SINGLE'
      EXPORTING
        pi_nast  = ls_nast
      IMPORTING
        pe_rcode = l_subrc.

    IF l_subrc <> 0.
      o_rc = '02'.
    ELSE.
      o_rc = '00'.
      COMMIT WORK AND WAIT.
    ENDIF.



  ENDMETHOD.
  METHOD borrar_transporte.

    DATA: l_activities TYPE  v56e_shipment_activities.
    CLEAR: l_activities.

    l_activities-delete-execute = 'X'.
    l_activities-delete-shipment_number = i_tknum.

    CALL FUNCTION 'SD_SHIPMENT_PROCESS'
* EXPORTING
*   PROCESS_BEGIN        = 'X'
*   PROCESS_HEADER       = 'X'
*   PROCESS_ITEMS        = 'X'
*   PROCESS_STAGES       = 'X'
*   PROCESS_STATUS       = 'X'
*   PROCESS_END          = 'X'
* IMPORTING
*   E_LOGFILE            =
      CHANGING
        c_activities = l_activities
*       C_SHIPMENT   =
      EXCEPTIONS
        error        = 1
        OTHERS       = 2.

    IF sy-subrc <> 0.
      o_rc = '01'.
    ELSE.
      o_rc = '00'.
    ENDIF.


  ENDMETHOD.
  method CONSTRUCTOR.

    select single *
      into @gs_vttk
      from vttk
      where tknum = @i_tknum.


  endmethod.
  METHOD contabilizar_entregas.

    DATA: ls_vbkok TYPE vbkok,
          v_error  TYPE xfeld,
          lt_prot  TYPE STANDARD TABLE OF prott.


    LOOP AT it_vbeln INTO DATA(ls_entrega).

      CLEAR ls_vbkok.
      ls_vbkok-vbeln_vl = ls_entrega.
      ls_vbkok-wabuc = 'X'. " SM

* Si la entrega está en estado B, aplicar: "Ajuste automático de cantidad entrega a cantidad picking"
      IF ls_entrega-kostk EQ 'B'.
        ls_vbkok-komue = 'X'. "Ajuste automático de cantidad entrega a cantidad picking"
      ELSE.
        ls_vbkok-komue = ' '.
      ENDIF.

      IF iv_ajustado EQ abap_false. "DTM

* Actualizamos las cantidades.
        CALL FUNCTION 'WS_DELIVERY_UPDATE'
          EXPORTING
            vbkok_wa                  = ls_vbkok
            delivery                  = ls_entrega-vbeln
            update_picking            = 'X'         "Update Picking data
*           nicht_sperren             = si
          IMPORTING
            ef_error_in_goods_issue_0 = v_error
          TABLES
*           vbpok_tab                 = i_vbpok
            prot                      = lt_prot
          EXCEPTIONS
            error_message             = 99.

        IF sy-subrc EQ 0 AND v_error = ' '.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X'.
          o_rc = '00'.
        ELSE.

          IF sy-msgid = 'VL' AND sy-msgno = 602. " Entrega ya contabilizada, no se considera Error
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = 'X'.
            o_rc = '00'.
          ELSE.

            MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno WITH sy-msgv1
                       sy-msgv2 sy-msgv3 sy-msgv4 DISPLAY LIKE 'I'.
*      MESSAGE 'Error al actualizar la entrega' TYPE 'I'.
            o_rc = '05'.

          ENDIF.
        ENDIF.

        CALL FUNCTION 'DEQUEUE_ALL' EXPORTING _synchron = 'X'.

      ENDIF. "DTM

    ENDLOOP.


  ENDMETHOD.
  METHOD crear_transporte.

    DATA: gdt_item TYPE STANDARD TABLE OF bapishipmentitem,
          gdt_dlin TYPE STANDARD TABLE OF bapishipmentheaderdeadline,
          gdt_ret2 TYPE bapiret2_tab.
    DATA: gwa_header TYPE bapishipmentheader.

    DATA lv_berot TYPE likp-berot.

    REFRESH: gdt_item,
             gdt_ret2.

    CLEAR: gwa_header,
           o_tknum.

    o_rc = '00'.

    DATA(lr_reg_vehi) = zclpp_reg_vehiculo_master=>obtener_registro_vehi( i_werks = i_werks
                                                                          i_reg_vehiculo = i_id_rv ).
    "Cabecera del Documento de transporte
    gwa_header-shipment_type = gc_clase_transp.
    gwa_header-trans_plan_pt = i_werks.

    "Se inicia en status Planificado
    "Se puede iniciar en otro status, se deben marcar todos los status previos
    gwa_header-status_plan          = abap_true.
    gwa_header-service_agent_id     = lr_reg_vehi->gs_ztpp56-tdlnr.

    gwa_header-text_1                     = |{ lr_reg_vehi->gs_ztpp56-dninie } { lr_reg_vehi->gs_ztpp56-nombre } { lr_reg_vehi->gs_ztpp56-apellidos }|.
    DATA(l_suma_tara)                     = lr_reg_vehi->gs_ztpp59-tara + lr_reg_vehi->gs_ztpp59-tara_remol.
    gwa_header-text_2                     = |{ l_suma_tara  }|.
    gwa_header-container_id               = lr_reg_vehi->gs_ztpp59-zmatricula1.
    gwa_header-description                = lr_reg_vehi->gs_ztpp59-zmatricula2.
****    gwa_header-external_id_1                = lr_reg_vehi->gs_ztpp59-destino.
    gwa_header-external_id_2              = lr_reg_vehi->gs_ztpp59-contenedor_log.
    gwa_header-tendering_carrier_track_id = lr_reg_vehi->gs_ztpp59-id_reg_vehiculo.
*    gwa_header- = lr_reg_vehi->gs_ztpp59-id_reg_vehiculo.



* Informar condición de expedición.
    CASE lr_reg_vehi->gs_ztpp59-ind_remolque.
      WHEN ' '. gwa_header-shipping_cond = 'CC'.
      WHEN 'X'. gwa_header-shipping_cond = 'Z3'.
      WHEN OTHERS.
    ENDCASE.

*SAP-Note 531207
*TIME_TYPE = HDRSTPLDT  --> Date/time of end of planning
*TIME_TYPE = HDRSTCIPDT --> PLANNED date/time of check-in
*TIME_TYPE = HDRSTCIADT --> ACTUAL date/time of check-in
*TIME_TYPE = HDRSTLSPDT --> PLANNED date/time of loading start
*TIME_TYPE = HDRSTLSADT --> ACTUAL date/time of loading start
*TIME_TYPE = HDRSTLEPDT --> PLANNED date/time of loading end
*TIME_TYPE = HDRSTLEADT --> ACTUAL date/time of loading end
*TIME_TYPE = HDRSTCPDT  --> PLANNED date/time of shipment completion
*TIME_TYPE = HDRSTCADT  --> ACTUAL date/time of shipment completion
*TIME_TYPE = HDRSTSSPDT --> PLANNED date/time of shipment start
*TIME_TYPE = HDRSTSSADT --> ACTUAL date/time of shipment start
*TIME_TYPE = HDRSTSEPDT --> PLANNED date/time of shipment end
*TIME_TYPE = HDRSTSEADT --> ACTUAL date/time of shipment end

    gwa_header-status_plan        = 'X'.
    gwa_header-status_checkin     = 'X'.
    gwa_header-status_load_start  = 'X'.
    gwa_header-status_load_end    = 'X'.
    gwa_header-status_compl       = 'X'.


    "Se completa la fecha y hora de cada status
    " Fecha/Hora de Planificación de necesidades
    APPEND INITIAL LINE TO gdt_dlin ASSIGNING FIELD-SYMBOL(<fs_dlin>).
    <fs_dlin>-time_type      = 'HDRSTPLDT'. "Date/time of end of planning
    <fs_dlin>-time_stamp_utc = lr_reg_vehi->gs_ztpp59-fecha_ins && lr_reg_vehi->gs_ztpp59-hora_ins.
*    <fs_dlin>-time_zone      = l_zone.
*    <fs_dlin>-time_zone      = 'UTC'.

    APPEND INITIAL LINE TO gdt_dlin ASSIGNING <fs_dlin>.
    <fs_dlin>-time_type      = 'HDRSTCIADT'. "ACTUAL date/time of check-in
    <fs_dlin>-time_stamp_utc = lr_reg_vehi->gs_ztpp59-fecha_ins && lr_reg_vehi->gs_ztpp59-hora_ins.

    APPEND INITIAL LINE TO gdt_dlin ASSIGNING <fs_dlin>.
    <fs_dlin>-time_type      = 'HDRSTLSADT'. "--> ACTUAL date/time of loading start
    <fs_dlin>-time_stamp_utc = lr_reg_vehi->gs_ztpp59-fecha_dest && lr_reg_vehi->gs_ztpp59-hora_dest.

    APPEND INITIAL LINE TO gdt_dlin ASSIGNING <fs_dlin>.
    <fs_dlin>-time_type      = 'HDRSTLEADT'. "--> ACTUAL date/time of loading end
    <fs_dlin>-time_stamp_utc = sy-datum && sy-uzeit.

    "Se pueden asignar las entregas, no es obligatorio.
    LOOP AT it_vbeln INTO DATA(ls_vbeln).
      APPEND INITIAL LINE TO gdt_item ASSIGNING FIELD-SYMBOL(<fs_item>).
      <fs_item>-delivery = ls_vbeln.
    ENDLOOP.

    "Se ejecuta la BAPI
    CALL FUNCTION 'BAPI_SHIPMENT_CREATE'
      EXPORTING
        headerdata     = gwa_header
      IMPORTING
        transport      = o_tknum
      TABLES
        headerdeadline = gdt_dlin
        itemdata       = gdt_item
        return         = gdt_ret2.
    "Si o_tknum tiene un valor, se creó el transporte
    IF o_tknum IS INITIAL.
      READ TABLE gdt_ret2 ASSIGNING FIELD-SYMBOL(<fs_ret2>) WITH KEY type = 'E'.
      IF sy-subrc EQ 0.
        "Mensaje de la BAPI
        MESSAGE <fs_ret2>-message TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.

      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      o_rc = '02'.
      EXIT.
    ENDIF.

    CALL METHOD zclpp_reg_vehiculo_master=>actualizar_tknum
      EXPORTING
        i_werks       = i_werks
        i_id_reg_vehi = i_id_rv
        i_tknum       = o_tknum
      IMPORTING
        o_rc          = o_rc.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = abap_true.



    CALL METHOD zclpp_gestion_cargas_picking=>contabilizar_entregas
      EXPORTING
        i_tknum     = o_tknum
        it_vbeln    = it_vbeln
        iv_ajustado = iv_ajustado "DTM
      IMPORTING
        o_rc        = o_rc.
    IF o_rc = '05'.
      EXIT.
    ENDIF.

    CALL METHOD zclpp_gestion_cargas_picking=>estado_transp_despacho_exped
      EXPORTING
        i_tknum        = o_tknum
        i_peso_alb     = i_peso_alb
        iw_2o_remolque = iw_2o_remolque
      IMPORTING
        o_rc           = o_rc.
    IF o_rc = '04'.
      EXIT.
    ENDIF.

    LOOP AT it_vbeln INTO ls_vbeln.

      SELECT SINGLE berot FROM likp INTO lv_berot WHERE vbeln = ls_vbeln-vbeln.

      IF lv_berot = '2'.

        CALL FUNCTION 'Z_E80_ENVIO_ENTREGAS_EXPEDIDAS'
          EXPORTING
            i_vbeln = ls_vbeln-vbeln
            i_werks = i_werks.

      ENDIF.

    ENDLOOP.

    IF i_cont_log <> ' '.

      CALL METHOD zclpp_gestion_cargas_picking=>imprimir_certif_trans_picking
        EXPORTING
          i_tknum           = o_tknum
          iw_picking_certif = 'P'.
    ENDIF.

    CALL METHOD zclpp_gestion_cargas_picking=>imprimir_albaranes
      EXPORTING
        i_tknum = o_tknum
        i_mail  = 'X'.


  ENDMETHOD.
  METHOD estado_ini_transporte.

    DATA: lt_vttk TYPE STANDARD TABLE OF vttk,
          l_tknum TYPE tknum.

    CLEAR lt_vttk[].
    l_tknum = |{ i_tknum ALPHA = IN }|.
*-Obtengo todos los datos referentes a la posicion a modificar
    SELECT SINGLE *
      FROM vttk
      INTO @DATA(ls_vttk)
      WHERE tknum = @l_tknum.

    IF sy-subrc <> 0.
*      MESSAGE 'Error al leer transporte' TYPE 'I'.
      o_rc = '01'.
      EXIT.
    ENDIF.

* Informar campos "iniciar_transporte"
    ls_vttk-datbg = sy-datum.
    ls_vttk-uatbg = sy-uzeit.
    ls_vttk-sttbg = 'X'.

    DATA: lv_horas_i TYPE i,
          lv_min_i   TYPE i,
          l_segundos TYPE p.

    CLEAR: lv_min_i, lv_horas_i. " lv_seg, lv_formato.

    lv_horas_i = ls_vttk-route+2(2).
    lv_min_i = ls_vttk-route+4(2).

    " Cálculo en segundos:
    l_segundos = lv_horas_i * 3600 + lv_min_i * 60.

    CALL FUNCTION 'C14Z_CALC_DATE_TIME'
      EXPORTING
        i_add_seconds = l_segundos
        i_uzeit       = sy-uzeit
        i_datum       = sy-datum
      IMPORTING
        e_datum       = ls_vttk-dpten
        e_uzeit       = ls_vttk-upten.

* DTM - Se actualiza el status global de transporte
    ls_vttk-sttrg = ls_vttk-sttrg + 1.
* DTM

    APPEND ls_vttk TO lt_vttk.

    CALL FUNCTION 'RV_SHIPMENT_UPDATE_DB'
      EXPORTING
        i_flag_tra_complete = 'X'
      TABLES
        db_vttk_upd         = lt_vttk.

    COMMIT WORK AND WAIT.

  ENDMETHOD.
  METHOD estado_transp_despacho_exped.

    DATA lt_vttk TYPE STANDARD TABLE OF vttk.

    CLEAR: lt_vttk[].
*-Obtengo todos los datos referentes a la posicion a modificar
    SELECT SINGLE *
      FROM vttk
      INTO @DATA(ls_vttk)
      WHERE tknum = @i_tknum.
    IF sy-subrc <> 0.
      o_rc = '04'.
      EXIT.
    ENDIF.

* Modifico los datos que deseo
    ls_vttk-dtabf = sy-datum.
    ls_vttk-uzabf = sy-uzeit.
    ls_vttk-stabf = 'X'.

    IF i_peso_alb IS SUPPLIED.
      ls_vttk-zzpeso_alb = i_peso_alb.
    ENDIF.

* Según tenga o no remolque, informar los kg. máximos.
    IF iw_2o_remolque = 'X'.
      ls_vttk-allowed_twgt = gc_kg_max_con_remolque.
    ELSE.
      ls_vttk-allowed_twgt = gc_kg_max_sin_remolque.
    ENDIF.

* DTM - Se actualiza el status global de transporte
    ls_vttk-sttrg = ls_vttk-sttrg + 1.
* DTM

    APPEND ls_vttk TO lt_vttk.

    CALL FUNCTION 'RV_SHIPMENT_UPDATE_DB'
      EXPORTING
        i_flag_tra_complete = 'X'
      TABLES
        db_vttk_upd         = lt_vttk.

    COMMIT WORK AND WAIT.

  ENDMETHOD.
  METHOD get_datos_rv.

    CLEAR ot_datos_rv[].

    DATA(lt_rv_espera)  = zclpp_reg_vehiculo_master=>obtener_vehiculos_en_espera( i_werks ).

    DATA(lt_rv_destino) = zclpp_reg_vehiculo_master=>obtener_vehiculos_en_planta( i_werks ).

    DELETE lt_rv_espera  WHERE destino <> '02'. "Expediciones
    DELETE lt_rv_destino WHERE destino <> '02'. "Expediciones

    LOOP AT lt_rv_destino INTO DATA(ls_rv_dest).
      APPEND INITIAL LINE TO ot_datos_rv ASSIGNING FIELD-SYMBOL(<fs_rv>).
      <fs_rv> = CORRESPONDING #( ls_rv_dest ).

* DTM - Se calcula el peso permitido carga

      IF <fs_rv>-tara2 EQ 0.

        <fs_rv>-peso_p_carga = zclpp_gestion_cargas_picking=>gc_kg_max_sin_remolque - <fs_rv>-tara.

      ELSE.

        <fs_rv>-peso_p_carga = zclpp_gestion_cargas_picking=>gc_kg_max_con_remolque - ( <fs_rv>-tara + <fs_rv>-tara2 ).

      ENDIF.

* DTM

      IF <fs_rv>-tknum IS INITIAL.
        <fs_rv>-icon_situacion = |@5Y@|. "o  Vehículo en destino # ICON_RELEASE, 5Y
      ELSE.
        <fs_rv>-icon_situacion = |@7Q@|. "o  Vehículo con transporte creado # ICON_RELEASE, 5Y
      ENDIF.
    ENDLOOP.

    LOOP AT lt_rv_espera INTO DATA(ls_rv_esp).
      APPEND INITIAL LINE TO ot_datos_rv ASSIGNING <fs_rv>.
      <fs_rv> = CORRESPONDING #( ls_rv_esp ).
      <fs_rv>-fecha_dest =  ls_rv_esp-fecha_esp.
      <fs_rv>-hora_dest  =  ls_rv_esp-hora_esp.
      <fs_rv>-icon_situacion = |@1T@|. "o	Vehículo en espera # ICON_TIME, 1T
    ENDLOOP.

    LOOP AT ot_datos_rv ASSIGNING <fs_rv>.

      IF <fs_rv>-ind_remolque = 'X'.
        <fs_rv>-ico_remolque = '@01@'.
      ENDIF.

      CHECK <fs_rv>-tknum IS NOT INITIAL.

* select para buscar entregas a un transporte
      SELECT SINGLE vbeln INTO @DATA(l_vbeln)
        FROM vbfa
        WHERE vbtyp_n = '8'  AND" Transporte
              vbtyp_v = 'J' AND
              vbeln   = @<fs_rv>-tknum.
      IF sy-subrc <> 0.
        CLEAR <fs_rv>-tknum.
        <fs_rv>-sw_trans_ko     = 'X'.
        <fs_rv>-icon_situacion  = |@5Y@|. "o  Vehículo en destino # ICON_RELEASE, 5Y

      ENDIF.

    ENDLOOP.

  ENDMETHOD.
  METHOD get_entregas_centro.
    DATA: l_avui_menys_30 TYPE datum.

* DTM

    CONSTANTS: lc_ventas TYPE char3 VALUE 'ZLF'.

* DTM

    CLEAR ot_entregas[].

    CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
      EXPORTING
        date      = sy-datum
        days      = gs_dias_selec_entregas
        months    = 0
        signum    = '-'
        years     = 0   " para probar y obtener entregas antiguas, cambiar a 1 año.
      IMPORTING
        calc_date = l_avui_menys_30.


    SELECT likp~vbeln, likp~zzsegcal, likp~lfart, vbuk~kostk, kunnr, erdat, likp~berot
      INTO  TABLE @DATA(lt_likp)
      FROM likp
      INNER JOIN vbuk ON vbuk~vbeln = likp~vbeln
      WHERE vbuk~kostk IN ('A','B','C')
        AND likp~lfart IN ('ZNLC','ZLF', 'ZNL2') "DTM - Añadir ZNL2
        AND lfdat      GE @l_avui_menys_30
        AND vstel      EQ @i_werks.

    LOOP AT lt_likp INTO DATA(ls_likp).

* Descartar entregas ya asociadas a un transporte
      SELECT SINGLE vbeln INTO @DATA(l_vbeln)
        FROM vbfa
        WHERE vbtyp_n = '8'  AND" Transporte
              vbtyp_v = 'J' AND
              vbelv   = @ls_likp-vbeln.
      IF sy-subrc = 0.
        CONTINUE.
      ENDIF.

* Descartar entregas que contenga en la 1ª posición, Materia Prima (ZREC).
      SELECT SINGLE vbeln
        INTO @DATA(l_v)
        FROM lips
        INNER JOIN mara ON mara~matnr = lips~matnr
        WHERE lips~vbeln = @ls_likp-vbeln AND
              lips~posnr = 10 AND
              mara~mtart = 'ZREC'.
      IF sy-subrc = 0.
        CONTINUE.
      ENDIF.


      APPEND INITIAL LINE TO ot_entregas ASSIGNING FIELD-SYMBOL(<fs_entrega>).
      <fs_entrega> = CORRESPONDING #( ls_likp ).
      CALL METHOD zcl_utils_hpap_pp=>get_datos_cliente
        EXPORTING
          i_kunnr = <fs_entrega>-kunnr
        IMPORTING
          o_name1 = <fs_entrega>-name1.

      <fs_entrega>-tp_stock = zclpp_app_logistica=>get_tp_stock( ls_likp-zzsegcal ).

       CASE ls_likp-berot.

         WHEN 1. <fs_entrega>-puest_disp = ICON_RELEASE .

         WHEN 2. <fs_entrega>-puest_disp = ICON_COMPLETE .

           ENDCASE.

* DTM - Se obtienen los pedidos de ventas

* Pedidos de ventas

      IF ls_likp-lfart EQ lc_ventas.

        SELECT SINGLE vbelv FROM vbfa
          WHERE vbeln EQ @ls_likp-vbeln
        INTO @<fs_entrega>-pedido.

        IF sy-subrc EQ 0.

* Se obtiene el número de pedido del cliente para pedidos de venta
          SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<fs_entrega>-pedido
          INTO @<fs_entrega>-vbeln_cli.

        ENDIF.

      ENDIF.

* DTM

* Obtener kg.entrega y kg.picking de cada entrega.
      CALL METHOD zclpp_app_logistica=>get_posiciones_entrega
        EXPORTING
          i_werks        = i_werks
          i_vbeln        = <fs_entrega>-vbeln
        IMPORTING
          ot_pos_entrega = DATA(lt_pos_entre)
          o_rc           = DATA(l_rc).

      LOOP AT lt_pos_entre INTO DATA(ls_posic) WHERE NOT posnr CP '90*' .
        <fs_entrega>-menge      = <fs_entrega>-menge + ls_posic-lfimg.
        <fs_entrega>-cant_pick  = <fs_entrega>-cant_pick  + ls_posic-cant_pick.
      ENDLOOP.

*Pintar campo estado con el color que toca.
      APPEND INITIAL LINE TO <fs_entrega>-color[] ASSIGNING FIELD-SYMBOL(<fs_color>).
      <fs_color>-fname = 'KOSTK'.
      <fs_color>-color-int = '0'.

      CASE <fs_entrega>-kostk.
        WHEN 'A'. <fs_color>-color-col = '6'.
        WHEN 'B'. <fs_color>-color-col = '3'.
        WHEN 'C'. <fs_color>-color-col = '5'.
        WHEN OTHERS.
      ENDCASE.

    ENDLOOP.


  ENDMETHOD.
  METHOD get_entregas_de_transporte.

* select para buscar entregas a un transporte
    SELECT  vbelv INTO TABLE @rt_vbeln
      FROM vbfa
      WHERE vbtyp_n = '8'  AND" Transporte
            vbtyp_v = 'J'  AND
            vbeln   = @i_tknum.
    IF sy-subrc <> 0.
      CLEAR rt_vbeln.
    ENDIF.

  ENDMETHOD.
  method GET_TKNUM_FROM_RV.

DATA(lr_reg_vehi) = zclpp_reg_vehiculo_master=>obtener_registro_vehi( i_werks = i_werks
                                                                        i_reg_vehiculo = i_id_reg_vehiculo ).

  r_tknum = lr_reg_vehi->gs_ztpp59-tknum.

  endmethod.
  METHOD imprimir_albaranes.

    DATA(lt_vbeln) = zclpp_gestion_cargas_picking=>get_entregas_de_transporte( i_tknum ).

    LOOP AT lt_vbeln INTO DATA(l_vbeln).

      CALL METHOD zclpp_gestion_cargas_picking=>lanzar_msg_albaran
        EXPORTING
          i_vbeln = l_vbeln
          i_msg   = 'ZLD0'
        IMPORTING
          o_rc    = o_rc.

* Cuando la llamada sea desde la creación de Transporte, se lanzará msg ZMAI.
      IF i_mail = 'X'.
        CALL METHOD zclpp_gestion_cargas_picking=>lanzar_msg_albaran
          EXPORTING
            i_vbeln = l_vbeln
            i_msg   = 'ZMAI'
          IMPORTING
            o_rc    = o_rc.
        IF o_rc = '00'.
          MESSAGE |Albaran { l_vbeln ALPHA = OUT } enviado por correo correctamente| type 'S'.
        ENDIF.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.
