
class ZCLPP_REG_VEHICULO_MASTER definition
  public
  create public .

public section.

  types:
    ztp_carga      TYPE STANDARD TABLE OF ztpp0050 .
  types:
    zdestinos      TYPE STANDARD TABLE OF ztpp0051 .
  types:
    ztp_motivos    TYPE STANDARD TABLE OF ztpp0052 .
  types:
    ztp_residuos   TYPE STANDARD TABLE OF ztpp0053 .
  types:
    z_tp_prod_quim TYPE STANDARD TABLE OF ztpp0054 .
  types:
    ztp_carburante TYPE STANDARD TABLE OF ztpp0055 .
  types:
    zcontenedores     TYPE STANDARD TABLE OF ztpp0060 .
  types:
    zrel_dest_tp_carga  TYPE STANDARD TABLE OF ztpp0064 .
  types:
    BEGIN OF ty_datos_list77,
        werks            TYPE werks_d,
        id_reg_vehiculo  TYPE zid_reg_vehiculo,
        estado           TYPE zestado_reg_vehi,
        destino          TYPE zid_destino,
        desc_destino     TYPE zdesc_destino,
        dninie           TYPE zdninie,
        nombre           TYPE znombre,
        apellidos        TYPE zapellidos,
        telefono         TYPE ztelefono,
        tdlnr            TYPE tdlnr,
        nombre_trans     TYPE tdlnr,
        zmatricula1      TYPE zed_matricula,
        zmatricula2      TYPE zed_matricula,
        ind_remolque     TYPE zind_remolque,
        tp_carga         TYPE zid_tp_carga,
        descr_tp_carga   TYPE zdesc_tp_carga,
        albaran          TYPE vbeln_vl,
        tknum            TYPE tknum,
        observaciones    TYPE zobservaciones,
        peso_bruto       TYPE z_cantidad_sin_dec,
        tara             TYPE z_cantidad_sin_dec,
        peso_bruto_remol TYPE z_cantidad_sin_dec,
        tara_remol       TYPE z_cantidad_sin_dec,
        contenedor_entr  TYPE zcont_residuos,
        contenedor_sali  TYPE zcont_residuos,
        peso_neto        TYPE z_cantidad_sin_dec,

        fecha_esp        TYPE   erdat,
        hora_esp         TYPE   erzeit,
        usuario_esp      TYPE   znombre_oper,

        fecha_dest       TYPE   erdat,
        hora_dest        TYPE   erzeit,
        usuario_dest     TYPE   znombre_oper,

        motivo_anulacion TYPE   zid_motivo_anul,
        fecha_anul       TYPE   vvdstku,
        hora_anul	       TYPE coos_cancellation_time,
        usuario_anul     TYPE znombre_oper,

        fecha_ins        TYPE   erdat,
        hora_ins         TYPE   erzeit,

        fecha_sal        TYPE   erdat,
        hora_sal         TYPE   erzeit,
        usuario_sal      TYPE   znombre_oper,

* Datos de carburante (ZTPP0061 + descr. maestro ZTPP0055)
        id_tp_carburante TYPE matnr,
        desc_tp_carbu    TYPE maktx,
        litros_carbu     TYPE z_cantidad_sin_dec,

* Datos de PPQQ (ZTPP0062 + descr. maestro ZTPP0054)
        id_tp_ppqq       TYPE matnr,
        desc_tp_ppqq     TYPE maktx,
        num_grgs         TYPE char10,

* Datos de Residuos (ZTPP0063 + descr. maestro ZTPP0053)
        id_tp_residuo_1  TYPE zid_lear,
        id_tp_residuo_2  TYPE zid_tp_residuo,
        descr_residuo    TYPE zdescr_tp_resi,
        zzptorec 	       TYPE zzptorec,
        zzptorecdes      TYPE  zzptorecdes,
      END OF ty_datos_list77 .
  types:
    tty_datos_list77 TYPE STANDARD TABLE OF ty_datos_list77 .
  types:
    BEGIN OF ty_listado_ppqq,
        werks_code      TYPE werks_d,
        werks           TYPE char30,
        zmatricula      TYPE char07,
        desc_tranp      TYPE char40,
        nombre_cond     TYPE char40,
        poblacion       TYPE char20,
        txt_lugar_fecha TYPE char50,

*             dia             TYPE char02,
*             mes_alpha       TYPE char12,
*             anyo            TYPE char4,
        logo_header_url TYPE pathintern,
      END OF ty_listado_ppqq .
  types:
    tty_listado_ppqq TYPE STANDARD TABLE OF ty_listado_ppqq .

  data GS_ZTPP59 type ZTPP0059 .
  data GS_ZTPP56 type ZTPP0056 .
  class-data GC_EST_ADESTINO type ZESTADO_REG_VEHI value 'ADESTINO' ##NO_TEXT.
  class-data GC_EST_AESPERA type ZESTADO_REG_VEHI value 'AESPERA' ##NO_TEXT.
  class-data GC_EST_SALIDA type ZESTADO_REG_VEHI value 'SALIDA' ##NO_TEXT.
  class-data GC_EST_ANULADO type ZESTADO_REG_VEHI value 'ANULADO' ##NO_TEXT.
  class-data GT_DESTINOS type ZDESTINOS .
  class-data GT_TP_CARGA type ZTP_CARGA .
  class-data GT_MOTIVOS_ANULACION type ZTP_MOTIVOS .
  class-data GT_CONTENEDORES type ZCONTENEDORES .
  class-data GT_REL_DES_TPCARGA type ZREL_DEST_TP_CARGA .

  methods CONSTRUCTOR
    importing
      !I_WERKS type WERKS_D
      !I_ID_REG_VEHICULO type ZID_REG_VEHICULO .
  class-methods CREAR_CONDUCTOR
    importing
      !I_DNINIE type ZDNINIE
      !I_WERKS type WERKS_D
      !I_NOMBRE type ZNOMBRE
      !I_APELLIDOS type ZAPELLIDOS
      !I_TELEFONO type ZTELEFONO
      !I_TDLNR type TDLNR
      !I_OPERARIO type ZNOMBRE_OPER
      !I_MATRICULA type CHAR7
    exporting
      !O_RC type CHAR02 .
  class-methods OBTENER_REGISTRO_VEHI
    importing
      !I_WERKS type WERKS_D
      !I_REG_VEHICULO type ZID_REG_VEHICULO
    returning
      value(RR_REG_VEHICULO) type ref to ZCLPP_REG_VEHICULO_MASTER .
  class-methods PROCESAR_ENTRADA_VEHICULO
    importing
      !I_WERKS type WERKS_D
      !I_TP_CARGA type ZID_TP_CARGA
      !I_OPERARIO type ZNOMBRE_OPER
      !IS_REG_ENTRADA type ZTPP0059
      !I_TRANSPORTISTA type TDLNR optional
      !I_ZMATRICULA2 type ZED_MATRICULA optional
    exporting
      !O_ID_REG_ENTRADA type ZID_REG_VEHICULO
      !O_RC type CHAR2 .
  class-methods MODIFICAR_CONDUCTOR
    importing
      !I_DNINIE type ZDNINIE
      !I_WERKS type WERKS_D
      !I_NOMBRE type ZNOMBRE
      !I_APELLIDOS type ZAPELLIDOS
      !I_TELEFONO type ZTELEFONO
      !I_TDLNR type TDLNR
      !I_INCIDENCIA type ZINCIDENCIA
      !I_OPERARIO type ZNOMBRE_OPER
    exporting
      !O_RC type CHAR02 .
  class-methods VALIDAR_TURNO_ACTUAL
    importing
      !I_TURNO type ZZTURNO
    returning
      value(R_TURNO_OK) type FLAG .
  class-methods VALIDAR_ALBARAN_PROVEEDOR
    importing
      !I_ALBARAN type XBLNR1
      !I_LIFNR type LIFNR
      !I_ENTRADA type ZED_ENTRADA optional
    exporting
      value(O_RC) type CHAR02 .
  class-methods GENERAR_ID_REGISTRO_VEHICULO
    importing
      !I_WERKS type WERKS_D
    returning
      value(R_ID_REG_VEHICULO) type ZID_REG_VEHICULO .
  class-methods BORRAR_CONDUCTOR
    importing
      !I_DNINIE type ZDNINIE
      !I_OPERARIO type ZNOMBRE_OPER
    exporting
      !O_RC type CHAR2 .
  class-methods GRABAR_REGISTRO_VEHICULO
    importing
      !IS_DATOS_REGISTRO_ENTR type ZTPP0059
      !IS_Z61 type ZTPP0061 optional
      !IS_Z62 type ZTPP0062 optional
      !I_REG_ENTRADA_ZMM0003 type ZED_ENTRADA optional
      !I_OPERARIO type ZNOMBRE_OPER
    exporting
      !O_ID_REG_VEHICULO type ZID_REG_VEHICULO
      !O_RC type CHAR02 .
  class-methods ANULAR_REGISTRO_VEHICULO
    importing
      !I_WERKS type WERKS_D
      !I_ID_REG_VEHICULO type ZID_REG_VEHICULO
      !I_MOTIVO_ANULACION type ZID_MOTIVO_ANUL
      !I_OPERARIO type ZNOMBRE_OPER
    exporting
      !O_RC type CHAR2 .
  class-methods GRABAR_RELACION_CONDU_VEHI
    importing
      !I_DNINIE type ZDNINIE
      !I_ZMATRICULA1 type CHAR7
      !I_OPERARIO type ZNOMBRE_OPER
    exporting
      !O_RC type CHAR2 .
  class-methods GRABAR_SALIDA_VEHICULO
    importing
      !IS_DATOS_REG_VEHICULO type ZTPP0059
      !I_OPERARIO type ZNOMBRE_OPER
    exporting
      !O_RC type CHAR02 .
  class-methods BORRAR_RELACION_CONDU_VEHI
    importing
      !I_DNINIE type ZDNINIE
      !I_ZMATRICULA1 type CHAR7
      !I_OPERARIO type ZNOMBRE_OPER
    exporting
      !O_RC type CHAR2 .
  class-methods CLASS_CONSTRUCTOR .
  class-methods FORMATEAR_CAMPO_CANTIDAD
    importing
      !I_CANTIDAD type MENGE_D
    returning
      value(R_TEXTO_FORMATEADO) type CHAR30 .
  class-methods FORMATEAR_CAMPO_CANTIDAD_2
    importing
      !I_CANTIDAD type ANY
    returning
      value(R_TEXTO_FORMATEADO) type CHAR30 .
  class-methods OBTENER_VEHICULOS_EN_ESPERA
    importing
      !I_WERKS type WERKS_D
    returning
      value(RT_VEHICULOS_EN_ESPERA) type ZTTPP_VEHICULOS_ESPERA .
  class-methods OBTENER_VEHICULOS_EN_PLANTA
    importing
      !I_WERKS type WERKS_D
    returning
      value(RT_VEHICULOS_EN_PLANTA) type ZTTPP_VEHICULOS_PLANTA .
  class-methods OBTENER_DATOS_ZPP0077
    importing
      !I_WERKS type WERKS_D
      !IR_REG_VEHICULO type ZRPP_REG_VEHICULO
      !IR_FECHA_REGISTRO type TRGR_DATE
      !I_ALBARAN type CHAR20
      !I_MATRICULA type CHAR7
      !I_DESTINO type ZID_DESTINO
      !IW_INCLUIR_BORRADOS type FLAG
    exporting
      !OT_DATOS type TTY_DATOS_LIST77 .
  class-methods VALIDAR_TKNUM
    importing
      !I_TKNUM type TKNUM
    returning
      value(R_TKNUM_OK) type FLAG .
  class-methods ACTUALIZAR_TKNUM
    importing
      !I_WERKS type WERKS_D
      !I_ID_REG_VEHI type ZID_REG_VEHICULO
      !I_TKNUM type TKNUM
    exporting
      !O_RC type CHAR2 .
  class-methods ACTUALIZAR_OBSERVACIONES
    importing
      !I_WERKS type WERKS_D
      !I_ID_REG_VEHI type ZID_REG_VEHICULO
      !I_OBSERVACIONES type ZOBSERVACIONES
    exporting
      !O_RC type CHAR2 .
protected section.
private section.
endclass. "ZCLPP_REG_VEHICULO_MASTER definition
class ZCLPP_REG_VEHICULO_MASTER implementation.
* 69265 - 28/10/2021 - Validar nº albaran del proveedor tratado en el año en curso

  METHOD validar_albaran_proveedor.
    DATA: l_data_ini TYPE datum,
          l_data_fin TYPE datum,
          l_anyo     TYPE char4.

    l_anyo = sy-datum(4).
    l_data_ini = |{ l_anyo }0101|.
    l_data_fin = |{ l_anyo }1231|.

    IF i_entrada IS SUPPLIED.

      SELECT SINGLE zentrada
        INTO @DATA(l_entrada)
        FROM ztmm0006
        WHERE xblnr = @i_albaran AND
              lifnr = @i_lifnr   AND
              bldat BETWEEN @l_data_ini AND @l_data_fin AND
              zentrada <> @i_entrada AND
              zborrado = ' '.
    ELSE.

      SELECT SINGLE zentrada
        INTO @l_entrada
        FROM ztmm0006
        WHERE xblnr = @i_albaran AND
              lifnr = @i_lifnr   AND
              bldat BETWEEN @l_data_ini AND @l_data_fin AND
              zborrado = ' '.
    ENDIF.

    IF sy-subrc = 0.
      o_rc = '01'.
    ELSE.
      o_rc = '00'.
    ENDIF.
  ENDMETHOD.
* CMS 08/2020
* Proceso de grabación salida
*
* 1. Si el destino es residuos, se muestra ventana para informar producto
* 2. Si el destino es MP, Conexión con ZMM0004
* 3. Grabación maestro RV(ZTPP0059)
* 4. Impresión tiquet de báscula
* 5. Si se trata de PPQQ, impresión de formulario PPQQ
*

  METHOD grabar_salida_vehiculo.

    DATA: ls_z063 TYPE ztpp0063,
          ls_z061 TYPE ztpp0061.

    CLEAR: ls_z063 , ls_z061.

    CASE is_datos_reg_vehiculo-destino.
*************************************************************************
      WHEN '01'.   "Materia prima

        IF is_datos_reg_vehiculo-tp_carga = '1'. "Materia prima

          SELECT SINGLE ztmm0006~zentrada , znum_pesada , zcontabilizado
            INTO @DATA(ls_zentrada)  "@data(l_num_pesada)
            FROM ztmm0006
            INNER JOIN ztmm0007 ON ztmm0006~zentrada = ztmm0007~zentrada
            WHERE id_reg_vehiculo = @is_datos_reg_vehiculo-id_reg_vehiculo.
          IF sy-subrc = 0.

* 22/01/2020 - CMS - 64891 - Validar que el transporte no esté ya contabilizado (via Tx.ZMM0004).
            IF ls_zentrada-zcontabilizado = 'X'.

              CALL FUNCTION 'ZPP_PANTALLA_AVISO'
                EXPORTING
                  titulo   = ''
                  tp_icono = 'W'
                  text1    = 'AVISO. '
                  text2    = 'Contabilización de materia prima ya realizada.'.



*              message |Contabilización de materia prima ya realizada.| type 'W' DISPLAY LIKE 'I'.
*              o_rc = '14'.
*              EXIT.
            ELSE.


* Popup para saber si hay que hacer la contabilización (ZMM0004) o no.
              DATA: lv_answer(1) TYPE c,
                    l_msg        TYPE string.

              l_msg = |¿Desea realizar la contabilización de materia prima?|.
              CALL FUNCTION 'POPUP_TO_CONFIRM'
                EXPORTING
                  titlebar              = 'Contabilización de materia prima'
                  text_question         = l_msg
                  text_button_1         = 'SI'
                  icon_button_1         = 'ICON_OKAY'
                  text_button_2         = 'NO'
                  icon_button_2         = 'ICON_CANCEL'
                  default_button        = '2'
                  display_cancel_button = ' '
                IMPORTING
                  answer                = lv_answer
                EXCEPTIONS
                  text_not_found        = 1
                  OTHERS                = 2.

              CASE lv_answer.
                WHEN '1'.
                  DATA: l_tara_alf TYPE char17.
                  l_tara_alf = CONV #( is_datos_reg_vehiculo-tara +  is_datos_reg_vehiculo-tara_remol ).

                  SET PARAMETER ID: 'ZVEHI_SAL_ID'     FIELD ls_zentrada-zentrada,
                                    'ZVEHI_SAL_WERKS'  FIELD is_datos_reg_vehiculo-werks,
                                    'ZVEHI_SAL_NUMPES' FIELD ls_zentrada-znum_pesada,
                                    'ZVEHI_SAL_TARA'   FIELD l_tara_alf.

                  CALL TRANSACTION 'ZMM0004_REG_VEH'.

                  GET PARAMETER ID: 'ZVEHI_SAL_RC' FIELD o_rc.
* Limpiamos Parameter
                  SET PARAMETER ID  'ZVEHI_SAL_RC' FIELD space.

                  IF o_rc <> '00'.
                    EXIT.
                  ENDIF.
                WHEN OTHERS.
              ENDCASE.
            ENDIF.
          ENDIF.
        ENDIF.

      WHEN '02'.   "Expediciones
**   Comprobar flag ZTPP0032.
*        CASE zcl_utils_hpap_pp=>get_flag_ztpp0032( i_werks = is_datos_reg_vehiculo-werks i_apl = 'RV_VALIDACIONES_ZCARGAS' ).
*          WHEN ' '." Nuevo PICKING activado.
            IF is_datos_reg_vehiculo-tknum IS NOT INITIAL.

              CALL METHOD zclpp_gestion_cargas_picking=>estado_ini_transporte
                EXPORTING
                  i_tknum = is_datos_reg_vehiculo-tknum
                IMPORTING
                  o_rc    = data(l_rc_sin_uso).

            ENDIF.
*          WHEN OTHERS.
*
*        ENDCASE.

      WHEN '03'. " RESIDUOS

        CALL FUNCTION 'ZMPP_SALIDA_MERCANCIA_RESIDUOS'
          EXPORTING
            i_werks        = is_datos_reg_vehiculo-werks
          IMPORTING
            o_tp_residuo_1 = ls_z063-id_tp_residuo_1
            o_tp_residuo_2 = ls_z063-id_tp_residuo_2
            o_rc           = o_rc.

        IF o_rc <> '00'.
          o_rc = '01'.
          EXIT.
        ELSE.
* Grabar datos de RV de residuos
          ls_z063-werks = is_datos_reg_vehiculo-werks.
          ls_z063-id_reg_vehiculo = is_datos_reg_vehiculo-id_reg_vehiculo.
          INSERT ztpp0063 FROM ls_z063.
          IF sy-subrc <> 0.
            o_rc = '02'.
            EXIT.
          ENDIF.

        ENDIF.
*************************************************************************

*************************************************************************
      WHEN '05'.   "Carburantes

        CLEAR ls_z061.
        ls_z061-werks            = is_datos_reg_vehiculo-werks.
        ls_z061-id_reg_vehiculo  = is_datos_reg_vehiculo-id_reg_vehiculo.

        CALL FUNCTION 'ZMPP_ENTRADA_MERCANCIA_CARBURA'
          EXPORTING
            i_werks       = ls_z061-werks
          IMPORTING
            o_tp_producto = ls_z061-id_tp_carburante
            o_litros      = ls_z061-litros " l_litros
            o_rc          = o_rc.

        IF o_rc <> '00'.
          EXIT.
        ELSE.
* Grabación de datos de carburante.
          ls_z061-id_tp_carburante = |{ ls_z061-id_tp_carburante ALPHA = IN }|.
          INSERT ztpp0061 FROM ls_z061.

        ENDIF.



      WHEN OTHERS.
    ENDCASE.
*  ENDIF.
*    ENDIF.
*  ENDIF.


*WHEN OTHERS.
*ENDCASE.

UPDATE ztpp0059
SET peso_bruto       = is_datos_reg_vehiculo-peso_bruto
tara             = is_datos_reg_vehiculo-tara
peso_bruto_remol = is_datos_reg_vehiculo-peso_bruto_remol
tara_remol       = is_datos_reg_vehiculo-tara_remol
contenedor_sali  = is_datos_reg_vehiculo-contenedor_sali
contenedor_entr  = is_datos_reg_vehiculo-contenedor_entr
peso_cont_sali   = is_datos_reg_vehiculo-peso_cont_sali
peso_cont_entr   = is_datos_reg_vehiculo-peso_cont_entr
peso_neto        = is_datos_reg_vehiculo-peso_neto
albaran          = is_datos_reg_vehiculo-albaran
tknum            = is_datos_reg_vehiculo-tknum
observaciones    = is_datos_reg_vehiculo-observaciones
zmatricula2      = is_datos_reg_vehiculo-zmatricula2
usuario_sal      = i_operario
fecha_sal        = sy-datum
hora_sal         = sy-uzeit
estado           = is_datos_reg_vehiculo-estado
WHERE werks           = is_datos_reg_vehiculo-werks AND
id_reg_vehiculo = is_datos_reg_vehiculo-id_reg_vehiculo.
IF sy-subrc <> 0.
o_rc = '03'.
EXIT.
ENDIF.


* Impresion Tiquet de Báscula.
CALL FUNCTION 'ZMFPP_IMPRESION_TIQUET_BASCULA'
EXPORTING
  i_werks           = is_datos_reg_vehiculo-werks
  i_id_reg_vehiculo = is_datos_reg_vehiculo-id_reg_vehiculo.



ENDMETHOD.
  METHOD ACTUALIZAR_OBSERVACIONES.

    UPDATE ztpp0059
    SET observaciones = @i_observaciones
    WHERE werks           = @i_werks AND
          id_reg_vehiculo = @i_id_reg_vehi.

    IF sy-subrc = 0.
      o_rc = '00'.
    ELSE.
      o_rc = '01'.
    ENDIF.

  ENDMETHOD.
  METHOD actualizar_tknum.

    UPDATE ztpp0059
    SET tknum = @i_tknum
    WHERE werks           = @i_werks AND
          id_reg_vehiculo = @i_id_reg_vehi.

    IF sy-subrc = 0.
      o_rc = '00'.
    ELSE.
      o_rc = '01'.
    ENDIF.

  ENDMETHOD.
  METHOD anular_registro_vehiculo.
    o_rc = '00'.
* CMS 20/05/2021 Borrar registro de ZTMM0006-7

    SELECT SINGLE zentrada
      INTO @DATA(l_entrada)
      FROM ztmm0006
      WHERE id_reg_vehiculo = @i_id_reg_vehiculo.

    IF sy-subrc <> 0. "se creó la entrada en RV pero no la EM en ZMM0003.
      UPDATE ztpp0059 SET  estado           = gc_est_anulado
                           motivo_anulacion = i_motivo_anulacion
                           fecha_anul       = sy-datum
                           hora_anul        = sy-uzeit
                           usuario_anul     = i_operario
                     WHERE werks            = i_werks AND
                           id_reg_vehiculo  = i_id_reg_vehiculo.

      IF sy-subrc <> 0.
        MESSAGE |Error al actualizar el registro de vehículo.| TYPE 'I' DISPLAY LIKE 'E'.
        o_rc = '02'.
      ENDIF.

      EXIT.
    ENDIF.

    CALL FUNCTION 'ENQUEUE_EZED_ENTRADA'
      EXPORTING
        zentrada       = l_entrada
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      o_rc = '02'.
      data(l_MESSAGE) = |Entrada { l_entrada ALPHA = OUT } bloqueada, borrar mas tarde.|.
      CONDENSE l_message.
      MESSAGE l_message TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.

    UPDATE ztpp0059 SET  estado           = gc_est_anulado
                         motivo_anulacion = i_motivo_anulacion
                         fecha_anul       = sy-datum
                         hora_anul        = sy-uzeit
                         usuario_anul     = i_operario
                   WHERE werks            = i_werks AND
                         id_reg_vehiculo  = i_id_reg_vehiculo.
    IF sy-subrc <> 0.
      MESSAGE |Error al actualizar el registro de vehículo.| TYPE 'I' DISPLAY LIKE 'E'.
      o_rc = '02'.
    ENDIF.

    IF sy-subrc <> 0.
      o_rc = '02'.
      EXIT.
    ENDIF.


    UPDATE ztmm0006
      SET zborrado = 'X'
      WHERE id_reg_vehiculo = i_id_reg_vehiculo.

    UPDATE ztmm0007
      SET zborrado = 'X'
      WHERE zentrada = l_entrada.

    COMMIT WORK.

  ENDMETHOD.
  METHOD BORRAR_CONDUCTOR.

    UPDATE ztpp0056
      SET lvorm        = 'X'
          fecha_del     = sy-datum
          hora_del      = sy-uzeit
          usuario_del   = i_operario
     WHERE dninie = i_dninie.
    IF sy-subrc = 0.
      o_rc = '00'.
      COMMIT WORK AND WAIT.
    ELSE.
      o_rc = '01'.
    ENDIF.



  ENDMETHOD.
  METHOD BORRAR_RELACION_CONDU_VEHI.

    DATA: ls_reg_z58 TYPE ztpp0058.

    o_rc = '00'.

    SELECT SINGLE lvorm INTO @DATA(l_lvorm)
      FROM ztpp0058
      WHERE dninie      = @i_dninie AND
            zmatricula1 = @i_zmatricula1.
    IF sy-subrc <> 0. " Registro a eliminar no encontrado
      o_rc = '01'.
    ELSE.

      CASE l_lvorm.
        WHEN 'X'. " Registro ya borrado
          o_rc = '02'.

        WHEN ' '.
          UPDATE ztpp0058
             SET lvorm        = 'X'       ,
                 fecha_anul   = @sy-datum ,
                 hora_anul    = @sy-uzeit ,
                 usuario_anul = @i_operario
           WHERE dninie       = @i_dninie AND
                 zmatricula1  = @i_zmatricula1.

        WHEN OTHERS.
      ENDCASE.

    ENDIF.

  ENDMETHOD.
METHOD class_constructor.

  SELECT * INTO TABLE @gt_destinos
    FROM   ztpp0051
    ORDER BY id_destino ASCENDING.

  SELECT * INTO TABLE @gt_tp_carga
     FROM   ztpp0050.

  SELECT * INTO TABLE @gt_contenedores
     FROM   ztpp0060.

  SELECT * INTO TABLE @gt_motivos_anulacion
     FROM   ztpp0052.

  SELECT * INTO TABLE @gt_rel_des_tpcarga
     FROM   ztpp0064.

ENDMETHOD.
  method CONSTRUCTOR.

    select SINGLE *
      into CORRESPONDING FIELDS OF gs_ztpp59
      from ztpp0059
      WHERE werks           = i_werks and
            id_reg_vehiculo = i_id_reg_vehiculo.

    SELECT SINGLE *
      INTO CORRESPONDING FIELDS OF gs_ztpp56
      from ztpp0056
      where dninie = gs_ztpp59-dninie.


*    SELECT SINGLE *
*      INTO CORRESPONDING FIELDS OF gs_ztpp57
*      from ztpp0057
*      where zmatricula1 = gs_ztpp59-zmatricula1.
*

  endmethod.
  METHOD crear_conductor.

    DATA: ls_56 TYPE ztpp0056.

    ls_56-dninie      = i_dninie.
    ls_56-werks       = i_werks.
    ls_56-nombre      = i_nombre.
    ls_56-apellidos   = i_apellidos.
    ls_56-telefono    = i_telefono.
    ls_56-tdlnr       = i_tdlnr.
    ls_56-fecha_ins   = sy-datum.
    ls_56-hora_ins    = sy-uzeit.
    ls_56-usuario_ins = i_operario.

    INSERT INTO ztpp0056 VALUES ls_56.
    IF sy-subrc = 0.
      CALL METHOD zclpp_reg_vehiculo_master=>grabar_relacion_condu_vehi
        EXPORTING
          i_dninie      = i_dninie
          i_zmatricula1 = i_matricula
          i_operario    = i_operario
        IMPORTING
          o_rc          = o_rc.

      IF o_rc = '00'.
        COMMIT WORK AND WAIT.
      ELSE.
        o_rc = '01'.
      ENDIF.
    ELSE.

      o_rc = '01'.

* DTM - Mensaje de advertencia

      MESSAGE |Conductor ya existe| TYPE 'I' DISPLAY LIKE 'W'.

* DTM

    ENDIF.

  ENDMETHOD.
  METHOD formatear_campo_cantidad.

    DATA: l_text TYPE char15.
    DATA: l_entero TYPE i.

    l_entero = i_cantidad.
    write l_entero to l_text.
    CONDENSE l_text NO-GAPS.
    r_texto_formateado = |{ l_text } Kg|.

*    condense r_texto_formateado NO-GAPS.

  ENDMETHOD.
  METHOD FORMATEAR_CAMPO_CANTIDAD_2.

    DATA: l_text TYPE char15.
    DATA: l_entero TYPE i.

    l_entero = i_cantidad.
    write l_entero to l_text.
    CONDENSE l_text NO-GAPS.
    r_texto_formateado = |{ l_text } Kg|.

*    condense r_texto_formateado NO-GAPS.

  ENDMETHOD.
  METHOD GENERAR_ID_REGISTRO_VEHICULO.

    DATA l_tp_rango TYPE nrnr.

    CASE i_werks.
      WHEN '3000'. l_tp_rango = '01'.
      WHEN '3020'. l_tp_rango = '02'.
      WHEN OTHERS.
    ENDCASE.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        nr_range_nr   = l_tp_rango
        object        = 'ZPP_IDVEHI'
        quantity      = '1'
*       SUBOBJECT     = ' '
*       TOYEAR        = '0000'
        ignore_buffer = 'X'
      IMPORTING
        number        = r_id_reg_vehiculo
*       QUANTITY      =
*       RETURNCODE    =
*     EXCEPTIONS
*       INTERVAL_NOT_FOUND            = 1
*       NUMBER_RANGE_NOT_INTERN       = 2
*       OBJECT_NOT_FOUND              = 3
*       QUANTITY_IS_0 = 4
*       QUANTITY_IS_NOT_1             = 5
*       INTERVAL_OVERFLOW             = 6
*       BUFFER_OVERFLOW               = 7
*       OTHERS        = 8
      .
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.



  ENDMETHOD.
  METHOD grabar_registro_vehiculo.

    DATA: ls_datos_reg TYPE ztpp0059.

    IF is_datos_registro_entr-id_reg_vehiculo IS INITIAL.

      ls_datos_reg = is_datos_registro_entr.

      ls_datos_reg-id_reg_vehiculo = zclpp_reg_vehiculo_master=>generar_id_registro_vehiculo( is_datos_registro_entr-werks ).

      ls_datos_reg-fecha_ins      = sy-datum.
      ls_datos_reg-hora_ins       = sy-uzeit.
      ls_datos_reg-usuario_ins    = i_operario.

* Si el estado a insertar es A ESPERA, actualizamos campos de log
      CASE ls_datos_reg-estado.
        WHEN gc_est_aespera.
          ls_datos_reg-usuario_esp    = i_operario.
          ls_datos_reg-fecha_esp      = sy-datum.
          ls_datos_reg-hora_esp       = sy-uzeit.
        WHEN gc_est_adestino.
          ls_datos_reg-usuario_dest    = i_operario.
          ls_datos_reg-fecha_dest      = sy-datum.
          ls_datos_reg-hora_dest       = sy-uzeit.

        WHEN OTHERS.
      ENDCASE.

      INSERT ztpp0059 FROM ls_datos_reg.

      IF sy-subrc <> 0.
        o_rc = '01'.
      ELSE.
        o_rc = '00'.
        o_id_reg_vehiculo = ls_datos_reg-id_reg_vehiculo.
      ENDIF.

      SELECT SINGLE @abap_true INTO @DATA(l_true)
        FROM ztpp0058
        WHERE dninie      = @ls_datos_reg-dninie AND
              zmatricula1 = @ls_datos_reg-zmatricula1 AND
              lvorm       = ' '.
      IF sy-subrc <> 0.

*        CALL METHOD zclpp_registro_vehiculo=>grabar_relacion_condu_vehi
        CALL METHOD grabar_relacion_condu_vehi
          EXPORTING
            i_dninie      = ls_datos_reg-dninie
            i_zmatricula1 = ls_datos_reg-zmatricula1
            i_operario    = i_operario.

      ENDIF.

    ELSE.

      ls_datos_reg = is_datos_registro_entr.

* Recuperamos los datos que no se deben modificar (datos de inserción y espera)
      SELECT SINGLE *
        INTO  @data(ls_59)
        FROM ztpp0059
        WHERE werks           = @is_datos_registro_entr-werks AND
              id_reg_vehiculo = @is_datos_registro_entr-id_reg_vehiculo.
        IF sy-subrc = 0.
          ls_datos_reg-fecha_ins      = ls_59-fecha_ins.
          ls_datos_reg-hora_ins       = ls_59-hora_ins.
          ls_datos_reg-usuario_ins    = ls_59-usuario_ins.

          ls_datos_reg-fecha_esp      = ls_59-fecha_esp.
          ls_datos_reg-hora_esp       = ls_59-hora_esp.
          ls_datos_reg-usuario_esp    = ls_59-usuario_esp.

        ENDIF.


      ls_datos_reg-usuario_dest    = i_operario.
      ls_datos_reg-fecha_dest      = sy-datum.
      ls_datos_reg-hora_dest       = sy-uzeit.
      MODIFY ztpp0059 FROM ls_datos_reg.
      o_id_reg_vehiculo = is_datos_registro_entr-id_reg_vehiculo.
    ENDIF.

* Grabación de datos de carburante.  (Trasladado a la salida)
*    IF is_z61 IS SUPPLIED.
*      INSERT ztpp0061 FROM is_z61.
*    ENDIF.

* Grabación de dadtos de productos químicos
    data ls_Z62 type ztpp0062.

    IF is_z62 IS SUPPLIED.
      ls_z62                 = is_z62.
      ls_z62-werks           = is_datos_registro_entr-werks.
      ls_z62-id_reg_vehiculo = o_id_reg_vehiculo.
      ls_z62-id_tp_prodquimico = |{ ls_z62-id_tp_prodquimico ALPHA = IN }|.
      INSERT ztpp0062 FROM ls_z62.
    ENDIF.

* ZMM0003/4 Actualizamos el id_reg_vehiculo en: - Cabecera
*                                               - Tiquet en la(s) posicion(es).
    IF i_reg_entrada_zmm0003 IS SUPPLIED.

      UPDATE ztmm0006
          SET id_reg_vehiculo = ls_datos_reg-id_reg_vehiculo
          WHERE zentrada = i_reg_entrada_zmm0003.

      UPDATE ztmm0007
          SET znum_pesada = ls_datos_reg-id_reg_vehiculo
          WHERE zentrada = i_reg_entrada_zmm0003. " and
*                posnr    = 1.

    ENDIF.
  ENDMETHOD.
  METHOD grabar_relacion_condu_vehi.

    DATA: ls_reg_z58 TYPE ztpp0058.

    SELECT SINGLE lvorm INTO @DATA(l_lvorm)
      FROM ztpp0058
      WHERE dninie      = @i_dninie AND
            zmatricula1 = @i_zmatricula1.

    IF sy-subrc <> 0. "Si no existe el registro, lo insertamos
      CLEAR ls_reg_z58.

      ls_reg_z58-dninie         = i_dninie.
      ls_reg_z58-zmatricula1    = i_zmatricula1.
      ls_reg_z58-lvorm          = ' '.
      ls_reg_z58-fecha_ins      = sy-datum.
      ls_reg_z58-hora_ins       = sy-uzeit.
      ls_reg_z58-usuario_ins    = i_operario.
      INSERT ztpp0058 FROM ls_reg_z58.
      IF sy-subrc = 0.
        o_rc = '00'.
      ELSE.
        o_rc = '01'.
      ENDIF.
    ELSE. "Si existe el registro miramos si está borrado

      CASE l_lvorm.
        WHEN 'X'. " Si el registro estaba borrado, lo reactivamos
          UPDATE ztpp0058
              SET lvorm       = ' '       ,
                  fecha_ins   = @sy-datum ,
                  hora_ins    = @sy-uzeit ,
                  usuario_ins = @i_operario
          WHERE dninie        = @i_dninie AND
                zmatricula1   = @i_zmatricula1.
          IF sy-subrc = 0.
            o_rc = '00'.
          ELSE.
            o_rc = '02'.
          ENDIF.
        WHEN ' '. " Error ya existe el registro activo
          o_rc = '03'.
        WHEN OTHERS.
      ENDCASE.

    ENDIF.


  ENDMETHOD.
  METHOD MODIFICAR_CONDUCTOR.

    update ztpp0056
          set nombre        = i_nombre
              apellidos     = i_apellidos
              telefono      = i_telefono
              tdlnr         = i_tdlnr
              incidencia    = i_incidencia
              fecha_upd     = sy-datum
              hora_upd      = sy-uzeit
              usuario_upd   = i_operario
         where dninie = i_dninie.
    IF sy-subrc = 0.
      o_rc = '00'.
      COMMIT WORK AND WAIT.
    ELSE.
      o_rc = '01'.
    ENDIF.

  ENDMETHOD.
  METHOD obtener_datos_zpp0077.

    TYPES: BEGIN OF ty_prov,
             lifnr TYPE lifnr,
             name1 TYPE name1_gp,
           END OF ty_prov.

    DATA: lr_alb       TYPE RANGE OF vbeln_vl.
    DATA: lr_mat       TYPE RANGE OF zed_matricula.
    DATA: lr_des       TYPE RANGE OF zid_destino.
    DATA: lr_estado    TYPE RANGE OF zestado_reg_vehi.
    DATA: lt_proveedor TYPE STANDARD TABLE OF ty_prov.

    CLEAR : lr_alb , lr_mat , lr_des , ot_datos.

    IF i_albaran IS NOT INITIAL.
      lr_alb  = VALUE #( sign = 'I' option = 'EQ' ( low = i_albaran )
                       ).
    ENDIF.

    IF i_matricula IS NOT INITIAL.
      lr_mat  = VALUE #( sign = 'I' option = 'EQ' ( low = i_matricula )
                       ).
    ENDIF.

    IF i_destino IS NOT INITIAL.
      lr_des  = VALUE #( sign = 'I' option = 'EQ' ( low = i_destino )
                       ).
    ENDIF.

* Si hay que excluir borrado, insertamos la exclusión en la selección
    CLEAR lr_estado[].
    IF iw_incluir_borrados = ' '.
      lr_estado  = VALUE #( sign = 'E' option = 'EQ' ( low = zclpp_reg_vehiculo_master=>gc_est_anulado ) ).
    ENDIF.

    SELECT z6~* , z9~* , z9~fecha_ins AS fecha_ins, mm~zzptorec , mm~zzptorecdes
      INTO CORRESPONDING FIELDS OF TABLE @ot_datos
      FROM ztpp0059 AS z9
      INNER JOIN ztpp0056 AS z6 ON z6~dninie = z9~dninie
      left JOIN ztmm0006 AS mm6 ON mm6~id_reg_vehiculo = z9~id_reg_vehiculo
      LEFT JOIN ztmm0021 AS mm ON mm~zzptorec = mm6~zptorec
      WHERE z9~werks            = @i_werks AND
            z9~fecha_ins    IN @ir_fecha_registro AND
            z9~id_reg_vehiculo    IN @ir_reg_vehiculo AND
            albaran         IN @lr_alb AND
            z9~zmatricula1  IN @lr_mat AND
            destino         IN @lr_des AND
            z9~estado       IN @lr_estado
            ORDER BY z9~id_reg_vehiculo.

    CHECK ot_datos IS NOT INITIAL.

    LOOP AT ot_datos ASSIGNING FIELD-SYMBOL(<fs_datos>).

* Obtener destino
      TRY.
          <fs_datos>-desc_destino =
                gt_destinos[ werks = i_werks id_destino = <fs_datos>-destino ]-descr_destino.
        CATCH cx_root .
      ENDTRY.

* Obtener tipo carga
      TRY.
          <fs_datos>-descr_tp_carga =
                gt_tp_carga[ werks = i_werks tp_carga = <fs_datos>-tp_carga ]-descr_tp_carga.
        CATCH cx_root .
      ENDTRY.

* Obtener descr.Transportista
      TRY.
          <fs_datos>-nombre_trans = lt_proveedor[ lifnr = <fs_datos>-tdlnr ]-name1.
        CATCH cx_root .

          SELECT SINGLE name1
            INTO <fs_datos>-nombre_trans
            FROM lfa1
            WHERE lifnr = <fs_datos>-tdlnr.

          IF sy-subrc <> 0.
            CLEAR <fs_datos>-nombre_trans.
          ELSE.
            lt_proveedor = VALUE #( ( lifnr = <fs_datos>-tdlnr
                                      name1 = <fs_datos>-nombre_trans ) ).
          ENDIF.
      ENDTRY.

      CASE <fs_datos>-destino.
        WHEN '03'. "Residuos

          SELECT SINGLE z63~id_tp_residuo_1 , z63~id_tp_residuo_2 , descr_tp_resi
            INTO ( @<fs_datos>-id_tp_residuo_1 , @<fs_datos>-id_tp_residuo_2 , @<fs_datos>-descr_residuo )
            FROM ztpp0063 AS z63
            INNER JOIN ztpp0053 AS z53 ON z53~id_tp_residuo_1 = z63~id_tp_residuo_1 AND
                                          z53~id_tp_residuo_2 = z63~id_tp_residuo_2
            WHERE id_reg_vehiculo = @<fs_datos>-id_reg_vehiculo.

        WHEN '04'. "PPQQ

          SELECT SINGLE z62~id_tp_prodquimico , z54~descr_tp_prod_quim , z62~num_grgs
          INTO ( @<fs_datos>-id_tp_ppqq , @<fs_datos>-desc_tp_ppqq , @<fs_datos>-num_grgs )
          FROM ztpp0062 AS z62
          INNER JOIN ztpp0054 AS z54 ON z54~id_tp_prod_quim = z62~id_tp_prodquimico
          WHERE id_reg_vehiculo = @<fs_datos>-id_reg_vehiculo.

        WHEN '05'. "Carburante

          SELECT SINGLE z61~id_tp_carburante , z55~descr_tp_carbu , z61~litros
          INTO ( @<fs_datos>-id_tp_carburante , @<fs_datos>-desc_tp_carbu , @<fs_datos>-litros_carbu )
          FROM ztpp0061 AS z61
          INNER JOIN ztpp0055 AS z55 ON z55~id_tp_carburante = z61~id_tp_carburante
          WHERE id_reg_vehiculo = @<fs_datos>-id_reg_vehiculo.

        WHEN OTHERS.
      ENDCASE.


    ENDLOOP.

  ENDMETHOD.
  method OBTENER_REGISTRO_VEHI.


*  rr_reg_vehiculo = new
  rr_reg_vehiculo = NEW zclpp_reg_vehiculo_master( i_werks           = i_werks
                                                   i_id_reg_vehiculo = i_reg_vehiculo ).

    CASE rr_reg_vehiculo->gs_ztpp59-tp_carga.
      WHEN '1'. "MATERIA PRIMA

      WHEN '2'. "PRODUCTOS QUÍMICOS
      WHEN '3'. "CARBURANTES
        data lr_reg_carbu type REF TO zclpp_reg_vehiculo_carburante.
        lr_reg_carbu ?=  rr_reg_vehiculo.

      WHEN '4'. "TRATAMIENTO DE RESIDUOS
      WHEN '5'. "BIOMASA
      WHEN '6'. "VACIO
      WHEN '7'. "OTROS
      WHEN OTHERS.
    ENDCASE.

*1
*2  PRODUCTOS QUÍMICOS
*3  CARBURANTES
*4  TRATAMIENTO DE RESIDUOS
*5  BIOMASA
*6  VACIO
*7  OTROS
  endmethod.
  METHOD OBTENER_VEHICULOS_EN_ESPERA.

    TYPES: BEGIN OF ty_prov,
             lifnr TYPE lifnr,
             name1 TYPE name1_gp,
           END OF ty_prov.
    DATA:    lt_proveedor TYPE STANDARD TABLE OF ty_prov.

    CLEAR rt_vehiculos_en_espera.

    SELECT z9~* , z6~dninie , z6~nombre , z6~apellidos , z6~tdlnr , z6~telefono
      INTO CORRESPONDING FIELDS OF TABLE @rt_vehiculos_en_espera
      FROM ztpp0059 AS z9
      INNER JOIN ztpp0056 AS z6 ON z6~dninie = z9~dninie
      WHERE z9~werks            = @i_werks AND
            z9~motivo_anulacion = ' '  AND
            estado              = @gc_est_aespera.

    LOOP AT rt_vehiculos_en_espera ASSIGNING FIELD-SYMBOL(<fs_espera>).

* Obtener destino
      TRY.
          <fs_espera>-desc_destino =
                gt_destinos[ werks = i_werks id_destino = <fs_espera>-destino ]-descr_destino.
        CATCH cx_root .
      ENDTRY.

* Obtener destino
      TRY.
          <fs_espera>-desc_tp_carga =
                gt_tp_carga[ werks = i_werks tp_carga = <fs_espera>-tp_carga ]-descr_tp_carga.
        CATCH cx_root .
      ENDTRY.

* Obtener descr.Transportista
      TRY.
          <fs_espera>-nom_transp = lt_proveedor[ lifnr = <fs_espera>-tdlnr ]-name1.
        CATCH cx_root .

          SELECT SINGLE name1
            INTO <fs_espera>-nom_transp
            FROM lfa1
            WHERE lifnr = <fs_espera>-tdlnr.

          IF sy-subrc <> 0.
            CLEAR <fs_espera>-nom_transp.
          ELSE.
            lt_proveedor = VALUE #( ( lifnr = <fs_espera>-tdlnr
                                      name1 = <fs_espera>-nom_transp ) ).
          ENDIF.
      ENDTRY.

    ENDLOOP.


  ENDMETHOD.
  method OBTENER_VEHICULOS_EN_PLANTA.

        TYPES: BEGIN OF ty_prov,
             lifnr TYPE lifnr,
             name1 TYPE name1_gp,
           END OF ty_prov.
    DATA:    lt_proveedor TYPE STANDARD TABLE OF ty_prov.

    CLEAR rt_vehiculos_en_planta.

    SELECT z9~* , z9~TARA_REMOL as tara2 , z6~dninie , z6~nombre , z6~apellidos , z6~tdlnr , z6~telefono
      INTO CORRESPONDING FIELDS OF TABLE @rt_vehiculos_en_planta
      FROM ztpp0059 as z9
      inner JOIN ztpp0056 as z6 on z6~dninie = z9~dninie
      WHERE z9~werks            = @i_werks AND
            z9~motivo_anulacion = ' '      and
            estado              = @GC_EST_ADESTINO.

    LOOP AT rt_vehiculos_en_planta ASSIGNING FIELD-SYMBOL(<fs_planta>).

* Obtener destino
      TRY.
          <fs_planta>-desc_destino =
                gt_destinos[ werks = i_werks id_destino = <fs_planta>-destino ]-descr_destino.
        CATCH cx_root .
      ENDTRY.

* Obtener tipo carga
      TRY.
          <fs_planta>-desc_tp_carga =
                gt_tp_carga[ werks = i_werks tp_carga = <fs_planta>-tp_carga ]-descr_tp_carga.
        CATCH cx_root .
      ENDTRY.

* Obtener descr.Transportista
      TRY.
          <fs_planta>-nom_transp = lt_proveedor[ lifnr = <fs_planta>-tdlnr ]-name1.
        CATCH cx_root .

          SELECT SINGLE name1
            INTO <fs_planta>-nom_transp
            FROM lfa1
            WHERE lifnr = <fs_planta>-tdlnr.

          IF sy-subrc <> 0.
            CLEAR <fs_planta>-nom_transp.
          ELSE.
            lt_proveedor = VALUE #( ( lifnr = <fs_planta>-tdlnr
                                      name1 = <fs_planta>-nom_transp ) ).
          ENDIF.
      ENDTRY.

      <fs_planta>-peso_neto = <fs_planta>-peso_bruto - <fs_planta>-tara.

    ENDLOOP.

  endmethod.
  METHOD procesar_entrada_vehiculo.

    DATA: l_tp_prod         TYPE matnr,
          l_num_grgs        TYPE char10,
          l_litros          TYPE tf_net_quantity_ps,
          ls_z61            TYPE ztpp0061, "carburantes
          ls_z62            TYPE ztpp0062, "prod.químicos
          l_peso_bruto_alf  TYPE char17,
          l_entrada_zmm0003 TYPE zed_entrada,
          ls_ztpp0059       TYPE ztpp0059.
    .

    ls_ztpp0059 = is_reg_entrada.

    o_rc = '00'.
    l_peso_bruto_alf = CONV #( is_reg_entrada-peso_bruto + is_reg_entrada-peso_bruto_remol ).

    CASE i_tp_carga.
      WHEN '1'. "MATERIA PRIMA

        IF is_reg_entrada-estado = gc_est_adestino.

          SELECT SINGLE * INTO @DATA(ls_cond)
            FROM ztpp0056
            WHERE dninie = @is_reg_entrada-dninie.

          SET PARAMETER ID: " 'ZIDREGVEHICULO'      FIELD space,
                            'ZREG_VEHIWERKS'      FIELD is_reg_entrada-werks,
                            'ZVEHI_TRANS'         FIELD ls_cond-tdlnr,
                            'ZVEHI_MAT1'          FIELD is_reg_entrada-zmatricula1,
                            'ZVEHI_MAT2'          FIELD is_reg_entrada-zmatricula2,
                            'ZVEHI_ALB'           FIELD is_reg_entrada-albaran,
                            'ZVEHI_PESOBRUTO'     FIELD l_peso_bruto_alf.

          CALL TRANSACTION 'ZMM0003'.

          GET PARAMETER ID: 'ZVEHI_RC'          FIELD o_rc.
          GET PARAMETER ID: 'ZREG_VEHIENTRADA'  FIELD l_entrada_zmm0003.
          GET PARAMETER ID: 'ZVEHI_ALB'         FIELD ls_ztpp0059-albaran.
* Limpiamos Parameter
          SET PARAMETER ID  'ZVEHI_RC'          FIELD space.
          SET PARAMETER ID  'ZREG_VEHIENTRADA'  FIELD space.
          SET PARAMETER ID  'ZVEHI_ALB'         FIELD space.

          IF o_rc <> '00'.
            EXIT.
          ENDIF.

        ENDIF.

        CALL METHOD zclpp_reg_vehiculo_master=>grabar_registro_vehiculo
          EXPORTING
            i_operario             = i_operario
*            is_datos_registro_entr = is_reg_entrada
            is_datos_registro_entr = ls_ztpp0059
            i_reg_entrada_zmm0003  = l_entrada_zmm0003
          IMPORTING
            o_id_reg_vehiculo      = o_id_reg_entrada
            o_rc                   = o_rc.
        EXIT.



      WHEN '2'. "PRODUCTOS QUÍMICOS
        IF is_reg_entrada-estado = gc_est_adestino.

          CLEAR ls_z62.
          ls_z62-werks = i_werks.

          CALL FUNCTION 'ZMPP_ENTRADA_MERCANCIA_PRODQUI'
            EXPORTING
              i_werks       = i_werks
            IMPORTING
              o_tp_producto = ls_z62-id_tp_prodquimico
              o_num_grgs    = ls_z62-num_grgs
              o_rc          = o_rc.
          IF o_rc <> '00'.
            EXIT.
          ENDIF.

        ENDIF.

        CALL METHOD zclpp_reg_vehiculo_master=>grabar_registro_vehiculo
          EXPORTING
            i_operario             = i_operario
*            is_datos_registro_entr = is_reg_entrada
            is_datos_registro_entr = ls_ztpp0059
            is_z62                 = ls_z62
          IMPORTING
            o_id_reg_vehiculo      = o_id_reg_entrada
            o_rc                   = o_rc.

* Impresión Tiquet de Productos Químicos si se trata de una mercancia peligrosa.
        TRY.

            IF 'X' = zclpp_reg_vehiculo_prodquimico=>gt_prod_quimico[ werks           = i_werks
                                                                      id_tp_prod_quim = |{ ls_z62-id_tp_prodquimico ALPHA = IN }|
                                                                    ]-merc_peligrosa.
              CALL FUNCTION 'ZMFPP_IMPRESION_TIQUET_PPQQ'
                EXPORTING
                  i_werks           = i_werks
                  i_id_reg_vehiculo = o_id_reg_entrada.
            ENDIF.

          CATCH cx_root .
        ENDTRY.

        EXIT.


*      WHEN '3'. "CARBURANTES

***        IF is_reg_entrada-estado = gc_est_adestino.
***
***          CLEAR ls_z61.
***          ls_z61-werks = i_werks.
***
***          CALL FUNCTION 'ZMPP_ENTRADA_MERCANCIA_CARBURA'
***            EXPORTING
***              i_werks       = i_werks
***            IMPORTING
***              o_tp_producto = ls_z61-id_tp_carburante
***              o_litros      = ls_z61-litros " l_litros
***              o_rc          = o_rc.
***
***          IF o_rc <> '00'.
***            EXIT.
***          ENDIF.
***
***        ENDIF.
***
***        CALL METHOD zclpp_reg_vehiculo_master=>grabar_registro_vehiculo
***          EXPORTING
***            i_operario             = i_operario
***            is_datos_registro_entr = is_reg_entrada
***            is_z61                 = ls_z61
***          IMPORTING
***            o_id_reg_vehiculo      = o_id_reg_entrada
***            o_rc                   = o_rc.
***        EXIT.
      WHEN '3'. "CARBURANTES

      WHEN '4'. "TRATAMIENTO DE RESIDUOS
      WHEN '5'. "BIOMASA
      WHEN '6'. "VACIO
      WHEN '7'. "OTROS
      WHEN OTHERS.
    ENDCASE.

* Grabación sin registro de entrada de carburantes/productos químicos.
    CALL METHOD zclpp_reg_vehiculo_master=>grabar_registro_vehiculo
      EXPORTING
        i_operario             = i_operario
*        is_datos_registro_entr = is_reg_entrada
        is_datos_registro_entr = ls_ztpp0059
      IMPORTING
        o_id_reg_vehiculo      = o_id_reg_entrada
        o_rc                   = o_rc.

    IF o_rc = 0.

* Impresión Tiquet de Mercancia peligrorsa para: Productos Químicos (si se trata de una mercancia peligrosa) o Carburante.
      IF is_reg_entrada-tp_carga = '3'. "Carburante
        CALL FUNCTION 'ZMFPP_IMPRESION_TIQUET_PPQQ'
          EXPORTING
            i_werks           = i_werks
            i_id_reg_vehiculo = o_id_reg_entrada.
      ENDIF.

    ENDIF.

  ENDMETHOD.
  METHOD validar_tknum.
    DATA: l_titulo    TYPE char20,
          l_answer(1) TYPE c,
          l_msg       TYPE string.

  data: l_tknum type tknum.
* Validamos si existe el transporte.
* Si existe, retorno OK y seguimos proceso("X").
* Si no existe, avisamos via POPUP, y según respuesta, seguimos proceso ("X") o cancelamos(" ")
    clear l_tknum.
    l_tknum = |{ i_tknum ALPHA = IN }|.

    SELECT SINGLE tknum
      INTO @DATA(l_tknum_res)
      FROM vttk
      WHERE tknum = @l_tknum.

    IF l_tknum_res IS NOT INITIAL.
      r_tknum_ok = 'X'.
    ELSE.

      l_msg = |Número de transporte incorrecto. ¿Desea continuar?|.
      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
*         titlebar              = 'Borrar registro'
          titlebar              = l_titulo
          text_question         = l_msg
          text_button_1         = 'Aceptar'
          icon_button_1         = 'ICON_CHECKED'
          text_button_2         = 'Cancelar' "
          icon_button_2         = 'ICON_CANCEL' "'Cancelar'
          default_button        = '2'
          display_cancel_button = ' '
        IMPORTING
          answer                = l_answer " '1'-> OK  / '2'-> CANCELAR
        EXCEPTIONS
          text_not_found        = 1
          OTHERS                = 2.

      CASE l_answer.
        WHEN '1'. r_tknum_ok = 'X'.
        WHEN '2'. r_tknum_ok = ' '.
        WHEN OTHERS.
      ENDCASE.

    ENDIF.


  ENDMETHOD.
  METHOD VALIDAR_TURNO_ACTUAL.

    CLEAR r_turno_ok.

    CALL METHOD zclpp_trazabilidad_usuario=>obtener_datos_turno
      IMPORTING
        o_turno = DATA(l_turno)
*       o_desc_turno =
      .

* Si el turno actual no se corresponde con el turno de la notificación, mostramos ventana error.
    IF l_turno <> i_turno.
      CALL FUNCTION 'ZPP_PANTALLA_AVISO'
        EXPORTING
          titulo   = 'Atención'
          tp_icono = 'W'
          text1    = 'CAMBIO DE TURNO. '
          text2    = 'Informar el nuevo operario del turno.'.
      r_turno_ok = 'E'.
    ELSE.
      r_turno_ok = 'X'.
    ENDIF.

  ENDMETHOD.
