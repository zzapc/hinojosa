
class ZCL_UTILS_PP definition
  public
  inheriting from ZCL_UTILS
  final
  create public .

public section.

  data _AUFNR type AUFNR read-only .
  data _T_HEADER type ZTT_BAPI_ORDER_HEADER1 read-only .
  data _T_ITEMS type ZTT_BAPI_ORDER_ITEM read-only .
  data _T_SEQUENCES type ZTT_BAPI_ORDER_SEQUENCE read-only .
  data _T_OPERATIONS type ZTT_BAPI_ORDER_OPERATION1 read-only .
  data _T_TRIGGER_POINTS type ZTT_BAPI_ORDER_TRIGGER_POINT read-only .
  data _T_COMPONENTS type ZTT_BAPI_ORDER_COMPONENT read-only .
  data _T_MAFS type ZTT_BAPI_ORDER_PROD_REL_TOOLS read-only .

  methods CONSTRUCTOR
    importing
      !I_AUFNR type AUFNR
    raising
      ZCX_EXCEPTION .
protected section.
private section.

  class-data _C_CL_MSGID_LABEL type MSGID value 'ZCL_UTILS_PP' ##NO_TEXT.

  methods _GET_DETAILS
    returning
      value(R_RETURN) type BAPIRET2 .
endclass. "ZCL_UTILS_PP definition
class ZCL_UTILS_PP implementation.
METHOD _get_details.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: ls_order_objects TYPE bapi_pp_order_objects,
        ls_bapiret2      TYPE bapiret2.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

**** SET IMPORT DATA

  MOVE 'XXXXXXXX' TO ls_order_objects.

**** GET DETAILS

  CALL FUNCTION 'BAPI_PRODORD_GET_DETAIL'
    EXPORTING
      number        = me->_aufnr
*     COLLECTIVE_ORDER       =
      order_objects = ls_order_objects
    IMPORTING
      return        = r_return
    TABLES
      header        = _t_header
      position      = _t_items
      sequence      = _t_sequences
      operation     = _t_operations
      trigger_point = _t_trigger_points
      component     = _t_components
      prod_rel_tool = _t_mafs.

ENDMETHOD.
METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_message  TYPE sstring,
        ls_bapiret2 TYPE bapiret2.

**********************************************************************
* Super class
**********************************************************************

***** SUPER

  super->constructor( ).

**********************************************************************
* Validaciones
**********************************************************************

**** IMPORT

*** I_AUFNR

  IF ( i_aufnr IS INITIAL ).
    me->zif_msg_utils~launch_exception( i_textid = me->zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_pp=>_c_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

*** EXISTS

** AUFNR

  SELECT COUNT(*) UP TO 1 ROWS
    FROM aufk
   WHERE aufnr EQ i_aufnr.

  IF ( sy-subrc NE 0 ).
    me->zif_msg_utils~launch_exception( i_textid = me->zif_msg_utils~s_create_raising_message( i_msgno = '001' i_msgid = zcl_utils_pp=>_c_cl_msgid_label i_msgty = 'E' ) ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

**** FILL internal atributes

*** AUFNR

  MOVE i_aufnr TO me->_aufnr.

*** DETAILS TABLES

  ls_bapiret2 = me->_get_details( ).

  "Si existe registro con error lanzamos excepción
  IF ( ls_bapiret2-type EQ 'E' ).

    me->zif_msg_utils~launch_exception( i_textid = me->zif_msg_utils~s_create_raising_message(
      i_msgno = ls_bapiret2-number
      i_msgid = ls_bapiret2-id
      i_msgty = ls_bapiret2-type
      i_msgv1 = ls_bapiret2-message_v1
      i_msgv2 = ls_bapiret2-message_v2
      i_msgv3 = ls_bapiret2-message_v3 i_msgv4 = ls_bapiret2-message_v4 ) ).

  ENDIF.

ENDMETHOD.
