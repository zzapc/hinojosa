
class ZCLPP_TRASPASO_COSTES_CABOS definition
  public
  final
  create public .

public section.

  types:
    BEGIN OF ty_datos_mov,
        aufnr         TYPE aufnr,
        zzaufnr_rollo TYPE aufnr,
      END OF ty_datos_mov .
  types:
    tty_datos_mov TYPE STANDARD TABLE OF ty_datos_mov .
  types:
    BEGIN OF ty_trasp_mov,
        aufnr_cabo  TYPE aufnr,
        aufnr_bobi  TYPE aufnr,
        aufnr_rollo TYPE aufnr,
        menge       TYPE menge_d,
      END OF ty_trasp_mov .
  types:
    tty_trasp_mov TYPE STANDARD TABLE OF ty_trasp_mov .
  types:
    tty_ztpp0066 TYPE STANDARD TABLE OF ztpp0066 .
  types:
    ttr_clases_coste TYPE RANGE OF kstar .
  types:
*    DATA: BEGIN OF ty_coste_x_activ.
**            INCLUDE STRUCTURE ztpp0067.
*    data:     ls type structure
*            DATA:   icon TYPE icon.
*    DATA: END OF ty_coste_x_activ.
    BEGIN OF ty_coste_x_activ,
        werks         TYPE  werks_d,
        kokrs         TYPE  kokrs,
        mjahr         TYPE  mjahr,
        monat         TYPE  monat,
        aufnr_cabo    TYPE  aufnr,
        matnr_cabo    TYPE  matnr,
        aufnr_bobina  TYPE  aufnr,
        matnr_bobina  TYPE  matnr,
        aufnr_rollo   TYPE  aufnr,
        matnr_rollo   TYPE  matnr,
        lstar         TYPE  lstar,
        kstar         TYPE  kstar,
        kstar_sec     TYPE  kstar,
        waers         TYPE  waers,
        meins         TYPE  meins,
        wtgbtr_cabo   TYPE  wtgxxx,
        wtgbtr_rollo  TYPE  wtgxxx,
        menge_cabo    TYPE  Z_CANTIDAD_SIN_DEC, " menge_d,
        menge_rollo   TYPE  Z_CANTIDAD_SIN_DEC,
        fecha_trasp   TYPE datum,
        hora_trasp    TYPE  uzeit,
        budat         TYPE  budat,
        belnr         TYPE  co_belnr,
        estado        TYPE  zestado_trasp_cabo,
        descrip_error TYPE  syst_lisel,
        icon          TYPE icon_d,
      END OF ty_coste_x_activ .
  types:
    tty_coste_x_activ TYPE STANDARD TABLE OF ty_coste_x_activ .

  class-data GC_EST_PROCESADO type ZESTADO_TRASP_CABO value '1' ##NO_TEXT.
  class-data GC_EST_ERROR type ZESTADO_TRASP_CABO value '2' ##NO_TEXT.
  class-data GC_EST_REPROCESADO type ZESTADO_TRASP_CABO value '3' ##NO_TEXT.
  class-data GC_CORREO_REMITENTE type ZMAIL_SISTEMAS value 'sap@hinojosa.es' ##NO_TEXT.
  class-data GC_CORREO_DESTINATARIO type ZMAIL_SISTEMAS value 'ealegre@hinojosa.es' ##NO_TEXT.

  class-methods CLASS_CONSTRUCTOR .
  class-methods GET_MOVIMIENTOS_CONSUMO
    importing
      !I_MJAHR type MJAHR
      !I_MES type MONAT
    exporting
      !OT_MOVIMIENTOS type TTY_COSTE_X_ACTIV .
  class-methods OBTENER_CONSUMOS_CABOS
    importing
      !I_WERKS type WERKS_D
      !I_MJAHR type MJAHR
      !I_MES type MONAT
    exporting
      !OT_DESGLOSE_COSTE_OF type TTY_COSTE_X_ACTIV .
  class-methods GET_OF_BOBINA_DESDE_OF_ROLLO
    importing
      !I_OF_ROLLO type AUFNR
    returning
      value(R_OF_BOBINA) type AUFNR .
  class-methods GET_COST_LIST_CABO
    importing
      !IS_DATOS type TY_COSTE_X_ACTIV
    exporting
      !OT_DESGLOSE_COSTES_OF type TTY_COSTE_X_ACTIV
      !O_RC type CHAR02 .
  class-methods REALIZAR_TRASPASO_COSTES_OFS
    exporting
      !O_RC type CHAR02
    changing
      !IS_ZTPP0067 type TY_COSTE_X_ACTIV .
  class-methods GET_PRIMER_ULTIMO_DIA_MES
    importing
      !I_MJAHR type MJAHR
      !I_MES type MONAT .
  class-methods PROCESO_BATCH_MENSUAL
    importing
      !I_WERKS type WERKS_D
      !I_MJAHR type MJAHR
      !I_MES type MONAT .
  class-methods BLOQUEAR_OF
    importing
      !I_AUFNR_CABO type AUFNR
      !I_AUFNR_BOBINA type AUFNR
    returning
      value(R_RC) type CHAR02 .
  class-methods DESBLOQUEAR_OF
    importing
      !I_AUFNR type AUFNR .
  class-methods GET_REPROCESO
    importing
      !I_WERKS type WERKS_D
    exporting
      !OT_REPROCESO type TTY_COSTE_X_ACTIV .
  class-methods GET_ICONS
    changing
      !CT_ZTPP0067 type TTY_COSTE_X_ACTIV .
  class-methods SEND_MAIL_ERROR
    importing
      !I_NUM_ERRORES type I
      !I_WERKS type WERKS_D
      !I_MJAHR type MJAHR
      !I_MONAT type MONAT .
protected section.
private section.

  class-data G_WERKS type WERKS_D .
  class-data GT_ACTIV_TRASP type TTY_ZTPP0066 .
  class-data GTR_ACTIV_TRASP type TTR_CLASES_COSTE .
  class-data GT_DESGLOSE_COSTE_OF type TTY_COSTE_X_ACTIV .
  class-data G_PRIMER_DIA_MES type DATUM .
  class-data G_ULTIMO_DIA_MES type DATUM .
endclass. "ZCLPP_TRASPASO_COSTES_CABOS definition
class ZCLPP_TRASPASO_COSTES_CABOS implementation.
  METHOD bloquear_of.


    CALL FUNCTION 'ENQUEUE_ESORDER'
      EXPORTING
        mode_aufk      = 'E'
        mandt          = sy-mandt
        aufnr          = i_aufnr_cabo
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      r_rc = '01'.
    ELSE.

      CALL FUNCTION 'ENQUEUE_ESORDER'
        EXPORTING
          mode_aufk      = 'E'
          mandt          = sy-mandt
          aufnr          = i_aufnr_bobina
        EXCEPTIONS
          foreign_lock   = 1
          system_failure = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
        desbloquear_of( i_aufnr_cabo ).

      r_rc = '02'.

      ELSE.
      r_rc = '00'.

      ENDIF.
    ENDIF.


  ENDMETHOD.
  METHOD class_constructor.

    SELECT 'I'    AS sign,
           'EQ'   AS option,
           kstar  AS low,
           @space AS high
      INTO TABLE @gtr_activ_trasp
      FROM ztpp0066
      WHERE werks = @g_werks and
            lvorm = @space.

  ENDMETHOD.
  METHOD DESBLOQUEAR_OF.


        CALL FUNCTION 'DEQUEUE_ESORDER'
          EXPORTING
            mode_aufk = 'E'
            mandt     = sy-mandt
            aufnr     = i_aufnr.


  ENDMETHOD.
  METHOD get_cost_list_cabo.

    DATA: l_factor                    TYPE p LENGTH 5 DECIMALS 8,
          lt_desglose_costes_of_rollo TYPE tty_coste_x_activ.
    l_factor = ( is_datos-menge_cabo / is_datos-menge_rollo ).

    CLEAR ot_desglose_costes_of[].
    o_rc = '00'.

* Costes de actividades de CABO
    SELECT @is_datos-aufnr_cabo   AS aufnr_cabo   ,
           @is_datos-aufnr_rollo  AS aufnr_rollo  ,
           @is_datos-aufnr_bobina AS aufnr_bobina ,
           @g_werks               AS werks,
           @is_datos-mjahr        AS mjahr,
           @is_datos-monat        AS monat,
           @is_datos-menge_rollo  AS menge_rollo,
           @is_datos-menge_cabo   AS menge_cabo,
           @is_datos-matnr_cabo   AS matnr_cabo,
           @is_datos-matnr_rollo  AS matnr_rollo,
           @is_datos-matnr_bobina AS matnr_bobina,
           @is_datos-meins        AS meins,
           @is_datos-waers        AS waers,

           z~lstar , z~kstar_sec  , c~kokrs , c~objnr , c~gjahr , c~kstar ,  SUM( c~wtgbtr ) AS wtgbtr_cabo
      INTO CORRESPONDING FIELDS OF TABLE @ot_desglose_costes_of
      FROM coep       AS c
      INNER JOIN aufk AS a      ON a~objnr = c~objnr
      INNER JOIN ztpp0066  AS z ON z~kstar = c~kstar   " Obtener cod.alfa, "MAQ" por ejemplo, si se encuentra
      WHERE a~aufnr = @is_datos-aufnr_cabo    AND
            c~gjahr = @is_datos-mjahr         AND
            c~perio = @is_datos-monat         AND
            c~kstar IN @gtr_activ_trasp       AND
            z~lvorm = ' '                     AND
            z~werks = @g_werks                AND
            a~aufnr NOT IN  ( SELECT aufnr_cabo    "excluir cabos ya traspasados es este mes/año
                               FROM ztpp0067
                               WHERE mjahr      = @is_datos-mjahr AND
                                     monat      = @is_datos-monat   AND
                                     werks      = @g_werks AND
                                     kstar      = c~kstar    )
      GROUP BY z~lstar , z~kstar_sec , c~kokrs , c~objnr , c~gjahr , c~kstar .

* Costes de actividades de ROLLO
    SELECT @is_datos-aufnr_cabo   AS aufnr_cabo   ,
           @is_datos-aufnr_rollo  AS aufnr_rollo  ,
           @is_datos-aufnr_bobina AS aufnr_bobina ,
           @g_werks               AS werks,
           @is_datos-mjahr        AS mjahr,
           @is_datos-monat        AS monat,
           @is_datos-menge_rollo  AS menge_rollo,
           @is_datos-menge_cabo   AS menge_cabo,
           @is_datos-matnr_cabo   AS matnr_cabo,
           @is_datos-matnr_rollo  AS matnr_rollo,
           @is_datos-matnr_bobina AS matnr_bobina,
           @is_datos-meins        AS meins,
           @is_datos-waers        AS waers,

           z~lstar , z~kstar_sec  , c~kokrs , c~objnr , c~gjahr , c~kstar ,  SUM( c~wtgbtr ) AS wtgbtr_rollo
      INTO CORRESPONDING FIELDS OF TABLE @lt_desglose_costes_of_rollo
      FROM coep       AS c
      INNER JOIN aufk AS a      ON a~objnr = c~objnr
      INNER JOIN ztpp0066  AS z ON z~kstar = c~kstar   " Obtener cod.alfa, "MAQ" por ejemplo, si se encuentra
      WHERE a~aufnr = @is_datos-aufnr_rollo   AND
*            c~gjahr = @is_datos-mjahr         AND   "para obtener costes de rollo, no filtrar periodo
*            c~perio = @is_datos-monat         AND
            c~kstar IN @gtr_activ_trasp       AND
            z~lvorm = ' '                     AND
            z~werks = @g_werks                AND
            a~aufnr NOT IN  ( SELECT aufnr_rollo    "excluir cabos ya traspasados es este mes/año
                               FROM ztpp0067
                               WHERE mjahr      = @is_datos-mjahr AND
                                     monat      = @is_datos-monat   AND
                                     werks      = @g_werks AND
                                     kstar      = c~kstar  and
                                     aufnr_cabo = @is_datos-aufnr_cabo  )
      GROUP BY z~lstar , z~kstar_sec , c~kokrs , c~objnr , c~gjahr , c~kstar .


* Mirar si el registro de rollo encontrado existe para cabo, si es asi, actualizar coste rollo, sino, generar linea nueva
    LOOP AT lt_desglose_costes_of_rollo INTO DATA(ls_coste_rollo).

      ASSIGN ot_desglose_costes_of[ werks        = ls_coste_rollo-werks
                                           kokrs        = ls_coste_rollo-kokrs
                                           mjahr        = ls_coste_rollo-mjahr
                                           monat        = ls_coste_rollo-monat
                                           aufnr_cabo   = ls_coste_rollo-aufnr_cabo
                                           aufnr_bobina = ls_coste_rollo-aufnr_bobina
                                           aufnr_rollo  = ls_coste_rollo-aufnr_rollo
                                           kstar        = ls_coste_rollo-kstar   ] TO FIELD-SYMBOL(<fs_coste_bob>).
      IF sy-subrc = 0.
        <fs_coste_bob>-wtgbtr_rollo = ls_coste_rollo-wtgbtr_rollo * l_factor.
      ELSE.
        ls_coste_rollo-wtgbtr_rollo = ls_coste_rollo-wtgbtr_rollo * l_factor.
        INSERT ls_coste_rollo INTO TABLE ot_desglose_costes_of.
      ENDIF.

    ENDLOOP.


  ENDMETHOD.
  METHOD GET_ICONS.

    LOOP AT CT_ZTPP0067 ASSIGNING FIELD-SYMBOL(<fs_reg>).

      CASE <fs_reg>-estado.
        WHEN zclpp_traspaso_costes_cabos=>gc_est_procesado.
          <fs_reg>-icon = |@5B@|.
        WHEN zclpp_traspaso_costes_cabos=>gc_est_reprocesado.
          <fs_reg>-icon = |@5D@|.
        WHEN zclpp_traspaso_costes_cabos=>gc_est_error.
          <fs_reg>-icon = |@5C@|.
      ENDCASE.

    ENDLOOP.

  ENDMETHOD.
  METHOD get_movimientos_consumo.

    DATA lt_pulper TYPE tty_coste_x_activ.

    CLEAR: ot_movimientos[], lt_pulper[].

    get_primer_ultimo_dia_mes( i_mjahr = i_mjahr
                        i_mes   = i_mes ).

* Select de prueba para obtener detalle de movimientos
*    SELECT m~mblnr , m~mjahr , m~zeile ,
*           m~matnr , m~charg , m~menge , m~meins , m~dmbtr , m~aufnr , m~bwart , m~shkzg , "SHKZG D consumo / S anulacion
*           af~plnbez , k~zzaufnr_rollo
**      INTO CORRESPONDING FIELDS OF TABLE @ot_movimientos
*      INTO  TABLE @DATA(lt_movimientos)
*      FROM aufm AS m
*      INNER JOIN afko AS af ON af~aufnr = m~aufnr
*      INNER JOIN aufk AS k ON k~aufnr = m~aufnr
*      INNER JOIN mara AS m_bob ON m_bob~matnr = af~plnbez
*      INNER JOIN mara AS m_rol ON m_rol~matnr = m~matnr
*      WHERE m~budat BETWEEN @g_primer_dia_mes AND @g_ultimo_dia_mes AND
*            m~werks       = @g_werks AND
*            m~bwart      IN ( '261' , '262' ) AND
*            m~lgort       = '1020' AND
*            k~auart       = 'ZI02' AND
*            m_bob~zzancho <= 1340 AND
*            m_rol~mtart   = 'ZROL'  .

    SELECT m~aufnr         AS aufnr_cabo,
           k~zzaufnr_rollo AS aufnr_rollo ,
           @g_werks        AS werks,
           @i_mjahr        AS mjahr,
           @i_mes          AS monat,
           m~waers         AS waers,
           m~meins         AS meins,
           m_cab~matnr     AS matnr_cabo,
           m_rol~matnr     AS matnr_rollo,
           SUM( CASE WHEN m~bwart = '261' THEN m~dmbtr
                     WHEN m~bwart = '262' THEN m~dmbtr * -1
                END ) AS wtgbtr_cabo,
           SUM( CASE WHEN m~bwart = '261' THEN m~menge
                     WHEN m~bwart = '262' THEN m~menge * -1
                END ) AS menge_cabo
      INTO CORRESPONDING FIELDS OF TABLE @ot_movimientos
          FROM aufm AS m
          INNER JOIN afko AS af    ON af~aufnr    = m~aufnr
          INNER JOIN aufk AS k     ON k~aufnr     = m~aufnr
          INNER JOIN mara AS m_cab ON m_cab~matnr = af~plnbez
          INNER JOIN mara AS m_rol ON m_rol~matnr = m~matnr
          WHERE m~budat BETWEEN @g_primer_dia_mes AND @g_ultimo_dia_mes AND
                m~werks       = @g_werks          AND
                m~bwart      IN ( '261' , '262' ) AND
                m~lgort       = '1020'            AND
                k~auart       = 'ZI02'            AND "OFs de bobina
                m_cab~zzancho <= 1340             AND "ancho máximo para cabo
                m_rol~mtart   = 'ZROL'
        GROUP BY m~aufnr , k~zzaufnr_rollo , m~waers , m~meins , m_cab~matnr , m_rol~matnr.

* DTM Cálculos importe y cantidad de pulper generado por OF cabo
    SELECT m~aufnr         AS aufnr_cabo,
           k~zzaufnr_rollo AS aufnr_rollo ,
           @g_werks        AS werks,
           @i_mjahr        AS mjahr,
           @i_mes          AS monat,
           m~waers         AS waers,
           m~meins         AS meins,
           m_cab~matnr     AS matnr_cabo,
           m_rol~matnr     AS matnr_rollo,
           SUM( CASE WHEN m~bwart = '531' THEN m~dmbtr * -1
                     WHEN m~bwart = '532' THEN m~dmbtr
                END ) AS wtgbtr_cabo,
           SUM( CASE WHEN m~bwart = '531' THEN m~menge * -1
                     WHEN m~bwart = '532' THEN m~menge
                END ) AS menge_cabo
      INTO CORRESPONDING FIELDS OF TABLE @lt_pulper
          FROM aufm AS m
          INNER JOIN afko AS af    ON af~aufnr    = m~aufnr
          INNER JOIN aufk AS k     ON k~aufnr     = m~aufnr
          INNER JOIN mara AS m_cab ON m_cab~matnr = af~plnbez
          INNER JOIN mara AS m_rol ON m_rol~matnr = m~matnr
          WHERE m~budat BETWEEN @g_primer_dia_mes AND @g_ultimo_dia_mes AND
                m~werks       = @g_werks          AND
                m~bwart      IN ( '531' , '532' ) AND
                m~lgort       = '1020'            AND
                k~auart       = 'ZI02'            AND "OFs de bobina
                m_cab~zzancho <= 1340             AND "ancho máximo para cabo
                m_rol~mtart   = 'ZSEM'
        GROUP BY m~aufnr , k~zzaufnr_rollo , m~waers , m~meins , m_cab~matnr , m_rol~matnr.

    SORT lt_pulper BY aufnr_cabo.

    LOOP AT ot_movimientos ASSIGNING FIELD-SYMBOL(<lfs_movimientos>).

      READ TABLE lt_pulper ASSIGNING FIELD-SYMBOL(<lfs_pulper>) WITH KEY aufnr_cabo = <lfs_movimientos>-aufnr_cabo BINARY SEARCH.

      IF sy-subrc EQ 0.
        " Resta importe y cantidad de pulper generado por OF cabo
        <lfs_movimientos>-wtgbtr_cabo = <lfs_movimientos>-wtgbtr_cabo + <lfs_pulper>-wtgbtr_cabo.
        <lfs_movimientos>-menge_cabo  = <lfs_movimientos>-menge_cabo + <lfs_pulper>-menge_cabo.
      ENDIF.

    ENDLOOP.
* DTM

    DELETE ot_movimientos WHERE  wtgbtr_cabo <= 0.

    LOOP AT ot_movimientos ASSIGNING FIELD-SYMBOL(<fs_mov>).

      SELECT
       SUM( CASE WHEN m~bwart = '101' THEN m~menge
                 WHEN m~bwart = '102' THEN m~menge * -1
            END )
            INTO @<fs_mov>-menge_rollo
      FROM aufm AS m
      WHERE m~werks       = @g_werks          AND
            m~bwart      IN ( '101' , '102' ) AND
            m~lgort       = '1020'            AND
            m~aufnr       = @<fs_mov>-aufnr_rollo.

    ENDLOOP.

  ENDMETHOD.
  METHOD get_of_bobina_desde_of_rollo.

    CLEAR r_of_bobina.

    SELECT  SINGLE k~aufnr
      INTO  @r_of_bobina
      FROM  aufk AS k
      INNER JOIN afko AS af    ON af~aufnr    = k~aufnr
      INNER JOIN mara AS m_bob ON m_bob~matnr = af~plnbez
      WHERE zzaufnr_rollo = @i_of_rollo AND
            m_bob~zzancho > 1340.

  ENDMETHOD.
  METHOD GET_PRIMER_ULTIMO_DIA_MES.

*  data: l_fecha_ini type datum.

    g_primer_dia_mes = |{ i_mjahr }{ i_mes }01|.

    CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
      EXPORTING
        day_in            = g_primer_dia_mes
      IMPORTING
        last_day_of_month = g_ultimo_dia_mes
      EXCEPTIONS
        day_in_no_date    = 1
        OTHERS            = 2.



  ENDMETHOD.
  METHOD get_reproceso.

  g_werks = i_werks.

    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE @ot_reproceso
      FROM ztpp0067
      WHERE werks  = @g_werks AND
            estado = @gc_est_error.

    CALL METHOD zclpp_traspaso_costes_cabos=>get_icons
      CHANGING
        CT_ZTPP0067 = ot_reproceso.

  ENDMETHOD.
  METHOD obtener_consumos_cabos.

    DATA: lt_ofs_kg TYPE tty_trasp_mov.

    g_werks = i_werks.

    SELECT 'I'    AS sign,
          'EQ'   AS option,
          kstar  AS low,
          @space AS high
     INTO TABLE @gtr_activ_trasp
     FROM ztpp0066
     WHERE werks = @g_werks AND
           lvorm = @space.


    CALL METHOD zclpp_traspaso_costes_cabos=>get_movimientos_consumo
      EXPORTING
        i_mjahr        = i_mjahr
        i_mes          = i_mes
      IMPORTING
        ot_movimientos = DATA(lt_sum_movimientos).


* buscar OF bobina para realizar el traspaso, si no se encuentra, se borra registro para NO tratar.
    LOOP AT lt_sum_movimientos ASSIGNING FIELD-SYMBOL(<fs_ofs>).

      <fs_ofs>-aufnr_bobina = get_of_bobina_desde_of_rollo( <fs_ofs>-aufnr_rollo ).
      IF <fs_ofs>-aufnr_bobina IS INITIAL.
        CONTINUE.
      ELSE.
* Obtener materiales de OF kg.OF rollo y material bobina

        SELECT SINGLE plnbez
          INTO @<fs_ofs>-matnr_bobina
          FROM afko
          WHERE aufnr = @<fs_ofs>-aufnr_bobina.


      ENDIF.

      CALL METHOD zclpp_traspaso_costes_cabos=>get_cost_list_cabo
        EXPORTING
          is_datos              = <fs_ofs>
        IMPORTING
          ot_desglose_costes_of = DATA(lt_desglose_costes_of)
          o_rc                  = DATA(l_rc).
      IF l_rc = '00'.
        INSERT LINES OF lt_desglose_costes_of INTO TABLE ot_desglose_coste_of.
      ENDIF.

    ENDLOOP.

    CALL METHOD zclpp_traspaso_costes_cabos=>get_icons
      CHANGING
        ct_ztpp0067 = ot_desglose_coste_of.


  ENDMETHOD.
  METHOD proceso_batch_mensual.

    DATA: ls_ztpp0067   TYPE ty_coste_x_activ,
          l_num_errores TYPE i.

    CALL METHOD obtener_consumos_cabos
      EXPORTING
        i_werks              = i_werks
        i_mjahr              = i_mjahr
        i_mes                = i_mes
      IMPORTING
        ot_desglose_coste_of = DATA(lt_ofs).

    LOOP AT lt_ofs ASSIGNING FIELD-SYMBOL(<fs_ofs>).

      CALL METHOD zclpp_traspaso_costes_cabos=>realizar_traspaso_costes_ofs
        CHANGING
          is_ztpp0067 = <fs_ofs>.

      IF <fs_ofs>-estado = gc_est_error.
        ADD 1 TO l_num_errores.
      ENDIF.
    ENDLOOP.

    IF l_num_errores > 0.
      CALL METHOD zclpp_traspaso_costes_cabos=>send_mail_error
        EXPORTING
          i_num_errores = l_num_errores
          i_werks       = g_werks
          i_mjahr       = i_mjahr
          i_monat       = i_mes.
    ENDIF.

  ENDMETHOD.
  METHOD realizar_traspaso_costes_ofs.

    DATA lt_posiciones TYPE STANDARD TABLE OF bapimaitm.
    DATA l_st_cab TYPE  bapidochdru12p.
    DATA lt_return TYPE STANDARD TABLE OF  bapiret2 .
    DATA: ls_ztpp0067 TYPE ztpp0067.

    SELECT SINGLE waers
      INTO @is_ztpp0067-waers
      FROM tka01
      WHERE kokrs = @is_ztpp0067-kokrs.

* rellenamos la cabecera
    CLEAR: l_st_cab , lt_posiciones[] , ls_ztpp0067.

    l_st_cab-docdate    = sy-datum.
    l_st_cab-postgdate  = g_ultimo_dia_mes.
    l_st_cab-variant    = '02SAP'.
    l_st_cab-username   = sy-uname.
    l_st_cab-co_area    = is_ztpp0067-kokrs.


    IF is_ztpp0067-wtgbtr_cabo IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_posiciones ASSIGNING FIELD-SYMBOL(<fs_traspaso>).
      <fs_traspaso>-sen_order  = is_ztpp0067-aufnr_cabo.
      <fs_traspaso>-rec_order  = is_ztpp0067-aufnr_bobina.
      <fs_traspaso>-value_tcur = is_ztpp0067-wtgbtr_cabo.
      <fs_traspaso>-trans_curr = is_ztpp0067-waers.
      <fs_traspaso>-cost_elem  = is_ztpp0067-kstar_sec.
    ENDIF.

    IF is_ztpp0067-wtgbtr_rollo IS NOT INITIAL.
      APPEND INITIAL LINE TO lt_posiciones ASSIGNING <fs_traspaso>.
      <fs_traspaso>-sen_order  = is_ztpp0067-aufnr_cabo.
      <fs_traspaso>-rec_order  = is_ztpp0067-aufnr_bobina.
      <fs_traspaso>-value_tcur = is_ztpp0067-wtgbtr_rollo.
      <fs_traspaso>-trans_curr = is_ztpp0067-waers.
      <fs_traspaso>-cost_elem  = is_ztpp0067-kstar_sec.
    ENDIF.


    o_rc = bloquear_of( i_aufnr_cabo   = is_ztpp0067-aufnr_cabo
                        i_aufnr_bobina = is_ztpp0067-aufnr_bobina ).
    CASE o_rc.
      WHEN '00'.
      WHEN '01'.
        is_ztpp0067-estado        = gc_est_error.
        is_ztpp0067-descrip_error = |OF de cabo { is_ztpp0067-aufnr_cabo } bloqueada|.
        is_ztpp0067-fecha_trasp   = sy-datum.
        is_ztpp0067-hora_trasp    = sy-uzeit.
        ls_ztpp0067 = CORRESPONDING #( is_ztpp0067 ).
        MODIFY ztpp0067 FROM ls_ztpp0067.
        EXIT.
      WHEN '02'.
        is_ztpp0067-estado        = gc_est_error.
        is_ztpp0067-descrip_error = |OF de bobina { is_ztpp0067-aufnr_bobina } bloqueada|.
        is_ztpp0067-fecha_trasp   = sy-datum.
        is_ztpp0067-hora_trasp    = sy-uzeit.
        ls_ztpp0067 = CORRESPONDING #( is_ztpp0067 ).
        MODIFY ztpp0067 FROM ls_ztpp0067.
        EXIT.
    ENDCASE.

    CALL FUNCTION 'BAPI_ACC_MANUAL_ALLOC_POST'
      EXPORTING
        doc_header      = l_st_cab
        ignore_warnings = 'X'
      IMPORTING
        doc_no          = is_ztpp0067-belnr
      TABLES
        doc_items       = lt_posiciones
        return          = lt_return.

    IF line_exists( lt_return[ type = 'E' ] ).

*Tratamiento del error
      is_ztpp0067-estado        = gc_est_error.
      is_ztpp0067-fecha_trasp   = sy-datum.
      is_ztpp0067-hora_trasp    = sy-uzeit.
      is_ztpp0067-descrip_error = lt_return[ type = 'E' ]-message.

      CLEAR ls_ztpp0067.
      ls_ztpp0067 = CORRESPONDING #( is_ztpp0067 ).
      MODIFY ztpp0067 FROM ls_ztpp0067.

      IF sy-batch = ' '.
        cl_rmsl_message=>display( lt_return ).
      ENDIF.

    ELSE.

* Tratamiento del traspaso correcto.

* Actualizar estado, desde Error al que corresponda, según sea tratado normalmente o como reproceso.
      IF is_ztpp0067-estado = gc_est_error.
        is_ztpp0067-estado = gc_est_reprocesado.
      ELSE.
        is_ztpp0067-estado = gc_est_procesado.
      ENDIF.
      is_ztpp0067-fecha_trasp = sy-datum.
      is_ztpp0067-hora_trasp  = sy-uzeit.
      is_ztpp0067-budat       = g_ultimo_dia_mes.

      ls_ztpp0067 = CORRESPONDING #( is_ztpp0067 ).
      MODIFY ztpp0067 FROM ls_ztpp0067.

      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.

    ENDIF.

    CALL METHOD zclpp_traspaso_costes_cabos=>desbloquear_of
      EXPORTING
        i_aufnr = is_ztpp0067-aufnr_cabo.

    CALL METHOD zclpp_traspaso_costes_cabos=>desbloquear_of
      EXPORTING
        i_aufnr = is_ztpp0067-aufnr_bobina.



******************************************

* CODI Fermí - uDefine


*    DATA l_st_cab TYPE  bapidochdru12p.
**  DATA l_it_posiciones LIKE bapimaitm OCCURS 0 WITH HEADER LINE.
*    DATA l_it_posiciones TYPE STANDARD TABLE OF bapimaitm. " OCCURS 0 WITH HEADER LINE.
**  DATA l_it_posiciones_tot LIKE bapimaitm OCCURS 0 WITH HEADER LINE.
*    DATA l_it_posiciones_tot TYPE STANDARD TABLE OF bapimaitm. " OCCURS 0 WITH HEADER LINE.
**  DATA l_it_return LIKE  bapiret2 OCCURS 0 WITH HEADER LINE.
*    DATA l_it_return TYPE STANDARD TABLE OF  bapiret2 .
*    DATA l_doc TYPE co_belnr.
*    DATA l_mensaje TYPE string.
*    DATA l_index TYPE i.
*    DATA l_posi TYPE i.
*    DATA l_imp_2_d TYPE p DECIMALS 2.
*    DATA l_imp_4_d TYPE p DECIMALS 4.
*    DATA l_imp_redondeo TYPE p DECIMALS 4.
*    DATA l_wtgbtr_total TYPE wrbtr.
*    DATA l_lineas_tot TYPE i.
*    l_posi = p_posi * 2.
*    CLEAR l_wtgbtr_total.
**-> calculamos el importe total
*    LOOP AT g_it_ordenes.
*      l_wtgbtr_total = l_wtgbtr_total + g_it_ordenes-wtgbtr.
*    ENDLOOP.
** calculamos la tabla de posiciones
*    LOOP AT g_it_outtab WHERE marca = 'X' AND
*                            belnr IS INITIAL.
*      LOOP AT g_it_ordenes.
*        l_it_posiciones_tot-sen_order = g_it_ordenes-aufnr.
*        l_it_posiciones_tot-rec_order = g_it_outtab-aufnr.
*        l_imp_4_d  =  ( g_it_ordenes-wtgbtr * g_it_outtab-wtgbtr ) / l_wtgbtr_total.
*        l_imp_2_d = l_imp_4_d.
*        IF l_imp_2_d IS INITIAL.
*          l_imp_redondeo = l_imp_redondeo + l_imp_4_d.
*          CONTINUE.
*        ENDIF.
*        l_it_posiciones_tot-value_tcur = l_imp_2_d.
*        l_it_posiciones-value_tcur = g_it_outtab-wtgbtr.
*        l_it_posiciones_tot-cost_elem = p_kstar.
*        APPEND l_it_posiciones_tot.
*        CLEAR l_it_posiciones_tot.
*      ENDLOOP.
*    ENDLOOP.
*    IF NOT l_imp_redondeo IS INITIAL.
*      l_imp_2_d = l_imp_redondeo.
*      IF NOT l_imp_2_d IS INITIAL..
**  leemos la ultima posicion y le sumamos el redondeo acumulado.
*        DESCRIBE TABLE l_it_posiciones_tot LINES l_lineas_tot.
*        READ TABLE l_it_posiciones_tot INDEX l_lineas_tot.
*        l_it_posiciones_tot-value_tcur = l_it_posiciones_tot-value_tcur + l_imp_2_d.
*        MODIFY l_it_posiciones_tot INDEX l_lineas_tot.
*      ENDIF.
*    ENDIF.
*
** rellenamos la cabecera
*    l_st_cab-docdate = sy-datum.
*    l_st_cab-postgdate = p_budat.
*    l_st_cab-variant = '02SAP'.
*    l_st_cab-username = sy-uname.
*    l_st_cab-co_area = p_kokrs.
*    SELECT SINGLE waers INTO l_st_cab-trans_curr
*           FROM tka01
*           WHERE kokrs = p_kokrs.
*    SELECT SINGLE waers INTO l_st_cab-trans_curr
*           FROM tka01
*           WHERE kokrs = p_kokrs.
*
*    LOOP AT l_it_posiciones_tot.
** rellenamos la sociedad CO
*      ADD 1 TO l_index.
*      MOVE-CORRESPONDING l_it_posiciones_tot TO l_it_posiciones.
*      l_it_posiciones-trans_curr = l_st_cab-trans_curr.
*      APPEND l_it_posiciones.
*      CLEAR l_it_posiciones.
*      IF l_index  = l_posi.
*        CLEAR l_doc.
*        CALL FUNCTION 'BAPI_ACC_MANUAL_ALLOC_POST'
*          EXPORTING
*            doc_header      = l_st_cab
*            ignore_warnings = 'X'
*          IMPORTING
*            doc_no          = l_doc
*          TABLES
*            doc_items       = l_it_posiciones
*            return          = l_it_return.
*        READ TABLE l_it_return WITH KEY type = 'E'.
*        IF sy-subrc IS INITIAL OR
*            l_doc IS INITIAL.
*          IF l_it_return-number IS INITIAL.
*            MESSAGE i000(fb) WITH 'Error al contabilizar el documento'.
*          ELSE.
*            MESSAGE ID  l_it_return-id
*                    TYPE 'I'
*                    NUMBER l_it_return-number
*                    WITH l_it_return-message_v1
*                         l_it_return-message_v2
*                         l_it_return-message_v3
*                         l_it_return-message_v4 INTO l_mensaje.
*          ENDIF.
*        ELSE.
*          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*            EXPORTING
*              wait = 'X'.
*          LOOP AT l_it_posiciones.
*            g_st_outtab-belnr = l_doc.
*            MODIFY g_it_outtab FROM g_st_outtab
*                               TRANSPORTING belnr
*                               WHERE aufnr = l_it_posiciones-rec_order.
*          ENDLOOP.
*        ENDIF.
*        CLEAR l_index.
*        REFRESH l_it_posiciones.
*        CLEAR l_it_posiciones.
*      ENDIF.
*    ENDLOOP.
*
*    IF NOT l_it_posiciones[] IS INITIAL.
*      CLEAR l_doc.
*      CALL FUNCTION 'BAPI_ACC_MANUAL_ALLOC_POST'
*        EXPORTING
*          doc_header      = l_st_cab
*          ignore_warnings = 'X'
*        IMPORTING
*          doc_no          = l_doc
*        TABLES
*          doc_items       = l_it_posiciones
*          return          = l_it_return.
*      READ TABLE l_it_return WITH KEY type = 'E'.
*      IF sy-subrc IS INITIAL OR
*        l_doc IS INITIAL.
*
*        IF l_it_return-number IS INITIAL.
*          MESSAGE i000(fb) WITH 'Error al contabilizar el documento'.
*        ELSE.
*          MESSAGE ID  l_it_return-id
*                  TYPE 'I'
*                  NUMBER l_it_return-number
*                  WITH l_it_return-message_v1
*                       l_it_return-message_v2
*                       l_it_return-message_v3
*                       l_it_return-message_v4 INTO l_mensaje.
*        ENDIF.
*      ELSE.
*        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*          EXPORTING
*            wait = 'X'.
*        LOOP AT l_it_posiciones.
*          g_st_outtab-belnr = l_doc.
*          MODIFY g_it_outtab FROM g_st_outtab
*                             TRANSPORTING belnr
*                             WHERE aufnr = l_it_posiciones-rec_order.
*        ENDLOOP.
*      ENDIF.
*      CLEAR l_index.
*      REFRESH l_it_posiciones.
*      CLEAR l_it_posiciones.
*    ENDIF.
*
******************************************


  ENDMETHOD.
  method SEND_MAIL_ERROR.

        DATA: send_request TYPE REF TO cl_bcs,
          document     TYPE REF TO cl_document_bcs,
          recipient    TYPE REF TO if_recipient_bcs,
          li_sender2   TYPE REF TO cl_sapuser_bcs,
          l_count_mail TYPE so_obj_len,
          t_attach     TYPE solix_tab,
          wa_attach    TYPE solix.

    DATA l_text TYPE so_text255.
    DATA: lt_bodytext    TYPE bcsy_text,
          l_bodytext_row TYPE soli.
    DATA: li_sender TYPE REF TO cl_cam_address_bcs,
          l_new.
    DATA: c_newline(1) TYPE c VALUE cl_abap_char_utilities=>newline.

    TRY.
        CALL METHOD cl_bcs=>create_persistent
          RECEIVING
            result = send_request.
    ENDTRY.

    l_text = |<body><b>IMPORTANTE</b>: Se han encontrado { i_num_errores } errores en el centro { g_werks }. <br> <br>|.
    APPEND VALUE soli( line = l_text ) TO lt_bodytext.
*
*
*
    l_text = |Periodo procesado: { i_monat }/{ i_mjahr }<br>|.
    APPEND VALUE soli( line = l_text ) TO lt_bodytext.
*    l_text = |Fecha/hora fin calculada consumo MP : { g_fecha_crono  DATE = USER } / { g_hora_crono  TIME = USER }<br>|.
*    APPEND VALUE soli( line = l_text ) TO lt_bodytext.
*
*    l_text = |</body>|.
*    APPEND VALUE soli( line = l_text ) TO lt_bodytext.

    DATA(l_subject) = |Se han encontrado { i_num_errores } errores en el centro { g_werks }|. "  sy-datum DATE = USER } { sy-uzeit TIME = USER  } |.

    TRY.
        CALL METHOD cl_document_bcs=>create_document
          EXPORTING
            i_type    = 'HTM'
            i_subject = CONV so_obj_des( l_subject )
            i_text    = lt_bodytext
          RECEIVING
            result    = document.
      CATCH cx_document_bcs .
    ENDTRY.

    CALL METHOD send_request->set_document( document ).

    li_sender ?= cl_cam_address_bcs=>create_internet_address( i_address_string = CONV adr6-smtp_addr( gc_correo_remitente ) ).

    CALL METHOD send_request->set_sender
      EXPORTING
        i_sender = li_sender.

    recipient = cl_cam_address_bcs=>create_internet_address( gc_correo_destinatario ).
    CALL METHOD send_request->add_recipient( i_recipient = recipient ).

    TRY.
        CALL METHOD send_request->send( ).

      CATCH cx_root .
        WRITE :/ |Error al enviar el mail.|.
    ENDTRY.

    COMMIT WORK AND WAIT.

  endmethod.
