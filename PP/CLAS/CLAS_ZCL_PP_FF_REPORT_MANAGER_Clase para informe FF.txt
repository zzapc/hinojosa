
class ZCL_PP_FF_REPORT_MANAGER definition
  public
  final
  create public .

public section.

  data _VKORG type VKORG read-only .
  data _VTWEG type VTWEG read-only .
  class-data S_CLASS_LABEL type MSGID value 'ZCL_PP_FF_REPORT' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !I_VKORG type VKORG
      !I_VTWEG type VTWEG optional
    raising
      ZCX_PP_EXCEPTION .
  methods SELECT_DATA
    importing
      !I_T_KUNNR type KUNNR_TTY optional
    raising
      ZCX_PP_EXCEPTION .
  methods SET_KUNNR_LIST
    importing
      !I_T_FF_KUNNR_DATA type ZTT_FF_REPORT_KUNNR .
  methods SET_KUNNR_LIST_4_RANGE
    importing
      !I_ST_KUNNR type ZTTSDCOM_KUNNR_RANGE .
protected section.
private section.

  data _T_FF_KUNNR type ZTT_FF_REPORT_KUNNR .

  methods _CHECK_VKORG
    importing
      !I_VKORG type VKORG
    exceptions
      NO_VALID_IPARAMS
      NO_VALUES .
  methods _CHECK_VTWEG
    importing
      !I_VKORG type VKORG
      !I_VTWEG type VTWEG
    exceptions
      NO_VALID_IPARAMS
      NO_VALUES .
  methods _GENERATE_RAISING_MSG
    importing
      !I_MSGNO type SY-MSGNO
      !I_MSGID type SY-MSGID
      !I_MSGTY type SY-MSGTY
      !I_MSGV1 type SYST_MSGV optional
      !I_MSGV2 type SYST_MSGV optional
      !I_MSGV3 type SYST_MSGV optional
      !I_MSGV4 type SYST_MSGV optional
      !I_MESSAGE type SSTRING optional
    returning
      value(E_TEXTID) type SCX_T100KEY .
  methods _GET_KNA1_DATA
    importing
      !I_KUNNR type KUNNR
    returning
      value(E_S_KNA1_DATA) type ZST_FF_REPORT_KNA1_DATA .
  methods _GET_KNMT_DATA
    importing
      !I_T_KUNNR type KUNNR_TTY
    returning
      value(E_T_KNMT_DATA) type ZTT_FF_REPORT_KNMT_DATA .
  methods _GET_KNVP_DATA .
endclass. "ZCL_PP_FF_REPORT_MANAGER definition
class ZCL_PP_FF_REPORT_MANAGER implementation.
METHOD _check_vkorg.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  IF ( i_vkorg IS INITIAL ).
    RAISE no_valid_iparams.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** TVKO

  SELECT COUNT(*)
    FROM tvko
   WHERE vkorg EQ i_vkorg.

  IF ( sy-subrc NE 0 ).
    RAISE no_values.
  ENDIF.

ENDMETHOD.
METHOD _check_vtweg.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

*** VKORG

  IF ( i_vkorg IS INITIAL ).
    RAISE no_valid_iparams.
  ENDIF.

*** VTWEG

  IF ( i_vtweg IS INITIAL ).
    RAISE no_valid_iparams.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** TVKOV

  SELECT COUNT(*)
    FROM tvkov
   WHERE vkorg EQ i_vkorg
     AND vtweg EQ i_vtweg.

  IF ( sy-subrc NE 0 ).
    RAISE no_values.
  ENDIF.

ENDMETHOD.
METHOD _generate_raising_msg.

**********************************************************************
* Parámetros locales
**********************************************************************

  FIELD-SYMBOLS: <fs_text> TYPE any.

  DATA: lv_text  TYPE char255,
        lv_attr1 TYPE scx_attrname.


**********************************************************************
* Validaciones
**********************************************************************

  "Intentamos obtener mensaje de sistema
  CALL FUNCTION 'FORMAT_MESSAGE'
    EXPORTING
      id              = i_msgid
      lang            = 'S'
      no              = i_msgno
      v1              = i_msgv1
      v2              = i_msgv2
      v3              = i_msgv3
      v4              = i_msgv4
    IMPORTING
      msg             = lv_text
    EXCEPTIONS
      not_found       = 1
      OTHERS          = 2.

  CASE sy-subrc.

    WHEN 0. "Encuentra mensaje

      sy-msgty = i_msgty.
      sy-msgid = e_textid-msgid = i_msgid.
      sy-msgno = e_textid-msgno = i_msgno.
      e_textid-attr1 = lv_text.
      MOVE lv_text TO sy-msgv1.

    WHEN 1. "No encuentra mensaje

      sy-msgty = i_msgty.
      sy-msgid = e_textid-msgid = i_msgid.
      sy-msgno = e_textid-msgno = i_msgno.

      "Vemos si se ha informado el texto del mensaje
      IF ( i_message IS NOT INITIAL ). "Se informa

        CLEAR: lv_attr1.
        MOVE i_message TO lv_attr1.

        "Asignamos el texto al FS.
        ASSIGN lv_attr1 TO <fs_text>.

      ELSE. " No se informa el texto del mensaje

        "Buscamos texto de la clase para el mensaje
        CONCATENATE 'TEXT-' i_msgno INTO lv_attr1.

        "Asignamos el texto al FS.
        ASSIGN (lv_attr1) TO <fs_text>.

      ENDIF.

      "Si el FS se ha asignado existe mensaje
      IF ( <fs_text> IS ASSIGNED ).

        "Comprobamos si mensaje tiene texto
        IF ( <fs_text> IS INITIAL ). "Sin texto

          "Lanzamos mensaje genérico
          e_textid-msgno = sy-msgno = '999'.
          e_textid-msgid = sy-msgid = zcl_pp_ff_report_manager=>s_class_label.
          e_textid-attr1 = sy-msgv1 = text-999.
          e_textid-attr2 = sy-msgv2 = space.
          e_textid-attr3 = sy-msgv3 = space.
          e_textid-attr4 = sy-msgv4 = space.

        ELSE. "Se recupera texto

          "Lanzamos mensaje con texto
          e_textid-msgno = sy-msgno = i_msgno.
          e_textid-msgid = sy-msgid = i_msgid.

          MOVE <fs_text> TO lv_text.

          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv1.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv2.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv3.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_text WITH i_msgv4.

          e_textid-attr1 = sy-msgv1 = lv_text.
          e_textid-attr2 = sy-msgv2 = i_msgv1.
          e_textid-attr3 = sy-msgv3 = i_msgv2.
          e_textid-attr4 = sy-msgv4 = i_msgv3.

        ENDIF.

      ELSE. "No se ha asignado

        "Lanzamos mensaje genérico
        e_textid-msgno = sy-msgno = '999'.
        e_textid-msgid = sy-msgid = zcl_pp_ff_report_manager=>s_class_label.
        e_textid-attr1 = sy-msgv1 = text-999.
        e_textid-attr2 = sy-msgv2 = space.
        e_textid-attr3 = sy-msgv3 = space.
        e_textid-attr4 = sy-msgv4 = space.

      ENDIF.

      UNASSIGN <fs_text>.

  ENDCASE.


ENDMETHOD.
METHOD _get_kna1_data.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

  CHECK i_kunnr IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

*** KUNNR FROM KNA1

  SELECT SINGLE *
    FROM kna1
    INTO CORRESPONDING FIELDS OF e_s_kna1_data
   WHERE kunnr EQ i_kunnr.

ENDMETHOD.
METHOD _get_knmt_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lt_knmt_data TYPE ztt_ff_report_knmt_data.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** KNMT DATA

  SELECT kunnr matnr
    FROM knmt
    INTO CORRESPONDING FIELDS OF TABLE lt_knmt_data
   FOR ALL ENTRIES IN i_t_kunnr
  WHERE vkorg EQ me->_vkorg
    AND vtweg EQ me->_vtweg
    AND kunnr EQ i_t_kunnr-kunnr.

ENDMETHOD.
  method _GET_KNVP_DATA.
  endmethod.
METHOD constructor.

**********************************************************************
* Parámetros locales
**********************************************************************

**********************************************************************
* Validaciones
**********************************************************************

*** VKORG

  me->_check_vkorg(
    EXPORTING
      i_vkorg          = i_vkorg    " Organización de ventas
    EXCEPTIONS
      no_valid_iparams = 1
      no_values        = 2
      OTHERS           = 3
  ).
  IF ( sy-subrc <> 0 ).
    RAISE EXCEPTION TYPE zcx_pp_exception EXPORTING textid = me->_generate_raising_msg( i_msgno = '001' i_msgid = zcl_pp_ff_report_manager=>s_class_label i_msgty = 'E' ).
  ENDIF.

*** VKORG

  me->_check_vtweg(
    EXPORTING
      i_vkorg          = i_vkorg    " Organización de ventas
      i_vtweg          = i_vtweg    " Canal de distribución
    EXCEPTIONS
      no_valid_iparams = 1
      no_values        = 2
      others           = 3
  ).
  IF ( sy-subrc <> 0 ).
    RAISE EXCEPTION TYPE zcx_pp_exception EXPORTING textid = me->_generate_raising_msg( i_msgno = '001' i_msgid = zcl_pp_ff_report_manager=>s_class_label i_msgty = 'E' ).
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

*** VKORG

  me->_vkorg = i_vkorg.

*** VTWEG

  me->_vtweg = i_vtweg.

ENDMETHOD.
METHOD select_data.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_exception TYPE REF TO zcx_pp_exception.

  DATA: lt_knmt_data TYPE ztt_ff_report_knmt_data,
        ls_knmt_data TYPE zst_ff_report_knmt_data,
        ls_kna1_data TYPE zst_ff_report_kna1_data,
        ls_ff_data   TYPE zst_ff_report.

**********************************************************************
* Validaciones
**********************************************************************

**********************************************************************
* Lógica
**********************************************************************

*** KNMT DATA

  lt_knmt_data = me->_get_knmt_data( i_t_kunnr = i_t_kunnr ).

*** FILL DATA

  LOOP AT lt_knmt_data INTO ls_knmt_data.

    CLEAR: ls_ff_data, ls_kna1_data.

    MOVE-CORRESPONDING ls_knmt_data TO ls_ff_data.

*** KNA1

    ls_kna1_data = me->_get_kna1_data( i_kunnr = ls_ff_data-kunnr ).
    MOVE ls_kna1_data-name1 TO ls_ff_data-name1.
    MOVE ls_kna1_data-stceg TO ls_ff_data-stceg.




  ENDLOOP.

ENDMETHOD.
METHOD set_kunnr_list.

**********************************************************************
* Parámetros
**********************************************************************

  DATA: lt_kunnr_data TYPE TABLE OF ztt_ff_report_kunnr.

**********************************************************************
* Validaciones
**********************************************************************

  CHECK lines( i_t_ff_kunnr_data ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

*** KUNNR FROM KNA1

  SELECT *
    FROM kna1
    APPENDING CORRESPONDING FIELDS OF TABLE _t_ff_kunnr
    FOR ALL ENTRIES IN i_t_ff_kunnr_data
   WHERE kunnr EQ i_t_ff_kunnr_data-kunnr.

ENDMETHOD.
METHOD set_kunnr_list_4_range.

**********************************************************************
* Parámetros
**********************************************************************

  DATA: lt_kunnr_data TYPE TABLE OF ztt_ff_report_kunnr.

**********************************************************************
* Validaciones
**********************************************************************

  CHECK lines( i_st_kunnr ) GT 0.

**********************************************************************
* Lógica
**********************************************************************

*** KUNNR FROM KNA1

  SELECT *
    FROM kna1
    APPENDING CORRESPONDING FIELDS OF TABLE _t_ff_kunnr
   WHERE kunnr IN i_st_kunnr.

ENDMETHOD.
