*&---------------------------------------------------------------------*
*&  Include           SAPMZPP0003_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_010
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_0100.

  DATA: lv_ok TYPE sy-ucomm.

  lv_ok = gv_okcode100.
  CLEAR gv_okcode100.

  CASE lv_ok.

    WHEN 'PESO'.
      PERFORM cambio_de_peso.

      PERFORM mostrar_log.


    WHEN 'PULPER'.
      PERFORM rollo_a_pulper.
      PERFORM mostrar_log.

    WHEN 'PRINT'.
      PERFORM imprimir.

    WHEN 'LOG'.
      PERFORM mostrar_log.

    WHEN 'CLEAR'.
      PERFORM limpiar_campos.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXIT_0100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit_0100 .

  DATA: lv_ok TYPE sy-ucomm.

  lv_ok = gv_okcode100.
  CLEAR gv_okcode100.

  CASE lv_ok.

    WHEN 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'EXIT' OR 'CANCEL'.
      LEAVE PROGRAM.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  REPROCESAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM reprocesar .
*
*  DATA lv_subrc TYPE char1.
*
*  PERFORM pop_up USING text-024 CHANGING lv_subrc.
*  IF lv_subrc NE 1.
*    RETURN.
*  ENDIF.
**  PERFORM bobina_a_reprocesar.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PBO_0100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM pbo_0100 .

  DATA: lv_objek TYPE ausp-objek,
*        lv_cuobj TYPE inob-cuobj,
        lv_index TYPE numc2.

  DATA: lt_allocvaluesnum  TYPE STANDARD TABLE OF bapi1003_alloc_values_num , "WITH HEADER LINE,
        lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char, " WITH HEADER LINE,
        lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr, " WITH HEADER LINE,
        lt_return          TYPE STANDARD TABLE OF bapiret2.

  DATA: lt_zvpp_carac_repr TYPE TABLE OF zvpp_carac_repr,
        ls_zvpp_carac_repr TYPE          zvpp_carac_repr.




  IF gv_werks IS INITIAL.
*    GET PARAMETER ID 'WRK' FIELD gv_werks.
*    GET PARAMETER ID 'MAT' FIELD gv_matnr.
*    GET PARAMETER ID 'CHA' FIELD gv_charg.

    SELECT SINGLE parva INTO gv_werks FROM usr05
      WHERE bname = sy-uname AND parid = 'WRK'.

    IF gv_werks IS INITIAL AND NOT gv_charg IS INITIAL AND NOT gv_matnr IS INITIAL.
      ##WARN_OK
      SELECT SINGLE werks INTO gv_werks FROM mcha
        WHERE matnr = gv_matnr AND charg = gv_charg.

      IF sy-subrc <> 0.
        MESSAGE text-021 TYPE 'I'.
        PERFORM limpiar_campos.
        RETURN.
      ENDIF.
    ENDIF.
  ENDIF.

* Se indican en los desplegables de la pantalla los motivos de envio
* a pulper o bien los motivos de reproceso de la bobina
  REFRESH gt_list.

  gv_name_lb  = 'GV_MOTIVOPULPER'.


  SELECT * FROM zvpp_carac_recha INTO TABLE lt_zvpp_carac_repr.

  gt_motivo_pulper[] = lt_zvpp_carac_repr[].
  LOOP AT lt_zvpp_carac_repr INTO ls_zvpp_carac_repr.
    gs_value-key = ls_zvpp_carac_repr-atzhl.
    gs_value-text = ls_zvpp_carac_repr-atwtb.
    APPEND gs_value TO gt_list.
  ENDLOOP.

* Motivo Pulper
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = gv_name_lb
      values = gt_list.

  IF NOT gv_werks IS INITIAL AND gv_name1 IS INITIAL.
    SELECT SINGLE name1 INTO gv_name1 FROM t001w WHERE werks = gv_werks.
  ENDIF.

  LOOP AT SCREEN.
    IF screen-name EQ 'GV_CHARG'.
      IF gv_charg IS NOT INITIAL.
        screen-input = 0.
      ELSE.
        screen-input = 1.
      ENDIF.
    ENDIF.
*    IF screen-name EQ 'GV_NUEVO_PESO_P' OR screen-name EQ 'GV_MOTIVOPULPER'.
    IF screen-name EQ 'GV_ANYADIR_PESO' OR screen-name EQ 'GV_MOTIVOPULPER' OR
       screen-name EQ 'GV_QUITAR_PESO'.
      IF gv_enter EQ abap_true.
        screen-input = 1.
      ELSE.
        screen-input = 0.
      ENDIF.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.
  IF gv_matnr IS INITIAL.
    RETURN.
  ENDIF.


  SELECT SINGLE maktx INTO gv_maktx FROM makt
     WHERE matnr = gv_matnr AND spras = sy-langu.

  IF sy-subrc <> 0.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gv_matnr
      IMPORTING
        output = gv_matnr.

    SELECT SINGLE maktx INTO gv_maktx FROM makt
       WHERE matnr = gv_matnr AND spras = sy-langu.

  ENDIF.




  DATA: l_pedido   TYPE ebeln,l_posicion TYPE ebelp,
        l_cliente  TYPE kunnr, l_tornada TYPE c LENGTH 10.

  PERFORM obtener_caracteristicas_rollo
              USING
                 gv_matnr
                 gv_charg
              CHANGING
                 gv_ancho
                 gv_peso
                 gv_diametro
                 l_cliente
                 l_pedido
                 l_posicion
                 l_tornada.


  gv_peso_p     = gv_peso." TO gv_peso_p DECIMALS 2 EXPONENT 0.
  gv_longitud_p = gv_longitud." TO gv_longitud_p DECIMALS 2 EXPONENT 0.
  gv_diametro_p = gv_diametro." TO gv_diametro_p DECIMALS 2 EXPONENT 0.




ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECK_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_material .

  DATA: lv_mtart TYPE mtart,
        lv_objek TYPE ausp-objek,
        lv_cuobj TYPE inob-cuobj.

  CONSTANTS:
    lc_zrol TYPE char4 VALUE 'ZROL'.

  TRANSLATE gv_charg TO UPPER CASE.

  ##WARN_OK
  SELECT SINGLE matnr INTO gv_matnr
    FROM mcha WHERE werks = gv_werks AND charg = gv_charg.

  SELECT SINGLE mtart INTO lv_mtart
    FROM mara WHERE matnr = gv_matnr AND mtart = lc_zrol.

  IF sy-subrc <> 0.
    MESSAGE text-001 TYPE 'I'.
    PERFORM limpiar_campos.
    RETURN.
  ENDIF.



* CMS 10/05/2019 Se suprime la validación para permitir añadir kg.
***  El lote se encuentra en el almacén 1020.
***  Si no lo está, avisar de esta circunstancia (El lote no se encuentra en el almacén de pope (1020) | Aceptar)
**
**  SELECT SINGLE @abap_true INTO @DATA(l_true) FROM mchb
**                          WHERE matnr EQ @gv_matnr AND
**                                werks EQ @gv_werks AND
**                                lgort EQ '1020' AND
**                                charg EQ @gv_charg AND
**                                clabs NE 0.
**  IF l_true EQ abap_false.
**    MESSAGE 'El lote no se encuentra en el almacen de pope (1020)'(005) TYPE 'I' .
**    PERFORM limpiar_campos.
**    RETURN.
**  ENDIF.


  IF gv_werks IS INITIAL.
    ##WARN_OK
    SELECT SINGLE werks INTO gv_werks FROM mcha
      WHERE matnr = gv_matnr AND charg = gv_charg.
    IF sy-subrc <> 0.
      MESSAGE text-021 TYPE 'I'.
      PERFORM limpiar_campos.
      RETURN.
    ENDIF.
  ENDIF.

  gv_enter = abap_true.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECKS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM bobina_a_pulper.
*
*  DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
*        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
*        lv_goodsmvt_code   TYPE bapi2017_gm_code VALUE '04',
*        lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
*        lt_return          TYPE TABLE OF bapiret2,
*        lv_objectkey       TYPE bapi1003_key-object,
*        lv_mblnr           TYPE mblnr,
*        lt_valuesnum       TYPE TABLE OF bapi1003_alloc_values_num,
*        lt_valueschar      TYPE TABLE OF bapi1003_alloc_values_char,
*        lt_valuescurr      TYPE TABLE OF bapi1003_alloc_values_curr,
*        ls_valuesnum       TYPE bapi1003_alloc_values_num,
*        ls_valueschar      TYPE bapi1003_alloc_values_char,
*        ls_valuescurr      TYPE bapi1003_alloc_values_curr,
*        lv_diametro        TYPE p DECIMALS 0,
*        lv_longitud        TYPE p DECIMALS 0,
*        lv_cliente         TYPE atwrt,
*        lv_go              TYPE char1.
*
*  IF gv_motivopulper IS INITIAL.
*    MESSAGE text-023 TYPE 'I'.
*    RETURN.
*  ENDIF.
*
*  PERFORM crear_log.
** Realizar una conversión del material y lote de la bobina al material
** pulper con un lote automático, en el almacén 1000 e imprimir la etiqueta de la bobina pulper.
*
*  ls_goodsmvt_header-pstng_date = sy-datum.
*  ls_goodsmvt_header-doc_date   = sy-datum.
*
*  ls_goodsmvt_item-material     = gv_matnr.
*  ls_goodsmvt_item-plant        = gv_werks.
*  ls_goodsmvt_item-stge_loc     = '1040'.
*  ls_goodsmvt_item-batch        = gv_charg.
*  ls_goodsmvt_item-move_type    = '309'.
*
*  ls_goodsmvt_item-move_mat     = gc_matnr_bobpulper.
*  ls_goodsmvt_item-entry_qnt    = gv_peso.
*  ls_goodsmvt_item-move_plant   = gv_werks.
*  ls_goodsmvt_item-move_stloc   = '1000'.
*
*  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.
*
*  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
*    EXPORTING
*      goodsmvt_header  = ls_goodsmvt_header
*      goodsmvt_code    = lv_goodsmvt_code
*    IMPORTING
*      materialdocument = lv_mblnr
*    TABLES
*      goodsmvt_item    = lt_goodsmvt_item
*      return           = lt_return.
*
*  PERFORM add_log TABLES lt_return.
*
*  IF NOT lv_mblnr IS INITIAL.
*
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*      EXPORTING
*        wait = 'X'.
*
*
*    READ TABLE lt_goodsmvt_item INTO ls_goodsmvt_item INDEX 1.
*
*    CONCATENATE gc_matnr_bobpulper ls_goodsmvt_item-move_batch INTO lv_objectkey.
*
*    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
*      EXPORTING
*        objectkey       = lv_objectkey
*        objecttable     = 'MCH1'
*        classnum        = gc_z_bobina
*        classtype       = '023'
*      TABLES
*        allocvaluesnum  = lt_valuesnum
*        allocvalueschar = lt_valueschar
*        allocvaluescurr = lt_valuescurr
*        return          = lt_return.
*
*    READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_diametro.
*    IF sy-subrc = 0.
*      lv_diametro = ls_valuesnum-value_from.
*    ENDIF.
*
*    READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_longitud.
*    IF sy-subrc = 0.
*      lv_longitud = ls_valuesnum-value_from.
*    ENDIF.
*
*    PERFORM imprimir_etiqueta USING gc_matnr_bobpulper ls_goodsmvt_item-move_batch
*                                    lv_diametro lv_longitud '1000' lv_cliente
*                       CHANGING lv_go.
*  ENDIF.
*
*  PERFORM mostrar_log.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  POP_UP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LV_SUBRC  text
*----------------------------------------------------------------------*
FORM pop_up USING p_text CHANGING p_subrc.

  DATA lv_answer TYPE char1.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      text_question         = p_text
      default_button        = '2'
      display_cancel_button = abap_false
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  p_subrc = sy-subrc.
  CHECK p_subrc = 0 AND lv_answer <> 'A'.

  p_subrc = lv_answer.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREAR_LOTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1275   text
*----------------------------------------------------------------------*
*FORM crear_lote  USING p_matnr p_charg p_tbob p_peso
*                       p_diametro p_longitud p_empalmes
*                       p_operario
*                 CHANGING p_go p_charg2.
*
*  DATA: "lv_batch           TYPE charg_d,
*    lt_return          TYPE TABLE OF bapiret2 WITH HEADER LINE,
*    "lt_return2         TYPE TABLE OF bapiret2 WITH HEADER LINE,
*    lv_objectkeynew    TYPE bapi1003_key-object,
*    lv_objectkey       TYPE bapi1003_key-object,
*    lv_objecttablenew  TYPE bapi1003_key-objecttable,
*    ls_goodsmvt_header TYPE bapi2017_gm_head_01,
*    lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
*    lv_gmcode          TYPE bapi2017_gm_code VALUE '309',
*    lv_classtypenew    TYPE bapi1003_key-classtype,
*    lv_mtart           TYPE mara-mtart,
*    lt_valuesnum       TYPE TABLE OF bapi1003_alloc_values_num,
*    lt_valueschar      TYPE TABLE OF bapi1003_alloc_values_char,
*    lt_valuescurr      TYPE TABLE OF bapi1003_alloc_values_curr,
*    ls_valuesnum       TYPE bapi1003_alloc_values_num,
*    ls_valueschar      TYPE bapi1003_alloc_values_char,
*    ls_valuescurr      TYPE bapi1003_alloc_values_curr.
*
*  SELECT SINGLE mtart INTO lv_mtart FROM mara WHERE matnr = p_matnr.
*  CLEAR p_go.
*
*  CALL FUNCTION 'ZMFMM0002'
*    EXPORTING
*      i_werks               = gv_werks
*      i_mtart               = lv_mtart
*      i_matnr               = p_matnr
*    IMPORTING
*      o_charg               = p_charg2
*    EXCEPTIONS
*      centro_no_contemplado = 1
*      no_sujeto_lote        = 2
*      OTHERS                = 3.
*
*  CALL FUNCTION 'BAPI_BATCH_CREATE'
*    EXPORTING
*      material = p_matnr
*      batch    = p_charg2
*      plant    = gv_werks
*    IMPORTING
*      batch    = p_charg2
*    TABLES
*      return   = lt_return.
*
*  LOOP AT lt_return WHERE type = 'E' OR type = 'A' OR type = 'X'.
*    EXIT.
*  ENDLOOP.
*
*  IF sy-subrc = 0.
** Mostrar mensajes de error...
*    PERFORM add_log TABLES lt_return.
*  ELSE.
*
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*      EXPORTING
*        wait = 'X'.
*
*    PERFORM add_log TABLES lt_return.
*    REFRESH lt_return.
*
*    CONCATENATE gv_matnr p_charg INTO lv_objectkey.
*
*    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
*      EXPORTING
*        objectkey       = lv_objectkey
*        objecttable     = 'MCH1'
*        classnum        = gc_z_bobina
*        classtype       = '023'
*      TABLES
*        allocvaluesnum  = lt_valuesnum
*        allocvalueschar = lt_valueschar
*        allocvaluescurr = lt_valuescurr
*        return          = lt_return.
*
*    LOOP AT lt_return WHERE type = 'E' OR type = 'A' OR type = 'X'.
*      EXIT.
*    ENDLOOP.
*
*    IF sy-subrc = 0.
** Mostrar mensajes de error...
*      PERFORM add_log TABLES lt_return.
*    ELSE.
*
*      PERFORM add_log TABLES lt_return.
*
*      CONCATENATE p_matnr p_charg2 INTO lv_objectkeynew.
*
** Añadir caracteristicas, ancho, diametro, longitud, peso...
*      READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_diametro.
*      IF sy-subrc = 0.
*        ls_valuesnum-value_from = p_diametro.
*        MODIFY lt_valuesnum FROM ls_valuesnum INDEX sy-tabix.
*      ELSE.
*        ls_valuesnum-charact = gc_z_diametro.
*        ls_valuesnum-value_from = p_diametro.
*        APPEND ls_valuesnum TO lt_valuesnum.
*      ENDIF.
*
*      READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_longitud.
*      IF sy-subrc = 0.
*        ls_valuesnum-value_from = p_longitud.
*        MODIFY lt_valuesnum FROM ls_valuesnum INDEX sy-tabix.
*      ELSE.
*        ls_valuesnum-charact = gc_z_longitud.
*        ls_valuesnum-value_from = p_longitud.
*        APPEND ls_valuesnum TO lt_valuesnum.
*      ENDIF.
*
*      READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_peso.
*      IF sy-subrc = 0.
*        ls_valuesnum-value_from = p_peso.
*        MODIFY lt_valuesnum FROM ls_valuesnum INDEX sy-tabix.
*      ELSE.
*        ls_valuesnum-charact = gc_z_peso.
*        ls_valuesnum-value_from = p_peso.
*        APPEND ls_valuesnum TO lt_valuesnum.
*      ENDIF.
*
*      READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_empalmes.
*      IF sy-subrc = 0.
*        ls_valuesnum-value_from = p_empalmes.
*        MODIFY lt_valuesnum FROM ls_valuesnum INDEX sy-tabix.
*      ELSE.
*        ls_valuesnum-charact = gc_z_empalmes.
*        ls_valuesnum-value_from = p_empalmes.
*        APPEND ls_valuesnum TO lt_valuesnum.
*      ENDIF.
*
*      READ TABLE lt_valueschar INTO ls_valueschar WITH KEY charact = gc_z_operario.
*      IF sy-subrc = 0.
*        ls_valueschar-value_char = p_operario.
*        MODIFY lt_valueschar FROM ls_valueschar INDEX sy-tabix.
*      ELSE.
*        ls_valueschar-charact = gc_z_operario.
*        ls_valueschar-value_char = p_operario.
*        APPEND ls_valueschar TO lt_valueschar.
*      ENDIF.
*
*      CALL FUNCTION 'BAPI_OBJCL_CREATE'
*        EXPORTING
*          objectkeynew    = lv_objectkeynew
*          objecttablenew  = 'MCH1'
*          classnumnew     = gc_z_bobina
*          classtypenew    = '023'
*        TABLES
*          allocvaluesnum  = lt_valuesnum
*          allocvalueschar = lt_valueschar
*          allocvaluescurr = lt_valuescurr
*          return          = lt_return.
*
*      LOOP AT lt_return WHERE type = 'E' OR type = 'A' OR type = 'X'.
*        EXIT.
*      ENDLOOP.
*
*      IF sy-subrc = 0.
** Mostrar mensajes de error...
*        PERFORM add_log TABLES lt_return.
*      ELSE.
*        p_go = gc_true.
*        PERFORM add_log TABLES lt_return.
*
*        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*          EXPORTING
*            wait = 'X'.
*
*        CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
*          EXPORTING
*            percentage = 25
*            text       = text-017.
*
*      ENDIF.
*
*    ENDIF.
*  ENDIF.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREAR_309
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_MATNR  text
*      -->P_LV_CHARG  text
*----------------------------------------------------------------------*
*FORM crear_309  USING p_matnr p_charg p_charg2 p_kg p_lgort p_lgort2
*                 CHANGING p_go.
*
*  DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
*        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
*        lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
*        lt_return          TYPE bapiret2_t,
*        lv_gmcode          TYPE bapi2017_gm_code VALUE '04',
*        lv_mblnr           TYPE mblnr.
*
*  CLEAR p_go.
*
*  ls_goodsmvt_header-pstng_date = sy-datum.
*  ls_goodsmvt_header-doc_date = sy-datum.
*
*  ls_goodsmvt_item-material = gv_matnr.
*  ls_goodsmvt_item-plant = gv_werks.
*  ls_goodsmvt_item-stge_loc = p_lgort.
*  ls_goodsmvt_item-batch = p_charg.
*  ls_goodsmvt_item-move_type = '309'.
*
*  ls_goodsmvt_item-move_mat = p_matnr.
*  ls_goodsmvt_item-entry_qnt = p_kg.
*  ls_goodsmvt_item-move_plant = gv_werks.
*  ls_goodsmvt_item-move_stloc = p_lgort2.
*  ls_goodsmvt_item-move_batch = p_charg2.
*
*  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.
*
*  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
*    EXPORTING
*      goodsmvt_header  = ls_goodsmvt_header
*      goodsmvt_code    = lv_gmcode
*    IMPORTING
*      materialdocument = lv_mblnr
*    TABLES
*      goodsmvt_item    = lt_goodsmvt_item
*      return           = lt_return.
*
*  PERFORM add_log TABLES lt_return.
*
*  IF NOT lv_mblnr IS INITIAL.
*
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*      EXPORTING
*        wait = 'X'.
*
*    p_go = abap_true.
*
*  ENDIF.
*
*  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
*    EXPORTING
*      percentage = 50
*      text       = text-018.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ETIQUETA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_etiqueta ."USING p_matnr p_charg p_diametro p_longitud p_werks p_lgort p_cliente
  "CHANGING p_go.

  DATA: "ls_etiqueta TYPE zspp_etiq_rollo,
    ls_etiqueta TYPE zspp_etiq_rollo_alta,
    ls_msg      TYPE bapiret2,
    lt_return   TYPE bapiret2_t,
    l_ancho     TYPE mara-zzancho.

  SELECT SINGLE * FROM aufm INTO CORRESPONDING FIELDS OF ls_etiqueta
                  WHERE matnr EQ gv_matnr AND
                        werks EQ gv_werks AND
                        charg EQ gv_charg AND
                        ( bwart EQ '101' OR bwart EQ '531' ).

  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  PERFORM obtener_caracteristicas_rollo
              USING
                 gv_matnr
                 gv_charg
              CHANGING
                 l_ancho
                 ls_etiqueta-peso
                 ls_etiqueta-diametro
                 ls_etiqueta-kunnr
                 ls_etiqueta-pedido
                 ls_etiqueta-posicion
                 ls_etiqueta-tornada.

  gv_diametro          = ls_etiqueta-diametro.
  gv_diametro_p        = gv_diametro.
  ls_etiqueta-diametro = gv_diametro_p.

* INI CMS 15/02/2019 Reimprimir nueva Etiqueta  53524

  SELECT SINGLE *
    FROM aufk
    INTO @DATA(ls_aufk)
    WHERE aufnr = @ls_etiqueta-aufnr.

  ls_etiqueta-zzebeln1 = |{ ls_aufk-zzebeln1 ALPHA = OUT }| .
  ls_etiqueta-zzebeln2 = |{ ls_aufk-zzebeln2 ALPHA = OUT }| .
  ls_etiqueta-zzebeln3 = |{ ls_aufk-zzebeln3 ALPHA = OUT }| .
  ls_etiqueta-zzebelp1 = |{ ls_aufk-zzebelp1 ALPHA = OUT }| .
  ls_etiqueta-zzebelp2 = |{ ls_aufk-zzebelp2 ALPHA = OUT }| .
  ls_etiqueta-zzebelp3 = |{ ls_aufk-zzebelp3 ALPHA = OUT }| .

  ls_etiqueta-zzkunnr1 = ls_aufk-zzkunnr1.
  ls_etiqueta-zzkunnr2 = ls_aufk-zzkunnr2.
  ls_etiqueta-zzkunnr3 = ls_aufk-zzkunnr3.

  CALL FUNCTION 'ZMFPP_ETIQ_ROLLO_ALTA'
    EXPORTING
      i_rollo      = ls_etiqueta
      i_reimp_peso = 'X'
*     I_NODIALOG   =
    .


*  CALL FUNCTION 'ZMFPP_ETIQ_ROLLO'
*    EXPORTING
*      i_rollo = ls_etiqueta
**     I_REIMP_PESO       =
**     I_NODIALOG         =
*    .

* FIN CMS  15/02/2019 Reimprimir nueva Etiqueta  53524

  ##FM_SUBRC_OK

  IF sy-subrc = 0.
    ls_msg-type       = 'S'.
    ls_msg-id         = 'ZPP'.
    ls_msg-number     = '000'.
    ls_msg-message_v1 = text-014.
  ELSE.
    ls_msg-type       = 'E'.
    ls_msg-id         = 'ZPP'.
    ls_msg-number     = '000'.
    ls_msg-message_v1 = text-015.
  ENDIF.

  APPEND ls_msg TO lt_return .

  PERFORM add_log TABLES lt_return.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ADD_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_RETURN  text
*----------------------------------------------------------------------*
FORM add_log  TABLES lt_return  TYPE bapiret2_t.

  DATA ls_msg TYPE bal_s_msg.

  LOOP AT lt_return INTO DATA(ls_return).

    ls_msg-msgty = ls_return-type.
    ls_msg-msgid = ls_return-id.
    ls_msg-msgno = ls_return-number.
    ls_msg-msgv1 = ls_return-message_v1.
    ls_msg-msgv2 = ls_return-message_v2.
    ls_msg-msgv3 = ls_return-message_v3.
    ls_msg-msgv4 = ls_return-message_v4.

    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle     = gv_log_handle
        i_s_msg          = ls_msg
      EXCEPTIONS
        log_not_found    = 0
        msg_inconsistent = 0
        log_is_full      = 0
        OTHERS           = 0.

  ENDLOOP.
  IF sy-subrc EQ 0.
    gv_log_exist = abap_true.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_log .

  DATA: ls_log        TYPE bal_s_log.

  IF NOT gv_log_handle IS INITIAL.
    CALL FUNCTION 'BAL_LOG_REFRESH'
      EXPORTING
        i_log_handle = gv_log_handle.

    CLEAR gv_log_handle.
  ENDIF.

  ls_log-extnumber = text-016.

  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log                 = ls_log
    IMPORTING
      e_log_handle            = gv_log_handle
    EXCEPTIONS
      log_header_inconsistent = 0.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_log .

  DATA ls_display_profile TYPE bal_s_prof.

  CHECK gv_log_exist EQ abap_true.

  CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
    EXPORTING
      start_col           = 5
      start_row           = 5
      end_col             = 87
      end_row             = 25
    IMPORTING
      e_s_display_profile = ls_display_profile.



  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile  = ls_display_profile
    EXCEPTIONS
      profile_inconsistent = 0
      internal_error       = 0
      no_data_available    = 0
      no_authority         = 0
      OTHERS               = 0.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir .

  DATA: lv_subrc TYPE char1,
        lv_go    TYPE char1.

  PERFORM pop_up USING text-026 CHANGING lv_subrc.
  CHECK lv_subrc EQ 1.
  PERFORM imprimir_etiqueta." USING gv_matnr gv_charg gv_diametro_p gv_longitud_p gv_werks '1020' ' '
  "CHANGING lv_go.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CAMBIO_DE_PESO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM cambio_de_peso .

  DATA:
    lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
    lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
    lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr,
    lt_return     TYPE bapiret2_t,
    lt_item       TYPE STANDARD TABLE OF bapi2017_gm_item_create,
    ls_header     TYPE bapi2017_gm_head_01,
    ls_item       TYPE bapi2017_gm_item_create,
    lv_subrc      TYPE char1,
    lv_flag_de_p  TYPE flag,
    lv_objectkey  TYPE bapi1003_key-object,
    lv_mblnr      TYPE mblnr.

* DTM - Variables para tiempos y movimientos de bienes

  DATA: lti_times   TYPE STANDARD TABLE OF bapi_pi_timeticket1,
        lti_goodmov TYPE TABLE OF bapi2017_gm_item_create WITH HEADER LINE,
        lti_link    TYPE TABLE OF bapi_link_conf_goodsmov WITH HEADER LINE,
        lti_detail  TYPE TABLE OF bapi_coru_return WITH HEADER LINE,
        lti_resb    TYPE TABLE OF resb,
        ls_propose  TYPE bapi_pp_conf_prop,
        ls_ret2     TYPE bapiret1,
        ls_return   TYPE bapiret2,
        ls_return1  TYPE bapiret1,
        ls_times    LIKE LINE OF lti_times,
        ls_aufm     TYPE aufm,
        lv_gamng    TYPE gamng,
        lv_rsnum    TYPE rsnum,
        lv_peso_p   TYPE zpeso,
        lv_error    TYPE xfeld,
        lv_peso_del TYPE p DECIMALS 0 VALUE '0',
        lv_peso_not TYPE p DECIMALS 0 VALUE '0'.

* DTM

  CLEAR: gv_log_exist.

  IF  gv_anyadir_peso EQ 0 AND
      gv_quitar_peso  EQ 0.

    MESSAGE 'El peso introducido es cero kgs'(028) TYPE 'I'.
    PERFORM limpiar_campos.
    RETURN.

  ENDIF.

* CMS Nueva validación para que informen solo 1 de los 2 campos
  IF  gv_anyadir_peso NE 0 AND gv_quitar_peso NE 0.

    MESSAGE 'Introducir diferencia de peso en solo uno de los 2 campos' TYPE 'I'.
    PERFORM limpiar_campos.
    RETURN.

  ENDIF.

* CMS Validación anulada, ya no procede con los nuevos campos
*  IF gv_peso_p EQ gv_nuevo_peso_p.
*    MESSAGE 'El peso introducido es el mismo'(029) TYPE 'I'.
*    PERFORM limpiar_campos.
*    RETURN.
*  ENDIF.

* CMS Validar que los kg. a quitar no son mayores que los kg.rollo.
  IF ( gv_quitar_peso >= gv_peso_p ) AND gv_quitar_peso IS NOT INITIAL.

    MESSAGE 'Los kg a quitar no pueden ser mayores que los kg originales' TYPE 'I'.
    PERFORM limpiar_campos.
    RETURN.

  ENDIF.

  IF gv_quitar_peso GT 0.

    gv_nuevo_peso_p = gv_peso_p - gv_quitar_peso.

  ELSEIF gv_anyadir_peso GT 0.

    gv_nuevo_peso_p = gv_peso_p + gv_anyadir_peso.

  ENDIF.

  DATA(lv_text) = CONV string( text-027 ).
  REPLACE '&' IN lv_text WITH CONV string( gv_nuevo_peso_p ).

  PERFORM pop_up USING lv_text CHANGING lv_subrc.

  IF lv_subrc NE 1.

    CLEAR: gv_nuevo_peso_p.
    RETURN.

  ENDIF.

  CLEAR: ls_aufm, gv_nuevo_peso_p.

* DTM selección de la orden a partir de movimiento de creación de material '101'

  SELECT SINGLE *
        INTO @ls_aufm
        FROM aufm
        WHERE matnr = @gv_matnr AND charg = @gv_charg
          AND bwart = '101'.

  IF gv_quitar_peso GT 0.  "Decrementamos peso

    CLEAR: lv_peso_p, lv_peso_not, lv_peso_del, lv_error.

    lv_peso_p = gv_peso_p.

    gv_nuevo_peso_p = gv_peso_p - gv_quitar_peso.

* DTM

  ELSEIF gv_anyadir_peso GT 0. " Incrementamos peso

    gv_nuevo_peso_p = gv_peso_p + gv_anyadir_peso.

  ENDIF.

**  DATA(lv_text) = CONV string( text-027 ).
**  REPLACE '&' IN lv_text WITH CONV string( gv_nuevo_peso_p ).
**
**  PERFORM pop_up USING lv_text CHANGING lv_subrc.
**
**  IF lv_subrc NE 1.
**
**    RETURN.
**
**  ENDIF.

*  buscar la OF con la que se realizó la fabricación del lote de rollo.
*  Se comparará el nuevo peso introducido con el peso del lote de rollo.
*
*   · Si el nuevo peso es superior, se realizará una entrada de fabricación (movimiento 101)
*     contra la OF anterior, para el mismo lote de rollo, por la diferencia de peso en el almacén 1020.
*
*   · Si el nuevo peso es inferior, se realizará una anulación de fabricación (movimiento 102)
*     contra la OF anterior, para el mismo lote de rollo, por la diferencia de peso en el almacén 1020.

  PERFORM crear_log.

  IF ls_aufm IS INITIAL. "DTM

    APPEND VALUE bapiret2( type = 'E' id = 'CO' number = 17
                           message_v1 = 'Mat/Lote'
                           message_v2 = gv_matnr
                           message_v3 = gv_charg ) TO lt_return.

    PERFORM add_log TABLES lt_return.

    RETURN.

  ELSE.

* Si hemos encontrado el '101', miramos el estado de la orden, debe ser LIBERADA
    SELECT SINGLE stat
      FROM jest AS j
      INNER JOIN aufk AS a ON a~objnr = j~objnr
      INTO @DATA(l_stat)
      WHERE aufnr = @ls_aufm-aufnr AND
            stat  = @zcl_secuenciador=>gc_i0002_liberada AND
            inact = ' '.

    IF sy-subrc NE 0.

      MESSAGE 'No se permite cambiar el peso a un rollo que tiene su OF cerrada.' TYPE 'I'.
      PERFORM limpiar_campos.
      RETURN.

    ENDIF.

  ENDIF.

* SGM - ini 03.08.2017 Ticket 0000043398
  CALL FUNCTION 'BUFFER_REFRESH_ALL'.
  CALL FUNCTION 'CO_SF_DATA_RESET'.
* SGM - fin 03.08.2017 Ticket 0000043398

  ls_header-pstng_date = sy-datum.
  ls_header-doc_date   = sy-datum.
  ls_header-header_txt = 'Operaciones con rollos'(006).

  IF gv_nuevo_peso_p GT gv_peso.
*  se realizará una entrada de fabricación (movimiento 101)
*  contra la OF anterior, para el mismo lote de rollo, por la diferencia de peso en el almacén 1020.

    ls_item-move_type = '101'.
    ls_item-entry_qnt = gv_nuevo_peso_p - gv_peso.
    ls_item-entry_uom = 'KG'.
    ls_item-orderid   = ls_aufm-aufnr.
    ls_item-mvt_ind   = 'F'.
    ls_item-material  = gv_matnr.
    ls_item-batch     = gv_charg.

    APPEND ls_item TO lt_item.

  ELSEIF gv_nuevo_peso_p LT gv_peso.
*   se realizará una anulación de fabricación (movimiento 102)
*   contra la OF anterior, para el mismo lote de rollo, por la diferencia de peso en el almacén 1020.

    ls_item-move_type = '102'.
    ls_item-entry_qnt =  gv_peso - gv_nuevo_peso_p.
    ls_item-entry_uom = 'KG'.
    ls_item-orderid   = ls_aufm-aufnr.
    ls_item-mvt_ind   = 'F'.
    ls_item-material  = gv_matnr.
    ls_item-batch     = gv_charg.

    APPEND ls_item TO lt_item.

  ENDIF.

  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_header
      goodsmvt_code    = CONV bapi2017_gm_code( '02' )
    IMPORTING
      materialdocument = lv_mblnr
    TABLES
      goodsmvt_item    = lt_item
      return           = lt_return.

  IF line_exists( lt_return[ type = 'E' ] ).

    PERFORM add_log TABLES lt_return.
    RETURN.

  ENDIF.

  IF lv_mblnr IS INITIAL.

    RETURN.

  ENDIF.

  lv_objectkey = |{ gv_matnr }{ gv_charg }|.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_objectkey
      objecttable     = c_mch1
      classnum        = 'Z_ROLLO'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.

  IF line_exists( lt_return[ type = 'E' ] ) .

    PERFORM add_log TABLES lt_return.

  ENDIF.

  ASSIGN lt_valuesnum[ charact = gc_z_peso1 ] TO FIELD-SYMBOL(<fs_value>).
  IF sy-subrc EQ 0.

    <fs_value>-value_from = gv_nuevo_peso_p.

  ELSE.

    APPEND VALUE bapi1003_alloc_values_num( charact    = gc_z_peso1
                                            value_from = gv_nuevo_peso_p ) TO lt_valuesnum.

  ENDIF.

  IF line_exists( lt_valueschar[ charact = 'LOBM_UDCODE' value_char = 'DE       P' ] ) .

    lv_flag_de_p = abap_true.

  ELSE.

    lv_flag_de_p = ' '.

  ENDIF.

  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = lv_objectkey
      objecttable        = c_mch1
      classnum           = 'Z_ROLLO'
      classtype          = '023'
    TABLES
      allocvaluesnumnew  = lt_valuesnum
      allocvaluescharnew = lt_valueschar
      allocvaluescurrnew = lt_valuescurr
      return             = lt_return.

  IF line_exists( lt_return[ type = 'E' ] ) .

    PERFORM add_log TABLES lt_return.

  ENDIF.

  IF line_exists( lt_return[ type = 'E' ] ).

    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

  ELSE.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = abap_true.

* CMS 17/07/2019
* Si el lote de rollo tiene decisión de empleo DE=P, al nuevo lote de inspección generado con el nuevo movimiento 101
* le aplicamos también la DE=P.
    IF lv_flag_de_p = abap_true.

      PERFORM asignar_de_p_a_lote_inspec.

    ENDIF.

**    MESSAGE |Cambio de peso realizado.| TYPE 'I'.

  ENDIF.

* DTM - Cuando se han sobrepasado los kg. de la OF, la BAPI devuelve activity1 y activity2 (tiempos de MO y Máquina) a blancos.
* Se realiza la llamada con el flag ls_propose-quantity a blancos.

  IF gv_quitar_peso GT 0.

* Se eliminan los tiempos necesarios

    CLEAR: lv_peso_del, lv_error.

    PERFORM eliminar_tiempos USING ls_aufm-aufnr lv_peso_p gv_quitar_peso
                             CHANGING lv_peso_del lv_error.

    IF lv_error IS NOT INITIAL.

      PERFORM limpiar_campos.

    ENDIF.

    CHECK lv_error IS INITIAL.

    WAIT UP TO 3 SECONDS.

    IF lv_peso_del IS NOT INITIAL.

      lv_peso_not = lv_peso_del - gv_quitar_peso.

    ENDIF.

  ENDIF.

  CLEAR: ls_propose, ls_ret2.
  ls_propose-goodsmovement = abap_true.
  ls_propose-quantity      = ' '. "No informar cantidad
  ls_propose-activity      = abap_true.
  ls_propose-personnel     = abap_true.

* Se recuperan los datos de la notificación

  CLEAR: ls_return, lti_times[] , ls_times.
  ls_times-orderid        = ls_aufm-aufnr.
  ls_times-phase          = '0040'.
  ls_times-fin_conf       = '1'.
  ls_times-plant          = gv_werks.

  IF gv_quitar_peso GT 0.

    IF lv_peso_not IS INITIAL.

      ls_times-yield        = gv_nuevo_peso_p.

    ELSE.

      ls_times-yield        = lv_peso_not.

    ENDIF.

  ELSEIF gv_anyadir_peso GT 0.

    ls_times-yield        = gv_anyadir_peso.

  ENDIF.

  ls_times-conf_quan_unit = 'KG'.
  ls_times-clear_res      = abap_true.
  INSERT ls_times INTO TABLE lti_times.

* Se recuperan los datos de la BAPI que notifica

  CALL FUNCTION 'BAPI_PROCORDCONF_GET_TT_PROP'
    EXPORTING
      propose            = ls_propose
    IMPORTING
      return             = ls_ret2
    TABLES
      timetickets        = lti_times
      goodsmovements     = lti_goodmov
      link_conf_goodsmov = lti_link.

  IF lti_goodmov IS NOT INITIAL.

    REFRESH: lti_resb. CLEAR: lti_resb.

    " Se recuperan la reserva y la cantidad total para calcular la proporción
    CLEAR: lv_gamng, lv_rsnum.

    SELECT SINGLE gamng rsnum INTO (lv_gamng, lv_rsnum)
      FROM caufv
      WHERE aufnr = ls_aufm-aufnr.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE lti_resb
      FROM resb
      WHERE rsnum = lv_rsnum
        AND rgekz = 'X'.

    LOOP AT lti_goodmov.

      READ TABLE lti_resb ASSIGNING FIELD-SYMBOL(<lfs_resb>) WITH KEY rsnum = lti_goodmov-reserv_no
                                                                      rspos = lti_goodmov-res_item
                                                                      matnr = lti_goodmov-material
                                                                      werks = lti_goodmov-plant.

      IF <lfs_resb> IS NOT INITIAL.

        lti_goodmov-entry_qnt = ( <lfs_resb>-bdmng * gv_peso_p ) / lv_gamng.
        MODIFY lti_goodmov.

      ENDIF.

    ENDLOOP.

  ENDIF.

  CALL FUNCTION 'BAPI_PROCORDCONF_CREATE_TT'
    IMPORTING
      return             = ls_return1
    TABLES
      timetickets        = lti_times
      goodsmovements     = lti_goodmov
      link_conf_goodsmov = lti_link
      detail_return      = lti_detail.

  READ TABLE lti_detail ASSIGNING FIELD-SYMBOL(<lfs_return>) WITH KEY type = 'E'.

  IF sy-subrc EQ 0.

    APPEND INITIAL LINE TO lt_return ASSIGNING FIELD-SYMBOL(<lfs_return1>).

    MOVE-CORRESPONDING <lfs_return> TO <lfs_return1>.

    PERFORM add_log TABLES lt_return.
    RETURN.

  ELSE.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = abap_true.

    MESSAGE |Cambio de peso realizado.| TYPE 'I'.

  ENDIF.

  PERFORM limpiar_campos. "DTM

* DTM

ENDFORM.

FORM asignar_de_p_a_lote_inspec.

  DATA: ls_data   TYPE bapi2045ud,
        l_bapiret TYPE bapireturn1.

* Obtenemos el codigo de lote de inspección del lote de rollo notificado.
  SELECT SINGLE MAX( prueflos )
    FROM qals
    INTO @DATA(l_prueflos)
    WHERE werk  = @gv_werks AND
          matnr = @gv_matnr AND
          charg = @gv_charg .

  CHECK sy-subrc = 0.

* Actualizamos la decisión de empleo del lote de inspeccióna "P" Pulper.
  CLEAR: ls_data , l_bapiret.
  ls_data-insplot         = l_prueflos.
  ls_data-ud_selected_set = 'DE'.
  ls_data-ud_plant        = gv_werks.
  ls_data-ud_code_group   = 'DE'.
  ls_data-ud_code         = 'P'.
  ls_data-ud_recorded_by_user = sy-uname.
  ls_data-ud_recorded_on_date = sy-datum.
  ls_data-ud_recorded_at_time = sy-uzeit.

  CALL FUNCTION 'BAPI_INSPLOT_SETUSAGEDECISION'
    EXPORTING
      number  = l_prueflos
      ud_data = ls_data
*     LANGUAGE             =
    IMPORTING
*     UD_RETURN_DATA       =
*     STOCK_DATA           =
      return  = l_bapiret
*     TABLES
*     SYSTEM_STATUS        =
*     USER_STATUS          =
    .
  IF l_bapiret-type = 'E'.
*    MESSAGE 'Error al informar DE en lote inspección' TYPE 'S' DISPLAY LIKE 'E'.
  ELSE.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ROLLO_A_PULPER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM rollo_a_pulper .

  DATA lv_subrc TYPE char1.

  DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
        lv_goodsmvt_code   TYPE bapi2017_gm_code VALUE '04',
        lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
        lt_return          TYPE TABLE OF bapiret2,
        lv_mblnr           TYPE mblnr.

  DATA: lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr,
        ls_valuesnum  TYPE bapi1003_alloc_values_num.

  DATA l_charg TYPE charg_d.

  DATA l_objectkey TYPE bapi1003_key-object.

* DTM

  CONSTANTS: lc_maqui10(8) TYPE c VALUE 'MAQUI_10',
             lc_maquina(7) TYPE c VALUE 'MAQUINA'.

* DTM

  CLEAR gv_log_exist.

  IF gv_motivopulper IS INITIAL.
    MESSAGE text-023 TYPE 'I'.
    RETURN.
  ENDIF.

  IF gv_peso_p = 0.
    MESSAGE text-028 TYPE 'I'.
    RETURN.
  ENDIF.

  CHECK gv_peso_p > 0.

  PERFORM pop_up USING text-013 CHANGING lv_subrc.
  IF lv_subrc NE 1.
    RETURN.
  ENDIF.

  PERFORM mov_261_531_pulper CHANGING l_charg.


*****
******  Realizar una conversión del material y lote del rollo (movimiento 309)
******  al material pulper (2001764) lote automático, en el almacén 1020.
******  A continuación, realizar un traspaso (movimiento 311)
******  del material bobina pulper al almacén pulper (4002)
*****
*****
*****  ls_goodsmvt_header-pstng_date = sy-datum.
*****  ls_goodsmvt_header-doc_date   = sy-datum.
*****  ls_goodsmvt_header-header_txt = 'Operaciones con rollos'(006).
*****
*****  ls_goodsmvt_item-material     = gv_matnr.
*****  ls_goodsmvt_item-plant        = gv_werks.
*****  ls_goodsmvt_item-stge_loc     = '1020'.
*****  ls_goodsmvt_item-batch        = gv_charg.
*****  ls_goodsmvt_item-move_type    = '309'.
*****
*****  ls_goodsmvt_item-move_mat     = gc_matnr_bobpulper.
*****  ls_goodsmvt_item-entry_qnt    = gv_peso.
*****  ls_goodsmvt_item-move_plant   = gv_werks.
*****  ls_goodsmvt_item-move_stloc   = '1020'.
*****
*****  PERFORM crear_log.
*****
*****
*****  CALL FUNCTION 'ZMFMM0002'
*****    EXPORTING
*****      i_werks               = gv_werks
*****      i_mtart               = 'ZSEM'
*****      i_matnr               = gc_matnr_bobpulper
*****    IMPORTING
*****      o_charg               = l_charg
*****    EXCEPTIONS
*****      centro_no_contemplado = 0
*****      no_sujeto_lote        = 0
*****      OTHERS                = 0.
*****
*****
*****  ls_goodsmvt_item-move_batch = l_charg.
*****  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.
*****
*****  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
*****    EXPORTING
*****      goodsmvt_header  = ls_goodsmvt_header
*****      goodsmvt_code    = lv_goodsmvt_code
*****    IMPORTING
*****      materialdocument = lv_mblnr
*****    TABLES
*****      goodsmvt_item    = lt_goodsmvt_item
*****      return           = lt_return.
*****
*****  IF lt_return IS NOT INITIAL.
*****    PERFORM add_log TABLES lt_return.
*****  ENDIF.
*****
*****  IF lv_mblnr IS INITIAL.
*****    RETURN.
*****  ENDIF.
*****
*****  APPEND VALUE bapiret2( type = 'S' number = 12 id = 'MIGO'
*****                       message_v1 = lv_mblnr ) TO lt_return.
*****  PERFORM add_log TABLES lt_return.
*****
*****
*****  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*****    EXPORTING
*****      wait = 'X'.
*****


* Traslado de almacen - mov.311: 1020 ---> 4002
  CLEAR: ls_goodsmvt_header.

  REFRESH: lt_goodsmvt_item,lt_return.

  ls_goodsmvt_header-pstng_date = sy-datum.
  ls_goodsmvt_header-doc_date   = sy-datum.
  ls_goodsmvt_header-header_txt = 'Operaciones con rollos'(006).

  ls_goodsmvt_item-material     = gc_matnr_bobpulper.
  ls_goodsmvt_item-plant        = gv_werks.
  ls_goodsmvt_item-stge_loc     = '1020'.
  ls_goodsmvt_item-batch        = l_charg.

  ls_goodsmvt_item-move_type    = '311'.
  ls_goodsmvt_item-entry_qnt    = gv_peso.
  ls_goodsmvt_item-move_plant   = gv_werks.
  ls_goodsmvt_item-move_stloc   = '4002'.
  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.


  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_goodsmvt_header
      goodsmvt_code    = lv_goodsmvt_code
    IMPORTING
      materialdocument = lv_mblnr
    TABLES
      goodsmvt_item    = lt_goodsmvt_item
      return           = lt_return.
*****
*****  IF lt_return IS NOT INITIAL.
*****    PERFORM add_log TABLES lt_return.
*****  ENDIF.
*****
*****  APPEND VALUE bapiret2( type            = 'S'
*****                         number          = 12
*****                         id              = 'MIGO'
*****                         message_v1      = lv_mblnr ) TO lt_return.
*****
*****  PERFORM add_log TABLES lt_return.
*****
*****  IF lv_mblnr IS INITIAL.
*****    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*****    RETURN.
*****  ENDIF.

  l_objectkey = |{ gc_matnr_bobpulper }{ l_charg }|.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_objectkey
      objecttable     = c_mch1
      classnum        = gc_bobina_pulper "gc_z_bobina
      classtype       = gc_023
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.

  DATA(l_charact) = gt_motivo_pulper[ atzhl = gv_motivopulper ]-atwrt.

  APPEND VALUE bapi1003_alloc_values_char( charact    = 'ZPPI_MOTIVO_RECHAZO'
                                           value_char = l_charact ) TO lt_valueschar.

* CMS 15.01.2020   Tiquet 58871
* Se añade la característica Lote Origen a la bobina pulper.
  APPEND VALUE bapi1003_alloc_values_char( charact    = 'Z_LOTE_ORIGEN'
                                           value_char = gv_charg ) TO lt_valueschar.


* CMS 10.03.2021 Nuevo modelo de costes.
* Se añade la característica FSC 100% a la bobina pulper.
  APPEND VALUE bapi1003_alloc_values_num( charact    = 'Z_FSC_PORCENTAJE'
                                          value_from = 100 ) TO lt_valuesnum.

* DTM - Se añade el puesto de trabajo según el centro

  IF gv_werks EQ '3020'.

    APPEND VALUE bapi1003_alloc_values_char( charact    = 'ZPPI_PUESTO_TRABAJO'
                                             value_char = lc_maqui10 ) TO lt_valueschar.

  ELSEIF gv_werks EQ '3000'.

    APPEND VALUE bapi1003_alloc_values_char( charact    = 'ZPPI_PUESTO_TRABAJO'
                                             value_char = lc_maquina ) TO lt_valueschar.

  ENDIF.

* DTM

  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = l_objectkey
      objecttable        = gc_mch1
      classnum           = gc_bobina_pulper
      classtype          = gc_023
    TABLES
      allocvaluesnumnew  = lt_valuesnum
      allocvaluescharnew = lt_valueschar
      allocvaluescurrnew = lt_valuescurr
      return             = lt_return.
  IF line_exists( lt_return[ type = 'E' ] ).
    PERFORM add_log TABLES lt_return.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    RETURN.
  ENDIF.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.

  MESSAGE |Se ha consumido el rollo a pulper.| TYPE 'I'.

  PERFORM limpiar_campos.


ENDFORM.

*FORM mov_102_pulper CHANGING p_new_charg_pulper TYPE charg_d. " USING ls_aa.
FORM mov_261_531_pulper CHANGING p_new_charg_pulper TYPE charg_d. " USING ls_aa.

  DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
        lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
        lv_gmcode          TYPE bapi2017_gm_code, " VALUE '02',
        lv_mblnr           TYPE mblnr,
        lt_return          TYPE bapiret2_t,
        l_objectkey        TYPE bapi1003_key-object,
        lv_matdocumentyear TYPE bapi2017_gm_head_ret-doc_year
        .


***************
** MOV. 261 ***
***************
  CLEAR: ls_goodsmvt_header, lt_goodsmvt_item[] , ls_goodsmvt_item , lv_mblnr , lv_gmcode.

**** Cabecera
  lv_gmcode = '06'.
  ls_goodsmvt_header-pstng_date = sy-datum  .
  ls_goodsmvt_header-doc_date   = sy-datum .
  ls_goodsmvt_header-header_txt = 'Consumo rollo a pulper'.

  ls_goodsmvt_item-material  = gv_matnr.
  ls_goodsmvt_item-plant     = gv_werks.
  ls_goodsmvt_item-stge_loc  = '1020'.
  ls_goodsmvt_item-batch     = gv_charg.
  ls_goodsmvt_item-entry_qnt = gv_peso_p.
  ls_goodsmvt_item-entry_uom = 'KG'.
  ls_goodsmvt_item-move_type = '261'.
  ls_goodsmvt_item-stck_type = ' '.

  SELECT SINGLE aufnr
    INTO @DATA(l_aufnr)
    FROM aufm
    WHERE werks = @gv_werks AND
          charg = @gv_charg  AND
          bwart = '101'.

  ls_goodsmvt_item-orderid = l_aufnr.
  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.

  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_goodsmvt_header
      goodsmvt_code    = lv_gmcode
    IMPORTING
      materialdocument = lv_mblnr
      matdocumentyear  = lv_matdocumentyear
    TABLES
      goodsmvt_item    = lt_goodsmvt_item
      return           = lt_return.

  IF lv_mblnr IS NOT INITIAL.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    RETURN.
  ENDIF.


* Movimiento 531 subproducto.

* Datos de Cabecera
  CLEAR: ls_goodsmvt_header, lt_goodsmvt_item[] , ls_goodsmvt_item , lv_mblnr , lv_gmcode.
  lv_gmcode = '03'.
  ls_goodsmvt_header-pstng_date = sy-datum  .
  ls_goodsmvt_header-doc_date   = sy-datum .
  ls_goodsmvt_header-header_txt = 'Consumo rollo a pulper'.

* Datos de posición
  ls_goodsmvt_item-stge_loc  = '1020'.

  SELECT SINGLE aufnr
    INTO @l_aufnr
    FROM aufm
    WHERE werks = @gv_werks AND
          charg = @gv_charg  AND
          bwart = '101'.

  ls_goodsmvt_item-orderid    = l_aufnr.
  ls_goodsmvt_item-material   = gc_matnr_bobpulper.
  ls_goodsmvt_item-plant      = gv_werks.

  ls_goodsmvt_item-move_type  = '531'.
  ls_goodsmvt_item-entry_qnt  = gv_peso_p.
  ls_goodsmvt_item-entry_uom  = 'KG'.
  PERFORM obtener_reserva USING l_aufnr
                       CHANGING ls_goodsmvt_item-reserv_no
                                ls_goodsmvt_item-res_item.

  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.

  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_goodsmvt_header
      goodsmvt_code    = lv_gmcode
    IMPORTING
      materialdocument = lv_mblnr
      matdocumentyear  = lv_matdocumentyear
    TABLES
      goodsmvt_item    = lt_goodsmvt_item
      return           = lt_return.

  IF lv_mblnr IS NOT INITIAL.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

* Obtenemos el lote pulper creado como subproducto de la OF.
    SELECT SINGLE charg
      INTO @p_new_charg_pulper
      FROM mseg
      WHERE  mblnr = @lv_mblnr AND
             mjahr = @lv_matdocumentyear.


  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    RETURN.
  ENDIF.


ENDFORM.

FORM obtener_reserva USING p_aufnr TYPE aufnr
                     CHANGING p_rsnum p_rspos.

  DATA: lv_matnr LIKE afko-plnbez,
        lv_werks LIKE aufk-werks,
        lv_rsnum LIKE afko-rsnum.
  DATA: ls_resb TYPE resb.

  CLEAR: lv_matnr, lv_werks, lv_rsnum, ls_resb.

  SELECT SINGLE afko~plnbez aufk~werks afko~rsnum
        INTO (lv_matnr, lv_werks, lv_rsnum)
        FROM afko
        INNER JOIN aufk ON aufk~aufnr = afko~aufnr
        WHERE afko~aufnr = p_aufnr.

  IF sy-subrc = 0.
    SELECT SINGLE rsnum , rspos
       INTO ( @p_rsnum, @p_rspos )
    FROM resb
    WHERE rsnum = @lv_rsnum
    AND sortf = 'SUB'.

*    IF sy-subrc = 0.
*      PERFORM alta_stock_pulper USING ls_resb.
*    ENDIF.
  ENDIF.



ENDFORM.

FORM obtener_caracteristicas_rollo USING p_matnr p_charg CHANGING p_ancho
                                                                  p_peso
                                                                  p_diametro
                                                                  p_cliente
                                                                  p_pedido
                                                                  p_posicion
                                                                  p_tornada.


  DATA: lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr,
        lt_return     TYPE bapiret2_t.

  DATA l_object TYPE ausp-objek.


  l_object = |{ p_matnr }{ p_charg }|.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_object
      objecttable     = c_mch1
      classnum        = 'Z_ROLLO'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.

  IF line_exists( lt_return[ type = 'E'] ).
    RETURN.
  ENDIF.


  SELECT SINGLE clabs INTO gv_peso FROM mchb WHERE matnr = gv_matnr AND werks = gv_werks
                                               AND lgort = '1020' AND charg = gv_charg.


  TRY.
      p_diametro = lt_valuesnum[ charact = gc_z_diametro1 ]-value_from.
    CATCH cx_sy_itab_line_not_found.
  ENDTRY.

  TRY.
      p_cliente = lt_valueschar[ charact = gc_z_cliente ]-value_char.
    CATCH cx_sy_itab_line_not_found.
  ENDTRY.

  TRY.
      p_pedido = lt_valueschar[ charact = gc_z_pedido ]-value_char.
    CATCH cx_sy_itab_line_not_found.
  ENDTRY.

  TRY.
      p_posicion = lt_valueschar[ charact = gc_z_posicion ]-value_char.
    CATCH cx_sy_itab_line_not_found.
  ENDTRY.

  TRY.
      p_tornada = lt_valuesnum[ charact = gc_z_tornada ]-value_from.
    CATCH cx_sy_itab_line_not_found.
  ENDTRY.



  SELECT SINGLE zzancho INTO p_ancho FROM mara WHERE matnr = p_matnr.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LIMPIAR_CAMPOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM limpiar_campos .

  CLEAR:gv_charg,
        gv_matnr,
        gv_maktx,
        gv_ancho,
        gv_peso_p,
        gv_diametro_p,
        gv_longitud_p,
        gv_nuevo_peso_p,
        gv_motivopulper,
        gv_enter,

        gv_anyadir_peso,
        gv_quitar_peso.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_TIEMPOS
*&---------------------------------------------------------------------*
*       Eliminación de tiempos
*----------------------------------------------------------------------*
*       Autor: David Temprado Fecha: 03/03/2022
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_SEL_AUFNR  text
*      -->P_WA_DATOS_SEL_MENGE  text
*      <--P_LV_ERROR  text
FORM eliminar_tiempos  USING    p_aufnr
                                p_menge
                                p_del
                       CHANGING peso_del error.

* Las notificaciones de los tiempos en las 2 operaciones, pulper y en máquina,
* en este caso hay que eliminar la notificación de la operación 0040, ya que
* va concatenada con la 0020
* Con la bapi BAPI_PROCORDCONF_GETDETAIL, se mira la phase = 0040 y REVERSED = .
* Si cumple esta condición, se elimina la notificación de tiempos.

  DATA: lt_order_range    TYPE TABLE OF bapi_pi_orderrange,
        lt_return_1       TYPE TABLE OF bapiret1,
        lt_confirmations  TYPE TABLE OF bapi_pi_conf_key,
        lt_goodsmovements TYPE TABLE OF bapi2017_gm_item_show,
        lt_failedgmoves   TYPE TABLE OF bapi_coru_fgm,
        lt_messages       LIKE bapiret2 OCCURS 0,
        ls_confirmations  TYPE          bapi_pi_conf_key,
        ls_return         TYPE          bapiret1,
        ls_order_range    TYPE          bapi_pi_orderrange,
        ls_return_1       TYPE bapiret1,
        ls_detail         TYPE bapi_pi_confirm,
        ls_messages       TYPE bapiret2,
        lv_postg_date     TYPE bapi_pi_confirm-postg_date,
        lv_extnumber      TYPE balnrext,
        lv_eliminado      TYPE flag. "DTM


  CLEAR: lt_order_range[],lt_confirmations[], ls_order_range, ls_return, lv_eliminado.
  CLEAR: lt_messages[], lv_extnumber.

* obtenemos las notificaciones de tiempo
  ls_order_range-sign   = 'I'.
  ls_order_range-option = 'EQ'.
  ls_order_range-low    = p_aufnr.
  APPEND ls_order_range TO lt_order_range.

  CALL FUNCTION 'BAPI_PROCORDCONF_GETLIST'
    IMPORTING
      return        = ls_return
    TABLES
      order_range   = lt_order_range
      confirmations = lt_confirmations.

  SORT lt_confirmations BY created_date DESCENDING.

* Se borran las notificaciones de tiempos

* CMS - 17.07.2020 - 62097 - Corregir error al anular 2º rollo con el mismo peso.
* Se añade al LOOP la condición rev_conf_cnt = 0, para encontrar el registro pendiente de anular.
  LOOP AT lt_confirmations INTO ls_confirmations WHERE reversed     = '' AND
                                                       rev_conf_cnt = 0  AND
                                                       phase        = '0040'.

    CLEAR: ls_return_1, ls_detail, lt_goodsmovements[], lt_failedgmoves[].

    CALL FUNCTION 'BAPI_PROCORDCONF_GETDETAIL'
      EXPORTING
        confirmation        = ls_confirmations-conf_no
        confirmationcounter = ls_confirmations-conf_cnt
      IMPORTING
        return              = ls_return_1
        conf_detail         = ls_detail
      TABLES
        goodsmovements      = lt_goodsmovements
        failedgmoves        = lt_failedgmoves.

    CHECK ls_detail-yield = p_menge.

* Sólo se elimina la notificación si tiene fecha válida, sino no hace nada
    IF ls_confirmations-created_date+4(2) NE sy-datum+4(2)
       AND ls_confirmations-created_date(4) NE sy-datum(4).

      error = abap_true.
      lv_eliminado = abap_true.
      EXIT.

    ELSE.

      CLEAR: ls_return_1.

      CALL FUNCTION 'BAPI_PROCORDCONF_CANCEL'
        EXPORTING
          confirmation        = ls_confirmations-conf_no
          confirmationcounter = ls_confirmations-conf_cnt
          postg_date          = sy-datum
        IMPORTING
          return              = ls_return_1.

      IF ls_return_1-type NE 'E'.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = abap_true.

        lv_eliminado = abap_true. "DTM

        EXIT.

      ELSE.

        error = abap_true.

        MOVE-CORRESPONDING ls_return_1 TO ls_messages.
        APPEND ls_messages TO lt_messages.

        CLEAR: lv_extnumber.

        CONCATENATE 'Notif.Tiempo' ls_confirmations-conf_no ls_confirmations-conf_cnt
          INTO lv_extnumber SEPARATED BY space.

        CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
          EXPORTING
            objeto    = 'ZPP'
            subobjeto = sy-tcode
            mensajes  = lt_messages[]
            extnumber = lv_extnumber.

      ENDIF.

    ENDIF.

  ENDLOOP.

* Si no se ha encontrado la notificación a eliminar
  IF lv_eliminado IS INITIAL.

* Se busca una notificación mayor al peso a eliminar
    LOOP AT lt_confirmations INTO ls_confirmations WHERE reversed     = '' AND
                                                         rev_conf_cnt = 0  AND
                                                         phase        = '0040'.

      CLEAR: ls_return_1, ls_detail, lt_goodsmovements[], lt_failedgmoves[].

      CALL FUNCTION 'BAPI_PROCORDCONF_GETDETAIL'
        EXPORTING
          confirmation        = ls_confirmations-conf_no
          confirmationcounter = ls_confirmations-conf_cnt
        IMPORTING
          return              = ls_return_1
          conf_detail         = ls_detail
        TABLES
          goodsmovements      = lt_goodsmovements
          failedgmoves        = lt_failedgmoves.

      CHECK ls_detail-yield GT p_del.

* Sólo se elimina la notificación si tiene fecha válida, sino no hace nada
      IF ls_confirmations-created_date+4(2) NE sy-datum+4(2)
         AND ls_confirmations-created_date(4) NE sy-datum(4).

        error = abap_true.
        EXIT.

      ELSE.

        CLEAR: ls_return_1.

        CALL FUNCTION 'BAPI_PROCORDCONF_CANCEL'
          EXPORTING
            confirmation        = ls_confirmations-conf_no
            confirmationcounter = ls_confirmations-conf_cnt
            postg_date          = sy-datum
          IMPORTING
            return              = ls_return_1.

        IF ls_return_1-type NE 'E'.

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = abap_true.

          peso_del = ls_detail-yield.

          EXIT.

        ELSE.

          error = abap_true.

          MOVE-CORRESPONDING ls_return_1 TO ls_messages.
          APPEND ls_messages TO lt_messages.

          CLEAR: lv_extnumber.

          CONCATENATE 'Notif.Tiempo' ls_confirmations-conf_no ls_confirmations-conf_cnt
            INTO lv_extnumber SEPARATED BY space.

          CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
            EXPORTING
              objeto    = 'ZPP'
              subobjeto = sy-tcode
              mensajes  = lt_messages[]
              extnumber = lv_extnumber.

        ENDIF.

      ENDIF.

    ENDLOOP.

  ENDIF.

ENDFORM.                    " ELIMINAR_TIEMPOS
