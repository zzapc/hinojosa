*&---------------------------------------------------------------------*
*& Report  ZRPP0014
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT zrpp0014 LINE-SIZE 120 LINE-COUNT 65 NO STANDARD PAGE HEADING.

TYPES bool TYPE c.
CONSTANTS si TYPE bool VALUE 'X'.
CONSTANTS no TYPE bool VALUE ''.

TABLES aufm.
TABLES kna1.
TABLES vbak.
TABLES mara.

DATA gt_entradas TYPE STANDARD TABLE OF zepp_entradas_produccion.


DATA: so_h_t1     TYPE RANGE OF mkpf-cputm,
      so_h_t2     TYPE RANGE OF mkpf-cputm,
      so_h_t3_ini TYPE RANGE OF mkpf-cputm,
      so_h_t3_fin TYPE RANGE OF mkpf-cputm,
      so_h_t3     TYPE RANGE OF mkpf-cputm,
      gv_d_t3_ini TYPE          datum,
      gv_d_t3_fin TYPE          datum.

SELECTION-SCREEN BEGIN OF BLOCK blk1 WITH FRAME TITLE text-s01.
SELECT-OPTIONS smatnr FOR aufm-matnr.
PARAMETERS pwerks TYPE werks_d OBLIGATORY.
SELECT-OPTIONS scharg FOR aufm-charg.
* GST - 30/07/2015 ->
SELECT-OPTIONS slgort FOR aufm-lgort.
* GST - 30/07/2015 <-
SELECT-OPTIONS sbudat FOR aufm-budat OBLIGATORY NO-EXTENSION.
SELECT-OPTIONS skunnr FOR kna1-kunnr.
SELECT-OPTIONS svbeln FOR vbak-vbeln.
SELECT-OPTIONS smatkl FOR mara-matkl.
SELECT-OPTIONS saufnr FOR aufm-aufnr.
* GST - 27/04/2015 ->
*PARAMETERS ppbrut AS CHECKBOX.
*PARAMETERS ppneto AS CHECKBOX.

* GST - 22/12/2015 ->
*PARAMETERS ppbrut RADIOBUTTON GROUP sel .
*PARAMETERS ppneto RADIOBUTTON GROUP sel.
PARAMETERS ppbrut NO-DISPLAY.
PARAMETERS ppneto NO-DISPLAY.
* GST - 22/12/2015 <-
PARAMETERS ptodos RADIOBUTTON GROUP sel.
PARAMETERS pzrec RADIOBUTTON GROUP sel.
PARAMETERS pzquim RADIOBUTTON GROUP sel.
* GST - 27/04/2015 <-
* GST - 21/05/2015 ->
PARAMETERS pzpulp RADIOBUTTON GROUP sel.
PARAMETERS pzrema RADIOBUTTON GROUP sel.
* GST - 21/05/2015 <-
SELECTION-SCREEN END OF BLOCK blk1.

SELECTION-SCREEN BEGIN OF BLOCK blk2 WITH FRAME TITLE text-s02.
PARAMETERS p_t1 AS CHECKBOX DEFAULT 'X'.
PARAMETERS p_t2 AS CHECKBOX DEFAULT 'X'.
PARAMETERS p_t3 AS CHECKBOX DEFAULT 'X'.
SELECTION-SCREEN END OF BLOCK blk2.

PARAMETERS pvari TYPE disvariant-variant.

* GST - 07/07/2016 ->
INITIALIZATION.
  PERFORM inicializacion.

* GST - 07/07/2016 <-

AT SELECTION-SCREEN ON VALUE-REQUEST FOR pvari.
  PERFORM buscar_variante CHANGING pvari.


START-OF-SELECTION.

* Recuperar fechas y  horas para la selección de datos:
  PERFORM turnos.

  IF ppbrut = 'X' OR ppneto = 'X'.
    " Producción bruta ó neta:
    PERFORM selec_datos_turnos.
  ELSEIF ptodos = 'X'.
    " Producción bruta + neta:
    PERFORM selec_prod_turnos.
  ELSEIF pzrec = 'X'.
    " Materia Prima:
    PERFORM selec_mat_prima.
  ELSEIF pzquim = 'X'.
    " Materiales Auxiliares:
    PERFORM selec_mat_aux.
* GST - 21/05/2015 ->
  ELSEIF pzpulp = 'X'.
    PERFORM selec_mat_pulp.
* GST - 21/05/2015 <-
  ELSEIF pzrema = 'X'.
    PERFORM selec_remanipulado.
  ENDIF.

END-OF-SELECTION.
  IF gt_entradas[] IS INITIAL.
    MESSAGE 'No se seleccionan datos para los criterios indicados' TYPE 'I'.
  ELSE.
    PERFORM mostrar_resultados.
  ENDIF.
*&---------------------------------------------------------------------*
*&      Form  SELECCIONAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM seleccionar_datos .
**05.09.2016 YTG Reducir la cantidad de campos en la tabla interna a solo los que se usan (Rendimiento)
  DATA: BEGIN OF lw_aufk,
          zzebeln1 TYPE aufk-zzebeln1,
          zzebelp1 TYPE aufk-zzebelp1,
          zzkunnr1 TYPE aufk-zzkunnr1,
        END OF lw_aufk.

  DATA lw_datos TYPE zepp_entradas_produccion.
  DATA lt_aufm TYPE STANDARD TABLE OF aufm.
  DATA lw_aufm TYPE aufm.


*  DATA lw_aufk TYPE aufk.
  DATA lv_arbpl TYPE arbpl.
  DATA: lv_object TYPE objnum.
  DATA: it_objectdata TYPE STANDARD TABLE OF clobjdat,
        it_class      TYPE STANDARD TABLE OF sclass,
        ls_objectdata TYPE                   clobjdat.

  SELECT * INTO TABLE lt_aufm FROM aufm
    WHERE matnr IN smatnr
      AND werks = pwerks
      AND budat IN sbudat
      AND charg IN scharg
      AND aufnr IN saufnr.

  DATA: lt_mseg TYPE TABLE OF mseg,
        ls_mseg TYPE mseg.
  SELECT * FROM mseg INTO TABLE lt_mseg
                     FOR ALL ENTRIES IN lt_aufm
                     WHERE mblnr = lt_aufm-mblnr
                       AND lgort = lt_aufm-lgort.

  LOOP AT lt_aufm INTO lw_aufm.
    CLEAR lw_datos.
    lw_datos-matnr = lw_aufm-matnr.
    SELECT SINGLE maktx INTO lw_datos-maktx FROM makt
      WHERE matnr = lw_aufm-matnr
        AND spras = sy-langu.

    lw_datos-werks = lw_aufm-werks.

    SELECT SINGLE matkl mtart zzancho INTO (lw_datos-matkl, lw_datos-mtart, lw_datos-zzancho) FROM mara WHERE matnr = lw_aufm-matnr.

    lw_datos-budat = lw_aufm-budat.
    lw_datos-charg = lw_aufm-charg.
    lw_datos-aufnr = lw_aufm-aufnr.
    lw_datos-menge = lw_aufm-menge.
    lw_datos-meins = lw_aufm-meins.
    lw_datos-bwart = lw_aufm-bwart.

    READ TABLE lt_mseg INTO ls_mseg WITH KEY mblnr = lw_aufm-mblnr lgort = lw_aufm-lgort.
    IF sy-subrc EQ 0.
      lw_datos-lgort_origen = ls_mseg-umlgo.
    ENDIF.

    IF lw_datos-mtart = 'ZROL'.
      lw_datos-prodbrut = si.
    ELSE.
      lw_datos-prodbrut = no.
    ENDIF.
* GST - 27/04/2015 ->
*    CHECK lw_datos-prodbrut = ppbrut.
    CHECK lw_datos-prodbrut = ppbrut AND lw_datos-bwart <> '261'.
* GST - 27/04/2015 <-

    IF lw_datos-mtart = 'ZPAP'.
      lw_datos-prodneta = si.
    ELSE.
      lw_datos-prodneta = no.
    ENDIF.
    CHECK lw_datos-prodneta = ppneto.

    IF lw_aufm-bwart = '101' OR lw_aufm-bwart = '102'.
*05.09.2016 YTG Quitar el select * para mejorar rendimiento
*  SELECT SINGLE * INTO lw_aufk FROM aufk WHERE aufnr = lw_aufm-aufnr.
      SELECT SINGLE zzebeln1 zzebelp1 zzkunnr1 INTO lw_aufk FROM aufk WHERE aufnr = lw_aufm-aufnr.
      IF sy-subrc = 0.
        lw_datos-vbeln = lw_aufk-zzebeln1.
        lw_datos-posnr = lw_aufk-zzebelp1.
        lw_datos-kunnr = lw_aufk-zzkunnr1.

        SELECT SINGLE name1 INTO lw_datos-name1 FROM kna1 WHERE kunnr = lw_datos-kunnr.
      ENDIF.
    ENDIF.
    CHECK lw_datos-vbeln IN svbeln.
    CHECK lw_datos-kunnr IN skunnr.

    IF lw_datos-charg IS NOT INITIAL.
* GST - 26/03/2015 ->
      IF lw_datos-mtart = 'ZROL'.
* GST - 26/03/2015 <-
        PERFORM obtener_clasificacion CHANGING lw_datos.
* GST - 26/03/2015 ->
      ELSE.
        PERFORM obtener_clasificacion_bob CHANGING lw_datos.
      ENDIF.
* GST - 26/03/2015 <-
    ENDIF.

* GST - 24/04/2015 ->
    IF lw_datos-bwart = '102' OR lw_datos-bwart = '291'. "YTG -SAT 7000012572
      lw_datos-menge = ( -1 ) * lw_datos-menge.
      lw_datos-brgew = ( -1 ) * lw_datos-brgew.
    ENDIF.
* GST - 24/04/2015 <-


* YTG  - 16/09/2016 Mod para obtener el puesto de trabajo.
* YTG - 05/09/2016 --Ticket

    CONCATENATE lw_datos-matnr lw_datos-charg INTO lv_object.
    CLEAR:   it_class,   it_objectdata.

    CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS'
      EXPORTING
        class              = 'Z_BOBINA'
        classtype          = '023'
        object             = lv_object
        objecttable        = 'MCH1'
      TABLES
        t_class            = it_class
        t_objectdata       = it_objectdata
      EXCEPTIONS
        no_classification  = 1
        no_classtypes      = 2
        invalid_class_type = 3
        OTHERS             = 4.
    IF sy-subrc = 0.

      READ TABLE it_objectdata INTO ls_objectdata
                                   WITH KEY atnam = 'Z_PUESTO_TRABAJO'.
      IF  sy-subrc = 0.
*   Si existe la Z_PUESTO_TRABAJO, asignarla a ptrabajo
        lw_datos-ptrabajo = ls_objectdata-ausp1.
      ELSE.
*   Si no existe ir a buscarla a la afru por la orden
        SELECT SINGLE arbpl INTO lv_arbpl
           FROM crhd AS c
           INNER JOIN afru AS a ON ( c~objid = a~arbid )
           WHERE a~aufnr = lw_datos-aufnr.
        IF sy-subrc = 0.
          lw_datos-ptrabajo = lv_arbpl.
        ENDIF.
      ENDIF.

    ELSE.
* Si la función falla por una excepción, buscarla en la afru por la orden
      SELECT SINGLE arbpl INTO lv_arbpl
         FROM crhd AS c
         INNER JOIN afru AS a ON ( c~objid = a~arbid )
         WHERE a~aufnr = lw_datos-aufnr.

      IF sy-subrc = 0.
        lw_datos-ptrabajo = lv_arbpl.
      ENDIF.
    ENDIF.

** YTG - 05/09/2016 --Ticket
*** YTG  - 16/09/2016 Mod para obtener el puesto de trabajo.

    APPEND lw_datos TO gt_entradas.
  ENDLOOP.

ENDFORM.                    " SELECCIONAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_RESULTADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_resultados .
  DATA ct_fieldcat TYPE slis_t_fieldcat_alv.
  DATA lw_fcat TYPE slis_fieldcat_alv.
  DATA lw_layo TYPE slis_layout_alv .
  DATA lw_variant TYPE disvariant.

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZEPP_ENTRADAS_PRODUCCION'
    CHANGING
      ct_fieldcat      = ct_fieldcat.

  LOOP AT ct_fieldcat INTO lw_fcat.
    CASE lw_fcat-fieldname.
      WHEN 'MATNR'.
        lw_fcat-key = si.
      WHEN 'MAKTX'.
        lw_fcat-key = si.
      WHEN 'WERKS'.
        lw_fcat-key = si.
      WHEN 'MATKL'.
        lw_fcat-key = si.
* GST - 27/04/2015 ->
      WHEN 'WGBEZ60'.
        lw_fcat-key = si.
* GST - 27/04/2015 <-
      WHEN 'BUDAT'.
        lw_fcat-emphasize = si.
      WHEN 'CHARG'.
        lw_fcat-emphasize = si.
      WHEN 'CHARG_ORIGEN'.
        lw_fcat-seltext_l = 'Lote origen'.
        lw_fcat-seltext_m = 'Lote origen'.
        lw_fcat-seltext_s = 'Lote origen'.
      WHEN 'AUFNR'.
        lw_fcat-emphasize = si.
      WHEN 'PRODBRUT'.
        lw_fcat-checkbox = si.
      WHEN 'PRODNETA'.
        lw_fcat-checkbox = si.
* GST - 26/03/2015 ->
      WHEN 'BREIT'.
        lw_fcat-no_out = si.
      WHEN 'ZZANCHO'.
        lw_fcat-outputlen = '6'.
* GST - 26/03/2015 <-
* RHP - 26/03/2015 ->
      WHEN 'DIAMETRO'.
        lw_fcat-seltext_l = 'Diámetro'.
        lw_fcat-seltext_m = 'Diámetro'.
        lw_fcat-seltext_s = 'Diámetro'.
* RHP - 26/03/2015 <-

* GST - 27/04/2015 ->
      WHEN 'TURNO'.
        lw_fcat-outputlen = '6'.
* GST - 27/04/2015 <-

* YTG- 05/09/2016 ->
      WHEN 'PTRABAJO'.
*        lw_fcat-outputlen = '6'.
        lw_fcat-seltext_l = 'Puesto trabajo'.
        lw_fcat-seltext_m = 'Puesto trabajo'.
        lw_fcat-seltext_s = 'Puesto trabajo'.
*<-- ACT. 21.11.2016 7000012792 Ticket_##_21650_##_de_fnavarro@palquer
      WHEN 'VCODE'.
        lw_fcat-seltext_l = 'Decisión Empleo'.
        lw_fcat-seltext_m = 'Dec.Emp.'.
        lw_fcat-seltext_s = 'DE'.
*ACT. 21.11.2016 7000012792 Ticket_##_21650_##_de_fnavarro@palquer -->
      WHEN 'LGORT_ORIGEN'.
        lw_fcat-seltext_l = 'Almacén origen'.
        lw_fcat-seltext_m = 'Alm.Origen'.
        lw_fcat-seltext_s = 'AlmOrig'.
    ENDCASE.
    MODIFY ct_fieldcat FROM lw_fcat.
  ENDLOOP.

  lw_layo-zebra = si.
  lw_layo-colwidth_optimize = si.

* Variante:
  CLEAR lw_variant.
  lw_variant-report = sy-repid.
  IF pvari IS NOT INITIAL.
    lw_variant-variant = pvari.
  ENDIF.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      it_fieldcat = ct_fieldcat
      i_save      = 'A'
      is_variant  = lw_variant
      is_layout   = lw_layo
    TABLES
      t_outtab    = gt_entradas.

ENDFORM.                    " MOSTRAR_RESULTADOS
*&---------------------------------------------------------------------*
*&      Form  OBTENER_CLASIFICACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM obtener_clasificacion  CHANGING pw_datos TYPE zepp_entradas_produccion.
  DATA l_objkey TYPE objnum.
  DATA lt_allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num WITH HEADER LINE.
  DATA lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char WITH HEADER LINE.
  DATA lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr WITH HEADER LINE.
  DATA lt_return TYPE STANDARD TABLE OF bapiret2.

  CONCATENATE pw_datos-matnr pw_datos-charg INTO l_objkey.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_objkey
      objecttable     = 'MCH1'
      classnum        = 'Z_ROLLO'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_allocvaluesnum
      allocvalueschar = lt_allocvalueschar
      allocvaluescurr = lt_allocvaluescurr
      return          = lt_return.

  READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
  CHECK sy-subrc <> 0.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_DIAMETRO1'.
  IF sy-subrc = 0.
    pw_datos-diametro = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-diametro_un = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-diametro_un = 'MM'.
    ENDIF.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_HUMEDAD'.
  IF sy-subrc = 0.
    pw_datos-humedad = lt_allocvaluesnum-value_from.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_PESO1'.
  IF sy-subrc = 0.
    pw_datos-brgew = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-gewei = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-gewei = 'KG'.
    ENDIF.
  ENDIF.

* RHP 26/03/2015 ->
  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_FSC_PORCENTAJE'.
  IF sy-subrc = 0.
    pw_datos-fsc = lt_allocvaluesnum-value_from.
  ENDIF.
* RHP 26/03/2015 <-

*BREIT  1 Type  BREIT QUAN  13  3 Ancho
*LAENG  1 Type  LAENG QUAN  13  3 Longitud
*MEABM  1 Type  MEABM UNIT  3 0 Unidad de medida para longitud/ancho/altura

*<-- ACT. 21.11.2016 7000012792 Ticket_##_21650_##_de_fnavarro@palquer
* RECUPERAR DECISION DE EMPLEO
  READ TABLE lt_allocvalueschar "INTO ls_alloc_values_char
             WITH KEY charact = 'LOBM_UDCODE'.

  IF sy-subrc = 0.
    pw_datos-vcode = lt_allocvalueschar-value_neutral.
  ENDIF.
* ACT. 21.11.2016 7000012792 Ticket_##_21650_##_de_fnavarro@palquer -->


ENDFORM.                    " OBTENER_CLASIFICACION
*&---------------------------------------------------------------------*
*&      Form  OBTENER_CLASIFICACION_BOB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM obtener_clasificacion_bob  CHANGING pw_datos TYPE zepp_entradas_produccion.

  DATA l_objkey TYPE objnum.
  DATA lt_allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num WITH HEADER LINE.
  DATA lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char WITH HEADER LINE.
  DATA lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr WITH HEADER LINE.
  DATA lt_return TYPE STANDARD TABLE OF bapiret2.

  CONCATENATE pw_datos-matnr pw_datos-charg INTO l_objkey.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_objkey
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_allocvaluesnum
      allocvalueschar = lt_allocvalueschar
      allocvaluescurr = lt_allocvaluescurr
      return          = lt_return.

  READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
  CHECK sy-subrc <> 0.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_DIAMETRO'.
  IF sy-subrc = 0.
    pw_datos-diametro = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-diametro_un = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-diametro_un = 'MM'.
    ENDIF.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_HUMEDAD'.
  IF sy-subrc = 0.
    pw_datos-humedad = lt_allocvaluesnum-value_from.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_PESO'.
  IF sy-subrc = 0.
    pw_datos-brgew = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-gewei = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-gewei = 'kg'.
    ENDIF.
  ENDIF.

  " Longitud:
  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_LONGITUD_B'.
  IF sy-subrc = 0.
    pw_datos-laeng = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-meabm = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-meabm = 'M'.
    ENDIF.
  ENDIF.

* RHP 26/03/2015 ->
  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_FSC_PORCENTAJE'.
  IF sy-subrc = 0.
    pw_datos-fsc = lt_allocvaluesnum-value_from.
  ENDIF.
* RHP 26/03/2015 <-

* GST - 30/09/2015 - Motivo reproceso ->
  READ TABLE lt_allocvalueschar
             WITH KEY charact = 'ZPPI_MOTIVO_REPROCESO_BOBINA'.
  IF sy-subrc = 0.
    pw_datos-motiv_reproc = lt_allocvalueschar-value_char.
* GST - 22/10/2015 - Motivo reproceso SCADA ->
  ELSE.
    READ TABLE lt_allocvalueschar
               WITH KEY charact = 'Z_MOTIVO_REPROCESO_BOBINA'.
    IF sy-subrc = 0.
      pw_datos-motiv_reproc = lt_allocvalueschar-value_char.
    ENDIF.
* GST - 22/10/2015 - Motivo reproceso SCADA <-
  ENDIF.
* GST - 30/09/2015 - Motivo reproceso <-


* GST - 09/11/2015 - Motivo remanipulado ->
  READ TABLE lt_allocvalueschar
             WITH KEY charact = 'ZPPI_MOTIVO_REMANIPULADO'.

  IF sy-subrc = 0.
    pw_datos-motiv_remanip = lt_allocvalueschar-value_char.
  ENDIF.
* GST - 09/11/2015 - Motivo remanipulado <-

* Puesto de trabajo
  READ TABLE lt_allocvalueschar
             WITH KEY charact = 'Z_PUESTO_TRABAJO'.

  IF sy-subrc = 0.
    pw_datos-ptrabajo = lt_allocvalueschar-value_char.
  ENDIF.


* cgijon: sacar decisión de empleo de las bobinas
  READ TABLE lt_allocvalueschar
           WITH KEY charact = 'LOBM_UDCODE'.

  IF sy-subrc = 0.
    pw_datos-vcode = lt_allocvalueschar-value_neutral.
  ENDIF.

* uDefine - añadir lote origen
  READ TABLE lt_allocvalueschar
         WITH KEY charact = 'Z_LOTE_ORIGEN'.

  IF sy-subrc = 0.
    pw_datos-charg_origen = lt_allocvalueschar-value_neutral.
  ENDIF.


ENDFORM.                    " OBTENER_CLASIFICACION_BOB
*&---------------------------------------------------------------------*
*&      Form  TURNOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM turnos .

  DATA: ls_h_t1 LIKE LINE OF so_h_t1,
        ls_h_t2 LIKE LINE OF so_h_t2,
        ls_h_t3 LIKE LINE OF so_h_t3.

  CLEAR: so_h_t1, ls_h_t1, so_h_t2, ls_h_t2.
  CLEAR: ls_h_t3, so_h_t3_ini, so_h_t3_fin, so_h_t3, gv_d_t3_ini, gv_d_t3_fin.
  REFRESH: so_h_t1, so_h_t2, so_h_t3_ini, so_h_t3_fin, so_h_t3.

* Turno 1:
  IF p_t1 = 'X'.
    CLEAR ls_h_t1.
    ls_h_t1-sign = 'I'.
    ls_h_t1-option = 'BT'.
    ls_h_t1-low = '060000'.
    ls_h_t1-high = '135959'.
    APPEND ls_h_t1 TO so_h_t1.
  ENDIF.

* Turno 2:
  IF p_t2 = 'X'.
    CLEAR ls_h_t2.
    ls_h_t2-sign = 'I'.
    ls_h_t2-option = 'BT'.
    ls_h_t2-low = '140000'.
    ls_h_t2-high = '215959'.
    APPEND ls_h_t2 TO so_h_t2.
  ENDIF.

* Turno 3:
* Vemos si el día inicial y final es el mismo:
  IF p_t3 = 'X'.
    IF sbudat-option = 'EQ'.

      gv_d_t3_ini = sbudat-low.
      gv_d_t3_fin = sbudat-low + 1.

      CLEAR ls_h_t3.
      ls_h_t3-sign = 'I'.
      ls_h_t3-option = 'BT'.
      ls_h_t3-low = '220000'.
      ls_h_t3-high = '235959'.
      APPEND ls_h_t3 TO so_h_t3_ini.

      CLEAR ls_h_t3.
      ls_h_t3-sign = 'I'.
      ls_h_t3-option = 'BT'.
      ls_h_t3-low = '000000'.
      ls_h_t3-high = '055959'.
      APPEND ls_h_t3 TO so_h_t3_fin.

    ELSEIF sbudat-option = 'BT'.

      IF sbudat-low = sbudat-high.

        gv_d_t3_ini = sbudat-low.
        gv_d_t3_fin = sbudat-low + 1.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '220000'.
        ls_h_t3-high = '235959'.
        APPEND ls_h_t3 TO so_h_t3_ini.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '000000'.
        ls_h_t3-high = '055959'.
        APPEND ls_h_t3 TO so_h_t3_fin.

      ELSE.

        gv_d_t3_ini = sbudat-low.
        gv_d_t3_fin = sbudat-high + 1.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '220000'.
        ls_h_t3-high = '235959'.
        APPEND ls_h_t3 TO so_h_t3_ini.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '000000'.
        ls_h_t3-high = '055959'.
        APPEND ls_h_t3 TO so_h_t3_fin.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '000000'.
        ls_h_t3-high = '055959'.
        APPEND ls_h_t3 TO so_h_t3.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '220000'.
        ls_h_t3-high = '235959'.
        APPEND ls_h_t3 TO so_h_t3.

      ENDIF.

    ENDIF.
  ENDIF.

ENDFORM.                    " TURNOS
*&---------------------------------------------------------------------*
*&      Form  SELEC_DATOS_TURNOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM selec_datos_turnos .
*05.09.2016 YTG Reducir la cantidad de campos en la tabla interna a solo los que se usan (Rendimiento)
  DATA: BEGIN OF lw_aufk,
          zzebeln1 TYPE aufk-zzebeln1,
          zzebelp1 TYPE aufk-zzebelp1,
          zzkunnr1 TYPE aufk-zzkunnr1,
        END OF lw_aufk.

  DATA lw_datos TYPE zepp_entradas_produccion.
  DATA lt_aufm TYPE STANDARD TABLE OF aufm.
  DATA lw_aufm TYPE aufm.
*  DATA lw_aufk TYPE aufk.
  DATA lv_arbpl TYPE arbpl.
  DATA  lv_where TYPE string.
*  DATA: lv_object TYPE char28.
  DATA: lv_object TYPE objnum.
  DATA: it_objectdata TYPE STANDARD TABLE OF clobjdat,
        it_class      TYPE STANDARD TABLE OF sclass,
        ls_objectdata TYPE                   clobjdat.

  CLEAR: lt_aufm.
  REFRESH: lt_aufm.

***  05/09/2016 YTG Optimizando las 3 selects en una sola.
  CLEAR lv_where.
  IF p_t1 = 'X'.
*    lv_where = '( b~cputm IN so_h_t1'.
    lv_where = '( ( b~cputm IN so_h_t1  AND a~budat IN sbudat )'.
  ENDIF.

  IF p_t2 = 'X'.
    IF lv_where IS INITIAL.
*      lv_where = '( b~cputm IN so_h_t2'.
      lv_where = '( ( b~cputm IN so_h_t2 AND a~budat IN sbudat )'.
    ELSE.
      CONCATENATE lv_where ' OR ( b~cputm IN so_h_t2 AND a~budat IN sbudat )' INTO lv_where SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_t3 = 'X'.

    IF so_h_t3[] IS INITIAL.

      IF lv_where IS INITIAL.
        lv_where = '( ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )' INTO lv_where SEPARATED BY space.
      ENDIF.
    ELSE.

      IF lv_where IS INITIAL.
        lv_where = '( ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) OR ( a~budat <> gv_d_t3_ini AND a~budat <> gv_d_t3_fin AND a~budat IN sbudat AND b~cputm IN so_h_t3 ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin )'
        'OR ( a~budat <> gv_d_t3_ini AND a~budat <> gv_d_t3_fin AND a~budat IN sbudat AND b~cputm IN so_h_t3 ) )'
        INTO lv_where SEPARATED BY space.
      ENDIF.

    ENDIF.

  ENDIF.

* Comprobar que lv_where no esté vacío, para saber que al menos se ha seleccionado un turno
  IF lv_where IS NOT INITIAL.

    CONCATENATE lv_where ')' INTO lv_where SEPARATED BY space.


    SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
      FROM aufm AS a
      INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                              AND b~mjahr = a~mjahr )
      WHERE a~matnr IN smatnr
        AND a~werks = pwerks
*        AND a~budat IN sbudat
        AND a~charg IN scharg
* GST - 30/07/2015 - Ticket 7179 ->
        AND a~lgort IN slgort
* GST - 30/07/2015 - Ticket 7179 <-
        AND a~aufnr IN saufnr
*        AND b~cputm IN so_h_t1
AND (lv_where). " Añadir la condición construida a partir de los turnos seleccionados.
  ENDIF.
***  05/09/2016 YTG Optimizando las 3 selects en una sola.


  DATA: lt_mseg TYPE TABLE OF mseg,
        ls_mseg TYPE mseg.
  IF lt_aufm[] IS NOT INITIAL.
    SELECT * FROM mseg INTO TABLE lt_mseg
                       FOR ALL ENTRIES IN lt_aufm
                       WHERE mblnr = lt_aufm-mblnr
                         AND lgort = lt_aufm-lgort.
  ENDIF.

  LOOP AT lt_aufm INTO lw_aufm.
    CLEAR lw_datos.
    lw_datos-matnr = lw_aufm-matnr.
    SELECT SINGLE maktx INTO lw_datos-maktx FROM makt
      WHERE matnr = lw_aufm-matnr
        AND spras = sy-langu.

    lw_datos-werks = lw_aufm-werks.

    SELECT SINGLE matkl mtart zzancho zzgramaje
        INTO (lw_datos-matkl, lw_datos-mtart, lw_datos-zzancho, lw_datos-zzgramaje)
        FROM mara
        WHERE matnr = lw_aufm-matnr.

    lw_datos-budat = lw_aufm-budat.
    lw_datos-charg = lw_aufm-charg.
    lw_datos-aufnr = lw_aufm-aufnr.
    lw_datos-menge = lw_aufm-menge.
    lw_datos-meins = lw_aufm-meins.
    lw_datos-bwart = lw_aufm-bwart.
    lw_datos-lgort = lw_aufm-lgort.

    READ TABLE lt_mseg INTO ls_mseg WITH KEY mblnr = lw_aufm-mblnr lgort = lw_aufm-lgort.
    IF sy-subrc EQ 0.
      lw_datos-lgort_origen = ls_mseg-umlgo.
    ENDIF.

    IF lw_datos-mtart = 'ZROL'.
      lw_datos-prodbrut = si.
    ELSE.
      lw_datos-prodbrut = no.
* GST - 10/07/2015 ->
      IF ( ( lw_datos-bwart = '531' OR lw_datos-bwart = '532') AND lw_datos-lgort = '1000' )
      OR ( ( lw_datos-bwart = '101' OR lw_datos-bwart = '102') AND lw_datos-lgort = '1000'
      AND lw_datos-mtart = 'ZSEM' ) .
        lw_datos-prodbrut = si.
      ENDIF.
* GST - 10/07/2015 <-
    ENDIF.
* GST - 27/04/2015 ->
*    CHECK lw_datos-prodbrut = ppbrut.
    CHECK lw_datos-prodbrut = ppbrut AND
          ( lw_datos-bwart <> '261' AND lw_datos-bwart <> '262').
* GST - 27/04/2015 <-

    IF lw_datos-mtart = 'ZPAP'.
      lw_datos-prodneta = si.
    ELSE.
      lw_datos-prodneta = no.
    ENDIF.
    CHECK lw_datos-prodneta = ppneto AND
          ( lw_datos-bwart <> '261' AND lw_datos-bwart <> '262').

    IF lw_aufm-bwart = '101' OR lw_aufm-bwart = '102' OR lw_aufm-bwart = '531' OR lw_aufm-bwart = '532'.
** 05.09.2016 YTG Quitar el select * para mejorar rendimiento
*  SELECT SINGLE * INTO lw_aufk FROM aufk WHERE aufnr = lw_aufm-aufnr.
      SELECT SINGLE zzebeln1 zzebelp1 zzkunnr1 INTO lw_aufk FROM aufk WHERE aufnr = lw_aufm-aufnr.
      IF sy-subrc = 0.
        lw_datos-vbeln = lw_aufk-zzebeln1.
        lw_datos-posnr = lw_aufk-zzebelp1.
        lw_datos-kunnr = lw_aufk-zzkunnr1.

        SELECT SINGLE name1 INTO lw_datos-name1 FROM kna1 WHERE kunnr = lw_datos-kunnr.
      ENDIF.
    ENDIF.
    CHECK lw_datos-vbeln IN svbeln.
    CHECK lw_datos-kunnr IN skunnr.

    IF lw_datos-charg IS NOT INITIAL.
* GST - 26/03/2015 ->
      IF lw_datos-mtart = 'ZROL'.
* GST - 26/03/2015 <-
        PERFORM obtener_clasificacion CHANGING lw_datos.
* GST - 26/03/2015 ->
* GST - 10/07/2015 ->
      ELSEIF ( ( lw_datos-bwart = '531' OR lw_datos-bwart = '532') AND lw_datos-lgort = '1000')
      OR ( ( lw_datos-bwart = '101' OR lw_datos-bwart = '102') AND lw_datos-lgort = '1000'
      AND lw_datos-mtart = 'ZSEM' ).
        PERFORM obtener_clasificacion_pulp CHANGING lw_datos.
* GST - 10/07/2015 <-
      ELSE.
        PERFORM obtener_clasificacion_bob CHANGING lw_datos.
      ENDIF.
* GST - 26/03/2015 <-
    ENDIF.

* GST - 24/04/2015 ->
    IF lw_datos-bwart = '102' OR lw_datos-bwart = '532' OR lw_datos-bwart = '291'."YTG -SAT 7000012572
      lw_datos-menge = ( -1 ) * lw_datos-menge.
      lw_datos-brgew = ( -1 ) * lw_datos-brgew.
    ENDIF.
* GST - 24/04/2015 <-


* GST - 27/04/2015 ->
    " Hora y Turno:
    SELECT SINGLE cpudt cputm INTO (lw_datos-cpudt, lw_datos-cputm)
      FROM mkpf
      WHERE mblnr = lw_aufm-mblnr
      AND mjahr = lw_aufm-mjahr.

    IF ( lw_datos-cputm >= '060000' AND lw_datos-cputm <= '135959' ).
      lw_datos-turno = 'T1'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '140000' AND lw_datos-cputm <= '215959' ).
      lw_datos-turno = 'T2'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '220000' AND lw_datos-cputm <= '235959' ).
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSE.
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-budat - 1.

*      lw_datos-fec_prod = lw_datos-cpudt. " - 1. " UDEFINEDES Ticket 43398
    ENDIF.

*    IF lw_datos-fec_prod < lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-budat.
*    ENDIF.

    " Descripción grupo artículos:
    SELECT SINGLE wgbez60 INTO lw_datos-wgbez60
      FROM t023t
      WHERE spras = sy-langu
      AND matkl = lw_datos-matkl.

    CONDENSE lw_datos-wgbez60.

* GST - 27/04/2015 <-

* GST - 04/02/2016 - Ticket 9246 ->
    lw_datos-contador = 1.
* GST - 04/02/2016 - Ticket 9246 <-
    IF lw_datos-bwart EQ '102' OR lw_datos-bwart EQ '312'.
      lw_datos-contador = -1.
    ENDIF.

*   Puesto de trabajo, sino está en la característica de la BOBINA
    IF lw_datos-ptrabajo IS INITIAL.
      SELECT SINGLE arbpl INTO lv_arbpl
         FROM crhd AS c
         INNER JOIN afru AS a ON ( c~objid = a~arbid )
         WHERE a~aufnr = lw_datos-aufnr
         AND   c~werks = lw_datos-werks.
      IF sy-subrc = 0.
        lw_datos-ptrabajo = lv_arbpl.
      ENDIF.
    ENDIF.

    APPEND lw_datos TO gt_entradas.
  ENDLOOP.

ENDFORM.                    " SELEC_DATOS_TURNOS
*&---------------------------------------------------------------------*
*&      Form  SELEC_PROD_TURNOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM selec_prod_turnos .
*>>> 05.09.2016 YTG Reducir la cantidad de campos en la tabla interna a solo los que se usan (Rendimiento)
  DATA: BEGIN OF lw_aufk,
          zzebeln1 TYPE aufk-zzebeln1,
          zzebelp1 TYPE aufk-zzebelp1,
          zzkunnr1 TYPE aufk-zzkunnr1,
        END OF lw_aufk.

  CONSTANTS c_mat_pulper TYPE matnr VALUE '000000000002001764'.

  DATA lw_datos TYPE zepp_entradas_produccion.
  DATA lt_aufm TYPE STANDARD TABLE OF aufm.
  DATA lw_aufm TYPE aufm.
*  DATA lw_aufk TYPE aufk.
  DATA lv_auart TYPE aufart.
  DATA lv_arbpl TYPE arbpl.
  DATA  lv_where TYPE string.
  DATA: lv_object TYPE objnum.
  DATA: it_objectdata TYPE STANDARD TABLE OF clobjdat,
        it_class      TYPE STANDARD TABLE OF sclass,
        ls_objectdata TYPE                   clobjdat.

  CLEAR: lt_aufm.
  REFRESH: lt_aufm.

**  05/09/2016 YTG Optimizando las 3 selects en una sola.
  CLEAR lv_where.
  IF p_t1 = 'X'.
*    lv_where = '( b~cputm IN so_h_t1'.
    lv_where = '( ( b~cputm IN so_h_t1  AND a~budat IN sbudat )'.
  ENDIF.

  IF p_t2 = 'X'.
    IF lv_where IS INITIAL.
*      lv_where = '( b~cputm IN so_h_t2'.
      lv_where = '( ( b~cputm IN so_h_t2 AND a~budat IN sbudat )'.
    ELSE.
      CONCATENATE lv_where 'OR ( b~cputm IN so_h_t2 AND a~budat IN sbudat )' INTO lv_where SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_t3 = 'X'.

    IF so_h_t3[] IS INITIAL.

      IF lv_where IS INITIAL.
        lv_where = '( ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )' INTO lv_where SEPARATED BY space.
      ENDIF.
    ELSE.

      IF lv_where IS INITIAL.
        lv_where = '( ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) OR ( a~budat <> gv_d_t3_ini AND b~budat <> gv_d_t3_fin AND a~budat IN sbudat AND b~cputm IN so_h_t3 ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin )'
        'OR ( a~budat <> gv_d_t3_ini AND a~budat <> gv_d_t3_fin AND a~budat IN sbudat AND b~cputm IN so_h_t3 ) )'
        INTO lv_where SEPARATED BY space.
      ENDIF.

    ENDIF.

  ENDIF.

* Comprobar que lv_where no esté vacío, para saber que al menos se ha seleccionado un turno

  IF lv_where IS NOT INITIAL.

    CONCATENATE lv_where ')' INTO lv_where SEPARATED BY space.

    SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
        FROM aufm AS a
        INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                                AND b~mjahr = a~mjahr )
        WHERE a~matnr IN smatnr
          AND a~werks = pwerks
          AND a~charg IN scharg
          AND a~lgort IN slgort
          AND a~aufnr IN saufnr
          AND (lv_where).

  ENDIF.
**  05/09/2016 YTG Optimizando las 3 selects en una sola.



* aÑadir movimientos 309 y con origen 1020
*  REPLACE ALL OCCURRENCES OF 'a~' in lv_where WITH ''.
*  REPLACE ALL OCCURRENCES OF 'b~' in lv_where WITH ''.
  REPLACE ALL OCCURRENCES OF 'b~cputm' IN lv_where WITH 'CPUTM_MKPF'.
  REPLACE ALL OCCURRENCES OF 'a~budat' IN lv_where WITH 'BUDAT_MKPF'.
  SELECT * FROM mseg APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm WHERE werks = pwerks AND bwart EQ '309' AND lgort = '1020' AND (lv_where).

  DATA: lt_mseg TYPE HASHED TABLE OF mseg WITH UNIQUE KEY mblnr mjahr zeile,
        ls_mseg TYPE mseg.
  IF lt_aufm[] IS NOT INITIAL.
    SELECT * FROM mseg INTO TABLE lt_mseg
                       FOR ALL ENTRIES IN lt_aufm
                       WHERE mblnr = lt_aufm-mblnr
                         AND mjahr = lt_aufm-mjahr
                         AND zeile = lt_aufm-zeile.
  ENDIF.


  LOOP AT lt_aufm INTO lw_aufm.
    CLEAR lw_datos.
    lw_datos-matnr = lw_aufm-matnr.
    SELECT SINGLE maktx INTO lw_datos-maktx FROM makt
      WHERE matnr = lw_aufm-matnr
        AND spras = sy-langu.

    lw_datos-werks = lw_aufm-werks.

    SELECT SINGLE matkl mtart zzancho zzgramaje
        INTO (lw_datos-matkl, lw_datos-mtart, lw_datos-zzancho, lw_datos-zzgramaje)
        FROM mara
        WHERE matnr = lw_aufm-matnr.

    lw_datos-budat = lw_aufm-budat.
    lw_datos-charg = lw_aufm-charg.
    lw_datos-aufnr = lw_aufm-aufnr.
    lw_datos-menge = lw_aufm-menge.
    lw_datos-meins = lw_aufm-meins.
    lw_datos-bwart = lw_aufm-bwart.
    lw_datos-lgort = lw_aufm-lgort.

    READ TABLE lt_mseg INTO ls_mseg WITH TABLE KEY mblnr = lw_aufm-mblnr mjahr = lw_aufm-mjahr zeile = lw_aufm-zeile .
    IF sy-subrc EQ 0.
      lw_datos-lgort_origen = ls_mseg-umlgo.
    ENDIF.

    IF lw_datos-mtart = 'ZROL'.
      IF lw_datos-bwart <> '261' AND lw_datos-bwart <> '262'.
        lw_datos-prodbrut = si.
      ELSE.
        lw_datos-prodbrut = no.
      ENDIF.
    ELSE.
      lw_datos-prodbrut = no.
* GST - 10/07/2015 ->
      IF ( lw_datos-bwart = '531' OR lw_datos-bwart = '532' ) AND lw_datos-lgort = '1000'.
        lw_datos-prodbrut = si.
      ENDIF.
* GST - 10/07/2015 <-

* GST - 14/01/2016 ->
      IF lw_datos-bwart = '101' AND lw_datos-lgort = '1000'.
        CLEAR lv_auart.
        SELECT SINGLE auart INTO lv_auart
          FROM aufk
          WHERE aufnr = lw_datos-aufnr.
        IF lv_auart = 'ZI05'.
          lw_datos-prodbrut = si.
        ENDIF.
      ENDIF.
* GST - 14/01/2016 <-
    ENDIF.

    IF lw_datos-mtart = 'ZPAP'.
      IF lw_datos-bwart <> '261' AND lw_datos-bwart <> '262'.
        lw_datos-prodneta = si.
      ELSE.
        lw_datos-prodneta = no.
      ENDIF.
    ELSE.
      lw_datos-prodneta = no.
    ENDIF.

    CHECK lw_datos-prodbrut = ptodos OR lw_datos-prodneta = ptodos.

    IF lw_aufm-bwart = '101' OR lw_aufm-bwart = '102' OR lw_aufm-bwart = '531' OR lw_aufm-bwart = '532'.
** 05.09.2016 YTG Quitar el select * para mejorar rendimiento
* SELECT SINGLE * INTO lw_aufk FROM aufk WHERE aufnr = lw_aufm-aufnr.
      SELECT SINGLE zzebeln1 zzebelp1 zzkunnr1 INTO lw_aufk FROM aufk WHERE aufnr = lw_aufm-aufnr.
      IF sy-subrc = 0.
        lw_datos-vbeln = lw_aufk-zzebeln1.
        lw_datos-posnr = lw_aufk-zzebelp1.
        lw_datos-kunnr = lw_aufk-zzkunnr1.

        SELECT SINGLE name1 INTO lw_datos-name1 FROM kna1 WHERE kunnr = lw_datos-kunnr.
      ENDIF.
    ENDIF.

    CHECK lw_datos-vbeln IN svbeln.
    CHECK lw_datos-kunnr IN skunnr.

    IF lw_datos-charg IS NOT INITIAL.
      IF lw_datos-mtart = 'ZROL'.

        IF ls_mseg-ummat = c_mat_pulper AND lw_datos-bwart = '309'.
          lw_datos-charg = ls_mseg-umcha .
          lw_datos-matnr = c_mat_pulper .
          PERFORM obtener_clasificacion_pulp CHANGING lw_datos.
          lw_datos-charg = ls_mseg-charg.
          lw_datos-matnr = ls_mseg-matnr.

        ELSE.
          PERFORM obtener_clasificacion CHANGING lw_datos.
        ENDIF.
* GST - 10/07/2015 ->
      ELSEIF ( lw_datos-bwart = '531' OR lw_datos-bwart = '532' ) AND lw_datos-lgort = '1000'.
        PERFORM obtener_clasificacion_pulp CHANGING lw_datos.
* GST - 10/07/2015 <-
* GST - 14/01/2016 ->
      ELSEIF lw_datos-bwart = '101' AND lw_datos-lgort = '1000' AND lv_auart = 'ZI05'. "SS - SAT 7*12686
*      ELSEIF lw_datos-bwart = '101' AND lw_datos-lgort = '4002' AND lv_auart = 'ZI05'.
        PERFORM obtener_clasificacion_pulp CHANGING lw_datos.
* GST - 10/07/2016 <-
      ELSE.
        IF ls_mseg-ummat = c_mat_pulper.
          PERFORM obtener_clasificacion_pulp CHANGING lw_datos.
        ELSE.
          PERFORM obtener_clasificacion_bob CHANGING lw_datos.
        ENDIF.
      ENDIF.
    ENDIF.

    IF lw_datos-bwart = '102' OR lw_datos-bwart = '532' OR lw_datos-bwart = '291'. "SAT 7000012572
      lw_datos-menge = ( -1 ) * lw_datos-menge.
      lw_datos-brgew = ( -1 ) * lw_datos-brgew.
    ENDIF.


    " Hora y Turno:
    SELECT SINGLE cpudt cputm INTO (lw_datos-cpudt, lw_datos-cputm)
      FROM mkpf
      WHERE mblnr = lw_aufm-mblnr
      AND mjahr = lw_aufm-mjahr.

    IF ( lw_datos-cputm >= '060000' AND lw_datos-cputm <= '135959' ).
      lw_datos-turno = 'T1'.
      IF lw_datos-budat NE '00000000'.
        lw_datos-fec_prod = lw_datos-budat.
      ELSE.
        lw_datos-fec_prod = lw_datos-cpudt.
      ENDIF.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '140000' AND lw_datos-cputm <= '215959' ).
      lw_datos-turno = 'T2'.
      IF lw_datos-budat NE '00000000'.
        lw_datos-fec_prod = lw_datos-budat.
      ELSE.
        lw_datos-fec_prod = lw_datos-cpudt.
      ENDIF.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '220000' AND lw_datos-cputm <= '235959' ).
      lw_datos-turno = 'T3'.
      IF lw_datos-budat NE '00000000'.
        lw_datos-fec_prod = lw_datos-budat.
      ELSE.
        lw_datos-fec_prod = lw_datos-cpudt.
      ENDIF.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSE.
      lw_datos-turno = 'T3'.
      IF lw_datos-budat NE '00000000'.
        lw_datos-fec_prod = lw_datos-budat - 1 .
      ELSE.
        lw_datos-fec_prod = lw_datos-cpudt - 1.
      ENDIF.
*      lw_datos-fec_prod = lw_datos-cpudt - 1.
    ENDIF.

*    IF lw_datos-fec_prod < lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-budat.
*    ENDIF.

    " Descripción grupo artículos:
    SELECT SINGLE wgbez60 INTO lw_datos-wgbez60
      FROM t023t
      WHERE spras = sy-langu
      AND matkl = lw_datos-matkl.

    CONDENSE lw_datos-wgbez60.

* GST - 04/02/2016 - Ticket 9246 ->
    lw_datos-contador = 1.
    IF lw_datos-bwart EQ '102' OR lw_datos-bwart EQ '312'.
      lw_datos-contador = -1.
    ENDIF.

* GST - 04/02/2016 - Ticket 9246 <-

*   Puesto de trabajo, sino está en la característica de la BOBINA
    IF lw_datos-ptrabajo IS INITIAL.
      SELECT SINGLE arbpl INTO lv_arbpl
         FROM crhd AS c
         INNER JOIN afru AS a ON ( c~objid = a~arbid )
         WHERE a~aufnr = lw_datos-aufnr
         AND   c~werks = lw_datos-werks.
      IF sy-subrc = 0.
        lw_datos-ptrabajo = lv_arbpl.
      ENDIF.
    ENDIF.

    APPEND lw_datos TO gt_entradas.
  ENDLOOP.

ENDFORM.                    " SELEC_PROD_TURNOS
*&---------------------------------------------------------------------*
*&      Form  SELEC_MAT_PRIMA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM selec_mat_prima.

  DATA lw_datos TYPE zepp_entradas_produccion.

  DATA: BEGIN OF lt_mseg OCCURS 0,
          matnr     TYPE matnr,
          werks     TYPE werks_d,
          budat     TYPE budat,
          charg     TYPE charg_d,
          lgort     TYPE lgort_d,

          umlgo     TYPE lgort_d,
          aufnr     TYPE aufnr,
          menge     TYPE menge_d,
          meins     TYPE meins,
          bwart     TYPE bwart,
          cpudt     TYPE cpudt,
          cputm     TYPE cputm,
          matkl     TYPE matkl,
          mtart     TYPE mtart,
          zzancho   TYPE zancho,
          zzgramaje TYPE zgramaje,
          dmbtr     TYPE dmbtr,
          waers     TYPE waers,
        END OF lt_mseg.

*05.09.2016 YTG Reducir la cantidad de campos en la tabla interna a solo los que se usan (Rendimiento)
  DATA: BEGIN OF lw_aufk,
          zzebeln1 TYPE aufk-zzebeln1,
          zzebelp1 TYPE aufk-zzebelp1,
          zzkunnr1 TYPE aufk-zzkunnr1,
        END OF lw_aufk.


  DATA: lw_mseg LIKE LINE OF lt_mseg.
*  DATA  lw_aufk TYPE aufk.
  DATA  lv_where TYPE string.
  DATA  lv_arbpl TYPE arbpl.
  DATA: lv_object TYPE objnum.
  DATA: it_objectdata TYPE STANDARD TABLE OF clobjdat,
        it_class      TYPE STANDARD TABLE OF sclass,
        ls_objectdata TYPE                   clobjdat.

  CLEAR: lt_mseg.
  REFRESH: lt_mseg.

**  05/09/2016 YTG Optimizando las 3 selects en una sola.
  CLEAR lv_where.
  IF p_t1 = 'X'.
*    lv_where = '( b~cputm IN so_h_t1'.
    lv_where = '( ( b~cputm IN so_h_t1  AND b~budat IN sbudat )'.
  ENDIF.
  IF p_t2 = 'X'.
    IF lv_where IS INITIAL.
*      lv_where = '( b~cputm IN so_h_t2'.
      lv_where = '( ( b~cputm IN so_h_t2 AND b~budat IN sbudat )'.
    ELSE.
      CONCATENATE lv_where 'OR ( b~cputm IN so_h_t2 AND b~budat IN sbudat )' INTO lv_where SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_t3 = 'X'.

    IF so_h_t3[] IS INITIAL.
      IF lv_where IS INITIAL.
        lv_where = '( ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )' INTO lv_where SEPARATED BY space.
      ENDIF.
    ELSE.
      IF lv_where IS INITIAL.
        lv_where = '( ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) OR ( b~budat <> gv_d_t3_ini AND b~budat <> gv_d_t3_fin AND b~budat IN sbudat AND b~cputm IN so_h_t3 ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin )'
        'OR ( b~budat <> gv_d_t3_ini AND b~budat <> gv_d_t3_fin AND b~budat IN sbudat AND b~cputm IN so_h_t3 ) )'
        INTO lv_where SEPARATED BY space.
      ENDIF.

    ENDIF.

  ENDIF.
* Comprobar que lv_where no esté vacío, para saber que al menos se ha seleccionado un turno

  IF lv_where IS NOT INITIAL.
    CONCATENATE lv_where ')' INTO lv_where SEPARATED BY space.

    SELECT a~matnr a~werks b~budat a~charg a~lgort a~umlgo
            a~aufnr
           a~menge a~meins a~bwart b~cpudt b~cputm c~matkl
           c~mtart c~zzancho c~zzgramaje a~dmbtr a~waers
        INTO TABLE lt_mseg
        FROM mseg AS a
        INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                             AND b~mjahr = a~mjahr )
        INNER JOIN mara AS c ON c~matnr = a~matnr
        WHERE ( ( a~matnr IN smatnr AND c~mtart = 'ZREC')
        OR ( a~matnr = '000000000002001764' AND a~matnr IN smatnr AND c~mtart = 'ZSEM') )
        AND a~werks = pwerks
        AND a~charg IN scharg
        AND a~lgort IN slgort
        AND a~aufnr IN saufnr
        AND a~bwart = '261'
        AND (lv_where). " Añadir la condición construida a partir de los turnos seleccionados
  ENDIF.

**  05/09/2016 YTG Optimizando las 3 selects en una sola.

  LOOP AT lt_mseg INTO lw_mseg.
    CLEAR lw_datos.
    lw_datos-matnr = lw_mseg-matnr.
    SELECT SINGLE maktx INTO lw_datos-maktx FROM makt
      WHERE matnr = lw_mseg-matnr
        AND spras = sy-langu.

    lw_datos-werks = lw_mseg-werks.
    lw_datos-matkl = lw_mseg-matkl.
    lw_datos-mtart = lw_mseg-mtart.
    lw_datos-zzancho = lw_mseg-zzancho.
    lw_datos-zzgramaje = lw_mseg-zzgramaje.

    lw_datos-budat = lw_mseg-budat.
    lw_datos-charg = lw_mseg-charg.
    lw_datos-aufnr = lw_mseg-aufnr.
    lw_datos-menge = lw_mseg-menge.
    lw_datos-meins = lw_mseg-meins.
    lw_datos-bwart = lw_mseg-bwart.
    lw_datos-lgort = lw_mseg-lgort.
    lw_datos-dmbtr = lw_mseg-dmbtr.
    lw_datos-waers = lw_mseg-waers.

    lw_datos-lgort_origen = lw_mseg-umlgo.

* 05.09.2016 YTG Quitar el select * para mejorar rendimiento
    SELECT SINGLE zzebeln1 zzebelp1 zzkunnr1 INTO lw_aufk
        FROM  aufk
        WHERE aufnr = lw_mseg-aufnr.
    IF sy-subrc = 0.
      lw_datos-vbeln = lw_aufk-zzebeln1.
      lw_datos-posnr = lw_aufk-zzebelp1.
      lw_datos-kunnr = lw_aufk-zzkunnr1.
      SELECT SINGLE name1 INTO lw_datos-name1
          FROM  kna1
          WHERE kunnr = lw_datos-kunnr.
    ENDIF.

    CHECK lw_datos-vbeln IN svbeln.
    CHECK lw_datos-kunnr IN skunnr.

    IF lw_datos-charg IS NOT INITIAL.
      PERFORM obtener_clasificacion_bob CHANGING lw_datos.
    ENDIF.

    " Hora y Turno:
    lw_datos-cputm = lw_mseg-cputm.
    lw_datos-cpudt = lw_mseg-cpudt.

    IF ( lw_datos-cputm >= '060000' AND lw_datos-cputm <= '135959' ).
      lw_datos-turno = 'T1'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '140000' AND lw_datos-cputm <= '215959' ).
      lw_datos-turno = 'T2'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '220000' AND lw_datos-cputm <= '235959' ).
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSE.
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-budat - 1.
*      lw_datos-fec_prod = lw_datos-cpudt - 1.
    ENDIF.

    " Descripción grupo artículos:
    SELECT SINGLE wgbez60 INTO lw_datos-wgbez60
      FROM t023t
      WHERE spras = sy-langu
      AND matkl = lw_datos-matkl.
    CONDENSE lw_datos-wgbez60.

    lw_datos-contador = 1.
    IF lw_datos-bwart EQ '102' OR lw_datos-bwart EQ '312'.
      lw_datos-contador = -1.
    ENDIF.


*   Puesto de trabajo, sino está en la característica de la BOBINA
    IF lw_datos-ptrabajo IS INITIAL.
      SELECT SINGLE arbpl INTO lv_arbpl
         FROM crhd AS c
         INNER JOIN afru AS a ON ( c~objid = a~arbid )
         WHERE a~aufnr = lw_datos-aufnr
         AND   c~werks = lw_datos-werks.
      IF sy-subrc = 0.
        lw_datos-ptrabajo = lv_arbpl.
      ENDIF.
    ENDIF.

    APPEND lw_datos TO gt_entradas.
  ENDLOOP.

ENDFORM.                    " SELEC_MAT_PRIMA
*&---------------------------------------------------------------------*
*&      Form  SELEC_MAT_AUX
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM selec_mat_aux .

  DATA lw_datos TYPE zepp_entradas_produccion.
  DATA: BEGIN OF lt_mseg OCCURS 0,
          matnr     TYPE matnr,
          werks     TYPE werks_d,
          budat     TYPE budat,
          charg     TYPE charg_d,
          lgort     TYPE lgort_d,
          aufnr     TYPE aufnr,
          menge     TYPE menge_d,
          meins     TYPE meins,
          bwart     TYPE bwart,
          cpudt     TYPE cpudt,
          cputm     TYPE cputm,
          matkl     TYPE matkl,
          umlgo     TYPE lgort_d,
          mtart     TYPE mtart,
          zzancho   TYPE zancho,
          zzgramaje TYPE zgramaje,
        END OF lt_mseg.

* >>> 05.09.2016 YTG Reducir la cantidad de campos en la tabla interna a solo los que se usan (Rendimiento)
  DATA: BEGIN OF lw_aufk,
          zzebeln1 TYPE aufk-zzebeln1,
          zzebelp1 TYPE aufk-zzebelp1,
          zzkunnr1 TYPE aufk-zzkunnr1,
        END OF lw_aufk.

  DATA: lw_mseg LIKE LINE OF lt_mseg.
*  DATA lw_aufk TYPE aufk.

  DATA  lv_where TYPE string.
  DATA  lv_arbpl TYPE arbpl.
  DATA: lv_object TYPE objnum.
  DATA: it_objectdata TYPE STANDARD TABLE OF clobjdat,
        it_class      TYPE STANDARD TABLE OF sclass,
        ls_objectdata TYPE                   clobjdat.


  CLEAR: lt_mseg.
  REFRESH: lt_mseg.

**  05/09/2016 YTG Optimizando las 3 selects en una sola.
  CLEAR lv_where.
  IF p_t1 = 'X'.
*    lv_where = '( b~cputm IN so_h_t1' .
    lv_where = '( ( b~cputm IN so_h_t1  AND b~budat IN sbudat )'.
  ENDIF.

  IF p_t2 = 'X'.
    IF lv_where IS INITIAL.
      lv_where = '( ( b~cputm IN so_h_t2 AND b~budat IN sbudat )'.
    ELSE.
      CONCATENATE lv_where 'OR ( b~cputm IN so_h_t2 AND b~budat IN sbudat )' INTO lv_where SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_t3 = 'X'.

    IF so_h_t3[] IS INITIAL.

      IF lv_where IS INITIAL.
        lv_where = '( ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )' INTO lv_where SEPARATED BY space.
      ENDIF.
    ELSE.
      IF lv_where IS INITIAL.
        lv_where = '( ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) OR ( b~budat <> gv_d_t3_ini AND b~budat <> gv_d_t3_fin AND b~budat IN sbudat AND b~cputm IN so_h_t3 ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin )'
        'OR ( b~budat <> gv_d_t3_ini AND b~budat <> gv_d_t3_fin AND b~budat IN sbudat AND b~cputm IN so_h_t3 ) )'
        INTO lv_where SEPARATED BY space.
      ENDIF.

    ENDIF.

  ENDIF.

* Comprobar que lv_where no esté vacío, para saber que al menos se ha seleccionado un turno

  IF lv_where IS NOT INITIAL.

    CONCATENATE lv_where ')' INTO lv_where SEPARATED BY space.

    SELECT a~matnr a~werks b~budat a~charg a~lgort a~aufnr
           a~menge a~meins a~bwart b~cpudt b~cputm a~umlgo
           c~matkl c~mtart c~zzancho c~zzgramaje
        INTO TABLE lt_mseg
        FROM mseg AS a
        INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
        AND b~mjahr = a~mjahr )
        INNER JOIN mara AS c ON c~matnr = a~matnr
        WHERE a~matnr IN smatnr
        AND a~werks = pwerks
        AND a~charg IN scharg
        AND a~lgort IN slgort
        AND a~aufnr IN saufnr
        AND  a~bwart = '261'
        AND b~cputm IN so_h_t1
        AND ( c~mtart = 'ZMAP' OR c~mtart = 'ZAUX' )
        AND (lv_where). " Añadir la condición construida a partir de los turnos seleccionados
  ENDIF.

  LOOP AT lt_mseg INTO lw_mseg.
    CLEAR lw_datos.
    lw_datos-matnr = lw_mseg-matnr.
    SELECT SINGLE maktx INTO lw_datos-maktx FROM makt
      WHERE matnr = lw_mseg-matnr
        AND spras = sy-langu.

    lw_datos-werks = lw_mseg-werks.
    lw_datos-matkl = lw_mseg-matkl.
    lw_datos-mtart = lw_mseg-mtart.
    lw_datos-zzancho = lw_mseg-zzancho.
    lw_datos-zzgramaje = lw_mseg-zzgramaje.

    lw_datos-budat = lw_mseg-budat.
    lw_datos-charg = lw_mseg-charg.
    lw_datos-aufnr = lw_mseg-aufnr.
    lw_datos-menge = lw_mseg-menge.
    lw_datos-meins = lw_mseg-meins.
    lw_datos-bwart = lw_mseg-bwart.
    lw_datos-lgort = lw_mseg-lgort.

    lw_datos-lgort_origen = lw_mseg-umlgo.


    SELECT SINGLE zzebeln1 zzebelp1 zzkunnr1 INTO lw_aufk
        FROM  aufk
        WHERE aufnr = lw_mseg-aufnr.
    IF sy-subrc = 0.
      lw_datos-vbeln = lw_aufk-zzebeln1.
      lw_datos-posnr = lw_aufk-zzebelp1.
      lw_datos-kunnr = lw_aufk-zzkunnr1.

      SELECT SINGLE name1 INTO lw_datos-name1 FROM kna1 WHERE kunnr = lw_datos-kunnr.
    ENDIF.

    CHECK lw_datos-vbeln IN svbeln.
    CHECK lw_datos-kunnr IN skunnr.

    IF lw_datos-charg IS NOT INITIAL.
      PERFORM obtener_clasificacion_bob CHANGING lw_datos.
    ENDIF.

    " Hora y Turno:
    lw_datos-cputm = lw_mseg-cputm.
    lw_datos-cpudt = lw_mseg-cpudt.

    IF ( lw_datos-cputm >= '060000' AND lw_datos-cputm <= '135959' ).
      lw_datos-turno = 'T1'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '140000' AND lw_datos-cputm <= '215959' ).
      lw_datos-turno = 'T2'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '220000' AND lw_datos-cputm <= '235959' ).
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSE.
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-budat - 1.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ENDIF.

    " Descripción grupo artículos:
    SELECT SINGLE wgbez60 INTO lw_datos-wgbez60
      FROM t023t
      WHERE spras = sy-langu
      AND matkl = lw_datos-matkl.
    CONDENSE lw_datos-wgbez60.

    lw_datos-contador = 1.
    IF lw_datos-bwart EQ '102' OR lw_datos-bwart EQ '312'.
      lw_datos-contador = -1.
    ENDIF.


*   Puesto de trabajo, sino está en la característica de la BOBINA
    IF lw_datos-ptrabajo IS INITIAL.
      SELECT SINGLE arbpl INTO lv_arbpl
         FROM crhd AS c
         INNER JOIN afru AS a ON ( c~objid = a~arbid )
         WHERE a~aufnr = lw_datos-aufnr
         AND   c~werks = lw_datos-werks.
      IF sy-subrc = 0.
        lw_datos-ptrabajo = lv_arbpl.
      ENDIF.
    ENDIF.

    APPEND lw_datos TO gt_entradas.
  ENDLOOP.

ENDFORM.                    " SELEC_MAT_AUX


*&---------------------------------------------------------------------*
*&      Form  SELEC_MAT_PULP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM selec_mat_pulp .

  DATA lw_datos TYPE zepp_entradas_produccion.
  DATA: BEGIN OF lt_mseg OCCURS 0,
          matnr     TYPE matnr,
          werks     TYPE werks_d,
          budat     TYPE budat,
          charg     TYPE charg_d,
          lgort     TYPE lgort_d,
          umlgo     TYPE lgort_d,
          aufnr     TYPE aufnr,
          menge     TYPE menge_d,
          meins     TYPE meins,
          bwart     TYPE bwart,
          cpudt     TYPE cpudt,
          cputm     TYPE cputm,
          matkl     TYPE matkl,
          mtart     TYPE mtart,
          zzancho   TYPE zancho,
          zzgramaje TYPE zgramaje,
        END OF lt_mseg.

  DATA: lw_mseg LIKE LINE OF lt_mseg.
*  DATA lw_aufk TYPE aufk.
* >>> 09.08.2016 YTG Reducir la cantidad de campos en la tabla interna a solo los que se usan (Rendimiento)
  DATA: BEGIN OF lw_aufk,
          zzebeln1 TYPE aufk-zzebeln1,
          zzebelp1 TYPE aufk-zzebelp1,
          zzkunnr1 TYPE aufk-zzkunnr1,
        END OF lw_aufk.

  DATA lv_where TYPE string.
  DATA lv_arbpl TYPE arbpl.

  DATA: lv_object TYPE objnum.
  DATA: it_objectdata TYPE STANDARD TABLE OF clobjdat,
        it_class      TYPE STANDARD TABLE OF sclass,
        ls_objectdata TYPE                   clobjdat.


  CLEAR: lt_mseg.
  REFRESH: lt_mseg.

* 09.08.2016 YTG Optimizando las 3 selects en una sola.
  CLEAR lv_where.
  IF p_t1 = 'X'.
    lv_where = '( ( b~cputm IN so_h_t1  AND b~budat IN sbudat )'.
  ENDIF.

  IF p_t2 = 'X'.
    IF lv_where IS INITIAL.
      lv_where = '( ( b~cputm IN so_h_t2 AND b~budat IN sbudat )'.
    ELSE.
      CONCATENATE lv_where 'OR ( b~cputm IN so_h_t2 AND b~budat IN sbudat )' INTO lv_where SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_t3 = 'X'.

    IF so_h_t3[] IS INITIAL.

      IF lv_where IS INITIAL.
        lv_where = '( ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )' INTO lv_where SEPARATED BY space.
      ENDIF.
    ELSE.

      IF lv_where IS INITIAL.
        lv_where = '( ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) OR ( b~budat <> gv_d_t3_ini AND b~budat <> gv_d_t3_fin AND b~budat IN sbudat AND b~cputm IN so_h_t3 ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin )'
        'OR ( b~budat <> gv_d_t3_ini AND b~budat <> gv_d_t3_fin AND b~budat IN sbudat AND b~cputm IN so_h_t3 ) )'
        INTO lv_where SEPARATED BY space.
      ENDIF.

    ENDIF.

  ENDIF.

* Comprobar que lv_where no esté vacío, para saber que al menos se ha seleccionado un turno

  IF lv_where IS NOT INITIAL.

    CONCATENATE lv_where ')' INTO lv_where SEPARATED BY space.

    SELECT a~matnr a~werks b~budat a~charg a~lgort a~umlgo
           a~aufnr
           a~menge a~meins a~bwart b~cpudt b~cputm
           c~matkl c~mtart c~zzancho c~zzgramaje
        INTO TABLE lt_mseg
        FROM mseg AS a
        INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
        AND b~mjahr = a~mjahr )
        INNER JOIN mara AS c ON c~matnr = a~matnr
        WHERE a~matnr IN smatnr
        AND a~werks = pwerks
*                  AND b~budat IN sbudat
        AND a~charg IN scharg
        AND a~lgort = '4002'
        AND a~aufnr IN saufnr
        AND ( a~bwart = '311' OR a~bwart = '101' )
        AND (lv_where). " Añadir la condición construida a partir de los turnos seleccionados

  ENDIF.

  LOOP AT lt_mseg INTO lw_mseg.
    CLEAR lw_datos.
    lw_datos-matnr = lw_mseg-matnr.
    SELECT SINGLE maktx INTO lw_datos-maktx
        FROM  makt
        WHERE matnr = lw_mseg-matnr
        AND   spras = sy-langu.

    lw_datos-werks = lw_mseg-werks.
    lw_datos-matkl = lw_mseg-matkl.
    lw_datos-mtart = lw_mseg-mtart.
    lw_datos-zzancho = lw_mseg-zzancho.
    lw_datos-zzgramaje = lw_mseg-zzgramaje.

    lw_datos-budat = lw_mseg-budat.
    lw_datos-charg = lw_mseg-charg.
    lw_datos-aufnr = lw_mseg-aufnr.
    lw_datos-menge = lw_mseg-menge.
    lw_datos-meins = lw_mseg-meins.
    lw_datos-bwart = lw_mseg-bwart.
    lw_datos-lgort = lw_mseg-lgort.
    lw_datos-lgort_origen = lw_mseg-umlgo.

    IF lw_mseg-aufnr IS NOT INITIAL.
      SELECT SINGLE zzebeln1 zzebelp1 zzkunnr1
          INTO lw_aufk
          FROM aufk
          WHERE aufnr = lw_mseg-aufnr.
      IF sy-subrc = 0.
        lw_datos-vbeln = lw_aufk-zzebeln1.
        lw_datos-posnr = lw_aufk-zzebelp1.
        lw_datos-kunnr = lw_aufk-zzkunnr1.
        SELECT SINGLE name1 INTO lw_datos-name1
            FROM kna1
            WHERE kunnr = lw_datos-kunnr.
      ENDIF.

      CHECK lw_datos-vbeln IN svbeln.
      CHECK lw_datos-kunnr IN skunnr.
    ENDIF.

*---> INI SS - SAT 7*12686
*Caracteristicas motivo rechazo pulper
    IF lw_datos-charg IS NOT INITIAL.
      PERFORM obtener_clasificacion_pulp CHANGING lw_datos.
    ENDIF.
*<--- FIN

*** Caracteristica de bobina
*    IF lw_datos-charg IS NOT INITIAL.
*      PERFORM obtener_clasificacion_bob CHANGING lw_datos.
*    ENDIF.

    " Hora y Turno:
    lw_datos-cputm = lw_mseg-cputm.
    lw_datos-cpudt = lw_mseg-cpudt.

    IF ( lw_datos-cputm >= '060000' AND lw_datos-cputm <= '135959' ).
      lw_datos-turno = 'T1'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '140000' AND lw_datos-cputm <= '215959' ).
      lw_datos-turno = 'T2'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '220000' AND lw_datos-cputm <= '235959' ).
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSE.
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-budat - 1.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ENDIF.

    " Descripción grupo artículos:
    SELECT SINGLE wgbez60 INTO lw_datos-wgbez60
      FROM t023t
      WHERE spras = sy-langu
      AND matkl = lw_datos-matkl.

    CONDENSE lw_datos-wgbez60.

    lw_datos-contador = 1.
    IF lw_datos-bwart EQ '102' OR lw_datos-bwart EQ '312'.
      lw_datos-contador = -1.
    ENDIF.


***   Puesto de trabajo, sino está en la característica de la BOBINA
*    IF lw_datos-ptrabajo IS INITIAL.
*      SELECT SINGLE arbpl INTO lv_arbpl
*         FROM crhd AS c
*         INNER JOIN afru AS a ON ( c~objid = a~arbid )
*         WHERE a~aufnr = lw_datos-aufnr
*         AND   c~werks = lw_datos-werks.
*      IF sy-subrc = 0.
*        lw_datos-ptrabajo = lv_arbpl.
*      ENDIF.
*    ENDIF.
*
    APPEND lw_datos TO gt_entradas.
  ENDLOOP.

ENDFORM.                    " SELEC_MAT_PULP


*&---------------------------------------------------------------------*
*&      Form  OBTENER_CLASIFICACION_PULP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM obtener_clasificacion_pulp  CHANGING pw_datos TYPE zepp_entradas_produccion.

  DATA l_objkey TYPE objnum.
  DATA lt_allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num WITH HEADER LINE.
  DATA lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char WITH HEADER LINE.
  DATA lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr WITH HEADER LINE.
  DATA lt_return TYPE STANDARD TABLE OF bapiret2.

  CONCATENATE pw_datos-matnr pw_datos-charg INTO l_objkey.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_objkey
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA_PULPER'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_allocvaluesnum
      allocvalueschar = lt_allocvalueschar
      allocvaluescurr = lt_allocvaluescurr
      return          = lt_return.

  READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
  CHECK sy-subrc <> 0.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_DIAMETRO'.
  IF sy-subrc = 0.
    pw_datos-diametro = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-diametro_un = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-diametro_un = 'MM'.
    ENDIF.
  ENDIF.

*  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_HUMEDAD'.
*  IF sy-subrc = 0.
*    pw_datos-humedad = lt_allocvaluesnum-value_from.
*  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_PESO'.
  IF sy-subrc = 0.
    pw_datos-brgew = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-gewei = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-gewei = 'kg'.
    ENDIF.
  ENDIF.

  " Longitud:
  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_LONGITUD_B'.
  IF sy-subrc = 0.
    pw_datos-laeng = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-meabm = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-meabm = 'M'.
    ENDIF.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_FSC_PORCENTAJE'.
  IF sy-subrc = 0.
    pw_datos-fsc = lt_allocvaluesnum-value_from.
  ENDIF.

* GST - 30/09/2015 - Motivo rechazo PULPER ->

  " Motivo rechazo PULPER:
  READ TABLE lt_allocvalueschar WITH KEY charact = 'ZPPI_MOTIVO_RECHAZO'.
  IF sy-subrc = 0.
    pw_datos-motiv_pulper = lt_allocvalueschar-value_char.
* GST - 22/10/2015 - Motivo rechazo SCADA ->
  ELSE.
    READ TABLE lt_allocvalueschar WITH KEY charact = 'Z_MOTIVO_RECHAZO'.
    IF sy-subrc = 0.
      pw_datos-motiv_pulper = lt_allocvalueschar-value_char.
    ENDIF.
* GST - 22/10/2015 - Motivo rechazo SCADA <-
  ENDIF.

  READ TABLE lt_allocvalueschar WITH KEY charact = 'ZPPI_MOTIVO_REMANIPULADO'.
  IF sy-subrc = 0.
    pw_datos-motiv_remanip = lt_allocvalueschar-value_char.
  ENDIF.
* GST - 30/09/2015 - Motivo rechazo PULPER <-
* uDefine - añadir lote origen
  READ TABLE lt_allocvalueschar
         WITH KEY charact = 'Z_LOTE_ORIGEN'.

  IF sy-subrc = 0.
    pw_datos-charg_origen = lt_allocvalueschar-value_neutral.
  ENDIF.

ENDFORM.                    " OBTENER_CLASIFICACION_PULP
*&---------------------------------------------------------------------*
*&      Form  SELEC_REMANIPULADO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM selec_remanipulado .

  DATA lw_datos TYPE zepp_entradas_produccion.
  DATA: BEGIN OF lt_mseg OCCURS 0,
          matnr     TYPE matnr,
          werks     TYPE werks_d,
          budat     TYPE budat,
          charg     TYPE charg_d,
          lgort     TYPE lgort_d,
          umlgo     TYPE lgort_d,
          aufnr     TYPE aufnr,
          menge     TYPE menge_d,
          meins     TYPE meins,
          bwart     TYPE bwart,
          cpudt     TYPE cpudt,
          cputm     TYPE cputm,
          matkl     TYPE matkl,
          mtart     TYPE mtart,
          zzancho   TYPE zancho,
          zzgramaje TYPE zgramaje,
        END OF lt_mseg.

*>>> 05.09.2016 YTG Reducir la cantidad de campos en la tabla interna a solo los que se usan (Rendimiento)
  DATA: BEGIN OF lw_aufk,
          zzebeln1 TYPE aufk-zzebeln1,
          zzebelp1 TYPE aufk-zzebelp1,
          zzkunnr1 TYPE aufk-zzkunnr1,
        END OF lw_aufk.

  DATA: lw_mseg LIKE LINE OF lt_mseg.
*  DATA lw_aufk TYPE aufk.
  DATA lv_where TYPE string.
  DATA lv_arbpl TYPE arbpl.
  DATA: lv_object TYPE objnum.
  DATA: it_objectdata TYPE STANDARD TABLE OF clobjdat,
        it_class      TYPE STANDARD TABLE OF sclass,
        ls_objectdata TYPE                   clobjdat.


  CLEAR: lt_mseg.
  REFRESH: lt_mseg.

  CLEAR lv_where.
  IF p_t1 = 'X'.
*    lv_where = '( b~cputm IN so_h_t1'.
    lv_where = '( ( b~cputm IN so_h_t1  AND b~budat IN sbudat )'.
  ENDIF.

  IF p_t2 = 'X'.
    IF lv_where IS INITIAL.
*      lv_where = '( b~cputm IN so_h_t2'.
      lv_where = '( ( b~cputm IN so_h_t2 AND b~budat IN sbudat )'.
    ELSE.
      CONCATENATE lv_where 'OR ( b~cputm IN so_h_t2 AND b~budat IN sbudat )' INTO lv_where SEPARATED BY space.
    ENDIF.
  ENDIF.

  IF p_t3 = 'X'.

    IF so_h_t3[] IS INITIAL.

      IF lv_where IS INITIAL.
        lv_where = '( ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )' INTO lv_where SEPARATED BY space.
      ENDIF.
    ELSE.

      IF lv_where IS INITIAL.
        lv_where = '( ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) OR ( b~budat <> gv_d_t3_ini AND b~budat <> gv_d_t3_fin AND b~budat IN sbudat AND b~cputm IN so_h_t3 ) )'.
      ELSE.
        CONCATENATE lv_where 'OR ( ( b~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR ( b~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin )'
        'OR ( b~budat <> gv_d_t3_ini AND b~budat <> gv_d_t3_fin AND b~budat IN sbudat AND b~cputm IN so_h_t3 ) )'
        INTO lv_where SEPARATED BY space.
      ENDIF.

    ENDIF.

  ENDIF.

* Comprobar que lv_where no esté vacío, para saber que al menos se ha seleccionado un turno

  IF lv_where IS NOT INITIAL.

    CONCATENATE lv_where ')' INTO lv_where SEPARATED BY space.

    SELECT a~matnr a~werks b~budat a~charg a~lgort a~umlgo
           a~aufnr
           a~menge a~meins a~bwart b~cpudt b~cputm
           c~matkl c~mtart c~zzancho c~zzgramaje
      INTO TABLE lt_mseg
      FROM mseg AS a
      INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
      AND b~mjahr = a~mjahr )
      INNER JOIN mara AS c ON c~matnr = a~matnr
      WHERE a~matnr IN smatnr
      AND a~werks = pwerks
      AND a~charg IN scharg
      AND a~lgort IN slgort
      AND a~aufnr IN saufnr
      AND  a~bwart = '551'
      AND c~matkl IN smatkl
      AND (lv_where). " Añadir la condición construida a partir de los turnos seleccionados
  ENDIF.

  LOOP AT lt_mseg INTO lw_mseg.
    CLEAR lw_datos.
    lw_datos-matnr = lw_mseg-matnr.
    SELECT SINGLE maktx INTO lw_datos-maktx FROM makt
      WHERE matnr = lw_mseg-matnr
        AND spras = sy-langu.

    lw_datos-werks = lw_mseg-werks.
    lw_datos-matkl = lw_mseg-matkl.
    lw_datos-mtart = lw_mseg-mtart.
    lw_datos-zzancho = lw_mseg-zzancho.
    lw_datos-zzgramaje = lw_mseg-zzgramaje.

    lw_datos-budat = lw_mseg-budat.
    lw_datos-charg = lw_mseg-charg.
    lw_datos-aufnr = lw_mseg-aufnr.
    lw_datos-menge = lw_mseg-menge.
    lw_datos-meins = lw_mseg-meins.
    lw_datos-bwart = lw_mseg-bwart.
    lw_datos-lgort = lw_mseg-lgort.

    lw_datos-lgort_origen = lw_mseg-umlgo.

    IF lw_mseg-aufnr IS NOT INITIAL.
      SELECT SINGLE zzebeln1 zzebelp1 zzkunnr1
          INTO lw_aufk FROM aufk
          WHERE aufnr = lw_mseg-aufnr.

      IF sy-subrc = 0.
        lw_datos-vbeln = lw_aufk-zzebeln1.
        lw_datos-posnr = lw_aufk-zzebelp1.
        lw_datos-kunnr = lw_aufk-zzkunnr1.

        SELECT SINGLE name1 INTO lw_datos-name1 FROM kna1 WHERE kunnr = lw_datos-kunnr.
      ENDIF.

      CHECK lw_datos-vbeln IN svbeln.
      CHECK lw_datos-kunnr IN skunnr.
    ENDIF.

    IF lw_datos-charg IS NOT INITIAL.
      PERFORM obtener_clasificacion_bob CHANGING lw_datos.
    ENDIF.

    " Hora y Turno:
    lw_datos-cputm = lw_mseg-cputm.
    lw_datos-cpudt = lw_mseg-cpudt.

    IF ( lw_datos-cputm >= '060000' AND lw_datos-cputm <= '135959' ).
      lw_datos-turno = 'T1'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '140000' AND lw_datos-cputm <= '215959' ).
      lw_datos-turno = 'T2'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '220000' AND lw_datos-cputm <= '235959' ).
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ELSE.
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-budat.
*      lw_datos-fec_prod = lw_datos-cpudt.
    ENDIF.

    " Descripción grupo artículos:
    SELECT SINGLE wgbez60 INTO lw_datos-wgbez60
        FROM t023t
        WHERE spras = sy-langu
        AND matkl = lw_datos-matkl.
    CONDENSE lw_datos-wgbez60.

    lw_datos-contador = 1.
    IF lw_datos-bwart EQ '102' OR lw_datos-bwart EQ '312'.
      lw_datos-contador = -1.
    ENDIF.


*   Puesto de trabajo, sino está en la característica de la BOBINA
    IF lw_datos-ptrabajo IS INITIAL.
      SELECT SINGLE arbpl INTO lv_arbpl
         FROM crhd AS c
         INNER JOIN afru AS a ON ( c~objid = a~arbid )
         WHERE a~aufnr = lw_datos-aufnr
         AND   c~werks = lw_datos-werks.
      IF sy-subrc = 0.
        lw_datos-ptrabajo = lv_arbpl.
      ENDIF.
    ENDIF.

    APPEND lw_datos TO gt_entradas.
  ENDLOOP.

ENDFORM.                    " SELEC_REMANIPULADO


*&---------------------------------------------------------------------*
*&      Form  BUSCAR_VARIANTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_PVARI  text
*----------------------------------------------------------------------*
FORM buscar_variante  CHANGING p_vari TYPE disvariant-variant.

  DATA: ls_variant TYPE disvariant,
        l_exit     TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
*     it_default_fieldcat =
    IMPORTING
      e_exit     = l_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 2.
  IF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    IF l_exit EQ space.
      p_vari = ls_variant-variant.
    ENDIF.
  ENDIF.

ENDFORM.                    " BUSCAR_VARIANTE


*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion .

  SELECT SINGLE parva FROM usr05
        INTO pwerks
        WHERE bname = sy-uname AND
        parid = 'WRK'.

ENDFORM.                    " INICIALIZACION
