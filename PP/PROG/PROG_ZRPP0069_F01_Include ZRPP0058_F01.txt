*----------------------------------------------------------------------*
***INCLUDE ZRPP0058_F01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos .

  SELECT ekko~ebeln , ekko~bukrs , ekko~lifnr , ekko~waers , ekko~bsart , ekko~bstyp , ekko~knumv ,
         ekpo~netwr , ekpo~menge , ekpo~meins , ekpo~werks , ekpo~lgort , ekpo~txz01 , ekpo~matnr , ekpo~ebelp ,
         ztmm0006~bldat , ztmm0006~budat , ztmm0006~zcontabilizado , ztmm0006~zmatricula1,
         ztmm0006~zmatricula2 , ztmm0006~zhumedad , ztmm0006~zentrada , ztmm0006~zptorec,
         t001w~stras AS stras_cen,  t001w~pstlz AS pstlz_cen,  t001w~ort01  AS ort01_cen,
         lfa1~stras  AS stras_prov, lfa1~pstlz  AS pstlz_prov, lfa1~ort01   AS ort01_prov, lfa1~zzadd_info, lfa1~adrnr,
         ekpo~infnr
    INTO TABLE @DATA(lt_datos_rec)
    FROM ekko INNER JOIN ekpo INNER JOIN t001w ON t001w~werks = ekpo~werks
              ON ekpo~ebeln      = ekko~ebeln
              INNER JOIN ztmm0006 ON ztmm0006~ebeln = ekpo~ebeln
              INNER JOIN lfa1 ON lfa1~lifnr = ekko~lifnr
    WHERE ekko~bukrs                  = @p_werks
         AND ekko~ebeln               IN @sp$00001
         AND ekko~lifnr               IN @sp$00003
         AND ztmm0006~bldat           IN @sp$00004
         AND ztmm0006~budat           IN @sp$00005
         AND ztmm0006~zcontabilizado  IN @sp$00006.


  IF lt_datos_rec IS NOT INITIAL.
    SELECT *
      INTO TABLE @DATA(tl_vtadd04t)
      FROM vtadd04t
      FOR ALL ENTRIES IN @lt_datos_rec
      WHERE add_info = @lt_datos_rec-zzadd_info AND
            spras    = @sy-langu.

    SELECT addrnumber, smtp_addr
      INTO TABLE @DATA(tl_adr6_prov)
      FROM adr6
      FOR ALL ENTRIES IN @lt_datos_rec
      WHERE addrnumber = @lt_datos_rec-adrnr AND
            date_from <= @sy-datum.

    SELECT infnr, urzzt
      INTO TABLE @DATA(tl_eina)
      FROM eina
      FOR ALL ENTRIES IN @lt_datos_rec
      WHERE infnr = @lt_datos_rec-infnr.
  ENDIF.

  LOOP AT lt_datos_rec INTO DATA(ls_recort).
    APPEND INITIAL LINE TO gt_datos ASSIGNING FIELD-SYMBOL(<fs_rec>).
    <fs_rec>-ebeln            = ls_recort-ebeln .
    <fs_rec>-bukrs            = ls_recort-bukrs .
    <fs_rec>-lifnr            = ls_recort-lifnr .
    <fs_rec>-waers            = ls_recort-waers .
    <fs_rec>-waers002         = <fs_rec>-waers .
    <fs_rec>-bsart            = ls_recort-bsart .
    <fs_rec>-netwr            = ls_recort-netwr .
    <fs_rec>-waers001         = ls_recort-waers .
    <fs_rec>-menge            = ls_recort-menge .
    <fs_rec>-meins            = ls_recort-meins .
    <fs_rec>-meins001         = ls_recort-meins .
    <fs_rec>-werks            = ls_recort-werks .
    <fs_rec>-lgort            = ls_recort-lgort .
    <fs_rec>-txz01            = ls_recort-txz01 .
    <fs_rec>-matnr            = ls_recort-matnr .
    <fs_rec>-ebelp            = ls_recort-ebelp .
    <fs_rec>-bldat            = ls_recort-bldat .
    <fs_rec>-budat            = ztmm0006-budat .
    <fs_rec>-zcontabilizado   = ls_recort-zcontabilizado .
    <fs_rec>-zmatricula1      = ls_recort-zmatricula1 .
    <fs_rec>-zmatricula2      = ls_recort-zmatricula2 .
    <fs_rec>-zhumedad         = ls_recort-zhumedad .
    <fs_rec>-zptorec          = ls_recort-zptorec .

    <fs_rec>-text_ekko_bukrs = zcl_utils_hpap_pp=>get_descrip_werks( <fs_rec>-bukrs ) .

    <fs_rec>-stras_cen  = ls_recort-stras_cen.
    <fs_rec>-pstlz_cen  = ls_recort-pstlz_cen.
    <fs_rec>-ort01_cen  = ls_recort-ort01_cen.
    <fs_rec>-stras_prov = ls_recort-stras_prov.
    <fs_rec>-pstlz_prov = ls_recort-pstlz_prov.
    <fs_rec>-ort01_prov = ls_recort-ort01_prov.
    <fs_rec>-zzadd_info = ls_recort-zzadd_info.



    SELECT SINGLE  znum_pesada
      INTO @<fs_rec>-znum_pesada
      FROM ztmm0007
      WHERE zentrada = @ls_recort-zentrada.

    SELECT SINGLE kbetr , kwert , lifnr , waers
      INTO (@<fs_rec>-kbetr, @<fs_rec>-kwert, @<fs_rec>-tdlnr , @<fs_rec>-waerk) "UP TO 1 ROWS
      FROM konv
      WHERE knumv EQ @ls_recort-knumv
        AND kposn EQ @ls_recort-ebelp
        AND kschl EQ 'ZFC1'.

    IF sy-subrc <> 0.
      SELECT SINGLE kbetr , kwert , lifnr , waers
        INTO (@<fs_rec>-kbetr, @<fs_rec>-kwert, @<fs_rec>-tdlnr , @<fs_rec>-waerk) "UP TO 1 ROWS
        FROM konv
        WHERE knumv EQ @ls_recort-knumv
          AND kposn EQ @ls_recort-ebelp
          AND kschl EQ 'ZFR1'.
    ENDIF.


    <fs_rec>-text_ekko_lifnr = zcl_utils_hpap_pp=>get_descrip_proveedor( <fs_rec>-lifnr ) .
    <fs_rec>-zimp_total      = <fs_rec>-netwr + <fs_rec>-kwert.

    IF <fs_rec>-tdlnr IS NOT INITIAL.
      <fs_rec>-namet         = zcl_utils_hpap_pp=>get_descrip_proveedor( <fs_rec>-tdlnr ) .
    ENDIF.

    IF NOT <fs_rec>-tdlnr IN sp$00008.
      CLEAR  <fs_rec>.
      CONTINUE.
    ENDIF.

    SELECT SINGLE belnr , gjahr
       INTO @DATA(ls_ekbe)
         FROM ekbe WHERE ebeln = @ls_recort-ebeln
                     AND ebelp = @ls_recort-ebelp
                     AND vgabe = '1'.

    IF sy-subrc NE 0.
      CLEAR: <fs_rec>-xblnr ,
             <fs_rec>-bldat,
             <fs_rec>-budat ,
             <fs_rec>-frbnr.
    ELSE.
      SELECT SINGLE xblnr , bldat , budat , frbnr
        INTO (@<fs_rec>-xblnr ,
              @<fs_rec>-bldat ,
              @<fs_rec>-budat ,
              @<fs_rec>-frbnr)
        FROM mkpf
            WHERE mblnr = @ls_ekbe-belnr
              AND mjahr = @ls_ekbe-gjahr.

      IF sy-subrc = 0.
        SELECT COUNT( * )
          INTO @DATA(l_numbalas)
          FROM ekbe WHERE ebeln = @ls_recort-ebeln
                      AND ebelp = @ls_recort-ebelp
                      AND vgabe = '1'.
        <fs_rec>-nbalas = l_numbalas.
      ENDIF.
    ENDIF.

* Descripción del punto de recogida.
    IF <fs_rec>-zptorec IS NOT INITIAL.

      SELECT SINGLE zzptorecdes
        INTO @<fs_rec>-desc_zpto_rec
        FROM ztmm0021
        WHERE zzptorec = @<fs_rec>-zptorec AND
              loevm    = @abap_false.

    ENDIF.


    READ TABLE tl_vtadd04t ASSIGNING FIELD-SYMBOL(<fs_vtadd04t>) WITH KEY add_info = <fs_rec>-zzadd_info.
    IF sy-subrc = 0.
      <fs_rec>-desc_tipo_camion = <fs_vtadd04t>-bezei.
    ENDIF.

    READ TABLE tl_adr6_prov ASSIGNING FIELD-SYMBOL(<fs_adr6_prov>) WITH KEY addrnumber = ls_recort-adrnr.
    IF sy-subrc = 0.
      <fs_rec>-email_prov = <fs_adr6_prov>-smtp_addr.
    ENDIF.

    READ TABLE tl_eina ASSIGNING FIELD-SYMBOL(<fs_eina>) WITH KEY infnr = ls_recort-infnr.
    IF sy-subrc = 0.
      <fs_rec>-cod_ler = <fs_eina>-urzzt.
    ENDIF.
  ENDLOOP.



  IF gt_datos IS NOT INITIAL.
    SELECT lfa1~lifnr AS tdlnr, adr6~addrnumber, adr6~smtp_addr
      INTO TABLE @DATA(tl_adr6_trans)
      FROM lfa1 INNER JOIN adr6 ON adr6~addrnumber = lfa1~adrnr
      FOR ALL ENTRIES IN @gt_datos
      WHERE lfa1~lifnr = @gt_datos-tdlnr AND
            adr6~date_from <= @sy-datum.

    LOOP AT gt_datos ASSIGNING FIELD-SYMBOL(<fs_datos>).
      READ TABLE tl_adr6_trans ASSIGNING FIELD-SYMBOL(<fs_adr6_trans>) WITH KEY tdlnr = <fs_datos>-tdlnr.
      IF sy-subrc = 0.
        <fs_datos>-email_trans = <fs_adr6_prov>-smtp_addr.
      ENDIF.
    ENDLOOP.

  ENDIF.










* Borrar lineas anuladas por el filtro de Transportista.
  DELETE  gt_datos WHERE werks IS INITIAL.

ENDFORM.


FORM mostrar_datos.

  DATA: lr_functions TYPE REF TO cl_salv_functions_list,
        lo_column2   TYPE REF TO cl_salv_column_table,

        lo_column    TYPE REF TO cl_salv_column,
        lo_columns   TYPE REF TO cl_salv_columns_table.

  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = gr_alv
        CHANGING
          t_table      = gt_datos ).
    CATCH cx_salv_msg.                                  "#EC NO_HANDLER
  ENDTRY.

  DATA(gr_layout) = gr_alv->get_layout( ).
  key-report = sy-repid.
  gr_layout->set_key( key ).
  gr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  gr_layout->set_default( abap_true ).

  IF p_lay IS NOT INITIAL.
    TRY.
        gr_layout->set_initial_layout( p_lay ).
      CATCH cx_root .
    ENDTRY.
  ENDIF.

  lo_columns = gr_alv->get_columns( ).

  TRY.

      lo_column ?= lo_columns->get_column( 'ZPTOREC' ).
      lo_column->set_short_text( 'Pto.recog.' ).
      lo_column->set_medium_text( 'Punto recogida' ).
      lo_column->set_long_text( 'Punto recogida' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'DESC_ZPTO_REC' ).
      lo_column->set_short_text( 'D.pto.rec.' ).
      lo_column->set_medium_text( 'Desc. pto.recogida' ).
      lo_column->set_long_text( 'Desc. punto recogida' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'ZIMP_TOTAL' ).
      lo_column->set_short_text( 'Neto+Porte' ).
      lo_column->set_medium_text( 'Imp.tot.neto+porte' ).
      lo_column->set_long_text( 'Imp. total neto + porte' ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column ?= lo_columns->get_column( 'NAMET' ).
      lo_column->set_short_text( 'Nom.Transp' ).
      lo_column->set_medium_text( 'Nom. Transportista' ).
      lo_column->set_long_text( 'Nombre Transportista' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'NBALAS' ).
      lo_column->set_short_text( 'Num. BALAS' ).
      lo_column->set_medium_text( 'Num. BALAS' ).
      lo_column->set_long_text( 'Número de BALAS' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'ZMATRICULA2' ).
      lo_column->set_short_text( 'Remolque' ).
      lo_column->set_medium_text( 'Remolque' ).
      lo_column->set_long_text( 'Remolque' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'XBLNR' ).
      lo_column->set_short_text( 'Nº albarán' ).
      lo_column->set_medium_text( 'Nº albarán' ).
      lo_column->set_long_text( 'Nº albarán' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'FRBNR' ).
      lo_column->set_short_text( 'Nºcar.port' ).
      lo_column->set_medium_text( 'Nº de carta portes' ).
      lo_column->set_long_text( 'Nº de carta de portes' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'TDLNR' ).
      lo_column->set_short_text( 'Transport.' ).
      lo_column->set_medium_text( 'Transportista' ).
      lo_column->set_long_text( 'Transportista' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'NAMET' ).
      lo_column->set_short_text( 'Nom.Trans.' ).
      lo_column->set_medium_text( 'Nombre Transportista' ).
      lo_column->set_long_text( 'Nombre Transportista' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'KBETR' ).
      lo_column->set_short_text( 'Imp. porte' ).
      lo_column->set_medium_text( 'Importe del porte' ).
      lo_column->set_long_text( 'Importe del porte' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'KG_CONSU_MP' ).
      lo_column->set_short_text( ' ' ).
      lo_column->set_medium_text( ' ' ).
      lo_column->set_long_text( ' ' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'MATNR_MP' ).
      lo_column->set_short_text( 'Mat. MP' ).
      lo_column->set_medium_text( 'Material MP' ).
      lo_column->set_long_text( 'Material MP' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'UNI_CONSU_MP' ).
      lo_column->set_short_text( 'UMB' ).
      lo_column->set_medium_text( 'UMB' ).
      lo_column->set_long_text( 'UMB' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'DESCRIP_REC' ).
      lo_column->set_short_text( 'Desc. rec' ).
      lo_column->set_medium_text( 'Desc. receta' ).
      lo_column->set_long_text( 'Desc. receta' ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column ?= lo_columns->get_column( 'ZCALIDAD' ).
      lo_column->set_short_text( 'Calidad' ).
      lo_column->set_medium_text( 'Calidad' ).
      lo_column->set_long_text( 'Calidad' ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column ?= lo_columns->get_column( 'FECHA_CON_PUL_261' ).
      lo_column->set_short_text( 'F.consumo' ).
      lo_column->set_medium_text( 'Fecha consumo' ).
      lo_column->set_long_text( 'Fecha consumo' ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column ?= lo_columns->get_column( 'HORA_CON_PUL_261' ).
      lo_column->set_short_text( 'H.consumo' ).
      lo_column->set_medium_text( 'Hora consumo' ).
      lo_column->set_long_text( 'Hora consumo' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'FECHA_TRAS_PUL_311' ).
      lo_column->set_short_text( 'F. pulper' ).
      lo_column->set_medium_text( 'Fecha pulper' ).
      lo_column->set_long_text( 'Fecha pulper' ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column ?= lo_columns->get_column( 'HORA_TRAS_PUL_311' ).
      lo_column->set_short_text( 'H. pulper' ).
      lo_column->set_medium_text( 'Hora pulper' ).
      lo_column->set_long_text( 'Hora pulper' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'LIFNR' ).
      lo_column->set_short_text( 'Proveedor' ).
      lo_column->set_medium_text( 'Proveedor' ).
      lo_column->set_long_text( 'Proveedor' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'NAME1_GP' ).
      lo_column->set_short_text( 'Nom. prov.' ).
      lo_column->set_medium_text( 'Nombre proveedor' ).
      lo_column->set_long_text( 'Nombre proveedor' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'BUDAT' ).
      lo_column->set_short_text( 'F. compra' ).
      lo_column->set_medium_text( 'Fecha compra' ).
      lo_column->set_long_text( 'Fecha compra' ).

    CATCH cx_root .
  ENDTRY.


*  gr_column->set_alignment( if_salv_c_alignment=>right ).

*-- events
  gr_events = gr_alv->get_event( ).
  CREATE OBJECT event_handler.
*  SET HANDLER event_handler->on_user_command FOR gr_events.
*  SET HANDLER event_handler->on_link_click FOR gr_events.

**... §3.1 activate ALV generic Functions
  lr_functions = gr_alv->get_functions( ).
  lr_functions->set_all( 'X' ).

*-- Selection
*  gr_selections = gr_alv->get_selections( ).
*  gr_selections->set_selection_mode(
*                     if_salv_c_selection_mode=>row_column ).

  DATA:   lo_cols_tab TYPE REF TO cl_salv_columns_table.

  lo_cols_tab = gr_alv->get_columns( ).
  lo_cols_tab->set_optimize( ).
*  TRY.
*      lo_cols_tab->set_color_column( 'COLOR' ).
*
*    CATCH cx_salv_data_error.                           "#EC NO_HANDLER
*  ENDTRY.


  gr_alv->display( ).

ENDFORM.

FORM buscar_variante  CHANGING p_vari TYPE disvariant-variant.

  DATA: ls_variant TYPE disvariant,
        l_exit     TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
*     it_default_fieldcat =
    IMPORTING
      e_exit     = l_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 2.
  IF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    IF l_exit EQ space.
      p_vari = ls_variant-variant.
    ENDIF.
  ENDIF.

ENDFORM.                    " BUSCAR_VARIANTE
