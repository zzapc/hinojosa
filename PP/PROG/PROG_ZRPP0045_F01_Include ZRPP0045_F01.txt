*&---------------------------------------------------------------------*
*&  Include           ZRPP0045_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBTENER_RECETAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_recetas .

  DATA: t_plko  TYPE STANDARD TABLE OF plko,
        wa_plko TYPE plko.

  DATA: lv_object          TYPE bapi1003_key-object,
        t_allocvaluesnum   TYPE TABLE OF bapi1003_alloc_values_num,
        t_allocvalueschar  TYPE TABLE OF bapi1003_alloc_values_char,
        wa_allocvalueschar TYPE bapi1003_alloc_values_char,
        t_allocvaluescurr  TYPE TABLE OF bapi1003_alloc_values_curr,
        t_return           TYPE TABLE OF bapiret2.

  DATA: lv_z_centro TYPE atwrt,
        lv_z_linea  TYPE atwrt,
        lv_z_modo   TYPE atwrt.

  DATA: lv_werks TYPE werks_d,
        lv_linea TYPE zlinea,
        lv_modo	 TYPE zmodo.

  DATA:  num_lines    TYPE sy-tabix,
         lv_matnr     TYPE matnr,
         lv_zzgrampla TYPE mara-zzgrampla,
         lv_gramaje   TYPE zzgramaje,
         lv_mtart     TYPE mtart.

  DATA: wa_ztpp0021 TYPE ztpp0021,
        wa_ztpp0019 TYPE ztpp0019.

  TYPES: BEGIN OF tipo_matnr,
           matnr TYPE matnr.
  TYPES: END OF tipo_matnr.
  TYPES: tty_matnr TYPE TABLE OF tipo_matnr.
  DATA: lt_matnr TYPE tty_matnr,
        wa_matnr TYPE LINE OF tty_matnr.

*  DATA: lt_marm TYPE STANDARD TABLE OF marm,
*        wa_marm TYPE marm,
*        lv_peso TYPE brgew.


* recuperamos los gramajes
  SELECT * FROM ztpp0022
    INTO TABLE t_gramajes.

* recuperamos las Hoja de ruta
  SELECT * FROM plko
    INTO TABLE t_plko
    WHERE plnty = '2' AND
          werks = p_werks.

  CLEAR: gt_tiempos, gt_mostrar.
  REFRESH: gt_tiempos, gt_mostrar.

  LOOP AT t_plko INTO wa_plko.

    IF wa_plko-statu <> '4'.
*     receta con estatus no liberado. Indicaremos la receta afectada e indicaremos que ésta no se cargará en el ALV.
    ELSE.
      CLEAR: lt_matnr, num_lines, lv_matnr, lv_zzgrampla.
      REFRESH: lt_matnr.

      SELECT matnr FROM mapl
        INTO TABLE lt_matnr
        WHERE werks = wa_plko-werks AND
              plnty = wa_plko-plnty AND
              plnnr = wa_plko-plnnr AND
              plnal = wa_plko-plnal.

      DESCRIBE TABLE lt_matnr LINES num_lines.
      IF num_lines > 1.
*      error: LA HOJA DE RUTA & TIENE MÁS DE UN MATERIAL ASIGNADO.
      ELSE.
        CLEAR: lv_zzgrampla, lv_gramaje, lv_mtart, lv_matnr.

*       obtenemos el gramaje de la plancha
        READ TABLE lt_matnr INTO wa_matnr INDEX 1.

        SELECT SINGLE zzgrampla mtart FROM mara
          INTO ( lv_zzgrampla, lv_mtart )
          WHERE matnr = wa_matnr-matnr.

        IF lv_mtart <> 'ZPLP'.
*       indicamos la receta afectada e indicaremos que ésta no se cargará en el ALV.
        ELSE.

          lv_gramaje = lv_zzgrampla.

*         obtenemos las caracteristicas centro, linea y modo
          CLEAR: lv_object, t_allocvaluesnum, t_allocvalueschar, t_allocvaluescurr,
                 t_return, lv_werks, lv_linea, lv_modo, lv_z_centro,
                 lv_z_linea, lv_z_modo.

          REFRESH: t_allocvaluesnum, t_allocvalueschar, t_allocvaluescurr,
                 t_return.

          CONCATENATE wa_plko-plnty wa_plko-plnnr wa_plko-plnal INTO lv_object.

          CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
            EXPORTING
              objectkey       = lv_object
              objecttable     = 'PLKO'
              classnum        = 'Z_RECETAS_CIP'
              classtype       = '018'
*             KEYDATE         = SY-DATUM
*             UNVALUATED_CHARS       = ' '
*             LANGUAGE        = SY-LANGU
*           IMPORTING
*             STATUS          =
*             STANDARDCLASS   =
            TABLES
              allocvaluesnum  = t_allocvaluesnum
              allocvalueschar = t_allocvalueschar
              allocvaluescurr = t_allocvaluescurr
              return          = t_return.

          READ TABLE t_allocvalueschar INTO wa_allocvalueschar WITH KEY charact = 'Z_CENTRO'.
          IF sy-subrc = 0.
            lv_z_centro = wa_allocvalueschar-value_char.
            WRITE lv_z_centro TO lv_werks.
          ENDIF.

          READ TABLE t_allocvalueschar INTO wa_allocvalueschar WITH KEY charact = 'Z_LINEA'.
          IF sy-subrc = 0.
            lv_z_linea = wa_allocvalueschar-value_char.
            WRITE lv_z_linea TO lv_linea.
          ENDIF.

          CHECK lv_linea = p_linea.

          READ TABLE t_allocvalueschar INTO wa_allocvalueschar WITH KEY charact = 'Z_MODO'.
          IF sy-subrc = 0.
            lv_z_modo = wa_allocvalueschar-value_char.
            WRITE lv_z_modo TO lv_modo.
          ENDIF.

          CHECK lv_modo = p_modo.


**         obtenemos el peso del material
*          CLEAR: lt_marm, lv_peso.
*          REFRESH: lt_marm.
*          SELECT * FROM marm
*            INTO TABLE lt_marm
*            WHERE matnr = wa_matnr-matnr.
*
*          READ TABLE lt_marm INTO wa_marm WITH KEY meinh = 'GR'.
*          IF sy-subrc <> 0.
*            READ TABLE lt_marm INTO wa_marm WITH KEY meinh = 'KG'.
*          ENDIF.
*
*          IF wa_marm IS NOT INITIAL.
*            IF wa_marm-umrez IS INITIAL.
*              lv_peso = 0.
*            ELSE.
*              lv_peso = wa_marm-umren / wa_marm-umrez.
*            ENDIF.
*          ENDIF.


*         obtenemos los tiempos en función del gramaje de la plancha, del centro y del modo
          CALL FUNCTION 'ZPP_GET_TIEMPOS'
            EXPORTING
              i_werks   = lv_werks
              i_linea   = lv_linea
              i_modo    = lv_modo
              i_gramaje = lv_gramaje
            IMPORTING
              e_tiempos = wa_ztpp0021.

*         pasamos los datos a mostrar en el alv a la tabla interna gt_mostrar
          wa_mostrar-linea = lv_linea.
          wa_mostrar-modo  = lv_modo.
          wa_mostrar-receta = wa_plko-plnnr.
          wa_mostrar-contador = wa_plko-plnal.
          wa_mostrar-matnr = wa_matnr-matnr.

          SELECT SINGLE maktx FROM makt
            INTO wa_mostrar-maktx
            WHERE matnr = wa_matnr-matnr AND
                  spras = sy-langu.

          wa_mostrar-grampla = lv_zzgrampla.
          wa_mostrar-gramaje = wa_ztpp0021-gramaje.
          wa_mostrar-minmod = wa_ztpp0021-minmod .
          wa_mostrar-numoper =  wa_ztpp0021-numoper.


          SELECT SINGLE nombre_modo FROM ztpp0019_t
            INTO wa_mostrar-descripcion_modo
            WHERE linea = wa_mostrar-linea AND
                  werks = lv_werks AND
                  modo = wa_mostrar-modo AND
                  spras = sy-langu.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = wa_matnr-matnr
            IMPORTING
              output = lv_matnr.

          CONCATENATE lv_matnr
              wa_mostrar-linea
              wa_mostrar-descripcion_modo
              wa_ztpp0021-gramaje
              'g'
              INTO wa_mostrar-descripcion_receta SEPARATED BY space.



          SELECT SINGLE * FROM ztpp0019
            INTO wa_ztpp0019
            WHERE linea = wa_mostrar-linea AND
                  werks = lv_werks AND
                  modo = wa_mostrar-modo.

          wa_mostrar-arbpl1 = wa_ztpp0019-arbpl1.
          wa_mostrar-arbpl2 = wa_ztpp0019-arbpl2.

          wa_mostrar-tipo_sem = '@09@'." amarillo .
          APPEND wa_mostrar TO gt_mostrar.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_MODO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_P_MODO  text
*----------------------------------------------------------------------*
FORM get_matchcode_modo  USING p_werks
                     p_linea
               CHANGING p_modo.


*TABLAS PARA MATCHCODE
  DATA: BEGIN OF it_match OCCURS 0,  "Esta tabla nos devuelve la ayuda
          shlpname  TYPE ddshretval-shlpname,
          fieldname TYPE ddshretval-fieldname,
          recordpos TYPE ddshretval-recordpos,
          fieldval  TYPE ddshretval-fieldval,
          retfield  TYPE ddshretval-retfield,
        END OF it_match.


* Se hace uso de la función que convoca al matchcode y transforma nuestra tabla interna
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'MODO'
      window_title    = 'MODO'
      value_org       = 'S'
    TABLES
      value_tab       = t_descripcion_modos
      return_tab      = it_match
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.
* Si todo es correcto
  IF sy-subrc EQ 0.
*   Leemos lo que obtenermos y se lo pasamos a nuestro campo del dynpro
    READ TABLE it_match INDEX 1.
    MOVE it_match-fieldval TO p_modo.

    READ TABLE t_descripcion_modos INTO wa_descripcion_modos WITH KEY modo = p_modo.
    gv_nombre_modo = wa_descripcion_modos-nombre_modo.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_MODO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_WERKS  text
*      -->P_P_LINEA  text
*----------------------------------------------------------------------*
FORM get_modo  USING    p_werks
                        p_linea.

  CLEAR: t_modos, t_descripcion_modos.
  REFRESH: t_modos, t_descripcion_modos.

  SELECT * FROM ztpp0019
    INTO TABLE t_modos
    WHERE linea = p_linea AND
          werks = p_werks.


* recuperamos las descripciones de los modos
  IF t_modos[] IS NOT INITIAL.
    SELECT * FROM ztpp0019_t
      INTO TABLE t_descripcion_modos
      FOR ALL ENTRIES IN t_modos
      WHERE linea = t_modos-linea AND
            werks = t_modos-werks AND
            spras = sy-langu.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DATOS_0200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_datos_0200 .
  DATA: ls_layout TYPE lvc_s_layo,
        lt_fcat   TYPE lvc_t_fcat.

  DATA: lt_tooltips TYPE lvc_t_qinf,
        lt_toolb    TYPE ui_functions.


  IF gr_container_200 IS INITIAL. "IS NOT BOUND.
    CREATE OBJECT gr_container_200
      EXPORTING
        container_name = 'CONTAINER_200'.

    CREATE OBJECT gr_grid_200
      EXPORTING
        i_parent = gr_container_200.


*   Para los eventos
    CREATE OBJECT g_application_200.


    SET HANDLER g_application_200->handle_toolbar FOR gr_grid_200.
    SET HANDLER g_application_200->handle_user_command FOR gr_grid_200.
*    SET HANDLER g_application_200->handle_hotspot_click FOR gr_grid_200.



    PERFORM fieldcat_200 CHANGING lt_fcat.
    PERFORM layout_200 CHANGING ls_layout.
    PERFORM excluir_botones_200 CHANGING lt_toolb.

    CALL METHOD gr_grid_200->set_table_for_first_display
      EXPORTING
        is_layout            = ls_layout
        it_except_qinfo      = lt_tooltips
        it_toolbar_excluding = lt_toolb
        i_save               = 'A'
      CHANGING
        it_fieldcatalog      = lt_fcat
        it_outtab            = gt_mostrar.
  ELSE.
    CALL METHOD gr_grid_200->refresh_table_display.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FIELDCAT_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_FCAT  text
*----------------------------------------------------------------------*
FORM fieldcat_200  CHANGING lt_fcat TYPE lvc_t_fcat.
  DATA: ls_fcat TYPE lvc_s_fcat.


  CLEAR: lt_fcat.
  REFRESH: lt_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZERPP0045'
    CHANGING
      ct_fieldcat      = lt_fcat
    EXCEPTIONS
      OTHERS           = 3.

  IF sy-subrc = 0.
    LOOP AT lt_fcat INTO ls_fcat.
      CASE ls_fcat-fieldname.
        WHEN 'RECETA'.
          ls_fcat-coltext = text-001.
          ls_fcat-scrtext_l = text-001.
          ls_fcat-scrtext_m = text-001.
          ls_fcat-scrtext_s  = text-001.

*          ls_fcat-hotspot = 'X'.
        WHEN 'CONTADOR'.
          ls_fcat-coltext = text-002.
          ls_fcat-scrtext_l = text-002.
          ls_fcat-scrtext_m = text-002.
          ls_fcat-scrtext_s  = text-002.

        WHEN 'DESCRIPCION_RECETA'.
          ls_fcat-coltext = text-003.
          ls_fcat-scrtext_l = text-003.
          ls_fcat-scrtext_m = text-003.
          ls_fcat-scrtext_s  = text-003.

        WHEN 'MINMOD'.
          ls_fcat-coltext = text-004.
          ls_fcat-scrtext_l = text-004.
          ls_fcat-scrtext_m = text-004.
          ls_fcat-scrtext_s  = text-004.

        WHEN 'NUMOPER'.
          ls_fcat-coltext = text-012.
          ls_fcat-scrtext_l = text-012.
          ls_fcat-scrtext_m = text-012.
          ls_fcat-scrtext_s  = text-012.

        WHEN 'ARBPL1'.
          ls_fcat-coltext = text-013.
          ls_fcat-scrtext_l = text-013.
          ls_fcat-scrtext_m = text-013.
          ls_fcat-scrtext_s  = text-013.

        WHEN 'ARBPL2'.
          ls_fcat-coltext = text-014.
          ls_fcat-scrtext_l = text-014.
          ls_fcat-scrtext_m = text-014.
          ls_fcat-scrtext_s  = text-014.

        WHEN 'GRAMAJE'.
          ls_fcat-coltext = text-015.
          ls_fcat-scrtext_l = text-015.
          ls_fcat-scrtext_m = text-015.
          ls_fcat-scrtext_s  = text-015.

      ENDCASE.
      MODIFY lt_fcat FROM ls_fcat.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LAYOUT_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_LAYOUT  text
*----------------------------------------------------------------------*
FORM layout_200  CHANGING ls_layout TYPE lvc_s_layo.
  ls_layout-zebra = 'X'.
  ls_layout-cwidth_opt = 'X'.
  ls_layout-sel_mode = 'A'.

*  ls_layout-ctab_fname = 'COLOR'.     "Enlazamos el campo en el layout


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXCLUIR_BOTONES_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_TOOLB  text
*----------------------------------------------------------------------*
FORM excluir_botones_200  CHANGING lt_toolb TYPE ui_functions.

  DATA: ls_toolb    TYPE ui_func.

  CLEAR:  lt_toolb.
  REFRESH:  lt_toolb.

  ls_toolb = cl_gui_alv_grid=>mc_fc_call_crbatch.
  APPEND ls_toolb TO lt_toolb.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MODIFICAR_RECETA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_MOSTRAR  text
*      <--P_LV_ERROR  text
*----------------------------------------------------------------------*
FORM modificar_receta  USING    wa_mostrar TYPE zerpp0045
                       CHANGING error.

  DATA: wa_messtab TYPE bdcmsgcoll.

  DATA: lv_datum        TYPE sy-datum,
        lv_tiempo_mod   TYPE menge_d,
        lv_tiempo_maq   TYPE menge_d,
        lv_tiempo_mod_c TYPE c LENGTH 10,
        lv_tiempo_maq_c TYPE c LENGTH 10.

  DATA: lv_extnumber TYPE balnrext.

  DATA ld_mode_plko TYPE  enqmode.
  DATA: lv_plnnr TYPE plko-plnnr .

  DATA: lt_messages LIKE bapiret2 OCCURS 0,
        wa_messages TYPE bapiret2.


  DATA: lt_marm        TYPE STANDARD TABLE OF marm,
        wa_marm        TYPE marm,
        lv_peso        TYPE brgew,
        lv_cant_base   TYPE plko-bmsch,
        lv_cant_base_c TYPE c LENGTH 13.

  DATA:         lv_garg_reserv TYPE seqg3-garg,
                lt_enq         TYPE pssct_seqg3,
                wa_enq         TYPE LINE OF pssct_seqg3,
                lv_number      TYPE sy-tabix,
                lv_subrc       TYPE  sy-subrc.

  DATA: lv_receta TYPE zerpp0045-receta.

  lv_extnumber = wa_mostrar-receta.
  CONCATENATE sy-mandt '2'  wa_mostrar-receta INTO lv_garg_reserv.

* verificamos si hay bloqueo
  CALL FUNCTION 'ENQUEUE_READ'
    EXPORTING
      gclient = sy-mandt
      gname   = 'PLKO'
*     GARG    = ' '
      guname  = '*'
*     LOCAL   = ' '
*     FAST    = ' '
*     GARGNOWC                    = ' '
    IMPORTING
      number  = lv_number
      subrc   = lv_subrc
    TABLES
      enq     = lt_enq
*   EXCEPTIONS
*     COMMUNICATION_FAILURE       = 1
*     SYSTEM_FAILURE              = 2
*     OTHERS  = 3
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  IF lt_enq[] IS NOT INITIAL.
    LOOP AT lt_enq INTO wa_enq.
      lv_receta = wa_enq-garg+4(8).
      IF lv_receta =  wa_mostrar-receta.
        error = 'X'.
        EXIT.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF error = 'X'.
    wa_messages-type = 'E'.
    wa_messages-id = 'MC'.
    wa_messages-number = '601'.
    concatenate 'La receta'  wa_mostrar-receta 'está siendo bloqueada' into wa_messages-message_v1
    SEPARATED BY space.
*    gs_messages-message_v2 = wa_messtab-msgv2.
*    gs_messages-message_v3 = wa_messtab-msgv3.
*    gs_messages-message_v4 = wa_messtab-msgv4.
    APPEND wa_messages TO lt_messages.

  ELSE.

*   pasamos formato AAAAMMDD a DDMMAAAA.
    CONCATENATE sy-datum+6(2) sy-datum+4(2) sy-datum(4) INTO lv_datum.

*   obtenemos el peso del material
    CLEAR: lt_marm, lv_peso.
    REFRESH: lt_marm.
    SELECT * FROM marm
      INTO TABLE lt_marm
      WHERE matnr = wa_mostrar-matnr.

    READ TABLE lt_marm INTO wa_marm WITH KEY meinh = 'GR'.
    IF sy-subrc <> 0.
      READ TABLE lt_marm INTO wa_marm WITH KEY meinh = 'KG'.
    ENDIF.

    IF wa_marm IS NOT INITIAL.
      IF wa_marm-umrez IS INITIAL.
        lv_peso = 0.
      ELSE.
        lv_peso = wa_marm-umren / wa_marm-umrez.
      ENDIF.
    ENDIF.

*   obtenemos la cantidad base de la receta
    SELECT SINGLE bmsch FROM plko
      INTO lv_cant_base
      WHERE plnty = '2' AND
            plnnr = wa_mostrar-receta AND
            plnal = wa_mostrar-contador.

*   calculamos tiempo máquina y el tiempo de mano de obra
    lv_tiempo_maq = lv_cant_base * ( lv_peso * wa_mostrar-minmod / 1000 ).
    lv_tiempo_maq_c = lv_tiempo_maq.
    CONDENSE lv_tiempo_maq_c .
    REPLACE '.' IN lv_tiempo_maq_c  WITH ','.

    lv_tiempo_mod  = ( lv_cant_base * ( lv_peso * wa_mostrar-minmod / 1000 ) ) * wa_mostrar-numoper .
    lv_tiempo_mod_c = lv_tiempo_mod.
    CONDENSE lv_tiempo_mod_c .
    REPLACE '.' IN lv_tiempo_mod_c  WITH ','.

    lv_cant_base_c =  lv_cant_base.
    CONDENSE  lv_cant_base_c.
    REPLACE '.' IN  lv_cant_base_c WITH ','.



*   lanzamos la modificación de la receta con el BI
    CLEAR: bdcdata.
    REFRESH: bdcdata.


    PERFORM bdc_dynpro      USING 'SAPLCPDI' '4000'.
    PERFORM bdc_field       USING 'BDC_OKCODE' '=VOUE'.
    PERFORM bdc_field       USING 'RC271-PLNNR' wa_mostrar-receta.
    PERFORM bdc_field       USING 'RC271-PLNAL' wa_mostrar-contador.
    PERFORM bdc_field       USING 'RC271-STTAG' lv_datum.

**************************************************************

    PERFORM bdc_dynpro      USING 'SAPLCPDI' '4400'.
    PERFORM bdc_field       USING 'BDC_OKCODE' '=ENT1'.
    PERFORM bdc_field       USING 'BDC_CURSOR' 'PLPOD-VGE05(02)'.
    PERFORM bdc_field       USING 'RC27X-ENTRY_ACT' '1'.
    PERFORM bdc_field       USING 'PLPOD-VGW01(02)'  lv_tiempo_mod_c .
    PERFORM bdc_field       USING 'PLPOD-VGE01(02)' 'MIN'.
    PERFORM bdc_field       USING 'PLPOD-VGW02(02)' lv_tiempo_maq_c .
    PERFORM bdc_field       USING 'PLPOD-VGE02(02)' 'MIN'.
    PERFORM bdc_field       USING 'PLPOD-VGW03(02)' lv_tiempo_maq_c .
    PERFORM bdc_field       USING 'PLPOD-VGE03(02)' 'MIN'.
    PERFORM bdc_field       USING 'PLPOD-VGW04(02)' lv_tiempo_maq_c .
    PERFORM bdc_field       USING 'PLPOD-VGE04(02)' 'MIN'.
    PERFORM bdc_field       USING 'PLPOD-VGW05(02)' ''.
    PERFORM bdc_field       USING 'PLPOD-VGE05(02)' 'MIN'.

**************************************************************
    IF wa_mostrar-arbpl2 IS NOT INITIAL.
      PERFORM bdc_dynpro      USING 'SAPLCPDI' '4400'.
      PERFORM bdc_field       USING 'BDC_OKCODE' '=ENT1'.
      PERFORM bdc_field       USING 'BDC_CURSOR' 'PLPOD-VGE05(04)'.
      PERFORM bdc_field       USING 'RC27X-ENTRY_ACT' '1'.
      PERFORM bdc_field       USING 'PLPOD-VGW01(04)' ''.
      PERFORM bdc_field       USING 'PLPOD-VGE01(04)' 'MIN'.
      PERFORM bdc_field       USING 'PLPOD-VGW02(04)' lv_tiempo_maq_c .
      PERFORM bdc_field       USING 'PLPOD-VGE02(04)' 'MIN'.
      PERFORM bdc_field       USING 'PLPOD-VGW03(04)' ''.
      PERFORM bdc_field       USING 'PLPOD-VGE03(04)' 'MIN'.
      PERFORM bdc_field       USING 'PLPOD-VGW04(04)' lv_tiempo_maq_c .
      PERFORM bdc_field       USING 'PLPOD-VGE04(04)' 'MIN'.
      PERFORM bdc_field       USING 'PLPOD-VGW05(04)' ''.
      PERFORM bdc_field       USING 'PLPOD-VGE05(04)' 'MIN'.
    ENDIF.

**************************************************************

    PERFORM bdc_dynpro      USING 'SAPLCPDI' '4400'.
*   BDC_CURSOR   PLPOD-VORNR(01)
    PERFORM bdc_field       USING 'BDC_OKCODE' '=BACK'.
*   RC27X-ENTRY_ACT         1
**************************************************************

    PERFORM bdc_dynpro      USING 'SAPLCPDA' '4210'.
*   BDC_CURSOR   PLKOD-KTEXT
    PERFORM bdc_field       USING ' BDC_OKCODE' '/00'.
    PERFORM bdc_field       USING 'PLKOD-KTEXT' wa_mostrar-descripcion_receta.
    PERFORM bdc_field       USING 'PLKOD-VERWE' '1'.
    PERFORM bdc_field       USING 'PLKOD-STATU' '4'.
    PERFORM bdc_field       USING 'PLKOD-BMSCH' lv_cant_base_c. "'1.000'.
    PERFORM bdc_field       USING 'PLKOD-MEINH' 'UN'.
    PERFORM bdc_field       USING 'PLKOD-LOSBS' '99.999.999'.
    PERFORM bdc_field       USING 'PLKOD-PLNME' 'UN'.
*    BDC_SUBSCR    SAPLCPDA                                4215CHANGE_RULE
**************************************************************

    PERFORM bdc_dynpro      USING 'SAPLCPDA' '4210'.
*   BDC_CURSOR   PLKOD-KTEXT
    PERFORM bdc_field       USING 'BDC_OKCODE' '=BU'.
    PERFORM bdc_field       USING 'PLKOD-KTEXT' wa_mostrar-descripcion_receta.
    PERFORM bdc_field       USING 'PLKOD-VERWE' '1'.
    PERFORM bdc_field       USING 'PLKOD-STATU' '4'.
    PERFORM bdc_field       USING 'PLKOD-BMSCH' lv_cant_base_c. "'1.000'.
    PERFORM bdc_field       USING 'PLKOD-MEINH' 'UN'.
    PERFORM bdc_field       USING 'PLKOD-LOSBS' '99.999.999'.
    PERFORM bdc_field       USING 'PLKOD-PLNME' 'UN'.
*    BDC_SUBSCR    SAPLCPDA                                4215CHANGE_RULE

**************************************************************


    CLEAR: i_messtab.
    REFRESH: i_messtab.

    CALL TRANSACTION 'C202' USING bdcdata MODE 'N'
                            MESSAGES INTO i_messtab
                            UPDATE 'S'.


    READ TABLE i_messtab INTO wa_messtab WITH KEY msgtyp = 'E'.
    IF sy-subrc = 0.
      error = 'X'.
    ENDIF.


*   montamos el log en la slg1
    LOOP AT i_messtab INTO wa_messtab where msgtyp = 'E'.
      wa_messages-type = wa_messtab-msgtyp.
      wa_messages-id = wa_messtab-msgid.
      wa_messages-number = wa_messtab-msgnr.
      wa_messages-message_v1 = wa_messtab-msgv1.
      wa_messages-message_v2 = wa_messtab-msgv2.
      wa_messages-message_v3 = wa_messtab-msgv3.
      wa_messages-message_v4 = wa_messtab-msgv4.
      APPEND wa_messages TO lt_messages.
    ENDLOOP.

  ENDIF.

  IF lt_messages IS NOT INITIAL.
    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZCIP_VF_REC'
        subobjeto = 'CIP_MO_TI_RE'
        mensajes  = lt_messages[]
        extnumber = lv_extnumber.

    APPEND LINES OF lt_messages TO gt_messages.

  ENDIF.


*  CALL FUNCTION 'DEQUEUE_EPPLKO'
*    EXPORTING
*      mode_plko = 'E'
*      mandt     = sy-mandt
*      plnty     = '2'
*      plnnr     = wa_mostrar-receta
**     PLNAL     =
**     ZAEHL     =
**     X_PLNTY   = ' '
**     X_PLNNR   = ' '
**     X_PLNAL   = ' '
**     X_ZAEHL   = ' '
**     _SCOPE    = '3'
**     _SYNCHRON = ' '
**     _COLLECT  = ' '
*    .

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_log .
  IF gt_messages[] IS NOT INITIAL.
    READ TABLE gt_messages INTO gs_messages WITH KEY type = ''.
    IF sy-subrc <> 0.

      CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
        TABLES
          i_bapiret2_tab = gt_messages.
    ENDIF.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG_POPUP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_log_popup .
  DATA: t_fieldcat  TYPE slis_t_fieldcat_alv,
        ls_fieldcat TYPE  slis_fieldcat_alv.

** Catálogo.
*  CLEAR: t_fieldcat.
*  REFRESH: t_fieldcat.
*  CLEAR ls_fieldcat.
*  ls_fieldcat-fieldname   = 'MESSAGE'.
*  ls_fieldcat-tabname      = 'GT_MESSAGES'.
*  ls_fieldcat-outputlen = 220.
*  ls_fieldcat-seltext_s = 'Mensaje'.
*  ls_fieldcat-seltext_m = 'Mensaje'.
*  ls_fieldcat-seltext_l = 'Mensaje'.
*  APPEND ls_fieldcat TO t_fieldcat.

  CLEAR ls_fieldcat.
  ls_fieldcat-fieldname   = 'MESSAGE_V1'.
  ls_fieldcat-tabname      = 'GT_MESSAGES'.
  ls_fieldcat-outputlen = 220.
  ls_fieldcat-seltext_s = 'Mensaje'.
  ls_fieldcat-seltext_m = 'Mensaje'.
  ls_fieldcat-seltext_l = 'Mensaje'.
  APPEND ls_fieldcat TO t_fieldcat.



  CALL FUNCTION 'REUSE_ALV_POPUP_TO_SELECT'
    EXPORTING
      i_title       = 'Log de errores'
*     I_SELECTION   = 'X'
*     I_ALLOW_NO_SELECTION          =
      i_zebra       = 'X'
*     I_SCREEN_START_COLUMN         = 1
*     I_SCREEN_START_LINE           = 0
*     I_SCREEN_END_COLUMN           = 1
*     I_SCREEN_END_LINE             = 0
*     I_CHECKBOX_FIELDNAME          = 'SELEC'
*     I_LINEMARK_FIELDNAME          =
*     I_SCROLL_TO_SEL_LINE          = 'X'
      i_tabname     = 'GT_MESSAGES'
*     I_STRUCTURE_NAME              =
      it_fieldcat   = t_fieldcat[]
*     IT_EXCLUDING  =
*     I_CALLBACK_PROGRAM            =
*     I_CALLBACK_USER_COMMAND       =
*     is_private    = ls_private
*      IMPORTING
*     ES_SELFIELD   =
*     E_EXIT        = l_exit
    TABLES
      t_outtab      = gt_messages
    EXCEPTIONS
      program_error = 1
      OTHERS        = 2.

ENDFORM.
