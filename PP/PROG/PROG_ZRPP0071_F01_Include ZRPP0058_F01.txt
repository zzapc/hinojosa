*----------------------------------------------------------------------*
***INCLUDE ZRPP0058_F01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos .


  CALL METHOD zclpp_reg_vehiculo_master=>obtener_datos_zpp0077
    EXPORTING
      i_werks             = p_werks
      ir_reg_vehiculo     = s_reg[]
      ir_fecha_registro   = s_fec[]
      i_albaran           = p_alb
      i_matricula         = p_matri
      i_destino           = p_dest
      iw_incluir_borrados = p_anul
    IMPORTING
      ot_datos            = gt_datos.
  TRY.

      TRY.
          gs_dyn_100-alv->set_data( CHANGING
                  t_table = gt_datos[] ).
        CATCH cx_salv_no_new_data_allowed.    "
      ENDTRY.
    CATCH cx_root .
  ENDTRY.

ENDFORM.


FORM colorear_alv.

** Colorear desviación (Verde/Rojo)
*  DATA: ls_cellcolor TYPE lvc_s_scol.
*  LOOP AT gt_datos ASSIGNING FIELD-SYMBOL(<fs_datos_alv>).
*
*    CLEAR ls_cellcolor.
*
**    IF <fs_datos_alv>-desv_coste > 0.
**      ls_cellcolor-fname = 'DESV_COSTE'.
**      ls_cellcolor-color-col = '5' . "Rojo
**      ls_cellcolor-color-int = 0.
**      ls_cellcolor-color-inv = 0.
**      APPEND ls_cellcolor TO <fs_datos_alv>-t_color.
**
**    ELSEIF <fs_datos_alv>-desv_coste < 0.
**
**      ls_cellcolor-fname = 'DESV_COSTE'.
**      ls_cellcolor-color-col = '6'. "Verde
**      ls_cellcolor-color-int = 0.
**      ls_cellcolor-color-inv = 0.
**      APPEND ls_cellcolor TO <fs_datos_alv>-t_color.
**
**    ENDIF.
*
*  ENDLOOP.

ENDFORM.


FORM mostrar_datos.


  gs_dyn_100-werks      = p_werks.

  IF gs_dyn_100-container IS NOT BOUND.

    CREATE OBJECT gs_dyn_100-container
      EXPORTING
        container_name              = 'GS_DYN_100-CONTAINER'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

*    TRY.
    cl_salv_table=>factory(
      EXPORTING
        r_container    = gs_dyn_100-container
        container_name = 'GS_DYN_100-CONTAINER'
      IMPORTING
        r_salv_table = gs_dyn_100-alv
      CHANGING
        t_table      = gt_datos ).

    PERFORM tunning_alv.

*    TRY.
*        gs_dyn_100-alv->set_data( CHANGING
*                t_table = gt_datos[] ).
*      CATCH cx_salv_no_new_data_allowed.    "
*    ENDTRY.

    gs_dyn_100-alv->display( ).

  ELSE.

    TRY.
        gs_dyn_100-alv->set_data( CHANGING
                t_table = gt_datos[] ).
      CATCH cx_salv_no_new_data_allowed.    "
    ENDTRY.


*gs_dyn_100-container->
    gs_dyn_100-alv->refresh( refresh_mode = if_salv_c_refresh=>full ).

  ENDIF.

ENDFORM.

FORM tunning_alv.

  DATA: lr_functions TYPE REF TO cl_salv_functions_list,
        lo_column2   TYPE REF TO cl_salv_column_table,

        lo_column    TYPE REF TO cl_salv_column,
*        lo_columns   TYPE REF TO cl_salv_columns_table.
        lo_columns   TYPE REF TO cl_salv_columns.

  DATA(gr_layout) = gs_dyn_100-alv->get_layout( ).
  key-report = sy-repid.
  gr_layout->set_key( key ).
  gr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  gr_layout->set_default( abap_true ).

  IF p_lay06 IS NOT INITIAL.
    gr_layout->set_initial_layout( p_lay06 ).
  ENDIF.

  DATA: lr_functions2 TYPE REF TO cl_salv_functions_list,
        l_text        TYPE string.
  lr_functions = gs_dyn_100-alv->get_functions( ).

* 28/01/2021  No visualizar botonees para nueva TX. ZPP0077V
  IF sy-tcode <> 'ZPP0077V'.


    TRY.
        l_text = 'Borrar registro'.
        lr_functions->add_function(
          name     = 'BORRAR'
          icon     = '@11@'
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.
    TRY.
        l_text = 'Imprimir tiquet'.
        lr_functions->add_function(
          name     = 'TIQUET'
          icon     = '@0X@'
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.
    TRY.
        l_text = 'Detalle registro'.
        lr_functions->add_function(
          name     = 'DETALLE'
          icon     = '@GV@'
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.


*-- events
    gr_events = gs_dyn_100-alv->get_event( ).
    CREATE OBJECT event_handler.
    SET HANDLER event_handler->on_user_command FOR gr_events.
***  SET HANDLER event_handler->on_link_click FOR gr_events.
  ENDIF.

**... §3.1 activate ALV generic Functions
*  lr_functions = gs_dyn_100-alv->get_functions( ).
  lr_functions->set_all( 'X' ).

*  CALL METHOD lr_functions->set_graphics
*    EXPORTING
*      value = ' '.
*
*  CALL METHOD lr_functions->set_print
*    EXPORTING
*      value = ' '.

*  CALL METHOD lr_functions->set_detail
*    EXPORTING
*      value = ' '.

*  CALL METHOD lr_functions->set_find_more
*    EXPORTING
*      value = ' '.


  lo_columns = gs_dyn_100-alv->get_columns( ).
  lo_columns->set_optimize( 'X' ).

*  TRY.
*      lo_columns->set_color_column( 'T_COLOR' ).
*    CATCH cx_salv_data_error.                           "#EC NO_HANDLER
*
*  ENDTRY.

*  TRY.
*      lo_column ?= lo_columns->get_column( 'ID_REG_VEHICULO' ).
*      lo_column->set_visible( value  = if_salv_c_bool_sap=>false ).


*      lo_column ?= lo_columns->get_column( 'MOTIVO_ANULACION' ).
*      lo_column->set_visible( value  = if_salv_c_bool_sap=>false ).
*    CATCH cx_root .
*  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'MOTIVO_ANULACION' ).
      lo_column->set_short_text( 'Motiv.borr' ).
      lo_column->set_medium_text( 'Motivo borrado' ).
      lo_column->set_long_text( 'Motivo borrado' ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column ?= lo_columns->get_column( 'FECHA_ANUL' ).
      lo_column->set_short_text( 'F.borrado' ).
      lo_column->set_medium_text( 'Fecha borrado' ).
      lo_column->set_long_text( 'Fecha borrado' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'HORA_ANUL' ).
      lo_column->set_short_text( 'H.borrado' ).
      lo_column->set_medium_text( 'Hora borrado' ).
      lo_column->set_long_text( 'Hora borrado' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'FECHA_INS' ).
      lo_column->set_short_text( 'F.creación' ).
      lo_column->set_medium_text( 'Fecha creación' ).
      lo_column->set_long_text( 'Fecha creación' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'HORA_INS' ).
      lo_column->set_short_text( 'H.creación' ).
      lo_column->set_medium_text( 'Hora creación' ).
      lo_column->set_long_text( 'Hora creación' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'TDLNR' ).
      lo_column->set_short_text( 'Num.transp' ).
      lo_column->set_medium_text( 'Num.transp.' ).
      lo_column->set_long_text( 'Num.transp.' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column2 ?= lo_columns->get_column( 'TDLNR' ).
      lo_column2->set_short_text( 'Num.transp' ).
      lo_column2->set_medium_text( 'Num.transp.' ).
      lo_column2->set_long_text( 'Num.transp.' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'NOMBRE_TRANS' ).
      lo_column->set_short_text( 'Nom.transp' ).
      lo_column->set_medium_text( 'Nom.transp.' ).
      lo_column->set_long_text( 'Nom.transp.' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'ZMATRICULA1' ).
      lo_column->set_short_text( 'Matricula' ).
      lo_column->set_medium_text( 'Matricula' ).
      lo_column->set_long_text( 'Matricula' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'ZMATRICULA2' ).
      lo_column->set_short_text( 'Remolque' ).
      lo_column->set_medium_text( 'Remolque' ).
      lo_column->set_long_text( 'Remolque' ).
      lo_column->set_decimals( '0' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'IND_REMOLQUE' ).
      lo_column->set_short_text( '2º remolq' ).
      lo_column->set_medium_text( '2º remolque' ).
      lo_column->set_long_text( '2º remolque' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'DESCR_TP_CARGA' ).
      lo_column->set_short_text( 'Tipo carga' ).
      lo_column->set_medium_text( 'Tipo carga' ).
      lo_column->set_long_text( 'Tipo carga' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'ALBARAN' ).
      lo_column->set_short_text( 'Albarán' ).
      lo_column->set_medium_text( 'Albarán' ).
      lo_column->set_long_text( 'Albarán' ).
      lo_column->set_decimals( '0' ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column ?= lo_columns->get_column( 'OBSERVACIONES' ).
      lo_column->set_short_text( 'Observac.' ).
      lo_column->set_medium_text( 'Observaciones' ).
      lo_column->set_long_text( 'Observaciones' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'PESO_BRUTO' ).
      lo_column->set_short_text( 'Peso bruto' ).
      lo_column->set_medium_text( 'Peso bruto' ).
      lo_column->set_long_text( 'Peso bruto' ).
      lo_column->set_decimals( '0' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'TARA' ).
      lo_column->set_short_text( 'Tara' ).
      lo_column->set_medium_text( 'Tara' ).
      lo_column->set_long_text( 'Tara' ).
      lo_column->set_decimals( '0' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'PESO_BRUTO_REMOL' ).
      lo_column->set_short_text( 'Peso bru.2' ).
      lo_column->set_medium_text( 'Peso bruto 2' ).
      lo_column->set_long_text( 'Peso bruto 2' ).
      lo_column->set_decimals( '0' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'TARA_REMOL' ).
      lo_column->set_short_text( 'Tara 2' ).
      lo_column->set_medium_text( 'Tara 2' ).
      lo_column->set_long_text( 'Tara 2' ).
      lo_column->set_decimals( '0' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'CONTENEDOR_ENTR' ).
      lo_column->set_short_text( 'Cont.entr.' ).
      lo_column->set_medium_text( 'Cont.entrada' ).
      lo_column->set_long_text( 'Cont.entrada' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'CONTENEDOR_SALI' ).
      lo_column->set_short_text( 'Cont.salid' ).
      lo_column->set_medium_text( 'Cont. salida' ).
      lo_column->set_long_text( 'Cont. salida' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'PESO_NETO' ).
      lo_column->set_short_text( 'Peso neto' ).
      lo_column->set_medium_text( 'Peso neto' ).
      lo_column->set_long_text( 'Peso neto' ).
      lo_column->set_decimals( '0' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'FECHA_ESP' ).
      lo_column->set_short_text( 'Fech.esper' ).
      lo_column->set_medium_text( 'Fecha a espera' ).
      lo_column->set_long_text( 'Fecha a espera' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'HORA_ESP' ).
      lo_column->set_short_text( 'Hora esper' ).
      lo_column->set_medium_text( 'Hora a espera' ).
      lo_column->set_long_text( 'Hora a espera' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'FECHA_DEST' ).
      lo_column->set_short_text( 'Fech.dest.' ).
      lo_column->set_medium_text( 'Fecha a destino' ).
      lo_column->set_long_text( 'Fecha a destino' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'HORA_DEST' ).
      lo_column->set_short_text( 'Hora dest.' ).
      lo_column->set_medium_text( 'Hora a destino' ).
      lo_column->set_long_text( 'Hora a destino' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'FECHA_SAL' ).
      lo_column->set_short_text( 'Fec.salida' ).
      lo_column->set_medium_text( 'Fecha salida' ).
      lo_column->set_long_text( 'Fecha salida' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'HORA_SAL' ).
      lo_column->set_short_text( 'Hora sali.' ).
      lo_column->set_medium_text( 'Hora salida' ).
      lo_column->set_long_text( 'Hora salida' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'ID_TP_CARBURANTE' ).
      lo_column->set_short_text( 'Tp.carbur.' ).
      lo_column->set_medium_text( 'Tipo carburante' ).
      lo_column->set_long_text( 'Tipo carburante' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'DESC_TP_CARBU' ).
      lo_column->set_short_text( 'Des.carbu.' ).
      lo_column->set_medium_text( 'Descrip. carburante' ).
      lo_column->set_long_text( 'Descripción carburante' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'LITROS_CARBU' ).
      lo_column->set_short_text( 'Litros.' ).
      lo_column->set_medium_text( 'Litros' ).
      lo_column->set_long_text( 'Litros' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'ID_TP_PPQQ' ).
      lo_column->set_short_text( 'Prod.quim.' ).
      lo_column->set_medium_text( 'Tipo prod.químico' ).
      lo_column->set_long_text( 'Tipo prod.químico' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'DESC_TP_PPQQ' ).
      lo_column->set_short_text( 'Desc.ppqq' ).
      lo_column->set_medium_text( 'Descr.prod.químico' ).
      lo_column->set_long_text( 'Descr. producto químico' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'NUM_GRGS' ).
      lo_column->set_short_text( 'Num. GRGS' ).
      lo_column->set_medium_text( 'Num. GRGS' ).
      lo_column->set_long_text( 'Num. GRGS' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'ID_TP_RESIDUO_1' ).
      lo_column->set_short_text( 'Tp.resi.1' ).
      lo_column->set_medium_text( 'Tipo residuo 1' ).
      lo_column->set_long_text( 'Tipo residuo 1' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'ID_TP_RESIDUO_2' ).
      lo_column->set_short_text( 'Tp.resi.2' ).
      lo_column->set_medium_text( 'Tipo residuo 2' ).
      lo_column->set_long_text( 'Tipo residuo 2' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'DESCR_RESIDUO' ).
      lo_column->set_short_text( 'Des.resid.' ).
      lo_column->set_medium_text( 'Desc. residuo' ).
      lo_column->set_long_text( 'Descripción residuo' ).
    CATCH cx_root .
  ENDTRY.


  gs_dyn_100-alv->display( ).

ENDFORM.


FORM obtener_seleccion_alv200 CHANGING p_rows TYPE salv_t_row.
  DATA: lr_selections TYPE REF TO cl_salv_selections.

  lr_selections = gs_dyn_100-alv->get_selections( ).
  p_rows       = lr_selections->get_selected_rows( ).

ENDFORM.

FORM dropboxdown_dyn200 .

  DATA: lt_list  TYPE vrm_values,
        ls_value LIKE LINE OF lt_list.

  CLEAR: lt_list[].
  LOOP AT zclpp_reg_vehiculo_master=>gt_destinos
          INTO DATA(ls_destino) WHERE werks = gs_dyn_100-werks.
    CLEAR ls_value.
    ls_value-key   = ls_destino-id_destino.
    ls_value-text  = ls_destino-descr_destino.
    APPEND ls_value TO lt_list.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN200-DESTINO'
      values = lt_list.

* Tipo de carga.
  CLEAR: lt_list[].
  LOOP AT zclpp_reg_vehiculo_master=>gt_tp_carga
          INTO DATA(ls_tp_carga) WHERE werks = gs_dyn_100-werks.
    CLEAR ls_value.
    ls_value-key   = ls_tp_carga-tp_carga.
    ls_value-text  = ls_tp_carga-descr_tp_carga.
    APPEND ls_value TO lt_list.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN200-TP_CARGA'
      values = lt_list.

* Contenedores.
  CLEAR: lt_list[].
  LOOP AT zclpp_reg_vehiculo_master=>gt_contenedores
          INTO DATA(ls_contenedores) WHERE werks = gs_dyn_100-werks.
    CLEAR ls_value.
    ls_value-key   = ls_contenedores-id_contenedor.
*    ls_value-text  = ls_contenedores-descr_contenedor.
    APPEND ls_value TO lt_list.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN200-CONTENEDOR_ENTR'
      values = lt_list.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN200-CONTENEDOR_SALI'
      values = lt_list.

  PERFORM desplegar_motivo_anul USING gs_dyn200-werks.

ENDFORM.

FORM desplegar_motivo_anul USING p_werks TYPE werks_d.

  DATA: lt_list  TYPE vrm_values,
        ls_value LIKE LINE OF lt_list.

  LOOP AT zclpp_reg_vehiculo_master=>gt_motivos_anulacion INTO DATA(ls_mot) WHERE werks = p_werks .
    CLEAR ls_value.
    ls_value-key   = ls_mot-id_motivo_anul.
    ls_value-text  = ls_mot-descr_motivo_anul.
    APPEND ls_value TO lt_list.
  ENDLOOP.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN200-MOTIVO_ANULACION'
      values = lt_list.


ENDFORM.

FORM obtener_transportista.

  TRY.
      gs_dyn200-name1 = gt_proveedor[ lifnr = gs_dyn200-tdlnr ]-name1.
    CATCH cx_root .

      SELECT SINGLE name1
        INTO gs_dyn200-name1
        FROM lfa1
        WHERE lifnr = gs_dyn200-tdlnr.

      IF sy-subrc <> 0.
        CLEAR gs_dyn200-name1.
      ELSE.
        gt_proveedor = VALUE #( ( lifnr = gs_dyn200-tdlnr
                                  name1 = gs_dyn200-name1 ) ).
      ENDIF.

  ENDTRY.


ENDFORM.


FORM buscar_variante  CHANGING p_vari TYPE disvariant-variant.

  DATA: ls_variant TYPE disvariant,
        l_exit     TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
*     it_default_fieldcat =
    IMPORTING
      e_exit     = l_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 2.
  IF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    IF l_exit EQ space.
      p_vari = ls_variant-variant.
    ENDIF.
  ENDIF.

ENDFORM.                    " BUSCAR_VARIANTE

FORM mostrar_popup_observ USING p_werks TYPE werks_d
                                p_id_reg TYPE zid_reg_vehiculo
                      CHANGING  p_observ TYPE zobservaciones.

  CLEAR gs_dyn300.
  gs_dyn300-observ = p_observ.
  CALL SCREEN 0300 STARTING AT 20 4 ENDING AT 130 8.

  IF gs_dyn300-rc = '00'.

    CALL METHOD zclpp_reg_vehiculo_master=>actualizar_observaciones
      EXPORTING
        i_werks         = p_werks
        i_id_reg_vehi   = p_id_reg
        i_observaciones = gs_dyn300-observ
*        i
      IMPORTING
        o_rc            = DATA(l_rc2).
    CASE l_rc2.
      WHEN '00'.
        MESSAGE |Observaciones modificadas correctamente para registro { p_id_reg }| TYPE 'S'.
        gs_dyn200-observaciones = gs_dyn300-observ.
        CLEAR: gt_datos[].
        PERFORM obtener_datos.


*        gs_dyn_100-alv->refresh( ).
        IF gs_dyn_100-container IS BOUND.

          gs_dyn_100-container->free( ).
          FREE: gs_dyn_100-container   , gs_dyn_100-alv.
          CLEAR:   gs_dyn_100-container   , gs_dyn_100-alv.

        ENDIF.
        cl_gui_cfw=>set_new_ok_code( new_code = 'REFR' ).
        cl_gui_cfw=>flush( ).
      WHEN '01'.
        MESSAGE |Error en la actualización de las observaciones del transporte| TYPE 'S' DISPLAY LIKE 'E'.
      WHEN OTHERS.
    ENDCASE.

  ENDIF.


ENDFORM.

FORM mostrar_popup_tknum.

  DATA: sfields     TYPE sval,
        lt_fields   TYPE STANDARD TABLE OF sval,
        l_fieldname TYPE char30,
        l_rc        TYPE char2.

*  CASE p_campo.
*    WHEN 'PB1'.
  sfields-fieldtext   = 'Transporte:  '.
  l_fieldname         = 'TKNUM'.
****    WHEN 'PB2'.
****      sfields-fieldtext   = 'Peso bruto 2:  '.
****      l_fieldname         = 'PESO_BRUTO_REMOL'.
****    WHEN 'TA1'.
****      sfields-fieldtext   = 'Tara:  '.
****      l_fieldname         = 'TARA'.
****    WHEN 'TA2'.
****      sfields-fieldtext   = 'Tara 2:  '.
****      l_fieldname         = 'TARA_REMOL'.
*****    WHEN 'CONT'.
*****      sfields-fieldtext   = 'Contenedor entrada:  '.
*****      l_fieldname         = 'CONTENEDOR_ENTR'.
****
****    WHEN OTHERS.
****  ENDCASE.

  DATA(l_title) = |Modificar transporte|.
  sfields-tabname    = 'ZTPP0059'.

  sfields-fieldname  = l_fieldname.
  sfields-comp_field = l_fieldname.
  sfields-value      = gs_dyn200-tknum.

  sfields-field_attr = '01'.
  sfields-field_obl  = 'X'.
  APPEND sfields TO lt_fields.


  CALL FUNCTION 'POPUP_GET_VALUES'
    EXPORTING
*     NO_VALUE_CHECK  = ' '
      popup_title     = l_title
      start_column    = '19'
      start_row       = '11'
    IMPORTING
      returncode      = l_rc
    TABLES
      fields          = lt_fields
    EXCEPTIONS
      error_in_fields = 1
      OTHERS          = 2.

  CHECK l_rc <> 'A'.


*  DATA: l_kg       TYPE menge_d.

  IF sy-subrc = 0.
    gs_dyn200-tknum = lt_fields[ tabname = 'ZTPP0059' fieldname = l_fieldname ]-value.
    gs_dyn200-tknum = |{ gs_dyn200-tknum ALPHA = OUT }|.

    CHECK zclpp_reg_vehiculo_master=>validar_tknum( gs_dyn200-tknum ) = 'X'.

    CALL METHOD zclpp_reg_vehiculo_master=>actualizar_tknum
      EXPORTING
        i_werks       = gs_dyn200-werks
        i_id_reg_vehi = gs_dyn200-id_reg_vehiculo
        i_tknum       = gs_dyn200-tknum
      IMPORTING
        o_rc          = DATA(l_rc2).
    CASE l_rc2.
      WHEN '00'.
        MESSAGE |Transporte modificado correctamente para registro { gs_dyn200-id_reg_vehiculo }| TYPE 'S'.

        CLEAR: gt_datos[].
        PERFORM obtener_datos.

        FREE: gs_dyn_100-alv , gs_dyn_100-container.
        CLEAR: gs_dyn_100-alv , gs_dyn_100-container.
*        gs_dyn_100-alv->refresh( ).
*        CALL METHOD cl_gui_cfw=>flush.
      WHEN '01'.
        MESSAGE |Error en la actualización del transporte| TYPE 'S' DISPLAY LIKE 'E'.
      WHEN OTHERS.
    ENDCASE.

  ENDIF.


ENDFORM.

FORM borrar_registro USING ps_reg TYPE zspp_vehiculos_planta.

  DATA: lv_answer(1)   TYPE c,
        l_msg          TYPE string,
        l_rc           TYPE char2,
        l_nom_operario TYPE znombre_oper.

* Si se recibe el param.oculto OPERARIO desde ZPP0076, lo grabamos. Sino, sy-uname.
  IF p_oper IS NOT INITIAL.
    l_nom_operario = p_oper.
  ELSE.
    l_nom_operario = CONV #( sy-uname ).
  ENDIF.

  l_msg = |Se borrará el registro { ps_reg-id_reg_vehiculo }. ¿Desea continuar? |.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'Borrar registro de vehículo'
      text_question         = l_msg
      text_button_1         = 'Borrar'
      icon_button_1         = 'ICON_DELETE'
      text_button_2         = 'Cancelar' "
      icon_button_2         = 'ICON_CANCEL' "
      default_button        = '2'
      display_cancel_button = ' '
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  CASE lv_answer.
    WHEN '1'. " Borrar
      CALL FUNCTION 'ZMFPP_ANULAR_REG_VEHICULO'
        EXPORTING
          i_desde_planta        = 'X'
          is_reg_entrada_planta = ps_reg
          i_operario            = l_nom_operario
        IMPORTING
          o_rc                  = l_rc.
      CASE l_rc.
        WHEN '00'. " Anulación OK
          MESSAGE |Registro { ps_reg-id_reg_vehiculo } borrado correctamente.| TYPE 'S'.
          PERFORM obtener_datos.
          cl_gui_cfw=>set_new_ok_code( new_code = 'REFR' ).
          cl_gui_cfw=>flush( ).

        WHEN '01'. " Acción cancelada
        WHEN OTHERS.
      ENDCASE.

    WHEN '2'. "Cancelar

*    WHEN 'A'. " Cancelar, no hacemos nada

    WHEN OTHERS.
  ENDCASE.

ENDFORM.

FORM update_field_dynpro.

  DATA: ls_dynpf TYPE dynpread,
        lt_dynpf TYPE STANDARD TABLE OF dynpread.

  ls_dynpf-fieldname  = 'GS_DYN200-OBSERVACIONES'.
  ls_dynpf-fieldvalue = gs_dyn200-observaciones.
  APPEND ls_dynpf TO lt_dynpf.

  CALL FUNCTION 'DYNP_UPDATE_FIELDS'
    EXPORTING
      dyname     = sy-repid
      dynumb     = sy-dynnr
      request    = 'A'
    TABLES
      dynpfields = lt_dynpf
    EXCEPTIONS
      OTHERS     = 0.

ENDFORM.
