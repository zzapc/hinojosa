*&---------------------------------------------------------------------*
*&  Include           ZRPP0032_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  get_default_layout
*&---------------------------------------------------------------------*
FORM get_default_layout USING i_restrict TYPE salv_de_layout_restriction
                     CHANGING c_layout TYPE disvariant-variant.

  DATA: ls_layout TYPE salv_s_layout_info,
        ls_key    TYPE salv_s_layout_key.

  ls_key-report = sy-repid.

  ls_layout = cl_salv_layout_service=>get_default_layout(
    s_key    = ls_key
    restrict = i_restrict ).

  c_layout = ls_layout-layout.

ENDFORM.                    " get_default_layout

*&---------------------------------------------------------------------*
*&      Form  f4_layouts
*&---------------------------------------------------------------------*
FORM f4_layouts USING i_restrict TYPE salv_de_layout_restriction
             CHANGING c_layout TYPE disvariant-variant.

  DATA: ls_layout TYPE salv_s_layout_info,
        ls_key    TYPE salv_s_layout_key.

  ls_key-report = sy-repid.

  ls_layout = cl_salv_layout_service=>f4_layouts(
    s_key    = ls_key
    restrict = i_restrict ).

  c_layout = ls_layout-layout.
ENDFORM.                    " f4_layouts

*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_data .

  CALL FUNCTION 'ZPP_OBSOLETOS'
   EXPORTING
     I_MATNR        = pmatnr
     I_WERKS        = pwerks
     I_LGORT        =  plgort
   IMPORTING
     E_DATA         =  gt_outtab
   EXCEPTIONS
     E_MTART        = 1
     E_NODATA       = 2
     OTHERS         = 3
            .
  IF sy-subrc <> 0.
    case sy-subrc.
      when '1'.
        MESSAGE i142(zpp) DISPLAY LIKE 'E'. "El material introducido no es una plancha
        exit.
      when '2'.
        MESSAGE i143(zpp) DISPLAY LIKE 'E'. "No hay datos para mostrar
        exit.
    endcase.
  ENDIF.

*  DATA: lv_matnr         TYPE matnr,
*        lv_zzcolor       TYPE zcolor,
*        lv_zzplalgnt     TYPE zplalgnt,
*        lv_zzplaannt     TYPE zplaannt,
*        lv_zzplalgntint  TYPE i,
*        lv_zzplaanntint  TYPE i,
*        lv_zzplalgntint2 TYPE i,
*        lv_zzplaanntint2 TYPE i.
**        lv_zzplalgnt TYPE INT4,
**        lv_zzplaannt TYPE INT4.
*
*  CLEAR: gt_outtab.
*
*  SELECT SINGLE matnr, zzcolor, zzplalgnt, zzplaannt
*    INTO ( @lv_matnr, @lv_zzcolor, @lv_zzplalgnt, @lv_zzplaannt )
*    FROM mara
*    WHERE matnr = @pmatnr AND
*          mtart = @gc_mtart.
*
*  IF sy-subrc <> 0.
*    MESSAGE i142(zpp) DISPLAY LIKE 'E'. "El material introducido no es una plancha no manipulada
*    EXIT.
*  ENDIF.
*
*  lv_zzplalgntint = lv_zzplalgnt.
*  lv_zzplaanntint = lv_zzplaannt.
*
*  SELECT  a~matnr, b~werks, b~lgort, b~charg, c~maktx, a~zzcolor, a~zzplalgnt, a~zzplaannt, a~meins,
*          b~clabs, b~cumlm, b~cinsm, b~ceinm, b~cspem, b~cretm, b~cvmla, b~cvmum, b~cvmin, b~cvmei,", a~zzplalgnt AS zzplalgntint, a~zzplaannt AS zzplaanntint,
*          b~cvmsp, b~cvmre", cast( a~zzplalgnt as fltp ) as zplalgntint
*    INTO CORRESPONDING FIELDS OF TABLE @gt_outtab_aux
*    FROM mara AS a
*    INNER JOIN mchb AS b ON a~matnr = b~matnr
*    LEFT JOIN makt AS c ON a~matnr = c~matnr
*    WHERE "a~matnr = @lv_matnr AND
*          b~werks = @pwerks AND
*          b~lgort = @plgort AND
*          a~zzcolor = @lv_zzcolor AND
**          a~zzplalgnt >= @lv_zzplalgnt AND
**          a~zzplaannt >= @lv_zzplaannt AND
**          zzplalgntint >= @lv_zzplalgnt AND
**          zzplaanntint >= @lv_zzplaannt AND
*          c~spras = @sy-langu.
*
*  IF sy-subrc <> 0.
*    MESSAGE i143(zpp) DISPLAY LIKE 'E'. "No hay datos para mostrar
*    EXIT.
*  ENDIF.
*
*  DATA: lv_ratio1 type i,
*        lv_ratio2 type i.
*
*  LOOP AT gt_outtab_aux ASSIGNING FIELD-SYMBOL(<fs_pos>).
*    lv_zzplalgntint2 = <fs_pos>-zzplalgnt.
*    lv_zzplaanntint2 = <fs_pos>-zzplaannt.
*    IF lv_zzplalgntint2 >= lv_zzplalgntint AND lv_zzplaanntint2 >= lv_zzplaanntint.
*      <fs_pos>-zzcantplan = ( lv_zzplalgntint2 DIV lv_zzplalgntint ) * ( lv_zzplaanntint2 DIV lv_zzplaanntint ) * <fs_pos>-clabs.
*      APPEND <fs_pos> TO gt_outtab.
*    ENDIF.
*  ENDLOOP.


ENDFORM.                    " GET_DATA

*&--------------------------------------------------------------------*
*&      Form  display_fullscreen
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
FORM display_fullscreen.
  DATA: lr_columns TYPE REF TO cl_salv_columns.
  DATA: lr_functions TYPE REF TO cl_salv_functions_list.
  DATA: lr_layout TYPE REF TO cl_salv_layout,
        ls_key    TYPE        salv_s_layout_key.

* Crear el ALV

  TRY.
      cl_salv_table=>factory(
        EXPORTING
          list_display = abap_false
        IMPORTING
          r_salv_table = gr_table
        CHANGING
          t_table      = gt_outtab ).
    CATCH cx_salv_msg.                                  "#EC NO_HANDLER
  ENDTRY.

* Definir las funciones estándar del ALV

*  gr_table->set_screen_status(
*    pfstatus      =  'SALV_STANDARD'
*    report        =  sy-repid
*    set_functions = gr_table->c_functions_all ).

  lr_functions = gr_table->get_functions( ).
  lr_functions->set_all( gc_true ).

* Crear el header
  PERFORM create_header_and_footer.

* Ocultar columnas que no se desean visualizar


  lr_columns = gr_table->get_columns( ).
  PERFORM set_columns_technical USING lr_columns.

*... Definir el Layout
  lr_layout = gr_table->get_layout( ).
  ls_key-report = sy-repid.
  lr_layout->set_key( ls_key ).

*... §4.2 set usage of default Layouts
*  lr_layout->set_default( gs_test-default ).

*... Restricción de guardado de ALV
  lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).

*... Definir Layout inicial
  IF p_lay IS NOT INITIAL.
    lr_layout->set_initial_layout( p_lay ).
  ENDIF.

*  DATA: lr_events TYPE REF TO cl_salv_events_table.
*
*  lr_events = gr_table->get_event( ).
*
*  CREATE OBJECT gr_events.
*
*  SET HANDLER gr_events->on_user_command FOR lr_events.

*... §5 display the table
  gr_table->display( ).

ENDFORM.                    "display_fullscreen

*&---------------------------------------------------------------------*
*&      Form  create_header_and_footer
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM create_header_and_footer .
  DATA: lr_top_element  TYPE REF TO cl_salv_form_layout_grid,
        lr_end_element  TYPE REF TO cl_salv_form_layout_flow,
        lr_grid         TYPE REF TO cl_salv_form_layout_grid,
        lr_header       TYPE REF TO cl_salv_form_header_info,
        lr_action       TYPE REF TO cl_salv_form_action_info,
        lr_textview1    TYPE REF TO cl_salv_form_text,
        lr_textview2    TYPE REF TO cl_salv_form_text,
        lr_textview3    TYPE REF TO cl_salv_form_text,
        lr_textview4    TYPE REF TO cl_salv_form_text,
        lr_icon         TYPE REF TO cl_salv_form_icon,
        lr_layout_grid1 TYPE REF TO cl_salv_form_layout_data_grid,
        lr_layout_grid2 TYPE REF TO cl_salv_form_layout_data_grid,
        lr_layout_grid3 TYPE REF TO cl_salv_form_layout_data_grid,
        lr_layout_grid4 TYPE REF TO cl_salv_form_layout_data_grid.

  CREATE OBJECT lr_top_element
    EXPORTING
      columns = 2.

  lr_header = lr_top_element->create_header_information(
    row = 1
    column = 1
    text     = 'Búsqueda de material obsoleto compatible'   "#EC NOTEXT
    tooltip  = 'Búsqueda de material obsoleto compatible' ). "#EC NOTEXT

*  lr_action = lr_top_element->create_action_information(
*    row = 2
*    column = 1
*    text     = 'Uebersicht ueber alle Flugdaten'          "#EC NOTEXT
*    tooltip  = 'Uebersicht ueber alle Flugdaten' ).      "#EC NOTEXT
*
*  lr_grid = lr_top_element->create_grid( row = 3
*                                         column = 1 ).
*
**  lr_grid->set_column_count( 2 ).
*
*  lr_textview1 = lr_grid->create_text(
*      row     = 1
*      column  = 1
*      text    = 'C11'     "#EC NOTEXT
*      tooltip = 'Tooltip' ).     "#EC NOTEXT
*
*  lr_textview2 = lr_grid->create_text(
*      row     = 1
*      column  = 2
*      text    = 'C12'     "#EC NOTEXT
*      tooltip = 'Tooltip' ).     "#EC NOTEXT
*
*  lr_textview3 = lr_grid->create_text(
*      row     = 2
*      column  = 1
*      text    = 'C21'     "#EC NOTEXT
*      tooltip = 'Tooltip' ).     "#EC NOTEXT
*
*  lr_textview4 = lr_grid->create_text(
*      row     = 2
*      column  = 2
*      text    = 'C22'     "#EC NOTEXT
*      tooltip = 'Tooltip' ).     "#EC NOTEXT

*  lr_layout_grid1 ?= lr_textview1->get_layout_data( ).
*  lr_layout_grid2 ?= lr_textview2->get_layout_data( ).
*  lr_layout_grid3 ?= lr_textview3->get_layout_data( ).
*  lr_layout_grid4 ?= lr_textview4->get_layout_data( ).

*  lr_layout_grid1->set_h_align( if_salv_form_c_h_align=>left ).

*  lr_layout_grid2->set_h_align( if_salv_form_c_h_align=>left ).
*  lr_layout_grid3->set_h_align( if_salv_form_c_h_align=>left ).
*
*  lr_layout_grid4->set_h_align( if_salv_form_c_h_align=>center ).

*  create object lr_icon
*    exporting
*      icon   = '@0A@'     "#EC NOTEXT
*      tooltip = 'Air'.     "#EC NOTEXT
*
*  call method lr_grid->set_element
*    exporting
*      row       = 3
*      column    = 1
*      r_element = lr_icon.

  gr_table->set_top_of_list( lr_top_element ).

* data: lr_eol type ref to cl_salv_form_header_info.
*  create object lr_eol
*    exporting
*      text    = 'This is my Footer'.     "#EC NOTEXT
*
* gr_table->set_end_of_list( lr_eol ).

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  set_columns_technical
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM set_columns_technical USING ir_columns TYPE REF TO cl_salv_columns.

  DATA: lr_column TYPE REF TO cl_salv_column.

  TRY.
      lr_column = ir_columns->get_column( 'ZZCOLOR' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'ZZPLALGNT' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'ZZPLAANNT' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'CUMLM' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'CINSM' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'CEINM' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'CSPEM' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'CRETM' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'CVMLA' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'CVMUM' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'CVMIN' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'CVMEI' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'CVMSP' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.

  TRY.
      lr_column = ir_columns->get_column( 'CVMRE' ).
      lr_column->set_technical( if_salv_c_bool_sap=>true ).
    CATCH cx_salv_not_found.                            "#EC NO_HANDLER
  ENDTRY.









ENDFORM.                    " set_columns_technical(
