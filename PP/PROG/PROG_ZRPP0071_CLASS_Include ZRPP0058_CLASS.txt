*&---------------------------------------------------------------------*
*&  Include           ZRPP0054_CLASS
*&---------------------------------------------------------------------*

CLASS lcl_event_handler DEFINITION.

  PUBLIC SECTION.
    METHODS:
      on_user_command FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function,
      set_layout
        CHANGING
          co_alv TYPE REF TO cl_salv_table.

    METHODS: on_link_click   FOR EVENT link_click OF
                  cl_salv_events_table
      IMPORTING row column.
ENDCLASS.                    "lcl_event_handler definition


CLASS lcl_event_handler IMPLEMENTATION.

  METHOD on_user_command.

    DATA: ls_59 TYPE ztpp0059.
    DATA: ls_reg_planta  TYPE zspp_vehiculos_planta.

    CASE e_salv_function.
      WHEN 'DETALLE'.
        PERFORM obtener_seleccion_alv200 CHANGING gt_rows.
        LOOP AT gt_rows INTO DATA(l_row).

          gs_dyn200 = CORRESPONDING #( gt_datos[ l_row ] ).

          call SCREEN 0200.
          LEAVE SCREEN.

        ENDLOOP.

* Tras mostrar detalle, refrescar datos de ALV por si se han actualizado observ. o anulado el registro.
***        CLEAR: gt_datos[].
***        PERFORM obtener_datos.
***
***        cl_gui_cfw=>set_new_ok_code( new_code = 'REFR' ).
***        cl_gui_cfw=>flush( ).

      WHEN 'TIQUET'.
        PERFORM obtener_seleccion_alv200 CHANGING gt_rows.
        LOOP AT gt_rows INTO l_row.
          ls_59 = CORRESPONDING #( gt_datos[ l_row ] ).

          CALL FUNCTION 'ZMFPP_IMPRESION_TIQUET_BASCULA'
            EXPORTING
              i_werks           = ls_59-werks
              i_id_reg_vehiculo = ls_59-id_reg_vehiculo.
*              is_datos_entr_vehiculo = ls_59.
          MESSAGE |Impresión del reg. vehículo { gs_dyn200-id_reg_vehiculo } realizada correctamente.| TYPE 'S'.

        ENDLOOP.
      WHEN 'OBSERV'.
*        PERFORM obtener_seleccion_alv200 CHANGING gt_rows.
*        LOOP AT gt_rows INTO l_row.
*               DATA(ls_reg_obs) = gt_datos[ l_row ].
*
*
*          PERFORM mostrar_popup_observ using ls_reg_obs-werks
*                                             ls_reg_obs-id_reg_vehiculo
*                                    changing ls_reg_obs-observaciones.
*        ENDLOOP.

      WHEN 'BORRAR'.
        PERFORM obtener_seleccion_alv200 CHANGING gt_rows.
        LOOP AT gt_rows INTO l_row.

          DATA(ls_reg_del) = gt_datos[ l_row ].
          IF ls_reg_del-estado = zclpp_reg_vehiculo_master=>gc_est_anulado.
            MESSAGE |Registro ya anulado.| type 'I' DISPLAY LIKE 'E'.
            exit.
          ENDIF.

*DATA: gt_datos TYPE STANDARD TABLE OF zclpp_reg_vehiculo_master=>ty_datos_list77.

          CLEAR ls_reg_planta.
          ls_reg_planta-werks           = ls_reg_del-werks.
          ls_reg_planta-id_reg_vehiculo = ls_reg_del-id_reg_vehiculo.
          ls_reg_planta-destino         = ls_reg_del-destino.
          ls_reg_planta-nombre          = |{ ls_reg_del-nombre } { ls_reg_del-apellidos }|.
          ls_reg_planta-zmatricula1     = ls_reg_del-zmatricula1.

          PERFORM borrar_registro USING ls_reg_planta.

        ENDLOOP.

    ENDCASE.

    CLEAR e_salv_function.
  ENDMETHOD.                    "on_user_command

  METHOD set_layout.
*
    DATA: lo_layout  TYPE REF TO cl_salv_layout,
          lf_variant TYPE slis_vari,
          ls_key     TYPE salv_s_layout_key.
*
*   get layout object
    lo_layout = gs_dyn_100-alv->get_layout( ).
*
*   set Layout save restriction
*   1. Set Layout Key .. Unique key identifies the Differenet ALVs
    ls_key-report = sy-repid.
    lo_layout->set_key( ls_key ).
*   2. Remove Save layout the restriction.
    lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
*
*   set initial Layout
    lf_variant = 'DEFAULT'.
    lo_layout->set_initial_layout( lf_variant ).
*
  ENDMETHOD.

  METHOD on_link_click.



  ENDMETHOD.
*  METHOD on_click.

  "Get Selected lines
*    CLEAR gt_rows[].
*    gt_rows = gr_selections->get_selected_rows( ).
*
*    IF lines( gt_rows ) > 1.
*      MESSAGE e298(zpp).
*    ENDIF.
*
*    BREAK-POINT.
  "Check there is at least one line selected
*    READ TABLE gt_rows INTO wa_rows INDEX 1.
*    IF sy-subrc <> 0.
*      MESSAGE i000(zf) WITH 'Select at least one line'.
*    ENDIF.
*
*    CLEAR v_nb.
*    LOOP AT gt_rows INTO wa_rows.
*      READ TABLE itab INTO itab INDEX wa_rows.
*      CHECK sy-subrc = 0.
*      v_nb = v_nb + 1.
*    ENDLOOP. "lt_rows
*
*    v_nb_lines = v_nb.
*
*    CLEAR v_message.
*    CONCATENATE 'Number of selected lines:' v_nb_lines INTO v_message SEPARATED BY space.
*
*    MESSAGE  v_message TYPE 'I'.

*  ENDMETHOD.                    "on_click
ENDCLASS.                    "lcl_event_handler implementation
"lcl_receiver IMPLEMENTATION
