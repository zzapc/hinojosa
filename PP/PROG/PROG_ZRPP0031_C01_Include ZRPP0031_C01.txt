*&---------------------------------------------------------------------*
*&  Include           ZXCO1C01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&       Class lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application DEFINITION.

* PUBLICO: Los métodos de los eventos
  PUBLIC SECTION.

*   Evento para actualizar los datos antes de que se modifique la tabla
    METHODS:
      handle_data_changed
                    FOR EVENT data_changed OF cl_gui_alv_grid
        IMPORTING er_data_changed e_onf4
                    e_onf4_before e_onf4_after e_ucomm,

*   Evento para actualizar los datos después de que se modifique la tabla
      handle_data_changed_finished
                    FOR EVENT data_changed_finished OF cl_gui_alv_grid
        IMPORTING e_modified et_good_cells,

*   Evento control toolbar
      handle_toolbar
                    FOR EVENT toolbar OF cl_gui_alv_grid
        IMPORTING e_object e_interactive,

*   Control eventos
      handle_user_command
                    FOR EVENT user_command OF cl_gui_alv_grid
        IMPORTING e_ucomm.
ENDCLASS.                    "lcl_application DEFINITION


*&---------------------------------------------------------------------*
*&       Class (Implementation)  lcl_application
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_application IMPLEMENTATION.

* Para los cambios (antes de que se modifique la tabla del ALV)
  METHOD handle_data_changed.
    DATA: ls_plpo TYPE plpo,
          ls_del  TYPE ztpp0013,
          ls_row  TYPE zspm0007,
          lv_ind  TYPE i,
          lv_pos  TYPE vornr,
          lv_equi TYPE equnr.

*   Controlamos que hay cambios
    CHECK er_data_changed->mt_mod_cells IS NOT INITIAL.

*   Vemos si se ha modificado la posición p el equipo
    LOOP AT er_data_changed->mt_mod_cells INTO DATA(ls_cells) WHERE ( fieldname = 'EQUNR' OR fieldname = 'VORNR' )
                                                AND value IS NOT INITIAL.
*     Guardamos indice
      lv_ind = sy-tabix.

*     Leemos la posición de la tabla para coger los dos datos
      READ TABLE gt_utillajes ASSIGNING FIELD-SYMBOL(<fs_utillajes>) INDEX ls_cells-row_id.
      IF sy-subrc EQ 0.

*       Limpiamos troquel y cliche
        CLEAR: <fs_utillajes>-copiatro, <fs_utillajes>-juegocli.

*       Miramos si estamos cambiando la posición
        IF ls_cells-fieldname EQ 'VORNR'.
          lv_pos = |{ ls_cells-value  ALPHA = IN }|.
        ELSE.
          lv_pos = <fs_utillajes>-vornr.
        ENDIF.

*       Miramos si estamos cambiando el equipo
        IF ls_cells-fieldname EQ 'EQUNR'.
          lv_equi = |{ ls_cells-value  ALPHA = IN }|.
        ELSE.
          lv_equi = <fs_utillajes>-equnr.
        ENDIF.

*       Controlamos que ambos datos estén informados
        CHECK lv_equi IS NOT INITIAL AND lv_pos IS NOT INITIAL.

*       Controlamos que el equipo sea correcto
        SELECT SINGLE equnr, eqtyp FROM equi INTO @DATA(ls_equi)
          WHERE equnr EQ @lv_equi.
        IF sy-subrc NE 0." OR ls_equi-eqtyp NE <fs_utillajes>-eqtyp.
*         Informamos que hay error.
          DATA(lv_error) = '1'.
        ELSE.
*         Miramos tipo de operación
          SELECT SINGLE b~vornr b~phseq b~steus
            FROM          plas AS a
            INNER JOIN    plpo AS b ON  a~plnty = b~plnty AND
                                        a~plnnr = b~plnnr AND
                                        a~plnkn = b~plnkn AND
                                        a~zaehl = b~zaehl
            INTO CORRESPONDING FIELDS OF ls_plpo
            WHERE a~plnty = gs_header-plnty
              AND a~plnnr = gs_header-plnnr
              AND a~plnal = gs_header-plnal
              AND ( b~phseq EQ 'Z4' OR b~phseq EQ 'Z5' )
              AND b~vornr EQ lv_pos
              AND b~phseq NE ''
              AND a~loekz EQ ''.

*         Miramos si coincide tipo de operación y tipo de equipo
          IF ls_plpo-phseq EQ 'Z4' AND ls_equi-eqtyp NE 'T'." AND <fs_utillajes>-eqtyp IS NOT INITIAL.
*           Informamos que hay error.
            lv_error = '2'.
          ELSEIF ls_plpo-phseq EQ 'Z5' AND ls_equi-eqtyp NE 'C'." AND <fs_utillajes>-eqtyp IS NOT INITIAL.
*           Informamos que hay error.
            lv_error = '2'.
          ELSE." <fs_utillajes>-vornr IS NOT INITIAL AND <fs_utillajes>-eqtyp IS NOT INITIAL.
            CLEAR ls_row.
            MOVE-CORRESPONDING <fs_utillajes> TO ls_row.
*           Informamos resto de campos de la linea
            zcl_im_zworkorder_update=>fill_row_alv(
              EXPORTING
                is_plpo  =  ls_plpo
                iv_equnr =  lv_equi
              IMPORTING
                es_alv   =  ls_row
            ).
            MOVE-CORRESPONDING ls_row TO <fs_utillajes>.
*         Refrescamos tabla
            CALL METHOD g_grid->refresh_table_display
              EXCEPTIONS
                finished = 1
                OTHERS   = 2.
          ENDIF.
        ENDIF.
      ENDIF.

*     Si ha habido error limpiamos
      IF lv_error EQ '2'.
*       Borramos posiciones de la tabla para que no cambie ALV con datos erroneos
        DELETE er_data_changed->mt_mod_cells WHERE row_id EQ ls_cells-row_id.

*       Lanzamos error
        MESSAGE i248(zpp) DISPLAY LIKE 'E'.
*       El tipo de operación no coincide con el tipo de equipo.
      ELSEIF lv_error EQ '1'.
*       Borramos posiciones de la tabla para que no cambie ALV con datos erroneos
        DELETE er_data_changed->mt_mod_cells WHERE row_id EQ ls_cells-row_id.

*       Lanzamos error
        MESSAGE i259(zpp) DISPLAY LIKE 'E' WITH lv_equi.
      ELSE.
*       Informamos esa posición como borrada de la tabla sin modificar. Viene modificada por el F4.
        READ TABLE gt_utillajes_ori ASSIGNING <fs_utillajes> INDEX ls_cells-row_id.
        IF sy-subrc EQ 0 AND sy-tcode EQ 'COR2'.
          CLEAR ls_del.

*         Informamos petición de borrado, fecha y hora
          MOVE-CORRESPONDING gs_header      TO ls_del.
          MOVE-CORRESPONDING <fs_utillajes> TO ls_del.
          ls_del-zzptbo       = 'X'.
          ls_del-zzfechaptbo  = sy-datum.
          ls_del-zzhoraptbo   = sy-uzeit.

*         Si la fecha de creación esta vacia la rellenamos
          IF ls_del-zzfechas IS INITIAL.
            ls_del-zzfechas  = sy-datum.
            ls_del-zzhoraas  = sy-uzeit.
          ENDIF.

*         Añadimos a tabla de borrados
          APPEND ls_del TO gt_borradas.
        ENDIF.
      ENDIF.

*     Refrescamos tabla
      CALL METHOD g_grid->refresh_table_display
        EXCEPTIONS
          finished = 1
          OTHERS   = 2.
    ENDLOOP.
  ENDMETHOD.                    "handle_data_changed

* Para los cambios (después de que se modifique la tabla del ALV)
  METHOD handle_data_changed_finished.
*    DATA: ls_plpo TYPE plpo,
*          ls_row  TYPE zspm0007,
*          ls_del  TYPE ztpp0013.
*
**   Vemos si se ha modificado la posición p el equipo
*    LOOP AT et_good_cells INTO DATA(ls_cells) WHERE fieldname = 'EQUNR'
*                                                 OR fieldname = 'VORNR'.
*
**     Informamos esa posición como borrada de la tabla sin modificar. Viene modificada por el F4.
*      READ TABLE gt_utillajes_ori ASSIGNING FIELD-SYMBOL(<fs_utillajes_aux>) INDEX ls_cells-row_id.
*      IF sy-subrc EQ 0.
*        CLEAR ls_del.
*
**       Informamos petición de borrado, fecha y hora
*        MOVE-CORRESPONDING gs_header      TO ls_del.
*        MOVE-CORRESPONDING <fs_utillajes_aux> TO ls_del.
*        ls_del-zzptbo       = 'X'.
*        ls_del-zzfechaptbo  = sy-datum.
*        ls_del-zzhoraptbo   = sy-uzeit.
*
**       Si la fecha de creación esta vacia la rellenamos
*        IF ls_del-zzfechas IS INITIAL.
*          ls_del-zzfechas  = sy-datum.
*          ls_del-zzhoraas  = sy-uzeit.
*        ENDIF.
*
**       Añadimos a tabla de borrados
*        APPEND ls_del TO gt_borradas.
*      ENDIF.
*
**     Leemos la posición de la tabla para coger los dos datos
*      READ TABLE gt_utillajes ASSIGNING FIELD-SYMBOL(<fs_utillajes>) INDEX ls_cells-row_id.
*      IF sy-subrc EQ 0.
*
**       Controlamos que se haya informado el equipo
*        CHECK <fs_utillajes>-equnr IS NOT INITIAL.
*
**       Limpiamos troquel y cliche
*        CLEAR: <fs_utillajes>-copiatro, <fs_utillajes>-juegocli.
*
**       Controlamos que el equipo sea correcto
*        SELECT SINGLE equnr, eqtyp FROM equi INTO @DATA(ls_equi)
*          WHERE equnr EQ @<fs_utillajes>-equnr.
*        IF sy-subrc NE 0 OR ls_equi-eqtyp NE <fs_utillajes>-eqtyp.
**         Informamos que hay error.
*          DATA(lv_error) = '1'.
*        ELSE.
*
**         Miramos tipo de operación
*          SELECT SINGLE b~vornr b~phseq b~steus
*            FROM          plas AS a
*            INNER JOIN    plpo AS b ON  a~plnty = b~plnty AND
*                                        a~plnnr = b~plnnr AND
*                                        a~plnkn = b~plnkn AND
*                                        a~zaehl = b~zaehl
*            INTO CORRESPONDING FIELDS OF ls_plpo
*            WHERE a~plnty = gs_header-plnty
*              AND a~plnnr = gs_header-plnnr
*              AND a~plnal = gs_header-plnal
*              AND ( b~phseq EQ 'Z4' OR b~phseq EQ 'Z5' )
*              AND b~vornr EQ <fs_utillajes>-vornr
*              AND b~phseq NE ''
*              AND a~loekz EQ ''.
*
**         Miramos si coincide tipo de operación y tipo de equipo
*          IF ls_plpo-phseq EQ 'Z4' AND <fs_utillajes>-eqtyp NE 'T' AND <fs_utillajes>-eqtyp IS NOT INITIAL.
**           Informamos que hay error.
*            lv_error = '2'.
*          ELSEIF ls_plpo-phseq EQ 'Z5' AND <fs_utillajes>-eqtyp NE 'C' AND <fs_utillajes>-eqtyp IS NOT INITIAL.
**           Informamos que hay error.
*            lv_error = '2'.
*          ELSEIF <fs_utillajes>-vornr IS NOT INITIAL AND <fs_utillajes>-eqtyp IS NOT INITIAL.
*            CLEAR ls_row.
*            MOVE-CORRESPONDING <fs_utillajes> TO ls_row.
**           Informamos resto de campos de la linea
*            zcl_im_zworkorder_update=>fill_row_alv(
*              EXPORTING
*                is_plpo  =  ls_plpo
*                iv_equnr =  <fs_utillajes>-equnr
*              IMPORTING
*                es_alv   =  ls_row
*            ).
*            MOVE-CORRESPONDING ls_row TO <fs_utillajes>.
**         Refrescamos tabla
*            CALL METHOD g_grid->refresh_table_display
*              EXCEPTIONS
*                finished = 1
*                OTHERS   = 2.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*
**     Si ha habido error limpiamos
*      IF lv_error EQ '2'.
*        CLEAR <fs_utillajes>.
*
**       Lanzamos error
*        MESSAGE i248(zpp) DISPLAY LIKE 'E'.
**       El tipo de operación no coincide con el tipo de equipo.
*      ELSEIF lv_error EQ '1'.
**       Lanzamos error
*        MESSAGE i259(zpp) DISPLAY LIKE 'E' WITH <fs_utillajes>-equnr.
*
*        CLEAR <fs_utillajes>.
*      ENDIF.
*
***     Informamos tabla en memorida compartida de GF ZPP_CIPASI para informar dynpro
**      CALL FUNCTION 'ZPP_SET_UTILLAJES'
**        EXPORTING
**          it_zttpm0007 = gt_utillajes
**          it_borrados  = gt_borradas.
*
**     Refrescamos tabla
*      CALL METHOD g_grid->refresh_table_display
*        EXCEPTIONS
*          finished = 1
*          OTHERS   = 2.
***     Si ha habido error limpiamos
**      IF lv_error IS NOT INITIAL.
**        CLEAR <fs_utillajes>.
**
***       Lanzamos error
**        MESSAGE i248(zpp) DISPLAY LIKE 'E'.
***       El tipo de operación no coincide con el tipo de equipo.
**      ENDIF.
**
***     Refrescamos tabla
**      CALL METHOD g_grid->refresh_table_display
**        EXCEPTIONS
**          finished = 1
**          OTHERS   = 2.
*    ENDLOOP.
  ENDMETHOD.                    "handle_data_changed

  METHOD handle_toolbar.
    DATA: ls_toolbar TYPE stb_button.

    CLEAR ls_toolbar.
    MOVE 'REMOVE' TO ls_toolbar-function.
    MOVE icon_delete TO ls_toolbar-icon.
    MOVE 'Borrar linea'(202) TO ls_toolbar-quickinfo.
    APPEND ls_toolbar TO e_object->mt_toolbar.

  ENDMETHOD.

  METHOD handle_user_command.
    DATA: lt_row TYPE lvc_t_row,
          ls_row TYPE lvc_s_row,
          ls_del TYPE ztpp0013.

*   Chequeamos evento
    CASE e_ucomm.
      WHEN 'REMOVE'.
*       Obtenemos líneas seleccionadas
        g_grid->get_selected_rows(
          IMPORTING
            et_index_rows = lt_row ).

*       Ordenamos decrecientemente
        SORT lt_row BY index DESCENDING.

*       Iteramos sobre todas las líneas a borrar
        LOOP AT lt_row INTO ls_row.
          READ TABLE gt_utillajes ASSIGNING FIELD-SYMBOL(<fs_utillajes>) INDEX ls_row-index.
          IF sy-subrc EQ 0.
*           Informamos petición de borrado, fecha y hora
            MOVE-CORRESPONDING gs_header      TO ls_del.
            MOVE-CORRESPONDING <fs_utillajes> TO ls_del.
            ls_del-zzptbo       = 'X'.
            ls_del-zzfechaptbo  = sy-datum.
            ls_del-zzhoraptbo   = sy-uzeit.

*           Si la fecha de creación esta vacia la rellenamos
            IF ls_del-zzfechas IS INITIAL.
              ls_del-zzfechas  = sy-datum.
              ls_del-zzhoraas  = sy-uzeit.
            ENDIF.

*           Añadimos a tabla de borrados
            APPEND ls_del TO gt_borradas.

*           Borramos línea
            DELETE gt_utillajes INDEX ls_row-index.
          ENDIF.
        ENDLOOP.

*       Refrescamos tabla
        CALL METHOD g_grid->refresh_table_display
          EXCEPTIONS
            finished = 1
            OTHERS   = 2.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.                    "lcl_application IMPLEMENTATION
