*&---------------------------------------------------------------------*
*&  Include           ZRPP0076_CLASS
*&---------------------------------------------------------------------*

CLASS lcl_event_handler DEFINITION.

  PUBLIC SECTION.

    METHODS:
      generar_cabecera,

      on_user_command FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function.
*      set_layout
*        CHANGING
*          co_alv TYPE REF TO cl_salv_table.
*    METHODS: on_click FOR EVENT added_function OF cl_salv_events.
    METHODS: on_link_click   FOR EVENT link_click OF
                cl_salv_events_table
      IMPORTING row column.

  PRIVATE SECTION.
    METHODS:
      set_top_of_page
        CHANGING
          co_alv TYPE REF TO cl_salv_table. " Set Top of page

ENDCLASS.                    "lcl_event_handler definition


CLASS lcl_event_handler IMPLEMENTATION.

  METHOD generar_cabecera.

*METHOD GENERATE_OUTPUT.
*Exception Class
    DATA: lc_msg TYPE REF TO cx_salv_msg.
*----------------------------------------------------------------------*
* We are calling the static Factory method which will give back
* the ALV object reference.
*----------------------------------------------------------------------*
*    TRY.
*        CALL METHOD CL_SALV_TABLE=>FACTORY
*          IMPORTING
*            R_SALV_TABLE = O_ALV
*          CHANGING
*            T_TABLE      = T_MARA.
*      CATCH CX_SALV_MSG INTO LC_MSG .
*    ENDTRY.
************************************************************************
* In this area we will call the methods which will set the
* different properties to the ALV
************************************************************************
* Calling Set PF status method
*    CALL METHOD SET_PF_STATUS
*      CHANGING
*        CO_ALV = O_ALV.       "set_end_of_page
* Calling the top of page method
    CALL METHOD set_top_of_page
      CHANGING
        co_alv = gr_alv.
* Calling the End of page method
*    CALL METHOD SET_END_OF_PAGE
*      CHANGING
*        CO_ALV = O_ALV.
************************************************************************
* Displaying the ALV
* Here we will call the DISPLAY method to get the output on the screen
************************************************************************
*    O_ALV->DISPLAY( ).
  ENDMETHOD.                    "generate_output


*******************

  METHOD on_user_command.

    CASE e_salv_function.
      WHEN 'STOCK'.
*        PERFORM f_refresh.
*      WHEN 'FABRIC'.
*        PERFORM visualizar_zpp0004.
*      when 'HELP'.
*        CALL FUNCTION 'ZMFPP_VENTANA_LEYENDA_ICONOS'.
*      WHEN OTHERS.
*
    ENDCASE.

  ENDMETHOD.                    "on_user_command

* Setting Top_of_page
  METHOD set_top_of_page.
    DATA: lo_header  TYPE REF TO cl_salv_form_layout_grid,
          lo_h_label TYPE REF TO cl_salv_form_label,
          lo_h_flow  TYPE REF TO cl_salv_form_layout_flow.
* Header object
    CREATE OBJECT lo_header.
*----------------------------------------------------------------------*
* To create a Label or Flow we have to specify the target
* row and column number where we need to set up the output
* text.
*----------------------------------------------------------------------*
* Information in Bold
    lo_h_label = lo_header->create_label( row = 1 column = 1 ).

    SELECT SINGLE name1
      INTO @DATA(l_nom_centre)
      FROM t001w
      WHERE werks = @p_werks.
    lo_h_label->set_text( l_nom_centre ).

    IF s_bedat IS NOT INITIAL.
      DATA(l_txt_fechas) = | Fecha de documento:|.
      DATA(l_fechas)     = |{ s_bedat[ 1 ]-low DATE = USER } - { s_bedat[ 1 ]-high DATE = USER }  |.
      DATA(l_data_ok)    = 'X'.
    ELSEIF s_lfdat IS NOT INITIAL.
      l_txt_fechas = | Fecha de entrega:|.
      l_fechas     = |{ s_lfdat[ 1 ]-low DATE = USER } - { s_lfdat[ 1 ]-high DATE = USER }  |.
      l_data_ok    = 'X'.
    ENDIF.

    IF l_data_ok = 'X'.
      lo_h_flow = lo_header->create_flow( row = 2 column = 1 ).
      lo_h_flow->create_text( text = l_txt_fechas ).
      lo_h_flow = lo_header->create_flow( row = 2 column = 2 ).
      lo_h_flow->create_text( text = l_fechas ).
    ENDIF.
* Set the top of list using the header for Online
    co_alv->set_top_of_list( lo_header ).

***  LOGO *************************************
*    DATA: lr_logo  TYPE REF TO cl_salv_form_layout_logo.
*    CREATE OBJECT lr_logo.
*    lr_logo->set_left_content( lo_header ).
*    lr_logo->set_right_logo( 'ENJOYSAP_LOGO' ).
*    co_alv->set_top_of_list( lr_logo ).



* Set the top of list using the header for Print
    co_alv->set_top_of_list_print( lo_header ).


* Set the element top_of_list
  ENDMETHOD.                    "set_top_of_page

  METHOD on_link_click.

    DATA: l_ebelp TYPE ebelp.

    TRY.
        DATA(ls_reg) = gt_datos[ row ].

        CASE column.
          WHEN 'VBELN'.
            CASE ls_reg-tp_pedido.
              WHEN 'V'.
                SET PARAMETER ID 'AUN' FIELD ls_reg-vbeln.
                CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.

              WHEN 'C'.
                l_ebelp = CONV #( ls_reg-posnr ).
                SET PARAMETER ID 'BES' FIELD ls_reg-vbeln.
                SET PARAMETER ID 'BSP' FIELD l_ebelp.
                CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
              WHEN OTHERS.
            ENDCASE.

          WHEN 'VBELN_ENT'.
            CHECK ls_reg-vbeln_ent IS NOT INITIAL.
            SET PARAMETER ID 'VL' FIELD ls_reg-vbeln_ent.
            CALL TRANSACTION 'VL03N' AND SKIP FIRST SCREEN.
        ENDCASE.
      CATCH cx_root .
    ENDTRY.

  ENDMETHOD.

ENDCLASS.                    "lcl_event_handler implementation
