*&---------------------------------------------------------------------*
*&  Include           ZRPP0072_F01
*&---------------------------------------------------------------------*
FORM montar_alv_sup.

  IF gs_dyn100-cont_sup IS NOT BOUND.

    CREATE OBJECT gs_dyn100-cont_sup
      EXPORTING
        container_name              = 'GS_DYN100-CONT_SUP'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.

        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn100-cont_sup
            container_name = 'GS_DYN100-CONT_SUP'
          IMPORTING
            r_salv_table   = gs_dyn100-alv_sup
          CHANGING
            t_table        = gt_datos_ofs_pend.

      CATCH cx_root .

    ENDTRY.

    PERFORM tunning_alv_sup.

    gs_dyn100-alv_sup->display( ).

  ELSE.

    gs_dyn100-alv_sup->refresh( ).

  ENDIF.

ENDFORM.

FORM montar_alv_200.

  IF gs_dyn200-container IS NOT BOUND.

    CREATE OBJECT gs_dyn200-container
      EXPORTING
        container_name              = 'GS_DYN200-CONTAINER'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.

        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn200-container
            container_name = 'GS_DYN200-CONTAINER'
          IMPORTING
            r_salv_table   = gs_dyn200-alv
          CHANGING
            t_table        = gs_dyn200-gt_repartos.

      CATCH cx_root.

    ENDTRY.

    PERFORM tunning_alv_200.

    gs_dyn200-alv->display( ).

  ELSE.

    gs_dyn200-alv->refresh( ).

  ENDIF.

  IF gs_dyn200-container_ab IS NOT BOUND.

    CREATE OBJECT gs_dyn200-container_ab
      EXPORTING
        container_name              = 'GS_DYN200-CONTAINER_AB'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.

        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn200-container_ab
            container_name = 'GS_DYN200-CONTAINER_AB'
          IMPORTING
            r_salv_table   = gs_dyn200-alv_ab
          CHANGING
            t_table        = gs_dyn200-gt_repartos_ab.

      CATCH cx_root.

    ENDTRY.

    PERFORM tunning_alv_200_ab.

    gs_dyn200-alv_ab->display( ).

  ELSE.

    gs_dyn200-alv_ab->refresh( ).

  ENDIF.

  IF gs_dyn200-container_stk IS NOT BOUND.

    CREATE OBJECT gs_dyn200-container_stk
      EXPORTING
        container_name              = 'GS_DYN200-CONTAINER_STK'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.

        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn200-container_stk
            container_name = 'GS_DYN200-CONTAINER_STK'
          IMPORTING
            r_salv_table   = gs_dyn200-alv_stock
          CHANGING
            t_table        = gs_dyn200-gt_stock.

      CATCH cx_root.

    ENDTRY.

    PERFORM tunning_alv_200_stk.

    gs_dyn200-alv_stock->display( ).

  ELSE.

    gs_dyn200-alv_stock->refresh( ).

  ENDIF.

ENDFORM.

FORM dropdown_200.

  DATA: lt_list  TYPE vrm_values,
        ls_value LIKE LINE OF lt_list.

  CLEAR: lt_list[], ls_value.
  ls_value-key   = 2.

  APPEND ls_value TO lt_list.
  ls_value-key   = 3.

  APPEND ls_value TO lt_list.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN200-NUM_BOBINAS'
      values = lt_list.

ENDFORM.

FORM montar_alv_inf.

  IF gs_dyn100-cont_inf IS NOT BOUND.

    CREATE OBJECT gs_dyn100-cont_inf
      EXPORTING
        container_name              = 'GS_DYN100-CONT_INF'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

* Se añaden al ALV los repartos sin asignar capacidad
    TRY.

        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn100-cont_inf
            container_name = 'GS_DYN100-CONT_INF'
          IMPORTING
            r_salv_table   = gs_dyn100-alv_inf
          CHANGING
            t_table        = gt_datos. "_sin_asig.

      CATCH cx_root.

    ENDTRY.

    PERFORM tunning_alv_inf.

    gs_dyn100-alv_inf->display( ).

  ELSE.

    gs_dyn100-alv_inf->refresh( ).

  ENDIF.

ENDFORM.

FORM tunning_alv_200_ab.

  DATA: lr_functions  TYPE REF TO cl_salv_functions_list,
        lr_columns    TYPE REF TO cl_salv_columns,
        lr_column     TYPE REF TO cl_salv_column_table,
        lr_events     TYPE REF TO cl_salv_events_table,
        lo_selections TYPE REF TO cl_salv_selections,
        lo_layout     TYPE REF TO cl_salv_layout,
        lv_key        TYPE salv_s_layout_key.

  lo_selections = gs_dyn200-alv_ab->get_selections( ).
  lo_selections->set_selection_mode( cl_salv_selections=>single ).

  lr_events = gs_dyn200-alv_ab->get_event( ).

  CREATE OBJECT gr_events_200_ab.
  SET HANDLER gr_events_200_ab->on_link_click FOR lr_events.

  lv_key-report = |{ sy-repid }ab|.
  lo_layout = gs_dyn200-alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn200-alv_ab->get_functions( ).
  lr_functions->set_all( 'X' ).

  lr_columns = gs_dyn200-alv_ab->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'VBELN' ).
      lr_column->set_short_text( value  = 'Pedido' ).
      lr_column->set_medium_text( value  = 'Pedido' ).
      lr_column->set_long_text( value  = 'Pedido' ).

    CATCH cx_salv_not_found.

  ENDTRY.

* Pedido linkable
  TRY.

      CALL METHOD lr_column->set_cell_type
        EXPORTING
          value = if_salv_c_cell_type=>hotspot.

    CATCH cx_salv_data_error.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'FECHA_ENT' ).
      lr_column->set_short_text( value  = 'F.entrega' ).
      lr_column->set_medium_text( value  = 'Fecha entrega' ).
      lr_column->set_long_text( value  = 'Fecha entrega' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_PED' ).
      lr_column->set_short_text( value  = 'Cant.repar' ).
      lr_column->set_medium_text( value  = 'Cant.reparto' ).
      lr_column->set_long_text( value  = 'Cantidad reparto' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_PTE' ).
      lr_column->set_short_text( value  = 'Cant.pend' ).
      lr_column->set_medium_text( value  = 'Cant.pendiente' ).
      lr_column->set_long_text( value  = 'Cantidad pendiente' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_TEO' ).
      lr_column->set_short_text( value  = 'Kg.plan OF' ).
      lr_column->set_medium_text( value  = 'Kg.planificados OF' ).
      lr_column->set_long_text( value  = 'Kg.planificados OF' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'AUFNR_BOB' ).
      lr_column->set_short_text( value  = 'OF bobina' ).
      lr_column->set_medium_text( value  = 'OF bobina' ).
      lr_column->set_long_text( value  = 'OF bobina' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      CALL METHOD lr_column->set_cell_type
        EXPORTING
          value = if_salv_c_cell_type=>hotspot.

    CATCH cx_salv_data_error.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_FAB' ).
      lr_column->set_short_text( value  = 'Kg.fabr OF' ).
      lr_column->set_medium_text( value  = 'Kg. fabricados OF' ).
      lr_column->set_long_text( value  = 'Kg. fabricados OF' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_PTE_OF' ).
      lr_column->set_short_text( value  = 'Kg.pend OF' ).
      lr_column->set_medium_text( value  = 'Kg.pendiente OF' ).
      lr_column->set_long_text( value  = 'Kg.pendiente OF' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'TP_PEDIDO' ).
      lr_column->set_visible( abap_false ).

    CATCH cx_salv_not_found.

  ENDTRY.

ENDFORM.


FORM tunning_alv_200_stk.

  DATA: lr_functions  TYPE REF TO cl_salv_functions_list,
        lr_columns    TYPE REF TO cl_salv_columns,
        lr_column     TYPE REF TO cl_salv_column_table,
        lr_events     TYPE REF TO cl_salv_events_table,
        lo_selections TYPE REF TO cl_salv_selections,
        lo_layout     TYPE REF TO cl_salv_layout,
        ls_color      TYPE lvc_s_colo,
        lv_key        TYPE salv_s_layout_key.  "To save ALV salv_table

* Se activa el evento doble-click.
  lr_events = gs_dyn200-alv_stock->get_event( ).
  SET HANDLER gr_events_200->on_double_click FOR lr_events.

  lo_selections = gs_dyn200-alv_stock->get_selections( ).
  lo_selections->set_selection_mode( cl_salv_selections=>single ).

  lr_columns = gs_dyn200-alv_stock->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  lv_key-report = |{ sy-repid }stk|.

  lo_layout = gs_dyn200-alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn200-alv_stock->get_functions( ).
  lr_functions->set_all( 'X' ).

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'KUNNR' ).
      lr_column->set_short_text( value  = 'Dest.' ).
      lr_column->set_medium_text( value  = 'Destinatario' ).
      lr_column->set_long_text( value  = 'Destinatario' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'DESC_CLI' ).
      lr_column->set_short_text( value  = 'N. Dest' ).
      lr_column->set_medium_text( value  = 'Nombre Destinatario' ).
      lr_column->set_long_text( value  = 'Nombre Destinatario' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_A' ).
      lr_column->set_short_text( value  = 'Kg. DE = A' ).
      lr_column->set_medium_text( value  = 'Kg. DE = A' ).
      lr_column->set_long_text( value  = 'Kg. DE = A' ).

      CLEAR ls_color.
      ls_color-col = 5.
      ls_color-int = 0.
      ls_color-inv = 0.

      lr_column->set_color( ls_color ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_R' ).
      lr_column->set_short_text( value  = 'Kg. DE = R' ).
      lr_column->set_medium_text( value  = 'Kg. DE = R' ).
      lr_column->set_long_text( value  = 'Kg. DE = R' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_SIN' ).
      lr_column->set_short_text( value  = 'Kg.sin as.' ).
      lr_column->set_medium_text( value  = 'Kg. sin asignar' ).
      lr_column->set_long_text( value  = 'Kg. sin asignar' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_P' ).
      lr_column->set_short_text( value  = 'Kg. DE P' ).
      lr_column->set_medium_text( value  = 'Kg. DE = P' ).
      lr_column->set_long_text( value  = 'Kg. DE = P' ).

    CATCH cx_salv_not_found.

  ENDTRY.

ENDFORM.

FORM tunning_alv_200.

  DATA: lr_functions  TYPE REF TO cl_salv_functions_list,
        lr_columns    TYPE REF TO cl_salv_columns,
        lr_column     TYPE REF TO cl_salv_column_table,
        lr_events     TYPE REF TO cl_salv_events_table,
        lo_selections TYPE REF TO cl_salv_selections,
        lo_layout     TYPE REF TO cl_salv_layout,
        ls_color      TYPE lvc_s_colo,
        lv_key        TYPE salv_s_layout_key.

  lr_events = gs_dyn200-alv->get_event( ).

  lo_selections = gs_dyn200-alv->get_selections( ).
  lo_selections->set_selection_mode( cl_salv_selections=>none ).

  CREATE OBJECT gr_events_200.
  SET HANDLER gr_events_200->on_user_command FOR lr_events.
  SET HANDLER gr_events_200->on_link_click FOR lr_events.

  lv_key-report = sy-repid.

  lo_layout = gs_dyn200-alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn200-alv->get_functions( ).
  lr_functions->set_all( 'X' ).
  lr_columns = gs_dyn200-alv->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'FECHA_FAB' ).
      lr_column->set_short_text( value  = 'F.fabric.' ).
      lr_column->set_medium_text( value  = 'Fecha fabricación' ).
      lr_column->set_long_text( value  = 'Fecha fabricación' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'ANCHO_BOB' ).
      lr_column->set_short_text( value  = 'Ancho bob.' ).
      lr_column->set_medium_text( value  = 'Ancho bobina' ).
      lr_column->set_long_text( value  = 'Ancho bobina' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'FECHA_ENT' ).
      lr_column->set_short_text( value  = 'F.entrega' ).
      lr_column->set_medium_text( value  = 'Fecha entrega' ).
      lr_column->set_long_text( value  = 'Fecha entrega' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'VBELN' ).
      lr_column->set_short_text( value  = 'Pedido' ).
      lr_column->set_medium_text( value  = 'Pedido' ).
      lr_column->set_long_text( value  = 'Pedido' ).

    CATCH cx_salv_not_found.

  ENDTRY.

* Pedido linkable
  TRY.

      CALL METHOD lr_column->set_cell_type
        EXPORTING
          value = if_salv_c_cell_type=>hotspot.
      .
    CATCH cx_salv_data_error.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'KUNNR' ).
      lr_column->set_short_text( value  = 'Dest.' ).
      lr_column->set_medium_text( value  = 'Destinatario' ).
      lr_column->set_long_text( value  = 'Destinatario' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'DESC_CLI' ).
      lr_column->set_short_text( value  = 'N. Dest.' ).
      lr_column->set_medium_text( value  = 'Nombre Destinatario' ).
      lr_column->set_long_text( value  = 'Nombre Destinatario' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_TEO' ).
      lr_column->set_short_text( value  = 'Cant.teór.' ).
      lr_column->set_medium_text( value  = 'Cantidad teórica' ).
      lr_column->set_long_text( value  = 'Cantidad teórica' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_OF' ).
      lr_column->set_short_text( value  = 'Cant. OF' ).
      lr_column->set_medium_text( value  = 'Cantidad OF' ).
      lr_column->set_long_text( value  = 'Cantidad OF' ).

      CLEAR: ls_color.
      ls_color-col = 3.
      ls_color-int = 0.
      ls_color-inv = 0.

      lr_column->set_color( ls_color ).

    CATCH cx_salv_not_found.

  ENDTRY.

ENDFORM.

FORM tunning_alv_sup.

  DATA: lr_functions  TYPE REF TO cl_salv_functions_list,
        lr_columns    TYPE REF TO cl_salv_columns,
        lr_column     TYPE REF TO cl_salv_column_table,
        lr_events     TYPE REF TO cl_salv_events_table,
        lo_selections TYPE REF TO cl_salv_selections,
        lo_layout     TYPE REF TO cl_salv_layout,
        lv_text       TYPE string,
        lv_key        TYPE salv_s_layout_key.  "To save ALV salv_table

  lr_events = gs_dyn100-alv_sup->get_event( ).

  lo_selections = gs_dyn100-alv_sup->get_selections( ).
  lo_selections->set_selection_mode( cl_salv_selections=>multiple ).

  CREATE OBJECT gr_events_sup.
  SET HANDLER gr_events_sup->on_user_command FOR lr_events.
  SET HANDLER gr_events_sup->on_link_click FOR lr_events.

  lv_key-report = sy-repid.

  lo_layout = gs_dyn100-alv_sup->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn100-alv_sup->get_functions( ).
  lr_functions->set_all( 'X' ).

  TRY.

      lv_text = 'Anular OFs'.
      lr_functions->add_function(
        name     = 'CERRAR_OF'
        icon     = '@3X@'
        text     = lv_text
        tooltip  = lv_text
        position = if_salv_c_function_position=>right_of_salv_functions ).

    CATCH cx_salv_wrong_call cx_salv_existing.

  ENDTRY.

  TRY.

      lv_text = 'Replanificar OFs'.
      lr_functions->add_function(
        name     = 'REPLAN'
        icon     = '@40@'
        text     = lv_text
        tooltip  = lv_text
        position = if_salv_c_function_position=>right_of_salv_functions ).

    CATCH cx_salv_wrong_call cx_salv_existing.

  ENDTRY.

  lr_columns = gs_dyn100-alv_sup->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'AUFNR' ).
      lr_column->set_short_text( value  = 'OF Bobina' ).
      lr_column->set_medium_text( value  = 'OF Bobina' ).
      lr_column->set_long_text( value  = 'OF Bobina' ).

    CATCH cx_salv_not_found.

  ENDTRY.

* Orden linkable (COR3)
  TRY.

      CALL METHOD lr_column->set_cell_type
        EXPORTING
          value = if_salv_c_cell_type=>hotspot.
      .
    CATCH cx_salv_data_error.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MAKTX' ).
      lr_column->set_short_text( value  = 'D. mat bob' ).
      lr_column->set_medium_text( value  = 'Desc. mat. bobina' ).
      lr_column->set_long_text( value  = 'Descripción material bobina' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MEINS_PLAN_BOBI' ).
      lr_column->set_short_text( value  = 'UMB' ).
      lr_column->set_medium_text( value  = 'UMB' ).
      lr_column->set_long_text( value  = 'UMB' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MEINS_FAB_BOBI' ).
      lr_column->set_short_text( value  = 'UMB' ).
      lr_column->set_medium_text( value  = 'UMB' ).
      lr_column->set_long_text( value  = 'UMB' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MEINS_PLAN_ROL' ).
      lr_column->set_short_text( value  = 'UMB' ).
      lr_column->set_medium_text( value  = 'UMB' ).
      lr_column->set_long_text( value  = 'UMB' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MEINS_FAB_ROL' ).
      lr_column->set_short_text( value  = 'UMB' ).
      lr_column->set_medium_text( value  = 'UMB' ).
      lr_column->set_long_text( value  = 'UMB' ).
      lr_column->set_visible( abap_false ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'FECHA_FAB' ).
      lr_column->set_short_text( value  = 'F.fabric.' ).
      lr_column->set_medium_text( value  = 'Fecha fabricación' ).
      lr_column->set_long_text( value  = 'Fecha fabricación' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'ANCHO_BOB' ).
      lr_column->set_short_text( value  = 'Ancho bob.' ).
      lr_column->set_medium_text( value  = 'Ancho bobina' ).
      lr_column->set_long_text( value  = 'Ancho bobina' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'FECHA_ENT' ).
      lr_column->set_short_text( value  = 'F.entrega' ).
      lr_column->set_medium_text( value  = 'Fecha entrega' ).
      lr_column->set_long_text( value  = 'Fecha entrega' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'VBELN' ).
      lr_column->set_short_text( value  = 'Pedido' ).
      lr_column->set_medium_text( value  = 'Pedido' ).
      lr_column->set_long_text( value  = 'Pedido' ).

    CATCH cx_salv_not_found.

  ENDTRY.

* Pedido linkable
  TRY.

      CALL METHOD lr_column->set_cell_type
        EXPORTING
          value = if_salv_c_cell_type=>hotspot.

    CATCH cx_salv_data_error.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'DESC_CLI' ).
      lr_column->set_short_text( value  = 'Desc.clien' ).
      lr_column->set_medium_text( value  = 'Descrip. cliente' ).
      lr_column->set_long_text( value  = 'Descripción cliente' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE_TEO' ).
      lr_column->set_short_text( value  = 'Cant.teór.' ).
      lr_column->set_medium_text( value  = 'Cantidad teórica' ).
      lr_column->set_long_text( value  = 'Cantidad teórica' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'AUFNR_ROL' ).
      lr_column->set_short_text( value  = 'OF rollo' ).
      lr_column->set_medium_text( value  = 'OF rollo' ).
      lr_column->set_long_text( value  = 'OF rollo' ).
    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      CALL METHOD lr_column->set_cell_type
        EXPORTING
          value = if_salv_c_cell_type=>hotspot.

    CATCH cx_salv_data_error.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'ANCHO_ROL' ).
      lr_column->set_short_text( value  = 'Ancho roll' ).
      lr_column->set_medium_text( value  = 'Ancho rollo' ).
      lr_column->set_long_text( value  = 'Ancho rollo' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MATNR_ROL' ).
      lr_column->set_short_text( value  = 'Mat.rollo' ).
      lr_column->set_medium_text( value  = 'Material rollo' ).
      lr_column->set_long_text( value  = 'Material rollo' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MAKTX_ROL' ).
      lr_column->set_short_text( value  = 'Desc.rollo' ).
      lr_column->set_medium_text( value  = 'Descr.material rollo' ).
      lr_column->set_long_text( value  = 'Descr.material rollo' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'KG_PLAN_BOBI' ).
      lr_column->set_short_text( value  = 'Kg pla bob' ).
      lr_column->set_medium_text( value  = 'Kg. planif. bobina' ).
      lr_column->set_long_text( value  = 'Kg. planif. bobina' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'KG_FABR_BOBI' ).
      lr_column->set_short_text( value  = 'Kg fab bob' ).
      lr_column->set_medium_text( value  = 'Kg. fabric. bobina' ).
      lr_column->set_long_text( value  = 'Kg. fabric. bobina' ).
      lr_column->set_visible( abap_false ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'KG_PLAN_ROL' ).
      lr_column->set_short_text( value  = 'Kg pla rol' ).
      lr_column->set_medium_text( value  = 'Kg. planif. rollo' ).
      lr_column->set_long_text( value  = 'Kg. planif. rollo' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'KG_FAB_ROL' ).
      lr_column->set_short_text( value  = 'Kg.fab.Rol' ).
      lr_column->set_medium_text( value  = 'Kg.fabric.Rollo' ).
      lr_column->set_long_text( value  = 'Kg.fabric. Rollo' ).
      lr_column->set_visible( abap_false ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'ICON_ESTAT' ).
      lr_column->set_visible( abap_false ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'ICON_BOB_PART_MAX' ).
      lr_column->set_visible( abap_false ).

    CATCH cx_salv_not_found.

  ENDTRY.

ENDFORM.

FORM tunning_alv_inf.

  DATA: lr_functions  TYPE REF TO cl_salv_functions_list,
        lr_columns    TYPE REF TO cl_salv_columns,
        lr_column     TYPE REF TO cl_salv_column_table,
        lr_events     TYPE REF TO cl_salv_events_table,
        lo_layout     TYPE REF TO cl_salv_layout,
        lo_selections TYPE REF TO cl_salv_selections,
        lv_text       TYPE string,
        lv_key        TYPE salv_s_layout_key.  "To save ALV salv_table

  lo_selections = gs_dyn100-alv_inf->get_selections( ).
  lo_selections->set_selection_mode( cl_salv_selections=>multiple ).

  lr_events = gs_dyn100-alv_inf->get_event( ).

  CREATE OBJECT gr_events_inf.
  SET HANDLER gr_events_inf->on_user_command FOR lr_events.
  SET HANDLER gr_events_inf->on_link_click FOR lr_events.

  lv_key-report = sy-repid.

  lo_layout = gs_dyn100-alv_inf->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn100-alv_inf->get_functions( ).
  lr_functions->set_all( 'X' ).

  TRY.

      lv_text = 'Refrescar'.
      lr_functions->add_function(
        name     = 'REFRESCAR'
        icon     = '@42@' "space
        text     = lv_text
        tooltip  = lv_text
        position = if_salv_c_function_position=>right_of_salv_functions ).

    CATCH cx_salv_wrong_call cx_salv_existing.

  ENDTRY.

  TRY.

      lv_text = 'Crear OF'.
      lr_functions->add_function(
        name     = 'CREAR_OF'
        icon     = '@45@'
        text     = lv_text
        tooltip  = lv_text
        position = if_salv_c_function_position=>right_of_salv_functions ).

    CATCH cx_salv_wrong_call cx_salv_existing.

  ENDTRY.

  lr_columns = gs_dyn100-alv_inf->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'CANT_PEND' ).
      lr_column->set_short_text( value  = 'Cant.pend' ).
      lr_column->set_medium_text( value = 'Cant.pendiente' ).
      lr_column->set_long_text( value   = 'Cantidad pendiente' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MAKTX' ).
      lr_column->set_short_text( value  = 'Desc mat.' ).
      lr_column->set_medium_text( value  = 'Descripción material' ).
      lr_column->set_long_text( value  = 'Descripción material' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'FECHA_ENT' ).
      lr_column->set_short_text( value  = 'F.entrega' ).
      lr_column->set_medium_text( value = 'Fecha entrega' ).
      lr_column->set_long_text( value   = 'Fecha entrega' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MENGE' ).
      lr_column->set_short_text( value  = 'Cant.repar' ).
      lr_column->set_medium_text( value = 'Cant.reparto' ).
      lr_column->set_long_text( value   = 'Cantidad reparto' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'VBELN' ).
      lr_column->set_short_text( value  = 'Pedido' ).
      lr_column->set_medium_text( value = 'Pedido' ).
      lr_column->set_long_text( value   = 'Pedido' ).

    CATCH cx_salv_not_found.

  ENDTRY.

* Pedido linkable
  TRY.

      CALL METHOD lr_column->set_cell_type
        EXPORTING
          value = if_salv_c_cell_type=>hotspot.

    CATCH cx_salv_data_error.

  ENDTRY.

* Se modifica nombre del campo KUNNR
  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'KUNNR' ).
      lr_column->set_short_text( value  = 'Dest.' ).
      lr_column->set_medium_text( value = 'Destinatario' ).
      lr_column->set_long_text( value   = 'Destinatario' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'DESC_CLI' ).
      lr_column->set_short_text( value  = 'N. dest.' ).
      lr_column->set_medium_text( value = 'Nombre destinatario' ).
      lr_column->set_long_text( value   = 'Nombre destinatario' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MEINS' ).
      lr_column->set_short_text( value  = 'UMB' ).
      lr_column->set_medium_text( value = 'UMB' ).
      lr_column->set_long_text( value   = 'UMB' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'MEINS_PEND' ).
      lr_column->set_short_text( value  = 'UMB' ).
      lr_column->set_medium_text( value = 'UMB' ).
      lr_column->set_long_text( value   = 'UMB' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'VBELN_CLI' ).
      lr_column->set_short_text( value  = 'Pedido cli' ).
      lr_column->set_medium_text( value = 'Pedido cliente' ).
      lr_column->set_long_text( value   = 'Pedido cliente' ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'WERKS' ).
      lr_column->set_visible( abap_false ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'AUFNR' ).
      lr_column->set_visible( abap_false ).

    CATCH cx_salv_not_found.

  ENDTRY.

  TRY.

      lr_column ?= lr_columns->get_column( columnname = 'SEMANA' ).
      lr_column->set_visible( abap_false )..

    CATCH cx_salv_not_found.

  ENDTRY.

ENDFORM.

FORM on_link_click_inf USING row.

  TRY.

      DATA(ls_datos) = gt_datos[ row ].
      PERFORM navegar_pedido USING ls_datos-tp_pedido
                                   ls_datos-vbeln.

    CATCH cx_root.

  ENDTRY.

**  TRY.
**
**      DATA(ls_datos_asig) = gt_datos_asig[ row ].
**      PERFORM navegar_pedido USING ls_datos_asig-tp_pedido
**                                   ls_datos_asig-vbeln.
**
**    CATCH cx_root.
**
**  ENDTRY.
**
**  TRY.
**
**      DATA(ls_datos_sin_asig) = gt_datos_sin_asig[ row ].
**      PERFORM navegar_pedido USING ls_datos_sin_asig-tp_pedido
**                                   ls_datos_sin_asig-vbeln.
**
**    CATCH cx_root.
**
**  ENDTRY.

ENDFORM.

**FORM handle_user_command_sup USING i_ucomm TYPE salv_de_function.
**
**  DATA: lt_rows TYPE salv_t_row.
**
**  CASE i_ucomm.
**
**    WHEN 'ASIG_ANT'.
**
**      PERFORM asignar_capacidad_anterior.
**      PERFORM mover_datos_cap_neta_prod.
**
**    WHEN 'ASIG_SIG'.
**
**      PERFORM asignar_capacidad_posterior.
**      PERFORM mover_datos_cap_neta_prod.
**
**    WHEN 'LIBERAR'.
**
**      PERFORM liberar_capacidad.
**      PERFORM mover_datos_cap_neta_prod.
**
**    WHEN OTHERS.
**
**  ENDCASE.
**
**ENDFORM.

FORM handle_user_command_inf USING i_ucomm TYPE salv_de_function.

  DATA: lt_rows    TYPE salv_t_row,
        lt_pedidos TYPE zclpp_capacidad_asignada=>tty_pedidos.

  CASE i_ucomm.

    WHEN 'CREAR_OF'.

      PERFORM invocar_window_crear_of.

      CALL METHOD gr_semana_crea_of->refrescar_tablas_alvs.

      PERFORM refrescar_alvs.

      cl_gui_cfw=>set_new_ok_code( new_code = 'REFR' ).
      cl_gui_cfw=>flush( ).

    WHEN 'REFRESCAR'.

* Se marca el flag para no obtener repartos con OF
      CALL METHOD gr_semana_crea_of->refrescar_tablas_alvs.
      PERFORM refrescar_alvs. " USING 'I'.
      cl_gui_cfw=>set_new_ok_code( new_code = 'REFR' ).
      cl_gui_cfw=>flush( ).

    WHEN OTHERS.

  ENDCASE.

ENDFORM.

FORM on_link_click_sup USING row column.

  DATA: l_tp_pedido TYPE char1.

  CASE column.

    WHEN 'VBELN'.

      TRY.

          DATA(ls_datos_of_pend) = gt_datos_ofs_pend[ row ].

          ls_datos_of_pend-vbeln = |{ ls_datos_of_pend-vbeln ALPHA = OUT }|.

          CHECK ls_datos_of_pend-vbeln(4) <> '9000'. "Se valida que no sea un pedido ficticio.

          IF ls_datos_of_pend-vbeln(2) EQ '44'.

            l_tp_pedido = 'C'.

          ELSE.

            l_tp_pedido = 'V'.

          ENDIF.

          PERFORM navegar_pedido USING l_tp_pedido
                                       ls_datos_of_pend-vbeln.

        CATCH cx_root.

      ENDTRY.

    WHEN 'AUFNR_ROL'.

      TRY.

          ls_datos_of_pend = gt_datos_ofs_pend[ row ].
          CHECK ls_datos_of_pend-aufnr_rol IS NOT INITIAL.

          FREE MEMORY ID 'BR1'.
          SET PARAMETER ID 'BR1' FIELD ls_datos_of_pend-aufnr_rol.
          CALL TRANSACTION 'COR3' AND SKIP FIRST SCREEN.

        CATCH cx_root.

      ENDTRY.

    WHEN 'AUFNR'.

      TRY.

          ls_datos_of_pend = gt_datos_ofs_pend[ row ].
          CHECK ls_datos_of_pend-aufnr IS NOT INITIAL.

          FREE MEMORY ID 'BR1'.
          SET PARAMETER ID 'BR1' FIELD ls_datos_of_pend-aufnr.
          CALL TRANSACTION 'COR3' AND SKIP FIRST SCREEN.

        CATCH cx_root.

      ENDTRY.

    WHEN OTHERS.

  ENDCASE.

ENDFORM.

FORM on_link_click_200 USING row.

  TRY.

      DATA(ls_datos_rep) = gs_dyn200-gt_repartos[ row ].

      PERFORM navegar_pedido USING ls_datos_rep-tp_pedido
                                   ls_datos_rep-vbeln.

    CATCH cx_root.

  ENDTRY.

ENDFORM.

FORM on_link_click_200_ab USING row column.

  CASE column.

    WHEN 'VBELN'.

      TRY.
          DATA(ls_datos_ab) = gs_dyn200-gt_repartos_ab[ row ].

          PERFORM navegar_pedido USING ls_datos_ab-tp_pedido
                                       ls_datos_ab-vbeln.

        CATCH cx_root.

      ENDTRY.

    WHEN 'AUFNR_BOB'.

      ls_datos_ab = gs_dyn200-gt_repartos_ab[ row ].
      CHECK ls_datos_ab-aufnr_bob IS NOT INITIAL.
      FREE MEMORY ID 'BR1'.
      SET PARAMETER ID 'BR1' FIELD ls_datos_ab-aufnr_bob.
      CALL TRANSACTION 'COR3' AND SKIP FIRST SCREEN.

    WHEN OTHERS.

  ENDCASE.

ENDFORM.

FORM navegar_pedido USING p_tp_pedido TYPE char1
                          p_pedido    TYPE vbeln.

  CHECK p_pedido IS NOT INITIAL.

  CASE p_tp_pedido.

    WHEN 'C'.

      FREE MEMORY ID 'BES'.
      SET PARAMETER ID 'BES' FIELD p_pedido.
      CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.

    WHEN 'V'.

      FREE MEMORY ID 'AUN'.
      SET PARAMETER ID 'AUN' FIELD p_pedido.
      CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.

    WHEN OTHERS.

  ENDCASE.

ENDFORM.

FORM obtener_seleccion  USING p_alv  TYPE REF TO cl_salv_table
                     CHANGING p_rows TYPE salv_t_row.

  DATA: lr_selections TYPE REF TO cl_salv_selections.

  lr_selections = p_alv->get_selections( ).
  p_rows        = lr_selections->get_selected_rows( ).

ENDFORM.

FORM invocar_window_crear_of.

  DATA: lt_rows    TYPE salv_t_row,
        ls_reparto TYPE zclpp_creacion_ofs=>ty_reparto_selec.

  PERFORM obtener_seleccion USING gs_dyn100-alv_inf CHANGING lt_rows.

* Se valida que se hayan selecionado repartos.
  IF lt_rows IS INITIAL.

    MESSAGE |Seleccionar repartos.| TYPE 'I'.
    EXIT.

  ENDIF.

* Se inicializan los campos y tablas de la ventana de creación de OF's
  CLEAR: gs_dyn200-gt_repartos[], gs_dyn200-gt_stock[] , gs_dyn200-gt_repartos_ab[],
         gs_dyn200-ancho_cabo   , gs_dyn200-menge_cabo ,
         gs_dyn200-ancho_total  , gs_dyn200-menge_total.

* Se obtienen las lineas seleccionadas para validar y cargar pantalla creación de OFs
  LOOP AT lt_rows INTO DATA(l_row).

* Modificación de datos ALV
    DATA(ls_rep)       = gt_datos[ l_row ]. "gt_datos_sin_asig[ l_row ].

    ls_reparto         = CORRESPONDING #( ls_rep ).
    INSERT ls_reparto INTO TABLE gs_dyn200-gt_repartos[].

  ENDLOOP.

  CALL METHOD gr_semana_crea_of->get_datos_ini_creacion_of
    IMPORTING
      ot_stock             = gs_dyn200-gt_stock[]
      ot_repartos_abiertos = gs_dyn200-gt_repartos_ab[]
      o_fecha_fabr_final   = gs_dyn200-fecha_fin_fab
      o_cantidad           = gs_dyn200-menge
      o_kg_totales         = gs_dyn200-menge_total
      o_ancho_total        = gs_dyn200-ancho_total
      o_rc                 = DATA(lv_rc)
    CHANGING
      ct_repartos          = gs_dyn200-gt_repartos[].

  CASE lv_rc.

    WHEN '00'.

    WHEN '01'.

      MESSAGE |Ancho total superior al ancho máximo de máquina({ gr_semana_crea_of->gc_ancho_max }mm).| TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.

    WHEN '03'.

      MESSAGE |Materiales no combinables.| TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.

    WHEN OTHERS.

  ENDCASE.

  CHECK lv_rc = '00'.

  gs_dyn200-sw_simple     = 'X'.
  gs_dyn200-sw_partida    = ' '.
  gs_dyn200-num_bobinas   = 1.
  gs_dyn200-matnr         = gs_dyn200-gt_repartos[ 1 ]-matnr.
  gs_dyn200-maktx         = gs_dyn200-gt_repartos[ 1 ]-maktx.
  gs_dyn200-kunnr         = gs_dyn200-gt_repartos[ 1 ]-kunnr.
  gs_dyn200-desc_cli      = gs_dyn200-gt_repartos[ 1 ]-desc_cli.

  CALL SCREEN 200.

ENDFORM.

FORM refresh_pedidos_abie_cli USING p_kunnr    TYPE kunnr
                                    p_desc_cli TYPE char30
                                    p_matnr    TYPE matnr
                                    p_maktx    TYPE maktx.

  gs_dyn200-kunnr    = p_kunnr.
  gs_dyn200-desc_cli = p_desc_cli.
  gs_dyn200-matnr    = p_matnr.
  gs_dyn200-maktx    = p_maktx.

  CALL METHOD zclpp_creacion_ofs=>get_pedidos_abiertos
    EXPORTING
      i_werks              = gs_dyn100-werks
      i_kunnr              = p_kunnr
      i_matnr              = p_matnr
    IMPORTING
      ot_repartos_abiertos = gs_dyn200-gt_repartos_ab.

* Se borra el propio registro que ya tenemos seleccionado en el ALV superior.
  TRY.

      DATA(ls_reg_selec) = gs_dyn200-gt_repartos[ kunnr = p_kunnr
                                                  matnr = p_matnr ].

      DELETE gs_dyn200-gt_repartos_ab WHERE vbeln = ls_reg_selec-vbeln AND
                                            posnr = ls_reg_selec-posnr AND
                                            etenr = ls_reg_selec-etenr.

    CATCH cx_root.

  ENDTRY.

  gs_dyn200-alv_ab->refresh( ).

  cl_gui_cfw=>set_new_ok_code( 'VOID' ).

  cl_gui_cfw=>flush( ).

ENDFORM.

FORM check_pantalla_200 CHANGING p_rc TYPE char2.

  CALL METHOD gr_semana_crea_of->check_datos_creacion_ok
    EXPORTING
      i_ancho_cabo       = gs_dyn200-ancho_cabo
      i_num_bobinas      = gs_dyn200-num_bobinas
    IMPORTING
      o_kg_cabo          = gs_dyn200-menge_cabo
      o_kg_totales       = gs_dyn200-menge_total
      o_ancho_total      = gs_dyn200-ancho_total
      o_rc               = p_rc
    CHANGING
      c_fecha_fabr_final = gs_dyn200-fecha_fin_fab
      c_cantidad         = gs_dyn200-menge
      ct_repartos        = gs_dyn200-gt_repartos[].

  CASE p_rc.

    WHEN '00'.

    WHEN '01'.

      MESSAGE |Ancho total superior al ancho máximo de máquina({ gr_semana_crea_of->gc_ancho_max }mm).| TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.

    WHEN '02'.

      MESSAGE |Ancho total inferior al ancho mínimo de máquina({ gr_semana_crea_of->gc_ancho_min }mm).| TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.

    WHEN '03'.

      MESSAGE |Material de cabo no encontrado.| TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.

    WHEN '04'.

      MESSAGE |Material de rollo no encontrado.| TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.

    WHEN '05'.

      MESSAGE |Fecha fin de fabricación en el pasado.| TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.

    WHEN '06'.

      MESSAGE |Error en la determinación de costes.| TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.

    WHEN '07'.

      MESSAGE |No se permite combinar más de 3 OFs.| TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.

    WHEN '08'.

      MESSAGE |Lista de explotación de materiales no encontrada.| TYPE 'I' DISPLAY LIKE 'E'.
      EXIT.

    WHEN OTHERS.

  ENDCASE.

ENDFORM.

FORM clear_dyn200.

  CLEAR: gs_dyn200-ok_code.

ENDFORM.

FORM asignar_capacidad.

  DATA: lt_rows      TYPE salv_t_row,
        lt_pedidos   TYPE zclpp_capacidad_asignada=>tty_pedidos,
        lv_aviso     TYPE char1,
        lv_dias_dif  TYPE int4,
        lv_answer(1) TYPE c.

  IF gr_semana->g_semana < gr_semana->g_semana_actual.

    MESSAGE |No se permite asignar capacidad a una semana en el pasado.| TYPE 'I' DISPLAY LIKE 'E'.
    EXIT.

  ENDIF.

  PERFORM obtener_seleccion USING gs_dyn100-alv_inf CHANGING lt_rows.

  IF lt_rows IS INITIAL.

    MESSAGE |Seleccionar repartos.| TYPE 'I'.
    EXIT.

  ENDIF.

  CLEAR lv_aviso.

  LOOP AT lt_rows INTO DATA(ls_row).

    APPEND INITIAL LINE TO lt_pedidos ASSIGNING FIELD-SYMBOL(<fs_pedido>).
    <fs_pedido>-vbeln  = gt_datos_sin_asig[ ls_row ]-vbeln.
    <fs_pedido>-posnr  = gt_datos_sin_asig[ ls_row ]-posnr.
    <fs_pedido>-etenr  = gt_datos_sin_asig[ ls_row ]-etenr.
    <fs_pedido>-tp_ped = gt_datos_sin_asig[ ls_row ]-tp_pedido.

* Se obtiene la diferencia de dias entre el domingo de la semana seleccionada y f.reparto
    CALL FUNCTION 'HR_99S_INTERVAL_BETWEEN_DATES'
      EXPORTING
        begda = gr_semana->g_dia_fin_semana
        endda = gt_datos_sin_asig[ ls_row ]-fecha_ent
      IMPORTING
        days  = lv_dias_dif.

    IF lv_dias_dif <= gr_semana->gc_dias_margen_pedido.

      lv_aviso = 'X'.

    ENDIF.

    IF lv_dias_dif > gr_semana->gc_dias_maximos.

      lv_aviso = 'Y'.

    ENDIF.

  ENDLOOP.

* Control para mostrar aviso, si procede.
  IF lv_aviso IS NOT INITIAL.

    PERFORM aviso CHANGING lv_aviso.

    IF lv_aviso = 'E'.

      EXIT.

    ENDIF.

  ENDIF.

  CALL METHOD gr_semana->asignar_pedidos_a_semana
    EXPORTING
      it_pedidos = lt_pedidos
      i_semana   = gr_semana->g_semana
    IMPORTING
      o_rc       = DATA(lv_rc).

  PERFORM refrescar_alvs. "USING '2'.

  MESSAGE |Capacidad asignada correctamente.| TYPE 'S'.

ENDFORM.

FORM aviso CHANGING p_tipo TYPE char1.

  DATA: lv_answer(1) TYPE c,
        lv_msg       TYPE string.

  CASE p_tipo.

    WHEN 'X'.

      lv_msg = |Fecha de entrega <= { gr_semana->gc_dias_margen_pedido ALPHA = OUT } días.|.

    WHEN 'Y'.

      lv_msg = |Fecha de entrega > fecha capacidad + { gr_semana->gc_dias_maximos ALPHA = OUT } días.|.

    WHEN 'Z'.

      lv_msg = |Reparto con OF creada.|.

    WHEN OTHERS.

  ENDCASE.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'AVISO'
      text_question         = lv_msg
      text_button_1         = 'Cancelar' "
      icon_button_1         = 'ICON_CANCEL' "
      text_button_2         = 'Continuar' " 'Cancelar'
      icon_button_2         = 'ICON_OKAY' " 'Cancelar'
      default_button        = '1'
      display_cancel_button = ' '
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  IF lv_answer = '1'.

    p_tipo = 'E'.

  ENDIF.

ENDFORM.

FORM asignar_capacidad_anterior.

  DATA: lt_rows     TYPE salv_t_row,
        lt_pedidos  TYPE  zclpp_capacidad_asignada=>tty_pedidos,
        lv_aviso    TYPE char1,
        lv_error_of TYPE flag,
        lv_ebelp    TYPE ebelp.

  IF gr_semana->g_semana_ant < gr_semana->g_semana_actual.

    MESSAGE |No se permite asignar capacidad a una semana en el pasado.| TYPE 'I' DISPLAY LIKE 'E'.
    EXIT.

  ENDIF.

  PERFORM obtener_seleccion USING gs_dyn100-alv_sup CHANGING lt_rows.

  IF lt_rows IS INITIAL.

    MESSAGE |Seleccionar repartos.| TYPE 'I'.
    EXIT.

  ENDIF.

  LOOP AT lt_rows INTO DATA(ls_row).

    APPEND INITIAL LINE TO lt_pedidos ASSIGNING FIELD-SYMBOL(<fs_pedido>).
    <fs_pedido>-vbeln  = gt_datos_asig[ ls_row ]-vbeln.
    <fs_pedido>-posnr  = gt_datos_asig[ ls_row ]-posnr.
    <fs_pedido>-etenr  = gt_datos_asig[ ls_row ]-etenr.
    <fs_pedido>-tp_ped = gt_datos_asig[ ls_row ]-tp_pedido.

    lv_ebelp = <fs_pedido>-posnr.

    CALL METHOD zclpp_capacidad_asignada=>get_orden_fabric_pedido
      EXPORTING
        i_pedido      = <fs_pedido>-vbeln
        i_posicion    = lv_ebelp
        i_reparto     = <fs_pedido>-etenr
      IMPORTING
        o_of_asignada = DATA(lv_of).

    IF lv_of IS NOT INITIAL.

      lv_error_of = 'X'.

    ENDIF.

  ENDLOOP.

  IF lv_error_of IS NOT INITIAL.

    lv_aviso = 'Z'.

    PERFORM aviso CHANGING lv_aviso.

    IF lv_aviso = 'E'.

      EXIT.

    ENDIF.

  ENDIF.

  CALL METHOD gr_semana->asignar_pedidos_a_semana
    EXPORTING
      it_pedidos = lt_pedidos
      i_semana   = gr_semana->g_semana_ant
    IMPORTING
      o_rc       = DATA(lv_rc).

  PERFORM refrescar_alvs. "USING 'S'.

  MESSAGE |Traspaso de capacidad creado correctamente.| TYPE 'S'.

ENDFORM.

FORM asignar_capacidad_posterior.

  DATA: lt_rows     TYPE salv_t_row,
        lt_pedidos  TYPE zclpp_capacidad_asignada=>tty_pedidos,
        lv_error_of TYPE flag,
        lv_ebelp    TYPE ebelp,
        lv_aviso    TYPE char1.

* Validaciones
  IF gr_semana->g_semana_sig < gr_semana->g_semana_actual OR
     gr_semana->g_semana     < gr_semana->g_semana_actual.

    MESSAGE |No se permite asignar capacidad a una semana en el pasado.| TYPE 'I' DISPLAY LIKE 'E'.
    EXIT.

  ENDIF.

  PERFORM obtener_seleccion USING gs_dyn100-alv_sup CHANGING lt_rows.

  IF lt_rows IS INITIAL.

    MESSAGE |Seleccionar repartos.| TYPE 'I'.
    EXIT.

  ENDIF.

  LOOP AT lt_rows INTO DATA(ls_row).

    APPEND INITIAL LINE TO lt_pedidos ASSIGNING FIELD-SYMBOL(<fs_pedido>).
    <fs_pedido>-vbeln  = gt_datos_asig[ ls_row ]-vbeln.
    <fs_pedido>-posnr  = gt_datos_asig[ ls_row ]-posnr.
    <fs_pedido>-etenr  = gt_datos_asig[ ls_row ]-etenr.
    <fs_pedido>-tp_ped = gt_datos_asig[ ls_row ]-tp_pedido.

    lv_ebelp = <fs_pedido>-posnr.

    CALL METHOD zclpp_capacidad_asignada=>get_orden_fabric_pedido
      EXPORTING
        i_pedido      = <fs_pedido>-vbeln
        i_posicion    = lv_ebelp
        i_reparto     = <fs_pedido>-etenr
      IMPORTING
        o_of_asignada = DATA(lv_of).

    IF lv_of IS NOT INITIAL.

      lv_error_of = 'X'.

    ENDIF.

  ENDLOOP.

  IF lv_error_of IS NOT INITIAL.

    lv_aviso = 'Z'.

    PERFORM aviso CHANGING lv_aviso.

    IF lv_aviso = 'E'.

      EXIT.

    ENDIF.

  ENDIF.

  CALL METHOD gr_semana->asignar_pedidos_a_semana
    EXPORTING
      it_pedidos = lt_pedidos
      i_semana   = gr_semana->g_semana_sig
    IMPORTING
      o_rc       = DATA(lv_rc).

  PERFORM refrescar_alvs. "USING 'S'.

  MESSAGE |Traspaso de capacidad creado correctamente.| TYPE 'S'.

ENDFORM.

FORM liberar_capacidad.

  DATA: lt_rows     TYPE salv_t_row,
        lt_pedidos  TYPE  zclpp_capacidad_asignada=>tty_pedidos,
        lv_semana   TYPE kweek,
        lv_error_of TYPE flag,
        lv_ebelp    TYPE ebelp.

* Validaciones
  IF gr_semana->g_semana < gr_semana->g_semana_actual.

    MESSAGE |No se permite liberar capacidad a una semana en el pasado.| TYPE 'I' DISPLAY LIKE 'E'.
    EXIT.

  ENDIF.

  PERFORM obtener_seleccion USING gs_dyn100-alv_sup CHANGING lt_rows.

  IF lt_rows IS INITIAL.

    MESSAGE |Seleccionar repartos.| TYPE 'I'.
    EXIT.

  ENDIF.

  LOOP AT lt_rows INTO DATA(ls_row).

    APPEND INITIAL LINE TO lt_pedidos ASSIGNING FIELD-SYMBOL(<fs_pedido>).
    <fs_pedido>-vbeln  = gt_datos_asig[ ls_row ]-vbeln.
    <fs_pedido>-posnr  = gt_datos_asig[ ls_row ]-posnr.
    <fs_pedido>-etenr  = gt_datos_asig[ ls_row ]-etenr.
    <fs_pedido>-tp_ped = gt_datos_asig[ ls_row ]-tp_pedido.

    lv_ebelp = <fs_pedido>-posnr.

    CALL METHOD zclpp_capacidad_asignada=>get_orden_fabric_pedido
      EXPORTING
        i_pedido      = <fs_pedido>-vbeln
        i_posicion    = lv_ebelp
        i_reparto     = <fs_pedido>-etenr
      IMPORTING
        o_of_asignada = DATA(lv_of).

    IF lv_of IS NOT INITIAL.

      lv_error_of = 'X'.
      EXIT.

    ENDIF.

  ENDLOOP.

  IF lv_error_of = 'X'.

    MESSAGE |Operación no permitida para repartos con OF.| TYPE 'I' DISPLAY LIKE 'E'.
    EXIT.

  ENDIF.

  CLEAR lv_semana.
  CALL METHOD gr_semana->asignar_pedidos_a_semana
    EXPORTING
      it_pedidos = lt_pedidos
      i_semana   = lv_semana
    IMPORTING
      o_rc       = DATA(lv_rc).

  PERFORM refrescar_alvs. "USING '2'.

  MESSAGE |Capacidad liberada correctamente.| TYPE 'S'.

ENDFORM.

FORM refrescar_alvs.

**  CLEAR: gt_datos_asig[].
**  gt_datos_asig[]     = gr_semana->gt_pedidos_asig[].
**  gs_dyn100-alv_sup->refresh( ).
**
****    WHEN 'I'.
**
**  CLEAR: gt_datos_sin_asig[].
**  gt_datos_sin_asig[]     = gr_semana->gt_pedidos_sin_asig[].
**  gs_dyn100-alv_inf->refresh( ).

  CALL METHOD zclpp_creacion_ofs=>instanciar_semana
    EXPORTING
      i_werks      = gv_werks
      i_mjahr      = gv_ejer
      i_semana     = gv_sem
      i_begda      = gv_begda
      i_endda      = gv_endda
    IMPORTING
      or_semana_of = gr_semana_crea_of
      o_rc         = g_rc.

  CALL METHOD zclpp_capacidad_asignada=>instanciar_semana
    EXPORTING
      i_werks   = gv_werks
      i_mjahr   = gv_ejer
      i_semana  = gv_sem
    IMPORTING
      or_semana = gr_semana
      o_rc      = g_rc.

  CLEAR: gt_datos[], gt_datos_ofs_pend[].

  gt_datos_ofs_pend[] = gr_semana_crea_of->gt_ofs_pend[].

  IF gr_semana->gt_pedidos_sin_asig[] IS NOT INITIAL.

    LOOP AT gr_semana->gt_pedidos_sin_asig[] ASSIGNING FIELD-SYMBOL(<lfs_sin_asig>).

      IF gv_begda IS NOT INITIAL AND gv_endda IS NOT INITIAL.

        IF <lfs_sin_asig>-fecha_ent GE gv_begda AND <lfs_sin_asig>-fecha_ent LE gv_endda.

          APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_sin1>).

          <lfs_datos_sin1> = <lfs_sin_asig>.

          SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_sin_asig>-vbeln
          INTO @<lfs_datos_sin1>-vbeln_cli.

        ENDIF.

      ELSEIF gv_begda IS NOT INITIAL AND gv_endda IS INITIAL.

        IF <lfs_sin_asig>-fecha_ent EQ gv_begda.

          APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_sin2>).

          <lfs_datos_sin2> = <lfs_sin_asig>.

          SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_sin_asig>-vbeln
          INTO @<lfs_datos_sin2>-vbeln_cli.

        ENDIF.

      ELSEIF gv_begda IS INITIAL AND gv_endda IS INITIAL.

        APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_sin3>).

        <lfs_datos_sin3> = <lfs_sin_asig>.

        SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_sin_asig>-vbeln
          INTO @<lfs_datos_sin3>-vbeln_cli.

      ENDIF.

    ENDLOOP.

  ENDIF.

  IF gr_semana->gt_pedidos_asig[] IS NOT INITIAL.

    LOOP AT gr_semana->gt_pedidos_asig[] ASSIGNING FIELD-SYMBOL(<lfs_asig>).

      IF gv_begda IS NOT INITIAL AND gv_endda IS NOT INITIAL.

        IF <lfs_sin_asig>-fecha_ent GE gv_begda AND <lfs_sin_asig>-fecha_ent LE gv_endda.

          APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_asig1>).

          <lfs_datos_asig1> = <lfs_asig>.

          SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_sin_asig>-vbeln
          INTO @<lfs_datos_asig1>-vbeln_cli.

        ENDIF.

      ELSEIF gv_begda IS NOT INITIAL AND gv_endda IS INITIAL.

        IF <lfs_sin_asig>-fecha_ent EQ gv_begda.

          APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_asig2>).

          <lfs_datos_asig2> = <lfs_asig>.

          SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_sin_asig>-vbeln
          INTO @<lfs_datos_asig2>-vbeln_cli.

        ENDIF.

      ELSEIF gv_begda IS INITIAL AND gv_endda IS INITIAL.

        APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_asig3>).

        <lfs_datos_asig3> = <lfs_asig>.

        SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_sin_asig>-vbeln
          INTO @<lfs_datos_asig3>-vbeln_cli.

      ENDIF.

    ENDLOOP.

  ENDIF.

ENDFORM.

FORM cambiar_centro USING p_werks TYPE werks_d.

  CHECK gr_semana->g_werks <> p_werks.

  FREE gr_semana.

  CALL METHOD zclpp_capacidad_asignada=>instanciar_semana
    EXPORTING
      i_werks   = p_werks
      i_mjahr   = gs_dyn100-mjahr
      i_semana  = gs_dyn100-semana
    IMPORTING
      or_semana = gr_semana
      o_rc      = DATA(lv_rc).

  IF lv_rc = '00'.

    PERFORM refrescar_alvs. "USING '2'.

  ENDIF.

ENDFORM.

FORM navegar_semana USING p_tp_nav TYPE char1.

  DATA: lv_rc TYPE char02.

  CALL METHOD zclpp_capacidad_asignada=>cambiar_semana
    EXPORTING
      i_tp_cambio = p_tp_nav
    IMPORTING
      o_rc        = lv_rc
    CHANGING
      cr_semana   = gr_semana.

  PERFORM refrescar_alvs. "USING 'S'.

ENDFORM.

FORM mover_datos_cap_neta_prod.

  gs_dyn100-kg_presu   = gr_semana->g_kg_netos_presup.
  gs_dyn100-kg_asign   = gr_semana->g_kg_capac_asig.
  gs_dyn100-kg_dispo   = gr_semana->g_kg_capac_disp.
  gs_dyn100-kg_ajust   = gr_semana->g_kg_ajust_capac.
  gs_dyn100-porc_disp  = gr_semana->g_porc_disp.
  gs_dyn100-icono_disp = gr_semana->g_icono_disp.

  cl_gui_cfw=>set_new_ok_code( new_code = 'REFR' ).

ENDFORM.

FORM popup_confirm.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = g_titulo
      text_question         = g_msg
      text_button_1         = 'Aceptar'
      icon_button_1         = 'ICON_CHECKED'
      text_button_2         = 'Cancelar' "
      icon_button_2         = 'ICON_CANCEL' "'Cancelar'
      default_button        = '2'
      display_cancel_button = ' '
    IMPORTING
      answer                = g_answer " '1'-> OK  / '2'-> CANCELAR
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

ENDFORM.

FORM handle_user_command_sup USING i_ucomm TYPE salv_de_function.

  DATA: lt_rows TYPE salv_t_row.

  CASE i_ucomm.

    WHEN 'CERRAR_OF'.

      PERFORM tratar_anulacion_of.

    WHEN 'REPLAN'.

      PERFORM tratar_replanificar_of.

    WHEN OTHERS.

  ENDCASE.

  CLEAR: gs_dyn200-ok_code.

ENDFORM.

FORM tratar_anulacion_of.

  DATA: lt_rows TYPE salv_t_row,
        ls_of   TYPE zclpp_creacion_ofs=>ty_ofs_pend.

  PERFORM obtener_seleccion USING gs_dyn100-alv_sup CHANGING lt_rows.

* Se valida que se hayan selecionado repartos.
  IF lt_rows IS INITIAL.

    MESSAGE |Seleccionar OFs.| TYPE 'I'.
    EXIT.

  ENDIF.

* Obtener selección ALV y grabar tabla selec.
  CLEAR: gt_of_pend_selec[].

  LOOP AT lt_rows INTO DATA(lv_row).

    DATA(ls_of2) = gt_datos_ofs_pend[ lv_row ].
    ls_of        = CORRESPONDING #( ls_of2 ).

    INSERT ls_of INTO TABLE gt_of_pend_selec[].

  ENDLOOP.

  CALL METHOD zclpp_creacion_ofs=>check_anulacion_ofs
    EXPORTING
      it_ofs_pend_selec = gt_of_pend_selec[]
    IMPORTING
      o_rc              = DATA(lv_rc).

  CASE lv_rc.

    WHEN '00'.

      CALL FUNCTION 'ZMFPP_ANULACION_OFS'
        EXPORTING
          it_ofs = gt_of_pend_selec[]
        IMPORTING
          o_rc   = lv_rc.

      IF lv_rc = '00'.

        CALL METHOD gr_semana_crea_of->refrescar_tablas_alvs
          EXPORTING
            i_flag  = abap_true
            i_werks = gr_semana->g_werks.

        CLEAR gt_datos_ofs_pend[].
        REFRESH: gt_datos_ofs_pend.
        gt_datos_ofs_pend[] = gr_semana_crea_of->gt_ofs_pend[].

        PERFORM refrescar_alvs.

        MESSAGE |OFs borradas correctamente.| TYPE 'S'.

        cl_gui_cfw=>set_new_ok_code( new_code = 'REFR' ).
        cl_gui_cfw=>flush( ).

      ENDIF.

    WHEN '01'.

      MESSAGE |OFs no relacionadas.| TYPE 'I' DISPLAY LIKE 'E'.

    WHEN '02'.

      MESSAGE |Seleccionar todas las OFs relacionadas.| TYPE 'I' DISPLAY LIKE 'E'.

    WHEN '03'.

      MESSAGE |¡Atención! No se permite cierre técnico de OFs con rollos pend.de bobinar.| TYPE 'I' DISPLAY LIKE 'E'.

    WHEN '05'.

      MESSAGE |Error al borrar OFs, avisar al responsable.| TYPE 'I' DISPLAY LIKE 'E'.


    WHEN OTHERS.

  ENDCASE.

ENDFORM.

FORM tratar_replanificar_of.

  DATA: lt_rows TYPE salv_t_row,
        ls_of   TYPE zclpp_creacion_ofs=>ty_ofs_pend.

  PERFORM obtener_seleccion USING gs_dyn100-alv_sup CHANGING lt_rows.

* Se valida que se hayan selecionado repartos.
  IF lt_rows IS INITIAL.

    MESSAGE |Seleccionar OFs.| TYPE 'I'.
    EXIT.

  ENDIF.

* Obtener selección ALV y grabar tabla selec.
  CLEAR gt_of_pend_selec[].
  LOOP AT lt_rows ASSIGNING FIELD-SYMBOL(<lfs_row>).

    DATA(ls_of2)       = gt_datos_ofs_pend[ <lfs_row> ].

    ls_of              = CORRESPONDING #( ls_of2 ).
    INSERT ls_of INTO TABLE gt_of_pend_selec[].

  ENDLOOP.

* Aplicamos la misma lógica de verificación, que en la anulación.
  CALL METHOD zclpp_creacion_ofs=>check_anulacion_ofs
    EXPORTING
      it_ofs_pend_selec = gt_of_pend_selec[]
    IMPORTING
      o_rc              = DATA(lv_rc).

  CASE lv_rc.

    WHEN '00'.

      CALL FUNCTION 'ZMFPP_REPLANIFICAR_OF'
        EXPORTING
          it_ofs         = gt_of_pend_selec
          i_fecha_actual = ls_of-fecha_fab
          ir_semana_of   = gr_semana_crea_of
        IMPORTING
          o_rc           = lv_rc.

      IF lv_rc = '00'.

        CALL METHOD gr_semana_crea_of->refrescar_tablas_alvs
          EXPORTING
            i_flag  = abap_true
            i_werks = gr_semana->g_werks.

        CLEAR gt_datos_ofs_pend[].
        REFRESH: gt_datos_ofs_pend.
        gt_datos_ofs_pend[] = gr_semana_crea_of->gt_ofs_pend[].

        MESSAGE |OFs replanificadas correctamente.| TYPE 'S'.

        cl_gui_cfw=>set_new_ok_code( new_code = 'REFR' ).
        cl_gui_cfw=>flush( ).

      ENDIF.

    WHEN '01'.

      MESSAGE |OFs no relacionadas.| TYPE 'I' DISPLAY LIKE 'E'.

    WHEN '02'.

      MESSAGE |Seleccionar todas las OFs relacionadas.| TYPE 'I' DISPLAY LIKE 'E'.

    WHEN '03'.

      MESSAGE |¡Atención! No se permite replanificación de OFs con rollos pend.de bobinar.| TYPE 'I' DISPLAY LIKE 'E'.

    WHEN '04'.

      MESSAGE |Error al realizar la replanificación.| TYPE 'I' DISPLAY LIKE 'E'.

    WHEN OTHERS.

  ENDCASE.

ENDFORM.
