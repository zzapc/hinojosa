*&---------------------------------------------------------------------*
*&  Include           ZRPP0024_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  INICIAR_VAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM iniciar_var .
  REFRESH: gt_messages.
  CLEAR: gt_messages.
  CLEAR: gv_error, gv_clabs, gv_matnr, gv_charg, gv_aufnr.

ENDFORM.                    " INICIAR_VAR
*&---------------------------------------------------------------------*
*&      Form  CONSUMO_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM consumo_material .

  DATA: lt_goodsmvt_item TYPE TABLE OF bapi2017_gm_item_create.

  DATA: ls_goodsmvt_header  TYPE bapi2017_gm_head_01,
        ls_goodsmvt_code    TYPE bapi2017_gm_code,
        ls_goodsmvt_item    TYPE bapi2017_gm_item_create,
        lt_return           LIKE bapiret2 OCCURS 0,
        ls_return           TYPE bapiret2,
        lv_materialdocument TYPE mblnr,
        lv_matdocumentyear  TYPE mjahr.

  DATA: lv_matnr_aux TYPE matnr,
        lv_charg_aux TYPE charg_d,
        lv_mblnr_aux TYPE mblnr.

  CLEAR: lt_goodsmvt_item, ls_goodsmvt_header, ls_goodsmvt_item.
  CLEAR: lt_return, ls_return, ls_goodsmvt_code.
  REFRESH: lt_goodsmvt_item, lt_return.


  " Cabecera:
  CLEAR ls_goodsmvt_header.
  ls_goodsmvt_header-pstng_date  = sy-datum.
  ls_goodsmvt_header-doc_date    = sy-datum.
  ls_goodsmvt_header-header_txt  = text-003.

  " Tipo de movimiento:
  CLEAR ls_goodsmvt_code.
  ls_goodsmvt_code-gm_code       = '06'.

  " Posiciones:
  CLEAR: ls_goodsmvt_item.
  ls_goodsmvt_item-material = p_matnr.
  ls_goodsmvt_item-plant = p_werks.
  ls_goodsmvt_item-stge_loc = p_lgort.
  ls_goodsmvt_item-batch = p_charg.
  ls_goodsmvt_item-move_type = '551'. " Movimiento desguace
  ls_goodsmvt_item-stck_type = ' '. " Libre utilización
  ls_goodsmvt_item-entry_qnt = gv_clabs - p_menge.
  SELECT SINGLE meins INTO ls_goodsmvt_item-entry_uom
    FROM mara
    WHERE matnr = p_matnr.
  IF ls_goodsmvt_item-entry_uom IS INITIAL.
    ls_goodsmvt_item-entry_uom = 'KG'.
  ENDIF.
  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.

  CLEAR: lv_materialdocument, lv_matdocumentyear.
  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_goodsmvt_header
      goodsmvt_code    = ls_goodsmvt_code
    IMPORTING
      materialdocument = lv_materialdocument
      matdocumentyear  = lv_matdocumentyear
    TABLES
      goodsmvt_item    = lt_goodsmvt_item
      return           = lt_return.

* GST - 05/02/2016 ->
  WAIT UP TO 3 SECONDS.
* GST - 05/02/2016 <-

IF lv_materialdocument IS NOT INITIAL AND lv_matdocumentyear IS NOT INITIAL.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

    CLEAR gs_messages.
    gs_messages-type = 'S'.
    gs_messages-number = '034'.
    gs_messages-id = 'ZPP'.

    CLEAR: lv_matnr_aux, lv_charg_aux, lv_mblnr_aux.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = p_matnr
      IMPORTING
        output = lv_matnr_aux.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = p_charg
      IMPORTING
        output = lv_charg_aux.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = lv_materialdocument
      IMPORTING
        output = lv_mblnr_aux.

    gs_messages-message_v1 = lv_matnr_aux.
    gs_messages-message_v2 = lv_charg_aux.
    gs_messages-message_v3 = lv_mblnr_aux.
    gs_messages-message_v4 = lv_matdocumentyear.
    APPEND gs_messages TO gt_messages.

  ELSE.

    " ERROR LOG GENERAL:
    CLEAR gs_messages.
    gs_messages-type = 'E'.
    gs_messages-number = '035'.
    gs_messages-id = 'ZPP'.

    CLEAR: lv_matnr_aux, lv_charg_aux.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = p_matnr
      IMPORTING
        output = lv_matnr_aux.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = p_charg
      IMPORTING
        output = lv_charg_aux.

    gs_messages-message_v1 = lv_matnr_aux.
    gs_messages-message_v2 = lv_charg_aux.
    APPEND gs_messages TO gt_messages.

    LOOP AT lt_return INTO ls_return WHERE type  = 'E'.
      CLEAR gs_messages.
      gs_messages = ls_return.
      APPEND gs_messages TO gt_messages.
    ENDLOOP.

    gv_error = 'X'.

  ENDIF.

ENDFORM.                    " CONSUMO_MATERIAL
*&---------------------------------------------------------------------*
*&      Form  RECLASIFICACION_LOTES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM reclasificacion_lotes.

  DATA: lv_object            TYPE objnum,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        ls_return            TYPE bapiret2.

  DATA: lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab.

  DATA: lv_clabs     TYPE labst,
        lv_matnr     TYPE matnr,
        lv_charg     TYPE charg_d,
        lv_peso      TYPE zmenge_carac,
        lv_matnr_aux TYPE matnr,
        lv_charg_aux TYPE charg_d.
  DATA: lv_index LIKE sy-tabix.

CLEAR: lv_object, lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.
  CLEAR: ls_alloc_values_num, ls_alloc_values_char, ls_return.
REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.
  CLEAR: lv_clabs, lv_matnr, lv_charg.


  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_matnr
    IMPORTING
      output = lv_matnr.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_charg
    IMPORTING
      output = lv_charg.

  CONCATENATE lv_matnr lv_charg INTO lv_object.


  " Seleccionamos ctd. libre disposición -> Nuevo peso:

* GST - 05/02/2016 ->
*  SELECT SINGLE clabs INTO lv_clabs
*    FROM mchb
*    WHERE matnr = lv_matnr
*    AND werks = p_werks
*    AND lgort = p_lgort
*    AND charg = lv_charg.
*
*  IF lv_clabs IS NOT INITIAL.
*    lv_peso = lv_clabs.
*  ELSE.
*    CLEAR lv_peso.
*  ENDIF.

  lv_peso = p_menge.

* GST - 05/02/2016 <-

  " Recuperamos los datos de las características:

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

  CLEAR ls_return.
  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  IF ls_return IS NOT INITIAL. " Error leer característica

    CLEAR: lv_matnr_aux.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = lv_matnr
      IMPORTING
        output = lv_matnr_aux.

    CLEAR: lv_charg_aux.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = lv_charg
      IMPORTING
        output = lv_charg_aux.

    gs_messages-type = 'E'.
    gs_messages-number = '062'.
    gs_messages-id = 'ZPP'.
    gs_messages-message_v1 = lv_matnr_aux.
    gs_messages-message_v2 = lv_charg_aux.
    APPEND gs_messages TO gt_messages.

  ELSE.

    REFRESH: lt_return.
    CLEAR: lt_return, ls_return.

    IF lv_peso IS NOT INITIAL.
      CLEAR: ls_alloc_values_num,lv_index.
      READ TABLE lt_alloc_values_num INTO ls_alloc_values_num
                 WITH KEY charact = 'Z_PESO'.
      lv_index = sy-tabix.
      IF ls_alloc_values_num IS INITIAL.
        CLEAR ls_alloc_values_num.
        ls_alloc_values_num-charact = 'Z_PESO'.
        ls_alloc_values_num-value_from = lv_peso.
        APPEND ls_alloc_values_num TO lt_alloc_values_num.
      ELSE.
        ls_alloc_values_num-value_from = lv_peso.
        MODIFY lt_alloc_values_num FROM ls_alloc_values_num
               INDEX lv_index.

      ENDIF.
    ENDIF.

    IF p_c_rema IS NOT INITIAL.
      CLEAR: ls_alloc_values_char, lv_index.
      READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
                 WITH KEY charact = 'ZPPI_MOTIVO_REMANIPULADO'.
      lv_index = sy-tabix.
      IF ls_alloc_values_char IS INITIAL.
        CLEAR ls_alloc_values_char.
        ls_alloc_values_char-charact = 'ZPPI_MOTIVO_REMANIPULADO'.
        ls_alloc_values_char-value_char = p_c_rema.
        APPEND ls_alloc_values_char TO lt_alloc_values_char.
      ELSE.
        ls_alloc_values_char-value_char = p_c_rema.
        MODIFY lt_alloc_values_char FROM ls_alloc_values_char
               INDEX lv_index.
      ENDIF.
    ENDIF.

    CALL FUNCTION 'BAPI_OBJCL_CHANGE'
      EXPORTING
        objectkey          = lv_object
        objecttable        = 'MCH1'
        classnum           = 'Z_BOBINA'
        classtype          = '023'
*       STATUS             = '1'
*       STANDARDCLASS      =
*       CHANGENUMBER       =
*       KEYDATE            = SY-DATUM
*       NO_DEFAULT_VALUES  = ' '
*   IMPORTING
*       CLASSIF_STATUS     =
      TABLES
        allocvaluesnumnew  = lt_alloc_values_num
        allocvaluescharnew = lt_alloc_values_char
        allocvaluescurrnew = lt_alloc_values_curr
        return             = lt_return.

    CLEAR ls_return.
    READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
    IF ls_return IS NOT INITIAL.

      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*       IMPORTING
*         RETURN        =
        .

      CLEAR: lv_matnr_aux.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = lv_matnr
        IMPORTING
          output = lv_matnr_aux.

      CLEAR: lv_charg_aux.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = lv_charg
        IMPORTING
          output = lv_charg_aux.

* ERROR GENERAL CLASIFICACIÓN:
      gs_messages-type = 'E'.
      gs_messages-number = '059'.
      gs_messages-id = 'ZPP'.
      gs_messages-message_v1 = lv_matnr_aux.
      gs_messages-message_v2 = lv_charg_aux.
      APPEND gs_messages TO gt_messages.

* REGISTRAR ERROR EN EL LOG:
      LOOP AT lt_return INTO ls_return WHERE type  = 'E'.
        CLEAR gs_messages.
        gs_messages = ls_return.
        APPEND gs_messages TO gt_messages.
      ENDLOOP.

    ELSE.

      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.

* GUARDAR LOG:

      CLEAR gs_messages.
      gs_messages-type = 'S'.
      gs_messages-number = '060'.
      gs_messages-id = 'ZPP'.

      CLEAR lv_matnr_aux.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = lv_matnr
        IMPORTING
          output = lv_matnr_aux.

      CLEAR lv_charg_aux.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = lv_charg
        IMPORTING
          output = lv_charg_aux.

      gs_messages-message_v1 = lv_matnr_aux.
      gs_messages-message_v2 = lv_charg_aux.
      APPEND gs_messages TO gt_messages.

      READ TABLE lt_return INTO ls_return
      WITH KEY type = 'S'.
      CLEAR gs_messages.
      gs_messages = ls_return.
      APPEND gs_messages TO gt_messages.

    ENDIF.

  ENDIF.

  WAIT UP TO 2 SECONDS.

ENDFORM.                    " RECLASIFICACION_LOTES
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ETIQUETA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_etiqueta.

  DATA: ls_etiqueta TYPE zspp_etiq_bobina,
        lv_zebelp1  TYPE posnr_va.

  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char.

  CLEAR: ls_etiqueta, lv_zebelp1.
  CLEAR: lv_object, ls_alloc_values_char.
CLEAR: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.
REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.

* Recuperamos la orden:
  SELECT SINGLE aufnr INTO gv_aufnr
    FROM aufm
    WHERE bwart = '101'
    AND matnr = p_matnr
    AND werks = p_werks
    AND lgort = p_lgort
    AND charg = p_charg
    AND aufnr <> ' '.

* Recuperamos datos de bobina:

  CLEAR ls_etiqueta.
SELECT SINGLE afko~plnbez aufk~werks aufk~zzkunnr1 aufk~zzebeln1 aufk~zzebelp1
INTO (ls_etiqueta-matnr, ls_etiqueta-werks, ls_etiqueta-kunnr, ls_etiqueta-pedido, lv_zebelp1)
FROM aufk
INNER JOIN afko ON afko~aufnr = aufk~aufnr
WHERE aufk~aufnr = gv_aufnr.

  ls_etiqueta-charg = p_charg.
  ls_etiqueta-aufnr = gv_aufnr.
  ls_etiqueta-lgort = p_lgort.
  IF ls_etiqueta-matnr IS INITIAL.
    ls_etiqueta-matnr = p_matnr.
  ENDIF.
  ls_etiqueta-werks = p_werks.

IF ls_etiqueta-kunnr IS INITIAL OR ls_etiqueta-pedido IS INITIAL OR ls_etiqueta-posicion IS INITIAL.
* Mirar si cliente, pedido o posición vienen vacíos:
    CONCATENATE ls_etiqueta-matnr ls_etiqueta-charg INTO lv_object.

    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = lv_object
        objecttable     = 'MCH1'
        classnum        = 'Z_BOBINA'
        classtype       = '023'
*       KEYDATE         = SY-DATUM
*       UNVALUATED_CHARS       = ' '
*       LANGUAGE        = SY-LANGU
* IMPORTING
*       STATUS          =
*       STANDARDCLASS   =
      TABLES
        allocvaluesnum  = lt_alloc_values_num
        allocvalueschar = lt_alloc_values_char
        allocvaluescurr = lt_alloc_values_curr
        return          = lt_return.

    LOOP AT lt_alloc_values_char INTO ls_alloc_values_char.
      CASE ls_alloc_values_char-charact.
        WHEN 'Z_CLIENTE'.
          IF ls_etiqueta-kunnr IS INITIAL.
            CONDENSE ls_alloc_values_char-value_char.
            ls_etiqueta-kunnr = ls_alloc_values_char-value_char.
          ENDIF.
        WHEN 'Z_PEDIDO'.
          IF ls_etiqueta-pedido IS INITIAL.
            CONDENSE ls_alloc_values_char-value_char.
            ls_etiqueta-pedido = ls_alloc_values_char-value_char.
          ENDIF.
        WHEN 'Z_POSICION'.
          IF ls_etiqueta-posicion IS INITIAL.
            CONDENSE ls_alloc_values_char-value_char.
            ls_etiqueta-posicion = ls_alloc_values_char-value_char.
          ENDIF.
      ENDCASE.
    ENDLOOP.

  ENDIF.
* YTG 19/09/2016 Ticket 14095
  IF p_c_rema = 'PESO ERRONEO'.
    ls_etiqueta-menge = p_menge.
  ENDIF.
** YTG 19/09/2016 Ticket 14095

  IF ls_etiqueta IS NOT INITIAL.

    CALL FUNCTION 'ZMFPP_ETIQ_BOBINA'
      EXPORTING
        i_bobina = ls_etiqueta
        i_nodialog = 'X'.

    " LOG ETIQUETA IMPRESA:
    CLEAR gs_messages.
    gs_messages-type = 'S'.
    gs_messages-number = '061'.
    gs_messages-id = 'ZPP'.
    APPEND gs_messages TO gt_messages.

  ENDIF.

ENDFORM.                    " IMPRIMIR_ETIQUETA
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_log .

  CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
    TABLES
      i_bapiret2_tab = gt_messages.

ENDFORM.                    " MOSTRAR_LOG
*&---------------------------------------------------------------------*
*&      Form  LIMPIAR_VAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM limpiar_var .

  CLEAR: gv_aufnr, gv_error.
  CLEAR: p_matnr, p_werks, p_lgort, p_werks, p_menge, p_c_rema.
  CLEAR: gv_clabs, gv_matnr, gv_charg.

  CLEAR: gt_messages.
  REFRESH: gt_messages.

  LEAVE SCREEN.

ENDFORM.                    " LIMPIAR_VAR
*&---------------------------------------------------------------------*
*&      Form  CHEQUEO_MOTIV_REMANIPULADO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM chequeo_motiv_remanipulado .

  DATA: lv_atwrt TYPE atwrt.

  IF p_c_rema IS NOT INITIAL.

    CLEAR lv_atwrt.
    SELECT SINGLE atwrt INTO lv_atwrt
      FROM zvpp_carac_rema
      WHERE atwrt = p_c_rema.

    IF lv_atwrt IS INITIAL.
      MESSAGE e063(zpp).
    ENDIF.

  ENDIF.

ENDFORM.                    " CHEQUEO_MOTIV_REMANIPULADO
*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion_sel .

  SELECT SINGLE parva FROM usr05
        INTO p_werks
        WHERE bname = sy-uname AND
        parid = 'WRK'.

ENDFORM.                    " INICIALIZACION_SEL
