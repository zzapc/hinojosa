*&---------------------------------------------------------------------*
*&  Include           ZRPP0028_CLASS
*&---------------------------------------------------------------------*

************************************************
* dynpro 300
************************************************

CLASS lcl_application_300 DEFINITION.

  PUBLIC SECTION.
    METHODS handle_toolbar
                  FOR EVENT toolbar OF cl_gui_alv_grid
      IMPORTING e_object e_interactive.


*   Evento para detectar accion botonera
    METHODS handle_user_command
                  FOR EVENT user_command OF cl_gui_alv_grid
      IMPORTING e_ucomm.


*   Evento para navegar
    METHODS handle_hotspot_click
                  FOR EVENT hotspot_click OF cl_gui_alv_grid
      IMPORTING e_row_id e_column_id es_row_no.


ENDCLASS.



CLASS lcl_application_300  IMPLEMENTATION.

  METHOD handle_toolbar.
    CLEAR gs_toolbar_300.
    MOVE  'ALTA'                     TO gs_toolbar_300-function.
*    MOVE  icon_activate              TO gs_toolbar_300-icon.
    MOVE  text-006                   TO gs_toolbar_300-quickinfo.
    MOVE  text-006                   TO gs_toolbar_300-text.
    MOVE space                       TO gs_toolbar_300-disabled.
    APPEND gs_toolbar_300                TO e_object->mt_toolbar.


    MOVE  'FINALIZAR'                TO gs_toolbar_300-function.
*    MOVE icon_generate               TO gs_toolbar_300-icon.
    MOVE  text-007                   TO gs_toolbar_300-quickinfo.
    MOVE  text-007                   TO gs_toolbar_300-text.
    MOVE space                       TO gs_toolbar_300-disabled.
    APPEND gs_toolbar_300                TO e_object->mt_toolbar.


  ENDMETHOD.


*&---------------------------------------------------------------------*
*         METHOD handle_user_command
*----------------------------------------------------------------------*
  METHOD handle_user_command.

    DATA: index_rows       TYPE         lvc_t_row,
          lt_sel_rows      TYPE         lvc_t_roid,
          ls_selected_line LIKE LINE OF lt_sel_rows.

    DATA: lv_error TYPE xfeld.
    DATA: lv_extnumber TYPE balnrext.
    DATA: num_reg TYPE sy-tabix.
    DATA: lv_answer    TYPE c.


    CASE e_ucomm.
      WHEN 'ALTA'.
        PERFORM alta.

      WHEN 'FINALIZAR'.

        CALL METHOD gr_grid_300->get_selected_rows(
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows ).

        CALL METHOD cl_gui_cfw=>flush.

        DESCRIBE TABLE  lt_sel_rows LINES num_reg.
        IF num_reg = 0.
          MESSAGE i000(0k) WITH text-001.
        ELSEIF num_reg > 1.
          MESSAGE i000(0k) WITH text-002.
        ELSE.

          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              titlebar              = text-033
*             DIAGNOSE_OBJECT       = ' '
              text_question         = text-032
              text_button_1         = 'Sí'(008)
*             ICON_BUTTON_1         = ' '
              text_button_2         = 'No'(009)
*             ICON_BUTTON_2         = ' '
              default_button        = '2'
              display_cancel_button = ''
*             USERDEFINED_F1_HELP   = ' '
*             START_COLUMN          = 25
*             START_ROW             = 6
*             POPUP_TYPE            =
*             IV_QUICKINFO_BUTTON_1 = ' '
*             IV_QUICKINFO_BUTTON_2 = ' '
            IMPORTING
              answer                = lv_answer
*           TABLES
*             parameter             = lt_param
            EXCEPTIONS
              text_not_found        = 1
              OTHERS                = 2.
          IF sy-subrc <> 0.
*           Implement suitable error handling here
          ENDIF.

          IF lv_answer IS INITIAL OR lv_answer = '1'.
            LOOP AT lt_sel_rows INTO ls_selected_line.
              READ TABLE gt_datos_300 INTO wa_datos_sel INDEX ls_selected_line-row_id.

              PERFORM finalizar USING wa_datos_sel
                                CHANGING lv_error.

              IF lv_error = ''.
                DELETE gt_datos_300 INDEX ls_selected_line-row_id.

                CALL METHOD gr_grid_300->refresh_table_display.

                lv_extnumber = wa_datos_sel-aufnr .

                CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
                  EXPORTING
                    objeto    = 'ZPP'
                    subobjeto = sy-tcode
                    mensajes  = gt_messages[]
                    extnumber = lv_extnumber.
              ENDIF.
            ENDLOOP.
          ENDIF.
        ENDIF.

      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.

* Para navegar
  METHOD handle_hotspot_click.
    DATA: index_rows       TYPE         lvc_t_row,
          lt_sel_rows      TYPE         lvc_t_roid,
          ls_selected_line LIKE LINE OF lt_sel_rows.

    CALL METHOD gr_grid_300->get_selected_rows(
      IMPORTING
        et_row_no     = lt_sel_rows
        et_index_rows = index_rows ).

    CALL METHOD cl_gui_cfw=>flush.

*    READ TABLE lt_sel_rows INTO ls_selected_line INDEX 1.
*    READ TABLE gt_datos_300 INTO wa_datos_sel INDEX ls_selected_line-row_id.
    READ TABLE gt_datos_300 INTO wa_datos_sel INDEX e_row_id-index.
    CASE e_column_id.
      WHEN 'AUFNR'.
        FREE MEMORY ID 'BR1'.
        SET PARAMETER ID 'BR1' FIELD wa_datos_sel-aufnr.
        CALL TRANSACTION 'COR3' AND SKIP FIRST SCREEN.

    ENDCASE.


  ENDMETHOD.                    "handle_hotspot_click

ENDCLASS.



************************************************
* dynpro 400
************************************************

CLASS lcl_application_400 DEFINITION.

  PUBLIC SECTION.
    METHODS handle_toolbar
                  FOR EVENT toolbar OF cl_gui_alv_grid
      IMPORTING e_object e_interactive.


*   Evento para detectar accion botonera
    METHODS handle_user_command
                  FOR EVENT user_command OF cl_gui_alv_grid
      IMPORTING e_ucomm.

ENDCLASS.



CLASS lcl_application_400  IMPLEMENTATION.

  METHOD handle_toolbar.
    CLEAR gs_toolbar_400.
    MOVE  'ELIMINAR'                TO gs_toolbar_400-function.
    MOVE  icon_delete               TO gs_toolbar_400-icon.
    MOVE  text-013                  TO gs_toolbar_400-quickinfo.
    MOVE  text-013                  TO gs_toolbar_400-text.
    MOVE space                      TO gs_toolbar_400-disabled.
    APPEND gs_toolbar_400           TO e_object->mt_toolbar.


    MOVE  'REIMPRIMIR'               TO gs_toolbar_400-function.
    MOVE icon_print                  TO gs_toolbar_400-icon.
    MOVE  text-014                   TO gs_toolbar_400-quickinfo.
    MOVE  text-014                   TO gs_toolbar_400-text.
    MOVE space                       TO gs_toolbar_400-disabled.
    APPEND gs_toolbar_400            TO e_object->mt_toolbar.

*   CMS Control provisional per activa nomes Centro 3020.
*   Añacir boton Defectos rollo UDefine PMC 51823
*    IF sw_no_dsp_def = abap_false.


*    SELECT SINGLE flag_inactivo
*      FROM ztpp0032
*      INTO ( g_flag_install_def )
*      WHERE apl   = 'BOTON_DEFECTO_ZPP0028' AND
*            werks = gv_werks.
*
*    IF sy-subrc <> 0 OR g_flag_install_def = ' '.
      MOVE  'DEF'                      TO gs_toolbar_400-function.
      MOVE icon_error_protocol         TO gs_toolbar_400-icon.
      MOVE  text-040                   TO gs_toolbar_400-quickinfo.
      MOVE  text-040                   TO gs_toolbar_400-text.
      MOVE space                       TO gs_toolbar_400-disabled.
      APPEND gs_toolbar_400            TO e_object->mt_toolbar.

*    ENDIF.

  ENDMETHOD.


*&---------------------------------------------------------------------*
*         METHOD handle_user_command
*----------------------------------------------------------------------*
  METHOD handle_user_command.
    DATA: index_rows       TYPE         lvc_t_row,
          lt_sel_rows      TYPE         lvc_t_roid,
          ls_selected_line LIKE LINE OF lt_sel_rows.

    DATA: lv_error TYPE xfeld.
    DATA: lv_extnumber TYPE balnrext.
    DATA: num_reg TYPE sy-tabix.
    DATA: wa_datos_400 TYPE zepp0028_lotes.
    DATA: l_rc TYPE c.
    DATA lt_mseg TYPE TABLE OF mseg.
    DATA lt_lines_blank TYPE TABLE OF tdline.

    REFRESH lt_sel_rows.

    CALL METHOD gr_grid_400->get_selected_rows
      IMPORTING
        et_row_no     = lt_sel_rows
        et_index_rows = index_rows.

    CALL METHOD cl_gui_cfw=>flush.

    DESCRIBE TABLE  lt_sel_rows LINES num_reg.
    IF num_reg = 0.
      MESSAGE i000(0k) WITH text-001.
    ELSEIF num_reg > 1.
      MESSAGE i000(0k) WITH text-002.
    ELSE.

      READ TABLE lt_sel_rows INTO ls_selected_line INDEX 1.
      READ TABLE gt_datos_400 INTO wa_datos_400 INDEX ls_selected_line-row_id.

      CASE e_ucomm.
        WHEN 'ELIMINAR'.
          CALL FUNCTION 'POPUP_TO_CONFIRM_STEP'
            EXPORTING
              textline1      = text-018 "'¿Realmente desea borrar la notificación del nodo seleccionado?'(902)
*             textline2      = 'this node and all its subnodes?'(903)
              titel          = text-019 "'Confirmación'(904)
              cancel_display = ' '
            IMPORTING
              answer         = l_rc.
          IF l_rc EQ 'J'.
            CASE wa_datos_400-tipo.
              WHEN ''.
                PERFORM eliminar_etiqueta USING wa_datos_400
                                          CHANGING wa_datos_sel
                                                   lv_error.

                PERFORM eliminar_datos_defecto_lote USING  gv_aufnr_400 " p_aufnr type aufnr
                                                        gv_werks "p_werks type werks_d
                                                        wa_datos_sel-plnbez " p_matnr type matnr
                                                        wa_datos_400-charg.  "p_charg type charg_d.


              WHEN 'P'.
                PERFORM eliminar_pulper USING wa_datos_400
                                        CHANGING wa_datos_sel
                                                 lv_error.

            ENDCASE.

            PERFORM clean_vbles.

            IF lv_error IS INITIAL.
              DELETE gt_datos_400 INDEX ls_selected_line-row_id.

              CALL METHOD gr_grid_400->refresh_table_display.
            ELSE.
              PERFORM mostrar_log.

            ENDIF.
          ENDIF.



        WHEN 'REIMPRIMIR'.
          PERFORM reimprimir USING wa_datos_sel
                               wa_datos_400.

        WHEN 'DEF'.
          gw_out_dyn500     = abap_true.
          gw_first_time500  = abap_true.

          PERFORM invocar_dyn500 USING wa_datos_400.

        WHEN OTHERS.
      ENDCASE.
    ENDIF.

  ENDMETHOD.


ENDCLASS.
