*&---------------------------------------------------------------------*
*&  Include           ZRPP0007_FORMS
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  F_CONS_FONDO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_cons_fondo .

  " Inicialización:
  PERFORM f_inicializacion.

  " Recuperación datos:
  PERFORM f_rec_datos.

  " Consumos:
  PERFORM f_consumos.

  " Grabar log:
  PERFORM f_grabar_log.

  PERFORM notificar_errores.

ENDFORM.                    " F_CONS_FONDO
*&---------------------------------------------------------------------*
*&      Form  F_CONS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_cons .

  " Inicialización:
  PERFORM f_inicializacion.

  " Recuperación de datos:
  PERFORM f_rec_datos.

*  IF cb_tot = 'X'.
  CALL SCREEN 0050.
*  ELSE.
*
*    " Consumos:
*    PERFORM f_consumos.
*
*    " Mostrar listado:
*    CALL SCREEN 0100.
*
*  ENDIF.

ENDFORM.                    " F_CONS
*&---------------------------------------------------------------------*
*&      Form  F_INICIALIZACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_inicializacion .

  CLEAR: gt_mov_acumul, gt_picos, gt_datos, gt_mov_excluir.
  REFRESH: gt_mov_acumul, gt_picos, gt_datos, gt_mov_excluir.

  " Inicializamos la fecha y hora de ejecución:
  CLEAR: gv_datum, gv_uzeit.
  gv_datum = sy-datum.
  gv_uzeit = sy-uzeit.

ENDFORM.                    " F_INICIALIZACION
*&---------------------------------------------------------------------*
*&      Form  F_REC_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_rec_datos .

  DATA: ls_mov_acumul LIKE LINE OF gt_mov_acumul,
        ls_picos      LIKE LINE OF gt_picos,
        lv_index      LIKE         sy-tabix.
  DATA: ls_mov_excluir LIKE LINE OF gt_mov_excluir.

  DATA: so_datum_1 TYPE RANGE OF aufm-budat,
        so_cputm_1 TYPE RANGE OF mkpf-cputm,
        so_datum_2 TYPE RANGE OF aufm-budat,
        so_cputm_2 TYPE RANGE OF mkpf-cputm.
  DATA: ls_cputm LIKE LINE OF so_cputm_1,
        ls_datum LIKE LINE OF so_datum_1.
  DATA: lv_datini LIKE sy-datum,
        lv_datfin LIKE sy-datum,
        lv_horini LIKE mkpf-cputm,
        lv_horfin LIKE mkpf-cputm.

  " 1) Seleccionar dónde tendremos que hacer los acumulados:
  IF cb_tot IS INITIAL.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_mov_acumul
      FROM aufm AS a
      INNER JOIN mchb AS b ON ( b~matnr = a~matnr
                                AND b~werks = a~werks
                                AND b~lgort = a~lgort
                                AND b~charg = a~charg )
      WHERE a~budat IN so_budat
      AND a~bwart IN so_bwart
      AND a~werks IN so_werks
      AND a~lgort IN so_lgort
* GST - 25/11/2015 - Reducción consumo picos ->
*    AND ( b~clabs > 0 AND b~clabs < 1500 ).
      AND ( b~clabs > 0 AND b~clabs < p_clabs ).
* GST - 25/11/2015 - Reducción consumo picos <-

  ELSE.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_mov_acumul
    FROM aufm AS a
    INNER JOIN mchb AS b ON ( b~matnr = a~matnr
                              AND b~werks = a~werks
                              AND b~lgort = a~lgort
                              AND b~charg = a~charg )
    WHERE a~budat IN so_budat
    AND a~bwart IN so_bwart
    AND a~werks IN so_werks
    AND a~lgort IN so_lgort
      AND b~clabs > 0.


  ENDIF.

  SORT gt_mov_acumul BY matnr ASCENDING
                        werks ASCENDING
                        lgort ASCENDING
                        charg ASCENDING.
*                        aufnr ASCENDING
*                        rsnum ASCENDING
*                        rspos ASCENDING.

*  DELETE ADJACENT DUPLICATES FROM gt_mov_acumul.
  DELETE ADJACENT DUPLICATES FROM gt_mov_acumul COMPARING matnr werks
  lgort charg.


* GST - 27/11/2015 ->
* No consumir rollos con movimientos en las últimas dos horas
* en fecha de ejecución:

  CLEAR: lv_datini, lv_datfin, lv_horini, lv_horfin.
  lv_datfin = gv_datum.
  lv_horfin = gv_uzeit.

* Cambio temporal, sustituir 2h por 1 segundo.
  lv_horini = lv_horfin - 7200. " 2 horas menos
  IF lv_horini > lv_horfin.
    lv_datini = lv_datfin - 1.
  ELSE.
    lv_datini = lv_datfin.
  ENDIF.

  CLEAR: so_datum_1, so_cputm_1, so_datum_2, so_cputm_2.
  REFRESH: so_datum_1, so_cputm_1, so_datum_2, so_cputm_2.

  IF lv_datini = lv_datfin.

    CLEAR ls_datum.
    ls_datum-sign = 'I'.
    ls_datum-option = 'EQ'.
    ls_datum-low = lv_datini.
    APPEND ls_datum TO so_datum_1.

    CLEAR ls_cputm.
    ls_cputm-sign = 'I'.
    ls_cputm-option = 'BT'.
    ls_cputm-low = lv_horini.
    ls_cputm-high = lv_horfin.
    APPEND ls_cputm TO so_cputm_1.

    SELECT * INTO CORRESPONDING FIELDS OF TABLE gt_mov_excluir
      FROM aufm AS a
      INNER JOIN mchb AS b ON ( b~matnr = a~matnr
                                AND b~werks = a~werks
                                AND b~lgort = a~lgort
                                AND b~charg = a~charg )
      INNER JOIN mkpf AS c ON ( c~mblnr = a~mblnr
                                AND c~mjahr = a~mjahr )
      WHERE a~budat IN so_datum_1
      AND a~bwart IN so_bwart
      AND a~werks IN so_werks
      AND a~lgort IN so_lgort
      AND c~cputm IN so_cputm_1.

    SORT gt_mov_excluir BY matnr ASCENDING
                           werks ASCENDING
                           lgort ASCENDING
                           charg ASCENDING
                           aufnr ASCENDING
                           rsnum ASCENDING
                           rspos ASCENDING.

    DELETE ADJACENT DUPLICATES FROM gt_mov_excluir.

  ELSE.

    " A seleccionar del día anterior:
    CLEAR ls_datum.
    ls_datum-sign = 'I'.
    ls_datum-option = 'EQ'.
    ls_datum-low = lv_datini.
    APPEND ls_datum TO so_datum_1.

    CLEAR ls_cputm.
    ls_cputm-sign = 'I'.
    ls_cputm-option = 'BT'.
    ls_cputm-low = lv_horini.
    ls_cputm-high = '235959'.
    APPEND ls_cputm TO so_cputm_1.

    " A seleccionar del día posterior:
    CLEAR ls_datum.
    ls_datum-sign = 'I'.
    ls_datum-option = 'EQ'.
    ls_datum-low = lv_datfin.
    APPEND ls_datum TO so_datum_2.

    CLEAR ls_cputm.
    ls_cputm-sign = 'I'.
    ls_cputm-option = 'BT'.
    ls_cputm-low = '000000'.
    ls_cputm-high = lv_horfin.
    APPEND ls_cputm TO so_cputm_2.

    SELECT * APPENDING CORRESPONDING FIELDS OF TABLE gt_mov_excluir
      FROM aufm AS a
      INNER JOIN mchb AS b ON ( b~matnr = a~matnr
                                AND b~werks = a~werks
                                AND b~lgort = a~lgort
                                AND b~charg = a~charg )
      INNER JOIN mkpf AS c ON ( c~mblnr = a~mblnr
                                AND c~mjahr = a~mjahr )
      WHERE a~budat IN so_datum_1
      AND a~bwart IN so_bwart
      AND a~werks IN so_werks
      AND a~lgort IN so_lgort
      AND c~cputm IN so_cputm_1.

    SELECT * APPENDING CORRESPONDING FIELDS OF TABLE gt_mov_excluir
      FROM aufm AS a
      INNER JOIN mchb AS b ON ( b~matnr = a~matnr
                                AND b~werks = a~werks
                                AND b~lgort = a~lgort
                                AND b~charg = a~charg )
      INNER JOIN mkpf AS c ON ( c~mblnr = a~mblnr
                                AND c~mjahr = a~mjahr )
      WHERE a~budat IN so_datum_2
      AND a~bwart IN so_bwart
      AND a~werks IN so_werks
      AND a~lgort IN so_lgort
      AND c~cputm IN so_cputm_2.

    SORT gt_mov_excluir BY matnr ASCENDING
                           werks ASCENDING
                           lgort ASCENDING
                           charg ASCENDING
                           aufnr ASCENDING
                           rsnum ASCENDING
                           rspos ASCENDING.

    DELETE ADJACENT DUPLICATES FROM gt_mov_excluir.

  ENDIF.


* GST - 27/11/2015 <-

  " 2) Confeccionamos tablas de picos con nº ordenes:
  LOOP AT gt_mov_acumul INTO ls_mov_acumul.

* GST - 27/11/2015 ->
    CLEAR ls_mov_excluir.
    READ TABLE gt_mov_excluir INTO ls_mov_excluir
               WITH KEY matnr = ls_mov_acumul-matnr
                        werks = ls_mov_acumul-werks
                        lgort = ls_mov_acumul-lgort
                        charg = ls_mov_acumul-charg.

    IF ls_mov_excluir IS INITIAL.
* GST - 27/11/2015 <-

      CLEAR: ls_picos, lv_index.
      READ TABLE gt_picos INTO ls_picos WITH KEY matnr =
      ls_mov_acumul-matnr
                                                 werks =
                                                 ls_mov_acumul-werks
                                                 lgort =
                                                 ls_mov_acumul-lgort
                                                charg =
                                                ls_mov_acumul-charg.

      lv_index = sy-tabix.

      IF ls_picos IS INITIAL.
        MOVE-CORRESPONDING ls_mov_acumul TO ls_picos.
        SELECT SINGLE clabs INTO ls_picos-clabs
          FROM mchb
          WHERE matnr = ls_picos-matnr
          AND werks = ls_picos-werks
          AND lgort = ls_picos-lgort
          AND charg = ls_picos-charg.
        ls_picos-n_ord = 1.
        ls_picos-meins = 'KG'.
        APPEND ls_picos TO gt_picos.
      ELSE.
        ls_picos-n_ord = ls_picos-n_ord + 1.
        MODIFY gt_picos FROM ls_picos INDEX lv_index.
      ENDIF.
    ENDIF.
  ENDLOOP.


*  IF cb_tot = 'X'.

  LOOP AT gt_mov_acumul INTO ls_mov_acumul.

    lv_index = sy-tabix.

    CLEAR: ls_picos, lv_index.
    READ TABLE gt_picos INTO ls_picos WITH KEY matnr =
    ls_mov_acumul-matnr
                                               werks =
                                               ls_mov_acumul-werks
                                               lgort =
                                               ls_mov_acumul-lgort
                                              charg =
                                              ls_mov_acumul-charg.


    IF NOT ls_picos IS INITIAL.
      MOVE-CORRESPONDING ls_mov_acumul TO gs_sel.
      gs_sel-clabs = ls_picos-clabs.
      gs_sel-meins = ls_picos-meins.
*        MODIFY gt_sel FROM gs_sel INDEX lv_index.
      APPEND gs_sel TO gt_sel.
    ENDIF.

  ENDLOOP.

*  ENDIF.


ENDFORM.                    " F_REC_DATOS


* Antes de generar movimientos, validamos que el rollo esté disponible
FORM check_lote_bobina USING          p_charg TYPE charg_d
                            CHANGING  p_rc    TYPE syst_subrc
                                      p_user    TYPE char12.

  DATA: t_enq TYPE TABLE OF seqg3.
  DATA:  l_user  TYPE char12.

  CLEAR: l_user , p_rc.

  CALL FUNCTION 'ENQUE_READ'
    EXPORTING
      guname = ' '
    TABLES
      enq    = t_enq.

  LOOP AT t_enq INTO DATA(ls_enq) WHERE gname = 'MCH1'.
    IF ls_enq-garg CS p_charg.
      p_user = ls_enq-guname.
      p_rc = 1.
      IF sy-batch = 'X'.
        WRITE :/ |Atención! Lote { p_charg } bloqueado por usuario { p_user }. Se consumirá más tarde.|.

      ENDIF.
      EXIT.
    ENDIF.
  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_CONSUMOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_consumos .

  DATA: ls_picos      LIKE LINE OF gt_picos,
        ls_mov_acumul LIKE LINE OF gt_mov_acumul,
        ls_datos      TYPE         zstpp_consumo_picos_rollo,
        lv_cont       TYPE         i,
        lv_consumida  TYPE        labst . "dec_16_06_s

  DATA: lt_goodsmvt_item     TYPE bapi2017_gm_item_create_t,
        lt_goodsmvt_item_bob TYPE STANDARD TABLE OF bapi2017_gm_item_create,
        lt_goodsmvt_item_311 TYPE STANDARD TABLE OF bapi2017_gm_item_create,
        lt_goodsmvt_item_531 TYPE STANDARD TABLE OF bapi2017_gm_item_create,
        lt_return            TYPE          bapiret2_t.

  DATA: ls_goodsmvt_header  TYPE bapi2017_gm_head_01,
        ls_goodsmvt_code    TYPE bapi2017_gm_code,
        ls_goodsmvt_item    TYPE bapi2017_gm_item_create,
        lv_materialdocument TYPE bapi2017_gm_head_ret-mat_doc,
        lv_matdocumentyear  TYPE bapi2017_gm_head_ret-doc_year,
        lv_materialdo_261   TYPE bapi2017_gm_head_ret-mat_doc,
        lv_matyear_261      TYPE bapi2017_gm_head_ret-doc_year,

        ls_return           TYPE bapiret2.
  DATA: l_cont_reg TYPE i,
        l_rc       TYPE syst_subrc,
        l_user     TYPE char12.

* 08/03/2021 - 65397 - CMS
* Nuevo tratamiento para nuevo modelo de costes
* 	Consumo de rollo (movimiento 261) en el almacén de pope (1020) contra la OF de rollo por los mismos kg del pico de  rollo.
* 	Movimiento 531 para crear subproducto(pulper) pasándole a la BAPI el nºreserva+posición del subproducto pulper.
* 	Se traspasa (movimiento 311) el lote de pulper generado en el punto anterior al almacén pulper (almacén 4002)
* 	Se clasifica el lote del material pulper sin motivo pulper, lote origen, operario y FSC = %


  CLEAR gt_datos[]. REFRESH gt_datos[].

  LOOP AT gt_picos INTO ls_picos.

* CMS 06-05-2020 Chequeo del bloqueo de lote de rollo.
    CLEAR: l_user , l_rc.
    PERFORM check_lote_bobina USING  ls_picos-charg
                           CHANGING  l_rc
                                     l_user .
    IF l_rc IS NOT INITIAL.
      CLEAR: ls_datos-mblnr , ls_datos-mjahr.
      MOVE-CORRESPONDING ls_picos TO ls_datos.
      ls_datos-icono   = '@0A@'.
      ls_datos-type    = 'E'.
      ls_datos-message = |Atención! Lote bloqueado por usuario { l_user }. Consumir más tarde.|.
      APPEND ls_datos TO gt_datos.
      CONTINUE.
    ENDIF.


***************
** MOV. 261 ***
***************
    " Cabecera:
    CLEAR:  ls_goodsmvt_header , lt_goodsmvt_item[].
    ls_goodsmvt_header-pstng_date  = sy-datum.
    ls_goodsmvt_header-doc_date    = sy-datum.
    ls_goodsmvt_header-header_txt  = text-002.
    ls_goodsmvt_code-gm_code       = '06'.

    LOOP AT gt_mov_acumul INTO ls_mov_acumul WHERE matnr = ls_picos-matnr
                                              AND werks = ls_picos-werks
                                              AND lgort = ls_picos-lgort
                                              AND charg = ls_picos-charg.
      CLEAR: ls_goodsmvt_item.
      ls_goodsmvt_item-stge_loc   = ls_picos-lgort.
      ls_goodsmvt_item-material   = ls_picos-matnr.
      ls_goodsmvt_item-batch      = ls_picos-charg.
*      ls_goodsmvt_item-material   = gc_matnr_bobpulper.
      ls_goodsmvt_item-plant      = ls_picos-werks.
      ls_goodsmvt_item-move_type  = '261'.
      ls_goodsmvt_item-entry_uom  = 'KG'.

      SELECT SINGLE aufnr
        INTO @DATA(l_aufnr)
        FROM aufm
        WHERE werks = @ls_picos-werks  AND
              charg = @ls_picos-charg  AND
              bwart = '101'.
      ls_goodsmvt_item-orderid = l_aufnr.

* Obtención de los Kg a procesar.
      IF ls_picos-n_ord = 1.

        ls_goodsmvt_item-entry_qnt = ls_picos-clabs.

      ELSEIF ls_picos-n_ord <> 1 AND lv_cont < ls_picos-n_ord.

        ls_goodsmvt_item-entry_qnt = ls_picos-clabs / ls_picos-n_ord.

        lv_consumida = lv_consumida + ( ls_picos-clabs / ls_picos-n_ord
        ).
      ELSEIF ls_picos-n_ord <> 1 AND lv_cont = ls_picos-n_ord.

        ls_goodsmvt_item-entry_qnt = ls_picos-clabs - lv_consumida.

      ENDIF.

* A partir de los datos del rollo, bifurcar kg según OFs bobina.
      PERFORM calcular_kg_ofs_bobina USING ls_goodsmvt_item
                                           ls_picos-charg
                                  CHANGING lt_goodsmvt_item_bob.

      INSERT LINES OF lt_goodsmvt_item_bob INTO TABLE lt_goodsmvt_item.

*  YTG 7000012469 Ticket_##_18483
      lv_cont =  lv_cont + 1.

    ENDLOOP.

    DELETE lt_goodsmvt_item[] WHERE entry_qnt = 0.

* Creamos el documento de consumo (mov.261):
    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = ls_goodsmvt_header
        goodsmvt_code    = ls_goodsmvt_code
      IMPORTING
        materialdocument = lv_materialdo_261
        matdocumentyear  = lv_matyear_261
      TABLES
        goodsmvt_item    = lt_goodsmvt_item
        return           = lt_return.

* Listado Log de errores:
    CLEAR: ls_return, ls_datos.
    READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
    IF ls_return IS NOT INITIAL.  " Hay error
      MOVE-CORRESPONDING ls_picos TO ls_datos.
      ls_datos-icono   = '@0A@'.
      ls_datos-type    = ls_return-type.
      ls_datos-message = ls_return-message.
      APPEND ls_datos TO gt_datos.
      ROLLBACK WORK.
      RETURN.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
      WAIT UP TO 1 SECONDS.
    ENDIF.


******************
******** MOV 531 *
******************

    CLEAR: lt_goodsmvt_item_531[] .
    REFRESH: lt_return.
    " Cabecera:
    ls_goodsmvt_header-pstng_date  = sy-datum.
    ls_goodsmvt_header-doc_date    = sy-datum.
    ls_goodsmvt_header-header_txt  = text-002.

    " Tipo de movimiento (para 531):
    ls_goodsmvt_code-gm_code = '03'.

    " Posiciones:
    lv_cont = 1.
    CLEAR lv_consumida.

    DATA: l_msg  TYPE bapi_msg,
          l_msgr TYPE bapi_msg.

    LOOP AT lt_goodsmvt_item INTO DATA(ls_261).

      APPEND INITIAL LINE TO lt_goodsmvt_item_531 ASSIGNING FIELD-SYMBOL(<fs_531>).

      <fs_531>-material  = gc_matnr_bobpulper.
      <fs_531>-plant     = ls_261-plant.
      <fs_531>-stge_loc  = ls_261-stge_loc.
*      <fs_531>-batch     = ls_picos-charg.
      <fs_531>-move_type = '531'.
      <fs_531>-stck_type = ' '. " Libre utilización
      <fs_531>-entry_qnt = ls_261-entry_qnt.
      <fs_531>-entry_uom = 'KG'.
      <fs_531>-orderid   = ls_261-orderid.

* Obtener nºreserva + posición para generar subproducto(pulper)
      PERFORM obtener_reserva_subproducto USING <fs_531>-orderid
                                       CHANGING <fs_531>-reserv_no
                                                <fs_531>-res_item
                                                l_msg.
      IF NOT l_msg IS INITIAL.
        l_msgr = l_msg.
      ENDIF.
    ENDLOOP.

* Creamos el documento de consumo (mov.531):
    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = ls_goodsmvt_header
        goodsmvt_code    = ls_goodsmvt_code
      IMPORTING
        materialdocument = lv_materialdocument
        matdocumentyear  = lv_matdocumentyear
      TABLES
        goodsmvt_item    = lt_goodsmvt_item_531
        return           = lt_return.

* Listado Log de errores:
    CLEAR: ls_return, ls_datos.
    READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
    IF ls_return IS NOT INITIAL.  " Hay error
      MOVE-CORRESPONDING ls_picos TO ls_datos.
      ls_datos-icono   = '@0A@'.
      ls_datos-type    = ls_return-type.
      ls_datos-message = ls_return-message.
      IF ls_return-message CS 'reserva' AND NOT l_msgr IS INITIAL.
        ls_datos-message = |{ ls_return-message }. { l_msgr }|.
      ENDIF.
      APPEND ls_datos TO gt_datos.
      ROLLBACK WORK.
      RETURN.
    ELSE.  " No hay error
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
      WAIT UP TO 1 SECONDS.

*      COMMIT WORK AND WAIT.
* Obtener rollos pulper creados a partir del doc.material creado en el mov.previo(531)
      SELECT   b~matnr , b~werks , b~lgort , b~charg ,  b~clabs
        INTO TABLE @DATA(lt_datos_bob_pulper)
        FROM mseg AS s
        INNER JOIN mchb AS b ON b~matnr = s~matnr AND
                                b~werks = s~werks AND
                                b~lgort = s~lgort AND
                                b~charg = s~charg
        WHERE mblnr = @lv_materialdocument AND
              mjahr = @lv_matdocumentyear.

* 08/03/2021 - CMS

* Movmiento 311 1020 ---> 4001
      ls_goodsmvt_code = '04'.
      CLEAR: l_cont_reg , lv_materialdocument , lv_matdocumentyear , lt_goodsmvt_item_311[].

      LOOP AT lt_datos_bob_pulper INTO DATA(ls_datos_pulper).

        APPEND INITIAL LINE TO lt_goodsmvt_item_311 ASSIGNING FIELD-SYMBOL(<fs_mvt>).
        <fs_mvt>-move_type    = '311'.
        <fs_mvt>-material     = ls_datos_pulper-matnr.
        <fs_mvt>-batch        = ls_datos_pulper-charg.
        <fs_mvt>-move_stloc   = '4002'.
        <fs_mvt>-stge_loc     = ls_datos_pulper-lgort.
        <fs_mvt>-plant        = ls_datos_pulper-werks.
        <fs_mvt>-move_plant   = ls_datos_pulper-werks.
        <fs_mvt>-entry_qnt    = ls_datos_pulper-clabs.

      ENDLOOP.

*     Creamos el documento 311
      CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
        EXPORTING
          goodsmvt_header  = ls_goodsmvt_header
          goodsmvt_code    = ls_goodsmvt_code
        IMPORTING
          materialdocument = lv_materialdocument
          matdocumentyear  = lv_matdocumentyear
        TABLES
          goodsmvt_item    = lt_goodsmvt_item_311
          return           = lt_return.

      CLEAR: ls_return, ls_datos.
      READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
      IF ls_return IS NOT INITIAL.  " Hay error

        CLEAR: ls_datos-mblnr, ls_datos-mjahr .
        MOVE-CORRESPONDING ls_picos TO ls_datos.
        ls_datos-icono   = '@0A@'.
        ls_datos-type    = ls_return-type.
        ls_datos-message = ls_return-message.
        APPEND ls_datos TO gt_datos.

      ELSE.  " No hay error
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.

* CMS 15.01.2020   Tiquet 58871
* Se informa la característica Z_LOTE_ORIGEN para las bob.pulper creadas.

        LOOP AT lt_goodsmvt_item_311 INTO DATA(ls_mov_311).

          PERFORM anyadir_caract_lote_origen USING ls_mov_311-batch  " Lote bob.pulper creada
                                                 ls_picos-charg         " Lote rollo origen
                                                 ls_datos-message.      " Msg error
          IF ls_datos-message IS NOT INITIAL.

            MOVE-CORRESPONDING ls_picos TO ls_datos.
            ls_datos-mblnr = lv_materialdocument.
            ls_datos-mjahr = lv_matdocumentyear.
            ls_datos-icono = '@0A@'.
            ls_datos-type = 'E'.
            APPEND ls_datos TO gt_datos.

          ELSE.

            MOVE-CORRESPONDING ls_picos TO ls_datos.
            ls_datos-mblnr = lv_materialdocument.
            ls_datos-mjahr = lv_matdocumentyear.
            ls_datos-icono = '@08@'.
            ls_datos-type = 'S'.
            APPEND ls_datos TO gt_datos.

          ENDIF.

        ENDLOOP.

      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                    " F_CONSUMOS
*

FORM calcular_kg_ofs_bobina USING psi_items_rollo TYPE bapi2017_gm_item_create
                                  pi_rollo         TYPE charg_d
                            CHANGING pto_items_bob TYPE bapi2017_gm_item_create_t.
  DATA: l_ancho_total TYPE zancho.
  DATA: l_kg_total    TYPE menge_d.
  DATA: l_kg_restantes    TYPE menge_d.

* 	Se obtendrán la/s OF/s de bobina relacionadas con la OF de rollo.
* 	Se obtendrán los anchos de los materiales de la/s OF/s de bobina.
* 	Se calcularán los kg del pico de rollo a consumir en cada OF/s de bobina en función del ancho de su/s material/es.
* 	Para cada OF/s de bobina, se realizará un consumo (movimiento 261) de los kg del lote del pico de rollo que le
*   corresponden proporcionalmente al ancho de su material; en el texto de la cabecera del documento de material grabar
*   el literal Consumo picos rollo
* 	Para cada OF/s de bobina, se realizará una entrada de subproducto de material pulper (movimiento 531) en
*   el almacén de pope (1020) de los kg del lote del pico de rollo que le corresponden proporcionalmente al ancho de su material;
*   en el texto de la cabecera del documento de material grabar el literal Consumo picos rollo
* 	Se clasificará el lote del material pulper sin motivo pulper, lote origen, operario y FSC = 100.

  CLEAR pto_items_bob[].
* Obtener OF Rollo.
  SELECT SINGLE aufnr
    FROM aufm
    INTO @DATA(l_aufnr_rollo)
    WHERE werks = @psi_items_rollo-plant AND
          charg = @pi_rollo              AND
          bwart = '101'.

  CHECK sy-subrc = 0.

* Obtener datos de OFs de bobinas relacionadas con la OF Rollo.
  SELECT aufk~aufnr , plnbez , zzancho
    FROM aufk
    INNER JOIN afko ON afko~aufnr = aufk~aufnr
    INNER JOIN mara ON mara~matnr = afko~plnbez
    INTO TABLE @DATA(lt_ordenes_bobina)
    WHERE zzaufnr_rollo = @l_aufnr_rollo AND
          auart = 'ZI02'.

  CHECK sy-subrc = 0.

  DATA(l_num_bob) = lines( lt_ordenes_bobina ).


  CLEAR: l_ancho_total.
  l_kg_total     = psi_items_rollo-entry_qnt.
  l_kg_restantes = psi_items_rollo-entry_qnt.


  LOOP AT lt_ordenes_bobina INTO DATA(ls_ordenes_bobina).  " opción1 Para bobina partida se multiplicará el ancho por 2 o 3 antes de acumular.
    l_ancho_total = ls_ordenes_bobina-zzancho + l_ancho_total.
  ENDLOOP.

  DATA(l_cont) = 0.

  LOOP AT lt_ordenes_bobina INTO ls_ordenes_bobina.

    l_cont = l_cont + 1.
    APPEND INITIAL LINE TO pto_items_bob ASSIGNING FIELD-SYMBOL(<fs_bob>).
    <fs_bob> = CORRESPONDING #( psi_items_rollo ).
    <fs_bob>-orderid = ls_ordenes_bobina-aufnr.

* Al tratarse de un consumo(206), no necesitamos informar reserva.
* Se llamará posteriormente para generar el subproducto(mov.531).
*    PERFORM obtener_reserva USING <fs_bob>-orderid
*                             CHANGING <fs_bob>-reserv_no
*                                      <fs_bob>-res_item.

    IF l_cont = l_num_bob. "ultima bobina a repartir

      <fs_bob>-entry_qnt = l_kg_restantes.

    ELSE. " Calculamos los kg. en proporción al ancho.

      <fs_bob>-entry_qnt = l_kg_total * ( ls_ordenes_bobina-zzancho / l_ancho_total ). " opción 2 Para bobina partida multiplicar ancho por 2 o 3

      <fs_bob>-entry_qnt = round( val = <fs_bob>-entry_qnt dec = 0 ).

      l_kg_restantes     = l_kg_restantes - <fs_bob>-entry_qnt.

    ENDIF.

  ENDLOOP.

ENDFORM.


FORM obtener_reserva_subproducto USING p_aufnr TYPE aufnr
                     CHANGING p_rsnum TYPE rsnum
                              p_rspos TYPE rspos
                              p_msg   TYPE bapi_msg.
  CLEAR: p_rsnum , p_rspos, p_msg.

* Obtener la reserva
  SELECT SINGLE rsnum
    INTO @p_rsnum
    FROM afko
    WHERE aufnr = @p_aufnr.

* Obtener reserva/posición del subproducto.
  SELECT SINGLE resb~rsnum , resb~rspos
       INTO ( @p_rsnum, @p_rspos )
    FROM resb
    WHERE rsnum = @p_rsnum AND
          sortf = 'SUB'.
  IF sy-subrc <> 0.
    CLEAR: p_rspos.

    p_msg = 'Campo Concepto clas. vacío, revisar lista de materiales, debería indicar cual es SUB'.
  ENDIF.

ENDFORM.

* CMS 15.01.2020   Tiquet 58871
* Se añade la característica Lote Origen a la bobina pulper.
FORM anyadir_caract_lote_origen USING p_charg TYPE charg_d
                                      p_charg_ori TYPE charg_d
                                      p_msg TYPE bapi_msg.

  DATA      l_objectkey   TYPE bapi1003_key-object.
  DATA: lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr,
        ls_valuesnum  TYPE bapi1003_alloc_values_num,
        lt_return     TYPE TABLE OF bapiret2
        .
  CONSTANTS: gc_023             TYPE bapi1003_key-classtype VALUE '023'.

  CLEAR : lt_valuesnum ,
          lt_valueschar ,
          lt_valuescurr ,
          ls_valuesnum  ,
          lt_return     .

  l_objectkey = |{ gc_matnr_bobpulper }{ p_charg }|.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_objectkey
      objecttable     = gc_mch1
      classnum        = gc_bobina_pulper "gc_z_bobina
      classtype       = gc_023
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.

  IF line_exists( lt_return[ type = 'E' ] ).
    p_msg = lt_return[ type = 'E' ]-message.
    RETURN.
  ENDIF.
  APPEND VALUE bapi1003_alloc_values_char( charact    = 'Z_LOTE_ORIGEN'
                                           value_char = p_charg_ori ) TO lt_valueschar.

* INI 25/09/2020 - 62887 - CMS - Añadir %FSC a bobina pulper
  APPEND VALUE bapi1003_alloc_values_num( charact    = 'Z_FSC_PORCENTAJE'
                                          value_from = 100 ) TO lt_valuesnum.
* FIN 25/09/2020 - 62887 - CMS - Añadir %FSC a bobina pulper


  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = l_objectkey
      objecttable        = gc_mch1
      classnum           = gc_bobina_pulper
      classtype          = gc_023
    TABLES
      allocvaluesnumnew  = lt_valuesnum
      allocvaluescharnew = lt_valueschar
      allocvaluescurrnew = lt_valuescurr
      return             = lt_return.

  IF line_exists( lt_return[ type = 'E' ] ).
    p_msg = lt_return[ type = 'E' ]-message.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    RETURN.
  ENDIF.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.

ENDFORM.                    "
*&---------------------------------------------------------------------*
*&      Form  F_GRABAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_grabar_log .

  DATA: t_variant TYPE disvariant.

* Variante ALV
  CLEAR t_variant.
  t_variant-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
    EXPORTING
      i_save     = 'U'
    CHANGING
      cs_variant = t_variant
    EXCEPTIONS
      not_found  = 2.

* Genero las Columnas
  PERFORM f_col_alv.

* Llamo a la Función que visualiza el ALV
  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
*     i_structure_name = i_structure_name
      it_fieldcat = gt_fieldcat_ant
      i_save      = 'U'
      is_variant  = t_variant
    TABLES
      t_outtab    = gt_datos.

ENDFORM.                    " F_GRABAR_LOG
*&---------------------------------------------------------------------*
*&      Form  F_COL_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_col_alv .

  DATA: ls_fcat TYPE slis_fieldcat_alv.
  DATA: lv_tabix TYPE sytabix.


  REFRESH: gt_fieldcat_ant.

* Pasar tabla interna al formato del fieldcat
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_program_name         = sy-repid
      i_internal_tabname     = 'GT_DATOS'
      i_inclname             = sy-repid
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = gt_fieldcat_ant
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

*  LOOP AT gt_fieldcat_ant INTO ls_fcat.
*    lv_tabix = sy-tabix.
*    CASE ls_fcat-fieldname.
*      WHEN 'VBELN'.
*        ls_fcat-seltext   = text-t01.
*        ls_fcat-scrtext_l = text-t01.
*        ls_fcat-scrtext_m = text-t01.
*        ls_fcat-scrtext_s = text-t01.
*        ls_fcat-reptext   = text-t01.
*        ls_fcat-hotspot = 'X'.
*        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.
*    ENDCASE.
*  ENDLOOP.

ENDFORM.                    " F_COL_ALV


*&---------------------------------------------------------------------*
*&      Form  CONSUMIR_SELECCION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM consumir_seleccion .

  DATA: ls_picos LIKE gt_picos.

  CLEAR: gt_picos_aux, ls_picos.
  REFRESH gt_picos_aux.

  LOOP AT lt_sel_rows INTO ls_sel.

    READ TABLE gt_sel INTO gs_sel
    INDEX ls_sel-row_id.
    IF sy-subrc = 0.
      READ TABLE gt_picos INTO ls_picos
      WITH KEY matnr = gs_sel-matnr
               charg = gs_sel-charg.
      IF sy-subrc = 0.
        APPEND ls_picos TO gt_picos_aux.
      ENDIF.

    ENDIF.
  ENDLOOP.

  REFRESH gt_picos.

  gt_picos[] = gt_picos_aux[].

  CLEAR: gt_picos_aux, ls_picos.
  REFRESH gt_picos_aux.


ENDFORM.                    " CONSUMIR_SELECCION


*&---------------------------------------------------------------------*
*&      Form  STATUS_READ
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_MOV_ACUMUL_AUFNR  text
*----------------------------------------------------------------------*
FORM status_read  USING    lv_aufnr
                  CHANGING lv_ctec.

  DATA: lv_objnr LIKE aufk-objnr.
  DATA: lt_status LIKE jstat OCCURS 0.
  DATA: ls_status TYPE jstat.

* Chequeamos el status de la orden
  CLEAR lv_objnr.
  SELECT SINGLE objnr INTO lv_objnr
  FROM aufk
  WHERE aufnr = lv_aufnr.

  CALL FUNCTION 'STATUS_READ'
    EXPORTING
      client           = sy-mandt
      objnr            = lv_objnr
*     ONLY_ACTIVE      = ' '
*   IMPORTING
*     OBTYP            =
*     STSMA            =
*     STONR            =
    TABLES
      status           = lt_status
    EXCEPTIONS
      object_not_found = 1
      OTHERS           = 2.

  CLEAR lv_ctec.
  READ TABLE lt_status INTO ls_status
  WITH KEY stat = 'I0045'.
  IF sy-subrc = 0.
    IF ls_status-inact = ''.
      lv_ctec = 'X'.
    ENDIF.
  ELSE.
    lv_ctec = 'X'.
  ENDIF.

ENDFORM.                    " STATUS_READ
*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion_sel .

  DATA: ls_werks LIKE LINE OF so_werks,
        lv_werks TYPE         werks_d.

  CLEAR: ls_werks, lv_werks.
  IF sy-batch <> 'X'.

    SELECT SINGLE parva FROM usr05
          INTO lv_werks
          WHERE bname = sy-uname AND
          parid = 'WRK'.

    IF lv_werks IS NOT INITIAL.
      ls_werks-sign = 'I'.
      ls_werks-option = 'EQ'.
      ls_werks-low = lv_werks.
      APPEND ls_werks TO so_werks.

      SELECT SINGLE kg_lim_gest_pic INTO p_clabs
        FROM ztpp0006
        WHERE werks = lv_werks AND
              mtart = 'ZROL'.

    ENDIF.
  ENDIF.

  so_budat-sign = 'I'.
  so_budat-option = 'BT'.
  so_budat-low = sy-datum - 30.
  so_budat-high = sy-datum.
  APPEND so_budat.

  LOOP AT SCREEN.
    IF screen-name = 'P_CLABS' OR screen-name CS 'SO_LGORT'.
      screen-input = '0'.
      MODIFY SCREEN.
    ENDIF.

    IF screen-name = 'SO_WERKS-LOW'
       AND sy-batch <> 'X'.
      screen-required = '1'.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.



ENDFORM.                    " INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*&      Form  NOTIFICAR_ERRORES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM notificar_errores .

  IF NOT line_exists( gt_datos[ type = 'E' ] ).
    RETURN.
  ENDIF.


  DATA: send_request TYPE REF TO cl_bcs,
        document     TYPE REF TO cl_document_bcs,
        recipient    TYPE REF TO if_recipient_bcs,
        li_sender2   TYPE REF TO cl_sapuser_bcs,
        l_count_mail TYPE so_obj_len,
        t_attach     TYPE solix_tab,
        wa_attach    TYPE solix.

  DATA l_text TYPE so_text255.

  DATA: lt_bodytext    TYPE bcsy_text,
        l_bodytext_row TYPE soli.

  DATA: li_sender TYPE REF TO cl_cam_address_bcs,
        l_new.


  TRY.
      CALL METHOD cl_bcs=>create_persistent
        RECEIVING
          result = send_request.
  ENDTRY.

  l_text =
'IMPORTANTE: Se ha producido un error en el consumo de picos de rollos' &
' para los siguientes lotes: <br>'
  .
*  REPLACE '&' IN l_text WITH p_werks.
  APPEND VALUE soli( line = l_text ) TO lt_bodytext.

*  CLEAR l_text.
  l_text = '<br>'.
  APPEND VALUE soli( line = l_text ) TO lt_bodytext.

  LOOP AT gt_datos INTO DATA(ls_datos) WHERE type = 'E'.
    l_text = |{ ls_datos-matnr } { ls_datos-charg } | &&
    |{ ls_datos-message } { ls_datos-mblnr } <br>|.
    APPEND VALUE soli( line = l_text ) TO lt_bodytext.
  ENDLOOP.

  DATA(l_subject) = |Error consumo picos|.

  TRY.
      CALL METHOD cl_document_bcs=>create_document
        EXPORTING
          i_type    = 'HTM'
          i_subject = CONV so_obj_des( l_subject )
          i_text    = lt_bodytext
        RECEIVING
          result    = document.
    CATCH cx_document_bcs .
  ENDTRY.


  CALL METHOD send_request->set_document( document ).


  li_sender ?= cl_cam_address_bcs=>create_internet_address(
  i_address_string = CONV adr6-smtp_addr( zclpp_recetas_reparto_pulper=>gc_remitente_mail ) ).

  CALL METHOD send_request->set_sender
    EXPORTING
      i_sender = li_sender.

  LOOP AT s_email.

    recipient = cl_cam_address_bcs=>create_internet_address(
    s_email-low ).

    CALL METHOD send_request->add_recipient( i_recipient = recipient ).

  ENDLOOP.


  CALL METHOD send_request->send( ).


  COMMIT WORK AND WAIT.


ENDFORM.
