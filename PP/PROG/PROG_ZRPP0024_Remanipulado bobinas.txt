*&---------------------------------------------------------------------*
*& Report  ZRPP0024
*&
*&---------------------------------------------------------------------*
*& Programa remanipulado bobinas por carretillero
*&
*&---------------------------------------------------------------------*

REPORT zrpp0024 MESSAGE-ID zpp.

INCLUDE zrpp0024_top.

SELECTION-SCREEN BEGIN OF BLOCK zrpp0024 WITH FRAME TITLE text-001.
PARAMETERS: p_werks LIKE mard-werks OBLIGATORY,
            p_matnr TYPE aufm-matnr OBLIGATORY,
            p_charg TYPE aufm-charg OBLIGATORY,
            p_lgort TYPE mard-lgort OBLIGATORY,
            p_menge TYPE erfmg OBLIGATORY.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(31) text-002.
PARAMETERS: p_c_rema LIKE cawn-atwrt OBLIGATORY MATCHCODE OBJECT zhpp_carac_remanipulado.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK zrpp0024.

INCLUDE zrpp0024_form.

AT SELECTION-SCREEN.
  PERFORM chequeo_motiv_remanipulado.

START-OF-SELECTION.

  " Inicializar variables:
  PERFORM iniciar_var.

  " Chequeo stock material/lote:
  CLEAR gv_clabs.
  SELECT SINGLE clabs INTO gv_clabs
    FROM mchb
    WHERE matnr = p_matnr
    AND werks = p_werks
    AND charg = p_charg
    AND lgort = p_lgort.

  IF gv_clabs IS INITIAL OR gv_clabs < p_menge.
* No hay stock suficiente:

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = p_matnr
      IMPORTING
        output = gv_matnr.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = p_charg
      IMPORTING
        output = gv_charg.

    MESSAGE i040 WITH gv_matnr gv_charg.

  ELSE.

    " 1) Consumo material:
    PERFORM consumo_material.

    IF gv_error <> 'X'.

      " 2) Reclasificación lotes: Peso y Mot. remanipulado
      PERFORM reclasificacion_lotes.

      " 3) Impresión etiqueta:
      PERFORM imprimir_etiqueta.

    ENDIF.

    " Mostrar log:
    PERFORM mostrar_log.

    " Inicializar variables:
    PERFORM limpiar_var.

  ENDIF.
