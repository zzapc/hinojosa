*&---------------------------------------------------------------------*
*&  Include           ZRPP0027_O01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.
  SET PF-STATUS '0100'.
  SET TITLEBAR '0100'.

ENDMODULE.                 " STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  PARAMETROS_DE_USUARIO  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE parametros_de_usuario OUTPUT.

  DATA: t_usr05  TYPE STANDARD TABLE OF usr05,
        wa_usr05 TYPE                   usr05.

* obtenemos los parámetros del usuario para rellenar el centro
  SELECT * FROM usr05
    INTO TABLE t_usr05
    WHERE bname = sy-uname.

  IF gv_werks IS INITIAL.
    READ TABLE t_usr05 INTO wa_usr05 WITH KEY parid = 'WRK'.
    IF sy-subrc = 0.
      gv_werks = wa_usr05-parva.
    ENDIF.
  ENDIF.

* pasamos el id del centro para que el matchcode del puesto de trabajo
* tenga informado el campo centro con el valor indicado en gv_werks
  SET PARAMETER ID 'WRK' FIELD gv_werks.

* obtenemos los parámetros del usuario para rellenar el puesto de trabajo
  IF gv_arbpl IS INITIAL.
    IF sy-tcode = 'ZPP0032'. "Alta de bobines – Bobinadora 1 Alqueria (nova)
      gv_arbpl = 'BOBI_01'.
    ELSEIF sy-tcode = 'ZPP0033'. "Alta de bobines – Bobinadora 2 Alqueria (vella)
      gv_arbpl = 'BOBI_02'.
    ELSEIF sy-tcode = 'ZPP0034'. "Alta de bobines – Bobinadora 1 Sarrià
      gv_arbpl = 'BOBI_10'.
    ENDIF.
  ENDIF.

  IF ( sy-tcode = 'ZPP0034' AND gv_werks <> '3020' ) OR
     ( sy-tcode <> 'ZPP0034' AND gv_werks = '3020' ).
    CALL FUNCTION 'ZPP_PANTALLA_AVISO'
      EXPORTING
        titulo   = 'Error'
        tp_icono = 'E'
        text1    = 'ATENCION: '
        text2    = 'Puesto de trabajo incorrecto'.
    LEAVE TO SCREEN 0.
  ENDIF.

* Obtener datos del turno actual.
  CALL METHOD zclpp_trazabilidad_usuario=>obtener_datos_turno
    IMPORTING
      o_turno      = gv_turno
      o_desc_turno = gv_rango_horas.

* Rellenar desplegable con operarios de este puesto de trabajo
  CALL METHOD zclpp_trazabilidad_usuario=>obtener_operarios_puesto_trab
    EXPORTING
      i_arbpl       = gv_arbpl
      i_werks       = gv_werks
      i_tp_operario = zclpp_trazabilidad_usuario=>tp_op_bobinador
    IMPORTING
      ot_operarios  = DATA(lt_operarios).


* Cargar desplegable de operarios.
  DATA: lt_list  TYPE vrm_values,
        ls_value LIKE LINE OF lt_list.

  CLEAR lt_list[].
  SORT lt_operarios .                  " JME 26.07.2024 ATC
  DELETE ADJACENT DUPLICATES FROM lt_operarios. " USING KEY ZNOMBRE_OPER.
  LOOP AT lt_operarios INTO DATA(l_oper).
    CLEAR ls_value.
    ls_value-key  = l_oper.
    APPEND ls_value TO lt_list.
  ENDLOOP.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GV_NOMBRE_OPER'
      values = lt_list.

ENDMODULE.                 " PARAMETROS_DE_USUARIO  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  HABILITAR_BOTONES  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE habilitar_botones OUTPUT.

  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'GV_WERKS'.
        IF gv_werks IS INITIAL.
          screen-input = '1'.
        ELSE.
          screen-input = '0'.
        ENDIF.

      WHEN 'GV_ARBPL'.
        IF gv_arbpl IS INITIAL.
          screen-input = '1'.
        ELSE.
          screen-input = '0'.
        ENDIF.

*CMS botones siempre visibles
**      WHEN 'ALTA'.
**        IF gv_werks IS NOT INITIAL AND gv_arbpl IS NOT INITIAL AND
***           gv_fecha IS NOT INITIAL AND
**          gv_turno IS NOT INITIAL AND  gv_nombre_oper IS NOT INITIAL.
**          screen-active = '1'.
**        ELSE.
**          screen-active = '0'.
**        ENDIF.
*CMS botones siempre visibles
*      WHEN 'NOTI'.
*        IF gv_werks IS NOT INITIAL AND gv_arbpl IS NOT INITIAL AND
**           gv_fecha IS NOT INITIAL AND
*          gv_turno IS NOT INITIAL AND  gv_nombre_oper IS NOT INITIAL.
*          screen-active = '1'.
*        ELSE.
*          screen-active = '0'.
*        ENDIF.

    ENDCASE.

    MODIFY SCREEN.
  ENDLOOP.

ENDMODULE.                 " HABILITAR_BOTONES  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0300 OUTPUT.
  SET PF-STATUS '0300'.
  SET TITLEBAR '0300'.

  IF gv_empa IS INITIAL.
    gv_empa = 0.
  ENDIF.

* Control anulado, para mostrar boton de plan de producción
*  SELECT SINGLE flag_inactivo
*    FROM ztpp0032
*    INTO @DATA(l_flag_inact)
*    WHERE werks = @gv_werks AND
*          apl   = 'BOTON_PLAN_PROD'.



  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'CAMB_LOTE'.
        IF gv_cb IS INITIAL.
          screen-input = '0'.
        ELSE.
          screen-input = '1'.
        ENDIF.


*      WHEN 'CON_PLAN'.
*        IF l_flag_inact = abap_true.
*          screen-active = 0.
*        ELSE.
*          screen-active = 1.
*        ENDIF.

      WHEN 'CON_DEF'.
        IF gv_cb IS INITIAL.
          screen-input = '0'.
        ELSE.
          screen-input = '1'.
        ENDIF.

***      WHEN 'CON_DEF'.
****        IF gw_mostrar_def = abap_true.
***        IF l_flag_inact = abap_true OR " provisional para desactivar Centro
***           gv_cb IS INITIAL. "lote informado OK
***          screen-active = 0.
***        ELSE.
***          screen-active = 1.
***        ENDIF.
****        ELSE.
****          screen-active = 0.
****        ENDIF.
***      WHEN 'B_BASCULA'.
***        IF gv_werks <> '3020'.
***          screen-active = 0.
***        ENDIF.
    ENDCASE.
    MODIFY SCREEN.
  ENDLOOP.

  SET CURSOR FIELD 'GV_CB'.

ENDMODULE.                 " STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  HABILITAR_LOTE  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE obtener_flags_man_auto OUTPUT.

  SELECT SINGLE flag_inactivo
FROM ztpp0032
INTO @DATA(l_flag_inact)
WHERE werks = @gv_werks AND
      apl   = 'BOTON_BASCULA'.

* Si puesto de trabajo es BOBI_02 boton lectura de datos SIEMPRE inactivo.
  IF l_flag_inact = ' ' AND gv_arbpl = 'BOBI_02'.
    l_flag_inact = 'X'.
  ENDIF.


*EXTRACCION_AUTOMATICA_BOBINAS
* Control para mostrar botón Impresión Automática/Manual
  SELECT SINGLE flag_inactivo
    FROM ztpp0032
    INTO @g_flag_bob_auto
    WHERE werks = @gv_werks AND
          apl   = 'EXTRACCION_AUTOMATICA_BOBINAS'.

  IF sy-subrc = 0 AND g_flag_bob_auto = ' '.

* Para BOBI_02 tomamos el registro correspondiente sin tener en cuenta el flag.extr.automática
    IF gv_arbpl = 'BOBI_02'.
      SELECT SINGLE *
     INTO @gs_ztpp0008
     FROM ztpp0008
     WHERE werks = @gv_werks AND
           arbpl = 'BOBI_02'.
    ELSE.
      SELECT SINGLE *
     INTO @gs_ztpp0008
     FROM ztpp0008
     WHERE werks = @gv_werks AND
           arbpl = @gv_arbpl AND
           activo = 'X'.

    ENDIF.
  ENDIF.

ENDMODULE.

MODULE habilitar_campos OUTPUT.



  LOOP AT SCREEN.
    IF screen-name = 'GV_CB'.
      IF gv_cb IS INITIAL.
        screen-input = '1'.
      ELSE.
        screen-input = '0'.
      ENDIF.
    ENDIF.

*    IF screen-name = 'GV_LOTE'.
*      IF gv_lote IS INITIAL.
*        screen-input = '1'.
*      ELSE.
*        screen-input = '0'.
*      ENDIF.
*    ENDIF.

    IF screen-name = 'GV_KG'.
      IF gv_orden_300 IS INITIAL.
        screen-input = '0'.
      ELSE.
        screen-input = '1'.
      ENDIF.
    ENDIF.

    IF screen-name = 'GV_DIAM'.
      IF gv_orden_300 IS INITIAL.
        screen-input = '0'.
      ELSE.
        screen-input = '1'.
      ENDIF.
    ENDIF.

    IF screen-name = 'GV_LONG'.
      IF gv_orden_300 IS INITIAL.
        screen-input = '0'.
      ELSE.
        screen-input = '1'.
      ENDIF.
    ENDIF.

    IF screen-name = 'GV_EMPA'.
      IF gv_orden_300 IS INITIAL.
        screen-input = '0'.
      ELSE.
        screen-input = '1'.
      ENDIF.
    ENDIF.

    IF screen-name = 'GV_DIFERENCIA_SEM'.
      IF gv_lote IS INITIAL.
        screen-active = '0'.
      ELSE.
        screen-active = '1'.
      ENDIF.
    ENDIF.

    IF screen-name = 'B_ETIQUETA' OR
       screen-name = 'B_CANCELAR' OR
       screen-name = 'B_BASCULA'  OR
       screen-name = 'B_PULPER'   OR
       screen-name = 'B_REPROCESO'.
      IF gv_orden_300 IS INITIAL.
        screen-input = '0'. " Deshabilitar botón
      ELSE.
        screen-input = '1'.
      ENDIF.
    ENDIF.

    IF screen-name  = 'B_BASCULA' AND
       l_flag_inact = 'X'.
      screen-invisible  = '1'.  " Esconder Boton
    ENDIF.

*    Gestión de visualización de botones Extracción Automática
    IF   screen-name     = 'GS_GEST_AUTO_FOMAT-BTN_AUTO_MANUAL'  OR
         screen-name     = 'GS_GEST_AUTO_FOMAT-BTN_ANCHO_FOMAT'  OR
         screen-name     = 'GS_GEST_AUTO_FOMAT-BTN_PESO_FOMAT'   OR
         screen-name     = 'GS_GEST_AUTO_FOMAT-BTN_IMPRESION'     .

      CASE g_flag_bob_auto.
        WHEN 'X'.
          screen-invisible  = '1'.  " Esconder Boton

        WHEN ' '.  "Bobina AUTOMATICA ACTIVADA

* Para BOBI_02 no mostrar ningun botón.
          IF gv_arbpl = 'BOBI_02'.

            screen-invisible  = '1'.  " Esconder Boton

          ELSE.

*Para el resto, según la lògica en ZTPP0008.
            IF screen-group4 = 'AUT' .
              CASE gs_ztpp0008-cont.
                WHEN 1. "Manual
                  screen-invisible  = '1'.

                WHEN 2. "Automática
                  screen-invisible  = '0'.
                  IF screen-name = 'GS_GEST_AUTO_FOMAT-BTN_ANCHO_FOMAT' AND
                     gs_ztpp0008-act_basc = ' '.
                    screen-input  = '0'.

                  ENDIF.
                WHEN OTHERS.
              ENDCASE.
            ENDIF.
          ENDIF.




      ENDCASE.
    ENDIF.

    MODIFY SCREEN.
  ENDLOOP.


ENDMODULE.                 " HABILITAR_LOTE  OUTPUT

MODULE botones_gestion_auto OUTPUT.

  CLEAR: gs_gest_auto_fomat-btn_auto_manual ,
         gs_gest_auto_fomat-btn_impresion ,
         gs_gest_auto_fomat-btn_peso_fomat,
         gs_gest_auto_fomat-btn_ancho_fomat.

  CASE gs_ztpp0008-cont.
    WHEN 1.
      WRITE icon_gis_pan AS ICON TO gs_gest_auto_fomat-btn_auto_manual.
      gs_gest_auto_fomat-btn_auto_manual = |{ gs_gest_auto_fomat-btn_auto_manual } Extracción manual|.
    WHEN 2.
      WRITE icon_settings AS ICON TO gs_gest_auto_fomat-btn_auto_manual.
      gs_gest_auto_fomat-btn_auto_manual = |{ gs_gest_auto_fomat-btn_auto_manual } Extracción automática|.

      CASE gs_ztpp0008-act_etiq.
        WHEN ' '.
          WRITE icon_breakpoint AS ICON TO gs_gest_auto_fomat-btn_impresion.
          gs_gest_auto_fomat-btn_impresion = |{ gs_gest_auto_fomat-btn_impresion } Etiqueta|.
        WHEN 'X'.
          WRITE icon_okay AS ICON TO gs_gest_auto_fomat-btn_impresion.
          gs_gest_auto_fomat-btn_impresion = |{ gs_gest_auto_fomat-btn_impresion } Etiqueta|.
        WHEN OTHERS.
      ENDCASE.

      CASE gs_ztpp0008-act_basc.
        WHEN ' '.
          WRITE icon_breakpoint AS ICON TO gs_gest_auto_fomat-btn_peso_fomat.
          gs_gest_auto_fomat-btn_peso_fomat = |{ gs_gest_auto_fomat-btn_peso_fomat } Báscula|.

        WHEN 'X'.
          WRITE icon_okay AS ICON TO gs_gest_auto_fomat-btn_peso_fomat.
          gs_gest_auto_fomat-btn_peso_fomat = |{ gs_gest_auto_fomat-btn_peso_fomat } Báscula|.

        WHEN OTHERS.
      ENDCASE.

      CASE gs_ztpp0008-act_ancho.
        WHEN ' '.
          WRITE icon_breakpoint AS ICON TO gs_gest_auto_fomat-btn_ancho_fomat.
          gs_gest_auto_fomat-btn_ancho_fomat = |{ gs_gest_auto_fomat-btn_ancho_fomat } Ancho|.

        WHEN 'X'.
          WRITE icon_okay AS ICON TO gs_gest_auto_fomat-btn_ancho_fomat.
          gs_gest_auto_fomat-btn_ancho_fomat = |{ gs_gest_auto_fomat-btn_ancho_fomat } Ancho|.

        WHEN OTHERS.
      ENDCASE.



    WHEN OTHERS.
  ENDCASE.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_9001  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9001 OUTPUT.
*  SET PF-STATUS '9001'.
  SET TITLEBAR 'ANCHOREAL'.
ENDMODULE.

MODULE status_0500 OUTPUT.
  SET PF-STATUS '0500'.
  SET TITLEBAR 'DEF' WITH gs_k_dyn500-charg.

  DATA: go_container_1    TYPE REF TO cl_gui_custom_container,
        go_container_2    TYPE REF TO cl_gui_custom_container,
        go_container_3    TYPE REF TO cl_gui_custom_container,
        go_container_text TYPE REF TO cl_gui_custom_container,
        go_container_bob  TYPE REF TO cl_gui_custom_container.

  DATA: go_img_tramo_lt TYPE REF TO cl_gui_picture,
        go_img_tramo_c  TYPE REF TO cl_gui_picture,
        go_img_tramo_lc TYPE REF TO cl_gui_picture.

  DATA url TYPE cndp_url.

  DATA: graphic_url(255).
  DATA: BEGIN OF graphic_table OCCURS 0,
          line(255) TYPE x,
        END OF graphic_table.
  DATA: l_graphic_conv TYPE i.
  DATA: l_graphic_offs TYPE i.
  DATA: graphic_size TYPE i.
  DATA: l_graphic_xstr TYPE xstring.

  DATA: gt_list          TYPE vrm_values,
        gs_value         LIKE LINE OF gt_list,
        l_variable_name  TYPE vrm_id,
        lt_variable_name TYPE TABLE OF vrm_id.

  IF go_container_1 IS NOT BOUND.

    CREATE OBJECT go_container_1
      EXPORTING
        container_name = 'CONTAINER_TRAMO_LT'.
    CREATE OBJECT go_container_2
      EXPORTING
        container_name = 'CONTAINER_TRAMO_C'.
    CREATE OBJECT go_container_3
      EXPORTING
        container_name = 'CONTAINER_TRAMO_LC'.

    CREATE OBJECT go_img_tramo_lt
      EXPORTING
        parent = go_container_1.
    CREATE OBJECT go_img_tramo_c
      EXPORTING
        parent = go_container_2.
    CREATE OBJECT go_img_tramo_lc
      EXPORTING
        parent = go_container_3.

    CALL METHOD cl_ssf_xsf_utilities=>get_bds_graphic_as_bmp
      EXPORTING
        p_object       = 'GRAPHICS'
        p_name         = 'ZLOGO_TRAMO_BOBINA_SIMPLE'
        p_id           = 'BMAP'
        p_btype        = 'BCOL'
      RECEIVING
        p_bmp          = l_graphic_xstr
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.

    graphic_size = xstrlen( l_graphic_xstr ).
    l_graphic_conv = graphic_size.
    l_graphic_offs = 0.
    WHILE l_graphic_conv > 255.
      graphic_table-line = l_graphic_xstr+l_graphic_offs(255).
      APPEND graphic_table.
      l_graphic_offs = l_graphic_offs + 255.
      l_graphic_conv = l_graphic_conv - 255.
    ENDWHILE.
    graphic_table-line = l_graphic_xstr+l_graphic_offs(l_graphic_conv).
    APPEND graphic_table.

    CALL FUNCTION 'DP_CREATE_URL'
      EXPORTING
        type     = 'IMAGE'
        subtype  = 'X-UNKNOWN'
        size     = graphic_size
        lifetime = 'T'
      TABLES
        data     = graphic_table
      CHANGING
        url      = url.

    IF sy-subrc = 0.
      CALL METHOD go_img_tramo_c->load_picture_from_url_async
        EXPORTING
          url = url.
      CALL METHOD go_img_tramo_c->set_display_mode
        EXPORTING
          display_mode = cl_gui_picture=>display_mode_fit_center.
      CALL METHOD go_img_tramo_lc->load_picture_from_url_async
        EXPORTING
          url = url.
      CALL METHOD go_img_tramo_lc->set_display_mode
        EXPORTING
          display_mode = cl_gui_picture=>display_mode_fit_center.
      CALL METHOD go_img_tramo_lt->load_picture_from_url_async
        EXPORTING
          url = url.
      CALL METHOD go_img_tramo_lt->set_display_mode
        EXPORTING
          display_mode = cl_gui_picture=>display_mode_fit_center.
    ENDIF.

*   Obtención de motivos PULPER para los 3 campos correspondientes.
    SELECT * FROM zvpp_carac_recha INTO TABLE @DATA(lt_zvpp_carac_recha).
    LOOP AT lt_zvpp_carac_recha INTO DATA(ls_zvpp_carac_recha).
      gs_value-key  = ls_zvpp_carac_recha-atzhl.
      gs_value-text = ls_zvpp_carac_recha-atwtb.
      APPEND gs_value TO gt_list.
    ENDLOOP.

    APPEND: 'GS_DYN500-DEFECTO1'    TO lt_variable_name,
            'GS_DYN500-DEFECTO2'    TO lt_variable_name,
            'GS_DYN500-DEFECTO3'    TO lt_variable_name.

    LOOP  AT lt_variable_name INTO l_variable_name.
      CALL FUNCTION 'VRM_SET_VALUES'
        EXPORTING
          id     = l_variable_name
          values = gt_list.
    ENDLOOP.

* Obtención de los motivos de defectos:
    CALL METHOD zcl_utils_hpap_pp=>obtener_lista_defectos
      IMPORTING
        ot_lista_defectos = DATA(lt_lista_defectos).

    CLEAR: gt_list[] , lt_variable_name[].
    LOOP AT lt_lista_defectos INTO DATA(l_values_charact).
      CLEAR gs_value.
      gs_value-key  = l_values_charact-value_char.
      gs_value-text = l_values_charact-description.
      APPEND gs_value TO gt_list.
    ENDLOOP.
    APPEND: 'GS_DYN500-DEFECTO1_LC' TO lt_variable_name,
            'GS_DYN500-DEFECTO2_LC' TO lt_variable_name,
            'GS_DYN500-DEFECTO3_LC' TO lt_variable_name,
            'GS_DYN500-DEFECTO1_LT' TO lt_variable_name,
            'GS_DYN500-DEFECTO2_LT' TO lt_variable_name,
            'GS_DYN500-DEFECTO3_LT' TO lt_variable_name,
            'GS_DYN500-DEFECTO1_C'  TO lt_variable_name,
            'GS_DYN500-DEFECTO2_C'  TO lt_variable_name,
            'GS_DYN500-DEFECTO3_C'  TO lt_variable_name.

    LOOP  AT lt_variable_name INTO l_variable_name.
      CALL FUNCTION 'VRM_SET_VALUES'
        EXPORTING
          id     = l_variable_name
          values = gt_list.
    ENDLOOP.

*   Contenedeor de observaciones
    CREATE OBJECT go_container_text
      EXPORTING
        container_name = 'CONTAINER_TEXTO'.

    go_textedit = NEW cl_gui_textedit( parent = go_container_text ).
    go_textedit->set_toolbar_mode( 0 ).
    go_textedit->set_readonly_mode( 1 ).

  ENDIF.

*  DATA: lt_lines TYPE STANDARD TABLE OF tdline.
  DATA: lt_lines TYPE STANDARD TABLE OF ztpp0076-zobs_bobina.

  IF gs_dyn500 IS INITIAL.

    gs_k_dyn500-aufnr = |{ gs_k_dyn500-aufnr ALPHA = IN }|.

    SELECT SINGLE *
      FROM ztpp0030
      INTO CORRESPONDING FIELDS OF gs_dyn500
      WHERE aufnr = gs_k_dyn500-aufnr AND
            matnr = gs_k_dyn500-matnr AND
            charg = gs_k_dyn500-charg.

    CLEAR: lt_lines[] , gt_lines_bob[] .

* Obtenemos observaciones de POPE
    SELECT  tdline
      FROM ztpp0031
      APPENDING TABLE @lt_lines
      WHERE aufnr = @gs_k_dyn500-aufnr AND
            matnr = @gs_k_dyn500-matnr AND
            charg = @gs_k_dyn500-charg AND
            tp_ubic = ' ' "POPE
      ORDER BY aufnr, matnr , charg , seq ASCENDING
            .
    IF sy-subrc = 0.

      CALL METHOD go_textedit->set_text_as_r3table
        EXPORTING
          table           = lt_lines
        EXCEPTIONS
          error_dp        = 1
          error_dp_create = 2
          OTHERS          = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

    ENDIF.

  ENDIF.

ENDMODULE.

MODULE status_0601 OUTPUT.

  SET PF-STATUS '0500'.

  SET TITLEBAR 'DEFECTOBOB' WITH gv_lote_bob.

  DATA: go_container_4 TYPE REF TO cl_gui_custom_container, "imagen
        go_img_bob_def TYPE REF TO cl_gui_picture,
        url_601        TYPE cndp_url.

  DATA: graphic_url_601(255).
  DATA: BEGIN OF graphic_table_601 OCCURS 0,
          line(255) TYPE x,
        END OF graphic_table_601.
  DATA: l_graphic_conv_601 TYPE i.
  DATA: l_graphic_offs_601 TYPE i.
  DATA: graphic_size_601 TYPE i.
  DATA: l_graphic_xstr_601 TYPE xstring.

  DATA: go_container_obs_601 TYPE REF TO cl_gui_custom_container,
        go_textedit_601      TYPE REF TO cl_gui_textedit.

  DATA: gt_list_601          TYPE vrm_values,
        gs_value_601         LIKE LINE OF gt_list,
        l_variable_name_601  TYPE vrm_id,
        lt_variable_name_601 TYPE TABLE OF vrm_id.

  DATA: lv_num_mot_repr TYPE string.

* Carga imagen bobina

  IF go_container_4 IS NOT BOUND.
    CREATE OBJECT go_container_4
      EXPORTING
        container_name = 'CONTAINER_IMG_601'.

    CREATE OBJECT go_img_bob_def
      EXPORTING
        parent = go_container_4.

    CALL METHOD cl_ssf_xsf_utilities=>get_bds_graphic_as_bmp
      EXPORTING
        p_object       = 'GRAPHICS'
        p_name         = 'ZBOBINA_DEF2'
        p_id           = 'BMAP'
        p_btype        = 'BCOL'
      RECEIVING
        p_bmp          = l_graphic_xstr_601
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.

    graphic_size_601 = xstrlen( l_graphic_xstr_601 ).
    l_graphic_conv_601 = graphic_size_601.
    l_graphic_offs_601 = 0.
    WHILE l_graphic_conv_601 > 255.
      graphic_table_601-line = l_graphic_xstr_601+l_graphic_offs_601(255).
      APPEND graphic_table_601.
      l_graphic_offs_601 = l_graphic_offs_601 + 255.
      l_graphic_conv_601 = l_graphic_conv_601 - 255.
    ENDWHILE.
    graphic_table_601-line = l_graphic_xstr_601+l_graphic_offs_601(l_graphic_conv_601).
    APPEND graphic_table_601.

    CALL FUNCTION 'DP_CREATE_URL'
      EXPORTING
        type     = 'IMAGE'
        subtype  = 'X-UNKNOWN'
        size     = graphic_size_601
        lifetime = 'T'
      TABLES
        data     = graphic_table_601
      CHANGING
        url      = url_601.

    IF sy-subrc = 0.
      CALL METHOD go_img_bob_def->load_picture_from_url_async
        EXPORTING
          url = url_601.
      CALL METHOD go_img_bob_def->set_display_mode
        EXPORTING
          display_mode = cl_gui_picture=>display_mode_fit_center.
    ENDIF.
  ENDIF.
* Final carga imagen bobina

* Se crea el contenedeor de observaciones

  IF go_container_obs_601 IS NOT BOUND.
    CREATE OBJECT go_container_obs_601
      EXPORTING
        container_name = 'CONTAINER_OBS_601'.
  ENDIF.

  IF go_textedit_601 IS NOT BOUND.
    go_textedit_601 = NEW cl_gui_textedit( parent = go_container_obs_601
                                           max_number_chars = 180 ).
    go_textedit_601->set_toolbar_mode( 0 ).
  ENDIF.

* Si entra por modificación de defectos

  IF gv_modification = 'X'.

*   Obtención de motivos REPROCESO para lista desplegable

    CLEAR gt_list_601.
    SELECT * FROM zvpp_carac_repr INTO TABLE @DATA(lt_zvpp_carac_repr).
    LOOP AT lt_zvpp_carac_repr INTO DATA(ls_zvpp_carac_repr).
      gs_value_601-key  = ls_zvpp_carac_repr-atzhl.
      gs_value_601-text = ls_zvpp_carac_repr-atwtb.
      APPEND gs_value_601 TO gt_list_601.
    ENDLOOP.

    l_variable_name_601 = 'GS_DYN601-DEFECTO_MOD'.

    CALL FUNCTION 'VRM_SET_VALUES'
      EXPORTING
        id     = l_variable_name_601
        values = gt_list_601.

    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDIF.

* Se obtienen observaciones de defecto de bobina
  REFRESH: lt_lines.
  CALL METHOD go_textedit_601->get_text_as_r3table
    IMPORTING
      table           = lt_lines
    EXCEPTIONS
      error_dp        = 1
      error_dp_create = 2
      OTHERS          = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

* Si observaciones se han modificado

  READ TABLE lt_lines INTO DATA(ls_lines) INDEX 1.

  IF gs_dyn601-container_obs_601 NE ls_lines OR
   ( gs_dyn601-container_obs_601 IS INITIAL AND ls_lines IS INITIAL ).


    REFRESH lt_lines.

    APPEND gs_dyn601-container_obs_601 TO lt_lines.

    CALL METHOD go_textedit_601->set_text_as_r3table
      EXPORTING
        table           = lt_lines
      EXCEPTIONS
        error_dp        = 1
        error_dp_create = 2
        OTHERS          = 3.

    CLEAR ls_lines.

    CALL METHOD cl_gui_cfw=>flush.

  ENDIF.

  LOOP AT SCREEN.

* Si posición todo el ancho activa, el resto de posiciones de defecto desactivas

    IF gs_dyn601-todo_ancho = 'X'.
      IF screen-name = 'GS_DYN601-SIN_ETIQUETA'.
        screen-input = '0'.
      ENDIF.

      IF screen-name = 'GS_DYN601-CENTRO'.
        screen-input = '0'.
      ENDIF.

      IF screen-name = 'GS_DYN601-LADO_ETIQUETA'.
        screen-input = '0'.
      ENDIF.

      IF screen-name = 'GS_DYN601-DIAMETRO'.
        screen-input = '0'.
      ENDIF.
    ENDIF.

* Si posición de defecto sin etiqueta, centro, etiqueta o diámetro, posición todo el ancho desactivada

    IF gs_dyn601-sin_etiqueta = 'X' OR gs_dyn601-centro = 'X' OR gs_dyn601-lado_etiqueta = 'X' OR gs_dyn601-diametro = 'X'.
      IF screen-name = 'GS_DYN601-TODO_ANCHO'.
        screen-input = '0'.
      ENDIF.
    ENDIF.

* Si se marca defecto sin etiqueta, se activa su distancia

    IF gs_dyn601-sin_etiqueta = 'X'.
      IF screen-name = 'GS_DYN601-DISTANCIA_S'.
        screen-input = '1'.
      ENDIF.
    ENDIF.

    IF gs_dyn601-sin_etiqueta = ' '.
      IF screen-name = 'GS_DYN601-DISTANCIA_S'.
        gs_dyn601-distancia_s = 0.
        screen-input = '0'.
      ENDIF.
    ENDIF.

* Si se marca defecto etiqueta, se activa su distancia

    IF gs_dyn601-lado_etiqueta = 'X'.
      IF screen-name = 'GS_DYN601-DISTANCIA_E'.
        screen-input = '1'.
      ENDIF.
    ENDIF.

    IF gs_dyn601-lado_etiqueta = ' '.
      IF screen-name = 'GS_DYN601-DISTANCIA_E'.
        gs_dyn601-distancia_e = 0.
        screen-input = '0'.
      ENDIF.
    ENDIF.

* Si se marca defecto diámetro, se activa su distancia

    IF gs_dyn601-diametro = 'X'.
      IF screen-name = 'GS_DYN601-DISTANCIA_D'.
        screen-input = '1'.
      ENDIF.
    ENDIF.

    IF gs_dyn601-diametro = ' '.
      IF screen-name = 'GS_DYN601-DISTANCIA_D'.
        gs_dyn601-distancia_d = 0.
        screen-input = '0'.
      ENDIF.
    ENDIF.

* Si alta de defectos de botina se muestra motivo de reproceso seleccionado previamente, no editable.

    IF gv_modification = ' '.

      IF screen-name = 'GS_DYN601-DEFECTO_ALTA'.
        screen-invisible = '0'.
        screen-input = '0'.

        SELECT SINGLE atzhl
          FROM zvpp_carac_repr
          INTO gv_atzhl
          WHERE atwrt = gv_motivo_repr.

        CONCATENATE gv_atzhl gv_motivo_repr INTO lv_num_mot_repr SEPARATED BY ' '.

        gs_dyn601-defecto_alta = lv_num_mot_repr.

      ENDIF.

      IF screen-name = 'GS_DYN601-DEFECTO_MOD'.
        screen-invisible = '1'.
      ENDIF.

      IF screen-name = '%#AUTOTEXT002'.
        screen-invisible = '1'.
      ENDIF.

      IF screen-name = 'CANCELAR'.
        screen-invisible = '1'.
      ENDIF.

    ENDIF.

* Si modificación de defectos de bobina se muestra lista desplegable de motivos de reproceso.

    IF gv_modification = 'X'.
      IF screen-name = 'GS_DYN601-DEFECTO_ALTA'.
        screen-active = '0'.
      ENDIF.

      IF screen-name = '%#AUTOTEXT010'.
        screen-invisible = '1'.
      ENDIF.

      IF screen-name = 'GS_DYN601-DEFECTO_MOD'.
        screen-invisible = '0'.
        screen-input = '1'.
      ENDIF.
    ENDIF.

    MODIFY SCREEN.

  ENDLOOP.

ENDMODULE.

MODULE status_0602 OUTPUT.

  SET PF-STATUS '0500'.
  SET TITLEBAR 'DEFECTOBOB' WITH gv_lote_bob.

  DATA: go_container_obs_602  TYPE REF TO cl_gui_custom_container.
  DATA: go_textedit_602       TYPE REF TO cl_gui_textedit.

*   Contenedeor de observaciones
  IF go_container_obs_602 IS NOT BOUND.
    CREATE OBJECT go_container_obs_602
      EXPORTING
        container_name = 'CONTAINER_OBS_602'.
  ENDIF.

  IF go_textedit_602 IS NOT BOUND.
    go_textedit_602 = NEW cl_gui_textedit( parent = go_container_obs_602
                                           max_number_chars = 180 ).
    go_textedit_602->set_toolbar_mode( 0 ).
  ENDIF.

* Se obtienen observaciones de defecto de bobina
  REFRESH: lt_lines.
  CLEAR ls_lines.

  CALL METHOD go_textedit_602->get_text_as_r3table
    IMPORTING
      table           = lt_lines
    EXCEPTIONS
      error_dp        = 1
      error_dp_create = 2
      OTHERS          = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  READ TABLE lt_lines INTO ls_lines INDEX 1.

  IF gs_dyn602-container_obs_602 NE ls_lines OR
   ( gs_dyn602-container_obs_602 IS INITIAL AND ls_lines IS INITIAL ).

    REFRESH lt_lines.

    APPEND gs_dyn602-container_obs_602 TO lt_lines.

    CALL METHOD go_textedit_602->set_text_as_r3table
      EXPORTING
        table           = lt_lines
      EXCEPTIONS
        error_dp        = 1
        error_dp_create = 2
        OTHERS          = 3.

    CALL METHOD cl_gui_cfw=>flush.

  ENDIF.

ENDMODULE.
