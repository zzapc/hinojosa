*&---------------------------------------------------------------------*
*&  Include           SAPMZPP0001_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND_010
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM user_command_0100.

  DATA: lv_ok TYPE sy-ucomm.

  CHECK gv_matnr IS NOT INITIAL.

  lv_ok = gv_okcode100.
  CLEAR gv_okcode100.

  CASE lv_ok.
    WHEN 'ANCHO'.

      CHECK gv_enter EQ abap_true.
      PERFORM nuevo_ancho.
      PERFORM mostrar_log.

    WHEN 'REPRO'.

      CHECK gv_enter EQ abap_true.
      PERFORM reprocesar.
      PERFORM mostrar_log.

    WHEN 'PULPER'.

      CHECK gv_enter EQ abap_true.
      PERFORM pulper.
      PERFORM mostrar_log.

    WHEN 'PRINT'.
      IF gw_es_bob_pulper = ' '.
        PERFORM imprimir.
        PERFORM mostrar_log.
      ELSE.
        PERFORM procesar_impr_bobina_pulper.
        CLEAR gw_es_bob_pulper.
      ENDIF.

    WHEN 'LOG'.
      PERFORM mostrar_log.

    WHEN 'PELAR_BOBINA'.

      CHECK gv_enter EQ abap_true.
      PERFORM pelar_bobina.

      PERFORM mostrar_log.
      PERFORM limpiar_campos.

    WHEN 'CAMBIO_PESO'.
      CHECK gv_enter EQ abap_true.
      PERFORM cambiar_peso.
      PERFORM mostrar_log.

      PERFORM limpiar_campos.

    WHEN 'CLEAR'.
      PERFORM limpiar_campos.

    WHEN 'DESBLO'.
      IF gv_peso_bloq <= 0.
        MESSAGE |El lote { gv_charg } no tiene stock bloqueado.| TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      PERFORM desbloquear_stock.
      PERFORM limpiar_campos.

* 11/03/2021 - 65592 - Nueva función: Recuperar bobina a reproceso
* se validará que la bobina se encuentre en el almacén de reproceso (4001) En caso contrario, avisar de esta circunstancia
* •	Se eliminará el motivo de reproceso del lote de material.
* •	Se realizará un movimiento 311 para el lote seleccionado del almacén de reproceso (4001) al almacén de producto acabado (1040)
    WHEN 'RECUP_BOB'.
      CHECK gv_enter EQ abap_true.
      PERFORM recuperar_bobina_a_reproceso.


      PERFORM limpiar_campos.

  ENDCASE.

  CLEAR lv_ok.

ENDFORM.

FORM recuperar_bobina_a_reproceso.
  DATA lv_subrc TYPE char1.

*  Validar que la bobina se encuentre en el almacén de reproceso (4001).
  SELECT SINGLE *
    FROM mchb
    INTO @DATA(ls_datos_bob_pul)
    WHERE werks = @gv_werks AND
          matnr = @gv_matnr AND
          charg = @gv_charg AND
          lgort = '4001'    AND
          clabs > 0.
  IF sy-subrc <> 0.
    MESSAGE |La bobina no se encuentra en el almacén de reproceso.| TYPE 'I' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

* Confirmación del cambio.
  PERFORM pop_up USING text-031 CHANGING lv_subrc.
  IF lv_subrc NE 1.
    RETURN.
  ENDIF.



  DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
        lv_goodsmvt_code   TYPE bapi2017_gm_code VALUE '04',
        lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
        lt_return          TYPE TABLE OF bapiret2,
        lv_objectkey       TYPE bapi1003_key-object,
        lt_valuesnum       TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar      TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr      TYPE TABLE OF bapi1003_alloc_values_curr,
        ls_valuesnum       TYPE bapi1003_alloc_values_num,
        lv_mblnr           TYPE mblnr.

* Limpiar el motivo de rechazo.
  CONCATENATE gv_matnr gv_charg INTO lv_objectkey.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_objectkey
      objecttable     = gc_mch1
      classnum        = gc_z_bobina
      classtype       = gc_023
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.

* Limpiar Motivo Reproceso
  ASSIGN lt_valueschar[ charact    = 'ZPPI_MOTIVO_REPROCESO_BOBINA' ] TO FIELD-SYMBOL(<fs_mot_rechazo>).
  IF sy-subrc = 0.
    <fs_mot_rechazo>-value_char    = ' '.
    <fs_mot_rechazo>-value_neutral = ' '.
  ENDIF.

  APPEND VALUE bapi1003_alloc_values_char( charact        = 'Z_REPROCESO'
                                           value_neutral = '0'
                                          ) TO lt_valueschar.

  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = lv_objectkey
      objecttable        = gc_mch1
      classnum           = gc_z_bobina
      classtype          = gc_023
    TABLES
      allocvaluesnumnew  = lt_valuesnum
      allocvaluescharnew = lt_valueschar
      allocvaluescurrnew = lt_valuescurr
      return             = lt_return.

  IF line_exists( lt_return[ type = 'E' ] ).
    PERFORM add_log TABLES lt_return.
    PERFORM mostrar_log.
    EXIT.
  ENDIF.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = abap_true.


* Mov.311 para trasladar desde 4001(alm.reproceso) a 1040(almacén prod.acabado)
  lv_goodsmvt_code = '04'.  "04 – MB1B – Registro de traspaso

  ls_goodsmvt_header-pstng_date = sy-datum.
  ls_goodsmvt_header-doc_date   = sy-datum.
  ls_goodsmvt_header-header_txt = 'Operaciones con bobinas'(006).

  APPEND INITIAL LINE TO lt_goodsmvt_item ASSIGNING FIELD-SYMBOL(<fs_item>).
  <fs_item>-material     = gv_matnr.
  <fs_item>-plant        = gv_werks.
  <fs_item>-stge_loc     = gv_lgort.
  <fs_item>-batch        = gv_charg.
  <fs_item>-move_type    = '311'.
  <fs_item>-move_mat     = gv_matnr.
  <fs_item>-entry_qnt    = gv_peso.
  <fs_item>-move_plant   = gv_werks.
  <fs_item>-move_stloc   = '1040'. " Se envía a almacén de prod.acabado
  <fs_item>-move_batch = gv_charg.



  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_goodsmvt_header
      goodsmvt_code    = lv_goodsmvt_code
    IMPORTING
      materialdocument = lv_mblnr
    TABLES
      goodsmvt_item    = lt_goodsmvt_item
      return           = lt_return.
  IF lt_return[] IS NOT INITIAL.
    PERFORM add_log TABLES lt_return.
    PERFORM mostrar_log.
  ENDIF.

  CHECK lv_mblnr IS NOT INITIAL.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = abap_true.

  "EAB T76941 28.06.2023 Integración E80: se llama a la función de envio de datos de bobina a E80 una vez se ha recuperado la bobina a reprocesar
  CALL FUNCTION 'Z_E80_ENVIO_STOCK_BOBINA'
    EXPORTING
      i_werks          = gv_werks
*     I_CHARG          =
      i_objek          = lv_objectkey
      i_par_origen     = '2' "cambio de almacén
    EXCEPTIONS
      lote_inexistente = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.


  DATA: lv_go    TYPE char1.

* Impresión de la etiqueta SIN motivo reproceso.
  PERFORM imprimir_etiqueta USING gv_matnr gv_charg gv_diametro gv_longitud '1040' ' '
                   CHANGING lv_go.

  MESSAGE |Bobina traspasada al almacén de producto acabado. | TYPE 'I'.

ENDFORM.

FORM desbloquear_stock.
  DATA: lv_subrc TYPE char1.

* Validar
  IF gv_lgort = '4001'.
    MESSAGE text-028 TYPE 'I'. "Operación no permitida en el almacén de reproceso
    RETURN.
  ELSEIF gv_lgort <> '1040'.
    MESSAGE text-030 TYPE 'I'. "Operación no permitida para almacén distinto de 1040
    RETURN.
  ENDIF.

  CLEAR lv_subrc.
  PERFORM pop_up USING text-029 CHANGING lv_subrc.
  IF lv_subrc NE 1.
    RETURN.
  ENDIF.
  PERFORM crear_mov_343 USING lv_subrc.
  IF lv_subrc = abap_true.
  ELSE.

  ENDIF.


ENDFORM.

FORM crear_mov_343 CHANGING p_error TYPE char1.

  DATA: ls_header    TYPE bapi2017_gm_head_01,
        l_mblnr      TYPE bapi2017_gm_head_ret-mat_doc,
        lt_item      LIKE bapi2017_gm_item_create OCCURS 0,
        ls_item      TYPE bapi2017_gm_item_create,
        lt_return    TYPE TABLE OF bapiret2,
        lv_objectkey TYPE bapi1003_key-object.

  CLEAR: ls_header , ls_item , lt_item.
  ls_header-pstng_date = sy-datum.
  ls_header-doc_date   = sy-datum.


  ls_item-material    = gv_matnr.
  ls_item-batch       = gv_charg.
  ls_item-plant       = gv_werks.
  ls_item-stge_loc    = gv_lgort.
  ls_item-move_type   = '343'.
  ls_item-entry_qnt   = gv_peso_bloq.
*  ls_item-no_more_gr   = 'X'.
  ls_item-entry_uom   = 'KG'.
*  ls_item-move_stloc  = p_lgort_destino.
  APPEND ls_item TO lt_item.

  CALL FUNCTION 'BUFFER_REFRESH_ALL'.

  SET UPDATE TASK LOCAL.


  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_header
      goodsmvt_code    = CONV bapi2017_gm_code( '04' )
    IMPORTING
      materialdocument = l_mblnr
    TABLES
      goodsmvt_item    = lt_item
      return           = lt_return.

  IF line_exists( lt_return[ type = 'E' ] ).
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    p_error = abap_true.
    MESSAGE lt_return[ 1 ]-message TYPE 'S' DISPLAY LIKE 'E'.


  ELSE.
    p_error = abap_false.
    COMMIT WORK AND WAIT.
    MESSAGE |Documento de desbloqueo { l_mblnr } creado correctamente.| TYPE 'I'.

    CONCATENATE gv_matnr gv_charg INTO lv_objectkey.

    "EAB T76941 28.06.2023 Integración E80: se llama a la función de envio de datos de bobina a E80 una vez se liberado el stock
    CALL FUNCTION 'Z_E80_ENVIO_STOCK_BOBINA'
      EXPORTING
        i_werks          = gv_werks
*       I_CHARG          =
        i_objek          = lv_objectkey
        i_par_origen     = '6' "desbloqueo de stock
      EXCEPTIONS
        lote_inexistente = 1
        OTHERS           = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.


*            REFRESH lt_return.
**  Se ha creado el lote & para el material & en el almacén & del centro &
*  lt_return = VALUE bapiret2_t( ( type = 'S'  id = 'ZPP' number = 243
*                                  message_v1 = ls_goodsmvt_item-move_batch
*                                  message_v2 = |{ gc_matnr_bobpulper ALPHA = OUT }|
*                                  message_v3 = ls_goodsmvt_item-move_stloc
*                                  message_v4 = ls_goodsmvt_item-move_plant
*                                   ) ).
*  PERFORM add_log TABLES lt_return.

  ENDIF.

ENDFORM.


FORM procesar_impr_bobina_pulper.

  DATA:     lv_objectkey  TYPE bapi1003_key-object.
*            lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char.
  DATA: lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr,
        lt_return     TYPE bapiret2_t.

  SELECT SINGLE *
    FROM mseg
    INTO @DATA(ls_mseg)
    WHERE charg = @gv_charg AND
          werks = @gv_werks.
  IF sy-subrc = 0.

    lv_objectkey = |{ gc_matnr_bobpulper }{ gv_charg }| .

    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = CONV bapi1003_key-object( lv_objectkey )
        objecttable     = gc_mch1
        classnum        = gc_z_bobina
*       classnum        = gc_z_bobina_pulper
        classtype       = gc_023
      TABLES
        allocvaluesnum  = lt_valuesnum
        allocvalueschar = lt_valueschar
        allocvaluescurr = lt_valuescurr
        return          = lt_return.
    .

* Obtenemos el lote original
    SELECT SINGLE umcha
      FROM mseg
      INTO @DATA(l_lote_orig)
      WHERE bwart = '309' AND
            charg = @gv_charg.
    IF sy-subrc = 0.

* Determinamos el material del lote original
      SELECT SINGLE matnr
        FROM mchb
        INTO @DATA(l_matnr_orig)
        WHERE charg = @l_lote_orig.

    ELSE.

      SELECT SINGLE afko~plnbez INTO (l_matnr_orig)
        FROM aufk
        INNER JOIN afko ON afko~aufnr = aufk~aufnr
        WHERE aufk~aufnr = ls_mseg-aufnr.


    ENDIF.

    IF line_exists( lt_valueschar[ charact = gc_z_pedido ] ).
      DATA(l_pedido) = lt_valueschar[ charact = gc_z_pedido ]-value_char.
    ENDIF.

    IF line_exists( lt_valueschar[ charact = gc_z_posicion ] ).
      DATA(l_posicion) = lt_valueschar[ charact = gc_z_posicion ]-value_char.
    ENDIF.

    IF line_exists( lt_valueschar[ charact = gc_z_pto_trab ] ).
      DATA(l_puesto_trab) = lt_valueschar[ charact = gc_z_pto_trab ]-value_char.
    ENDIF.


    PERFORM imprimir_etiqueta_pulper USING
                                    ls_mseg-mblnr
                                    ls_mseg-mjahr
                                    l_matnr_orig
*                                      gc_matnr_bobpulper
                                    gv_charg
                                    gv_werks
                                    '1000'
                                    l_pedido
                                    l_posicion
                                    l_puesto_trab.


  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  EXIT_0100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM exit_0100 .

  DATA: lv_ok TYPE sy-ucomm.

  lv_ok = gv_okcode100.
  CLEAR gv_okcode100.

  CASE lv_ok.

    WHEN 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'EXIT' OR 'CANCEL'.
      LEAVE PROGRAM.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  REPROCESAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM reprocesar .

  DATA lv_subrc TYPE char1.

  PERFORM pop_up USING text-024 CHANGING lv_subrc.
  IF lv_subrc NE 1.
    RETURN.
  ENDIF.
  PERFORM bobina_a_reprocesar.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PBO_0100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM pbo_0100 .

  DATA: lv_objek TYPE ausp-objek,
        lv_cuobj TYPE inob-cuobj,
        lv_index TYPE numc2.

*  TYPES: BEGIN OF tipo_reproceso,
*           atwrt TYPE atwrt,
*           atwtb TYPE atwtb.
*  TYPES: END OF tipo_reproceso.


  DATA: lt_zvpp_carac_repr TYPE TABLE OF zvpp_carac_repr,
        ls_zvpp_carac_repr TYPE          zvpp_carac_repr.

  CONSTANTS: lc_mch1 TYPE char4 VALUE 'MCH1'.

  IF gv_werks IS INITIAL.
*    GET PARAMETER ID 'WRK' FIELD gv_werks.
*    GET PARAMETER ID 'MAT' FIELD gv_matnr.
*    GET PARAMETER ID 'CHA' FIELD gv_charg.

    SELECT SINGLE parva INTO gv_werks FROM usr05
      WHERE bname = sy-uname AND parid = 'WRK'.

    IF gv_werks IS INITIAL AND NOT gv_charg IS INITIAL AND NOT gv_matnr IS INITIAL.
      SELECT SINGLE werks INTO gv_werks FROM mcha
        WHERE matnr = gv_matnr AND charg = gv_charg.
      IF sy-subrc <> 0.
        MESSAGE text-021 TYPE 'I'.RETURN.
      ENDIF.
    ENDIF.
  ENDIF.

  IF NOT gv_werks IS INITIAL AND gv_name1 IS INITIAL.
    SELECT SINGLE name1 INTO gv_name1 FROM t001w WHERE werks = gv_werks.
  ENDIF.

  IF NOT gv_matnr IS INITIAL.

    SELECT SINGLE maktx INTO gv_maktx FROM makt
       WHERE matnr = gv_matnr AND spras = sy-langu.

    IF sy-subrc <> 0.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = gv_matnr
        IMPORTING
          output = gv_matnr.

      SELECT SINGLE maktx INTO gv_maktx FROM makt
         WHERE matnr = gv_matnr AND spras = sy-langu.

    ENDIF.


  ENDIF.

  CONCATENATE gv_matnr gv_charg INTO lv_objek.
  SELECT SINGLE cuobj INTO lv_cuobj FROM inob
    WHERE objek = lv_objek AND obtab = lc_mch1.

  SELECT SINGLE zzancho INTO gv_ancho FROM mara WHERE matnr = gv_matnr.

  IF gv_atinn_diametro IS INITIAL.
    SELECT SINGLE atinn INTO gv_atinn_diametro FROM cabn WHERE atnam = gc_z_diametro.
  ENDIF.

  IF gv_atinn_peso IS INITIAL.
    SELECT SINGLE atinn INTO gv_atinn_peso FROM cabn WHERE atnam = gc_z_peso.
  ENDIF.

  IF gv_atinn_longitud IS INITIAL.
    SELECT SINGLE atinn INTO gv_atinn_longitud FROM cabn WHERE atnam = gc_z_longitud.
  ENDIF.

  SELECT SINGLE atflv INTO gv_diametro FROM ausp
    WHERE objek = lv_cuobj AND atinn = gv_atinn_diametro
      AND klart = gc_023.

*  SELECT SINGLE atflv INTO gv_peso FROM ausp
*    WHERE objek = lv_cuobj AND atinn = gv_atinn_peso
*      AND klart = gc_023.

  SELECT SINGLE atflv INTO gv_longitud FROM ausp
    WHERE objek = lv_cuobj AND atinn = gv_atinn_longitud
      AND klart = gc_023.

*  SELECT SINGLE clabs FROM mchb INTO gv_peso WHERE matnr = gv_matnr
*                                           AND werks = gv_werks
*                                           AND lgort = '1040'
*                                           AND charg = gv_charg.

  gv_peso_p     = gv_peso." TO gv_peso_p DECIMALS 2 EXPONENT 0.
  gv_longitud_p = gv_longitud." TO gv_longitud_p DECIMALS 2 EXPONENT 0.
  gv_diametro_p = gv_diametro." TO gv_diametro_p DECIMALS 2 EXPONENT 0.




* Se indican en los desplegables de la pantalla los motivos de envio
* a pulper o bien los motivos de reproceso de la bobina
  REFRESH gt_list.
  gv_name_lb  = 'GV_MOTIVOPULPER'.
  gv_name_lb1 = 'GV_MOTIVOREPRO'.

  SELECT * FROM zvpp_carac_recha INTO TABLE lt_zvpp_carac_repr.

  gt_rechazo_pulper = lt_zvpp_carac_repr.

  LOOP AT lt_zvpp_carac_repr INTO ls_zvpp_carac_repr.
    gs_value-key  = ls_zvpp_carac_repr-atzhl.
    gs_value-text = ls_zvpp_carac_repr-atwtb.
    APPEND gs_value TO gt_list.
  ENDLOOP.





* Motivo Pulper
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = gv_name_lb
      values = gt_list.

  REFRESH gt_list.

  SELECT SINGLE atinn FROM cabn
     INTO @DATA(lv_atinn)
     WHERE atnam = 'ZPPI_MOTIVO_REPROCESO_BOBINA'.


  SELECT * FROM zvpp_carac_repr
    INTO TABLE lt_zvpp_carac_repr
    WHERE atinn = lv_atinn.

  gt_reproceso = lt_zvpp_carac_repr.

  CLEAR lv_index.

  LOOP AT lt_zvpp_carac_repr INTO ls_zvpp_carac_repr..
    gs_value-key = lv_index.
    gs_value-text = ls_zvpp_carac_repr-atwtb.
    APPEND gs_value TO gt_list.
    lv_index = lv_index + 1.

    ASSIGN gt_reproceso[ atwtb = ls_zvpp_carac_repr-atwtb ] TO FIELD-SYMBOL(<fs_repro>).
    IF sy-subrc EQ 0.
      <fs_repro>-atzhl = lv_index - 1.
    ENDIF.
  ENDLOOP.


  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = gv_name_lb1
      values = gt_list.

* Deshabilita la posibilidad de match-code en el campo del lote
  LOOP AT SCREEN.
    IF screen-group1 EQ '001'.
      screen-value_help = '0'.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.


  LOOP AT SCREEN.
    IF screen-name EQ 'GV_CHARG'.
      IF gv_charg IS NOT INITIAL.
        screen-input = 0.
      ELSE .
        screen-input = 1.
      ENDIF.
    ENDIF.
    IF screen-name EQ 'GV_MOTIVOPULPER' OR screen-name EQ 'GV_MOTIVOREPRO' OR
       screen-name EQ 'GV_NUEVO_PESO_P' OR screen-name EQ 'GV_NUEVO_BOBINA_P' OR
      screen-name EQ 'GV_NUEVO_ANCHO'.
      IF gv_enter EQ abap_true.
        screen-input = 1.
      ELSE .
        screen-input = 0.
      ENDIF.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.


  IF gw_es_bob_pulper = 'X'.
    LOOP AT SCREEN.

      IF screen-group4 = 'NPU'.
        screen-input = '0'.
        MODIFY SCREEN.
      ENDIF.

    ENDLOOP.
  ELSEIF gv_peso_bloq <> 0.
    LOOP AT SCREEN.
      IF screen-group3 = 'NBL'. "no kg. bloquedos
        screen-input = '0'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECK_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM check_material .

  DATA: lv_mtart TYPE mtart,
        lv_objek TYPE ausp-objek,
        lv_cuobj TYPE inob-cuobj,
        ls_mchb  TYPE mchb.

  CONSTANTS: lc_1040 TYPE char4 VALUE '1040',
             lc_4001 TYPE char4 VALUE '4001',
             lc_4005 TYPE char4 VALUE '4005', "DTM
             lc_1000 TYPE char4 VALUE '1000', "DTM
             lc_mch1 TYPE char4 VALUE 'MCH1',
             lc_zpap TYPE char4 VALUE 'ZPAP'.

  CLEAR gw_es_bob_pulper.

  TRANSLATE gv_charg TO UPPER CASE.


  SELECT SINGLE * FROM mchb INTO ls_mchb
                 WHERE charg = gv_charg AND werks = gv_werks
                   AND ( lgort = lc_1040 OR lgort = lc_4001 OR lgort = lc_4005 ). "DTM

**  IF sy-subrc <> 0. "DTM

* CMS 09/10/2019 Detectar bobina pulper para reimprimir etiqueta.
  SELECT SINGLE *
    FROM mchb
    INTO @DATA(ls_datos_bob_pul)
    WHERE charg = @gv_charg AND werks = @gv_werks AND
          lgort = @lc_1000 AND matnr = @gc_matnr_bobpulper.

  IF sy-subrc = 0.
    IF gv_charg+4(1) = 'O'.
      gw_es_bob_pulper = 'X'.
      gv_matnr = gc_matnr_bobpulper.

      RETURN.
    ELSE.
      MESSAGE text-022 TYPE 'I'.
      PERFORM limpiar_campos.
      RETURN.
    ENDIF.
* DTM
**  ELSE.
**    MESSAGE text-022 TYPE 'I'.
**    PERFORM limpiar_campos.
**    RETURN.
* DTM
  ENDIF.
**  ENDIF. "DTM

  SELECT SINGLE * FROM mchb INTO ls_mchb
                WHERE charg = gv_charg AND werks = gv_werks
                  AND ( lgort = lc_1040 OR lgort = lc_4001 OR lgort = lc_4005 ) AND clabs NE 0. "DTM

  gv_matnr = ls_mchb-matnr.

  gv_lgort = ls_mchb-lgort.

  SELECT SINGLE mtart INTO lv_mtart
    FROM mara WHERE matnr = gv_matnr AND mtart = lc_zpap.

  IF sy-subrc <> 0.
    MESSAGE text-001 TYPE 'I'.
    PERFORM limpiar_campos.
    RETURN.
  ENDIF.

  IF gv_werks IS INITIAL.
    SELECT SINGLE werks INTO gv_werks FROM mcha
      WHERE matnr = gv_matnr AND charg = gv_charg.
    IF sy-subrc <> 0.
      MESSAGE text-021 TYPE 'I'.
      PERFORM limpiar_campos.
      RETURN.
    ENDIF.
  ENDIF.

  SELECT SINGLE clabs , cspem FROM mchb INTO ( @gv_peso , @gv_peso_bloq )
    WHERE matnr = @gv_matnr
      AND werks = @gv_werks
      AND ( lgort = @lc_1040 OR lgort = @lc_4001 OR lgort = @lc_4005 ) "DTM
      AND charg = @gv_charg
      AND ( clabs > 0 OR cspem > 0 ).
  IF gv_peso EQ 0 AND gv_peso_bloq EQ 0.
    MESSAGE 'Lote inexistente(0 kg)'(002) TYPE 'I'.
    PERFORM limpiar_campos.
    RETURN.
  ENDIF.

  gv_peso_p = gv_peso.
  gv_enter = abap_true.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECKS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM bobina_a_pulper.

  DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
        lv_goodsmvt_code   TYPE bapi2017_gm_code VALUE '04',
        lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
        lt_return          TYPE TABLE OF bapiret2,
        lv_objectkey       TYPE bapi1003_key-object,
        l_mblnr            TYPE mblnr,
        l_mjahr            TYPE mjahr,
        lt_valuesnum       TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar      TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr      TYPE TABLE OF bapi1003_alloc_values_curr,
        ls_valuesnum       TYPE bapi1003_alloc_values_num,
        lv_diametro        TYPE p DECIMALS 0,
        lv_longitud        TYPE p DECIMALS 0,
        lv_cliente         TYPE atwrt,
        lv_go              TYPE char1.



  DATA l_charg TYPE charg_d.

  IF gv_motivopulper IS INITIAL.
    MESSAGE text-023 TYPE 'I'.
    RETURN.
  ENDIF.

  PERFORM crear_log.

*  Realizar una conversión (movimiento 309) del material y lote de la bobina al material pulper (2001764)
*  con un lote automático en el almacén 1000 e imprimir la etiqueta de la bobina pulper.
*  Informar de las características de lote para la bobina pulper.

  ls_goodsmvt_header-pstng_date = sy-datum.
  ls_goodsmvt_header-doc_date   = sy-datum.
  ls_goodsmvt_header-header_txt = 'Operaciones con bobinas'(006).

  ls_goodsmvt_item-material     = gv_matnr.
  ls_goodsmvt_item-plant        = gv_werks.
  ls_goodsmvt_item-stge_loc     = gv_lgort.
  ls_goodsmvt_item-batch        = gv_charg.

  ls_goodsmvt_item-move_type    = '309'.

  ls_goodsmvt_item-move_mat     = gc_matnr_bobpulper.
  ls_goodsmvt_item-entry_qnt    = gv_peso.
  ls_goodsmvt_item-move_plant   = gv_werks.
  ls_goodsmvt_item-move_stloc   = '1000'.


  CALL FUNCTION 'ZMFMM0002'
    EXPORTING
      i_werks               = gv_werks
      i_mtart               = 'ZSEM'
      i_matnr               = gc_matnr_bobpulper
    IMPORTING
      o_charg               = l_charg
    EXCEPTIONS
      centro_no_contemplado = 1
      no_sujeto_lote        = 2
      OTHERS                = 3.
  IF sy-subrc NE 0.

    lt_return = VALUE bapiret2_t( ( type = 'E'  id = 'ZPP' number = 0
                                    message_v1 = 'Error al crear nuevo lote'(007)
                                    message_v2 = gv_werks
                                    message_v3 = gv_matnr
                                  ) ).
    PERFORM add_log TABLES lt_return.

    RETURN.
  ENDIF.

  ls_goodsmvt_item-move_batch = l_charg.

  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.

  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_goodsmvt_header
      goodsmvt_code    = lv_goodsmvt_code
    IMPORTING
      materialdocument = l_mblnr
      matdocumentyear  = l_mjahr
    TABLES
      goodsmvt_item    = lt_goodsmvt_item
      return           = lt_return.

  IF lt_return[] IS NOT INITIAL.
    PERFORM add_log TABLES lt_return.
  ENDIF.
  IF l_mblnr IS INITIAL.
    RETURN.
  ENDIF.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = abap_true.

  READ TABLE lt_goodsmvt_item INTO ls_goodsmvt_item INDEX 1.

  CONCATENATE gc_matnr_bobpulper ls_goodsmvt_item-move_batch INTO lv_objectkey.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_objectkey
      objecttable     = gc_mch1
      classnum        = gc_z_bobina_pulper
      classtype       = gc_023
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.


  DATA(l_charact) = gt_rechazo_pulper[ atzhl = gv_motivopulper ]-atwrt.

  APPEND VALUE bapi1003_alloc_values_char( charact    = 'ZPPI_MOTIVO_RECHAZO'
                                           value_char = l_charact ) TO lt_valueschar.

* INI 25/09/2020 - 62887 - CMS - Añadir %FSC a bobina pulper
  APPEND VALUE bapi1003_alloc_values_num( charact    = 'Z_FSC_PORCENTAJE'
                                           value_from = 100 ) TO lt_valuesnum.
* FIN 25/09/2020 - 62887 - CMS - Añadir %FSC a bobina pulper



  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = lv_objectkey
      objecttable        = gc_mch1
      classnum           = gc_z_bobina_pulper
      classtype          = gc_023
    TABLES
      allocvaluesnumnew  = lt_valuesnum
      allocvaluescharnew = lt_valueschar
      allocvaluescurrnew = lt_valuescurr
      return             = lt_return.

  IF line_exists( lt_return[ type = 'E' ] ).
    PERFORM add_log TABLES lt_return.
  ENDIF.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = abap_true.

  REFRESH lt_return.
*  Se ha creado el lote & para el material & en el almacén & del centro &
  lt_return = VALUE bapiret2_t( ( type = 'S'  id = 'ZPP' number = 243
                                  message_v1 = ls_goodsmvt_item-move_batch
                                  message_v2 = |{ gc_matnr_bobpulper ALPHA = OUT }|
                                  message_v3 = ls_goodsmvt_item-move_stloc
                                  message_v4 = ls_goodsmvt_item-move_plant
                                   ) ).
  PERFORM add_log TABLES lt_return.

* Obtener nºpedido y posicion de la bobina orig
* para poder poner en la etiqueta pulper
  lv_objectkey = |{ gv_matnr }{ gv_charg }| .

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = CONV bapi1003_key-object( lv_objectkey )
      objecttable     = gc_mch1
      classnum        = gc_z_bobina
      classtype       = gc_023
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.

  IF line_exists( lt_valueschar[ charact = gc_z_pedido ] ).
    DATA(l_pedido) = lt_valueschar[ charact = gc_z_pedido ]-value_char.
  ENDIF.

  IF line_exists( lt_valueschar[ charact = gc_z_posicion ] ).
    DATA(l_posicion) = lt_valueschar[ charact = gc_z_posicion ]-value_char.
  ENDIF.

  IF line_exists( lt_valueschar[ charact = gc_z_pto_trab ] ).
    DATA(l_puesto_trab) = lt_valueschar[ charact = gc_z_pto_trab ]-value_char.
  ENDIF.

  PERFORM grabar_puesto_trabajo USING l_charg l_puesto_trab.

  PERFORM imprimir_etiqueta_pulper USING
                                  l_mblnr
                                  l_mjahr
                                  gv_matnr
                                  l_charg
                                  gv_werks
                                  '1000'
                                  l_pedido
                                  l_posicion
                                  l_puesto_trab
                                 .

ENDFORM.

FORM grabar_puesto_trabajo USING p_charg_pulper
                                  p_puesto_trab.

  DATA: lv_objectkey  TYPE bapi1003_key-object,
        lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr,
        lt_return     TYPE TABLE OF bapiret2.


  CLEAR lv_objectkey.
  lv_objectkey = |{ gc_matnr_bobpulper }{ p_charg_pulper }| .

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_objectkey
      objecttable     = gc_mch1
      classnum        = gc_z_bobina_pulper
      classtype       = gc_023
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.

*  DATA(l_charact) = gt_rechazo_pulper[ atzhl = gv_motivopulper ]-atwrt.

  APPEND VALUE bapi1003_alloc_values_char( charact    = gc_z_pto_trab_pulp
                                           value_char = p_puesto_trab ) TO lt_valueschar.


  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = lv_objectkey
      objecttable        = gc_mch1
      classnum           = gc_z_bobina_pulper
      classtype          = gc_023
    TABLES
      allocvaluesnumnew  = lt_valuesnum
      allocvaluescharnew = lt_valueschar
      allocvaluescurrnew = lt_valuescurr
      return             = lt_return.

  IF line_exists( lt_return[ type = 'E' ] ).
    PERFORM add_log TABLES lt_return.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = abap_true.

  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  POP_UP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LV_SUBRC  text
*----------------------------------------------------------------------*
FORM pop_up USING p_text TYPE string CHANGING p_subrc TYPE char1.

  DATA lv_answer TYPE char1.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      text_question         = p_text
      default_button        = '2'
      display_cancel_button = abap_false
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  p_subrc = sy-subrc.
  CHECK p_subrc = 0 AND lv_answer <> 'A'.

  p_subrc = lv_answer.

ENDFORM.

FORM nuevo_ancho.

  DATA lv_objectkey  TYPE bapi1003_key-object.
  DATA :lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_t.

  DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
        lv_goodsmvt_code   TYPE bapi2017_gm_code,
        lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,

        lv_mblnr           TYPE mblnr,
        lt_valuesnum       TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar      TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr      TYPE TABLE OF bapi1003_alloc_values_curr,
        ls_valuesnum       TYPE bapi1003_alloc_values_num,
*        ls_valueschar      TYPE bapi1003_alloc_values_char,
*        ls_valuescurr      TYPE bapi1003_alloc_values_curr,
        lv_diametro        TYPE p DECIMALS 0,
        lv_longitud        TYPE p DECIMALS 0,
        lv_cliente         TYPE atwrt,
        lv_go              TYPE char1,
        lv_ubi_sap         TYPE char30.

  SELECT SINGLE zzancho INTO @DATA(l_ancho)
    FROM mara WHERE matnr = @gv_matnr ."and charg = @gv_charg.

* Se permite modificar ancho a cualquier bobina CMS 27-04-2020 tiq.60743
*    IF l_ancho > 1340.
*      MESSAGE 'El lote no corresponde a un cabo' TYPE 'I'.
*      RETURN.
*    ENDIF.

  CONCATENATE gv_matnr gv_charg INTO lv_objectkey.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_objectkey
      objecttable     = gc_mch1
      classnum        = gc_z_bobina
      classtype       = gc_023
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

  READ TABLE lt_alloc_values_char INTO DATA(ls_chr) WITH KEY charact = 'Z_CLIENTE'.
  IF sy-subrc EQ 0.
*      IF ls_chr-value_char+1(4) NE gv_werks.
*        MESSAGE 'El lote no corresponde a un cabo' TYPE 'I'.
*        RETURN.
*      ENDIF.
  ENDIF.

*  IF gv_nuevo_ancho > l_ancho.
*    MESSAGE 'El ancho introducido ha de ser menor que el ancho original' TYPE 'I'.
*    RETURN.
*  ENDIF.

  READ TABLE lt_alloc_values_char INTO ls_chr WITH KEY charact = 'Z_UBIC_HPAP'.
  IF sy-subrc EQ 0.
    lv_ubi_sap = ls_chr-value_char.
  ENDIF.

  DATA l_matnr TYPE matnr.
  l_matnr =   |{ gv_matnr ALPHA = OUT }|.

  DATA(l_len) = strlen( l_matnr ).

  l_len = l_len - 4.

  l_matnr = |{ l_matnr(l_len) }{ gv_nuevo_ancho }|.

  l_matnr = |{ l_matnr ALPHA = IN }|.

  SELECT SINGLE * INTO @DATA(ls_marc) FROM marc
    WHERE matnr = @l_matnr AND werks = @gv_werks AND lvorm = @space.
  IF sy-subrc NE 0.
    MESSAGE 'La bobina resultante no es válida' TYPE 'I'.
    RETURN.
  ENDIF.

  DATA lv_subrc.
  DATA l_text TYPE string.

  l_text = '¿Desea cambiar el ancho de la bobina a & mm?'.

  REPLACE '&' IN l_text WITH gv_nuevo_ancho.

  PERFORM pop_up USING l_text CHANGING lv_subrc.
  IF lv_subrc NE 1.
    RETURN.
  ENDIF.

  "T76941 - EAB 07/08/24 - No se permite la operación en caso de ubicación de bobina E80 para Alqueria
  IF gv_werks NE '3000' OR ( gv_werks = '3000' AND ( lv_ubi_sap = '0000' OR lv_ubi_sap >= '9000' ) ).

    PERFORM  crear_log.

    ls_goodsmvt_header-pstng_date = sy-datum.
    ls_goodsmvt_header-doc_date   = sy-datum.
    ls_goodsmvt_header-header_txt = 'Operaciones con bobinas'(006).

    ls_goodsmvt_item-material     = gv_matnr.
    ls_goodsmvt_item-plant        = gv_werks.
    ls_goodsmvt_item-stge_loc     = gv_lgort.
    ls_goodsmvt_item-batch        = gv_charg.
    ls_goodsmvt_item-move_type    = '309'.


    ls_goodsmvt_item-move_mat     = l_matnr.
    ls_goodsmvt_item-entry_qnt    = gv_peso.
    ls_goodsmvt_item-move_plant   = gv_werks.


    ls_goodsmvt_item-move_batch = gv_charg.
    APPEND ls_goodsmvt_item TO lt_goodsmvt_item.

    lv_goodsmvt_code = '04'.  "04 – MB1B – Registro de traspaso


    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = ls_goodsmvt_header
        goodsmvt_code    = lv_goodsmvt_code
      IMPORTING
        materialdocument = lv_mblnr
      TABLES
        goodsmvt_item    = lt_goodsmvt_item
        return           = lt_return.
    IF lt_return[] IS NOT INITIAL.
      PERFORM add_log TABLES lt_return.
    ENDIF.
    IF lv_mblnr IS INITIAL.
      RETURN.
    ENDIF.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = abap_true.

    "EAB T76941 28.06.2023 Integración E80: se llama a la función de envio de datos de bobina a E80 una vez se cambia el ancho
    CALL FUNCTION 'Z_E80_ENVIO_STOCK_BOBINA'
      EXPORTING
        i_werks          = gv_werks
*       i_charg          =
        i_objek          = lv_objectkey
        i_par_origen     = '4'
      EXCEPTIONS
        lote_inexistente = 1
        OTHERS           = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

    PERFORM imprimir_etiqueta USING l_matnr
                                    gv_charg gv_diametro gv_longitud gv_lgort ' '
                     CHANGING lv_go.

  ELSE.

    MESSAGE 'No se permite esta operación en la ubicación de la bobina' TYPE 'I'.

  ENDIF.

ENDFORM.

**&---------------------------------------------------------------------*
**&      Form  CREAR_LOTE
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_1275   text
**----------------------------------------------------------------------*
*FORM crear_lote  USING p_matnr p_charg p_tbob p_peso
*                       p_diametro p_longitud p_empalmes
*                       p_operario
*                 CHANGING p_go p_charg2.
*
*  DATA: "lv_batch           TYPE charg_d,
*    lt_return          TYPE TABLE OF bapiret2 WITH HEADER LINE,
*    "lt_return2         TYPE TABLE OF bapiret2 WITH HEADER LINE,
*    lv_objectkeynew    TYPE bapi1003_key-object,
*    lv_objectkey       TYPE bapi1003_key-object,
*    lv_objecttablenew  TYPE bapi1003_key-objecttable,
*    ls_goodsmvt_header TYPE bapi2017_gm_head_01,
*    lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
*    lv_gmcode          TYPE bapi2017_gm_code VALUE '309',
*    lv_classtypenew    TYPE bapi1003_key-classtype,
*    lv_mtart           TYPE mara-mtart,
*    lt_valuesnum       TYPE TABLE OF bapi1003_alloc_values_num,
*    lt_valueschar      TYPE TABLE OF bapi1003_alloc_values_char,
*    lt_valuescurr      TYPE TABLE OF bapi1003_alloc_values_curr,
*    ls_valuesnum       TYPE bapi1003_alloc_values_num,
*    ls_valueschar      TYPE bapi1003_alloc_values_char,
*    ls_valuescurr      TYPE bapi1003_alloc_values_curr.
*
*  SELECT SINGLE mtart INTO lv_mtart FROM mara WHERE matnr = p_matnr.
*  CLEAR p_go.
*
*  CALL FUNCTION 'ZMFMM0002'
*    EXPORTING
*      i_werks               = gv_werks
*      i_mtart               = lv_mtart
*      i_matnr               = p_matnr
*    IMPORTING
*      o_charg               = p_charg2
*    EXCEPTIONS
*      centro_no_contemplado = 1
*      no_sujeto_lote        = 2
*      OTHERS                = 3.
*
*  CALL FUNCTION 'BAPI_BATCH_CREATE'
*    EXPORTING
*      material = p_matnr
*      batch    = p_charg2
*      plant    = gv_werks
*    IMPORTING
*      batch    = p_charg2
*    TABLES
*      return   = lt_return.
*
*  LOOP AT lt_return WHERE type = 'E' OR type = 'A' OR type = 'X'.
*    EXIT.
*  ENDLOOP.
*
*  IF sy-subrc = 0.
** Mostrar mensajes de error...
*    PERFORM add_log TABLES lt_return.
*  ELSE.
*
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*      EXPORTING
*        wait = 'X'.
*
*    PERFORM add_log TABLES lt_return.
*    REFRESH lt_return.
*
*    CONCATENATE gv_matnr p_charg INTO lv_objectkey.
*
*    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
*      EXPORTING
*        objectkey       = lv_objectkey
*        objecttable     = 'MCH1'
*        classnum        = gc_z_bobina
*        classtype       = '023'
*      TABLES
*        allocvaluesnum  = lt_valuesnum
*        allocvalueschar = lt_valueschar
*        allocvaluescurr = lt_valuescurr
*        return          = lt_return.
*
*    LOOP AT lt_return WHERE type = 'E' OR type = 'A' OR type = 'X'.
*      EXIT.
*    ENDLOOP.
*
*    IF sy-subrc = 0.
** Mostrar mensajes de error...
*      PERFORM add_log TABLES lt_return.
*    ELSE.
*
*      PERFORM add_log TABLES lt_return.
*
*      CONCATENATE p_matnr p_charg2 INTO lv_objectkeynew.
*
** Añadir caracteristicas, ancho, diametro, longitud, peso...
*      READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_diametro.
*      IF sy-subrc = 0.
*        ls_valuesnum-value_from = p_diametro.
*        MODIFY lt_valuesnum FROM ls_valuesnum INDEX sy-tabix.
*      ELSE.
*        ls_valuesnum-charact = gc_z_diametro.
*        ls_valuesnum-value_from = p_diametro.
*        APPEND ls_valuesnum TO lt_valuesnum.
*      ENDIF.
*
*      READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_longitud.
*      IF sy-subrc = 0.
*        ls_valuesnum-value_from = p_longitud.
*        MODIFY lt_valuesnum FROM ls_valuesnum INDEX sy-tabix.
*      ELSE.
*        ls_valuesnum-charact = gc_z_longitud.
*        ls_valuesnum-value_from = p_longitud.
*        APPEND ls_valuesnum TO lt_valuesnum.
*      ENDIF.
*
*      READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_peso.
*      IF sy-subrc = 0.
*        ls_valuesnum-value_from = p_peso.
*        MODIFY lt_valuesnum FROM ls_valuesnum INDEX sy-tabix.
*      ELSE.
*        ls_valuesnum-charact = gc_z_peso.
*        ls_valuesnum-value_from = p_peso.
*        APPEND ls_valuesnum TO lt_valuesnum.
*      ENDIF.
*
*      READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_empalmes.
*      IF sy-subrc = 0.
*        ls_valuesnum-value_from = p_empalmes.
*        MODIFY lt_valuesnum FROM ls_valuesnum INDEX sy-tabix.
*      ELSE.
*        ls_valuesnum-charact = gc_z_empalmes.
*        ls_valuesnum-value_from = p_empalmes.
*        APPEND ls_valuesnum TO lt_valuesnum.
*      ENDIF.
*
*      READ TABLE lt_valueschar INTO ls_valueschar WITH KEY charact = gc_z_operario.
*      IF sy-subrc = 0.
*        ls_valueschar-value_char = p_operario.
*        MODIFY lt_valueschar FROM ls_valueschar INDEX sy-tabix.
*      ELSE.
*        ls_valueschar-charact = gc_z_operario.
*        ls_valueschar-value_char = p_operario.
*        APPEND ls_valueschar TO lt_valueschar.
*      ENDIF.
*
*      CALL FUNCTION 'BAPI_OBJCL_CREATE'
*        EXPORTING
*          objectkeynew    = lv_objectkeynew
*          objecttablenew  = 'MCH1'
*          classnumnew     = gc_z_bobina
*          classtypenew    = '023'
*        TABLES
*          allocvaluesnum  = lt_valuesnum
*          allocvalueschar = lt_valueschar
*          allocvaluescurr = lt_valuescurr
*          return          = lt_return.
*
*      LOOP AT lt_return WHERE type = 'E' OR type = 'A' OR type = 'X'.
*        EXIT.
*      ENDLOOP.
*
*      IF sy-subrc = 0.
** Mostrar mensajes de error...
*        PERFORM add_log TABLES lt_return.
*      ELSE.
*        p_go = gc_true.
*        PERFORM add_log TABLES lt_return.
*
*        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*          EXPORTING
*            wait = 'X'.
*
*        CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
*          EXPORTING
*            percentage = 25
*            text       = text-017.
*
*      ENDIF.
*
*    ENDIF.
*  ENDIF.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREAR_309
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_MATNR  text
*      -->P_LV_CHARG  text
*----------------------------------------------------------------------*
*FORM crear_309  USING p_matnr p_charg p_charg2 p_kg p_lgort p_lgort2
*                 CHANGING p_go.
*
*  DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
*        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
*        lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
*        lt_return          TYPE TABLE OF bapiret2 WITH HEADER LINE,
*        lv_gmcode          TYPE bapi2017_gm_code VALUE '04',
*        lv_mblnr           TYPE mblnr.
*
*  CLEAR p_go.
*
*  ls_goodsmvt_header-pstng_date = sy-datum.
*  ls_goodsmvt_header-doc_date = sy-datum.
*
*  ls_goodsmvt_item-material = gv_matnr.
*  ls_goodsmvt_item-plant = gv_werks.
*  ls_goodsmvt_item-stge_loc = p_lgort.
*  ls_goodsmvt_item-batch = p_charg.
*  ls_goodsmvt_item-move_type = '309'.
*
*  ls_goodsmvt_item-move_mat = p_matnr.
*  ls_goodsmvt_item-entry_qnt = p_kg.
*  ls_goodsmvt_item-move_plant = gv_werks.
*  ls_goodsmvt_item-move_stloc = p_lgort2.
*  ls_goodsmvt_item-move_batch = p_charg2.
*
*  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.
*
*  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
*    EXPORTING
*      goodsmvt_header  = ls_goodsmvt_header
*      goodsmvt_code    = lv_gmcode
*    IMPORTING
*      materialdocument = lv_mblnr
*    TABLES
*      goodsmvt_item    = lt_goodsmvt_item
*      return           = lt_return.
*
*  PERFORM add_log TABLES lt_return.
*
*  IF NOT lv_mblnr IS INITIAL.
*
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*      EXPORTING
*        wait = 'X'.
*
*    p_go = gc_true.
*
*  ENDIF.
*
*  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
*    EXPORTING
*      percentage = 50
*      text       = text-018.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ETIQUETA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_etiqueta USING p_matnr TYPE matnr
                             p_charg TYPE charg_d
                             p_diametro
                             p_longitud
                             p_lgort   TYPE lgort_d
                             p_cliente
                       CHANGING p_go.

  DATA: ls_etiqueta TYPE zspp_etiq_bobina,
        lv_zebelp1  TYPE posnr_va.

  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char.


  DATA ls_msg TYPE bal_s_msg.

  DATA l_classnum TYPE klasse_d.

  CLEAR: ls_etiqueta,
         lv_zebelp1,
         p_go.

  CLEAR: lv_object, ls_alloc_values_char.
  CLEAR: lt_alloc_values_num,
         lt_alloc_values_char,
         lt_alloc_values_curr,
         lt_return.

  REFRESH: lt_alloc_values_num,
           lt_alloc_values_char,
           lt_alloc_values_curr,
           lt_return.

  ls_etiqueta-diametro        = p_diametro.
  ls_etiqueta-charg           = p_charg.
*  ls_etiqueta-aufnr = gv_aufnr.
  ls_etiqueta-fec_fabricacion = sy-datum.
  ls_etiqueta-lgort           = p_lgort.
  ls_etiqueta-longitud        = p_longitud.
  ls_etiqueta-matnr           = p_matnr.
  ls_etiqueta-werks           = gv_werks.
  ls_etiqueta-kunnr           = p_cliente.
  ls_etiqueta-posicion        = lv_zebelp1.
  ls_etiqueta-werks_ent       = ls_etiqueta-werks.


  IF ls_etiqueta-kunnr IS INITIAL OR ls_etiqueta-pedido IS INITIAL OR ls_etiqueta-posicion IS INITIAL.
* Mirar si cliente, pedido o posición vienen vacíos:
    CONCATENATE ls_etiqueta-matnr ls_etiqueta-charg INTO lv_object.

*    IF p_matnr EQ gc_matnr_bobpulper.
*      l_classnum = gc_z_bobina_pulper.
*    ELSE.
    l_classnum = gc_z_bobina.
*    ENDIF.

    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = lv_object
        objecttable     = gc_mch1
        classnum        = l_classnum
        classtype       = gc_023
      TABLES
        allocvaluesnum  = lt_alloc_values_num
        allocvalueschar = lt_alloc_values_char
        allocvaluescurr = lt_alloc_values_curr
        return          = lt_return.

    LOOP AT lt_alloc_values_char INTO ls_alloc_values_char.
      CASE ls_alloc_values_char-charact.
        WHEN 'Z_CLIENTE'.
          IF ls_etiqueta-kunnr IS INITIAL.
            CONDENSE ls_alloc_values_char-value_char.
            ls_etiqueta-kunnr = ls_alloc_values_char-value_char.
          ENDIF.
        WHEN 'Z_PEDIDO'.
          IF ls_etiqueta-pedido IS INITIAL.
            CONDENSE ls_alloc_values_char-value_char.
            ls_etiqueta-pedido = ls_alloc_values_char-value_char.
          ENDIF.
        WHEN 'Z_POSICION'.
          IF ls_etiqueta-posicion IS INITIAL.
            CONDENSE ls_alloc_values_char-value_char.
            ls_etiqueta-posicion = ls_alloc_values_char-value_char.
          ENDIF.
        WHEN 'ZPPI_MOTIVO_REPROCESO_BOBINA'.
*          IF ls_etiqueta-m IS INITIAL.
*            CONDENSE ls_alloc_values_char-value_char.
*            ls_etiqueta-posicion = ls_alloc_values_char-value_char.
*          ENDIF.
      ENDCASE.
    ENDLOOP.

  ENDIF.

  CALL FUNCTION 'ZMFPP_ETIQ_BOBINA'
    EXPORTING
      i_bobina   = ls_etiqueta
      i_nodialog = abap_false.
  ##FM_SUBRC_OK
  IF sy-subrc = 0.
    ls_msg-msgty = 'S'.
    ls_msg-msgid = 'ZPP'.
    ls_msg-msgno = '000'.
    ls_msg-msgv1 = text-014.
    p_go = abap_true.
  ELSE.
    ls_msg-msgty = 'E'.
    ls_msg-msgid = 'ZPP'.
    ls_msg-msgno = '000'.
    ls_msg-msgv1 = text-015.
  ENDIF.

  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
      i_log_handle     = gv_log_handle
      i_s_msg          = ls_msg
    EXCEPTIONS
      log_not_found    = 0
      msg_inconsistent = 0
      log_is_full      = 0
      OTHERS           = 0.

*  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
*    EXPORTING
*      percentage = 75
*      text       = text-019.
  PERFORM limpiar_campos.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREAR_551
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_gv_matnr  text
*      -->P_gv_charg  text
*      -->P_GV_DIFF_PESO  text
*----------------------------------------------------------------------*
*FORM crear_551 USING p_matnr p_charg p_difpeso.
*
*  DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
*        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
*        lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
*        lt_return          TYPE TABLE OF bapiret2 WITH HEADER LINE,
*        lv_gmcode          TYPE bapi2017_gm_code VALUE '06',
*        lv_mblnr           TYPE mblnr.
*
*  CHECK p_difpeso GT 0.
*
*  ls_goodsmvt_header-pstng_date = sy-datum.
*  ls_goodsmvt_header-doc_date = sy-datum.
*
*  ls_goodsmvt_item-material = p_matnr.
*  ls_goodsmvt_item-plant = gv_werks.
*  ls_goodsmvt_item-stge_loc = '4001'.
*  ls_goodsmvt_item-batch = p_charg.
*  ls_goodsmvt_item-move_type = '551'.
*
*  ls_goodsmvt_item-move_mat = p_matnr.
*  ls_goodsmvt_item-entry_qnt = p_difpeso.
*  ls_goodsmvt_item-move_plant = gv_werks.
*  ls_goodsmvt_item-costcenter = gc_ceco_prod.
*  ls_goodsmvt_item-move_batch = p_charg.
*  ls_goodsmvt_item-move_stloc = '4001'.
*
*  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.
*  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
*    EXPORTING
*      goodsmvt_header  = ls_goodsmvt_header
*      goodsmvt_code    = lv_gmcode
*    IMPORTING
*      materialdocument = lv_mblnr
*    TABLES
*      goodsmvt_item    = lt_goodsmvt_item
*      return           = lt_return.
*
*  PERFORM add_log TABLES lt_return.
*
*  CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
*    EXPORTING
*      percentage = 100
*      text       = text-020.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ADD_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_RETURN  text
*----------------------------------------------------------------------*
FORM add_log  TABLES lt_return TYPE bapiret2_t.

  DATA ls_msg TYPE bal_s_msg.

  LOOP AT lt_return INTO DATA(ls_return).

    gv_log_exist = abap_true.

    ls_msg-msgty = ls_return-type.
    ls_msg-msgid = ls_return-id.
    ls_msg-msgno = ls_return-number.
    ls_msg-msgv1 = ls_return-message_v1.
    ls_msg-msgv2 = ls_return-message_v2.
    ls_msg-msgv3 = ls_return-message_v3.
    ls_msg-msgv4 = ls_return-message_v4.

    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle     = gv_log_handle
        i_s_msg          = ls_msg
      EXCEPTIONS
        log_not_found    = 0
        msg_inconsistent = 0
        log_is_full      = 0
        OTHERS           = 0.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_log .

  DATA: ls_log        TYPE bal_s_log.

  IF NOT gv_log_handle IS INITIAL.
    CALL FUNCTION 'BAL_LOG_REFRESH'
      EXPORTING
        i_log_handle = gv_log_handle.

    CLEAR gv_log_handle.
  ENDIF.

  ls_log-extnumber = text-016.

  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log                 = ls_log
    IMPORTING
      e_log_handle            = gv_log_handle
    EXCEPTIONS
      log_header_inconsistent = 0.

  CLEAR gv_log_exist..

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_log .

  DATA ls_display_profile TYPE bal_s_prof.
  DATA: m_log_handle TYPE balloghndl VALUE ' '.
  DATA: l_log_handle_tab TYPE bal_t_logh,
        l_msg_handle_tab TYPE bal_t_msgh,
        l_msg_handle_wa  TYPE LINE OF bal_t_msgh.

  CHECK gv_log_exist = abap_true.

  CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
    EXPORTING
      start_col           = 5
      start_row           = 5
      end_col             = 87
      end_row             = 25
    IMPORTING
      e_s_display_profile = ls_display_profile.

  ls_display_profile-cwidth_opt = abap_true.
  ls_display_profile-use_grid   = abap_true.

  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile  = ls_display_profile
    EXCEPTIONS
      profile_inconsistent = 0
      internal_error       = 0
      no_data_available    = 0
      no_authority         = 0
      OTHERS               = 0.

  PERFORM limpiar_campos.

  IF NOT gv_log_handle IS INITIAL.
    CALL FUNCTION 'BAL_LOG_REFRESH'
      EXPORTING
        i_log_handle = gv_log_handle.

    CLEAR gv_log_handle.
  ENDIF.


*  APPEND m_log_handle TO l_log_handle_tab.
*
*  CALL FUNCTION 'BAL_GLB_SEARCH_MSG'
*    EXPORTING
*      i_t_log_handle = l_log_handle_tab
*    IMPORTING
*      e_t_msg_handle = l_msg_handle_tab
*    EXCEPTIONS
*      msg_not_found  = 1
*      OTHERS         = 2.
*
*  IF sy-subrc <> 0.
**   Do nothing
*    EXIT.
*  ENDIF.

* Delete all found messages...
*  LOOP AT l_msg_handle_tab INTO l_msg_handle_wa.
*    CALL FUNCTION 'BAL_LOG_MSG_DELETE'
*      EXPORTING
*        i_s_msg_handle = l_msg_handle_wa
*      EXCEPTIONS
*        msg_not_found  = 1
*        log_not_found  = 2
*        OTHERS         = 3.

*    IF sy-subrc <> 0.
**     Do nothing
*    ENDIF.
*  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PULPER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM pulper .

  DATA lv_subrc TYPE char1.

  PERFORM pop_up USING text-013 CHANGING lv_subrc.
  IF lv_subrc NE 1.
    RETURN.
  ENDIF.
  PERFORM bobina_a_pulper.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  BOBINA_A_REPROCESAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM bobina_a_reprocesar .

  DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
        lv_goodsmvt_code   TYPE bapi2017_gm_code,
        lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
        lt_return          TYPE TABLE OF bapiret2,
        lv_objectkey       TYPE bapi1003_key-object,
        lv_mblnr           TYPE mblnr,
        lt_valuesnum       TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar      TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr      TYPE TABLE OF bapi1003_alloc_values_curr,
        ls_valuesnum       TYPE bapi1003_alloc_values_num,
*        ls_valueschar      TYPE bapi1003_alloc_values_char,
*        ls_valuescurr      TYPE bapi1003_alloc_values_curr,
        lv_diametro        TYPE p DECIMALS 0,
        lv_longitud        TYPE p DECIMALS 0,
        lv_cliente         TYPE atwrt,
        lv_go              TYPE char1.

  DATA l_charg TYPE charg_d.

* 69103 - 19/10/2021 - CMS - Añadir almacen 4005 para tratar reproceso.
  IF gv_lgort NE '1040' AND gv_lgort NE '4005'.
    MESSAGE text-028 TYPE 'I'.
    RETURN.
  ENDIF.


  IF gv_motivorepro IS INITIAL.
    MESSAGE text-025 TYPE 'I'.
    RETURN.
  ENDIF.


  PERFORM crear_log.

* Realizar una conversión (movimiento 309) del material y lote de la bobina a
* reprocesar al mismo material y nuevo lote automático en el almacén 4001 e
* imprimir la etiqueta de la bobina a reprocesar.
* Informar de las características de lote para la bobina a reprocesar.

  ls_goodsmvt_header-pstng_date = sy-datum.
  ls_goodsmvt_header-doc_date   = sy-datum.
  ls_goodsmvt_header-header_txt = 'Operaciones con bobinas'(006).

  ls_goodsmvt_item-material     = gv_matnr.
  ls_goodsmvt_item-plant        = gv_werks.
  ls_goodsmvt_item-stge_loc     = gv_lgort.
  ls_goodsmvt_item-batch        = gv_charg.

* Sustituir 309 por 311.
*  ls_goodsmvt_item-move_type    = '309'.
  ls_goodsmvt_item-move_type    = '311'.


  ls_goodsmvt_item-move_mat     = gv_matnr.
  ls_goodsmvt_item-entry_qnt    = gv_peso.
  ls_goodsmvt_item-move_plant   = gv_werks.
  ls_goodsmvt_item-move_stloc   = '4001'.


*  CALL FUNCTION 'ZMFMM0002'
*    EXPORTING
*      i_werks               = gv_werks
*      i_mtart               = 'ZPAP'
*      i_matnr               = gv_matnr
*    IMPORTING
*      o_charg               = l_charg
*    EXCEPTIONS
*      centro_no_contemplado = 1
*      no_sujeto_lote        = 2
*      OTHERS                = 3.
*
*  IF sy-subrc NE 0.
*
*    lt_return = VALUE bapiret2_t( ( type = 'E'  id = 'ZPP' number = 0
*                                    message_v1 = 'Error al crear nuevo lote'(007)
*                                    message_v2 = gv_werks
*                                    message_v3 = gv_matnr
*                                  ) ).
*    PERFORM add_log TABLES lt_return.
*
*    RETURN.
*  ENDIF.


  ls_goodsmvt_item-move_batch = gv_charg.
  APPEND ls_goodsmvt_item TO lt_goodsmvt_item.

  lv_goodsmvt_code = '04'.  "04 – MB1B – Registro de traspaso


  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_goodsmvt_header
      goodsmvt_code    = lv_goodsmvt_code
    IMPORTING
      materialdocument = lv_mblnr
    TABLES
      goodsmvt_item    = lt_goodsmvt_item
      return           = lt_return.
  IF lt_return[] IS NOT INITIAL.
    PERFORM add_log TABLES lt_return.
  ENDIF.
  IF lv_mblnr IS INITIAL.
    RETURN.
  ENDIF.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = abap_true.

  READ TABLE lt_goodsmvt_item INTO ls_goodsmvt_item INDEX 1.

  CONCATENATE gv_matnr ls_goodsmvt_item-move_batch INTO lv_objectkey.
  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_objectkey
      objecttable     = gc_mch1
      classnum        = gc_z_bobina
      classtype       = gc_023
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.

  READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_diametro.
  IF sy-subrc = 0.
    lv_diametro = ls_valuesnum-value_from.
  ENDIF.

  READ TABLE lt_valuesnum INTO ls_valuesnum WITH KEY charact = gc_z_longitud.
  IF sy-subrc = 0.
    lv_longitud = ls_valuesnum-value_from.
  ENDIF.

  DATA(l_charact) = gt_reproceso[ atzhl = gv_motivorepro ]-atwrt.

  APPEND VALUE bapi1003_alloc_values_char( charact    = 'ZPPI_MOTIVO_REPROCESO_BOBINA'
                                           value_char = l_charact ) TO lt_valueschar.

  APPEND VALUE bapi1003_alloc_values_char( charact        = 'Z_REPROCESO'
                                           value_neutral = '1'
                                          ) TO lt_valueschar.

  "Le otorgamos a la bobina reprocesada ubicación '0000'
*  APPEND VALUE bapi1003_alloc_values_char( charact        = 'Z_UBIC_HPAP'
*                                           value_neutral = '0000'
*                                          ) TO lt_valueschar.

  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = lv_objectkey
      objecttable        = gc_mch1
      classnum           = gc_z_bobina
      classtype          = gc_023
    TABLES
      allocvaluesnumnew  = lt_valuesnum
      allocvaluescharnew = lt_valueschar
      allocvaluescurrnew = lt_valuescurr
      return             = lt_return.
  IF line_exists( lt_return[ type = 'E' ] ).
    PERFORM add_log TABLES lt_return.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    RETURN.
  ENDIF.

  CALL FUNCTION 'DEQUEUE_EMMCHA'
    EXPORTING
      matnr = gv_matnr
      werks = gv_werks
      charg = gv_charg.


  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = abap_true.

  "EAB T76941 28.06.2023 Integración E80: se llama a la función de envio de datos de bobina a E80 una vez se ha reprocesado la bobina
  CALL FUNCTION 'Z_E80_ENVIO_STOCK_BOBINA'
    EXPORTING
      i_werks          = gv_werks
*     I_CHARG          =
      i_objek          = lv_objectkey
      i_par_origen     = '2'
    EXCEPTIONS
      lote_inexistente = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.


  REFRESH lt_return.
*  Se ha creado el lote & para el material & en el almacén & del centro &
  lt_return = VALUE bapiret2_t( ( type = 'S'  id = 'ZPP' number = 243
                                  message_v1 = ls_goodsmvt_item-move_batch
                                  message_v2 = |{ ls_goodsmvt_item-move_mat ALPHA = OUT }|
                                  message_v3 = ls_goodsmvt_item-move_stloc
                                  message_v4 = ls_goodsmvt_item-move_plant
                                   ) ).
  PERFORM add_log TABLES lt_return.


  PERFORM imprimir_etiqueta USING gv_matnr
                                  ls_goodsmvt_item-move_batch
                                  lv_diametro
                                  lv_longitud
                                  '4001'
                                  lv_cliente
                     CHANGING lv_go.

  PERFORM limpiar_campos.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir .

  DATA: lv_subrc TYPE char1,
        lv_go    TYPE char1.

  PERFORM pop_up USING text-026 CHANGING lv_subrc.
  CHECK lv_subrc EQ 1.
  PERFORM imprimir_etiqueta USING gv_matnr gv_charg gv_diametro gv_longitud gv_lgort ' '
                   CHANGING lv_go.
  PERFORM limpiar_campos.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ETIQUETA_PULPER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GC_MATNR_BOBPULPER  text
*      -->P_LS_GOODSMVT_ITEM_MOVE_BATCH  text
*      -->P_LV_DIAMETRO  text
*      -->P_LV_LONGITUD  text
*      -->P_1249   text
*      -->P_LV_CLIENTE  text
*      <--P_LV_GO  text
*----------------------------------------------------------------------*
FORM imprimir_etiqueta_pulper USING p_mblnr TYPE mblnr
                                    p_mjahr TYPE mjahr
                                    p_matnr TYPE matnr
                                    p_charg TYPE charg_d
                                    p_werks TYPE werks_d
                                    p_lgort TYPE lgort_d
                                    p_pedido
                                    p_posicion
                                    p_puesto_trab

      .
  DATA: lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr,
        lt_return     TYPE bapiret2_t.

  DATA ls_aufm TYPE aufm.

  DATA ls_bobina_pulper TYPE zspp_etiq_bobina_pulper .

  DATA(l_objectkey) = |{ gc_matnr_bobpulper }{ p_charg }|.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = CONV bapi1003_key-object( l_objectkey )
      objecttable     = gc_mch1
      classnum        = gc_z_bobina_pulper
      classtype       = gc_023
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.



  " Datos para llamar a la función bobina:
  ls_bobina_pulper-matnr           = gc_matnr_bobpulper.
  ls_bobina_pulper-werks           = p_werks.
  ls_bobina_pulper-lgort           = p_lgort .
  ls_bobina_pulper-charg           = p_charg.

  ls_bobina_pulper-plnbez          = p_matnr.
  ls_bobina_pulper-pedido   = p_pedido.
  ls_bobina_pulper-posicion = p_posicion.

  IF line_exists( lt_valuesnum[ charact = gc_z_diametro ] ).
    ls_bobina_pulper-diametro        =    lt_valuesnum[ charact = gc_z_diametro ]-value_from.
  ENDIF.

  IF line_exists( lt_valuesnum[ charact = gc_z_peso ] ).
    ls_bobina_pulper-peso        =    lt_valuesnum[ charact = gc_z_peso ]-value_from.
  ENDIF.

  IF line_exists( lt_valuesnum[ charact = gc_z_fechafab ] ).
    ls_bobina_pulper-fec_fabricacion      =    lt_valuesnum[ charact = gc_z_fechafab ]-value_from.
  ENDIF.

  IF line_exists( lt_valuesnum[ charact = gc_z_longitud ] ).
    ls_bobina_pulper-longitud     =    lt_valuesnum[ charact = gc_z_longitud ]-value_from.
  ENDIF.



  ls_bobina_pulper-cod_barras = l_objectkey.
  ls_bobina_pulper-arbpl_ent  = p_puesto_trab.


  CALL FUNCTION 'ZMFPP_ETIQ_BOBINA_PULPER'
    EXPORTING
      i_bobina   = ls_bobina_pulper
      i_nodialog = abap_false.


  PERFORM limpiar_campos.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LIMPIAR_CAMPOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM limpiar_campos .

  CLEAR: gv_ancho,
         gv_charg,
         gv_diametro_p,
         gv_peso_p,
         gv_peso_bloq,
         gv_longitud_p,
         gv_matnr,
         gv_maktx,
         gv_motivopulper,
         gv_motivorepro,
         gv_werks,
         gv_peso,
         gv_nuevo_peso_p,
         gv_nuevo_bobina_p,
         gv_ancho,
         gv_diametro,
         gv_longitud_p,
         gv_longitud,
         gv_enter,
         gv_nuevo_ancho.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CAMBIAR_PESO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM pelar_bobina .
  DATA :lv_subrc TYPE char1,l_msg TYPE string.

  DATA: ls_goodsmvt_header TYPE bapi2017_gm_head_01,
        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
        lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
        lv_gmcode          TYPE bapi2017_gm_code VALUE '06',
        lv_mblnr           TYPE mblnr,
        lt_return          TYPE bapiret2_t,
        l_objectkey        TYPE bapi1003_key-object,
        lv_ubi_sap         TYPE char30.

  l_msg = text-027.

  DATA(l_peso_str) = CONV string( gv_nuevo_bobina_p ).

  REPLACE '&' INTO l_msg WITH l_peso_str.

  IF gv_lgort NE '1040'.
    MESSAGE text-028 TYPE 'I'.
    RETURN.
  ENDIF.
  PERFORM pop_up USING l_msg CHANGING lv_subrc.
  IF lv_subrc NE 1.
    RETURN.
  ENDIF.

  IF  gv_nuevo_bobina_p EQ 0.
    MESSAGE 'El peso introducido es cero kgs'(028) TYPE 'I'.
    PERFORM limpiar_campos.
    RETURN.
  ENDIF.


*Validar que el peso es inferior al peso original de la bobina. Si no lo es,
*avisar de esta circunstancia (El nuevo peso debe ser inferior al original de la bobina | Aceptar)

  IF gv_peso_p LE gv_nuevo_bobina_p.
    MESSAGE 'El nuevo peso debe ser inferior al original de la bobina '(003) TYPE 'I'.
    RETURN.
  ENDIF.

  DATA(l_difpeso) = gv_peso_p - gv_nuevo_bobina_p.

*   Realizar una salida de mercancía a desguace (movimiento 551) del material y
*   lote de la bobina original por la diferencia de kg entre el peso original y el
*   nuevo peso contra el centro de coste general de almacén producto terminado
*   (Ceco 30003203 para l'Alqueria o 30203203 para Sarrià)
*   Actualizar el peso en la característica peso de la bobina (Z_PESO)
*   Imprimir la etiqueta de la bobina.



  l_objectkey = |{ gv_matnr ALPHA = IN }{ gv_charg }|.

  DATA: lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr.


  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_objectkey
      objecttable     = gc_mch1
      classnum        = 'Z_BOBINA'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.



  PERFORM add_log TABLES lt_return.

  IF line_exists( lt_return[ type = 'E' ] ).
    RETURN.
  ENDIF.

  ASSIGN lt_valuesnum[ charact = gc_z_peso ] TO FIELD-SYMBOL(<fs>).
  IF sy-subrc NE 0.
    APPEND VALUE bapi1003_alloc_values_num( charact = gc_z_peso value_to = gv_nuevo_bobina_p ) TO lt_valuesnum.
  ELSE.
    <fs>-value_from =  gv_nuevo_bobina_p.
  ENDIF.

  READ TABLE lt_valueschar INTO DATA(ls_chr) WITH KEY charact = 'Z_UBIC_HPAP'.
  IF sy-subrc EQ 0.
    lv_ubi_sap = ls_chr-value_char.
  ENDIF.

  "T76941 - EAB 07/08/24 - No se permite la operación en caso de ubicación de bobina E80 para Alqueria
  IF gv_werks NE '3000' OR ( gv_werks = '3000' AND ( lv_ubi_sap = '0000' OR lv_ubi_sap >= '9000' ) ).

    ls_goodsmvt_header-pstng_date = sy-datum  .
    ls_goodsmvt_header-doc_date   = sy-datum .
    ls_goodsmvt_header-header_txt = 'Operaciones con bobinas'(006).

    ls_goodsmvt_item-material  = gv_matnr.
    ls_goodsmvt_item-plant     = gv_werks.
    ls_goodsmvt_item-stge_loc  = gv_lgort.
    ls_goodsmvt_item-batch     = gv_charg.
    ls_goodsmvt_item-move_type = '551'.

    ls_goodsmvt_item-move_mat   = gv_matnr.
    ls_goodsmvt_item-entry_qnt  = l_difpeso.
    ls_goodsmvt_item-move_plant = gv_werks.
    ls_goodsmvt_item-costcenter = |{ gv_werks }3203|.
    ls_goodsmvt_item-move_batch = gv_charg.
    ls_goodsmvt_item-move_stloc = gv_lgort.

    APPEND ls_goodsmvt_item TO lt_goodsmvt_item.

    PERFORM crear_log.

    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = ls_goodsmvt_header
        goodsmvt_code    = lv_gmcode
      IMPORTING
        materialdocument = lv_mblnr
      TABLES
        goodsmvt_item    = lt_goodsmvt_item
        return           = lt_return.

    PERFORM add_log TABLES lt_return.

    IF lv_mblnr IS NOT INITIAL.


      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ELSE.


      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      RETURN.


    ENDIF.

*  Longitud (m) = [peso (gr) /ancho(m) * gramaje (gr/m2)]

    DATA: l_new_long LIKE gv_longitud_p,
          l_gramaje  TYPE zzgramaje,
          l_ancho    LIKE gv_longitud_p,
          l_gram_p   LIKE gv_longitud_p.


    SELECT SINGLE zzgramaje INTO l_gramaje FROM mara WHERE matnr = gv_matnr.

    l_ancho = gv_ancho.
    l_gram_p = l_gramaje.

    l_new_long = ( gv_nuevo_bobina_p * 1000 ) / ( ( l_ancho / 1000 ) * l_gram_p ).

    ASSIGN lt_valuesnum[ charact = gc_z_longitud ] TO FIELD-SYMBOL(<fs_long>).
    IF sy-subrc NE 0.
      APPEND VALUE bapi1003_alloc_values_num( charact = gc_z_longitud value_to = l_new_long ) TO lt_valuesnum.
    ELSE.
      <fs_long>-value_from = l_new_long.
    ENDIF.

    CALL FUNCTION 'BAPI_OBJCL_CHANGE'
      EXPORTING
        objectkey          = l_objectkey
        objecttable        = gc_mch1
        classnum           = 'Z_BOBINA'
        classtype          = '023'
      TABLES
        allocvaluesnumnew  = lt_valuesnum
        allocvaluescharnew = lt_valueschar
        allocvaluescurrnew = lt_valuescurr
        return             = lt_return.

    PERFORM add_log TABLES lt_return.
    IF NOT line_exists( lt_return[ type = 'E' ] ).

      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.

      "EAB T76941 28.06.2023 Integración E80: se llama a la función de envio de datos de bobina a E80 una vez se ha pelado la bobina
      CALL FUNCTION 'Z_E80_ENVIO_STOCK_BOBINA'
        EXPORTING
          i_werks          = gv_werks
*         I_CHARG          =
          i_objek          = l_objectkey
          i_par_origen     = '3'
        EXCEPTIONS
          lote_inexistente = 1
          OTHERS           = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.


    ELSE.
      RETURN.
    ENDIF.

    DATA(lv_go) = abap_false.

    PERFORM imprimir_etiqueta USING gv_matnr gv_charg gv_diametro gv_longitud '1040' ' '
                     CHANGING lv_go.

  ELSE.

    MESSAGE 'No se permite esta operación en la ubicación de la bobina' TYPE 'I'.
    PERFORM limpiar_campos.
    RETURN.

  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CAMBIAR_PESO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM cambiar_peso .
*  En primer lugar, confirmar el cambio de peso (¿Desea cambiar el peso de la bobina a XXXXX kg? | Aceptar, Cancelar, y por defecto el foco en la opción Cancelar)
*
*   A continuación, buscar la OF con la que se realizó la fabricación del lote de bobina.
*   Se comparará el nuevo peso introducido con el peso de la bobina.
*
* *   Si el nuevo peso es superior, se realizará una entrada de fabricación (movimiento 101) contra
*       la OF anterior, para el mismo lote de bobina, por la diferencia de peso en el almacén 1040.
* *   Si el nuevo peso es inferior, se realizará una anulación de fabricación (movimiento 102) contra
*       la OF anterior, para el mismo lote de rollo, por la diferencia de peso en el almacén 1040.
*
*Además, a continuación:
*
* *   Actualizar el peso en la característica peso de la bobina (Z_PESO)
* *   Imprimir la etiqueta de bobina.

  DATA: lt_goodsmvt_item   TYPE TABLE OF bapi2017_gm_item_create,
        lt_return          TYPE bapiret2_t,
        ls_goodsmvt_header TYPE bapi2017_gm_head_01,
        ls_goodsmvt_item   TYPE bapi2017_gm_item_create,
        ls_aufm            TYPE aufm,
        lv_gmcode          TYPE bapi2017_gm_code VALUE '02',
        lv_mblnr           TYPE mblnr,
        lv_objectkey       TYPE bapi1003_key-object,
        lv_subrc           TYPE char1,
        lv_msg             TYPE string,
        lv_new_long        LIKE gv_longitud_p,
        lv_gramaje         TYPE zzgramaje,
        lv_ancho           LIKE gv_longitud_p,
        lv_gram_p          LIKE gv_longitud_p,
        lv_ubi_sap         TYPE char30.

* DTM - Variables para tiempos y movimientos de bienes

  DATA: lti_times     TYPE STANDARD TABLE OF bapi_pi_timeticket1,
        lti_goodmov   TYPE TABLE OF bapi2017_gm_item_create WITH HEADER LINE,
        lti_link      TYPE TABLE OF bapi_link_conf_goodsmov WITH HEADER LINE,
        lti_detail    TYPE TABLE OF bapi_coru_return WITH HEADER LINE,
        lti_resb      TYPE TABLE OF resb,
        lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr,
        ls_propose    TYPE bapi_pp_conf_prop,
        ls_ret2       TYPE bapiret1,
        ls_return     TYPE bapiret2,
        ls_return1    TYPE bapiret1,
        ls_times      LIKE LINE OF lti_times,
        lv_gamng      TYPE gamng,
        lv_rsnum      TYPE rsnum,
        lv_peso_p     TYPE zpeso,
        lv_error      TYPE xfeld,
        lv_peso_del   TYPE p DECIMALS 0 VALUE '0',
        lv_peso_not   TYPE p DECIMALS 0 VALUE '0'.

* DTM

  lv_msg = 'El cambio de peso de una bobina implica modificar la producción neta. '&&
  'Únicamente debe realizarse con el consentimiento de producción. ¿Desea cambiar el peso de la bobina a & kg?'.

  DATA(lv_peso_str) = CONV string( gv_nuevo_peso_p ).

  REPLACE '&' INTO lv_msg WITH lv_peso_str.

  PERFORM pop_up USING lv_msg CHANGING lv_subrc.
  IF lv_subrc NE 1.
    RETURN.
  ENDIF.


  IF  gv_nuevo_peso_p EQ 0.

    MESSAGE 'El peso introducido es cero kgs' TYPE 'I'.

    PERFORM limpiar_campos.
    RETURN.

  ENDIF.

  SELECT SINGLE * FROM aufm
    WHERE matnr EQ @gv_matnr
      AND charg EQ @gv_charg
  INTO @ls_aufm.

  IF sy-subrc NE 0.

    MESSAGE 'La bobina no procede de una orden'(004) TYPE 'I'.
    RETURN.

  ENDIF.

  IF gv_peso_p EQ gv_nuevo_peso_p.

    MESSAGE 'El peso introducido es el mismo'(005) TYPE 'I'.
    RETURN.

  ENDIF.

  "INI EAB 10/07/2024
  lv_objectkey = |{ gv_matnr ALPHA = IN }{ gv_charg }|.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_objectkey
      objecttable     = gc_mch1
      classnum        = 'Z_BOBINA'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.

  READ TABLE lt_valueschar INTO DATA(ls_chr) WITH KEY charact = 'Z_UBIC_HPAP'.
  IF sy-subrc EQ 0.
    lv_ubi_sap = ls_chr-value_char.
  ENDIF.

  PERFORM add_log TABLES lt_return.

  IF line_exists( lt_return[ type = 'E' ] ).

    RETURN.

  ENDIF.

  ASSIGN lt_valuesnum[ charact = gc_z_peso ] TO FIELD-SYMBOL(<fs>).

  IF sy-subrc NE 0.

    APPEND VALUE bapi1003_alloc_values_num( charact = gc_z_peso value_to = gv_nuevo_peso_p ) TO lt_valuesnum.

  ELSE.

    <fs>-value_from =  gv_nuevo_peso_p.

  ENDIF.

*  Longitud (m) = [peso (gr) /ancho(m) * gramaje (gr/m2)]

  SELECT SINGLE zzgramaje INTO lv_gramaje FROM mara WHERE matnr = gv_matnr.

  lv_ancho    = gv_ancho.
  lv_gram_p   = lv_gramaje.
  lv_new_long = ( gv_nuevo_peso_p * 1000 ) / ( ( lv_ancho / 1000 ) * lv_gram_p ).

  ASSIGN lt_valuesnum[ charact = gc_z_longitud ] TO FIELD-SYMBOL(<fs_long>).

  IF sy-subrc NE 0.

    APPEND VALUE bapi1003_alloc_values_num( charact = gc_z_longitud value_to = lv_new_long ) TO lt_valuesnum.

  ELSE.

    <fs_long>-value_from = lv_new_long.

  ENDIF.
  "END EAB 10/07/2024

  "T76941 - EAB 07/08/24 - No se permite la operación en caso de ubicación de bobina E80 para Alqueria
  IF gv_werks NE '3000' OR ( gv_werks = '3000' AND ( lv_ubi_sap = '0000' OR lv_ubi_sap >= '9000' ) ).

    DATA(lv_difpeso) = abs( gv_peso_p - gv_nuevo_peso_p ).

    ls_goodsmvt_header-pstng_date = sy-datum  .
    ls_goodsmvt_header-doc_date   = sy-datum .
    ls_goodsmvt_header-header_txt = 'Operaciones con bobinas'(006).
    ls_goodsmvt_item-material     = gv_matnr.
    ls_goodsmvt_item-plant        = gv_werks.
    ls_goodsmvt_item-stge_loc     = gv_lgort.
    ls_goodsmvt_item-batch        = gv_charg.
    ls_goodsmvt_item-move_mat     = gv_matnr.
    ls_goodsmvt_item-entry_qnt    = lv_difpeso.
    ls_goodsmvt_item-entry_uom    = 'KG'.
    ls_goodsmvt_item-orderid      = ls_aufm-aufnr.
    ls_goodsmvt_item-mvt_ind      = 'F'.
    ls_goodsmvt_item-move_plant   = gv_werks.
    ls_goodsmvt_item-move_batch   = gv_charg.
    ls_goodsmvt_item-move_stloc   = gv_lgort.


    IF gv_peso_p LT gv_nuevo_peso_p.
* *   Si el nuevo peso es superior, se realizará una entrada de fabricación (movimiento 101) contra
*       la OF anterior, para el mismo lote de bobina, por la diferencia de peso en el almacén 1040.

      ls_goodsmvt_item-move_type = '101'.

    ELSE.

      ls_goodsmvt_item-move_type = '102'.

    ENDIF.

    APPEND ls_goodsmvt_item TO lt_goodsmvt_item.

    PERFORM crear_log.

    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = ls_goodsmvt_header
        goodsmvt_code    = lv_gmcode
      IMPORTING
        materialdocument = lv_mblnr
      TABLES
        goodsmvt_item    = lt_goodsmvt_item
        return           = lt_return.

    PERFORM add_log TABLES lt_return.

    IF lv_mblnr IS NOT INITIAL.

      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.

    ELSE.

      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      RETURN.

    ENDIF.

    CALL FUNCTION 'BAPI_OBJCL_CHANGE'
      EXPORTING
        objectkey          = lv_objectkey
        objecttable        = gc_mch1
        classnum           = 'Z_BOBINA'
        classtype          = '023'
      TABLES
        allocvaluesnumnew  = lt_valuesnum
        allocvaluescharnew = lt_valueschar
        allocvaluescurrnew = lt_valuescurr
        return             = lt_return.

    PERFORM add_log TABLES lt_return.

    IF NOT line_exists( lt_return[ type = 'E' ] ).

      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = abap_true.

      "EAB T76941 28.06.2023 Integración E80: se llama a la función de envio de datos de bobina a E80 una vez se ha cambiado el peso
      CALL FUNCTION 'Z_E80_ENVIO_STOCK_BOBINA'
        EXPORTING
          i_werks          = gv_werks
*         I_CHARG          =
          i_objek          = lv_objectkey
          i_par_origen     = '3'
        EXCEPTIONS
          lote_inexistente = 1
          OTHERS           = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.


* DTM - Cuando se han sobrepasado los kg. de la OF, la BAPI devuelve activity1 y activity2 (tiempos de MO y Máquina) a blancos.
* Se realiza la llamada con el flag ls_propose-quantity a blancos.

      IF gv_peso_p GT gv_nuevo_peso_p.

* Se eliminan los tiempos necesarios

        CLEAR: lv_peso_del, lv_error.

        PERFORM eliminar_tiempos USING ls_aufm-aufnr gv_peso_p lv_difpeso
                                 CHANGING lv_peso_del lv_error.

        IF lv_error IS NOT INITIAL.

          PERFORM limpiar_campos.

        ENDIF.

        CHECK lv_error IS INITIAL.

        WAIT UP TO 3 SECONDS.

        IF lv_peso_del IS NOT INITIAL.

          lv_peso_not = lv_peso_del - lv_difpeso.

        ENDIF.

      ENDIF.

      CLEAR: ls_propose, ls_ret2.
      ls_propose-goodsmovement = abap_true.
      ls_propose-quantity      = ' '. "No informar cantidad
      ls_propose-activity      = abap_true.
      ls_propose-personnel     = abap_true.

* Se recuperan los datos de la notificación

      CLEAR: ls_return, lti_times[] , ls_times.
      ls_times-orderid        = ls_aufm-aufnr.
      ls_times-phase          = '0020'.
      ls_times-fin_conf       = '1'.
      ls_times-plant          = gv_werks.

      IF gv_peso_p GT gv_nuevo_peso_p.

        IF lv_peso_not IS INITIAL.

          ls_times-yield        = gv_nuevo_peso_p.

        ELSE.

          ls_times-yield        = lv_peso_not.

        ENDIF.

      ELSEIF gv_peso_p LT gv_nuevo_peso_p.

        ls_times-yield        = lv_difpeso.

      ENDIF.

      ls_times-conf_quan_unit = 'KG'.
      ls_times-clear_res      = abap_true.
      INSERT ls_times INTO TABLE lti_times.

* Se recuperan los datos de la BAPI que notifica

      CALL FUNCTION 'BAPI_PROCORDCONF_GET_TT_PROP'
        EXPORTING
          propose            = ls_propose
        IMPORTING
          return             = ls_ret2
        TABLES
          timetickets        = lti_times
          goodsmovements     = lti_goodmov
          link_conf_goodsmov = lti_link.

      IF lti_goodmov IS NOT INITIAL.

        REFRESH: lti_resb. CLEAR: lti_resb.

        " Se recuperan la reserva y la cantidad total para calcular la proporción
        CLEAR: lv_gamng, lv_rsnum.

        SELECT SINGLE gamng rsnum INTO (lv_gamng, lv_rsnum)
          FROM caufv
          WHERE aufnr = ls_aufm-aufnr.

        IF sy-subrc EQ 0.

          SELECT * INTO CORRESPONDING FIELDS OF TABLE lti_resb
            FROM resb
            WHERE rsnum = lv_rsnum
              AND rgekz = abap_true.

          LOOP AT lti_goodmov.

            READ TABLE lti_resb ASSIGNING FIELD-SYMBOL(<lfs_resb>) WITH KEY rsnum = lti_goodmov-reserv_no
                                                                            rspos = lti_goodmov-res_item
                                                                            matnr = lti_goodmov-material
                                                                            werks = lti_goodmov-plant.

            IF <lfs_resb> IS NOT INITIAL.

              lti_goodmov-entry_qnt = ( <lfs_resb>-bdmng * gv_peso_p ) / lv_gamng.
              MODIFY lti_goodmov.

            ENDIF.

          ENDLOOP.

        ENDIF.

      ENDIF.

      CALL FUNCTION 'BAPI_PROCORDCONF_CREATE_TT'
        IMPORTING
          return             = ls_return1
        TABLES
          timetickets        = lti_times
          goodsmovements     = lti_goodmov
          link_conf_goodsmov = lti_link
          detail_return      = lti_detail.

      READ TABLE lti_detail ASSIGNING FIELD-SYMBOL(<lfs_return>) WITH KEY type = 'E'.

      IF sy-subrc EQ 0.

        APPEND INITIAL LINE TO lt_return ASSIGNING FIELD-SYMBOL(<lfs_return1>).

        MOVE-CORRESPONDING <lfs_return> TO <lfs_return1>.

        PERFORM add_log TABLES lt_return.
        RETURN.

      ELSE.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = abap_true.

        MESSAGE |Cambio de peso realizado.| TYPE 'I'.

      ENDIF.

* DTM

    ELSE.

      RETURN.

    ENDIF.

    DATA(lv_go) = abap_false.

    PERFORM imprimir_etiqueta USING gv_matnr gv_charg gv_diametro gv_longitud '1040' ' '
                           CHANGING lv_go.

    PERFORM limpiar_campos. "DTM

  ELSE.

    MESSAGE 'No se permite esta operación en la ubicación de la bobina' TYPE 'I'.
    PERFORM limpiar_campos.
    RETURN.

  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_TIEMPOS
*&---------------------------------------------------------------------*
*       Eliminación de tiempos
*----------------------------------------------------------------------*
*       Autor: David Temprado Fecha: 09/03/2022
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_SEL_AUFNR  text
*      -->P_WA_DATOS_SEL_MENGE  text
*      <--P_LV_ERROR  text
FORM eliminar_tiempos  USING    p_aufnr
                                p_menge
                                p_del
                       CHANGING peso_del error.

* Las notificaciones de los tiempos en las 2 operaciones, pulper y en máquina,
* en este caso hay que eliminar la notificación de la operación 0040, ya que
* va concatenada con la 0020
* Con la bapi BAPI_PROCORDCONF_GETDETAIL, se mira la phase = 0040 y REVERSED = ‘’.
* Si cumple esta condición, se elimina la notificación de tiempos.

  DATA: lt_order_range    TYPE TABLE OF bapi_pi_orderrange,
        lt_return_1       TYPE TABLE OF bapiret1,
        lt_confirmations  TYPE TABLE OF bapi_pi_conf_key,
        lt_goodsmovements TYPE TABLE OF bapi2017_gm_item_show,
        lt_failedgmoves   TYPE TABLE OF bapi_coru_fgm,
        lt_messages       LIKE bapiret2 OCCURS 0,
        ls_confirmations  TYPE          bapi_pi_conf_key,
        ls_return         TYPE          bapiret1,
        ls_order_range    TYPE          bapi_pi_orderrange,
        ls_return_1       TYPE bapiret1,
        ls_detail         TYPE bapi_pi_confirm,
        ls_messages       TYPE bapiret2,
        lv_postg_date     TYPE bapi_pi_confirm-postg_date,
        lv_extnumber      TYPE balnrext,
        lv_eliminado      TYPE flag. "DTM


  CLEAR: lt_order_range[],lt_confirmations[], ls_order_range, ls_return, lv_eliminado.
  CLEAR: lt_messages[], lv_extnumber.

* obtenemos las notificaciones de tiempo
  ls_order_range-sign   = 'I'.
  ls_order_range-option = 'EQ'.
  ls_order_range-low    = p_aufnr.
  APPEND ls_order_range TO lt_order_range.

  CALL FUNCTION 'BAPI_PROCORDCONF_GETLIST'
    IMPORTING
      return        = ls_return
    TABLES
      order_range   = lt_order_range
      confirmations = lt_confirmations.

  SORT lt_confirmations BY created_date DESCENDING.

* Se borran las notificaciones de tiempos

* CMS - 17.07.2020 - 62097 - Corregir error al anular 2º rollo con el mismo peso.
* Se añade al LOOP la condición rev_conf_cnt = 0, para encontrar el registro pendiente de anular.
  LOOP AT lt_confirmations INTO ls_confirmations WHERE reversed     = '' AND
                                                       rev_conf_cnt = 0  AND
                                                       phase        = '0020'.

    CLEAR: ls_return_1, ls_detail, lt_goodsmovements[], lt_failedgmoves[].

    CALL FUNCTION 'BAPI_PROCORDCONF_GETDETAIL'
      EXPORTING
        confirmation        = ls_confirmations-conf_no
        confirmationcounter = ls_confirmations-conf_cnt
      IMPORTING
        return              = ls_return_1
        conf_detail         = ls_detail
      TABLES
        goodsmovements      = lt_goodsmovements
        failedgmoves        = lt_failedgmoves.

    CHECK ls_detail-yield = p_menge.

* Sólo se elimina la notificación si tiene fecha válida, sino no hace nada
    IF ls_confirmations-created_date+4(2) NE sy-datum+4(2)
       AND ls_confirmations-created_date(4) NE sy-datum(4).

      error = abap_true.
      lv_eliminado = abap_true.
      EXIT.

    ELSE.

      CLEAR: ls_return_1.

      CALL FUNCTION 'BAPI_PROCORDCONF_CANCEL'
        EXPORTING
          confirmation        = ls_confirmations-conf_no
          confirmationcounter = ls_confirmations-conf_cnt
          postg_date          = sy-datum
        IMPORTING
          return              = ls_return_1.

      IF ls_return_1-type NE 'E'.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = abap_true.

        lv_eliminado = abap_true. "DTM

        EXIT.

      ELSE.

        error = abap_true.

        MOVE-CORRESPONDING ls_return_1 TO ls_messages.
        APPEND ls_messages TO lt_messages.

        CLEAR: lv_extnumber.

        CONCATENATE 'Notif.Tiempo' ls_confirmations-conf_no ls_confirmations-conf_cnt
          INTO lv_extnumber SEPARATED BY space.

        CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
          EXPORTING
            objeto    = 'ZPP'
            subobjeto = sy-tcode
            mensajes  = lt_messages[]
            extnumber = lv_extnumber.

      ENDIF.

    ENDIF.

  ENDLOOP.

* Si no se ha encontrado la notificación a eliminar
  IF lv_eliminado IS INITIAL.

* Se busca una notificación mayor al peso a eliminar
    LOOP AT lt_confirmations INTO ls_confirmations WHERE reversed     = '' AND
                                                         rev_conf_cnt = 0  AND
                                                         phase        = '0020'.

      CLEAR: ls_return_1, ls_detail, lt_goodsmovements[], lt_failedgmoves[].

      CALL FUNCTION 'BAPI_PROCORDCONF_GETDETAIL'
        EXPORTING
          confirmation        = ls_confirmations-conf_no
          confirmationcounter = ls_confirmations-conf_cnt
        IMPORTING
          return              = ls_return_1
          conf_detail         = ls_detail
        TABLES
          goodsmovements      = lt_goodsmovements
          failedgmoves        = lt_failedgmoves.

      CHECK ls_detail-yield GT p_del.

* Sólo se elimina la notificación si tiene fecha válida, sino no hace nada
      IF ls_confirmations-created_date+4(2) NE sy-datum+4(2)
         AND ls_confirmations-created_date(4) NE sy-datum(4).

        error = abap_true.
        EXIT.

      ELSE.

        CLEAR: ls_return_1.

        CALL FUNCTION 'BAPI_PROCORDCONF_CANCEL'
          EXPORTING
            confirmation        = ls_confirmations-conf_no
            confirmationcounter = ls_confirmations-conf_cnt
            postg_date          = sy-datum
          IMPORTING
            return              = ls_return_1.

        IF ls_return_1-type NE 'E'.

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = abap_true.

          peso_del = ls_detail-yield.

          EXIT.

        ELSE.

          error = abap_true.

          MOVE-CORRESPONDING ls_return_1 TO ls_messages.
          APPEND ls_messages TO lt_messages.

          CLEAR: lv_extnumber.

          CONCATENATE 'Notif.Tiempo' ls_confirmations-conf_no ls_confirmations-conf_cnt
            INTO lv_extnumber SEPARATED BY space.

          CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
            EXPORTING
              objeto    = 'ZPP'
              subobjeto = sy-tcode
              mensajes  = lt_messages[]
              extnumber = lv_extnumber.

        ENDIF.

      ENDIF.

    ENDLOOP.

  ENDIF.

ENDFORM.                    " ELIMINAR_TIEMPOS
