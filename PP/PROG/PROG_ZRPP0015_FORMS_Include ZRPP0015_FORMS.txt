*&---------------------------------------------------------------------*
*&  Include           ZRPP0015_FORMS
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  SELECCIONA_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM selecciona_datos .
  DATA lt_aufm TYPE STANDARD TABLE OF aufm.
  DATA lw_aufm TYPE aufm.
  DATA lw_datos TYPE zepp_fab_bobina_alv.
  DATA lw_datos_aux TYPE zepp_fab_bobina_alv.
  DATA l_tabix TYPE sy-tabix.
  DATA l_campo(20) TYPE c.
  FIELD-SYMBOLS <fmenge>.
  DATA l_menge TYPE menge_d.
  DATA l_monat TYPE monat.
  DATA l_total TYPE menge_d.

  SELECT * INTO TABLE lt_aufm FROM aufm
    WHERE matnr IN smatnr
      AND budat IN sbudat
      AND werks = pwerks
      AND bwart IN ('101','102', '701', '702' ).

  LOOP AT lt_aufm INTO lw_aufm.
    CLEAR lw_datos.

    SELECT SINGLE matkl zzgramaje zzancho INTO (lw_datos-matkl, lw_datos-zzgramaje, lw_datos-zzancho) FROM mara
      WHERE matnr = lw_aufm-matnr.

    CHECK lw_datos-zzgramaje IN sgrama.
    CHECK lw_datos-zzancho IN sancho.
    CHECK lw_datos-matkl IN smatkl.

    l_menge = lw_aufm-menge.
    IF lw_aufm-bwart = '102'
    OR lw_aufm-bwart = '702'.
      l_menge = l_menge * -1.
    ENDIF.

    lw_datos-meins = lw_aufm-meins.
    lw_datos-werks = lw_aufm-werks.

    SELECT SINGLE zzkunnr1 INTO lw_datos-kunnr FROM aufk WHERE aufnr = lw_aufm-aufnr.
    CHECK lw_datos-kunnr IN skunnr.

    SELECT SINGLE name1 INTO lw_datos-name1 FROM kna1 WHERE kunnr = lw_datos-kunnr.

    l_monat = lw_aufm-budat+4(2).
    CONCATENATE 'MENGE' l_monat INTO l_campo.
    ASSIGN COMPONENT l_campo OF STRUCTURE lw_datos TO <fmenge>.
    IF sy-subrc = 0.
      <fmenge> = l_menge.
      lw_datos-total = l_menge.
    ENDIF.

    READ TABLE gt_datos INTO lw_datos_aux WITH KEY kunnr = lw_datos-kunnr
                                                   matkl = lw_datos-matkl
                                                   zzgramaje = lw_datos-zzgramaje
                                                   zzancho = lw_datos-zzancho.
    IF sy-subrc <> 0.
      APPEND lw_datos TO gt_datos.
    ELSE.
      l_tabix = sy-tabix.
      ADD lw_datos_aux-menge01 TO lw_datos-menge01.
      ADD lw_datos_aux-menge02 TO lw_datos-menge02.
      ADD lw_datos_aux-menge03 TO lw_datos-menge03.
      ADD lw_datos_aux-menge04 TO lw_datos-menge04.
      ADD lw_datos_aux-menge05 TO lw_datos-menge05.
      ADD lw_datos_aux-menge06 TO lw_datos-menge06.
      ADD lw_datos_aux-menge07 TO lw_datos-menge07.
      ADD lw_datos_aux-menge08 TO lw_datos-menge08.
      ADD lw_datos_aux-menge09 TO lw_datos-menge09.
      ADD lw_datos_aux-menge10 TO lw_datos-menge10.
      ADD lw_datos_aux-menge11 TO lw_datos-menge11.
      ADD lw_datos_aux-menge12 TO lw_datos-menge12.
      ADD lw_datos_aux-total TO lw_datos-total.

      MODIFY gt_datos FROM lw_datos INDEX l_tabix.
    ENDIF.

  ENDLOOP.

  SORT gt_datos BY kunnr matkl.
  LOOP AT gt_datos INTO lw_datos.
    AT LAST.
      SUM.
      l_total = lw_datos-total.
    ENDAT.
  ENDLOOP.

  CHECK l_total <> 0.

  LOOP AT gt_datos INTO lw_datos.
    lw_datos-porct_prod = lw_datos-total * 100 / l_total.
    MODIFY gt_datos FROM lw_datos.
  ENDLOOP.

ENDFORM.                    " SELECCIONA_DATOS
*&---------------------------------------------------------------------*
*&      Form  OBTENER_HORA_LOTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LW_DATOS_MATNR  text
*      -->P_LW_DATOS_CHARG  text
*      <--P_LW_DATOS_CPUTM  text
*----------------------------------------------------------------------*
FORM obtener_hora_lote  USING    p_matnr TYPE matnr
                                 p_charg TYPE charg_d
                        CHANGING p_cputm TYPE cputm.
  DATA l_werks TYPE werks_d.
  DATA l_objectid TYPE cdhdr-objectid.
  DATA lw_cdhdr TYPE cdhdr.
  DATA lw_cdpos TYPE cdpos.

  CONCATENATE p_matnr l_werks p_charg INTO l_objectid.  "El centro está intencionadamente en blanco.

  SELECT * FROM cdhdr INTO lw_cdhdr
    WHERE objectclas = 'CHARGE'
      AND objectid = l_objectid.

    SELECT SINGLE * FROM cdpos INTO lw_cdpos
      WHERE objectclas = lw_cdhdr-objectclas
        AND objectid   = lw_cdhdr-objectid
        AND changenr   = lw_cdhdr-changenr
        AND fname      = 'KEY'
        AND chngind    = 'I'
        AND tabname   = 'MCHX'.
    CHECK sy-subrc = 0.

    p_cputm = lw_cdhdr-utime.
    EXIT.
  ENDSELECT.


ENDFORM.                    " OBTENER_HORA_LOTE
*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_CLASIF_LOTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM actualizar_clasif_lote USING    p_aufnr TYPE aufnr
                            CHANGING p_kunnr TYPE kunnr.

*  DATA l_objkey TYPE objnum.
*  DATA lt_allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num WITH HEADER LINE.
*  DATA lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char WITH HEADER LINE.
*  DATA lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr WITH HEADER LINE.
*  DATA lt_return TYPE STANDARD TABLE OF bapiret2.
*
*  CONCATENATE pw_datos-matnr pw_datos-charg INTO l_objkey.
*
*  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
*    EXPORTING
*      objectkey       = l_objkey
*      objecttable     = 'MCH1'
*      classnum        = 'Z_ROLLO'
*      classtype       = '023'
*    TABLES
*      allocvaluesnum  = lt_allocvaluesnum
*      allocvalueschar = lt_allocvalueschar
*      allocvaluescurr = lt_allocvaluescurr
*      return          = lt_return.
*
*  READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
*  CHECK sy-subrc <> 0.
*
*  READ TABLE lt_allocvalueschar WITH KEY charact = 'ZPPI_CLIENTE'.
*  IF sy-subrc = 0.
*    pw_datos-kunnr = lt_allocvalueschar-value_char.
*  ENDIF.
*
*  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*    EXPORTING
*      input  = pw_datos-kunnr
*    IMPORTING
*      output = pw_datos-kunnr.



ENDFORM.                    " ACTUALIZAR_CLASIF_LOTE
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_RESULTADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_resultados .
  DATA ct_fieldcat TYPE slis_t_fieldcat_alv.
  DATA lw_fcat TYPE slis_fieldcat_alv.
  DATA lw_layo TYPE slis_layout_alv .
  DATA lw_variant TYPE disvariant.
  DATA lw_sort TYPE slis_sortinfo_alv.
  DATA lw_event TYPE slis_alv_event.

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZEPP_FAB_BOBINA_ALV'
    CHANGING
      ct_fieldcat      = ct_fieldcat.

  LOOP AT ct_fieldcat INTO lw_fcat.
    lw_fcat-ddictxt = 'M'.

    CASE lw_fcat-fieldname.
      WHEN 'KUNNR'.
        lw_fcat-key = si.
      WHEN 'NAME1'.
        lw_fcat-key = si.
      WHEN 'MATKL'.
        lw_fcat-key = si.
      WHEN 'ZZGRAMAJE'.
        lw_fcat-key = si.
      WHEN 'ZZANCHO'.
        lw_fcat-key = si.
      WHEN 'PORCT_PROD'.
        lw_fcat-emphasize = si.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l14.
        lw_fcat-do_sum = si.
      WHEN 'MENGE01'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l01.
        lw_fcat-do_sum = si.
      WHEN 'MENGE02'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l02.
        lw_fcat-do_sum = si.
      WHEN 'MENGE03'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l03.
        lw_fcat-do_sum = si.
      WHEN 'MENGE04'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l04.
        lw_fcat-do_sum = si.
      WHEN 'MENGE05'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l05.
        lw_fcat-do_sum = si.
      WHEN 'MENGE06'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l06.
        lw_fcat-do_sum = si.
      WHEN 'MENGE07'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l07.
        lw_fcat-do_sum = si.
      WHEN 'MENGE08'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l08.
        lw_fcat-do_sum = si.
      WHEN 'MENGE09'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l09.
        lw_fcat-do_sum = si.
      WHEN 'MENGE10'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l10.
        lw_fcat-do_sum = si.
      WHEN 'MENGE11'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l11.
        lw_fcat-do_sum = si.
      WHEN 'MENGE12'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l12.
        lw_fcat-do_sum = si.
      WHEN 'TOTAL'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-l13.
        lw_fcat-do_sum = si.
      WHEN 'GRAMAJE01'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g01.
      WHEN 'ANCHO01'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a01.
      WHEN 'GRAMAJE02'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g02.
      WHEN 'ANCHO02'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a02.
      WHEN 'GRAMAJE03'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g03.
      WHEN 'ANCHO03'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a03.
      WHEN 'GRAMAJE04'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g04.
      WHEN 'ANCHO04'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a04.
      WHEN 'GRAMAJE05'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g05.
      WHEN 'ANCHO05'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a05.
      WHEN 'GRAMAJE06'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g06.
      WHEN 'ANCHO06'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a06.
      WHEN 'GRAMAJE07'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g07.
      WHEN 'ANCHO07'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a07.
      WHEN 'GRAMAJE08'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g08.
      WHEN 'ANCHO08'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a08.
      WHEN 'GRAMAJE09'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g09.
      WHEN 'ANCHO09'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a09.
      WHEN 'GRAMAJE10'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g10.
      WHEN 'ANCHO10'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a10.
      WHEN 'GRAMAJE11'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g11.
      WHEN 'ANCHO11'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a11.
      WHEN 'GRAMAJE12'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-g12.
      WHEN 'ANCHO12'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-a12.
      WHEN 'MENGE_T1'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t01.
        lw_fcat-do_sum = si.
      WHEN 'MENGE_T2'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t02.
        lw_fcat-do_sum = si.
      WHEN 'MENGE_T3'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t03.
        lw_fcat-do_sum = si.
      WHEN 'ANCHO_T1'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t04.
      WHEN 'ANCHO_T2'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t05.
      WHEN 'ANCHO_T3'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t06.
      WHEN 'ANCHO_T'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t07.
      WHEN 'GRAM_T1'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t12.
      WHEN 'GRAM_T2'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t13.
      WHEN 'GRAM_T3'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t14.
      WHEN 'GRAM_T'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t15.
      WHEN 'ANCHO_T1_TOT'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t08.
      WHEN 'ANCHO_T2_TOT'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t09.
      WHEN 'ANCHO_T3_TOT'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t10.
      WHEN 'ANCHO_T_TOT'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t11.
      WHEN 'GRAM_T1_TOT'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t16.
      WHEN 'GRAM_T2_TOT'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t17.
      WHEN 'GRAM_T3_TOT'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t18.
      WHEN 'GRAM_T_TOT'.
        lw_fcat-seltext_s = lw_fcat-seltext_l = lw_fcat-seltext_m = text-t19.
      WHEN OTHERS.
    ENDCASE.
    MODIFY ct_fieldcat FROM lw_fcat.
  ENDLOOP.

  lw_sort-spos = '01'.
  lw_sort-fieldname = 'KUNNR'.
  lw_sort-tabname = 'ZEPP_FAB_BOBINA_ALV'.
  lw_sort-up = si.
  lw_sort-subtot = si.
  APPEND lw_sort TO lt_sort.

  lw_sort-spos = '02'.
  lw_sort-fieldname = 'MATKL'.
  lw_sort-tabname = 'ZEPP_FAB_BOBINA_ALV'.
  lw_sort-up = si.
  lw_sort-subtot = si.
  APPEND lw_sort TO lt_sort.

  lw_sort-spos = '03'.
  lw_sort-fieldname = 'ZZGRAMAJE'.
  lw_sort-tabname = 'ZEPP_FAB_BOBINA_ALV'.
  lw_sort-up = si.
  lw_sort-subtot = si.
  APPEND lw_sort TO lt_sort.

  CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
    EXPORTING
      i_list_type     = 4
    IMPORTING
      et_events       = lt_event
    EXCEPTIONS
      list_type_wrong = 0
      OTHERS          = 0.

  READ TABLE lt_event  INTO lw_event WITH KEY name = slis_ev_subtotal_text.
  IF sy-subrc = 0.
    MOVE 'SUBTOTAL_TEXT' TO lw_event-form.
    MODIFY lt_event FROM lw_event INDEX sy-tabix.
  ENDIF.

  lw_layo-zebra = si.
  lw_variant-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
*     I_INTERFACE_CHECK  = ' '
*     I_BYPASSING_BUFFER = ' '
*     I_BUFFER_ACTIVE    = ' '
      i_callback_program = lw_variant-report
*     I_CALLBACK_PF_STATUS_SET          = ' '
*     I_CALLBACK_USER_COMMAND           = ' '
*     I_CALLBACK_TOP_OF_PAGE            = ' '
*     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*     I_CALLBACK_HTML_END_OF_LIST       = ' '
*     I_STRUCTURE_NAME   = I_STRUCTURE_NAME
*     I_BACKGROUND_ID    = ' '
*     I_GRID_TITLE       = I_GRID_TITLE
*     I_GRID_SETTINGS    = I_GRID_SETTINGS
*     IS_LAYOUT          = IS_LAYOUT
      it_fieldcat        = ct_fieldcat
*     IT_EXCLUDING       = IT_EXCLUDING
*     IT_SPECIAL_GROUPS  = IT_SPECIAL_GROUPS
      it_sort            = lt_sort
*     IT_FILTER          = IT_FILTER
*     IS_SEL_HIDE        = IS_SEL_HIDE
*     I_DEFAULT          = 'X'
      i_save             = 'A'
      is_variant         = lw_variant
      it_events          = lt_event
*     IT_EVENT_EXIT      = IT_EVENT_EXIT
*     IS_PRINT           = IS_PRINT
*     IS_REPREP_ID       = IS_REPREP_ID
*     I_SCREEN_START_COLUMN             = 0
*     I_SCREEN_START_LINE               = 0
*     I_SCREEN_END_COLUMN               = 0
*     I_SCREEN_END_LINE  = 0
*     I_HTML_HEIGHT_TOP  = 0
*     I_HTML_HEIGHT_END  = 0
*     IT_ALV_GRAPHICS    = IT_ALV_GRAPHICS
*     IT_HYPERLINK       = IT_HYPERLINK
*     IT_ADD_FIELDCAT    = IT_ADD_FIELDCAT
*     IT_EXCEPT_QINFO    = IT_EXCEPT_QINFO
*     IR_SALV_FULLSCREEN_ADAPTER        = IR_SALV_FULLSCREEN_ADAPTER
* IMPORTING
*     E_EXIT_CAUSED_BY_CALLER           = E_EXIT_CAUSED_BY_CALLER
*     ES_EXIT_CAUSED_BY_USER            = ES_EXIT_CAUSED_BY_USER
    TABLES
      t_outtab           = gt_datos
* EXCEPTIONS
*     PROGRAM_ERROR      = 1
*     OTHERS             = 2
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

*  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
*    EXPORTING
*      i_callback_program = sy-repid
*      it_fieldcat        = ct_fieldcat
*      is_variant         = lw_variant
*      it_sort            = lt_sort
*      i_save             = 'A'
*      it_events          = lt_event
*    TABLES
*      t_outtab           = gt_datos.

ENDFORM.                    " MOSTRAR_RESULTADOS
*&---------------------------------------------------------------------*
*&      Form  BUSCAR_VARIANTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_PVARI  text
*----------------------------------------------------------------------*
FORM buscar_variante  CHANGING p_vari TYPE disvariant-variant.

  DATA: ls_variant TYPE disvariant,
        l_exit     TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
*     it_default_fieldcat =
    IMPORTING
      e_exit     = l_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 2.
  IF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    IF l_exit EQ space.
      p_vari = ls_variant-variant.
    ENDIF.
  ENDIF.


ENDFORM.                    " BUSCAR_VARIANTE
*&---------------------------------------------------------------------*
*&      Form  subtotal_text
*&---------------------------------------------------------------------*
*       Build subtotal text
*----------------------------------------------------------------------*
*       P_total  Total
*       p_subtot_text Subtotal text info
*----------------------------------------------------------------------*
FORM subtotal_text CHANGING p_total TYPE any
                            p_subtot_text TYPE slis_subtot_text.

  IF p_subtot_text-criteria = 'KUNNR'.
    p_subtot_text-display_text_for_subtotal = 'Total Cliente'.
  ENDIF.

  IF p_subtot_text-criteria = 'MATKL'.
    p_subtot_text-display_text_for_subtotal = 'Total Calidad'.
  ENDIF.

  IF p_subtot_text-criteria = 'ZZGRAMAJE'.
    p_subtot_text-display_text_for_subtotal = 'Total Gramaje'.
  ENDIF.

ENDFORM.                    "subtotal_text
*&---------------------------------------------------------------------*
*&      Form  SELEC_TURNOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM selec_turnos .

  DATA: ls_h_t1 LIKE LINE OF so_h_t1,
        ls_h_t2 LIKE LINE OF so_h_t2,
        ls_h_t3 LIKE LINE OF so_h_t3.

  CLEAR: ls_h_t1, ls_h_t2, ls_h_t3.

* Turno 1:
  IF p_t1 = 'X'.
    CLEAR ls_h_t1.
    ls_h_t1-sign = 'I'.
    ls_h_t1-option = 'BT'.
    ls_h_t1-low = '060000'.
    ls_h_t1-high = '135959'.
    APPEND ls_h_t1 TO so_h_t1.
  ENDIF.

* Turno 2:
  IF p_t2 = 'X'.
    CLEAR ls_h_t2.
    ls_h_t2-sign = 'I'.
    ls_h_t2-option = 'BT'.
    ls_h_t2-low = '140000'.
    ls_h_t2-high = '215959'.
    APPEND ls_h_t2 TO so_h_t2.
  ENDIF.

* Turno 3:
* Vemos si el día inicial y final es el mismo:
  IF p_t3 = 'X'.
    IF sbudat-option = 'EQ'.

      gv_d_t3_ini = sbudat-low.
      gv_d_t3_fin = sbudat-low + 1.

      CLEAR ls_h_t3.
      ls_h_t3-sign = 'I'.
      ls_h_t3-option = 'BT'.
      ls_h_t3-low = '220000'.
      ls_h_t3-high = '235959'.
      APPEND ls_h_t3 TO so_h_t3_ini.

      CLEAR ls_h_t3.
      ls_h_t3-sign = 'I'.
      ls_h_t3-option = 'BT'.
      ls_h_t3-low = '000000'.
      ls_h_t3-high = '055959'.
      APPEND ls_h_t3 TO so_h_t3_fin.

    ELSEIF sbudat-option = 'BT'.

      IF sbudat-low = sbudat-high.

        gv_d_t3_ini = sbudat-low.
        gv_d_t3_fin = sbudat-low + 1.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '220000'.
        ls_h_t3-high = '235959'.
        APPEND ls_h_t3 TO so_h_t3_ini.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '000000'.
        ls_h_t3-high = '055959'.
        APPEND ls_h_t3 TO so_h_t3_fin.

      ELSE.

        gv_d_t3_ini = sbudat-low.
        gv_d_t3_fin = sbudat-high + 1.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '220000'.
        ls_h_t3-high = '235959'.
        APPEND ls_h_t3 TO so_h_t3_ini.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '000000'.
        ls_h_t3-high = '055959'.
        APPEND ls_h_t3 TO so_h_t3_fin.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '000000'.
        ls_h_t3-high = '055959'.
        APPEND ls_h_t3 TO so_h_t3.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '220000'.
        ls_h_t3-high = '235959'.
        APPEND ls_h_t3 TO so_h_t3.

      ENDIF.

    ENDIF.
  ENDIF.

ENDFORM.                    " SELEC_TURNOS
*&---------------------------------------------------------------------*
*&      Form  SEL_DATOS_TURNOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sel_datos_turnos .
  DATA lt_aufm TYPE STANDARD TABLE OF aufm.
  DATA lw_aufm TYPE aufm.
  DATA lw_datos TYPE zepp_fab_bobina_alv.
  DATA lw_datos_aux TYPE zepp_fab_bobina_alv.
  DATA l_tabix TYPE sy-tabix.
  DATA l_campo(20) TYPE c.
  FIELD-SYMBOLS <fmenge>.
  DATA l_menge TYPE menge_d.
  DATA l_monat TYPE monat.
  DATA l_total TYPE menge_d.

* GST - 15/01/2016 - Ticket 8978 ->
  DATA: lv_cpudt TYPE cpudt,
        lv_cputm TYPE cputm,
        lv_turno TYPE zturno.
* GST - 15/01/2016 - Ticket 8978 <-

  CLEAR: lt_aufm.
  REFRESH: lt_aufm.

  IF p_t1 = 'X'.

    SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
      FROM aufm AS a
      INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                                AND b~mjahr = a~mjahr )
      WHERE a~matnr IN smatnr
        AND a~budat IN sbudat
        AND a~werks = pwerks
        AND a~bwart IN ('101','102', '701', '702')
        AND b~cputm IN so_h_t1.

  ENDIF.


  IF p_t2 = 'X'.

    SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
      FROM aufm AS a
      INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                                AND b~mjahr = a~mjahr )
      WHERE a~matnr IN smatnr
        AND a~budat IN sbudat
        AND a~werks = pwerks
        AND a~bwart IN ('101','102', '701', '702')
        AND b~cputm IN so_h_t2.

  ENDIF.

  IF p_t3 = 'X'.

    IF so_h_t3[] IS INITIAL.

      SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
        FROM aufm AS a
        INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                                  AND b~mjahr = a~mjahr )
        WHERE a~matnr IN smatnr
          AND a~werks = pwerks
          AND a~bwart IN ('101','102', '701', '702')
          AND ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR
              ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) ).

    ELSE.

      SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
        FROM aufm AS a
        INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                                  AND b~mjahr = a~mjahr )
        WHERE a~matnr IN smatnr
          AND a~werks = pwerks
          AND a~bwart IN ('101','102', '701', '702')
          AND ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR
              ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) OR
              ( a~budat <> gv_d_t3_ini AND a~budat <> gv_d_t3_fin AND
                a~budat IN sbudat AND b~cputm IN so_h_t3 ) ).

    ENDIF.

  ENDIF.
  PERFORM sacar_mov_inve TABLES lt_aufm.
  LOOP AT lt_aufm INTO lw_aufm.
    CLEAR lw_datos.

    SELECT SINGLE matkl zzgramaje zzancho mtart
      INTO (lw_datos-matkl, lw_datos-zzgramaje, lw_datos-zzancho, lw_datos-mtart)
      FROM mara
      WHERE matnr = lw_aufm-matnr.

* GST - 15/01/2015 - Ticket 8978 ->
* Turno:
    CLEAR: lv_cpudt, lv_cputm, lv_turno.
    SELECT SINGLE cpudt cputm INTO (lv_cpudt, lv_cputm)
      FROM mkpf
      WHERE mblnr = lw_aufm-mblnr
      AND mjahr = lw_aufm-mjahr.

    IF ( lv_cputm >= '060000' AND lv_cputm <= '135959' ).
      lv_turno = 'T1'.
    ELSEIF ( lv_cputm >= '140000' AND lv_cputm <= '215959' ).
      lv_turno = 'T2'.
    ELSEIF ( lv_cputm >= '220000' AND lv_cputm <= '235959' ).
      lv_turno = 'T3'.
    ELSE.
      lv_turno = 'T3'.
    ENDIF.

* GST - 15/01/2016 - Ticket 8978 <-

    CHECK lw_datos-zzgramaje IN sgrama.
    CHECK lw_datos-zzancho IN sancho.
    CHECK lw_datos-matkl IN smatkl.
    CHECK lw_datos-mtart IN smtart.

* GST - 18/01/2016 - Ticket 8978 ->
    IF lv_turno = 'T1' AND p_t1 <> 'X'.
      CONTINUE.
    ELSEIF lv_turno = 'T2' AND p_t2 <> 'X'.
      CONTINUE.
    ELSEIF lv_turno = 'T3' AND p_t3 <> 'X'.
      CONTINUE.
    ENDIF.
* GST - 18/01/2016 - Ticket 8978 <-


    l_menge = lw_aufm-menge.
    IF lw_aufm-bwart = '102'
    OR lw_aufm-bwart = '702'.
      l_menge = l_menge * -1.
    ENDIF.

    lw_datos-meins = lw_aufm-meins.
    lw_datos-werks = lw_aufm-werks.

    SELECT SINGLE zzkunnr1 INTO lw_datos-kunnr FROM aufk WHERE aufnr = lw_aufm-aufnr.
    CHECK lw_datos-kunnr IN skunnr.

    SELECT SINGLE name1 INTO lw_datos-name1 FROM kna1 WHERE kunnr = lw_datos-kunnr.

    l_monat = lw_aufm-budat+4(2).
    CONCATENATE 'MENGE' l_monat INTO l_campo.
    ASSIGN COMPONENT l_campo OF STRUCTURE lw_datos TO <fmenge>.
    IF sy-subrc = 0.
      <fmenge> = l_menge.
      lw_datos-total = l_menge.
    ENDIF.

    READ TABLE gt_datos INTO lw_datos_aux WITH KEY kunnr = lw_datos-kunnr
                                                   matkl = lw_datos-matkl
                                                   zzgramaje = lw_datos-zzgramaje
                                                   zzancho = lw_datos-zzancho.

    IF sy-subrc <> 0.

* GST - 18/01/2016 - Ticket 8978 ->
      PERFORM total_turno USING lv_turno
                                l_menge
                          CHANGING lw_datos.
* GST - 18/01/2016 - Ticket 8978 <-
      PERFORM total_mes USING lw_datos.
      APPEND lw_datos TO gt_datos.
    ELSE.
      l_tabix = sy-tabix.
* GST - 18/01/2016 - Ticket 8978 ->
      PERFORM total_turno USING lv_turno
                                l_menge
                          CHANGING lw_datos.
* GST - 18/01/2016 - Ticket 8978 <-
      PERFORM total_mes USING lw_datos.
      ADD lw_datos_aux-menge01 TO lw_datos-menge01.
      ADD lw_datos_aux-menge02 TO lw_datos-menge02.
      ADD lw_datos_aux-menge03 TO lw_datos-menge03.
      ADD lw_datos_aux-menge04 TO lw_datos-menge04.
      ADD lw_datos_aux-menge05 TO lw_datos-menge05.
      ADD lw_datos_aux-menge06 TO lw_datos-menge06.
      ADD lw_datos_aux-menge07 TO lw_datos-menge07.
      ADD lw_datos_aux-menge08 TO lw_datos-menge08.
      ADD lw_datos_aux-menge09 TO lw_datos-menge09.
      ADD lw_datos_aux-menge10 TO lw_datos-menge10.
      ADD lw_datos_aux-menge11 TO lw_datos-menge11.
      ADD lw_datos_aux-menge12 TO lw_datos-menge12.
      ADD lw_datos_aux-total TO lw_datos-total.

* GST - 18/01/2016 - Ticket 8978 ->
     ADD lw_datos_aux-menge_t1 TO lw_datos-menge_t1.
     ADD lw_datos_aux-menge_t2 TO lw_datos-menge_t2.
     ADD lw_datos_aux-menge_t3 TO lw_datos-menge_t3.
* GST - 18/01/2016 - Ticket 8978 <-

      MODIFY gt_datos FROM lw_datos INDEX l_tabix.
    ENDIF.

  ENDLOOP.

  SORT gt_datos BY kunnr matkl.
  LOOP AT gt_datos INTO lw_datos.
    AT LAST.
      SUM.
      l_total = lw_datos-total.
    ENDAT.
  ENDLOOP.

  CHECK l_total <> 0.

  LOOP AT gt_datos INTO lw_datos.
    lw_datos-porct_prod = lw_datos-total * 100 / l_total.
    PERFORM media_ancho_gram CHANGING lw_datos.
* GST - 18/01/2016 - Ticket 8978 ->
    PERFORM media_ancho_turno CHANGING lw_datos.
* GST - 18/01/2016 - Ticket 8978 <-
    MODIFY gt_datos FROM lw_datos.
  ENDLOOP.
ENDFORM.                    " SEL_DATOS_TURNOS
*&---------------------------------------------------------------------*
*&      Form  SEL_DATOS_HORAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM sel_datos_horas .

  DATA lt_aufm TYPE STANDARD TABLE OF aufm.
  DATA lw_aufm TYPE aufm.
  DATA lw_datos TYPE zepp_fab_bobina_alv.
  DATA lw_datos_aux TYPE zepp_fab_bobina_alv.
  DATA l_tabix TYPE sy-tabix.
  DATA l_campo(20) TYPE c.
  FIELD-SYMBOLS <fmenge>.
  DATA l_menge TYPE menge_d.
  DATA l_monat TYPE monat.
  DATA l_total TYPE menge_d.

* GST - 15/01/2016 - Ticket 8978 ->
  DATA: lv_cpudt TYPE cpudt,
        lv_cputm TYPE cputm,
        lv_turno TYPE zturno.
* GST - 15/01/2016 - Ticket 8978 <-


  SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
    FROM aufm AS a
    INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                              AND b~mjahr = a~mjahr )
    WHERE a~matnr IN smatnr
      AND a~budat IN sbudat
      AND a~werks = pwerks
      AND a~bwart IN ('101','102', '701', '702')
      AND b~cputm IN scputm.

  PERFORM sacar_mov_inve TABLES lt_aufm.

  LOOP AT lt_aufm INTO lw_aufm.
    CLEAR lw_datos.

    SELECT SINGLE matkl zzgramaje zzancho mtart
      INTO (lw_datos-matkl, lw_datos-zzgramaje, lw_datos-zzancho, lw_datos-mtart)
      FROM mara
      WHERE matnr = lw_aufm-matnr.

* GST - 15/01/2015 - Ticket 8978 ->
* Turno:
    CLEAR: lv_cpudt, lv_cputm, lv_turno.
    SELECT SINGLE cpudt cputm INTO (lv_cpudt, lv_cputm)
      FROM mkpf
      WHERE mblnr = lw_aufm-mblnr
      AND mjahr = lw_aufm-mjahr.

    IF ( lv_cputm >= '060000' AND lv_cputm <= '135959' ).
      lv_turno = 'T1'.
    ELSEIF ( lv_cputm >= '140000' AND lv_cputm <= '215959' ).
      lv_turno = 'T2'.
    ELSEIF ( lv_cputm >= '220000' AND lv_cputm <= '235959' ).
      lv_turno = 'T3'.
    ELSE.
      lv_turno = 'T3'.
    ENDIF.

* GST - 15/01/2016 - Ticket 8978 <-

    CHECK lw_datos-zzgramaje IN sgrama.
    CHECK lw_datos-zzancho IN sancho.
    CHECK lw_datos-matkl IN smatkl.
    CHECK lw_datos-mtart IN smtart.


    l_menge = lw_aufm-menge.
    IF lw_aufm-bwart = '102'
    OR lw_aufm-bwart = '702'.
      l_menge = l_menge * -1.
    ENDIF.

    lw_datos-meins = lw_aufm-meins.
    lw_datos-werks = lw_aufm-werks.

    SELECT SINGLE zzkunnr1 INTO lw_datos-kunnr FROM aufk WHERE aufnr = lw_aufm-aufnr.
    CHECK lw_datos-kunnr IN skunnr.

    SELECT SINGLE name1 INTO lw_datos-name1 FROM kna1 WHERE kunnr = lw_datos-kunnr.

    l_monat = lw_aufm-budat+4(2).
    CONCATENATE 'MENGE' l_monat INTO l_campo.
    ASSIGN COMPONENT l_campo OF STRUCTURE lw_datos TO <fmenge>.
    IF sy-subrc = 0.
      <fmenge> = l_menge.
      lw_datos-total = l_menge.
    ENDIF.

    READ TABLE gt_datos INTO lw_datos_aux WITH KEY kunnr = lw_datos-kunnr
                                                   matkl = lw_datos-matkl
                                                   zzgramaje = lw_datos-zzgramaje
                                                   zzancho = lw_datos-zzancho.
    IF sy-subrc <> 0.
* GST - 18/01/2016 - Ticket 8978 ->
      PERFORM total_turno USING lv_turno
                                l_menge
                          CHANGING lw_datos.
* GST - 18/01/2016 - Ticket 8978 <-
      PERFORM total_mes USING lw_datos.
      APPEND lw_datos TO gt_datos.
    ELSE.
      l_tabix = sy-tabix.
* GST - 18/01/2016 - Ticket 8978 ->
      PERFORM total_turno USING lv_turno
                                l_menge
                          CHANGING lw_datos.
* GST - 18/01/2016 - Ticket 8978 <-
      PERFORM total_mes USING lw_datos.
      ADD lw_datos_aux-menge01 TO lw_datos-menge01.
      ADD lw_datos_aux-menge02 TO lw_datos-menge02.
      ADD lw_datos_aux-menge03 TO lw_datos-menge03.
      ADD lw_datos_aux-menge04 TO lw_datos-menge04.
      ADD lw_datos_aux-menge05 TO lw_datos-menge05.
      ADD lw_datos_aux-menge06 TO lw_datos-menge06.
      ADD lw_datos_aux-menge07 TO lw_datos-menge07.
      ADD lw_datos_aux-menge08 TO lw_datos-menge08.
      ADD lw_datos_aux-menge09 TO lw_datos-menge09.
      ADD lw_datos_aux-menge10 TO lw_datos-menge10.
      ADD lw_datos_aux-menge11 TO lw_datos-menge11.
      ADD lw_datos_aux-menge12 TO lw_datos-menge12.
      ADD lw_datos_aux-total TO lw_datos-total.

* GST - 18/01/2016 - Ticket 8978 ->
      ADD lw_datos_aux-menge_t1 TO lw_datos-menge_t1.
      ADD lw_datos_aux-menge_t2 TO lw_datos-menge_t2.
      ADD lw_datos_aux-menge_t3 TO lw_datos-menge_t3.
* GST - 18/01/2016 - Ticket 8978 <-

      MODIFY gt_datos FROM lw_datos INDEX l_tabix.
    ENDIF.

  ENDLOOP.

  SORT gt_datos BY kunnr matkl.
  LOOP AT gt_datos INTO lw_datos.
    AT LAST.
      SUM.
      l_total = lw_datos-total.
    ENDAT.
  ENDLOOP.

  CHECK l_total <> 0.

  LOOP AT gt_datos INTO lw_datos.
    lw_datos-porct_prod = lw_datos-total * 100 / l_total.
    PERFORM media_ancho_gram CHANGING lw_datos.
* GST - 18/01/2016 - Ticket 8978 ->
    PERFORM media_ancho_turno CHANGING lw_datos.
* GST - 18/01/2016 - Ticket 8978 <-
    MODIFY gt_datos FROM lw_datos.
  ENDLOOP.

ENDFORM.                    " SEL_DATOS_HORAS
*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion .

* Turnos:
  CLEAR: so_h_t1, so_h_t2, so_h_t3_ini, so_h_t3_fin.
  CLEAR: so_h_t3, gv_d_t3_ini, gv_d_t3_fin.
  REFRESH: so_h_t1, so_h_t2, so_h_t3_ini, so_h_t3_fin.
  REFRESH: so_h_t3.

* Gramaje y Ancho medio:
  CLEAR: gv_total_01, gv_total_02, gv_total_03, gv_total_04, gv_total_05.
  CLEAR: gv_total_06, gv_total_07, gv_total_08, gv_total_09, gv_total_10.
  CLEAR: gv_total_11, gv_total_12.

  CLEAR: gv_gram_01, gv_gram_02, gv_gram_03, gv_gram_04, gv_gram_05.
  CLEAR: gv_gram_06, gv_gram_07, gv_gram_08, gv_gram_09, gv_gram_10.
  CLEAR: gv_gram_11, gv_gram_12.

  CLEAR: gv_ancho_01, gv_ancho_02, gv_ancho_03, gv_ancho_04, gv_ancho_05.
  CLEAR: gv_ancho_06, gv_ancho_07, gv_ancho_08, gv_ancho_09, gv_ancho_10.
  CLEAR: gv_ancho_11, gv_ancho_12.

* GST - 18/01/2016 - Ticket 8978 ->

  CLEAR: gt_ca_ancho_turno.
  REFRESH: gt_ca_ancho_turno.

  CLEAR: gv_menge_t1, gv_menge_t2, gv_menge_t3.
  CLEAR: gv_menge_t1_tot, gv_menge_t2_tot, gv_menge_t3_tot, gv_menge_tot.
  CLEAR: gv_menge_t1_gram, gv_menge_t2_gram, gv_menge_t3_gram.

* GST - 18/01/2016 - Ticket 8978 <-

ENDFORM.                    " INICIALIZACION
*&---------------------------------------------------------------------*
*&      Form  TOTAL_MES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM total_mes  USING    p_datos TYPE zepp_fab_bobina_alv.

  DATA: lv_ancho TYPE menge_d,
        lv_gram  TYPE menge_d.

  CLEAR: lv_ancho, lv_gram.

  lv_ancho = p_datos-zzancho.
  lv_gram = p_datos-zzgramaje.

* Totalizados:
  gv_total_01 = gv_total_01 + p_datos-menge01.
  gv_total_02 = gv_total_02 + p_datos-menge02.
  gv_total_03 = gv_total_03 + p_datos-menge03.
  gv_total_04 = gv_total_04 + p_datos-menge04.
  gv_total_05 = gv_total_05 + p_datos-menge05.
  gv_total_06 = gv_total_06 + p_datos-menge06.
  gv_total_07 = gv_total_07 + p_datos-menge07.
  gv_total_08 = gv_total_08 + p_datos-menge08.
  gv_total_09 = gv_total_09 + p_datos-menge09.
  gv_total_10 = gv_total_10 + p_datos-menge10.
  gv_total_11 = gv_total_11 + p_datos-menge11.
  gv_total_12 = gv_total_12 + p_datos-menge12.

* Totalizado gramaje:
  gv_gram_01 = gv_gram_01 + lv_gram * p_datos-menge01.
  gv_gram_02 = gv_gram_02 + lv_gram * p_datos-menge02.
  gv_gram_03 = gv_gram_03 + lv_gram * p_datos-menge03.
  gv_gram_04 = gv_gram_04 + lv_gram * p_datos-menge04.
  gv_gram_05 = gv_gram_05 + lv_gram * p_datos-menge05.
  gv_gram_06 = gv_gram_06 + lv_gram * p_datos-menge06.
  gv_gram_07 = gv_gram_07 + lv_gram * p_datos-menge07.
  gv_gram_08 = gv_gram_08 + lv_gram * p_datos-menge08.
  gv_gram_09 = gv_gram_09 + lv_gram * p_datos-menge09.
  gv_gram_10 = gv_gram_10 + lv_gram * p_datos-menge10.
  gv_gram_11 = gv_gram_11 + lv_gram * p_datos-menge11.
  gv_gram_12 = gv_gram_12 + lv_gram * p_datos-menge12.

* Totalizado ancho:
  gv_ancho_01 = gv_ancho_01 + lv_ancho * p_datos-menge01.
  gv_ancho_02 = gv_ancho_02 + lv_ancho * p_datos-menge02.
  gv_ancho_03 = gv_ancho_03 + lv_ancho * p_datos-menge03.
  gv_ancho_04 = gv_ancho_04 + lv_ancho * p_datos-menge04.
  gv_ancho_05 = gv_ancho_05 + lv_ancho * p_datos-menge05.
  gv_ancho_06 = gv_ancho_06 + lv_ancho * p_datos-menge06.
  gv_ancho_07 = gv_ancho_07 + lv_ancho * p_datos-menge07.
  gv_ancho_08 = gv_ancho_08 + lv_ancho * p_datos-menge08.
  gv_ancho_09 = gv_ancho_09 + lv_ancho * p_datos-menge09.
  gv_ancho_10 = gv_ancho_10 + lv_ancho * p_datos-menge10.
  gv_ancho_11 = gv_ancho_11 + lv_ancho * p_datos-menge11.
  gv_ancho_12 = gv_ancho_12 + lv_ancho * p_datos-menge12.


ENDFORM.                    " TOTAL_MES
*&---------------------------------------------------------------------*
*&      Form  MEDIA_ANCHO_GRAM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM media_ancho_gram  CHANGING p_datos TYPE zepp_fab_bobina_alv.

* Gramaje medio mes:
  p_datos-gramaje01 = gv_gram_01 / gv_total_01.
  p_datos-gramaje02 = gv_gram_02 / gv_total_02.
  p_datos-gramaje03 = gv_gram_03 / gv_total_03.
  p_datos-gramaje04 = gv_gram_04 / gv_total_04.
  p_datos-gramaje05 = gv_gram_05 / gv_total_05.
  p_datos-gramaje06 = gv_gram_06 / gv_total_06.
  p_datos-gramaje07 = gv_gram_07 / gv_total_07.
  p_datos-gramaje08 = gv_gram_08 / gv_total_08.
  p_datos-gramaje09 = gv_gram_09 / gv_total_09.
  p_datos-gramaje10 = gv_gram_10 / gv_total_10.
  p_datos-gramaje11 = gv_gram_11 / gv_total_11.
  p_datos-gramaje12 = gv_gram_12 / gv_total_12.

* Ancho medio mes:
  p_datos-ancho01 = gv_ancho_01 / gv_total_01.
  p_datos-ancho02 = gv_ancho_02 / gv_total_02.
  p_datos-ancho03 = gv_ancho_03 / gv_total_03.
  p_datos-ancho04 = gv_ancho_04 / gv_total_04.
  p_datos-ancho05 = gv_ancho_05 / gv_total_05.
  p_datos-ancho06 = gv_ancho_06 / gv_total_06.
  p_datos-ancho07 = gv_ancho_07 / gv_total_07.
  p_datos-ancho08 = gv_ancho_08 / gv_total_08.
  p_datos-ancho09 = gv_ancho_09 / gv_total_09.
  p_datos-ancho10 = gv_ancho_10 / gv_total_10.
  p_datos-ancho11 = gv_ancho_11 / gv_total_11.
  p_datos-ancho12 = gv_ancho_12 / gv_total_12.

ENDFORM.                    " MEDIA_ANCHO_GRAM
*&---------------------------------------------------------------------*
*&      Form  SACAR_MOV_INVE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LT_AUFM  text
*----------------------------------------------------------------------*
FORM sacar_mov_inve  TABLES   lt_aufm STRUCTURE  aufm.
  DATA: lt_aufm_aux LIKE aufm OCCURS 0 WITH HEADER LINE,
        lt_mseg     LIKE mseg .
  REFRESH: lt_aufm_aux.

  LOOP AT lt_aufm.
    SELECT * FROM mseg INTO lt_mseg
                       WHERE matnr   EQ lt_aufm-matnr
                         AND werks   EQ lt_aufm-werks
                         AND lgort   EQ lt_aufm-lgort
                         AND charg   EQ lt_aufm-charg
                         AND ( bwart EQ '701' OR bwart EQ '702' )
                         AND budat_mkpf >= lt_aufm-budat.
      CLEAR lt_aufm_aux.
*           move-CORRESPONDING LT_MSEG to lt_aufm_Aux.
      MOVE-CORRESPONDING lt_aufm TO lt_aufm_aux.
      lt_aufm_aux-bwart = lt_mseg-bwart.
      lt_aufm_aux-menge = lt_mseg-menge.
      lt_aufm_aux-meins = lt_mseg-meins.
      APPEND lt_aufm_aux.
    ENDSELECT.
  ENDLOOP.
  SORT lt_aufm_aux. DELETE ADJACENT DUPLICATES FROM lt_aufm_aux.
  CHECK lt_aufm_aux[] IS NOT INITIAL.
  APPEND LINES OF lt_aufm_aux TO lt_aufm.
  SORT lt_aufm.

ENDFORM.                    " SACAR_MOV_INVE
*&---------------------------------------------------------------------*
*&      Form  TOTAL_TURNO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_TURNO  text
*      -->P_L_MENGE  text
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM total_turno  USING    p_turno
                           p_menge
                  CHANGING p_datos TYPE zepp_fab_bobina_alv.

  DATA: lv_index          LIKE         sy-tabix,
        ls_ca_ancho_turno LIKE LINE OF gt_ca_ancho_turno.

  IF p_turno = 'T1'.
    p_datos-menge_t1 = p_datos-menge_t1 + p_menge.
  ELSEIF p_turno = 'T2'.
    p_datos-menge_t2 = p_datos-menge_t2 + p_menge.
  ELSEIF p_turno = 'T3'.
    p_datos-menge_t3 = p_datos-menge_t3 + p_menge.
  ENDIF.

* Totalizado cliente-grupo artículo-turno:
  CLEAR: ls_ca_ancho_turno, lv_index.
  READ TABLE gt_ca_ancho_turno INTO ls_ca_ancho_turno
             WITH KEY kunnr = p_datos-kunnr
                      matkl = p_datos-matkl.

  lv_index = sy-tabix.
  IF ls_ca_ancho_turno IS INITIAL.
    ls_ca_ancho_turno-kunnr = p_datos-kunnr.
    ls_ca_ancho_turno-matkl = p_datos-matkl.
    IF p_turno = 'T1'.
      ls_ca_ancho_turno-menge_t1 = p_menge * p_datos-zzancho.
      ls_ca_ancho_turno-menge_t1_tot = p_menge.
      ls_ca_ancho_turno-menge_t1_gra = p_menge * p_datos-zzgramaje.
    ELSEIF p_turno = 'T2'.
      ls_ca_ancho_turno-menge_t2 = p_menge * p_datos-zzancho.
      ls_ca_ancho_turno-menge_t2_tot = p_menge.
      ls_ca_ancho_turno-menge_t2_gra = p_menge * p_datos-zzgramaje.
    ELSEIF p_turno = 'T3'.
      ls_ca_ancho_turno-menge_t3 = p_menge * p_datos-zzancho.
      ls_ca_ancho_turno-menge_t3_tot = p_menge.
      ls_ca_ancho_turno-menge_t3_gra = p_menge * p_datos-zzgramaje.
    ENDIF.

    ls_ca_ancho_turno-menge_tot = p_menge.

    APPEND ls_ca_ancho_turno TO gt_ca_ancho_turno.
  ELSE.
    IF p_turno = 'T1'.
      ls_ca_ancho_turno-menge_t1 = ls_ca_ancho_turno-menge_t1 +
                                   p_menge * p_datos-zzancho.
      ls_ca_ancho_turno-menge_t1_tot = ls_ca_ancho_turno-menge_t1_tot +
                                       p_menge.
      ls_ca_ancho_turno-menge_t1_gra = ls_ca_ancho_turno-menge_t1_gra +
                                   p_menge * p_datos-zzgramaje.

    ELSEIF p_turno = 'T2'.
      ls_ca_ancho_turno-menge_t2 = ls_ca_ancho_turno-menge_t2 +
                                   p_menge * p_datos-zzancho.
      ls_ca_ancho_turno-menge_t2_tot = ls_ca_ancho_turno-menge_t2_tot +
                                       p_menge.
      ls_ca_ancho_turno-menge_t2_gra = ls_ca_ancho_turno-menge_t2_gra +
                                   p_menge * p_datos-zzgramaje.
    ELSEIF p_turno = 'T3'.
      ls_ca_ancho_turno-menge_t3 = ls_ca_ancho_turno-menge_t3 +
                                   p_menge * p_datos-zzancho.
      ls_ca_ancho_turno-menge_t3_tot = ls_ca_ancho_turno-menge_t3_tot +
                                       p_menge.
      ls_ca_ancho_turno-menge_t3_gra = ls_ca_ancho_turno-menge_t3_gra +
                                   p_menge * p_datos-zzgramaje.
    ENDIF.
    ls_ca_ancho_turno-menge_tot = ls_ca_ancho_turno-menge_tot +
                                  p_menge.
    MODIFY gt_ca_ancho_turno FROM ls_ca_ancho_turno INDEX lv_index.
  ENDIF.

* Totalizado por turno:

  IF p_turno = 'T1'.
    gv_menge_t1 = gv_menge_t1 + p_menge * p_datos-zzancho.
    gv_menge_t1_tot = gv_menge_t1_tot + p_menge.
    gv_menge_t1_gram = gv_menge_t1_gram + p_menge * p_datos-zzgramaje.
  ELSEIF p_turno = 'T2'.
    gv_menge_t2 = gv_menge_t2 + p_menge * p_datos-zzancho.
    gv_menge_t2_tot = gv_menge_t2_tot + p_menge.
    gv_menge_t2_gram = gv_menge_t2_gram + p_menge * p_datos-zzgramaje.
  ELSEIF p_turno = 'T3'.
    gv_menge_t3 = gv_menge_t3 + p_menge * p_datos-zzancho.
    gv_menge_t3_tot = gv_menge_t3_tot + p_menge.
    gv_menge_t3_gram = gv_menge_t3_gram + p_menge * p_datos-zzgramaje.
  ENDIF.

  gv_menge_tot = gv_menge_tot + p_menge.

ENDFORM.                    " TOTAL_TURNO
*&---------------------------------------------------------------------*
*&      Form  MEDIA_ANCHO_GRAM_TURNO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM media_ancho_turno  CHANGING p_datos TYPE zepp_fab_bobina_alv.

  DATA: ls_ca_ancho_turno LIKE LINE OF gt_ca_ancho_turno.

  CLEAR ls_ca_ancho_turno.
  READ TABLE gt_ca_ancho_turno INTO ls_ca_ancho_turno
             WITH KEY kunnr = p_datos-kunnr
                      matkl = p_datos-matkl.

  IF ls_ca_ancho_turno IS NOT INITIAL.

* Ancho y gramaje medio:
    IF ls_ca_ancho_turno-menge_t1_tot IS NOT INITIAL.
      p_datos-ancho_t1 = ls_ca_ancho_turno-menge_t1 /
                         ls_ca_ancho_turno-menge_t1_tot.
      p_datos-gram_t1 = ls_ca_ancho_turno-menge_t1_gra /
                        ls_ca_ancho_turno-menge_t1_tot.
    ENDIF.

    IF ls_ca_ancho_turno-menge_t2_tot IS NOT INITIAL.
      p_datos-ancho_t2 = ls_ca_ancho_turno-menge_t2 /
                         ls_ca_ancho_turno-menge_t2_tot.
      p_datos-gram_t2 = ls_ca_ancho_turno-menge_t2_gra /
                        ls_ca_ancho_turno-menge_t2_tot.
    ENDIF.

    IF ls_ca_ancho_turno-menge_t3_tot IS NOT INITIAL.
      p_datos-ancho_t3 = ls_ca_ancho_turno-menge_t3 /
                         ls_ca_ancho_turno-menge_t3_tot.
      p_datos-gram_t3 = ls_ca_ancho_turno-menge_t3_gra /
                        ls_ca_ancho_turno-menge_t3_tot.
    ENDIF.

    IF ls_ca_ancho_turno-menge_tot IS NOT INITIAL.
      p_datos-ancho_t = ( ls_ca_ancho_turno-menge_t1 +
        ls_ca_ancho_turno-menge_t2 + ls_ca_ancho_turno-menge_t3 ) /
        ls_ca_ancho_turno-menge_tot.
      p_datos-gram_t = ( ls_ca_ancho_turno-menge_t1_gra +
        ls_ca_ancho_turno-menge_t2_gra + ls_ca_ancho_turno-menge_t3_gra ) /
        ls_ca_ancho_turno-menge_tot.
    ENDIF.

  ENDIF.

  IF gv_menge_t1_tot IS NOT INITIAL.
    p_datos-ancho_t1_tot = gv_menge_t1 / gv_menge_t1_tot.
    p_datos-gram_t1_tot = gv_menge_t1_gram / gv_menge_t1_tot.
  ENDIF.

  IF gv_menge_t2_tot IS NOT INITIAL.
    p_datos-ancho_t2_tot = gv_menge_t2 / gv_menge_t2_tot.
    p_datos-gram_t2_tot = gv_menge_t2_gram / gv_menge_t2_tot.
  ENDIF.

  IF gv_menge_t3_tot IS NOT INITIAL.
    p_datos-ancho_t3_tot = gv_menge_t3 / gv_menge_t3_tot.
    p_datos-gram_t3_tot = gv_menge_t3_gram / gv_menge_t3_tot.
  ENDIF.

  IF gv_menge_tot IS NOT INITIAL.
    p_datos-ancho_t_tot = ( gv_menge_t1 + gv_menge_t2 +
                            gv_menge_t3 ) / gv_menge_tot.
    p_datos-gram_t_tot = ( gv_menge_t1_gram + gv_menge_t2_gram +
                 gv_menge_t3_gram ) / gv_menge_tot.
  ENDIF.

ENDFORM.                    " MEDIA_ANCHO_GRAM_TURNO
*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion_sel .

SELECT SINGLE parva FROM usr05
      INTO pwerks
      WHERE bname = sy-uname AND
      parid = 'WRK'.

ENDFORM.                    " INICIALIZACION_SEL
