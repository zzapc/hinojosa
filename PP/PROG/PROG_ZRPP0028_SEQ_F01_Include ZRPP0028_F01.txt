*&---------------------------------------------------------------------*
*&  Include           ZRPP0028_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBTENER_PROD_TURNOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_prod_turnos .

  DATA: lt_aufm TYPE STANDARD TABLE OF aufm,
        lw_aufm TYPE                   aufm.
  DATA lw_datos TYPE zepp_ent_prod_zrpp0028.

  DATA: lv_auart TYPE aufart,
        lv_arbpl TYPE arbpl.

  DATA: BEGIN OF lw_aufk,
          zebeln1 TYPE aufk-zzebeln1,
          zebelp1 TYPE aufk-zzebelp1,
          zkunnr1 TYPE aufk-zzkunnr1,
        END OF lw_aufk.

  CONSTANTS: ptodos TYPE xfeld VALUE 'X'.

  CLEAR: lt_aufm, gt_entradas.
  REFRESH: lt_aufm, gt_entradas.



  SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
      FROM aufm AS a
      INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                              AND b~mjahr = a~mjahr )
    INNER JOIN aufk  AS c ON c~aufnr = a~aufnr
      WHERE
    a~aufnr = gv_aufnr_int AND "22.09.17 - ampliación programa
            a~werks = gv_werks AND
            ( b~cputm >= gv_hora_desde AND  b~cputm <= gv_hora_hasta ) AND
            a~budat = gv_fecha AND
            c~auart = 'ZI01'.

  LOOP AT lt_aufm INTO lw_aufm.
    CLEAR lw_datos.

    lw_datos-matnr = lw_aufm-matnr.

    SELECT SINGLE maktx INTO lw_datos-maktx FROM makt
      WHERE matnr = lw_aufm-matnr
        AND spras = sy-langu.

    lw_datos-werks = lw_aufm-werks.

    SELECT SINGLE matkl mtart zzancho zzgramaje
        INTO (lw_datos-matkl, lw_datos-mtart, lw_datos-zzancho, lw_datos-zzgramaje)
        FROM mara
        WHERE matnr = lw_aufm-matnr.

    lw_datos-budat = lw_aufm-budat.
    lw_datos-charg = lw_aufm-charg.
    lw_datos-aufnr = lw_aufm-aufnr.
    lw_datos-menge = lw_aufm-menge.
    lw_datos-meins = lw_aufm-meins.
    lw_datos-bwart = lw_aufm-bwart.
    lw_datos-lgort = lw_aufm-lgort.

    IF lw_datos-mtart = 'ZROL'.
      IF lw_datos-bwart <> '261' AND lw_datos-bwart <> '262'.
        lw_datos-prodbrut = si.
      ELSE.
        lw_datos-prodbrut = no.
      ENDIF.
    ELSE.
      lw_datos-prodbrut = no.
      IF ( lw_datos-bwart = '531' OR lw_datos-bwart = '532' ) AND lw_datos-lgort = '1000'.
        lw_datos-prodbrut = si.
      ENDIF.

      IF lw_datos-bwart = '101' AND lw_datos-lgort = '1000'.
        CLEAR lv_auart.
        SELECT SINGLE auart INTO lv_auart
          FROM aufk
          WHERE aufnr = lw_datos-aufnr.
        IF lv_auart = 'ZI05'.
          lw_datos-prodbrut = si.
        ENDIF.
      ENDIF.
    ENDIF.

    IF lw_datos-mtart = 'ZPAP'.
      IF lw_datos-bwart <> '261' AND lw_datos-bwart <> '262'.
        lw_datos-prodneta = si.
      ELSE.
        lw_datos-prodneta = no.
      ENDIF.
    ELSE.
      lw_datos-prodneta = no.
    ENDIF.

    CHECK lw_datos-prodbrut = ptodos OR lw_datos-prodneta = ptodos.

    IF lw_aufm-bwart = '101' OR lw_aufm-bwart = '102' OR lw_aufm-bwart = '531' OR
       lw_aufm-bwart = '532'.
      SELECT SINGLE zzebeln1 zzebelp1 zzkunnr1 FROM aufk
        INTO lw_aufk
        WHERE aufnr = lw_aufm-aufnr.

      IF sy-subrc = 0.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = lw_aufk-zebeln1
          IMPORTING
            output = lw_datos-vbeln.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = lw_aufk-zebelp1
          IMPORTING
            output = lw_datos-posnr.

        lw_datos-kunnr = lw_aufk-zkunnr1.

        SELECT SINGLE name1 FROM kna1
          INTO lw_datos-name1
          WHERE kunnr = lw_datos-kunnr.
      ENDIF.
    ENDIF.

*    CHECK lw_datos-vbeln IN svbeln.
*    CHECK lw_datos-kunnr IN skunnr.

    IF lw_datos-charg IS NOT INITIAL.
      IF lw_datos-mtart = 'ZROL'.
        PERFORM obtener_clasificacion CHANGING lw_datos.
      ELSEIF ( lw_datos-bwart = '531' OR lw_datos-bwart = '532' ) AND lw_datos-lgort = '1000'.
        PERFORM obtener_clasificacion_pulp CHANGING lw_datos.
      ELSEIF lw_datos-bwart = '101' AND lw_datos-lgort = '1000' AND lv_auart = 'ZI05'.
        PERFORM obtener_clasificacion_pulp CHANGING lw_datos.
      ELSE.
        PERFORM obtener_clasificacion_bob CHANGING lw_datos.
      ENDIF.
    ENDIF.

    IF lw_datos-bwart = '102' OR lw_datos-bwart = '532' OR lw_datos-bwart = '291'.
      lw_datos-menge = ( -1 ) * lw_datos-menge.
      lw_datos-brgew = ( -1 ) * lw_datos-brgew.
    ENDIF.


    " Hora y Turno:
    SELECT SINGLE cpudt cputm INTO (lw_datos-cpudt, lw_datos-cputm)
      FROM mkpf
      WHERE mblnr = lw_aufm-mblnr
      AND mjahr = lw_aufm-mjahr.

    IF ( lw_datos-cputm >= '060000' AND lw_datos-cputm <= '135959' ).
      lw_datos-turno = 'T1'.
      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '140000' AND lw_datos-cputm <= '215959' ).
      lw_datos-turno = 'T2'.
      lw_datos-fec_prod = lw_datos-cpudt.
    ELSEIF ( lw_datos-cputm >= '220000' AND lw_datos-cputm <= '235959' ).
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-cpudt.
    ELSE.
      lw_datos-turno = 'T3'.
      lw_datos-fec_prod = lw_datos-cpudt - 1.
    ENDIF.

    " Descripción grupo artículos:
    SELECT SINGLE wgbez60 INTO lw_datos-wgbez60
      FROM t023t
      WHERE spras = sy-langu
      AND matkl = lw_datos-matkl.

    CONDENSE lw_datos-wgbez60.

    lw_datos-contador = 1.

*   Puesto de trabajo, sino está en la característica de la BOBINA
    IF lw_datos-ptrabajo IS INITIAL.
      SELECT SINGLE arbpl INTO lv_arbpl
         FROM crhd AS c
         INNER JOIN afru AS a ON ( c~objid = a~arbid )
         WHERE a~aufnr = lw_datos-aufnr
         AND   c~werks = lw_datos-werks.
      IF sy-subrc = 0.
        lw_datos-ptrabajo = lv_arbpl.
      ENDIF.
    ENDIF.
    APPEND lw_datos TO gt_entradas.
  ENDLOOP.



*  CHECK gt_entradas[] IS NOT INITIAL.
*
*  LOOP AT gt_entradas INTO wa_entradas.
**     cabecera
*    wa_header-aufnr = wa_entradas-aufnr.
*    APPEND wa_header TO gt_header.
*
**   cuerpo
*    wa_cuerpo-aufnr = wa_entradas-aufnr.
*    wa_cuerpo-matnr = wa_entradas-matnr.
*    wa_cuerpo-charg = wa_entradas-charg.
*    wa_cuerpo-menge = wa_entradas-menge.
*
*    CASE wa_entradas-bwart.
*      WHEN '101'.
*      WHEN '531'.
*        wa_cuerpo-tipo = 'P'.
*    ENDCASE.
*
*    wa_cuerpo-diametro = wa_entradas-diametro.
**     wa_cuerpo-EMPALMES
*    wa_cuerpo-metros = wa_entradas-zzancho.
*    wa_cuerpo-tornadas = wa_entradas-tornadas.
*    wa_cuerpo-bwart = wa_entradas-bwart.
**    wa_cuerpo-MBLNR
**    wa_cuerpo-MJAHR
*
*    APPEND wa_cuerpo TO gt_cuerpo.
*  ENDLOOP.

*  SORT gt_header BY aufnr ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM gt_header.
*
*  LOOP AT gt_header ASSIGNING <header>.
*    SELECT SINGLE zkunnr1 zebeln1 zebelp1 zkunnr2 zebeln2 zebelp2 zkunnr3 zebeln3 zebelp3
*      FROM aufk
*      INTO (<header>-zkunnr1, <header>-zebeln1, <header>-zebelp1,
*            <header>-zkunnr2, <header>-zebeln2, <header>-zebelp2,
*            <header>-zkunnr3, <header>-zebeln3, <header>-zebelp3)
*      WHERE aufnr = <header>-aufnr.
*
*    SELECT SINGLE name1 FROM kna1
*      INTO <header>-name1
*      WHERE kunnr = <header>-zkunnr1.
*
*    SELECT SINGLE name1 FROM kna1
*      INTO <header>-name2
*      WHERE kunnr = <header>-zkunnr2.
*
*    SELECT SINGLE name1 FROM kna1
*       INTO <header>-name3
*       WHERE kunnr = <header>-zkunnr3.
*
*    SELECT SINGLE plnbez FROM afko
*      INTO <header>-plnbez
*      WHERE aufnr = <header>-aufnr.
*
*    SELECT SINGLE maktx FROM makt
*      INTO <header>-maktx
*      WHERE matnr = <header>-plnbez AND
*            spras = sy-langu.
*
*  ENDLOOP.

ENDFORM.                    " OBTENER_PROD_TURNOS
*&---------------------------------------------------------------------*
*&      Form  OBTENER_CLASIFICACION_PULP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM obtener_clasificacion_pulp  CHANGING pw_datos TYPE zepp_ent_prod_zrpp0028.
  DATA: l_objkey           TYPE                   objnum,
        lt_allocvaluesnum  TYPE STANDARD TABLE OF bapi1003_alloc_values_num WITH HEADER LINE,
        lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char WITH HEADER LINE,
        lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr WITH HEADER LINE,
        lt_return          TYPE STANDARD TABLE OF bapiret2.

  CONCATENATE pw_datos-matnr pw_datos-charg INTO l_objkey.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_objkey
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA_PULPER'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_allocvaluesnum
      allocvalueschar = lt_allocvalueschar
      allocvaluescurr = lt_allocvaluescurr
      return          = lt_return.

  READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
  CHECK sy-subrc <> 0.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_DIAMETRO1'.
  IF sy-subrc = 0.
    pw_datos-diametro = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-diametro_un = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-diametro_un = 'MM'.
    ENDIF.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_HUMEDAD'.
  IF sy-subrc = 0.
    pw_datos-humedad = lt_allocvaluesnum-value_from.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_PESO1'.
  IF sy-subrc = 0.
    pw_datos-brgew = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-gewei = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-gewei = 'KG'.
    ENDIF.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_FSC_PORCENTAJE'.
  IF sy-subrc = 0.
    pw_datos-fsc = lt_allocvaluesnum-value_from.
  ENDIF.


* RECUPERAR DECISION DE EMPLEO
  READ TABLE lt_allocvalueschar
             WITH KEY charact = 'LOBM_UDCODE'.

  IF sy-subrc = 0.
    pw_datos-vcode = lt_allocvalueschar-value_neutral.
  ENDIF.


  READ TABLE lt_allocvalueschar
           WITH KEY charact = 'ZPPI_MOTIVO_RECHAZO'.
  IF sy-subrc = 0.
    pw_datos-motiv_pulper = lt_allocvalueschar-value_neutral.
  ENDIF.


  READ TABLE lt_allocvalueschar
            WITH KEY charact = 'ZPPI_MOTIVO_REMANIPULADO'.
  IF sy-subrc = 0.
    pw_datos-motiv_remanip = lt_allocvalueschar-value_neutral.
  ENDIF.


ENDFORM.                    " OBTENER_CLASIFICACION_PULP
*&---------------------------------------------------------------------*
*&      Form  OBTENER_CLASIFICACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM obtener_clasificacion  CHANGING pw_datos TYPE zepp_ent_prod_zrpp0028.

  DATA: l_objkey           TYPE                   objnum,
        lt_allocvaluesnum  TYPE STANDARD TABLE OF bapi1003_alloc_values_num WITH HEADER LINE,
        lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char WITH HEADER LINE,
        lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr WITH HEADER LINE,
        lt_return          TYPE STANDARD TABLE OF bapiret2.

  CONCATENATE pw_datos-matnr pw_datos-charg INTO l_objkey.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_objkey
      objecttable     = 'MCH1'
      classnum        = 'Z_ROLLO'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_allocvaluesnum
      allocvalueschar = lt_allocvalueschar
      allocvaluescurr = lt_allocvaluescurr
      return          = lt_return.

  READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
  CHECK sy-subrc <> 0.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_DIAMETRO1'.
  IF sy-subrc = 0.
    pw_datos-diametro = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-diametro_un = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-diametro_un = 'MM'.
    ENDIF.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_HUMEDAD'.
  IF sy-subrc = 0.
    pw_datos-humedad = lt_allocvaluesnum-value_from.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_PESO1'.
  IF sy-subrc = 0.
    pw_datos-brgew = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-gewei = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-gewei = 'KG'.
    ENDIF.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_FSC_PORCENTAJE'.
  IF sy-subrc = 0.
    pw_datos-fsc = lt_allocvaluesnum-value_from.
  ENDIF.

* RECUPERAR DECISION DE EMPLEO
  READ TABLE lt_allocvalueschar "INTO ls_alloc_values_char
             WITH KEY charact = 'LOBM_UDCODE'.

  IF sy-subrc = 0.
    pw_datos-vcode = lt_allocvalueschar-value_neutral.
  ENDIF.



* Motivo reproceso ->
  READ TABLE lt_allocvalueschar
             WITH KEY charact = 'ZPPI_MOTIVO_REPROCESO_BOBINA'.
  IF sy-subrc = 0.
    pw_datos-motiv_reproc = lt_allocvalueschar-value_char.
  ELSE. "Motivo reproceso SCADA -
    READ TABLE lt_allocvalueschar
               WITH KEY charact = 'Z_MOTIVO_REPROCESO_BOBINA'.
    IF sy-subrc = 0.
      pw_datos-motiv_reproc = lt_allocvalueschar-value_char.
    ENDIF.
  ENDIF.

* tornadas
  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_TORNADAS'.
  IF sy-subrc = 0.
    pw_datos-fsc = lt_allocvaluesnum-value_from.
  ENDIF.

ENDFORM.                    " OBTENER_CLASIFICACION
*&---------------------------------------------------------------------*
*&      Form  OBTENER_CLASIFICACION_BOB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LW_DATOS  text
*----------------------------------------------------------------------*
FORM obtener_clasificacion_bob  CHANGING pw_datos TYPE zepp_ent_prod_zrpp0028.

  DATA: l_objkey           TYPE                   objnum,
        lt_allocvaluesnum  TYPE STANDARD TABLE OF bapi1003_alloc_values_num WITH HEADER LINE,
        lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char WITH HEADER LINE,
        lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr WITH HEADER LINE,
        lt_return          TYPE STANDARD TABLE OF bapiret2.

  CONCATENATE pw_datos-matnr pw_datos-charg INTO l_objkey.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_objkey
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_allocvaluesnum
      allocvalueschar = lt_allocvalueschar
      allocvaluescurr = lt_allocvaluescurr
      return          = lt_return.

  READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
  CHECK sy-subrc <> 0.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_DIAMETRO'.
  IF sy-subrc = 0.
    pw_datos-diametro = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-diametro_un = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-diametro_un = 'MM'.
    ENDIF.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_HUMEDAD'.
  IF sy-subrc = 0.
    pw_datos-humedad = lt_allocvaluesnum-value_from.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_PESO'.
  IF sy-subrc = 0.
    pw_datos-brgew = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-gewei = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-gewei = 'kg'.
    ENDIF.
  ENDIF.

  " Longitud:
  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_LONGITUD_B'.
  IF sy-subrc = 0.
    pw_datos-laeng = lt_allocvaluesnum-value_from.
    IF lt_allocvaluesnum-unit_from IS NOT INITIAL.
      pw_datos-meabm = lt_allocvaluesnum-unit_from.
    ELSE.
      pw_datos-meabm = 'M'.
    ENDIF.
  ENDIF.

  READ TABLE lt_allocvaluesnum WITH KEY charact = 'Z_FSC_PORCENTAJE'.
  IF sy-subrc = 0.
    pw_datos-fsc = lt_allocvaluesnum-value_from.
  ENDIF.

* Motivo reproceso ->
  READ TABLE lt_allocvalueschar
             WITH KEY charact = 'ZPPI_MOTIVO_REPROCESO_BOBINA'.
  IF sy-subrc = 0.
    pw_datos-motiv_reproc = lt_allocvalueschar-value_char.
* Motivo reproceso SCADA ->
  ELSE.
    READ TABLE lt_allocvalueschar
               WITH KEY charact = 'Z_MOTIVO_REPROCESO_BOBINA'.
    IF sy-subrc = 0.
      pw_datos-motiv_reproc = lt_allocvalueschar-value_char.
    ENDIF.
  ENDIF.


* Motivo remanipulado
  READ TABLE lt_allocvalueschar
             WITH KEY charact = 'ZPPI_MOTIVO_REMANIPULADO'.

  IF sy-subrc = 0.
    pw_datos-motiv_remanip = lt_allocvalueschar-value_char.
  ENDIF.

* Puesto de trabajo
  READ TABLE lt_allocvalueschar
             WITH KEY charact = 'Z_PUESTO_TRABAJO'.

  IF sy-subrc = 0.
    pw_datos-ptrabajo = lt_allocvalueschar-value_char.
  ENDIF.


* decisión de empleo de las bobinas
  READ TABLE lt_allocvalueschar
           WITH KEY charact = 'LOBM_UDCODE'.

  IF sy-subrc = 0.
    pw_datos-vcode = lt_allocvalueschar-value_neutral.
  ENDIF.

ENDFORM.                    " OBTENER_CLASIFICACION_BOB
*&---------------------------------------------------------------------*
*&      Form  FINALIZAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_300  text
*----------------------------------------------------------------------*
FORM finalizar  USING    p_datos TYPE zepp0028_grid_1
                CHANGING error.
  DATA: wa_return        TYPE          bapiret2,
        t_orders         TYPE TABLE OF bapi_order_key,
        t_detail_return  TYPE STANDARD TABLE OF bapi_order_return,
        wa_detail_return TYPE bapi_order_return,
        wa_order         TYPE          bapi_order_key.

  DATA: lv_extnumber TYPE balnrext.


  CLEAR: t_orders, wa_order.
  REFRESH: t_orders.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_datos-aufnr
    IMPORTING
      output = wa_order-order_number.
  APPEND wa_order TO t_orders.

  CALL FUNCTION 'BAPI_PROCORD_SETUSERSTATUS'
    EXPORTING
      status_profile     = 'ZPP00001'
      status             = 'ZP02'
      work_process_group = 'COWORK_BAPI'
      work_process_max   = 99
    IMPORTING
      return             = wa_return
    TABLES
      orders             = t_orders
      detail_return      = t_detail_return
*     APPLICATION_LOG    =
    .

  READ TABLE t_detail_return INTO wa_detail_return WITH KEY type = 'E'.
  IF sy-subrc <> 0.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ELSE.
    error = 'X'.

    CLEAR lv_extnumber.
    CONCATENATE 'Error al finalizar la orden' p_datos-aufnr INTO lv_extnumber
      SEPARATED BY space.

    APPEND wa_return TO gt_messages.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZPP'
        subobjeto = sy-tcode
        mensajes  = gt_messages[]
        extnumber = lv_extnumber.
  ENDIF.

ENDFORM.                    " FINALIZAR
*&---------------------------------------------------------------------*
*&      Form  FIELDCAT_300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_FCAT  text
*----------------------------------------------------------------------*
FORM fieldcat_300  CHANGING lt_fcat TYPE lvc_t_fcat.
  DATA: ls_fcat TYPE lvc_s_fcat.

  CLEAR: lt_fcat. REFRESH: lt_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZEPP0028_GRID_1'
*     i_client_never_display = 'X'
*     i_bypassing_buffer     =
    CHANGING
      ct_fieldcat      = lt_fcat
    EXCEPTIONS
      OTHERS           = 3.

  IF sy-subrc <> 0.

  ELSE.
    LOOP AT lt_fcat INTO ls_fcat.
      CASE ls_fcat-fieldname.
        WHEN 'AUFNR'.
          ls_fcat-hotspot = 'X'.
        WHEN 'WERKS'.
          ls_fcat-no_out = 'X'.
        WHEN 'SECUENCIA'.
          ls_fcat-no_out = 'X'.
        WHEN 'GRAMAJE'.
          ls_fcat-coltext = text-022.
          ls_fcat-scrtext_l = text-022.
          ls_fcat-scrtext_m = text-022.
          ls_fcat-scrtext_s  = text-022.
        WHEN 'CANTIDAD'.
          ls_fcat-coltext = text-023.
          ls_fcat-scrtext_l = text-023.
          ls_fcat-scrtext_m = text-023.
          ls_fcat-scrtext_s  = text-023.
        WHEN 'UNIDAD'.
          ls_fcat-no_out = 'X'.
        WHEN 'ROLLOS'.
          ls_fcat-coltext = text-024.
          ls_fcat-scrtext_l = text-024.
          ls_fcat-scrtext_m = text-024.
          ls_fcat-scrtext_s  = text-024.
        WHEN 'KILOS_NOTIF'.
          ls_fcat-coltext = text-010.
          ls_fcat-scrtext_l = text-010.
          ls_fcat-scrtext_m = text-010.
          ls_fcat-scrtext_s  = text-010.
        WHEN 'ROLLOS_NOTIF'.
          ls_fcat-coltext = text-011.
          ls_fcat-scrtext_l = text-011.
          ls_fcat-scrtext_m = text-011.
          ls_fcat-scrtext_s  = text-011.
        WHEN 'KG_PULPER'.
          ls_fcat-coltext = text-012.
          ls_fcat-scrtext_l = text-012.
          ls_fcat-scrtext_m = text-012.
          ls_fcat-scrtext_s  = text-012.
        WHEN 'COLOR'.
          ls_fcat-no_out = 'X'.
        WHEN 'CALIDAD'.
          ls_fcat-coltext = text-028.
          ls_fcat-scrtext_l = text-028.
          ls_fcat-scrtext_m = text-028.
          ls_fcat-scrtext_s  = text-028.
        WHEN 'ICON_CALIDAD'.
          ls_fcat-just = 'C'.
          ls_fcat-coltext = text-029.
          ls_fcat-scrtext_l = text-029.
          ls_fcat-scrtext_m = text-029.
          ls_fcat-scrtext_s  = text-029.
        WHEN 'ICON_GRAMAJE'.
          ls_fcat-just = 'C'.
          ls_fcat-coltext = text-030.
          ls_fcat-scrtext_l = text-030.
          ls_fcat-scrtext_m = text-030.
          ls_fcat-scrtext_s  = text-030.
        WHEN 'ICON_ANCHO'.
          ls_fcat-just = 'C'.
          ls_fcat-coltext = text-031.
          ls_fcat-scrtext_l = text-031.
          ls_fcat-scrtext_m = text-031.
          ls_fcat-scrtext_s  = text-031.
        WHEN 'ICON_OBSERVACIONES'.
          ls_fcat-just = 'C'.
          ls_fcat-coltext = text-034.
          ls_fcat-scrtext_l = text-034.
          ls_fcat-scrtext_m = text-034.
          ls_fcat-scrtext_s  = text-034.
      ENDCASE.
      MODIFY lt_fcat FROM ls_fcat.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " FIELDCAT_300
*&---------------------------------------------------------------------*
*&      Form  LAYOUT_300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_LAYOUT  text
*      <--P_CLEAR  text
*      <--P_LT_TOOLB  text
*----------------------------------------------------------------------*
FORM layout_300  CHANGING ls_layout TYPE lvc_s_layo.
  ls_layout-zebra = si.
  ls_layout-cwidth_opt = si.

  ls_layout-ctab_fname = 'COLOR'.     "Enlazamos el campo en el layout


ENDFORM.                    " LAYOUT_300
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS_400
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos_400 .
  DATA: t_aufm  TYPE         tty_aufm,
        wa_aufm TYPE LINE OF tty_aufm.

  DATA: t_aufm_309 TYPE tty_aufm.


  DATA: t_anulaciones  TYPE         tty_anulaciones,
        wa_anulaciones TYPE LINE OF tty_anulaciones.

  DATA: lv_ind TYPE sy-tabix.

  DATA: l_objkey           TYPE                   objnum,
        lt_allocvaluesnum  TYPE STANDARD TABLE OF bapi1003_alloc_values_num WITH HEADER LINE,
        lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char WITH HEADER LINE,
        lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr WITH HEADER LINE,
        lt_return          TYPE STANDARD TABLE OF bapiret2.

  DATA: wa_datos_400 TYPE zepp0028_lotes.

  DATA: lv_arbid TYPE plpo-arbid.

  DATA: wa_mseg     TYPE mseg,
        wa_mseg_309 TYPE mseg.


  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = wa_datos_sel-aufnr
    IMPORTING
      output = gv_aufnr_400.

* recuperamos los datos de la orden para obtener el puesto de trabajo (gv_ARBPL)
  SELECT SINGLE * FROM afko
    INTO wa_afko
    WHERE aufnr = wa_datos_sel-aufnr.


  SELECT SINGLE arbid FROM plpo
    INTO lv_arbid
    WHERE plnnr =  wa_afko-plnnr AND
          vornr = '0030'.

  SELECT SINGLE  arbpl  FROM crhd
    INTO gv_arbpl
    WHERE objid = lv_arbid.


* INI CMS MODIFICACION para obtener datos de lotes de rollo
* obtenemos el texto según el centro.
*  CASE wa_datos_sel-werks.
*    WHEN '3000'.
**      gv_text_400 = 'x 2 + 480 mm'.
*    WHEN '3020'.
*      gv_text_400 = 'x 2 + 400 mm'.
*  ENDCASE.
  gv_text_400 = |x 2 + { zcl_secuenciador=>obtener_const_calc_radio_pope( i_werks = wa_datos_sel-werks ) } mm|.

  CLEAR gt_datos_400[].

  CALL METHOD zcl_secuenciador=>obtener_datos_pope
    EXPORTING
      i_aufnr  = wa_datos_sel-aufnr
      i_werks  = gv_werks
    IMPORTING
      ot_datos = gt_datos_400.




ENDFORM.                    " OBTENER_DATOS_400
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DATOS_0400
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_datos_0400 .

  DATA: ls_layout TYPE lvc_s_layo,
        lt_fcat   TYPE lvc_t_fcat.

  DATA: lt_tooltips TYPE lvc_t_qinf,
        lt_toolb    TYPE ui_functions,
        ls_toolb    TYPE ui_func.


  IF gr_container_400 IS NOT BOUND.
    CREATE OBJECT gr_container_400
      EXPORTING
        container_name = 'CONTAINER_400'.

    CREATE OBJECT gr_grid_400
      EXPORTING
        i_parent      = gr_container_400
        i_appl_events = 'X'.

*    perform layout_400 CHANGING ls_layout.

*   Para los eventos
    CREATE OBJECT g_application_400.

    SET HANDLER g_application_400->handle_toolbar
                g_application_400->handle_user_command FOR gr_grid_400.
  ENDIF.

  ls_layout-sel_mode = 'A'.

  PERFORM fieldcat_400 CHANGING lt_fcat.

  PERFORM excluir_botones_400 CHANGING lt_toolb.

  CALL METHOD gr_grid_400->set_table_for_first_display
    EXPORTING
      is_layout            = ls_layout
      it_except_qinfo      = lt_tooltips
      it_toolbar_excluding = lt_toolb
      i_save               = 'A'
    CHANGING
      it_fieldcatalog      = lt_fcat
      it_outtab            = gt_datos_400.


ENDFORM.                    " MOSTRAR_DATOS_0400
*&---------------------------------------------------------------------*
*&      Form  ELIMINAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_SEL  text
*----------------------------------------------------------------------*
FORM eliminar_etiqueta  USING    wa_datos_400 TYPE zepp0028_lotes
                        CHANGING wa_datos_sel TYPE zepp0028_grid_1
                                 error.

* eliminar 101
  PERFORM eliminar_doc USING wa_datos_400-mblnr
                             wa_datos_400-mjahr
                       CHANGING error.

  CHECK error IS INITIAL.

* decrementamos los kg notificados y los rollos notificados.
  wa_datos_sel-kilos_notif = wa_datos_sel-kilos_notif - wa_datos_400-brgew.
  wa_datos_sel-rollos_notif  = wa_datos_sel-rollos_notif - 1.

* eliminamos los tiempos
  PERFORM eliminar_tiempos USING wa_datos_sel-aufnr wa_datos_400-brgew
                           CHANGING error.

*  CHECK error IS INITIAL.

* eliminamos la clasificación del lote
  PERFORM eliminar_clasificacion USING  wa_datos_400-matnr wa_datos_400-charg wa_datos_400-tipo
                                 CHANGING error.


ENDFORM.                    " ELIMINAR
*&---------------------------------------------------------------------*
*&      Form  REIMPRIMIR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_SEL  text
*----------------------------------------------------------------------*
FORM reimprimir  USING wa_header TYPE zepp0028_grid_1
                       wa_body TYPE zepp0028_lotes.

  DATA: lv_answer    TYPE c,
        lv_text(400) TYPE c.

  CASE wa_body-tipo.
    WHEN 'P'.
      MESSAGE i000(0k) WITH text-036 text-037.
      "     No se permite la impresión de etiqueta para un rollo a pulper

    WHEN ''.
*      PERFORM imprimir_etiq_bobina USING wa_header
*                                         wa_body.

      lv_text = '¿Realmente desea imprimir la etiqueta?'.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          titlebar              = text-038 "Reimprimir etiqueta
*         DIAGNOSE_OBJECT       = ' '
          text_question         = lv_text
          text_button_1         = 'Sí'(008)
*         ICON_BUTTON_1         = ' '
          text_button_2         = 'No'(009)
*         ICON_BUTTON_2         = ' '
          default_button        = '2'
          display_cancel_button = ''
*         USERDEFINED_F1_HELP   = ' '
*         START_COLUMN          = 25
*         START_ROW             = 6
*         POPUP_TYPE            =
*         IV_QUICKINFO_BUTTON_1 = ' '
*         IV_QUICKINFO_BUTTON_2 = ' '
        IMPORTING
          answer                = lv_answer
*      TABLES
*         parameter             = lt_param
        EXCEPTIONS
          text_not_found        = 1
          OTHERS                = 2.
      IF sy-subrc <> 0.
*       Implement suitable error handling here
      ENDIF.

      IF lv_answer IS INITIAL OR lv_answer = '1'.
        PERFORM imprimir_etiqueta USING wa_header
                                        wa_body-charg
                                        wa_body-diametro
                                        wa_body-brgew
                                        CHANGING l_rc.
      ENDIF.
  ENDCASE.
ENDFORM.                    " REIMPRIMIR
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_log .

  IF gt_messages[] IS NOT INITIAL.
    READ TABLE gt_messages INTO gs_messages WITH KEY type = ''.
    IF sy-subrc <> 0.

      CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
        TABLES
          i_bapiret2_tab = gt_messages.
    ENDIF.
  ENDIF.

ENDFORM.                    " MOSTRAR_LOG
*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_DOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_400_MBLNR  text
*      -->P_WA_DATOS_400_MJAHR  text
*      <--P_ERROR  text
*----------------------------------------------------------------------*
FORM eliminar_doc  USING   mblnr
                           mjahr
                   CHANGING error.

  DATA: t_return    TYPE TABLE OF bapiret2,
        wa_return   TYPE          bapiret2,
        wa_return_1 TYPE          bapiret1.

  DATA: lv_extnumber TYPE balnrext.


  CALL FUNCTION 'BAPI_GOODSMVT_CANCEL'
    EXPORTING
      materialdocument = mblnr
      matdocumentyear  = mjahr
*     GOODSMVT_PSTNG_DATE       =
*     GOODSMVT_PR_UNAME         =
* IMPORTING
*     GOODSMVT_HEADRET =
    TABLES
      return           = t_return
*     GOODSMVT_MATDOCITEM       =
    .
  READ TABLE t_return INTO wa_return WITH KEY type = 'E'.
  IF sy-subrc <> 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ELSE.
    error = 'X'.


    APPEND LINES OF  t_return TO gt_messages.

    CLEAR lv_extnumber.
    CONCATENATE 'Doc.alta bobina' mblnr mjahr INTO lv_extnumber SEPARATED BY space.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZPP'
        subobjeto = sy-tcode
        mensajes  = gt_messages[]
        extnumber = lv_extnumber.

  ENDIF.

ENDFORM.                    " ELIMINAR_DOC
*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_TIEMPOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_SEL_AUFNR  text
*      -->P_WA_DATOS_SEL_MENGE  text
*      <--P_LV_ERROR  text
*----------------------------------------------------------------------*
FORM eliminar_tiempos  USING    p_aufnr
                                p_menge
                       CHANGING error.

* Las notificaciones de los tiempos en las 2 operaciones, pulper y en máquina,
* en este caso hay que eliminar la notificación de la operación 0040, ya que
* va concatenada con la 0020
* Con la bapi BAPI_PROCORDCONF_GETDETAIL, miro la phase = 0040 y REVERSED = .
* Si cumple esta condición, eliminamos la notificación de tiempo.

  DATA: lv_postg_date TYPE          bapi_pi_confirm-postg_date,
        t_return_1    TYPE TABLE OF bapiret1,
        wa_return_1   TYPE          bapiret1.

  DATA: wa_detail        TYPE          bapi_pi_confirm,
        t_goodsmovements TYPE TABLE OF bapi2017_gm_item_show,
        t_failedgmoves   TYPE TABLE OF bapi_coru_fgm.


  DATA: wa_return        TYPE          bapiret1,
        t_order_range    TYPE TABLE OF bapi_pi_orderrange,
        wa_order_range   TYPE          bapi_pi_orderrange,
        t_confirmations  TYPE TABLE OF bapi_pi_conf_key,
        wa_confirmations TYPE          bapi_pi_conf_key.

  DATA: lv_extnumber TYPE balnrext.


* obtenemos las notificaciones de tiempo
  wa_order_range-sign = 'I'.
  wa_order_range-option = 'EQ'.
  wa_order_range-low = p_aufnr.
  APPEND wa_order_range TO t_order_range.

  CALL FUNCTION 'BAPI_PROCORDCONF_GETLIST'
* EXPORTING
*   PHASE               =
*   SEC_RESOURCE        =
    IMPORTING
      return        = wa_return
    TABLES
      order_range   = t_order_range
*     CONF_RANGE    =
      confirmations = t_confirmations.


* borramos las notificaciones de tiempo


* CMS - 17.07.2020 - 62097 - Corregir error al anular 2º rollo con el mismo peso.
* Se añade al LOOP la condición rev_conf_cnt = 0, para encontrar el registro pendiente de anular.
*  LOOP AT t_confirmations INTO wa_confirmations WHERE reversed = ''.
  LOOP AT t_confirmations INTO wa_confirmations WHERE reversed      = '' AND
                                                      rev_conf_cnt = 0  AND
                                                      phase        = '0040'.
    CLEAR: wa_return_1, wa_detail, t_goodsmovements, t_failedgmoves.
    REFRESH: t_goodsmovements, t_failedgmoves.

    CALL FUNCTION 'BAPI_PROCORDCONF_GETDETAIL'
      EXPORTING
        confirmation        = wa_confirmations-conf_no
        confirmationcounter = wa_confirmations-conf_cnt
      IMPORTING
        return              = wa_return_1
        conf_detail         = wa_detail
      TABLES
        goodsmovements      = t_goodsmovements
        failedgmoves        = t_failedgmoves.

    CHECK wa_detail-yield = p_menge.

*    IF wa_return_1-type <> 'E' AND wa_detail-yield = p_menge AND wa_detail-phase = '0040'. " and

    CLEAR: wa_return_1.

    CALL FUNCTION 'BAPI_PROCORDCONF_CANCEL'
      EXPORTING
        confirmation        = wa_confirmations-conf_no
        confirmationcounter = wa_confirmations-conf_cnt
*       POSTG_DATE          =
*       CONF_TEXT           =
      IMPORTING
        return              = wa_return_1
*       LOCKED              =
*       CREATED_CONF_NO     =
*       CREATED_CONF_COUNT  =
      .

    IF wa_return_1-type <> 'E'.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.

      EXIT.

    ELSE.
      error  = 'X'.

      MOVE-CORRESPONDING wa_return_1 TO gs_messages.
      APPEND gs_messages TO gt_messages.

      CLEAR lv_extnumber.
      CONCATENATE 'Notif.Tiempo' wa_confirmations-conf_no wa_confirmations-conf_cnt
        INTO lv_extnumber SEPARATED BY space.

      CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
        EXPORTING
          objeto    = 'ZPP'
          subobjeto = sy-tcode
          mensajes  = gt_messages[]
          extnumber = lv_extnumber.

**       guardar los en slg1
*        CALL FUNCTION 'ZMONTAR_LOG_SLG1'
*          EXPORTING
*            i_extnumber = ''
*            i_object    = 'ZPP'
*            i_subobject = sy-tcode
*          TABLES
*            t_return    = gt_messages.
    ENDIF.
*    ENDIF.
  ENDLOOP.

ENDFORM.                    " ELIMINAR_TIEMPOS
*&---------------------------------------------------------------------*
*&      Form  FIELDCAT_400
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_FCAT  text
*----------------------------------------------------------------------*
FORM fieldcat_400  CHANGING lt_fcat TYPE lvc_t_fcat.

  DATA: ls_fcat TYPE lvc_s_fcat.

  CLEAR: lt_fcat.
  REFRESH: lt_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZEPP0028_LOTES'
*     i_client_never_display = 'X'
*     i_bypassing_buffer     =
    CHANGING
      ct_fieldcat      = lt_fcat
    EXCEPTIONS
      OTHERS           = 3.

  IF sy-subrc <> 0.

  ELSE.
    LOOP AT lt_fcat INTO ls_fcat.
      ls_fcat-just = 'C'. " FOR JUSTIFICATION

      CASE ls_fcat-fieldname.
        WHEN 'MATNR'.
          ls_fcat-no_out = 'X'.
        WHEN 'AUFNR'.
          ls_fcat-no_out = 'X'.
        WHEN 'TIPO'.
*          ls_fcat-outputlen = 5.
*          ls_fcat-coltext = text-005.
*          ls_fcat-scrtext_l = text-005.
*          ls_fcat-scrtext_m = text-005.
*          ls_fcat-scrtext_s  = text-005.
          ls_fcat-no_out = 'X'.
        WHEN 'MBLNR'.
          ls_fcat-no_out = 'X'.
        WHEN 'MJAHR'.
          ls_fcat-no_out = 'X'.
        WHEN 'DIAMETRO'.
          ls_fcat-coltext = text-035.
          ls_fcat-scrtext_l = text-035.
          ls_fcat-scrtext_m = text-035.
          ls_fcat-scrtext_s  = text-035.
          ls_fcat-just = 'R'. " FOR JUSTIFICATION
        WHEN 'RADIO'.
*          ls_fcat-no_out = 'X'.
          ls_fcat-coltext = text-039.
          ls_fcat-scrtext_l = text-039.
          ls_fcat-scrtext_m = text-039.
          ls_fcat-scrtext_s  = text-039.
          ls_fcat-just = 'R'. " FOR JUSTIFICATION
        WHEN 'BRGEW'.
          ls_fcat-just = 'R'. " FOR JUSTIFICATION
        WHEN 'TIPO_SEM'.
*          ls_fcat-REPTEXT = ''.
**          ls_fcat-coltext = ''.
**          ls_fcat-scrtext_l = ''.
**          ls_fcat-scrtext_m = ''.
**          ls_fcat-scrtext_s  = ''.

        WHEN 'DEFECTOS'.
          ls_fcat-coltext = 'Defectos'.
          ls_fcat-scrtext_l = 'Defectos'.
          ls_fcat-scrtext_m = 'Defectos'.
          ls_fcat-scrtext_s  = 'Defectos'.

      ENDCASE.

*      ls_fcat-col_opt = 'X'.
*      ls_fcat-just = 'C'.

      MODIFY lt_fcat FROM ls_fcat.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " FIELDCAT_400
*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_CLASIFICACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_400_MATNR  text
*      -->P_WA_DATOS_400_CHARG  text
*      -->P_WA_DATOS_400_TIPO  text
*      <--P_ERROR  text
*----------------------------------------------------------------------*
FORM eliminar_clasificacion  USING    p_matnr
                                      p_charg
                                      p_tipo
                             CHANGING error.

  DATA: l_objkey           TYPE                   objnum,
        lv_classnum        TYPE                   bapi1003_key-classnum,
        lt_allocvaluesnum  TYPE STANDARD TABLE OF bapi1003_alloc_values_num WITH HEADER LINE,
        wa_num             TYPE                   bapi1003_alloc_values_num,
        lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char WITH HEADER LINE,
        wa_char            TYPE                   bapi1003_alloc_values_char,
        lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr WITH HEADER LINE,
        t_return           TYPE TABLE OF          bapiret2,
        wa_return          TYPE                   bapiret2.

  DATA: lv_extnumber TYPE balnrext.
  DATA: lv_matnr_pulper TYPE matnr.


  CLEAR: t_return.
  CONCATENATE p_matnr p_charg INTO l_objkey.

  CASE p_tipo.
    WHEN ' '.
      lv_classnum  = 'Z_ROLLO'.

      CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
        EXPORTING
          objectkey       = l_objkey
          objecttable     = 'MCH1'
          classnum        = lv_classnum
          classtype       = '023'
        TABLES
          allocvaluesnum  = lt_allocvaluesnum
          allocvalueschar = lt_allocvalueschar
          allocvaluescurr = lt_allocvaluescurr
          return          = t_return.


      READ TABLE t_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
      CHECK sy-subrc <> 0.

      READ TABLE lt_allocvaluesnum INTO wa_num WITH KEY charact = 'Z_DIAMETRO1'.
      IF sy-subrc = 0.
        CLEAR: wa_num-value_from.
        MODIFY  lt_allocvaluesnum FROM wa_num INDEX sy-tabix.
      ENDIF.


      READ TABLE lt_allocvaluesnum INTO wa_num WITH KEY charact = 'Z_TORNADAS'.
      IF sy-subrc = 0.
        CLEAR: wa_num-value_from.
        MODIFY  lt_allocvaluesnum FROM wa_num INDEX sy-tabix.
      ENDIF.

      READ TABLE lt_allocvaluesnum INTO wa_num WITH KEY charact = 'Z_PESO1'.
      IF sy-subrc = 0.
        CLEAR: wa_num-value_from.
        MODIFY  lt_allocvaluesnum FROM wa_num INDEX sy-tabix.
      ENDIF.

      READ TABLE lt_allocvaluesnum INTO wa_num WITH KEY charact = 'LOBM_HSDAT'.
      IF sy-subrc = 0.
        CLEAR: wa_num-value_from.
        MODIFY  lt_allocvaluesnum FROM wa_num INDEX sy-tabix.
      ENDIF.

      READ TABLE lt_allocvaluesnum INTO wa_num WITH KEY charact = 'Z_HORA'.
      IF sy-subrc = 0.
        CLEAR: wa_num-value_from.
        MODIFY  lt_allocvaluesnum FROM wa_num INDEX sy-tabix.
      ENDIF.


*    WHEN 'R'.
*      lv_classnum  = 'Z_BOBINA'.

    WHEN 'P'.
      lv_matnr_pulper = '2001764'.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = lv_matnr_pulper
        IMPORTING
          output = lv_matnr_pulper.

      CONCATENATE lv_matnr_pulper  p_charg INTO l_objkey.

      lv_classnum  = 'Z_BOBINA_PULPER'.

      CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
        EXPORTING
          objectkey       = l_objkey
          objecttable     = 'MCH1'
          classnum        = lv_classnum
          classtype       = '023'
        TABLES
          allocvaluesnum  = lt_allocvaluesnum
          allocvalueschar = lt_allocvalueschar
          allocvaluescurr = lt_allocvaluescurr
          return          = t_return.


      READ TABLE t_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
      CHECK sy-subrc <> 0.

      READ TABLE lt_allocvaluesnum INTO wa_num WITH KEY charact = 'Z_PESO'.
      IF sy-subrc = 0.
        CLEAR: wa_num-value_from.
        MODIFY  lt_allocvaluesnum FROM wa_num INDEX sy-tabix.
      ENDIF.

      READ TABLE lt_allocvalueschar INTO wa_char WITH KEY charact = 'Z_ROLLO_ORIGEN_V2'.
      IF sy-subrc = 0.
        CLEAR: wa_char-value_char.
        MODIFY  lt_allocvalueschar FROM wa_char INDEX sy-tabix.
      ENDIF.

      READ TABLE lt_allocvalueschar INTO wa_char WITH KEY charact = 'Z_FECHA_FABRICACION'.
      IF sy-subrc = 0.
        CLEAR: wa_char-value_char.
        MODIFY  lt_allocvalueschar FROM wa_char INDEX sy-tabix.
      ENDIF.

      READ TABLE lt_allocvalueschar INTO wa_char WITH KEY charact = 'ZPPI_MOTIVO_RECHAZO'.
      IF sy-subrc = 0.
        CLEAR: wa_char-value_char.
        MODIFY  lt_allocvalueschar FROM wa_char INDEX sy-tabix.
      ENDIF.

      READ TABLE lt_allocvalueschar INTO wa_char WITH KEY charact = 'ZPPI_PUESTO_TRABAJO'.
      IF sy-subrc = 0.
        CLEAR: wa_char-value_char.
        MODIFY  lt_allocvalueschar FROM wa_char INDEX sy-tabix.
      ENDIF.
  ENDCASE.


  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = l_objkey
      objecttable        = 'MCH1'
      classnum           = lv_classnum
      classtype          = '023'
*     STATUS             = '1'
*     STANDARDCLASS      =
*     CHANGENUMBER       =
*     KEYDATE            = SY-DATUM
*     NO_DEFAULT_VALUES  = ' '
*   IMPORTING
*     CLASSIF_STATUS     =
    TABLES
      allocvaluesnumnew  = lt_allocvaluesnum
      allocvaluescharnew = lt_allocvalueschar
      allocvaluescurrnew = lt_allocvaluescurr
      return             = t_return.

  READ TABLE t_return INTO wa_return WITH KEY type = 'E'.
  IF sy-subrc = 0.
    error = 'X'.

    gt_messages = t_return.

    CLEAR lv_extnumber.
    CONCATENATE 'Eliminar Clasif. Lote'  p_charg 'del material' p_matnr
      INTO lv_extnumber SEPARATED BY space.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZPP'
        subobjeto = sy-tcode
        mensajes  = gt_messages[]
        extnumber = lv_extnumber.


  ENDIF.

ENDFORM.                    " ELIMINAR_CLASIFICACION
*&---------------------------------------------------------------------*
*&      Form  CLEAN_VBLES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM clean_vbles .
  CLEAR: gv_aufnr, gv_aufnr_int. "INI - 22.09.17 - ampliación programa

  CLEAR: gv_okcode, gv_kg, gv_radio, gv_aufnr_400, gv_arbpl, gt_datos_400,
         gv_pulper.
  REFRESH: gt_datos_400.

ENDFORM.                    " CLEAN_VBLES
*&---------------------------------------------------------------------*
*&      Form  ETIQUETA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM notificar_rollo USING wa_datos_sel TYPE zepp0028_grid_1
              CHANGING p_charg_new.

  DATA: lv_error     TYPE xfeld,
        lv_mblnr     TYPE bapi2017_gm_head_ret-mat_doc,
        lv_mjahr     TYPE bapi2017_gm_head_ret-doc_year,
        lv_charg_new TYPE charg_d.

  DATA: wa_body TYPE zepp0028_lotes.

  DATA: lv_extnumber TYPE balnrext.

*  DATA: t_datos TYPE ztt_notificacion_rollos.

*1.- ALTA STOCK CONTRA ORDEN Y CREACION LOTE
  PERFORM alta_stock USING wa_datos_sel
                     CHANGING lv_mblnr
                              lv_mjahr
                              lv_charg_new
                              lv_error.

  IF lv_error <> 'X'.

*2.- CLASIFICAR LOTE
    PERFORM clasificar_lote USING wa_datos_sel
                                  lv_charg_new
                            CHANGING lv_error.

    IF lv_error <> 'X'.

*3.- NOTICAR
      PERFORM notificar_orden CHANGING wa_datos_sel
                                       lv_error.

      IF lv_error <> 'X'.
*4.- CAMBIAR STATUS DE LA ORDEN A E0004

*    INI - CMS - 17.07.2020 - 62097 - Suprimir la asignación de estado ZP04
*        PERFORM cambiar_status USING wa_datos_sel-aufnr.
*    FIN CMS


*5.- IMPRESION ETIQUETA
        CLEAR: gwa_body , gv_charg_new , gwa_datos_sel.
        gwa_body      = wa_body.
        gv_charg_new  = lv_charg_new.
        gwa_datos_sel = wa_datos_sel.



*        PERFORM imprimir_etiqueta USING wa_datos_sel
*                                        lv_charg_new
*                                        wa_body.
        p_charg_new = lv_charg_new.
      ELSE.

*       Anular clasificacion del lote y alta de stock
        PERFORM anular_doc USING lv_mblnr
                                 lv_mjahr
                           CHANGING lv_error.

        PERFORM anular_clasificacion_lote USING wa_datos_sel
                                                lv_charg_new
                                          CHANGING lv_error.

      ENDIF.
    ELSE.
*     Anular alta de stock
      PERFORM anular_doc USING lv_mblnr
                               lv_mjahr
                         CHANGING lv_error.
    ENDIF.
  ENDIF.


** si todo ha ido bien, lanzamos la información a MES
*  IF lv_error <> 'X'.
*    CALL FUNCTION 'ZNOTIFICACION_ROLLOS'
*     EXPORTING
*       I_WERKS              = wa_datos_sel-werks
*       I_ID_ROLLO_MES       = ''
*       I_CHARG              = lv_charg_new
*       I_MATNR              = wa_datos_sel-PLNBEZ
*     IMPORTING
*       E_DATOS              = t_datos
*              .
*    endif.

*  CLEAR: gv_kg, gv_radio.

* Mostrar Log
  PERFORM mostrar_log.

  CLEAR lv_extnumber.

  CHECK gt_messages IS NOT INITIAL.
  READ TABLE gt_messages INTO gs_messages WITH KEY type = ''.
  IF sy-subrc <> 0.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZPP'
        subobjeto = sy-tcode
        mensajes  = gt_messages[]
        extnumber = lv_extnumber.
  ENDIF.

*  PERFORM clean_vbles.
ENDFORM.                    " ETIQUETA
*&---------------------------------------------------------------------*
*&      Form  ALTA_STOCK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alta_stock USING  wa_datos_sel TYPE zepp0028_grid_1
                CHANGING p_mblnr TYPE  bapi2017_gm_head_ret-mat_doc
                         p_mjahr TYPE  bapi2017_gm_head_ret-doc_year
                         p_charg_new TYPE charg_d
                         error TYPE xfeld.


  DATA: ls_header  TYPE bapi2017_gm_head_01,
        lt_return  LIKE bapiret2 OCCURS 0,
        ls_return  TYPE bapiret2,
        lt_item    LIKE bapi2017_gm_item_create OCCURS 0,
        ls_item    TYPE bapi2017_gm_item_create,
        ls_headret TYPE bapi2017_gm_head_ret.


  DATA: lv_extnumber TYPE balnrext.

  CLEAR: lt_item,
         ls_header,
         ls_item.

  REFRESH: lt_item,
           lt_return.



* cabecera
  ls_header-pstng_date = sy-datum.
  ls_header-doc_date   = sy-datum.
  ls_header-pr_uname = sy-uname.

  ls_header-header_txt = 'Notificación de rollos'.

* posicion
  ls_item-material = wa_afko-plnbez.
  ls_item-plant = ls_aufk-werks.

  SELECT SINGLE lgort INTO ls_item-stge_loc
   FROM afpo
   WHERE aufnr = wa_afko-aufnr AND
         posnr = '0001'.

  ls_item-move_type = '101'.
  ls_item-entry_qnt = gv_kg. "p_menge.
  ls_item-entry_uom = 'KG'.
  ls_item-orderid = wa_datos_sel-aufnr.
  ls_item-mvt_ind = 'F'.
  APPEND ls_item TO lt_item.


  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_header
      goodsmvt_code    = '02'
*     TESTRUN          = ' '
*     GOODSMVT_REF_EWM =
    IMPORTING
      goodsmvt_headret = ls_headret
      materialdocument = p_mblnr
      matdocumentyear  = p_mjahr
    TABLES
      goodsmvt_item    = lt_item
*     GOODSMVT_SERIALNUMBER         =
      return           = lt_return
*     GOODSMVT_SERV_PART_DATA       =
*     EXTENSIONIN      =
    .

  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  IF sy-subrc <> 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

    SELECT SINGLE charg FROM mseg
      INTO p_charg_new
      WHERE mblnr = p_mblnr AND
            mjahr = p_mjahr.
  ELSE.

    error = 'X'.
    APPEND LINES OF lt_return TO gt_messages.

  ENDIF.
ENDFORM.                    " ALTA_STOCK
*&---------------------------------------------------------------------*
*&      Form  CLASIFICAR_LOTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM clasificar_lote USING wa_datos_sel TYPE zepp0028_grid_1
                           p_charg_new
                     CHANGING error.

  DATA: lv_object            TYPE objnum,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        ls_return            TYPE bapiret2.

  DATA: lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab.

*  DATA: lv_extnumber TYPE balnrext.


  CLEAR: lv_object, lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.
  CLEAR: ls_alloc_values_num, ls_alloc_values_char, ls_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.



  CONCATENATE wa_datos_sel-plnbez p_charg_new INTO lv_object.

  " DIAMETRO:
  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_DIAMETRO1'.

*  CASE wa_datos_sel-werks.
*    WHEN '3000'.
*      ls_alloc_values_num-value_from = gv_radio * 2 + 480.
*    WHEN '3020'.
*      ls_alloc_values_num-value_from = gv_radio * 2 + 400.
*  ENDCASE.
* Variable 400/480 parametrizada en tabla, no hardcodes! CMS 18/06/2019
  ls_alloc_values_num-value_from = gv_radio * 2 + zcl_secuenciador=>obtener_const_calc_radio_pope( i_werks = wa_datos_sel-werks ).


*  ls_alloc_values_num-value_from = gv_radio * 2 + 400.
  APPEND ls_alloc_values_num TO lt_alloc_values_num.


  " TORNADAS:
  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_TORNADAS'.
  ls_alloc_values_num-value_from = wa_datos_sel-tornadas.
  APPEND ls_alloc_values_num TO lt_alloc_values_num.

  "FECHA DE FABRICACION:
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'LOBM_HSDAT'.
  WRITE sy-datum TO ls_alloc_values_char-value_char.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.

  " HORA DE FABRICACION:
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'Z_HORA'.
  WRITE sy-uzeit TO ls_alloc_values_char-value_char.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.

  " PESO:
  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_PESO1'.
  ls_alloc_values_num-value_from = gv_kg.
  APPEND ls_alloc_values_num TO lt_alloc_values_num.

* CMS 01/07/2019 Trazabilidad operario.
* Grabamos el Operario como característica del lote.
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'Z_OPERARIO'.
  ls_alloc_values_char-value_char = gv_nombre_oper.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.

* CMS 09/07/2020 Añadir contramaestre.
* Grabamos el Contramaestre como característica del lote.
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'Z_CONTRAMAESTRE'.
  ls_alloc_values_char-value_char = gv_nombre_contr.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.

* CMS Recja etas Fase II se añade FSC->100% ya que en el nuevo proceso de reparto pulper,
* no se trataran las características(FSC) del rollo.
  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_FSC_PORCENTAJE'.
  ls_alloc_values_num-value_from = 100.
  APPEND ls_alloc_values_num TO lt_alloc_values_num.


  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = lv_object
      objecttable        = 'MCH1'
      classnum           = 'Z_ROLLO'
      classtype          = '023'
*     STATUS             = '1'
*     STANDARDCLASS      =
*     CHANGENUMBER       =
      keydate            = sy-datum
*     NO_DEFAULT_VALUES  = ' '
*   IMPORTING
*     CLASSIF_STATUS     =
    TABLES
      allocvaluesnumnew  = lt_alloc_values_num
      allocvaluescharnew = lt_alloc_values_char
      allocvaluescurrnew = lt_alloc_values_curr
      return             = lt_return.

  CLEAR ls_return.
  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  IF ls_return IS NOT INITIAL. " Error act. característica
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*       IMPORTING
*         RETURN        =
      .

    error = 'X'.

    APPEND LINES OF lt_return TO gt_messages.

*    CLEAR lv_extnumber.
*
*    CONCATENATE 'Error al clasificar el lote' lv_charg INTO lv_extnumber SEPARATED BY space.
*
*    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
*      EXPORTING
*        objeto    = 'ZPP'
*        subobjeto = sy-tcode
*        mensajes  = gt_messages[]
*        extnumber = lv_extnumber.

  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ENDIF.

ENDFORM.                    " CLASIFICAR_LOTE
*&---------------------------------------------------------------------*
*&      Form  NOTIFICAR_ORDEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM notificar_orden CHANGING wa_datos_sel TYPE zepp0028_grid_1
                              error.


  DATA: lti_detail TYPE TABLE OF bapi_coru_return WITH HEADER LINE,
        ls_return1 TYPE          bapiret1.

  DATA: ls_return TYPE bapiret2.
  DATA: ls_ret2 TYPE bapiret1.

*  DATA: lti_times   TYPE TABLE OF bapi_pi_timeticket1 WITH HEADER LINE,
  DATA: lti_times   TYPE STANDARD TABLE OF bapi_pi_timeticket1,
        ls_times    LIKE LINE OF lti_times,
        lti_goodmov TYPE TABLE OF bapi2017_gm_item_create WITH HEADER LINE,
        lti_link    TYPE TABLE OF bapi_link_conf_goodsmov WITH HEADER LINE.
  DATA: ls_propose TYPE bapi_pp_conf_prop.


  DATA: lv_gamng TYPE          gamng,
        lv_rsnum TYPE          rsnum,
        ls_resb  TYPE          resb,
        lti_resb TYPE TABLE OF resb.

  DATA: lv_extnumber TYPE balnrext.



* Recuperamos los datos de la notificación
  CLEAR: ls_return, lti_times[] , ls_times.
  ls_times-orderid        = wa_datos_sel-aufnr.
  ls_times-phase          = '0040'.
  ls_times-fin_conf       = '1'.
  ls_times-plant          = gv_werks.
  ls_times-yield          = gv_kg.
  ls_times-conf_quan_unit = 'KG'.
  ls_times-clear_res      = 'X'.
  INSERT ls_times INTO TABLE lti_times.
*  APPEND lti_times.


* 11/01/2021 - CMS - 64497 - Notificaciones tiempos MO y Maq a cero en pope una vez se alcanza la fab teórica.
* Cuando se han sobrepasado los kg. de la OF, la BAPI devuelve activity1 y activity2 (tiempos de MO y Máquina) a blancos.
* Se realiza la llamada con el flag ls_propose-quantity a blancos.

  CLEAR ls_propose.
  ls_propose-goodsmovement = 'X'.
*  ls_propose-quantity = 'X'.
  ls_propose-quantity = ' '. "No informar cantidad
  ls_propose-activity = 'X'.
  ls_propose-personnel = 'X'.
  CLEAR ls_ret2.

* Recuperamos los datos de la BAPI que notifica
  CALL FUNCTION 'BAPI_PROCORDCONF_GET_TT_PROP'
    EXPORTING
      propose            = ls_propose
    IMPORTING
      return             = ls_ret2
    TABLES
      timetickets        = lti_times
      goodsmovements     = lti_goodmov
      link_conf_goodsmov = lti_link.

*  LOOP AT lti_times ASSIGNING FIELD-SYMBOL(<fs_times>).
*    <fs_times>-exec_fin_date   = sy-datum.
*    <fs_times>-exec_fin_time   = sy-uzeit.
*    <fs_times>-exec_start_date = wa_afko-ftrmi.
*
*    <fs_times>-conf_activity1 = (  <fs_times>-conf_activity1 * gv_kg ) /  <fs_times>-yield.
*    <fs_times>-conf_activity2 = (  <fs_times>-conf_activity2 * gv_kg ) /  <fs_times>-yield.
*    <fs_times>-conf_activity3 = gv_kg.
*    <fs_times>-yield =  gv_kg.
*
**    MODIFY lti_times.
*  ENDLOOP.
  " Recuperamos la reserva y la cantidad total para calcular la proporción:
  CLEAR: lv_gamng, lv_rsnum.
  SELECT SINGLE gamng rsnum INTO (lv_gamng, lv_rsnum)
    FROM caufv
    WHERE aufnr = wa_datos_sel-aufnr.

  REFRESH: lti_resb.
  CLEAR: lti_resb, ls_resb.
  SELECT * INTO CORRESPONDING FIELDS OF TABLE lti_resb
    FROM resb
    WHERE rsnum = lv_rsnum
    AND rgekz = 'X'.

  LOOP AT lti_goodmov.
    CLEAR ls_resb.
    READ TABLE lti_resb INTO ls_resb WITH KEY rsnum = lti_goodmov-reserv_no
                                              rspos = lti_goodmov-res_item
                                              matnr = lti_goodmov-material
                                              werks = lti_goodmov-plant.
    IF ls_resb IS NOT INITIAL.
      lti_goodmov-entry_qnt = ( ls_resb-bdmng * gv_kg ) / lv_gamng.
      MODIFY lti_goodmov.
    ENDIF.
  ENDLOOP.

  CALL FUNCTION 'BAPI_PROCORDCONF_CREATE_TT'
*   EXPORTING
*     POST_WRONG_ENTRIES             = '0'
*     TESTRUN                        =
    IMPORTING
      return             = ls_return1
    TABLES
      timetickets        = lti_times
      goodsmovements     = lti_goodmov
      link_conf_goodsmov = lti_link
*     CHARACTERISTICS_WIPBATCH       =
*     LINK_CONF_CHAR_WIPBATCH        =
      detail_return      = lti_detail.

  READ TABLE lti_detail WITH KEY type = 'E'.
  IF sy-subrc = 0.

    error = 'X'.

    MOVE-CORRESPONDING ls_return1 TO gs_messages.
    APPEND gs_messages TO gt_messages.

*    CLEAR lv_extnumber.
*
*    CONCATENATE 'Error al notificar la orden' wa_datos_sel-aufnr INTO lv_extnumber SEPARATED BY space.
*
*    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
*      EXPORTING
*        objeto    = 'ZPP'
*        subobjeto = sy-tcode
*        mensajes  = gt_messages[]
*        extnumber = lv_extnumber.


  ELSE.
    wa_datos_sel-kilos_notif   = wa_datos_sel-kilos_notif + gv_kg.
    wa_datos_sel-rollos_notif = wa_datos_sel-rollos_notif + 1.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ENDIF.

ENDFORM.                    " NOTIFICAR_ORDEN
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ETIQUETA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_etiqueta USING wa_datos_sel TYPE zepp0028_grid_1
                             p_charg TYPE charg_d
*                             wa_body TYPE zepp0028_lotes.
                             p_diametro TYPE zdiametro
                             p_brgew    TYPE zpeso
                      CHANGING p_rc TYPE char2.

  DATA: ls_rollo TYPE zspp_etiq_rollo_alta.

*  IF wa_body IS NOT INITIAL.
  IF p_diametro IS NOT INITIAL AND p_brgew IS NOT INITIAL.
    ls_rollo-diametro = p_diametro.
    CONDENSE ls_rollo-diametro.
    ls_rollo-charg = p_charg.
    ls_rollo-tornada = wa_datos_sel-tornadas.
    ls_rollo-aufnr = wa_datos_sel-aufnr.
    ls_rollo-peso = p_brgew. "wa_body-brgew. "p_menge.
    ls_rollo-matnr = wa_afko-plnbez.
  ELSE.

*    CASE wa_datos_sel-werks.
*      WHEN '3000'.
*        ls_rollo-diametro = gv_radio * 2 + 480.
*      WHEN '3020'.
*        ls_rollo-diametro = gv_radio * 2 + 400.
*    ENDCASE.
* Variable 400/480 parametrizada en tabla, no hardcodes! CMS 18/06/2019
    ls_rollo-diametro = gv_radio * 2 + zcl_secuenciador=>obtener_const_calc_radio_pope( i_werks = wa_datos_sel-werks )..




    ls_rollo-charg = p_charg.
    ls_rollo-tornada = wa_datos_sel-tornadas.
    ls_rollo-aufnr = wa_datos_sel-aufnr.
    ls_rollo-peso = gv_kg.
    ls_rollo-matnr = wa_datos_sel-plnbez.
  ENDIF.


  SELECT SINGLE * INTO ls_aufk FROM aufk WHERE aufnr = wa_datos_sel-aufnr.

  ls_rollo-zzebeln1 = |{ ls_aufk-zzebeln1 ALPHA = OUT }| .
  ls_rollo-zzebeln2 = |{ ls_aufk-zzebeln2 ALPHA = OUT }| .
  ls_rollo-zzebeln3 = |{ ls_aufk-zzebeln3 ALPHA = OUT }| .
  ls_rollo-zzebelp1 = |{ ls_aufk-zzebelp1 ALPHA = OUT }| .
  ls_rollo-zzebelp2 = |{ ls_aufk-zzebelp2 ALPHA = OUT }| .
  ls_rollo-zzebelp3 = |{ ls_aufk-zzebelp3 ALPHA = OUT }| .
  ls_rollo-zzrepart1 = |{ ls_aufk-zzurgt1 ALPHA = OUT }| .
  ls_rollo-zzrepart2 = |{ ls_aufk-zzurgt2 ALPHA = OUT }| .
  ls_rollo-zzrepart3 = |{ ls_aufk-zzurgt3 ALPHA = OUT }| .

  ls_rollo-zzkunnr1 = ls_aufk-zzkunnr1.
  ls_rollo-zzkunnr2 = ls_aufk-zzkunnr2.
  ls_rollo-zzkunnr3 = ls_aufk-zzkunnr3.

  ls_rollo-werks = gv_werks.

  SELECT SINGLE zzancho1 , zzancho2 , zzancho3
    FROM ztpp0009
    INTO ( @ls_rollo-zzancho1 , @ls_rollo-zzancho2 , @ls_rollo-zzancho3 )
    WHERE werks         = @gv_werks
          AND aufnr     = @gv_aufnr
          AND num_fabr  = @gv_num_fabr.

  CALL FUNCTION 'ZMFPP_ETIQ_ROLLO_ALTA'
    EXPORTING
      i_rollo      = ls_rollo
      i_reimp_peso = 'X'
      i_nodialog   = ' '
    IMPORTING
      o_printparms = gs_printparms
      o_rc         = p_rc.


ENDFORM.                    " IMPRIMIR_ETIQUETA
*&---------------------------------------------------------------------*
*&      Form  VALIDAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GV_KG  text
*      -->P_GV_RADIO  text
*      <--P_LV_ERROR  text
*----------------------------------------------------------------------*
FORM validar_datos  USING   p_matnr
                            p_werks
                            p_kg
                            p_radio
                    CHANGING p_error.

  IF gv_kg => 20000.
    p_error = 'X'.
    MESSAGE i000(zpp) WITH text-045.
    EXIT.
  ENDIF.
  IF p_kg IS INITIAL OR p_radio IS INITIAL.
    p_error = 'X'.
    MESSAGE i000(zpp) WITH text-015.
  ELSE.
    PERFORM calcular_valores_max USING p_matnr
                                        p_werks
                                        p_kg
                                        p_radio
                                 CHANGING p_error.
  ENDIF.

ENDFORM.                    " VALIDAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  SELECCIONAR_MOTIVO_PULPER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GV_PULPER  text
*----------------------------------------------------------------------*
FORM seleccionar_motivo_pulper  CHANGING p_pulper
                                         lv_error.
  DATA: lv_atinn TYPE atinn.

  TYPES: BEGIN OF tipo_reproceso,
           atwrt TYPE atwrt,
           atwtb TYPE atwtb.
  TYPES: END OF tipo_reproceso.
  TYPES: tty_tipo_reproceso TYPE TABLE OF tipo_reproceso.

  DATA: lt_reproceso       TYPE          tty_tipo_reproceso,
        wa_reproceso       TYPE LINE OF  tty_tipo_reproceso,
        lt_zvpp_carac_repr TYPE TABLE OF zvpp_carac_repr,
        wa_vpp_carac_repr  TYPE          zvpp_carac_repr.

  DATA: lv_choice TYPE sy-tabix,
        l_rc      TYPE c,
        lv_text   TYPE c LENGTH 100.


  SELECT SINGLE atinn FROM cabn
    INTO lv_atinn
    WHERE atnam = 'ZPPI_MOTIVO_RECHAZO'.

  IF lv_atinn IS NOT INITIAL.
    SELECT * FROM zvpp_carac_recha
      INTO TABLE lt_zvpp_carac_repr
      WHERE atinn = lv_atinn.

    IF lt_zvpp_carac_repr[] IS NOT INITIAL.

      LOOP AT lt_zvpp_carac_repr INTO wa_vpp_carac_repr.
        MOVE-CORRESPONDING wa_vpp_carac_repr TO wa_reproceso.
        APPEND wa_reproceso TO lt_reproceso.
      ENDLOOP.


      CALL FUNCTION 'POPUP_WITH_TABLE_DISPLAY'
        EXPORTING
          endpos_col   = 60
          endpos_row   = 20
          startpos_col = 1
          startpos_row = 1
          titletext    = text-027
        IMPORTING
          choise       = lv_choice
        TABLES
          valuetab     = lt_reproceso
        EXCEPTIONS
          break_off    = 1
          OTHERS       = 2.
      IF sy-subrc <> 0.
        lv_error = 'X'.
*       Implement suitable error handling here
      ELSE.
        IF lv_choice IS NOT INITIAL.
          READ TABLE lt_reproceso INTO wa_reproceso INDEX lv_choice.

          lv_text = wa_reproceso-atwtb.

          CALL FUNCTION 'POPUP_TO_CONFIRM_STEP'
            EXPORTING
              defaultoption  = '2'
              textline1      = text-026 "¿Está seguro del motivo indicado?'(902)
              textline2      = lv_text "
              titel          = 'Confirmación'(904)
              cancel_display = ' '
            IMPORTING
              answer         = l_rc
            EXCEPTIONS
              text_not_found = 1
              OTHERS         = 2.
          IF sy-subrc <> 0.
            lv_error = 'X'.
          ELSE.
            IF l_rc EQ 'J'. "Si
              p_pulper = wa_reproceso-atwrt.
            ELSEIF l_rc EQ 'A'. "cancelar el proceso de seleccion
              lv_error = 'X'.
            ELSE.
              p_pulper = ''.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.                    " SELECCIONAR_MOTIVO_PULPER
*&---------------------------------------------------------------------*
*&      Form  PULPER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GV_PULPER  text
*----------------------------------------------------------------------*
FORM pulper  USING  wa_datos_sel TYPE zepp0028_grid_1
                    pulper.


  DATA: lv_error                TYPE xfeld,
        lv_mblnr_alta           TYPE mblnr,
        lv_mjahr_alta           TYPE mjahr,
        lv_mblnr_transformacion TYPE mblnr,
        lv_mjahr_transformacion TYPE mjahr,
        lv_charg_rollo          TYPE charg_d,
        lv_charg_transformacion TYPE charg_d.

  DATA: lv_extnumber TYPE balnrext.

*  DATA: t_datos TYPE ztt_notificacion_rollos.


  PERFORM alta_stock USING wa_datos_sel
                     CHANGING lv_mblnr_alta
                              lv_mjahr_alta
                              lv_charg_rollo
                              lv_error.
  IF lv_error <> 'X'.

*   clasificamos el lote del 101
    PERFORM clasificar_lote USING wa_datos_sel
                                  lv_charg_rollo
                            CHANGING lv_error.

    IF lv_error IS INITIAL.
*     NOTICAR
      PERFORM notificar_orden CHANGING wa_datos_sel
                                       lv_error.

      IF lv_error IS INITIAL.
*       creación lote pulper
        CALL FUNCTION 'ZMFMM0002'
          EXPORTING
            i_werks               = gv_werks
*           i_mtart               = lv_mtart
            i_matnr               = c_matco
          IMPORTING
            o_charg               = lv_charg_transformacion
          EXCEPTIONS
            centro_no_contemplado = 1
            no_sujeto_lote        = 2
            OTHERS                = 3.
        IF sy-subrc = 0.
*         Conversión de material del rollo original al material pulper
*         en el almacén de rollos (1020)
          PERFORM transformacion USING lv_charg_rollo
                                       lv_charg_transformacion
                                 CHANGING wa_datos_sel
                                          lv_error
                                          lv_mblnr_transformacion
                                          lv_mjahr_transformacion.
          IF lv_error IS INITIAL.
*           Cambiar status de la orden a E0004
            PERFORM cambiar_status USING wa_datos_sel-aufnr.

*           clasificar lote
            PERFORM clasificar_lote_pulper USING wa_datos_sel
                                                 lv_charg_transformacion
                                                 pulper
                                          CHANGING lv_error.
          ELSE.
            PERFORM anular_doc USING lv_mblnr_transformacion
                                     lv_mjahr_transformacion
                               CHANGING lv_error.
            IF lv_error IS INITIAL.
              wa_datos_sel-kg_pulper = wa_datos_sel-kg_pulper - gv_kg.
              wa_datos_sel-kilos_notif = wa_datos_sel-kilos_notif - gv_kg.
              wa_datos_sel-rollos_notif = wa_datos_sel-rollos_notif - 1.
            ENDIF.

            PERFORM anular_doc USING lv_mblnr_alta
                                     lv_mjahr_alta
                               CHANGING lv_error.

          ENDIF.
        ELSE.
          lv_error = 'X'.

          gs_messages-type = 'E'.
          gs_messages-id = 'ZPP'.
          gs_messages-number = '000'.
          gs_messages-message = 'Error en la creación del lote pulper'.

          APPEND gs_messages TO gt_messages.

        ENDIF.
      ELSE.
*       Anular clasificacion del lote y alta de stock
        PERFORM anular_doc USING lv_mblnr_alta
                                 lv_mjahr_alta
                           CHANGING lv_error.

        PERFORM anular_clasificacion_lote USING wa_datos_sel
                                                lv_charg_rollo
                                          CHANGING lv_error.
      ENDIF.
    ELSE.
*     Anular alta de stock
      PERFORM anular_doc USING lv_mblnr_alta
                               lv_mjahr_alta
                         CHANGING lv_error.
    ENDIF.
  ENDIF.


* Montar log SLG1
  CLEAR lv_extnumber.
  CONCATENATE c_matco lv_charg_transformacion INTO lv_extnumber.

  IF gt_messages[] IS NOT INITIAL.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZPP'
        subobjeto = sy-tcode
        mensajes  = gt_messages[]
        extnumber = lv_extnumber.
  ENDIF.

  PERFORM clean_vbles.

* Mostrar Log
  PERFORM mostrar_log.




ENDFORM.                    " PULPER
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DATOS_0200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
****FORM mostrar_datos_0200 .
****  DATA: ls_layout TYPE lvc_s_layo,
****        lt_fcat   TYPE lvc_t_fcat,
****        ls_fcat   TYPE lvc_s_fcat.
****
****  DATA: lt_tooltips TYPE lvc_t_qinf,
****        lt_toolb    TYPE ui_functions,
****        ls_toolb    TYPE ui_func.
****
****
****  IF gr_container_200 IS INITIAL. "IS NOT BOUND.
****    CREATE OBJECT gr_container_200
****      EXPORTING
****        container_name = 'CONTAINER_200'.
****
****    CREATE OBJECT gr_grid_200
****      EXPORTING
****        i_parent = gr_container_200.
****  ENDIF.
****
****
****  CLEAR: lt_fcat.
****  REFRESH: lt_fcat.
****
****  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
****    EXPORTING
****      i_structure_name = 'ZEPP_ENT_PROD_ZRPP0028'
*****     i_client_never_display = 'X'
*****     i_bypassing_buffer     =
****    CHANGING
****      ct_fieldcat      = lt_fcat
****    EXCEPTIONS
****      OTHERS           = 3.
****
****  IF sy-subrc <> 0.
****
****  ENDIF.
****
****
****  CLEAR:  lt_toolb.
****  REFRESH:  lt_toolb.
****
****  ls_toolb = cl_gui_alv_grid=>mc_fc_call_crbatch.
****  APPEND ls_toolb TO lt_toolb.
****
****  lt_tooltips = gt_exc.
****
****  CALL METHOD gr_grid_200->set_table_for_first_display
****    EXPORTING
****      is_layout            = ls_layout
****      it_except_qinfo      = lt_tooltips
****      it_toolbar_excluding = lt_toolb
****      i_save               = 'A'
****    CHANGING
****      it_fieldcatalog      = lt_fcat
****      it_outtab            = gt_entradas.
****
****ENDFORM.                    " MOSTRAR_DATOS_0200
*&---------------------------------------------------------------------*
*&      Form  ALTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alta .
  DATA: index_rows       TYPE         lvc_t_row,
        lt_sel_rows      TYPE         lvc_t_roid,
        ls_selected_line LIKE LINE OF lt_sel_rows.

  DATA: lv_error TYPE xfeld.
  DATA: lv_extnumber TYPE balnrext.
  DATA: num_reg TYPE sy-tabix.


*  REFRESH lt_sel_rows.

  CALL METHOD gr_grid_300->get_selected_rows(
    IMPORTING
      et_row_no     = lt_sel_rows
      et_index_rows = index_rows ).

  CALL METHOD cl_gui_cfw=>flush.

  DESCRIBE TABLE  lt_sel_rows LINES num_reg.
  IF num_reg = 0.
    MESSAGE i000(0k) WITH text-001.
  ELSEIF num_reg > 1.
    MESSAGE i000(0k) WITH text-002.
  ELSE.
    READ TABLE lt_sel_rows INTO ls_selected_line INDEX 1.
    READ TABLE gt_datos_300 INTO wa_datos_sel INDEX ls_selected_line-row_id.

    LEAVE TO SCREEN 400.
  ENDIF.

ENDFORM.                    " ALTA
*&---------------------------------------------------------------------*
*&      Form  COLORER_CELDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1170   text
*      <--P_WA_DATOS_300_COLOR  text
*----------------------------------------------------------------------*
FORM colorer_celda  USING    p_columna  TYPE lvc_fname
                    CHANGING ls_cellcolor TYPE lvc_s_scol.


  CLEAR ls_cellcolor.
  ls_cellcolor-fname = p_columna. "ls_mod_cells-fieldname.
  ls_cellcolor-color-col = '6' .
  ls_cellcolor-color-int = '1'.

ENDFORM.                    " COLORER_CELDA

FORM calcular_valores_max  USING    p_matnr
                                    p_werks
                                    p_kg
                                    p_radio
                           CHANGING p_error.
* validación peso: obtener el peso aproximado del rollo aplicando la
* siguiente fórmula:
* Peso =  820 ( R^2  0,16) ( PI() x Ancho))
* donde R es el radio introducido en la notificación y ancho (MARA-ZZANCHO)
* se obtiene del material.
* En la tabla ZTPP0008 se incluirá un campo Tolerancia validación peso
* donde se informará por cada máquina la tolerancia permitida en esta validación.
* Si la diferencia entre el peso introducido y el peso calculado supera,
* por exceso o por defecto, la tolerancia permitida se avisará de esta
* circunstancia (Datos de notificación incoherentes (peso) Desea notificar
* igualmente | Cancelar, Aceptar)


  DATA: lv_radio          TYPE p DECIMALS 2,
        lv_matnr          TYPE matnr,
        lv_gramaje        TYPE mara-zzgramaje,
        lv_ancho          TYPE mara-zzancho,
        lv_ancho_d        TYPE p LENGTH 4 DECIMALS 2,
        lv_densidad       TYPE atflv,
        lv_peso           TYPE atflv,
        lv_dif_peso       TYPE atflv,
        lv_coeficiente    TYPE atflv,
        lv_coeficiente1   TYPE atflv,
        lv_coeficiente2   TYPE atflv,
        lv_radio_mandril  TYPE zzdiametro,
        lv_radio2_mandril TYPE zzdiametro.

*datos introducidos por el usuario:
* p_kg
*p_radio

  CONSTANTS: c_pi TYPE p DECIMALS 10 VALUE '3.1415926536'.

  DATA: wa_ztpp0008 TYPE ztpp0008.

  DATA: lv_answer      TYPE c,
        lv_text(400)   TYPE c,
        lv_text_2(400) TYPE c.


  CLEAR: lv_gramaje, lv_ancho, lv_dif_peso,
         p_error, lv_coeficiente.


  CASE p_werks.
    WHEN '3000'.
      lv_radio_mandril = '0.48'.
*      lv_radio2_mandril = '0.23'.
      lv_radio2_mandril = '0.24'.

    WHEN '3020'.
      lv_radio_mandril = '0.4'.
*      lv_radio2_mandril = '0.16'.
      lv_radio2_mandril = '0.2'.
  ENDCASE.




* obtenemos la información de la tabla ZTPP0008
  SELECT SINGLE * FROM ztpp0008
    INTO wa_ztpp0008
    WHERE werks = p_werks  AND
          arbpl = gv_arbpl.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_matnr
    IMPORTING
      output = lv_matnr.


  SELECT SINGLE zzgramaje zzancho FROM mara
    INTO ( lv_gramaje, lv_ancho )
    WHERE matnr = lv_matnr.


* lv_ancho (está en mm y lo pasamos a metros).
  lv_ancho_d = lv_ancho / 1000.

  DATA: lv_calc1      TYPE p LENGTH 13 DECIMALS 2,
        l_volumen     TYPE p LENGTH 13 DECIMALS 2,
        l_densidad    TYPE p LENGTH 13 DECIMALS 2,
        l_radio_rollo TYPE p LENGTH 13 DECIMALS 2,
        lv_calc2      TYPE p LENGTH 13 DECIMALS 2,
        lv_calc3      TYPE p LENGTH 13 DECIMALS 2,
        lv_calc4      TYPE p LENGTH 13 DECIMALS 2.

*  l_volumen     = 820 * c_pi * lv_ancho_d.
  l_volumen     = 7460 * c_pi * lv_ancho_d. "uDefine, cambio densidad a 740 en lugar de 820
  l_densidad    = p_kg / l_volumen.

  l_radio_rollo = sqrt( l_densidad + ( lv_radio2_mandril * lv_radio2_mandril ) ) * 1000. "radio del rollo


  lv_coeficiente  = l_radio_rollo * wa_ztpp0008-tolerancia_diametro  / 100 .
  lv_coeficiente1 = l_radio_rollo + lv_coeficiente .
  lv_coeficiente2 = l_radio_rollo - lv_coeficiente .



  IF  p_radio < lv_coeficiente2 OR p_radio >  lv_coeficiente1.
*    p_error = 'X'.

*    lv_text = 'Datos de notificación incoherentes (peso/diámetro). ¿Desea notificar igualmente?'.
*
*    CALL FUNCTION 'POPUP_TO_CONFIRM'
*      EXPORTING
*        titlebar              = text-022
**       DIAGNOSE_OBJECT       = ' '
*        text_question         = lv_text
*        text_button_1         = 'Sí'(008)
**       ICON_BUTTON_1         = ' '
*        text_button_2         = 'No'(009)
**       ICON_BUTTON_2         = ' '
*        default_button        = '2'
*        display_cancel_button = ''
**       USERDEFINED_F1_HELP   = ' '
**       START_COLUMN          = 25
**       START_ROW             = 6
**       POPUP_TYPE            =
**       IV_QUICKINFO_BUTTON_1 = ' '
**       IV_QUICKINFO_BUTTON_2 = ' '
*      IMPORTING
*        answer                = lv_answer
**      TABLES
**       parameter             = lt_param
*      EXCEPTIONS
*        text_not_found        = 1
*        OTHERS                = 2.
*    IF sy-subrc <> 0.
**   Implement suitable error handling here
*    ENDIF.


*    lv_text = 'El peso y/o radio supera la tolerancia definida'.
*    lv_text_2 = '¿Desea notificar igualmente?'.
*
*    CALL FUNCTION 'POPUP_TO_CONFIRM_WITH_MESSAGE'
*      EXPORTING
*        defaultoption  = 'N'
*        diagnosetext1  = '@1A@ ATENCION REVISAR PESO/RADIO'
**       DIAGNOSETEXT2  = ' '
**       diagnosetext3  = l_string_coef
*        textline1      = lv_text
*        textline2      = lv_text_2
*        titel          = 'Revisar peso/radio'
**       START_COLUMN   = 25
**       START_ROW      = 6
*        cancel_display = ''
*      IMPORTING
*        answer         = lv_answer.
*
*    IF lv_answer = 'J'.
**    IF lv_answer IS INITIAL OR lv_answer = '1'.
*      p_error = ''.
*    ENDIF.
*
*    IF lv_answer IS INITIAL OR lv_answer = '1'.
*      p_error = ''.
*    ENDIF.
  ENDIF.



*  CASE p_werks.
*    WHEN '3000'.
*      lv_radio_mandril = '0.48'.
*      lv_radio2_mandril = '0.23'.
*
*    WHEN '3020'.
*      lv_radio_mandril = '0.4'.
*      lv_radio2_mandril = '0.16'.
*  ENDCASE.
*
*
*
*
** obtenemos la información de la tabla ZTPP0008
*  SELECT SINGLE * FROM ztpp0008
*    INTO wa_ztpp0008
*    WHERE werks = p_werks  AND
*          arbpl = gv_arbpl.
*
*  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*    EXPORTING
*      input  = p_matnr
*    IMPORTING
*      output = lv_matnr.
*
*
*  SELECT SINGLE zzgramaje zzancho FROM mara
*    INTO ( lv_gramaje, lv_ancho )
*    WHERE matnr = lv_matnr.
*
*
** peso(kg)/volumen(m3) = peso(kg) /
**                        (pi * R^2(m) * ancho(m) - pi * r^2(m) * ancho(m)) .
**  lv_densidad = p_kg /
**               ( c_pi * lv_radio * lv_radio * lv_ancho  - c_pi  * lv_radio2_mandril * lv_ancho ).
*
*  lv_radio = p_radio / 1000. "pasamos el radio de mm a m
*  lv_ancho  = lv_ancho / 1000. "pasamos el ancho que está en cm a m
*
*
*  lv_peso = ( 820 / 100 ) * ( c_pi * lv_radio * lv_radio * lv_ancho - c_pi * lv_radio2_mandril * lv_ancho ).
*
*  lv_dif_peso = lv_peso - p_kg.
*
*  lv_dif_peso = abs( lv_dif_peso ).
*  lv_coeficiente  = ( lv_dif_peso / p_kg ) * 100.
*
*
*  IF lv_coeficiente  > wa_ztpp0008-tolerancia_peso.
*    p_error = 'X'.
*
*    lv_text = 'Datos de notificación incoherentes (peso). ¿Desea notificar igualmente?'.
*
*    CALL FUNCTION 'POPUP_TO_CONFIRM'
*      EXPORTING
*        titlebar              = text-022
**       DIAGNOSE_OBJECT       = ' '
*        text_question         = lv_text
*        text_button_1         = 'Sí'(008)
**       ICON_BUTTON_1         = ' '
*        text_button_2         = 'No'(009)
**       ICON_BUTTON_2         = ' '
*        default_button        = '2'
*        display_cancel_button = ''
**       USERDEFINED_F1_HELP   = ' '
**       START_COLUMN          = 25
**       START_ROW             = 6
**       POPUP_TYPE            =
**       IV_QUICKINFO_BUTTON_1 = ' '
**       IV_QUICKINFO_BUTTON_2 = ' '
*      IMPORTING
*        answer                = lv_answer
**      TABLES
**       parameter             = lt_param
*      EXCEPTIONS
*        text_not_found        = 1
*        OTHERS                = 2.
*    IF sy-subrc <> 0.
**   Implement suitable error handling here
*    ENDIF.
*
*    IF lv_answer IS INITIAL OR lv_answer = '1'.
*      p_error = ''.
*    ENDIF.
*  ENDIF.
*
*
*
**  lv_ancho_d  = lv_ancho / 1000. "pasamos el ancho que está en cm a m
**
**
*** Peso =  820 ( R^2  0,16) ( PI() x Ancho))
**  lv_peso  = 820 * ( ( p_radio * p_radio ) - ( 16 / 100 ) ) * ( c_pi * lv_ancho_d ) .
**
**  lv_dif_peso = v_pesol - p_kg.
**
**  lv_dif_peso = abs( lv_dif_peso ).
**
**  lv_coeficiente  = ( lv_dif_peso / p_kg ) * 100.
**
**  IF lv_coeficiente > wa_ztpp0008-tolerancia_peso.
**    p_error = 'X'.
**
**    lv_text = 'Datos de notificación incoherentes (peso). ¿Desea notificar igualmente?'.
**
**    CALL FUNCTION 'POPUP_TO_CONFIRM'
**      EXPORTING
**        titlebar              = text-022
***       DIAGNOSE_OBJECT       = ' '
**        text_question         = lv_text
**        text_button_1         = 'Sí'(008)
***       ICON_BUTTON_1         = ' '
**        text_button_2         = 'No'(009)
***       ICON_BUTTON_2         = ' '
**        default_button        = '2'
**        display_cancel_button = ''
***       USERDEFINED_F1_HELP   = ' '
***       START_COLUMN          = 25
***       START_ROW             = 6
***       POPUP_TYPE            =
***       IV_QUICKINFO_BUTTON_1 = ' '
***       IV_QUICKINFO_BUTTON_2 = ' '
**      IMPORTING
**        answer                = lv_answer
***      TABLES
***       parameter             = lt_param
**      EXCEPTIONS
**        text_not_found        = 1
**        OTHERS                = 2.
**    IF sy-subrc <> 0.
***   Implement suitable error handling here
**    ENDIF.
**
**    IF lv_answer IS INITIAL OR lv_answer = '1'.
**      p_error = ''.
**    ENDIF.
**  ENDIF.



ENDFORM.                    " CALCULAR_VALORES_MAX
*&---------------------------------------------------------------------*
*&      Form  ANULAR_DOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_MBLNR  text
*      -->P_LV_MJAHR  text
*      <--P_LV_ERROR  text
*----------------------------------------------------------------------*
FORM anular_doc  USING    p_mblnr
                          p_mjahr
                 CHANGING p_error.

  DATA: lt_return TYPE TABLE OF bapiret2,
        ls_return TYPE          bapiret2.

  CALL FUNCTION 'BAPI_GOODSMVT_CANCEL'
    EXPORTING
      materialdocument = p_mblnr
      matdocumentyear  = p_mjahr
*     GOODSMVT_PSTNG_DATE       =
*     GOODSMVT_PR_UNAME         =
* IMPORTING
*     GOODSMVT_HEADRET =
    TABLES
      return           = lt_return
*     GOODSMVT_MATDOCITEM       =
    .

  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  IF sy-subrc <> 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

*   GUARDAR LOGS CON EL PEDIDO DE COMPRAS CREADO
    CLEAR gs_messages.

    gs_messages-type = 'S'.
    gs_messages-number = '124'.
    gs_messages-id = 'ZPP'.
    gs_messages-message_v1 = p_mblnr.
    gs_messages-message_v2 = p_mjahr.

    APPEND gs_messages TO gt_messages.
  ELSE.
    p_error = 'X'.

*   REGISTRAR ERROR EN CASO DE NO CREACION DEL PEDIDO DE COMPRAS
    LOOP AT lt_return INTO ls_return WHERE type  = 'E'.
      CLEAR gs_messages.
      gs_messages = ls_return.
      APPEND gs_messages TO gt_messages.
    ENDLOOP.
  ENDIF.

** montar log slg1
*  CALL FUNCTION 'ZMONTAR_LOG_SLG1'
*    EXPORTING
*      i_extnumber = ''
*      i_object    = 'ZPP'
*      i_subobject = sy-tcode
*    TABLES
*      t_return    = gt_messages.
ENDFORM.                    " ANULAR_DOC
*&---------------------------------------------------------------------*
*&      Form  ANULAR_CLASIFICACION_LOTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_SEL  text
*      -->P_LV_CHARG  text
*      <--P_LV_ERROR  text
*----------------------------------------------------------------------*
FORM anular_clasificacion_lote  USING    wa_datos_sel TYPE zepp0028_grid_1
                                         p_charg
                                CHANGING p_error.

  DATA: lv_object            TYPE objnum,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        ls_return            TYPE bapiret2.

  DATA: lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab.


  CLEAR: lv_object, lt_alloc_values_num, lt_alloc_values_char,
         lt_alloc_values_curr, lt_return, ls_alloc_values_num,
         ls_alloc_values_char, ls_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr,
           lt_return.



  CONCATENATE wa_datos_sel-plnbez p_charg INTO lv_object.

  " DIAMETRO:
  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_DIAMETRO1'.
  ls_alloc_values_num-value_from = ''.
  APPEND ls_alloc_values_num TO lt_alloc_values_num.


  " TORNADAS:
  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_TORNADAS'.
  ls_alloc_values_num-value_from = ''.
  APPEND ls_alloc_values_num TO lt_alloc_values_num.

  "FECHA DE FABRICACION:
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'LOBM_HSDAT'.
  ls_alloc_values_char-value_char = ''.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.

  " HORA DE FABRICACION:
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'Z_HORA'.
  ls_alloc_values_char-value_char = ''.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.

  " PESO:
  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_PESO1'.
  ls_alloc_values_num-value_from = ''.
  APPEND ls_alloc_values_num TO lt_alloc_values_num.


  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = lv_object
      objecttable        = 'MCH1'
      classnum           = 'Z_BOBINA'
      classtype          = '023'
*     STATUS             = '1'
*     STANDARDCLASS      =
*     CHANGENUMBER       =
*     KEYDATE            = SY-DATUM
*     NO_DEFAULT_VALUES  = ' '
*   IMPORTING
*     CLASSIF_STATUS     =
    TABLES
      allocvaluesnumnew  = lt_alloc_values_num
      allocvaluescharnew = lt_alloc_values_char
      allocvaluescurrnew = lt_alloc_values_curr
      return             = lt_return.

  CLEAR ls_return.
  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  IF ls_return IS NOT INITIAL. " Error act. característica
    p_error = 'X'.

    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*       IMPORTING
*         RETURN        =
      .

*   REGISTRAR ERROR EN CASO DE NO CREACION DEL PEDIDO DE COMPRAS
    LOOP AT lt_return INTO ls_return WHERE type  = 'E'.
      CLEAR gs_messages.
      gs_messages = ls_return.
      APPEND gs_messages TO gt_messages.
    ENDLOOP.

  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

*   GUARDAR LOGS CON EL PEDIDO DE COMPRAS CREADO
    READ TABLE lt_return INTO ls_return WITH KEY type = 'S'.
    CLEAR gs_messages.
    gs_messages = ls_return.
    APPEND gs_messages TO gt_messages.

  ENDIF.


* montar log slg1
  CALL FUNCTION 'ZMONTAR_LOG_SLG1'
    EXPORTING
      i_extnumber = ''
      i_object    = 'ZPP'
      i_subobject = sy-tcode
    TABLES
      t_return    = gt_messages.

ENDFORM.                    " ANULAR_CLASIFICACION_LOTE
*&---------------------------------------------------------------------*
*&      Form  F_UCOMM_REFRESCAR_ALVS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_ucomm_refrescar_alvs .
*  DATA: lt_return_log TYPE bapirettab.

**  WAIT UP TO 1 SECONDS.
*
** Obtención de datos del ALV
*  PERFORM obtener_prod_turnos.
*
*** Mostrar log
**  perform mostrar_log using lt_return_log.
*
** Refrescamos el ALV 0100
*  PERFORM mostrar_datos_0200.




*  PERFORM obtener_ordenes_0300.
*  PERFORM mostrar_datos_0300.

ENDFORM.                    " F_UCOMM_REFRESCAR_ALVS
*&---------------------------------------------------------------------*
*&      Form  TRANSFORMACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_SEL  text
*----------------------------------------------------------------------*
FORM transformacion   USING lv_charg_rollo TYPE charg_d
                            lv_charg_pulper TYPE charg_d
                      CHANGING  wa_datos_sel TYPE zepp0028_grid_1
                                error
                                lv_mblnr TYPE mblnr
                                lv_mjahr TYPE mjahr.


  DATA: ls_header  TYPE bapi2017_gm_head_01,
        lt_return  LIKE bapiret2 OCCURS 0,
        ls_return  TYPE bapiret2,
        lt_item    LIKE bapi2017_gm_item_create OCCURS 0,
        ls_item    TYPE bapi2017_gm_item_create,
        ls_headret TYPE bapi2017_gm_head_ret.



  CLEAR: lt_item, ls_header, ls_item.
  REFRESH: lt_item, lt_return.


* cabecera
  ls_header-pstng_date = sy-datum.
  ls_header-doc_date   = sy-datum.
  ls_header-pr_uname = sy-uname.
  ls_header-header_txt = 'Transformación Material'(t01).


* posicion
*  ls_item-orderid = wa_datos_sel-aufnr.
  ls_item-plant = gv_werks.
  ls_item-move_type = '309'.
  ls_item-entry_qnt = gv_kg.
  ls_item-entry_uom = 'KG'.
  ls_item-move_plant  = gv_werks.


  ls_item-material = wa_datos_sel-plnbez. "material origen
  ls_item-batch    = lv_charg_rollo. "lote origen
  SELECT SINGLE lgort INTO ls_item-stge_loc  "almacen origen.
    FROM afpo
    WHERE aufnr = wa_afko-aufnr AND
          posnr = '0001'.

  ls_item-move_mat    = c_matco. "material destino
  ls_item-move_stloc   = '4002'. "'1020'. "almacen destino
  ls_item-move_batch = lv_charg_pulper. "lote destino
  APPEND ls_item TO lt_item.


  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_header
      goodsmvt_code    = '04'
*     TESTRUN          = ' '
*     GOODSMVT_REF_EWM =
    IMPORTING
      goodsmvt_headret = ls_headret
      materialdocument = lv_mblnr
      matdocumentyear  = lv_mjahr
    TABLES
      goodsmvt_item    = lt_item
*     GOODSMVT_SERIALNUMBER         =
      return           = lt_return
*     GOODSMVT_SERV_PART_DATA       =
*     EXTENSIONIN      =
    .
  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  IF sy-subrc <> 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

    wa_datos_sel-kg_pulper = wa_datos_sel-kg_pulper + gv_kg.
*    wa_datos_sel-kilos_notif = wa_datos_sel-kilos_notif + gv_kg.
*    wa_datos_sel-rollos_notif = wa_datos_sel-rollos_notif + 1.


  ELSE.
    error = 'X'.

*   REGISTRAR ERROR EN CASO DE NO CREACION DEL PEDIDO DE COMPRAS
    LOOP AT lt_return INTO ls_return WHERE type  = 'E'.
      CLEAR gs_messages.
      gs_messages = ls_return.
      APPEND gs_messages TO gt_messages.
    ENDLOOP.

** montar log slg1
*    CALL FUNCTION 'ZMONTAR_LOG_SLG1'
*      EXPORTING
*        i_extnumber = ''
*        i_object    = 'ZPP'
*        i_subobject = sy-tcode
*      TABLES
*        t_return    = gt_messages.

  ENDIF.
ENDFORM.                    " TRANSFORMACION
*&---------------------------------------------------------------------*
*&      Form  CLASIFICAR_LOTE_PULPER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_SEL  text
*      -->P_TYPE  text
*      -->P_ZEPP0028  text
*      -->P_LV_CHARG_NEW  text
*      -->P_PULPER  text
*      <--P_ERROR  text
*----------------------------------------------------------------------*
FORM clasificar_lote_pulper  USING    wa_datos_sel  TYPE zepp0028_grid_1
                                      p_charg_new TYPE charg_d
                                      p_pulper
                             CHANGING p_error.

  DATA: lv_object            TYPE objnum,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        ls_return            TYPE bapiret2.

  DATA: lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab.

  DATA: lv_matnr TYPE matnr,
        lv_charg TYPE charg_d.

  CLEAR: lv_object, lt_alloc_values_num, lt_alloc_values_char,
         lt_alloc_values_curr, lt_return, ls_alloc_values_num,
         ls_alloc_values_char, ls_return, lv_matnr, lv_charg.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char,
           lt_alloc_values_curr, lt_return.


  CONCATENATE c_matco p_charg_new INTO lv_object.

  " PESO:
  CLEAR ls_alloc_values_num.
  ls_alloc_values_num-charact = 'Z_PESO'.
  ls_alloc_values_num-value_from = gv_kg.
  APPEND ls_alloc_values_num TO lt_alloc_values_num.


  " ROLLO_ORIGEN
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'Z_ROLLO_ORIGEN_V2'.
  ls_alloc_values_char-value_char = wa_datos_sel-plnbez.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.


  " FECHA DE FABRICACION:
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'Z_FECHA_FABRICACION'.
  WRITE gv_fecha TO ls_alloc_values_char-value_char.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.


  " MOTIVO RECHAZO PULPER:
  IF p_pulper IS NOT INITIAL.
    CLEAR ls_alloc_values_char.
    ls_alloc_values_char-charact = 'ZPPI_MOTIVO_RECHAZO'.
    ls_alloc_values_char-value_char = p_pulper.
    APPEND ls_alloc_values_char TO lt_alloc_values_char.
  ENDIF.


  " PUESTO_TRABAJO
  CLEAR ls_alloc_values_char.
  ls_alloc_values_char-charact = 'ZPPI_PUESTO_TRABAJO'.
  ls_alloc_values_char-value_char = gv_arbpl.
  APPEND ls_alloc_values_char TO lt_alloc_values_char.

  CALL FUNCTION 'BAPI_OBJCL_CHANGE'
    EXPORTING
      objectkey          = lv_object
      objecttable        = 'MCH1'
      classnum           = 'Z_BOBINA_PULPER'
      classtype          = '023'
*     STATUS             = '1'
*     STANDARDCLASS      =
*     CHANGENUMBER       =
*     KEYDATE            = SY-DATUM
*     NO_DEFAULT_VALUES  = ' '
*   IMPORTING
*     CLASSIF_STATUS     =
    TABLES
      allocvaluesnumnew  = lt_alloc_values_num
      allocvaluescharnew = lt_alloc_values_char
      allocvaluescurrnew = lt_alloc_values_curr
      return             = lt_return.

  CLEAR ls_return.
  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  IF ls_return IS NOT INITIAL. " Error act. característica
    p_error = 'X'.

    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
*       IMPORTING
*         RETURN        =
      .

*   REGISTRAR ERROR EN CASO DE NO CREACION DEL PEDIDO DE COMPRAS
    LOOP AT lt_return INTO ls_return WHERE type  = 'E'.
      CLEAR gs_messages.
      gs_messages = ls_return.
      APPEND gs_messages TO gt_messages.
    ENDLOOP.
  ELSE.

    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

**   GUARDAR LOGS CON EL PEDIDO DE COMPRAS CREADO
*    READ TABLE lt_return INTO ls_return WITH KEY type = 'S'.
*    CLEAR gs_messages.
*    gs_messages = ls_return.
*    APPEND gs_messages TO gt_messages.

  ENDIF.

** montar log slg1
*  CALL FUNCTION 'ZMONTAR_LOG_SLG1'
*    EXPORTING
*      i_extnumber = ''
*      i_object    = 'ZPP'
*      i_subobject = sy-tcode
*    TABLES
*      t_return    = gt_messages.
ENDFORM.                    " CLASIFICAR_LOTE_PULPER
*&---------------------------------------------------------------------*
*&      Form  CAMBIAR_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_SEL_AUFNR  text
*----------------------------------------------------------------------*
FORM cambiar_status  USING    p_aufnr TYPE aufnr.

  DATA: t_jest  TYPE TABLE OF jest,
        wa_jest TYPE          jest.

  DATA: lv_objnr TYPE jest-objnr,
        lv_aufnr TYPE aufnr,
        lv_index TYPE sy-tabix,
        lv_ok    TYPE xfeld.

  DATA: wa_return        TYPE                   bapiret2,
        t_orders         TYPE TABLE OF          bapi_order_key,
        wa_order         TYPE                   bapi_order_key,
        t_detail_return  TYPE STANDARD TABLE OF bapi_order_return,
        wa_detail_return TYPE                   bapi_order_return.

  DATA: lv_extnumber TYPE balnrext.


  CLEAR: t_jest, lv_objnr, lv_aufnr, lv_ok.
  REFRESH: t_jest.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_aufnr
    IMPORTING
      output = lv_aufnr.

  CONCATENATE 'OR' lv_aufnr INTO lv_objnr.

  SELECT * FROM jest
    INTO TABLE t_jest
    WHERE objnr = lv_objnr.

  READ TABLE t_jest INTO wa_jest WITH KEY stat =  'I0002' "liberada
                                          inact = '' .

  IF sy-subrc = 0.
    READ TABLE t_jest INTO wa_jest WITH KEY stat =  'E0004' "no bloqueda
                                            inact = '' .
    IF sy-subrc = 0.
      lv_ok = 'X'.
    ENDIF.
  ENDIF.


  IF lv_ok = ''.
    CLEAR: t_orders, wa_order.
    REFRESH: t_orders.

    wa_order-order_number = lv_aufnr.
    APPEND wa_order TO t_orders.

    CALL FUNCTION 'BAPI_PROCORD_SETUSERSTATUS'
      EXPORTING
        status_profile     = 'ZPP00001'
        status             = 'ZP04'
        work_process_group = 'COWORK_BAPI'
        work_process_max   = 99
      IMPORTING
        return             = wa_return
      TABLES
        orders             = t_orders
        detail_return      = t_detail_return
*       APPLICATION_LOG    =
      .

    READ TABLE t_detail_return INTO wa_detail_return WITH KEY type = 'E'.
    IF sy-subrc <> 0.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ELSE.

*      CLEAR lv_extnumber.
*      CONCATENATE 'Error al bloquear la orden' p_aufnr INTO lv_extnumber
*        SEPARATED BY space.

      APPEND wa_return TO gt_messages.
*
*      CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
*        EXPORTING
*          objeto    = 'ZPP'
*          subobjeto = sy-tcode
*          mensajes  = gt_messages[]
*          extnumber = lv_extnumber.
    ENDIF.
  ENDIF.


ENDFORM.                    " CAMBIAR_STATUS
*&---------------------------------------------------------------------*
*&      Form  TRASLADAR_REPROCESO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM trasladar_reproceso USING  wa_datos_sel TYPE zepp0028_grid_1
                                p_charg TYPE charg_d
                          CHANGING error.

  DATA: ls_header  TYPE bapi2017_gm_head_01,
        lt_return  LIKE bapiret2 OCCURS 0,
        ls_return  TYPE bapiret2,
        lt_item    LIKE bapi2017_gm_item_create OCCURS 0,
        ls_item    TYPE bapi2017_gm_item_create,
        ls_headret TYPE bapi2017_gm_head_ret.

  DATA: lv_mblnr TYPE mblnr,
        lv_mjahr TYPE mjahr.

  CLEAR: lt_item, ls_header, ls_item.
  REFRESH: lt_item, lt_return.


* cabecera
  ls_header-pstng_date = sy-datum.
  ls_header-doc_date   = sy-datum.
  ls_header-pr_uname   = sy-uname.
  ls_header-header_txt = 'Notificacion de rollos'.

* posicion
  ls_item-material = c_matco.
  ls_item-plant = gv_werks.
  ls_item-stge_loc = '1020'.
  ls_item-batch = p_charg.

  ls_item-move_type = '311'. " Movimiento traslado
  ls_item-entry_qnt = gv_kg. " UMB
  SELECT SINGLE meins INTO ls_item-entry_uom
   FROM mara
   WHERE matnr = c_matco.

  ls_item-move_stloc = '4002'.
  ls_item-move_batch = p_charg.
  ls_item-move_mat = c_matco.
  ls_item-move_plant = gv_werks.
  APPEND ls_item TO lt_item.


  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = ls_header
      goodsmvt_code    = '04'
*     TESTRUN          = ' '
*     GOODSMVT_REF_EWM =
    IMPORTING
      goodsmvt_headret = ls_headret
      materialdocument = lv_mblnr
      matdocumentyear  = lv_mjahr
    TABLES
      goodsmvt_item    = lt_item
*     GOODSMVT_SERIALNUMBER         =
      return           = lt_return
*     GOODSMVT_SERV_PART_DATA       =
*     EXTENSIONIN      =
    .
  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  IF sy-subrc <> 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ELSE.
    error = 'X'.

*   REGISTRAR ERROR EN CASO DE NO CREACION DEL PEDIDO DE COMPRAS
    LOOP AT lt_return INTO ls_return WHERE type  = 'E'.
      CLEAR gs_messages.
      gs_messages = ls_return.
      APPEND gs_messages TO gt_messages.
    ENDLOOP.

**   montar log slg1
*    CALL FUNCTION 'ZMONTAR_LOG_SLG1'
*      EXPORTING
*        i_extnumber = ''
*        i_object    = 'ZPP'
*        i_subobject = sy-tcode
*      TABLES
*        t_return    = gt_messages.

  ENDIF.
ENDFORM.                    " TRASLADAR_REPROCESO
*&---------------------------------------------------------------------*
*&      Form  ELIMINAR_PULPER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_400  text
*      <--P_WA_DATOS_SEL  text
*      <--P_LV_ERROR  text
*----------------------------------------------------------------------*
FORM eliminar_pulper  USING    wa_datos_400 TYPE zepp0028_lotes
                      CHANGING wa_datos_sel TYPE zepp0028_grid_1
                               error.

  DATA: lt_311 TYPE STANDARD TABLE OF mseg,
        wa_311 TYPE                   mseg.

  DATA: lt_101 TYPE         tty_aufm,
        wa_101 TYPE LINE OF tty_aufm.

  DATA: lt_anulaciones TYPE         tty_anulaciones,
        wa_anulaciones TYPE LINE OF tty_anulaciones.

  DATA: lv_ind TYPE sy-tabix.

  DATA: wa_mseg TYPE mseg.



* Eliminar mov 309 (transformacion)
  PERFORM eliminar_doc USING wa_datos_400-mblnr
                             wa_datos_400-mjahr
                       CHANGING error.

  CHECK error IS INITIAL.

* Eliminar mov 101 (alta)
  SELECT SINGLE * FROM mseg
    INTO wa_mseg
    WHERE mblnr = wa_datos_400-mblnr AND
          mjahr = wa_datos_400-mjahr AND
          matnr = wa_datos_400-matnr.


  SELECT aufnr matnr charg menge bwart mblnr mjahr FROM aufm
        INTO TABLE lt_101
        WHERE  bwart = '101' AND
               werks = gv_werks AND
               charg = wa_mseg-charg AND
               aufnr = wa_datos_sel-aufnr.

  IF lt_101[] IS NOT INITIAL.
    SELECT aufnr matnr charg menge bwart mblnr mjahr smbln FROM mseg
          INTO TABLE lt_anulaciones
          FOR ALL ENTRIES IN lt_101
          WHERE werks = gv_werks AND
                charg = lt_101-charg AND
                smbln = lt_101-mblnr.

    IF lt_anulaciones[] IS NOT INITIAL.
      LOOP AT lt_101 INTO wa_101.
        lv_ind = sy-tabix.
        CLEAR: wa_anulaciones.

        READ TABLE lt_anulaciones INTO wa_anulaciones WITH KEY smbln = wa_101-mblnr.
        IF sy-subrc = 0.
          DELETE lt_101 INDEX lv_ind.
        ENDIF.
      ENDLOOP.
    ENDIF.

    LOOP AT lt_101 INTO wa_101.
      PERFORM eliminar_doc USING wa_101-mblnr
                                 wa_101-mjahr
                           CHANGING error.
    ENDLOOP.
  ENDIF.

  CHECK error IS INITIAL.

* decrementamos los Kg pulper
  wa_datos_sel-kg_pulper = wa_datos_sel-kg_pulper - wa_datos_400-brgew.
  wa_datos_sel-kilos_notif = wa_datos_sel-kilos_notif - wa_datos_400-brgew.
  wa_datos_sel-rollos_notif = wa_datos_sel-rollos_notif - 1.


* eliminamos los tiempos
  PERFORM eliminar_tiempos USING wa_datos_sel-aufnr wa_datos_400-brgew
                           CHANGING error.

*  CHECK error IS INITIAL.

* eliminamos la clasificación del lote
  PERFORM eliminar_clasificacion USING  wa_datos_400-matnr wa_datos_400-charg wa_datos_400-tipo
                                 CHANGING error.


ENDFORM.                    " ELIMINAR_PULPER
*&---------------------------------------------------------------------*
*&      Form  EXCLUIR_BOTONES_300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM excluir_botones_300 CHANGING lt_toolb TYPE ui_functions.
*
*  DATA: ls_toolb    TYPE ui_func.
*
*  CLEAR:  lt_toolb.
*  REFRESH:  lt_toolb.
*
*
** Excluir botón orden ascendente
*  ls_toolb = cl_gui_alv_grid=>mc_fc_sort_asc.
*  APPEND ls_toolb TO lt_toolb.
*
** Excluir botón ordenar descendente
*  ls_toolb = cl_gui_alv_grid=>mc_fc_sort_dsc.
*  APPEND ls_toolb TO lt_toolb.
*
** Excluir botón buscar
*  ls_toolb = cl_gui_alv_grid=>mc_fc_find.
*  APPEND ls_toolb TO lt_toolb.
*
** Excluir botón filtrar
*  ls_toolb = cl_gui_alv_grid=>mc_fc_filter.
*  APPEND ls_toolb TO lt_toolb.
*
** Exclude botón suma
*  ls_toolb = cl_gui_alv_grid=>mc_fc_sum.
*  APPEND ls_toolb TO lt_toolb.
*
** Exclude botón promedio
*  ls_toolb = cl_gui_alv_grid=>mc_fc_average.
*  APPEND ls_toolb TO lt_toolb.
*
** Excluir botón grafico
*  ls_toolb = cl_gui_alv_grid=>mc_fc_graph.
*  APPEND ls_toolb TO lt_toolb.
*
** Exclude botón alv info
*  ls_toolb = cl_gui_alv_grid=>mc_fc_info.
*  APPEND ls_toolb TO lt_toolb.
*
** Exclude botón vistas
*  ls_toolb = cl_gui_alv_grid=>mc_mb_view.
*  APPEND ls_toolb TO lt_toolb.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXCLUIR_BOTONES_400
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_TOOLB  text
*----------------------------------------------------------------------*
FORM excluir_botones_400  CHANGING lt_toolb TYPE ui_functions.

  DATA: ls_toolb    TYPE ui_func.

  CLEAR:  lt_toolb.
  REFRESH:  lt_toolb.

* Excluir botón buscar
  ls_toolb = cl_gui_alv_grid=>mc_fc_find.
  APPEND ls_toolb TO lt_toolb.

* Excluir botón orden ascendente
  ls_toolb = cl_gui_alv_grid=>mc_fc_sort_asc.
  APPEND ls_toolb TO lt_toolb.

* Excluir botón ordenar descendente
  ls_toolb = cl_gui_alv_grid=>mc_fc_sort_dsc.
  APPEND ls_toolb TO lt_toolb.

* Excluir botón buscar
  ls_toolb = cl_gui_alv_grid=>mc_fc_find.
  APPEND ls_toolb TO lt_toolb.

* Excluir botón filtrar
  ls_toolb = cl_gui_alv_grid=>mc_fc_filter.
  APPEND ls_toolb TO lt_toolb.

* Exclude botón promedio
  ls_toolb = cl_gui_alv_grid=>mc_fc_average.
  APPEND ls_toolb TO lt_toolb.

* Excluir botón grafico
  ls_toolb = cl_gui_alv_grid=>mc_fc_graph.
  APPEND ls_toolb TO lt_toolb.

* Exclude botón alv info
  ls_toolb = cl_gui_alv_grid=>mc_fc_info.
  APPEND ls_toolb TO lt_toolb.

* Exclude botón vistas
  ls_toolb = cl_gui_alv_grid=>mc_mb_view.
  APPEND ls_toolb TO lt_toolb.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PREPARE_VARIANT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_VARIANT  text
*----------------------------------------------------------------------*
*FORM prepare_variant  CHANGING ps_variant TYPE disvariant .
*
*  IF gs_variant IS NOT INITIAL.
*    ps_variant = gs_variant.
*  ELSE.
*    CLEAR ps_variant.
*    ps_variant-report = sy-repid.
*  ENDIF.
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PREPARE_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_LAYOUT  text
*----------------------------------------------------------------------*
*FORM prepare_layout  CHANGING ls_layout TYPE lvc_s_layo.
*  ls_layout-cwidth_opt = 'X'.
*  ls_layout-sel_mode   = 'A'.
*  ls_layout-zebra = 'X'.
*ENDFORM.

FORM invocar_dyn500 USING p_datos_400 TYPE zepp0028_lotes.

  DATA: lt_lines_blank TYPE STANDARD TABLE OF tdline.

  CLEAR gs_dyn500.
  gs_k_dyn500-aufnr = gv_aufnr_400.
  gs_k_dyn500-matnr = wa_datos_sel-plnbez.
  gs_k_dyn500-charg = p_datos_400-charg.
  IF go_textedit IS BOUND.
    CLEAR lt_lines_blank[].
    CALL METHOD go_textedit->set_text_as_stream
      EXPORTING
        text = lt_lines_blank[].
  ENDIF.

* Si ya se ha consumido el Rollo, no se permite modificar DEFECTOS, solo visualización.
  CLEAR g_onlyread_dyn500.

  SELECT * FROM mseg INTO TABLE @DATA(lt_mseg) WHERE matnr = @p_datos_400-matnr AND werks = @gv_werks
                                                 AND charg = @p_datos_400-charg AND bwart IN ('261','262').
  IF sy-subrc EQ 0.
*    MESSAGE 'Se han realizado consumos del lote. No se permite modificar los defectos' TYPE 'I'.
*    RETURN.
    g_onlyread_dyn500 = 'X'.
  ENDIF.

  CALL SCREEN 500.

  RETURN.

ENDFORM.


FORM save CHANGING p_rc.

  p_rc = '00'.

  CALL METHOD go_textedit->get_text_as_r3table
    EXPORTING
      only_when_modified     = 1
    IMPORTING
      table                  = lt_tdline
*     is_modified            =
    EXCEPTIONS
      error_dp               = 1
      error_cntl_call_method = 2
      error_dp_create        = 3
      potential_data_loss    = 4
      OTHERS                 = 5.


  IF lt_tdline IS NOT INITIAL.

    DELETE FROM ztpp0031
    WHERE aufnr   = gs_k_dyn500-aufnr AND
          matnr   = gs_k_dyn500-matnr AND
          charg   = gs_k_dyn500-charg AND
          tp_ubic = ' '.

    CLEAR: ls_ztpp031.

    LOOP AT lt_tdline INTO DATA(ls_tdline).
      CHECK ls_tdline IS NOT INITIAL.
      ADD 1 TO ls_ztpp031-seq.
      ls_ztpp031-aufnr  = |{ gs_k_dyn500-aufnr ALPHA = IN }|.
      ls_ztpp031-matnr  = |{ gs_k_dyn500-matnr ALPHA = IN }|.
      ls_ztpp031-charg  = gs_k_dyn500-charg.
      ls_ztpp031-tp_ubic  = ' '.
      ls_ztpp031-tdline = ls_tdline.
      INSERT ztpp0031 FROM ls_ztpp031.
    ENDLOOP.
  ENDIF.

  MOVE-CORRESPONDING gs_k_dyn500 TO ls_ztpp030.
  MOVE-CORRESPONDING gs_dyn500   TO ls_ztpp030.

  ls_ztpp030-aufnr  = |{ gs_k_dyn500-aufnr ALPHA = IN }|.
  ls_ztpp030-matnr  = |{ gs_k_dyn500-matnr ALPHA = IN }|.

  ls_ztpp030-werks = gv_werks.

  IF ls_ztpp030-bob_pulper_parcial EQ abap_true OR
     ls_ztpp030-bob_pulper_total   EQ abap_true OR
    ls_ztpp030-defecto1            IS NOT INITIAL OR
    ls_ztpp030-defecto1_c          IS NOT INITIAL OR
    ls_ztpp030-defecto1_lc         IS NOT INITIAL OR
    ls_ztpp030-defecto1_lt         IS NOT INITIAL OR
    ls_ztpp030-defecto2            IS NOT INITIAL OR
    ls_ztpp030-defecto2_c          IS NOT INITIAL OR
    ls_ztpp030-defecto2_lc         IS NOT INITIAL OR
    ls_ztpp030-defecto2_lt         IS NOT INITIAL OR
    ls_ztpp030-defecto3            IS NOT INITIAL OR
    ls_ztpp030-defecto3_c          IS NOT INITIAL OR
    ls_ztpp030-defecto3_lc         IS NOT INITIAL OR
    ls_ztpp030-defecto3_lt         IS NOT INITIAL OR
    ls_ztpp030-defecto_ancho_c     IS NOT INITIAL OR
    ls_ztpp030-defecto_ancho_lc    IS NOT INITIAL OR
    ls_ztpp030-defecto_ancho_lt    IS NOT INITIAL
    .
    ls_ztpp030-flag_defectos = abap_true.
  ELSE.
    ls_ztpp030-flag_defectos = abap_false.
  ENDIF.

  IF ls_ztpp030-cabo_lt IS INITIAL AND
     ls_ztpp030-cabo_lc IS INITIAL.
    ls_ztpp030-sin_cabo = 'X'.
  ELSE.
    ls_ztpp030-sin_cabo = ' '.
  ENDIF.

  CASE gw_out_dyn500.
    WHEN ' '. ls_ztpp030-erdat = sy-datum. " Alta: grabamos fecha de Alta de defectos
    WHEN 'X'. ls_ztpp030-aedat = sy-datum. " Modificacion: grabamos fecha de Modificación de defectos
    WHEN OTHERS.
  ENDCASE.

  ls_ztpp030-aufnr = |{ gv_aufnr_400 ALPHA = IN }|.

* CMS Cuando un rollo sea Pulper Total, se creará caract.DE->P (PMC Calidad 25/05/2019)
  IF ls_ztpp030-bob_pulper_total = 'X'.
    PERFORM add_charact_dec_emp_p CHANGING p_rc.
  ENDIF.

  CHECK p_rc = '00'. "Si ha habido error al asignar DE, no actualizamos defectos y mostramos msg error.

  MODIFY ztpp0030 FROM ls_ztpp030.

*  MESSAGE s419(0k).

ENDFORM.

FORM add_charact_dec_emp_p CHANGING p_rc.

  DATA: l_objkey             TYPE                   objnum,
        lv_classnum          TYPE                   bapi1003_key-classnum,
        lt_alloc_values_num  TYPE STANDARD TABLE OF bapi1003_alloc_values_num,
        ls_alloc_values_num  LIKE LINE OF         lt_alloc_values_num,
        lt_alloc_values_char TYPE STANDARD TABLE OF bapi1003_alloc_values_char,
        ls_alloc_values_char LIKE LINE OF         lt_alloc_values_char,
        lt_alloc_values_curr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr,
        lt_return            TYPE TABLE OF          bapiret2.

  p_rc = '00'.

* Obtenemos el codigo de lote de inspección del lote de rollo notificado.
  SELECT SINGLE prueflos
    FROM qals
    INTO @DATA(l_prueflos)
    WHERE werk  = @gv_werks          AND
          matnr = @gs_k_dyn500-matnr AND
          charg = @gs_k_dyn500-charg .

  CHECK sy-subrc = 0.
  DATA: ls_data   TYPE bapi2045ud,
        l_bapiret TYPE bapireturn1.

* Antes de asignar DE=P, informamos la caract.humedad = 9
  CALL METHOD zclpp_tratamiento_lote_inspec=>asignar_humedad_9
    EXPORTING
      i_prueflos = l_prueflos
    IMPORTING
      ot_return  = lt_return.

  IF line_exists( lt_return[ type = 'E' ] ).
    p_rc = '02'.
    EXIT.
  ENDIF.

* Asignar DE=P al lote de inspección.
  CALL METHOD zclpp_tratamiento_lote_inspec=>asignar_de_p
    EXPORTING
      i_prueflos = l_prueflos
      i_werks    = gv_werks
    IMPORTING
      os_return  = l_bapiret.
  IF l_bapiret-type = 'E'.
    p_rc = '01'.
    EXIT.
  ENDIF.


* Actualizamos la decisión de empleo del lote de inspeccióna "P" Pulper.
*  CLEAR: ls_data , l_bapiret , lt_return[].
*  ls_data-insplot         = l_prueflos.
*  ls_data-ud_selected_set = 'DE'.
*  ls_data-ud_plant        = gv_werks.
*  ls_data-ud_code_group   = 'DE'.
*  ls_data-ud_code         = 'P'.
*  ls_data-ud_recorded_by_user = sy-uname.
*  ls_data-ud_recorded_on_date = sy-datum.
*  ls_data-ud_recorded_at_time = sy-uzeit.
** 15/02/2021 - CMS - 65316 - Forzar el cierre del lote de inspección aun sin caract.obligatoriaas informadas
*  ls_data-ud_force_completion = 'X'.
*
*
*
*  CALL FUNCTION 'BAPI_INSPLOT_SETUSAGEDECISION'
*    EXPORTING
*      number  = l_prueflos
*      ud_data = ls_data
**     LANGUAGE       =
*    IMPORTING
*      return  = l_bapiret.
*  IF l_bapiret-type = 'E'.
**    MESSAGE 'Error al informar DE en lote inspección' TYPE 'S' DISPLAY LIKE 'E'.
*    p_rc = '01'.
*    ROLLBACK WORK.
**    MESSAGE l_bapiret-number
*  ELSE.
*    p_rc = '00'.
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*      EXPORTING
*        wait = 'X'.
*  ENDIF.


ENDFORM.


FORM popup_defectos CHANGING p_answer TYPE c.

  DATA: lv_text(400) TYPE c.

  lv_text = 'No se han grabado datos ni generado etiqueta de defetos ¿Desea cancelar la notificacion de defectos?'.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = text-042 " Datos de Defectos
      text_question         = lv_text
      text_button_1         = 'Sí'(008)
      display_cancel_button = 'X'
    IMPORTING
      answer                = p_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.


ENDFORM.

FORM comprobar_cambios_observ CHANGING p_modified TYPE i.

  DATA:        lt_tdline  TYPE STANDARD TABLE OF tdline.


  CALL METHOD go_textedit->get_text_as_r3table
    EXPORTING
      only_when_modified     = 1
    IMPORTING
      table                  = lt_tdline
      is_modified            = p_modified
    EXCEPTIONS
      error_dp               = 1
      error_cntl_call_method = 2
      error_dp_create        = 3
      potential_data_loss    = 4
      OTHERS                 = 5.

ENDFORM.

FORM eliminar_datos_defecto_lote USING  p_aufnr TYPE aufnr
                                        p_werks TYPE werks_d
                                        p_matnr TYPE matnr
                                        p_charg TYPE charg_d.

  DATA(l_matnr_alpha_in) = |{ p_matnr ALPHA = IN }|.
  DATA(l_aufnr_alpha_in) = |{ p_aufnr ALPHA = IN }|.

  DELETE FROM ztpp0030
    WHERE aufnr = @l_aufnr_alpha_in AND
          werks = @p_werks AND
*          matnr = @p_matnr and
          matnr = @l_matnr_alpha_in AND
          charg = @p_charg.

  DELETE FROM ztpp0031
    WHERE aufnr = @l_aufnr_alpha_in AND
          matnr = @l_matnr_alpha_in AND
          charg = @p_charg.


ENDFORM.

FORM cambio_aufnr.

  DATA: wa_aufk  TYPE aufk.

  DATA: t_aufm       TYPE tty_mov,
        wa_aufm      TYPE LINE OF tty_mov,
        wa_mseg_309  TYPE mseg,
        lv_kg_pulper TYPE mseg-menge.

  DATA: lv_zzebeln1 TYPE zzebeln1,
        lv_zzebelp1 TYPE zzebelp1,
        l_string1   TYPE string,
        l_string2   TYPE string,
        l_string3   TYPE string.
  DATA: t_jest  TYPE TABLE OF jest,
        wa_jest TYPE          jest.

  DATA: lv_objnr TYPE jest-objnr.

  IF gv_aufnr IS NOT INITIAL.

* validamos que la orden indicada sea del centro informado en la dynpro
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gv_aufnr
      IMPORTING
        output = gv_aufnr_int.

    SELECT SINGLE * FROM aufk
      INTO wa_aufk
      WHERE aufnr = gv_aufnr_int.

    IF sy-subrc <> 0.
      CLEAR: gv_aufnr.
      MESSAGE e250(zpp) WITH gv_aufnr_int.
    ELSE.

      SELECT SINGLE * FROM aufk
      INTO wa_aufk
      WHERE aufnr = gv_aufnr_int AND auart = 'ZI01'.
      IF sy-subrc NE 0.
        MESSAGE 'Únicamente se permite notificar órdenes de rollo' TYPE 'E'.
        RETURN.
      ENDIF.

      CONCATENATE 'OR' gv_aufnr_int INTO lv_objnr.

      SELECT * FROM jest
        INTO TABLE t_jest
        WHERE objnr = lv_objnr AND
              stat =  'I0002' AND "liberada
              inact = '' .

      IF sy-subrc = 0.
        gv_werks = wa_aufk-werks.

        SELECT SINGLE b~cputm a~budat
          FROM aufm AS a
             INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                                     AND b~mjahr = a~mjahr )
             INNER JOIN aufk  AS c ON c~aufnr = a~aufnr
             INTO (gv_hora_desde, gv_fecha)
             WHERE a~aufnr = gv_aufnr_int AND
                   a~werks = gv_werks AND
                   c~auart = 'ZI01'.

*INI CMS Fecha = sy-datum
        gv_fecha = sy-datum.
*FIN CMS Fecha = sy-datum


        gv_hora_hasta = gv_hora_desde.


        wa_datos_sel-aufnr = gv_aufnr_int.
        wa_datos_sel-werks = wa_aufk-werks.

        SELECT SINGLE plnbez gamng
          FROM afko
          INTO (wa_datos_sel-plnbez, wa_datos_sel-cantidad)
          WHERE aufnr = gv_aufnr_int.

        SELECT SINGLE maktx
          FROM makt
          INTO wa_datos_sel-desc_matnr
          WHERE matnr = wa_datos_sel-plnbez.

        wa_datos_sel-kunnr_1 = wa_aufk-zzkunnr1.
        SELECT SINGLE name1
          FROM kna1
            INTO wa_datos_sel-name_1
            WHERE kunnr = wa_aufk-zzkunnr1.

        SELECT SINGLE name1
          FROM kna1
          INTO wa_datos_sel-name_2
          WHERE kunnr = wa_aufk-zzkunnr2.

        SELECT SINGLE name1
          FROM kna1
          INTO wa_datos_sel-name_3
          WHERE kunnr = wa_aufk-zzkunnr3.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = wa_aufk-zzebeln1
          IMPORTING
            output = lv_zzebeln1.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = wa_aufk-zzebelp1
          IMPORTING
            output = lv_zzebelp1.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = wa_aufk-zzurgt1
          IMPORTING
            output = wa_aufk-zzurgt1.

        CONCATENATE  lv_zzebeln1 lv_zzebelp1 wa_aufk-zzurgt1
                     INTO wa_datos_sel-pedido_pos_1
                     SEPARATED BY '/'.

        IF wa_aufk-zzebeln2 IS NOT INITIAL.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = wa_aufk-zzebeln2
            IMPORTING
              output = lv_zzebeln1.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = wa_aufk-zzebelp2
            IMPORTING
              output = lv_zzebelp1.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = wa_aufk-zzurgt2
            IMPORTING
              output = wa_aufk-zzurgt2.
          CONCATENATE  lv_zzebeln1 lv_zzebelp1 wa_aufk-zzurgt2
                         INTO wa_datos_sel-pedido_pos_2
                         SEPARATED BY '/'.
        ENDIF.

        IF wa_aufk-zzebeln3 IS NOT INITIAL.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = wa_aufk-zzebeln3
            IMPORTING
              output = lv_zzebeln1.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = wa_aufk-zzebelp3
            IMPORTING
              output = lv_zzebelp1.

          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
            EXPORTING
              input  = wa_aufk-zzurgt3
            IMPORTING
              output = wa_aufk-zzurgt3.
          CONCATENATE  lv_zzebeln1 lv_zzebelp1 wa_aufk-zzurgt3
                         INTO wa_datos_sel-pedido_pos_3
                         SEPARATED BY '/'.
        ENDIF.

*   calidad
        SELECT SINGLE matkl FROM mara
          INTO wa_datos_sel-calidad
          WHERE matnr = wa_datos_sel-plnbez.

*   Kgs notificados
        SELECT SINGLE wemng FROM afpo
          INTO wa_datos_sel-kilos_notif
          WHERE aufnr = wa_datos_sel-aufnr.

*   Rollos plan y tornadas.
        CASE wa_datos_sel-werks.
          WHEN  '3020'. "Coeficiente 1000 para Sarriá
*            wa_datos_sel-rollos = wa_datos_sel-cantidad / 10000.
*            wa_datos_sel-tornadas = '3'.
            wa_datos_sel-rollos = wa_datos_sel-cantidad / zcl_secuenciador=>gc_kg_rollo_3020.
            wa_datos_sel-tornadas = zcl_secuenciador=>gc_tornadas_3020.
          WHEN '3000'. "Coeficiente 1200 para l'Alquería
*            wa_datos_sel-rollos = wa_datos_sel-cantidad / 12000.
*            wa_datos_sel-tornadas = '4'.
            wa_datos_sel-rollos = wa_datos_sel-cantidad / zcl_secuenciador=>gc_kg_rollo_3000.
            wa_datos_sel-tornadas = zcl_secuenciador=>gc_tornadas_3000.
        ENDCASE.

*   Rollos notificados Y Kgs Pulper
        CLEAR: t_aufm. REFRESH: t_aufm.
        SELECT charg bwart menge mblnr mjahr FROM aufm
          INTO TABLE t_aufm
          WHERE ( bwart = '101' OR bwart = '102' ) AND
                werks = wa_datos_sel-werks AND
                aufnr = wa_datos_sel-aufnr.

        CLEAR: wa_datos_sel-rollos_notif, wa_datos_sel-kg_pulper.
        LOOP AT t_aufm INTO wa_aufm.
          CLEAR: wa_mseg_309, lv_kg_pulper.

          SELECT SINGLE * FROM mseg
           INTO wa_mseg_309
           WHERE bwart = '309' AND
                 werks = gv_werks AND
                 charg = wa_aufm-charg.

          IF sy-subrc = 0.
            SELECT SINGLE menge FROM mseg
              INTO lv_kg_pulper
              WHERE mblnr = wa_mseg_309-mblnr AND
                mjahr = wa_mseg_309-mjahr AND
              charg <> wa_mseg_309-charg.
          ENDIF.

* DTM - Se suman o restan los rollos únicamente que sean notificaciones

          SELECT SINGLE bktxt FROM mkpf
            WHERE mblnr EQ @wa_aufm-mblnr
              AND mjahr EQ @wa_aufm-mjahr
          INTO @DATA(lv_bktxt).

* DTM

          CASE wa_aufm-bwart.
            WHEN '101'.
* DTM
              IF lv_bktxt EQ 'Notificación de rollos' OR
                 lv_bktxt EQ 'Notificación MES'.

                wa_datos_sel-rollos_notif = wa_datos_sel-rollos_notif + 1. "wa_aufm-menge.

              ENDIF.
* DTM
                wa_datos_sel-kg_pulper = wa_datos_sel-kg_pulper + lv_kg_pulper.
            WHEN '102'.
* DTM
              IF lv_bktxt EQ 'Notificación de rollos' OR
                 lv_bktxt EQ 'Notificación MES'.

                wa_datos_sel-rollos_notif = wa_datos_sel-rollos_notif - 1. "wa_aufm-menge.

              ENDIF.
* DTM
                wa_datos_sel-kg_pulper = wa_datos_sel-kg_pulper - lv_kg_pulper.
          ENDCASE.
        ENDLOOP.
      ELSE.
*       La orden no está liberada
        CLEAR: gv_aufnr.
        MESSAGE e252(zpp). "Orden de fabricación incorrecta
      ENDIF.

*    LEAVE TO SCREEN '0400'.
    ENDIF.
  ELSE.
    CLEAR: gv_aufnr_int.
  ENDIF.

ENDFORM.
