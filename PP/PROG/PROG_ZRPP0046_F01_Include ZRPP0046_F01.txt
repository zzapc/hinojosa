*&---------------------------------------------------------------------*
*&  Include           ZRPP0046_F01
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  VALIDACIONES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM validaciones .
  DATA: wa_mara TYPE mara,
        wa_marc TYPE marc.

  IF p_matnr IS INITIAL OR p_werks IS INITIAL.
    MESSAGE e272(zpp) DISPLAY LIKE 'I'. "Rellene todos los campos de la pantalla de selección
  ELSE.

    CLEAR: wa_mara, gt_recetas.
    REFRESH: gt_recetas.

    SELECT SINGLE * FROM mara
      INTO wa_mara
      WHERE matnr = p_matnr AND
            mtart = 'ZPLP'.
    IF sy-subrc <> 0.
      MESSAGE e279(zpp).  "El material indicado no es una plancha no manipulada
    ELSE.
      CLEAR: wa_marc.
      SELECT SINGLE * FROM marc
        INTO wa_marc
        WHERE matnr = p_matnr AND
              werks = p_werks.

      IF sy-subrc <> 0.
        MESSAGE e266(zpp) WITH p_matnr p_werks.  "El material & no existe en el centro &
      ENDIF.
    ENDIF.
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos .

  CLEAR: gt_mkal, wa_ppal, gt_recetas.
  REFRESH: gt_recetas, gt_mkal.

  SELECT * FROM mkal
    INTO TABLE gt_mkal
    WHERE matnr = p_matnr AND
          werks = p_werks AND
          verid <> ''.
  IF sy-subrc <> 0.
    MESSAGE e103(zpp) WITH p_matnr p_werks. "No hay versión de fabricación para material & en centro &.
  ELSE..

    LOOP AT gt_mkal INTO wa_mkal.
      CLEAR: wa_recetas.

      IF wa_mkal-verid = 'V001'.
        wa_recetas-version_ppal = 'X'.
      ELSE.
        CLEAR: wa_recetas-version_ppal.
      ENDIF.

      wa_recetas-stlal = wa_mkal-stlal.
      wa_recetas-version  = wa_mkal-verid.
      wa_recetas-descripcion_version = wa_mkal-text1.
      wa_recetas-receta  = wa_mkal-plnnr.

      IF wa_recetas-version_ppal = 'X'.
        MOVE wa_recetas TO wa_ppal.
      ELSE.
        APPEND wa_recetas TO gt_recetas.
      ENDIF.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_datos .
  DATA: ls_layout TYPE lvc_s_layo,
        lt_fcat   TYPE lvc_t_fcat.

  DATA: lt_tooltips TYPE lvc_t_qinf,
        lt_toolb    TYPE ui_functions.

*
*  IF gr_container_100 IS INITIAL. "IS NOT BOUND.
*    CREATE OBJECT gr_container_100
*      EXPORTING
*        container_name = 'CONTAINER_100'.
*
*    CREATE OBJECT gr_grid_100
*      EXPORTING
*        i_parent = gr_container_100.
*

*
**   Para los eventos
*    CREATE OBJECT g_application_100.
*
*
*    SET HANDLER g_application_100->handle_toolbar FOR gr_grid_100.
*    SET HANDLER g_application_100->handle_user_command FOR gr_grid_100.
**    SET HANDLER g_application_100->handle_hotspot_click FOR gr_grid_100.
*    SET HANDLER g_application_100->top_of_page FOR gr_grid_100.
*
*
*
*    PERFORM fieldcat_100 CHANGING lt_fcat.
*    PERFORM layout_100 CHANGING ls_layout.
*    PERFORM excluir_botones_100 CHANGING lt_toolb.
*
*    CALL METHOD gr_grid_100->set_table_for_first_display
*      EXPORTING
*        is_layout            = ls_layout
*        it_except_qinfo      = lt_tooltips
*        it_toolbar_excluding = lt_toolb
*        i_save               = 'A'
*      CHANGING
*        it_fieldcatalog      = lt_fcat
*        it_outtab            = gt_recetas.
*
*    .
*
*CALL METHOD gr_grid_100->list_processing_events
* EXPORTING
* i_event_name = 'TOP_OF_PAGE'
*i_dyndoc_id  = o_docu.
*
*  ELSE.
*
*    CALL METHOD gr_grid_100->refresh_table_display.
*  ENDIF.


  IF o_alv IS NOT BOUND.
    CREATE OBJECT o_alv
      EXPORTING
        i_parent = o_ref2.


*   Para los eventos
    CREATE OBJECT g_application_100.

    SET HANDLER g_application_100->handle_toolbar FOR  o_alv.
    SET HANDLER g_application_100->handle_user_command FOR  o_alv.
    SET HANDLER g_application_100->top_of_page FOR o_alv.



    PERFORM fieldcat_100 CHANGING lt_fcat.
    PERFORM layout_100 CHANGING ls_layout.
    PERFORM excluir_botones_100 CHANGING lt_toolb.


    CALL METHOD o_alv->set_table_for_first_display
      EXPORTING
        is_layout            = ls_layout
        it_except_qinfo      = lt_tooltips
        it_toolbar_excluding = lt_toolb
        i_save               = 'A'
      CHANGING
        it_fieldcatalog      = lt_fcat
        it_outtab            = gt_recetas.



    CALL METHOD o_alv->list_processing_events
      EXPORTING
        i_event_name = 'TOP_OF_PAGE'
        i_dyndoc_id  = o_docu.
  ELSE.

    CALL METHOD o_alv->refresh_table_display.


  ENDIF.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  FIELDCAT_100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_FCAT  text
*----------------------------------------------------------------------*
FORM fieldcat_100  CHANGING lt_fcat TYPE lvc_t_fcat.
  DATA: ls_fcat TYPE lvc_s_fcat.


  CLEAR: lt_fcat.
  REFRESH: lt_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZEPP0046'
    CHANGING
      ct_fieldcat      = lt_fcat
    EXCEPTIONS
      OTHERS           = 3.

  IF sy-subrc = 0.
    LOOP AT lt_fcat INTO ls_fcat.
      CASE ls_fcat-fieldname.
        WHEN 'VERSION_PPAL'.
          ls_fcat-no_out = 'X'.

        WHEN 'RECETA'.
          ls_fcat-coltext = text-001.
          ls_fcat-scrtext_l = text-001.
          ls_fcat-scrtext_m = text-001.
          ls_fcat-scrtext_s  = text-001.

*          ls_fcat-hotspot = 'X'.
        WHEN 'VERSION'.
          ls_fcat-coltext = text-002.
          ls_fcat-scrtext_l = text-002.
          ls_fcat-scrtext_m = text-002.
          ls_fcat-scrtext_s  = text-002.

        WHEN 'DESCRIPCION_VERSION'.
          ls_fcat-coltext = text-003.
          ls_fcat-scrtext_l = text-003.
          ls_fcat-scrtext_m = text-003.
          ls_fcat-scrtext_s  = text-003.

        WHEN 'VERSION_PPAL'.
          ls_fcat-coltext = text-004.
          ls_fcat-scrtext_l = text-004.
          ls_fcat-scrtext_m = text-004.
          ls_fcat-scrtext_s  = text-004.

      ENDCASE.
      MODIFY lt_fcat FROM ls_fcat.
    ENDLOOP.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LAYOUT_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_LAYOUT  text
*----------------------------------------------------------------------*
FORM layout_100  CHANGING ls_layout TYPE lvc_s_layo.
  ls_layout-zebra = 'X'.
  ls_layout-cwidth_opt = 'X'.
  ls_layout-sel_mode = 'A'.

*  ls_layout-ctab_fname = 'COLOR'.     "Enlazamos el campo en el layout


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXCLUIR_BOTONES_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_TOOLB  text
*----------------------------------------------------------------------*
FORM excluir_botones_100  CHANGING lt_toolb TYPE ui_functions.

  DATA: ls_toolb    TYPE ui_func.

  CLEAR:  lt_toolb.
  REFRESH:  lt_toolb.

  ls_toolb = cl_gui_alv_grid=>mc_fc_call_crbatch.
  APPEND ls_toolb TO lt_toolb.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MODIFICAR_VERSION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_RECETAS  text
*----------------------------------------------------------------------*
FORM modificar_version  USING   wa_recetas TYPE zepp0046.
  DATA: wa_mkal_ppal         TYPE mkal,
        wa_mkal_no_ppal      TYPE mkal,
        it_mkal_i            TYPE TABLE OF mkal,
        it_mkal_d            TYPE TABLE OF mkal,
        it_mkal_u            TYPE TABLE OF mkal,
        t_mkal_aend_ppal     TYPE TABLE OF mkal_aend,
        wa_mkal_aend_ppal    TYPE mkal_aend,
        t_mkal_aend_no_ppal  TYPE TABLE OF mkal_aend,
        wa_mkal_aend_no_ppal TYPE mkal_aend,
        it_mkal_aend         TYPE TABLE OF mkal_aend,
        wa_mkal_aend         TYPE  mkal_aend,
        lv_error             TYPE xfeld.


  CLEAR: it_mkal_i, it_mkal_d, it_mkal_u, it_mkal_aend, t_mkal_aend_ppal, t_mkal_aend_no_ppal,
         wa_mkal_ppal, wa_mkal_no_ppal, wa_mkal_aend.
  REFRESH: it_mkal_i, it_mkal_d, it_mkal_u, it_mkal_aend, t_mkal_aend_ppal, t_mkal_aend_no_ppal.

* verificamos si hay bloqueo
  PERFORM bloqueo_version USING p_matnr p_werks wa_ppal-version
                          CHANGING lv_error .

  IF lv_error IS INITIAL.
    PERFORM bloqueo_version USING p_matnr p_werks wa_recetas-version
                            CHANGING lv_error .
  ENDIF.

  IF lv_error IS INITIAL.

** versión ppal
    SELECT SINGLE * FROM mkal
      INTO wa_mkal_ppal
      WHERE matnr = p_matnr AND
            werks = p_werks AND
           verid = wa_ppal-version.

    SELECT * FROM mkal_aend
      INTO TABLE t_mkal_aend_ppal
      WHERE matnr = p_matnr AND
            werks = p_werks AND
            verid = wa_ppal-version.

    SORT t_mkal_aend_ppal BY zaehl DESCENDING.
    READ TABLE t_mkal_aend_ppal INTO wa_mkal_aend_ppal INDEX 1.

    wa_mkal_ppal-verid = wa_recetas-version.
    APPEND wa_mkal_ppal TO it_mkal_u.

    wa_mkal_aend_ppal-zaehl = wa_mkal_aend_ppal-zaehl + 1.
    wa_mkal_aend_ppal-aedat  = sy-datum.
    wa_mkal_aend_ppal-aenam  = sy-uname.
    wa_mkal_aend_ppal-vbkz  = 'U'.
    APPEND wa_mkal_aend_ppal TO it_mkal_aend.

** versión no ppal
    SELECT SINGLE * FROM mkal
      INTO wa_mkal_no_ppal
      WHERE matnr = p_matnr AND
            werks = p_werks AND
            verid = wa_recetas-version.

    SELECT * FROM mkal_aend
      INTO TABLE t_mkal_aend_no_ppal
      WHERE matnr = p_matnr AND
            werks = p_werks AND
            verid = wa_recetas-version.

    SORT t_mkal_aend_no_ppal BY zaehl DESCENDING.
    READ TABLE t_mkal_aend_no_ppal INTO wa_mkal_aend_no_ppal INDEX 1.

    wa_mkal_no_ppal-verid = wa_ppal-version.
    APPEND wa_mkal_no_ppal TO it_mkal_u.

    wa_mkal_aend_no_ppal-zaehl = wa_mkal_aend_no_ppal-zaehl + 1.
    wa_mkal_aend_no_ppal-aedat  = sy-datum.
    wa_mkal_aend_no_ppal-aenam  = sy-uname.
    wa_mkal_aend_no_ppal-vbkz	= 'U'.
    APPEND wa_mkal_aend_no_ppal TO it_mkal_aend.


    CALL FUNCTION 'CM_FV_PROD_VERS_DB_UPDATE'
      TABLES
        it_mkal_i    = it_mkal_i
        it_mkal_u    = it_mkal_u
        it_mkal_d    = it_mkal_d
        it_mkal_aend = it_mkal_aend.


    PERFORM obtener_datos.
  ELSE.
    PERFORM mostrar_log.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DATOS_CABECERA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM datos_cabecera .
  DATA: lt_marm TYPE STANDARD TABLE OF marm,
        wa_marm TYPE marm.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = p_matnr
    IMPORTING
      output = gv_matnr_ext.


* obtenemos la descripción del material
  SELECT SINGLE maktx FROM makt
    INTO gv_maktx
    WHERE matnr = p_matnr AND
          spras = sy-langu.

* obtenemos el grameje del material
  SELECT SINGLE zzgrampla FROM mara
    INTO gv_gramaje
    WHERE matnr = p_matnr.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = gv_gramaje
    IMPORTING
      output = gv_gramaje.


* obtenemos el peso del material
  SELECT * FROM marm
    INTO TABLE lt_marm
    WHERE matnr = p_matnr.

  READ TABLE lt_marm INTO wa_marm WITH KEY meinh = 'GR'.
  IF sy-subrc <> 0.
    READ TABLE lt_marm INTO wa_marm WITH KEY meinh = 'KG'.
  ENDIF.

  IF wa_marm IS NOT INITIAL.
    IF wa_marm-umrez IS INITIAL.
      gv_peso = 0.
    ELSE.
      gv_peso = wa_marm-umren / wa_marm-umrez.
    ENDIF.
  ENDIF.

  IF wa_marm-meinh <> 'KG'.
    gv_peso = gv_peso / 1000.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  BLOQUEO_VERSION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_MATNR  text
*      -->P_P_WERKS  text
*      -->P_WA_PPAL_VERSION  text
*      <--P_LV_ERROR  text
*----------------------------------------------------------------------*
FORM bloqueo_version  USING    p_matnr
                               p_werks
                               p_version
                      CHANGING lv_error.

  DATA: lt_messages LIKE bapiret2 OCCURS 0,
        wa_messages TYPE bapiret2.

  DATA: lv_extnumber TYPE balnrext.

  CALL FUNCTION 'ENQUEUE_EMATVER'
    EXPORTING
      mode_mkal      = 'E'
      mandt          = sy-mandt
      matnr          = p_matnr
      werks          = p_werks
      verid          = p_version
*     X_MATNR        = ' '
*     X_WERKS        = ' '
*     X_VERID        = ' '
*     _SCOPE         = '2'
*     _WAIT          = ' '
*     _COLLECT       = ' '
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
    lv_error = 'X'.

    wa_messages-type = 'E'.
    wa_messages-id = 'ZPP'.
    wa_messages-number = '282'. "La versión & está siendo bloqueada por otro usuario o por otro proceso
    wa_messages-message_v1 =  p_version.
*    gs_messages-message_v2 = wa_messtab-msgv2.
*    gs_messages-message_v3 = wa_messtab-msgv3.
*    gs_messages-message_v4 = wa_messtab-msgv4.
    APPEND wa_messages TO lt_messages.
  ENDIF.


  IF lt_messages IS NOT INITIAL.
    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZCIP_VF_REC'
        subobjeto = 'CIP_MO_VF'
        mensajes  = lt_messages[]
        extnumber = lv_extnumber.

    APPEND LINES OF lt_messages TO gt_messages.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_log .
  IF gt_messages[] IS NOT INITIAL.
    READ TABLE gt_messages INTO gs_messages WITH KEY type = ''.
    IF sy-subrc <> 0.

      CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
        TABLES
          i_bapiret2_tab = gt_messages.
    ENDIF.
  ENDIF.
ENDFORM.
