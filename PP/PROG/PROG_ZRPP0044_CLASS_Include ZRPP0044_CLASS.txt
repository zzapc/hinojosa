*&---------------------------------------------------------------------*
*&  Include           ZRPP0044_CLASS
*&---------------------------------------------------------------------*

*----------------------------------------------------------------------*
*       CLASS lcl_grid_event_receiver DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS LCL_GRID_EVENT_RECEIVER DEFINITION.
  PUBLIC SECTION.
    METHODS:
    HANDLE_DATA_CHANGED FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
                        IMPORTING ER_DATA_CHANGED,
                                  TOOLBAR FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
                                          IMPORTING E_OBJECT
                                  E_INTERACTIVE,
                                  USER_COMMAND FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
                                               IMPORTING E_UCOMM.
ENDCLASS.                    "lcl_grid_event_receiver DEFINITION
*-------------------------------------------------------------------*
*implementation of Grid event-handler class
*-------------------------------------------------------------------*
CLASS LCL_GRID_EVENT_RECEIVER IMPLEMENTATION.
  METHOD HANDLE_DATA_CHANGED.
* code whatever required after data entry.
* various possibilites here as you can get back Cell(s) changed
* columns or the entire updated table.
* Data validation is also possible here.
    PERFORM CHECK_DATA USING ER_DATA_CHANGED.
  ENDMETHOD.                    "handle_data_changed
*---------------------------------------------------------------------
* Method for handling all creation/modification calls to the toolbar
*---------------------------------------------------------------------
  METHOD TOOLBAR.
    DATA : LS_TOOLBAR TYPE STB_BUTTON.
*--------------------------------------------------------------------*
*  Define Custom Button in the toolbar
*--------------------------------------------------------------------*
    CLEAR LS_TOOLBAR.
    MOVE 0 TO LS_TOOLBAR-BUTN_TYPE.
    MOVE 'EDIT' TO LS_TOOLBAR-FUNCTION.
    MOVE SPACE TO LS_TOOLBAR-DISABLED.
    MOVE 'Edit' TO LS_TOOLBAR-TEXT.
    MOVE ICON_CHANGE_TEXT TO LS_TOOLBAR-ICON.
    MOVE 'Click2Edit' TO LS_TOOLBAR-QUICKINFO.
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

    CLEAR LS_TOOLBAR.
    MOVE 0 TO LS_TOOLBAR-BUTN_TYPE.
    MOVE 'UPDA' TO LS_TOOLBAR-FUNCTION.
    MOVE SPACE TO LS_TOOLBAR-DISABLED.
    MOVE 'Update' TO LS_TOOLBAR-TEXT.
    MOVE ICON_SYSTEM_SAVE TO LS_TOOLBAR-ICON.
    MOVE 'Click2Update' TO LS_TOOLBAR-QUICKINFO.
    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

*    CLEAR LS_TOOLBAR.
*    MOVE 0 TO LS_TOOLBAR-BUTN_TYPE.
*    MOVE 'EXIT' TO LS_TOOLBAR-FUNCTION.
*    MOVE SPACE TO LS_TOOLBAR-DISABLED.
*    MOVE 'Exit' TO LS_TOOLBAR-TEXT.
*    MOVE ICON_SYSTEM_END TO LS_TOOLBAR-ICON.
*    MOVE 'Click2Exit' TO LS_TOOLBAR-QUICKINFO.
*    APPEND LS_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

  ENDMETHOD.                    "toolbar

  METHOD USER_COMMAND.
    CASE E_UCOMM .
      WHEN 'EDIT'. "From Tool bar
        PERFORM AUTORITY_CHECK.
        PERFORM SET_INPUT.
        PERFORM INIT_GRID.
      WHEN 'UPDA'. "From Tool bar
        PERFORM REFRESH_DISP.
        PERFORM UPDATE_TABLE.
*      WHEN 'EXIT'. "From Tool bar
*        LEAVE PROGRAM.
    ENDCASE.
  ENDMETHOD.                    "user_command
ENDCLASS.                    "lcl_grid_event_receiver IMPLEMENTATION
*----------------------------------------------------------------------*
*       CLASS zcltest DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS ZCLTEST DEFINITION INHERITING FROM CL_GUI_ALV_GRID.
*
* define this as a subclass so we can access the protected attributes
* of the superclass cl_gui_alv_grid
  PUBLIC SECTION.
    METHODS: CONSTRUCTOR, DISP_TAB.
ENDCLASS.                    "zcltest DEFINITION

* need this now to instantiate object
* as we are using subclass rather than the main cl_gui_alv_grid.
CLASS ZCLTEST IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    CALL METHOD SUPER->CONSTRUCTOR
      EXPORTING
        I_APPL_EVENTS = 'X'
        I_PARENT      = GRID_CONTAINER1.
    .
  ENDMETHOD.                    "constructor

  METHOD DISP_TAB.
    FIELD-SYMBOLS: <OUTTAB> TYPE STANDARD TABLE.
* mt_outtab is the data table held as a protected attribute
* in class cl_gui_alv_grid.
    ASSIGN ME->MT_OUTTAB->* TO <OUTTAB>. "Original data
* do whatever you want with <outtab>
* contains data BEFORE changes each time.
*
* Note that NEW (Changed) table has been obtained already by
* call to form check_data USING P_ER_DATA_CHANGED
* TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.
* Entered data is in table defined by <fs2>
* In this method you can compare original and changed data.
*
* Easier than messing around with individual cells.
* do what you want with data in <fs2> validate / update / merge etc
*
  ENDMETHOD.                    "disp_tab
ENDCLASS.                    "zcltest IMPLEMENTATION


*CLASS lcl_event_handler DEFINITION.
*
*  PUBLIC SECTION.
*
*    METHODS handle_data_changed " Detectar cambios en ALV
*            FOR EVENT data_changed OF cl_gui_alv_grid
*            IMPORTING er_data_changed e_onf4 e_onf4_before
*                      e_onf4_after e_ucomm.
*
*ENDCLASS.                    "lcl_application DEFINITION
*
*
*
**&---------------------------------------------------------------------*
**&       Class (Implementation)  lcl_application
**&---------------------------------------------------------------------*
**        Text
**----------------------------------------------------------------------*
*CLASS lcl_event_handler IMPLEMENTATION.
*
*  METHOD handle_data_changed.
*    PERFORM f_get_modified_rows USING er_data_changed.
*  ENDMETHOD.                    "handle_data_changed
*
*ENDCLASS.                    "lcl_application IMPLEMENTATION
