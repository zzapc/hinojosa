*&---------------------------------------------------------------------*
*&  Include           ZRPP0047_I01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  GET_DESCRIPCION_MATERIAL  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE get_descripcion_material INPUT.
  CLEAR: gv_maktx, gt_lotes, gv_charg.
  REFRESH: gt_lotes.

  IF gv_matnr IS NOT INITIAL.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = gv_matnr
      IMPORTING
        output = gv_matnr_ext.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gv_matnr
      IMPORTING
        output = gv_matnr_int.


    SELECT SINGLE maktx FROM makt
      INTO gv_maktx
      WHERE matnr = gv_matnr_int AND
            spras = sy-langu.

    SELECT SINGLE meins FROM mara
      INTO gv_meins
      WHERE matnr = gv_matnr_int.

    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
      EXPORTING
        input    = gv_meins
        language = sy-langu
      IMPORTING
*       LONG_TEXT            =
        output   = gv_meins
*       SHORT_TEXT           =
*         EXCEPTIONS
*       UNIT_NOT_FOUND       = 1
*       OTHERS   = 2
      .
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

    SELECT SINGLE @abap_true FROM mara
    WHERE matnr EQ @gv_matnr_int
      INTO @DATA(result).

    IF sy-subrc NE 0.
      MESSAGE 'El material no existe' TYPE 'E'.
    ENDIF.

  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_CENTRO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_centro INPUT.

  IF gv_werks IS NOT INITIAL.
    SELECT SINGLE @abap_true FROM t001w
      WHERE werks EQ @gv_werks
        INTO @DATA(result2).

    IF sy-subrc NE 0.
      MESSAGE 'El centro no existe' TYPE 'E'.
    ENDIF.
  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_LOTE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_datos INPUT.
  DATA: t_mchb  TYPE STANDARD TABLE OF mchb,
        wa_mchb TYPE mchb,
        num_reg TYPE sy-tabix.

  CLEAR: t_mchb, gv_clabs, gv_cspem.
  REFRESH: t_mchb.

  CHECK gv_matnr_int IS NOT INITIAL AND gv_werks IS NOT INITIAL AND
        gv_charg IS NOT INITIAL.

  SELECT * FROM mchb
    INTO TABLE t_mchb
    WHERE matnr = gv_matnr_int AND
          werks = gv_werks AND
          charg = gv_charg AND
          ( clabs > 0 OR cspem > 0 ).

  IF sy-subrc = 0.
    DESCRIBE TABLE t_mchb LINES num_reg.
    IF num_reg = 1.
      READ TABLE t_mchb INTO wa_mchb INDEX 1.
      IF wa_mchb-clabs > 0.
        gv_menge = wa_mchb-clabs.
        CLEAR: gv_bloquear_campos.
        gv_clabs = 'X'.
      ELSEIF wa_mchb-cspem > 0.
        gv_menge = wa_mchb-cspem.
        CLEAR: gv_bloquear_campos.
        gv_cspem = 'X'.
      ENDIF.


    ELSE.
      DELETE t_mchb WHERE clabs = 0 AND cspem = 0.
      DESCRIBE TABLE t_mchb LINES num_reg.
      IF num_reg = 0.
        gv_bloquear_campos = 'X'.
        MESSAGE e009(zpp) WITH gv_charg. "El lote & no tiene stock
      ELSE.
        CLEAR: gv_bloquear_campos.
        READ TABLE t_mchb INTO wa_mchb INDEX 1.
        LOOP AT t_mchb INTO wa_mchb WHERE lgort <> wa_mchb-lgort.
          gv_bloquear_campos = 'X'.
          EXIT.
        ENDLOOP.

        IF gv_bloquear_campos IS INITIAL.
          READ TABLE t_mchb INTO wa_mchb INDEX 1.
          IF wa_mchb-clabs > 0.
            gv_menge = wa_mchb-clabs.
            CLEAR: gv_bloquear_campos.
            gv_clabs = 'X'.
          ELSEIF wa_mchb-cspem > 0.
            gv_menge = wa_mchb-cspem.
            CLEAR: gv_bloquear_campos.
            gv_cspem = 'X'.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.
    gv_bloquear_campos = 'X'.
    MESSAGE e009(zpp) WITH gv_charg. "El lote & no tiene stock
  ENDIF.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  OBTENER_MAT_EXTERNO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE obtener_mat_externo INPUT.
  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = gv_matnr_alta
    IMPORTING
      output = gv_matnr_alta_int.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = gv_matnr_alta
    IMPORTING
      output = gv_matnr_alta_ext.

  IF gv_matnr_alta IS NOT INITIAL.
    SELECT SINGLE @abap_true FROM mara
      WHERE matnr EQ @gv_matnr_alta_int
        INTO @DATA(result3).

    IF sy-subrc NE 0.
      MESSAGE 'El material alta no existe' TYPE 'E'.
    ENDIF.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  MATCHCODE_LOTE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE matchcode_lote INPUT.
  DATA: it_match TYPE TABLE OF ddshretval,
        wa_match TYPE ddshretval.

  CHECK gv_matnr_int IS NOT INITIAL AND gv_werks IS NOT INITIAL.

  SELECT charg FROM mchb
    INTO TABLE gt_lotes
    WHERE matnr = gv_matnr_int AND
          werks = gv_werks.

  IF gt_lotes[] IS INITIAL.
*    MESSAGE e291(zpp) WITH gv_matnr gv_werks. "No existen lotes con stock para el material & en el centro &

  ELSE.


* Se hace uso de la función que convoca al matchcode y transforma nuestra tabla interna
    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield        = 'CHARG'
        window_title    = 'Lotes'
        value_org       = 'S'
      TABLES
        value_tab       = gt_lotes
        return_tab      = it_match
      EXCEPTIONS
        parameter_error = 1
        no_values_found = 2
        OTHERS          = 3.

* Si todo es correcto
    IF sy-subrc EQ 0.
*   Leemos lo que obtenermos y se lo pasamos a nuestro campo del dynpro
      READ TABLE it_match INTO wa_match INDEX 1.
      MOVE wa_match-fieldval TO gv_charg.
    ENDIF.
  ENDIF.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  MATCHCODE_MATERIAL  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE matchcode_material INPUT.
  TYPES: BEGIN OF tipo_materiales,
           matnr TYPE matnr,
           maktx TYPE maktx.
  TYPES: END OF tipo_materiales.
  TYPES: tty_materiales TYPE TABLE OF tipo_materiales.

  DATA: gt_materiales TYPE tty_materiales.
*        it_match TYPE TABLE OF ddshretval,
*        wa_match TYPE ddshretval.

  CHECK gv_werks IS NOT INITIAL.

  SELECT marc~matnr makt~maktx FROM marc
      INNER JOIN makt ON marc~matnr = makt~matnr
      INTO TABLE gt_materiales
      WHERE werks = gv_werks AND
            sfcpf <> 0 AND
            spras = sy-langu.

* Se hace uso de la función que convoca al matchcode y transforma nuestra tabla interna
  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'MATNR'
      window_title    = 'Materiales'
      value_org       = 'S'
    TABLES
      value_tab       = gt_materiales
      return_tab      = it_match
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.

* Si todo es correcto
  IF sy-subrc EQ 0.
*   Leemos lo que obtenermos y se lo pasamos a nuestro campo del dynpro
    READ TABLE it_match INTO wa_match INDEX 1.
    MOVE wa_match-fieldval TO gv_matnr.
  ENDIF.

ENDMODULE.
