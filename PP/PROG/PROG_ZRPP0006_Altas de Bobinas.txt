*&---------------------------------------------------------------------*
*& Report  ZRPP0005
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

INCLUDE zrpp0006_top.
*INCLUDE zrpp0005_top                            .    " global Data

* INCLUDE ZRPP0005_O01                            .  " PBO-Modules
* INCLUDE ZRPP0005_I01                            .  " PAI-Modules
* INCLUDE ZRPP0005_F01                            .  " FORM-Routines

* PANTALLA DE SELECCION
SELECTION-SCREEN BEGIN OF BLOCK zrpp0005 WITH FRAME TITLE text-001.
PARAMETERS p_aufnr LIKE aufk-aufnr ."OBLIGATORY.
PARAMETERS p_menge TYPE erfmg. "OBLIGATORY.
PARAMETERS p_charg LIKE mch1-charg."OBLIGATORY.
PARAMETERS p_ktext LIKE aufk-ktext.
PARAMETERS p_werks LIKE crhd-werks.
PARAMETERS p_arbpl LIKE crhd-arbpl MATCHCODE OBJECT crrm.
*PARAMETERS p_lgort TYPE lgort_d.
*PARAMETERS p_sent TYPE zsentido_bob.

SELECTION-SCREEN BEGIN OF BLOCK zrpp0005_2 WITH FRAME TITLE text-002.

PARAMETERS: p_diam TYPE zzdiametro,
            p_long TYPE atinn,
            p_ffab TYPE datum DEFAULT sy-datum,
            p_empa TYPE atinn.

SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_repr AS CHECKBOX DEFAULT ' '.
SELECTION-SCREEN COMMENT 3(25) text-012.
PARAMETERS: p_c_repr LIKE cawn-atwrt MATCHCODE OBJECT zhpp_carac_reproceso.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_pulper AS CHECKBOX DEFAULT ' '.
SELECTION-SCREEN COMMENT 3(25) text-011.
PARAMETERS: p_c_pulp LIKE cawn-atwrt MATCHCODE OBJECT zhhb_charsvf.
SELECTION-SCREEN END OF LINE.

PARAMETERS: p_ped TYPE vbeln_va,
            p_pos TYPE posnr_va,
            p_cli TYPE kunnr,
            p_name1 TYPE name1.

SELECTION-SCREEN END OF BLOCK zrpp0005_2.
SELECTION-SCREEN END OF BLOCK zrpp0005.


INCLUDE zrpp0006_form.
*INCLUDE zrpp0005_form.    " global Data

INITIALIZATION.

  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'P_KTEXT' OR 'P_PED' OR 'P_POS' OR 'P_CLI' OR 'P_NAME1'.
        screen-input = 0.
      WHEN 'P_C_PULP'.
        CLEAR p_c_pulp.
        screen-input = 0.
      WHEN 'P_C_REPR'.
        CLEAR p_c_repr.
        screen-input = 0.
*  	WHEN .
      WHEN OTHERS.
    ENDCASE.

    MODIFY SCREEN.
  ENDLOOP.


AT SELECTION-SCREEN OUTPUT.

  PERFORM mostrar_imagen.

  IF NOT p_aufnr IS INITIAL.


      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = p_aufnr
        IMPORTING
          output = p_aufnr.

      SELECT SINGLE ktext zzebeln1 zzebelp1 zzkunnr1
        INTO (p_ktext, p_ped, p_pos, p_cli)
        FROM aufk
        WHERE aufnr = p_aufnr.

      IF sy-subrc <> 0.
        MESSAGE e010 WITH p_aufnr.
      ELSE.
        SELECT SINGLE name1 INTO p_name1
         FROM kna1
         WHERE kunnr = p_cli.

        SELECT SINGLE maktx INTO p_ktext
          FROM makt
          INNER JOIN afko ON afko~plnbez = makt~matnr
          WHERE makt~spras = sy-langu
            AND afko~aufnr = p_aufnr.

      ENDIF.
    ENDIF.


  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'P_KTEXT' OR 'P_PED' OR 'P_POS' OR 'P_CLI' OR 'P_NAME1'.
        screen-input = 0.
*  	WHEN .

      WHEN 'P_C_PULP'.
        IF p_pulper = 'X'.
          screen-input = 1.
        ELSE.
          CLEAR p_c_pulp.
          screen-input = 0.
        ENDIF.

      WHEN 'P_C_REPR'.
        IF p_repr = 'X'.
          screen-input = 1.
        ELSE.
          CLEAR p_c_repr.
          screen-input = 0.
        ENDIF.

      WHEN OTHERS.
    ENDCASE.

    MODIFY SCREEN.
  ENDLOOP.


AT SELECTION-SCREEN.
  PERFORM orden_liberada.
  PERFORM chequeo_puper_reproceso.


START-OF-SELECTION.
* validar el puesto de trabajo
  PERFORM validacion USING p_aufnr.

* INI GST - 27/03/2015 ->
  IF NOT p_aufnr IS INITIAL.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = p_aufnr
      IMPORTING
        output = p_aufnr.

    SELECT SINGLE ktext zzebeln1 zzebelp1 zzkunnr1
      INTO (p_ktext, p_ped, p_pos, p_cli)
      FROM aufk
      WHERE aufnr = p_aufnr.

    IF sy-subrc <> 0.
      MESSAGE e010 WITH p_aufnr.
    ELSE.
      SELECT SINGLE name1 INTO p_name1
        FROM kna1
        WHERE kunnr = p_cli.

      SELECT SINGLE maktx INTO p_ktext
        FROM makt
        INNER JOIN afko ON afko~plnbez = makt~matnr
        WHERE makt~spras = sy-langu
          AND afko~aufnr = p_aufnr.

    ENDIF.
  ENDIF.
* FIN GST - 27/03/2015 <-


* CONTROLAR QUE EL PESO SEA EL CORRECTO Y PREGUNTAR ANTES DE CONTINUAR
  CLEAR: gv_answer, gt_param, gv_text, gv_peso.
  REFRESH: gt_param.

* INI GST - 30/09/2015 - No consumir más KG que Rollo ->
  PERFORM stock_rollo USING p_aufnr
                            p_menge
                            p_charg
                      CHANGING gv_error.

  CHECK gv_error <> 'X'.
* FIN GST - 30/09/2015 - No consumir más KG que Rollo <-

  IF p_menge > 5000.

    CLEAR: gv_answer, gt_param, gv_text, gv_peso.
    REFRESH: gt_param.

*    gv_peso = p_menge.
    WRITE p_menge TO gv_peso.

    CONCATENATE text-004 gv_peso 'KG' '?' INTO gv_text SEPARATED BY space.

    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        titlebar       = text-003
*       DIAGNOSE_OBJECT             = ' '
        text_question  = gv_text
*       TEXT_BUTTON_1  = 'Ja'(001)
*       ICON_BUTTON_1  = ' '
*       TEXT_BUTTON_2  = 'Nein'(002)
*       ICON_BUTTON_2  = ' '
*       DEFAULT_BUTTON = '1'
*       DISPLAY_CANCEL_BUTTON       = 'X'
*       USERDEFINED_F1_HELP         = ' '
*       START_COLUMN   = 25
*       START_ROW      = 6
*       POPUP_TYPE     =
*       IV_QUICKINFO_BUTTON_1       = ' '
*       IV_QUICKINFO_BUTTON_2       = ' '
      IMPORTING
        answer         = gv_answer
      TABLES
        parameter      = gt_param
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.
    IF sy-subrc <> 0.
*   Implement suitable error handling here
    ENDIF.
  ENDIF.


  IF gv_answer IS INITIAL OR gv_answer = '1'.
*   INI GST - 09/03/2015 ->
    CLEAR: gv_error, gv_mat_rollo.

*   INI GST - 26/03/2015 ->
*   Material rollo cogerlo de la resb SIEMPRE!!
*    PERFORM mat_rollo using p_aufnr
*                            p_menge
*                            p_charg
*                      changing gv_mat_rollo
*                               gv_error.
    PERFORM mat_rollo_resb USING p_aufnr
                            p_menge
                            p_charg
                      CHANGING gv_mat_rollo
                               gv_error.

*   FIN GST - 26/03/2015 <-
    CHECK gv_error <> 'X'.
*   FIN GST - 09/03/2015 <-

*   INI GST - 07/04/2015 ->
*   Chequeo hay 4 mov. o más (261) contra el material/lote rollo:
    PERFORM mov_261 USING p_charg
                          gv_mat_rollo
                          p_aufnr
                    CHANGING gv_mov
                             gv_bob.

    IF gv_mov = 'X'.

      CLEAR: gv_answer_2, gt_param_2, gv_text_2, gv_bob_txt.
      REFRESH: gt_param_2.

      WRITE gv_bob TO gv_bob_txt.
      CONCATENATE text-005 gv_bob_txt text-006 gv_mat_rollo
                  text-007 p_charg text-008
                  INTO gv_text_2 SEPARATED BY space.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          titlebar       = text-009
*         DIAGNOSE_OBJECT             = ' '
          text_question  = gv_text_2
*         TEXT_BUTTON_1  = 'Ja'(001)
*         ICON_BUTTON_1  = ' '
*         TEXT_BUTTON_2  = 'Nein'(002)
*         ICON_BUTTON_2  = ' '
*         DEFAULT_BUTTON = '1'
*         DISPLAY_CANCEL_BUTTON       = 'X'
*         USERDEFINED_F1_HELP         = ' '
*         START_COLUMN   = 25
*         START_ROW      = 6
*         POPUP_TYPE     =
*         IV_QUICKINFO_BUTTON_1       = ' '
*         IV_QUICKINFO_BUTTON_2       = ' '
        IMPORTING
          answer         = gv_answer_2
        TABLES
          parameter      = gt_param_2
        EXCEPTIONS
          text_not_found = 1
          OTHERS         = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
    ENDIF.

    IF gv_answer_2 IS INITIAL OR gv_answer_2 = '1'.
*   FIN GST - 07/04/2015 <-

* EN CASO DE SER UN ALTA NORMAL SE GENERA EL 101,
* EN CASO DE IR A PULPER ES UN 531 PORQUE SE MODIFICA EL MATERIAL
      IF p_pulper IS INITIAL.
*1.- ALTA STOCK CONTRA ORDEN Y CREACION LOTE
        PERFORM alta_stock.
      ELSE.
*1.1.- BUSCAR CODIGO DE ROLLO A CONSUMIR EN BOBINA
        PERFORM lista_materiales.

      ENDIF.

      IF gv_error IS INITIAL.
        IF p_pulper IS INITIAL.
*2.- CLASIFICAR LOTE
          PERFORM clasificar_lote.
        ELSE.
*2.1.- CLASIFICAR LOTE
          PERFORM clasificar_lote_pulper.
        ENDIF.


*3.- NOTICAR
*       ini GST - 11/09/2015 ->
*       PERFORM notificar_orden.
        PERFORM notificar_orden_new.
*       fin GST - 11/09/2015 <-

        IF gv_error IS INITIAL. "cgijon: 21.03.17 - Ticket 25469 - SOLO NOTIFICAR ÓRDENES ZI02

          IF p_pulper IS INITIAL.
*4.- IMPRESION ETIQUETA
            PERFORM imprimir_etiqueta.
          ELSE.
            PERFORM imprimir_etiqueta_pulper.
          ENDIF.
        ENDIF. "cgijon: 21.03.17 - Ticket 25469 - SOLO NOTIFICAR ÓRDENES ZI02
      ENDIF.


*5.- MOSTRAR LOG
      PERFORM mostrar_log.

*     INI GST - 30/07/2015 ->
*     Ticket 7043: Guardar log de sistemas
      CLEAR gv_extnumber.
      CONCATENATE gv_matnr_bob gv_charg INTO gv_extnumber.

      CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
        EXPORTING
          objeto    = 'ZPP'
          subobjeto = 'ZPP0012'
          mensajes  = gt_messages[]
          extnumber = gv_extnumber.
*     FIN GST - 30/07/2015 <-

*6.- LIMPIAR VARIABLES
      PERFORM clean_vbles.

    ENDIF.

* GST - 07/04/2015 ->
  ENDIF.
* GST - 07/04/2015 <-
