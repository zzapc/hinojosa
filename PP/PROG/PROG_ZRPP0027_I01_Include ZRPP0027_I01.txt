*&---------------------------------------------------------------------*
*&  Include           ZRPP0027_I01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  CAMBIO_TURNO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE cambio_turno INPUT.

  TYPES: tty_dd07v TYPE STANDARD TABLE OF dd07v.
  DATA: lt_turno TYPE tty_dd07v.
  DATA: wa_turno TYPE LINE OF tty_dd07v.
  DATA: lv_answer TYPE c,
        lv_turno  TYPE zzturno.

  DATA: lv_hora_desde(8),
        lv_hora_hasta(8).

  SELECT SINGLE turno , hora_desde , hora_hasta
    FROM zpp_turno
*    INTO (lv_turno, gv_hora_desde, gv_hora_hasta)
    INTO @DATA(wa_torn)
    WHERE turno = @gv_turno.

  IF sy-subrc <> 0.
    CLEAR: gv_turno.
    MESSAGE e126(zpp).

  ELSE.
    gv_hora_desde = wa_torn-hora_desde.
    gv_hora_hasta = wa_torn-hora_hasta.
    WRITE gv_hora_desde TO lv_hora_desde USING EDIT MASK '__:__:__'.
    WRITE gv_hora_hasta TO lv_hora_hasta USING EDIT MASK '__:__:__'.


    CONCATENATE lv_hora_desde lv_hora_hasta INTO gv_rango_horas
    SEPARATED BY '-'.

    IF gv_turno <> 'T3'.
      IF sy-uzeit < gv_hora_desde OR sy-uzeit > gv_hora_hasta.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
*           TITLEBAR       = 'Verificación de horas'
*           DIAGNOSE_OBJECT             = ' '
            text_question  = text-003
            text_button_1  = 'Ja'(001)
*           ICON_BUTTON_1  = ' '
            text_button_2  = 'No'(002)
*           ICON_BUTTON_2  = ' '
            default_button = '2'
*           DISPLAY_CANCEL_BUTTON       = 'X'
*           USERDEFINED_F1_HELP         = ' '
*           START_COLUMN   = 25
*           START_ROW      = 6
*           POPUP_TYPE     =
*           IV_QUICKINFO_BUTTON_1       = ' '
*           IV_QUICKINFO_BUTTON_2       = ' '
          IMPORTING
            answer         = lv_answer
*         TABLES
*           PARAMETER      =
          EXCEPTIONS
            text_not_found = 1
            OTHERS         = 2.
        IF sy-subrc <> 0.
*         Implement suitable error handling here
        ELSE.
          IF lv_answer <> '1'.
            CLEAR: gv_turno, gv_rango_horas.
          ELSE.
*            PERFORM obtener_prod_turnos.
          ENDIF.
        ENDIF.
      ELSE.
*        PERFORM obtener_prod_turnos.
      ENDIF.
    ELSE.
      IF ( sy-uzeit >= '220000' AND sy-uzeit <= '235959' ) OR
         ( sy-uzeit >= '000000' AND sy-uzeit <= '055959' ).
*        PERFORM obtener_prod_turnos.
      ELSE.

        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
*           TITLEBAR       = 'Verificación de horas'
*           DIAGNOSE_OBJECT             = ' '
            text_question  = text-003
            text_button_1  = 'Ja'(001)
*           ICON_BUTTON_1  = ' '
            text_button_2  = 'No'(002)
*           ICON_BUTTON_2  = ' '
            default_button = '2'
*           DISPLAY_CANCEL_BUTTON       = 'X'
*           USERDEFINED_F1_HELP         = ' '
*           START_COLUMN   = 25
*           START_ROW      = 6
*           POPUP_TYPE     =
*           IV_QUICKINFO_BUTTON_1       = ' '
*           IV_QUICKINFO_BUTTON_2       = ' '
          IMPORTING
            answer         = lv_answer
*         TABLES
*           PARAMETER      =
          EXCEPTIONS
            text_not_found = 1
            OTHERS         = 2.
        IF sy-subrc <> 0.
*       Implement suitable error handling here
        ELSE.
          IF lv_answer <> '1'.
            CLEAR: gv_turno, gv_rango_horas.
          ELSE.
*            PERFORM obtener_prod_turnos.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDMODULE.                 " CAMBIO_TURNO  INPUT


MODULE cambio_operario INPUT.
  IF gv_nombre_oper IS INITIAL.
    MESSAGE e328(zpp). "Obligatorio informar operario.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  CASE gv_okcode.
    WHEN 'BACK'.
      CLEAR: gv_okcode.
      LEAVE PROGRAM.

    WHEN 'ALTA'.
      IF gv_nombre_oper IS INITIAL.
*        MESSAGE e328(zpp). "Obligatorio informar operario.
        MESSAGE i328(zpp). "Obligatorio informar operario.
        RETURN.
      ENDIF.

      CLEAR: gv_okcode.
      LEAVE TO SCREEN 0300.

    WHEN 'NOTI'.
      CLEAR: gv_okcode.
*      LEAVE TO SCREEN 0200.

      PERFORM call_zpp0004.

  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE  user_command_0200 INPUT.
*
*  CASE gv_okcode.
*    WHEN 'EXIT' OR 'BACK'.
*      CLEAR: gv_okcode.
*      SET SCREEN 0.
*      LEAVE SCREEN.
*  ENDCASE.
*
*ENDMODULE.                 " USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.

  DATA: lv_error       TYPE xfeld,
        lv_boton       TYPE c,
        lt_lines_blank TYPE STANDARD TABLE OF tdline.

  CASE gv_okcode.
    WHEN 'EXIT'.
      CLEAR: gv_okcode.
      SET SCREEN 0.
      LEAVE SCREEN.

    WHEN 'BACK'.
      IF gv_cb IS NOT INITIAL.
        g_alv_tree->free( ).
        g_custom_container->free( ).
      ENDIF.

      CLEAR: gv_okcode, gv_cb, gv_lote, gv_aunfr, gv_aunfr_mostrar, gv_matnr,
        gv_matnr_mostrar,gv_maktx, gv_kg_producir,
        gv_kg_consum, gv_diferencia, gt_cuerpo, gt_header,
        gv_orden_300, gv_matnr_300, gv_maktx_300, gv_pedpos_300,
        gv_ped_300, gv_pos_300, gv_kunnr_300, gv_cli_name_300,
        gv_kg, gv_diam, gv_long, gv_empa, gv_lgort_300, gv_repr,
        g_ancho_bbdd , g_ancho_caract , g_matnr_cambio_ancho. " variables de gestión del Cambio de ancho.

      CLEAR: gv_kg_producir_c, gv_kg_consum_c, gv_diferencia_c,
             gv_diferencia_sem, gv_tornadas_c.

      REFRESH: gt_header, gt_cuerpo.


      LEAVE TO SCREEN 0100.

    WHEN 'CAMB_LOTE'.
      IF gv_cb IS NOT INITIAL.
        g_alv_tree->free( ).
        g_custom_container->free( ).
      ENDIF.

      CLEAR: gv_okcode, gv_cb, gv_lote, gv_aunfr, gv_aunfr_mostrar, gv_matnr,
             gv_matnr_mostrar,gv_maktx, gv_kg_producir,
             gv_kg_consum, gv_diferencia, gt_cuerpo, gt_header,
             gv_orden_300, gv_matnr_300, gv_maktx_300, gv_pedpos_300,
             gv_ped_300, gv_pos_300, gv_kunnr_300, gv_cli_name_300,
             gv_kg, gv_diam, gv_long, gv_empa, gv_lgort_300, gv_repr,
             g_ancho_bbdd , g_ancho_caract , g_matnr_cambio_ancho. " variables de gestión del Cambio de ancho.

      CLEAR: gv_kg_producir_c, gv_kg_consum_c, gv_diferencia_c,
             gv_diferencia_sem, gv_tornadas_c.

      REFRESH: gt_header, gt_cuerpo.


    WHEN 'ETIQUETA'.
      CLEAR: gv_okcode.

      IF zclpp_trazabilidad_usuario=>validar_turno_actual( i_turno = gv_turno ) = 'E'.
        CLEAR: gv_nombre_oper , gv_cb.

        TRY.
            g_alv_tree->free( ).
            g_custom_container->free( ).

          CATCH cx_root .
        ENDTRY.

        LEAVE TO SCREEN 0100.
      ENDIF.


      IF g_dec_empleo_p = 'X' AND
        zcl_utils_hpap_pp=>es_cabo( i_matnr = gv_matnr_300
                                    i_kunnr = gv_kunnr_300 ) = ' '.
        PERFORM mostrar_aviso_solo_pulper.
        EXIT.
      ENDIF.


      lv_boton = 1.
      IF gv_kg IS INITIAL OR gv_diam IS INITIAL OR gv_long IS INITIAL.
        lv_error = 'X'.
        MESSAGE i000(zpp) WITH text-015.
        EXIT.
      ENDIF.

      PERFORM validar_datos USING gv_matnr_300
                                  gv_arbpl
                                  gv_werks
                                  gv_kg
                                  gv_diam
                                  gv_long
                                  lv_boton
                            CHANGING lv_error.

      IF lv_error IS INITIAL.
* Chequeo de bloqueo del lote rollo - CMS - 05-05-2020
        DATA: l_sy_sub TYPE syst_subrc.
        DATA: l_usr TYPE char12.
        PERFORM check_bloqueos_rollo  CHANGING l_sy_sub
                                                 l_usr.
        CHECK l_sy_sub = 0.

        PERFORM etiqueta.

*        CALL FUNCTION 'DEQUEUE_ALL'.

      ELSE.
        PERFORM clean_vbles.
      ENDIF.

    WHEN 'PULPER'.
      CLEAR: gv_okcode.

      IF zclpp_trazabilidad_usuario=>validar_turno_actual( i_turno = gv_turno ) = 'E'.
        CLEAR: gv_nombre_oper , gv_cb.
        TRY.
            g_alv_tree->free( ).
            g_custom_container->free( ).

          CATCH cx_root .
        ENDTRY.
        LEAVE TO SCREEN 0100.
      ENDIF.

      lv_boton = 2.

* Validamos que se hayan informado los datos correctamente. CMS 29/01/2020
      IF gv_kg IS INITIAL OR gv_diam IS INITIAL OR gv_long IS INITIAL.
        lv_error = 'X'.
        MESSAGE i000(zpp) WITH text-015.
        EXIT.
      ENDIF.

* Validamos que no sea un cabo. No se permite crear cabos pulper.
      TRY.
          DATA(ls_header) = gt_header[ "aufnr  = gv_orden_300
                                       aufnr  = |{ gv_orden_300 ALPHA = IN }|
                                       plnbez = |{ gv_matnr_300 ALPHA = IN }| ].
*                                   plnbez = gv_matnr_300 ].
          IF zcl_utils_hpap_pp=>es_cabo( i_matnr = gv_matnr_300
                                         i_kunnr = ls_header-zkunnr1 ) = 'X'..
            lv_error = 'X'.
            MESSAGE i350(zpp). " No se permite bobinar cabos como pulper.
            EXIT.
          ENDIF.

        CATCH cx_root .
      ENDTRY.

      CLEAR: lv_error , gv_pulper.
      WHILE gv_pulper IS INITIAL AND lv_error IS INITIAL.
        PERFORM seleccionar_motivo_pulper CHANGING gv_pulper
                                                   lv_error.
      ENDWHILE.
      IF lv_error IS INITIAL.
        IF sy-tcode EQ 'ZPP0034' AND gv_werks EQ '3020'.
          DATA(l_matnr_alpha_in) = |{ gv_matnr_300 ALPHA = IN }|.
          SELECT SINGLE zzancho INTO gv_ancho_real FROM mara WHERE matnr = l_matnr_alpha_in.
          IF sy-subrc EQ 0.
            DATA(l_ancho_orig) = gv_ancho_real.
            PERFORM seleccionar_ancho_real CHANGING gv_ancho_real lv_error.
            IF lv_error = abap_true.
              CLEAR: gv_pulper , gv_kg , gv_diam , gv_long , gv_empa.
              EXIT.
            ENDIF.
            IF l_ancho_orig EQ gv_ancho_real .
              PERFORM validar_datos USING gv_matnr_300
                                          gv_arbpl
                                          gv_werks
                                          gv_kg
                                          gv_diam
                                          gv_long
                                          lv_boton
                                    CHANGING lv_error.
            ENDIF.
          ENDIF.
        ENDIF.

        IF lv_error IS INITIAL.

* Chequeo de bloqueo del lote rollo - CMS - 05-05-2020
          PERFORM check_bloqueos_rollo  CHANGING l_sy_sub
                                                 l_usr.
          CHECK l_sy_sub = 0.

          PERFORM pulper CHANGING gv_pulper.

*          CALL FUNCTION 'DEQUEUE_ALL'.


        ELSE.
          PERFORM clean_vbles.
        ENDIF.
      ELSE.
        PERFORM clean_vbles.
      ENDIF.

    WHEN 'REPROCESO'.
      CLEAR: gv_okcode.

      IF zclpp_trazabilidad_usuario=>validar_turno_actual( i_turno = gv_turno ) = 'E'.
        CLEAR: gv_nombre_oper , gv_cb.
        PERFORM clean_vbles.
        TRY.
            g_alv_tree->free( ).
            g_custom_container->free( ).

          CATCH cx_root .
        ENDTRY.

        LEAVE TO SCREEN 0100.
      ENDIF.

      IF g_dec_empleo_p = 'X' AND
        zcl_utils_hpap_pp=>es_cabo( i_matnr = gv_matnr_300
                                    i_kunnr = gv_kunnr_300 ) = ' '.
        PERFORM mostrar_aviso_solo_pulper. " USING 'Imposible reprocesar.'.
        EXIT.
      ENDIF.

      lv_boton = '3'.
* Validamos que se hayan informado los datos correctamente.
      IF gv_kg IS INITIAL OR gv_diam IS INITIAL OR gv_long IS INITIAL.
        lv_error = 'X'.
        MESSAGE i000(zpp) WITH text-015.
        EXIT.
      ENDIF.

      PERFORM validar_datos USING gv_matnr_300
                                  gv_arbpl
                                  gv_werks
                                  gv_kg
                                  gv_diam
                                  gv_long
                                  lv_boton
                            CHANGING lv_error.

      CLEAR: gv_repr.
      IF lv_error IS INITIAL.
        WHILE gv_repr IS INITIAL AND lv_error IS INITIAL.
          PERFORM seleccionar_motivo_reproceso CHANGING gv_repr
                                                        lv_error.
        ENDWHILE.

        IF lv_error IS INITIAL.

          PERFORM check_bloqueos_rollo  CHANGING l_sy_sub
                                                   l_usr.
          CHECK l_sy_sub = 0.
*          IF l_sy_sub <> 0.
*            MESSAGE e353(zpp) DISPLAY LIKE 'I' WITH gv_lote l_usr. "Atención! Lote & bloqueado. Notificar más tarde.
*            EXIT.
*          ENDIF.

          PERFORM reproceso CHANGING gv_repr.

        ELSE.
          PERFORM clean_vbles.
        ENDIF.
      ELSE.
        PERFORM clean_vbles.
      ENDIF.

    WHEN 'CANCELAR'.
      CLEAR: gv_okcode.
      PERFORM clean_vbles.

    WHEN 'DEF'.
      CLEAR: gs_dyn500 , gs_k_dyn500.
      gs_k_dyn500-aufnr = gv_aunfr.
      gs_k_dyn500-matnr = |{ gv_matnr_mostrar ALPHA = IN }|.
      gs_k_dyn500-charg = gv_lote .

      IF go_textedit IS BOUND.
        CLEAR lt_lines_blank[].
        CALL METHOD go_textedit->set_text_as_stream
          EXPORTING
            text = lt_lines_blank[].
*        CALL METHOD go_textedit_bob->set_text_as_stream
*          EXPORTING
*            text = lt_lines_blank[].

      ENDIF.



      CALL SCREEN 500.

    WHEN 'BASCULA'.
      CLEAR: gv_okcode.
      PERFORM obtener_datos_bascula.
    WHEN 'PLAN'.
      CLEAR: gv_okcode.
      PERFORM mostrar_planificacion.
    WHEN 'BTN_TP_EXTR'.
      PERFORM tratar_boton_tp_extraccion.
    WHEN 'BTN_ETIQ'.
      PERFORM  tratar_boton_etiqueta.
    WHEN 'BTN_ANCHO'.
      PERFORM  tratar_boton_ancho.
    WHEN 'BTN_PESO'.
      PERFORM  tratar_boton_bascula.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*&      Module  LEER_LOTE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE leer_lote INPUT.

  IF zclpp_trazabilidad_usuario=>validar_turno_actual( i_turno = gv_turno ) = 'E'.
    CLEAR:  gv_nombre_oper , gv_cb.
    LEAVE TO SCREEN 0100.
  ENDIF.

  PERFORM leer_lote.

  PERFORM mostrar_datos_0300.

ENDMODULE.                 " LEER_LOTE  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0201  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE user_command_0201 INPUT.
*
*  CASE gv_okcode.
*    WHEN 'EXIT' OR 'BACK'.
*      CLEAR: gv_okcode.
*      CALL SCREEN '100'.
*  ENDCASE.
*
*ENDMODULE.                 " USER_COMMAND_0201  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0301  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE user_command_0301 INPUT.
*
*  CASE gv_okcode.
*    WHEN 'EXIT'.
*      CLEAR: gv_okcode.
*      SET SCREEN 0.
*      LEAVE SCREEN.
*
*    WHEN 'BACK'.
*      CLEAR: gv_okcode.
*      LEAVE TO SCREEN 0100.
*
*    WHEN 'CAMB_LOTE'.
*      CLEAR: gv_lote, gv_aunfr, gv_matnr, gv_maktx, gv_kg_producir,
*             gv_kg_consum, gv_diferencia, gt_cuerpo, gt_header.
*      REFRESH: gt_cuerpo, gt_header.
*
*      CALL METHOD gr_grid_301->refresh_table_display.
*
*  ENDCASE.
*
*ENDMODULE.                 " USER_COMMAND_0301  INPUT
*&---------------------------------------------------------------------*
*&      Module  LEER_LOTE_301  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE leer_lote_301 INPUT.
*
*  DATA: lv_charg_301 TYPE         charg_d,
*        wa_mch1_301  TYPE         mch1,
*        t_aufm_301   TYPE         tty_aufm,
*        wa_aufm_301  TYPE LINE OF tty_aufm.
*
*  DATA: t_ordenes_bobina_301  TYPE         tty_bobina,
*        wa_ordenes_bobina_301 TYPE LINE OF tty_bobina.
*
*
*  DATA: lv_object_301            TYPE         objnum,
*        lt_alloc_values_num_301  TYPE         tt_bapi1003_alloc_values_num,
*        wa_num_301               TYPE LINE OF tt_bapi1003_alloc_values_num,
*        lt_alloc_values_char_301 TYPE         tt_bapi1003_alloc_values_char,
*        lt_alloc_values_curr_301 TYPE         tt_bapi1003_alloc_values_curr,
*        lt_return_301            TYPE         bapiret2_tab.
*
**************************************************************************
***                    datos cabecera de la dynpro                  ******
**************************************************************************
*  CLEAR: gv_aunfr, gv_matnr, gv_maktx, gv_kg_producir, gv_kg_consum,
*         gv_diferencia.
*
** verificamos que el lote existe
*  SELECT SINGLE * FROM mch1
*    INTO wa_mch1_301
*    WHERE charg = gv_lote.
*
*  IF sy-subrc <> 0.
*    lv_charg_301 = gv_lote.
*    CLEAR: gv_lote.
*    MESSAGE e007(zpp) WITH lv_charg_301.
*  ELSE.
**   Cuando se lea un lote de rollo, se informarán los campos
**   correspondientes a OF de rollo, material y descripción del rollo y
**   kg fabricados, y el campo Lote rollo quedará no editable.
*    CLEAR: t_aufm_301. REFRESH: t_aufm_301.
*    SELECT aufnr matnr charg menge bwart FROM aufm
*      INTO TABLE t_aufm_301
*      WHERE werks = gv_werks AND
*            charg = gv_lote.
*
*    READ TABLE t_aufm_301 INTO wa_aufm_301 WITH KEY bwart = '101'.
*    IF sy-subrc = 0.
*      gv_aunfr = wa_aufm_301-aufnr.
*
*      SELECT SINGLE plnbez INTO gv_matnr
*        FROM afko
*        WHERE aufnr = gv_aunfr.
*
*      IF gv_matnr IS NOT INITIAL.
*        SELECT SINGLE maktx FROM makt
*          INTO gv_maktx
*          WHERE matnr = gv_matnr AND
*                spras = sy-langu.
*      ENDIF.
*    ENDIF.
*
*    LOOP AT t_aufm_301 INTO wa_aufm_301.
*      CASE wa_aufm_301-bwart.
*        WHEN '101'.
*          gv_kg_producir = gv_kg_producir + wa_aufm_301-menge.
*
*        WHEN '261'.
*          gv_kg_consum = gv_kg_consum + wa_aufm_301-menge.
*
*        WHEN '262'.
*          gv_kg_consum = gv_kg_consum - wa_aufm_301-menge.
*      ENDCASE.
*    ENDLOOP.
*
*    gv_diferencia  = gv_kg_producir - gv_kg_consum.
*
**************************************************************************
***                    datos cuerpo de la dynpro                    ******
**************************************************************************
**   buscamos las órdenes de bobina donde se encuentra la orden de rollo
*    CLEAR: t_ordenes_bobina_301, gt_cuerpo_301.
*    REFRESH: t_ordenes_bobina_301, gt_cuerpo_301.
*
*    IF gv_aunfr IS NOT INITIAL.
*
*      SELECT aufnr zzebeln1 zzebelp1 zzkunnr1 FROM aufk
*        INTO TABLE t_ordenes_bobina_301
*        WHERE zzaufnr_rollo = gv_aunfr AND
*              auart = 'ZI02'.
*
*      LOOP AT t_ordenes_bobina_301 INTO wa_ordenes_bobina_301.
*
*        CLEAR: wa_cuerpo.
*        wa_cuerpo_301-aufnr = wa_ordenes_bobina_301-aufnr.
*        wa_cuerpo_301-zebeln1 = wa_ordenes_bobina_301-zebeln1.
*        wa_cuerpo_301-zebelp1 = wa_ordenes_bobina_301-zebelp1.
*        wa_cuerpo_301-zkunnr1 = wa_ordenes_bobina_301-zkunnr1.
*
*
*        SELECT SINGLE plnbez INTO wa_cuerpo_301-plnbez
*          FROM afko
*          WHERE aufnr = wa_ordenes_bobina_301-aufnr.
*
*        CLEAR: t_aufm_301. REFRESH: t_aufm_301.
*
*        SELECT aufnr matnr charg menge bwart FROM aufm
*          INTO TABLE t_aufm_301
*          WHERE werks = gv_werks AND
*                aufnr = wa_ordenes_bobina_301-aufnr AND
*                ( bwart = '101' OR bwart = '531' ).
*
*        SORT  t_aufm_301 BY aufnr matnr charg ASCENDING.
*
*        LOOP AT t_aufm_301 INTO wa_aufm_301.
*          wa_cuerpo_301-charg = wa_aufm_301-charg.
*          wa_cuerpo_301-menge = wa_aufm_301-menge.
*
*          CLEAR: lv_object_301, lt_alloc_values_num_301, lt_alloc_values_char_301,
*                 lt_alloc_values_curr_301, lt_return_301.
*          REFRESH: lt_alloc_values_num_301, lt_alloc_values_char_301,
*                   lt_alloc_values_curr_301, lt_return_301.
*
*          CONCATENATE wa_aufm_301-matnr wa_aufm_301-charg INTO lv_object_301.
*
*          IF wa_aufm_301-bwart = '101'.
*            CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
*              EXPORTING
*                objectkey       = lv_object_301
*                objecttable     = 'MCH1'
*                classnum        = 'Z_BOBINA'
*                classtype       = '023'
**               STATUS          = '1'
**               STANDARDCLASS   =
**               CHANGENUMBER    =
**               KEYDATE         = SY-DATUM
**               NO_DEFAULT_VALUES  = ' '
**           IMPORTING
**               CLASSIF_STATUS  =
*              TABLES
*                allocvaluesnum  = lt_alloc_values_num_301
*                allocvalueschar = lt_alloc_values_char_301
*                allocvaluescurr = lt_alloc_values_curr_301
*                return          = lt_return_301.
*
*
*            wa_cuerpo_301-tipo = 'R'.
**            wa_cuerpo_301-tipo_sem = icon_led_yellow.
*
*            READ TABLE lt_alloc_values_num_301 INTO wa_num_301 WITH KEY charact = 'Z_DIAMETRO'.
*            IF sy-subrc = 0.
*              wa_cuerpo_301-diametro = wa_num_301-value_from. "Z_LONGITUD_B
*            ENDIF.
*
*            READ TABLE lt_alloc_values_num_301 INTO wa_num_301 WITH KEY charact = 'Z_EMPALMES'.
*            IF sy-subrc = 0.
*              wa_cuerpo_301-empalmes = wa_num_301-value_from. "Z_EMPALMES
*            ENDIF.
*
*            READ TABLE lt_alloc_values_num_301 INTO wa_num_301 WITH KEY charact = 'Z_LONGITUD_B'.
*            IF sy-subrc = 0.
*              wa_cuerpo_301-metros = wa_num_301-value_from. "Z_LONGITUD_B
*            ENDIF.
*
*          ELSEIF wa_aufm_301-bwart = '531'.
*
*            CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
*              EXPORTING
*                objectkey       = lv_object_301
*                objecttable     = 'MCH1'
*                classnum        = 'Z_BOBINA_PULPER'
*                classtype       = '023'
**               STATUS          = '1'
**               STANDARDCLASS   =
**               CHANGENUMBER    =
**               KEYDATE         = SY-DATUM
**               NO_DEFAULT_VALUES  = ' '
**   IMPORTING
**               CLASSIF_STATUS  =
*              TABLES
*                allocvaluesnum  = lt_alloc_values_num_301
*                allocvalueschar = lt_alloc_values_char_301
*                allocvaluescurr = lt_alloc_values_curr_301
*                return          = lt_return_301.
*
*
*            wa_cuerpo_301-tipo = 'P'.
**            wa_cuerpo_301-tipo_sem = icon_cancel.
*
*            READ TABLE lt_alloc_values_num_301 INTO wa_num_301 WITH KEY charact = 'Z_EMPALMES'.
*            IF sy-subrc = 0.
*              wa_cuerpo_301-empalmes = wa_num_301-value_from. "Z_EMPALMES
*            ENDIF.
*
*
*            READ TABLE lt_alloc_values_num_301 INTO wa_num_301 WITH KEY charact = 'Z_LONGITUD_B'.
*            IF sy-subrc = 0.
*              wa_cuerpo_301-metros = wa_num_301-value_from. "Z_LONGITUD_B
*            ENDIF.
*          ENDIF.
*
*          APPEND wa_cuerpo_301 TO gt_cuerpo_301.
*        ENDLOOP.
*      ENDLOOP.
*    ENDIF.
*
**    IF gt_cuerpo_301 IS NOT INITIAL.
*    PERFORM mostrar_datos_301.
**    ENDIF.
*  ENDIF.
*
*ENDMODULE.                 " LEER_LOTE_301  INPUT
*&---------------------------------------------------------------------*
*&      Module  CAMBIO_FECHA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE cambio_fecha INPUT.

* INI UDEFINEDES 23.10.2017 Ticket 43615
*  DATA: lv_date TYPE sy-datum.
*
** obtenemos el mes anterior al sy-datum
*  CALL FUNCTION 'ADD_TIME_TO_DATE'
*    EXPORTING
*      i_idate = sy-datum
*      i_time  = -1
*      i_iprkz = '2'
**     I_RDMHD =
*    IMPORTING
*      o_idate = lv_date
** EXCEPTIONS
**     INVALID_PERIOD              = 1
**     INVALID_ROUND_UP_RULE       = 2
**     INTERNAL_ERROR              = 3
**     OTHERS  = 4
*    .
*  IF sy-subrc <> 0.
** Implement suitable error handling here
*  ELSE.
*    CONCATENATE lv_date(6) '01' INTO lv_date.
*  ENDIF.

* INI UDEFINEDES 23.10.2017 Ticket 43615
*  IF gv_fecha < lv_date OR gv_fecha > sy-datum.
*    CLEAR: gv_fecha.
*    MESSAGE e127(zpp).
*  ENDIF.
*  IF gv_fecha <> sy-datum.
*    CLEAR: gv_fecha.
*    MESSAGE e127(zpp).
*  ENDIF.
* FIN Ticket 43615
*ENDMODULE.                 " CAMBIO_FECHA  INPUT
*&---------------------------------------------------------------------*
*&      Module  VERIFICAR_PUESTRO_TRABAJO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE verificar_puestro_trabajo INPUT.
  DATA: lv_arbpl TYPE arbpl.

  SELECT SINGLE arbpl FROM crhd
    INTO lv_arbpl
    WHERE werks = gv_werks AND
          arbpl = gv_arbpl.
  IF sy-subrc <> 0.
    lv_arbpl = gv_arbpl.
    CLEAR: gv_arbpl.
    MESSAGE e128(zpp) WITH lv_arbpl gv_werks.
  ENDIF.


ENDMODULE.                 " VERIFICAR_PUESTRO_TRABAJO  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9001  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_9001 INPUT.

  IF sy-ucomm EQ 'CANC'.
    lv_error = abap_true.
  ELSE.
* 01/03/2021 - CMS - 64594 - Eliminar validación ancho máximo 2500.
**NLC.24.07.2024.Modificar ancho permitido a 2500.Ticket:84426
*   IF gv_werks = '3020' AND gv_ancho_real > 2800. " Ticket:71673 - Modificar Ancho máximo permitido a 2800.
*     MESSAGE i325(zpp). " Para bobinas pulper el ancho máximo permitido son 2500mm. Actualizado a 2800 el 22.02.2023
    IF gv_werks = '3020' AND gv_ancho_real > 2500. " Ticket:84426 - Modificar Ancho máximo permitido de nuevo a 2500.
      MESSAGE i325(zpp). " Para bobinas pulper el ancho máximo permitido son 2500mm. Actualizado a 2800 el 22.02.2023. Actualizado de nuevo a 2500 Ticket:84426.
      RETURN.
    ENDIF.
    lv_error = abap_false.
  ENDIF.

  SET SCREEN 0.

ENDMODULE.

MODULE user_command_0500 INPUT.
  DATA: ls_ztpp031 TYPE ztpp0031,
        lt_tdline  TYPE STANDARD TABLE OF tdline,
        l_modified TYPE i,
        l_answer   TYPE c.

  CASE sy-ucomm.
    WHEN 'BACK'.

*      CALL METHOD go_textedit_bob->get_text_as_r3table
*        EXPORTING
*          only_when_modified     = 1
*        IMPORTING
*          table                  = lt_tdline
*          is_modified            = l_modified
*        EXCEPTIONS
*          error_dp               = 1
*          error_cntl_call_method = 2
*          error_dp_create        = 3
*          potential_data_loss    = 4
*          OTHERS                 = 5.

      IF l_modified = '1'.
        PERFORM popup_def CHANGING l_answer.
        CASE l_answer.
          WHEN '1'. "Si, salir
            SET SCREEN 0.
          WHEN '2'. "Grabar
            PERFORM save_def.
            SET SCREEN 0.

          WHEN OTHERS.
        ENDCASE.  .
      ELSE. "Observaciones NO modificadas
        SET SCREEN 0.
      ENDIF.


    WHEN 'SAVE'.
      PERFORM save_def.
      SET SCREEN 0.
    WHEN OTHERS.
  ENDCASE.


ENDMODULE.

MODULE user_command_0601 INPUT.

  DATA ls_ztpp0076  TYPE ztpp0076.
  DATA ls_tdline    TYPE tdline.
  DATA lt_lines_1 TYPE STANDARD TABLE OF ztpp0076-zobs_bobina.

  DATA: lv_objectkey         TYPE bapi1003_key-object,
        lt_valuesnum         TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar        TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valueschar2       TYPE TABLE OF bapi1003_alloc_values_char,
        ls_valuechar         LIKE LINE OF lt_valueschar,
        lt_valuescurr        TYPE TABLE OF bapi1003_alloc_values_curr,
        lt_return            TYPE TABLE OF bapiret2,
        gc_023               TYPE bapi1003_key-classtype VALUE '023',
        gc_mch1              TYPE bapi1003_key-objecttable VALUE 'MCH1',
        gc_z_bobina          TYPE klasse_d VALUE 'Z_BOBINA',
        lv_motivo_repr_carac TYPE atwrt.

  CALL METHOD go_textedit_601->get_text_as_r3table
    IMPORTING
      table           = lt_lines_1
    EXCEPTIONS
      error_dp        = 1
      error_dp_create = 2
      OTHERS          = 3.

  CONCATENATE LINES OF lt_lines_1 INTO gs_dyn601-container_obs_601 SEPARATED BY ' '.

  CASE sy-ucomm.
    WHEN 'CANCELAR'.
      gv_cancelar = 'X'.
      CLEAR gs_dyn601.

      SET SCREEN 0.

    WHEN 'GUARDAR'.

      CALL METHOD cl_gui_cfw=>flush.

      ls_ztpp0076-aufnr = gv_aufnr_bob.
      ls_ztpp0076-charg = gv_lote_bob.
      ls_ztpp0076-matnr = gv_matnr_bob.
      ls_ztpp0076-werks = gv_werks.
      ls_ztpp0076-znombre_oper = gv_nombre_oper.
      ls_ztpp0076-usuario = sy-uname.
      ls_ztpp0076-zdist_s = gs_dyn601-distancia_s.
      ls_ztpp0076-zdist_e = gs_dyn601-distancia_e.
      ls_ztpp0076-zdist_d = gs_dyn601-distancia_d.

      CALL METHOD go_textedit_601->get_text_as_r3table
        IMPORTING
          table           = lt_lines_1
        EXCEPTIONS
          error_dp        = 1
          error_dp_create = 2
          OTHERS          = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      CONCATENATE LINES OF lt_lines_1 INTO ls_ztpp0076-zobs_bobina SEPARATED BY ' '.

      "Cuando venimos de alta de bobina
      IF gv_modification = ' '.
        ls_ztpp0076-motivo_rep = gv_atzhl.
        ls_ztpp0076-zfecha_crea = sy-datum.
        ls_ztpp0076-zhora_crea = sy-uzeit.
      ENDIF.
      "Cuando venimos de modificación
      IF gv_modification = 'X'.
        ls_ztpp0076-motivo_rep   = gs_dyn601-defecto_mod.
        ls_ztpp0076-zfecha_modif = sy-datum.
        ls_ztpp0076-zhora_modif  = sy-uzeit.
        ls_ztpp0076-zfecha_crea  = gs_ztpp0076-zfecha_crea.
        ls_ztpp0076-zhora_crea   = gs_ztpp0076-zhora_crea.
      ENDIF.

      IF gs_dyn601-todo_ancho = 'X'.
        ls_ztpp0076-zpos_a = 'X'.
      ELSE.
        ls_ztpp0076-zpos_a = ' '.
      ENDIF.

      IF gs_dyn601-sin_etiqueta = 'X'.
        ls_ztpp0076-zpos_s = 'X'.
      ELSE.
        ls_ztpp0076-zpos_s = ' '.
      ENDIF.

      IF gs_dyn601-centro = 'X'.
        ls_ztpp0076-zpos_c = 'X'.
      ELSE.
        ls_ztpp0076-zpos_c = ' '.
      ENDIF.

      IF gs_dyn601-lado_etiqueta = 'X'.
        ls_ztpp0076-zpos_e = 'X'.
      ELSE.
        ls_ztpp0076-zpos_e = ' '.
      ENDIF.

      IF gs_dyn601-diametro = 'X'.
        ls_ztpp0076-zpos_d = 'X'.
      ELSE.
        ls_ztpp0076-zpos_d = ' '.
      ENDIF.

      IF gs_dyn601-todo_ancho = ' ' AND gs_dyn601-sin_etiqueta = ' ' AND gs_dyn601-centro = ' ' AND gs_dyn601-lado_etiqueta = ' ' AND gs_dyn601-diametro = ' '.

        MESSAGE 'Introducir una posición de defecto' TYPE 'I'.

      ELSEIF ( gs_dyn601-sin_etiqueta = 'X' AND gs_dyn601-distancia_s IS INITIAL )
          OR ( gs_dyn601-lado_etiqueta = 'X' AND gs_dyn601-distancia_e IS INITIAL )
          OR ( gs_dyn601-diametro = 'X' AND gs_dyn601-distancia_d IS INITIAL ).

        MESSAGE 'Introducir distancia del defecto' TYPE 'I'.

      ELSEIF ( gs_dyn601-sin_etiqueta = 'X' AND gs_dyn601-distancia_s > '999' )
          OR ( gs_dyn601-lado_etiqueta = 'X' AND gs_dyn601-distancia_e > '999' ).

        MESSAGE 'No se permite una distancia superior a 999 cm' TYPE 'I'.

      ELSEIF ( gs_dyn601-diametro = 'X' AND gs_dyn601-distancia_d > '1500' ).

        MESSAGE 'No se permite una distancia superior a 1500 mm' TYPE 'I'.

      ELSEIF gv_modification = 'X' AND gs_dyn601-defecto_mod IS INITIAL.

        MESSAGE 'Introducir motivo reproceso' TYPE 'I'.

      ELSE.

        IF gv_modification = 'X'.

          CONCATENATE gv_matnr_bob gv_lote_bob INTO lv_objectkey.

          CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
            EXPORTING
              objectkey       = lv_objectkey
              objecttable     = gc_mch1
              classnum        = gc_z_bobina
              classtype       = gc_023
            TABLES
              allocvaluesnum  = lt_valuesnum
              allocvalueschar = lt_valueschar
              allocvaluescurr = lt_valuescurr
              return          = lt_return.

          SELECT atwrt
            FROM zvpp_carac_repr
            INTO lv_motivo_repr_carac
            WHERE atzhl = ls_ztpp0076-motivo_rep.
          ENDSELECT.

          LOOP AT lt_valueschar INTO ls_valuechar.
            IF ls_valuechar-charact = 'ZPPI_MOTIVO_REPROCESO_BOBINA'.
              ls_valuechar-value_char    = lv_motivo_repr_carac.
              ls_valuechar-value_neutral = lv_motivo_repr_carac.
            ENDIF.
            APPEND ls_valuechar TO lt_valueschar2.
          ENDLOOP.

          CALL FUNCTION 'BAPI_OBJCL_CHANGE'
            EXPORTING
              objectkey          = lv_objectkey
              objecttable        = gc_mch1
              classnum           = gc_z_bobina
              classtype          = gc_023
            TABLES
              allocvaluesnumnew  = lt_valuesnum
              allocvaluescharnew = lt_valueschar2
              allocvaluescurrnew = lt_valuescurr
              return             = lt_return.

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = abap_true.

        ENDIF.

        MODIFY ztpp0076 FROM ls_ztpp0076.

        CLEAR gs_dyn601.
        CLEAR ls_ztpp0076.
        CLEAR gs_ztpp0076.

        SET SCREEN 0.

      ENDIF.

  ENDCASE.

  "Limpiamos variable y llamamos al destructor del control
  go_textedit_601->free( ).
  FREE go_textedit_601.

ENDMODULE.

MODULE user_command_0602 INPUT.

  DATA: lt_lines_2 TYPE STANDARD TABLE OF ztpp0076-zobs_bobina.


  CALL METHOD go_textedit_602->get_text_as_r3table
    IMPORTING
      table           = lt_lines_2
    EXCEPTIONS
      error_dp        = 1
      error_dp_create = 2
      OTHERS          = 3.

*  READ TABLE lt_lines_2 INTO DATA(ls_lines_2) INDEX 1.
*  IF sy-subrc EQ 0.
*    gs_dyn602-container_obs_602 = ls_lines_2.
*  ENDIF.

  CONCATENATE LINES OF lt_lines_2 INTO gs_dyn602-container_obs_602 SEPARATED BY ' '.

  CASE sy-ucomm.
    WHEN 'CANCELAR'.
      gv_cancelar = 'X'.
      SET SCREEN 0.

    WHEN 'GUARDAR'.

      CALL METHOD cl_gui_cfw=>flush.

      ls_ztpp0076-aufnr        = gv_aufnr_bob.
      ls_ztpp0076-charg        = gv_lote_bob.
      ls_ztpp0076-matnr        = gv_matnr_bob.
      ls_ztpp0076-werks        = gv_werks.
      ls_ztpp0076-znombre_oper = gv_nombre_oper.
      ls_ztpp0076-usuario      = sy-uname.

      IF gv_tipo_bob = ' '.
        ls_ztpp0076-motivo_rep = 'NO REPROCESO'.
      ELSEIF gv_tipo_bob = 'P'.
        ls_ztpp0076-motivo_rep = 'PULPER'.
        ls_ztpp0076-matnr      = '000000000002001764'.
      ENDIF.

      "Si hemos enocntrado el registro en la ZTPP0076
      IF gv_modification = 'X'.

        ls_ztpp0076-zfecha_modif = sy-datum.
        ls_ztpp0076-zhora_modif  = sy-uzeit.
        ls_ztpp0076-zfecha_crea  = gs_ztpp0076-zfecha_crea.
        ls_ztpp0076-zhora_crea   = gs_ztpp0076-zhora_crea.

        "Si no hemos encontrado registro en la ZTPP0076
      ELSE.
        ls_ztpp0076-zfecha_crea  = sy-datum.
        ls_ztpp0076-zhora_crea   = sy-uzeit.

      ENDIF.

      CALL METHOD go_textedit_602->get_text_as_r3table
        IMPORTING
          table           = lt_lines_2
        EXCEPTIONS
          error_dp        = 1
          error_dp_create = 2
          OTHERS          = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      CONCATENATE LINES OF lt_lines_2 INTO ls_ztpp0076-zobs_bobina SEPARATED BY ' '.

      MODIFY ztpp0076 FROM ls_ztpp0076.

      CLEAR ls_ztpp0076.
      CLEAR gs_ztpp0076.

      SET SCREEN 0.
  ENDCASE.

  "Limpiamos variable y llamamos al destructor del control
  go_textedit_602->free( ).
  FREE go_textedit_602.

ENDMODULE.
