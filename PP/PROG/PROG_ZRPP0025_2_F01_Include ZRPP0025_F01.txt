*&---------------------------------------------------------------------*
*&  Include           ZRPP0025_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos .

  TYPES: BEGIN OF ty_dia,
           werks  TYPE werks_d,
           plnbez TYPE matnr,
           budat  TYPE datum,
           aufnr  TYPE aufnr,
         END OF ty_dia.

  DATA: t_aufm_completa  TYPE STANDARD TABLE OF aufm,
        wa_aufm_completa TYPE                   aufm,
        t_aufm           TYPE                   tty_aufm,
        wa_aufm          TYPE LINE OF           tty_aufm,
        t_aufm_prod      TYPE                   tty_aufm,
        wa_aufm_prod     TYPE LINE OF           tty_aufm,
        t_aufm_sres      TYPE                   tty_aufm.

  DATA: t_componentes  TYPE         tty_componentes,
        wa_componentes TYPE LINE OF tty_componentes.

  DATA: lt_mbew TYPE         tty_mbew,
        ls_mbew TYPE LINE OF tty_mbew.

  DATA: t_aufk  TYPE STANDARD TABLE OF aufk,
        wa_aufk TYPE                   aufk,
        t_afko  TYPE STANDARD TABLE OF afko,
        wa_afko TYPE                   afko,
        t_resb  TYPE STANDARD TABLE OF resb,
        wa_resb TYPE                   resb.


  DATA: t_datos   TYPE TABLE OF          zrspp0025_2_grid,
        wa_datos  TYPE                   zrspp0025_2_grid,
        wa_datos1 TYPE                   zrspp0025_2_grid,
        lt_dia    TYPE STANDARD TABLE OF ty_dia,
        ls_dia    TYPE                   ty_dia.

  DATA: t_orden  TYPE         tty_orden,
        wa_orden TYPE LINE OF tty_orden.


  DATA: lv_ind  TYPE sy-tabix,
        num_reg TYPE sy-tabix.

  FIELD-SYMBOLS: <wa_aufm_completa> TYPE         aufm,
                 <wa_aufm>          TYPE LINE OF tty_aufm,
                 <wa_datos>         TYPE         zrspp0025_2_grid,
                 <wa_resb>          TYPE         resb.



CLEAR: t_aufm_completa, t_orden, t_aufk, t_aufm, t_afko, t_resb, t_componentes, lt_mbew.
REFRESH: t_aufm_completa, t_orden, t_aufk, t_aufm, t_afko, t_resb, t_componentes, lt_mbew.

**********************************************************************
**********************************************************************
**********************************************************************
*** Inicio ASV - 12.04.16 - SAT 7000009532
***
* nos quedamos con aquellas órdenes que fabrican el material indicado
* en la pantalla de selección.
  SELECT aufk~aufnr afko~plnbez aufk~werks mara~matkl afko~gamng
    FROM aufk INNER JOIN afko ON aufk~aufnr  = afko~aufnr
         LEFT OUTER JOIN mara ON afko~plnbez = mara~matnr
    INTO TABLE t_orden
    WHERE plnbez IN so_mat AND
          werks = p_werks.   " AND
***          auart = 'ZI01'.
  DELETE t_orden WHERE NOT ( matkl IN so_matkl ) .

  IF p_aufnr IS NOT INITIAL.
    DELETE t_orden WHERE aufnr NE p_aufnr.
  ENDIF.

  CHECK  t_orden[] IS NOT INITIAL.

* recuperamos los movimientos 531 y 261
  SELECT * FROM aufm
    INTO TABLE t_aufm_completa
    FOR ALL ENTRIES IN t_orden
    WHERE mjahr IN so_mjahr AND
          budat IN so_budat AND
          aufnr = t_orden-aufnr AND
    ( bwart = '531' OR bwart = '532' OR bwart = '261' OR bwart = '262').
***
*** Fin ASV - 12.04.16 - SAT 7000009532
**********************************************************************
**********************************************************************
**********************************************************************

  LOOP AT t_aufm_completa ASSIGNING <wa_aufm_completa>.

IF <wa_aufm_completa>-bwart = '531' OR <wa_aufm_completa>-bwart = '262'.
      <wa_aufm_completa>-dmbtr = ( -1 ) * <wa_aufm_completa>-dmbtr.
<wa_aufm_completa>-erfmg = ( -1 ) * <wa_aufm_completa>-erfmg.          "+7000011103
    ENDIF.
    CLEAR: <wa_aufm_completa>-bwart.

    MOVE-CORRESPONDING <wa_aufm_completa> TO wa_aufm.
    APPEND wa_aufm TO t_aufm.
  ENDLOOP.

  SORT t_aufm BY aufnr werks matnr budat.

*--> INICIO SAT 7000010731
* recuperamos los movimientos 102 y 102 del producto acabado
  SELECT * FROM aufm
    INTO TABLE t_aufm_completa
    FOR ALL ENTRIES IN t_orden
    WHERE mjahr IN so_mjahr AND
          budat IN so_budat AND
          aufnr = t_orden-aufnr AND
        ( bwart = '101' OR bwart = '102').


  LOOP AT t_aufm_completa ASSIGNING <wa_aufm_completa>.

    IF <wa_aufm_completa>-bwart = '102'.
      <wa_aufm_completa>-dmbtr = ( -1 ) * <wa_aufm_completa>-dmbtr.
<wa_aufm_completa>-erfmg = ( -1 ) * <wa_aufm_completa>-erfmg.          "+7000011103
    ENDIF.
    CLEAR: <wa_aufm_completa>-bwart.

    MOVE-CORRESPONDING <wa_aufm_completa> TO wa_aufm_prod.
    COLLECT wa_aufm_prod INTO t_aufm_prod.
  ENDLOOP.

  SORT t_aufm_prod BY aufnr werks matnr budat.
*<-- FIN    SAT 7000010731

**********************************************************************
**********************************************************************
**********************************************************************
*** Inicio ASV - 12.04.16 - SAT 7000009532
***
* recuperamos la información de la reserva
  SELECT * FROM resb
    INTO TABLE t_resb
    FOR ALL ENTRIES IN t_orden
    WHERE aufnr = t_orden-aufnr
      AND dumps = ''.
  LOOP AT t_resb ASSIGNING <wa_resb>.
    IF <wa_resb>-shkzg = 'S'.
      <wa_resb>-erfmg = - <wa_resb>-erfmg.
      MODIFY t_resb FROM <wa_resb>.
    ENDIF.
  ENDLOOP.

***
*** Fin ASV - 12.04.16 - SAT 7000009532
**********************************************************************
**********************************************************************
**********************************************************************

* montamos la tabla interna con los componentes de las ordenes
  LOOP AT t_resb INTO wa_resb.
    wa_componentes-aufnr = wa_resb-aufnr.
    wa_componentes-matnr = wa_resb-matnr.
    wa_componentes-erfmg = wa_resb-erfmg.   "Cantidad reservada
    wa_componentes-erfme = wa_resb-erfme.   "Unidad cantidad reservada
    COLLECT wa_componentes INTO t_componentes.
  ENDLOOP.

  SORT t_componentes BY aufnr matnr.

* leemos precios componenets
  IF t_componentes[] IS NOT INITIAL.
    SELECT matnr vprsv verpr stprs peinh INTO TABLE lt_mbew
      FROM mbew
      FOR ALL ENTRIES IN t_componentes
      WHERE matnr = t_componentes-matnr
      AND   bwkey = p_werks.
  ENDIF.

  LOOP AT t_orden INTO wa_orden.
    wa_datos-plnbez = wa_orden-plnbez. "Material fabricado
    wa_datos-werks = wa_orden-werks.
    wa_datos-aufnr = wa_orden-aufnr.

* buscamos consumos de las componentes obtenidas de la RESB
 LOOP AT t_componentes INTO wa_componentes WHERE aufnr = wa_orden-aufnr.
      wa_datos-matnr          = wa_componentes-matnr.   "Componente
   wa_datos-cant_reservada = wa_componentes-erfmg.   "Cantidad reservada
wa_datos-um_reservada   = wa_componentes-erfme.   "Unidad cantidad reservada

      LOOP AT t_aufm INTO wa_aufm WHERE aufnr = wa_orden-aufnr AND
                                        matnr = wa_datos-matnr.
        AT NEW budat.
          CLEAR: wa_datos-dmbtr, wa_datos-cant_consumida.
wa_datos-budat = wa_aufm-budat.                    "Fecha contabilización
        ENDAT.

wa_datos-dmbtr          = wa_datos-dmbtr + wa_aufm-dmbtr.                    "Importe
wa_datos-cant_consumida = wa_datos-cant_consumida + wa_aufm-erfmg.           "Cantidad consumida
wa_datos-waers          = wa_aufm-waers.                                     "Moneda
wa_datos-um_consumida   = wa_aufm-erfme.                                     "Cantidad consumida

        AT END OF budat.
wa_datos-desviacion = wa_datos-cant_consumida - wa_datos-cant_reservada. "desviación
          APPEND wa_datos TO t_datos.
          MOVE-CORRESPONDING wa_datos TO ls_dia.
          COLLECT ls_dia INTO lt_dia.
        ENDAT.
      ENDLOOP.
    ENDLOOP.

*--> INICIO SAT 7000011103
* añadimos los consumos de componentes que no estaban en la RESB
    LOOP AT t_aufm INTO wa_aufm WHERE aufnr = wa_orden-aufnr.
      READ TABLE t_datos INTO wa_datos WITH KEY werks  = wa_orden-werks
                                                plnbez = wa_orden-plnbez
                                                matnr  = wa_aufm-matnr
                                                aufnr  = wa_aufm-aufnr
                                                budat  = wa_aufm-budat.
      IF sy-subrc NE 0.
        CLEAR wa_datos.
        wa_datos-plnbez = wa_orden-plnbez.
        wa_datos-werks  = wa_orden-werks.
        wa_datos-aufnr  = wa_orden-aufnr.
        wa_datos-matnr  = wa_aufm-matnr.                   "Componente
wa_datos-budat  = wa_aufm-budat.                   "Fecha contabilización
        CLEAR: wa_datos-cant_reservada, wa_datos-um_reservada.
        wa_datos-dmbtr = wa_aufm-dmbtr.                   "Importe
   wa_datos-cant_consumida = wa_aufm-erfmg.          "Cantidad consumida
        wa_datos-waers          = wa_aufm-waers.          "Moneda
   wa_datos-um_consumida   = wa_aufm-erfme.          "Cantidad consumida
wa_datos-desviacion = wa_datos-cant_consumida - wa_datos-cant_reservada. "desviación
        COLLECT wa_datos INTO t_datos.
        MOVE-CORRESPONDING wa_datos TO ls_dia.
        COLLECT ls_dia INTO lt_dia.
      ENDIF.
    ENDLOOP.
*<-- FIN    SAT 7000011103

  ENDLOOP.

*--> INICIO SAT 7000010731
* añadimos los componentes que no han tenido consumo ese dia
  LOOP AT lt_dia INTO ls_dia.
   LOOP AT t_componentes INTO wa_componentes WHERE aufnr = ls_dia-aufnr.
      READ TABLE t_datos INTO wa_datos WITH KEY werks  = ls_dia-werks
                                                plnbez = ls_dia-plnbez
                                           matnr  = wa_componentes-matnr
                                           budat  = ls_dia-budat.
      IF sy-subrc NE 0.
        CLEAR wa_datos.
        MOVE-CORRESPONDING ls_dia TO wa_datos.
        wa_datos-matnr          = wa_componentes-matnr.   "Componente
   wa_datos-cant_reservada = wa_componentes-erfmg.   "Cantidad reservada
wa_datos-um_reservada   = wa_componentes-erfme.   "Unidad cantidad reservada
wa_datos-desviacion     = wa_datos-cant_consumida - wa_datos-cant_reservada. "desviación
        APPEND wa_datos TO t_datos.
      ENDIF.
    ENDLOOP.
  ENDLOOP.
*
* cantidad reservada de componentes proporcional a la cantiad notificada de producto acabado
  LOOP AT t_datos INTO wa_datos.
    lv_ind = sy-tabix.

    CLEAR wa_orden.
    READ TABLE t_orden INTO wa_orden WITH KEY aufnr = wa_datos-aufnr.
    CLEAR wa_aufm_prod.
READ TABLE t_aufm_prod INTO wa_aufm_prod WITH KEY aufnr = wa_datos-aufnr
                                                 matnr = wa_datos-plnbez
                                                 budat = wa_datos-budat.
    IF wa_orden-gamng NE 0.
wa_datos-cant_reservada = ( wa_aufm_prod-erfmg * wa_datos-cant_reservada ) / wa_orden-gamng.
wa_datos-desviacion     = wa_datos-cant_consumida - wa_datos-cant_reservada.
    ENDIF.

    CLEAR ls_mbew.
    READ TABLE lt_mbew INTO ls_mbew WITH KEY matnr = wa_datos-matnr.
    IF ls_mbew-peinh NE 0.
      IF ls_mbew-vprsv = 'V'.
wa_datos-dmbtr = ( wa_datos-desviacion * ls_mbew-verpr ) / ls_mbew-peinh.
      ELSEIF ls_mbew-vprsv = 'S'.
wa_datos-dmbtr = ( wa_datos-desviacion * ls_mbew-stprs ) / ls_mbew-peinh.
      ENDIF.
    ENDIF.

    MODIFY t_datos FROM wa_datos INDEX lv_ind.
  ENDLOOP.
*<-- FIN    SAT 7000010731

  SORT t_datos BY werks
                  plnbez
                  matnr
                  budat.


  LOOP AT t_datos INTO wa_datos.
    COLLECT wa_datos INTO gti_datos.
  ENDLOOP.


ENDFORM.                    " OBTENER_DATOS
*&---------------------------------------------------------------------*
*&      Form  ALV_MOSTRAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_mostrar .

  DATA: lti_fieldcat TYPE lvc_t_fcat,
        lti_excl     TYPE ui_functions.

  DATA: ls_layout  TYPE lvc_s_layo,
        ls_variant TYPE disvariant.

  DATA: lv_repid TYPE syrepid.

* Variante
  lv_repid          = sy-repid.
  ls_variant-report = lv_repid.

* Preparamos el catálogo de campos
  PERFORM prepare_fielcat USING    'ZRSPP0025_2_GRID'
                          CHANGING lti_fieldcat.

* Layout
  ls_layout-cwidth_opt = 'X'.
  ls_layout-sel_mode = 'A'.

* Mostramos el ALV
  CALL METHOD gcl_grid->set_table_for_first_display
    EXPORTING
      i_buffer_active      = ' '
      i_bypassing_buffer   = 'X'
      is_layout            = ls_layout
      is_variant           = ls_variant
      i_save               = 'A'
      it_toolbar_excluding = lti_excl
    CHANGING
      it_outtab            = gti_datos
      it_fieldcatalog      = lti_fieldcat.

ENDFORM.                    " ALV_MOSTRAR
*&---------------------------------------------------------------------*
*&      Form  PREPARE_FIELCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0035   text
*      <--P_LTI_FIELDCAT  text
*----------------------------------------------------------------------*
FORM prepare_fielcat  USING    p_estruct
                      CHANGING cti_fieldcat TYPE lvc_t_fcat.

  DATA: ls_fcat TYPE lvc_s_fcat,
        lv_ind  TYPE i.

* Recuperamos el catálogo de campos
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = p_estruct
    CHANGING
      ct_fieldcat      = cti_fieldcat.


* Cambiamos campos del catálogo
  LOOP AT cti_fieldcat INTO ls_fcat.
    lv_ind = sy-tabix.

    IF ls_fcat-fieldname = 'PLNBEZ'.
      ls_fcat-coltext = text-000.
      ls_fcat-scrtext_l = text-000.
      ls_fcat-scrtext_m = text-000.
      ls_fcat-scrtext_s = text-000.
    ENDIF.

    IF ls_fcat-fieldname = 'MATNR'.
      ls_fcat-coltext = text-001.
      ls_fcat-scrtext_l = text-001.
      ls_fcat-scrtext_m = text-001.
      ls_fcat-scrtext_s = text-001.
    ENDIF.

    IF ls_fcat-fieldname = 'CANT_RESERVADA'.
      ls_fcat-coltext = text-002.
      ls_fcat-scrtext_l = text-002.
      ls_fcat-scrtext_m = text-002.
      ls_fcat-scrtext_s = text-002.
    ENDIF.

    IF ls_fcat-fieldname = 'UM_RESERVADA'.
      ls_fcat-coltext = text-003.
      ls_fcat-scrtext_l = text-003.
      ls_fcat-scrtext_m = text-003.
      ls_fcat-scrtext_s = text-003.
    ENDIF.

    IF ls_fcat-fieldname = 'CANT_CONSUMIDA'.
      ls_fcat-coltext = text-004.
      ls_fcat-scrtext_l = text-004.
      ls_fcat-scrtext_m = text-004.
      ls_fcat-scrtext_s = text-004.
    ENDIF.

    IF ls_fcat-fieldname = 'UM_CONSUMIDA'.
      ls_fcat-coltext = text-005.
      ls_fcat-scrtext_l = text-005.
      ls_fcat-scrtext_m = text-005.
      ls_fcat-scrtext_s = text-005.
    ENDIF.

    IF ls_fcat-fieldname = 'DESVIACION'.
      ls_fcat-coltext = text-006.
      ls_fcat-scrtext_l = text-006.
      ls_fcat-scrtext_m = text-006.
      ls_fcat-scrtext_s = text-006.
    ENDIF.

    IF ls_fcat-fieldname = 'AUFNR'.
      ls_fcat-no_out    = 'X'.
      ls_fcat-scrtext_l = text-006.
      ls_fcat-scrtext_m = text-006.
      ls_fcat-scrtext_s = text-006.
    ENDIF.


*   Modificamos
    MODIFY cti_fieldcat FROM ls_fcat INDEX lv_ind.
  ENDLOOP.
ENDFORM.                    " PREPARE_FIELCAT
*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion_sel .

SELECT SINGLE parva FROM usr05
      INTO p_werks
      WHERE bname = sy-uname AND
      parid = 'WRK'.

ENDFORM.                    " INICIALIZACION_SEL
