*&---------------------------------------------------------------------*
*&  Include           ZRPP0008_FORMS
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  RECUPERAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recuperar_datos.

* Recuperar fechas y  horas para la selección de datos:
  PERFORM turnos.

* GST - 05/06/2015 ->
* Selección de días de rollo:
  PERFORM selec_rollo.
* GST - 05/06/2015 <-

* Selección datos de rollo:
  PERFORM datos_rollo.

* Selección datos de bobina:
  PERFORM datos_bobina.

* Consumos rollo/bobina:
  PERFORM consumo_rollo.

ENDFORM.                    " RECUPERAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  DATOS_ROLLO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM datos_rollo .

  DATA: lt_aufm TYPE STANDARD TABLE OF aufm.
  DATA: ls_aufm TYPE aufm.
  DATA: ls_datos LIKE LINE OF gt_rollo,
        ls_rollo LIKE LINE OF gt_rollo.

  DATA: lv_indice LIKE sy-tabix,
        lv_index  LIKE sy-tabix.

*  DATA: BEGIN OF lt_rollo OCCURS 0,
*          aufnr TYPE aufnr,
*          matnr TYPE matnr,
*          maktx TYPE maktx,
*          charg TYPE charg_d,
*          menge TYPE menge_d,
*          meins TYPE meins,
*          erfmg TYPE erfmg,
*          erfme TYPE erfme,
*          budat TYPE budat,
*          cputm TYPE cputm,
*        END OF lt_rollo.


  DATA: lv_objkey          TYPE                   objnum,
        lt_allocvaluesnum  TYPE STANDARD TABLE OF bapi1003_alloc_values_num WITH HEADER LINE,
        lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char WITH HEADER LINE,
        ls_allocvalueschar TYPE                   bapi1003_alloc_values_char,
        lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr WITH HEADER LINE,
        lt_return          TYPE STANDARD TABLE OF bapiret2,
        ls_return          TYPE                   bapiret2.



  CLEAR: gt_rollo.
  REFRESH: gt_rollo.

  CLEAR: lt_aufm.
  REFRESH: lt_aufm.

  lv_indice = 1.

* GST - 05/06/2015 ->

  SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
    FROM aufm AS a
    INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                            AND b~mjahr = a~mjahr )
    INNER JOIN aufk AS c ON c~aufnr = a~aufnr
    WHERE a~werks = pwerks
      AND a~budat IN s_budat_r
      AND a~charg IN scharg
      AND ( a~aufnr IS NOT NULL AND a~aufnr IN saufnr )
      AND ( a~bwart = '101' OR a~bwart = '102' )
      AND c~auart = 'ZI01'.


  LOOP AT lt_aufm INTO ls_aufm.
    CLEAR ls_datos.
    MOVE-CORRESPONDING ls_aufm TO ls_datos.

    CLEAR: ls_rollo, lv_index.
    READ TABLE gt_rollo INTO ls_rollo WITH KEY aufnr = ls_datos-aufnr
                                               matnr = ls_datos-matnr
                                               charg = ls_datos-charg.
    lv_index = sy-tabix.


    CONCATENATE ls_datos-matnr ls_datos-charg INTO lv_objkey.
    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = lv_objkey
        objecttable     = 'MCH1'
        classnum        = 'Z_ROLLO'
        classtype       = '023'
      TABLES
        allocvaluesnum  = lt_allocvaluesnum
        allocvalueschar = lt_allocvalueschar
        allocvaluescurr = lt_allocvaluescurr
        return          = lt_return.


    IF lt_allocvalueschar[] IS NOT INITIAL.
      CLEAR ls_allocvalueschar.
      READ TABLE lt_allocvalueschar INTO ls_allocvalueschar
                                    WITH KEY  charact = 'LOBM_UDCODE'.
      IF ls_allocvalueschar-value_neutral IS NOT INITIAL.
        ls_datos-de_rollo = ls_allocvalueschar-value_neutral.
      ENDIF.
    ENDIF.


    IF ls_rollo IS INITIAL.
      " Descripción material:
      SELECT SINGLE maktx INTO ls_datos-maktx
        FROM makt
        WHERE matnr = ls_datos-matnr
          AND spras = sy-langu.

      " Cantidades:
      IF ls_aufm-bwart = '102'.
        ls_datos-menge = ( -1 ) * ls_datos-menge.
        ls_datos-erfmg = ( -1 ) * ls_datos-erfmg.
      ENDIF.

      " Turno:
      SELECT SINGLE cputm INTO ls_datos-cputm
        FROM mkpf
        WHERE mblnr = ls_aufm-mblnr
        AND mjahr = ls_aufm-mjahr.

      IF ( ls_datos-cputm >= '060000' AND ls_datos-cputm <= '135959' ).
        ls_datos-turno = 'T1'.
        ls_datos-fec_prod = ls_datos-budat.
      ELSEIF ( ls_datos-cputm >= '140000' AND ls_datos-cputm <= '215959' ).
        ls_datos-turno = 'T2'.
        ls_datos-fec_prod = ls_datos-budat.
      ELSEIF ( ls_datos-cputm >= '220000' AND ls_datos-cputm <= '235959' ).
        ls_datos-turno = 'T3'.
        ls_datos-fec_prod = ls_datos-budat.
      ELSE.
        ls_datos-turno = 'T3'.
        ls_datos-fec_prod = ls_datos-budat - 1.
      ENDIF.

      " Indice:
      ls_datos-indice = lv_indice.

      APPEND ls_datos TO gt_rollo.
      lv_indice = lv_indice + 1.

    ELSE.

      " Cantidades:
      IF ls_aufm-bwart = '102'.
        ls_datos-menge = ( -1 ) * ls_datos-menge.
        ls_datos-erfmg = ( -1 ) * ls_datos-erfmg.
      ENDIF.

      ls_rollo-menge = ls_rollo-menge + ls_datos-menge.
      ls_rollo-erfmg = ls_rollo-erfmg + ls_datos-erfmg.

      MODIFY gt_rollo FROM ls_rollo INDEX lv_index.

    ENDIF.
  ENDLOOP.

ENDFORM.                    " DATOS_ROLLO
*&---------------------------------------------------------------------*
*&      Form  TURNOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM turnos .

  DATA: ls_h_t1 LIKE LINE OF so_h_t1,
        ls_h_t2 LIKE LINE OF so_h_t2,
        ls_h_t3 LIKE LINE OF so_h_t3.

  CLEAR: so_h_t1, ls_h_t1, so_h_t2, ls_h_t2.
  CLEAR: ls_h_t3, so_h_t3_ini, so_h_t3_fin, so_h_t3, gv_d_t3_ini, gv_d_t3_fin.
  REFRESH: so_h_t1, so_h_t2, so_h_t3_ini, so_h_t3_fin, so_h_t3.

* Turno 1:
  IF p_t1 = 'X'.
    CLEAR ls_h_t1.
    ls_h_t1-sign = 'I'.
    ls_h_t1-option = 'BT'.
    ls_h_t1-low = '060000'.
    ls_h_t1-high = '135959'.
    APPEND ls_h_t1 TO so_h_t1.
  ENDIF.

* Turno 2:
  IF p_t2 = 'X'.
    CLEAR ls_h_t2.
    ls_h_t2-sign = 'I'.
    ls_h_t2-option = 'BT'.
    ls_h_t2-low = '140000'.
    ls_h_t2-high = '215959'.
    APPEND ls_h_t2 TO so_h_t2.
  ENDIF.

* Turno 3:
* Vemos si el día inicial y final es el mismo:
  IF p_t3 = 'X'.
    IF sbudat-option = 'EQ'.

      gv_d_t3_ini = sbudat-low.
      gv_d_t3_fin = sbudat-low + 1.

      CLEAR ls_h_t3.
      ls_h_t3-sign = 'I'.
      ls_h_t3-option = 'BT'.
      ls_h_t3-low = '220000'.
      ls_h_t3-high = '235959'.
      APPEND ls_h_t3 TO so_h_t3_ini.

      CLEAR ls_h_t3.
      ls_h_t3-sign = 'I'.
      ls_h_t3-option = 'BT'.
      ls_h_t3-low = '000000'.
      ls_h_t3-high = '055959'.
      APPEND ls_h_t3 TO so_h_t3_fin.

    ELSEIF sbudat-option = 'BT'.

      IF sbudat-low = sbudat-high.

        gv_d_t3_ini = sbudat-low.
        gv_d_t3_fin = sbudat-low + 1.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '220000'.
        ls_h_t3-high = '235959'.
        APPEND ls_h_t3 TO so_h_t3_ini.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '000000'.
        ls_h_t3-high = '055959'.
        APPEND ls_h_t3 TO so_h_t3_fin.

      ELSE.

        gv_d_t3_ini = sbudat-low.
        gv_d_t3_fin = sbudat-high + 1.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '220000'.
        ls_h_t3-high = '235959'.
        APPEND ls_h_t3 TO so_h_t3_ini.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '000000'.
        ls_h_t3-high = '055959'.
        APPEND ls_h_t3 TO so_h_t3_fin.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '000000'.
        ls_h_t3-high = '055959'.
        APPEND ls_h_t3 TO so_h_t3.

        CLEAR ls_h_t3.
        ls_h_t3-sign = 'I'.
        ls_h_t3-option = 'BT'.
        ls_h_t3-low = '220000'.
        ls_h_t3-high = '235959'.
        APPEND ls_h_t3 TO so_h_t3.

      ENDIF.

    ENDIF.
  ENDIF.


ENDFORM.                    " TURNOS
*&---------------------------------------------------------------------*
*&      Form  DATOS_BOBINA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM datos_bobina .

  DATA: lt_aufm TYPE STANDARD TABLE OF aufm.
  DATA: ls_aufm TYPE aufm.
  DATA: ls_datos LIKE LINE OF gt_bob,
        ls_bob   LIKE LINE OF gt_bob.

  DATA: lv_indice LIKE sy-tabix,
        lv_index  LIKE sy-tabix.

  CLEAR: gt_bob.
  REFRESH: gt_bob.

  CLEAR: lt_aufm.
  REFRESH: lt_aufm.

  IF p_t1 = 'X'.

    SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
      FROM aufm AS a
      INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                              AND b~mjahr = a~mjahr )
      INNER JOIN aufk AS c ON c~aufnr = a~aufnr
      WHERE a~werks = pwerks
        AND a~budat IN sbudat
        AND a~aufnr IS NOT NULL
        AND ( a~bwart = '101' OR a~bwart = '102' OR a~bwart = '531' OR a~bwart = '532')
        AND b~cputm IN so_h_t1
        AND c~auart = 'ZI02'.

  ENDIF.

  IF p_t2 = 'X'.

    SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
      FROM aufm AS a
      INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                              AND b~mjahr = a~mjahr )
      INNER JOIN aufk AS c ON c~aufnr = a~aufnr
      WHERE a~werks = pwerks
        AND a~budat IN sbudat
        AND a~aufnr IS NOT NULL
        AND ( a~bwart = '101' OR a~bwart = '102' OR a~bwart = '531' OR a~bwart = '532' )
        AND b~cputm IN so_h_t2
        AND c~auart = 'ZI02'.

  ENDIF.

  IF p_t3 = 'X'.

    IF so_h_t3[] IS INITIAL.

      SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
        FROM aufm AS a
        INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                                AND b~mjahr = a~mjahr )
        INNER JOIN aufk AS c ON c~aufnr = a~aufnr
        WHERE a~werks = pwerks
          AND ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR
                ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) )
          AND a~aufnr IS NOT NULL
          AND ( a~bwart = '101' OR a~bwart = '102' OR a~bwart = '531' OR a~bwart = '532')
          AND c~auart = 'ZI02'.

    ELSE.

      SELECT * APPENDING CORRESPONDING FIELDS OF TABLE lt_aufm
        FROM aufm AS a
        INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                                AND b~mjahr = a~mjahr )
        INNER JOIN aufk AS c ON c~aufnr = a~aufnr
        WHERE a~werks = pwerks
          AND a~aufnr IS NOT NULL
          AND ( ( a~budat = gv_d_t3_ini AND b~cputm IN so_h_t3_ini ) OR
                ( a~budat = gv_d_t3_fin AND b~cputm IN so_h_t3_fin ) OR
                ( a~budat <> gv_d_t3_ini AND a~budat <> gv_d_t3_fin AND
                  a~budat IN sbudat AND b~cputm IN so_h_t3 ) )
          AND ( a~bwart = '101' OR a~bwart = '102' OR a~bwart = '531' OR a~bwart = '532')
          AND c~auart = 'ZI02'.
    ENDIF.

  ENDIF.

  LOOP AT lt_aufm INTO ls_aufm.
    CLEAR ls_datos.
    MOVE-CORRESPONDING ls_aufm TO ls_datos.

    " Descripción material:
    SELECT SINGLE maktx INTO ls_datos-maktx
      FROM makt
      WHERE matnr = ls_datos-matnr
        AND spras = sy-langu.

    " Cantidades:
    IF ls_aufm-bwart = '102' OR ls_aufm-bwart = '532'.
      ls_datos-menge = ( -1 ) * ls_datos-menge.
      ls_datos-erfmg = ( -1 ) * ls_datos-erfmg.
    ENDIF.

    " Turno:
    SELECT SINGLE cputm INTO ls_datos-cputm
      FROM mkpf
      WHERE mblnr = ls_aufm-mblnr
      AND mjahr = ls_aufm-mjahr.

    IF ( ls_datos-cputm >= '060000' AND ls_datos-cputm <= '135959' ).
      ls_datos-turno = 'T1'.
      ls_datos-fec_prod = ls_datos-budat.
    ELSEIF ( ls_datos-cputm >= '140000' AND ls_datos-cputm <= '215959' ).
      ls_datos-turno = 'T2'.
      ls_datos-fec_prod = ls_datos-budat.
    ELSEIF ( ls_datos-cputm >= '220000' AND ls_datos-cputm <= '235959' ).
      ls_datos-turno = 'T3'.
      ls_datos-fec_prod = ls_datos-budat.
    ELSE.
      ls_datos-turno = 'T3'.
      ls_datos-fec_prod = ls_datos-budat - 1.
    ENDIF.

    " Identificar indice (material/lote rollo relacionado):
    PERFORM indice_rollo USING ls_datos-matnr
                               ls_datos-charg
                         CHANGING ls_datos-indice ls_datos-de_bob.

    IF ls_datos-indice IS NOT INITIAL.
      APPEND ls_datos TO gt_bob.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " DATOS_BOBINA
*&---------------------------------------------------------------------*
*&      Form  INDICE_ROLLO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_MATNR  text
*      -->P_LS_DATOS_CHARG  text
*      <--P_LS_DATOS_INDICE  text
*----------------------------------------------------------------------*
FORM indice_rollo  USING    p_matnr
                            p_charg
                   CHANGING p_indice
                            ls_datos-de_bob.

  DATA: lv_objkey TYPE objnum,
        lv_matnr  TYPE matnr,
        lv_charg  TYPE charg_d.
  DATA lt_allocvaluesnum TYPE STANDARD TABLE OF bapi1003_alloc_values_num WITH HEADER LINE.
  DATA: lt_allocvalueschar TYPE STANDARD TABLE OF bapi1003_alloc_values_char WITH HEADER LINE,
        ls_allocvalueschar TYPE                   bapi1003_alloc_values_char.
  DATA lt_allocvaluescurr TYPE STANDARD TABLE OF bapi1003_alloc_values_curr WITH HEADER LINE.
  DATA: lt_return TYPE STANDARD TABLE OF bapiret2,
        ls_return TYPE                   bapiret2.

  DATA: ls_rollo LIKE LINE OF gt_rollo.

  CLEAR: lv_objkey, lt_allocvaluesnum, lt_allocvalueschar, lt_allocvaluescurr, lt_return.
  CLEAR: lv_matnr, lv_charg.
  REFRESH: lt_allocvaluesnum, lt_allocvalueschar, lt_allocvaluescurr, lt_return.

  CONCATENATE p_matnr p_charg INTO lv_objkey.

  " 1) Recuperar material/lote rollo bobina normal:

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_objkey
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_allocvaluesnum
      allocvalueschar = lt_allocvalueschar
      allocvaluescurr = lt_allocvaluescurr
      return          = lt_return.

  CLEAR ls_return.
  READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
  IF ls_return IS INITIAL.

    CLEAR: lv_matnr, lv_charg.

    IF lt_allocvalueschar[] IS NOT INITIAL.

      CLEAR ls_allocvalueschar.
      READ TABLE lt_allocvalueschar INTO ls_allocvalueschar
                                  WITH KEY  charact = 'Z_ROLLO_ORIGEN_V2'.
      IF ls_allocvalueschar-value_neutral IS NOT INITIAL.
        lv_matnr = ls_allocvalueschar-value_neutral.
      ENDIF.

      CLEAR ls_allocvalueschar.
      READ TABLE lt_allocvalueschar INTO ls_allocvalueschar
                                    WITH KEY  charact = 'Z_LOTE_ORIGEN'.
      IF ls_allocvalueschar-value_neutral IS NOT INITIAL.
        lv_charg = ls_allocvalueschar-value_neutral.
      ENDIF.

      CLEAR ls_allocvalueschar.
      READ TABLE lt_allocvalueschar INTO ls_allocvalueschar
                                    WITH KEY  charact = 'LOBM_UDCODE'.
      IF ls_allocvalueschar-value_neutral IS NOT INITIAL.
        ls_datos-de_bob = ls_allocvalueschar-value_neutral.
      ENDIF.
    ENDIF.
  ENDIF.

  IF lv_matnr IS INITIAL AND lv_charg IS INITIAL.
    " 2) Recuperar material/lote rollo bobina pulper:

    CLEAR: lv_objkey, lt_allocvaluesnum, lt_allocvalueschar, lt_allocvaluescurr, lt_return.
    CLEAR: lv_matnr, lv_charg.
    REFRESH: lt_allocvaluesnum, lt_allocvalueschar, lt_allocvaluescurr, lt_return.

    CONCATENATE p_matnr p_charg INTO lv_objkey.

    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = lv_objkey
        objecttable     = 'MCH1'
        classnum        = 'Z_BOBINA_PULPER'
        classtype       = '023'
      TABLES
        allocvaluesnum  = lt_allocvaluesnum
        allocvalueschar = lt_allocvalueschar
        allocvaluescurr = lt_allocvaluescurr
        return          = lt_return.

    CLEAR ls_return.
    READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
    IF ls_return IS INITIAL.
      CLEAR ls_allocvalueschar.
      READ TABLE lt_allocvalueschar INTO ls_allocvalueschar
                                WITH KEY  charact = 'Z_ROLLO_ORIGEN_V2'.
      IF ls_allocvalueschar-value_neutral IS NOT INITIAL.
        lv_matnr = ls_allocvalueschar-value_neutral.
      ELSE.
        CLEAR lv_matnr.
      ENDIF.

      CLEAR ls_allocvalueschar.
      READ TABLE lt_allocvalueschar INTO ls_allocvalueschar
                                    WITH KEY  charact = 'Z_LOTE_ORIGEN'.
      IF ls_allocvalueschar-value_neutral IS NOT INITIAL.
        lv_charg = ls_allocvalueschar-value_neutral.
      ELSE.
        CLEAR lv_charg.
      ENDIF.
    ELSE.
      CLEAR: lv_matnr, lv_charg.
    ENDIF.

  ENDIF.

  IF lv_matnr IS INITIAL AND lv_charg IS INITIAL.
    " 3) Recuperar material/lote rollo bobina reproceso:

    CLEAR: lv_objkey, lt_allocvaluesnum, lt_allocvalueschar, lt_allocvaluescurr, lt_return.
    CLEAR: lv_matnr, lv_charg.
    REFRESH: lt_allocvaluesnum, lt_allocvalueschar, lt_allocvaluescurr, lt_return.

    CONCATENATE p_matnr p_charg INTO lv_objkey.

    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = lv_objkey
        objecttable     = 'MCH1'
        classnum        = 'Z_BOBINA_REP'
        classtype       = '023'
      TABLES
        allocvaluesnum  = lt_allocvaluesnum
        allocvalueschar = lt_allocvalueschar
        allocvaluescurr = lt_allocvaluescurr
        return          = lt_return.

    CLEAR ls_return.
    READ TABLE lt_return INTO ls_return WITH KEY type = 'E'.
    IF ls_return IS INITIAL.
      CLEAR ls_allocvalueschar.
      READ TABLE lt_allocvalueschar INTO ls_allocvalueschar
                                WITH KEY  charact = 'Z_ROLLO_ORIGEN_V2'.
      IF ls_allocvalueschar-value_neutral IS NOT INITIAL.
        lv_matnr = ls_allocvalueschar-value_neutral.
      ELSE.
        CLEAR lv_matnr.
      ENDIF.

      CLEAR ls_allocvalueschar.
      READ TABLE lt_allocvalueschar INTO ls_allocvalueschar
                                    WITH KEY  charact = 'Z_LOTE_ORIGEN'.
      IF ls_allocvalueschar-value_neutral IS NOT INITIAL.
        lv_charg = ls_allocvalueschar-value_neutral.
      ELSE.
        CLEAR lv_charg.
      ENDIF.
    ELSE.
      CLEAR: lv_matnr, lv_charg.
    ENDIF.

  ENDIF.

  " Buscamos el índice del material/lote rollo:
  IF lv_matnr IS NOT INITIAL AND lv_charg IS NOT INITIAL.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = lv_matnr
      IMPORTING
        output = lv_matnr.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = lv_charg
      IMPORTING
        output = lv_charg.

    CLEAR ls_rollo.
    READ TABLE gt_rollo INTO ls_rollo WITH KEY matnr = lv_matnr
                                               charg = lv_charg.
    IF ls_rollo IS NOT INITIAL.
      p_indice = ls_rollo-indice.
    ELSE.
      CLEAR p_indice.
    ENDIF.

  ELSE.
    CLEAR p_indice.
  ENDIF.

ENDFORM.                    " INDICE_ROLLO
*&---------------------------------------------------------------------*
*&      Form  CONSUMO_ROLLO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM consumo_rollo .

  DATA: ls_consumo TYPE         zstpp_consumo_rol_bob,
        ls_rollo   LIKE LINE OF gt_rollo,
        ls_bob     LIKE LINE OF gt_bob.

  CLEAR: gt_consumo.
  REFRESH: gt_consumo.

  LOOP AT gt_rollo INTO ls_rollo.
    LOOP AT gt_bob INTO ls_bob WHERE indice = ls_rollo-indice.
      CLEAR ls_consumo.

      " Movemos datos del rollo:
      ls_consumo-werks = ls_rollo-werks. "cgijon: 28.11.16 - sat - 7000012852
      ls_consumo-aufnr_rollo = ls_rollo-aufnr.
      ls_consumo-matnr_rollo = ls_rollo-matnr.
      ls_consumo-maktx_rollo = ls_rollo-maktx.
      ls_consumo-charg_rollo = ls_rollo-charg.
      ls_consumo-menge_rollo = ls_rollo-menge.
      ls_consumo-meins_rollo = ls_rollo-meins.
      ls_consumo-erfmg_rollo = ls_rollo-erfmg.
      ls_consumo-erfme_rollo = ls_rollo-erfme.
      ls_consumo-budat_rollo = ls_rollo-budat.
      ls_consumo-cputm_rollo = ls_rollo-cputm.
      ls_consumo-fprod_rollo = ls_rollo-fec_prod.
      ls_consumo-turno_rollo = ls_rollo-turno.
      ls_consumo-de_rollo = ls_rollo-de_rollo. "cgijon: 28.11.16 - sat - 7000012852

      " Movemos datos de la bobina:
      ls_consumo-aufnr_bob = ls_bob-aufnr.
      ls_consumo-matnr_bob = ls_bob-matnr.
      ls_consumo-maktx_bob = ls_bob-maktx.
      ls_consumo-charg_bob = ls_bob-charg.
      ls_consumo-lgort_bob = ls_bob-lgort.
      ls_consumo-bwart = ls_bob-bwart.
      ls_consumo-menge_bob = ls_bob-menge.
      ls_consumo-meins_bob = ls_bob-meins.
      ls_consumo-erfmg_bob = ls_bob-erfmg.
      ls_consumo-erfme_bob = ls_bob-erfme.
      ls_consumo-budat_bob = ls_bob-budat.
      ls_consumo-cputm_bob = ls_bob-cputm.
      ls_consumo-fprod_bob = ls_bob-fec_prod.
      ls_consumo-turno_bob = ls_bob-turno.
      ls_consumo-de_bob = ls_bob-de_bob. "cgijon: 28.11.16 - sat - 7000012852

      APPEND ls_consumo TO gt_consumo.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                    " CONSUMO_ROLLO
*&---------------------------------------------------------------------*
*&      Form  SELEC_ROLLO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM selec_rollo .

  DATA: lv_fec_ini TYPE         datum,
        lv_fec_fin TYPE         datum,
        lv_f_ini   TYPE         datum,
        lv_f_fin   TYPE         datum,
        ls_budat   LIKE LINE OF s_budat_r.

  CLEAR: lv_fec_ini, lv_fec_fin, s_budat_r, ls_budat.
  REFRESH: s_budat_r.

  LOOP AT sbudat INTO ls_budat.
    APPEND ls_budat TO s_budat_r.
  ENDLOOP.

  IF s_budat_r[] IS NOT INITIAL.
    " Fecha inicial:
    SORT s_budat_r BY low ASCENDING.
    READ TABLE s_budat_r INTO ls_budat INDEX 1.
    IF ls_budat IS NOT INITIAL.
      lv_f_ini = ls_budat-low.
    ENDIF.
    " Fecha final:
    SORT s_budat_r BY high DESCENDING.
    READ TABLE s_budat_r INTO ls_budat INDEX 1.
    IF ls_budat-high IS INITIAL.
      SORT s_budat_r BY low DESCENDING.
      READ TABLE s_budat_r INTO ls_budat INDEX 1.
      IF ls_budat IS NOT INITIAL.
        lv_f_fin = ls_budat-low.
      ENDIF.
    ELSE.
      lv_f_fin = ls_budat-high.
    ENDIF.
  ENDIF.


  IF s_budat_r[] IS NOT INITIAL.

* Intervalo inicial:
    lv_fec_ini = lv_f_ini - 5.
    lv_fec_fin = lv_f_ini - 1.

    CLEAR ls_budat.
    ls_budat-sign = 'I'.
    ls_budat-option = 'BT'.
    ls_budat-low = lv_fec_ini.
    ls_budat-high = lv_fec_fin.
    APPEND ls_budat TO s_budat_r.

* Intervalo final:
    CLEAR lv_fec_fin.
    lv_fec_fin = lv_f_fin + 1.
    CLEAR ls_budat.
    ls_budat-sign = 'I'.
    ls_budat-option = 'EQ'.
    ls_budat-low = lv_fec_fin.
    APPEND ls_budat TO s_budat_r.
  ENDIF.

ENDFORM.                    " SELEC_ROLLO
*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion_sel .

  SELECT SINGLE parva FROM usr05
        INTO pwerks
        WHERE bname = sy-uname AND
        parid = 'WRK'.

ENDFORM.                    " INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*&      Form  ALV_MOSTRAR_NEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_mostrar_new .
  DATA: ls_lvc_s_layo TYPE lvc_s_layo,
        ls_variant    TYPE disvariant.

* Variante
  PERFORM alv_prepare_variant CHANGING ls_variant.
* Preparamos el catálogo de campos
  PERFORM alv_prepare_fielcat.
* Preparamos el layout
  PERFORM alv_prepare_layout CHANGING ls_lvc_s_layo.

* Mostramos el ALV
  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      i_buffer_active    = ' '
      i_bypassing_buffer = 'X'
      is_layout          = ls_lvc_s_layo
      i_structure_name   = 'GT_CONSUMO'
      is_variant         = ls_variant
      i_save             = 'A'
    CHANGING
      it_outtab          = gt_consumo[]
      it_fieldcatalog    = gt_fieldcat.
ENDFORM.                    " ALV_MOSTRAR_NEW
