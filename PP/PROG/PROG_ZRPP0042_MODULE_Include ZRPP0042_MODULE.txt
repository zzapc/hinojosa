*&---------------------------------------------------------------------*
*&  Include           ZRPP0042_MODULE
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0300 OUTPUT.

* Status y título de la dynpro
  SET PF-STATUS 'PROCESO'.
  SET TITLEBAR 'PROCESO'.

  IF gcl_custom_container IS INITIAL.

* Creamos los objetos
    CREATE OBJECT gcl_custom_container
      EXPORTING
        container_name = gc_container.

    CREATE OBJECT gcl_grid
      EXPORTING
        i_parent = gcl_custom_container.

    CREATE OBJECT gcl_event_handler.
    SET HANDLER gcl_event_handler->handle_data_changed FOR gcl_grid.
    SET HANDLER gcl_event_handler->hotspot_click FOR gcl_grid.

    CALL METHOD gcl_grid->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

    CALL METHOD gcl_grid->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_enter.

*   Mostramos el ALV
    PERFORM alv_mostrar.

  ELSE.
    CALL METHOD gcl_grid->refresh_table_display.
  ENDIF.

ENDMODULE.                 " STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.
  DATA: lv_error,
        lv_exit.
  DATA: lv_peso_rollo TYPE gamng.

  CLEAR lv_error.

  CASE gv_okcode.
*   Volver
    WHEN 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.
*   Crear
    WHEN 'CREAR'.
*     Cargar tabla de lineas marcadas
      PERFORM lineas_marcadas_crear CHANGING lv_error.
      IF lv_error IS INITIAL.
*       Creación de ordenes seleccionadas
        PERFORM creacion_ordenes CHANGING lv_error.

        PERFORM refrescar_listado.
        MESSAGE w101(zpp).
**       Sacamos ALV de log
*        PERFORM sacar_log.
*        SET SCREEN 0.
*        LEAVE SCREEN.
      ENDIF.
*   Agrupar
    WHEN 'AGRUPAR'.
*     Cargar tabla de lineas marcadas
      PERFORM lineas_marcadas_agrupar CHANGING lv_error
                                               lv_peso_rollo.
      IF lv_error IS INITIAL.
*       Marcamos tabla interna con la nueva agrupacion
        PERFORM marcar_agrupacion USING lv_peso_rollo.
        PERFORM refrescar_listado.
      ENDIF.

* Ancho máximo:
    WHEN 'ANCHO_MAX'.
      CLEAR: gt_cabos. REFRESH: gt_cabos.
      PERFORM lineas_agrupar_ancho_max TABLES gt_cabos
                                       CHANGING lv_error
                                                lv_exit.

      IF lv_error IS INITIAL AND gt_cabos[] IS NOT INITIAL.
*       Marcamos tabla interna con la nueva agrupación ancho máx:
        PERFORM marcar_agrup_ancho_max TABLES gt_cabos.
        PERFORM refrescar_listado.
      ENDIF.

* Cambio rollo - Ancho máximo:
    WHEN 'CAMB_ROL'.
      data: l_num_bobinas type int1.

      PERFORM cambio_rollo_chequeos CHANGING lv_error
                                             lv_exit
                                             gt_cabos "CGIJON.
                                             l_num_bobinas.

      IF lv_error IS INITIAL AND gt_selec[] IS NOT INITIAL.
*        Marcamos la tabla interna para cambio de rollo:
        PERFORM marcar_cambio_rollo using l_num_bobinas.
        PERFORM refrescar_listado.
      ENDIF.

* Visualizar log:
    WHEN 'LOG'.
      PERFORM sacar_log.
*      SET SCREEN 0300.
*      LEAVE SCREEN.
*      CALL SELECTION-SCREEN 0300.

** Secuenciar órdenes:
*    WHEN 'SECUENCIAR'.
*      " Recuperamos órdenes no liberadas hasta fecha de entrega máx:
*      PERFORM f_rec_ordenes.
*      " Secuenciamos todas las órdenes no liberadas hasta la fecha
*      " de entrega máxima:
*      PERFORM f_secuenciacion.
*      MESSAGE w101(zpp).

* Desagrupar órdenes (que no se han procesado):
    WHEN 'DESAGRUPAR'.
*     Cargar tabla de lineas marcadas
      PERFORM lineas_marcadas_desagrupar CHANGING lv_error.
      IF lv_error IS INITIAL.
        PERFORM desagrupar.
        PERFORM refrescar_listado.
      ENDIF.

* Deshacer cambio rollo (que no se hayan procesado):
    WHEN 'VOLVER_ROL'.
* Cargar tabla de lineas marcadas a deshacer cambio rollo:
      PERFORM lineas_marcadas_desh_rollo CHANGING lv_error.
      IF lv_error IS INITIAL.
        PERFORM deshacer_cambio_rollo.
        PERFORM refrescar_listado.
      ENDIF.

* Refrescar: eliminar listado órdenes ya creadas
    WHEN 'REFRESCAR'.
      PERFORM refrescar.
      PERFORM refrescar_listado.

  ENDCASE.
  CLEAR gv_okcode.

ENDMODULE.                 " USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
MODULE status_0100 OUTPUT.

* Status y título de la dynpro
  SET PF-STATUS 'MAIN'.
  SET TITLEBAR 'MAIN'.

  IF gcl_custom_container2 IS INITIAL.

* Creamos los objetos
    CREATE OBJECT gcl_custom_container2
      EXPORTING
        container_name = gc_container2.

    CREATE OBJECT gcl_grid2
      EXPORTING
        i_parent = gcl_custom_container2.

*   Mostramos el ALV
    PERFORM alv_mostrar_log.

  ELSE.
    CALL METHOD gcl_grid2->refresh_table_display.
  ENDIF.

ENDMODULE.                 " STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  CASE gv_okcode2.
*   Volver
    WHEN 'BACK'.
      SET SCREEN 0.
      LEAVE SCREEN.
  ENDCASE.
  CLEAR gv_okcode2.


ENDMODULE.                 " USER_COMMAND_0100  INPUT
