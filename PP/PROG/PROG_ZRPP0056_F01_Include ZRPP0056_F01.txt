*----------------------------------------------------------------------*
***INCLUDE ZRPP0056_F01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  DROPBOXDOWN_CALIDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM dropboxdown_calidad .

  DATA:    lt_list  TYPE vrm_values,
           ls_value LIKE LINE OF lt_list.

  CALL METHOD zclpp_recetas_mp=>obtener_calidades_receta_std
    EXPORTING
      i_werks      = gs_dyn100-werks
    IMPORTING
      ot_calidades = DATA(lt_calidades).

  CLEAR lt_list[].
  LOOP AT lt_calidades INTO DATA(ls_calidad).
    CLEAR ls_value.
    ls_value-key   = ls_calidad-zcalidad.
    ls_value-text  = ls_calidad-descrip.
    APPEND ls_value TO lt_list.
  ENDLOOP.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN100-CALIDAD'
      values = lt_list.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  OBTENER_SOCIEDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_sociedad .

  gs_dyn100-werks = zclpp_recetas_mp=>obtener_sociedad_usuario( ).

ENDFORM.

FORM invocar_alta_receta_std.

  PERFORM limpiar_pantalla_300.

  gs_dyn300-werks   = gs_dyn100-werks.
  gs_dyn300-calidad = gs_dyn100-calidad.

* Obtenemos descriptivo de la calidad.
  gs_dyn300-descrip = zclpp_recetas_mp=>obtener_descr_calidad( i_werks = gs_dyn300-werks i_calidad = gs_dyn300-calidad  ).

  g_tp_300 = 'A'.
  CALL SCREEN 0300.

ENDFORM.

*FORM invocar_modif_receta_std USING p_row TYPE int4.

*  PERFORM limpiar_pantalla_300.
*  gs_dyn300-descrip = zclpp_recetas_mp=>obtener_descr_calidad( i_werks = gs_dyn300-werks i_calidad = gs_dyn300-calidad  ).
*
*  TRY.
*
*      CLEAR gs_dyn300.
*      gs_dyn300-werks         = gs_dyn200-werks.
*      gs_dyn300-calidad       = gs_dyn200-calidad.
*      gs_dyn300-descrip       = gs_dyn200-descrip.
*
*      gs_dyn300-id_receta     = gt_cab_rec_std[ p_row ]-id_receta.
*      gs_dyn300-descrip_rec   = gt_cab_rec_std[ p_row ]-descrip_rec.
*      gs_dyn300-fecha         = gt_cab_rec_std[ p_row ]-fecha_reg.
*      gs_dyn300-hora          = gt_cab_rec_std[ p_row ]-hora_reg.
*
*
*    CATCH cx_root .
*  ENDTRY.
*
*  CALL METHOD zclpp_recetas_mp=>obtener_posiciones_receta
*    EXPORTING
*      i_werks         = gs_dyn300-werks
*      i_id_receta_std = gs_dyn300-id_receta
*    IMPORTING
*      ot_lista_mp     = gt_materia_prima300.
*
*  g_tp_300 = 'M'.
*  CALL SCREEN 0300.


*ENDFORM.

FORM invocar_consulta_receta_std USING p_row TYPE int4.

  PERFORM limpiar_pantalla_300.
  TRY.

      CLEAR gs_dyn300.
      gs_dyn300-werks         = gs_dyn200-werks.
*      gs_dyn300-calidad       = gs_dyn200-calidad.
*      gs_dyn300-descrip       = gs_dyn200-descrip.

      gs_dyn300-id_receta     = gt_cab_rec_std[ p_row ]-id_receta.
      gs_dyn300-calidad       = gt_cab_rec_std[ p_row ]-zcalidad.
      gs_dyn300-descrip       = zclpp_recetas_mp=>obtener_descr_calidad(
                                                      i_werks   = gs_dyn100-werks
                                                      i_calidad = gs_dyn300-calidad ).
      gs_dyn300-descrip_rec   = gt_cab_rec_std[ p_row ]-descrip_rec.
      gs_dyn300-fecha         = gt_cab_rec_std[ p_row ]-fecha_reg.
      gs_dyn300-hora          = gt_cab_rec_std[ p_row ]-hora_reg.


    CATCH cx_root .
  ENDTRY.

  CALL METHOD zclpp_recetas_mp=>obtener_posiciones_receta
    EXPORTING
      i_werks         = gs_dyn300-werks
      i_id_receta_std = gs_dyn300-id_receta
    IMPORTING
      ot_lista_mp     = gt_materia_prima300.

  g_tp_300 = 'C'.
  CALL SCREEN 0300.


ENDFORM.

FORM limpiar_pantalla_300.

  CLEAR: gt_materia_prima300[], gs_dyn300, g_tp_300.

ENDFORM.


FORM consulta_recetas.

  gs_dyn200-werks   = gs_dyn100-werks.
  gs_dyn200-calidad = gs_dyn100-calidad.

  gs_dyn200-descrip = zclpp_recetas_mp=>obtener_descr_calidad( i_werks = gs_dyn100-werks i_calidad = gs_dyn100-calidad  ).

  CALL SCREEN 200.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GENERAR_ALV_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM generar_alv_200 .

* Obtención de registros a mostrar con recetas standard
  CALL METHOD zclpp_recetas_mp=>obtener_lista_recetas_standard
    EXPORTING
      i_werks            = gs_dyn100-werks
      i_calidad          = gs_dyn100-calidad
    IMPORTING
      ot_cab_recetas_std = gt_cab_rec_std.

*  IF gt_cab_rec_std IS INITIAL.
*    EXIT.
*  ENDIF.

  IF gs_dyn200-container IS NOT BOUND.

    CREATE OBJECT gs_dyn200-container
      EXPORTING
        container_name              = 'GS_DYN200-CONTAINER'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.

        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn200-container
            container_name = 'GS_DYN200-CONTAINER'
          IMPORTING
            r_salv_table   = gs_dyn200-go_alv
          CHANGING
            t_table        = gt_cab_rec_std.
      CATCH cx_root .
    ENDTRY.

*... §3 Functions
    DATA: lr_functions TYPE REF TO cl_salv_functions_list,
          l_text       TYPE string.

* Grabar disposición.
    lv_key-report = sy-repid.
    lo_layout = gs_dyn200-go_alv->get_layout( ).
    lo_layout->set_key( lv_key ).
    lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).



*... §3.1 activate ALV generic Functions
    lr_functions = gs_dyn200-go_alv->get_functions( ).
    lr_functions->set_all( 'X' ).

*    TRY.
*        l_text = text-b01.
*        lr_functions->add_function(
*          name     = 'ALTA'
*          icon     = '@0Y@' "space
*          text     = l_text
*          tooltip  = l_text
*          position = if_salv_c_function_position=>right_of_salv_functions ).
*      CATCH cx_salv_wrong_call cx_salv_existing.
*    ENDTRY.

    TRY.
        l_text = text-b03.
        lr_functions->add_function(
          name     = 'DETALLE'
          icon     = '@10@' "space
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.

    TRY.
        l_text = text-b02.
        lr_functions->add_function(
          name     = 'BORRAR'
          icon     = '@11@'
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.



*... set the columns technical
    DATA: lr_columns TYPE REF TO cl_salv_columns,
          lr_column  TYPE REF TO cl_salv_column_table.

    lr_columns = gs_dyn200-go_alv->get_columns( ).
    lr_columns->set_optimize( 'X' ).

*... §6 register to the events of cl_salv_table
    DATA: lr_events TYPE REF TO cl_salv_events_table.

    lr_events = gs_dyn200-go_alv->get_event( ).

    CREATE OBJECT gr_events.
*
*... §6.1 register to the event USER_COMMAND
    SET HANDLER gr_events->on_user_command FOR lr_events.

*... §7 selections
    DATA: lr_selections TYPE REF TO cl_salv_selections,
          lt_rows       TYPE salv_t_row,
          lt_column     TYPE salv_t_column,
          ls_cell       TYPE salv_s_cell.

    lr_selections = gs_dyn200-go_alv->get_selections( ).

*... §7.1 set selection mode
    lr_selections->set_selection_mode( if_salv_c_selection_mode=>multiple ).

    TRY.
        lr_column ?= lr_columns->get_column( columnname = 'MANDT' ).
        lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
      CATCH cx_salv_not_found .
    ENDTRY.

    TRY.
        lr_column ?= lr_columns->get_column( columnname = 'ID_RECETA' ).
        lr_column->SET_MEDIUM_TEXT( value  = 'Receta' ).
        lr_column->SET_SHORT_TEXT( value  = 'Receta' ).
        lr_column->SET_LONG_TEXT( value  = 'Receta' ).
      CATCH cx_salv_not_found .
    ENDTRY.

    TRY.
        lr_column ?= lr_columns->get_column( columnname = 'DESCRIP_REC' ).
        lr_column->SET_MEDIUM_TEXT( value  = 'Desc. receta' ).
        lr_column->SET_SHORT_TEXT( value  = 'Desc. rec' ).
        lr_column->SET_LONG_TEXT( value  = 'Desc. receta' ).
      CATCH cx_salv_not_found .
    ENDTRY.



    TRY.
        lr_column ?= lr_columns->get_column( columnname = 'WERKS' ).
        lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
      CATCH cx_salv_not_found .
    ENDTRY.

    TRY.
        lr_column ?= lr_columns->get_column( columnname = 'ZCALIDAD' ).
        lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
      CATCH cx_salv_not_found .
    ENDTRY.

    TRY.
        lr_column ?= lr_columns->get_column( columnname = 'FECHA_INS' ).
        lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
      CATCH cx_salv_not_found .
    ENDTRY.

    TRY.
        lr_column ?= lr_columns->get_column( columnname = 'HORA_INS' ).
        lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
      CATCH cx_salv_not_found .
    ENDTRY.

    TRY.
        lr_column ?= lr_columns->get_column( columnname = 'CONTRAMAESTRE' ).
        lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
      CATCH cx_salv_not_found .
    ENDTRY.

    TRY.
        lr_column ?= lr_columns->get_column( columnname = 'CONTR_INS' ).
        lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
      CATCH cx_salv_not_found .
    ENDTRY.

    TRY.
        lr_column ?= lr_columns->get_column( columnname = 'CONTR_UPD' ).
        lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
      CATCH cx_salv_not_found .
    ENDTRY.

*    TRY.
*        lr_column ?= lr_columns->get_column( columnname = 'CONTR_INS' ).
*        lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
*      CATCH cx_salv_not_found .
*    ENDTRY.



    gs_dyn200-go_alv->display( ).
  ELSE.
    gs_dyn200-go_alv->refresh( ).
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GENERAR_ALV_300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM generar_alv_300 .

  DATA: fieldcatalog TYPE slis_t_fieldcat_alv WITH HEADER LINE.
  DATA: "lt_fieldcat          TYPE lvc_t_fcat,     "slis_t_fieldcat_alv WITH HEADER LINE,
    wa_fieldcat          TYPE lvc_s_fcat,
    ls_lvc_s_layo        TYPE lvc_s_layo,
    lt_toolbar_excluding TYPE ui_functions,
    ls_variant           TYPE disvariant
    .

  IF gs_dyn300-container IS NOT BOUND.

    CREATE OBJECT gs_dyn300-container
      EXPORTING
        container_name = 'GS_DYN300-CONTAINER'.

    CREATE OBJECT gs_dyn300-grid
      EXPORTING
        i_parent      = gs_dyn300-container
        i_appl_events = 'X'.

    PERFORM prepare_fieldcat_300 CHANGING gt_fieldcat300.
    PERFORM prepare_layout       CHANGING ls_lvc_s_layo.
    PERFORM toolbar_excluding    CHANGING lt_toolbar_excluding.
    PERFORM prepare_variant      CHANGING ls_variant.

    CREATE OBJECT g_application.
    SET HANDLER g_application->handle_user_command FOR gs_dyn300-grid.
    SET HANDLER g_application->handle_data_changed FOR gs_dyn300-grid.
    SET HANDLER g_application->handle_toolbar      FOR gs_dyn300-grid.

*    gs_dyn300-layout-stylefname = 'CELLTAB'.


    CALL METHOD gs_dyn300-grid->set_table_for_first_display
      EXPORTING
        i_buffer_active      = ' '
        i_bypassing_buffer   = 'X'
        is_layout            = ls_lvc_s_layo
        it_toolbar_excluding = lt_toolbar_excluding
        i_structure_name     = 'ZSPP0056_ALV300'
        is_variant           = ls_variant
        i_save               = 'A'
      CHANGING
        it_outtab            = gt_materia_prima300[]
        it_fieldcatalog      = gt_fieldcat300[].

    CALL METHOD gs_dyn300-grid->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified
      EXCEPTIONS
        error      = 1
        OTHERS     = 2.
  ELSE.
    PERFORM refrescar_alv_300.
  ENDIF.

ENDFORM.

FORM obtener_datos_300.

  DATA: l_id_receta TYPE zid_receta,
        l_werks     TYPE werks_d,
        ls_ztpp0038 TYPE ztpp0038.

  CLEAR: l_id_receta , l_werks.

* Para llamada externa desde "Popup Gestión recetas planificadas MP"
  GET PARAMETER ID: 'ZID_RECETA'       FIELD l_id_receta,
                    'ZWERKS'           FIELD l_werks.

  IF l_id_receta IS NOT INITIAL AND
     l_werks     IS NOT INITIAL.

    gs_dyn300-id_receta = l_id_receta.
    gs_dyn300-werks     = l_werks.

    CALL METHOD zclpp_recetas_mp=>obtener_datos_receta_std
      EXPORTING
        i_werks        = gs_dyn300-werks
        i_id_receta    = gs_dyn300-id_receta
      IMPORTING
        o_cab_rec_std  = ls_ztpp0038
        ot_pos_rec_std = gt_materia_prima300.

    gs_dyn300-calidad       = ls_ztpp0038-zcalidad.
    gs_dyn300-descrip_rec   = ls_ztpp0038-descrip_rec.
    gs_dyn300-fecha         = ls_ztpp0038-fecha_reg.
    gs_dyn300-hora          = ls_ztpp0038-hora_reg.

    gs_dyn300-descrip = zclpp_recetas_mp=>obtener_descr_calidad( i_werks = gs_dyn300-werks i_calidad = gs_dyn300-calidad  ).

    g_tp_300 = 'C'.

  ENDIF.

  IF gt_materia_prima300[] IS INITIAL.

    CALL METHOD zclpp_recetas_mp=>obtener_lista_mp
      EXPORTING
        i_werks     = gs_dyn300-werks
      IMPORTING
        ot_lista_mp = gt_materia_prima300[].
  ENDIF.

  CASE g_tp_300.
    WHEN 'A'.   SET TITLEBAR '0300'.

    WHEN 'C' OR 'Z'.
      SET TITLEBAR '0500'.
      LOOP AT SCREEN.

        IF screen-name CS 'GS_DYN300-DESCRIP_REC'.
          screen-input = 0.
          MODIFY SCREEN.
        ENDIF.

        IF screen-group1 = 'GRU'. "Botón GUARDAR
          screen-invisible = 1.
          MODIFY SCREEN.
        ENDIF.

      ENDLOOP.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.

FORM aplicar_colores_300.
  DATA: gs_colinfo TYPE LINE OF lvc_t_scol.

  LOOP AT gt_materia_prima300 ASSIGNING FIELD-SYMBOL(<fs>).
    DELETE <fs>-color WHERE fname = 'KG_CICLO'. " Borramos el color por si el nuevo valor es 0

    IF <fs>-kg_ciclo > 0.
      CLEAR gs_colinfo.
      PERFORM colorer_celda USING 'KG_CICLO' '5' "Verde
                            CHANGING gs_colinfo.
      APPEND gs_colinfo TO <fs>-color.

    ENDIF.
  ENDLOOP.

ENDFORM.

FORM colorer_celda  USING    p_columna  TYPE lvc_fname
                             p_color    TYPE int1
                    CHANGING ls_cellcolor TYPE lvc_s_scol.


  CLEAR ls_cellcolor.
  ls_cellcolor-fname = p_columna. "ls_mod_cells-fieldname.
  ls_cellcolor-color-col = p_color. "'6' .
  ls_cellcolor-color-int = '0'.

ENDFORM.                    " COLORER_CELDA


FORM refrescar_alv_300.
  DATA: ls_layout TYPE lvc_s_layo,
        ls_stable TYPE lvc_s_stbl.

* Sacamos el layout del ALV
  CALL METHOD gs_dyn300-grid->get_frontend_layout
    IMPORTING
      es_layout = ls_layout.

* Ponemos de nuevo que optimice las columnas
  ls_layout-cwidth_opt = 'X'.

* Cargamos de nuevo el layout
  CALL METHOD gs_dyn300-grid->set_frontend_layout
    EXPORTING
      is_layout = ls_layout.

* Refrescamos el ALV
  ls_stable-row = 'X'.
  ls_stable-col = 'X'.

  CALL METHOD gs_dyn300-grid->refresh_table_display
    EXPORTING
      is_stable = ls_stable.

ENDFORM.

FORM prepare_fieldcat_300 CHANGING ct_fieldcat TYPE lvc_t_fcat.

  DATA: lt_fieldcat TYPE lvc_t_fcat.
  DATA: ls_fcat     TYPE lvc_s_fcat.
  DATA: lv_ind      TYPE i.

* Recuperamos el catálogo de campos
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZSPP0056_ALV300'
    CHANGING
      ct_fieldcat      = lt_fieldcat.

* Los cargamos en el catálogo de campos global
  ct_fieldcat[] = lt_fieldcat[].

* Recorremos el catálogo de campos modificandolo
  LOOP AT ct_fieldcat INTO ls_fcat.
    lv_ind = sy-tabix.
    CASE ls_fcat-fieldname.
      WHEN 'MAKTX'.
        ls_fcat-coltext       = 'Descripción'.

      WHEN 'KG_CICLO'.
        IF g_tp_300 = 'A'. " OR g_tp_300 = 'M'.
          ls_fcat-edit          = 'X'.
        ENDIF.
        ls_fcat-inttype       = 'I'.
        ls_fcat-just          = 'R'.
        ls_fcat-decimals_o    = '0'.
        ls_fcat-coltext       = 'Kg. ciclo'.
      WHEN 'PORC_CICLO'.
        ls_fcat-inttype = 'I'.
        ls_fcat-just    = 'R'.
        ls_fcat-coltext       = '% ciclo'.
        ls_fcat-decimals_o    = '0'.

*     WHEN 'ZZEBELN1' OR 'ZZEBELN2' OR 'ZZEBELN3'.
*        ls_fcat-no_out = gc_true.
*        ls_fcat-just = 'C'.
*        ls_fcat-just    = 'R'.
*        ls_fcat-hotspot = 'X'.
    ENDCASE.
* Modificamos el catálogo
    MODIFY ct_fieldcat FROM ls_fcat INDEX lv_ind.
  ENDLOOP.

ENDFORM.                    " prepare_fielcat

FORM prepare_layout CHANGING ls_lvc_s_layo TYPE lvc_s_layo.

* Para que muestre el ancho de las columnas optimizado
  ls_lvc_s_layo-cwidth_opt = 'X'.
*  ls_lvc_s_layo-sel_mode   = 'A'.
*  ls_lvc_s_layo-sel_mode   = 'C'.
  ls_lvc_s_layo-zebra = 'X'.
  ls_lvc_s_layo-ctab_fname = 'COLOR'.     "Enlazamos el campo en el layout

ENDFORM.                    " ALV_PREPARE_LAYOUT

FORM prepare_variant CHANGING ps_variant TYPE disvariant .

  CLEAR ps_variant.
  ps_variant-report = sy-repid.

ENDFORM.                    "alv_prepare_variant

FORM toolbar_excluding CHANGING lt_toolbar TYPE ui_functions.

  DATA: ls_exclude TYPE ui_func.
  REFRESH: lt_toolbar.

*********************************************************************mc_fc_check
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_check.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_cut
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_cut.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_copy
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_copy.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_paste
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_paste.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_paste_new_row
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_paste_new_row.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_undo
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_undo.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_append_row
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_append_row.
  APPEND ls_exclude TO lt_toolbar.
*********************************************************************mc_fc_loc_insert_row
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_insert_row.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_delete_row
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_delete_row.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_copy_row
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_copy_row.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_sort_asc
*  CLEAR ls_exclude.
*  ls_exclude = cl_gui_alv_grid=>mc_mb_sum.
*  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_subtot
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_subtot.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_print
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_print.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_views
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_views.
  APPEND ls_exclude TO lt_toolbar.
*********************************************************************mc_mb_export
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_graph.
  APPEND ls_exclude TO lt_toolbar.
*********************************************************************mc_fc_info
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_info.
  APPEND ls_exclude TO lt_toolbar.

*********************************************************************mc_fc_info
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_refresh.
  APPEND ls_exclude TO lt_toolbar.


ENDFORM.                    "alv_toolbar_excluding

FORM save.

  DATA: l_cont TYPE i.

* Validar descripción.
  IF gs_dyn300-descrip_rec IS INITIAL.
    MESSAGE i319(zpp). "No se permite crear una receta sin descripción.
    RETURN.
  ENDIF.


*Validar que no esté todo a ceros.
  CLEAR l_cont.
  LOOP AT gt_materia_prima300 INTO DATA(ls_mp) WHERE kg_ciclo > 0.
    ADD 1 TO l_cont.
  ENDLOOP.
  IF l_cont = 0.
    MESSAGE i321(zpp). "Debe informar kg. de alguno de los materiales de la lista.
    RETURN.
  ENDIF.



  CALL METHOD zclpp_recetas_mp=>guardar_receta_std
    EXPORTING
      i_id_receta_std    = gs_dyn300-id_receta
      i_werks            = gs_dyn300-werks
      i_zcalidad         = gs_dyn300-calidad
      i_descrip_rec      = gs_dyn300-descrip_rec
      it_materias_primas = gt_materia_prima300
    IMPORTING
      o_id_receta        = gs_dyn300-id_receta
      o_fecha_reg        = gs_dyn300-fecha
      o_hora_reg         = gs_dyn300-hora.

  CLEAR gt_mp_backup.
  gt_mp_backup[] = gt_materia_prima300.

  MESSAGE s332(zpp) WITH gs_dyn300-id_receta. " Receta standard & creada correctamente.

ENDFORM.

FORM handle_user_command200 USING i_ucomm TYPE salv_de_function.

  CASE i_ucomm.

*    WHEN 'ALTA'.
*      PERFORM invocar_alta_receta_std.
*      PERFORM refrescar_datos_200.
    WHEN 'BORRAR'.
      PERFORM borrar_recetas_std.
      PERFORM refrescar_datos_200.
    WHEN 'DETALLE'.
      PERFORM detalle_receta_std.

    WHEN OTHERS.
  ENDCASE.

ENDFORM.

FORM refrescar_datos_200.
  CALL METHOD zclpp_recetas_mp=>obtener_lista_recetas_standard
    EXPORTING
      i_werks            = gs_dyn100-werks
      i_calidad          = gs_dyn100-calidad
    IMPORTING
      ot_cab_recetas_std = gt_cab_rec_std.

  gs_dyn200-go_alv->refresh( ).

ENDFORM.

FORM borrar_recetas_std.
  DATA: lr_selections TYPE REF TO cl_salv_selections.
  DATA: lt_rows       TYPE salv_t_row,
        lr_id_recetas TYPE zrrid_receta,
        l_msg         TYPE string.
  DATA l_lines TYPE i.
  DATA: lv_answer(1) TYPE c.

  lr_selections = gs_dyn200-go_alv->get_selections( ).
  lt_rows       = lr_selections->get_selected_rows( ).

* Rellenamos Range para validar el borrado de recetas
  LOOP AT lt_rows INTO DATA(l_row).

    APPEND VALUE zrid_receta( sign = 'I' option ='EQ' low = gt_cab_rec_std[ l_row ]-id_receta )
        TO lr_id_recetas.

  ENDLOOP.

* Validamos que no haya recetas planificadas asociadas.
*  IF zclpp_recetas_mp=>validar_si_hay_rec_planif( it_recetas = lr_id_recetas ) <> 'X'.
*    MESSAGE e319(zpp). "No se puede borrar receta std ya que esta asociada a recetas planificadas
*  ELSE.

  l_lines = lines( lt_rows ).
  l_msg = |Se van a eliminar { l_lines } recetas standard.  ¿Desea continuar?|.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'Borrado de recetas std'
      text_question         = l_msg
      text_button_1         = 'Aceptar'
      icon_button_1         = 'ICON_CHECKED' " 'Aceptar'
      text_button_2         = 'Cancelar'
      icon_button_2         = 'ICON_CANCEL' " 'Cancelar'
      default_button        = '2'
      display_cancel_button = ' '
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  IF lv_answer EQ 1.

    CALL METHOD zclpp_recetas_mp=>borrar_recetas_std
      EXPORTING
        i_werks    = gs_dyn200-werks
        it_recetas = lr_id_recetas.

* Borramos de la tabla ALV los registros de recetas que acabamos de borrar.
    DELETE gt_cab_rec_std WHERE id_receta IN lr_id_recetas.
  ENDIF.

*  ENDIF.

ENDFORM.

FORM borrar_receta_300.

  DATA: lv_answer(1)  TYPE c,
        l_msg         TYPE string,
        lr_id_recetas TYPE zrrid_receta.

  l_msg = |Se va a eliminar la receta { gs_dyn300-id_receta ALPHA = OUT }.  ¿Desea continuar?|.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'Borrado de recetas std'
      text_question         = l_msg
      text_button_1         = 'Aceptar'
      icon_button_1         = 'ICON_CHECKED' " 'Aceptar'
      text_button_2         = 'Cancelar'
      icon_button_2         = 'ICON_CANCEL' " 'Cancelar'
      default_button        = '2'
      display_cancel_button = ' '
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  IF lv_answer EQ 1.
    CLEAR lr_id_recetas.
    lr_id_recetas  = VALUE zrrid_receta( ( sign = 'I' option = 'EQ'  low = gs_dyn300-id_receta ) ).

    CALL METHOD zclpp_recetas_mp=>borrar_recetas_std
      EXPORTING
        i_werks    = gs_dyn200-werks
        it_recetas = lr_id_recetas.

* Borramos de la tabla ALV los registros de recetas que acabamos de borrar.
    DELETE gt_cab_rec_std WHERE id_receta IN lr_id_recetas.
  ENDIF.

  CALL METHOD zclpp_recetas_mp=>obtener_lista_recetas_standard
    EXPORTING
      i_werks            = gs_dyn100-werks
      i_calidad          = gs_dyn100-calidad
    IMPORTING
      ot_cab_recetas_std = gt_cab_rec_std.


ENDFORM.

FORM validar_si_hay_cambios.

  DATA: lv_answer(1) TYPE c,
        l_msg        TYPE string,
        l_haydatos   TYPE flag.

*  clear p_noexit.
* Validamos si se han informado datos.
  IF gs_dyn300-id_receta IS INITIAL AND gt_materia_prima300 IS NOT INITIAL.

    CLEAR l_haydatos.
    LOOP AT gt_materia_prima300 INTO DATA(ls_mp).
      IF ls_mp-kg_ciclo IS NOT INITIAL.
        l_haydatos = 'X'.
        EXIT.
      ENDIF.
    ENDLOOP.
  ELSE.
    LEAVE TO SCREEN 0.
  ENDIF.

  IF ( l_haydatos = 'X' AND gs_dyn300-id_receta IS INITIAL ) OR
        ( gt_mp_backup NE gt_materia_prima300 AND gs_dyn300-id_receta IS NOT  INITIAL ).

    l_msg = |Existen datos sin guardar. ¿Desea salir sin guardar?|.
    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        titlebar              = 'Aviso'
        text_question         = l_msg
        text_button_1         = 'Salir' " 'Aceptar'
        icon_button_1         = 'ICON_PDIR_BACK' " 'Aceptar'
        text_button_2         = 'Guardar' " 'Cancelar'
        icon_button_2         = 'ICON_CANCEL' " 'Cancelar'
        default_button        = '2'
        display_cancel_button = 'X'
      IMPORTING
        answer                = lv_answer
      EXCEPTIONS
        text_not_found        = 1
        OTHERS                = 2.

    CASE lv_answer.
      WHEN '1'. "salir sin guardar
        PERFORM free_grid_container_leave.


      WHEN '2'. "guardar y salir
* Validar descripción.
        IF gs_dyn300-descrip_rec IS INITIAL.
          MESSAGE i319(zpp). "Debe informar kg. de alguno de los materiales de la lista.
          RETURN.
        ENDIF.
        PERFORM save.

        PERFORM free_grid_container_leave.

      WHEN 'A'. " Cancelar, no hacemos nada

      WHEN OTHERS.
    ENDCASE.

  ELSE.
    PERFORM free_grid_container_leave.

  ENDIF.
*


ENDFORM.


FORM detalle_receta_std.

  DATA: lr_selections TYPE REF TO cl_salv_selections.
  DATA: lt_rows    TYPE salv_t_row,
        l_row_parm TYPE int4.

*        lr_id_recetas TYPE zrrid_receta,
*        l_msg         TYPE string.
  DATA l_lines TYPE i.
  DATA: lv_answer(1) TYPE c.

  lr_selections = gs_dyn200-go_alv->get_selections( ).
  lt_rows       = lr_selections->get_selected_rows( ).

* Rellenamos Range para validar el borrado de recetas
  LOOP AT lt_rows INTO DATA(l_row).

*    IF zclpp_recetas_mp=>validar_si_hay_rec_planif( i_receta = gt_cab_rec_std[ l_row ]-id_receta ) = 'X'.
*    l_row_parm = l_row.
*    PERFORM invocar_modif_receta_std USING l_row_parm.

* Volcamos campos del registro seleccionado sobre la pantalla 400
*    ELSE.
** Consulta.
    l_row_parm = l_row.
    PERFORM invocar_consulta_receta_std USING l_row_parm.
*
*    ENDIF.

  ENDLOOP.

ENDFORM.

FORM free_grid_container_leave.

  gs_dyn300-grid->free( ).
  gs_dyn300-container->free( ).
  FREE: gs_dyn300-grid , gs_dyn300-container.
  LEAVE TO SCREEN 0.

ENDFORM.
