*&---------------------------------------------------------------------*
*&  Include           ZRPP0028_O01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.
  SET PF-STATUS '0100'.
  SET TITLEBAR '0100'.


ENDMODULE.                 " STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  PARAMETROS_DE_USUARIO  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE parametros_de_usuario OUTPUT.
  DATA: t_usr05  TYPE STANDARD TABLE OF usr05,
        wa_usr05 TYPE                   usr05.

* obtenemos los parámetros del usuario para rellenar los campos gv_werks
* y gv_arbpl
  SELECT * FROM usr05
    INTO TABLE t_usr05
    WHERE bname = sy-uname.

  IF gv_werks IS INITIAL.
    READ TABLE t_usr05 INTO wa_usr05 WITH KEY parid = 'WRK'.
    IF sy-subrc = 0.
      gv_werks = wa_usr05-parva.
    ENDIF.
  ENDIF.

* Obtener datos del turno actual.
  CALL METHOD zclpp_trazabilidad_usuario=>obtener_datos_turno
    IMPORTING
      o_turno      = gv_turno
      o_desc_turno = gv_rango_horas.

** Trazabilidad operarios 06/2019 CMS ***
* Rellenar desplegable con operarios de este puesto de trabajo


  CALL METHOD zclpp_trazabilidad_usuario=>obtener_operarios_puesto_trab
    EXPORTING
      i_werks       = gv_werks
      i_tp_operario = zclpp_trazabilidad_usuario=>tp_op_ayudanpope
      i_arbpl       = 'MAQ%'
    IMPORTING
      ot_operarios  = DATA(lt_operarios).

  DATA:    lt_list  TYPE vrm_values,
           ls_value LIKE LINE OF lt_list.

  CLEAR lt_list[].
  DELETE ADJACENT DUPLICATES FROM lt_operarios.
  LOOP AT lt_operarios INTO DATA(l_oper).
    CLEAR ls_value.
    ls_value-key  = l_oper.
    TRANSLATE ls_value-key TO UPPER CASE.
    APPEND ls_value TO lt_list.
  ENDLOOP.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GV_NOMBRE_OPER'
      values = lt_list.


* 09/07/2020 CMS - 61914 - Añadir campo contramaestre CMS
  CALL METHOD zclpp_trazabilidad_usuario=>obtener_operarios_puesto_trab
    EXPORTING
      i_werks       = gv_werks
      i_tp_operario = zclpp_trazabilidad_usuario=>tp_op_contramaes
*     i_arbpl       = 'MAQ%'
    IMPORTING
      ot_operarios  = DATA(lt_contramaestres).

  CLEAR lt_list[].
  DELETE ADJACENT DUPLICATES FROM lt_contramaestres.

  LOOP AT lt_contramaestres INTO DATA(l_contram).
    CLEAR ls_value.
    ls_value-key  = l_contram.
    TRANSLATE ls_value-key TO UPPER CASE.
    APPEND ls_value TO lt_list.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GV_NOMBRE_CONTR'
      values = lt_list.

* FIN CMS 09/07/2020

* al campos gv_fecha le ponemos el dia actual
  IF gv_fecha IS INITIAL.
    gv_fecha = sy-datum.
  ENDIF.

ENDMODULE.                 " PARAMETROS_DE_USUARIO  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  HABILITAR_BOTONES  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE habilitar_botones OUTPUT.

  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'GV_WERKS'.
        IF gv_werks IS INITIAL.
          screen-input = '1'.
        ELSE.
          screen-input = '0'.
        ENDIF.

      WHEN 'PLANI'.
        IF gv_werks IS NOT INITIAL AND gv_fecha       IS NOT INITIAL AND
          gv_turno  IS NOT INITIAL AND gv_nombre_oper IS NOT INITIAL.
          screen-active = '1'.
        ELSE.
          screen-active = '0'.
        ENDIF.

      WHEN 'NOTI'.
        IF gv_werks IS NOT INITIAL AND gv_fecha       IS NOT INITIAL AND
          gv_turno  IS NOT INITIAL AND gv_nombre_oper IS NOT INITIAL.
          screen-active = '1'.
        ELSE.
          screen-active = '0'.
        ENDIF.

    ENDCASE.

    MODIFY SCREEN.
  ENDLOOP.
ENDMODULE.                 " HABILITAR_BOTONES  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0200 OUTPUT.
*  SET PF-STATUS '0200'.
*  SET TITLEBAR '0200'.
*
**  PERFORM obtener_prod_turnos.
**  PERFORM mostrar_datos_0200.
*
*
*
*ENDMODULE.                 " STATUS_0200  OUTPUT

MODULE status_0205 OUTPUT.
*  SET PF-STATUS '0200'.
  SET TITLEBAR '0205'.

ENDMODULE.                 " STATUS_0200  OUTPUT


*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0300 OUTPUT.
  SET PF-STATUS '0300'.
  SET TITLEBAR '0300'.

  IF g_dblclick IS INITIAL.
    PERFORM obtener_ordenes_v2.
  ENDIF.

  PERFORM mostrar_datos_0300.

  IF zcl_secuenciador=>gc_time_alv_pope > 0. " g_af_timer GT 0.
    CREATE OBJECT g_timer.
    CREATE OBJECT g_receiver.
    SET HANDLER g_receiver->handle_finished FOR g_timer.
    g_timer->interval = zcl_secuenciador=>gc_time_alv_pope.
    CALL METHOD g_timer->run.
  ENDIF.

ENDMODULE.                 " STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DATOS_0300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_datos_0300 .

  DATA: ls_layout  TYPE lvc_s_layo,
        lt_fcat    TYPE lvc_t_fcat,
        ls_variant TYPE disvariant.

  DATA: lt_tooltips TYPE lvc_t_qinf,
        lt_toolb    TYPE ui_functions.


  IF gr_container_300 IS NOT BOUND.
    CREATE OBJECT gr_container_300
      EXPORTING
        container_name = 'CONTAINER_300'.

    CREATE OBJECT gr_grid_300
      EXPORTING
        i_parent      = gr_container_300
        i_appl_events = 'X'.

    PERFORM fieldcat_300 CHANGING lt_fcat.

    PERFORM layout_300 CHANGING ls_layout.



*   Para los eventos
    CREATE OBJECT g_application_300.


    SET HANDLER g_application_300->handle_toolbar FOR gr_grid_300.
    SET HANDLER g_application_300->handle_user_command FOR gr_grid_300.
    SET HANDLER g_application_300->handle_hotspot_click FOR gr_grid_300.

    PERFORM prepare_layout CHANGING ls_layout.
    PERFORM prepare_variant CHANGING ls_variant.


    PERFORM excluir_botones_300 CHANGING lt_toolb.

    CALL METHOD gr_grid_300->set_table_for_first_display
      EXPORTING
        is_layout            = ls_layout
        it_except_qinfo      = lt_tooltips
        it_toolbar_excluding = lt_toolb
        is_variant           = ls_variant
        i_save               = 'A'
      CHANGING
        it_fieldcatalog      = lt_fcat
        it_outtab            = gt_datos_300.


  ELSE.
    IF g_dblclick IS NOT INITIAL.
      CLEAR g_dblclick.
    ELSE.
      CALL METHOD gr_grid_300->refresh_table_display.
    ENDIF.
  ENDIF.

ENDFORM.                    " MOSTRAR_DATOS_0300
