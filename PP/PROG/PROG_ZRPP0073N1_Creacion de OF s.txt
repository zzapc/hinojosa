*&---------------------------------------------------------------------*
*& Report  ZRPP0073
*&
*&---------------------------------------------------------------------*
*&  Creación de OF's
*&  DTM - 01.02.2022 - 67648
*&---------------------------------------------------------------------*
REPORT zrpp0073n1.

TABLES: ztpp0072.

INCLUDE zrpp0073n1_top.
INCLUDE zrpp0073n1_class.
INCLUDE zrpp0073n1_f01.
INCLUDE zrpp0073n1_status_o01.
INCLUDE zrpp0073n1_user_command.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-003.
PARAMETERS: p_werks LIKE vbap-werks.
SELECT-OPTIONS: s_vdatu FOR vbak-vdatu.
SELECTION-SCREEN END OF BLOCK b1.

INITIALIZATION.

  CLEAR: gv_werks, gv_aaaass, gv_sem, gv_ejer.

* Se establece por defecto el centro del usuario que ejcuta la transacción
  SELECT SINGLE parva FROM usr05
    INTO p_werks
    WHERE bname = sy-uname AND
          parid = 'WRK'.

* Se obtienen los datos de la semana y del año
  CALL FUNCTION 'DATE_GET_WEEK'
    EXPORTING
      date         = sy-datum
    IMPORTING
      week         = gv_aaaass
    EXCEPTIONS
      date_invalid = 1
      OTHERS       = 2.

  IF sy-subrc = 0.

    gv_sem = gv_aaaass+4(2).

  ENDIF.

  gv_ejer = sy-datum(4).

START-OF-SELECTION.

  CLEAR: gv_werks, gv_begda, gv_endda.
  gv_werks = p_werks.
  gv_begda = s_vdatu-low.
  gv_endda = s_vdatu-high.

  CALL METHOD zclpp_creacion_ofs=>instanciar_semana
    EXPORTING
      i_werks      = gv_werks
      i_mjahr      = gv_ejer
      i_semana     = gv_sem
      i_begda      = gv_begda
      i_endda      = gv_endda
    IMPORTING
      or_semana_of = gr_semana_crea_of
      o_rc         = g_rc.

  CALL METHOD zclpp_capacidad_asignada=>instanciar_semana
    EXPORTING
      i_werks   = gv_werks
      i_mjahr   = gv_ejer
      i_semana  = gv_sem
    IMPORTING
      or_semana = gr_semana
      o_rc      = g_rc.

* Validaciones de pantalla de selección
  CASE g_rc.
    WHEN '01'.
      MESSAGE 'Centro incorrecto.' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.
    WHEN '02'.
      MESSAGE 'Año incorrecto.' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.
    WHEN '03'.
      MESSAGE 'Semana incorrecta.' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.
    WHEN OTHERS.
  ENDCASE.

* Se activa el contador para refresco de repartos.
  IF zcl_secuenciador=>gc_time_alv_pope > 0.
    CREATE OBJECT g_timer.
    CREATE OBJECT g_receiver.
    SET HANDLER g_receiver->handle_finished FOR g_timer.
    g_timer->interval = zcl_secuenciador=>gc_time_alv_pope.
    CALL METHOD g_timer->run.
  ENDIF.


  CLEAR: gt_datos_ofs_pend[], gt_datos[]. "gt_datos_sin_asig[] , gt_datos_asig[].
  gt_datos_ofs_pend[] = gr_semana_crea_of->gt_ofs_pend[].
**  gt_datos_sin_asig[] = gr_semana->gt_pedidos_sin_asig[].
**  gt_datos_asig[]     = gr_semana->gt_pedidos_asig[].

  IF gr_semana->gt_pedidos_sin_asig[] IS NOT INITIAL.

    LOOP AT gr_semana->gt_pedidos_sin_asig[] ASSIGNING FIELD-SYMBOL(<lfs_sin_asig>).

      IF gv_begda IS NOT INITIAL AND gv_endda IS NOT INITIAL.

        IF <lfs_sin_asig>-fecha_ent GE gv_begda AND <lfs_sin_asig>-fecha_ent LE gv_endda.

          APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_sin1>).

          <lfs_datos_sin1> = <lfs_sin_asig>.

          SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_sin_asig>-vbeln
          INTO @<lfs_datos_sin1>-vbeln_cli.

        ENDIF.

      ELSEIF gv_begda IS NOT INITIAL AND gv_endda IS INITIAL.

        IF <lfs_sin_asig>-fecha_ent EQ gv_begda.

          APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_sin2>).

          <lfs_datos_sin2> = <lfs_sin_asig>.

          SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_sin_asig>-vbeln
          INTO @<lfs_datos_sin2>-vbeln_cli.

        ENDIF.

      ELSEIF gv_begda IS INITIAL AND gv_endda IS INITIAL.

        APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_sin3>).

        <lfs_datos_sin3> = <lfs_sin_asig>.

        SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_sin_asig>-vbeln
          INTO @<lfs_datos_sin3>-vbeln_cli.

      ENDIF.

    ENDLOOP.

  ENDIF.

  IF gr_semana->gt_pedidos_asig[] IS NOT INITIAL.

    LOOP AT gr_semana->gt_pedidos_asig[] ASSIGNING FIELD-SYMBOL(<lfs_asig>).

      IF gv_begda IS NOT INITIAL AND gv_endda IS NOT INITIAL.

        IF <lfs_asig>-fecha_ent GE gv_begda AND <lfs_asig>-fecha_ent LE gv_endda.

          APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_asig1>).

          <lfs_datos_asig1> = <lfs_asig>.

          SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_asig>-vbeln
          INTO @<lfs_datos_asig1>-vbeln_cli.

        ENDIF.

      ELSEIF gv_begda IS NOT INITIAL AND gv_endda IS INITIAL.

        IF <lfs_asig>-fecha_ent EQ gv_begda.

          APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_asig2>).

          <lfs_datos_asig2> = <lfs_asig>.

          SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_asig>-vbeln
          INTO @<lfs_datos_asig2>-vbeln_cli.

        ENDIF.

      ELSEIF gv_begda IS INITIAL AND gv_endda IS INITIAL.

        APPEND INITIAL LINE TO gt_datos[] ASSIGNING FIELD-SYMBOL(<lfs_datos_asig3>).

        <lfs_datos_asig3> = <lfs_asig>.

        SELECT SINGLE bstnk FROM vbak
            WHERE vbeln EQ @<lfs_asig>-vbeln
          INTO @<lfs_datos_asig3>-vbeln_cli.

      ENDIF.

    ENDLOOP.

  ENDIF.

  CALL SCREEN 100.
