*----------------------------------------------------------------------*
***INCLUDE ZRPP0056_F01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  DROPBOXDOWN_CALIDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM dropboxdown_calidad .

  DATA: lt_list  TYPE vrm_values,
        ls_value LIKE LINE OF lt_list.

  CALL METHOD zclpp_recetas_mp=>obtener_calidades_receta_std
    EXPORTING
      i_werks      = gs_dyn100-werks
    IMPORTING
      ot_calidades = DATA(lt_calidades).

  CLEAR lt_list[].
  LOOP AT lt_calidades INTO DATA(ls_calidad).
    CLEAR ls_value.
    ls_value-key   = ls_calidad-zcalidad.
    ls_value-text  = ls_calidad-descrip.
    APPEND ls_value TO lt_list.
  ENDLOOP.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN100-CALIDAD'
      values = lt_list.


ENDFORM.

FORM dropboxdown_contramaestre.

  DATA: lt_list  TYPE vrm_values,
        ls_value LIKE LINE OF lt_list.

* Rellenar desplegable con operarios de este puesto de trabajo
  CALL METHOD zclpp_trazabilidad_usuario=>obtener_operarios_puesto_trab
    EXPORTING
      i_werks       = gs_dyn100-werks
      i_tp_operario = zclpp_trazabilidad_usuario=>tp_op_contramaes
    IMPORTING
      ot_operarios  = DATA(lt_operarios).

  CLEAR lt_list[].
  DELETE ADJACENT DUPLICATES FROM lt_operarios.
  LOOP AT lt_operarios INTO DATA(ls_oper).
    CLEAR ls_value.
*    ls_value-key   = ls_oper-zcalidad.
*    ls_value-text  = ls_oper.
    ls_value-key  = ls_oper.
    APPEND ls_value TO lt_list.
  ENDLOOP.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN100-CONTRAMA'
      values = lt_list.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  OBTENER_SOCIEDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_sociedad .

  gs_dyn100-werks = zclpp_recetas_mp=>obtener_sociedad_usuario( ).

ENDFORM.

*FORM invocar_alta_receta_std.
*
*  PERFORM limpiar_pantalla_300.
*
*  gs_dyn300-werks   = gs_dyn100-werks.
*  gs_dyn300-calidad = gs_dyn100-calidad.
**
*** Obtenemos descriptivo de la calidad.
*  SELECT SINGLE descrip
*    INTO  @gs_dyn300-descrip
*    FROM ztpp0035
*    WHERE zcalidad = @gs_dyn300-calidad.
**
*  g_tp_300 = 'A'.
*  CALL SCREEN 300.
*
*ENDFORM.

FORM invocar_modif_receta_std USING p_row TYPE int4.

*  PERFORM limpiar_pantalla_300.
*
*
** Obtenemos descriptivo de la calidad.
*  SELECT SINGLE descrip
*    INTO  @gs_dyn300-descrip
*    FROM ztpp0035
*    WHERE zcalidad = @gs_dyn300-calidad.
*
*  TRY.
*
*      CLEAR gs_dyn300.
*      gs_dyn300-werks         = gs_dyn200-werks.
*      gs_dyn300-calidad       = gs_dyn200-calidad.
*      gs_dyn300-descrip       = gs_dyn200-descrip.
*
*      gs_dyn300-id_receta     = gt_cab_rec_mp[ p_row ]-id_receta.
*      gs_dyn300-descrip_rec   = gt_cab_rec_mp[ p_row ]-descrip_rec.
*      gs_dyn300-fecha         = gt_cab_rec_mp[ p_row ]-fecha_reg.
*      gs_dyn300-hora          = gt_cab_rec_mp[ p_row ]-hora_reg.


*    CATCH cx_root .
*  ENDTRY.

*  CALL METHOD zclpp_recetas_mp=>obtener_posiciones_rec_std
*    EXPORTING
*      i_id_receta_std = gs_dyn300-id_receta
*    IMPORTING
*      ot_lista_mp     = gt_materia_prima300.

*  g_tp_300 = 'M'.
*  CALL SCREEN 0300.


ENDFORM.

FORM invocar_consulta_receta_std USING p_row TYPE int4.

  READ TABLE gt_popup_rec_std INTO DATA(ls) INDEX p_row.
  IF sy-subrc = 0.

    SET PARAMETER ID: 'ZID_RECETA' FIELD ls-id_receta,
                      'ZWERKS'     FIELD ls-werks.


    CALL TRANSACTION 'ZPP0049_CON_STD'.

* Limpiamos campos del "SET PARAMETER"
    SET PARAMETER ID: 'ZID_RECETA' FIELD space,
                      'ZWERKS'     FIELD space.
  ENDIF.


ENDFORM.
FORM invocar_consulta_receta_mp USING p_werks     TYPE werks_d
                                      p_id_receta TYPE zid_receta.

  PERFORM limpiar_pantalla_300.

*  CALL METHOD zclpp_recetas_mp=>obtener_posiciones_rec_std
*    EXPORTING
*      i_id_receta_std = gs_dyn300-id_receta
*    IMPORTING
*      ot_lista_mp     = gt_materia_prima300.
  g_rec_cons = p_id_receta.
  g_tp_300 = 'C'.
  CALL SCREEN 0300.
*

ENDFORM.

FORM limpiar_pantalla_300.

  CLEAR: gt_materia_prima300[], gs_dyn300. ", g_tp_300.

ENDFORM.


FORM consulta_recetas.

  gs_dyn200-werks   = gs_dyn100-werks.
*  gs_dyn200-calidad = gs_dyn100-calidad.
*  gs_dyn200-descrip = zclpp_recetas_mp=>obtener_descr_calidad(
*                                          i_werks   = gs_dyn200-werks
*                                          i_calidad = gs_dyn200-calidad  ).
  CALL SCREEN 200.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GENERAR_ALV_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM generar_alv_200 .

  DATA:     ls_lvc_s_layo        TYPE lvc_s_layo.

  IF gs_dyn200-container IS NOT BOUND.

    CREATE OBJECT gs_dyn200-container
      EXPORTING
        container_name              = 'GS_DYN200-CONTAINER'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.

        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn200-container
            container_name = 'GS_DYN200-CONTAINER'
          IMPORTING
            r_salv_table   = gs_dyn200-go_alv
          CHANGING
            t_table        = gt_cab_rec_mp_200.
      CATCH cx_root .
    ENDTRY.

    PERFORM formato_cols_200.

*
**... §3 Functions
    DATA: lr_functions TYPE REF TO cl_salv_functions_list,
          l_text       TYPE string.
*
** Grabar disposición.
    CLEAR lv_key.
    lv_key-report         = sy-repid.
*    lv_key-logical_group  = '2'.
    lv_key-handle         = 'A'.
    lo_layout = gs_dyn200-go_alv->get_layout( ).
    lo_layout->set_key( lv_key ).
    lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
    lo_layout->set_default( abap_true ).
**... §3.1 activate ALV generic Functions
    lr_functions = gs_dyn200-go_alv->get_functions( ).
    lr_functions->set_all( 'X' ).


* Formateo de columnas.
    DATA:
      lo_column  TYPE REF TO cl_salv_column,
      lo_columns TYPE REF TO cl_salv_columns_table.

    lo_columns = gs_dyn200-go_alv->get_columns( ).
    lo_column = lo_columns->get_column( 'ID_RECETA' ).
    lo_column->set_short_text( 'Receta' ).
    lo_column = lo_columns->get_column( 'DESCRIP_REC' ).
    lo_column->set_long_text( 'Desc. receta' ).
    lo_column = lo_columns->get_column( 'DESCR_CALIDAD' ).
    lo_column->set_long_text( 'Desc. calidad' ).
    lo_column = lo_columns->get_column( 'CONTR_INS' ).
    lo_column->set_long_text( 'Operario' ).
    lo_column = lo_columns->get_column( 'OBSERVACIONES' ).
    lo_column->set_long_text( 'Observaciones' ).
    lo_column->set_long_text( 'Observaciones' ).
    lo_column = lo_columns->get_column( 'CONTR_INS' ).
    lo_column->set_long_text( 'Operario' ).
    lo_column = lo_columns->get_column( 'FECHA_UPD' ).
    lo_column->set_long_text( 'Fecha modif.' ).
    lo_column = lo_columns->get_column( 'HORA_UPD' ).
    lo_column->set_long_text( 'Hora modif.' ).

    TRY.
        l_text = text-b03.
        lr_functions->add_function(
          name     = 'DETALLE'
          icon     = '@0S@'
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.
    TRY.
        l_text = text-b05.
        lr_functions->add_function(
          name     = 'LOTES'
          icon     = '@EL@'
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.

*    TRY.
*        l_text = text-b06.
*        lr_functions->add_function(
*          name     = 'EDIT'
*          icon     = '@0Z@'
*          text     = l_text
*          tooltip  = l_text
*          position = if_salv_c_function_position=>right_of_salv_functions ).
*      CATCH cx_salv_wrong_call cx_salv_existing.
*    ENDTRY.

    TRY.
        l_text = text-b02.
        lr_functions->add_function(
          name     = 'BORRAR'
          icon     = '@11@'
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.

    TRY.
        l_text = text-b04.
        lr_functions->add_function(
          name     = 'IMPRIMIR'
          icon     = '@0X@'
          text     = l_text
          tooltip  = l_text
          position = if_salv_c_function_position=>right_of_salv_functions ).
      CATCH cx_salv_wrong_call cx_salv_existing.
    ENDTRY.

    gs_dyn200-go_alv->display( ).
  ELSE.
    gs_dyn200-go_alv->refresh( ).
  ENDIF.

ENDFORM.

FORM obtener_datos_200.

* Obtención de registros de recetas planificadas de MP
  CALL METHOD zclpp_recetas_mp=>obtener_lista_recetas_mp
    EXPORTING
      i_werks           = gs_dyn100-werks
      i_calidad         = gs_dyn100-calidad
      i_contrama        = gs_dyn100-contrama
      i_up_to           = gs_dyn200-up_to
    IMPORTING
      ot_cab_recetas_mp = gt_cab_rec_mp_200.

ENDFORM.

FORM aplicar_colores_200.
  DATA: gs_colinfo TYPE LINE OF lvc_t_scol.

  LOOP AT gt_cab_rec_mp_200 ASSIGNING FIELD-SYMBOL(<fs>).
    CLEAR <fs>-color[]. " Borramos el color por si el nuevo valor es 0

    CASE zclpp_recetas_mp=>obtener_temporalidad_receta(
              i_fecha_ini = <fs>-fecha_ini
              i_hora_ini  = <fs>-hora_ini
              i_fecha_fin = <fs>-fecha_fin
              i_hora_fin  = <fs>-hora_fin
                                                        ).
      WHEN 'F'.
        CLEAR gs_colinfo.
        PERFORM colorer_celda USING ' ' '3' "Amarillo
                              CHANGING gs_colinfo.
        APPEND gs_colinfo TO <fs>-color.


      WHEN 'A'.
        CLEAR gs_colinfo.
        PERFORM colorer_celda USING ' ' '5' "Verde
                              CHANGING gs_colinfo.
        APPEND gs_colinfo TO <fs>-color.

      WHEN OTHERS.
    ENDCASE.

  ENDLOOP.

ENDFORM.


FORM formato_cols_200.


*... set the columns technical
  DATA: lr_columns  TYPE REF TO cl_salv_columns,
        lr_cols_tab TYPE REF TO cl_salv_columns_table,
        lr_column   TYPE REF TO cl_salv_column_table.



  lr_columns = gs_dyn200-go_alv->get_columns( ).
  lr_cols_tab = gs_dyn200-go_alv->get_columns( ).
  lr_columns->set_optimize( 'X' ).

* Definir columna color.
  TRY.
      lr_cols_tab->set_color_column( 'COLOR' ).
    CATCH cx_salv_data_error.                           "#EC NO_HANDLER
  ENDTRY.




*... §6 register to the events of cl_salv_table
  DATA: lr_events TYPE REF TO cl_salv_events_table.

  lr_events = gs_dyn200-go_alv->get_event( ).

  CREATE OBJECT gr_events.
*
*... §6.1 register to the event USER_COMMAND
  SET HANDLER gr_events->on_user_command FOR lr_events.

*... §7 selections
  DATA: lr_selections TYPE REF TO cl_salv_selections,
        lt_rows       TYPE salv_t_row,
        lt_column     TYPE salv_t_column,
        ls_cell       TYPE salv_s_cell.

  lr_selections = gs_dyn200-go_alv->get_selections( ).

*... §7.1 set selection mode
  lr_selections->set_selection_mode( if_salv_c_selection_mode=>multiple ).

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MANDT' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'WERKS' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ZCALIDAD' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FECHA_INS' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'HORA_INS' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CONTRAMAESTRE' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CONTR_INS' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CONTR_UPD' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

*    TRY.
*        lr_column ?= lr_columns->get_column( columnname = 'CONTR_INS' ).
*        lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
*      CATCH cx_salv_not_found .
*    ENDTRY.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GENERAR_ALV_300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos_300.

*  PERFORM limpiar_pantalla_300.

  IF g_rec_popup IS NOT INITIAL.  "Carga desde popup rec.STD
    CALL METHOD zclpp_recetas_mp=>obtener_datos_receta_std
      EXPORTING
        i_werks        = gs_dyn100-werks
        i_id_receta    = g_rec_popup
      IMPORTING
        o_cab_rec_std  = DATA(ls_zpp0038)
        ot_pos_rec_std = gt_materia_prima300[].

    CLEAR g_rec_popup.

  ELSEIF g_rec_popup_mp IS NOT INITIAL. " Despues de selección de popup de rec.MP, CARGAR SUS MATERIALES

* Obtener posiciones. Llamamos a este método para obtener toda la lista de MP con kg.informados donde toca
    CALL METHOD zclpp_recetas_mp=>obtener_posiciones_receta
      EXPORTING
        i_werks         = gs_dyn100-werks
        i_id_receta_std = g_rec_popup_mp
      IMPORTING
        ot_lista_mp     = gt_materia_prima300[].

    CLEAR g_rec_popup_mp.

  ELSEIF g_rec_cons IS NOT INITIAL. "Consulta de receta MP

*    CLEAR: g_con_consumo.
    PERFORM cargar_datos_consulta.
    CLEAR: g_rec_cons.

  ELSE. " Carga del alta.
* Si la tabla está vacía: Cargar datos con lista MP y kg. a Ceros.
    IF gt_materia_prima300[] IS INITIAL AND
       gt_materia_prima300_c[] IS INITIAL.
      CALL METHOD zclpp_recetas_mp=>obtener_lista_mp
        EXPORTING
          i_werks     = gs_dyn100-werks
        IMPORTING
          ot_lista_mp = gt_materia_prima300[].

      gs_dyn300-werks     = gs_dyn100-werks.
      gs_dyn300-zcalidad  = gs_dyn100-calidad.
      gs_dyn300-contrama  = gs_dyn100-contrama.
      gs_dyn300-descrip_cali = zclpp_recetas_mp=>obtener_descr_calidad( i_werks = gs_dyn300-werks
                                                                        i_calidad = gs_dyn300-zcalidad  ).

    ENDIF.

  ENDIF.

ENDFORM.

FORM cargar_datos_consulta.

  CALL METHOD zclpp_recetas_mp=>obtener_datos_form_receta_mp
    EXPORTING
      i_werks                 = gs_dyn100-werks
      i_id_receta             = g_rec_cons
    IMPORTING
      os_datos_form_receta_mp = DATA(ls_datos_receta)
      o_rc                    = DATA(l_rc).


  CALL METHOD zclpp_recetas_mp=>obtener_temporalidad_receta
    EXPORTING
      i_fecha_ini = ls_datos_receta-fecha_ini
      i_hora_ini  = ls_datos_receta-hora_ini
      i_fecha_fin = ls_datos_receta-fecha_fin
      i_hora_fin  = ls_datos_receta-hora_fin
    RECEIVING
      r_return    = DATA(l_ret).

  CASE l_ret.
    WHEN 'A' OR 'P'.


      CLEAR: gt_materia_prima300_c[].
      g_tp_300 = 'P'.
      CALL METHOD zclpp_consumo_recetas_mp=>obtener_datos_receta_consumida
        EXPORTING
          i_werks                 = gs_dyn100-werks
          i_id_receta             = g_rec_cons
          i_filtro_fecha_pulper   = abap_true "no haria falta, ya que no se llama con fecha
          i_t1                    = 'X'
          i_t2                    = 'X'
          i_t3                    = 'X'
        IMPORTING
          os_datos_form_receta_mp = DATA(ls_datos_rec)
          ot_datos_consumo        = gt_materia_prima300_c
          o_rc                    = DATA(l_rc2).

      IF l_rc2 = '00'.
        gs_dyn300-werks          = gs_dyn100-werks.
        gs_dyn300-id_receta      = ls_datos_rec-id_receta.
        gs_dyn300-descrip_rec    = ls_datos_rec-descr_rec.
        gs_dyn300-observaciones  = ls_datos_rec-observaciones.
        gs_dyn300-contrama       = ls_datos_rec-contramaestre.
        gs_dyn300-zcalidad       = ls_datos_rec-zcalidad.
        gs_dyn300-fecha_ini      = ls_datos_rec-fecha_ini.
        gs_dyn300-fecha_fin      = ls_datos_rec-fecha_fin.
        gs_dyn300-hora_ini       = ls_datos_rec-hora_ini.
        gs_dyn300-hora_fin       = ls_datos_rec-hora_fin.
        gs_dyn300-cod_motivo     = ls_datos_rec-cod_motivo.
        gs_dyn300-descrip_cali   = zclpp_recetas_mp=>obtener_descr_calidad( i_werks   = gs_dyn100-werks
                                                                            i_calidad = gs_dyn300-zcalidad ).
      ELSEIF l_rc2 = '01'.
        g_tp_300 = 'C'.
        gt_materia_prima300[] = CORRESPONDING #( ls_datos_receta-t_materiales_mp[] ).

        gs_dyn300-werks          = gs_dyn100-werks.
        gs_dyn300-id_receta      = ls_datos_receta-id_receta.
        gs_dyn300-descrip_rec    = ls_datos_receta-descr_rec.
        gs_dyn300-observaciones  = ls_datos_receta-observaciones.
        gs_dyn300-contrama       = ls_datos_receta-contramaestre.
        gs_dyn300-zcalidad       = ls_datos_receta-zcalidad.
        gs_dyn300-fecha_ini      = ls_datos_receta-fecha_ini.
        gs_dyn300-fecha_fin      = ls_datos_receta-fecha_fin.
        gs_dyn300-hora_ini       = ls_datos_receta-hora_ini.
        gs_dyn300-hora_fin       = ls_datos_receta-hora_fin.
        gs_dyn300-cod_motivo     = ls_datos_receta-cod_motivo.
        gs_dyn300-descrip_cali   = zclpp_recetas_mp=>obtener_descr_calidad( i_werks   = gs_dyn100-werks
                                                                            i_calidad = gs_dyn300-zcalidad ).
      ENDIF.



    WHEN 'F'.
      g_tp_300 = 'C'.
      gt_materia_prima300[] = CORRESPONDING #( ls_datos_receta-t_materiales_mp[] ).

      gs_dyn300-werks          = gs_dyn100-werks.
      gs_dyn300-id_receta      = ls_datos_receta-id_receta.
      gs_dyn300-descrip_rec    = ls_datos_receta-descr_rec.
      gs_dyn300-observaciones  = ls_datos_receta-observaciones.
      gs_dyn300-contrama       = ls_datos_receta-contramaestre.
      gs_dyn300-zcalidad       = ls_datos_receta-zcalidad.
      gs_dyn300-fecha_ini      = ls_datos_receta-fecha_ini.
      gs_dyn300-fecha_fin      = ls_datos_receta-fecha_fin.
      gs_dyn300-hora_ini       = ls_datos_receta-hora_ini.
      gs_dyn300-hora_fin       = ls_datos_receta-hora_fin.
      gs_dyn300-cod_motivo     = ls_datos_receta-cod_motivo.
      gs_dyn300-descrip_cali   = zclpp_recetas_mp=>obtener_descr_calidad( i_werks   = gs_dyn100-werks
                                                                          i_calidad = gs_dyn300-zcalidad ).

    WHEN OTHERS.
  ENDCASE.


ENDFORM.

FORM generar_alv_300 .

  DATA: fieldcatalog TYPE slis_t_fieldcat_alv WITH HEADER LINE.
  DATA: wa_fieldcat          TYPE lvc_s_fcat,
        ls_lvc_s_layo        TYPE lvc_s_layo,
        lt_toolbar_excluding TYPE ui_functions,
        ls_variant           TYPE disvariant.

  IF gs_dyn300-container IS NOT BOUND.

    CREATE OBJECT gs_dyn300-container
      EXPORTING
        container_name = 'GS_DYN300-CONTAINER'.

    CREATE OBJECT gs_dyn300-grid
      EXPORTING
        i_parent      = gs_dyn300-container
        i_appl_events = 'X'.

    PERFORM prepare_fieldcat_300 CHANGING gt_fieldcat300.
    PERFORM prepare_layout       CHANGING ls_lvc_s_layo.
    PERFORM toolbar_excluding    CHANGING lt_toolbar_excluding.
    PERFORM prepare_variant      CHANGING ls_variant.

    CREATE OBJECT g_application.
    SET HANDLER g_application->handle_user_command FOR gs_dyn300-grid.
    SET HANDLER g_application->handle_toolbar      FOR gs_dyn300-grid.

    IF g_tp_300 = 'A'.
      SET HANDLER g_application->handle_data_changed FOR gs_dyn300-grid.
    ENDIF.

    IF g_tp_300 = 'A' OR g_tp_300 = 'C' .

      CALL METHOD gs_dyn300-grid->set_table_for_first_display
        EXPORTING
          i_buffer_active      = ' '
          i_bypassing_buffer   = 'X'
          is_layout            = ls_lvc_s_layo
          it_toolbar_excluding = lt_toolbar_excluding
          i_structure_name     = 'ZSPP0056_ALV300'
          is_variant           = ls_variant
          i_save               = 'A'
        CHANGING
          it_outtab            = gt_materia_prima300[]
          it_fieldcatalog      = gt_fieldcat300[].
    ELSE.
*      cargar tabla con resultados pistolas.........
      CALL METHOD gs_dyn300-grid->set_table_for_first_display
        EXPORTING
          i_buffer_active      = ' '
          i_bypassing_buffer   = 'X'
          is_layout            = ls_lvc_s_layo
          it_toolbar_excluding = lt_toolbar_excluding
          i_structure_name     = 'ZSPP0056_ALV300'
          is_variant           = ls_variant
          i_save               = 'A'
        CHANGING
          it_outtab            = gt_materia_prima300_c[]
          it_fieldcatalog      = gt_fieldcat300[].

    ENDIF.
    CALL METHOD gs_dyn300-grid->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified
      EXCEPTIONS
        error      = 1
        OTHERS     = 2.

    gs_dyn200-up_to = 50.
  ELSE.
    PERFORM refrescar_alv_300.
  ENDIF.

ENDFORM.


FORM refrescar_alv_300.
  DATA: ls_layout TYPE lvc_s_layo,
        ls_stable TYPE lvc_s_stbl.

* Sacamos el layout del ALV
  CALL METHOD gs_dyn300-grid->get_frontend_layout
    IMPORTING
      es_layout = ls_layout.

* Ponemos de nuevo que optimice las columnas
  ls_layout-cwidth_opt = 'X'.

* Cargamos de nuevo el layout
  CALL METHOD gs_dyn300-grid->set_frontend_layout
    EXPORTING
      is_layout = ls_layout.

* Refrescamos el ALV
  ls_stable-row = 'X'.
  ls_stable-col = 'X'.

  CALL METHOD gs_dyn300-grid->refresh_table_display
    EXPORTING
      is_stable = ls_stable.

ENDFORM.



FORM aplicar_colores_300.
  DATA: gs_colinfo TYPE LINE OF lvc_t_scol.

  LOOP AT gt_materia_prima300 ASSIGNING FIELD-SYMBOL(<fs>).
    DELETE <fs>-color WHERE fname = 'KG_CICLO'. " Borramos el color por si el nuevo valor es 0

    IF <fs>-kg_ciclo > 0.
      CLEAR gs_colinfo.
      PERFORM colorer_celda USING 'KG_CICLO' '5' "Verde
                            CHANGING gs_colinfo.
      APPEND gs_colinfo TO <fs>-color.

    ENDIF.
  ENDLOOP.

ENDFORM.

FORM desplegar_motivo.

  DATA: lt_list  TYPE vrm_values,
        ls_value LIKE LINE OF lt_list.

  LOOP AT zclpp_recetas_mp=>gt_motivos INTO DATA(ls_mot).
    CHECK ls_mot-werks = gs_dyn100-werks.
    CLEAR ls_value.
    ls_value-key   = ls_mot-cod_motivo.
    ls_value-text  = ls_mot-desc_motivo.
    APPEND ls_value TO lt_list.
  ENDLOOP.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN300-COD_MOTIVO'
      values = lt_list.


ENDFORM.


FORM colorer_celda  USING    p_columna  TYPE lvc_fname
                             p_color    TYPE int1
                    CHANGING ls_cellcolor TYPE lvc_s_scol.


  CLEAR ls_cellcolor.
  ls_cellcolor-fname = p_columna. "ls_mod_cells-fieldname.
  ls_cellcolor-color-col = p_color. "'6' .
  ls_cellcolor-color-int = '0'.

ENDFORM.                    " COLORER_CELDA

FORM prepare_fieldcat_300 CHANGING ct_fieldcat TYPE lvc_t_fcat.

  DATA: lt_fieldcat TYPE lvc_t_fcat.
  DATA: ls_fcat     TYPE lvc_s_fcat.
  DATA: lv_ind      TYPE i.

* Recuperamos el catálogo de campos
*  CASE g_tp_300. " Tabla sin consumos
*    WHEN 'A' OR 'C'.

  IF g_tp_300 = 'P'.
    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name = 'ZSPP0057_ALV300'
      CHANGING
        ct_fieldcat      = lt_fieldcat.

  ELSE.
    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name = 'ZSPP0056_ALV300'
      CHANGING
        ct_fieldcat      = lt_fieldcat.

  ENDIF.

* Los cargamos en el catálogo de campos global
  ct_fieldcat[] = lt_fieldcat[].

* Recorremos el catálogo de campos modificandolo
  LOOP AT ct_fieldcat INTO ls_fcat.
    lv_ind = sy-tabix.
    CASE ls_fcat-fieldname.
      WHEN 'MAKTX'.
        ls_fcat-coltext       = 'Desc. material'.
      WHEN 'KG_CICLO'.
        IF g_tp_300 = 'A'.
          ls_fcat-edit          = 'X'.
*          ls_fcat-QUANTITY      = 'KG'.
*          ls_fcat-QFIELDNAME      = 'MEINS'.
        ENDIF.
        ls_fcat-inttype       = 'I'.
        ls_fcat-just          = 'R'.
        ls_fcat-decimals_o    = '0'.
        ls_fcat-coltext       = 'Kg. ciclo'.
      WHEN 'PORC_CICLO' .
        ls_fcat-inttype = 'I'.
        ls_fcat-just    = 'R'.
        ls_fcat-coltext       = '% ciclo'.
        ls_fcat-decimals_o    = '0'.
      WHEN 'PORC_REAL'.
        ls_fcat-inttype = 'I'.
        ls_fcat-just    = 'R'.
        ls_fcat-coltext       = '% real'.
        ls_fcat-decimals_o    = '0'.
*        ls_fcat-edit_mask = '-__'.
      WHEN 'PORC_DIF'.
        ls_fcat-inttype = 'I'.
        ls_fcat-just    = 'R'.
        ls_fcat-coltext       = '% dif'.
        ls_fcat-decimals_o    = '0'.
*        ls_fcat-edit_mask = '-__'.
      WHEN 'KG_REALES'.
        ls_fcat-inttype       = 'I'.
        ls_fcat-just          = 'R'.
        ls_fcat-decimals_o    = '0'.
        ls_fcat-coltext       = 'Kg  real'.
      WHEN 'TOLERANCIA'.
        ls_fcat-inttype       = 'I'.
        ls_fcat-just          = 'R'.
        ls_fcat-decimals_o    = '0'.
        ls_fcat-coltext       = 'Tolerancia'.
      WHEN 'IND_EQUIV'.
        ls_fcat-no_out = 'X'.
      WHEN 'KO'.
        ls_fcat-coltext       = 'Desv'.

*     WHEN 'ZZEBELN1' OR 'ZZEBELN2' OR 'ZZEBELN3'.
*        ls_fcat-no_out = gc_true.
*        ls_fcat-just = 'C'.
*        ls_fcat-just    = 'R'.
*        ls_fcat-hotspot = 'X'.
    ENDCASE.
* Modificamos el catálogo
    MODIFY ct_fieldcat FROM ls_fcat INDEX lv_ind.
  ENDLOOP.

ENDFORM.                    " prepare_fielcat

FORM prepare_layout CHANGING ls_lvc_s_layo TYPE lvc_s_layo.

* Para que muestre el ancho de las columnas optimizado
  ls_lvc_s_layo-cwidth_opt = 'X'.
*  ls_lvc_s_layo-sel_mode   = 'A'.
*  ls_lvc_s_layo-sel_mode   = 'C'.
  ls_lvc_s_layo-zebra = 'X'.
  ls_lvc_s_layo-ctab_fname = 'COLOR'.     "Enlazamos el campo en el layout

ENDFORM.                    " ALV_PREPARE_LAYOUT

FORM prepare_variant CHANGING ps_variant TYPE disvariant .

  CLEAR ps_variant.
  ps_variant-report = sy-repid.

  CASE g_tp_300. " Tabla sin consumos
    WHEN 'A' OR 'C'.
      ps_variant-handle = '3'.
    WHEN 'P'.
      ps_variant-handle = '4'.
  ENDCASE.

ENDFORM.                    "alv_prepare_variant

FORM toolbar_excluding CHANGING lt_toolbar TYPE ui_functions.

  DATA: ls_exclude TYPE ui_func.
  REFRESH: lt_toolbar.

*********************************************************************mc_fc_check
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_check.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_cut
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_cut.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_copy
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_copy.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_paste
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_paste.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_paste_new_row
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_paste_new_row.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_undo
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_undo.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_append_row
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_append_row.
  APPEND ls_exclude TO lt_toolbar.
*********************************************************************mc_fc_loc_insert_row
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_insert_row.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_delete_row
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_delete_row.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_loc_copy_row
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_copy_row.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_sort_asc
*  CLEAR ls_exclude.
*  ls_exclude = cl_gui_alv_grid=>mc_mb_sum.
*  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_subtot
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_subtot.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_print
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_print.
  APPEND ls_exclude TO lt_toolbar.
**********************************************************************mc_fc_views
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_views.
  APPEND ls_exclude TO lt_toolbar.
*********************************************************************mc_mb_export
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_graph.
  APPEND ls_exclude TO lt_toolbar.
*********************************************************************mc_fc_info
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_info.
  APPEND ls_exclude TO lt_toolbar.

*********************************************************************mc_fc_info
  CLEAR ls_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_refresh.
  APPEND ls_exclude TO lt_toolbar.


ENDFORM.                    "alv_toolbar_excluding

FORM save USING l_rc TYPE char02.

* Validar descripción de receta
  IF gs_dyn300-descrip_rec IS INITIAL.
    MESSAGE i319(zpp). "No se permite crear una receta sin descripción.
    RETURN.
  ENDIF.

  IF gs_dyn300-cod_motivo IS INITIAL.
    MESSAGE i342(zpp). "No se permite crear una receta sin motivo..
    RETURN.
  ENDIF.

*Validamos que hayan datos informados en el ALV
  IF zclpp_recetas_mp=>validar_tabla_ko_a_cero( it_lista_mp = gt_materia_prima300 ) = ' '.
    MESSAGE i326(zpp). "No hay kg.informados, importe una receta válida.
    RETURN.
  ENDIF.

  CALL METHOD zclpp_recetas_mp=>validar_fechas_alta_rec_mp
    EXPORTING
      i_werks     = gs_dyn300-werks
      i_fecha     = gs_dyn300-fecha_ini
      i_hora      = gs_dyn300-hora_ini
    IMPORTING
      o_return    = l_rc
      o_ult_fecha = DATA(l_ult_fecha)
      o_ult_hora  = DATA(l_ult_hora).

  CASE  l_rc.
    WHEN '01'.
      MESSAGE i327(zpp)."Obligatorio informar fecha y hora iniciales de planificación.
      RETURN.
    WHEN '02'.
      MESSAGE i331(zpp). " No se permite crear recetas MP con fecha/hora de validez en el pasado.
      RETURN.
    WHEN '03'.
      MESSAGE i339(zpp) WITH l_ult_fecha l_ult_hora. " Ya existe una receta MP con fecha inicio & y hora &
      RETURN.
  ENDCASE.

* Grabación receta y ajuste de solape de fechas
  CHECK l_rc = '00'.
  CALL METHOD zclpp_recetas_mp=>guardar_receta_mp
    EXPORTING
      i_id_receta     = gs_dyn300-id_receta
      i_werks         = gs_dyn300-werks
      i_calidad       = gs_dyn300-zcalidad
      i_descrip_rec   = gs_dyn300-descrip_rec
      i_observaciones = gs_dyn300-observaciones
      i_fecha_ini     = gs_dyn300-fecha_ini
      i_hora_ini      = gs_dyn300-hora_ini
      i_contrama      = gs_dyn300-contrama
      i_cod_motivo    = gs_dyn300-cod_motivo
      it_pos_kg_mp    = gt_materia_prima300
    IMPORTING
      o_id_receta     = gs_dyn300-id_receta
      o_rc            = l_rc.
  IF l_rc = '00'.
    MESSAGE s338(zpp) WITH gs_dyn300-id_receta
                           gs_dyn300-fecha_ini
                           gs_dyn300-hora_ini. " Receta & planificada para el dia & hora &.

*APC20240521 Envío mail tras generación receta.
    SELECT SINGLE clave FROM zap_mail_log " Esto es para enviarlo sólo una vez
      INTO @DATA(l_clave)
     WHERE clave = @gs_dyn300-id_receta
       AND grupo = 'PAPELERA'
       AND codigo = 'AVISO'.
    IF sy-subrc NE 0.
      DATA(o_par_mail) = NEW zcl_ap_parametros( clave = 'ZPP0061' ).
      IF o_par_mail->existe_i( campo = 'CENTRO_MAIL' valor = gs_dyn300-werks  ).
        DATA(l_dest) = o_par_mail->get_lista( campo = 'DESTINO_MAIL'
                                              valor = CONV #( gs_dyn300-werks )
                                              columna = 'VALOR2' ).
        IF NOT l_dest IS INITIAL.
          DATA: l_hora(8),
                i_var     TYPE apb_lpd_t_key_value,
                l_pdf     TYPE zxstring.

          WRITE gs_dyn300-hora_ini TO l_hora.
          READ TABLE zclpp_recetas_mp=>gt_motivos INTO DATA(ls_mot) WITH KEY cod_motivo = gs_dyn300-cod_motivo.
          i_var = VALUE #( ( key = '{ZID_RECETA}' value = |{ gs_dyn300-id_receta ALPHA = OUT }| )
                           ( key = '{ZFECHA_PROG}' value = |{ gs_dyn300-fecha_ini DATE = USER }| )
                           ( key = '{WERKS_D}' value = |{ gs_dyn300-werks }| )
                           ( key = '{ZZCALIDAD}' value = gs_dyn300-zcalidad )
                           ( key = '{ZDESCRIPCION}' value = gs_dyn300-descrip_cali )
                           ( key = '{ZDESC_MOT_REC}' value = ls_mot-desc_motivo )
                           ( key = '{ZHORA_PROG}' value = l_hora(5) )
                           ( key = '{ZDESCRIP_REC}' value = gs_dyn300-descrip_rec  )
                           ( key = '{ZOBSERVACIONES}' value = gs_dyn300-observaciones  )
                         ).

          CALL FUNCTION 'ZMFPP_FORM_RECETA_MP'
            EXPORTING
              i_werks     = gs_dyn300-werks
              i_id_receta = gs_dyn300-id_receta
              get_pdf     = 'X'
            IMPORTING
              pdf         = l_pdf.
          IF NOT l_pdf IS INITIAL.
            DATA(l_nombre_pdf) = |Receta { gs_dyn300-werks } { gs_dyn300-id_receta }.pdf|.

            zcl_ap_envio_mail=>mail( EXPORTING grupo = 'PAPELERA'
                                     codigo = 'AVISO'
                                     direccion = l_dest
                                     variables = i_var
                                     pdf = l_pdf
                                     nombre_fichero = l_nombre_pdf
                                     clave = gs_dyn300-id_receta
                                     IMPORTING message = DATA(l_msg) ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ELSE.
    l_rc = '03'. "Error en la grabación
  ENDIF.
  CLEAR gt_mp_backup.

ENDFORM.

FORM handle_user_command200 USING i_ucomm TYPE salv_de_function.
  DATA: lt_rows TYPE salv_t_row.
  CASE i_ucomm.

    WHEN 'BORRAR'.
      CLEAR i_ucomm.
      PERFORM borrar_recetas_mp.

      gs_dyn200-go_alv->refresh( ).
    WHEN 'DETALLE'.

      CLEAR i_ucomm.
      PERFORM obtener_seleccion_alv200 CHANGING lt_rows.
      LOOP AT lt_rows INTO DATA(l_row).
        DATA(l_id_rec) = gt_cab_rec_mp_200[ l_row ]-id_receta.
        PERFORM invocar_consulta_receta_mp
                    USING gs_dyn100-werks
                       l_id_rec.
      ENDLOOP.
* Por si se ha modificado la fecha fin de alguna receta.
      PERFORM obtener_datos_200.
      PERFORM aplicar_colores_200.

      gs_dyn200-go_alv->refresh( ).

    WHEN 'IMPRIMIR'.
      CLEAR i_ucomm.
      PERFORM obtener_seleccion_alv200 CHANGING lt_rows.
      LOOP AT lt_rows INTO l_row.
        l_id_rec = gt_cab_rec_mp_200[ l_row ]-id_receta.
        PERFORM imprimir_form_receta_mp USING gs_dyn100-werks
                                              l_id_rec.
      ENDLOOP.

    WHEN 'LOTES'.
      CLEAR i_ucomm.
      PERFORM obtener_seleccion_alv200 CHANGING lt_rows.
      LOOP AT lt_rows INTO l_row.

        l_id_rec = gt_cab_rec_mp_200[ l_row ]-id_receta.
        PERFORM consulta_detalle_lotes USING l_id_rec.

      ENDLOOP.

    WHEN OTHERS.
  ENDCASE.

ENDFORM.

FORM obtener_seleccion_alv200 CHANGING p_rows TYPE salv_t_row.
  DATA: lr_selections TYPE REF TO cl_salv_selections.

  lr_selections = gs_dyn200-go_alv->get_selections( ).
  p_rows       = lr_selections->get_selected_rows( ).

ENDFORM.


FORM borrar_recetas_mp.
  DATA: lt_rows       TYPE salv_t_row.
  DATA: lr_id_recetas TYPE zrrid_receta,
        l_msg         TYPE string.
  DATA l_lines TYPE i.
  DATA: lv_answer(1) TYPE c.

  PERFORM obtener_seleccion_alv200 CHANGING lt_rows.

  IF lines( lt_rows ) <> 1.
    MESSAGE i329(zpp). "Para borrar, seleccione una única receta
    EXIT.
  ENDIF.


  DATA(l_row) = lt_rows[ 1 ].

  CALL METHOD zclpp_recetas_mp=>validar_suprimir_receta_mp
    EXPORTING
      i_werks     = gs_dyn100-werks
      i_id_receta = gt_cab_rec_mp_200[ l_row ]-id_receta
    IMPORTING
      o_rc        = DATA(o_rc).

  CASE o_rc.
    WHEN '01'.
      MESSAGE i324(zpp). "Receta no encontrada
      EXIT.
    WHEN '02'.
      MESSAGE i340(zpp). "No se han encontrado posiciones para la receta
      EXIT.
    WHEN '03'.
      MESSAGE i336(zpp). "La fecha/hora inicial de la receta es anterior a la fecha/hora actual.
      EXIT.
    WHEN '04'. "Han cancelado en la ventana de confirmación.
      EXIT.
    WHEN '05'. "Imposible borrar, existen posiciones asociadas a la receta &.
      MESSAGE i343(zpp) WITH gt_cab_rec_mp_200[ l_row ]-id_receta.
      EXIT.
    WHEN OTHERS.
  ENDCASE.

  CALL METHOD zclpp_recetas_mp=>borrar_receta_mp
    EXPORTING
      i_werks     = gs_dyn100-werks
      i_id_receta = gt_cab_rec_mp_200[ l_row ]-id_receta
    IMPORTING
      o_rc        = o_rc.

  IF o_rc = '00'. " Refrescamos el contenido del ALV
    CLEAR gt_cab_rec_mp_200[].
* Obtención de registros de recetas planificadas de MP
    CALL METHOD zclpp_recetas_mp=>obtener_lista_recetas_mp
      EXPORTING
        i_werks           = gs_dyn100-werks
        i_calidad         = gs_dyn100-calidad
        i_contrama        = gs_dyn100-contrama
        i_up_to           = gs_dyn200-up_to
      IMPORTING
        ot_cab_recetas_mp = gt_cab_rec_mp_200.
    PERFORM aplicar_colores_200.

  ELSE.
    MESSAGE i341(zpp) WITH o_rc. " Error al borrar la receta. RC = &
    EXIT.
  ENDIF.
*  ENDIF.
ENDFORM.


FORM modificar_receta.

  CALL FUNCTION 'ZMPP_POPUP_AVISO_MODIF_FEC_REC'
    EXPORTING
      i_werks           = gs_dyn100-werks
      i_id_receta       = gs_dyn300-id_receta
      i_operario        = gs_dyn300-contrama
    IMPORTING
      o_fecha_fin_modif = gs_dyn300-fecha_fin
      o_hora_fin_modif  = gs_dyn300-hora_fin.


ENDFORM.

FORM free_grid_container_leave.

  CLEAR: gt_materia_prima300[] , gt_materia_prima300_c[] .

  gs_dyn300-grid->free( ).
  gs_dyn300-container->free( ).
  FREE: gs_dyn300-grid , gs_dyn300-container.
  LEAVE TO SCREEN 0.

ENDFORM.

FORM imprimir_form_receta_mp USING i_werks TYPE werks_d
                                   i_receta TYPE zid_receta.
  CALL FUNCTION 'ZMFPP_FORM_RECETA_MP'
    EXPORTING
      i_werks     = i_werks
      i_id_receta = i_receta
*     I_DATOS_ETIQUETA       =
*     I_REIMP_PESO           =
      i_nodialog  = ' ' "'X'
    IMPORTING
*     O_PRINTPARMS           =
      o_rc        = l_rc.
  IF l_rc <> '00'.
    MESSAGE i337(zpp). "Error al intentar imprimir formulario.
    EXIT.
  ENDIF.

ENDFORM.

FORM validar_si_hay_cambios.

  DATA: lv_answer(1) TYPE c,
        l_msg        TYPE string,
        l_rc         TYPE char02,
        l_haydatos   TYPE flag.

*  clear p_noexit.
* Validamos si se han informado datos.
  IF gs_dyn300-id_receta IS INITIAL AND gt_materia_prima300 IS NOT INITIAL.

    CLEAR l_haydatos.
    LOOP AT gt_materia_prima300 INTO DATA(ls_mp) WHERE kg_ciclo IS NOT INITIAL.
      l_haydatos = 'X'.
      EXIT.
    ENDLOOP.
  ELSE.
    PERFORM free_grid_container_leave.
  ENDIF.

  IF ( l_haydatos = 'X' AND gs_dyn300-id_receta IS INITIAL ) OR
       gs_dyn300-descrip_rec IS NOT INITIAL.

    l_msg = |Existen datos sin guardar. ¿Desea salir sin guardar?|.
    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        titlebar              = 'Aviso'
        text_question         = l_msg
        text_button_1         = 'Salir' "
        icon_button_1         = 'ICON_PDIR_BACK' "
        text_button_2         = 'Guardar' " 'Cancelar'
        icon_button_2         = 'ICON_SYSTEM_SAVE' " 'Cancelar'
        default_button        = '2'
        display_cancel_button = 'X'
      IMPORTING
        answer                = lv_answer
      EXCEPTIONS
        text_not_found        = 1
        OTHERS                = 2.

    CASE lv_answer.
      WHEN '1'. "salir sin guardar
        PERFORM free_grid_container_leave.


      WHEN '2'. "guardar y salir
* Validar descripción.
        IF gs_dyn300-descrip_rec IS INITIAL.
          MESSAGE i319(zpp). "Debe informar kg. de alguno de los materiales de la lista.
          RETURN.
        ENDIF.
        PERFORM save USING l_rc.
        CHECK l_rc = '00'.
        PERFORM free_grid_container_leave.

      WHEN 'A'. " Cancelar, no hacemos nada

      WHEN OTHERS.
    ENDCASE.

  ELSE.
    PERFORM free_grid_container_leave.

  ENDIF.

ENDFORM.


FORM obtener_llamada_externa.

  DATA: l_id_receta TYPE zid_receta,
        l_werks     TYPE werks_d,
        ls_ztpp0038 TYPE ztpp0038.

  CLEAR: l_id_receta , l_werks.


* Para llamada externa desde "Popup Gestión recetas planificadas MP"





  GET PARAMETER ID: 'ZID_RECETA_MP'       FIELD l_id_receta,
                    'ZWERKS_MP'           FIELD l_werks.

  IF l_id_receta IS NOT INITIAL AND
     l_werks     IS NOT INITIAL.
    gs_dyn100-werks = l_werks.
    g_rec_cons      = l_id_receta.
    g_tp_300 = 'C'.
    g_call_ext = 'X'.
  ENDIF.

ENDFORM.

FORM consulta_detalle_lotes USING i_receta TYPE zid_receta.

  DATA: lr_rec TYPE zrrid_receta.

  CHECK i_receta IS NOT INITIAL.

  CLEAR lr_rec.

  APPEND VALUE #( sign = 'I' option = 'EQ'  low = i_receta
                  ) TO lr_rec.

  SUBMIT zrpp0058 WITH  p_werks EQ gs_dyn100-werks
                  WITH  s_rec   IN lr_rec
                  WITH  p_t1    EQ 'X'
                  WITH  p_t2    EQ 'X'
                  WITH  p_t3    EQ 'X'
                  AND RETURN.
ENDFORM.
