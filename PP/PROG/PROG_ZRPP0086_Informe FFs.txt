*&---------------------------------------------------------------------*
*& Listado FFs
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zrpp0086.

TABLES: marc, knvp, mara, mvke, yhp_idx_td100, yhp_idx_td110.

"""""""""""""""""
" Tipos de datos
"""""""""""""""""
TYPES: BEGIN OF st_lin_alv.
         INCLUDE TYPE zrpp0086_s_alv.
         TYPES: destinatario_original       TYPE kunnr,
         destinatario_original_name1 TYPE kna1-name1,
         dest_ult_doc_vtas           TYPE kunnr,
         dest_ult_doc_vtas_name1     TYPE kna1-name1,
         mstde                       TYPE mara-mstde,
         mstdv                       TYPE mara-mstdv,
         inktn_semi                  TYPE zrpp0086_s_alv-inktn.
TYPES: color TYPE c LENGTH 4.
TYPES END OF st_lin_alv.



"""""""""""""""""
" Variables
"""""""""""""""""
DATA vg_user_es_comercial   TYPE xfeld.
DATA vg_zcod_comercial      TYPE xuvalue.
DATA tg_num_comercial       TYPE TABLE OF kna1-lifnr.
DATA tg_lifnr_rg            TYPE RANGE OF lifnr.



"""""""""""""""""
" Includes
"""""""""""""""""
INCLUDE zseis_patron_alv.


""""""""""""""""""""""
" Pantalla de selección
""""""""""""""""""""""

PARAMETERS     p_vkorg  TYPE mvke-vkorg OBLIGATORY.
PARAMETERS     p_vtweg  TYPE mvke-vtweg OBLIGATORY DEFAULT '10'.

SELECT-OPTIONS s_dwerk  FOR mvke-dwerk.
SELECT-OPTIONS s_matnr  FOR marc-matnr.
SELECT-OPTIONS s_kunnr  FOR knvp-kunnr.


SELECT-OPTIONS: s_prole       FOR yhp_idx_td100-prole,
                s_prowi       FOR yhp_idx_td100-prowi,
                s_prohe       FOR yhp_idx_td100-prohe,
                s_guald       FOR yhp_idx_td100-gualdera,
                s_prsty       FOR yhp_idx_td100-prsty,
                s_flute       FOR yhp_idx_td110-flute.


SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-b01.
PARAMETERS: cbx_del AS CHECKBOX.

SELECT-OPTIONS: s_mstae FOR mara-mstae NO INTERVALS,
                s_mmsta FOR marc-mmsta NO INTERVALS,
                s_mstav FOR mara-mstav NO INTERVALS,
                s_vmsta FOR mvke-vmsta NO INTERVALS.
SELECTION-SCREEN END OF BLOCK b01.





""""""""""""""""""""""
"Rutinas
""""""""""""""""""""""

*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_initialization.

  GET PARAMETER ID 'ZCOD_COMERCIAL' FIELD vg_zcod_comercial.
  IF vg_zcod_comercial IS NOT INITIAL.
    vg_user_es_comercial = 'X'.
    SPLIT vg_zcod_comercial AT ',' INTO TABLE tg_num_comercial.

    LOOP AT tg_num_comercial ASSIGNING FIELD-SYMBOL(<fs_num_comercial>).
      APPEND INITIAL LINE TO tg_lifnr_rg ASSIGNING FIELD-SYMBOL(<fs_lifnr_rg>).
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = <fs_num_comercial>
        IMPORTING
          output = <fs_num_comercial>.
      <fs_lifnr_rg>-sign = 'I'. <fs_lifnr_rg>-option = 'EQ'. <fs_lifnr_rg>-low = <fs_num_comercial>.
    ENDLOOP.
  ENDIF.

  vg_no_justif_cols = 'X'.
  PERFORM f_config_dynpro USING '0100' 'CC_ALV' 'T01' 'STA_100' space space.
ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  F_CREAR_CATALOGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_catalogo TABLES it_catalogo TYPE lvc_t_fcat USING vp_dynnr.
  wa_layout-info_fname = 'COLOR'.
*  PERFORM f_crear_sort USING '1' 'WERKS' space space.
  PERFORM f_crear_sort USING '1' 'MATNR' space space.
  PERFORM f_crear_sort USING '2' 'MAKTX' space space.
  PERFORM f_crear_sort USING '3' 'KUNNR' space space.
  PERFORM f_crear_sort USING '4' 'NAME1' space space.


  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZRPP0086_S_ALV'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_catalogo[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.



  LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>).
    IF <fs_catalogo>-fieldname CP '*_UOM'.
      <fs_catalogo>-tech = 'X'.
      CONTINUE.
    ENDIF.

    CASE <fs_catalogo>-fieldname.
      WHEN 'WERKS'.
        <fs_catalogo>-key = 'X'.
      WHEN 'MATNR'.
        <fs_catalogo>-key     = 'X'.
        <fs_catalogo>-hotspot = 'X'.
      WHEN 'DCUTT' OR 'PRTON'.
        <fs_catalogo>-hotspot = 'X'.
      WHEN 'KUNNR'.
        <fs_catalogo>-key     = 'X'.
        <fs_catalogo>-hotspot = 'X'.
      WHEN 'MATNR_SEMI' OR 'INKTN' OR 'DCUTT_SEMI' OR 'PRTON_SEMI'.
        <fs_catalogo>-hotspot = 'X'.
      WHEN 'VBELN'.
        <fs_catalogo>-no_out = 'X'.
        <fs_catalogo>-hotspot = 'X'.
      WHEN 'POSNR' OR 'CUOBJ' OR 'VKORG' OR 'VTWEG'.
        <fs_catalogo>-no_out = 'X'.
      WHEN 'OBSER'.
        <fs_catalogo>-outputlen = 60.
      WHEN 'RUTA_SEMI'.
        <fs_catalogo>-outputlen = 40.
      WHEN 'DESCR_PALE' OR 'DESCR_TAPA'.
        <fs_catalogo>-outputlen = 40.
      WHEN 'LVORM'.
        <fs_catalogo>-checkbox = 'X'.
      WHEN 'PRQTY_UOM_GROUP' OR 'PRQTY_UOM_UNIT' OR 'PRQTY_UOM_STACK' OR 'MEINS'.
        <fs_catalogo>-tech = 'X'.
    ENDCASE.


    CASE <fs_catalogo>-fieldname.
      WHEN 'NAME1_COMERCIAL'.
        <fs_catalogo>-coltext = 'Comercial: Nombre'.
      WHEN 'NAME1_REPRESENTANTE'.
        <fs_catalogo>-coltext = 'Representante: Nombre'.
      WHEN 'NAME1'.
        <fs_catalogo>-coltext = 'Solicitante: Nombre'.
      WHEN 'VTEXT'.
        <fs_catalogo>-coltext = 'Sector: Denominación'.
      WHEN 'PRSTY'.
        <fs_catalogo>-coltext = 'FEFCO'.
      WHEN 'GBDES'.
        <fs_catalogo>-coltext = 'Calidad: Descripción'.
      WHEN 'ABLAG'.
        <fs_catalogo>-coltext = 'Superficie'.
      WHEN 'SHTGL'.
        <fs_catalogo>-coltext = 'Largo plancha'.
      WHEN 'SHTGW'.
        <fs_catalogo>-coltext = 'Ancho plancha fabri. Onduladora'.
      WHEN 'MAKTX_SEMI'.
        <fs_catalogo>-coltext = 'Material semi: Nombre'.
      WHEN 'DESCR_PALE'.
        <fs_catalogo>-coltext = <fs_catalogo>-reptext = <fs_catalogo>-scrtext_s = <fs_catalogo>-scrtext_m = <fs_catalogo>-scrtext_l = 'Palé'.
      WHEN 'DESCR_TAPA'.
        <fs_catalogo>-coltext = 'Tablero/Tapa'.
      WHEN 'TBQTY'.
        <fs_catalogo>-coltext = 'Cajas por palé'.
      WHEN 'LENGTH'.
        <fs_catalogo>-coltext = 'Largo Bulto'.
      WHEN 'WIDTH'.
        <fs_catalogo>-coltext = 'Ancho Bulto'.
      WHEN 'HEIGHT'.
        <fs_catalogo>-coltext = 'Alto Bulto'.
      WHEN 'WEIGTH'.
        <fs_catalogo>-coltext = 'Peso Bulto'.
      WHEN 'PROLE'.
        <fs_catalogo>-coltext = 'Largo INT'.
      WHEN 'PROWI'.
        <fs_catalogo>-coltext = 'Ancho INT'.
      WHEN 'PROHE'.
        <fs_catalogo>-coltext = 'Alto INT'.
      WHEN 'CALIPER'.
        <fs_catalogo>-coltext = 'Grosor plancha'.
      WHEN 'MSTAE'.
        <fs_catalogo>-coltext = 'Status mat.todos centros'.
      WHEN 'MSTAV'.
        <fs_catalogo>-coltext = 'Status mat.ventas CadDis'.
      WHEN 'MMSTA'.
        <fs_catalogo>-coltext = 'Status mat.planif. específ.ce.'.

      WHEN 'WWEGP'.
        <fs_catalogo>-coltext = 'Peso neto'.


    ENDCASE.

  ENDLOOP.


  APPEND INITIAL LINE TO it_catalogo ASSIGNING <fs_catalogo>.
  <fs_catalogo>-fieldname = 'DESTINATARIO_ORIGINAL'.
  <fs_catalogo>-coltext   = 'Destinatario original'.
  <fs_catalogo>-ref_table = 'YHP_IDX_TD010'.
  <fs_catalogo>-ref_field = 'KUNWE'.

  APPEND INITIAL LINE TO it_catalogo ASSIGNING <fs_catalogo>.
  <fs_catalogo>-fieldname = 'DESTINATARIO_ORIGINAL_NAME1'.
  <fs_catalogo>-coltext   = 'Nombre destinatario original'.
  <fs_catalogo>-ref_table = 'KNA1'.
  <fs_catalogo>-ref_field = 'NAME1'.

  APPEND INITIAL LINE TO it_catalogo ASSIGNING <fs_catalogo>.
  <fs_catalogo>-fieldname = 'DEST_ULT_DOC_VTAS'.
  <fs_catalogo>-coltext   = 'Destin. último doc. ventas'.
  <fs_catalogo>-ref_table = 'VBPA'.
  <fs_catalogo>-ref_field = 'KUNNR'.

  APPEND INITIAL LINE TO it_catalogo ASSIGNING <fs_catalogo>.
  <fs_catalogo>-fieldname = 'DEST_ULT_DOC_VTAS_NAME1'.
  <fs_catalogo>-coltext   = 'Nombre destin. último doc. ventas'.
  <fs_catalogo>-ref_table = 'KNA1'.
  <fs_catalogo>-ref_field = 'NAME1'.


  APPEND INITIAL LINE TO it_catalogo ASSIGNING <fs_catalogo>.
  <fs_catalogo>-fieldname = 'MSTDE'.
  <fs_catalogo>-ref_table = 'MARA'.

  APPEND INITIAL LINE TO it_catalogo ASSIGNING <fs_catalogo>.
  <fs_catalogo>-fieldname = 'MSTDV'.
  <fs_catalogo>-ref_table = 'MARA'.


  APPEND INITIAL LINE TO it_catalogo ASSIGNING <fs_catalogo>.
  <fs_catalogo>-fieldname = 'INKTN_SEMI'.
  <fs_catalogo>-coltext   = 'Cliché genérico semi'.
  <fs_catalogo>-ref_table = 'ZRPP0086_S_ALV'.
  <fs_catalogo>-ref_field = 'INKTN'.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_llenar_datos
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos TABLES tp_alv USING vp_dynpro.

  DATA: vl_fec_ini TYPE dats,
        vl_fec_fin TYPE dats.

  "Interanual
*  DATA(vl_anyo_ant) = sy-datum(4) - 1.
*  DATA(vl_mes)      = sy-datum+4(2).
*  vl_fec_ini        = vl_anyo_ant && vl_mes && '01'.
*  CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
*    EXPORTING
*      day_in            = vl_fec_ini
*    IMPORTING
*      last_day_of_month = vl_fec_ini
*    EXCEPTIONS
*      day_in_no_date    = 1
*      OTHERS            = 2.
*  ADD 1 TO vl_fec_ini.
*
*  CALL FUNCTION 'RP_LAST_DAY_OF_MONTHS'
*    EXPORTING
*      day_in            = sy-datum
*    IMPORTING
*      last_day_of_month = vl_fec_fin
*    EXCEPTIONS
*      day_in_no_date    = 1
*      OTHERS            = 2.
  vl_fec_fin = sy-datlo.
  vl_fec_ini = vl_fec_fin - 365.


  DATA: tl_lvorm_rg TYPE RANGE OF mara-lvorm.
  IF cbx_del = space.
    tl_lvorm_rg = VALUE #( ( sign = 'I' option = 'EQ' low = space ) ).
  ENDIF.

  "Centros de la organización de ventas
  DATA: tl_werks_rg TYPE RANGE OF t001w-werks.

  SELECT 'I' AS sign, 'EQ' AS option, werks AS low
    INTO CORRESPONDING FIELDS OF TABLE @tl_werks_rg
    FROM tvkwz
    WHERE vkorg = @p_vkorg AND
          vtweg = @p_vtweg.
  CHECK sy-subrc = 0.




  "Datos info material cliente
  SELECT mvke~vkorg, mvke~vtweg, mvke~matnr, mvke~vmsta, mvke~lvorm, mvke~dwerk, mvke~vmstd,
         knmt~kunnr, knmt~kdmat,
         makt~maktx, mara~lvorm AS lvorm_mara,
         mara~ersda, mara~bismt, mara~mstav, mara~mstae, mara~meins,
         mara~ferth, mara~spart, mara~mstde, mara~mstdv, mara~brgew, mara~gewei
    INTO TABLE @DATA(tl_knmt)
    FROM mvke LEFT OUTER JOIN knmt ON knmt~vkorg = mvke~vkorg AND
                                      knmt~vtweg = mvke~vtweg AND
                                      knmt~matnr = mvke~matnr
              INNER JOIN mara ON mara~matnr = mvke~matnr
              LEFT OUTER JOIN makt ON makt~matnr = mvke~matnr AND
                                      makt~spras = @sy-langu
    WHERE mvke~vkorg = @p_vkorg       AND
          mvke~vtweg = @p_vtweg       AND
          mvke~matnr IN @s_matnr      AND
          mvke~dwerk IN @s_dwerk      AND
          mvke~lvorm IN @tl_lvorm_rg  AND
          mvke~vmsta IN @s_vmsta      AND
*          knmt~kunnr IN @s_kunnr      AND
          mara~mstav IN @s_mstav      AND
          mara~mstae IN @s_mstae      AND
          mara~lvorm IN @tl_lvorm_rg  AND
          ( mara~matnr LIKE 'CO%' OR mara~mtart = 'ZPTO' ).
  CHECK tl_knmt IS NOT INITIAL.

*  "No hay que mostrar los materiales sin registro en la KNMT si no se marca el pincho para enseñar los borrados
*  IF cbx_del = space.
*    DELETE tl_knmt WHERE kunnr IS INITIAL.
*  ENDIF.

  "Tratamiento materiales sin datos en KNMT
  LOOP AT tl_knmt ASSIGNING FIELD-SYMBOL(<fs_knmt>) WHERE kunnr IS INITIAL.
    SELECT vbak~vkorg, vbak~vtweg, vbap~matnr, vbap~kdmat, vbak~kunnr
      INTO TABLE @DATA(tl_vbap_no_knmt)
      UP TO 1 ROWS
      FROM vbap INNER JOIN vbak ON vbak~vbeln = vbap~vbeln
      WHERE vbap~matnr = @<fs_knmt>-matnr AND
            vbap~werks = @<fs_knmt>-dwerk AND
            vbap~abgru = @space           AND
            vbak~vkorg = @<fs_knmt>-vkorg AND
            vbak~vtweg = @<fs_knmt>-vtweg AND
            vbak~auart IN ('ZLI', 'ZMI', 'ZOF', 'ZVA')
      ORDER BY vbak~audat DESCENDING, vbak~vbeln DESCENDING.
    IF sy-subrc = 0.
      DATA(wl_vbap_no_knmt) = tl_vbap_no_knmt[ 1 ].
      <fs_knmt>-kdmat = wl_vbap_no_knmt-kdmat.
      <fs_knmt>-kunnr = wl_vbap_no_knmt-kunnr.
    ELSE.
      CLEAR tl_vbap_no_knmt.
    ENDIF.
  ENDLOOP.


  DELETE tl_knmt WHERE kunnr NOT IN s_kunnr.

  SELECT kna1~kunnr, kna1~name1, kna1~katr9, tvk9t~vtext
    INTO TABLE @DATA(tl_kna1)
    FROM kna1 LEFT OUTER JOIN tvk9t ON tvk9t~katr9 = kna1~katr9 AND
                                       tvk9t~spras = @sy-langu
    FOR ALL ENTRIES IN @tl_knmt
    WHERE kunnr = @tl_knmt-kunnr.


  SELECT knvp~kunnr, knvp~kunn2, knvp~vkorg, knvp~vtweg, knvp~spart, knvp~parvw, knvp~lifnr,
         kna1_kunnr~name1, kna1_kunn2~name1 AS name1_kunn2, lfa1~name1 AS name1_lifnr
    INTO TABLE @DATA(tl_knvp)
    FROM knvp INNER JOIN kna1 AS kna1_kunnr ON kna1_kunnr~kunnr = knvp~kunnr
              LEFT OUTER JOIN kna1 AS kna1_kunn2 ON kna1_kunn2~kunnr = knvp~kunn2
              LEFT OUTER JOIN lfa1 ON lfa1~lifnr = knvp~lifnr
    FOR ALL ENTRIES IN @tl_knmt
    WHERE knvp~vkorg = @tl_knmt-vkorg AND
          knvp~vtweg = @tl_knmt-vtweg AND
          knvp~parvw IN ('Y0', 'P1', 'P2', 'P3').

  SELECT knvv~kunnr, knvv~vkorg, knvv~vtweg, knvv~spart, knvv~zzkatr9, tvk9t~vtext
    INTO TABLE @DATA(tl_knvv)
    FROM knvv LEFT OUTER JOIN tvk9t ON tvk9t~katr9 = knvv~zzkatr9 AND
                                       tvk9t~spras = @sy-langu
    FOR ALL ENTRIES IN @tl_knmt
    WHERE knvv~kunnr = @tl_knmt-kunnr AND
          knvv~vkorg = @tl_knmt-vkorg AND
          knvv~vtweg = @tl_knmt-vtweg.

  SELECT marc~werks, marc~matnr, marc~cuobj, marc~stdpd, marc~lvorm AS lvorm_marc, marc~mmsta, marc~mmstd
    INTO TABLE @DATA(tl_marc)
    FROM marc
    FOR ALL ENTRIES IN @tl_knmt
    WHERE  matnr = @tl_knmt-matnr AND
           werks IN @tl_werks_rg  AND
           lvorm IN @tl_lvorm_rg  AND
           mmsta IN @s_mmsta      AND
           cuobj <> '000000000000000000'.
  SORT tl_marc BY matnr stdpd DESCENDING.

  IF tl_marc IS NOT INITIAL.
    SELECT yhp_idx_td110~cuobj, yhp_idx_td110~cself, yhp_idx_td110~p_matnr AS matnr_semi, yhp_idx_td110~mboar, yhp_idx_td110~board,
           yhp_idx_td110~gbdes, yhp_idx_td110~flute, yhp_idx_td110~caliper,  yhp_idx_td110~caliper_uom,
           yhp_idx_td110~sidrp, yhp_idx_td110~sidrp_uom,
           makt~maktx AS maktx_semi
      INTO TABLE @DATA(tl_td110)
      FROM yhp_idx_td110 LEFT OUTER JOIN makt ON makt~matnr = yhp_idx_td110~p_matnr AND
                                                 makt~spras = @sy-langu
      FOR ALL ENTRIES IN @tl_marc
      WHERE cuobj = @tl_marc-cuobj.
    SORT tl_td110 BY cuobj cself.
*            cself = '0000000001'.
*            mboar = 'P'.

    SELECT cuobj, prsty,      prole,      prole_uom,  prowi,  prowi_uom,
           prohe, prohe_uom,  fscty,      obser,      tdcut,  dcutt,
           noupt, ablag,      ablag_uom,  shtgl,  shtgl_uom,
           shtgw, shtgw_uom,  gualdera,   gualdera_uom,
           wwenp AS wwegp,      wwenp_uom AS wwegp_uom "Les cambio los nombres en la selección. Es un poco ñapa, pero así no hace falta tocar las variantes
      INTO TABLE @DATA(tl_td100)
      FROM yhp_idx_td100
      FOR ALL ENTRIES IN @tl_marc
      WHERE cuobj = @tl_marc-cuobj.

    SELECT cuobj, cself, bcean
      INTO TABLE @DATA(tl_td150)
      FROM yhp_idx_td150
      FOR ALL ENTRIES IN @tl_marc
      WHERE cuobj = @tl_marc-cuobj.
*            cself = '0000000001'.
    SORT tl_td150 BY cuobj cself.

    SELECT cuobj, kunwe, name1
      INTO TABLE @DATA(tl_td010)
      FROM yhp_idx_td010 LEFT OUTER JOIN kna1 ON kna1~kunnr = yhp_idx_td010~kunwe
      FOR ALL ENTRIES IN @tl_marc
      WHERE cuobj = @tl_marc-cuobj.



    SELECT cuobj, cself, prtyp, nocol, prton
      INTO TABLE @DATA(tl_td130)
      FROM yhp_idx_td130
      FOR ALL ENTRIES IN @tl_marc
      WHERE cuobj = @tl_marc-cuobj.
*            cself = '0000000001'.
    SORT tl_td130 BY cuobj cself.


    SELECT cuobj, cself, coper, arbpl
      INTO TABLE @DATA(tl_td310)
      FROM yhp_idx_td310
      FOR ALL ENTRIES IN @tl_marc
      WHERE cuobj = @tl_marc-cuobj.
*            cself = '0000000001'.
    SORT tl_td310 BY cuobj cself.


    SELECT cuobj, cself, shuty, packp, prqty, prqty_uom, tbqty, tbqty_uom,
          length, length_uom, width, width_uom, height, height_uom, weigth, weigth_uom
      INTO TABLE @DATA(tl_td151)
      FROM yhp_idx_td151
      FOR ALL ENTRIES IN @tl_marc
      WHERE cuobj = @tl_marc-cuobj AND
*            cself = '0000000001'   AND
            shuty IN ('UNIT', 'STACK', 'GROUP').
    SORT tl_td151 BY cuobj cself.



    SELECT cuobj, cself, pmatn, descr, pmaty
      INTO TABLE @DATA(tl_td160)
      FROM yhp_idx_td160
      FOR ALL ENTRIES IN @tl_marc
      WHERE cuobj = @tl_marc-cuobj.
    SORT tl_td160 BY cuobj cself.
  ENDIF.


  DATA wl_alv LIKE LINE OF it_alv.
  LOOP AT tl_knmt ASSIGNING <fs_knmt>.
    CLEAR wl_alv.

    "Buscamos primero el registro que tenga material configurable
    LOOP AT tl_marc ASSIGNING FIELD-SYMBOL(<fs_marc>) WHERE matnr = <fs_knmt>-matnr.
      IF <fs_marc>-stdpd IS NOT INITIAL. EXIT. ENDIF.
    ENDLOOP.
    CHECK sy-subrc = 0.

    LOOP AT tl_knvp ASSIGNING FIELD-SYMBOL(<fs_knvp>) WHERE kunnr = <fs_knmt>-kunnr AND
                                                            vkorg = <fs_knmt>-vkorg AND
                                                            vtweg = <fs_knmt>-vtweg.
      CASE <fs_knvp>-parvw.
        WHEN 'Y0'.
          wl_alv-kunn2_comercial  = <fs_knvp>-lifnr.
          wl_alv-name1_comercial  = <fs_knvp>-name1_lifnr.

        WHEN 'P1' OR 'P2' OR 'P3'.
          wl_alv-kunn2_representante  = <fs_knvp>-lifnr.
          wl_alv-name1_representante  = <fs_knvp>-name1_lifnr.
      ENDCASE.
    ENDLOOP.

    "Comprobación de si el usuario es comercial
    CHECK vg_user_es_comercial = space OR wl_alv-kunn2_comercial IN tg_lifnr_rg.


    READ TABLE tl_td100 INTO DATA(wl_td100) WITH KEY cuobj = <fs_marc>-cuobj.
    IF sy-subrc <> 0.
      CLEAR wl_td100.
    ENDIF.


    READ TABLE tl_td110 INTO DATA(wl_td110) WITH KEY cuobj = <fs_marc>-cuobj
                                                     mboar = 'S'.
    IF sy-subrc <> 0.
      READ TABLE tl_td110 INTO wl_td110 WITH KEY cuobj = <fs_marc>-cuobj.
    ENDIF.
    IF sy-subrc <> 0.
      CLEAR wl_td110.
    ENDIF.


    CHECK: wl_td100-prole       IN s_prole,
           wl_td100-prowi       IN s_prowi,
           wl_td100-prohe       IN s_prohe,
           wl_td100-gualdera    IN s_guald,
           wl_td100-prsty       IN s_prsty,
           wl_td110-flute       IN s_flute.


    APPEND INITIAL LINE TO it_alv ASSIGNING FIELD-SYMBOL(<fs_alv>).
    MOVE-CORRESPONDING wl_alv    TO <fs_alv>.
    MOVE-CORRESPONDING <fs_knmt> TO <fs_alv>.
    MOVE-CORRESPONDING <fs_marc> TO <fs_alv>.
    MOVE-CORRESPONDING wl_td100  TO <fs_alv>.
    IF <fs_alv>-noupt IS INITIAL. <fs_alv>-noupt = 1. ENDIF.
    DIVIDE <fs_alv>-ablag BY <fs_alv>-noupt.


    READ TABLE tl_kna1 ASSIGNING FIELD-SYMBOL(<fs_kna1>) WITH KEY kunnr = <fs_knmt>-kunnr.
    IF sy-subrc = 0.
      MOVE-CORRESPONDING <fs_kna1> TO <fs_alv>.
    ENDIF.

    READ TABLE tl_knvv ASSIGNING FIELD-SYMBOL(<fs_knvv>) WITH KEY kunnr = <fs_knmt>-kunnr
                                                                  vkorg = <fs_knmt>-vkorg
                                                                  vtweg = <fs_knmt>-vtweg.
    IF sy-subrc = 0 AND <fs_knvv>-zzkatr9 IS NOT INITIAL.
      <fs_alv>-katr9 = <fs_knvv>-zzkatr9.
      <fs_alv>-vtext = <fs_knvv>-vtext.
    ENDIF.

    IF <fs_knmt>-lvorm_mara = 'X' OR <fs_knmt>-lvorm = 'X' OR <fs_marc>-lvorm_marc = 'X'.
      <fs_alv>-lvorm = 'X'.
    ENDIF.


    MOVE-CORRESPONDING wl_td110 TO <fs_alv>.
    IF wl_td110-mboar = 'S' AND wl_td110-board = wl_td110-matnr_semi.
      "Si la calidad es igual al semi, es un error en datos.
      READ TABLE tl_td110 ASSIGNING FIELD-SYMBOL(<fs_td110_pt>) WITH KEY cuobj = <fs_marc>-cuobj
                                                                         mboar = 'P'.
      IF sy-subrc = 0.
        <fs_alv>-board = <fs_td110_pt>-board.
      ELSE.
        CLEAR <fs_alv>-board.
      ENDIF.

    ELSEIF wl_td110-mboar <> 'S'.
      "Si hemos leido un modo de calidad <> S, lo calculamos abajo
      CLEAR <fs_alv>-board.
    ENDIF.


    READ TABLE tl_td150 ASSIGNING FIELD-SYMBOL(<fs_td150>) WITH KEY cuobj = <fs_marc>-cuobj.
    IF sy-subrc = 0.
      MOVE-CORRESPONDING <fs_td150> TO <fs_alv>.
    ENDIF.

    READ TABLE tl_td130 ASSIGNING FIELD-SYMBOL(<fs_td130>) WITH KEY cuobj = <fs_marc>-cuobj.
    IF sy-subrc = 0.
      MOVE-CORRESPONDING <fs_td130> TO <fs_alv>.
    ENDIF.

    DATA vl_sufijo TYPE n LENGTH 2.
    LOOP AT tl_td310 ASSIGNING FIELD-SYMBOL(<fs_td310>) WHERE cuobj = <fs_marc>-cuobj.
      CHECK <fs_td310>-arbpl NP '*600'.
      vl_sufijo = <fs_td310>-coper.
      ASSIGN COMPONENT 'RUTA_' && vl_sufijo OF STRUCTURE <fs_alv> TO FIELD-SYMBOL(<fs_ruta>).
      CHECK sy-subrc = 0.
      <fs_ruta> = <fs_td310>-arbpl.
    ENDLOOP.


    READ TABLE tl_td151 ASSIGNING FIELD-SYMBOL(<fs_td151>) WITH KEY cuobj = <fs_marc>-cuobj
                                                                    shuty = 'UNIT'.
    IF sy-subrc = 0.
      MOVE-CORRESPONDING <fs_td151> TO <fs_alv>.
      <fs_alv>-prqty_unit     = <fs_td151>-prqty.
      <fs_alv>-prqty_uom_unit = <fs_td151>-prqty_uom.
    ENDIF.

    READ TABLE tl_td151 ASSIGNING <fs_td151> WITH KEY cuobj = <fs_marc>-cuobj
                                                      shuty = 'STACK'.
    IF sy-subrc = 0.
      <fs_alv>-prqty_stack     = <fs_td151>-prqty.
      <fs_alv>-prqty_uom_stack = <fs_td151>-prqty_uom.
    ENDIF.
    READ TABLE tl_td151 ASSIGNING <fs_td151> WITH KEY cuobj = <fs_marc>-cuobj
                                                      shuty = 'GROUP'.
    IF sy-subrc = 0.
      <fs_alv>-prqty_group     = <fs_td151>-prqty.
      <fs_alv>-prqty_uom_group = <fs_td151>-prqty_uom.
    ELSE.
      <fs_alv>-prqty_group     = 1.
      <fs_alv>-prqty_uom_group = 'ST'.
    ENDIF.

    CALL FUNCTION 'ROUND'
      EXPORTING
        input  = <fs_alv>-length
        sign   = 'X'
      IMPORTING
        output = <fs_alv>-length
      EXCEPTIONS
        OTHERS = 4.

    CALL FUNCTION 'ROUND'
      EXPORTING
        input  = <fs_alv>-width
        sign   = 'X'
      IMPORTING
        output = <fs_alv>-width
      EXCEPTIONS
        OTHERS = 4.

    CALL FUNCTION 'ROUND'
      EXPORTING
        input  = <fs_alv>-height
        sign   = 'X'
      IMPORTING
        output = <fs_alv>-height
      EXCEPTIONS
        OTHERS = 4.

    CALL FUNCTION 'ROUND'
      EXPORTING
        input  = <fs_alv>-weigth
        sign   = 'X'
      IMPORTING
        output = <fs_alv>-weigth
      EXCEPTIONS
        OTHERS = 4.

    IF <fs_alv>-gewei <> 'KG'.
      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
        EXPORTING
          i_matnr              = <fs_knmt>-matnr
          i_in_me              = <fs_alv>-gewei
          i_out_me             = 'KG'
          i_menge              = <fs_alv>-brgew
        IMPORTING
          e_menge              = <fs_alv>-brgew
        EXCEPTIONS
          error_in_application = 1
          error                = 2
          OTHERS               = 3.
      IF sy-subrc <> 0.
        CLEAR <fs_alv>-brgew.
      ENDIF.
      <fs_alv>-gewei = 'KG'.
    ENDIF.



    READ TABLE tl_td160 ASSIGNING FIELD-SYMBOL(<fs_td160>) WITH KEY cuobj = <fs_marc>-cuobj
                                                                    pmaty = 'PALLET'.
    IF sy-subrc = 0.
      <fs_alv>-descr_pale = <fs_td160>-descr.
      READ TABLE tl_td160 ASSIGNING <fs_td160> WITH KEY cuobj = <fs_marc>-cuobj
                                                        pmaty = 'TBOARD'.
      IF sy-subrc = 0.
        <fs_alv>-descr_tapa = <fs_td160>-descr.
      ENDIF.

    ELSE.
      READ TABLE tl_td160 ASSIGNING <fs_td160> WITH KEY cuobj = <fs_marc>-cuobj.
      IF sy-subrc = 0.
        <fs_alv>-descr_pale = <fs_td160>-descr.
      ENDIF.
    ENDIF.

    READ TABLE tl_td010 ASSIGNING FIELD-SYMBOL(<fs_td010>) WITH KEY cuobj = <fs_marc>-cuobj.
    IF sy-subrc = 0.
      <fs_alv>-destinatario_original       = <fs_td010>-kunwe.
      <fs_alv>-destinatario_original_name1 = <fs_td010>-name1.
    ENDIF.


    "Datos de la última factura
    SELECT vbap~vbeln, vbap~posnr, vbap~werks, vbap~matnr,
           vbak~vkorg, vbak~vtweg, vbak~spart, vbak~kunnr,
           vbak~audat, vbak~waerk, vbap~netpr, vbak~knumv, vbak~angdt,
           vbpa~kunnr AS destinatario, kna1~name1 AS destinatario_name1
      INTO TABLE @DATA(tl_vbap)
      FROM vbap INNER JOIN vbak ON vbak~vbeln = vbap~vbeln
                LEFT OUTER JOIN ( vbpa INNER JOIN kna1 ON kna1~kunnr = vbpa~kunnr )
                ON vbpa~vbeln = vbap~vbeln AND
                   vbpa~posnr = '000000'   AND
                   vbpa~parvw = 'WE'
      UP TO 1 ROWS
      WHERE vbak~vkorg = @<fs_alv>-vkorg AND
            vbak~vtweg = @<fs_alv>-vtweg AND
            vbak~kunnr = @<fs_alv>-kunnr AND
            vbap~matnr = @<fs_alv>-matnr AND
            vbap~werks = @<fs_alv>-dwerk AND
            vbap~abgru = @space          AND
            vbak~auart IN ('ZLI', 'ZMI', 'ZOF', 'ZVA')
      ORDER BY vbak~audat DESCENDING, vbak~vbeln DESCENDING.
    IF sy-subrc = 0.
      DATA(wl_vbap) = tl_vbap[ 1 ].
      <fs_alv>-waerk        = wl_vbap-waerk.
      <fs_alv>-vbeln        = wl_vbap-vbeln.
      <fs_alv>-posnr        = wl_vbap-posnr.
      <fs_alv>-dest_ult_doc_vtas       = wl_vbap-destinatario.
      <fs_alv>-dest_ult_doc_vtas_name1 = wl_vbap-destinatario_name1.
      <fs_alv>-audat        = wl_vbap-audat.
      <fs_alv>-angdt        = wl_vbap-angdt.



      SELECT knumv, kposn, kschl, kbetr, waers
        INTO TABLE @DATA(tl_konv)
        FROM konv
        WHERE knumv = @wl_vbap-knumv AND
              kposn = @wl_vbap-posnr AND
              kschl IN ('ZPRC', 'ZP01', 'ZP07', 'ZP09', 'ZP08', 'ZP10', 'ZP06').
      LOOP AT tl_konv ASSIGNING FIELD-SYMBOL(<fs_konv>).
        CASE <fs_konv>-kschl.
          WHEN 'ZPRC'.
            <fs_alv>-pvp_1000_cajas = <fs_konv>-kbetr.
          WHEN 'ZP01'.
            <fs_alv>-pvp_1000_m     = <fs_konv>-kbetr.
          WHEN 'ZP07'.
            <fs_alv>-va             = <fs_konv>-kbetr.
          WHEN 'ZP09'.
            <fs_alv>-va_porc        = <fs_konv>-kbetr.
          WHEN 'ZP08'.
            <fs_alv>-mdc            = <fs_konv>-kbetr.
          WHEN 'ZP10'.
            <fs_alv>-mdc_porc       = <fs_konv>-kbetr.
          WHEN 'ZP06'.
            <fs_alv>-coste_mp_km2   = <fs_konv>-kbetr.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    SELECT vrkme, SUM( lfimg ) AS lfimg
      INTO TABLE @DATA(tl_lips)
      FROM lips INNER JOIN likp ON likp~vbeln = lips~vbeln
      WHERE likp~vkorg = @p_vkorg         AND
            lips~vtweg = @p_vtweg         AND
            likp~lfart = 'ZLF4'           AND
            lips~matnr = @<fs_alv>-matnr  AND
            likp~kunag = @<fs_alv>-kunnr  AND
            likp~lfdat BETWEEN @vl_fec_ini AND @vl_fec_fin
      GROUP BY vrkme.

    LOOP AT tl_lips ASSIGNING FIELD-SYMBOL(<fs_lips>).
      IF <fs_lips>-vrkme <> <fs_alv>-meins.
        CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
          EXPORTING
            i_matnr              = <fs_alv>-matnr
            i_in_me              = <fs_lips>-vrkme
            i_out_me             = <fs_alv>-meins
            i_menge              = <fs_lips>-lfimg
          IMPORTING
            e_menge              = <fs_lips>-lfimg
          EXCEPTIONS
            error_in_application = 1
            error                = 2
            OTHERS               = 3.
      ENDIF.
      ADD <fs_lips>-lfimg   TO <fs_alv>-cantidad_expedida.
    ENDLOOP.

    "Número entregas. No tener en cuenta posiciones de partición de lotes
    SELECT COUNT( * )
      INTO @<fs_alv>-num_entregas
      FROM lips INNER JOIN likp ON likp~vbeln = lips~vbeln
      WHERE likp~vkorg = @p_vkorg         AND
            lips~vtweg = @p_vtweg         AND
            likp~lfart = 'ZLF4'           AND
            lips~matnr = @<fs_alv>-matnr  AND
            likp~kunag = @<fs_alv>-kunnr  AND
            lips~uecha = '000000'         AND
            likp~lfdat BETWEEN @vl_fec_ini AND @vl_fec_fin.
  ENDLOOP.


  CHECK it_alv IS NOT INITIAL.


  SELECT vbeln, posnr, prsdt
    INTO TABLE @DATA(tl_vbkd)
    FROM vbkd
    FOR ALL ENTRIES IN @it_alv
    WHERE vbeln = @it_alv-vbeln.


  SELECT marc~werks, marc~matnr, marc~cuobj
    INTO TABLE @DATA(tl_marc_semi)
    FROM marc
    FOR ALL ENTRIES IN @it_alv
    WHERE marc~matnr = @it_alv-matnr_semi AND
          marc~cuobj <> '000000000000000000'.

  IF tl_marc_semi IS NOT INITIAL.
    "Ruta semi
    SELECT yhp_idx_td310~cuobj, yhp_idx_td310~coper, yhp_idx_td310~arbpl
      INTO TABLE @DATA(tl_td310_semi)
      FROM yhp_idx_td310 INNER JOIN marc ON marc~cuobj = yhp_idx_td310~cuobj
      FOR ALL ENTRIES IN @tl_marc_semi
      WHERE yhp_idx_td310~cuobj = @tl_marc_semi-cuobj.
    SORT tl_td310_semi BY cuobj coper.

    "Cliché y troquel del semi
    SELECT cuobj, tdcut,  dcutt, noupt
      INTO TABLE @DATA(tl_td100_semi)
      FROM yhp_idx_td100
      FOR ALL ENTRIES IN @tl_marc_semi
      WHERE cuobj = @tl_marc_semi-cuobj.


    SELECT cuobj, prtyp, nocol, prton
      INTO TABLE @DATA(tl_td130_semi)
      FROM yhp_idx_td130
      FOR ALL ENTRIES IN @tl_marc_semi
      WHERE cuobj = @tl_marc_semi-cuobj AND
            cself = '0000000001'.

    SELECT cuobj, cself, mboar, board, p_matnr, gbdes
      INTO TABLE @DATA(tl_td110_semi)
      FROM yhp_idx_td110
      FOR ALL ENTRIES IN @tl_marc_semi
      WHERE cuobj = @tl_marc_semi-cuobj.

    LOOP AT tl_td110_semi ASSIGNING FIELD-SYMBOL(<fs_td110_semi>).
      IF <fs_td110_semi>-board = <fs_td110_semi>-p_matnr.
        DELETE tl_td110_semi. CONTINUE.
      ENDIF.
    ENDLOOP.
    SORT tl_td110_semi BY cuobj cself.
  ENDIF.


  "Cliches genericos
  SELECT td200~settn AS prton, td210~inktn
    INTO TABLE @DATA(tl_td200)
    FROM zvcxi_pxe_td200 AS td200 INNER JOIN zvcxi_pxe_td210 AS td210 ON td210~dokar  = td200~dokar AND
                                                                         td210~doknr  = td200~doknr AND
                                                                         td210~dokvr  = td200~dokvr AND
                                                                         td210~doktl  = td200~doktl
    FOR ALL ENTRIES IN @it_alv
    WHERE td200~settn =  @it_alv-prton AND
          td200~settn <> @space        AND
          td210~inktn <> @space.


  IF tl_td130_semi IS NOT INITIAL.
    SELECT td200~settn AS prton, td210~inktn
      INTO TABLE @DATA(tl_td200_semi)
      FROM zvcxi_pxe_td200 AS td200 INNER JOIN zvcxi_pxe_td210 AS td210 ON td210~dokar  = td200~dokar AND
                                                                           td210~doknr  = td200~doknr AND
                                                                           td210~dokvr  = td200~dokvr AND
                                                                           td210~doktl  = td200~doktl
      FOR ALL ENTRIES IN @tl_td130_semi
      WHERE td200~settn =  @tl_td130_semi-prton AND
            td200~settn <> @space               AND
            td210~inktn <> @space.
  ENDIF.


  LOOP AT it_alv ASSIGNING <fs_alv>.
    IF <fs_alv>-matnr_semi IS NOT INITIAL.
      "Ruta semi
      READ TABLE tl_marc_semi ASSIGNING FIELD-SYMBOL(<fs_marc_semi>) WITH KEY matnr = <fs_alv>-matnr_semi.
      IF sy-subrc = 0.
        LOOP AT tl_td310_semi ASSIGNING FIELD-SYMBOL(<fs_td310_semi>) WHERE cuobj = <fs_marc_semi>-cuobj.
          CHECK <fs_td310_semi>-arbpl NP '*600'.

          IF <fs_alv>-ruta_semi IS INITIAL.
            <fs_alv>-ruta_semi = <fs_td310_semi>-arbpl.
          ELSE.
            <fs_alv>-ruta_semi = |{ <fs_alv>-ruta_semi } - { <fs_td310_semi>-arbpl }|.
          ENDIF.
        ENDLOOP.

        READ TABLE tl_td100_semi ASSIGNING FIELD-SYMBOL(<fs_td100_semi>) WITH KEY cuobj = <fs_marc_semi>-cuobj.
        IF sy-subrc = 0.
          <fs_alv>-tdcut_semi = <fs_td100_semi>-tdcut.
          <fs_alv>-dcutt_semi = <fs_td100_semi>-dcutt.
          <fs_alv>-noupt_semi = <fs_td100_semi>-noupt.

        ENDIF.

        READ TABLE tl_td130_semi ASSIGNING FIELD-SYMBOL(<fs_td130_semi>) WITH KEY cuobj = <fs_marc_semi>-cuobj.
        IF sy-subrc = 0.
          <fs_alv>-prtyp_semi = <fs_td130_semi>-prtyp.
          <fs_alv>-nocol_semi = <fs_td130_semi>-nocol.
          <fs_alv>-prton_semi = <fs_td130_semi>-prton.

          READ TABLE tl_td200_semi ASSIGNING FIELD-SYMBOL(<fs_td200_semi>) WITH KEY prton = <fs_alv>-prton_semi.
          IF sy-subrc = 0.
            <fs_alv>-inktn_semi = <fs_td200_semi>-inktn.
          ENDIF.

        ENDIF.

        IF <fs_alv>-board IS INITIAL.
          READ TABLE tl_td110_semi ASSIGNING <fs_td110_semi> WITH KEY cuobj = <fs_marc_semi>-cuobj
                                                                      mboar = 'S'.
          IF sy-subrc <> 0.
            READ TABLE tl_td110_semi ASSIGNING <fs_td110_semi> WITH KEY cuobj = <fs_marc_semi>-cuobj.
          ENDIF.
          IF sy-subrc = 0.
            <fs_alv>-board = <fs_td110_semi>-board.
            IF <fs_alv>-gbdes IS INITIAL.
              <fs_alv>-gbdes = <fs_td110_semi>-gbdes.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    READ TABLE tl_td200 ASSIGNING FIELD-SYMBOL(<fs_td200>) WITH KEY prton = <fs_alv>-prton.
    IF sy-subrc = 0.
      <fs_alv>-inktn = <fs_td200>-inktn.
    ENDIF.

    "Fecha precio
    READ TABLE tl_vbkd ASSIGNING FIELD-SYMBOL(<fs_vbkd>) WITH KEY vbeln = <fs_alv>-vbeln
                                                                  posnr = <fs_alv>-posnr.
    IF sy-subrc <> 0.
      READ TABLE tl_vbkd ASSIGNING <fs_vbkd> WITH KEY vbeln = <fs_alv>-vbeln
                                                      posnr = '000000'.
    ENDIF.
    IF sy-subrc = 0.
      <fs_alv>-fecha_precio = <fs_vbkd>-prsdt.
    ENDIF.


    "Fecha orden material
    SELECT SINGLE afpo~ltrmi, afpo~aufnr
      INTO CORRESPONDING FIELDS OF @<fs_alv>
      FROM afpo INNER JOIN vbak ON vbak~vbeln = afpo~kdauf
                INNER JOIN aufk INNER JOIN tvkwz ON tvkwz~werks = aufk~werks
                ON aufk~aufnr = afpo~aufnr
      WHERE vbak~kunnr  = @<fs_alv>-kunnr AND
            tvkwz~vkorg = @<fs_alv>-vkorg AND
            afpo~matnr  = @<fs_alv>-matnr  AND
            afpo~ltrmi = ( SELECT MAX( ltrmi )
                             FROM afpo
                             WHERE vbak~kunnr = @<fs_alv>-kunnr AND
                                   afpo~matnr = @<fs_alv>-matnr ).
  ENDLOOP.


  "Status clichés y troqueles
  CONSTANTS: cl_status_material_obsoleto TYPE mara-mstae VALUE '99'.
  SELECT SINGLE mmsta, mtstb
    INTO @DATA(wl_status_obsoleto)
    FROM t141t
    WHERE mmsta = @cl_status_material_obsoleto.


  IF it_alv IS NOT INITIAL.
    SELECT matnr, mstae
      INTO TABLE @DATA(tl_mara_dcutt)
      FROM mara
      FOR ALL ENTRIES IN @it_alv
      WHERE matnr = @it_alv-dcutt.
    SELECT matnr, mstae
      INTO TABLE @DATA(tl_mara_dcutt_semi)
      FROM mara
      FOR ALL ENTRIES IN @it_alv
      WHERE matnr = @it_alv-dcutt_semi.
    SELECT matnr, mstae
      INTO TABLE @DATA(tl_mara_prton)
      FROM mara
      FOR ALL ENTRIES IN @it_alv
      WHERE matnr = @it_alv-prton.
    SELECT matnr, mstae
      INTO TABLE @DATA(tl_mara_prton_semi)
      FROM mara
      FOR ALL ENTRIES IN @it_alv
      WHERE matnr = @it_alv-prton_semi.
  ENDIF.



  SORT it_alv BY matnr vkorg vtweg kunnr.
  LOOP AT it_alv ASSIGNING <fs_alv>.
    READ TABLE tl_mara_dcutt ASSIGNING FIELD-SYMBOL(<fs_mara_dcutt>) WITH KEY matnr = <fs_alv>-dcutt.
    IF sy-subrc = 0 AND <fs_mara_dcutt>-mstae = cl_status_material_obsoleto.
      <fs_alv>-dcutt_status = wl_status_obsoleto-mtstb.
    ENDIF.

    READ TABLE tl_mara_dcutt_semi ASSIGNING FIELD-SYMBOL(<fs_mara_dcutt_semi>) WITH KEY matnr = <fs_alv>-dcutt_semi.
    IF sy-subrc = 0 AND <fs_mara_dcutt_semi>-mstae = cl_status_material_obsoleto.
      <fs_alv>-dcutt_semi_status = wl_status_obsoleto-mtstb.
    ENDIF.

    READ TABLE tl_mara_prton ASSIGNING FIELD-SYMBOL(<fs_mara_prton>) WITH KEY matnr = <fs_alv>-prton.
    IF sy-subrc = 0 AND <fs_mara_prton>-mstae = cl_status_material_obsoleto.
      <fs_alv>-prton_status = wl_status_obsoleto-mtstb.
    ENDIF.

    READ TABLE tl_mara_prton_semi ASSIGNING FIELD-SYMBOL(<fs_mara_prton_semi>) WITH KEY matnr = <fs_alv>-prton_semi.
    IF sy-subrc = 0 AND <fs_mara_prton_semi>-mstae = cl_status_material_obsoleto.
      <fs_alv>-prton_semi_status = wl_status_obsoleto-mtstb.
    ENDIF.

    IF <fs_alv>-lvorm = 'X'.
      <fs_alv>-color = 'C600'.
    ENDIF.
  ENDLOOP.
ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_handle_hotspot_click
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_handle_hotspot_click USING vp_dynpro vp_row_id vp_column_id wp_alv.
  DATA wl_alv LIKE LINE OF it_alv.
  MOVE-CORRESPONDING wp_alv TO wl_alv.

  CASE vp_column_id.
    WHEN 'MATNR'.
      CHECK wl_alv-matnr IS NOT INITIAL.
      SET PARAMETER ID 'MXX' FIELD 'K'.
      SET PARAMETER ID 'MAT' FIELD wl_alv-matnr.
      CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.
    WHEN 'DCUTT'.
      CHECK wl_alv-dcutt IS NOT INITIAL.
      SET PARAMETER ID 'MXX' FIELD 'K'.
      SET PARAMETER ID 'MAT' FIELD wl_alv-dcutt.
      CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.
    WHEN 'PRTON'.
      CHECK wl_alv-prton IS NOT INITIAL.
      SET PARAMETER ID 'MXX' FIELD 'K'.
      SET PARAMETER ID 'MAT' FIELD wl_alv-prton.
      CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.
    WHEN 'INKTN'.
      CHECK wl_alv-inktn IS NOT INITIAL.
      SET PARAMETER ID 'MXX' FIELD 'K'.
      SET PARAMETER ID 'MAT' FIELD wl_alv-inktn.
      CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.
    WHEN 'INKTN_SEMI'.
      CHECK wl_alv-inktn IS NOT INITIAL.
      SET PARAMETER ID 'MXX' FIELD 'K'.
      SET PARAMETER ID 'MAT' FIELD wl_alv-inktn_semi.
      CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.
    WHEN 'DCUTT_SEMI'.
      CHECK wl_alv-dcutt_semi IS NOT INITIAL.
      SET PARAMETER ID 'MXX' FIELD 'K'.
      SET PARAMETER ID 'MAT' FIELD wl_alv-dcutt_semi.
      CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.
    WHEN 'PRTON_SEMI'.
      CHECK wl_alv-prton_semi IS NOT INITIAL.
      SET PARAMETER ID 'MXX' FIELD 'K'.
      SET PARAMETER ID 'MAT' FIELD wl_alv-prton_semi.
      CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.
    WHEN 'MATNR_SEMI'.
      CHECK wl_alv-matnr_semi IS NOT INITIAL.
      SET PARAMETER ID 'MXX' FIELD 'K'.
      SET PARAMETER ID 'MAT' FIELD wl_alv-matnr_semi.
      CALL TRANSACTION 'MM03' AND SKIP FIRST SCREEN.
    WHEN 'KUNNR'.
      CHECK wl_alv-kunnr IS NOT INITIAL.
      SET PARAMETER ID 'KUN' FIELD wl_alv-kunnr.
      SET PARAMETER ID 'VKO' FIELD wl_alv-vkorg.
      SET PARAMETER ID 'VTW' FIELD wl_alv-vtweg.
      SET PARAMETER ID 'SPA' FIELD wl_alv-spart.
      CALL TRANSACTION 'VD03' AND SKIP FIRST SCREEN.
    WHEN 'VBELN'.
      CHECK wl_alv-vbeln IS NOT INITIAL.
      SET PARAMETER ID 'AUN' FIELD wl_alv-vbeln.
      CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.



  ENDCASE.

ENDFORM.
