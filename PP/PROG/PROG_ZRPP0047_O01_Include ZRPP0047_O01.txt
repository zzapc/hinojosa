*&---------------------------------------------------------------------*
*&  Include           ZRPP0047_O01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.
  DATA: lv_meins_destino TYPE meins,
        lt_marm          TYPE STANDARD TABLE OF marm,
        wa_marm          TYPE marm.

  PERFORM f_inicializacion_sel.
  CLEAR: gv_okcode, sy-ucomm.

  SET PF-STATUS 'STATUS_0100'.
  SET TITLEBAR 'TITTLE_0100'.

  IF gv_matnr IS INITIAL OR gv_werks IS INITIAL OR gv_charg IS INITIAL.
    LOOP AT SCREEN INTO DATA(wa_screen) .
      IF wa_screen-group1 = 'G1'.
        wa_screen-input = '0'.
        MODIFY screen FROM wa_screen.
      ENDIF.
    ENDLOOP.
  ELSE.
    LOOP AT SCREEN INTO DATA(wa_screen1).
      IF wa_screen1-group1 = 'G1'.
        IF gv_bloquear_campos = 'X'.
          wa_screen1-input = '0'.
        ELSE.
          wa_screen1-input = '1'.
        ENDIF.
      ENDIF.
      MODIFY screen FROM wa_screen1.
    ENDLOOP.
  ENDIF.

  IF gv_lgort IS INITIAL AND ( gv_matnr IS NOT INITIAL AND
                               gv_werks IS NOT INITIAL AND
                               gv_charg IS NOT INITIAL ).
    SELECT SINGLE lgort FROM mchb
      INTO gv_lgort
      WHERE matnr = gv_matnr_int AND
            werks = gv_werks AND
            charg = gv_charg.
  ENDIF.

  IF budat IS INITIAL.
    budat = sy-datum.
  ENDIF.

  PERFORM calcular_cantidades.
*  PERFORM tolerancia.

  gv_matnr_ant = gv_matnr. " almacenamos el material
  gv_matnr_alta_ant = gv_matnr_alta. " almacenamos el material

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  IF gv_matnr_alta IS INITIAL.
    CLEAR gv_menge_alta_teo.
  ENDIF.
  IF budat IS INITIAL.
    budat = sy-datum.
  ENDIF.

  PERFORM calcular_cantidades.
  PERFORM tolerancia.

  CASE gv_okcode.
    WHEN 'BACK'.
      CLEAR: gv_okcode.
      LEAVE PROGRAM.

    WHEN 'EXE'.
      CLEAR: gv_okcode.
      PERFORM lanzar_proceso.

      CLEAR: gv_werks, gv_matnr, gv_matnr_int, gv_matnr_ext, gv_charg,
             gv_menge, gv_meins, gv_maktx,
             gv_matnr_alta, gv_matnr_alta_int, gv_matnr_alta_ext,
             gv_lgort.

    WHEN 'LOG'.
      CLEAR: gv_okcode.
      PERFORM mostrar_log .
  ENDCASE.
ENDMODULE.
MODULE gestionar_datos.
  IF gv_matnr_ant IS NOT INITIAL
    AND gv_matnr_ant NE gv_matnr. " si ha cambiado el PT
    CLEAR: gv_menge_alta, gv_meins_alta, gv_menge_alta_teo.
  ENDIF.
  IF gv_matnr_alta_ant IS NOT INITIAL
    AND gv_matnr_alta_ant NE gv_matnr_alta. " si ha cambiado el PT
    CLEAR: gv_menge_alta, gv_meins_alta, gv_menge_alta_teo.
  ENDIF.
ENDMODULE.
