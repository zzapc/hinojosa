*&---------------------------------------------------------------------*
*&  Include           ZRPP0029_FORMS
*&---------------------------------------------------------------------*


FORM obtener_datos_3.

  DATA:  lso_datum   TYPE  trgr_date,
         lt_ztpp0030 TYPE STANDARD TABLE OF ztpp0009.

  lso_datum[] = so_fecha[].


*  lt_ztpp0030 = CORRESPONDING #( gti_datos ).
  CALL METHOD zcl_secuenciador=>obtener_datos_secuenciador
    EXPORTING
      i_werks     = p_werks
      i_so_fechas = lso_datum[]
    IMPORTING
      ot_ztpp0009 = lt_ztpp0030.

  gti_datos = CORRESPONDING #( lt_ztpp0030 ).


      CLEAR gt_ztpp0009_upd[].
    gt_ztpp0009_upd[] = CORRESPONDING #( gti_datos ).

    CALL METHOD zcl_secuenciador=>set_icons
      EXPORTING
        it_ztpp0009 = gt_ztpp0009_upd
      IMPORTING
        ot_ztpp0009 = gt_ztpp0009_upd.

    gti_datos[] = CORRESPONDING #( gt_ztpp0009_upd ).

*  PERFORM ordenar_index TABLES gti_datos.
  PERFORM ordenar_index. " TABLES gti_datos.

   PERFORM cambios_colores." TABLES gti_datos.


ENDFORM.                    " OBTENER_DATOS


FORM calcular_rollos USING   p_werks    TYPE werks_d
                             p_kg       TYPE zgamng
                    CHANGING p_rollos   TYPE zzrollos
                             p_tornadas TYPE ztornada.
  CASE p_werks.
    WHEN  gc_3020. "Coeficiente 1000 para Sarriá
      p_tornadas = zcl_secuenciador=>gc_tornadas_3020.
      p_rollos   = ceil( p_kg / zcl_secuenciador=>gc_kg_rollo_3020 ).
    WHEN  gc_3000. "Coeficiente 1200 para l'Alquería
      p_tornadas = zcl_secuenciador=>gc_tornadas_3000.
      p_rollos   = ceil( p_kg / zcl_secuenciador=>gc_kg_rollo_3000 ).
  ENDCASE.

ENDFORM.

FORM calcular_kg_orden USING    p_werks           TYPE werks_d
                                p_aufnr           TYPE aufnr
                       CHANGING p_kg_totales      TYPE menge_d
                                p_rollos_totales  TYPE zzrollos.

  SELECT SUM( menge ) , COUNT(*)
    FROM aufm
    INTO ( @DATA(l_sum_not) , @DATA(l_cont_not) )
    WHERE bwart = '101'   AND
          werks = @p_werks AND
          aufnr = @p_aufnr.

  SELECT SUM( menge ) , COUNT(*)
    FROM aufm
    INTO ( @DATA(l_sum_del) , @DATA(l_cont_del) )
    WHERE bwart = '102'   AND
          werks = @p_werks AND
          aufnr = @p_aufnr.

  p_kg_totales = l_sum_not - l_sum_del.

  p_rollos_totales = l_cont_not - l_cont_del.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  QUITAR_CEROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM quitar_ceros  CHANGING p_variable.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = p_variable
    IMPORTING
      output = p_variable.

ENDFORM.                    " QUITAR_CEROS
*&---------------------------------------------------------------------*
*&      Form  NOMBRE_CLIENTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM nombre_cliente USING    p_kunnr
                    CHANGING p_name.

  SELECT SINGLE name1 FROM kna1
  INTO p_name
  WHERE kunnr EQ p_kunnr.

ENDFORM.                    " NOMBRE_CLIENTE


*&---------------------------------------------------------------------*
*&      Form  CAMBIOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM cambios_colores.

  DATA: lv_calidad_ant TYPE zzcalidad,
        lv_gramaje_ant TYPE zzgramaje,
        lv_ancho_ant   TYPE zancho,
        lv_cont        TYPE i.

  LOOP AT gti_datos ASSIGNING FIELD-SYMBOL(<fs_datos>).
    lv_cont = lv_cont + 1.

*Index
    <fs_datos>-zindex = lv_cont.

*Cambio de calidad, gramaje y ancho
*    IF <fs_datos>-matkl NE lv_calidad_ant.
*      <fs_datos>-icon_calidad = '@9Z@'.
*    ELSE.
*      CLEAR <fs_datos>-icon_calidad.
*    ENDIF.
*
*    IF <fs_datos>-zzgramaje NE lv_gramaje_ant.
*      <fs_datos>-icon_gramaje = '@U6@'.
*    ELSE.
*      CLEAR <fs_datos>-icon_gramaje.
*    ENDIF.
*
*    IF <fs_datos>-zzancho NE lv_ancho_ant.
*      <fs_datos>-icon_ancho = '@UF@'.
*    ELSE.
*      CLEAR <fs_datos>-icon_ancho.
*    ENDIF.
*
*    clear: <fs_datos>-zicon_observa,
*           <fs_datos>-zicon_obs_pope,
*           <fs_datos>-zicon_bop_par.
*
*    IF <fs_datos>-observaciones IS NOT INITIAL.
*      <fs_datos>-zicon_observa = '@AH@'. " Icono   Cuadrado amarillo admiracion
*    ENDIF.

*    IF <fs_datos>-observ_pope IS NOT INITIAL.
*      <fs_datos>-zicon_obs_pope = '@0S@'. " I "informational"
*    ENDIF.
*
*    IF <fs_datos>-pedido_pos2 IS NOT INITIAL.
*      <fs_datos>-zicon_bop_par = '@46@'.
*    ENDIF.


*    PERFORM icon_estado USING <fs_datos>
*                     CHANGING <fs_datos>-icon_estado.

*Refresco
*    CLEAR: lv_calidad_ant,lv_gramaje_ant, lv_ancho_ant.
*    lv_calidad_ant = <fs_datos>-matkl.
*    lv_gramaje_ant = <fs_datos>-zzgramaje.
*    lv_ancho_ant = <fs_datos>-zzancho.

    DATA: gs_colinfo TYPE LINE OF lvc_t_scol.

* Pintamos de rojo la orden, cuando los kg fabricados > kg.OF
    DELETE <fs_datos>-color WHERE fname = 'NUM_FABR' OR
                                  fname = 'KG_FABRICACION'.
    IF <fs_datos>-gamng < <fs_datos>-kg_fabricados.
      CLEAR gs_colinfo.
      PERFORM colorer_celda USING 'AUFNR' '6'
                            CHANGING gs_colinfo.
      APPEND gs_colinfo TO <fs_datos>-color.
    ENDIF.


* Pintamos amarillo ordenes desdobladas.
    DELETE <fs_datos>-color WHERE fname = 'NUM_FABR' OR
                                  fname = 'KG_FABRICACION'.

    IF <fs_datos>-num_fabr > 0 AND
       <fs_datos>-num_fabr < 100.
      CLEAR gs_colinfo.
      PERFORM colorer_celda USING 'NUM_FABR' '5'
                            CHANGING gs_colinfo.
      APPEND gs_colinfo TO <fs_datos>-color.
      PERFORM colorer_celda USING 'KG_FABRICACION' '5'
                           CHANGING gs_colinfo.

      APPEND gs_colinfo TO <fs_datos>-color.

    ELSEIF <fs_datos>-num_fabr > 99.
      CLEAR gs_colinfo.
      PERFORM colorer_celda USING 'NUM_FABR' '3'
                            CHANGING gs_colinfo.
      APPEND gs_colinfo TO <fs_datos>-color.
      PERFORM colorer_celda USING 'KG_FABRICACION' '3'
                           CHANGING gs_colinfo.

      APPEND gs_colinfo TO <fs_datos>-color.
*    else.
    ENDIF.

* Pintamos de rojo la orden, cuando los kg fabricados > kg.OF
    DELETE <fs_datos>-color WHERE fname = 'HORAS_PARO'. " Borramos el color por si el nuevo valor es 0
    IF <fs_datos>-horas_paro > 0.
      CLEAR gs_colinfo.
      PERFORM colorer_celda USING 'HORAS_PARO' '6'
                            CHANGING gs_colinfo.
      APPEND gs_colinfo TO <fs_datos>-color.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " CAMBIOS

FORM colorer_celda  USING    p_columna  TYPE lvc_fname
                             p_color    TYPE int1
                    CHANGING ls_cellcolor TYPE lvc_s_scol.


  CLEAR ls_cellcolor.
  ls_cellcolor-fname = p_columna. "ls_mod_cells-fieldname.
  ls_cellcolor-color-col = p_color. "'6' .
  ls_cellcolor-color-int = '0'.

ENDFORM.                    " COLORER_CELDA

*&---------------------------------------------------------------------*
*&      Form  OBTENER_ANCHO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM obtener_ancho USING p_ebeln p_ebelp CHANGING p_ancho.
  DATA: lv_matnr TYPE matnr.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_ebeln
    IMPORTING
      output = p_ebeln.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_ebelp
    IMPORTING
      output = p_ebelp.

  IF p_ebeln(4) EQ '0044'. "Pedido de compras
    CLEAR lv_matnr.
    SELECT SINGLE matnr
      FROM ekpo
      INTO lv_matnr
      WHERE ebeln EQ p_ebeln
      AND ebelp EQ p_ebelp.
  ELSE. "Pedido de ventas
    CLEAR lv_matnr.
    SELECT SINGLE matnr
      FROM vbap
      INTO lv_matnr
      WHERE vbeln EQ p_ebeln
      AND posnr EQ p_ebelp.
  ENDIF.

  SELECT SINGLE zzancho
    FROM mara
  INTO p_ancho
  WHERE matnr EQ lv_matnr.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ICON_ESTADO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM icon_estado USING    p_reg               TYPE ty_alv
                 CHANGING p_icon_estado TYPE zicon_estado.

  CASE 'X'.
    WHEN p_reg-ind_bloq.
      p_icon_estado = '@06@'.

    WHEN p_reg-ind_fin.
*      p_icon_estado = '@DF@'.
          IF p_reg-num_fabr < 100.
            p_icon_estado = '@DF@'.
          ELSE.
            p_icon_estado = '@9B@'. "'@F1@'. " Bandereta roja
          ENDIF.

    WHEN p_reg-ind_calidad_ok.
      p_icon_estado = '@EJ@'.

    WHEN OTHERS.
      CASE p_reg-stat.
        WHEN gc_i0002. " Liberada
          p_icon_estado = '@5Y@'.
        WHEN gc_i0001.  "Abierta
          CLEAR p_icon_estado.
        WHEN OTHERS.
      ENDCASE.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LINES_SELECTED
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM lines_selected TABLES lt_datos STRUCTURE ty_alv.
FORM lines_selected TABLES lt_datos STRUCTURE ls_alv.

  DATA: lt_selected_row TYPE                   lvc_t_roid,
        ls_selected_row TYPE lvc_s_roid,
        ls_datos        TYPE ty_alv,
        lv_lines        TYPE i.


  REFRESH lt_selected_row.
  CLEAR: lt_selected_row, ls_selected_row, lv_lines.

  CALL METHOD g_grid->get_selected_rows
    IMPORTING
      et_row_no = lt_selected_row.

  DESCRIBE TABLE lt_selected_row LINES lv_lines.

  IF lv_lines EQ 0. "No se han seleccionado lineas
    MESSAGE e131(zpp).
  ELSE.
    REFRESH lt_datos.
    CLEAR: ls_datos, ls_selected_row.

    LOOP AT lt_selected_row INTO ls_selected_row.
      READ TABLE gti_datos INTO ls_datos INDEX ls_selected_row-row_id.
*      READ TABLE gti_datos INTO ls_datos INDEX ls_selected_row-zindex.

      IF ls_datos IS NOT INITIAL.
*        ls_datos-row_id = ls_selected_row-row_id. "index

        APPEND ls_datos TO lt_datos.
        CLEAR: ls_selected_row,ls_datos.
      ENDIF.
    ENDLOOP.
  ENDIF.
*  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DATOS_0200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_datos_0200 .

  DATA: lt_toolbar_excluding TYPE ui_functions,
        lt_fieldcat          TYPE lvc_t_fcat.

  DATA: ls_lvc_s_layo TYPE lvc_s_layo,
        ls_variant    TYPE disvariant.


  IF g_custom_container IS NOT BOUND.
    CREATE OBJECT g_custom_container
      EXPORTING
        container_name = gc_container.

    CREATE OBJECT g_grid
      EXPORTING
        i_parent      = g_custom_container
        i_appl_events = 'X'.


*   Variante
    PERFORM prepare_variant CHANGING ls_variant.

*   Preparamos el catálogo de campos
    PERFORM prepare_fielcat CHANGING lt_fieldcat.

*   Preparamos el layout
    PERFORM prepare_layout CHANGING ls_lvc_s_layo.

*   Excluir toolbar
    PERFORM toolbar_excluding CHANGING lt_toolbar_excluding.

*   Para los eventos
    CREATE OBJECT g_application.
    SET HANDLER g_application->handle_hotspot      FOR g_grid.
    SET HANDLER g_application->handle_user_command FOR g_grid.
    SET HANDLER g_application->handle_data_changed FOR g_grid.
    SET HANDLER g_application->handle_toolbar      FOR g_grid.

    SET HANDLER g_application->alv_on_drag      FOR g_grid.
    SET HANDLER g_application->alv_on_drop      FOR g_grid.
*    SET HANDLER g_application->alv_on_drop      FOR ALL INSTANCES.

    PERFORM alv_dragdrop CHANGING ls_lvc_s_layo-s_dragdrop-row_ddid.
*    ls_lvc_s_layo-s_dragdrop-row_ddid =
*   Mostramos el ALV
    CALL METHOD g_grid->set_table_for_first_display
      EXPORTING
        i_buffer_active      = ' '
        i_bypassing_buffer   = gc_true
        is_layout            = ls_lvc_s_layo
        it_toolbar_excluding = lt_toolbar_excluding
        i_structure_name     = 'GTI_DATOS'
        is_variant           = ls_variant
        i_save               = 'A'
      CHANGING
        it_outtab            = gti_datos[]
        it_fieldcatalog      = lt_fieldcat[].
  ELSE.
    IF g_dblclick = 'X'.
      CLEAR g_dblclick.
    ELSE.
      PERFORM refrescar_alv.
    ENDIF.

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS_0200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos_0200 .
*  IF gv_ordenar NE gc_true.
*    REFRESH gti_datos.
*    CLEAR gti_datos.
*    PERFORM obtener_datos_3.
*
*  ENDIF.

* Datos para el informe
*  PERFORM obtener_datos.
*  PERFORM obtener_datos_3

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CAMBIAR_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_<FS_DATOS>_AUFNR  text
*----------------------------------------------------------------------*
FORM cambiar_status  USING    p_aufnr.

  DATA: wa_return        TYPE                   bapiret2,
        t_orders         TYPE TABLE OF          bapi_order_key,
        wa_order         TYPE                   bapi_order_key,
        t_detail_return  TYPE STANDARD TABLE OF bapi_order_return,
        wa_detail_return TYPE                   bapi_order_return.

  wa_order-order_number = p_aufnr.
  APPEND wa_order TO t_orders.

  CALL FUNCTION 'BAPI_PROCORD_SETUSERSTATUS'
    EXPORTING
      status_profile     = 'ZPP00001'
      status             = 'ZP01'
      work_process_group = 'COWORK_BAPI'
      work_process_max   = 99
    IMPORTING
      return             = wa_return
    TABLES
      orders             = t_orders
      detail_return      = t_detail_return
*     APPLICATION_LOG    =
    .
  READ TABLE t_detail_return INTO wa_detail_return WITH KEY type = 'E'.
  IF sy-subrc <> 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ELSE.
*    APPEND wa_return TO gt_messages.
  ENDIF.
ENDFORM.


FORM alv_dragdrop CHANGING p_handle TYPE i.
  DATA: lv_effct TYPE i,
*        lv_hndla TYPE i,
        ls_dragd TYPE lvc_s_dd01.

* Define a behaviour for drag and drop on ALV objects and get its handle.

* Define a drag & Drop behaviour for the whole grid
  CREATE OBJECT gr_dragd.
  lv_effct     = cl_dragdrop=>move + cl_dragdrop=>copy.

  CALL METHOD gr_dragd->add
    EXPORTING
      flavor     = 'Line'
      dragsrc    = 'X'
      droptarget = 'X'
      effect     = lv_effct.

  CALL METHOD gr_dragd->get_handle
    IMPORTING
      handle = p_handle.


ENDFORM.

FORM mostrar_popup_observ_pope USING  p_datos TYPE ty_alv.

  MESSAGE p_datos-observ_pope TYPE 'I'.


ENDFORM.

FORM mostrar_popup_observaciones USING  p_datos TYPE ty_alv.

  MESSAGE p_datos-observaciones TYPE 'I'.


ENDFORM.
