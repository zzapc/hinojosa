*&---------------------------------------------------------------------*
*&  Include           ZPPRF001_MODULE
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.
  DATA: l_ret_dat2 TYPE char02.
  CASE sy-ucomm.

    WHEN 'BACK'.
*      SET SCREEN 0.
      LEAVE TO SCREEN 020.
    WHEN 'CONS'.
      g_rec_tur = 'T'. " Cargar datos de control de TURNO

      PERFORM obtener_datos_control USING g_rec_tur
                              CHANGING l_ret_dat2.
      IF l_ret_dat2 <> '00'.
        DATA(l_msg_err) = CONV string( 'Turno sin traspasos.' ).
        MESSAGE l_msg_err TYPE 'S' DISPLAY LIKE 'W'.
        RETURN.
      ELSE.
*        CALL SCREEN 820.
        g_dynpro = '100'.

        SET SCREEN 820.
      ENDIF.

    WHEN 'NOTAG'. "Sin etiqueta/bala hermana
      CLEAR gs_dyn101.
*      CALL SCREEN 101.
      SET SCREEN 101.
  ENDCASE.


ENDMODULE.

MODULE user_command_0101 INPUT.

  DATA: l_msg5 TYPE string.
  CASE sy-ucomm.

    WHEN 'BACK'.
****      SET SCREEN 0.
*      LEAVE to SCREEN 100.
      LEAVE SCREEN.
    WHEN 'ACPT'.
      CALL METHOD zclpp_consumo_recetas_mp=>generar_lote_hermano
        EXPORTING
          i_werks      = g_werks
          i_id_receta  = g_id_receta
          i_lote       = gs_dyn101-lote
          i_operario   = g_operario
          i_sw_pis_reg = 'P'
        IMPORTING
          o_rc         = l_rc.
      IF l_rc = '00'.
        l_msg5 = 'Lote hermano leído OK'.
        REPLACE '&' IN l_msg5 WITH l_charg.
        CLEAR gs_dyn101.
        MESSAGE l_msg5 TYPE 'S'.

      ENDIF.
      LEAVE SCREEN.

*      LEAVE TO SCREEN 100.
    WHEN OTHERS.
      SET SCREEN 101.
  ENDCASE.

ENDMODULE.



*&---------------------------------------------------------------------*
*&      Module  PROCESS_BARCODE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE process_barcode INPUT.

  CHECK sy-ucomm <> 'BACK' AND
        sy-ucomm <> 'CONS'.

  PERFORM proceso_barcode.

ENDMODULE.

MODULE process_barcode_101 INPUT.

  CHECK sy-ucomm <> 'BACK'.

  PERFORM proceso_barcode_101.

ENDMODULE.


MODULE process_id_receta INPUT.

  CHECK sy-ucomm <> 'BACK'.

  CLEAR: gs_datos_receta, g_receta_800_ok.
  DATA(l_len2) = strlen( g_id_receta ).

  IF l_len2 < 6.

    DATA(l_msg3) = CONV string( 'Receta inexistente' ).
    MESSAGE l_msg3 TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.

  ENDIF.

  CALL METHOD zclpp_recetas_mp=>obtener_datos_form_receta_mp
    EXPORTING
      i_werks                 = g_werks
      i_id_receta             = g_id_receta
    IMPORTING
      os_datos_form_receta_mp = gs_datos_receta
      o_rc                    = DATA(l_rc2).

  IF l_rc2 <> '00'.

    l_msg3 = CONV string( 'Receta inexistente' ).
    MESSAGE l_msg3 TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.

  ELSEIF zclpp_recetas_mp=>obtener_temporalidad_receta(
              i_fecha_ini = gs_datos_receta-fecha_ini
              i_hora_ini  = gs_datos_receta-hora_ini
              i_fecha_fin = gs_datos_receta-fecha_fin
              i_hora_fin  = gs_datos_receta-hora_fin ) = 'F'.
*    data(l_fecha) = |{ gs_datos_receta-fecha_ini+6(2) }-{ gs_datos_receta-fecha_ini+4(2) }-{ gs_datos_receta-fecha_ini(2) }|.
    DATA: l_fecha TYPE char10.
    DATA: l_hora TYPE char8.

    WRITE gs_datos_receta-fecha_ini TO l_fecha DD/MM/YYYY.
    WRITE gs_datos_receta-hora_ini  TO l_hora USING EDIT MASK '__:__:__'.
    l_msg3 = CONV string( |Receta no activa hasta el { l_fecha } a las { l_hora }| ).
    MESSAGE l_msg3 TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.

  ELSEIF gw_pulper_cons = 'P'.
    PERFORM iniciar_timer.
  ENDIF.

  g_receta_800_ok = 'X'.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0100 OUTPUT.
*  SET PF-STATUS '100'.
*  SET TITLEBAR '10'.
*  CLEAR g_barcode.
*
*  PERFORM crear_objeto_app.
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0010  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0010 INPUT.

  CASE sy-ucomm.
    WHEN '001'.
*      LEAVE TO TRANSACTION 'ZPPRF001'.

*      IF 'X' = zclpp_consumo_recetas_mp=>es_antiguo_tratamiento( i_werks = g_werks ).
*        CALL SCREEN 020.
*      ELSE.
*      CALL SCREEN 015.
      SET SCREEN 015.
*      CALL SCREEN 999. " Pruebas Radiobutton para Nuevo Picking

    WHEN '002'.
*      LEAVE TO TRANSACTION 'ZPPRF002'.
*      CALL SCREEN 030.
      SET SCREEN 030.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0010  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0010 OUTPUT.
**  SET PF-STATUS 'xxxxxxxx'.
*  SET TITLEBAR '10'.
*  SET PF-STATUS '100'.
*  CLEAR g_barcode.
*
*  SELECT SINGLE parva INTO g_werks FROM usr05
*  WHERE bname = sy-uname AND parid = 'WRK'.
*
*  IF o_app IS NOT BOUND.
*    o_app = NEW zcl_app( ).
*  ENDIF.
*
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0200 OUTPUT.
*  SET PF-STATUS '100'.
*  SET TITLEBAR '10'.
*  CLEAR g_barcode.
*  DATA: lt_values TYPE vrm_values.
*
**   (almacenes 1000 a 1019, 1022 y 1023)
*
*  DATA: "l_lgort      TYPE l_lgort VALUE '1000',
*        l_name_lgort TYPE lgobe.
*
*  l_lgort = 1000.
*
*  REFRESH lt_values.
*
*  SELECT * INTO TABLE @DATA(lt_lgort) FROM t001l WHERE werks = @g_werks.
*
*
*  TRY.
*      g_lgort_origen_txt = lt_lgort[ lgort = g_lgort_origen ]-lgobe.
*    CATCH cx_sy_itab_line_not_found.
*  ENDTRY.
*
*  DO 20 TIMES.
*    TRY.
*        l_name_lgort = lt_lgort[ lgort = l_lgort ]-lgobe.
*      CATCH cx_sy_itab_line_not_found.
*    ENDTRY.
*
*
*    IF NOT line_exists( lt_values[ key = l_lgort ] ).
*      APPEND VALUE vrm_value( key  = l_lgort
*                              text = |{ l_lgort }-{ l_name_lgort }| ) TO lt_values.
*      ADD 1 TO l_lgort.
*    ENDIF.
*  ENDDO.
*
*  l_lgort = 1022.
*  DO 8 TIMES.
*    TRY.
*        l_name_lgort = lt_lgort[ lgort = l_lgort ]-lgobe.
*      CATCH cx_sy_itab_line_not_found.
*    ENDTRY.
*
*
*    IF NOT line_exists( lt_values[ key = l_lgort ] ).
*      APPEND VALUE vrm_value( key  = l_lgort
*                              text = |{ l_lgort }-{ l_name_lgort }| ) TO lt_values.
*      ADD 1 TO l_lgort.
*    ENDIF.
*  ENDDO.
*
*
*
*
*
*  CALL FUNCTION 'VRM_SET_VALUES'
*    EXPORTING
*      id              = 'G_LGORT_DSTINO'
*      values          = lt_values
*    EXCEPTIONS
*      id_illegal_name = 0
*      OTHERS          = 0.
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  LOTE_RECORTE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE lote_recorte INPUT.
  DATA:
    l_matnr_alpha_in TYPE matnr,
    l_mtart          TYPE mtart,
    l_matnr          TYPE matnr,
    l_clabs          TYPE labst,
    l_meins          TYPE meins
    .

  CHECK g_barcode IS NOT INITIAL.

  IF g_werks IS INITIAL.
    SELECT SINGLE parva INTO g_werks FROM usr05
                                    WHERE bname = sy-uname AND parid = 'WRK'.
  ENDIF.

  DATA(l_len) = strlen( g_barcode ).

  DATA(l_len_charg) = l_len - 10.

  g_charg = g_barcode+l_len_charg(10).
  IF l_len_charg > 0.
    g_matnr = |{ g_barcode(l_len_charg) ALPHA = OUT }|.
  ELSE.
    SELECT SINGLE matnr INTO g_matnr FROM mcha WHERE werks = g_werks AND charg = g_charg.
  ENDIF.

  l_matnr_alpha_in = |{ g_matnr ALPHA = IN }|.

  SELECT SINGLE: maktx INTO g_maktx FROM makt WHERE matnr = l_matnr_alpha_in AND spras = sy-langu,
                     mtart INTO l_mtart FROM mara WHERE matnr = l_matnr_alpha_in.


  IF l_mtart NE 'ZREC' AND  l_matnr NE c_matnr_pulper.
    DATA(l_msg) = CONV string( 'Error:Lote & inexistente' ).
    REPLACE '&' IN l_msg WITH l_charg.
    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  SELECT SINGLE  mchb~clabs mara~meins t001l~lgort t001l~lgobe
                INTO ( l_clabs, l_meins, g_lgort_origen, g_lgobe )

                FROM mchb INNER JOIN t001l
                                  ON mchb~lgort = t001l~lgort
                          INNER JOIN mara
                                  ON mchb~matnr = mara~matnr
                WHERE mchb~matnr = l_matnr_alpha_in
                  AND mchb~werks = g_werks
                  AND mchb~charg = g_charg
                  AND mchb~clabs > 0.
  IF sy-subrc NE 0.
    MESSAGE 'Lote no se encuentra disponible' TYPE 'W' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  g_peso = l_clabs.

  g_peso_text = |{ g_peso } KG|.

*  CALL SCREEN 210.
  SET SCREEN 210.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  CASE sy-ucomm.
    WHEN 'CANC'.
      PERFORM limpiar_campos.
*      SET SCREEN 0.
      LEAVE TO SCREEN 0200.
    WHEN 'EXEC'.
      PERFORM reubicar.
*      SET SCREEN 0.
      LEAVE TO SCREEN 0200.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0015  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0015 INPUT.

  CASE sy-ucomm.
    WHEN 'CONS' OR 'ACPT'.
      IF g_operario IS INITIAL.
        MESSAGE 'Seleccionar operario' TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.
        CALL METHOD zclpp_trazabilidad_usuario=>obtener_datos_turno
          IMPORTING
            o_turno = g_turno.
*        CALL SCREEN 020.
        SET SCREEN 020.
      ENDIF.

    WHEN 'BACK'.
      LEAVE TO SCREEN 10.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0020  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0020 INPUT.
*
  CASE sy-ucomm.
    WHEN '001'. " Antes de traspaso a pulper, login de receta

*      IF 'X' = zclpp_consumo_recetas_mp=>es_antiguo_tratamiento( i_werks = g_werks ).
*        CALL SCREEN 100.
*      ELSE.
      gw_pulper_cons = 'P'.
*      CALL SCREEN 800.
      g_dynpro = '0020'.
      SET SCREEN 800.
*      ENDIF.

    WHEN '002'.
*      CALL SCREEN 200.
      SET SCREEN 200.

    WHEN '003'. "Recetas
      gw_pulper_cons = 'C'.
*      CALL SCREEN 800.
      SET SCREEN 800.

    WHEN 'BACK'.
      LEAVE TO SCREEN 10.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0030  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0030 INPUT.
  CASE sy-ucomm.
    WHEN '001'.
*      CALL SCREEN 600.
      SET SCREEN 600.
**    WHEN '002'. DTM
**      CALL TRANSACTION 'ZSD0007'. DTM
    WHEN '003'.
*      CALL SCREEN 033.
      SET SCREEN 033.
    WHEN '004'.
*      CALL SCREEN 034.
      SET SCREEN 034.
    WHEN 'ZPICK'.
      CALL TRANSACTION 'ZPICK'.
    WHEN 'BACK'.
      LEAVE TO SCREEN 10.
  ENDCASE.
ENDMODULE.
MODULE user_command_0033 INPUT.
  CASE sy-ucomm.
    WHEN '001'.
      g_dynpro = '0310'.
      CLEAR g_lgort.
*      CALL SCREEN 309.
      SET SCREEN 309.
    WHEN '002'.
      g_dynpro = '0320'.
      CLEAR g_lgort.
*      CALL SCREEN 309.
      SET SCREEN 309.
    WHEN 'BACK'.
      LEAVE TO SCREEN 30.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0310  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0310 INPUT.
  CASE sy-ucomm.

    WHEN 'BACK'.
      IF sy-dynnr EQ '0312'.
        SET SCREEN 311.
      ELSE.
        IF lt_bobinas[] IS NOT INITIAL.
*          CALL SCREEN 315.
          g_dynpro = '0310'.
          SET SCREEN 315.
        ELSE.
          REFRESH lt_bobinas.
          CLEAR:g_matnr,g_charg,g_decision_empleo,g_kunnr,g_peso,g_peso_text,g_calidad,g_gramaje_ancho.

          LEAVE TO SCREEN 033.
        ENDIF.
      ENDIF.
    WHEN 'CONS'.
      IF lt_bobinas IS INITIAL.
        MESSAGE 'No hay bobinas leidas' TYPE 'S'.
        RETURN.
      ENDIF.
*      CALL SCREEN 311.
      SET SCREEN 311.
    WHEN 'DEL'.
*      CALL SCREEN 313.
      SET SCREEN 313.
    WHEN 'LGORT'.
      g_lgort_active = abap_false.
    WHEN 'ACPT'.
*      CALL SCREEN 314.
      IF lt_bobinas IS INITIAL.
        MESSAGE 'No hay bobinas leidas' TYPE 'S'.
        RETURN.
      ENDIF.

      SET SCREEN 314.

  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PROCESS_BARCODE_310  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE traspaso_entre_almacenes INPUT.

  DATA: l_obj_key TYPE ausp-objek,
        l_gramaje TYPE mara-zzgramaje,
        l_matkl   TYPE matkl,
        l_ancho   TYPE mara-zzancho.

  DATA: lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr,
        lt_return     TYPE bapiret2_t.

  DATA: BEGIN OF ls_lgort,
          sign,
          option TYPE c LENGTH 2,
          low    TYPE lgort_d,
          high   TYPE lgort_d,
        END OF ls_lgort,
        r_lgort LIKE STANDARD TABLE OF ls_lgort.

  DATA l_answer.

  CHECK g_barcode IS NOT INITIAL AND g_lgort IS NOT INITIAL ."AND sy-ucomm IS INITIAL.

  TRANSLATE g_barcode TO UPPER CASE.

  l_len = strlen( g_barcode ).

* Admitimos traspaso de bobina pulper (nuevo) y lote + XXXX donde XXXX=centro
  IF g_barcode(18) = '000000000002001764'.
    l_charg  = g_barcode+18.
  ELSE.

    IF l_len >= 10.

      l_len_charg = l_len - 10.

      l_charg = g_barcode(10).

    ELSE.
      l_charg  = g_barcode.
    ENDIF.
  ENDIF.

  DATA: l_barcode LIKE g_barcode,
        l_matnr_2 TYPE matnr.


  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = g_barcode
    IMPORTING
      output = l_barcode.


  g_barcode = l_barcode.

  SELECT SINGLE matnr
    INTO l_matnr
    FROM mchb
    WHERE werks = g_werks AND
          charg = l_charg AND
          clabs NE 0.

  l_matnr_2 =  |{ l_matnr ALPHA = OUT }|.
  IF sy-subrc NE 0.
    MESSAGE 'Error al determinar el material' TYPE 'W' DISPLAY LIKE 'E' .
    RETURN.
* 21/05/21 - 66924 - CMS No permitir traspaso de pulper a almacén 1040.
  ELSEIF g_lgort = '1040' AND l_matnr_2 = c_matnr_pulper.
    MESSAGE |Error: lote { l_charg } incorrecto o traspaso no permitido. F3 Cancelar| TYPE 'W' DISPLAY LIKE 'E' .
    PERFORM limpiar_campos_no_acum. "CMS 55009 Reinicia kg acumulados
    RETURN.
  ELSEIF g_lgort = '1000' AND l_matnr_2 <> c_matnr_pulper.
    MESSAGE |Error: lote { l_charg } incorrecto o traspaso no permitido. F3 Cancelar| TYPE 'W' DISPLAY LIKE 'E' .
    PERFORM limpiar_campos_no_acum. "CMS 55009 Reinicia kg acumulados
    RETURN.

  ENDIF.

  l_matnr_alpha_in = |{ l_matnr ALPHA = IN }|.

  l_obj_key = |{ l_matnr_alpha_in }{ l_charg }|.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_obj_key
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.

  IF line_exists( lt_return[ type = 'E'] ).
    l_msg =  'Error: lote & incorrecto o traspaso no permitido'.
    REPLACE '&' IN l_msg WITH l_charg.
    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    CLEAR:g_barcode, g_mostrar_botones.
    RETURN.
  ENDIF.

  TRY.
      g_kunnr           = lt_valueschar[ charact = 'Z_CLIENTE' ]-value_char.
    CATCH cx_sy_itab_line_not_found.
  ENDTRY.
  CLEAR g_peso_text.
  SELECT SINGLE clabs INTO g_peso FROM mchb WHERE matnr EQ l_matnr_alpha_in AND
                                                  charg EQ l_charg AND
                                                  werks EQ g_werks AND
                                                  clabs GT 0.
  IF sy-subrc EQ 0.
    g_peso_text = |{ g_peso DECIMALS = 0 } KG |.
  ELSE.
    MESSAGE 'Lote sin existencias' TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.


  SELECT SINGLE mtart matkl zzgramaje zzancho
                            FROM mara
                            INTO ( l_mtart, l_matkl, l_gramaje,l_ancho )
                            WHERE matnr = l_matnr_alpha_in.

  IF l_mtart NE 'ZPAP' AND l_matnr_alpha_in <> '000000000002001764'.
    " CMS 04/02/2020 Se añade la permisión que no sea ZPAP cuando se trata de material pulper
    MESSAGE 'Error:Lote leido no es ZPAP' TYPE 'S' DISPLAY LIKE 'E'.
*    PERFORM limpiar_campos.        "CMS 55009 Reinicia kg acumulados
    PERFORM limpiar_campos_no_acum. "CMS 55009 Reinicia kg acumulados
    RETURN.
  ENDIF.

  SELECT SINGLE wgbez60 FROM t023t INTO g_calidad WHERE matkl = l_matkl AND spras = sy-langu.


  g_gramaje_ancho = |{ l_gramaje }/{ l_ancho }|.
  g_matnr = |{ l_matnr ALPHA = OUT }|.
  g_charg = l_charg.


  SELECT lgort_origen FROM ztpp0026 INTO TABLE @DATA(lt_lgort_origen)
                                    WHERE werks EQ @g_werks AND lgort_destino = @g_lgort.
  IF sy-subrc NE 0.
    l_msg =  'Error: lote & incorrecto o traspaso no permitido'.
    REPLACE '&' IN l_msg WITH l_charg.
    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
*    CLEAR:g_barcode, g_mostrar_botones.",g_charg,g_peso,g_kunnr,g_gramaje_ancho,g_decision_empleo.

*    PERFORM limpiar_campos.              "CMS 55009
    PERFORM limpiar_campos_no_acum.      "CMS 55009 Reinicia kg acumulados
    RETURN.
  ENDIF.


  r_lgort = VALUE #( FOR ls IN lt_lgort_origen ( sign = 'I' option = 'EQ' low = ls-lgort_origen ) ).


  SELECT SINGLE lgort INTO ls_bobinas-lgort FROM mchb
                      WHERE matnr = l_matnr_alpha_in
                        AND charg = l_charg
                        AND lgort IN r_lgort
                        AND clabs GT 0.
  IF sy-subrc GT 0.
    l_msg =  'Error: lote & incorrecto o traspaso no permitido'.
    REPLACE '&' IN l_msg WITH l_charg.
    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    CLEAR:g_barcode, g_mostrar_botones.",g_charg,g_peso,g_kunnr,g_gramaje_ancho,g_decision_empleo.
    RETURN.

  ENDIF.

  IF ls_bobinas-lgort EQ g_lgort.
    MESSAGE 'Bobina existe en alm. destino' TYPE 'S' DISPLAY LIKE 'E'.
    CLEAR:g_barcode, g_mostrar_botones.",g_charg,g_peso,g_kunnr,g_gramaje_ancho,g_decision_empleo,g_peso_text,g_matnr,g_calidad.
    RETURN.
  ENDIF.

  g_charg_traspaso  =  l_charg.
  g_matnr_alpha_in  =  l_matnr_alpha_in.

  TRY.
      g_decision_empleo = lt_valueschar[ charact = 'LOBM_UDCODE' ]-value_char.
      g_decision_empleo = g_decision_empleo+9(1).

      IF g_decision_empleo = 'R'
     AND sy-dynnr = '0320'. " CMS Validar bobina de 2a solo para REPROCESO EXTERNO 53527

*      PERFORM exportar_campos_app.
*        CALL SCREEN 322. "Pantalla Aviso: Bobina de 2ªCalidad
        SET SCREEN 322. "Pantalla Aviso: Bobina de 2ªCalidad

      ENDIF.

    CATCH cx_sy_itab_line_not_found.
  ENDTRY.


  PERFORM traspaso_a_almacen.
* Antiguo codigo movido a "traspaso_a_almacen"
*  IF NOT line_exists( lt_bobinas[ charg = l_charg ] ).
*    ls_bobinas-matnr           = |{ l_matnr_alpha_in ALPHA = OUT }|.
*    ls_bobinas-charg           = l_charg.
*    ls_bobinas-decision_empleo = g_decision_empleo.
*    ls_bobinas-gramaje_ancho   = g_gramaje_ancho.
*    ls_bobinas-kunnr           = g_kunnr.
*    ls_bobinas-peso            = g_peso_text.
*    ls_bobinas-peso_real       = g_peso.
*    ls_bobinas-calidad         = g_calidad.
*
*    APPEND ls_bobinas TO lt_bobinas.
*
*    ADD g_peso TO g_peso_acumulado.
*    g_peso_acumulado_txt =  |{ g_peso_acumulado DECIMALS = 0 } KG |.
*  ENDIF.
*
*  MESSAGE 'Lote leído correctamente' TYPE 'S'.
*
*
*
*  CLEAR g_barcode.
*  PERFORM alinear_textos_pantalla.

*  g_mostrar_botones = abap_true.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0310  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0310 OUTPUT.
*  SET PF-STATUS '100'.
*  SET CURSOR FIELD 'G_BARCODE'.

*  IF lT_bobinas IS INITIAL.
*    LOOP AT SCREEN.
*      check screen-name eq 'CONSULTA'.
*      screen-active = 0.
*      screen-invisible = 1.
*      MODIFY SCREEN.
*    ENDLOOP.
*  ELSe.
*    LOOP AT SCREEN.
*      check screen-name eq 'CONSULTA'.
*      screen-active = 1.
*      screen-invisible = 0.
*      MODIFY SCREEN.
*    ENDLOOP.
*  ENDIF.

*
*  IF g_werks IS INITIAL.
*    SELECT SINGLE parva INTO g_werks FROM usr05
*                                    WHERE bname = sy-uname AND parid = 'WRK'.
*  ENDIF.
*
*
*  LOOP AT SCREEN.
*    CHECK screen-group1 = '001'.
*    IF g_mostrar_botones EQ abap_false.
*      screen-active = 0.
*      screen-input  = 0.
*    ELSE .
*      screen-active = 1.
*      screen-input  = 1.
*    ENDIF.
*    MODIFY SCREEN.
*  ENDLOOP.
*
*  IF sy-dynnr EQ '0310'.
*    SELECT ztpp0024~werks, ztpp0024~lgort, lgobe
*            FROM ztpp0024 JOIN t001l
*                            ON  ztpp0024~werks EQ t001l~werks
*                           AND ztpp0024~lgort EQ t001l~lgort
*                    INTO TABLE @DATA(lt_almacenes)
*                    WHERE ztpp0024~werks EQ @g_werks AND
*                          tipo_almacen   EQ '02'.
*  ELSE.
*    SELECT ztpp0024~werks, ztpp0024~lgort, lgobe
*         FROM ztpp0024 JOIN t001l
*                         ON  ztpp0024~werks EQ t001l~werks
*                        AND ztpp0024~lgort EQ t001l~lgort
*                 INTO TABLE @lt_almacenes
*                 WHERE ztpp0024~werks EQ @g_werks AND
*                       tipo_almacen   EQ '04'.
*
*  ENDIF.
*
*  lt_values =  CORRESPONDING #( lt_almacenes MAPPING key = lgort text = lgobe ).
*
*  CALL FUNCTION 'VRM_SET_VALUES'
*    EXPORTING
*      id              = 'G_LGORT'
*      values          = lt_values
*    EXCEPTIONS
*      id_illegal_name = 0
*      OTHERS          = 0.
*
*  IF g_lgort_active EQ abap_false.
*    LOOP AT SCREEN .
*      IF screen-name CS 'G_LGORT'.
*        screen-input = 0.
*        MODIFY SCREEN.
*      ENDIF.
*    ENDLOOP.
*    SET CURSOR FIELD 'G_BARCODE'.
*  ENDIF.



*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0311  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0311 OUTPUT.
*
*  DATA(l_index) = CONV i( g_pagina ) * 7.
*
*  DATA l_no_int TYPE i.
*
*  IF lt_bobinas IS INITIAL.
**  ls_bobinas-charg = '807PB0001'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0002'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0003'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0004'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0005'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0006'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0007'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0008'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0009'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0010'.
**  APPEND ls_bobinas to lt_bobinas.
*    RETURN.
*  ENDIF
*  .
*
*  DATA l_pag TYPE p DECIMALS 2.
*
*  l_pag = lines( lt_bobinas ) / 7.
*
*  IF l_pag LE 1.
*    g_max_paginas = 0.
*  ELSE.
*    g_max_paginas = trunc( l_pag ) .
*  ENDIF.
*
*  IF g_dynpro EQ '0310'.
*    g_titulo_311 = 'TRASPASO ENTRE ALMACENES'.
*  ELSEIF g_dynpro EQ '0320'.
*    g_titulo_311 = 'REPROCESO EXTERNO'.
*  ELSEIF g_dynpro EQ '0410'.
*    g_titulo_311 = 'PULPER A HJ NS PAPER'.
*  ELSEIF g_dynpro EQ '0510'.
*    g_titulo_311 = 'CAMBIAR CLIENTE'.
*  ENDIF.
*
*
*
*  LOOP AT SCREEN.
*    IF screen-name CS 'BOTON_'.
*      DATA(l_no) = screen-name+6(1).
*
*      l_no_int = CONV i( l_no ).
*
*      DATA(l_tabix) = l_index + l_no_int.
*
*      TRY.
*          l_charg = lt_bobinas[ l_tabix ]-charg.
*          ASSIGN (screen-name) TO FIELD-SYMBOL(<fs>).
*          IF <fs> IS ASSIGNED.
*            <fs> = l_charg.
*          ENDIF.
*          screen-input  = 1.
*          screen-active = 1.
*        CATCH cx_sy_itab_line_not_found.
*          screen-input  = 0.
*          screen-active = 0.
*      ENDTRY.
*
*    ENDIF.
*
*
*    MODIFY SCREEN.
*  ENDLOOP.
*
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0311  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0311 INPUT.

  DATA l_line TYPE i.

  CLEAR l_line.
  CASE sy-ucomm.
    WHEN 'NEXT'.
      IF g_pagina EQ g_max_paginas.
        MESSAGE 'Fin de lista alcanzado' TYPE 'S'.
        RETURN.
      ENDIF.
      g_pagina = g_pagina + 1.
    WHEN 'PREV'.
      IF g_pagina = 0.
        MESSAGE 'Inicio de lista alcanzado' TYPE 'S'.
        RETURN.
      ENDIF.
      g_pagina = g_pagina - 1.
    WHEN '001'.
      l_line = CONV i( sy-ucomm ).
    WHEN '002'.
      l_line = CONV i( sy-ucomm ).
    WHEN '003'.
      l_line = CONV i( sy-ucomm ).
    WHEN '004'.
      l_line = CONV i( sy-ucomm ).
    WHEN '005'.
      l_line = CONV i( sy-ucomm ).
    WHEN '006'.
      l_line = CONV i( sy-ucomm ).
    WHEN '007'.
      l_line = CONV i( sy-ucomm ).
    WHEN 'BACK'.
*      SET SCREEN 0.
      SET SCREEN g_dynpro.
      RETURN.
  ENDCASE.

  IF l_line IS NOT INITIAL.
    l_line = ( (  g_pagina ) * 7 ) + l_line.
    TRY.

        ls_bobinas        = lt_bobinas[ l_line ].

        g_charg           = ls_bobinas-charg.
        g_kunnr           = ls_bobinas-kunnr.
        g_decision_empleo = ls_bobinas-decision_empleo.
        g_gramaje_ancho   = ls_bobinas-gramaje_ancho.
        g_calidad         = ls_bobinas-calidad.
        g_peso_text       = ls_bobinas-peso.
        g_matnr           = ls_bobinas-matnr.
        g_calidad         = ls_bobinas-calidad.

*        CALL SCREEN 312.
        SET SCREEN 312.

      CATCH cx_sy_itab_line_not_found.
        RETURN.
    ENDTRY.
  ENDIF.




ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0313  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0313 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK'.
*      SET SCREEN 0.
      LEAVE TO SCREEN 312.
    WHEN 'DEL'.

      DATA(l_kg) = lt_bobinas[ charg = g_charg ]-peso_real.

      g_peso_acumulado      = g_peso_acumulado - l_kg.
      g_peso_acumulado_txt  = |{ g_peso_acumulado DECIMALS = 0 } KG|.

      DELETE lt_bobinas WHERE charg = g_charg.

      o_app->eliminar_bobina_tabla( g_charg ).

      IF lt_bobinas IS INITIAL.
        CLEAR g_mostrar_botones.
      ENDIF.

      CLEAR: g_barcode, g_matnr, g_charg, g_calidad, g_decision_empleo,
             g_kunnr, g_gramaje_ancho,g_peso_text.

      IF g_dynpro EQ '0310'.
        SET SCREEN 310.
      ELSEIF g_dynpro EQ '0320'.
        SET SCREEN 320.
      ELSEIF g_dynpro EQ '0410'.
        SET SCREEN 410.
      ELSEIF g_dynpro EQ '0510'.
        SET SCREEN 0510.
      ELSEIF g_dynpro EQ '0450'.
        SET SCREEN 0450.
      ENDIF.

  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0309  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0309 INPUT.

  CASE sy-ucomm.
    WHEN 'ACPT'.
      IF g_lgort IS INITIAL.
        MESSAGE 'Introducir almacén' TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      g_lgort_dstino = g_lgort.
*      CALL SCREEN g_dynpro.
      SET SCREEN g_dynpro.
    WHEN 'BACK'.
      LEAVE TO SCREEN 033.
  ENDCASE.


ENDMODULE.
**&---------------------------------------------------------------------*
**&      Module  USER_COMMAND_EXIT  INPUT
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
*MODULE user_command_exit INPUT.
*
*  CASE sy-ucomm.
*
*    WHEN 'BACK'.
*      SET SCREEN 0.
*  ENDCASE.
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0312  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0312 INPUT.

  g_matnr_non_standard_paper = |{ g_matnr_non_standard_paper ALPHA = IN }|.
  g_matnr                    = |{ g_matnr ALPHA = IN }|.

  CASE sy-ucomm.

    WHEN 'BACK'.

*      SET SCREEN 0.
      LEAVE TO SCREEN 0311.
    WHEN 'DEL'.

*      CALL SCREEN 313.
      SET SCREEN 313.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0314  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0314 INPUT.
  CASE sy-ucomm.
    WHEN 'ACPT'.
      PERFORM realizar_traspaso.

      LEAVE TO SCREEN 309.
    WHEN 'BACK'.
*      SET SCREEN 0.
      LEAVE TO SCREEN 0310.
  ENDCASE.
ENDMODULE.


MODULE user_command_0321 INPUT.
  CASE sy-ucomm.
    WHEN 'ACPT'.
      PERFORM exportar_campos_app.
      LEAVE SCREEN.
*      CALL SCREEN 610.
*      set SCREEN 610.
*      LEAVE TO SCREEN 610.

    WHEN 'BACK'.
*      SET SCREEN 0.
      LEAVE TO SCREEN 600.
*      LEAVE SCREEN.
  ENDCASE.
ENDMODULE.

MODULE user_command_0322 INPUT.
  CASE sy-ucomm.
    WHEN 'ACPT'.
      PERFORM traspaso_a_almacen.
      LEAVE TO SCREEN 320.


    WHEN 'BACK'.
      PERFORM limpiar_campos_no_acum. "CMS 55009 Reinicia kg acumulados
      MESSAGE 'Lectura cancelada' TYPE 'S'.
*          RETURN.
      LEAVE TO SCREEN 320.

  ENDCASE.
ENDMODULE.


MODULE user_command_0315 INPUT.
  CASE sy-ucomm.
    WHEN 'ACPT'.
      REFRESH lt_bobinas.
      PERFORM limpiar_campos.
      o_app->borrar_campos_leidos( ).
      o_app->borrar_lista_bobinas( ).
      IF g_dynpro EQ '0410' OR g_dynpro EQ '0510'
        OR g_dynpro EQ '0450'.  "Nuevo boton HJNSPaper a Pulper
*        CALL SCREEN 034.
        LEAVE TO SCREEN 034.
      ELSE.
*        CALL SCREEN 033.
        LEAVE TO SCREEN 033.
      ENDIF.
    WHEN 'BACK'.

      LEAVE TO SCREEN g_dynpro.
*      SET SCREEN 0.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0034  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0034 INPUT.

  CASE sy-ucomm.
    WHEN '001'.
      PERFORM limpiar_campos.
      g_dynpro = '0034'.
*      CALL SCREEN 550.
      SET SCREEN 550.
    WHEN '002'.
*      CALL SCREEN 700.
**      SET SCREEN 700.
      CALL TRANSACTION 'ZSD0007'. "DTM - Picking antiguo
    WHEN '003'.
*      CALL SCREEN 500.
      SET SCREEN 500.
    WHEN '004'. "Pulper a HJNS Paper

* 27/05/2021 - CMS obtener directamente HINOJOSA NON-STANDARD PAPER y descripción.
      SELECT SINGLE matnr
        INTO  @g_matnr_non_standard_paper
        FROM  mara
        WHERE matkl = '10199' AND
              lvorm = ' '."HJNS

      IF sy-subrc <> 0.
        MESSAGE |Error al obtener HNSP, avisar a responsable.| TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
        g_maktx_non_standard_paper = zcl_utils_hpap_pp=>get_descr_material( g_matnr_non_standard_paper ).
        PERFORM crear_objeto_app.
        o_app->borrar_lista_bobinas( ).
      ENDIF.

*      CALL SCREEN 410. "400.
      SET SCREEN 410. "400.

    WHEN '005'. " HJNS Paper a Pulper
* 27/05/2021 - CMS obtener directamente HINOJOSA NON-STANDARD PAPER y descripción.
      PERFORM crear_objeto_app.
      CLEAR gs_dyn450.
      SELECT SINGLE matnr
              INTO  @gs_dyn450-matnr_origen
              FROM  mara
              WHERE matkl = '10199' AND
                    lvorm = ' '."HJNS
      gs_dyn450-matnr = |{ o_app->c_material_pulper ALPHA = OUT }|.
      IF sy-subrc <> 0.
        MESSAGE |Error al obtener HNSP, avisar a responsable.| TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
        gs_dyn450-maktx = zcl_utils_hpap_pp=>get_descr_material( o_app->c_material_pulper ).
        PERFORM crear_objeto_app.
        o_app->borrar_lista_bobinas( ).
      ENDIF.

      SET SCREEN 450.

    WHEN 'BACK'.
      LEAVE TO SCREEN 30.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0400  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0400 OUTPUT.
*  SET PF-STATUS '100'.
*  SET TITLEBAR '10'.
*
*  CLEAR g_matnr_non_standard_paper.
*
** Leer materiales NonStandard pars el selector
*  SELECT mara~matnr maktx FROM mara JOIN makt
*                       ON mara~matnr EQ makt~matnr
*              INTO TABLE lt_values WHERE matkl EQ '10199'."HJNS
*
*  LOOP AT lt_values ASSIGNING FIELD-SYMBOL(<fs_values>).
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*      EXPORTING
*        input  = <fs_values>-key
*      IMPORTING
*        output = <fs_values>-key.
*
*    <fs_values>-text = <fs_values>-key.
*  ENDLOOP.
*
*
*  CALL FUNCTION 'VRM_SET_VALUES'
*    EXPORTING
*      id              = 'G_MATNR_NON_STANDARD_PAPER'
*      values          = lt_values
*    EXCEPTIONS
*      id_illegal_name = 0
*      OTHERS          = 0.
*
*  PERFORM crear_objeto_app.
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0400  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0400 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK'.
      PERFORM limpiar_campos.
      o_app->borrar_campos_leidos( ).
      o_app->borrar_lista_bobinas( ).
      LEAVE TO SCREEN 034.
    WHEN 'ACPT'.
      IF g_matnr_non_standard_paper IS INITIAL.
        MESSAGE 'Error:seleccionar material' TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      l_matnr = |{ g_matnr_non_standard_paper ALPHA = IN }|.
      SELECT SINGLE maktx FROM makt INTO g_maktx_non_standard_paper
                          WHERE matnr = l_matnr AND spras = sy-langu.

      l_len = strlen( g_maktx_non_standard_paper ).
      l_len = l_len - 12.

      g_maktx_non_standard_paper = g_maktx_non_standard_paper+l_len(12).

      IF g_maktx_non_standard_paper CS 'PAPER'.
        SELECT SINGLE maktx FROM makt INTO g_maktx_non_standard_paper
                          WHERE matnr = l_matnr AND spras = sy-langu.

        l_len = strlen( g_maktx_non_standard_paper ).
        l_len = l_len - 18.

        g_maktx_non_standard_paper = g_maktx_non_standard_paper+l_len(18).
      ENDIF.

      CALL SCREEN 410.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  LECTURA_PULPER_A_NSP  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE lectura_pulper_a_nsp INPUT.



  CHECK g_barcode IS NOT INITIAL .

  TRANSLATE g_barcode TO UPPER CASE.

  l_len = strlen( g_barcode ).
  IF l_len = 10.
    g_barcode = |{ c_matnr_pulper ALPHA = IN }{ g_barcode }|.
  ENDIF.


  o_app->leer_bobina( EXPORTING con_material = abap_true
                      CHANGING  bar_code     = g_barcode
                      EXCEPTIONS lote_incorrecto      = 1
                                 lote_sin_existencias = 2 ).

  CLEAR g_barcode.
  CASE sy-subrc .
    WHEN 0.

      IF o_app->lgort NE 4005. " Si la ubicación de la bobina es diferente de 4005
        o_app->limpiar_material_peso( ).
        MESSAGE text-019 TYPE 'S' DISPLAY LIKE 'E'. " Bobina inexistente
        RETURN.
      ENDIF.

      o_app->validar_bobina_pulper( EXCEPTIONS no_es_pulper = 1 ).
      IF sy-subrc NE 0.
        o_app->limpiar_material_peso( ).
        MESSAGE text-013 TYPE 'S' DISPLAY LIKE 'E'. "Error: Material no es Pulper
        RETURN.
      ENDIF.

      o_app->anadir_bobina_a_lista( ).

      PERFORM exportar_campos_app.

    WHEN 1.
      o_app->limpiar_material_peso( ).
      l_msg = text-010.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
      REFRESH lt_data.
    WHEN 2.
      o_app->limpiar_material_peso( ).
      l_msg = text-012.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
      REFRESH lt_data.

  ENDCASE.



ENDMODULE.

MODULE lectura_nsp_a_pulper INPUT.



  CHECK gs_dyn450-barcode IS NOT INITIAL .

  TRANSLATE gs_dyn450-barcode TO UPPER CASE.

  o_app->leer_bobina_hjnsp_a_pulper( EXPORTING con_material = abap_true
                      CHANGING  bar_code     = gs_dyn450-barcode
                      EXCEPTIONS lote_incorrecto      = 1
                                 lote_sin_existencias = 2 ).

  CLEAR gs_dyn450-barcode.
  CASE sy-subrc .
    WHEN 0.

      IF o_app->lgort <> 1040. " Si la ubicación de la bobina es diferente de 1040 o 4005
        o_app->limpiar_material_peso( ).
        MESSAGE text-019 TYPE 'S' DISPLAY LIKE 'E'. " Bobina inexistente
        RETURN.
      ENDIF.

*      o_app->validar_bobina_pulper( EXCEPTIONS no_es_pulper = 1 ).
*      IF sy-subrc NE 0.
      IF gs_dyn450-matnr_origen <> o_app->matnr.
        o_app->limpiar_material_peso( ).
        MESSAGE text-020 TYPE 'S' DISPLAY LIKE 'E'. "Error: Material no es HJ NS Paper

        RETURN.
      ENDIF.

      o_app->anadir_bobina_a_lista( ).


      PERFORM exportar_campos_app.


    WHEN 1.
      o_app->limpiar_material_peso( ).
      l_msg = text-010.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
      REFRESH lt_data.
    WHEN 2.
      o_app->limpiar_material_peso( ).
      l_msg = text-012.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
      REFRESH lt_data.

  ENDCASE.



ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0410  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0410 INPUT.

  g_dynpro = '0410'.
  CASE sy-ucomm.

    WHEN 'BACK'.

      IF o_app->tabla_bobinas_leidas[] IS NOT INITIAL.
*        CALL SCREEN 315.
        SET SCREEN 315.
      ELSE.

        o_app->borrar_lista_bobinas( ).
        o_app->borrar_campos_leidos( ).

        PERFORM limpiar_campos.

        LEAVE TO SCREEN 034. "400.
      ENDIF.

    WHEN 'CONS'.
      IF o_app->tabla_bobinas_leidas[] IS INITIAL.
        MESSAGE 'No hay bobinas leidas' TYPE 'S'.
        RETURN.
      ENDIF.
      lt_bobinas = o_app->tabla_bobinas_leidas[].
*      CALL SCREEN 311.
      SET SCREEN 311.
    WHEN 'DEL'.

*      CALL SCREEN 313.
      SET SCREEN 313.

    WHEN 'ACPT'.
      IF o_app->tabla_bobinas_leidas[] IS INITIAL.
        MESSAGE 'Error:Sin bobinas leidas' TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
*      CALL SCREEN 411.
      SET SCREEN 411.

  ENDCASE.
ENDMODULE.

MODULE user_command_0450 INPUT.

  g_dynpro = '0450'.
  CASE sy-ucomm.

    WHEN 'BACK'.

      IF o_app->tabla_bobinas_leidas[] IS NOT INITIAL.
        SET SCREEN 315.
*        CALL SCREEN 315.
      ELSE.

        o_app->borrar_lista_bobinas( ).
        o_app->borrar_campos_leidos( ).

        PERFORM limpiar_campos.

        LEAVE TO SCREEN 034.
      ENDIF.

    WHEN 'CONS'.
      IF o_app->tabla_bobinas_leidas[] IS INITIAL.
        MESSAGE 'No hay bobinas leidas' TYPE 'S'.
        RETURN.
      ENDIF.
      g_dynpro = '0450'.
      lt_bobinas = o_app->tabla_bobinas_leidas[].
*      CALL SCREEN 311.
      SET SCREEN 311.
    WHEN 'DEL'.

*      CALL SCREEN 313.
      SET SCREEN 313.

    WHEN 'ACPT'.
      IF o_app->tabla_bobinas_leidas[] IS INITIAL.
        MESSAGE 'Error:Sin bobinas leidas' TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      SET SCREEN 451.
*      CALL SCREEN 451.

  ENDCASE.
ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0411  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0411 INPUT.

  CASE sy-ucomm.
    WHEN 'ACPT'.
      o_app->convertir_tabla_bobinas_a_nsp(
              EXPORTING  matnr_nsp        = g_matnr_non_standard_paper
              EXCEPTIONS error_movimiento = 1 ).

      CASE sy-subrc.
        WHEN 0.
          MESSAGE 'Traspaso realizado'(400) TYPE 'S'.

          o_app->borrar_lista_bobinas( ).
          o_app->borrar_campos_leidos( ).
          REFRESH lt_bobinas.

*          LEAVE TO SCREEN 400.
          LEAVE TO SCREEN 410.
        WHEN 1.
          IF line_exists( o_app->error_messages[ 1 ] ).
            DATA(ls_err) = o_app->error_messages[ 1 ].
            MESSAGE ls_err-message TYPE 'S' DISPLAY LIKE 'E'.
          ELSE.
            MESSAGE text-011 TYPE 'S' DISPLAY LIKE 'E'.
          ENDIF.
      ENDCASE.

    WHEN 'BACK'.
*      SET SCREEN 0.
      LEAVE TO SCREEN 410.

  ENDCASE.

ENDMODULE.
MODULE user_command_0451 INPUT.

  CASE sy-ucomm.
    WHEN 'ACPT'.
      o_app->convertir_tabla_nsp_a_pulper(
              EXCEPTIONS error_movimiento = 1 ).
*      o_app->convertir_tabla_bobinas_a_nsp(
*              EXPORTING  matnr_nsp        = g_matnr_non_standard_paper
*              EXCEPTIONS error_movimiento = 1 ).

      CASE sy-subrc.
        WHEN 0.
          MESSAGE 'Traspaso realizado'(400) TYPE 'S'.

          o_app->borrar_lista_bobinas( ).
          o_app->borrar_campos_leidos( ).
          REFRESH lt_bobinas.

*          LEAVE TO SCREEN 400.
          LEAVE TO SCREEN 034.
        WHEN 1.
          IF line_exists( o_app->error_messages[ 1 ] ).
            ls_err = o_app->error_messages[ 1 ].
            MESSAGE ls_err-message TYPE 'S' DISPLAY LIKE 'E'.
          ELSE.
            MESSAGE text-011 TYPE 'S' DISPLAY LIKE 'E'.
          ENDIF.
      ENDCASE.

    WHEN 'BACK'.
*      SET SCREEN 0.
      LEAVE TO SCREEN 450.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_312  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_312 OUTPUT.
**  SET PF-STATUS 'xxxxxxxx'.
**  SET TITLEBAR 'xxx'.
*
*  LOOP AT SCREEN.
*    IF screen-group1 EQ 'T' AND g_dynpro EQ '0410'.
*      screen-invisible = 1.
*      MODIFY SCREEN.
*    ELSEIF screen-group1 EQ 'T' AND g_dynpro NE '0410'.
*      screen-invisible = 0.
*      MODIFY SCREEN.
*    ENDIF.
*
*    IF screen-group2 EQ 'T' AND g_dynpro EQ '0410'.
*      screen-invisible = 0.
*      MODIFY SCREEN.
*    ELSEIF screen-group2 EQ 'T' AND g_dynpro NE '0410'.
*      screen-invisible = 1.
*      MODIFY SCREEN.
*    ENDIF.
*  ENDLOOP.
*
*
*
*ENDMODULE.
*MODULE status_0500 OUTPUT.
*  SET PF-STATUS '100'.
*  SET TITLEBAR '10'.
*
**  IF g_new_kunnr IS INITIAL.
*  PERFORM limpiar_campos.
*  CLEAR g_new_kunnr.
*
*  SELECT kna1~kunnr name1
*                     FROM kna1 JOIN knb1 ON kna1~kunnr = knb1~kunnr
*                     INTO TABLE lt_values
*                     WHERE kna1~kunnr LIKE 'C2%' AND bukrs = g_werks.
*
*  LOOP AT lt_values ASSIGNING <fs_values>.
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*      EXPORTING
*        input  = <fs_values>-key
*      IMPORTING
*        output = <fs_values>-key.
*
*    <fs_values>-text = |{ <fs_values>-key } { <fs_values>-text }|.
*
*  ENDLOOP.
*
*
*
*  CALL FUNCTION 'VRM_SET_VALUES'
*    EXPORTING
*      id              = 'G_NEW_KUNNR'
*      values          = lt_values
*    EXCEPTIONS
*      id_illegal_name = 0
*      OTHERS          = 0.
**  ENDIF.
*
*  PERFORM crear_objeto_app.
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0500  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0500 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 034.
    WHEN 'ACPT'.
      CLEAR g_ind_bob_no_at.

      IF g_new_kunnr_ext IS NOT INITIAL AND g_new_kunnr IS  INITIAL.
        g_new_kunnr = g_new_kunnr_ext.
        g_ind_bob_no_at = 'X'.
      ELSEIF g_new_kunnr_ext IS  INITIAL AND g_new_kunnr IS  INITIAL.
        MESSAGE |Seleccionar un cliente.| TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSEIF g_new_kunnr_ext IS NOT INITIAL AND g_new_kunnr IS NOT INITIAL.
        MESSAGE |Seleccionar un cliente.| TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

*      IF g_new_kunnr IS INITIAL.
*        MESSAGE 'Error:Indicar cliente' TYPE 'S' DISPLAY LIKE 'E'.
*        RETURN.
*      ENDIF.

      DATA(l_kunnr_alpha_in) = |{ g_new_kunnr ALPHA = IN }|.
      SELECT SINGLE name1 FROM kna1 INTO g_new_kunnr_name WHERE kunnr = l_kunnr_alpha_in.
*      CALL SCREEN 510.
      SET SCREEN 510.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0510  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0510 OUTPUT.
*  SET PF-STATUS '100'.
*  SET CURSOR FIELD 'G_BARCODE'.
*  g_dynpro = '0510'.
*
*  PERFORM crear_objeto_app.
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0510  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0510 INPUT.

  CASE sy-ucomm.

    WHEN 'BACK'.
      IF  o_app->tabla_bobinas_leidas IS NOT INITIAL.
*        CALL SCREEN 315.
        g_dynpro = '0510'.
        SET SCREEN 315.
      ELSE.
        REFRESH lt_bobinas.
        PERFORM limpiar_campos.
        o_app->borrar_lista_bobinas( ).

        LEAVE TO SCREEN 500.
      ENDIF.

    WHEN 'ACPT'.
      IF o_app->tabla_bobinas_leidas IS INITIAL.
        MESSAGE 'Error:No hay bobinas leidas' TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
*      CALL SCREEN 511.
      SET SCREEN 511.
    WHEN 'CONS'.
      IF  o_app->tabla_bobinas_leidas IS INITIAL.
        MESSAGE 'No hay bobinas leidas' TYPE 'S'.
        RETURN.
      ENDIF.

*      CALL SCREEN 311.
      g_dynpro = '0510'.
      SET SCREEN 311.

  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  LECTURA_BOBINA_CAMBIO_CLIENTE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE lectura_bobina_cambio_cliente INPUT.

  CHECK g_barcode IS NOT INITIAL .

  o_app->leer_bobina( EXPORTING con_material = abap_false
                      CHANGING  bar_code     = g_barcode
                      EXCEPTIONS lote_incorrecto      = 1
                                 lote_sin_existencias = 2 ).

  CLEAR g_barcode.
  CASE sy-subrc .
    WHEN 0.

* 03/12/2021 - CMS - Cambios para DS Smith.
* Solo para cliente externo "E" (Bobiral) aplicarà la validación DE=R.
      IF ( o_app->decision_empleo = 'A' OR  o_app->decision_empleo = ' ' ) AND
          zclpp_app_logistica=>get_tp_cliente( g_new_kunnr ) = 'E'.
*          g_ind_bob_no_at = 'X'. "cliente externo, no se permiten bobina con DE = A o blanco

        MESSAGE |Cambio no permitido.| TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.

      "T76941 - EAB 07/08/24 - No se permite la operación en caso de ubicación de bobina E80 para Alqueria
      IF g_werks NE '3000' OR ( g_werks = '3000' AND ( o_app->ubicacion = '0000' OR o_app->ubicacion >= '9000' ) ).

        o_app->anadir_bobina_a_lista( ).

        PERFORM exportar_campos_app.

      ELSE.

        MESSAGE |No se permite esta operación en la ubicación de la bobina.| TYPE 'I' DISPLAY LIKE 'E'.
        EXIT.

      ENDIF.

    WHEN 1.
      l_msg = text-010.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    WHEN 2.
      l_msg = text-012.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.

  ENDCASE.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0511  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0511 INPUT.

  CASE sy-ucomm.

    WHEN 'BACK'.
*      SET SCREEN 0.
      LEAVE TO SCREEN 510.

    WHEN 'ACPT'.

      o_app->cambiar_char_tabla_bobinas( EXPORTING  charact   = 'Z_CLIENTE'
                                                    new_value = CONV string( g_new_kunnr )
                                         EXCEPTIONS error_actualizar  = 1 ).
      IF sy-subrc NE 0.
        MESSAGE text-011 TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.

*      LEAVE TO SCREEN 500.
  ENDCASE.
ENDMODULE.

MODULE user_command_0515 INPUT.

  CASE sy-ucomm.

    WHEN 'BACK'.
      o_app->borrar_lista_bobinas( ).
      MESSAGE 'Cambio de cliente realizado'(500) TYPE 'S'.
      LEAVE TO SCREEN 500.

    WHEN 'ACPT'.
      o_app->imprimir_etiquetas_bobinas( ).
      o_app->borrar_lista_bobinas( ).
      CLEAR sy-msgv1.
*      MESSAGE 'Impresión de etiquetas realizado'(500) TYPE 'S'.
      MESSAGE 'Cambio de cliente realizado'(500) TYPE 'S'.

      LEAVE TO SCREEN 500.

  ENDCASE.


ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0313  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0313 OUTPUT.
**  SET PF-STATUS 'xxxxxxxx'.
**  SET TITLEBAR 'xxx'.
*
*  DATA g_text_313 TYPE char30.
*  CASE g_dynpro.
*    WHEN '0410'.
*      g_text_313 = 'y no se convertirá.'.
*    WHEN '0510'.
*      g_text_313 = 'y no se modificará.'.
*    WHEN OTHERS.
*      g_text_313 = 'y no se traspasará.'.
*  ENDCASE.
*
*
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  CONSULTA_BOBINA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE consulta_bobina INPUT.
  CHECK g_barcode IS NOT INITIAL .

  o_app->leer_bobina( EXPORTING con_material = abap_false
                      CHANGING  bar_code     = g_barcode
                      EXCEPTIONS lote_incorrecto      = 1
                                 lote_sin_existencias = 2 ).
  CLEAR g_barcode.
  CASE sy-subrc .
    WHEN 0.
      PERFORM exportar_campos_app.
    WHEN 1.
      l_msg = text-010.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    WHEN 2.
      l_msg = text-012.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
  ENDCASE.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0550  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0550 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK'.
*      SET SCREEN 0.
      LEAVE TO SCREEN g_dynpro.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0550  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0550 OUTPUT.
*  SET PF-STATUS '100'.
*  SET TITLEBAR '10'.
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  TEST  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE test OUTPUT.

*  DATA lo_container TYPE REF TO cl_gui_custom_container.
*
*  DATA lo_alv TYPE REF TO cl_gui_alv_grid.

  CREATE OBJECT lo_container
    EXPORTING
*     parent         =
      container_name = 'GS_DYN821-CONTAINER'
*     style          =
*     lifetime       = lifetime_default
*     repid          =
*     dynnr          =
*     no_autodef_progid_dynnr     =
*    EXCEPTIONS
*     cntl_error     = 1
*     cntl_system_error           = 2
*     create_error   = 3
*     lifetime_error = 4
*     lifetime_dynpro_dynpro_link = 5
*     others         = 6
    .
  IF sy-subrc <> 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CREATE OBJECT lo_alv
    EXPORTING
*     i_shellstyle      = 0
*     i_lifetime        =
      i_parent = lo_container
*     i_appl_events     = space
*     i_parentdbg       =
*     i_applogparent    =
*     i_graphicsparent  =
*     i_name   =
*     i_fcat_complete   = SPACE
*    EXCEPTIONS
*     error_cntl_create = 1
*     error_cntl_init   = 2
*     error_cntl_link   = 3
*     error_dp_create   = 4
*     others   = 5
    .
  IF sy-subrc <> 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  DATA: BEGIN OF ls_test,
          charg TYPE charg_d,
          peso  LIKE g_peso_text,
          matnr TYPE matnr,
          icon  TYPE icon_d,
        END OF ls_test,
        lt_test LIKE STANDARD TABLE OF ls_test.

*  DATA lt_fcat TYPE lvc_t_fcat.

  APPEND VALUE lvc_s_fcat( fieldname = 'CHARG' ) TO lt_fcat.
  APPEND VALUE lvc_s_fcat( fieldname = 'PESO' ) TO lt_fcat.
  APPEND VALUE lvc_s_fcat( fieldname = 'MATNR' ) TO lt_fcat.
  APPEND VALUE lvc_s_fcat( fieldname = 'ICON' icon = 'X' ) TO lt_fcat.

  ls_test-charg = '803AS0001'.
  ls_test-peso  = '2939232'.
  ls_test-matnr = '10120742110'.
  ls_test-icon = '@AD@'.
  APPEND ls_test TO lt_test.

  ls_test-charg = '803AS0001'.
  ls_test-peso  = '29392399299232'.
  ls_test-icon = '@A4@'.
  APPEND ls_test TO lt_test.
  ls_test-charg = '803AS0001'.
  ls_test-peso  = '292'.
  APPEND ls_test TO lt_test.
  ls_test-charg = '803AS0001'.
  ls_test-peso  = '2939ababubsub232'.
  APPEND ls_test TO lt_test.
  ls_test-charg = '803AS0001'.
  ls_test-peso  = 'SMLQUIMIC TL1'.
  APPEND ls_test TO lt_test.
  ls_test-charg = '803AS0001'.
  ls_test-peso  = '29392wi32'.
  APPEND ls_test TO lt_test.
  ls_test-charg = '803AS0001'.
  ls_test-peso  = '2939232'.
  APPEND ls_test TO lt_test.

  CALL METHOD lo_alv->set_table_for_first_display
*    EXPORTING
*      i_buffer_active               =
*      i_bypassing_buffer            =
*      i_consistency_check           =
*      i_structure_name              =
*      is_variant                    =
*      i_save                        =
*      i_default                     = 'X'
*      is_layout                     =
*      is_print                      =
*      it_special_groups             =
*      it_toolbar_excluding          =
*      it_hyperlink                  =
*      it_alv_graphics               =
*      it_except_qinfo               =
*      ir_salv_adapter               =
    CHANGING
      it_outtab       = lt_test
      it_fieldcatalog = lt_fcat
*     it_sort         =
*     it_filter       =
*    EXCEPTIONS
*     invalid_parameter_combination = 1
*     program_error   = 2
*     too_many_lines  = 3
*     others          = 4
    .
  IF sy-subrc <> 0.
*   Implement suitable error handling here
  ENDIF.





ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  UBICAR_BOBINA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE ubicar_bobina INPUT.

  DATA: l_kunnr_loc TYPE kunnr.


  CHECK g_barcode IS NOT INITIAL.

  o_app->leer_bobina( EXPORTING  con_material         = abap_false
                      CHANGING   bar_code             = g_barcode
                      EXCEPTIONS lote_incorrecto      = 1
                                 lote_sin_existencias = 2
                                 OTHERS               = 3 ).
  CASE sy-subrc .
    WHEN 0.
      o_app->validar_almacen_gestion( EXCEPTIONS error_almacen = 1 ).
      IF sy-subrc NE 0.
        l_msg = text-015.
        REPLACE '&' IN l_msg WITH o_app->charg.
        MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.

* INI CMS Se añade control para validar que no se esta disparando a un cabo 05/03/2019
      l_kunnr_loc = |C{ o_app->werks ALPHA = OUT }|.

      IF o_app->ancho < 1340 AND " Si se trata de un cabo
         o_app->kunnr = l_kunnr_loc AND
         o_app->werks = '3020'. " CMS 13/03/2019 Aviso solo hábil para 3020 - Sarrià de Ter

*        CALL SCREEN 321. "Pantalla Aviso: se está ubicando un cabo
        SET SCREEN 321.
      ENDIF.
* FIN CMS Se añade control para validar que no se esta disparando a un cabo 05/03/2019

      PERFORM exportar_campos_app.
*      CALL SCREEN 610.
      SET SCREEN 610.
    WHEN 1.
      l_msg = text-010.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    WHEN 2.
      l_msg = text-012.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
  ENDCASE.



ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0610  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0610 INPUT.

  IF sy-ucomm IS INITIAL.
    sy-ucomm = 'ACPT'.
  ENDIF.

  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 600.
*          LEAVE TO SCREEN 0.
    WHEN 'ACPT'.

      o_app->cambiar_ubicacion( EXPORTING  nueva_ubicacion = g_nueva_ubicacion
                                EXCEPTIONS lote_incorrecto          = 1
                                           error_actualizar         = 2
                                           error_nueva_ubicacion    = 3
                                           error_ubicacion_almacen  = 4
                                           OTHERS                   = 5 ).
      CASE sy-subrc .
        WHEN 0.
          MESSAGE 'Bobina ubicada'(610) TYPE 'S'.
*          LEAVE TO SCREEN 600.
*          LEAVE TO SCREEN 0.
          SET SCREEN 600.
          LEAVE  SCREEN.
        WHEN 1.
          l_msg = 'Error: lote & incorrecto'(010).
          REPLACE '&' IN l_msg WITH o_app->charg.
          MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
          SET SCREEN 610.
          LEAVE  SCREEN.

        WHEN 2.
          IF o_app->error_messages[] IS NOT INITIAL.
            MESSAGE o_app->error_messages[ 1 ]-message TYPE 'S' DISPLAY LIKE 'E'.
          ELSE.
            MESSAGE text-011 TYPE 'S' DISPLAY LIKE 'E'.
          ENDIF.
          SET SCREEN 610.
          LEAVE  SCREEN.
        WHEN 3.
*          l_msg = text-010 .
*          REPLACE '&' IN l_msg WITH o_app->charg.
          MESSAGE text-017 TYPE 'S' DISPLAY LIKE 'E'.
          SET SCREEN 610.
          LEAVE  SCREEN.
        WHEN 4.
          MESSAGE text-016 TYPE 'S' DISPLAY LIKE 'E'.
          SET SCREEN 610.
          LEAVE  SCREEN.
      ENDCASE.

    WHEN 'CONS'. "Nueva pantalla Stocks
      CLEAR: gt_data_0650[].
      SET SCREEN 650.

  ENDCASE.

  CLEAR sy-ucomm.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0600  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0600 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 030.
  ENDCASE.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0700  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0650 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK'.
      SET SCREEN 610.
      LEAVE SCREEN.
*    WHEN 'ACPT'.
*      LEAVE SCREEN.

    WHEN 'PREV'.
      IF g_pag_actual_0650 EQ 0.
        MESSAGE 'Inicio de lista alcanzado' TYPE 'S'.
        RETURN.
      ENDIF.
      g_pag_actual_0650 = g_pag_actual_0650 - 1.
      SET SCREEN 650.
      LEAVE SCREEN.
    WHEN 'NEXT'.
      IF g_pag_actual_0650 EQ g_pagina_0650.
        MESSAGE 'Fin de lista alcanzado' TYPE 'S'.
        RETURN.
      ENDIF.
      g_pag_actual_0650 = g_pag_actual_0650 + 1.
      SET SCREEN 650.
      LEAVE SCREEN.
    WHEN OTHERS.
      SET SCREEN 650.
      LEAVE SCREEN.

  ENDCASE.

ENDMODULE.

MODULE user_command_0700 INPUT.



  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 034.
    WHEN 'ACPT'.

      g_matnr = |{ g_calidad }{ g_gramaje ALPHA = IN }{ g_ancho ALPHA = IN } |.

      g_matnr = |{ g_matnr ALPHA = IN }|.

      SELECT SINGLE matnr zzgramaje zzancho
               INTO ( g_matnr, g_gramaje, g_ancho )
               FROM mara WHERE matnr = g_matnr AND lvorm = space.
      IF sy-subrc NE 0.
        MESSAGE text-015 TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.

      g_gramaje_ancho = |{ g_gramaje }/{ g_ancho }|.

      REFRESH lt_data_0720
      .
      LEAVE TO SCREEN 710.

  ENDCASE.

ENDMODULE.
MODULE user_command_0710 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 700.
    WHEN 'CONS'.
*      CALL SCREEN 720.
      SET SCREEN 720.
  ENDCASE.
ENDMODULE.

MODULE user_command_0720 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 700.
    WHEN 'PREV'.
      IF g_pagina_actual_0720 EQ 0.
        MESSAGE 'Inicio de lista alcanzado' TYPE 'S'.
        RETURN.
      ENDIF.
      g_pagina_actual_0720 = g_pagina_actual_0720 - 1.
    WHEN 'NEXT'.
      IF g_pagina_actual_0720 EQ g_paginas_0720.
        MESSAGE 'Fin de lista alcanzado' TYPE 'S'.
        RETURN.
      ENDIF.
      g_pagina_actual_0720 = g_pagina_actual_0720 + 1.
    WHEN 'CONS'.
      CASE boton_orden.
        WHEN 'F2 Ord x peso'.
          boton_orden = 'F2 Ord x ubic'.
          g_pagina_actual_0720 = 0.
        WHEN 'F2 Ord x ubic'.
          boton_orden = 'F2 Ord x lote'.
          g_pagina_actual_0720 = 0.
        WHEN 'F2 Ord x lote'.
          boton_orden = 'F2 Ord x peso'.
          g_pagina_actual_0720 = 0.
      ENDCASE.
  ENDCASE.
ENDMODULE.


MODULE user_command_0800 INPUT.

  CASE sy-ucomm.
    WHEN 'ACPT'. " Pasar a detalle de Receta(810)
      CHECK g_receta_800_ok = 'X'.
*      CALL SCREEN 810.
      SET SCREEN 810.

    WHEN 'BACK'.
*      CASE gw_pulper_cons.
*      	WHEN 'P'. leave to SCREEN
*      	WHEN 'C'.
*      	WHEN OTHERS.
*      ENDCASE.
*      SET SCREEN 0.
      LEAVE TO SCREEN 0020.
    WHEN 'CTRL'.
      CHECK g_receta_800_ok = 'X'.

  ENDCASE.

ENDMODULE.

MODULE user_command_0810 INPUT.
  DATA: l_ret_dat TYPE char2.

  CASE sy-ucomm.
    WHEN 'CONS'. "F2 Control receta.
      g_rec_tur = 'T'. " Cargar datos de control de TURNO

      PERFORM obtener_datos_control USING g_rec_tur
                              CHANGING l_ret_dat.
      IF l_ret_dat <> '00'.
        DATA(l_msg_err2) = CONV string( 'Turno sin traspasos.' ).
        MESSAGE l_msg_err2 TYPE 'S' DISPLAY LIKE 'W'.
        RETURN.
      ELSE.
        g_dynpro = '810'.
        SET SCREEN 820.
      ENDIF.


    WHEN 'ACPT'. " F5 Aceptar --> Traspaso a Pulper.
      CHECK gw_pulper_cons = 'P'. " Sólo navegamos a "Traspaso pulper" si no estan Consultando una receta(C).
*      CALL SCREEN 100.
      SET SCREEN 100.
    WHEN 'BACK'. "F3-Cancelar.
      LEAVE TO SCREEN 020.
  ENDCASE.

ENDMODULE.


MODULE user_command_0820 INPUT.

  CASE sy-ucomm.
    WHEN 'CONS'. "F2 Control receta.
*      g_rec_tur = 'R'. " Cargar datos de control de RECETA
*
*      PERFORM obtener_datos_control USING g_rec_tur
*                              CHANGING l_ret_dat.
*      IF l_ret_dat <> '00'.
*        l_msg_err = CONV string( 'Receta sin traspasos' ).
*        MESSAGE l_msg_err TYPE 'S' DISPLAY LIKE 'W'.
*
*        g_rec_tur = 'T'.
*        RETURN.
**      ELSE.
**        CALL SCREEN 820.
*      ENDIF.
    WHEN 'TURNO'. "F4-Turno.

      CASE g_rec_tur.
        WHEN 'T'.
          g_rec_tur = 'R'.

          PERFORM obtener_datos_control USING g_rec_tur
                                  CHANGING l_ret_dat.
          IF l_ret_dat <> '00'.
            l_msg_err = CONV string( 'Receta sin traspasos' ).
            MESSAGE l_msg_err TYPE 'S' DISPLAY LIKE 'W'.
            RETURN.
          ENDIF.

        WHEN 'R'.
          g_rec_tur = 'T'.

          PERFORM obtener_datos_control USING g_rec_tur
                                  CHANGING l_ret_dat.
          IF l_ret_dat <> '00'.
            l_msg_err = CONV string( 'Turno sin traspasos' ).
            MESSAGE l_msg_err TYPE 'S' DISPLAY LIKE 'W'.

            RETURN.
          ENDIF.

        WHEN OTHERS.
      ENDCASE.

      PERFORM obtener_datos_control USING g_rec_tur
                              CHANGING l_ret_dat.
      IF l_ret_dat <> '00'.
        l_msg_err = CONV string( 'Turno sin traspasos' ).
        MESSAGE l_msg_err TYPE 'S' DISPLAY LIKE 'W'.
*        g_rec_tur = 'R'.
*        RETURN.
      ENDIF.
    WHEN 'BACK'. "F3-Cancelar.
      CASE g_dynpro.
        WHEN '100'. LEAVE TO SCREEN 100.
        WHEN '810'. LEAVE TO SCREEN 810.
        WHEN OTHERS.
      ENDCASE.
*      SET SCREEN 0.
*      LEAVE SCREEN.
*      LEAVE TO SCREEN 020.
  ENDCASE.

ENDMODULE.

MODULE user_command_0825 INPUT.

  CASE sy-ucomm.
    WHEN 'ACPT'. "F2 Control receta.
      CASE g_aviso_d_r_t.
        WHEN 'R'. " Receta no activa
          PERFORM proceso_barcode.
          SET SCREEN 100.
        WHEN 'D'. " Receta con desviación (visualizar datos de turno)
          g_rec_tur = 'T'.
          LEAVE TO SCREEN 820.
        WHEN 'T'. " Cambio de turno
          LEAVE TO SCREEN 015.
        WHEN 'M'. "Material no existe en la receta
*          LEAVE TO SCREEN 100.
          SET SCREEN 100.
        WHEN 'Z'.
          CALL SCREEN 810. " Despues de login de receta, mostramos Detalle de receta.

        WHEN OTHERS.
      ENDCASE.
  ENDCASE.

ENDMODULE.

MODULE check_turno INPUT.

*  CHECK  zclpp_consumo_recetas_mp=>es_antiguo_tratamiento( i_werks = g_werks ) = ' ' AND
*          sy-ucomm <> 'NOTAG'.
  CHECK   sy-ucomm <> 'NOTAG'.

  CALL METHOD zclpp_trazabilidad_usuario=>obtener_datos_turno
    IMPORTING
      o_turno = DATA(l_turno).

  IF g_turno <> l_turno.
    CLEAR: g_operario , g_turno.
    g_aviso_d_r_t = 'T'.
    LEAVE TO SCREEN 0825.
  ENDIF.

ENDMODULE.


MODULE check_receta_no_activa INPUT.

  CHECK g_aviso_d_r_t = 'R' OR   "estamos en la pantalla 100, lectura lote para traspaso a pulper.
        g_receta_800_ok = 'X'.   "estamos en la pantalla 800, y la lectura ha sido válida.

*  CHECK zclpp_consumo_recetas_mp=>es_antiguo_tratamiento( i_werks = g_werks )  = ' '.

  CHECK sy-ucomm <> 'BACK' AND
        sy-ucomm <> 'CONS' AND
        sy-ucomm <> 'NOTAG'.

  CLEAR:  g_receta_inactiva , g_rec_inact_caduc.

* Refrescar datos finalización de receta, por si fuera Actual,
* se crea la siguiente y para a ser "Pasada".
  SELECT SINGLE fecha_fin , hora_fin
    INTO ( @gs_datos_receta-fecha_fin , @gs_datos_receta-hora_fin  )
    FROM ztpp0040
    WHERE werks     = @gs_datos_receta-werks AND
          id_receta = @gs_datos_receta-id_receta.

  IF zclpp_recetas_mp=>obtener_temporalidad_receta(
              i_fecha_ini = gs_datos_receta-fecha_ini
              i_hora_ini  = gs_datos_receta-hora_ini
              i_fecha_fin = gs_datos_receta-fecha_fin
              i_hora_fin  = gs_datos_receta-hora_fin
                                                      ) = 'P'.

    IF sy-dynnr = 800.
      g_aviso_d_r_t = 'Z'.
    ELSE.
      g_aviso_d_r_t = 'R'.
    ENDIF.
    g_receta_inactiva = 'INACTIVA'.

    DATA: l_difer TYPE fahztd.
*    CLEAR g_rec_inact_caduc.
    CALL FUNCTION 'SD_CALC_DURATION_FROM_DATETIME'
      EXPORTING
        i_date1          = gs_datos_receta-fecha_fin
        i_time1          = gs_datos_receta-hora_fin
        i_date2          = sy-datum
        i_time2          = sy-uzeit
      IMPORTING
        e_tdiff          = l_difer
*       E_DATE2_EARLY    =
      EXCEPTIONS
        invalid_datetime = 1
        OTHERS           = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ELSE.
      IF l_difer > 10000.
        g_rec_inact_caduc = 'X'.

      ENDIF.
    ENDIF.
***data: l_time type  MCWM_BE_AE ,
***      l_unit type MCWM_LZEIT.
***
***CALL FUNCTION 'L_MC_TIME_DIFFERENCE'
***  EXPORTING
***    date_from             = gs_datos_receta-fecha_fin
***    date_to               = sy-datum
***   TIME_FROM             = gs_datos_receta-hora_fin
***   TIME_TO               = sy-uzeit
*** IMPORTING
***   DELTA_TIME            = l_time
***   DELTA_UNIT            = l_unit
*** EXCEPTIONS
***   FROM_GREATER_TO       = 1
***   OTHERS                = 2
***          .
***IF sy-subrc <> 0.
**** Implement suitable error handling here
***ENDIF.


    SET SCREEN 825.
    EXIT.
  ENDIF.



ENDMODULE.


MODULE user_command_0999 INPUT.

  CASE sy-ucomm.
*    WHEN 'ACPT'. "F2 Control receta.
*      CASE g_aviso_d_r_t.
*        WHEN 'R'. " Receta no activa
*          PERFORM proceso_barcode.
*          SET SCREEN 100.
    WHEN 'BACK'. "F3-Cancelar.
      SET SCREEN 0.
*      LEAVE TO SCREEN 020.
  ENDCASE.



ENDMODULE.
