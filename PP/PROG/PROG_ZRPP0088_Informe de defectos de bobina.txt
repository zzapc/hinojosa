*&---------------------------------------------------------------------*
*& Report  ZRPP0088
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zrpp0088.

TABLES ztpp0076.

TYPES: BEGIN OF ty_ztpp0076,
         werks             TYPE werks_d,
         aufnr             TYPE aufnr,
         matnr             TYPE matnr,
         charg             TYPE charg_d,
         motivo_rep        TYPE string,
         desc_motivo       TYPE atwrt,
         znombre_oper      TYPE znombre_oper,
         zpos_a            TYPE flag,
         zpos_s            TYPE flag,
         zdist_s           TYPE zdistancia,
         zpos_c            TYPE flag,
         zpos_e            TYPE flag,
         zdist_e           TYPE zdistancia,
         zpos_d            TYPE flag,
         zdist_d           TYPE zdistancia,
         zobs_bobina       TYPE zobsbobina,
         zfecha_crea       TYPE zfechacrea,
         zhora_crea        TYPE zhoracrea,
         zfecha_modif      TYPE zfechamodif,
         zhora_modif       TYPE zhoramodif,
         usuario           TYPE uname,
         rollo_origen      TYPE matnr,
         lote_rollo_origen TYPE charg_d,
       END OF ty_ztpp0076.

"Parametros de usuario
DATA: t_usr05  TYPE STANDARD TABLE OF usr05,
      wa_usr05 TYPE                   usr05.

DATA: g_data_ini TYPE datum,
      g_data_fin TYPE datum.

DATA: gt_ztpp0076 TYPE TABLE OF ty_ztpp0076,
      ls_alv      LIKE LINE OF gt_ztpp0076.

"DATA ALV
DATA: lo_alv             TYPE REF TO cl_salv_table,
      gt_alv             TYPE TABLE OF ty_ztpp0076,
      lex_message        TYPE REF TO cx_salv_msg,
      lo_layout_settings TYPE REF TO cl_salv_layout,
      lo_layout_key      TYPE        salv_s_layout_key,
      lo_functions       TYPE REF TO cl_salv_functions_list,
      lo_columns         TYPE REF TO cl_salv_columns_table,
      lo_column          TYPE REF TO cl_salv_column,
      lex_not_found      TYPE REF TO cx_salv_not_found,
      lr_functions       TYPE REF TO cl_salv_functions_list,
      gc_true            TYPE boolean,
      o_selections       TYPE REF TO cl_salv_selections.

CLASS lcl_event_handler DEFINITION.
  PUBLIC SECTION.
    TYPES:
      tt_tabla TYPE TABLE OF ty_ztpp0076 WITH DEFAULT KEY.

    DATA:
      ref_alv_table TYPE REF TO tt_tabla,
      ref_alv       TYPE REF TO cl_salv_table.

    METHODS constructor
      IMPORTING
        i_alv TYPE REF TO cl_salv_table.

    METHODS on_link_click
      FOR EVENT if_salv_events_actions_table~link_click
                OF cl_salv_events_table
      IMPORTING row column.

ENDCLASS.                    "lcl_event_handler DEFINITION

CLASS lcl_event_handler IMPLEMENTATION.

  METHOD constructor.
    ref_alv = i_alv.
  ENDMETHOD.                    "constructor

  METHOD on_link_click.
    TRY.
        DATA(record) = ref_alv_table->*[ row ].
        CASE column.
          WHEN 'CHARG'.
            zcl_ap_lote=>ver( matnr = record-matnr charg = record-charg werks = record-werks ).
          WHEN 'LOTE_ROLLO_ORIGEN'.
            zcl_ap_lote=>ver( matnr = record-rollo_origen charg = record-lote_rollo_origen  werks = record-werks ).
        ENDCASE.
      CATCH cx_sy_itab_line_not_found.
    ENDTRY.

  ENDMETHOD.                    "on_link_click
ENDCLASS.                    "lcl_event_handler IMPLEMENTATION


SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text-001.

PARAMETERS: pa_werks TYPE werks_d.

SELECT-OPTIONS: so_charg FOR ztpp0076-charg,
                so_date  FOR ztpp0076-zfecha_crea NO-EXTENSION.

SELECTION-SCREEN END OF BLOCK b1.

INITIALIZATION.

* obtenemos los parámetros del usuario para rellenar el centro
  SELECT * FROM usr05
    INTO TABLE t_usr05
    WHERE bname = sy-uname.

  READ TABLE t_usr05 INTO wa_usr05 WITH KEY parid = 'WRK'.
  IF sy-subrc = 0.
    pa_werks = wa_usr05-parva.
  ENDIF.

AT SELECTION-SCREEN.

  IF so_date AND so_charg IS INITIAL.

    MESSAGE 'Obligatorio informar lote o fecha de producción' TYPE 'E' DISPLAY LIKE 'I'.

  ENDIF.

START-OF-SELECTION.

  IF so_date IS NOT INITIAL.
    "Añadimos un dia a la selección
    CASE so_date-option.
      WHEN 'EQ'.
        g_data_ini = so_date-low.
        IF so_date-low LT '99991231'.
          g_data_fin = so_date-low + 1.
        ELSE.
          g_data_fin = so_date-low.
        ENDIF.
      WHEN 'BT'.
        g_data_ini = so_date-low.
        IF so_date-high LT '99991231'.
          g_data_fin = so_date-high + 1.
        ELSE.
          g_data_fin = so_date-high.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.

    SELECT *
      FROM ztpp0076
      INTO CORRESPONDING FIELDS OF TABLE gt_ztpp0076
      WHERE werks = pa_werks  AND
            charg IN so_charg AND
            zfecha_crea BETWEEN g_data_ini AND g_data_fin.

    LOOP AT gt_ztpp0076 INTO ls_alv.

      SELECT atwrt
        FROM zvpp_carac_repr
        INTO ls_alv-desc_motivo
        WHERE atzhl = ls_alv-motivo_rep.
      ENDSELECT.
      "El turno de 00:00 a 05:59 pertenece al dia anterior
      IF ls_alv-zfecha_crea > g_data_ini AND ls_alv-zfecha_crea < g_data_fin.
        APPEND ls_alv TO gt_alv.
      ENDIF.

      IF ls_alv-zfecha_crea = g_data_ini AND ls_alv-zhora_crea >= '060000'.
        APPEND ls_alv TO gt_alv.
      ENDIF.

      IF ls_alv-zfecha_crea = g_data_fin AND ls_alv-zhora_crea < '060000'.
        APPEND ls_alv TO gt_alv.
      ENDIF.

    ENDLOOP.

  ELSE.

    SELECT *
     FROM ztpp0076
     INTO CORRESPONDING FIELDS OF TABLE gt_ztpp0076
     WHERE werks = pa_werks  AND
           charg IN so_charg.

    LOOP AT gt_ztpp0076 INTO ls_alv.
      SELECT atwrt
        FROM zvpp_carac_repr
        INTO ls_alv-desc_motivo
        WHERE atzhl = ls_alv-motivo_rep.
      ENDSELECT.
      APPEND ls_alv TO gt_alv.

    ENDLOOP.

  ENDIF.

  LOOP AT gt_alv ASSIGNING FIELD-SYMBOL(<alv>).
    <alv>-lote_rollo_origen = zcl_ap_clas_lote=>get_caract_mat_lote( matnr = <alv>-matnr
                                                                     charg = <alv>-charg
*                                                                     werks = <alv>-werks
                                                                     caract = 'Z_LOTE_ORIGEN'
                                                                     opt   = 'X' ).
    <alv>-rollo_origen = zcl_ap_clas_lote=>get_caract_mat_lote( matnr = <alv>-matnr
                                                                   charg = <alv>-charg
*                                                                     werks = <alv>-werks
                                                                     caract = 'Z_ROLLO_ORIGEN_V2'
                                                                     opt   = 'X' ).
    __formatear_material <alv>-rollo_origen.
  ENDLOOP.




  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = lo_alv
        CHANGING
          t_table      =  gt_alv ).

*      lo_alv->set_screen_status( pfstatus = 'SALV_STANDARD'
*                                          report = sy-repid
*                                          set_functions = lo_alv->c_functions_all ).

    CATCH cx_salv_msg INTO lex_message.

  ENDTRY.

* APC20240515 Asignamos el manejador del evento
  DATA(event_handler) = NEW lcl_event_handler( lo_alv ).
  DATA(lo_events) = lo_alv->get_event( ).
  SET HANDLER event_handler->on_link_click FOR lo_events.
  GET REFERENCE OF gt_alv INTO event_handler->ref_alv_table.
  event_handler->ref_alv = lo_alv.

  o_selections = lo_alv->get_selections( ).
  o_selections->set_selection_mode( cl_salv_selections=>multiple ).

  lr_functions = lo_alv->get_functions( ).
  lr_functions->set_default( gc_true ).

  " Set the ALV Layouts
  "-----------------------------------------------------------"
  lo_layout_settings   = lo_alv->get_layout( ).
  lo_layout_key-report = sy-repid.
  lo_layout_settings->set_key( lo_layout_key ).
  lo_layout_settings->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout_settings->set_default( abap_true ).

  " set the ALV Toolbars
  "-----------------------------------------------------------"
  lo_functions = lo_alv->get_functions( ).
  lo_alv->get_functions( )->set_all( if_salv_c_bool_sap=>true ).

  " Optimize ALV Columns size
  "-----------------------------------------------------------"
  lo_columns = lo_alv->get_columns( ).
  lo_columns->set_optimize( 'X' ).

  TRY.
      lo_column = lo_columns->get_column( 'WERKS' ).
      lo_column->set_short_text( 'Centro' ).
      lo_column->set_medium_text( 'Centro' ).
      lo_column->set_long_text( 'Centro' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'AUFNR' ).
      lo_column->set_short_text( 'Num. Orden' ).
      lo_column->set_medium_text( 'Numero orden' ).
      lo_column->set_long_text( 'Numero orden' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'MOTIVO_REP' ).
      lo_column->set_short_text( 'Motivo Rep' ).
      lo_column->set_medium_text( 'Motivo reproceso' ).
      lo_column->set_long_text( 'Motivo reproceso' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'DESC_MOTIVO' ).
      lo_column->set_short_text( 'Descrip.' ).
      lo_column->set_medium_text( 'Descripcion motivo' ).
      lo_column->set_long_text( 'Descripcion motivo' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'ZNOMBRE_OPER' ).
      lo_column->set_short_text( 'Operario' ).
      lo_column->set_medium_text( 'Operario' ).
      lo_column->set_long_text( 'Operario' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'ZPOS_A' ).
      lo_column->set_short_text( 'Pos A' ).
      lo_column->set_medium_text( 'Posición A' ).
      lo_column->set_long_text( 'Posición A' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'ZPOS_S' ).
      lo_column->set_short_text( 'Pos S' ).
      lo_column->set_medium_text( 'Posición S' ).
      lo_column->set_long_text( 'Posición S' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'ZDIST_S' ).
      lo_column->set_short_text( 'Dist S' ).
      lo_column->set_medium_text( 'Distancia S' ).
      lo_column->set_long_text( 'Distancia S' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'ZPOS_C' ).
      lo_column->set_short_text( 'Pos C' ).
      lo_column->set_medium_text( 'Posición C' ).
      lo_column->set_long_text( 'Posición C' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'ZPOS_E' ).
      lo_column->set_short_text( 'Pos E' ).
      lo_column->set_medium_text( 'Posición E' ).
      lo_column->set_long_text( 'Posición E' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'ZDIST_E' ).
      lo_column->set_short_text( 'Dist E' ).
      lo_column->set_medium_text( 'Distancia E' ).
      lo_column->set_long_text( 'Distancia E' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'ZPOS_D' ).
      lo_column->set_short_text( 'Pos D' ).
      lo_column->set_medium_text( 'Posición D' ).
      lo_column->set_long_text( 'Posición D' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'ZDIST_D' ).
      lo_column->set_short_text( 'Dist D' ).
      lo_column->set_medium_text( 'Distancia D' ).
      lo_column->set_long_text( 'Distancia D' ).
    CATCH cx_salv_not_found INTO lex_not_found.
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( columnname = 'ZOBS_BOBINA' ).
      lo_column->set_short_text( value  = 'Observ.' ).
      lo_column->set_medium_text( value  = 'Observaciones bobina' ).
      lo_column->set_long_text( value  = 'Observaciones bobina' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( columnname = 'ZFECHA_CREA' ).
      lo_column->set_short_text( value  = 'Fecha crea' ).
      lo_column->set_medium_text( value  = 'Fecha creación' ).
      lo_column->set_long_text( value  = 'Fecha creación' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( columnname = 'ZHORA_CREA' ).
      lo_column->set_short_text( value  = 'Hora crea' ).
      lo_column->set_medium_text( value  = 'Hora creación' ).
      lo_column->set_long_text( value  = 'Hora creación' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( columnname = 'ZFECHA_MODIF' ).
      lo_column->set_short_text( value  = 'Fecha mod.' ).
      lo_column->set_medium_text( value  = 'Fecha modificación' ).
      lo_column->set_long_text( value  = 'Fecha modificación' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( columnname = 'ZHORA_MODIF' ).
      lo_column->set_short_text( value  = 'Hora mod' ).
      lo_column->set_medium_text( value  = 'Hora modificación' ).
      lo_column->set_long_text( value  = 'Hora modificación' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( columnname = 'USUARIO' ).
      lo_column->set_short_text( value  = 'Usuario' ).
      lo_column->set_medium_text( value  = 'Usuario' ).
      lo_column->set_long_text( value  = 'Usuario' ).
    CATCH cx_salv_not_found .
  ENDTRY.

* APC20240515 Marcamos celda coo navegable
  TRY.
      lo_column ?= lo_columns->get_column( columnname = 'CHARG' ).
      DATA(column) = CAST cl_salv_column_list( lo_columns->get_column( 'CHARG' ) ).
      column->set_cell_type( if_salv_c_cell_type=>hotspot ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( columnname = 'ROLLO_ORIGEN' ).
      lo_column->set_short_text( value  = 'RolloOr.' ).
      lo_column->set_medium_text( value  = 'Rollo origen' ).
      lo_column->set_long_text( value  = 'Rollo origen' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( columnname = 'LOTE_ROLLO_ORIGEN' ).
      lo_column->set_short_text( value  = 'L.Origen' ).
      lo_column->set_medium_text( value  = 'Lote origen' ).
      lo_column->set_long_text( value  = 'Lote rollo origen' ).
      column = CAST cl_salv_column_list( lo_columns->get_column( 'LOTE_ROLLO_ORIGEN' ) ).
      column->set_cell_type( if_salv_c_cell_type=>hotspot ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.

    CATCH cx_salv_not_found.

  ENDTRY.

  lo_alv->display( ).
