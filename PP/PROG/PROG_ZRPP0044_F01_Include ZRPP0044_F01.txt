*&---------------------------------------------------------------------*
*&  Include           ZRPP0044_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_datos .
  TYPES: BEGIN OF tipo_filas,
           linea   TYPE zlinea,
           gramaje TYPE zgramaje_ext.
  TYPES: END OF tipo_filas.
  TYPES: tty_filas TYPE TABLE OF tipo_filas.
  DATA: t_filas  TYPE tty_filas,
        wa_filas TYPE LINE OF tty_filas.

  DATA: wa_ztpp0018          TYPE ztpp0018,
        wa_descripcion_modos TYPE ztpp0019_t,
        wa_gramajes          TYPE ZTPP0022.


  FIELD-SYMBOLS: <fs_modo> TYPE zmodo.
  DATA: lv_str       TYPE char80.


  DATA: ls_dato      TYPE zsrpp0044.



  CLEAR: wa_ztpp0018, t_descripcion_modos, t_gramajes.
  REFRESH: t_descripcion_modos, t_gramajes.

* verificamos que la linea indicada existe en el centro indicado
  SELECT SINGLE * FROM ztpp0018
    INTO wa_ztpp0018
    WHERE linea = p_linea AND
          werks = p_werks.

  IF sy-subrc = 0.
*   recuperamos los modos
    SELECT * FROM ztpp0019
      INTO TABLE t_modos
      WHERE linea = p_linea AND
            werks = p_werks.

*   recuperamos las descripciones de los modos
    IF t_modos[] IS NOT INITIAL.
      SELECT * FROM ztpp0019_t
        INTO TABLE t_descripcion_modos
        FOR ALL ENTRIES IN t_modos
        WHERE linea = t_modos-linea AND
              werks = t_modos-werks AND
              spras = sy-langu.
    ENDIF.

*   recuperamos los gramajes
    SELECT * FROM ZTPP0022
      INTO TABLE t_gramajes.

*   recuperamos los tiempos
    IF t_descripcion_modos[] IS NOT INITIAL.
      SELECT * FROM ztpp0021
                INTO TABLE t_tiempos
        FOR ALL ENTRIES IN t_descripcion_modos
        WHERE werks = t_descripcion_modos-werks AND
              linea = t_descripcion_modos-linea AND
              modo = t_descripcion_modos-modo.
    ENDIF.

  ELSE.
    MESSAGE e270(zpp) WITH p_linea p_werks. "La línea & no existe en el centro &
  ENDIF.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  create_dynamic_fcat
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM create_dynamic_fcat.
  DATA: ls_fcat TYPE lvc_s_fcat. "área de trabajo local para el catálogo de campos

  ls_fcat-fieldname = 'WERKS'.
  ls_fcat-datatype = 'CHAR'.
  ls_fcat-intlen = 4.
  ls_fcat-coltext = text-004.
  ls_fcat-scrtext_l = text-004 .
  ls_fcat-scrtext_m = text-004.
  ls_fcat-scrtext_s = text-004.
*  ls_fcat-NO_OUT = 'X'.
  ls_fcat-edit = ' '.
  APPEND ls_fcat TO it_fldcat.


  "La primera columna
  ls_fcat-fieldname = 'LINEA'.
  ls_fcat-datatype = 'CHAR'.
  ls_fcat-intlen = 10.
  ls_fcat-coltext = text-001.
  ls_fcat-scrtext_l = text-001 .
  ls_fcat-scrtext_m = text-001.
  ls_fcat-scrtext_s = text-001.
  ls_fcat-edit = ' '.
  APPEND ls_fcat TO it_fldcat.

  "La segunda columna
  ls_fcat-fieldname = 'GRAMAJE'.
  ls_fcat-datatype = 'NUMC'.
  ls_fcat-intlen = 5.
  ls_fcat-coltext = text-002.
  ls_fcat-scrtext_l = text-002 .
  ls_fcat-scrtext_m = text-002.
  ls_fcat-scrtext_s = text-002.
  ls_fcat-edit = ' '.
  APPEND ls_fcat TO it_fldcat.

* montamos la parte dinámica que son los modos - tiempo máquina.
  LOOP AT t_descripcion_modos INTO wa_descripcion_modos.
    CONCATENATE wa_descripcion_modos-modo 'TM' INTO ls_fcat-fieldname.
    ls_fcat-datatype = 'NUMC'.
    ls_fcat-inttype = 'D'.
    ls_fcat-intlen = 5.
    ls_fcat-outputlen = 20.
    ls_fcat-just = 'C'.
    ls_fcat-edit = 'X'.
    CONCATENATE 'Tiempos máquina' wa_descripcion_modos-nombre_modo INTO ls_fcat-coltext SEPARATED BY '-'.
    CONCATENATE 'Tiempos máquina' wa_descripcion_modos-nombre_modo INTO ls_fcat-scrtext_l SEPARATED BY '-'.
    CONCATENATE 'Tiempos máquina' wa_descripcion_modos-nombre_modo INTO ls_fcat-scrtext_m SEPARATED BY '-'.
    CONCATENATE 'Tiempos máquina' wa_descripcion_modos-nombre_modo INTO ls_fcat-scrtext_s SEPARATED BY '-'.
    APPEND ls_fcat TO it_fldcat.
    CLEAR  ls_fcat.
  ENDLOOP.

* montamos la parte dinámica que son los modos - num. operarios
  LOOP AT t_descripcion_modos INTO wa_descripcion_modos.
    CONCATENATE wa_descripcion_modos-modo 'NO' INTO ls_fcat-fieldname.
    ls_fcat-datatype = 'DEC'.
    ls_fcat-intlen = 5.
    ls_fcat-decimals = 1.

    ls_fcat-outputlen = 20.
    ls_fcat-just = 'C'.
    ls_fcat-edit = 'X'.
    CONCATENATE 'Nº Operarios' wa_descripcion_modos-nombre_modo INTO ls_fcat-coltext SEPARATED BY '-'.
    CONCATENATE 'Nº Operarios' wa_descripcion_modos-nombre_modo INTO ls_fcat-scrtext_l SEPARATED BY '-'.
    CONCATENATE 'Nº Operarios' wa_descripcion_modos-nombre_modo INTO ls_fcat-scrtext_m SEPARATED BY '-'.
    CONCATENATE 'Nº Operarios' wa_descripcion_modos-nombre_modo INTO ls_fcat-scrtext_s SEPARATED BY '-'.
    APPEND ls_fcat TO it_fldcat.
    CLEAR  ls_fcat.
  ENDLOOP.


ENDFORM.                    "create_dynamic_fcat
*&---------------------------------------------------------------------*
*&      Form  create_dynamic_itab
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM create_dynamic_itab.
* Create dynamic internal table and assign to field sysmbol.
* Use dynamic field catalog just built.
  CALL METHOD cl_alv_table_create=>create_dynamic_table
    EXPORTING
      it_fieldcatalog = it_fldcat
    IMPORTING
      ep_table        = new_table.
  ASSIGN new_table->* TO <dyn_table>.


*    "Referencia de un Objeto
  DATA lo_newline TYPE REF TO data. "Para el área de trabajo de la tabla interna dinámica.

  CREATE DATA lo_newline LIKE LINE OF <dyn_table>.
  ASSIGN lo_newline->* TO <gs_dyntable>.

ENDFORM.                    "create_dynamic_itab
*&---------------------------------------------------------------------*
*&      Form  populate_dynamic_itab
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM populate_dynamic_itab.

  DATA: lv_index_row(3) TYPE c,  "Nro de fila que se esta tratando
        lv_index_col(3) TYPE c,  "Nro de columna que se esta tratando
        lv_fldval(10)   TYPE c,  "Valor que será asignado en dicha celda de la fila y columna
        lv_minmod       TYPE ztpp0021-minmod,  "Valor que será asignado en dicha celda de la fila y columna
        lv_numoper      TYPE ztpp0021-numoper.  "Valor que será asignado en dicha celda de la fila y columna

  DATA: lv_col(10)   TYPE c.

  LOOP AT t_gramajes INTO wa_gramajes.
    ASSIGN COMPONENT 'GRAMAJE' OF STRUCTURE <gs_dyntable> TO <fs1>.
    lv_fldval = wa_gramajes-gramaje.
    <fs1> = lv_fldval.
    ASSIGN COMPONENT gv_flname OF STRUCTURE <gs_dyntable> TO <fs1>.

    LOOP AT t_modos INTO wa_modos.
      ASSIGN COMPONENT 'WERKS' OF STRUCTURE <gs_dyntable> TO <fs1>.
      lv_fldval = wa_modos-werks.
      <fs1> = lv_fldval.
      ASSIGN COMPONENT gv_flname OF STRUCTURE <gs_dyntable> TO <fs1>.


      ASSIGN COMPONENT 'LINEA' OF STRUCTURE <gs_dyntable> TO <fs1>.
      lv_fldval = wa_modos-linea.
      <fs1> = lv_fldval.
      ASSIGN COMPONENT gv_flname OF STRUCTURE <gs_dyntable> TO <fs1>.

      LOOP AT t_descripcion_modos INTO wa_descripcion_modos WHERE linea = wa_modos-linea AND
                                                                  werks = wa_modos-werks.

        READ TABLE t_tiempos INTO wa_tiempos WITH KEY werks = wa_descripcion_modos-werks
                                                      linea = lv_fldval
                                                      modo = wa_descripcion_modos-modo
                                                      gramaje   = wa_gramajes-gramaje.
        IF sy-subrc = 0.
          CONCATENATE  wa_descripcion_modos-modo 'TM' INTO lv_col.
          ASSIGN COMPONENT lv_col OF STRUCTURE <gs_dyntable> TO <fs1>.
          lv_minmod = wa_tiempos-minmod.
          <fs1> = lv_minmod .
          ASSIGN COMPONENT gv_flname OF STRUCTURE <gs_dyntable> TO <fs1>.

          CONCATENATE  wa_descripcion_modos-modo 'NO' INTO lv_col.
          ASSIGN COMPONENT lv_col OF STRUCTURE <gs_dyntable> TO <fs1>.
          lv_numoper = wa_tiempos-numoper.
          <fs1> = lv_numoper .
          ASSIGN COMPONENT gv_flname OF STRUCTURE <gs_dyntable> TO <fs1>.
        ENDIF.

      ENDLOOP.

    ENDLOOP.

    APPEND <gs_dyntable> TO <dyn_table>.

  ENDLOOP.

ENDFORM.                    "populate_dynamic_itab
*&---------------------------------------------------------------------*
*&      Form  check_data
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ER_DATA_CHANGED  text
*----------------------------------------------------------------------*
FORM check_data USING p_er_data_changed TYPE REF TO cl_alv_changed_data_protocol.

* Get altered data back
  ASSIGN p_er_data_changed->mp_mod_rows TO <fs1>.
  stab = p_er_data_changed->mp_mod_rows.
  ASSIGN stab->* TO <fs2>.

*  LOOP AT <fs2> INTO sdog.
** ALV grid display with altered data is now in <fs2>.
** do any extra processing you want here
*  ENDLOOP.

* now display new table
  CALL METHOD grid1->disp_tab.
ENDFORM.                    "check_data
*&---------------------------------------------------------------------*
*&      Form  exit_program
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM exit_program.
  CALL METHOD grid_container1->free.
  CALL METHOD cl_gui_cfw=>flush.
  LEAVE PROGRAM.
ENDFORM.                    "exit_program
*&---------------------------------------------------------------------*
*&      Form  refresh_disp
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM refresh_disp.
  CALL METHOD grid1->refresh_table_display.
ENDFORM.                    "refresh_disp
*&---------------------------------------------------------------------*
*&      Form  update_table
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM update_table.
  DATA: t_ztpp0021  TYPE TABLE OF ztpp0021,
        wa_ztpp0021 TYPE ztpp0021,
        lv_col      TYPE c LENGTH 40.
  FIELD-SYMBOLS: <minmod>  TYPE any,
                 <numoper> TYPE any.


* The dynamic table here is the changed table read from the grid
* after user has changed it
* Data can be saved to DB or whatever.
  LOOP AT <dyn_table> INTO <gs_dyntable>.
    ASSIGN COMPONENT 'WERKS' OF STRUCTURE <gs_dyntable> TO <fs1>.
    wa_ztpp0021-werks = <fs1>.


    ASSIGN COMPONENT 'LINEA' OF STRUCTURE <gs_dyntable> TO <fs1>.
    wa_ztpp0021-linea = <fs1>.

    ASSIGN COMPONENT 'GRAMAJE' OF STRUCTURE <gs_dyntable> TO <fs1>.
    wa_ztpp0021-gramaje  = <fs1>.

    LOOP AT t_descripcion_modos INTO wa_descripcion_modos.
      CONCATENATE wa_descripcion_modos-modo 'TM' INTO lv_col.
      ASSIGN COMPONENT lv_col OF STRUCTURE <gs_dyntable> TO <minmod>.

      wa_ztpp0021-werks = wa_descripcion_modos-werks.
      wa_ztpp0021-modo = wa_descripcion_modos-modo.
      wa_ztpp0021-minmod = <minmod>.


      CONCATENATE wa_descripcion_modos-modo 'NO' INTO lv_col.
      ASSIGN COMPONENT lv_col OF STRUCTURE <gs_dyntable> TO <numoper>.
      wa_ztpp0021-numoper = <numoper>.

      APPEND wa_ztpp0021 TO t_ztpp0021.

    ENDLOOP.
  ENDLOOP.


  MODIFY ztpp0021 FROM TABLE t_ztpp0021.
  IF sy-subrc = 0.
    COMMIT WORK.
  ENDIF.

* switch off edit mode again for next function
  i4 = 0.
  CALL METHOD grid1->set_ready_for_input
    EXPORTING
      i_ready_for_input = i4.
ENDFORM.                    "update_table
*&---------------------------------------------------------------------*
*&      Form  set_input
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM set_input.
  i4 = 1.
  CALL METHOD grid1->set_ready_for_input
    EXPORTING
      i_ready_for_input = i4.
ENDFORM.                    "set_input
*&---------------------------------------------------------------------*
*&      Form  switch_input
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM switch_input.

  IF i4 = 1.
    i4 = 0.
  ELSE.
    i4 = 1.
  ENDIF.
  CALL METHOD grid1->set_ready_for_input
    EXPORTING
      i_ready_for_input = i4.
ENDFORM.                    "switch_input
*&---------------------------------------------------------------------*
*&      Form  init_grid
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM init_grid.
    DATA: lt_tooltips TYPE lvc_t_qinf,
        lt_toolb    TYPE ui_functions,
        ls_toolb    TYPE ui_func.

* Enabling the grid to edit mode,
*  struct_grid_lset-edit = 'X'. "To enable editing in ALV
*  struct_grid_lset-grid_title = text-003.
  struct_grid_lset-sel_mode = 'A'.


    PERFORM excluir_botones CHANGING lt_toolb.




  CALL METHOD grid1->set_table_for_first_display
    EXPORTING
      is_layout       = struct_grid_lset
      it_toolbar_excluding = lt_toolb
    CHANGING
      it_outtab       = <dyn_table>
      it_fieldcatalog = it_fldcat.

ENDFORM.                    "init_grid
*&---------------------------------------------------------------------*
*&      Form  register_enter_event
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM register_enter_event.
  CALL METHOD grid1->register_edit_event
    EXPORTING
      i_event_id = cl_gui_alv_grid=>mc_evt_enter.

* Instantiate the event or it won't work.
  CREATE OBJECT g_event_receiver.
  SET HANDLER g_event_receiver->handle_data_changed FOR grid1.
ENDFORM.                    "register_enter_event
*&---------------------------------------------------------------------*
*&      Form  AUTORITY_CHECK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM autority_check .
*   Validar permisos para modificar
    AUTHORITY-CHECK OBJECT 'ZPP02'
    ID 'ACTVT' FIELD '01'. " read access
    IF sy-subrc <> 0.
      MESSAGE e144(zpp).
    ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXCLUIR_BOTONES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_TOOLB  text
*----------------------------------------------------------------------*
FORM excluir_botones  CHANGING lt_toolb TYPE ui_functions.

  DATA: ls_toolb    TYPE ui_func.

  CLEAR:  lt_toolb.
  REFRESH:  lt_toolb.


** Excluir botón orden ascendente
*  ls_toolb = cl_gui_alv_grid=>mc_fc_sort_asc.
*  APPEND ls_toolb TO lt_toolb.
*
** Excluir botón ordenar descendente
*  ls_toolb = cl_gui_alv_grid=>mc_fc_sort_dsc.
*  APPEND ls_toolb TO lt_toolb.

* Excluir botón buscar
  ls_toolb = cl_gui_alv_grid=>mc_fc_find.
  APPEND ls_toolb TO lt_toolb.

* Excluir botón filtrar
  ls_toolb = cl_gui_alv_grid=>mc_fc_filter.
  APPEND ls_toolb TO lt_toolb.

* Exclude botón suma
  ls_toolb = cl_gui_alv_grid=>mc_fc_sum.
  APPEND ls_toolb TO lt_toolb.

* Exclude botón promedio
  ls_toolb = cl_gui_alv_grid=>mc_fc_average.
  APPEND ls_toolb TO lt_toolb.

* Excluir botón grafico
  ls_toolb = cl_gui_alv_grid=>mc_fc_graph.
  APPEND ls_toolb TO lt_toolb.

* Exclude botón alv info
  ls_toolb = cl_gui_alv_grid=>mc_fc_info.
  APPEND ls_toolb TO lt_toolb.

* Exclude botón vistas
  ls_toolb = cl_gui_alv_grid=>mc_mb_view.
  APPEND ls_toolb TO lt_toolb.



  ls_toolb = cl_gui_alv_grid=>MC_FC_LOC_APPEND_ROW.
    APPEND ls_toolb TO lt_toolb.

  ls_toolb = cl_gui_alv_grid=>MC_FC_LOC_COPY.
    APPEND ls_toolb TO lt_toolb.
  ls_toolb = cl_gui_alv_grid=>MC_FC_LOC_COPY_ROW.
    APPEND ls_toolb TO lt_toolb.
  ls_toolb = cl_gui_alv_grid=>MC_FC_LOC_CUT.
    APPEND ls_toolb TO lt_toolb.
  ls_toolb = cl_gui_alv_grid=>MC_FC_LOC_DELETE_ROW.
    APPEND ls_toolb TO lt_toolb.
  ls_toolb = cl_gui_alv_grid=>MC_FC_LOC_INSERT_ROW.
    APPEND ls_toolb TO lt_toolb.
  ls_toolb = cl_gui_alv_grid=>MC_FC_LOC_MOVE_ROW.
    APPEND ls_toolb TO lt_toolb.
  ls_toolb = cl_gui_alv_grid=>MC_FC_LOC_PASTE.
    APPEND ls_toolb TO lt_toolb.
  ls_toolb = cl_gui_alv_grid=>MC_FC_LOC_PASTE_NEW_ROW.
    APPEND ls_toolb TO lt_toolb.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  BLOQUEO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM bloqueo .
  DATA: w_funcname LIKE tfdir-funcname.
  w_funcname = sy-cprog.
*
  CALL FUNCTION 'ENQUEUE_ESFUNCTION'
    EXPORTING
*     MODE_TFDIR     = 'E'
      funcname       = w_funcname
*     X_FUNCNAME     = ' '
*     _SCOPE         = '2'
*     _WAIT          = ' '
*     _COLLECT       = ' '
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
    MESSAGE e256(zpp)."Programa bloqueado por otro usuario. Inténtelo más tarde.
  ELSE.
*    MESSAGE i257(zpp). "Ha bloqueado el programa para otros usuarios. Téngalo en cuenta.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DESBLOQUEO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM desbloqueo .
  DATA: w_funcname LIKE tfdir-funcname.
  w_funcname = sy-cprog.

  CALL FUNCTION 'DEQUEUE_ESFUNCTION'
    EXPORTING
*     MODE_TFDIR = 'E'
      funcname = w_funcname
*     X_FUNCNAME = ' '
*     _SCOPE   = '3'
*     _SYNCHRON  = ' '
*     _COLLECT = ' '
    .
  IF sy-subrc = 0.
*     MESSAGE i258(zpp). "Programa desbloqueado. Otros usuarios pueden usarlo.
  ENDIF.
ENDFORM.
