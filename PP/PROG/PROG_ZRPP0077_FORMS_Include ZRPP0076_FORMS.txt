*&---------------------------------------------------------------------*
*&  Include           ZRPP0076_FORMS
*&---------------------------------------------------------------------*

FORM obtener_datos TABLES pt_datos LIKE gt_datos.

  CLEAR: gt_datos_compras[] , gt_datos_ventas[].
  gr_sgpi = NEW zcl_ap_sgpi( COMMIT_WORK = 'X' ).

  IF p_comp = 'X'.
    gr_sgpi->texto( 'Obteniendo datos de compras' ).

    PERFORM obtener_datos_compras.
    INSERT LINES OF gt_datos_compras INTO TABLE pt_datos.
  ENDIF.

  IF p_vent = 'X'.
    gr_sgpi->texto( 'Obteniendo datos de ventas' ).

    PERFORM obtener_datos_ventas.
    INSERT LINES OF gt_datos_ventas INTO TABLE pt_datos.
  ENDIF.

  CHECK pt_datos[] IS NOT INITIAL.

  PERFORM tratar_entregas TABLES pt_datos.

ENDFORM.

FORM tratar_entregas TABLES pt_datos LIKE gt_datos.

  TABLES: vttk.
  DATA: l_vbeln_ant TYPE vbeln.
  DATA: l_posnr_ant TYPE posnr.

  gr_sgpi->texto( 'Obteniendo datos de entregas...' ).

*  SELECT vbeln , vttk~erdat , dalbg , daten , uzdis , ualbg , ualen , uzabf , vttk~handle
  SELECT vbeln , vttk~tknum , vttk~erdat , route " , daten , uzdis , ualbg , ualen , uzabf , vttk~handle
    FROM vttk
    INNER JOIN vttp ON vttk~tknum = vttp~tknum
    INTO TABLE @DATA(lt_vttk)
    FOR ALL ENTRIES IN @pt_datos
 WHERE vbeln = @pt_datos-vbeln_ent.

* Posiciones de entrega
  SELECT  vbeln , posnr , kcmeng , meins   " uecha , kcmeng ,
    FROM lips
    INTO TABLE @DATA(lt_lips)
    FOR ALL ENTRIES IN @pt_datos
    WHERE vbeln = @pt_datos-vbeln_ent
      AND posnr = @pt_datos-posnr_ent.

* Cabecera entrega.
  SELECT  vbeln , erdat , lfdat , btgew , gewei ,  wadat_ist , kodat
    FROM likp
    INTO TABLE @DATA(lt_likp)
    FOR ALL ENTRIES IN @pt_datos
 WHERE vbeln = @pt_datos-vbeln_ent.

  SELECT vbeln , kostk ,  wbstk , trsta , fkivk
    FROM vbuk
    INTO TABLE @DATA(lt_vbuk)
    FOR ALL ENTRIES IN @pt_datos
    WHERE vbeln = @pt_datos-vbeln_ent.

  SELECT vbeln , posnr , kosta , wbsta
    FROM vbup
    INTO TABLE @DATA(lt_vbup)
    FOR ALL ENTRIES IN @pt_datos
    WHERE vbeln = @pt_datos-vbeln_ent AND
          posnr = @pt_datos-posnr_ent.

  CLEAR : l_vbeln_ant , l_posnr_ant .

  DATA: l_cont(10) TYPE n.
  CLEAR l_cont.
  DATA(l_num_linies) = lines( pt_datos[] ).

  LOOP AT pt_datos ASSIGNING FIELD-SYMBOL(<fs_datos>).
    l_cont = l_cont + 1.
    DATA(l_txt) = |Tratando entregas... { l_cont ALPHA = OUT } de { l_num_linies } |.
    CONDENSE l_txt.
    gr_sgpi->texto( l_txt ).
*  gr_sgpi->texto( 'Obteniendo datos de entregas...' ).

    IF l_vbeln_ant <> <fs_datos>-vbeln OR
       l_posnr_ant <> <fs_datos>-posnr.

      l_vbeln_ant = <fs_datos>-vbeln.
      l_posnr_ant = <fs_datos>-posnr.

    ELSE.
* Borrar campos de cantidad e importe a nivel de pedido/posición
      CLEAR: "<fs_datos>-vbeln ,
*             <fs_datos>-vkorg ,
*             <fs_datos>-vtext  ,
*             <fs_datos>-kunnr   ,
*             <fs_datos>-name1   ,
*             <fs_datos>-vbeln   ,
*             <fs_datos>-bstnk   ,
*             <fs_datos>-vbtyp   ,
*             <fs_datos>-auart   ,
*             <fs_datos>-audat   ,
*             <fs_datos>-kunwe   ,
*             <fs_datos>-land1   ,
*             <fs_datos>-pstlz   ,
*             <fs_datos>-inco1   ,
*             <fs_datos>-inco2   ,
*             <fs_datos>-zzsegcal ,
*             <fs_datos>-zzsegcal_desc ,
*             <fs_datos>-posnr   ,
*             <fs_datos>-matnr   ,
*             <fs_datos>-arktx ,
*             <fs_datos>-vdatu ,
             <fs_datos>-kwmeng ,
             <fs_datos>-vrkme ,
             <fs_datos>-obmng ,
             <fs_datos>-glmng ,
             <fs_datos>-wemng ,
             <fs_datos>-netwr ,
             <fs_datos>-waerk .
*             <fs_datos>-num_repartos.

    ENDIF.

* Datos estado de posicion de entrega
    TRY.
        DATA(ls_vbuk) = lt_vbuk[ vbeln = <fs_datos>-vbeln_ent ].
        <fs_datos>-kostk = ls_vbuk-kostk .
        <fs_datos>-wbstk = ls_vbuk-wbstk .
        <fs_datos>-trsta = ls_vbuk-trsta .
        <fs_datos>-fkivk = ls_vbuk-fkivk .
      CATCH cx_root .
    ENDTRY.


    TRY.
*        <fs_datos>-kosta  = lt_vbup[ vbeln = <fs_datos>-vbeln_ent
*                                         posnr = <fs_datos>-posnr_ent ]-kosta.
        DATA(ls_vbup)  = lt_vbup[ vbeln = <fs_datos>-vbeln_ent
                                        posnr = <fs_datos>-posnr_ent ].
        IF ls_vbup-wbsta = 'C'.
          <fs_datos>-kosta = ls_vbup-wbsta.
        ELSE.
          <fs_datos>-kosta = ls_vbup-kosta.

        ENDIF.
      CATCH cx_root .
    ENDTRY.

* Obtener datos de cab.entrega (LIKP)
    TRY.
        <fs_datos>-fcr_entrega  = lt_likp[ vbeln = <fs_datos>-vbeln_ent ]-lfdat.
        <fs_datos>-wadat_ist    = lt_likp[ vbeln = <fs_datos>-vbeln_ent ]-wadat_ist.
        <fs_datos>-btgew        = lt_likp[ vbeln = <fs_datos>-vbeln_ent ]-btgew.
        <fs_datos>-gewei        = lt_likp[ vbeln = <fs_datos>-vbeln_ent ]-gewei.
      CATCH cx_root .
    ENDTRY.

* Kg de posición de entrega
    IF <fs_datos>-lfimg IS INITIAL.
      TRY.
          DATA(ls_lips) = lt_lips[ vbeln = <fs_datos>-vbeln_ent
                                   posnr = <fs_datos>-posnr_ent ].
*          IF <fs_datos>-lfimg = 0.
          <fs_datos>-lfimg = ls_lips-kcmeng.
*          ENDIF.
          <fs_datos>-vrkmp_ent = ls_lips-meins.
        CATCH cx_root .
      ENDTRY.
    ENDIF.

* Datos de transportes
    IF <fs_datos>-vbeln_ent IS NOT INITIAL.
      TRY.
          DATA(ls_vttk) = lt_vttk[ vbeln = <fs_datos>-vbeln_ent ].
          <fs_datos>-fcrdoctrans      = ls_vttk-erdat.
          <fs_datos>-route            = ls_vttk-route.
          <fs_datos>-tknum            = ls_vttk-tknum.
        CATCH cx_root .
      ENDTRY.
    ENDIF.

* Invertir signo en posiciones de devolución y abono.
    IF <fs_datos>-vbtyp = 'H' OR <fs_datos>-vbtyp = 'K' .
      "DEVOLUCIONES Y ABONOS * -1
      <fs_datos>-netwr        = <fs_datos>-netwr  * -1.
      <fs_datos>-obmng       = <fs_datos>-obmng  * -1.
      <fs_datos>-kwmeng      = <fs_datos>-kwmeng * -1.
      <fs_datos>-glmng       = <fs_datos>-glmng  * -1.
      <fs_datos>-wemng       = <fs_datos>-wemng  * -1.
      <fs_datos>-lfimg       = <fs_datos>-lfimg  * -1.
    ENDIF.

* Tratamiento para cantidad pendiente:
* Si se ha servido mas de la cantidad pedido(KWMENG), ctdad pendiente= 0.
    IF <fs_datos>-obmng < 0.
      CLEAR <fs_datos>-obmng.
    ENDIF.

    CASE <fs_datos>-vbtyp.
      WHEN 'C'. <fs_datos>-vbtyp = 'P'.
      WHEN 'H'. <fs_datos>-vbtyp = 'D'.
      WHEN OTHERS.
    ENDCASE.

    IF <fs_datos>-kwmeng IS NOT INITIAL.

      CALL METHOD zclpp_seguimiento_pedidos=>get_stock
        EXPORTING
          i_werks   = <fs_datos>-vkorg
          i_kunnr   = <fs_datos>-kunnr
          i_matnr   = <fs_datos>-matnr
          i_lgort   = '1040'
        IMPORTING
          o_kg_de_a = <fs_datos>-kg_stock_de_a
          o_kg_de_r = <fs_datos>-kg_stock_de_r.

    ENDIF.

  ENDLOOP.

*Tratamiento de colores una vez la tabla está completa de datos.
  LOOP AT pt_datos ASSIGNING <fs_datos>.
    PERFORM tratar_colores CHANGING <fs_datos>.
  ENDLOOP.


ENDFORM.
FORM popup_repartos_compras USING p_vbeln TYPE vbeln
                             p_posnr TYPE posnr.
*                             p_pend_ventas TYPE glmng
*                             p_tp_pedido TYPE char1." Compras/Ventas
  DATA lr_alv TYPE REF TO cl_salv_table.

  TYPES: BEGIN OF ty_popup_com,
           ebeln TYPE  ebeln,
           ebelp TYPE  ebeln,
           etenr TYPE  etenr,
           eindt TYPE  eindt,
           menge TYPE  zmenge_ciclo,
           wemng TYPE  zmenge_ciclo,
           glmng TYPE  zmenge_ciclo,
           ameng TYPE zmenge_ciclo,
         END OF ty_popup_com.
  DATA: lt_popup_com TYPE STANDARD TABLE OF ty_popup_com.

  DATA: lr_columns  TYPE REF TO cl_salv_columns,
        lr_column   TYPE REF TO cl_salv_column_table,
        lr_cols_tab TYPE REF TO cl_salv_columns_table.

  DATA: lr_functions TYPE REF TO cl_salv_functions_list.

  SELECT ebeln , ebelp , etenr , eindt , menge , wemng , glmng , ameng
    INTO TABLE @DATA(lt_rep_com2)
    FROM eket
    WHERE ebeln = @p_vbeln AND
          ebelp = @p_posnr
    ORDER BY etenr.


* Volcamos a la tabla con cantidades sin decimales y calculamos cant.pendiente
  LOOP AT lt_rep_com2 INTO DATA(lt_rep_com).
    APPEND INITIAL LINE TO lt_popup_com ASSIGNING FIELD-SYMBOL(<fs_eket>).
    <fs_eket> = CORRESPONDING #( lt_rep_com ).
    <fs_eket>-ameng = lt_rep_com-menge - lt_rep_com-glmng.
    IF <fs_eket>-ameng < 0.
      CLEAR <fs_eket>-ameng.
    ENDIF.
  ENDLOOP.

  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = lr_alv
        CHANGING
          t_table      = lt_popup_com[] ).

      lr_columns = lr_alv->get_columns( ).
      lr_columns->set_optimize( 'X' ).

      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'EBELN' ).
          lr_column->set_short_text( value  = 'Pedido' ).
          lr_column->set_medium_text( value  = 'Pedido' ).
          lr_column->set_long_text( value  = 'Pedido' ).
        CATCH cx_salv_not_found .
      ENDTRY.

      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'EBELP' ).
          lr_column->set_short_text( value  = 'Posición' ).
          lr_column->set_medium_text( value  = 'Posición' ).
          lr_column->set_long_text( value  = 'Posición' ).
        CATCH cx_salv_not_found .
      ENDTRY.
      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'MENGE' ).
          lr_column->set_short_text( value  = 'Can repart' ).
          lr_column->set_medium_text( value  = 'Cant. reparto' ).
          lr_column->set_long_text( value  = 'Cant. reparto' ).
        CATCH cx_salv_not_found .
      ENDTRY.
      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'WEMNG' ).
          lr_column->set_short_text( value  = 'Can EM' ).
          lr_column->set_medium_text( value  = 'Cant. EM' ).
          lr_column->set_long_text( value  = 'Cant. EM' ).
        CATCH cx_salv_not_found .
      ENDTRY.

      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'GLMNG' ).
          lr_column->set_short_text( value  = 'Can sum' ).
          lr_column->set_medium_text( value  = 'Cant. suministrada' ).
          lr_column->set_long_text( value  = 'Cant. suministrada' ).
        CATCH cx_salv_not_found .
      ENDTRY.
      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'AMENG' ).
          lr_column->set_short_text( value  = 'Can pte' ).
          lr_column->set_medium_text( value  = 'Cant. pendiente' ).
          lr_column->set_long_text( value  = 'Cant. pendiente' ).
        CATCH cx_salv_not_found .
      ENDTRY.

    CATCH cx_salv_msg.
  ENDTRY.

  lr_functions = lr_alv->get_functions( ).
  lr_functions->set_all( 'X' ).

  DATA: lv_key    TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout TYPE REF TO cl_salv_layout.
  lv_key-report = 'ZRPP0077_COMPRAS'.
  lo_layout = lr_alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).
*  IF p_lay06 IS NOT INITIAL.
*    lo_layout->set_initial_layout( p_lay06 ).
*  ENDIF.

  IF lr_alv IS BOUND.
    lr_alv->set_screen_popup(
      start_column = 20
      end_column  = 110
      start_line  = 3
      end_line    = 11 ).

    lr_alv->display( ).

  ENDIF.

ENDFORM.
FORM popup_repartos_ventas USING p_vbeln TYPE vbeln
                             p_posnr TYPE posnr
                             p_cant_entregada TYPE glmng.
  TYPES: BEGIN OF ty_popup_ven,
           vbeln TYPE  vbeln,
           posnr TYPE  posnr,
           etenr TYPE  etenr,
           edatu TYPE  edatu,
           wmeng TYPE  zmenge_ciclo,
*           bmeng TYPE  zmenge_ciclo,
           lmeng TYPE  zmenge_ciclo,
           cmeng TYPE  zmenge_ciclo,
           color TYPE  lvc_t_scol,
         END OF ty_popup_ven.
  DATA: l_cant_tot   TYPE menge_d,
        lt_popup_ven TYPE STANDARD TABLE OF ty_popup_ven.

  DATA lr_alv TYPE REF TO cl_salv_table.

  DATA: lr_columns  TYPE REF TO cl_salv_columns,
        lr_column   TYPE REF TO cl_salv_column_table,
        lr_cols_tab TYPE REF TO cl_salv_columns_table.
*  DATA: lr_cols_tab TYPE REF TO cl_salv_columns_table.

  DATA: lr_functions TYPE REF TO cl_salv_functions_list.

  SELECT vbeln , posnr , etenr , edatu , wmeng ,  lmeng , cmeng
    INTO TABLE @DATA(lt_vbep)
    FROM vbep
    WHERE vbeln = @p_vbeln AND
          posnr = @p_posnr
    ORDER BY etenr.

  CLEAR: l_cant_tot.
* Volcamos a la tabla con cantidades sin decimales y calculamos cant.pendiente
  LOOP AT lt_vbep INTO DATA(ls_vbep).
    APPEND INITIAL LINE TO lt_popup_ven ASSIGNING FIELD-SYMBOL(<fs_vbep>).
    <fs_vbep> = CORRESPONDING #( ls_vbep ).
    l_cant_tot = l_cant_tot + ls_vbep-wmeng.
    CLEAR: <fs_vbep>-lmeng , <fs_vbep>-cmeng.
  ENDLOOP.

  APPEND INITIAL LINE TO lt_popup_ven ASSIGNING <fs_vbep>.
  <fs_vbep>-vbeln = |Total|.
  CLEAR <fs_vbep>-posnr.
  <fs_vbep>-wmeng = l_cant_tot.
  <fs_vbep>-lmeng = p_cant_entregada.
  <fs_vbep>-cmeng = <fs_vbep>-wmeng - <fs_vbep>-lmeng.
  IF <fs_vbep>-cmeng < 0.
    CLEAR <fs_vbep>-cmeng.
  ENDIF.

  APPEND INITIAL LINE TO <fs_vbep>-color[] ASSIGNING FIELD-SYMBOL(<fs_color>).
  PERFORM colorear_celda_fila USING ' '
                                    '3' "groc
                           CHANGING <fs_color>.
  <fs_color>-color-int = '1'. "  Color Intenso



  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = lr_alv
        CHANGING
          t_table      = lt_popup_ven[] ).

      lr_columns = lr_alv->get_columns( ).
      lr_columns->set_optimize( 'X' ).


      lr_cols_tab = lr_alv->get_columns( ).
      TRY.
          lr_cols_tab->set_color_column( 'COLOR' ).
        CATCH cx_salv_data_error.                       "#EC NO_HANDLER
      ENDTRY.

      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'VBELN' ).
          lr_column->set_short_text( value  = 'Pedido' ).
          lr_column->set_medium_text( value  = 'Pedido' ).
          lr_column->set_long_text( value  = 'Pedido' ).
        CATCH cx_salv_not_found .
      ENDTRY.
*      select vbeln , posnr , etenr , edatu , wmeng , bmeng , lmeng

      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'POSNR' ).
          lr_column->set_short_text( value  = 'Posición' ).
          lr_column->set_medium_text( value  = 'Posición' ).
          lr_column->set_long_text( value  = 'Posición' ).
        CATCH cx_salv_not_found .
      ENDTRY.
      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'WMENG' ).
          lr_column->set_short_text( value  = 'Can repart' ).
          lr_column->set_medium_text( value  = 'Cant. reparto' ).
          lr_column->set_long_text( value  = 'Cant. reparto' ).
        CATCH cx_salv_not_found .
      ENDTRY.
*      TRY.
*          lr_column ?= lr_columns->get_column( columnname = 'BMENG' ).
*          lr_column->set_short_text( value  = 'Can confir' ).
*          lr_column->set_medium_text( value  = 'Cant. confirmada' ).
*          lr_column->set_long_text( value  = 'Cant. confirmada' ).
*        CATCH cx_salv_not_found .
*      ENDTRY.

      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'LMENG' ).
          lr_column->set_short_text( value  = 'Can sum' ).
          lr_column->set_medium_text( value  = 'Cant. suministrada' ).
          lr_column->set_long_text( value  = 'Cant. suministrada' ).
        CATCH cx_salv_not_found .
      ENDTRY.
      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'CMENG' ).
          lr_column->set_short_text( value  = 'Can pdte' ).
          lr_column->set_medium_text( value  = 'Cant. pendiente' ).
          lr_column->set_long_text( value  = 'Cant. pendiente' ).
        CATCH cx_salv_not_found .
      ENDTRY.


*        SELECT vbeln , posnr , etenr , edatu , wmeng , bmeng , lmeng


      TRY.
          lr_column ?= lr_columns->get_column( columnname = 'AMENG' ).
          lr_column->set_short_text( value  = 'Can pte' ).
          lr_column->set_medium_text( value  = 'Cant. pendiente' ).
          lr_column->set_long_text( value  = 'Cant. pendiente' ).
        CATCH cx_salv_not_found .
      ENDTRY.

    CATCH cx_salv_msg.
  ENDTRY.



  lr_functions = lr_alv->get_functions( ).
  lr_functions->set_all( 'X' ).

  DATA: lv_key    TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout TYPE REF TO cl_salv_layout.
  lv_key-report = 'ZRPP0077_VENTAS'.
  lo_layout = lr_alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).
*  IF p_lay06 IS NOT INITIAL.
*    lo_layout->set_initial_layout( p_lay06 ).
*  ENDIF.

  IF lr_alv IS BOUND.
    lr_alv->set_screen_popup(
      start_column = 20
      end_column  = 110
      start_line  = 3
      end_line    = 11 ).

    lr_alv->display( ).

  ENDIF.

ENDFORM.

FORM get_desc_zzsegcal USING p_code
                    CHANGING p_desc TYPE zzsegcal.

  SELECT SINGLE  texto
    INTO @p_desc
    FROM ztsd0004
    WHERE zzsegal = @p_code
    AND spras = @sy-langu.

ENDFORM.

FORM get_desc_augru USING p_code
                    CHANGING p_desc TYPE bezei40.
  SELECT SINGLE  bezei
    INTO @p_desc
    FROM tvaut
    WHERE augru = @p_code
    AND spras = @sy-langu.

ENDFORM.

FORM get_desc_abgru USING p_code
                    CHANGING p_desc TYPE bezei40.
  SELECT SINGLE  bezei
    INTO @p_desc
    FROM tvagt
    WHERE abgru = @p_code
    AND spras = @sy-langu.

ENDFORM.


FORM tratar_colores CHANGING p_reg TYPE zspp_seguimiento_pedidos_pos.

  DATA: lt_datos_entregas_pos TYPE STANDARD TABLE OF zspp_seguimiento_pedidos_pos.
* Tratamiento de colores.
  IF p_reg-vbtyp = 'D'.
    APPEND INITIAL LINE TO p_reg-color[] ASSIGNING FIELD-SYMBOL(<fs_color>).
    PERFORM colorear_celda_fila USING 'VBTYP'
                                      '6' "Rojo
                             CHANGING <fs_color>.
  ENDIF.

  IF p_reg-kg_stock_de_a > 0.
    APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
    PERFORM colorear_celda_fila USING 'KG_STOCK_DE_A'
                                      '5' "Verde
                             CHANGING <fs_color>.
  ENDIF.


* Diferencia entre cantidad suministrada y cantidad EM.
*  DATA: l_fecha_max TYPE datum.
  IF p_reg-glmng <> p_reg-wemng.

* Obtener registros de pedido/posición.
    LOOP AT gt_datos INTO DATA(ls_datos) WHERE vbeln = p_reg-vbeln AND posnr = p_reg-posnr.
      APPEND INITIAL LINE TO lt_datos_entregas_pos ASSIGNING FIELD-SYMBOL(<fs_entr_pos>).
      <fs_entr_pos> = CORRESPONDING #( ls_datos ).
    ENDLOOP.

    CHECK lt_datos_entregas_pos IS NOT INITIAL.
    SORT lt_datos_entregas_pos BY vbeln_ent DESCENDING.
    ls_datos = lt_datos_entregas_pos[ 1 ].

    IF ls_datos-wadat_ist IS NOT INITIAL AND
       ( sy-datum - ls_datos-wadat_ist ) > 3 AND
       ls_datos-wbstk = 'C'.

      p_reg-ind_dif_em = 1.

      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'WEMNG'
                                    '7' "Naranja
                           CHANGING <fs_color>.
      <fs_color>-color-int = '1'. "  Color Intenso

    ENDIF.

  ENDIF.

  CASE p_reg-kostk.
    WHEN 'A'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'KOSTK'
                                        '6' "Rojo
                               CHANGING <fs_color>.
    WHEN 'B'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'KOSTK'
                                        '3' "groc
                               CHANGING <fs_color>.
    WHEN 'C'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'KOSTK'
                                        '5' "Verde
                               CHANGING <fs_color>.
    WHEN OTHERS.
  ENDCASE.

  CASE p_reg-wbstk.
    WHEN 'A'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'WBSTK'
                                        '6' "Rojo
                               CHANGING <fs_color>.
    WHEN 'B'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'WBSTK'
                                        '3' "groc
                               CHANGING <fs_color>.
    WHEN 'C'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'WBSTK'
                                        '5' "Verde
                               CHANGING <fs_color>.
    WHEN OTHERS.
  ENDCASE.

  CASE p_reg-trsta.
    WHEN 'A'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'TRSTA'
                                        '6' "Rojo
                               CHANGING <fs_color>.
    WHEN 'B'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'TRSTA'
                                        '3' "groc
                               CHANGING <fs_color>.
    WHEN 'C'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'TRSTA'
                                        '5' "Verde
                               CHANGING <fs_color>.
    WHEN OTHERS.
  ENDCASE.

  CASE p_reg-fkivk.
    WHEN 'A'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'FKIVK'
                                        '6' "Rojo
                               CHANGING <fs_color>.
    WHEN 'B'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'FKIVK'
                                        '3' "groc
                               CHANGING <fs_color>.
    WHEN 'C'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'FKIVK'
                                        '5' "Verde
                               CHANGING <fs_color>.
    WHEN OTHERS.
  ENDCASE.

  CASE p_reg-kosta.
    WHEN 'A'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'KOSTA'
                                        '6' "Rojo
                               CHANGING <fs_color>.
    WHEN 'B'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'KOSTA'
                                        '3' "groc
                               CHANGING <fs_color>.
    WHEN 'C'.
      APPEND INITIAL LINE TO p_reg-color[] ASSIGNING <fs_color>.
      PERFORM colorear_celda_fila USING 'KOSTA'
                                        '5' "Verde
                               CHANGING <fs_color>.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.

FORM obtener_datos_compras.

  CONSTANTS: gc_zint     TYPE char4  VALUE 'ZINT'.

  DATA: l_lifnr      TYPE lifnr.
*
  l_lifnr = |P{ p_werks }|.

  gr_sgpi->texto( 'Obteniendo datos de compras...' ).

* Datos de fecha de reparto, si se selecciona fecha entrega.
  IF s_lfdat IS NOT INITIAL.
    SELECT ebeln , ebelp
      INTO TABLE @DATA(lt_rep_x_fec_entr)
      FROM eket
      WHERE eindt IN @s_lfdat
      GROUP BY ebeln , ebelp.

    CHECK  lt_rep_x_fec_entr IS NOT INITIAL.

    SELECT ekko~ekorg          ,
      ekko~bukrs          ,
      bsart               ,
      lifnr               ,
      ekko~bedat          ,
      ekpo~ebeln          ,
      ekpo~ebelp          ,
      ekpo~inco1          ,
      ekpo~inco2          ,
      ekpo~zzaugru          ,
      ekko~bstyp          ,
      ekpo~pstyp          ,
      ekpo~knttp          ,
      ekpo~matnr          ,
      mara~matkl          ,
      prdha               ,
      zzcalidad           ,
      zzgramaje           ,
      zzancho             ,
      zzlargo             ,
      ekpo~meins          ,
      netwr               ,
      brtwr               ,
      waers               ,
      route               ,
      lprio               ,
      ekko~ernam          ,
      werks               ,
*         zzcausa_retraso     ,
      kzwi5               ,
      retpo               ,
      ekpo~zzbloq_plan    ,
      zzbloq_fabr         ,
      ekko~aedat          ,
      ekko~zzsegcal       ,
      uebto               ,
      uebtk               ,
      untto
  INTO CORRESPONDING FIELDS OF TABLE @gt_sql_compras
  FROM  ekko
  JOIN ekpo ON ekko~ebeln = ekpo~ebeln
  JOIN ekpv ON ekpo~ebeln = ekpv~ebeln AND ekpo~ebelp = ekpv~ebelp
  JOIN mara ON ekpo~matnr = mara~matnr
 FOR ALL ENTRIES IN @lt_rep_x_fec_entr
  WHERE ekko~lifnr = @l_lifnr AND
        ekko~bsart = @gc_zint AND
        ekko~bedat IN @s_bedat AND
        ekpv~kunnr IN @s_kunnr AND
        ekpo~matnr IN @s_matnr AND
        ekpo~matkl IN @s_matkl AND
        NOT (  ekpo~eglkz = 'X' OR "indicador de entrega  completa
               ekpo~elikz = 'X'    "indicador de entrega salida completa
            ) AND
        ekpo~loekz = ' ' AND "indicador de borrado
        ekko~zzsegcal IN @s_zsegca AND
* datos del tabla con datos según f.entrega.
         ekko~ebeln = @lt_rep_x_fec_entr-ebeln AND
         ekpo~ebelp = @lt_rep_x_fec_entr-ebelp AND
         ekko~ebeln IN @s_vbeln.

  ELSE.

    SELECT ekko~ekorg          ,
           ekko~bukrs          ,
           bsart               ,
           lifnr               ,
           ekko~bedat          ,
           ekpo~ebeln          ,
           ekpo~ebelp          ,
           ekpo~inco1          ,
           ekpo~inco2          ,
           ekpo~zzaugru          ,
           ekko~bstyp          ,
           ekpo~pstyp          ,
           ekpo~knttp          ,
           ekpo~matnr          ,
           mara~matkl          ,
           prdha               ,
           zzcalidad           ,
           zzgramaje           ,
           zzancho             ,
           zzlargo             ,
           ekpo~meins          ,
           netwr               ,
           brtwr               ,
           waers               ,
           route               ,
           lprio               ,
           ekko~ernam          ,
           werks               ,
           kzwi5               ,
           retpo               ,
           ekpo~zzbloq_plan    ,
           zzbloq_fabr         ,
           ekko~aedat          ,
           ekko~zzsegcal       ,
           uebto               ,
           uebtk               ,
           untto
       INTO CORRESPONDING FIELDS OF TABLE @gt_sql_compras
       FROM  ekko
       JOIN ekpo ON ekko~ebeln = ekpo~ebeln
       JOIN ekpv ON ekpo~ebeln = ekpv~ebeln AND ekpo~ebelp = ekpv~ebelp
       JOIN mara ON ekpo~matnr = mara~matnr
       WHERE ekko~lifnr = @l_lifnr AND
             ekko~bsart = @gc_zint AND
             ekko~bedat IN @s_bedat AND
             ekpv~kunnr IN @s_kunnr AND
             ekpo~matnr IN @s_matnr AND
             ekpo~matkl IN @s_matkl AND
             NOT (  ekpo~eglkz = 'X' OR "indicador de entrega  completa
                    ekpo~elikz = 'X'    "indicador de entrega salida completa
                 ) AND
             ekpo~loekz = ' ' AND "indicador de borrado
             ekko~zzsegcal IN @s_zsegca AND
              ekko~ebeln IN @s_vbeln.

  ENDIF.

  LOOP AT gt_sql_compras INTO ls_sql_compras.
    ls_aux-zzebeln1 = ls_sql_compras-ebeln.
    ls_aux-zzebelp1 = ls_sql_compras-ebelp.
    APPEND ls_aux TO lt_aux.
  ENDLOOP.

  SELECT aufnr zzebeln1 zzebelp1
   INTO CORRESPONDING FIELDS OF TABLE lt_aux
   FROM aufk
   FOR ALL ENTRIES IN lt_aux
   WHERE aufk~zzebeln1 = lt_aux-zzebeln1 AND
         aufk~zzebelp1 = lt_aux-zzebelp1.

  LOOP AT lt_aux INTO ls_aux.
    READ TABLE gt_sql_compras ASSIGNING FIELD-SYMBOL(<fs>) WITH KEY ebelp = ls_aux-zzebelp1 ebeln = ls_aux-zzebeln1.
    CHECK sy-subrc EQ 0.
    <fs>-aufnr = ls_aux-aufnr.
  ENDLOOP.

  CHECK gt_sql_compras IS NOT INITIAL. "No se han encontrado

  SORT gt_sql_compras BY ebeln ebelp ASCENDING.
* Convertir la posición para filtrar por LIPS-VGPOS
  LOOP AT gt_sql_compras ASSIGNING FIELD-SYMBOL(<fs_com>).
    <fs_com>-vgpos = CONV vgpos( <fs_com>-ebelp ).
  ENDLOOP.

  PERFORM buscar_cant_ped_abie_compras.


  gr_sgpi->texto( 'Obteniendo datos de pedidos compra...' ).

* SELECCIONAR DATOS DE LA PESTAÑA "EXPEDICIÓN" DEL PEDIDO DE COMPRAS.
  SELECT ebeln , ebelp , route , lprio , kunnr
    INTO TABLE @DATA(lt_ekpv)
    FROM ekpv
    FOR ALL ENTRIES IN @gt_sql_compras
    WHERE ebeln = @gt_sql_compras-ebeln AND
          ebelp = @gt_sql_compras-ebelp.


  LOOP AT gt_datos_compras ASSIGNING FIELD-SYMBOL(<fs_compras>).
    TRY.

        DATA(ls_datos_compras) = gt_sql_compras[ ebeln = <fs_compras>-vbeln
                                                 ebelp = <fs_compras>-posnr   ].
      CATCH cx_root .
    ENDTRY.

    <fs_compras>-vbeln            = ls_datos_compras-ebeln.
    <fs_compras>-bstnk            = ls_datos_compras-ebeln.        "Nº de pedido de compras
    CONCATENATE '0' ls_datos_compras-ebelp INTO <fs_compras>-posnr.
    <fs_compras>-vkorg            = ls_datos_compras-lifnr+1(4).   " Org. Ventas = Proveedor sin "P".
    <fs_compras>-auart            = ls_datos_compras-bsart.        "Clase de documento.
    <fs_compras>-vbtyp            = 'C'            .        "Tipo de Documento = "C".
    <fs_compras>-arktx            = zcl_utils_hpap_pp=>get_descr_material( <fs_compras>-matnr ).
    <fs_compras>-audat            = ls_datos_compras-bedat.        "Fecha del documento.
    <fs_compras>-waerk            = ls_datos_compras-waers.
    <fs_compras>-netwr            = ls_datos_compras-netwr.

*    <fs_compras>-zzbloq_fabr       = ls_datos_compras-zzbloq_fabr.
    IF ls_datos_compras-zzbloq_fabr = 'X'.
      <fs_compras>-zzbloq_fabr = |@0W@|.
    ENDIF.
*    <fs_compras>-augru            = ls_datos_compras-zzaugru.
*    <fs_compras>-abgru            = ls_datos_compras-zzabgru.

    PERFORM datos_centro USING <fs_compras>-vkorg
                      CHANGING <fs_compras>-vtext.

    <fs_compras>-zzsegcal = ls_datos_compras-zzsegcal.
    PERFORM get_desc_zzsegcal USING <fs_compras>-zzsegcal
                        CHANGING <fs_compras>-zzsegcal_desc.

* Descrip. de Motivo pedido.
    IF ls_datos_compras-zzaugru IS NOT INITIAL.
      DATA: l_augrut TYPE bezei40.
      PERFORM get_desc_augru USING ls_datos_compras-zzaugru
                        CHANGING <fs_compras>-augru.
*      <fs_compras>-augru = |{ ls_datos_compras-zzaugru } { <fs_compras>-augru }|.

    ENDIF.
    IF ls_datos_compras-zzabgru IS NOT INITIAL.
      PERFORM get_desc_abgru USING ls_datos_compras-zzabgru
                        CHANGING <fs_compras>-abgru.
*      <fs_compras>-augru = |{ ls_datos_compras-zzabgru } { <fs_compras>-augru }|.
    ENDIF.

* Descrip. de Motivo pedido.
*    IF ls_datos_compras-zzaugru IS NOT INITIAL.
*      PERFORM get_desc_augru USING ls_datos_compras-zzaugru
*                        CHANGING <fs_compras>-augru .
*      <fs_compras>-augru = |{ ls_datos_compras-zzaugru } { <fs_compras>-augru }|.
*
*    ENDIF.

    IF ls_datos_compras-zzbloq_plan = 'X'.      "Bloqueo de pedidos MM.
*      <fs_compras>-lifsk = 'X'.           "Asimilamos al bloq. de pedidos SD.
      <fs_compras>-lifsk = '@3U@'.           "Asimilamos al bloq. de pedidos SD.
    ENDIF.


*CONVIERTO LOS IMPORTES EN NEGATIVOS SI PROCEDEN DE DEVOLUCIONES DE
*COMPRAS.
    IF ls_datos_compras-retpo = 'X'.
      "PEDIDO INTERCO DE DEVOLUCIÓN.
      <fs_compras>-vbtyp        = 'H'.  "Cambio Tipo de Documento a "H".
    ENDIF.

* SELECCIONAR DATOS DE LA PESTAÑA "EXPEDICIÓN" DEL PEDIDO DE COMPRAS.
    TRY.
        <fs_compras>-route = lt_ekpv[ ebeln = ls_datos_compras-ebeln
                                      ebelp = ls_datos_compras-ebelp ]-route.
        <fs_compras>-kunnr = lt_ekpv[ ebeln = ls_datos_compras-ebeln
                                      ebelp = ls_datos_compras-ebelp ]-kunnr.
      CATCH cx_root .
    ENDTRY.

    <fs_compras>-kunwe = <fs_compras>-kunnr.

    CALL METHOD zcl_utils_hpap_pp=>get_datos_cliente
      EXPORTING
        i_kunnr = <fs_compras>-kunnr
      IMPORTING
        o_name1 = <fs_compras>-name1
        o_pstlz = <fs_compras>-pstlz
        o_land1 = <fs_compras>-land1.

** RECUPERAR LOS TEXTOS DE LA CAUSA DE RETRASO:
*    IF <fs_compras>-zzcausa_retraso IS NOT INITIAL.
*      <fs_compras>-causa_retrasot = zcl_ap_utils=>get_texto_dominio( dominio = 'ZCAUSA_RETRASO'
*                                                                     valor   = <fs_compras>-zzcausa_retraso ).
*    ENDIF.


****
    IF ls_datos_compras-retpo = 'X'.
      "PEDIDO INTERCO DE DEVOLUCIÓN.
      <fs_compras>-vbtyp        = 'H'.  "Cambio Tipo de Documento a "H".
    ENDIF.

  ENDLOOP.


ENDFORM.

FORM obtener_datos_ventas.

  gr_sgpi->texto( 'Obteniendo datos de ventas...' ).

  TRY.
      SELECT *
        INTO CORRESPONDING FIELDS OF TABLE gt_sql_ventas
        FROM vbak
        JOIN vbap ON vbak~vbeln = vbap~vbeln
        JOIN mara ON vbap~matnr = mara~matnr
        WHERE vbak~kunnr IN s_kunnr
          AND vbak~audat IN s_bedat
          AND vdatu      IN s_lfdat
          AND vbap~matnr IN s_matnr
          AND vbap~matkl IN s_matkl
          AND auart      IN ( 'ZTA' , 'ZTAS' , 'ZRE' )
          AND werks      = p_werks
          AND vbak~zzsegcal IN s_zsegca
          AND vbak~vbeln IN s_vbeln
        ORDER BY vbap~vbeln vbap~posnr.

    CATCH cx_sy_open_sql_db.
      MESSAGE 'Fallo en la selección. Seleccione menos datos.' TYPE 'E'.
  ENDTRY.

  CHECK gt_sql_ventas IS NOT INITIAL.

  SORT gt_sql_ventas BY vbeln posnr.

  PERFORM buscar_cant_ped_abierta_ventas.

* Obtener datos de incoterms
  SELECT  vbeln , inco1 , inco2
     FROM vbkd
     INTO TABLE @DATA(lt_vbkd)
    FOR ALL ENTRIES IN @gt_datos_ventas
     WHERE vbeln = @gt_datos_ventas-vbeln
     AND posnr = '000000'.

  LOOP AT gt_sql_ventas INTO ls_ped_venta.
    ls_aux2-zzebeln1 = ls_ped_venta-vbeln.
    ls_aux2-zzebelp1 = ls_ped_venta-posnr.
    APPEND ls_aux2 TO lt_aux2.
  ENDLOOP.

  SELECT aufnr zzebeln1 zzebelp1
   INTO CORRESPONDING FIELDS OF TABLE lt_aux2
   FROM aufk
   FOR ALL ENTRIES IN lt_aux2
   WHERE aufk~zzebeln1 = lt_aux2-zzebeln1 AND
         aufk~zzebelp1 = lt_aux2-zzebelp1.

  LOOP AT lt_aux2 INTO ls_aux2.
    READ TABLE gt_sql_ventas ASSIGNING FIELD-SYMBOL(<fs>) WITH KEY posnr = ls_aux2-zzebelp1 vbeln = ls_aux2-zzebeln1.
    CHECK sy-subrc EQ 0.
    <fs>-aufnr = ls_aux2-aufnr.
  ENDLOOP.


  LOOP AT gt_datos_ventas ASSIGNING FIELD-SYMBOL(<fs_ventas>).

    TRY.
        DATA(ls_datos_ventas) = gt_sql_ventas[ vbeln = <fs_ventas>-vbeln
                                               posnr = <fs_ventas>-posnr ].
      CATCH cx_root .
    ENDTRY.

    PERFORM datos_centro USING <fs_ventas>-vkorg
                      CHANGING <fs_ventas>-vtext.

* Obtener el destinatario de mercancias.
    SELECT SINGLE kunnr
      FROM vbpa                  "Destinatario de Mercancías
*      INTO ( @DATA(l_kunnr) , @DATA(l_pernr) )
      INTO @<fs_ventas>-kunwe
     WHERE vbeln = @<fs_ventas>-vbeln
       AND posnr = '000000'
       AND parvw = 'WE'.

* Se mueve destinatario a cliente.
    <fs_ventas>-kunnr = <fs_ventas>-kunwe.

    CALL METHOD zcl_utils_hpap_pp=>get_datos_cliente
      EXPORTING
        i_kunnr = <fs_ventas>-kunnr
      IMPORTING
        o_name1 = <fs_ventas>-name1
        o_pstlz = <fs_ventas>-pstlz
        o_land1 = <fs_ventas>-land1.

    CALL METHOD zcl_utils_hpap_pp=>get_datos_cliente
      EXPORTING
        i_kunnr = <fs_ventas>-kunnr
      IMPORTING
        o_name1 = <fs_ventas>-name1
        o_pstlz = <fs_ventas>-pstlz
        o_land1 = <fs_ventas>-land1.

    IF ls_datos_ventas-auart = 'ZRE'.
      "PEDIDO INTERCO DE DEVOLUCIÓN.
      <fs_ventas>-vbtyp        = 'H'.  "Cambio Tipo de Documento a "H".
    ENDIF.
    IF ls_datos_ventas-lifsk = 'Z1'.
*      <fs_ventas>-lifsk = 'X'.
      <fs_ventas>-lifsk = '@3U@'.           "Asimilamos al bloq. de pedidos SD.

    ENDIF.
    IF ls_datos_ventas-pstyv = 'ZTAN'.
      <fs_ventas>-zzbloq_fabr = |@0W@|.
    ENDIF.
    <fs_ventas>-kwmeng           = ls_datos_ventas-kwmeng.
    <fs_ventas>-vrkme            = ls_datos_ventas-vrkme.
    <fs_ventas>-glmng            = ls_datos_ventas-glmng.
    <fs_ventas>-wemng            = ls_datos_ventas-glmng.
    <fs_ventas>-obmng            = ls_datos_ventas-kwmeng - ls_datos_ventas-glmng.
*    <fs_ventas>-ctd_ped_abierta  = ls_datos_ventas-kwmeng - ls_datos_ventas-glmng.


*Obtener datos incoterms.
    TRY.
        <fs_ventas>-inco1 = lt_vbkd[ vbeln = <fs_ventas>-vbeln ]-inco1.
        <fs_ventas>-inco2 = lt_vbkd[ vbeln = <fs_ventas>-vbeln ]-inco2.
      CATCH cx_root .
    ENDTRY.


    IF <fs_ventas>-abgru NE ''.
      CLEAR: <fs_ventas>-kwmeng,
      <fs_ventas>-netwr.
    ELSE.


    ENDIF.

    <fs_ventas>-zzsegcal = ls_datos_ventas-zzsegcal.
    PERFORM get_desc_zzsegcal USING <fs_ventas>-zzsegcal
                        CHANGING <fs_ventas>-zzsegcal_desc.


* Descrip. de Motivo pedido.
    IF ls_datos_ventas-augru IS NOT INITIAL.
      PERFORM get_desc_augru USING ls_datos_ventas-augru
                        CHANGING <fs_ventas>-augru.
*      <fs_ventas>-augru = |{ ls_datos_ventas-augru } { <fs_ventas>-augru }|.
    ENDIF.

    IF ls_datos_ventas-abgru IS NOT INITIAL.
      PERFORM get_desc_abgru USING ls_datos_ventas-abgru
                        CHANGING <fs_ventas>-abgru.
*      <fs_ventas>-abgru = |{ ls_datos_ventas-abgru } { <fs_ventas>-abgru }|.
    ENDIF.

    <fs_ventas>-aufnr = ls_datos_ventas-aufnr.

  ENDLOOP.

  DELETE gt_datos_ventas WHERE vbeln IS INITIAL.


ENDFORM.

FORM buscar_cant_ped_abie_compras.
  DATA: l_cont TYPE n.
  DATA: l_vdatu     TYPE datum,
        l_cant_pos  TYPE menge_d,
        l_ctd_sumin TYPE menge_d,
        l_cant_em   TYPE menge_d,
        l_ctd_abie  TYPE menge_d.
*        l_num_repartos         TYPE n,
*        l_num_repartos_txt(12) TYPE c.

  SELECT * FROM ekbe
    INTO TABLE @DATA(lt_ekbe)
    FOR ALL ENTRIES IN @gt_sql_compras
    WHERE  ebeln = @gt_sql_compras-ebeln
       AND ebelp = @gt_sql_compras-ebelp
       AND vgabe = '8'
       AND gjahr = '0000'
    ORDER BY PRIMARY KEY.

* Datos de reparto.
  SELECT ebeln , ebelp , etenr , eindt , menge , wemng , glmng
    INTO TABLE @DATA(lt_eket)
    FROM eket
    FOR ALL ENTRIES IN @gt_sql_compras
    WHERE ebeln = @gt_sql_compras-ebeln AND
          ebelp = @gt_sql_compras-ebelp
    ORDER BY PRIMARY KEY.

* A partir de Pedido/posición, obtenemos entregas relacionadas,
* si no hay entregas, se crea un único registro sin datos de entrega.
  LOOP AT gt_sql_compras INTO DATA(ls_datos_ini).

    CLEAR: l_vdatu , l_cant_pos , l_ctd_sumin , l_cant_em. " , l_num_repartos .

* Acumular datos de reparto.
    LOOP AT lt_eket INTO DATA(ls_eket) WHERE ebeln = ls_datos_ini-ebeln AND
                                             ebelp = ls_datos_ini-ebelp.
      IF l_vdatu IS INITIAL.
        l_vdatu = ls_eket-eindt.
      ENDIF.
      l_cant_pos     = l_cant_pos  + ls_eket-menge.
      l_ctd_sumin    = l_ctd_sumin + ls_eket-glmng.
      l_cant_em      = l_cant_em   + ls_eket-wemng.
      l_ctd_abie     = l_ctd_abie + ( l_cant_pos - l_cant_em  ).
*      l_num_repartos = l_num_repartos + 1.
    ENDLOOP.
*    CASE l_num_repartos.
*      WHEN 1. l_num_repartos_txt = |1 reparto|.
*      WHEN OTHERS.
*        l_num_repartos_txt = |{ l_num_repartos } repartos|.
*    ENDCASE.

* Tratamiento de entregas por posición.
    CLEAR l_cont.
    LOOP AT lt_ekbe INTO DATA(ls_ekbe) WHERE ebeln = ls_datos_ini-ebeln AND ebelp = ls_datos_ini-ebelp.
      APPEND INITIAL LINE TO gt_datos_compras ASSIGNING FIELD-SYMBOL(<fs_compras>).
      <fs_compras> = CORRESPONDING #( ls_datos_ini ).

*      <fs_compras>-num_repartos       = l_num_repartos_txt.
      <fs_compras>-num_repartos       = |@FE@|.
      <fs_compras>-vdatu              = l_vdatu.
      <fs_compras>-kwmeng             = l_cant_pos.
      <fs_compras>-vrkme              = 'KG'.

*      <fs_compras>-obmng              = l_ctd_abie.
      <fs_compras>-obmng              = l_cant_pos - l_ctd_sumin.

      <fs_compras>-glmng              = l_ctd_sumin.
      <fs_compras>-wemng              = l_cant_em.

      <fs_compras>-vkorg     = ls_datos_ini-lifnr+1(4).
      <fs_compras>-tp_pedido = 'C'.
      <fs_compras>-vbeln     = ls_ekbe-ebeln.
*      <fs_compras>-vbeln_no_disp     = ls_ekbe-ebeln.
      <fs_compras>-posnr     = CONV #( ls_ekbe-ebelp ).
*      <fs_compras>-posnr_no_disp     = CONV #( ls_ekbe-ebelp ).
      <fs_compras>-vbeln_ent = ls_ekbe-belnr.
      <fs_compras>-posnr_ent = |00{ ls_ekbe-buzei }|."ls_EKBE-posnn.

    ENDLOOP.
* Si no hay entregas(todavia), volcamos registro sin entregas.
    IF sy-subrc <> 0.
      APPEND INITIAL LINE TO gt_datos_compras ASSIGNING <fs_compras>.
      <fs_compras> = CORRESPONDING #( ls_datos_ini ).
      <fs_compras>-tp_pedido = 'C'.
*      <fs_compras>-num_repartos        = l_num_repartos_txt.
      <fs_compras>-num_repartos        = |@FE@|.
      <fs_compras>-vkorg               = ls_datos_ini-lifnr+1(4).
      <fs_compras>-vbeln               = ls_datos_ini-ebeln.
*      <fs_compras>-vbeln_no_disp       = ls_datos_ini-ebeln.
      <fs_compras>-posnr               = CONV #( ls_datos_ini-ebelp ).
*      <fs_compras>-posnr_no_disp       = CONV #( ls_datos_ini-ebelp ).

*Calculamos datos de reparto, para las posiciones sin entregas.
      LOOP AT lt_eket INTO ls_eket WHERE ebeln = ls_datos_ini-ebeln AND
                                               ebelp = ls_datos_ini-ebelp.
        IF <fs_compras>-vdatu IS INITIAL.
          <fs_compras>-vdatu = ls_eket-eindt.
        ENDIF.

        <fs_compras>-kwmeng    = <fs_compras>-kwmeng  + ls_eket-menge. "Cant.ped
        <fs_compras>-glmng     = <fs_compras>-glmng   + ls_eket-glmng. "Cant sumin.
        <fs_compras>-wemng     = <fs_compras>-wemng   + ls_eket-wemng. "Cant.EM
        <fs_compras>-vrkme     = 'KG'.
        IF ls_eket-menge > ls_eket-wemng.
          <fs_compras>-obmng = <fs_compras>-obmng + ( ls_eket-menge - ls_eket-wemng  ).
*          <fs_compras>-ctd_ped_abierta = <fs_compras>-obmng.
        ENDIF.
      ENDLOOP.

    ENDIF.

  ENDLOOP.

ENDFORM.

FORM buscar_cant_ped_abierta_ventas.

  DATA: l_tot_entregas TYPE menge_d.

* Flujo de documentos: buscar  pedido->entrega
  SELECT vbfa~vbelv , vbfa~posnv , vbfa~vbeln , vbfa~posnn , rfmng , lfimg , kcmeng ",  kosta" *
    FROM vbfa
    INNER JOIN lips ON lips~vbeln = vbfa~vbeln AND lips~posnr = vbfa~posnn
  INTO TABLE @DATA(lt_vbfa)
    FOR ALL ENTRIES IN @gt_sql_ventas
   WHERE vbfa~vbelv = @gt_sql_ventas-vbeln
     AND vbfa~posnv = @gt_sql_ventas-posnr
     AND vbfa~posnn < '900000'
     AND vbtyp_n    IN ('J','T')
     AND vbtyp_v    = @gt_sql_ventas-vbtyp
     AND stufe      = '00'.

  SORT lt_vbfa BY vbelv  posnv vbeln posnn.

*  SELECT vbeln , kosta , gbsta
*    INTO TABLE @DATA(lt_lips)
*    FROM vbup
*    FOR ALL ENTRIES IN @lt_vbfa
*    WHERE vbeln = @lt_vbfa-vbeln.


  SELECT vbeln , posnr ,  kosta , gbsta
    INTO TABLE @DATA(lt_estados_pos)
    FROM vbup
    FOR ALL ENTRIES IN @gt_sql_ventas
    WHERE vbeln = @gt_sql_ventas-vbeln AND
          posnr = @gt_sql_ventas-posnr.


* Para cada ped/pos sumarizar cantidad en entregas completadas.  Si esta cantidad
* supera/iguala la cantidad de la posicion(KWMENG), descartar linea.
  LOOP AT gt_sql_ventas ASSIGNING FIELD-SYMBOL(<fs_sql_ven>).

    TRY.
        DATA(l_gbsta) = lt_estados_pos[ vbeln = <fs_sql_ven>-vbeln
                                        posnr = <fs_sql_ven>-posnr ]-gbsta.
        IF l_gbsta = 'C'.
          CLEAR <fs_sql_ven>.
          CONTINUE.
        ENDIF.
      CATCH cx_root .
    ENDTRY.


    CLEAR l_tot_entregas.
    LOOP AT lt_vbfa INTO DATA(ls_vbfa) WHERE vbelv = <fs_sql_ven>-vbeln AND
                                             posnv = <fs_sql_ven>-posnr. " AND
      IF ls_vbfa-kcmeng IS NOT INITIAL.
        l_tot_entregas = l_tot_entregas + ls_vbfa-kcmeng.
      ELSEIF ls_vbfa-lfimg IS NOT INITIAL.
        l_tot_entregas = l_tot_entregas + ls_vbfa-lfimg.
      ENDIF.

    ENDLOOP.

* Si la cantidad entregada >= cantidad pedido, eliminar linea.
    IF l_tot_entregas >= <fs_sql_ven>-kwmeng.
      CLEAR <fs_sql_ven>.
      CONTINUE.
    ELSE.
      <fs_sql_ven>-glmng = l_tot_entregas.
    ENDIF.

  ENDLOOP.
  DELETE gt_sql_ventas WHERE vbeln IS INITIAL.

* Tratamiento y multiplicación de registros(pedido/posición) por cada entrega
  LOOP AT gt_sql_ventas INTO DATA(ls_datos_ini).
    DATA: l_num_repartos_txt(12) TYPE c.
* Calcular nºrepartos por posición.
*    SELECT COUNT( * )
*      INTO @DATA(l_num_repartos)
*      FROM vbep
*      WHERE vbeln = @ls_datos_ini-vbeln AND
*            posnr = @ls_datos_ini-posnr.
*
*    CASE l_num_repartos.
*      WHEN 1. l_num_repartos_txt = |1 reparto|.
*      WHEN OTHERS.
*        l_num_repartos_txt = |{ l_num_repartos } repartos|.
*    ENDCASE.

    LOOP AT lt_vbfa INTO ls_vbfa WHERE vbelv = ls_datos_ini-vbeln AND posnv = ls_datos_ini-posnr.

      APPEND INITIAL LINE TO gt_datos_ventas ASSIGNING FIELD-SYMBOL(<fs_ventas>).
      <fs_ventas> = CORRESPONDING #( ls_datos_ini ).
      <fs_ventas>-tp_pedido      = 'V'.
*      <fs_ventas>-vbeln_no_disp      = <fs_ventas>-vbeln.
*      <fs_ventas>-posnr_no_disp      = <fs_ventas>-posnr.
*      <fs_ventas>-num_repartos   = l_num_repartos_txt.
      <fs_ventas>-num_repartos   = |@FE@|.
      <fs_ventas>-vbeln_ent      = ls_vbfa-vbeln.
      <fs_ventas>-posnr_ent      = ls_vbfa-posnn.
      <fs_ventas>-lfimg          = ls_vbfa-rfmng.

    ENDLOOP.
* Si no hay entregas(todavia), volcamos registro sin entregas.
    IF sy-subrc <> 0.
      APPEND INITIAL LINE TO gt_datos_ventas ASSIGNING <fs_ventas>.
      <fs_ventas> = CORRESPONDING #( ls_datos_ini ).
      <fs_ventas>-tp_pedido      = 'V'.
*      <fs_ventas>-vbeln_no_disp      = <fs_ventas>-vbeln.
*      <fs_ventas>-posnr_no_disp      = <fs_ventas>-posnr.
      <fs_ventas>-num_repartos   = |@FE@|.
*      <fs_ventas>-num_repartos   = l_num_repartos_txt.

    ENDIF.

  ENDLOOP.

ENDFORM.

FORM datos_centro USING p_werks
                  CHANGING p_ret.

  TRY.
      p_ret = gt_centres[ werks = p_werks ]-descrip.

    CATCH cx_root .

      SELECT SINGLE *
        INTO @DATA(lt_werk)
        FROM tvkot
        WHERE spras = @sy-langu AND
              vkorg = @p_werks.

      APPEND INITIAL LINE TO gt_centres ASSIGNING FIELD-SYMBOL(<fs_werk>).
      <fs_werk>-werks = lt_werk-vkorg.
      <fs_werk>-descrip = lt_werk-vtext.
      p_ret = <fs_werk>-descrip.

  ENDTRY.

ENDFORM.

FORM crear_alv.


  TRY.
*      CREATE OBJECT lo_docking_container
*        EXPORTING
*          parent                      = cl_gui_container=>screen0
*          repid                       = sy-repid
*          dynnr                       = sy-dynnr
*          extension                   = 3000
*        EXCEPTIONS
*          cntl_error                  = 0
*          cntl_system_error           = 0
*          create_error                = 0
*          lifetime_error              = 0
*          lifetime_dynpro_dynpro_link = 0
*          OTHERS                      = 0.
      cl_salv_table=>factory(
*        EXPORTING
*          r_container = lo_docking_container
        IMPORTING
          r_salv_table = gr_alv
        CHANGING
          t_table      = gt_datos ).
    CATCH cx_root .
  ENDTRY.

  PERFORM tunning_alv.

  gr_alv->display( ).

ENDFORM.

FORM tunning_alv.

  DATA: lr_functions  TYPE REF TO cl_salv_functions_list,
        lo_selections TYPE REF TO cl_salv_selections,
        l_text        TYPE string.
  DATA: lv_key    TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout TYPE REF TO cl_salv_layout.
  DATA: lr_columns  TYPE REF TO cl_salv_columns,
        lr_column   TYPE REF TO cl_salv_column_table,
        lr_cols_tab TYPE REF TO cl_salv_columns_table.

  DATA: lr_events TYPE REF TO cl_salv_events_table.
  lr_events = gr_alv->get_event( ).

  lo_selections = gr_alv->get_selections( ).
  lo_selections->set_selection_mode( cl_salv_selections=>multiple ).

  lv_key-report = sy-repid.
  lo_layout = gr_alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).
  IF p_lay06 IS NOT INITIAL.
    lo_layout->set_initial_layout( p_lay06 ).
  ENDIF.


  gr_events = gr_alv->get_event( ).
  CREATE OBJECT event_handler.
  SET HANDLER event_handler->on_user_command FOR gr_events.
  SET HANDLER event_handler->on_link_click FOR gr_events.

  lr_functions = gr_alv->get_functions( ).
  lr_functions->set_all( 'X' ).

  lr_cols_tab = gr_alv->get_columns( ).
  TRY.
      lr_cols_tab->set_color_column( 'COLOR' ).
    CATCH cx_salv_data_error.                           "#EC NO_HANDLER
  ENDTRY.

  event_handler->generar_cabecera( ).

  gr_alv->set_screen_status( pfstatus = 'SALV_STANDARD'
                               report = sy-repid
                        set_functions = gr_alv->c_functions_all ).

*  TRY.
*      l_text = 'Stock'.
*      lr_functions->add_function(
*        name     = 'STOCK'
**        icon     = '@0D@'
*        icon     = '@3X@'
*        text     = l_text
*        tooltip  = l_text
*        position = if_salv_c_function_position=>right_of_salv_functions ).
*    CATCH cx_salv_wrong_call cx_salv_existing.
*  ENDTRY.

  lr_columns = gr_alv->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VKORG' ).
      lr_column->set_short_text( value  = 'Org  vtas' ).
*      lr_column->set_medium_text( value  = 'Fecha entrega' ).
*      lr_column->set_long_text( value  = 'Fecha entrega' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VTEXT' ).
      lr_column->set_short_text( value  = 'N org vtas' ).
      lr_column->set_medium_text( value  = 'Nombre org vtas' ).
      lr_column->set_long_text( value  = 'Nombre org. ventas' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'NAME1' ).
      lr_column->set_short_text( value  = 'Nom client' ).
      lr_column->set_medium_text( value  = 'Nombre cliente' ).
      lr_column->set_long_text( value  = 'Nombre cliente' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VBELN' ).
      lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      lr_column->set_short_text( value  = 'Pedido' ).
      lr_column->set_medium_text( value  = 'Pedido' ).
      lr_column->set_long_text( value  = 'Pedido' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'POSNR' ).
      lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
*      lr_column->set_short_text( value  = 'Pedido' ).
*      lr_column->set_medium_text( value  = 'Pedido' ).
*      lr_column->set_long_text( value  = 'Pedido' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'BSTNK' ).
      lr_column->set_short_text( value  = 'Ped client' ).
      lr_column->set_medium_text( value  = 'Pedido cliente' ).
      lr_column->set_long_text( value  = 'Pedido cliente' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'AUART' ).
      lr_column->set_short_text( value  = 'Clase doc' ).
      lr_column->set_medium_text( value  = 'Clase doc' ).
      lr_column->set_long_text( value  = 'Clase doc' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VBELN_ENT' ).
      lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      lr_column->set_short_text( value  = 'Entrega' ).
      lr_column->set_medium_text( value  = 'Entrega' ).
      lr_column->set_long_text( value  = 'Entrega' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'AUFNR' ).
      lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.


*  TRY.
*      lr_column ?= lr_columns->get_column( columnname = 'ESTADO_OF' ).
*      lr_column->set_short_text( value  = 'Estado OF' ).
*      lr_column->set_medium_text( value  = 'Estado OF' ).
*      lr_column->set_long_text( value  = 'Estado OF' ).
*    CATCH cx_salv_not_found .
*  ENDTRY.


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'KUNNR' ).
      lr_column->set_short_text( value  = 'Cliente' ).
      lr_column->set_medium_text( value  = 'Cliente' ).
      lr_column->set_long_text( value  = 'Cliente' ).

      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'KUNWE' ).
      lr_column->set_short_text( value  = 'Destinat' ).
      lr_column->set_medium_text( value  = 'Destinatario merc' ).
      lr_column->set_long_text( value  = 'Destinatario mercancias' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ZZSEGCAL' ).
      lr_column->set_short_text( value  = 'Tipo calid' ).
      lr_column->set_medium_text( value  = 'Tipo calidad' ).
      lr_column->set_long_text( value  = 'Tipo calidad' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ZZSEGCAL_DESC' ).
      lr_column->set_short_text( value  = 'Desc.tp.ca' ).
      lr_column->set_medium_text( value  = 'Descr. tipo calidad' ).
      lr_column->set_long_text( value  = 'Descrip. tipo calidad' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ARKTX' ).
      lr_column->set_short_text( value  = 'Desc mat' ).
      lr_column->set_medium_text( value  = 'Descr. material' ).
      lr_column->set_long_text( value  = 'Descripción material' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VDATU' ).
      lr_column->set_short_text( value  = 'Fec pref' ).
      lr_column->set_medium_text( value  = 'Fecha pref.entrega' ).
      lr_column->set_long_text( value  = 'Fecha pref.entrega' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'UEBTO' ).
      lr_column->set_short_text( value  = 'Exceso sum' ).
      lr_column->set_medium_text( value  = 'Exceso sum' ).
      lr_column->set_long_text( value  = 'Exceso sum' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'UNTTO' ).
      lr_column->set_short_text( value  = 'Sumin inf' ).
      lr_column->set_medium_text( value  = 'Sumin inf' ).
      lr_column->set_long_text( value  = 'Sumin inf' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'UEBTK' ).
      lr_column->set_short_text( value  = 'Sumin ilim' ).
      lr_column->set_medium_text( value  = 'Sumin ilim' ).
      lr_column->set_long_text( value  = 'Sumin ilim' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'KWMENG' ).
      lr_column->set_short_text( value  = 'Cant pos' ).
      lr_column->set_medium_text( value  = 'Cantidad posición' ).
      lr_column->set_long_text( value  = 'Cantidad posición' ).
      lr_column->set_decimals( '0' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VRKME' ).
      lr_column->set_short_text( value  = 'UM' ).
      lr_column->set_medium_text( value  = 'UMB pos' ).
      lr_column->set_long_text( value  = 'UMB pos' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'OBMNG' ).
      lr_column->set_short_text( value  = 'Cant pte' ).
      lr_column->set_medium_text( value  = 'Cantidad pendiente' ).
      lr_column->set_long_text( value  = 'Cantidad pendiente' ).
      lr_column->set_decimals( '0' ).

    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'GLMNG' ).
      lr_column->set_short_text( value  = 'Cant sum' ).
      lr_column->set_medium_text( value  = 'Cantidad sumin.' ).
      lr_column->set_long_text( value  = 'Cantidad suministrada' ).
      lr_column->set_decimals( '0' ).

    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'WEMNG' ).
      lr_column->set_short_text( value  = 'Cant EM' ).
      lr_column->set_medium_text( value  = 'Cantidad EM' ).
      lr_column->set_long_text( value  = 'Cantidad EM' ).
      lr_column->set_decimals( '0' ).

    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'NUM_REPARTOS' ).
      lr_column->set_short_text( value  = 'Repartos' ).
      lr_column->set_medium_text( value  = 'Repartos' ).
      lr_column->set_long_text( value  = 'Repartos' ).
      lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'NETWR' ).
      lr_column->set_short_text( value  = 'Valor pos.' ).
      lr_column->set_medium_text( value  = 'Valor posición' ).
      lr_column->set_long_text( value  = 'Valor posición' ).
      lr_column->set_sign( ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'GLMNG' ).
      lr_column->set_short_text( value  = 'Ctd. sumin' ).
      lr_column->set_medium_text( value  = 'Ctd. suministrada' ).
      lr_column->set_long_text( value  = 'Cantidad suministrada' ).
      lr_column->set_sign( ).
    CATCH cx_salv_not_found .
  ENDTRY.

*  TRY.
*      lr_column ?= lr_columns->get_column( columnname = 'ZZCAUSA_RETRASO' ).
*      lr_column->set_short_text( value  = 'Retraso' ).
*      lr_column->set_medium_text( value  = 'Retraso' ).
*      lr_column->set_long_text( value  = 'Retraso' ).
*      lr_column->set_sign( ).
*    CATCH cx_salv_not_found .
*  ENDTRY.
*
*  TRY.
*      lr_column ?= lr_columns->get_column( columnname = 'CAUSA_RETRASOT' ).
*      lr_column->set_short_text( value  = 'Desc retrs' ).
*      lr_column->set_medium_text( value  = 'Descr. retraso' ).
*      lr_column->set_long_text( value  = 'Descr. retraso' ).
*      lr_column->set_sign( ).
*    CATCH cx_salv_not_found .
*  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'AUGRU' ).
      lr_column->set_short_text( value  = 'Motiv dev' ).
      lr_column->set_medium_text( value  = 'Motivo devolución' ).
      lr_column->set_long_text( value  = 'Motivo devolución' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ABGRU' ).
      lr_column->set_short_text( value  = 'Motiv rech' ).
      lr_column->set_medium_text( value  = 'Motiv rech' ).
      lr_column->set_long_text( value  = 'Motiv rech' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'LFIMG' ).
      lr_column->set_short_text( value  = 'Ctd.entre.' ).
      lr_column->set_medium_text( value  = 'Cantidad entregada' ).
      lr_column->set_long_text( value  = 'Cantidad entregada' ).
      lr_column->set_sign( ).
    CATCH cx_salv_not_found .
  ENDTRY.

*  TRY.
*      lr_column ?= lr_columns->get_column( columnname = 'PIKMG' ).
*      lr_column->set_short_text( value  = 'Ctd. pick.' ).
*      lr_column->set_medium_text( value  = 'Cantidad picking' ).
*      lr_column->set_long_text( value  = 'Cantidad picking' ).
*      lr_column->set_sign( ).
*    CATCH cx_salv_not_found .
*  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TP_PEDIDO' ).
      lr_column->set_short_text( value  = 'Tp.Ped C/V' ).
      lr_column->set_medium_text( value  = 'Tp.Ped Compra/Venta' ).
      lr_column->set_long_text( value  = 'Tp.Ped Compra/Venta' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.

      lr_column->set_visible( abap_false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'KOSTK' ).
      lr_column->set_short_text( value  = 'ST picking' ).
      lr_column->set_medium_text( value  = 'ST picking' ).
      lr_column->set_long_text( value  = 'ST picking' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FPICKINGREAL' ).
      lr_column->set_short_text( value  = 'Fec pickng' ).
      lr_column->set_medium_text( value  = 'Fecha picking' ).
      lr_column->set_long_text( value  = 'Fecha picking' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'WBSTK' ).
      lr_column->set_short_text( value  = 'ST SM' ).
      lr_column->set_medium_text( value  = 'ST salida merc.' ).
      lr_column->set_long_text( value  = 'ST salida merc.' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'WADAT_IST' ).
      lr_column->set_short_text( value  = 'Fec SM' ).
      lr_column->set_medium_text( value  = 'Fecha SM' ).
      lr_column->set_long_text( value  = 'Fecha SM' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TRSTA' ).
      lr_column->set_short_text( value  = 'ST transp' ).
      lr_column->set_medium_text( value  = 'ST transp.' ).
      lr_column->set_long_text( value  = 'ST transp.' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FKIVK' ).
      lr_column->set_short_text( value  = 'ST factura' ).
      lr_column->set_medium_text( value  = 'ST factura' ).
      lr_column->set_long_text( value  = 'ST factura' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TKNUM' ).
      lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      lr_column->set_short_text( value  = 'Nº transp' ).
      lr_column->set_medium_text( value  = 'Nº transp.' ).
      lr_column->set_long_text( value  = 'Nº transp.' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FCRDOCTRANS' ).
*      lr_column->set_short_text( value  = 'Nº transp' ).
*      lr_column->set_medium_text( value  = 'Nº transp.' ).
      lr_column->set_long_text( value  = 'Fec transp' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VRKME_ENT' ).
      lr_column->set_long_text( value  = 'UM' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VRKMP_ENT' ).
      lr_column->set_long_text( value  = 'UM' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'POSNR_ENT' ).
      lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      lr_column->set_short_text( value  = 'Pos entrga' ).
      lr_column->set_medium_text( value  = 'Pos entrga' ).
      lr_column->set_long_text( value  = 'Pos entrga' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'LFIMG' ).
      lr_column->set_short_text( value  = 'Cant entga' ).
      lr_column->set_medium_text( value  = 'Cantidad entrega' ).
      lr_column->set_long_text( value  = 'Cantidad entrega.' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'POSNR_ENT' ).
      lr_column->set_short_text( value  = 'Pos entrga' ).
      lr_column->set_medium_text( value  = 'Pos entrga' ).
      lr_column->set_long_text( value  = 'Pos entrga' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'LIFSK' ).
      lr_column->set_short_text( value  = 'Blq planif' ).
      lr_column->set_medium_text( value  = 'Blqueo planificación' ).
      lr_column->set_long_text( value  = 'Blqueo planificación' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.

    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ZZBLOQ_FABR' ).
      lr_column->set_short_text( value  = 'Exento fab' ).
      lr_column->set_medium_text( value  = 'Exento fabricación' ).
      lr_column->set_long_text( value  = 'Exento fabricación' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.

    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VBTYP' ).
      lr_column->set_short_text( value  = 'Tipo doc.' ).
      lr_column->set_medium_text( value  = 'Tipo documento' ).
      lr_column->set_long_text( value  = 'Tipo documento' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.

    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'INCO1' ).
      lr_column->set_short_text( value  = 'Incoterms' ).
      lr_column->set_medium_text( value  = 'Incoterms' ).
      lr_column->set_long_text( value  = 'Incoterms' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.

    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'KOSTA' ).
      lr_column->set_short_text( value  = 'St picking' ).
      lr_column->set_medium_text( value  = 'Status picking' ).
      lr_column->set_long_text( value  = 'Status picking' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.

    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'IND_DIF_EM' ).

      lr_column->set_short_text( value  = 'Ind.dif EM' ).
      lr_column->set_medium_text( value  = 'Indic. diferencia EM' ).
      lr_column->set_long_text( value  = 'Indic. diferencia EM' ).
      CALL METHOD lr_column->set_alignment
        EXPORTING
          value = if_salv_c_alignment=>centered.

    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ZZGRAMAJE' ).
      lr_column->set_short_text( value  = 'Gramaje' ).
      lr_column->set_medium_text( value  = 'Gramaje' ).
      lr_column->set_long_text( value  = 'Gramaje' ).
*      CALL METHOD lr_column->set_alignment
*        EXPORTING
*          value = if_salv_c_alignment=>centered.

    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'KG_STOCK_DE_A' ).
      lr_column->set_short_text( value  = 'Stock A' ).
      lr_column->set_medium_text( value  = 'Stock A' ).
      lr_column->set_long_text( value  = 'Stock A' ).
*      CALL METHOD lr_column->set_alignment
*        EXPORTING
*          value = if_salv_c_alignment=>centered.

    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'KG_STOCK_DE_R' ).
      lr_column->set_short_text( value  = 'Stock R' ).
      lr_column->set_medium_text( value  = 'Stock R' ).
      lr_column->set_long_text( value  = 'Stock R' ).
*      CALL METHOD lr_column->set_alignment
*        EXPORTING
*          value = if_salv_c_alignment=>centered.

    CATCH cx_salv_not_found .
  ENDTRY.

  DATA(lr_display) = gr_alv->get_display_settings( ).

ENDFORM.

FORM colorear_celda_fila  USING p_columna  TYPE lvc_fname
                               p_color    TYPE int1
                     CHANGING ps_cellcolor TYPE lvc_s_scol.


  CLEAR ps_cellcolor.
  ps_cellcolor-fname = p_columna.
  ps_cellcolor-color-col = p_color. "'6' .
  ps_cellcolor-color-int = '0'.

ENDFORM.                    " COLORER_CELDA


FORM buscar_variante  CHANGING p_vari TYPE disvariant-variant.

  DATA: ls_variant TYPE disvariant,
        l_exit     TYPE char1.

  ls_variant-report = sy-repid.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = ls_variant
      i_save     = 'A'
    IMPORTING
      e_exit     = l_exit
      es_variant = ls_variant
    EXCEPTIONS
      not_found  = 2.
  IF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    IF l_exit EQ space.
      p_vari = ls_variant-variant.
    ENDIF.
  ENDIF.

ENDFORM.                    " BUSCAR_VARIANTE

FORM refrescar_linea CHANGING p_ret TYPE zspp_seguimiento_pedidos_pos.

  DATA: lt_datos TYPE STANDARD TABLE OF zspp_seguimiento_pedidos_pos.
  s_vbeln[] = VALUE #( ( sign = 'I' option = 'EQ' low = p_ret-vbeln ) ).

  PERFORM obtener_datos TABLES lt_datos.
  CLEAR s_vbeln[].

  DELETE  gt_datos WHERE vbeln = p_ret-vbeln." and
*                         posnr = p_ret-posnr.

  LOOP AT lt_datos INTO DATA(ls_datos) WHERE vbeln = p_ret-vbeln." and
*                                             posnr = p_ret-posnr.<
    APPEND INITIAL LINE TO gt_datos ASSIGNING FIELD-SYMBOL(<fs_datos_refresh>).
    <fs_datos_refresh> = CORRESPONDING #( ls_datos ).
  ENDLOOP.

  SORT gt_datos BY vbeln posnr vbeln_ent posnr_ent.

  gr_alv->refresh( ).

ENDFORM.

FORM fin_entrega.

  DATA: lt_selected_row TYPE salv_t_row,
        ls_selected_row LIKE LINE OF lt_selected_row,
        ls_datos        TYPE zspp_seguimiento_pedidos_pos,
        lv_lines        TYPE i,
        lt_datos        LIKE gt_datos,
        lt_procesado    TYPE STANDARD TABLE OF zspp_seguimiento_pedidos_pos,
        ls_procesado    TYPE zspp_seguimiento_pedidos_pos.

  DATA:gt_item_in  TYPE STANDARD TABLE OF bapisditm,
       gt_item_inx TYPE STANDARD TABLE OF bapisditmx,
       gt_return   TYPE STANDARD TABLE OF bapiret2.

  DATA:gst_item_hedx TYPE bapisdh1x,
       gst_item_in   TYPE bapisditm,
       gst_item_inx  TYPE bapisditmx.

  DATA: gt_return2 TYPE STANDARD TABLE OF bapiret2,
        gt_poitem  TYPE STANDARD TABLE OF bapimepoitem,
        gt_poitemx TYPE STANDARD TABLE OF bapimepoitemx.

  DATA: gs_poitem    TYPE bapimepoitem,
        gs_poitemx   TYPE bapimepoitemx,
        gs_poheaderx TYPE bapimepoheaderx.

  DATA: gt_return_all TYPE STANDARD TABLE OF bapiret2.

  REFRESH lt_selected_row.
  CLEAR: lt_selected_row, ls_selected_row, lv_lines.

  lt_selected_row = gr_alv->get_selections( )->get_selected_rows( ).

  DESCRIBE TABLE lt_selected_row LINES lv_lines.

  IF lv_lines EQ 0. "No se han seleccionado lineas
    RETURN.
  ELSE.

    LOOP AT lt_selected_row INTO ls_selected_row.
      READ TABLE gt_datos INTO ls_datos INDEX ls_selected_row.
*      READ TABLE gti_datos INTO ls_datos INDEX ls_selected_row-zindex.

      IF ls_datos IS NOT INITIAL.

*        ls_datos-row_id = ls_selected_row-row_id. "index

*        READ TABLE lt_procesado INTO ls_procesado WITH KEY vbeln = ls_datos-vbeln.

        APPEND ls_datos TO lt_datos.

        CLEAR: ls_selected_row,ls_datos.
      ENDIF.
    ENDLOOP.
  ENDIF.

  "Passar les files seleccionades a la taula gt_selected_rows amb un select

  LOOP AT lt_datos ASSIGNING FIELD-SYMBOL(<fs_row>).

    IF <fs_row>-tp_pedido = 'V'.

      gst_item_hedx-updateflag = 'U'.
      gst_item_inx-updateflag  = 'U'.

      gst_item_in-itm_number  = <fs_row>-posnr.
      gst_item_inx-itm_number = <fs_row>-posnr.

      gst_item_in-reason_rej  = '39'.
      gst_item_inx-reason_rej = 'X'.

      APPEND:
        gst_item_in  TO gt_item_in,
        gst_item_inx TO gt_item_inx.


      READ TABLE lt_procesado INTO ls_procesado WITH KEY vbeln = <fs_row>-vbeln posnr = <fs_row>-posnr. "Do not call the BAPI when position ir already treated.
      IF sy-subrc <> 0.

        CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
          EXPORTING
            salesdocument    = <fs_row>-vbeln
            order_header_inx = gst_item_hedx
          TABLES
            return           = gt_return
            order_item_in    = gt_item_in
            order_item_inx   = gt_item_inx.

        LOOP AT gt_return TRANSPORTING NO FIELDS
         WHERE type EQ 'E'
         OR type EQ 'A'.

          EXIT.

        ENDLOOP.

        IF sy-subrc EQ 0.

*     Rollback changes.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

        ELSE.

          "Commit changes.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = abap_true.

          MESSAGE 'Entrega finalizada completada' TYPE 'S'.

        ENDIF.

        APPEND LINES OF gt_return TO gt_return_all.

        APPEND <fs_row> TO lt_procesado.

      ELSE. "sy-subrc = 0

      ENDIF.

*    CONCATENATE <fs_row>-vbeln
*                <fs_row>-posnr
*           INTO gv_msg
*    SEPARATED BY space.
    ELSEIF <fs_row>-tp_pedido = 'C'.

      gs_poheaderx-po_number = 'U'.

      gs_poitem-po_item    = <fs_row>-posnr.
      gs_poitem-no_more_gr = 'X'.

      gs_poitemx-po_item    = <fs_row>-posnr.
      gs_poitemx-po_itemx   = 'U'.
      gs_poitemx-no_more_gr = 'X'.


      APPEND: gs_poitem  TO gt_poitem,
              gs_poitemx TO gt_poitemx.

      READ TABLE lt_procesado INTO ls_procesado WITH KEY vbeln = <fs_row>-vbeln posnr = <fs_row>-posnr.
      IF sy-subrc <> 0.

        CALL FUNCTION 'BAPI_PO_CHANGE'
          EXPORTING
            purchaseorder = <fs_row>-vbeln
            poheaderx     = gs_poheaderx
          TABLES
            return        = gt_return2
            poitem        = gt_poitem
            poitemx       = gt_poitemx.

        LOOP AT gt_return2 TRANSPORTING NO FIELDS
           WHERE type EQ 'E'
           OR type EQ 'A'.

          EXIT.

        ENDLOOP.

        IF sy-subrc EQ 0.

*     Rollback changes.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

        ELSE.

          "Commit changes.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = abap_true.

          MESSAGE 'Entrega finalizada completada' TYPE 'S'.

        ENDIF.

        APPEND LINES OF gt_return2 TO gt_return_all.

        APPEND <fs_row> TO lt_procesado.

      ENDIF.
    ENDIF.

    CLEAR: gs_poheaderx, gs_poitemx, gs_poitem, gst_item_inx, gst_item_in, gst_item_hedx, gt_item_in, gt_item_inx, gt_return, gt_return2, gt_poitem, gt_poitemx.

  ENDLOOP.

  DELETE gt_return_all WHERE type = 'W'.

  cl_rmsl_message=>display( gt_return_all ).

ENDFORM.
