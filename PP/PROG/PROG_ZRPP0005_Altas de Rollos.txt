*&---------------------------------------------------------------------*
*& Report  ZRPP0005
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

INCLUDE zrpp0005_top                            .    " global Data

* INCLUDE ZRPP0005_O01                            .  " PBO-Modules
* INCLUDE ZRPP0005_I01                            .  " PAI-Modules
* INCLUDE ZRPP0005_F01                            .  " FORM-Routines

* PANTALLA DE SELECCION
SELECTION-SCREEN BEGIN OF BLOCK zrpp0005 WITH FRAME TITLE text-001.
PARAMETERS p_aufnr LIKE aufk-aufnr OBLIGATORY.
PARAMETERS p_menge TYPE erfmg OBLIGATORY.
PARAMETERS p_ktext LIKE aufk-ktext .

SELECTION-SCREEN BEGIN OF BLOCK zrpp0005_2 WITH FRAME TITLE text-002.

PARAMETERS: p_diam TYPE zzdiametro,
            p_torn TYPE atinn.


SELECTION-SCREEN END OF BLOCK zrpp0005_2.
SELECTION-SCREEN END OF BLOCK zrpp0005.


INCLUDE zrpp0005_form.    " global Data


INITIALIZATION.

*6.- LIMPIAR VARIABLES
  PERFORM clean_vbles.

  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'P_KTEXT'.
        screen-input = 0.
*  	WHEN .
      WHEN OTHERS.
    ENDCASE.

    MODIFY SCREEN.
  ENDLOOP.



AT SELECTION-SCREEN OUTPUT.

  DATA: lv_matnr TYPE matnr.

  IF NOT p_aufnr IS INITIAL.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = p_aufnr
      IMPORTING
        output = p_aufnr.

    CLEAR lv_matnr.
    SELECT SINGLE plnbez INTO lv_matnr
    FROM afko
    WHERE aufnr = p_aufnr.
    IF sy-subrc <> 0.
      MESSAGE e010 WITH p_aufnr.
    ELSE.
      SELECT SINGLE maktx INTO p_ktext
      FROM makt
      WHERE spras = sy-langu
      AND matnr = lv_matnr.
    ENDIF.
  ENDIF.

  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'P_KTEXT'.
        screen-input = 0.
*  	WHEN .
      WHEN OTHERS.
    ENDCASE.

    MODIFY SCREEN.
  ENDLOOP.



AT SELECTION-SCREEN.
  PERFORM orden_liberada.


START-OF-SELECTION.

* CONTROLAR QUE EL PESO SEA EL CORRECTO Y PREGUNTAR ANTES DE CONTINUAR
  CLEAR: gv_answer, gt_param, gv_text, gv_peso.
  REFRESH: gt_param.
  IF p_menge > 20000.

    CLEAR: gv_answer, gt_param, gv_text, gv_peso.
    REFRESH: gt_param.

*    gv_peso = p_menge.
    WRITE p_menge TO gv_peso.

    CONCATENATE text-004 gv_peso 'KG' '?' INTO gv_text SEPARATED BY space.

    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        titlebar       = text-003
*       DIAGNOSE_OBJECT             = ' '
        text_question  = gv_text
*       TEXT_BUTTON_1  = 'Ja'(001)
*       ICON_BUTTON_1  = ' '
*       TEXT_BUTTON_2  = 'Nein'(002)
*       ICON_BUTTON_2  = ' '
*       DEFAULT_BUTTON = '1'
*       DISPLAY_CANCEL_BUTTON       = 'X'
*       USERDEFINED_F1_HELP         = ' '
*       START_COLUMN   = 25
*       START_ROW      = 6
*       POPUP_TYPE     =
*       IV_QUICKINFO_BUTTON_1       = ' '
*       IV_QUICKINFO_BUTTON_2       = ' '
      IMPORTING
        answer         = gv_answer
      TABLES
        parameter      = gt_param
      EXCEPTIONS
        text_not_found = 1
        OTHERS         = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.
  ENDIF.


  IF gv_answer IS INITIAL OR gv_answer = '1'.

*1.- ALTA STOCK CONTRA ORDEN Y CREACION LOTE
    PERFORM alta_stock.

    IF gv_error <> 'X'.

*2.- CLASIFICAR LOTE
      PERFORM clasificar_lote.

      IF gv_error <> 'X'.

*3.- NOTICAR
        PERFORM notificar_orden.

        IF gv_error <> 'X'.

*4.- IMPRESION ETIQUETA
          PERFORM imprimir_etiqueta.

        ENDIF.
      ENDIF.
    ENDIF.

*5.- MOSTRAR LOG
    PERFORM mostrar_log.

*6.- LIMPIAR VARIABLES
    PERFORM clean_vbles.

    LEAVE SCREEN.

  ENDIF.
