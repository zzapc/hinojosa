*&---------------------------------------------------------------------*
*&  Include           ZPPRF001_MODULE_PBO
*&---------------------------------------------------------------------*
MODULE status_pbo_app OUTPUT.
  SET PF-STATUS '100'.
  SET TITLEBAR '10'.
  CLEAR g_barcode.

  SELECT SINGLE parva INTO g_werks FROM usr05
  WHERE bname = sy-uname AND parid = 'WRK'.

  PERFORM crear_objeto_app.

* 23/909/2021 - 67826 - Eliminar sesiones anteriores para este: usuario, ip y aplicación (ZPPRF_MENU).
* Solo se ejecutará una vez al iniciar la aplicación.
  IF sy-dynnr = '0010' and gw_control_sesiones = ' '.
    gw_control_sesiones = 'X'.
    CALL METHOD zcl_utils_hpap_pp=>delete_old_user_sessions( sy-uname ).
  ENDIF.

ENDMODULE.



MODULE check_f2_cons_receta OUTPUT.

  IF g_receta_inactiva IS INITIAL.
    LOOP AT SCREEN.
      IF screen-group4 = 'ICI'.
        screen-invisible  = 1.
        screen-active     = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.


ENDMODULE.

MODULE status_pbo_101 OUTPUT.

  IF gs_dyn101-barcode IS INITIAL OR gs_dyn101-f5_ok = ' '.

    LOOP AT SCREEN.
      IF screen-group1 = 'F5'.
        screen-invisible  = 1.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.

  ENDIF.

  IF g_receta_inactiva IS INITIAL.
    LOOP AT SCREEN.
      IF screen-group4 = 'ICI'.
        screen-invisible  = 1.
        screen-active     = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

  DATA: dyfields LIKE dynpread OCCURS 1 WITH HEADER LINE.

  dyfields-fieldname =  'GS_DYN101-LOTE'.
  dyfields-fieldvalue = gs_dyn101-lote.
  APPEND dyfields.
  dyfields-fieldname =  'GS_DYN101-MATNR'.
  dyfields-fieldvalue = gs_dyn101-matnr.
  APPEND dyfields.
  dyfields-fieldname =  'GS_DYN101-MAKTX'.
  dyfields-fieldvalue = gs_dyn101-maktx.
  APPEND dyfields.


  CALL FUNCTION 'DYNP_VALUES_UPDATE'
    EXPORTING
      dyname               = sy-cprog
      dynumb               = sy-dynnr
    TABLES
      dynpfields           = dyfields
    EXCEPTIONS
      invalid_abapworkarea = 1
      invalid_dynprofield  = 2
      invalid_dynproname   = 3
      invalid_dynpronummer = 4
      invalid_request      = 5
      no_fielddescription  = 6
      undefind_error       = 7
      OTHERS               = 8.
  IF sy-subrc <> 0.
  ENDIF.

  CLEAR sy-ucomm.

ENDMODULE.




MODULE status_0015 OUTPUT.
  DATA: lt_values TYPE vrm_values,
        ls_value  LIKE LINE OF lt_values.

  CALL FUNCTION 'VRM_REFRESH_VALUES'.

  CALL FUNCTION 'VRM_DELETE_VALUES'
    EXPORTING
      id           = 'G_OPERARIO'
*     ID_CONTAINS_PROGNAME       = 'ZPPRF001'
    EXCEPTIONS
      id_not_found = 1
      OTHERS       = 2.
  IF sy-subrc <> 0.
  ENDIF.

  CLEAR:  g_operario , gt_oper[] , gt_values_dyn0015[].
  CALL METHOD zclpp_trazabilidad_usuario=>obtener_operarios_puesto_trab
    EXPORTING
      i_werks       = g_werks
      i_tp_operario = zclpp_trazabilidad_usuario=>tp_op_carretillero
    IMPORTING
      ot_operarios  = gt_oper.

  LOOP AT gt_oper INTO DATA(ls_oper).
    APPEND VALUE vrm_value( key  = ls_oper(25)
                            text = ls_oper ) TO gt_values_dyn0015.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'G_OPERARIO'
      values          = gt_values_dyn0015
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.

  CLEAR sy-ucomm.

ENDMODULE.

MODULE status_0110 OUTPUT.

  g_id_receta = '100017'.

  CALL METHOD zclpp_consumo_recetas_mp=>obtener_datos_receta_consumida
    EXPORTING
      i_werks          = g_werks
      i_id_receta      = g_id_receta
      i_t1             = 'X'
      i_t2             = 'X'
      i_t3             = 'X'
    IMPORTING
*     os_datos_form_receta_mp =  data(lt_datos_rec)
      ot_datos_consumo = DATA(lt_datos_rec)
      o_rc             = DATA(l_rc).

  CHECK l_rc = '00'.

  DATA: lt_y_values TYPE STANDARD TABLE OF  gprval,
        ls_y_values TYPE                    gprval,
        lt_x_texts  TYPE STANDARD TABLE OF  gprtxt,
        l_numc2     TYPE numc2.

  DATA(l_cont) = 0.

  CLEAR: l_numc2 , ls_y_values , lt_y_values[] , lt_x_texts[] .
  ls_y_values-rowtxt = 'Porc.ciclo'.
  LOOP AT lt_datos_rec INTO DATA(ls_datos).
    APPEND VALUE gprtxt( coltxt = |{ ls_datos-maktx+5(5) }| )     TO lt_x_texts.

    ADD 1 TO l_numc2.
    SHIFT l_numc2 LEFT DELETING LEADING '0'.
    DATA(campo1) = |LS_Y_VALUES-VAL{ l_numc2 }|.
    ASSIGN (campo1) TO FIELD-SYMBOL(<fs_val>).
    <fs_val> = ls_datos-porc_ciclo.

    ADD 1 TO l_cont.
    IF l_cont > 4.
      EXIT.
    ENDIF.
  ENDLOOP.
  INSERT ls_y_values INTO TABLE lt_y_values.


  CLEAR: l_cont , l_numc2 , ls_y_values.
  ls_y_values-rowtxt = 'Porc.real'.
  LOOP AT lt_datos_rec INTO ls_datos.

    ADD 1 TO l_numc2.
    SHIFT l_numc2 LEFT DELETING LEADING '0'.

    campo1 = |LS_Y_VALUES-VAL{ l_numc2 }|.
    ASSIGN (campo1) TO <fs_val>.
    <fs_val> = ls_datos-porc_real.

    ADD 1 TO l_cont.
    IF l_cont > 4.
      EXIT.
    ENDIF.
  ENDLOOP.
  INSERT ls_y_values INTO TABLE lt_y_values.

  CALL FUNCTION 'GFW_PRES_SHOW'
    EXPORTING
      container         = 'G_CONTAINER'
      presentation_type = gfw_prestype_horizontal_bars
    TABLES
      values            = lt_y_values
      column_texts      = lt_x_texts
    EXCEPTIONS
      error_occurred    = 1
      OTHERS            = 2.

  CLEAR sy-ucomm.

ENDMODULE.

MODULE status_0200 OUTPUT.
  SET PF-STATUS '100'.
  SET TITLEBAR '10'.
  CLEAR g_barcode.

*   (almacenes 1000 a 1019, 1022 y 1023)

  DATA: l_lgort      TYPE l_lgort VALUE '1000',
        l_name_lgort TYPE lgobe.

  l_lgort = 1000.

  REFRESH lt_values.

  SELECT * INTO TABLE @DATA(lt_lgort) FROM t001l WHERE werks = @g_werks.


  TRY.
      g_lgort_origen_txt = lt_lgort[ lgort = g_lgort_origen ]-lgobe.
    CATCH cx_sy_itab_line_not_found.
  ENDTRY.

  DO 20 TIMES.
    TRY.
        l_name_lgort = lt_lgort[ lgort = l_lgort ]-lgobe.
      CATCH cx_sy_itab_line_not_found.
    ENDTRY.


    IF NOT line_exists( lt_values[ key = l_lgort ] ).
      APPEND VALUE vrm_value( key  = l_lgort
                              text = |{ l_lgort }-{ l_name_lgort }| ) TO lt_values.
      ADD 1 TO l_lgort.
    ENDIF.
  ENDDO.

  l_lgort = 1022.
  DO 18 TIMES. "CMS 08/01/2020 se amplia rango de ubicaciones de la Campa
    TRY.
        l_name_lgort = lt_lgort[ lgort = l_lgort ]-lgobe.
      CATCH cx_sy_itab_line_not_found.
    ENDTRY.


    IF NOT line_exists( lt_values[ key = l_lgort ] ).
      APPEND VALUE vrm_value( key  = l_lgort
                              text = |{ l_lgort }-{ l_name_lgort }| ) TO lt_values.
      ADD 1 TO l_lgort.
    ENDIF.
  ENDDO.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'G_LGORT_DSTINO'
      values          = lt_values
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.

  CLEAR sy-ucomm.

ENDMODULE.

MODULE status_0311 OUTPUT.

  DATA l_charg TYPE charg_d.
  DATA(l_index) = CONV i( g_pagina ) * 7.

  DATA l_no_int TYPE i.

  IF lt_bobinas IS INITIAL.
    lt_bobinas = o_app->tabla_bobinas_leidas.
    IF lt_bobinas IS INITIAL.
      RETURN.
    ENDIF.
  ENDIF.

  DATA l_pag TYPE p DECIMALS 2.

  l_pag = lines( lt_bobinas ) / 7.

  IF l_pag LE 1.
    g_max_paginas = 0.
  ELSE.
    g_max_paginas = trunc( l_pag ) .
  ENDIF.

  IF g_dynpro EQ '0310'.
    g_titulo_311 = 'TRASPASO ENTRE ALMACENES'.
  ELSEIF g_dynpro EQ '0320'.
    g_titulo_311 = 'REPROCESO EXTERNO'.
  ELSEIF g_dynpro EQ '0410'.
    g_titulo_311 = 'PULPER A HJ NS PAPER'.
  ELSEIF g_dynpro EQ '0450'.
    g_titulo_311 = 'HJ NS PAPER A PULPER  '.
  ELSEIF g_dynpro EQ '0510'.
    g_titulo_311 = 'CAMBIAR CLIENTE'.
  ENDIF.



  LOOP AT SCREEN.
    IF screen-name CS 'BOTON_'.
      DATA(l_no) = screen-name+6(1).

      l_no_int = CONV i( l_no ).

      DATA(l_tabix) = l_index + l_no_int.

      TRY.
          l_charg = lt_bobinas[ l_tabix ]-charg.
          ASSIGN (screen-name) TO FIELD-SYMBOL(<fs>).
          IF <fs> IS ASSIGNED.
            <fs> = l_charg.
          ENDIF.
          screen-input  = 1.
          screen-active = 1.
        CATCH cx_sy_itab_line_not_found.
          screen-input  = 0.
          screen-active = 0.
      ENDTRY.

    ENDIF.


    MODIFY SCREEN.
  ENDLOOP.

  CLEAR sy-ucomm.

ENDMODULE.
MODULE status_0309 OUTPUT.

  IF g_werks IS INITIAL.
    SELECT SINGLE parva INTO g_werks FROM usr05
                                    WHERE bname = sy-uname AND parid = 'WRK'.
  ENDIF.

  PERFORM limpiar_campos.



  IF g_dynpro EQ '0310'.
    g_titulo_311 = 'TRASPASO ENTRE ALMACENES'.
    SELECT ztpp0024~werks, ztpp0024~lgort, lgobe
            FROM ztpp0024 JOIN t001l
                            ON  ztpp0024~werks EQ t001l~werks
                           AND ztpp0024~lgort EQ t001l~lgort
                    INTO TABLE @DATA(lt_almacenes)
                    WHERE ztpp0024~werks EQ @g_werks AND
                         ( tipo_almacen   EQ '01' OR
                           tipo_almacen   EQ '02' ).
  ELSE.
    g_titulo_311 = 'REPROCESO EXTERNO'.
    SELECT ztpp0024~werks, ztpp0024~lgort, lgobe
         FROM ztpp0024 JOIN t001l
                         ON  ztpp0024~werks EQ t001l~werks
                        AND ztpp0024~lgort EQ t001l~lgort
                 INTO TABLE @lt_almacenes
                 WHERE ztpp0024~werks EQ @g_werks AND
                       tipo_almacen   EQ '04'.

  ENDIF.

  lt_values =  CORRESPONDING #( lt_almacenes MAPPING key = lgort text = lgobe ).

  LOOP AT lt_values ASSIGNING FIELD-SYMBOL(<fs_alm>).
    <fs_alm>-text = |{ <fs_alm>-key }-{ <fs_alm>-text }|.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'G_LGORT'
      values          = lt_values
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.

  IF g_lgort_active EQ abap_false.
    LOOP AT SCREEN .
      IF screen-name CS 'G_LGORT'.
        screen-input = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
    SET CURSOR FIELD 'G_BARCODE'.
  ENDIF.
  CLEAR sy-ucomm.

ENDMODULE.
MODULE status_0400 OUTPUT.
  SET PF-STATUS '100'.
  SET TITLEBAR '10'.

  CLEAR g_matnr_non_standard_paper.

* Leer materiales NonStandard pars el selector
  SELECT mara~matnr maktx FROM mara JOIN makt
                       ON mara~matnr EQ makt~matnr
              INTO TABLE lt_values WHERE matkl EQ '10199' AND
                                         mara~lvorm = ' '."HJNS

  LOOP AT lt_values ASSIGNING FIELD-SYMBOL(<fs_values>).
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = <fs_values>-key
      IMPORTING
        output = <fs_values>-key.

    <fs_values>-text = <fs_values>-key.
  ENDLOOP.


  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'G_MATNR_NON_STANDARD_PAPER'
      values          = lt_values
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.

  PERFORM crear_objeto_app.
  CLEAR sy-ucomm.

ENDMODULE.
MODULE status_312 OUTPUT.

G_MATNR_NON_STANDARD_PAPER = |{ G_MATNR_NON_STANDARD_PAPER ALPHA = out }|.
G_MATNR                    = |{ G_MATNR ALPHA = out }|.

  LOOP AT SCREEN.
    IF screen-group1 EQ 'T' AND ( g_dynpro EQ '0410' OR g_dynpro EQ '0450' ).
      screen-invisible = 1.
      MODIFY SCREEN.
    ELSEIF screen-group1 EQ 'T' AND ( g_dynpro EQ '0410' OR g_dynpro EQ '0450' ).
      screen-invisible = 0.
      MODIFY SCREEN.
    ENDIF.

    IF screen-group2 EQ 'T' AND ( g_dynpro EQ '0410' OR g_dynpro EQ '0450' ).
      screen-invisible = 0.
      MODIFY SCREEN.
    ELSEIF screen-group2 EQ 'T' AND ( g_dynpro EQ '0410' OR g_dynpro EQ '0450' ).
      screen-invisible = 1.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.


  CLEAR sy-ucomm.

ENDMODULE.

MODULE status_0500 OUTPUT.

  DATA: l_kunnr TYPE kunnr.
  DATA: l_desc TYPE char30.

  PERFORM limpiar_campos.

  CLEAR: g_new_kunnr , g_new_kunnr_ext , lt_values[].

****  SELECT kna1~kunnr name1
****                     FROM kna1 JOIN knb1 ON kna1~kunnr = knb1~kunnr
****                     INTO TABLE lt_values
****                     WHERE kna1~kunnr LIKE 'C2%' AND bukrs = g_werks.
****
****  DELETE lt_values WHERE key EQ 'C2050'.
****
****
****  LOOP AT lt_values ASSIGNING <fs_values>.
****    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
****      EXPORTING
****        input  = <fs_values>-key
****      IMPORTING
****        output = <fs_values>-key.
****
****    <fs_values>-text = |{ <fs_values>-key } { <fs_values>-text }|.
****
****  ENDLOOP.

** Clientes para el desplegable
*  APPEND INITIAL LINE TO lt_values ASSIGNING <fs_values>.
*  l_kunnr = |C2000|.
*  l_desc = zclpp_capacidad_asignada=>get_descripcion_cliente( l_kunnr ).
*  <fs_values>-key  = l_kunnr.
*  <fs_values>-text = l_desc.
*
*  APPEND INITIAL LINE TO lt_values ASSIGNING <fs_values>.
*  l_kunnr = |C2001|.
*  l_desc = zclpp_capacidad_asignada=>get_descripcion_cliente( l_kunnr ).
*  <fs_values>-key  = l_kunnr.
*  <fs_values>-text = l_desc.
*
*  APPEND INITIAL LINE TO lt_values ASSIGNING <fs_values>.
*  l_kunnr = |C2010|.
*  l_desc = zclpp_capacidad_asignada=>get_descripcion_cliente( l_kunnr ).
*  <fs_values>-key  = l_kunnr.
*  <fs_values>-text = l_desc.
*
*  APPEND INITIAL LINE TO lt_values ASSIGNING <fs_values>.
*  l_kunnr = |C2020|.
*  l_desc = zclpp_capacidad_asignada=>get_descripcion_cliente( l_kunnr ).
*  <fs_values>-key  = l_kunnr.
*  <fs_values>-text = l_desc.
*
*  APPEND INITIAL LINE TO lt_values ASSIGNING <fs_values>.
*  l_kunnr = |C2030|.
*  l_desc = zclpp_capacidad_asignada=>get_descripcion_cliente( l_kunnr ).
*  <fs_values>-key  = l_kunnr.
*  <fs_values>-text = l_desc.
*
*  APPEND INITIAL LINE TO lt_values ASSIGNING <fs_values>.
*  l_kunnr = |C2040|.
*  l_desc = zclpp_capacidad_asignada=>get_descripcion_cliente( l_kunnr ).
*  <fs_values>-key  = l_kunnr.
*  <fs_values>-text = l_desc.
*
*  APPEND INITIAL LINE TO lt_values ASSIGNING <fs_values>.
*  l_kunnr = |C2050|.
*  l_desc = zclpp_capacidad_asignada=>get_descripcion_cliente( l_kunnr ).
*  <fs_values>-key  = l_kunnr.
*  <fs_values>-text = l_desc.
*
*  APPEND INITIAL LINE TO lt_values ASSIGNING <fs_values>.
*  l_kunnr = |C2070|.
*  l_desc = zclpp_capacidad_asignada=>get_descripcion_cliente( l_kunnr ).
*  <fs_values>-key  = l_kunnr.
*  <fs_values>-text = l_desc.
*
*  APPEND INITIAL LINE TO lt_values ASSIGNING <fs_values>.
*  l_kunnr = |C5010|.
*  l_desc = zclpp_capacidad_asignada=>get_descripcion_cliente( l_kunnr ).
*  <fs_values>-key  = l_kunnr.
*  <fs_values>-text = l_desc.
*
*  CLEAR ls_value.
*  CASE g_werks.
*    WHEN '3000'.
*      ls_value-key  = |C{ g_werks }|.
*      ls_value-text = 'PAPELERA DE LA ALQUERÍA S.L.'.
*    WHEN '3020'.
*      ls_value-key  = |C{ g_werks }|.
*      ls_value-text = 'PAPELERA DE SARRIA'.
*    WHEN OTHERS.
*  ENDCASE.
*  INSERT ls_value INTO TABLE lt_values.

* 68549 - 07-09-2021 - CMS - Añadir cliente externo
* Nueva carga de clientes con valores de la tabla ZTSD
  CALL METHOD zclpp_app_logistica=>get_clientes
    IMPORTING
      ot_clientes_hi = DATA(lt_clientes_hi)
      ot_clientes_ex = DATA(lt_clientes_ex).

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'G_NEW_KUNNR_EXT'
      values          = lt_clientes_ex
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.


  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'G_NEW_KUNNR'
*     values          = lt_values
      values          = lt_clientes_hi
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.

  PERFORM crear_objeto_app.
  CLEAR sy-ucomm.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0510  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0510 OUTPUT.
  SET PF-STATUS '100'.
  SET CURSOR FIELD 'G_BARCODE'.
  g_dynpro = '0510'.

  PERFORM crear_objeto_app.
  CLEAR sy-ucomm.

ENDMODULE.
MODULE status_0313 OUTPUT.

  DATA g_text_313 TYPE char30.
  CASE g_dynpro.
    WHEN '0410'.
      g_text_313 = 'y no se convertirá.'.
    WHEN '0510'.
      g_text_313 = 'y no se modificará.'.
    WHEN OTHERS.
      g_text_313 = 'y no se traspasará.'.
  ENDCASE.



ENDMODULE.
MODULE status_0321 OUTPUT.
  CLEAR g_dyn321_txt1.
  g_dyn321_txt1 = 'Se esta ubicando un cabo.'.
ENDMODULE.

MODULE status_0322 OUTPUT.
  CLEAR g_dyn322_txt1.
  g_dyn322_txt1 = 'Bobina de 2ª calidad (DE=R)'.
ENDMODULE.



MODULE exportar_campos_app OUTPUT.

  PERFORM exportar_campos_app.
  DATA: BEGIN OF ls_data,
          key   TYPE char25,
          value TYPE char50,
        END OF ls_data,
        lt_data LIKE STANDARD TABLE OF ls_data.

  DATA lt_fcat TYPE lvc_t_fcat.

  DATA: lo_container TYPE REF TO cl_gui_custom_container,
        lo_alv       TYPE REF TO cl_gui_alv_grid.

  DATA l_container_name TYPE c LENGTH 25.

  l_container_name = |CONTAINER_{ sy-dynnr }|.
  l_container_name = 'CONTAINER'.
  IF lo_container IS NOT BOUND.

    CREATE OBJECT lo_container
      EXPORTING
        container_name              = l_container_name
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.
  ENDIF.

  REFRESH lt_data.
  ls_data-key   = 'Material:'.
  ls_data-value = g_matnr.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Calidad:'.
  ls_data-value = g_calidad.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Grmj/Ancho:'.
  ls_data-value = g_gramaje_ancho.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Lote:'.
  ls_data-value = g_charg.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Cliente:'.
  ls_data-value = g_kunnr.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Peso:'.
  ls_data-value = g_peso_text.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'DE:'.
  ls_data-value = g_decision_empleo.
  APPEND ls_data TO lt_data.

  IF sy-dynnr EQ '0610'.
    ls_data-key   = 'Ubicacion:'.
    ls_data-value = g_ubicacion.
    APPEND ls_data TO lt_data.
  ENDIF.


  IF sy-dynnr EQ '0710'.
    REFRESH lt_data.
    ls_data-key   = 'Almacén:'.
    ls_data-value = g_lgort.
    APPEND ls_data TO lt_data.
    ls_data-key   = 'Cliente:'.
    ls_data-value = g_kunnr.
    APPEND ls_data TO lt_data.
    ls_data-key   = 'Material:'.
    ls_data-value = g_matnr.
    APPEND ls_data TO lt_data.
    ls_data-key   = 'Calidad:'.
    ls_data-value = g_calidad.
    APPEND ls_data TO lt_data.
    ls_data-key   = 'Grmj/Ancho:'.
    ls_data-value = g_gramaje_ancho.
    APPEND ls_data TO lt_data.
  ENDIF.

  IF lo_alv IS NOT BOUND.
    CREATE OBJECT lo_alv
      EXPORTING
        i_parent          = lo_container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.


    REFRESH lt_fcat.
    APPEND VALUE lvc_s_fcat( fieldname = 'KEY' ) TO lt_fcat.
    APPEND VALUE lvc_s_fcat( fieldname = 'VALUE' ) TO lt_fcat.





    DATA ls_layout TYPE lvc_s_layo.

    ls_layout-no_toolbar = abap_true.

    CALL METHOD lo_alv->set_table_for_first_display
      EXPORTING
        is_layout                     = ls_layout
      CHANGING
        it_outtab                     = lt_data
        it_fieldcatalog               = lt_fcat
*       it_sort                       =
*       it_filter                     =
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4.
    IF sy-subrc <> 0.
*   Implement suitable error handling here
    ENDIF.
  ELSE.
*    lo_alv->set_
*    lo_alv->refresh_table_display( ).
    DATA: ls_stable TYPE  lvc_s_stbl.
    CALL METHOD lo_alv->refresh_table_display
      EXPORTING
        is_stable      = ls_stable
        i_soft_refresh = 'X'.
  ENDIF.



ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PBO_CONSULTA_STOCKS_700  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_consulta_stocks_700 OUTPUT.

  DATA g_tipo_stock TYPE char13.

* Desplegable de almacenes
  SELECT ztpp0024~werks ztpp0024~lgort lgobe
             FROM ztpp0024 JOIN t001l
                             ON  ztpp0024~werks EQ t001l~werks
                            AND ztpp0024~lgort EQ t001l~lgort
             INTO TABLE lt_almacenes
             WHERE ztpp0024~werks EQ g_werks AND
                   tipo_almacen   EQ '02'. "Producto acabado

  lt_values =  CORRESPONDING #( lt_almacenes MAPPING key = lgort text = lgobe ).

  LOOP AT lt_values ASSIGNING <fs_alm>.
    <fs_alm>-text = |{ <fs_alm>-key }-{ <fs_alm>-text }|.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'G_LGORT'
      values          = lt_values
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.
  IF g_lgort IS INITIAL.
    g_lgort = '1040'."por defecto se pone el 1040
  ENDIF.

* Desplegable de clientes
  SELECT kna1~kunnr name1
                   FROM kna1 JOIN knb1 ON kna1~kunnr = knb1~kunnr
                   INTO TABLE lt_values
                   WHERE kna1~kunnr LIKE 'C2%' AND bukrs = g_werks.

  LOOP AT lt_values ASSIGNING <fs_values>.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = <fs_values>-key
      IMPORTING
        output = <fs_values>-key.

    <fs_values>-text = |{ <fs_values>-key } { <fs_values>-text }|.
  ENDLOOP.



  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'G_KUNNR'
      values          = lt_values
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.


* Desplegable calidad
  SELECT zcalidad , descrip_corta
    INTO TABLE @DATA(lt_calidades)
    FROM ztpp0035
    WHERE werks = @g_werks AND
          lvorm = ' '.


  REFRESH lt_values.

  DATA ls_values LIKE LINE OF lt_values.

  LOOP AT lt_calidades INTO DATA(ls_calidad).

    CLEAR ls_values.

    ls_values-key  = ls_calidad-zcalidad.
    ls_values-text = ls_calidad-descrip_corta.
    APPEND ls_values TO lt_values.

  ENDLOOP.


*  CLEAR ls_values.
*
*  ls_values-key  = '10101'.
*  ls_values-text = 'FL'.
*  APPEND ls_values TO lt_values.
*
*
*  ls_values-key  = '10102'.
*  ls_values-text = 'SQ'.
*  APPEND ls_values TO lt_values.
*
*  ls_values-key  = '10103'.
*  ls_values-text = 'SQ+'.
*  APPEND ls_values TO lt_values.
*
*
*  ls_values-key  = '10111'.
*  ls_values-text = 'TL1'.
*  APPEND ls_values TO lt_values.
*
*  ls_values-key  = '10112'.
*  ls_values-text = 'TL2'.
*  APPEND ls_values TO lt_values.
*
*  ls_values-key  = '10114'.
*  ls_values-text = 'TL4'.
*  APPEND ls_values TO lt_values.
*
** Nueva calidad añadida CMS 59835 23/03/2020
*  ls_values-key  = '10104'.
*  ls_values-text = 'DU'.
*  APPEND ls_values TO lt_values.

  LOOP AT lt_values ASSIGNING <fs_values>.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = <fs_values>-key
      IMPORTING
        output = <fs_values>-key.

    <fs_values>-text = |{ <fs_values>-key } { <fs_values>-text }|.
  ENDLOOP.



  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'G_CALIDAD'
      values          = lt_values
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.

* Tipo stock

  SELECT * FROM ztsd0004 INTO TABLE @DATA(lt_04) WHERE spras = @sy-langu.

  REFRESH lt_values.



  LOOP AT lt_04 INTO DATA(ls_04).
    ls_values-key = ls_04-zzsegal.
*    CONCATENATE ls_04-zzsegal ls_04-texto INTO ls_values-text SEPARATED BY space.
    ls_values-text = ls_04-texto.
    APPEND ls_values TO lt_values.
  ENDLOOP.
  ls_values-key  = space.
  ls_values-text = 'Bobinas'.
  APPEND ls_values TO lt_values.


  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id              = 'G_TIPO_STOCK'
      values          = lt_values
    EXCEPTIONS
      id_illegal_name = 0
      OTHERS          = 0.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0320  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0320 OUTPUT.

  g_peso_acumulado_txt = |{ g_peso_acumulado DECIMALS = 0 } KG|.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXPORTAR_ALV_APP  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exportar_alv_app OUTPUT.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PBO_ALV_0410  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_alv_0410 OUTPUT.

  l_container_name = |CONTAINER_0410|.

  DATA: lo_container_0410 TYPE REF TO cl_gui_custom_container,
        lo_alv_0410       TYPE REF TO cl_gui_alv_grid.


  REFRESH lt_data.
*  IF o_app->charg IS NOT INITIAL.
  ls_data-key   = 'Material:'.
  ls_data-value = |{ o_app->matnr ALPHA = OUT }|.
  APPEND ls_data TO lt_data.
  ls_data-key   = space.
  ls_data-value = o_app->maktx.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Lote:'.
  ls_data-value = o_app->charg.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Peso:'.
  ls_data-value = o_app->peso_text.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Total KG:'.
  ls_data-value = o_app->peso_acumulado_txt.
  APPEND ls_data TO lt_data.

  REFRESH lt_fcat.
  APPEND VALUE lvc_s_fcat( fieldname = 'KEY' ) TO lt_fcat.
  APPEND VALUE lvc_s_fcat( fieldname = 'VALUE' ) TO lt_fcat.

  IF lo_container_0410 IS NOT BOUND.
    CREATE OBJECT lo_container_0410
      EXPORTING
        container_name              = l_container_name
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    CREATE OBJECT lo_alv_0410
      EXPORTING
        i_parent          = lo_container_0410
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    ls_layout-no_toolbar = abap_true.

    CALL METHOD lo_alv_0410->set_table_for_first_display
      EXPORTING
        is_layout                     = ls_layout
      CHANGING
        it_outtab                     = lt_data
        it_fieldcatalog               = lt_fcat
*       it_sort                       =
*       it_filter                     =
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4.
    IF sy-subrc <> 0.
*   Implement suitable error handling here
    ENDIF.



  ELSE.

    lo_alv_0410->refresh_table_display( ).

  ENDIF.

  CLEAR sy-ucomm.

ENDMODULE.

MODULE pbo_alv_0450 OUTPUT.
  DATA: "lo_container_0410 TYPE REF TO cl_gui_custom_container,
        lo_alv_0450       TYPE REF TO cl_gui_alv_grid.

  l_container_name = |GS_DYN450-CONTAINER|.

*  DATA: lo_container_0410 TYPE REF TO cl_gui_custom_container,
*        lo_alv_0410       TYPE REF TO cl_gui_alv_grid.


  REFRESH lt_data.
*  IF o_app->charg IS NOT INITIAL.
  ls_data-key   = 'Material:'.
  ls_data-value = |{ o_app->matnr ALPHA = OUT }|.
  APPEND ls_data TO lt_data.
  ls_data-key   = space.
  ls_data-value = o_app->maktx.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Lote:'.
  ls_data-value = o_app->charg.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Peso:'.
  ls_data-value = o_app->peso_text.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Total KG:'.
  ls_data-value = o_app->peso_acumulado_txt.
  APPEND ls_data TO lt_data.

  REFRESH lt_fcat.
  APPEND VALUE lvc_s_fcat( fieldname = 'KEY' ) TO lt_fcat.
  APPEND VALUE lvc_s_fcat( fieldname = 'VALUE' ) TO lt_fcat.

*  IF lo_container_0410 IS NOT BOUND.
  IF gs_dyn450-container IS NOT BOUND.
    CREATE OBJECT gs_dyn450-container
      EXPORTING
        container_name              = l_container_name
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

*    CREATE OBJECT lo_alv_0410
    CREATE OBJECT lo_alv_0450
      EXPORTING
        i_parent          = gs_dyn450-container
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    ls_layout-no_toolbar = abap_true.

    CALL METHOD lo_alv_0450->set_table_for_first_display
      EXPORTING
        is_layout                     = ls_layout
      CHANGING
        it_outtab                     = lt_data
        it_fieldcatalog               = lt_fcat
*       it_sort                       =
*       it_filter                     =
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4.
    IF sy-subrc <> 0.
*   Implement suitable error handling here
    ENDIF.



  ELSE.

    lo_alv_0450->refresh_table_display( ).

  ENDIF.

  CLEAR sy-ucomm.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  PBO_ALV_0710  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_0650 OUTPUT.
  g_titulo_650 = |STOCK ORD X UBICACION|.
  IF gt_data_0650 IS INITIAL.

*    CLEAR:
*    linea_1,
*    linea_2,
*    linea_3,
*    linea_4,
*    linea_5,
*    linea_6,
*    linea_7,
*    linea_8,linea_9,linea_0.

    PERFORM obtener_stock.
    IF gt_data_0650 IS INITIAL.
      MESSAGE 'No hay stock para los datos indicados'(018) TYPE 'S' DISPLAY LIKE 'E'.
      LEAVE TO SCREEN 610.
    ENDIF.


  ENDIF.

  PERFORM paginacion_stock_0650.

  CLEAR sy-ucomm.


ENDMODULE.


MODULE pbo_alv_0710 OUTPUT.



  l_container_name = |CONTAINER_0710|.
*  l_container_name = 'CONTAINER'.

  DATA: lo_container_0710 TYPE REF TO cl_gui_custom_container,
        lo_alv_0710       TYPE REF TO cl_gui_alv_grid.


  REFRESH lt_data.
  ls_data-key   = 'Almacén:'.
  ls_data-value = g_lgort.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Cliente:'.
  ls_data-value = g_kunnr.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Material:'.
  ls_data-value = |{ g_matnr ALPHA = OUT }|.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Calidad:'.
  ls_data-value = g_calidad.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Grmj/Ancho:'.
  ls_data-value = g_gramaje_ancho.
  APPEND ls_data TO lt_data.
  ls_data-key   = 'Tipo stock:'.
  SELECT SINGLE texto FROM ztsd0004 INTO ls_data-value WHERE spras = sy-langu AND zzsegal = g_tipo_stock.
  IF sy-subrc NE 0.
    ls_data-value = 'Bobinas'.
  ENDIF.
  APPEND ls_data TO lt_data.

  REFRESH lt_fcat.
  APPEND VALUE lvc_s_fcat( fieldname = 'KEY' ) TO lt_fcat.
  APPEND VALUE lvc_s_fcat( fieldname = 'VALUE' ) TO lt_fcat.

  IF lo_container_0710 IS NOT BOUND.
    CREATE OBJECT lo_container_0710
      EXPORTING
        container_name              = l_container_name
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    CREATE OBJECT lo_alv_0710
      EXPORTING
        i_parent          = lo_container_0710
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    ls_layout-no_toolbar = abap_true.

    CALL METHOD lo_alv_0710->set_table_for_first_display
      EXPORTING
        is_layout                     = ls_layout
      CHANGING
        it_outtab                     = lt_data
        it_fieldcatalog               = lt_fcat
*       it_sort                       =
*       it_filter                     =
      EXCEPTIONS
        invalid_parameter_combination = 1
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4.
    IF sy-subrc <> 0.
*   Implement suitable error handling here
    ENDIF.



  ELSE.

    lo_alv_0710->refresh_table_display( ).

  ENDIF.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PBO_ALV_0720  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_alv_0720 OUTPUT.

  DATA: l_objkey TYPE ausp-objek,
        l_cuobj  TYPE cuobj.

  DATA boton_orden TYPE char20 VALUE 'F2 Ord x peso'.

  l_container_name = |CONTAINER_0720|.

  DATA: lo_container_0720 TYPE REF TO cl_gui_custom_container,
        lo_alv_0720       TYPE REF TO cl_gui_alv_grid.


  DATA:BEGIN OF ls_data_0720,
         charg     TYPE charg_d,
         peso      TYPE char8,
         ubicacion TYPE zzona_ubicacion,
       END OF ls_data_0720,
       lt_data_0720 LIKE STANDARD TABLE OF ls_data_0720.

  CASE g_tipo_stock.
    WHEN ''.
      g_decision_empleo = 'DE       A'.
    WHEN '1'.
      g_decision_empleo = 'DE       A'.
    WHEN '2'.
      g_decision_empleo = 'DE       R'.
    WHEN '3'.
      g_decision_empleo = 'DE       R'.
  ENDCASE.

  CLEAR:
  linea_1,
  linea_2,
  linea_3,
  linea_4,
  linea_5,
  linea_6,
  linea_7,
  linea_8,linea_9,linea_0.

  IF lt_data_0720 IS INITIAL.

    SELECT mchb~matnr, charg FROM mara
             JOIN mchb ON mara~matnr EQ mchb~matnr
             INTO TABLE @DATA(lt_charg)
            WHERE mara~matnr = @g_matnr
              AND werks = @o_app->werks
              AND lgort = @g_lgort
              AND clabs NE 0.

    IF sy-subrc EQ 0.

      SELECT SINGLE atinn INTO @DATA(g_atinn_peso)
                                FROM cabn
                                WHERE atnam = 'Z_PESO'.

      SELECT SINGLE atinn INTO @DATA(g_atinn_ubic)
                                FROM cabn
                                WHERE atnam = 'Z_UBIC_HPAP'.

      SELECT SINGLE atinn INTO @DATA(g_atinn_cliente)
                                FROM cabn
                                WHERE atnam = 'Z_CLIENTE'.
      SELECT SINGLE atinn INTO @DATA(g_atinn_de)
                                FROM cabn
                                WHERE atnam = 'LOBM_UDCODE'.

      LOOP AT lt_charg INTO DATA(ls_charg).

        CLEAR :ls_data_0720.
        ls_data_0720-charg = ls_charg-charg.

        CONCATENATE ls_charg-matnr ls_charg-charg INTO l_objkey .

        SELECT SINGLE cuobj INTO l_cuobj FROM inob
                           WHERE objek = l_objkey AND obtab = 'MCH1'.

        SELECT SINGLE atflv INTO @DATA(l_peso) FROM ausp
                           WHERE objek = @l_cuobj AND atinn = @g_atinn_peso
                                                  AND klart = '023'.

        SELECT SINGLE atwrt INTO @DATA(l_ubic) FROM ausp
                           WHERE objek = @l_cuobj AND atinn = @g_atinn_ubic
                                                  AND klart = '023'.
        IF l_ubic IS INITIAL OR sy-subrc NE 0.
          l_ubic = '0000'.
        ENDIF.

        SELECT SINGLE atwrt INTO @DATA(l_de) FROM ausp
                           WHERE objek = @l_cuobj AND atinn = @g_atinn_de
                                                  AND klart = '023'.

        IF l_de NE g_decision_empleo AND g_decision_empleo IS NOT INITIAL..
          CONTINUE.
        ENDIF.

        SELECT SINGLE atwrt INTO @DATA(l_kunnr2) FROM ausp
                            WHERE objek = @l_cuobj AND atinn = @g_atinn_cliente
                                                   AND klart = '023'.
        IF sy-subrc NE 0.
          CONTINUE.
        ENDIF.
        IF l_kunnr2 NE g_kunnr AND g_kunnr IS NOT INITIAL..
          CONTINUE.
        ENDIF.
        ls_data_0720-peso        = |{ l_peso DECIMALS = 0 } KG|.
        ls_data_0720-ubicacion   = l_ubic.
*        DO 50 TIMES.
*          ls_data_0720-ubicacion = sy-index.
*          IF sy-index = 3.
*            ls_Data_0720-peso = '27 KG'.
*          elseif sy-index = 5 .
*            ls_Data_0720-peso = '4327 KG'.
*          elseif sy-index  = 7.
*            ls_Data_0720-peso = '54327 KG'.
*          else.
*            ls_data_0720-ubicacion = sy-index.
*          endif.

        APPEND ls_data_0720 TO lt_data_0720.
*        ENDDO.
      ENDLOOP.
    ENDIF.

  ENDIF.


  CASE boton_orden.
    WHEN 'F2 Ord x peso'.
      g_titulo_720 = 'STOCK ORD X LOTE'.
      SORT lt_data_0720 BY charg peso AS TEXT ASCENDING ubicacion ASCENDING.
    WHEN 'F2 Ord x ubic'.
      g_titulo_720 = 'STOCK ORD X PESO'.
      SORT lt_data_0720 BY peso AS TEXT ASCENDING.
    WHEN 'F2 Ord x lote'.
      g_titulo_720 = 'STOCK ORD X UBICACION'.
      SORT lt_data_0720 BY ubicacion ASCENDING.
  ENDCASE.




  IF lt_data_0720 IS INITIAL.
    MESSAGE 'No hay stock para los datos indicados'(018) TYPE 'S' DISPLAY LIKE 'E'.
    LEAVE TO SCREEN 700.
  ENDIF.

  l_pag = lines( lt_data_0720 ) / 10.

  IF l_pag LE 1.
    DATA(g_paginas_0720) = 0.
  ELSE.
    g_paginas_0720 = trunc( l_pag ) .
  ENDIF.

  DATA g_pagina_actual_0720  TYPE i VALUE 0.
  DATA g_linea_actual_0720  TYPE i VALUE 0.
  DATA g_linea_actual_0720_max  TYPE i VALUE 0.

  IF g_pagina_actual_0720 = 0.
    g_linea_actual_0720 = 0.
  ELSE.
    g_linea_actual_0720 = ( g_pagina_actual_0720 * 10 ) + 1.
  ENDIF.
  g_linea_actual_0720_max = g_linea_actual_0720 + 10.

  DATA l_linea     TYPE char10.
  DATA l_index_tab TYPE n LENGTH 1.
  DATA l_spaces    TYPE char8.

  l_index_tab = 0.
  LOOP AT lt_data_0720 INTO ls_data_0720 FROM g_linea_actual_0720 TO g_linea_actual_0720_max.

    CONCATENATE 'LINEA_' l_index_tab INTO l_linea.
    ASSIGN (l_linea) TO FIELD-SYMBOL(<fs_720>).
    IF <fs_720> IS ASSIGNED .
      <fs_720> = |{ ls_data_0720-charg }        { ls_data_0720-peso }       { ls_data_0720-ubicacion }|.
    ENDIF.
    ADD 1 TO l_index_tab .
  ENDLOOP.

ENDMODULE.



MODULE status_20_clear_rec OUTPUT.

  CLEAR : g_id_receta , gs_datos_receta , gt_consumo_receta , gw_pulper_cons.

ENDMODULE.
MODULE status_30 OUTPUT.

  LOOP AT SCREEN.

    IF screen-group1 = 'ZPI'.
      CASE zcl_utils_hpap_pp=>get_flag_ztpp0032( i_werks = g_werks i_apl = 'BOTON_MENU_NUEVO_PICKING' ).
        WHEN ' '.
        WHEN 'X'.
          screen-invisible = 1.
          MODIFY SCREEN.

        WHEN OTHERS.
      ENDCASE.

    ENDIF.


  ENDLOOP.

ENDMODULE.

MODULE status_0800 OUTPUT.

  SET CURSOR FIELD 'G_ID_RECETA'. .

  CASE gw_pulper_cons.
    WHEN 'C'. gs_dyn800-titulo = 'CONSULTAR RECETA'.
    WHEN 'P'. gs_dyn800-titulo = 'TRASPASO RECORTE A PULPER'.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.

MODULE status_0810 OUTPUT.

  CLEAR gs_dyn810.
  gs_dyn810-desc_rec1 = gs_datos_receta-descr_rec(45).

  gs_dyn810-observ1   = gs_datos_receta-observaciones(45).

  LOOP AT SCREEN.
    CASE gw_pulper_cons.
      WHEN 'C'. "Consulta consumo
        IF screen-group1 = 'NOP'.
          screen-invisible = 1.
          MODIFY SCREEN.
        ENDIF.
      WHEN 'P'. "Tratamiento traspaso a pulper
        IF screen-group1 = 'NOC'.
          screen-invisible = 1.
          MODIFY SCREEN.
        ENDIF.
    ENDCASE.
  ENDLOOP.

  CASE gw_pulper_cons.
    WHEN 'C'. gs_dyn810-titulo = 'CONSULTAR RECETA'.
    WHEN 'P'. gs_dyn810-titulo = 'TRASPASO RECORTE A PULPER'.
    WHEN OTHERS.
  ENDCASE.

ENDMODULE.

MODULE status_0820 OUTPUT.
  CLEAR: gs_dyn820.

  FIELD-SYMBOLS: <fs_desc> LIKE gs_dyn820-desc_mat1.

  PERFORM obtener_datos_dyn820.

  LOOP AT SCREEN.
    IF screen-name CS 'GS_DYN820-DESC_MAT'.

      DATA(l_var) = |{ screen-name }|.
      ASSIGN (l_var) TO <fs_desc>.
      IF <fs_desc> IS INITIAL.

        screen-invisible = 1.
        MODIFY SCREEN.

      ENDIF.
    ENDIF.


  ENDLOOP.

ENDMODULE.

*MODULE status_0821 OUTPUT.
*
*  DATA: BEGIN OF ls_data821,
*          desc_mat TYPE  char10,
*          porc_cic TYPE  numc2,
*          porc_rea TYPE  numc2,
*          icon     TYPE  char1,
*          porc_dif TYPE  zpp_numc2,
**          color    TYPE  char1,
*        END OF ls_data821,
*        lt_data821 LIKE STANDARD TABLE OF ls_data821.
*
*  DATA lt_fcat821 TYPE lvc_t_fcat.
*
*  DATA: lo_container_0821 TYPE REF TO cl_gui_custom_container,
*        lo_alv_0821       TYPE REF TO cl_gui_alv_grid.
*
*  CLEAR lt_data821.
*  LOOP AT gt_consumo_receta INTO DATA(ls_consumo).
*    APPEND INITIAL LINE TO lt_data821 ASSIGNING FIELD-SYMBOL(<fs_821>).
*    TRY.
*        <fs_821>-desc_mat   =  zclpp_consumo_recetas_mp=>gt_mp[ matnr = ls_consumo-matnr ]-descrip_rf.
*
*      CATCH cx_root .
*        DATA(l_mat_orig)   =  zclpp_consumo_recetas_mp=>gt_mp_eq[ matnr_equiv = ls_consumo-matnr ]-matnr_mp.
*        <fs_821>-desc_mat  =  zclpp_consumo_recetas_mp=>gt_mp[ matnr = l_mat_orig ]-descrip_rf.
*
*    ENDTRY.
*    <fs_821>-porc_dif   =  ls_consumo-porc_dif.
*    <fs_821>-porc_cic   =  ls_consumo-porc_ciclo.
*    <fs_821>-porc_rea   =  ls_consumo-porc_real.
*
*    IF ls_consumo-porc_dif < 0. "Calculamos valor absoluto para comprar con tolerancia
*      DATA(l_dif_abs2) = ls_consumo-porc_dif * -1.
*    ELSE.
*      l_dif_abs2 = ls_consumo-porc_dif.
*    ENDIF.
*
** Si diferencia > tolerancia, pintamos punto rojo
*    DATA: gs_colinfo TYPE LINE OF lvc_t_scol.
*
*    IF l_dif_abs2 > ls_consumo-tolerancia.
*      <fs_821>-icon = 'X'.
*    ELSE.
*      <fs_821>-icon = ' '.
*    ENDIF.
*
*  ENDLOOP.
*
**  CALL METHOD lo_container_0821->free.
**  CALL METHOD lo_alv_0821->free.
**  FREE: lo_container_0821 , lo_alv_0821.
*
*
*  IF lo_container_0821 IS NOT BOUND.
*    CLEAR lt_fcat821[].
*    APPEND VALUE lvc_s_fcat( fieldname = 'DESC_MAT'
*                             scrtext_s = 'Material'
*                             txt_field = 'Material' ) TO lt_fcat821.
*    APPEND VALUE lvc_s_fcat( fieldname = 'PORC_DIF'
*                             scrtext_s = 'Dif'
*                             txt_field = 'Dif' ) TO lt_fcat821.
*    APPEND VALUE lvc_s_fcat( fieldname = 'ICON' " icon = 'X'
*                             scrtext_s = ''
*                             txt_field = '' ) TO lt_fcat821.
*    APPEND VALUE lvc_s_fcat( fieldname = 'PORC_CIC'
*                             scrtext_s = '%C'
*                             txt_field = '%C' ) TO lt_fcat821.
*    APPEND VALUE lvc_s_fcat( fieldname = 'PORC_REA'
*                             scrtext_s = '%R'
*                             txt_field = '%R') TO lt_fcat821.
*
*    l_container_name = |CONTAINER22|.
*
*    CREATE OBJECT lo_container_0821
*      EXPORTING
*        container_name              = l_container_name
*      EXCEPTIONS
*        cntl_error                  = 1
*        cntl_system_error           = 2
*        create_error                = 3
*        lifetime_error              = 4
*        lifetime_dynpro_dynpro_link = 5
*        OTHERS                      = 6.
*    IF sy-subrc <> 0.
*      RETURN.
*    ENDIF.
*
*    CREATE OBJECT lo_alv_0821
*      EXPORTING
*        i_parent          = lo_container_0821
*      EXCEPTIONS
*        error_cntl_create = 1
*        error_cntl_init   = 2
*        error_cntl_link   = 3
*        error_dp_create   = 4
*        OTHERS            = 5.
*    IF sy-subrc <> 0.
*      RETURN.
*    ENDIF.
*
*    CLEAR ls_layout.
*    ls_layout-no_toolbar = abap_true.
*    ls_layout-cwidth_opt = abap_true.
**    ls_layout-ctab_fname     = 'COLOR'.
**    ls_lvc_s_layo-ctab_fname = 'COLOR'.
*
*    CALL METHOD lo_alv_0821->set_table_for_first_display
*      EXPORTING
*        is_layout                     = ls_layout
*      CHANGING
*        it_outtab                     = lt_data821
*        it_fieldcatalog               = lt_fcat821
**       it_sort                       =
**       it_filter                     =
*      EXCEPTIONS
*        invalid_parameter_combination = 1
*        program_error                 = 2
*        too_many_lines                = 3
*        OTHERS                        = 4.
*    IF sy-subrc <> 0.
**   Implement suitable error handling here
*    ENDIF.
*
*  ELSE.
*
*    lo_alv_0821->refresh_table_display( ).
*
*  ENDIF.
*
*
*
*
*ENDMODULE.

MODULE status_0825 OUTPUT.



  CLEAR gs_dyn825.

  CASE g_aviso_d_r_t.
    WHEN 'R' OR 'Z'.
      gs_dyn825-txt1 = 'ATENCIÓN'.
      gs_dyn825-txt2 = 'Receta inactiva'.
    WHEN 'D'.
      gs_dyn825-txt1 = 'ATENCIÓN'.
      gs_dyn825-txt2 = 'Receta con '.
      gs_dyn825-txt3 = 'desviación en el turno'.

    WHEN 'T'.
      gs_dyn825-txt1 = 'ATENCIÓN'.
      gs_dyn825-txt2 = 'Cambio de turno'.
    WHEN 'M'.
      gs_dyn825-txt1 = 'ATENCIÓN'.
      gs_dyn825-txt2 = 'El material no existe'.
      gs_dyn825-txt3 = 'en la receta'.
    WHEN OTHERS.
  ENDCASE.


* Para "Receta no activa" se mostrará F3, para el resto de avisos, no
  IF g_aviso_d_r_t = 'D' OR
     g_aviso_d_r_t = 'T' OR
     g_aviso_d_r_t = 'R'  .

    LOOP AT SCREEN.
      IF screen-group1 = 'CAN'.
        screen-invisible = '1'.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.

  ENDIF.
ENDMODULE.


MODULE status_pbo_999 OUTPUT.
*  SET PF-STATUS '100'.
*  SET TITLEBAR '10'.
*  CLEAR g_barcode.

*DATA :
*  icon_result  TYPE icons-text,
*  icon_name(20) TYPE c,
*  icon_text(20) TYPE c,
*  icon_info LIKE icont-quickinfo.

  icon_name = 'ICON_GREEN_LIGHT'.
  icon_text =  sy-uname.
  icon_info = 'Employee Name'.
*
  CALL FUNCTION 'ICON_CREATE'
    EXPORTING
      name                  = icon_name
      text                  = icon_text
      info                  = icon_info
      add_stdinf            = ' '
    IMPORTING
      result                = gs_dyn999-ic1
    EXCEPTIONS
      icon_not_found        = 1
      outputfield_too_short = 2
      OTHERS                = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.




*  gs_dyn999-ic1 = '@C9@'.
  gs_dyn999-ic2 = '@I5@'.
  gs_dyn999-ic3 = '@ED@'.
  gs_dyn999-ic4 = '@N4@'.
  gs_dyn999-ic5 = '@06@'.
  gs_dyn999-ic6 = '@9Y@'.
*  gs_dyn999-ic7 = '@9Y@'.
*  gs_dyn999-ic8 = '@9Y@'.

*  SELECT SINGLE parva INTO g_werks FROM usr05
*  WHERE bname = sy-uname AND parid = 'WRK'.
*
*  PERFORM crear_objeto_app.

  LOOP AT SCREEN.
    IF screen-group4 CS 'VER'.

*      DATA(l_var) = |{ screen-name }|.
*      ASSIGN (l_var) TO <fs_desc>.
*      IF <fs_desc> IS INITIAL.

      screen-invisible = 1.
      MODIFY SCREEN.

*      ENDIF.
    ENDIF.


  ENDLOOP.



ENDMODULE.
