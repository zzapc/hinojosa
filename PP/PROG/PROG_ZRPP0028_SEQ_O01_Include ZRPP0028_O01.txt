*&---------------------------------------------------------------------*
*&  Include           ZRPP0028_O01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  STATUS_0400  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0400 OUTPUT.
  SET PF-STATUS '0400'.
  SET TITLEBAR '0400'.

  DATA: l_erdat TYPE erdat,
        l_hora1 TYPE char10,
        l_hora2 TYPE char10
        .
  DATA: lv_hora_desde(8),
        lv_hora_hasta(8),
        lw_28s           TYPE flag,
        l_numfabr_alpha  TYPE char5.

  DATA: prog TYPE sy-repid.


  GET PARAMETER ID: 'ZAUFNR_SEQ'       FIELD wa_datos_sel-aufnr,
                    'ZWERKS'           FIELD wa_datos_sel-werks,
                    'ZTURNO'           FIELD gv_turno,
                    'Z28S'             FIELD lw_28s,
                    'ZFABR'            FIELD l_numfabr_alpha,
                    'Z_OPERARIO'       FIELD gv_nombre_oper,
                    'Z_CONTRAMA'       FIELD gv_nombre_contr.

  gv_num_fabr = l_numfabr_alpha.

  LOOP AT SCREEN.
    IF screen-group1 = 'NUF'.
      IF  lw_28s = ' '.
        screen-invisible = 1.
        screen-active    = 0.
      ELSE.
        screen-invisible = 0.
        screen-active    = 1.
      ENDIF.
    ENDIF.
  ENDLOOP.

  gv_werks = wa_datos_sel-werks.
  gv_aufnr = wa_datos_sel-aufnr.

  PERFORM  cambio_aufnr.

  SELECT SINGLE observaciones
    FROM ztpp0009
    INTO wa_datos_sel-observaciones
    WHERE werks         = gv_werks
          AND aufnr     = gv_aufnr
          and num_fabr  = gv_num_fabr.

  SELECT SINGLE erdat INTO l_erdat FROM aufk WHERE aufnr = wa_datos_sel-aufnr.

* Obtenemos el descriptivo ( hora_desde + hora_hasta )
  SELECT SINGLE hora_desde , hora_hasta
    FROM zpp_turno
    INTO ( @DATA(l_hora_desde) , @DATA(l_hora_hasta) )
    WHERE turno = @gv_turno.
  IF sy-subrc = 0.
    WRITE l_hora_desde TO l_hora1 USING EDIT MASK '__:__:__'.
    WRITE l_hora_hasta TO l_hora2 USING EDIT MASK '__:__:__'.
    gv_rango_horas = |{ l_hora1  } - { l_hora2 }|.
  ENDIF.

  PERFORM obtener_datos_400.

  IF gt_datos_400[] IS NOT INITIAL.
    PERFORM mostrar_datos_0400.
  ELSEIF gr_grid_400 IS NOT INITIAL.
    CALL METHOD gr_grid_400->refresh_table_display.
  ENDIF.

ENDMODULE.                 " STATUS_0400  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  HABILITAR_BOTONES_0400  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE habilitar_botones_0400 OUTPUT.
  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'BACK'.
        screen-active = '0'.
    ENDCASE.
    MODIFY SCREEN.
  ENDLOOP.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0500  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE  status_0500 OUTPUT.
  SET PF-STATUS '0500'.
  SET TITLEBAR 'DEF' WITH gs_k_dyn500-charg.

  DATA: go_container_1    TYPE REF TO cl_gui_custom_container,
        go_container_2    TYPE REF TO cl_gui_custom_container,
        go_container_3    TYPE REF TO cl_gui_custom_container,
        go_container_text TYPE REF TO cl_gui_custom_container.

  DATA: go_img_tramo_lt TYPE REF TO cl_gui_picture,
        go_img_tramo_c  TYPE REF TO cl_gui_picture,
        go_img_tramo_lc TYPE REF TO cl_gui_picture.

  DATA url TYPE cndp_url.

  DATA: graphic_url(255).
  DATA: BEGIN OF graphic_table OCCURS 0,
          line(255) TYPE x,
        END OF graphic_table.
  DATA: l_graphic_conv TYPE i.
  DATA: l_graphic_offs TYPE i.
  DATA: graphic_size TYPE i.
  DATA: l_graphic_xstr TYPE xstring.

  DATA:    gt_list          TYPE vrm_values,
           gs_value         LIKE LINE OF gt_list,
           l_variable_name  TYPE vrm_id,
           lt_variable_name TYPE TABLE OF vrm_id.

  SET CURSOR FIELD gs_dyn500-sin_defectos.

  IF go_container_1 IS NOT BOUND.


    CREATE OBJECT go_container_1
      EXPORTING
        container_name = 'CONTAINER_TRAMO_LT'.
    CREATE OBJECT go_container_2
      EXPORTING
        container_name = 'CONTAINER_TRAMO_C'.
    CREATE OBJECT go_container_3
      EXPORTING
        container_name = 'CONTAINER_TRAMO_LC'.

    CREATE OBJECT go_img_tramo_lt
      EXPORTING
        parent = go_container_1.
    CREATE OBJECT go_img_tramo_c
      EXPORTING
        parent = go_container_2.
    CREATE OBJECT go_img_tramo_lc
      EXPORTING
        parent = go_container_3.

    CALL METHOD cl_ssf_xsf_utilities=>get_bds_graphic_as_bmp
      EXPORTING
        p_object       = 'GRAPHICS'
        p_name         = 'ZLOGO_TRAMO_BOBINA_SIMPLE'
        p_id           = 'BMAP'
        p_btype        = 'BCOL'
      RECEIVING
        p_bmp          = l_graphic_xstr
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.

    graphic_size = xstrlen( l_graphic_xstr ).
    l_graphic_conv = graphic_size.
    l_graphic_offs = 0.
    WHILE l_graphic_conv > 255.
      graphic_table-line = l_graphic_xstr+l_graphic_offs(255).
      APPEND graphic_table.
      l_graphic_offs = l_graphic_offs + 255.
      l_graphic_conv = l_graphic_conv - 255.
    ENDWHILE.
    graphic_table-line = l_graphic_xstr+l_graphic_offs(l_graphic_conv).
    APPEND graphic_table.

    CALL FUNCTION 'DP_CREATE_URL'
      EXPORTING
        type     = 'IMAGE'
        subtype  = 'X-UNKNOWN'
        size     = graphic_size
        lifetime = 'T'
      TABLES
        data     = graphic_table
      CHANGING
        url      = url.

    IF sy-subrc = 0.
      CALL METHOD go_img_tramo_c->load_picture_from_url_async
        EXPORTING
          url = url.
      CALL METHOD go_img_tramo_c->set_display_mode
        EXPORTING
          display_mode = cl_gui_picture=>display_mode_fit_center.
      CALL METHOD go_img_tramo_lc->load_picture_from_url_async
        EXPORTING
          url = url.
      CALL METHOD go_img_tramo_lc->set_display_mode
        EXPORTING
          display_mode = cl_gui_picture=>display_mode_fit_center.
      CALL METHOD go_img_tramo_lt->load_picture_from_url_async
        EXPORTING
          url = url.
      CALL METHOD go_img_tramo_lt->set_display_mode
        EXPORTING
          display_mode = cl_gui_picture=>display_mode_fit_center.
    ENDIF.

*   Seleccion motivos PULPER
    SELECT * FROM zvpp_carac_recha INTO TABLE @DATA(lt_zvpp_carac_recha).
    LOOP AT lt_zvpp_carac_recha INTO DATA(ls_zvpp_carac_recha).
      gs_value-key  = ls_zvpp_carac_recha-atzhl.
      gs_value-text = ls_zvpp_carac_recha-atwtb.
      APPEND gs_value TO gt_list.
    ENDLOOP.


*
    APPEND:  'GS_DYN500-DEFECTO1'    TO lt_variable_name,
             'GS_DYN500-DEFECTO2'    TO lt_variable_name,
             'GS_DYN500-DEFECTO3'    TO lt_variable_name.

    LOOP  AT lt_variable_name INTO l_variable_name.
      CALL FUNCTION 'VRM_SET_VALUES'
        EXPORTING
          id     = l_variable_name
          values = gt_list.
    ENDLOOP.

    DATA:  lt_bapiret2       TYPE STANDARD TABLE OF bapiret2.
*Motivos Pulper.
    CALL FUNCTION 'BAPI_CHARACT_GETDETAIL'
      EXPORTING
        charactname        = 'Z_DEFECTOS'
        keydate            = sy-datum
        language           = sy-langu
      TABLES
        charactvaluesdescr = gt_values_defectos
        return             = lt_bapiret2.

    IF line_exists( lt_bapiret2[ type = 'E' ] ).
    ENDIF.

    CLEAR gt_list[].
    LOOP AT gt_values_defectos INTO DATA(l_values_charact).
      CLEAR gs_value.
      gs_value-key  = l_values_charact-value_char.
      gs_value-text = l_values_charact-description.
      APPEND gs_value TO gt_list.
    ENDLOOP.

    CLEAR: lt_variable_name.
    APPEND: 'GS_DYN500-DEFECTO1_LC' TO lt_variable_name,
            'GS_DYN500-DEFECTO2_LC' TO lt_variable_name,
            'GS_DYN500-DEFECTO3_LC' TO lt_variable_name,
            'GS_DYN500-DEFECTO1_LT' TO lt_variable_name,
            'GS_DYN500-DEFECTO2_LT' TO lt_variable_name,
            'GS_DYN500-DEFECTO3_LT' TO lt_variable_name,
            'GS_DYN500-DEFECTO1_C'  TO lt_variable_name,
            'GS_DYN500-DEFECTO2_C'  TO lt_variable_name,
            'GS_DYN500-DEFECTO3_C'  TO lt_variable_name.

    LOOP  AT lt_variable_name INTO l_variable_name.
      CALL FUNCTION 'VRM_SET_VALUES'
        EXPORTING
          id     = l_variable_name
          values = gt_list.
    ENDLOOP.

*   Contenedeor de observaciones
    CREATE OBJECT go_container_text
      EXPORTING
        container_name = 'CONTAINER_TEXTO'.


    go_textedit = NEW cl_gui_textedit( parent = go_container_text ).
    go_textedit->set_toolbar_mode( 0 ).

  ENDIF.

  IF g_onlyread_dyn500 = 'X'.
    go_textedit->set_readonly_mode( 1 ).
  ELSE.
    go_textedit->set_readonly_mode( 0 ).
  ENDIF.

  DATA: lt_lines TYPE STANDARD TABLE OF tdline.

  IF gs_dyn500 IS INITIAL AND gw_first_time500 = abap_true.

    gw_first_time500 = abap_false.
    gs_k_dyn500-aufnr = |{ gs_k_dyn500-aufnr ALPHA = IN }|.


    SELECT SINGLE *
      FROM ztpp0030
      INTO CORRESPONDING FIELDS OF gs_dyn500
      WHERE aufnr = gs_k_dyn500-aufnr AND
            matnr = gs_k_dyn500-matnr AND
            charg = gs_k_dyn500-charg.

    CLEAR lt_lines[].

    SELECT  tdline
      FROM ztpp0031
      APPENDING TABLE @lt_lines
      WHERE aufnr   = @gs_k_dyn500-aufnr AND
            matnr   = @gs_k_dyn500-matnr AND
            charg   = @gs_k_dyn500-charg AND
            tp_ubic = ' '
      ORDER BY aufnr, matnr , charg , seq ASCENDING
            .

    IF sy-subrc = 0.

      CALL METHOD go_textedit->set_text_as_r3table
        EXPORTING
          table           = lt_lines
        EXCEPTIONS
          error_dp        = 1
          error_dp_create = 2
          OTHERS          = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

    ENDIF.

    gs_dyn500_cpy = gs_dyn500.

  ENDIF.

  IF gs_dyn500-sin_defectos = 'X'.
    CLEAR: gs_dyn500-bob_pulper_total , gs_dyn500-bob_pulper_parcial,
        gs_dyn500-defecto1,
        gs_dyn500-defecto2,
        gs_dyn500-defecto3,
        gs_dyn500-defecto1_lt,
        gs_dyn500-defecto2_lt,
        gs_dyn500-defecto3_lt,
        gs_dyn500-defecto1_lc,
        gs_dyn500-defecto2_lc ,
        gs_dyn500-defecto3_lc,
        gs_dyn500-defecto1_c,
        gs_dyn500-defecto2_c,
        gs_dyn500-defecto3_c,
        gs_dyn500-defecto_ancho_lt,
        gs_dyn500-defecto_ancho_c,
        gs_dyn500-defecto_ancho_lc
        .
  ENDIF.

* Control para bloquear campos de Defectos cuando se activa "Sin defectos".
  LOOP AT SCREEN.
    IF g_onlyread_dyn500 = 'X'.
      check screen-name <> 'BACK'.
      screen-input   = 0.

    ELSE.

      IF screen-group1 EQ 'OUT'.
        IF gs_dyn500-sin_defectos = 'X'.
          screen-input   = 0.
        ELSE.
          screen-input   = 1.
        ENDIF.
      ENDIF.

      IF screen-group1 EQ 'NOC'.
        IF gw_out_dyn500 = 'X'.
          screen-active   = 1.
        ELSE.
          screen-active   = 0.
        ENDIF.
      ENDIF.

    ENDIF.

    MODIFY SCREEN.
  ENDLOOP.

ENDMODULE.
