***********************************************************************
* TIPO : LISTADO
* TITULO : Informe reprocesos
* DESCRIPCION : Informe reprocesos
*
* AUTOR: Andrés Picazo                                FECHA: 13/03/2025
* ANALISTA: Nuria Lorenzo Castillo
*
***********************************************************************
REPORT zrpp0093.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES qals.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_alv FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check          TYPE xfeld,
             lights         TYPE zico_estado_mensaje,
             prueflos       TYPE qals_d02-prueflos,
             aufnr          TYPE qals_d02-aufnr,
             werk           TYPE qals-werk,
             ersteldat      TYPE qals_d02-ersteldat,
             losmenge       TYPE qals_d02-losmenge,
             lmenge02       TYPE qals_d02-lmenge02,
             lmenge01       TYPE qals_d02-lmenge01,
             fecod          TYPE qfaai-fecod,
             txtcd          TYPE qfaai-txtcd,
             zzlenum        TYPE qals_d02-zzlenum,
             matnr          TYPE qals_d02-matnr,
             charg          TYPE charg_d,
             zzkunnr1       TYPE qals_d02-zzkunnr1,
             zzname1        TYPE qals_d02-zzname1,
             ktextmat       TYPE qals_d02-ktextmat,
             kont_kdauf     TYPE qals-kont_kdauf,
             kont_kdpos     TYPE qals-kont_kdpos,
             bwart          TYPE qals-bwart,
             zzpisos_alt    TYPE qals_d02-zzpisos_alt,
             zzpaq_base     TYPE qals_d02-zzpaq_base,
             zzqmorigen     TYPE qals_d02-zzqmorigen,
             zzoperario     TYPE qals_cust-zzoperario,
             zztiemporep    TYPE qals_cust-zztiemporep,
             vdatum         TYPE qals_d02-vdatum,
             gwemg          TYPE caufvd-gwemg,
             ruta           TYPE zruta,
             pvp_1000_cajas TYPE zrpp0086_s_alv-pvp_1000_cajas,
             board          TYPE zrpp0086_s_alv-board,
             gbdes          TYPE zrpp0086_s_alv-gbdes,
             flute          TYPE zrpp0086_s_alv-flute,
             kunnr          TYPE zrpp0086_s_alv-kunnr,
             ablag          TYPE zrpp0086_s_alv-ablag,
             shtgw          TYPE zrpp0086_s_alv-shtgw,
             shtgl          TYPE zrpp0086_s_alv-shtgl,
             noupt          TYPE zrpp0086_s_alv-noupt,
             tbqty          TYPE zrpp0086_s_alv-tbqty,
             rutas_not      TYPE string,
             prqty_stack    TYPE zrpp0086_s_alv-prqty_stack,
             message        TYPE bapi_msg,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv ##NEEDED.

    METHODS  main.

    METHODS: listado,
             seleccionar_datos.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA o_prog TYPE REF TO zcl_report.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE TEXT-sel.
  SELECT-OPTIONS: s_werks FOR qals-werk,
                  s_pruef FOR qals-prueflos,
                  s_aufnr FOR qals-aufnr,
                  s_erste FOR qals-ersteldat,
                  s_matnr FOR qals-matnr,
                  s_kunnr FOR qals-zzkunnr1,
                  s_art   FOR qals-art,
                  s_herku FOR qals-herkunft.
  SELECTION-SCREEN SKIP 1.
  PARAMETERS p_precio AS CHECKBOX.
  SELECTION-SCREEN SKIP 1.
  PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b01.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    " TODO: variable is assigned but only used in commented-out code (ABAP cleaner)
    DATA l_list TYPE o_prog->t_listado.

    l_list = list.
    CASE column.
*      WHEN 'BUKRS'.
*        MESSAGE l_list-bukrs TYPE 'I'.
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    check_ucomm_sel = 'F01'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'F01'.
        " TODO: variable is assigned but never used (ABAP cleaner)
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
* TO DO!
        ENDLOOP.
        IF sy-subrc = 0.
          refresh( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    TYPES: BEGIN OF t_fact,
             matnr          TYPE matnr,
             werks          TYPE werks_d,
             kunnr          TYPE kunnr,
             vbeln          TYPE vbeln_va,
             posnr          TYPE posnr,
             knumv          TYPE vbak-knumv,
             pvp_1000_cajas TYPE konv-kbetr,
           END OF t_fact.

    DATA r_matnr_auf TYPE RANGE OF matnr.
    DATA: r_matnr TYPE RANGE OF matnr,
          r_werks TYPE RANGE OF werks_d.
    DATA: i_fact TYPE STANDARD TABLE OF t_fact WITH KEY matnr werks,
          qmfel  TYPE qmfel.

    sgpi_texto( 'Seleccionando lotes de inspección' ).

* Si han filtrado por orden de fabricación, como no la tenemos siempre en QALS, se filtra por material
    IF NOT s_aufnr[] IS INITIAL.
      SELECT DISTINCT plnbez FROM afko
          INTO TABLE @DATA(i_afko)
         WHERE aufnr IN @s_aufnr.
      LOOP AT i_afko ASSIGNING FIELD-SYMBOL(<afko>).
        IF <afko>-plnbez IS NOT INITIAL.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = <afko>-plnbez ) TO r_matnr_auf.
        ENDIF.
      ENDLOOP.
    ENDIF.

    SELECT * FROM qals
      INTO CORRESPONDING FIELDS OF TABLE i_listado
     WHERE werk      IN s_werks
       AND prueflos  IN s_pruef
*       AND aufnr     IN s_aufnr
       AND matnr     IN r_matnr_auf
       AND ersteldat IN s_erste
       AND matnr     IN s_matnr
       AND zzkunnr1  IN s_kunnr
       AND art       IN s_art
       AND herkunft  IN s_herku
    ORDER BY PRIMARY KEY.

    LOOP AT i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE NOT matnr IS INITIAL AND NOT werk IS INITIAL.
      IF NOT line_exists( r_matnr[ low = <listado>-matnr ] ).
        APPEND VALUE #( option = 'EQ' sign = 'I' low = <listado>-matnr ) TO r_matnr.
      ENDIF.
      IF NOT line_exists( r_werks[ low = <listado>-werk ] ).
        APPEND VALUE #( option = 'EQ' sign = 'I' low = <listado>-werk ) TO r_werks.
      ENDIF.
    ENDLOOP.

    IF NOT r_matnr IS INITIAL.
      sgpi_texto( 'Seleccionando datos del configurador' ).
      SELECT marc~werks, marc~matnr, marc~cuobj,
             yhp_idx_td110~cself, yhp_idx_td110~p_matnr AS matnr_semi, yhp_idx_td110~mboar, yhp_idx_td110~board,
             yhp_idx_td110~gbdes, yhp_idx_td110~flute, yhp_idx_td110~caliper,  yhp_idx_td110~caliper_uom,
             yhp_idx_td110~sidrp, yhp_idx_td110~sidrp_uom
        FROM marc LEFT OUTER JOIN yhp_idx_td110 ON yhp_idx_td110~cuobj = marc~cuobj
        INTO TABLE @DATA(i_mat_td110)
       WHERE matnr IN @r_matnr
         AND werks IN @r_werks
       ORDER BY matnr, werks, cself.

      SELECT marc~werks, marc~matnr, marc~cuobj,
             prsty,      prole,      prole_uom,  prowi,  prowi_uom,
             prohe, prohe_uom,  fscty,      obser,      tdcut,  dcutt,
             noupt, ablag,      ablag_uom,  shtgl,  shtgl_uom,
             shtgw, shtgw_uom,  gualdera,   gualdera_uom,
             wwenp, wwenp_uom
        INTO TABLE @DATA(i_mat_td100)
        FROM marc LEFT OUTER JOIN yhp_idx_td100 ON yhp_idx_td100~cuobj = marc~cuobj
         WHERE matnr IN @r_matnr
           AND werks IN @r_werks
         ORDER BY matnr, werks, cself.

      SELECT marc~werks, marc~matnr, marc~cuobj,
             cself, shuty, packp, prqty, prqty_uom, tbqty, tbqty_uom,
             length, length_uom, width, width_uom, height, height_uom, weigth, weigth_uom
        INTO TABLE @DATA(i_mat_td151)
         FROM marc LEFT OUTER JOIN  yhp_idx_td151 ON yhp_idx_td151~cuobj = marc~cuobj
           WHERE matnr IN @r_matnr
             AND werks IN @r_werks
             AND shuty IN ( 'UNIT', 'STACK', 'GROUP' )
           ORDER BY matnr, werks, cself.

*      SELECT marc~werks, marc~matnr, marc~cuobj, cself, coper, arbpl
*        INTO TABLE @DATA(i_mat_td310)
*        FROM marc LEFT OUTER JOIN yhp_idx_td310 ON yhp_idx_td310~cuobj = marc~cuobj
*           WHERE     matnr        IN @r_matnr
*             AND     marc~werks   IN @r_werks
*             AND NOT arbpl      LIKE '%600'
*           ORDER BY matnr, marc~werks, coper, cself.

      sgpi_texto( 'Seleccionando datos del cliente' ).
      SELECT mvke~matnr, tvkwz~werks, mvke~vkorg, mvke~vtweg, knmt~kunnr, knmt~kdmat
        INTO TABLE @DATA(i_knmt)
        FROM mvke JOIN knmt ON  knmt~vkorg = mvke~vkorg
                            AND knmt~vtweg = mvke~vtweg
                            AND knmt~matnr = mvke~matnr
                  JOIN tvkwz ON  tvkwz~vkorg = mvke~vkorg "#EC "#EC CI_BUFFJOIN
                             AND tvkwz~vtweg = mvke~vtweg
       WHERE mvke~matnr  IN @s_matnr
         AND tvkwz~werks IN @s_werks
        ORDER BY mvke~matnr, tvkwz~werks, mvke~vkorg, mvke~vtweg, knmt~kunnr.

      DELETE ADJACENT DUPLICATES FROM i_knmt COMPARING matnr werks.

      IF p_precio = 'X'.
        sgpi_texto( 'Buscando precios' ).
        LOOP AT i_knmt ASSIGNING FIELD-SYMBOL(<knmt>).
          APPEND INITIAL LINE TO i_fact ASSIGNING FIELD-SYMBOL(<fact>).
          SELECT vbap~vbeln, vbap~posnr, vbap~werks, vbap~matnr, vbak~kunnr, vbak~knumv
            INTO CORRESPONDING FIELDS OF @<fact>
            FROM vbap INNER JOIN vbak ON vbak~vbeln = vbap~vbeln
                      LEFT OUTER JOIN ( vbpa INNER JOIN kna1 ON kna1~kunnr = vbpa~kunnr )
                      ON  vbpa~vbeln = vbap~vbeln
                      AND vbpa~posnr = '000000'
                      AND vbpa~parvw = 'WE'
            UP TO 1 ROWS
            WHERE vbak~vkorg  = @<knmt>-vkorg
              AND vbak~vtweg  = @<knmt>-vtweg
              AND vbak~kunnr  = @<knmt>-kunnr
              AND vbap~matnr  = @<knmt>-matnr
              AND vbap~werks  = @<knmt>-werks
              AND vbap~abgru  = @space
              AND vbak~auart IN ( 'ZLI', 'ZMI', 'ZOF', 'ZVA' )
            ORDER BY vbak~audat DESCENDING, vbak~vbeln DESCENDING.
            SELECT kbetr  FROM konv
              INTO <fact>-pvp_1000_cajas
              UP TO 1 ROWS
               WHERE knumv  = <fact>-knumv
                 AND kposn  = <fact>-posnr
                 AND kschl IN ('ZPRC')
               ORDER BY PRIMARY KEY.
            ENDSELECT.
          ENDSELECT.
        ENDLOOP.
      ENDIF.
    ENDIF.

    DATA(o_pp) = NEW zhcl_pp_core( ).
    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING <listado>.
      sgpi_texto( texto1 = 'Procesando datos'(pda) cant_porc = 100 ).

      zsqm_datos_qa32=>get_datos_add( CHANGING wa_struct = <listado> ).

      IF NOT <listado>-aufnr IN s_aufnr.
        DELETE i_listado.
        CONTINUE.
      ENDIF.

      <listado>-ruta = o_pp->get_ruta( matnr = <listado>-matnr
                                       werks = <listado>-werk ).

      SELECT fekat fegrp fecod FROM qmfel
        INTO CORRESPONDING FIELDS OF qmfel
        UP TO 1 ROWS
       WHERE prueflos  = <listado>-prueflos
         AND fecod    <> ''
        ORDER BY PRIMARY KEY.
        <listado>-fecod = qmfel-fecod.
        SELECT kurztext FROM qpct
          INTO <listado>-txtcd
          UP TO 1 ROWS
          WHERE katalogart  = qmfel-fekat
            AND codegruppe  = qmfel-fegrp
            AND code        = qmfel-fecod
            AND sprache     = sy-langu
            AND gueltigab  <= sy-datum
          ORDER BY PRIMARY KEY.
        ENDSELECT.
      ENDSELECT.

      IF NOT <listado>-aufnr IS INITIAL.
        SELECT SUM( wemng ) FROM afpo
          INTO <listado>-gwemg
          WHERE aufnr = <listado>-aufnr.

        SELECT DISTINCT crhd~arbpl FROM afru JOIN crhd ON  afru~arbid = crhd~objid
                                                       AND crhd~objty = 'A'
          INTO TABLE @DATA(i_pto_trab_not)
          WHERE afru~aufnr = @<listado>-aufnr
            AND stokz      = ''
            AND stzhl      = ''
          ORDER BY crhd~arbpl.

        LOOP AT i_pto_trab_not ASSIGNING FIELD-SYMBOL(<pto_trab_not>).
          IF <listado>-rutas_not IS INITIAL.
            <listado>-rutas_not = <pto_trab_not>-arbpl.
          ELSE.
            CONCATENATE <listado>-rutas_not <pto_trab_not>-arbpl INTO <listado>-rutas_not SEPARATED BY '-'.
          ENDIF.
        ENDLOOP.
      ENDIF.

      LOOP AT i_mat_td100 ASSIGNING FIELD-SYMBOL(<td100>) WHERE     matnr = <listado>-matnr
                                                                AND werks = <listado>-werk.
        MOVE-CORRESPONDING <td100> TO <listado>.
      ENDLOOP.

      LOOP AT i_mat_td151 ASSIGNING FIELD-SYMBOL(<td151>) WHERE     matnr = <listado>-matnr
                                                                AND werks = <listado>-werk
                                                                AND shuty = 'UNIT'.
        <listado>-tbqty = <td151>-tbqty.
      ENDLOOP.

      LOOP AT i_mat_td151 ASSIGNING <td151> WHERE     matnr = <listado>-matnr
                                                  AND werks = <listado>-werk
                                                  AND shuty = 'STACK'.
        <listado>-prqty_stack = <td151>-prqty.
      ENDLOOP.

      LOOP AT i_mat_td110 ASSIGNING FIELD-SYMBOL(<td110>) WHERE     matnr = <listado>-matnr
                                                                AND werks = <listado>-werk.
        MOVE-CORRESPONDING <td110> TO <listado>.

        IF <td110>-mboar = 'S' AND <td110>-board = <td110>-matnr_semi.
          " Si la calidad es igual al semi, es un error en datos.
          ASSIGN i_mat_td110[ cuobj = <td110>-cuobj
                              mboar = 'P' ] TO FIELD-SYMBOL(<fs_td110_pt>).
          IF sy-subrc = 0.
            <td110>-board = <fs_td110_pt>-board.
          ELSE.
            CLEAR <td110>-board.
          ENDIF.

        ELSEIF <td110>-mboar <> 'S'.
          " Si hemos leido un modo de calidad <> S, lo calculamos abajo
          CLEAR <td110>-board.
        ENDIF.

      ENDLOOP.

      LOOP AT i_knmt ASSIGNING <knmt> WHERE     matnr = <listado>-matnr
                                            AND werks = <listado>-werk.
        <listado>-kunnr = <knmt>-kunnr.
      ENDLOOP.
      IF sy-subrc = 0.
        LOOP AT i_fact ASSIGNING <fact> WHERE     matnr = <listado>-matnr
                                              AND werks = <listado>-werk.
          <listado>-pvp_1000_cajas = <fact>-pvp_1000_cajas.
        ENDLOOP.
      ENDIF.
*      LOOP AT i_mat_td310 ASSIGNING FIELD-SYMBOL(<td310>) WHERE     matnr = <listado>-matnr
*                                                                AND werks = <listado>-werk.
*        IF <listado>-rutas IS INITIAL.
*          <listado>-rutas = <td310>-arbpl.
*        ELSE.
*          CONCATENATE <listado>-rutas <td310>-arbpl INTO <listado>-rutas SEPARATED BY '-'.
*        ENDIF.
*      ENDLOOP.

    ENDLOOP.

    SORT i_listado.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

*    o_alv->add_button( button = 'F01' text = 'Ejecutar'(eje)  icon = icon_execute_object ucomm = 'EJEC' ).
    o_alv->add_button( button = 'F01' text = 'Excel'  icon = icon_xls ucomm = 'EXCEL' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page( ).

    o_alv->set_field_hotspot( campo = 'PRUEFLOS,AUFNR' auto = 'X' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK,LIGHTS,MESSAGE' ).
    o_alv->set_field_text( campo = 'RUTAS_NOT' valor = 'Ruta notif.orden' valor2 = 'Ruta notificación orden' ).
    o_alv->set_field_text( campo = 'TBQTY' valor = 'Cajas x PAL' valor2 = 'Cajas por palet' ).

    IF p_precio IS INITIAL.
      o_alv->set_field_quitar( 'PVP_1000_CAJAS' ).
    ENDIF.
    o_alv->set_field_quitar( 'BWART' ).

*    o_alv->set_orden( '' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  IF zcl_usuario=>es_usuario_sistemas( ).
    PERFORM add_button IN PROGRAM zap_status
            USING 'M01' 'Parámetros' '' ''.
  ENDIF.

  PERFORM add_button IN PROGRAM zap_status USING 'M02' 'Log'(log) '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         o_dev              = o_prog ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).
  IF o_prog->variante_forzada IS INITIAL.
    p_vari = o_prog->o_alv->get_default_layout( ).
    o_prog->parametros_por_defecto( CHANGING r_werks = s_werks[] ).
  ENDIF.


AT SELECTION-SCREEN OUTPUT.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
      o_prog->validar_centro( r_werks = s_werks[] obligatorio = 'X' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.


AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
