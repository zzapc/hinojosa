
REPORT zspp_rcptra01 MESSAGE-ID cp.

************************************************************************
*** Dieser Report ist die Schnittstelle zur Übernahme von Plänen     ***
*** aus externen Systemen in die R/3-Planverwaltung.                 ***
*** Eingabe:                                                         ***
***   Die in das System einzuspielenden Plandaten liegen auf einem   ***
***   sequentiellen File vor.                                        ***
***   Pro Mappe muß ein sog. Mappenvorsatz mit Mappen-Informationen  ***
***   (Mappen-Name etc.) angelegt sein.                              ***
***   Pro Transaktionsaufruf muß ein eigener Header-Satz mit dem     ***
***   Namen der aufzurufenden Transaktion vorhanden sein.            ***
*** Ausgabe:                                                         ***
***   Es werden Batch-Input-Mappen zum Anlegen der Pläne erzeugt.    ***
************************************************************************
*** weitere Details in der Reportdokumentation
*_______________________________________________________________________
*   DDIC-Tabellen
*_______________________________________________________________________

TABLES: bi000,
        bi001,
        tca01,
        tca41.

*_______________________________________________________________________
*   KONSTANTEN
*_______________________________________________________________________

* Konstanten zu Feldnamen
DATA: const_bomat_fieldname LIKE x031l-fieldname VALUE 'BOMAT',
      const_matnr_fieldname LIKE x031l-fieldname VALUE 'MATNR',
      const_stlnr_fieldname LIKE x031l-fieldname VALUE 'STLNR',"H45518
      const_stlal_fieldname LIKE x031l-fieldname VALUE 'STLAL',"H45518
      const_stlkn_fieldname LIKE x031l-fieldname VALUE 'STLKN',
      const_aufst_fieldname LIKE x031l-fieldname VALUE 'AUFST',
      const_aufwg_fieldname LIKE x031l-fieldname VALUE 'AUFWG'.
* Konstanten zu Tabellennamen
DATA: const_bipmz_tabname LIKE x030l-tabname VALUE 'BIPMZ'.

* Konstanten Pläne
INCLUDE fc270t04.

* Datumskonstanten
INCLUDE fc27date.

* Satztypen der Eingabe-Datei
DATA:
  BEGIN OF rectype,
    head(2)   VALUE '00',              "Mappenvorsatz einmalig pro Mappe
    mapl(2)   VALUE '01',              "Material-Planzuordnung
    eapl(2)   VALUE '02',              "Equipment-Planzuordnung
    plko(2)   VALUE '03',              "Plankopf
    plkotx(2) VALUE '04',              "Langtext Plankopf
    plfl(2)   VALUE '05',              "Folge
    plfltx(2) VALUE '06',              "Langtext Folge
    plab(2)   VALUE '07',              "Anordnungsbeziehung
    pltx(2)   VALUE '08',              "Text Anordnungsbeziehung
    plpo(2)   VALUE '09',              "Vorgang
    plpotx(2) VALUE '10',              "Langtext Vorgang
    plfh(2)   VALUE '11',              "Fertigungshilfsmittel
    plfhtx(2) VALUE '12',              "Langtext Fertigungshilfsmittel
    plmz(2)   VALUE '13',              "Materialkomponente
    plph(2)   VALUE '14',              "Phase/Teiloperation
    plft(2)   VALUE '15',              "Feature Type
    plfv(2)   VALUE '16',              "Merkmalswert
    plwp(2)   VALUE '17',              "Wartungspaket
    plmk(2)   VALUE '18',              "Prüfmerkmal
    plmw(2)   VALUE '19',              "Prüfmerkmalswert #EC NO_M_RISC3
    plmktx(2) VALUE '20',              "Prüfmerkmalslangtext
    next(2)   VALUE '99',              "nächste Transaktion
  END OF rectype.

* Transaktionen pro Plantyp
DATA:
  BEGIN OF trans,
    std_routing(4)            VALUE 'CA01',
    ref_routing(4)            VALUE 'CA11',
    inspection_plan(4)        VALUE 'QP01',
    inspection_plan_change(4) VALUE 'QP02',
  END OF trans.

* Konstante für keine Eingabe
DATA:
  const_nodata VALUE '/'.

*_______________________________________________________________________
*   SELEKTIONSBILD
*_______________________________________________________________________

* Verarbeitungsparameter
PARAMETERS:
  inpfile(255) TYPE c                   "Name der seq. Eingabe-Datei
              LOWER CASE
              DEFAULT 'RCPTRA00'.

*_______________________________________________________________________
*   INTERNE TABELLEN
*_______________________________________________________________________

* Plan-Material-Zuordnung
DATA BEGIN OF mapl_tab OCCURS 10.
        INCLUDE STRUCTURE bimpl.
DATA END OF mapl_tab.

* Kopf
DATA BEGIN OF plko_tab OCCURS 10.
        INCLUDE STRUCTURE bipko.
DATA END OF plko_tab.

* Langtext Kopf
DATA: BEGIN OF plkotx_tab OCCURS 10.
        INCLUDE STRUCTURE biptx.
DATA: END OF plkotx_tab.

* Folge
DATA BEGIN OF plfl_tab OCCURS 10.
        INCLUDE STRUCTURE bipfl.
DATA END OF plfl_tab.

* Langtext Folge
DATA: BEGIN OF plfltx_tab OCCURS 10.
        INCLUDE STRUCTURE biptx.
DATA: END OF plfltx_tab.

* Vorgang
DATA BEGIN OF plpo_tab OCCURS 10.
        INCLUDE STRUCTURE bippo.
DATA END OF plpo_tab.

* Langtext Vorgang
DATA: BEGIN OF plpotx_tab OCCURS 10.
        INCLUDE STRUCTURE biptx.
DATA: END OF plpotx_tab.

* Fertigungshilfsmittel
DATA BEGIN OF plfh_tab OCCURS 10.
        INCLUDE STRUCTURE bipfh.
DATA END OF plfh_tab.

* Langtext Fertigungshilfsmittel
DATA: BEGIN OF plfhtx_tab OCCURS 10.
        INCLUDE STRUCTURE biptx.
DATA: END OF plfhtx_tab.

* Merkmal (inspection characteristic)
DATA BEGIN OF bi_plmk_tab OCCURS 10.
        INCLUDE STRUCTURE bipmk.
DATA END OF bi_plmk_tab.

* Langtext Merkmal (long text characteristic)
DATA: BEGIN OF bi_plmktx_tab OCCURS 10.
        INCLUDE STRUCTURE biptx.
DATA: END OF bi_plmktx_tab.

* Merkmalswert (inspection characteristic value)
*data begin of bi_plmw_tab occurs 10.
*        include structure bipmw.
*data end of bi_plmw_tab.

* Materialkomponente
DATA BEGIN OF plmz_tab OCCURS 10.
        INCLUDE STRUCTURE bipmz.
DATA END OF plmz_tab.

* aufgelöste Stückliste
DATA: BEGIN OF topmat.
        INCLUDE STRUCTURE cstmat.
DATA: END OF topmat.
DATA BEGIN OF stb_tab OCCURS 10.
        INCLUDE STRUCTURE stpox.
DATA END OF stb_tab.

* Stichtag
DATA: sttag_expl LIKE rc271-datuv,
      datuv_sav LIKE bipko-datuv,
      aennr_sav LIKE bipko-aennr,
      ccin_hlp LIKE ccin.

* Langtexte
DATA: BEGIN OF ltext_tab OCCURS 30,
        txpargraph LIKE biptx-txpargraph,
        text LIKE biptx-text.
DATA: END OF ltext_tab.

* Übergabetabelle Dynpros --> Batch-Input
DATA: BEGIN OF bdc_tab OCCURS 30.
        INCLUDE STRUCTURE bdcdata.
DATA: END OF bdc_tab.

*_______________________________________________________________________
*   VERARBEITUNGSZÄHLER
*_______________________________________________________________________

DATA:
  BEGIN OF count,
* Zähler eingelesene Plan-Objekte
    mapl_in(6)   TYPE n,
    eapl_in(6)   TYPE n,
    plko_in(6)   TYPE n,
    plkotx_in(6) TYPE n,
    plfl_in(6)   TYPE n,
    plfltx_in(6) TYPE n,
    plab_in(6)   TYPE n,
    pltx_in(6)   TYPE n,
    plpo_in(6)   TYPE n,
    plpotx_in(6) TYPE n,
    plfh_in(6)   TYPE n,
    plfhtx_in(6) TYPE n,
    plmz_in(6)   TYPE n,
    plph_in(6)   TYPE n,
    plft_in(6)   TYPE n,
    plfv_in(6)   TYPE n,
    plwp_in(6)   TYPE n,
    plmk_in(6)   TYPE n,
    plmktx_in(6) TYPE n,
    plmw_in(6)   TYPE n,
* Zähler eingelesene Plan-Objekte
    bdc_out(6)   TYPE n,
  END OF count,

* indicator: screen has been processed
  BEGIN OF c_processed,
    scr_151                     TYPE c,
    scr_152                     TYPE c,
    scr_153                     TYPE c,
    scr_154                     TYPE c,
    scr_1502                    TYPE c,
    scr_1504                    TYPE c,
    scr_1511                    TYPE c,
    scr_1521                    TYPE c,
    scr_1522                    TYPE c,
  END   OF c_processed.
*_______________________________________________________________________
*   FLAGs
*_______________________________________________________________________

DATA:
  cha_number           TYPE i, "Merkmal zum Vorgang: Zähler (1 oder 2)
  release_lower_40c(1) TYPE c, "screen number changed in 4.0C

  BEGIN OF flg,
    first_prt(1) TYPE c,    "erste FHM-Position zu diesem Vorgang
    first_screen(1) TYPE c,            "Einstiegsbild ausgeben
    first_batch_input(1) TYPE c,       "erste Batch-Input-Mappe
    new_head(1) TYPE c,                "neue Batch-Input-Mappe
    eof(1) TYPE c,                     "Dateiende erreicht
    header(1) TYPE c,                  "Positionierung aus Kopf
    sequence(1) TYPE c,                "Positionierung aus Folge
    dynbegin(1) TYPE c,                "erstes Feld dieses Dynpros
    popup_1502(1) TYPE c,              "Methodenpopup kommt bei BTC
  END OF flg.

*_______________________________________________________________________
*   Satzaufbau Input-File
*_______________________________________________________________________

DATA:
  BEGIN OF inp_record,
    type(2) TYPE c,
    data(1498),
  END OF inp_record.

*_______________________________________________________________________
*   Sonstige Felder
*_______________________________________________________________________

DATA:
  okcode                   LIKE sy-ucomm,
  previous_transaction     LIKE tstc-tcode,
  current_head             LIKE bi000.

DATA: BEGIN OF mapl_sav,
        matnr LIKE bipmz-matnr,
        werks LIKE bipmz-werks,
        bomal LIKE bipmz-bomal,
        boman LIKE bipmz-boman,
      END OF mapl_sav.

DATA: BEGIN OF plmzd_data,
        stlty LIKE plmzd-stlty,
        stlnr LIKE plmzd-stlnr,
        stlal LIKE plmzd-stlal,
        stlkn LIKE plmzd-stlkn,
        bomat LIKE plmzd-bomat,
        bomty LIKE plmzd-stlty_w,
        bomnr LIKE plmzd-stlnr_w,
        bomal LIKE plmzd-stlal_w,
        boman LIKE mast-stlan,
        werks LIKE plmzd-werks,
        matnr LIKE plmzd-matnr,
        stlan LIKE mast-stlan,
        aufst LIKE plmzd-stlst,
        aufwg LIKE plmzd-stlwg,
      END OF plmzd_data.

DATA: table_header_definition LIKE x030l.

DATA  BEGIN OF bipmz_definitions OCCURS 30.
        INCLUDE STRUCTURE x031l.
DATA  END   OF bipmz_definitions.

DATA: BEGIN OF convexit_function,
        conversi(16) TYPE c VALUE 'CONVERSION_EXIT_',
        convexit LIKE x031l-convexit,
        input(6) TYPE c VALUE '_INPUT',
      END   OF convexit_function.

DATA: convexit_function_no_gaps LIKE convexit_function.

DATA: bipmz_def_flg(1) TYPE c,
      bomat_convexit LIKE x031l-convexit,
      matnr_convexit LIKE x031l-convexit.
DATA: stlnr_convexit LIKE x031l-convexit.                   "H45518
DATA: stlal_convexit LIKE x031l-convexit.                   "H45518

DATA: plnaw_tmp     LIKE tca09-plnaw,
      flg_erf_h_tmp LIKE tca41-flg_erf_h.

*---------------------------------------------------------------------*
CONSTANTS:

BEGIN OF ok,
*------------------ OK_CODES
 task_list_overview_alue    LIKE okcode  VALUE 'ALUE',
 sequence_overview_seue     LIKE okcode  VALUE 'SEUE',
 operation_overview_voue    LIKE okcode  VALUE 'VOUE',
 matl_plan_assignment_mtue  LIKE okcode  VALUE 'MTUE',
 insert_einf                LIKE okcode  VALUE 'EINF',
 save_bu                    LIKE okcode  VALUE 'BU',
 long_text_ltxt             LIKE okcode  VALUE 'LTXT',
 new_entries_anlg           LIKE okcode  VALUE 'ANLG',
 deselect_all_malo          LIKE okcode  VALUE 'MALO',

*------------------ OK_CODES for production resources/tools
 pr_res_tool_overview_fhue  LIKE okcode  VALUE 'FHUE',
 pr_equipment_fie_          LIKE okcode  VALUE 'FIE ',
 pr_document_fid_           LIKE okcode  VALUE 'FID ',
 pr_material_fim_           LIKE okcode  VALUE 'FIM ',
 pr_miscellaneous_fis       LIKE okcode  VALUE 'FIS',
*----------------- OK_CODES for characteristics
 qm_plpo_ppkt_change_qbez   LIKE okcode  VALUE 'QBEZ',
 characterist_overview_qmue LIKE okcode  VALUE 'QMUE',
 qm_save_qmbu               LIKE okcode  VALUE 'QMBU',
 qm_enter____               LIKE okcode  VALUE '    ',
 qm_deselect_all            LIKE okcode  VALUE 'QSEE',
 exit_eret                  LIKE okcode  VALUE 'ERET',
 insert_line_qmef           LIKE okcode  VALUE 'QMEF',
 delete_qmlo                LIKE okcode  VALUE 'QMLO',
 copy_qmcp                  LIKE okcode  VALUE 'QMCP',
 char_sampling_text_qlte    LIKE okcode  VALUE 'QLTE',
 operation_overview_svue    LIKE okcode  VALUE 'SVUE',
 qm_task_list_overview_saue LIKE okcode  VALUE 'SAUE',
 qm_p_re_tool_overview_sfhu LIKE okcode  VALUE 'SFHU',
 char_values_overview_qmuw  LIKE okcode  VALUE 'QMUW',
 char_long_text_qltx        LIKE okcode  VALUE 'QLTX',
 char_general_data_qmam     LIKE okcode  VALUE 'QMAM',
 char_general_info_qma1     LIKE okcode  VALUE 'QMA1',
 char_quantitat_data_qmnm   LIKE okcode  VALUE 'QMNM',
 char_quan_tol_change_qmn1  LIKE okcode  VALUE 'QMN1',
 char_quan_formula_qmn2     LIKE okcode  VALUE 'QMN2',
 char_catalogs_qmlm         LIKE okcode  VALUE 'QMLM',
 char_control_indicat_qskz  LIKE okcode  VALUE 'QSKZ',
 char_dynamic_modific_qmd1  LIKE okcode  VALUE 'QMD1',
 char_reference_unlock_rstd LIKE okcode  VALUE 'RSTD',
 char_reference_unlock_qstm LIKE okcode  VALUE 'QSTM',
END OF ok,

* input control flags
 BEGIN OF const_char,
*  ref_master_char_r    type c value 'R',
   master_char_m        TYPE c VALUE 'M',
   no_master_char_c     TYPE c VALUE 'C',
   second_run_s         TYPE c VALUE 'S',
   no_data__            TYPE c VALUE ' ',
   all                  TYPE c VALUE 'A',
   first_data           TYPE c VALUE 'F',
   position_up_u        TYPE c VALUE 'U',
 END OF const_char.

CONSTANTS:
* logical file name used with data load programs for routings
  gc_logical_filename   TYPE fileintern  VALUE 'CP_RTG_DATA_LOAD'.


*_______________________________________________________________________
INITIALIZATION.

*_______________________________________________________________________
AT SELECTION-SCREEN.

* Eingabeparameter prüfen
  PERFORM check_paras.

*_______________________________________________________________________
START-OF-SELECTION.

* Eingabe-File öffnen
  PERFORM open_file.
  flg-first_batch_input = const-flg_yes.

* seq. Eingabe-File mit den Plan-Daten aus externem System abarbeiten
  DO.
* interne Tabellen pro Plan-Objekt und Transaktion füllen
    PERFORM fill_tables_per_transaction.
* Batch-Input-Mappe erzeugen zum Einspielen der Pläne
    REFRESH bdc_tab.
    CLEAR bdc_tab.
    PERFORM build_btci_from_tables.
    IF NOT flg-eof IS INITIAL.
      EXIT.
    ENDIF.
  ENDDO.

* Batch-Input-Verarbeitung abschließen
  PERFORM close_batch_input.

* Verarbeitungsinformationen auf Liste ausgeben
  PERFORM print_informations.


************************************************************************
*** hier kommen die verwendeten FORM-Routinen alphabet. aufsteigend  ***
************************************************************************


*----------------------------------------------------------------------*
*   FORM BUILD_BTCI_FROM_TABLES                                        *
*----------------------------------------------------------------------*
*   Batch-Input-Mappen erzeugen zum Einspielen der Pläne               *
*----------------------------------------------------------------------*
FORM build_btci_from_tables.

  IF NOT flg-first_batch_input IS INITIAL.
    bi000 = current_head.
    PERFORM open_batch_input.
    CLEAR flg-first_batch_input.
  ENDIF.

* unterschiedliche Transaktionen pro Plantyp
  CASE previous_transaction.

* Normalarbeitsplan
    WHEN trans-std_routing.
      PERFORM build_btci_std.

* Standardarbeitsplan
    WHEN trans-ref_routing.
      PERFORM build_btci_ref.

* create inspection plan
    WHEN trans-inspection_plan.
      PERFORM build_btci_ref.          " wie Standardplan

* change inspection plan
    WHEN trans-inspection_plan_change.
*      perform build_btci_ref_change.   " wie Standardplan

  ENDCASE.

* Dynpros an Batch-Input übergeben
  PERFORM transfer_to_batch_input.

  previous_transaction = bi001-tcode.
  IF NOT flg-new_head IS INITIAL.
    CLEAR flg-new_head.
    CLEAR previous_transaction.
    PERFORM close_batch_input.
    COMMIT WORK.
    bi000 = current_head.
    PERFORM open_batch_input.
  ENDIF.

ENDFORM.                    "BUILD_BTCI_FROM_TABLES

*----------------------------------------------------------------------*
*   FORM BUILD_BTCI_REF                                                *
*----------------------------------------------------------------------*
*   Batch-Input-Mappen erzeugen für Standardarbeitspläne
*----------------------------------------------------------------------*
FORM build_btci_ref.

* Einstiegsbild ausgeben beim ersten LOOP-Durchlauf PLKO_TAB
  flg-first_screen = const-flg_yes.

* Plankopf
  LOOP AT plko_tab.
    PERFORM process_header.

* Vorgang
    LOOP AT plpo_tab.

      CHECK plpo_tab-plnal = plko_tab-plnal.
      PERFORM process_operation.
* Zuordnungen, wenn kein Untervorgang
      CHECK plpo_tab-uvorn EQ space OR
            plpo_tab-uvorn(1) EQ const_nodata.

* Materialkomponenten
      LOOP AT plmz_tab.
        CHECK plmz_tab-plnal = plpo_tab-plnal
          AND plmz_tab-vornr = plpo_tab-vornr.
        READ TABLE mapl_tab WITH KEY matnr = plmz_tab-bomat
                                     werks = plmz_tab-werks.
        CHECK sy-subrc IS INITIAL.
        PERFORM process_component.
      ENDLOOP.

* Fertigungshilfsmittel
      flg-first_prt = const-flg_yes.
      LOOP AT plfh_tab.
        CHECK plfh_tab-plnal = plpo_tab-plnal
          AND plfh_tab-vornr = plpo_tab-vornr.
        PERFORM process_prt.
      ENDLOOP.
      IF flg-first_prt <> const-flg_yes.
* FHM-Übersicht --> Vorgangsübersicht
        PERFORM fill_saplcfdi_0100
                USING 'SVUE'.
      ENDIF.

* Prüfmerkmal (characteristic)
      cha_number = 1. "next characteristic is first cha of operation
      LOOP AT bi_plmk_tab
        WHERE plnal = plpo_tab-plnal
          AND vornr = plpo_tab-vornr.
        PERFORM process_characteristic
              CHANGING
                bi_plmk_tab
                cha_number.
      ENDLOOP.
      IF cha_number > 1 .
*       at least one characteristic has been processed
*--     characteristic overview --> operation overview
        PERFORM fill_saplqpaa_0150
               USING
                 bi_plmk_tab
                 ok-operation_overview_svue
                 cha_number
                 const_char-no_data__ .
      ENDIF.

    ENDLOOP.                           "at plpo_tab

    IF flg-header IS INITIAL.
      PERFORM fill_saplcpdi_1400
              USING ok-task_list_overview_alue
                    const-flg_yes.
    ENDIF.
  ENDLOOP.

* Sichern!!!
  PERFORM process_saving.

* ADD 1 TO count-BDC_OUT.

ENDFORM.                    "BUILD_BTCI_REF

*----------------------------------------------------------------------*
*   FORM BUILD_BTCI_STD                                                *
*----------------------------------------------------------------------*
*   Batch-Input-Mappen erzeugen für Normalarbeitspläne                 *
*----------------------------------------------------------------------*
FORM build_btci_std.

* Einstiegsbild ausgeben beim ersten LOOP-Durchlauf PLKO_TAB
  flg-first_screen = const-flg_yes.

* Plankopf
  LOOP AT plko_tab.
    PERFORM process_header.

* Folge
    LOOP AT plfl_tab.
      CHECK plfl_tab-plnal = plko_tab-plnal.
      PERFORM process_sequence.

* Vorgang, Untervorgang oder referierter Standardplan
      LOOP AT plpo_tab.

        CHECK plpo_tab-plnal = plfl_tab-plnal
          AND plpo_tab-plnfl = plfl_tab-plnfl.
        PERFORM process_operation.
* Zuordnungen, wenn kein Untervorgang oder ref.Standardplan
        CHECK ( plpo_tab-uvorn EQ space OR
                plpo_tab-uvorn(1) EQ const_nodata )
            AND plpo_tab-vplflg NE const-flg_yes.

* Materialkomponenten
        LOOP AT plmz_tab.
          CHECK plmz_tab-plnal = plpo_tab-plnal
            AND plmz_tab-plnfl = plpo_tab-plnfl
            AND plmz_tab-vornr = plpo_tab-vornr.
          READ TABLE mapl_tab WITH KEY matnr = plmz_tab-bomat
                                       werks = plmz_tab-werks.
          CHECK sy-subrc IS INITIAL.
          PERFORM process_component.
        ENDLOOP.

* Fertigungshilfsmittel
        flg-first_prt = const-flg_yes.
        LOOP AT plfh_tab.
          CHECK plfh_tab-plnal = plpo_tab-plnal
            AND plfh_tab-plnfl = plpo_tab-plnfl
            AND plfh_tab-vornr = plpo_tab-vornr.
          PERFORM process_prt.
        ENDLOOP.
        IF flg-first_prt <> const-flg_yes.
* FHM-Übersicht --> Vorgangsübersicht
          PERFORM fill_saplcfdi_0100
                  USING ok-operation_overview_svue.
        ENDIF.

*-- Prüfmerkmal (characteristic) und -werte (characteristic values)
        cha_number = 1. "next characteristic is first cha of operation
        LOOP AT bi_plmk_tab
          WHERE plnal = plpo_tab-plnal
            AND plnfl = plpo_tab-plnfl
            AND vornr = plpo_tab-vornr.
          PERFORM process_characteristic
                CHANGING
                  bi_plmk_tab
                  cha_number.
        ENDLOOP.
        IF cha_number > 1.
*         at least one characteristic has been processed
*--       characteristic overview --> operation overview
          PERFORM fill_saplqpaa_0150
                USING
                      bi_plmk_tab
                      ok-operation_overview_svue
                      cha_number
                      const_char-no_data__ .
        ENDIF.

      ENDLOOP.                         " at plpo_tab.

      IF flg-sequence IS INITIAL.
        PERFORM fill_saplcpdi_1400
                USING ok-sequence_overview_seue
                      const-flg_yes.
      ENDIF.
    ENDLOOP.                           " at plfl_tab.

    IF flg-header IS INITIAL.
      PERFORM fill_saplcpdi_1300
              USING ok-task_list_overview_alue.
    ENDIF.
  ENDLOOP.                             " at plko_tab.

* Sichern!!!
  PERFORM process_saving.

* ADD 1 TO count-BDC_OUT.

ENDFORM.                    "BUILD_BTCI_STD

*----------------------------------------------------------------------*
*   FORM CHECK_INPUT_FACILITY                                          *
*----------------------------------------------------------------------*
*   Erfassungshilfe prüfen
*----------------------------------------------------------------------*
FORM check_input_facility.

  IF plko_tab-profidnetz IS INITIAL.
* Profil da ?
    MESSAGE e855(cp) WITH plko_tab-plnty
                          plko_tab-plnnr
                          plko_tab-plnal
                          current_head-group.
  ELSE.
* Erfassungshilfe da ?
    SELECT SINGLE * FROM tca01
       WHERE plnty = plko_tab-plnty.
    IF sy-subrc = 0.
      MOVE tca01-plnaw TO plnaw_tmp.
    ENDIF.

    SELECT SINGLE flg_erf_h FROM tca41 INTO flg_erf_h_tmp
       WHERE plnaw = plnaw_tmp
         AND profidnetz = plko_tab-profidnetz.

    IF flg_erf_h_tmp IS INITIAL.
      MESSAGE e855(cp) WITH plko_tab-plnty
                            plko_tab-plnnr
                            plko_tab-plnal
                            current_head-group.
    ENDIF.
  ENDIF.

ENDFORM.                    "CHECK_INPUT_FACILITY

*----------------------------------------------------------------------*
*   FORM CHECK_PARAS                                                   *
*----------------------------------------------------------------------*
*   Eingabeparameter prüfen
*----------------------------------------------------------------------*
FORM check_paras.

* validate file name
  CALL FUNCTION 'FILE_VALIDATE_NAME'
    EXPORTING
      logical_filename  = gc_logical_filename
    CHANGING
      physical_filename = inpfile
    EXCEPTIONS
      OTHERS            = 1.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    "CHECK_PARAS

*----------------------------------------------------------------------*
*   FORM CLOSE_BATCH_INPUT                                             *
*----------------------------------------------------------------------*
*   Batch-Input-Mappe schließen                                        *
*----------------------------------------------------------------------*
FORM close_batch_input.

  CALL FUNCTION 'BDC_CLOSE_GROUP'.

ENDFORM.                    "CLOSE_BATCH_INPUT

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCFDI_0100                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCFDI_0100 versorgen
*----------------------------------------------------------------------*
FORM fill_saplcfdi_0100
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCFDI'.
  bdc_tab-dynpro = '0100'.
  bdc_tab-dynbegin = const-flg_yes.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCFDI_0100

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCFDI_0200
*----------------------------------------------------------------------*
*   Dynpro SAPLCFDI_0200 versorgen
*----------------------------------------------------------------------*
FORM fill_saplcfdi_0200
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCFDI'.
  bdc_tab-dynpro = '0200'.
  bdc_tab-dynbegin = const-flg_yes.

  IF flg-first_prt IS INITIAL.

* Positionsnummer FHM
    IF plfh_tab-psnfh(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-PSNFH'.
      bdc_tab-fval = plfh_tab-psnfh.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Materialnummer
    IF plfh_tab-matnr(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-MATNR'.
      bdc_tab-fval = plfh_tab-matnr.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* FHM-Werk
    IF plfh_tab-fhwrk(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-FHWRK'.
      bdc_tab-fval = plfh_tab-fhwrk.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Menge
    IF plfh_tab-mgvgw(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-MGVGW'.
      bdc_tab-fval = plfh_tab-mgvgw.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Mengeneinheit
    IF plfh_tab-mgeinh(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-MGEINH'.
      bdc_tab-fval = plfh_tab-mgeinh.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* FHM-Steuerschlüssel
    IF plfh_tab-steuf(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-STEUF'.
      bdc_tab-fval = plfh_tab-steuf.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Vorlagenschlüssel
    IF plfh_tab-ktsch(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-KTSCH'.
      bdc_tab-fval = plfh_tab-ktsch.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.
* Kurztext
    IF plfh_tab-txtz1(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-TXTZ1'.
      bdc_tab-fval = plfh_tab-txtz1.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCFDI_0200

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCFDF_0101
*----------------------------------------------------------------------*
*   Dynpro SAPLCFDF_0101 versorgen
*----------------------------------------------------------------------*

FORM fill_saplcfdf_0101
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCFDF'.
  bdc_tab-dynpro = '0101'.
  bdc_tab-dynbegin = const-flg_yes.

* Formel zur Berechnung Gesamtmenge Fertigungshilfsmittel
  IF plfh_tab-mgform(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-MGFORM'.
    bdc_tab-fval = plfh_tab-mgform.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* Menge Fertigungshilfsmittel
  IF plfh_tab-mgvgw(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-MGVGW'.
    bdc_tab-fval = plfh_tab-mgvgw.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* Einheit
  IF plfh_tab-mgeinh(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-MGEINH'.
    bdc_tab-fval = plfh_tab-mgeinh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* Formel Einsatzwert
  IF plfh_tab-ewform(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-EWFORM'.
    bdc_tab-fval = plfh_tab-ewform.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* Menge Einsatzwert
  IF plfh_tab-ewvgw(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-EWVGW'.
    bdc_tab-fval = plfh_tab-ewvgw.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* Einheit Einsatzwert
  IF plfh_tab-eweinh(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-EWEINH'.
    bdc_tab-fval = plfh_tab-eweinh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM. " FILL_SAPLCFDF_0101

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCFDF_0100
*----------------------------------------------------------------------*
*   Dynpro SAPLCFDF_0100 versorgen
*----------------------------------------------------------------------*

FORM fill_saplcfdf_0100
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCFDF'.
  bdc_tab-dynpro = '0100'.
  bdc_tab-dynbegin = const-flg_yes.

* Formel zur Berechnung Gesamtmenge Fertigungshilfsmittel
  IF plfh_tab-mgform(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-MGFORM'.
    bdc_tab-fval = plfh_tab-mgform.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* Menge Fertigungshilfsmittel
  IF plfh_tab-mgvgw(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-MGVGW'.
    bdc_tab-fval = plfh_tab-mgvgw.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* Einheit
  IF plfh_tab-mgeinh(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-MGEINH'.
    bdc_tab-fval = plfh_tab-mgeinh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* Formel Einsatzwert
  IF plfh_tab-ewform(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-EWFORM'.
    bdc_tab-fval = plfh_tab-ewform.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* Menge Einsatzwert
  IF plfh_tab-ewvgw(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-EWVGW'.
    bdc_tab-fval = plfh_tab-ewvgw.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* Einheit Einsatzwert
  IF plfh_tab-eweinh(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-EWEINH'.
    bdc_tab-fval = plfh_tab-eweinh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM. " FILL_SAPLCFDF_0100

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCFDF_0102
*----------------------------------------------------------------------*
*   Dynpro SAPLCFDF_0102 versorgen
*----------------------------------------------------------------------*

FORM fill_saplcfdf_0102
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCFDF'.
  bdc_tab-dynpro = '0102'.
  bdc_tab-dynbegin = const-flg_yes.

* Formel zur Berechnung Gesamtmenge Fertigungshilfsmittel
  IF plfh_tab-mgform(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-MGFORM'.
    bdc_tab-fval = plfh_tab-mgform.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM. " FILL_SAPLCFDF_0102

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCFDI_0210                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCFDI_0210 versorgen                                     *
*----------------------------------------------------------------------*
FORM fill_saplcfdi_0210
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCFDI'.
  bdc_tab-dynpro = '0210'.
  bdc_tab-dynbegin = const-flg_yes.

* Positionsnummer FHM
  IF plfh_tab-psnfh(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-PSNFH'.
    bdc_tab-fval = plfh_tab-psnfh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* FHM-Nummer
  IF plfh_tab-sfhnr(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-SFHNR'.
    bdc_tab-fval = plfh_tab-sfhnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Menge
  IF plfh_tab-mgvgw(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-MGVGW'.
    bdc_tab-fval = plfh_tab-mgvgw.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Mengeneinheit
  IF plfh_tab-mgeinh(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-MGEINH'.
    bdc_tab-fval = plfh_tab-mgeinh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* FHM-Steuerschlüssel
  IF plfh_tab-steuf(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-STEUF'.
    bdc_tab-fval = plfh_tab-steuf.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Vorlagenschlüssel
  IF plfh_tab-ktsch(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-KTSCH'.
    bdc_tab-fval = plfh_tab-ktsch.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Kurztext
  IF plfh_tab-txtz1(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-TXTZ1'.
    bdc_tab-fval = plfh_tab-txtz1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCFDI_0210

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCFDI_0220
*----------------------------------------------------------------------*
*   Dynpro SAPLCFDI_0220 versorgen
*----------------------------------------------------------------------*
FORM fill_saplcfdi_0220
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCFDI'.
  bdc_tab-dynpro = '0220'.
  bdc_tab-dynbegin = const-flg_yes.

* Positionsnummer FHM
  IF plfh_tab-psnfh(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-PSNFH'.
    bdc_tab-fval = plfh_tab-psnfh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Dokumentnummer
  IF plfh_tab-doknr(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-DOKNR'.
    bdc_tab-fval = plfh_tab-doknr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Dokumentart
  IF plfh_tab-dokar(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-DOKAR'.
    bdc_tab-fval = plfh_tab-dokar.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Teildokument
  IF plfh_tab-doktl(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-DOKTL'.
    bdc_tab-fval = plfh_tab-doktl.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Dokumentversion
  IF plfh_tab-dokvr(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-DOKVR'.
    bdc_tab-fval = plfh_tab-dokvr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Menge
  IF plfh_tab-mgvgw(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-MGVGW'.
    bdc_tab-fval = plfh_tab-mgvgw.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Mengeneinheit
  IF plfh_tab-mgeinh(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-MGEINH'.
    bdc_tab-fval = plfh_tab-mgeinh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* FHM-Steuerschlüssel
  IF plfh_tab-steuf(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-STEUF'.
    bdc_tab-fval = plfh_tab-steuf.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Vorlagenschlüssel
  IF plfh_tab-ktsch(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-KTSCH'.
    bdc_tab-fval = plfh_tab-ktsch.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Kurztext
  IF plfh_tab-txtz1(1) NE const_nodata.
    bdc_tab-fnam = 'PLFHD-TXTZ1'.
    bdc_tab-fval = plfh_tab-txtz1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCFDI_0220

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCFDI_0230
*----------------------------------------------------------------------*
*   Dynpro SAPLCFDI_0230 versorgen
*----------------------------------------------------------------------*
FORM fill_saplcfdi_0230
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCFDI'.
  bdc_tab-dynpro = '0230'.
  bdc_tab-dynbegin = const-flg_yes.

  IF flg-first_prt IS INITIAL.

* Positionsnummer FHM
    IF plfh_tab-psnfh(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-PSNFH'.
      bdc_tab-fval = plfh_tab-psnfh.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Equipment
    IF plfh_tab-equnr(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-EQUNR'.
      bdc_tab-fval = plfh_tab-equnr.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* nicht für Equipment
    IF NOT plfh_tab-fhmar EQ 'E'.

* Menge
      IF plfh_tab-mgvgw(1) NE const_nodata.
        bdc_tab-fnam = 'PLFHD-MGVGW'.
        bdc_tab-fval = plfh_tab-mgvgw.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.

* Mengeneinheit
      IF plfh_tab-mgeinh(1) NE const_nodata.
        bdc_tab-fnam = 'PLFHD-MGEINH'.
        bdc_tab-fval = plfh_tab-mgeinh.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.
    ENDIF.

* FHM-Steuerschlüssel
    IF plfh_tab-steuf(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-STEUF'.
      bdc_tab-fval = plfh_tab-steuf.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Menge Einsatzwert
    IF plfh_tab-ewvgw(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-EWVGW'.
      bdc_tab-fval = plfh_tab-ewvgw.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.
* Einheit Einsatzwert
    IF plfh_tab-eweinh(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-EWEINH'.
      bdc_tab-fval = plfh_tab-eweinh.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Vorlagenschlüssel
    IF plfh_tab-ktsch(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-KTSCH'.
      bdc_tab-fval = plfh_tab-ktsch.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.
* Kurztext
    IF plfh_tab-txtz1(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-TXTZ1'.
      bdc_tab-fval = plfh_tab-txtz1.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCFDI_0230

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCMDI_1500                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCMDI_1500 versorgen
*--------------------------------------------------------------------- *
FORM fill_saplcmdi_1500
     USING value(okcode) LIKE okcode.

  DATA: BEGIN OF stlkn_struct,
          prefix(4) TYPE c,
          posnr LIKE stpo-posnr,
        END OF stlkn_struct.
*
* Aufbereitung der Daten zum Holen der Stücklistennummer rsp. -knoten
  MOVE plmz_tab-stlkn TO stlkn_struct.
* holen der Stücklistendaten
  IF ( plmz_tab-bomty(1) NE const_nodata AND
       plmz_tab-bomty IS INITIAL ) OR
     ( plmz_tab-bomnr(1) NE const_nodata AND
       plmz_tab-bomnr IS INITIAL ) OR
     ( plmz_tab-stlty(1) NE const_nodata AND
       plmz_tab-stlty IS INITIAL ) OR
     ( plmz_tab-stlnr(1) NE const_nodata AND
       plmz_tab-stlnr IS INITIAL ) OR
     ( plmz_tab-stlal(1) NE const_nodata AND
       plmz_tab-stlal IS INITIAL ) OR
     ( plmz_tab-stlkn(1) NE const_nodata AND
       stlkn_struct-prefix EQ '*POS' ) OR
     ( plmz_tab-aufst(1) NE const_nodata AND
       plmz_tab-aufst IS INITIAL ) OR
     ( plmz_tab-aufwg(1) NE const_nodata AND
       plmz_tab-aufwg IS INITIAL ) .
    PERFORM get_bom_data.
  ENDIF.
*
  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCMDI'.
  bdc_tab-dynpro = '1500'.
  bdc_tab-dynbegin = const-flg_yes.

* Stüli-Material
  IF plmz_tab-bomat(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-BOMAT'.
    bdc_tab-fval = plmz_tab-bomat.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Werk
  IF plmz_tab-werks(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-WERKS'.
    bdc_tab-fval = plmz_tab-werks.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Stüli-Typ
  IF plmz_tab-bomty(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-STLTY_W'.
    bdc_tab-fval = plmz_tab-bomty.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Stücklistennummer des Kopfmaterials
  IF plmz_tab-bomnr(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-STLNR_W'.
    bdc_tab-fval = plmz_tab-bomnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Stücklistenalternative des Kopfmaterials
  IF plmz_tab-bomal(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-STLAL_W'.
    bdc_tab-fval = plmz_tab-bomal.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Material der Komponente
  IF plmz_tab-matnr(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-MATNR'.
    bdc_tab-fval = plmz_tab-matnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Stüli-Typ
  IF plmz_tab-stlty(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-STLTY'.
    bdc_tab-fval = plmz_tab-stlty.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Stüli-Nummer
  IF plmz_tab-stlnr(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-STLNR'.
    bdc_tab-fval = plmz_tab-stlnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* STÜLI-ALTERNATIVE
  IF plmz_tab-stlal(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-STLAL'.
    bdc_tab-fval = plmz_tab-stlal.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Stüli-Knoten
  IF plmz_tab-stlkn(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-STLKN'.
    bdc_tab-fval = plmz_tab-stlkn.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Auftragsstufe
  IF plmz_tab-aufst(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-STLST'.
    bdc_tab-fval = plmz_tab-aufst.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Auftragsweg
  IF plmz_tab-aufwg(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-STLWG'.
    bdc_tab-fval = plmz_tab-aufwg.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Zuschnittsmaß 1
  IF plmz_tab-zums1(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-ZUMS1'.
    bdc_tab-fval = plmz_tab-zums1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Einheit der Zuschnittsmaße
  IF plmz_tab-zumei(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-ZUMEI'.
    bdc_tab-fval = plmz_tab-zumei.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Divisor
  IF plmz_tab-zudiv(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-ZUDIV'.
    bdc_tab-fval = plmz_tab-zudiv.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Zuschnittsmaß 2
  IF plmz_tab-zums2(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-ZUMS2'.
    bdc_tab-fval = plmz_tab-zums2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Kennzeichen retrograde Entnahme
  IF plmz_tab-rgekz(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-RGEKZ'.
    bdc_tab-fval = plmz_tab-rgekz.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Zuschnittsmaß 3
  IF plmz_tab-zums3(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-ZUMS3'.
    bdc_tab-fval = plmz_tab-zums3.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Komponentenmenge
  IF plmz_tab-imeng(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-IMENG'.
    bdc_tab-fval = plmz_tab-imeng.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Komponentenmengeneinheit
  IF plmz_tab-imein(1) NE const_nodata.
    bdc_tab-fnam = 'PLMZD-IMEIN'.
    bdc_tab-fval = plmz_tab-imein.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCMDI_1500

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCPDA_1200                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCPDA_1200 versorgen
*----------------------------------------------------------------------*
FORM fill_saplcpda_1200
     USING value(okcode) LIKE okcode
           value(nodata) LIKE const-flg_yes.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDA'.
  bdc_tab-dynpro = '1200'.
  bdc_tab-dynbegin = const-flg_yes.


  IF nodata IS INITIAL.

* Plangruppenzähler
    IF plko_tab-plnal(1) NE const_nodata.
      bdc_tab-fnam = 'PLKOD-PLNAL'.
      bdc_tab-fval = plko_tab-plnal.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Kurztext
    IF plko_tab-ktext(1) NE const_nodata.
      bdc_tab-fnam = 'PLKOD-KTEXT'.
      bdc_tab-fval = plko_tab-ktext.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Werk
    IF plko_tab-werks(1) NE const_nodata.
      bdc_tab-fnam = 'PLKOD-WERKS'.
      bdc_tab-fval = plko_tab-werks.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Verwendung
    IF plko_tab-verwe(1) NE const_nodata.
      bdc_tab-fnam = 'PLKOD-VERWE'.
      bdc_tab-fval = plko_tab-verwe.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Planergruppe
    IF plko_tab-vagrp(1) NE const_nodata.
      bdc_tab-fnam = 'PLKOD-VAGRP'.
      bdc_tab-fval = plko_tab-vagrp.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Status
    IF plko_tab-statu(1) NE const_nodata.
      bdc_tab-fnam = 'PLKOD-STATU'.
      bdc_tab-fval = plko_tab-statu.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Losgröße von
    IF plko_tab-losvn(1) NE const_nodata.
      bdc_tab-fnam = 'PLKOD-LOSVN'.
      bdc_tab-fval = plko_tab-losvn.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Losgröße bis
    IF plko_tab-losbs(1) NE const_nodata.
      bdc_tab-fnam = 'PLKOD-LOSBS'.
      bdc_tab-fval = plko_tab-losbs.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Planmengeneinheit
    IF plko_tab-plnme(1) NE const_nodata.
      bdc_tab-fnam = 'PLKOD-PLNME'.
      bdc_tab-fval = plko_tab-plnme.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Plannummer alt
    IF plko_tab-plnnr_alt(1) NE const_nodata.
      bdc_tab-fnam = 'PLKOD-PLNNR_ALT'.
      bdc_tab-fval = plko_tab-plnnr_alt.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*------------------------ QM SUBSCREEN 1212 ---------
* Prüfpunktfeldkombination
    IF plko_tab-slwbez(1) NE const_nodata
      AND NOT plko_tab-slwbez IS INITIAL.
      bdc_tab-fnam = 'PLKOD-SLWBEZ'.
      bdc_tab-fval = plko_tab-slwbez.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Teilloszuordnung in der Fertigungsprüfung
    IF plko_tab-ppkztlzu(1) NE const_nodata
      AND NOT plko_tab-ppkztlzu IS INITIAL.
      bdc_tab-fnam = 'PLKOD-PPKZTLZU'.
      bdc_tab-fval = plko_tab-ppkztlzu.
      IF plko_tab-plnty NE const-plnty_fam.      " note 334956
        APPEND bdc_tab.
      ENDIF.
      CLEAR bdc_tab.
    ENDIF.

* fields are not relevant for standard routings
    IF plko_tab-plnty NE const-plnty_std.          " note 350107

* Probenahmeverfahren
      IF plko_tab-qprziehver(1) NE const_nodata
        AND NOT plko_tab-qprziehver IS INITIAL.
        bdc_tab-fnam = 'PLKOD-QPRZIEHVER'.
        bdc_tab-fval = plko_tab-qprziehver.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.

* Dynamisierungsebene
      IF plko_tab-qdynhead(1) NE const_nodata.
        bdc_tab-fnam = 'PLKOD-QDYNHEAD'.
        bdc_tab-fval = plko_tab-qdynhead.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.

* Dynamisierungsregel
      IF plko_tab-qdynregel(1) NE const_nodata.
        bdc_tab-fnam = 'PLKOD-QDYNREGEL'.
        bdc_tab-fval = plko_tab-qdynregel.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.

*---- Dynamisierungskriterien -------
* Lieferant
      IF plko_tab-liefkz(1) NE const_nodata
        AND NOT plko_tab-liefkz IS INITIAL.
        bdc_tab-fnam = 'RQPAS-LIEFKZ'.
        bdc_tab-fval = plko_tab-liefkz.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.

* Hersteller
      IF plko_tab-herstkz(1) NE const_nodata
        AND NOT plko_tab-herstkz IS INITIAL.
        bdc_tab-fnam = 'RQPAS-HERSTKZ'.
        bdc_tab-fval = plko_tab-herstkz.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.

* Kunde
      IF plko_tab-kundkz(1) NE const_nodata
        AND NOT plko_tab-kundkz IS INITIAL.
        bdc_tab-fnam = 'RQPAS-KUNDKZ'.
        bdc_tab-fval = plko_tab-kundkz.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.

    ENDIF.  " PLKO_TAB-PLNTY NE CONST-PLNTY_STD

* ext. Numerierung
    IF plko_tab-extnum(1) NE const_nodata.
      bdc_tab-fnam = 'PLKOD-EXTNUM'.
      bdc_tab-fval = plko_tab-extnum.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCPDA_1200

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCPDI_1001                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCPDI_1001 versorgen                                     *
*----------------------------------------------------------------------*
FORM fill_saplcpdi_1001
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDI'.
  bdc_tab-dynpro = '1001'.
  bdc_tab-dynbegin = const-flg_yes.

* Plangruppe
  IF plko_tab-plnnr(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-PLNNR'.
    bdc_tab-fval = plko_tab-plnnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Profil
  IF plko_tab-profidnetz(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-PROFIDNETZ'.
    bdc_tab-fval = plko_tab-profidnetz.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Änderungsnummer
  IF plko_tab-aennr(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-AENNR'.
    bdc_tab-fval = plko_tab-aennr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* STICHTAG
  IF plko_tab-datuv(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-STTAG'.
    bdc_tab-fval = plko_tab-datuv.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-CODE
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCPDI_1001

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCPDI_1010                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCPDI_1010 versorgen                                     *
*----------------------------------------------------------------------*
FORM fill_saplcpdi_1010
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDI'.
  bdc_tab-dynpro = '1010'.
  bdc_tab-dynbegin = const-flg_yes.

* Material
  bdc_tab-fnam = 'RC27M-MATNR'.
  bdc_tab-fval = space.
  APPEND bdc_tab.
  CLEAR bdc_tab.

* Werk
  bdc_tab-fnam = 'RC27M-WERKS'.
  bdc_tab-fval = space.
  APPEND bdc_tab.
  CLEAR bdc_tab.

* Plangruppe
  IF plko_tab-plnnr(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-PLNNR'.
    bdc_tab-fval = plko_tab-plnnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Profil
  IF plko_tab-profidnetz(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-PROFIDNETZ'.
    bdc_tab-fval = plko_tab-profidnetz.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Änderungsnummer
  IF plko_tab-aennr(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-AENNR'.
    bdc_tab-fval = plko_tab-aennr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Stichtag
  IF plko_tab-datuv(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-STTAG'.
    bdc_tab-fval = plko_tab-datuv.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCPDI_1010

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCPDI_1200                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCPDI_1200 versorgen                                     *
*----------------------------------------------------------------------*
FORM fill_saplcpdi_1200
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDI'.
  bdc_tab-dynpro = '1200'.
  bdc_tab-dynbegin = const-flg_yes.

* OK-CODE
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCPDI_1200

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCPDI_1300                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCPDI_1300 versorgen
*----------------------------------------------------------------------*
FORM fill_saplcpdi_1300
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDI'.
  bdc_tab-dynpro = '1300'.
  bdc_tab-dynbegin = const-flg_yes.

* Stammfolge ==> erste Zeile markieren
  IF plfl_tab-flgat = const-kz_sta.
    bdc_tab-fnam = 'RC27X-FLG_SEL(1)'.
    bdc_tab-fval = const-mark.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCPDI_1300

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCPDI_1400                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCPDI_1400 versorgen
*----------------------------------------------------------------------*
FORM fill_saplcpdi_1400
     USING value(okcode) LIKE okcode
           value(nodata) LIKE const-flg_yes.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDI'.
  bdc_tab-dynpro = '1400'.
  bdc_tab-dynbegin = const-flg_yes.

  IF okcode = ok-insert_einf.
* Cursor positionieren
    bdc_tab-fnam = 'BDC_CURSOR'.
    bdc_tab-fval = 'PLPOD-VORNR(1)'.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

  IF nodata IS INITIAL.

* Selektionskennzeichen
    bdc_tab-fnam = 'RC27X-FLG_SEL(1)'.
    bdc_tab-fval = const-mark.
    APPEND bdc_tab.
    CLEAR bdc_tab.

* Vorgangsnummer
    bdc_tab-fnam = 'PLPOD-VORNR(1)'.
    bdc_tab-fval = plpo_tab-vornr.
    APPEND bdc_tab.
    CLEAR bdc_tab.

* Steuerschlüssel
    IF plpo_tab-steus(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-STEUS(1)'.
      bdc_tab-fval = plpo_tab-steus.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Untervorgangsnummer
    IF plpo_tab-uvorn(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-UVORN(1)'.
      bdc_tab-fval = plpo_tab-uvorn.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Arbeitsplatz
    IF plpo_tab-arbpl(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ARBPL(1)'.
      bdc_tab-fval = plpo_tab-arbpl.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Werk
    IF plpo_tab-werks(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-WERKS(1)'.
      bdc_tab-fval = plpo_tab-werks.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Vorlagenschlüssel
    IF plpo_tab-ktsch(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-KTSCH(1)'.
      bdc_tab-fval = plpo_tab-ktsch.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* KURZTEXT
    IF plpo_tab-ltxa1(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-LTXA1(1)'.
      bdc_tab-fval = plpo_tab-ltxa1.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.
  ENDIF.

* OK-CODE
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCPDI_1400

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCPDO_1080                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCPDO_1080 versorgen                                     *
*----------------------------------------------------------------------*
FORM fill_saplcpdo_1080
     USING value(okcode) LIKE okcode
           value(nodata) LIKE const-flg_yes.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDO'.
  bdc_tab-dynpro = '1080'.
  bdc_tab-dynbegin = const-flg_yes.

  IF nodata IS INITIAL.
* Feldaufnahmen

* Vorgangsnr
    IF plpo_tab-vornr(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-VORNR'.
      bdc_tab-fval = plpo_tab-vornr.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Vorlagenschlüssel
    IF plpo_tab-ktsch(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-KTSCH'.
      bdc_tab-fval = plpo_tab-ktsch.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Langtext-Erfassung
    IF plpo_tab-ltxa1(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-LTXA1'.
      bdc_tab-fval = plpo_tab-ltxa1.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* referierte Plangruppe
    IF plpo_tab-vplnnr(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-VPLNR'.
      bdc_tab-fval = plpo_tab-vplnnr.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* referierte Planalternative
    IF plpo_tab-vplnal(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-VPLAL'.
      bdc_tab-fval = plpo_tab-vplnal.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Interval
    IF plpo_tab-vintv IS INITIAL.
      plpo_tab-vintv = const_nodata.
    ENDIF.
    IF plpo_tab-vintv(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-VINTV'.
      bdc_tab-fval = plpo_tab-vintv.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCPDO_1080

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCPDO_1100                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCPDO_1100 versorgen
*----------------------------------------------------------------------*
FORM fill_saplcpdo_1100
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDO'.
  bdc_tab-dynpro = '1100'.
  bdc_tab-dynbegin = const-flg_yes.

* Benutzerfeld 1
  IF plpo_tab-usr00(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR00'.
    bdc_tab-fval = plpo_tab-usr00.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerfeld 2
  IF plpo_tab-usr01(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR01'.
    bdc_tab-fval = plpo_tab-usr01.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerfeld 3
  IF plpo_tab-usr02(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR02'.
    bdc_tab-fval = plpo_tab-usr02.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerfeld 4
  IF plpo_tab-usr03(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR03'.
    bdc_tab-fval = plpo_tab-usr03.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerfeld 5
  IF plpo_tab-usr04(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR04'.
    bdc_tab-fval = plpo_tab-usr04.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
  IF plpo_tab-use04(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USE04'.
    bdc_tab-fval = plpo_tab-use04.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerfeld 6
  IF plpo_tab-usr05(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR05'.
    bdc_tab-fval = plpo_tab-usr05.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
  IF plpo_tab-use05(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USE05'.
    bdc_tab-fval = plpo_tab-use05.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerfeld 7
  IF plpo_tab-usr06(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR06'.
    bdc_tab-fval = plpo_tab-usr06.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
  IF plpo_tab-use06(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USE06'.
    bdc_tab-fval = plpo_tab-use06.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerfeld 8
  IF plpo_tab-usr07(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR07'.
    bdc_tab-fval = plpo_tab-usr07.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
  IF plpo_tab-use07(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USE07'.
    bdc_tab-fval = plpo_tab-use07.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerfeld 9
  IF plpo_tab-usr08(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR08'.
    bdc_tab-fval = plpo_tab-usr08.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerfeld 10
  IF plpo_tab-usr09(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR09'.
    bdc_tab-fval = plpo_tab-usr09.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerfeld 11
  IF plpo_tab-usr10(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR10'.
    bdc_tab-fval = plpo_tab-usr10.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerfeld 12
  IF plpo_tab-usr11(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-USR11'.
    bdc_tab-fval = plpo_tab-usr11.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCPDO_1100

*----------------------------------------------------------------------*
*   Dynpro SAPLCPDO_1200 versorgen                                     *
*----------------------------------------------------------------------*
FORM fill_saplcpdo_1200
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDO'.
  bdc_tab-dynpro = '1200'.
  bdc_tab-dynbegin = const-flg_yes.
* Vorgabewerte
* Mengeneinheit Vorgang
  IF plpo_tab-meinh(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-MEINH'.
    bdc_tab-fval = plpo_tab-meinh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Basismenge
  IF plpo_tab-bmsch(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-BMSCH'.
    bdc_tab-fval = plpo_tab-bmsch.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Zähler für Umrechnung
  IF plpo_tab-umrez(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-UMREZ'.
    bdc_tab-fval = plpo_tab-umrez.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* NENNER FÜR UMRECHNUNG
  IF plpo_tab-umren(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-UMREN'.
    bdc_tab-fval = plpo_tab-umren.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* VORGABEWERT 01
  IF plpo_tab-vgw01(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGW01'.
    bdc_tab-fval = plpo_tab-vgw01.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Einheit Vorgabewert 01
  IF plpo_tab-vge01(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGE01'.
    bdc_tab-fval = plpo_tab-vge01.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Leistungsart 01
  IF plpo_tab-lar01(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-LAR01'.
    bdc_tab-fval = plpo_tab-lar01.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Vorgabewert 02
  IF plpo_tab-vgw02(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGW02'.
    bdc_tab-fval = plpo_tab-vgw02.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Einheit Vorgabewert 02
  IF plpo_tab-vge02(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGE02'.
    bdc_tab-fval = plpo_tab-vge02.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Leistungsart 02
  IF plpo_tab-lar02(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-LAR02'.
    bdc_tab-fval = plpo_tab-lar02.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Vorgabewert 03
  IF plpo_tab-vgw03(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGW03'.
    bdc_tab-fval = plpo_tab-vgw03.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Einheit Vorgabewert 03
  IF plpo_tab-vge03(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGE03'.
    bdc_tab-fval = plpo_tab-vge03.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Leistungsart 03
  IF plpo_tab-lar03(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-LAR03'.
    bdc_tab-fval = plpo_tab-lar03.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Vorgabewert 04
  IF plpo_tab-vgw04(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGW04'.
    bdc_tab-fval = plpo_tab-vgw04.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Einheit Vorgabewert 04
  IF plpo_tab-vge04(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGE04'.
    bdc_tab-fval = plpo_tab-vge04.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Leistungsart 04
  IF plpo_tab-lar04(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-LAR04'.
    bdc_tab-fval = plpo_tab-lar04.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Vorgabewert 05
  IF plpo_tab-vgw05(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGW05'.
    bdc_tab-fval = plpo_tab-vgw05.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Einheit Vorgabewert 05
  IF plpo_tab-vge05(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGE05'.
    bdc_tab-fval = plpo_tab-vge05.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Leistungsart 05
  IF plpo_tab-lar05(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-LAR05'.
    bdc_tab-fval = plpo_tab-lar05.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Vorgabewert 06
  IF plpo_tab-vgw06(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGW06'.
    bdc_tab-fval = plpo_tab-vgw06.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Einheit Vorgabewert 06
  IF plpo_tab-vge06(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-VGE06'.
    bdc_tab-fval = plpo_tab-vge06.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Leistungsart 06
  IF plpo_tab-lar06(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-LAR06'.
    bdc_tab-fval = plpo_tab-lar06.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Geschäftsprozess
  IF plpo_tab-prz01(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-PRZ01'.
    bdc_tab-fval = plpo_tab-prz01.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Erholzeit
  IF plpo_tab-zmerh(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-ZMERH'.
    bdc_tab-fval = plpo_tab-zmerh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Einheit Erholzeit
  IF plpo_tab-zeier(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-ZEIER'.
    bdc_tab-fval = plpo_tab-zeier.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Vorgabewertermittlung
* Ermittlungsart
  IF plpo_tab-zerma(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-ZERMA'.
    bdc_tab-fval = plpo_tab-zerma.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Datum
  IF plpo_tab-zgdat(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-ZGDAT'.
    bdc_tab-fval = plpo_tab-zgdat.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Unterlage
  IF plpo_tab-zulnr(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-ZULNR'.
    bdc_tab-fval = plpo_tab-zulnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Referenznummer
  IF plpo_tab-zcode(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-ZCODE'.
    bdc_tab-fval = plpo_tab-zcode.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Nur für Vorgänge
  IF plpo_tab-uvorn EQ space OR
     plpo_tab-uvorn(1) EQ const_nodata.

*   Übernahme in Aufträgen
*   Verdichtungsart
    IF plpo_tab-verdart(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-VERDART'.
      bdc_tab-fval = plpo_tab-verdart.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Untervorgänge im Auftrag
    IF plpo_tab-uavo_aufl(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-UAVO_AUFL'.
      bdc_tab-fval = plpo_tab-uavo_aufl.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Übergangszeiten
*   Reduzierungsstrategie
    IF plpo_tab-rstra(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-RSTRA'.
      bdc_tab-fval = plpo_tab-rstra.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Abrüsten und Liegen erfolgen parallel
    IF plpo_tab-ablipkz(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ABLIPKZ'.
      bdc_tab-fval = plpo_tab-ablipkz.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   max. Liegezeit
    IF plpo_tab-zlmax(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZLMAX'.
      bdc_tab-fval = plpo_tab-zlmax.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Einheit max. Liegezeit
    IF plpo_tab-zeilm(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZEILM'.
      bdc_tab-fval = plpo_tab-zeilm.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   prozeßbedingte Liegezeit
    IF plpo_tab-zlpro(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZLPRO'.
      bdc_tab-fval = plpo_tab-zlpro.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Einheit prozeßbedingte Liegezeit
    IF plpo_tab-zeilp(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZEILP'.
      bdc_tab-fval = plpo_tab-zeilp.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   normale Wartezeit
    IF plpo_tab-zwnor(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZWNOR'.
      bdc_tab-fval = plpo_tab-zwnor.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Einheit normale Wartezeit
    IF plpo_tab-zeiwn(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZEIWN'.
      bdc_tab-fval = plpo_tab-zeiwn.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Minimale Wartezeit
    IF plpo_tab-zwmin(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZWMIN'.
      bdc_tab-fval = plpo_tab-zwmin.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Einheit minimale Wartezeit
    IF plpo_tab-zeiwm(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZEIWM'.
      bdc_tab-fval = plpo_tab-zeiwm.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   normale Transportzeit
    IF plpo_tab-ztnor(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZTNOR'.
      bdc_tab-fval = plpo_tab-ztnor.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Einheit normale Transportzeit
    IF plpo_tab-zeitn(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZEITN'.
      bdc_tab-fval = plpo_tab-zeitn.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   minimale Transportzeit
    IF plpo_tab-ztmin(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZTMIN'.
      bdc_tab-fval = plpo_tab-ztmin.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Einheit minimale Transportzeit
    IF plpo_tab-zeitm(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZEITM'.
      bdc_tab-fval = plpo_tab-zeitm.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Splittung
*   Kennzeichen Mußsplittung
    IF plpo_tab-spmus(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-SPMUS'.
      bdc_tab-fval = plpo_tab-spmus.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Anzahl Splittungen
    IF plpo_tab-splim(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-SPLIM'.
      bdc_tab-fval = plpo_tab-splim.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Mindestbearbeitungszeit
    IF plpo_tab-zminb(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZMINB'.
      bdc_tab-fval = plpo_tab-zminb.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Einheit Mindestbearbeitungszeit
    IF plpo_tab-zeimb(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZEIMB'.
      bdc_tab-fval = plpo_tab-zeimb.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Überlappung
*   Kennzeichen Mußüberlappung
    IF plpo_tab-uemus(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-UEMUS'.
      bdc_tab-fval = plpo_tab-uemus.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Kennzeichen Kannüberlappung
    IF plpo_tab-uekan(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-UEKAN'.
      bdc_tab-fval = plpo_tab-uekan.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Kennzeichen Fließfertigung
    IF plpo_tab-flies(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-FLIES'.
      bdc_tab-fval = plpo_tab-flies.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Kennzeichen keine Überlappung
    IF plpo_tab-uenicht(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-UENICHT'.
      bdc_tab-fval = plpo_tab-uenicht.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Mindestüberlappungszeit
    IF plpo_tab-zminu(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZMINU'.
      bdc_tab-fval = plpo_tab-zminu.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Einheit Mindestüberlappungszeit
    IF plpo_tab-zeimu(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-ZEIMU'.
      bdc_tab-fval = plpo_tab-zeimu.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Mindestweitergabemenge
    IF plpo_tab-minwe(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-MINWE'.
      bdc_tab-fval = plpo_tab-minwe.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

  ELSE.

* Terminierung Untervorgänge
*   Bezug Untervorgang Start
    IF plpo_tab-bzoffb(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-BZOFFB'.
      bdc_tab-fval = plpo_tab-bzoffb.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Zeitabstand Untervorgang Start
    IF plpo_tab-offstb(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-OFFSTB'.
      bdc_tab-fval = plpo_tab-offstb.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Einheit Zeitabstand Untervorgang Start
    IF plpo_tab-ehoffb(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-EHOFFB'.
      bdc_tab-fval = plpo_tab-ehoffb.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Bezug Untervorgang Ende
    IF plpo_tab-bzoffe(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-BZOFFE'.
      bdc_tab-fval = plpo_tab-bzoffe.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Zeitabstand Untervorgang Ende
    IF plpo_tab-offste(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-OFFSTE'.
      bdc_tab-fval = plpo_tab-offste.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   Einheit Zeitabstand Untervorgang Ende
    IF plpo_tab-ehoffe(1) NE const_nodata.
      bdc_tab-fnam = 'PLPOD-EHOFFE'.
      bdc_tab-fval = plpo_tab-ehoffe.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

  ENDIF.

* allgemeine Sicht
* Ausschußfaktor
  IF plpo_tab-aufak(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-AUFAK'.
    bdc_tab-fval = plpo_tab-aufak.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Anzahl Lohnscheine
  IF plpo_tab-loanz(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-LOANZ'.
    bdc_tab-fval = plpo_tab-loanz.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Anzahl Rückmeldescheine
  IF plpo_tab-rsanz(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-RSANZ'.
    bdc_tab-fval = plpo_tab-rsanz.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Lohngruppe
  IF plpo_tab-logrp(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-LOGRP'.
    bdc_tab-fval = plpo_tab-logrp.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Lohnart
  IF plpo_tab-loart(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-LOART'.
    bdc_tab-fval = plpo_tab-loart.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Qualifikationsgrad
  IF plpo_tab-qualf(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-QUALF'.
    bdc_tab-fval = plpo_tab-qualf.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Anzahl Mitarbeiter
  IF plpo_tab-anzma(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-ANZMA'.
    bdc_tab-fval = plpo_tab-anzma.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Rüstartenschlüssel
  IF plpo_tab-rasch(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-RASCH'.
    bdc_tab-fval = plpo_tab-rasch.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Rüstfamiliengruppe
  IF plpo_tab-rfgrp(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-RFGRP'.
    bdc_tab-fval = plpo_tab-rfgrp.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Rüstfamilienschlüssel
  IF plpo_tab-rfsch(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-RFSCH'.
    bdc_tab-fval = plpo_tab-rfsch.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Selektionskennzeichen für Kalkulation
  IF plpo_tab-ckselkz(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-CKSELKZ'.
    bdc_tab-fval = plpo_tab-ckselkz.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Fremdbearbeitung
* Kz Lohnbarbeitung
  IF plpo_tab-frdlb(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-FRDLB'.
    bdc_tab-fval = plpo_tab-frdlb.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Einkaufsinfosatz
  IF plpo_tab-infnr(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-INFNR'.
    bdc_tab-fval = plpo_tab-infnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Einkaufsorganisation
  IF plpo_tab-ekorg(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-EKORG'.
    bdc_tab-fval = plpo_tab-ekorg.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Rahmenvertrag
  IF plpo_tab-ebeln(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-EBELN'.
    bdc_tab-fval = plpo_tab-ebeln.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Rahmenvertragsposition
  IF plpo_tab-ebelp(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-EBELP'.
    bdc_tab-fval = plpo_tab-ebelp.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Sortierbegriff
  IF plpo_tab-sortl(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-SORTL'.
    bdc_tab-fval = plpo_tab-sortl.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Warengruppe
  IF plpo_tab-matkl(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-MATKL'.
    bdc_tab-fval = plpo_tab-matkl.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Einkaufsgruppe
  IF plpo_tab-ekgrp(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-EKGRP'.
    bdc_tab-fval = plpo_tab-ekgrp.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Kreditor
  IF plpo_tab-lifnr(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-LIFNR'.
    bdc_tab-fval = plpo_tab-lifnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Planlieferzeit
  IF plpo_tab-plifz(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-PLIFZ'.
    bdc_tab-fval = plpo_tab-plifz.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Preiseinheit
  IF plpo_tab-peinh(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-PEINH'.
    bdc_tab-fval = plpo_tab-peinh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Kostenart
  IF plpo_tab-sakto(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-SAKTO'.
    bdc_tab-fval = plpo_tab-sakto.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Nettopreis
  IF plpo_tab-preis(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-PREIS'.
    bdc_tab-fval = plpo_tab-preis.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Währungsschlüssel
  IF plpo_tab-waers(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-WAERS'.
    bdc_tab-fval = plpo_tab-waers.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Prüfart
  IF plpo_tab-qpart(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-QPART'.
    bdc_tab-fval = plpo_tab-qpart.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Benutzerdaten
* Feldschlüssel
  IF plpo_tab-slwid(1) NE const_nodata.
    bdc_tab-fnam = 'PLPOD-SLWID'.
    bdc_tab-fval = plpo_tab-slwid.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


*-- QM Daten ----------------------------------- CPDO 1219
* --- QM Allgemein
* Erfassungssicht
  IF plpo_tab-erfsicht(1) NE const_nodata
    AND NOT plpo_tab-erfsicht IS INITIAL.
    bdc_tab-fnam = 'PLPOD-ERFSICHT'.
    bdc_tab-fval = plpo_tab-erfsicht.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* -- QM: Prüfpunkte
* Ablaufvariante des Prüfpunktabschlusses
  IF plpo_tab-qppktabs(1) NE const_nodata
    AND NOT plpo_tab-qppktabs IS INITIAL.
    bdc_tab-fnam = 'PLPOD-QPPKTABS'.
    bdc_tab-fval = plpo_tab-qppktabs.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Datenkonsistenz prüfen: Nur eine Möglichkeit erlaubt
  IF (  plpo_tab-qkzprzeit = const-flg_yes
    AND ( plpo_tab-qkzprmeng = const-flg_yes
       OR plpo_tab-qkzprfrei = const-flg_yes ) )
    OR  ( plpo_tab-qkzprfrei = const-flg_yes
      AND plpo_tab-qkzprmeng = const-flg_yes ) .
*     error
  ENDIF.


* Kennzeichen: Takt = Zeit (Zeitbezug) --- 1)
  IF plpo_tab-qkzprzeit(1) NE const_nodata
    AND NOT plpo_tab-qkzprzeit IS INITIAL.

    bdc_tab-fnam = 'PLPOD-QKZPRZEIT'.
    bdc_tab-fval = plpo_tab-qkzprzeit.
    APPEND bdc_tab.
    CLEAR bdc_tab.

* Zeitfaktor für Prüfpunkte
    IF plpo_tab-qrastzfak(1) NE const_nodata
      AND NOT plpo_tab-qrastzfak IS INITIAL.
      bdc_tab-fnam = 'PLPOD-QRASTZFAK'.
      bdc_tab-fval = plpo_tab-qrastzfak.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Zeiteinheit für Prüfpunkte
    IF plpo_tab-qrastzeht(1) NE const_nodata
      AND NOT plpo_tab-qrastzeht IS INITIAL.
      bdc_tab-fnam = 'PLPOD-QRASTZEHT'.
      bdc_tab-fval = plpo_tab-qrastzeht.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

  ENDIF.                               " Zeitbezug


* Kennzeichen: Takt = Menge (Mengenbezug) -- 2)
  IF plpo_tab-qkzprmeng(1) NE const_nodata
    AND NOT plpo_tab-qkzprmeng IS INITIAL.

    bdc_tab-fnam = 'PLPOD-QKZPRMENG'.
    bdc_tab-fval = plpo_tab-qkzprmeng.
    APPEND bdc_tab.
    CLEAR bdc_tab.

* Menge zwischen zwei Prüfungen
    IF plpo_tab-qrastmeng(1) NE const_nodata
      AND NOT plpo_tab-qrastmeng IS INITIAL.
      bdc_tab-fnam = 'PLPOD-QRASTMENG'.
      bdc_tab-fval = plpo_tab-qrastmeng.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Rastermengeneinheit
    IF plpo_tab-qrastereh(1) NE const_nodata
      AND NOT plpo_tab-qrastereh IS INITIAL.
      bdc_tab-fnam = 'PLPOD-QRASTEREH'.
      bdc_tab-fval = plpo_tab-qrastereh.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

  ENDIF.                               "Mengenbezug


* Kennzeichen: Takt ohne Bezug zu Zeit oder Menge -- 3)
  IF plpo_tab-qkzprfrei(1) NE const_nodata
    AND NOT plpo_tab-qkzprfrei IS INITIAL.

    bdc_tab-fnam = 'PLPOD-QKZPRFREI'.
    bdc_tab-fval = plpo_tab-qkzprfrei.
    APPEND bdc_tab.
    CLEAR bdc_tab.

  ENDIF.


* Kz.: Vorgang mit bestandsrelevanter Teilloszuordnung
  IF plpo_tab-qkztlsbest(1) NE const_nodata
    AND NOT plpo_tab-qkztlsbest IS INITIAL.
    bdc_tab-fnam = 'PLPOD-QKZTLSBEST'.
    bdc_tab-fval = plpo_tab-qkztlsbest.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Mengenrückmeldung je Teillos
  IF plpo_tab-qkzztmg1(1) NE const_nodata
    AND NOT plpo_tab-qkzztmg1 IS INITIAL.
    bdc_tab-fnam = 'PLPOD-QKZZTMG1'.
    bdc_tab-fval = plpo_tab-qkzztmg1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCPDO_1200


*----------------------------------------------------------------------*
*   FORM FILL_SAPLCPDS_1010
*----------------------------------------------------------------------*
*   DYNPRO SAPLCPDS_1010 VERSORGEN                                     *
*----------------------------------------------------------------------*
FORM fill_saplcpds_1010
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDS'.
  bdc_tab-dynpro = '1010'.
  bdc_tab-dynbegin = const-flg_yes.

* Kurztext
  IF plfl_tab-ltxa1(1) NE const_nodata.
    bdc_tab-fnam = 'PLFLD-LTXA1'.
    bdc_tab-fval = plfl_tab-ltxa1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Ausrichtungsschlüssel
  IF plfl_tab-auschl(1) NE const_nodata.
    bdc_tab-fnam = 'PLFLD-AUSCHL'.
    bdc_tab-fval = plfl_tab-auschl.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCPDS_1010

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCPDS_1200
*----------------------------------------------------------------------*
*   DYNPRO SAPLCPDS_1200 VERSORGEN                                     *
*----------------------------------------------------------------------*
FORM fill_saplcpds_1200
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDS'.
  bdc_tab-dynpro = '1200'.
  bdc_tab-dynbegin = const-flg_yes.

*--------Begin of Insertion Note 685738----------*
*Sequence Number
  IF plfl_tab-plnfl(1) NE const_nodata.
    bdc_tab-fnam = 'PLFLD-PLNFL'.
    bdc_tab-fval = plfl_tab-plnfl.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
*--------End of Insertion Note 685738----------*

* Kurztext
  IF plfl_tab-ltxa1(1) NE const_nodata.
    bdc_tab-fnam = 'PLFLD-LTXA1'.
    bdc_tab-fval = plfl_tab-ltxa1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

  IF plfl_tab-flgat <> const-kz_alt.
* Ausrichtungsschlüssel
    IF plfl_tab-auschl(1) NE const_nodata.
      bdc_tab-fnam = 'PLFLD-AUSCHL'.
      bdc_tab-fval = plfl_tab-auschl.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.
  ENDIF.

* Absprungvorgang
  IF plfl_tab-vornr1(1) NE const_nodata.
    bdc_tab-fnam = 'PLFLD-VORNR1'.
    bdc_tab-fval = plfl_tab-vornr1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Rücksprungvorgang
  IF plfl_tab-vornr2(1) NE const_nodata.
    bdc_tab-fnam = 'PLFLD-VORNR2'.
    bdc_tab-fval = plfl_tab-vornr2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

  IF plfl_tab-flgat = const-kz_alt.
* Losgröße von
    IF plfl_tab-losvn(1) NE const_nodata.
      bdc_tab-fnam = 'PLFLD-LOSVN'.
      bdc_tab-fval = plfl_tab-losvn.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* Losgröße bis
    IF plfl_tab-losbs(1) NE const_nodata.
      bdc_tab-fnam = 'PLFLD-LOSBS'.
      bdc_tab-fval = plfl_tab-losbs.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCPDS_1200

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCZDI_1010
*----------------------------------------------------------------------*
*   Dynpro SAPLCZDI_1010 versorgen
*----------------------------------------------------------------------*
FORM fill_saplczdi_1010
     USING: value(okcode) LIKE okcode
            value(in_cnt) TYPE i.
* PLANGRUPPENZÄHLER
  bdc_tab-fnam = 'MAPL-PLNAL('.
  WRITE in_cnt TO bdc_tab-fnam+11(1).
  WRITE ')'    TO bdc_tab-fnam+12(1).
  bdc_tab-fval = mapl_tab-plnal.
  APPEND bdc_tab.
  CLEAR bdc_tab.
* Materialnummer
  bdc_tab-fnam = 'MAPL-MATNR('.
  WRITE in_cnt TO bdc_tab-fnam+11(1).
  WRITE ')'    TO bdc_tab-fnam+12(1).
  bdc_tab-fval = mapl_tab-matnr.
  APPEND bdc_tab.
  CLEAR bdc_tab.
* Werk
  bdc_tab-fnam = 'MAPL-WERKS('.
  WRITE in_cnt TO bdc_tab-fnam+11(1).
  WRITE ')'    TO bdc_tab-fnam+12(1).
  bdc_tab-fval = mapl_tab-werks.
  APPEND bdc_tab.
  CLEAR bdc_tab.
* Verkaufsbeleg
  IF mapl_tab-vbeln(1) NE const_nodata AND
     NOT mapl_tab-vbeln IS INITIAL.
    bdc_tab-fnam = 'MAPL-VBELN('.
    WRITE in_cnt TO bdc_tab-fnam+11(1).
    WRITE ')'    TO bdc_tab-fnam+12(1).
    bdc_tab-fval = mapl_tab-vbeln.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* Position
  IF mapl_tab-posnr(1) NE const_nodata AND
     NOT mapl_tab-posnr IS INITIAL.
    bdc_tab-fnam = 'MAPL-POSNR('.
    WRITE in_cnt TO bdc_tab-fnam+11(1).
    WRITE ')'    TO bdc_tab-fnam+12(1).
    bdc_tab-fval = mapl_tab-posnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* PSP-Element
  IF mapl_tab-pspnr(1) NE const_nodata AND
     NOT mapl_tab-pspnr IS INITIAL.
    bdc_tab-fnam = 'MAPL-PSPNR('.
    WRITE in_cnt TO bdc_tab-fnam+11(1).
    WRITE ')'    TO bdc_tab-fnam+12(1).
    bdc_tab-fval = mapl_tab-pspnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.
* OK-Code
  IF NOT okcode IS INITIAL AND in_cnt EQ 5.

    PERFORM send_okcode                                     "note 138204
            USING 'P++'.

    CLEAR bdc_tab.
    bdc_tab-program = 'SAPLCZDI'.
    bdc_tab-dynpro = '1010'.
    bdc_tab-dynbegin = const-flg_yes.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCZDI_1010

*----------------------------------------------------------------------*
*   FORM FILL_SAPLCP03_1060                                            *
*----------------------------------------------------------------------*
*   Dynpro SAPLCP03_1060 versorgen                                     *
*----------------------------------------------------------------------*
FORM fill_saplcp03_1060
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCP03'.
  bdc_tab-dynpro = '1060'.
  bdc_tab-dynbegin = const-flg_yes.

* Folgenart
  CASE plfl_tab-flgat.
* parallele Folge
    WHEN const-kz_par.
      bdc_tab-fnam = 'RC275-SEQ_PAR'.
      bdc_tab-fval = const-mark.
* alternative Folge
    WHEN const-kz_alt.
      bdc_tab-fnam = 'RC275-SEQ_ALT'.
      bdc_tab-fval = const-mark.
  ENDCASE.

  APPEND bdc_tab.
  CLEAR bdc_tab.

* OK-Code
  IF NOT okcode IS INITIAL.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLCP03_1060

*----------------------------------------------------------------------*
*   FORM FILL_SAPLSPO1_0100
*----------------------------------------------------------------------*
*   Dynpro SAPLSPO1_0100 versorgen                                     *
*----------------------------------------------------------------------*
FORM fill_saplspo1_0100
     USING value(okcode) LIKE okcode.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLSPO1'.
  bdc_tab-dynpro = '0100'.
  bdc_tab-dynbegin = const-flg_yes.

* OK-Code
  IF NOT okcode IS INITIAL.
    bdc_tab-fnam = 'BDC_CURSOR'.
    bdc_tab-fval = okcode.
    APPEND bdc_tab.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                    "FILL_SAPLSPO1_0100
*----------------------------------------------------------------------*
*   FORM FILL_SAPLSTXX_1100
*----------------------------------------------------------------------*
*   Dynpro SAPLSTXX_1100 versorgen                                     *
*----------------------------------------------------------------------*
FORM fill_saplstxx_1100
     TABLES textline_tab STRUCTURE ltext_tab.
*
  DATA line_counter TYPE i.
*
* Positionieren auf letzte Zeile
  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLSTXX'.
  bdc_tab-dynpro = '1100'.
  bdc_tab-dynbegin = const-flg_yes.
  bdc_tab-fnam = 'BDC_OKCODE'.
  bdc_tab-fval = '/22'.
  APPEND bdc_tab.
*
  line_counter = 0.
  LOOP AT textline_tab.
    IF sy-tabix = 1.
      CLEAR bdc_tab.
      bdc_tab-program = 'SAPLSTXX'.
      bdc_tab-dynpro = '1100'.
      bdc_tab-dynbegin = const-flg_yes.
      bdc_tab-fnam = 'RSTXT-TXPARGRAPH(2)'.
      bdc_tab-fval = textline_tab-txpargraph.
      APPEND bdc_tab.
*
      CLEAR bdc_tab.
      bdc_tab-fnam = 'RSTXT-TXLINE(2)'.
      bdc_tab-fval = textline_tab-text.
      APPEND bdc_tab.
*
      CLEAR bdc_tab.
      bdc_tab-fnam = 'BDC_OKCODE'.
      bdc_tab-fval = '/23'.
      APPEND bdc_tab.
    ELSE.
*
      CLEAR bdc_tab.
      bdc_tab-program = 'SAPLSTXX'.
      bdc_tab-dynpro = '1100'.
      bdc_tab-dynbegin = const-flg_yes.
      bdc_tab-fnam = 'RSTXT-TXPARGRAPH(3)'.
      bdc_tab-fval = textline_tab-txpargraph.
      APPEND bdc_tab.
*
      CLEAR bdc_tab.
      bdc_tab-fnam = 'RSTXT-TXLINE(3)'.
      bdc_tab-fval = textline_tab-text.
      APPEND bdc_tab.
*
      CLEAR bdc_tab.
      bdc_tab-fnam = 'BDC_OKCODE'.
      bdc_tab-fval = '/23'.
      APPEND bdc_tab.
    ENDIF.
*
    ADD 1 TO line_counter.
  ENDLOOP.
*

* save button wurde deaktiviert
*  CLEAR BDC_TAB.
*  BDC_TAB-FNAM = 'BDC_OKCODE'
*  BDC_TAB-FVAL = '/11'.
*  APPEND BDC_TAB.

*
  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLSTXX'.
  bdc_tab-dynpro = '1100'.
  bdc_tab-dynbegin = const-flg_yes.
  bdc_tab-fnam = 'BDC_OKCODE'.
  bdc_tab-fval = '/03'.
  APPEND bdc_tab.
*
ENDFORM.                    "FILL_SAPLSTXX_1100

*----------------------------------------------------------------------*
*   FORM FILL_TABLES_PER_TRANSACTION                                   *
*----------------------------------------------------------------------*
*   interne Tabellen pro Plan-Objekt und Transaktion füllen
*----------------------------------------------------------------------*
FORM fill_tables_per_transaction.

  FIELD-SYMBOLS: <x_obj_line> TYPE x,
                 <x_obj>      TYPE x.

* vorher Tabellen initialisieren
  REFRESH:
           mapl_tab,
           plko_tab,
           plkotx_tab,
           plfl_tab,
           plfltx_tab,
           plpo_tab,
           plpotx_tab,
           plfh_tab,
           plfhtx_tab,
           bi_plmk_tab,
           bi_plmktx_tab,
*           bi_plmw_tab,
           plmz_tab.
  CLEAR:
           mapl_tab,
           plko_tab,
           plkotx_tab,
           plfl_tab,
           plfltx_tab,
           plpo_tab,
           plpotx_tab,
           plfh_tab,
           plfhtx_tab,
           bi_plmk_tab,
           bi_plmktx_tab,
*           bi_plmw_tab,
           plmz_tab.

* jeweils die zu pflegenden Plan-Objekte für diese Transaktion einlesen
* d.h. die Input_file "abloopen" bis zur nächsten Transaktion
  DO.

    READ DATASET inpfile INTO inp_record.
    IF sy-subrc NE 0.
      flg-eof = const-flg_yes.
      EXIT.
    ENDIF.

* unterschiedliche Satztypen der Eingabe-Datei
    CASE inp_record-type.
* Mappensatz
      WHEN rectype-head.
*        bi000 = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN bi000      TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        WRITE /.
        WRITE: /1 text-024,
                  bi000-group.
        WRITE: /1 text-026,
                  bi000-mandt.
        WRITE: /1 text-025,
                  bi000-usnam.
        WRITE: /1 text-027,
                  bi000-xkeep.
        WRITE: /1 text-028,
                  bi000-start.
        current_head = bi000.
        IF flg-first_batch_input IS INITIAL.
          flg-new_head = const-flg_yes.
          EXIT.
        ENDIF.
* Transaktionssatz
      WHEN rectype-next.
*        bi001 = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN bi001      TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

*       if not previous_transaction is initial and
*              flg-first_batch_input is initial.
*            perform close_batch_input.
*            commit work.
*            perform open_batch_input.
*       endif.
        IF previous_transaction IS INITIAL.
          previous_transaction = bi001-tcode.
        ELSE.
          EXIT.
        ENDIF.
* Material
      WHEN rectype-mapl.
        ADD 1 TO count-mapl_in.
*        mapl_tab = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN mapl_tab   TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        APPEND mapl_tab.
* Plankopf
      WHEN rectype-plko.
        ADD 1 TO count-plko_in.
*        plko_tab = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN plko_tab   TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        PERFORM check_input_facility.
        APPEND plko_tab.
* Plan-Langtext
      WHEN rectype-plkotx.
        ADD 1 TO count-plkotx_in.
*        plkotx_tab = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN plkotx_tab TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        APPEND plkotx_tab.
* Folge
      WHEN rectype-plfl.
        ADD 1 TO count-plfl_in.
*        plfl_tab = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN plfl_tab   TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        APPEND plfl_tab.
* Folgen-Langtext
      WHEN rectype-plfltx.
        ADD 1 TO count-plfltx_in.
*        plfltx_tab = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN plfltx_tab TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        APPEND plfltx_tab.
* Vorgang
      WHEN rectype-plpo.
        ADD 1 TO count-plpo_in.
*        plpo_tab = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN plpo_tab   TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        APPEND plpo_tab.
* Vorgangs-Langtext
      WHEN rectype-plpotx.
        ADD 1 TO count-plpotx_in.
*        plpotx_tab = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN plpotx_tab TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        APPEND plpotx_tab.
* Fertigungshilfsmittel
      WHEN rectype-plfh.
        ADD 1 TO count-plfh_in.
*        plfh_tab = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN plfh_tab   TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        APPEND plfh_tab.
* Fertigungshilfsmittel-Langtext
      WHEN rectype-plfhtx.
        ADD 1 TO count-plfhtx_in.
*        plfhtx_tab = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN plfhtx_tab TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        APPEND plfhtx_tab.
* Materialkomponente
      WHEN rectype-plmz.
        ADD 1 TO count-plmz_in.
*        plmz_tab = inp_record.
        ASSIGN inp_record TO <x_obj_line> CASTING.
        ASSIGN plmz_tab   TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        APPEND plmz_tab.
* Merkmal (inspection characteristic)
      WHEN rectype-plmk.
        ADD 1 TO count-plmk_in.
*        bi_plmk_tab = inp_record.
        ASSIGN inp_record  TO <x_obj_line> CASTING.
        ASSIGN bi_plmk_tab TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        APPEND bi_plmk_tab.
* Merkmal-Langtext (characteristic long text)
      WHEN rectype-plmktx.
        ADD 1 TO count-plmktx_in.
*        bi_plmktx_tab = inp_record.
        ASSIGN inp_record    TO <x_obj_line> CASTING.
        ASSIGN bi_plmktx_tab TO <x_obj>      CASTING.
        <x_obj> = <x_obj_line>.

        APPEND bi_plmktx_tab.
* Merkmalswert
      WHEN rectype-plmw.
*        add 1 to count-plmw_in.
*        bi_plmw_tab = inp_record.
*        append bi_plmw_tab.

    ENDCASE.
  ENDDO.

ENDFORM.                    "FILL_TABLES_PER_TRANSACTION

*----------------------------------------------------------------------*
*   FORM GET_BOM_DATA                                                  *
*----------------------------------------------------------------------*
*   Stücklistendaten besorgen                                          *
*----------------------------------------------------------------------*
FORM get_bom_data.

  DATA: BEGIN OF stlkn_struct,
          prefix(4) TYPE c,
          posnr LIKE stpo-posnr,
        END OF stlkn_struct.
  DATA: stpob_posnr LIKE stpob-posnr.

  DATA: l_flg_ftrel TYPE xfeld.

* get customer settings for BOM explosion (flag FTREL)
  CALL FUNCTION 'CM_DI_GET_FTREL_FLAG'
    IMPORTING
      e_flg_ftrel  = l_flg_ftrel.

* Aufbereitung der Daten
  CLEAR plmzd_data.
  IF plmz_tab-bomat(1) NE const_nodata AND
     NOT plmz_tab-bomat IS INITIAL.
    PERFORM int_format_matnr USING const_bomat_fieldname
                                   plmz_tab-bomat
                                   plmzd_data-bomat.
  ENDIF.
  IF plmz_tab-bomty(1) NE const_nodata AND
     NOT plmz_tab-bomty IS INITIAL.
    WRITE plmz_tab-bomty TO plmzd_data-bomty.
  ENDIF.
  IF plmz_tab-bomnr(1) NE const_nodata AND
     NOT plmz_tab-bomnr IS INITIAL.
    PERFORM int_format_stlnr USING const_stlnr_fieldname
                                   plmz_tab-bomnr
                                   plmzd_data-bomnr.
  ENDIF.
  IF plmz_tab-bomal(1) NE const_nodata AND
     NOT plmz_tab-bomal IS INITIAL.
    PERFORM int_format_stlal USING const_stlal_fieldname
                                   plmz_tab-bomal
                                   plmzd_data-bomal.
  ENDIF.
  IF plmz_tab-boman(1) NE const_nodata AND
     NOT plmz_tab-boman IS INITIAL.
    WRITE plmz_tab-boman TO plmzd_data-boman.
  ENDIF.
  IF plmz_tab-matnr(1) NE const_nodata AND
     NOT plmz_tab-matnr IS INITIAL.
    PERFORM int_format_matnr USING const_matnr_fieldname
                                   plmz_tab-matnr
                                   plmzd_data-matnr.
  ENDIF.
  IF plmz_tab-werks(1) NE const_nodata AND
     NOT plmz_tab-werks IS INITIAL.
    WRITE plmz_tab-werks TO plmzd_data-werks.
  ENDIF.
  IF plmz_tab-stlty(1) NE const_nodata AND
     NOT plmz_tab-stlty IS INITIAL.
    WRITE plmz_tab-stlty TO plmzd_data-stlty.
  ENDIF.
  IF plmz_tab-stlnr(1) NE const_nodata AND
     NOT plmz_tab-stlnr IS INITIAL.
    PERFORM int_format_stlnr USING const_stlnr_fieldname
                                   plmz_tab-stlnr
                                   plmzd_data-stlnr.
  ENDIF.
  IF plmz_tab-stlal(1) NE const_nodata AND
     NOT plmz_tab-stlal IS INITIAL.
    PERFORM int_format_stlal USING const_stlal_fieldname
                                   plmz_tab-stlal
                                   plmzd_data-stlal.
  ENDIF.
  IF plmz_tab-stlkn(1) NE const_nodata AND
     NOT plmz_tab-stlkn IS INITIAL.
    PERFORM int_format_stlkn USING const_stlkn_fieldname
                                   plmz_tab-stlkn
                                   plmzd_data-stlkn.
  ENDIF.
  IF plmz_tab-aufst(1) NE const_nodata AND
     NOT plmz_tab-aufst IS INITIAL AND
         plmz_tab-aufst NE '0 ' AND
         plmz_tab-aufst NE ' 0' AND
         plmz_tab-aufst NE '00'.
    PERFORM int_format_aufst USING const_aufst_fieldname
                                   plmz_tab-aufst
                                   plmzd_data-aufst.
  ENDIF.
  IF plmz_tab-aufwg(1) NE const_nodata AND
     NOT plmz_tab-aufwg IS INITIAL AND
         plmz_tab-aufwg NE '0 ' AND
         plmz_tab-aufwg NE ' 0' AND
         plmz_tab-aufwg NE '00'.
    PERFORM int_format_aufst USING const_aufwg_fieldname
                                   plmz_tab-aufwg
                                   plmzd_data-aufwg.
  ENDIF.

* Beim Wechsel von Kopfmaterial- oder Stücklistendaten
  IF plmz_tab-bomat NE mapl_sav-matnr   OR
     plmz_tab-werks NE mapl_sav-werks   OR
     plmz_tab-boman NE mapl_sav-boman   OR
     plmz_tab-bomal NE mapl_sav-bomal.
    mapl_sav-matnr = plmz_tab-bomat.
    mapl_sav-werks = plmz_tab-werks.
    mapl_sav-boman = plmz_tab-boman.
    mapl_sav-bomal = plmz_tab-bomal.
* für Lagertypen (konfigurierte Materialien) wird die Stückliste
* nicht mit dem konfigurierten Material als Kopfmaterial aufgelöst,
* sondern mit dem ursprügnlichen nicht konfigurierten Material.
* Falls nötig wird dieses Material hier ermittelt
    DATA: e_bomat LIKE plmz_tab-bomat,
          e_werks LIKE plmz_tab-werks,
          e_boman LIKE plmz_tab-boman,
          e_bomal LIKE plmz_tab-bomal.

    CALL FUNCTION 'CM_DI_DET_BOMAT_BTCI'
      EXPORTING
        i_bomat = plmzd_data-bomat
        i_werks = plmzd_data-werks
        i_boman = plmzd_data-boman
        i_bomal = plmzd_data-bomal
      IMPORTING
        e_bomat = e_bomat
        e_werks = e_werks
        e_boman = e_boman
        e_bomal = e_bomal.


* Stücklistenauflösung zum Material
    CALL FUNCTION 'CS_BOM_EXPL_MAT_V2'
      EXPORTING
        aufsw                 = const-flg_yes
        ftrel                 = l_flg_ftrel
        mdmps                 = const-flg_yes
        mdnot                 = const-flg_yes
        capid                 = space
        datuv                 = sttag_expl
        mehrs                 = const-flg_yes
        mtnrv                 = e_bomat " PLMZD_DATA-BOMAT
        stlal                 = e_bomal " PLMZD_DATA-BOMAL
        stlan                 = e_boman " PLMZD_DATA-BOMAN
        werks                 = e_werks " PLMZD_DATA-WERKS
      IMPORTING
        topmat                = topmat
      TABLES
        stb                   = stb_tab
      EXCEPTIONS
        missing_authorization = 01
        no_bom_found          = 02
        no_suitable_bom_found = 03
        OTHERS                = 04.
  ENDIF.
  CHECK sy-subrc = 0.
* Verprobung Stücklistendaten des Kopfes
  IF NOT plmz_tab-bomty IS INITIAL.    "Stücklistentyp
    CHECK topmat-stlty = plmzd_data-bomty.          "des Kopfes
  ENDIF.
  IF ( NOT plmz_tab-bomnr IS INITIAL ).  "Stücklistennummer
    CHECK topmat-stlnr = plmzd_data-bomnr.          "des Kopfes
  ENDIF.
* Verprobung Komponentendaten
  CLEAR stb_tab.
  CLEAR stpob_posnr.
* Positionsnummer vorbereiten, falls angegeben
  IF plmz_tab-stlkn(1) NE const_nodata AND
     NOT plmz_tab-stlkn IS INITIAL.
    MOVE plmz_tab-stlkn TO stlkn_struct.
    IF stlkn_struct-prefix EQ '*POS'.
      IF NOT stlkn_struct-posnr IS INITIAL.
        WRITE stlkn_struct-posnr TO stpob_posnr.
      ENDIF.
    ENDIF.
  ENDIF.
* Prüfen, ob mit den in BIPMZ angegebenen Parametern
* Komponente, Stücklistennummer, -knoten, Pos.nr., Stufe/weg
* (Werk, Verwendung und Alternative sind eindeutig)
* eine Stücklistenposition existiert
  LOOP AT stb_tab.
    CHECK stb_tab-idnrk = plmzd_data-matnr.      "Komponente
    IF NOT plmz_tab-stlty IS INITIAL.  "Stücklistentyp
      CHECK stb_tab-stlty = plmzd_data-stlty.
    ENDIF.
    IF ( NOT plmz_tab-stlnr IS INITIAL ). "Stücklistennummer
      CHECK stb_tab-stlnr = plmzd_data-stlnr.
    ENDIF.
    IF NOT plmz_tab-stlal IS INITIAL.  "Stücklistenalternative
      CHECK stb_tab-stlal = plmzd_data-stlal.
    ENDIF.
    IF NOT plmz_tab-stlkn IS INITIAL.  "Stücklistenknoten
      IF NOT stlkn_struct-prefix EQ '*POS'.
        CHECK stb_tab-stvkn = plmzd_data-stlkn. "Note 717199.
      ELSEIF NOT stpob_posnr IS INITIAL.        "Positionsnummer
        CHECK stb_tab-posnr = stpob_posnr.
      ENDIF.
    ENDIF.
    IF ( NOT plmz_tab-aufst IS INITIAL ).
      CHECK stb_tab-aufst = plmzd_data-aufst.
    ENDIF.
    IF ( NOT plmz_tab-aufwg IS INITIAL ).
      CHECK stb_tab-aufwg = plmzd_data-aufwg.
    ENDIF.
* Ermittelte Stücklistendaten zurückschreiben
    MOVE: topmat-stlty TO plmz_tab-bomty,
          topmat-stlnr TO plmz_tab-bomnr,
          topmat-stlal TO plmz_tab-bomal.
    MOVE: stb_tab-stlty TO plmz_tab-stlty,
          stb_tab-stlnr TO plmz_tab-stlnr,
          stb_tab-stlal TO plmz_tab-stlal,
          stb_tab-stvkn TO plmz_tab-stlkn, "Note 717199
          stb_tab-aufst TO plmz_tab-aufst,
          stb_tab-aufwg TO plmz_tab-aufwg.
  ENDLOOP.

ENDFORM.                    "GET_BOM_DATA
*----------------------------------------------------------------------*
*   FORM OPEN_BATCH_INPUT                                              *
*----------------------------------------------------------------------*
*   Batch-Input-Mappe öffnen                                           *
*----------------------------------------------------------------------*
FORM open_batch_input.

  ADD 1 TO count-bdc_out.
* Mappe eröffnen
  CALL FUNCTION 'BDC_OPEN_GROUP'
    EXPORTING
      group    = bi000-group
      holddate = bi000-start
      keep     = bi000-xkeep
      user     = bi000-usnam.

* Konstante für keine Eingabe
  IF bi000-nodata NE space   AND
     bi000-nodata NE const_nodata.
    const_nodata = bi000-nodata.
  ENDIF.

ENDFORM.                    "OPEN_BATCH_INPUT

*----------------------------------------------------------------------*
*   FORM OPEN_FILE                                                     *
*----------------------------------------------------------------------*
*   seq. Eingabe-File öffnen                                           *
*----------------------------------------------------------------------*
FORM open_file.

* validate physical file name
*  CALL FUNCTION 'FILE_VALIDATE_NAME'
*    EXPORTING
*      logical_filename  = gc_logical_filename
*    CHANGING
*      physical_filename = inpfile
*    EXCEPTIONS
*      OTHERS            = 1.
*
*  IF sy-subrc <> 0.
**   validation failed -> terminate program
*    MESSAGE ID sy-msgid TYPE 'A' NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*
*  ENDIF.

  DATA: l_file type string,
        l_dirname type dirname_al11.

* get name of directory with the error files

  CALL 'C_SAPGPARAM' ID 'NAME'  FIELD 'DIR_GLOBAL'
                     ID 'VALUE' FIELD l_dirname.

  inpfile = l_dirname && '/prueba.txt'.

  OPEN DATASET inpfile IN TEXT MODE FOR INPUT ENCODING DEFAULT.
  IF sy-subrc NE 0.
    MESSAGE a894 WITH inpfile.
  ENDIF.

ENDFORM.                    "OPEN_FILE

*----------------------------------------------------------------------*
*   FORM PRINT_INFORMATIONS                                            *
*----------------------------------------------------------------------*
*   Verarbeitungsinformationen auf Liste ausgeben                      *
*----------------------------------------------------------------------*
FORM print_informations.

  NEW-PAGE.
  WRITE /1 text-001.
  ULINE.
  WRITE: /1 text-002,
            count-mapl_in.
  WRITE: /1 text-003,
            count-eapl_in.
  WRITE: /1 text-004,
            count-plko_in.
  WRITE: /1 text-019,
            count-plkotx_in.
  WRITE: /1 text-005,
            count-plfl_in.
  WRITE: /1 text-020,
            count-plfltx_in.
  WRITE: /1 text-007,
            count-plab_in.
  WRITE: /1 text-008,
            count-pltx_in.
  WRITE: /1 text-009,
            count-plpo_in.
  WRITE: /1 text-021,
            count-plpotx_in.
  WRITE: /1 text-010,
            count-plfh_in.
  WRITE: /1 text-022,
            count-plfhtx_in.
  WRITE: /1 text-011,
            count-plmz_in.
  WRITE: /1 text-012,
            count-plph_in.
  WRITE: /1 text-013,
            count-plft_in.
  WRITE: /1 text-014,
            count-plfv_in.
  WRITE: /1 text-015,
            count-plwp_in.
  WRITE: /1 text-016,
            count-plmk_in.
  WRITE: /1 text-029,
            count-plmktx_in.
* write: /1 text-017,
*           count-plmw_in.
  WRITE: /1 text-018,
            count-bdc_out.
  WRITE: /1 ' '.
  WRITE: /1 text-023,
            inpfile.

ENDFORM.                    "PRINT_INFORMATIONS

*----------------------------------------------------------------------*
*   FORM PROCESS_COMPONENT                                             *
*----------------------------------------------------------------------*
*   Materialkomponente abarbeiten                                      *
*----------------------------------------------------------------------*
FORM process_component.

* aus Vorgangsübersicht
  PERFORM fill_saplcpdi_1400
          USING 'MBTC'
                const-flg_yes.

* Zuordnung Materialkomponenten und zurück zur Vorgangsübersicht
  PERFORM fill_saplcmdi_1500
          USING ok-save_bu.


ENDFORM.                    "PROCESS_COMPONENT

*----------------------------------------------------------------------*
*   FORM PROCESS_HEADER                                                *
*----------------------------------------------------------------------*
*   Plankopf abarbeiten                                                *
*----------------------------------------------------------------------*
FORM process_header.

  PERFORM setup_sttag_data.

  IF NOT flg-first_screen IS INITIAL.
    CLEAR flg-first_screen.
* Einstiegsbild
    CASE plko_tab-plnty.

      WHEN const-plnty_nor.            "Arbeitsplan
        PERFORM fill_saplcpdi_1010
                USING ok-task_list_overview_alue.

      WHEN const-plnty_fam.            "Prüfplan
        PERFORM fill_saplcpdi_8010
                USING ok-task_list_overview_alue.

      WHEN OTHERS.                     "Standardplan
        PERFORM fill_saplcpdi_1001
                USING ok-task_list_overview_alue.

    ENDCASE.
  ELSE.
    PERFORM fill_saplcpdi_1200
            USING ok-deselect_all_malo.
  ENDIF.

* Planübersicht
  PERFORM fill_saplcpdi_1200
          USING ok-new_entries_anlg.
* Kopf Allg. Sicht
  PERFORM fill_saplcpda_1200
          USING ok-task_list_overview_alue
                space.
* Langtext Kopf aus Planübersicht
  IF NOT plko_tab-txtsp IS INITIAL   AND
     plko_tab-txtsp NE const_nodata.
    PERFORM fill_saplcpdi_1200
            USING ok-long_text_ltxt.
    PERFORM process_header_text.
  ENDIF.
* Material-Planzuordnung
  PERFORM process_mat_routing.
*
  flg-header = const-flg_yes.
  CLEAR flg-sequence.
*
ENDFORM.                    "PROCESS_HEADER

*----------------------------------------------------------------------*
*   FORM PROCESS_HEADER_TEXT                                           *
*----------------------------------------------------------------------*
*   Langtext Kopf                                                      *
*----------------------------------------------------------------------*
FORM process_header_text.
*
  CLEAR ltext_tab.
  REFRESH ltext_tab.
*
  LOOP AT plkotx_tab WHERE plnty = plko_tab-plnty AND
                           plnnr = plko_tab-plnnr AND
                           plnal = plko_tab-plnal.
    MOVE-CORRESPONDING plkotx_tab TO ltext_tab.
    APPEND ltext_tab.
  ENDLOOP.
*
  PERFORM fill_saplstxx_1100 TABLES ltext_tab.
*
ENDFORM.                    "PROCESS_HEADER_TEXT

*----------------------------------------------------------------------*
*   FORM PROCESS_MAT_ROUTING                                           *
*----------------------------------------------------------------------*
*   Zuordnung Material - Plan abarbeiten                               *
*----------------------------------------------------------------------*
FORM process_mat_routing.

  DATA: flg_mapl.
* IN_CNT ermöglicht, nicht nur eine Zeile des Step-Loops zu füllen,
* sondern alle fünf Zeilen, welche im CZDI 1010 angeboten werden.
  DATA: in_cnt TYPE i.
  DATA: l_dynpro         LIKE bdc_tab-dynpro .
  DATA: ok_code_flag.

  CASE plko_tab-plnty.
    WHEN const-plnty_nor.
      l_dynpro = '1010' .
    WHEN const-plnty_fam.
      l_dynpro = '4010' .
    WHEN OTHERS.
      l_dynpro = '1010' .
  ENDCASE.

  CLEAR flg_mapl.
  MOVE 2 TO in_cnt.
* Tabelle Material-Planzuordnungen abarbeiten
  LOOP AT mapl_tab.
    CHECK mapl_tab-plnty = plko_tab-plnty
      AND mapl_tab-plnnr = plko_tab-plnnr
      AND mapl_tab-plnal = plko_tab-plnal.
    IF flg_mapl IS INITIAL.
* auf Zuordnung positionieren
      PERFORM fill_saplcpdi_1200
              USING ok-matl_plan_assignment_mtue.
* Einstieg: auf letzter Seite positionieren
      CLEAR bdc_tab.
      bdc_tab-program = 'SAPLCZDI'.
      bdc_tab-dynpro = l_dynpro.
      bdc_tab-dynbegin = const-flg_yes.
      PERFORM send_okcode USING ok-new_entries_anlg.
      CLEAR bdc_tab.
      bdc_tab-program = 'SAPLCZDI'.
      bdc_tab-dynpro = l_dynpro.
      bdc_tab-dynbegin = const-flg_yes.
      PERFORM send_okcode USING 'P+'.
      PERFORM send_okcode USING 'P++'.
      CLEAR bdc_tab.

      bdc_tab-program = 'SAPLCZDI'.
      bdc_tab-dynpro = l_dynpro.
      bdc_tab-dynbegin = const-flg_yes.
      PERFORM send_okcode
              USING 'P+'.

    ENDIF.
    flg_mapl = const-flg_yes.

    IF plko_tab-plnty = const-plnty_fam .
      PERFORM fill_saplczdi_4010 USING 'P+' in_cnt.
    ELSE.
      PERFORM fill_saplczdi_1010 USING 'P+' in_cnt.
    ENDIF.

* Anzahl der möglichen Zeileneinträge erreicht ?
    IF in_cnt GE 5.
      in_cnt = 2.
    ELSE.
      in_cnt = in_cnt + 1.
    ENDIF.
  ENDLOOP.

* zurück
  IF flg_mapl = const-flg_yes.
    PERFORM send_okcode                                     "note 138204
      USING 'BACK'.
  ENDIF.

ENDFORM.                    "PROCESS_MAT_ROUTING

*----------------------------------------------------------------------*
*   FORM PROCESS_OPERATION                                             *
*----------------------------------------------------------------------*
*   Vorgänge abarbeiten                                                *
*----------------------------------------------------------------------*
FORM process_operation.

* vorheriges Dynpro ausgeben zum Einstieg in die Vorgangsübersicht
  IF flg-header = const-flg_yes.
    PERFORM fill_saplcpdi_1200
            USING ok-operation_overview_voue.
    CLEAR flg-header.
  ELSEIF flg-sequence = const-flg_yes.
    PERFORM fill_saplcpdi_1300
            USING ok-operation_overview_voue.
    CLEAR flg-sequence.
  ELSE.
* Vorgangsübersicht: neue Einträge
    PERFORM fill_saplcpdi_1400
            USING ok-deselect_all_malo
                  const-flg_yes.
    PERFORM fill_saplcpdi_1400
            USING ok-insert_einf
                  const-flg_yes.
  ENDIF.
* Referenz auf Standardarbeitsplan nur bei Normalarbeitspl + Prüfpl.
  IF ( previous_transaction EQ trans-std_routing       OR
       previous_transaction EQ trans-inspection_plan ) AND
     plpo_tab-vplflg EQ const-flg_yes.
    PERFORM fill_saplcpdi_1400
            USING 'RSTA'
                  const-flg_yes.
* Langtext-Erfassung für die Referenz
    IF NOT plpo_tab-txtsp IS INITIAL   AND
       plpo_tab-txtsp NE const_nodata.
      PERFORM fill_saplcpdo_1080
              USING ok-long_text_ltxt
                    space.
      PERFORM process_operation_text.
      PERFORM fill_saplcpdo_1080
              USING ok-operation_overview_voue
                    const-flg_yes.
    ELSE.
      PERFORM fill_saplcpdo_1080
              USING ok-operation_overview_voue
                    space.
    ENDIF.

    EXIT.
  ENDIF.

* Vorgangsübersicht: Datenerfassen
  PERFORM fill_saplcpdi_1400
         USING '/0'
               space.
*
* Vorgangdetail wird über die Erfassungshilfe im Profil angestossen
  PERFORM fill_saplcpdo_1200 USING '/0'.

* Dieses Popup gibts es dank (?) Hinweis 93418
* im Batch nicht mehr
* Wenn Kurztext und Textvorlage, dann beide
*  IF NOT ( PLPO_TAB-KTSCH IS INITIAL OR
*           PLPO_TAB-KTSCH(1) EQ CONST_NODATA ) AND
*     NOT ( PLPO_TAB-LTXA1 IS INITIAL OR
*           PLPO_TAB-LTXA1(1) EQ CONST_NODATA ).
*    PERFORM FILL_SAPLSPO1_0100
*            USING 'SPOP-OPTION2'.
*  ENDIF.


* Benutzerdaten
  IF NOT ( plpo_tab-slwid IS INITIAL OR
           plpo_tab-slwid(1) EQ const_nodata ).
    PERFORM fill_saplcpdi_1400
            USING 'VOUS'
                  const-flg_yes.
    PERFORM fill_saplcpdo_1100
            USING ok-operation_overview_voue.
  ENDIF.

* Langtext-Erfassung
  IF NOT plpo_tab-txtsp IS INITIAL   AND
     plpo_tab-txtsp NE const_nodata.
    PERFORM fill_saplcpdi_1400
            USING ok-long_text_ltxt
                  const-flg_yes.
    PERFORM process_operation_text.
  ENDIF.

ENDFORM.                    "PROCESS_OPERATION

*----------------------------------------------------------------------*
*   FORM PROCESS_OPERATION_TEXT                                        *
*----------------------------------------------------------------------*
*   Langtext Vorgang                                                   *
*----------------------------------------------------------------------*
FORM process_operation_text.
*
  CLEAR ltext_tab.
  REFRESH ltext_tab.
*
  LOOP AT plpotx_tab WHERE plnty = plpo_tab-plnty AND
                           plnnr = plpo_tab-plnnr AND
                           plnal = plpo_tab-plnal AND
                           plnfl = plpo_tab-plnfl AND
                           vornr = plpo_tab-vornr AND
                           uvorn = plpo_tab-uvorn.
    MOVE-CORRESPONDING plpotx_tab TO ltext_tab.
    APPEND ltext_tab.
  ENDLOOP.

  PERFORM fill_saplstxx_1100 TABLES ltext_tab.

ENDFORM.                    "PROCESS_OPERATION_TEXT

*----------------------------------------------------------------------*
*   FORM PROCESS_PRT                                                   *
*----------------------------------------------------------------------*
*   Fertigungshilfsmittel abarbeiten                                   *
*----------------------------------------------------------------------*
FORM process_prt.

* beim ersten Mal Erfassungs-Dynpro 'Material'
  IF NOT flg-first_prt IS INITIAL.
* aus Vorgangsübersicht
    PERFORM fill_saplcpdi_1400
            USING ok-pr_res_tool_overview_fhue
                  const-flg_yes.

    PERFORM fill_saplcfdi_0200
            USING '/EESC'.
    CLEAR flg-first_prt.
  ENDIF.
* abhängig von der FHM-Art werden verschiedene Erfassungs-Dynpros ange-
* steuert
  CASE plfh_tab-fhmar.

    WHEN 'D'.
* FHM-Art 'Dokument'
      PERFORM fill_saplcfdi_0100
              USING ok-pr_document_fid_.

* Langtext
      IF NOT plfh_tab-txtsp IS INITIAL   AND
         plfh_tab-txtsp NE const_nodata.
        PERFORM fill_saplcfdi_0220
                USING ok-long_text_ltxt.
        PERFORM process_prt_text.
      ENDIF.
      PERFORM fill_saplcfdi_0220
              USING ok-insert_einf.
*      PERFORM FILL_SAPLCFDI_0220
*              USING '/EESC'.
      PERFORM fill_saplcfdi_0220
              USING 'FHAL'.
      PERFORM fill_saplcfdf_0102
              USING '/EESC'.
      PERFORM fill_saplcfdi_0220
              USING '/EESC'.

    WHEN 'E'.
* FHM-Art 'Equipment'.
      PERFORM fill_saplcfdi_0100
              USING ok-pr_equipment_fie_.

* Langtext
      IF NOT plfh_tab-txtsp IS INITIAL   AND
         plfh_tab-txtsp NE const_nodata.
        PERFORM fill_saplcfdi_0230
                USING ok-long_text_ltxt.
        PERFORM process_prt_text.
      ENDIF.
      PERFORM fill_saplcfdi_0230
              USING ok-insert_einf.
      PERFORM fill_saplcfdi_0230
              USING '/EESC'.

    WHEN 'M'.
* FHM-Art 'Material'
      PERFORM fill_saplcfdi_0100
              USING ok-pr_material_fim_.
* Langtext
      IF NOT plfh_tab-txtsp IS INITIAL   AND
         plfh_tab-txtsp NE const_nodata.
        PERFORM fill_saplcfdi_0200
                USING ok-long_text_ltxt.
        PERFORM process_prt_text.
      ENDIF.
      PERFORM fill_saplcfdi_0200
              USING 'FHAL'.
      PERFORM fill_saplcfdf_0101
               USING 'BACK'.
      PERFORM fill_saplcfdi_0200
              USING 'BACK'.

    WHEN 'S'.
* FHM-Art 'Sonstiges'
      PERFORM fill_saplcfdi_0100
              USING ok-pr_miscellaneous_fis.
* Langtext
      IF NOT plfh_tab-txtsp IS INITIAL   AND
         plfh_tab-txtsp NE const_nodata.
        PERFORM fill_saplcfdi_0210
                USING ok-long_text_ltxt.
        PERFORM process_prt_text.
      ENDIF.
      PERFORM fill_saplcfdi_0210
              USING ok-insert_einf.
*      PERFORM FILL_SAPLCFDI_0210
*              USING '/EESC'.
      PERFORM fill_saplcfdi_0210
              USING 'FHAL'.
      PERFORM fill_saplcfdf_0100
              USING '/EESC'.
      PERFORM fill_saplcfdi_0210
              USING '/EESC'.

  ENDCASE.

ENDFORM.                    "PROCESS_PRT

*----------------------------------------------------------------------*
*   FORM PROCESS_PRT_TEXT                                              *
*----------------------------------------------------------------------*
*   Langtext Fertigungshilfsmittel                                     *
*----------------------------------------------------------------------*
FORM process_prt_text.
*
  CLEAR ltext_tab.
  REFRESH ltext_tab.
*
  LOOP AT plfhtx_tab WHERE plnty = plfh_tab-plnty AND
                           plnnr = plfh_tab-plnnr AND
                           plnal = plfh_tab-plnal AND
                           plnfl = plfh_tab-plnfl AND
                           vornr = plfh_tab-vornr AND
                           psnfh = plfh_tab-psnfh.
    MOVE-CORRESPONDING plfhtx_tab TO ltext_tab.
    APPEND ltext_tab.
  ENDLOOP.
*
  PERFORM fill_saplstxx_1100 TABLES ltext_tab.
*
ENDFORM.                    "PROCESS_PRT_TEXT

*----------------------------------------------------------------------*
*   FORM PROCESS_SAVING                                                *
*----------------------------------------------------------------------*
*   Sichern!!!                                                         *
*----------------------------------------------------------------------*
FORM process_saving.

  IF flg-first_screen IS INITIAL.
    PERFORM fill_saplcpdi_1200
            USING ok-save_bu.
  ENDIF.

ENDFORM.                    "PROCESS_SAVING

*----------------------------------------------------------------------*
*   FORM PROCESS_SEQUENCE                                              *
*----------------------------------------------------------------------*
*   Folgen abarbeiten                                                  *
*----------------------------------------------------------------------*
FORM process_sequence.

* Defaultwert Stammfolge beo No-Data
  IF plfl_tab-flgat EQ const_nodata.
    plfl_tab-flgat = const-kz_sta.
  ENDIF.

* vorheriges Dynpro ausgeben zum Einstieg in die Folgenübersicht
  IF flg-header = const-flg_yes.
    PERFORM fill_saplcpdi_1200
            USING ok-sequence_overview_seue.
    CLEAR flg-header.
  ELSE.
    PERFORM fill_saplcpdi_1300
            USING ok-deselect_all_malo.
  ENDIF.

  CASE plfl_tab-flgat.

* Stammfolge
    WHEN const-kz_sta.
* Folgenübersicht
      IF NOT ( plfl_tab-ltxa1 IS INITIAL OR
               plfl_tab-ltxa1(1) EQ const_nodata ) OR
         NOT ( plfl_tab-auschl IS INITIAL OR
               plfl_tab-auschl(1) EQ const_nodata OR
               plfl_tab-auschl EQ '2' ).
        PERFORM fill_saplcpdi_1300
                USING 'SEDE'.
* zurück zur Folgenübersicht
        PERFORM fill_saplcpds_1010
                USING ok-sequence_overview_seue.
      ENDIF.

* Parallele Folge
    WHEN const-kz_par.
* Folgenübersicht
      PERFORM fill_saplcpdi_1300
              USING ok-new_entries_anlg.
* Dynpro zur Auswahl der Folgenart
      PERFORM fill_saplcp03_1060
              USING 'WEIT'.
* zurück zur Folgenübersicht
      PERFORM fill_saplcpds_1200
              USING ok-sequence_overview_seue.

* Alternative Folge
    WHEN const-kz_alt.
* Folgenübersicht
      PERFORM fill_saplcpdi_1300
              USING ok-new_entries_anlg.
* Dynpro zur Auswahl der Folgenart
      PERFORM fill_saplcp03_1060
              USING 'WEIT'.
* zurück zur Folgenübersicht
      PERFORM fill_saplcpds_1200
              USING ok-sequence_overview_seue.

  ENDCASE.

* Folge Allg. Sicht mit Langtext
  IF NOT plfl_tab-txtsp IS INITIAL   AND
     plfl_tab-txtsp NE const_nodata.
    PERFORM fill_saplcpdi_1300
            USING ok-long_text_ltxt.
    PERFORM process_sequence_text.
  ENDIF.


  flg-sequence = const-flg_yes.

ENDFORM.                    "PROCESS_SEQUENCE

*----------------------------------------------------------------------*
*   FORM PROCESS_SEQUENCE_TEXT                                         *
*----------------------------------------------------------------------*
*   Langtext Folge                                                     *
*----------------------------------------------------------------------*
FORM process_sequence_text.
*
  CLEAR ltext_tab.
  REFRESH ltext_tab.
*
  LOOP AT plfltx_tab WHERE plnty = plfl_tab-plnty AND
                           plnnr = plfl_tab-plnnr AND
                           plnal = plfl_tab-plnal AND
                           plnfl = plfl_tab-plnfl.
    MOVE-CORRESPONDING plfltx_tab TO ltext_tab.
    APPEND ltext_tab.
  ENDLOOP.
*
  PERFORM fill_saplstxx_1100 TABLES ltext_tab.
*
ENDFORM.                    "PROCESS_SEQUENCE_TEXT

*----------------------------------------------------------------------*
*   FORM SEND_OKCODE                                                   *
*----------------------------------------------------------------------*
*   OKCODE --> BDC_TAB                                                 *
*----------------------------------------------------------------------*
FORM send_okcode
     USING value(okcode) LIKE okcode.

* CLEAR BDC_TAB.
  bdc_tab-fnam = 'BDC_OKCODE'.
  bdc_tab-fval = okcode.
  APPEND bdc_tab.

ENDFORM.                    "SEND_OKCODE

*&---------------------------------------------------------------------*
*&      Form  SETUP_STTAG_DATA
*&---------------------------------------------------------------------*
*       Stichtag bestimmen
*----------------------------------------------------------------------*
FORM setup_sttag_data.

  DATA: aennr_int LIKE bipko-aennr.

  IF plko_tab-datuv <> datuv_sav OR
     plko_tab-aennr <> aennr_sav.
    IF plko_tab-aennr IS INITIAL OR
       plko_tab-aennr(1) EQ const_nodata.
      IF plko_tab-datuv(1) NE const_nodata.
* Stichtag aus Kopfsatz
        CALL FUNCTION 'CONVERT_DATE_INPUT'
          EXPORTING
            input                     = plko_tab-datuv
          IMPORTING
            output                    = sttag_expl
          EXCEPTIONS
            plausibility_check_failed = 1
            wrong_format_in_input     = 2
            OTHERS                    = 3.
        IF NOT sy-subrc IS INITIAL.
          MESSAGE e851(29) WITH plko_tab-datuv.
        ENDIF.
      ELSE.
        sttag_expl = sy-datum.
      ENDIF.
      datuv_sav  = plko_tab-datuv.
      CLEAR aennr_sav.
    ELSE.
* Stichtag aus Änderungsnummer
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = plko_tab-aennr
        IMPORTING
          output = aennr_int.

      ccin_hlp-aeobj = '2'.
      ccin_hlp-aennr = aennr_int.
      ccin_hlp-plnty = plko_tab-plnty.
      ccin_hlp-plnnr = plko_tab-plnnr.        "n_823800
      CALL FUNCTION 'CC_CHANGE_NUMBER_CHECK'
        EXPORTING
          eccin  = ccin_hlp
        IMPORTING
          adatuv = sttag_expl
        EXCEPTIONS
          OTHERS = 1.
      IF sy-subrc NE 0.
        MESSAGE e019(cm) WITH plko_tab-aennr.
      ENDIF.
      aennr_sav = plko_tab-aennr.
      CLEAR datuv_sav.
    ENDIF.
  ENDIF.
ENDFORM.                               " SETUP_STTAG_DATA
*----------------------------------------------------------------------*
*   FORM TRANSFER_TO_BATCH_INPUT                                       *
*----------------------------------------------------------------------*
*   Daten pro Transaktion an Batch-Input-Schnittstelle übergeben       *
*----------------------------------------------------------------------*
FORM transfer_to_batch_input.

  CALL FUNCTION 'BDC_INSERT'
    EXPORTING
      tcode     = previous_transaction
    TABLES
      dynprotab = bdc_tab.

ENDFORM.                    "TRANSFER_TO_BATCH_INPUT

*&**********************************************************************
*&      Form  INT_FORMAT_MATNR                                         *
*&**********************************************************************
FORM int_format_matnr USING imp_fieldname LIKE x031l-fieldname
                            imp_matnr LIKE bipmz-matnr
                            exp_matnr LIKE bipmz-matnr.

  DATA: imp_conv_exit LIKE rseux-cfff_value.

  PERFORM get_bipmz_conv_exit USING imp_fieldname
                                    imp_conv_exit.

  IF imp_conv_exit IS INITIAL.
    exp_matnr = imp_matnr.
    EXIT.
  ENDIF.

  CALL FUNCTION imp_conv_exit
    EXPORTING
      input  = imp_matnr
    IMPORTING
      output = exp_matnr.

ENDFORM.                               " INT_FORMAT_MATNR

*&**********************************************************************
*&      Form  INT_FORMAT_STLNR                                         *
*&**********************************************************************
FORM int_format_stlnr USING imp_fieldname
                            imp_stlnr
                            exp_stlnr.

  DATA: imp_conv_exit LIKE rseux-cfff_value.

  PERFORM get_bipmz_conv_exit USING imp_fieldname
                                    imp_conv_exit.

  IF imp_conv_exit IS INITIAL.
    exp_stlnr = imp_stlnr.
    EXIT.
  ENDIF.

  CALL FUNCTION imp_conv_exit
    EXPORTING
      input  = imp_stlnr
    IMPORTING
      output = exp_stlnr.

ENDFORM.                               " INT_FORMAT_STLNR

*&**********************************************************************
*&      Form  INT_FORMAT_STLAL                                         *
*&**********************************************************************
FORM int_format_stlal USING imp_fieldname
                            imp_stlal
                            exp_stlal.

  DATA: imp_conv_exit LIKE rseux-cfff_value.

  PERFORM get_bipmz_conv_exit USING imp_fieldname
                                    imp_conv_exit.

  IF imp_conv_exit IS INITIAL.
    exp_stlal = imp_stlal.
    EXIT.
  ENDIF.

  CALL FUNCTION imp_conv_exit
    EXPORTING
      input  = imp_stlal
    IMPORTING
      output = exp_stlal.

ENDFORM.                               " INT_FORMAT_STLAL

*&**********************************************************************
*&      Form  INT_FORMAT_STLKN                                         *
*&**********************************************************************
FORM int_format_stlkn USING imp_fieldname
                            imp_stlkn
                            exp_stlkn.

  DATA: imp_conv_exit LIKE rseux-cfff_value.

  PERFORM get_bipmz_conv_exit USING imp_fieldname
                                    imp_conv_exit.

  IF imp_conv_exit IS INITIAL.
    exp_stlkn = imp_stlkn.
    EXIT.
  ENDIF.

  CALL FUNCTION imp_conv_exit
    EXPORTING
      input  = imp_stlkn
    IMPORTING
      output = exp_stlkn.

ENDFORM.                               " INT_FORMAT_STLKN

*&**********************************************************************
*&      Form  INT_FORMAT_AUFST                                         *
*&**********************************************************************
FORM int_format_aufst USING    imp_fieldname
                               imp_aufst
                               exp_aufst.

  DATA: imp_conv_exit LIKE rseux-cfff_value.

  PERFORM get_bipmz_conv_exit USING imp_fieldname
                                    imp_conv_exit.

  IF imp_conv_exit IS INITIAL.
    exp_aufst = imp_aufst.
    EXIT.
  ENDIF.

  CALL FUNCTION imp_conv_exit
    EXPORTING
      input  = imp_aufst
    IMPORTING
      output = exp_aufst.

ENDFORM.                               " INT_FORMAT_AUFST
*&**********************************************************************
*&      Form  GET_BIPMZ_CONV_EXIT                                      *
*&**********************************************************************
FORM get_bipmz_conv_exit USING imp_fieldname LIKE x031l-fieldname
                               exp_conv_exit LIKE rseux-cfff_value.

  DATA: fieldname LIKE x031l-fieldname,
        convexit LIKE x031l-convexit.

  fieldname = imp_fieldname.

  CLEAR exp_conv_exit.

  IF bipmz_def_flg IS INITIAL.
*
    bipmz_def_flg = 'X'.
    CALL FUNCTION 'RFC_GET_NAMETAB'
      EXPORTING
        tabname          = const_bipmz_tabname
      IMPORTING
        header           = table_header_definition
      TABLES
        nametab          = bipmz_definitions
      EXCEPTIONS
        table_not_active = 01.
*
    CHECK sy-subrc IS INITIAL.
*
    LOOP AT bipmz_definitions.
      CASE bipmz_definitions-fieldname.
        WHEN const_bomat_fieldname.
          bomat_convexit = bipmz_definitions-convexit.
        WHEN const_matnr_fieldname.
          matnr_convexit = bipmz_definitions-convexit.
        WHEN const_stlnr_fieldname.
          stlnr_convexit = bipmz_definitions-convexit.
        WHEN const_stlal_fieldname.
          stlal_convexit = bipmz_definitions-convexit.
      ENDCASE.
    ENDLOOP.
*
  ENDIF.
*
  CASE imp_fieldname.
    WHEN const_bomat_fieldname.
      convexit = bomat_convexit.
    WHEN const_matnr_fieldname.
      convexit = matnr_convexit.
    WHEN const_stlnr_fieldname.
      convexit = stlnr_convexit.
    WHEN const_stlal_fieldname.
      convexit = stlal_convexit.
  ENDCASE.
*
  CHECK NOT convexit IS INITIAL.
*

  convexit_function-convexit = convexit.
  convexit_function_no_gaps = convexit_function.
  CONDENSE convexit_function_no_gaps NO-GAPS.
  exp_conv_exit = convexit_function_no_gaps.
*
ENDFORM.                               " GET_BIPMZ_CONV_EXIT

*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_0150
*&---------------------------------------------------------------------*
*       fill lines in characteristic overview
*----------------------------------------------------------------------*
*  -->  p_okcode
*  <--  append bdc_tab
*----------------------------------------------------------------------*
FORM fill_saplqpaa_0150
     USING       pi_plmk_wa                  LIKE bi_plmk_tab
           value(pi_okcode)                  LIKE okcode
           value(pi_char_number)             LIKE cha_number
           value(pi_input_control_flag)      TYPE c.

  CLEAR bdc_tab.
  bdc_tab-program  = 'SAPLQPAA'.
  bdc_tab-dynpro   = '0150'.
  bdc_tab-dynbegin = const-flg_yes.

  IF okcode = ok-insert_einf.
* Cursor positionieren
    bdc_tab-fnam = 'BDC_CURSOR'.
    IF pi_char_number = 1.
      bdc_tab-fval = 'PLMKB-MERKNR(1)'.
    ELSE.
      bdc_tab-fval = 'PLMKB-MERKNR(2)'.
    ENDIF.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

  IF pi_input_control_flag = const_char-position_up_u.
*-  move page down: cursor will be positioned to second line
    bdc_tab-fnam = 'RQPAS-ENTRY_ACT' .
    bdc_tab-fval = '9999'.
    APPEND bdc_tab.
    CLEAR bdc_tab.

  ELSEIF pi_input_control_flag <> const_char-no_data__.


* Characteristic number
    IF pi_input_control_flag <> const_char-second_run_s .
      IF pi_plmk_wa-merknr(1) NE const_nodata.
        IF pi_char_number = 1.
          bdc_tab-fnam = 'PLMKB-MERKNR(1)'.
        ELSE.
          bdc_tab-fnam = 'PLMKB-MERKNR(2)'.
        ENDIF.
        bdc_tab-fval = pi_plmk_wa-merknr.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.
    ENDIF.


    IF pi_input_control_flag = const_char-master_char_m.


* master characteristic
      IF pi_plmk_wa-verwmerkm(1) NE const_nodata.
        IF pi_char_number = 1.
          bdc_tab-fnam = 'PLMKB-VERWMERKM(1)'.
        ELSE.
          bdc_tab-fnam = 'PLMKB-VERWMERKM(2)'.
        ENDIF.
        bdc_tab-fval = pi_plmk_wa-verwmerkm.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.


    ELSE.


* Key containing preset characteristic control indicators
      IF pi_plmk_wa-vsteuerkz(1) NE const_nodata.
        IF pi_char_number = 1.
          bdc_tab-fnam = 'PLMKB-VSTEUERKZ(1)'.
        ELSE.
          bdc_tab-fnam = 'PLMKB-VSTEUERKZ(2)'.
        ENDIF.
        bdc_tab-fval = pi_plmk_wa-vsteuerkz.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.


*Indicator: quantitative characteristic
      IF     pi_plmk_wa-quantitat(1) NE const_nodata
       AND ( pi_plmk_wa-quantitat(1) = 'X'
          OR pi_plmk_wa-quantitat(1) = 'x' ) .
        IF pi_char_number = 1.
          bdc_tab-fnam = 'RQPAS-QUANTITAT(1)'.
        ELSE.
          bdc_tab-fnam = 'RQPAS-QUANTITAT(2)'.
        ENDIF.
        bdc_tab-fval = 'X' .           "pi_plmk_wa-quantitat.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.


*Indicator: qualitative characteristic
      IF     pi_plmk_wa-quantitat(1) NE const_nodata
       AND   pi_plmk_wa-quantitat(1) NE 'X'
       AND   pi_plmk_wa-quantitat(1) NE 'x'  .    "is initial????
        IF pi_char_number = 1.
          bdc_tab-fnam = 'RQPAS-QUALITAT(1)'.
        ELSE.
          bdc_tab-fnam = 'RQPAS-QUALITAT(2)'.
        ENDIF.
        bdc_tab-fval = 'X' .           "pi_plmk_wa-qualitat.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.



* characteristic short text
      IF pi_plmk_wa-kurztext(1) NE const_nodata.
        IF pi_char_number = 1.
          bdc_tab-fnam = 'PLMKB-KURZTEXT(1)'.
        ELSE.
          bdc_tab-fnam = 'PLMKB-KURZTEXT(2)'.
        ENDIF.
        bdc_tab-fval = pi_plmk_wa-kurztext.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.


* tolerance key
      IF pi_plmk_wa-toleranzsl(1) NE const_nodata.
        IF pi_char_number = 1.
          bdc_tab-fnam = 'PLMKB-TOLERANZSL(1)'.
        ELSE.
          bdc_tab-fnam = 'PLMKB-TOLERANZSL(2)'.
        ENDIF.
        bdc_tab-fval = pi_plmk_wa-toleranzsl.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.

    ENDIF.                             " pi_input_control_flag

*   inpection method
    IF pi_plmk_wa-pmethode(1) NE const_nodata.
      IF pi_char_number = 1.
        bdc_tab-fnam = 'PLMKB-PMETHODE(1)'.
      ELSE.
        bdc_tab-fnam = 'PLMKB-PMETHODE(2)'.
      ENDIF.
      bdc_tab-fval = pi_plmk_wa-pmethode.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   plant of inspection method
    IF pi_plmk_wa-qmtb_werks(1) NE const_nodata.
      IF pi_char_number = 1.
        bdc_tab-fnam = 'PLMKB-QMTB_WERKS(1)'.
      ELSE.
        bdc_tab-fnam = 'PLMKB-QMTB_WERKS(2)'.
      ENDIF.
      bdc_tab-fval = pi_plmk_wa-qmtb_werks.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

*   version of inspection method
    IF pi_plmk_wa-pmtversion(1) NE const_nodata.
      IF pi_char_number = 1.
        bdc_tab-fnam = 'PLMKB-PMTVERSION(1)'.
      ELSE.
        bdc_tab-fnam = 'PLMKB-PMTVERSION(2)'.
      ENDIF.
      bdc_tab-fval = pi_plmk_wa-pmtversion.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.


  ENDIF.                               "nodata

* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                    "FILL_SAPLQPAA_0150

*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_1501
*&---------------------------------------------------------------------*
*       fills popup for selection of master characteristic
*----------------------------------------------------------------------*
FORM fill_saplqpaa_1501
     USING       pi_plmk_wa    LIKE bi_plmk_tab
           value(pi_okcode)    LIKE okcode .

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQPAA'.
  bdc_tab-dynpro = '1501'.
  bdc_tab-dynbegin = const-flg_yes.

* master inspection characteristic
* 'PLMKB-VERWMERKM' is filled by system

* plant of master inspection characteristic
  IF pi_plmk_wa-qpmk_zaehl(1) NE const_nodata. "caution: screen ne DB !
    bdc_tab-fnam = 'PLMKB-QPMK_WERKS'.
    bdc_tab-fval = pi_plmk_wa-qpmk_zaehl.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* master inspection characteristic version
  IF pi_plmk_wa-mkversion(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-MKVERSION'.
    bdc_tab-fval = pi_plmk_wa-mkversion.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* inpection method attributed to master inspection characteristic
  IF pi_plmk_wa-pmethode(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-PMETHODE'.
    bdc_tab-fval = pi_plmk_wa-pmethode.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* plant of inspection method
  IF pi_plmk_wa-qmtb_werks(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-QMTB_WERKS'.
    bdc_tab-fval = pi_plmk_wa-qmtb_werks.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ELSEIF pi_plmk_wa-pmethode(1) EQ const_nodata.
*   initialize method plant just in case it will be filled by get WRK
    bdc_tab-fnam = 'PLMKB-QMTB_WERKS'.
    bdc_tab-fval = '!'.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* version of inspection method
  IF pi_plmk_wa-pmtversion(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-PMTVERSION'.
    bdc_tab-fval = pi_plmk_wa-pmtversion.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLQPAA_1501

*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQSS0_0100
*&---------------------------------------------------------------------*
*       fills first screen for control indicators
*----------------------------------------------------------------------*
*  -->  pi_qmkst: structure for control indicators
*  <--  pi_rqmst: dynpro structure for control indicators
*----------------------------------------------------------------------*
FORM fill_saplqss0_0100
      USING value(pi_rqmst)  LIKE rqmst
            value(pi_okcode) LIKE sy-ucomm.


  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQSS0'.
  bdc_tab-dynpro = '0100'.
  bdc_tab-dynbegin = const-flg_yes.


* 'QMKST-FIXIERT'indicator: default control indicators cannot be changed
* can only be maintained via control key created in customizing


* ----- CHARACTERISTC TYPE -----
* a) quantitative

* indicator: lower tolerance limit must be maintained
  IF NOT pi_rqmst-tolerunten IS INITIAL
    AND pi_rqmst-tolerunten <> const_nodata.
    bdc_tab-fnam = 'RQMST-TOLERUNTEN'.
    bdc_tab-fval = pi_rqmst-tolerunten.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: upper tolerance limit must be maintained
  IF NOT pi_rqmst-toleroben IS INITIAL
    AND pi_rqmst-toleroben <> const_nodata.
    bdc_tab-fnam = 'RQMST-TOLEROBEN'.
    bdc_tab-fval = pi_rqmst-toleroben.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: target value is checked against tolerance limit
  IF NOT pi_rqmst-sollpruef IS INITIAL
    AND pi_rqmst-sollpruef <> const_nodata.
    bdc_tab-fnam = 'RQMST-SOLLPRUEF'.
    bdc_tab-fval = pi_rqmst-sollpruef.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* b) qualitative

* indicator: reference to characteristic attribute required
  IF NOT pi_rqmst-pruefkat IS INITIAL
    AND pi_rqmst-pruefkat <> const_nodata.
    bdc_tab-fnam = 'RQMST-PRUEFKAT'.
    bdc_tab-fval = pi_rqmst-pruefkat.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* ----- SAMPLE -----

* indicator: sampling procedure is required
  IF NOT pi_rqmst-stichpr IS INITIAL
    AND pi_rqmst-stichpr <> const_nodata.
    bdc_tab-fnam = 'RQMST-STICHPR'.
    bdc_tab-fval = pi_rqmst-stichpr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: sample quantity can be increased
  IF NOT pi_rqmst-addpro IS INITIAL
    AND pi_rqmst-addpro <> const_nodata.
    bdc_tab-fnam = 'RQMST-ADDPRO'.
    bdc_tab-fval = pi_rqmst-addpro.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: statistical process control characteristic
  IF NOT pi_rqmst-qspcmk IS INITIAL
    AND pi_rqmst-qspcmk <> const_nodata.
    bdc_tab-fnam = 'RQMST-QSPCMK'.
    bdc_tab-fval = pi_rqmst-qspcmk.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: destructive inspection
  IF NOT pi_rqmst-zerstprf IS INITIAL
    AND pi_rqmst-zerstprf <> const_nodata.
    bdc_tab-fnam = 'RQMST-ZERSTPRF'.
    bdc_tab-fval = pi_rqmst-zerstprf.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: confirmation of number of defects
  IF NOT pi_rqmst-bewfhlzhl IS INITIAL
    AND pi_rqmst-bewfhlzhl <> const_nodata.
    bdc_tab-fnam = 'RQMST-BEWFHLZHL'.
    bdc_tab-fval = pi_rqmst-bewfhlzhl.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* ----- RESULTS CONFIRMATION -----

* indicator: summarized characteristics recording
  IF NOT pi_rqmst-estukz5 IS INITIAL
    AND pi_rqmst-estukz5 <> const_nodata.
    bdc_tab-fnam = 'RQMST-ESTUKZ5'.
    bdc_tab-fval = pi_rqmst-estukz5.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: required characteristic
  IF NOT pi_rqmst-rzwang4 IS INITIAL
    AND pi_rqmst-rzwang4 <> const_nodata.
    bdc_tab-fnam = 'RQMST-RZWANG4'.
    bdc_tab-fval = pi_rqmst-rzwang4.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: record individual results
  IF NOT pi_rqmst-estukz3 IS INITIAL
    AND pi_rqmst-estukz3 <> const_nodata.
    bdc_tab-fnam = 'RQMST-ESTUKZ3'.
    bdc_tab-fval = pi_rqmst-estukz3.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: optional characteristic
  IF NOT pi_rqmst-rzwang1 IS INITIAL
    AND pi_rqmst-rzwang1 <> const_nodata.
    bdc_tab-fnam = 'RQMST-RZWANG1'.
    bdc_tab-fval = pi_rqmst-rzwang1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: no characteristics recording
  IF NOT pi_rqmst-estukz1 IS INITIAL
    AND pi_rqmst-estukz1 <> const_nodata.
    bdc_tab-fnam = 'RQMST-ESTUKZ1'.
    bdc_tab-fval = pi_rqmst-estukz1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: conditional characteristic after acceptance
  IF NOT pi_rqmst-rzwang2 IS INITIAL
    AND pi_rqmst-rzwang2 <> const_nodata.
    bdc_tab-fnam = 'RQMST-RZWANG2'.
    bdc_tab-fval = pi_rqmst-rzwang2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: characteristics recording in classes
  IF NOT pi_rqmst-estukz2 IS INITIAL
    AND pi_rqmst-estukz2 <> const_nodata.
    bdc_tab-fnam = 'RQMST-ESTUKZ2'.
    bdc_tab-fval = pi_rqmst-estukz2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: conditional characteristic after rejection
  IF NOT pi_rqmst-rzwang3 IS INITIAL
    AND pi_rqmst-rzwang3 <> const_nodata.
    bdc_tab-fnam = 'RQMST-RZWANG3'.
    bdc_tab-fval = pi_rqmst-rzwang3.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: individual results at rejection
  IF NOT pi_rqmst-estukz4 IS INITIAL
    AND pi_rqmst-estukz4 <> const_nodata.
    bdc_tab-fnam = 'RQMST-ESTUKZ4'.
    bdc_tab-fval = pi_rqmst-estukz4.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: automatic call of defects recording
  IF NOT pi_rqmst-fehlrec IS INITIAL
    AND pi_rqmst-fehlrec <> const_nodata.
    bdc_tab-fnam = 'RQMST-FEHLREC'.
    bdc_tab-fval = pi_rqmst-fehlrec.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLQSS0_0100

*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQSS0_0101
*&---------------------------------------------------------------------*
*       fills second screen for control indicators
*----------------------------------------------------------------------*
*  -->  pi_qmkst: structure for control indicators
*  <--  pi_rqmst: dynpro structure for control indicators
*----------------------------------------------------------------------*
FORM fill_saplqss0_0101
      USING value(pi_rqmst)  LIKE rqmst
            value(pi_okcode) LIKE sy-ucomm.


  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQSS0'.
  bdc_tab-dynpro = '0101'.
  bdc_tab-dynbegin = const-flg_yes.


*'QMKST-FIXIERT' indicator: default control indicators cannot be changed
* can only be maintained via control key created in customizing

* ----- INSPECTION SCOPE (Prüfumfang) -----

* indicator: default control indicators cannot be changed
  IF NOT pi_rqmst-pumfkz1 IS INITIAL
    AND pi_rqmst-pumfkz1 <> const_nodata.
    bdc_tab-fnam = 'RQMST-PUMFKZ1'.
    bdc_tab-fval = pi_rqmst-pumfkz1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: sample scope must be adhered to
  IF NOT pi_rqmst-pumfkz4 IS INITIAL
    AND pi_rqmst-pumfkz4 <> const_nodata.
    bdc_tab-fnam = 'RQMST-PUMFKZ4'.
    bdc_tab-fval = pi_rqmst-pumfkz4.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: sample scope can be smaller
  IF NOT pi_rqmst-pumfkz2 IS INITIAL
    AND pi_rqmst-pumfkz2 <> const_nodata.
    bdc_tab-fnam = 'RQMST-PUMFKZ2'.
    bdc_tab-fval = pi_rqmst-pumfkz2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: sample scope can be larger
  IF NOT pi_rqmst-pumfkz3 IS INITIAL
    AND pi_rqmst-pumfkz3 <> const_nodata.
    bdc_tab-fnam = 'RQMST-PUMFKZ3'.
    bdc_tab-fval = pi_rqmst-pumfkz3.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* ----- CONFIRMATION OF DOCUMENTS (Doku Rückmeldung) -----

* indicator: no documentation required
  IF NOT pi_rqmst-dokukz1 IS INITIAL
    AND pi_rqmst-dokukz1 <> const_nodata.
    bdc_tab-fnam = 'RQMST-DOKUKZ1'.
    bdc_tab-fval = pi_rqmst-dokukz1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: documentation required if rejected
  IF NOT pi_rqmst-dokukz2 IS INITIAL
    AND pi_rqmst-dokukz2 <> const_nodata.
    bdc_tab-fnam = 'RQMST-DOKUKZ2'.
    bdc_tab-fval = pi_rqmst-dokukz2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: documentation required
  IF NOT pi_rqmst-dokukz3 IS INITIAL
    AND pi_rqmst-dokukz3 <> const_nodata.
    bdc_tab-fnam = 'RQMST-DOKUKZ3'.
    bdc_tab-fval = pi_rqmst-dokukz3.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* ----- MISCELLANEOUS (Sonstiges) -----

* indicator: long-term inspection
  IF NOT pi_rqmst-lzeitkz IS INITIAL
    AND pi_rqmst-lzeitkz <> const_nodata.
    bdc_tab-fnam = 'RQMST-LZEITKZ'.
    bdc_tab-fval = pi_rqmst-lzeitkz.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: measured values must be confirmed (quant. char.!)
  IF NOT pi_rqmst-messwerte IS INITIAL
    AND pi_rqmst-messwerte <> const_nodata.
    bdc_tab-fnam = 'RQMST-MESSWERTE'.
    bdc_tab-fval = pi_rqmst-messwerte.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: characteristic is relevant for qual. score and scrap share
  IF NOT pi_rqmst-ausslos IS INITIAL
    AND pi_rqmst-ausslos <> const_nodata.
    bdc_tab-fnam = 'RQMST-AUSSLOS'.
    bdc_tab-fval = pi_rqmst-ausslos.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: calculated characteristic
  IF NOT pi_rqmst-formelmk IS INITIAL
    AND pi_rqmst-formelmk <> const_nodata.
    bdc_tab-fnam = 'RQMST-FORMELMK'.
    bdc_tab-fval = pi_rqmst-formelmk.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* note 1395606
* indicator: input processing
  IF NOT pi_rqmst-EINVERARB IS INITIAL
    AND pi_rqmst-EINVERARB <> const_nodata.
    bdc_tab-fnam = 'RQMST-EINVERARB'.
    bdc_tab-fval = pi_rqmst-EINVERARB.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: create change documents during results recording
  IF NOT pi_rqmst-aendbeleg IS INITIAL
    AND pi_rqmst-aendbeleg <> const_nodata.
    bdc_tab-fnam = 'RQMST-AENDBELEG'.
    bdc_tab-fval = pi_rqmst-aendbeleg.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: specifications can be changed
* field 'RQMST-VORGAEND' is not used

* indicator: assignment of test equipment is required
  IF NOT pi_rqmst-pmmzwang IS INITIAL
    AND pi_rqmst-pmmzwang <> const_nodata.
    bdc_tab-fnam = 'RQMST-PMMZWANG'.
    bdc_tab-fval = pi_rqmst-pmmzwang.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*Print indicator
  IF NOT pi_rqmst-druck1 IS INITIAL
    AND pi_rqmst-druck1 <> const_nodata.
    bdc_tab-fnam = 'RQMST-DRUCK1'.
    bdc_tab-fval = pi_rqmst-druck1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

  IF NOT pi_rqmst-druck2 IS INITIAL
    AND pi_rqmst-druck2 <> const_nodata.
    bdc_tab-fnam = 'RQMST-DRUCK2'.
    bdc_tab-fval = pi_rqmst-druck2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

  IF NOT pi_rqmst-druck3 IS INITIAL
    AND pi_rqmst-druck3 <> const_nodata.
    bdc_tab-fnam = 'RQMST-DRUCK3'.
    bdc_tab-fval = pi_rqmst-druck3.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLQSS0_0101

*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_0151
*&---------------------------------------------------------------------*
*       fills dynpro for characteristic general data
*----------------------------------------------------------------------*
FORM fill_saplqpaa_0151
      USING       pi_plmk_wa              LIKE bi_plmk_tab
            value(pi_okcode)              LIKE okcode
            value(pi_input_control_flag)  TYPE c
      CHANGING    p_processed             LIKE c_processed.


  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQPAA'.
  IF release_lower_40c = 'X'.
*   release < 4.0C.
    bdc_tab-dynpro = '0151'.
  ELSE.
*   release >= 4.0C
    bdc_tab-dynpro = '0160'.
  ENDIF.
  bdc_tab-dynbegin = const-flg_yes.

  IF pi_input_control_flag = const_char-master_char_m .
*-- referenced master characteristic

* sample number for an inspection characteristic in a plan
    IF pi_plmk_wa-probenr(1) NE const_nodata.
      bdc_tab-fnam = 'PLMKB-PROBENR'.
      bdc_tab-fval = pi_plmk_wa-probenr.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.


  ELSEIF pi_input_control_flag <> const_char-no_data__.

* characteristic short text
    IF pi_plmk_wa-kurztext(1) NE const_nodata.
      bdc_tab-fnam = 'PLMKB-KURZTEXT'.
      bdc_tab-fval = pi_plmk_wa-kurztext.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* sample number for an inspection characteristic in a plan
    IF pi_plmk_wa-probenr(1) NE const_nodata.
      bdc_tab-fnam = 'PLMKB-PROBENR'.
      bdc_tab-fval = pi_plmk_wa-probenr.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* inspector qualification
    IF pi_plmk_wa-pruefquali(1) NE const_nodata.
      bdc_tab-fnam = 'PLMKB-PRUEFQUALI'.
      bdc_tab-fval = pi_plmk_wa-pruefquali.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* weighting of the characteristic
    IF pi_plmk_wa-merkgew(1) NE const_nodata.
      bdc_tab-fnam = 'PLMKB-MERKGEW'.
      bdc_tab-fval = pi_plmk_wa-merkgew.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* share calculation
    IF pi_plmk_wa-eeantverf(1) NE const_nodata.
      bdc_tab-fnam = 'PLMKB-EEANTVERF'.
      bdc_tab-fval = pi_plmk_wa-eeantverf.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.


    IF p_processed-scr_1502 IS INITIAL .
* inspection method subscreen

* inspection method
      IF pi_plmk_wa-pmethode(1) NE const_nodata.
        bdc_tab-fnam = 'PLMKB-PMETHODE'.
        bdc_tab-fval = pi_plmk_wa-pmethode.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.

* inspection method plant
      IF pi_plmk_wa-qmtb_werks(1) NE const_nodata.
        bdc_tab-fnam = 'PLMKB-QMTB_WERKS'.
        bdc_tab-fval = pi_plmk_wa-qmtb_werks.
        APPEND bdc_tab.
        CLEAR bdc_tab.
      ENDIF.

    ENDIF.

  ENDIF.  "pi_input_control_flag <> const_char-nodata.

* item number for production resource/tool
    IF pi_plmk_wa-psnfh(1) NE const_nodata.
      bdc_tab-fnam = 'PLFHD-PSNFH'.
      bdc_tab-fval = pi_plmk_wa-psnfh.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLQPAA_0151

*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_0152
*&---------------------------------------------------------------------*
*       fills dynpro for quantitative data of characteristic
*----------------------------------------------------------------------*
FORM fill_saplqpaa_0152
      USING       pi_plmk_wa              LIKE bipmk
            value(pi_okcode)              LIKE okcode
            value(pi_input_control_flag)  TYPE c.


  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQPAA'.
  IF release_lower_40c = 'X'.
*   release < 4.0C.
    bdc_tab-dynpro = '0152'.
  ELSE.
*   release >= 4.0C
    bdc_tab-dynpro = '0160'.
  ENDIF.
  bdc_tab-dynbegin = const-flg_yes.


  IF pi_input_control_flag <> const_char-no_data__.

* --------- Target value and tolerances

* number of digits to the right of a decimal point (precision)
    IF pi_plmk_wa-stellen(1) NE const_nodata.
      bdc_tab-fnam = 'PLMKB-STELLEN'.
      bdc_tab-fval = pi_plmk_wa-stellen.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* three-char. unit of measurement in which quantitative data is stored
    IF pi_plmk_wa-masseinhsw(1) NE const_nodata.
      bdc_tab-fnam = 'RQPAS-MASSEINHSW'.
      bdc_tab-fval = pi_plmk_wa-masseinhsw.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.


* target value for a quantitative characteristic
    IF pi_plmk_wa-sollwert(1) NE const_nodata.
      bdc_tab-fnam = 'QFLTP-SOLLWERT'.
      bdc_tab-fval = pi_plmk_wa-sollwert.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* lower tolerance limit
    IF pi_plmk_wa-toleranzun(1) NE const_nodata.
      bdc_tab-fnam = 'QFLTP-TOLERANZUN'.
      bdc_tab-fval = pi_plmk_wa-toleranzun.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* upper tolerance limit
    IF pi_plmk_wa-toleranzob(1) NE const_nodata.
      bdc_tab-fnam = 'QFLTP-TOLERANZOB'.
      bdc_tab-fval = pi_plmk_wa-toleranzob.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* lower plausibility limit
    IF pi_plmk_wa-plausiunte(1) NE const_nodata.
      bdc_tab-fnam = 'QFLTP-PLAUSIUNTE'.
      bdc_tab-fval = pi_plmk_wa-plausiunte.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* upper plausibility limit
    IF pi_plmk_wa-plausioben(1) NE const_nodata.
      bdc_tab-fnam = 'QFLTP-PLAUSIOBEN'.
      bdc_tab-fval = pi_plmk_wa-plausioben.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.


* --------- definition of classes for results recording

* number of value classes for inspection results
    IF pi_plmk_wa-klasanzahl(1) NE const_nodata.
      bdc_tab-fnam = 'PLMKB-KLASANZAHL'.
      bdc_tab-fval = pi_plmk_wa-klasanzahl.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* class width
    IF pi_plmk_wa-klasbreite(1) NE const_nodata.
      bdc_tab-fnam = 'QFLTP-KLASBREITE'.
      bdc_tab-fval = pi_plmk_wa-klasbreite.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* class midpoint
    IF pi_plmk_wa-klasmitte(1) NE const_nodata.
      bdc_tab-fnam = 'QFLTP-KLASMITTE'.
      bdc_tab-fval = pi_plmk_wa-klasmitte.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.


* --------- formula
* --------- Tolerance change


  ENDIF. "  if pi_input_control_flag <> const_char-no_data__.


* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLQPAA_0152

*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_0153
*&---------------------------------------------------------------------*
*       fills dynpro for catalog data of characteristic
*----------------------------------------------------------------------*
FORM fill_saplqpaa_0153
  USING       pi_plmk_wa LIKE bi_plmk_tab
        value(pi_okcode)                  LIKE sy-ucomm
        value(i_char_is_referenced_flag)  LIKE plmk-qpmk_ref.


  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQPAA'.
  IF release_lower_40c = 'X'.
*   release < 4.0C.
    bdc_tab-dynpro = '0153'.
  ELSE.
*   release >= 4.0C
    bdc_tab-dynpro = '0160'.
  ENDIF.
  bdc_tab-dynbegin = const-flg_yes.


*------------- CATALOGS

*----------------------- first catalog
  IF i_char_is_referenced_flag NE const-flg_yes.
*   master characteristic is not referenced

* catalog type of the assigned code group or selected set
  IF pi_plmk_wa-katalgart1(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-KATALGART1'.
    bdc_tab-fval = pi_plmk_wa-katalgart1.
*   error: field cannot be inserted
*   append bdc_tab.
*   clear bdc_tab.
  ENDIF.

* indicator: catalog entry is a selected set
  IF pi_plmk_wa-katab1(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-KATAB1'.
    bdc_tab-fval = pi_plmk_wa-katab1.
*   error: field cannot be inserted
*   append bdc_tab.
*   clear bdc_tab.
  ENDIF.

* assigned code group or selected set
  IF pi_plmk_wa-auswmenge1(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-AUSWMENGE1'.
    bdc_tab-fval = pi_plmk_wa-auswmenge1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* plant of the assigned selected set
  IF pi_plmk_wa-auswmgwrk1(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-AUSWMGWRK1'.
    bdc_tab-fval = pi_plmk_wa-auswmgwrk1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


*----------------------- second catalog

* catalog type of the assigned code group or selected set
  IF pi_plmk_wa-katalgart2(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-KATALGART2'.
    bdc_tab-fval = pi_plmk_wa-katalgart2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: catalog entry is a selected set
  IF pi_plmk_wa-katab2(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-KATAB2'.
    bdc_tab-fval = pi_plmk_wa-katab2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* assigned code group or selected set
  IF pi_plmk_wa-auswmenge2(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-AUSWMENGE2'.
    bdc_tab-fval = pi_plmk_wa-auswmenge2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* plant of the assigned selected set
  IF pi_plmk_wa-auswmgwrk2(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-AUSWMGWRK2'.
    bdc_tab-fval = pi_plmk_wa-auswmgwrk2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*----------------------- third catalog

* catalog type of the assigned code group or selected set
  IF pi_plmk_wa-katalgart3(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-KATALGART3'.
    bdc_tab-fval = pi_plmk_wa-katalgart3.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: catalog entry is a selected set
  IF pi_plmk_wa-katab3(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-KATAB3'.
    bdc_tab-fval = pi_plmk_wa-katab3.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* assigned code group or selected set
  IF pi_plmk_wa-auswmenge3(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-AUSWMENGE3'.
    bdc_tab-fval = pi_plmk_wa-auswmenge3.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* plant of the assigned selected set
  IF pi_plmk_wa-auswmgwrk3(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-AUSWMGWRK3'.
    bdc_tab-fval = pi_plmk_wa-auswmgwrk3.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*----------------------- fourth catalog

* catalog type of the assigned code group or selected set
  IF pi_plmk_wa-katalgart4(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-KATALGART4'.
    bdc_tab-fval = pi_plmk_wa-katalgart4.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: catalog entry is a selected set
  IF pi_plmk_wa-katab4(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-KATAB4'.
    bdc_tab-fval = pi_plmk_wa-katab4.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* assigned code group or selected set
  IF pi_plmk_wa-auswmenge4(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-AUSWMENGE4'.
    bdc_tab-fval = pi_plmk_wa-auswmenge4.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* plant of the assigned selected set
  IF pi_plmk_wa-auswmgwrk4(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-AUSWMGWRK4'.
    bdc_tab-fval = pi_plmk_wa-auswmgwrk4.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*----------------------- fifth catalog

* catalog type of the assigned code group or selected set
  IF pi_plmk_wa-katalgart5(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-KATALGART5'.
    bdc_tab-fval = pi_plmk_wa-katalgart5.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* indicator: catalog entry is a selected set
  IF pi_plmk_wa-katab5(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-KATAB5'.
    bdc_tab-fval = pi_plmk_wa-katab5.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* assigned code group or selected set
  IF pi_plmk_wa-auswmenge5(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-AUSWMENGE5'.
    bdc_tab-fval = pi_plmk_wa-auswmenge5.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* plant of the assigned selected set
  IF pi_plmk_wa-auswmgwrk5(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-AUSWMGWRK5'.
    bdc_tab-fval = pi_plmk_wa-auswmgwrk5.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


*-------------- Defect codes for rejection

* defect code group for general rejection
  IF pi_plmk_wa-codegrqual(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-CODEGRQUAL'.
    bdc_tab-fval = pi_plmk_wa-codegrqual.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* defect code for rejection: general
  IF pi_plmk_wa-codequal(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-CODEQUAL'.
    bdc_tab-fval = pi_plmk_wa-codequal.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* defect code group for rejection at upper tolerance
  IF pi_plmk_wa-codegr9o(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-CODEGR9O'.
    bdc_tab-fval = pi_plmk_wa-codegr9o.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* defect code for rejection at upper tolerance
  IF pi_plmk_wa-code9o(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-CODE9O'.
    bdc_tab-fval = pi_plmk_wa-code9o.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* defect code group used when lower limit not reached
  IF pi_plmk_wa-codegr9u(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-CODEGR9U'.
    bdc_tab-fval = pi_plmk_wa-codegr9u.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* defect code for rejection at lower tolerance
  IF pi_plmk_wa-code9u(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-CODE9U'.
    bdc_tab-fval = pi_plmk_wa-code9u.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

  ENDIF.  " IF i_char_is_referenced_flag NE ref_yes.

* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                               " FILL_SAPLQPAA_0153
*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_0154
*&---------------------------------------------------------------------*
*       fills dynpro for characteristic sample and dynamic modific. data
*----------------------------------------------------------------------*
FORM fill_saplqpaa_0154
  USING       pi_plmk_wa                  LIKE bi_plmk_tab
        value(pi_okcode)                  LIKE okcode
        value(pi_input_control_flag)      TYPE c .


  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQPAA'.
  IF release_lower_40c = 'X'.
*   release < 4.0C.
    bdc_tab-dynpro = '0154'.
  ELSE.
*   release >= 4.0C
    bdc_tab-dynpro = '0160'.
  ENDIF.
  bdc_tab-dynbegin = const-flg_yes.


*---------------------- SAMPLE

* sampling procedure in inspection characteristic
  IF pi_plmk_wa-stichprver(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-STICHPRVER'.
    bdc_tab-fval = pi_plmk_wa-stichprver.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* sample unit of measure
  IF pi_plmk_wa-probemgeh(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-PROBEMGEH'.
    bdc_tab-fval = pi_plmk_wa-probemgeh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* sample quantity factor for sample (multiple sample msmt unit)
  IF pi_plmk_wa-pruefeinh(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-PRUEFEINH'.
    bdc_tab-fval = pi_plmk_wa-pruefeinh.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* statisctical process control criterion
  IF pi_plmk_wa-spckrit(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-SPCKRIT'.
    bdc_tab-fval = pi_plmk_wa-spckrit.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


*------------------- DYNAMIC MODIFICATION'

* characteristic (in plan) whose q-level will be copied
  IF pi_plmk_wa-dynmerkref(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-DYNMERKREF'.
    bdc_tab-fval = pi_plmk_wa-dynmerkref.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* dynamic modification rule
  IF pi_plmk_wa-qdynregel(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-QDYNREGEL'.
    bdc_tab-fval = pi_plmk_wa-qdynregel.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* no input at first processing of screen
  IF pi_input_control_flag <> const_char-first_data.

* indicator: vendor considered for dynamic modification
    IF pi_plmk_wa-liefkz(1) NE const_nodata
    AND NOT pi_plmk_wa-liefkz(1) IS INITIAL.
      bdc_tab-fnam = 'RQPAS-LIEFKZ'.
      bdc_tab-fval = pi_plmk_wa-liefkz.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* indicator: customer considered for dynamic modification
    IF pi_plmk_wa-kundkz(1) NE const_nodata
    AND NOT pi_plmk_wa-kundkz(1) IS INITIAL.
      bdc_tab-fnam = 'RQPAS-KUNDKZ'.
      bdc_tab-fval = pi_plmk_wa-kundkz.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

  ENDIF.  "pi_input_control_flag <> const_char-first_data.

* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLQPAA_0154
*&---------------------------------------------------------------------*
*&      Form  PROCESS_CHARACTERISTIC
*&---------------------------------------------------------------------*
*       characteristic is processed
*       3 cases may occur:
*       1) master inspection char. is given: referenced
*       2)             "                   : incomplete
*       3) without "
*----------------------------------------------------------------------*
FORM process_characteristic
  CHANGING
    p_plmk_wa                      LIKE bi_plmk_tab
    p_cha_number                   LIKE cha_number.

  DATA:
    l_okcode                       LIKE okcode,
    l_qmkst                        LIKE qmkst,
    l_rqmst                        LIKE rqmst,
    l_master_char                  LIKE bi_plmk_tab,
    l_char_is_referenced_flag      LIKE plmk-qpmk_ref,
    l_additional_run_flag          TYPE c,
    l_without_reference            TYPE c,
*   processing screens
    l_processed                    LIKE c_processed.

  PERFORM release_check CHANGING release_lower_40c.

*-- first characteristic of operation ?
  IF p_cha_number = 1 .
*   starting from operation overview: goto characteristic overview
    PERFORM fill_saplcpdi_1400
            USING ok-characterist_overview_qmue
                  const-flg_yes.       "no data transfer
  ENDIF.


  IF NOT p_plmk_wa-verwmerkm IS INITIAL
    AND  p_plmk_wa-verwmerkm(1) <> const_nodata.
*-- master inspection characteristic is given

*   is characteristic referenced due to consistency flag ?
    PERFORM characteristic_reference_check
            CHANGING    p_plmk_wa
                        l_master_char
                        l_char_is_referenced_flag
                        l_without_reference.


* -------------- 1) REFERENCED MASTER INSPECTION CHARACTERISTIC -------
    IF l_char_is_referenced_flag EQ const-flg_yes.
*--   characteristic is referenced

      PERFORM char_data_check
                USING
                  l_char_is_referenced_flag
                  l_master_char
                CHANGING
                  p_plmk_wa
                  l_additional_run_flag .

*     characteristic overview
      PERFORM fill_saplqpaa_0150 USING
                  p_plmk_wa
                  ok-qm_enter____
                  p_cha_number
                  const_char-master_char_m.

*     popup master inspection characteristic
      PERFORM fill_saplqpaa_1501 USING
                  p_plmk_wa
                  ok-qm_enter____ .

*---  POPUPS OTHER THAN IN DIALOG !!! :

*--   popup:  general data
      PERFORM fill_saplqpaa_0151
              USING
                p_plmk_wa
                ok-qm_enter____
                const_char-master_char_m
              CHANGING
                l_processed.
      l_processed-scr_151 = const-flg_yes .


*     popup sequence
      PERFORM fill_saplqpaa_cha_popups
           USING
             l_char_is_referenced_flag
             l_master_char-quantitat
             l_master_char-stichpr
             l_master_char-formelmk
             p_plmk_wa
           CHANGING
             l_processed .


*-----      AFTER POPUPS select screens for further data

*     mark characteristic and process mandatory screens, demark
      PERFORM fill_charact_additional_data
                 USING
                   p_cha_number
                   p_plmk_wa
                   l_master_char-stichpr
                 CHANGING
                   l_processed .




* --------------- 2) INCONSISTENT MASTER INSPECTION CHARACTERISTIC -----
    ELSE.  " l_char_is_referenced_flag eq 'X'.
*--   master characteristic is not referenced
*--   (complete or incomplete copy model)

      PERFORM char_data_check
                USING
                  l_char_is_referenced_flag
                  l_master_char
                CHANGING
                  p_plmk_wa
                  l_additional_run_flag  .
      IF l_without_reference IS INITIAL.
*--   characteristic overview
      PERFORM fill_saplqpaa_0150 USING
                  p_plmk_wa
                  ok-qm_enter____
                    p_cha_number
                    const_char-master_char_m.
      ELSE.
*--   characteristic overview
        PERFORM fill_saplqpaa_0150 USING
                    p_plmk_wa
                    ok-char_reference_unlock_qstm
                    p_cha_number
                    const_char-master_char_m.
      ENDIF.
*--   popup master inspection characteristic
      PERFORM fill_saplqpaa_1501 USING
                  p_plmk_wa
                  ok-qm_enter____ .


*--   popup inspection method          "note 334956
      PERFORM popup_1502_decide USING
                  p_plmk_wa     CHANGING
                  flg-popup_1502.

      IF NOT flg-popup_1502 IS INITIAL.
        PERFORM fill_saplqpaa_1502 USING
                    p_plmk_wa
                    ok-qm_enter____
                    const_char-all    .
        PERFORM fill_saplqpaa_1502 USING
                    p_plmk_wa
                    ok-qm_enter____
                    const_char-all    .
        l_processed-scr_1502 = const-flg_yes.
      ENDIF.


*--   popup general data for master insp. char.
      PERFORM fill_saplqpaa_0151
                USING
                  p_plmk_wa
                  ok-qm_enter____
                  const_char-all
                CHANGING
                  l_processed .
      l_processed-scr_151 = const-flg_yes.


*--   popup inspection method
      IF l_processed-scr_1502 IS INITIAL  .
        PERFORM fill_saplqpaa_1502 USING
                    p_plmk_wa
                   ok-qm_enter____
                   const_char-no_data__.
        l_processed-scr_1502 = const-flg_yes.
      ENDIF.


*     popup sequence
      PERFORM fill_saplqpaa_cha_popups
           USING
             l_char_is_referenced_flag
             l_master_char-quantitat "type of read master insp. char.
* or:        p_plmk_wa-quantitat     "type of insp. char. is known
             l_master_char-stichpr
             p_plmk_wa-formelmk      "formula indicator is known
* or:        l_master_char-formelmk  "formula indicator of master insp.
             p_plmk_wa
           CHANGING
             l_processed .


*--   characteristic overview screen

*- if other data besides master char. are given in overview:
      IF l_additional_run_flag = const-flg_yes .

*--     characteristic overview
        PERFORM fill_saplqpaa_0150 USING
                  p_plmk_wa
                  ok-qm_enter____
                  p_cha_number
                  const_char-second_run_s .


        IF  (  p_plmk_wa-vsteuerkz(1) <> const_nodata AND
          NOT  p_plmk_wa-vsteuerkz IS INITIAL )
          OR ( p_plmk_wa-quantitat(1) <> const_nodata AND
           NOT  p_plmk_wa-quantitat IS INITIAL ).

*--       characteristic control indicators
          MOVE-CORRESPONDING p_plmk_wa TO l_qmkst.
          PERFORM char_convert_qmkst_rqmst
                USING
                  l_qmkst
                CHANGING
                  l_rqmst .

*--       popup: control indicator screen 1
          PERFORM fill_saplqss0_0100 USING
                 l_rqmst
                 ok-qm_enter____ .


          IF l_rqmst-estukz1 IS INITIAL.
*           characteristic values are to be recorded

*--         popup: control indicator screen 2
            PERFORM fill_saplqss0_0101 USING
                 l_rqmst
                 ok-qm_enter____ .

          ENDIF.                       "l_rqmst-estukz1

        ENDIF.                         "vsteuerkz or quantitat


*--     popup: tolerance key
        IF        p_plmk_wa-toleranzsl(1) <> const_nodata
          AND NOT p_plmk_wa-toleranzsl IS INITIAL .
          PERFORM fill_saplqpaa_1504 USING
                p_plmk_wa
                ok-qm_enter____ .
          l_processed-scr_1504 = const-flg_yes.
        ENDIF.


*--     popup:  general data
        PERFORM fill_saplqpaa_0151
                USING
                  p_plmk_wa
                  ok-qm_enter____
                  const_char-all
                CHANGING
                  l_processed.
        l_processed-scr_151 = const-flg_yes.


*       popup sequence
        PERFORM fill_saplqpaa_cha_popups
             USING
               l_char_is_referenced_flag
               p_plmk_wa-quantitat
               p_plmk_wa-stichpr
               p_plmk_wa-formelmk
               p_plmk_wa
             CHANGING
               l_processed .


      ENDIF.  "l_additional_run_flag = const-flg_yes


*     after popups select screens for further data

*     mark characteristic and process mandatory screens, demark
      PERFORM fill_charact_additional_data
                 USING
                   p_cha_number
                   p_plmk_wa
                   l_master_char-stichpr
                 CHANGING
                   l_processed .


    ENDIF. "not l_char_is_referenced_flag is initial.


* ------------ 3) NO MASTER INSPECTION CHARACTERISTC -------------------
  ELSE.   "if not p_plmk_wa-verwmerkm is initial
*-- no master inspection characteristic is given
*   popup screen sequence is given in tables TQ25 and TCA66

    CLEAR: l_char_is_referenced_flag .

*-- characteristic control indicators
    MOVE-CORRESPONDING p_plmk_wa TO l_qmkst.
    PERFORM char_convert_qmkst_rqmst
               USING
                 l_qmkst
               CHANGING
                 l_rqmst .

*-- characteristic control indicator
    PERFORM char_data_check
               USING
                 l_char_is_referenced_flag
                 l_master_char
               CHANGING
                 p_plmk_wa
                 l_additional_run_flag .

*-- characteristic overview
    PERFORM fill_saplqpaa_0150 USING
              p_plmk_wa
              ok-qm_enter____
              p_cha_number
              const_char-no_master_char_c.

*-- popup: inspection method
    IF p_plmk_wa-pmethode(1) <> const_nodata AND
      NOT p_plmk_wa-pmethode IS INITIAL.
      PERFORM fill_saplqpaa_1502 USING
                  p_plmk_wa
                  ok-qm_enter____
                  const_char-all    .
    ENDIF.                             "pmethode

    IF p_plmk_wa-vsteuerkz IS INITIAL
      OR p_plmk_wa-vsteuerkz = const_nodata
      OR NOT p_plmk_wa-fixiert = const-flg_yes.
*     no fixed indicators given: Control indicators popups

*--   popup:     control indicator screen 1
      PERFORM fill_saplqss0_0100 USING
           l_rqmst
           ok-qm_enter____ .

*--   popup:     control indicator screen 2
      IF l_rqmst-estukz1 IS INITIAL.
*       characteristic is to be recorded
        PERFORM fill_saplqss0_0101 USING
             l_rqmst
             ok-qm_enter____ .
      ENDIF.

    ELSE. "-fixiert
*     control key profile is given with fixed indicators
    ENDIF. "-fixiert


*-- popup:  tolerance key
    IF        p_plmk_wa-toleranzsl(1) <> const_nodata
      AND NOT p_plmk_wa-toleranzsl IS INITIAL .

      PERFORM fill_saplqpaa_1504 USING
            p_plmk_wa
            ok-qm_enter____ .

    ENDIF. "p_plmk_wa-toleranzsl


*-- popup:  general data
    PERFORM fill_saplqpaa_0151
            USING
              p_plmk_wa
              ok-qm_enter____
              const_char-all
            CHANGING
              l_processed.
    l_processed-scr_151 = const-flg_yes.


*-- popup: inspection method
    IF l_processed-scr_1502 IS INITIAL
      AND p_plmk_wa-pmethode(1) <> const_nodata AND
      NOT p_plmk_wa-pmethode IS INITIAL.

      PERFORM fill_saplqpaa_1502 USING
                  p_plmk_wa
                  ok-qm_enter____
                  const_char-all    .
      l_processed-scr_1502 = const-flg_yes.

    ENDIF.                             "pmethode


*   characteristic popup sequence
    PERFORM fill_saplqpaa_cha_popups
            USING
              l_char_is_referenced_flag
              p_plmk_wa-quantitat
              p_plmk_wa-stichpr
              p_plmk_wa-formelmk
              p_plmk_wa
            CHANGING
              l_processed .


*-----   AFTER POPUPS select screens for further data

*   mark characteristic and process mandatory screens, demark
    PERFORM fill_charact_additional_data
               USING
                 p_cha_number
                 p_plmk_wa
                 l_qmkst-stichpr
               CHANGING
                 l_processed .


  ENDIF. "master inspection characteristic is given


* -------------- FOR ALL CHARACTERISTICS


* position characteristics
  PERFORM fill_saplqpaa_0150 USING
               p_plmk_wa
               ok-qm_enter____
               p_cha_number
               const_char-position_up_u .

* first characteristic of operation has been processed
  p_cha_number = 2.

ENDFORM.                               " PROCESS_CHARACTERISTIC

*&---------------------------------------------------------------------*
*&      Form  CHAR_DATA_CHECK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PI_CHAR_IS_REFERENCED_FLAG
*     <-->p_PLMK_WA                   characteristic data
*----------------------------------------------------------------------*
FORM char_data_check
     USING
       i_char_is_referenced_flag   LIKE plmk-qpmk_ref
       i_master_char               LIKE bi_plmk_tab
     CHANGING
       p_plmk_wa                    LIKE bi_plmk_tab
       e_additional_run_flag        TYPE c .

  DATA:
    l_master_qmkst LIKE qmkst,
    l_char_qmkst   LIKE qmkst,
    l_tq27_wa      LIKE tq27.          "preset control indicator values

* process popup sequence only once
  CLEAR e_additional_run_flag .

  IF i_char_is_referenced_flag = const-flg_yes.
*   referenced master inspection characteristic

*--   only data of master characteristic are relevant
    IF   p_plmk_wa-vsteuerkz(1)  <> const_nodata
      OR p_plmk_wa-quantitat(1)  <> const_nodata
      OR p_plmk_wa-toleranzsl(1) <> const_nodata.

*--   all other control data in input structure will be ignored
      p_plmk_wa-vsteuerkz(1)  = const_nodata.
      p_plmk_wa-quantitat(1)  = const_nodata.
      p_plmk_wa-toleranzsl(1) = const_nodata.

    ENDIF.

  ELSE .     "i_char_is_referenced_flag = const-flg_yes.
*--  no referenced master characteristic

* preset char control indicators have higher priority than quantit.
    IF        p_plmk_wa-vsteuerkz(1) <> const_nodata
      AND NOT p_plmk_wa-vsteuerkz  IS INITIAL.
*-- other control data in input structure will be ignored
*   message w923(q3) with p_plmk_wa-vornr p_plmk_wa-merknr.
*   quantitative or qualitative characteristic ?
      CALL FUNCTION 'TQ27_READ'
           EXPORTING
*           KZEINSTELL = ' '
              vsteu      = p_plmk_wa-vsteuerkz
           IMPORTING
              tq27_exp   = l_tq27_wa
           EXCEPTIONS
              no_entry   = 1
              OTHERS     = 2.
      IF sy-subrc <> 0 .
*   message e620 with plmkb-vsteuerkz. "Define the control key profile &
        MESSAGE e620(qp) WITH p_plmk_wa-vsteuerkz.
      ELSE.
        IF l_tq27_wa-fixiert = const-flg_yes.
*         control key profile indicators must not be changed
          MOVE-CORRESPONDING l_tq27_wa TO l_char_qmkst.
          MOVE-CORRESPONDING l_char_qmkst TO p_plmk_wa.
*         no control indicators processing: no popups
          p_plmk_wa-quantitat = const_nodata.
        ELSE. "l_tq27_wa-fixiert = const-flg_yes.
*         take only those indicators that are not given explicitly
          MOVE-CORRESPONDING p_plmk_wa TO l_char_qmkst.
          MOVE-CORRESPONDING l_tq27_wa TO l_master_qmkst.
          OVERLAY l_char_qmkst WITH l_master_qmkst ONLY const_nodata.
          MOVE-CORRESPONDING l_char_qmkst TO p_plmk_wa.
        ENDIF.
        IF l_tq27_wa-quantitat IS INITIAL.
          MOVE const_nodata TO p_plmk_wa-quantitat .
        ELSE.
          MOVE const-flg_yes TO p_plmk_wa-quantitat.
        ENDIF.
      ENDIF.

    ENDIF.    "p_plmk_wa-vsteuerkz  <> const_nodata


*-- are there relevant data besides the master inspection char. data ?
    IF NOT i_master_char IS INITIAL.

      IF ( p_plmk_wa-vsteuerkz(1)    <> const_nodata AND
         NOT p_plmk_wa-vsteuerkz IS INITIAL )
        OR ( p_plmk_wa-quantitat(1)  <> const_nodata AND
         NOT p_plmk_wa-quantitat IS INITIAL )
        OR ( p_plmk_wa-toleranzsl(1) <> const_nodata AND
         NOT p_plmk_wa-toleranzsl IS INITIAL ) .

*--     process screens a second time
        e_additional_run_flag = const-flg_yes.

      ENDIF.

*     master characteristic is given, control indicators are changed ?
      MOVE-CORRESPONDING i_master_char TO l_master_qmkst.
      MOVE-CORRESPONDING p_plmk_wa     TO l_char_qmkst.
      IF    NOT l_master_qmkst IS INITIAL
        AND l_char_qmkst = l_master_qmkst.
*       control indicators are unchanged: no extra popup sequence
        CLEAR e_additional_run_flag .
      ENDIF.

    ENDIF. " not i_master_char is initial.


  ENDIF.                               "pi_char_is_referenced_flag


ENDFORM.                               " CHAR_DATA_CHECK

*&---------------------------------------------------------------------*
*&      Form  CHARACTERISTIC_REFERENCE_CHECK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*       --> P_PLMK_WA                   Characteristic from BI
*      <--> PE_CHAR_IS_REFERENCED_FLAG  consistent master char.
*----------------------------------------------------------------------*
FORM characteristic_reference_check
      CHANGING  p_plmk_wa                  LIKE bi_plmk_tab
                pe_master_char_wa          LIKE bi_plmk_tab
                pe_char_is_referenced_flag LIKE plmk-qpmk_ref
                pe_without_reference       TYPE c.

  DATA:
    l_imp_qpmk_wa             LIKE qpmk,  "master insp. char.
    l_mkversion               LIKE tpfet-versnr,
    l_werk                    LIKE qpmk-werks,
    l_qmkst                   LIKE qmkst, "char. control indicators
    l_subrc                   LIKE sy-subrc.

* plant must be given
  MOVE  p_plmk_wa-qpmk_zaehl TO l_werk.

  IF  p_plmk_wa-mkversion IS INITIAL
   OR p_plmk_wa-mkversion(1) EQ const_nodata.               " 372013
*   master inspection characteristic version is not known

*   read valid master inspection characteristic version
    CALL FUNCTION 'QPSD_FEATURE_VALID_READ'
      EXPORTING
        kz_aufloesung = ' '      "read no methods
        kz_nichtfrei  = ' '      "only released master char.
        merkmal       = p_plmk_wa-verwmerkm
        werk          = l_werk
      IMPORTING
        qpmk_exp      = l_imp_qpmk_wa  "master characteristic
      EXCEPTIONS
        no_feature    = 1
        no_valid      = 3
        OTHERS        = 4.
    MOVE sy-subrc TO l_subrc.

    MOVE l_imp_qpmk_wa-version TO p_plmk_wa-mkversion.

  ELSE. "  p_plmk_wa-mkversion is initial
*   master inspection characteristic version is given

*   data type conversion: 1 ---> 000001
    MOVE  p_plmk_wa-mkversion TO l_mkversion .
    WRITE l_mkversion TO p_plmk_wa-mkversion.

*------------ check if characteristic is referenced
    CALL FUNCTION 'QPSD_FEATURE_VERSION_READ'
      EXPORTING
        kz_aufloesung   = ' '    "read no methods
        kz_nichtfrei    = ' '    "only released master char.
        merkmal         = p_plmk_wa-verwmerkm
        version         = p_plmk_wa-mkversion
        werk            = l_werk
      IMPORTING
        qpmk_exp        = l_imp_qpmk_wa  "master characteristic
      EXCEPTIONS
        no_feature      = 1
        no_free_version = 2
        no_version      = 3
        OTHERS          = 4.
    MOVE sy-subrc TO l_subrc.

  ENDIF. "  p_plmk_wa-mkversion is initial

  IF NOT l_subrc IS INITIAL.
    CASE l_subrc.
      WHEN 1 .
*--       master inspection characteristic not found
        MESSAGE e320(qs) .
      WHEN 2 .
*--       Version of master inspection characteristic not released
        MESSAGE e323(qs) WITH p_plmk_wa-mkversion p_plmk_wa-verwmerkm.
      WHEN 3 .
*--       no valid version found
        MESSAGE e308(qs) WITH p_plmk_wa-mkversion p_plmk_wa-verwmerkm.
      WHEN OTHERS.
*--       internal error
        MESSAGE e099(q3).
    ENDCASE.
  ELSE.
    IF l_imp_qpmk_wa-konsistent = const-flg_yes AND
      p_plmk_wa-qpmk_ref <> const-flg_yes.
*     reference to master characteristic was deleted
      MOVE '1' TO pe_char_is_referenced_flag.
      MOVE const-flg_yes TO pe_without_reference.
    ELSE.
      MOVE l_imp_qpmk_wa-konsistent TO pe_char_is_referenced_flag.
    ENDIF.
*     import control indic. of master char. for popup control
    MOVE-CORRESPONDING l_imp_qpmk_wa TO pe_master_char_wa.
    MOVE l_imp_qpmk_wa-steuerkz   TO l_qmkst .
    MOVE-CORRESPONDING l_qmkst TO pe_master_char_wa.
  ENDIF.

ENDFORM.                               " CHARACTERISTIC_REFERENCE_CHECK

*&---------------------------------------------------------------------*
*&      Form  CHAR_MARK_CHARACTERISTIC
*&---------------------------------------------------------------------*
*       marks a characteristic on characteristic overview
*----------------------------------------------------------------------*
*      -->PI_CHA_NUMBER
*----------------------------------------------------------------------*
FORM char_mark_characteristic
       USING
         pi_cha_number         LIKE cha_number
       CHANGING
         p_cha_is_marked_flag  LIKE const-flg_yes.

* mark only if not yet done
  CHECK: p_cha_is_marked_flag IS INITIAL.


  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQPAA'.
  bdc_tab-dynpro = '0150'.
  bdc_tab-dynbegin = const-flg_yes.
* mark characteristic

* Selektionskennzeichen
  IF pi_cha_number < 2.
    bdc_tab-fnam = 'RQPAS-SEL_FLG(1)'.
  ELSE.
    bdc_tab-fnam = 'RQPAS-SEL_FLG(2)'.
  ENDIF.

  bdc_tab-fval = const-mark.
  APPEND bdc_tab.
  CLEAR bdc_tab.

* export mark
  p_cha_is_marked_flag = const-flg_yes.

ENDFORM.                               " CHAR_MARK_CHARACTERISTIC
*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_1504
*&---------------------------------------------------------------------*
*       fills popup screen for target values and tolerances
*----------------------------------------------------------------------*
*      -->PI_PLMK_WA         characteristic data
*      -->Pi_ok-code         ok-code
*----------------------------------------------------------------------*
FORM fill_saplqpaa_1504
    USING   pi_plmk_wa          LIKE bipmk
            pi_okcode           LIKE okcode.


  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQPAA'.
  bdc_tab-dynpro = '1504'.
  bdc_tab-dynbegin = const-flg_yes.


* --------- Target value

* target value for a quantitative characteristic
  IF pi_plmk_wa-sollwert(1) NE const_nodata.
    bdc_tab-fnam = 'QFLTP-SOLLWERT'.
    bdc_tab-fval = pi_plmk_wa-sollwert.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLQPAA_1504
*&---------------------------------------------------------------------*
*&      Form  PROCESS_CHARACTERISTIC_TEXT
*&---------------------------------------------------------------------*
*       fills characteristic long text from batch input
*----------------------------------------------------------------------*
FORM process_characteristic_text
     USING pi_plmk_wa                   LIKE bipmk.

  CLEAR ltext_tab.
  REFRESH ltext_tab.
*
  LOOP AT bi_plmktx_tab WHERE plnty  = pi_plmk_wa-plnty AND
                              plnnr  = pi_plmk_wa-plnnr AND
                              plnal  = pi_plmk_wa-plnal AND
                              plnfl  = pi_plmk_wa-plnfl AND
                              vornr  = pi_plmk_wa-vornr AND
                              merknr = pi_plmk_wa-merknr .
    MOVE-CORRESPONDING bi_plmktx_tab TO ltext_tab.
    APPEND ltext_tab.
  ENDLOOP.

  PERFORM fill_saplstxx_1100 TABLES ltext_tab.

ENDFORM.                               " PROCESS_CHARACTERISTIC_TEXT

*&---------------------------------------------------------------------*
*&      Form  CHAR_CONVERT_QMKST_RQMST
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PI_QMKST  characteristic control indicators
*      -->PE_RQMST  characteristic: work area of screen for control keys
*----------------------------------------------------------------------*
FORM char_convert_qmkst_rqmst
            USING    pi_qmkst          LIKE qmkst
            CHANGING pe_rqmst          LIKE rqmst .

*--       get work area for screen
  CALL FUNCTION 'QSS0_QMKST_RQMST'
    EXPORTING
      qmkst_imp = pi_qmkst
    IMPORTING
      rqmst_exp = pe_rqmst
    EXCEPTIONS
      OTHERS    = 1.
  IF NOT sy-subrc IS INITIAL.
*           data conversion error ???
  ENDIF.

ENDFORM.                               " CHAR_CONVERT_QMKST_RQMST

*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_1511
*&---------------------------------------------------------------------*
*       fills subscreen for characteristic info fields
*----------------------------------------------------------------------*
FORM fill_saplqpaa_1511
      USING       pi_plmk_wa              LIKE bi_plmk_tab
        value(pi_okcode)                  LIKE okcode
        value(i_char_is_referenced_flag)  LIKE plmk-qpmk_ref.


  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQPAA'.
  bdc_tab-dynpro = '1511'.
  bdc_tab-dynbegin = const-flg_yes.

  IF i_char_is_referenced_flag NE const-flg_yes.
*   master characteristic is not referenced

* text line for additional information (10)
  IF pi_plmk_wa-dummy10(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-DUMMY10'.
    bdc_tab-fval = pi_plmk_wa-dummy10.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*   text line for additional information (20)
  IF pi_plmk_wa-dummy20(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-DUMMY20'.
    bdc_tab-fval = pi_plmk_wa-dummy20.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*   text line for additional information (40)
  IF pi_plmk_wa-dummy40(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-DUMMY40'.
    bdc_tab-fval = pi_plmk_wa-dummy40.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

  ENDIF.  " i_char_is_referenced_flag NE const-flg_yes

* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLQPAA_1511

*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_1521
*&---------------------------------------------------------------------*
*       fills subscreen for characteristic tolerance changing
*----------------------------------------------------------------------*
FORM fill_saplqpaa_1521
      USING       pi_plmk_wa LIKE bipmk
        value(pi_okcode)                  LIKE okcode
        value(i_char_is_referenced_flag)  LIKE plmk-qpmk_ref.


  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQPAA'.
  bdc_tab-dynpro = '1521'.
  bdc_tab-dynbegin = const-flg_yes.


* --------- Tolerance change

  IF i_char_is_referenced_flag NE const-flg_yes.
*   master characteristic is not referenced

*   date from which the tolerance change is valid
  IF pi_plmk_wa-tolerwab(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-TOLERWAB'.
    bdc_tab-fval = pi_plmk_wa-tolerwab.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*   date until which the tolerance change is valid
  IF pi_plmk_wa-tolerwbis(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-TOLERWBIS'.
    bdc_tab-fval = pi_plmk_wa-tolerwbis.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*   lower tolerance change
  IF pi_plmk_wa-tolerweiun(1) NE const_nodata.
    bdc_tab-fnam = 'QFLTP-TOLERWEIUN'.
    bdc_tab-fval = pi_plmk_wa-tolerweiun.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*   upper tolerance change
  IF pi_plmk_wa-tolerweiob(1) NE const_nodata.
    bdc_tab-fnam = 'QFLTP-TOLERWEIOB'.
    bdc_tab-fval = pi_plmk_wa-tolerweiob.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*   first lower limit value
  IF pi_plmk_wa-grenzeun1(1) NE const_nodata.
    bdc_tab-fnam = 'QFLTP-GRENZEUN1'.
    bdc_tab-fval = pi_plmk_wa-grenzeun1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*   first upper limit value
  IF pi_plmk_wa-grenzeob1(1) NE const_nodata.
    bdc_tab-fnam = 'QFLTP-GRENZEOB1'.
    bdc_tab-fval = pi_plmk_wa-grenzeob1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*   second lower limit value
  IF pi_plmk_wa-grenzeun2(1) NE const_nodata.
    bdc_tab-fnam = 'QFLTP-GRENZEUN2'.
    bdc_tab-fval = pi_plmk_wa-grenzeun2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

*   second upper limit value
  IF pi_plmk_wa-grenzeob2(1) NE const_nodata.
    bdc_tab-fnam = 'QFLTP-GRENZEOB2'.
    bdc_tab-fval = pi_plmk_wa-grenzeob2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

  ENDIF. "   if i_char_is_referenced_flag ne ref_yes

* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLQPAA_1521

*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_1522
*&---------------------------------------------------------------------*
*       fills subscreen for formula of characteristic
*----------------------------------------------------------------------*
FORM fill_saplqpaa_1522
      USING       pi_plmk_wa LIKE bipmk
            value(pi_okcode) LIKE okcode.


  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQPAA'.
  bdc_tab-dynpro = '1522'.
  bdc_tab-dynbegin = const-flg_yes.


* --------- Formula

* formula field (1)
  IF pi_plmk_wa-formel1(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-FORMEL1'.
    bdc_tab-fval = pi_plmk_wa-formel1.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* formula field (2)
  IF pi_plmk_wa-formel2(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-FORMEL2'.
    bdc_tab-fval = pi_plmk_wa-formel2.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* formelsl field note 949189
  IF pi_plmk_wa-formelsl(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-FORMELSL'.
    bdc_tab-fval = pi_plmk_wa-formelsl.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* input procedure
  IF pi_plmk_wa-inpproc(1) NE const_nodata.
    bdc_tab-fnam = 'PLMKB-INPPROC'.
    bdc_tab-fval = pi_plmk_wa-inpproc.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLQPAA_1522


*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_1502
*&---------------------------------------------------------------------*
*       fills popup for inspection method
*----------------------------------------------------------------------*
*      -->P_P_PLMK_WA  text                                            *
*      -->P_OK_QM_ENTER____  text                                      *
*----------------------------------------------------------------------*
FORM fill_saplqpaa_1502 USING
           pi_plmk_wa                    LIKE bipmk
           pi_okcode                     LIKE okcode
           value(pi_input_control_flag)  TYPE c.

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLQPAA'.
  bdc_tab-dynpro = '1502'.
  bdc_tab-dynbegin = const-flg_yes.

  IF pi_input_control_flag <> const_char-no_data__.

* inpection method attributed to master inspection characteristic
    IF pi_plmk_wa-pmethode(1) NE const_nodata
      AND NOT pi_plmk_wa-pmethode IS INITIAL.
      bdc_tab-fnam = 'PLMKB-PMETHODE'.
      bdc_tab-fval = pi_plmk_wa-pmethode.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ELSE.
*   initialize method
      bdc_tab-fnam = 'PLMKB-PMETHODE'.
      bdc_tab-fval = '!'.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* plant of inspection method
    IF pi_plmk_wa-qmtb_werks(1) NE const_nodata.
      bdc_tab-fnam = 'PLMKB-QMTB_WERKS'.
      bdc_tab-fval = pi_plmk_wa-qmtb_werks.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ELSEIF pi_plmk_wa-pmethode(1) EQ const_nodata.
*   initialize method plant just in case it will be filled by get WRK
      bdc_tab-fnam = 'PLMKB-QMTB_WERKS'.
      bdc_tab-fval = '!'.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

* version of inspection method
    IF pi_plmk_wa-pmtversion(1) NE const_nodata
      AND NOT pi_plmk_wa-pmtversion IS INITIAL.
      bdc_tab-fnam = 'PLMKB-PMTVERSION'.
      bdc_tab-fval = pi_plmk_wa-pmtversion.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ELSE.
*   initialize method
      bdc_tab-fnam = 'PLMKB-PMTVERSION'.
      bdc_tab-fval = '!'.
      APPEND bdc_tab.
      CLEAR bdc_tab.
    ENDIF.

  ENDIF.


* OK-CODE
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.

ENDFORM.                               " FILL_SAPLQPAA_1502
*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLCPDI_8010
*&---------------------------------------------------------------------*
*       Einstiegsbild Prüfplan
*----------------------------------------------------------------------*
*      -->PI_OKCODE     Ok-Code
*----------------------------------------------------------------------*
FORM fill_saplcpdi_8010
       USING value(pi_okcode)                  LIKE okcode .

  CLEAR bdc_tab.
  bdc_tab-program = 'SAPLCPDI'.
  bdc_tab-dynpro = '8010'.
  bdc_tab-dynbegin = const-flg_yes.

* Material
  bdc_tab-fnam = 'RC27M-MATNR'.
  bdc_tab-fval = space.
  APPEND bdc_tab.
  CLEAR bdc_tab.

* Werk
  bdc_tab-fnam = 'RC27M-WERKS'.
  bdc_tab-fval = space.
  APPEND bdc_tab.
  CLEAR bdc_tab.

* Plangruppe
  IF plko_tab-plnnr(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-PLNNR'.
    bdc_tab-fval = plko_tab-plnnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* ---------------- Gültigkeit --------
* Änderungsnummer
  IF plko_tab-aennr(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-AENNR'.
    bdc_tab-fval = plko_tab-aennr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Stichtag
  IF plko_tab-datuv(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-STTAG'.
    bdc_tab-fval = plko_tab-datuv.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* Revisionsstand
* 'RC271-REVLV'

* ----- Weitere Kriterien ------------
* Werk                RC271-WERKS
* Plangruppenzähler   RC271-PLNAL
* Status Plan         RC271-STATU
* Planergruppe        RC271-VAGRP

* ----- Weitere Daten -----------------
* Profil
  IF plko_tab-profidnetz(1) NE const_nodata.
    bdc_tab-fnam = 'RC271-PROFIDNETZ'.
    bdc_tab-fval = plko_tab-profidnetz.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.


* OK-Code
  IF NOT pi_okcode IS INITIAL.
    PERFORM send_okcode
            USING pi_okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLCPDI_8010

*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLCZDI_4010
*&---------------------------------------------------------------------*
*       fills dynpro for material/plan/assignment for inspection plans
*----------------------------------------------------------------------*
*      -->P_7300   text                                                *
*      -->P_IN_CNT  text                                               *
*----------------------------------------------------------------------*
FORM fill_saplczdi_4010
     USING: value(okcode) LIKE okcode
            value(in_cnt) TYPE i.

* PLANGRUPPENZÄHLER
  bdc_tab-fnam = 'MAPL-PLNAL('.
  WRITE in_cnt TO bdc_tab-fnam+11(1).
  WRITE ')'    TO bdc_tab-fnam+12(1).
  bdc_tab-fval = mapl_tab-plnal.
  APPEND bdc_tab.
  CLEAR bdc_tab.

* Materialnummer
  bdc_tab-fnam = 'MAPL-MATNR('.
  WRITE in_cnt TO bdc_tab-fnam+11(1).
  WRITE ')'    TO bdc_tab-fnam+12(1).
  bdc_tab-fval = mapl_tab-matnr.
  APPEND bdc_tab.
  CLEAR bdc_tab.

* Werk
  bdc_tab-fnam = 'MAPL-WERKS('.
  WRITE in_cnt TO bdc_tab-fnam+11(1).
  WRITE ')'    TO bdc_tab-fnam+12(1).
  bdc_tab-fval = mapl_tab-werks.
  APPEND bdc_tab.
  CLEAR bdc_tab.

* vendor
  IF mapl_tab-lifnr(1) NE const_nodata.
    bdc_tab-fnam = 'MAPL-LIFNR('.
    WRITE in_cnt TO bdc_tab-fnam+11(1).
    WRITE ')'    TO bdc_tab-fnam+12(1).
    bdc_tab-fval = mapl_tab-lifnr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* customer
  IF mapl_tab-kunr(1) NE const_nodata.
    bdc_tab-fnam = 'MAPL-KUNR('.
    WRITE in_cnt TO bdc_tab-fnam+10(1).               "note 119612
    WRITE ')'    TO bdc_tab-fnam+11(1).
    bdc_tab-fval = mapl_tab-kunr.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* searchfield
  IF mapl_tab-suchfeld(1) NE const_nodata AND          "note 0193124
    NOT mapl_tab-suchfeld IS INITIAL.
    bdc_tab-fnam = 'MAPL-SUCHFELD('.
    WRITE in_cnt TO bdc_tab-fnam+14(1).
    WRITE ')'    TO bdc_tab-fnam+15(1).
    bdc_tab-fval = mapl_tab-suchfeld.
    APPEND bdc_tab.
    CLEAR bdc_tab.
  ENDIF.

* OK-Code
  IF NOT okcode IS INITIAL AND in_cnt EQ 5.

    PERFORM send_okcode                                     "note 138204
            USING 'P++'.

    CLEAR bdc_tab.
    bdc_tab-program = 'SAPLCZDI'.
    bdc_tab-dynpro = '4010'.
    bdc_tab-dynbegin = const-flg_yes.
    PERFORM send_okcode
            USING okcode.
  ELSE.
    IF bdc_tab-dynbegin = const-flg_yes.
      APPEND bdc_tab.
    ENDIF.
  ENDIF.


ENDFORM.                               " FILL_SAPLCZDI_4010

*&---------------------------------------------------------------------*
*&      Form  FILL_CHARACT_ADDITIONAL_DATA
*&---------------------------------------------------------------------*
*&      fills characteristic additional data screen
*&---------------------------------------------------------------------*
FORM fill_charact_additional_data
        USING
          i_cha_number           LIKE cha_number
          i_plmk_wa              LIKE bi_plmk_tab
          i_stichpr              LIKE bi_plmk_tab-stichpr
        CHANGING
          p_processed            LIKE c_processed.

  DATA:     l_okcode               LIKE okcode,
            l_cha_is_marked_flag   TYPE c .


* starting from screen 150 (characteristic overview)


* characteristic long text
  IF NOT i_plmk_wa-txtsp IS INITIAL
     AND i_plmk_wa-qpmk_ref NE const-flg_yes                "n0350107
     AND i_plmk_wa-txtsp(1) NE const_nodata.

*   mark characteristic
    PERFORM char_mark_characteristic
           USING
             i_cha_number
           CHANGING
             l_cha_is_marked_flag .

*   long text editor
    PERFORM fill_saplqpaa_0150 USING
                 i_plmk_wa
                 ok-char_long_text_qltx
                 i_cha_number
                 const_char-no_data__ .

    PERFORM process_characteristic_text
                USING
                  i_plmk_wa.

  ENDIF.                               " long text


  l_okcode = ok-characterist_overview_qmue.


* dynamic modification data screen, if data input is allowed
  IF   i_stichpr = const-flg_yes
    OR ( plko_tab-qdynhead = '3'
        AND NOT plko_tab-qdynregel is initial ).
*   process dynamic data screen

*   mark characteristic if necessary
    PERFORM char_mark_characteristic
            USING
              i_cha_number
            CHANGING
              l_cha_is_marked_flag .

*   characteristic overview: ---> dyn. mod. data
    PERFORM fill_saplqpaa_0150 USING
                i_plmk_wa
                ok-char_dynamic_modific_qmd1
                i_cha_number
                const_char-no_data__ .

*   dynamic modification data
    PERFORM fill_saplqpaa_0154 USING
                i_plmk_wa
                l_okcode
                const_char-all .
    p_processed-scr_154 = const-flg_yes.


  ELSE.  "i_stichpr = const-flg_yes or dynlevel = 3
*   dynamic data screen is not processed

  ENDIF. "i_stichpr = const-flg_yes or dynlevel = 3


* demark characteristic if necessary
  IF NOT l_cha_is_marked_flag IS INITIAL.
    PERFORM fill_saplqpaa_0150 USING
               i_plmk_wa
               ok-qm_deselect_all
               i_cha_number
               const_char-no_data__.
    CLEAR l_cha_is_marked_flag.
  ENDIF.

ENDFORM.                               " FILL_CHARACT_ADDITIONAL_DATA
*&---------------------------------------------------------------------*
*&      Form  FILL_SAPLQPAA_CHA_POPUPS
*&---------------------------------------------------------------------*
*       fills screens of popup sequence when processing new
*       inspection characteristics
*----------------------------------------------------------------------*
FORM fill_saplqpaa_cha_popups
        USING
          i_char_is_referenced_flag  LIKE plmk-qpmk_ref
          i_quantitat                LIKE bi_plmk_tab-quantitat
          i_stichpr                  LIKE bi_plmk_tab-stichpr
          i_formelmk                 LIKE bi_plmk_tab-formelmk
          i_plmk_wa                  LIKE bi_plmk_tab
        CHANGING
           p_processed               LIKE c_processed .


  DATA: l_152_data_input               LIKE const_char-all.

* set ok-code for screen 152
  IF i_char_is_referenced_flag NE const-flg_yes.
*   master characteristic is not referenced
    l_152_data_input = const_char-all .
  ELSE.
*   referenced master characteristic
    l_152_data_input = const_char-no_data__.
  ENDIF.


* popup: information fields
  PERFORM fill_saplqpaa_1511 USING
              i_plmk_wa
              ok-qm_enter____
              i_char_is_referenced_flag.

*-- popup:   quantitative data
  IF   i_quantitat = const-flg_yes
    OR i_quantitat = 'x'.
*   control indicator 'quantitative characteristic' is given


*   popup: quantitative data
    PERFORM fill_saplqpaa_0152 USING
           i_plmk_wa
           ok-qm_enter____
           l_152_data_input .
    p_processed-scr_152 = const-flg_yes.


*   popup: tolerance change
    PERFORM fill_saplqpaa_1521 USING
               i_plmk_wa
               ok-qm_enter____
               i_char_is_referenced_flag.
    p_processed-scr_1521 = const-flg_yes.


    IF i_formelmk EQ 'X'
*     control indicator 'formula characteristic' is given
      or i_formelmk eq '1'.            "note 1397846
*     control indicator 'input processing' is given

*     popup: formula characteristic
      PERFORM fill_saplqpaa_1522 USING
             i_plmk_wa
             ok-qm_enter____ .
      p_processed-scr_1522 = const-flg_yes.

    ENDIF.                             "i_formelmk


  ENDIF.                               "quantitative


* popup: qualitative data
  PERFORM fill_saplqpaa_0153 USING
           i_plmk_wa
           ok-qm_enter____
           i_char_is_referenced_flag.
  p_processed-scr_153 = const-flg_yes.


  IF i_stichpr = const-flg_yes
    or ( plko_tab-qdynhead = '3'
      and not plko_tab-qdynregel is initial ).
*   characteristic control indicator sampling procedure is set

*   popup:  dynamic modification data
    PERFORM fill_saplqpaa_0154 USING
              i_plmk_wa
              ok-qm_enter____
              const_char-first_data .
    p_processed-scr_154 = const-flg_yes.

  ENDIF.                               "i_stichpr = const-flg_yes.


ENDFORM.                               " FILL_SAPLQPAA_CHA_POPUPS
*&---------------------------------------------------------------------*
*&      Form  RELEASE_CHECK
*&---------------------------------------------------------------------*
*       checks if release >= 4.0C (characteristic screen numb. changed)
*----------------------------------------------------------------------*
*      <-- E_OLD_RELEASE  flag if < 4.0C
*----------------------------------------------------------------------*
FORM release_check CHANGING e_old_release LIKE release_lower_40c.

  STATICS: l_form_has_been_processed_flag(1)    TYPE c.

  IF l_form_has_been_processed_flag IS INITIAL.

    IF   sy-saprl(1) = '3'
      OR sy-saprl(3) = '40A'
      OR sy-saprl(3) = '40B'.
*     release < 4.0C
      e_old_release = 'X'.
    ELSE.
*     release >= 4.0C
      CLEAR e_old_release.
    ENDIF.
    l_form_has_been_processed_flag = 'X'.

  ELSE.  "l_form_has_been_processed_flag is initial.
*   release info is known
  ENDIF. "l_form_has_been_processed_flag is initial.

ENDFORM.                               " RELEASE_CHECK



*&---------------------------------------------------------------------*
*&      Form  POPUP_1502_DECIDE
*&---------------------------------------------------------------------*
*       decides if 1502 must be worked (-> if MIC has at least one IM)
*----------------------------------------------------------------------*
*      <-- E_FLG_POPUP flag if popup
*        " note 334956
*----------------------------------------------------------------------*

FORM popup_1502_decide USING
           pi_plmk_wa                    LIKE bipmk
           e_flg_popup                   TYPE c.

  CLEAR e_flg_popup.                                        "n350107

* check if method is intended by file
  IF NOT pi_plmk_wa-pmethode IS INITIAL
     AND pi_plmk_wa-pmethode(1) NE const_nodata.            " 372013
    e_flg_popup = const-flg_yes.
  ELSE.
*   check if master inspection characteristic will process method
  ENDIF.

ENDFORM.                    "POPUP_1502_DECIDE
