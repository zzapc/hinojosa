***********************************************************************
* TIPO : LISTADO
* TITULO : Actualización tabla estados pedidos tras acciones en órdenes
* DESCRIPCION : Se buscan movimientos/notificaciones en órdenes desde
*               última ejecución y se lanza actualización de pedidos
*               asociadas a ordenes
*
* AUTOR: Andrés Picazo                                FECHA: 27/01/2025
* ANALISTA: ??
*
***********************************************************************
REPORT zrpp0089.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: mseg, afru, caufv.

DATA: v_fini LIKE sy-datum,
      v_hini LIKE sy-uzeit,
      v_ffin LIKE sy-datum,
      v_hfin LIKE sy-uzeit.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_alv FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check   TYPE xfeld,
             lights  TYPE zico_estado_mensaje,
             mblnr   TYPE mseg-mblnr,
             mjahr   TYPE mseg-mjahr,
             zeile   TYPE mseg-zeile,
             rueck   TYPE afru-rueck,
             rmzhl   TYPE afru-rmzhl,
             cpudt   TYPE mkpf-cpudt,
             cputm   TYPE mkpf-cputm,
             bwart   TYPE mseg-bwart,
             tcode   TYPE cdhdr-tcode,
             tipo    TYPE string,
             aufnr   TYPE aufnr,
             vbeln   TYPE vbeln,
             message TYPE bapi_msg,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado TYPE tt_listado,
          o_alv     TYPE REF TO lcl_alv,
          o_sd      TYPE REF TO zhcl_sd_core.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA o_prog TYPE REF TO zcl_report.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
PARAMETERS: p_fini LIKE sy-datum, " Fecha inicio
            p_hini LIKE sy-uzeit, " Hora inicio
            p_ffin LIKE sy-datum,
            p_hfin LIKE sy-uzeit,
            p_seg  TYPE i DEFAULT 300.

SELECTION-SCREEN SKIP.
SELECT-OPTIONS: s_aufnr FOR mseg-aufnr,
                s_auart FOR caufv-auart.
SELECTION-SCREEN SKIP.

PARAMETERS: p_ejec  AS CHECKBOX.

SELECTION-SCREEN SKIP 1.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b01.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    " TODO: variable is assigned but only used in commented-out code (ABAP cleaner)
    DATA l_list TYPE o_prog->t_listado.

    l_list = list.
    CASE column.
*      WHEN 'BUKRS'.
*        MESSAGE l_list-bukrs TYPE 'I'.
      WHEN OTHERS. message = 'No implementado'.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    check_ucomm_sel = 'F01'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'F01'.
        " TODO: variable is assigned but never used (ABAP cleaner)
        LOOP AT o_prog->i_listado ASSIGNING FIELD-SYMBOL(<listado>) WHERE check = 'X'.
* TO DO!
        ENDLOOP.
        IF sy-subrc = 0.
          refresh( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).

    IF p_ejec IS INITIAL.
      listado( ).
    ENDIF.

  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    DATA i_list TYPE tt_listado.

    sgpi_texto( 'Seleccionando datos'(sda) ).


    IF     NOT (     p_fini IS INITIAL AND p_ffin IS INITIAL )
       AND NOT ( NOT p_hini IS INITIAL AND p_hfin IS INITIAL ).
      v_fini = p_fini.
      v_hini = p_hini.
      v_ffin = p_ffin.
      v_hfin = p_hfin.
    ELSE.
      fecha = sy-datum - 1.
      v_ffin = sy-datum.
      v_hfin = sy-uzeit.
      SELECT SINGLE erdat erzet FROM ztemp
        INTO (v_fini, v_hini)
       WHERE clave = 'ZRPP0089'.
      IF sy-subrc NE 0.
        v_hini = sy-uzeit - p_seg.
        IF sy-uzeit > v_hini.
          v_fini = sy-datum.
        ELSE.
          v_fini = fecha.
        ENDIF.
      ENDIF.
* Como mucho siempre la fecha anterior, por si acaso.
      IF v_fini < fecha.
        v_fini = fecha.
      ENDIF.
    ENDIF.

    SELECT mblnr mjahr zeile bwart cpudt_mkpf AS cpudt cputm_mkpf AS cputm mseg~aufnr FROM mseg JOIN caufv ON mseg~aufnr = caufv~aufnr
      INTO CORRESPONDING FIELDS OF TABLE i_list
     WHERE mseg~aufnr NE ''
       AND ( cpudt_mkpf > v_fini OR ( cpudt_mkpf = v_fini AND cputm_mkpf > v_hini ) )
       AND ( cpudt_mkpf < v_ffin OR ( cpudt_mkpf = v_ffin AND cputm_mkpf < v_hfin ) )
       AND mseg~aufnr IN s_aufnr
       AND auart IN s_auart.

    SELECT afru~rueck afru~rmzhl ersda AS cpudt erzet AS cputm afru~aufnr FROM afru JOIN caufv ON afru~aufnr = caufv~aufnr
      APPENDING CORRESPONDING FIELDS OF TABLE i_list
     WHERE afru~aufnr NE ''
       AND ( ersda > v_fini OR ( ersda = v_fini AND erzet > v_hini ) )
       AND ( ersda < v_ffin OR ( ersda = v_ffin AND erzet < v_hfin ) )
       AND afru~aufnr IN s_aufnr
       AND auart IN s_auart.

    SELECT objectid AS aufnr udate AS cpudt utime AS cputm tcode FROM cdhdr JOIN caufv ON cdhdr~objectid = caufv~aufnr
      APPENDING CORRESPONDING FIELDS OF TABLE i_list
     WHERE objectclas = 'ZORDER'
       AND ( udate > v_fini OR ( udate = v_fini AND utime > v_hini ) )
       AND ( udate < v_ffin OR ( udate = v_ffin AND utime < v_hfin ) )
       AND objectid IN s_aufnr
       AND auart IN s_auart
      GROUP BY objectid udate utime tcode.

    SELECT caufv~aufnr udate AS cpudt utime AS cputm cdtcode AS tcode FROM jcds JOIN caufv ON jcds~objnr = caufv~objnr
      APPENDING CORRESPONDING FIELDS OF TABLE i_list
     WHERE ( udate > v_fini OR ( udate = v_fini AND utime > v_hini ) )
       AND ( udate < v_ffin OR ( udate = v_ffin AND utime < v_hfin ) )
       AND aufnr IN s_aufnr
       AND auart IN s_auart
      GROUP BY aufnr udate utime cdtcode.

    SORT i_list.
    DELETE ADJACENT DUPLICATES FROM i_list COMPARING ALL FIELDS.


    IF i_list IS INITIAL.
      LEAVE PROGRAM.
    ENDIF.

    o_sd = NEW #( ).


    DATA: r_aufnr TYPE RANGE OF aufnr,
          i_aufnr TYPE TABLE OF t_listado.

    LOOP AT i_list ASSIGNING FIELD-SYMBOL(<listado>).
      IF NOT line_exists( i_aufnr[ aufnr = <listado>-aufnr ] ).
        APPEND VALUE #( aufnr = <listado>-aufnr ) TO i_aufnr.
      ENDIF.
    ENDLOOP.

    SORT r_aufnr.


    DATA string TYPE string.
    LOOP AT i_aufnr ASSIGNING FIELD-SYMBOL(<aufnr>).
      DATA(r_vbeln) = o_sd->get_pedidos_desde_ordenes( r_aufnr = VALUE #( ( option = 'EQ' sign = 'I' low = <aufnr>-aufnr ) ) ).
      IF NOT r_vbeln IS INITIAL.
        LOOP AT r_vbeln ASSIGNING FIELD-SYMBOL(<vbeln>) WHERE low NE '?' AND low NE ''.
          string =  |Orden { <aufnr>-aufnr ALPHA = OUT } tiene asociado pedido { <vbeln>-low ALPHA = OUT }|.
          MESSAGE string TYPE 'S'.
          WRITE: / string.
        ENDLOOP.
      ELSE.
        string = |Orden { <aufnr>-aufnr ALPHA = OUT } no tiene pedido asociado|.
        MESSAGE string TYPE 'S'.
        WRITE: / string.
      ENDIF.

      LOOP AT i_list INTO DATA(l_list) WHERE aufnr = <aufnr>-aufnr.
        LOOP AT r_vbeln ASSIGNING <vbeln> WHERE low NE '?' AND low NE ''.
          l_list-vbeln = <vbeln>-low.
          APPEND l_list TO i_listado.
        ENDLOOP.
        IF sy-subrc NE 0.
          APPEND l_list TO i_listado.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    SORT i_listado.

    IF p_ejec = 'X'.
      MESSAGE |Selección desde { v_fini DATE = USER } { v_hini TIME = USER } hasta { v_ffin DATE = USER } { v_hfin TIME = USER }| TYPE 'S'.
      DATA(o_pp) = NEW zhcl_pp_core( ).
      LOOP AT i_aufnr ASSIGNING <aufnr>.
        SELECT SINGLE situacion FROM zaufk
          INTO @DATA(l_situacion)
         WHERE aufnr = @<aufnr>-aufnr.
        o_pp->get_situacion_of( aufnr = <aufnr>-aufnr
                                tcode = 'MOV_ORD' ).
        COMMIT WORK AND WAIT.
        SELECT SINGLE situacion FROM zaufk
          INTO @DATA(l_situacion_new)
         WHERE aufnr = @<aufnr>-aufnr.
        IF l_situacion NE l_situacion_new.
          string = |Orden { <aufnr>-aufnr ALPHA = OUT } se cambia de situación { l_situacion } a { l_situacion_new }|.
        ELSE.
          string = |Orden { <aufnr>-aufnr ALPHA = OUT } tiene { l_situacion } sin cambios|.
        ENDIF.
        MESSAGE string TYPE 'S'.
        WRITE: / string.
      ENDLOOP.
      CLEAR r_vbeln.
      LOOP AT i_listado ASSIGNING <listado> WHERE NOT vbeln IS INITIAL.
        IF NOT line_exists( r_vbeln[ low = <listado>-vbeln ] ).
          MESSAGE |Se lanzará actualización de pedido { <listado>-vbeln ALPHA = OUT }| TYPE 'S'.
          WRITE: / |Se lanzará actualización de pedido { <listado>-vbeln ALPHA = OUT }|.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = <listado>-vbeln ) TO r_vbeln.
        ENDIF.
      ENDLOOP.

* Procesamos posible borrados de entregas
      SELECT DISTINCT valor1 FROM ztemp
         INTO TABLE @DATA(i_pedidos_ent_borradas)
       WHERE clave = 'LIKP_DEL'
         AND valor2 = ''.
      LOOP AT i_pedidos_ent_borradas ASSIGNING FIELD-SYMBOL(<pb>).
        IF NOT line_exists( r_vbeln[ low = <pb>-valor1 ] ).
          string = |Se lanzará actualización de pedido { <pb>-valor1 ALPHA = OUT } por borrado de entrega previa|.
          MESSAGE string TYPE 'S'.
          WRITE: / string.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = <pb>-valor1  ) TO r_vbeln.
        ENDIF.
        UPDATE ztemp
           SET valor2 = 'ZRPP0089'
         WHERE clave = 'LIKP_DEL'
           AND valor1 = <pb>-valor1
           AND valor2 = ''.
      ENDLOOP.

      IF NOT r_vbeln IS INITIAL.
        o_sd->get_repartos( r_vbeln     = r_vbeln
                            historico = 'X'
                            add_contratos_sin_pedido = ''
                            datos_medidas = ''
                            datos_interlocutores = ''
                            datos_stocks = 'X'
                            add_pedidos_traslado = 'X'
                            origen = 'MOV_ORD' ).

        DATA ztemp TYPE ztemp.
        ztemp-clave = 'ZRPP0089'.
        ztemp-erdat = v_ffin.
        ztemp-erzet = v_hfin.
        ztemp-permanente = 'X'.
        MODIFY ztemp FROM ztemp.
      ENDIF.
    ENDIF.


* Borramos entregas de tablas obsoletas
    DATA l_fecha TYPE dats.
    l_fecha = sy-datum - 30.
    DELETE FROM ztemp
     WHERE erdat < l_fecha
        AND permanente = 'X'.

    DELETE FROM zvbeph
     WHERE aedat < l_fecha.




  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

*    o_alv->add_button( button = 'F01' text = 'Ejecutar'(eje)  icon = icon_execute_object ucomm = 'EJEC' ).
*    o_alv->add_button( button = 'F01' text = 'Excel'  icon = icon_xls UCOMM = 'EXCEL' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page(
*    i_param = VALUE #( ( tipo = 'R' param = 'S_CREDAT' texto = 'F.Creación IDOC' tabla = '' campo = '' )
                          ).

*    o_alv->set_field_hotspot( campo = 'EBELN' auto = 'X' ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK' ).

*    o_alv->set_orden( '' ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  guardar_logz = '' ).

  IF zcl_usuario=>es_usuario_sistemas( ).
    PERFORM add_button IN PROGRAM zap_status
            USING 'M01' 'Parámetros' '' ''.
  ENDIF.

  PERFORM add_button IN PROGRAM zap_status USING 'M02' 'Log'(log) '' ''.

  o_prog->o_alv = NEW #( status             = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         o_dev              = o_prog ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).



AT SELECTION-SCREEN OUTPUT.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.


AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).

  IF sy-batch = 'X'.
    DATA l_jobname TYPE tbtcm-jobname.
    CALL FUNCTION 'GET_JOB_RUNTIME_INFO'
      IMPORTING
        jobname = l_jobname.
    IF NOT l_jobname IS INITIAL.
      zcl_ap_jobs=>borrar_jobs( fecha = sy-datum jobname = l_jobname solo_finalizados = 'X' solo_sin_spool = 'X' ).
    ENDIF.
  ENDIF.
