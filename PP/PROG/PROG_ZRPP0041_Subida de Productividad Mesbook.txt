*&---------------------------------------------------------------------*
*& Report  ZRPP0041
*&
*&---------------------------------------------------------------------*
*&  Subida de Productividad desde Mesbook.
*&---------------------------------------------------------------------*
REPORT zrpp0041.

INCLUDE zrpp0041_f01.

DATA: lt_fab TYPE STANDARD TABLE OF ztpi0011,
      ls_fab TYPE ztpi0011.

TYPES: BEGIN OF t_equnr,
         	  equnr TYPE equnr,
       END OF t_equnr.

DATA:  it_equnr TYPE STANDARD TABLE OF t_equnr,
       ls_equnr TYPE t_equnr.

DATA: lv_atinn TYPE atinn.

DATA: lt_return_total  TYPE TABLE OF bapiret2,
      wa_order_objects TYPE          bapi_pi_order_objects,
      t_return         TYPE          bapiret2,
      t_header         TYPE TABLE OF bapi_order_header1,
      wa_header        TYPE          bapi_order_header1,
      t_position       TYPE TABLE OF bapi_order_item,
      t_sequence       TYPE TABLE OF bapi_order_sequence,
      t_phase          TYPE TABLE OF bapi_order_phase,
      wa_phase         TYPE          bapi_order_phase,
      t_trigger_point  TYPE TABLE OF bapi_order_trigger_point,
      t_component      TYPE TABLE OF bapi_order_component,
      t_component_aux  TYPE TABLE OF bapi_order_component,
      wa_component     TYPE          bapi_order_component,
      t_prod_rel_tool  TYPE TABLE OF bapi_order_prod_rel_tools,
      lt_actividades   TYPE TABLE OF ztpi0012,
      ls_actividades   TYPE ztpi0012.

DATA: lv_time   TYPE char6,
      lv_data   TYPE sy-datum,
      lv_orden  TYPE aufnr,
      lv_id_tmp TYPE co_msid2,
      lv_objnr  TYPE j_objnr,
      lv_point  TYPE imrc_point.

DATA: lv_fecha_fin TYPE char19.

START-OF-SELECTION.

  REFRESH lt_fab.
  SELECT * INTO TABLE lt_fab
    FROM ztpi0011
    WHERE procesado = ''.

  CLEAR ls_fab.
  LOOP AT lt_fab INTO ls_fab.
    lv_id_tmp = 1.
    REFRESH lt_return_total.

    CLEAR lv_fecha_fin.
    lv_fecha_fin = ls_fab-timestampfin.
**  Separamos la fecha y la hora del timestamp que proporciona mesbook.
    CLEAR: lv_data,lv_time.
    REPLACE ALL OCCURRENCES OF '-' IN lv_fecha_fin WITH ''.
    REPLACE ALL OCCURRENCES OF ':' IN lv_fecha_fin WITH ''.
    CONDENSE lv_fecha_fin.
    SPLIT lv_fecha_fin AT 'T' INTO lv_data lv_time.

    CLEAR lv_orden.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = ls_fab-numeroorden
      IMPORTING
        output = lv_orden.

**  Si numerolinea es = SUBCO01 se cambia el puesto de trabajo de la operación.
    IF ls_fab-numerolinea EQ 'SUBCO01'.

      CLEAR: t_header, t_position, t_sequence, t_phase,
           t_trigger_point, t_component, t_prod_rel_tool.
      REFRESH: t_header, t_position, t_sequence, t_phase,
               t_trigger_point, t_component, t_prod_rel_tool.

**  Indicamos las estructuras a obtener.
      wa_order_objects-header = 'X'.
      wa_order_objects-positions = 'X'.
      wa_order_objects-sequences = ''.
      wa_order_objects-phases = 'X'.
      wa_order_objects-components = 'X'.
      wa_order_objects-prod_rel_tools = ''.
      wa_order_objects-trigger_points = ''.
      wa_order_objects-secondary_resources = ''.

      CALL FUNCTION 'BAPI_PROCORD_GET_DETAIL'
        EXPORTING
          number        = lv_orden
          order_objects = wa_order_objects
        IMPORTING
          return        = t_return
        TABLES
          header        = t_header
          position      = t_position
          sequence      = t_sequence
          phase         = t_phase
          trigger_point = t_trigger_point
          component     = t_component
          prod_rel_tool = t_prod_rel_tool.

      CLEAR wa_phase.
      READ TABLE t_phase INTO wa_phase WITH KEY operation_number = ls_fab-operacion.
      IF wa_phase-resource IS NOT INITIAL.
        ls_fab-numerolinea = wa_phase-resource.
      ENDIF.

    ENDIF.

    CLEAR lt_actividades.
    SELECT * INTO TABLE lt_actividades
      FROM ztpi0012
      WHERE recurso EQ ls_fab-numerolinea.

    CHECK lt_actividades[] IS NOT INITIAL.

    CLEAR ls_actividades.
    READ TABLE lt_actividades INTO ls_actividades INDEX 1.

    PERFORM p_lanzar_mensaje_zc_phcon USING ls_fab
                                            lv_data
                                            lv_id_tmp
                                            lv_orden
                                            lv_time
                                            ls_actividades
                                   CHANGING lt_return_total.

**  Lanzamos un segundo mensaje, si el recurso es EXTRUS01 y tiene una posición 'COEX01'.
    IF ls_fab-numerolinea EQ 'EXTRUS01'.

      CLEAR: t_header, t_position, t_sequence, t_phase,
           t_trigger_point, t_component, t_prod_rel_tool.
      REFRESH: t_header, t_position, t_sequence, t_phase,
               t_trigger_point, t_component, t_prod_rel_tool.

**  Indicamos las estructuras a obtener.
      wa_order_objects-header = 'X'.
      wa_order_objects-positions = 'X'.
      wa_order_objects-sequences = ''.
      wa_order_objects-phases = 'X'.
      wa_order_objects-components = 'X'.
      wa_order_objects-prod_rel_tools = ''.
      wa_order_objects-trigger_points = ''.
      wa_order_objects-secondary_resources = ''.

      CALL FUNCTION 'BAPI_PROCORD_GET_DETAIL'
        EXPORTING
          number        = lv_orden
          order_objects = wa_order_objects
        IMPORTING
          return        = t_return
        TABLES
          header        = t_header
          position      = t_position
          sequence      = t_sequence
          phase         = t_phase
          trigger_point = t_trigger_point
          component     = t_component
          prod_rel_tool = t_prod_rel_tool.

      DELETE t_phase WHERE superior_operation = ''.

      CLEAR wa_phase.
      READ TABLE t_phase INTO wa_phase WITH KEY resource = 'COEX01'.

      IF sy-subrc = 0.
**  Cambiamos recurso opereacion.
        ls_fab-operacion = wa_phase-operation_number.
        ls_fab-numerolinea = wa_phase-resource.

**  Lanzamos el mensaje de proceso ZC_PHCON pero sin la actividad3.
        PERFORM p_lanzar_mensaje_zc_phcon_2 USING ls_fab
                                            lv_data
                                            lv_id_tmp
                                            lv_orden
                                            lv_time
                                            ls_actividades
                                   CHANGING lt_return_total.

      ENDIF.
    ENDIF.

**  Para la subida de productividad ademas un mensaje ZC_PMMD.
**  Recuperamos los utillajes
    REFRESH it_equnr.
    SELECT equnr INTO TABLE it_equnr
      FROM ztpp0013
      WHERE aufnr EQ lv_orden AND werks EQ '4000' AND vornr EQ ls_fab-operacion.

**  Recuperación del punto de medida para cada utillaje.
    IF it_equnr[] IS NOT INITIAL.
      CLEAR ls_equnr.
      LOOP AT it_equnr INTO ls_equnr.

        CLEAR lv_objnr.
        SELECT SINGLE objnr INTO lv_objnr
          FROM equi
          WHERE equnr EQ ls_equnr-equnr.

        IF lv_objnr IS NOT INITIAL.

          CLEAR lv_atinn.
          CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
            EXPORTING
              input  = 'ZPM_USO'
            IMPORTING
              output = lv_atinn.

          CLEAR lv_point.
          SELECT MAX( point ) INTO lv_point
            FROM imptt
            WHERE mpobj EQ lv_objnr AND atinn EQ lv_atinn AND mptyp EQ 'A' AND inact EQ '' AND lvorm EQ '' .

          IF lv_point IS NOT INITIAL.
**  Lanzamos el mensaje de proceso zc_pmmd por cada utillaje apuntando a su contador.
            PERFORM p_lanzar_mensaje_zc_pmmd USING ls_fab
                                                   lv_data
                                                   lv_id_tmp
                                                   lv_orden
                                                   lv_time
                                                   lv_point
                                          CHANGING lt_return_total.

          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

    READ TABLE lt_return_total
        WITH KEY type = 'E' TRANSPORTING NO FIELDS.
    IF sy-subrc <> 0.
      ls_fab-procesado = 'X'.
      MODIFY ztpi0011 FROM ls_fab.
*      SUBMIT rcocb004 WITH plant = '4000' AND RETURN.

      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ENDIF.

  ENDLOOP.
**  Hacemos el commit para la modificacion de la tabla.
*    COMMIT WORK AND WAIT.
