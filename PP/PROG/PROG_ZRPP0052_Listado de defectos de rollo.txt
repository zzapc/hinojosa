*&---------------------------------------------------------------------*
*& Report  ZRPP0052
*&
*&---------------------------------------------------------------------*
*&
*& Listado de defectos Rollo
*&---------------------------------------------------------------------*
REPORT zrpp0052.

INCLUDE zrpp0052_top.
INCLUDE zrpp0052_class.
INCLUDE zrpp0052_f01.
INCLUDE zrpp0052_status.
INCLUDE zrpp0052_user_command.
* Obtención del centro asociado al Usuario
INITIALIZATION.

  SELECT SINGLE parva FROM usr05
    INTO p_werks
    WHERE bname = sy-uname AND
          parid = 'WRK'.


AT SELECTION-SCREEN.
  IF p_charg is INITIAL and p_erdat is INITIAL.
*    message |Obligatorio informar lote| TYPE 'I' DISPLAY LIKE 'E'.
    message |Obligatorio informar lote o fecha de producción| TYPE 'E'.
*    exit.
  ENDIF.


AT SELECTION-SCREEN OUTPUT.

  LOOP AT SCREEN.
    IF screen-name = 'P_WERKS'.
      screen-input = 0.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

* Seleccion de datos
START-OF-SELECTION.

  PERFORM tratar_fechas.

  PERFORM get_data_by_sql.


  LOOP AT gt_defectos INTO DATA(ls_defectos).

    PERFORM validar_hora USING        ls_defectos-werks
*                                      ls_defectos-lgort
                                      ls_defectos-matnr
                                      ls_defectos-charg
                            CHANGING  l_hora
                                      lw_hora_ko.

    CHECK lw_hora_ko = ' '.


    APPEND INITIAL LINE TO gt_datos_alv ASSIGNING FIELD-SYMBOL(<datos_alv>).

    MOVE-CORRESPONDING ls_defectos TO <datos_alv>.

    PERFORM get_pulper_descrip USING ls_defectos-defecto1
                            CHANGING <datos_alv>-defecto1.

    PERFORM get_pulper_descrip USING ls_defectos-defecto2
                            CHANGING <datos_alv>-defecto2.

    PERFORM get_pulper_descrip USING ls_defectos-defecto3
                            CHANGING <datos_alv>-defecto3.

    CALL METHOD zcl_utils_hpap_pp=>obtener_lista_defectos
      IMPORTING
        ot_lista_defectos = DATA(lt_lista_defectos).

* Cálculo de motivos de defecto.
    TRY.
        <datos_alv>-defecto1_lt = lt_lista_defectos[ value_char = ls_defectos-defecto1_lt ]-description.
      CATCH cx_root .
    ENDTRY.

    TRY.
        <datos_alv>-defecto2_lt = lt_lista_defectos[ value_char = ls_defectos-defecto2_lt ]-description.
      CATCH cx_root .
    ENDTRY.

    TRY.
        <datos_alv>-defecto3_lt = lt_lista_defectos[ value_char = ls_defectos-defecto3_lt ]-description.
      CATCH cx_root .
    ENDTRY.

    TRY.
        <datos_alv>-defecto1_c = lt_lista_defectos[ value_char = ls_defectos-defecto1_c ]-description.
      CATCH cx_root .
    ENDTRY.

    TRY.
        <datos_alv>-defecto2_c = lt_lista_defectos[ value_char = ls_defectos-defecto2_c ]-description.
      CATCH cx_root .
    ENDTRY.

    TRY.
        <datos_alv>-defecto3_c = lt_lista_defectos[ value_char = ls_defectos-defecto3_c ]-description.
      CATCH cx_root .
    ENDTRY.

    TRY.
        <datos_alv>-defecto1_lc = lt_lista_defectos[ value_char = ls_defectos-defecto1_lc ]-description.
      CATCH cx_root .
    ENDTRY.

    TRY.
        <datos_alv>-defecto2_lc = lt_lista_defectos[ value_char = ls_defectos-defecto2_lc ]-description.
      CATCH cx_root .
    ENDTRY.

    TRY.
        <datos_alv>-defecto3_lc = lt_lista_defectos[ value_char = ls_defectos-defecto3_lc ]-description.
      CATCH cx_root .
    ENDTRY.

* Insertar comentarios POPE
    CLEAR lt_lines[].
    SELECT tdline
      APPENDING TABLE @lt_lines
      FROM ztpp0031
      WHERE aufnr   = @<datos_alv>-aufnr AND
            matnr   = @<datos_alv>-matnr AND
            charg   = @<datos_alv>-charg AND
            tp_ubic = ' '.
    IF sy-subrc = 0.

      LOOP AT lt_lines INTO DATA(ls_line).
        l_string = ls_line.
        <datos_alv>-observaciones = |{ <datos_alv>-observaciones } { l_string }|.
      ENDLOOP.

    ENDIF.

* Insertar comentarios Bobina
*    CLEAR lt_lines[].
*    SELECT tdline
*      APPENDING TABLE @lt_lines
*      FROM ztpp0031
*      WHERE aufnr   = @<datos_alv>-aufnr AND
*            matnr   = @<datos_alv>-matnr AND
*            charg   = @<datos_alv>-charg AND
*            tp_ubic = 'B'.
*    IF sy-subrc = 0.
*      CLEAR ls_line.
*      LOOP AT lt_lines INTO ls_line.
*        l_string = ls_line.
*        <datos_alv>-observac_bob = |{ <datos_alv>-observac_bob } { l_string }|.
*      ENDLOOP.
*
*    ENDIF.

  ENDLOOP.

* Mostrar ALV
END-OF-SELECTION.

  CALL SCREEN 100.

*  alv->display( ).
