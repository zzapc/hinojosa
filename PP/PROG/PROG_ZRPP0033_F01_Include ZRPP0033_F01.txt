*&---------------------------------------------------------------------*
*&  Include           ZRPP0033_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBTENER_INFO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_data .

  DATA: t_pedido      TYPE         tty_pedido,
        wa_pedido     TYPE LINE OF tty_pedido,
        lv_matnr      TYPE         matnr,
        lv_index      TYPE sy-tabix,
        lv_orden_zpmp TYPE plnum,
        lv_orden_zplp TYPE plnum.

  DATA: lt_obsoletos_zpmp TYPE zstpp0033_alv,
        lt_obsoletos_zplp TYPE zstpp0033_alv,
        wa_obsoletos      TYPE LINE OF zstpp0033_alv,
        lv_cant           TYPE labst.

* obtenemos los pedidos que cumplen los datos introducidos en la pantalla
* de selección y con posiciones no rechazadas y no bloqueadas
  PERFORM obtener_pedidos_zpmp CHANGING t_pedido.

  PERFORM fechas_ped_traslado.
  PERFORM obtener_ped_traslados_zpmp CHANGING t_pedido.

* pasamos los filtros correspondientes para quedarnos con los pedidos que nos interesan.
  PERFORM filtros_pedidos  CHANGING t_pedido.

* obtenemos los semiterminados de cada posición de pedido
  PERFORM obtener_semiterminado USING t_pedido
                                CHANGING gt_datos_pedidos.

* obtenemos los obsoletos y creamos las órdnees previsionales de aquellos
* zpmp y zplp que no tengan obsoletos.
  LOOP AT gt_datos_pedidos INTO wa_datos_pedidos.

    lv_index = sy-tabix.

    CLEAR: lt_obsoletos_zpmp, lt_obsoletos_zplp.
    REFRESH: lt_obsoletos_zpmp, lt_obsoletos_zplp.

    IF wa_datos_pedidos-zpmp IS NOT INITIAL.
      PERFORM obtener_obsoletos USING wa_datos_pedidos-zpmp
                                      wa_datos_pedidos-werks
                                      ''
                                CHANGING lt_obsoletos_zpmp.

      IF lt_obsoletos_zpmp[] IS NOT INITIAL.
        wa_datos_pedidos-obsoletos_zpmp = 'X'.
      ENDIF.
    ENDIF.

    IF wa_datos_pedidos-zplp IS NOT INITIAL.
      PERFORM obtener_obsoletos USING wa_datos_pedidos-zplp
                                      wa_datos_pedidos-werks
                                      ''
                                  CHANGING lt_obsoletos_zplp.

      IF lt_obsoletos_zplp[] IS NOT INITIAL.
        wa_datos_pedidos-obsoletos_zplp = 'X'.
      ENDIF.
    ENDIF.

    IF lt_obsoletos_zplp[] IS INITIAL AND lt_obsoletos_zpmp IS INITIAL.

    ELSE.
      wa_datos_pedidos-pte_decision = 'X'.
    ENDIF.

    " ins - cvivo - 60914
    IF wa_datos_pedidos-orden_zplp IS NOT INITIAL.
      SELECT SINGLE mkal~verid mkal~text1 FROM mkal
        INNER JOIN afpo
        ON afpo~verid EQ mkal~verid
        AND afpo~matnr EQ mkal~matnr
        INTO (wa_datos_pedidos-verid, wa_datos_pedidos-text1 )
        WHERE afpo~aufnr EQ wa_datos_pedidos-orden_zplp.
    ENDIF.


    MODIFY gt_datos_pedidos FROM wa_datos_pedidos INDEX lv_index.
  ENDLOOP.

ENDFORM.                    " OBTENER_INFO
*&---------------------------------------------------------------------*
*&      Form  FIELDCAT_100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_FCAT  text
*----------------------------------------------------------------------*
FORM fieldcat_100  CHANGING lt_fcat TYPE lvc_t_fcat.

  DATA: ls_fcat TYPE lvc_s_fcat.

  CLEAR: lt_fcat.
  REFRESH: lt_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZSRPP0033'
*     i_client_never_display = 'X'
*     i_bypassing_buffer     =
    CHANGING
      ct_fieldcat      = lt_fcat
    EXCEPTIONS
      OTHERS           = 3.

  IF sy-subrc <> 0.

  ELSE.
    LOOP AT lt_fcat INTO ls_fcat.
      CASE ls_fcat-fieldname.
        WHEN 'VBELN'.
          ls_fcat-hotspot = 'X'.

        WHEN 'zpmp'.
          ls_fcat-coltext = text-007.
          ls_fcat-scrtext_l = text-007.
          ls_fcat-scrtext_m = text-007.
          ls_fcat-scrtext_s = text-007.

        WHEN 'WMENG'.
          ls_fcat-coltext = text-004.
          ls_fcat-scrtext_l = text-004.
          ls_fcat-scrtext_m = text-004.
          ls_fcat-scrtext_s = text-004.
*          ls_fcat-no_out = 'X'.

        WHEN 'BMENG'.
*          ls_fcat-no_out = 'X'.

        WHEN 'EDATU'.
          ls_fcat-no_out = 'X'.

        WHEN 'WERKS'.
          ls_fcat-no_out = 'X'.

        WHEN 'LGORT'.
          ls_fcat-no_out = 'X'.

        WHEN 'ZPLP'.
*          ls_fcat-no_out = 'X'.
          ls_fcat-coltext = text-005.
          ls_fcat-scrtext_l = text-005.
          ls_fcat-scrtext_m = text-005.
          ls_fcat-scrtext_s = text-005.

        WHEN 'ZPMP2'.
          ls_fcat-no_out = 'X'.

        WHEN 'CANT_ZPLP'.
*          ls_fcat-no_out = 'X'.
          ls_fcat-coltext = text-006.
          ls_fcat-scrtext_l = text-006.
          ls_fcat-scrtext_m = text-006.
          ls_fcat-scrtext_s = text-006.

        WHEN 'CANT_ZPMP2'.
          ls_fcat-no_out = 'X'.

        WHEN 'TIPO'.
          ls_fcat-no_out = 'X'.

        WHEN 'ORDEN_ZPMP'.
          ls_fcat-coltext = text-008.
          ls_fcat-scrtext_l = text-008.
          ls_fcat-scrtext_m = text-008.
          ls_fcat-scrtext_s = text-008.
          ls_fcat-hotspot = 'X'.

        WHEN 'ORDEN_ZPLP'.
          ls_fcat-coltext = text-009.
          ls_fcat-scrtext_l = text-009.
          ls_fcat-scrtext_m = text-009.
          ls_fcat-scrtext_s = text-009.
          ls_fcat-hotspot = 'X'.

        WHEN 'OBSOLETOS_ZPMP'.
          ls_fcat-no_out = 'X'.

        WHEN 'OBSOLETOS_ZPLP'.
          ls_fcat-no_out = 'X'.

        WHEN 'RECONVERTIDO'.
          ls_fcat-no_out = 'X'.

      ENDCASE.

      MODIFY lt_fcat FROM ls_fcat.
    ENDLOOP.
  ENDIF.


ENDFORM.                    " FIELDCAT_100
*&---------------------------------------------------------------------*
*&      Form  OBTENER_OBSOLETOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_SEMITERMINADOS  text
*----------------------------------------------------------------------*
FORM obtener_datos_detalle_pmp   USING    wa_semiterminado TYPE zsrpp0033
                                 CHANGING gt_obsoletos_zpmp TYPE zstpp0033_alv.

  IF wa_semiterminado-zpmp IS NOT INITIAL.
    PERFORM obtener_obsoletos USING wa_semiterminado-zpmp
                                    wa_semiterminado-werks
                                    'X'
                              CHANGING gt_obsoletos_zpmp.
  ENDIF.

ENDFORM.                    " OBTENER_OBSOLETOS
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DATOS_0100
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_datos_0100 .
  DATA: ls_layout TYPE lvc_s_layo,
        lt_fcat   TYPE lvc_t_fcat,
        ls_fcat   TYPE lvc_s_fcat.

  DATA: lt_tooltips TYPE lvc_t_qinf,
        lt_toolb    TYPE ui_functions,
        ls_toolb    TYPE ui_func.


  IF gr_container_100 IS INITIAL. "IS NOT BOUND.
    CREATE OBJECT gr_container_100
      EXPORTING
        container_name = 'CONTAINER_100'.

    CREATE OBJECT gr_grid_100
      EXPORTING
        i_parent      = gr_container_100
        i_appl_events = 'X'.

    CLEAR: lt_fcat.
    REFRESH: lt_fcat.

    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name = 'ZSRPP0033'
*       i_client_never_display = 'X'
*       i_bypassing_buffer     =
      CHANGING
        ct_fieldcat      = lt_fcat
      EXCEPTIONS
        OTHERS           = 3.

    IF sy-subrc <> 0.

    ENDIF.


*    CLEAR:  lt_toolb.
*    REFRESH:  lt_toolb.
*
*    ls_toolb = cl_gui_alv_grid=>mc_fc_call_crbatch.
*    APPEND ls_toolb TO lt_toolb.
*
*    lt_tooltips = gt_exc.

    PERFORM fieldcat_100 CHANGING lt_fcat.

*   Para los eventos
    CREATE OBJECT g_application_100.

    SET HANDLER g_application_100->handle_toolbar FOR gr_grid_100.
    SET HANDLER g_application_100->handle_user_command FOR gr_grid_100.
    SET HANDLER g_application_100->handle_hotspot_click FOR gr_grid_100.

    ls_layout-cwidth_opt = 'X'.
    ls_layout-sel_mode = 'A'.

    CALL METHOD gr_grid_100->set_table_for_first_display
      EXPORTING
        is_layout            = ls_layout
        it_except_qinfo      = lt_tooltips
        it_toolbar_excluding = lt_toolb
        i_save               = 'A'
      CHANGING
        it_fieldcatalog      = lt_fcat
        it_outtab            = gt_datos_pedidos.

  ELSE.
    CALL METHOD gr_grid_100->refresh_table_display.
  ENDIF.

ENDFORM.                    " MOSTRAR_DATOS_0100

*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS_CABECERA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_SEMITERMINADO  text
*----------------------------------------------------------------------*
FORM obtener_datos_cabecera_200  USING    wa_datos_pedidos TYPE zsrpp0033.

  CLEAR: gv_auart, gv_kunnr, gv_audat, gv_erdat, gv_vkorg, gv_vtweg,
         gv_spart, gv_netwr, gv_waerk, gv_name1, gv_menge, gv_meins,
         gv_name1_componente.



  CASE wa_datos_pedidos-tipo.
    WHEN 'PV'.
      SELECT SINGLE auart kunnr audat erdat vkorg vtweg spart netwr waerk
        FROM vbak
        INTO (gv_auart, gv_kunnr, gv_audat, gv_erdat,
              gv_vkorg, gv_vtweg, gv_spart, gv_netwr, gv_waerk)
        WHERE vbeln = wa_datos_pedidos-vbeln.

      IF gv_kunnr IS NOT INITIAL.
        SELECT SINGLE name1 FROM kna1
          INTO gv_name1
          WHERE kunnr = gv_kunnr.
      ENDIF.

      SELECT SINGLE kwmeng vrkme FROM vbap
        INTO (gv_menge, gv_meins)
        WHERE vbeln = wa_datos_pedidos-vbeln AND
              posnr = wa_datos_pedidos-posnr.

    WHEN 'PT'.
*      gv_erdat_ Fecha de creación del registro
*      gv_aedat- Fecha de documento (fecha de entrada o salida)
      SELECT SINGLE bsart lifnr aedat bedat ekorg waers
        FROM ekko
        INTO (gv_auart, gv_kunnr, gv_erdat, gv_audat,
              gv_vkorg, gv_waerk)
        WHERE ebeln = wa_datos_pedidos-vbeln.


      IF gv_kunnr IS NOT INITIAL.
        SELECT SINGLE name1 FROM lfa1
          INTO gv_name1
          WHERE kunnr = gv_kunnr.
      ENDIF.

      SELECT SINGLE menge meins FROM ekpo
        INTO (gv_menge, gv_meins)
        WHERE ebeln = wa_datos_pedidos-vbeln AND
              ebelp = wa_datos_pedidos-posnr.

  ENDCASE.

  SELECT SINGLE maktx FROM makt
    INTO gv_name1_componente
    WHERE matnr = wa_datos_pedidos-zplp.

ENDFORM.                    " OBTENER_DATOS_CABECERA
*&---------------------------------------------------------------------*
*&      Form  CLEAR_VBLES_0200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM clear_vbles_0200 .

  CLEAR: gv_auart, gv_kunnr, gv_name1, gv_audat, gv_erdat, gv_vkorg,
         gv_vtweg, gv_spart,gv_netwr, gv_waerk, gv_menge, gv_meins,
         gv_vbeln, gv_posnr, gv_cant_lote_pmp, gv_cant_lote_plp.

  CLEAR: gt_obsoletos_pmp, gt_obsoletos_plp, gt_sel_zpmp, gt_sel_zplp. "gt_sel
  REFRESH: gt_obsoletos_pmp, gt_obsoletos_plp, gt_sel_zpmp, gt_sel_zplp. "gt_sel

ENDFORM.                    " CLEAR_VBLES_0200
*&---------------------------------------------------------------------*
*&      Form  FIELDCAT_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_FCAT  text
*----------------------------------------------------------------------*
FORM fieldcat_pmp  CHANGING lt_fcat TYPE lvc_t_fcat.

  DATA: ls_fcat TYPE lvc_s_fcat.

  CLEAR: lt_fcat.
  REFRESH: lt_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZSPP0033_ALV'
*     i_client_never_display = 'X'
*     i_bypassing_buffer     =
    CHANGING
      ct_fieldcat      = lt_fcat
    EXCEPTIONS
      OTHERS           = 3.

  IF sy-subrc <> 0.

  ELSE.
    LOOP AT lt_fcat INTO ls_fcat.
      CASE ls_fcat-fieldname.
        WHEN 'SEL'.
          ls_fcat-edit = 'X'.
          ls_fcat-checkbox = 'X'.
        WHEN 'ZZCOLOR'.
          ls_fcat-no_out = 'X'.
        WHEN 'ZZPLALGNT'.
          ls_fcat-no_out = 'X'.
        WHEN 'ZZPLAANNT'.
          ls_fcat-no_out = 'X'.
        WHEN 'CUMLM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CINSM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CEINM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CSPEM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CRETM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMLA'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMUM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMIN'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMEI'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMSP'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMRE'.
          ls_fcat-no_out = 'X'.
        WHEN 'Z_PEDIDO'.
          ls_fcat-coltext = text-010.
          ls_fcat-scrtext_l = text-010.
          ls_fcat-scrtext_m = text-010.
          ls_fcat-scrtext_s = text-010.
          ls_fcat-no_out = ''.

        WHEN 'Z_POSICION'.
          ls_fcat-coltext = text-011.
          ls_fcat-scrtext_l = text-011.
          ls_fcat-scrtext_m = text-011.
          ls_fcat-scrtext_s = text-011.
          ls_fcat-no_out = ''.

        WHEN 'Z_CLIENTE'.
          ls_fcat-coltext = text-012.
          ls_fcat-scrtext_l = text-012.
          ls_fcat-scrtext_m = text-012.
          ls_fcat-scrtext_s = text-012.
          ls_fcat-no_out = ''.

        WHEN 'LOTE_BLOQUEADO'.
          ls_fcat-coltext = text-013.
          ls_fcat-scrtext_l = text-013.
          ls_fcat-scrtext_m = text-013.
          ls_fcat-scrtext_s = text-013.
          ls_fcat-no_out = ''.

        WHEN 'CONSUMO_COMPLETO'.
          ls_fcat-coltext = text-014.
          ls_fcat-scrtext_l = text-014.
          ls_fcat-scrtext_m = text-014.
          ls_fcat-scrtext_s = text-014.
          ls_fcat-no_out = ''.


*        WHEN 'LOTE_BLOQUEADO'.
*          ls_fcat-coltext = text-015.
*          ls_fcat-scrtext_l = text-015.
*          ls_fcat-scrtext_m = text-015.
*          ls_fcat-scrtext_s = text-015.
*        WHEN 'CONSUMO_COMPLETO'.
*          ls_fcat-coltext = text-017.
*          ls_fcat-scrtext_l = text-017.
*          ls_fcat-scrtext_m = text-017.
*          ls_fcat-scrtext_s = text-017.
      ENDCASE.

      MODIFY lt_fcat FROM ls_fcat.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " FIELDCAT_200
*&---------------------------------------------------------------------*
*&      Form  COLORER_CELDA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0609   text
*      <--P_GS_COLINFO  text
*----------------------------------------------------------------------*
FORM colorer_celda  USING    p_columna  TYPE lvc_fname
                    CHANGING ls_cellcolor TYPE lvc_s_scol.

  CLEAR ls_cellcolor.
  ls_cellcolor-fname = p_columna. "ls_mod_cells-fieldname.
  ls_cellcolor-color-col = '6' .
  ls_cellcolor-color-int = '1'.

ENDFORM.                    " COLORER_CELDA
*&---------------------------------------------------------------------*
*&      Form  LISTA_MATERIALES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_PEDIDO_MATNR  text
*      -->P_P_WERKS  text
*      -->P_WA_PEDIDO_WMENG  text
*      -->P_LV_STLAL  text
*      -->P_LV_STLAN  text
*      <--P_LV_ZPLP  text
*      <--P_LV_CANT_ZPLP  text
*      <--P_LV_ZPMP  text
*      <--P_LV_CANT_ZPMP  text
*----------------------------------------------------------------------*
FORM lista_materiales  USING    p_matnr TYPE matnr
                                p_werks TYPE werks_d
                                p_cant TYPE wmeng
                       CHANGING p_zplp TYPE matnr
                                p_cant_zplp TYPE cs_e_mnglg.

  DATA: lv_stlal TYPE stlal,
        lv_stlan TYPE stlan,
        t_stb    TYPE TABLE OF stpox,
        wa_stb   TYPE          stpox,
        wa_mara  TYPE mara.

  CLEAR: t_stb.
  REFRESH: t_stb.


  SELECT SINGLE stlal stlan FROM mkal
    INTO  (lv_stlal, lv_stlan)
    WHERE matnr = p_matnr AND
          werks = p_werks AND
          verid = 'V001'.

  IF sy-subrc <> 0.
    SELECT SINGLE stlal stlan FROM mkal
       INTO  (lv_stlal, lv_stlan)
       WHERE matnr = p_matnr AND
             werks = p_werks.
  ENDIF.

  CHECK sy-subrc = 0.


  CALL FUNCTION 'CS_BOM_EXPL_MAT_V2'
    EXPORTING
*     FTREL                 = ' '
*     ALEKZ                 = ' '
*     ALTVO                 = ' '
*     AUFSW                 = ' '
      aumgb                 = 'X'
*     AUMNG                 = 0
*     AUSKZ                 = ' '
*     AMIND                 = ' '
*     BAGRP                 = ' '
*     BEIKZ                 = ' '
*     BESSL                 = ' '
*     BGIXO                 = ' '
*     BREMS                 = ' '
      capid                 = 'PI01'
*     CHLST                 = ' '
*     COSPR                 = ' '
*     CUOBJ                 = 000000000000000
*     CUOVS                 = 0
*     CUOLS                 = ' '
      datuv                 = sy-datum
*     DELNL                 = ' '
*     DRLDT                 = ' '
      ehndl                 = 'X'
      emeng                 = p_cant
*     ERSKZ                 = ' '
*     ERSSL                 = ' '
*     FBSTP                 = ' '
*     KNFBA                 = ' '
*     KSBVO                 = ' '
*     MBWLS                 = ' '
*     MKTLS                 = 'X'
*     MDMPS                 = ' '
      mehrs                 = 'X'
*     MKMAT                 = ' '
*     MMAPS                 = ' '
*     SALWW                 = ' '
*     SPLWW                 = ' '
      mmory                 = 'X'
      mtnrv                 = p_matnr
*     NLINK                 = ' '
*     POSTP                 = ' '
*     RNDKZ                 = ' '
*     RVREL                 = ' '
*     SANFR                 = ' '
*     SANIN                 = ' '
*     SANKA                 = ' '
*     SANKO                 = ' '
*     SANVS                 = ' '
*     SCHGT                 = ' '
*     STKKZ                 = ' '
      stlal                 = lv_stlal "Alternativa de la lista de materiales
      stlan                 = lv_stlan "Utilización de la lista de materiales
      stpst                 = 0
      svwvo                 = 'X'
      werks                 = p_werks
*     NORVL                 = ' '
*     MDNOT                 = ' '
*     PANOT                 = ' '
*     QVERW                 = ' '
*     VERID                 = ' '
      vrsvo                 = 'X'
*       IMPORTING
*     TOPMAT                =
*     DSTST                 =
    TABLES
      stb                   = t_stb
*     matcat                = t_lista_mat
    EXCEPTIONS
      alt_not_found         = 1
      call_invalid          = 2
      material_not_found    = 3
      missing_authorization = 4
      no_bom_found          = 5
      no_plant_data         = 6
      no_suitable_bom_found = 7
      conversion_error      = 8
      OTHERS                = 9.
  IF sy-subrc <> 0.
*   Implement suitable error handling here
  ELSE.
    CLEAR: p_zplp, p_cant_zplp.

    LOOP AT t_stb INTO wa_stb.
      IF wa_stb-mtart = 'ZPLP' OR wa_stb-mtart = 'ZPMP'.
        SELECT SINGLE * FROM mara
          INTO wa_mara
          WHERE matnr = wa_stb-idnrk AND
                kzkup = 'X'.

        IF wa_stb-mtart = 'ZPLP'.
          p_zplp = wa_stb-idnrk.
          p_cant_zplp = wa_stb-mnglg.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " LISTA_MATERIALES
*&---------------------------------------------------------------------*
*&      Form  OBTENER_PEDIDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_MATNR  text
*      <--P_T_PEDIDO  text
*----------------------------------------------------------------------*
FORM obtener_pedidos_zpmp  CHANGING t_pedido TYPE  tty_pedido.

  DATA: lt_pedido   TYPE  tty_pedido,
        lt_pedido_1 TYPE  tty_pedido,
        wa_pedido   TYPE LINE OF tty_pedido,
        wa_pedido_1 TYPE LINE OF tty_pedido,
        lv_index    TYPE         sy-tabix,
        lv_borrar   TYPE         xfeld,
        lv_spebe    TYPE         tvls-spebe,
        lv_lifsk    TYPE         lifsk,
        lv_vbtyp    TYPE vbak-vbtyp,
        lv_abgru    TYPE         abgru,
        lt_mara     TYPE STANDARD TABLE OF mara,
        wa_mara     TYPE mara.

  CLEAR: t_pedido, lt_pedido, lt_pedido_1, lt_mara.
  REFRESH: t_pedido, lt_pedido, lt_pedido_1, lt_mara.

  SELECT vbep~vbeln vbep~posnr matnr wmeng bmeng vbep~vrkme lifsp vbep~edatu werks lgort charg FROM vbep
    INNER JOIN vbap ON vbap~vbeln = vbep~vbeln AND
                       vbap~posnr = vbep~posnr
    INTO TABLE lt_pedido
    WHERE pstyv <> 'ZTA2' AND
          mbdat IN so_mbdat AND
          werks IN so_werks AND
          abgru  = '' AND
          vstel = '4000' .

  SELECT * FROM mara
    INTO TABLE lt_mara
    WHERE ( mtart = 'ZPLP' OR mtart = 'ZPMP' ).

  " ini cgijon - 05.09.19 - sat 7000026842 (Ticket 56273)
  IF lt_pedido[] IS NOT INITIAL.
    SELECT * FROM vbuk
      INTO TABLE @DATA(lt_vbuk)
      FOR ALL ENTRIES IN @lt_pedido
      WHERE vbeln = @lt_pedido-vbeln.
  ENDIF.
  " fin cgijon - 05.09.19 - sat 7000026842 (Ticket 56273)

* como estamos recuperando repartos y una posición puede tener varios repartos con diferentes cantidades/fechas,
* borramos las fechas para poder agrupar acumular y luego, insertamos la fecha del primer reparto.
  APPEND LINES OF lt_pedido TO lt_pedido_1.

  LOOP AT lt_pedido_1 INTO wa_pedido.
    CLEAR: wa_pedido-edatu.
    MODIFY lt_pedido_1 FROM wa_pedido INDEX sy-tabix.
  ENDLOOP.

  LOOP AT lt_pedido_1 INTO wa_pedido.
    READ TABLE lt_mara INTO wa_mara WITH KEY matnr = wa_pedido-matnr.
    IF sy-subrc = 0.
      COLLECT wa_pedido INTO t_pedido.
    ENDIF.
  ENDLOOP.

  LOOP AT t_pedido INTO wa_pedido.
    lv_index = sy-tabix.
    READ TABLE lt_pedido INTO wa_pedido_1 WITH KEY vbeln = wa_pedido-vbeln
                                                   posnr = wa_pedido-posnr.
    wa_pedido-edatu = wa_pedido_1-edatu.
    MODIFY t_pedido FROM wa_pedido INDEX lv_index.
  ENDLOOP.

* Pasamos un siguiente filtro para quedarnos con aquellas posiciones no bloqueadas
  LOOP AT t_pedido INTO wa_pedido.
    lv_index = sy-tabix.

    CLEAR: lv_borrar, lv_lifsk, lv_spebe, lv_vbtyp.

    IF wa_pedido-lifsp IS NOT INITIAL.
      lv_lifsk = wa_pedido-lifsp.
      lv_borrar = 'X'.
    ELSE.
      SELECT SINGLE lifsk vbtyp FROM vbak
        INTO (lv_lifsk, lv_vbtyp)
        WHERE vbeln = wa_pedido-vbeln.
      IF lv_lifsk IS NOT INITIAL OR lv_vbtyp <> 'C'.
        lv_borrar = 'X'.
      ENDIF.
    ENDIF.

    IF lv_borrar IS INITIAL.
      SELECT SINGLE abgru FROM vbap
        INTO lv_abgru
        WHERE vbeln = wa_pedido-vbeln AND
              posnr = wa_pedido-posnr.
      IF lv_abgru <> ''.
        lv_borrar = 'X'.
      ENDIF.
    ENDIF.

    IF lv_borrar = ''.
      SELECT SINGLE spebe FROM tvls
        INTO lv_spebe
        WHERE lifsp = lv_lifsk.
      IF lv_spebe = 'X'.
        lv_borrar = 'X'.
      ENDIF.
    ENDIF.

    " ini cgijon - 05.09.19 - sat 7000026842 (Ticket 56273)
    IF lv_borrar = ''.
      READ TABLE lt_vbuk INTO DATA(wa_vbuk) WITH KEY vbeln = wa_pedido-vbeln.
      IF wa_vbuk-spstg = 'C'.
        lv_borrar = 'X'.
      ENDIF.
    ENDIF.
    " fin cgijon - 05.09.19 - sat 7000026842 (Ticket 56273)

    IF lv_borrar = 'X'.
      DELETE t_pedido INDEX lv_index.
    ENDIF.
  ENDLOOP.

* en la tabla interna hemos puesto el campo 'tipo' para distiguir lo que
* es un pedido de venta (tipo = PV) de un pedido de traslado (tipo = PR)
  LOOP AT t_pedido INTO wa_pedido.
    wa_pedido-tipo = 'PV'.
    MODIFY t_pedido FROM wa_pedido.
  ENDLOOP.

ENDFORM.                    " OBTENER_PEDIDOS

*&---------------------------------------------------------------------*
*&      Form  OBTENER_OBSOLETOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_SEMITERMINADO_MATNR_ZPLP  text
*      -->P_WA_SEMITERMINADO_WERKS  text
*      <--P_GT_OBSOLETOS  text
*----------------------------------------------------------------------*
FORM obtener_obsoletos  USING    p_matnr TYPE matnr
                                 p_werks TYPE werks_d
                                 colorear TYPE xfeld
                        CHANGING p_obsoletos TYPE zstpp0033_alv.

  DATA: e_data  TYPE STANDARD TABLE OF zspp0027alv,
        wa_data TYPE                   zspp0027alv.

  DATA: gt_obsoletos TYPE zstpp0033_alv,
        wa_obsoletos TYPE zspp0033_alv.

  DATA: gs_colinfo TYPE LINE OF lvc_t_scol.


  CLEAR: e_data.
  REFRESH: e_data.

  CALL FUNCTION 'ZPP_OBSOLETOS'
    EXPORTING
      i_matnr  = p_matnr
      i_werks  = p_werks
      i_lgort  = '4020'
    IMPORTING
      e_data   = e_data
    EXCEPTIONS
      e_mtart  = 1
      e_nodata = 2
      OTHERS   = 3.
  IF sy-subrc <> 0.
*     Implement suitable error handling here
  ELSE.
    LOOP AT e_data INTO wa_data.
      MOVE-CORRESPONDING wa_data TO wa_obsoletos.
      APPEND wa_obsoletos TO gt_obsoletos.
    ENDLOOP.
  ENDIF.

*   coloreamos la línea cuyo obsoleto sea igual que el material del pedido
  IF colorear = 'X'.
    READ TABLE gt_obsoletos INTO wa_obsoletos WITH KEY matnr = wa_datos_pedidos-zpmp.
    IF sy-subrc = 0.
      PERFORM colorer_celda USING 'MATNR'
                            CHANGING gs_colinfo.
      APPEND gs_colinfo TO wa_obsoletos-color.
      MODIFY gt_obsoletos FROM wa_obsoletos INDEX sy-tabix.
    ENDIF.
  ENDIF.

  p_obsoletos  = gt_obsoletos.

ENDFORM.                    " OBTENER_OBSOLETOS
*&---------------------------------------------------------------------*
*&      Form  FECHAS_PED_TRASLADO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM fechas_ped_traslado .

  DATA: rwa_mbdat LIKE LINE OF rg_mbdat.

  rwa_mbdat-sign = so_mbdat-sign.
  rwa_mbdat-option = so_mbdat-option .
  rwa_mbdat-low = so_mbdat-low - 14.
  rwa_mbdat-high = so_mbdat-high.
  APPEND rwa_mbdat TO  rg_mbdat.

ENDFORM.                    " FECHAS_PED_TRASLADO
*&---------------------------------------------------------------------*
*&      Form  OBTENER_PED_TRANSLADOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_ped_traslados_zpmp CHANGING t_pedido TYPE tty_pedido.

  DATA: t_pedido_traslado  TYPE         tty_pedido_traslado,
        wa_pedido_traslado TYPE LINE OF tty_pedido_traslado,
        wa_pedido          TYPE LINE OF tty_pedido.

  CLEAR: t_pedido_traslado.
  REFRESH: t_pedido_traslado.

*  SELECT ekko~ebeln ekpo~ebelp ekko~bedat matnr ekpo~menge ekpo~meins werks lgort charg FROM ekko
  SELECT ekko~ebeln ekpo~ebelp eket~eindt matnr ekpo~menge ekpo~meins werks lgort charg FROM ekko
      INNER JOIN ekpo ON ekpo~ebeln = ekko~ebeln
      INNER JOIN eket ON eket~ebeln = ekpo~ebeln AND
                         eket~ebelp = ekpo~ebelp
      INTO TABLE t_pedido_traslado
      WHERE bsart = 'ZPT2' AND
            eindt IN rg_mbdat AND
            ( ekpo~mtart = 'ZPLP' OR  ekpo~mtart = 'ZPMP' ) AND
            ekpo~werks IN so_werks AND
            ekpo~loekz = ''." AND
*            wemng = 0.


  LOOP AT t_pedido_traslado INTO wa_pedido_traslado.
    wa_pedido-vbeln = wa_pedido_traslado-ebeln.
    wa_pedido-posnr = wa_pedido_traslado-ebelp.
    wa_pedido-matnr = wa_pedido_traslado-matnr.
    wa_pedido-wmeng  = wa_pedido_traslado-menge.
*    wa_pedido-bmeng type bmeng,
    wa_pedido-vrkme  = wa_pedido_traslado-meins.
*    wa_pedido-lifsp type lifsp,
*    wa_pedido-edatu = wa_pedido_traslado-bedat.
    wa_pedido-edatu = wa_pedido_traslado-eindt.
    wa_pedido-werks  = wa_pedido_traslado-werks.
    wa_pedido-lgort  = wa_pedido_traslado-lgort.
    wa_pedido-charg = wa_pedido_traslado-charg.
    wa_pedido-tipo = 'PT'.
    APPEND wa_pedido TO t_pedido.
  ENDLOOP.


ENDFORM.                    " OBTENER_PED_TRANSLADOS
*&---------------------------------------------------------------------*
*&      Form  FILTROS_PEDIDOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_T_PEDIDO  text
*----------------------------------------------------------------------*
FORM filtros_pedidos  CHANGING t_pedido TYPE         tty_pedido.

  DATA:         wa_pedido TYPE LINE OF tty_pedido,
                lv_index  TYPE sy-tabix,
                lt_aufk   TYPE STANDARD TABLE OF aufk,
                wa_aufk   TYPE aufk,
                lt_mchb   TYPE STANDARD TABLE OF mchb,
                wa_mchb   TYPE mchb.

  DATA: lv_mtart     TYPE mtart,
        lv_classtype TYPE bapi_class_key-classtype,
        lv_classnum  TYPE bapi_class_key-classnum,
        sc           TYPE TABLE OF bapi_selection_criterions,
        wa_sc        TYPE bapi_selection_criterions,
        so           TYPE TABLE OF bapi_selected_objects,
        wa_so        TYPE bapi_selected_objects,
        oc           TYPE TABLE OF bapi_object_values,
        return       TYPE bapireturn1,
*        t_ztpp0017   TYPE TABLE OF ztpp0017,
*        wa_ztpp0017  TYPE ztpp0017,
        lv_matnr     TYPE matnr,
        lv_charg     TYPE charg_d,
        lv_borrar    TYPE xfeld,
        lt_tvarvc    TYPE TABLE OF tvarvc WITH HEADER LINE,
        l_line       LIKE bsvx-sttxt,
        l_status     TYPE char10,
        lt_afpo      TYPE TABLE OF afpo WITH HEADER LINE,
        cantidad     TYPE lfimg.


** nos quedamos con los pedidos que no han sido previamente tratados por el planificador.
*  SELECT * FROM ztpp0017
*    INTO TABLE t_ztpp0017.
*
*  LOOP AT t_pedido INTO wa_pedido.
*    lv_index  = sy-tabix.
*    READ TABLE t_ztpp0017 INTO wa_ztpp0017 WITH KEY vbeln = wa_pedido-vbeln
*                                                    posnr = wa_pedido-posnr.
*    IF sy-subrc = 0.
*      DELETE t_pedido INDEX lv_index .
*    ENDIF.
*  ENDLOOP.


* Pasamos un siguiente filtro para quedarnos con los pedidos que no estén
* en ninguna orden cuya clase de orden sea ZC01 ó ZC02
  CLEAR:  lt_aufk.
  REFRESH:  lt_aufk.

  SELECT * FROM aufk
      INTO TABLE lt_aufk
      FOR ALL ENTRIES IN  t_pedido
      WHERE ( auart = 'ZC01' OR auart = 'ZC02' ) AND
            zzebeln4 = t_pedido-vbeln AND
            zzebelp4 = t_pedido-posnr.

* ini - cvivo - 15.01.2017 Filtrar órdenes por status
  SELECT * FROM tvarvc INTO TABLE lt_tvarvc
    WHERE name EQ 'ZMRP_ORDER_FILTER'.

  IF sy-subrc IS INITIAL AND filt_ord IS NOT INITIAL.
* ini - cvivo - 02.02.2018 - 46303 No discriminar órdenes con cantidad entregada
    SELECT * FROM afpo INTO TABLE lt_afpo " seleccionamos órdenes con cantidad entregada
      FOR ALL ENTRIES IN lt_aufk
        WHERE aufnr EQ lt_aufk-aufnr
          AND wemng GT 0.

    LOOP AT lt_aufk INTO wa_aufk.
      READ TABLE lt_afpo WITH KEY aufnr = wa_aufk-aufnr TRANSPORTING NO FIELDS. " si tiene cantidad entregada, no verificamos status
      CHECK sy-subrc NE 0.
* fin - cvivo - 02.02.2018 - 46303 No discriminar órdenes con cantidad entregada
      CLEAR l_line.

      CALL FUNCTION 'STATUS_TEXT_EDIT'
        EXPORTING
          objnr            = wa_aufk-objnr
          only_active      = 'X'
          spras            = 'S'
        IMPORTING
          line             = l_line
        EXCEPTIONS
          object_not_found = 1
          OTHERS           = 2.

      LOOP AT lt_tvarvc.
        CLEAR l_status.
        CONCATENATE '*' lt_tvarvc-low '*' INTO l_status.
        IF l_line CP l_status.
          DELETE TABLE lt_aufk FROM wa_aufk.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
  ENDIF.
* fin - cvivo - 15.01.2017


  LOOP AT t_pedido INTO wa_pedido.
    lv_index  = sy-tabix.
    CLEAR: wa_aufk.

    READ TABLE lt_aufk INTO wa_aufk  WITH KEY zzebeln4 = wa_pedido-vbeln
                                              zzebelp4 = wa_pedido-posnr.
    IF sy-subrc = 0.
      DELETE t_pedido INDEX lv_index .
* ini 21.02.2018 - cvivo - 46447 Filtrar pedidos con entrega
    ELSEIF filt_ent IS INITIAL.
      SELECT SUM( lfimg ) INTO cantidad
        FROM lips
        WHERE vgbel EQ wa_pedido-vbeln
          AND vgpos EQ wa_pedido-posnr.

      IF cantidad GE wa_pedido-wmeng. " si toda la cantidad ya existe en entrega
        DELETE t_pedido INDEX lv_index . " no lo tengo en cuenta
      ENDIF.
    ENDIF.
* fin 21.02.2018 - cvivo - 46447
  ENDLOOP.


*  LOOP AT t_pedido INTO wa_pedido.
*    lv_index  = sy-tabix.
*    CLEAR: wa_aufk.
*
*    SELECT SINGLE * FROM aufk
*      INTO wa_aufk
*      WHERE ( auart = 'ZC01' OR auart = 'ZC02' ) AND
*            zzebeln4 = wa_pedido-vbeln AND
*            zzebelp4 = wa_pedido-posnr.
*    IF sy-subrc = 0.
*      DELETE t_pedido INDEX lv_index .
*    ENDIF.
*  ENDLOOP.


* buscamos los lotes en el almacén 1040 y q tengan stock.
  CLEAR: lt_mchb. REFRESH: lt_mchb.

  SELECT * FROM mchb
    INTO TABLE lt_mchb
    FOR ALL ENTRIES IN t_pedido
    WHERE matnr = t_pedido-matnr AND
          werks = '4000' AND
          lgort = '4020'.

  DELETE lt_mchb WHERE cspem = '0.000'.

* verificamos que el Pedido/posición/cliente, no está como característica de ningun lote
* que esté en el almacén 4020.

  LOOP AT t_pedido INTO wa_pedido.
    lv_index  = sy-tabix.

    CLEAR: wa_sc, sc, wa_so, so, lv_mtart, return, lv_borrar.
    REFRESH: sc, so.

    wa_sc-name_char = 'Z_PEDIDO'.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = wa_pedido-vbeln
      IMPORTING
        output = wa_sc-char_value.
    APPEND wa_sc TO sc.

    wa_sc-name_char = 'Z_POSICION'.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = wa_pedido-posnr
      IMPORTING
        output = wa_sc-char_value.
    APPEND wa_sc TO sc.

    wa_sc-name_char = 'Z_CLIENTE'.
    CASE wa_pedido-tipo.
      WHEN 'PV'.
        SELECT SINGLE kunnr FROM vbak
          INTO wa_sc-char_value
          WHERE vbeln = wa_pedido-vbeln.
      WHEN OTHERS.
        SELECT SINGLE lifnr FROM ekko
          INTO wa_sc-char_value
          WHERE ebeln = wa_pedido-vbeln.
    ENDCASE.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = wa_sc-char_value
      IMPORTING
        output = wa_sc-char_value.
    APPEND wa_sc TO sc.


    CALL FUNCTION 'BAPI_CLASS_SELECT_OBJECTS'
      EXPORTING
        classtype            = '023'
        classnum             = 'Z_ZPMP'
        maxhits              = 999999
      IMPORTING
        return               = return
      TABLES
        selectioncriterions  = sc
        selectedobjects      = so
        objectclassification = oc.

    IF return-type <> 'E'.
      lv_borrar = 'X'.

    ELSE.
      CLEAR: return.
      CALL FUNCTION 'BAPI_CLASS_SELECT_OBJECTS'
        EXPORTING
          classtype            = '023'
          classnum             = 'Z_ZPLP'
          maxhits              = 999999
        IMPORTING
          return               = return
        TABLES
          selectioncriterions  = sc
          selectedobjects      = so
          objectclassification = oc.

      IF return-type <> 'E'.
        lv_borrar = 'X'.
      ENDIF.
    ENDIF.


    IF lv_borrar = 'X'.
      LOOP AT so INTO wa_so.
        lv_matnr = wa_so-object(18).
        lv_charg = wa_so+18(10).

        READ TABLE lt_mchb INTO wa_mchb WITH KEY matnr = lv_matnr
        charg = lv_charg.
        IF sy-subrc = 0.
          DELETE t_pedido INDEX lv_index .
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  OBTENER_SEMITERMINADO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_T_PEDIDO  text
*      <--P_SEMITERMINADO  text
*----------------------------------------------------------------------*
FORM obtener_semiterminado  USING t_pedido TYPE         tty_pedido
                            CHANGING gt_datos_pedidos TYPE zrpp0033.

  DATA: wa_pedido    TYPE LINE OF tty_pedido,
        lv_zplp      TYPE matnr,
        lv_cant_zplp TYPE cs_e_mnglg,
        lv_zpmp      TYPE matnr,
        lv_cant_zpmp TYPE cs_e_peinh,
        lv_stlal     TYPE stko-stlal,
        lv_stlan     TYPE stzu-stlan.

  LOOP AT t_pedido INTO wa_pedido.
    CLEAR: lv_zplp, lv_cant_zplp.
    PERFORM lista_materiales USING wa_pedido-matnr
                                   wa_pedido-werks
                                   wa_pedido-wmeng
                            CHANGING lv_zplp
                                     lv_cant_zplp.

    CLEAR: wa_datos_pedidos.

    wa_datos_pedidos-vbeln = wa_pedido-vbeln.
    wa_datos_pedidos-posnr = wa_pedido-posnr.
    wa_datos_pedidos-zpmp = wa_pedido-matnr.

    SELECT SINGLE maktx FROM makt
      INTO wa_datos_pedidos-maktx
      WHERE matnr = wa_pedido-matnr AND
            spras = sy-langu.

    wa_datos_pedidos-wmeng = wa_pedido-wmeng.
    wa_datos_pedidos-bmeng = wa_pedido-bmeng.
    wa_datos_pedidos-edatu = wa_pedido-edatu.
    wa_datos_pedidos-werks = wa_pedido-werks.
    wa_datos_pedidos-lgort = wa_pedido-lgort.
    wa_datos_pedidos-zplp = lv_zplp.

    SELECT SINGLE maktx FROM makt
      INTO wa_datos_pedidos-maktx_zplp
      WHERE matnr = lv_zplp AND
            spras = sy-langu.

    wa_datos_pedidos-cant_zplp = lv_cant_zplp.
    wa_datos_pedidos-tipo = wa_pedido-tipo.

    APPEND wa_datos_pedidos TO gt_datos_pedidos.
  ENDLOOP.

  SORT gt_datos_pedidos BY vbeln posnr ASCENDING.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_MODIFIED_ROWS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ER_DATA_CHANGED  text
*----------------------------------------------------------------------*
FORM f_get_modified_rows  USING    pr_data_changed
                          TYPE REF TO cl_alv_changed_data_protocol.

  FIELD-SYMBOLS: <fs2> TYPE table.

  DATA: ls_data      TYPE REF TO data,
        ls_datos     TYPE        zspp0033_alv,
        ls_datos_old TYPE        zspp0033_alv,
        lv_index     TYPE        sytabix,
        lv_index2    TYPE        sytabix.

*Obtenemos el registro modificado en el ALV
  ASSIGN pr_data_changed->mp_mod_rows->* TO <fs2>.

*Lo recorremos
  LOOP AT <fs2> INTO ls_datos.

    lv_index2 = sy-tabix.

    CLEAR: ls_datos_old.
    READ TABLE gt_obsoletos_pmp INTO ls_datos_old
         WITH KEY matnr = ls_datos-matnr
                  werks = ls_datos-werks
                  lgort = ls_datos-lgort
                  charg = ls_datos-charg.

    lv_index = sy-tabix.

    IF ls_datos-sel <> ls_datos_old-sel.

      IF ls_datos-sel = 'X'.
        gv_cant_lote_pmp = gv_cant_lote_pmp + ls_datos_old-clabs.
        ls_datos_old-sel = 'X'.
        APPEND ls_datos_old TO gt_sel_zpmp.
      ELSE.
        gv_cant_lote_pmp = gv_cant_lote_pmp - ls_datos_old-clabs.
        ls_datos_old-sel = ''.
        DELETE gt_sel_zpmp WHERE matnr = ls_datos-matnr AND
                            werks = ls_datos-werks AND
                            lgort = ls_datos-lgort AND
                            charg = ls_datos-charg.
      ENDIF.

      MODIFY gt_obsoletos_pmp FROM ls_datos_old INDEX lv_index.
      MODIFY <fs2> FROM ls_datos_old INDEX lv_index2.

    ENDIF.
  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREA_ORDEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_PEDIDOS  text
*----------------------------------------------------------------------*
FORM crea_orden USING gt_sel TYPE zstpp0033_alv
                CHANGING wa_datos_pedidos TYPE zsrpp0033
                         lv_obsoletos TYPE xfeld
                         lv_cant_zplp TYPE cs_e_mnglg
                         gt_messages  TYPE  bapiret2_t.

  DATA: lv_error    TYPE xfeld,
*        wa_ztpp0017 TYPE ztpp0017,
        gs_messages TYPE LINE OF bapiret2_t.

  CHECK wa_datos_pedidos-cubierto_lotes = ''.

  CALL FUNCTION 'ZMRP_PLANIFICADOR'
    EXPORTING
      i_werks          = wa_datos_pedidos-werks
      i_lgort          = wa_datos_pedidos-lgort
      i_vbeln          = wa_datos_pedidos-vbeln
      i_posnr          = wa_datos_pedidos-posnr
      i_zpmp           = wa_datos_pedidos-zpmp
      i_cantidad_zpmp  = wa_datos_pedidos-wmeng
      i_planchas_zpmp  = gv_cant_lote_pmp
      i_zplp           = wa_datos_pedidos-zplp
      i_cantidad_zplp  = wa_datos_pedidos-cant_zplp
      i_planchas_zplp  = gv_cant_lote_plp
      i_fecha          = wa_datos_pedidos-edatu "gv_audat
      i_obsoletos_zpmp = wa_datos_pedidos-obsoletos_zpmp
      i_obsoletos_zplp = wa_datos_pedidos-obsoletos_zplp
      i_tipo_pedido    = wa_datos_pedidos-tipo
      i_reconvertido   = wa_datos_pedidos-reconvertido
    IMPORTING
      e_error          = lv_error
      e_obsoletos      = lv_obsoletos
      e_cant_zplp      = lv_cant_zplp
      gt_messages      = gt_messages
    TABLES
      t_lotes          = gt_sel
    CHANGING
      e_orden_zpmp     = wa_datos_pedidos-orden_zpmp
      e_orden_zplp     = wa_datos_pedidos-orden_zplp
    EXCEPTIONS
      error            = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
*   Implement suitable error handling here
  ENDIF.


  IF lv_error IS INITIAL.
    PERFORM modifica_orden USING wa_datos_pedidos-orden_zpmp
                                 wa_datos_pedidos-orden_zplp.

    wa_datos_pedidos-pte_decision = ''.
    wa_datos_pedidos-cubierto_lotes = 'X'.

*    wa_ztpp0017-vbeln = wa_datos_pedidos-vbeln.
*    wa_ztpp0017-posnr = wa_datos_pedidos-posnr.
*    wa_ztpp0017-tipo_pedido = wa_datos_pedidos-tipo.
*    wa_ztpp0017-usuario = sy-uname.
*    wa_ztpp0017-fecha = sy-datum.
*    wa_ztpp0017-hora = sy-uzeit.
*
*    INSERT ztpp0017 FROM wa_ztpp0017.
*    IF sy-subrc = 0.
*      COMMIT WORK.
*    ELSE.
*      ROLLBACK WORK.
*    ENDIF.
  ELSE.
*   mostrar errores
    PERFORM mostrar_log  USING    gt_messages.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  FIELDCAT_PLP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_FCAT_PLP  text
*----------------------------------------------------------------------*
FORM fieldcat_plp  CHANGING lt_fcat TYPE lvc_t_fcat.

  DATA: ls_fcat TYPE lvc_s_fcat.

  CLEAR: lt_fcat.
  REFRESH: lt_fcat.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZSPP0033_ALV'
*     i_client_never_display = 'X'
*     i_bypassing_buffer     =
    CHANGING
      ct_fieldcat      = lt_fcat
    EXCEPTIONS
      OTHERS           = 3.

  IF sy-subrc <> 0.

  ELSE.
    LOOP AT lt_fcat INTO ls_fcat.
      CASE ls_fcat-fieldname.
        WHEN 'SEL'.
          ls_fcat-edit = 'X'.
          ls_fcat-checkbox = 'X'.
        WHEN 'ZZCOLOR'.
          ls_fcat-no_out = 'X'.
        WHEN 'ZZPLALGNT'.
          ls_fcat-no_out = 'X'.
        WHEN 'ZZPLAANNT'.
          ls_fcat-no_out = 'X'.
        WHEN 'CUMLM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CINSM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CEINM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CSPEM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CRETM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMLA'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMUM'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMIN'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMEI'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMSP'.
          ls_fcat-no_out = 'X'.
        WHEN 'CVMRE'.
          ls_fcat-no_out = 'X'.
        WHEN 'Z_PEDIDO'.
          ls_fcat-coltext = text-010.
          ls_fcat-scrtext_l = text-010.
          ls_fcat-scrtext_m = text-010.
          ls_fcat-scrtext_s = text-010.
          ls_fcat-no_out = ''.

        WHEN 'Z_POSICION'.
          ls_fcat-coltext = text-011.
          ls_fcat-scrtext_l = text-011.
          ls_fcat-scrtext_m = text-011.
          ls_fcat-scrtext_s = text-011.
          ls_fcat-no_out = ''.

        WHEN 'Z_CLIENTE'.
          ls_fcat-coltext = text-012.
          ls_fcat-scrtext_l = text-012.
          ls_fcat-scrtext_m = text-012.
          ls_fcat-scrtext_s = text-012.
          ls_fcat-no_out = ''.

        WHEN 'LOTE_BLOQUEADO'.
          ls_fcat-coltext = text-013.
          ls_fcat-scrtext_l = text-013.
          ls_fcat-scrtext_m = text-013.
          ls_fcat-scrtext_s = text-013.
          ls_fcat-no_out = ''.

        WHEN 'CONSUMO_COMPLETO'.
          ls_fcat-coltext = text-014.
          ls_fcat-scrtext_l = text-014.
          ls_fcat-scrtext_m = text-014.
          ls_fcat-scrtext_s = text-014.
          ls_fcat-no_out = ''.

      ENDCASE.

      MODIFY lt_fcat FROM ls_fcat.
    ENDLOOP.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_OBSOLETOS_PMP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_obsoletos_pmp .
  DATA: ls_layout_pmp TYPE lvc_s_layo,
        lt_fcat_pmp   TYPE lvc_t_fcat,
        ls_fcat_pmp   TYPE lvc_s_fcat.

  DATA: lt_tooltips_pmp TYPE lvc_t_qinf,
        lt_toolb_pmp    TYPE ui_functions.

  IF gr_container_pmp IS INITIAL. "IS NOT BOUND.
    CREATE OBJECT gr_container_pmp
      EXPORTING
        container_name = 'CONTAINER_PMP'.

    CREATE OBJECT gr_grid_pmp
      EXPORTING
        i_parent      = gr_container_pmp
        i_appl_events = 'X'.

*   Para los eventos
    CREATE OBJECT g_application_pmp.


    SET HANDLER g_application_pmp->handle_toolbar FOR gr_grid_pmp.
    SET HANDLER g_application_pmp->handle_user_command FOR gr_grid_pmp.
    SET HANDLER g_application_pmp->handle_data_changed FOR gr_grid_pmp.


    CALL METHOD gr_grid_pmp->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

    CLEAR: lt_fcat_pmp.
    REFRESH: lt_fcat_pmp.

    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name = 'ZSPP0033_ALV'
*       i_client_never_display = 'X'
*       i_bypassing_buffer     =
      CHANGING
        ct_fieldcat      = lt_fcat_pmp
      EXCEPTIONS
        OTHERS           = 3.

    IF sy-subrc <> 0.

    ENDIF.
  ENDIF.

  PERFORM fieldcat_pmp CHANGING lt_fcat_pmp.
  PERFORM deshabilitar_botones_pmp CHANGING lt_toolb_pmp .


  ls_layout_pmp-cwidth_opt = 'X'.

  CALL METHOD gr_grid_pmp->set_table_for_first_display
    EXPORTING
      is_layout            = ls_layout_pmp
      it_except_qinfo      = lt_tooltips_pmp
      it_toolbar_excluding = lt_toolb_pmp
      i_save               = 'A'
*     i_default            = 'X'
    CHANGING
      it_fieldcatalog      = lt_fcat_pmp
      it_outtab            = gt_obsoletos_pmp.
*  else.
*        CALL METHOD gr_grid_200->refresh_table_display.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_OBSOLETOS_PLP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_obsoletos_plp .
  DATA: ls_layout_plp TYPE lvc_s_layo,
        lt_fcat_plp   TYPE lvc_t_fcat,
        ls_fcat_plp   TYPE lvc_s_fcat.

  DATA: lt_tooltips_plp TYPE lvc_t_qinf,
        lt_toolb_plp    TYPE ui_functions.

  IF gr_container_plp IS INITIAL. "IS NOT BOUND.
    CREATE OBJECT gr_container_plp
      EXPORTING
        container_name = 'CONTAINER_PLP'.

    CREATE OBJECT gr_grid_plp
      EXPORTING
        i_parent      = gr_container_plp
        i_appl_events = 'X'.

*   Para los eventos
    CREATE OBJECT g_application_plp.

    SET HANDLER g_application_plp->handle_toolbar FOR gr_grid_plp.
    SET HANDLER g_application_plp->handle_user_command FOR gr_grid_plp.
    SET HANDLER g_application_plp->handle_data_changed FOR gr_grid_plp.

    CALL METHOD gr_grid_plp->register_edit_event
      EXPORTING
        i_event_id = cl_gui_alv_grid=>mc_evt_modified.

    CLEAR: lt_fcat_plp.
    REFRESH: lt_fcat_plp.

    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_structure_name = 'ZSPP0033_ALV'
*       i_client_never_display = 'X'
*       i_bypassing_buffer     =
      CHANGING
        ct_fieldcat      = lt_fcat_plp
      EXCEPTIONS
        OTHERS           = 3.

    IF sy-subrc <> 0.

    ENDIF.
  ENDIF.

  PERFORM fieldcat_plp CHANGING lt_fcat_plp.
  PERFORM deshabilitar_botones_plp CHANGING lt_toolb_plp .

  ls_layout_plp-cwidth_opt = 'X'.

  CALL METHOD gr_grid_plp->set_table_for_first_display
    EXPORTING
      is_layout            = ls_layout_plp
      it_except_qinfo      = lt_tooltips_plp
      it_toolbar_excluding = lt_toolb_plp
      i_save               = 'A'
*     i_default            = 'X'
    CHANGING
      it_fieldcatalog      = lt_fcat_plp
      it_outtab            = gt_obsoletos_plp.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_GET_MODIFIED_ROWS_PLP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ER_DATA_CHANGED  text
*----------------------------------------------------------------------*
FORM f_get_modified_rows_plp  USING    pr_data_changed
                              TYPE REF TO cl_alv_changed_data_protocol.

  FIELD-SYMBOLS: <fs2> TYPE table.

  DATA: ls_data      TYPE REF TO data,
        ls_datos     TYPE        zspp0033_alv,
        ls_datos_old TYPE        zspp0033_alv,
        lv_index     TYPE        sytabix,
        lv_index2    TYPE        sytabix.

* Obtenemos el registro modificado en el ALV
  ASSIGN pr_data_changed->mp_mod_rows->* TO <fs2>.

* Lo recorremos
  LOOP AT <fs2> INTO ls_datos.

    lv_index2 = sy-tabix.

    CLEAR: ls_datos_old.
    READ TABLE gt_obsoletos_plp INTO ls_datos_old
         WITH KEY matnr = ls_datos-matnr
                  werks = ls_datos-werks
                  lgort = ls_datos-lgort
                  charg = ls_datos-charg.

    lv_index = sy-tabix.

    IF ls_datos-sel <> ls_datos_old-sel.

      IF ls_datos-sel = 'X'.
        gv_cant_lote_plp = gv_cant_lote_plp + ls_datos_old-clabs.
        ls_datos_old-sel = 'X'.
        APPEND ls_datos_old TO gt_sel_zplp.

      ELSE.
        gv_cant_lote_plp = gv_cant_lote_plp - ls_datos_old-clabs.
        ls_datos_old-sel = ''.

        DELETE gt_sel_zplp WHERE matnr = ls_datos-matnr AND
                                 werks = ls_datos-werks AND
                                 lgort = ls_datos-lgort AND
                                 charg = ls_datos-charg.
      ENDIF.

      MODIFY gt_obsoletos_plp FROM ls_datos_old INDEX lv_index.
      MODIFY <fs2> FROM ls_datos_old INDEX lv_index2.

    ENDIF.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  OBTENER_DATOS_DETALLE_PLP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_PEDIDOS  text
*      <--P_GT_OBSOLETOS_PLP  text
*----------------------------------------------------------------------*
FORM obtener_datos_detalle_plp   USING    wa_semiterminado TYPE zsrpp0033
                                 CHANGING gt_obsoletos_zplp TYPE zstpp0033_alv.

  IF wa_semiterminado-zplp IS NOT INITIAL.
    PERFORM obtener_obsoletos USING wa_semiterminado-zplp
                                    wa_semiterminado-werks
                                    'X'
                              CHANGING gt_obsoletos_zplp.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DESHABILITAR_BOTONES_PMP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM deshabilitar_botones_pmp CHANGING gt_tlbr_excl TYPE ui_functions.

  DATA:       gs_exclude          TYPE ui_func.


* Exclude botón suma
  gs_exclude = cl_gui_alv_grid=>mc_fc_sum.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón promedio
  gs_exclude = cl_gui_alv_grid=>mc_fc_average.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón maximo
  gs_exclude = cl_gui_alv_grid=>mc_fc_maximum.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón minimo
  gs_exclude = cl_gui_alv_grid=>mc_fc_minimum.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón vistas
  gs_exclude = cl_gui_alv_grid=>mc_mb_view.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón variante
  gs_exclude = cl_gui_alv_grid=>mc_fc_current_variant.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón alv info
  gs_exclude = cl_gui_alv_grid=>mc_fc_info.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón grafico
  gs_exclude = cl_gui_alv_grid=>mc_fc_graph.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón imprimir
  gs_exclude = cl_gui_alv_grid=>mc_fc_print.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón filtrar
  gs_exclude = cl_gui_alv_grid=>mc_fc_filter.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón buscar
  gs_exclude = cl_gui_alv_grid=>mc_fc_find.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón orden ascendente
  gs_exclude = cl_gui_alv_grid=>mc_fc_sort_asc.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón ordenar descendente
  gs_exclude = cl_gui_alv_grid=>mc_fc_sort_dsc.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón detalles
  gs_exclude = cl_gui_alv_grid=>mc_fc_detail.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón abc
  gs_exclude = cl_gui_alv_grid=>mc_fc_call_abc.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón excel
  gs_exclude = cl_gui_alv_grid=>mc_fc_view_excel.
  APPEND gs_exclude TO gt_tlbr_excl.

  gs_exclude = cl_gui_alv_grid=>mc_fc_call_xml_export.
  APPEND gs_exclude TO gt_tlbr_excl.

  gs_exclude = cl_gui_alv_grid=>mc_fc_call_xxl.
  APPEND gs_exclude TO gt_tlbr_excl.

  gs_exclude = cl_gui_alv_grid=>mc_fc_excl_all.
  APPEND gs_exclude TO gt_tlbr_excl.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DESHABILITAR_BOTONES_PLP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_TOOLB_PMP  text
*----------------------------------------------------------------------*
FORM deshabilitar_botones_plp  CHANGING gt_tlbr_excl TYPE ui_functions.

  DATA: gs_exclude TYPE ui_func.


* Exclude botón suma
  gs_exclude = cl_gui_alv_grid=>mc_fc_sum.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón promedio
  gs_exclude = cl_gui_alv_grid=>mc_fc_average.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón maximo
  gs_exclude = cl_gui_alv_grid=>mc_fc_maximum.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón minimo
  gs_exclude = cl_gui_alv_grid=>mc_fc_minimum.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón vistas
  gs_exclude = cl_gui_alv_grid=>mc_mb_view.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón variante
  gs_exclude = cl_gui_alv_grid=>mc_fc_current_variant.
  APPEND gs_exclude TO gt_tlbr_excl.

* Exclude botón alv info
  gs_exclude = cl_gui_alv_grid=>mc_fc_info.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón grafico
  gs_exclude = cl_gui_alv_grid=>mc_fc_graph.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón imprimir
  gs_exclude = cl_gui_alv_grid=>mc_fc_print.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón filtrar
  gs_exclude = cl_gui_alv_grid=>mc_fc_filter.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón buscar
  gs_exclude = cl_gui_alv_grid=>mc_fc_find.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón orden ascendente
  gs_exclude = cl_gui_alv_grid=>mc_fc_sort_asc.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón ordenar descendente
  gs_exclude = cl_gui_alv_grid=>mc_fc_sort_dsc.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón detalles
  gs_exclude = cl_gui_alv_grid=>mc_fc_detail.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón abc
  gs_exclude = cl_gui_alv_grid=>mc_fc_call_abc.
  APPEND gs_exclude TO gt_tlbr_excl.

* Excluir botón excel
  gs_exclude = cl_gui_alv_grid=>mc_fc_view_excel.
  APPEND gs_exclude TO gt_tlbr_excl.

  gs_exclude = cl_gui_alv_grid=>mc_fc_call_xml_export.
  APPEND gs_exclude TO gt_tlbr_excl.

  gs_exclude = cl_gui_alv_grid=>mc_fc_call_xxl.
  APPEND gs_exclude TO gt_tlbr_excl.

  gs_exclude = cl_gui_alv_grid=>mc_fc_excl_all.
  APPEND gs_exclude TO gt_tlbr_excl.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  VERIFICAR_OBSOLETOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM verificar_obsoletos .
  DATA: lv_index          TYPE i,
        lt_obsoletos_zpmp TYPE zstpp0033_alv,
        lt_obsoletos_zplp TYPE zstpp0033_alv.

* obtenemos los obsoletos y creamos las órdnees previsionales de aquellos
* zpmp y zplp que no tengan obsoletos.
  LOOP AT gt_datos_pedidos INTO wa_datos_pedidos WHERE cubierto_lotes = ''.

    lv_index = sy-tabix.

    CLEAR: lt_obsoletos_zpmp, lt_obsoletos_zplp.
    REFRESH: lt_obsoletos_zpmp, lt_obsoletos_zplp.

    IF wa_datos_pedidos-zpmp IS NOT INITIAL.
      PERFORM obtener_obsoletos USING wa_datos_pedidos-zpmp
                                      wa_datos_pedidos-werks
                                      ''
                                CHANGING lt_obsoletos_zpmp.

      IF lt_obsoletos_zpmp[] IS NOT INITIAL.
        wa_datos_pedidos-obsoletos_zpmp = 'X'.
      ELSE.
        wa_datos_pedidos-obsoletos_zpmp = ''.
      ENDIF.
    ENDIF.


    IF wa_datos_pedidos-zplp IS NOT INITIAL.
      PERFORM obtener_obsoletos USING wa_datos_pedidos-zplp
                                      wa_datos_pedidos-werks
                                      ''
                                  CHANGING lt_obsoletos_zplp.

      IF lt_obsoletos_zplp[] IS NOT INITIAL.
        wa_datos_pedidos-obsoletos_zplp = 'X'.
      ELSE.
        wa_datos_pedidos-obsoletos_zplp = ''.
      ENDIF.
    ENDIF.


    IF lt_obsoletos_zplp[] IS INITIAL AND lt_obsoletos_zpmp IS INITIAL.
      wa_datos_pedidos-pte_decision = ''.
    ELSE.
      wa_datos_pedidos-pte_decision = 'X'.
    ENDIF.

    MODIFY gt_datos_pedidos FROM wa_datos_pedidos INDEX lv_index.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_MESSAGES  text
*----------------------------------------------------------------------*
FORM mostrar_log  USING    gt_messages TYPE  bapiret2_t.
  DATA: gs_messages TYPE LINE OF bapiret2_t.

  READ TABLE gt_messages INTO gs_messages WITH KEY type = ''.
  IF sy-subrc <> 0.

    CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
      TABLES
        i_bapiret2_tab = gt_messages.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  BLOQUEO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM bloqueo .
  DATA: w_funcname LIKE tfdir-funcname.
  w_funcname = sy-cprog.
*
  CALL FUNCTION 'ENQUEUE_ESFUNCTION'
    EXPORTING
*     MODE_TFDIR     = 'E'
      funcname       = w_funcname
*     X_FUNCNAME     = ' '
*     _SCOPE         = '2'
*     _WAIT          = ' '
*     _COLLECT       = ' '
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
    MESSAGE e256(zpp)."Programa bloqueado por otro usuario. Inténtelo más tarde.
  ELSE.
*    MESSAGE i257(zpp). "Ha bloqueado el programa para otros usuarios. Téngalo en cuenta.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DESBLOQUEO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM desbloqueo .
  DATA: w_funcname LIKE tfdir-funcname.
  w_funcname = sy-cprog.

  CALL FUNCTION 'DEQUEUE_ESFUNCTION'
    EXPORTING
*     MODE_TFDIR = 'E'
      funcname = w_funcname
*     X_FUNCNAME = ' '
*     _SCOPE   = '3'
*     _SYNCHRON  = ' '
*     _COLLECT = ' '
    .
  IF sy-subrc = 0.
*     MESSAGE i258(zpp). "Programa desbloqueado. Otros usuarios pueden usarlo.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MODIFICA_ORDEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_DATOS_PEDIDOS_ORDEN_ZPMP  text
*      -->P_WA_DATOS_PEDIDOS_ORDEN_ZPLP  text
*----------------------------------------------------------------------*
FORM modifica_orden  USING orden_zpmp
                           orden_zplp.

  DATA: wa_aufk TYPE aufk,
        l_garg  LIKE seqg3-garg,
        t_enq   TYPE TABLE OF seqg3.

  IF orden_zpmp IS NOT INITIAL.
* ini - cvivo - 15.01.2018 - 45745 Lanzamos en actualización porque hay veces que no se está actualizando correctamente la modificación
    CALL FUNCTION 'Z_MODIFICAR_ZZAUFNR_EXT' IN UPDATE TASK
      EXPORTING
        orden = orden_zpmp
        valor = orden_zplp.

*    UPDATE aufk SET zzaufnr_ext = orden_zplp WHERE aufnr = orden_zpmp.
**    IF sy-subrc = 0.
**      COMMIT WORK.
**    ELSE.
**      ROLLBACK WORK.
*    ENDIF.
* fin - cvivo - 15.01.2018 - 45745
  ENDIF.

  IF orden_zplp IS NOT INITIAL.
* ini - cvivo - 15.01.2018 - 45745 Lanzamos en actualización porque hay veces que no se está actualizando correctamente la modificación
    CALL FUNCTION 'Z_MODIFICAR_ZZAUFNR_EXT' IN UPDATE TASK
      EXPORTING
        orden = orden_zplp
        valor = orden_zpmp.

*    SELECT SINGLE * FROM aufk
*      INTO wa_aufk
*      WHERE aufnr =  orden_zplp.
*
*    IF sy-subrc = 0.
*          wa_aufk-zzaufnr_ext = orden_zpmp.
*          UPDATE aufk FROM wa_aufk.
*    ENDIF.
*    UPDATE aufk SET zzaufnr_ext = orden_zpmp WHERE aufnr = orden_zplp.
**    IF sy-subrc = 0.
**      COMMIT WORK.
**    ELSE.
**      ROLLBACK WORK.
**    ENDIF.
  ENDIF.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.
* fin - cvivo - 15.01.2018 - 45745
ENDFORM.
