*&---------------------------------------------------------------------*
*&  Include           ZRPP0022_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  BUSCAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM buscar_datos .

  DATA: ls_mov   LIKE LINE OF gt_mov,
        ls_datos LIKE LINE OF gt_datos,
        lv_num   TYPE         i.
  DATA: l_matnr TYPE matnr.

  CLEAR: gt_mov, gt_datos.
  REFRESH: gt_mov, gt_datos.

  " Recogemos datos de las tablas:

  IF p_nstock IS INITIAL. " Sólo con stock positivo

    IF so_charg IS NOT INITIAL. " carga inicial cuando se informa LOTE


* 1er paso: selección de lote-material
      SELECT mch1~matnr , makt~maktx , mchb~werks , mch1~charg , mara~zzgramaje, mara~mtart , mchb~lgort ,
             mara~zzancho , mchb~clabs , mara~meins ", mseg~matnr AS matnr_309
        INTO TABLE @DATA(lt_datos_charg)
      FROM mch1
        INNER JOIN mchb ON mch1~matnr = mchb~matnr AND mch1~charg = mchb~charg
        INNER JOIN makt ON mch1~matnr = makt~matnr
        INNER JOIN mara ON mch1~matnr = mara~matnr
      WHERE mch1~matnr IN @so_matnr
        AND mch1~charg IN @so_charg
        AND mchb~werks IN @so_werks
        AND mchb~clabs > 0
        AND makt~spras = @sy-langu
        AND mara~mtart IN @so_mtart.


* 2o paso: selección de datos de OF/Pedido
      LOOP AT lt_datos_charg INTO DATA(ls_datos_charg).

        SELECT SINGLE  matnr
          INTO @DATA(l_matnr_309)
          FROM mseg
          WHERE charg = @ls_datos_charg-charg AND
                werks = @ls_datos_charg-werks AND
                matnr <> @ls_datos_charg-matnr AND
                bwart = '309'.


        IF l_matnr_309 IS NOT INITIAL.
          l_matnr = l_matnr_309.
        ELSE.
          l_matnr = ls_datos_charg-matnr.
        ENDIF.

        SELECT SINGLE  b~auart , a~aufnr , a~bwart , a~budat , e~cputm ,
                b~zzkunnr1 , b~zzebelp1 , b~zzebeln1 ,
                b~zzkunnr2 , b~zzebelp2 , b~zzebeln2 ,
                b~zzkunnr3 , b~zzebelp3 , b~zzebeln3
        INTO @DATA(ls_datos_of)
        FROM aufm AS a
        INNER JOIN aufk AS b ON b~aufnr = a~aufnr
        INNER JOIN mara AS c ON c~matnr = a~matnr
        INNER JOIN mchb AS d ON ( d~matnr = a~matnr AND
            d~werks = a~werks AND
            d~lgort = a~lgort AND
            d~charg = a~charg )
* GST - 28/05/2015 ->
        INNER JOIN mkpf AS e ON ( e~mblnr = a~mblnr
            AND e~mjahr = a~mjahr )
* GST - 28/05/2015 <-
        WHERE
*       a~aufnr IN so_aufnr
            a~matnr = @l_matnr
        AND a~werks = @ls_datos_charg-werks
*    AND a~werks = p_werks
        AND a~charg = @ls_datos_charg-charg
*    AND a~budat IN so_budat
        AND b~auart IN @so_auart
        AND ( a~bwart = '101' OR a~bwart = '531' )
        AND ( ( b~zzkunnr1 IN @so_kunnr AND b~zzebeln1 IN @so_ebeln AND b~zzebelp1 IN @so_ebelp )
           OR ( b~zzkunnr2 IN @so_kunnr AND b~zzebeln2 IN @so_ebeln AND b~zzebelp2 IN @so_ebelp )
           OR ( b~zzkunnr3 IN @so_kunnr AND b~zzebeln3 IN @so_ebeln AND b~zzebelp3 IN @so_ebelp )
            )
        AND c~mtart = @ls_datos_charg-mtart.
*    AND d~clabs > 0. " Ya se filtra anteriormente

        APPEND INITIAL LINE TO gt_mov ASSIGNING FIELD-SYMBOL(<fs_mov>).
        <fs_mov>-matnr = ls_datos_charg-matnr. " Mover el matnr con kg. después del 309.
        <fs_mov>-lgort = ls_datos_charg-lgort.
        <fs_mov>-zzgramaje  = ls_datos_charg-zzgramaje.
        <fs_mov>-zzancho    = ls_datos_charg-zzancho.
        <fs_mov>-menge      = ls_datos_charg-clabs.
        <fs_mov>-werks      = ls_datos_charg-werks.
        <fs_mov>-charg      = ls_datos_charg-charg.
        <fs_mov>-auart      = ls_datos_of-auart.
        <fs_mov>-aufnr      = ls_datos_of-aufnr.
        <fs_mov>-bwart      = ls_datos_of-bwart.
        <fs_mov>-budat      = ls_datos_of-budat.
        <fs_mov>-cputm      = ls_datos_of-cputm.
        <fs_mov>-zkunnr1   = ls_datos_of-zzkunnr1.
        <fs_mov>-zebelp1   = ls_datos_of-zzebelp1.
        <fs_mov>-zebeln1   = ls_datos_of-zzebeln1.
        <fs_mov>-zkunnr2   = ls_datos_of-zzkunnr2.
        <fs_mov>-zebelp2   = ls_datos_of-zzebelp2.
        <fs_mov>-zebeln2   = ls_datos_of-zzebeln2.
        <fs_mov>-zkunnr3   = ls_datos_of-zzkunnr3.
        <fs_mov>-zebelp3   = ls_datos_of-zzebelp3.
        <fs_mov>-zebeln3   = ls_datos_of-zzebeln3.

      ENDLOOP.

    ELSE.

      SELECT b~auart a~aufnr a~bwart a~budat e~cputm a~matnr c~zzgramaje c~zzancho a~menge
      a~werks a~charg b~zzkunnr1 b~zzebelp1 b~zzebeln1 a~lgort
      b~zzkunnr2 b~zzebelp2 b~zzebeln2
      b~zzkunnr3 b~zzebelp3 b~zzebeln3
      INTO CORRESPONDING FIELDS OF TABLE gt_mov
      FROM aufm AS a
      INNER JOIN aufk AS b ON b~aufnr = a~aufnr
      INNER JOIN mara AS c ON c~matnr = a~matnr
      INNER JOIN mchb AS d ON ( d~matnr = a~matnr AND
          d~werks = a~werks AND
          d~lgort = a~lgort AND
          d~charg = a~charg )
* GST - 28/05/2015 ->
      INNER JOIN mkpf AS e ON ( e~mblnr = a~mblnr
          AND e~mjahr = a~mjahr )
* GST - 28/05/2015 <-
      WHERE a~aufnr IN so_aufnr
      AND a~matnr IN so_matnr
      AND a~werks IN so_werks
*    AND a~werks = p_werks
      AND a~charg IN so_charg
      AND a~budat IN so_budat
      AND b~auart IN so_auart
      AND ( a~bwart = '101' OR a~bwart = '531' )
      AND ( ( b~zzkunnr1 IN so_kunnr AND b~zzebeln1 IN so_ebeln AND b~zzebelp1 IN so_ebelp )
      OR ( b~zzkunnr2 IN so_kunnr AND b~zzebeln2 IN so_ebeln AND b~zzebelp2 IN so_ebelp )
      OR ( b~zzkunnr3 IN so_kunnr AND b~zzebeln3 IN so_ebeln AND b~zzebelp3 IN so_ebelp ) )
      AND c~mtart IN so_mtart
      AND d~clabs > 0.

    ENDIF.

  ELSE. " Incluir lotes sin stock

    SELECT b~auart a~aufnr a~bwart a~budat e~cputm a~matnr c~zzgramaje c~zzancho a~menge
    a~werks a~charg b~zzkunnr1 b~zzebelp1 b~zzebeln1
    b~zzkunnr2 b~zzebelp2 b~zzebeln2
    b~zzkunnr3 b~zzebelp3 b~zzebeln3
    INTO CORRESPONDING FIELDS OF TABLE gt_mov
    FROM aufm AS a
    INNER JOIN aufk AS b ON b~aufnr = a~aufnr
    INNER JOIN mara AS c ON c~matnr = a~matnr
    INNER JOIN mchb AS d ON ( d~matnr = a~matnr AND
        d~werks = a~werks AND
        d~lgort = a~lgort AND
        d~charg = a~charg )
* GST - 28/05/2015 ->
    INNER JOIN mkpf AS e ON ( e~mblnr = a~mblnr
        AND e~mjahr = a~mjahr )
* GST - 28/05/2015 <-
    WHERE a~aufnr IN so_aufnr
    AND a~matnr IN so_matnr
    AND a~werks IN so_werks
    AND a~charg IN so_charg
    AND a~budat IN so_budat
    AND b~auart IN so_auart
    AND ( a~bwart = '101' OR a~bwart = '531' )
    AND ( ( b~zzkunnr1 IN so_kunnr AND b~zzebeln1 IN so_ebeln AND b~zzebelp1 IN so_ebelp )
    OR ( b~zzkunnr2 IN so_kunnr AND b~zzebeln2 IN so_ebeln AND b~zzebelp2 IN so_ebelp )
    OR ( b~zzkunnr3 IN so_kunnr AND b~zzebeln3 IN so_ebeln AND b~zzebelp3 IN so_ebelp ) )
    AND c~mtart IN so_mtart.
*      and d~clabs > 0.

  ENDIF.

* Eliminamos duplicados (no queremos todos los movimientos):
  SORT gt_mov BY auart ASCENDING
                 aufnr ASCENDING
                 matnr ASCENDING
                 werks ASCENDING
                 charg ASCENDING
                 lgort ASCENDING
                 bwart ASCENDING
* GST - 28/05/2015 ->
                 budat ASCENDING
                 cputm ASCENDING.
* GST - 28/05/2015 <-
  DELETE ADJACENT DUPLICATES FROM gt_mov.

  DELETE gt_mov WHERE bwart EQ '531' AND ( matnr NE '000000000002001771' AND matnr NE '000000000002001764').

* Rellenamos la tabla para el listado (etiquetas a imprimir):
  LOOP AT gt_mov INTO ls_mov.
    CLEAR: ls_datos, lv_num.
    MOVE-CORRESPONDING ls_mov TO ls_datos.

    " Seleccionamos descriptivo material:
    SELECT SINGLE maktx INTO ls_datos-maktx
      FROM makt
      WHERE matnr = ls_datos-matnr
      AND spras = sy-langu.

    " Peso:
*      lv_num = trunc( ls_mov-menge ).
*      write lv_num to ls_datos-peso.
*      condense ls_datos-peso.
    ls_datos-peso = ls_mov-menge.

    " Seleccionamos valores de las características
    "(según tipo de orden -> rollo o bobina):

    IF ls_datos-auart = 'ZI01'. " ETIQUETA ROLLO
      PERFORM f_carac_rollo USING ls_datos-matnr
                                  ls_datos-charg
                         CHANGING ls_datos-diametro
                                  ls_datos-n_tor
*           YTG - 24/10/2016
                                  ls_datos-kunnr
                                  ls_datos-ebeln
                                  ls_datos-ebelp.

      APPEND ls_datos TO gt_datos.

    ELSEIF ls_datos-auart = 'ZI02'. " ETIQUETA BOBINA
      IF ls_datos-bwart EQ '101'.
        PERFORM f_carac_bobina USING ls_datos-matnr
                                     ls_datos-charg
                            CHANGING ls_datos-diametro
                                     ls_datos-longitud
                                     ls_datos-f_fab
*          YTG - 24/10/2016
                                     ls_datos-kunnr
                                     ls_datos-ebeln
                                     ls_datos-ebelp.


*         APPEND ls_datos TO gt_datos.


      ELSEIF ls_datos-bwart EQ '531'.

        PERFORM f_carac_bobina_pulper USING ls_datos-matnr
                                            ls_datos-charg
                                   CHANGING ls_datos-diametro
                                            ls_datos-longitud
                                            ls_datos-f_fab.
      ENDIF.

* GST - 28/04/2015 ->
    ELSEIF ls_datos-auart = 'ZI05'. " ETIQUETA REPROCESO
      PERFORM f_carac_bobina_reproc USING ls_datos-matnr
                                          ls_datos-charg
                                    CHANGING ls_datos-diametro
                                             ls_datos-longitud
                                             ls_datos-f_fab
* GST - 08/06/2015 ->
                                             ls_datos-kunnr
                                             ls_datos-ebeln
                                             ls_datos-ebelp.
* GST - 08/06/2015 <-
* GST - 28/04/2015 <-

    ENDIF.

    " Añadimos número de registros con cliente, pedido y posición
    " (según tipo de orden -> rollo o bobina):
*YTG - 7000012469, Ticket_##_18483 24/10/2016
**    IF ls_datos-auart = 'ZI01'. " ETIQUETA ROLLO
**      " Primer registro posible:
***      IF ( ls_mov-zkunnr1 IS NOT INITIAL AND ls_mov-zkunnr1 IN so_kunnr )
***     AND ( ls_mov-zebeln1 IS NOT INITIAL AND ls_mov-zebeln1 IN so_ebeln )
***    AND ( ls_mov-zebelp1 IS NOT INITIAL AND ls_mov-zebelp1 IN so_ebelp ).
***        CLEAR: ls_datos-kunnr, ls_datos-ebeln, ls_datos-ebelp.
***        ls_datos-kunnr = ls_mov-zkunnr1.
***        ls_datos-ebeln = ls_mov-zebeln1.
***        ls_datos-ebelp = ls_mov-zebelp1.
***        APPEND ls_datos TO gt_datos.
***      ENDIF.
**
***     Comprobar solo que los campos zkunnr1, zebeln1, zebelp1 coincidan con los criterios de los rangos de la pantalla de selección
**      IF ( ls_mov-zkunnr1 IN so_kunnr ) AND ( ls_mov-zebeln1 IN so_ebeln ) AND ( ls_mov-zebelp1 IN so_ebelp ).
***       Si el cliente del movimiento no está vacío, asignarlo a la lista
**        IF ls_mov-zkunnr1 IS NOT INITIAL.
**          ls_datos-kunnr = ls_mov-zkunnr1.
**        ENDIF.
***       Si el documento del movimiento no está vacío, asignarlo a la lista
**        IF ls_mov-zebeln1 IS NOT INITIAL.
**          ls_datos-ebeln = ls_mov-zebeln1.
**        ENDIF.
***       Si la posicione del documento del movimiento no está vacío, asignarlo a la lista
**        IF ls_mov-zebelp1 IS NOT INITIAL.
**          ls_datos-ebelp = ls_mov-zebelp1.
**        ENDIF.
**        APPEND ls_datos TO gt_datos.
**      ENDIF.
**
**
**      " Segundo registro posible:
***      IF ( ls_mov-zkunnr2 IS NOT INITIAL AND ls_mov-zkunnr2 IN so_kunnr )
***     AND ( ls_mov-zebeln2 IS NOT INITIAL AND ls_mov-zebeln2 IN so_ebeln )
***    AND ( ls_mov-zebelp2 IS NOT INITIAL AND ls_mov-zebelp2 IN so_ebelp ).
***        CLEAR: ls_datos-kunnr, ls_datos-ebeln, ls_datos-ebelp.
***        ls_datos-kunnr = ls_mov-zkunnr2.
***        ls_datos-ebeln = ls_mov-zebeln2.
***        ls_datos-ebelp = ls_mov-zebelp2.
***        APPEND ls_datos TO gt_datos.
***      ENDIF.
**
***     Comprobar solo que los campos zkunnr2, zebeln2, zebelp2 coincidan con los criterios de los rangos de la pantalla de selección
**      IF ( ls_mov-zkunnr2 IN so_kunnr ) AND ( ls_mov-zebeln2 IN so_ebeln ) AND ( ls_mov-zebelp2 IN so_ebelp ).
***       Si el cliente del movimiento no está vacío, asignarlo a la lista
**        IF ls_mov-zkunnr2 IS NOT INITIAL.
**          ls_datos-kunnr = ls_mov-zkunnr2.
**        ENDIF.
***       Si el documento del movimiento no está vacío, asignarlo a la lista
**        IF ls_mov-zebeln2 IS NOT INITIAL.
**          ls_datos-ebeln = ls_mov-zebeln2.
**        ENDIF.
***       Si la posicione del documento del movimiento no está vacío, asignarlo a la lista
**        IF ls_mov-zebelp2 IS NOT INITIAL.
**          ls_datos-ebelp = ls_mov-zebelp2.
**        ENDIF.
**        APPEND ls_datos TO gt_datos.
**      ENDIF.
**
**      " Tercer registro posible:
***      IF ( ls_mov-zkunnr3 IS NOT INITIAL AND ls_mov-zkunnr3 IN so_kunnr )
***     AND ( ls_mov-zebeln3 IS NOT INITIAL AND ls_mov-zebeln3 IN so_ebeln )
***    AND ( ls_mov-zebelp3 IS NOT INITIAL AND ls_mov-zebelp3 IN so_ebelp ).
***        CLEAR: ls_datos-kunnr, ls_datos-ebeln, ls_datos-ebelp.
***        ls_datos-kunnr = ls_mov-zkunnr3.
***        ls_datos-ebeln = ls_mov-zebeln3.
***        ls_datos-ebelp = ls_mov-zebelp3.
***        APPEND ls_datos TO gt_datos.
***      ENDIF.
**
***   Comprobar solo que los campos zkunnr3, zebeln3, zebelp3 coincidan con los criterios de los rangos de la pantalla de selección
**      IF ( ls_mov-zkunnr3 IN so_kunnr ) AND ( ls_mov-zebeln3 IN so_ebeln ) AND ( ls_mov-zebelp3 IN so_ebelp ).
***       Si el cliente del movimiento no está vacío, asignarlo a la lista
**        IF ls_mov-zkunnr3 IS NOT INITIAL.
**          ls_datos-kunnr = ls_mov-zkunnr3.
**        ENDIF.
***       Si el documento del movimiento no está vacío, asignarlo a la lista
**        IF ls_mov-zebeln3 IS NOT INITIAL.
**          ls_datos-ebeln = ls_mov-zebeln3.
**        ENDIF.
***       Si la posicione del documento del movimiento no está vacío, asignarlo a la lista
**        IF ls_mov-zebelp3 IS NOT INITIAL.
**          ls_datos-ebelp = ls_mov-zebelp3.
**        ENDIF.
**        APPEND ls_datos TO gt_datos.
**      ENDIF.



    IF ls_datos-auart = 'ZI02'. " ETIQUETA BOBINA
      " Se crea un único registro en la tabla de datos:
*      IF ls_mov-zkunnr1 IS NOT INITIAL AND ls_mov-zebeln1 IS NOT INITIAL
*         AND ls_mov-zebelp1 IS NOT INITIAL.
*        ls_datos-kunnr = ls_mov-zkunnr1.
*        ls_datos-ebeln = ls_mov-zebeln1.
*        ls_datos-ebelp = ls_mov-zebelp1.
*        APPEND ls_datos TO gt_datos.
*      ENDIF.
      IF ls_mov-zkunnr1 IS NOT INITIAL.
        ls_datos-kunnr = ls_mov-zkunnr1.
      ENDIF.

      IF ls_mov-zebeln1 IS NOT INITIAL.
        ls_datos-ebeln = ls_mov-zebeln1.
      ENDIF.

      IF ls_mov-zebelp1 IS NOT INITIAL.
        ls_datos-ebelp = ls_mov-zebelp1.
      ENDIF.
      APPEND ls_datos TO gt_datos.

* GST - 28/04/2015 ->
    ELSEIF ls_datos-auart = 'ZI05'. " ETIQUETA REPROCESO
      " Se crea un único registro en la tabla de datos:
*      IF ls_mov-zkunnr1 IS NOT INITIAL AND ls_mov-zebeln1 IS NOT INITIAL
*         AND ls_mov-zebelp1 IS NOT INITIAL.
*        ls_datos-kunnr = ls_mov-zkunnr1.
*        ls_datos-ebeln = ls_mov-zebeln1.
*        ls_datos-ebelp = ls_mov-zebelp1.
*        APPEND ls_datos TO gt_datos.

      IF ls_mov-zkunnr1 IS NOT INITIAL.
        ls_datos-kunnr = ls_mov-zkunnr1.
      ENDIF.

      IF ls_mov-zebeln1 IS NOT INITIAL.
        ls_datos-ebeln = ls_mov-zebeln1.
      ENDIF.

      IF ls_mov-zebelp1 IS NOT INITIAL.
        ls_datos-ebelp = ls_mov-zebelp1.
      ENDIF.
      APPEND ls_datos TO gt_datos.

* GST - 08/06/2015 ->
    ELSEIF ls_datos-auart <> 'ZI01' AND ls_datos-kunnr IS NOT INITIAL AND ls_datos-ebeln IS NOT INITIAL AND ls_datos-ebelp IS NOT INITIAL.
      APPEND ls_datos TO gt_datos.

** GST - 08/06/2015 <-

* GST - 28/04/2015 <-
    ENDIF.
***YTG - 7000012469, Ticket_##_18483 24/10/2016
  ENDLOOP.

ENDFORM.                    " BUSCAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  F_CARAC_ROLLO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_MATNR  text
*      -->P_LS_DATOS_CHARG  text
*      <--P_LS_DATOS_DIAMETRO  text
*      <--P_LS_DATOS_PESO  text
*      <--P_LS_DATOS_N_TOR  text
*----------------------------------------------------------------------*
FORM f_carac_rollo  USING    p_matnr
                             p_charg
                    CHANGING p_diametro
                             p_n_tor
                             p_cliente
                             p_pedido
                             p_posicion.
*                             p_peso.

  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        lv_num               TYPE i,
        lv_fec_n             TYPE n LENGTH 8.


  CLEAR: p_diametro, p_n_tor.
  CLEAR: lt_alloc_values_num, lt_alloc_values_char, lv_object.
  CLEAR: lt_alloc_values_curr, lt_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char.
  REFRESH: lt_alloc_values_curr, lt_return.


  CLEAR lv_object.
  CONCATENATE p_matnr p_charg INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_ROLLO'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

  LOOP AT lt_alloc_values_num INTO ls_alloc_values_num.
    CASE ls_alloc_values_num-charact.
        " Diámetro (mm)
      WHEN 'Z_DIAMETRO1'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_diametro.
*        REPLACE '.' IN p_diametro WITH space.
        CONDENSE p_diametro.
        " Peso (Kg)
*      WHEN 'Z_PESO1'.
*        CLEAR lv_num.
*        lv_num = ls_alloc_values_num-value_from.
*        WRITE lv_num TO p_peso.
**        REPLACE '.' IN p_peso WITH space.
*        CONDENSE p_peso.
        " Nº Tornadas:
      WHEN 'Z_TORNADAS'.
        CLEAR lv_num.
        lv_num = ls_alloc_values_num-value_from.
        WRITE lv_num TO p_n_tor.
*        REPLACE '.' IN p_n_tor WITH space.
        CONDENSE p_n_tor.
*      when 'Z_PESO1'.
*        CLEAR lv_num.
*        lv_num = trunc( ls_alloc_values_num-value_from ).
*        WRITE lv_num TO p_peso.
**        REPLACE '.' IN p_diametro WITH space.
*        CONDENSE p_peso.

*      YTG  7000012469, Ticket_##_18483 24/10/2016
*     Z_CLIENTE
      WHEN 'Z_CLIENTE'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_cliente.
        CONDENSE p_cliente.

*        Z_PEDIDO
      WHEN 'Z_PEDIDO'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_pedido.
        CONDENSE p_pedido.

*       Z_POSICION
      WHEN 'Z_POSICION'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_posicion.
        CONDENSE p_posicion.
**      YTG 7000012469, Ticket_##_18483 24/10/2016
    ENDCASE.
  ENDLOOP.


ENDFORM.                    " F_CARAC_ROLLO
*&---------------------------------------------------------------------*
*&      Form  F_CARAC_BOBINA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_MATNR  text
*      -->P_LS_DATOS_CHARG  text
*      <--P_LS_DATOS_DIAMETRO  text
*      <--P_LS_DATOS_PESO  text
*      <--P_LS_DATOS_LONGITUD  text
*      <--P_LS_DATOS_F_FAB  text
*----------------------------------------------------------------------*
FORM f_carac_bobina  USING    p_matnr
                              p_charg
                     CHANGING p_diametro
                              p_longitud
                              p_f_fab
                              p_cliente
                              p_pedido
                              p_posicion.

  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        lv_num               TYPE i,
        lv_fec_n             TYPE n LENGTH 8.

* Inicializamos variables:
  CLEAR: p_diametro, p_longitud, p_f_fab.
  CLEAR: lt_alloc_values_num, lt_alloc_values_char, lv_object.
  CLEAR: lt_alloc_values_curr, lt_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.

  CLEAR lv_object.
  CONCATENATE p_matnr p_charg INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.


  LOOP AT lt_alloc_values_num INTO ls_alloc_values_num.
    CASE ls_alloc_values_num-charact.
        " Diámetro (mm):
      WHEN 'Z_DIAMETRO'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_diametro.
*        REPLACE '.' IN p_diametro WITH space.
        CONDENSE p_diametro.
*      WHEN 'Z_PESO'.
*        CLEAR lv_num.
*        lv_num = ls_alloc_values_num-value_from.
*        WRITE lv_num TO p_peso.
**        REPLACE '.' IN p_peso WITH space.
*        CONDENSE p_peso.
        " Longitud (m):
      WHEN 'Z_LONGITUD_B'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_longitud.
*        REPLACE '.' IN p_longitud WITH space.
        CONDENSE p_longitud.
        " Fecha fabricación:
      WHEN 'Z_FECHA_FABRICACION'.
        CLEAR: lv_num, lv_fec_n.
        lv_num = ls_alloc_values_num-value_from.
        lv_fec_n = lv_num.
        WRITE lv_fec_n TO p_f_fab.
        CONDENSE p_f_fab.
        CONCATENATE p_f_fab+6(2) p_f_fab+4(2) p_f_fab+0(4)
                    INTO p_f_fab SEPARATED BY '.'.

*      YTG- 24/10/2016-
      WHEN 'Z_CLIENTE'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_cliente.
*        REPLACE '.' IN p_longitud WITH space.
        CONDENSE p_cliente.

      WHEN 'Z_PEDIDO'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_pedido.
*        REPLACE '.' IN p_longitud WITH space.
        CONDENSE p_pedido.

      WHEN 'Z_POSICION'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_posicion.
*        REPLACE '.' IN p_longitud WITH space.
        CONDENSE p_posicion.
    ENDCASE.

  ENDLOOP.

ENDFORM.                    " F_CARAC_BOBINA
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_POPUP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_popup .

  DATA:
    go_popup  TYPE REF TO cl_reca_gui_f4_popup,
    gf_choice TYPE        flag.

* GST - 15/06/2015 ->
* Ocutar campos redundates en la disposición:
  DATA: lt_hide_fields TYPE re_t_fieldname.

  PERFORM ocultar_campos CHANGING lt_hide_fields.
* GST - 15/06/2015 <-

  CALL METHOD cl_reca_gui_f4_popup=>factory_grid
    EXPORTING
      it_f4value     = gt_datos[]
      if_multi       = abap_true
      id_title       = text-002
      it_hide_field  = lt_hide_fields[]
    RECEIVING
      ro_f4_instance = go_popup.

  CALL METHOD go_popup->display
    EXPORTING
      id_start_column = 2 "25 "i_start_column
      id_start_line   = 2 "6  "i_start_line
      id_end_column   = 180 "150 "i_end_column
      id_end_line     = 30 "20 "i_end_line
    IMPORTING
      et_result       = gt_datos[]
      ef_cancelled    = gf_choice.

  IF gf_choice IS INITIAL.
    IF NOT gt_datos[] IS INITIAL.
      PERFORM imprimir_etiqueta.
    ELSE.
      MESSAGE i004(zpp)." DISPLAY LIKE 'I'.
    ENDIF.

  ENDIF.

ENDFORM.                    " MOSTRAR_POPUP
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ETIQUETA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_etiqueta .

  DATA: ls_datos         LIKE LINE OF gt_datos,
        ls_bobina        TYPE         zspp_etiq_bobina,
        ls_bobina_pulper TYPE         zspp_etiq_bobina_pulper,
        ls_rollo         TYPE         zspp_etiq_rollo,
        ls_rollo_n       TYPE         zspp_etiq_rollo_alta.



*YTG 08/09/2016 Validar el puesto de trabajo
*  PERFORM validacion.
*YTG 08/09/2016 Validar el puesto de trabajo

  LOOP AT gt_datos INTO ls_datos.
    CLEAR: ls_bobina, ls_rollo.

    IF ls_datos-auart = 'ZI01'. " Rollo
* INI 09/02/2021 - 65240 - CMS - Llamar a la nueva Impresión de Etiqueta ROLLO
****      " Datos para llamar a la función rollo:
****      ls_rollo-matnr = ls_datos-matnr.
****      ls_rollo-kunnr = ls_datos-kunnr.
****      ls_rollo-pedido = ls_datos-ebeln.
****      ls_rollo-posicion = ls_datos-ebelp.
****      ls_rollo-aufnr = ls_datos-aufnr.
****      ls_rollo-charg = ls_datos-charg.
****      ls_rollo-diametro = ls_datos-diametro.
****      ls_rollo-tornada = ls_datos-n_tor.
****      ls_rollo-peso = ls_datos-peso.
****
****      CALL FUNCTION 'ZMFPP_ETIQ_ROLLO'
****        EXPORTING
****          i_rollo      = ls_rollo
***** GST - 29/09/2015 ->
****          i_reimp_peso = 'X'.
***** GST - 29/09/2015 <-


      CLEAR ls_rollo_n.
      ls_rollo_n-werks     = ls_datos-werks.
      ls_rollo_n-matnr     = ls_datos-matnr.
      ls_rollo_n-kunnr     = ls_datos-kunnr.
      ls_rollo_n-kunnr     = ls_datos-kunnr.
      ls_rollo_n-diametro  = ls_datos-diametro.
      ls_rollo_n-charg     = ls_datos-charg.
      ls_rollo_n-pedido    = ls_datos-ebeln.
      ls_rollo_n-posicion  = ls_datos-ebelp.
      ls_rollo_n-tornada   = ls_datos-n_tor.
      ls_rollo_n-aufnr     = ls_datos-aufnr.
      ls_rollo_n-peso      = ls_datos-peso.
      ls_rollo_n-charg     = ls_datos-charg.
      ls_rollo_n-charg     = ls_datos-charg.

      SELECT SINGLE *
        INTO @DATA(ls_aufk)
        FROM aufk
        WHERE aufnr = @ls_datos-aufnr.

      ls_rollo_n-zzebeln1 = |{ ls_aufk-zzebeln1 ALPHA = OUT }| .
      ls_rollo_n-zzebeln2 = |{ ls_aufk-zzebeln2 ALPHA = OUT }| .
      ls_rollo_n-zzebeln3 = |{ ls_aufk-zzebeln3 ALPHA = OUT }| .
      ls_rollo_n-zzebelp1 = |{ ls_aufk-zzebelp1 ALPHA = OUT }| .
      ls_rollo_n-zzebelp2 = |{ ls_aufk-zzebelp2 ALPHA = OUT }| .
      ls_rollo_n-zzebelp3 = |{ ls_aufk-zzebelp3 ALPHA = OUT }| .
      ls_rollo_n-zzrepart1 = |{ ls_aufk-zzurgt1 ALPHA = OUT }| .
      ls_rollo_n-zzrepart2 = |{ ls_aufk-zzurgt2 ALPHA = OUT }| .
      ls_rollo_n-zzrepart3 = |{ ls_aufk-zzurgt3 ALPHA = OUT }| .

      ls_rollo_n-zzkunnr1 = ls_aufk-zzkunnr1.
      ls_rollo_n-zzkunnr2 = ls_aufk-zzkunnr2.
      ls_rollo_n-zzkunnr3 = ls_aufk-zzkunnr3.

      SELECT SINGLE zzancho1 , zzancho2 , zzancho3
        FROM ztpp0009
        INTO ( @ls_rollo_n-zzancho1 , @ls_rollo_n-zzancho2 , @ls_rollo_n-zzancho3 )
        WHERE werks         = @ls_rollo_n-werks
              AND aufnr     = @ls_rollo_n-aufnr.
*          AND num_fabr  = @gv_num_fabr.
*
      CALL FUNCTION 'ZMFPP_ETIQ_ROLLO_ALTA'
        EXPORTING
          i_rollo      = ls_rollo_n
          i_reimp_peso = 'X'
          i_nodialog   = ' '.
*    IMPORTING
*      o_printparms = gs_printparms
*      o_rc         = p_rc.

* FIN 09/02/2021 - 65240 - CMS - Llamar a la nueva Impresión de Etiqueta ROLLO


    ELSEIF ls_datos-auart = 'ZI02'. " Bobina

      IF ls_datos-bwart EQ '101'.

        " Datos para llamar a la función bobina:
        ls_bobina-matnr = ls_datos-matnr.
        ls_bobina-werks = ls_datos-werks.
        ls_bobina-charg = ls_datos-charg.
        ls_bobina-aufnr = ls_datos-aufnr.
        ls_bobina-peso = ls_datos-peso.
*YTG- 08/09/2016
        ls_bobina-werks_ent = ls_datos-werks.
*        ls_bobina-arbpl_ent = p_arbpl.
** YTG- 08/09/2016


* Impresión manual
* CMS 28/04/2021 - Según el parámetro seleccionado, lanzar impr.automática o manual.

        DATA: l_tp_impresion TYPE flag.
        CASE 'X'.
          WHEN p_im_man. l_tp_impresion = ' '.
          WHEN p_im_aut. l_tp_impresion = 'X'.
          WHEN OTHERS.
        ENDCASE.

        CALL FUNCTION 'ZMFPP_ETIQ_BOBINA'
          EXPORTING
            i_bobina          = ls_bobina
            i_reimp_peso      = 'X'
            i_impr_automatica = l_tp_impresion.

      ELSEIF ls_datos-bwart EQ '531'.

        " Datos para llamar a la función bobina:
        ls_bobina_pulper-matnr           = ls_datos-matnr.
        ls_bobina_pulper-werks           = ls_datos-werks.
        ls_bobina_pulper-lgort           = ls_datos-lgort .
        ls_bobina_pulper-charg           = ls_datos-charg.
        ls_bobina_pulper-aufnr           = ls_datos-aufnr.
        ls_bobina_pulper-peso            = ls_datos-peso.
        ls_bobina_pulper-kunnr           = ls_datos-kunnr.
        ls_bobina_pulper-diametro        = ls_datos-diametro.
        ls_bobina_pulper-fec_fabricacion = ls_datos-f_fab .
        ls_bobina_pulper-longitud        = ls_datos-longitud.
        ls_bobina_pulper-pedido          = ls_datos-ebeln.
        ls_bobina_pulper-posicion        = ls_datos-ebelp.

        SELECT SINGLE afko~plnbez INTO (ls_bobina_pulper-plnbez)
        FROM aufk
        INNER JOIN afko ON afko~aufnr = aufk~aufnr
        WHERE aufk~aufnr = ls_datos-aufnr.

        CONCATENATE ls_bobina_pulper-matnr ls_bobina_pulper-charg INTO ls_bobina_pulper-cod_barras.


* CMS 28/04/2021 - Según el parámetro seleccionado, lanzar impr.automática o manual.
        CASE 'X'.
          WHEN p_im_man. l_tp_impresion = ' '.
          WHEN p_im_aut. l_tp_impresion = 'X'.
          WHEN OTHERS.
        ENDCASE.
        CALL FUNCTION 'ZMFPP_ETIQ_BOBINA_PULPER'
          EXPORTING
            i_bobina          = ls_bobina_pulper
            i_impr_automatica = l_tp_impresion.

      ENDIF.


    ELSEIF ls_datos-auart = 'ZI05'. " Bobina Reproceso
      " Datos para llamar a la función bobina:
      ls_bobina-matnr = ls_datos-matnr.
      ls_bobina-werks = ls_datos-werks.
      ls_bobina-charg = ls_datos-charg.
      ls_bobina-aufnr = ls_datos-aufnr.
      ls_bobina-peso = ls_datos-peso.
* GST - 08/06/2015 ->
      ls_bobina-kunnr = ls_datos-kunnr.
      ls_bobina-pedido = ls_datos-ebeln.
      ls_bobina-posicion = ls_datos-ebelp.
* GST - 08/06/2015 <-

* YTG- 08/09/2016
      ls_bobina-werks_ent = ls_datos-werks.
*      ls_bobina-arbpl_ent = p_arbpl.
** YTG- 08/09/2016
      CALL FUNCTION 'ZMFPP_ETIQ_BOBINA'
        EXPORTING
          i_bobina          = ls_bobina
          i_impr_automatica = 'X'
* GST - 29/04/2015 ->
          i_reimp_peso      = 'X'.
* GST - 29/04/2015 <-

    ENDIF.

  ENDLOOP.

ENDFORM.                    " IMPRIMIR_ETIQUETA
*&---------------------------------------------------------------------*
*&      Form  F_CARAC_BOBINA_PULPER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_MATNR  text
*      -->P_LS_DATOS_CHARG  text
*      <--P_LS_DATOS_DIAMETRO  text
*      <--P_LS_DATOS_LONGITUD  text
*      <--P_LS_DATOS_F_FAB  text
*----------------------------------------------------------------------*
FORM f_carac_bobina_pulper  USING p_matnr
                                  p_charg
                         CHANGING p_diametro
                                  p_longitud
                                  p_f_fab.

  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        lv_num               TYPE i,
        lv_fec_n             TYPE n LENGTH 8.

* Inicializamos variables:
  CLEAR: p_diametro, p_longitud, p_f_fab.
  CLEAR: lt_alloc_values_num, lt_alloc_values_char, lv_object.
  CLEAR: lt_alloc_values_curr, lt_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.

  CLEAR lv_object.
  CONCATENATE p_matnr p_charg INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA_PULPER'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

  LOOP AT lt_alloc_values_num INTO ls_alloc_values_num.
    CASE ls_alloc_values_num-charact.
        " Diámetro (mm):
      WHEN 'Z_DIAMETRO'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_diametro.
*        REPLACE '.' IN p_diametro WITH space.
        CONDENSE p_diametro.
*      WHEN 'Z_PESO'.
*        CLEAR lv_num.
*        lv_num = ls_alloc_values_num-value_from.
*        WRITE lv_num TO p_peso.
**        REPLACE '.' IN p_peso WITH space.
*        CONDENSE p_peso.
        " Longitud (m):
      WHEN 'Z_LONGITUD_B'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_longitud.
*        REPLACE '.' IN p_longitud WITH space.
        CONDENSE p_longitud.
        " Fecha fabricación:
      WHEN 'Z_FECHA_FABRICACION'.
        CLEAR: lv_num, lv_fec_n.
        lv_num = ls_alloc_values_num-value_from.
        lv_fec_n = lv_num.
        WRITE lv_fec_n TO p_f_fab.
        CONDENSE p_f_fab.
        CONCATENATE p_f_fab+6(2) p_f_fab+4(2) p_f_fab+0(4)
                    INTO p_f_fab SEPARATED BY '.'.
    ENDCASE.

  ENDLOOP.

ENDFORM.                    " F_CARAC_BOBINA_PULPER

* GST - 08/06/2015 ->
*&---------------------------------------------------------------------*
*&      Form  F_CARAC_BOBINA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_MATNR  text
*      -->P_LS_DATOS_CHARG  text
*      <--P_LS_DATOS_DIAMETRO  text
*      <--P_LS_DATOS_PESO  text
*      <--P_LS_DATOS_LONGITUD  text
*      <--P_LS_DATOS_F_FAB  text
*----------------------------------------------------------------------*
FORM f_carac_bobina_reproc  USING    p_matnr
                                     p_charg
                            CHANGING p_diametro
                                     p_longitud
                                     p_f_fab
                                     p_cliente
                                     p_pedido
                                     p_posicion.

  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        lv_num               TYPE i,
        lv_fec_n             TYPE n LENGTH 8.

* Inicializamos variables:
  CLEAR: p_diametro, p_longitud, p_f_fab.
  CLEAR: p_cliente, p_pedido, p_posicion.
  CLEAR: lt_alloc_values_num, lt_alloc_values_char, lv_object.
  CLEAR: lt_alloc_values_curr, lt_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.

  CLEAR lv_object.
  CONCATENATE p_matnr p_charg INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.


  LOOP AT lt_alloc_values_char INTO ls_alloc_values_char.
    CASE ls_alloc_values_char-charact.
      WHEN 'Z_CLIENTE'.
        CONDENSE ls_alloc_values_char-value_char.
        p_cliente = ls_alloc_values_char-value_char.
      WHEN 'Z_PEDIDO'.
        CONDENSE ls_alloc_values_char-value_char.
        p_pedido = ls_alloc_values_char-value_char.
      WHEN 'Z_POSICION'.
        CONDENSE ls_alloc_values_char-value_char.
        p_posicion = ls_alloc_values_char-value_char.
    ENDCASE.
  ENDLOOP.

  LOOP AT lt_alloc_values_num INTO ls_alloc_values_num.
    CASE ls_alloc_values_num-charact.
        " Diámetro (mm):
      WHEN 'Z_DIAMETRO'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_diametro.
*        REPLACE '.' IN p_diametro WITH space.
        CONDENSE p_diametro.
*      WHEN 'Z_PESO'.
*        CLEAR lv_num.
*        lv_num = ls_alloc_values_num-value_from.
*        WRITE lv_num TO p_peso.
**        REPLACE '.' IN p_peso WITH space.
*        CONDENSE p_peso.
        " Longitud (m):
      WHEN 'Z_LONGITUD_B'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_longitud.
*        REPLACE '.' IN p_longitud WITH space.
        CONDENSE p_longitud.
        " Fecha fabricación:
      WHEN 'Z_FECHA_FABRICACION'.
        CLEAR: lv_num, lv_fec_n.
        lv_num = ls_alloc_values_num-value_from.
        lv_fec_n = lv_num.
        WRITE lv_fec_n TO p_f_fab.
        CONDENSE p_f_fab.
        CONCATENATE p_f_fab+6(2) p_f_fab+4(2) p_f_fab+0(4)
                    INTO p_f_fab SEPARATED BY '.'.
    ENDCASE.

  ENDLOOP.

ENDFORM.                    " F_CARAC_BOBINA

* GST - 08/06/2015 <-
*&---------------------------------------------------------------------*
*&      Form  OCULTAR_CAMPOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LT_HIDE_FIELDS  text
*----------------------------------------------------------------------*
FORM ocultar_campos  CHANGING pt_hide_fields TYPE re_t_fieldname.

  DATA: ls_hide_fields TYPE recafieldname.

  REFRESH: pt_hide_fields.
  CLEAR: pt_hide_fields.

  " Ocultar almacén:
  CLEAR ls_hide_fields.
  ls_hide_fields = 'LGORT'.
  APPEND ls_hide_fields TO pt_hide_fields.

  " Ocultar centro:
  CLEAR ls_hide_fields.
  ls_hide_fields = 'WERKS'.
  APPEND ls_hide_fields TO pt_hide_fields.

  " Ocultar gramaje:
  CLEAR ls_hide_fields.
  ls_hide_fields = 'ZZGRAMAJE'.
  APPEND ls_hide_fields TO pt_hide_fields.

  " Ocultar ancho:
  CLEAR ls_hide_fields.
  ls_hide_fields = 'ZZANCHO'.
  APPEND ls_hide_fields TO pt_hide_fields.

  " Ocultar longitud:
  CLEAR ls_hide_fields.
  ls_hide_fields = 'LONGITUD'.
  APPEND ls_hide_fields TO pt_hide_fields.

  " Ocultar Fecha fabricación:
  CLEAR ls_hide_fields.
  ls_hide_fields = 'F_FAB'.
  APPEND ls_hide_fields TO pt_hide_fields.

ENDFORM.                    " OCULTAR_CAMPOS
*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion_sel .

  DATA: ls_werks LIKE LINE OF so_werks,
        lv_werks TYPE         werks_d.

  CLEAR: ls_werks, lv_werks.
  SELECT SINGLE parva FROM usr05
      INTO lv_werks
      WHERE bname = sy-uname AND
      parid = 'WRK'.

  IF lv_werks IS NOT INITIAL.
    ls_werks-sign = 'I'.
    ls_werks-option = 'EQ'.
    ls_werks-low = lv_werks.
    APPEND ls_werks TO so_werks.
  ENDIF.

ENDFORM.                    " INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*&      Form  VALIDACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_SO_AUFNR  text
*----------------------------------------------------------------------*
*FORM validacion."  USING  so_aufnr.
*  DATA: ls_resp TYPE c.
*  DATA: lv_arbpl TYPE arbpl.
*  DATA: lv_order_objects TYPE bapi_pi_order_objects,
*        ls_datos         LIKE LINE OF gt_datos,
*        lv_error_pt      TYPE xfeld,
*  it_phase type standard table of bapi_order_phase,
*  wa_phase type bapi_order_phase.
*
**  lv_order_objects-header     = 'X'.
**  lv_order_objects-phases     = 'X'.
**
**  DATA: ls_datos         LIKE LINE OF gt_datos,
**        ls_bobina        TYPE         zspp_etiq_bobina,
**        ls_bobina_pulper TYPE         zspp_etiq_bobina_pulper,
**        ls_rollo         TYPE         zspp_etiq_rollo.
*  CLEAR: lv_error_pt.
*  LOOP AT gt_datos INTO ls_datos.
*
*    CALL FUNCTION 'BAPI_PROCORD_GET_DETAIL'
*    EXPORTING
*      number                 = ls_datos-aufnr
**     COLLECTIVE_ORDER       =
*      order_objects         =  lv_order_objects
**   IMPORTING
**     RETURN                 =
*   TABLES
**     HEADER                 =
**     POSITION               =
**     SEQUENCE               =
*     phase                   = it_phase
**     TRIGGER_POINT          =
**     COMPONENT              =
**     PROD_REL_TOOL          =
*            .
*    READ TABLE it_phase WITH KEY resource = p_arbpl
*    TRANSPORTING NO FIELDS.
*
*    IF  sy-subrc <> 0.
*      lv_error_pt = 'X'.
*      EXIT.
*    ENDIF.
*
*
*  ENDLOOP.
*
*  IF lv_error_pt = 'X'.
*    CALL FUNCTION 'POPUP_TO_CONFIRM_STEP'
*      EXPORTING
*       defaultoption        = 'Y'
*       textline1            = 'Al menos en una de las ordenes el puesto de trabajo no coincide.'(013)
*       textline2            = '¿Desea continuar?'(014)
*        start_column         = 25
*        start_row            = 6
*        titel               = 'Confirmar puesto de trabajo'
*        cancel_display      = ''
*     IMPORTING
*      answer               = ls_resp .
*
*    IF  ls_resp = 'N'.
*      MESSAGE s111(zpp) DISPLAY LIKE 'E'.
*      STOP.
*    ENDIF.
*  ENDIF.
*
*ENDFORM.                    " VALIDACION
