*----------------------------------------------------------------------*
***INCLUDE ZRPP0075_MONTAR_ALV_INFF01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  MONTAR_ALV_INF
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM montar_alv_sup .

  IF gs_dyn100-cont_sup IS NOT BOUND.

    CREATE OBJECT gs_dyn100-cont_sup
      EXPORTING
        container_name              = 'GS_DYN100-CONT_SUP'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.
        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn100-cont_sup
            container_name = 'GS_DYN100-CONT_SUP'
          IMPORTING
            r_salv_table   = gs_dyn100-alv_sup
          CHANGING
            t_table        = gt_stock_cli_mat.
      CATCH cx_root .
    ENDTRY.

    PERFORM tunning_alv_sup.

    gs_dyn100-alv_sup->display( ).
  ELSE.
    gs_dyn100-alv_sup->refresh( ).

  ENDIF.


ENDFORM.
FORM montar_alv_inf .

  IF gs_dyn100-cont_inf IS NOT BOUND.

    CREATE OBJECT gs_dyn100-cont_inf
      EXPORTING
        container_name              = 'GS_DYN100-CONT_INF'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.
        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn100-cont_inf
            container_name = 'GS_DYN100-CONT_INF'
          IMPORTING
            r_salv_table   = gs_dyn100-alv_inf
          CHANGING
            t_table        = gt_rep_abie[].
      CATCH cx_root .
    ENDTRY.

    PERFORM tunning_alv_inf.

    gs_dyn100-alv_inf->display( ).
  ELSE.
    gs_dyn100-alv_inf->refresh( ).

  ENDIF.


ENDFORM.

FORM tunning_alv_sup.


  DATA: lr_functions  TYPE REF TO cl_salv_functions_list,
        lo_selections TYPE REF TO cl_salv_selections,
        l_text        TYPE string.
  DATA: lv_key    TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout TYPE REF TO cl_salv_layout.
  DATA: lr_columns       TYPE REF TO cl_salv_columns,
        lr_column        TYPE REF TO cl_salv_column_table,
        lr_columns_table TYPE REF TO cl_salv_columns_table.

  DATA: lr_events TYPE REF TO cl_salv_events_table.

* Activamos el evento doble-click.
  lr_events = gs_dyn100-alv_sup->get_event( ).
  CREATE OBJECT gr_events_100.
  SET HANDLER gr_events_100->on_double_click FOR lr_events.
  SET HANDLER gr_events_100->on_user_command FOR lr_events.

  lo_selections = gs_dyn100-alv_sup->get_selections( ).
  lo_selections->set_selection_mode( cl_salv_selections=>single ).

  lv_key-report = |{ sy-repid }_sup|.
  lo_layout = gs_dyn100-alv_sup->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn100-alv_sup->get_functions( ).
  lr_functions->set_all( 'X' ).

  TRY.
      l_text = 'Repartos abiertos'.
      lr_functions->add_function(
        name     = 'VER_REPARTOS'
        icon     = '@3D@' "space
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.

  lr_columns = gs_dyn100-alv_sup->get_columns( ).
  lr_columns->set_optimize( 'X' ).

* Definir columna color.
  TRY.
      lr_columns_table ?= gs_dyn100-alv_sup->get_columns( ).
      lr_columns_table->set_color_column( 'T_COLOR' ).
    CATCH cx_salv_data_error.                           "#EC NO_HANDLER
  ENDTRY.


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'DESC_CLI' ).
*      lr_column->set_visible( abap_false ).
      lr_column->set_short_text( value  = 'Desc.clien' ).
      lr_column->set_medium_text( value  = 'Descrip. cliente' ).
      lr_column->set_long_text( value  = 'Descripción cliente' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE_A' ).
      lr_column->set_short_text( value  = 'Kg. DE = A' ).
      lr_column->set_medium_text( value  = 'Kg. DE = A' ).
      lr_column->set_long_text( value  = 'Kg. DE = A' ).

      DATA: ls_color TYPE lvc_s_colo.
      CLEAR ls_color.
      ls_color-col = 5.
      ls_color-int = 0.
      ls_color-inv = 0.

      lr_column->set_color( ls_color ).


    CATCH cx_salv_not_found .
  ENDTRY.


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE_R' ).
      lr_column->set_short_text( value  = 'Kg. DE = R' ).
      lr_column->set_medium_text( value  = 'Kg. DE = R' ).
      lr_column->set_long_text( value  = 'Kg. DE = R' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE_SIN' ).
      lr_column->set_short_text( value  = 'Kg.sin as.' ).
      lr_column->set_medium_text( value  = 'Kg. sin asignar' ).
      lr_column->set_long_text( value  = 'Kg. sin asignar' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE_P' ).
      lr_column->set_short_text( value  = 'Kg. DE P' ).
      lr_column->set_medium_text( value  = 'Kg. DE = P' ).
      lr_column->set_long_text( value  = 'Kg. DE = P' ).
    CATCH cx_salv_not_found .
  ENDTRY.
ENDFORM.
FORM tunning_alv_inf.

  DATA: lr_functions  TYPE REF TO cl_salv_functions_list,
        lo_selections TYPE REF TO cl_salv_selections,
        l_text        TYPE string.
  DATA: lv_key    TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout TYPE REF TO cl_salv_layout.
  DATA: lr_columns TYPE REF TO cl_salv_columns,
        lr_column  TYPE REF TO cl_salv_column_table.

  DATA: lr_events TYPE REF TO cl_salv_events_table.
*  lr_events = gs_dyn200-alv->get_event( ).

  lo_selections = gs_dyn100-alv_inf->get_selections( ).
*  lo_selections->set_selection_mode( cl_salv_selections=>multiple ).
  lo_selections->set_selection_mode( cl_salv_selections=>single ).

*  CREATE OBJECT gr_events_200.
*  SET HANDLER gr_events_200->on_user_command FOR lr_events.


  lv_key-report = |{ sy-repid }_inf|.
  lo_layout = gs_dyn100-alv_inf->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn100-alv_inf->get_functions( ).
  lr_functions->set_all( 'X' ).


  lr_columns = gs_dyn100-alv_inf->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VBELN' ).
      lr_column->set_short_text( value  = 'Pedido' ).
      lr_column->set_medium_text( value  = 'Pedido' ).
      lr_column->set_long_text( value  = 'Pedido' ).
    CATCH cx_salv_not_found .
  ENDTRY.


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FECHA_ENT' ).
      lr_column->set_short_text( value  = 'F.entrega' ).
      lr_column->set_medium_text( value  = 'Fecha entrega' ).
      lr_column->set_long_text( value  = 'Fecha entrega' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE_PED' ).
      lr_column->set_short_text( value  = 'Cant.repar' ).
      lr_column->set_medium_text( value  = 'Cant.reparto' ).
      lr_column->set_long_text( value  = 'Cantidad reparto' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE_PTE' ).
      lr_column->set_short_text( value  = 'Cant.pend' ).
      lr_column->set_medium_text( value  = 'Cant.pendiente' ).
      lr_column->set_long_text( value  = 'Cantidad pendiente' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE_TEO' ).
      lr_column->set_short_text( value  = 'Kg.plan OF' ).
      lr_column->set_medium_text( value  = 'Kg.planificados OF' ).
      lr_column->set_long_text( value  = 'Kg.planificados OF' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'AUFNR_BOB' ).
      lr_column->set_short_text( value  = 'OF bobina' ).
      lr_column->set_medium_text( value  = 'OF bobina' ).
      lr_column->set_long_text( value  = 'OF bobina' ).
    CATCH cx_salv_not_found .
  ENDTRY.


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE_FAB' ).
      lr_column->set_short_text( value  = 'Kg.fabr OF' ).
      lr_column->set_medium_text( value  = 'Kg. fabricados OF' ).
      lr_column->set_long_text( value  = 'Kg. fabricados OF' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE_PTE_OF' ).
      lr_column->set_short_text( value  = 'Kg.pend OF' ).
      lr_column->set_medium_text( value  = 'Kg.pendiente OF' ).
      lr_column->set_long_text( value  = 'Kg.pendiente OF' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TP_PEDIDO' ).
      lr_column->set_visible( abap_false ).
    CATCH cx_salv_not_found .
  ENDTRY.


ENDFORM.

FORM refresh_pedidos_abie_cli USING p_kunnr TYPE kunnr
                                    p_desc_cli TYPE char30
                                    p_matnr TYPE matnr
                                    p_maktx TYPE maktx
                                    p_row   TYPE i.

  DATA: l_row TYPE i.

  gs_dyn100-kunnr    = p_kunnr.
  gs_dyn100-desc_cli = p_desc_cli.
  gs_dyn100-matnr    = p_matnr.
  gs_dyn100-maktx    = p_maktx.

  CALL METHOD zclpp_creacion_ofs=>get_pedidos_abiertos
    EXPORTING
      i_werks              = g_werks
      i_kunnr              = p_kunnr
      i_matnr              = p_matnr
    IMPORTING
      ot_repartos_abiertos = gt_rep_abie.


*Pintar "linea seleccionada" en ALV
  CLEAR l_row.
  LOOP AT gt_stock_cli_mat ASSIGNING FIELD-SYMBOL(<fs_stock>).

    CLEAR <fs_stock>-t_color.
    l_row = l_row + 1.

    IF l_row = p_row.
      APPEND INITIAL LINE TO <fs_stock>-t_color ASSIGNING FIELD-SYMBOL(<fs_color>).
      <fs_color>-color-col = 3.
      <fs_color>-color-int = 0.
      <fs_color>-color-inv = 0.
    ENDIF.

  ENDLOOP.

  gs_dyn100-alv_sup->refresh( ).

  cl_gui_cfw=>set_new_ok_code( 'VOID' ).

  cl_gui_cfw=>flush( ).

ENDFORM.

FORM handle_user_command USING i_ucomm TYPE salv_de_function.

  DATA: lt_rows TYPE salv_t_row.
  DATA: l_kunnr    TYPE kunnr,
        l_desc_cli TYPE char30,
        l_matnr    TYPE matnr,
        l_maktx    TYPE maktx.

  CASE i_ucomm.

    WHEN 'VER_REPARTOS'.

        PERFORM obtener_seleccion USING gs_dyn100-alv_sup CHANGING lt_rows.
      IF lt_rows IS INITIAL.
        MESSAGE |Seleccionar material/cliente.| TYPE 'I'.
        EXIT.
      ENDIF.

      TRY.
          DATA(row) = lt_rows[ 1 ].
          l_kunnr    = gt_stock_cli_mat[ row ]-kunnr.
          l_matnr    = gt_stock_cli_mat[ row ]-matnr.
          l_desc_cli = gt_stock_cli_mat[ row ]-desc_cli.
          l_maktx    = gt_stock_cli_mat[ row ]-maktx.

          PERFORM refresh_pedidos_abie_cli USING l_kunnr l_desc_cli
                                                 l_matnr l_maktx row.

        CATCH cx_root .
      ENDTRY.
*    WHEN 'REPLAN'.
*      PERFORM tratar_replanificar_of.
    WHEN OTHERS.
  ENDCASE.

  CLEAR gs_dyn100-ok_code.


ENDFORM.

FORM obtener_seleccion  USING p_alv TYPE REF TO cl_salv_table
                        CHANGING p_rows TYPE salv_t_row.

  DATA: lr_selections TYPE REF TO cl_salv_selections.

  lr_selections = p_alv->get_selections( ).
  p_rows       = lr_selections->get_selected_rows( ).

ENDFORM.
