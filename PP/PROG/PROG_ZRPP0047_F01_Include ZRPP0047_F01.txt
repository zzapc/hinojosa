*&---------------------------------------------------------------------*
*&  Include           ZRPP0047_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  LANZAR_PROCESO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM lanzar_proceso .

  DATA: lv_bklas_origen  TYPE bklas,
        lv_bklas_destino TYPE bklas,
        wa_ztpp0028      TYPE ztpp0028,
        l_error          TYPE xfeld,
        it_return        TYPE  bapiret2_t,
        lv_charg         TYPE charg_d.

  DATA:  lv_belnr_343  TYPE mblnr,
         lv_gjahr_343  TYPE mjahr,
         lv_belnr_alta TYPE mblnr,
         lv_gjahr_alta TYPE mjahr,
         lv_belnr_baja TYPE mblnr,
         lv_gjahr_baja TYPE mjahr.


  IF gv_matnr_alta IS INITIAL OR gv_lgort IS INITIAL OR budat IS INITIAL.
*   Rellene todos los campos de la pantalla de selección
    MESSAGE e272(zpp).
  ELSE.
    SELECT SINGLE bklas FROM mbew
      INTO lv_bklas_origen
      WHERE matnr = gv_matnr_int AND
            bwkey = gv_werks.

    IF lv_bklas_origen IS INITIAL.
*     el material origen no tiene Categoría de valoración
      MESSAGE e290(zpp) WITH gv_matnr.
    ELSE.

      SELECT SINGLE bklas FROM mbew
        INTO lv_bklas_destino
        WHERE matnr = gv_matnr_alta_int AND
              bwkey = gv_werks.

      IF lv_bklas_destino IS INITIAL.
*       el material destino no tiene Categoría de valoración
        MESSAGE e290(zpp) WITH gv_matnr_alta.
      ELSE.


        SELECT SINGLE * FROM ztpp0028
          INTO wa_ztpp0028
          WHERE werks = gv_werks AND
                bklas_origen = lv_bklas_origen AND
                bklas_destino = lv_bklas_destino.

        IF gv_cspem = 'X'.
          PERFORM pasar_a_libre CHANGING l_error
                                         it_return
                                         lv_belnr_343
                                         lv_gjahr_343.

          CHECK l_error IS INITIAL.
          PERFORM transformar_material USING wa_ztpp0028
                                       CHANGING l_error
                                                it_return
                                                lv_charg
                                                lv_belnr_alta
                                                lv_gjahr_alta
                                                lv_belnr_baja
                                                lv_gjahr_baja.

        ELSEIF gv_clabs = 'X'.
          PERFORM transformar_material USING wa_ztpp0028
                                       CHANGING l_error
                                                it_return
                                                lv_charg
                                                lv_belnr_alta
                                                lv_gjahr_alta
                                                lv_belnr_baja
                                                lv_gjahr_baja.
        ENDIF.

        IF l_error IS INITIAL.

          CALL FUNCTION 'POPUP_TO_DISPLAY_TEXT'
            EXPORTING
              titel     = 'Transformación PT en MP'
              textline1 = 'Procesado correctamente. Procede a Imprimir etiqueta'
*             TEXTLINE2 = ' '
*             START_COLUMN       = 25
*             START_ROW = 6
            .


          CALL FUNCTION 'ZMFPM_ETIQUETAS_A6'
            EXPORTING
              i_matnr = gv_matnr_alta_int
              i_charg = lv_charg
              i_lsubp = ''
              i_lgra  = 'X'.

        ELSE.
*         anulamos el alta
          PERFORM anular_documento USING lv_belnr_alta
                                         lv_gjahr_alta.

*         anulamos la baja
          PERFORM anular_documento USING lv_belnr_baja
                                         lv_gjahr_baja.

*         anulamos el 343
          PERFORM anular_documento USING lv_belnr_343
                                         lv_gjahr_343.


          CALL FUNCTION 'POPUP_TO_DISPLAY_TEXT'
            EXPORTING
              titel     = 'Transformación PT en MP'
              textline1 = 'Error en el procesamiento. Ver el log de errores'
*             TEXTLINE2 = ' '
*             START_COLUMN       = 25
*             START_ROW = 6
            .
          PERFORM mostrar_log.

        ENDIF.

      ENDIF.
    ENDIF.



**   Proceso finalizado. Consulte el log.
*    MESSAGE e296(zpp).

  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  TRANSFORMAR_MATERIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_ZTPP0028  text
*----------------------------------------------------------------------*
FORM transformar_material  USING   wa_ztpp0028 TYPE ztpp0028
                           CHANGING l_error TYPE xfeld
                                    it_return TYPE  bapiret2_t
                                    p_charg TYPE charg_d
                                    lv_belnr_alta TYPE bapi2017_gm_head_ret-mat_doc
                                    lv_gjahr_alta TYPE bapi2017_gm_head_ret-doc_year
                                    lv_belnr_baja TYPE bapi2017_gm_head_ret-mat_doc
                                    lv_gjahr_baja TYPE bapi2017_gm_head_ret-doc_year.

  PERFORM baja USING   wa_ztpp0028
               CHANGING l_error
                        lv_belnr_baja
                        lv_gjahr_baja
                        it_return.

  CHECK l_error IS INITIAL.

  PERFORM alta USING   wa_ztpp0028
                       lv_belnr_baja
                       lv_gjahr_baja
               CHANGING l_error
                        it_return
                        p_charg
                        lv_belnr_alta
                        lv_gjahr_alta.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PASAR_A_LIBRE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM pasar_a_libre CHANGING l_error
                            it_return TYPE  bapiret2_t
                            l_belnr TYPE mblnr
                            l_gjahr TYPE mjahr.


* declare variables
  DATA: wa_header LIKE bapi2017_gm_head_01,
        it_items  LIKE bapi2017_gm_item_create OCCURS 0 WITH HEADER LINE.

  DATA: lv_extnumber TYPE  balnrext,
        wa_return    TYPE LINE OF bapiret2_t.

  CLEAR wa_header.
  wa_header-pstng_date = budat.
  wa_header-doc_date = budat.

  REFRESH: it_items, it_return.
  CLEAR: l_belnr, l_gjahr, l_error.

  SELECT SINGLE meins FROM mara
    INTO it_items-entry_uom
    WHERE matnr = gv_matnr_int.

  it_items-material = gv_matnr_int.
  it_items-plant = gv_werks.

  SELECT SINGLE lgort FROM mchb
   INTO it_items-stge_loc
   WHERE matnr = gv_matnr_int AND
         werks = gv_werks AND
         charg = gv_charg AND
         ( clabs > 0 OR cspem > 0 ).

  it_items-batch = gv_charg.
  it_items-move_type = '343'.
  it_items-entry_qnt = gv_menge.

  it_items-move_mat   = gv_matnr_int. " Material de destino
  it_items-move_plant = gv_werks. " Centro de destino
  it_items-move_stloc = it_items-stge_loc.        " Almacén de destino
  it_items-move_batch = gv_charg.


  APPEND it_items.


**  Call BAPI Goods movement
  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = wa_header
      goodsmvt_code    = '04'
*     testrun          = l_test
    IMPORTING
*     goodsmvt_headret = wa_header1
      materialdocument = l_belnr
      matdocumentyear  = l_gjahr
    TABLES
      goodsmvt_item    = it_items
      return           = it_return.

  CLEAR l_error.

  LOOP AT it_return INTO wa_return WHERE type = 'E'.
    l_error = 'X'.
    EXIT.
  ENDLOOP.

  IF l_error = 'X'.
    CLEAR lv_extnumber.

    CONCATENATE 'Error en el 343 con el material' gv_matnr 'y el lote' gv_charg
    INTO lv_extnumber SEPARATED BY space.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZPP'
        subobjeto = sy-tcode
        mensajes  = it_return[]
        extnumber = lv_extnumber.

    APPEND LINES OF it_return TO gt_messages.

  ELSE.
*   call commit bapi.
    CLEAR : it_return.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = l_belnr
      IMPORTING
        output = l_belnr.

*   guardamos el log en una tabla interna para que cuando se finalice el proceso, el usuario
*   pueda ver el log generado
    gs_messages-type  = 'S'.
    gs_messages-id  = 'ZPP'.
    gs_messages-number = '292'.
    gs_messages-message_v1 = gv_matnr_ext.
    gs_messages-message_v2  = gv_charg.
    gs_messages-message_v3 = l_belnr.
    gs_messages-message_v4 = l_gjahr.

    APPEND gs_messages TO gt_messages.
  ENDIF.




ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  BAJA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_ZTPP0028  text
*----------------------------------------------------------------------*
FORM baja  USING    wa_ztpp0028 TYPE ztpp0028
           CHANGING l_error TYPE xfeld
                    l_belnr_baja TYPE bapi2017_gm_head_ret-mat_doc
                    l_gjahr_baja TYPE bapi2017_gm_head_ret-doc_year
                    it_return TYPE  bapiret2_t.

* declare variables
  DATA: wa_header LIKE bapi2017_gm_head_01,
        it_items  LIKE bapi2017_gm_item_create OCCURS 0 WITH HEADER LINE.

  DATA: lv_extnumber TYPE  balnrext,
        wa_return    TYPE LINE OF bapiret2_t.

* assign variables
  CLEAR wa_header.
  wa_header-pstng_date = budat.
  wa_header-doc_date = budat.


  REFRESH: it_items, it_return.
  CLEAR: l_error.

  it_items-material = gv_matnr_int.
  it_items-plant = gv_werks.

  SELECT SINGLE lgort FROM mchb
    INTO it_items-stge_loc
    WHERE matnr = gv_matnr_int AND
          werks = gv_werks AND
          charg = gv_charg AND
          ( clabs > 0 OR cspem > 0 ).

  it_items-batch = gv_charg.
  it_items-entry_qnt = gv_menge.

  SELECT SINGLE meins FROM mara
    INTO it_items-entry_uom
    WHERE matnr = gv_matnr_int.

  it_items-orderid = wa_ztpp0028-aufnr_origen.
  it_items-move_type = wa_ztpp0028-bwart_origen.
  it_items-move_reas = wa_ztpp0028-grund_origen.

  CONCATENATE 'Transformación de' gv_matnr_ext 'a' gv_matnr_alta_ext INTO it_items-item_text
    SEPARATED BY space.

  APPEND it_items.



* Call BAPI Goods movement
  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = wa_header
      goodsmvt_code    = '06'
*     testrun          = l_test
    IMPORTING
*     goodsmvt_headret = wa_header1
      materialdocument = l_belnr_baja
      matdocumentyear  = l_gjahr_baja
    TABLES
      goodsmvt_item    = it_items
      return           = it_return.

  CLEAR l_error.

  LOOP AT it_return INTO wa_return WHERE type = 'E'.
    l_error = 'X'.
    EXIT.
  ENDLOOP.

  IF l_error = 'X'.
    CLEAR lv_extnumber.

    CONCATENATE 'Transformación de' gv_matnr_ext 'a' gv_matnr_alta_ext
    INTO lv_extnumber SEPARATED BY space.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZPP'
        subobjeto = sy-tcode
        mensajes  = it_return[]
        extnumber = lv_extnumber.

    APPEND LINES OF it_return TO gt_messages.

  ELSE.
*   call commit bapi.
    CLEAR : it_return.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = l_belnr_baja
      IMPORTING
        output = l_belnr_baja.

*   guardamos el log en una tabla interna para que cuando se finalice el proceso, el usuario
*   pueda ver el log generado
    gs_messages-type  = 'S'.
    gs_messages-id  = 'ZPP'.
    gs_messages-number = '293'. "Baja: Transformación de & a & (documento & / &.)
    gs_messages-message_v1 = gv_matnr_ext.
    gs_messages-message_v2  = gv_matnr_alta_ext.
    gs_messages-message_v3 = l_belnr_baja.
    gs_messages-message_v4 = l_gjahr_baja.

    APPEND gs_messages TO gt_messages.
  ENDIF.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ALTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_ZTPP0028  text
*----------------------------------------------------------------------*
FORM alta  USING    wa_ztpp0028 TYPE ztpp0028
                    l_belnr_baja TYPE bapi2017_gm_head_ret-mat_doc
                    l_gjahr_baja TYPE bapi2017_gm_head_ret-doc_year
           CHANGING l_error TYPE xfeld
                    it_return TYPE  bapiret2_t
                    p_charg TYPE charg_d
                    l_belnr_alta TYPE bapi2017_gm_head_ret-mat_doc
                    l_gjahr_alta TYPE bapi2017_gm_head_ret-doc_year.


* declare variables
  DATA: wa_header LIKE bapi2017_gm_head_01,
        it_items  LIKE bapi2017_gm_item_create OCCURS 0 WITH HEADER LINE.

  DATA: lv_extnumber TYPE  balnrext,
        wa_return    TYPE LINE OF bapiret2_t.

  DATA: lv_meins_origen  TYPE meins,
        lv_meins_destino TYPE meins,
        lt_marm          TYPE STANDARD TABLE OF marm,
        wa_marm          TYPE marm.

* assign variables
  CLEAR wa_header.
  wa_header-pstng_date = budat.
  wa_header-doc_date = budat.


  REFRESH: it_items, it_return.
  CLEAR: l_error.

  it_items-material = gv_matnr_alta_int.
  it_items-plant = gv_werks.
  it_items-stge_loc = gv_lgort.
  it_items-batch = gv_batch_d.

  SELECT SINGLE meins FROM mara
    INTO lv_meins_origen
    WHERE matnr = gv_matnr_int.

  IF gv_menge_alta IS INITIAL.
    SELECT SINGLE meins FROM mara
      INTO lv_meins_destino
      WHERE matnr = gv_matnr_alta_int.

    IF lv_meins_origen = lv_meins_destino.
      it_items-entry_qnt = gv_menge.
    ELSE. "convertimos la cantidad a la unidad de medida del material que damos de alta
      SELECT * FROM marm
        INTO TABLE lt_marm
        WHERE matnr = gv_matnr_int.

      READ TABLE lt_marm INTO wa_marm WITH KEY meinh = lv_meins_destino.
      IF sy-subrc = 0.
        it_items-entry_qnt = gv_menge * ( wa_marm-umren / wa_marm-umrez ).
      ENDIF.
    ENDIF.
  ELSE.
    it_items-entry_qnt = gv_menge_alta.
  ENDIF.


  it_items-entry_uom = lv_meins_destino.
  it_items-orderid = wa_ztpp0028-aufnr_destino.
  it_items-move_type = wa_ztpp0028-bwart_destino.
  it_items-move_reas = wa_ztpp0028-grund_destino.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = l_belnr_baja
    IMPORTING
      output = l_belnr_baja.

  CONCATENATE 'Transformación desde documento' l_belnr_baja  l_gjahr_baja INTO it_items-item_text
    SEPARATED BY space.
  APPEND it_items.


**  Call BAPI Goods movement
  CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
    EXPORTING
      goodsmvt_header  = wa_header
      goodsmvt_code    = '06'
*     testrun          = l_test
    IMPORTING
*     goodsmvt_headret = wa_header1
      materialdocument = l_belnr_alta
      matdocumentyear  = l_gjahr_alta
    TABLES
      goodsmvt_item    = it_items
      return           = it_return.

  CLEAR l_error.

  LOOP AT it_return INTO wa_return WHERE type = 'E'.
    l_error = 'X'.
    EXIT.
  ENDLOOP.

  IF l_error = 'X'.
    CLEAR lv_extnumber.

    CONCATENATE 'Transformación de' gv_matnr_ext 'a' gv_matnr_alta_ext
    INTO lv_extnumber SEPARATED BY space.

    CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
      EXPORTING
        objeto    = 'ZPP'
        subobjeto = sy-tcode
        mensajes  = it_return[]
        extnumber = lv_extnumber.


    APPEND LINES OF it_return TO gt_messages.

  ELSE.
*   call commit bapi.
    CLEAR : it_return.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.


    SELECT SINGLE charg FROM mseg
    INTO p_charg
    WHERE mblnr = l_belnr_alta AND
          mjahr = l_gjahr_alta.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = l_belnr_alta
      IMPORTING
        output = l_belnr_alta.

*   guardamos el log en una tabla interna para que cuando se finalice el proceso, el usuario
*   pueda ver el log generado
    gs_messages-type  = 'S'.
    gs_messages-id  = 'ZPP'.
    gs_messages-number = '294'. "Alta: Transformación de & a & (documento & / &.)
    gs_messages-message_v1 = gv_matnr_ext.
    gs_messages-message_v2  = gv_matnr_alta_ext.
    gs_messages-message_v3 = l_belnr_alta.
    gs_messages-message_v4 = l_gjahr_alta.

    APPEND gs_messages TO gt_messages.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_log .
  IF gt_messages[] IS NOT INITIAL.
    READ TABLE gt_messages INTO gs_messages WITH KEY type = ''.
    IF sy-subrc <> 0.
      CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
        TABLES
          i_bapiret2_tab = gt_messages.
    ELSE.
      MESSAGE 'No hay entradas en el log de mensajes' TYPE 'S'.
    ENDIF.
  ELSE.
    MESSAGE 'No hay entradas en el log de mensajes' TYPE 'S'.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ANULAR_DOCUMENTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_BELNR_ALTA  text
*      -->P_LV_GJAHR_ALTA  text
*----------------------------------------------------------------------*
FORM anular_documento  USING    p_belnr TYPE bapi2017_gm_head_ret-mat_doc
                                p_gjahr TYPE bapi2017_gm_head_ret-doc_year.

  DATA: t_return  TYPE TABLE OF bapiret2,
        wa_return TYPE bapiret2.


  DATA: l_error TYPE xfeld.
  DATA: lv_extnumber TYPE  balnrext.

  IF p_belnr IS NOT INITIAL.
    CLEAR: t_return.
    REFRESH: t_return.

    CALL FUNCTION 'BAPI_GOODSMVT_CANCEL'
      EXPORTING
        materialdocument    = p_belnr
        matdocumentyear     = p_gjahr
        goodsmvt_pstng_date = budat
*       GOODSMVT_PR_UNAME   =
*             IMPORTING
*       GOODSMVT_HEADRET    =
      TABLES
        return              = t_return
*       GOODSMVT_MATDOCITEM =
      .



    CLEAR l_error.

    LOOP AT  t_return INTO wa_return WHERE type = 'E'.
      l_error = 'X'.
      EXIT.
    ENDLOOP.

    IF l_error = 'X'.
      APPEND LINES OF t_return TO gt_messages.

*     guardamos el log en una tabla interna para que cuando se finalice el proceso, el usuario
*     pueda ver el log generado
      gs_messages-type  = 'E'.
      gs_messages-id  = 'ZPP'.
      gs_messages-number = '297'. "Error en la anulación del documento & / &.
      gs_messages-message_v1 = p_belnr.
      gs_messages-message_v2  = p_gjahr.
      APPEND gs_messages TO gt_messages.


      CLEAR lv_extnumber.

      CONCATENATE 'Error en la anulación del documento' p_belnr  '/' p_gjahr
        INTO lv_extnumber SEPARATED BY space.

      CALL FUNCTION 'ZMFPP_GUARDAR_LOG'
        EXPORTING
          objeto    = 'ZPP'
          subobjeto = sy-tcode
          mensajes  = t_return[]
          extnumber = lv_extnumber.


    ELSE.
*   call commit bapi.
      CLEAR : t_return.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = p_belnr
        IMPORTING
          output = p_belnr.

*     guardamos el log en una tabla interna para que cuando se finalice el proceso, el usuario
*     pueda ver el log generado
      gs_messages-type  = 'S'.
      gs_messages-id  = 'ZPP'.
      gs_messages-number = '295'. "Documento anulado & / &.
      gs_messages-message_v1 = p_belnr.
      gs_messages-message_v2  = p_gjahr.

      APPEND gs_messages TO gt_messages.
    ENDIF.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&  Include           ZRPP0049_FORMS
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  F_INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_inicializacion_sel .

  DATA: lv_werks TYPE werks_d.

  IF gv_werks IS INITIAL. " cvivo - 18/02/19 - Incidencia detectada
    CLEAR: lv_werks.
    SELECT SINGLE parva FROM usr05
        INTO lv_werks
        WHERE bname = sy-uname AND
        parid = 'WRK'.

    IF lv_werks IS NOT INITIAL.
      gv_werks = lv_werks.
    ENDIF.
  ENDIF.

ENDFORM.                    " F_INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*&      Form  CALCULAR_CANTIDADES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM calcular_cantidades .

  IF    gv_menge IS NOT INITIAL
    AND gv_meins IS NOT INITIAL
    AND gv_menge_alta IS INITIAL
    AND gv_matnr_alta IS NOT INITIAL.

    SELECT SINGLE meins FROM mara
      INTO lv_meins_destino
      WHERE matnr = gv_matnr_alta_int.

    IF sy-subrc EQ 0.
      IF gv_meins EQ lv_meins_destino.
        gv_menge_alta = gv_menge.
        gv_meins_alta = lv_meins_destino.
      ELSE. "convertimos la cantidad a la unidad de medida del material que damos de alta
        SELECT * FROM marm
          INTO TABLE lt_marm
          WHERE matnr = gv_matnr_int.

        READ TABLE lt_marm INTO wa_marm WITH KEY meinh = lv_meins_destino.
        IF sy-subrc = 0 AND wa_marm-umrez GT 0.
          gv_menge_alta = gv_menge * ( wa_marm-umren / wa_marm-umrez ).
          gv_meins_alta = lv_meins_destino.
          gv_menge_alta_teo = gv_menge_alta. " almacenamos la cantidad teórica
        ENDIF.
      ENDIF.
    ENDIF.
  ELSEIF gv_menge IS NOT INITIAL
    AND gv_meins IS NOT INITIAL
    AND gv_menge_alta IS NOT INITIAL
    AND gv_matnr_alta IS NOT INITIAL
    AND gv_menge_alta_teo IS INITIAL. " si se ha introducido cantidad manualmente, recuperamos la teórica para la tolerancia
    SELECT SINGLE meins FROM mara
      INTO lv_meins_destino
      WHERE matnr = gv_matnr_alta_int.

    IF sy-subrc EQ 0.
      IF gv_meins EQ lv_meins_destino.
      ELSE. "convertimos la cantidad a la unidad de medida del material que damos de alta
        SELECT * FROM marm
          INTO TABLE lt_marm
          WHERE matnr = gv_matnr_int.

        READ TABLE lt_marm INTO wa_marm WITH KEY meinh = lv_meins_destino.
        IF sy-subrc = 0 AND wa_marm-umrez GT 0.
          gv_menge_alta_teo = gv_menge * ( wa_marm-umren / wa_marm-umrez ). " almacenamos la cantidad teórica
          gv_meins_alta = lv_meins_destino.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  TOLERANCIA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM tolerancia .

  IF gv_menge_alta_teo IS NOT INITIAL. "evitamos divisiones por 0
    IF gv_menge_alta NE gv_menge_alta_teo
      AND ( gv_menge_alta * 100 / gv_menge_alta_teo ) < 58. "tolerancia del -40%
      gv_menge_alta = gv_menge_alta_teo * ( 60 / 100 ).
      MESSAGE 'No se permite reducir la cantidad más de un 40%' TYPE 'S'. LEAVE TO SCREEN '0100'.
    ENDIF.
  ENDIF.

ENDFORM.
