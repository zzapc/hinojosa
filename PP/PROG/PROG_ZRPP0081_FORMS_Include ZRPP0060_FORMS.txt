
FORM generar_alv_100.

  IF gs_dyn100-container IS NOT BOUND.

    CREATE OBJECT gs_dyn100-container
      EXPORTING
        container_name              = 'GS_DYN100-CONTAINER'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.
        cl_salv_table=>factory(
          EXPORTING
            r_container    = gs_dyn100-container
            container_name = 'GS_DYN100-CONTAINER'
          IMPORTING
            r_salv_table = go_alv
          CHANGING
            t_table      = gt_desglose_coste_of ).

        PERFORM tunning_alv.

        go_alv->display( ).
      CATCH cx_root .
*     error handling
    ENDTRY.
  ENDIF.

ENDFORM.

FORM handle_user_command100 USING i_ucomm TYPE salv_de_function.

  DATA: lt_rows TYPE salv_t_row.
*        l_rc    TYPE char02.
  DATA: l_answer    TYPE char01,
        ls_mapl     TYPE mapl,
        ls_ztpp0067 TYPE ztpp0067.

  CASE i_ucomm.
    WHEN 'EXE'.

      PERFORM obtener_seleccion_alv100 CHANGING lt_rows.

      CHECK lt_rows IS NOT INITIAL.

      PERFORM popup_confirm USING lt_rows
                            CHANGING l_answer.

      CHECK l_answer = '1'.

      LOOP AT lt_rows INTO DATA(ls_row).

        ASSIGN gt_desglose_coste_of[ ls_row ] TO FIELD-SYMBOL(<fs_reg>).
        IF sy-subrc <> 0.
          CONTINUE.
        ENDIF.

*        CLEAR ls_ztpp0067.
*        ls_ztpp0067 = CORRESPONDING #( <fs_reg> ).
*        ls_ztpp0067-werks = p_werks.
*        ls_ztpp0067-mjahr = p_mjahr.
*        ls_ztpp0067-monat = p_monat.

        CALL METHOD zclpp_traspaso_costes_cabos=>realizar_traspaso_costes_ofs
          IMPORTING
            o_rc        = DATA(l_rc)
          CHANGING
            is_ztpp0067 = <fs_reg>.

        CASE l_rc.
          WHEN '00'.
*        	WHEN .
          WHEN OTHERS.
        ENDCASE.


*        IF l.
*
*        ENDIF.
*            is_ztpp0067 = ls_ztpp0067.

*      MESSAGE |Se han borrado correctamente { lines( lt_rows ) } asignaciones de material.| TYPE 'S'.

      ENDLOOP.

      PERFORM determinar_icono.

      go_alv->refresh( ).


*      PERFORM enqueue USING p_plnnr
*                      CHANGING l_rc.
*

*      IF l_rc <> '00'.
*        MESSAGE |Receta { p_plnnr ALPHA = OUT } bloqueada.| TYPE 'I' DISPLAY LIKE 'E'.
*        EXIT.
*      ENDIF.
*
*      LOOP AT lt_rows INTO DATA(ls_row).
*        TRY.
*
*            ASSIGN gt_datos[ ls_row ] TO FIELD-SYMBOL(<fs_reg>).
*            IF sy-subrc <> 0.
*              MESSAGE |Registro no encontrado.| TYPE 'I' DISPLAY LIKE 'E'.
*              EXIT.
*            ENDIF.
*
*            ls_mapl = CORRESPONDING #( <fs_reg> ).
*
** Borrar registro de tabla y ALV.
*            DELETE mapl     FROM  ls_mapl.
*            DELETE gt_datos INDEX ls_row.
*
*          CATCH cx_root .
*            MESSAGE |Registro no encontrado.| TYPE 'I' DISPLAY LIKE 'E'.
*            EXIT.
*        ENDTRY.
*      ENDLOOP.
*
*      PERFORM dequeue USING p_plnnr.
*
*
  ENDCASE.
ENDFORM.

FORM popup_confirm USING pt_rows TYPE salv_t_row
                  CHANGING p_answer TYPE char01.


  DATA(l_text) = |Se traspasaran { lines( pt_rows ) } OF de cabo a su OF bobina. ¿Desea continuar?|.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
*     TITLEBAR              = ' '
*     DIAGNOSE_OBJECT       = ' '
      text_question         = l_text
      text_button_1         = 'Sí'
      icon_button_1         = '@01@'
      text_button_2         = 'No'
      icon_button_2         = '@0W@'
      default_button        = '2'
      display_cancel_button = ' '
*     USERDEFINED_F1_HELP   = ' '
*     START_COLUMN          = 25
*     START_ROW             = 6
*     POPUP_TYPE            =
*     IV_QUICKINFO_BUTTON_1 = ' '
*     IV_QUICKINFO_BUTTON_2 = ' '
    IMPORTING
      answer                = p_answer
* TABLES
*     PARAMETER             =
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.
  IF sy-subrc <> 0. "or l_answer <> '1'.
    p_answer = 'A'.
* Implement suitable error handling here
  ENDIF.

ENDFORM.

FORM popup_confirm_lock USING  p_plnnr
                  CHANGING p_answer TYPE char01.

  DATA(l_text) = |Hoja de ruta { p_plnnr ALPHA = OUT } bloqueada. ¿Desea continuar?|.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
*     TITLEBAR              = ' '
*     DIAGNOSE_OBJECT       = ' '
      text_question         = l_text
      text_button_1         = 'Sí'
      icon_button_1         = '@11@'
      text_button_2         = 'No'
      icon_button_2         = '@12@'
      default_button        = '2'
      display_cancel_button = ' '
*     USERDEFINED_F1_HELP   = ' '
*     START_COLUMN          = 25
*     START_ROW             = 6
*     POPUP_TYPE            =
*     IV_QUICKINFO_BUTTON_1 = ' '
*     IV_QUICKINFO_BUTTON_2 = ' '
    IMPORTING
      answer                = p_answer
* TABLES
*     PARAMETER             =
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.
  IF sy-subrc <> 0. "or l_answer <> '1'.
    p_answer = 'A'.
* Implement suitable error handling here
  ENDIF.

ENDFORM.

*FORM enqueue USING p_plnnr
*              CHANGING p_rc TYPE char02.
*
*  p_rc = '00'.
*
*  CALL FUNCTION 'ENQUEUE_EPPLKO'
*    EXPORTING
*      plnty          = p_plnty
*      plnnr          = p_plnnr
*    EXCEPTIONS
*      foreign_lock   = 01
*      system_failure = 02.
*  IF sy-subrc NE 0.
*    p_rc = '01'.
*    EXIT.
*  ENDIF.
*
*
*ENDFORM.
*
*
*FORM dequeue USING p_plnnr.
*
*  CALL FUNCTION 'DEQUEUE_EPPLKO'
*    EXPORTING
*      plnty = p_plnty
*      plnnr = p_plnnr.
*
*ENDFORM.
*
FORM obtener_seleccion_alv100 CHANGING p_rows TYPE salv_t_row.
  DATA: lr_selections TYPE REF TO cl_salv_selections.

  lr_selections = go_alv->get_selections( ).
  p_rows       = lr_selections->get_selected_rows( ).

ENDFORM.


FORM tunning_alv.

*  DATA: lo_column               TYPE REF TO cl_salv_column_table.

  DATA: lr_columns   TYPE REF TO cl_salv_columns,
        lr_cols_tab  TYPE REF TO cl_salv_columns_table,
        lr_column    TYPE REF TO cl_salv_column_table,
        l_text       TYPE string,
*        lr_functions TYPE REF TO cl_salv_functions,
        lr_func_list TYPE REF TO cl_salv_functions_list.
  DATA: lr_events TYPE REF TO cl_salv_events_table.

*... §7 selections
  DATA: lr_selections TYPE REF TO cl_salv_selections,
        lv_key        TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout     TYPE REF TO cl_salv_layout,
        lt_rows       TYPE salv_t_row,
        lt_column     TYPE salv_t_column,
        ls_cell       TYPE salv_s_cell.

* Grabar disposición.
  CLEAR lv_key.
  lv_key-report         = sy-repid.
  lv_key-handle         = '1'.
  lo_layout = go_alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).


  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).


  lr_selections = go_alv->get_selections( ).
*
**... §7.1 set selection mode
  lr_selections->set_selection_mode( if_salv_c_selection_mode=>multiple ).

  lr_events = go_alv->get_event( ).
  CREATE OBJECT gr_events.
  SET HANDLER gr_events->on_user_command FOR lr_events.

  lr_func_list = go_alv->get_functions( ).
  lr_func_list->set_all( abap_true ).

  TRY.
      l_text = text-b01.
      lr_func_list->add_function(
        name     = 'EXE'
        icon     = '@15@'
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.


  lr_columns = go_alv->get_columns( ).
  lr_cols_tab = go_alv->get_columns( ).
  lr_columns->set_optimize( 'X' ).
  lr_cols_tab->set_optimize( 'X' ).

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MANDT' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).

      lr_column ?= lr_columns->get_column( columnname = 'WERKS' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).

    CATCH cx_salv_not_found .
  ENDTRY.

* Formateo de columnas.
  DATA:
    lo_column  TYPE REF TO cl_salv_column,
    lo_columns TYPE REF TO cl_salv_columns_table.

  lo_columns = go_alv->get_columns( ).

  TRY.
      lo_column = lo_columns->get_column( 'FECHA_TRASP' ).
      lo_column->set_short_text( 'F.trasp.' ).
      lo_column->set_medium_text( 'Fecha traspaso' ).
*      lo_column->set_long_text( 'Fecha' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'HORA_TRASP' ).
      lo_column->set_short_text( 'H.traspaso' ).
      lo_column->set_medium_text( 'Hora traspaso' ).
*      lo_column->set_long_text( 'Descripción Error' ).

      lr_column ?= lr_columns->get_column( 'ICON' ).
      lr_column->set_icon( if_salv_c_bool_sap=>true ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column = lo_columns->get_column( 'DESCRIP_ERROR' ).
      lo_column->set_short_text( 'Error' ).
      lo_column->set_medium_text( 'Descrip. Error' ).
      lo_column->set_long_text( 'Descripción Error' ).

      lr_column ?= lr_columns->get_column( 'ICON' ).
      lr_column->set_icon( if_salv_c_bool_sap=>true ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'ESTADO' ).
      lo_column->set_short_text( 'Estado' ).
      lo_column->set_medium_text( 'Estado' ).
      lo_column->set_long_text( 'Estado' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'ICON' ).
      lo_column->set_short_text( 'Est.' ).
      lo_column->set_medium_text( 'Estado' ).
      lo_column->set_long_text( 'Estado' ).

      lr_column ?= lr_columns->get_column( 'ICON' ).
      lr_column->set_icon( if_salv_c_bool_sap=>true ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'AUFNR_CABO' ).
      lo_column->set_short_text( 'OF cabo' ).
      lo_column->set_medium_text( 'OF cabo' ).
      lo_column->set_long_text( 'OF cabo' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column = lo_columns->get_column( 'AUFNR_ROLLO' ).
      lo_column->set_short_text( 'OF rollo' ).
      lo_column->set_medium_text( 'OF rollo' ).
      lo_column->set_long_text( 'OF rollo' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column = lo_columns->get_column( 'AUFNR_BOBINA' ).
      lo_column->set_short_text( 'OF bobina' ).
      lo_column->set_medium_text( 'OF bobina' ).
      lo_column->set_long_text( 'OF bobina' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'MATNR_CABO' ).
      lo_column->set_short_text( 'Mat. cabo' ).
      lo_column->set_medium_text( 'Mat. cabo' ).
      lo_column->set_long_text( 'Mat. cabo' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column = lo_columns->get_column( 'MATNR_ROLLO' ).
      lo_column->set_short_text( 'Mat. rollo' ).
      lo_column->set_medium_text( 'Mat. rollo' ).
      lo_column->set_long_text( 'Mat. rollo' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column = lo_columns->get_column( 'MATNR_BOBINA' ).
      lo_column->set_short_text( 'Mat.bobina' ).
      lo_column->set_medium_text( 'Mat. bobina' ).
      lo_column->set_long_text( 'Mat. bobina' ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column = lo_columns->get_column( 'KOKRS' ).
      lo_column->set_short_text( 'Soc. CO' ).
      lo_column->set_medium_text( 'Soc. CO' ).
      lo_column->set_long_text( 'Soc. CO' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'MENGE' ).
      lo_column->set_short_text( 'Cantidad' ).
      lo_column->set_medium_text( 'Cantidad' ).
      lo_column->set_long_text( 'Cantidad' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'LSTAR' ).
      lo_column->set_short_text( 'Actividad' ).
      lo_column->set_medium_text( 'Actividad' ).
      lo_column->set_long_text( 'Actividad' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'KSTAR_SEC' ).
      lo_column->set_short_text( 'Clase liq.' ).
      lo_column->set_medium_text( 'Clase liquidación' ).
      lo_column->set_long_text( 'Clase coste liquidación' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'KSTAR' ).
      lo_column->set_short_text( 'Clase act.' ).
      lo_column->set_medium_text( 'Clase actividad' ).
      lo_column->set_long_text( 'Clase actividad' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'WTGBTR_CABO' ).
      lo_column->set_short_text( 'Coste cabo' ).
      lo_column->set_medium_text( 'Coste cabo' ).
      lo_column->set_long_text( 'Coste cabo' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'WTGBTR_ROLLO' ).
      lo_column->set_short_text( 'Cost.rollo' ).
      lo_column->set_medium_text( 'Coste rollo' ).
      lo_column->set_long_text( 'Coste rollo' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'MENGE_CABO' ).
      lo_column->set_short_text( 'Cant. cabo' ).
      lo_column->set_medium_text( 'Cantidad cabo' ).
      lo_column->set_long_text( 'Cantidad cabo' ).
      lo_column->set_decimals( '0' ).

      lr_column ?= lr_columns->get_column( 'MENGE_CABO' ).
      lr_column->set_decimals( '0' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column = lo_columns->get_column( 'MENGE_ROLLO' ).
      lo_column->set_short_text( 'Cant.rollo' ).
      lo_column->set_medium_text( 'Cantidad rollo' ).
      lo_column->set_long_text( 'Cantidad rollo' ).
    CATCH cx_root .
  ENDTRY.

ENDFORM.


FORM  determinar_icono.

  LOOP AT gt_desglose_coste_of ASSIGNING FIELD-SYMBOL(<fs_reg>).
    CASE <fs_reg>-estado.
      WHEN zclpp_traspaso_costes_cabos=>gc_est_procesado.
        <fs_reg>-icon = |@5B@|.
      WHEN zclpp_traspaso_costes_cabos=>gc_est_reprocesado.
        <fs_reg>-icon = |@5D@|.
      WHEN zclpp_traspaso_costes_cabos=>gc_est_error.
        <fs_reg>-icon = |@5C@|.
*        when ' '.
*          <fs_reg>-icon = |@MA@|.
    ENDCASE.

  ENDLOOP.

ENDFORM.


FORM  print_alv.

*  DATA: t_variant TYPE disvariant.
*
*  gt_alv_print = CORRESPONDING #( gr_proces->gt_ztpp0043 ).
*
*  LOOP AT gt_alv_print ASSIGNING FIELD-SYMBOL(<fs_print>).
*
*    <fs_print>-maktx_mp    = zclpp_recetas_reparto_pulper=>obtener_descr_material( <fs_print>-matnr_mp ).
*    <fs_print>-maktx_rollo = zclpp_recetas_reparto_pulper=>obtener_descr_material( <fs_print>-matnr_rollo ).
*
*  ENDLOOP.
*
** Variante ALV
*  CLEAR t_variant.
*  t_variant-report = sy-repid.
*
*  PERFORM col_alv.
*
** Llamo a la Función que visualiza el ALV
*  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
*    EXPORTING
**     i_structure_name = i_structure_name
*      it_fieldcat = gt_fieldcat_ant
*      i_save      = 'U'
*      is_variant  = t_variant
*    TABLES
**     t_outtab    = gr_proces->gt_ztpp0043.
*      t_outtab    = gt_alv_print.

ENDFORM.

FORM col_alv .

*  DATA: ls_fcat TYPE slis_fieldcat_alv.
*  DATA: lv_tabix TYPE sytabix.
*  DATA: lt_43 TYPE zttpp0043.
*
*  REFRESH: gt_fieldcat_ant.
*
** Pasar tabla interna al formato del fieldcat
*  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
*    EXPORTING
*      i_program_name         = sy-repid
**     i_internal_tabname     = 'LT_43'
*      i_structure_name       = 'ZSPP_REPARTO_PULPER'
*      i_inclname             = sy-repid
**     i_bypassing_buffer     = 'X'
*    CHANGING
*      ct_fieldcat            = gt_fieldcat_ant
*    EXCEPTIONS
*      inconsistent_interface = 1
*      program_error          = 2
*      OTHERS                 = 3.
*
*** Recorremos el catálogo de campos modificandolo
*
*  LOOP AT gt_fieldcat_ant INTO ls_fcat.
*    lv_tabix = sy-tabix.
*    CASE ls_fcat-fieldname.
*      WHEN 'MANDT'.
*        ls_fcat-no_out = 'X'.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'WERKS'.
*        ls_fcat-no_out = 'X'.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'FECHA_UPD'.
*        ls_fcat-no_out = 'X'.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'HORA_UPD'.
*        ls_fcat-no_out = 'X'.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'CONTR_UPD'.
*        ls_fcat-no_out = 'X'.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'CONTR_INS'.
*        ls_fcat-no_out = 'X'.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
**      WHEN 'COMP_MEINS_TOT'.
**        ls_fcat-no_out = 'X'.
**        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
**      WHEN 'COMP_PORCENTAJE'.
**        ls_fcat-no_out = 'X'.
**        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'LOTE_MP'.
**        ls_fcat-seltext   = text-t01.
*        ls_fcat-seltext_l = |Lote MP|.
*        ls_fcat-seltext_m = |Lote MP|.
*        ls_fcat-seltext_s = |Lote MP|.
*        ls_fcat-reptext_ddic   = |Lote MP|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'LOTE_ROLLO'.
**        ls_fcat-seltext   = text-t01.
*        ls_fcat-seltext_l = |Lote fab.|.
*        ls_fcat-seltext_m = |Lote fab.|.
*        ls_fcat-seltext_s = |Lote fab.|.
*        ls_fcat-reptext_ddic   = |Lote fab.|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'MATNR_MP'.
**        ls_fcat-seltext   = text-t01.
*        ls_fcat-seltext_l = |Mat. MP|.
*        ls_fcat-seltext_m = |Mat. MP|.
*        ls_fcat-seltext_s = |Mat. MP|.
*        ls_fcat-reptext_ddic   = |Mat. MP|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'MATNR_ROLLO'.
**        ls_fcat-seltext   = text-t01.
*        ls_fcat-seltext_l = |Mat. fab.|.
*        ls_fcat-seltext_m = |Mat. fab.|.
*        ls_fcat-seltext_s = |Mat. fab.|.
*        ls_fcat-reptext_ddic   = |Mat. fab.|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'KG_MP'.
**        ls_fcat-seltext   = text-t01.
*        ls_fcat-seltext_l = |Kg repart.|.
*        ls_fcat-seltext_m = |Kg repart.|.
*        ls_fcat-seltext_s = |Kg repart.|.
*        ls_fcat-reptext_ddic   = |Kg repart.|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'KG_ROLLO'.
**        ls_fcat-seltext   = text-t01.
*        ls_fcat-seltext_l = |Kg lote fab.|.
*        ls_fcat-seltext_m = |Kg lote fab.|.
*        ls_fcat-seltext_s = |Kg lote fab.|.
*        ls_fcat-reptext_ddic   = |Kg lote fab.|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'MAKTX_MP'.
*        ls_fcat-seltext_l = |Desc. mat. MP|.
*        ls_fcat-seltext_m = |Desc. mat. MP|.
*        ls_fcat-seltext_s = |Desc. mat. MP|.
*        ls_fcat-reptext_ddic   = |Desc. mat. MP|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'MAKTX_ROLLO'.
*        ls_fcat-seltext_l = |Desc. mat. fab.|.
*        ls_fcat-seltext_m = |Desc. mat. fab.|.
*        ls_fcat-seltext_s = |Desc. mat. fab.|.
*        ls_fcat-reptext_ddic   = |Desc. mat. fab.|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'ID_RECETA'.
*        ls_fcat-seltext_l = |Receta|.
*        ls_fcat-seltext_m = |Receta|.
*        ls_fcat-seltext_s = |Receta|.
*        ls_fcat-reptext_ddic   = |Receta|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'KG_MP'.
*        ls_fcat-seltext_l = |Kg consumo|.
*        ls_fcat-seltext_m = |Kg consumo|.
*        ls_fcat-seltext_s = |Kg consumo|.
*        ls_fcat-reptext_ddic   = |Kg consumo|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'MEINS_MP'.
*        ls_fcat-seltext_l = |UMB|.
*        ls_fcat-seltext_m = |UMB|.
*        ls_fcat-seltext_s = |UMB|.
*        ls_fcat-reptext_ddic   = |UMB|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'MEINS_ROLLO'.
*        ls_fcat-seltext_l = |UMB|.
*        ls_fcat-seltext_m = |UMB|.
*        ls_fcat-seltext_s = |UMB|.
*        ls_fcat-reptext_ddic   = |UMB|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'KG_MP'.
*        ls_fcat-seltext_l = |Kg consumo|.
*        ls_fcat-seltext_m = |Kg consumo|.
*        ls_fcat-seltext_s = |Kg consumo|.
*        ls_fcat-reptext_ddic   = |Kg consumo|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'KG_MP'.
*        ls_fcat-seltext_l = |Kg consumo|.
*        ls_fcat-seltext_m = |Kg consumo|.
*        ls_fcat-seltext_s = |Kg consumo|.
*        ls_fcat-reptext_ddic   = |Kg consumo|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'OF_ROLLO'.
*        ls_fcat-seltext_l = |Orden|.
*        ls_fcat-seltext_m = |Orden|.
*        ls_fcat-seltext_s = |Orden|.
*        ls_fcat-reptext_ddic   = |Orden|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'IND_NO_TRATADO'.
*        ls_fcat-seltext_l = |Ind.err|.
*        ls_fcat-seltext_m = |Ind.err|.
*        ls_fcat-seltext_s = |Ind.err|.
*        ls_fcat-reptext_ddic   = |Ind.err|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'MSG_NO_TRATADO'.
*        ls_fcat-seltext_l = |Mensaje|.
*        ls_fcat-seltext_m = |Mensaje|.
*        ls_fcat-seltext_s = |Mensaje|.
*        ls_fcat-reptext_ddic   = |Mensaje|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'MBLNR_261'.
*        ls_fcat-seltext_l = |Doc. Material|.
*        ls_fcat-seltext_m = |Doc. Material|.
*        ls_fcat-seltext_s = |Doc. Material|.
*        ls_fcat-reptext_ddic   = |Doc. Material|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'ZEILE_261'.
*        ls_fcat-seltext_l = |Posición|.
*        ls_fcat-seltext_m = |Posición|.
*        ls_fcat-seltext_s = |Posición|.
*        ls_fcat-reptext_ddic   = |Posición|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'MJAHR_261'.
*        ls_fcat-seltext_l = |Ejercicio|.
*        ls_fcat-seltext_m = |Ejercicio|.
*        ls_fcat-seltext_s = |Ejercicio|.
*        ls_fcat-reptext_ddic   = |Ejercicio|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'FECHA_INS'.
*        ls_fcat-seltext_l = |Fecha consumo|.
*        ls_fcat-seltext_m = |Fecha consumo|.
*        ls_fcat-seltext_s = |Fecha consumo|.
*        ls_fcat-reptext_ddic   = |Fecha consumo|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*      WHEN 'HORA_INS'.
*        ls_fcat-seltext_l = |Hora consumo|.
*        ls_fcat-seltext_m = |Hora consumo|.
*        ls_fcat-seltext_s = |Hora consumo|.
*        ls_fcat-reptext_ddic   = |Hora consumo|.
*        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*
**      WHEN 'TYPE_RET'.
***        ls_fcat-seltext   = text-t02.
**        ls_fcat-seltext_l = text-t02.
**        ls_fcat-seltext_m = text-t02.
**        ls_fcat-seltext_s = text-t02.
**        ls_fcat-reptext_ddic   = text-t02.
**        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
**      WHEN 'MSG_RET'.
***        ls_fcat-seltext   = text-t03.
**        ls_fcat-seltext_l = text-t03.
**        ls_fcat-seltext_m  = text-t03.
**        ls_fcat-seltext_s = text-t03.
**        ls_fcat-reptext_ddic   = text-t03.
**        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
**      WHEN 'NO_RESB'.
**        ls_fcat-no_out = 'X'.
**        MODIFY gt_fieldcat_ant FROM ls_fcat INDEX lv_tabix.
*    ENDCASE.
*  ENDLOOP.
*
*
*  LOOP AT gt_fieldcat_ant INTO ls_fcat WHERE fieldname = 'PROCESADO'.
*    lv_tabix = sy-tabix.
*    DELETE gt_fieldcat_ant INDEX lv_tabix.
*  ENDLOOP.

ENDFORM.                    " COL_ALV
