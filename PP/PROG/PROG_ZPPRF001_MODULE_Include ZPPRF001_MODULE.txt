*&---------------------------------------------------------------------*
*&  Include           ZPPRF001_MODULE
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  CASE sy-ucomm.

    WHEN 'BACK'.
      SET SCREEN 0.


  ENDCASE.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PROCESS_BARCODE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE process_barcode INPUT.

  CONSTANTS c_matnr_pulper TYPE matnr VALUE '2001764'.

  DATA: l_clabs          TYPE labst, l_meins TYPE meins,
        l_matnr          TYPE matnr,
        l_matnr_alpha_in TYPE matnr,
        l_maktx          TYPE maktx,
*        l_charg          TYPE charg_d,
        l_werks          TYPE werks_d,
*        l_lgort          TYPE lgort_d,
        l_mtart          TYPE mtart,
        l_lgobe          TYPE lgobe.

  DATA lt_mseg TYPE TABLE OF mseg.


  DATA l_error TYPE abap_bool.

  IF g_werks IS INITIAL.
    SELECT SINGLE parva INTO g_werks FROM usr05
                                    WHERE bname = sy-uname AND parid = 'WRK'.
  ENDIF.

  CHECK g_barcode IS NOT INITIAL AND sy-ucomm NE 'BACK'.

  DATA(l_len) = strlen( g_barcode ).

  CHECK l_len > 10.

  DATA(l_len_charg) = l_len - 10.

*Validar que se trata de un lote de recorte (ZREC) o bobina pulper (material 2001764) --> "Error: lote XXXXXXXXXX inexistente"
*Validar que tiene stock --> "Error lote XXXXXXXXXX con 0 kg"
*Validar que el lote no existe ya en el pulper (4002) --> "Error: lote XXXXXXXXXX ya enviado a pulper"
*Validar que el lote, aunque no exista en el pulper, ya se envió (311 a 4002) --> "Error: lote XXXXXXXXXX ya enviado a pulper"

  l_charg = g_barcode+l_len_charg(10).

  l_matnr = |{ g_barcode(l_len_charg) ALPHA = OUT }|.
  l_matnr_alpha_in = |{ l_matnr ALPHA = IN }|.

  SELECT SINGLE: maktx INTO l_maktx FROM makt WHERE matnr = l_matnr_alpha_in AND spras = sy-langu,
                 mtart INTO l_mtart FROM mara WHERE matnr = l_matnr_alpha_in.


  IF l_mtart NE 'ZREC' AND  l_matnr NE c_matnr_pulper.
    DATA(l_msg) = CONV string( 'Lote & inexistente' ).
    REPLACE '&' IN l_msg WITH l_charg.
    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'W'.
    RETURN.
  ENDIF.

  SELECT SINGLE matnr INTO l_matnr_alpha_in FROM mcha WHERE matnr = l_matnr_alpha_in AND charg = l_charg AND werks = g_werks.
  IF sy-subrc NE 0.
    l_msg = CONV string( 'Lote & inexistente' ).
    REPLACE '&' IN l_msg WITH l_charg.
    MESSAGE l_msg TYPE 'W'.

    RETURN.
  ENDIF.

  REFRESH lt_mseg.
  SELECT * INTO TABLE lt_mseg FROM mseg
                 WHERE matnr EQ l_matnr_alpha_in
                   AND
                   ( bwart EQ '701' OR bwart EQ '702' )
                 AND charg EQ l_charg ORDER BY budat_mkpf DESCENDING cputm_mkpf DESCENDING.
  IF sy-subrc EQ 0.
    IF lt_mseg[ 1 ]-bwart = '702'.
      l_msg = 'Error:Lote & dado de baja por regularizacion'.
      REPLACE '&' IN l_msg WITH l_charg.
      CLEAR g_barcode.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
      EXIT.
    ENDIF.
  ENDIF.




  SELECT SINGLE matnr INTO g_matnr FROM mseg
             WHERE matnr EQ l_matnr_alpha_in
               AND charg EQ l_charg
               AND bwart EQ '311'.
  IF sy-subrc EQ 0.
    CLEAR l_clabs.

    SELECT SINGLE clabs
                INTO l_clabs
                FROM mchb
                WHERE matnr = l_matnr_alpha_in
                  AND charg = l_charg
                  AND lgort = '4002'
                  AND werks = g_werks
                  .
    IF sy-subrc EQ 0.
      IF l_clabs GT 0.
        l_msg = 'Lote & ya lanzado al pulper'.
        CLEAR g_barcode.
        REPLACE '&' IN l_msg WITH l_charg.
        MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ELSE.
        l_msg = CONV string( text-004 ).
        REPLACE '&' IN l_msg WITH l_charg.
        CLEAR g_barcode.
        MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
    ENDIF.
  ENDIF.


  SELECT SINGLE mchb~clabs mara~meins t001l~lgort t001l~lgobe
                INTO ( l_clabs, l_meins, l_lgort, l_lgobe )
                FROM mchb INNER JOIN t001l
                                  ON mchb~lgort = t001l~lgort
                          INNER JOIN mara
                                  ON mchb~matnr = mara~matnr
                WHERE mchb~matnr = l_matnr_alpha_in
                  AND mchb~charg = l_charg
                  AND mchb~werks = g_werks
                  AND mchb~clabs > 0.
  IF sy-subrc NE 0.


    SELECT SINGLE mchb~clabs mara~meins t001l~lgort t001l~lgobe
                  INTO ( l_clabs, l_meins, l_lgort, l_lgobe )
                  FROM mchb INNER JOIN t001l
                                    ON mchb~lgort = t001l~lgort
                            INNER JOIN mara
                                    ON mchb~matnr = mara~matnr
                  WHERE mchb~matnr = l_matnr_alpha_in
                    AND mchb~charg = l_charg
                    AND mchb~werks = g_werks.
    IF l_lgort = c_lgort_pulper.
      l_msg = 'Lote & ya lanzado al pulper y consumido'.
      REPLACE '&' IN l_msg WITH l_charg.
      CLEAR g_barcode.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
      EXIT.
    ELSE.
      SELECT SINGLE mchb~clabs mara~meins t001l~lgort t001l~lgobe
              INTO ( l_clabs, l_meins, l_lgort, l_lgobe )
              FROM mchb INNER JOIN t001l
                                ON mchb~lgort = t001l~lgort
                        INNER JOIN mara
                                ON mchb~matnr = mara~matnr
              WHERE mchb~matnr = l_matnr_alpha_in
                AND mchb~charg = l_charg
                AND mchb~werks = g_werks AND clabs = 0.
      IF sy-subrc EQ 0.
        l_msg = CONV string( 'ote con 0 kg').
        REPLACE '&' IN l_msg WITH l_charg.
        CLEAR g_barcode.
        MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.
        l_msg = CONV string( text-004 ).
        REPLACE '&' IN l_msg WITH l_charg.
        CLEAR g_barcode.
        MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
    ENDIF.
  ENDIF.


  g_matnr = l_matnr.
  g_maktx = l_maktx.
  g_charg = l_charg.
  g_lgort = l_lgort.
  g_lgobe = l_lgobe.


  g_peso = l_clabs.

  g_peso_text = |{ g_peso  } KG|.

  REPLACE ALL OCCURRENCES OF '.' IN g_peso_text WITH  ','.


  PERFORM traspasar
              USING
                 l_matnr_alpha_in
                 g_charg
                 g_werks
                 g_lgort
                 c_lgort_pulper
                 l_clabs
              CHANGING l_error.

  IF l_error EQ abap_true.
*    l_msg = |{ text-002 } { g_charg }|.
*    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'
*    EXIT.
  ELSE.
    l_msg = 'Lote & enviado a pulper'.
    REPLACE '&' IN l_msg WITH l_charg.
    CLEAR g_barcode.
    MESSAGE l_msg TYPE 'S'.

  ENDIF.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0100 OUTPUT.
*  SET PF-STATUS '100'.
*  SET TITLEBAR '10'.
*  CLEAR g_barcode.
*
*  PERFORM crear_objeto_app.
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0010  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0010 INPUT.

  CASE sy-ucomm.
    WHEN '001'.
*      LEAVE TO TRANSACTION 'ZPPRF001'.
      CALL SCREEN 020.
    WHEN '002'.
*      LEAVE TO TRANSACTION 'ZPPRF002'.
      CALL SCREEN 030.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0010  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0010 OUTPUT.
**  SET PF-STATUS 'xxxxxxxx'.
*  SET TITLEBAR '10'.
*  SET PF-STATUS '100'.
*  CLEAR g_barcode.
*
*  SELECT SINGLE parva INTO g_werks FROM usr05
*  WHERE bname = sy-uname AND parid = 'WRK'.
*
*  IF o_app IS NOT BOUND.
*    o_app = NEW zcl_app( ).
*  ENDIF.
*
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0200 OUTPUT.
*  SET PF-STATUS '100'.
*  SET TITLEBAR '10'.
*  CLEAR g_barcode.
*  DATA: lt_values TYPE vrm_values.
*
**   (almacenes 1000 a 1019, 1022 y 1023)
*
*  DATA: "l_lgort      TYPE l_lgort VALUE '1000',
*        l_name_lgort TYPE lgobe.
*
*  l_lgort = 1000.
*
*  REFRESH lt_values.
*
*  SELECT * INTO TABLE @DATA(lt_lgort) FROM t001l WHERE werks = @g_werks.
*
*
*  TRY.
*      g_lgort_origen_txt = lt_lgort[ lgort = g_lgort_origen ]-lgobe.
*    CATCH cx_sy_itab_line_not_found.
*  ENDTRY.
*
*  DO 20 TIMES.
*    TRY.
*        l_name_lgort = lt_lgort[ lgort = l_lgort ]-lgobe.
*      CATCH cx_sy_itab_line_not_found.
*    ENDTRY.
*
*
*    IF NOT line_exists( lt_values[ key = l_lgort ] ).
*      APPEND VALUE vrm_value( key  = l_lgort
*                              text = |{ l_lgort }-{ l_name_lgort }| ) TO lt_values.
*      ADD 1 TO l_lgort.
*    ENDIF.
*  ENDDO.
*
*  l_lgort = 1022.
*  DO 8 TIMES.
*    TRY.
*        l_name_lgort = lt_lgort[ lgort = l_lgort ]-lgobe.
*      CATCH cx_sy_itab_line_not_found.
*    ENDTRY.
*
*
*    IF NOT line_exists( lt_values[ key = l_lgort ] ).
*      APPEND VALUE vrm_value( key  = l_lgort
*                              text = |{ l_lgort }-{ l_name_lgort }| ) TO lt_values.
*      ADD 1 TO l_lgort.
*    ENDIF.
*  ENDDO.
*
*
*
*
*
*  CALL FUNCTION 'VRM_SET_VALUES'
*    EXPORTING
*      id              = 'G_LGORT_DSTINO'
*      values          = lt_values
*    EXCEPTIONS
*      id_illegal_name = 0
*      OTHERS          = 0.
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  LOTE_RECORTE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE lote_recorte INPUT.


  CHECK g_barcode IS NOT INITIAL.

  IF g_werks IS INITIAL.
    SELECT SINGLE parva INTO g_werks FROM usr05
                                    WHERE bname = sy-uname AND parid = 'WRK'.
  ENDIF.

  l_len = strlen( g_barcode ).

  l_len_charg = l_len - 10.

  g_charg = g_barcode+l_len_charg(10).
  IF l_len_charg > 0.
    g_matnr = |{ g_barcode(l_len_charg) ALPHA = OUT }|.
  ELSE.
    SELECT SINGLE matnr INTO g_matnr FROM mcha WHERE werks = g_werks AND charg = g_charg.
  ENDIF.

  l_matnr_alpha_in = |{ g_matnr ALPHA = IN }|.

  SELECT SINGLE: maktx INTO g_maktx FROM makt WHERE matnr = l_matnr_alpha_in AND spras = sy-langu,
                     mtart INTO l_mtart FROM mara WHERE matnr = l_matnr_alpha_in.


  IF l_mtart NE 'ZREC' AND  l_matnr NE c_matnr_pulper.
    l_msg = CONV string( 'Error:Lote & inexistente' ).
    REPLACE '&' IN l_msg WITH l_charg.
    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  SELECT SINGLE  mchb~clabs mara~meins t001l~lgort t001l~lgobe
                INTO ( l_clabs, l_meins, g_lgort_origen, g_lgobe )

                FROM mchb INNER JOIN t001l
                                  ON mchb~lgort = t001l~lgort
                          INNER JOIN mara
                                  ON mchb~matnr = mara~matnr
                WHERE mchb~matnr = l_matnr_alpha_in
                  AND mchb~werks = g_werks
                  AND mchb~charg = g_charg
                  AND mchb~clabs > 0.
  IF sy-subrc NE 0.
    MESSAGE 'Lote no se encuentra disponible' TYPE 'W' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  g_peso = l_clabs.

  g_peso_text = |{ g_peso } KG|.

  CALL SCREEN 210.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  CASE sy-ucomm.
    WHEN 'CANC'.
      PERFORM limpiar_campos.
      SET SCREEN 0.
    WHEN 'EXEC'.
      PERFORM reubicar.
      SET SCREEN 0.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0020  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0020 INPUT.

  CASE sy-ucomm.
    WHEN '001'.
      CALL SCREEN 100.
    WHEN '002'.
      CALL SCREEN 200.
    WHEN 'BACK'.
      LEAVE TO SCREEN 10.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0030  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0030 INPUT.
  CASE sy-ucomm.
    WHEN '001'.
      CALL SCREEN 600.
    WHEN '002'.
      CALL TRANSACTION 'ZSD0007'.
    WHEN '003'.
      CALL SCREEN 033.
    WHEN '004'.
      CALL SCREEN 034.
    WHEN 'BACK'.
      LEAVE TO SCREEN 10.
  ENDCASE.
ENDMODULE.
MODULE user_command_0033 INPUT.
  CASE sy-ucomm.
    WHEN '001'.
      g_dynpro = '0310'.
      CALL SCREEN 309.
    WHEN '002'.
      g_dynpro = '0320'.
      CALL SCREEN 309.
    WHEN 'BACK'.
      LEAVE TO SCREEN 30.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0310  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0310 INPUT.
  CASE sy-ucomm.

    WHEN 'BACK'.
      IF sy-dynnr EQ '0312'.

        SET SCREEN 311.
      ELSE.
        IF lt_bobinas[] IS NOT INITIAL.
          CALL SCREEN 315.
        ELSE.
          REFRESH lt_bobinas.
          CLEAR:g_matnr,g_charg,g_decision_empleo,g_kunnr,g_peso,g_peso_text,g_calidad,g_gramaje_ancho.

          LEAVE TO SCREEN 033.
        ENDIF.
      ENDIF.
    WHEN 'CONS'.
      IF lt_bobinas IS INITIAL.
        MESSAGE 'No hay bobinas leidas' TYPE 'S'.
        RETURN.
      ENDIF.
      CALL SCREEN 311.
    WHEN 'DEL'.

      CALL SCREEN 313.
    WHEN 'LGORT'.
      g_lgort_active = abap_false.
    WHEN 'ACPT'.
      CALL SCREEN 314.

  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PROCESS_BARCODE_310  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE traspaso_entre_almacenes INPUT.

  DATA: l_obj_key TYPE ausp-objek,
        l_gramaje TYPE mara-zzgramaje,
        l_matkl   TYPE matkl,
        l_ancho   TYPE mara-zzancho.

  DATA: lt_valuesnum  TYPE TABLE OF bapi1003_alloc_values_num,
        lt_valueschar TYPE TABLE OF bapi1003_alloc_values_char,
        lt_valuescurr TYPE TABLE OF bapi1003_alloc_values_curr,
        lt_return     TYPE bapiret2_t.

  DATA: BEGIN OF ls_lgort,
          sign,
          option TYPE c LENGTH 2,
          low    TYPE lgort_d,
          high   TYPE lgort_d,
        END OF ls_lgort,
        r_lgort LIKE STANDARD TABLE OF ls_lgort.



  CHECK g_barcode IS NOT INITIAL AND g_lgort IS NOT INITIAL ."AND sy-ucomm IS INITIAL.

  TRANSLATE g_barcode TO UPPER CASE.

  l_len = strlen( g_barcode ).

  IF l_len >= 10.

    l_len_charg = l_len - 10.

    l_charg = g_barcode(10).

  ELSE.
    l_charg  = g_barcode.
  ENDIF.

  DATA l_barcode LIKE g_barcode.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
    EXPORTING
      input  = g_barcode
    IMPORTING
      output = l_barcode.


  g_barcode = l_barcode.

  SELECT SINGLE matnr INTO l_matnr FROM mcha WHERE werks = g_werks AND charg = l_charg.
  IF sy-subrc NE 0.
    MESSAGE 'Error al determinar el material' TYPE 'W' DISPLAY LIKE 'E' .
    RETURN.
  ENDIF.



  l_matnr_alpha_in = |{ l_matnr ALPHA = IN }|.


  l_obj_key = |{ l_matnr_alpha_in }{ l_charg }|.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = l_obj_key
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
    TABLES
      allocvaluesnum  = lt_valuesnum
      allocvalueschar = lt_valueschar
      allocvaluescurr = lt_valuescurr
      return          = lt_return.

  IF line_exists( lt_return[ type = 'E'] ).
    l_msg =  'Error: lote & incorrecto o traspaso no permitido'.
    REPLACE '&' IN l_msg WITH l_charg.
    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    CLEAR:g_barcode, g_mostrar_botones.
    RETURN.
  ENDIF.

  TRY.
      g_decision_empleo = lt_valueschar[ charact = 'LOBM_UDCODE' ]-value_char.
      g_decision_empleo = g_decision_empleo+9(1).
    CATCH cx_sy_itab_line_not_found.
  ENDTRY.
  TRY.
      g_kunnr           = lt_valueschar[ charact = 'Z_CLIENTE' ]-value_char.
    CATCH cx_sy_itab_line_not_found.
  ENDTRY.
  CLEAR g_peso_text.
  SELECT SINGLE clabs INTO g_peso FROM mchb WHERE matnr EQ l_matnr_alpha_in AND
                                                  charg EQ l_charg AND
                                                  werks EQ g_werks AND
                                                  clabs GT 0.
  IF sy-subrc EQ 0.
    g_peso_text = |{ g_peso DECIMALS = 0 } KG |.
  ELSE.
    MESSAGE 'Lote sin existencias' TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.


  SELECT SINGLE mtart matkl zzgramaje zzancho
                            FROM mara
                            INTO ( l_mtart, l_matkl, l_gramaje,l_ancho )
                            WHERE matnr = l_matnr_alpha_in.

  IF l_mtart NE 'ZPAP'.
    MESSAGE 'Error:Lote leido no es ZPAP' TYPE 'S' DISPLAY LIKE 'E'.
    RETURN.
  ENDIF.

  SELECT SINGLE wgbez60 FROM t023t INTO g_calidad WHERE matkl = l_matkl AND spras = sy-langu.


  g_gramaje_ancho = |{ l_gramaje }/{ l_ancho }|.
  g_matnr = |{ l_matnr ALPHA = OUT }|.
  g_charg = l_charg.


  SELECT lgort_origen FROM ztpp0026 INTO TABLE @DATA(lt_lgort_origen)
                                    WHERE werks EQ @g_werks AND lgort_destino = @g_lgort.
  IF sy-subrc NE 0.
    l_msg =  'Error: lote & incorrecto o traspaso no permitido'.
    REPLACE '&' IN l_msg WITH l_charg.
    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    CLEAR:g_barcode, g_mostrar_botones.",g_charg,g_peso,g_kunnr,g_gramaje_ancho,g_decision_empleo.
    RETURN.
  ENDIF.


  r_lgort = VALUE #( FOR ls IN lt_lgort_origen ( sign = 'I' option = 'EQ' low = ls-lgort_origen ) ).


  SELECT SINGLE lgort INTO ls_bobinas-lgort FROM mchb
                      WHERE matnr = l_matnr_alpha_in
                        AND charg = l_charg
                        AND lgort IN r_lgort
                        AND clabs GT 0.
  IF sy-subrc GT 0.
    l_msg =  'Error: lote & incorrecto o traspaso no permitido'.
    REPLACE '&' IN l_msg WITH l_charg.
    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    CLEAR:g_barcode, g_mostrar_botones.",g_charg,g_peso,g_kunnr,g_gramaje_ancho,g_decision_empleo.
    RETURN.

  ENDIF.

  IF ls_bobinas-lgort EQ g_lgort.
    MESSAGE 'Bobina existe en alm. destino' TYPE 'S' DISPLAY LIKE 'E'.
    CLEAR:g_barcode, g_mostrar_botones.",g_charg,g_peso,g_kunnr,g_gramaje_ancho,g_decision_empleo,g_peso_text,g_matnr,g_calidad.
    RETURN.
  ENDIF.

  IF NOT line_exists( lt_bobinas[ charg = l_charg ] ).
    ls_bobinas-matnr           = |{ l_matnr_alpha_in ALPHA = OUT }|.
    ls_bobinas-charg           = l_charg.
    ls_bobinas-decision_empleo = g_decision_empleo.
    ls_bobinas-gramaje_ancho   = g_gramaje_ancho.
    ls_bobinas-kunnr           = g_kunnr.
    ls_bobinas-peso            = g_peso_text.
    ls_bobinas-peso_real       = g_peso.
    ls_bobinas-calidad         = g_calidad.

    APPEND ls_bobinas TO lt_bobinas.

    ADD g_peso TO g_peso_acumulado.
    g_peso_acumulado_txt =  |{ g_peso_acumulado DECIMALS = 0 } KG |.
  ENDIF.

  MESSAGE 'Lote leído correctamente' TYPE 'S'.



  CLEAR g_barcode.
*  PERFORM alinear_textos_pantalla.

  g_mostrar_botones = abap_true.



ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0310  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0310 OUTPUT.
*  SET PF-STATUS '100'.
*  SET CURSOR FIELD 'G_BARCODE'.

*  IF lT_bobinas IS INITIAL.
*    LOOP AT SCREEN.
*      check screen-name eq 'CONSULTA'.
*      screen-active = 0.
*      screen-invisible = 1.
*      MODIFY SCREEN.
*    ENDLOOP.
*  ELSe.
*    LOOP AT SCREEN.
*      check screen-name eq 'CONSULTA'.
*      screen-active = 1.
*      screen-invisible = 0.
*      MODIFY SCREEN.
*    ENDLOOP.
*  ENDIF.

*
*  IF g_werks IS INITIAL.
*    SELECT SINGLE parva INTO g_werks FROM usr05
*                                    WHERE bname = sy-uname AND parid = 'WRK'.
*  ENDIF.
*
*
*  LOOP AT SCREEN.
*    CHECK screen-group1 = '001'.
*    IF g_mostrar_botones EQ abap_false.
*      screen-active = 0.
*      screen-input  = 0.
*    ELSE .
*      screen-active = 1.
*      screen-input  = 1.
*    ENDIF.
*    MODIFY SCREEN.
*  ENDLOOP.
*
*  IF sy-dynnr EQ '0310'.
*    SELECT ztpp0024~werks, ztpp0024~lgort, lgobe
*            FROM ztpp0024 JOIN t001l
*                            ON  ztpp0024~werks EQ t001l~werks
*                           AND ztpp0024~lgort EQ t001l~lgort
*                    INTO TABLE @DATA(lt_almacenes)
*                    WHERE ztpp0024~werks EQ @g_werks AND
*                          tipo_almacen   EQ '02'.
*  ELSE.
*    SELECT ztpp0024~werks, ztpp0024~lgort, lgobe
*         FROM ztpp0024 JOIN t001l
*                         ON  ztpp0024~werks EQ t001l~werks
*                        AND ztpp0024~lgort EQ t001l~lgort
*                 INTO TABLE @lt_almacenes
*                 WHERE ztpp0024~werks EQ @g_werks AND
*                       tipo_almacen   EQ '04'.
*
*  ENDIF.
*
*  lt_values =  CORRESPONDING #( lt_almacenes MAPPING key = lgort text = lgobe ).
*
*  CALL FUNCTION 'VRM_SET_VALUES'
*    EXPORTING
*      id              = 'G_LGORT'
*      values          = lt_values
*    EXCEPTIONS
*      id_illegal_name = 0
*      OTHERS          = 0.
*
*  IF g_lgort_active EQ abap_false.
*    LOOP AT SCREEN .
*      IF screen-name CS 'G_LGORT'.
*        screen-input = 0.
*        MODIFY SCREEN.
*      ENDIF.
*    ENDLOOP.
*    SET CURSOR FIELD 'G_BARCODE'.
*  ENDIF.



*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0311  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0311 OUTPUT.
*
*  DATA(l_index) = CONV i( g_pagina ) * 7.
*
*  DATA l_no_int TYPE i.
*
*  IF lt_bobinas IS INITIAL.
**  ls_bobinas-charg = '807PB0001'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0002'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0003'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0004'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0005'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0006'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0007'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0008'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0009'.
**  APPEND ls_bobinas to lt_bobinas.
**  ls_bobinas-charg = '807PB0010'.
**  APPEND ls_bobinas to lt_bobinas.
*    RETURN.
*  ENDIF
*  .
*
*  DATA l_pag TYPE p DECIMALS 2.
*
*  l_pag = lines( lt_bobinas ) / 7.
*
*  IF l_pag LE 1.
*    g_max_paginas = 0.
*  ELSE.
*    g_max_paginas = trunc( l_pag ) .
*  ENDIF.
*
*  IF g_dynpro EQ '0310'.
*    g_titulo_311 = 'TRASPASO ENTRE ALMACENES'.
*  ELSEIF g_dynpro EQ '0320'.
*    g_titulo_311 = 'REPROCESO EXTERNO'.
*  ELSEIF g_dynpro EQ '0410'.
*    g_titulo_311 = 'PULPER A HJ NS PAPER'.
*  ELSEIF g_dynpro EQ '0510'.
*    g_titulo_311 = 'CAMBIAR CLIENTE'.
*  ENDIF.
*
*
*
*  LOOP AT SCREEN.
*    IF screen-name CS 'BOTON_'.
*      DATA(l_no) = screen-name+6(1).
*
*      l_no_int = CONV i( l_no ).
*
*      DATA(l_tabix) = l_index + l_no_int.
*
*      TRY.
*          l_charg = lt_bobinas[ l_tabix ]-charg.
*          ASSIGN (screen-name) TO FIELD-SYMBOL(<fs>).
*          IF <fs> IS ASSIGNED.
*            <fs> = l_charg.
*          ENDIF.
*          screen-input  = 1.
*          screen-active = 1.
*        CATCH cx_sy_itab_line_not_found.
*          screen-input  = 0.
*          screen-active = 0.
*      ENDTRY.
*
*    ENDIF.
*
*
*    MODIFY SCREEN.
*  ENDLOOP.
*
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0311  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0311 INPUT.

  DATA l_line TYPE i.

  CLEAR l_line.
  CASE sy-ucomm.
    WHEN 'NEXT'.
      IF g_pagina EQ g_max_paginas.
        MESSAGE 'Fin de lista alcanzado' TYPE 'S'.
        RETURN.
      ENDIF.
      g_pagina = g_pagina + 1.
    WHEN 'PREV'.
      IF g_pagina = 0.
        MESSAGE 'Inicio de lista alcanzado' TYPE 'S'.
        RETURN.
      ENDIF.
      g_pagina = g_pagina - 1.
    WHEN '001'.
      l_line = CONV i( sy-ucomm ).
    WHEN '002'.
      l_line = CONV i( sy-ucomm ).
    WHEN '003'.
      l_line = CONV i( sy-ucomm ).
    WHEN '004'.
      l_line = CONV i( sy-ucomm ).
    WHEN '005'.
      l_line = CONV i( sy-ucomm ).
    WHEN '006'.
      l_line = CONV i( sy-ucomm ).
    WHEN '007'.
      l_line = CONV i( sy-ucomm ).
    WHEN 'BACK'.
      SET SCREEN 0.
      RETURN.
  ENDCASE.

  IF l_line IS NOT INITIAL.
    l_line = ( (  g_pagina ) * 7 ) + l_line.
    TRY.

        ls_bobinas        = lt_bobinas[ l_line ].

        g_charg           = ls_bobinas-charg.
        g_kunnr           = ls_bobinas-kunnr.
        g_decision_empleo = ls_bobinas-decision_empleo.
        g_gramaje_ancho   = ls_bobinas-gramaje_ancho.
        g_calidad         = ls_bobinas-calidad.
        g_peso_text       = ls_bobinas-peso.
        g_matnr           = ls_bobinas-matnr.
        g_calidad         = ls_bobinas-calidad.

        CALL SCREEN 312.

      CATCH cx_sy_itab_line_not_found.
        RETURN.
    ENDTRY.
  ENDIF.




ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0313  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0313 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK'.
      SET SCREEN 0.
    WHEN 'DEL'.

      DELETE lt_bobinas WHERE charg = g_charg.

      IF lt_bobinas IS INITIAL.
        CLEAR g_mostrar_botones.
      ENDIF.

      CLEAR: g_barcode, g_matnr, g_charg, g_calidad, g_decision_empleo,
             g_kunnr, g_gramaje_ancho,g_peso_text.

      IF g_dynpro EQ '0310'.
        SET SCREEN 310.
      ELSEIF g_dynpro EQ '0320'.
        SET SCREEN 320.
      ELSEIF g_dynpro EQ '0410'.
        SET SCREEN 410.
      ELSEIF g_dynpro EQ '0510'.
        SET SCREEN 0510.
      ENDIF.

  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0309  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0309 OUTPUT.
*  SET PF-STATUS '100'.
**  SET TITLEBAR 'xxx'.
*
*  IF g_werks IS INITIAL.
*    SELECT SINGLE parva INTO g_werks FROM usr05
*                                    WHERE bname = sy-uname AND parid = 'WRK'.
*  ENDIF.
*
*  PERFORM limpiar_campos.
*
*
*
*  IF g_dynpro EQ '0310'.
*    g_titulo_311 = 'TRASPASO ENTRE ALMACENES'.
*    SELECT ztpp0024~werks, ztpp0024~lgort, lgobe
*            FROM ztpp0024 JOIN t001l
*                            ON  ztpp0024~werks EQ t001l~werks
*                           AND ztpp0024~lgort EQ t001l~lgort
*                    INTO TABLE @DATA(lt_almacenes)
*                    WHERE ztpp0024~werks EQ @g_werks AND
*                          tipo_almacen   EQ '02'.
*  ELSE.
*    g_titulo_311 = 'REPROCESO EXTERNO'.
*    SELECT ztpp0024~werks, ztpp0024~lgort, lgobe
*         FROM ztpp0024 JOIN t001l
*                         ON  ztpp0024~werks EQ t001l~werks
*                        AND ztpp0024~lgort EQ t001l~lgort
*                 INTO TABLE @lt_almacenes
*                 WHERE ztpp0024~werks EQ @g_werks AND
*                       tipo_almacen   EQ '04'.
*
*  ENDIF.
*
*  lt_values =  CORRESPONDING #( lt_almacenes MAPPING key = lgort text = lgobe ).
*
*  LOOP AT lt_values ASSIGNING FIELD-SYMBOL(<fs_alm>).
*    <fs_alm>-text = |{ <fs_alm>-key }-{ <fs_alm>-text }|.
*  ENDLOOP.
*
*  CALL FUNCTION 'VRM_SET_VALUES'
*    EXPORTING
*      id              = 'G_LGORT'
*      values          = lt_values
*    EXCEPTIONS
*      id_illegal_name = 0
*      OTHERS          = 0.
*
*  IF g_lgort_active EQ abap_false.
*    LOOP AT SCREEN .
*      IF screen-name CS 'G_LGORT'.
*        screen-input = 0.
*        MODIFY SCREEN.
*      ENDIF.
*    ENDLOOP.
*    SET CURSOR FIELD 'G_BARCODE'.
*  ENDIF.
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0309  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0309 INPUT.

  CASE sy-ucomm.
    WHEN 'ACPT'.
      IF g_lgort IS INITIAL.
        MESSAGE 'Introducir almacén' TYPE 'S' DISPLAY LIKE 'E'.
        EXIT.
      ENDIF.
      g_lgort_dstino = g_lgort.
      CALL SCREEN g_dynpro.
    WHEN 'BACK'.
      LEAVE TO SCREEN 033.
  ENDCASE.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_exit INPUT.

  CASE sy-ucomm.

    WHEN 'BACK'.
      SET SCREEN 0.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0312  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0312 INPUT.

  CASE sy-ucomm.

    WHEN 'BACK'.

      SET SCREEN 0.

    WHEN 'DEL'.

      CALL SCREEN 313.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0314  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0314 INPUT.
  CASE sy-ucomm.
    WHEN 'ACPT'.
      PERFORM realizar_traspaso.
      LEAVE TO SCREEN 309.
    WHEN 'BACK'.
      SET SCREEN 0.
  ENDCASE.
ENDMODULE.


MODULE user_command_0315 INPUT.
  CASE sy-ucomm.
    WHEN 'ACPT'.
      REFRESH lt_bobinas.
      PERFORM limpiar_campos.
      IF g_dynpro EQ '0410' OR g_dynpro EQ '0510'.
        CALL SCREEN 034.
      ELSE.
        CALL SCREEN 033.
      ENDIF.
    WHEN 'BACK'.

      SET SCREEN 0.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0034  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0034 INPUT.

  CASE sy-ucomm.
    WHEN '001'.
      PERFORM limpiar_campos.
      CALL SCREEN 550.
    WHEN '002'.
      CALL SCREEN 500.
    WHEN '003'.
      CALL SCREEN 400.
    WHEN 'BACK'.
      LEAVE TO SCREEN 30.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0400  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0400 OUTPUT.
*  SET PF-STATUS '100'.
*  SET TITLEBAR '10'.
*
*  CLEAR g_matnr_non_standard_paper.
*
** Leer materiales NonStandard pars el selector
*  SELECT mara~matnr maktx FROM mara JOIN makt
*                       ON mara~matnr EQ makt~matnr
*              INTO TABLE lt_values WHERE matkl EQ '10199'."HJNS
*
*  LOOP AT lt_values ASSIGNING FIELD-SYMBOL(<fs_values>).
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*      EXPORTING
*        input  = <fs_values>-key
*      IMPORTING
*        output = <fs_values>-key.
*
*    <fs_values>-text = <fs_values>-key.
*  ENDLOOP.
*
*
*  CALL FUNCTION 'VRM_SET_VALUES'
*    EXPORTING
*      id              = 'G_MATNR_NON_STANDARD_PAPER'
*      values          = lt_values
*    EXCEPTIONS
*      id_illegal_name = 0
*      OTHERS          = 0.
*
*  PERFORM crear_objeto_app.
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0400  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0400 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK'.
      PERFORM limpiar_campos.
      LEAVE TO SCREEN 034.
    WHEN 'ACPT'.
      IF g_matnr_non_standard_paper IS INITIAL.
        MESSAGE 'Error:seleccionar material' TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      l_matnr = |{ g_matnr_non_standard_paper ALPHA = IN }|.
      SELECT SINGLE maktx FROM makt INTO g_maktx_non_standard_paper
                          WHERE matnr = l_matnr AND spras = sy-langu.

      l_len = strlen( g_maktx_non_standard_paper ).
      l_len = l_len - 12.

      g_maktx_non_standard_paper = g_maktx_non_standard_paper+l_len(12).

      IF g_maktx_non_standard_paper CS 'PAPER'.
        SELECT SINGLE maktx FROM makt INTO g_maktx_non_standard_paper
                          WHERE matnr = l_matnr AND spras = sy-langu.

        l_len = strlen( g_maktx_non_standard_paper ).
        l_len = l_len - 18.

        g_maktx_non_standard_paper = g_maktx_non_standard_paper+l_len(18).
      ENDIF.

      CALL SCREEN 410.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  LECTURA_PULPER_A_NSP  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE lectura_pulper_a_nsp INPUT.



  CHECK g_barcode IS NOT INITIAL .

  o_app->leer_bobina( EXPORTING con_material = abap_false
                      CHANGING  bar_code     = g_barcode
                      EXCEPTIONS lote_incorrecto      = 1
                                 lote_sin_existencias = 2 ).

  CLEAR g_barcode.
  CASE sy-subrc .
    WHEN 0.

      o_app->validar_bobina_pulper( EXCEPTIONS no_es_pulper = 1 ).
      IF sy-subrc NE 0.
        MESSAGE text-013 TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.

      o_app->anadir_bobina_a_lista( ).

      PERFORM exportar_campos_app.

    WHEN 1.
      l_msg = text-010.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    WHEN 2.
      l_msg = text-012.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
  ENDCASE.

*  TRANSLATE g_barcode TO UPPER CASE.
*
*  l_len = strlen( g_barcode ).
*
*  l_len_charg = l_len - 10.
*
*  l_charg = g_barcode+l_len_charg(10).
**  IF l_len_charg > 0.
**    g_matnr = |{ g_barcode(l_len_charg) ALPHA = OUT }|.
**  ELSE.
**    SELECT SINGLE matnr INTO g_matnr FROM mcha WHERE werks = g_werks AND charg = g_charg.
**  ENDIF.
**
**  l_matnr_alpha_in = |{ g_matnr ALPHA = IN }|.
*
**
**
**  l_len = strlen( g_barcode ).
**
**  IF l_len >= 10.
**
**    l_len_charg = l_len - 10.
**
**    l_charg = g_barcode(10).
**
***  ELSE.
**    l_charg  = g_barcode.
**  ENDIF.
**
*
*
*  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*    EXPORTING
*      input  = g_barcode
*    IMPORTING
*      output = l_barcode.
*
*
*  g_barcode = l_barcode.
*
*  SELECT SINGLE matnr INTO g_matnr FROM mcha WHERE werks = g_werks AND charg = l_charg.
*  IF sy-subrc NE 0.
*    MESSAGE 'Error al determinar el material' TYPE 'W' DISPLAY LIKE 'E' .
*    RETURN.
*  ENDIF.
*
*
*  l_matnr_alpha_in = |{ g_matnr ALPHA = IN }|.
*
*  IF l_matnr_alpha_in NE '000000000002001764'.
*    MESSAGE 'Error: material no es Pulper' TYPE 'S' DISPLAY LIKE 'E'.
*    RETURN.
*  ENDIF.
*
*  g_matnr = |{ g_matnr ALPHA = OUT }|.
*
*  SELECT SINGLE maktx  INTO g_maktx FROM makt WHERE matnr = l_matnr_alpha_in AND spras = sy-langu.
*
*
*  l_obj_key = |{ l_matnr_alpha_in }{ l_charg }|.
*
*  REFRESH: lt_valueschar,lt_valuescurr,lt_valuesnum.
*
*  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
*    EXPORTING
*      objectkey       = l_obj_key
*      objecttable     = 'MCH1'
*      classnum        = 'Z_BOBINA_PULPER'
*      classtype       = '023'
*    TABLES
*      allocvaluesnum  = lt_valuesnum
*      allocvalueschar = lt_valueschar
*      allocvaluescurr = lt_valuescurr
*      return          = lt_return.
*
*  IF line_exists( lt_return[ type = 'E'] ).
*    l_msg = 'Error:lote & incorrecto'.
*    REPLACE '&' IN l_msg WITH l_charg.
*    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
*    RETURN.
*  ENDIF.
*
*  SELECT SINGLE clabs INTO g_peso FROM mchb WHERE matnr EQ l_matnr_alpha_in AND
*                                                  charg EQ l_charg AND
*                                                  werks EQ g_werks AND
*                                                  lgort EQ '1000' AND
*                                                  clabs GT 0.
*  IF sy-subrc EQ 0.
*    g_peso_text = |{ g_peso DECIMALS = 0 } KG |.
*  ELSE.
*    SELECT SINGLE clabs INTO g_peso FROM mchb WHERE matnr EQ l_matnr_alpha_in AND
*                                                charg EQ l_charg AND
*                                                werks EQ g_werks AND
*                                                clabs GT 0.
*    IF sy-subrc EQ 0.
*      l_msg = 'Error:Lote & con 0 KG'.
*    ELSE.
*      l_msg = 'Error:Lote & inexistente'.
*    ENDIF.
*    REPLACE '&' IN l_msg WITH l_charg.
*    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
**    g_peso = 0.
**    g_peso_text = |{ g_peso DECIMALS = 0 } KG |.
*    RETURN.
*  ENDIF.
*
*  g_charg = l_charg.
*
*
*  IF NOT line_exists( lt_bobinas[ charg = l_charg ] ).
*    ls_bobinas-matnr           = |{ l_matnr_alpha_in ALPHA = OUT }|.
*    ls_bobinas-charg           = l_charg.
**    ls_bobinas-decision_empleo = g_decision_empleo.
**    ls_bobinas-gramaje_ancho   = g_gramaje_ancho.
**    ls_bobinas-kunnr           = g_kunnr.
*    ls_bobinas-peso            = g_peso_text.
*    ls_bobinas-peso_real       = g_peso.
**    ls_bobinas-calidad         = g_calidad.
*    ls_bobinas-werks           = g_werks.
*
*    APPEND ls_bobinas TO lt_bobinas.
*  ENDIF.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0410  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0410 INPUT.

  g_dynpro = '0410'.
  CASE sy-ucomm.

    WHEN 'BACK'.

      IF lt_bobinas[] IS NOT INITIAL.
        CALL SCREEN 315.
      ELSE.
        REFRESH lt_bobinas.
        PERFORM limpiar_campos.

        LEAVE TO SCREEN 400.
      ENDIF.

    WHEN 'CONS'.
      IF lt_bobinas IS INITIAL.
        MESSAGE 'No hay bobinas leidas' TYPE 'S'.
        RETURN.
      ENDIF.

      CALL SCREEN 311.
    WHEN 'DEL'.

      CALL SCREEN 313.

    WHEN 'ACPT'.
      IF lt_bobinas IS INITIAL.
        MESSAGE 'Error:Sin bobinas leidas' TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      CALL SCREEN 411.

  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0411  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0411 INPUT.

  CASE sy-ucomm.
    WHEN 'ACPT'.
      PERFORM conversion_a_nsp.
      LEAVE TO SCREEN 400.
    WHEN 'BACK'.
      SET SCREEN 0.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_312  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_312 OUTPUT.
**  SET PF-STATUS 'xxxxxxxx'.
**  SET TITLEBAR 'xxx'.
*
*  LOOP AT SCREEN.
*    IF screen-group1 EQ 'T' AND g_dynpro EQ '0410'.
*      screen-invisible = 1.
*      MODIFY SCREEN.
*    ELSEIF screen-group1 EQ 'T' AND g_dynpro NE '0410'.
*      screen-invisible = 0.
*      MODIFY SCREEN.
*    ENDIF.
*
*    IF screen-group2 EQ 'T' AND g_dynpro EQ '0410'.
*      screen-invisible = 0.
*      MODIFY SCREEN.
*    ELSEIF screen-group2 EQ 'T' AND g_dynpro NE '0410'.
*      screen-invisible = 1.
*      MODIFY SCREEN.
*    ENDIF.
*  ENDLOOP.
*
*
*
*ENDMODULE.
*MODULE status_0500 OUTPUT.
*  SET PF-STATUS '100'.
*  SET TITLEBAR '10'.
*
**  IF g_new_kunnr IS INITIAL.
*  PERFORM limpiar_campos.
*  CLEAR g_new_kunnr.
*
*  SELECT kna1~kunnr name1
*                     FROM kna1 JOIN knb1 ON kna1~kunnr = knb1~kunnr
*                     INTO TABLE lt_values
*                     WHERE kna1~kunnr LIKE 'C2%' AND bukrs = g_werks.
*
*  LOOP AT lt_values ASSIGNING <fs_values>.
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*      EXPORTING
*        input  = <fs_values>-key
*      IMPORTING
*        output = <fs_values>-key.
*
*    <fs_values>-text = |{ <fs_values>-key } { <fs_values>-text }|.
*
*  ENDLOOP.
*
*
*
*  CALL FUNCTION 'VRM_SET_VALUES'
*    EXPORTING
*      id              = 'G_NEW_KUNNR'
*      values          = lt_values
*    EXCEPTIONS
*      id_illegal_name = 0
*      OTHERS          = 0.
**  ENDIF.
*
*  PERFORM crear_objeto_app.
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0500  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0500 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 034.
    WHEN 'ACPT'.
      IF g_new_kunnr IS INITIAL.
        MESSAGE 'Error:Indicar cliente' TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      SELECT SINGLE name1 FROM kna1 INTO g_new_kunnr_name WHERE kunnr = g_new_kunnr.
      CALL SCREEN 510.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0510  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0510 OUTPUT.
*  SET PF-STATUS '100'.
*  SET CURSOR FIELD 'G_BARCODE'.
*  g_dynpro = '0510'.
*
*  PERFORM crear_objeto_app.
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0510  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0510 INPUT.

  CASE sy-ucomm.

    WHEN 'BACK'.
      IF lt_bobinas[] IS NOT INITIAL.
        CALL SCREEN 315.
      ELSE.
        REFRESH lt_bobinas.
        PERFORM limpiar_campos.
        LEAVE TO SCREEN 500.
      ENDIF.


    WHEN 'ACPT'.
      IF o_app->tabla_bobinas_leidas IS INITIAL.
        MESSAGE 'Error:No hay bobinas leidas' TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      CALL SCREEN 511.
    WHEN 'CONS'.
      IF lt_bobinas IS INITIAL.
        MESSAGE 'No hay bobinas leidas' TYPE 'S'.
        RETURN.
      ENDIF.

      CALL SCREEN 311.

  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  LECTURA_BOBINA_CAMBIO_CLIENTE  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE lectura_bobina_cambio_cliente INPUT.

  CHECK g_barcode IS NOT INITIAL .

  o_app->leer_bobina( EXPORTING con_material = abap_false
                      CHANGING  bar_code     = g_barcode
                      EXCEPTIONS lote_incorrecto      = 1
                                 lote_sin_existencias = 2 ).

  CLEAR g_barcode.
  CASE sy-subrc .
    WHEN 0.

      o_app->anadir_bobina_a_lista( ).

      PERFORM exportar_campos_app.

    WHEN 1.
      l_msg = text-010.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    WHEN 2.
      l_msg = text-012.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
  ENDCASE.

*  CHECK g_barcode IS NOT INITIAL .
*
*  TRANSLATE g_barcode TO UPPER CASE.
*
*  l_len = strlen( g_barcode ).
*
*  IF l_len >= 10.
*
*    l_len_charg = l_len - 10.
*
*    l_charg = g_barcode(10).
*
*  ELSE.
*    l_charg  = g_barcode.
*  ENDIF.
*
*
*
*  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*    EXPORTING
*      input  = g_barcode
*    IMPORTING
*      output = l_barcode.
*
*
*  g_barcode = l_barcode.
*
*  SELECT SINGLE matnr INTO g_matnr FROM mcha WHERE werks = g_werks AND charg = l_charg.
*  IF sy-subrc NE 0.
*    MESSAGE 'Error al determinar el material' TYPE 'W' DISPLAY LIKE 'E' .
*    RETURN.
*  ENDIF.
*
*
*
*  l_matnr_alpha_in = |{ g_matnr ALPHA = IN }|.
*
*  g_matnr = |{ g_matnr ALPHA = OUT }|.
*
*  SELECT SINGLE maktx INTO g_maktx FROM makt WHERE matnr = l_matnr_alpha_in AND spras = sy-langu.
*
*
*  l_obj_key = |{ l_matnr_alpha_in }{ l_charg }|.
*
*  REFRESH: lt_valueschar,lt_valuescurr,lt_valuesnum.
*
*  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
*    EXPORTING
*      objectkey       = l_obj_key
*      objecttable     = 'MCH1'
*      classnum        = 'Z_BOBINA'
*      classtype       = '023'
*    TABLES
*      allocvaluesnum  = lt_valuesnum
*      allocvalueschar = lt_valueschar
*      allocvaluescurr = lt_valuescurr
*      return          = lt_return.
*
*  IF line_exists( lt_return[ type = 'E'] ).
*    l_msg = 'Error:lote & incorrecto'.
*    REPLACE '&' IN l_msg WITH l_charg.
*    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
*    RETURN.
*  ENDIF.
*
*  TRY.
*      g_decision_empleo = lt_valueschar[ charact = 'LOBM_UDCODE' ]-value_char.
*      g_decision_empleo = g_decision_empleo+9(1).
*    CATCH cx_sy_itab_line_not_found.
*  ENDTRY.
*  TRY.
*      g_kunnr           = lt_valueschar[ charact = 'Z_CLIENTE' ]-value_char.
*    CATCH cx_sy_itab_line_not_found.
*  ENDTRY.
*  SELECT SINGLE matkl mtart zzgramaje zzancho
*                            FROM mara
*                            INTO ( l_matkl, l_mtart, l_gramaje,l_ancho )
*                            WHERE matnr = l_matnr_alpha_in.
*
*  SELECT SINGLE wgbez60 FROM t023t INTO g_calidad WHERE matkl = l_matkl AND spras = sy-langu.
*
*
*  g_gramaje_ancho = |{ l_gramaje }/{ l_ancho }|.
*  SELECT SINGLE clabs INTO g_peso FROM mchb WHERE matnr EQ l_matnr_alpha_in AND
*                                                  charg EQ l_charg AND
*                                                  werks EQ g_werks AND
*                                                  clabs GT 0.
*  IF sy-subrc EQ 0.
*    g_peso_text = |{ g_peso DECIMALS = 0 } KG |.
*  ELSE.
*    l_msg = 'Error:Lote & con 0 KG'.
*    REPLACE '&' IN l_msg WITH l_charg.
*    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
*    RETURN.
*  ENDIF.
*
*  g_charg = l_charg.
*
*
*  IF NOT line_exists( lt_bobinas[ charg = l_charg ] ).
*    ls_bobinas-matnr           = |{ l_matnr_alpha_in ALPHA = OUT }|.
*    ls_bobinas-charg           = l_charg.
*    ls_bobinas-decision_empleo = g_decision_empleo.
*    ls_bobinas-gramaje_ancho   = g_gramaje_ancho.
*    ls_bobinas-kunnr           = g_kunnr.
*    ls_bobinas-peso            = g_peso_text.
*    ls_bobinas-peso_real       = g_peso.
*    ls_bobinas-calidad         = g_calidad.
*
*    APPEND ls_bobinas TO lt_bobinas.
*  ENDIF.
*
*  CLEAR g_barcode.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0511  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0511 INPUT.

  CASE sy-ucomm.

    WHEN 'BACK'.
      SET SCREEN 0.
    WHEN 'ACPT'.
      o_app->cambiar_char_tabla_bobinas( EXPORTING  charact   = 'Z_CLIENTE'
                                                    new_value = CONV string( g_new_kunnr )
                                         EXCEPTIONS error_actualizar  = 1 ).
      IF sy-subrc NE 0.
        MESSAGE text-011 TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.

      SET SCREEN 0.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0313  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE status_0313 OUTPUT.
**  SET PF-STATUS 'xxxxxxxx'.
**  SET TITLEBAR 'xxx'.
*
*  DATA g_text_313 TYPE char30.
*  CASE g_dynpro.
*    WHEN '0410'.
*      g_text_313 = 'y no se convertirá.'.
*    WHEN '0510'.
*      g_text_313 = 'y no se modificará.'.
*    WHEN OTHERS.
*      g_text_313 = 'y no se traspasará.'.
*  ENDCASE.
*
*
*
*ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  CONSULTA_BOBINA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE consulta_bobina INPUT.
  CHECK g_barcode IS NOT INITIAL .

  o_app->leer_bobina( EXPORTING con_material = abap_false
                      CHANGING  bar_code     = g_barcode
                      EXCEPTIONS lote_incorrecto      = 1
                                 lote_sin_existencias = 2 ).
  CLEAR g_barcode.
  CASE sy-subrc .
    WHEN 0.
      PERFORM exportar_campos_app.
    WHEN 1.
      l_msg = text-010.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
    WHEN 2.
      l_msg = text-012.
      REPLACE '&' IN l_msg WITH o_app->charg.
      MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
  ENDCASE.

*  TRANSLATE g_barcode TO UPPER CASE.
*
*  l_len = strlen( g_barcode ).
*
*  IF l_len >= 10.
*
*    l_len_charg = l_len - 10.
*
*    l_charg = g_barcode(10).
*
*  ELSE.
*    l_charg  = g_barcode.
*  ENDIF.
*
*
*
*  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*    EXPORTING
*      input  = g_barcode
*    IMPORTING
*      output = l_barcode.
*
*
*  g_barcode = l_barcode.
*
*  SELECT SINGLE matnr INTO g_matnr FROM mcha WHERE werks = g_werks AND charg = l_charg.
*  IF sy-subrc NE 0.
*    MESSAGE 'Error al determinar el material' TYPE 'W' DISPLAY LIKE 'E' .
*    RETURN.
*  ENDIF.
*
*
*
*  l_matnr_alpha_in = |{ g_matnr ALPHA = IN }|.
*
*  g_matnr = |{ g_matnr ALPHA = OUT }|.
*
*  SELECT SINGLE maktx INTO g_maktx FROM makt WHERE matnr = l_matnr_alpha_in AND spras = sy-langu.
*
*
*  l_obj_key = |{ l_matnr_alpha_in }{ l_charg }|.
*
*  REFRESH: lt_valueschar,lt_valuescurr,lt_valuesnum.
*
*  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
*    EXPORTING
*      objectkey       = l_obj_key
*      objecttable     = 'MCH1'
*      classnum        = 'Z_BOBINA'
*      classtype       = '023'
*    TABLES
*      allocvaluesnum  = lt_valuesnum
*      allocvalueschar = lt_valueschar
*      allocvaluescurr = lt_valuescurr
*      return          = lt_return.
*
*  IF line_exists( lt_return[ type = 'E'] ).
*    l_msg = 'Error:lote & incorrecto'.
*    REPLACE '&' IN l_msg WITH l_charg.
*    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
*    RETURN.
*  ENDIF.
*
*  TRY.
*      g_decision_empleo = lt_valueschar[ charact = 'LOBM_UDCODE' ]-value_char.
*      g_decision_empleo = g_decision_empleo+9(1).
*    CATCH cx_sy_itab_line_not_found.
*  ENDTRY.
*  TRY.
*      g_kunnr           = lt_valueschar[ charact = 'Z_CLIENTE' ]-value_char.
*    CATCH cx_sy_itab_line_not_found.
*  ENDTRY.
*  SELECT SINGLE matkl mtart zzgramaje zzancho
*                            FROM mara
*                            INTO ( l_matkl, l_mtart, l_gramaje,l_ancho )
*                            WHERE matnr = l_matnr_alpha_in.
*
*  SELECT SINGLE wgbez60 FROM t023t INTO g_calidad WHERE matkl = l_matkl AND spras = sy-langu.
*
*
*  g_gramaje_ancho = |{ l_gramaje }/{ l_ancho }|.
*  SELECT SINGLE clabs INTO g_peso FROM mchb WHERE matnr EQ l_matnr_alpha_in AND
*                                                  charg EQ l_charg AND
*                                                  werks EQ g_werks AND
*                                                  clabs GT 0.
*  IF sy-subrc EQ 0.
*    g_peso_text = |{ g_peso DECIMALS = 0 } KG |.
*  ELSE.
*    l_msg = 'Error:Lote & con 0 KG'.
*    REPLACE '&' IN l_msg WITH l_charg.
*    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
*    RETURN.
*  ENDIF.
*
*  CLEAR g_barcode.
*
*  g_charg = l_charg.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0550  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0550 INPUT.

  CASE sy-ucomm.
    WHEN 'BACK'.
      SET SCREEN 0.


  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0550  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0550 OUTPUT.
  SET PF-STATUS '100'.
  SET TITLEBAR '10'.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  TEST  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE test OUTPUT.

  DATA lo_container TYPE REF TO cl_gui_custom_container.

  DATA lo_alv TYPE REF TO cl_gui_alv_grid.

  CREATE OBJECT lo_container
    EXPORTING
*     parent         =
      container_name = 'CONTAINER'
*     style          =
*     lifetime       = lifetime_default
*     repid          =
*     dynnr          =
*     no_autodef_progid_dynnr     =
*    EXCEPTIONS
*     cntl_error     = 1
*     cntl_system_error           = 2
*     create_error   = 3
*     lifetime_error = 4
*     lifetime_dynpro_dynpro_link = 5
*     others         = 6
    .
  IF sy-subrc <> 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  CREATE OBJECT lo_alv
    EXPORTING
*     i_shellstyle      = 0
*     i_lifetime        =
      i_parent = lo_container
*     i_appl_events     = space
*     i_parentdbg       =
*     i_applogparent    =
*     i_graphicsparent  =
*     i_name   =
*     i_fcat_complete   = SPACE
*    EXCEPTIONS
*     error_cntl_create = 1
*     error_cntl_init   = 2
*     error_cntl_link   = 3
*     error_dp_create   = 4
*     others   = 5
    .
  IF sy-subrc <> 0.
*   MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*              WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

  DATA: BEGIN OF ls_test,
          charg TYPE charg_d,
          peso  LIKE g_peso_text,
        END OF ls_test,
        lt_test LIKE STANDARD TABLE OF ls_test.

  DATA lt_fcat TYPE lvc_t_fcat.

  APPEND VALUE lvc_s_fcat( fieldname = 'CHARG' ) TO lt_fcat.
  APPEND VALUE lvc_s_fcat( fieldname = 'PESO' ) TO lt_fcat.

  ls_test-charg = '803AS0001'.
  ls_test-peso  = '2939232'.
  DO 35 TIMES.
    APPEND ls_test TO lt_test.
  ENDDO.

  CALL METHOD lo_alv->set_table_for_first_display
*    EXPORTING
*      i_buffer_active               =
*      i_bypassing_buffer            =
*      i_consistency_check           =
*      i_structure_name              =
*      is_variant                    =
*      i_save                        =
*      i_default                     = 'X'
*      is_layout                     =
*      is_print                      =
*      it_special_groups             =
*      it_toolbar_excluding          =
*      it_hyperlink                  =
*      it_alv_graphics               =
*      it_except_qinfo               =
*      ir_salv_adapter               =
    CHANGING
      it_outtab       = lt_test
      it_fieldcatalog = lt_fcat
*     it_sort         =
*     it_filter       =
*    EXCEPTIONS
*     invalid_parameter_combination = 1
*     program_error   = 2
*     too_many_lines  = 3
*     others          = 4
    .
  IF sy-subrc <> 0.
*   Implement suitable error handling here
  ENDIF.





ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  UBICAR_BOBINA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE ubicar_bobina INPUT.


  CHECK g_barcode IS NOT INITIAL .

  o_app->leer_bobina( EXPORTING  con_material         = abap_false
                      CHANGING   bar_code             = g_barcode
                      EXCEPTIONS lote_incorrecto      = 1
                                 lote_sin_existencias = 2
                                 OTHERS               = 3 ).
  CASE sy-subrc .
    WHEN 0.
      PERFORM exportar_campos_app.
    WHEN 1.

    WHEN 2.
  ENDCASE.


*  TRANSLATE g_barcode TO UPPER CASE.
*
*  l_len = strlen( g_barcode ).
*  IF l_len >= 10.
*    l_len_charg = l_len - 10.
*    l_charg     = g_barcode(10).
*  ELSE.
*    l_charg  = g_barcode.
*  ENDIF.
*
*  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*    EXPORTING
*      input  = g_barcode
*    IMPORTING
*      output = l_barcode.
*
*  g_barcode = l_barcode.
*
*
*
*  SELECT matnr INTO TABLE lt_matnr
*               FROM mcha
*              WHERE werks = g_werks AND charg = l_charg ORDER BY ersda DESCENDING.
*  IF sy-subrc NE 0.
*    MESSAGE 'Error al determinar el material' TYPE 'W' DISPLAY LIKE 'E' .
*    RETURN.
*  ELSE.
*    l_matnr = lt_matnr[ 1 ].
*  ENDIF.
*
*  l_matnr_alpha_in = |{ l_matnr ALPHA = IN }|.
*
*  SELECT SINGLE lgort clabs INTO (g_lgort, g_peso)
*                            FROM mchb WHERE matnr EQ l_matnr_alpha_in AND
*                                            charg EQ l_charg AND
*                                            werks EQ g_werks AND
*                                            clabs GT 0.
*  IF sy-subrc EQ 0.
*    g_peso_text = |{ g_peso DECIMALS = 0 } KG |.
*  ELSE.
*    MESSAGE 'Lote sin existencias' TYPE 'S' DISPLAY LIKE 'E'.
*    RETURN.
*  ENDIF.
*
*
*
*
*  l_obj_key = |{ l_matnr_alpha_in }{ l_charg }|.
*
*  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
*    EXPORTING
*      objectkey       = l_obj_key
*      objecttable     = 'MCH1'
*      classnum        = 'Z_BOBINA'
*      classtype       = '023'
*    TABLES
*      allocvaluesnum  = lt_valuesnum
*      allocvalueschar = lt_valueschar
*      allocvaluescurr = lt_valuescurr
*      return          = lt_return.
*
*  IF line_exists( lt_return[ type = 'E'] ).
*    l_msg =  'Error: lote & incorrecto o traspaso no permitido'.
*    REPLACE '&' IN l_msg WITH l_charg.
*    MESSAGE l_msg TYPE 'S' DISPLAY LIKE 'E'.
*    CLEAR:g_barcode, g_mostrar_botones.
*    RETURN.
*  ENDIF.
*
*  TRY.
*      g_decision_empleo = lt_valueschar[ charact = 'LOBM_UDCODE' ]-value_char.
*      g_decision_empleo = g_decision_empleo+9(1).
*    CATCH cx_sy_itab_line_not_found.
*  ENDTRY.
*  TRY.
*      g_kunnr           = lt_valueschar[ charact = 'Z_CLIENTE' ]-value_char.
*    CATCH cx_sy_itab_line_not_found.
*  ENDTRY.
*  CLEAR g_peso_text.
*
*
*
*  SELECT SINGLE mtart matkl zzgramaje zzancho
*                            FROM mara
*                            INTO ( l_mtart, l_matkl, l_gramaje,l_ancho )
*                            WHERE matnr = l_matnr_alpha_in.
*
*  SELECT SINGLE wgbez60 FROM t023t INTO g_calidad WHERE matkl = l_matkl AND spras = sy-langu.
*
*
*  g_gramaje_ancho = |{ l_gramaje }/{ l_ancho }|.
*  g_matnr = |{ l_matnr ALPHA = OUT }|.
*  g_charg = l_charg.
*
*


  CALL SCREEN 610.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0610  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0610 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 600.
    WHEN 'ACPT'.
      PERFORM ubicar_bobina.

  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0600  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0600 INPUT.
  CASE sy-ucomm.
    WHEN 'BACK'.
      LEAVE TO SCREEN 030.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXPORTAR_CAMPOS_APP  OUTPUT
*&---------------------------------------------------------------------*
*       text
**----------------------------------------------------------------------*
*MODULE exportar_campos_app OUTPUT.
*
*  PERFORM exportar_campos_app.
*
*
*
*ENDMODULE.
