*&---------------------------------------------------------------------*
*&  Include           ZRPP0028_I01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  CASE gv_okcode.
    WHEN 'BACK'.
      CLEAR: gv_okcode.
      LEAVE PROGRAM.

    WHEN 'PLANI'.
      IF gv_nombre_contr IS INITIAL.
        MESSAGE i354(zpp). "Obligatorio informar contramaestre.
        RETURN.
      ENDIF.

      IF gv_nombre_oper IS INITIAL.
        MESSAGE i328(zpp). "Obligatorio informar operario.
        RETURN.
      ENDIF.

      CLEAR: gv_okcode.
      LEAVE TO SCREEN 0300.

    WHEN 'NOTI'.
*      CLEAR: gv_okcode.
*      LEAVE TO SCREEN 0200.
      PERFORM call_zpp0004.

*    WHEN 'ALTA'.
*      CLEAR: gv_okcode.
*      LEAVE TO SCREEN 0400.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*&      Module  CAMBIO_TURNO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE cambio_turno INPUT.
*
*  TYPES: tty_dd07v TYPE STANDARD TABLE OF dd07v.
*  DATA: lt_turno TYPE tty_dd07v.
*  DATA: wa_turno TYPE LINE OF tty_dd07v.
*  DATA: lv_answer TYPE c,
*        lv_turno  TYPE zzturno.
*
*  DATA: lv_hora_desde(8),
*        lv_hora_hasta(8).
*
*  SELECT SINGLE turno hora_desde hora_hasta FROM zpp_turno
*    INTO (lv_turno, gv_hora_desde, gv_hora_hasta)
*    WHERE turno = gv_turno.
*
*  IF sy-subrc <> 0.
*    CLEAR: gv_turno.
*    MESSAGE e126(zpp).
*
*  ELSE.
*    WRITE gv_hora_desde TO lv_hora_desde USING EDIT MASK '__:__:__'.
*    WRITE gv_hora_hasta TO lv_hora_hasta USING EDIT MASK '__:__:__'.
*
*
*    CONCATENATE lv_hora_desde lv_hora_hasta INTO gv_rango_horas
*    SEPARATED BY '-'.
*
*    IF gv_turno <> 'T3'.
*      IF sy-uzeit < gv_hora_desde OR sy-uzeit > gv_hora_hasta.
*        CALL FUNCTION 'POPUP_TO_CONFIRM'
*          EXPORTING
**           TITLEBAR       = 'Verificación de horas'
**           DIAGNOSE_OBJECT             = ' '
*            text_question  = text-003
*            text_button_1  = 'Sí'(008)
**           ICON_BUTTON_1  = ' '
*            text_button_2  = 'No'(009)
**           ICON_BUTTON_2  = ' '
*            default_button = '2'
**           DISPLAY_CANCEL_BUTTON       = 'X'
**           USERDEFINED_F1_HELP         = ' '
**           START_COLUMN   = 25
**           START_ROW      = 6
**           POPUP_TYPE     =
**           IV_QUICKINFO_BUTTON_1       = ' '
**           IV_QUICKINFO_BUTTON_2       = ' '
*          IMPORTING
*            answer         = lv_answer
**         TABLES
**           PARAMETER      =
*          EXCEPTIONS
*            text_not_found = 1
*            OTHERS         = 2.
*        IF sy-subrc <> 0.
**         Implement suitable error handling here
*        ELSE.
*          IF lv_answer <> '1'.
*            CLEAR: gv_turno, gv_rango_horas.
*          ELSE.
**            PERFORM obtener_prod_turnos.
*          ENDIF.
*        ENDIF.
*      ELSE.
**        PERFORM obtener_prod_turnos.
*      ENDIF.
*    ELSE.
*      IF ( sy-uzeit >= '220000' AND sy-uzeit <= '235959' ) OR
*         ( sy-uzeit >= '000000' AND sy-uzeit <= '055959' ).
**        PERFORM obtener_prod_turnos.
*      ELSE.
*        CALL FUNCTION 'POPUP_TO_CONFIRM'
*          EXPORTING
**           TITLEBAR       = 'Verificación de horas'
**           DIAGNOSE_OBJECT             = ' '
*            text_question  = text-003
*            text_button_1  = 'Sí'(008)
**           ICON_BUTTON_1  = ' '
*            text_button_2  = 'No'(009)
**           ICON_BUTTON_2  = ' '
*            default_button = '2'
**           DISPLAY_CANCEL_BUTTON       = 'X'
**           USERDEFINED_F1_HELP         = ' '
**           START_COLUMN   = 25
**           START_ROW      = 6
**           POPUP_TYPE     =
**           IV_QUICKINFO_BUTTON_1       = ' '
**           IV_QUICKINFO_BUTTON_2       = ' '
*          IMPORTING
*            answer         = lv_answer
**         TABLES
**           PARAMETER      =
*          EXCEPTIONS
*            text_not_found = 1
*            OTHERS         = 2.
*        IF sy-subrc <> 0.
**       Implement suitable error handling here
*        ELSE.
*          IF lv_answer <> '1'.
*            CLEAR: gv_turno, gv_rango_horas.
*          ELSE.
**            PERFORM obtener_prod_turnos.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*    ENDIF.
*  ENDIF.
*ENDMODULE.                 " CAMBIO_TURNO  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*MODULE user_command_0200 INPUT.
*
*  CASE gv_okcode.
*    WHEN 'EXIT' OR 'BACK'.
*      CLEAR: gv_okcode, gt_entradas.
*      REFRESH: gt_entradas.
*
*      CALL SCREEN '100'.
*  ENDCASE.
*
*ENDMODULE.                 " USER_COMMAND_0200  INPUT

MODULE user_command_0205 INPUT.

  CASE gv_okcode.
    WHEN 'ACEPTAR' OR 'EXIT'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0200  INPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.

  CASE gv_okcode.
    WHEN 'EXIT' OR 'BACK'.
      CLEAR: gv_okcode , GV_NOMBRE_OPER , gv_nombre_contr.
.
      CALL SCREEN '100'.
    WHEN 'INFO'.
      CLEAR: gv_okcode.
      CALL FUNCTION 'ZMFPP_VENTANA_LEYENDA_ICONOS'.
    WHEN '%_GC 118 3'.
      g_dblclick = 'X'.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0300  INPUT

*&---------------------------------------------------------------------*
*&      Module  CAMBIO_FECHA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE cambio_fecha INPUT.
  DATA: lv_date TYPE sy-datum.

* obtenemos el mes anterior al sy-datum
  CALL FUNCTION 'ADD_TIME_TO_DATE'
    EXPORTING
      i_idate = sy-datum
      i_time  = -1
      i_iprkz = '2'
*     I_RDMHD =
    IMPORTING
      o_idate = lv_date
* EXCEPTIONS
*     INVALID_PERIOD              = 1
*     INVALID_ROUND_UP_RULE       = 2
*     INTERNAL_ERROR              = 3
*     OTHERS  = 4
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ELSE.
    CONCATENATE lv_date(6) '01' INTO lv_date.
  ENDIF.

  IF gv_fecha < lv_date OR gv_fecha > sy-datum.
    CLEAR: gv_fecha.
    MESSAGE e127(zpp).
  ENDIF.
ENDMODULE.                 " CAMBIO_FECHA  INPUT
*&---------------------------------------------------------------------*
*&      Module  EXIT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE exit INPUT.
  SET SCREEN 0.
ENDMODULE.
