*&---------------------------------------------------------------------*
*& Report  ZRPP0091
*& Transacción visualizacion troqueles AS.
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zrpp0092.

TABLES: marc, knvp, mara, mvke.

"""""""""""""""""
" Tipos de datos
"""""""""""""""""
TYPES: BEGIN OF st_lin_alv.
         INCLUDE TYPE zrpp0091_s_alv.
       TYPES END OF st_lin_alv.



"""""""""""""""""
" Variables
"""""""""""""""""
CONSTANTS: cg_num_max_componentes TYPE int4 VALUE 10.


"""""""""""""""""
" Includes
"""""""""""""""""
INCLUDE zseis_patron_alv.


""""""""""""""""""""""
" Pantalla de selección
""""""""""""""""""""""

PARAMETERS     p_vkorg  TYPE mvke-vkorg OBLIGATORY.
PARAMETERS     p_vtweg  TYPE mvke-vtweg OBLIGATORY DEFAULT '10'.

SELECT-OPTIONS s_dwerk  FOR mvke-dwerk.
SELECT-OPTIONS s_matnr  FOR marc-matnr.
SELECT-OPTIONS s_kunnr  FOR knvp-kunnr.


SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-b01.
PARAMETERS: cbx_del AS CHECKBOX.

SELECT-OPTIONS: s_mstae FOR mara-mstae NO INTERVALS,
                s_mmsta FOR marc-mmsta NO INTERVALS,
                s_mstav FOR mara-mstav NO INTERVALS,
                s_vmsta FOR mvke-vmsta NO INTERVALS.
SELECTION-SCREEN END OF BLOCK b01.



""""""""""""""""""""""
"Rutinas
""""""""""""""""""""""

*&---------------------------------------------------------------------*
*&      Form  f_initialization.
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_initialization.

  vg_no_justif_cols = 'X'.
  PERFORM f_config_dynpro USING '0100' 'CC_ALV' 'T01' 'STA_100' space space.
ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  F_CREAR_CATALOGO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_crear_catalogo TABLES it_catalogo TYPE lvc_t_fcat USING vp_dynnr.

*  DATA vl_max_componentes TYPE int4.
*  LOOP AT it_alv ASSIGNING FIELD-SYMBOL(<fs_alv>).
*    IF <fs_alv>-num_componentes > vl_max_componentes. vl_max_componentes = <fs_alv>-num_componentes. ENDIF.
*  ENDLOOP.
*
*  IF vl_max_componentes IS INITIAL.
*    vl_max_componentes = 1.
*  ENDIF.


  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'ZRPP0091_S_ALV'
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = it_catalogo[]
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

*  LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>).
*    DATA(vl_sufijo) = substring( val = <fs_catalogo>-fieldname
*                                 off = strlen( <fs_catalogo>-fieldname ) - 2
*                                 len = 2 ).
*
*    IF vl_sufijo CO '0123456789'.
*      DATA(vl_num) = CONV int4( vl_sufijo ).
*      IF vl_num > vl_max_componentes.
*        DELETE it_catalogo. CONTINUE.
*      ENDIF.
*
*      <fs_catalogo>-scrtext_s = |{ <fs_catalogo>-scrtext_s } { vl_num }|.
*      <fs_catalogo>-scrtext_m = |{ <fs_catalogo>-scrtext_m } { vl_num }|.
*      <fs_catalogo>-scrtext_l = |{ <fs_catalogo>-scrtext_l } { vl_num }|.
**      <fs_catalogo>-coltext   = |{ <fs_catalogo>-coltext } { vl_num }|.
*    ENDIF.
*  ENDLOOP.
*
*  DELETE it_catalogo WHERE fieldname = 'NUM_COMPONENTES'.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_llenar_datos
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_llenar_datos TABLES tp_alv TYPE tt_lin_alv_patron USING vp_dynpro.


  DATA: tl_lvorm_rg TYPE RANGE OF mara-lvorm.
  IF cbx_del = space.
    tl_lvorm_rg = VALUE #( ( sign = 'I' option = 'EQ' low = space ) ).
  ENDIF.

  "Centros de la organización de ventas
  DATA: tl_werks_rg TYPE RANGE OF t001w-werks.

  SELECT 'I' AS sign, 'EQ' AS option, werks AS low
    INTO CORRESPONDING FIELDS OF TABLE @tl_werks_rg
    FROM tvkwz
    WHERE vkorg = @p_vkorg AND
          vtweg = @p_vtweg.
  CHECK sy-subrc = 0.



  "Datos info material cliente
  SELECT mvke~vkorg, mvke~vtweg, mvke~matnr, mvke~vmsta, mvke~lvorm, mvke~dwerk, mvke~vmstd,
         knmt~kunnr, knmt~kdmat, kna1~name1,
         makt~maktx, mara~lvorm AS lvorm_mara,
         mara~ersda, mara~bismt, mara~mstav, mara~mstae, mara~meins,
         mara~ferth, mara~spart, mara~mstde, mara~mstdv, mara~brgew, mara~gewei
    INTO TABLE @DATA(tl_mvke)
    FROM mvke LEFT OUTER JOIN knmt LEFT OUTER JOIN kna1 ON kna1~kunnr = knmt~kunnr
              ON knmt~vkorg = mvke~vkorg AND
                 knmt~vtweg = mvke~vtweg AND
                 knmt~matnr = mvke~matnr
              INNER JOIN mara ON mara~matnr = mvke~matnr
              LEFT OUTER JOIN makt ON makt~matnr = mvke~matnr AND
                                      makt~spras = @sy-langu
    WHERE mvke~vkorg = @p_vkorg       AND
          mvke~vtweg = @p_vtweg       AND
          mvke~matnr IN @s_matnr      AND
          mvke~dwerk IN @s_dwerk      AND
          mvke~lvorm IN @tl_lvorm_rg  AND
          mvke~vmsta IN @s_vmsta      AND
          mara~mstav IN @s_mstav      AND
          mara~mstae IN @s_mstae      AND
          mara~lvorm IN @tl_lvorm_rg  AND
          ( mara~matnr LIKE 'CO%' OR mara~mtart = 'ZPTO' ).
  CHECK tl_mvke IS NOT INITIAL.

  DELETE tl_mvke WHERE kunnr NOT IN s_kunnr.


  IF tl_mvke IS NOT INITIAL.
    "Busco en MARC por campo MATNR y obtengo CUOBJ.
    SELECT marc~werks, marc~matnr, marc~cuobj, marc~stdpd, marc~lvorm, marc~mmsta, marc~mmstd
      INTO TABLE @DATA(tl_marc_pt)
      FROM marc
      FOR ALL ENTRIES IN @tl_mvke
      WHERE  matnr = @tl_mvke-matnr AND
             werks IN @tl_werks_rg  AND
             lvorm IN @tl_lvorm_rg  AND
             mmsta IN @s_mmsta      AND
             cuobj <> '000000000000000000'.
  ENDIF.

  IF tl_marc_pt IS NOT INITIAL.
    "Busco en YHP_IDX_TD101 por campo CUOBJ y obtengo valores de campo MATNR (aquí es donde tenemos los componentes del conjunto)
    SELECT *
      INTO TABLE @DATA(tl_td101)
      FROM yhp_idx_td101
      FOR ALL ENTRIES IN @tl_marc_pt
      WHERE cuobj = @tl_marc_pt-cuobj.
    SORT tl_td101 BY cuobj clows.


    SELECT cuobj, matde
      INTO TABLE @DATA(tl_td100_pt)
      FROM yhp_idx_td100
      FOR ALL ENTRIES IN @tl_marc_pt
      WHERE cuobj = @tl_marc_pt-cuobj.
  ENDIF.



  IF tl_td101 IS NOT INITIAL.
    "Busco en MARC por campo MATNR y obtengo respectivos CUOBJS
    SELECT marc~werks, marc~matnr, marc~cuobj, marc~stdpd, marc~lvorm, marc~mmsta, marc~mmstd
      INTO TABLE @DATA(tl_marc_troqueles)
      FROM marc
      FOR ALL ENTRIES IN @tl_td101
      WHERE  matnr = @tl_td101-matnr AND
             werks IN @tl_werks_rg  AND
             lvorm IN @tl_lvorm_rg  AND
             mmsta IN @s_mmsta      AND
             cuobj <> '000000000000000000'.
  ENDIF.

  IF tl_marc_troqueles IS NOT INITIAL.
    "Busco en YHP_IDX_TD100 por campo CUOBJ y muestro valores de los campos DCUTT (Numero de troquel)  y TDCUT (Tipo de troquel).
    SELECT *
      INTO TABLE @DATA(tl_td100_troquel)
      FROM yhp_idx_td100
      FOR ALL ENTRIES IN @tl_marc_troqueles
      WHERE cuobj = @tl_marc_troqueles-cuobj.

    SELECT *
      INTO TABLE @DATA(tl_td130_troquel)
      FROM yhp_idx_td130
      FOR ALL ENTRIES IN @tl_marc_troqueles
      WHERE cuobj = @tl_marc_troqueles-cuobj.


    "Buscamos materiales semi del troquel
    SELECT cuobj, cself, p_matnr AS matnr_semi, mboar
      INTO TABLE @DATA(tl_td110)
      FROM yhp_idx_td110
      FOR ALL ENTRIES IN @tl_marc_troqueles
      WHERE cuobj   =  @tl_marc_troqueles-cuobj AND
            p_matnr <> @space.
    IF tl_td110 IS NOT INITIAL.
      SELECT marc~werks, marc~matnr, marc~cuobj, marc~stdpd, marc~lvorm, marc~mmsta, marc~mmstd
        INTO TABLE @DATA(tl_marc_semis)
        FROM marc
        FOR ALL ENTRIES IN @tl_td110
        WHERE  matnr = @tl_td110-matnr_semi AND
               lvorm IN @tl_lvorm_rg        AND
               mmsta IN @s_mmsta            AND
               cuobj <> '000000000000000000'.
    ENDIF.
  ENDIF.

  IF tl_marc_semis IS NOT INITIAL.
    SELECT *
      INTO TABLE @DATA(tl_td100_semi)
      FROM yhp_idx_td100
      FOR ALL ENTRIES IN @tl_marc_semis
      WHERE cuobj = @tl_marc_semis-cuobj.

    SELECT *
      INTO TABLE @DATA(tl_td130_semi)
      FROM yhp_idx_td130
      FOR ALL ENTRIES IN @tl_marc_semis
      WHERE cuobj = @tl_marc_semis-cuobj.
  ENDIF.




  DATA wl_alv LIKE LINE OF tp_alv.
  LOOP AT tl_mvke ASSIGNING FIELD-SYMBOL(<fs_mvke>).
    READ TABLE tl_marc_pt ASSIGNING FIELD-SYMBOL(<fs_marc_pt>) WITH KEY matnr = <fs_mvke>-matnr.
    CHECK sy-subrc = 0.

    READ TABLE tl_td100_pt ASSIGNING FIELD-SYMBOL(<fs_td100_pt>) WITH KEY cuobj = <fs_marc_pt>-cuobj.
    CHECK sy-subrc = 0.


    LOOP AT tl_td101 ASSIGNING FIELD-SYMBOL(<fs_td101>) WHERE cuobj = <fs_marc_pt>-cuobj.
      READ TABLE tl_marc_troqueles ASSIGNING FIELD-SYMBOL(<fs_marc_troqueles>) WITH KEY matnr = <fs_td101>-matnr.
      CHECK sy-subrc = 0.

      CLEAR wl_alv.
      wl_alv-vkorg      = <fs_mvke>-vkorg.
      wl_alv-vtweg      = <fs_mvke>-vtweg.
      wl_alv-kunnr      = <fs_mvke>-kunnr.
      wl_alv-name1      = <fs_mvke>-name1.
      wl_alv-matnr_pt   = <fs_mvke>-matnr.
      wl_alv-matde_pt   = <fs_td100_pt>-matde.
      wl_alv-mstae      = <fs_mvke>-mstae.
      wl_alv-mmsta      = <fs_marc_pt>-mmsta.
      wl_alv-mstav      = <fs_mvke>-mstav.
      wl_alv-vmsta      = <fs_mvke>-vmsta.
      wl_alv-matnr_compo = <fs_td101>-matnr.

      READ TABLE tl_td100_troquel ASSIGNING FIELD-SYMBOL(<fs_td100_troquel>) WITH KEY cuobj = <fs_marc_troqueles>-cuobj.
      IF sy-subrc = 0.
        wl_alv-dcutt_compo       = <fs_td100_troquel>-dcutt.
        wl_alv-tdcut_compo       = <fs_td100_troquel>-tdcut.
      ENDIF.

      READ TABLE tl_td130_troquel ASSIGNING FIELD-SYMBOL(<fs_td130_troquel>) WITH KEY cuobj = <fs_marc_troqueles>-cuobj.
      IF sy-subrc = 0.
        wl_alv-prton_compo  = <fs_td130_troquel>-prton.
        wl_alv-prtyp_compo  = <fs_td130_troquel>-prtyp.
      ENDIF.

      "Ahora miramos los datos de semis
      READ TABLE tl_td110 ASSIGNING FIELD-SYMBOL(<fs_td110>) WITH KEY cuobj = <fs_marc_troqueles>-cuobj
                                                                      mboar = 'S'.
      IF sy-subrc <> 0.
        READ TABLE tl_td110 ASSIGNING <fs_td110> WITH KEY cuobj = <fs_marc_troqueles>-cuobj.
      ENDIF.
      IF sy-subrc = 0.
        wl_alv-matnr_semi_compo = <fs_td110>-matnr_semi.

        READ TABLE tl_marc_semis ASSIGNING FIELD-SYMBOL(<fs_marc_semis>) WITH KEY matnr = wl_alv-matnr_semi_compo.
        IF sy-subrc = 0.
          READ TABLE tl_td100_semi ASSIGNING FIELD-SYMBOL(<fs_td100_semi>) WITH KEY cuobj = <fs_marc_semis>-cuobj.
          IF sy-subrc = 0.
            wl_alv-dcutt_semi       = <fs_td100_semi>-dcutt.
            wl_alv-tdcut_semi       = <fs_td100_semi>-tdcut.
          ENDIF.

          READ TABLE tl_td130_semi ASSIGNING FIELD-SYMBOL(<fs_td130_semi>) WITH KEY cuobj = <fs_marc_semis>-cuobj.
          IF sy-subrc = 0.
            wl_alv-prton_semi  = <fs_td130_semi>-prton.
            wl_alv-prtyp_semi  = <fs_td130_semi>-prtyp.
          ENDIF.
        ENDIF.
      ENDIF.

      APPEND wl_alv TO tp_alv.
    ENDLOOP.
  ENDLOOP.

  "Status clichés y troqueles
  CONSTANTS: cl_status_material_obsoleto TYPE mara-mstae VALUE '99'.
  SELECT SINGLE mmsta, mtstb
    INTO @DATA(wl_status_obsoleto)
    FROM t141t
    WHERE mmsta = @cl_status_material_obsoleto.


  IF tp_alv[] IS NOT INITIAL.
    SELECT matnr, mstae
      INTO TABLE @DATA(tl_mara_dcutt)
      FROM mara
      FOR ALL ENTRIES IN @tp_alv
      WHERE matnr = @tp_alv-dcutt_compo.
    SELECT matnr, mstae
      INTO TABLE @DATA(tl_mara_dcutt_semi)
      FROM mara
      FOR ALL ENTRIES IN @tp_alv
      WHERE matnr = @tp_alv-dcutt_semi.
    SELECT matnr, mstae
      INTO TABLE @DATA(tl_mara_prton)
      FROM mara
      FOR ALL ENTRIES IN @tp_alv
      WHERE matnr = @tp_alv-prton_compo.
    SELECT matnr, mstae
      INTO TABLE @DATA(tl_mara_prton_semi)
      FROM mara
      FOR ALL ENTRIES IN @tp_alv
      WHERE matnr = @tp_alv-prton_semi.
  ENDIF.



  LOOP AT tp_alv ASSIGNING FIELD-SYMBOL(<fs_alv>).
    READ TABLE tl_mara_dcutt ASSIGNING FIELD-SYMBOL(<fs_mara_dcutt>) WITH KEY matnr = <fs_alv>-dcutt_compo.
    IF sy-subrc = 0 AND <fs_mara_dcutt>-mstae = cl_status_material_obsoleto.
      <fs_alv>-dcutt_status = wl_status_obsoleto-mtstb.
    ENDIF.

    READ TABLE tl_mara_dcutt_semi ASSIGNING FIELD-SYMBOL(<fs_mara_dcutt_semi>) WITH KEY matnr = <fs_alv>-dcutt_semi.
    IF sy-subrc = 0 AND <fs_mara_dcutt_semi>-mstae = cl_status_material_obsoleto.
      <fs_alv>-dcutt_semi_status = wl_status_obsoleto-mtstb.
    ENDIF.

    READ TABLE tl_mara_prton ASSIGNING FIELD-SYMBOL(<fs_mara_prton>) WITH KEY matnr = <fs_alv>-prton_compo.
    IF sy-subrc = 0 AND <fs_mara_prton>-mstae = cl_status_material_obsoleto.
      <fs_alv>-prton_status = wl_status_obsoleto-mtstb.
    ENDIF.

    READ TABLE tl_mara_prton_semi ASSIGNING FIELD-SYMBOL(<fs_mara_prton_semi>) WITH KEY matnr = <fs_alv>-prton_semi.
    IF sy-subrc = 0 AND <fs_mara_prton_semi>-mstae = cl_status_material_obsoleto.
      <fs_alv>-prton_semi_status = wl_status_obsoleto-mtstb.
    ENDIF.
  ENDLOOP.



ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_handle_hotspot_click
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_handle_hotspot_click USING vp_dynpro vp_row_id vp_column_id wp_alv.

ENDFORM.
