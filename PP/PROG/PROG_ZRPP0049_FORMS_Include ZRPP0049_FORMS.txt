*&---------------------------------------------------------------------*
*&  Include           ZRPP0049_FORMS
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  F_INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_inicializacion_sel .

  DATA: lv_werks TYPE werks_d,
        ls_werks LIKE LINE OF s_werks.

  CLEAR: lv_werks, ls_werks.
  SELECT SINGLE parva FROM usr05
      INTO lv_werks
      WHERE bname = sy-uname AND
      parid = 'WRK'.

  IF lv_werks IS NOT INITIAL.
    ls_werks-sign = 'I'.
    ls_werks-option = 'EQ'.
    ls_werks-low = lv_werks.
    APPEND ls_werks TO s_werks.
  ENDIF.

ENDFORM.                    " F_INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*&      Form  F_INICIALIZACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_inicializacion .
  CLEAR: gt_datos.
  REFRESH: gt_datos.
ENDFORM.                    " F_INICIALIZACION
*&---------------------------------------------------------------------*
*&      Form  F_REC_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_rec_datos.

  SELECT * FROM caufv
    INTO CORRESPONDING FIELDS OF TABLE gt_datos
    WHERE plnbez IN s_matnr
      AND auart EQ 'ZC01'
      AND werks IN s_werks
      AND zzkunnr4 IN s_kunnr
      AND zzebeln4 IN s_ebeln
      AND aufnr IN s_aufnr
      AND ftrmi IN s_ftrmi.

  CHECK sy-subrc EQ 0. " si no se seleccionan órdenes de extrusión, no se hace nada

  SELECT * FROM caufv " obtenemos órdenes sucesoras
    APPENDING CORRESPONDING FIELDS OF TABLE gt_datos
    FOR ALL ENTRIES IN gt_datos
    WHERE aufnr EQ gt_datos-zzaufnr_ext.

  LOOP AT gt_datos ASSIGNING <datos>  WHERE NOT ( auart EQ 'ZC01'
                                        AND zzaufnr_ext IS NOT INITIAL ).
    SELECT SINGLE erdat FROM vbfa
      INTO <datos>-zz_fecha_expedicion
      WHERE vbelv EQ <datos>-zzebeln4
        AND posnv EQ <datos>-zzebelp4
        AND vbtyp_n EQ 'R'. " movimiento de mercancías para pedido

    SELECT SINGLE budat FROM aufm
      INTO <datos>-zz_fecha_entrada
      WHERE aufnr EQ <datos>-aufnr
        AND matnr EQ <datos>-plnbez
        AND werks EQ <datos>-werks.

    CASE <datos>-auart.
      WHEN 'ZC01'.
        IF <datos>-zz_fecha_entrada IS NOT INITIAL AND <datos>-ftrmi IS NOT INITIAL.
          <datos>-zzlead_entrada = <datos>-zz_fecha_entrada - <datos>-ftrmi.
        ENDIF.
      WHEN 'ZC02'.
        IF <datos>-zzaufnr_ext IS INITIAL.
          IF <datos>-zz_fecha_entrada IS NOT INITIAL AND <datos>-ftrmi IS NOT INITIAL.
            <datos>-zzlead_entrada = <datos>-zz_fecha_entrada - <datos>-ftrmi.
          ENDIF.
        ELSE. " si viene de extrusión, se integran los tiempos
          CLEAR gs_datos.

          READ TABLE gt_datos WITH KEY aufnr = <datos>-zzaufnr_ext ASSIGNING <datos2>.
          IF sy-subrc EQ 0.
            gs_datos = <datos2>.
            CLEAR <datos2>-aufnr. " la marcamos para borrar
          ELSE.
            SELECT SINGLE * FROM caufv
              INTO CORRESPONDING FIELDS OF gs_datos
              WHERE aufnr EQ <datos>-zzaufnr_ext.
          ENDIF.

          SELECT SINGLE budat FROM aufm
            INTO gs_datos-zz_fecha_entrada
            WHERE aufnr EQ gs_datos-aufnr
              AND matnr EQ gs_datos-plnbez
              AND werks EQ gs_datos-werks.

          IF gs_datos IS NOT INITIAL.
            IF <datos>-zz_fecha_entrada IS NOT INITIAL AND gs_datos-ftrmi IS NOT INITIAL.
              <datos>-zzlead_entrada = <datos>-zz_fecha_entrada - gs_datos-ftrmi.
              <datos>-zzftrmi_zplp = gs_datos-ftrmi. " se muestra la liberación en extrusión
            ENDIF.
          ENDIF.
        ENDIF.
    ENDCASE.
    IF <datos>-zz_fecha_expedicion IS NOT INITIAL AND <datos>-zz_fecha_entrada IS NOT INITIAL.
      <datos>-zzlead_expedicion = <datos>-zz_fecha_expedicion - <datos>-zz_fecha_entrada.
    ENDIF.
    <datos>-zzlead_total = <datos>-zzlead_expedicion + <datos>-zzlead_entrada.
  ENDLOOP.

  DELETE gt_datos WHERE aufnr IS INITIAL. " borramos las que hemos marcado
  DELETE gt_datos WHERE auart NOT IN s_auart.

  IF p_ent IS NOT INITIAL.
    DELETE gt_datos WHERE zz_fecha_entrada IS INITIAL.
  ELSEIF p_exp IS NOT INITIAL.
    DELETE gt_datos WHERE zz_fecha_expedicion IS INITIAL.
  ENDIF.

* rellenamos descripción
  LOOP AT gt_datos ASSIGNING <datos>.
    SELECT SINGLE maktx FROM makt
      INTO <datos>-maktx
      WHERE matnr EQ <datos>-plnbez
        AND spras EQ sy-langu.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F_REC_DATOS_V2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_rec_datos_v2.

  SELECT * FROM caufv
    INTO CORRESPONDING FIELDS OF TABLE gt_datos
    WHERE plnbez IN s_matnr
      AND auart EQ 'ZC01'
      AND werks IN s_werks
      AND zzkunnr4 IN s_kunnr
      AND zzebeln4 IN s_ebeln
      AND aufnr IN s_aufnr
      AND ftrmi IN s_ftrmi.

  CHECK sy-subrc EQ 0. " si no se seleccionan órdenes de extrusión, no se hace nada

  SELECT * FROM aufm INTO TABLE t_aufm_alta
    FOR ALL ENTRIES IN gt_datos
    WHERE aufnr EQ gt_datos-aufnr
      AND bwart EQ '101'.

  IF t_aufm_alta[] IS NOT INITIAL.
    SELECT * FROM aufm INTO TABLE t_aufm_baja
      FOR ALL ENTRIES IN t_aufm_alta
      WHERE matnr EQ t_aufm_alta-matnr
        AND charg EQ t_aufm_alta-charg
        AND bwart EQ '261'.
  ENDIF.

  IF t_aufm_baja[] IS NOT INITIAL.
    SELECT * FROM aufm " altas de las ZC02
      APPENDING TABLE t_aufm_alta
      FOR ALL ENTRIES IN t_aufm_baja
      WHERE aufnr EQ t_aufm_baja-aufnr
        AND bwart EQ '101'.
  ENDIF.

  IF t_aufm_baja[] IS NOT INITIAL.
    SELECT * FROM caufv " órdenes ZC02
      APPENDING CORRESPONDING FIELDS OF TABLE gt_datos
      FOR ALL ENTRIES IN t_aufm_baja
      WHERE aufnr EQ t_aufm_baja-aufnr.
  ENDIF.

  LOOP AT gt_datos ASSIGNING <datos>.
    DATA: ls_plancha_baja TYPE aufm,
          ls_plancha_alta TYPE aufm.
    TYPES: BEGIN OF ty_budat,
             budat_mkpf TYPE budat,
           END OF ty_budat.
    DATA: lt_budat TYPE TABLE OF ty_budat WITH HEADER LINE.

    REFRESH: t_aufm_aux, lt_budat.
    CLEAR: lt_budat, t_aufm_alta, t_aufm_aux, t_aufm_baja, gs_datos.
    t_aufm_aux[] = t_aufm_alta[].

    DELETE t_aufm_aux WHERE aufnr NE <datos>-aufnr. "altas para la orden
    SORT t_aufm_aux BY budat ASCENDING.

    IF t_aufm_aux[] IS NOT INITIAL.
      READ TABLE t_aufm_aux INDEX 1. "cogemos la entrada más temprana como fecha entrada
      <datos>-zz_fecha_entrada = t_aufm_aux-budat.

      SELECT budat_mkpf FROM mseg "cogemos todas las expediciones
        INTO CORRESPONDING FIELDS OF TABLE lt_budat
        FOR ALL ENTRIES IN t_aufm_aux
        WHERE matnr EQ t_aufm_aux-matnr
          AND charg EQ t_aufm_aux-charg
          AND ( bwart EQ '601' OR bwart EQ '641' ).

      SORT lt_budat BY budat_mkpf DESCENDING. "cogemos la expedición más tardía como fecha de expedición
      READ TABLE lt_budat INDEX 1.

      IF lt_budat IS NOT INITIAL.
        <datos>-zz_fecha_expedicion = lt_budat-budat_mkpf.
      ENDIF.
    ENDIF.

    CASE <datos>-auart.
      WHEN 'ZC01'.
        IF <datos>-zz_fecha_entrada IS NOT INITIAL AND <datos>-ftrmi IS NOT INITIAL.
          <datos>-zzlead_entrada = <datos>-zz_fecha_entrada - <datos>-ftrmi.
        ENDIF.
      WHEN 'ZC02'.
        CLEAR: ls_plancha_baja, ls_plancha_alta.
        READ TABLE t_aufm_baja WITH KEY aufnr = <datos>-aufnr INTO ls_plancha_baja.
        READ TABLE t_aufm_alta WITH KEY matnr = ls_plancha_baja-matnr
                                        charg = ls_plancha_baja-charg INTO ls_plancha_alta.
        IF ls_plancha_alta-aufnr IS INITIAL.
          IF <datos>-zz_fecha_entrada IS NOT INITIAL AND <datos>-ftrmi IS NOT INITIAL.
            <datos>-zzlead_entrada = <datos>-zz_fecha_entrada - <datos>-ftrmi.
          ENDIF.
        ELSE. " si viene de extrusión, se integran los tiempos
          CLEAR gs_datos.

          READ TABLE gt_datos WITH KEY aufnr = ls_plancha_alta-aufnr ASSIGNING <datos2>.
          IF sy-subrc EQ 0.
            gs_datos = <datos2>.
            CLEAR <datos2>-aufnr. " la marcamos para borrar
          ELSE.
            SELECT SINGLE * FROM caufv
              INTO CORRESPONDING FIELDS OF gs_datos
              WHERE aufnr EQ ls_plancha_alta-aufnr.
          ENDIF.

          READ TABLE t_aufm_alta WITH KEY aufnr = gs_datos-aufnr.
          gs_datos-zz_fecha_entrada = t_aufm_alta-budat.

          IF gs_datos IS NOT INITIAL.
            IF <datos>-zz_fecha_entrada IS NOT INITIAL AND gs_datos-ftrmi IS NOT INITIAL.
              <datos>-zzlead_entrada = <datos>-zz_fecha_entrada - gs_datos-ftrmi.
              <datos>-zzftrmi_zplp = gs_datos-ftrmi. " se muestra la liberación en extrusión
              <datos>-zzaufnr_ext = gs_datos-aufnr. " pintamos la orden de extrusión que hemos tenido en cuenta
            ENDIF.
          ENDIF.
        ENDIF.
    ENDCASE.
    IF <datos>-zz_fecha_expedicion IS NOT INITIAL AND <datos>-zz_fecha_entrada IS NOT INITIAL.
      <datos>-zzlead_expedicion = <datos>-zz_fecha_expedicion - <datos>-zz_fecha_entrada.
    ENDIF.
    <datos>-zzlead_total = <datos>-zzlead_expedicion + <datos>-zzlead_entrada.

  ENDLOOP.

  DELETE gt_datos WHERE aufnr IS INITIAL. " borramos las que hemos marcado
  DELETE gt_datos WHERE auart NOT IN s_auart.

  IF p_ent IS NOT INITIAL.
    DELETE gt_datos WHERE zz_fecha_entrada IS INITIAL.
  ELSEIF p_exp IS NOT INITIAL.
    DELETE gt_datos WHERE zz_fecha_expedicion IS INITIAL.
  ENDIF.

* rellenamos descripción
  LOOP AT gt_datos ASSIGNING <datos>.
    SELECT SINGLE maktx FROM makt
      INTO <datos>-maktx
      WHERE matnr EQ <datos>-plnbez
        AND spras EQ sy-langu.
  ENDLOOP.

ENDFORM.
