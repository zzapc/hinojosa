*&---------------------------------------------------------------------*
*&  Include           ZRPP0028_CLASS
*&---------------------------------------------------------------------*

************************************************
* dynpro 300
************************************************

CLASS lcl_application_300 DEFINITION.

  PUBLIC SECTION.
    METHODS handle_toolbar
                  FOR EVENT toolbar OF cl_gui_alv_grid
      IMPORTING e_object e_interactive.


*   Evento para detectar accion botonera
    METHODS handle_user_command
                  FOR EVENT user_command OF cl_gui_alv_grid
      IMPORTING e_ucomm.


*   Evento para navegar
    METHODS handle_hotspot_click
                  FOR EVENT hotspot_click OF cl_gui_alv_grid
      IMPORTING e_row_id e_column_id es_row_no.


ENDCLASS.



CLASS lcl_application_300  IMPLEMENTATION.

  METHOD handle_toolbar.
    CLEAR gs_toolbar_300.
    MOVE  'ACTUALIZAR'                TO gs_toolbar_300-function.
    MOVE  '@42@'                       TO gs_toolbar_300-icon.
    MOVE  text-040                   TO gs_toolbar_300-quickinfo.
    MOVE  text-040                  TO gs_toolbar_300-text.
    MOVE space                       TO gs_toolbar_300-disabled.
    APPEND gs_toolbar_300            TO e_object->mt_toolbar.

    CLEAR gs_toolbar_300.
    MOVE  'ALTA'                     TO gs_toolbar_300-function.
    MOVE  '@9P@'                       TO gs_toolbar_300-icon.
    MOVE  text-006                   TO gs_toolbar_300-quickinfo.
    MOVE  text-006                   TO gs_toolbar_300-text.
    MOVE space                       TO gs_toolbar_300-disabled.
    APPEND gs_toolbar_300                TO e_object->mt_toolbar.

    CLEAR gs_toolbar_300.
    MOVE  'FINALIZAR'                TO gs_toolbar_300-function.
    MOVE  '@DF@'                       TO gs_toolbar_300-icon.
    MOVE  text-007                   TO gs_toolbar_300-quickinfo.
    MOVE  text-007                   TO gs_toolbar_300-text.
    MOVE space                       TO gs_toolbar_300-disabled.
    APPEND gs_toolbar_300            TO e_object->mt_toolbar.

    CLEAR gs_toolbar_300.
    MOVE  'LIBERAR'                   TO gs_toolbar_300-function.
    MOVE  '@5Y@'                     TO gs_toolbar_300-icon.
    MOVE  text-044                   TO gs_toolbar_300-quickinfo.
    MOVE  text-044                   TO gs_toolbar_300-text.
    MOVE space                       TO gs_toolbar_300-disabled.
    APPEND gs_toolbar_300            TO e_object->mt_toolbar.


    CLEAR gs_toolbar_300.
    MOVE  'OBSERV'                   TO gs_toolbar_300-function.
    MOVE  '@0S@'                     TO gs_toolbar_300-icon.
    MOVE  text-016                   TO gs_toolbar_300-quickinfo.
    MOVE  text-016                   TO gs_toolbar_300-text.
    MOVE space                       TO gs_toolbar_300-disabled.
    APPEND gs_toolbar_300            TO e_object->mt_toolbar.

    CLEAR gs_toolbar_300.
    MOVE  'HELP'                   TO gs_toolbar_300-function.
    MOVE  '@35@'                     TO gs_toolbar_300-icon.
    MOVE  text-047                   TO gs_toolbar_300-quickinfo.
    MOVE  text-047                   TO gs_toolbar_300-text.
    MOVE space                       TO gs_toolbar_300-disabled.
    APPEND gs_toolbar_300            TO e_object->mt_toolbar.



  ENDMETHOD.


*&---------------------------------------------------------------------*
*         METHOD handle_user_command
*----------------------------------------------------------------------*
  METHOD handle_user_command.

    DATA: index_rows       TYPE         lvc_t_row,
          lt_sel_rows      TYPE         lvc_t_roid,
          ls_selected_line LIKE LINE OF lt_sel_rows.

    DATA: lv_error TYPE xfeld.
    DATA: lv_extnumber TYPE balnrext.
    DATA: num_reg TYPE sy-tabix.
    DATA: lv_answer    TYPE c.

    IF zclpp_trazabilidad_usuario=>validar_turno_actual( i_turno = gv_turno ) = 'E'.
      CLEAR: gv_nombre_oper , gv_turno , gv_okcode.
      LEAVE TO SCREEN 0100.
*        CALL SCREEN '100'.
    ENDIF.

    CASE e_ucomm.
      WHEN 'ALTA'.
        PERFORM alta.

      WHEN 'FINALIZAR'.

        CALL METHOD gr_grid_300->get_selected_rows(
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows ).

        CALL METHOD cl_gui_cfw=>flush.


        IF lines( lt_sel_rows ) <> 1.
          MESSAGE e298(zpp).
        ENDIF.

        CHECK gt_datos_300[ lt_sel_rows[ 1 ]-row_id ]-ind_fin = ' '.


*        CALL FUNCTION 'ENQUEUE_EZPP0030_QUEUE'
*          EXPORTING
*            mode_ztpp0009  = 'E'
*            werks          = gv_werks
*            x_werks        = ' '
*            _scope         = '2'
*            _wait          = ' '
*            _collect       = ' '
*          EXCEPTIONS
*            foreign_lock   = 1
*            system_failure = 2
*            OTHERS         = 3.
*        IF sy-subrc <> 0.
*          PERFORM aviso_seq_en_uso USING 'F'.
** Implement suitable error handling here
**          MESSAGE e315(zpp). "Imposible finalizar fabricación.  Contacte con el planificador.
*
*
*        ELSE.

          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              titlebar              = text-033   "Finalizar fabricación
*             DIAGNOSE_OBJECT       = ' '
              text_question         = text-032   "¿Desea finalizar la fabricación?
              text_button_1         = 'Sí'(008)
*             ICON_BUTTON_1         = ' '
              text_button_2         = 'No'(009)
*             ICON_BUTTON_2         = ' '
              default_button        = '2'
              display_cancel_button = ''
*             USERDEFINED_F1_HELP   = ' '
*             START_COLUMN          = 25
*             START_ROW             = 6
*             POPUP_TYPE            =
*             IV_QUICKINFO_BUTTON_1 = ' '
*             IV_QUICKINFO_BUTTON_2 = ' '
            IMPORTING
              answer                = lv_answer
*           TABLES
*             parameter             = lt_param
            EXCEPTIONS
              text_not_found        = 1
              OTHERS                = 2.
          IF sy-subrc <> 0.
*           Implement suitable error handling here
          ENDIF.

          IF lv_answer IS INITIAL OR lv_answer = '1'.

            ASSIGN gt_datos_300[ lt_sel_rows[ 1 ]-row_id ] TO FIELD-SYMBOL(<seleccionado>).

            CALL METHOD zcl_secuenciador=>upd_direct_o_difer_ztpp0009
              EXPORTING
                i_werks          = <seleccionado>-werks
                i_aufnr          = <seleccionado>-aufnr
                i_num_fabr       = <seleccionado>-num_fabr
                i_ind_fin_x      = 'X'
                i_ind_fin        = 'X' "Finalizar
              IMPORTING
                o_upd_diferido   = data(l_upd_dif)
                .

*            IF l_upd_dif = 'X'.
*              message |Secuenciador bloqueado. ... |.
*            ENDIF.

          ENDIF.

*            <seleccionado>-ind_fin = 'X'.
*
**            update ztpp0009
*            CLEAR gt_ztpp0009_upd[].
*            APPEND INITIAL LINE TO gt_ztpp0009_upd ASSIGNING FIELD-SYMBOL(<reg_alv_upd>).
*            <reg_alv_upd> = CORRESPONDING #( <seleccionado> ).
**          UPDATE ztpp0009 FROM TABLE gt_ztpp0009_upd.
*            UPDATE ztpp0009 SET ind_fin = 'X'
*                WHERE werks    = <seleccionado>-werks AND
*                      aufnr    = <seleccionado>-aufnr AND
*                      num_fabr = <seleccionado>-num_fabr.
*            CLEAR gt_ztpp0009_upd.

*          CALL FUNCTION 'DEQUEUE_EZPP0030_QUEUE'
*            EXPORTING
*              mode_ztpp0009 = 'E'
*              werks         = gv_werks
*              x_werks       = ' '
*              _scope        = '3'
*              _synchron     = ' '
*              _collect      = ' '.

*        ENDIF.


      WHEN 'ACTUALIZAR'.
        PERFORM f_actualizar. " TABLES gt_datos_300.
      WHEN 'OBSERV'.
        CALL METHOD gr_grid_300->get_selected_rows(
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows ).

        CALL METHOD cl_gui_cfw=>flush.

        IF lines( lt_sel_rows ) <> 1.
          MESSAGE e298(zpp).
        ENDIF.

        PERFORM f_observ USING lt_sel_rows[].

      WHEN 'LIBERAR'.
        CALL METHOD gr_grid_300->get_selected_rows(
          IMPORTING
            et_row_no     = lt_sel_rows
            et_index_rows = index_rows ).

        CALL METHOD cl_gui_cfw=>flush.

        IF lines( lt_sel_rows ) <> 1.
          MESSAGE e298(zpp).
        ENDIF.

        PERFORM f_liberar USING lt_sel_rows[].
      WHEN 'HELP'.
        CALL FUNCTION 'ZMFPP_VENTANA_LEYENDA_ICONOS'.

      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.

* Para navegar
  METHOD handle_hotspot_click.
    DATA: index_rows       TYPE         lvc_t_row,
          lt_sel_rows      TYPE         lvc_t_roid,
          ls_selected_line LIKE LINE OF lt_sel_rows.

    CALL METHOD gr_grid_300->get_selected_rows(
      IMPORTING
        et_row_no     = lt_sel_rows
        et_index_rows = index_rows ).

    CALL METHOD cl_gui_cfw=>flush.

    READ TABLE gt_datos_300 INTO wa_datos_sel INDEX e_row_id-index.
    CASE e_column_id.
      WHEN 'AUFNR'.
        FREE MEMORY ID 'BR1'.
        SET PARAMETER ID 'BR1' FIELD wa_datos_sel-aufnr.
        CALL TRANSACTION 'COR3' AND SKIP FIRST SCREEN.
      WHEN 'ZICON_OBSERVA'.
        CHECK wa_datos_sel-observaciones IS NOT INITIAL.
        MESSAGE wa_datos_sel-observaciones TYPE 'I'.
      WHEN 'ZICON_OBS_POPE'.
        CHECK wa_datos_sel-observ_pope IS NOT INITIAL.
        MESSAGE wa_datos_sel-observ_pope TYPE 'I'.


    ENDCASE.


  ENDMETHOD.                    "handle_hotspot_click

ENDCLASS.



***********************************************
* dynpro 400
***********************************************

*CLASS lcl_application_400 DEFINITION.
*
*  PUBLIC SECTION.
*    METHODS handle_toolbar
*                  FOR EVENT toolbar OF cl_gui_alv_grid
*      IMPORTING e_object e_interactive.
*
*
**   Evento para detectar accion botonera
*    METHODS handle_user_command
*                  FOR EVENT user_command OF cl_gui_alv_grid
*      IMPORTING e_ucomm.
*
*ENDCLASS.



*CLASS lcl_application_400  IMPLEMENTATION.
*
*  METHOD handle_toolbar.
*    CLEAR gs_toolbar_400.
*    MOVE  'ELIMINAR'                TO gs_toolbar_400-function.
*    MOVE  icon_delete               TO gs_toolbar_400-icon.
*    MOVE  text-013                  TO gs_toolbar_400-quickinfo.
*    MOVE  text-013                  TO gs_toolbar_400-text.
*    MOVE space                      TO gs_toolbar_400-disabled.
*    APPEND gs_toolbar_400           TO e_object->mt_toolbar.
*
*
*    MOVE  'REIMPRIMIR'               TO gs_toolbar_400-function.
*    MOVE icon_print                  TO gs_toolbar_400-icon.
*    MOVE  text-014                   TO gs_toolbar_400-quickinfo.
*    MOVE  text-014                   TO gs_toolbar_400-text.
*    MOVE space                       TO gs_toolbar_400-disabled.
*    APPEND gs_toolbar_400            TO e_object->mt_toolbar.
*
*
*  ENDMETHOD.


*&---------------------------------------------------------------------*
*         METHOD handle_user_command
*----------------------------------------------------------------------*
***  METHOD handle_user_command.
***    DATA: index_rows       TYPE         lvc_t_row,
***          lt_sel_rows      TYPE         lvc_t_roid,
***          ls_selected_line LIKE LINE OF lt_sel_rows.
***
***    DATA: lv_error TYPE xfeld.
***    DATA: lv_extnumber TYPE balnrext.
***    DATA: num_reg TYPE sy-tabix.
***    DATA: wa_datos_400 TYPE zepp0028_lotes.
***    DATA: l_rc TYPE c.
***
***
***    REFRESH lt_sel_rows.
***
***    CALL METHOD gr_grid_400->get_selected_rows
***      IMPORTING
***        et_row_no     = lt_sel_rows
***        et_index_rows = index_rows.
***
***    CALL METHOD cl_gui_cfw=>flush.
***
***    DESCRIBE TABLE  lt_sel_rows LINES num_reg.
***    IF num_reg = 0.
***      MESSAGE i000(0k) WITH text-001.
***    ELSEIF num_reg > 1.
***      MESSAGE i000(0k) WITH text-002.
***    ELSE.
***
***      READ TABLE lt_sel_rows INTO ls_selected_line INDEX 1.
***      READ TABLE gt_datos_400 INTO wa_datos_400 INDEX ls_selected_line-row_id.
***
***      CASE e_ucomm.
***        WHEN 'ELIMINAR'.
***          CALL FUNCTION 'POPUP_TO_CONFIRM_STEP'
***            EXPORTING
***              textline1      = text-018 "'¿Realmente desea borrar la notificación del nodo seleccionado?'(902)
****             textline2      = 'this node and all its subnodes?'(903)
***              titel          = text-019 "'Confirmación'(904)
***              cancel_display = ' '
***            IMPORTING
***              answer         = l_rc.
***          IF l_rc EQ 'J'.
***            CASE wa_datos_400-tipo.
***              WHEN ''.
***                PERFORM eliminar_etiqueta USING wa_datos_400
***                                          CHANGING wa_datos_sel
***                                                   lv_error.
***              WHEN 'P'.
***                PERFORM eliminar_pulper USING wa_datos_400
***                                        CHANGING wa_datos_sel
***                                                 lv_error.
***
***            ENDCASE.
***
***            PERFORM clean_vbles.
***
***            IF lv_error IS INITIAL.
***              DELETE gt_datos_400 INDEX ls_selected_line-row_id.
***
***              CALL METHOD gr_grid_400->refresh_table_display.
***            ELSE.
***              PERFORM mostrar_log.
***
***            ENDIF.
***          ENDIF.
***
***
***
***        WHEN 'REIMPRIMIR'.
***          PERFORM reimprimir USING wa_datos_sel
***                                   wa_datos_400.
***
***
***        WHEN OTHERS.
***      ENDCASE.
***    ENDIF.
***
***  ENDMETHOD.


*ENDCLASS.
