*----------------------------------------------------------------------*
***INCLUDE ZRPP0056_F01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  DROPBOXDOWN_CALIDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*

FORM dropboxdown_dyn200 .

  DATA: lt_list  TYPE vrm_values,
        ls_value LIKE LINE OF lt_list.

  CLEAR: lt_list[].
  LOOP AT zclpp_reg_vehiculo_master=>gt_destinos
          INTO DATA(ls_destino) WHERE werks = gs_dyn100-werks.
    CLEAR ls_value.
    ls_value-key   = ls_destino-id_destino.
    ls_value-text  = ls_destino-descr_destino.
    APPEND ls_value TO lt_list.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN200-DESTINO'
      values = lt_list.

* Tipo de carga.
  CLEAR: lt_list[].
  LOOP AT zclpp_reg_vehiculo_master=>gt_tp_carga
          INTO DATA(ls_tp_carga) WHERE werks = gs_dyn100-werks.
    CLEAR ls_value.
    ls_value-key   = ls_tp_carga-tp_carga.
    ls_value-text  = ls_tp_carga-descr_tp_carga.
    APPEND ls_value TO lt_list.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN200-TP_CARGA'
      values = lt_list.

* Contenedores.
  CLEAR: lt_list[].
  LOOP AT zclpp_reg_vehiculo_master=>gt_contenedores
          INTO DATA(ls_contenedores) WHERE werks = gs_dyn100-werks.
    CLEAR ls_value.
    ls_value-key   = ls_contenedores-id_contenedor.
*    ls_value-text  = ls_contenedores-descr_contenedor.
    APPEND ls_value TO lt_list.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN200-CONTENEDOR_ENTR'
      values = lt_list.


ENDFORM.

FORM dropboxdown_dyn500 .

  DATA: lt_list  TYPE vrm_values,
        ls_value LIKE LINE OF lt_list.

  CLEAR: lt_list[].
  LOOP AT zclpp_reg_vehiculo_master=>gt_destinos
          INTO DATA(ls_destino) WHERE werks = gs_dyn100-werks.
    CLEAR ls_value.
    ls_value-key   = ls_destino-id_destino.
    ls_value-text  = ls_destino-descr_destino.
    APPEND ls_value TO lt_list.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN500-DESTINO'
      values = lt_list.

* Tipo de carga.
  CLEAR: lt_list[].
  LOOP AT zclpp_reg_vehiculo_master=>gt_tp_carga
          INTO DATA(ls_tp_carga) WHERE werks = gs_dyn100-werks.
    CLEAR ls_value.
    ls_value-key   = ls_tp_carga-tp_carga.
    ls_value-text  = ls_tp_carga-descr_tp_carga.
    APPEND ls_value TO lt_list.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN500-TP_CARGA'
      values = lt_list.

* Contenedores.
  CLEAR: lt_list[].
  LOOP AT zclpp_reg_vehiculo_master=>gt_contenedores
          INTO DATA(ls_contenedores) WHERE werks = gs_dyn100-werks.
    CLEAR ls_value.
    ls_value-key   = ls_contenedores-id_contenedor.
*    ls_value-text  = ls_contenedores-descr_contenedor.
    APPEND ls_value TO lt_list.
  ENDLOOP.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN500-CONTENEDOR_ENTR'
      values = lt_list.

  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN500-CONTENEDOR_SALI'
      values = lt_list.

* Actualización de los campos actualizados via popup
  DATA: dyfields LIKE dynpread OCCURS 1 WITH HEADER LINE.

  dyfields-fieldname =  'GS_DYN500-PESO_BRUTO'.
  dyfields-fieldvalue = gs_dyn500-peso_bruto.
  APPEND dyfields.
  dyfields-fieldname =  'GS_DYN500-PESO_BRUTO_REMOL'.
  dyfields-fieldvalue = gs_dyn500-peso_bruto_remol.
  APPEND dyfields.
  dyfields-fieldname =  'GS_DYN500-TARA'.
  dyfields-fieldvalue = gs_dyn500-tara.
  APPEND dyfields.
  dyfields-fieldname =  'GS_DYN500-TARA_REMOL'.
  dyfields-fieldvalue = gs_dyn500-tara_remol.
  APPEND dyfields.
  dyfields-fieldname =  'GS_DYN500-CONTENEDOR_ENTR'.
  dyfields-fieldvalue = gs_dyn500-contenedor_entr.
  APPEND dyfields.
  dyfields-fieldname =  'GS_DYN500-PESO_NETO'.
  dyfields-fieldvalue = gs_dyn500-peso_neto.
  APPEND dyfields.
  dyfields-fieldname =  'GS_DYN500-FECHA'.
  dyfields-fieldvalue = gs_dyn500-peso_neto.
  APPEND dyfields.
  dyfields-fieldname =  'GS_DYN500-HORA'.
  dyfields-fieldvalue = gs_dyn500-peso_neto.
  APPEND dyfields.

  CALL FUNCTION 'DYNP_VALUES_UPDATE'
    EXPORTING
      dyname               = sy-cprog
      dynumb               = sy-dynnr
    TABLES
      dynpfields           = dyfields
    EXCEPTIONS
      invalid_abapworkarea = 1
      invalid_dynprofield  = 2
      invalid_dynproname   = 3
      invalid_dynpronummer = 4
      invalid_request      = 5
      no_fielddescription  = 6
      undefind_error       = 7
      OTHERS               = 8.
  IF sy-subrc <> 0.
  ENDIF.


ENDFORM.


FORM montar_dyn300.

  IF gs_dyn300-container IS BOUND.
    gs_dyn300-container->free( ).
    FREE gs_dyn300-container.
    FREE gs_dyn300-go_alv.
  ENDIF.

  IF gs_dyn300-container IS NOT BOUND.

    CREATE OBJECT gs_dyn300-container
      EXPORTING
        container_name              = 'GS_DYN300-CONTAINER'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.
        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn300-container
            container_name = 'GS_DYN300-CONTAINER'
          IMPORTING
            r_salv_table   = gs_dyn300-go_alv
          CHANGING
            t_table        = gt_reg_en_espera.
      CATCH cx_root .
    ENDTRY.

    PERFORM tunning_alv_300.

    gs_dyn300-go_alv->display( ).

  ELSE.
    TRY.
        CALL METHOD gs_dyn300-go_alv->set_data
          CHANGING
            t_table = gt_reg_en_espera.

      CATCH cx_root .
    ENDTRY.

    gs_dyn300-go_alv->refresh( "s_stable     = 'X'
                               refresh_mode = if_salv_c_refresh=>full ).
    cl_gui_cfw=>flush( ).
  ENDIF.


ENDFORM.
FORM montar_dyn400.

  IF gs_dyn400-container IS BOUND.
    gs_dyn400-container->free( ).
    FREE gs_dyn400-container.
    FREE gs_dyn400-go_alv.
  ENDIF.

  IF gs_dyn400-container IS NOT BOUND.

    CREATE OBJECT gs_dyn400-container
      EXPORTING
        container_name              = 'GS_DYN400-CONTAINER'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.
        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn400-container
            container_name = 'GS_DYN400-CONTAINER'
          IMPORTING
            r_salv_table   = gs_dyn400-go_alv
          CHANGING
            t_table        = gt_reg_en_planta.
      CATCH cx_root .
    ENDTRY.

    PERFORM tunning_alv_400.

    gs_dyn400-go_alv->display( ).

  ELSE.
    gs_dyn400-go_alv->refresh( ).
  ENDIF.


ENDFORM.


FORM tunning_alv_300.

  DATA: lr_functions TYPE REF TO cl_salv_functions_list,
        l_text       TYPE string.
  DATA: lv_key    TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout TYPE REF TO cl_salv_layout.
  DATA: lr_columns TYPE REF TO cl_salv_columns,
        lr_column  TYPE REF TO cl_salv_column_table.

  DATA: lr_events TYPE REF TO cl_salv_events_table.
  lr_events = gs_dyn300-go_alv->get_event( ).

  CREATE OBJECT gr_events_300.
  SET HANDLER gr_events_300->on_user_command FOR lr_events.


  lv_key-report = sy-repid.
  lo_layout = gs_dyn300-go_alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn300-go_alv->get_functions( ).
  lr_functions->set_all( 'X' ).

  TRY.
      l_text = text-b02.
      lr_functions->add_function(
        name     = 'ANULAR'
        icon     = '@11@'
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.

  TRY.
      l_text = text-b03.
      lr_functions->add_function(
        name     = 'APESAJE'
        icon     = '@CO@' "space
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.


*  DATA: lr_events TYPE REF TO cl_salv_events_table.
*  lr_events = gs_dyn300-go_alv->get_event( ).
*
*  CREATE OBJECT gr_events_300.
*  SET HANDLER gr_events_300->on_user_command FOR lr_events.

  lr_columns = gs_dyn300-go_alv->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  DATA: lr_selections TYPE REF TO cl_salv_selections.
  lr_selections = gs_dyn300-go_alv->get_selections( ).

*... §7.1 set selection mode
  lr_selections->set_selection_mode( if_salv_c_selection_mode=>single ).


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MANDT' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'WERKS' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TDLNR' ).
      lr_column->set_short_text( value  = 'Transport.' ).
      lr_column->set_medium_text( value  = 'Transportista' ).
      lr_column->set_long_text( value  = 'Transportista' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ZMATRICULA2' ).
      lr_column->set_short_text( value  = 'Matr.Rem.' ).
      lr_column->set_medium_text( value  = 'Matricula Rem.' ).
      lr_column->set_long_text( value  = 'Matricula Rem.' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'IND_REMOLQUE' ).
      lr_column->set_short_text( value  = 'Remolq.' ).
      lr_column->set_medium_text( value  = 'Remolq.' ).
      lr_column->set_long_text( value  = 'Remolq.' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FECHA_ESP' ).
      lr_column->set_short_text( value  = 'F.Espera.' ).
      lr_column->set_medium_text( value  = 'Fecha espera' ).
      lr_column->set_long_text( value  = 'Fecha espera' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'HORA_ESP' ).
      lr_column->set_short_text( value  = 'H.Espera' ).
      lr_column->set_medium_text( value  = 'Hora espera' ).
      lr_column->set_long_text( value  = 'Hora espera' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'OBSERVACIONES' ).
      lr_column->set_short_text( value  = 'Observ.' ).
      lr_column->set_medium_text( value  = 'Observaciones' ).
      lr_column->set_long_text( value  = 'Observaciones' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ALBARAN' ).
      lr_column->set_short_text( value  = 'Albarán' ).
      lr_column->set_medium_text( value  = 'Albarán' ).
      lr_column->set_long_text( value  = 'Albarán' ).
    CATCH cx_salv_not_found .
  ENDTRY.

ENDFORM.

FORM tunning_alv_400.

  DATA: lr_functions TYPE REF TO cl_salv_functions_list,
        l_text       TYPE string.
  DATA: lv_key    TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout TYPE REF TO cl_salv_layout.
  DATA: lr_columns TYPE REF TO cl_salv_columns,
        lr_column  TYPE REF TO cl_salv_column_table.


  lv_key-report = sy-repid.
  lo_layout = gs_dyn400-go_alv->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn400-go_alv->get_functions( ).
  lr_functions->set_all( 'X' ).


  TRY.
      l_text = text-b02.
      lr_functions->add_function(
        name     = 'ANULAR'
        icon     = '@11@'
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.


  TRY.
      l_text = text-b07.
      lr_functions->add_function(
        name     = 'SALIDA'
        icon     = '@7Q@' "space
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.

  DATA: lr_events TYPE REF TO cl_salv_events_table.
  lr_events = gs_dyn400-go_alv->get_event( ).

  CREATE OBJECT gr_events_400.
  SET HANDLER gr_events_400->on_user_command FOR lr_events.

  lr_columns = gs_dyn400-go_alv->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  DATA: lr_selections TYPE REF TO cl_salv_selections.
  lr_selections = gs_dyn400-go_alv->get_selections( ).

*... §7.1 set selection mode
  lr_selections->set_selection_mode( if_salv_c_selection_mode=>single ).


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MANDT' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'WERKS' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TDLNR' ).
      lr_column->set_short_text( value  = 'Transport.' ).
      lr_column->set_medium_text( value  = 'Transportista' ).
      lr_column->set_long_text( value  = 'Transportista' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ZMATRICULA2' ).
      lr_column->set_short_text( value  = 'Matr.Rem.' ).
      lr_column->set_medium_text( value  = 'Matricula Rem.' ).
      lr_column->set_long_text( value  = 'Matricula Rem.' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'IND_REMOLQUE' ).
      lr_column->set_short_text( value  = 'Remolq.' ).
      lr_column->set_medium_text( value  = 'Remolq.' ).
      lr_column->set_long_text( value  = 'Remolq.' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'PESO_BRUTO' ).
      lr_column->set_short_text( value  = 'Peso bruto' ).
      lr_column->set_medium_text( value  = 'Peso bruto' ).
      lr_column->set_long_text( value  = 'Peso bruto' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TARA' ).
      lr_column->set_short_text( value  = 'Tara' ).
      lr_column->set_medium_text( value  = 'Tara' ).
      lr_column->set_long_text( value  = 'Tara' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'PESO_BRUTO_REMOL' ).
      lr_column->set_short_text( value  = 'P.bruto 2' ).
      lr_column->set_medium_text( value  = 'P.bruto 2' ).
      lr_column->set_long_text( value  = 'P.bruto 2' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'TARA2' ).
      lr_column->set_short_text( value  = 'Tara 2' ).
      lr_column->set_medium_text( value  = 'Tara 2' ).
      lr_column->set_long_text( value  = 'Tara 2' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'PESO_NETO' ).
      lr_column->set_short_text( value  = 'Peso neto' ).
      lr_column->set_medium_text( value  = 'Peso neto' ).
      lr_column->set_long_text( value  = 'Peso neto' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CONTENEDOR_ENTR' ).
      lr_column->set_short_text( value  = 'Cont.entra' ).
*      lr_column->set_medium_text( value  = 'Cont' ).
*      lr_column->set_long_text( value  = 'Tara' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CONTENEDOR_SALI' ).
      lr_column->set_short_text( value  = 'Con.salida' ).
*      lr_column->set_medium_text( value  = 'Tara' ).
*      lr_column->set_long_text( value  = 'Tara' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FECHA_INS' ).
      lr_column->set_short_text( value  = 'F.creación' ).
      lr_column->set_medium_text( value  = 'Tara' ).
      lr_column->set_long_text( value  = 'Tara' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'HORA_INS' ).
      lr_column->set_short_text( value  = 'H.creación' ).
      lr_column->set_medium_text( value  = 'H.creación' ).
      lr_column->set_long_text( value  = 'H.creación' ).
    CATCH cx_salv_not_found .
  ENDTRY.


  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FECHA_ESP' ).
      lr_column->set_short_text( value  = 'F.Espera.' ).
      lr_column->set_medium_text( value  = 'Fecha espera' ).
      lr_column->set_long_text( value  = 'Fecha espera' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'HORA_ESP' ).
      lr_column->set_short_text( value  = 'H.Espera' ).
      lr_column->set_medium_text( value  = 'Hora espera' ).
      lr_column->set_long_text( value  = 'Hora espera' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'OBSERVACIONES' ).
      lr_column->set_short_text( value  = 'Observ.' ).
      lr_column->set_medium_text( value  = 'Observaciones' ).
      lr_column->set_long_text( value  = 'Observaciones' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'ALBARAN' ).
      lr_column->set_short_text( value  = 'Albarán' ).
      lr_column->set_medium_text( value  = 'Albarán' ).
      lr_column->set_long_text( value  = 'Albarán' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FECHA_DEST' ).
      lr_column->set_short_text( value  = 'F.destino.' ).
      lr_column->set_medium_text( value  = 'Fecha destino' ).
      lr_column->set_long_text( value  = 'Fecha destino' ).
    CATCH cx_salv_not_found .
  ENDTRY.
  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'HORA_DEST' ).
      lr_column->set_short_text( value  = 'H.destino' ).
      lr_column->set_medium_text( value  = 'Hora destino' ).
      lr_column->set_long_text( value  = 'Hora destino' ).
    CATCH cx_salv_not_found .
  ENDTRY.

ENDFORM.

FORM handle_user_command300 USING i_ucomm TYPE salv_de_function.

  DATA: lt_rows TYPE salv_t_row.

  CASE i_ucomm.

    WHEN 'ANULAR'.
      PERFORM obtener_seleccion_alv300 CHANGING lt_rows.
      IF lt_rows IS INITIAL.
        MESSAGE |Seleccione un registro para borrar.| TYPE 'I'.
        EXIT.
      ELSE.
        DATA(ls_reg_esp) = gt_reg_en_espera[ lt_rows[ 1 ] ].
      ENDIF.

      PERFORM borrar_registro_en_espera USING ls_reg_esp.
    WHEN 'APESAJE'.
      PERFORM obtener_seleccion_alv300 CHANGING lt_rows.
      IF lt_rows IS INITIAL.
        MESSAGE |Seleccione un registro para enviar a pesaje.| TYPE 'I'.
        EXIT.
      ELSE.
        ls_reg_esp = gt_reg_en_espera[ lt_rows[ 1 ] ].
      ENDIF.
      gs_dyn200-sw_from_espera = 'X'.
*      gw_desde_300             = 'X'.
      PERFORM rellenar_dyn200 USING ls_reg_esp.

*      CALL SCREEN 0200.

      SET SCREEN 0200.
      LEAVE SCREEN.

      EXIT.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.


FORM handle_user_command400 USING i_ucomm TYPE salv_de_function.

  DATA: lt_rows TYPE salv_t_row.

  CASE i_ucomm.

    WHEN 'ANULAR'.
      PERFORM obtener_seleccion_alv400 CHANGING lt_rows.
      IF lt_rows IS INITIAL.
        MESSAGE |Seleccione un registro para borrar.| TYPE 'I'.
        EXIT.
      ELSE.
        DATA(ls_reg_planta) = gt_reg_en_planta[ lt_rows[ 1 ] ].
      ENDIF.

      PERFORM borrar_registro_en_planta USING ls_reg_planta.
    WHEN 'SALIDA'.
      PERFORM obtener_seleccion_alv400 CHANGING lt_rows.
      IF lt_rows IS INITIAL.
        MESSAGE |Seleccione un registro para enviar a salida.| TYPE 'I'.
        EXIT.
      ELSE.
        TRY.
            ls_reg_planta = gt_reg_en_planta[ lt_rows[ 1 ] ].
          CATCH cx_root .
        ENDTRY.
      ENDIF.
      PERFORM rellenar_dyn500 USING ls_reg_planta.
*        CALL SCREEN 0500.
      SET SCREEN 0500.
      LEAVE SCREEN.
*      PERFORM obtener_reg_en_planta.
*      gs_dyn400-go_alv->refresh( ).

    WHEN OTHERS.
  ENDCASE.

ENDFORM.

FORM rellenar_dyn200 USING ps_reg_esp TYPE zspp_vehiculos_espera.


  SELECT SINGLE *
    FROM ztpp0056
    INTO CORRESPONDING FIELDS OF gs_dyn200
    WHERE dninie = ps_reg_esp-dninie.

  SELECT SINGLE *
    FROM ztpp0059
    INTO CORRESPONDING FIELDS OF gs_dyn200
    WHERE werks           = gs_dyn100-werks AND
          id_reg_vehiculo = ps_reg_esp-id_reg_vehiculo.

  gs_dyn200-fecha_ins = ps_reg_esp-fecha_esp.
  gs_dyn200-hora_ins  = ps_reg_esp-hora_esp.

ENDFORM.

FORM rellenar_dyn500 USING ps_reg_planta TYPE zspp_vehiculos_planta.


  SELECT SINGLE *
    FROM ztpp0056
    INTO CORRESPONDING FIELDS OF gs_dyn500
    WHERE dninie = ps_reg_planta-dninie.

  SELECT SINGLE *
    FROM ztpp0059
    INTO CORRESPONDING FIELDS OF gs_dyn500
    WHERE werks           = gs_dyn100-werks AND
          id_reg_vehiculo = ps_reg_planta-id_reg_vehiculo.

  gs_dyn500-fecha = ps_reg_planta-fecha_dest.
  gs_dyn500-hora  = ps_reg_planta-hora_dest.

ENDFORM.

FORM obtener_reg_en_espera.

  gs_dyn300-werks = gs_dyn100-werks.

  gt_reg_en_espera = zclpp_reg_vehiculo_master=>obtener_vehiculos_en_espera( gs_dyn100-werks ).

ENDFORM.

FORM obtener_reg_en_planta.

  gs_dyn400-werks = gs_dyn100-werks.

  gt_reg_en_planta = zclpp_reg_vehiculo_master=>obtener_vehiculos_en_planta( gs_dyn100-werks ).

ENDFORM.


FORM alta_conductor .

  CALL FUNCTION 'ZMFPP_ALTA_CONDUCTOR'
    EXPORTING
      i_werks        = gs_dyn200-werks
      i_dninie       = gs_dyn200-dninie
      i_operario     = gs_dyn100-operario
    IMPORTING
      o_dninie       = gs_dyn200-dninie
      o_nombre       = gs_dyn200-nombre
      o_apellidos    = gs_dyn200-apellidos
      o_telefono     = gs_dyn200-telefono
      o_tdlnr        = gs_dyn200-tdlnr
      o_descr_transp = gs_dyn200-name1
      o_matricula    = gs_dyn200-zmatricula1
      o_rc           = l_rc.
  IF l_rc = '99'.
    CLEAR:
    gs_dyn200-dninie ,
    gs_dyn200-nombre ,
    gs_dyn200-apellidos ,
    gs_dyn200-telefono ,
    gs_dyn200-tdlnr ,
    gs_dyn200-name1 .
  ENDIF.

ENDFORM.

*FORM alta_vehiculo .
*  CALL FUNCTION 'ZMFPP_ALTA_VEHICULO'
*    EXPORTING
*      i_werks        = gs_dyn200-werks
*      i_matricula    = gs_dyn200-zmatricula1
*    IMPORTING
*      o_matricula1   = gs_dyn200-zmatricula1
*      o_ind_remolque = gs_dyn200-ind_remolque
*      o_matricula2   = gs_dyn200-zmatricula2
*      o_rc           = l_rc.
*
*  IF l_rc = '99'.
*    CLEAR:
*          gs_dyn200-zmatricula1,
*          gs_dyn200-ind_remolque,
*          gs_dyn200-zmatricula2.
*  ELSE.
*    gs_dyn200-sw_vehic_ok = 'X'.
*  ENDIF.
*ENDFORM.

FORM modif_conductor .
  DATA: l_rc TYPE char2.

  CALL FUNCTION 'ZMFPP_MODIF_CONDUCTOR'
    EXPORTING
      i_werks        = gs_dyn200-werks
      i_dninie       = gs_dyn200-dninie
      i_nombre       = gs_dyn200-nombre
      i_apellidos    = gs_dyn200-apellidos
      i_telefono     = gs_dyn200-telefono
      i_incidencia   = gs_dyn200-incidencia
      i_tdlnr        = gs_dyn200-tdlnr
      i_operario     = gs_dyn100-operario
    IMPORTING
      o_dninie       = gs_dyn200-dninie
      o_nombre       = gs_dyn200-nombre
      o_apellidos    = gs_dyn200-apellidos
      o_telefono     = gs_dyn200-telefono
      o_tdlnr        = gs_dyn200-tdlnr
      o_descr_transp = gs_dyn200-name1
      o_incidencia   = gs_dyn200-incidencia
      o_rc           = l_rc.

  IF l_rc = '01'.
    CLEAR: gs_dyn200-dninie ,
           gs_dyn200-nombre ,
           gs_dyn200-apellidos ,
           gs_dyn200-telefono ,
           gs_dyn200-tdlnr ,
           gs_dyn200-name1 .
  ENDIF.
ENDFORM.

FORM entrada_a_espera .

  DATA: l_rc TYPE char2.
  DATA: ls_reg_entr TYPE ztpp0059.



  PERFORM validar_dyn200 USING 'E' CHANGING l_rc.
  CHECK l_rc = '00'.

  CLEAR ls_reg_entr.
  ls_reg_entr-werks             = gs_dyn200-werks.
*ls_reg_entr-id_reg_vehiculo
  ls_reg_entr-dninie            = gs_dyn200-dninie.
  ls_reg_entr-zmatricula1       = gs_dyn200-zmatricula1.
  ls_reg_entr-zmatricula2       = gs_dyn200-zmatricula2.
  ls_reg_entr-ind_remolque      = gs_dyn200-ind_remolque.
  ls_reg_entr-contenedor_log      = gs_dyn200-contenedor_log.
  ls_reg_entr-destino           = gs_dyn200-destino.
  ls_reg_entr-tp_carga          = gs_dyn200-tp_carga.
  ls_reg_entr-albaran           = gs_dyn200-albaran.
  ls_reg_entr-observaciones     = gs_dyn200-observaciones.
  ls_reg_entr-estado            = zclpp_reg_vehiculo_master=>gc_est_aespera.
  ls_reg_entr-peso_bruto        = gs_dyn200-peso_bruto.
  ls_reg_entr-tara              = gs_dyn200-tara.
  ls_reg_entr-contenedor_entr   = gs_dyn200-contenedor_entr.
  ls_reg_entr-peso_bruto_remol  = gs_dyn200-peso_bruto_remol.
  ls_reg_entr-tara_remol        = gs_dyn200-tara_remol.
  ls_reg_entr-peso_cont_entr    = gs_dyn200-peso_cont_entr.


  CLEAR gs_dyn200-ok_code.

  CALL METHOD zclpp_reg_vehiculo_master=>procesar_entrada_vehiculo
    EXPORTING
      i_werks          = gs_dyn200-werks
      i_operario       = gs_dyn100-operario
      i_tp_carga       = gs_dyn200-tp_carga
      is_reg_entrada   = ls_reg_entr
    IMPORTING
      o_id_reg_entrada = gs_dyn200-id_reg_vehiculo
      o_rc             = l_rc.

  IF l_rc = '00'.
    MESSAGE |Registro de vehículo { gs_dyn200-id_reg_vehiculo } enviado a espera correctamente.| TYPE 'S'.
  ELSE.
    EXIT.
  ENDIF.

  IF zclpp_reg_vehiculo_master=>validar_turno_actual( i_turno = gs_dyn100-turno ) = 'E'.

    CLEAR: gs_dyn100-turno , gs_dyn100-operario.
    LEAVE TO SCREEN 100.
  ENDIF.


  LEAVE TO SCREEN 100.


ENDFORM.


FORM entrada_a_destino .

  DATA: l_rc TYPE char2.
  DATA: ls_reg_entr TYPE ztpp0059.

  PERFORM validar_dyn200 USING 'D' CHANGING l_rc.
  CHECK l_rc = '00'.

  CLEAR ls_reg_entr.
  ls_reg_entr-werks             = gs_dyn200-werks.

* Si ya se creó el reg, y viene de "En espera"->"A destino"
  IF gs_dyn200-id_reg_vehiculo IS NOT INITIAL.
    ls_reg_entr-id_reg_vehiculo = gs_dyn200-id_reg_vehiculo.
  ENDIF.

  ls_reg_entr-dninie            = gs_dyn200-dninie.
  ls_reg_entr-zmatricula1       = gs_dyn200-zmatricula1.
  ls_reg_entr-zmatricula2       = gs_dyn200-zmatricula2.
  ls_reg_entr-ind_remolque      = gs_dyn200-ind_remolque.
  ls_reg_entr-contenedor_log    = gs_dyn200-contenedor_log.
  ls_reg_entr-destino           = gs_dyn200-destino.
  ls_reg_entr-tp_carga          = gs_dyn200-tp_carga.
  ls_reg_entr-albaran           = gs_dyn200-albaran.
  ls_reg_entr-observaciones     = gs_dyn200-observaciones.
  ls_reg_entr-estado            = zclpp_reg_vehiculo_master=>gc_est_adestino.
  ls_reg_entr-peso_bruto        = gs_dyn200-peso_bruto.
  ls_reg_entr-tara              = gs_dyn200-tara.
  ls_reg_entr-contenedor_entr   = gs_dyn200-contenedor_entr.
  ls_reg_entr-peso_bruto_remol  = gs_dyn200-peso_bruto_remol.
  ls_reg_entr-tara_remol        = gs_dyn200-tara_remol.
  ls_reg_entr-peso_cont_entr    = gs_dyn200-peso_cont_entr.

*  lr_reg_vehiculo = NEW #( i_werks           = gs_dyn200-werks
*                           i_id_reg_vehiculo = gs_dyn200-id_reg_vehiculo ).

  CALL METHOD zclpp_reg_vehiculo_master=>procesar_entrada_vehiculo
    EXPORTING
      i_werks          = gs_dyn200-werks
      i_operario       = gs_dyn100-operario
      i_tp_carga       = gs_dyn200-tp_carga
      is_reg_entrada   = ls_reg_entr
    IMPORTING
      o_id_reg_entrada = gs_dyn200-id_reg_vehiculo
      o_rc             = l_rc.

  IF l_rc = '00'.
    IF gs_dyn200-id_reg_vehiculo IS NOT INITIAL.
      MESSAGE |Registro de vehículo { gs_dyn200-id_reg_vehiculo } enviado a destino correctamente.| TYPE 'S'.
    ELSE.
      MESSAGE |Registro de vehículo { gs_dyn200-id_reg_vehiculo } creado correctamente.| TYPE 'S'.
    ENDIF.

    IF zclpp_reg_vehiculo_master=>validar_turno_actual( i_turno = gs_dyn100-turno ) = 'E'.

      CLEAR: gs_dyn100-turno , gs_dyn100-operario.
      LEAVE TO SCREEN 100.
    ENDIF.


*    CASE gw_desde_300.
    CASE gs_dyn200-sw_from_espera.
      WHEN ' '.   LEAVE TO SCREEN 100.
      WHEN 'X'.   LEAVE TO SCREEN 300.
    ENDCASE.

  ELSE.
    EXIT.
  ENDIF.

ENDFORM.

FORM modif_vehiculo .
  DATA: l_rc TYPE char2.

  CALL FUNCTION 'ZMFPP_MODIF_VEHICULO'
    EXPORTING
      i_werks        = gs_dyn200-werks
      i_matricula    = gs_dyn200-zmatricula1
      i_matricula2   = gs_dyn200-zmatricula2
      i_ind_remolque = gs_dyn200-ind_remolque
    IMPORTING
      o_matricula1   = gs_dyn200-zmatricula1
      o_ind_remolque = gs_dyn200-ind_remolque
      o_matricula2   = gs_dyn200-zmatricula2
      o_rc           = l_rc.
  IF l_rc = '01'.
    CLEAR:
          gs_dyn200-zmatricula1,
          gs_dyn200-ind_remolque,
          gs_dyn200-zmatricula2.
  ENDIF.

ENDFORM.

FORM tratar_intro_200 .

  DATA: l_matricula LIKE gs_dyn200-zmatricula1,
        lv_answer   TYPE char01.

* DTM- Validar si el conductor está marcado para borrado

  IF gs_dyn200-dninie <> gs_dyn200_old-dninie AND
     gs_dyn200-dninie IS NOT INITIAL.

    SELECT SINGLE * FROM ztpp0056
      WHERE dninie EQ @gs_dyn200-dninie
        AND lvorm  EQ @abap_true
    INTO @DATA(ls_borrado).

    IF sy-subrc EQ 0.

      CLEAR: lv_answer.

      PERFORM popup_confirm CHANGING lv_answer.

      IF lv_answer = '1'. "Aceptar

        CLEAR: ls_borrado-lvorm.

        UPDATE ztpp0056 FROM ls_borrado.

      ELSE.

        CLEAR: gs_dyn200-nombre, gs_dyn200-apellidos, gs_dyn200-telefono,
               gs_dyn200-tdlnr, gs_dyn200-name1.

        EXIT.

      ENDIF.

    ENDIF.

  ENDIF.

  IF gs_dyn200-dninie <> gs_dyn200_old-dninie AND
     gs_dyn200-dninie IS NOT INITIAL.


    SELECT SINGLE nombre , apellidos , telefono , tdlnr , incidencia
      INTO ( @gs_dyn200-nombre , @gs_dyn200-apellidos , @gs_dyn200-telefono ,
             @gs_dyn200-tdlnr , @gs_dyn200-incidencia  )
      FROM ztpp0056
      WHERE dninie = @gs_dyn200-dninie.
    IF sy-subrc <> 0.
      MESSAGE 'Introducir id conductor válido.' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.

    ELSE.
      SELECT SINGLE name1 INTO @gs_dyn200-name1
        FROM zvpp_transportis
        WHERE lifnr = @gs_dyn200-tdlnr.

    ENDIF.
  ENDIF.

  IF gs_dyn200-dninie IS INITIAL.
    CLEAR: gs_dyn200-nombre ,
           gs_dyn200-apellidos ,
           gs_dyn200-telefono ,
           gs_dyn200-tdlnr ,
           gs_dyn200-name1 .
  ENDIF.

  IF gs_dyn200-dninie      IS NOT INITIAL AND
     gs_dyn200-zmatricula1 IS INITIAL     AND
     gs_dyn200-ok_code   <> 'NEWVEHI'     AND " si se pulsa "Vehículos" ya se procesa el botón
     gs_dyn200-ok_code   <> 'MODCON'. " si se pulsa "Modif.conductor" no se muestra relación vehículos.
    CALL FUNCTION 'ZMPP_MOSTRAR_REL_VEHICULOS'
      EXPORTING
        i_werks       = gs_dyn200-werks
        i_dninie      = gs_dyn200-dninie
        i_operario    = gs_dyn100-operario
      IMPORTING
        o_zmatricula1 = l_matricula
        o_rc          = l_rc.

    IF l_matricula IS NOT INITIAL.
      gs_dyn200-zmatricula1 = l_matricula.
    ENDIF.
  ENDIF.

  IF gs_dyn200-contenedor_entr IS NOT INITIAL.

    TRY.
        gs_dyn200-peso_cont_entr =
          zclpp_reg_vehiculo_master=>gt_contenedores[ werks         = gs_dyn200-werks
                                                      id_contenedor = gs_dyn200-contenedor_entr ]-tara.

      CATCH cx_root .
    ENDTRY.

  ENDIF.

  IF gs_dyn200-destino IS NOT INITIAL AND gs_dyn200-tp_carga IS NOT INITIAL AND
     ( NOT line_exists( zclpp_reg_vehiculo_master=>gt_rel_des_tpcarga[ werks    = gs_dyn200-werks
                                                                     destino  = gs_dyn200-destino
                                                                     tp_carga = gs_dyn200-tp_carga ] )
     ).
    MESSAGE 'Combinación destino - tipo de carga no válida.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.

  ENDIF.

ENDFORM.

* DTM

FORM popup_confirm CHANGING p_answer TYPE char01.


  DATA(lv_text) = |Conductor marcado para borrado ¿Desea activarlo?|.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      text_question         = lv_text
      text_button_1         = 'Aceptar'
      icon_button_1         = '@01@'
      text_button_2         = 'Cancelar'
      icon_button_2         = '@0W@'
      default_button        = '2'
      display_cancel_button = ' '
    IMPORTING
      answer                = p_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  IF sy-subrc <> 0.

    p_answer = 'A'.

  ENDIF.

ENDFORM.                    " POPUP_CONFIRM

* DTM


FORM tratar_intro_500 .

  CHECK gs_dyn500-peso_bruto <> 0 AND gs_dyn500-tara <> 0.

  IF gs_dyn500-ind_remolque = 'X'.
    CHECK gs_dyn500-peso_bruto_remol <> 0 AND gs_dyn500-tara_remol <> 0.
  ENDIF.

* Obtenemos pesos de contenedores, justo antes de calcular PESO NETO
  IF gs_dyn500-contenedor_entr IS NOT INITIAL.
    TRY.
        gs_dyn500-peso_cont_entr =
          zclpp_reg_vehiculo_master=>gt_contenedores[ werks         = gs_dyn500-werks
                                                    id_contenedor = gs_dyn500-contenedor_entr ]-tara.
      CATCH cx_root .
    ENDTRY.
  ENDIF.
  IF gs_dyn500-contenedor_sali IS NOT INITIAL.
    TRY.
        gs_dyn500-peso_cont_sali =
          zclpp_reg_vehiculo_master=>gt_contenedores[ werks         = gs_dyn500-werks
                                                    id_contenedor = gs_dyn500-contenedor_sali ]-tara.
      CATCH cx_root .
    ENDTRY.
  ENDIF.

* Cálculo del PESO NETO ***********
  IF gs_dyn500-tp_carga = '1' OR
     gs_dyn500-tp_carga = '2' OR
     gs_dyn500-tp_carga = '3' OR
     gs_dyn500-tp_carga = '4' OR
     gs_dyn500-tp_carga = '5' OR
    ( gs_dyn500-tp_carga = '6' AND gs_dyn500-destino <> '03' ) OR
     gs_dyn500-tp_carga = '7'.

    gs_dyn500-peso_neto = ( gs_dyn500-peso_bruto + gs_dyn500-peso_bruto_remol ) -
                          ( gs_dyn500-tara       + gs_dyn500-tara_remol ).
  ENDIF.

  IF gs_dyn500-tp_carga = '6' AND gs_dyn500-destino = '03'.

    gs_dyn500-peso_neto = ( gs_dyn500-peso_bruto + gs_dyn500-peso_bruto_remol - gs_dyn500-peso_cont_sali ) -
                          ( gs_dyn500-tara       + gs_dyn500-tara_remol       - gs_dyn500-peso_cont_entr ).
  ENDIF.

  IF gs_dyn500-peso_neto < 0.
    MESSAGE |Peso neto incorrecto.| TYPE 'S' DISPLAY LIKE 'E'.
    CLEAR: gs_dyn500-peso_neto.
  ENDIF.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  OBTENER_SOCIEDAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_sociedad .

  gs_dyn100-werks = zclpp_recetas_mp=>obtener_sociedad_usuario( ).

ENDFORM.

FORM dropboxdown_operarios_turno .

  CALL METHOD zclpp_trazabilidad_usuario=>obtener_datos_turno
    IMPORTING
      o_turno = gs_dyn100-turno.


  CALL METHOD zclpp_trazabilidad_usuario=>obtener_operarios_puesto_trab
    EXPORTING
      i_werks       = gs_dyn100-werks
      i_tp_operario = zclpp_trazabilidad_usuario=>tp_op_bascula_vehiculos
*     i_arbpl       = ''
    IMPORTING
      ot_operarios  = DATA(lt_operarios).

  DATA: lt_list  TYPE vrm_values,
        ls_value LIKE LINE OF lt_list.

  CLEAR lt_list[].
  DELETE ADJACENT DUPLICATES FROM lt_operarios.
  LOOP AT lt_operarios INTO DATA(l_oper).
    CLEAR ls_value.
    ls_value-key  = l_oper.
    TRANSLATE ls_value-key TO UPPER CASE.
    APPEND ls_value TO lt_list.
  ENDLOOP.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN100-OPERARIO'
      values = lt_list.

ENDFORM.


FORM desplegar_motivo.

  DATA: lt_list  TYPE vrm_values,
        ls_value LIKE LINE OF lt_list.

  LOOP AT zclpp_recetas_mp=>gt_motivos INTO DATA(ls_mot).
    CHECK ls_mot-werks = gs_dyn100-werks.
    CLEAR ls_value.
    ls_value-key   = ls_mot-cod_motivo.
    ls_value-text  = ls_mot-desc_motivo.
    APPEND ls_value TO lt_list.
  ENDLOOP.
  CALL FUNCTION 'VRM_SET_VALUES'
    EXPORTING
      id     = 'GS_DYN300-COD_MOTIVO'
      values = lt_list.


ENDFORM.

FORM validar_dyn200 USING p_boton
                    CHANGING p_rc.

  DATA: lw_incidencia TYPE flag.

  lw_incidencia = ' '.
  p_rc = '00'.


  IF gs_dyn200-nombre IS INITIAL.
    p_rc = '01'.
    MESSAGE 'Seleccionar conductor.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.
  ENDIF.


  PERFORM validacion_conductor CHANGING p_rc.
  CASE p_rc.
    WHEN '01'.
      MESSAGE 'Seleccionar conductor.' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.

    WHEN '02'.
      lw_incidencia = 'X'.
*      MESSAGE 'Conductor con incidencia. Contactar con responsable.' TYPE 'S'. " DISPLAY LIKE 'E' .
*      EXIT.
    WHEN '03'.
      MESSAGE 'Conductor no encontrado.' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.

    WHEN OTHERS.
  ENDCASE.


  PERFORM validacion_vehiculo  USING p_boton
                             CHANGING p_rc.
  CASE p_rc.
    WHEN '01'.
      MESSAGE 'Obligatorio informar vehículo.' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.

    WHEN '02'.
      MESSAGE 'Vehículo con segundo remolque, obligatorio informar peso bruto 2.' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.

    WHEN '03'.
      MESSAGE 'Matrícula de vehículo incorrecto.' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.
    WHEN '04'.
      MESSAGE 'Obligatorio informar matrícula remolque para Materia Prima.' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.
    WHEN OTHERS.
  ENDCASE.

  IF gs_dyn200-destino IS INITIAL.
    p_rc = '01'.
    MESSAGE 'Seleccionar destino.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.
  ENDIF.

*Validación del tipo de carga
  IF gs_dyn200-tp_carga IS INITIAL.
    p_rc = '01'.
    MESSAGE 'Seleccionar tipo de carga.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.
  ELSEIF gs_dyn200-tp_carga = '6'." OR
*       gs_dyn200-tp_carga = '7'.
    CLEAR: gs_dyn200-albaran.
  ENDIF.

  IF NOT line_exists( zclpp_reg_vehiculo_master=>gt_rel_des_tpcarga[ werks    = gs_dyn200-werks
                                                                     destino  = gs_dyn200-destino
                                                                     tp_carga = gs_dyn200-tp_carga ] ).
    p_rc = '01'.
    MESSAGE 'Combinación destino - tipo de carga no válida.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.

  ENDIF.

* Obligario informar albarán excepto para carga vacía u otros.
  IF gs_dyn200-albaran IS INITIAL AND
   gs_dyn200-tp_carga <> '6'    AND
   gs_dyn200-tp_carga <> '7'.
    p_rc = '03'.
    MESSAGE 'Informar número de albarán.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.

  ENDIF.

* Si se pulsa "A DESTINO", se deben informar lo/s peso/s bruto/tara
  IF gs_dyn200-ok_code = 'ADESTINO'.

    IF ( gs_dyn200-tp_carga <> '6' AND gs_dyn200-tp_carga <> '7' ). "Si la carga es otros o vacio se permite No informar peso bruto
*    IF ( gs_dyn200-tp_carga <> '6'  ). "Si la carga es vacio se permite No informar peso bruto

      IF gs_dyn200-peso_bruto IS INITIAL.
        p_rc = '01'.
        MESSAGE 'Introducir peso bruto.' TYPE 'S' DISPLAY LIKE 'E' .
        EXIT.
      ENDIF.

      IF gs_dyn200-ind_remolque = 'X' AND
         gs_dyn200-peso_bruto_remol IS INITIAL AND
         gs_dyn200-tp_carga         IS NOT INITIAL.
        p_rc = '01'.
        MESSAGE 'Informar peso bruto de remolque.' TYPE 'S' DISPLAY LIKE 'E' .
        EXIT.

      ENDIF.

    ELSEIF gs_dyn200-tp_carga = '6'. "Si es Vacio, informar Tara

      IF gs_dyn200-tara IS INITIAL.
        p_rc = '01'.
        MESSAGE 'Introducir tara.' TYPE 'S' DISPLAY LIKE 'E' .
        EXIT.

      ENDIF.

      IF gs_dyn200-tara_remol IS INITIAL AND gs_dyn200-ind_remolque = 'X'.
        p_rc = '01'.
        MESSAGE 'Introducir tara 2.' TYPE 'S' DISPLAY LIKE 'E' .
        EXIT.

      ENDIF.

    ENDIF.

  ENDIF.

  IF gs_dyn200-ok_code = 'ADESTINO'.

* Validación de contenedor (para destino Residuos y carga Vacio)
    IF gs_dyn200-destino = '03' AND
      gs_dyn200-tp_carga = '6'  AND  "Si destino=residuos y tp carga vacio
      gs_dyn200-ok_code = 'ADESTINO'.

      IF gs_dyn200-contenedor_entr IS  INITIAL.
        p_rc = '01'.
        MESSAGE 'Seleccionar contenedor de entrada.' TYPE 'S' DISPLAY LIKE 'E' .
        EXIT.
      ENDIF.

    ENDIF.

  ENDIF.

  IF lw_incidencia = 'X'.

    PERFORM popup_conductor_incidencia USING p_boton
                                        CHANGING p_rc.
    IF p_rc <> '00'.
      EXIT.
    ENDIF.

  ENDIF.


ENDFORM.

FORM validar_dyn500 CHANGING p_rc.

  DATA: lv_answer(1) TYPE c,
        l_msg        TYPE string.

  p_rc = '00'.

  IF gs_dyn500-tp_carga = '6' AND "Vacío
     gs_dyn500-peso_bruto IS INITIAL.
    p_rc = '01'.
    MESSAGE 'Introducir peso bruto.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.
  ENDIF.

  IF gs_dyn500-tp_carga = '6' AND "Vacío
     gs_dyn500-peso_bruto_remol IS INITIAL AND
     gs_dyn500-ind_remolque = 'X'.
    p_rc = '01'.
    MESSAGE 'Introducir peso bruto 2.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.
  ENDIF.

  IF ( gs_dyn500-tp_carga = '1' OR
     gs_dyn500-tp_carga = '2' OR
     gs_dyn500-tp_carga = '3' OR
     gs_dyn500-tp_carga = '4' OR
     gs_dyn500-tp_carga = '5' OR
     gs_dyn500-tp_carga = '7' ) AND gs_dyn500-tara IS INITIAL.
    p_rc = '01'.
    MESSAGE 'Introducir tara.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.
  ENDIF.

  IF ( gs_dyn500-tp_carga = '1' OR
     gs_dyn500-tp_carga = '2' OR
     gs_dyn500-tp_carga = '3' OR
     gs_dyn500-tp_carga = '4' OR
     gs_dyn500-tp_carga = '5' OR
     gs_dyn500-tp_carga = '7' ) AND gs_dyn500-tara_remol IS INITIAL
                                AND gs_dyn500-ind_remolque = 'X'.
    p_rc = '01'.
    MESSAGE 'Introducir tara 2.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.
  ENDIF.

  IF ( gs_dyn500-destino = '03' AND gs_dyn500-tp_carga = '6' ) AND
      gs_dyn500-contenedor_entr IS INITIAL.  "Si destino=residuos y tp carga vacio
    p_rc = '01'.
    MESSAGE 'Seleccionar contenedor de entrada.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.
  ENDIF.


  IF ( gs_dyn500-destino = '03' AND gs_dyn500-tp_carga = '6' ) AND
      gs_dyn500-contenedor_sali IS INITIAL.  "Si destino=residuos y tp carga vacio
    p_rc = '01'.
    MESSAGE 'Seleccionar contenedor de salida.' TYPE 'S' DISPLAY LIKE 'E' .
    EXIT.
  ENDIF.

  IF ( gs_dyn500-tp_carga = '1' OR
     gs_dyn500-tp_carga = '2' OR
     gs_dyn500-tp_carga = '3' OR
     gs_dyn500-tp_carga = '4' OR
     gs_dyn500-tp_carga = '5' OR
     gs_dyn500-tp_carga = '7' ).

    IF  ( gs_dyn500-peso_bruto + gs_dyn500-peso_bruto_remol ) <
        ( gs_dyn500-tara       + gs_dyn500-tara_remol ).
      p_rc = '01'.
      MESSAGE 'Peso bruto debe ser mayor o igual que tara' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.

    ENDIF.

  ELSEIF  gs_dyn500-tp_carga = '6' AND gs_dyn500-destino = '03'.


    IF  ( gs_dyn500-peso_bruto + gs_dyn500-peso_bruto_remol - gs_dyn500-peso_cont_sali ) <
        ( gs_dyn500-tara       + gs_dyn500-tara_remol       - gs_dyn500-peso_cont_entr ).
      p_rc = '01'.
      MESSAGE 'Peso bruto debe ser mayor o igual que tara' TYPE 'S' DISPLAY LIKE 'E' .
      EXIT.

    ENDIF.
  ENDIF.

* DTM - Comentado para poder dar salida sin número de transporte
**  IF gs_dyn500-destino = '02'. "Expediciones
**    IF gs_dyn500-tknum IS INITIAL.
**      p_rc = '01'.
**      MESSAGE |Introducir número de transporte.| TYPE 'S' DISPLAY LIKE 'E'.
**      EXIT.
**    ELSE.
**
**      IF zclpp_reg_vehiculo_master=>validar_tknum( gs_dyn500-tknum ) = ' '.
**        p_rc = '02'.
**        EXIT.
**      ENDIF.
**
**    ENDIF.
**  ENDIF.
* DTM

* Nueva validacíón la diferencia de kg no puede superar la tolerancia.
  TRY .
      DATA(l_tolerancia) = zclpp_reg_vehiculo_master=>gt_destinos[ id_destino = gs_dyn500-destino
                                                           werks = gs_dyn100-werks ]-tolerancia.
      SELECT SINGLE	zzpeso_alb
        INTO @DATA(l_kg_transp)
        FROM vttk
        WHERE tknum = @gs_dyn500-tknum.

      CHECK sy-subrc = 0 AND l_tolerancia > 0.

      DATA(l_diferencia) = ( gs_dyn500-peso_bruto + gs_dyn500-peso_bruto_remol ) - ( gs_dyn500-tara + gs_dyn500-tara_remol ) - l_kg_transp.
      l_diferencia = abs( l_diferencia ).
      IF l_diferencia > l_tolerancia.

*           MESSAGE |¡Atención! Hay una diferencia de { l_diferencia }kg. que sobrepasa la tolerancia de { l_tolerancia }kg. Contactar con expediciones.| TYPE 'I'.
        MESSAGE |¡ATENCIÓN! La diferencia de peso de la carga y albarán ({ l_diferencia } kg) supera la tolerancia ({ l_tolerancia } kg). Contactar con expediciones.| TYPE 'I'.

        l_msg = |¿Desea continuar con el registro de salida del vehículo?|.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar              = 'Diferencia de pesos'
            text_question         = l_msg
            text_button_1         = 'Aceptar' " 'Cancelar'
            icon_button_1         = 'ICON_CHECKED' " 'Cancelar'
            text_button_2         = 'Cancelar' "
            icon_button_2         = 'ICON_CANCEL' "
            default_button        = '2'
            display_cancel_button = ' '
          IMPORTING
            answer                = lv_answer
          EXCEPTIONS
            text_not_found        = 1
            OTHERS                = 2.

        IF lv_answer <> '1'.
          p_rc = '01'.
          EXIT.
        ENDIF.
      ENDIF.
    CATCH cx_root.

  ENDTRY.

ENDFORM.

FORM validacion_conductor CHANGING p_rc.

  p_rc = '00'.

  IF gs_dyn200-dninie IS INITIAL.
    p_rc = '01'.
  ELSE.
    SELECT SINGLE  * INTO @DATA(ls_condu)
      FROM ztpp0056
      WHERE dninie = @gs_dyn200-dninie.
    IF sy-subrc = 0.
*      Validar incidencia.
      IF ls_condu-incidencia <> space. " IS NOT INITIAL.
        p_rc = '02'.
      ENDIF.

    ELSE.
      p_rc = '03'.
    ENDIF.
  ENDIF.

ENDFORM.

FORM validacion_vehiculo USING p_espera_dest TYPE char1
                         CHANGING p_rc.

  p_rc = '00'.

  IF gs_dyn200-zmatricula1 IS INITIAL.
    p_rc = '01'.
    EXIT.
  ELSE.
*    SELECT SINGLE  * INTO @DATA(ls_vehiculo)
*      FROM ztpp0057
*      WHERE zmatricula1 = @gs_dyn200-zmatricula1.
*    IF sy-subrc = 0.
*      IF ls_vehiculo-ind_remolque = ' '.
*        CLEAR: gs_dyn200-peso_bruto_remol,
*               gs_dyn200-tara_remol.
*      ELSE.
* Si el vehículo es correcto y 2º remolque = X, validamos que se informe peso y tara 2º remolque
*    IF p_espera_dest              = 'D' AND
*       gs_dyn200-ind_remolque   = 'X' AND
*       gs_dyn200-peso_bruto_remol IS INITIAL.
*      p_rc = '02'. "Vehículo con segundo remolque, obligatorio informar peso bruto 2.'
*      EXIT.
*
*    ENDIF.
  ENDIF.

*  IF gs_dyn200-destino     = '01' AND "Materia prima
*     gs_dyn200-zmatricula2 = space.
*    p_rc = '04'. " Obligatorio informar matrícula remolque para Materia Prima.
*  ENDIF.

ENDFORM.


FORM borrar_registro_en_espera USING ps_reg_esp TYPE zspp_vehiculos_espera.

  DATA: lv_answer(1) TYPE c,
        l_msg        TYPE string,
        l_rc         TYPE char2.

  l_msg = |Se borrará el registro { ps_reg_esp-id_reg_vehiculo } para el conductor { ps_reg_esp-nombre } { ps_reg_esp-apellidos } y matrícula { ps_reg_esp-zmatricula1 }. ¿Desea continuar?|.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'Borrar registro'
      text_question         = l_msg
      text_button_1         = 'Borrar' " 'Cancelar'
      icon_button_1         = 'ICON_DELETE' " 'Cancelar'
      text_button_2         = 'Cancelar' "
      icon_button_2         = 'ICON_CANCEL' "
      default_button        = '2'
      display_cancel_button = ' '
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  CASE lv_answer.
    WHEN '1'. " Borrar
      CALL FUNCTION 'ZMFPP_ANULAR_REG_VEHICULO'
        EXPORTING
          i_desde_espera        = 'X'
          is_reg_entrada_espera = ps_reg_esp
          i_operario            = gs_dyn100-operario
        IMPORTING
          o_rc                  = l_rc.
      CASE l_rc.
        WHEN '00'. " Anulación OK
          MESSAGE |Vehículo { ps_reg_esp-id_reg_vehiculo } borrado correctamente.| TYPE 'S'.
          PERFORM obtener_reg_en_espera.
          gs_dyn300-go_alv->refresh( ).
        WHEN '01'. " Acción cancelada  o error de bloqueo de entrada(ya lanzado)
        WHEN '02'. " Error en la actualización.
          MESSAGE |Error en la actualización.| TYPE 'S' DISPLAY LIKE 'E'.

        WHEN OTHERS.
      ENDCASE.

    WHEN '2'. "Cancelar

*    WHEN 'A'. " Cancelar, no hacemos nada

    WHEN OTHERS.
  ENDCASE.

ENDFORM.

FORM popup_conductor_incidencia USING p_boton
                                CHANGING p_rc TYPE char2.

  DATA: lv_answer(1) TYPE c,
        l_msg        TYPE string,
        l_rc         TYPE char2.


  CASE p_boton.
    WHEN 'D'.

      l_msg = |Conductor con incidencia. Contactar con responsable.|.
      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          titlebar              = 'AVISO: Conductor con incidencia'
          text_question         = l_msg
          text_button_1         = 'A destino' " 'Cancelar'
          icon_button_1         = 'ICON_RELEASE' " 'Cancelar'
          text_button_2         = 'Cancelar' "
          icon_button_2         = 'ICON_CANCEL' "
          default_button        = '2'
          display_cancel_button = ' '
        IMPORTING
          answer                = lv_answer
        EXCEPTIONS
          text_not_found        = 1
          OTHERS                = 2.

      CASE lv_answer.
        WHEN '1'. p_rc = '00'. " A destino
        WHEN '2'. p_rc = '01'. " Cancelar
      ENDCASE.

    WHEN 'E'.

      l_msg = |Conductor con incidencia. Contactar con responsable.|.
      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING
          titlebar              = 'Borrar registro de vehículo en planta'
          text_question         = l_msg
          text_button_1         = 'A espera' " 'Cancelar'
          icon_button_1         = 'ICON_TIME_INA' " 'Cancelar'
          text_button_2         = 'Cancelar' "
          icon_button_2         = 'ICON_CANCEL' "
          default_button        = '2'
          display_cancel_button = ' '
        IMPORTING
          answer                = lv_answer
        EXCEPTIONS
          text_not_found        = 1
          OTHERS                = 2.

      CASE lv_answer.
        WHEN '1'. p_rc = '00'. " A destino
        WHEN '2'. p_rc = '01'. " Cancelar
      ENDCASE.


    WHEN OTHERS.
  ENDCASE.


ENDFORM.

FORM popup_mp_2_expediciones CHANGING p_rc TYPE char2.

  DATA: lv_answer(1) TYPE c,
        l_msg        TYPE string,
        l_rc         TYPE char2.

  l_msg = |Registro de salida { gs_dyn500-id_reg_vehiculo } grabado correctamente. ¿Camión carga en expediciones?|.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'Camión carga expediciones'
      text_question         = l_msg
      text_button_1         = 'Aceptar'
      icon_button_1         = 'ICON_OKAY'
      text_button_2         = 'Cancelar'
      icon_button_2         = 'ICON_CANCEL'
      default_button        = '2'
      display_cancel_button = ' '
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  CASE lv_answer.
    WHEN '1'.

*      p_rc = '00'. " Entrada expediciones
      CLEAR gs_dyn200.
      gs_dyn200-werks        = gs_dyn500-werks.
      gs_dyn200-dninie       = gs_dyn500-dninie.
      gs_dyn200-nombre       = gs_dyn500-nombre.
      gs_dyn200-apellidos    = gs_dyn500-apellidos.
      gs_dyn200-telefono     = gs_dyn500-telefono.
      gs_dyn200-tdlnr        = gs_dyn500-tdlnr.
      gs_dyn200-name1        = gs_dyn500-name1.
      gs_dyn200-incidencia   = gs_dyn500-incidencia.
      gs_dyn200-zmatricula1  = gs_dyn500-zmatricula1.
      gs_dyn200-zmatricula2  = gs_dyn500-zmatricula2.
      gs_dyn200-ind_remolque = gs_dyn500-ind_remolque.
      gs_dyn200-tara         = gs_dyn500-tara.
      gs_dyn200-tara_remol   = gs_dyn500-tara_remol.
      gs_dyn200-destino      = '02'. "Expedicones
      gs_dyn200-tp_carga     = '6'. "Vacio
      LEAVE TO SCREEN 200.

    WHEN '2'. p_rc = '00'. " Cancelar, no se navega a Expediciones y mostramos ALV en planta
  ENDCASE.

ENDFORM.

FORM borrar_registro_en_planta USING ps_reg_planta TYPE zspp_vehiculos_planta.

  DATA: lv_answer(1) TYPE c,
        l_msg        TYPE string,
        l_rc         TYPE char2.

  l_msg = |Se borrará el registro { ps_reg_planta-id_reg_vehiculo } para el conductor { ps_reg_planta-nombre } { ps_reg_planta-apellidos } y matrícula { ps_reg_planta-zmatricula1 }. ¿Desea continuar?|.
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'Borrar registro de vehículo en planta'
      text_question         = l_msg
      text_button_1         = 'Borrar'
      icon_button_1         = 'ICON_DELETE'
      text_button_2         = 'Cancelar' "
      icon_button_2         = 'ICON_CANCEL' "
      default_button        = '2'
      display_cancel_button = ' '
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  CASE lv_answer.
    WHEN '1'. " Borrar
      CALL FUNCTION 'ZMFPP_ANULAR_REG_VEHICULO'
        EXPORTING
          i_desde_planta        = 'X'
          is_reg_entrada_planta = ps_reg_planta
          i_operario            = gs_dyn100-operario
        IMPORTING
          o_rc                  = l_rc.
      CASE l_rc.
        WHEN '00'. " Anulación OK
          MESSAGE |Registro { ps_reg_planta-id_reg_vehiculo } borrado correctamente.| TYPE 'S'.
          PERFORM obtener_reg_en_planta.
          gs_dyn400-go_alv->refresh( ).
        WHEN '01'. " Acción cancelada
        WHEN OTHERS.
      ENDCASE.

    WHEN '2'. "Cancelar

*    WHEN 'A'. " Cancelar, no hacemos nada

    WHEN OTHERS.
  ENDCASE.

ENDFORM.

FORM obtener_seleccion_alv300 CHANGING p_rows TYPE salv_t_row.
  DATA: lr_selections TYPE REF TO cl_salv_selections.

  lr_selections = gs_dyn300-go_alv->get_selections( ).
  p_rows       = lr_selections->get_selected_rows( ).

ENDFORM.

FORM obtener_seleccion_alv400 CHANGING p_rows TYPE salv_t_row.
  DATA: lr_selections TYPE REF TO cl_salv_selections.

  lr_selections = gs_dyn400-go_alv->get_selections( ).
  p_rows       = lr_selections->get_selected_rows( ).

ENDFORM.


FORM grabar_salida_vehiculo CHANGING p_rc TYPE char2.

*  data: ls_ztpp0059 type ztpp0059.

  DATA: ls_reg_sali TYPE ztpp0059.

  CLEAR ls_reg_sali.
  ls_reg_sali = CORRESPONDING #( gs_dyn500 ).
  ls_reg_sali-estado             = zclpp_reg_vehiculo_master=>gc_est_salida.

  CALL METHOD zclpp_reg_vehiculo_master=>grabar_salida_vehiculo
    EXPORTING
      i_operario            = gs_dyn100-operario
      is_datos_reg_vehiculo = ls_reg_sali
    IMPORTING
      o_rc                  = p_rc.

  IF p_rc = '00' AND NOT ( gs_dyn500-destino = '01' AND gs_dyn500-tp_carga = '1' ).
    MESSAGE |Salida del reg. vehículo { ls_reg_sali-id_reg_vehiculo } realizada correctamente.| TYPE 'S'.
  ELSEIF p_rc = '03'.
    MESSAGE |Error al actualizar el registro.| TYPE 'S' DISPLAY LIKE 'E'.
  ELSEIF p_rc = '13'.
    MESSAGE |Error en la entrada de mercancia de recorte.| TYPE 'S' DISPLAY LIKE 'E'.
  ELSEIF p_rc = '14'.
    MESSAGE |Contabilización de materia prima ya realizada.| TYPE 'S' DISPLAY LIKE 'E'.

  ENDIF.


ENDFORM.

FORM mostrar_popup_pesos USING    p_campo TYPE char20
*                                CHANGING p_kg       TYPE menge_d.
                                CHANGING p_kg       TYPE z_cantidad_sin_dec.

  DATA: sfields     TYPE sval,
        lt_fields   TYPE STANDARD TABLE OF sval,
        l_fieldname TYPE char30,
        l_rc        TYPE char2.

  CASE p_campo.
    WHEN 'PB1'.
      sfields-fieldtext   = 'Peso bruto:  '.
      l_fieldname         = 'PESO_BRUTO'.
    WHEN 'PB2'.
      sfields-fieldtext   = 'Peso bruto 2:  '.
      l_fieldname         = 'PESO_BRUTO_REMOL'.
    WHEN 'TA1'.
      sfields-fieldtext   = 'Tara:  '.
      l_fieldname         = 'TARA'.
    WHEN 'TA2'.
      sfields-fieldtext   = 'Tara 2:  '.
      l_fieldname         = 'TARA_REMOL'.
*    WHEN 'CONT'.
*      sfields-fieldtext   = 'Contenedor entrada:  '.
*      l_fieldname         = 'CONTENEDOR_ENTR'.

    WHEN OTHERS.
  ENDCASE.

  DATA(l_title) = |Modificar peso de entrada.|.
  sfields-tabname    = 'ZTPP0059'.

  sfields-fieldname  = l_fieldname.
  sfields-comp_field = l_fieldname.


  sfields-field_attr = '01'.
  sfields-field_obl  = 'X'.
  APPEND sfields TO lt_fields.


  CALL FUNCTION 'POPUP_GET_VALUES'
    EXPORTING
*     NO_VALUE_CHECK  = ' '
      popup_title     = l_title
      start_column    = '19'
      start_row       = '11'
    IMPORTING
      returncode      = l_rc
    TABLES
      fields          = lt_fields
    EXCEPTIONS
      error_in_fields = 1
      OTHERS          = 2.

  CHECK l_rc <> 'A'.


  DATA: l_kg       TYPE menge_d.

  IF sy-subrc = 0.
    l_kg = lt_fields[ tabname = 'ZTPP0059' fieldname = l_fieldname ]-value.
    IF l_kg <= 0.
      MESSAGE |Peso debe ser mayor que 0 kg.| TYPE 'S' DISPLAY LIKE 'E'.
    ELSE.
      p_kg = l_kg.
    ENDIF.
  ENDIF.


ENDFORM.

* DTM - Popup modificación albarán

FORM mostrar_popup_albaran USING p_campo TYPE char20
                        CHANGING p_alb   TYPE char20.

  DATA: sfields      TYPE sval,
        lt_fields    TYPE STANDARD TABLE OF sval,
        lv_fieldname TYPE char30,
        lv_albaran   TYPE char20,
        lv_rc        TYPE char2.

  DATA(lv_title)     = |Modificar albarán de entrada.|.
  sfields-tabname    = 'ZTPP0059'.
  sfields-fieldtext  = 'Albarán:  '.
  lv_fieldname       = 'ALBARAN'.
  sfields-fieldname  = lv_fieldname.
  sfields-comp_field = lv_fieldname.


  sfields-field_attr = '01'.
  sfields-field_obl  = 'X'.
  sfields-value      = gs_dyn500-albaran.
  APPEND sfields TO lt_fields.


  CALL FUNCTION 'POPUP_GET_VALUES'
    EXPORTING
      popup_title     = lv_title
      start_column    = '19'
      start_row       = '11'
    IMPORTING
      returncode      = lv_rc
    TABLES
      fields          = lt_fields
    EXCEPTIONS
      error_in_fields = 1
      OTHERS          = 2.

  CHECK lv_rc <> 'A'.

  IF sy-subrc = 0.

    lv_albaran = lt_fields[ tabname = 'ZTPP0059' fieldname = lv_fieldname ]-value.

    IF lv_albaran IS NOT INITIAL.

      p_alb = lv_albaran.

    ENDIF.

  ENDIF.

ENDFORM.

* DTM
