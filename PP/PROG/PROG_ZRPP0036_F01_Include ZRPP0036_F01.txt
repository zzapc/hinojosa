*----------------------------------------------------------------------*
***INCLUDE ZRPP0036_F01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_data .
  IF sy-tcode NE 'ZPP4039'.
    IF p_hu IS NOT INITIAL. "Etiquetas HU
      PERFORM get_hu_data.      "CGV - 23.04.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_hu_data_new.  "CGV - 23.04.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_hu_data_new_1. "CGV - 14.05.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_hu_data_new_2. "cvivo
    ELSEIF p_dev IS NOT INITIAL. "Posiciones de devoluciones
      PERFORM get_dev_data.
    ELSEIF p_ent IS NOT INITIAL. "Posiciones de EM
      PERFORM get_ent_data.
    ELSEIF p_pnm IS NOT INITIAL. "Órdenes de planchas no manipuladas
      PERFORM get_pnm_data.      "CGV - 23.04.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_pnm_data_new.   "CGV - 14.05.18 - SAT 7000018907_Ticket 46645
    ELSEIF p_pnmv IS NOT INITIAL. "Órdenes de planchas no manipuladas para venta (CR)
      PERFORM get_pnmv_data.        "CGV - 23.04.18 - SAT 7000018907_Ticket 46645
*  PERFORM get_pnmv_data_new.    "CGV - 23.04.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_pnmv_data_new_1. "CGV - 23.04.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_pnmv_data_new_2. "cvivo
    ELSEIF p_lsubp IS NOT INITIAL. "Órdenes de lotes de subproducto
      PERFORM get_lsubp_data.
    ELSEIF p_lwip IS NOT INITIAL. "Órdenes de lotes WIP
      PERFORM get_wip_data.      "CGV - 23.04.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_wip_data_new.  "CGV - 23.04.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_wip_data_new_1. "CGV - 14.05.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_wip_data_new_2. "cvivo
    ELSEIF p_lpm IS NOT INITIAL. "Órdenes de lotes de plancha manipulada
      PERFORM get_lpm_data.      "CGV - 23.04.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_lpm_data_new.  "CGV - 23.04.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_lpm_data_new_1. "CGV - 14.05.18 - SAT 7000018907_Ticket 46645
*    PERFORM get_lpm_data_new_2. "cvivo
    ELSEIF p_lgra IS NOT INITIAL. "Órdenes de lotes de granza
      PERFORM get_lgra_data.
    ENDIF.
  ELSE.
    IF p_hu IS NOT INITIAL. "Etiquetas HU
      PERFORM get_hu_data_new_2. "cvivo
    ELSEIF p_dev IS NOT INITIAL. "Posiciones de devoluciones
      PERFORM get_dev_data.
    ELSEIF p_ent IS NOT INITIAL. "Posiciones de EM
      PERFORM get_ent_data.
    ELSEIF p_pnm IS NOT INITIAL. "Órdenes de planchas no manipuladas
      PERFORM get_pnm_data_new.   "CGV - 14.05.18 - SAT 7000018907_Ticket 46645
    ELSEIF p_pnmv IS NOT INITIAL. "Órdenes de planchas no manipuladas para venta (CR)
      PERFORM get_pnmv_data_new_2. "cvivo
    ELSEIF p_lsubp IS NOT INITIAL. "Órdenes de lotes de subproducto
      PERFORM get_lsubp_data.
    ELSEIF p_lwip IS NOT INITIAL. "Órdenes de lotes WIP
      PERFORM get_wip_data_new_2. "cvivo
    ELSEIF p_lpm IS NOT INITIAL. "Órdenes de lotes de plancha manipulada
      PERFORM get_lpm_data_new_2. "cvivo
    ELSEIF p_lgra IS NOT INITIAL. "Órdenes de lotes de granza
      PERFORM get_lgra_data.
    ENDIF.
  ENDIF.
ENDFORM.                    " GET_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_HU_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_hu_data .

  SELECT DISTINCT b~venum, b~exidv, e~zzebeln4, e~zzebelp4, e~zzkunnr4, a~werks", a~charg
    INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_hu_alv
    FROM vepo AS a
    INNER JOIN vekp AS b ON b~venum = a~venum
    INNER JOIN mara AS c ON c~matnr = a~matnr
    LEFT JOIN aufm AS d ON d~charg = a~charg AND d~matnr = a~matnr
    LEFT JOIN aufk AS e ON e~aufnr = d~aufnr
    LEFT JOIN makt AS f ON f~matnr = a~matnr
    WHERE d~aufnr IN @s_aufnr1 AND
          c~mtart IN @s_mtart1 AND
          c~matnr IN @s_matnr1 AND
          a~werks IN @s_werks1 AND
          a~charg IN @s_charg1 AND
          b~exidv IN @s_exidv1 AND
          e~zzebeln4 IN @s_ebeln1 AND
          e~zzkunnr4 IN @s_kunnr1 AND
          f~spras = @sy-langu.

  IF sy-subrc <> 0.
    MESSAGE w220(zpp).
  ENDIF.


ENDFORM.                    " GET_HU_DATA
*&---------------------------------------------------------------------*
*&      Form  DESACTIVAR_FILTROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM desactivar_filtros .
*  IF p_hu IS NOT INITIAL.
  LOOP AT SCREEN.
    IF ( p_hu IS NOT INITIAL AND screen-group1 <> 'HU' AND screen-group1 <> '' ) OR
       ( p_ent IS NOT INITIAL AND screen-group1 <> 'ENT' AND screen-group1 <> '' ) OR
       ( p_dev IS NOT INITIAL AND screen-group1 <> 'DEV' AND screen-group1 <> '' ) OR
       ( p_pnm IS NOT INITIAL AND screen-group1 <> 'PNM' AND screen-group1 <> '' ) OR
       ( p_pnmv IS NOT INITIAL AND screen-group1 <> 'PNV' AND screen-group1 <> '' ) OR
       ( p_lsubp IS NOT INITIAL AND screen-group1 <> 'SUB' AND screen-group1 <> '' ) OR
       ( p_lwip IS NOT INITIAL AND screen-group1 <> 'WIP' AND screen-group1 <> '' ) OR
       ( p_lpm IS NOT INITIAL AND screen-group1 <> 'LPM' AND screen-group1 <> '' ) OR
       ( p_lgra IS NOT INITIAL AND screen-group1 <> 'GRA' AND screen-group1 <> '' ).
      screen-active = 0.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

*  ENDIF.
ENDFORM.                    " DESACTIVAR_FILTROS

* Subrutina para mostrar SALV genérico
FORM f_mostrar_salv USING p_custom_container TYPE REF TO cl_gui_custom_container
                          p_salv_table TYPE REF TO cl_salv_table
                          p_container_name TYPE scrfname
                          p_table
                          p_columns_perform TYPE string
                          p_optimize_cols TYPE xfeld
                          p_handle TYPE slis_handl
                          p_full_screen TYPE xfeld.

  DATA: l_icon TYPE string.
  DATA: lr_selections TYPE REF TO cl_salv_selections.
  DATA: lr_events    TYPE REF TO cl_salv_events_table,
        lr_layout    TYPE REF TO cl_salv_layout,
        lv_cont_name TYPE        string,
        ls_key       TYPE        salv_s_layout_key.

  IF p_custom_container IS NOT BOUND OR p_full_screen = abap_true.
    lv_cont_name = p_container_name.
*
    IF p_full_screen IS INITIAL AND cl_salv_table=>is_offline( ) EQ if_salv_c_bool_sap=>false.
      CREATE OBJECT p_custom_container
        EXPORTING
          container_name = p_container_name.
    ENDIF.
*
*... Crear tabla ALV
    IF p_full_screen IS INITIAL.
      TRY.
          cl_salv_table=>factory(
            EXPORTING
              r_container    = p_custom_container
              container_name = lv_cont_name
            IMPORTING
              r_salv_table   = p_salv_table
            CHANGING
              t_table        = p_table ).
        CATCH cx_salv_msg.                              "#EC NO_HANDLER
      ENDTRY.
    ELSE.
      TRY.
          cl_salv_table=>factory(
          EXPORTING
          list_display = abap_false
            IMPORTING
              r_salv_table   = p_salv_table

            CHANGING
              t_table        = p_table ).
        CATCH cx_salv_msg.                              "#EC NO_HANDLER
      ENDTRY.
    ENDIF.

*
**... Funciones del ALV
    DATA: lr_functions TYPE REF TO cl_salv_functions_list,
          l_text       TYPE        string.
**
**... Genéricas
    IF p_full_screen IS INITIAL.
      lr_functions = p_salv_table->get_functions( ).
      lr_functions->set_all( abap_true ).
      lr_functions->set_group_aggregation( abap_false ).
      lr_functions->set_group_subtotal( abap_false ).
      lr_functions->set_group_view( abap_false ).
      lr_functions->set_graphics( abap_false ).
    ELSE.
      p_salv_table->set_screen_status(  pfstatus      =  'SALV_FULLSCREEN'
                                    report        =  sy-repid
                                    set_functions = p_salv_table->c_functions_all ).
    ENDIF.
**
*
**... Configurar las columnas
    DATA: lr_columns TYPE REF TO cl_salv_columns,
          lr_column  TYPE REF TO cl_salv_column_table.
*
    lr_columns = p_salv_table->get_columns( ).
    lr_columns->set_optimize( p_optimize_cols ).
**
    IF p_columns_perform IS NOT INITIAL.
      PERFORM (p_columns_perform) IN PROGRAM zrpm0001 USING lr_columns IF FOUND.
    ENDIF.

**... Definir método de selección
    lr_selections = p_salv_table->get_selections( ).
    lr_selections->set_selection_mode( if_salv_c_selection_mode=>row_column ).

*... Eventos

    lr_events = gr_table->get_event( ).
    CREATE OBJECT gr_events.

*... USER_COMMAND
    SET HANDLER gr_events->on_user_command FOR lr_events.

*... Definir layout
    lr_layout = p_salv_table->get_layout( ).
    ls_key-report = sy-repid.
    ls_key-handle = p_handle.
    lr_layout->set_key( ls_key ).
    lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
    lr_layout->set_default( abap_true ).

**... Mostrar el ALV
    p_salv_table->display( ).
  ELSE.
*... Actualizar le ALV
    p_salv_table->refresh( ).
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_SELECCION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_seleccion .
  DATA: lr_selections    TYPE REF TO cl_salv_selections,
        lt_rows          TYPE        salv_t_row,
        lv_row           TYPE        i,
        ls_row,
        ls_bapiret2      TYPE bapiret2,
        lt_bapiret2      TYPE bapiret2_t,
        lt_pp0036_hu_alv TYPE zttpp0036_hu_alv.

  FIELD-SYMBOLS: <fs_print_table>, <fs_row>.
  gr_table->get_metadata( ).
  lr_selections = gr_table->get_selections( ).
  lt_rows = lr_selections->get_selected_rows( ).
  IF lt_rows IS NOT INITIAL.
    LOOP AT lt_rows INTO lv_row.
      READ TABLE <fs_table> ASSIGNING <fs_row> INDEX lv_row.
      CLEAR: ls_bapiret2.
      IF p_hu IS NOT INITIAL.
        PERFORM imprimir_hu USING <fs_row>
                            CHANGING ls_bapiret2.
      ELSEIF p_dev IS NOT INITIAL.
        PERFORM imprimir_dev USING <fs_row>
                             CHANGING ls_bapiret2.
      ELSEIF p_ent IS NOT INITIAL.
        PERFORM imprimir_ent USING <fs_row>
                             CHANGING ls_bapiret2.
      ELSEIF p_pnm IS NOT INITIAL.
        PERFORM imprimir_pnm USING <fs_row>
                             CHANGING ls_bapiret2.
      ELSEIF p_pnmv IS NOT INITIAL.
        PERFORM imprimir_pnmv USING <fs_row>
                             CHANGING ls_bapiret2.
      ELSEIF p_lsubp IS NOT INITIAL.
        PERFORM imprimir_lsubp USING <fs_row>
                             CHANGING ls_bapiret2.
      ELSEIF p_lwip IS NOT INITIAL.
        PERFORM imprimir_lwip USING <fs_row>
                             CHANGING ls_bapiret2.
      ELSEIF p_lpm IS NOT INITIAL.
        PERFORM imprimir_lpm USING <fs_row>
                             CHANGING ls_bapiret2.
      ELSEIF p_lgra IS NOT INITIAL.
        PERFORM imprimir_lgra USING <fs_row>
                             CHANGING ls_bapiret2.
      ENDIF.
      IF ls_bapiret2 IS NOT INITIAL.
        APPEND ls_bapiret2 TO lt_bapiret2.
      ENDIF.
    ENDLOOP.

    IF lt_bapiret2 IS NOT INITIAL.
      CALL FUNCTION 'FINB_BAPIRET2_DISPLAY'
        EXPORTING
          it_message = lt_bapiret2.
    ENDIF.

  ELSE.
    MESSAGE w226(zpp).
  ENDIF.

ENDFORM.                    " IMPRIMIR_SELECCION
*&---------------------------------------------------------------------*
*&      Form  SHOW_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM show_alv .
*  data: lt_table type .
  IF p_hu IS NOT INITIAL.
*    lt_table = gt_pp0036_hu_alv.
    ASSIGN gt_pp0036_hu_alv TO <fs_table>.
  ELSEIF p_dev IS NOT INITIAL.
    ASSIGN gt_pp0036_dev_alv TO <fs_table>.
  ELSEIF p_ent IS NOT INITIAL.
    ASSIGN gt_pp0036_ent_alv TO <fs_table>.
  ELSEIF p_pnm IS NOT INITIAL.
    ASSIGN gt_pp0036_pnm_alv TO <fs_table>.
  ELSEIF p_pnmv IS NOT INITIAL.
    ASSIGN gt_pp0036_pnmv_alv TO <fs_table>.
  ELSEIF p_lsubp IS NOT INITIAL.
    ASSIGN gt_pp0036_lsubp_alv TO <fs_table>.
  ELSEIF p_lwip IS NOT INITIAL.
    ASSIGN gt_pp0036_wip_alv TO <fs_table>.
  ELSEIF p_lpm IS NOT INITIAL.
    ASSIGN gt_pp0036_lpm_alv TO <fs_table>.
  ELSEIF p_lgra IS NOT INITIAL.
    ASSIGN gt_pp0036_lgra_alv TO <fs_table>.
  ENDIF.
*
  PERFORM f_mostrar_salv USING gr_custom_container
                       gr_table
                       'CC_CTRO'
                       <fs_table>
                       ''
                       abap_false
                       '0001'
                       abap_true.

ENDFORM.                    " SHOW_ALV

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_HU
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ROW  text
*----------------------------------------------------------------------*
FORM imprimir_hu  USING p_fs_row
                  CHANGING p_bapiret2 TYPE bapiret2.

  DATA: ls_pp0036_hu_alv TYPE zspp0036_hu_alv,
        lv_error         TYPE xfeld,
        lv_par1          TYPE sy-msgv1,
        lv_objky         TYPE nast-objky.
  FIELD-SYMBOLS: <fs_venum> TYPE venum,
                 <fs_exidv> TYPE exidv.

  ASSIGN COMPONENT 'VENUM' OF STRUCTURE p_fs_row TO <fs_venum>.
  lv_objky = <fs_venum>.

  PERFORM imprimir_nace USING gc_kappl_hu
                              lv_objky
                              CHANGING lv_error.

  IF lv_error IS NOT INITIAL.
    ASSIGN COMPONENT 'EXIDV' OF STRUCTURE p_fs_row TO <fs_exidv>.
    lv_par1 = <fs_exidv>.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 227
        par1   = lv_par1
      IMPORTING
        return = p_bapiret2.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_DEV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ROW  text
*----------------------------------------------------------------------*
FORM imprimir_dev USING p_fs_row
                  CHANGING p_bapiret2 TYPE bapiret2.

  DATA: ls_pp0036_dev_alv TYPE zspp0036_dev_alv,
        lv_error          TYPE xfeld,
        lv_par1           TYPE sy-msgv1,
        lv_par2           TYPE sy-msgv2,
        lv_objky          TYPE nast-objky.

  FIELD-SYMBOLS: <fs_vbeln> TYPE vbeln_vl,
                 <fs_vbelp> TYPE posnr_vl.

  ASSIGN COMPONENT 'VBELN' OF STRUCTURE p_fs_row TO <fs_vbeln>.
  ASSIGN COMPONENT 'POSNR' OF STRUCTURE p_fs_row TO <fs_vbelp>.

  CONCATENATE <fs_vbeln> <fs_vbelp> INTO lv_objky.

*  lv_objky = <fs_venum>.

  PERFORM imprimir_nace USING gc_kappl_dev
                              lv_objky
                              CHANGING lv_error.

  IF lv_error IS NOT INITIAL.
*    ASSIGN COMPONENT 'EXIDV' OF STRUCTURE p_fs_row TO <fs_exidv>.
    lv_par1 = <fs_vbeln>.
    lv_par2 = <fs_vbelp>.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 228
        par1   = lv_par1
        par2   = lv_par2
      IMPORTING
        return = p_bapiret2.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_DEV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ROW  text
*----------------------------------------------------------------------*
FORM imprimir_ent USING p_fs_row
                  CHANGING p_bapiret2 TYPE bapiret2.

  DATA: ls_pp0036_ent_alv TYPE zspp0036_ent_alv,
        lv_error          TYPE xfeld,
        lv_par1           TYPE sy-msgv1,
        lv_par2           TYPE sy-msgv2,
        lv_par3           TYPE sy-msgv2,
        lv_objky          TYPE nast-objky.

  FIELD-SYMBOLS: <fs_mblnr> TYPE mblnr,
                 <fs_mjahr> TYPE mjahr,
                 <fs_zeile> TYPE mblpo,
                 <fs_bwart> TYPE bwart.

  ASSIGN COMPONENT 'MBLNR' OF STRUCTURE p_fs_row TO <fs_mblnr>.
  ASSIGN COMPONENT 'MJAHR' OF STRUCTURE p_fs_row TO <fs_mjahr>.
  ASSIGN COMPONENT 'ZEILE' OF STRUCTURE p_fs_row TO <fs_zeile>.
  ASSIGN COMPONENT 'BWART' OF STRUCTURE p_fs_row TO <fs_bwart>.

  DATA: lv_zeile TYPE mblpo,
        l_zeile  TYPE mblpo.
  lv_zeile = <fs_zeile>.

  EXPORT zeile FROM lv_zeile TO MEMORY ID 'ZEILE'.

  CONCATENATE <fs_mblnr> <fs_mjahr> <fs_zeile> INTO lv_objky.

*  IF <fs_bwart> = '101'.
  PERFORM imprimir_nace USING gc_kappl_ent
                              lv_objky
                        CHANGING lv_error.
*  ELSE.
*   Movimientos que no generan etiquetas por estándar ????
*  ENDIF.

  IF lv_error IS NOT INITIAL.
*    ASSIGN COMPONENT 'EXIDV' OF STRUCTURE p_fs_row TO <fs_exidv>.
    lv_par1 = <fs_mblnr>.
    lv_par2 = <fs_zeile>.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 229
        par1   = lv_par1
        par2   = lv_par2
      IMPORTING
        return = p_bapiret2.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_PNM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ROW  text
*----------------------------------------------------------------------*
FORM imprimir_pnm USING p_fs_row
                  CHANGING p_bapiret2 TYPE bapiret2.

  FIELD-SYMBOLS: <fs_matnr> TYPE matnr,
                 <fs_charg> TYPE charg_d.

  ASSIGN COMPONENT 'MATNR' OF STRUCTURE p_fs_row TO <fs_matnr>.
  ASSIGN COMPONENT 'CHARG' OF STRUCTURE p_fs_row TO <fs_charg>.

  CALL FUNCTION 'ZMFPM_ETIQUETAS'
    EXPORTING
      i_matnr = <fs_matnr>
      i_charg = <fs_charg>
      i_pnm   = p_pnm
      i_pnmv  = p_pnmv
      i_lwip  = p_lwip
      i_lpm   = p_lpm.
*  Ejecutar FM de impresión de etiqueta de plancha no manipulada (GAP32LO014)
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_PNMV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ROW  text
*----------------------------------------------------------------------*
FORM imprimir_pnmv USING p_fs_row
                  CHANGING p_bapiret2 TYPE bapiret2.

  FIELD-SYMBOLS: <fs_matnr> TYPE matnr,
                 <fs_charg> TYPE charg_d.

  ASSIGN COMPONENT 'MATNR' OF STRUCTURE p_fs_row TO <fs_matnr>.
  ASSIGN COMPONENT 'CHARG' OF STRUCTURE p_fs_row TO <fs_charg>.

*  Ejecutar FM de impresión de etiqueta de plancha no manipulada para venta (CR) (GAP32LO014)

  CALL FUNCTION 'ZMFPM_ETIQUETAS'
    EXPORTING
      i_matnr = <fs_matnr>
      i_charg = <fs_charg>
      i_pnm   = p_pnm
      i_pnmv  = p_pnmv
      i_lwip  = p_lwip
      i_lpm   = p_lpm.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_LSUBP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ROW  text
*----------------------------------------------------------------------*
FORM imprimir_lsubp USING p_fs_row
                  CHANGING p_bapiret2 TYPE bapiret2.
*  Ejecutar FM de impresión de lotes de subproducto
  FIELD-SYMBOLS: <fs_matnr> TYPE matnr,
                 <fs_charg> TYPE charg_d.

  ASSIGN COMPONENT 'MATNR' OF STRUCTURE p_fs_row TO <fs_matnr>.
  ASSIGN COMPONENT 'CHARG' OF STRUCTURE p_fs_row TO <fs_charg>.

  CALL FUNCTION 'ZMFPM_ETIQUETAS_A6'
    EXPORTING
      i_matnr = <fs_matnr>
      i_charg = <fs_charg>
      i_lsubp = p_lsubp
      i_lgra  = p_lgra.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_LSUBP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ROW  text
*----------------------------------------------------------------------*
FORM imprimir_lwip USING p_fs_row
                   CHANGING p_bapiret2 TYPE bapiret2.
*  Ejecutar FM de impresión de lotes WIP
  FIELD-SYMBOLS: <fs_matnr> TYPE matnr,
                 <fs_charg> TYPE charg_d,
                 <fs_kunnr> TYPE kunnr,
                 <fs_aufnr> TYPE aufnr.

  ASSIGN COMPONENT 'MATNR' OF STRUCTURE p_fs_row TO <fs_matnr>.
  ASSIGN COMPONENT 'CHARG' OF STRUCTURE p_fs_row TO <fs_charg>.
  ASSIGN COMPONENT 'ZZKUNNR4' OF STRUCTURE p_fs_row TO <fs_kunnr>.
  ASSIGN COMPONENT 'AUFNR' OF STRUCTURE p_fs_row TO <fs_aufnr>.

  CALL FUNCTION 'ZMFPM_ETIQUETAS'
    EXPORTING
      i_matnr = <fs_matnr>
      i_charg = <fs_charg>
      i_aufnr = <fs_aufnr>
      i_kunnr = <fs_kunnr>
      i_pnm   = p_pnm
      i_pnmv  = p_pnmv
      i_lwip  = p_lwip
      i_lpm   = p_lpm.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_LPM
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ROW  text
*----------------------------------------------------------------------*
FORM imprimir_lpm USING p_fs_row
                   CHANGING p_bapiret2 TYPE bapiret2.
*  Ejecutar FM de impresión de lotes de plancha manipulada
  FIELD-SYMBOLS: <fs_matnr> TYPE matnr,
                 <fs_charg> TYPE charg_d,
                 <fs_kunnr> TYPE kunnr,
                 <fs_aufnr> TYPE aufnr.

  ASSIGN COMPONENT 'MATNR' OF STRUCTURE p_fs_row TO <fs_matnr>.
  ASSIGN COMPONENT 'CHARG' OF STRUCTURE p_fs_row TO <fs_charg>.
  ASSIGN COMPONENT 'ZZKUNNR4' OF STRUCTURE p_fs_row TO <fs_kunnr>.
  ASSIGN COMPONENT 'AUFNR' OF STRUCTURE p_fs_row TO <fs_aufnr>.

  CALL FUNCTION 'ZMFPM_ETIQUETAS'
    EXPORTING
      i_matnr = <fs_matnr>
      i_charg = <fs_charg>
      i_aufnr = <fs_aufnr>
      i_kunnr = <fs_kunnr>
      i_pnm   = p_pnm
      i_pnmv  = p_pnmv
      i_lwip  = p_lwip
      i_lpm   = p_lpm.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_LSUBP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ROW  text
*----------------------------------------------------------------------*
FORM imprimir_lgra USING p_fs_row
                   CHANGING p_bapiret2 TYPE bapiret2.
*  Ejecutar FM de impresión de lotes de granza
  FIELD-SYMBOLS: <fs_matnr> TYPE matnr,
                 <fs_charg> TYPE charg_d.

  ASSIGN COMPONENT 'MATNR' OF STRUCTURE p_fs_row TO <fs_matnr>.
  ASSIGN COMPONENT 'CHARG' OF STRUCTURE p_fs_row TO <fs_charg>.

  CALL FUNCTION 'ZMFPM_ETIQUETAS_A6'
    EXPORTING
      i_matnr = <fs_matnr>
      i_charg = <fs_charg>
      i_lsubp = p_lsubp
      i_lgra  = p_lgra.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_NACE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GC_KAPPL_HU  text
*      -->P_LV_OBJKY  text
*      <--P_P_ERROR  text
*----------------------------------------------------------------------*
FORM imprimir_nace  USING    VALUE(p_kappl)
                             VALUE(p_objky)
                    CHANGING p_error TYPE xfeld.
  DATA: ls_nast_old TYPE vnast,
        lt_nast_old TYPE STANDARD TABLE OF vnast,
        lt_nast_new TYPE STANDARD TABLE OF nast.

  SELECT *
   INTO TABLE @DATA(lt_nast)
   FROM nast
   WHERE kappl = @p_kappl AND " Aplicación
         objky = @p_objky AND " Clave de mensaje
         nacha = '1' " Mensajes impresión
   ORDER BY erdat DESCENDING.

  IF sy-subrc = 0.
    READ TABLE lt_nast INTO DATA(ls_nast) INDEX 1.

*    ls_nast_old = ls_nast.
    ls_nast-vsztp = '4'.
    ls_nast-erdat = sy-datum.
    ls_nast-eruhr = sy-uzeit.
    ls_nast-vstat = '0'.
    ls_nast-usnam = sy-uname.
    ls_nast-dimme = 'X'.
    ls_nast-delet = 'X'.
*    erdat
    MOVE-CORRESPONDING ls_nast TO ls_nast_old.
    APPEND ls_nast_old TO lt_nast_old.
*    APPEND ls_nast TO lt_nast_new.

    CALL FUNCTION 'RV_MESSAGE_UPDATE'
      EXPORTING
        msg_kappl = p_kappl
        msg_objky = p_objky
      TABLES
        msg_xnast = lt_nast_old
        msg_ynast = lt_nast_new
      EXCEPTIONS
        no_update = 1
        OTHERS    = 2.
    IF sy-subrc <> 0.
      p_error = abap_true.
* Implement suitable error handling here
    ENDIF.

  ELSE.
*   Definir que hacer si el mensaje no se ha emitido inicialment.
    p_error = abap_true.
  ENDIF.



ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_DEV_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_dev_data .

  SELECT DISTINCT a~vbeln, a~posnr, c~vbeln AS vbeln_p, c~posnr AS posnr_p, c~matnr, f~maktx, a~charg, b~kunag, a~werks
  INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_dev_alv
  FROM lips AS a
  INNER JOIN likp AS b ON b~vbeln = a~vbeln
  INNER JOIN vbap AS c ON a~vgbel = c~vbeln AND a~vgpos = c~posnr
  LEFT JOIN vepo AS d ON d~charg = a~charg AND d~matnr = a~matnr
  LEFT JOIN vekp AS e ON e~venum = d~venum
  LEFT JOIN makt AS f ON c~matnr = f~matnr
  WHERE a~vgtyp = 'H' AND "Posición "Devolución"
  a~shkzg = 'X' AND "Campo devolución marcado
  b~vbtyp = 'T' AND "Tipo de documento "Entrega de devoluciones de pedido"
  b~lfart = 'ZLR2' AND "Entrega de devolución CIPASI
*    Condiciones de pantalla de selección
  c~vbeln IN @s_ebeln2 AND
  c~posnr IN @s_posnr2 AND
  a~matnr IN @s_matnr2 AND
  a~werks IN @s_werks2 AND
  a~charg IN @s_charg2 AND
  e~exidv IN @s_exidv2 AND
  b~kunag IN @s_kunnr2 AND
  f~spras = @sy-langu
  ORDER BY a~vbeln, a~posnr, a~charg.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_ENT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_ent_data.
  SELECT DISTINCT a~mblnr, a~mjahr, a~zeile, a~bwart, a~ebeln, a~ebelp, a~matnr, d~maktx, a~charg, a~werks
    INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_ent_alv
    FROM mseg AS a
    INNER JOIN mara AS b ON a~matnr = b~matnr
    LEFT JOIN ekpo AS c ON c~ebeln = a~ebeln AND c~ebelp = a~ebelp
    LEFT JOIN makt AS d ON a~matnr = d~matnr
    WHERE a~bwart IN @s_bwart3 AND
          b~mtart IN @s_mtart3 AND
          a~matnr IN @s_matnr3 AND
          a~mjahr IN @s_mjahr3 AND
          a~mblnr IN @s_mblnr3 AND
          a~werks IN @s_werks3 AND
          a~charg IN @s_charg3 AND
          a~ebeln IN @s_ebeln3 AND
          a~ebelp IN @s_ebelp3 AND
          a~lifnr IN @s_lifnr3 AND
          a~budat_mkpf IN @s_budat3 AND
          ( a~vgart_mkpf = 'WE' OR a~vgart_mkpf = 'WI' OR a~vgart_mkpf = 'WA' ) AND
          ( a~bwart = '101' OR a~bwart = '309' OR a~bwart = '311' OR a~bwart = '501' OR a~bwart = '561' OR a~bwart = '701' ) AND
          d~spras = @sy-langu
    ORDER BY a~mjahr, a~mblnr, a~zeile, a~bwart, a~ebeln, a~ebelp.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_PNM_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_pnm_data .

  SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg, b~zzebeln4, b~zzebelp4, b~zzkunnr4
    INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_pnm_alv
    FROM aufk AS b
    INNER JOIN aufm AS a ON a~aufnr = b~aufnr
    INNER JOIN mara AS d ON d~matnr = a~matnr
    LEFT JOIN makt AS c ON c~matnr = a~matnr
    WHERE b~auart = 'ZC01' AND
          d~mtart = 'ZPLP' AND
          b~aufnr IN @s_aufnr4 AND
          a~matnr IN @s_matnr4 AND
          b~werks IN @s_werks4 AND
          a~charg IN @s_charg4 AND
          b~zzebeln4 IN @s_ebeln4 AND
          b~zzebelp4 IN @s_ebelp4 AND
          b~zzkunnr4 IN @s_kunnr4 AND
          b~zzdestcmcr IN @s_dest4 AND
          c~spras = @sy-langu
    ORDER BY b~aufnr, a~matnr, a~werks, a~charg, b~zzebeln4, b~zzebelp4.


ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GET_PNMV_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_pnmv_data .

  SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg, b~zzebeln4, b~zzebelp4, b~zzkunnr4
    INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_pnmv_alv
    FROM aufk AS b
    INNER JOIN aufm AS a ON a~aufnr = b~aufnr
    INNER JOIN mara AS d ON d~matnr = a~matnr
    LEFT JOIN makt AS c ON c~matnr = a~matnr
    WHERE b~auart = 'ZC01' AND
          d~mtart = 'ZPLP' AND
          b~aufnr IN @s_aufnr5 AND
          a~matnr IN @s_matnr5 AND
          b~werks IN @s_werks5 AND
          a~charg IN @s_charg5 AND
          b~zzebeln4 IN @s_ebeln5 AND
          b~zzebelp4 IN @s_ebelp5 AND
          b~zzkunnr4 IN @s_kunnr5 AND
          b~zzdestcmcr IN @s_dest5 AND
          b~zzlgort IN @s_zzlg5 AND
          c~spras = @sy-langu
    ORDER BY b~aufnr, a~matnr, a~werks, a~charg, b~zzebeln4, b~zzebelp4.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GET_LSUBP_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_lsubp_data .
  SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg, b~zzebeln4, b~zzebelp4, b~zzkunnr4
    INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_lsubp_alv
    FROM aufk AS b
    INNER JOIN aufm AS a ON a~aufnr = b~aufnr
    INNER JOIN mara AS d ON d~matnr = a~matnr
    LEFT JOIN makt AS c ON c~matnr = a~matnr
    WHERE d~mtart = 'ZPLA' AND
          b~auart IN @s_auart6 AND
          b~aufnr IN @s_aufnr6 AND
          a~matnr IN @s_matnr6 AND
          b~werks IN @s_werks6 AND
          a~charg IN @s_charg6 AND
          a~bwart = '531' AND
*          b~zzebeln4 IN @s_ebeln6 AND
*          b~zzebelp4 IN @s_ebelp6 AND
*          b~zzkunnr4 IN @s_kunnr6 AND
          c~spras = @sy-langu
    ORDER BY b~aufnr, a~matnr, a~werks, a~charg, b~zzebeln4, b~zzebelp4.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GET_WIP_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_wip_data .

  SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg, b~zzebeln4, b~zzebelp4, b~zzkunnr4
    INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_wip_alv
    FROM aufk AS b
    INNER JOIN aufm AS a ON a~aufnr = b~aufnr
    INNER JOIN mara AS d ON d~matnr = a~matnr
    LEFT JOIN makt AS c ON c~matnr = a~matnr
    WHERE b~auart = 'ZC02' AND
          d~mtart = 'ZWIP' AND
          b~aufnr IN @s_aufnr7 AND
          a~matnr IN @s_matnr7 AND
          b~werks IN @s_werks7 AND
          a~charg IN @s_charg7 AND
          b~zzebeln4 IN @s_ebeln7 AND
          b~zzebelp4 IN @s_ebelp7 AND
          b~zzkunnr4 IN @s_kunnr7 AND
          c~spras = @sy-langu
    ORDER BY b~aufnr, a~matnr, a~werks, a~charg, b~zzebeln4, b~zzebelp4.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GET_LPM_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_lpm_data .

  SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg, b~zzebeln4, b~zzebelp4, b~zzkunnr4
    INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_lpm_alv
    FROM aufk AS b
    INNER JOIN aufm AS a ON a~aufnr = b~aufnr
    INNER JOIN mara AS d ON d~matnr = a~matnr
    LEFT JOIN makt AS c ON c~matnr = a~matnr
    WHERE b~auart = 'ZC02' AND
          d~mtart = 'ZPMP' AND
          b~aufnr IN @s_aufnr8 AND
          a~matnr IN @s_matnr8 AND
          b~werks IN @s_werks8 AND
          a~charg IN @s_charg8 AND
          b~zzebeln4 IN @s_ebeln8 AND
          b~zzebelp4 IN @s_ebelp8 AND
          b~zzkunnr4 IN @s_kunnr8 AND
          b~zzdestcmcr IN @s_dest8 AND
          b~zzlgort IN @s_zzlg8 AND
          c~spras = @sy-langu
    ORDER BY b~aufnr, a~matnr, a~werks, a~charg, b~zzebeln4, b~zzebelp4.

ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GET_LGRA_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_lgra_data .
  SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg, b~zzebeln4, b~zzebelp4, b~zzkunnr4
    INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_lgra_alv
    FROM aufk AS b
    INNER JOIN aufm AS a ON a~aufnr = b~aufnr
    INNER JOIN mara AS d ON d~matnr = a~matnr
    LEFT JOIN makt AS c ON c~matnr = a~matnr
    WHERE b~auart = 'ZC04' AND
          d~mtart = 'ZPLA' AND
          b~aufnr IN @s_aufnr9 AND
          a~matnr IN @s_matnr9 AND
          b~werks IN @s_werks9 AND
          a~charg IN @s_charg9 AND
          c~spras = @sy-langu
    ORDER BY b~aufnr, a~matnr, a~werks, a~charg, b~zzebeln4, b~zzebelp4.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  GET_CHARACT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_S_EBELN4  text
*      -->P_S_EBELP4  text
*      -->P_S_KUNNR4  text
*      -->P_S_DEST4  text
*----------------------------------------------------------------------*
FORM get_charact  USING lv_cuobj_bm
                  CHANGING wa_datos TYPE tipo_char
                           error TYPE xfeld.

  DATA: lt_ausp   TYPE TABLE OF ausp,
        wa_ausp   TYPE ausp,
        lt_tvarvc TYPE STANDARD TABLE OF tvarvc,
        wa_tvarvc TYPE tvarvc,
        lv_atinn  TYPE atinn.


  REFRESH: lt_ausp.

**** RECUPERAMOS VALORES DE LOS CLIENTES INDICADOS EN LA PANTALLA DE SELECCIÓN
  CLEAR: wa_tvarvc.
  SELECT SINGLE * FROM tvarvc
    INTO wa_tvarvc
    WHERE name EQ 'ZATINN_CLIENTE'.

  IF sy-subrc = 0.
    CLEAR: lv_atinn, lt_ausp.
    REFRESH: lt_ausp.

    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
      EXPORTING
        input  = wa_tvarvc-low
      IMPORTING
        output = lv_atinn.

    LOOP AT s_kunnr4.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = s_kunnr4-low
        IMPORTING
          output = s_kunnr4-low.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = s_kunnr4-high
        IMPORTING
          output = s_kunnr4-high.

      MODIFY s_kunnr4 INDEX sy-tabix.
    ENDLOOP.

    SELECT * FROM ausp
      INTO TABLE lt_ausp
      WHERE objek = lv_cuobj_bm AND
            klart = '023' AND
            atinn = lv_atinn AND atwrt IN s_kunnr4.

    IF sy-subrc = 0.
      READ TABLE lt_ausp INTO wa_ausp INDEX 1.
      wa_datos-z_cliente = wa_ausp-atwrt.
    ELSE.
      CLEAR: wa_datos-z_cliente .
      error = 'X'.
*      EXIT.
    ENDIF.
  ENDIF.

**** RECUPERAMOS VALORES DE LOS PEDIDOS INDICADOS EN LA PANTALLA DE SELECCIÓN
  CLEAR: wa_tvarvc.
  SELECT SINGLE * FROM tvarvc
    INTO wa_tvarvc
    WHERE name EQ 'ZATINN_PEDIDO'.

  IF sy-subrc = 0.
    CLEAR: lv_atinn, lt_ausp.
    REFRESH: lt_ausp.

    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
      EXPORTING
        input  = wa_tvarvc-low
      IMPORTING
        output = lv_atinn.

    SELECT * FROM ausp
      INTO TABLE lt_ausp
      WHERE objek = lv_cuobj_bm AND
            klart = '023' AND
            atinn =  lv_atinn AND atwrt IN s_ebeln4.

    IF sy-subrc = 0.
      READ TABLE lt_ausp INTO wa_ausp INDEX 1.
      wa_datos-z_pedido = wa_ausp-atwrt.
    ELSE.
      CLEAR: wa_datos-z_pedido.
      error = 'X'.
*      EXIT.
    ENDIF.

  ENDIF.

**** RECUPERAMOS VALORES DE LAS POSICIONES INDICADOS EN LA PANTALLA DE SELECCIÓN
  CLEAR: wa_tvarvc.
  SELECT SINGLE * FROM tvarvc
    INTO wa_tvarvc
    WHERE name EQ 'ZATINN_POSICION'.

  IF sy-subrc = 0.
    CLEAR: lv_atinn, lt_ausp.
    REFRESH: lt_ausp.

    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
      EXPORTING
        input  = wa_tvarvc-low
      IMPORTING
        output = lv_atinn.

    SELECT * FROM ausp
      INTO TABLE lt_ausp
      WHERE objek = lv_cuobj_bm AND
            klart = '023' AND
            atinn =  lv_atinn AND atwrt IN s_ebelp4.

    IF sy-subrc = 0.
      READ TABLE lt_ausp INTO wa_ausp INDEX 1.
      wa_datos-z_posicion = wa_ausp-atwrt.
    ELSE.
      CLEAR: wa_datos-z_posicion.
      error = 'X'.
*      EXIT.
    ENDIF.
  ENDIF.


**** RECUPERAMOS VALORES DE LAS ÓRDENES INDICADOS EN LA PANTALLA DE SELECCIÓN
  CLEAR: wa_tvarvc.
  SELECT SINGLE * FROM tvarvc
    INTO wa_tvarvc
    WHERE name EQ 'ZATINN_ORDEN'.

  IF sy-subrc = 0.
    CLEAR: lv_atinn, lt_ausp.
    REFRESH: lt_ausp.

    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
      EXPORTING
        input  = wa_tvarvc-low
      IMPORTING
        output = lv_atinn.

    SELECT * FROM ausp
      INTO TABLE lt_ausp
      WHERE objek = lv_cuobj_bm AND
            klart = '023' AND
            atinn =  lv_atinn AND atwrt IN s_aufnr4.

    IF sy-subrc = 0.
      READ TABLE lt_ausp INTO wa_ausp INDEX 1.
      wa_datos-z_orden = wa_ausp-atwrt.
    ELSE.
      CLEAR: wa_datos-z_orden .
      error = 'X'.
*      EXIT.
    ENDIF.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_PNM_DATA_NEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_pnm_data_sin_fitros CHANGING p_pp0036_pnm_alv TYPE zttpp0036_pnm_alv.



  DATA: t_lotes  TYPE tty_lotes,
        wa_lotes TYPE LINE OF tty_lotes.

  DATA: t_mara  TYPE STANDARD TABLE OF mara,
        t_mcha  TYPE STANDARD TABLE OF mcha,
        wa_mcha TYPE mcha.

  DATA: wa_char TYPE LINE OF tty_char,
        error   TYPE xfeld.

  DATA: wa_inob  TYPE inob,
        lv_objek TYPE inob-objek.

  DATA: t_datos  TYPE zttpp0036_pnm_alv,
        wa_datos TYPE zspp0036_pnm_alv.

  DATA: lv_aufnr TYPE aufnr.


  CLEAR: t_mara. REFRESH: t_mara.
  SELECT * FROM mara
    INTO TABLE t_mara
    WHERE matnr IN s_matnr4  AND
          mtart = 'ZPLP'.

  CHECK t_mara[] IS NOT INITIAL.

  CLEAR: t_mcha. REFRESH: t_mcha.
  SELECT * FROM mcha
    INTO TABLE t_mcha
    FOR ALL ENTRIES IN t_mara
    WHERE matnr = t_mara-matnr AND
          werks IN s_werks4 AND
          charg IN s_charg4.


  LOOP AT t_mcha INTO wa_mcha.
    CLEAR: t_lotes. REFRESH: t_lotes.
    SELECT DISTINCT matnr charg werks FROM mseg
      INTO TABLE t_lotes
      WHERE matnr =  wa_mcha-matnr AND
            charg =  wa_mcha-charg AND
            werks =  wa_mcha-werks.


    LOOP AT t_lotes INTO wa_lotes.
      CLEAR: lv_objek , wa_datos, wa_char, wa_inob.

      CONCATENATE wa_lotes-matnr wa_lotes-charg INTO lv_objek RESPECTING BLANKS.

      SELECT SINGLE * FROM inob
        INTO wa_inob
        WHERE klart = '023' AND
              obtab = 'MCH1' AND
              objek = lv_objek .

      IF wa_inob-cuobj IS NOT INITIAL.
        PERFORM get_charact USING wa_inob-cuobj
                            CHANGING wa_char
                                     error.
      ENDIF.

      wa_datos-matnr = wa_lotes-matnr.

      SELECT SINGLE maktx FROM makt
        INTO wa_datos-maktx
        WHERE matnr = wa_lotes-matnr AND
              spras = sy-langu.

      wa_datos-werks = wa_lotes-werks.
      wa_datos-charg = wa_lotes-charg.

      wa_datos-zzebeln4 = wa_char-z_pedido.
      wa_datos-zzebelp4 = wa_char-z_posicion.
      wa_datos-zzkunnr4 = wa_char-z_cliente.
      wa_datos-aufnr = wa_char-z_orden.

      IF wa_char-z_orden IS NOT INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input  = wa_char-z_orden
          IMPORTING
            output = lv_aufnr.

        SELECT SINGLE auart FROM aufk
          INTO wa_datos-auart
          WHERE aufnr = lv_aufnr.
      ENDIF.

      APPEND wa_datos TO p_pp0036_pnm_alv.
    ENDLOOP.
  ENDLOOP.


ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  GET_PNMV_DATA_NEW
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM get_pnmv_data_new .
*
*  DATA: t_mcha  TYPE STANDARD TABLE OF mcha,
*        wa_mcha TYPE mcha.
*
*  DATA: lv_cuobj_bm   TYPE mch1-cuobj_bm.
*
*  DATA: t_char  TYPE tty_char,
*        wa_char TYPE LINE OF tty_char,
*        error   TYPE xfeld.
*
*  DATA: t_datos  TYPE zttpp0036_pnm_alv,
*        wa_datos TYPE zspp0036_pnm_alv.
*
*  DATA: lv_objek TYPE cuobn,
*        lv_cuobj TYPE cuobj.
*
*  CLEAR: t_mcha. REFRESH: t_mcha.
*  SELECT * FROM mcha
*      INTO TABLE t_mcha
*      WHERE matnr IN s_matnr5 AND
*            werks IN s_werks5 AND
*            charg IN s_charg5.
*
*  LOOP AT t_mcha INTO wa_mcha.
*    CLEAR: lv_cuobj_bm, error, lv_objek, lv_cuobj.
*
*    SELECT SINGLE cuobj_bm FROM mch1
*     INTO lv_cuobj_bm
*     WHERE matnr = wa_mcha-matnr AND
*           charg = wa_mcha-charg.
*
*
*    IF lv_cuobj_bm IS INITIAL.
*      CONCATENATE wa_mcha-matnr wa_mcha-charg INTO lv_objek.
*
*      SELECT SINGLE cuobj FROM inob
*        INTO lv_cuobj
*        WHERE objek = lv_objek AND
*              klart = '023' AND
*              obtab = 'MCH1'.
*      IF lv_cuobj IS NOT INITIAL.
*        lv_cuobj_bm = lv_cuobj.
*      ENDIF.
*    ENDIF.
*
*    CHECK lv_cuobj_bm IS NOT INITIAL.
*
*    wa_char-matnr =  wa_mcha-matnr.
*    wa_char-werks =  wa_mcha-werks.
*    wa_char-charg =  wa_mcha-charg.
*
*
*    PERFORM get_charact USING lv_cuobj_bm
*                         CHANGING wa_char
*                                  error.
*
*    CHECK error IS INITIAL.
*
*    APPEND  wa_char TO t_char.
*  ENDLOOP.
*
*
*  LOOP AT t_char INTO wa_char.
*    CLEAR: t_datos. REFRESH: t_datos.
*
*    SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg, b~zzebeln4, b~zzebelp4, b~zzkunnr4
*      INTO TABLE @t_datos
*      FROM aufk AS b
*      INNER JOIN aufm AS a ON a~aufnr = b~aufnr
*      INNER JOIN mara AS d ON d~matnr = a~matnr
*      LEFT JOIN makt AS c ON c~matnr = a~matnr
*      WHERE b~auart = 'ZC01' AND
*            d~mtart = 'ZPLP' AND
*            b~aufnr IN @s_aufnr5 AND
*            a~matnr = @wa_char-matnr AND
*            b~werks = @wa_char-werks  AND
*            a~charg = @wa_char-charg AND
*            b~zzdestcmcr IN @s_dest5 AND
*            b~zzlgort IN @s_zzlg5 AND
*            c~spras = @sy-langu.
*
*    LOOP AT t_datos INTO wa_datos.
*      wa_datos-zzebeln4 = wa_char-z_pedido.
*      wa_datos-zzebelp4 = wa_char-z_posicion.
*      wa_datos-zzkunnr4 = wa_char-z_cliente.
*
*      APPEND wa_datos TO gt_pp0036_pnmv_alv.
*    ENDLOOP.
*  ENDLOOP.
*
*  SORT gt_pp0036_pnmv_alv BY aufnr matnr werks charg zzebeln4 zzebelp4.
*
*
*ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  GET_HU_DATA_NEW
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM get_hu_data_new .
*
*  DATA: t_mcha  TYPE STANDARD TABLE OF mcha,
*        wa_mcha TYPE mcha.
*
*  DATA: lv_cuobj_bm   TYPE mch1-cuobj_bm.
*
*  DATA: t_char  TYPE tty_char,
*        wa_char TYPE LINE OF tty_char,
*        error   TYPE xfeld.
*
*  DATA: t_datos  TYPE zttpp0036_hu_alv,
*        wa_datos TYPE LINE OF zttpp0036_hu_alv.
*
*  DATA: lv_objek TYPE cuobn,
*        lv_cuobj TYPE cuobj.
*
*  CLEAR: t_mcha. REFRESH: t_mcha.
*  SELECT * FROM mcha
*      INTO TABLE t_mcha
*      WHERE matnr IN s_matnr1 AND
*            werks IN s_werks1 AND
*            charg IN s_charg1.
*
*  LOOP AT t_mcha INTO wa_mcha.
*    CLEAR: lv_cuobj_bm, error, lv_objek, lv_cuobj.
*
*    SELECT SINGLE cuobj_bm FROM mch1
*     INTO lv_cuobj_bm
*     WHERE matnr = wa_mcha-matnr AND
*           charg = wa_mcha-charg.
*
*
*    IF lv_cuobj_bm IS INITIAL.
*      CONCATENATE wa_mcha-matnr wa_mcha-charg INTO lv_objek.
*
*      SELECT SINGLE cuobj FROM inob
*        INTO lv_cuobj
*        WHERE objek = lv_objek AND
*              klart = '023' AND
*              obtab = 'MCH1'.
*      IF lv_cuobj IS NOT INITIAL.
*        lv_cuobj_bm = lv_cuobj.
*      ENDIF.
*    ENDIF.
*
*    CHECK lv_cuobj_bm IS NOT INITIAL.
*
*    wa_char-matnr =  wa_mcha-matnr.
*    wa_char-werks =  wa_mcha-werks.
*    wa_char-charg =  wa_mcha-charg.
*
*
*    PERFORM get_charact_hu USING lv_cuobj_bm
*                           CHANGING wa_char
*                                    error.
*
*    CHECK error IS INITIAL.
*
*    APPEND  wa_char TO t_char.
*  ENDLOOP.
*
*
*
*
*  LOOP AT t_char INTO wa_char.
*    CLEAR: t_datos. REFRESH: t_datos.
*
*    SELECT  DISTINCT b~venum, b~exidv "e~zzebeln4, e~zzebelp4, e~zzkunnr4, a~werks", a~charg
*      INTO TABLE @t_datos
*      FROM vepo AS a
*      INNER JOIN vekp AS b ON b~venum = a~venum
*      INNER JOIN mara AS c ON c~matnr = a~matnr
*      LEFT JOIN aufm AS d ON d~charg = a~charg AND d~matnr = a~matnr
*      LEFT JOIN aufk AS e ON e~aufnr = d~aufnr
*      LEFT JOIN makt AS f ON f~matnr = a~matnr
*      WHERE d~aufnr IN @s_aufnr1 AND
*            c~mtart IN @s_mtart1 AND
*            c~matnr = @wa_char-matnr AND
*            a~werks = @wa_char-werks AND
*            a~charg = @wa_char-charg AND
*            b~exidv IN @s_exidv1 AND
*            f~spras = @sy-langu.
*
*    LOOP AT t_datos INTO wa_datos.
*      wa_datos-zzebeln4 = wa_char-z_pedido.
*      wa_datos-zzebelp4 = wa_char-z_posicion.
*      wa_datos-zzkunnr4 = wa_char-z_cliente.
*
*      APPEND wa_datos TO gt_pp0036_hu_alv .
*    ENDLOOP.
*  ENDLOOP.
*
*  IF gt_pp0036_hu_alv[] IS INITIAL.
*    MESSAGE w220(zpp).
*  ENDIF.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_CHARACT_HU
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_CUOBJ_BM  text
*      <--P_WA_CHAR  text
*      <--P_ERROR  text
*----------------------------------------------------------------------*
FORM get_charact_hu  USING lv_cuobj_bm
                  CHANGING wa_datos TYPE tipo_char
                    error TYPE xfeld.

  DATA: lt_ausp   TYPE TABLE OF ausp,
        wa_ausp   TYPE ausp,
        lt_tvarvc TYPE STANDARD TABLE OF tvarvc,
        wa_tvarvc TYPE tvarvc,
        lv_atinn  TYPE atinn.


  REFRESH: lt_ausp.

**** RECUPERAMOS VALORES DE LOS CLIENTES INDICADOS EN LA PANTALLA DE SELECCIÓN
  CLEAR: wa_tvarvc.
  SELECT SINGLE * FROM tvarvc
    INTO wa_tvarvc
    WHERE name EQ ' ZATINN_CLIENTE'.

  IF sy-subrc = 0.
    CLEAR: lv_atinn, lt_ausp.
    REFRESH: lt_ausp.

    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
      EXPORTING
        input  = wa_tvarvc-low
      IMPORTING
        output = lv_atinn.

    LOOP AT s_kunnr4.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = s_kunnr4-low
        IMPORTING
          output = s_kunnr4-low.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = s_kunnr4-high
        IMPORTING
          output = s_kunnr4-high.

      MODIFY s_kunnr4 INDEX sy-tabix.
    ENDLOOP.

    SELECT * FROM ausp
      INTO TABLE lt_ausp
      WHERE objek = lv_cuobj_bm AND
            klart = '023' AND
            atinn = lv_atinn AND atwrt IN s_kunnr4.

    IF sy-subrc = 0.
      READ TABLE lt_ausp INTO wa_ausp INDEX 1.
      wa_datos-z_cliente = wa_ausp-atwrt.
    ELSE.
      error = 'X'.
      EXIT.
    ENDIF.
  ENDIF.

**** RECUPERAMOS VALORES DE LOS PEDIDOS INDICADOS EN LA PANTALLA DE SELECCIÓN
  CLEAR: wa_tvarvc.
  SELECT SINGLE * FROM tvarvc
    INTO wa_tvarvc
    WHERE name EQ 'ZATINN_PEDIDO'.

  IF sy-subrc = 0.
    CLEAR: lv_atinn, lt_ausp.
    REFRESH: lt_ausp.

    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
      EXPORTING
        input  = wa_tvarvc-low
      IMPORTING
        output = lv_atinn.

    SELECT * FROM ausp
      INTO TABLE lt_ausp
      WHERE objek = lv_cuobj_bm AND
            klart = '023' AND
            atinn =  lv_atinn AND atwrt IN s_ebeln4.

    IF sy-subrc = 0.
      READ TABLE lt_ausp INTO wa_ausp INDEX 1.
      wa_datos-z_pedido = wa_ausp-atwrt.
    ELSE.
      error = 'X'.
      EXIT.
    ENDIF.

  ENDIF.

ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  GET_LPM_DATA_NEW
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM get_lpm_data_new .
*
*  DATA: t_mcha  TYPE STANDARD TABLE OF mcha,
*        wa_mcha TYPE mcha.
*
*  DATA: lv_cuobj_bm   TYPE mch1-cuobj_bm.
*
*  DATA: t_char  TYPE tty_char,
*        wa_char TYPE LINE OF tty_char,
*        error   TYPE xfeld.
*
*  DATA: t_datos  TYPE zttpp0036_pnm_alv,
*        wa_datos TYPE LINE OF zttpp0036_pnm_alv.
*
*  DATA: lv_objek TYPE cuobn,
*        lv_cuobj TYPE cuobj.
*
*
*  CLEAR: t_mcha. REFRESH: t_mcha.
*  SELECT * FROM mcha
*      INTO TABLE t_mcha
*      WHERE matnr IN s_matnr8 AND
*            werks IN s_werks8 AND
*            charg IN s_charg8.
*
*  LOOP AT t_mcha INTO wa_mcha.
*    CLEAR: lv_cuobj_bm, error, lv_objek, lv_cuobj.
*
*    SELECT SINGLE cuobj_bm FROM mch1
*     INTO lv_cuobj_bm
*     WHERE matnr = wa_mcha-matnr AND
*           charg = wa_mcha-charg.
*
*    IF lv_cuobj_bm IS INITIAL.
*      CONCATENATE wa_mcha-matnr wa_mcha-charg INTO lv_objek.
*
*      SELECT SINGLE cuobj FROM inob
*        INTO lv_cuobj
*        WHERE objek = lv_objek AND
*              klart = '023' AND
*              obtab = 'MCH1'.
*      IF lv_cuobj IS NOT INITIAL.
*        lv_cuobj_bm = lv_cuobj.
*      ENDIF.
*    ENDIF.
*
*    wa_char-matnr =  wa_mcha-matnr.
*    wa_char-werks =  wa_mcha-werks.
*    wa_char-charg =  wa_mcha-charg.
*
*
*    PERFORM get_charact USING lv_cuobj_bm
*                         CHANGING wa_char
*                                  error.
*
*    CHECK error IS INITIAL.
*
*    APPEND  wa_char TO t_char.
*  ENDLOOP.
*
*
*
*
*  LOOP AT t_char INTO wa_char.
*    CLEAR: t_datos. REFRESH: t_datos.
*
*    SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg " b~zzebeln4, b~zzebelp4, b~zzkunnr4
*      INTO TABLE @t_datos
*      FROM aufk AS b
*      INNER JOIN aufm AS a ON a~aufnr = b~aufnr
*      INNER JOIN mara AS d ON d~matnr = a~matnr
*      LEFT JOIN makt AS c ON c~matnr = a~matnr
*      WHERE b~auart = 'ZC02' AND
*            d~mtart = 'ZPMP' AND
*            b~aufnr IN @s_aufnr8 AND
*            a~matnr = @wa_char-matnr AND
*            b~werks = @wa_char-werks AND
*            a~charg = @wa_char-charg AND
*            b~zzdestcmcr IN @s_dest8 AND
*            b~zzlgort IN @s_zzlg8 AND
*            c~spras = @sy-langu.
*
*    LOOP AT t_datos INTO wa_datos.
*
*      wa_datos-zzebeln4 = wa_char-z_pedido.
*      wa_datos-zzebelp4 = wa_char-z_posicion.
*      wa_datos-zzkunnr4 = wa_char-z_cliente.
*
*
*      APPEND wa_datos TO gt_pp0036_pnm_alv.
*    ENDLOOP.
*  ENDLOOP.
*
*  SORT gt_pp0036_pnm_alv BY aufnr matnr werks charg zzebeln4 zzebelp4.
*
*
*ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  GET_WIP_DATA_NEW
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM get_wip_data_new .
*
*  DATA: t_mcha  TYPE STANDARD TABLE OF mcha,
*        wa_mcha TYPE mcha.
*
*  DATA: lv_cuobj_bm   TYPE mch1-cuobj_bm.
*
*  DATA: t_char  TYPE tty_char,
*        wa_char TYPE LINE OF tty_char,
*        error   TYPE xfeld.
*
*  DATA: t_datos  TYPE zttpp0036_pnm_alv,
*        wa_datos TYPE LINE OF zttpp0036_pnm_alv.
*
*  DATA: lv_objek TYPE cuobn,
*        lv_cuobj TYPE cuobj.
*
*  CLEAR: t_mcha. REFRESH: t_mcha.
*  SELECT * FROM mcha
*      INTO TABLE t_mcha
*      WHERE matnr IN s_matnr7 AND
*            werks IN s_werks7 AND
*            charg IN s_charg7.
*
*  LOOP AT t_mcha INTO wa_mcha.
*    CLEAR: lv_cuobj_bm, error, lv_objek, lv_cuobj.
*
*    SELECT SINGLE cuobj_bm FROM mch1
*     INTO lv_cuobj_bm
*     WHERE matnr = wa_mcha-matnr AND
*           charg = wa_mcha-charg.
*
*
*    IF lv_cuobj_bm IS INITIAL.
*      CONCATENATE wa_mcha-matnr wa_mcha-charg INTO lv_objek.
*
*      SELECT SINGLE cuobj FROM inob
*        INTO lv_cuobj
*        WHERE objek = lv_objek AND
*              klart = '023' AND
*              obtab = 'MCH1'.
*      IF lv_cuobj IS NOT INITIAL.
*        lv_cuobj_bm = lv_cuobj.
*      ENDIF.
*    ENDIF.
*
*    CHECK lv_cuobj_bm IS NOT INITIAL.
*
*    wa_char-matnr =  wa_mcha-matnr.
*    wa_char-werks =  wa_mcha-werks.
*    wa_char-charg =  wa_mcha-charg.
*
*
*    PERFORM get_charact USING lv_cuobj_bm
*                         CHANGING wa_char
*                                  error.
*
*    CHECK error IS INITIAL.
*
*    APPEND  wa_char TO t_char.
*  ENDLOOP.
*
*
*
*
*  LOOP AT t_char INTO wa_char.
*    CLEAR: t_datos. REFRESH: t_datos.
*
*
*    SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg, b~zzebeln4, b~zzebelp4, b~zzkunnr4
*       INTO TABLE @t_datos
*       FROM aufk AS b
*       INNER JOIN aufm AS a ON a~aufnr = b~aufnr
*       INNER JOIN mara AS d ON d~matnr = a~matnr
*       LEFT JOIN makt AS c ON c~matnr = a~matnr
*       WHERE b~auart = 'ZC02' AND
*             d~mtart = 'ZWIP' AND
*             b~aufnr IN @s_aufnr7 AND
*             a~matnr = @wa_char-matnr AND
*             b~werks = @wa_char-werks AND
*             a~charg = @wa_char-charg AND
*             c~spras = @sy-langu
*
*    ORDER BY b~aufnr, a~matnr, a~werks, a~charg, b~zzebeln4, b~zzebelp4..
*
*
*    LOOP AT t_datos INTO wa_datos.
*
*      wa_datos-zzebeln4 = wa_char-z_pedido.
*      wa_datos-zzebelp4 = wa_char-z_posicion.
*      wa_datos-zzkunnr4 = wa_char-z_cliente.
*
*
*      APPEND wa_datos TO gt_pp0036_wip_alv.
*    ENDLOOP.
*  ENDLOOP.
*
*  SORT gt_pp0036_wip_alv BY aufnr matnr werks charg zzebeln4 zzebelp4.
*
*
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_HU_DATA_NEW_1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM get_hu_data_new_1 .
*
*  DATA: t_objek  TYPE tty_objek,
*        wa_objek TYPE LINE OF tty_objek.
*
*  DATA: lt_ausp  TYPE TABLE OF ausp,
*        wa_ausp  TYPE ausp,
*        t_inob   TYPE STANDARD TABLE OF inob,
*        wa_inob  TYPE inob,
*        lv_cuobj TYPE inob-cuobj,
*        wa_mcha  TYPE mcha,
*        lt_mcha  TYPE STANDARD TABLE OF mcha.
*
*  DATA: t_datos  TYPE zttpp0036_pnm_alv,
*        wa_datos TYPE zspp0036_pnm_alv.
*
*  DATA: lv_cliente  TYPE ausp-atwrt,
*        lv_pedido   TYPE ausp-atwrt,
*        lv_posicion TYPE ausp-atwrt.
*
*  DATA: lv_atinn_ext TYPE c LENGTH 20.
*
*
*  DATA:  lv_atinn_cliente  TYPE atinn,
*         lv_atinn_pedido   TYPE atinn,
*         lv_atinn_posicion TYPE atinn,
*         lv_atinn_orden    TYPE atinn.
*
** recuperamos las características del sistema de clasificación que corresponden con los filtros
** de destinatario de mercancia, pedido y posición informados en la pantalla de selección.
*  RANGES: rg_ebelp FOR ausp-atwrt.
*  CLEAR: rg_ebelp. REFRESH: rg_ebelp.
*
*  PERFORM get_charact_new TABLES lt_ausp s_kunnr1 s_ebeln1  rg_ebelp s_aufnr1
*                          CHANGING lv_atinn_cliente
*                                   lv_atinn_pedido
*                                   lv_atinn_posicion
*                                   lv_atinn_orden.
*
** recuperamos los objetos que tienen el sistema de clasificación
*  LOOP AT lt_ausp INTO wa_ausp.
*    wa_objek-objek = wa_ausp-objek.
*    APPEND wa_objek TO t_objek.
*  ENDLOOP.
*
*  SORT t_objek  BY objek ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM t_objek.
*
*
*  LOOP AT t_objek INTO wa_objek.
*    lv_cuobj = wa_objek-objek.
*
**   verificamos si los objetos cumplen con el resto de criterios de la pantalla de selección.
*    SELECT SINGLE * FROM inob
*      INTO wa_inob
*      WHERE cuobj = lv_cuobj AND
*            klart = '023' AND
*            obtab = 'MCH1'.
*
*    CLEAR: lt_mcha. REFRESH: lt_mcha.
*    SELECT SINGLE * FROM mcha
*        INTO wa_mcha
*        WHERE ( matnr = wa_inob-objek(18) AND matnr IN s_matnr1 ) AND
*              werks IN s_werks1 AND
*              ( charg  = wa_inob-objek+18(10) AND charg IN s_charg1 ) .
*
*    IF sy-subrc = 0.
*      CLEAR: t_datos.
*      REFRESH: t_datos.
*
*      SELECT  DISTINCT b~venum, b~exidv "e~zzebeln4, e~zzebelp4, e~zzkunnr4, a~werks", a~charg
*        INTO TABLE @t_datos
*        FROM vepo AS a
*        INNER JOIN vekp AS b ON b~venum = a~venum
*        INNER JOIN mara AS c ON c~matnr = a~matnr
*        LEFT JOIN aufm AS d ON d~charg = a~charg AND d~matnr = a~matnr
*        LEFT JOIN aufk AS e ON e~aufnr = d~aufnr
*        LEFT JOIN makt AS f ON f~matnr = a~matnr
*        WHERE d~aufnr IN @s_aufnr1 AND
*              c~mtart IN @s_mtart1 AND
*              c~matnr = @wa_mcha-matnr AND
*              a~werks = @wa_mcha-werks AND
*              a~charg = @wa_mcha-charg AND
*              b~exidv IN @s_exidv1 AND
*              f~spras = @sy-langu.
*
**     de cada objeto, recuperamos el valor de las características 'CÓDIGO DE CLIENTE',
**     'PEDIDO COMPRA/VENTA' y 'POSICIÓN PEDIDO COMPRA/VENTA'
*      CLEAR: lv_cliente, lv_pedido, lv_posicion.
*      LOOP AT lt_ausp INTO wa_ausp WHERE objek = wa_objek-objek.
*        CALL FUNCTION 'CONVERSION_EXIT_ATINN_OUTPUT'
*          EXPORTING
*            input  = wa_ausp-atinn
*          IMPORTING
*            output = lv_atinn_ext.
*
*        CASE lv_atinn_ext.
*          WHEN 'Z_CLIENTE'.
*            lv_cliente = wa_ausp-atwrt.
*
*          WHEN 'Z_PEDIDO'.
*            lv_pedido = wa_ausp-atwrt.
*
*          WHEN 'Z_POSICION'.
*            lv_posicion = wa_ausp-atwrt.
*        ENDCASE.
*      ENDLOOP.
*
**     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
**     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
**     de una manera rápida
*      IF lv_cliente IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*                 INTO  lv_cliente
*                 WHERE objek = wa_objek-objek AND
*                       atinn = lv_atinn_cliente AND
*                       klart = '023'.
*      ENDIF.
*
*      IF lv_pedido IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*           INTO  lv_pedido
*           WHERE objek = wa_objek-objek AND
*                 atinn = lv_atinn_pedido AND
*                 klart = '023'.
*      ENDIF.
*
*
*      IF lv_posicion IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*           INTO  lv_posicion
*           WHERE objek = wa_objek-objek AND
*                 atinn = lv_atinn_posicion AND
*                 klart = '023'.
*      ENDIF.
*
**     volcamos la información a la tabla interna que mostramos en el ALV.
*      LOOP AT t_datos INTO wa_datos.
*        wa_datos-zzebeln4 = lv_pedido.
*        wa_datos-zzebelp4 = lv_posicion.
*        wa_datos-zzkunnr4 = lv_cliente.
*        APPEND wa_datos TO gt_pp0036_hu_alv .
*      ENDLOOP.
*
*    ENDIF.
*  ENDLOOP.
*
**  SORT gt_pp0036_hu_alv  BY aufn
*
*  IF gt_pp0036_hu_alv[] IS INITIAL.
*    MESSAGE w220(zpp).
*  ENDIF.
*
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_HU_DATA_NEW_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_hu_data_new_2 . " cvivo

  DATA: t_objek  TYPE tty_objek,
        wa_objek TYPE LINE OF tty_objek.

  DATA: lt_ausp  TYPE TABLE OF ausp,
        wa_ausp  TYPE ausp,
        t_inob   TYPE STANDARD TABLE OF inob,
        wa_inob  TYPE inob,
        lv_cuobj TYPE inob-cuobj,
        wa_mcha  TYPE mcha,
        lt_mcha  TYPE STANDARD TABLE OF mcha,
        lv_objek TYPE inob-objek.

*  DATA: t_datos  TYPE zttpp0036_pnm_alv,
*        wa_datos TYPE zspp0036_pnm_alv.
*  FIELD-SYMBOLS: <datos> TYPE zspp0036_pnm_alv.

  DATA: lv_cliente  TYPE ausp-atwrt,
        lv_pedido   TYPE ausp-atwrt,
        lv_posicion TYPE ausp-atwrt.

  DATA: lv_atinn_ext TYPE c LENGTH 20.

* recuperamos las características del sistema de clasificación que corresponden con los filtros
* de destinatario de mercancia, pedido y posición informados en la pantalla de selección.
  RANGES: rg_ebelp FOR ausp-atwrt.
  CLEAR: rg_ebelp. REFRESH: rg_ebelp.

  IF  s_kunnr1[] IS NOT INITIAL OR " si hay selección
      s_ebeln1[] IS NOT INITIAL OR
      s_aufnr1[] IS NOT INITIAL.
    PERFORM get_charact_new_2 TABLES lt_ausp s_kunnr1 s_ebeln1  rg_ebelp s_aufnr1
                            CHANGING g_atinn_cliente
                                    g_atinn_pedido
                                    g_atinn_posicion
                                    g_atinn_orden.

* recuperamos los objetos que tienen el sistema de clasificación
    LOOP AT lt_ausp INTO wa_ausp.
      wa_objek-objek = wa_ausp-objek.
      APPEND wa_objek TO t_objek.
    ENDLOOP.

    SORT t_objek  BY objek ASCENDING.
    DELETE ADJACENT DUPLICATES FROM t_objek.

    LOOP AT t_objek INTO wa_objek.
      lv_cuobj = wa_objek-objek.

*   verificamos si los objetos cumplen con el resto de criterios de la pantalla de selección.
      SELECT SINGLE * FROM inob
        INTO wa_inob
        WHERE cuobj = lv_cuobj AND
              klart = '023' AND
              obtab = 'MCH1'.

      CLEAR: lt_mcha. REFRESH: lt_mcha.
      SELECT SINGLE * FROM mcha
          INTO wa_mcha
          WHERE ( matnr = wa_inob-objek(18) AND matnr IN s_matnr1 ) AND
                werks IN s_werks1 AND
                ( charg  = wa_inob-objek+18(10) AND charg IN s_charg1 ) .

      IF sy-subrc = 0.
        SELECT  DISTINCT b~venum, b~exidv, e~zzebeln4, e~zzebelp4, e~zzkunnr4, a~werks, a~charg, a~matnr
          INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_hu_alv
          FROM vepo AS a
          INNER JOIN vekp AS b ON b~venum = a~venum
          INNER JOIN mara AS c ON c~matnr = a~matnr
          LEFT JOIN aufm AS d ON d~charg = a~charg AND d~matnr = a~matnr
          LEFT JOIN aufk AS e ON e~aufnr = d~aufnr
          LEFT JOIN makt AS f ON f~matnr = a~matnr
          WHERE d~aufnr IN @s_aufnr1 AND
                c~mtart IN @s_mtart1 AND
                c~matnr = @wa_mcha-matnr AND
                a~werks = @wa_mcha-werks AND
                a~charg = @wa_mcha-charg AND
                b~exidv IN @s_exidv1 AND
                f~spras = @sy-langu.

        IF sy-subrc EQ 0.
*     de cada objeto, recuperamos el valor de las características 'CÓDIGO DE CLIENTE',
*     'PEDIDO COMPRA/VENTA' y 'POSICIÓN PEDIDO COMPRA/VENTA'
          CLEAR: lv_cliente, lv_pedido, lv_posicion.
          LOOP AT lt_ausp INTO wa_ausp WHERE objek = wa_objek-objek.
            CALL FUNCTION 'CONVERSION_EXIT_ATINN_OUTPUT'
              EXPORTING
                input  = wa_ausp-atinn
              IMPORTING
                output = lv_atinn_ext.

            CASE lv_atinn_ext.
              WHEN 'Z_CLIENTE'.
                lv_cliente = wa_ausp-atwrt.

              WHEN 'Z_PEDIDO'.
                lv_pedido = wa_ausp-atwrt.

              WHEN 'Z_POSICION'.
                lv_posicion = wa_ausp-atwrt.
            ENDCASE.

            LOOP AT gt_pp0036_hu_alv ASSIGNING <hu_alv>.
              <hu_alv>-zzkunnr4 = lv_cliente.
              <hu_alv>-zzebeln4 = lv_pedido.
              <hu_alv>-zzebelp4 = lv_posicion.
            ENDLOOP.
          ENDLOOP.

*     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
*     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
*     de una manera rápida
          LOOP AT gt_pp0036_hu_alv ASSIGNING <hu_alv>.
            CLEAR: lv_cliente, lv_posicion, lv_pedido, zspp0036_hu_alv.

            IF <hu_alv>-zzkunnr4 IS INITIAL.
              SELECT SINGLE atwrt FROM ausp
                       INTO  lv_cliente
                       WHERE objek = wa_objek-objek AND
                             atinn = g_atinn_cliente AND
                             klart = '023'.

              <hu_alv>-zzkunnr4 = lv_cliente.
            ENDIF.

            IF <hu_alv>-zzebeln4 IS INITIAL.
              SELECT SINGLE atwrt FROM ausp
                 INTO  lv_pedido
                 WHERE objek = wa_objek-objek AND
                       atinn = g_atinn_pedido AND
                       klart = '023'.

              <hu_alv>-zzebeln4 = lv_pedido.
            ENDIF.

            IF <hu_alv>-zzebelp4 IS INITIAL.
              SELECT SINGLE atwrt FROM ausp
                 INTO  lv_posicion
                 WHERE objek = wa_objek-objek AND
                       atinn = g_atinn_posicion AND
                       klart = '023'.

              <hu_alv>-zzebelp4 = lv_posicion.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ELSE.
    SELECT DISTINCT b~venum, b~exidv, e~zzebeln4, e~zzebelp4, e~zzkunnr4, a~werks, a~charg, a~matnr
      INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_hu_alv
      FROM vepo AS a
      INNER JOIN vekp AS b ON b~venum = a~venum
      INNER JOIN mara AS c ON c~matnr = a~matnr
      LEFT JOIN aufm AS d ON d~charg = a~charg AND d~matnr = a~matnr
      LEFT JOIN aufk AS e ON e~aufnr = d~aufnr
      LEFT JOIN makt AS f ON f~matnr = a~matnr
      WHERE d~aufnr IN @s_aufnr1 AND
            c~mtart IN @s_mtart1 AND
            c~matnr IN @s_matnr1 AND
            a~werks IN @s_werks1 AND
            a~charg IN @s_charg1 AND
            b~exidv IN @s_exidv1 AND
            f~spras = @sy-langu.

    LOOP AT gt_pp0036_hu_alv ASSIGNING <hu_alv>." rellenamos las características
      CLEAR: lv_cliente, lv_pedido, lv_posicion, wa_inob.

      SELECT SINGLE * FROM mcha
        INTO wa_mcha
        WHERE matnr EQ <hu_alv>-matnr
          AND werks EQ <hu_alv>-werks
          AND charg EQ <hu_alv>-charg.

      IF sy-subrc EQ 0.
        CLEAR: lv_objek.
        CONCATENATE <hu_alv>-matnr <hu_alv>-charg INTO lv_objek RESPECTING BLANKS.

        SELECT SINGLE * FROM inob
          INTO wa_inob
          WHERE klart = '023' AND
                obtab = 'MCH1' AND
                objek = lv_objek.

*     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
*     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
*     de una manera rápida
        SELECT SINGLE atwrt FROM ausp
          INTO  lv_cliente
          WHERE objek = wa_inob-cuobj AND
                atinn = g_atinn_cliente AND
                klart = '023'.

        SELECT SINGLE atwrt FROM ausp
           INTO  lv_pedido
           WHERE objek = wa_inob-cuobj AND
                 atinn = g_atinn_pedido AND
                 klart = '023'.

        SELECT SINGLE atwrt FROM ausp
           INTO  lv_posicion
           WHERE objek = wa_inob-cuobj AND
                 atinn = g_atinn_posicion AND
                 klart = '023'.

        <hu_alv>-zzkunnr4 = lv_cliente.
        <hu_alv>-zzebeln4 = lv_pedido.
        <hu_alv>-zzebelp4 = lv_posicion.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF gt_pp0036_hu_alv[] IS INITIAL.
    MESSAGE w220(zpp).
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_PNM_DATA_NEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_pnm_data_new.

  IF s_kunnr4[] IS INITIAL AND s_ebeln4[] IS INITIAL AND s_ebelp4[] IS INITIAL AND s_aufnr4[] IS INITIAL.
    PERFORM get_pnm_data_sin_fitros CHANGING gt_pp0036_pnm_alv.
  ELSE.
    PERFORM get_pnm_data_con_fitros_2 CHANGING gt_pp0036_pnm_alv.
  ENDIF.

  SORT gt_pp0036_pnm_alv  BY aufnr matnr werks charg zzebeln4 zzebelp4.

ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  GET_CHARACT_NEW
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_S_EBELN4  text
**      -->P_S_EBELP4  text
**      -->P_S_KUNNR4  text
**      <--P_LT_AUSP  text
**----------------------------------------------------------------------*
*FORM get_charact_new  TABLES lt_ausp
*                             s_kunnr
*                             s_ebeln
*                             s_ebelp
*                             s_aufnr
*                      CHANGING p_atinn_cliente TYPE atinn
*                               p_atinn_pedido TYPE atinn
*                               p_atinn_posicion TYPE atinn
*                               p_atinn_orden  TYPE atinn.
*
*  DATA: lt_tvarvc TYPE STANDARD TABLE OF tvarvc,
*        wa_tvarvc TYPE tvarvc.
*
*  DATA: rg_atwrt_cliente  TYPE RANGE OF ausp-atwrt,
*        rg_atwrt_pedido   TYPE RANGE OF ausp-atwrt,
*        rg_atwrt_posicion TYPE RANGE OF ausp-atwrt,
*        rg_atwrt_orden    TYPE RANGE OF ausp-atwrt.
*
*  DATA: wa_atwrt LIKE LINE OF  rg_atwrt_cliente.
*
*  DATA: rg_kunnr TYPE RANGE OF kun_range,
*        wa_kunnr TYPE kun_range.
*
*
*  DATA: lt_ausp_pedido   TYPE STANDARD TABLE OF ausp,
*        lt_ausp_cliente  TYPE STANDARD TABLE OF ausp,
*        lt_ausp_posicion TYPE STANDARD TABLE OF ausp,
*        lt_ausp_orden    TYPE STANDARD TABLE OF ausp.
*
*
*  DATA: wa_ausp_pedido   TYPE ausp,
*        wa_ausp_cliente  TYPE ausp,
*        wa_ausp_posicion TYPE  ausp,
*        wa_ausp_orden    TYPE  ausp.
*
*
*  RANGES: rg_ebeln FOR ausp-atwrt.
*  DATA: wa_ebeln TYPE range_vbeln.
*
*  RANGES: rg_ebelp FOR ausp-atwrt.
*  DATA: wa_ebelp TYPE rjksd_posnr_range.
*
*
*  RANGES: rg_aufnr FOR ausp-atwrt.
*  DATA: wa_aufnr TYPE aufnr_rang.
*
*
*
***** RECUPERAMOS VALORES DE LOS CLIENTES INDICADOS EN LA PANTALLA DE SELECCIÓN
*  rg_kunnr[] = s_kunnr[].
*
*
*  CLEAR: wa_tvarvc.
*  SELECT SINGLE * FROM tvarvc
*    INTO wa_tvarvc
*    WHERE name EQ 'ZATINN_CLIENTE'.
*
*  IF sy-subrc = 0.
*
*    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
*      EXPORTING
*        input  = wa_tvarvc-low
*      IMPORTING
*        output = p_atinn_cliente.
*
*    LOOP AT rg_kunnr INTO wa_kunnr.
*      MOVE-CORRESPONDING wa_kunnr TO wa_atwrt.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*        EXPORTING
*          input  = wa_kunnr-kunnr_low
*        IMPORTING
*          output = wa_atwrt-low.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*        EXPORTING
*          input  = wa_kunnr-kunnr_high
*        IMPORTING
*          output = wa_atwrt-high.
*
*
*      APPEND wa_atwrt TO rg_atwrt_cliente.
*    ENDLOOP.
*
*    SELECT * FROM ausp
*      INTO TABLE lt_ausp_cliente
*      WHERE klart = '023' AND
*            atinn = p_atinn_cliente AND atwrt IN rg_atwrt_cliente.
*  ENDIF.
*
***** RECUPERAMOS VALORES DE LOS PEDIDOS INDICADOS EN LA PANTALLA DE SELECCIÓN
*  rg_ebeln[] = s_ebeln[].
*
*  CLEAR: wa_tvarvc.
*  SELECT SINGLE * FROM tvarvc
*    INTO wa_tvarvc
*    WHERE name EQ 'ZATINN_PEDIDO'.
*
*  IF sy-subrc = 0.
*    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
*      EXPORTING
*        input  = wa_tvarvc-low
*      IMPORTING
*        output = p_atinn_pedido.
*
*    LOOP AT rg_ebeln INTO wa_ebeln.
*
*      MOVE-CORRESPONDING wa_ebeln TO wa_atwrt.
*
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*        EXPORTING
*          input  = wa_ebeln-low
*        IMPORTING
*          output = wa_atwrt-low.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*        EXPORTING
*          input  = wa_ebeln-high
*        IMPORTING
*          output = wa_atwrt-high.
*
*
*      APPEND wa_atwrt TO rg_atwrt_pedido.
*    ENDLOOP.
*
*    SELECT * FROM ausp
*      APPENDING TABLE lt_ausp_pedido
*      WHERE klart = '023' AND
*            atinn =  p_atinn_pedido AND atwrt IN rg_atwrt_pedido.
*
*  ENDIF.
*
*
*
***** RECUPERAMOS VALORES DE LAS POSICIONES DE LOS PEDIDOS INDICADOS EN LA PANTALLA DE SELECCIÓN
*  rg_ebelp[] = s_ebelp[].
*
*  CLEAR: wa_tvarvc.
*  SELECT SINGLE * FROM tvarvc
*    INTO wa_tvarvc
*    WHERE name EQ 'ZATINN_POSICION'.
*
*  IF sy-subrc = 0.
*    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
*      EXPORTING
*        input  = wa_tvarvc-low
*      IMPORTING
*        output = p_atinn_posicion.
*
*    LOOP AT rg_ebelp INTO wa_ebelp.
*
*      MOVE-CORRESPONDING wa_ebelp TO wa_atwrt.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*        EXPORTING
*          input  = wa_ebelp-low
*        IMPORTING
*          output = wa_atwrt-low.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*        EXPORTING
*          input  = wa_ebelp-high
*        IMPORTING
*          output = wa_atwrt-high.
*
*
*      APPEND wa_atwrt TO rg_atwrt_posicion.
*    ENDLOOP.
*
*
*    SELECT * FROM ausp
*      APPENDING TABLE lt_ausp_posicion
*      WHERE klart = '023' AND
*            atinn =  p_atinn_posicion AND atwrt IN rg_atwrt_posicion.
*
*  ENDIF.
*
*
*
***** RECUPERAMOS VALORES DE LAS ÓRDNES INDICADOS EN LA PANTALLA DE SELECCIÓN
*  rg_aufnr[] = s_aufnr[].
*
*  CLEAR: wa_tvarvc.
*  SELECT SINGLE * FROM tvarvc
*    INTO wa_tvarvc
*    WHERE name EQ 'ZATINN_ORDEN'.
*
*  IF sy-subrc = 0.
*    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
*      EXPORTING
*        input  = wa_tvarvc-low
*      IMPORTING
*        output = p_atinn_orden.
*
*    LOOP AT rg_aufnr INTO wa_aufnr.
*
*      MOVE-CORRESPONDING wa_aufnr TO wa_atwrt.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*        EXPORTING
*          input  = wa_aufnr-low
*        IMPORTING
*          output = wa_atwrt-low.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*        EXPORTING
*          input  = wa_aufnr-high
*        IMPORTING
*          output = wa_atwrt-high.
*
*
*      APPEND wa_atwrt TO rg_atwrt_orden.
*    ENDLOOP.
*
*
*    SELECT * FROM ausp
*      APPENDING TABLE lt_ausp_orden
*      WHERE klart = '023' AND
*            atinn =  p_atinn_orden AND atwrt IN rg_atwrt_orden.
*
*  ENDIF.
*
*
*
*
*
*  IF s_kunnr[] IS INITIAL AND s_ebeln[] IS INITIAL AND s_ebelp[] IS INITIAL AND
*     s_aufnr[] IS INITIAL.
*    APPEND LINES OF lt_ausp_cliente TO lt_ausp.
*    APPEND LINES OF lt_ausp_pedido TO lt_ausp.
*    APPEND LINES OF lt_ausp_posicion TO lt_ausp.
*    APPEND LINES OF lt_ausp_orden TO lt_ausp.
*  ENDIF.
*
*
*  IF s_kunnr[] IS NOT INITIAL AND s_ebeln[] IS NOT INITIAL AND s_ebelp[] IS NOT INITIAL AND
*     s_aufnr[] IS NOT INITIAL.
*    LOOP AT lt_ausp_cliente INTO wa_ausp_cliente.
*      LOOP AT lt_ausp_pedido INTO wa_ausp_pedido WHERE objek = wa_ausp_cliente-objek.
*        LOOP AT lt_ausp_posicion INTO wa_ausp_posicion WHERE objek = wa_ausp_cliente-objek.
*          LOOP AT lt_ausp_orden INTO wa_ausp_orden WHERE objek = wa_ausp_cliente-objek.
*            APPEND  wa_ausp_cliente TO lt_ausp.
*            APPEND  wa_ausp_pedido TO lt_ausp.
*            APPEND  wa_ausp_posicion TO lt_ausp.
*            APPEND  wa_ausp_orden TO lt_ausp.
*          ENDLOOP.
*        ENDLOOP.
*      ENDLOOP.
*    ENDLOOP.
*  ENDIF.
*
*
*  IF s_kunnr[] IS NOT INITIAL AND s_ebeln[] IS INITIAL AND s_ebelp[] IS INITIAL AND
*     s_aufnr[] IS INITIAL.
*    SELECT * FROM ausp
*          APPENDING TABLE lt_ausp
*          WHERE klart = '023' AND
*                ( atinn =  p_atinn_cliente AND atwrt IN rg_atwrt_cliente ).
*  ENDIF.
*
*  IF s_kunnr[] IS NOT INITIAL AND s_ebeln[] IS NOT INITIAL AND s_ebelp[] IS INITIAL AND
*     s_aufnr[] IS INITIAL.
*    LOOP AT lt_ausp_cliente INTO wa_ausp_cliente.
*      LOOP AT lt_ausp_pedido INTO wa_ausp_pedido WHERE objek = wa_ausp_cliente-objek.
*        APPEND  wa_ausp_cliente TO lt_ausp.
*        APPEND  wa_ausp_pedido TO lt_ausp.
*      ENDLOOP.
*    ENDLOOP.
*  ENDIF.
*
*  IF s_kunnr[] IS NOT INITIAL AND s_ebeln[] IS INITIAL AND s_ebelp[] IS NOT INITIAL AND
*     s_aufnr[] IS INITIAL.
*    LOOP AT lt_ausp_cliente INTO wa_ausp_cliente.
*      LOOP AT lt_ausp_posicion INTO wa_ausp_posicion WHERE objek = wa_ausp_cliente-objek.
*        APPEND  wa_ausp_cliente TO lt_ausp.
*        APPEND  wa_ausp_posicion TO lt_ausp.
*      ENDLOOP.
*    ENDLOOP.
*  ENDIF.
*
*
*  IF s_kunnr[] IS NOT INITIAL AND s_ebeln[] IS INITIAL AND s_ebelp[] IS INITIAL AND
*    s_aufnr[] IS NOT INITIAL.
*    LOOP AT lt_ausp_cliente INTO wa_ausp_cliente.
*      LOOP AT lt_ausp_orden INTO wa_ausp_orden WHERE objek = wa_ausp_cliente-objek.
*        APPEND  wa_ausp_cliente TO lt_ausp.
*        APPEND  wa_ausp_orden TO lt_ausp.
*      ENDLOOP.
*    ENDLOOP.
*  ENDIF.
*
*
*
*  IF s_kunnr[] IS INITIAL AND s_ebeln[] IS NOT INITIAL AND s_ebelp[] IS INITIAL  AND
*    s_aufnr[] IS INITIAL.
*    SELECT * FROM ausp
*          APPENDING TABLE lt_ausp
*          WHERE klart = '023' AND
*                ( atinn =  p_atinn_pedido AND atwrt IN rg_atwrt_pedido ).
*  ENDIF.
*
*
*  IF s_kunnr[] IS INITIAL AND s_ebeln[] IS NOT INITIAL AND s_ebelp[] IS NOT INITIAL  AND
*    s_aufnr[] IS INITIAL..
*    LOOP AT lt_ausp_pedido INTO wa_ausp_pedido.
*      LOOP AT lt_ausp_posicion INTO wa_ausp_posicion WHERE objek = wa_ausp_pedido-objek.
*        APPEND  wa_ausp_pedido TO lt_ausp.
*        APPEND  wa_ausp_posicion TO lt_ausp.
*      ENDLOOP.
*    ENDLOOP.
*  ENDIF.
*
*
*  IF s_kunnr[] IS INITIAL AND s_ebeln[] IS NOT INITIAL AND s_ebelp[] IS INITIAL  AND
*    s_aufnr[] IS NOT INITIAL.
*    LOOP AT lt_ausp_pedido INTO wa_ausp_pedido.
*      LOOP AT lt_ausp_orden INTO wa_ausp_orden WHERE objek = wa_ausp_pedido-objek.
*        APPEND  wa_ausp_pedido TO lt_ausp.
*        APPEND  wa_ausp_orden TO lt_ausp.
*      ENDLOOP.
*    ENDLOOP.
*  ENDIF.
*
*
*  IF s_kunnr[] IS INITIAL AND s_ebeln[] IS INITIAL AND s_ebelp[] IS NOT INITIAL AND
*    s_aufnr[] IS INITIAL.
*    SELECT * FROM ausp
*          APPENDING TABLE lt_ausp
*          WHERE klart = '023' AND
*                ( atinn =  p_atinn_posicion AND atwrt IN rg_atwrt_posicion ).
*  ENDIF.
*
*
*  IF s_kunnr[] IS INITIAL AND s_ebeln[] IS INITIAL AND s_ebelp[] IS NOT INITIAL  AND
*   s_aufnr[] IS NOT INITIAL.
*    LOOP AT lt_ausp_posicion INTO wa_ausp_posicion.
*      LOOP AT lt_ausp_orden INTO wa_ausp_orden WHERE objek = wa_ausp_posicion-objek.
*        APPEND  wa_ausp_posicion TO lt_ausp.
*        APPEND  wa_ausp_orden TO lt_ausp.
*      ENDLOOP.
*    ENDLOOP.
*  ENDIF.
*
*
*  IF s_kunnr[] IS INITIAL AND s_ebeln[] IS INITIAL AND s_ebelp[] IS INITIAL AND
*   s_aufnr[] IS NOT  INITIAL.
*    SELECT * FROM ausp
*          APPENDING TABLE lt_ausp
*          WHERE klart = '023' AND
*                ( atinn =  p_atinn_orden AND atwrt IN rg_atwrt_orden ).
*  ENDIF.
*
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_CHARACT_NEW_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_S_EBELN4  text
*      -->P_S_EBELP4  text
*      -->P_S_KUNNR4  text
*      <--P_LT_AUSP  text
*----------------------------------------------------------------------*
FORM get_charact_new_2  TABLES lt_ausp " cvivo
                             s_kunnr
                             s_ebeln
                             s_ebelp
                             s_aufnr
                      CHANGING p_atinn_cliente TYPE atinn
                               p_atinn_pedido TYPE atinn
                               p_atinn_posicion TYPE atinn
                               p_atinn_orden  TYPE atinn.

  DATA: rg_atwrt_cliente   TYPE RANGE OF ausp-atwrt,
        rg_atwrt_pedido    TYPE RANGE OF ausp-atwrt,
        rg_atwrt_posicion  TYPE RANGE OF ausp-atwrt,
        rg_atwrt_orden     TYPE RANGE OF ausp-atwrt,
        rg_atwrt_cliente2  TYPE RANGE OF ausp-atwrt,
        rg_atwrt_pedido2   TYPE RANGE OF ausp-atwrt,
        rg_atwrt_posicion2 TYPE RANGE OF ausp-atwrt,
        rg_atwrt_orden2    TYPE RANGE OF ausp-atwrt.

  DATA: wa_atwrt LIKE LINE OF  rg_atwrt_cliente.

  DATA: rg_kunnr TYPE RANGE OF shp_kunnr_range,
        wa_kunnr TYPE shp_kunnr_range.


  DATA: lt_ausp_pedido   TYPE TABLE OF ausp,
        lt_ausp_cliente  TYPE TABLE OF ausp,
        lt_ausp_posicion TYPE TABLE OF ausp,
        lt_ausp_orden    TYPE TABLE OF ausp,
        lt_ausp_total    TYPE TABLE OF ausp.


  DATA: wa_ausp_pedido   TYPE ausp,
        wa_ausp_cliente  TYPE ausp,
        wa_ausp_posicion TYPE  ausp,
        wa_ausp_orden    TYPE  ausp.


  RANGES: rg_ebeln FOR ausp-atwrt.
  DATA: wa_ebeln TYPE range_vbeln.

  RANGES: rg_ebelp FOR ausp-atwrt.
  DATA: wa_ebelp TYPE rjksd_posnr_range.


  RANGES: rg_aufnr FOR ausp-atwrt.
  DATA: wa_aufnr TYPE aufnr_rang.


* 1. Primero buscamos en función de los select-option rellenos
*     Vamos en orden de más específico a menos: orden, pedido+posición, cliente

**** RECUPERAMOS VALORES DE LAS ÓRDENES INDICADOS EN LA PANTALLA DE SELECCIÓN
  rg_aufnr[] = s_aufnr[].

*  IF s_aufnr[] IS NOT INITIAL. " la selección de orden finalmente se hará por tabla, no por característica (no debería cambiarse el valor)
*    LOOP AT rg_aufnr INTO wa_aufnr.
*      MOVE-CORRESPONDING wa_aufnr TO wa_atwrt.
*      APPEND wa_atwrt TO rg_atwrt_orden2. " sin convertir
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*        EXPORTING
*          input  = wa_aufnr-low
*        IMPORTING
*          output = wa_atwrt-low.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*        EXPORTING
*          input  = wa_aufnr-high
*        IMPORTING
*          output = wa_atwrt-high.
*
*      APPEND wa_atwrt TO rg_atwrt_orden.
*    ENDLOOP.
*
*    SELECT * FROM ausp
*      APPENDING TABLE lt_ausp_orden
*      WHERE klart = '023' AND
*            atinn = p_atinn_orden AND atwrt IN rg_atwrt_orden.
*
*    IF sy-subrc EQ 0.
*      APPEND LINES OF lt_ausp_orden TO lt_ausp_total.
*    ELSE. " probamos sin convertir
*      SELECT * FROM ausp
*      APPENDING TABLE lt_ausp_orden
*      WHERE klart = '023' AND
*            atinn = p_atinn_orden AND atwrt IN rg_atwrt_orden2.
*
*      IF sy-subrc EQ 0.
*        APPEND LINES OF lt_ausp_orden TO lt_ausp_total.
*      ENDIF.
*    ENDIF.
*  ENDIF.

**** RECUPERAMOS VALORES DE LOS PEDIDOS INDICADOS EN LA PANTALLA DE SELECCIÓN
  rg_ebeln[] = s_ebeln[].

  IF s_ebeln[] IS NOT INITIAL.
    LOOP AT rg_ebeln INTO wa_ebeln.
      MOVE-CORRESPONDING wa_ebeln TO wa_atwrt.
      APPEND wa_atwrt TO rg_atwrt_pedido2. " sin convertir

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_ebeln-low
        IMPORTING
          output = wa_atwrt-low.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_ebeln-high
        IMPORTING
          output = wa_atwrt-high.

      APPEND wa_atwrt TO rg_atwrt_pedido.
    ENDLOOP.

    IF lt_ausp_total[] IS NOT INITIAL.
      SELECT * FROM ausp
        APPENDING TABLE lt_ausp_pedido
        FOR ALL ENTRIES IN lt_ausp_total
        WHERE klart = '023'
          AND atinn =  p_atinn_pedido
          AND atwrt IN rg_atwrt_pedido
          AND objek EQ lt_ausp_total-objek.

      SELECT * FROM ausp
        APPENDING TABLE lt_ausp_pedido
        FOR ALL ENTRIES IN lt_ausp_total
        WHERE klart = '023'
          AND atinn =  p_atinn_pedido
          AND atwrt IN rg_atwrt_pedido2
          AND objek EQ lt_ausp_total-objek.
    ELSE.
      SELECT * FROM ausp
       APPENDING TABLE lt_ausp_pedido
       WHERE klart = '023'
         AND atinn =  p_atinn_pedido
         AND atwrt IN rg_atwrt_pedido.

      SELECT * FROM ausp
       APPENDING TABLE lt_ausp_pedido
       WHERE klart = '023'
         AND atinn =  p_atinn_pedido
         AND atwrt IN rg_atwrt_pedido2.
    ENDIF.

    IF lt_ausp_pedido[] IS NOT INITIAL AND s_ebelp[] IS INITIAL. "si no hay posiciones seleccionadas, añadimos ya
*      APPEND LINES OF lt_ausp_pedido TO lt_ausp_total.
      lt_ausp_total[] = lt_ausp_pedido[].
    ELSEIF sy-subrc NE 0. " sin convertir
      REFRESH lt_ausp_total. EXIT. " no se ha cumplido la selección
    ENDIF.
  ENDIF.


**** RECUPERAMOS VALORES DE LAS POSICIONES DE LOS PEDIDOS INDICADOS EN LA PANTALLA DE SELECCIÓN
  rg_ebelp[] = s_ebelp[].

  IF s_ebelp[] IS NOT INITIAL AND lt_ausp_pedido[] IS NOT INITIAL. "solo buscamos posiciones si tenemos cabeceras
    LOOP AT rg_ebelp INTO wa_ebelp.
      MOVE-CORRESPONDING wa_ebelp TO wa_atwrt.
      APPEND wa_atwrt TO rg_atwrt_posicion2. " sin convertir

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_ebelp-low
        IMPORTING
          output = wa_atwrt-low.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_ebelp-high
        IMPORTING
          output = wa_atwrt-high.

      APPEND wa_atwrt TO rg_atwrt_posicion.
    ENDLOOP.

    IF lt_ausp_pedido[] IS NOT INITIAL.
      SELECT * FROM ausp
        APPENDING TABLE lt_ausp_posicion
        FOR ALL ENTRIES IN lt_ausp_pedido "solo las posiciones de los pedidos encontrados
        WHERE klart = '023'
          AND atinn =  p_atinn_posicion
          AND atwrt IN rg_atwrt_posicion
          AND objek EQ lt_ausp_pedido-objek.

      SELECT * FROM ausp
        APPENDING TABLE lt_ausp_posicion
        FOR ALL ENTRIES IN lt_ausp_pedido "solo las posiciones de los pedidos encontrados
        WHERE klart = '023'
          AND atinn =  p_atinn_posicion
          AND atwrt IN rg_atwrt_posicion2
          AND objek EQ lt_ausp_pedido-objek.
    ENDIF.

    IF lt_ausp_posicion[] IS NOT INITIAL. "si se han seleccionado posiciones las añadimos, en ese caso no hemos añadido antes con los pedidos
*      APPEND LINES OF lt_ausp_posicion TO lt_ausp_total.
      lt_ausp_total[] = lt_ausp_posicion[].
    ELSE.
      REFRESH lt_ausp_total. EXIT. " no se ha cumplido la selección
    ENDIF.
  ENDIF.

**** RECUPERAMOS VALORES DE LOS CLIENTES INDICADOS EN LA PANTALLA DE SELECCIÓN

  IF s_kunnr[] IS NOT INITIAL.
    rg_kunnr[] = s_kunnr[].

    LOOP AT rg_kunnr INTO wa_kunnr.
      MOVE-CORRESPONDING wa_kunnr TO wa_atwrt.
      APPEND wa_atwrt TO rg_atwrt_cliente2. " sin convertir

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_kunnr-low
        IMPORTING
          output = wa_atwrt-low.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = wa_kunnr-high
        IMPORTING
          output = wa_atwrt-high.

      APPEND wa_atwrt TO rg_atwrt_cliente.
    ENDLOOP.

    IF lt_ausp_total[] IS NOT INITIAL.
      SELECT * FROM ausp
        APPENDING TABLE lt_ausp_cliente
        FOR ALL ENTRIES IN lt_ausp_total
        WHERE klart = '023'
          AND atinn = p_atinn_cliente
          AND atwrt IN rg_atwrt_cliente
          AND objek EQ lt_ausp_total-objek.

      SELECT * FROM ausp
        APPENDING TABLE lt_ausp_cliente
        FOR ALL ENTRIES IN lt_ausp_total
        WHERE klart = '023'
          AND atinn = p_atinn_cliente
          AND atwrt IN rg_atwrt_cliente2
          AND objek EQ lt_ausp_total-objek.
    ELSE.
      SELECT * FROM ausp
      APPENDING TABLE lt_ausp_cliente
      WHERE klart = '023'
        AND atinn = p_atinn_cliente
        AND atwrt IN rg_atwrt_cliente.

      SELECT * FROM ausp
      APPENDING TABLE lt_ausp_cliente
      WHERE klart = '023'
        AND atinn = p_atinn_cliente
        AND atwrt IN rg_atwrt_cliente2.
    ENDIF.

    IF lt_ausp_cliente[] IS NOT INITIAL.
*      APPEND LINES OF lt_ausp_cliente TO lt_ausp_total.
      lt_ausp_total[] = lt_ausp_cliente[].
    ELSE.
      REFRESH lt_ausp_total. EXIT. " no se ha cumplido la selección
    ENDIF.
  ENDIF.

  IF lt_ausp_total IS NOT INITIAL.
    DELETE ADJACENT DUPLICATES FROM lt_ausp_total COMPARING objek.
    APPEND LINES OF lt_ausp_total TO lt_ausp.
  ENDIF.

ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  GET_PNMV_DATA_NEW_1
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM get_pnmv_data_new_1 .
*  DATA: t_objek  TYPE tty_objek,
*        wa_objek TYPE LINE OF tty_objek.
*
*  DATA: lt_ausp  TYPE TABLE OF ausp,
*        wa_ausp  TYPE ausp,
*        t_inob   TYPE STANDARD TABLE OF inob,
*        wa_inob  TYPE inob,
*        lv_cuobj TYPE inob-cuobj,
*        wa_mcha  TYPE mcha,
*        lt_mcha  TYPE STANDARD TABLE OF mcha.
*
*  DATA: t_datos  TYPE zttpp0036_pnm_alv,
*        wa_datos TYPE zspp0036_pnm_alv.
*
*  DATA: lv_cliente  TYPE ausp-atwrt,
*        lv_pedido   TYPE ausp-atwrt,
*        lv_posicion TYPE ausp-atwrt.
*
*  DATA: lv_atinn_ext TYPE c LENGTH 20.
*
*
*  DATA:  lv_atinn_cliente  TYPE atinn,
*         lv_atinn_pedido   TYPE atinn,
*         lv_atinn_posicion TYPE atinn,
*         lv_atinn_orden    TYPE atinn.
*
** recuperamos las características del sistema de clasificación que corresponden con los filtros
** de destinatario de mercancia, pedido y posición informados en la pantalla de selección.
*  PERFORM get_charact_new TABLES lt_ausp s_kunnr5 s_ebeln5 s_ebelp5 s_aufnr5
*                          CHANGING lv_atinn_cliente
*                                   lv_atinn_pedido
*                                   lv_atinn_posicion
*                                   lv_atinn_orden.
*
** recuperamos los objetos que tienen el sistema de clasificación
*  LOOP AT lt_ausp INTO wa_ausp.
*    wa_objek-objek = wa_ausp-objek.
*    APPEND wa_objek TO t_objek.
*  ENDLOOP.
*
*  SORT t_objek  BY objek ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM t_objek.
*
*
*  LOOP AT t_objek INTO wa_objek.
*    lv_cuobj = wa_objek-objek.
*
**   verificamos si los objetos cumplen con el resto de criterios de la pantalla de selección.
*    SELECT SINGLE * FROM inob
*      INTO wa_inob
*      WHERE cuobj = lv_cuobj AND
*            klart = '023' AND
*            obtab = 'MCH1'.
*
*    CLEAR: lt_mcha. REFRESH: lt_mcha.
*    SELECT SINGLE * FROM mcha
*        INTO wa_mcha
*        WHERE ( matnr = wa_inob-objek(18) AND matnr IN s_matnr5 ) AND
*              werks IN s_werks5 AND
*              ( charg  = wa_inob-objek+18(10) AND charg IN s_charg5 ) .
*
*    IF sy-subrc = 0.
*      CLEAR: t_datos.
*      REFRESH: t_datos.
*
*      SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg
*         INTO TABLE @t_datos
*         FROM aufk AS b
*         INNER JOIN aufm AS a ON a~aufnr = b~aufnr
*         INNER JOIN mara AS d ON d~matnr = a~matnr
*         LEFT JOIN makt AS c ON c~matnr = a~matnr
*         WHERE b~auart = 'ZC01' AND
*            d~mtart = 'ZPLP' AND
*            b~aufnr IN @s_aufnr5 AND
*            a~matnr = @wa_mcha-matnr AND
*            b~werks = @wa_mcha-werks  AND
*            a~charg = @wa_mcha-charg AND
*            b~zzdestcmcr IN @s_dest5 AND
*            b~zzlgort IN @s_zzlg5 AND
*            c~spras = @sy-langu.
*
**     de cada objeto, recuperamos el valor de las características 'CÓDIGO DE CLIENTE',
**     'PEDIDO COMPRA/VENTA' y 'POSICIÓN PEDIDO COMPRA/VENTA'
*      CLEAR: lv_cliente, lv_pedido, lv_posicion.
*      LOOP AT lt_ausp INTO wa_ausp WHERE objek = wa_objek-objek.
*        CALL FUNCTION 'CONVERSION_EXIT_ATINN_OUTPUT'
*          EXPORTING
*            input  = wa_ausp-atinn
*          IMPORTING
*            output = lv_atinn_ext.
*
*        CASE lv_atinn_ext.
*          WHEN 'Z_CLIENTE'.
*            lv_cliente = wa_ausp-atwrt.
*
*          WHEN 'Z_PEDIDO'.
*            lv_pedido = wa_ausp-atwrt.
*
*          WHEN 'Z_POSICION'.
*            lv_posicion = wa_ausp-atwrt.
*        ENDCASE.
*      ENDLOOP.
*
**     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
**     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
**     de una manera rápida
*      IF lv_cliente IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*                 INTO  lv_cliente
*                 WHERE objek = wa_objek-objek AND
*                       atinn = lv_atinn_cliente AND
*                       klart = '023'.
*      ENDIF.
*
*      IF lv_pedido IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*           INTO  lv_pedido
*           WHERE objek = wa_objek-objek AND
*                 atinn = lv_atinn_pedido AND
*                 klart = '023'.
*      ENDIF.
*
*
*      IF lv_posicion IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*           INTO  lv_posicion
*           WHERE objek = wa_objek-objek AND
*                 atinn = lv_atinn_posicion AND
*                 klart = '023'.
*      ENDIF.
*
**     volcamos la información a la tabla interna que mostramos en el ALV.
*      LOOP AT t_datos INTO wa_datos.
*        wa_datos-zzebeln4 = lv_pedido.
*        wa_datos-zzebelp4 = lv_posicion.
*        wa_datos-zzkunnr4 = lv_cliente.
*        APPEND wa_datos TO gt_pp0036_pnmv_alv  .
*      ENDLOOP.
*
*    ENDIF.
*  ENDLOOP.
*
*  SORT gt_pp0036_pnmv_alv  BY aufnr matnr werks charg zzebeln4 zzebelp4.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_PNMV_DATA_NEW_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_pnmv_data_new_2.
  DATA: t_objek  TYPE tty_objek,
        wa_objek TYPE LINE OF tty_objek.

  DATA: lt_ausp  TYPE TABLE OF ausp,
        wa_ausp  TYPE ausp,
        t_inob   TYPE STANDARD TABLE OF inob,
        wa_inob  TYPE inob,
        lv_cuobj TYPE inob-cuobj,
        wa_mcha  TYPE mcha,
        lt_mcha  TYPE STANDARD TABLE OF mcha.

  DATA: t_datos  TYPE zttpp0036_pnm_alv,
        wa_datos TYPE zspp0036_pnm_alv.

  DATA: lv_atinn_ext TYPE c LENGTH 20.

  DATA: lv_cliente  TYPE ausp-atwrt,
        lv_pedido   TYPE ausp-atwrt,
        lv_orden    TYPE ausp-atwrt,
        lv_posicion TYPE ausp-atwrt,
        lv_objek    TYPE inob-objek.

  FIELD-SYMBOLS: <pnmv> LIKE LINE OF t_datos.

  IF  s_kunnr5[] IS NOT INITIAL OR " si hay selección
      s_ebeln5[] IS NOT INITIAL OR
      s_ebelp5[] IS NOT INITIAL OR
      s_aufnr5[] IS NOT INITIAL.
* recuperamos las características del sistema de clasificación que corresponden con los filtros
* de destinatario de mercancia, pedido y posición informados en la pantalla de selección.
    PERFORM get_charact_new_2 TABLES lt_ausp s_kunnr5 s_ebeln5 s_ebelp5 s_aufnr5
                            CHANGING g_atinn_cliente
                                     g_atinn_pedido
                                     g_atinn_posicion
                                     g_atinn_orden.

* recuperamos los objetos que tienen el sistema de clasificación
    LOOP AT lt_ausp INTO wa_ausp.
      wa_objek-objek = wa_ausp-objek.
      APPEND wa_objek TO t_objek.
    ENDLOOP.

    SORT t_objek  BY objek ASCENDING.
    DELETE ADJACENT DUPLICATES FROM t_objek.

    LOOP AT t_objek INTO wa_objek.
      lv_cuobj = wa_objek-objek.

*   verificamos si los objetos cumplen con el resto de criterios de la pantalla de selección.
      SELECT SINGLE * FROM inob
        INTO wa_inob
        WHERE cuobj = lv_cuobj AND
              klart = '023' AND
              obtab = 'MCH1'.

      CLEAR: lt_mcha. REFRESH: lt_mcha.
      SELECT SINGLE * FROM mcha
          INTO wa_mcha
          WHERE ( matnr = wa_inob-objek(18) AND matnr IN s_matnr5 ) AND
                werks IN s_werks5 AND
                ( charg  = wa_inob-objek+18(10) AND charg IN s_charg5 ) .

      IF sy-subrc = 0.
        CLEAR: t_datos.
        REFRESH: t_datos.

        SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg
           INTO TABLE @t_datos
           FROM aufk AS b
           INNER JOIN aufm AS a ON a~aufnr = b~aufnr
           INNER JOIN mara AS d ON d~matnr = a~matnr
           LEFT JOIN makt AS c ON c~matnr = a~matnr
           WHERE b~auart = 'ZC01' AND
              d~mtart = 'ZPLP' AND
              b~aufnr IN @s_aufnr5 AND
              a~matnr = @wa_mcha-matnr AND
              b~werks = @wa_mcha-werks  AND
              a~charg = @wa_mcha-charg AND
              b~zzdestcmcr IN @s_dest5 AND
              b~zzlgort IN @s_zzlg5 AND
              c~spras = @sy-langu.

*     de cada objeto, recuperamos el valor de las características 'CÓDIGO DE CLIENTE',
*     'PEDIDO COMPRA/VENTA' y 'POSICIÓN PEDIDO COMPRA/VENTA'
        CLEAR: lv_cliente, lv_pedido, lv_posicion, lv_orden.
        LOOP AT lt_ausp INTO wa_ausp WHERE objek = wa_objek-objek.
          CALL FUNCTION 'CONVERSION_EXIT_ATINN_OUTPUT'
            EXPORTING
              input  = wa_ausp-atinn
            IMPORTING
              output = lv_atinn_ext.

          CASE lv_atinn_ext.
            WHEN 'Z_CLIENTE'.
              lv_cliente = wa_ausp-atwrt.
            WHEN 'Z_PEDIDO'.
              lv_pedido = wa_ausp-atwrt.
            WHEN 'Z_POSICION'.
              lv_posicion = wa_ausp-atwrt.
*            WHEN 'Z_ORDEN'. "la orden se coge de la tabla
*              lv_orden = wa_ausp-atwrt.
          ENDCASE.
        ENDLOOP.

*     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
*     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
*     de una manera rápida
        IF lv_cliente IS INITIAL.
          SELECT SINGLE atwrt FROM ausp
                   INTO  lv_cliente
                   WHERE objek = wa_objek-objek AND
                         atinn = g_atinn_cliente AND
                         klart = '023'.
        ENDIF.

        IF lv_pedido IS INITIAL.
          SELECT SINGLE atwrt FROM ausp
             INTO  lv_pedido
             WHERE objek = wa_objek-objek AND
                   atinn = g_atinn_pedido AND
                   klart = '023'.
        ENDIF.

        IF lv_posicion IS INITIAL.
          SELECT SINGLE atwrt FROM ausp
             INTO  lv_posicion
             WHERE objek = wa_objek-objek AND
                   atinn = g_atinn_posicion AND
                   klart = '023'.
        ENDIF.

*        IF lv_orden IS INITIAL.
*          SELECT SINGLE atwrt FROM ausp
*             INTO  lv_orden
*             WHERE objek = wa_objek-objek AND
*                   atinn = lv_atinn_orden AND
*                   klart = '023'.
*        ENDIF.

*     volcamos la información a la tabla interna que mostramos en el ALV.
        LOOP AT t_datos INTO wa_datos.
          wa_datos-zzebeln4 = lv_pedido.
          wa_datos-zzebelp4 = lv_posicion.
          wa_datos-zzkunnr4 = lv_cliente.
*          wa_datos-aufnr    = lv_orden.
          APPEND wa_datos TO gt_pp0036_pnmv_alv  .
        ENDLOOP.
      ENDIF.
    ENDLOOP.
  ELSE.
    SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg, b~zzebeln4, b~zzebelp4, b~zzkunnr4
      INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_pnmv_alv
      FROM aufk AS b
      INNER JOIN aufm AS a ON a~aufnr = b~aufnr
      INNER JOIN mara AS d ON d~matnr = a~matnr
      LEFT JOIN makt AS c ON c~matnr = a~matnr
      WHERE b~auart = 'ZC01' AND
            d~mtart = 'ZPLP' AND
            b~aufnr IN @s_aufnr5 AND
            a~matnr IN @s_matnr5 AND
            b~werks IN @s_werks5 AND
            a~charg IN @s_charg5 AND
            b~zzdestcmcr IN @s_dest5 AND
            b~zzlgort IN @s_zzlg5 AND
            c~spras = @sy-langu
      ORDER BY b~aufnr, a~matnr, a~werks, a~charg, b~zzebeln4, b~zzebelp4.

    LOOP AT gt_pp0036_pnmv_alv ASSIGNING <pnmv>." rellenamos las características
      CLEAR: lv_cliente, lv_pedido, lv_posicion, lv_orden.

      SELECT SINGLE * FROM mcha
        INTO wa_mcha
        WHERE matnr EQ <pnmv>-matnr
          AND werks EQ <pnmv>-werks
          AND charg EQ <pnmv>-charg.

      IF sy-subrc EQ 0.
        CLEAR: lv_objek.
        CONCATENATE <pnmv>-matnr <pnmv>-charg INTO lv_objek RESPECTING BLANKS.

        SELECT SINGLE * FROM inob
          INTO wa_inob
          WHERE klart = '023' AND
                obtab = 'MCH1' AND
                objek = lv_objek.

*     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
*     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
*     de una manera rápida
        SELECT SINGLE atwrt FROM ausp
          INTO  lv_cliente
          WHERE objek = wa_inob-cuobj AND
                atinn = g_atinn_cliente AND
                klart = '023'.

        SELECT SINGLE atwrt FROM ausp
           INTO  lv_pedido
           WHERE objek = wa_inob-cuobj AND
                 atinn = g_atinn_pedido AND
                 klart = '023'.

        SELECT SINGLE atwrt FROM ausp
           INTO  lv_posicion
           WHERE objek = wa_inob-cuobj AND
                 atinn = g_atinn_posicion AND
                 klart = '023'.

*        SELECT SINGLE atwrt FROM ausp " la orden se coge de tabla, no característica
*           INTO  lv_orden
*           WHERE objek = wa_inob-cuobj AND
*                 atinn = lv_atinn_orden AND
*                 klart = '023'.

        <pnmv>-zzkunnr4 = lv_cliente.
        <pnmv>-zzebeln4 = lv_pedido.
        <pnmv>-zzebelp4 = lv_posicion.
*        <pnmv>-aufnr    = lv_orden.
      ENDIF.
    ENDLOOP.
  ENDIF.

  SORT gt_pp0036_pnmv_alv  BY aufnr matnr werks charg zzebeln4 zzebelp4.

ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  GET_WIP_DATA_NEW_1
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM get_wip_data_new_1 .
*  DATA: t_objek  TYPE tty_objek,
*        wa_objek TYPE LINE OF tty_objek.
*
*  DATA: lt_ausp  TYPE TABLE OF ausp,
*        wa_ausp  TYPE ausp,
*        t_inob   TYPE STANDARD TABLE OF inob,
*        wa_inob  TYPE inob,
*        lv_cuobj TYPE inob-cuobj,
*        wa_mcha  TYPE mcha,
*        lt_mcha  TYPE STANDARD TABLE OF mcha.
*
*  DATA: t_datos  TYPE zttpp0036_pnm_alv,
*        wa_datos TYPE zspp0036_pnm_alv.
*
*  DATA: lv_cliente  TYPE ausp-atwrt,
*        lv_pedido   TYPE ausp-atwrt,
*        lv_posicion TYPE ausp-atwrt.
*
*  DATA: lv_atinn_ext TYPE c LENGTH 20.
*
*
*  DATA:  lv_atinn_cliente  TYPE atinn,
*         lv_atinn_pedido   TYPE atinn,
*         lv_atinn_posicion TYPE atinn,
*         lv_atinn_orden    TYPE atinn.
*
** recuperamos las características del sistema de clasificación que corresponden con los filtros
** de destinatario de mercancia, pedido y posición informados en la pantalla de selección.
*  PERFORM get_charact_new TABLES lt_ausp s_kunnr7 s_ebeln7 s_ebelp7 s_aufnr7
*                          CHANGING lv_atinn_cliente
*                                   lv_atinn_pedido
*                                   lv_atinn_posicion
*                                   lv_atinn_orden.
*
** recuperamos los objetos que tienen el sistema de clasificación
*  LOOP AT lt_ausp INTO wa_ausp.
*    wa_objek-objek = wa_ausp-objek.
*    APPEND wa_objek TO t_objek.
*  ENDLOOP.
*
*  SORT t_objek  BY objek ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM t_objek.
*
*
*  LOOP AT t_objek INTO wa_objek.
*    lv_cuobj = wa_objek-objek.
*
**   verificamos si los objetos cumplen con el resto de criterios de la pantalla de selección.
*    SELECT SINGLE * FROM inob
*      INTO wa_inob
*      WHERE cuobj = lv_cuobj AND
*            klart = '023' AND
*            obtab = 'MCH1'.
*
*    CLEAR: lt_mcha. REFRESH: lt_mcha.
*    SELECT SINGLE * FROM mcha
*        INTO wa_mcha
*        WHERE ( matnr = wa_inob-objek(18) AND matnr IN s_matnr7 ) AND
*              werks IN s_werks7 AND
*              ( charg  = wa_inob-objek+18(10) AND charg IN s_charg7 ) .
*
*    IF sy-subrc = 0.
*      CLEAR: t_datos.
*      REFRESH: t_datos.
*
*      SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg, b~zzebeln4, b~zzebelp4, b~zzkunnr4
*            INTO TABLE @t_datos
*            FROM aufk AS b
*            INNER JOIN aufm AS a ON a~aufnr = b~aufnr
*            INNER JOIN mara AS d ON d~matnr = a~matnr
*            LEFT JOIN makt AS c ON c~matnr = a~matnr
*            WHERE b~auart = 'ZC02' AND
*                  d~mtart = 'ZWIP' AND
*                  b~aufnr IN @s_aufnr7 AND
*                  a~matnr = @wa_mcha-matnr AND
*                  b~werks = @wa_mcha-werks AND
*                  a~charg = @wa_mcha-charg AND
*                  c~spras = @sy-langu.
*
**     de cada objeto, recuperamos el valor de las características 'CÓDIGO DE CLIENTE',
**     'PEDIDO COMPRA/VENTA' y 'POSICIÓN PEDIDO COMPRA/VENTA'
*      CLEAR: lv_cliente, lv_pedido, lv_posicion.
*      LOOP AT lt_ausp INTO wa_ausp WHERE objek = wa_objek-objek.
*        CALL FUNCTION 'CONVERSION_EXIT_ATINN_OUTPUT'
*          EXPORTING
*            input  = wa_ausp-atinn
*          IMPORTING
*            output = lv_atinn_ext.
*
*        CASE lv_atinn_ext.
*          WHEN 'Z_CLIENTE'.
*            lv_cliente = wa_ausp-atwrt.
*
*          WHEN 'Z_PEDIDO'.
*            lv_pedido = wa_ausp-atwrt.
*
*          WHEN 'Z_POSICION'.
*            lv_posicion = wa_ausp-atwrt.
*        ENDCASE.
*      ENDLOOP.
*
**     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
**     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
**     de una manera rápida
*      IF lv_cliente IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*                 INTO  lv_cliente
*                 WHERE objek = wa_objek-objek AND
*                       atinn = lv_atinn_cliente AND
*                       klart = '023'.
*      ENDIF.
*
*      IF lv_pedido IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*           INTO  lv_pedido
*           WHERE objek = wa_objek-objek AND
*                 atinn = lv_atinn_pedido AND
*                 klart = '023'.
*      ENDIF.
*
*
*      IF lv_posicion IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*           INTO  lv_posicion
*           WHERE objek = wa_objek-objek AND
*                 atinn = lv_atinn_posicion AND
*                 klart = '023'.
*      ENDIF.
*
**     volcamos la información a la tabla interna que mostramos en el ALV.
*      LOOP AT t_datos INTO wa_datos.
*        wa_datos-zzebeln4 = lv_pedido.
*        wa_datos-zzebelp4 = lv_posicion.
*        wa_datos-zzkunnr4 = lv_cliente.
*        APPEND wa_datos TO gt_pp0036_wip_alv.
*      ENDLOOP.
*
*    ENDIF.
*  ENDLOOP.
*
*  SORT gt_pp0036_wip_alv  BY aufnr matnr werks charg zzebeln4 zzebelp4.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_WIP_DATA_NEW_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_wip_data_new_2.
  DATA: t_objek  TYPE tty_objek,
        wa_objek TYPE LINE OF tty_objek.

  DATA: lt_ausp  TYPE TABLE OF ausp,
        wa_ausp  TYPE ausp,
        t_inob   TYPE STANDARD TABLE OF inob,
        wa_inob  TYPE inob,
        lv_cuobj TYPE inob-cuobj,
        wa_mcha  TYPE mcha,
        lt_mcha  TYPE STANDARD TABLE OF mcha.

  DATA: t_datos  TYPE zttpp0036_pnm_alv,
        wa_datos TYPE zspp0036_pnm_alv.

  DATA: lv_cliente  TYPE ausp-atwrt,
        lv_pedido   TYPE ausp-atwrt,
        lv_posicion TYPE ausp-atwrt,
        lv_objek    TYPE inob-objek.

  DATA: lv_atinn_ext TYPE c LENGTH 20.

  FIELD-SYMBOLS: <wip> TYPE zspp0036_pnm_alv.

  IF  s_kunnr7[] IS NOT INITIAL OR " si hay selección
      s_ebeln7[] IS NOT INITIAL OR
      s_ebelp7[] IS NOT INITIAL. " no tenemos en cuenta la orden, eso por tabla no por característica
* recuperamos las características del sistema de clasificación que corresponden con los filtros
* de destinatario de mercancia, pedido y posición informados en la pantalla de selección.
    PERFORM get_charact_new_2 TABLES lt_ausp s_kunnr7 s_ebeln7 s_ebelp7 s_aufnr7
                            CHANGING g_atinn_cliente
                                     g_atinn_pedido
                                     g_atinn_posicion
                                     g_atinn_orden.

* recuperamos los objetos que tienen el sistema de clasificación
    LOOP AT lt_ausp INTO wa_ausp.
      wa_objek-objek = wa_ausp-objek.
      APPEND wa_objek TO t_objek.
    ENDLOOP.

    SORT t_objek  BY objek ASCENDING.
    DELETE ADJACENT DUPLICATES FROM t_objek.


    LOOP AT t_objek INTO wa_objek.
      lv_cuobj = wa_objek-objek.

*   verificamos si los objetos cumplen con el resto de criterios de la pantalla de selección.
      SELECT SINGLE * FROM inob
        INTO wa_inob
        WHERE cuobj = lv_cuobj AND
              klart = '023' AND
              obtab = 'MCH1'.

      CLEAR: lt_mcha. REFRESH: lt_mcha.
      SELECT SINGLE * FROM mcha
          INTO wa_mcha
          WHERE ( matnr = wa_inob-objek(18) AND matnr IN s_matnr7 ) AND
                werks IN s_werks7 AND
                ( charg  = wa_inob-objek+18(10) AND charg IN s_charg7 ) .

      IF sy-subrc = 0.
        CLEAR: t_datos.
        REFRESH: t_datos.

        SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg, b~zzebeln4, b~zzebelp4, b~zzkunnr4
              INTO TABLE @t_datos
              FROM aufk AS b
              INNER JOIN aufm AS a ON a~aufnr = b~aufnr
              INNER JOIN mara AS d ON d~matnr = a~matnr
              LEFT JOIN makt AS c ON c~matnr = a~matnr
              WHERE b~auart = 'ZC02' AND
                    d~mtart = 'ZWIP' AND
                    b~aufnr IN @s_aufnr7 AND
                    a~matnr = @wa_mcha-matnr AND
                    b~werks = @wa_mcha-werks AND
                    a~charg = @wa_mcha-charg AND
                    c~spras = @sy-langu.

*     de cada objeto, recuperamos el valor de las características 'CÓDIGO DE CLIENTE',
*     'PEDIDO COMPRA/VENTA' y 'POSICIÓN PEDIDO COMPRA/VENTA'
        CLEAR: lv_cliente, lv_pedido, lv_posicion.
        LOOP AT lt_ausp INTO wa_ausp WHERE objek = wa_objek-objek.
          CALL FUNCTION 'CONVERSION_EXIT_ATINN_OUTPUT'
            EXPORTING
              input  = wa_ausp-atinn
            IMPORTING
              output = lv_atinn_ext.

          CASE lv_atinn_ext.
            WHEN 'Z_CLIENTE'.
              lv_cliente = wa_ausp-atwrt.
            WHEN 'Z_PEDIDO'.
              lv_pedido = wa_ausp-atwrt.
            WHEN 'Z_POSICION'.
              lv_posicion = wa_ausp-atwrt.
          ENDCASE.
        ENDLOOP.

*     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
*     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
*     de una manera rápida
        IF lv_cliente IS INITIAL.
          SELECT SINGLE atwrt FROM ausp
                   INTO  lv_cliente
                   WHERE objek = wa_objek-objek AND
                         atinn = g_atinn_cliente AND
                         klart = '023'.
        ENDIF.

        IF lv_pedido IS INITIAL.
          SELECT SINGLE atwrt FROM ausp
             INTO  lv_pedido
             WHERE objek = wa_objek-objek AND
                   atinn = g_atinn_pedido AND
                   klart = '023'.
        ENDIF.

        IF lv_posicion IS INITIAL.
          SELECT SINGLE atwrt FROM ausp
             INTO  lv_posicion
             WHERE objek = wa_objek-objek AND
                   atinn = g_atinn_posicion AND
                   klart = '023'.
        ENDIF.

*     volcamos la información a la tabla interna que mostramos en el ALV.
        LOOP AT t_datos INTO wa_datos.
          wa_datos-zzebeln4 = lv_pedido.
          wa_datos-zzebelp4 = lv_posicion.
          wa_datos-zzkunnr4 = lv_cliente.
          APPEND wa_datos TO gt_pp0036_wip_alv.
        ENDLOOP.

      ENDIF.
    ENDLOOP.
  ELSE.
    SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg
      INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_wip_alv
      FROM aufk AS b
      INNER JOIN aufm AS a ON a~aufnr = b~aufnr
      INNER JOIN mara AS d ON d~matnr = a~matnr
      LEFT JOIN makt AS c ON c~matnr = a~matnr
      WHERE b~auart = 'ZC02' AND
            d~mtart = 'ZWIP' AND
            b~aufnr IN @s_aufnr7 AND
            a~matnr IN @s_matnr7 AND
            b~werks IN @s_werks7 AND
            a~charg IN @s_charg7 AND
            c~spras = @sy-langu
      ORDER BY b~aufnr, a~matnr, a~werks, a~charg.

    LOOP AT gt_pp0036_wip_alv ASSIGNING <wip>." rellenamos las características
      CLEAR: lv_cliente, lv_pedido, lv_posicion.

      SELECT SINGLE * FROM mcha
        INTO wa_mcha
        WHERE matnr EQ <wip>-matnr
          AND werks EQ <wip>-werks
          AND charg EQ <wip>-charg.

      IF sy-subrc EQ 0.
        CLEAR: lv_objek.
        CONCATENATE <wip>-matnr <wip>-charg INTO lv_objek RESPECTING BLANKS.

        SELECT SINGLE * FROM inob
          INTO wa_inob
          WHERE klart = '023' AND
                obtab = 'MCH1' AND
                objek = lv_objek.

*     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
*     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
*     de una manera rápida
        SELECT SINGLE atwrt FROM ausp
          INTO  lv_cliente
          WHERE objek = wa_inob-cuobj AND
                atinn = g_atinn_cliente AND
                klart = '023'.

        SELECT SINGLE atwrt FROM ausp
           INTO  lv_pedido
           WHERE objek = wa_inob-cuobj AND
                 atinn = g_atinn_pedido AND
                 klart = '023'.

        SELECT SINGLE atwrt FROM ausp
           INTO  lv_posicion
           WHERE objek = wa_inob-cuobj AND
                 atinn = g_atinn_posicion AND
                 klart = '023'.

        <wip>-zzkunnr4 = lv_cliente.
        <wip>-zzebeln4 = lv_pedido.
        <wip>-zzebelp4 = lv_posicion.
      ENDIF.
    ENDLOOP.
  ENDIF.

  SORT gt_pp0036_wip_alv  BY aufnr matnr werks charg zzebeln4 zzebelp4.

ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  GET_LPM_DATA_NEW_1
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM get_lpm_data_new_1 .
*  DATA: t_objek  TYPE tty_objek,
*        wa_objek TYPE LINE OF tty_objek.
*
*  DATA: lt_ausp  TYPE TABLE OF ausp,
*        wa_ausp  TYPE ausp,
*        t_inob   TYPE STANDARD TABLE OF inob,
*        wa_inob  TYPE inob,
*        lv_cuobj TYPE inob-cuobj,
*        wa_mcha  TYPE mcha,
*        lt_mcha  TYPE STANDARD TABLE OF mcha.
*
*  DATA: t_datos  TYPE zttpp0036_pnm_alv,
*        wa_datos TYPE zspp0036_pnm_alv.
*
*  DATA: lv_cliente  TYPE ausp-atwrt,
*        lv_pedido   TYPE ausp-atwrt,
*        lv_posicion TYPE ausp-atwrt.
*
*  DATA: lv_atinn_ext TYPE c LENGTH 20.
*
*
*  DATA:  lv_atinn_cliente  TYPE atinn,
*         lv_atinn_pedido   TYPE atinn,
*         lv_atinn_posicion TYPE atinn,
*         lv_atinn_orden    TYPE atinn.
*
** recuperamos las características del sistema de clasificación que corresponden con los filtros
** de destinatario de mercancia, pedido y posición informados en la pantalla de selección.
*  PERFORM get_charact_new TABLES lt_ausp s_kunnr8 s_ebeln8 s_ebelp8 s_aufnr8
*                          CHANGING lv_atinn_cliente
*                                   lv_atinn_pedido
*                                   lv_atinn_posicion
*                                   lv_atinn_orden.
*
** recuperamos los objetos que tienen el sistema de clasificación
*  LOOP AT lt_ausp INTO wa_ausp.
*    wa_objek-objek = wa_ausp-objek.
*    APPEND wa_objek TO t_objek.
*  ENDLOOP.
*
*  SORT t_objek  BY objek ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM t_objek.
*
*
*  LOOP AT t_objek INTO wa_objek.
*    lv_cuobj = wa_objek-objek.
*
**   verificamos si los objetos cumplen con el resto de criterios de la pantalla de selección.
*    SELECT SINGLE * FROM inob
*      INTO wa_inob
*      WHERE cuobj = lv_cuobj AND
*            klart = '023' AND
*            obtab = 'MCH1'.
*
*    CLEAR: lt_mcha. REFRESH: lt_mcha.
*    SELECT SINGLE * FROM mcha
*        INTO wa_mcha
*        WHERE ( matnr = wa_inob-objek(18) AND matnr IN s_matnr8 ) AND
*              werks IN s_werks8 AND
*              ( charg  = wa_inob-objek+18(10) AND charg IN s_charg8 ) .
*
*    IF sy-subrc = 0.
*      CLEAR: t_datos.
*      REFRESH: t_datos.
*
*      SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg " b~zzebeln4, b~zzebelp4, b~zzkunnr4
*        INTO TABLE @t_datos
*        FROM aufk AS b
*        INNER JOIN aufm AS a ON a~aufnr = b~aufnr
*        INNER JOIN mara AS d ON d~matnr = a~matnr
*        LEFT JOIN makt AS c ON c~matnr = a~matnr
*        WHERE b~auart = 'ZC02' AND
*              d~mtart = 'ZPMP' AND
*              b~aufnr IN @s_aufnr8 AND
*              a~matnr = @wa_mcha-matnr AND
*              b~werks = @wa_mcha-werks AND
*              a~charg = @wa_mcha-charg AND
*              b~zzdestcmcr IN @s_dest8 AND
*              b~zzlgort IN @s_zzlg8 AND
*              c~spras = @sy-langu.
*
**     de cada objeto, recuperamos el valor de las características 'CÓDIGO DE CLIENTE',
**     'PEDIDO COMPRA/VENTA' y 'POSICIÓN PEDIDO COMPRA/VENTA'
*      CLEAR: lv_cliente, lv_pedido, lv_posicion.
*      LOOP AT lt_ausp INTO wa_ausp WHERE objek = wa_objek-objek.
*        CALL FUNCTION 'CONVERSION_EXIT_ATINN_OUTPUT'
*          EXPORTING
*            input  = wa_ausp-atinn
*          IMPORTING
*            output = lv_atinn_ext.
*
*        CASE lv_atinn_ext.
*          WHEN 'Z_CLIENTE'.
*            lv_cliente = wa_ausp-atwrt.
*
*          WHEN 'Z_PEDIDO'.
*            lv_pedido = wa_ausp-atwrt.
*
*          WHEN 'Z_POSICION'.
*            lv_posicion = wa_ausp-atwrt.
*        ENDCASE.
*      ENDLOOP.
*
**     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
**     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
**     de una manera rápida
*      IF lv_cliente IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*                 INTO  lv_cliente
*                 WHERE objek = wa_objek-objek AND
*                       atinn = lv_atinn_cliente AND
*                       klart = '023'.
*      ENDIF.
*
*      IF lv_pedido IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*           INTO  lv_pedido
*           WHERE objek = wa_objek-objek AND
*                 atinn = lv_atinn_pedido AND
*                 klart = '023'.
*      ENDIF.
*
*
*      IF lv_posicion IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*           INTO  lv_posicion
*           WHERE objek = wa_objek-objek AND
*                 atinn = lv_atinn_posicion AND
*                 klart = '023'.
*      ENDIF.
*
**     volcamos la información a la tabla interna que mostramos en el ALV.
*      LOOP AT t_datos INTO wa_datos.
*        wa_datos-zzebeln4 = lv_pedido.
*        wa_datos-zzebelp4 = lv_posicion.
*        wa_datos-zzkunnr4 = lv_cliente.
*        APPEND wa_datos TO gt_pp0036_pnm_alv.
*      ENDLOOP.
*
*    ENDIF.
*  ENDLOOP.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_LPM_DATA_NEW_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_lpm_data_new_2.
  DATA: t_objek  TYPE tty_objek,
        wa_objek TYPE LINE OF tty_objek.

  DATA: lt_ausp  TYPE TABLE OF ausp,
        wa_ausp  TYPE ausp,
        t_inob   TYPE STANDARD TABLE OF inob,
        wa_inob  TYPE inob,
        lv_cuobj TYPE inob-cuobj,
        wa_mcha  TYPE mcha,
        lt_mcha  TYPE STANDARD TABLE OF mcha.

  DATA: t_datos  TYPE zttpp0036_pnm_alv,
        wa_datos TYPE zspp0036_pnm_alv.

  DATA: lv_cliente  TYPE ausp-atwrt,
        lv_pedido   TYPE ausp-atwrt,
        lv_posicion TYPE ausp-atwrt,
        lv_objek    TYPE inob-objek.

  DATA: lv_atinn_ext TYPE c LENGTH 20.

  FIELD-SYMBOLS: <lpm> TYPE zspp0036_pnm_alv.

  IF  s_kunnr8[] IS NOT INITIAL OR
      s_ebeln8[] IS NOT INITIAL OR
      s_ebelp8[] IS NOT INITIAL. " no tenemos en cuenta la orden para características, vale la de la tabla

* recuperamos las características del sistema de clasificación que corresponden con los filtros
* de destinatario de mercancia, pedido y posición informados en la pantalla de selección.
    PERFORM get_charact_new_2 TABLES lt_ausp s_kunnr8 s_ebeln8 s_ebelp8 s_aufnr8
                            CHANGING g_atinn_cliente
                                     g_atinn_pedido
                                     g_atinn_posicion
                                     g_atinn_orden.

* recuperamos los objetos que tienen el sistema de clasificación
    LOOP AT lt_ausp INTO wa_ausp.
      wa_objek-objek = wa_ausp-objek.
      APPEND wa_objek TO t_objek.
    ENDLOOP.

    SORT t_objek  BY objek ASCENDING.
    DELETE ADJACENT DUPLICATES FROM t_objek.

    LOOP AT t_objek INTO wa_objek.
      lv_cuobj = wa_objek-objek.

*   verificamos si los objetos cumplen con el resto de criterios de la pantalla de selección.
      SELECT SINGLE * FROM inob
        INTO wa_inob
        WHERE cuobj = lv_cuobj AND
              klart = '023' AND
              obtab = 'MCH1'.

      CLEAR: lt_mcha. REFRESH: lt_mcha.
      SELECT SINGLE * FROM mcha
          INTO wa_mcha
          WHERE ( matnr = wa_inob-objek(18) AND matnr IN s_matnr8 ) AND
                werks IN s_werks8 AND
                ( charg  = wa_inob-objek+18(10) AND charg IN s_charg8 ) .

      IF sy-subrc = 0.
        CLEAR: t_datos.
        REFRESH: t_datos.

        SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg " b~zzebeln4, b~zzebelp4, b~zzkunnr4
          INTO CORRESPONDING FIELDS OF TABLE @t_datos
          FROM aufk AS b
          INNER JOIN aufm AS a ON a~aufnr = b~aufnr
          INNER JOIN mara AS d ON d~matnr = a~matnr
          LEFT JOIN makt AS c ON c~matnr = a~matnr
          WHERE b~auart = 'ZC02' AND
                d~mtart = 'ZPMP' AND
                b~aufnr IN @s_aufnr8 AND
                a~matnr = @wa_mcha-matnr AND
                b~werks = @wa_mcha-werks AND
                a~charg = @wa_mcha-charg AND
                b~zzdestcmcr IN @s_dest8 AND
                b~zzlgort IN @s_zzlg8 AND
                c~spras = @sy-langu.

*     de cada objeto, recuperamos el valor de las características 'CÓDIGO DE CLIENTE',
*     'PEDIDO COMPRA/VENTA' y 'POSICIÓN PEDIDO COMPRA/VENTA'
        CLEAR: lv_cliente, lv_pedido, lv_posicion.
        LOOP AT lt_ausp INTO wa_ausp WHERE objek = wa_objek-objek.
          CALL FUNCTION 'CONVERSION_EXIT_ATINN_OUTPUT'
            EXPORTING
              input  = wa_ausp-atinn
            IMPORTING
              output = lv_atinn_ext.

          CASE lv_atinn_ext.
            WHEN 'Z_CLIENTE'.
              lv_cliente = wa_ausp-atwrt.

            WHEN 'Z_PEDIDO'.
              lv_pedido = wa_ausp-atwrt.

            WHEN 'Z_POSICION'.
              lv_posicion = wa_ausp-atwrt.
          ENDCASE.
        ENDLOOP.

*     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
*     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
*     de una manera rápida
        IF lv_cliente IS INITIAL.
          SELECT SINGLE atwrt FROM ausp
                   INTO  lv_cliente
                   WHERE objek = wa_objek-objek AND
                         atinn = g_atinn_cliente AND
                         klart = '023'.
        ENDIF.

        IF lv_pedido IS INITIAL.
          SELECT SINGLE atwrt FROM ausp
             INTO  lv_pedido
             WHERE objek = wa_objek-objek AND
                   atinn = g_atinn_pedido AND
                   klart = '023'.
        ENDIF.


        IF lv_posicion IS INITIAL.
          SELECT SINGLE atwrt FROM ausp
             INTO  lv_posicion
             WHERE objek = wa_objek-objek AND
                   atinn = g_atinn_posicion AND
                   klart = '023'.
        ENDIF.

*     volcamos la información a la tabla interna que mostramos en el ALV.
        LOOP AT t_datos INTO wa_datos.
          wa_datos-zzebeln4 = lv_pedido.
          wa_datos-zzebelp4 = lv_posicion.
          wa_datos-zzkunnr4 = lv_cliente.
          APPEND wa_datos TO gt_pp0036_lpm_alv.
        ENDLOOP.

      ENDIF.
    ENDLOOP.
  ELSE.
    SELECT DISTINCT b~auart, b~aufnr, a~matnr, c~maktx, a~werks, a~charg
      INTO CORRESPONDING FIELDS OF TABLE @gt_pp0036_lpm_alv
      FROM aufk AS b
      INNER JOIN aufm AS a ON a~aufnr = b~aufnr
      INNER JOIN mara AS d ON d~matnr = a~matnr
      LEFT JOIN makt AS c ON c~matnr = a~matnr
      WHERE b~auart = 'ZC02' AND
            d~mtart = 'ZPMP' AND
            b~aufnr IN @s_aufnr8 AND
            a~matnr IN @s_matnr8 AND
            b~werks IN @s_werks8 AND
            a~charg IN @s_charg8 AND
            b~zzdestcmcr IN @s_dest8 AND
            b~zzlgort IN @s_zzlg8 AND
            c~spras = @sy-langu
      ORDER BY b~aufnr, a~matnr, a~werks, a~charg.

    LOOP AT gt_pp0036_lpm_alv ASSIGNING <lpm>." rellenamos las características
      CLEAR: lv_cliente, lv_pedido, lv_posicion.

      SELECT SINGLE * FROM mcha
        INTO wa_mcha
        WHERE matnr EQ <lpm>-matnr
          AND werks EQ <lpm>-werks
          AND charg EQ <lpm>-charg.

      IF sy-subrc EQ 0.
        CLEAR: lv_objek.
        CONCATENATE <lpm>-matnr <lpm>-charg INTO lv_objek RESPECTING BLANKS.

        SELECT SINGLE * FROM inob
          INTO wa_inob
          WHERE klart = '023' AND
                obtab = 'MCH1' AND
                objek = lv_objek.

*     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
*     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
*     de una manera rápida
        SELECT SINGLE atwrt FROM ausp
          INTO  lv_cliente
          WHERE objek = wa_inob-cuobj AND
                atinn = g_atinn_cliente AND
                klart = '023'.

        SELECT SINGLE atwrt FROM ausp
           INTO  lv_pedido
           WHERE objek = wa_inob-cuobj AND
                 atinn = g_atinn_pedido AND
                 klart = '023'.

        SELECT SINGLE atwrt FROM ausp
           INTO  lv_posicion
           WHERE objek = wa_inob-cuobj AND
                 atinn = g_atinn_posicion AND
                 klart = '023'.

        <lpm>-zzkunnr4 = lv_cliente.
        <lpm>-zzebeln4 = lv_pedido.
        <lpm>-zzebelp4 = lv_posicion.
      ENDIF.
    ENDLOOP.

  ENDIF.

ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  GET_PNM_DATA_CON_FITROS
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      <--P_GT_PP0036_PNM_ALV  text
**----------------------------------------------------------------------*
*FORM get_pnm_data_con_fitros  CHANGING p_pp0036_pnm_alv TYPE zttpp0036_pnm_alv.
*  DATA: t_objek  TYPE tty_objek,
*        wa_objek TYPE LINE OF tty_objek.
*
*  DATA: lt_ausp  TYPE TABLE OF ausp,
*        wa_ausp  TYPE ausp,
*        t_inob   TYPE STANDARD TABLE OF inob,
*        wa_inob  TYPE inob,
*        lv_cuobj TYPE inob-cuobj,
*        wa_mcha  TYPE mcha,
*        lt_mcha  TYPE STANDARD TABLE OF mcha.
*
*  DATA: t_datos  TYPE zttpp0036_pnm_alv,
*        wa_datos TYPE zspp0036_pnm_alv.
*
*  DATA: t_lotes  TYPE tty_lotes,
*        wa_lotes TYPE LINE OF tty_lotes.
*
*  DATA: lv_cliente  TYPE ausp-atwrt,
*        lv_pedido   TYPE ausp-atwrt,
*        lv_posicion TYPE ausp-atwrt,
*        lv_orden    TYPE ausp-atwrt.
*
*  DATA: lv_atinn_ext TYPE c LENGTH 20.
*
*  DATA:  lv_atinn_cliente  TYPE atinn,
*         lv_atinn_pedido   TYPE atinn,
*         lv_atinn_posicion TYPE atinn,
*         lv_atinn_orden    TYPE atinn.
*
*  DATA: wa_mara TYPE mara.
*
*
** recuperamos las características del sistema de clasificación que corresponden con los filtros
** de destinatario de mercancia, pedido y posición informados en la pantalla de selección.
*  PERFORM get_charact_new TABLES lt_ausp s_kunnr4 s_ebeln4 s_ebelp4 s_aufnr4
*                          CHANGING lv_atinn_cliente
*                                   lv_atinn_pedido
*                                   lv_atinn_posicion
*                                   lv_atinn_orden .
*
** recuperamos los objetos que tienen el sistema de clasificación
*  LOOP AT lt_ausp INTO wa_ausp.
*    wa_objek-objek = wa_ausp-objek.
*    APPEND wa_objek TO t_objek.
*  ENDLOOP.
*
*  SORT t_objek  BY objek ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM t_objek.
*
*
*  LOOP AT t_objek INTO wa_objek.
*    lv_cuobj = wa_objek-objek.
*
**   verificamos si los objetos cumplen con el resto de criterios de la pantalla de selección.
*    CLEAR: wa_inob.
*    SELECT SINGLE * FROM inob
*      INTO wa_inob
*      WHERE cuobj = lv_cuobj AND
*            klart = '023' AND
*            obtab = 'MCH1'.
*
*    CLEAR: wa_mara.
*    SELECT SINGLE * FROM mara
*      INTO wa_mara
*      WHERE matnr = wa_inob-objek(18) AND
*            mtart = 'ZPLP'.
*
*    CHECK sy-subrc = 0.
*
*    CLEAR: lt_mcha. REFRESH: lt_mcha.
*    SELECT SINGLE * FROM mcha
*        INTO wa_mcha
*        WHERE ( matnr = wa_inob-objek(18) AND matnr IN s_matnr4 ) AND
*              werks IN s_werks4 AND
*              ( charg  = wa_inob-objek+18(10) AND charg IN s_charg4 ) .
*
*    IF sy-subrc = 0.
*
*      CLEAR: t_lotes. REFRESH: t_lotes.
*      SELECT DISTINCT matnr charg werks FROM mseg
*        INTO TABLE t_lotes
*        WHERE matnr =  wa_mcha-matnr AND
*              charg =  wa_mcha-charg AND
*              werks =  wa_mcha-werks.
*
*
**     de cada objeto, recuperamos el valor de las características 'CÓDIGO DE CLIENTE',
**     'PEDIDO COMPRA/VENTA' y 'POSICIÓN PEDIDO COMPRA/VENTA'
*      CLEAR: lv_cliente, lv_pedido, lv_posicion, lv_orden.
*
*      LOOP AT lt_ausp INTO wa_ausp WHERE objek = wa_objek-objek.
*        CALL FUNCTION 'CONVERSION_EXIT_ATINN_OUTPUT'
*          EXPORTING
*            input  = wa_ausp-atinn
*          IMPORTING
*            output = lv_atinn_ext.
*
*        CASE lv_atinn_ext.
*          WHEN 'Z_CLIENTE'.
*            lv_cliente = wa_ausp-atwrt.
*
*          WHEN 'Z_PEDIDO'.
*            lv_pedido = wa_ausp-atwrt.
*
*          WHEN 'Z_POSICION'.
*            lv_posicion = wa_ausp-atwrt.
*
*          WHEN 'Z_ORDEN'.
*            lv_orden = wa_ausp-atwrt.
*        ENDCASE.
*      ENDLOOP.
*
**     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
**     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
**     de una manera rápida
*      IF lv_cliente IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*                 INTO  lv_cliente
*                 WHERE objek = wa_objek-objek AND
*                       atinn = lv_atinn_cliente AND
*                       klart = '023'.
*      ENDIF.
*
*      IF lv_pedido IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*           INTO  lv_pedido
*           WHERE objek = wa_objek-objek AND
*                 atinn = lv_atinn_pedido AND
*                 klart = '023'.
*      ENDIF.
*
*
*      IF lv_posicion IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*           INTO  lv_posicion
*           WHERE objek = wa_objek-objek AND
*                 atinn = lv_atinn_posicion AND
*                 klart = '023'.
*      ENDIF.
*
*      IF lv_orden IS INITIAL.
*        SELECT SINGLE atwrt FROM ausp
*           INTO  lv_orden
*           WHERE objek = wa_objek-objek AND
*                 atinn = lv_atinn_orden AND
*                 klart = '023'.
*      ENDIF.
*
**     volcamos la información a la tabla interna que mostramos en el ALV.
*      LOOP AT t_lotes INTO wa_lotes.
*        CLEAR: wa_datos.
*
*        wa_datos-matnr = wa_lotes-matnr.
*
*        SELECT SINGLE maktx FROM makt
*          INTO wa_datos-maktx
*          WHERE matnr = wa_lotes-matnr AND
*                spras = sy-langu.
*
*        wa_datos-werks = wa_lotes-werks.
*        wa_datos-charg = wa_lotes-charg.
*
*        wa_datos-zzebeln4 = lv_pedido.
*        wa_datos-zzebelp4 = lv_posicion.
*        wa_datos-zzkunnr4 = lv_cliente.
*        wa_datos-aufnr = lv_orden.
*
*        IF lv_orden IS NOT INITIAL.
*          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*            EXPORTING
*              input  = lv_orden
*            IMPORTING
*              output = lv_orden.
*
*          SELECT SINGLE auart FROM aufk
*            INTO wa_datos-auart
*            WHERE aufnr = lv_orden.
*        ENDIF.
*
*        APPEND wa_datos TO gt_pp0036_pnm_alv.
*      ENDLOOP.
*
*    ENDIF.
*  ENDLOOP.
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_PNM_DATA_CON_FITROS_2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GT_PP0036_PNM_ALV  text
*----------------------------------------------------------------------*
FORM get_pnm_data_con_fitros_2 CHANGING p_pp0036_pnm_alv TYPE zttpp0036_pnm_alv. " cvivo
  DATA: t_objek  TYPE tty_objek,
        wa_objek TYPE LINE OF tty_objek.

  DATA: lt_ausp  TYPE TABLE OF ausp,
        wa_ausp  TYPE ausp,
        t_inob   TYPE STANDARD TABLE OF inob,
        wa_inob  TYPE inob,
        lv_cuobj TYPE inob-cuobj,
        wa_mcha  TYPE mcha,
        lt_mcha  TYPE STANDARD TABLE OF mcha.

  DATA: t_datos  TYPE zttpp0036_pnm_alv,
        wa_datos TYPE zspp0036_pnm_alv.

  DATA: t_lotes  TYPE tty_lotes,
        wa_lotes TYPE LINE OF tty_lotes.

  DATA: lv_cliente  TYPE ausp-atwrt,
        lv_pedido   TYPE ausp-atwrt,
        lv_posicion TYPE ausp-atwrt,
        lv_orden    TYPE ausp-atwrt.

  DATA: lv_atinn_ext TYPE c LENGTH 20.

  DATA: wa_mara TYPE mara.

* recuperamos las características del sistema de clasificación que corresponden con los filtros
* de destinatario de mercancia, pedido y posición informados en la pantalla de selección.
  PERFORM get_charact_new_2 TABLES lt_ausp s_kunnr4 s_ebeln4 s_ebelp4 s_aufnr4
                          CHANGING g_atinn_cliente
                                   g_atinn_pedido
                                   g_atinn_posicion
                                   g_atinn_orden .

* recuperamos los objetos que tienen el sistema de clasificación
  LOOP AT lt_ausp INTO wa_ausp.
    wa_objek-objek = wa_ausp-objek.
    APPEND wa_objek TO t_objek.
  ENDLOOP.

  SORT t_objek  BY objek ASCENDING.
  DELETE ADJACENT DUPLICATES FROM t_objek.

  LOOP AT t_objek INTO wa_objek.
    lv_cuobj = wa_objek-objek.

*   verificamos si los objetos cumplen con el resto de criterios de la pantalla de selección.
    CLEAR: wa_inob.
    SELECT SINGLE * FROM inob
      INTO wa_inob
      WHERE cuobj = lv_cuobj AND
            klart = '023' AND
            obtab = 'MCH1'.

    CLEAR: wa_mara.
    SELECT SINGLE * FROM mara
      INTO wa_mara
      WHERE matnr = wa_inob-objek(18) AND
            mtart = 'ZPLP'.

    CHECK sy-subrc = 0.

    CLEAR: lt_mcha. REFRESH: lt_mcha.
    SELECT SINGLE * FROM mcha
        INTO wa_mcha
        WHERE ( matnr = wa_inob-objek(18) AND matnr IN s_matnr4 ) AND
              werks IN s_werks4 AND
              ( charg  = wa_inob-objek+18(10) AND charg IN s_charg4 ).

    IF sy-subrc = 0.
      CLEAR: t_lotes. REFRESH: t_lotes.
      SELECT DISTINCT matnr charg werks FROM mseg
        INTO TABLE t_lotes
        WHERE matnr =  wa_mcha-matnr AND
              charg =  wa_mcha-charg AND
              werks =  wa_mcha-werks.

*     de cada objeto, recuperamos el valor de las características 'CÓDIGO DE CLIENTE',
*     'PEDIDO COMPRA/VENTA' y 'POSICIÓN PEDIDO COMPRA/VENTA'
      CLEAR: lv_cliente, lv_pedido, lv_posicion, lv_orden.

      LOOP AT lt_ausp INTO wa_ausp WHERE objek = wa_objek-objek.
        CALL FUNCTION 'CONVERSION_EXIT_ATINN_OUTPUT'
          EXPORTING
            input  = wa_ausp-atinn
          IMPORTING
            output = lv_atinn_ext.

        CASE lv_atinn_ext.
          WHEN 'Z_CLIENTE'.
            lv_cliente = wa_ausp-atwrt.
          WHEN 'Z_PEDIDO'.
            lv_pedido = wa_ausp-atwrt.
          WHEN 'Z_POSICION'.
            lv_posicion = wa_ausp-atwrt.
          WHEN 'Z_ORDEN'.
            lv_orden = wa_ausp-atwrt.
        ENDCASE.
      ENDLOOP.

*     para completar el dato a mostrar en el alv, el objeto que cumpla con los filtros de la pantalla de selección
*     debe tener informado el resto de características, por eso, con su objek, atinn y clase, podemos recuperar el valor
*     de una manera rápida
      IF lv_cliente IS INITIAL.
        SELECT SINGLE atwrt FROM ausp
                 INTO  lv_cliente
                 WHERE objek = wa_objek-objek AND
                       atinn = g_atinn_cliente AND
                       klart = '023'.
      ENDIF.

      IF lv_pedido IS INITIAL.
        SELECT SINGLE atwrt FROM ausp
           INTO  lv_pedido
           WHERE objek = wa_objek-objek AND
                 atinn = g_atinn_pedido AND
                 klart = '023'.
      ENDIF.

      IF lv_posicion IS INITIAL.
        SELECT SINGLE atwrt FROM ausp
           INTO  lv_posicion
           WHERE objek = wa_objek-objek AND
                 atinn = g_atinn_posicion AND
                 klart = '023'.
      ENDIF.

      IF lv_orden IS INITIAL.
        SELECT SINGLE atwrt FROM ausp
           INTO  lv_orden
           WHERE objek = wa_objek-objek AND
                 atinn = g_atinn_orden AND
                 klart = '023'.
      ENDIF.

*     volcamos la información a la tabla interna que mostramos en el ALV.
      LOOP AT t_lotes INTO wa_lotes.
        CLEAR: wa_datos.

        wa_datos-matnr = wa_lotes-matnr.

        SELECT SINGLE maktx FROM makt
          INTO wa_datos-maktx
          WHERE matnr = wa_lotes-matnr AND
                spras = sy-langu.

        wa_datos-werks = wa_lotes-werks.
        wa_datos-charg = wa_lotes-charg.

        wa_datos-zzebeln4 = lv_pedido.
        wa_datos-zzebelp4 = lv_posicion.
        wa_datos-zzkunnr4 = lv_cliente.
        wa_datos-aufnr = lv_orden.

        IF wa_datos-aufnr IS NOT INITIAL.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = wa_datos-aufnr
            IMPORTING
              output = wa_datos-aufnr.

          SELECT SINGLE auart FROM aufk
            INTO wa_datos-auart
            WHERE aufnr = wa_datos-aufnr.
        ENDIF.

        APPEND wa_datos TO gt_pp0036_pnm_alv.
      ENDLOOP.

    ENDIF.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_PARAMETERS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_parameters .

  CLEAR: gs_tvarvc.
  SELECT SINGLE * FROM tvarvc
      INTO gs_tvarvc
      WHERE name EQ 'ZATINN_ORDEN'.

  IF sy-subrc = 0.
    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
      EXPORTING
        input  = gs_tvarvc-low
      IMPORTING
        output = g_atinn_orden.
  ENDIF.

  CLEAR: gs_tvarvc.
  SELECT SINGLE * FROM tvarvc
    INTO gs_tvarvc
    WHERE name EQ 'ZATINN_PEDIDO'.

  IF sy-subrc = 0.
    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
      EXPORTING
        input  = gs_tvarvc-low
      IMPORTING
        output = g_atinn_pedido.
  ENDIF.

  CLEAR: gs_tvarvc.
  SELECT SINGLE * FROM tvarvc
    INTO gs_tvarvc
    WHERE name EQ 'ZATINN_POSICION'.

  IF sy-subrc = 0.
    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
      EXPORTING
        input  = gs_tvarvc-low
      IMPORTING
        output = g_atinn_posicion.
  ENDIF.

  CLEAR: gs_tvarvc.
  SELECT SINGLE * FROM tvarvc
    INTO gs_tvarvc
    WHERE name EQ 'ZATINN_CLIENTE'.

  IF sy-subrc = 0.
    CALL FUNCTION 'CONVERSION_EXIT_ATINN_INPUT'
      EXPORTING
        input  = gs_tvarvc-low
      IMPORTING
        output = g_atinn_cliente.
  ENDIF.

ENDFORM.
