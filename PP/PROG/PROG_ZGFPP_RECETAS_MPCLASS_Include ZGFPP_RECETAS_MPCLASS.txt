*&---------------------------------------------------------------------*
*&  Include           ZGFPP_RECETAS_MPCLASS
*&---------------------------------------------------------------------*


*---------------------------------------------------------------------*
*       CLASS lcl_handle_events2 DEFINITION  para POPUP RCETAS STANDARD
*---------------------------------------------------------------------*
* #5.1 define a local class for handling events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lcl_handle_pop_std DEFINITION.
  PUBLIC SECTION.
    METHODS:
      on_user_command2 FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function.

*    METHODS: on_link_click   FOR EVENT link_click OF
*                  cl_salv_events_table
*      IMPORTING row column.

ENDCLASS.                    "lcl_handle_events DEFINITION

*---------------------------------------------------------------------*
* #5.2 implement the events for handling the events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lcl_handle_pop_std IMPLEMENTATION.
  METHOD on_user_command2.
    DATA:
      lr_selections  TYPE REF TO cl_salv_selections,

      lt_rows        TYPE salv_t_row,
      lv_row         TYPE i,
      lv_no_selected LIKE sy-tfill.

*   execute function
    CASE e_salv_function.
      WHEN 'CONTINUE'
        OR 'CONT'.                     "pressing ENTER behaves different, means RS_CUA_GET_STATUS returns UCOMM only 4 digts long
*       get selected line
        lr_selections = go_alv->get_selections( ).
        lt_rows = lr_selections->get_selected_rows( ).
        DESCRIBE TABLE lt_rows LINES lv_no_selected.

        IF lv_no_selected IS INITIAL.
*         no selection made
          MESSAGE i323(zpp). "Seleccione una receta para continuar.
        ELSE.
          READ TABLE lt_rows INTO lv_row INDEX 1.
*         only valid lines
          IF lv_row IS NOT INITIAL.
*           get guid of selected line

            go_alv->close_screen( ).

            TRY.
                g_id_receta = g_datos_rec_std[ lv_row ]-id_receta.
              CATCH cx_root .
                MESSAGE e324(zpp). "Receta no encontrada
            ENDTRY.
          ENDIF.
        ENDIF.

      WHEN 'CANC'.
*       leave popup
*       - (currently) not supported via code &AC1
        go_alv->close_screen( ).
      WHEN 'CONS'.
        lr_selections = go_alv->get_selections( ).
        lt_rows = lr_selections->get_selected_rows( ).
        DESCRIBE TABLE lt_rows LINES lv_no_selected.

        IF lv_no_selected IS INITIAL.
*         no selection made
          MESSAGE i323(zpp). "Seleccione una receta para continuar.
        ELSE.
          LOOP AT lt_rows INTO lv_row.
            PERFORM invocar_consulta_receta_std USING lv_row.
          ENDLOOP.
*         only valid lines
*          READ TABLE lt_rows INTO lv_row INDEX 1.
*          IF lv_row IS NOT INITIAL.
*            PERFORM invocar_consulta_receta_std USING lv_row.
*          ENDIF.
        ENDIF.

      WHEN OTHERS.
*       currently no further commands supported

    ENDCASE.

  ENDMETHOD.

*  METHOD on_link_click.
*
*    READ TABLE gt_popup_rec_std INTO DATA(ls) INDEX row.
*    IF sy-subrc = 0.
*
*      SET PARAMETER ID: 'ZID_RECETA' FIELD ls-id_receta,
*                        'ZWERKS'     FIELD ls-werks.
*
*
*      CALL TRANSACTION 'ZPP0049_CON_STD'.
*
**      CLEAR: ls-id_receta , ls-werks.
*      SET PARAMETER ID: 'ZID_RECETA' FIELD space,
*                        'ZWERKS'     FIELD space.
*    ENDIF.
*
*  ENDMETHOD.                    "on_link_click

ENDCLASS.

* Declaración de Clase para gestión de ALV Recetas MP
CLASS lcl_handle_pop_mp DEFINITION.
  PUBLIC SECTION.
    METHODS:
      on_user_command_mp FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function.

*    METHODS: on_link_click   FOR EVENT link_click OF
*                  cl_salv_events_table
*      IMPORTING row column.

ENDCLASS.                    "lcl_handle_events DEFINITION

*---------------------------------------------------------------------*
* #5.2 implement the events for handling the events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lcl_handle_pop_mp IMPLEMENTATION.
  METHOD on_user_command_mp.
    DATA:
      lr_selections  TYPE REF TO cl_salv_selections,

      lt_rows        TYPE salv_t_row,
      lv_row         TYPE i,
      lv_no_selected LIKE sy-tfill.

*   execute function
    CASE e_salv_function.
      WHEN 'CONTINUE'
        OR 'CONT'.                     "pressing ENTER behaves different, means RS_CUA_GET_STATUS returns UCOMM only 4 digts long
*       get selected line
        lr_selections = go_alv->get_selections( ).
        lt_rows = lr_selections->get_selected_rows( ).
        DESCRIBE TABLE lt_rows LINES lv_no_selected.

        IF lv_no_selected IS INITIAL.
*         no selection made
          MESSAGE i323(zpp). "Seleccione una receta para continuar.
        ELSE.
          READ TABLE lt_rows INTO lv_row INDEX 1.
*         only valid lines
          IF lv_row IS NOT INITIAL.
*           get guid of selected line

            go_alv->close_screen( ).

            TRY.
                g_id_receta = g_datos_rec_mp[ lv_row ]-id_receta.
              CATCH cx_root .
                MESSAGE e324(zpp). "Receta no encontrada
            ENDTRY.
          ENDIF.
        ENDIF.

      WHEN 'CANC'.
*       leave popup
*       - (currently) not supported via code &AC1
        go_alv->close_screen( ).
      WHEN 'CONS'.
        lr_selections = go_alv->get_selections( ).
        lt_rows = lr_selections->get_selected_rows( ).
        DESCRIBE TABLE lt_rows LINES lv_no_selected.

        IF lv_no_selected IS INITIAL.
*         no selection made
          MESSAGE i323(zpp). "Seleccione una receta para continuar.
        ELSE.
          LOOP AT lt_rows INTO lv_row.
            PERFORM invocar_consulta_receta_mp USING lv_row.
          ENDLOOP.
*         only valid lines
*          READ TABLE lt_rows INTO lv_row INDEX 1.
*          IF lv_row IS NOT INITIAL.
*            PERFORM invocar_consulta_receta_std USING lv_row.
*          ENDIF.
        ENDIF.

      WHEN OTHERS.
*       currently no further commands supported

    ENDCASE.

  ENDMETHOD.

*  METHOD on_link_click.
*
*    READ TABLE gt_popup_rec_std INTO DATA(ls) INDEX row.
*    IF sy-subrc = 0.
*
*      SET PARAMETER ID: 'ZID_RECETA' FIELD ls-id_receta,
*                        'ZWERKS'     FIELD ls-werks.
*
*
*      CALL TRANSACTION 'ZPP0049_CON_STD'.
*
**      CLEAR: ls-id_receta , ls-werks.
*      SET PARAMETER ID: 'ZID_RECETA' FIELD space,
*                        'ZWERKS'     FIELD space.
*    ENDIF.
*
*  ENDMETHOD.                    "on_link_click

ENDCLASS.





FORM invocar_consulta_receta_std USING p_row TYPE int4.

  READ TABLE g_datos_rec_std INTO DATA(ls) INDEX p_row.
  IF sy-subrc = 0.

    SET PARAMETER ID: 'ZID_RECETA' FIELD ls-id_receta,
                      'ZWERKS'     FIELD ls-werks.


    CALL TRANSACTION 'ZPP0049_CON_STD'.

* Limpiamos campos del "SET PARAMETER"
    SET PARAMETER ID: 'ZID_RECETA' FIELD space,
                      'ZWERKS'     FIELD space.
  ENDIF.


ENDFORM.


FORM invocar_consulta_receta_mp USING p_row TYPE int4.

  READ TABLE g_datos_rec_mp INTO DATA(ls) INDEX p_row.
  IF sy-subrc = 0.

    SET PARAMETER ID: 'ZID_RECETA_MP' FIELD ls-id_receta,
                      'ZWERKS_MP'     FIELD ls-werks.


    CALL TRANSACTION 'ZPP0061_CON_MP'.

* Limpiamos campos del "SET PARAMETER"
    SET PARAMETER ID: 'ZID_RECETA_MP' FIELD space,
                      'ZWERKS_MP'     FIELD space.
  ENDIF.


ENDFORM.


FORM optim_cols_rec_std.
* Optimizar ancho columnas
  DATA: lr_columns TYPE REF TO cl_salv_columns_table,
        lr_column  TYPE REF TO cl_salv_column_table.

  lr_columns = go_alv->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MANDT' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'WERKS' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.


*  TRY.
*      lr_column ?= lr_columns->get_column( columnname = 'ZCALIDAD' ).
*      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
*    CATCH cx_salv_not_found .
*  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FECHA_INS' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'HORA_INS' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CONTRAMAESTRE' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CONTR_INS' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FECHA_UPD' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'HORA_UPD' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CONTR_UPD' ).
      lr_column->set_visible( value  = if_salv_c_bool_sap=>false ).
    CATCH cx_salv_not_found .
  ENDTRY.

ENDFORM.
