*&---------------------------------------------------------------------*
*&  Include           ZRPP0035_SC
*&---------------------------------------------------------------------*

DATA: l_int2 TYPE int2.

SELECTION-SCREEN BEGIN OF BLOCK blk1 WITH FRAME.

SELECT-OPTIONS: so_werks FOR mchb-werks NO INTERVALS NO-EXTENSION MATCHCODE OBJECT h_t001w_c,
                so_matnr FOR mchb-matnr NO INTERVALS NO-EXTENSION MATCHCODE OBJECT mat1,
                so_charg FOR mchb-charg NO INTERVALS NO-EXTENSION,
                so_numpa FOR l_int2     NO INTERVALS NO-EXTENSION,
                so_lgort FOR mchb-lgort NO INTERVALS NO-EXTENSION.

SELECTION-SCREEN END OF BLOCK blk1.

SELECTION-SCREEN: BEGIN OF TABBED BLOCK nit_tab FOR 10 LINES,
                  TAB (20) tab1 USER-COMMAND nit1 MODIF ID tab,
                  END OF BLOCK nit_tab.

INITIALIZATION.

  tab1 = 'Qty Almacén'.
  nit_tab-prog = sy-repid.
  nit_tab-dynnr = 100.
  nit_tab-activetab = 'TAB1'.


AT SELECTION-SCREEN.

  PERFORM comprobar_datos_sc.

  " Actulizar tabla con los valores introducidos o modificados
  CALL METHOD g_grid->check_changed_data.

  CHECK gti_datos[] IS NOT INITIAL.
  PERFORM comprobar_cantidades.

AT SELECTION-SCREEN OUTPUT.

  IF so_numpa-low IS INITIAL AND so_lgort-low IS INITIAL.

    LOOP AT SCREEN.
      IF screen-group1 = 'TAB'.
        screen-active = '0'.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.
    ENDLOOP.

  ELSE.

    LOOP AT SCREEN.
      IF screen-group1 = 'TAB'.
        screen-active = '1'.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.
    ENDLOOP.

    PERFORM ini_tab_alv. "Creamos la tabla con el numero de particiones

  ENDIF.




*&---------------------------------------------------------------------*
*&      Form  COMPROBAR_CANTIDADES
*&---------------------------------------------------------------------*
*       Comprobamos que el lote seleccionado tiene suficiente stock
*       para cubrir las necesidades de los lotes a crear
*----------------------------------------------------------------------*
FORM comprobar_cantidades.

  DATA: l_clabs  TYPE mchb-clabs,
        l_aux    TYPE mchb-clabs,
        ls_datos TYPE ty_cant.

  " Calculamos la cantidad necesaria
  LOOP AT gti_datos INTO ls_datos.
    ADD ls_datos-qty TO l_aux.
  ENDLOOP.
*  l_aux = so_clabs-low * so_numpa-low.

  IF l_aux EQ 0.
    MESSAGE e000 WITH 'La cantidad a mover es 0, revise los datos'.
  ENDIF.

  SELECT SINGLE clabs FROM mchb
    INTO l_clabs
    WHERE matnr EQ so_matnr-low
    AND   werks EQ so_werks-low
    AND   charg EQ so_charg-low and
    clabs > 0. "cgijon: 15.12.17


  CHECK l_clabs LT l_aux.

  MESSAGE e162 WITH l_clabs l_aux so_matnr-low so_charg-low. "No tenemos suficiente stock en el lote seleccionado: & < &, &/&

ENDFORM.                    " COMPROBAR_CANTIDADES

*&---------------------------------------------------------------------*
*&      Form  INI_TAB_ALV
*&---------------------------------------------------------------------*
*       Creamos la tabla con el numero de particiones
*----------------------------------------------------------------------*
FORM ini_tab_alv.

  DATA: ls_datos TYPE ty_cant,
        l_indx   TYPE i VALUE 0.

  REFRESH: gti_datos.

  ls_datos-lgort = so_lgort-low. "Alamacen destino

  DO so_numpa-low TIMES.

    ADD 1 TO l_indx.
    ls_datos-indx = l_indx.

    APPEND ls_datos TO gti_datos.

  ENDDO.

ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  COMPROBAR_DATOS_SC
*&---------------------------------------------------------------------*
FORM comprobar_datos_sc.

  DATA: l_werks TYPE werks_d.

  " Comprobamos Centro
  IF so_werks-low IS NOT INITIAL.
*    SELECT SINGLE werks FROM t001w
*      INTO @DATA(l_werks)
*      WHERE werks EQ @so_werks-low.

    CLEAR: l_werks.
    SELECT SINGLE werks FROM t001w
        INTO l_werks
        WHERE werks EQ so_werks-low.

    IF sy-subrc NE 0.
      MESSAGE e000 WITH 'Centro ' so_werks-low ' no existe'.
    ENDIF.
  ENDIF.

  DATA: l_mtart TYPE mtart.

  " Comprobamos Material
  IF so_matnr-low IS NOT INITIAL.
*    SELECT SINGLE mtart FROM mara
*      INTO @DATA(l_mtart)
*      WHERE matnr EQ @so_matnr-low.

    CLEAR: l_mtart.
    SELECT SINGLE mtart FROM mara
      INTO l_mtart
      WHERE matnr EQ so_matnr-low.


    IF sy-subrc NE 0.
      MESSAGE e000 WITH 'Material ' so_matnr-low ' no existe'.
    ELSEIF l_mtart EQ 'ZWIP'.
      MESSAGE e000 WITH 'Los materiales WIP no son válidos' ' para este proceso. ' |{ so_matnr-low ALPHA = OUT }| .
    ENDIF.
  ENDIF.

  " Comprobar Lote
  DATA: lv_charg TYPE charg_d.

  IF so_charg-low IS NOT INITIAL.
*    SELECT SINGLE charg FROM mch1
*      INTO @DATA(charg)
*      WHERE charg EQ @so_charg-low.

    CLEAR: lv_charg.
    SELECT SINGLE charg FROM mch1
    INTO lv_charg
    WHERE charg EQ so_charg-low.


    IF sy-subrc NE 0.
      MESSAGE e000 WITH 'Lote ' so_charg-low ' no existe'.
    ENDIF.
  ENDIF.

  " Comprobar Almacén
  DATA: LV_lgort TYPE lgort_D.

  IF so_lgort-low IS NOT INITIAL.
*    SELECT SINGLE lgort FROM t001l
*      INTO @DATA(lgort)
*      WHERE lgort EQ @so_lgort-low.

      CLEAR: LV_lgort.

      SELECT SINGLE lgort FROM t001l
      INTO LV_lgort
      WHERE lgort EQ so_lgort-low.

    IF sy-subrc NE 0.
      MESSAGE e000 WITH 'Almacén ' so_lgort-low ' no existe'.
    ENDIF.
  ENDIF.

ENDFORM.
