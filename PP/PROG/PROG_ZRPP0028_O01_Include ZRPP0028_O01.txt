*&---------------------------------------------------------------------*
*&  Include           ZRPP0028_O01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.
  SET PF-STATUS '0100'.
  SET TITLEBAR '0100'.


ENDMODULE.                 " STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  PARAMETROS_DE_USUARIO  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE parametros_de_usuario OUTPUT.
  DATA: t_usr05  TYPE STANDARD TABLE OF usr05,
        wa_usr05 TYPE                   usr05.

* obtenemos los parámetros del usuario para rellenar los campos gv_werks
* y gv_arbpl
  SELECT * FROM usr05
    INTO TABLE t_usr05
    WHERE bname = sy-uname.

  IF gv_werks IS INITIAL.
    READ TABLE t_usr05 INTO wa_usr05 WITH KEY parid = 'WRK'.
    IF sy-subrc = 0.
      gv_werks = wa_usr05-parva.
    ENDIF.
  ENDIF.


* al campos gv_fecha le ponemos el dia actual
  IF gv_fecha IS INITIAL.
    gv_fecha = sy-datum.
  ENDIF.

ENDMODULE.                 " PARAMETROS_DE_USUARIO  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  HABILITAR_BOTONES  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE habilitar_botones OUTPUT.

  LOOP AT SCREEN.
    CASE screen-name.
        "INI - 22.09.17 - ampliación programa
*      WHEN 'GV_WERKS'.
*        IF gv_werks IS INITIAL.
*          screen-input = '1'.
*        ELSE.
*          screen-input = '0'.
*        ENDIF.
*
*      WHEN 'PLANI'.
*        IF gv_werks IS NOT INITIAL AND gv_fecha IS NOT INITIAL AND
*          gv_turno IS NOT INITIAL.
*          screen-active = '1'.
*        ELSE.
*          screen-active = '0'.
*        ENDIF.
*
*      WHEN 'NOTI'.
*        IF gv_werks IS NOT INITIAL AND gv_fecha IS NOT INITIAL AND
*          gv_turno IS NOT INITIAL.
*          screen-active = '1'.
*        ELSE.
*          screen-active = '0'.
*        ENDIF.


      WHEN 'FECHA' OR 'GV_FECHA' OR 'GV_WERKS' OR 'CENTRO' OR 'TURNO' OR
           'GV_TURNO' OR 'GV_RANGO_FECHAS' OR 'GV_RANGO_HORAS'.
        screen-active = '0'.

      WHEN 'ALTA'.
        IF gv_aufnr IS INITIAL.
          screen-active = '0'.
        ELSE.
          screen-active = '1'.
        ENDIF.

      WHEN 'NOTI'.
        screen-active = '0'.
*        IF gv_aufnr IS INITIAL.
*          screen-active = '0'.
*        ELSE.
*          screen-active = '1'.
*        ENDIF.
        "FIN - 22.09.17 - ampliación programa

    ENDCASE.

    MODIFY SCREEN.
  ENDLOOP.
ENDMODULE.                 " HABILITAR_BOTONES  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
  SET PF-STATUS '0200'.
  SET TITLEBAR '0200'.

*  PERFORM obtener_prod_turnos.
*  PERFORM mostrar_datos_0200.



ENDMODULE.                 " STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0300 OUTPUT.
  SET PF-STATUS '0300'.
  SET TITLEBAR '0300'.

  PERFORM obtener_ordenes_0300.
  PERFORM mostrar_datos_0300.


* Temporizador de resfresco del ALV
*  CLEAR g_af_timer.
*  SELECT SINGLE af_timer
*    INTO g_af_timer
*    FROM zaf_timer
*   WHERE tcode EQ sy-tcode.
*
*  IF g_af_timer GT 0.
*    CREATE OBJECT g_timer.
*    CREATE OBJECT g_receiver.
*    SET HANDLER g_receiver->handle_finished FOR g_timer.
*    g_timer->interval = g_af_timer.
*    CALL METHOD g_timer->run.
*  ENDIF.

ENDMODULE.                 " STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_DATOS_0300
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_datos_0300 .

  DATA: ls_layout  TYPE lvc_s_layo,
        lt_fcat    TYPE lvc_t_fcat,
        ls_variant TYPE disvariant.

  DATA: lt_tooltips TYPE lvc_t_qinf,
        lt_toolb    TYPE ui_functions.


  IF gr_container_300 IS NOT BOUND.
    CREATE OBJECT gr_container_300
      EXPORTING
        container_name = 'CONTAINER_300'.

    CREATE OBJECT gr_grid_300
      EXPORTING
        i_parent      = gr_container_300
        i_appl_events = 'X'.

    PERFORM fieldcat_300 CHANGING lt_fcat.

    PERFORM layout_300 CHANGING ls_layout.



*   Para los eventos
    CREATE OBJECT g_application_300.


    SET HANDLER g_application_300->handle_toolbar FOR gr_grid_300.
    SET HANDLER g_application_300->handle_user_command FOR gr_grid_300.
    SET HANDLER g_application_300->handle_hotspot_click FOR gr_grid_300.



    PERFORM prepare_layout CHANGING ls_layout.
    PERFORM prepare_variant CHANGING ls_variant.


    PERFORM excluir_botones_300 CHANGING lt_toolb.

    CALL METHOD gr_grid_300->set_table_for_first_display
      EXPORTING
        is_layout            = ls_layout
        it_except_qinfo      = lt_tooltips
        it_toolbar_excluding = lt_toolb
        is_variant           = ls_variant
        i_save               = 'A'
      CHANGING
        it_fieldcatalog      = lt_fcat
        it_outtab            = gt_datos_300.


  ELSE.
    CALL METHOD gr_grid_300->refresh_table_display.
  ENDIF.

ENDFORM.                    " MOSTRAR_DATOS_0300
*&---------------------------------------------------------------------*
*&      Module  STATUS_0400  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0400 OUTPUT.
  SET PF-STATUS '0400'.
  SET TITLEBAR '0400'.

  DATA: l_erdat TYPE erdat,
        l_hora1 TYPE char10,
        l_hora2 TYPE char10
        .

  SELECT SINGLE erdat INTO l_erdat FROM aufk WHERE aufnr = gv_aufnr.

*  IF (  l_erdat >= '060000' AND  l_erdat <= '135959' ).
*    gv_turno = 'T1'.
*  ELSEIF ( l_erdat >= '140000' AND  l_erdat <= '215959' ).
*    gv_turno = 'T2'.
*  ELSEIF (  l_erdat >= '220000' AND  l_erdat <= '235959' ).
*    gv_turno = 'T3'.
*  ELSE.
*    gv_turno = 'T3'.
*  ENDIF.

* Obtenemos el descriptivo ( hora_desde + hora_hasta )
  SELECT SINGLE hora_desde , hora_hasta
    FROM zpp_turno
    INTO ( @DATA(l_hora_desde) , @DATA(l_hora_hasta) )
    WHERE turno = @gv_turno.
  IF sy-subrc = 0.
    WRITE l_hora_desde TO l_hora1 USING EDIT MASK '__:__:__'.
    WRITE l_hora_hasta TO l_hora2 USING EDIT MASK '__:__:__'.
    gv_rango_horas = |{ l_hora1  } - { l_hora2 }|.
  ENDIF.

  PERFORM obtener_datos_400.

  IF gt_datos_400[] IS NOT INITIAL.
    PERFORM mostrar_datos_0400.
  ELSEIF gr_grid_400 IS NOT INITIAL.
    CALL METHOD gr_grid_400->refresh_table_display.
  ENDIF.

ENDMODULE.                 " STATUS_0400  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  HABILITAR_BOTONES_0400  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE habilitar_botones_0400 OUTPUT.
  LOOP AT SCREEN.
    CASE screen-name.
      WHEN 'BACK'.
        screen-active = '0'.
    ENDCASE.
    MODIFY SCREEN.
  ENDLOOP.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0500  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0500 OUTPUT.
  SET PF-STATUS '0500'.
  SET TITLEBAR 'DEF' WITH gs_k_dyn500-charg.

  DATA: go_container_1    TYPE REF TO cl_gui_custom_container,
        go_container_2    TYPE REF TO cl_gui_custom_container,
        go_container_3    TYPE REF TO cl_gui_custom_container,
        go_container_text TYPE REF TO cl_gui_custom_container.

  DATA: go_img_tramo_lt TYPE REF TO cl_gui_picture,
        go_img_tramo_c  TYPE REF TO cl_gui_picture,
        go_img_tramo_lc TYPE REF TO cl_gui_picture.

  DATA url TYPE cndp_url.

  DATA: graphic_url(255).
  DATA: BEGIN OF graphic_table OCCURS 0,
          line(255) TYPE x,
        END OF graphic_table.
  DATA: l_graphic_conv TYPE i.
  DATA: l_graphic_offs TYPE i.
  DATA: graphic_size TYPE i.
  DATA: l_graphic_xstr TYPE xstring.

  DATA:    gt_list          TYPE vrm_values,
           gs_value         LIKE LINE OF gt_list,
           l_variable_name  TYPE vrm_id,
           lt_variable_name TYPE TABLE OF vrm_id.

  SET CURSOR FIELD gs_dyn500-sin_defectos.

  IF go_container_1 IS NOT BOUND.


    CREATE OBJECT go_container_1
      EXPORTING
        container_name = 'CONTAINER_TRAMO_LT'.
    CREATE OBJECT go_container_2
      EXPORTING
        container_name = 'CONTAINER_TRAMO_C'.
    CREATE OBJECT go_container_3
      EXPORTING
        container_name = 'CONTAINER_TRAMO_LC'.

    CREATE OBJECT go_img_tramo_lt
      EXPORTING
        parent = go_container_1.
    CREATE OBJECT go_img_tramo_c
      EXPORTING
        parent = go_container_2.
    CREATE OBJECT go_img_tramo_lc
      EXPORTING
        parent = go_container_3.

    CALL METHOD cl_ssf_xsf_utilities=>get_bds_graphic_as_bmp
      EXPORTING
        p_object       = 'GRAPHICS'
        p_name         = 'ZLOGO_TRAMO_BOBINA_SIMPLE'
        p_id           = 'BMAP'
        p_btype        = 'BCOL'
      RECEIVING
        p_bmp          = l_graphic_xstr
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.

    graphic_size = xstrlen( l_graphic_xstr ).
    l_graphic_conv = graphic_size.
    l_graphic_offs = 0.
    WHILE l_graphic_conv > 255.
      graphic_table-line = l_graphic_xstr+l_graphic_offs(255).
      APPEND graphic_table.
      l_graphic_offs = l_graphic_offs + 255.
      l_graphic_conv = l_graphic_conv - 255.
    ENDWHILE.
    graphic_table-line = l_graphic_xstr+l_graphic_offs(l_graphic_conv).
    APPEND graphic_table.

    CALL FUNCTION 'DP_CREATE_URL'
      EXPORTING
        type     = 'IMAGE'
        subtype  = 'X-UNKNOWN'
        size     = graphic_size
        lifetime = 'T'
      TABLES
        data     = graphic_table
      CHANGING
        url      = url.

    IF sy-subrc = 0.
      CALL METHOD go_img_tramo_c->load_picture_from_url_async
        EXPORTING
          url = url.
      CALL METHOD go_img_tramo_c->set_display_mode
        EXPORTING
          display_mode = cl_gui_picture=>display_mode_fit_center.
      CALL METHOD go_img_tramo_lc->load_picture_from_url_async
        EXPORTING
          url = url.
      CALL METHOD go_img_tramo_lc->set_display_mode
        EXPORTING
          display_mode = cl_gui_picture=>display_mode_fit_center.
      CALL METHOD go_img_tramo_lt->load_picture_from_url_async
        EXPORTING
          url = url.
      CALL METHOD go_img_tramo_lt->set_display_mode
        EXPORTING
          display_mode = cl_gui_picture=>display_mode_fit_center.
    ENDIF.

*   Seleccion motivos PULPER
    SELECT * FROM zvpp_carac_recha INTO TABLE @DATA(lt_zvpp_carac_recha).
    LOOP AT lt_zvpp_carac_recha INTO DATA(ls_zvpp_carac_recha).
      gs_value-key  = ls_zvpp_carac_recha-atzhl.
      gs_value-text = ls_zvpp_carac_recha-atwtb.
      APPEND gs_value TO gt_list.
    ENDLOOP.

    APPEND: 'GS_DYN500-DEFECTO1'    TO lt_variable_name,
            'GS_DYN500-DEFECTO2'    TO lt_variable_name,
            'GS_DYN500-DEFECTO3'    TO lt_variable_name,
            'GS_DYN500-DEFECTO1_LC' TO lt_variable_name,
            'GS_DYN500-DEFECTO2_LC' TO lt_variable_name,
            'GS_DYN500-DEFECTO3_LC' TO lt_variable_name,
            'GS_DYN500-DEFECTO1_LT' TO lt_variable_name,
            'GS_DYN500-DEFECTO2_LT' TO lt_variable_name,
            'GS_DYN500-DEFECTO3_LT' TO lt_variable_name,
            'GS_DYN500-DEFECTO1_C'  TO lt_variable_name,
            'GS_DYN500-DEFECTO2_C'  TO lt_variable_name,
            'GS_DYN500-DEFECTO3_C'  TO lt_variable_name.

    LOOP  AT lt_variable_name INTO l_variable_name.
      CALL FUNCTION 'VRM_SET_VALUES'
        EXPORTING
          id     = l_variable_name
          values = gt_list.
    ENDLOOP.


*   Contenedeor de observaciones
    CREATE OBJECT go_container_text
      EXPORTING
        container_name = 'CONTAINER_TEXTO'.


    go_textedit = NEW cl_gui_textedit( parent = go_container_text ).
    go_textedit->set_toolbar_mode( 0 ).

  ENDIF.

  IF g_onlyread_dyn500 = 'X'.
    go_textedit->set_readonly_mode( 1 ).
  ELSE.
    go_textedit->set_readonly_mode( 0 ).

  ENDIF.


*  DATA: lt_lines TYPE STANDARD TABLE OF ztpp031.
  DATA: lt_lines TYPE STANDARD TABLE OF tdline.

  IF gs_dyn500 IS INITIAL AND gw_first_time500 = abap_true.

    gw_first_time500 = abap_false.
    gs_k_dyn500-aufnr = |{ gs_k_dyn500-aufnr ALPHA = IN }|.


    SELECT SINGLE *
      FROM ztpp0030
      INTO CORRESPONDING FIELDS OF gs_dyn500
      WHERE aufnr = gs_k_dyn500-aufnr AND
            matnr = gs_k_dyn500-matnr AND
            charg = gs_k_dyn500-charg.

    CLEAR lt_lines[].

    SELECT  tdline
      FROM ztpp0031
      APPENDING TABLE @lt_lines
      WHERE aufnr   = @gs_k_dyn500-aufnr AND
            matnr   = @gs_k_dyn500-matnr AND
            charg   = @gs_k_dyn500-charg AND
            tp_ubic = ' '
      ORDER BY aufnr, matnr , charg , seq ASCENDING
            .

    IF sy-subrc = 0.

      CALL METHOD go_textedit->set_text_as_r3table
        EXPORTING
          table           = lt_lines
        EXCEPTIONS
          error_dp        = 1
          error_dp_create = 2
          OTHERS          = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.


    ENDIF.

    gs_dyn500_cpy = gs_dyn500.

  ENDIF.

  IF gs_dyn500-sin_defectos = 'X'.
    CLEAR: gs_dyn500-bob_pulper_total , gs_dyn500-bob_pulper_parcial,
        gs_dyn500-defecto1,
        gs_dyn500-defecto2,
        gs_dyn500-defecto3,
        gs_dyn500-defecto1_lt,
        gs_dyn500-defecto2_lt,
        gs_dyn500-defecto3_lt,
        gs_dyn500-defecto1_lc,
        gs_dyn500-defecto2_lc ,
        gs_dyn500-defecto3_lc,
        gs_dyn500-defecto1_c,
        gs_dyn500-defecto2_c,
        gs_dyn500-defecto3_c,
        gs_dyn500-defecto_ancho_lt,
        gs_dyn500-defecto_ancho_c,
        gs_dyn500-defecto_ancho_lc
        .
  ENDIF.

*  IF gs_dyn500-bob_pulper_total = 'X'.
*    clear: gs_dyn500-sin_defectos , gs_dyn500-bob_pulper_parcial.
*  ENDIF.
*
*   IF gs_dyn500-bob_pulper_parcial = 'X'.
*    clear: gs_dyn500-sin_defectos , gs_dyn500-bob_pulper_total.
*  ENDIF.

* Control para bloquear campos de Defectos cuando se activa "Sin defectos".
  LOOP AT SCREEN.

    IF g_onlyread_dyn500 = 'X'.
      screen-input   = 0.

    ELSE.

      IF screen-group1 EQ 'OUT'.
        IF gs_dyn500-sin_defectos = 'X'.
          screen-input   = 0.
        ELSE.
          screen-input   = 1.
        ENDIF.
      ENDIF.

      IF screen-group1 EQ 'NOC'.
        IF gw_out_dyn500 = 'X'.
          screen-active   = 1.
        ELSE.
          screen-active   = 0.
        ENDIF.
      ENDIF.

    ENDIF.

    MODIFY SCREEN.
  ENDLOOP.

ENDMODULE.
