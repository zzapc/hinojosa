*&---------------------------------------------------------------------*
*& Report  ZRPP0078
*&
*&---------------------------------------------------------------------*
*& Informe de gestión de residuos de MP
*& 68214 - CMS 10/08/2020
*&---------------------------------------------------------------------*
REPORT zrpp0078.

INCLUDE zrpp0078_class.

TABLES: mara , ztmm0006.

TYPES: BEGIN OF ty_salida,

         werks               TYPE werks_d,
         id_entrada_residuos TYPE  zpp_num_entrada_residuos,
*         id_entrada_residuos TYPE  zpp_num_entrada_residuos,
         zborrado            LIKE ztmm0006-zborrado,
*•  estado del registro:
*o  1 = anulado, si el campo borrado (zborrado) de la tabla de cabecera de entrada mp (ztmm0006) está marcado con una x.
*o  0 = activo, en caso contrario.
         budat               LIKE ztmm0006-budat,
         dir                 LIKE ztmm0006-dir,
         ler                 LIKE ztmm0006-ler,
         resid_peligroso     TYPE char2,
         tp_residuo          TYPE char15,

*         ztransportista      TYPE lifnr,
         lifnr               TYPE lifnr,
         name1               TYPE name1_gp,
         cir                 TYPE z_cir,

         trans_residuos      TYPE lifnr, " Codigo CIR de trans.residuos
         name1_transres      TYPE name1_gp,
*         cir_transres        TYPE z_cir,

         pcentro             TYPE lifnr,
         name1_pcentro       TYPE name1_gp,
         cir_pcentro         TYPE z_cir,

         matnr               TYPE matnr,
         maktx               TYPE maktx,
         brgew               TYPE z_cantidad_sin_dec,
         ntgew               TYPE z_cantidad_sin_dec,
         cantidad            TYPE z_cantidad_sin_dec,
         meins               TYPE meins,
         zmatricula1         TYPE ztpp0059-zmatricula1,
         zmatricula2         TYPE ztpp0059-zmatricula2,

         vbeln               TYPE xblnr, "albarán entrega
         ebeln               TYPE ebeln, "doc.compra
         id_reg_vehiculo     TYPE zid_reg_vehiculo,
         zentrada            LIKE ztmm0006-zentrada,

       END OF ty_salida.


DATA: gt_salida TYPE STANDARD TABLE OF ty_salida.
DATA: g_error   TYPE flag.

DATA: "gt_datos TYPE ztpp_recetas_detalle_lotes,
  gr_alv  TYPE REF TO cl_salv_table,
  gt_rows TYPE salv_t_row,
  wa_rows TYPE int4.

DATA: event_handler     TYPE REF TO lcl_event_handler.
DATA: gr_events         TYPE REF TO cl_salv_events_table.
DATA: gr_functions      TYPE REF TO cl_salv_functions.
DATA: gr_selections     TYPE REF TO cl_salv_selections.
DATA: key TYPE salv_s_layout_key.


SELECTION-SCREEN BEGIN OF BLOCK b4 WITH FRAME TITLE text-003.

PARAMETER: p_werks LIKE ztpp0041-werks. "Centro
SELECTION-SCREEN SKIP 1.
SELECT-OPTIONS: s_budat FOR ztmm0006-budat. " obligatory.
SELECT-OPTIONS: s_lifnr FOR ztmm0006-lifnr. " obligatory.
SELECT-OPTIONS: s_trres FOR ztmm0006-lifnr. " obligatory.


SELECT-OPTIONS: s_ler FOR ztmm0006-ler. " obligatory.

SELECT-OPTIONS: s_entr FOR ztmm0006-zentrada. "NLC.26.02.2025.Add nº registro en pantalla selección.

SELECTION-SCREEN SKIP 1.
SELECTION-SCREEN END OF BLOCK b4.

INITIALIZATION.

  SELECT SINGLE parva FROM usr05
    INTO p_werks
    WHERE bname = sy-uname AND
          parid = 'WRK'.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_lifnr-low.
  PERFORM f4_transportistas USING 'F'
                       CHANGING s_lifnr-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_lifnr-high.
  PERFORM f4_transportistas USING 'F'
                       CHANGING s_lifnr-high.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_trres-low.
  PERFORM f4_transportistas USING 'R'
                       CHANGING s_trres-low.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_trres-high.
  PERFORM f4_transportistas USING 'R'
                       CHANGING s_trres-high.


AT SELECTION-SCREEN.

  IF p_werks IS INITIAL.
    MESSAGE 'Obligatorio informar centro' TYPE 'E'.
    RETURN.
  ENDIF.

  IF s_budat IS INITIAL.
    MESSAGE 'Obligatorio informar fecha entrada residuo' TYPE 'E'.
    RETURN.
  ENDIF.

START-OF-SELECTION.
  PERFORM obtener_datos.
  CHECK g_error = ' '.
*END-OF-SELECTION.
  PERFORM mostrar_datos.



FORM obtener_datos.

  SELECT werks , id_entrada_residuos ,  zborrado , budat ,
         dir , ler , ztransportista , lifnr ,
         trans_residuos , zmatricula1 , zmatricula2 , xblnr ,
         ebeln , id_reg_vehiculo , zentrada
    INTO TABLE @DATA(lt_entr_res)
    FROM ztmm0006
    WHERE werks           = @p_werks   AND
          budat                 IN @s_budat   AND
          lifnr                 IN @s_lifnr   AND
          trans_residuos        IN @s_trres   AND
          ler                   IN @s_ler     AND
          zentrada              IN @s_entr.     "NLC.26.02.2025.Add nº registro en pantalla selección.


  LOOP AT lt_entr_res INTO DATA(ls_entrada).

    SELECT SINGLE matnr , brgew , ntgew , meins
      INTO @DATA(ls_ztmm0007)
    FROM ztmm0007
    WHERE zentrada = @ls_entrada-zentrada
      AND ztipo_pesada = 'F'. "NLC.26.02.2025.Seleccionamos solo las pesadas finales que son las de la MP que necesitan.

    CHECK sy-subrc = 0.

    APPEND INITIAL LINE TO gt_salida ASSIGNING FIELD-SYMBOL(<fs_entrada>).


    <fs_entrada> = CORRESPONDING #( ls_entrada ).

    <fs_entrada>-matnr      = ls_ztmm0007-matnr.
    <fs_entrada>-brgew      = ls_ztmm0007-brgew.
    <fs_entrada>-ntgew      = ls_ztmm0007-ntgew.
    <fs_entrada>-cantidad   = ls_ztmm0007-brgew - ls_ztmm0007-ntgew.
    <fs_entrada>-meins      = ls_ztmm0007-meins.
    <fs_entrada>-vbeln      = ls_entrada-xblnr.
    <fs_entrada>-pcentro    = |P{ <fs_entrada>-werks }|. " Centro propio, receptor de residuos(MP).

    <fs_entrada>-name1          = zcl_utils_hpap_pp=>get_descrip_proveedor( <fs_entrada>-lifnr ).
    <fs_entrada>-name1_transres = zcl_utils_hpap_pp=>get_descrip_proveedor( <fs_entrada>-trans_residuos ).
    <fs_entrada>-name1_pcentro  = zcl_utils_hpap_pp=>get_descrip_proveedor( <fs_entrada>-pcentro ).

    PERFORM obtener_cir USING <fs_entrada>-werks
                              'PR' "Transportista del residuo
                              <fs_entrada>-lifnr
                     CHANGING <fs_entrada>-cir.

    PERFORM obtener_nombre_tr USING <fs_entrada>-werks
                              <fs_entrada>-trans_residuos
                     CHANGING <fs_entrada>-name1_transres.


*    PERFORM obtener_cir USING <fs_entrada>-werks
*                              'TR' "Transportista del residuo
*                              <fs_entrada>-trans_residuos
*                     CHANGING <fs_entrada>-cir_transres.

    PERFORM obtener_cir USING <fs_entrada>-werks
                              'DR' "Destinatario del residuo
                              <fs_entrada>-pcentro
                     CHANGING <fs_entrada>-cir_pcentro.

    <fs_entrada>-resid_peligroso   = 'No'.
    <fs_entrada>-tp_residuo        = 'Papel y cartón'.

    <fs_entrada>-maktx = zcl_ap_material=>get_descripcion( <fs_entrada>-matnr ).

  ENDLOOP.


ENDFORM.
FORM obtener_nombre_tr USING p_werks
                       p_lifnr
              CHANGING p_nombre.

  DATA: l_lifnr TYPE lifnr.

  CHECK p_lifnr IS NOT INITIAL.

  l_lifnr = |{ p_lifnr ALPHA = IN }|.

  SELECT SINGLE nombre
    INTO @p_nombre
    FROM ztpp0065
    WHERE werks     = @p_werks     AND
          tp_gestor = 'TR' AND
          cir     = @l_lifnr     AND
          lvorm     = ' '.


ENDFORM.

FORM obtener_cir USING p_werks
                       p_tp_gestor
                       p_lifnr
              CHANGING p_cir.

  CLEAR p_cir.

  SELECT SINGLE cir
    INTO @p_cir
    FROM ztpp0065
    WHERE werks     = @p_werks     AND
          tp_gestor = @p_tp_gestor AND
          lifnr     = @p_lifnr     AND
          lvorm     = ' '.

ENDFORM.


FORM mostrar_datos.

  DATA: lr_functions TYPE REF TO cl_salv_functions_list,
        lo_column2   TYPE REF TO cl_salv_column_table,
        lo_column    TYPE REF TO cl_salv_column,
        lo_columns   TYPE REF TO cl_salv_columns_table.

  TRY.
      cl_salv_table=>factory(
        IMPORTING
          r_salv_table = gr_alv
        CHANGING
          t_table      = gt_salida ).
    CATCH cx_salv_msg.                                  "#EC NO_HANDLER
  ENDTRY.

*  gr_alv->set_screen_status(
*    pfstatus      =  'SALV_STANDARD'
*    report        =  'ZRPP0054'
*    set_functions = gr_alv->c_functions_all ) .

  DATA(gr_layout) = gr_alv->get_layout( ).
  key-report = sy-repid.
  gr_layout->set_key( key ).
  gr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  gr_layout->set_default( abap_true ).
*  gr_layout->set_initial_layout( p_lay06 ).



  lo_columns = gr_alv->get_columns( ).


  TRY.
*      lo_column2 ?= lo_columns->get_column( 'MATNR' ).
*      lo_column2->set_cell_type( if_salv_c_cell_type=>hotspot ).

      lo_column ?= lo_columns->get_column( 'LIFNR' ).
      lo_column->set_short_text( 'Prov.MP' ).
      lo_column->set_medium_text( 'Proveedor MP' ).
      lo_column->set_long_text( 'Proveedor MP' ).

    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'NAME1' ).
      lo_column->set_short_text( 'N.prov.MP' ).
      lo_column->set_medium_text( 'Nombre proveedor MP' ).
      lo_column->set_long_text( 'Nombre proveedor MP' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'CIR' ).
      lo_column->set_short_text( 'CIR pro.MP' ).
      lo_column->set_medium_text( 'CIR proveedor MP' ).
      lo_column->set_long_text( 'CIR proveedor MP' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'TRANS_RESIDUOS' ).
      lo_column->set_short_text( 'CIR tra.re' ).
      lo_column->set_medium_text( 'CIR trans. residuos' ).
      lo_column->set_long_text( 'CIR trans. residuos' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'NAME1_TRANSRES' ).
      lo_column->set_short_text( 'N.trans.re' ).
      lo_column->set_medium_text( 'Nom.transp.residuos' ).
      lo_column->set_long_text( 'Nom.transportista residuos' ).
    CATCH cx_root .
  ENDTRY.

*  TRY.
*      lo_column ?= lo_columns->get_column( 'CIR_TRANSRES' ).
*      lo_column->set_short_text( 'CIR tra.re' ).
*      lo_column->set_medium_text( 'CIR trans.residuos' ).
*      lo_column->set_long_text( 'CIR transportista residuos' ).
*    CATCH cx_root .
*  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'PCENTRO' ).
      lo_column->set_short_text( 'Dest.resid' ).
      lo_column->set_medium_text( 'Destinat. residuos' ).
      lo_column->set_long_text( 'Destinatario de residuos' ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column ?= lo_columns->get_column( 'NAME1_PCENTRO' ).
      lo_column->set_short_text( 'N.dest.res' ).
      lo_column->set_medium_text( 'N.destinat.residuos' ).
      lo_column->set_long_text( 'Nombre destinatario residuos' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'CIR_PCENTRO' ).
      lo_column->set_short_text( 'CIR des.re' ).
      lo_column->set_medium_text( 'CIR destin.residuos' ).
      lo_column->set_long_text( 'CIR destinatario residuos' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'ZBORRADO' ).
      lo_column->set_short_text( 'Ind.borrad' ).
      lo_column->set_medium_text( 'Indic. borrado' ).
      lo_column->set_long_text( 'Indic. borrado' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'BRGEW' ).
      lo_column->set_short_text( 'Peso bruto' ).
      lo_column->set_medium_text( 'Peso bruto' ).
      lo_column->set_long_text( 'Peso bruto' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'NTGEW' ).
      lo_column->set_short_text( 'Peso neto' ).
      lo_column->set_medium_text( 'Peso neto' ).
      lo_column->set_long_text( 'Peso neto' ).
    CATCH cx_root .
  ENDTRY.
  TRY.
      lo_column ?= lo_columns->get_column( 'CANTIDAD' ).
      lo_column->set_short_text( 'Cantidad' ).
      lo_column->set_medium_text( 'Cantidad' ).
      lo_column->set_long_text( 'Cantidad' ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column ?= lo_columns->get_column( 'ZMATRICULA1' ).
      lo_column->set_short_text( 'Matrícula' ).
      lo_column->set_medium_text( 'Matrícula' ).
      lo_column->set_long_text( 'Matrícula' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'ZMATRICULA2' ).
      lo_column->set_short_text( 'Matrí.remo' ).
      lo_column->set_medium_text( 'Matrícula remolque' ).
      lo_column->set_long_text( 'Matrícula remolque' ).
    CATCH cx_root .
  ENDTRY.


  TRY.
      lo_column ?= lo_columns->get_column( 'VBELN' ).
      lo_column->set_short_text( 'Albarán' ).
      lo_column->set_medium_text( 'Albarán de entrega' ).
      lo_column->set_long_text( 'Albarán de entrega' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'RESID_PELIGROSO' ).
      lo_column->set_short_text( 'Res.peligr' ).
      lo_column->set_medium_text( 'Residuo peligroso' ).
      lo_column->set_long_text( 'Residuo peligroso' ).
    CATCH cx_root .
  ENDTRY.

  TRY.
      lo_column ?= lo_columns->get_column( 'TP_RESIDUO' ).
      lo_column->set_short_text( 'Tp.residuo' ).
      lo_column->set_medium_text( 'Tipo residuo' ).
      lo_column->set_long_text( 'Tipo residuo' ).
    CATCH cx_root .
  ENDTRY.

*-- events
  gr_events = gr_alv->get_event( ).
  CREATE OBJECT event_handler.
  SET HANDLER event_handler->on_user_command FOR gr_events.
*  SET HANDLER event_handler->on_link_click FOR gr_events.

**... §3.1 activate ALV generic Functions
  lr_functions = gr_alv->get_functions( ).
  lr_functions->set_all( 'X' ).

*-- Selection
*  gr_selections = gr_alv->get_selections( ).
*  gr_selections->set_selection_mode(
*                     if_salv_c_selection_mode=>row_column ).

  DATA:   lo_cols_tab TYPE REF TO cl_salv_columns_table.

  lo_cols_tab = gr_alv->get_columns( ).
  lo_cols_tab->set_optimize( ).
*  TRY.
*      lo_cols_tab->set_color_column( 'COLOR' ).
*
*    CATCH cx_salv_data_error.                           "#EC NO_HANDLER
*  ENDTRY.


  gr_alv->display( ).

ENDFORM.

FORM obtener_id_residuos USING p_werks TYPE werks_d
                      CHANGING p_id_residuos TYPE zpp_num_entrada_residuos.

  DATA l_rango_ids TYPE nrobj.

  CASE p_werks.
    WHEN '3000'. l_rango_ids = 'ZPP_RE3000'.
    WHEN '3020'. l_rango_ids = 'ZPP_RE3020'.
    WHEN OTHERS.
  ENDCASE.

  CALL FUNCTION 'NUMBER_GET_NEXT'
    EXPORTING
      nr_range_nr             = '01'
      object                  = l_rango_ids
      quantity                = '1'
*     SUBOBJECT               = ' '
*     TOYEAR                  = '0000'
      ignore_buffer           = 'X'
    IMPORTING
      number                  = p_id_residuos
*     QUANTITY                =
*     RETURNCODE              =
    EXCEPTIONS
      interval_not_found      = 1
      number_range_not_intern = 2
      object_not_found        = 3
      quantity_is_0           = 4
      quantity_is_not_1       = 5
      interval_overflow       = 6
      buffer_overflow         = 7
      OTHERS                  = 8.
  IF sy-subrc <> 0.
    CLEAR p_id_residuos.
  ENDIF.


ENDFORM.

FORM f4_transportistas USING p_tp_transp
                     CHANGING p_lifnr.

  DATA: lt_return        TYPE TABLE OF ddshretval,
        lt_dynpro_fields TYPE STANDARD TABLE OF dynpread.

  CASE p_tp_transp.
    WHEN 'F'. "Transportista de facturación

      SELECT  name1 , lifnr
*  SELECT lifnr , name1
     INTO TABLE @DATA(lt_transport)
     FROM zvpp_transportis
     WHERE sort2 = 'TRANSP'.

    WHEN 'R'. "Transportista de residuos

      SELECT  name1 , lifnr
*  SELECT lifnr , name1
      INTO TABLE @lt_transport
      FROM zvpp_trans_resid
      WHERE sort2 = 'TRANSP RESIDUOS'.


    WHEN OTHERS.
  ENDCASE.
*  SELECT lifnr , name1
*    INTO TABLE @DATA(gs_data_residuos)
*    FROM zvpp_transportis
*    WHERE sort2 = 'TRANSP RESIDUOS'.

*  SELECT  name1 , lifnr
**  SELECT lifnr , name1
*  INTO TABLE @DATA(lt_transport)
*  FROM zvpp_trans_resid
*  WHERE sort2 = @l_string.

  CHECK lt_transport IS NOT INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
*     retfield        = 'TRANS_RESIDUOS'
      retfield        = 'GS_RESIDUOS-TRANS_RESIDUOS'
      value_org       = 'S'
    TABLES
      value_tab       = lt_transport
      return_tab      = lt_return
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.

  IF sy-subrc = 0.
    TRY.
        DATA(ls_selec) = lt_return[ 1 ] .
        p_lifnr = |{ ls_selec-fieldval ALPHA = OUT }|.

      CATCH cx_root .
    ENDTRY.

  ENDIF.


ENDFORM.
