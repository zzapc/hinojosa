*&---------------------------------------------------------------------*
*&  Include           ZRPP0030_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  LANZAR_CALCULO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_AUFNR  text
*----------------------------------------------------------------------*
FORM lanzar_calculo  USING    p_aufnr.

  DATA: wa_aufk   TYPE aufk,
        lv_plnbez TYPE matnr,
        lv_matkl  TYPE matkl.
  DATA: lv_negativo TYPE xfeld.

* verificamos que la orden existe
  SELECT SINGLE * FROM aufk
    INTO wa_aufk
    WHERE aufnr = p_aufnr.

  IF sy-subrc <> 0.
    MESSAGE i000(zpp) WITH text-001.
  ELSE.
    SELECT SINGLE matkl plnbez FROM mara
      INNER JOIN afko ON mara~matnr = afko~plnbez
      INTO ( lv_matkl, lv_plnbez )
      WHERE aufnr = p_aufnr.

*    PERFORM obtener_tolerancias USING lv_matkl lv_plnbez
*                                CHANGING wa_aufk
*                                         lv_negativo.


    IF lv_negativo IS INITIAL.
      PERFORM actualizar_datos USING  wa_aufk.
    ELSE.
      MESSAGE i000(zpp) WITH text-005.
    ENDIF.
  ENDIF.

ENDFORM.                    " LANZAR_CALCULO

*&---------------------------------------------------------------------*
*&      Form  calcular_fila
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_AUFNR  text
*----------------------------------------------------------------------*
FORM calcular_fila  USING    p_aufk TYPE zspp0030_orden_alv
                    CHANGING  p_aufk_calc TYPE zspp0030_orden_calc_alv
                              pt_bapiret2 TYPE bapiret2_t.

  DATA: wa_aufk   TYPE aufk,
        lv_plnbez TYPE matnr,
        lv_matkl  TYPE matkl.
  DATA: lv_negativo TYPE xfeld.

  CLEAR: pt_bapiret2.
  MOVE-CORRESPONDING p_aufk TO p_aufk_calc.
* verificamos que la orden existe
*  SELECT SINGLE * FROM aufk
*    INTO wa_aufk
*    WHERE aufnr = p_aufnr.

*  IF sy-subrc <> 0.
*    MESSAGE i000(zpp) WITH text-001.
*  ELSE.
  SELECT SINGLE matkl FROM mara
    INTO ( lv_matkl )
    WHERE matnr = p_aufk-plnbez.

*  PERFORM obtener_tolerancias USING lv_matkl p_aufk-plnbez
*                              CHANGING wa_aufk
*                                       lv_negativo.

  PERFORM obtener_tolerancias  USING lv_matkl
                            CHANGING p_aufk_calc
                                     pt_bapiret2.

  IF pt_bapiret2 IS INITIAL.
    PERFORM actualizar_fila USING p_aufk_calc
                            CHANGING pt_bapiret2.
  ENDIF.

*
*  IF lv_negativo IS INITIAL.
*    PERFORM actualizar_datos USING  wa_aufk.
*  ELSE.
*    MESSAGE i000(zpp) WITH text-005.
*  ENDIF.
**  ENDIF.

ENDFORM.                    " LANZAR_CALCULO

*&---------------------------------------------------------------------*
*&      Form  OBTENER_TOLERANCIAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM obtener_tolerancias USING p_matkl
*                              p_plnbez "DBM 04.09.2017
*                         CHANGING wa_aufk TYPE aufk "DBM 04.09.2017
*                                  lv_negativo TYPE xfeld. "DBM 04.09.2017
                          CHANGING ps_aufk_calc TYPE zspp0030_orden_calc_alv
                                   pt_bapiret2 TYPE bapiret2_t.

  DATA: wa_ztpp0011       TYPE                   ztpp0011,
        wa_mara           TYPE                   mara,
        t_marm            TYPE STANDARD TABLE OF marm,
        wa_marm           TYPE                   marm,
        lv_zzlargfab      TYPE                   zzlargfab,
        lv_zzacnhofab	    TYPE                   zzacnhofab,
        lv_zzlargminfab	  TYPE                   zzlargminfab,
        lv_zzlargmaxfab	  TYPE                   zzlargmaxfab,
        lv_zzanchminfab	  TYPE                   zanchminfab,
        lv_zzanchmaxfab	  TYPE                   zzanchmaxfab,
        lv_zzpesoteopl    TYPE                   zzpesoteopl,
        lv_zzpesoteomaxpl	TYPE                   zzpesoteomaxpl,
        lv_zzpesoteominpl	TYPE                   zzpesoteominpl,
        lv_zzespmaxpl	    TYPE                   zzespmaxpl,
        lv_zzespminpl	    TYPE                   zzespminpl,
        lv_par1           TYPE                   sy-msgv1,
        lv_par2           TYPE                   sy-msgv2,
        lv_par3           TYPE                   sy-msgv3,
        lv_zzgramajeinput TYPE                   zzgramajeinput,
        ls_bapiret2       TYPE bapiret2.


  SELECT SINGLE * FROM mara
    INTO wa_mara
    WHERE matnr = ps_aufk_calc-plnbez. "p_plnbez. "DBM 04.09.2017

  SELECT * FROM marm
    INTO TABLE t_marm
    WHERE matnr = ps_aufk_calc-plnbez. "p_plnbez. "DBM 04.09.2017


  lv_par1 = |{ ps_aufk_calc-aufnr ALPHA = OUT }|.
  WRITE ps_aufk_calc-plnbez TO lv_par3.

  CALL FUNCTION 'ZPP_DIMENSIONES'
    EXPORTING
      i_werks       = ps_aufk_calc-werks "wa_aufk-werks
      i_matkl       = p_matkl
      i_matnr       = ps_aufk_calc-plnbez "p_plnbez
      i_kunnr       = ps_aufk_calc-zzkunnr4 "wa_aufk-zzkunnr4
    IMPORTING
      e_dimensiones = wa_ztpp0011.

* Largo a fabricar (mm) = Largo neto (mm) * (1 + Contracción (%))
  lv_zzlargfab = wa_mara-zzplalgnt * ( 1 + wa_ztpp0011-zcontr / 100 ).

  IF lv_zzlargfab > 0.
*    wa_aufk-zzlargfab = lv_zzlargfab.
    ps_aufk_calc-zzlargfab = lv_zzlargfab.
  ELSE.
*    lv_negativo = 'X'.
*    lv_par1 = ps_aufk_calc-aufnr.
*    write lv_zzlargfab to lv_par2.
    lv_par2 = |{ lv_zzlargfab NUMBER = USER }|.
*    lv_par3 = ps_aufk_calc-plnbez.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 230
        par1   = lv_par1
        par2   = lv_par2
        par3   = lv_par3
      IMPORTING
        return = ls_bapiret2.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ENDIF.


* Largo mínimo a fabricar (mm) = Largo a fabricar (mm) * (1 + Tolerancia inferior largo (%))
*  lv_zzlargminfab = wa_aufk-zzlargfab * ( 1 + wa_ztpp0011-ztolilar / 100 ).
  lv_zzlargminfab = ps_aufk_calc-zzlargfab * ( 1 + wa_ztpp0011-ztolilar / 100 ).

  IF lv_zzlargminfab > 0.
*    wa_aufk-zzlargminfab = lv_zzlargminfab.
    ps_aufk_calc-zzlargminfab = lv_zzlargminfab.
  ELSE.
*    lv_negativo = 'X'.
    lv_par2 = |{ lv_zzlargminfab NUMBER = USER }|.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 231
        par1   = lv_par1
        par2   = lv_par2
        par3   = lv_par3
      IMPORTING
        return = ls_bapiret2.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ENDIF.

* Largo máximo a fabricar (mm) = Largo a fabricar (mm) * (1 + Tolerancia largo (%))
*  lv_zzlargmaxfab  = wa_aufk-zzlargfab * ( 1 + wa_ztpp0011-ztolslar / 100 ).
  lv_zzlargmaxfab  = ps_aufk_calc-zzlargfab * ( 1 + wa_ztpp0011-ztolslar / 100 ).

  IF lv_zzlargmaxfab > 0.
*    wa_aufk-zzlargmaxfab = lv_zzlargmaxfab.
    ps_aufk_calc-zzlargmaxfab = lv_zzlargmaxfab.
  ELSE.
*    lv_negativo = 'X'.
    lv_par2 = |{ lv_zzlargmaxfab NUMBER = USER }|.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 232
        par1   = lv_par1
        par2   = lv_par2
        par3   = lv_par3
      IMPORTING
        return = ls_bapiret2.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ENDIF.

* Ancho a fabricar (mm) = Ancho neto (mm)
  lv_zzacnhofab = wa_mara-zzplaannt.

  IF lv_zzacnhofab > 0.
*    wa_aufk-zzacnhofab = lv_zzacnhofab.
    ps_aufk_calc-zzacnhofab = lv_zzacnhofab.
  ELSE.
*    lv_negativo = 'X'.
    lv_par2 = |{ lv_zzacnhofab NUMBER = USER }|.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 233
        par1   = lv_par1
        par2   = lv_par2
        par3   = lv_par3
      IMPORTING
        return = ls_bapiret2.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ENDIF.

* Ancho mínimo a fabricar (mm) = Ancho a fabricar (mm) – Tolerancia ancho (mm))
*  lv_zzanchminfab = wa_aufk-zzacnhofab - wa_ztpp0011-ztolanc.
  lv_zzanchminfab = ps_aufk_calc-zzacnhofab - wa_ztpp0011-ztolanc.

  IF lv_zzanchminfab > 0.
*    wa_aufk-zzanchminfab = lv_zzanchminfab.
    ps_aufk_calc-zzanchminfab = lv_zzanchminfab.
  ELSE.
*    lv_negativo = 'X'.
    lv_par2 = |{ lv_zzanchminfab NUMBER = USER }|.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 234
        par1   = lv_par1
        par2   = lv_par2
        par3   = lv_par3
      IMPORTING
        return = ls_bapiret2.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ENDIF.


* Ancho máximo a fabricar (mm) = Ancho a fabricar (mm) + Tolerancia ancho (mm))
*  lv_zzanchmaxfab = wa_aufk-zzacnhofab + wa_ztpp0011-ztolanc.
  lv_zzanchmaxfab = ps_aufk_calc-zzacnhofab + wa_ztpp0011-ztolanc.

  IF lv_zzanchmaxfab > 0.
*    wa_aufk-zzanchmaxfab = lv_zzanchmaxfab.
    ps_aufk_calc-zzanchmaxfab = lv_zzanchmaxfab.
  ELSE.
*    lv_negativo = 'X'.
    lv_par2 = |{ lv_zzanchmaxfab NUMBER = USER }|.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 235
        par1   = lv_par1
        par2   = lv_par2
        par3   = lv_par3
      IMPORTING
        return = ls_bapiret2.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ENDIF.


* Peso teórico por plancha
  READ TABLE t_marm INTO wa_marm WITH KEY meinh = 'GR'.
  IF sy-subrc <> 0.
    READ TABLE t_marm INTO wa_marm WITH KEY meinh = 'KG'.
  ENDIF.

  IF wa_marm IS NOT INITIAL.
    lv_zzpesoteopl = wa_marm-umren / wa_marm-umrez.
  ENDIF.

  CASE p_matkl.
    WHEN '90210'.
      IF wa_marm-meinh <> 'GR'.
        lv_zzpesoteopl = lv_zzpesoteopl * 1000.
      ENDIF.

    WHEN '90220'.
      IF wa_marm-meinh <> 'KG'.
        lv_zzpesoteopl = lv_zzpesoteopl / 1000.
      ENDIF.
  ENDCASE.


  IF lv_zzpesoteopl > 0.
*    wa_aufk-zzpesoteopl = lv_zzpesoteopl.
    ps_aufk_calc-zzpesoteopl = lv_zzpesoteopl.
  ELSE.
*    lv_negativo = 'X'.
    lv_par2 = |{ lv_zzpesoteopl NUMBER = USER }|.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 236
        par1   = lv_par1
        par2   = lv_par2
        par3   = lv_par3
      IMPORTING
        return = ls_bapiret2.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ENDIF.


* Peso teórico máximo = Peso teórico unitario * (1 + Tolerancia Peso (%))
*  lv_zzpesoteomaxpl =  wa_aufk-zzpesoteopl * ( 1 + wa_ztpp0011-ztolpes / 100 ).
  lv_zzpesoteomaxpl =  ps_aufk_calc-zzpesoteopl * ( 1 + wa_ztpp0011-ztolpes / 100 ).

  IF lv_zzpesoteomaxpl > 0.
*    wa_aufk-zzpesoteomaxpl = lv_zzpesoteomaxpl.
    ps_aufk_calc-zzpesoteomaxpl = lv_zzpesoteomaxpl.
  ELSE.
*    lv_negativo = 'X'.
    lv_par2 = |{ lv_zzpesoteomaxpl NUMBER = USER }|.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 237
        par1   = lv_par1
        par2   = lv_par2
        par3   = lv_par3
      IMPORTING
        return = ls_bapiret2.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ENDIF.



* Peso teórico mínimo = Peso teórico unitario * (1 - Tolerancia Peso (%))
*  lv_zzpesoteominpl = wa_aufk-zzpesoteopl * ( 1 - wa_ztpp0011-ztolpes / 100 ) .
  lv_zzpesoteominpl = ps_aufk_calc-zzpesoteopl * ( 1 - wa_ztpp0011-ztolpes / 100 ) .

  IF lv_zzpesoteominpl > 0.
*    wa_aufk-zzpesoteominpl = lv_zzpesoteominpl.
    ps_aufk_calc-zzpesoteominpl = lv_zzpesoteominpl.
  ELSE.
*    lv_negativo = 'X'.
    lv_par2 = |{ lv_zzpesoteominpl NUMBER = USER }|.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 238
        par1   = lv_par1
        par2   = lv_par2
        par3   = lv_par3
      IMPORTING
        return = ls_bapiret2.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ENDIF.

* Espesor máximo = Espesor nominal + Tolerancia espesor (mm)
  lv_zzespmaxpl = wa_mara-zzespesor + wa_ztpp0011-ztolesp.

  IF lv_zzespmaxpl > 0.
*   wa_aufk-zzespmaxpl = lv_zzespmaxpl.
    ps_aufk_calc-zzespmaxpl = lv_zzespmaxpl.
  ELSE.
*    lv_negativo = 'X'.
    lv_par2 = |{ lv_zzespmaxpl NUMBER = USER }|.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 239
        par1   = lv_par1
        par2   = lv_par2
        par3   = lv_par3
      IMPORTING
        return = ls_bapiret2.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ENDIF.

* Espesor mínimo = Espesor nominal – Tolerancia espesor (mm)
  lv_zzespminpl = wa_mara-zzespesor - wa_ztpp0011-ztolesp.

  IF lv_zzespminpl > 0.
*    wa_aufk-zzespminpl = lv_zzespminpl.
    ps_aufk_calc-zzespminpl = lv_zzespminpl.
  ELSE.
*    lv_negativo = 'X'.
    lv_par2 = |{ lv_zzespminpl NUMBER = USER }|.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'ZPP'
        number = 240
        par1   = lv_par1
        par2   = lv_par2
        par3   = lv_par3
      IMPORTING
        return = ls_bapiret2.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ENDIF.

* Gramaje input
*  Gramaje Input = Gramaje Plancha (MARA-ZZGRAMPLA) * (1 - Tolerancia Peso %( ZTPP0011-ZTOLPES)/100)
  lv_zzgramajeinput = wa_mara-zzgrampla * ( 1 - wa_ztpp0011-zcontr / 100 ).
  ps_aufk_calc-zzgramajeinput = lv_zzgramajeinput.

ENDFORM.                    " OBTENER_TOLERANCIAS

*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM actualizar_datos USING  wa_aufk TYPE aufk.

  UPDATE aufk FROM wa_aufk.

  IF sy-subrc = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

    MESSAGE i000(zpp) WITH text-002.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
    MESSAGE i000(zpp) WITH text-003.
  ENDIF.


*  DATA: wa_extension_in TYPE          bapiparex ,
*        it_extension_in TYPE TABLE OF bapiparex,
*        wa_bapi_te_aufk TYPE          bapi_te_aufk,
*        it_methods      TYPE TABLE OF bapi_alm_order_method,
*        wa_methods      TYPE          bapi_alm_order_method,
*        it_header       TYPE TABLE OF bapi_alm_order_headers_i,
*        wa_header       TYPE          bapi_alm_order_headers_i,
*        it_header_up    TYPE TABLE OF bapi_alm_order_headers_up,
*        itab_return     TYPE TABLE OF bapiret2,
*        itab_numbers    TYPE TABLE OF bapi_alm_numbers.
*
*  CONSTANTS: c_refnum TYPE ifrefnum VALUE '000001',
*             c_header TYPE obj_typ VALUE 'HEADER',
*             c_change TYPE swo_method VALUE 'CHANGE',
*             c_save   TYPE swo_method VALUE 'SAVE'.
*
** Order header - order number.
*  wa_header-orderid =  p_aufnr.
*  APPEND wa_header TO it_header.
*
*  wa_bapi_te_aufk-orderid = p_aufnr. " Order ID
*  wa_bapi_te_aufk-zkunnr1   = '1'. " Custom field
**  wa_extension_in+30(960) = BAPI_TE_AUFK.
*
*
** Move "updated needed" data to extension_in table.
*  wa_extension_in-structure = 'BAPI_TE_AUFK'.
** wa_extension_in-valuepart1 = wa_bapi_te_aufk.
*  wa_extension_in-valuepart1(12)   = wa_bapi_te_aufk-orderid.
*  wa_extension_in-valuepart1+12(10) = wa_bapi_te_aufk-zkunnr1.
*  APPEND wa_extension_in TO it_extension_in.
*
*  wa_methods-objecttype    = space.
*  wa_methods-method        = c_save.
*  wa_methods-objectkey     =  space.
*  APPEND wa_methods      TO it_methods .
*
*  wa_methods-refnumber     = c_refnum.
*  wa_methods-objecttype    = c_header.
*  wa_methods-method        = c_change.
*  wa_methods-objectkey     =  p_aufnr.
*  APPEND wa_methods      TO it_methods .
*
*
** call the BAPI function to maintain the Order:
*  CALL FUNCTION 'BAPI_ALM_ORDER_MAINTAIN'
*    TABLES
*      it_methods   = it_methods
*      it_header    = it_header
*      it_header_up = it_header_up
*      extension_in = it_extension_in
*      return       = itab_return
*      et_numbers   = itab_numbers.
*
*  IF sy-subrc = 0.
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*      EXPORTING
*        wait = 'X'.
*
*    IF sy-subrc = 0.
*      WRITE: 'Successful'.
*    ENDIF.
*  ELSE.
*    WRITE: / 'No data changed'.
*  ENDIF.


ENDFORM.                    " ACTUALIZAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  VALIDACIONES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_AUFNR  text
*----------------------------------------------------------------------*
FORM validaciones  USING    p_aufnr.
*  DATA: lv_auart TYPE auart.
*
*  SELECT SINGLE auart FROM aufk
*    INTO lv_auart
*    WHERE aufnr = p_aufnr.
*
*  IF lv_auart <> 'ZC01'.
*    MESSAGE i000(zpp) WITH text-004.
*  ENDIF.
ENDFORM.                    " VALIDACIONES
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_data.
*
*
  DATA: lv_exclude      TYPE xfeld,
        lt_status       TYPE STANDARD TABLE OF bapi_itob_status,
        lt_user_status  TYPE STANDARD TABLE OF bapi_itob_status,
        lv_stat_text    TYPE                   zstatus_txt,
        lv_excluir      TYPE xfeld,
        lv_incluir      TYPE xfeld,
        lt_pp0030_orden_alv TYPE zttpp0030_orden_alv.

  SELECT DISTINCT a~aufnr, a~auart, a~erdat, a~werks, b~plnbez, a~astnr, b~gstrp, b~gltrp, a~zzkunnr4, a~objnr
    INTO CORRESPONDING FIELDS OF TABLE @gt_pp0030_orden_alv
    FROM aufk AS a
    INNER JOIN afko AS b ON a~aufnr = b~aufnr
*    LEFT JOIN jest AS c ON a~objnr = c~objnr AND c~inact <> 'X'
    WHERE auart = 'ZC01' AND
          a~aufnr IN @s_aufnr AND
          plnbez IN @s_plnbez AND
*          astnr IN @s_astnr AND
          gstrp IN @s_gstrp AND
          gltrp IN @s_gltrp." AND
*          c~stat IN @s_stat.

*  LOOP AT gt_pp0030_orden_alv ASSIGNING FIELD-SYMBOL(<fs_data>).
*    CLEAR: lv_exclude.
*    SELECT a~stat, b~txt04
*      INTO TABLE @DATA(lt_stat)
*      FROM jest AS a
*      INNER JOIN tj02t AS b ON a~stat = b~istat
*      WHERE objnr = @<fs_data>-objnr AND
*                    inact <> 'X' AND
*                    spras = @sy-langu.
*
*
*
** DBM - No se deben incluir en los resultados las órdenes liberadas
*    READ TABLE lt_stat WITH KEY stat = 'I0002' TRANSPORTING NO FIELDS.
*    CHECK sy-subrc <> 0.
*    LOOP AT lt_stat INTO DATA(ls_stat).
*      CONCATENATE <fs_data>-stat_txt ls_stat-txt04 INTO <fs_data>-stat_txt SEPARATED BY space.
*    ENDLOOP.
*
*    APPEND <fs_data> TO lt_pp0030_orden_alv.
*
*  ENDLOOP.



*  Recorrer cada registro y buscar los posibles estados
  LOOP AT gt_pp0030_orden_alv ASSIGNING FIELD-SYMBOL(<fs_data>).
    CLEAR: lt_status, lv_stat_text, lv_excluir, lv_incluir.

    SELECT a~stat, b~txt04
      INTO TABLE @DATA(lt_stat)
      FROM jest AS a
      INNER JOIN tj02t AS b ON a~stat = b~istat
      WHERE objnr = @<fs_data>-objnr AND
                    inact <> 'X' AND
                    spras = @sy-langu.

    LOOP AT lt_stat INTO DATA(ls_stat)." WHERE status IN so_statt.
      IF ls_stat-txt04 IN s_stat and ls_stat-stat <> 'I0002'.
        lv_incluir = abap_true.
      ENDIF.
      CONCATENATE <fs_data>-stat_txt ls_stat-txt04 INTO <fs_data>-stat_txt SEPARATED BY space.
    ENDLOOP.

    IF s_stext IS NOT INITIAL.
      LOOP AT lt_stat INTO ls_stat WHERE txt04 IN s_stext.
        lv_excluir = abap_true.
      ENDLOOP.
    ENDIF.

    IF lv_incluir = abap_true AND lv_excluir IS INITIAL AND ( <fs_data>-stat_txt IS NOT INITIAL OR s_stat IS INITIAL ).
      APPEND <fs_data> TO lt_pp0030_orden_alv.
    ENDIF.
  ENDLOOP.

  gt_pp0030_orden_alv = lt_pp0030_orden_alv.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM display_alv .

  DATA: lr_selections TYPE REF TO cl_salv_selections.
  DATA: lr_events    TYPE REF TO cl_salv_events_table,
        lr_layout    TYPE REF TO cl_salv_layout,
        lv_cont_name TYPE        string,
        ls_key       TYPE        salv_s_layout_key.

**... Funciones del ALV
  DATA: lr_functions TYPE REF TO cl_salv_functions_list,
        l_text       TYPE        string.

  TRY.
      cl_salv_table=>factory(
      EXPORTING
      list_display = abap_false
        IMPORTING
          r_salv_table   = gr_table

        CHANGING
          t_table        = gt_pp0030_orden_alv ).
    CATCH cx_salv_msg.                                  "#EC NO_HANDLER
  ENDTRY.


  gr_table->set_screen_status(  pfstatus      =  'SALV_FULLSCREEN'
                                report        =  sy-repid
                                set_functions = gr_table->c_functions_all ).

**... Configurar las columnas
  DATA: lr_columns TYPE REF TO cl_salv_columns,
        lr_column  TYPE REF TO cl_salv_column_table.

**... Definir método de selección
  lr_selections = gr_table->get_selections( ).
  lr_selections->set_selection_mode( if_salv_c_selection_mode=>row_column ).

*... Eventos

  lr_events = gr_table->get_event( ).
  CREATE OBJECT gr_events.

*... USER_COMMAND
  SET HANDLER gr_events->on_user_command FOR lr_events.

*... Definir layout
  lr_layout = gr_table->get_layout( ).
  ls_key-report = sy-repid.
  lr_layout->set_key( ls_key ).
  lr_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lr_layout->set_default( abap_true ).

**... Mostrar el ALV
  gr_table->display( ).

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CALCULAR_SELECCION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM calcular_seleccion .

  DATA: lr_selections     TYPE REF TO cl_salv_selections,
        lt_rows           TYPE        salv_t_row,
        lv_row            TYPE        i,
        ls_row,
        ls_bapiret2       TYPE bapiret2,
        lt_bapiret2       TYPE bapiret2_t,

        ls_fila_calculada TYPE zspp0030_orden_calc_alv.

  FIELD-SYMBOLS: <fs_print_table>, <fs_row>.
  gr_table->get_metadata( ).
  lr_selections = gr_table->get_selections( ).
  lt_rows = lr_selections->get_selected_rows( ).

  CLEAR: gt_bapiret2_final, gt_pp0030_orden_calc_alv.
* DBM 02.10.2017 - Comentado
  IF lt_rows IS NOT INITIAL.
    LOOP AT lt_rows INTO lv_row.
      READ TABLE gt_pp0030_orden_alv INTO DATA(ls_fila) INDEX lv_row.
      IF sy-subrc = 0.
        CLEAR: lt_bapiret2, ls_fila_calculada.
        PERFORM calcular_fila USING ls_fila
                              CHANGING ls_fila_calculada
                                       lt_bapiret2.
        IF lt_bapiret2 IS INITIAL.
          APPEND ls_fila_calculada TO gt_pp0030_orden_calc_alv.
        ELSE.
          APPEND LINES OF lt_bapiret2 TO gt_bapiret2_final.
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF gt_pp0030_orden_calc_alv IS NOT INITIAL.
      CALL SCREEN '0100'.
    ELSE.
      IF gt_bapiret2_final IS NOT INITIAL.
        CALL FUNCTION 'FINB_BAPIRET2_DISPLAY'
          EXPORTING
            it_message = gt_bapiret2_final.
      ENDIF.
    ENDIF.

  ELSE.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  D0100_PBO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM d0100_pbo .
  DATA: lr_functions TYPE REF TO cl_salv_functions_list,
        l_text       TYPE string,
        l_icon       TYPE string,
        lr_columns   TYPE REF TO cl_salv_columns,
        lr_column    TYPE REF TO cl_salv_column_table.


  IF gr_container IS NOT BOUND.
    IF cl_salv_table=>is_offline( ) EQ if_salv_c_bool_sap=>false.
      CREATE OBJECT gr_container
        EXPORTING
          container_name = 'CONTAINER'.
    ENDIF.

    TRY.
        cl_salv_table=>factory(
          EXPORTING
            r_container    = gr_container
            container_name = 'CONTAINER'
          IMPORTING
            r_salv_table   = gr_table_calc
          CHANGING
            t_table        = gt_pp0030_orden_calc_alv ).
      CATCH cx_salv_msg.                                "#EC NO_HANDLER
    ENDTRY.

    lr_functions = gr_table_calc->get_functions( ).
    lr_functions->set_all( abap_true ).



    lr_columns = gr_table_calc->get_columns( ).
    lr_columns->set_optimize( abap_true ).

*    perform set_columns_technical using lr_columns.

    gr_table_calc->display( ).
  else.
    gr_table_calc->refresh( ).
  ENDIF.

  IF gt_bapiret2_final IS NOT INITIAL.
    CALL FUNCTION 'FINB_BAPIRET2_DISPLAY'
      EXPORTING
        it_message = gt_bapiret2_final.
  ENDIF.

ENDFORM.

FORM d0100_pai .

  CASE g_okcode.
    WHEN 'BACK' OR 'EXIT' OR 'CANC'.
      LEAVE TO SCREEN 0.
  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_FILA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_AUFK_CALC  text
*      <--P_PT_BAPIRET2  text
*----------------------------------------------------------------------*
FORM actualizar_fila  USING    p_aufk_calc TYPE zspp0030_orden_calc_alv
                      CHANGING pt_bapiret2 TYPE bapiret2_t.

  DATA: lv_par1     TYPE                   sy-msgv1,
        lv_par2     TYPE                   sy-msgv2,
        lv_par3     TYPE                   sy-msgv3,
        ls_bapiret2 TYPE bapiret2.

  CLEAR: pt_bapiret2.

  CALL FUNCTION 'ENQUEUE_ESORDER'
    EXPORTING
      mode_aufk      = 'E'
      mandt          = sy-mandt
      aufnr          = p_aufk_calc-aufnr
      x_aufnr        = 'X'
    EXCEPTIONS
      foreign_lock   = 1
      system_failure = 2
      OTHERS         = 3.

  IF sy-subrc <> 0.
    ls_bapiret2-id = sy-msgid.
    ls_bapiret2-type = sy-msgty.
    ls_bapiret2-number = sy-msgno.
    ls_bapiret2-message_v1 = sy-msgv1.
    ls_bapiret2-message_v2 = sy-msgv2.
    ls_bapiret2-message_v3 = sy-msgv3.
    ls_bapiret2-message_v4 = sy-msgv4.
    APPEND ls_bapiret2 TO pt_bapiret2.
  ELSE.

    UPDATE aufk SET zzlargfab = p_aufk_calc-zzlargfab zzlargminfab = p_aufk_calc-zzlargminfab
                zzlargmaxfab = p_aufk_calc-zzlargmaxfab zzacnhofab = p_aufk_calc-zzacnhofab
                zzanchminfab = p_aufk_calc-zzanchminfab zzanchmaxfab = p_aufk_calc-zzanchmaxfab
                zzpesoteopl = p_aufk_calc-zzpesoteopl zzpesoteomaxpl = p_aufk_calc-zzpesoteomaxpl
                zzpesoteominpl = p_aufk_calc-zzpesoteominpl zzespmaxpl = p_aufk_calc-zzespmaxpl
                zzespminpl = p_aufk_calc-zzespminpl
                WHERE aufnr = p_aufk_calc-aufnr.

    IF sy-subrc = 0.
      COMMIT WORK AND WAIT.
      CALL FUNCTION 'DEQUEUE_ESORDER'
        EXPORTING
          aufnr   = p_aufk_calc-aufnr
          x_aufnr = 'X'.
    ELSE.
      ROLLBACK WORK.
      lv_par1 = |{ p_aufk_calc-aufnr ALPHA = OUT }|.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'ZPP'
          number = 241
          par1   = lv_par1
        IMPORTING
          return = ls_bapiret2.
      APPEND ls_bapiret2 TO pt_bapiret2.
    ENDIF.

  ENDIF.

ENDFORM.
