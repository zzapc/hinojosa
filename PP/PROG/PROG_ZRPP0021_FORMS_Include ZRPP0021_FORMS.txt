*&---------------------------------------------------------------------*
*&  Include           ZRPP0021_FORMS
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  RECUPERAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recuperar_datos.

* 0) Tabla con motivos rechazo permitidos:
  PERFORM f_motivos_rechazo.

* 1) Seleccionamos movimientos:
  PERFORM f_selec_movimientos.

* 2) Recuperamos datos características:
  PERFORM f_selec_caracteristicas.

ENDFORM.                    " RECUPERAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  F_SELEC_MOVIMIENTOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_selec_movimientos.

  DATA: lt_aufm TYPE TABLE OF aufm.

  DATA: ls_aufm  TYPE         aufm,
        ls_mov   LIKE LINE OF gt_mov,
        lv_index LIKE         sy-tabix.

  CLEAR: ls_aufm, lt_aufm.
  REFRESH: lt_aufm.

  SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_aufm
    FROM aufm AS a
    INNER JOIN mara AS b ON b~matnr = a~matnr
    WHERE a~budat IN s_budat
    AND a~werks = p_werks
    AND ( a~bwart = '531' OR a~bwart = '532' )
    AND b~mtart = 'ZREC'.

* Agrupamos los movimientos:

  CLEAR: ls_mov, gt_mov.
  REFRESH: gt_mov.

  LOOP AT lt_aufm INTO ls_aufm.
    CLEAR ls_mov.
    READ TABLE gt_mov INTO ls_mov WITH KEY budat = ls_aufm-budat
                                           werks = ls_aufm-werks
                                           matnr = ls_aufm-matnr
                                           lgort = ls_aufm-lgort
                                           charg = ls_aufm-charg
                                           aufnr = ls_aufm-aufnr.
    lv_index = sy-tabix.
    IF ls_mov IS NOT INITIAL.
      IF ls_aufm-bwart = '531'.
        ls_mov-menge = ls_mov-menge + ls_aufm-menge.
      ELSE.
        ls_mov-menge = ls_mov-menge - ls_aufm-menge.
      ENDIF.
      MODIFY gt_mov FROM ls_mov INDEX lv_index.
    ELSE.
      MOVE-CORRESPONDING ls_aufm TO ls_mov.
      IF ls_aufm-bwart = '531'.
        ls_mov-menge = ls_aufm-menge.
      ELSE.
        ls_mov-menge = ( -1 ) * ls_aufm-menge.
      ENDIF.
      APPEND ls_mov TO gt_mov.
    ENDIF.

  ENDLOOP.


ENDFORM.                    " F_SELEC_MOVIMIENTOS
*&---------------------------------------------------------------------*
*&      Form  F_SELEC_CARACTERISTICAS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_selec_caracteristicas.

  DATA: ls_motiv_rec         LIKE LINE OF gt_motiv_rec,
        ls_mov               LIKE LINE OF gt_mov,
        ls_mermas            TYPE         zstpp_mermas,
        ls_mermas_aux        TYPE         zstpp_mermas,
        lv_object            TYPE         objnum,
        lt_alloc_values_num  TYPE      tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE      tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE      tt_bapi1003_alloc_values_curr,
        lt_return            TYPE      bapiret2_tab,
        ls_alloc_values_char TYPE      bapi1003_alloc_values_char,
        lv_index             LIKE      sy-tabix,
        lv_matnr             TYPE      matnr.

  CLEAR: ls_motiv_rec.

* Recogemos valores de características y confeccionamos tabla
* resultados:
  LOOP AT gt_mov INTO ls_mov.

    CLEAR ls_mermas.

    " Leemos las características:
    CLEAR lv_object.
    CONCATENATE ls_mov-matnr ls_mov-charg INTO lv_object.

    REFRESH: lt_alloc_values_num, lt_alloc_values_char.
    REFRESH: lt_alloc_values_curr, lt_return.

    CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
      EXPORTING
        objectkey       = lv_object
        objecttable     = 'MCH1'
        classnum        = 'Z_BOBINA_REP'
        classtype       = '023'
*       KEYDATE         = SY-DATUM
*       UNVALUATED_CHARS       = ' '
*       LANGUAGE        = SY-LANGU
* IMPORTING
*       STATUS          =
*       STANDARDCLASS   =
      TABLES
        allocvaluesnum  = lt_alloc_values_num
        allocvalueschar = lt_alloc_values_char
        allocvaluescurr = lt_alloc_values_curr
        return          = lt_return.

    " Motivo rechazo:
    CLEAR ls_alloc_values_char.
    READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
           WITH KEY charact = 'ZPPI_MOTIVO_RECHAZO'.
    IF ls_alloc_values_char-value_neutral IS NOT INITIAL.
      CLEAR ls_motiv_rec.
      READ TABLE gt_motiv_rec INTO ls_motiv_rec
           WITH KEY atwrt = ls_alloc_values_char-value_neutral.
      IF ls_motiv_rec IS NOT INITIAL.
        ls_mermas-motiv_rechazo = ls_motiv_rec-atwrt.
        CONDENSE ls_mermas-motiv_rechazo.
      ELSE.
        CONTINUE.
      ENDIF.
    ELSE.
      CONTINUE.
    ENDIF.

    " Cliente:
    CLEAR ls_alloc_values_char.
    READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
               WITH KEY charact = 'Z_CLIENTE'.
    IF ls_alloc_values_char-value_neutral IS NOT INITIAL.
      ls_mermas-cliente = ls_alloc_values_char-value_neutral.
      CONDENSE ls_mermas-cliente.
    ELSE.
      CLEAR ls_mermas-cliente.
    ENDIF.

    " Material rollo origen:
    CLEAR ls_alloc_values_char.
    READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
               WITH KEY charact = 'Z_ROLLO_ORIGEN_V2'.
    IF ls_alloc_values_char-value_neutral IS NOT INITIAL.
      ls_mermas-rollo_orig = ls_alloc_values_char-value_neutral.
      CONDENSE ls_mermas-rollo_orig.
    ELSE.
      CLEAR ls_mermas-rollo_orig.
    ENDIF.

    " Lote rollo origen:
    CLEAR ls_alloc_values_char.
    READ TABLE lt_alloc_values_char INTO ls_alloc_values_char
               WITH KEY charact = 'Z_LOTE_ORIGEN'.
    IF ls_alloc_values_char-value_neutral IS NOT INITIAL.
      ls_mermas-rollo_lote = ls_alloc_values_char-value_neutral.
      CONDENSE ls_mermas-rollo_lote.
    ELSE.
      CLEAR ls_mermas-rollo_lote.
    ENDIF.

    " Orden:
    ls_mermas-aufnr = ls_mov-aufnr.

    " Fecha contabilización:
    ls_mermas-budat = ls_mov-budat.

    " Lote merma:
    ls_mermas-lote_merma = ls_mov-charg.

    " Miramos si existe ya una entrada con los campos
    " clave en la tabla de resultados:
    CLEAR ls_mermas_aux.
    READ TABLE gt_mermas INTO ls_mermas_aux
                   WITH KEY aufnr = ls_mermas-aufnr
                            cliente = ls_mermas-cliente
                            lote_merma = ls_mermas-lote_merma
                            rollo_orig = ls_mermas-rollo_orig
                            rollo_lote = ls_mermas-rollo_lote
                            motiv_rechazo = ls_mermas-motiv_rechazo
                            budat = ls_mermas-budat.

    lv_index = sy-tabix.
    IF ls_mermas_aux IS NOT INITIAL.
      ls_mermas_aux-kg_prod = ls_mermas_aux-kg_prod + ls_mov-menge.
      MODIFY gt_mermas FROM ls_mermas_aux INDEX lv_index.
    ELSE.
      ls_mermas-kg_prod = ls_mov-menge.
      ls_mermas-meins = 'KG'.

      clear lv_matnr.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input         = ls_mermas-rollo_orig
       IMPORTING
         OUTPUT        = lv_matnr.

      SELECT SINGLE maktx INTO ls_mermas-rollo_desc
        FROM makt
        WHERE matnr = lv_matnr
        AND spras = sy-langu.
      APPEND ls_mermas TO gt_mermas.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " F_SELEC_CARACTERISTICAS
*&---------------------------------------------------------------------*
*&      Form  F_MOTIVOS_RECHAZO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_motivos_rechazo .

  CLEAR: gt_motiv_rec.
  REFRESH: gt_motiv_rec.

  SELECT * FROM zvhb_charvf
    INTO CORRESPONDING FIELDS OF TABLE gt_motiv_rec
    WHERE atnam = 'ZPPI_MOTIVO_RECHAZO'
    AND atwrt IN s_motiv.


ENDFORM.                    " F_MOTIVOS_RECHAZO
*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion_sel .

SELECT SINGLE parva FROM usr05
      INTO p_werks
      WHERE bname = sy-uname AND
      parid = 'WRK'.

ENDFORM.                    " INICIALIZACION_SEL
