*&---------------------------------------------------------------------*
*&  Include           ZRPP0021_ALV
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  ALV_MOSTRAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_mostrar .

  DATA: ls_lvc_s_layo TYPE lvc_s_layo,
        ls_variant    TYPE disvariant.

* Variante
  PERFORM alv_prepare_variant CHANGING ls_variant.
* Preparamos el catálogo de campos
  PERFORM alv_prepare_fielcat.
* Preparamos el layout
  PERFORM alv_prepare_layout CHANGING ls_lvc_s_layo.

* Mostramos el ALV
  CALL METHOD gcl_grid->set_table_for_first_display
    EXPORTING
      i_buffer_active    = ' '
      i_bypassing_buffer = 'X'
      is_layout          = ls_lvc_s_layo
      i_structure_name   = 'GT_MERMAS'
      is_variant         = ls_variant
      i_save             = 'A'
    CHANGING
      it_outtab          = gt_mermas[]
      it_fieldcatalog    = gt_fieldcat.

ENDFORM.                    " ALV_MOSTRAR

*&---------------------------------------------------------------------*
*&      Form  alv_prepare_variant
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->PS_VARIANT text
*----------------------------------------------------------------------*
FORM alv_prepare_variant CHANGING ps_variant TYPE disvariant .

  IF gs_variant IS NOT INITIAL.
    ps_variant = gs_variant.
  ELSE.
    CLEAR ps_variant.
    ps_variant-report = sy-repid.
  ENDIF.

ENDFORM.                    "alv_prepare_variant

*&---------------------------------------------------------------------*
*&      Form  alv_prepare_fielcat
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM alv_prepare_fielcat.

  DATA: ls_fcat TYPE lvc_s_fcat.
  DATA: lv_tabix TYPE sytabix.


  REFRESH: gt_fieldcat_ant, gt_fieldcat.

* Pasar tabla interna al formato del fieldcat
  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_program_name         = sy-repid
      i_internal_tabname     = 'GT_MERMAS'
      i_inclname             = sy-repid
      i_bypassing_buffer     = 'X'
    CHANGING
      ct_fieldcat            = gt_fieldcat_ant
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

* Pasar el anterior fieldcat al formato del nuevo
  CALL FUNCTION 'LVC_TRANSFER_FROM_SLIS'
    EXPORTING
      it_fieldcat_alv = gt_fieldcat_ant
    IMPORTING
      et_fieldcat_lvc = gt_fieldcat
    TABLES
      it_data         = gt_mermas
    EXCEPTIONS
      it_data_missing = 1
      OTHERS          = 2.

** Recorremos el catálogo de campos modificandolo

  LOOP AT gt_fieldcat INTO ls_fcat.
    lv_tabix = sy-tabix.
    CASE ls_fcat-fieldname.
      WHEN 'MEINS'.
        ls_fcat-no_out = 'X'.
        MODIFY gt_fieldcat FROM ls_fcat INDEX lv_tabix.
    ENDCASE.
  ENDLOOP.

ENDFORM.                    "alv_prepare_fielcat

*&---------------------------------------------------------------------*
*&      Form  ALV_PREPARE_LAYOUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_prepare_layout CHANGING ls_lvc_s_layo TYPE lvc_s_layo.

* Para que muestre el ancho de las columnas optimizado
  ls_lvc_s_layo-cwidth_opt = 'X'.
  ls_lvc_s_layo-sel_mode   = 'A'.

ENDFORM.                    " ALV_PREPARE_LAYOUT

*&---------------------------------------------------------------------*
*&      Form  ALV_REFRESH_TABLE_DISPLAY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM alv_refresh_table_display .

  DATA: ls_stable TYPE lvc_s_stbl,
        ls_layout	TYPE lvc_s_layo.

*Refresh layout
  CLEAR ls_layout.
  CALL METHOD gcl_grid->get_frontend_layout
    IMPORTING
      es_layout = ls_layout.

  PERFORM alv_prepare_layout CHANGING ls_layout.

  CALL METHOD gcl_grid->set_frontend_layout
    EXPORTING
      is_layout = ls_layout.

*Refresh data
  CLEAR ls_stable.
  ls_stable-row = 'X'.
  ls_stable-col = 'X'.
  CALL METHOD gcl_grid->refresh_table_display
    EXPORTING
      is_stable = ls_stable
    EXCEPTIONS
      finished  = 1
      OTHERS    = 2.
  IF sy-subrc <> 0.
  ENDIF.

ENDFORM.                    " ALV_REFRESH_TABLE_DISPLAY
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_HTML_HEADER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_html_header.

  DATA: l_doctable TYPE REF TO cl_dd_table_element,
        l_col_pic  TYPE REF TO cl_dd_area,
        l_col_tit  TYPE REF TO cl_dd_area,
        l_col_info TYPE REF TO cl_dd_area.

  DATA: lv_logo TYPE sdydo_key,
        lv_text TYPE sdydo_text_element.

* Creamos una tabla con 3 columnas
  CALL METHOD g_dd_doc->add_table
    EXPORTING
      no_of_columns = 3
      border        = '0'
      width         = '100%'
    IMPORTING
      table         = l_doctable.

* Columna del logo
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '15%'
    IMPORTING
      column = l_col_pic.

* Columna de títulos
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '10%'
    IMPORTING
      column = l_col_tit.

* Columna de valores (información)
  CALL METHOD l_doctable->add_column
    EXPORTING
      width  = '75%'
    IMPORTING
      column = l_col_info.

* Ponemos el logo
*  REPLACE 'XXXX' IN lv_logo WITH gs_orgvta-bukrs.

  CONCATENATE 'ZLOGO_' p_werks '_ALV' INTO lv_logo.

  CONDENSE lv_logo NO-GAPS.

  CALL METHOD l_col_pic->add_picture
    EXPORTING
      picture_id = lv_logo.

* Ponemos el título del centro
  CALL METHOD l_col_tit->add_text
    EXPORTING
      text         = text-c01
      sap_color    = cl_dd_area=>list_heading
      sap_fontsize = cl_dd_area=>large.
  l_col_tit->new_line( ).

* Ponemos el título de la fecha
  CALL METHOD l_col_tit->add_text
    EXPORTING
      text         = text-c02
      sap_color    = cl_dd_area=>list_heading
      sap_fontsize = cl_dd_area=>large.
  l_col_tit->new_line( ).

* Ponemos el título de la hora
  CALL METHOD l_col_tit->add_text
    EXPORTING
      text         = text-c03
      sap_color    = cl_dd_area=>list_heading
      sap_fontsize = cl_dd_area=>large.

* Ponemos el nombre del centro
  SELECT SINGLE name1 INTO lv_text
      FROM  t001w
      WHERE werks = p_werks.
  CONCATENATE p_werks lv_text INTO lv_text SEPARATED BY '-'.
  CALL METHOD l_col_info->add_text
    EXPORTING
      text         = lv_text
      sap_fontsize = cl_dd_document=>large.
  l_col_info->new_line( ).

* Ponemos la fecha
  WRITE sy-datum TO lv_text DD/MM/YYYY.
  CALL METHOD l_col_info->add_text
    EXPORTING
      text         = lv_text
      sap_fontsize = cl_dd_document=>large.
  l_col_info->new_line( ).

* Ponemos la hora
  WRITE sy-uzeit TO lv_text.
  CALL METHOD l_col_info->add_text
    EXPORTING
      text         = lv_text
      sap_fontsize = cl_dd_document=>large.


* Creamos el objeto HTML en el container de arriba
  CREATE OBJECT g_html
    EXPORTING
      parent = g_container_1.

* Cargamos los textos en el visor HTML
  g_dd_doc->html_control = g_html.

* Visualizamos los textos
  CALL METHOD g_dd_doc->merge_document.
  CALL METHOD g_dd_doc->display_document
    EXPORTING
      reuse_control = 'X'
      parent        = g_container_1.

ENDFORM.                    " MOSTRAR_HTML_HEADER
