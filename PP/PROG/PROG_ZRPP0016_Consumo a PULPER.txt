*&---------------------------------------------------------------------*
*& Report  ZRPP0009
*&
*&---------------------------------------------------------------------*
*& Consumo a PULPER
*&
*&---------------------------------------------------------------------*

REPORT zrpp0016 MESSAGE-ID zpp.


INCLUDE zrpp0016_top.
INCLUDE zbc_batch.

SELECTION-SCREEN FUNCTION KEY 1.

SELECTION-SCREEN BEGIN OF BLOCK zrpp0016 WITH FRAME TITLE text-001.
PARAMETERS: p_matco TYPE aufm-matnr," OBLIGATORY,
            p_charg TYPE aufm-charg. " OBLIGATORY.
SELECTION-SCREEN END OF BLOCK zrpp0016.

SELECTION-SCREEN BEGIN OF BLOCK zrpp0016_v2 WITH FRAME TITLE text-003.
* GST - 07/07/2016 ->
*PARAMETERS: p_werks LIKE mard-werks DEFAULT '3000', "OBLIGATORY DEFAULT '3000',
PARAMETERS: p_werks LIKE mard-werks OBLIGATORY, "OBLIGATORY DEFAULT '3000',
* GST - 07/07/2016 <-
*            p_lgort LIKE mard-lgort OBLIGATORY DEFAULT '4002',
            p_oper TYPE atwrt. "OBLIGATORY.
SELECTION-SCREEN END OF BLOCK zrpp0016_v2.

SELECTION-SCREEN BEGIN OF BLOCK zrpp0016_v3 WITH FRAME TITLE text-004.
PARAMETERS: p_matnr LIKE mard-matnr,
            p_menge TYPE erfmg.
SELECTION-SCREEN END OF BLOCK zrpp0016_v3.

SELECTION-SCREEN BEGIN OF BLOCK zrpp0016_v5 WITH FRAME TITLE text-009.
PARAMETERS: p_c_pulp LIKE cawn-atwrt MATCHCODE OBJECT zhhb_charsvf.
SELECTION-SCREEN END OF BLOCK zrpp0016_v5.

SELECTION-SCREEN BEGIN OF BLOCK zrpp0016_v4 WITH FRAME TITLE text-005.
PARAMETERS: p_c_rema LIKE cawn-atwrt MATCHCODE OBJECT zhhb_charsvf. "zhpp_carac_remanipulado.
SELECTION-SCREEN END OF BLOCK zrpp0016_v4.

** GST - 03/11/2015 ->
*SELECTION-SCREEN BEGIN OF BLOCK zrpp0016_v5 WITH FRAME TITLE text-006.
*SELECTION-SCREEN PUSHBUTTON 15(12) but1 USER-COMMAND cust.
*SELECTION-SCREEN END OF BLOCK zrpp0016_v5.
** GST - 03/11/2015 <-

SELECTION-SCREEN BEGIN OF BLOCK zrpp0016_v6 WITH FRAME TITLE text-007.
PARAMETERS: cb_apro AS CHECKBOX.
PARAMETERS: p_c_rech LIKE cawn-atwrt MATCHCODE OBJECT zhpp_carac_reproceso_bobina.
PARAMETERS: cb_abue AS CHECKBOX.
SELECTION-SCREEN END OF BLOCK zrpp0016_v6.


INCLUDE zrpp0016_form.

INITIALIZATION.

  PERFORM inicializacion_sel.


AT SELECTION-SCREEN OUTPUT.
* GST - 28/10/2015 - Adaptación otros centros ->
*  IF p_matco IS NOT INITIAL AND p_charg IS NOT INITIAL.
*      p_matnr = '000000000002001764'.

*  but1 = text-008.

  IF p_matco IS NOT INITIAL AND p_charg IS NOT INITIAL AND p_werks IS NOT INITIAL.
    PERFORM material_pulper USING p_matco
                                  p_charg
                                  p_werks
                            CHANGING p_matnr
                                     p_menge
                                     ls_ztpp0006.
  ENDIF.



AT SELECTION-SCREEN ON cb_apro.

  IF cb_apro = 'X' AND cb_abue = 'X'.
    MESSAGE e073(zpp).
  ELSEIF  cb_apro = 'X'.
    CLEAR p_c_rech.
*    LOOP AT SCREEN.
*      CASE screen-name.
*        WHEN 'P_C_RECH'.
*          screen-active = 1.
*        WHEN OTHERS.
*      ENDCASE.
*
*      MODIFY SCREEN.
*    ENDLOOP.

  ENDIF.

AT SELECTION-SCREEN ON cb_abue.

  IF cb_apro = 'X' AND cb_abue = 'X'.
    MESSAGE e073(zpp).
  ELSEIF  cb_abue = 'X'.

*    LOOP AT SCREEN.
*      CASE screen-name.
*        WHEN 'P_C_RECH'.
*          screen-active = 0.
*        WHEN OTHERS.
*      ENDCASE.
*
*      MODIFY SCREEN.
*    ENDLOOP.

  ENDIF.


AT SELECTION-SCREEN.
  IF sy-ucomm = 'FC01'.
    CALL TRANSACTION 'ZTPP0006'.
  ELSE.
    IF p_matco IS INITIAL.
      MESSAGE e067(zpp).
    ENDIF.

    IF p_charg IS INITIAL.
      MESSAGE e068(zpp).
    ENDIF.

    IF p_werks IS INITIAL.
      MESSAGE e069(zpp).
    ENDIF.

    IF p_oper IS INITIAL.
      MESSAGE e070(zpp).
    ENDIF.

    IF cb_apro IS INITIAL AND cb_abue IS INITIAL.
      CLEAR gv_mtart.
      SELECT SINGLE mtart INTO gv_mtart
        FROM mara
        WHERE matnr = p_matco.
      IF gv_mtart = 'ZROL'.
        PERFORM chequeo_motivo_pulper USING p_c_pulp.
      ELSE.
        PERFORM chequeo_motivo_remanipulado USING p_c_rema.
      ENDIF.
    ENDIF.
    PERFORM chequeo_motivo_reproceso.
  ENDIF.


START-OF-SELECTION.


  " Inicializar variables:
  PERFORM iniciar_var.

  IF cb_abue IS INITIAL AND cb_apro IS INITIAL.



    " Chequeo material/lote consumir con stock:
    CLEAR gv_clabs.
    SELECT SINGLE clabs INTO gv_clabs
      FROM mchb
      WHERE matnr = p_matco
      AND cinsm = ' '
      AND cspem = ' '
      AND werks = p_werks
      AND charg = p_charg.

    IF gv_clabs IS INITIAL OR gv_clabs < p_menge.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = p_matco
        IMPORTING
          output = gv_matnr.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = p_charg
        IMPORTING
          output = gv_charg.

      MESSAGE i040 WITH gv_matnr gv_charg.

    ELSE.

      " 1) Crear orden:
      PERFORM crear_orden CHANGING gv_aufnr
                                   gv_error.

      IF gv_error <> 'X'.
        " 2) Añadir componente a orden:
        PERFORM anadir_componente USING gv_aufnr
                                  CHANGING gv_error.

        IF gv_error <> 'X'.

          " 3) Liberación orden de proceso:
          PERFORM liberar_orden USING gv_aufnr
                                CHANGING gv_error.

          IF gv_error <> 'X'.

            " 4) Movimientos alta:
            "    (tantos como bobinas resultantes)

            PERFORM alta_stock USING gv_aufnr
                               CHANGING gv_mblnr
                                        gv_mjahr.
*           4.2: Si hay almacén de traslado en la ZTPP0006 lo realizamos
            PERFORM trasladar_stock USING gv_mblnr
                                          gv_mjahr.

* GST - 29/10/2015 ->
            " Se clasifica el lote:
            IF ls_ztpp0006-mtart = 'ZROL'.
              PERFORM clasificar_lote_rollo.
            ELSE.
              " Clasificación lotes:
              PERFORM clasificar_lote.
            ENDIF.
* GST - 29/10/2015 <-

            " 5) Mov. mercancía: consumir totalmente material
            PERFORM cons_material.

            " 6) Notificar orden de proceso:
            PERFORM notificar_orden.

* GST - 29/10/2015 ->
            " Sólo si está indicado que se imprima la etiqueta:
            IF ls_ztpp0006-imp_etiqueta = 'X'.
              PERFORM imprimir_etiqueta.
            ENDIF.
* GST - 29/10/2015 <-

          ENDIF.

        ENDIF.

      ENDIF.

      " 9) Mostrar log:
      PERFORM mostrar_log.

      " 10) Limpiar variables:
      PERFORM limpiar_var.

    ENDIF.

  ELSE.

    CLEAR gv_clabs.
    SELECT SINGLE clabs INTO gv_clabs
      FROM mchb
      WHERE matnr = p_matco
      AND cinsm = ' '
      AND cspem = ' '
      AND werks = p_werks
      AND charg = p_charg
      AND clabs > 0.

    IF NOT gv_clabs IS INITIAL.

      IF cb_abue = 'X'.   " CAMBIO DE BOBINA REPROCESO A BUENA

* CAMBIAR CARACTERISTICA  DE BUENA A REPROCESO
        PERFORM modificar_clasificacion USING '0'
                                              p_c_rech.

* TRASLADAR EL MATERIAL DE ALMACEN
        PERFORM trasladar_reproceso USING gv_clabs
                                          '4001'
                                          '1040'.

        " 9) Mostrar log:
        PERFORM mostrar_log.

        " 10) Limpiar variables:
        PERFORM limpiar_var.


      ELSEIF cb_apro = 'X'. " CAMBIO DE BOBINA BUENA A REPROCESO

* CAMBIAR CARACTERISTICA  DE BUENA A REPROCESO
        PERFORM modificar_clasificacion USING '1'
                                              p_c_rech.

* TRASLADAR EL MATERIAL DE ALMACEN
        PERFORM trasladar_reproceso USING gv_clabs
                                          '1040'
                                          '4001'.

        " 9) Mostrar log:
        PERFORM mostrar_log.

        " 10) Limpiar variables:
        PERFORM limpiar_var.

      ENDIF.
    ENDIF.

  ENDIF.
