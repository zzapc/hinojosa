*----------------------------------------------------------------------*
***INCLUDE ZGFPP_REGISTRO_VEHICULOSP01.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&       Class (Implementation)  impe
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS lcl_handle_pop_vehi DEFINITION.
  PUBLIC SECTION.
    METHODS:
      on_user_command2 FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function.

    METHODS:
      on_double_click FOR EVENT double_click OF cl_salv_events_table
        IMPORTING row column.
*    METHODS: on_link_click   FOR EVENT link_click OF
*                  cl_salv_events_table
*      IMPORTING row column.

ENDCLASS.                    "lcl_handle_events DEFINITION

*---------------------------------------------------------------------*
* #5.2 implement the events for handling the events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lcl_handle_pop_vehi IMPLEMENTATION.
  METHOD on_user_command2.
    DATA:
      lr_selections  TYPE REF TO cl_salv_selections,

      lt_rows        TYPE salv_t_row,
      lv_row         TYPE i,
      lv_no_selected LIKE sy-tfill.

*   execute function
    CASE e_salv_function.
      WHEN 'CONTINUE'
        OR 'CONT'.                     "pressing ENTER behaves different, means RS_CUA_GET_STATUS returns UCOMM only 4 digts long
*       get selected line
        lr_selections = go_alv_cond_vehi->get_selections( ).
        lt_rows = lr_selections->get_selected_rows( ).
        DESCRIBE TABLE lt_rows LINES lv_no_selected.

        IF lv_no_selected IS INITIAL.
*         no selection made
          MESSAGE i351(zpp). "Seleccionar un vehículo para continuar.
        ELSE.
          READ TABLE lt_rows INTO lv_row INDEX 1.
*         only valid lines
          IF lv_row IS NOT INITIAL.
            go_alv_cond_vehi->close_screen( ).

            TRY.
                g_matricula1   = gt_rel_condu_vehi[ lv_row ]-zmatricula1.
*              g_ind_remolque = gt_vehiculos[ lv_row ]-ind_remolque.
*              g_matricula2   = gt_vehiculos[ lv_row ]-zmatricula2.
              CATCH cx_root .
                MESSAGE |Matrícula no encontrada.| TYPE 'S' DISPLAY LIKE 'E'. "Receta no encontrada
            ENDTRY.
          ENDIF.
        ENDIF.

      WHEN 'CANC'.
*       leave popup
*       - (currently) not supported via code &AC1
        go_alv_cond_vehi->close_screen( ).
        EXIT.
      WHEN 'CONS'.   " Eliminar
        lr_selections = go_alv_cond_vehi->get_selections( ).
        lt_rows = lr_selections->get_selected_rows( ).
        READ TABLE lt_rows INTO lv_row INDEX 1.
        IF sy-subrc <> 0.
          MESSAGE i351(zpp). "Seleccionar un vehículo para continuar.
        ELSE.
          PERFORM borrar_rel_vehiculo USING lv_row.
        ENDIF.
      WHEN 'ALTA'.   " Alta matrícula

        DATA: lt_fields     TYPE TABLE OF sval,
              ls_fields     TYPE          sval,
              lv_returncode TYPE c.

* 1) Ancho máximo:
        CLEAR ls_fields.
        ls_fields-tabname   = 'ZTPP0058'.
        ls_fields-fieldname = 'ZMATRICULA1'.
        ls_fields-fieldtext = 'Matrícula:'.
        ls_fields-field_obl = 'X'.
        APPEND ls_fields TO lt_fields.

        CALL FUNCTION 'POPUP_GET_VALUES'
          EXPORTING
*           NO_VALUE_CHECK  = ' '
            popup_title     = 'Alta matrícula del vehículo'
            start_column    = '5'
            start_row       = '5'
          IMPORTING
            returncode      = lv_returncode
          TABLES
            fields          = lt_fields
          EXCEPTIONS
            error_in_fields = 1
            OTHERS          = 2.

        CHECK sy-subrc = 0 AND lv_returncode <> 'A'.
*        IF sy-subrc <> 0 AND lv_returncode <> 'A'.
*    lv_returncode = 'E'.
*        ELSE.
        TRY.
            ls_fields = lt_fields[ 1 ].
            g_matricula1 = ls_fields-value.
          CATCH cx_root .
*              MESSAGE
        ENDTRY.
        DATA: l_matri TYPE char7.
        l_matri = g_matricula1.
        CALL METHOD zclpp_reg_vehiculo_master=>grabar_relacion_condu_vehi
          EXPORTING
            i_dninie      = g_dninie
            i_zmatricula1 = l_matri
            i_operario    = g_operario
          IMPORTING
            o_rc          = DATA(l_rc).
        CASE l_rc.
          WHEN '00'.
            MESSAGE |Vehículo dado de alta correctamente.| TYPE 'S'.
            CLEAR gt_rel_condu_vehi[].
            SELECT * INTO TABLE @gt_rel_condu_vehi
              FROM ztpp0058
              WHERE dninie = @g_dninie AND
                    lvorm  = ' '.
            go_alv_cond_vehi->refresh( ).

          WHEN '03'.
            MESSAGE |Vehículo ya dado de alta correctamente.| TYPE 'S' DISPLAY LIKE 'E'.
          WHEN OTHERS.
        ENDCASE.

*        ENDIF.

*        CALL FUNCTION 'ZMFPP_ALTA_VEHICULO'
*          EXPORTING
*            i_werks      = g_werks
*            i_dninie     = g_dninie
*            i_operario   = g_operario
*          IMPORTING
*            o_matricula1 = g_matricula1
*            o_rc         = g_rc.
*
*        CASE g_rc.
*          WHEN '00'.
*            MESSAGE |Vehículo dado de alta correctamente.| TYPE 'I' DISPLAY LIKE 'E'.
*
*            CLEAR gt_rel_condu_vehi[].
*            SELECT * INTO TABLE @gt_rel_condu_vehi
*              FROM ztpp0058
*              WHERE dninie = @g_dninie AND
*                    lvorm  = ' '.
*            go_alv_cond_vehi->refresh( ).
*          WHEN OTHERS.
*        ENDCASE.

      WHEN OTHERS.

    ENDCASE.

  ENDMETHOD.

  METHOD on_double_click.

    TRY.

        g_matricula1   = gt_rel_condu_vehi[ row ]-zmatricula1.

        IF g_matricula1 IS NOT INITIAL.
          go_alv_cond_vehi->close_screen( ).
        ENDIF.

      CATCH cx_root .
    ENDTRY.

  ENDMETHOD.

ENDCLASS.

*&---------------------------------------------------------------------*
*&  Include           ZRPP0056_CLASS
*&---------------------------------------------------------------------*
CLASS lcl_handle_events200 DEFINITION.
  PUBLIC SECTION.
    METHODS:
      on_user_command FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function.

ENDCLASS.                    "lcl_handle_events DEFINITION

CLASS lcl_handle_events200 IMPLEMENTATION.
  METHOD on_user_command.
    PERFORM handle_user_command200 USING e_salv_function.
  ENDMETHOD.                    "on_user_command

ENDCLASS.                    "lcl_handle_events IMPLEMENTATION
