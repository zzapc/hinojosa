*&---------------------------------------------------------------------*
*&  Include           ZRPP0072_F01
*&---------------------------------------------------------------------*
FORM montar_alv_sup.

  IF gs_dyn100-cont_sup IS NOT BOUND.

    CREATE OBJECT gs_dyn100-cont_sup
      EXPORTING
        container_name              = 'GS_DYN100-CONT_SUP'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.
        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn100-cont_sup
            container_name = 'GS_DYN100-CONT_SUP'
          IMPORTING
            r_salv_table   = gs_dyn100-alv_sup
          CHANGING
            t_table        = gt_datos_asig.
      CATCH cx_root .
    ENDTRY.

    PERFORM tunning_alv_sup.

    gs_dyn100-alv_sup->display( ).

*  ELSE.
*    TRY.
*        CALL METHOD gs_dyn100-alv_sup->set_data
*          CHANGING
*            t_table = gt_datos_asig.
*
*      CATCH cx_root .
*    ENDTRY.
*
*    gs_dyn100-alv_sup->refresh( "s_stable     = 'X'
*                               refresh_mode = if_salv_c_refresh=>full ).
*    cl_gui_cfw=>flush( ).


  ENDIF.

ENDFORM.

FORM montar_alv_inf.

  IF gs_dyn100-cont_inf IS NOT BOUND.

    CREATE OBJECT gs_dyn100-cont_inf
      EXPORTING
        container_name              = 'GS_DYN100-CONT_INF'
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.

    TRY.
        CALL METHOD cl_salv_table=>factory
          EXPORTING
            r_container    = gs_dyn100-cont_inf
            container_name = 'GS_DYN100-CONT_INF'
          IMPORTING
            r_salv_table   = gs_dyn100-alv_inf
          CHANGING
            t_table        = gt_datos_sin_asig.
      CATCH cx_root .
    ENDTRY.

    PERFORM tunning_alv_inf.

    gs_dyn100-alv_inf->display( ).

*  ELSE.
*    TRY.
*        CALL METHOD gs_dyn100-alv_inf->set_data
*          CHANGING
*            t_table = gt_datos_sin_asig.
*
*      CATCH cx_root .
*    ENDTRY.
*
*    gs_dyn100-alv_inf->refresh( "s_stable     = 'X'
*                               refresh_mode = if_salv_c_refresh=>full ).
*    cl_gui_cfw=>flush( ).


  ENDIF.

ENDFORM.

FORM tunning_alv_sup.

  DATA: lr_functions  TYPE REF TO cl_salv_functions_list,
        lo_selections TYPE REF TO cl_salv_selections,
        l_text        TYPE string.
  DATA: lv_key    TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout TYPE REF TO cl_salv_layout.
  DATA: lr_columns TYPE REF TO cl_salv_columns,
        lr_column  TYPE REF TO cl_salv_column_table.

  DATA: lr_events TYPE REF TO cl_salv_events_table.
  lr_events = gs_dyn100-alv_sup->get_event( ).

  lo_selections = gs_dyn100-alv_sup->get_selections( ).
  lo_selections->set_selection_mode( cl_salv_selections=>multiple ).

  CREATE OBJECT gr_events_sup.
  SET HANDLER gr_events_sup->on_user_command FOR lr_events.


  lv_key-report = sy-repid.
  lo_layout = gs_dyn100-alv_sup->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn100-alv_sup->get_functions( ).
  lr_functions->set_all( 'X' ).

  TRY.
      l_text = 'Asignar S - 1'.
      lr_functions->add_function(
        name     = 'ASIG_ANT'
*        icon     = '@0D@'
        icon     = '@2W@'
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.

  TRY.
      l_text = 'Liberar'.
      lr_functions->add_function(
        name     = 'LIBERAR'
        icon     = '@8V@'
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.

  TRY.
      l_text = 'Asignar S + 1'.
      lr_functions->add_function(
        name     = 'ASIG_SIG'
        icon     = '@4R@' "space
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.


  lr_columns = gs_dyn100-alv_sup->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CANT_PEND' ).
      lr_column->set_short_text( value  = 'Cant.pend' ).
      lr_column->set_medium_text( value  = 'Cant.pendiente' ).
      lr_column->set_long_text( value  = 'Cantidad pendiente' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FECHA_ENT' ).
      lr_column->set_short_text( value  = 'F.entrega' ).
      lr_column->set_medium_text( value  = 'Fecha entrega' ).
      lr_column->set_long_text( value  = 'Fecha entrega' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE' ).
      lr_column->set_short_text( value  = 'Cant.repar' ).
      lr_column->set_medium_text( value  = 'Cant.reparto' ).
      lr_column->set_long_text( value  = 'Cantidad reparto' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VBELN' ).
      lr_column->set_short_text( value  = 'Pedido' ).
      lr_column->set_medium_text( value  = 'Pedido' ).
      lr_column->set_long_text( value  = 'Pedido' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'DESC_CLI' ).
      lr_column->set_short_text( value  = 'Desc.clien' ).
      lr_column->set_medium_text( value  = 'Descrip. cliente' ).
      lr_column->set_long_text( value  = 'Descripción cliente' ).
    CATCH cx_salv_not_found .
  ENDTRY.

ENDFORM.

FORM tunning_alv_inf.
  DATA: lr_functions TYPE REF TO cl_salv_functions_list,
        l_text       TYPE string.
  DATA: lv_key        TYPE salv_s_layout_key,  "To save ALV salv_table
        lo_layout     TYPE REF TO cl_salv_layout,
        lo_selections TYPE REF TO cl_salv_selections.
  DATA: lr_columns TYPE REF TO cl_salv_columns,
        lr_column  TYPE REF TO cl_salv_column_table.

  DATA: lr_events TYPE REF TO cl_salv_events_table.

  lo_selections = gs_dyn100-alv_inf->get_selections( ).
  lo_selections->set_selection_mode( cl_salv_selections=>multiple ).

  lr_events = gs_dyn100-alv_inf->get_event( ).

  CREATE OBJECT gr_events_inf.
  SET HANDLER gr_events_inf->on_user_command FOR lr_events.


  lv_key-report = sy-repid.
  lo_layout = gs_dyn100-alv_inf->get_layout( ).
  lo_layout->set_key( lv_key ).
  lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
  lo_layout->set_default( abap_true ).

  lr_functions = gs_dyn100-alv_inf->get_functions( ).
  lr_functions->set_all( 'X' ).

  TRY.
      l_text = 'Asignar capacidad'.
      lr_functions->add_function(
        name     = 'ASIG_CAP'
        icon     = '@8U@'
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.

  TRY.
      l_text = 'Refrescar'.
      lr_functions->add_function(
        name     = 'REFRESCAR'
        icon     = '@42@' "space
        text     = l_text
        tooltip  = l_text
        position = if_salv_c_function_position=>right_of_salv_functions ).
    CATCH cx_salv_wrong_call cx_salv_existing.
  ENDTRY.


  lr_columns = gs_dyn100-alv_inf->get_columns( ).
  lr_columns->set_optimize( 'X' ).

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'CANT_PEND' ).
      lr_column->set_short_text( value  = 'Cant.pend' ).
      lr_column->set_medium_text( value  = 'Cant.pendiente' ).
      lr_column->set_long_text( value  = 'Cantidad pendiente' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'FECHA_ENT' ).
      lr_column->set_short_text( value  = 'F.entrega' ).
      lr_column->set_medium_text( value  = 'Fecha entrega' ).
      lr_column->set_long_text( value  = 'Fecha entrega' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'MENGE' ).
      lr_column->set_short_text( value  = 'Cant.repar' ).
      lr_column->set_medium_text( value  = 'Cant.reparto' ).
      lr_column->set_long_text( value  = 'Cantidad reparto' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'VBELN' ).
      lr_column->set_short_text( value  = 'Pedido' ).
      lr_column->set_medium_text( value  = 'Pedido' ).
      lr_column->set_long_text( value  = 'Pedido' ).
    CATCH cx_salv_not_found .
  ENDTRY.

  TRY.
      lr_column ?= lr_columns->get_column( columnname = 'DESC_CLI' ).
      lr_column->set_short_text( value  = 'Desc.clien' ).
      lr_column->set_medium_text( value  = 'Descrip. cliente' ).
      lr_column->set_long_text( value  = 'Descripción cliente' ).
    CATCH cx_salv_not_found .
  ENDTRY.

ENDFORM.



FORM handle_user_command_sup USING i_ucomm TYPE salv_de_function.

  DATA: lt_rows TYPE salv_t_row.

  CASE i_ucomm.

    WHEN 'ASIG_ANT'.
      PERFORM asignar_capacidad_anterior.
      PERFORM mover_datos_cap_neta_prod.

    WHEN 'ASIG_SIG'.
      PERFORM asignar_capacidad_posterior.
      PERFORM mover_datos_cap_neta_prod.

    WHEN 'LIBERAR'.
      PERFORM liberar_capacidad.
      PERFORM mover_datos_cap_neta_prod.
    WHEN OTHERS.
  ENDCASE.

ENDFORM.
FORM handle_user_command_inf USING i_ucomm TYPE salv_de_function.

  DATA: lt_rows    TYPE salv_t_row,
        lt_pedidos TYPE  zclpp_capacidad_asignada=>tty_pedidos.

  CASE i_ucomm.

    WHEN 'ASIG_CAP'.
      PERFORM asignar_capacidad.
      PERFORM mover_datos_cap_neta_prod.

    WHEN 'REFRESCAR'.

      gr_semana->refrescar_datos_ped_sin_asig( ).
      PERFORM refrescar_alvs USING 'I'.

    WHEN OTHERS.
  ENDCASE.


ENDFORM.

FORM obtener_seleccion  USING p_alv TYPE REF TO cl_salv_table
                        CHANGING p_rows TYPE salv_t_row.
  DATA: lr_selections TYPE REF TO cl_salv_selections.

  lr_selections = p_alv->get_selections( ).
  p_rows       = lr_selections->get_selected_rows( ).

ENDFORM.

FORM asignar_capacidad.

  DATA: lt_rows    TYPE salv_t_row,
        lt_pedidos TYPE  zclpp_capacidad_asignada=>tty_pedidos,
        lw_aviso   TYPE char1,
        l_dias_dif TYPE int4.

  DATA: lv_answer(1) TYPE c,
        l_msg        TYPE string.

  IF gr_semana->g_semana < gr_semana->g_semana_actual.
    MESSAGE |No se permite asignar capacidad a una semana en el pasado.| TYPE 'I' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

  PERFORM obtener_seleccion USING gs_dyn100-alv_inf CHANGING lt_rows.
  IF lt_rows IS INITIAL.
    MESSAGE |Seleccionar repartos.| TYPE 'I'.
    EXIT.
  ENDIF.

  CLEAR lw_aviso.

  LOOP AT lt_rows INTO DATA(ls_row).
    APPEND INITIAL LINE TO lt_pedidos ASSIGNING FIELD-SYMBOL(<fs_pedido>).
    <fs_pedido>-vbeln  = gt_datos_sin_asig[ ls_row ]-vbeln.
    <fs_pedido>-posnr  = gt_datos_sin_asig[ ls_row ]-posnr.
    <fs_pedido>-etenr  = gt_datos_sin_asig[ ls_row ]-etenr.
    <fs_pedido>-tp_ped = gt_datos_sin_asig[ ls_row ]-tp_pedido.

* Obtenemos la diferencia de dias entre el domingo de la semana seleccionada y f.reparto
    CALL FUNCTION 'HR_99S_INTERVAL_BETWEEN_DATES'
      EXPORTING
        begda = gr_semana->g_dia_fin_semana
        endda = gt_datos_sin_asig[ ls_row ]-fecha_ent
      IMPORTING
        days  = l_dias_dif.

*
    IF l_dias_dif <= gr_semana->gc_dias_margen_pedido.
      lw_aviso = 'X'.
    ENDIF.

    IF l_dias_dif > gr_semana->gc_dias_maximos .
      lw_aviso = 'Y'.
    ENDIF.
  ENDLOOP.

* Control para mostrar aviso, si procede.
  IF lw_aviso IS NOT INITIAL.
    PERFORM aviso CHANGING lw_aviso.
    IF lw_aviso = 'E'.
      EXIT.
    ENDIF.
  ENDIF.

  CALL METHOD gr_semana->asignar_pedidos_a_semana
    EXPORTING
      it_pedidos = lt_pedidos
      i_semana   = gr_semana->g_semana
    IMPORTING
      o_rc       = DATA(l_rc).

  PERFORM refrescar_alvs USING '2'.

  MESSAGE |Capacidad asignada correctamente.| TYPE 'S'.

ENDFORM.

FORM aviso CHANGING p_tipo TYPE char1.
  DATA: lv_answer(1) TYPE c,
        l_msg        TYPE string.

  CASE p_tipo.
    WHEN 'X'.
      l_msg = |Fecha de entrega <= { gr_semana->gc_dias_margen_pedido ALPHA = OUT } días.|.
    WHEN 'Y'.
      l_msg = |Fecha de entrega > fecha capacidad + { gr_semana->gc_dias_maximos ALPHA = OUT } días.|.
    WHEN 'Z'.
      l_msg = |Reparto con OF creada.|.

    WHEN OTHERS.
  ENDCASE.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'AVISO'
      text_question         = l_msg
      text_button_1         = 'Cancelar' "
      icon_button_1         = 'ICON_CANCEL' "
      text_button_2         = 'Continuar' " 'Cancelar'
      icon_button_2         = 'ICON_OKAY' " 'Cancelar'
      default_button        = '1'
      display_cancel_button = ' '
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  IF lv_answer = '1'.
    p_tipo = 'E'.
  ENDIF.


ENDFORM.

FORM asignar_capacidad_anterior.

  DATA: l_aviso TYPE char1.

  DATA: lt_rows     TYPE salv_t_row,
        lt_pedidos  TYPE  zclpp_capacidad_asignada=>tty_pedidos,
        lw_error_of TYPE flag,
        l_ebelp     TYPE ebelp.

  IF gr_semana->g_semana_ant < gr_semana->g_semana_actual.
    MESSAGE |No se permite asignar capacidad a una semana en el pasado.| TYPE 'I' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

  PERFORM obtener_seleccion USING gs_dyn100-alv_sup CHANGING lt_rows.
  IF lt_rows IS INITIAL.
    MESSAGE |Seleccionar repartos.| TYPE 'I'.
    EXIT.
  ENDIF.

  LOOP AT lt_rows INTO DATA(ls_row).
    APPEND INITIAL LINE TO lt_pedidos ASSIGNING FIELD-SYMBOL(<fs_pedido>).
    <fs_pedido>-vbeln  = gt_datos_asig[ ls_row ]-vbeln.
    <fs_pedido>-posnr  = gt_datos_asig[ ls_row ]-posnr.
    <fs_pedido>-etenr  = gt_datos_asig[ ls_row ]-etenr.
    <fs_pedido>-tp_ped = gt_datos_asig[ ls_row ]-tp_pedido.

    l_ebelp = <fs_pedido>-posnr.
    CALL METHOD zclpp_capacidad_asignada=>get_orden_fabric_pedido
      EXPORTING
        i_pedido      = <fs_pedido>-vbeln
        i_posicion    = l_ebelp
        i_reparto     = <fs_pedido>-etenr
      IMPORTING
        o_of_asignada = DATA(l_of).
    IF l_of IS NOT INITIAL.
      lw_error_of = 'X'.
*      EXIT.
    ENDIF.

  ENDLOOP.

  IF lw_error_of IS NOT INITIAL.
    l_aviso = 'Z'.
    PERFORM aviso CHANGING l_aviso.

    IF l_aviso = 'E'.
      EXIT.

    ENDIF.
  ENDIF.


  CALL METHOD gr_semana->asignar_pedidos_a_semana
    EXPORTING
      it_pedidos = lt_pedidos
      i_semana   = gr_semana->g_semana_ant
    IMPORTING
      o_rc       = DATA(l_rc).

  PERFORM refrescar_alvs USING 'S'.

  MESSAGE |Traspaso de capacidad creado correctamente.| TYPE 'S'.

ENDFORM.

FORM asignar_capacidad_posterior.

  DATA: lt_rows     TYPE salv_t_row,
        lt_pedidos  TYPE  zclpp_capacidad_asignada=>tty_pedidos,
        lw_error_of TYPE flag,
        l_ebelp     TYPE ebelp,
        l_aviso     type char1.

* Validaciones
  IF gr_semana->g_semana_sig < gr_semana->g_semana_actual OR
     gr_semana->g_semana     < gr_semana->g_semana_actual.
    MESSAGE |No se permite asignar capacidad a una semana en el pasado.| TYPE 'I' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

  PERFORM obtener_seleccion USING gs_dyn100-alv_sup CHANGING lt_rows.
  IF lt_rows IS INITIAL.
    MESSAGE |Seleccionar repartos.| TYPE 'I'.
    EXIT.
  ENDIF.

  LOOP AT lt_rows INTO DATA(ls_row).
    APPEND INITIAL LINE TO lt_pedidos ASSIGNING FIELD-SYMBOL(<fs_pedido>).
    <fs_pedido>-vbeln  = gt_datos_asig[ ls_row ]-vbeln.
    <fs_pedido>-posnr  = gt_datos_asig[ ls_row ]-posnr.
    <fs_pedido>-etenr  = gt_datos_asig[ ls_row ]-etenr.
    <fs_pedido>-tp_ped = gt_datos_asig[ ls_row ]-tp_pedido.

    l_ebelp = <fs_pedido>-posnr.
    CALL METHOD zclpp_capacidad_asignada=>get_orden_fabric_pedido
      EXPORTING
        i_pedido      = <fs_pedido>-vbeln
        i_posicion    = l_ebelp
        i_reparto     = <fs_pedido>-etenr
      IMPORTING
        o_of_asignada = DATA(l_of).
    IF l_of IS NOT INITIAL.
      lw_error_of = 'X'.
*      EXIT.
    ENDIF.


  ENDLOOP.

  IF lw_error_of IS NOT INITIAL.
    l_aviso = 'Z'.
    PERFORM aviso CHANGING l_aviso.

    IF l_aviso = 'E'.
      EXIT.
    ENDIF.
  ENDIF.

  CALL METHOD gr_semana->asignar_pedidos_a_semana
    EXPORTING
      it_pedidos = lt_pedidos
      i_semana   = gr_semana->g_semana_sig
    IMPORTING
      o_rc       = DATA(l_rc).

  PERFORM refrescar_alvs USING 'S'.

  MESSAGE |Traspaso de capacidad creado correctamente.| TYPE 'S'.

ENDFORM.

FORM liberar_capacidad.

  DATA: lt_rows     TYPE salv_t_row,
        l_semana    TYPE kweek,
        lt_pedidos  TYPE  zclpp_capacidad_asignada=>tty_pedidos,
        lw_error_of TYPE flag,
        l_ebelp     TYPE ebelp.

* Validaciones
  IF gr_semana->g_semana     < gr_semana->g_semana_actual.
    MESSAGE |No se permite liberar capacidad a una semana en el pasado.| TYPE 'I' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

  PERFORM obtener_seleccion USING gs_dyn100-alv_sup CHANGING lt_rows.
  IF lt_rows IS INITIAL.
    MESSAGE |Seleccionar repartos.| TYPE 'I'.
    EXIT.
  ENDIF.

  LOOP AT lt_rows INTO DATA(ls_row).
    APPEND INITIAL LINE TO lt_pedidos ASSIGNING FIELD-SYMBOL(<fs_pedido>).
    <fs_pedido>-vbeln  = gt_datos_asig[ ls_row ]-vbeln.
    <fs_pedido>-posnr  = gt_datos_asig[ ls_row ]-posnr.
    <fs_pedido>-etenr  = gt_datos_asig[ ls_row ]-etenr.
    <fs_pedido>-tp_ped = gt_datos_asig[ ls_row ]-tp_pedido.

    l_ebelp = <fs_pedido>-posnr.
    CALL METHOD zclpp_capacidad_asignada=>get_orden_fabric_pedido
      EXPORTING
        i_pedido      = <fs_pedido>-vbeln
        i_posicion    = l_ebelp
        i_reparto     = <fs_pedido>-etenr
      IMPORTING
        o_of_asignada = DATA(l_of).
    IF l_of IS NOT INITIAL.
      lw_error_of = 'X'.
      EXIT.
    ENDIF.
  ENDLOOP.

  IF lw_error_of = 'X'.
    MESSAGE |Operación no permitida para repartos con OF.| TYPE 'I' DISPLAY LIKE 'E'.
    EXIT.
  ENDIF.

  CLEAR l_semana.
  CALL METHOD gr_semana->asignar_pedidos_a_semana
    EXPORTING
      it_pedidos = lt_pedidos
      i_semana   = l_semana
    IMPORTING
      o_rc       = DATA(l_rc).

  PERFORM refrescar_alvs USING '2'.

  MESSAGE |Capacidad liberada correctamente.| TYPE 'S'.

ENDFORM.

FORM refrescar_alvs USING p_which TYPE werks_d.

  CASE p_which.
    WHEN 'S'.
      CLEAR: gt_datos_asig[].
      gt_datos_asig[]     = gr_semana->gt_pedidos_asig[].
      gs_dyn100-alv_sup->refresh( ).

    WHEN 'I'.
      CLEAR: gt_datos_sin_asig[].
      gt_datos_sin_asig[]     = gr_semana->gt_pedidos_sin_asig[].
      gs_dyn100-alv_inf->refresh( ).

    WHEN '2'.
      CLEAR: gt_datos_asig[].
      gt_datos_asig[]     = gr_semana->gt_pedidos_asig[].
      gs_dyn100-alv_sup->refresh( ).
      CLEAR: gt_datos_sin_asig[].
      gt_datos_sin_asig[]     = gr_semana->gt_pedidos_sin_asig[].
      gs_dyn100-alv_inf->refresh( ).

    WHEN OTHERS.
  ENDCASE.

ENDFORM.

FORM cambiar_centro USING p_werks TYPE werks_d.

  CHECK gr_semana->g_werks <> p_werks.

  FREE  gr_semana.

  CALL METHOD zclpp_capacidad_asignada=>instanciar_semana
    EXPORTING
      i_werks   = p_werks
      i_mjahr   = gs_dyn100-mjahr
      i_semana  = gs_dyn100-semana
    IMPORTING
      or_semana = gr_semana
      o_rc      = DATA(l_rc).
  IF l_rc = '00'.

    PERFORM refrescar_alvs USING '2'.

  ENDIF.

ENDFORM.


FORM navegar_semana USING p_tp_nav TYPE char1.

  DATA: l_rc TYPE char02.

  CALL METHOD zclpp_capacidad_asignada=>cambiar_semana
    EXPORTING
      i_tp_cambio = p_tp_nav
    IMPORTING
      o_rc        = l_rc
    CHANGING
      cr_semana   = gr_semana.

  PERFORM refrescar_alvs USING 'S'.

ENDFORM.

FORM mover_datos_cap_neta_prod. " USING p_tp_nav TYPE char1.

  gs_dyn100-kg_presu   = gr_semana->g_kg_netos_presup.
  gs_dyn100-kg_asign   = gr_semana->g_kg_capac_asig.
  gs_dyn100-kg_dispo   = gr_semana->g_kg_capac_disp.
  gs_dyn100-kg_ajust   = gr_semana->g_kg_ajust_capac.
  gs_dyn100-porc_disp  = gr_semana->g_porc_disp.
  gs_dyn100-icono_disp = gr_semana->g_icono_disp.

  cl_gui_cfw=>set_new_ok_code( new_code = 'REFR' ).

ENDFORM.
