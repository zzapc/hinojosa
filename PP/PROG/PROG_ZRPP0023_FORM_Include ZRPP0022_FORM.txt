*&---------------------------------------------------------------------*
*&  Include           ZRPP0022_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  BUSCAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM buscar_datos .

  DATA: ls_mov   LIKE LINE OF gt_mov,
        ls_datos LIKE LINE OF gt_datos,
        lv_num   TYPE         i.

  CLEAR: gt_mov, gt_datos.
  REFRESH: gt_mov, gt_datos.

  " Recogemos datos de las tablas:

*  IF p_nstock IS INITIAL. " Sólo con stock positivo
*
*    SELECT b~auart a~aufnr a~matnr c~zzgramaje c~zzancho a~menge
*           a~werks a~charg b~zkunnr1 b~zebelp1 b~zebeln1
*           b~zkunnr2 b~zebelp2 b~zebeln2
*           b~zkunnr3 b~zebelp3 b~zebeln3
*        INTO CORRESPONDING FIELDS OF TABLE gt_mov
*        FROM aufm AS a
*      INNER JOIN aufk AS b ON b~aufnr = a~aufnr
*      INNER JOIN mara AS c ON c~matnr = a~matnr
*      INNER JOIN mchb AS d ON ( d~matnr = a~matnr AND
*                                d~werks = a~werks AND
*                                d~lgort = a~lgort AND
*                                d~charg = a~charg )
*      WHERE a~aufnr IN so_aufnr
*      AND a~matnr IN so_matnr
*      AND a~werks IN so_werks
*      AND a~charg IN so_charg
*      AND a~budat IN so_budat
*      AND b~auart IN so_auart
*      AND a~bwart = '101'
*      AND ( ( b~zkunnr1 IN so_kunnr AND b~zebeln1 IN so_ebeln AND b~zebelp1 IN so_ebelp )
*         OR ( b~zkunnr2 IN so_kunnr AND b~zebeln2 IN so_ebeln AND b~zebelp2 IN so_ebelp )
*         OR ( b~zkunnr3 IN so_kunnr AND b~zebeln3 IN so_ebeln AND b~zebelp3 IN so_ebelp ) )
*      AND c~mtart IN so_mtart
*      AND d~clabs > 0.
*
*  ELSE. " Incluir lotes sin stock
*
*    SELECT b~auart a~aufnr a~matnr c~zzgramaje c~zzancho a~menge
*           a~werks a~charg b~zkunnr1 b~zebelp1 b~zebeln1
*           b~zkunnr2 b~zebelp2 b~zebeln2
*           b~zkunnr3 b~zebelp3 b~zebeln3
*        INTO CORRESPONDING FIELDS OF TABLE gt_mov
*        FROM aufm AS a
*      INNER JOIN aufk AS b ON b~aufnr = a~aufnr
*      INNER JOIN mara AS c ON c~matnr = a~matnr
*      INNER JOIN mchb AS d ON ( d~matnr = a~matnr AND
*                                d~werks = a~werks AND
*                                d~lgort = a~lgort AND
*                                d~charg = a~charg )
*      WHERE a~aufnr IN so_aufnr
*      AND a~matnr IN so_matnr
*      AND a~werks IN so_werks
*      AND a~charg IN so_charg
*      AND a~budat IN so_budat
*      AND b~auart IN so_auart
*      AND a~bwart = '101'
*      AND ( ( b~zkunnr1 IN so_kunnr AND b~zebeln1 IN so_ebeln AND b~zebelp1 IN so_ebelp )
*         OR ( b~zkunnr2 IN so_kunnr AND b~zebeln2 IN so_ebeln AND b~zebelp2 IN so_ebelp )
*         OR ( b~zkunnr3 IN so_kunnr AND b~zebeln3 IN so_ebeln AND b~zebelp3 IN so_ebelp ) )
*      AND c~mtart IN so_mtart.
**      and d~clabs > 0.
*
*  ENDIF.

  IF p_nstock IS INITIAL.

    SELECT mch1~matnr makt~maktx mchb~werks mch1~charg  mara~zzgramaje
           mara~zzancho mchb~clabs mara~meins
      APPENDING CORRESPONDING FIELDS OF TABLE gt_datos
    FROM mch1
      INNER JOIN mchb ON mch1~matnr = mchb~matnr
                     AND mch1~charg = mchb~charg
      INNER JOIN makt ON mch1~matnr = makt~matnr
*      INNER JOIN lfa1 ON mch1~lifnr = lfa1~lifnr
      INNER JOIN mara ON mch1~matnr = mara~matnr
    WHERE mch1~matnr IN so_matnr
    AND mch1~charg IN so_charg
    AND mchb~werks IN so_werks
    AND mchb~lgort IN so_lgort
    AND mchb~clabs > 0
    AND makt~spras = sy-langu
    AND mara~mtart = cs_mtart.

  ELSEIF NOT  p_nstock IS INITIAL.

    SELECT mch1~matnr makt~maktx mchb~werks mch1~charg  mara~zzgramaje
           mara~zzancho mchb~clabs mara~meins
      APPENDING CORRESPONDING FIELDS OF TABLE gt_datos
    FROM mch1
      INNER JOIN mchb ON mch1~matnr = mchb~matnr
                     AND mch1~charg = mchb~charg
      INNER JOIN makt ON mch1~matnr = makt~matnr
*      INNER JOIN lfa1 ON mch1~lifnr = lfa1~lifnr
      INNER JOIN mara ON mch1~matnr = mara~matnr
    WHERE mch1~matnr IN so_matnr
    AND mch1~charg IN so_charg
    AND mchb~werks IN so_werks
    AND mchb~lgort IN so_lgort
*    AND mchb~clabs > 0
    AND makt~spras = sy-langu
    AND mara~mtart = cs_mtart.
  ENDIF.

** Eliminamos duplicados (no queremos todos los movimientos):
*  SORT gt_mov BY auart ASCENDING
*                 aufnr ASCENDING
*                 matnr ASCENDING
*                 werks ASCENDING
*                 charg ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM gt_mov.

* Rellenamos la tabla para el listado (etiquetas a imprimir):

*  LOOP AT gt_mov INTO ls_mov.
*    CLEAR: ls_datos, lv_num.
*    MOVE-CORRESPONDING ls_mov TO ls_datos.
*
*    " Seleccionamos descriptivo material:
*    SELECT SINGLE maktx INTO ls_datos-maktx
*      FROM makt
*      WHERE matnr = ls_datos-matnr
*      AND spras = sy-langu.
*
*    " Peso:
*    lv_num = trunc( ls_mov-menge ).
*    WRITE lv_num TO ls_datos-peso.
*    CONDENSE ls_datos-peso.
*
*    " Seleccionamos valores de las características
*    "(según tipo de orden -> rollo o bobina):
*    " ETIQUETA BOBINA
*    PERFORM f_carac_bobina USING ls_datos-matnr
*                                 ls_datos-charg
*                           CHANGING ls_datos-diametro
*                                    ls_datos-longitud
*                                    ls_datos-f_fab.
*
*
*    " Añadimos número de registros con cliente, pedido y posición
*    " (según tipo de orden -> rollo o bobina):
*
*    " ETIQUETA BOBINA
*    " Se crea un único registro en la tabla de datos:
*    IF ls_mov-zkunnr1 IS NOT INITIAL AND ls_mov-zebeln1 IS NOT INITIAL
*       AND ls_mov-zebelp1 IS NOT INITIAL.
*      ls_datos-kunnr = ls_mov-zkunnr1.
*      ls_datos-ebeln = ls_mov-zebeln1.
*      ls_datos-ebelp = ls_mov-zebelp1.
*      APPEND ls_datos TO gt_datos.
*    ENDIF.
*
*  ENDLOOP.

*  LOOP AT gt_datos INTO ls_datos.
*
*    " Seleccionamos valores de las características
*    " ETIQUETA BOBINA
*    PERFORM f_carac_bobina USING ls_datos-matnr
*                                 ls_datos-charg
*                           CHANGING ls_datos-diametro
*                                    ls_datos-longitud
*                                    ls_datos-f_fab.
*
*  ENDLOOP.



ENDFORM.                    " BUSCAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  F_CARAC_ROLLO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_MATNR  text
*      -->P_LS_DATOS_CHARG  text
*      <--P_LS_DATOS_DIAMETRO  text
*      <--P_LS_DATOS_PESO  text
*      <--P_LS_DATOS_N_TOR  text
*----------------------------------------------------------------------*
FORM f_carac_rollo  USING    p_matnr
                             p_charg
                    CHANGING p_diametro
                             p_n_tor.

  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        lv_num               TYPE i,
        lv_fec_n             TYPE n LENGTH 8.


  CLEAR: p_diametro, p_n_tor.
  CLEAR: lt_alloc_values_num, lt_alloc_values_char, lv_object.
  CLEAR: lt_alloc_values_curr, lt_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char.
  REFRESH: lt_alloc_values_curr, lt_return.


  CLEAR lv_object.
  CONCATENATE p_matnr p_charg INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_ROLLO'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

  LOOP AT lt_alloc_values_num INTO ls_alloc_values_num.
    CASE ls_alloc_values_num-charact.
        " Diámetro (mm)
      WHEN 'Z_DIAMETRO1'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_diametro.
*        REPLACE '.' IN p_diametro WITH space.
        CONDENSE p_diametro.
        " Peso (Kg)
*      WHEN 'Z_PESO1'.
*        CLEAR lv_num.
*        lv_num = ls_alloc_values_num-value_from.
*        WRITE lv_num TO p_peso.
**        REPLACE '.' IN p_peso WITH space.
*        CONDENSE p_peso.
        " Nº Tornadas:
      WHEN 'Z_TORNADAS'.
        CLEAR lv_num.
        lv_num = ls_alloc_values_num-value_from.
        WRITE lv_num TO p_n_tor.
*        REPLACE '.' IN p_n_tor WITH space.
        CONDENSE p_n_tor.
    ENDCASE.
  ENDLOOP.


ENDFORM.                    " F_CARAC_ROLLO
*&---------------------------------------------------------------------*
*&      Form  F_CARAC_BOBINA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_DATOS_MATNR  text
*      -->P_LS_DATOS_CHARG  text
*      <--P_LS_DATOS_DIAMETRO  text
*      <--P_LS_DATOS_PESO  text
*      <--P_LS_DATOS_LONGITUD  text
*      <--P_LS_DATOS_F_FAB  text
*----------------------------------------------------------------------*
FORM f_carac_bobina  USING    p_matnr
                              p_charg
                     CHANGING p_diametro
                              p_longitud
                              p_f_fab.

  DATA: lv_object            TYPE objnum,
        lt_alloc_values_num  TYPE tt_bapi1003_alloc_values_num,
        lt_alloc_values_char TYPE tt_bapi1003_alloc_values_char,
        lt_alloc_values_curr TYPE tt_bapi1003_alloc_values_curr,
        lt_return            TYPE bapiret2_tab,
        ls_alloc_values_num  TYPE bapi1003_alloc_values_num,
        ls_alloc_values_char TYPE bapi1003_alloc_values_char,
        lv_num               TYPE i,
        lv_fec_n             TYPE n LENGTH 8.

* Inicializamos variables:
  CLEAR: p_diametro, p_longitud, p_f_fab.
  CLEAR: lt_alloc_values_num, lt_alloc_values_char, lv_object.
  CLEAR: lt_alloc_values_curr, lt_return.
  REFRESH: lt_alloc_values_num, lt_alloc_values_char, lt_alloc_values_curr, lt_return.

  CLEAR lv_object.
  CONCATENATE p_matnr p_charg INTO lv_object.

  CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
    EXPORTING
      objectkey       = lv_object
      objecttable     = 'MCH1'
      classnum        = 'Z_BOBINA'
      classtype       = '023'
*     KEYDATE         = SY-DATUM
*     UNVALUATED_CHARS       = ' '
*     LANGUAGE        = SY-LANGU
* IMPORTING
*     STATUS          =
*     STANDARDCLASS   =
    TABLES
      allocvaluesnum  = lt_alloc_values_num
      allocvalueschar = lt_alloc_values_char
      allocvaluescurr = lt_alloc_values_curr
      return          = lt_return.

  LOOP AT lt_alloc_values_num INTO ls_alloc_values_num.
    CASE ls_alloc_values_num-charact.
        " Diámetro (mm):
      WHEN 'Z_DIAMETRO'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_diametro.
*        REPLACE '.' IN p_diametro WITH space.
        CONDENSE p_diametro.
*      WHEN 'Z_PESO'.
*        CLEAR lv_num.
*        lv_num = ls_alloc_values_num-value_from.
*        WRITE lv_num TO p_peso.
**        REPLACE '.' IN p_peso WITH space.
*        CONDENSE p_peso.
        " Longitud (m):
      WHEN 'Z_LONGITUD_B'.
        CLEAR lv_num.
        lv_num = trunc( ls_alloc_values_num-value_from ).
        WRITE lv_num TO p_longitud.
*        REPLACE '.' IN p_longitud WITH space.
        CONDENSE p_longitud.
        " Fecha fabricación:
      WHEN 'Z_FECHA_FABRICACION'.
        CLEAR: lv_num, lv_fec_n.
        lv_num = ls_alloc_values_num-value_from.
        lv_fec_n = lv_num.
        WRITE lv_fec_n TO p_f_fab.
        CONDENSE p_f_fab.
        CONCATENATE p_f_fab+6(2) p_f_fab+4(2) p_f_fab+0(4)
                    INTO p_f_fab SEPARATED BY '.'.
    ENDCASE.

  ENDLOOP.

ENDFORM.                    " F_CARAC_BOBINA
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_POPUP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_popup .

  DATA:
    go_popup  TYPE REF TO cl_reca_gui_f4_popup,
    gf_choice TYPE        flag.

  CALL METHOD cl_reca_gui_f4_popup=>factory_grid
    EXPORTING
      it_f4value     = gt_datos[]
      if_multi       = abap_true
      id_title       = text-002
    RECEIVING
      ro_f4_instance = go_popup.

  CALL METHOD go_popup->display
    EXPORTING
      id_start_column = 2 "25 "i_start_column
      id_start_line   = 2 "6  "i_start_line
      id_end_column   = 180 "150 "i_end_column
      id_end_line     = 30 "20 "i_end_line
    IMPORTING
      et_result       = gt_datos[]
      ef_cancelled    = gf_choice.

  IF gf_choice IS INITIAL.
    IF NOT gt_datos[] IS INITIAL.
      PERFORM imprimir_etiqueta.
    ELSE.
      MESSAGE i004(zpp)." DISPLAY LIKE 'I'.
    ENDIF.

  ENDIF.

ENDFORM.                    " MOSTRAR_POPUP
*&---------------------------------------------------------------------*
*&      Form  IMPRIMIR_ETIQUETA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM imprimir_etiqueta .

  DATA: ls_datos  LIKE LINE OF gt_datos,
        ls_bobina TYPE         zspp_etiq_bobina,
        ls_rollo  TYPE         zspp_etiq_rollo,
        lv_answer TYPE         c.

*EAB 07/09/23
  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = 'Mensaje de confirmación'
      text_question         = '¿Desea imprimir las etiquetas seleccionadas?'
      text_button_1         = 'Aceptar'
      icon_button_1         = 'ICON_CHECKED'
      text_button_2         = 'Cancelar'
      icon_button_2         = 'ICON_CANCEL'
      default_button        = '2'
      display_cancel_button = ''
      start_column          = 25
      start_row             = 10
    IMPORTING
      answer                = lv_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.

  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  IF lv_answer = 1.
    LOOP AT gt_datos INTO ls_datos.
      CLEAR: ls_bobina, ls_rollo.

      " Bobina
      " Datos para llamar a la función bobina:
      ls_bobina-matnr = ls_datos-matnr.
      ls_bobina-werks = ls_datos-werks.
      ls_bobina-charg = ls_datos-charg.
*      ls_bobina-aufnr = ls_datos-aufnr.
      ls_bobina-peso = ls_datos-peso.

*YTG- 28/09/2016
      ls_bobina-werks_ent = ls_datos-werks.
*     ls_bobina-arbpl_ent = p_arbpl.
** YTG- 28/09/2016

* 64264 - CMS 16/12/2020
* Se sustituye el MF de impresión para tomar el que imprime tanto A3 como A4
      CALL FUNCTION 'ZMFPP_ETIQ_BOBINA'
        EXPORTING
          i_bobina     = ls_bobina
          i_nodialog   = 'X'
* GST - 29/04/2015 ->
          i_reimp_peso = 'X'.

*    CALL FUNCTION 'ZMFPP_ETIQ_BOBINA_LOTE'
*      EXPORTING
*        i_bobina = ls_bobina.
**        i_nodialog = 'X'.

    ENDLOOP.

    MESSAGE 'Las etiquetas seleccionadas se han imprimido correctamente' TYPE 'S'.

  ELSEIF lv_answer = 2.
    RETURN.
  ENDIF.

ENDFORM.                    " IMPRIMIR_ETIQUETA

* GST - 07/07/2016 ->
*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion_sel .

  DATA: ls_werks LIKE LINE OF so_werks,
        lv_werks TYPE werks_d.

  CLEAR: ls_werks, lv_werks.
  SELECT SINGLE parva FROM usr05
      INTO lv_werks
      WHERE bname = sy-uname AND
      parid = 'WRK'.

  IF lv_werks IS NOT INITIAL.
    ls_werks-sign = 'I'.
    ls_werks-option = 'EQ'.
    ls_werks-low = lv_werks.
    APPEND ls_werks TO so_werks.
  ENDIF.

ENDFORM.                    " INICIALIZACION_SEL

* GST - 07/07/2016 <-
*&---------------------------------------------------------------------*
*&      Form  VALIDACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM validacion .

ENDFORM.                    " VALIDACION
