*&---------------------------------------------------------------------*
*&  Include           ZRPP0028_I01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  CASE gv_okcode.
    WHEN 'BACK'.
      CLEAR: gv_okcode.
      LEAVE PROGRAM.

      "INI - 22.09.17 - ampliación programa
*    WHEN 'PLANI'.
*      CLEAR: gv_okcode.
*      LEAVE TO SCREEN 0300.
      "FIN - 22.09.17 - ampliación programa

    WHEN 'NOTI'.
      CLEAR: gv_okcode.
      LEAVE TO SCREEN 0200.

      "INI - 22.09.17 - ampliación programa
    WHEN 'ALTA'.
      CLEAR: gv_okcode.
*      LEAVE TO SCREEN 0400.
      "FIN - 22.09.17 - ampliación programa


* Si seleccionamos orden, vamos al mismo punto que ZPP0028S
      SET PARAMETER ID: 'ZAUFNR_SEQ' FIELD gv_aufnr,
                        'ZWERKS'     FIELD gv_werks,
                        'ZTURNO'     FIELD gv_turno.

      CALL TRANSACTION 'ZPP0028SEQ'.



  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*&      Module  CAMBIO_TURNO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE cambio_turno INPUT.

  TYPES: tty_dd07v TYPE STANDARD TABLE OF dd07v.
  DATA: lt_turno TYPE tty_dd07v.
  DATA: wa_turno TYPE LINE OF tty_dd07v.
  DATA: lv_answer TYPE c,
        lv_turno  TYPE zzturno.

  DATA: lv_hora_desde(8),
        lv_hora_hasta(8).

  SELECT SINGLE turno hora_desde hora_hasta FROM zpp_turno
    INTO (lv_turno, gv_hora_desde, gv_hora_hasta)
    WHERE turno = gv_turno.

  IF sy-subrc <> 0.
    CLEAR: gv_turno.
    MESSAGE e126(zpp).

  ELSE.
    WRITE gv_hora_desde TO lv_hora_desde USING EDIT MASK '__:__:__'.
    WRITE gv_hora_hasta TO lv_hora_hasta USING EDIT MASK '__:__:__'.


    CONCATENATE lv_hora_desde lv_hora_hasta INTO gv_rango_horas
    SEPARATED BY '-'.

    IF gv_turno <> 'T3'.
      IF sy-uzeit < gv_hora_desde OR sy-uzeit > gv_hora_hasta.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
*           TITLEBAR       = 'Verificación de horas'
*           DIAGNOSE_OBJECT             = ' '
            text_question  = text-003
            text_button_1  = 'Sí'(008)
*           ICON_BUTTON_1  = ' '
            text_button_2  = 'No'(009)
*           ICON_BUTTON_2  = ' '
            default_button = '2'
*           DISPLAY_CANCEL_BUTTON       = 'X'
*           USERDEFINED_F1_HELP         = ' '
*           START_COLUMN   = 25
*           START_ROW      = 6
*           POPUP_TYPE     =
*           IV_QUICKINFO_BUTTON_1       = ' '
*           IV_QUICKINFO_BUTTON_2       = ' '
          IMPORTING
            answer         = lv_answer
*         TABLES
*           PARAMETER      =
          EXCEPTIONS
            text_not_found = 1
            OTHERS         = 2.
        IF sy-subrc <> 0.
*         Implement suitable error handling here
        ELSE.
          IF lv_answer <> '1'.
            CLEAR: gv_turno, gv_rango_horas.
          ELSE.
*            PERFORM obtener_prod_turnos.
          ENDIF.
        ENDIF.
      ELSE.
*        PERFORM obtener_prod_turnos.
      ENDIF.
    ELSE.
      IF ( sy-uzeit >= '220000' AND sy-uzeit <= '235959' ) OR
         ( sy-uzeit >= '000000' AND sy-uzeit <= '055959' ).
*        PERFORM obtener_prod_turnos.
      ELSE.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
*           TITLEBAR       = 'Verificación de horas'
*           DIAGNOSE_OBJECT             = ' '
            text_question  = text-003
            text_button_1  = 'Sí'(008)
*           ICON_BUTTON_1  = ' '
            text_button_2  = 'No'(009)
*           ICON_BUTTON_2  = ' '
            default_button = '2'
*           DISPLAY_CANCEL_BUTTON       = 'X'
*           USERDEFINED_F1_HELP         = ' '
*           START_COLUMN   = 25
*           START_ROW      = 6
*           POPUP_TYPE     =
*           IV_QUICKINFO_BUTTON_1       = ' '
*           IV_QUICKINFO_BUTTON_2       = ' '
          IMPORTING
            answer         = lv_answer
*         TABLES
*           PARAMETER      =
          EXCEPTIONS
            text_not_found = 1
            OTHERS         = 2.
        IF sy-subrc <> 0.
*       Implement suitable error handling here
        ELSE.
          IF lv_answer <> '1'.
            CLEAR: gv_turno, gv_rango_horas.
          ELSE.
*            PERFORM obtener_prod_turnos.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDIF.
ENDMODULE.                 " CAMBIO_TURNO  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  CASE gv_okcode.
    WHEN 'EXIT' OR 'BACK'.
      CLEAR: gv_okcode, gt_entradas.
      REFRESH: gt_entradas.

      CALL SCREEN '100'.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.

  CASE gv_okcode.
    WHEN 'EXIT' OR 'BACK'.
      CLEAR: gv_okcode.
      CALL SCREEN '100'.
  ENDCASE.

ENDMODULE.                 " USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0400  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0400 INPUT.

  DATA: lv_error       TYPE xfeld,
        l_charg_new    TYPE charg_d,
        lt_lines_blank TYPE STANDARD TABLE OF tdline.

  DATA: l_rc TYPE char2.

  CASE gv_okcode.
    WHEN 'EXIT' OR 'BACK'.
      PERFORM clean_vbles.
*      CALL SCREEN '300'. "22.09.17 - ampliación programa
      CALL SCREEN '100'. "22.09.17 - ampliación programa

    WHEN 'ETIQUETA'.
      PERFORM validar_datos USING wa_datos_sel-plnbez
                                  gv_werks
                                  gv_kg
                                  gv_radio
                            CHANGING lv_error.

      CHECK lv_error IS INITIAL.

*      IF lv_error IS INITIAL.
      PERFORM notificar_rollo USING wa_datos_sel
                      CHANGING l_charg_new.
*      ENDIF.

* INI Modif CMS Invocamos pantalla dyn500

      IF g_flag_install_def = abap_false.

        CLEAR gw_out_dyn500. " Ocultar boton de cancelar
        gw_first_time500 = abap_true.
        CLEAR:  gs_k_dyn500 , gs_dyn500.
        gs_k_dyn500-aufnr = gv_aufnr_400.
        gs_k_dyn500-matnr = wa_datos_sel-plnbez.
        gs_k_dyn500-charg = l_charg_new.
        IF go_textedit IS BOUND.
          CLEAR lt_lines_blank[].
          CALL METHOD go_textedit->set_text_as_stream
            EXPORTING
              text = lt_lines_blank[].
        ENDIF.
        gw_notificacion = abap_true.
        CALL SCREEN 500.
      ELSE. "Si Flag_Inactivo = X, no mostraremos pant.Defectos, y generamos etiqueta notificación

        DATA: l_init_diametro TYPE zdiametro,
              l_init_kg       TYPE zpeso.

        CLEAR: l_init_diametro , l_init_kg.
        PERFORM imprimir_etiqueta USING wa_datos_sel
                                l_charg_new
                                l_init_diametro
                                l_init_kg
                               CHANGING l_rc.
      ENDIF.

      RETURN.
* FIN Modif CMS Invocamos pantalla dyn500

      PERFORM clean_vbles.



*    WHEN 'PULPER'.
*      PERFORM validar_datos USING wa_datos_sel-plnbez
*                                  gv_werks
*                                  gv_kg
*                                  gv_radio
*                            CHANGING lv_error.
*
*      IF lv_error IS INITIAL.
*        WHILE gv_pulper IS INITIAL AND lv_error IS INITIAL.
*          PERFORM seleccionar_motivo_pulper CHANGING gv_pulper
*                                                     lv_error.
*        ENDWHILE.
*
*
*        IF lv_error IS INITIAL.
*          PERFORM pulper USING wa_datos_sel
*                               gv_pulper.
*        ENDIF.
*      ENDIF.
*
*      PERFORM clean_vbles.

    WHEN 'CANCELAR'.
      CLEAR: gv_okcode, gv_kg, gv_radio.

  ENDCASE.
ENDMODULE.                 " USER_COMMAND_0400  INPUT
*&---------------------------------------------------------------------*
*&      Module  CAMBIO_FECHA  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE cambio_fecha INPUT.
  DATA: lv_date TYPE sy-datum.

* obtenemos el mes anterior al sy-datum
  CALL FUNCTION 'ADD_TIME_TO_DATE'
    EXPORTING
      i_idate = sy-datum
      i_time  = -1
      i_iprkz = '2'
*     I_RDMHD =
    IMPORTING
      o_idate = lv_date
* EXCEPTIONS
*     INVALID_PERIOD              = 1
*     INVALID_ROUND_UP_RULE       = 2
*     INTERNAL_ERROR              = 3
*     OTHERS  = 4
    .
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ELSE.
    CONCATENATE lv_date(6) '01' INTO lv_date.
  ENDIF.

  IF gv_fecha < lv_date OR gv_fecha > sy-datum.
    CLEAR: gv_fecha.
    MESSAGE e127(zpp).
  ENDIF.
ENDMODULE.                 " CAMBIO_FECHA  INPUT
*&---------------------------------------------------------------------*
*&      Module  CAMBIO_AUFNR  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE cambio_aufnr INPUT.
  DATA: wa_aufk  TYPE aufk.

  DATA: t_aufm       TYPE tty_mov,
        wa_aufm      TYPE LINE OF tty_mov,
        wa_mseg_309  TYPE mseg,
        lv_kg_pulper TYPE mseg-menge.

  DATA: lv_zzebeln1 TYPE zzebeln1,
        lv_zzebelp1 TYPE zzebelp1.
  DATA: t_jest  TYPE TABLE OF jest,
        wa_jest TYPE          jest.

  DATA: lv_objnr TYPE jest-objnr.

  IF gv_aufnr IS NOT INITIAL.

* validamos que la orden indicada sea del centro informado en la dynpro
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gv_aufnr
      IMPORTING
        output = gv_aufnr_int.

    SELECT SINGLE * FROM aufk
      INTO wa_aufk
      WHERE aufnr = gv_aufnr_int.

    IF sy-subrc <> 0.
      CLEAR: gv_aufnr.
      MESSAGE e250(zpp) WITH gv_aufnr_int.
    ELSE.

      SELECT SINGLE * FROM aufk
      INTO wa_aufk
      WHERE aufnr = gv_aufnr_int AND auart = 'ZI01'.
      IF sy-subrc NE 0.
        MESSAGE 'Únicamente se permite notificar órdenes de rollo' TYPE 'E'.
        RETURN.
      ENDIF.

      CONCATENATE 'OR' gv_aufnr_int INTO lv_objnr.

      SELECT * FROM jest
        INTO TABLE t_jest
        WHERE objnr = lv_objnr AND
              stat =  'I0002' AND "liberada
              inact = '' .

      IF sy-subrc = 0.
        gv_werks = wa_aufk-werks.

        SELECT SINGLE b~cputm a~budat
          FROM aufm AS a
             INNER JOIN mkpf AS b ON ( b~mblnr = a~mblnr
                                     AND b~mjahr = a~mjahr )
             INNER JOIN aufk  AS c ON c~aufnr = a~aufnr
             INTO (gv_hora_desde, gv_fecha)
             WHERE a~aufnr = gv_aufnr_int AND
                   a~werks = gv_werks AND
                   c~auart = 'ZI01'.

*INI CMS Fecha = sy-datum
        gv_fecha = sy-datum.
*FIN CMS Fecha = sy-datum


        gv_hora_hasta = gv_hora_desde.


        wa_datos_sel-aufnr = gv_aufnr_int.
        wa_datos_sel-werks = wa_aufk-werks.

        SELECT SINGLE plnbez gamng
          FROM afko
          INTO (wa_datos_sel-plnbez, wa_datos_sel-cantidad)
          WHERE aufnr = gv_aufnr_int.

        SELECT SINGLE maktx
          FROM makt
          INTO wa_datos_sel-desc_matnr
          WHERE matnr = wa_datos_sel-plnbez.

        wa_datos_sel-kunnr_1 = wa_aufk-zzkunnr1.
        SELECT SINGLE name1
          FROM kna1
            INTO wa_datos_sel-name_1
            WHERE kunnr = wa_aufk-zzkunnr1.

        SELECT SINGLE name1
          FROM kna1
          INTO wa_datos_sel-name_2
          WHERE kunnr = wa_aufk-zzkunnr2.

        SELECT SINGLE name1
          FROM kna1
          INTO wa_datos_sel-name_3
          WHERE kunnr = wa_aufk-zzkunnr3.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = wa_aufk-zzebeln1
          IMPORTING
            output = lv_zzebeln1.

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
          EXPORTING
            input  = wa_aufk-zzebelp1
          IMPORTING
            output = lv_zzebelp1.

        CONCATENATE  lv_zzebeln1 lv_zzebelp1 INTO wa_datos_sel-pedido_pos_1
        SEPARATED BY '/'.

        IF wa_aufk-zzebeln2 IS NOT INITIAL.
          wa_datos_sel-pedido_pos_2 = |{ wa_aufk-zzebeln2 ALPHA = OUT }/{ wa_aufk-zzebelp2 ALPHA = OUT }|.
          CONDENSE wa_datos_sel-pedido_pos_2 NO-GAPS.
        ENDIF.

        IF wa_aufk-zzebeln3 IS NOT INITIAL.
          wa_datos_sel-pedido_pos_3 = |{ wa_aufk-zzebeln3 ALPHA = OUT }/{ wa_aufk-zzebelp3 ALPHA = OUT }|.
        ENDIF.

*   calidad
        SELECT SINGLE matkl FROM mara
          INTO wa_datos_sel-calidad
          WHERE matnr = wa_datos_sel-plnbez.

*   Kgs notificados
        SELECT SINGLE wemng FROM afpo
          INTO wa_datos_sel-kilos_notif
          WHERE aufnr = wa_datos_sel-aufnr.

*   Rollos plan y tornadas.
        CASE wa_datos_sel-werks.
          WHEN  '3020'. "Coeficiente 1000 para Sarriá
            wa_datos_sel-rollos = wa_datos_sel-cantidad / 10000.
            wa_datos_sel-tornadas = '3'.
          WHEN '3000'. "Coeficiente 1200 para l'Alquería
            wa_datos_sel-rollos = wa_datos_sel-cantidad / 12000.
            wa_datos_sel-tornadas = '4'.
        ENDCASE.

*   Rollos notificados Y Kgs Pulper
        CLEAR: t_aufm. REFRESH: t_aufm.
        SELECT charg bwart menge FROM aufm
          INTO TABLE t_aufm
          WHERE ( bwart = '101' OR bwart = '102' ) AND
                werks = wa_datos_sel-werks AND
                aufnr = wa_datos_sel-aufnr.

        CLEAR: wa_datos_sel-rollos_notif, wa_datos_sel-kg_pulper.
        LOOP AT t_aufm INTO wa_aufm.
          CLEAR: wa_mseg_309, lv_kg_pulper.

          SELECT SINGLE * FROM mseg
           INTO wa_mseg_309
           WHERE bwart = '309' AND
                 werks = gv_werks AND
                 charg = wa_aufm-charg.

          IF sy-subrc = 0.
            SELECT SINGLE menge FROM mseg
              INTO lv_kg_pulper
              WHERE mblnr = wa_mseg_309-mblnr AND
                mjahr = wa_mseg_309-mjahr AND
              charg <> wa_mseg_309-charg.
          ENDIF.

          CASE wa_aufm-bwart.
            WHEN '101'.
              wa_datos_sel-rollos_notif = wa_datos_sel-rollos_notif + 1. "wa_aufm-menge.
              wa_datos_sel-kg_pulper = wa_datos_sel-kg_pulper + lv_kg_pulper.
            WHEN '102'.
              wa_datos_sel-rollos_notif = wa_datos_sel-rollos_notif - 1. "wa_aufm-menge.
              wa_datos_sel-kg_pulper = wa_datos_sel-kg_pulper - lv_kg_pulper.
          ENDCASE.
        ENDLOOP.
      ELSE.
*       La orden no está liberada
        CLEAR: gv_aufnr.
        MESSAGE e252(zpp). "Orden de fabricación incorrecta
      ENDIF.

*    LEAVE TO SCREEN '0400'.
    ENDIF.
  ELSE.
    CLEAR: gv_aufnr_int.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0500  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0500 INPUT.

  DATA: ls_ztpp030 TYPE ztpp0030,
        ls_ztpp031 TYPE ztpp0031,
        lt_tdline  TYPE STANDARD TABLE OF tdline.

  DATA: fm_name         TYPE rs38l_fnam,
        fp_docparams    TYPE sfpdocparams,
        fp_outputparams TYPE sfpoutputparams.

  DATA ls_zpp0030 TYPE zessdi_defectos.

  DATA: lt_obsv TYPE zessdi_defectos_obsv,
        ls_obsv LIKE LINE OF lt_obsv.
  DATA: ls_lines  LIKE LINE OF lt_lines,
        l_integer TYPE i.
  DATA: l_string TYPE string.
*        l_rc type char2 .

  CASE sy-ucomm.

    WHEN 'BACK'.

      CLEAR l_integer.
      PERFORM comprobar_cambios_observ CHANGING l_integer.

      IF gs_dyn500_cpy <> gs_dyn500 OR l_integer = '1'.

        CLEAR lv_answer.
        PERFORM popup_defectos CHANGING lv_answer.

        IF lv_answer IS INITIAL OR lv_answer = '1'.
          SET SCREEN 0.
        ENDIF.

      ELSE.
        SET SCREEN 0.
      ENDIF.

    WHEN 'ETIQ'.

*      IF gs_dyn500-sin_defectos       IS INITIAL AND
*         gs_dyn500-bob_pulper_total   IS INITIAL AND
*         gs_dyn500-bob_pulper_parcial IS INITIAL AND
*         gs_dyn500-defecto1           IS INITIAL AND
*         gs_dyn500-defecto2           IS INITIAL AND
*         gs_dyn500-defecto3           IS INITIAL AND
*         gs_dyn500-defecto1_lt        IS INITIAL AND
*         gs_dyn500-defecto2_lt        IS INITIAL AND
*         gs_dyn500-defecto3_lt        IS INITIAL AND
*         gs_dyn500-defecto1_lc        IS INITIAL AND
*         gs_dyn500-defecto2_lc        IS INITIAL AND
*         gs_dyn500-defecto3_lc        IS INITIAL AND
*         gs_dyn500-defecto1_c         IS INITIAL AND
*         gs_dyn500-defecto2_c         IS INITIAL AND
*         gs_dyn500-defecto3_c         IS INITIAL .
*
*        MESSAGE i000(0k) WITH text-041.
*        EXIT.
*      ENDIF.

* Si se informa motivo pulper, se debe informar Total o Parcial
      IF ( gs_dyn500-defecto1          IS NOT INITIAL OR
           gs_dyn500-defecto2          IS NOT INITIAL OR
           gs_dyn500-defecto3          IS NOT INITIAL  ) AND
          ( gs_dyn500-bob_pulper_total   IS INITIAL AND
            gs_dyn500-bob_pulper_parcial IS INITIAL ).
        MESSAGE i000(0k) WITH text-044.
        EXIT.
      ENDIF.

* Si se informa Total o Parcial, se debe informar motivo pulper.
      IF ( gs_dyn500-defecto1          IS INITIAL AND
           gs_dyn500-defecto2          IS INITIAL AND
           gs_dyn500-defecto3          IS INITIAL  ) AND
          ( gs_dyn500-bob_pulper_total   IS NOT INITIAL OR
            gs_dyn500-bob_pulper_parcial IS NOT INITIAL ).
        MESSAGE i000(0k) WITH text-043.
        EXIT.
      ENDIF.


      MOVE-CORRESPONDING gs_k_dyn500 TO ls_zpp0030.
      MOVE-CORRESPONDING gs_dyn500   TO ls_zpp0030.

      ls_zpp0030-werks = gv_werks.

      CALL METHOD go_textedit->get_text_as_r3table
        IMPORTING
          table                  = lt_lines
          is_modified            = l_integer
        EXCEPTIONS
          error_dp               = 1
          error_cntl_call_method = 2
          error_dp_create        = 3
          potential_data_loss    = 4
          OTHERS                 = 5.

      CLEAR lt_obsv[].
      IF lt_lines IS NOT INITIAL.
        LOOP AT lt_lines INTO ls_lines.
          ls_obsv-tdline = ls_lines.
          APPEND ls_obsv TO lt_obsv.
        ENDLOOP.

      ENDIF.

      READ TABLE lt_zvpp_carac_recha INTO DATA(ls_carac) WITH KEY atzhl = ls_zpp0030-defecto1.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto1 = ls_carac-atwtb.
      ENDIF.
      READ TABLE lt_zvpp_carac_recha INTO ls_carac WITH KEY atzhl = ls_zpp0030-defecto2.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto2 = ls_carac-atwtb.
      ENDIF.
      READ TABLE lt_zvpp_carac_recha INTO ls_carac WITH KEY atzhl = ls_zpp0030-defecto3.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto3 = ls_carac-atwtb.
      ENDIF.

      READ TABLE lt_zvpp_carac_recha INTO ls_carac WITH KEY atzhl = ls_zpp0030-defecto1_lt.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto1_lt = ls_carac-atwtb.
      ENDIF.
      READ TABLE lt_zvpp_carac_recha INTO ls_carac WITH KEY atzhl = ls_zpp0030-defecto2_lt.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto2_lt = ls_carac-atwtb.
      ENDIF.
      READ TABLE lt_zvpp_carac_recha INTO ls_carac WITH KEY atzhl = ls_zpp0030-defecto3_lt.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto3_lt = ls_carac-atwtb.
      ENDIF.

      READ TABLE lt_zvpp_carac_recha INTO ls_carac WITH KEY atzhl = ls_zpp0030-defecto1_c.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto1_c = ls_carac-atwtb.
      ENDIF.
      READ TABLE lt_zvpp_carac_recha INTO ls_carac WITH KEY atzhl = ls_zpp0030-defecto2_c.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto2_c = ls_carac-atwtb.
      ENDIF.
      READ TABLE lt_zvpp_carac_recha INTO ls_carac WITH KEY atzhl = ls_zpp0030-defecto3_c.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto3_c = ls_carac-atwtb.
      ENDIF.

      READ TABLE lt_zvpp_carac_recha INTO ls_carac WITH KEY atzhl = ls_zpp0030-defecto1_lc.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto1_lc = ls_carac-atwtb.
      ENDIF.
      READ TABLE lt_zvpp_carac_recha INTO ls_carac WITH KEY atzhl = ls_zpp0030-defecto2_lc.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto2_lc = ls_carac-atwtb.
      ENDIF.
      READ TABLE lt_zvpp_carac_recha INTO ls_carac WITH KEY atzhl = ls_zpp0030-defecto3_lc.
      IF sy-subrc EQ 0.
        ls_zpp0030-defecto3_lc = ls_carac-atwtb.
      ENDIF.

* Impresión de etiqueta de Notificación.
      IF gw_notificacion = abap_true.
        PERFORM imprimir_etiqueta USING gwa_datos_sel
                                        gv_charg_new
                                        gwa_body-diametro
                                        gwa_body-brgew
                                   CHANGING l_rc.
      ENDIF.

      IF gw_notificacion = abap_true. " Si se ha creado eti.notif.rollo, usamos los mismos parms sin dialogo

        fp_outputparams = gs_printparms.
        fp_outputparams-nodialog = 'X'.
        gw_notificacion = abap_false. " Fin de utilidad de flag, lo limpiamos para futuros tratamientos
      ELSE. "en caso de REimpresion de etiqueta de defectos, SI mostraremos dialogo y hallamos impresoroa de usuario
        DATA: lv_padest TYPE rspopname.

        CLEAR lv_padest.

        lv_padest = zcl_utils_hpap_pp=>determinar_disp_impresion( ).

*        SELECT SINGLE padest INTO lv_padest
*          FROM ztpp0007
*          WHERE werks = ls_zpp0030-werks
*          AND auart = 'ZI01'
*          AND uname = sy-uname.
*
*        IF lv_padest IS INITIAL.
*          SELECT SINGLE padest INTO lv_padest
*            FROM ztpp0007
*            WHERE werks = ls_zpp0030-werks
*            AND auart = 'ZI01'.
*        ENDIF.

        IF lv_padest IS NOT INITIAL.
          CLEAR fp_outputparams.
          fp_outputparams-dest = lv_padest.
          fp_outputparams-reqimm = 'X'.
          fp_outputparams-nodialog = ' '. " No diálogo
          fp_outputparams-reqnew = 'X'.
          fp_outputparams-copies    = 2.
        ELSE.
          CLEAR fp_outputparams.
          fp_outputparams-dest = 'LOCA'.
          fp_outputparams-reqimm = 'X'.
          fp_outputparams-nodialog = ' '. " No diálogo
          fp_outputparams-reqnew = 'X'.
          fp_outputparams-copies    = 2.
        ENDIF.
      ENDIF.

* Impresión de etiqueta de Notificación de defectos.
      CALL FUNCTION 'FP_JOB_OPEN'
        CHANGING
          ie_outputparams = fp_outputparams
        EXCEPTIONS
          cancel          = 1
          usage_error     = 2
          system_error    = 3
          internal_error  = 4
          OTHERS          = 5.
      IF sy-subrc <> 0.
        IF sy-subrc EQ 1.
*      MESSAGE 'Proceso cancelado' TYPE 'S'.
        ELSE.
          MESSAGE 'Error FP_JOB_OPEN' TYPE 'S' DISPLAY LIKE 'E'.
        ENDIF.
        EXIT.
      ENDIF.

      DATA: l_formulari TYPE fpname.

      CLEAR l_formulari.
      CASE gs_dyn500-sin_defectos.

        WHEN 'X'.  l_formulari = c_form_sin_defec.

        WHEN ' '.  l_formulari = c_form_defectos.
        WHEN OTHERS.
      ENDCASE.

      CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'           "& Form Processing Generation
        EXPORTING
          i_name     = l_formulari
        IMPORTING
          e_funcname = fm_name.

      CALL FUNCTION fm_name
        EXPORTING
          /1bcdwb/docparams = fp_docparams
          defectos          = ls_zpp0030
          observaciones     = lt_obsv
          observaciones2    = l_string
        EXCEPTIONS
          usage_error       = 1
          system_error      = 2
          internal_error    = 3.


      CALL FUNCTION 'FP_JOB_CLOSE'
        EXCEPTIONS
          usage_error    = 1
          system_error   = 2
          internal_error = 3
          OTHERS         = 4.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      PERFORM save. " using gs_k_dyn500

      CLEAR: gv_kg , gv_radio. "Limpiamos los datos introducidos y procesado de la nueva notif. de rollo.

      SET SCREEN 0.

    WHEN 'PULPER_TOTAL'.

      IF gs_dyn500-bob_pulper_total EQ abap_true.
        CLEAR gs_dyn500-bob_pulper_parcial.
      ENDIF.

    WHEN 'PULPER_PARCIAL'.

      IF gs_dyn500-bob_pulper_parcial EQ abap_true.
        CLEAR gs_dyn500-bob_pulper_total.
      ENDIF.

    WHEN 'SAVE'.

      PERFORM save.

    WHEN OTHERS.

  ENDCASE.

ENDMODULE.
