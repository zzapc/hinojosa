***********************************************************************
* TIPO : LISTADO
* TITULO : Lista ultimos desarrollos
* DESCRIPCION : Lista ultimos desarrollos
*
* AUTOR: Andrés Picazo                                FECHA: 18/04/2017
*
***********************************************************************
REPORT zap_dev.


*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: zap_dev_est, *zap_dev_est, e071, zap_dev_hist.

*------TABLAS INTERNAS-------------------------------------------------*
DATA: zap_dev       TYPE zap_dev,
      g_zap_dev_est TYPE zap_dev_est.

*------VARIABLES-------------------------------------------------------*
DATA: list1     TYPE string,
      list2     TYPE string,
      list3     TYPE string,
      busqueda  TYPE string,
      *busqueda TYPE string.

*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*

CLASS lcl_event_grid DEFINITION INHERITING FROM zcl_ap_alv_grid_eventos FINAL.
  PUBLIC SECTION.
    METHODS: double_click          REDEFINITION,
             data_changed          REDEFINITION,
             data_changed_finished REDEFINITION,
             toolbar               REDEFINITION,
             user_command          REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF  t_listado,
             check   TYPE xfeld,
             lights  TYPE zico_estado_mensaje,
             objeto  TYPE zap_dev_est-objeto,
             tipo    TYPE zap_dev_est-tipo,
             valor1  TYPE zap_dev-valor1,
             valor2  TYPE zap_dev-valor2,
             valor3  TYPE zap_dev-valor3,
             texto   TYPE zap_dev-texto,
             erdat   TYPE zap_dev-erdat,
             erzet   TYPE zap_dev-erzet,
             text    TYPE trdirt-text,
             trkorr  TYPE e071-trkorr,
             string  TYPE zap_dev-string,
             message TYPE bapi_msg,
             style   TYPE lvc_t_styl,
             color   TYPE lvc_t_scol,
             tabix   TYPE sy-tabix,
           END OF t_listado,
           tt_listado TYPE STANDARD TABLE OF t_listado.

    DATA: i_listado     TYPE tt_listado,
          i_tcode       TYPE tt_listado,
          i_pc          TYPE tt_listado,
*          o_timer       TYPE REF TO zcl_ap_utils,
          o_alv         TYPE REF TO zcl_ap_alv_grid,
          o_alv_t       TYPE REF TO zcl_ap_alv_grid,
          o_alv_p       TYPE REF TO zcl_ap_alv_grid,
          o_event       TYPE REF TO lcl_event_grid,
          o_event_t     TYPE REF TO lcl_event_grid,
          o_event_p     TYPE REF TO lcl_event_grid,
          o_texto       TYPE REF TO zcl_ap_control_texto,
          i_e070        TYPE TABLE OF e070,
          r_trkorr      TYPE RANGE OF e070-trkorr,
          zedit         TYPE repname,
          zap_dev_info  TYPE repname,
          i_filtro_1    TYPE tpda_vrm_values,
          i_filtro_2    TYPE tpda_vrm_values,
          i_filtro_3    TYPE tpda_vrm_values,
          l_filtro      TYPE tpda_vrm_value,
          texto_control TYPE string,
          v_grid_ok     TYPE c LENGTH 1.

    METHODS: buscar_datos REDEFINITION,

      validaciones IMPORTING !mod    TYPE abap_bool DEFAULT ''
                   CHANGING  listado TYPE t_listado,

      status_dynpro_0100,
      command_dynpro_0100,
      editar IMPORTING !list TYPE t_listado OPTIONAL.

  PRIVATE SECTION.
    METHODS: backup,
             restore,
             get_obj_ots,

      get_list
        IMPORTING objeto      TYPE zap_dev-objeto
                  tipo        TYPE zap_dev-tipo
        RETURNING VALUE(list) TYPE t_listado,

      grabar.

ENDCLASS.

DATA: o_prog TYPE REF TO zcl_report,
      l_list TYPE o_prog->t_listado.

PARAMETERS p_max TYPE i DEFAULT 200 NO-DISPLAY.

************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************
CLASS lcl_event_grid IMPLEMENTATION.
  METHOD double_click.
    DATA l_listado TYPE o_prog->t_listado.

    FIELD-SYMBOLS <listado> TYPE o_prog->t_listado.

    CASE tabla.
      WHEN 'TCODE'.
        ASSIGN o_prog->i_tcode[ e_row-index ] TO <listado>.
        IF sy-subrc = 0.
          MOVE-CORRESPONDING <listado> TO zap_dev_est.
          CASE e_column.
            WHEN 'VALOR1' OR 'VALOR2' OR 'VALOR3' OR 'TIPO'.
              o_prog->ucomm = 'EDITAR'.
              o_prog->editar( list = <listado> ).
            WHEN 'TEXT'.
              SELECT SINGLE pgmna FROM tstc
                INTO zap_dev_est-objeto
               WHERE tcode = zap_dev_est-objeto.
              IF sy-subrc = 0.
                IF NOT zap_dev_est-objeto IS INITIAL.
                  *zap_dev_est = zap_dev_est.
                  zap_dev_est-objeto = *zap_dev_est-objeto.
                  zap_dev_est-tipo   = 'RE'.
                  *zap_dev_est = zap_dev_est.
                  g_zap_dev_est = *zap_dev_est.
                  READ TABLE o_prog->i_listado INTO l_listado WITH KEY objeto = zap_dev_est-objeto.
                  IF sy-subrc <> 0.
                    SELECT * FROM zap_dev               "#EC CI_NOFIRST
                      INTO CORRESPONDING FIELDS OF l_listado
                      UP TO 1 ROWS
                    WHERE objeto = zap_dev_est-objeto AND tipo = zap_dev_est-tipo
                     ORDER BY PRIMARY KEY.
                    ENDSELECT.
                    IF sy-subrc <> 0.
                      MOVE-CORRESPONDING zap_dev_est TO l_listado.
                      APPEND l_listado TO o_prog->i_listado.
                    ENDIF.
                  ENDIF.
                  o_prog->ucomm = 'EDITAR'.
                  o_prog->editar( list = l_listado ).
                ENDIF.
              ENDIF.

            WHEN OTHERS.
              o_prog->ucomm = 'EJEC'.
              o_prog->editar( list = <listado> ).
          ENDCASE.
          o_prog->o_alv_t->refrescar_grid( ).
        ENDIF.
      WHEN 'PC'.
        ASSIGN o_prog->i_pc[ e_row-index ] TO <listado>.
        IF sy-subrc = 0.
          MOVE-CORRESPONDING <listado> TO zap_dev_est.
*          CASE e_column.
*            WHEN 'VALOR1' OR 'VALOR2' OR 'VALOR3' OR 'TIPO'.
*              o_prog->ucomm = 'EDITAR'.
*              o_prog->editar( list = <listado> ).
*            WHEN OTHERS.
          o_prog->ucomm = 'LINK'.
          o_prog->editar( list = <listado> ).
*          ENDCASE.
          o_prog->o_alv_p->refrescar_grid( ).
        ENDIF.
      WHEN OTHERS.
        ASSIGN o_prog->i_listado[ e_row-index ] TO <listado>.
        IF sy-subrc = 0.
          MOVE-CORRESPONDING <listado> TO zap_dev_est.
          CASE e_column.
            WHEN 'VALOR1'.
              IF <listado>-objeto(1) = 'Z'.
                o_prog->ucomm = 'EDITAR'.
              ELSE.
                o_prog->ucomm = 'VIS'.
              ENDIF.
              o_prog->editar( list = <listado> ).
            WHEN 'LIGHTS'.
              o_prog->ucomm = 'EJEC'.
              o_prog->editar( list = <listado> ).
            WHEN 'TRKORR'.
              IF NOT <listado>-trkorr IS INITIAL.
                SUBMIT zlist_orden_transporte            "#EC CI_SUBMIT
                  AND RETURN
                       WITH s_korr = <listado>-trkorr
                       WITH p_transp = ''
                       WITH p_pend = 'X'
                       WITH p_detal = 'X'.
              ELSE.
                SUBMIT zlist_orden_transporte            "#EC CI_SUBMIT
                  AND RETURN
                       WITH s_name = <listado>-texto
                       WITH p_transp = ''
                       WITH p_detal = 'X'.
              ENDIF.
            WHEN OTHERS.
              IF sy-sysid = zcl_c=>entorno_desarrollo AND <listado>-objeto(1) = 'Z'.
                o_prog->ucomm = 'EDITAR'.
              ELSE.
                o_prog->ucomm = 'VIS'.
              ENDIF.
              o_prog->editar( list = <listado> ).
          ENDCASE.
          o_prog->o_alv->refrescar_grid( ).
        ENDIF.
    ENDCASE.
  ENDMETHOD.

  METHOD toolbar.
    super->toolbar( e_object = e_object e_interactive = e_interactive ).
    IF tabla = ''.
      add_boton( function = 'EDT_TEXT' icon = icon_text_act text = 'Editar texto' quickinfo = 'Editar text' e_object = e_object ).
    ENDIF.
  ENDMETHOD.

  METHOD user_command.
    FIELD-SYMBOLS <listado> TYPE o_prog->t_listado.

    CASE e_ucomm.
      WHEN 'EDT_TEXT'.
        IF o_prog->o_texto->es_editable( ) = ''.
          o_prog->o_texto->set_editable( 'X' ).
        ELSE.
          o_prog->o_texto->set_editable( '' ).
        ENDIF.

      WHEN 'BORRAR'.
        CASE tabla.
          WHEN 'TCODE'.
            o_prog->o_alv_t->set_marca_filas_sel( EXPORTING validar_seleccion = 'X' CHANGING t_tabla = o_prog->i_tcode ).
            LOOP AT o_prog->i_tcode ASSIGNING <listado> WHERE check = 'X'.
              DELETE FROM zap_dev WHERE cliente = zcl_c=>cliente_tasks AND sysid = sy-sysid AND ernam = sy-uname AND objeto = <listado>-objeto AND tipo = <listado>-tipo.
              DELETE o_prog->i_tcode.
            ENDLOOP.
            o_prog->o_alv_t->set_marca_filas_sel( CHANGING t_tabla = o_prog->i_tcode ).
            o_prog->o_alv_t->refrescar_grid( ).
          WHEN 'PC'.
            o_prog->o_alv_p->set_marca_filas_sel( EXPORTING validar_seleccion = 'X' CHANGING t_tabla = o_prog->i_pc ).
            LOOP AT o_prog->i_pc ASSIGNING <listado> WHERE check = 'X'.
              DELETE FROM zap_dev WHERE cliente = zcl_c=>cliente_tasks AND sysid = sy-sysid AND ernam = sy-uname AND objeto = <listado>-objeto AND tipo = <listado>-tipo.

              DELETE o_prog->i_pc.
            ENDLOOP.
            o_prog->o_alv_p->set_marca_filas_sel( CHANGING t_tabla = o_prog->i_pc ).
            o_prog->o_alv_p->refrescar_grid( ).
          WHEN OTHERS.
            o_prog->o_alv->set_marca_filas_sel( EXPORTING validar_seleccion = 'X' CHANGING t_tabla = o_prog->i_listado ).
            LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
              DELETE FROM zap_dev WHERE cliente = zcl_c=>cliente_tasks AND sysid = sy-sysid AND ernam = sy-uname AND objeto = <listado>-objeto AND tipo = <listado>-tipo.

              DELETE o_prog->i_listado.
            ENDLOOP.
            o_prog->o_alv->set_marca_filas_sel( CHANGING t_tabla = o_prog->i_listado ).
            o_prog->o_alv->refrescar_grid( ).
        ENDCASE.

      WHEN OTHERS.
        super->user_command( e_ucomm = e_ucomm ).
    ENDCASE.
  ENDMETHOD.

  METHOD data_changed.
    DATA l_listado TYPE o_prog->t_listado.

    ini_data_changed( cambios = er_data_changed->mt_good_cells ).

    LOOP AT i_cambios_celda INTO cambio_celda.
      AT NEW row_id.
        CLEAR l_listado.
        CASE tabla.
          WHEN 'TCODE'.
            READ TABLE o_prog->i_tcode INTO l_listado INDEX cambio_celda-row_id. "#EC CI_SUBRC
          WHEN 'PC'.
            READ TABLE o_prog->i_pc INTO l_listado INDEX cambio_celda-row_id. "#EC CI_SUBRC
          WHEN OTHERS.
            READ TABLE o_prog->i_listado INTO l_listado INDEX cambio_celda-row_id. "#EC CI_SUBRC
        ENDCASE.
      ENDAT.

      set_valor_mod( CHANGING datos = l_listado ).

      AT END OF row_id.
        o_prog->validaciones( EXPORTING mod = 'X' CHANGING listado = l_listado ).
        MODIFY o_prog->i_listado FROM l_listado INDEX cambio_celda-row_id.

        CASE tabla.
          WHEN 'TCODE'.
            MODIFY o_prog->i_tcode FROM l_listado INDEX cambio_celda-row_id.
          WHEN 'PC'.
            MODIFY o_prog->i_pc FROM l_listado INDEX cambio_celda-row_id.
          WHEN OTHERS.
            MODIFY o_prog->i_listado FROM l_listado INDEX cambio_celda-row_id.
        ENDCASE.

        CLEAR zap_dev.
        MOVE-CORRESPONDING l_listado TO zap_dev.
        zap_dev-cliente = zcl_c=>cliente_tasks.
*        o_prog->o_texto->get_editor( IMPORTING string = zap_dev-string ).
        zap_dev-sysid   = sy-sysid.
        zap_dev-ernam   = sy-uname.
        zap_dev-erdat   = sy-datum.
        zap_dev-erzet   = sy-uzeit.
        MODIFY zap_dev FROM zap_dev.
      ENDAT.
    ENDLOOP.
  ENDMETHOD.

  METHOD data_changed_finished.
    IF NOT tabla_data_changed IS INITIAL.
      o_alv->refrescar_grid( ).
      CLEAR tabla_data_changed.
    ENDIF.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD buscar_datos.
    FIELD-SYMBOLS: <e070>    TYPE e070,
                   <listado> TYPE t_listado.

    DATA: r_busqueda  TYPE RANGE OF string,
          lr_busqueda LIKE LINE OF r_busqueda,
          l_listado   TYPE t_listado,
          lr_trkorr   LIKE LINE OF r_trkorr.

    zedit = 'ZEDIT'.
    zap_dev_info = 'ZBCUT011'.

*    CLEAR: g_zap_dev_est, zap_dev, zap_dev_est.

    IF o_cache->i_cache_mem IS INITIAL AND sy-sysid <> zcl_c=>entorno_produccion.
      o_cache->get_shma( ).
      DELETE o_cache->i_cache_mem WHERE tabla = 'E071'.
    ENDIF.

    CASE zcl_c=>cliente_tasks.
      WHEN 'VOS'.
        zedit = 'ZBCVX019'.
        zap_dev_info = 'ZAP_DEV_INFO'.
*      WHEN 'FGV'.
*        zedit = 'ZBCU0003'.
    ENDCASE.

    SELECT SINGLE obj_name FROM tadir
      INTO zedit
     WHERE pgmid    = 'R3TR'
       AND object   = 'PROG'
       AND obj_name = zedit.
    IF sy-subrc <> 0.
      CLEAR zedit.
    ENDIF.

    IF i_e070 IS INITIAL.
      SELECT DISTINCT trkorr FROM tlock                 "#EC CI_NOFIELD
        INTO CORRESPONDING FIELDS OF TABLE i_e070  ##TOO_MANY_ITAB_FIELDS
       WHERE author = sy-uname.
      LOOP AT i_e070 ASSIGNING <e070>.
        __rangoc_eq r_trkorr <e070>-trkorr.
      ENDLOOP.
    ENDIF.

    CLEAR lr_busqueda.
    lr_busqueda-option = 'CP'.
    lr_busqueda-sign   = 'I'.
    CONCATENATE '*' busqueda '*' INTO lr_busqueda-low.
    APPEND lr_busqueda TO r_busqueda.
    lr_busqueda-low = to_lower( lr_busqueda-low ).
    APPEND lr_busqueda TO r_busqueda.
    lr_busqueda-low = to_upper( lr_busqueda-low ).
    APPEND lr_busqueda TO r_busqueda.

    sgpi_texto( 'Seleccionando datos' ).
    CLEAR: i_listado, i_tcode, i_pc.
    SELECT * FROM zap_dev
      INTO CORRESPONDING FIELDS OF TABLE i_listado ##TOO_MANY_ITAB_FIELDS
      UP TO p_max ROWS
     WHERE cliente = zcl_c=>cliente_tasks
       AND sysid   = sy-sysid
       AND ernam   = sy-uname
       AND (    objeto IN r_busqueda
             OR valor1 IN r_busqueda
             OR valor2 IN r_busqueda
             OR valor3 IN r_busqueda
             OR texto  IN r_busqueda
             OR titulo IN r_busqueda )
       ORDER BY erdat DESCENDING erzet DESCENDING.

    ASSIGN i_listado[ 1 ] TO <listado>.
    IF sy-subrc = 0.
      l_listado = <listado>.
    ENDIF.

    o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
    LOOP AT i_listado ASSIGNING <listado>.
      <listado>-tabix = sy-tabix.
      sgpi_texto( texto1 = 'Procesando datos' cant_porc = 100 ).

      validaciones( CHANGING listado = <listado> ).

      IF <listado>-tipo = 'TR'.
        APPEND <listado> TO i_tcode.
        DELETE i_listado.
      ELSEIF <listado>-tipo = 'PC' OR <listado>-tipo = 'UR' OR <listado>-tipo = 'NO' OR <listado>-tipo = 'RT'.
        APPEND <listado> TO i_pc.
        DELETE i_listado.
      ENDIF.
    ENDLOOP.

    IF NOT l_listado IS INITIAL.
      IF v_grid_ok IS INITIAL.
        MOVE-CORRESPONDING l_listado TO zap_dev_est.

        o_texto->set_editor( string = l_listado-string display_mode = 'X' ).
        ucomm = 'INICIO'.
        editar( list = l_listado ).
      ENDIF.
    ELSE.
      zap_dev_est-tipo = 'RE'.
    ENDIF.

    IF inicio = 'X'.
      o_alv->set_seleccion( CHANGING t_tabla = i_listado ).
      o_alv->refrescar_grid( new_code = 'ENTER' ).
    ENDIF.

    IF NOT o_alv_t IS INITIAL.
      o_alv_t->refrescar_grid( ).
    ENDIF.

    IF NOT o_alv_p IS INITIAL.
      o_alv_p->refrescar_grid( ).
    ENDIF.
  ENDMETHOD.                                               " seleccionar_datos

  METHOD command_dynpro_0100.
    DATA: l_hay_sel TYPE c LENGTH 1,
          l_list    TYPE t_listado,
          l_ok      TYPE c LENGTH 1.

    FIELD-SYMBOLS <listado> TYPE t_listado.

    CLEAR l_hay_sel.
    IF NOT ( sy-ucomm = 'BACK' OR sy-ucomm = 'GRABAR' ).
      o_alv->set_marca_filas_sel( CHANGING t_tabla = i_listado hay_sel = l_hay_sel ).
      IF l_hay_sel = 'X'.
        ASSIGN i_listado[ check = 'X' ] TO <listado>.
        IF sy-subrc = 0.
          MOVE-CORRESPONDING <listado> TO zap_dev_est.
          *zap_dev_est = zap_dev_est.
        ENDIF.
      ENDIF.
    ENDIF.

*    IF NOT *zap_dev_est IS INITIAL.
*      zap_dev_est = *zap_dev_est.
*      CLEAR *zap_dev_est.
*    ENDIF.

    CLEAR texto_control.
    o_texto->get_editor( IMPORTING string = texto_control ).
    string = texto_control.

    IF sy-ucomm = 'BACK' OR sy-ucomm = 'GRABAR'.
      LOOP AT i_listado ASSIGNING <listado> WHERE erdat = sy-datum.
        CLEAR zap_dev_hist.
        MOVE-CORRESPONDING <listado> TO zap_dev_hist.
        zap_dev_hist-cliente = zcl_c=>cliente_tasks.
        zap_dev_hist-sysid   = sy-sysid.
        zap_dev_hist-ernam   = sy-uname.
        MODIFY zap_dev_hist FROM zap_dev_hist.
      ENDLOOP.
      LOOP AT i_tcode ASSIGNING <listado> WHERE erdat = sy-datum.
        CLEAR zap_dev_hist.
        MOVE-CORRESPONDING <listado> TO zap_dev_hist.
        zap_dev_hist-cliente = zcl_c=>cliente_tasks.
        zap_dev_hist-sysid   = sy-sysid.
        zap_dev_hist-ernam   = sy-uname.
        MODIFY zap_dev_hist FROM zap_dev_hist.
      ENDLOOP.
      LOOP AT i_pc ASSIGNING <listado> WHERE erdat = sy-datum.
        CLEAR zap_dev_hist.
        MOVE-CORRESPONDING <listado> TO zap_dev_hist.
        zap_dev_hist-cliente = zcl_c=>cliente_tasks.
        zap_dev_hist-sysid   = sy-sysid.
        zap_dev_hist-ernam   = sy-uname.
        MODIFY zap_dev_hist FROM zap_dev_hist.
      ENDLOOP.
    ENDIF.

    IF sy-ucomm = 'BACK'.
      IF NOT o_cache->i_cache_mem IS INITIAL.
        o_cache->set_shma( ).
      ENDIF.
    ENDIF.

    command_dynpro( EXPORTING o_alv         = o_alv
                              seleccion     = ''
                    CHANGING  i_listado     = i_listado
                              i_listado_ini = i_listado
                              hay_sel       = l_hay_sel ).

    CASE ucomm.
      WHEN 'ENTER'.
        IF busqueda <> *busqueda.
          buscar_datos( ).
        ELSEIF NOT *zap_dev_est-objeto IS INITIAL AND zap_dev_est-objeto <> *zap_dev_est-objeto.
          l_list = get_list( objeto = zap_dev_est-objeto tipo = zap_dev_est-tipo ).
          MOVE-CORRESPONDING l_list TO zap_dev_est.
          o_texto->set_editor( string = l_list-string display_mode = 'X' ).
          g_zap_dev_est = zap_dev_est.
        ENDIF.
      WHEN 'GRABAR'.
        grabar( ).
        LEAVE TO SCREEN 0100.

      WHEN 'EJEC' OR 'EDITAR' OR 'VIS'.
        editar( ).
      WHEN 'NUEVO'.
        CLEAR: zap_dev, zap_dev_est, g_zap_dev_est.
      WHEN 'REFRESH'.
        buscar_datos( ).
      WHEN 'LIST'.
        SUBMIT zap_dev_list VIA SELECTION-SCREEN AND RETURN. "#EC CI_SUBMIT
      WHEN 'DEV'.
        o_alv->set_marca_filas_sel( CHANGING t_tabla = i_listado ).
        __def_rangoc progname.
        LOOP AT i_listado ASSIGNING <listado> WHERE check = 'X'.
          __rangoc_eq r_progname <listado>-texto.
        ENDLOOP.
        IF sy-subrc = 0.
          SUBMIT (zap_dev_info) WITH s_report IN r_progname AND RETURN. "#EC CI_SUBMIT
        ELSE.
          SUBMIT (zap_dev_info) VIA SELECTION-SCREEN AND RETURN. "#EC CI_SUBMIT
        ENDIF.
      WHEN 'OT'.
        SUBMIT zap_ots AND RETURN.                       "#EC CI_SUBMIT
      WHEN 'SQL'.
        SUBMIT zsql_apc AND RETURN.                      "#EC CI_SUBMIT

      WHEN 'M01'.
        CALL TRANSACTION 'ZAPCL'.                        "#EC CI_CALLTA
      WHEN 'M02'.
        IF NOT zedit IS INITIAL.
          IF l_hay_sel = 'X'.
            LOOP AT i_listado ASSIGNING <listado> WHERE check = 'X'.
              SUBMIT (zedit) AND RETURN WITH programm = <listado>-texto. "#EC CI_SUBMIT
            ENDLOOP.
          ELSEIF NOT zap_dev_est-objeto IS INITIAL.
            SUBMIT (zedit) AND RETURN WITH programm = zap_dev_est-objeto. "#EC CI_SUBMIT
          ENDIF.
        ENDIF.
      WHEN 'M03'.
        SUBMIT zap_dev                                   "#EC CI_SUBMIT
               WITH p_max = 99999.
      WHEN 'FILTRO'.
        CLEAR o_alv->i_filter.
        IF NOT list1 IS INITIAL.
          o_alv->add_filtro( campo = 'VALOR1' valor = list1 ).
        ENDIF.
        IF NOT list2 IS INITIAL.
          o_alv->add_filtro( campo = 'VALOR2' valor = list2 ).
        ENDIF.
        IF NOT list3 IS INITIAL.
          IF list3 = 'TODAS'.
            o_alv->add_filtro( campo = 'TRKORR' valor = '' sign = 'E' ).
          ELSE.
            o_alv->add_filtro( campo = 'TRKORR' valor = list3 ).
          ENDIF.
        ENDIF.
        o_alv->o_grid->set_filter_criteria( o_alv->i_filter ).
*        o_alv->refrescar_grid( ).
      WHEN 'M04'.
        LOOP AT i_listado ASSIGNING <listado> WHERE trkorr <> ''.
          e071-trkorr = <listado>-trkorr.
          EXIT.
        ENDLOOP.
        zcl_ap_popup=>popup_usuario( EXPORTING campo1 = 'E071-TRKORR'
                                               titulo = 'Indique OT'
                                     IMPORTING return = l_ok
                                     CHANGING  valor1 = e071-trkorr ).
        IF l_ok <> 'A' AND NOT e071-trkorr IS INITIAL.
          MESSAGE 'TODO!' TYPE 'I'.
        ENDIF.
      WHEN 'M05'.
        SET PARAMETER ID 'DTB' FIELD zap_dev_est-objeto.
        SET PARAMETER ID 'ZSE16N' FIELD 'X' ##EXISTS.
        CALL TRANSACTION 'SE16N'.                        "#EC CI_CALLTA
        SET PARAMETER ID 'ZSE16N' FIELD '' ##EXISTS.
      WHEN 'M06'.
        backup( ).
      WHEN 'M07'.
        restore( ).
      WHEN 'M08'.
        get_obj_ots( ).
    ENDCASE.
  ENDMETHOD.

  METHOD status_dynpro_0100.
    FIELD-SYMBOLS <listado> TYPE t_listado.

    CLEAR ucomm.

    IF NOT g_zap_dev_est IS INITIAL.
      zap_dev_est = g_zap_dev_est.
    ENDIF.

    o_alv->registrar_mod( ).
    o_alv->set_campos_tabint( i_listado[] ).
    o_alv->set_field_text( campo = 'TEXTO' valor = 'Desarrollo' ).
    o_alv->set_field_text( campo = 'VALOR1' valor = 'Var 1' ).
    o_alv->set_field_text( campo = 'VALOR2' valor = 'Var 2' ).
    o_alv->set_field_text( campo = 'VALOR3' valor = 'Var 3' ).
    o_alv->quitar_botones( insercion = 'X' operaciones = 'X' resto = 'X' ).

    IF inicio IS INITIAL.
      LOOP AT i_listado ASSIGNING <listado> WHERE NOT valor1 IS INITIAL.
        l_filtro-key  = <listado>-valor1.
        l_filtro-text = <listado>-valor1.
        COLLECT l_filtro INTO i_filtro_1.
      ENDLOOP.
      SORT i_filtro_1.
      zcl_ap_popup=>list_dynpro( campo   = 'LIST1'
                                 valores = i_filtro_1[] ).

      LOOP AT i_listado ASSIGNING <listado> WHERE NOT valor2 IS INITIAL.
        l_filtro-key  = <listado>-valor2.
        l_filtro-text = <listado>-valor2.
        COLLECT l_filtro INTO i_filtro_2.
      ENDLOOP.
      SORT i_filtro_2.
      zcl_ap_popup=>list_dynpro( campo   = 'LIST2'
                                 valores = i_filtro_2[] ).

      l_filtro-key  = 'TODAS'.
      l_filtro-text = 'TODAS'.
      COLLECT l_filtro INTO i_filtro_3.
      LOOP AT i_listado ASSIGNING <listado> WHERE NOT trkorr IS INITIAL.
        l_filtro-key  = <listado>-trkorr.
        l_filtro-text = <listado>-trkorr.
        COLLECT l_filtro INTO i_filtro_3.
      ENDLOOP.
      SORT i_filtro_3.
      zcl_ap_popup=>list_dynpro( campo   = 'LIST3'
                                 valores = i_filtro_3[] ).
    ENDIF.

    status_dynpro( EXPORTING o_alv = o_alv style = 'STYLE' color = 'COLOR' cprog = 'ZAP_STATUS' status = 'ST_DYN' alv_standard = '' CHANGING i_listado = i_listado ).
    o_alv->set_field_quitar( 'CHECK,TABIX,MESSAGE' ).
    o_alv->set_field_input( 'VALOR1,VALOR2,VALOR3,TEXTO' ).
    o_alv->show( CHANGING tabla = i_listado ).
    v_grid_ok = 'X'.

    IF o_alv_t IS INITIAL.
      o_prog->o_event_t = NEW #(
          boton_refrescar = 'X'
          boton_excel     = 'X'
          boton_borrar    = 'X'
          o_prog          = o_prog
          tabla           = 'TCODE' ).

      o_prog->o_alv_t   = NEW #(
                  estructura     = ''
                  o_event        = o_prog->o_event_t
                  obj_contenedor = 'TCODE' ).

      o_alv_t->registrar_mod( ).
      o_alv_t->set_campos_tabint( i_tcode[] ).
      o_alv_t->set_field_text( campo = 'TEXTO' valor = 'Transacción' ).
      o_alv_t->quitar_botones( insercion = 'X' operaciones = 'X' resto = 'X' ).
      o_alv_t->set_field_quitar( 'CHECK,TABIX,TRKORR,LIGHTS,TIPO' ).
      o_alv_t->set_field_input( 'VALOR1,VALOR2,VALOR3,TEXTO' ).
      o_alv_t->show( CHANGING tabla = i_tcode ).

      o_prog->o_event_p = NEW #(
          boton_refrescar = 'X'
          boton_excel     = 'X'
          boton_borrar    = 'X'
          o_prog          = o_prog
          tabla           = 'PC' ).

      o_prog->o_alv_p   = NEW #(
                  estructura     = ''
                  o_event        = o_prog->o_event_p
                  obj_contenedor = 'PC' ).
      o_alv_p->registrar_mod( ).
      o_alv_p->set_campos_tabint( i_pc[] ).
      o_alv_p->set_field_text( campo = 'TEXTO' valor = 'Ruta' ).
      o_alv_p->quitar_botones( insercion = 'X' operaciones = 'X' resto = 'X' ).
      o_alv_p->set_field_quitar( 'CHECK,TABIX,TRKORR,LIGHTS' ).
      o_alv_p->set_field_input( 'VALOR1,VALOR2,VALOR3,TEXTO' ).
      o_alv_p->show( CHANGING tabla = i_pc ).
    ENDIF.

*    IF o_timer IS INITIAL.
*      CREATE OBJECT o_timer.
*      o_timer->set_timer( segundos = 1200 ).
*    ELSE.
*      o_timer->set_timer( segundos = 1200 cancel_previo = 'X' ).
*    ENDIF.
    *busqueda = busqueda.
  ENDMETHOD.

  METHOD validaciones.
    DATA: r_obj_name TYPE RANGE OF e071-obj_name,
          l_icono    TYPE icon_d.

    CLEAR: listado-message, listado-style, listado-color.

    IF listado-tipo <> 'PC' AND listado-tipo <> 'TR' AND listado-tipo <> 'UR' AND listado-tipo <> 'NO' AND listado-tipo <> 'RT'.
      o_cache->get_cache_mem( EXPORTING tabla      = 'E071'
                                        clave      = listado-objeto
                                        clave2     = sy-uname
                              IMPORTING valor      = listado-trkorr
                                        encontrado = o_cache->enc ).
      IF o_cache->enc IS INITIAL.
        IF listado-tipo = 'CL'.
          APPEND VALUE #( option = 'CP' sign = 'I' low = |{ listado-objeto }*| ) TO r_obj_name.
        ELSE.
          APPEND VALUE #( option = 'EQ' sign = 'I' low = listado-objeto ) TO r_obj_name.
        ENDIF.
        SELECT trkorr FROM e071
          INTO listado-trkorr
          UP TO 1 ROWS
         WHERE trkorr   IN r_trkorr
           AND obj_name IN r_obj_name
         ORDER BY PRIMARY KEY.
        ENDSELECT.
        o_cache->set_cache_mem( tabla = 'E071' clave = listado-objeto clave2 = sy-uname valor = listado-trkorr ).
      ENDIF.

      IF NOT listado-trkorr IS INITIAL.
        SELECT SINGLE strkorr FROM  e070
          INTO listado-trkorr
         WHERE trkorr = listado-trkorr.

        l_icono = zcl_ap_alv=>c_ico_verde.
      ELSE.
        l_icono = zcl_ap_alv=>c_ico_ambar.
      ENDIF.
    ENDIF.

    aux1 = listado-tipo.
    IF NOT ( listado-objeto(1) = '+' AND listado-tipo = 'UR' ). " URL
      PERFORM get_text USING o_cache CHANGING listado-tipo listado-objeto listado-text.

      IF mod = 'X' AND listado-text IS INITIAL.
        listado-tipo = 'RE'.
        PERFORM get_text USING o_cache CHANGING listado-tipo listado-objeto listado-text.
        IF listado-text IS INITIAL.
          listado-tipo = 'TR'.
          PERFORM get_text USING o_cache CHANGING listado-tipo listado-objeto listado-text.
          IF listado-text IS INITIAL.
            listado-tipo = 'FU'.
            PERFORM get_text USING o_cache CHANGING listado-tipo listado-objeto listado-text.
            IF listado-text IS INITIAL.
              listado-tipo = 'TA'.
              PERFORM get_text USING o_cache CHANGING listado-tipo listado-objeto listado-text.
              IF listado-text IS INITIAL.
                listado-tipo = 'CL'.
                PERFORM get_text USING o_cache CHANGING listado-tipo listado-objeto listado-text.
                IF listado-text IS INITIAL.
                  listado-tipo = aux1.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
      IF listado-text IS INITIAL.
        l_icono = icon_red_light.
      ENDIF.
    ENDIF.

    set_status_list( EXPORTING message = listado-message icono = l_icono CHANGING list = listado ).
  ENDMETHOD.

  METHOD editar.
    DATA: l_list      TYPE t_listado,
          l_refrescar TYPE c LENGTH 1,
          l_list_act  TYPE t_listado,
          l_display   TYPE c LENGTH 1,
          l_listado   TYPE t_listado,
          l_program   TYPE c LENGTH 255,
          l_include   TYPE tfdir-include,
          l_string    TYPE string.

    DATA: source               TYPE TABLE OF text255,
          syntax_check_message TYPE c LENGTH 128,
          line_no              TYPE i,
          " TODO: variable is assigned but never used (ABAP cleaner)
          lv_word              TYPE text255,
          name_report          TYPE text255 VALUE 'YAP_DEV_TEMP',
          ls_trdir             TYPE trdir.

    FIELD-SYMBOLS <list> TYPE t_listado.

    IF zap_dev_est-objeto = ''.
      RETURN.
    ENDIF.

    IF ucomm = 'EJEC' AND zap_dev_est-tipo = 'RT' AND o_prog->o_texto->es_editable( ) = 'X'.
      grabar( ).
    ELSEIF ucomm = 'EDITAR' AND zap_dev_est-tipo = 'RT'.
      IF o_prog->o_texto->es_editable( ) = ''.
        o_prog->o_texto->set_editable( 'X' ).
      ELSE.
        o_prog->o_texto->set_editable( '' ).
      ENDIF.
      cl_gui_cfw=>set_new_ok_code( 'ENTER' ).
      RETURN.
    ENDIF.

    IF NOT ( zap_dev_est-tipo = 'PC' OR zap_dev_est-tipo = 'UR' OR zap_dev_est-tipo = 'NO' ).
      zap_dev_est-objeto = to_upper( zap_dev_est-objeto ).
    ENDIF.

    l_list = get_list( objeto = zap_dev-objeto tipo = zap_dev-tipo ).

    IF ucomm = 'LINK' OR zap_dev_est IS INITIAL.
      o_texto->set_editor( string = list-string display_mode = 'X' ).
    ELSE.
      IF g_zap_dev_est-objeto <> zap_dev_est-objeto OR g_zap_dev_est-tipo <> zap_dev_est-tipo.
        IF NOT o_texto IS INITIAL.
          IF NOT g_zap_dev_est IS INITIAL.
            l_refrescar = 'X'.
            CLEAR zap_dev.
            MOVE-CORRESPONDING g_zap_dev_est TO zap_dev.
            IF o_prog->o_texto->es_editable( ) = 'X'.
              o_texto->get_editor( IMPORTING string = zap_dev-string ).
            ELSE.
              l_list_act = get_list( objeto = zap_dev-objeto tipo = zap_dev-tipo ).
              IF NOT l_list_act IS INITIAL.
                zap_dev-string = l_list_act-string.
              ENDIF.
            ENDIF.
            zap_dev-cliente = zcl_c=>cliente_tasks.
            zap_dev-sysid   = sy-sysid.
            zap_dev-ernam   = sy-uname.
            zap_dev-erdat   = sy-datum.
            zap_dev-erzet   = sy-uzeit - 1.
            MODIFY zap_dev FROM zap_dev.
            IF NOT l_list IS INITIAL.
              ASSIGN l_list TO <list>.
              IF <list> IS ASSIGNED.
                <list>-string = zap_dev-string.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
        IF NOT list IS INITIAL.
          o_texto->set_editor( string = list-string display_mode = 'X' ).
        ELSE.
          IF NOT ( zap_dev_est-tipo = 'PC' OR zap_dev_est-tipo = 'UR' OR zap_dev_est-tipo = 'NO' ).
            o_texto->set_editor( string = '' display_mode = 'X' ).
          ENDIF.
        ENDIF.
      ELSE.
        IF NOT o_texto IS INITIAL.
          IF o_texto->mostrado IS INITIAL.
            o_texto->set_editor( string = zap_dev-string display_mode = 'X' ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF o_texto->mostrado IS INITIAL.
      o_texto->set_editor( string = list-string display_mode = 'X' ).
    ENDIF.

    g_zap_dev_est = zap_dev_est.

    *zap_dev_est = zap_dev_est.

    IF ucomm = 'INICIO'.
      IF l_refrescar = 'X'.
        o_alv->refrescar_grid( ).
        o_alv_p->refrescar_grid( ).
        o_alv_t->refrescar_grid( ).
        cl_gui_cfw=>set_new_ok_code( 'ENTER' ).
      ENDIF.
      RETURN.
    ELSE.
      cl_gui_cfw=>set_new_ok_code( 'ENTER' ).
    ENDIF.

    IF ucomm = 'VIS'.
      l_display = 'X'.
    ENDIF.

    CLEAR zap_dev.
    MOVE-CORRESPONDING zap_dev_est TO zap_dev.
    IF o_prog->o_texto->es_editable( ) = 'X'.
      o_texto->get_editor( IMPORTING string = zap_dev-string ).
    ELSE.
      l_list_act = get_list( objeto = zap_dev-objeto tipo = zap_dev-tipo ).
      IF NOT l_list_act IS INITIAL.
        zap_dev-string = l_list_act-string.
      ENDIF.
    ENDIF.

    l_listado-string = zap_dev-string.
    zap_dev-cliente = zcl_c=>cliente_tasks.
    zap_dev-sysid   = sy-sysid.
    zap_dev-ernam   = sy-uname.
    zap_dev-erdat   = sy-datum.
    zap_dev-erzet   = sy-uzeit.
    zap_dev-titulo  = l_list_act-text.
    zap_dev-titulo  = to_upper( zap_dev-titulo ).
    MODIFY zap_dev FROM zap_dev.

    IF ucomm <> 'LINK'.
      CASE zap_dev_est-tipo.
        WHEN 'RE'.
          SELECT SINGLE name FROM trdir
            INTO zap_dev_est-objeto
           WHERE name = zap_dev_est-objeto.
          IF sy-subrc <> 0.
            MESSAGE i398(00) WITH 'No existe report' zap_dev_est-objeto '' ''.
          ELSE.
            SET PARAMETER ID 'RID' FIELD zap_dev_est-objeto.
            IF ucomm = 'EJEC' OR ucomm = 'LINK'.
              SELECT SINGLE name FROM trdir
                INTO zap_dev_est-objeto
               WHERE name = zap_dev_est-objeto
                 AND subc = '1'.
              IF sy-subrc = 0.
                SUBMIT (zap_dev_est-objeto)              "#EC CI_SUBMIT
                       VIA SELECTION-SCREEN
                       AND RETURN.
              ELSE.
                MESSAGE |No es posible ejecutar { zap_dev_est-objeto }| TYPE 'S'.
                RETURN.
              ENDIF.
            ELSE.
              IF sy-sysid = zcl_c=>entorno_desarrollo OR l_display = 'X' OR zedit IS INITIAL.
                CALL FUNCTION 'EDITOR_PROGRAM' ##FM_SUBRC_OK
                  EXPORTING
                    appid       = 'PG'
                    display     = l_display
                    program     = zap_dev_est-objeto
                  EXCEPTIONS
                    application = 1.
              ELSE.
                SUBMIT (zedit) AND RETURN WITH programm = zap_dev_est-objeto. "#EC CI_SUBMIT
              ENDIF.
            ENDIF.
          ENDIF.
        WHEN 'AF'.
          SET PARAMETER ID 'FPWBFORM' FIELD zap_dev_est-objeto.
          CALL TRANSACTION 'SFP'.                        "#EC CI_CALLTA

        WHEN 'CL'.
          SET PARAMETER ID 'CLASS' FIELD zap_dev_est-objeto.
          COMMIT WORK.
          CONCATENATE 'SEOCLASS-CLSNAME=' zap_dev_est-objeto INTO string.
          CALL FUNCTION 'Z_NUEVO_MODO'
            EXPORTING
              tcode        = 'SE24'
              parametros   = string
              max_sesiones = 4.
        WHEN 'TA'.
          SET PARAMETER ID 'DTB' FIELD zap_dev_est-objeto.
          COMMIT WORK.
          CONCATENATE 'RSRD1-TBMA_VAL=' zap_dev_est-objeto INTO string.
          CALL FUNCTION 'Z_NUEVO_MODO'
            EXPORTING
              tcode        = 'SE11'
              parametros   = string
              max_sesiones = 4.
        WHEN 'FU'.
          IF ucomm = 'EJEC' OR ucomm = 'LINK'.
            SET PARAMETER ID 'LIB' FIELD zap_dev_est-objeto.
            CALL TRANSACTION 'SE37'.                     "#EC CI_CALLTA
          ELSE.
            SELECT SINGLE pname include FROM tfdir
             INTO (l_program, l_include)
              WHERE funcname = zap_dev_est-objeto.
            IF sy-subrc = 0.
              CONCATENATE l_program+3 'U' l_include INTO l_program.
            ENDIF.
            IF sy-sysid = zcl_c=>entorno_desarrollo OR l_display = 'X'.
              CALL FUNCTION 'EDITOR_PROGRAM' ##FM_SUBRC_OK
                EXPORTING
                  appid       = 'FB'
                  display     = l_display
                  program     = l_program
                EXCEPTIONS
                  application = 1.

            ELSE.
              SUBMIT (zedit) AND RETURN WITH programm = l_program. "#EC CI_SUBMIT
            ENDIF.
          ENDIF.
        WHEN 'TR'.
          SELECT SINGLE tcode FROM  tstc
            INTO zap_dev_est-objeto
                 WHERE tcode = zap_dev_est-objeto.
          IF sy-subrc = 0.
*          CALL TRANSACTION zap_dev_est-objeto.
            CALL FUNCTION 'Z_NUEVO_MODO'
              EXPORTING
                tcode        = zap_dev_est-objeto
                max_sesiones = 4.

          ELSE.
            MESSAGE i398(00) WITH 'No existe transacción' zap_dev_est-objeto '' ''.
          ENDIF.
        WHEN 'PC'.
          CALL FUNCTION 'WS_EXECUTE' ##FM_OLDED
            EXPORTING
              program            = zap_dev_est-objeto
            EXCEPTIONS
              frontend_error     = 1
              no_batch           = 2
              prog_not_found     = 3
              illegal_option     = 4
              gui_refuse_execute = 5
              OTHERS             = 6.
          IF sy-subrc <> 0.
            MESSAGE 'Error lanzando programa' TYPE 'E'.
          ENDIF.
        WHEN 'UR'.
          aux1 = l_listado-string.
          aux1 = to_upper( aux1 ).
          IF aux1(4) = 'HTTP' OR ( zap_dev_est-objeto(1) = '+' AND NOT l_listado-string IS INITIAL ).
            SPLIT l_listado-string AT cl_abap_char_utilities=>cr_lf INTO string aux2.
            zcl_ap_gos=>visualizar_fichero_st( string ).
          ELSE.
            zcl_ap_gos=>visualizar_fichero_st( zap_dev_est-objeto ).
          ENDIF.

        WHEN 'RT'.
          IF ucomm = 'EJEC'.
            IF NOT zap_dev-string IS INITIAL.
              l_string = zap_dev-string.
              IF NOT l_string CS 'report' AND NOT l_string CS 'REPORT'.
                CONCATENATE 'REPORT Z.' l_string INTO l_string SEPARATED BY cl_abap_char_utilities=>cr_lf.
              ENDIF.
              zcl_ap_string=>string2tabla( EXPORTING string = l_string longitud = 255 CHANGING tabla = source ).
              SYNTAX-CHECK FOR source
                           MESSAGE syntax_check_message
                           LINE line_no
                           WORD lv_word
                           PROGRAM name_report.
              IF sy-subrc <> 0.
                MESSAGE i398(00) WITH 'Error de sintaxis, mensaje' syntax_check_message 'en linea' line_no.
              ELSE.
                CLEAR ls_trdir.
                ls_trdir-name    = name_report.
                ls_trdir-clas    = 'TEMP'.
                ls_trdir-dbna    = ' '.
                ls_trdir-fixpt   = 'X'.
                ls_trdir-rstat   = 'P'.
                ls_trdir-subc    = '1'.
                ls_trdir-rmand   = sy-mandt.

                ls_trdir-sqlx    = 'R'.
                ls_trdir-uccheck = 'X'.
                MODIFY trdir FROM ls_trdir.
                INSERT REPORT ls_trdir-name FROM source.
                GENERATE REPORT ls_trdir-name.         "#EC CI_GENERATE
                SUBMIT (name_report) AND RETURN VIA SELECTION-SCREEN. "#EC CI_SUBMIT
                DELETE REPORT ls_trdir-name.
              ENDIF.
            ENDIF.
          ENDIF.
      ENDCASE.
    ENDIF.

    cl_gui_cfw=>flush( ).
*    IF zap_dev_est-tipo NE 'RT'.
*      buscar_datos( ).
*    IF v_grid_ok = 'X'.
*      o_alv->refrescar_grid( new_code = 'ENTER' ).
*    ENDIF.
    buscar_datos( ).
    IF v_grid_ok = 'X'.
      LEAVE TO SCREEN 0100.
    ENDIF.
*    ENDIF.
  ENDMETHOD.

  METHOD backup.
    DATA: izip       TYPE REF TO cl_abap_zip,
          l_xstring  TYPE xstring,
          l_filename TYPE string,
          l_xml      TYPE xstring.

    izip = NEW #( ).

    DEFINE add_zip.
      DATA i_&1 TYPE TABLE OF &1.

      SELECT * FROM &1                                  "#EC CI_NOWHERE
      INTO TABLE i_&1.

      CALL TRANSFORMATION id
           SOURCE i_&1 = i_&1
           RESULT XML l_xml.

      izip->add( name    = '&1.XML' content = l_xml ).
    END-OF-DEFINITION.

    add_zip: zap_dev,
             zap_dev_hist.

    l_xstring = izip->save( ).

    CONCATENATE 'ZAP_DEV' zcl_c=>cliente_tasks sy-datum '.ZIP' INTO l_filename SEPARATED BY '_'.

    zcl_ap_ficheros=>grabar_xstring( fichero = l_filename xstring = l_xstring dialogo = 'X' ).
  ENDMETHOD.

  METHOD restore.
    DATA: izip           TYPE REF TO cl_abap_zip,
          l_filename     TYPE string,
          l_xstring      TYPE xstring,
          l_xml          TYPE xstring,
          i_zap_dev      TYPE TABLE OF zap_dev,
          i_zap_dev_hist TYPE TABLE OF zap_dev_hist.

    izip = NEW #( ).
    l_filename = zcl_ap_ficheros=>popup_select_fichero( file_filter = 'ZAP_DEV*' default_extension = 'ZIP' ).
    IF l_filename IS INITIAL.
      RETURN.
    ENDIF.
    zcl_ap_ficheros=>leer_xstring( EXPORTING fichero = l_filename IMPORTING xstring = l_xstring ).
    IF l_xstring IS INITIAL.
      RETURN.
    ENDIF.
    izip->load( l_xstring ).

    izip->get( EXPORTING name    = 'ZAP_DEV.XML'
               IMPORTING content = l_xml ).

    IF NOT l_xml IS INITIAL.
      CALL TRANSFORMATION id
           SOURCE XML l_xml
           RESULT i_zap_dev = i_zap_dev.

      IF zcl_c=>cliente_tasks = 'MIN'.
        MODIFY zap_dev FROM TABLE i_zap_dev.
      ELSE.
        LOOP AT i_zap_dev ASSIGNING FIELD-SYMBOL(<zap_dev>) WHERE    cliente    = zcl_c=>cliente_tasks
                                                                  OR tipo       = 'RT'
                                                                  OR objeto(1) <> 'Z'.
          <zap_dev>-cliente = zcl_c=>cliente_tasks.
          <zap_dev>-sysid   = sy-sysid.
          <zap_dev>-ernam   = sy-uname.
          SELECT SINGLE * FROM zap_dev
            INTO @DATA(l_zap_dev)
           WHERE cliente = @<zap_dev>-cliente
             AND sysid   = @sy-sysid
             AND ernam   = @<zap_dev>-ernam
             AND objeto  = @<zap_dev>-objeto
             AND tipo    = @<zap_dev>-tipo.
          IF sy-subrc = 0.
            IF l_zap_dev-valor1 IS INITIAL.
              l_zap_dev-valor1 = <zap_dev>-valor1.
            ENDIF.
            IF l_zap_dev-valor2 IS INITIAL.
              l_zap_dev-valor2 = <zap_dev>-valor2.
            ENDIF.
            IF l_zap_dev-valor3 IS INITIAL.
              l_zap_dev-valor3 = <zap_dev>-valor3.
            ENDIF.
            IF l_zap_dev-texto IS INITIAL.
              l_zap_dev-texto = <zap_dev>-texto.
            ENDIF.
            IF l_zap_dev-string IS INITIAL.
              l_zap_dev-string = <zap_dev>-string.
            ENDIF.
            MODIFY zap_dev FROM l_zap_dev.
          ELSE.
            INSERT zap_dev FROM <zap_dev>.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

    CLEAR l_xml.
    izip->get( EXPORTING name    = 'ZAP_DEV_HIST.XML'
               IMPORTING content = l_xml ).
    IF NOT l_xml IS INITIAL.
      CALL TRANSFORMATION id
           SOURCE XML l_xml
           RESULT i_zap_dev_hist = i_zap_dev_hist.
    ENDIF.

    IF zcl_c=>cliente_tasks <> 'MIN'.
      DELETE i_zap_dev_hist WHERE cliente <> zcl_c=>cliente_tasks.
    ENDIF.
    MODIFY zap_dev_hist FROM TABLE i_zap_dev_hist.
  ENDMETHOD.

  METHOD get_obj_ots.
    DATA: l_fecha TYPE dats,
          l_ucomm TYPE sy-ucomm.

    l_fecha = sy-datum - 30.
    SELECT ' ' AS check, object, obj_name, as4date, as4text FROM e070 JOIN e07t ON e070~trkorr = e07t~trkorr "#EC CI_USAGE_OK[2270335]
                       JOIN e071 ON e070~trkorr = e071~trkorr
      INTO TABLE @DATA(i_e071)
     WHERE     trfunction IN ( 'R', 'S' )
       AND     trstatus    = 'D'
       AND     as4user     = @sy-uname
       AND     as4date     > @l_fecha
       AND NOT as4text    IN ( 'basura', 'borrar' )
       AND     object     IN ( 'FORM', 'CLAS', 'REPS', 'PROG', 'METH', 'TABD', 'TABL', 'FUNC' )
     GROUP BY object, obj_name, as4date, as4text.

    LOOP AT i_e071 ASSIGNING FIELD-SYMBOL(<e071>).
      IF <e071>-object = 'METH'.
        <e071>-object   = 'CLAS'.
        <e071>-obj_name = <e071>-obj_name(30).
      ENDIF.

      IF line_exists( i_listado[ objeto = <e071>-obj_name ] ).
        DELETE i_e071.
      ENDIF.
    ENDLOOP.

    SORT i_e071 BY obj_name ASCENDING as4date DESCENDING.
    DELETE ADJACENT DUPLICATES FROM i_e071 COMPARING obj_name.

    CALL FUNCTION 'Z_POPUP_ALV_AP'
      EXPORTING
        titulo  = 'Seleccione objetos a incorporar'
        check   = 'X'
      IMPORTING
        ucomm   = l_ucomm
      TABLES
        t_datos = i_e071.

    IF l_ucomm = 'F01'.
      LOOP AT i_e071 ASSIGNING <e071> WHERE check = 'X'.
        DATA(l_tipo) = SWITCH zap_dev-tipo( <e071>-object
                                            WHEN 'CLAS'           THEN 'CL'
                                            WHEN 'REPS' OR 'PROG' THEN 'RE'
                                            WHEN 'FORM'           THEN 'FO'
                                            WHEN 'FUNC'           THEN 'FU' "#EC CI_USAGE_OK[2270335]
                                            WHEN 'TABD' OR 'TABL' THEN 'TA'
                                            WHEN 'TCOD'           THEN 'TR' ).

        DATA(l_list) = get_list( objeto = CONV #( <e071>-obj_name ) tipo = l_tipo ).
        IF l_list-lights(3) <> icon_red_light(3).
          MOVE-CORRESPONDING l_list TO zap_dev_est.
        ENDIF.
        grabar( ).
      ENDLOOP.
      IF sy-subrc = 0.
        o_alv->refrescar_grid( ).
        o_alv_t->refrescar_grid( ).
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD get_list.
    CLEAR list.
    IF objeto = ''.
      RETURN.
    ENDIF.

    READ TABLE i_listado INTO list WITH KEY objeto = objeto tipo = tipo.
    IF sy-subrc = 0.
      RETURN.
    ENDIF.

    READ TABLE i_tcode INTO list WITH KEY objeto = objeto tipo = tipo.
    IF sy-subrc = 0.
      RETURN.
    ENDIF.

    READ TABLE i_pc INTO list WITH KEY objeto = objeto tipo = tipo.
    IF sy-subrc = 0.
      RETURN.
    ENDIF.

    SELECT * FROM zap_dev                               "#EC CI_NOFIRST
      INTO CORRESPONDING FIELDS OF list
      UP TO 1 ROWS
     WHERE objeto = objeto AND tipo = tipo
     ORDER BY PRIMARY KEY.
    ENDSELECT.
    IF sy-subrc <> 0.
      list-objeto = objeto.
      list-tipo   = tipo.
    ENDIF.

    validaciones( CHANGING listado = list ).

    IF list-tipo = 'TR'.
      INSERT list INTO i_tcode INDEX 1.
    ELSEIF list-tipo = 'PC' OR list-tipo = 'UR' OR list-tipo = 'NO' OR list-tipo = 'RT'.
      INSERT list INTO i_pc INDEX 1.
    ELSE.
      INSERT list INTO i_listado INDEX 1.
    ENDIF.
  ENDMETHOD.

  METHOD grabar.
    DATA l_list TYPE t_listado.

    FIELD-SYMBOLS <listado> TYPE t_listado.

    CLEAR zap_dev.
    MOVE-CORRESPONDING zap_dev_est TO zap_dev.
    IF o_prog->o_texto->es_editable( ) = 'X'.
      o_texto->get_editor( IMPORTING string = zap_dev-string ).
    ELSE.
      l_list = get_list( objeto = zap_dev-objeto tipo = zap_dev-tipo ).
      IF NOT l_list IS INITIAL.
        zap_dev-string = l_list-string.
      ENDIF.
    ENDIF.
    zap_dev-cliente = zcl_c=>cliente_tasks.
    zap_dev-sysid   = sy-sysid.
    zap_dev-ernam   = sy-uname.
    zap_dev-erdat   = sy-datum.
    zap_dev-erzet   = sy-uzeit.
    MODIFY zap_dev FROM zap_dev.
    LOOP AT i_listado ASSIGNING <listado> WHERE objeto = zap_dev-objeto AND tipo = zap_dev-tipo.
      MOVE-CORRESPONDING zap_dev TO <listado>.
    ENDLOOP.
    IF sy-subrc = 0.
      o_alv->refrescar_grid( ).
    ELSE.
      LOOP AT i_tcode ASSIGNING <listado> WHERE objeto = zap_dev-objeto AND tipo = zap_dev-tipo.
        MOVE-CORRESPONDING zap_dev TO <listado>.
      ENDLOOP.
      IF sy-subrc = 0.
        o_alv_t->refrescar_grid( ).
      ELSE.
        LOOP AT i_pc ASSIGNING <listado> WHERE objeto = zap_dev-objeto AND tipo = zap_dev-tipo.
          MOVE-CORRESPONDING zap_dev TO <listado>.
        ENDLOOP.
        IF sy-subrc = 0.
          o_alv_p->refrescar_grid( ).
        ELSE.
          buscar_datos( ).
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.
ENDCLASS.
*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #(
      status              = ''
      guardar_logz        = 'X'
      status_prog         = 'ZAP_STATUS'
      get_nombre_pc       = 'X'
      get_doc_from_report = '' ).

  IF sy-batch IS INITIAL.
    o_prog->o_event = NEW #(
        boton_refrescar = 'X'
        boton_excel     = 'X'
        boton_borrar    = 'X'
        o_prog          = o_prog ).

    o_prog->o_alv   = NEW #(
                estructura = ''
                o_event    = o_prog->o_event ).

    IF o_prog->o_texto IS INITIAL.
      o_prog->o_texto = NEW #(
          controlname = 'TEXTO' ).
    ENDIF.

    o_prog->o_alv->add_button( button = 'F01' text = 'Ejecutar' icon = icon_execute_object qinfo = 'Ejecutar' ucomm = 'EJEC' ).
    o_prog->o_alv->add_button( button = 'F02' text = 'Editar' icon = icon_change qinfo = 'Editar' ucomm = 'EDITAR' ).
    o_prog->o_alv->add_button( button = 'F03' text = 'Visualizar' icon = icon_display qinfo = 'Visualizar' ucomm = 'VIS' ).
    o_prog->o_alv->add_button( button = 'F04' text = 'Nuevo' icon = icon_create qinfo = 'Nuevo' ucomm = 'NUEVO' ).
    o_prog->o_alv->add_button( button = 'F05' text = 'Refrescar' icon = icon_refresh qinfo = 'Refrescar' ucomm = 'REFRESH' ).
    o_prog->o_alv->add_button( button = 'F06' text = 'Listado' icon = icon_icon_list qinfo = 'Listado' ucomm = 'LIST' ).
    o_prog->o_alv->add_button( button = 'F07' text = 'Desarrollos' icon = icon_calculation qinfo = 'Gestión desarrollos' ucomm = 'DEV' ).
    o_prog->o_alv->add_button( button = 'F08' text = 'OTs' icon = icon_transport qinfo = 'Ordenes de transporte' ucomm = 'OT' ).
    o_prog->o_alv->add_button( button = 'F09' text = 'SQL' icon = icon_question qinfo = 'SQL' ucomm = 'SQL' ).
    o_prog->o_alv->add_button( button = 'M01' text = 'Descarga librería' qinfo = 'Descarga librería' ).
    o_prog->o_alv->add_button( button = 'M02' text = 'ZEDIT' qinfo = 'ZEDIT' ).
    o_prog->o_alv->add_button( button = 'M03' text = 'No limitar' qinfo = 'Mostrar todos los programas' ).
    o_prog->o_alv->add_button( button = 'M04' text = 'Añadir OT' qinfo = 'Añadir objetos de OT' ).
    o_prog->o_alv->add_button( button = 'M05' text = 'SE16N editable' qinfo = 'Ejecutar SE16N editable' ).
    o_prog->o_alv->add_button( button = 'M06' text = 'Backup datos' qinfo = 'Backup datos' ).
    o_prog->o_alv->add_button( button = 'M07' text = 'Restaurar datos' qinfo = 'Restaurar datos' ).
    o_prog->o_alv->add_button( button = 'M08' text = 'Recuperar objetos en OT' ).
  ENDIF.

  DATA l_nombre_pc TYPE text255.
  l_nombre_pc(4) = o_prog->nombre_pc.
  IF zcl_c=>usuario_ap = sy-uname AND o_prog->nombre_pc(2) <> 'NW' AND l_nombre_pc(4) <> 'TSEC'.
    IF NOT zcl_c=>nombre_pc CS o_prog->nombre_pc.
      LEAVE TO TRANSACTION 'SMEN'.
    ENDIF.
  ENDIF.

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  o_prog->at_selection( ).

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

AT SELECTION-SCREEN OUTPUT.
*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->buscar_datos( ).

  IF sy-batch IS INITIAL.
    CALL SCREEN 0100.
  ENDIF.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*

MODULE status_0100 OUTPUT.

  o_prog->status_dynpro_0100( ).

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  o_prog->command_dynpro_0100( ).

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_TIPO  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_tipo INPUT.


  IF sy-ucomm <> 'GRABAR'. " Si pulsan en grabar modificamos lo que había
    IF zap_dev_est-objeto <> *zap_dev_est-objeto OR zap_dev_est-tipo <> *zap_dev_est-tipo.
      *zap_dev_est = zap_dev_est.
      CLEAR zap_dev_est.
      zap_dev_est-objeto = *zap_dev_est-objeto.
      zap_dev_est-tipo   = *zap_dev_est-tipo.
      CLEAR l_list.
      READ TABLE o_prog->i_listado INTO l_list WITH KEY objeto = zap_dev_est-objeto
                                                tipo   = zap_dev_est-tipo.
      IF sy-subrc <> 0.
        zap_dev_est-objeto = to_upper( zap_dev_est-objeto ).
        zap_dev_est-tipo   = to_upper( zap_dev_est-tipo ).
        SELECT SINGLE * FROM zap_dev
          INTO CORRESPONDING FIELDS OF l_list
          WHERE cliente = zcl_c=>cliente_tasks AND sysid = sy-sysid AND ernam = sy-uname AND objeto = zap_dev_est-objeto AND tipo = zap_dev_est-tipo.
      ENDIF.
      IF l_list IS INITIAL.
        CLEAR: zap_dev_est-valor1, zap_dev_est-valor2, zap_dev_est-valor3, zap_dev_est-texto, zap_dev_est-trkorr.
        IF NOT o_prog->o_texto IS INITIAL.
          o_prog->o_texto->set_editor( string = '' display_mode = 'X' ).
        ENDIF.
        l_list-tipo   = zap_dev_est-tipo.
        l_list-objeto = zap_dev_est-objeto.
        IF l_list-tipo IS INITIAL.
          l_list-tipo = 'RE'.
        ENDIF.
*    ELSE.
*      IF NOT o_prog->o_texto IS INITIAL.
*        o_prog->o_texto->set_editor( string = l_list-string display_mode = 'X').
*      ENDIF.
      ENDIF.
      o_prog->validaciones( EXPORTING mod = 'X' CHANGING listado = l_list ).
      zap_dev_est-tipo = l_list-tipo.
      *zap_dev_est = zap_dev_est.
      CLEAR g_zap_dev_est.
    ENDIF.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*& Form GET_TEXT
*&---------------------------------------------------------------------*
FORM get_text
  USING    o_cache   TYPE REF TO zcl_ap_cache
  CHANGING ps_tipo   TYPE any
           ps_objeto TYPE any
           ps_text   TYPE any.

  CLEAR ps_text.
  o_cache->get_cache_mem( EXPORTING tabla      = 'DEV_TEXT'
                                    clave      = ps_tipo
                                    clave2     = ps_objeto
                          IMPORTING valor      = ps_text
                                    encontrado = o_cache->enc ).
  IF o_cache->enc IS NOT INITIAL.
    RETURN.
  ENDIF.

  CASE ps_tipo.
    WHEN 'RE'.
      SELECT SINGLE text FROM trdirt
        INTO ps_text
       WHERE sprsl = sy-langu
         AND name  = ps_objeto.
      IF sy-subrc <> 0.
        SELECT name FROM trdir
          INTO ps_objeto
          UP TO 1 ROWS
         WHERE name = ps_objeto
          ORDER BY PRIMARY KEY.
        ENDSELECT.
        IF sy-subrc = 0.
          ps_text = '.'.
        ENDIF.
      ENDIF.
    WHEN 'TR'.
      SELECT SINGLE ttext FROM tstct
    INTO ps_text
   WHERE sprsl = sy-langu
     AND tcode = ps_objeto.
      IF sy-subrc <> 0.
        SELECT ttext FROM tstct                         "#EC CI_GENBUFF
      INTO ps_text
          UP TO 1 ROWS
     WHERE tcode = ps_objeto
         ORDER BY PRIMARY KEY.
        ENDSELECT.
      ENDIF.
    WHEN 'TA'.
      SELECT ddtext FROM  dd02t
        INTO ps_text
        UP TO 1 ROWS
       WHERE tabname    = ps_objeto
         AND ddlanguage = sy-langu
       ORDER BY PRIMARY KEY.
      ENDSELECT.
      IF sy-subrc <> 0.
        SELECT ddtext FROM  dd02t
          INTO ps_text
          UP TO 1 ROWS
               WHERE tabname = ps_objeto
          ORDER BY PRIMARY KEY.
        ENDSELECT.
      ENDIF.
    WHEN 'FU'.
      SELECT stext FROM v_fdirt
        INTO ps_text
        UP TO 1 ROWS
       WHERE funcname = ps_objeto
         AND spras    = sy-langu
      ORDER BY PRIMARY KEY.
      ENDSELECT.
      IF sy-subrc <> 0.
        SELECT stext FROM v_fdirt
          INTO ps_text
         UP TO 1 ROWS
         WHERE funcname = ps_objeto
          ORDER BY PRIMARY KEY.
        ENDSELECT.
      ENDIF.
    WHEN 'CL'.
      SELECT descript FROM vseoclass
        INTO ps_text
        UP TO 1 ROWS
       WHERE clsname = ps_objeto
         AND langu   = sy-langu
       ORDER BY PRIMARY KEY.
      ENDSELECT.
      IF sy-subrc <> 0.
        SELECT descript FROM vseoclass
          INTO ps_text
          UP TO 1 ROWS
         WHERE clsname = ps_objeto
          ORDER BY PRIMARY KEY.
        ENDSELECT.
      ENDIF.
    WHEN 'AF'.
      SELECT  text FROM  fpcontextt
        INTO ps_text
        UP TO 1 ROWS
             WHERE name     = ps_objeto
               AND language = sy-langu
        ORDER BY PRIMARY KEY.
      ENDSELECT.
      IF sy-subrc <> 0.
        SELECT text FROM  fpcontextt
          UP TO 1 ROWS
          INTO ps_text
               WHERE name = ps_objeto
          ORDER BY PRIMARY KEY.
        ENDSELECT.
      ENDIF.
  ENDCASE.

  o_cache->set_cache_mem( tabla = 'DEV_TEXT' clave = ps_tipo clave2 = ps_objeto valor = ps_text ).
ENDFORM.
