***********************************************************************
* TIPO : LISTADO
* TITULO : Gestión exits de usuario
* DESCRIPCION : Gestión exits de usuario
*
* AUTOR: Andrés Picazo                                FECHA: 10/03/2018
*
***********************************************************************
REPORT zap_exits.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: zap_exits_est,
        zap_exits_par.

DATA: o_texto       TYPE REF TO zcl_ap_control_texto_btf,
      v_display,
      zap_exits     TYPE zap_exits,
      zap_exits_doc TYPE zap_exits_doc.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check.
  PUBLIC SECTION.
    METHODS: handle_double_click REDEFINITION.
    METHODS: handle_user_command REDEFINITION.
ENDCLASS.                    "lcl_alv DEFINITION

CLASS lcl_event_grid DEFINITION INHERITING FROM zcl_ap_alv_grid_eventos.
  PUBLIC SECTION.
    METHODS: double_click REDEFINITION,
      data_changed REDEFINITION,
      data_changed_finished REDEFINITION,
      toolbar      REDEFINITION,
      user_command REDEFINITION.
ENDCLASS.                    "lcl_event_grid DEFINITION
*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_listado,
             check            TYPE xfeld,
             lights           TYPE zico_estado_mensaje.
             INCLUDE TYPE zap_exits.
             TYPES:   especificaciones TYPE text1024.
    TYPES: message TYPE bapi_msg,
           END OF t_listado,
           tt_listado TYPE TABLE OF t_listado.
    DATA: i_listado TYPE tt_listado,
          l_listado TYPE t_listado.

    TYPES: BEGIN OF t_var,
             check      TYPE xfeld,
             tipo       TYPE zap_exits_par-tipo,
             tipo_t     TYPE dd07t-ddtext,
             clave      TYPE zap_exits_par-clave,
             clave2     TYPE zap_exits_par-clave2,
             clave3     TYPE zap_exits_par-clave3,
             valor      TYPE zap_exits_par-valor,
             valor2     TYPE zap_exits_par-valor2,
             valor3     TYPE zap_exits_par-valor3,
             valor4     TYPE zap_exits_par-valor4,
             comentario TYPE zap_exits_par-comentario,
             erdat      TYPE zap_exits_par-erdat,
             erzet      TYPE zap_exits_par-erzet,
             ernam      TYPE zap_exits_par-ernam,
             aedat      TYPE zap_exits_par-aedat,
             aezet      TYPE zap_exits_par-aezet,
             aenam      TYPE zap_exits_par-aenam,
             style      TYPE lvc_t_styl,
             color      TYPE lvc_t_scol,
           END OF t_var.
    DATA: i_var        TYPE TABLE OF t_var,
          i_var_ini    TYPE TABLE OF t_var,
          i_var_borrar TYPE TABLE OF t_var.

    DATA: o_grid  TYPE REF TO zcl_ap_alv_grid,
          o_event TYPE REF TO lcl_event_grid.

    METHODS: main.

    METHODS:  listado,
      seleccionar_datos,
      status_dynpro_0100,
      command_dynpro_0100,
      grabar_ot,
      grabar,
      ir_a_detalle IMPORTING list TYPE t_listado,
      validaciones IMPORTING mod TYPE abap_bool DEFAULT '' CHANGING listado TYPE t_listado,
      generar_word.

ENDCLASS.                    "REPORT DEFINITION

*------VARIABLES-------------------------------------------------------*
DATA: o_prog TYPE REF TO zcl_report,
      o_alv  TYPE REF TO lcl_alv.

CLASS lcl_event_grid IMPLEMENTATION.

  METHOD double_click.
    FIELD-SYMBOLS <var> TYPE o_prog->t_var.

    READ TABLE o_prog->i_var ASSIGNING <var>  INDEX e_row-index.
    IF sy-subrc = 0.
      CASE <var>-tipo_t.
        WHEN 'URL'.
          IF NOT <var>-valor IS INITIAL.
            zcl_ap_gos=>visualizar_fichero_st( <var>-valor ).
          ENDIF.
        WHEN 'Código ABAP'.
          IF NOT <var>-valor IS INITIAL.
            CALL FUNCTION 'EDITOR_PROGRAM'
              EXPORTING
                appid       = 'PG'
                display     = 'X'
                program     = <var>-valor
              EXCEPTIONS
                application = 1.
          ENDIF.
      ENDCASE.
    ENDIF.

  ENDMETHOD.                                               "double_click


  METHOD toolbar.

    super->toolbar( EXPORTING e_object = e_object e_interactive = e_interactive ).

  ENDMETHOD.                                               "toolbar

  METHOD user_command.
    DATA: l_var   TYPE o_prog->t_var,
          hay_sel .
    CASE e_ucomm .
      WHEN 'NUEVO'.
        CLEAR l_var.
        o_prog->set_status_list( EXPORTING campos_editables = 'TIPO_T,CLAVE,CLAVE2,CLAVE3,VALOR,VALOR2,VALOR3,VALOR4,COMENTARIO' CHANGING list = l_var ).
        APPEND l_var TO o_prog->i_var.
        o_prog->o_grid->refrescar_grid( ).
      WHEN 'BORRAR'.
        o_prog->o_grid->set_marca_filas_sel( EXPORTING validar_seleccion = 'X' CHANGING t_tabla = o_prog->i_var hay_sel = hay_sel ).
        IF hay_sel = 'X'.
          LOOP AT o_prog->i_var INTO l_var WHERE check = 'X'.
            APPEND l_var TO o_prog->i_var_borrar.
            DELETE o_prog->i_var .
          ENDLOOP.
          o_prog->o_grid->refrescar_grid( ).
        ENDIF.
      WHEN OTHERS.
        super->user_command( EXPORTING e_ucomm = e_ucomm ).
    ENDCASE .

  ENDMETHOD.                                               "USER_COMMAND


  METHOD data_changed.
    DATA: l_listado TYPE o_prog->t_listado.

    ini_data_changed( cambios = er_data_changed->mt_good_cells  ).

    LOOP AT i_cambios_celda INTO cambio_celda.
      AT NEW row_id.
        CLEAR l_listado.
        READ TABLE o_prog->i_listado INTO l_listado INDEX cambio_celda-row_id.
      ENDAT.

      set_valor_mod( CHANGING datos = l_listado ).

      AT END OF row_id.
        o_prog->validaciones( EXPORTING mod = 'X' CHANGING listado = l_listado ).
        MODIFY o_prog->i_listado FROM l_listado INDEX cambio_celda-row_id.
      ENDAT.
    ENDLOOP.
  ENDMETHOD.                                               "data_changed

  METHOD data_changed_finished.

    IF NOT tabla_data_changed IS INITIAL.
      o_alv->refrescar_grid( ).
      CLEAR tabla_data_changed.
    ENDIF.

  ENDMETHOD.

ENDCLASS.                    "lcl_event_grid IMPLEMENTATION
*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK 001 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_id     FOR zap_exits_est-id2,
                s_ticket FOR zap_exits_est-ticket,
                s_respon FOR zap_exits_est-responsable,
                s_clasif FOR zap_exits_est-clasificacion,
                s_modulo FOR zap_exits_est-modulo,
                s_tcode	 FOR zap_exits_est-tcode,
                s_tipo   FOR zap_exits_est-tipo,
                s_activa FOR zap_exits_est-activa.
SELECTION-SCREEN: SKIP 1.
PARAMETERS: p_busl   LIKE zap_exits_est-id2.
SELECTION-SCREEN: SKIP 1.
PARAMETERS: p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK 001.
PARAMETERS: p_id LIKE zap_exits_est-id2 NO-DISPLAY.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD handle_double_click.
    FIELD-SYMBOLS: <listado> TYPE o_prog->t_listado.

    READ TABLE o_prog->i_listado ASSIGNING <listado> INDEX row.
    IF sy-subrc = 0.
      o_prog->ir_a_detalle( <listado> ).
    ENDIF.
  ENDMETHOD. "handle_double_click
  METHOD handle_user_command.
    DATA: l_row TYPE i,
          l_rfc TYPE rfc_dest.
    FIELD-SYMBOLS <listado> TYPE o_prog->t_listado.

    super->handle_user_command( e_salv_function ).

    IF sy-sysid = zcl_c=>entorno_desarrollo.
      l_rfc = zcl_c=>rfc_produccion.
    ELSE.
      l_rfc = zcl_c=>rfc_desarrollo.
    ENDIF.
    CASE ucomm.
      WHEN 'F01'.
        CLEAR: zap_exits, zap_exits_est, o_prog->i_var.
        CALL SCREEN 0100.
      WHEN 'F02'.
*        SUBMIT rscmpadj
*          AND RETURN
*         WITH view = 'ZAP_EXITS'
*         WITH rfc_dest = l_rfc
** WITH RFC_DEST = GS_DYN300-RFC_DEST
*  WITH sel = ''  "No indicar condiciones de selección
** WITH ADJ_000 = GS_DYN300-ADJ_000
** WITH MODE = GS_DYN300-MODE
** WITH CMP_TAB = GS_DYN300-CMP_TAB             "new 4
** WITH CALLTYPE = GS_DYN300-CALLTYPE
** WITH SEL_TYPE = GC_ST_MANUALLY
* WITH dis_filt = 'LRMSPQ'. "Sólo modificaciones
** WITH BATCH = GS_DYN300-BATCH
** WITH STRU_POP = GS_DYN300-RESTRICT
** WITH WLID = GS_DYN300-WLID
** WITH FEXPT = SPCE.
        SUBMIT zap_comparar_tablas
          AND RETURN
          USING SELECTION-SET 'ZAP_EXITS'.

*      WHEN 'F03'.
*        SUBMIT rscmpadj
*          AND RETURN
*         WITH view = 'ZAP_EXITS_PAR'
*         WITH rfc_dest = l_rfc
*         WITH sel = ''  "No indicar condiciones de selección
*         WITH dis_filt = 'LRMSPQ'. "Sólo modificaciones
      WHEN 'WORD'.
        get_seleccion( CHANGING t_tabla = o_prog->i_listado ).
        LOOP AT o_prog->i_listado ASSIGNING <listado> WHERE check = 'X'.
        ENDLOOP.
        IF sy-subrc NE 0.
          MESSAGE 'Seleccione algún registro' TYPE 'I'.
        ELSE.
          o_prog->generar_word( ).
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD. "handle_USER_COMMAND



ENDCLASS. "lcl_alv IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).
    listado( ).
  ENDMETHOD.                    "REPORT

  METHOD seleccionar_datos.
    FIELD-SYMBOLS <listado> TYPE t_listado.
    DATA: l_icono TYPE icon_d.

    IF NOT p_id IS INITIAL.
      SELECT * FROM zap_exits
        INTO CORRESPONDING FIELDS OF TABLE i_listado
       WHERE id = p_id.
      IF sy-subrc = 0.
        DESCRIBE TABLE i_listado LINES sy-tfill.
        IF sy-tfill = 1.
          READ TABLE i_listado ASSIGNING <listado> INDEX 1.
          ir_a_detalle( <listado> ).
        ENDIF.
      ELSE.
        LEAVE PROGRAM.
      ENDIF.

    ELSE.
      sgpi_texto( 'Seleccionando datos' ).
      SELECT * FROM zap_exits
        INTO CORRESPONDING FIELDS OF TABLE i_listado
       WHERE id IN s_id
         AND activa IN s_activa
         AND tcode IN s_tcode
         AND tipo IN s_tipo
         AND responsable IN s_respon
         AND ticket IN s_ticket
         AND modulo IN s_modulo
         AND clasificacion IN s_clasif.

      LOOP AT i_listado ASSIGNING <listado>.
        SELECT SINGLE documentacion FROM  zap_exits_doc
          INTO string
         WHERE id        = <listado>-id
           AND tipo_doc  = 'ESPECIFICACIONES'.
        IF sy-subrc = 0.
          <listado>-especificaciones = string.
        ENDIF.
      ENDLOOP.

      IF NOT p_busl IS INITIAL.
        string = p_busl.
        TRANSLATE string TO UPPER CASE.
        LOOP AT i_listado INTO l_listado.
          TRANSLATE l_listado TO UPPER CASE.
          IF NOT l_listado CS string.
            DELETE i_listado.
          ENDIF.
        ENDLOOP.
      ENDIF.

      o_prog->o_sgpi->get_filas_tabla( i_listado[] ).
      LOOP AT i_listado ASSIGNING <listado>.
        sgpi_texto( texto1 = 'Procesando datos' cant_porc = 100 ).

        CASE <listado>-activa.
          WHEN 'X'.
            l_icono = icon_green_light.
          WHEN 'I'.
            l_icono = icon_red_light.
          WHEN 'T'.
            l_icono = icon_warning.
          WHEN '' OR 'N'.
            l_icono = icon_question.
          WHEN 'U'.
            l_icono = icon_position_hr.
          WHEN 'D'.
            l_icono = icon_doc.
        ENDCASE.

        set_status_list( EXPORTING icono = l_icono  CHANGING list = <listado> ).
      ENDLOOP.
    ENDIF.

  ENDMETHOD.                    "seleccionar_datos


  METHOD listado.

    sgpi_texto( 'Generando informe' ).

*    o_alv->set_layout( p_vari ).
    o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' CHANGING t_tabla = i_listado ).
    o_alv->set_top_of_page( ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_text( 'TICKET,CLASE,METODO,FORM' ).
    o_alv->set_field_quitar( 'CHECK,MANDT,ID2' ).
    o_alv->set_orden( 'ID' ).
    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->show( ).


  ENDMETHOD.                    "


  METHOD status_dynpro_0100.
    DATA l_campos_invisibles TYPE string.

    IF o_texto IS INITIAL.
      CREATE OBJECT o_texto
        EXPORTING
          controlname  = 'DOCUMENTACION'
          texto_simple = ''.

      o_texto->set_editor( display_mode = v_display string = zap_exits_doc-documentacion max_cols = 180 ).
    ENDIF.


    status_dynpro( EXPORTING cprog = 'ZAP_STATUS' status = 'ST_DYN' CHANGING i_listado = i_listado ).
    IF inicio IS INITIAL.
      inicio = 'X'.
*      o_alv->variant-variant = p_vari.
      o_grid->set_layout( no_rowmove = 'X' no_rowins = 'X' style = 'STYLE' colort = 'COLOR' ).
      o_grid->quitar_opciones( cl_gui_alv_grid=>mc_fc_refresh ).
      o_grid->set_campos_tabint( i_var[] ).
      o_grid->set_field_input( 'VALOR,VALOR2,VALOR3,VALOR4,COMENTARIO' ).
      o_grid->set_field_text( campo = 'TIPO_T' valor = 'Tipo' ).
      o_grid->set_field_dropdown( campo = 'TIPO_T'  valor = '1' dominio = 'ZTIPO_PARAMETRO_EXIT' ).

      sgpi_texto( 'Generando informe' ).
      o_grid->show( CHANGING tabla = i_var ).
      o_grid->actualiza_campos_grid( campos_borrar = 'CHECK,TIPO' ).
      o_grid->set_seleccion( CHANGING t_tabla = i_var ).
    ELSE.
      o_grid->refrescar_grid( ).
    ENDIF.
    o_grid->add_button( button = 'F01' text = 'Grabar'  icon = icon_system_save forzar = 'X' ).
    o_grid->add_button( button = 'F02' text = 'Ir a exit'  icon = icon_submit forzar = 'X' ).
    o_grid->add_button( button = 'F03' text = 'Ir a implementación'  icon =  icon_change forzar = 'X' ).
    o_grid->add_button( button = 'F04' text = 'Grabar en OT'  icon =  icon_transport_proposal forzar = 'X' ).
    o_grid->add_button( button = 'F05' text = 'Log ejecución'  icon =  icon_incompletion_log forzar = 'X' ).
    o_grid->add_button( button = 'M01' text = 'Borrar'  icon = icon_delete forzar = 'X' ).

    IF zap_exits_est-activa = 'U'.
      zcl_ap_dynpro=>screen_visible( campo = 'ZAP_EXITS_EST-USUARIOS_ACTIVOS' variable = 'X' ).
    ELSE.
      zcl_ap_dynpro=>screen_visible( campo = 'ZAP_EXITS_EST-USUARIOS_ACTIVOS' variable = '' ).
    ENDIF.

    zcl_ap_dynpro=>screen_visible( campo = 'ZAP_EXITS_EST-CPROG,ZAP_EXITS_EST-PROYECTO,ZAP_EXITS_EST-BADI_NUEVO,ZAP_EXITS_EST-BADI_CLASICO,ZAP_EXITS_EST-IMPLEMENTACION' variable = 'X' ).
    zcl_ap_dynpro=>screen_visible( campo = 'ZAP_EXITS_EST-CLASE,ZAP_EXITS_EST-METODO,ZAP_EXITS_EST-IMPLEMENTACION' variable = '' ).
    CASE zap_exits_est-tipo.
      WHEN 'U'.
        zcl_ap_dynpro=>screen_visible( campo = 'ZAP_EXITS_EST-CPROG,ZAP_EXITS_EST-PROYECTO,ZAP_EXITS_EST-BADI_NUEVO,ZAP_EXITS_EST-BADI_CLASICO' variable = '' ).
      WHEN 'B' OR 'E'.
        zcl_ap_dynpro=>screen_visible( campo = 'ZAP_EXITS_EST-CLASE,ZAP_EXITS_EST-METODO,ZAP_EXITS_EST-IMPLEMENTACION' variable = 'X' ).
    ENDCASE.


  ENDMETHOD.


  METHOD command_dynpro_0100.
    DATA: l_hay_sel,
          l_program TYPE sy-cprog,
          l_clase   TYPE string,
          l_var_ini TYPE t_var.

    FIELD-SYMBOLS: <var> TYPE t_var.

    IF sy-ucomm = 'BACK'.
      IF p_id IS INITIAL.
        zcl_ap_dev=>relanzar_report( report = sy-cprog ).
      ELSE.
        LEAVE PROGRAM.
      ENDIF.
    ENDIF.

    command_dynpro( EXPORTING o_alv = o_grid
                            CHANGING i_listado = i_var i_listado_ini = i_var_ini hay_sel = l_hay_sel ).

    CASE ucomm.
      WHEN 'F01' OR 'GRABAR'.
        grabar( ).
      WHEN 'F02'.
        CASE zap_exits_est-tipo.
          WHEN 'U'.
          WHEN OTHERS.
        ENDCASE.
        IF NOT zap_exits_est-include IS INITIAL.
          l_program = zap_exits_est-include.
        ELSEIF NOT zap_exits_est-cprog IS INITIAL.
          l_program = zap_exits_est-cprog.
        ENDIF.

        IF NOT l_program IS INITIAL.
          CALL FUNCTION 'EDITOR_PROGRAM'
            EXPORTING
              appid       = 'PG'
              display     = 'X'
              program     = l_program
            EXCEPTIONS
              application = 1.
        ELSEIF NOT zap_exits_est-clase IS INITIAL.
          SET PARAMETER ID 'CLASS' FIELD zap_exits_est-clase.
          CALL TRANSACTION 'SE24' AND SKIP FIRST SCREEN.
        ENDIF.

      WHEN 'F03'.
        IF NOT zap_exits_est-clase_exit IS INITIAL.
          SET PARAMETER ID 'CLASS' FIELD zap_exits_est-clase_exit.
          CALL TRANSACTION 'SE24' AND SKIP FIRST SCREEN.
        ELSEIF NOT zap_exits_est-clase IS INITIAL.
          SET PARAMETER ID 'CLASS' FIELD zap_exits_est-clase.
          CALL TRANSACTION 'SE24' AND SKIP FIRST SCREEN.
        ELSE.
          IF NOT zap_exits_est-include IS INITIAL.
            l_program = zap_exits_est-include.
          ELSEIF NOT zap_exits_est-cprog IS INITIAL.
            l_program = zap_exits_est-cprog.
          ENDIF.

        ENDIF.
        IF NOT l_program IS INITIAL.
          CALL FUNCTION 'EDITOR_PROGRAM'
            EXPORTING
              appid       = 'PG'
              display     = 'X'
              program     = l_program
            EXCEPTIONS
              application = 1.
        ENDIF.
      WHEN 'F04'.
        grabar_ot( ).
      WHEN 'F05'.
        DATA: r_prog  TYPE RANGE OF progname,
              lr_prog LIKE LINE OF r_prog,
              r_proc  TYPE RANGE OF text20,
              lr_proc LIKE LINE OF r_proc.
        lr_prog-option = 'CP'.
        lr_prog-sign = 'I'.
        CONCATENATE zap_exits_est-id2 '*' INTO lr_prog-low.
        APPEND lr_prog TO r_prog.

        lr_proc-option = 'EQ'.
        lr_proc-sign   = 'I'.
        lr_proc-low    = 'EXITS'.
        APPEND lr_proc TO r_proc.
        lr_proc-low    = zap_exits_est-id2.
        APPEND lr_proc TO r_proc.
        SUBMIT (zcl_c=>prog_zlog)
          AND RETURN
          VIA SELECTION-SCREEN
         WITH s_proces IN r_proc
         WITH s_progra IN r_prog.

      WHEN 'M01'.
        DELETE FROM zap_exits WHERE id = zap_exits_est-id2.
        DELETE FROM zap_exits_doc WHERE id = zap_exits_est-id2.
        DELETE FROM zap_exits_par WHERE id = zap_exits_est-id2.


        zcl_ap_dev=>relanzar_report( report = sy-cprog ).
    ENDCASE.
  ENDMETHOD.

  METHOD validaciones.


  ENDMETHOD.

  METHOD grabar_ot.
    DATA:
      l_request   TYPE trkorr,
      lt_e071     TYPE tr_objects,
      lt_e071k    TYPE tr_keys,
      lv_position TYPE ddposition,
      lv_tabkey   TYPE trobj_name,
      ls_e071     TYPE e071,
      ls_e071k    TYPE e071k.

    FIELD-SYMBOLS: <var> TYPE t_var.
    grabar( ).

    ls_e071-trkorr   = l_request.
    ls_e071-as4pos   = 1.
    ls_e071-pgmid    = 'R3TR'.
    ls_e071-object   = 'TABU'.
    ls_e071-obj_name = 'ZAP_EXITS'.
    ls_e071-objfunc  = 'K'.
    ls_e071-lang     = sy-langu.
    APPEND ls_e071 TO lt_e071.

    lv_position = 1.
    ls_e071k-trkorr     = l_request.
    ls_e071k-pgmid      = 'R3TR'.
    ls_e071k-object     = 'TABU'.
    ls_e071k-objname    = 'ZAP_EXITS'.
    ls_e071k-as4pos     = lv_position.
    ls_e071k-mastertype = 'TABU'.
    ls_e071k-mastername = 'ZAP_EXITS'.
    ls_e071k-lang       = sy-langu.
    ls_e071k-tabkey(3)  = sy-mandt.
    ls_e071k-tabkey+3(40)  = zap_exits-id.
    APPEND ls_e071k TO lt_e071k.


    ls_e071-trkorr   = l_request.
    ls_e071-as4pos   = 1.
    ls_e071-pgmid    = 'R3TR'.
    ls_e071-object   = 'TABU'.
    ls_e071-obj_name = 'ZAP_EXITS_DOC'.
    ls_e071-objfunc  = 'K'.
    ls_e071-lang     = sy-langu.
    APPEND ls_e071 TO lt_e071.

    lv_position = 2.
    ls_e071k-trkorr     = l_request.
    ls_e071k-pgmid      = 'R3TR'.
    ls_e071k-object     = 'TABU'.
    ls_e071k-objname    = 'ZAP_EXITS_DOC'.
    ls_e071k-as4pos     = lv_position.
    ls_e071k-mastertype = 'TABU'.
    ls_e071k-mastername = 'ZAP_EXITS_DOC'.
    ls_e071k-lang       = sy-langu.
    ls_e071k-tabkey(3)  = sy-mandt.
    ls_e071k-tabkey+3(40)  = zap_exits_doc-id.
    ls_e071k-tabkey+43(30)  = zap_exits_doc-tipo_doc.
    APPEND ls_e071k TO lt_e071k.


    ls_e071-trkorr   = l_request.
    ls_e071-as4pos   = 1.
    ls_e071-pgmid    = 'R3TR'.
    ls_e071-object   = 'TABU'.
    ls_e071-obj_name = 'ZAP_EXITS_PAR'.
    ls_e071-objfunc  = 'K'.
    ls_e071-lang     = sy-langu.
    APPEND ls_e071 TO lt_e071.

    LOOP AT i_var ASSIGNING <var>.
      ADD 1 TO lv_position.
      ls_e071k-trkorr     = l_request.
      ls_e071k-pgmid      = 'R3TR'.
      ls_e071k-object     = 'TABU'.
      ls_e071k-objname    = 'ZAP_EXITS_PAR'.
      ls_e071k-as4pos     = lv_position.
      ls_e071k-mastertype = 'TABU'.
      ls_e071k-mastername = 'ZAP_EXITS_PAR'.
      ls_e071k-lang       = sy-langu.
      ls_e071k-tabkey(3)  = sy-mandt.
      ls_e071k-tabkey+3(40)  = zap_exits-id.
      ls_e071k-tabkey+43(1)  = <var>-tipo.
      ls_e071k-tabkey+44(30)  = <var>-clave.
      ls_e071k-tabkey+74(30)  = <var>-clave2.
      ls_e071k-tabkey+104(15)  = <var>-clave3.
      APPEND ls_e071k TO lt_e071k.
    ENDLOOP.

    CALL FUNCTION 'TR_REQUEST_CHOICE'
      EXPORTING
        iv_suppress_dialog = ''
        iv_request         = l_request
        it_e071            = lt_e071
        it_e071k           = lt_e071k.
  ENDMETHOD.

  METHOD grabar.
    DATA: l_var_ini TYPE t_var.

    FIELD-SYMBOLS: <var> TYPE t_var.


    CLEAR zap_exits.
    IF zap_exits_est-erdat IS INITIAL.
      zap_exits_est-erdat = sy-datum.
      zap_exits_est-erzet = sy-uzeit.
      zap_exits_est-ernam = sy-uname.
    ELSE.
      zap_exits_est-aedat = sy-datum.
      zap_exits_est-aezet = sy-uzeit.
      zap_exits_est-aenam = sy-uname.
    ENDIF.
    MOVE-CORRESPONDING zap_exits_est TO zap_exits.
    zap_exits-id = zap_exits-id2.


    MODIFY zap_exits FROM zap_exits.

    zap_exits_doc-id = zap_exits-id.
    zap_exits_doc-tipo_doc = 'ESPECIFICACIONES'.
    o_texto->get_editor( IMPORTING string = zap_exits_doc-documentacion ).
    IF zap_exits_doc-documentacion IS INITIAL.
      DELETE zap_exits_doc FROM zap_exits_doc.
    ELSE.
      MODIFY zap_exits_doc FROM zap_exits_doc.
    ENDIF.

    o_grid->comprobar_cambios( ).

    LOOP AT i_var ASSIGNING <var>.
      <var>-tipo = o_grid->get_valor_from_desc( campo = 'TIPO_T' descripcion = <var>-tipo_t ).

      IF <var>-erdat IS INITIAL.
        <var>-erdat = sy-datum.
        <var>-erzet = sy-uzeit.
        <var>-ernam = sy-uname.
      ELSE.
        CLEAR l_var_ini.
        READ TABLE i_var_ini INTO l_var_ini WITH KEY tipo    = <var>-tipo clave   = <var>-clave clave2  = <var>-clave2 clave3  = <var>-clave3.
        IF sy-subrc NE 0 OR <var> NE l_var_ini.
          <var>-aedat = sy-datum.
          <var>-aezet = sy-uzeit.
          <var>-aenam = sy-uname.
        ENDIF.
      ENDIF.
      CLEAR zap_exits_par.
      MOVE-CORRESPONDING <var> TO zap_exits_par.
      zap_exits_par-id = zap_exits-id.
      MODIFY zap_exits_par FROM zap_exits_par.
    ENDLOOP.

    LOOP AT i_var_borrar ASSIGNING <var>.
      DELETE FROM zap_exits_par
             WHERE  id      = zap_exits-id
             AND    tipo    = <var>-tipo
             AND    clave   = <var>-clave
             AND    clave2  = <var>-clave2
             AND    clave3  = <var>-clave3.
    ENDLOOP.
    CLEAR i_var_borrar.


    i_var_ini = i_var.
    MESSAGE 'Se ha grabado la exit' TYPE 'S'.
  ENDMETHOD.

  METHOD ir_a_detalle.
    FIELD-SYMBOLS <var> TYPE t_var.

    CLEAR: zap_exits, zap_exits_est, zap_exits_doc.
    IF NOT o_texto IS INITIAL.
      o_texto->destroy( ).
      CLEAR o_texto.
    ENDIF.
    MOVE-CORRESPONDING list TO zap_exits_est.
    MOVE-CORRESPONDING list TO zap_exits.
    CLEAR i_var.
    SELECT SINGLE * FROM zap_exits_doc
      INTO zap_exits_doc
     WHERE id = list-id
       AND tipo_doc = 'ESPECIFICACIONES'.
    SELECT * FROM zap_exits_par
      INTO CORRESPONDING FIELDS OF TABLE i_var
     WHERE id = list-id.
    LOOP AT i_var ASSIGNING <var>.
      <var>-tipo_t = zcl_ap_utils=>get_texto_dominio( dominio = 'ZTIPO_PARAMETRO_EXIT' valor = <var>-tipo ).
    ENDLOOP.
    i_var_ini = o_prog->i_var.
    CALL SCREEN 0100.

  ENDMETHOD.

  METHOD generar_word.
    FIELD-SYMBOLS: <listado> TYPE t_listado,
                   <par>     TYPE zap_exits_par.
    DATA: o_doc           TYPE REF TO zcl_ap_docx,
          l_fecha_txt(10),
          l_titulo        TYPE string,
          l_list          TYPE t_listado,
          zap_exits_doc   TYPE zap_exits_doc,
          l_style_effect  TYPE  zcl_ap_docx=>ty_character_style_effect,
          i_par           TYPE TABLE OF zap_exits_par.

    DATA : BEGIN OF ls_cle,
             f1 TYPE zcl_ap_docx=>ty_table_style_field,
             f2 TYPE zcl_ap_docx=>ty_table_style_field,
           END OF ls_cle,
           lt_cle LIKE TABLE OF ls_cle.

    DATA : BEGIN OF ls_par,
             clave      TYPE zcl_ap_docx=>ty_table_style_field,
             clave2     TYPE zcl_ap_docx=>ty_table_style_field,
             clave3     TYPE zcl_ap_docx=>ty_table_style_field,
             valor      TYPE zcl_ap_docx=>ty_table_style_field,
             valor2     TYPE zcl_ap_docx=>ty_table_style_field,
             valor3     TYPE zcl_ap_docx=>ty_table_style_field,
             valor4     TYPE zcl_ap_docx=>ty_table_style_field,
             comentario TYPE zcl_ap_docx=>ty_table_style_field,
           END OF ls_par,
           lt_par LIKE TABLE OF ls_par.


    CREATE OBJECT o_doc
      EXPORTING
*       tpl              = 'C:\TEMP\ZAP_EXITS.DOCX'
        tcode            = 'WORD'
        plantilla        = 'ZAP_EXITS'
        keep_tpl_content = 1.


    WRITE sy-datum TO l_fecha_txt DD/MM/YYYY.
    REPLACE ALL OCCURRENCES OF '.' IN l_fecha_txt WITH '/'.
    o_doc->reemplazar_valor( var = 'FECHA' valor = l_fecha_txt ).

    CALL METHOD o_doc->write_toc.


    __concat2 l_titulo 'Documentación exits' sy-datum.
    CALL METHOD o_doc->set_title( l_titulo ).

    SORT i_listado BY clasificacion id.
    LOOP AT i_listado ASSIGNING <listado> WHERE check = 'X'.
      o_doc->write_break( breaktype = zcl_ap_docx=>c_breaktype_page ).

      AT NEW clasificacion.
        IF <listado>-clasificacion NE l_list-clasificacion.
          l_list-clasificacion = <listado>-clasificacion.
          IF <listado>-clasificacion IS INITIAL.
            string = 'Sin clasificar'.
          ELSE.
            string = <listado>-clasificacion.
          ENDIF.
          o_doc->write_text( textline   = string line_style = 'Ttulo1' ).
        ENDIF.
      ENDAT.

      o_doc->write_text( textline   = <listado>-id line_style = 'Ttulo2' ).

      l_style_effect-bold = zcl_ap_docx=>c_true..
      o_doc->write_text( textline   = <listado>-descripcion line_style = 'Normal' style_effect = l_style_effect ).
      o_doc->write_text( '' ).

      l_style_effect-bold = zcl_ap_docx=>c_true..
      l_style_effect-italic = zcl_ap_docx=>c_true.
      string = get( tabla = 'D ZTIPO_EXIT' clave = <listado>-tipo ).
      o_doc->write_text( textline   = string line_style = 'Normal' style_effect = l_style_effect ).
      o_doc->write_text( '' ).

      IF <listado>-activa NE 'X'.
        l_style_effect-bold = zcl_ap_docx=>c_true..
        l_style_effect-italic = zcl_ap_docx=>c_true.
        string = get( tabla = 'D ZEXITS_ACTIVA' clave = <listado>-activa ).
        o_doc->write_text( textline   = string line_style = 'Normal' style_effect = l_style_effect ).
      ENDIF.

      SELECT SINGLE * FROM zap_exits_doc
        INTO zap_exits_doc
       WHERE id = <listado>-id
         AND tipo_doc =   'ESPECIFICACIONES'.

      CALL FUNCTION 'SOTR_TAGS_REMOVE_FROM_STRING'
        CHANGING
          text = zap_exits_doc-documentacion.


      o_doc->write_text( textline   = zap_exits_doc-documentacion line_style = 'Normal'  ).


      CLEAR lt_cle.
      ls_cle-f1-textline                    = 'Transacción'.
      ls_cle-f1-style_effect-font           = 'Arial'.
      ls_cle-f1-style_effect-size           = '10'.
      ls_cle-f1-style_effect-italic         = zcl_ap_docx=>c_true.
      ls_cle-f2-textline                    = <listado>-tcode.
      ls_cle-f2-style_effect-font           = 'Arial'.
      ls_cle-f2-style_effect-size           = '10'.

      IF NOT <listado>-tcode IS INITIAL.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-responsable IS INITIAL.
        ls_cle-f1-textline                    = 'Responsable'.
        ls_cle-f2-textline                    = <listado>-responsable.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-ticket IS INITIAL.
        ls_cle-f1-textline                    = 'Ticket'.
        ls_cle-f2-textline                    = <listado>-ticket.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-modulo IS INITIAL.
        ls_cle-f1-textline                    = 'Módulo'.
        ls_cle-f2-textline                    = <listado>-modulo.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-cprog IS INITIAL.
        ls_cle-f1-textline                    = 'Programa'.
        ls_cle-f2-textline                    = <listado>-cprog.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-form IS INITIAL.
        ls_cle-f1-textline                    = 'Form'.
        ls_cle-f2-textline                    = <listado>-form.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-include IS INITIAL.
        ls_cle-f1-textline                    = 'Include'.
        ls_cle-f2-textline                    = <listado>-include.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-clase IS INITIAL.
        ls_cle-f1-textline                    = 'Clase'.
        ls_cle-f2-textline                    = <listado>-clase.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-clase_exit IS INITIAL.
        ls_cle-f1-textline                    = 'Clase Exit'.
        ls_cle-f2-textline                    = <listado>-clase_exit.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-metodo_exit IS INITIAL.
        ls_cle-f1-textline                    = 'Método Exit'.
        ls_cle-f2-textline                    = <listado>-metodo_exit.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-funcion IS INITIAL.
        ls_cle-f1-textline                    = 'Función'.
        ls_cle-f2-textline                    = <listado>-funcion.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-proyecto IS INITIAL.
        ls_cle-f1-textline                    = 'Proyecto'.
        ls_cle-f2-textline                    = <listado>-proyecto.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-implementacion IS INITIAL.
        ls_cle-f1-textline                    = 'Implementación'.
        ls_cle-f2-textline                    = <listado>-implementacion.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-badi_clasico IS INITIAL.
        ls_cle-f1-textline                    = 'BADI Clásico'.
        ls_cle-f2-textline                    = <listado>-badi_clasico.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      IF NOT <listado>-badi_nuevo IS INITIAL.
        ls_cle-f1-textline                    = 'BADI Nuevo'.
        ls_cle-f2-textline                    = <listado>-badi_nuevo.
        APPEND ls_cle TO lt_cle.
      ENDIF.

      CALL METHOD o_doc->write_table
        EXPORTING
          content  = lt_cle
          tblwidth = 9300.

      SELECT * FROM zap_exits_par
        INTO TABLE i_par
       WHERE id = <listado>-id
         AND tipo = 'U'.
      IF sy-subrc = 0.
        CLEAR l_style_effect.
        l_style_effect-bold = zcl_ap_docx=>c_true..
        l_style_effect-underline = zcl_ap_docx=>c_true.

        o_doc->write_text( textline   = 'Enlaces' line_style = 'Normal' style_effect = l_style_effect  ).


        LOOP AT i_par ASSIGNING <par>.

          CLEAR lt_par.
          ls_par-clave-textline                 = <par>-clave.
          ls_par-clave-style_effect-font           = 'Arial'.
          ls_par-clave-style_effect-size           = '10'.
          ls_par-clave-style_effect-italic         = zcl_ap_docx=>c_true.

          ls_par-clave2-textline                    = <par>-clave2.
          ls_par-clave2-style_effect-italic         = zcl_ap_docx=>c_true.
          ls_par-clave3-textline                    = <par>-clave3.
          ls_par-clave3-style_effect-italic         = zcl_ap_docx=>c_true.

          ls_par-valor-textline                    = <par>-valor.
          ls_par-valor2-textline                    = <par>-valor2.
          ls_par-valor3-textline                    = <par>-valor3.
          ls_par-valor4-textline                    = <par>-valor4.
          ls_par-comentario-textline                    = <par>-comentario.

          APPEND ls_par TO lt_par.
        ENDLOOP.

        CALL METHOD o_doc->write_table
          EXPORTING
            content  = lt_par
            tblwidth = 9300.
      ENDIF.


      SELECT * FROM zap_exits_par
        INTO TABLE i_par
       WHERE id = <listado>-id
         AND tipo = 'C'.
      IF sy-subrc = 0.
        CLEAR lt_par.
        CLEAR l_style_effect.
        l_style_effect-bold = zcl_ap_docx=>c_true..
        l_style_effect-underline = zcl_ap_docx=>c_true.

        o_doc->write_text( textline   = 'Condiciones' line_style = 'Normal' style_effect = l_style_effect  ).


        LOOP AT i_par ASSIGNING <par>.
          CLEAR lt_par.
          ls_par-clave-textline                 = <par>-clave.
          ls_par-clave-style_effect-font           = 'Arial'.
          ls_par-clave-style_effect-size           = '10'.
          ls_par-clave-style_effect-italic         = zcl_ap_docx=>c_true.

          ls_par-clave2-textline                    = <par>-clave2.
          ls_par-clave2-style_effect-italic         = zcl_ap_docx=>c_true.
          ls_par-clave3-textline                    = <par>-clave3.
          ls_par-clave3-style_effect-italic         = zcl_ap_docx=>c_true.

          ls_par-valor-textline                    = <par>-valor.
          ls_par-valor2-textline                    = <par>-valor2.
          ls_par-valor3-textline                    = <par>-valor3.
          ls_par-valor4-textline                    = <par>-valor4.
          ls_par-comentario-textline                    = <par>-comentario.

          APPEND ls_par TO lt_par.
        ENDLOOP.

        CALL METHOD o_doc->write_table
          EXPORTING
            content  = lt_par
            tblwidth = 9300.
      ENDIF.

      SELECT * FROM zap_exits_par
        INTO TABLE i_par
       WHERE id = <listado>-id
         AND tipo = 'V'.
      IF sy-subrc = 0.
        CLEAR lt_par.
        CLEAR l_style_effect.
        l_style_effect-bold = zcl_ap_docx=>c_true..
        l_style_effect-underline = zcl_ap_docx=>c_true.

        o_doc->write_text( textline   = 'Variables' line_style = 'Normal' style_effect = l_style_effect  ).


        LOOP AT i_par ASSIGNING <par>.
          CLEAR lt_par.
          ls_par-clave-textline                 = <par>-clave.
          ls_par-clave-style_effect-font           = 'Arial'.
          ls_par-clave-style_effect-size           = '10'.
          ls_par-clave-style_effect-italic         = zcl_ap_docx=>c_true.

          ls_par-clave2-textline                    = <par>-clave2.
          ls_par-clave2-style_effect-italic         = zcl_ap_docx=>c_true.
          ls_par-clave3-textline                    = <par>-clave3.
          ls_par-clave3-style_effect-italic         = zcl_ap_docx=>c_true.

          ls_par-valor-textline                    = <par>-valor.
          ls_par-valor2-textline                    = <par>-valor2.
          ls_par-valor3-textline                    = <par>-valor3.
          ls_par-valor4-textline                    = <par>-valor4.
          ls_par-comentario-textline                    = <par>-comentario.

          APPEND ls_par TO lt_par.
        ENDLOOP.

        CALL METHOD o_doc->write_table
          EXPORTING
            content  = lt_par
            tblwidth = 9300.
      ENDIF.
    ENDLOOP.




    o_doc->mostrar_en_pantalla( ).

  ENDMETHOD.

ENDCLASS.                    "REPORT IMPLEMENTATION

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.

  CREATE OBJECT o_prog
    EXPORTING
      status        = 'INICIO'
      get_nombre_pc = 'X'
      no_param      = 'X'
      status_prog   = 'ZAP_STATUS'.

  CREATE OBJECT o_alv
    EXPORTING
      status             = 'STANDARD_ALV_DYN'
      top_of_page_auto   = 'X'
      top_of_page_titulo = 'X'
      status_prog        = 'ZAP_STATUS'
      o_dev              = o_prog.

  o_alv->add_button( button = 'F01' text = 'Nueva exit'  icon = icon_create ).
  IF sy-sysid = zcl_c=>entorno_desarrollo.
    o_alv->add_button( button = 'F02' text = 'Comparar con productivo'  icon = icon_compare forzar = 'X' ).
  ELSE.
    o_alv->add_button( button = 'F02' text = 'Comparar con desarrollo'  icon = icon_compare forzar = 'X' ).
  ENDIF.
*  IF sy-sysid = zcl_c=>entorno_desarrollo.
*    o_alv->add_button( button = 'F03' text = 'Comparar cond. con productivo'  icon = icon_compare forzar = 'X' ).
*  ELSE.
*    o_alv->add_button( button = 'F03' text = 'Comparar cond. con desarrollo'  icon = icon_compare forzar = 'X' ).
*  ENDIF.
  o_alv->add_button( button = 'F04' text = 'Generar Word'  icon = icon_doc ucomm = 'WORD' ).


  IF sy-batch IS INITIAL.
    CREATE OBJECT o_prog->o_event
      EXPORTING
        boton_refrescar = 'X'
        boton_excel     = 'X'
        boton_nuevo     = 'X'
        boton_borrar    = 'X'
        o_prog          = o_prog.

    CREATE OBJECT o_prog->o_grid
      EXPORTING
        estructura = ''
        o_event    = o_prog->o_event.
  ENDIF.

*  p_vari = o_alv->get_default_layout( ).

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

*AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
*  p_vari = o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  o_prog->at_selection( ).

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

  o_prog->main( ).
*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.
*  SET PF-STATUS 'xxxxxxxx'.
*  SET TITLEBAR 'xxx'.


  o_prog->status_dynpro_0100( ).
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

  o_prog->command_dynpro_0100( ).
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  VALIDAR_ID  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_id INPUT.

  CHECK sy-ucomm = 'GRABAR' OR sy-ucomm = 'F01'.
  IF zap_exits_est-id2 IS INITIAL.
    MESSAGE 'Informe Id de exit' TYPE 'E'.
  ELSE.
    DATA l_id TYPE zap_exits-id.
    SELECT SINGLE id FROM zap_exits
      INTO l_id
     WHERE id = zap_exits_est-id2.
    IF sy-subrc NE 0.
      CLEAR: zap_exits_est-erdat, zap_exits_est-erzet.
    ENDIF.
    IF zap_exits_est-erdat IS INITIAL.
      SELECT SINGLE id FROM zap_exits
        INTO l_id
       WHERE id = zap_exits_est-id2.
      IF sy-subrc = 0.
        MESSAGE 'Id ya existente' TYPE 'E'.
      ENDIF.
    ENDIF.
  ENDIF.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      Module  VALIDAR_FECHAS  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE validar_fechas INPUT.

  IF NOT zap_exits_est-finicio IS INITIAL AND zap_exits_est-ffin IS INITIAL.
    MESSAGE 'Informe fecha fin' TYPE 'E'.
  ELSEIF zap_exits_est-finicio IS INITIAL AND NOT zap_exits_est-ffin IS INITIAL.
    MESSAGE 'Informe fecha inicio' TYPE 'E'.
  ELSEIF zap_exits_est-finicio > zap_exits_est-ffin.
    MESSAGE 'Fecha fin no puede ser superior a fecha inicio' TYPE 'E'.
  ENDIF.

ENDMODULE.
