CLASS lcl_appl DEFINITION FINAL CREATE PRIVATE.
  PUBLIC SECTION.
    TYPES: BEGIN OF ts_t005,
             land1 TYPE t005-land1,
             intca TYPE t005-intca,
             xegld TYPE t005-xegld,
           END   OF ts_t005.
    CLASS-DATA: gt_t005          TYPE SORTED TABLE OF ts_t005 WITH UNIQUE KEY land1,
                gv_invalid_chars TYPE tvarvc-low,
                gt_doctype       TYPE SORTED TABLE OF zdyn_ws_cdtp WITH UNIQUE KEY mwskz xegld land1.
    CLASS-METHODS:
      class_constructor,
      format_date
        IMPORTING iv_date        TYPE d
        RETURNING VALUE(rv_date) TYPE string,
      format_decimal
        IMPORTING iv_decimal        TYPE p
        RETURNING VALUE(rv_decimal) TYPE string,
      format_string
        IMPORTING iv_input         TYPE simple
        RETURNING VALUE(rv_string) TYPE string,
      format_land
        IMPORTING iv_land        TYPE land1
        RETURNING VALUE(rv_land) TYPE string,
      get_invalid_chars,
      get_land
        IMPORTING iv_land        TYPE land1
        RETURNING VALUE(rs_land) TYPE ts_t005,
      get_eu_indicator
        IMPORTING iv_land         TYPE land1
        RETURNING VALUE(rv_xegld) TYPE xegld,
      get_doctype
        IMPORTING iv_mwskz          TYPE mwskz
                  iv_land           TYPE land1
        RETURNING VALUE(rs_doctype) TYPE zdyn_ws_cdtp.
ENDCLASS.
CLASS lcl_appl IMPLEMENTATION.
  METHOD format_date.
    CONCATENATE iv_date(4)
                iv_date+4(2)
                iv_date+6(2)
           INTO rv_date
                SEPARATED BY '-'.
  ENDMETHOD.
  METHOD format_land.
    DATA: lv_land_iso TYPE t005-intca.
    SELECT SINGLE intca
      FROM t005
      INTO lv_land_iso
      WHERE land1 = iv_land.
    IF sy-subrc = 0.
      rv_land = lv_land_iso.
    ELSE.
      rv_land = iv_land.
    ENDIF.
  ENDMETHOD.
  METHOD get_land.
    DATA: ls_t005 TYPE ts_t005.
    READ TABLE gt_t005 INTO ls_t005 WITH TABLE KEY land1 = iv_land.
    IF sy-subrc = 0.
      rs_land = ls_t005.
    ELSE.
      SELECT SINGLE land1 intca xegld
        FROM t005
        INTO ls_t005
       WHERE land1 = iv_land.
      IF sy-subrc NE 0.
        ls_t005-land1 = iv_land.
        ls_t005-intca = iv_land.
      ELSE.
      ENDIF.
      INSERT ls_t005 INTO TABLE gt_t005.
      rs_land = ls_t005.
    ENDIF.
  ENDMETHOD.
  METHOD get_eu_indicator.
    DATA: ls_t005 TYPE ts_t005.
    ls_t005 = get_land( iv_land ).
    rv_xegld = ls_t005-xegld.
  ENDMETHOD.
  METHOD get_doctype.
    DATA: ls_t005 TYPE ts_t005.
    ls_t005 = get_land( iv_land ).
    READ TABLE lcl_appl=>gt_doctype INTO rs_doctype WITH TABLE KEY mwskz = iv_mwskz
                                                                   xegld = ls_t005-xegld
                                                                   land1 = ls_t005-land1.
    IF sy-subrc NE 0.
      READ TABLE lcl_appl=>gt_doctype INTO rs_doctype WITH TABLE KEY mwskz = iv_mwskz
                                                                     xegld = ls_t005-xegld
                                                                     land1 = space.
      IF sy-subrc NE 0.
        CLEAR rs_doctype.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD class_constructor.
    IF lcl_appl=>gt_doctype IS INITIAL.
      SELECT *
        FROM zdyn_ws_cdtp
        INTO TABLE gt_doctype.
    ENDIF.
    get_invalid_chars( ).
  ENDMETHOD.
  METHOD format_decimal.
    rv_decimal = iv_decimal.
    CONDENSE rv_decimal NO-GAPS.
    IF iv_decimal < 0.
      SHIFT rv_decimal CIRCULAR RIGHT.
    ELSE.
    ENDIF.
  ENDMETHOD.
  METHOD format_string.
    rv_string = iv_input.
    IF gv_invalid_chars IS NOT INITIAL.
      REPLACE ALL OCCURRENCES OF REGEX gv_invalid_chars
           IN rv_string
         WITH '?'.
      IF sy-subrc = 0.
        TRANSLATE rv_string USING '? '.    "transform '?' into ' '
      ENDIF.
    ENDIF.
    TRANSLATE rv_string USING ''' ’ ´ ` '.
  ENDMETHOD.
  METHOD get_invalid_chars.
    IF gv_invalid_chars IS INITIAL.
      SELECT low
        FROM tvarvc
        INTO gv_invalid_chars
       UP TO 1 ROWS
       WHERE name EQ 'ZRFIXX61_INVALID_CHARACTERS'.
      ENDSELECT.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS zdyn_cl_ap DEFINITION
  PUBLIC
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF ty_bkpf_s,
        bukrs TYPE bkpf-bukrs,
        belnr TYPE bkpf-belnr,
        gjahr TYPE bkpf-gjahr,
        tcode TYPE bkpf-tcode,
        xblnr TYPE bkpf-xblnr,
        awtyp TYPE bkpf-awtyp,
        awkey TYPE bkpf-awkey,
        bldat TYPE bkpf-bldat,
        budat TYPE bkpf-budat,
        blart TYPE bkpf-blart,
        waers TYPE bkpf-waers,
        lifnr TYPE bseg-lifnr,
        landl TYPE bseg-landl,
      END OF ty_bkpf_s .
    TYPES:
      ty_bkpf_t TYPE TABLE OF ty_bkpf_s .
    TYPES:
      BEGIN OF ty_bseg_s,
        bukrs TYPE bseg-bukrs,
        belnr TYPE bseg-belnr,
        gjahr TYPE bseg-gjahr,
        buzei TYPE bseg-buzei,
        buzid TYPE bseg-buzid,
        bschl TYPE bseg-bschl,
        koart TYPE bseg-koart,
        shkzg TYPE bseg-shkzg,
        mwskz TYPE bseg-mwskz,
        dmbtr TYPE bseg-dmbtr,
        wrbtr TYPE bseg-wrbtr,
        zuonr TYPE bseg-zuonr,
        sgtxt TYPE bseg-sgtxt,
        menge TYPE bseg-menge,
        meins TYPE bseg-meins,
        lifnr TYPE bseg-lifnr,
        zfbdt TYPE bseg-zfbdt,
        qsskz TYPE bseg-qsskz,
        qbshb TYPE bseg-qbshb,
        qsshb TYPE bseg-qsshb,
        stceg TYPE bseg-stceg,
        landl TYPE bseg-landl,
      END OF ty_bseg_s .
    TYPES:
      ty_bseg_t TYPE TABLE OF ty_bseg_s .
    TYPES:
      ty_trreason_t TYPE STANDARD TABLE OF zdyn_ws_ctrr .
    TYPES:
      BEGIN OF ty_bset_s,
        bukrs      TYPE bset-bukrs,
        belnr      TYPE bset-belnr,
        gjahr      TYPE bset-gjahr,
        buzei      TYPE bset-buzei,
        mwskz      TYPE bset-mwskz,
        hkont      TYPE bset-hkont,
        shkzg      TYPE bset-shkzg,
        hwbas      TYPE bset-hwbas,
        fwbas      TYPE bset-fwbas,
        hwste      TYPE bset-hwste,
        fwste      TYPE bset-fwste,
        kbetr      TYPE bset-kbetr,
        lstml      TYPE bset-lstml,
        lwste      TYPE bset-lwste,
        lwbas      TYPE bset-lwbas,
        kbetr_calc TYPE bset-kbetr,
        lwste_calc TYPE bset-lwste,
      END OF ty_bset_s .
    TYPES:
      ty_bset_t TYPE TABLE OF ty_bset_s .
    TYPES:
      BEGIN OF ty_lfa1_s,
        lifnr TYPE lfa1-lifnr,
        anred TYPE lfa1-anred,
        name1 TYPE lfa1-name1,
        name2 TYPE lfa1-name2,
        stras TYPE lfa1-stras,
        ort01 TYPE lfa1-ort01,
        pstlz TYPE lfa1-pstlz,
        regio TYPE lfa1-regio,
        land1 TYPE lfa1-land1,
        stceg TYPE lfa1-stceg,
        stkzn TYPE lfa1-stkzn,

      END OF ty_lfa1_s .
    TYPES:
      ty_lfa1_t TYPE TABLE OF ty_lfa1_s .
    TYPES:
      ty_lfas_t TYPE TABLE OF lfas .
    TYPES:
      BEGIN OF ty_lfb1_s,
        lifnr TYPE lfb1-lifnr,
        bukrs TYPE lfb1-bukrs,
        intad TYPE lfb1-intad,
        tlfns TYPE lfb1-tlfns,
      END OF ty_lfb1_s .
    TYPES:
      ty_lfb1_t TYPE TABLE OF ty_lfb1_s .
    TYPES:
      BEGIN OF ts_tax,
        mwskz TYPE bset-mwskz,
        kbetr TYPE bset-kbetr,
      END   OF ts_tax .
    TYPES:
      tt_tax TYPE TABLE OF ts_tax.
    TYPES:
      BEGIN OF ts_doc_type_tax_type,
        doc_type  TYPE string,
        tax_types TYPE RANGE OF mwskz,
      END OF ts_doc_type_tax_type.
    TYPES:
      tt_doc_type_tax_type TYPE TABLE OF ts_doc_type_tax_type .
    TYPES:
      BEGIN OF ts_message,
        bukrs TYPE bukrs,
        landl TYPE landl,
        lifnr TYPE lifnr,
      END   OF ts_message .
    TYPES:
      BEGIN OF ts_t001,
        bukrs   TYPE t001-bukrs,
        butxt   TYPE t001-butxt,
        waers   TYPE t001-waers,
        spras   TYPE t001-spras,
        adrnr   TYPE t001-adrnr,
        stceg   TYPE t001-stceg,
        address TYPE sadr,
      END   OF ts_t001 .
    TYPES: tt_t001 TYPE TABLE OF ts_t001.
    TYPES:
      BEGIN OF ts_t001n,
        bukrs TYPE t001n-bukrs,
        land1 TYPE t001n-land1,
        stceg TYPE t001n-stceg,
        butxt TYPE t001n-butxt,
        adrnr TYPE t001n-adrnr,
      END   OF ts_t001n .
    TYPES: tt_t001n TYPE TABLE OF ts_t001n.
    TYPES:
      BEGIN OF ts_t001z,
        bukrs TYPE t001z-bukrs,
        party TYPE t001z-party,
        paval TYPE t001z-paval,
      END   OF ts_t001z .
    TYPES: tt_t001z TYPE TABLE OF ts_t001z.
    TYPES:
      BEGIN OF ts_t059z,
        land1  TYPE t059z-land1,
        witht  TYPE t059z-witht,
        withcd TYPE t059z-wt_withcd,
        qsatz  TYPE t059z-qsatz,
        text40 TYPE t059zt-text40,
      END OF ts_t059z.


    CONSTANTS cv_shkzg_credit TYPE shkzg VALUE 'H' ##NO_TEXT.
    CONSTANTS cv_shkzg_debit TYPE shkzg VALUE 'S' ##NO_TEXT.
    CONSTANTS cv_party_tax_number_it TYPE t001z-party VALUE 'SAP004' ##NO_TEXT.
    CONSTANTS cv_party_rb_code TYPE t001z-party VALUE 'SAP006' ##NO_TEXT.
    CONSTANTS cv_buzid_item TYPE buzid VALUE 'W' ##NO_TEXT.
    CONSTANTS cv_buzid_account TYPE buzid VALUE 'S' ##NO_TEXT.   " General G/L account
    CONSTANTS cv_buzid_tax TYPE buzid VALUE 'T' ##NO_TEXT.
    CONSTANTS cv_koart_gl TYPE koart VALUE 'S' ##NO_TEXT.   " GR/IR item
    CONSTANTS cv_land_it TYPE land1 VALUE 'IT' ##NO_TEXT.
    CONSTANTS c_koart_d TYPE bseg-koart VALUE 'D' ##NO_TEXT. "Customer Line
    CONSTANTS c_koart_k TYPE bseg-koart VALUE 'K' ##NO_TEXT. "Vendor Line

    METHODS get_ap_documents
      IMPORTING
        !it_sel_comp_code   TYPE zdyn_cl_bapi=>yt_range_bukrs OPTIONAL
        !it_sel_doc_num     TYPE zdyn_cl_bapi=>yt_range_belnr OPTIONAL
        !it_sel_fiscal_year TYPE zdyn_cl_bapi=>yt_range_gjahr OPTIONAL
        !it_sel_ref_num     TYPE zdyn_cl_bapi=>yt_range_xblnr OPTIONAL
        !it_sel_doc_type    TYPE zdyn_cl_bapi=>yt_range_blart OPTIONAL
        !it_sel_ent_date    TYPE zdyn_cl_bapi=>yt_range_cpudt OPTIONAL
        !is_land            TYPE land1 OPTIONAL
        !is_tax_num         TYPE stceg OPTIONAL
        !ip_round           TYPE bset-kbetr OPTIONAL
        !ib_normal          TYPE abap_bool DEFAULT abap_true
        !ib_corr            TYPE abap_bool DEFAULT abap_false
        !ib_final           TYPE abap_bool DEFAULT abap_false
        !ib_flip_sign       TYPE abap_bool DEFAULT abap_false
        !ib_use_register    TYPE abap_bool DEFAULT abap_true
      EXPORTING
        !et_docs            TYPE zdyn_linvoice_header .
protected section.

  methods GET_ADDRESS
    importing
      !IC_COMPANY_CODE type BUKRS
    exporting
      !EST_ADDRESS type TS_T001-ADDRESS
    exceptions
      ERROR_OCCURRED .
  methods GET_COMPANY_DETAILS
    importing
      !IT_SEL_COMP_CODE type ZDYN_CL_BAPI=>YT_RANGE_BUKRS
    exporting
      !ET_T001 type TT_T001
      !ET_T001N type TT_T001N
      !ET_T001Z type TT_T001Z .
  methods GET_TAX_SUMMARY
    importing
      !IST_BKPF type TY_BKPF_S
      !IST_TAX_TYPES type TS_DOC_TYPE_TAX_TYPE-TAX_TYPES
      !IT_BSEG type TY_BSEG_T
      !IT_BSET type TY_BSET_T
      !IT_TRREASON type TY_TRREASON_T
      !IB_FLIP_SIGN type ABAP_BOOL default ABAP_FALSE
      !IP_ROUND type BSET-KBETR optional
    exporting
      !ET_TAX_SUMMARY type ZDYN_LINVOICE_TAX_SUMMARY .
  methods AUTHORIZATION_CHECK
    importing
      !IT_SEL_COMP_CODE type ZDYN_CL_BAPI=>YT_RANGE_BUKRS
    returning
      value(RB_AUTHORIZED) type ABAP_BOOL .
  methods GET_DOC_TYPE_FOR_TAX_TYPE
    importing
      !PV_LAND1 type LAND1
      !PT_TAX type TT_TAX
    changing
      !PV_DOCUMENT_TYPE type STRING .
  methods GET_DOC_TYPE_FROM_HDR
    importing
      !IST_BKPF type TY_BKPF_S
    exporting
      !EC_DOC_TYPE type STRING .
  methods GET_DOC_TYPE_TAX_TYPE_MAP
    importing
      !IST_BKPF type TY_BKPF_S
      !IT_BSET type TY_BSET_T
    changing
      !CT_DOC_TYPES type TT_DOC_TYPE_TAX_TYPE .
  methods GET_DATA
    importing
      !IT_SEL_COMP_CODE type ZDYN_CL_BAPI=>YT_RANGE_BUKRS optional
      !IT_SEL_DOC_NUM type ZDYN_CL_BAPI=>YT_RANGE_BELNR optional
      !IT_SEL_FISCAL_YEAR type ZDYN_CL_BAPI=>YT_RANGE_GJAHR optional
      !IT_SEL_REF_NUM type ZDYN_CL_BAPI=>YT_RANGE_XBLNR optional
      !IT_SEL_DOC_TYPE type ZDYN_CL_BAPI=>YT_RANGE_BLART optional
      !IT_SEL_ENT_DATE type ZDYN_CL_BAPI=>YT_RANGE_CPUDT optional
      !IS_LAND type LAND1 optional
      !IS_TAX_NUM type STCEG optional
      !IP_ROUND type BSET-KBETR optional
      !IB_NORMAL type ABAP_BOOL default ABAP_TRUE
      !IB_CORR type ABAP_BOOL default ABAP_FALSE
      !IB_FINAL type ABAP_BOOL default ABAP_FALSE
      !IB_FLIP_SIGN type ABAP_BOOL default ABAP_FALSE
    exporting
      !ET_DATA type ZDYN_LINVOICE_HEADER .
  methods GET_FI_DOCUMENTS
    importing
      !IT_SEL_COMP_CODE type ZDYN_CL_BAPI=>YT_RANGE_BUKRS optional
      !IT_SEL_DOC_NUM type ZDYN_CL_BAPI=>YT_RANGE_BELNR optional
      !IT_SEL_FISCAL_YEAR type ZDYN_CL_BAPI=>YT_RANGE_GJAHR optional
      !IT_SEL_REF_NUM type ZDYN_CL_BAPI=>YT_RANGE_XBLNR optional
      !IT_SEL_DOC_TYPE type ZDYN_CL_BAPI=>YT_RANGE_BLART optional
      !IT_SEL_ENT_DATE type ZDYN_CL_BAPI=>YT_RANGE_CPUDT optional
    changing
      !CT_BKPF type TY_BKPF_T .
  methods GET_INVOICE_ITEMS
    changing
      !CT_BKPF type TY_BKPF_T
      !CT_BSEG type TY_BSEG_T
      !CT_TRREASON type TY_TRREASON_T
      !CT_BSET type TY_BSET_T
      !CT_LFA1 type TY_LFA1_T
      !CT_LFAS type TY_LFAS_T
      !CT_LFB1 type TY_LFB1_T .
private section.
endclass. "ZDYN_CL_AP definition
class ZDYN_CL_AP implementation.
METHOD authorization_check.

  DATA: lt_bukrs TYPE STANDARD TABLE OF t001-bukrs,
        lc_bukrs TYPE t001-bukrs.

  zdyn_cl_msg=>add_to_call_stack( ).

  SELECT bukrs FROM t001 INTO TABLE lt_bukrs
    WHERE bukrs IN it_sel_comp_code
    ORDER BY PRIMARY KEY.

  LOOP AT lt_bukrs INTO lc_bukrs.
    AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
      ID 'BUKRS' FIELD lc_bukrs
      ID 'ACTVT' FIELD '03'.
    IF sy-subrc <> 0.
      rb_authorized = abap_false.
      zdyn_cl_msg=>add_sysmsg( ).
      RETURN.
    ENDIF.
  ENDLOOP.

  rb_authorized = abap_true.

ENDMETHOD.
METHOD get_address.

  DATA: lc_adrnr      TYPE t001-adrnr,
        lst_addr1_sel TYPE addr1_sel,
        lt_adttx      TYPE STANDARD TABLE OF adttx,
        lst_adttx     LIKE LINE OF lt_adttx.

  IF ic_company_code IS INITIAL.
    RAISE error_occurred.
  ENDIF.

  SELECT SINGLE adrnr FROM t001 INTO lc_adrnr WHERE bukrs = ic_company_code.

  lst_addr1_sel-addrnumber = lc_adrnr.
  CALL FUNCTION 'ADDR_GET'
    EXPORTING
      address_selection = lst_addr1_sel
    IMPORTING
      sadr              = est_address
    EXCEPTIONS
      OTHERS            = 1.
  IF sy-subrc <> 0.
    RAISE error_occurred.
  ENDIF.

  CALL FUNCTION 'ADDR_COMM_GET'
    EXPORTING
      address_number = lc_adrnr
      date_from      = '00010101'
      language       = sy-langu
      table_type     = 'ADTTX'
    TABLES
      comm_table     = lt_adttx
    EXCEPTIONS
      OTHERS         = 4.
  IF sy-subrc = 0.
    LOOP AT lt_adttx INTO lst_adttx.
      IF lst_adttx-home_flag = 'X'.
        est_address-teltx = lst_adttx-ttx_number.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDMETHOD.
METHOD get_ap_documents.

  zdyn_cl_msg=>add_to_call_stack( ).

  CHECK abap_true = authorization_check( it_sel_comp_code ).

  get_data( EXPORTING it_sel_comp_code   = it_sel_comp_code
                      it_sel_doc_num     = it_sel_doc_num
                      it_sel_fiscal_year = it_sel_fiscal_year
                      it_sel_ref_num     = it_sel_ref_num
                      it_sel_doc_type    = it_sel_doc_type
                      it_sel_ent_date    = it_sel_ent_date
                      is_land            = is_land
                      is_tax_num         = is_tax_num
                      ip_round           = ip_round
                      ib_flip_sign       = ib_flip_sign
            IMPORTING et_data            = et_docs ).

ENDMETHOD.
METHOD get_company_details.

  FIELD-SYMBOLS: <st_t001>  TYPE ts_t001.

  SELECT bukrs butxt waers spras adrnr stceg
    FROM t001
    INTO TABLE et_t001
   WHERE bukrs IN it_sel_comp_code.

  LOOP AT et_t001 ASSIGNING <st_t001>.
    get_address( EXPORTING  ic_company_code = <st_t001>-bukrs
                 IMPORTING  est_address     = <st_t001>-address
                 EXCEPTIONS OTHERS          = 1 ).
    IF sy-subrc <> 0.
      CLEAR <st_t001>-address.
    ENDIF.
  ENDLOOP.

  SELECT bukrs land1 stceg butxt adrnr
    FROM t001n
    INTO TABLE et_t001n
    WHERE bukrs IN it_sel_comp_code.


  SELECT bukrs party paval
    FROM t001z
    INTO TABLE et_t001z
   WHERE bukrs IN it_sel_comp_code.

ENDMETHOD.
METHOD get_data.

  zdyn_cl_msg=>add_to_call_stack( ).

  DATA: lt_tax            TYPE tt_tax,
        ls_tax            TYPE ts_tax,
        lt_bkpf           TYPE ty_bkpf_t,
        lt_bseg           TYPE ty_bseg_t,
        lt_trreason       TYPE ty_trreason_t,
        lt_bset           TYPE ty_bset_t,
        lt_bset_corrected TYPE ty_bset_t,
        lt_lfa1           TYPE ty_lfa1_t,
        lt_lfas           TYPE ty_lfas_t,
        lt_lfb1           TYPE ty_lfb1_t,
        lt_t001           TYPE tt_t001,
        lt_t001n          TYPE tt_t001n,
        lt_t001z          TYPE tt_t001z,
        lst_lfa1          LIKE LINE OF lt_lfa1,
        lst_lfb1          LIKE LINE OF lt_lfb1,
        lst_lfas          LIKE LINE OF lt_lfas,
        lst_bkpf          LIKE LINE OF lt_bkpf,
        lst_bset          LIKE LINE OF lt_bset,
        lst_bseg          LIKE LINE OF lt_bseg,
        lst_t001          TYPE ts_t001,
        lst_t001n         TYPE ts_t001n,
        lst_t001z         TYPE ts_t001z,
        lst_t059z         TYPE ts_t059z,
        lc_dmbtr          LIKE lst_bseg-dmbtr,
        lp_unit_price     TYPE p LENGTH 10 DECIMALS 8,
        lt_doc_types.

  DATA: lt_invoices           TYPE zdyn_linvoice_header,
        ls_invoice            TYPE zdyn_sinvoice_header,
        lt_documents          TYPE zdyn_linvoice_subheader,
        lt_doc_multi_tax      TYPE zdyn_linvoice_subheader,
        ls_documents          TYPE zdyn_sinvoice_subheader,

        lt_witholding_tax     TYPE zdyn_linvoice_withholding,
        lt_items              TYPE zdyn_linvoice_item,
        lt_vatsummary         TYPE zdyn_linvoice_tax_summary,
        ls_witholding_tax     TYPE zdyn_sinvoice_withholding,
        ls_items              TYPE zdyn_sinvoice_item,
        ls_vatsummary         TYPE zdyn_sinvoice_tax_summary,
        lv_stceg              TYPE stceg,
        lv_diff               TYPE bset-kbetr,
        ln_seq_num            TYPE n LENGTH 2,
        lt_doc_type_tax_type  TYPE tt_doc_type_tax_type,
        lst_doc_type_tax_type LIKE LINE OF lt_doc_type_tax_type,
        lt_message            TYPE SORTED TABLE OF ts_message WITH NON-UNIQUE KEY bukrs landl lifnr,
        ls_message            TYPE ts_message.
  FIELD-SYMBOLS: <ls_trreason>  TYPE LINE OF ty_trreason_t.

  get_company_details( EXPORTING it_sel_comp_code = it_sel_comp_code
                       IMPORTING et_t001          = lt_t001
                                 et_t001n         = lt_t001n
                                 et_t001z         = lt_t001z ).

  get_fi_documents( EXPORTING it_sel_comp_code    = it_sel_comp_code
                              it_sel_doc_num      = it_sel_doc_num
                              it_sel_fiscal_year  = it_sel_fiscal_year
                              it_sel_ref_num      = it_sel_ref_num
                              it_sel_doc_type     = it_sel_doc_type
                              it_sel_ent_date     = it_sel_ent_date
                    CHANGING  ct_bkpf             = lt_bkpf ).

  get_invoice_items( CHANGING ct_bkpf      = lt_bkpf
                              ct_bseg      = lt_bseg
                              ct_trreason  = lt_trreason
                              ct_bset      = lt_bset
                              ct_lfa1      = lt_lfa1
                              ct_lfas      = lt_lfas
                              ct_lfb1      = lt_lfb1 ).

  MOVE-CORRESPONDING lt_bkpf TO lt_message.
  DELETE ADJACENT DUPLICATES FROM lt_message.


  LOOP AT lt_message INTO ls_message.

*   We send a document for each vendor/company code/reporting country
    READ TABLE lt_lfb1 INTO lst_lfb1 WITH KEY lifnr = ls_message-lifnr
                                              bukrs = ls_message-bukrs.
    READ TABLE lt_lfa1 INTO lst_lfa1 WITH KEY lifnr = lst_lfb1-lifnr.
    READ TABLE lt_t001  INTO lst_t001 WITH KEY bukrs = lst_lfb1-bukrs.
    READ TABLE lt_t001n INTO lst_t001n WITH KEY bukrs = lst_lfb1-bukrs
                                                land1 = lst_lfa1-land1.
    READ TABLE lt_t001z INTO lst_t001z WITH KEY bukrs = lst_lfb1-bukrs
                                                party = cv_party_tax_number_it.
    READ TABLE lt_lfas INTO lst_lfas WITH KEY lifnr = lst_lfb1-lifnr
                                              land1 = ls_message-landl.
    CLEAR ls_invoice.
    ls_invoice-sender_country = lcl_appl=>format_land( is_land ).
    ls_invoice-sender_vat           = is_tax_num.
    ls_invoice-sender_id            = 'HHBD9AK'.
    ls_invoice-transmission_format  = 'FPR12'.

    IF lst_lfas IS INITIAL.
      lv_stceg = lst_lfa1-stceg.
    ELSE.
      lv_stceg = lst_lfas-stceg.
    ENDIF.
    CASE ls_message-landl.
      WHEN OTHERS.
        ls_invoice-recipient_country = lcl_appl=>format_land( ls_message-landl ).
        ls_invoice-recipient_vat     = lv_stceg+2.
    ENDCASE.
    ls_invoice-recipient_tax_regime  = 'RF01'.
    ls_invoice-recipient_address     = lst_lfa1-stras.
    CASE lst_lfa1-land1.
      WHEN cv_land_it.
        ls_invoice-recipient_postal_code = lst_lfa1-pstlz.
      WHEN OTHERS.
        ls_invoice-recipient_postal_code = '00000'.
    ENDCASE.
    ls_invoice-recipient_city        = lst_lfa1-ort01.
    ls_invoice-recipient_coutry_code = lcl_appl=>format_land( lst_lfa1-land1 ).
    ls_invoice-recipient_name        = lst_lfa1-name1.

    CASE lst_t001-address-land1.
      WHEN OTHERS.
        ls_invoice-customer_country  = lst_t001-stceg+0(2).
        ls_invoice-customer_vat      = lst_t001-stceg+2.
    ENDCASE.
    ls_invoice-customer_address      = lst_t001-address-stras.
    ls_invoice-customer_postal_code  = lst_t001-address-pstlz.
    ls_invoice-customer_city         = lst_t001-address-ort01.
    ls_invoice-customer_coutry_code  = lcl_appl=>format_land( lst_t001-address-land1 ).
    ls_invoice-customer_name         = lst_t001-butxt.


    CLEAR lt_documents.
    LOOP AT lt_bkpf INTO lst_bkpf WHERE bukrs = lst_lfb1-bukrs
                                    AND lifnr = lst_lfb1-lifnr.

      ls_documents-document_currency  = lst_bkpf-waers.
      ls_documents-document_date      = lcl_appl=>format_date( iv_date = lst_bkpf-budat ).

      CLEAR: lt_tax, ls_tax.
      LOOP AT lt_bset INTO lst_bset
                    WHERE bukrs = lst_bkpf-bukrs
                      AND belnr = lst_bkpf-belnr
                      AND gjahr = lst_bkpf-gjahr.

        ls_tax-mwskz = lst_bset-mwskz.
        ls_tax-kbetr = lst_bset-kbetr_calc.
        APPEND ls_tax TO lt_tax.
      ENDLOOP.

      get_doc_type_tax_type_map( EXPORTING ist_bkpf     = lst_bkpf
                                           it_bset      = lt_bset
                                 CHANGING  ct_doc_types = lt_doc_type_tax_type ).

      LOOP AT lt_doc_type_tax_type INTO lst_doc_type_tax_type.
        ln_seq_num = sy-tabix.

        CLEAR lt_vatsummary.

        ls_documents-document_type = lst_doc_type_tax_type-doc_type.

        ls_documents-document_number = lst_bkpf-belnr.
        IF ln_seq_num > 1.
*         the copies start from '_01'
          ln_seq_num = ln_seq_num - 1.
          CONCATENATE ls_documents-document_number '_' ln_seq_num INTO ls_documents-document_number.
        ENDIF.

        CASE 'X'.
          WHEN ib_corr.
            CONCATENATE ls_documents-document_number 'C' INTO ls_documents-document_number.
          WHEN ib_final.
            CONCATENATE ls_documents-document_number 'F' INTO ls_documents-document_number.
        ENDCASE.


        get_tax_summary( EXPORTING ist_bkpf       = lst_bkpf
                                   ist_tax_types  = lst_doc_type_tax_type-tax_types
                                   it_bseg        = lt_bseg
                                   it_bset        = lt_bset
                                   it_trreason    = lt_trreason
                                   ib_flip_sign   = ib_flip_sign
                                   ip_round       = ip_round
                         IMPORTING et_tax_summary = lt_vatsummary ).

*      disabled to run all the rest for each tax code
      ENDLOOP.

      CLEAR lt_items.
      LOOP AT lt_bseg INTO lst_bseg
                     WHERE bukrs = lst_bkpf-bukrs
                       AND belnr = lst_bkpf-belnr
                       AND gjahr = lst_bkpf-gjahr
                       AND buzid NE 'T'
                       AND koart = 'S'
                       AND qsskz = space
                       AND mwskz IN lst_doc_type_tax_type-tax_types.
        CLEAR ls_items.
        ls_items-line_number    = lst_bseg-buzei.
        ls_items-description    = lcl_appl=>format_string( lst_bseg-sgtxt ).
*        We have several qty
*          menge,meins
*          erfmg,ergme
*          bpmng,bprme
        CASE lst_bseg-shkzg.
          WHEN cv_shkzg_credit.
            IF ib_flip_sign IS INITIAL.
              lst_bseg-dmbtr = - lst_bseg-dmbtr.
              lst_bseg-wrbtr = - lst_bseg-wrbtr.
            ENDIF.
          WHEN cv_shkzg_debit.
            IF ib_flip_sign IS NOT INITIAL.
              lst_bseg-dmbtr = - lst_bseg-dmbtr.
              lst_bseg-wrbtr = - lst_bseg-wrbtr.
            ENDIF.
        ENDCASE.

        lc_dmbtr = lst_bseg-dmbtr.
        IF lst_bseg-menge > 0.
          lp_unit_price = lc_dmbtr / lst_bseg-menge.
          ls_items-unit_price = lcl_appl=>format_decimal( lp_unit_price ).
          ls_items-quantity   = lcl_appl=>format_decimal( lst_bseg-menge ).
        ENDIF.
        ls_items-total_price    = lcl_appl=>format_decimal( lst_bseg-dmbtr ).
        READ TABLE lt_tax INTO ls_tax WITH KEY mwskz = lst_bseg-mwskz.
        IF sy-subrc = 0.
          ls_tax-kbetr      = abs( ls_tax-kbetr ).
          ls_items-tax_rate = lcl_appl=>format_decimal( ls_tax-kbetr ).
        ENDIF.

        READ TABLE lt_trreason ASSIGNING <ls_trreason> WITH KEY mwskz = lst_bseg-mwskz.
        IF sy-subrc IS INITIAL.
          ls_items-transaction_reason = <ls_trreason>-reason. "natura.
        ENDIF.
        APPEND ls_items TO lt_items.
      ENDLOOP.

      CLEAR lt_witholding_tax.
      LOOP AT lt_bseg INTO lst_bseg
                     WHERE bukrs =  lst_bkpf-bukrs
                       AND belnr =  lst_bkpf-belnr
                       AND gjahr =  lst_bkpf-gjahr
                       AND buzid <> cv_buzid_tax
                       AND koart =  cv_koart_gl

                       AND qsskz IS NOT INITIAL.
        SELECT t059z~land1 t059z~witht t059z~wt_withcd t059z~qsatz t059zt~text40
          FROM t059z INNER JOIN t059zt ON
               t059z~land1      = t059zt~land1 AND
               t059z~witht      = t059zt~witht AND
               t059z~wt_withcd  = t059zt~wt_withcd
          INTO lst_t059z
          UP TO 1 ROWS
                 WHERE t059z~land1      = lst_lfa1-land1
                   AND t059z~wt_withcd  = lst_bseg-qsskz
                   AND t059zt~spras     = sy-langu.
        ENDSELECT.
        CLEAR ls_witholding_tax.
        ls_witholding_tax-type_of_withholding_tax = lst_bseg-qsskz.
        CASE lst_bseg-shkzg.
          WHEN cv_shkzg_debit.
            IF ib_flip_sign IS NOT INITIAL.
              lst_bseg-qbshb = - lst_bseg-qbshb.
            ENDIF.
          WHEN cv_shkzg_credit.
            IF ib_flip_sign IS INITIAL.
              lst_bseg-qbshb = - lst_bseg-qbshb.
            ENDIF.
        ENDCASE.
        ls_witholding_tax-withholding_tax_amount  = lcl_appl=>format_decimal( lst_bseg-qbshb ).
        ls_witholding_tax-withholding_tax_percent = lcl_appl=>format_decimal( lst_t059z-qsatz ).
        ls_witholding_tax-reason_for_the_payment  = lst_t059z-text40.
        APPEND ls_witholding_tax TO lt_witholding_tax.
      ENDLOOP.


      ls_documents-withholding_tax = lt_witholding_tax.
      ls_documents-items           = lt_items.
      ls_documents-tax_summary_data = lt_vatsummary.

      IF ls_documents-document_type IS NOT INITIAL.
        APPEND ls_documents TO lt_documents.
      ENDIF.

    ENDLOOP.
    ls_invoice-documents = lt_documents.
    APPEND ls_invoice TO et_data.

  ENDLOOP.

ENDMETHOD.
METHOD get_doc_type_for_tax_type.

  DATA: ls_selected_doctype TYPE zdyn_ws_cdtp,
        ls_doctype          TYPE zdyn_ws_cdtp,
        ls_tax              LIKE LINE OF pt_tax.

  zdyn_cl_msg=>add_to_call_stack( ).

* determine document type based tax code and country, taking priority into account
  LOOP AT pt_tax INTO ls_tax.
    ls_doctype = lcl_appl=>get_doctype( iv_mwskz   = ls_tax-mwskz
                                        iv_land    = pv_land1       ).
    IF ls_selected_doctype IS INITIAL.
      ls_selected_doctype = ls_doctype.
    ELSEIF ls_doctype-sort < ls_selected_doctype-sort.
      ls_selected_doctype = ls_doctype.
    ENDIF.
  ENDLOOP.
  IF sy-subrc = 0.
    pv_document_type = ls_selected_doctype-doc_type.
  ELSE.
*   Document type not found -> don't send this document
  ENDIF.

ENDMETHOD.
METHOD get_doc_type_from_hdr.

  zdyn_cl_msg=>add_to_call_stack( ).

  CASE ist_bkpf-blart.
    WHEN 'DR' OR 'KR' OR 'RE'.
      ec_doc_type = '380'.
    WHEN 'KG' OR 'DG'.
      ec_doc_type = '381'.
    WHEN OTHERS.
      ec_doc_type = '380'.
  ENDCASE.

ENDMETHOD.
METHOD get_doc_type_tax_type_map.

  DATA: lt_tax                TYPE tt_tax,
        ls_tax                TYPE ts_tax,
        ls_bset               LIKE LINE OF it_bset,
        lt_tax_sel            TYPE RANGE OF mwskz,
        ls_tax_sel            LIKE LINE OF lt_tax_sel,
        lst_doc_typ_tax_types LIKE LINE OF ct_doc_types,
        lv_doc_type           TYPE string.
  FIELD-SYMBOLS: <st_doc_typ_tax_types> LIKE LINE OF ct_doc_types.

  zdyn_cl_msg=>add_to_call_stack( ).

  ls_tax_sel-sign = 'I'.
  ls_tax_sel-option = 'EQ'.
  LOOP AT it_bset INTO ls_bset
                WHERE bukrs = ist_bkpf-bukrs
                  AND belnr = ist_bkpf-belnr
                  AND gjahr = ist_bkpf-gjahr.

    CLEAR: ls_tax, lt_tax.
    ls_tax-mwskz = ls_bset-mwskz.
    ls_tax-kbetr = ls_bset-kbetr_calc.
    APPEND ls_tax TO lt_tax.

    get_doc_type_for_tax_type( EXPORTING pv_land1         = ist_bkpf-landl
                                         pt_tax           = lt_tax
                               CHANGING  pv_document_type = lv_doc_type ).

    IF lv_doc_type IS NOT INITIAL.
      READ TABLE ct_doc_types ASSIGNING <st_doc_typ_tax_types> WITH KEY doc_type = lv_doc_type.
      IF sy-subrc = 0 AND <st_doc_typ_tax_types> IS ASSIGNED.
        ls_tax_sel-low = ls_tax-mwskz.
        APPEND ls_tax_sel TO <st_doc_typ_tax_types>-tax_types.
      ELSE.
        APPEND INITIAL LINE TO ct_doc_types ASSIGNING <st_doc_typ_tax_types>.
        lst_doc_typ_tax_types-doc_type = lv_doc_type.
        ls_tax_sel-low = ls_tax-mwskz.
        APPEND ls_tax_sel TO <st_doc_typ_tax_types>-tax_types.
      ENDIF.
    ELSE.
      IF ct_doc_types IS INITIAL.
        get_doc_type_from_hdr( EXPORTING ist_bkpf = ist_bkpf
                               IMPORTING ec_doc_type = lv_doc_type ).
        APPEND INITIAL LINE TO ct_doc_types ASSIGNING <st_doc_typ_tax_types>.
        <st_doc_typ_tax_types>-doc_type = lv_doc_type.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDMETHOD.
METHOD get_fi_documents.

  zdyn_cl_msg=>add_to_call_stack( ).

  REFRESH ct_bkpf[].

  IF it_sel_comp_code IS NOT INITIAL
      OR it_sel_doc_num IS NOT INITIAL
      OR it_sel_fiscal_year IS NOT INITIAL.
    SELECT bukrs belnr gjahr tcode xblnr awtyp awkey bldat budat blart waers
      FROM bkpf
      INTO TABLE ct_bkpf
      WHERE bukrs IN it_sel_comp_code
        AND belnr IN it_sel_doc_num
        AND gjahr IN it_sel_fiscal_year
        AND blart IN it_sel_doc_type
        AND xblnr IN it_sel_ref_num
        AND cpudt IN it_sel_ent_date.
  ELSE.
    IF it_sel_ref_num IS NOT INITIAL.
      SELECT bukrs belnr gjahr tcode xblnr awtyp awkey bldat budat blart waers
        FROM bkpf
        INTO TABLE ct_bkpf
        WHERE xblnr IN it_sel_ref_num.

    ENDIF.
  ENDIF.


  DELETE ct_bkpf WHERE tcode EQ 'VBOF'.
  DELETE ct_bkpf WHERE blart EQ 'ZY'.   "CA-2003-0585 No splitted invoice into account
  SORT ct_bkpf BY bukrs belnr gjahr.

ENDMETHOD.
METHOD get_invoice_items.

  TYPES: BEGIN OF ts_vendor_key,
           lifnr TYPE lfb1-lifnr,
           bukrs TYPE lfb1-bukrs,
         END   OF ts_vendor_key.
  TYPES: tt_vendor_key TYPE SORTED TABLE OF ts_vendor_key WITH NON-UNIQUE KEY lifnr bukrs.

  DATA: lt_bseg_aux    TYPE ty_bseg_t,
        lst_bseg_lifnr LIKE LINE OF ct_bseg,
        lt_vendor_key  TYPE tt_vendor_key,
        lst_vendor_key LIKE LINE OF lt_vendor_key.
  FIELD-SYMBOLS: <st_bkpf> LIKE LINE OF ct_bkpf,
                 <st_bseg> LIKE LINE OF ct_bseg,
                 <st_lfa1> LIKE LINE OF ct_lfa1.

  zdyn_cl_msg=>add_to_call_stack( ).

  CLEAR ct_bseg.
  CHECK ct_bkpf IS NOT INITIAL.


  SELECT bukrs belnr gjahr buzei buzid bschl koart shkzg mwskz dmbtr wrbtr zuonr sgtxt
         menge meins
         lifnr zfbdt qsskz qbshb qsshb stceg
         landl
    FROM bseg
    INTO TABLE ct_bseg
    FOR ALL ENTRIES IN ct_bkpf
    WHERE bukrs EQ ct_bkpf-bukrs
      AND belnr EQ ct_bkpf-belnr
      AND gjahr EQ ct_bkpf-gjahr.
*      AND koart EQ c_koart_k.

  IF sy-subrc IS INITIAL.
    lt_bseg_aux = ct_bseg.
    DELETE lt_bseg_aux WHERE mwskz IS INITIAL.
    SORT lt_bseg_aux BY mwskz.
    DELETE ADJACENT DUPLICATES FROM lt_bseg_aux
    COMPARING mwskz.

    IF lt_bseg_aux IS NOT INITIAL.
      SELECT *
        FROM zdyn_ws_ctrr
        INTO TABLE ct_trreason
         FOR ALL ENTRIES IN lt_bseg_aux
       WHERE mwskz EQ lt_bseg_aux-mwskz.
    ENDIF.
  ENDIF.

  SELECT bukrs belnr gjahr buzei mwskz hkont shkzg hwbas fwbas hwste fwste kbetr
         lstml lwste lwbas
    FROM bset
    INTO TABLE ct_bset
    FOR ALL ENTRIES IN ct_bkpf
    WHERE bukrs EQ ct_bkpf-bukrs
      AND belnr EQ ct_bkpf-belnr
      AND gjahr EQ ct_bkpf-gjahr
      AND ( ktosl EQ 'ESE' OR
            ktosl EQ 'VST' ).
*      AND koart EQ c_koart_k.

  SORT ct_bseg BY bukrs belnr gjahr.
  SORT ct_bset BY bukrs belnr gjahr.

  LOOP AT ct_bseg ASSIGNING <st_bseg>.
    lst_vendor_key-lifnr = <st_bseg>-lifnr.
    lst_vendor_key-bukrs = <st_bseg>-bukrs.
    INSERT lst_vendor_key INTO TABLE lt_vendor_key.
  ENDLOOP.

  DELETE ADJACENT DUPLICATES FROM lt_vendor_key.

  IF lt_vendor_key IS NOT INITIAL.
    SELECT *
      FROM lfa1
      INTO CORRESPONDING FIELDS OF TABLE ct_lfa1
       FOR ALL ENTRIES IN lt_vendor_key
     WHERE lifnr = lt_vendor_key-lifnr.
    SELECT *
      FROM lfas
      INTO CORRESPONDING FIELDS OF TABLE ct_lfas
       FOR ALL ENTRIES IN lt_vendor_key
     WHERE lifnr = lt_vendor_key-lifnr.
    SELECT *
      FROM lfb1
      INTO CORRESPONDING FIELDS OF TABLE ct_lfb1
       FOR ALL ENTRIES IN lt_vendor_key
     WHERE lifnr = lt_vendor_key-lifnr
       AND bukrs = lt_vendor_key-bukrs.

  ENDIF.

  LOOP AT ct_bkpf ASSIGNING <st_bkpf>.
    READ TABLE ct_bseg INTO lst_bseg_lifnr WITH KEY bukrs = <st_bkpf>-bukrs
                                                    belnr = <st_bkpf>-belnr
                                                    gjahr = <st_bkpf>-gjahr
                                                    koart = c_koart_k.
    <st_bkpf>-lifnr = lst_bseg_lifnr-lifnr.
    IF lst_bseg_lifnr-landl IS NOT INITIAL.
      <st_bkpf>-landl = lst_bseg_lifnr-landl.
    ELSEIF lst_bseg_lifnr-stceg IS NOT INITIAL.
      <st_bkpf>-landl = lst_bseg_lifnr-stceg(2).
    ELSE.
      READ TABLE ct_lfa1 ASSIGNING <st_lfa1> WITH KEY lifnr = lst_bseg_lifnr-lifnr.
      IF sy-subrc = 0.
        <st_bkpf>-landl = <st_lfa1>-land1.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDMETHOD.
METHOD get_tax_summary.

  zdyn_cl_msg=>add_to_call_stack( ).

  DATA: lst_bset           LIKE LINE OF it_bset,
        lp_diff            TYPE bset-kbetr,
        lp_tax_base        TYPE bset-lwbas,
        lp_tax_amount      TYPE bset-lwste,
        lp_tax_amount_calc LIKE lp_tax_amount,
        ls_vatsummary      TYPE zdyn_sinvoice_tax_summary,
        lt_vatsummary      TYPE zdyn_linvoice_tax_summary.
  FIELD-SYMBOLS: <st_bseg>     LIKE LINE OF it_bseg,
                 <st_trreason> LIKE LINE OF it_trreason.

  LOOP AT it_bset INTO lst_bset
                  WHERE bukrs = ist_bkpf-bukrs
                    AND belnr = ist_bkpf-belnr
                    AND gjahr = ist_bkpf-gjahr
                    AND mwskz IN ist_tax_types.

    CLEAR ls_vatsummary.
    lst_bset-kbetr_calc      = lst_bset-kbetr / 10.
    ls_vatsummary-tax_rate   = lcl_appl=>format_decimal( lst_bset-kbetr_calc ).

    IF lst_bset-lwbas IS NOT INITIAL.
      lp_tax_base = lst_bset-lwbas.
    ELSEIF lst_bset-fwbas IS NOT INITIAL.
      lp_tax_base = lst_bset-fwbas.
    ENDIF.
    IF lst_bset-lwste IS NOT INITIAL.
      lp_tax_amount = lst_bset-lwste.
    ELSEIF lst_bset-fwste IS NOT INITIAL.
      lp_tax_amount = lst_bset-fwste.
    ENDIF.

    CASE lst_bset-shkzg.
      WHEN cv_shkzg_debit.
        IF ib_flip_sign IS NOT INITIAL.
          lp_tax_base = - lp_tax_base.
          lp_tax_amount = - lp_tax_amount.
        ENDIF.
      WHEN cv_shkzg_credit.
        IF ib_flip_sign IS INITIAL.
          lp_tax_base = - lp_tax_base.
          lp_tax_amount = - lp_tax_amount.
        ENDIF.
    ENDCASE.
    lp_tax_amount_calc = lp_tax_base * lst_bset-kbetr_calc / 100.
    lp_diff = abs( lp_tax_amount_calc - lp_tax_amount ).

    IF lp_diff <= ip_round.
      ls_vatsummary-total_tax_base_amount  = lcl_appl=>format_decimal( lp_tax_base ).
      ls_vatsummary-total_tax_amount       = lcl_appl=>format_decimal( lp_tax_amount ).
    ELSE.
      ls_vatsummary-total_tax_base_amount  = lcl_appl=>format_decimal( lp_tax_base ).
      ls_vatsummary-total_tax_amount       = lcl_appl=>format_decimal( lp_tax_amount_calc ).
    ENDIF.


    READ TABLE it_bseg ASSIGNING <st_bseg> WITH KEY bukrs = lst_bset-bukrs
                                                    belnr = lst_bset-belnr
                                                    gjahr = lst_bset-gjahr
                                                    buzei = lst_bset-buzei.
    IF sy-subrc IS INITIAL.
      READ TABLE it_trreason ASSIGNING <st_trreason> WITH KEY mwskz = <st_bseg>-mwskz.
      IF sy-subrc IS INITIAL.
        ls_vatsummary-transaction_reason = <st_trreason>-reason.  "Natura
      ENDIF.
    ENDIF.

    APPEND ls_vatsummary TO et_tax_summary.

  ENDLOOP.

ENDMETHOD.
