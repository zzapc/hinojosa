
CLASS zcl_wm_zwm_apl_bobine_dao DEFINITION
  PUBLIC
  FINAL
  CREATE PROTECTED .

  PUBLIC SECTION.
    TYPES: BEGIN OF gty_main,
             id            TYPE zwm_apl_bobine-id,
             id_aprov_list TYPE zwm_apl_bobine-id_aprov_list,
             estacion      TYPE zwm_apl_bobine-estacion,
             ref           TYPE REF TO zcl_wm_zwm_apl_bobine_dao,
           END OF gty_main,
           gtty_main TYPE SORTED TABLE OF gty_main WITH UNIQUE KEY id.
    CLASS-METHODS: query_by_bobine
      IMPORTING iv_id            TYPE zwm_apl_bobine-id
                iv_only_selected TYPE boolean DEFAULT abap_true
                iv_nlpla         TYPE zwm_apl_bobine-estacion
      RETURNING VALUE(rt_data)   TYPE zwm_apl_bobine_tab.
    CLASS-METHODS: query_by_aprov_list
      IMPORTING iv_id_aprov_list TYPE zwm_apl_bobine-id_aprov_list
                iv_only_selected TYPE boolean DEFAULT abap_true
                iv_nlpla         TYPE zwm_apl_bobine-estacion
      RETURNING VALUE(rt_data)   TYPE zwm_apl_bobine_tab.
    CLASS-METHODS: get_entry IMPORTING iv_id            TYPE zwm_apl_bobine-id
                                       iv_id_aprov_list TYPE zwm_apl_bobine-id_aprov_list
                                       iv_estacion      TYPE zwm_apl_bobine-estacion
                             RETURNING VALUE(rr_ref)    TYPE REF TO zcl_wm_zwm_apl_bobine_dao
                             RAISING   zcx_wm_exception,
      create_entry IMPORTING is_data       TYPE zwm_apl_bobine
                   RETURNING VALUE(rr_ref) TYPE REF TO zcl_wm_zwm_apl_bobine_dao
                   RAISING   zcx_wm_exception.

    METHODS: save_data IMPORTING iv_commit TYPE boolean DEFAULT abap_true,
      delete_entry IMPORTING iv_commit TYPE boolean DEFAULT abap_true,
      get_data RETURNING VALUE(rs_data) TYPE zwm_apl_bobine,
      update_values IMPORTING is_data TYPE zwm_apl_bobine.

  PROTECTED SECTION.
    METHODS: constructor IMPORTING iv_id            TYPE zwm_apl_bobine-id
                                   iv_id_aprov_list TYPE zwm_apl_bobine-id_aprov_list
                                   iv_estacion      TYPE zwm_apl_bobine-estacion
                                   is_data          TYPE zwm_apl_bobine OPTIONAL
                         RAISING   zcx_wm_exception,
      read_entry IMPORTING iv_id            TYPE zwm_apl_bobine-id
                           iv_id_aprov_list TYPE zwm_apl_bobine-id_aprov_list
                           iv_estacion      TYPE zwm_apl_bobine-estacion.
    CLASS-DATA: gt_cont TYPE gtty_main.
    DATA: gs_data TYPE zwm_apl_bobine.
  PRIVATE SECTION.
endclass. "ZCL_WM_ZWM_APL_BOBINE_DAO definition
class ZCL_WM_ZWM_APL_BOBINE_DAO implementation.
  METHOD constructor.
    me->read_entry( iv_id = iv_id iv_id_aprov_list = iv_id_aprov_list iv_estacion = iv_estacion ).
    IF me->gs_data IS INITIAL AND is_data IS NOT INITIAL.
      " new record
      me->gs_data-id = iv_id.
      me->gs_data-id_aprov_list = iv_id_aprov_list.
    ELSEIF me->gs_data IS INITIAL.
      RAISE EXCEPTION TYPE zcx_wm_exception.
    ENDIF.

    CHECK is_data IS SUPPLIED.
    " update values
    me->update_values( is_data = is_data ).
  ENDMETHOD.
  METHOD create_entry.
    TRY.
        rr_ref =   zcl_wm_zwm_apl_bobine_dao=>get_entry( iv_id = is_data-id iv_id_aprov_list = is_data-id_aprov_list iv_estacion = is_data-estacion ).
      CATCH cx_root.
        " doesn't exist
        rr_ref = NEW #( iv_id = is_data-id iv_id_aprov_list = is_data-id_aprov_list iv_estacion = is_data-estacion is_data = is_data ).
    ENDTRY.
  ENDMETHOD.
  METHOD delete_entry.
    DELETE FROM zwm_apl_bobine
    WHERE id = me->gs_data-id
    AND id_aprov_list = me->gs_data-id_aprov_list
    AND estacion = me->gs_data-estacion.
    CHECK iv_commit = abap_true.
    COMMIT WORK AND WAIT.

  ENDMETHOD.
  METHOD get_data.
    rs_data = me->gs_data.
  ENDMETHOD.
  METHOD get_entry.
    rr_ref = COND #( WHEN line_exists( gt_cont[ id = iv_id id_aprov_list = iv_id_aprov_list estacion = iv_estacion ] )
    THEN gt_cont[ id = iv_id id_aprov_list = iv_id_aprov_list estacion = iv_estacion  ]-ref ELSE NEW #( iv_id = iv_id iv_id_aprov_list = iv_id_aprov_list iv_estacion = iv_estacion ) ) .
  ENDMETHOD.
  METHOD query_by_aprov_list.
    DATA lr_selected TYPE RANGE OF zwm_apl_bobine-selected.
    CLEAR rt_data.
    IF iv_only_selected = abap_true.
      lr_selected = VALUE #( ( sign = 'I' option = 'EQ' low = abap_true ) ).
    ENDIF.
    SELECT * FROM zwm_apl_bobine
    INTO CORRESPONDING FIELDS OF TABLE rt_data
    WHERE id_aprov_list = iv_id_aprov_list
    AND selected IN lr_selected
    AND estacion = iv_nlpla.
  ENDMETHOD.
  METHOD query_by_bobine.
    DATA lr_selected TYPE RANGE OF zwm_apl_bobine-selected.
    CLEAR rt_data.
    IF iv_only_selected = abap_true.
      lr_selected = VALUE #( ( sign = 'I' option = 'EQ' low = abap_true ) ).
    ENDIF.
    SELECT * FROM zwm_apl_bobine
    INTO CORRESPONDING FIELDS OF TABLE rt_data
    WHERE id = iv_id
    AND selected IN lr_selected
    AND estacion = iv_nlpla.


  ENDMETHOD.
  METHOD read_entry.
    CHECK me->gs_data IS INITIAL.
    SELECT SINGLE * FROM zwm_apl_bobine INTO CORRESPONDING FIELDS OF me->gs_data
    WHERE id = iv_id
    AND id_aprov_list = iv_id_aprov_list
    AND estacion = iv_estacion.
  ENDMETHOD.
  METHOD save_data.
    "update control strct
    GET TIME STAMP FIELD DATA(lv_stmp).
    IF me->gs_data-created_by IS INITIAL.
      me->gs_data-created_by = sy-uname.
      me->gs_data-created_at = lv_stmp.
      me->gs_data-created_at_zon = sy-zonlo.
    ENDIF.
    me->gs_data-changed_by = sy-uname.
    me->gs_data-changed_at = lv_stmp.
    me->gs_data-changed_at_zon = sy-zonlo.

    MODIFY zwm_apl_bobine FROM me->gs_data.
    CHECK iv_commit = abap_true.
    COMMIT WORK AND WAIT.



  ENDMETHOD.
  METHOD update_values.
    CHECK is_data IS NOT INITIAL.
    DATA(ls_data) = me->gs_data.
    DATA(ls_ctrl) = CORRESPONDING zwm_ctrl_strct( me->gs_data ).
    me->gs_data = is_data.
    me->gs_data-id = ls_data-id.
    me->gs_data-id_aprov_list = ls_data-id_aprov_list.
    MOVE-CORRESPONDING ls_ctrl TO me->gs_data.
  ENDMETHOD.
