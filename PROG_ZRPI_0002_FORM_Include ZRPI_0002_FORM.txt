*&---------------------------------------------------------------------*
*&  Include           ZRPI_0002_FORM
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  CREAR_IDOC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_idoc TABLES gt_bkpf TYPE STANDARD TABLE
                       gt_bseg TYPE STANDARD TABLE
                USING  gs_datos TYPE type_datos.

  DATA: ls_edidc TYPE edidc,
        ls_edidd TYPE edidd.
  DATA: lti_edidc  LIKE edidc OCCURS 0,
        lti_edidd  LIKE edidd OCCURS 0,
        ls_e1fikpf TYPE e1fikpf,
        ls_e1fiseg TYPE e1fiseg,
        ls_e1fisec TYPE e1fisec,
        ls_e1fiset TYPE e1fiset,
        ls_e1fise2 TYPE e1fise2,
        ls_e1finbu TYPE e1finbu.
  DATA: i_sndpor  TYPE ediusndpor,
        lv_logsys TYPE logsys.
  DATA: lv_dias TYPE i.

  DATA: lt_bkpf TYPE TABLE OF bkpf,
        gs_bkpf TYPE bkpf,
        lt_bseg TYPE TABLE OF bseg,
        gs_bseg TYPE bseg.

  lt_bkpf[] = gt_bkpf[].
  lt_bseg[] = gt_bseg[].

  SORT lt_bkpf BY bukrs budat.


  LOOP AT lt_bkpf INTO gs_bkpf.

* Registro de control
* ---------------------------------------------------------------------
    CLEAR ls_edidc.
    ls_edidc-direct = '1'.

*   Receptor del IDOC (en este caso PI)
    CASE sy-sysid.
      WHEN 'HED'.
        ls_edidc-rcvpor = 'HPD_001'.
        ls_edidc-rcvprt = 'LS'.
        ls_edidc-rcvprn = 'HPDCLNT001'. "lv_logsys.
      WHEN 'HEQ'.
        ls_edidc-rcvpor = 'HPD_001'.
        ls_edidc-rcvprt = 'LS'.
        ls_edidc-rcvprn = 'HPDCLNT001'. "lv_logsys.
      WHEN 'HEP'.
        ls_edidc-rcvpor = 'HPP_001'.
        ls_edidc-rcvprt = 'LS'.
        ls_edidc-rcvprn = 'HPPCLNT001'. "lv_logsys.
      WHEN OTHERS.
    ENDCASE.



*   Emisor del IDOC (siempre será SAP en los Idocs de salida)
    ls_edidc-sndprt = 'LS'.
    CONCATENATE 'SAP' sy-sysid INTO ls_edidc-sndpor.
    SELECT SINGLE logsys INTO ls_edidc-sndprn
        FROM  t000
        WHERE mandt = sy-mandt.


* Variante del mensaje
* ---------------------------------------------------------------------
    IF gs_bkpf-bukrs = '2040'.
      ls_edidc-mescod = 'A40'.
    ELSEIF gs_bkpf-bukrs = '2041'.
      ls_edidc-mescod = 'A41'.
    ENDIF.
* ---------------------------------------------------------------------

*   Tipo del Idoc
    ls_edidc-mestyp = 'FIDCC1'.
    ls_edidc-idoctp = 'FIDCCP02'.
*  ls_edidc-rcvpfc = 'RE'.


* Segmentos del Idoc
* ---------------------------------------------------------------------
* E1FIKPF: Cabecera docum.FI (BKPF)
    CLEAR: ls_edidd, ls_e1fikpf.
    MOVE-CORRESPONDING gs_bkpf TO ls_e1fikpf.
    ls_edidd-segnam     = 'E1FIKPF'.
    ls_edidd-sdata      = ls_e1fikpf.
    APPEND ls_edidd TO lti_edidd.

    LOOP AT lt_bseg INTO gs_bseg WHERE bukrs = gs_bkpf-bukrs
                                   AND belnr = gs_bkpf-belnr
                                   AND gjahr = gs_bkpf-gjahr.

* E1FISEG: Posición documento FI (BSEG)
      CLEAR: ls_edidd, ls_e1fiseg.
      MOVE-CORRESPONDING gs_bseg TO ls_e1fiseg.

* calcular el plazo con las fechas de vencimiento
      CLEAR lv_dias.
      CALL FUNCTION 'DAYS_BETWEEN_TWO_DATES'
        EXPORTING
          i_datum_bis             = gs_bseg-fdtag
          i_datum_von             = sy-datum
*         I_KZ_EXCL_VON           = '0'
*         I_KZ_INCL_BIS           = '0'
*         I_KZ_ULT_BIS            = ' '
*         I_KZ_ULT_VON            = ' '
*         I_STGMETH               = '0'
*         I_SZBMETH               = '1'
        IMPORTING
          e_tage                  = lv_dias
        EXCEPTIONS
          days_method_not_defined = 1
          OTHERS                  = 2.

      IF lv_dias <= 0.
        ls_e1fiseg-xref2 = '0'.
      ELSEIF lv_dias >= 1 AND lv_dias <= 15.
        ls_e1fiseg-xref2 = '15'.
      ELSEIF lv_dias >= 16 AND lv_dias <= 30.
        ls_e1fiseg-xref2 = '30'.
      ELSEIF lv_dias >= 31 AND lv_dias <= 60.
        ls_e1fiseg-xref2 = '60'.
      ELSEIF lv_dias >= 61 AND lv_dias <= 90.
        ls_e1fiseg-xref2 = '90'.
      ELSEIF lv_dias >= 91.
        ls_e1fiseg-xref2 = '+90'.
      ENDIF.

      ls_edidd-segnam     = 'E1FISEG'.
      ls_edidd-sdata      = ls_e1fiseg.
      APPEND ls_edidd TO lti_edidd.

* E1FINBU: Libro auxiliar FI  (FI-AP-AR) (BSEG)
      CLEAR: ls_edidd, ls_e1finbu.
      ls_e1finbu-zfbdt = gs_bseg-zfbdt.
      ls_e1finbu-skfbt = gs_bseg-skfbt.
      ls_e1finbu-rebzg = gs_bseg-rebzg.
      ls_e1finbu-landl = gs_bseg-landl.
      ls_e1finbu-lifnr = gs_bseg-lifnr.
      ls_e1finbu-kunnr = gs_bseg-kunnr.
      ls_e1finbu-umskz = gs_bseg-umskz.
      ls_e1finbu-zlsch = gs_bseg-zlsch.
*      IF ls_e1finbu-zlsch IS INITIAL.
*        ls_e1finbu-zlsch = gs_bseg-umskz.
*      ENDIF.
      ls_edidd-segnam     = 'E1FINBU'.
      ls_edidd-sdata      = ls_e1finbu.
      APPEND ls_edidd TO lti_edidd.

    ENDLOOP.


* Generamos el Idoc
* ---------------------------------------------------------------------
    CALL FUNCTION 'MASTER_IDOC_DISTRIBUTE'
      EXPORTING
        master_idoc_control            = ls_edidc
      TABLES
        communication_idoc_control     = lti_edidc
        master_idoc_data               = lti_edidd
      EXCEPTIONS
        error_in_idoc_control          = 1
        error_writing_idoc_status      = 2
        error_in_idoc_data             = 3
        sending_logical_system_unknown = 4
        OTHERS                         = 5.

* Si hay errores cargamos el mensaje
    IF sy-subrc <> 0.
      es_return-type        = sy-msgty.
      es_return-number      = sy-msgno.
      es_return-id          = sy-msgid.
      es_return-message_v1  = sy-msgv1.
      es_return-message_v2  = sy-msgv2.
      es_return-message_v3  = sy-msgv3.
      es_return-message_v4  = sy-msgv4.
      APPEND es_return.

* Si no hay errores, cargamos un mensaje y el número del Idoc
    ELSE.
      READ TABLE lti_edidc INTO ls_edidc INDEX 1.
      CHECK sy-subrc = 0.
      e_docnum = ls_edidc-docnum.
      es_return-type        = 'S'.
      es_return-number      = '003'.
*    es_return-id          = 'ZIDOCS'.
      es_return-message_v1  = e_docnum.
    ENDIF.

* Hacemos un COMMIT para el Idoc
    CALL FUNCTION 'DEQUEUE_ALL'.
    COMMIT WORK AND WAIT.

    CLEAR: ls_edidc, lti_edidc, lti_edidd.
    REFRESH: lti_edidc, lti_edidd.

  ENDLOOP.


ENDFORM.                    " CREAR_IDOC



*&---------------------------------------------------------------------*
*&      Form  CREAR_IDOC_COMPENSADO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_idoc_compensado TABLES gt_bkpf_comp TYPE STANDARD TABLE
                                  gt_bseg_comp TYPE STANDARD TABLE.

  DATA: ls_edidc TYPE edidc,
        ls_edidd TYPE edidd.
  DATA: lti_edidc  LIKE edidc OCCURS 0,
        lti_edidd  LIKE edidd OCCURS 0,
        ls_e1fikpf TYPE e1fikpf,
        ls_e1fiseg TYPE e1fiseg,
        ls_e1fisec TYPE e1fisec,
        ls_e1fiset TYPE e1fiset,
        ls_e1fise2 TYPE e1fise2,
        ls_e1finbu TYPE e1finbu.
  DATA: i_sndpor  TYPE ediusndpor,
        lv_logsys TYPE logsys.
  DATA: lv_dias TYPE i.

  DATA: lt_bkpf_comp TYPE STANDARD TABLE OF bkpf,
        gs_bkpf_comp TYPE bkpf,

        lt_bseg_comp TYPE STANDARD TABLE OF bseg,
        gs_bseg_comp TYPE bseg.

  lt_bkpf_comp[] = gt_bkpf_comp[].
  lt_bseg_comp[] = gt_bseg_comp[].

  SORT lt_bkpf_comp BY bukrs budat.

  LOOP AT lt_bkpf_comp INTO gs_bkpf_comp.

* Registro de control
* ---------------------------------------------------------------------
    CLEAR ls_edidc.
    ls_edidc-direct = '1'.

*   Receptor del IDOC (en este caso PI)
    CASE sy-sysid.
      WHEN 'HED'.
        ls_edidc-rcvpor = 'HPD_001'.
        ls_edidc-rcvprt = 'LS'.
        ls_edidc-rcvprn = 'HPDCLNT001'. "lv_logsys.
      WHEN 'HEQ'.
        ls_edidc-rcvpor = 'HPD_001'.
        ls_edidc-rcvprt = 'LS'.
        ls_edidc-rcvprn = 'HPDCLNT001'. "lv_logsys.
      WHEN 'HEP'.
        ls_edidc-rcvpor = 'HPP_001'.
        ls_edidc-rcvprt = 'LS'.
        ls_edidc-rcvprn = 'HPPCLNT001'. "lv_logsys.
      WHEN OTHERS.
    ENDCASE.



*   Emisor del IDOC (siempre será SAP en los Idocs de salida)
    ls_edidc-sndprt = 'LS'.
    CONCATENATE 'SAP' sy-sysid INTO ls_edidc-sndpor.
    SELECT SINGLE logsys INTO ls_edidc-sndprn
        FROM  t000
        WHERE mandt = sy-mandt.

*   Tipo del Idoc
    ls_edidc-mestyp = 'FIDCC1'.
    ls_edidc-idoctp = 'FIDCCP02'.
*  ls_edidc-rcvpfc = 'RE'.


* Segmentos del Idoc
* ---------------------------------------------------------------------
* E1FIKPF: Cabecera docum.FI (BKPF)
    CLEAR: ls_edidd, ls_e1fikpf.
    gs_bkpf_comp-blart = 'DR'.

    MOVE-CORRESPONDING gs_bkpf_comp TO ls_e1fikpf.

    ls_edidd-segnam     = 'E1FIKPF'.
    ls_edidd-sdata      = ls_e1fikpf.
    APPEND ls_edidd TO lti_edidd.

    LOOP AT lt_bseg_comp INTO gs_bseg_comp WHERE bukrs = gs_bkpf_comp-bukrs AND
                                                 belnr = gs_bkpf_comp-belnr AND
                                                 gjahr = gs_bkpf_comp-gjahr.

* E1FISEG: Posición documento FI (BSEG)
      CLEAR: ls_edidd, ls_e1fiseg.
      CLEAR gs_bseg_comp-dmbtr.
      CLEAR gs_bseg_comp-wrbtr. "GV - 16.12.19 - SAT 7000028783 - Ticket 58229
      gs_bseg_comp-fdtag = sy-datum.

      MOVE-CORRESPONDING gs_bseg_comp TO ls_e1fiseg.

      ls_edidd-segnam     = 'E1FISEG'.
      ls_edidd-sdata      = ls_e1fiseg.
      APPEND ls_edidd TO lti_edidd.

* E1FINBU: Libro auxiliar FI  (FI-AP-AR) (BSEG)
      CLEAR: ls_edidd, ls_e1finbu.
      ls_e1finbu-zfbdt = gs_bseg_comp-zfbdt.
      ls_e1finbu-skfbt = gs_bseg_comp-skfbt.
      ls_e1finbu-rebzg = gs_bseg_comp-rebzg.
      ls_e1finbu-landl = gs_bseg_comp-landl.
      ls_e1finbu-lifnr = gs_bseg_comp-lifnr.
      ls_e1finbu-kunnr = gs_bseg_comp-kunnr.
      ls_e1finbu-umskz = gs_bseg_comp-umskz.
      ls_e1finbu-zlsch = 'E'.
      ls_edidd-segnam     = 'E1FINBU'.
      ls_edidd-sdata      = ls_e1finbu.
      APPEND ls_edidd TO lti_edidd.

    ENDLOOP.


* Generamos el Idoc
* ---------------------------------------------------------------------
    CALL FUNCTION 'MASTER_IDOC_DISTRIBUTE'
      EXPORTING
        master_idoc_control            = ls_edidc
      TABLES
        communication_idoc_control     = lti_edidc
        master_idoc_data               = lti_edidd
      EXCEPTIONS
        error_in_idoc_control          = 1
        error_writing_idoc_status      = 2
        error_in_idoc_data             = 3
        sending_logical_system_unknown = 4
        OTHERS                         = 5.

* Si hay errores cargamos el mensaje
    IF sy-subrc <> 0.
      es_return-type        = sy-msgty.
      es_return-number      = sy-msgno.
      es_return-id          = sy-msgid.
      es_return-message_v1  = sy-msgv1.
      es_return-message_v2  = sy-msgv2.
      es_return-message_v3  = sy-msgv3.
      es_return-message_v4  = sy-msgv4.
      APPEND es_return.

* Si no hay errores, cargamos un mensaje y el número del Idoc
    ELSE.
      READ TABLE lti_edidc INTO ls_edidc INDEX 1.
      CHECK sy-subrc = 0.
      e_docnum = ls_edidc-docnum.
      es_return-type        = 'S'.
      es_return-number      = '003'.
*    es_return-id          = 'ZIDOCS'.
      es_return-message_v1  = e_docnum.
    ENDIF.

* Hacemos un COMMIT para el Idoc
    CALL FUNCTION 'DEQUEUE_ALL'.
    COMMIT WORK AND WAIT.

    CLEAR: ls_edidc, lti_edidc, lti_edidd.
    REFRESH: lti_edidc, lti_edidd.

  ENDLOOP.

ENDFORM.                    " CREAR_IDOC_COMPENSADO
*&---------------------------------------------------------------------*
*&      Form  SELECCIONAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
*FORM seleccionar_datos.
*  DATA: ls_bsid TYPE bsid,
*        lt_bsid LIKE bsid OCCURS 0.
*
*  DATA: lv_index LIKE sy-tabix,
*        lv_togru LIKE knb1-togru.
*
*  DATA: gt_bseg_comp TYPE STANDARD TABLE OF bseg,
*        gs_bseg_comp TYPE bseg.
*
*  DATA: gt_bkpf_comp TYPE STANDARD TABLE OF bkpf,
*        gs_bkpf_comp TYPE bkpf.
*
*  DATA: gt_bseg TYPE TABLE OF bseg,
*        gs_bseg TYPE bseg.
*
*  DATA: gt_bkpf TYPE TABLE OF bkpf,
*        gs_bkpf TYPE bkpf.
*
*
*  SELECT kunnr bukrs gjahr belnr buzei budat FROM bsid
*    INTO TABLE gt_datos
*    WHERE cpudt IN p_fecha AND
*          bukrs IN s_bukrs.
*
*  SELECT kunnr bukrs gjahr belnr buzei budat FROM bsad
**      INTO TABLE gt_datos
*    APPENDING TABLE gt_datos
*    WHERE cpudt IN p_fecha AND
*          bukrs IN s_bukrs.
*
** FILTRAMOS PARA QUEDARNOS CON LOS CLIENTES
*  SORT gt_datos BY kunnr bukrs ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM gt_datos COMPARING kunnr bukrs.
*
*
*  IF gt_datos[] IS INITIAL.
*    MESSAGE 'No se han seleccionado datos' TYPE 'E'.
*  ELSE.
*    LOOP AT gt_datos INTO gs_datos.
*
*      CLEAR: lt_bsid, gt_bseg_comp, gt_bkpf_comp, gt_bkpf, gt_bseg.
*      REFRESH: lt_bsid, gt_bseg_comp, gt_bkpf_comp, gt_bkpf, gt_bseg.
*
*      SELECT * INTO TABLE lt_bsid
*        FROM bsid
*        WHERE kunnr = gs_datos-kunnr AND
*              bukrs = gs_datos-bukrs.
*
**     EN CASO DE QUE NO TENGA PARTIDAS ABIERTAS ENVIAMOS UN IDOC CON UN DOCUMENTO COMPENSADO
**     E IMPORTE 0 PARA QUE EL OTRO SISTEMA SEPA QUE NO LE QUEDA NADA PENDIENTE
*      IF sy-subrc <> 0.
*        PERFORM seleccionar_compensada TABLES gt_bseg_comp
*                                              gt_bkpf_comp
*                                       USING gs_datos-bukrs
*                                             gs_datos-belnr
*                                             gs_datos-gjahr.
*      ENDIF.
*
**     FILTRAMOS PARA QUEDARNOS CON LOS CLIENTES
*      SORT lt_bsid BY belnr gjahr bukrs ASCENDING.
*      DELETE ADJACENT DUPLICATES FROM lt_bsid COMPARING belnr gjahr bukrs.
*
*
*      IF lt_bsid[] IS NOT INITIAL.
*
*        SELECT * FROM bkpf
*          INTO TABLE gt_bkpf
*          FOR ALL ENTRIES IN lt_bsid
*          WHERE bukrs = lt_bsid-bukrs AND
*                belnr = lt_bsid-belnr AND
*                gjahr = lt_bsid-gjahr.
*
*        SELECT * FROM bseg
*          INTO TABLE gt_bseg
*          FOR ALL ENTRIES IN lt_bsid
*          WHERE bukrs = lt_bsid-bukrs AND
*                belnr = lt_bsid-belnr AND
*                gjahr = lt_bsid-gjahr AND
*                koart = 'D' AND
*                augbl = ''.
*      ENDIF.
*
*
***  -> 12/06/2015 PARA LOS APUNTES QUE EN LA PARTIDA ABIERTA NO VIENE LA DIVISION INFORMADA
***  BUSCAMOS EL MAESTRO DEL CLIENTE PARA AVERIGUAR A LA DIVISION A LA QUE PERTENECE
*** S OLO PARA LA SOCIEDAD 2000
*      LOOP AT gt_bseg INTO gs_bseg WHERE bukrs = '2000' AND gsber IS INITIAL.
*        lv_index = sy-tabix.
*
*        CLEAR lv_togru.
*        SELECT SINGLE togru INTO lv_togru
*         FROM knb1
*         WHERE kunnr = gs_bseg-kunnr
*         AND bukrs = gs_bseg-bukrs.
*
*        IF sy-subrc = 0.
*          CASE lv_togru.
*            WHEN 'XATI'.
*              gs_bseg-gsber = 'HIXA'.
*              MODIFY gt_bseg FROM gs_bseg INDEX lv_index.
*            WHEN 'PACS'.
*              gs_bseg-gsber = 'HIPA'.
*              MODIFY gt_bseg FROM gs_bseg INDEX lv_index.
*            WHEN OTHERS.
*          ENDCASE.
*        ENDIF.
*      ENDLOOP.
*** <- 12/06/2015
*
**   IEG - SOTHIS - 08/11/2019 - Quitamos posibles documentos duplicados y posiciones
*      SORT gt_bkpf BY bukrs belnr gjahr.
*      DELETE ADJACENT DUPLICATES FROM gt_bkpf COMPARING bukrs belnr gjahr.
*
*      SORT gt_bseg BY bukrs belnr gjahr buzei.
*      DELETE ADJACENT DUPLICATES FROM gt_bseg COMPARING bukrs belnr gjahr buzei.
**   IEG - SOTHIS - 08/11/2019 - Quitamos posibles documentos duplicados y posiciones
*
*
*      PERFORM crear_idoc TABLES gt_bkpf
*                                gt_bseg
*                         USING  gs_datos.
*
*
*      IF NOT gt_bkpf_comp[] IS INITIAL.
*        PERFORM crear_idoc_compensado TABLES gt_bkpf_comp
*                                             gt_bseg_comp.
*      ENDIF.
*    ENDLOOP.
*  ENDIF.
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SELECCIONAR_COMPENSADA_
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_DATOS_BUKRS  text
*      -->P_GS_DATOS_BELNR  text
*      -->P_GS_DATOS_GJAHR  text
*----------------------------------------------------------------------*
FORM seleccionar_compensada   TABLES gt_bseg_comp TYPE STANDARD TABLE
                                       gt_bkpf_comp TYPE STANDARD TABLE
                                USING   p_bukrs
                                        p_belnr
                                        p_gjahr.


  DATA: lv_index LIKE sy-tabix,
        lv_togru LIKE knb1-togru.

  DATA: lt_bseg_comp TYPE STANDARD TABLE OF bseg,
        lt_bkpf_comp TYPE STANDARD TABLE OF bkpf.



  DATA gs_bseg TYPE bseg.

  SELECT * FROM bkpf
    INTO TABLE lt_bkpf_comp
    WHERE bukrs = p_bukrs AND
          belnr = p_belnr AND
          gjahr = p_gjahr.

  SELECT * FROM bseg
    INTO TABLE lt_bseg_comp
    WHERE bukrs = p_bukrs AND
          belnr = p_belnr AND
          gjahr = p_gjahr AND
          koart = 'D'.

** -> 09/06/2017
** BUSCAMOS EL MAESTRO DEL CLIENTE PARA AVERIGUAR A LA DIVISION A LA QUE PERTENECE
** SOLO PARA LA SOCIEDAD 2000
  LOOP AT lt_bseg_comp INTO gs_bseg WHERE bukrs = '2000' AND gsber IS INITIAL.
    lv_index = sy-tabix.

    CLEAR lv_togru.
    SELECT SINGLE togru INTO lv_togru
      FROM knb1
      WHERE kunnr = gs_bseg-kunnr
      AND bukrs = gs_bseg-bukrs.

    IF sy-subrc = 0.
      CASE lv_togru.
        WHEN 'XATI'.
          gs_bseg-gsber = 'HIXA'.
          MODIFY lt_bseg_comp FROM gs_bseg INDEX lv_index.
        WHEN 'PACS'.
          gs_bseg-gsber = 'HIPA'.
          MODIFY lt_bseg_comp FROM gs_bseg INDEX lv_index.
        WHEN OTHERS.
      ENDCASE.
    ENDIF.
  ENDLOOP.
** -> 09/06/2017

  gt_bseg_comp[] = lt_bseg_comp[].
  gt_bkpf_comp[] = lt_bkpf_comp[].


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CREAR_IDOC_SALDO_CERO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_idoc_saldo_cero USING wa_knb1 TYPE knb1.
  DATA: ls_edidc TYPE edidc,
        ls_edidd TYPE edidd.
  DATA: lti_edidc  LIKE edidc OCCURS 0,
        lti_edidd  LIKE edidd OCCURS 0,
        ls_e1fikpf TYPE e1fikpf,
        ls_e1fiseg TYPE e1fiseg,
        ls_e1fisec TYPE e1fisec,
        ls_e1fiset TYPE e1fiset,
        ls_e1fise2 TYPE e1fise2,
        ls_e1finbu TYPE e1finbu.
  DATA: i_sndpor  TYPE ediusndpor,
        lv_logsys TYPE logsys.
  DATA: lv_dias TYPE i.

  DATA: lt_bkpf TYPE TABLE OF bkpf,
        gs_bkpf TYPE bkpf,
        lt_bseg TYPE TABLE OF bseg,
        gs_bseg TYPE bseg.





* Registro de control
* ---------------------------------------------------------------------
  CLEAR ls_edidc.
  ls_edidc-direct = '1'.

*   Receptor del IDOC (en este caso PI)
  CASE sy-sysid.
    WHEN 'HED'.
      ls_edidc-rcvpor = 'HPD_001'.
      ls_edidc-rcvprt = 'LS'.
      ls_edidc-rcvprn = 'HPDCLNT001'. "lv_logsys.
    WHEN 'HEQ'.
      ls_edidc-rcvpor = 'HPD_001'.
      ls_edidc-rcvprt = 'LS'.
      ls_edidc-rcvprn = 'HPDCLNT001'. "lv_logsys.
    WHEN 'HEP'.
      ls_edidc-rcvpor = 'HPP_001'.
      ls_edidc-rcvprt = 'LS'.
      ls_edidc-rcvprn = 'HPPCLNT001'. "lv_logsys.
    WHEN OTHERS.
  ENDCASE.



*   Emisor del IDOC (siempre será SAP en los Idocs de salida)
  ls_edidc-sndprt = 'LS'.
  CONCATENATE 'SAP' sy-sysid INTO ls_edidc-sndpor.
  SELECT SINGLE logsys INTO ls_edidc-sndprn
      FROM  t000
      WHERE mandt = sy-mandt.


* Variante del mensaje
* ---------------------------------------------------------------------
  IF wa_knb1-bukrs = '2040'.
    ls_edidc-mescod = 'A40'.
  ELSEIF wa_knb1-bukrs = '2041'.
    ls_edidc-mescod = 'A41'.
  ENDIF.
* ---------------------------------------------------------------------

*   Tipo del Idoc
  ls_edidc-mestyp = 'FIDCC1'.
  ls_edidc-idoctp = 'FIDCCP02'.
*  ls_edidc-rcvpfc = 'RE'.


* Segmentos del Idoc
* ---------------------------------------------------------------------
* E1FIKPF: Cabecera docum.FI (BKPF)
  CLEAR: ls_edidd, ls_e1fikpf.
*    MOVE-CORRESPONDING gs_bkpf TO ls_e1fikpf.
  ls_e1fikpf-bukrs = wa_knb1-bukrs.


  ls_edidd-segnam     = 'E1FIKPF'.
  ls_edidd-sdata      = ls_e1fikpf.
  APPEND ls_edidd TO lti_edidd.

*    LOOP AT lt_bseg INTO gs_bseg WHERE bukrs = gs_bkpf-bukrs
*                                   AND belnr = gs_bkpf-belnr
*                                   AND gjahr = gs_bkpf-gjahr.

* E1FISEG: Posición documento FI (BSEG)
  CLEAR: ls_edidd, ls_e1fiseg.
  ls_e1fiseg-buzei = '001'.
  ls_e1fiseg-dmbtr = 0.
  ls_e1fiseg-dmbe2 = 0.
  ls_e1fiseg-dmbe3 = 0.
  ls_e1fiseg-wrbtr = 0.
  ls_e1fiseg-kzbtr = 0.
*      MOVE-CORRESPONDING gs_bseg TO ls_e1fiseg.

** calcular el plazo con las fechas de vencimiento
*      CLEAR lv_dias.
*      CALL FUNCTION 'DAYS_BETWEEN_TWO_DATES'
*        EXPORTING
*          i_datum_bis             = gs_bseg-fdtag
*          i_datum_von             = sy-datum
**         I_KZ_EXCL_VON           = '0'
**         I_KZ_INCL_BIS           = '0'
**         I_KZ_ULT_BIS            = ' '
**         I_KZ_ULT_VON            = ' '
**         I_STGMETH               = '0'
**         I_SZBMETH               = '1'
*        IMPORTING
*          e_tage                  = lv_dias
*        EXCEPTIONS
*          days_method_not_defined = 1
*          OTHERS                  = 2.
*
*      IF lv_dias <= 0.
*        ls_e1fiseg-xref2 = '0'.
*      ELSEIF lv_dias >= 1 AND lv_dias <= 15.
*        ls_e1fiseg-xref2 = '15'.
*      ELSEIF lv_dias >= 16 AND lv_dias <= 30.
*        ls_e1fiseg-xref2 = '30'.
*      ELSEIF lv_dias >= 31 AND lv_dias <= 60.
*        ls_e1fiseg-xref2 = '60'.
*      ELSEIF lv_dias >= 61 AND lv_dias <= 90.
*        ls_e1fiseg-xref2 = '90'.
*      ELSEIF lv_dias >= 91.
*        ls_e1fiseg-xref2 = '+90'.
*      ENDIF.

  ls_edidd-segnam     = 'E1FISEG'.
  ls_edidd-sdata      = ls_e1fiseg.
  APPEND ls_edidd TO lti_edidd.

* E1FINBU: Libro auxiliar FI  (FI-AP-AR) (BSEG)
  CLEAR: ls_edidd, ls_e1finbu.
*      ls_e1finbu-zfbdt = gs_bseg-zfbdt.
*      ls_e1finbu-skfbt = gs_bseg-skfbt.
*      ls_e1finbu-rebzg = gs_bseg-rebzg.
*      ls_e1finbu-landl = gs_bseg-landl.
*      ls_e1finbu-lifnr = gs_bseg-lifnr.
  ls_e1finbu-kunnr = wa_knb1-kunnr.
*      ls_e1finbu-umskz = gs_bseg-umskz.
*      ls_e1finbu-zlsch = gs_bseg-zlsch.

  ls_edidd-segnam     = 'E1FINBU'.
  ls_edidd-sdata      = ls_e1finbu.
  APPEND ls_edidd TO lti_edidd.

*    ENDLOOP.


* Generamos el Idoc
* ---------------------------------------------------------------------
  CALL FUNCTION 'MASTER_IDOC_DISTRIBUTE'
    EXPORTING
      master_idoc_control            = ls_edidc
    TABLES
      communication_idoc_control     = lti_edidc
      master_idoc_data               = lti_edidd
    EXCEPTIONS
      error_in_idoc_control          = 1
      error_writing_idoc_status      = 2
      error_in_idoc_data             = 3
      sending_logical_system_unknown = 4
      OTHERS                         = 5.

* Si hay errores cargamos el mensaje
  IF sy-subrc <> 0.
    es_return-type        = sy-msgty.
    es_return-number      = sy-msgno.
    es_return-id          = sy-msgid.
    es_return-message_v1  = sy-msgv1.
    es_return-message_v2  = sy-msgv2.
    es_return-message_v3  = sy-msgv3.
    es_return-message_v4  = sy-msgv4.
    APPEND es_return.

* Si no hay errores, cargamos un mensaje y el número del Idoc
  ELSE.
    READ TABLE lti_edidc INTO ls_edidc INDEX 1.
    CHECK sy-subrc = 0.
    e_docnum = ls_edidc-docnum.
    es_return-type        = 'S'.
    es_return-number      = '003'.
*    es_return-id          = 'ZIDOCS'.
    es_return-message_v1  = e_docnum.
  ENDIF.

* Hacemos un COMMIT para el Idoc
  CALL FUNCTION 'DEQUEUE_ALL'.
  COMMIT WORK AND WAIT.

  CLEAR: ls_edidc, lti_edidc, lti_edidd.
  REFRESH: lti_edidc, lti_edidd.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SELECCIONAR_DATOS_NEW
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM seleccionar_datos_new .
  DATA: ls_bsid TYPE bsid,
        lt_bsid LIKE bsid OCCURS 0.

  DATA: lv_index LIKE sy-tabix,
        lv_togru LIKE knb1-togru.

  DATA: gt_bseg_comp TYPE STANDARD TABLE OF bseg,
        gs_bseg_comp TYPE bseg.

  DATA: gt_bkpf_comp TYPE STANDARD TABLE OF bkpf,
        gs_bkpf_comp TYPE bkpf.

  DATA: gt_bseg TYPE TABLE OF bseg,
        gs_bseg TYPE bseg.

  DATA: gt_bkpf TYPE TABLE OF bkpf,
        gs_bkpf TYPE bkpf.




* SELECCIONAMOS TODOS LOS DOCUMENTOS DEL DIA
  SELECT * FROM knb1
    INTO TABLE @DATA(t_knb1)
    WHERE kunnr IN @s_kunnr AND
          bukrs IN @s_bukrs.


  IF t_knb1[] IS NOT INITIAL.
    SELECT kunnr bukrs gjahr belnr buzei budat FROM bsid "partidas abiertas
      INTO TABLE gt_datos
      FOR ALL ENTRIES IN t_knb1
      WHERE kunnr = t_knb1-kunnr AND
            bukrs = t_knb1-bukrs AND
            cpudt IN p_fecha.

    SELECT kunnr bukrs gjahr belnr buzei budat FROM bsad "partidas compensadas
      APPENDING TABLE gt_datos
      FOR ALL ENTRIES IN t_knb1
      WHERE kunnr = t_knb1-kunnr AND
            bukrs = t_knb1-bukrs AND
            cpudt IN p_fecha.

  ELSE.
    MESSAGE 'No se han seleccionado datos' TYPE 'E'.
    EXIT.
  ENDIF.



* FILTRAMOS PARA QUEDARNOS CON LOS CLIENTES
  SORT gt_datos BY kunnr bukrs ASCENDING.
  DELETE ADJACENT DUPLICATES FROM gt_datos COMPARING kunnr bukrs.


  IF gt_datos[] IS INITIAL.
*   Cliente con saldo cero  - Generar idoc con importe cero
    MESSAGE 'No se han seleccionado datos' TYPE 'E'.
  ELSE.
    LOOP AT gt_datos INTO gs_datos.

      CLEAR: lt_bsid, gt_bseg_comp, gt_bkpf_comp, gt_bkpf, gt_bseg.
      REFRESH: lt_bsid, gt_bseg_comp, gt_bkpf_comp, gt_bkpf, gt_bseg.

      SELECT * INTO TABLE lt_bsid
        FROM bsid
        WHERE kunnr = gs_datos-kunnr AND
              bukrs = gs_datos-bukrs.

*     EN CASO DE QUE NO TENGA PARTIDAS ABIERTAS ENVIAMOS UN IDOC CON UN DOCUMENTO COMPENSADO
*     E IMPORTE 0 PARA QUE EL OTRO SISTEMA SEPA QUE NO LE QUEDA NADA PENDIENTE
      IF sy-subrc <> 0.
        PERFORM seleccionar_compensada TABLES gt_bseg_comp
                                              gt_bkpf_comp
                                       USING gs_datos-bukrs
                                             gs_datos-belnr
                                             gs_datos-gjahr.
      ENDIF.

*     FILTRAMOS PARA QUEDARNOS CON LOS CLIENTES
      SORT lt_bsid BY belnr gjahr bukrs ASCENDING.
      DELETE ADJACENT DUPLICATES FROM lt_bsid COMPARING belnr gjahr bukrs.


      IF lt_bsid[] IS NOT INITIAL.

        SELECT * FROM bkpf
          INTO TABLE gt_bkpf
          FOR ALL ENTRIES IN lt_bsid
          WHERE bukrs = lt_bsid-bukrs AND
                belnr = lt_bsid-belnr AND
                gjahr = lt_bsid-gjahr.

        SELECT * FROM bseg
          INTO TABLE gt_bseg
          FOR ALL ENTRIES IN lt_bsid
          WHERE bukrs = lt_bsid-bukrs AND
                belnr = lt_bsid-belnr AND
                gjahr = lt_bsid-gjahr AND
                koart = 'D' AND
                augbl = ''.
      ENDIF.


**  -> 12/06/2015 PARA LOS APUNTES QUE EN LA PARTIDA ABIERTA NO VIENE LA DIVISION INFORMADA
**  BUSCAMOS EL MAESTRO DEL CLIENTE PARA AVERIGUAR A LA DIVISION A LA QUE PERTENECE
** S OLO PARA LA SOCIEDAD 2000
      LOOP AT gt_bseg INTO gs_bseg WHERE bukrs = '2000' AND gsber IS INITIAL.
        lv_index = sy-tabix.

        CLEAR lv_togru.
        SELECT SINGLE togru INTO lv_togru
         FROM knb1
         WHERE kunnr = gs_bseg-kunnr
         AND bukrs = gs_bseg-bukrs.

        IF sy-subrc = 0.
          CASE lv_togru.
            WHEN 'XATI'.
              gs_bseg-gsber = 'HIXA'.
              MODIFY gt_bseg FROM gs_bseg INDEX lv_index.
            WHEN 'PACS'.
              gs_bseg-gsber = 'HIPA'.
              MODIFY gt_bseg FROM gs_bseg INDEX lv_index.
            WHEN OTHERS.
          ENDCASE.
        ENDIF.
      ENDLOOP.
** <- 12/06/2015

*   IEG - SOTHIS - 08/11/2019 - Quitamos posibles documentos duplicados y posiciones
      SORT gt_bkpf BY bukrs belnr gjahr.
      DELETE ADJACENT DUPLICATES FROM gt_bkpf COMPARING bukrs belnr gjahr.

      SORT gt_bseg BY bukrs belnr gjahr buzei.
      DELETE ADJACENT DUPLICATES FROM gt_bseg COMPARING bukrs belnr gjahr buzei.
*   IEG - SOTHIS - 08/11/2019 - Quitamos posibles documentos duplicados y posiciones

      "JCB 23.02.23. Ignorar los documentos de FI de cliente que contengan una posición con CME K de FSR
      "80175 Se replica la exclusión de documentos de FI de cliente de pagaré factorizado CME T"
      "81800 Se vuelve a incluir el CME T pagaré factorizado en el envío de partidas"
 LOOP AT gt_bkpf ASSIGNING FIELD-SYMBOL(<fs_bkpf>).
        IF line_exists( gt_bseg[ bukrs = <fs_bkpf>-bukrs
                                 belnr = <fs_bkpf>-belnr
                                 gjahr = <fs_bkpf>-gjahr
                                 umskz = 'K'
                                 koart = 'D' ] ).
*          line_exists( gt_bseg[ bukrs = <fs_bkpf>-bukrs
*                                 belnr = <fs_bkpf>-belnr
*                                 gjahr = <fs_bkpf>-gjahr
*                                 umskz = 'T'
*                                 koart = 'D' ] ).

          DELETE gt_bseg WHERE bukrs = <fs_bkpf>-bukrs  AND
                               belnr = <fs_bkpf>-belnr  AND
                               gjahr = <fs_bkpf>-gjahr.
          DELETE gt_bkpf. CONTINUE.
        ENDIF.
      ENDLOOP.

      LOOP AT gt_bkpf_comp ASSIGNING FIELD-SYMBOL(<fs_bkpf_comp>).
        IF line_exists( gt_bseg_comp[ bukrs = <fs_bkpf_comp>-bukrs
                                      belnr = <fs_bkpf_comp>-belnr
                                      gjahr = <fs_bkpf_comp>-gjahr
                                      umskz = 'K'
                                      koart = 'D' ] ) OR
          line_exists( gt_bseg_comp[ bukrs = <fs_bkpf_comp>-bukrs
                                      belnr = <fs_bkpf_comp>-belnr
                                      gjahr = <fs_bkpf_comp>-gjahr
                                      umskz = 'T'
                                      koart = 'D' ] ).

          DELETE gt_bseg_comp WHERE bukrs = <fs_bkpf_comp>-bukrs  AND
                                    belnr = <fs_bkpf_comp>-belnr  AND
                                    gjahr = <fs_bkpf_comp>-gjahr.
          DELETE gt_bkpf_comp. CONTINUE.
        ENDIF.
      ENDLOOP.

      IF gt_bkpf[] IS NOT INITIAL.
        PERFORM crear_idoc TABLES gt_bkpf
                                  gt_bseg
                           USING  gs_datos.
      ENDIF.


      IF gt_bkpf_comp[] IS NOT INITIAL.
        PERFORM crear_idoc_compensado TABLES gt_bkpf_comp
                                             gt_bseg_comp.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.
