*&---------------------------------------------------------------------*
*& Report  ZZ_CLEANUP_VETVG
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Report  ZZ_CLEANUP_VETVG
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT ZZ_CLEANUP_VETVG.


*----------------------------------------------------------------------*
*       INTERFACE lif_types
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
INTERFACE lif_types.
  TYPES:
    type_t_vetvg TYPE STANDARD TABLE OF vetvg WITH DEFAULT KEY.
ENDINTERFACE.                    "lif_types

CLASS lcl_db DEFINITION DEFERRED.

*----------------------------------------------------------------------*
*       CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION CREATE PRIVATE FINAL.

  PUBLIC SECTION.
    CLASS-METHODS:
      get_instance
        IMPORTING
          io_db TYPE REF TO lcl_db
        RETURNING
          value(ro_obj) TYPE REF TO lcl_alv.

    METHODS:
      output,
      close.

  PRIVATE SECTION.
    CLASS-DATA:
      go_obj TYPE REF TO lcl_alv.

    DATA:
      mo_db TYPE REF TO lcl_db.

ENDCLASS.                    "lcl_alv DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_db DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_db DEFINITION CREATE PRIVATE FINAL.

  PUBLIC SECTION.
    INTERFACES
      lif_types.

    CLASS-METHODS:
      get_instance
        RETURNING
          value(ro_obj) TYPE REF TO lcl_db.
    METHODS:
      get_data
        RETURNING
          value(rd_data) TYPE REF TO lif_types=>type_t_vetvg.

    DATA:
      mo_const TYPE REF TO cl_mmpur_constants.

    METHODS:
      process.

  PRIVATE SECTION.
    CLASS-DATA:
      go_obj TYPE REF TO lcl_db.

    DATA:
      mo_alv  TYPE REF TO lcl_alv,
      mt_data TYPE lif_types=>type_t_vetvg.

    METHODS:
      constructor,
      close.

ENDCLASS.                    "lcl_db DEFINITION

*--------------------------------------------------------------------*
* Define global data
*--------------------------------------------------------------------*
DATA: go_obj   TYPE REF TO lcl_db,                          "#EC *
      gv_ebeln TYPE ebeln.                                  "#EC *

*--------------------------------------------------------------------*
* Define UserInterface parameters
*--------------------------------------------------------------------*
SELECT-OPTIONS:
  so_ebeln FOR gv_ebeln OBLIGATORY.
PARAMETERS:
  p_test AS CHECKBOX DEFAULT cl_mmpur_constants=>yes.

*--------------------------------------------------------------------*
* start processing
*--------------------------------------------------------------------*
START-OF-SELECTION.

  go_obj = lcl_db=>get_instance( ).
  go_obj->process( ).
  FREE go_obj.


*----------------------------------------------------------------------*
*       CLASS lcl_db IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_db IMPLEMENTATION.

  METHOD get_instance.
    IF lcl_db=>go_obj IS INITIAL.
      CREATE OBJECT lcl_db=>go_obj.
    ENDIF.
    ro_obj = lcl_db=>go_obj.
  ENDMETHOD.                    "get_instance

  METHOD process.
* database fetch
    SELECT * FROM vetvg
             INTO CORRESPONDING FIELDS OF TABLE me->mt_data
             WHERE vbeln IN so_ebeln
               AND NOT EXISTS ( SELECT * FROM ekko
                                 WHERE ebeln IN so_ebeln ).
    IF LINES( me->mt_data ) GE 1.
      IF p_test EQ me->mo_const->no.
        DELETE vetvg FROM TABLE me->mt_data.
      ENDIF.
      me->mo_alv->output( ).
    ELSEIF LINES( me->mt_data ) EQ 0 OR sy-subrc GT 0.
      MESSAGE i615(06).
    ENDIF.
    me->close( ).
  ENDMETHOD.                    "process

  METHOD constructor.
    me->mo_alv   = lcl_alv=>get_instance( me ).
    me->mo_const = cl_mmpur_constants=>get_instance( ).
  ENDMETHOD.                    "constructor

  METHOD close.
    me->mo_alv->close( ).
    CLEAR me->mt_data.
    FREE: me->mo_const,
          me->go_obj.
  ENDMETHOD.                    "close

  METHOD get_data.
    GET REFERENCE OF me->mt_data INTO rd_data.
  ENDMETHOD.                    "get_data

ENDCLASS.                    "lcl_db IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.

  METHOD get_instance.
    IF lcl_alv=>go_obj IS INITIAL.
      CREATE OBJECT lcl_alv=>go_obj.
      lcl_alv=>go_obj->mo_db = io_db.
    ENDIF.
    ro_obj = lcl_alv=>go_obj.
  ENDMETHOD.                    "get_instance

  METHOD output.
* define local data objects
    DATA: lr_data      TYPE REF TO lif_types=>type_t_vetvg,
          lo_alv       TYPE REF TO cl_salv_table,
          lo_sort      TYPE REF TO cl_salv_sorts,
          lo_functions TYPE REF TO cl_salv_functions_list,
          lo_columns   TYPE REF TO cl_salv_columns,
          lo_alv_top   TYPE REF TO cl_salv_form_layout_grid.
*
* prerequisite: MT_OUTPUT has to have lines
    lr_data = me->mo_db->get_data( ).
    IF LINES( lr_data->* ) EQ 0.
      RETURN.
    ENDIF.
* prerequiste: output only if not in batch mode
    IF sy-batch IS NOT INITIAL.
      RETURN.
    ENDIF.
* get utility class for constants access
    TRY.
        cl_salv_table=>factory( IMPORTING r_salv_table = lo_alv
                                CHANGING  t_table      = lr_data->* ).
      CATCH cx_salv_msg.
        RETURN.
    ENDTRY.
* create required ALV object instances
    lo_functions = lo_alv->get_functions( ).
    lo_functions->set_default( me->mo_db->mo_const->no ).
    lo_columns   = lo_alv->get_columns( ).
    lo_columns->set_optimize( me->mo_db->mo_const->yes ).
    lo_sort = lo_alv->get_sorts( ).
    TRY.
        lo_sort->add_sort( 'VBELN' ).
      CATCH cx_salv_not_found.                              "#EC *
      CATCH cx_salv_data_error.                             "#EC *
      CATCH cx_salv_existing.                               "#EC *
    ENDTRY.

    CREATE OBJECT lo_alv_top
      EXPORTING
        columns = 2.
    IF p_test EQ me->mo_db->mo_const->no.
      lo_alv_top->create_header_information(
                                 row      = 1
                                 column   = 1
                                 text     = 'Production Run' "#EC *
                                 tooltip  = 'Run with Commit Work' ). "#EC *
    ELSE.
      lo_alv_top->create_header_information(
                                 row      = 1
                                 column   = 1
                                 text     = 'Test Run'      "#EC *
                                 tooltip  = 'Run without Commit Work' ). "#EC *
    ENDIF.
    lo_alv_top->create_action_information(
                                 row      = 2
                                 column   = 1
                                 text     = 'Delete VETVG for archived POs' "#EC *
                                 tooltip  = 'Cleanup VETVG' ). "#EC *
    lo_alv->set_top_of_list( lo_alv_top ).
    lo_alv->display( ).

  ENDMETHOD.                    "output

  METHOD close.
    FREE me->mo_db.
  ENDMETHOD.                    "close

ENDCLASS.                    "lcl_alv IMPLEMENTATION
