*&---------------------------------------------------------------------*
*&  Include           ZRPI_0003_FORMS
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  DATOS_FICHERO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM datos_fichero .

* Para añadir/quitar campos al excel, modificar c_end_col
  DATA: c_begin_col TYPE i VALUE 1,
        c_begin_row TYPE i VALUE 1,
        c_end_col   TYPE i VALUE 7,
        c_end_row   TYPE i VALUE 9999.

  DATA: lt_fields     TYPE TABLE OF sval,
        lt_file_table TYPE TABLE OF file_table,
        lt_alsmex     TYPE TABLE OF alsmex_tabline.

  DATA: ls_fields     TYPE sval,
        ls_file_table TYPE file_table,
        ls_alsmex     TYPE alsmex_tabline.

  DATA: lv_rc         TYPE i,
        lv_localfile  TYPE localfile,
        lv_returncode TYPE c,
        lv_useraction TYPE i.

  DATA: BEGIN OF lt_rows OCCURS 0,
          row TYPE kcd_ex_row_n,
        END OF lt_rows.

  DATA: ls_rows    LIKE LINE OF lt_rows,
        ls_fichero LIKE LINE OF gt_fichero,
        lv_index   LIKE         sy-tabix.

  DATA: ls_carac_acumul LIKE LINE OF gt_carac_acumul.

* Pedimos el fichero
  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
*     window_title            =
*     default_extension       =
*     default_filename        =
      file_filter             = '(*.xlsx;*.xls)|*.xlsx;*.xls'
*     with_encoding           =
*     initial_directory       =
*     multiselection          =
    CHANGING
      file_table              = lt_file_table
      rc                      = lv_rc
      user_action             = lv_useraction
*     file_encoding           =
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5.
  IF sy-subrc <> 0.
*   Implement suitable error handling here
  ENDIF.

  CHECK lv_useraction = 0. "Cancelar: lv_useraction = 9

  READ TABLE lt_file_table INTO ls_file_table INDEX 1.

  lv_localfile = ls_file_table-filename.

  CLEAR: lt_alsmex.
  REFRESH: lt_alsmex.
* Cargamos los datos del fichero excel a una tabla interna
  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = lv_localfile
      i_begin_col             = c_begin_col
      i_begin_row             = c_begin_row
      i_end_col               = c_end_col
      i_end_row               = c_end_row
    TABLES
      intern                  = lt_alsmex
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
    MESSAGE e002(zidocs).
  ENDIF.

* Recorremos la tabla obtenida y generamos nuestra tabla interna:
  " 1) Recuperamos las filas:
  REFRESH: lt_rows.

  LOOP AT lt_alsmex INTO ls_alsmex WHERE row <> '0001'.
    CLEAR ls_rows.
    ls_rows-row = ls_alsmex-row.
    COLLECT ls_rows INTO lt_rows.
  ENDLOOP.

  " 2) Recuperar datos en tabla interna:

  CLEAR ls_rows.
  LOOP AT lt_rows INTO ls_rows.
    CLEAR: ls_alsmex, lv_index.
    CLEAR: ls_fichero.
    LOOP AT lt_alsmex INTO ls_alsmex WHERE row = ls_rows-row.
      PERFORM config_registro USING ls_alsmex-row
                                    ls_alsmex-col
                                    ls_alsmex-value
                               CHANGING ls_fichero.
    ENDLOOP.
    APPEND ls_fichero TO gt_fichero.

    CLEAR ls_carac_acumul.
    READ TABLE gt_carac_acumul INTO ls_carac_acumul
               WITH KEY zcodigo = ls_fichero-zcodigo.
    IF ls_carac_acumul IS INITIAL.
      ls_carac_acumul-zcodigo = ls_fichero-zcodigo.
      SELECT SINGLE ztipo INTO ls_carac_acumul-ztipo
        FROM ztpi0001
        WHERE zcodigo = ls_carac_acumul-zcodigo .
      APPEND ls_carac_acumul TO gt_carac_acumul.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " DATOS_FICHERO
*&---------------------------------------------------------------------*
*&      Form  CONFIG_REGISTRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_ALSMEX_ROW  text
*      -->P_LS_ALSMEX_COL  text
*      -->P_LS_ALSMEX_VALUE  text
*      <--P_LS_FICHERO  text
*----------------------------------------------------------------------*
FORM config_registro  USING    p_row
                               p_col
                               p_value
                      CHANGING ps_fichero TYPE zstpi_datos_fichero.

  IF ps_fichero-row IS INITIAL.
    ps_fichero-row = p_row.
  ENDIF.

  CASE p_col.
    WHEN '0001'. " Mandante
      ps_fichero-mandt = p_value.
*    WHEN '0002'. " Contador
*      ps_fichero-zcontador = p_value.
    WHEN '0002'. " Código
      ps_fichero-zcodigo = p_value.
    WHEN '0003'. " Sociedad
      ps_fichero-bukrs = p_value.
    WHEN '0004'. " Centro
      ps_fichero-werks = p_value.
    WHEN '0005'. " Valor SAP
      ps_fichero-zvalor_sap = p_value.
    WHEN '0006'. " Descripción
      ps_fichero-zdescripcion = p_value.
    WHEN '0007'. " Valor externo
      ps_fichero-zvalor_externo = p_value.
  ENDCASE.

ENDFORM.                    " CONFIG_REGISTRO
*&---------------------------------------------------------------------*
*&      Form  LECTURA_MAPEOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM lectura_mapeos .

  DATA: ls_carac_acumul LIKE LINE OF gt_carac_acumul.

  CLEAR: gt_caract_f, gt_caract_v.
  REFRESH: gt_caract_f, gt_caract_v.

  CLEAR ls_carac_acumul.
  LOOP AT gt_carac_acumul INTO ls_carac_acumul.
    IF ls_carac_acumul-ztipo = 'F'.

      SELECT * APPENDING CORRESPONDING FIELDS OF TABLE gt_caract_f
      FROM ztpi0002
      WHERE zcodigo = ls_carac_acumul-zcodigo
      AND loekz = ''.

    ELSEIF ls_carac_acumul-ztipo = 'V'.

      SELECT * APPENDING CORRESPONDING FIELDS OF TABLE gt_caract_v
      FROM ztpi0003
      WHERE zcodigo = ls_carac_acumul-zcodigo
      AND loekz = ''.

    ENDIF.
  ENDLOOP.

ENDFORM.                    " LECTURA_MAPEOS
*&---------------------------------------------------------------------*
*&      Form  BORRAR_REGISTROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM borrar_registros .

  DATA: lv_tipo      TYPE zedpi0003,
        lv_operation TYPE string,
        lv_index     LIKE sy-tabix.
  DATA: ls_caract_del   TYPE         ztpi0002,
        ls_caract       TYPE         ztpi0002,
        ls_carac_acumul LIKE LINE OF gt_carac_acumul,
        ls_fichero      LIKE LINE OF gt_fichero,
        ls_log          LIKE LINE OF gt_log,
        lv_operacion    TYPE         string,
        lv_error(1),
        lv_message      TYPE         bapi_msg.

  LOOP AT gt_fichero INTO ls_fichero.

    "Miramos en qué tabla se debe actualizar:
    CLEAR ls_carac_acumul.
    READ TABLE gt_carac_acumul INTO ls_carac_acumul
                   WITH KEY zcodigo = ls_fichero-zcodigo.

    IF ls_carac_acumul-ztipo = 'F'. " Características fijas
      CLEAR: ls_caract_del, ls_caract.
      MOVE-CORRESPONDING ls_fichero TO ls_caract_del.

      CLEAR lv_index.
      READ TABLE gt_caract_f INTO ls_caract
                 WITH KEY zcodigo = ls_caract_del-zcodigo
                          bukrs = ls_caract_del-bukrs
                          werks = ls_caract_del-werks
                          zvalor_sap = ls_caract_del-zvalor_sap
                          loekz = ''.

      IF ls_caract IS NOT INITIAL.
        lv_index = sy-tabix.
        ls_caract_del-loekz = 'X'.
        ls_caract_del-group_id = ls_caract-group_id.
        ls_caract_del-zcontador = ls_caract-zcontador.

        UPDATE ztpi0002 FROM ls_caract_del.
        COMMIT WORK AND WAIT.
        IF sy-subrc = 0.
* OPERACION QUE SE VA A REALIZAR
          lv_operation = 'Delete'.
* SE BUSCA EL GRUPO ID QUE TIENE EN LA TABLA
          CLEAR: lv_error, lv_message.
          PERFORM sincro_pi USING lv_operation
                                  ls_caract_del-group_id
                                  ls_carac_acumul-ztipo
                                  ls_caract_del
                            CHANGING lv_error
                                     lv_message.

          IF lv_error = 'X'.
            CLEAR ls_log.
            MOVE-CORRESPONDING ls_fichero TO ls_log.
            ls_log-type = 'E'.
            ls_log-message = lv_message.
            APPEND ls_log TO gt_log.
            MODIFY gt_caract_f FROM ls_caract_del INDEX lv_index.
          ELSE.
            CLEAR ls_log.
            MOVE-CORRESPONDING ls_fichero TO ls_log.
            ls_log-type = 'S'.
            ls_log-message = text-002.
            APPEND ls_log TO gt_log.
            MODIFY gt_caract_f FROM ls_caract_del INDEX lv_index.
          ENDIF.

        ELSE.

          CLEAR ls_log.
          MOVE-CORRESPONDING ls_fichero TO ls_log.
          ls_log-type = 'E'.
          ls_log-message = text-003.
          APPEND ls_log TO gt_log.

        ENDIF.

      ELSE.
        CLEAR ls_log.
        MOVE-CORRESPONDING ls_fichero TO ls_log.
        ls_log-type = 'E'.
        ls_log-message = text-004.
        APPEND ls_log TO gt_log.
      ENDIF.

    ELSEIF ls_carac_acumul-ztipo = 'V'. " Características variables

      CLEAR: ls_caract_del, ls_caract.
      MOVE-CORRESPONDING ls_fichero TO ls_caract_del.
      CLEAR lv_index.
      READ TABLE gt_caract_v INTO ls_caract
                 WITH KEY zcodigo = ls_caract_del-zcodigo
                          bukrs = ls_caract_del-bukrs
                          werks = ls_caract_del-werks
                          zvalor_sap = ls_caract_del-zvalor_sap
                          loekz = ''.

*      SELECT SINGLE * into ls_caract
*        FROM ztpi0003
*        WHERE zcodigo = ls_caract_del-zcodigo
*        AND bukrs = ls_caract_del-bukrs
*        AND werks = ls_caract_del-werks
*        AND zvalor_sap = ls_caract_del-zvalor_sap
*        AND loekz = ''.

      IF ls_caract IS NOT INITIAL.
        lv_index = sy-tabix.
        ls_caract_del-loekz = 'X'.
        ls_caract_del-group_id = ls_caract-group_id.
        ls_caract_del-zcontador = ls_caract-zcontador.

        UPDATE ztpi0003 FROM ls_caract_del.
        COMMIT WORK AND WAIT.
        IF sy-subrc = 0.
* OPERACION QUE SE VA A REALIZAR
          lv_operation = 'Delete'.
* SE BUSCA EL GRUPO ID QUE TIENE EN LA TABLA
          CLEAR: lv_error, lv_message.
          PERFORM sincro_pi USING lv_operation
                                  ls_caract_del-group_id
                                  ls_carac_acumul-ztipo
                                  ls_caract_del
                            CHANGING lv_error
                                     lv_message.

          IF lv_error = 'X'.
            CLEAR ls_log.
            MOVE-CORRESPONDING ls_fichero TO ls_log.
            ls_log-type = 'E'.
            ls_log-message = lv_message.
            APPEND ls_log TO gt_log.
            MODIFY gt_caract_v FROM ls_caract_del INDEX sy-tabix.
          ELSE.
            CLEAR ls_log.
            MOVE-CORRESPONDING ls_fichero TO ls_log.
            ls_log-type = 'S'.
            ls_log-message = text-002.
            APPEND ls_log TO gt_log.
            MODIFY gt_caract_v FROM ls_caract_del INDEX sy-tabix.
          ENDIF.

        ELSE.

          CLEAR ls_log.
          MOVE-CORRESPONDING ls_fichero TO ls_log.
          ls_log-type = 'E'.
          ls_log-message = text-003.
          APPEND ls_log TO gt_log.

        ENDIF.

      ELSE.
        CLEAR ls_log.
        MOVE-CORRESPONDING ls_fichero TO ls_log.
        ls_log-type = 'E'.
        ls_log-message = text-004.
        APPEND ls_log TO gt_log.
      ENDIF.

    ENDIF.

  ENDLOOP.

ENDFORM.                    " BORRAR_REGISTROS
*&---------------------------------------------------------------------*
*&      Form  SINCRO_PI
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_OPERATION  text
*      -->P_LS_CARACT_DEL_GROUP_ID  text
*      -->P_LS_CARAC_ACUMUL_ZTIPO  text
*      -->P_LS_CARACT_DEL  text
*----------------------------------------------------------------------*
FORM sincro_pi  USING    lv_operation
                         lv_group_id
                         lv_tipo
                         p_caract TYPE ztpi0002
               CHANGING  p_error
                         p_message.

  CLEAR: p_error, p_message.

  lwa_item-operation = lv_operation.
* Los grupos deben ser unicos por tipo de caracteristica y valor sap
*  buscaremosel registro en la tabla
*  SELECT SINGLE group_id INTO lwa_item-group_id
*  FROM ztpi0001
*  WHERE zcodigo = p_caract-zcodigo.
  lwa_item-group_id = lv_group_id.

** EN DESARROLLO SAP TIENE UN CONTEXTO DIFERENTE A QAS Y PRO.
** AL FINAL SE DECIDE DEJAR UNO SOLO
*  IF sy-sysid = 'HED'.
  IF lv_tipo = 'F'.
    lwa_item-context   = gc_context_df.
  ELSEIF lv_tipo = 'V'.
    lwa_item-context   = gc_context_dv.
  ENDIF.
*  ELSE.
*    IF lv_tipo = 'F'.
*      lwa_item-context   = gc_context_f.
*    ELSEIF lv_tipo = 'V'.
*      lwa_item-context   = gc_context_v.
*    ENDIF.
*  ENDIF.


  CONCATENATE p_caract-bukrs p_caract-werks INTO lwa_item-identifier-agency.
  lwa_item-identifier-scheme   = p_caract-zcodigo.
  lwa_item-identifier-value  = p_caract-zvalor_externo.
  APPEND lwa_item TO lwa_output-value_mapping_replication-item.

* En caso de insertar tambien se debe añadir el valor de SAP. PI en caso de que exista NO lo duplicara
  IF lv_operation = 'Insert'.
    lwa_item-identifier-agency = 'SAP'.
    lwa_item-identifier-scheme   = p_caract-zcodigo.
    lwa_item-identifier-value  = p_caract-zvalor_sap.
    APPEND lwa_item TO lwa_output-value_mapping_replication-item.
  ENDIF.

  TRY.
      CALL METHOD lo_vmr_proxy->execute_synchronous
        EXPORTING
          output = lwa_output
        IMPORTING
          input  = lwa_input.

    CATCH cx_ai_system_fault INTO lo_sys_fault.
      IF lo_sys_fault->errortext IS NOT INITIAL.
*      WRITE:/ lo_sys_fault->errortext.
        p_message = lo_sys_fault->errortext.
      ENDIF.

    CATCH cx_svmr_value_mapping_rep INTO lo_vmr_fault.
      IF lo_vmr_fault->standard-fault_text IS NOT INITIAL.
*      WRITE:/ lo_vmr_fault->standard-fault_text.
        p_message = lo_vmr_fault->standard-fault_text.
      ENDIF.

    CATCH cx_ai_application_fault INTO lo_appl_fault.
      CALL METHOD lo_appl_fault->if_message~get_text
        RECEIVING
          result = l_appl_fault_text.

      IF l_appl_fault_text IS NOT INITIAL.
*      WRITE:/ l_appl_fault_text.
        p_message = l_appl_fault_text.
      ENDIF.
  ENDTRY.

  IF sy-subrc = 0 AND p_message IS INITIAL.
*    WRITE:/ 'Cache was succesfully deleted with status: ', lwa_input-status.
    CLEAR: p_message, p_error.
  ELSE.
    p_error = 'X'.
    condense lv_operation.
    p_message = text-009.
*    CONCATENATE lv_operation text-009 INTO p_message SEPARATED BY ':'.
*    p_message = text-009.
*    p_message = 'Acción cancelada. Datos antigüos PI cache no han podido borrarse'.
*    WRITE:/ 'Old PI cache data could not be deleted, action cancelt'.
*    LEAVE PROGRAM.
  ENDIF.

  CLEAR:   lwa_item, lwa_output.

ENDFORM.                    " SINCRO_PI
*&---------------------------------------------------------------------*
*&      Form  INICIALIZACION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM inicializacion .

  CLEAR: gt_log, gt_fichero.
  REFRESH: gt_log, gt_fichero.

ENDFORM.                    " INICIALIZACION
*&---------------------------------------------------------------------*
*&      Form  CARGAR_REGISTROS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM cargar_registros .

  DATA: lv_index    LIKE sy-tabix,
        lv_error(1),
        lv_message.
  DATA: ls_fichero      LIKE LINE OF gt_fichero,
        ls_carac_acumul LIKE LINE OF gt_carac_acumul,
        ls_caract       TYPE         ztpi0002,
        ls_caract_modif TYPE         ztpi0002,
        ls_caract_new   TYPE         ztpi0002,
        ls_log          LIKE LINE OF gt_log.

  LOOP AT gt_fichero INTO ls_fichero.

    " Miramos la tabla a actualizar:
    CLEAR ls_carac_acumul.
    READ TABLE gt_carac_acumul INTO ls_carac_acumul
                   WITH KEY zcodigo = ls_fichero-zcodigo.

    " Miramos si ya existe un registro vigente:
    IF ls_carac_acumul-ztipo = 'F'.
      CLEAR: ls_caract, lv_index.
      READ TABLE gt_caract_f INTO ls_caract
                 WITH KEY zcontador = ls_fichero-zcontador
                          zcodigo = ls_fichero-zcodigo
                          bukrs = ls_fichero-bukrs
                          werks = ls_fichero-werks
                          zvalor_sap = ls_fichero-zvalor_sap
                          loekz = ''.

      IF ls_caract IS NOT INITIAL. " Modificar registro
        lv_index = sy-tabix.
        CLEAR ls_caract_modif.
        MOVE-CORRESPONDING ls_fichero TO ls_caract_modif.
        ls_caract_modif-zcontador = ls_caract-zcontador.
        ls_caract_modif-group_id = ls_caract-group_id.
        PERFORM modificar_registro USING ls_caract_modif
                                         ls_caract
                                         ls_carac_acumul-ztipo
                                         lv_index
                                   CHANGING lv_error
                                            lv_message.
        IF lv_error = 'X'.
          CLEAR ls_log.
          MOVE-CORRESPONDING ls_fichero TO ls_log.
          ls_log-type = 'E'.
          ls_log-message = lv_message.
          APPEND ls_log TO gt_log.
        ELSE.
          CLEAR ls_log.
          MOVE-CORRESPONDING ls_fichero TO ls_log.
          ls_log-type = 'S'.
          ls_log-message = text-006.
          APPEND ls_log TO gt_log.

        ENDIF.

      ELSE. " Crear registro
        clear ls_caract_new.
        MOVE-CORRESPONDING ls_fichero TO ls_caract_new.
        PERFORM crear_registro USING ls_carac_acumul-ztipo
                               CHANGING ls_caract_new
                                        lv_error
                                        lv_message.

        IF lv_error = 'X'.
          CLEAR ls_log.
          MOVE-CORRESPONDING ls_fichero TO ls_log.
          ls_log-type = 'E'.
          ls_log-message = lv_message.
          APPEND ls_log TO gt_log.
        ELSE.
          CLEAR ls_log.
          MOVE-CORRESPONDING ls_fichero TO ls_log.
          ls_log-type = 'S'.
          ls_log-message = text-007.
          APPEND ls_log TO gt_log.
        ENDIF.


      ENDIF.


    ELSEIF ls_carac_acumul-ztipo = 'V'.

      CLEAR: ls_caract, lv_index.
      READ TABLE gt_caract_v INTO ls_caract
                 WITH KEY zcontador = ls_fichero-zcontador
                          zcodigo = ls_fichero-zcodigo
                          bukrs = ls_fichero-bukrs
                          werks = ls_fichero-werks
                          zvalor_sap = ls_fichero-zvalor_sap
                          loekz = ''.

      IF ls_caract IS NOT INITIAL. " Modificar registro
        lv_index = sy-tabix.
        CLEAR ls_caract_modif.
        MOVE-CORRESPONDING ls_fichero TO ls_caract_modif.
        ls_caract_modif-zcontador = ls_caract-zcontador.
        ls_caract_modif-group_id = ls_caract-group_id.
        PERFORM modificar_registro USING ls_caract_modif
                                         ls_caract
                                         ls_carac_acumul-ztipo
                                         lv_index
                                   CHANGING lv_error
                                            lv_message.
        IF lv_error = 'X'.
          CLEAR ls_log.
          MOVE-CORRESPONDING ls_fichero TO ls_log.
          ls_log-type = 'E'.
          ls_log-message = lv_message.
          APPEND ls_log TO gt_log.
        ELSE.
          CLEAR ls_log.
          MOVE-CORRESPONDING ls_fichero TO ls_log.
          ls_log-type = 'S'.
          ls_log-message = text-006.
          APPEND ls_log TO gt_log.

        ENDIF.

      ELSE. " Crear registro
        CLEAR ls_caract_new.
        MOVE-CORRESPONDING ls_fichero TO ls_caract_new.
        PERFORM crear_registro USING ls_carac_acumul-ztipo
                               CHANGING ls_caract_new
                                        lv_error
                                        lv_message.

        IF lv_error = 'X'.
          CLEAR ls_log.
          MOVE-CORRESPONDING ls_fichero TO ls_log.
          ls_log-type = 'E'.
          ls_log-message = lv_message.
          APPEND ls_log TO gt_log.
        ELSE.
          CLEAR ls_log.
          MOVE-CORRESPONDING ls_fichero TO ls_log.
          ls_log-type = 'S'.
          ls_log-message = text-007.
          APPEND ls_log TO gt_log.
        ENDIF.

      ENDIF.

    ENDIF.

  ENDLOOP.

ENDFORM.                    " CARGAR_REGISTROS
*&---------------------------------------------------------------------*
*&      Form  MODIFICAR_REGISTRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_CARACT_MODIF  text
*      -->P_LS_CARACT  text
*      <--P_LV_ERROR  text
*      <--P_LV_MESSAGE  text
*----------------------------------------------------------------------*
FORM modificar_registro  USING    ps_caract_modif TYPE ztpi0002
                                  ps_caract TYPE ztpi0002
                                  p_tipo
                                  p_index
                         CHANGING p_error
                                  p_message.

  DATA: lv_operation TYPE string.

  CLEAR: p_error, p_message, lv_operation.

  IF p_tipo = 'F'.
    UPDATE ztpi0002 FROM ps_caract_modif.
    COMMIT WORK AND WAIT.
    IF sy-subrc = 0.
      MODIFY gt_caract_f FROM ps_caract_modif INDEX p_index.

* Actializar tabla de registro de cambios
      CLEAR ztpi0004.
      ztpi0004-datum = sy-datum.
      ztpi0004-uzeit = sy-uzeit.
      ztpi0004-usuario = sy-uname.
      ztpi0004-zcodigo = ps_caract_modif-zcodigo.
      ztpi0004-bukrs = ps_caract_modif-bukrs.
      ztpi0004-werks = ps_caract_modif-werks.
      ztpi0004-zcodigo_ant = ps_caract-zvalor_externo.
      ztpi0004-zcodigo_new = ps_caract_modif-zvalor_externo.
      ztpi0004-zcontador = ps_caract_modif-zcontador.
      INSERT ztpi0004.

* PRIMERO SE BORRA EL REGISTRO DE PI
      lv_operation = 'Delete'.
      PERFORM sincro_pi USING lv_operation
                              ps_caract-group_id
                              p_tipo
                              ps_caract
                        CHANGING p_error
                                 p_message.

* SEGUNDO SE CREA EL REGISTRO DE PI
      IF p_error <> 'X'.
        lv_operation = 'Insert'.
        PERFORM sincro_pi USING lv_operation
                                ps_caract-group_id
                                p_tipo
                                ps_caract_modif
                          CHANGING p_error
                                   p_message.
      ENDIF.

    ELSE.
      p_error = 'X'.
      p_message = text-005.
    ENDIF.

  ELSEIF p_tipo = 'V'.
    UPDATE ztpi0003 FROM ps_caract_modif.
    COMMIT WORK AND WAIT.
    IF sy-subrc = 0.
      MODIFY gt_caract_v FROM ps_caract_modif INDEX p_index.

* Actializar tabla de registro de cambios
      CLEAR ztpi0004.
      ztpi0004-datum = sy-datum.
      ztpi0004-uzeit = sy-uzeit.
      ztpi0004-usuario = sy-uname.
      ztpi0004-zcodigo = ps_caract_modif-zcodigo.
      ztpi0004-bukrs = ps_caract_modif-bukrs.
      ztpi0004-werks = ps_caract_modif-werks.
      ztpi0004-zcodigo_ant = ps_caract-zvalor_externo.
      ztpi0004-zcodigo_new = ps_caract_modif-zvalor_externo.
      ztpi0004-zcontador = ps_caract_modif-zcontador.
      INSERT ztpi0004.

* PRIMERO SE BORRA EL REGISTRO DE PI
      lv_operation = 'Delete'.
      PERFORM sincro_pi USING lv_operation
                              ps_caract-group_id
                              p_tipo
                              ps_caract
                        CHANGING p_error
                                 p_message.

* SEGUNDO SE CREA EL REGISTRO DE PI
      IF p_error <> 'X'.
        lv_operation = 'Insert'.
        PERFORM sincro_pi USING lv_operation
                                ps_caract-group_id
                                p_tipo
                                ps_caract_modif
                          CHANGING p_error
                                   p_message.
      ENDIF.

    ELSE.
      p_error = 'X'.
      p_message = text-005.
    ENDIF.

  ENDIF.

ENDFORM.                    " MODIFICAR_REGISTRO
*&---------------------------------------------------------------------*
*&      Form  CREAR_REGISTRO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_CARACT_NEW  text
*      <--P_LV_ERROR  text
*      <--P_LV_MESSAGE  text
*----------------------------------------------------------------------*
FORM crear_registro  USING    p_tipo
                     CHANGING ps_caract_new TYPE ztpi0002
                              p_error
                              p_message.

  DATA: lv_group_id(32),
        lv_operation    TYPE string,
        lv_error(1),
        lv_message      TYPE bapi_msg.

  CLEAR: lv_group_id, lv_operation.
  CLEAR: lv_error, lv_message.
  CLEAR: p_error,p_message.

  IF p_tipo = 'F'.

    SELECT SINGLE group_id  INTO lv_group_id
    FROM ztpi0002
    WHERE zcodigo = ps_caract_new-zcodigo
*      AND bukrs = gs_caract_new-bukrs
*      AND werks = gs_caract_new-werks
    AND zvalor_sap = ps_caract_new-zvalor_sap.

    IF sy-subrc = 0.

      ps_caract_new-group_id = lv_group_id.

      SELECT MAX( zcontador )  INTO  ps_caract_new-zcontador
        FROM ztpi0002
        WHERE zcodigo = ps_caract_new-zcodigo
        AND bukrs = ps_caract_new-bukrs
        AND werks = ps_caract_new-werks
        AND zvalor_sap = ps_caract_new-zvalor_sap.
      IF sy-subrc = 0.
        ps_caract_new-zcontador = ps_caract_new-zcontador + 1.
      ELSE.
        ps_caract_new-zcontador = 1.
      ENDIF.

    ELSE.

      ps_caract_new-zcontador = 1.

*   create a guid for a pair of values
      CALL FUNCTION 'ICF_CREATE_GUID'
        IMPORTING
          id = lv_group_id.

      ps_caract_new-group_id = lv_group_id.

    ENDIF.

    INSERT ztpi0002 FROM ps_caract_new.
    COMMIT WORK AND WAIT.
    IF sy-subrc = 0.
      APPEND ps_caract_new TO gt_caract_f.
      lv_operation = 'Insert'.
      PERFORM sincro_pi USING lv_operation
                              ps_caract_new-group_id
                              p_tipo
                              ps_caract_new
                         CHANGING lv_error
                                  lv_message.

      IF lv_error = 'X'.
        p_error = 'X'.
        p_message = lv_message.
      ELSE.
        CLEAR: p_error, p_message.
      ENDIF.
    ELSE.
      p_error = 'X'.
      p_message = text-008.
    ENDIF.

  ELSEIF p_tipo = 'V'.

    SELECT SINGLE group_id  INTO lv_group_id
    FROM ztpi0003
    WHERE zcodigo = ps_caract_new-zcodigo
*      AND bukrs = gs_caract_new-bukrs
*      AND werks = gs_caract_new-werks
    AND zvalor_sap = ps_caract_new-zvalor_sap.

    IF sy-subrc = 0.

      ps_caract_new-group_id = lv_group_id.

      SELECT MAX( zcontador )  INTO  ps_caract_new-zcontador
        FROM ztpi0003
        WHERE zcodigo = ps_caract_new-zcodigo
        AND bukrs = ps_caract_new-bukrs
        AND werks = ps_caract_new-werks
        AND zvalor_sap = ps_caract_new-zvalor_sap.
      IF sy-subrc = 0.
        ps_caract_new-zcontador = ps_caract_new-zcontador + 1.
      ELSE.
        ps_caract_new-zcontador = 1.
      ENDIF.

    ELSE.

      ps_caract_new-zcontador = 1.

*   create a guid for a pair of values
      CALL FUNCTION 'ICF_CREATE_GUID'
        IMPORTING
          id = lv_group_id.

      ps_caract_new-group_id = lv_group_id.

    ENDIF.

    INSERT ztpi0003 FROM ps_caract_new.
    COMMIT WORK AND WAIT.
    IF sy-subrc = 0.
      APPEND ps_caract_new TO gt_caract_v.
      lv_operation = 'Insert'.
      PERFORM sincro_pi USING lv_operation
                              ps_caract_new-group_id
                              p_tipo
                              ps_caract_new
                         CHANGING lv_error
                                  lv_message.
      IF lv_error = 'X'.
        p_error = 'X'.
        p_message = lv_message.
      ELSE.
        CLEAR: p_error, p_message.
      ENDIF.

    ELSE.
      p_error = 'X'.
      p_message = text-008.
    ENDIF.

  ENDIF.

ENDFORM.                    " CREAR_REGISTRO
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_log.

  DATA: ls_log LIKE LINE OF gt_log.

  IF p_borra = 'X'.

    WRITE:/ 'REGISTROS BORRADOS CORRECTAMENTE'.
    WRITE:/ 'Línea',
          (7) 'Código',
          (14) 'Sociedad',
          (23) 'Centro',
          (30) 'Valor SAP',
          (51) 'Valor ext',
          (62) 'Mensaje'.

    LOOP AT gt_log INTO ls_log WHERE type = 'S'.
      WRITE:/ ls_log-row,
            (8) ls_log-zcodigo,
            (15) ls_log-bukrs,
            (24) ls_log-werks,
            (31) ls_log-zvalor_sap,
            (52) ls_log-zvalor_externo,
            (63) ls_log-message.
    ENDLOOP.

    WRITE:/.

    WRITE:/ 'REGISTROS NO BORRADOS CORRECTAMENTE'.
    WRITE:/ 'Línea',
          (7) 'Código',
          (14) 'Sociedad',
          (23) 'Centro',
          (30) 'Valor SAP',
          (51) 'Valor ext',
          (62) 'Mensaje'.

    LOOP AT gt_log INTO ls_log WHERE type = 'E'.
      WRITE:/ ls_log-row,
            (8) ls_log-zcodigo,
            (15) ls_log-bukrs,
            (24) ls_log-werks,
            (31) ls_log-zvalor_sap,
            (52) ls_log-zvalor_externo,
            (63) ls_log-message.
    ENDLOOP.


  ELSEIF p_carga = 'X'.

    WRITE:/ 'REGISTROS CARGADOS CORRECTAMENTE'.
    WRITE:/ 'Línea',
          (7) 'Código',
          (14) 'Sociedad',
          (23) 'Centro',
          (30) 'Valor SAP',
          (51) 'Valor ext',
          (62) 'Mensaje'.

    LOOP AT gt_log INTO ls_log WHERE type = 'S'.
      WRITE:/ ls_log-row,
            (8) ls_log-zcodigo,
            (15) ls_log-bukrs,
            (24) ls_log-werks,
            (31) ls_log-zvalor_sap,
            (52) ls_log-zvalor_externo,
            (63) ls_log-message.
    ENDLOOP.

    WRITE:/ 'REGISTROS NO CARGADOS CORRECTAMENTE'.
    WRITE:/ 'Línea',
          (7) 'Código',
          (14) 'Sociedad',
          (23) 'Centro',
          (30) 'Valor SAP',
          (51) 'Valor ext',
          (62) 'Mensaje'.

    LOOP AT gt_log INTO ls_log WHERE type = 'E'.
      WRITE:/ ls_log-row,
            (8) ls_log-zcodigo,
            (15) ls_log-bukrs,
            (24) ls_log-werks,
            (31) ls_log-zvalor_sap,
            (52) ls_log-zvalor_externo,
            (63) ls_log-message.
    ENDLOOP.

  ENDIF.

ENDFORM.                    " MOSTRAR_LOG
