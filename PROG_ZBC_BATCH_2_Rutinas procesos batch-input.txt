*-----------------------------------------------------------------------
***   Z07BATCH

* Contenido:
*    FORMATO_SAP       Convierte una cantidad a formato interno SAP.
*    OPEN_GROUP        Batch input
*    CLOSE_GROUP           "
*    BDC_TRANSACTION       "
*    BDC_DYNPRO            "
*    BDC_FIELD             "
*    MAIL              Envía un mensaje Sap-Office
*    MENSAJES_ERROR    Obtiene los mensajes de error
*    MOSTRAR_PROGRESO  Muestra el progreso ejecución del programa

*//////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
*//////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
*//////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

TABLES: T100.

*  Batchinputdata of single transaction
DATA: BEGIN OF BDCDATA OCCURS 0.
        INCLUDE STRUCTURE BDCDATA.
DATA: END OF BDCDATA.

* Tabla interna de errores del batch input.
DATA: BEGIN OF I_MESSTAB OCCURS 10.
        INCLUDE STRUCTURE BDCMSGCOLL.
DATA: END OF I_MESSTAB.

* Variables de utilidad.
DATA:
       TOTAL     LIKE F110O-AZAHL,
       TOTAL1    LIKE F110O-AZAHL,
       TOTAL2    LIKE F110O-AZAHL,
       TOTAL3    LIKE F110O-AZAHL,
       IMPORTE   LIKE BSEG-DMBTR,
       IMPORTE1  LIKE BSEG-DMBTR,
       IMPORTE2  LIKE BSEG-DMBTR,
       IMPORTE3  LIKE BSEG-DMBTR,
       TEXTO(255),
       TEXTO1(255),
       TEXTO2(255),
       TEXTO3(255).

*&---------------------------------------------------------------------*
*&      Form  FORMATO_SAP
*&---------------------------------------------------------------------*
* convierte un importe de texto a formato interno de SAP según moneda.
FORM FORMATO_SAP USING    P_TEXTO
                          P_MONEDA
                 CHANGING P_CANTIDAD.

DATA:   SALIDA   LIKE BAPICURR-BAPICURR.

CALL FUNCTION 'CURRENCY_AMOUNT_IDOC_TO_SAP'
     EXPORTING
          CURRENCY    = P_MONEDA
          IDOC_AMOUNT = P_TEXTO
    IMPORTING
          SAP_AMOUNT  = SALIDA
   EXCEPTIONS
          OTHERS      = 1.

    P_CANTIDAD = SALIDA.

ENDFORM.       " de FORMATO_SAP



*----------------------------------------------------------------------*
*   create batchinput session                                          *
*----------------------------------------------------------------------*
*FORM OPEN_GROUP USING L_GROUP L_KEEP.
FORM OPEN_GROUP USING L_GROUP.
  CALL FUNCTION 'BDC_OPEN_GROUP'
       EXPORTING  CLIENT   = SY-MANDT
                  GROUP    = L_GROUP
                  USER     = SY-UNAME.
*                  KEEP     = L_KEEP.

ENDFORM.


*----------------------------------------------------------------------*
*   end batchinput session                                             *
*----------------------------------------------------------------------*
FORM CLOSE_GROUP.

  CALL FUNCTION 'BDC_CLOSE_GROUP'.

ENDFORM.


*----------------------------------------------------------------------*
*        Start new transaction                                         *
*----------------------------------------------------------------------*
FORM BDC_TRANSACTION USING TCODE.

  CALL FUNCTION 'BDC_INSERT'
       EXPORTING TCODE     = TCODE
       TABLES    DYNPROTAB = BDCDATA.

ENDFORM.


*----------------------------------------------------------------------*
*        Start new screen                                              *
*----------------------------------------------------------------------*
FORM BDC_DYNPRO USING PROGRAM DYNPRO.
  CLEAR BDCDATA.
  BDCDATA-PROGRAM  = PROGRAM.
  BDCDATA-DYNPRO   = DYNPRO.
  BDCDATA-DYNBEGIN = 'X'.
  APPEND BDCDATA.
ENDFORM.


*----------------------------------------------------------------------*
*        Insert field                                                  *
*----------------------------------------------------------------------*
FORM BDC_FIELD USING FNAM FVAL.
  CLEAR BDCDATA.
  BDCDATA-FNAM = FNAM.
  BDCDATA-FVAL = FVAL.
  APPEND BDCDATA.
ENDFORM.


*-----------------------------------------------------------------------
*        Mail
*-----------------------------------------------------------------------
FORM MAIL USING VALUE(S_USER)
                VALUE(TITLE)
                VALUE(S_DESCAV).


DATA: BEGIN OF MAIL_ATTR.
        INCLUDE STRUCTURE SOOD1.
DATA: END OF MAIL_ATTR.

* text table
DATA: BEGIN OF MAIL_TEXT OCCURS 1.
        INCLUDE STRUCTURE SOLI.
DATA: END OF MAIL_TEXT.

* receiver list with attributes
DATA: BEGIN OF MAIL_RECV OCCURS 1.
        INCLUDE STRUCTURE SOOS1.
DATA: END OF MAIL_RECV.

* Parametertabelle
DATA: BEGIN OF MAIL_DIAL OCCURS 1.
        INCLUDE STRUCTURE SOOP1.
DATA: END OF MAIL_DIAL.

* selection table for mailing parameters
DATA: BEGIN OF MAIL_PARM OCCURS 1.
        INCLUDE STRUCTURE SELC.
DATA: END OF MAIL_PARM.

* global data
DATA : SUBRC LIKE SY-SUBRC.

DATA :   RECESC    LIKE SOOS1-RECESC ,
         RECEIVER LIKE SOOS1-RECNAM,
         EXTNAM   LIKE SOLI-LINE ,
*        title    LIKE soli-line
         S_NAVISO   LIKE QMEL-QMNUM.
*         S_DESCAV   LIKE QMEL-QMTXT,
*         S_USER(40) TYPE C.

*************** Parámetros del mensaje
RECESC   = 'U'.
RECEIVER = SPACE.
EXTNAM   = S_USER.
*TITLE    = TEXT-001.

* header data
MOVE: SY-LANGU          TO MAIL_ATTR-OBJLA,
      ''                TO MAIL_ATTR-OBJSRT,
      'INCIDENCIAS'     TO MAIL_ATTR-OBJNAM,
      TITLE             TO MAIL_ATTR-OBJDES,
      'F'               TO MAIL_ATTR-OBJSNS,     "Funktional
      'T'               TO MAIL_ATTR-VMTYP,      "TA
      'SO02'            TO MAIL_ATTR-ACNAM.      "SAPoffice Ausgang

* Cuerpo del mensaje.
MAIL_TEXT = TEXT-002.
MAIL_TEXT+20 = S_NAVISO.
MAIL_TEXT+35 = S_DESCAV.
APPEND MAIL_TEXT.

* set receiver
CLEAR   MAIL_RECV.
REFRESH MAIL_RECV.
MAIL_RECV-RECESC = RECESC.
MAIL_RECV-RECNAM = RECEIVER.
MAIL_RECV-RECEXTNAM = EXTNAM.
MAIL_RECV-SNDEX = 'X'.
APPEND MAIL_RECV.

MAIL_DIAL-NAME = 'PLVAR'.
MAIL_DIAL-VALUE = 'RA'.
APPEND MAIL_DIAL.

MAIL_DIAL-NAME = 'OTYPE'.
MAIL_DIAL-VALUE = 'E '.
APPEND MAIL_DIAL.

MAIL_DIAL-NAME = 'OBJID'.
MAIL_DIAL-VALUE = '00000000'.
APPEND MAIL_DIAL.

MAIL_DIAL-NAME = 'BEGDA'.
MAIL_DIAL-VALUE = SY-DATUM.
APPEND MAIL_DIAL.

MAIL_DIAL-NAME = 'ENDDA'.
MAIL_DIAL-VALUE = SY-DATUM.
APPEND MAIL_DIAL.

* send mail via interface in RHMAIL10
PERFORM SEND_MAIL(RHMAIL10) TABLES MAIL_TEXT
                            MAIL_PARM
                            MAIL_DIAL
                            MAIL_RECV
                     USING  MAIL_ATTR
                            SY-UNAME
                            TITLE
                            SUBRC.
ENDFORM.                    " MAIL



*&---------------------------------------------------------------------*
*&      Form  MENSAJES_ERROR
*&---------------------------------------------------------------------*
* Obtiene los textos de mensajes de error
FORM MENSAJES_ERROR TABLES I_MESSTAB   STRUCTURE I_MESSTAB
                    CHANGING P_LINEA.

DATA: LONG TYPE I.
FIELD-SYMBOLS: <INFO>.
************************************************************************
*     loop at i_messtab where msgtyp = 'E' or msgtyp = 'S'.
      LOOP AT I_MESSTAB. " WHERE MSGTYP = 'E'.
        CLEAR T100.
        SELECT SINGLE * FROM  T100
               WHERE  SPRSL       = I_MESSTAB-MSGSPRA"idioma
               AND    ARBGB       = I_MESSTAB-MSGID"clase mensaje KF
               AND    MSGNR       = I_MESSTAB-MSGNR.

        CLEAR P_LINEA.
        P_LINEA = T100-TEXT.
        LONG = STRLEN( I_MESSTAB-MSGV1 ).
        IF LONG NE 0.
          ASSIGN I_MESSTAB-MSGV1(LONG) TO <INFO>.
          REPLACE '&' WITH <INFO> INTO P_LINEA.
        ENDIF.
        LONG = STRLEN( I_MESSTAB-MSGV2 ).
        IF LONG NE 0.
          ASSIGN I_MESSTAB-MSGV2(LONG) TO <INFO>.
          REPLACE '&' WITH <INFO> INTO P_LINEA.
        ENDIF.

        LONG = STRLEN( I_MESSTAB-MSGV3 ).
        IF LONG NE 0.
          ASSIGN I_MESSTAB-MSGV3(LONG) TO <INFO>.
          REPLACE '&' WITH <INFO> INTO P_LINEA.
        ENDIF.
        LONG = STRLEN( I_MESSTAB-MSGV4 ).
        IF LONG NE 0.
          ASSIGN I_MESSTAB-MSGV4(LONG) TO <INFO>.
          REPLACE '&' WITH <INFO> INTO P_LINEA.
        ENDIF.

      ENDLOOP.


ENDFORM.                    " MENSAJES_ERROR




*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_PROGRESO
*&---------------------------------------------------------------------*
* muestra en la linea de mensajes el progreso del programa
FORM MOSTRAR_PROGRESO USING    P_TEXTO.

CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
    EXPORTING
         TEXT       = P_TEXTO.

ENDFORM.                    " MOSTRAR_PROGRESO

*&---------------------------------------------------------------------*
*&      Form  MENSAJES_ERROR_HR
*&---------------------------------------------------------------------*
* Obtiene los textos de mensajes de error
FORM MENSAJES_ERROR_HR TABLES I_MESSTAB   STRUCTURE I_MESSTAB
                    CHANGING P_LINEA.

DATA: LONG TYPE I.
FIELD-SYMBOLS: <INFO>.
************************************************************************

      LOOP AT I_MESSTAB.
        CLEAR T100.
        SELECT SINGLE * FROM  T100
               WHERE  SPRSL       = I_MESSTAB-MSGSPRA"idioma
               AND    ARBGB       = I_MESSTAB-MSGID"clase mensaje KF
               AND    MSGNR       = I_MESSTAB-MSGNR.

        IF P_LINEA IS INITIAL.
          CLEAR P_LINEA.
          P_LINEA = T100-TEXT.
          LONG = STRLEN( I_MESSTAB-MSGV1 ).
          IF LONG NE 0.
            ASSIGN I_MESSTAB-MSGV1(LONG) TO <INFO>.
            REPLACE '&' WITH <INFO> INTO P_LINEA.
          ENDIF.
          LONG = STRLEN( I_MESSTAB-MSGV2 ).
          IF LONG NE 0.
            ASSIGN I_MESSTAB-MSGV2(LONG) TO <INFO>.
            REPLACE '&' WITH <INFO> INTO P_LINEA.
          ENDIF.

          LONG = STRLEN( I_MESSTAB-MSGV3 ).
          IF LONG NE 0.
            ASSIGN I_MESSTAB-MSGV3(LONG) TO <INFO>.
            REPLACE '&' WITH <INFO> INTO P_LINEA.
          ENDIF.
          LONG = STRLEN( I_MESSTAB-MSGV4 ).
          IF LONG NE 0.
            ASSIGN I_MESSTAB-MSGV4(LONG) TO <INFO>.
            REPLACE '&' WITH <INFO> INTO P_LINEA.
          ENDIF.
        ENDIF.
      ENDLOOP.


ENDFORM.                    " MENSAJES_ERROR_HR
