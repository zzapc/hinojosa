
CLASS zcl_dev DEFINITION
  PUBLIC
  INHERITING FROM zcl_ap_dev
  CREATE PUBLIC.

  PUBLIC SECTION.
    DATA usuario_sistemas               TYPE abap_bool.
    DATA restriccion_layout             TYPE salv_de_layout_restriction.
    DATA no_permitir_modificar_variante TYPE abap_bool.
    DATA variante_forzada               TYPE rsvar-variant.

    METHODS constructor
      IMPORTING prog                TYPE any       DEFAULT sy-cprog
                commit_work         TYPE abap_bool DEFAULT 'X'
                !status             TYPE any       DEFAULT 'INICIO'
                param_sap_all       TYPE abap_bool DEFAULT ''
                !object             TYPE any       DEFAULT ''
                subobject           TYPE any       DEFAULT ''
                no_param            TYPE abap_bool DEFAULT ''
                get_nombre_pc       TYPE abap_bool DEFAULT ''
                get_doc_from_report TYPE abap_bool DEFAULT 'X'
                guardar_logz        TYPE abap_bool DEFAULT ''
                proceso_log         TYPE any       DEFAULT sy-cprog
                no_break            TYPE abap_bool DEFAULT ''
                status_prog         TYPE any       DEFAULT ''
                cprog               TYPE sy-cprog  DEFAULT sy-cprog
                !uname              TYPE sy-uname  DEFAULT sy-uname
      PREFERRED PARAMETER prog.

    CLASS-METHODS validar_centro
      IMPORTING r_werks      TYPE range_t_werks OPTIONAL
                werks        TYPE werks_d       OPTIONAL
                obligatorio  TYPE abap_bool
      RETURNING VALUE(error) TYPE abap_bool.

    METHODS parametros_por_defecto
      IMPORTING opcion       TYPE char1            DEFAULT '1'
      CHANGING  r_vkorg      TYPE sd_vkorg_ranges  OPTIONAL
                r_backoffice TYPE trty_kunnr_range OPTIONAL
                p_vkorg      TYPE vkorg            OPTIONAL
                r_werks      TYPE range_t_werks    OPTIONAL
                p_lgnum      TYPE lgnum            OPTIONAL.

    CLASS-METHODS validar_almacen
      IMPORTING r_werks      TYPE range_t_werks OPTIONAL
                werks        TYPE werks_d       OPTIONAL
                obligatorio  TYPE abap_bool     DEFAULT ''
                r_lgort      TYPE range_t_werks OPTIONAL
                lgort        TYPE lgort_d       OPTIONAL
      RETURNING VALUE(error) TYPE abap_bool.

    CLASS-METHODS validar_num_almacen
      IMPORTING lgnum        TYPE lgnum                    OPTIONAL
                obligatorio  TYPE abap_bool                DEFAULT ''
                r_lgnum      TYPE mdg_bs_mat_t_range_lgnum OPTIONAL
                r_werks      TYPE range_t_werks            OPTIONAL
                werks        TYPE werks_d                  OPTIONAL
      RETURNING VALUE(error) TYPE abap_bool.

    METHODS seleccion_variante_param
      IMPORTING !uname TYPE sy-uname OPTIONAL
                cprog  TYPE sy-cprog OPTIONAL.

    METHODS selection_screen_output
      CHANGING current_scr TYPE sydb0_scr_stack_line OPTIONAL.

  PROTECTED SECTION.

  PRIVATE SECTION.
endclass. "ZCL_DEV definition
class ZCL_DEV implementation.
  METHOD constructor.
    super->constructor(
        prog                = prog
        commit_work         = commit_work
        status              = status
        param_sap_all       = param_sap_all
        object              = object
        subobject           = subobject
        no_param            = no_param
        get_nombre_pc       = get_nombre_pc
        get_doc_from_report = get_doc_from_report
        guardar_logz        = guardar_logz
        proceso_log         = proceso_log
        no_break            = no_break
        status_prog         = status_prog ).

    usuario_sistemas = zcl_usuario=>es_usuario_sistemas( ).
    IF me->usuario_sistemas = 'X'.
      restriccion_layout = if_salv_c_layout=>restrict_none.
    ELSE.
      restriccion_layout = if_salv_c_layout=>restrict_user_dependant. " Sólo permitimos disposiciones de usuario
    ENDIF.

    seleccion_variante_param( cprog = cprog
                              uname = uname ).
  ENDMETHOD.
  METHOD parametros_por_defecto.
* Sí solo tiene un backoffice o org.ventas, los fijamos
    IF r_backoffice IS SUPPLIED.
      DATA(r_backofficel) = NEW zhcl_sd_core( )->get_backoffice_usuario( ).
      IF ( lines( r_backofficel ) = 1 AND opcion = '1' ) OR opcion = 'T'.
        r_backoffice = r_backofficel.
      ENDIF.
    ENDIF.

    IF r_vkorg IS SUPPLIED OR p_vkorg IS SUPPLIED.
      DATA(r_vkorgl) = NEW zhcl_sd_core( )->get_vkorg_aut_usuario( ).
      IF NOT r_vkorgl IS INITIAL.
        IF ( lines( r_vkorgl ) = 1 AND opcion = '1' ) OR opcion = 'T'.
          IF r_vkorg IS SUPPLIED.
            r_vkorg[] = r_vkorgl.
          ENDIF.
          IF p_vkorg IS SUPPLIED.
            p_vkorg = r_vkorgl[ 1 ]-low.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    IF r_werks IS SUPPLIED.
      DATA(r_werksl) = NEW zhcl_sd_core( )->get_werks_aut_usuario( ).
      IF ( lines( r_werksl ) = 1 AND opcion = '1' ) OR opcion = 'T'.
        r_werks = r_werksl.
      ENDIF.
    ENDIF.

    IF p_lgnum IS SUPPLIED.
      IF NOT r_werks IS INITIAL.
        SELECT DISTINCT lgnum FROM t320  "#EC CI_BYPASS
          INTO TABLE @DATA(i_lgnum)
         WHERE werks IN @r_werks.
        IF lines( i_lgnum ) = 1.
          p_lgnum = i_lgnum[ 1 ]-lgnum.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD seleccion_variante_param.
    ASSIGN o_par->i_par[ campo = 'VARIANTE_X_USUARIO'
                         valor = uname ] TO FIELD-SYMBOL(<par>).
    IF sy-subrc = 0.
      IF NOT <par>-atributo1 IS INITIAL.
        variante_forzada = <par>-atributo1.
      ENDIF.
    ENDIF.

    IF variante_forzada IS INITIAL.
      LOOP AT o_par->i_par ASSIGNING <par> WHERE campo = 'VARIANTE_X_ROL' AND valor <> ''.
        IF zcl_ap_autorizacion=>tiene_rol( <par>-valor ).
          variante_forzada = <par>-atributo1.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF NOT variante_forzada IS INITIAL.
      CALL FUNCTION 'RS_SUPPORT_SELECTIONS'
        EXPORTING
          report               = cprog
          variant              = variante_forzada
        EXCEPTIONS
          variant_not_existent = 01
          variant_obsolete     = 02.
      IF sy-subrc = 0.
        IF <par>-atributo2 = 'SOLOVARIANTE'.
          no_permitir_modificar_variante = 'X'.
        ENDIF.
      ELSE.
        MESSAGE |No existe la variante { variante_forzada }| TYPE 'E'.
        CLEAR variante_forzada.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD selection_screen_output.
    " TODO: parameter CURRENT_SCR is only used or assigned in commented-out code (ABAP cleaner)

    IF no_permitir_modificar_variante = 'X'.
      zcl_ap_dynpro=>deshabilitar_boton( 'GET' ).
      zcl_ap_dynpro=>deshabilitar_boton( 'SPOS' ).
*      APPEND 'GET' TO current_scr-excl. " get variant
*      APPEND 'SPOS' TO current_scr-excl. " get variant
    ENDIF.
  ENDMETHOD.
  METHOD validar_almacen.
    CLEAR error.
    IF NOT r_lgort IS INITIAL.
      SELECT werks, lgort FROM t001l "#EC CI_GENBUFF
        INTO TABLE @DATA(i_alm)
        WHERE werks IN @r_werks
          AND lgort IN @r_lgort.
    ELSEIF NOT lgort IS INITIAL.
      IF werks IS INITIAL.
        SELECT werks, lgort FROM t001l "#EC CI_GENBUFF
          INTO TABLE @i_alm
          WHERE werks IN @r_werks
            AND lgort  = @lgort.
      ELSE.
        SELECT werks, lgort FROM t001l
          INTO TABLE @i_alm
         WHERE werks = @werks
           AND lgort = @lgort.
      ENDIF.
      IF i_alm IS INITIAL.
        MESSAGE |Almacén { lgort } no es válido para el centro indicado| TYPE 'E'.
      ENDIF.
    ENDIF.
    IF i_alm IS INITIAL AND obligatorio = 'X'.
      error = 'X'.
      MESSAGE 'Debe informar almacén' TYPE 'E'.
    ENDIF.
    LOOP AT i_alm ASSIGNING FIELD-SYMBOL(<alm>).
      AUTHORITY-CHECK OBJECT 'M_MSEG_LGO'
                      ID 'ACTVT' FIELD '03'
                      ID 'WERKS' FIELD <alm>-werks
                      ID 'LGORT' FIELD <alm>-lgort.
      IF sy-subrc <> 0.
        error = 'X'.
        MESSAGE |No autorizado a almacén { <alm>-werks } { <alm>-lgort }| TYPE 'E'.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD validar_centro.
    CLEAR error.
    IF NOT r_werks IS INITIAL.
      SELECT werks FROM t001w
        INTO TABLE @DATA(i_werks)
        WHERE werks IN @r_werks.
    ELSEIF NOT werks IS INITIAL.
      APPEND werks TO i_werks.
    ENDIF.
    IF i_werks IS INITIAL AND obligatorio = 'X'.
      error = 'X'.
      MESSAGE 'Debe informar centro' TYPE 'E'.
    ENDIF.
    LOOP AT i_werks ASSIGNING FIELD-SYMBOL(<werks>).
      AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
                      ID 'ACTVT' FIELD '03'
                      ID 'WERKS' FIELD <werks>-werks.
      IF sy-subrc <> 0.
        error = 'X'.
        MESSAGE |No autorizado a centro { <werks>-werks }| TYPE 'E'.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD validar_num_almacen.
    CLEAR error.
    IF NOT r_lgnum IS INITIAL.
      SELECT werks, lgort, lgnum FROM t320
        INTO TABLE @DATA(i_alm)
        WHERE werks IN @r_werks
          AND lgnum IN @r_lgnum.
    ELSEIF NOT lgnum IS INITIAL.
      IF werks IS INITIAL.
        SELECT werks, lgort, lgnum FROM t320
          INTO TABLE @i_alm
          WHERE werks IN @r_werks
            AND lgnum  = @lgnum.
      ELSE.
        SELECT werks, lgort, lgnum FROM t320
          INTO TABLE @i_alm
          WHERE werks = @werks
            AND lgnum = @lgnum.
      ENDIF.
      IF i_alm IS INITIAL.
        MESSAGE |Nº almacén { lgnum } no es válido para el centro indicado| TYPE 'E'.
      ENDIF.
    ENDIF.
    IF i_alm IS INITIAL AND obligatorio = 'X'.
      error = 'X'.
      MESSAGE 'Debe informar nº almacén' TYPE 'E'.
    ENDIF.
    SORT i_alm BY lgnum.
    DELETE ADJACENT DUPLICATES FROM i_alm COMPARING lgnum.
    LOOP AT i_alm ASSIGNING FIELD-SYMBOL(<alm>).
      AUTHORITY-CHECK OBJECT 'M_MATE_LGN'
                      ID 'ACTVT' FIELD '03'
                      ID 'LGNUM' FIELD <alm>-lgnum.
      IF sy-subrc <> 0.
        error = 'X'.
        MESSAGE |No autorizado a nº almacén { <alm>-lgnum }| TYPE 'E'.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
