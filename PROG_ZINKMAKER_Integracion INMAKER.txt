***********************************************************************
* TIPO : LISTADO
* TITULO : Integración INMAKER
* DESCRIPCION : Integración INMAKER
*
* AUTOR: Andrés Picazo                                FECHA: 17/04/2024
* ANALISTA: Alfredo García
*
***********************************************************************
REPORT zinkmaker.

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: mast, zvcxi_pxe_td200.

*------TABLAS INTERNAS-------------------------------------------------*
*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*

*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check FINAL.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS visualizar_objeto   REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_dev FINAL.
  PUBLIC SECTION.
    TYPES: BEGIN OF t_lm,
             check          TYPE xfeld,
             lights         TYPE zico_estado_mensaje,
             matnr          TYPE mast-matnr,
             maktx          TYPE maktx,
             mtart_c        TYPE mara-mtart,
             werks_c        TYPE mast-werks,
             stlnr          TYPE mast-stlnr,
             stlan          TYPE mast-stlan,
             stlal          TYPE mast-stlal,
             stlst          TYPE stko-stlst,
             bmeng          TYPE stko-bmeng,
             bmeng_div_1000 TYPE int4,
             bmein          TYPE stko-bmein,
             ordlm          TYPE sy-tabix,
             idnrk          TYPE stpox-idnrk,
             ojtxp          TYPE stpox-ojtxp,
             postp          TYPE stpox-postp,
             menge          TYPE stpox-menge,
             meins          TYPE stpox-meins,
             tipo           TYPE string,
             fichero        TYPE string,
             message        TYPE bapi_msg,
           END OF t_lm,
           BEGIN OF t_doc,
             check          TYPE xfeld,
             lights         TYPE zico_estado_mensaje,
             dokar          TYPE zvcxi_pxe_td200-dokar,
             doknr          TYPE zvcxi_pxe_td200-doknr,
             dokvr          TYPE zvcxi_pxe_td200-dokvr,
             doktl          TYPE zvcxi_pxe_td200-doktl,
             werks          TYPE zvcxi_pxe_td200-werks,
             tprin          TYPE zvcxi_pxe_td200-tprin,
             prsid          TYPE zvcxi_pxe_td200-prsid,
             shtdi          TYPE zvcxi_pxe_td200-shtdi,
             prare          TYPE zvcxi_pxe_td200-prare,
             prare_uom      TYPE zvcxi_pxe_td200-prare_uom,
             area_impresion TYPE zvcxi_pxe_td200-prare,
             cobertura      TYPE zvcxi_pxe_td200-prare,
             settn          TYPE zvcxi_pxe_td200-settn,
             maktx          TYPE maktx,
             cinkn          TYPE zvcxi_pxe_td210-cinkn,
             tink           TYPE zvcxi_pxe_td210-tink,
             colco          TYPE zvcxi_pxe_td210-colco,
             covrg          TYPE zvcxi_pxe_td210-covrg,
             matnr          TYPE zvcxi_pxe_td210-matnr,
             apwgt          TYPE zvcxi_pxe_td210-apwgt,
             apwgt_uom      TYPE zvcxi_pxe_td210-apwgt_uom,
             tipo           TYPE string,
             fichero        TYPE string,
             message        TYPE bapi_msg,
           END OF t_doc,
           BEGIN OF t_colores,
             check   TYPE xfeld,
             lights  TYPE zico_estado_mensaje,
             matnr   TYPE mast-matnr,
             maktx   TYPE maktx,
             mtart   TYPE mara-mtart,
             werks   TYPE mast-werks,
             colco   TYPE zvcxi_pxs_td121-colco,
             tprin   TYPE zvcxi_pxs_td121-tprin,
             valfr   TYPE zvcxi_pxs_td121-valfr,
             tipo    TYPE string,
             fichero TYPE string,
             message TYPE bapi_msg,
           END OF t_colores,
           BEGIN OF t_fichero,
             linea TYPE string,
           END OF t_fichero.

    DATA: i_lm      TYPE TABLE OF t_lm,
          i_doc     TYPE TABLE OF t_doc,
          i_colores TYPE TABLE OF t_colores,
          i_fichero TYPE TABLE OF t_fichero,
          o_alv     TYPE REF TO lcl_alv,
          o_alvf    TYPE REF TO lcl_alv,
          i_col     TYPE zap_alv_columnas3_t.

    METHODS  main.

    METHODS: listado,
      seleccionar_datos,

      get_valores IMPORTING datos            TYPE any
                  RETURNING VALUE(i_valores) TYPE apb_lpd_t_key_value,

      generar_linea IMPORTING datos        TYPE any
                    RETURNING VALUE(linea) TYPE string,

      generar_fichero
        IMPORTING popup     TYPE string DEFAULT ''
                  grabar    TYPE string DEFAULT ''
        EXPORTING !string   TYPE string
                  xstring   TYPE xstring
                  i_fichero TYPE table_of_strings,

      get_xlsx_colores RETURNING VALUE(xstring) TYPE xstring.

  PRIVATE SECTION.
    METHODS get_lm.
    METHODS get_docu.
    METHODS grabar_ftp.
    METHODS get_colores.

ENDCLASS.

*------VARIABLES-------------------------------------------------------*
DATA: o_prog TYPE REF TO zcl_report,
      stpox  TYPE stpox,
      mara   TYPE mara.


*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK b01 WITH FRAME TITLE text-sel.
SELECT-OPTIONS: s_werks FOR mast-werks,
                s_matnr FOR mast-matnr MODIF ID mat,
                s_stlan FOR mast-stlan MODIF ID lm,
                s_stlal FOR mast-stlal MODIF ID lm,
                s_mtart FOR mara-mtart DEFAULT 'ZTIN' MODIF ID lm,
                s_idnrk FOR stpox-idnrk MODIF ID lm,
                s_dokar FOR zvcxi_pxe_td200-dokar DEFAULT 'Y01' MODIF ID doc,
                s_doknr FOR zvcxi_pxe_td200-doknr MODIF ID doc,
                s_tprin FOR zvcxi_pxe_td200-tprin MODIF ID doc DEFAULT 'DIGITAL' SIGN E.

SELECTION-SCREEN SKIP 1.
PARAMETERS: p_list RADIOBUTTON GROUP g DEFAULT 'X' MODIF ID g USER-COMMAND g,
            p_docu RADIOBUTTON GROUP g,
            p_colo RADIOBUTTON GROUP g.
SELECTION-SCREEN SKIP 1.
PARAMETERS p_fiche TYPE text255.
SELECTION-SCREEN SKIP 1.
PARAMETERS: p_grabar AS CHECKBOX,
            p_ftp    AS CHECKBOX USER-COMMAND g.
PARAMETERS: p_dftp TYPE text50 MODIF ID ftp,
            p_user TYPE text50 MODIF ID ftp,
            p_pass TYPE text50 MODIF ID ftp,
            p_ddir TYPE text100 MODIF ID ftp.

SELECTION-SCREEN SKIP 1.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK b01.
__botones_plantilla.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.
  METHOD visualizar_objeto.
    DATA: l_lm  TYPE o_prog->t_lm,
          " TODO: variable is assigned but never used (ABAP cleaner)
          l_doc TYPE o_prog->t_doc.

    CASE column.
      WHEN 'TIPO'.
        o_prog->get_valores( datos = list  ).
      WHEN 'FICHERO'.
        o_prog->generar_fichero( popup = 'X' ).
      WHEN OTHERS.
        IF p_list = 'X'.
          l_lm = list.
          CASE column.
            WHEN OTHERS.
              SET PARAMETER ID 'MAT' FIELD l_lm-matnr.
              SET PARAMETER ID 'WRK' FIELD l_lm-werks_c.
              SET PARAMETER ID 'CSV' FIELD l_lm-stlan.
              CALL TRANSACTION 'CS03' AND SKIP FIRST SCREEN.
          ENDCASE.
        ELSE.
          l_doc = list.
        ENDIF.
    ENDCASE.
  ENDMETHOD. " handle_double_click

  METHOD handle_user_command.
    check_ucomm_sel = 'F01'.

    super->handle_user_command( e_salv_function ).

    CASE ucomm.
      WHEN 'GRABAR'.
        o_prog->generar_fichero( grabar = 'X' ).
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.
    seleccionar_datos( ).
    listado( ).
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.

    sgpi_texto( 'Seleccionando datos'(sda) ).

    IF p_list = 'X'.
      get_lm( ).
    ELSEIF p_docu = 'X'.
      get_docu( ).
    ELSEIF p_colo = 'X'.
      get_colores( ).
    ENDIF.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe'(gin) ).

    o_alv->add_button( button = 'F01' text = 'Generar fichero'  icon = icon_write_file ucomm = 'GRABAR' ).
    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page( ).

    o_alv->set_field( campo = 'LIGHTS' op = 'KEY' ).
    o_alv->set_field_quitar( 'CHECK' ).
    o_alv->set_field_text( 'TIPO,FICHERO' ).

    IF p_list = 'X'.
      o_alv->set_field_quitar( 'ORDLM' ).
      o_alv->set_field_text( campo = 'BMENG_DIV_1000' valor = 'C.Base/1000' valor2 = 'Cantidad base / 1000' ).
      o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_lm ).
      o_alv->set_seleccion( CHANGING t_tabla = i_lm ).
    ELSEIF p_docu = 'X'.
      o_alv->set_field_text( 'COBERTURA,AREA_IMPRESION' ).
      o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_doc ).
      o_alv->set_seleccion( CHANGING t_tabla = i_doc ).
    ELSEIF p_colo = 'X'.
      o_alv->get_datos_layout( EXPORTING reordenar_tabla = 'X' tabla_ref = 'X' CHANGING t_tabla = i_colores ).
      o_alv->set_seleccion( CHANGING t_tabla = i_colores ).

    ENDIF.

    i_col = o_alv->get_columnas( ).
    DELETE i_col WHERE campo = 'CHECK' OR campo = 'LIGHTS' OR campo = 'TIPO' OR campo = 'FICHERO' OR campo = 'MESSAGE'.

    IF p_list = 'X'.
      LOOP AT i_lm ASSIGNING FIELD-SYMBOL(<lm>).
        <lm>-fichero = generar_linea( datos = <lm> ).
      ENDLOOP.
    ELSEIF p_docu = 'X'.
      LOOP AT i_doc ASSIGNING FIELD-SYMBOL(<doc>).
        <doc>-fichero = generar_linea( datos = <doc> ).
      ENDLOOP.
    ELSEIF p_colo = 'X'.
      LOOP AT i_colores ASSIGNING FIELD-SYMBOL(<color>).
        <color>-fichero = generar_linea( datos = <color> ).
      ENDLOOP.
    ENDIF.

    IF p_grabar = 'X'.
      generar_fichero( grabar = 'X' ).
    ENDIF.

    IF p_ftp = 'X'.
      grabar_ftp( ).
    ENDIF.

    o_alv->show( ).
  ENDMETHOD.

  METHOD get_lm.
    DATA l_listado TYPE t_lm.

    SELECT mara~matnr, mara~mtart AS mtart_c,
           makt~maktx,
           mast~werks AS werks_c, mast~stlnr, mast~stlan, mast~stlal
      FROM mast JOIN mara ON mast~matnr = mara~matnr
     LEFT OUTER JOIN makt ON  makt~matnr = mara~matnr
                          AND makt~spras = @sy-langu
      INTO TABLE @DATA(i_mast)
     WHERE mast~matnr IN @s_matnr
       AND mast~werks IN @s_werks
       AND mast~stlan IN @s_stlan
       AND mast~stlal IN @s_stlal
       AND mara~mtart IN @s_mtart.

    DATA(o_lm) = NEW zcl_ap_lm( ).
    o_prog->o_sgpi->get_filas_tabla( i_mast[] ).
    LOOP AT i_mast ASSIGNING FIELD-SYMBOL(<mast>).
      sgpi_texto( texto1 = 'Buscando componentes'(pda) cant_porc = 100 ).

      CLEAR l_listado.
      MOVE-CORRESPONDING <mast> TO l_listado.
      SELECT bmeng bmein stlst FROM stko
      INTO CORRESPONDING FIELDS OF l_listado
      UP TO 1 ROWS
           WHERE stlty = 'M'
             AND stlnr = <mast>-stlnr
             AND stlal = <mast>-stlal
             AND loekz = ''
      ORDER BY PRIMARY KEY.
      ENDSELECT.
      l_listado-bmeng_div_1000 = l_listado-bmeng / 1000.

      l_listado-tipo           = 'CAB'.
      APPEND l_listado TO i_lm.

      o_lm->get_lista( EXPORTING  matnr                = <mast>-matnr
                               werks                = <mast>-werks_c
                               stlal                = <mast>-stlal
                               stlan                = <mast>-stlan
                               mehrs                = '' " Sólo primer nivel
                               fecha                = sy-datum
                               menge                = 1000
                    EXCEPTIONS no_existe_material   = 1
                               error_al_explosionar = 2
                               OTHERS               = 3 ).
      IF sy-subrc = 0.
        LOOP AT o_lm->i_stb ASSIGNING FIELD-SYMBOL(<stb>) WHERE idnrk IN s_idnrk.
*                                                         AND POSTP = 'L'. "Sólo posiciones de almacén
          l_listado-ordlm = sy-tabix.
          MOVE-CORRESPONDING <stb> TO l_listado.
          IF <stb>-postp <> 'L' AND l_listado-ojtxp IS INITIAL.
            l_listado-ojtxp = <stb>-potx1.
          ENDIF.

          l_listado-tipo = 'DET'.
          APPEND l_listado TO i_lm.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    SORT i_lm BY matnr
                      werks_c
                      stlan
                      stlal
                      ordlm.
  ENDMETHOD.

  METHOD get_docu.
    DATA l_doc TYPE t_doc.

    SELECT dokar, doknr, dokvr, doktl, werks, tprin, prsid,
           shtdi, prare, prare_uom, settn
           FROM zvcxi_pxe_td200
             INTO TABLE @DATA(i_td200)
    WHERE werks IN @s_werks
      AND dokar IN @s_dokar
      AND doknr IN @s_doknr
      AND tprin IN @s_tprin
      ORDER BY PRIMARY KEY.

* Sólo queremos la última versión.
    LOOP AT i_td200 ASSIGNING FIELD-SYMBOL(<td200>).
      DATA(l_last_doknr) = ''.
      AT END OF doknr.
        l_last_doknr = 'X'.
      ENDAT.
      IF l_last_doknr <> 'X'.
        CONTINUE.
      ENDIF.

      CLEAR l_doc.
      MOVE-CORRESPONDING <td200> TO l_doc.
      l_doc-maktx          = get( tabla = 'MAKT' clave = l_doc-settn ).
      l_doc-tipo           = 'CAB'.
      l_doc-area_impresion = l_doc-prare * 100.
      APPEND l_doc TO i_doc.

      SELECT cinkn, tink,  colco, covrg, matnr, apwgt, apwgt_uom
         FROM zvcxi_pxe_td210
               INTO TABLE @DATA(i_td210)
      WHERE dokar = @l_doc-dokar
        AND doknr = @l_doc-doknr
        AND dokvr = @l_doc-dokvr
        AND doktl = @l_doc-doktl
        ORDER BY cinkn.

      LOOP AT i_td210 ASSIGNING FIELD-SYMBOL(<td210>).
        MOVE-CORRESPONDING <td210> TO l_doc.
        l_doc-tipo      = 'DET'.
        l_doc-cobertura = l_doc-covrg * l_doc-area_impresion.

        SELECT matnr FROM zvcxi_pxs_td121
          INTO l_doc-matnr
          UP TO 1 ROWS
         WHERE werks  = l_doc-werks
           AND colco  = l_doc-colco
           AND tprin =  l_doc-tprin
           AND valfr <= sy-datum
        ORDER BY valfr DESCENDING.
        ENDSELECT.

        APPEND l_doc TO i_doc.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.

  METHOD get_colores.

    SELECT zvcxi_pxs_td121~*,
           mara~mtart,
           makt~maktx
      FROM zvcxi_pxs_td121 JOIN mara ON zvcxi_pxs_td121~matnr = mara~matnr
     LEFT OUTER JOIN makt ON  makt~matnr = mara~matnr
                          AND makt~spras = @sy-langu
             INTO CORRESPONDING FIELDS OF TABLE @i_colores
     WHERE zvcxi_pxs_td121~matnr IN @s_matnr
       AND zvcxi_pxs_td121~werks IN @s_werks
      ORDER BY zvcxi_pxs_td121~matnr, zvcxi_pxs_td121~werks.

* Sólo queremos la última versión.
    LOOP AT i_colores ASSIGNING FIELD-SYMBOL(<color>).
      <color>-tipo = 'CAB'.
    ENDLOOP.
  ENDMETHOD.

  METHOD get_valores.
    DATA l_valor TYPE text40.

    LOOP AT i_col ASSIGNING FIELD-SYMBOL(<col>).
      ASSIGN COMPONENT <col>-campo OF STRUCTURE datos TO FIELD-SYMBOL(<fs>).
      IF sy-subrc = 0.
        WRITE <fs> TO l_valor. " EC*
        <col>-aux3 = l_valor.
      ENDIF.
    ENDLOOP.

    CALL FUNCTION 'Z_POPUP_ALV_AP'
      EXPORTING
        titulo       = 'Valores'
        botones      = 'OK'
        campos_noout = 'COLUM,DESCR,BEGDA,ENDDA,NOOUT,BORRAR,INPUT,DOSUM,NO_CERO,F4,NO_VARIANTE,CAMBIA_DECIMALES,DECIMALES,ANCHO,AUX1,AUX2'
        campos_texto = 'AUX3=Valor'
      TABLES
        t_datos      = i_col.
  ENDMETHOD.

  METHOD generar_linea.
    DATA: l_par   TYPE string,
          l_campo TYPE string,
          l_valor TYPE text40.

    CLEAR linea.
    IF p_list = 'X'.
      l_par = 'LM'.
    ELSEIF p_docu = 'X'.
      l_par = 'DOC'.
    ELSEIF p_colo = 'X'.
      l_par = 'COLOR'.
    ELSE.
      MESSAGE 'No implementado generación de CSV para esta opción' TYPE 'E'.
    ENDIF.
    ASSIGN COMPONENT 'TIPO' OF STRUCTURE datos TO FIELD-SYMBOL(<tipo>).
    l_par = |PLANTILLA_{ l_par }_{ <tipo> }|.
    ASSIGN o_par->i_par[ campo = l_par ] TO FIELD-SYMBOL(<par>).
    IF sy-subrc <> 0.
      MESSAGE |Parametrice definición de línea { l_par }| TYPE 'E'.
    ENDIF.

    DATA(variables) = zcl_ap_regexp=>buscar_patron( string = CONV #( <par>-atributo1 ) patron = '\{([^}]*)\}' ).

    linea = <par>-atributo1.
    LOOP AT variables ASSIGNING FIELD-SYMBOL(<var>).
      DATA(l_long) = strlen( <var> ) - 2.
      l_campo = <var>+1(l_long).
      <var> = to_upper( <var> ).
      ASSIGN COMPONENT l_campo OF STRUCTURE datos TO FIELD-SYMBOL(<valor>).
      IF sy-subrc = 0.
        WRITE <valor> TO l_valor.
        CONDENSE l_valor.
        DESCRIBE FIELD <valor> TYPE DATA(l_tipo).
        IF l_tipo = 'D'.
          REPLACE ALL OCCURRENCES OF '.' IN l_valor WITH '/'.
        ELSEIF l_tipo = 'P'.
          REPLACE ALL OCCURRENCES OF '.' IN l_valor WITH ''.
        ENDIF.
        REPLACE ALL OCCURRENCES OF <var> IN linea WITH l_valor.
      ELSE.
        MESSAGE |No existe campo { l_campo } del parámetro { l_par }| TYPE 'S'.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD generar_fichero.
    DATA l_par   TYPE string.

    CLEAR: string, xstring, i_fichero.
    IF p_list = 'X'.
      l_par = 'LM'.
      LOOP AT i_lm ASSIGNING FIELD-SYMBOL(<lm>).
        APPEND <lm>-fichero TO i_fichero.
      ENDLOOP.
    ELSEIF p_docu = 'X'.
      l_par = 'DOC'.
      LOOP AT i_doc ASSIGNING FIELD-SYMBOL(<doc>).
        APPEND <doc>-fichero TO i_fichero.
      ENDLOOP.
    ELSEIF p_colo = 'X'.
      l_par = 'COLOR'.
      LOOP AT i_colores ASSIGNING FIELD-SYMBOL(<col>).
        APPEND <col>-fichero TO i_fichero.
      ENDLOOP.
    ENDIF.

    l_par = |CABECERA_{ l_par }|.
    ASSIGN o_par->i_par[ campo = l_par ] TO FIELD-SYMBOL(<par>).
    IF sy-subrc = 0.
      INSERT <par>-atributo1 INTO i_fichero INDEX 1.
    ENDIF.


    CLEAR string.
    LOOP AT i_fichero ASSIGNING FIELD-SYMBOL(<linea>).
      IF string IS INITIAL.
        string = <linea>.
      ELSE.
        CONCATENATE string <linea> INTO string SEPARATED BY cl_abap_char_utilities=>cr_lf.
      ENDIF.
    ENDLOOP.

    IF p_colo = 'X'.
*El formato de colores será un XLSX fijo
      xstring = get_xlsx_colores( ).
    ELSE.
      xstring = zcl_ap_string=>string2xstring( string ).
    ENDIF.

    IF NOT p_fiche IS INITIAL.
      DATA(l_fichero) = p_fiche.
      IF zcl_ap_ficheros=>get_directorio_fichero( p_fiche ) = ''.
        DATA(l_dialogo) = 'X'.
      ENDIF.
    ELSE.
      IF p_list = 'X'.
        l_fichero = 'formula.txt'.
      ELSE.
        l_fichero = 'diseño_v1.txt'.
      ENDIF.
      l_dialogo = 'X'.
    ENDIF.
    IF sy-batch = 'X' AND l_dialogo = 'X'.
      CLEAR l_dialogo.
    ENDIF.

    IF popup = 'X'.
      zcl_ap_ficheros=>visualizar( fichero = l_fichero xstring = xstring ).
    ENDIF.

    IF grabar = 'X'.
      zcl_ap_ficheros=>grabar_xstring( fichero = l_fichero xstring = xstring dialogo = l_dialogo ).
    ENDIF.
  ENDMETHOD.

  METHOD grabar_ftp.
    DATA: l_xstring TYPE xstring,
          l_dir     TYPE string,
          l_fichero TYPE string.

    generar_fichero( IMPORTING xstring = l_xstring ).

    DATA(o_ftp) = NEW zcl_ap_ftp( ).
    o_ftp = NEW #( ).
    o_ftp->connect( user = p_user password = p_pass host = p_dftp ).
    IF NOT o_ftp->error_conexion IS INITIAL.
      o_ftp->disconnect( ).
      MESSAGE 'Error de conexión FTP' TYPE 'E'.
    ELSE.
      l_dir = p_ddir.
      IF zcl_ap_ficheros=>ultima_letra_ruta( l_dir ) = '/'.
        CONCATENATE p_ddir p_fiche INTO l_fichero.
      ELSE.
        CONCATENATE p_ddir '/' p_fiche INTO l_fichero.
      ENDIF.

      DATA(l_message) = o_ftp->upload_binary_file( fichero = l_fichero xstring = l_xstring ).
      o_ftp->disconnect( ).
      IF NOT l_message IS INITIAL.
        MESSAGE l_message TYPE 'E'.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD get_xlsx_colores.
    TYPES: BEGIN OF t_xlsx,
             werks TYPE mast-werks,
             colco TYPE zvcxi_pxs_td121-colco,
             tprin TYPE zvcxi_pxs_td121-tprin,
             valfr TYPE zvcxi_pxs_td121-valfr,
             matnr TYPE matnr,
             maktx TYPE maktx,
           END OF t_xlsx.
    DATA i_xlsx TYPE TABLE OF t_xlsx.

    MOVE-CORRESPONDING i_colores TO i_xlsx.

    DATA(o_xlsx) = NEW zcl_ap_abap2xls( ).

    DATA(lt_field_catalog) = zcl_excel_common=>get_fieldcatalog( ip_table = i_xlsx ).
    READ TABLE lt_field_catalog ASSIGNING FIELD-SYMBOL(<cat>) WITH KEY fieldname = 'MAKTX'.
    IF sy-subrc = 0.
      <cat>-scrtext_s = 'Descripción'.
      <cat>-scrtext_m =
      <cat>-scrtext_l = 'Descripción Material'.
    ENDIF.
    o_xlsx->set_tabla( tabla = i_xlsx
                       it_field_catalog = lt_field_catalog
                      ).

    o_xlsx->get_xstring( IMPORTING xstring = xstring ).
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #( status       = 'INICIO_DYN'
                  status_prog  = 'ZAP_STATUS'
                  no_param     = 'X'
                  prog         = 'INKMAKER'
                  guardar_logz = '' ).

  PERFORM add_button IN PROGRAM zap_status USING 'M01' 'Parámetros' '' ''.

  o_prog->initialization_i( CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN OUTPUT.
  zcl_ap_dynpro=>screen_visible(  group1 = 'LM' variable = p_list ).
  zcl_ap_dynpro=>screen_visible(  group1 = 'DOC' variable = p_docu ).
  zcl_ap_dynpro=>screen_visible(  group1 = 'FTP' variable = p_ftp ).
  zcl_ap_dynpro=>screen_visible(  group1 = 'MAT' variable = p_docu variable_inv = 'X' ).

  o_prog->handle = COND #( WHEN p_list = 'X' THEN 'L'
                           WHEN p_docu = 'X' THEN 'D'
                           WHEN p_colo = 'X' THEN 'C' ).
  IF o_prog->o_alv IS INITIAL OR o_prog->handle <> o_prog->aux1.
    o_prog->aux1 = o_prog->handle.
    IF NOT o_prog->o_alv IS INITIAL.
      o_prog->o_alv->free( ).
      CLEAR o_prog->o_alv.
    ENDIF.

    o_prog->aux1  = COND #( WHEN p_list = 'X' THEN 'I_LM'
                            WHEN p_docu = 'X' THEN 'I_DOC'
                            WHEN p_colo = 'X' THEN 'I_COLORES' ).

    o_prog->o_alv = NEW #( status           = 'STANDARD_ALV_DYN'
                         status_prog        = 'ZAP_STATUS'
                         top_of_page_auto   = 'X'
                         top_of_page_titulo = 'X'
                         handle             = o_prog->handle
                         o_dev              = o_prog
                         tabla              = CONV #( o_prog->aux1 ) ).
    p_vari = o_prog->o_alv->get_default_layout( ).
  ENDIF.

  LOOP AT SCREEN.
    IF screen-name = 'P_PASS'.
      screen-invisible = '1'.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.


AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_prog->o_alv->get_f4_layout( ).

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'ONLI'.
      o_prog->validar_seleccion_obligatoria( campos_or = '*' msgty = 'W' ).
      o_prog->validar_centro( r_werks = s_werks[] obligatorio = 'X' ).
      IF p_grabar = 'X' OR p_ftp = 'X'.
        IF p_fiche IS INITIAL.
          MESSAGE 'Debe informar nombre de fichero' TYPE 'E'.
        ENDIF.
      ENDIF.
      IF p_ftp = 'X'.
        IF p_dftp IS INITIAL.
          MESSAGE 'Informe dirección FTP' TYPE 'E'.
        ENDIF.
        IF p_user IS INITIAL.
          MESSAGE 'Informe usuario FTP' TYPE 'E'.
        ENDIF.
      ENDIF.
    WHEN OTHERS.
      o_prog->at_selection( ).
  ENDCASE.

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
