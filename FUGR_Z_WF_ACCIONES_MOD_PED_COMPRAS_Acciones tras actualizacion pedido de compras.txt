FUNCTION z_wf_acciones_mod_ped_compras .
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     VALUE(EBELN) TYPE  EKKO-EBELN
*"----------------------------------------------------------------------
  DATA: l_ekko TYPE ekko.


*  zcl_ap_log=>set_log( proceso = 'WP_MOD_PC' clave = ebeln p1 = 'log' ).

  DATA(l_udate) = sy-datum.
  DATA(l_utime) = sy-uzeit.

* No queremos que haya dos WF con el mismo pedido a la vez
  IF zcl_ap_utils=>bloquear_programa( cprog = 'WF_MOD_PC-' && ebeln intentos = 1 espera = 0 ).
    RETURN.
  ENDIF.

* Esperamos a grabado por si acaso es creación
  IF NOT sy-batch IS INITIAL OR sy-tcode IS INITIAL.
* Como mucho sólo los últimos 30 segundos
    l_utime = l_utime - 30.

    WAIT UP TO 5 SECONDS.
  ELSE.
    CLEAR l_utime.
  ENDIF.
  DO 5 TIMES.
    SELECT SINGLE * FROM ekko
      INTO CORRESPONDING FIELDS OF l_ekko
     WHERE ebeln = ebeln.
    IF sy-subrc NE 0.
      WAIT UP TO 1 SECONDS.
    ELSE.
      EXIT.
    ENDIF.
  ENDDO.
  IF l_ekko IS INITIAL.
    zcl_ap_log=>set_log( proceso = 'WF_MOD_PC' clave = ebeln p1 = 'No existe pedido. salimos' ).
    RETURN.
  ENDIF.

* Recuperamos datos de reparto para forzar actualización de tabla ZVBEP
  zcl_ap_log=>set_log( proceso = 'WF_MOD_PC' clave = ebeln p1 = 'Se van a actualizar estados de pedido:' p2 = ebeln msgty = 'I' ).
  DATA(o_sd) = NEW zhcl_sd_core( ).
  DATA(i_rep) = o_sd->get_repartos( r_vbeln     = VALUE #( ( option = 'EQ' sign = 'I' low = ebeln ) )
                                    historico = 'X'
                                    add_pedidos_traslado = 'X'
                                    add_pedidos_ventas = ''
                                    datos_medidas = ''
                                    datos_interlocutores = ''
                                    datos_stocks = 'X'
                                    origen = 'WF_PC' ).



  zcl_ap_utils=>desbloquear_programa( cprog = 'WF_MOD_PC-' && ebeln  ).


ENDFUNCTION.
