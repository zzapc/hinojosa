*&---------------------------------------------------------------------*
*&  Include           ZSCM042_CLS
*&---------------------------------------------------------------------*
*--------------------------------------------------------------------*
* Clase para eventos ALV.
*--------------------------------------------------------------------*
CLASS lcl_event_receiver DEFINITION.

  PUBLIC SECTION.
    METHODS:
      handle_toolbar FOR EVENT toolbar OF cl_gui_alv_grid
        IMPORTING e_object
                  e_interactive,

      handle_user_command FOR EVENT user_command OF cl_gui_alv_grid
        IMPORTING sender
                  e_ucomm,

      handle_data_changed_finished FOR EVENT data_changed_finished OF cl_gui_alv_grid
        IMPORTING e_modified
                  et_good_cells,

      handle_data_changed_2000 FOR EVENT data_changed OF cl_gui_alv_grid
        IMPORTING er_data_changed
                  e_onf4
                  e_onf4_before
                  e_onf4_after
                  e_ucomm
                  sender,

      handle_data_changed_2100 FOR EVENT data_changed OF cl_gui_alv_grid
        IMPORTING er_data_changed
                  e_onf4
                  e_onf4_before
                  e_onf4_after
                  e_ucomm
                  sender.

*      handle_delayed_changed_sel_cb FOR EVENT delayed_changed_sel_callback OF cl_gui_alv_grid,

*      handle_hotspot_click FOR EVENT hotspot_click OF cl_gui_alv_grid
*        IMPORTING
*          e_row_id
*          e_column_id
*          es_row_no,
*
ENDCLASS.                    "lcl_event_receiver DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_event_receiver IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_event_receiver IMPLEMENTATION.
*--------------------------------------------------------------------*
*  METHOD handle_toolbar.
*--------------------------------------------------------------------*
  METHOD handle_toolbar.

    DATA: ls_button  TYPE stb_button,
          ls_toolbar TYPE stb_button.

*   Añadir separador en toolbar.
    CLEAR ls_toolbar.
    MOVE 3 TO ls_toolbar-butn_type.
    APPEND ls_toolbar TO e_object->mt_toolbar.

*   "Seleccionar todo.
    CLEAR ls_toolbar.
    MOVE 'SEL_ALL'    TO ls_toolbar-function.
*    MOVE text-b02     TO ls_toolbar-text.
    MOVE text-q02     TO ls_toolbar-quickinfo.
    MOVE icon_select_all TO ls_toolbar-icon.
    APPEND ls_toolbar TO e_object->mt_toolbar.

*   "Deseleccionar todo.
    CLEAR ls_toolbar.
    MOVE 'DES_ALL'    TO ls_toolbar-function.
*    MOVE text-b03     TO ls_toolbar-text.
    MOVE text-q03     TO ls_toolbar-quickinfo.
    MOVE icon_deselect_all TO ls_toolbar-icon.
    APPEND ls_toolbar TO e_object->mt_toolbar.

*   "Refrescar.
    CLEAR ls_toolbar.
    MOVE 'REFRESH'    TO ls_toolbar-function.
*    MOVE text-b04     TO ls_toolbar-text.
    MOVE text-q04     TO ls_toolbar-quickinfo.
    MOVE icon_refresh TO ls_toolbar-icon.
    APPEND ls_toolbar TO e_object->mt_toolbar.

*   Añadir separador en toolbar.
    CLEAR ls_toolbar.
    MOVE 3 TO ls_toolbar-butn_type.
    APPEND ls_toolbar TO e_object->mt_toolbar.

*   "Procesar Desvío".
    CLEAR ls_toolbar.
    MOVE 'DESVIO'     TO ls_toolbar-function.
    MOVE text-b01     TO ls_toolbar-text.
    MOVE text-q01     TO ls_toolbar-quickinfo.
    MOVE icon_delivery TO ls_toolbar-icon.
*    MOVE icon_execute_object TO ls_toolbar-icon.
    APPEND ls_toolbar TO e_object->mt_toolbar.

  ENDMETHOD.
*--------------------------------------------------------------------*
*  METHOD handle_user_command.
*--------------------------------------------------------------------*
  METHOD handle_user_command.

    CASE e_ucomm.
      WHEN 'SEL_ALL'.
        PERFORM click_selection USING 'X' CHANGING gt_outtab gref_alv.
      WHEN 'DES_ALL'.
        PERFORM click_selection USING ' ' CHANGING gt_outtab gref_alv.
      WHEN 'REFRESH'.
        PERFORM alv_refresh_data CHANGING gt_outtab gt_outtab2100 gref_alv.
      WHEN 'DESVIO'.
        PERFORM procesar_desvios CHANGING gt_outtab gref_alv.
*        PERFORM alv_refresh_data CHANGING gt_outtab gt_outtab2100 gref_alv.
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.
*--------------------------------------------------------------------*
* METHOD handle_data_changed_finished
*--------------------------------------------------------------------*
  METHOD handle_data_changed_finished.

    DATA: BEGIN OF ls_stable,
            row TYPE c VALUE 'X',
            col TYPE c VALUE 'X',
          END OF ls_stable.


    IF e_modified EQ abap_true.
      LOOP AT et_good_cells INTO DATA(ls_good_cells).

        TRY .
            DATA(wa_outtab) = gt_outtab[ ls_good_cells-row_id ].
          CATCH cx_root.
        ENDTRY.

        CASE ls_good_cells-fieldname.
          WHEN 'SEL'.
            IF wa_outtab IS NOT INITIAL.
              CASE ls_good_cells-value.
                WHEN 'X'.
                  "Al seleccionar una posición, marcar todas las posiciones de entregas del mismo transporte.
                  LOOP AT gt_outtab ASSIGNING FIELD-SYMBOL(<fs_outtab>) WHERE tknum EQ wa_outtab-tknum
                                                                          AND sel EQ space.
                    <fs_outtab>-sel = 'X'.
                  ENDLOOP.
                  UNASSIGN <fs_outtab>.

                WHEN space.
                  ASSIGN gt_outtab[ ls_good_cells-row_id ] TO <fs_outtab>.
                  IF <fs_outtab> IS ASSIGNED.
*                    CLEAR <fs_outtab>-cant_desvio.
                  ENDIF.

                WHEN OTHERS.
              ENDCASE.
            ENDIF.

          WHEN OTHERS.
        ENDCASE.
      ENDLOOP.

      PERFORM alv_fix_cwidth CHANGING gref_alv.

      CALL METHOD gref_alv->refresh_table_display
        EXPORTING
          is_stable = ls_stable.
    ENDIF.

  ENDMETHOD.
*--------------------------------------------------------------------*
* METHOD handle_data_changed_2000
*--------------------------------------------------------------------*
  METHOD handle_data_changed_2000.

    DATA: BEGIN OF ls_stable,
            row TYPE c VALUE 'X',
            col TYPE c VALUE 'X',
          END OF ls_stable.

    DATA: ls_mod_cells  TYPE lvc_s_modi.
    DATA: lv_flag_error TYPE xfeld.

    DATA: lv_ret          TYPE i,
          lv_menge_desvio TYPE lfimg,
          lv_menge_pallet TYPE lfimg,
          lv_cmenge1      TYPE c LENGTH 20,
          lv_cmenge2      TYPE c LENGTH 20.


*  *For debugging checks*
*    ASSIGN er_data_changed->mp_mod_rows->* TO FIELD-SYMBOL(<fs_modtab>).

    LOOP AT er_data_changed->mt_mod_cells INTO ls_mod_cells.

      TRY .
          ASSIGN gt_outtab[ ls_mod_cells-row_id ] TO FIELD-SYMBOL(<fs_outtab>).  "Datos línea dynpro ALV 2000
        CATCH cx_root.
      ENDTRY.

      IF <fs_outtab> IS ASSIGNED.

        CASE ls_mod_cells-fieldname.
          WHEN 'CANT_DESVIO'.

            REPLACE ALL OCCURRENCES OF '.' IN ls_mod_cells-value WITH space.
            REPLACE ALL OCCURRENCES OF ',' IN ls_mod_cells-value WITH '.'.
            lv_menge_desvio = CONV lfimg( ls_mod_cells-value ).

            "Chequeo de cantidad introducida en cantidad completa de pallet.
            IF <fs_outtab> IS NOT INITIAL AND <fs_outtab>-lfimg GT lv_menge_desvio.
              PERFORM check_pallet_completo USING <fs_outtab>-matnr
                                                  lv_menge_desvio
                                                  <fs_outtab>-vrkme
                                            CHANGING lv_ret
                                                     lv_menge_pallet.
*              IF lv_ret NE 0.
              "Revisar si existe alguna UA en el picking con esa cantidad para desviar.
              DATA: lt_ret_pick TYPE bapiret2_tt,
                    lt_exidv    TYPE hum_exidv_t.

              FREE: lt_ret_pick, lt_exidv.
              "Chequear si existe(n) UA(s) con misma cantidad de desvío.
              CALL FUNCTION 'Z_SCM042_LEER_UA_ZPICKING'
                EXPORTING
                  i_vbeln       = <fs_outtab>-vbeln
                  i_posnr       = <fs_outtab>-posnr
                  i_uecha       = <fs_outtab>-uecha
                  i_matnr       = <fs_outtab>-matnr
                  i_charg       = <fs_outtab>-charg
                  i_cant_desvio = lv_menge_desvio
                IMPORTING
                  et_return     = lt_ret_pick
                  et_exidv      = lt_exidv.

              IF lt_exidv IS INITIAL. "OR line_exists( lt_ret_pick[ type = 'E' ] ).
                "Tampoco hay UA con esa cantidad, entonces: error.

                WRITE lv_menge_desvio TO lv_cmenge1 UNIT <fs_outtab>-vrkme.
                CONDENSE lv_cmenge1.
                WRITE lv_menge_pallet TO lv_cmenge2 UNIT <fs_outtab>-vrkme.
                CONDENSE lv_cmenge2.

                "Cantidad desvío no cabe en pallet completo o no coincide UA.
                CALL METHOD er_data_changed->add_protocol_entry
                  EXPORTING
                    i_msgid     = 'ZSCM042'
                    i_msgty     = 'E'
                    i_msgno     = '017'
                    i_msgv1     = lv_cmenge1
                    i_msgv2     = lv_cmenge2
*                   i_msgv3     =
*                   i_msgv4     =
                    i_fieldname = ls_mod_cells-fieldname
                    i_row_id    = ls_mod_cells-row_id.
*                   i_tabix     =.

                lv_flag_error = 'X'.
              ENDIF.
*              ENDIF.
            ENDIF.

            "Chequeo de cantidad introducida es mayor.
            IF <fs_outtab> IS NOT INITIAL AND <fs_outtab>-lfimg LT lv_menge_desvio.
              WRITE lv_menge_desvio TO lv_cmenge1 UNIT <fs_outtab>-vrkme.
              CONDENSE lv_cmenge1.
              WRITE <fs_outtab>-lfimg TO lv_cmenge2 UNIT <fs_outtab>-vrkme.
              CONDENSE lv_cmenge2.

              "Cantidad desvío es mayor que cantidad de posición".
              CALL METHOD er_data_changed->add_protocol_entry
                EXPORTING
                  i_msgid     = 'ZSCM042'
                  i_msgty     = 'E'
                  i_msgno     = '018'
                  i_msgv1     = lv_cmenge1
                  i_msgv2     = lv_cmenge2
*                 i_msgv3     =
*                 i_msgv4     =
                  i_fieldname = ls_mod_cells-fieldname
                  i_row_id    = ls_mod_cells-row_id.
*                   i_tabix     =.

              lv_flag_error = 'X'.
            ENDIF.

            "Chequeo de cantidad introducida cero.
            IF <fs_outtab> IS NOT INITIAL AND lv_menge_desvio IS INITIAL.
              "Cantidad desvío es cero".
              CALL METHOD er_data_changed->add_protocol_entry
                EXPORTING
                  i_msgid     = 'ZSCM042'
                  i_msgty     = 'E'
                  i_msgno     = '019'
                  i_fieldname = ls_mod_cells-fieldname
                  i_row_id    = ls_mod_cells-row_id.
*                   i_tabix     =.

              lv_flag_error = 'X'.
            ENDIF.

          WHEN OTHERS.
        ENDCASE.
        UNASSIGN <fs_outtab>.
      ENDIF.

    ENDLOOP.

    "Mostrar errores protocolo.
    IF lv_flag_error EQ 'X'.
      CALL METHOD er_data_changed->display_protocol.
*        EXPORTING
*          i_container        =
*          i_display_toolbar  =
*          i_optimize_columns =.
    ENDIF.

    PERFORM alv_fix_cwidth CHANGING gref_alv.

    CALL METHOD gref_alv->refresh_table_display   "ALV principal dynpro 2000.
      EXPORTING
        is_stable = ls_stable.

  ENDMETHOD.

*--------------------------------------------------------------------*
* METHOD handle_data_changed_2100
*--------------------------------------------------------------------*
  METHOD handle_data_changed_2100.

    DATA: BEGIN OF ls_stable,
            row TYPE c VALUE 'X',
            col TYPE c VALUE 'X',
          END OF ls_stable.

    DATA: ls_mod_cells  TYPE lvc_s_modi.
    DATA: lv_flag_error TYPE xfeld,
          lv_subrc      TYPE sy-subrc.


*  *For debugging checks*
*    ASSIGN er_data_changed->mp_mod_rows->* TO FIELD-SYMBOL(<fs_modtab>).

    LOOP AT er_data_changed->mt_mod_cells INTO ls_mod_cells.

      TRY .
          ASSIGN gt_outtab2100[ ls_mod_cells-row_id ] TO FIELD-SYMBOL(<fs_outtab>).  "Datos línea dynpro 2100.
        CATCH cx_root.
      ENDTRY.

      IF <fs_outtab> IS ASSIGNED.

*        CALL METHOD er_data_changed->get_cell_value
*          EXPORTING
*            i_row_id    = ls_good_cells-row_id
*            i_fieldname = ls_good_cells-fieldname
*          IMPORTING
*            e_value     = lv_value.

        CASE ls_mod_cells-fieldname.
          WHEN 'KUNWE_DEST'.

            CLEAR: <fs_outtab>-lgort_dest,
                   <fs_outtab>-flagcm_dest.

*            CALL METHOD er_data_changed->modify_cell
*              EXPORTING
*                i_row_id    = ls_good_cells-row_id
*                i_fieldname = ls_good_cells-fieldname
*                i_value     = lv_value.

            IF ls_mod_cells-value IS NOT INITIAL.

              <fs_outtab>-kunwe_dest = |{ ls_mod_cells-value ALPHA = IN }|.

              CALL FUNCTION 'Z_SCM042_CLIENTE_CM'
                EXPORTING
                  i_kunnr = <fs_outtab>-kunwe_dest
                  i_vkorg = <fs_outtab>-vkorg
                IMPORTING
                  e_lgort = <fs_outtab>-lgort_dest.
*                  e_werks =

              IF <fs_outtab>-lgort_dest IS NOT INITIAL.
                <fs_outtab>-flagcm_dest = abap_true.
              ENDIF.

              "Validación destinatario introducido:
              IF <fs_outtab>-flagcm EQ space AND <fs_outtab>-flagcm_dest EQ space.
                "Cliente introducido no es CM."
                CALL METHOD er_data_changed->add_protocol_entry
                  EXPORTING
                    i_msgid     = 'ZSCM042'
                    i_msgty     = 'E'
                    i_msgno     = '004'
                    i_msgv1     = ls_mod_cells-value
*                   i_msgv2     =
*                   i_msgv3     =
*                   i_msgv4     =
                    i_fieldname = ls_mod_cells-fieldname
                    i_row_id    = ls_mod_cells-row_id.
*                   i_tabix     =.

                lv_flag_error = 'X'.
              ENDIF.

              IF <fs_outtab>-flagcm EQ 'X' AND <fs_outtab>-flagcm_dest EQ 'X'.
                "Cliente introducido también es CM."
                CALL METHOD er_data_changed->add_protocol_entry
                  EXPORTING
                    i_msgid     = 'ZSCM042'
                    i_msgty     = 'E'
                    i_msgno     = '005'
                    i_msgv1     = ls_mod_cells-value
*                   i_msgv2     =
*                   i_msgv3     =
*                   i_msgv4     =
                    i_fieldname = ls_mod_cells-fieldname
                    i_row_id    = ls_mod_cells-row_id.
*                   i_tabix     =.

                lv_flag_error = 'X'.
              ENDIF.
            ENDIF.

          WHEN 'LGORT_DEST'.
            CLEAR: <fs_outtab>-kunwe_dest,
                   <fs_outtab>-flagcm_dest.

            IF ls_mod_cells-value IS NOT INITIAL.

              <fs_outtab>-lgort_dest = ls_mod_cells-value.
              CLEAR lv_subrc.

              CALL FUNCTION 'Z_SCM042_ALMACEN_CM'
                EXPORTING
                  i_lgort = <fs_outtab>-lgort_dest
                  i_werks = <fs_outtab>-werks
                IMPORTING
                  e_subrc = lv_subrc
                  e_kunnr = <fs_outtab>-kunwe_dest.

              IF lv_subrc EQ 0.
                <fs_outtab>-flagcm_dest = abap_true.
              ENDIF.

              "Validación almacén introducido:

              IF <fs_outtab>-flagcm EQ space AND <fs_outtab>-flagcm_dest EQ space.
                "Almacén introducido no es CM."
                CALL METHOD er_data_changed->add_protocol_entry
                  EXPORTING
                    i_msgid     = 'ZSCM042'
                    i_msgty     = 'E'
                    i_msgno     = '038'
                    i_msgv1     = ls_mod_cells-value
*                   i_msgv2     =
*                   i_msgv3     =
*                   i_msgv4     =
                    i_fieldname = ls_mod_cells-fieldname
                    i_row_id    = ls_mod_cells-row_id.
*                   i_tabix     =.

                lv_flag_error = 'X'.
              ENDIF.

              IF <fs_outtab>-flagcm EQ 'X' AND <fs_outtab>-flagcm_dest EQ 'X'.
                "Destino introducido también es CM."
                CALL METHOD er_data_changed->add_protocol_entry
                  EXPORTING
                    i_msgid     = 'ZSCM042'
                    i_msgty     = 'E'
                    i_msgno     = '039'
                    i_msgv1     = ls_mod_cells-value
*                   i_msgv2     =
*                   i_msgv3     =
*                   i_msgv4     =
                    i_fieldname = ls_mod_cells-fieldname
                    i_row_id    = ls_mod_cells-row_id.
*                   i_tabix     =.

                lv_flag_error = 'X'.
              ENDIF.

              IF lv_subrc EQ 0 AND <fs_outtab>-kunwe_dest IS INITIAL.
                "Almacén CM no tiene código cliente asociado"
                CALL METHOD er_data_changed->add_protocol_entry
                  EXPORTING
                    i_msgid     = 'ZSCM042'
                    i_msgty     = 'E'
                    i_msgno     = '040'
                    i_msgv1     = ls_mod_cells-value
*                   i_msgv2     =
*                   i_msgv3     =
*                   i_msgv4     =
                    i_fieldname = ls_mod_cells-fieldname
                    i_row_id    = ls_mod_cells-row_id.
*                   i_tabix     =.

                lv_flag_error = 'X'.
              ENDIF.
            ENDIF.

          WHEN OTHERS.
        ENDCASE.
        UNASSIGN <fs_outtab>.
      ENDIF.

    ENDLOOP.

    "Mostrar errores protocolo.
    IF lv_flag_error EQ 'X'.
      CALL METHOD er_data_changed->display_protocol.
*        EXPORTING
*          i_container        =
*          i_display_toolbar  =
*          i_optimize_columns =.
    ENDIF.

    PERFORM alv_fix_cwidth CHANGING gref_alv2100.

    CALL METHOD gref_alv2100->refresh_table_display   "ALV dynpro 2100.
      EXPORTING
        is_stable = ls_stable.

  ENDMETHOD.

**--------------------------------------------------------------------*
** METHOD handle_delayed_changed_cb
**--------------------------------------------------------------------*
*  METHOD handle_delayed_changed_sel_cb.
*
*    DATA: lt_row      TYPE lvc_t_roid,
*          lt_set_rows TYPE lvc_t_row.
*    DATA: ls_set_rows     TYPE LINE OF lvc_t_row.
*
*    CALL METHOD gref_alv->get_selected_rows
*      IMPORTING
*        et_row_no = lt_row.
*
*    IF lt_row IS NOT INITIAL.
*
*      LOOP AT lt_row INTO DATA(wa_row).
*        READ TABLE gt_outtab INTO DATA(wa_outtab) INDEX wa_row-row_id.
*        IF sy-subrc EQ 0.
*          LOOP AT gt_outtab INTO DATA(ls_outtab) WHERE vbeln EQ wa_outtab-vbeln.
*            ls_set_rows-index = sy-tabix.
*            APPEND ls_set_rows TO lt_set_rows.
*          ENDLOOP.
*        ENDIF.
*      ENDLOOP.
*    ENDIF.
*
*    IF lt_set_rows IS NOT INITIAL.
*
*      SORT lt_set_rows BY index.
*      DELETE ADJACENT DUPLICATES FROM lt_set_rows COMPARING index.
*
*      CALL METHOD gref_alv->set_selected_rows
*        EXPORTING
*          it_index_rows            = lt_set_rows
**         it_row_no                =
*          is_keep_other_selections = 'X'.
*    ENDIF.
*
*  ENDMETHOD.
**--------------------------------------------------------------------*
**  METHOD handle_hotspot_click.
**--------------------------------------------------------------------*
*  METHOD handle_hotspot_click.
*
*    READ TABLE gt_outtab INTO DATA(ls_outtab) INDEX es_row_no-row_id.
*    IF sy-subrc EQ 0.
*
*      CASE e_column_id-fieldname.
*
*        WHEN 'field'.
*          IF ls_outtab-field IS NOT INITIAL.
*            SET PARAMETER ID 'pid' FIELD ls_outtab-field.
*            CALL TRANSACTION 'tcode' AND SKIP FIRST SCREEN.
*          ENDIF.
*        WHEN OTHERS.
*      ENDCASE.
*    ENDIF.
*
*  ENDMETHOD.                    "handle_hotspot_click

ENDCLASS.                    "lcl_event_receiver IMPLEMENTATION

*--------------------------------------------------------------------*
* Class - data declarations.
*--------------------------------------------------------------------*
DATA: obj_event_receiver      TYPE REF TO lcl_event_receiver,
      obj_event_receiver_2100 TYPE REF TO lcl_event_receiver.
