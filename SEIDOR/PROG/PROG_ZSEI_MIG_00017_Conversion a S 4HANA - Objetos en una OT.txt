*---------------------------------------------------------------------*
* Report zsei_mig_00017
*---------------------------------------------------------------------*

REPORT zsei_mig_00017.

TABLES: e070.

SELECTION-SCREEN BEGIN OF BLOCK va1 WITH FRAME TITLE TEXT-001.
  SELECT-OPTIONS: p_req     FOR e070-trkorr.
SELECTION-SCREEN END OF BLOCK va1.

SELECTION-SCREEN BEGIN OF BLOCK files WITH FRAME TITLE TEXT-008.
  PARAMETERS: p_file1  LIKE file_table-filename.
  PARAMETERS: p_file2  LIKE file_table-filename.
SELECTION-SCREEN END OF BLOCK files.

TYPES:
  BEGIN OF ty_excel,
    orden      LIKE e070-trkorr,
    as4text    TYPE e07t-as4text,
    subtarea   TYPE vrsd_old-korrnum,
    objtyp1    LIKE vrsd-objtype,
    objname    LIKE vrsd-objname,
    top_object LIKE vrsd-objname,
  END   OF ty_excel,

  BEGIN OF ty_alv2,
    orden      LIKE e070-trkorr,
    as4text    TYPE e07t-as4text,
    subtarea   TYPE vrsd_old-korrnum,
    objtyp1    LIKE vrsd-objtype,
    objname    LIKE vrsd-objname,
    top_object LIKE vrsd-objname,
    orig_req   TYPE e070-trkorr,
    orig_task  TYPE vrsd_old-korrnum,
  END   OF ty_alv2,

  BEGIN OF ty_alv,
    objname    TYPE vrsd-objname,
    objtyp1    TYPE vrsd-objtype,
    orden      LIKE e070-trkorr,
    as4text    TYPE e07t-as4text,
    subtarea   TYPE vrsd_old-korrnum,
    top_object LIKE vrsd-objname,
  END   OF ty_alv.

DATA:
  lt_filetable   TYPE filetable,
  ls_filetable   LIKE LINE OF lt_filetable,
  lv_rc          TYPE i,
  lt_excel       TYPE TABLE OF ty_excel,
  ls_excel       LIKE LINE OF lt_excel,
  objtype        LIKE vrsd-objtype,
  lv_orden       TYPE vrsd_old-korrnum,
  lv_description TYPE text60,
  lt_filetable_2 TYPE filetable,
  ls_filetable_2 LIKE LINE OF lt_filetable,
  lv_rc_2        TYPE i,
  lt_file1       TYPE TABLE OF ty_excel,
  lt_file2       TYPE TABLE OF ty_excel,
  ls_file1       TYPE ty_excel,
  ls_file2       TYPE ty_excel,
  lt_file_end    TYPE TABLE OF ty_alv2,
  ls_file_end    TYPE ty_alv2,
  lv_met         TYPE char10.

DATA:
  gt_fieldcat TYPE lvc_t_fcat,
  gs_fieldcat TYPE lvc_s_fcat,
  gs_layout   TYPE lvc_s_layo,
  gt_alv      TYPE STANDARD TABLE OF ty_alv,
  gs_alv      TYPE ty_alv,
  gx_variant  TYPE disvariant,
  g_variant   TYPE disvariant,
  g_repid     TYPE sy-repid,
  g_save      TYPE c VALUE 'A',
  g_exit      TYPE c.

FIELD-SYMBOLS:
 <fs_alv>  TYPE ty_alv.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file1.
  PERFORM file_open CHANGING p_file1.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file2.
  PERFORM file_open CHANGING p_file2.

INITIALIZATION.
  PERFORM cleaning.

START-OF-SELECTION.
  PERFORM get_alv_data.
  PERFORM create_and_display_alv.


*---------------------------------------------------------------------*
* Form CREATE_AND_DISPLAY_ALV
*---------------------------------------------------------------------*
FORM create_and_display_alv.

* It looks when is a request or two files
  IF lv_met = 'REQUEST'.
    IF gt_alv IS NOT INITIAL .
      PERFORM alv_layout.
      PERFORM alv_field_catalog.
      PERFORM alv_display TABLES gt_alv.
    ENDIF.
  ELSEIF lv_met = 'FILES'.
    IF lt_file_end IS NOT INITIAL .
      PERFORM alv_layout.
      PERFORM alv_field_catalog.
      PERFORM alv_display TABLES lt_file_end.
    ENDIF.
  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  ALV_FIELD_CATALOG
*---------------------------------------------------------------------*
FORM alv_field_catalog.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'ORDEN'.
  gs_fieldcat-ref_table = '0E70'.
  gs_fieldcat-ref_field = 'TRKORR'.
  gs_fieldcat-col_opt = abap_true.
  gs_fieldcat-scrtext_s = 'Request'.
  gs_fieldcat-coltext   = 'Request'.
  gs_fieldcat-seltext   = 'Request'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'AS4TEXT'.
  gs_fieldcat-ref_table = 'E07T'.
  gs_fieldcat-ref_field = 'AS4TEXT'.
  gs_fieldcat-col_opt = abap_true.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'SUBTAREA'.
  gs_fieldcat-ref_table = 'VRSD_OLD'.
  gs_fieldcat-ref_field = 'KORRNUM'.
  gs_fieldcat-col_opt = abap_true.
  gs_fieldcat-scrtext_s = 'Task'.
  gs_fieldcat-coltext   = 'Task'.
  gs_fieldcat-seltext   = 'Task'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'OBJTYP1'.
  gs_fieldcat-ref_table = 'VRSD'.
  gs_fieldcat-ref_field = 'OBJTYPE'.
  gs_fieldcat-col_opt = abap_true.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'OBJNAME'.
  gs_fieldcat-ref_table = 'VRSD'.
  gs_fieldcat-ref_field = 'OBJNAME'.
  gs_fieldcat-col_opt = abap_true.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'TOP_OBJECT'.
  gs_fieldcat-ref_table = 'VRSD'.
  gs_fieldcat-ref_field = 'OBJNAME'.
  gs_fieldcat-col_opt = abap_true.
  gs_fieldcat-scrtext_s = 'Top_object'.
  gs_fieldcat-coltext   = 'Top_object'.
  gs_fieldcat-seltext   = 'Top_object'.
  APPEND gs_fieldcat TO gt_fieldcat.

  IF lv_met = 'FILES'.

    CLEAR: gs_fieldcat.
    gs_fieldcat-fieldname = 'ORIG_REQ'.
    gs_fieldcat-ref_table = '0E70'.
    gs_fieldcat-ref_field = 'TRKORR'.
    gs_fieldcat-col_opt = abap_true.
    gs_fieldcat-scrtext_s = 'Orig_req'.
    gs_fieldcat-coltext   = 'Original Request'.
    gs_fieldcat-seltext   = 'Original Request'.
    APPEND gs_fieldcat TO gt_fieldcat.

    CLEAR: gs_fieldcat.
    gs_fieldcat-fieldname = 'ORIG_TASK'.
    gs_fieldcat-ref_table = 'VRSD_OLD'.
    gs_fieldcat-ref_field = 'KORRNUM'.
    gs_fieldcat-col_opt = abap_true.
    gs_fieldcat-scrtext_s = 'Task'.
    gs_fieldcat-coltext   = 'Original Task'.
    gs_fieldcat-seltext   = 'Original Task'.
    APPEND gs_fieldcat TO gt_fieldcat.

  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  ALV_DISPLAY
*---------------------------------------------------------------------*

FORM alv_display TABLES t_print.

  g_repid = sy-cprog.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      i_callback_program      = g_repid
      i_callback_user_command = 'USER_COMMAND'
*     is_layout_lvc           = gs_layout
*     i_default               = 'X'
      i_save                  = 'A'
      it_fieldcat_lvc         = gt_fieldcat
      is_variant              = g_variant
    TABLES
      t_outtab                = t_print[]
    EXCEPTIONS
      program_error           = 1
      OTHERS                  = 2.
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid
           TYPE sy-msgty
         NUMBER sy-msgno
           WITH sy-msgv1
                sy-msgv2
                sy-msgv3
                sy-msgv4.
  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  user_command
*---------------------------------------------------------------------*
FORM user_command USING l_ucomm     TYPE sy-ucomm
                        l_selfield  TYPE slis_selfield.

  DATA:
  lv_trkorr      TYPE trkorr.

  CASE lv_met.
    WHEN 'FILES'.
      CASE l_ucomm.

        WHEN '&IC1'.
          READ TABLE lt_file_end INTO ls_file_end INDEX l_selfield-tabindex.
          IF sy-subrc EQ 0.

            CASE l_selfield-fieldname.

              WHEN 'ORDEN'.

                lv_trkorr = ls_file_end-orden.

                CALL FUNCTION 'TR_DISPLAY_REQUEST'
                  EXPORTING
                    i_trkorr = lv_trkorr.

              WHEN 'SUBTAREA'.

                IF ls_file_end-subtarea IS  NOT INITIAL.

                  lv_trkorr = ls_file_end-subtarea.

                  CALL FUNCTION 'TR_DISPLAY_REQUEST'
                    EXPORTING
                      i_trkorr = lv_trkorr.

                ENDIF.

            ENDCASE.
          ENDIF.
      ENDCASE.
    WHEN 'REQUEST'.

      CASE l_ucomm.

        WHEN '&IC1'.
          READ TABLE gt_alv INTO gs_alv INDEX l_selfield-tabindex.
          IF sy-subrc EQ 0.

            CASE l_selfield-fieldname.

              WHEN 'ORDEN'.

                lv_trkorr = gs_alv-orden.

                CALL FUNCTION 'TR_DISPLAY_REQUEST'
                  EXPORTING
                    i_trkorr = lv_trkorr.

              WHEN 'SUBTAREA'.

                IF gs_alv-subtarea IS  NOT INITIAL.

                  lv_trkorr = gs_alv-subtarea.

                  CALL FUNCTION 'TR_DISPLAY_REQUEST'
                    EXPORTING
                      i_trkorr = lv_trkorr.

                ENDIF.

            ENDCASE.
          ENDIF.
      ENDCASE.

  ENDCASE.

  l_selfield-refresh    = 'X'.
  l_selfield-col_stable = 'X'.
  l_selfield-row_stable = 'X'.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  ALV_LAYOUT
*---------------------------------------------------------------------*
FORM alv_layout.

  gs_layout-zebra      = 'X'.
  gs_layout-sel_mode   = 'A'.
  gs_layout-col_opt    = 'X'.
  gs_layout-cwidth_opt = abap_true.

ENDFORM.

*---------------------------------------------------------------------*
* Form fill_alv_1
*---------------------------------------------------------------------*
FORM fill_alv_1.
  DATA:
    lv_request      TYPE char20,
    lt_objects      TYPE STANDARD TABLE OF cts_obj,
    ls_objects      LIKE LINE OF lt_objects,
    lt_e070         TYPE STANDARD TABLE OF e070,
    ls_e070         LIKE LINE OF lt_e070,
    lt_e070_subtask TYPE STANDARD TABLE OF e070,
    ls_e070_subtask LIKE LINE OF lt_e070,
    lt_e07t         TYPE STANDARD TABLE OF e07t,
    ls_e07t         TYPE e07t,
    lv_aux          TYPE string.

  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE lt_e070
    FROM e070
  WHERE trkorr IN p_req.

  IF lt_e070[] IS NOT INITIAL.

    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE lt_e070_subtask
      FROM e070
       FOR ALL ENTRIES IN lt_e070
    WHERE strkorr EQ lt_e070-trkorr.

  ENDIF.

  LOOP AT lt_e070 INTO ls_e070.

    LOOP AT lt_e070_subtask INTO ls_e070_subtask WHERE strkorr EQ ls_e070-trkorr.

*     OBJETOS en TAREA

      lv_request = ls_e070_subtask-trkorr.

      REFRESH: lt_objects.
      CALL FUNCTION 'CTS_API_READ_CHANGE_REQUEST'
        EXPORTING
          request = lv_request
        TABLES
          objects = lt_objects.

      LOOP AT lt_objects INTO ls_objects.

        CLEAR: gs_alv. "gs_alv
        gs_alv-objname  = ls_objects-name.
        gs_alv-objtyp1  = ls_objects-object.
        gs_alv-orden    = ls_e070_subtask-strkorr.
        gs_alv-subtarea = ls_e070_subtask-trkorr.
        APPEND gs_alv TO gt_alv.
      ENDLOOP.

    ENDLOOP.

    lv_request = ls_e070-trkorr.

    REFRESH: lt_objects.
    CALL FUNCTION 'CTS_API_READ_CHANGE_REQUEST'
      EXPORTING
        request = lv_request
      TABLES
        objects = lt_objects.

    LOOP AT lt_objects INTO ls_objects.

      CLEAR: gs_alv.
      gs_alv-objname  = ls_objects-name.
      gs_alv-objtyp1  = ls_objects-object.

      IF ls_e070-strkorr IS NOT INITIAL.
        gs_alv-subtarea = ls_e070-trkorr.
        gs_alv-orden    = ls_e070-strkorr.
      ELSE.
        gs_alv-orden    = ls_e070-trkorr.
      ENDIF.

      APPEND gs_alv TO gt_alv.

    ENDLOOP.

  ENDLOOP.

  IF gt_alv[] IS NOT INITIAL.
    SELECT *
      INTO CORRESPONDING FIELDS OF TABLE lt_e07t
      FROM e07t
       FOR ALL ENTRIES IN gt_alv
    WHERE trkorr EQ gt_alv-orden.
  ENDIF.

  SORT lt_e07t BY trkorr.

  LOOP AT gt_alv ASSIGNING <fs_alv>.

    READ TABLE lt_e07t INTO ls_e07t WITH KEY trkorr = <fs_alv>-orden BINARY SEARCH.
    IF sy-subrc EQ 0.
      <fs_alv>-as4text = ls_e07t-as4text.
    ENDIF.

    IF <fs_alv>-objtyp1 EQ 'METH'.
      SPLIT <fs_alv>-objname AT space INTO <fs_alv>-top_object lv_aux.
    ENDIF.

    IF <fs_alv>-objtyp1 EQ 'REPS'.
      IF <fs_alv>-objname IS NOT INITIAL.
        SELECT SINGLE master
        INTO <fs_alv>-top_object
        FROM d010inc
        WHERE include EQ <fs_alv>-objname.
      ENDIF.
    ENDIF.

    IF <fs_alv>-objtyp1 EQ 'FUNC'.
      IF <fs_alv>-objname IS NOT INITIAL.
        SELECT SINGLE area
        INTO <fs_alv>-top_object
        FROM enlfdir
        WHERE funcname EQ <fs_alv>-objname.
      ENDIF.
    ENDIF.

  ENDLOOP.

  SORT gt_alv.
  DELETE ADJACENT DUPLICATES FROM gt_alv.
  SORT gt_alv BY orden DESCENDING subtarea ASCENDING.

ENDFORM.

FORM file_open CHANGING p_file.

  cl_gui_frontend_services=>file_open_dialog(
    EXPORTING
      window_title            = 'Select the file'
    CHANGING
      file_table              = lt_filetable_2
      rc                      = lv_rc_2
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5 ).
  IF sy-subrc NE 0.
    MESSAGE ID sy-msgid
           TYPE sy-msgty
         NUMBER sy-msgno
           WITH sy-msgv1
                sy-msgv2
                sy-msgv3
                sy-msgv4.
  ELSE.
    IF lv_rc_2 EQ 1.
      READ TABLE lt_filetable_2 INTO ls_filetable_2 INDEX 1.
      IF sy-subrc EQ 0.
        p_file = ls_filetable_2-filename.
      ENDIF.
    ENDIF.

  ENDIF.

ENDFORM.

FORM upload_excel TABLES lt_file USING p_file.

  DATA:
    lt_raw     TYPE truxs_t_text_data,
    i_filename TYPE rlgrap-filename.

  i_filename = p_file.

  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
    EXPORTING
      i_tab_raw_data       = lt_raw
      i_filename           = i_filename
    TABLES
      i_tab_converted_data = lt_file[]
    EXCEPTIONS
      conversion_failed    = 1
      OTHERS               = 2.

ENDFORM.

*---------------------------------------------------------------------*
* Form fill_files
*---------------------------------------------------------------------*
FORM fill_files USING p_file1 p_file2.

  PERFORM upload_excel TABLES lt_file1 USING p_file1.

* Borrar la cabecera y guardarla
  READ TABLE lt_file1 INTO ls_file2 INDEX 1.
  IF sy-subrc EQ 0.
    DELETE lt_file1 INDEX 1.
  ENDIF.
  PERFORM upload_excel TABLES lt_file2 USING p_file2.

* Borrar la cabecera y guardarla
  READ TABLE lt_file2 INTO ls_file2 INDEX 1.
  IF sy-subrc EQ 0.
    DELETE lt_file2 INDEX 1.
  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
* Form fill_alv_2
*---------------------------------------------------------------------*
FORM fill_alv_2 .

  LOOP AT lt_file2 INTO ls_file2.

    CLEAR ls_file_end.
    MOVE-CORRESPONDING  ls_file2 TO ls_file_end.

    LOOP AT lt_file1 INTO ls_file1 WHERE objname EQ ls_file2-objname OR top_object NE space AND top_object EQ ls_file2-top_object."SAPECC_to_S4HANA

*      IF ls_file1-objname EQ ls_file2-objname OR ls_file1-top_object NE space AND ls_file1-top_object EQ ls_file2-top_object."SAPECC_to_S4HANA
      ls_file_end-orig_req = ls_file1-orden.
      ls_file_end-orig_task = ls_file1-subtarea.
      APPEND ls_file_end TO lt_file_end."SAPECC_to_S4HANA
*        EXIT."SAPECC_to_S4HANA
*      ENDIF."SAPECC_to_S4HANA

    ENDLOOP.

    IF sy-subrc <> 0."SAPECC_to_S4HANA
      APPEND ls_file_end TO lt_file_end.
    ENDIF."SAPECC_to_S4HANA

  ENDLOOP.

ENDFORM.

*---------------------------------------------------------------------*
* Form get_alv_data
*---------------------------------------------------------------------*
FORM get_alv_data .

  IF p_req IS INITIAL.
    IF p_file1 IS INITIAL OR p_file2 IS INITIAL.
      MESSAGE 'Please, choose a transport request or 2 files' TYPE 'I'.
    ELSE.
      lv_met = 'FILES'.
      PERFORM fill_files USING p_file1 p_file2.
      PERFORM fill_alv_2.
      IF lt_file1 IS INITIAL.
* it compares that files have some information
        MESSAGE 'File 1 is empty' TYPE 'I'.
        CLEAR: lt_file2.
        EXIT.
      ELSEIF lt_file2 IS INITIAL.
        MESSAGE 'File 2 is empty' TYPE 'I'.
        CLEAR: lt_file1.
        EXIT.
      ENDIF.
    ENDIF.
  ELSE.
    IF p_file1 IS NOT INITIAL OR p_file2 IS NOT INITIAL.
      MESSAGE 'Please, choose a transport request or two files' TYPE 'I'.
    ELSE.
      lv_met = 'REQUEST'.
      PERFORM fill_alv_1.
      IF gt_alv IS INITIAL .
        MESSAGE 'There is no objets in the request' TYPE 'I'.
        EXIT.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
* Form cleaning
*---------------------------------------------------------------------*
FORM cleaning.

  REFRESH: lt_filetable,
  lt_excel,
  gt_fieldcat,
  lt_filetable_2,
  lt_file1,
  lt_file2,
  lt_file_end,
  gt_alv.

  CLEAR: ls_filetable,
  ls_excel,
  gs_fieldcat,
  gs_layout,
  gs_alv,
  ls_filetable_2,
  ls_file1,
  ls_file2,
  ls_file_end.

ENDFORM.
