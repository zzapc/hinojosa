*&---------------------------------------------------------------------*
*& Report ZSEI_MIG_00015_LEFT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zsei_mig_00015_left.

TYPES:
  BEGIN OF ty_alv,
    code    TYPE char10,
    type    TYPE char20,
    part    TYPE bu_partner,
    mess    TYPE char20,
    p_color TYPE lvc_t_scol,
  END OF ty_alv.

TYPES:
 tyt_alv TYPE TABLE OF ty_alv.

CONSTANTS:
  c_typec TYPE char20 VALUE 'CUSTOMER',
  c_typev TYPE char20 VALUE 'VENDOR',
  c_typer TYPE char20 VALUE 'RELATION',
  c_okmsg TYPE char20 VALUE 'ENCONTRADO',
  c_ermsg TYPE char20 VALUE 'NO ENCONTRADO'.

DATA:
  t_alv TYPE tyt_alv.

TYPES:
  BEGIN OF ty_kna1,
    kunnr   TYPE kna1-kunnr,
    partner TYPE but000-partner,
  END OF ty_kna1.

TYPES:
  BEGIN OF ty_lfa1,
    lifnr   TYPE lfa1-lifnr,
    partner TYPE but000-partner,
  END OF ty_lfa1.

TYPES:
  BEGIN OF ty_parvend,
    parnr   TYPE knvk-parnr,
    partner TYPE but000-partner,
  END OF ty_parvend.

TYPES:
  BEGIN OF ty_parcust,
    parnr   TYPE knvk-parnr,
    partner TYPE but000-partner,
  END OF ty_parcust.

DATA:
  tl_parcust TYPE TABLE OF ty_parcust,
  tl_parvend TYPE TABLE OF ty_parvend,
  tl_lfa1    TYPE TABLE OF ty_lfa1,
  tl_kna1    TYPE TABLE OF ty_kna1.

START-OF-SELECTION.

  PERFORM get_data.

  IF t_alv IS NOT INITIAL.
    PERFORM show_alv.
  ENDIF.


*---------------------------------------------------------------------*
* Form get_data
*---------------------------------------------------------------------*
FORM get_data.

  TYPES: BEGIN OF tyl_cvi,
           customer TYPE cvi_cust_link-customer,
           partner  TYPE but000-partner,
         END OF tyl_cvi.

  DATA: tl_cvi TYPE STANDARD TABLE OF tyl_cvi,
        xl_cvi TYPE tyl_cvi.

  TYPES: BEGIN OF tyl_cvi_cust,
           customer_cont TYPE cvi_cust_ct_link-customer_cont,
           partner       TYPE but000-partner,
         END OF tyl_cvi_cust.

  DATA: tl_cvi_cust TYPE STANDARD TABLE OF tyl_cvi_cust,
        xl_cvi_cust TYPE tyl_cvi_cust.

  TYPES: BEGIN OF tyl_cvi_vend,
           vendor_cont TYPE cvi_vend_ct_link-vendor_cont,
           partner     TYPE but000-partner,
         END OF tyl_cvi_vend.

  DATA: tl_cvi_vend TYPE STANDARD TABLE OF tyl_cvi_vend,
        xl_cvi_vend TYPE tyl_cvi_vend.


  FIELD-SYMBOLS: <fs_lfa1>    TYPE ty_lfa1,
                 <fs_kna1>    TYPE ty_kna1,
                 <fs_parcust> TYPE ty_parcust,
                 <fs_parvend> TYPE ty_parvend,
                 <fs_alv>     TYPE ty_alv,
                 <fs_falv>    TYPE ty_alv,
                 <fs_parcalv> TYPE ty_alv,
                 <fs_parvalv> TYPE ty_alv.


  CLEAR: tl_cvi[].
  SELECT c~customer b~partner INTO TABLE tl_cvi
    FROM cvi_cust_link AS c
    LEFT JOIN but000 AS b
    ON c~partner_guid EQ b~partner_guid.

  SELECT kunnr FROM kna1
    INTO CORRESPONDING FIELDS OF TABLE tl_kna1.
  LOOP AT tl_kna1 ASSIGNING <fs_kna1>.
    READ TABLE tl_cvi INTO xl_cvi WITH KEY customer = <fs_kna1>-kunnr.
    IF sy-subrc IS INITIAL.
      <fs_kna1>-partner = xl_cvi-partner.
    ENDIF.
  ENDLOOP.

  CLEAR: tl_cvi[].
  SELECT c~vendor b~partner INTO TABLE tl_cvi
    FROM cvi_vend_link AS c
    LEFT JOIN but000 AS b
    ON c~partner_guid EQ b~partner_guid.

  SELECT lifnr FROM lfa1
    INTO CORRESPONDING FIELDS OF TABLE tl_lfa1.
  LOOP AT tl_lfa1 ASSIGNING <fs_lfa1>.
    READ TABLE tl_cvi INTO xl_cvi WITH KEY customer = <fs_lfa1>-lifnr.
    IF sy-subrc IS INITIAL.
      <fs_lfa1>-partner = xl_cvi-partner.
    ENDIF.
  ENDLOOP.

  CLEAR: tl_cvi_cust[].
  SELECT c~customer_cont b~partner INTO TABLE tl_cvi_cust
    FROM cvi_cust_ct_link AS c
    LEFT JOIN but000 AS b
    ON c~partner_guid EQ b~partner_guid.

  SELECT parnr FROM knvk
    INTO CORRESPONDING FIELDS OF TABLE tl_parcust
    WHERE kunnr NE ''.
  LOOP AT tl_parcust ASSIGNING <fs_parcust>.
    READ TABLE tl_cvi_cust INTO xl_cvi_cust WITH KEY customer_cont = <fs_parcust>-parnr.
    IF sy-subrc IS INITIAL.
      <fs_parcust>-partner = xl_cvi_cust-partner.
    ENDIF.
  ENDLOOP.

  CLEAR: tl_cvi_vend[].
  SELECT c~vendor_cont b~partner INTO TABLE tl_cvi_vend
    FROM cvi_vend_ct_link AS c
    LEFT JOIN but000 AS b
    ON c~partner_guid EQ b~partner_guid.

  SELECT parnr FROM knvk
    INTO CORRESPONDING FIELDS OF TABLE tl_parvend
    WHERE lifnr NE ''.
  LOOP AT tl_parvend ASSIGNING <fs_parvend>.
    READ TABLE tl_cvi_vend INTO xl_cvi_vend WITH KEY vendor_cont = <fs_parvend>-parnr.
    IF sy-subrc IS INITIAL.
      <fs_parvend>-partner = xl_cvi_vend-partner.
    ENDIF.
  ENDLOOP.

  IF tl_kna1 IS NOT INITIAL.
    LOOP AT tl_kna1 ASSIGNING <fs_kna1>.
      APPEND INITIAL LINE TO t_alv ASSIGNING <fs_alv>.
      IF <fs_alv> IS ASSIGNED.
        <fs_alv>-code = <fs_kna1>-kunnr.
        <fs_alv>-type = c_typec.
        <fs_alv>-part = <fs_kna1>-partner.
        IF <fs_kna1>-partner IS NOT INITIAL.
          <fs_alv>-mess = c_okmsg.
          PERFORM set_color USING 1 CHANGING <fs_alv>-p_color.
        ELSE.
          <fs_alv>-mess = c_ermsg.
          PERFORM set_color USING 2 CHANGING <fs_alv>-p_color.
        ENDIF.
      ENDIF.
      UNASSIGN: <fs_alv>.
    ENDLOOP.
  ENDIF.

  IF tl_lfa1 IS NOT INITIAL.
    LOOP AT tl_lfa1 ASSIGNING <fs_lfa1>.
      APPEND INITIAL LINE TO t_alv ASSIGNING <fs_falv>.
      IF <fs_falv> IS ASSIGNED.
        <fs_falv>-code = <fs_lfa1>-lifnr.
        <fs_falv>-type = c_typev.
        <fs_falv>-part = <fs_lfa1>-partner.
        IF <fs_lfa1>-partner IS NOT INITIAL.
          <fs_falv>-mess = c_okmsg.
          PERFORM set_color USING 1 CHANGING <fs_falv>-p_color.
        ELSE.
          <fs_falv>-mess = c_ermsg.
          PERFORM set_color USING 2 CHANGING <fs_falv>-p_color.
        ENDIF.
      ENDIF.
      UNASSIGN: <fs_falv>.
    ENDLOOP.
  ENDIF.

  IF tl_parcust IS NOT INITIAL.
    LOOP AT tl_parcust ASSIGNING <fs_parcust>.
      APPEND INITIAL LINE TO t_alv ASSIGNING <fs_parcalv>.
      IF <fs_parcalv> IS ASSIGNED.
        <fs_parcalv>-code = <fs_parcust>-parnr.
        <fs_parcalv>-type = c_typer.
        <fs_parcalv>-part = <fs_parcust>-partner.
        IF <fs_parcust>-partner IS NOT INITIAL.
          <fs_parcalv>-mess = c_okmsg.
          PERFORM set_color USING 1 CHANGING <fs_parcalv>-p_color.
        ELSE.
          <fs_parcalv>-mess = c_ermsg.
          PERFORM set_color USING 2 CHANGING <fs_parcalv>-p_color.
        ENDIF.
      ENDIF.
      UNASSIGN: <fs_parcalv>.
    ENDLOOP.
  ENDIF.

  IF tl_parvend IS NOT INITIAL.
    LOOP AT tl_parvend ASSIGNING <fs_parvend>.
      APPEND INITIAL LINE TO t_alv ASSIGNING <fs_parvalv>.
      IF <fs_parvalv> IS ASSIGNED.
        <fs_parvalv>-code = <fs_parvend>-parnr.
        <fs_parvalv>-type = c_typer.
        <fs_parvalv>-part = <fs_parvend>-partner.
        IF <fs_parvend>-partner IS NOT INITIAL.
          <fs_parvalv>-mess = c_okmsg.
          PERFORM set_color USING 1 CHANGING <fs_parvalv>-p_color.
        ELSE.
          <fs_parvalv>-mess = c_ermsg.
          PERFORM set_color USING 2 CHANGING <fs_parvalv>-p_color.
        ENDIF.
      ENDIF.

      UNASSIGN: <fs_parvalv>.
    ENDLOOP.
  ENDIF.

ENDFORM.                    "get_data

*---------------------------------------------------------------------*
* Form set_color
*---------------------------------------------------------------------*
FORM set_color  USING    p_mode TYPE i
                CHANGING pt_color TYPE lvc_t_scol.

  CLEAR pt_color.

  FIELD-SYMBOLS: <fs_colo> TYPE lvc_s_scol.

  APPEND INITIAL LINE TO pt_color ASSIGNING <fs_colo>.
  IF <fs_colo> IS ASSIGNED.
    CASE p_mode.
      WHEN 1.
        <fs_colo>-color-col = 5.
        <fs_colo>-color-int = 0.
        <fs_colo>-color-inv = 0.
      WHEN 2.
        <fs_colo>-color-col = 6.
        <fs_colo>-color-int = 0.
        <fs_colo>-color-inv = 0.
    ENDCASE.

  ENDIF.
  UNASSIGN <fs_colo>.

ENDFORM.                    "set_color

*&---------------------------------------------------------------------*
*& Form show_alv
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM show_alv .

  DATA: o_salv_table TYPE REF TO cl_salv_table,
        o_salv_cols  TYPE REF TO cl_salv_columns_table,
        o_functions  TYPE REF TO cl_salv_functions_list,
        o_events     TYPE REF TO cl_salv_events_table,
        vl_status    TYPE sypfkey.

  CLEAR vl_status.

  TRY .
      cl_salv_table=>factory(
       IMPORTING
         r_salv_table = o_salv_table
       CHANGING
         t_table      = t_alv ).

      o_salv_cols = o_salv_table->get_columns( ).

      DATA : o_column TYPE REF TO cl_salv_column_table.

      TRY.

          o_column ?= o_salv_cols->get_column( columnname = 'CODE' ).
          o_column->set_long_text( value = 'Registro' ).
          o_column->set_medium_text( value = 'Registro' ).
          o_column->set_short_text( value = 'Reg.' ).

          o_column ?= o_salv_cols->get_column( columnname = 'TYPE' ).
          o_column->set_long_text( value = 'Tipo' ).
          o_column->set_medium_text( value = 'Tipo' ).
          o_column->set_short_text( value = 'Tipo' ).

          o_column ?= o_salv_cols->get_column( columnname = 'MESS' ).
          o_column->set_long_text( value = 'Resultado' ).
          o_column->set_medium_text( value = 'Resultado' ).
          o_column->set_short_text( value = 'Res.' ).

        CATCH cx_salv_not_found .
      ENDTRY.

      o_functions = o_salv_table->get_functions( ).
      o_functions->set_all( ).


      o_salv_cols->set_color_column( 'P_COLOR' ).
      o_salv_cols->set_optimize( ).

      o_salv_table->display( ).

    CATCH cx_ai_system_fault.

  ENDTRY.

ENDFORM.                    "show_alv
