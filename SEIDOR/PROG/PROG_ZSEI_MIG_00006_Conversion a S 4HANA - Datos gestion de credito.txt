*&---------------------------------------------------------------------*
*& Report ZSEI_MIG_00006
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zsei_mig_00006.

INCLUDE zsei_mig_00006_top.
INCLUDE zsei_mig_00006_sel.
INCLUDE zsei_mig_00006_eve.

START-OF-SELECTION.

*  Obtener los datos del archivo.
*  PERFORM obtener_datos.
*  PERFORM procesar_datos.
  TYPES: BEGIN OF ty_client,
           partner      TYPE but000-partner,
           partner_guid TYPE but000-partner_guid,
           customer     TYPE kunnr,
         END OF ty_client.
  DATA: lt_but000   TYPE TABLE OF ty_client,
        ls_but000   TYPE ty_client,
        lt_customer TYPE TABLE OF ty_client,
        ls_customer TYPE ty_client,
        lt_knkk     TYPE TABLE OF knkk,
        ls_knkk     TYPE knkk.

  DATA: ls_definicion_knkk TYPE REF TO data.
  DATA: ls_definicion_bapi TYPE REF TO data.
  DATA: ls_definicion_info TYPE REF TO data.
  FIELD-SYMBOLS :
    <fs_intermedio_knkk> TYPE any,
    <fs_intermedio_bapi> TYPE any,
    <fs_intermedio_info> TYPE any,
    <fs_campo_knkk>      TYPE any,
    <fs_campo_bapi>      TYPE any,
    <fs_campo_info>      TYPE any.

  DATA: ls_ukm_s_bp_cms_sgm_upd TYPE ukm_s_bp_cms_sgm_upd,
        lt_ukm_s_bp_cms_sgm_upd TYPE TABLE OF ukm_s_bp_cms_sgm_upd,
        lt_ukm_s_bp_cms_sgm_all TYPE TABLE OF ukm_s_bp_cms_sgm_all,
        lo_descr                TYPE REF TO cl_abap_structdescr,
*        lv_partner(12)          TYPE c,
        lv_partner              TYPE bu_partner,
        lv_segmento             TYPE ukm_credit_sgmnt,
        lv_credit_limit         TYPE ukm_credit_limit,
        lv_ind_bloqueo          TYPE ukm_xblocked,
        lv_mot_bloqueo          TYPE ukm_block_reason,
        lv_proces               TYPE ukm_limit_rule,
        lv_class_risk           TYPE ukm_risk_class,
        lv_regl_ver             TYPE ukm_check_rule,
        lv_field                TYPE string,
        lt_ukm_s_bp_cms_upd     TYPE TABLE OF ukm_s_bp_cms_upd,
        ls_ukm_s_bp_cms_upd     TYPE ukm_s_bp_cms_upd.

  DATA: lv_infotype  TYPE infotyp,
        lv_credinter TYPE ukm_infotype,
        lv_impinter  TYPE bapibp_amnt,
        lv_moninter  TYPE waers,
        lv_credaseg  TYPE ukm_infotype,
        lv_impaseg   TYPE bapibp_amnt,
        lv_monaseg   TYPE waers.

  DATA: wl_bpartner    TYPE bapi_bus_partner_fs-partner_id,
        wl_change      TYPE bapi_str_bupa_fs_change_docu,
        wl_test        TYPE boolean VALUE ' ',
        ls_adition     TYPE bapi_str_bupa_fs_addition,
        lt_adition     TYPE TABLE OF bapi_str_bupa_fs_addition,
        lt_adition_aux TYPE TABLE OF bapi_str_bupa_fs_addition,
        lt_adchange    TYPE TABLE OF bapi_str_bupa_fs_additi_x,
        ls_adchange    TYPE bapi_str_bupa_fs_additi_x,
        lt_return      TYPE TABLE OF bapiret2,
        vl_string      TYPE string.

  DATA: "lt_return  TYPE BAPIRET2,
    ls_return TYPE bapiret2,
    vl_error.

  TYPES: BEGIN OF ty_alv,
           partner   TYPE but000-partner,
           customer  TYPE cvi_cust_link-customer,
           kkber     TYPE knkk-kkber,
           sbgrp     TYPE knkk-sbgrp,
           dbekr     TYPE knkk-dbekr,
           kraus     TYPE knkk-kraus,
           dbrtg     TYPE knkk-dbrtg,
* Ejemplo de KH para tratar campos necesario
*           zzkraus      TYPE ukmbp_cms_sgm-zzkraus,
*           zzdbrat      TYPE ukmbp_cms_sgm-zzdbrat,
*           zzpoliza     TYPE ukmbp_cms_sgm-zzpoliza,
*           zzexpediente TYPE ukmbp_cms_sgm-zzexpediente,
           criter    TYPE bp3100-criter,
           addtype   TYPE bp3100-addtype,
           data_type TYPE bp3100-data_type,
           amnt      TYPE bp3100-amnt,
           datefr    TYPE bp3100-datefr,
           dateto    TYPE bp3100-dateto,
         END OF ty_alv.

  DATA: lt_alv           TYPE TABLE OF ty_alv,
        ls_alv           TYPE ty_alv,
        lt_ukmbp_cms_sgm TYPE TABLE OF ukmbp_cms_sgm,
        ls_ukmbp_cms_sgm TYPE ukmbp_cms_sgm,
        lt_bp3100        TYPE TABLE OF bp3100,
        ls_bp3100        TYPE bp3100.


  DATA: tl_fieldcat  TYPE slis_t_fieldcat_alv,
        wal_fieldcat TYPE slis_fieldcat_alv,
        vl_layout    TYPE slis_layout_alv,
        wal_layout   TYPE lvc_s_layo,
        vl_index     TYPE sy-tabix,
        vl_repid     TYPE sy-repid.


  PERFORM seleccionar_datos.

  IF p_alv IS NOT INITIAL.
    PERFORM alv.
  ELSE.
    PERFORM carga.
  ENDIF.



FORM carga.

  IF lt_knkk[] IS NOT INITIAL.


    LOOP AT lt_customer INTO ls_customer.
      CLEAR: vl_error.
*       Comprobamos que no tenga fallos
*      call badi BUPA_FURTHER_CHECKS->CHECK_CENTRAL
      CALL FUNCTION 'BAPI_BUPA_FS_CHECK'
        EXPORTING
          businesspartner = ls_customer-partner
*         RESET_IN_ERROR_CASE       =
        TABLES
          return          = lt_return.

      LOOP AT lt_return INTO ls_return WHERE type = 'E'.
        WRITE  ls_return-message.

      ENDLOOP.
      IF ls_return IS NOT INITIAL.
        CONTINUE.
      ENDIF.





      REFRESH: lt_ukm_s_bp_cms_upd, lt_ukm_s_bp_cms_sgm_upd, lt_adition.
*     leemos datos credito actuales
      CALL FUNCTION 'UKM_DB_UKMBP_CMS_SGM_ALL_READ'
        EXPORTING
          i_partner         = ls_customer-partner
        TABLES
          et_bp_cms_sgm_all = lt_ukm_s_bp_cms_sgm_all
        EXCEPTIONS
          not_found         = 1
          OTHERS            = 2.

*     recorremos sus creditos antiguos
      LOOP AT lt_knkk INTO ls_knkk WHERE kunnr = ls_customer-customer.

        READ TABLE lt_ukm_s_bp_cms_sgm_all ASSIGNING FIELD-SYMBOL(<fs_ukm_s_bp_cms_sgm_all>)
                                                        WITH KEY credit_sgmnt = ls_knkk-kkber.
        IF sy-subrc EQ 0.
          "MODIFICACION
*        "Añadimos el Rol
          CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
            EXPORTING
              businesspartner             = ls_customer-partner
              businesspartnerrolecategory = 'UKM000'.

          CLEAR: ls_ukm_s_bp_cms_sgm_upd, ls_ukm_s_bp_cms_sgm_upd.
          MOVE-CORRESPONDING <fs_ukm_s_bp_cms_sgm_all> TO ls_ukm_s_bp_cms_sgm_upd.

          ls_ukm_s_bp_cms_upd-partner = ls_customer-partner.
          ls_ukm_s_bp_cms_upd-change_id = 'U'.
          ls_ukm_s_bp_cms_upd-risk_class_chgdt = sy-datum.
          APPEND ls_ukm_s_bp_cms_upd TO lt_ukm_s_bp_cms_upd.

          ls_ukm_s_bp_cms_sgm_upd-partner = ls_customer-partner.


          CLEAR: ls_adition.
          ls_adition-addtype = p_type.
          IF ls_knkk-sbgrp = 'MAP'.
            ls_adition-data_type = '99'.
          ELSEIF ls_knkk-sbgrp = 'NO'.
            ls_adition-data_type = '98'.
          ELSE.

          ENDIF.

          IF ls_adition-data_type  IS NOT INITIAL.
            ls_adition-criterium = p_crite.
            ls_adition-amount = ls_knkk-dbekr.
            ls_adition-currency = 'EUR'.
            ls_adition-date_from = p_fecha.
            ls_adition-additional_date = p_fecha.
            ls_adition-date_to = '99991231'.
            APPEND ls_adition TO lt_adition.
          ENDIF.


          CREATE DATA ls_definicion_knkk TYPE ('KNKK').
          ASSIGN ls_definicion_knkk->* TO <fs_intermedio_knkk>.
          CREATE DATA ls_definicion_bapi TYPE ('UKM_S_BP_CMS_SGM_UPD').
          ASSIGN ls_definicion_bapi->* TO <fs_intermedio_bapi>.
*           CREATE DATA ls_definicion_INFO TYPE ('INFOTYP').
*           ASSIGN ls_definicion_INFO->* TO <fs_intermedio_INFO>.
*
          <fs_intermedio_knkk> = ls_knkk.
          <fs_intermedio_bapi> = ls_ukm_s_bp_cms_sgm_upd.
*           <fs_intermedio_INFO> = lv_infotype.
*

          LOOP AT lt_zseitsd_car_cred INTO ls_zseitsd_car_cred.
            UNASSIGN <fs_campo_knkk>.
            UNASSIGN <fs_campo_bapi>.
            ASSIGN COMPONENT ls_zseitsd_car_cred-origen OF STRUCTURE <fs_intermedio_knkk> TO <fs_campo_knkk>.
*           IF ls_zseitsd_car_cred-INFOTYPE = ''.
            ASSIGN COMPONENT ls_zseitsd_car_cred-destino OF STRUCTURE <fs_intermedio_bapi> TO <fs_campo_bapi>.
*           ELSE.
*            ASSIGN COMPONENT ls_zseitsd_car_cred-destino OF STRUCTURE <fs_intermedio_INFO> TO <fs_campo_INFO>.
*           ENDIF.

            CHECK <fs_campo_knkk> IS ASSIGNED AND <fs_campo_bapi> IS ASSIGNED.
            IF <fs_campo_bapi> IS INITIAL OR p_sobre = 'X'.
              <fs_campo_bapi> = <fs_campo_knkk>.
            ENDIF.
          ENDLOOP.

          ls_ukm_s_bp_cms_sgm_upd = <fs_intermedio_bapi>.
          ls_ukm_s_bp_cms_sgm_upd-change_id = 'U'.
          ls_ukm_s_bp_cms_sgm_upd-limit_chg_date = sy-datum.
          APPEND ls_ukm_s_bp_cms_sgm_upd TO lt_ukm_s_bp_cms_sgm_upd.
        ELSE.
*        CREACION
*        En principio ya se crean por defecto no?
        ENDIF.
      ENDLOOP.

      IF lt_ukm_s_bp_cms_sgm_upd[] IS NOT INITIAL.
*   CLEAR: SY-MSGID, SY-MSGTY, SY-MSGNO.
        CALL FUNCTION 'UKM_DB_UKMBP_CMS_EXECUTE'
          TABLES
            "   n_ukmbp_cms     = lt_ukm_s_bp_cms_upd
            "    o_ukmbp_cms     = lt_ukm_s_bp_cms_upd
            n_ukmbp_cms_sgm = lt_ukm_s_bp_cms_sgm_upd
            o_ukmbp_cms_sgm = lt_ukm_s_bp_cms_sgm_upd.

*    IF SY-MSGTY EQ 'E'.
*      MESSAGE id SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
*      INTO vl_string.
*       write : / vl_string.
*       write : / ls_CUSTOMER-partner.
*     EXIT.
*    ENDIF.

*     Actualizado datos gestión de credito del cliente &1
        CLEAR: lv_field.
        CONCATENATE TEXT-m01 ls_customer-partner  INTO lv_field SEPARATED BY space.
        MESSAGE  lv_field  TYPE 'S'."  WITH ls_CUSTOMER-partner .
      ELSE.
*     Sin datos gestión de credito del cliente &1
        CLEAR: lv_field.
        CONCATENATE TEXT-m02 ls_customer-partner  INTO lv_field SEPARATED BY space.
        MESSAGE lv_field TYPE 'I'.
      ENDIF.

      "Campos adicionales Infotipo
      IF  lt_adition[] IS NOT INITIAL.

        REFRESH lt_adition_aux.
        CALL FUNCTION 'BAPI_BUPA_FS_BPADDITION_GET'
          EXPORTING
            businesspartner = ls_customer-partner
          TABLES
            addition        = lt_adition_aux.

        IF lt_adition_aux[] IS INITIAL.
          wl_change = 'X'.
          CALL FUNCTION 'BAPI_BUPA_FS_BPADDITION_ADD'
            EXPORTING
              businesspartner = ls_customer-partner
              changedocu      = wl_change
              testrun         = wl_test
            TABLES
              return          = lt_return
              addition        = lt_adition.

*        bapireturncheck.
          LOOP AT lt_return INTO DATA(wa_return) WHERE type = 'E'.
            APPEND wa_return TO tl_bapiret.
            WRITE wa_return-message.
            vl_error = 'X'.
          ENDLOOP.
        ELSE.
*       Infotipo ya existente para cliente &1
          CLEAR: lv_field.
          CONCATENATE TEXT-m03 ls_customer-partner  INTO lv_field SEPARATED BY space.
          MESSAGE lv_field TYPE 'I'.


          IF p_sobre = 'X'.
            CLEAR ls_adition.
            wl_change = 'X'.
            CALL FUNCTION 'BAPI_BUPA_FS_BPADDITION_REMOVE'
*          starting new task 'UKM_REM'
              EXPORTING
                businesspartner = ls_customer-partner
                changedocu      = wl_change
                testrun         = wl_test
              TABLES
                addition        = lt_adition_aux
                return          = lt_return.

            LOOP AT lt_return INTO wa_return WHERE type = 'E'.
              APPEND wa_return TO tl_bapiret.
              WRITE wa_return-message.
              vl_error = 'X'.
            ENDLOOP.

            CALL FUNCTION 'BAPI_BUPA_FS_BPADDITION_ADD'
              EXPORTING
                businesspartner = ls_customer-partner
                changedocu      = wl_change
                testrun         = wl_test
              TABLES
                return          = lt_return
                addition        = lt_adition.
            LOOP AT lt_return INTO wa_return WHERE type = 'E'.
              APPEND wa_return TO tl_bapiret.
              WRITE wa_return-message.
              vl_error = 'X'.
            ENDLOOP.

          ENDIF.
        ENDIF.

        IF vl_error IS INITIAL.

*si da dump añadir en la OBA5 la entrada para AR 171 I I
*O modificar con standard
*FM TAX_NUMBER_CHECK  --> FORM check_taxcode_f line 884
*     IF sy-CPROG = 'ZSEISDR_CARGA_GESTION_CREDITO'.
*        MESSAGE ID 'AR' TYPE 'I' NUMBER '171'.
*     ELSE.

*      COMMIT WORK AND WAIT.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
*        EXPORTING
*          WAIT          = 'X'
*        IMPORTING
*          RETURN        = wa_return .
          IF wa_return IS NOT INITIAL.
            WRITE: wa_return-message.
          ENDIF.

*      Infotipo Actualizado con exito para el cliente &1
          CLEAR: lv_field.
          CONCATENATE TEXT-m04 ls_customer-partner  INTO lv_field SEPARATED BY space.
          MESSAGE lv_field TYPE 'S'.
        ELSE.
*      Error al actualizar Infotipo para el cliente &1.
          CLEAR: lv_field.
          CONCATENATE TEXT-m05 ls_customer-partner  INTO lv_field SEPARATED BY space.
          MESSAGE lv_field TYPE 'I'.
        ENDIF.
      ENDIF.

    ENDLOOP.
*   PERFORM update_credito_limite.
  ENDIF.

  LOOP AT tl_bapiret INTO wa_return.
    WRITE: wa_return-message.
  ENDLOOP.

ENDFORM.

FORM seleccionar_datos.
  IF p_kunnr = 'X'.

    SELECT partner but000~partner_guid INTO CORRESPONDING FIELDS OF TABLE lt_but000
      FROM but000
      JOIN cvi_cust_link AS link ON link~partner_guid = but000~partner_guid
      WHERE customer  IN s_part
        AND type     IN s_type
        AND name_org1 IN s_name.
  ELSE.

    SELECT partner partner_guid INTO CORRESPONDING FIELDS OF TABLE lt_but000
     FROM but000
     WHERE partner  IN s_part
       AND type     IN s_type
       AND name_org1 IN s_name.

  ENDIF.
  IF lt_but000[] IS NOT INITIAL.
    SELECT partner link~partner_guid customer INTO CORRESPONDING FIELDS OF TABLE lt_customer
        FROM cvi_cust_link AS link
        JOIN but000  ON link~partner_guid = but000~partner_guid
        FOR ALL ENTRIES IN lt_but000
        WHERE link~partner_guid  = lt_but000-partner_guid.

    SORT lt_customer BY partner.
    DELETE ADJACENT DUPLICATES FROM lt_customer COMPARING partner.

    IF lt_customer[] IS NOT INITIAL.
      SELECT * INTO TABLE lt_knkk
        FROM knkk
        FOR ALL ENTRIES IN lt_customer
        WHERE kunnr = lt_customer-customer.

      SELECT * INTO TABLE lt_zseitsd_car_cred
        FROM zsei_mig_carcred.

    ENDIF.
  ENDIF.

  SORT lt_customer BY partner.
  SORT lt_knkk BY kunnr.
ENDFORM.

FORM alv.


  SELECT * INTO TABLE lt_ukmbp_cms_sgm
    FROM ukmbp_cms_sgm
    FOR ALL ENTRIES IN lt_customer
    WHERE partner = lt_customer-partner
     AND credit_sgmnt = p_crite.

  SELECT * INTO TABLE lt_bp3100
   FROM bp3100
   FOR ALL ENTRIES IN lt_customer
   WHERE partner = lt_customer-partner
    AND criter = p_crite
    AND addtype = p_type.


  LOOP AT lt_customer INTO ls_customer.
    CLEAR: ls_alv,ls_knkk,ls_ukmbp_cms_sgm,ls_bp3100.
    ls_alv-partner = ls_customer-partner.
    ls_alv-customer = ls_customer-customer.
    READ TABLE lt_knkk INTO ls_knkk WITH KEY kunnr = ls_customer-customer.
    IF sy-subrc = 0.
      ls_alv-kkber = ls_knkk-kkber.
      ls_alv-sbgrp = ls_knkk-sbgrp.
      ls_alv-dbekr = ls_knkk-dbekr.
      ls_alv-kraus = ls_knkk-kraus. "DED (03.09.2020)
      ls_alv-dbrtg = ls_knkk-dbrtg. "DED (03.09.2020)

    ENDIF.

    READ TABLE lt_ukmbp_cms_sgm INTO ls_ukmbp_cms_sgm WITH KEY partner = ls_customer-partner.
    IF sy-subrc = 0.
* Se comenta porque es un ejemplo de KH
*      ls_alv-zzkraus = ls_ukmbp_cms_sgm-zzkraus.
*      ls_alv-zzdbrat = ls_ukmbp_cms_sgm-zzdbrat.
*      ls_alv-zzpoliza = ls_ukmbp_cms_sgm-zzpoliza.
*      ls_alv-zzexpediente = ls_ukmbp_cms_sgm-zzexpediente.
    ENDIF.

    READ TABLE lt_bp3100 INTO ls_bp3100 WITH KEY partner = ls_customer-partner.
    IF sy-subrc = 0.
      ls_alv-criter = ls_bp3100-criter.
      ls_alv-addtype = ls_bp3100-addtype.
      ls_alv-data_type = ls_bp3100-data_type.
      ls_alv-amnt = ls_bp3100-amnt.
      ls_alv-datefr = ls_bp3100-datefr.
      ls_alv-dateto = ls_bp3100-dateto.
    ENDIF.

    APPEND ls_alv TO lt_alv.
  ENDLOOP.


  IF lt_alv[] IS NOT INITIAL.
    PERFORM print_alv.
  ENDIF.
ENDFORM.

FORM print_alv.
  PERFORM create_fieldcatalog USING lt_alv 'LT_ALV'  CHANGING tl_fieldcat.
  vl_repid                    = sy-repid.
  vl_layout-zebra             = 'X'.
  vl_layout-colwidth_optimize = 'X'.
*  vl_layout-box_fieldname     = 'KUNNR'.
  vl_repid                    = sy-repid.


  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program       = vl_repid
      i_callback_pf_status_set = 'SET_PF_STATUS'
*     i_grid_title             = pi_titulo_alv
      is_layout                = vl_layout
      it_fieldcat              = tl_fieldcat
*     is_variant               = wa_variant
      i_save                   = 'X'
      i_callback_user_command  = 'USER_COMMAND'
    TABLES
      t_outtab                 = lt_alv
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

ENDFORM.

FORM create_fieldcatalog
       USING     pt_table     TYPE ANY TABLE
                 pi_tabname   TYPE slis_tabname
       CHANGING  pt_fieldcat  TYPE slis_t_fieldcat_alv."lvc_t_fcat.

  DATA:
    lr_tabdescr TYPE REF TO cl_abap_structdescr
  , lr_data     TYPE REF TO data
  , lt_dfies    TYPE ddfields
  , ls_dfies    TYPE dfies
  , ls_fieldcat TYPE slis_fieldcat_alv"lvc_s_fcat
  .


  CLEAR pt_fieldcat.

  CREATE DATA lr_data LIKE LINE OF pt_table.

  lr_tabdescr ?= cl_abap_structdescr=>describe_by_data_ref( lr_data ).

  lt_dfies = cl_salv_data_descr=>read_structdescr( lr_tabdescr ).

  LOOP AT lt_dfies
  INTO    ls_dfies.

    CLEAR ls_fieldcat.

    MOVE-CORRESPONDING ls_dfies TO ls_fieldcat.
    ls_fieldcat-seltext_l = ls_dfies-scrtext_l.
    ls_fieldcat-seltext_m = ls_dfies-scrtext_m.
    ls_fieldcat-seltext_s = ls_dfies-scrtext_s.

    ls_fieldcat-tabname = pi_tabname.

    APPEND ls_fieldcat TO pt_fieldcat.

  ENDLOOP.

ENDFORM.


FORM set_pf_status USING rt_extab TYPE slis_t_extab.
  SET PF-STATUS 'ZSTANDARD'.
ENDFORM.


FORM user_command USING rf_ucomm TYPE sy-ucomm
                      rs       TYPE slis_selfield.

  IF rf_ucomm EQ '&SAV'.

  ENDIF.
ENDFORM.


INCLUDE zsei_mig_00006_f01.
