*---------------------------------------------------------------------*
* Report ZSEI_MIG_00025
*---------------------------------------------------------------------*
REPORT zsei_mig_00025.

TYPE-POOLS: slis.

TABLES: mard,mdlv,mdlg,ekpo,ekko.

TYPES:
  BEGIN OF ty_area,
    mdlv_berid    TYPE mdlv-berid,
    mdlv_berty    TYPE mdlv-berty,
    mdlv_bertx    TYPE mdlv-bertx,
    mdlv_werzg    TYPE mdlv-werzg,
    mdlv_ortzg    TYPE mdlv-ortzg,
    mdlg_berid    TYPE mdlg-berid,
    mdlg_werks    TYPE mdlg-werks,
    mdlg_lgort    TYPE mdlg-lgort,
    mdll_berid    TYPE mdll-berid,
    mdll_werks    TYPE mdll-werks,
    mdll_lbear    TYPE mdll-lbear,
    duplicado     TYPE icon_d,
    registro_bdd  TYPE icon_d,
    tipo_registro TYPE text,
  END OF ty_area.

TYPES:
  BEGIN OF ty_read,
    ebeln TYPE ekko-ebeln,
    lifnr TYPE ekko-lifnr,
    werks TYPE ekpo-werks,
  END OF ty_read.

TYPES:
  BEGIN OF ty_mdlg_aux,
    berid TYPE mdlg-berid,
    werks TYPE mdlg-werks,
    lgort TYPE mdlg-lgort,
  END OF ty_mdlg_aux.

TYPES:
  BEGIN OF ty_mdll_aux,
    berid TYPE mdll-berid,
    werks TYPE mdll-werks,
    lbear TYPE mdll-lbear,
  END OF ty_mdll_aux.

TYPES:
  BEGIN OF ty_mdlv_aux,
    berid TYPE mdlv-berid,
  END OF ty_mdlv_aux.

DATA:
  lt_alv      TYPE TABLE OF ty_area,
  ls_alv      TYPE ty_area,
  lt_mard     TYPE TABLE OF mard,
  ls_mard     TYPE mard,
  lt_ekpo     TYPE TABLE OF ekpo,
  ls_ekpo     TYPE ekpo,
  lt_mdll     TYPE TABLE OF mdll,
  ls_mldd     TYPE mdll,
  lt_mdlg     TYPE TABLE OF mdlg,
  ls_mdlg     TYPE mdlg,
  lt_read     TYPE TABLE OF ty_read,
  ls_read     TYPE ty_read,
  lt_alv_aux  TYPE TABLE OF ty_area,
  ls_alv_aux  TYPE ty_area,
  lt_mdlv     TYPE TABLE OF mdlv,
  ls_mdlv     TYPE mdlv,
  ls_mdlg_aux TYPE ty_mdlg_aux,
  ls_mdlv_aux TYPE ty_mdlv_aux,
  ls_mdll_aux TYPE ty_mdll_aux,
  vl_indice   TYPE i,
  gt_fieldcat TYPE lvc_t_fcat,
  gs_fieldcat TYPE lvc_s_fcat,
  gs_layout   TYPE lvc_s_layo,
  lt_log      TYPE STANDARD TABLE OF bapiret2,
  ls_log      TYPE bapiret2,
  gx_variant  TYPE disvariant,
  g_variant   TYPE disvariant,
  g_repid     TYPE sy-repid,
  g_save      TYPE c VALUE 'A',
  g_exit      TYPE c.

SELECTION-SCREEN BEGIN OF BLOCK var.
SELECT-OPTIONS: s_werks FOR ekpo-werks.
PARAMETERS:     p_go TYPE c AS CHECKBOX.
SELECTION-SCREEN END OF BLOCK var.

INITIALIZATION.

START-OF-SELECTION.
  PERFORM get_data.
  PERFORM get_data2.

  IF lt_alv[] IS NOT INITIAL.
    PERFORM alv_layout.
    PERFORM alv_field_catalog.
    PERFORM alv_display.
  ENDIF.


*---------------------------------------------------------------------*
* Form GET_DATA
*---------------------------------------------------------------------*
FORM get_data.

  SELECT DISTINCT werks lgort INTO CORRESPONDING FIELDS OF TABLE lt_mard
    FROM mard
    WHERE diskz NE '' AND
    werks IN s_werks.

  LOOP AT lt_mard INTO ls_mard.
    CLEAR: ls_alv.
    CONCATENATE ls_mard-werks ls_mard-lgort INTO ls_alv-mdlv_berid.
    ls_alv-mdlv_berty = '02'.
    ls_alv-tipo_registro = 'Storage'.

    CONCATENATE 'Plant ' ls_mard-werks ' Storage ' ls_mard-lgort INTO ls_alv-mdlv_bertx SEPARATED BY space.
    ls_alv-mdlv_werzg = ls_mard-werks.
    ls_alv-mdlv_ortzg = ls_mard-lgort.
    ls_alv-mdlg_berid = ls_alv-mdlv_berid.
    ls_alv-mdlg_werks = ls_alv-mdlv_werzg.
    ls_alv-mdlg_lgort = ls_alv-mdlv_ortzg.
    ls_alv-duplicado = icon_green_light.

    APPEND ls_alv TO lt_alv.
  ENDLOOP.

ENDFORM.


FORM get_data2.

  DATA: lv_size TYPE i.

  SELECT a~ebeln, b~werks, a~lifnr
    FROM ekko AS a
    INNER JOIN ekpo AS b
    ON a~ebeln EQ b~ebeln
    INTO CORRESPONDING FIELDS OF TABLE @lt_read
    WHERE b~pstyp EQ '3' AND
    b~werks IN @s_werks.

  LOOP AT lt_read INTO ls_read.
    CLEAR: ls_alv.
    READ TABLE lt_alv WITH KEY mdll_lbear = ls_read-lifnr  mdlv_werzg = ls_read-werks TRANSPORTING NO FIELDS.
    IF sy-subrc EQ 0.
*       Ya existe un registro con esa combinacion ignoramos
    ELSE.
*       no exite lo añadimos
      CLEAR: ls_alv.
*           ls_ekpo  datos de posicion
*           ls_ekko   datos de cabecera
      lv_size =  strlen( ls_read-lifnr ).

      IF lv_size LE 4.
        CONCATENATE ls_read-werks ls_read-lifnr INTO ls_alv-mdlv_berid.
      ELSE.
        CONCATENATE ls_read-werks ls_read-lifnr+4(6) INTO ls_alv-mdlv_berid.
      ENDIF.

      ls_alv-mdlv_berty = '03'.
      ls_alv-tipo_registro = 'Subcontractor'.
      CONCATENATE 'Plant ' ls_read-werks  ' Subcontractor ' ls_read-lifnr INTO ls_alv-mdlv_bertx SEPARATED BY space.
      ls_alv-mdlv_werzg = ls_read-werks.
      ls_alv-mdll_werks = ls_read-werks.
      ls_alv-mdll_berid = ls_alv-mdlv_berid.
      ls_alv-mdll_lbear = ls_read-lifnr.
      ls_alv-duplicado = icon_green_light.
      APPEND ls_alv TO lt_alv.

    ENDIF.

  ENDLOOP.

  PERFORM find_bdd.

  PERFORM find_duplicates_2.

ENDFORM.

*---------------------------------------------------------------------*
* Form ALV_LAYOUT
*---------------------------------------------------------------------*
FORM alv_layout.

  gs_layout-zebra      = 'X'.
  gs_layout-cwidth_opt = 'X'.

ENDFORM.

*---------------------------------------------------------------------*
* Form ALV_FIELDCAT
*---------------------------------------------------------------------*
FORM alv_field_catalog.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'TIPO_REGISTRO'.
  gs_fieldcat-scrtext_s = 'TIPO_REGISTRO'.
  gs_fieldcat-scrtext_m = 'TIPO_REGISTRO'.
  gs_fieldcat-scrtext_l = 'TIPO_REGISTRO'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MDLV_BERID'.
  gs_fieldcat-ref_table = 'MDLV'.
  gs_fieldcat-scrtext_s = 'MDLV_BERID'.
  gs_fieldcat-scrtext_m = 'MDLV_BERID'.
  gs_fieldcat-scrtext_l = 'MDLV_BERID'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MDLV_BERTY'.
  gs_fieldcat-ref_table = 'MDLV'.
  gs_fieldcat-scrtext_s = 'MDLV_BERTY'.
  gs_fieldcat-scrtext_m = 'MDLV_BERTY'.
  gs_fieldcat-scrtext_l = 'MDLV_BERTY'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MDLV_BERTX'.
  gs_fieldcat-ref_table = 'MDLV'.
  gs_fieldcat-scrtext_s = 'MDLV_BERTX'.
  gs_fieldcat-scrtext_m = 'MDLV_BERTX'.
  gs_fieldcat-scrtext_l = 'MDLV_BERTX'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MDLV_WERZG'.
  gs_fieldcat-ref_table = 'MDLV'.
  gs_fieldcat-scrtext_s = 'MDLV_WERZG'.
  gs_fieldcat-scrtext_m = 'MDLV_WERZG'.
  gs_fieldcat-scrtext_l = 'MDLV_WERZG'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MDLV_ORTZG'.
  gs_fieldcat-ref_table = 'MDLV'.
  gs_fieldcat-scrtext_s = 'MDLV_ORTZG'.
  gs_fieldcat-scrtext_m = 'MDLV_ORTZG'.
  gs_fieldcat-scrtext_l = 'MDLV_ORTZG'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MDLG_BERID'.
  gs_fieldcat-ref_table = 'MDLG'.
  gs_fieldcat-scrtext_s = 'MDLG_BERID'.
  gs_fieldcat-scrtext_m = 'MDLG_BERID'.
  gs_fieldcat-scrtext_l = 'MDLG_BERID'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MDLG_WERKS'.
  gs_fieldcat-ref_table = 'MDLG'.
  gs_fieldcat-scrtext_s = 'MDLG_WERKS'.
  gs_fieldcat-scrtext_m = 'MDLG_WERKS'.
  gs_fieldcat-scrtext_l = 'MDLG_WERKS'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MDLG_LGORT'.
  gs_fieldcat-ref_table = 'MDLG'.
  gs_fieldcat-scrtext_s = 'MDLG_LGORT'.
  gs_fieldcat-scrtext_m = 'MDLG_LGORT'.
  gs_fieldcat-scrtext_l = 'MDLG_LGORT'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MDLL_BERID'.
  gs_fieldcat-ref_table = 'MDLL'.
  gs_fieldcat-scrtext_s = 'MDLL_BERID'.
  gs_fieldcat-scrtext_m = 'MDLL_BERID'.
  gs_fieldcat-scrtext_l = 'MDLL_BERID'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MDLL_WERKS'.
  gs_fieldcat-ref_table = 'MDLL'.
  gs_fieldcat-scrtext_s = 'MDLL_WERKS'.
  gs_fieldcat-scrtext_m = 'MDLL_WERKS'.
  gs_fieldcat-scrtext_l = 'MDLL_WERKS'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MDLL_LBEAR'.
  gs_fieldcat-ref_table = 'MDLL'.
  gs_fieldcat-scrtext_s = 'MDLL_LBEAR'.
  gs_fieldcat-scrtext_m = 'MDLL_LBEAR'.
  gs_fieldcat-scrtext_l = 'MDLL_LBEAR'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'DUPLICADO'.
  gs_fieldcat-scrtext_s = 'DUPLICADO'.
  gs_fieldcat-scrtext_m = 'DUPLICADO'.
  gs_fieldcat-scrtext_l = 'DUPLICADO'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'REGISTRO_BDD'.
  gs_fieldcat-scrtext_s = 'R_BDD'.
  gs_fieldcat-scrtext_m = 'REGISTRO_BDD'.
  gs_fieldcat-scrtext_l = 'REGISTRO_BDD'.
  APPEND gs_fieldcat TO gt_fieldcat.



ENDFORM.

*---------------------------------------------------------------------*
* Form ALV_DISPLAY
*---------------------------------------------------------------------*
FORM alv_display.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      i_callback_program       = sy-repid
      i_callback_pf_status_set = 'STATUS_SET'
      i_callback_user_command  = 'F_USER_COMMAND'
      is_layout_lvc            = gs_layout
      it_fieldcat_lvc          = gt_fieldcat
*     i_default                = 'X'
      i_save                   = 'A'
*     is_variant               = g_variant
    TABLES
      t_outtab                 = lt_alv[]
    EXCEPTIONS
      program_error            = 1
      OTHERS                   = 2.

ENDFORM.

FORM status_set USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS 'ZSTANDARD'.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  F_USER_COMMAND
*---------------------------------------------------------------------*
FORM f_user_command USING p_ucomm TYPE sy-ucomm
                          wa_selfield TYPE slis_selfield.


  DATA:
    lv_rows      TYPE i,
    lv_rows_ns   TYPE i VALUE 0,
    ls_mdlv_save TYPE mdlv,
    ls_mdll_save TYPE mdll,
    ls_mdlg_save TYPE mdlg.

  CASE p_ucomm.
    WHEN 'SAVE'.

      DESCRIBE TABLE lt_alv LINES lv_rows.

*     Loopear la tabla de los registros que NO tienen duplicado y NO existen en la BDD
      LOOP AT lt_alv INTO ls_alv.

        IF ls_alv-duplicado EQ icon_red_light OR ls_alv-registro_bdd EQ icon_red_light.

          lv_rows_ns = lv_rows_ns + 1.

        ELSE.

          IF  p_go IS NOT INITIAL.

*           Por cada registro hacer un MODIFY a la BDD de la tablas MDLL, MDLV, MDLG según convenga
            ls_mdlv_save-berid = ls_alv-mdlv_berid.
            ls_mdlv_save-berty = ls_alv-mdlv_berty.
            ls_mdlv_save-bertx = ls_alv-mdlv_bertx.
            ls_mdlv_save-werzg = ls_alv-mdlv_werzg.
            ls_mdlv_save-ortzg = ls_alv-mdlv_ortzg.

            IF ls_alv-tipo_registro EQ 'Storage'.

              ls_mdlg_save-berid = ls_alv-mdlg_berid.
              ls_mdlg_save-werks = ls_alv-mdlg_werks.
              ls_mdlg_save-lgort = ls_alv-mdlg_lgort.
              MODIFY mdlg FROM ls_mdlg_save.

            ELSEIF ls_alv-tipo_registro EQ 'Subcontractor'.

              ls_mdll_save-berid = ls_alv-mdll_berid.
              ls_mdll_save-werks = ls_alv-mdll_werks.
              ls_mdll_save-lbear = ls_alv-mdll_lbear.
              MODIFY mdll FROM ls_mdll_save.

            ENDIF.

            MODIFY mdlv FROM ls_mdlv_save.

          ENDIF.

        ENDIF.

      ENDLOOP.

*     Mostrar la usuario un POPUP diciendo cuando registros se han seleccionado y cuantos no se han seleccionado pq no cumplen los criterios ( NO tienen duplicado y NO existen en la BDD)
      PERFORM add_message    TABLES lt_log USING 'S' 'FIN_CORR' '000' 'Registros seleccionados a tratar'  lv_rows '' ''.
      PERFORM add_message    TABLES lt_log USING 'E' 'FIN_CORR' '000' 'Registros que no se pueden tratar' lv_rows_ns '' ''.
      PERFORM show_error_log USING 'ZMIG_LOG' 'ZMIG_LOG' 'X' ''.
      PERFORM refresh_log    TABLES lt_log.

  ENDCASE.

  wa_selfield-refresh    = 'X'.
  wa_selfield-col_stable = 'X'.
  wa_selfield-row_stable = 'X'.

ENDFORM.


*---------------------------------------------------------------------*
* Form refresh_log
*---------------------------------------------------------------------*
FORM refresh_log  TABLES lt_result STRUCTURE bapiret2.

  REFRESH: lt_result.

ENDFORM.

*---------------------------------------------------------------------*
* Form ADD_MESSAGE
*---------------------------------------------------------------------*
FORM add_message  TABLES lt_result STRUCTURE bapiret2 USING p_msgty p_msgid p_msgno p_msgv1 p_msgv2 p_msgv3 p_msgv4.

  DATA:
    ls_result LIKE LINE OF lt_result.

  CLEAR: ls_result.
  ls_result-type       = p_msgty.
  ls_result-id         = p_msgid.
  ls_result-number     = p_msgno.
  ls_result-message_v1 = p_msgv1.
  ls_result-message_v2 = p_msgv2.
  ls_result-message_v3 = p_msgv3.
  ls_result-message_v4 = p_msgv4.
  APPEND ls_result TO lt_result.

ENDFORM.

*--------------------------- ------------------------------------------*
* Form SHOW_ERROR_LOG
*---------------------------------------------------------------------*
FORM show_error_log USING object subobject popup save.

  DATA:
    lt_log_handle       TYPE bal_t_logh,
    l_s_display_profile TYPE bal_s_prof,
    gv_log_handle       TYPE balloghndl,
    l_s_log             TYPE bal_s_log,
    l_s_msg             TYPE bal_s_msg.

  CLEAR: sy-batch.

* Define some header data of this log
  l_s_log-extnumber  = 'Log'.
  l_s_log-object     = object.
  l_s_log-subobject  = subobject.
  l_s_log-aldate     = sy-datum.
  l_s_log-altime     = sy-uzeit.
  l_s_log-aluser     = sy-uname.
  l_s_log-alprog     = sy-repid.
  l_s_log-del_before = 'X'.
  l_s_log-aldate_del = sy-datum + '00000014'.

  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log                 = l_s_log
    IMPORTING
      e_log_handle            = gv_log_handle
    EXCEPTIONS
      log_header_inconsistent = 1
      OTHERS                  = 2.

  APPEND gv_log_handle TO lt_log_handle.

  LOOP AT lt_log INTO ls_log.

    l_s_msg-msgty     = ls_log-type.
    l_s_msg-msgid     = ls_log-id.
    l_s_msg-msgno     = ls_log-number.
    l_s_msg-msgv1     = ls_log-message_v1.
    l_s_msg-msgv2     = ls_log-message_v2.
    l_s_msg-msgv3     = ls_log-message_v3.
    l_s_msg-msgv4     = ls_log-message_v4.

    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle     = gv_log_handle
        i_s_msg          = l_s_msg
      EXCEPTIONS
        log_not_found    = 1
        msg_inconsistent = 2
        log_is_full      = 3
        OTHERS           = 4.

  ENDLOOP.

* Get a prepared profile
  IF popup IS NOT INITIAL.
    CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
      IMPORTING
        e_s_display_profile = l_s_display_profile.
  ELSE.
    CALL FUNCTION 'BAL_DSP_PROFILE_NO_TREE_GET'
      IMPORTING
        e_s_display_profile = l_s_display_profile.
  ENDIF.

  l_s_display_profile-use_grid   = 'X'.
  l_s_display_profile-cwidth_opt = 'X'.

  IF save IS NOT INITIAL.
    CALL FUNCTION 'BAL_DB_SAVE'
      EXPORTING
        i_save_all       = 'X'
      EXCEPTIONS
        log_not_found    = 1
        save_not_allowed = 2
        numbering_error  = 3
        OTHERS           = 4.
  ENDIF.

  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile  = l_s_display_profile
      i_t_log_handle       = lt_log_handle
    EXCEPTIONS
      profile_inconsistent = 1
      internal_error       = 2
      no_data_available    = 3
      no_authority         = 4
      OTHERS               = 5.

ENDFORM.


*---------------------------------------------------------------------*
* FORMS bapi_commit
*---------------------------------------------------------------------*
FORM bapi_commit.

  CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
    EXPORTING
      wait = 'X'.

ENDFORM.

*---------------------------------------------------------------------*
* FORMS bapi_ROLLBACK
*---------------------------------------------------------------------*
FORM bapi_rollback.

  CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

ENDFORM.
*---------------------------------------------------------------------*
*      Form  STATUS_SET
*---------------------------------------------------------------------*

*INCLUDE ZIMIG_AREA_PLANIF_F01_V2.
*&---------------------------------------------------------------------*
*& Form find_duplicates
*&---------------------------------------------------------------------*

FORM find_duplicates .
  LOOP AT lt_alv INTO ls_alv.
    vl_indice = sy-tabix.
*     copia la tabla original a una nueva
    lt_alv_aux[] = lt_alv[].
*     elimino el registro propio
    DELETE lt_alv_aux INDEX vl_indice.
*     busco algun registro con mi mismo id
    SORT lt_alv_aux BY mdlv_berid.
    READ TABLE lt_alv_aux WITH KEY mdlv_berid = ls_alv-mdlv_berid TRANSPORTING NO FIELDS BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alv-duplicado = icon_red_light.
*     Modificar elemento de la tabla
      MODIFY lt_alv FROM ls_alv INDEX vl_indice.
    ENDIF.
  ENDLOOP.
ENDFORM.
FORM find_duplicates_2.
  SORT lt_alv BY mdlv_berid.
  lt_alv_aux[] = lt_alv.
  LOOP AT lt_alv INTO ls_alv.
    vl_indice = sy-tabix.
    DELETE lt_alv_aux INDEX vl_indice.
    READ TABLE lt_alv_aux WITH KEY mdlv_berid = ls_alv-mdlv_berid TRANSPORTING NO FIELDS BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_alv-duplicado = icon_red_light.
      MODIFY lt_alv FROM ls_alv INDEX vl_indice.
    ENDIF.
    INSERT ls_alv INTO lt_alv_aux INDEX vl_indice.
  ENDLOOP.
  SORT lt_alv BY tipo_registro mdlv_berid.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form find_bdd
*&---------------------------------------------------------------------*

FORM find_bdd .
  SELECT *
FROM mdll
INTO TABLE lt_mdll.
  SORT lt_mdll BY berid werks lbear.

  SELECT *
  FROM mdlg
  INTO TABLE lt_mdlg.
  SORT lt_mdlg BY berid werks lgort.

  SELECT *
  FROM mdlv
  INTO TABLE lt_mdlv.
  SORT lt_mdlv BY berid.

  LOOP AT lt_alv INTO ls_alv.


    vl_indice = sy-tabix.
    IF ls_alv-tipo_registro = 'Storage'.

      READ TABLE lt_mdlg  WITH KEY berid = ls_alv-mdlg_berid
                                werks = ls_alv-mdlg_werks
                                lgort = ls_alv-mdlg_lgort
                                TRANSPORTING NO FIELDS
                                BINARY SEARCH.


      IF sy-subrc EQ 0.
        ls_alv-registro_bdd = icon_red_light.
      ELSE.

        READ TABLE lt_mdlv  WITH KEY  berid = ls_alv-mdlv_berid
                                 TRANSPORTING NO FIELDS
                                 BINARY SEARCH.

        IF sy-subrc EQ 0.
          ls_alv-registro_bdd = icon_red_light.
        ELSE.
          ls_alv-registro_bdd = icon_green_light.
        ENDIF.
      ENDIF.
      MODIFY lt_alv FROM ls_alv INDEX vl_indice.

    ELSEIF ls_alv-tipo_registro = 'Subcontractor'.
      READ TABLE lt_mdll  WITH KEY berid = ls_alv-mdll_berid
                          werks = ls_alv-mdll_werks
                          lbear = ls_alv-mdll_lbear
                          TRANSPORTING NO FIELDS
                          BINARY SEARCH.

      IF sy-subrc EQ 0.
        ls_alv-registro_bdd = icon_red_light.
      ELSE.
        READ TABLE lt_mdlv WITH KEY berid = ls_alv-mdlv_berid
                          TRANSPORTING NO FIELDS
                          BINARY SEARCH.

        IF sy-subrc EQ 0.
          ls_alv-registro_bdd = icon_red_light.
        ELSE.
          ls_alv-registro_bdd = icon_green_light.
        ENDIF.
      ENDIF.
    ENDIF.
    MODIFY lt_alv FROM ls_alv INDEX vl_indice.
  ENDLOOP.
ENDFORM.
