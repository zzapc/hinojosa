*&---------------------------------------------------------------------*
*& Report ZSEI_MIG_00055
*&---------------------------------------------------------------------*
*&Chequea si la version activa de un objeto de repositorio, tiene la
*&misma version que el mismo objeto en otro entorno consultado por RFC
*&---------------------------------------------------------------------*
REPORT zsei_mig_00055.

TABLES: e070, icon, sscrfields.

DATA: gv_ping.

SELECTION-SCREEN: BEGIN OF LINE.
SELECTION-SCREEN: COMMENT 1(12) text-t03.
SELECT-OPTIONS: s_orden FOR e070-trkorr NO INTERVALS OBLIGATORY.
SELECTION-SCREEN: END OF LINE.

SELECTION-SCREEN: BEGIN OF LINE.
SELECTION-SCREEN: COMMENT 1(15) text-t02.
PARAMETERS: p_rfc TYPE vers_dest-rfcdest OBLIGATORY.
SELECTION-SCREEN: POSITION 50.
SELECTION-SCREEN: COMMENT 52(5) text-t04.
SELECTION-SCREEN: POSITION 60.
SELECTION-SCREEN: PUSHBUTTON 60(4) pushb USER-COMMAND pus.
SELECTION-SCREEN: END OF LINE.


TYPES: BEGIN OF gty_alv,
         object   TYPE vrsd-objname,
         objtype  TYPE vrsd-objtype,
         rfcdesto TYPE vers_dest-rfcdest, "Origen
         korrnoo  TYPE vrs_disp-korrno,
         rfcdestd TYPE vers_dest-rfcdest, "Destino
         korrnod  TYPE vrs_disp-korrno,
         status   TYPE vrs_disp-status,
         icono    TYPE icon-id,
         compare  TYPE icon-id,           "Icono comparar
         comparer TYPE icon-id.           "Resultado comparar
TYPES: END OF   gty_alv.

DATA: gt_alv      TYPE TABLE OF gty_alv.
DATA: gt_alv_full TYPE TABLE OF gty_alv.

DATA: alv TYPE REF TO cl_salv_table .

CLASS lcl_handle_events DEFINITION DEFERRED.
DATA: gr_events TYPE REF TO lcl_handle_events.

CLASS lcl_handle_events DEFINITION.
  PUBLIC SECTION.
METHODS: on_user_command FOR EVENT added_function OF cl_salv_events IMPORTING e_salv_function,
on_double_click FOR EVENT double_click OF cl_salv_events_table IMPORTING row column,
on_link_click FOR EVENT link_click OF cl_salv_events_table IMPORTING row column,
on_single_click FOR EVENT link_click OF cl_salv_events_table IMPORTING row column.
ENDCLASS.                    "lcl_handle_events DEFINITION

CLASS lcl_handle_events IMPLEMENTATION.
  METHOD on_user_command.
    PERFORM handle_user_command USING e_salv_function.
  ENDMETHOD.                    "on_user_command

  METHOD on_double_click.
*    perform show_cell_info using 0 row column text-i07.
  ENDMETHOD.                    "on_double_click

  METHOD on_link_click.
    PERFORM navigate_tr USING row column.
  ENDMETHOD.                    "on_single_click

  METHOD on_single_click.
*    perform show_cell_info using 0 row column text-i04.
    PERFORM single_click USING row column.
  ENDMETHOD.

ENDCLASS.


AT SELECTION-SCREEN OUTPUT.

  PERFORM pbo.

AT SELECTION-SCREEN.

  PERFORM pushbuttons.

START-OF-SELECTION.

  PERFORM get_data.

END-OF-SELECTION.

  PERFORM mostrar_alv.


FORM get_data.

  DATA: ls_version TYPE vrs_disp.
  DATA: ls_alv     TYPE gty_alv.
*       No bloqueados
*X      bloqueado
*0      No importados
*1      Importado con errores
*2      Importado con éxito
*3      Activado con éxito/Método after-import ejecutado
*6      Importado con éxito a tablas muestra
*7      Importado con éxito a tablas muestra nuevas
*8      Parte inactiva importada con éxito
*9      Parte separada importada con éxito

  IF gv_ping IS INITIAL.
MESSAGE s398(00) WITH text-m01 p_rfc text-m02 DISPLAY LIKE 'E'.  "Antes de comenzar, compruebe si la conexion & está abierta
    RETURN.
  ELSEIF gv_ping = 8.
MESSAGE s398(00) WITH text-m03 p_rfc text-m04 DISPLAY LIKE 'E'.  "La conexion & no está abierta
    RETURN.
  ENDIF.

  SELECT * FROM e071 INTO TABLE @DATA(lt_objetos_activos)
    WHERE trkorr IN @s_orden
    AND   lockflag <> @abap_false.

  SORT lt_objetos_activos BY trkorr.


  LOOP AT lt_objetos_activos INTO DATA(ls_objetos).

    CLEAR: ls_alv.

*          Leemos la version del sistema
    PERFORM get_version USING abap_false ls_objetos CHANGING ls_alv.

*          Leemos la versin remota
    PERFORM get_version USING p_rfc ls_objetos CHANGING ls_alv.

    IF ls_alv-korrnoo IS NOT INITIAL AND ls_alv-korrnod IS NOT INITIAL.
      IF  ls_alv-korrnoo = ls_alv-korrnod.
        ls_alv-icono = icon_checked.
      ELSE.
        ls_alv-icono = icon_incomplete.
      ENDIF.
    ELSEIF ls_alv-status IS NOT INITIAL.
      ls_alv-icono = icon_dummy.
    ENDIF.

    PERFORM get_icon_compare CHANGING ls_alv.

    APPEND ls_alv TO gt_alv.

*    perform get_version using abap_false ls_objetos changing ls_version.
*    if ls_version is not initial.
*      if ls_version-status = text-t01.
*
*        write: ls_objetos-object, ls_objetos-obj_name(50), ls_version-status, /.
*
*      else.
*        write: ls_objetos-object, ls_objetos-obj_name(50), ls_version-sid(3), ls_version-korrno, /.
**          Leemos la versin remota
*        perform get_version using p_rfc ls_objetos changing ls_version.
*        write: ls_objetos-object, ls_objetos-obj_name(50), ls_version-rfcdest(3), ls_version-korrno, /.
*      endif.
*
*    else.
*      write: 'NO ACTIVO', ls_objetos-pgmid, ls_objetos-obj_name.
*    endif.


  ENDLOOP.


ENDFORM.

FORM get_version USING i_rfc ls_objetos TYPE e071
*              changing c_version type vrs_disp.
              CHANGING c_alv TYPE gty_alv.

  DATA: lt_version TYPE tt_vrs_disp.


  TRY.
      CALL FUNCTION 'SVRS_GET_VERSIONS'
*      DESTINATION i_rfc
        EXPORTING
          iv_objtype  = CONV vrsd-objtype( ls_objetos-object )
          iv_objname  = CONV vrsd-objname( ls_objetos-obj_name )
          iv_rfcdest  = CONV vers_dest-rfcdest( i_rfc )
        IMPORTING
          et_vrs_disp = lt_version.

    CATCH cx_vers_ui_exception.

  ENDTRY.

*  Si no encuentra la version en un primer barrido, es posible que el objeto tenga un objeto de repositorio de mapeo. Chequeamos la tabla EUOBJV
*  Ejemplo: Tipos de objeto PROG, el mapeo es REPS
  IF lines( lt_version[] ) = 0.

SELECT SINGLE e071 INTO @DATA(lv_object_type_mapp) FROM euobjv WHERE id = @ls_objetos-object.

    IF sy-subrc = 0.

      IF lv_object_type_mapp = 'FUGR'.
        DATA(lv_object_name_mapp) = 'SAPL' && ls_objetos-obj_name.
        lv_object_type_mapp = 'REPS'.
      ELSE.
        lv_object_name_mapp = ls_objetos-obj_name.
      ENDIF.

      TRY.
          CALL FUNCTION 'SVRS_GET_VERSIONS'
*      DESTINATION i_rfc
            EXPORTING
              iv_objtype  = CONV vrsd-objtype( lv_object_type_mapp )
              iv_objname  = CONV vrsd-objname( lv_object_name_mapp )
              iv_rfcdest  = CONV vers_dest-rfcdest( i_rfc )
            IMPORTING
              et_vrs_disp = lt_version.

        CATCH cx_vers_ui_exception.

      ENDTRY.

    ENDIF.

  ENDIF.

  IF lines( lt_version[] ) = 0.
    c_alv-object    = ls_objetos-obj_name.
    c_alv-objtype   = ls_objetos-object.
    CASE i_rfc.
      WHEN abap_false.      c_alv-rfcdesto  = sy-sysid.
      WHEN OTHERS.  c_alv-rfcdestd  = i_rfc.
    ENDCASE.
*c_alv-korrnoo   =
*c_alv-korrnod   =
    c_alv-status    = text-t01.

    RETURN.

  ENDIF.
*

*  READ TABLE lt_version INDEX 1 INTO DATA(ls_version).
*  IF ls_version-versno = 'Activo'.
  LOOP AT lt_version INTO DATA(ls_version) WHERE korrno IS NOT INITIAL.
*    CLEAR: ls_version.
*    READ TABLE lt_version INDEX 2 INTO ls_version.

    IF ls_version IS NOT INITIAL.
      c_alv-object    = ls_objetos-obj_name.
      c_alv-objtype   = ls_objetos-object.
      CASE i_rfc.
        WHEN abap_false.
          c_alv-rfcdesto  = sy-sysid.
          c_alv-korrnoo   = ls_version-korrno.
        WHEN OTHERS.
          c_alv-rfcdestd  = i_rfc.
          c_alv-korrnod   = ls_version-korrno.
      ENDCASE.
      EXIT.
    ENDIF.
  ENDLOOP.
*  ENDIF.



ENDFORM.


FORM mostrar_alv.

  CHECK lines( gt_alv ) IS NOT INITIAL.

  gt_alv_full[] = gt_alv[].

  DATA:
    lo_functions TYPE REF TO cl_salv_functions_list,
    lo_columns   TYPE REF TO cl_salv_columns_table,
    lr_column    TYPE REF TO cl_salv_column_table,
    lo_display   TYPE REF TO cl_salv_display_settings,
    lo_select    TYPE REF TO cl_salv_selections,
    lo_column    TYPE REF TO cl_salv_column,
    lo_sorts     TYPE REF TO cl_salv_sorts,
    lo_layout    TYPE REF TO cl_salv_layout,
    ls_key       TYPE salv_s_layout_key,
    ls_variant   TYPE slis_vari.



  DATA: lr_events TYPE REF TO cl_salv_events_table.

  DATA: lr_columns_table TYPE REF TO cl_salv_columns_table,
        lr_column_table  TYPE REF TO cl_salv_column_table.

*    DATA: lr_events TYPE REF TO cl_salv_events_table.
*    DATA: event_handler TYPE REF TO lcl_handle_events.

  DATA: lv_repid TYPE sy-repid.


  TRY.

      CALL METHOD cl_salv_table=>factory
        IMPORTING
          r_salv_table = alv
        CHANGING
          t_table      = gt_alv.

      " Activa todas las funciones estandar del ALV
      lo_functions = alv->get_functions( ).
      lo_functions->set_all( abap_true ).

      " Obtiene las propiedades de visualización
      lo_display = alv->get_display_settings( ).

      " ALV con estilo Zebra
      lo_select = alv->get_selections( ).
      lo_select->set_selection_mode( if_salv_c_selection_mode=>none ).

      " Obtiene las columnas
      lo_columns = alv->get_columns( ).

      lv_repid = sy-repid.


      alv->set_screen_status(
      pfstatus      =  'STANDARD_FULLSCREEN'
      report        =  lv_repid
      set_functions = alv->c_functions_all ).

      lr_events = alv->get_event( ).
      CREATE OBJECT gr_events.

      SET HANDLER gr_events->on_user_command FOR lr_events.
      SET HANDLER gr_events->on_link_click FOR lr_events.
      SET HANDLER gr_events->on_single_click FOR lr_events.

      " Cambiar nombre de las columnas del informe
lo_column = lo_columns->get_column( 'KORRNOO' ). lo_column->set_short_text( 'Órden Orig'(002) ). lo_column->set_medium_text( 'Órden Origen'(003) ). lo_column->set_long_text( 'Órden Origen'(003) ).
lo_column = lo_columns->get_column( 'KORRNOD' ). lo_column->set_short_text( 'Órden Dest'(004) ). lo_column->set_medium_text( 'Órden Destino'(005) ). lo_column->set_long_text( 'Órden Destino'(005) ).


      "La columna Orden va a ser navegable a la SE01
DATA(o_colo) = CAST cl_salv_column_table( alv->get_columns( )->get_column( 'KORRNOO' ) ).
      o_colo->set_cell_type( if_salv_c_cell_type=>hotspot ).
DATA(o_cold) = CAST cl_salv_column_table( alv->get_columns( )->get_column( 'KORRNOD' ) ).
      o_cold->set_cell_type( if_salv_c_cell_type=>hotspot ).

*      La columna de comparacion de versiones es de tipo pushbutton
DATA(o_comp) = CAST cl_salv_column_table( alv->get_columns( )->get_column( 'COMPARE' ) ).
      o_comp->set_cell_type( if_salv_c_cell_type=>hotspot ).
      o_comp->set_icon( if_salv_c_bool_sap=>true ).
      o_comp->set_long_text( 'Comparar Versiones' ).

DATA(o_compr) = CAST cl_salv_column_table( alv->get_columns( )->get_column( 'COMPARER' ) ).
      o_compr->set_icon( if_salv_c_bool_sap=>true ).
      o_compr->set_long_text( 'Resultado' ).

      " Optimiza la salida
      lo_columns->set_optimize( 'X' ).

      " Layout
      lo_layout = alv->get_layout( ).
      ls_key-report = sy-repid.
      lo_layout->set_key( ls_key ).
      lo_layout->set_save_restriction( cl_salv_layout=>restrict_none ).
*    ls_variant = p_vari.
      lo_layout->set_initial_layout( ls_variant ).

*      PERFORM set_header_alv.


    CATCH cx_salv_not_found.
    CATCH cx_salv_msg.
    CATCH cx_salv_data_error.
    CATCH cx_salv_existing.
  ENDTRY.

  " Mostrar Log
  alv->display( ).

ENDFORM.

FORM navigate_tr USING i_fila i_columna.

  CASE i_columna.

    WHEN 'KORRNOO'.

      DATA(lv_orden) = gt_alv[ i_fila ]-korrnoo.

    WHEN 'KORRNOD'.

      lv_orden = gt_alv[ i_fila ]-korrnod.

    WHEN 'COMPARE'.

      PERFORM comparar_versiones USING i_fila.

  ENDCASE.

  IF lv_orden IS NOT INITIAL.

    SET PARAMETER ID 'KOR' FIELD lv_orden.

    CALL FUNCTION 'TR_PRESENT_REQUEST'
      EXPORTING
        iv_trkorr    = lv_orden
        iv_highlight = 'X'.

  ENDIF.

ENDFORM.

FORM handle_user_command USING i_ucomm TYPE salv_de_function.

  CASE i_ucomm.
    WHEN '&TICKNOK'.
      PERFORM filter USING icon_incomplete.
    WHEN '&TICKNO'.
      PERFORM filter USING icon_dummy.
    WHEN '&TICKUNDO'.
      PERFORM filter USING icon_system_undo.
  ENDCASE.

ENDFORM.

FORM filter USING i_icon.

  CASE i_icon.
    WHEN icon_incomplete.
      DELETE gt_alv WHERE icono <> i_icon.
    WHEN icon_dummy.
      DELETE gt_alv WHERE icono <> i_icon.
    WHEN icon_system_undo.
      gt_alv[] = gt_alv_full[].

  ENDCASE.

*  perform set_header_alv.

  alv->refresh( refresh_mode = if_salv_c_refresh=>full ).

ENDFORM.

FORM pushbuttons .
  LOOP AT SCREEN.
    CASE sscrfields.
      WHEN 'INI'.
*        gv_edit = abap_false.
*        PERFORM get_patron.
      WHEN 'PUS'.
        PERFORM ping.
    ENDCASE.
  ENDLOOP.
ENDFORM.

FORM pbo .

  LOOP AT SCREEN.

  ENDLOOP.

  CASE gv_ping.
    WHEN '0'.     pushb = icon_led_green.
    WHEN '8'.     pushb = icon_led_red.
    WHEN OTHERS.  pushb = icon_led_inactive.
  ENDCASE.


ENDFORM.

FORM ping.

  CHECK gv_ping IS INITIAL.

  gv_ping = 0.

  TRY.

      CALL FUNCTION 'RFC_PING' DESTINATION p_rfc EXCEPTIONS OTHERS = 1.

      IF sy-subrc <> 0.

        gv_ping = 8.

      ENDIF.

  ENDTRY.


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_ICON_COMPARE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_ALV  text
*----------------------------------------------------------------------*
FORM get_icon_compare  CHANGING cs_alv TYPE gty_alv.

IF cs_alv-icono = icon_incomplete. "Si sus versiones no son iguales, le habilitamos el boton de comparar versiones
    CASE cs_alv-objtype.
      WHEN 'FUGR' OR 'PROG' OR 'REPS' OR 'REPT'.
        cs_alv-compare = icon_compare.
    ENDCASE.
  ENDIF.

ENDFORM.

FORM single_click USING i_row    TYPE i
                          i_column TYPE lvc_fname.

*  data: l_row_string type string,
*        l_col_string type string,
*        l_row        type char128.
*
*  write i_row to l_row left-justified.
*
*  concatenate text-i02 l_row into l_row_string separated by space.
*  concatenate text-i03 i_column into l_col_string separated by space.
*
*  if i_level is initial.
*    message i000(0k) with i_text l_row_string l_col_string.
*  else.
*    case i_level.
*      when 1.
*        message i000(0k) with text-i06 i_text l_row_string l_col_string.
*      when 2.
*        message i000(0k) with text-i07 i_text l_row_string l_col_string.
*    endcase.
*  endif.

ENDFORM.                    " show_cell_info
*&---------------------------------------------------------------------*
*&      Form  COMPARAR_VERSIONES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_I_FILA  text
*----------------------------------------------------------------------*
FORM comparar_versiones  USING    iv_fila.

  DATA: lt_source_local TYPE TABLE OF   abaptxt255.
  DATA: lt_source_remote TYPE TABLE OF  abaptxt255.

  READ TABLE gt_alv INDEX iv_fila ASSIGNING FIELD-SYMBOL(<fs_alv>).

  check <fs_alv>-compare is NOT INITIAL.

  CALL FUNCTION 'RPY_PROGRAM_READ'
    EXPORTING
   program_name              = CONV rpy_prog-progname( <fs_alv>-object )
*     WITH_INCLUDELIST          = 'X'
*     ONLY_SOURCE               = ' '
*     ONLY_TEXTS                = ' '
*     READ_LATEST_VERSION       = ' '
*     WITH_LOWERCASE            = ' '
*   IMPORTING
*     PROG_INF                  =
TABLES
*     INCLUDE_TAB               =
*     SOURCE                    =
  source_extended           = lt_source_local
*     TEXTELEMENTS              =
EXCEPTIONS
  cancelled                 = 1
  not_found                 = 2
  permission_error          = 3
  OTHERS                    = 4
         .

  CALL FUNCTION 'RPY_PROGRAM_READ'
  DESTINATION p_rfc
  EXPORTING
    program_name              = <fs_alv>-object
*     WITH_INCLUDELIST          = 'X'
*     ONLY_SOURCE               = ' '
*     ONLY_TEXTS                = ' '
*     READ_LATEST_VERSION       = ' '
*     WITH_LOWERCASE            = ' '
*   IMPORTING
*     PROG_INF                  =
 TABLES
*     INCLUDE_TAB               =
*     SOURCE                    =
   source_extended           = lt_source_remote
*     TEXTELEMENTS              =
 EXCEPTIONS
   cancelled                 = 1
   not_found                 = 2
   permission_error          = 3
   OTHERS                    = 4
          .


  IF lt_source_local = lt_source_remote.
    <fs_alv>-comparer = icon_system_okay.
  ELSE.
    <fs_alv>-comparer = icon_system_cancel.
  ENDIF.

  alv->refresh( refresh_mode = if_salv_c_refresh=>full ).



ENDFORM.
