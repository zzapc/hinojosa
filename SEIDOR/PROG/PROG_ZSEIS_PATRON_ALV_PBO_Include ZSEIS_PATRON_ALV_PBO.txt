*&---------------------------------------------------------------------*
*&  Include           ZSEIS_PATRON_ALV_PBO
*&---------------------------------------------------------------------*


*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_1 OUTPUT.

  PERFORM f_pbo_1 USING sy-dynnr.

ENDMODULE.                 " STATUS_0100  OUTPUT


*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE pbo_1_subscreen OUTPUT.
  PERFORM f_pbo_1_subscreen USING sy-dynnr.
ENDMODULE.                 " STATUS_0100  OUTPUT






*&---------------------------------------------------------------------*
*&      Form  F_PBO_1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_SY_DYNNR  text
*----------------------------------------------------------------------*
FORM f_pbo_1  USING vp_dynnr.
  DATA: vl_cabecera   TYPE st_def_prog-con_cabecera.

  "Recogemos los datos de la dynpro abierta actualmente
  READ TABLE it_def_prog INTO wa_def_prog WITH KEY dynpro = vp_dynnr.

  "Indicamos status y título
  SET TITLEBAR wa_def_prog-titulo.

  DATA tl_fcode_exclude TYPE TABLE OF sy-ucomm.
  IF vg_permiso = cg_permiso_consulta OR vg_alta_cabecera = 'X' OR vg_cabecera_borrada = 'X'.
    APPEND 'MODO' TO tl_fcode_exclude.
  ENDIF.

  IF vg_permiso = cg_permiso_consulta OR vg_solo_consulta = 'X' OR vg_cabecera_borrada = 'X'.
    APPEND 'SAVE'     TO tl_fcode_exclude.
  ENDIF.

  IF vg_permiso = cg_permiso_consulta OR vg_solo_consulta = 'X' OR vg_alta_cabecera = 'X'.
    APPEND 'BORRADO'  TO tl_fcode_exclude.
  ENDIF.

  SET PF-STATUS wa_def_prog-status EXCLUDING tl_fcode_exclude.


  "Pantalla principal. Bloquear si borrado o sólo consulta
  LOOP AT SCREEN.
    IF screen-name NP 'TAB_*'.
      IF vg_solo_consulta = 'X' OR vg_cabecera_borrada = 'X'.
        screen-input = '0'.
      ENDIF.

      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.



  " JBG 25.02.11 Sólo creamos la cabecera si no estamos en fondo
  IF sy-batch IS NOT INITIAL.
    " Limpiamos el valor de wa_def_prog-con_cabecera si ejecutamos en
    "  fondo para que no cree la cabecera
    " Al ejecutarlo en fondo si la creamos falla.
    " EN el evento TOP_OF_PAGE se imprimirá.
    vl_cabecera = space.
  ELSE.
    vl_cabecera = wa_def_prog-con_cabecera.
  ENDIF.

  "Crear ALV
  IF wa_def_prog-alv IS NOT INITIAL.
    IF r_contenedor IS INITIAL.
      wa_variant-report  = sy-repid.



      "1. Crear el contenedor para ALV
      CREATE OBJECT r_contenedor
        EXPORTING
          container_name              = wa_def_prog-alv
        EXCEPTIONS
          cntl_error                  = 1
          cntl_system_error           = 2
          create_error                = 3
          lifetime_error              = 4
          lifetime_dynpro_dynpro_link = 5
          OTHERS                      = 6.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      "Dividimos el ALV si tiene cabecera o pie
      IF vl_cabecera = 'T' OR vl_cabecera = 'L'.
        CREATE OBJECT v_split
          EXPORTING
            parent            = r_contenedor
            sash_position     = 15
            with_border       = 0
          EXCEPTIONS
            cntl_error        = 1
            cntl_system_error = 2
            OTHERS            = 3.
      ELSEIF vl_cabecera = 'B'.
        CREATE OBJECT v_split
          EXPORTING
            parent            = r_contenedor
            sash_position     = 80
            with_border       = 0
          EXCEPTIONS
            cntl_error        = 1
            cntl_system_error = 2
            OTHERS            = 3.
      ENDIF.

      IF vl_cabecera <> ' '.
        IF sy-subrc NE 0.
          MESSAGE i918(zseis).
          LEAVE LIST-PROCESSING.
        ENDIF.

        "Object for display of selection parameters in HTML top container
        CREATE OBJECT v_html
          EXPORTING
            style = 'ALV_GRID'.


        "Creamos las variables contenedoras top/bottom
        v_contnr_top = v_split->top_left_container.
        v_contnr_bot = v_split->bottom_right_container.
      ENDIF.


      "2. Crear el alv_grid
      IF vl_cabecera = 'T' OR vl_cabecera = 'L'.

        IF vl_cabecera = 'T'.
          CALL METHOD v_html->add_text
            EXPORTING
              text_table = it_texto_cab
              fix_lines  = 'X'.

        ELSE. "vl_cabcecera = 'L'.
          DATA vl_form TYPE REF TO cl_dd_table_element.
          DATA vl_form_area TYPE REF TO cl_dd_form_area.

          CALL METHOD v_html->add_form
            IMPORTING
              formarea = vl_form_area.

          CALL METHOD vl_form_area->line_with_layout
            EXPORTING
              start            = 'X'
              no_leading_break = 'X'.
          CALL METHOD vl_form_area->add_text
            EXPORTING
              text_table = it_texto_cab
              fix_lines  = 'X'.

          CALL METHOD vl_form_area->add_gap
            EXPORTING
              width = 175.

          CALL METHOD vl_form_area->add_picture
            EXPORTING
              picture_id = vg_logo
              tabindex   = 1.
          CALL METHOD vl_form_area->line_with_layout
            EXPORTING
              end              = 'X'
              no_leading_break = 'X'.


          CALL METHOD v_html->merge_document.
        ENDIF.


        "Mostramos cabecera
        CALL METHOD v_html->display_document
          EXPORTING
            parent = v_contnr_top.

        "Creamos la instancia del control ALV
        CREATE OBJECT r_alv
          EXPORTING
            i_parent          = v_contnr_bot
          EXCEPTIONS
            error_cntl_create = 1
            error_cntl_init   = 2
            error_cntl_link   = 3
            error_dp_create   = 4
            OTHERS            = 5.


      ELSEIF vl_cabecera = 'B'.

        CALL METHOD v_html->add_text
          EXPORTING
            text_table = it_texto_cab
            fix_lines  = 'X'.


        "Mostramos pie de página
        CALL METHOD v_html->display_document
          EXPORTING
            parent = v_contnr_bot.

        "Creamos la instancia del control ALV
        CREATE OBJECT r_alv
          EXPORTING
            i_parent          = v_contnr_top
          EXCEPTIONS
            error_cntl_create = 1
            error_cntl_init   = 2
            error_cntl_link   = 3
            error_dp_create   = 4
            OTHERS            = 5.

      ELSE.
        "Creamos la instancia del control ALV


        CREATE OBJECT r_alv
          EXPORTING
            i_parent          = r_contenedor
          EXCEPTIONS
            error_cntl_create = 1
            error_cntl_init   = 2
            error_cntl_link   = 3
            error_dp_create   = 4
            OTHERS            = 5.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                     WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
      ENDIF.


      "ALV editable/no editable
      IF wa_def_prog-editable = 'X'.
        IF vg_alv_protegido_por_defecto IS INITIAL.
          wa_layout-edit = 'X'.
        ENDIF.
      ENDIF.



      "Colores de campos
      wa_layout-ctab_fname = 'IT_COLFIELDS'.

      "Estilos de campos
      wa_layout-stylefname = 'IT_ESTILOS'.

      "Título y ancho columnas óptimo
      IF vg_no_justif_cols IS INITIAL.
        wa_layout-cwidth_opt = 'X'.
      ENDIF.

      "Ocultar título en ALV
      IF vg_ocultar_titulo_alv IS INITIAL.
        wa_layout-grid_title = sy-title.
      ENDIF.



      "Declaración de la gestión de eventos del ALV
      CREATE OBJECT event_receiver.
      event_receiver->alv     = r_alv.
      event_receiver->dynpro  = vp_dynnr.
      GET REFERENCE OF it_alv INTO event_receiver->tabla.

      SET HANDLER event_receiver->handle_top_of_list          FOR r_alv.
      SET HANDLER event_receiver->handle_end_of_list          FOR r_alv.
      SET HANDLER event_receiver->handle_double_click         FOR r_alv.
      SET HANDLER event_receiver->handle_hotspot_click        FOR r_alv.
      SET HANDLER event_receiver->handle_data_changed         FOR r_alv.
      SET HANDLER event_receiver->handle_data_changed_finished FOR r_alv.
      SET HANDLER event_receiver->handle_before_user_command  FOR r_alv.
      SET HANDLER event_receiver->handle_after_user_command   FOR r_alv.
      SET HANDLER event_receiver->handle_user_command         FOR r_alv.
      SET HANDLER event_receiver->handle_toolbar              FOR r_alv.
      SET HANDLER event_receiver->handle_menu_button          FOR r_alv.
      SET HANDLER event_receiver->handle_subtotal_text        FOR r_alv.
      SET HANDLER event_receiver->handle_after_refresh        FOR r_alv.
      SET HANDLER event_receiver->handle_delayed_callback     FOR r_alv.
      SET HANDLER event_receiver->handle_onf4                 FOR r_alv.




      "3. Indicamos los datos y el estilo de los datos del ALV
      "Creamos el catálogo de campos
      PERFORM f_crear_catalogo TABLES it_catalogo USING vp_dynnr.

*      "Añadimos campo ZZMARCA_EDIT, si no está ya indicado
*      READ TABLE it_catalogo INTO wa_catalogo WITH KEY fieldname = 'ZZMARCA_EDIT'.
*      IF sy-subrc <> 0.
*        wa_catalogo-fieldname = 'ZZMARCA_EDIT'.
*        wa_catalogo-tech      = 'X'.
*        APPEND wa_catalogo TO it_catalogo.
*      ENDIF.







      "Añadir línea de alta
      DATA wl_alv LIKE LINE OF it_alv.
      DATA wl_lin_alv LIKE wg_lin_alv.

      CLEAR wl_alv.
      CLEAR wl_lin_alv.


*      IF wa_def_prog-editable = 'X' AND vg_linea_alta IS NOT INITIAL.
*        "Miramos primero si ya hay una línea de alta (estado 'N')
*        READ TABLE it_alv INTO wl_alv WITH KEY zzmarca_edit = 'N'.
*        IF sy-subrc <> 0.
*          CLEAR wl_alv.
*          PERFORM f_anyadir_linea_pre IN PROGRAM (sy-cprog) IF FOUND
*            TABLES it_alv
*            USING vp_dynnr wl_lin_alv.
*
*          MOVE-CORRESPONDING wl_lin_alv TO wl_alv.
*          wl_alv-zzmarca_edit = 'N'.
*          APPEND wl_alv TO it_alv.
*
*          PERFORM f_anyadir_linea_post IN PROGRAM (sy-cprog) IF FOUND
*            TABLES it_alv
*            USING vp_dynnr wl_lin_alv sy-tabix.
*        ENDIF.
*
*
*      ENDIF.


*      CALL METHOD r_alv->set_autoredraw
*        EXPORTING
*          i_enable = 1.

      "Llamamos a la función para mostrar la tabla interna
      CALL METHOD r_alv->set_table_for_first_display
        EXPORTING
          is_variant                    = wa_variant
          i_bypassing_buffer            = 'X'
          i_save                        = 'A'
          is_layout                     = wa_layout
          it_toolbar_excluding          = it_toolbar_exc
        CHANGING
          it_outtab                     = it_alv
          it_fieldcatalog               = it_catalogo
          it_sort                       = it_sort
        EXCEPTIONS
          invalid_parameter_combination = 1          "it_filter = it_filter
          program_error                 = 2
          too_many_lines                = 3
          OTHERS                        = 4.

      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      "Añadimos la condición de filtro para las líneas borradas.
      "No lo hacemos en el set_table_for_first_display porque a veces no filtra!!!
      CALL METHOD r_alv->set_filter_criteria
        EXPORTING
          it_filter = it_filter.


      "ALV editable/no editable
      IF wa_def_prog-editable = 'X' AND vg_solo_consulta = space AND vg_cabecera_borrada = space .
        "Estilo de los campos/botones
        CALL METHOD r_alv->set_ready_for_input
          EXPORTING
            i_ready_for_input = 1.

        "Registramos evento data_changed para que se lance al salir del campo
        IF vg_reg_datachanged_al_modif IS NOT INITIAL.
          CALL METHOD r_alv->register_edit_event
            EXPORTING
              i_event_id = cl_gui_alv_grid=>mc_evt_modified.
        ENDIF.
        CALL METHOD r_alv->register_edit_event
          EXPORTING
            i_event_id = cl_gui_alv_grid=>mc_evt_enter.

      ELSE.
        CALL METHOD r_alv->set_ready_for_input
          EXPORTING
            i_ready_for_input = 0.
      ENDIF.


      CALL METHOD r_alv->set_toolbar_interactive.

    ELSE.
*      CALL METHOD r_alv->refresh_table_display
*        EXPORTING
*          is_stable = vg_stable.

    ENDIF.
  ENDIF.


  PERFORM f_pbo_post IN PROGRAM (sy-cprog) IF FOUND
    TABLES it_alv
    USING vp_dynnr.




ENDFORM.                                                    " F_PBO_1




*&---------------------------------------------------------------------*
*&      Form  F_PBO_1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_SY_DYNNR  text
*----------------------------------------------------------------------*
FORM f_pbo_1_subscreen  USING vp_dynnr.

  "Recogemos los datos de la dynpro abierta actualmente
  READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = vp_dynnr.
  CHECK sy-subrc = 0.



  IF <fs_config_subscreen>-nombre_contenedor IS NOT INITIAL AND <fs_config_subscreen>-contenedor IS NOT BOUND.
    wa_variant-report  = sy-repid && vp_dynnr.

    "1. Crear el contenedor para ALV
    CREATE OBJECT <fs_config_subscreen>-contenedor
      EXPORTING
        container_name              = <fs_config_subscreen>-nombre_contenedor
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        OTHERS                      = 6.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    CREATE OBJECT <fs_config_subscreen>-alv
      EXPORTING
        i_parent          = <fs_config_subscreen>-contenedor
      EXCEPTIONS
        error_cntl_create = 1
        error_cntl_init   = 2
        error_cntl_link   = 3
        error_dp_create   = 4
        OTHERS            = 5.


    "ALV editable/no editable
    IF <fs_config_subscreen>-editable = 'X' AND vg_solo_consulta = space AND vg_cabecera_borrada = space.
      IF vg_alv_protegido_por_defecto IS INITIAL.
        wa_layout-edit = 'X'.
      ENDIF.
    ENDIF.



    "Colores de campos
    wa_layout-ctab_fname = 'IT_COLFIELDS'.

    "Estilos de campos
    wa_layout-stylefname = 'IT_ESTILOS'.

    "Título y ancho columnas óptimo
    IF vg_no_justif_cols IS INITIAL.
      wa_layout-cwidth_opt = 'X'.
    ENDIF.

    "Ocultar título en ALV
    IF vg_ocultar_titulo_alv IS INITIAL.
      READ TABLE tg_d347t ASSIGNING FIELD-SYMBOL(<fs_d347t>) WITH KEY obj_code = <fs_config_subscreen>-titulo.
      IF sy-subrc = 0.
        wa_layout-grid_title = <fs_d347t>-text.
      ENDIF.
    ENDIF.


    "Declaración de la gestión de eventos del ALV
    CREATE OBJECT <fs_config_subscreen>-event_receiver.
    <fs_config_subscreen>-event_receiver->alv     = <fs_config_subscreen>-alv.
    <fs_config_subscreen>-event_receiver->dynpro  = vp_dynnr.
    GET REFERENCE OF <fs_config_subscreen>-tabla INTO <fs_config_subscreen>-event_receiver->tabla.

    SET HANDLER <fs_config_subscreen>-event_receiver->handle_top_of_list          FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_end_of_list          FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_double_click         FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_hotspot_click        FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_data_changed         FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_data_changed_finished FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_before_user_command  FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_after_user_command   FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_user_command         FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_toolbar              FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_menu_button          FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_subtotal_text        FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_after_refresh        FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_delayed_callback     FOR <fs_config_subscreen>-alv.
    SET HANDLER <fs_config_subscreen>-event_receiver->handle_onf4                 FOR <fs_config_subscreen>-alv.


    "3. Indicamos los datos y el estilo de los datos del ALV
    "Creamos el catálogo de campos
    PERFORM f_crear_catalogo TABLES it_catalogo USING vp_dynnr.
*    IF vg_solo_consulta = 'X'.
*      LOOP AT it_catalogo ASSIGNING FIELD-SYMBOL(<fs_catalogo>) WHERE edit = 'X'..
*        CLEAR <fs_catalogo>-edit.
*      ENDLOOP.
*    ENDIF.

    PERFORM f_set_estilos_alv USING vp_dynnr CHANGING <fs_config_subscreen>-tabla.

    "Llamamos a la función para mostrar la tabla interna
    CALL METHOD <fs_config_subscreen>-alv->set_table_for_first_display
      EXPORTING
        is_variant                    = wa_variant
        i_bypassing_buffer            = 'X'
        i_save                        = 'A'
        is_layout                     = wa_layout
        it_toolbar_excluding          = it_toolbar_exc
      CHANGING
        it_outtab                     = <fs_config_subscreen>-tabla
        it_fieldcatalog               = it_catalogo
        it_sort                       = it_sort
        it_filter                     = <fs_config_subscreen>-filtro
      EXCEPTIONS
        invalid_parameter_combination = 1          "it_filter = it_filter
        program_error                 = 2
        too_many_lines                = 3
        OTHERS                        = 4.


    "Añadimos la condición de filtro para las líneas borradas.
    "No lo hacemos en el set_table_for_first_display porque a veces no filtra!!!
*    CALL METHOD <fs_config_subscreen>-alv->set_filter_criteria
*      EXPORTING
*        it_filter = it_filter.


    "ALV editable/no editable
    IF <fs_config_subscreen>-editable = 'X'.

      <fs_config_subscreen>-alv->register_edit_event( cl_gui_alv_grid=>mc_evt_enter ).
      "Registramos evento data_changed para que se lance al salir del campo
      READ TABLE tg_config_edit ASSIGNING FIELD-SYMBOL(<fs_config_edit>) WITH KEY dynpro = vp_dynnr.
      IF sy-subrc = 0 AND <fs_config_edit>-reg_datachanged_al_modif = 'X'.
        <fs_config_subscreen>-alv->register_edit_event( cl_gui_alv_grid=>mc_evt_modified ).
      ENDIF.
    ENDIF.

    <fs_config_subscreen>-alv->set_toolbar_interactive( ).
  ENDIF.

  "ALV editable/no editable
  IF <fs_config_subscreen>-editable = 'X' AND vg_solo_consulta = space AND vg_cabecera_borrada = space.
    "Estilo de los campos/botones
    <fs_config_subscreen>-alv->set_ready_for_input( 1 ).
  ELSE.
    <fs_config_subscreen>-alv->set_ready_for_input( 0 ).
  ENDIF.


  PERFORM f_pbo_post IN PROGRAM (sy-cprog) IF FOUND
    TABLES it_alv
    USING vp_dynnr.

ENDFORM.                                                    " F_PBO_1
