*&---------------------------------------------------------------------*
*&  Include           ZSEIS_PATRON_ALV_CLASES
*&---------------------------------------------------------------------*


*****************************************************************
** CLASES LOCALES: Definicion
*****************************************************************
*CLASS lcl_event_receiver DEFINITION DEFERRED.

*----------------------------------------------------------------------*
*       CLASS lcl_event_receiver DEFINITION
*----------------------------------------------------------------------*
*       Definición de los eventos programados del ALV
*----------------------------------------------------------------------*
CLASS lcl_event_receiver DEFINITION.

  PUBLIC SECTION.
    DATA:
      datos_modificados TYPE xfeld,
      errores           TYPE xfeld,
      alv               TYPE REF TO cl_gui_alv_grid,
      dynpro            TYPE sy-dynnr,
      tabla             TYPE REF TO tt_lin_alv_patron,
      structure_desc    TYPE REF TO cl_abap_structdescr,
      r_data_changed    TYPE REF TO	cl_alv_changed_data_protocol.

    METHODS:

      "Evento top_of_list
      handle_top_of_list
        FOR EVENT print_top_of_list OF cl_gui_alv_grid,

      "Evento end_of_list
      handle_end_of_list
        FOR EVENT print_end_of_list OF cl_gui_alv_grid,

      "Evento hotspot_click
      handle_hotspot_click
                  FOR EVENT hotspot_click     OF cl_gui_alv_grid
        IMPORTING e_row_id e_column_id,

      "Evento double_click
      handle_double_click
                  FOR EVENT double_click     OF cl_gui_alv_grid
        IMPORTING e_row e_column,

      "Evento data_changed
      handle_data_changed
                  FOR EVENT data_changed     OF cl_gui_alv_grid
        IMPORTING er_data_changed e_onf4 e_onf4_before e_onf4_after e_ucomm,

      "Evento data_changed_finished
      handle_data_changed_finished
                  FOR EVENT data_changed_finished     OF cl_gui_alv_grid
        IMPORTING e_modified et_good_cells,

      "Evento before_user_command
      handle_before_user_command
                  FOR EVENT before_user_command     OF cl_gui_alv_grid
        IMPORTING e_ucomm,

      "Evento user_command
      handle_user_command
                  FOR EVENT user_command     OF cl_gui_alv_grid
        IMPORTING e_ucomm,

      "Evento after_user_command
      handle_after_user_command
                  FOR EVENT after_user_command     OF cl_gui_alv_grid
        IMPORTING e_ucomm e_saved e_not_processed,

      "Evento toolbar
      handle_toolbar
                  FOR EVENT toolbar  OF cl_gui_alv_grid
        IMPORTING e_object e_interactive,

      "Evento menu button
      handle_menu_button
                  FOR EVENT menu_button OF cl_gui_alv_grid
        IMPORTING e_object e_ucomm,


      "Evento Subtotal text
      handle_subtotal_text
                  FOR EVENT subtotal_text OF cl_gui_alv_grid
        IMPORTING es_subtottxt_info ep_subtot_line e_event_data,

      "Evento After refresh
      handle_after_refresh
        FOR EVENT after_refresh OF cl_gui_alv_grid,

      "Evento Delayed callback
      handle_delayed_callback
        FOR EVENT delayed_callback OF cl_gui_alv_grid,

      "Evento Top of page
      handle_top_of_page
                  FOR EVENT top_of_page OF cl_gui_alv_grid
        IMPORTING e_dyndoc_id
                  table_index,

      handle_onf4 FOR EVENT onf4 OF cl_gui_alv_grid
        IMPORTING e_fieldname
                  es_row_no
                  er_event_data.


  PRIVATE SECTION.
    METHODS:
      data_changed_edit IMPORTING rp_data_changed TYPE REF TO	cl_alv_changed_data_protocol
                                  vp_onf4         TYPE char01
                                  vp_onf4_before  TYPE char01
                                  vp_onf4_after   TYPE char01
                                  vp_ucomm        TYPE  sy-ucomm,
      user_command_edit IMPORTING vp_ucomm  TYPE  sy-ucomm,
      handle_toolbar_edit IMPORTING e_object      TYPE REF TO	cl_alv_event_toolbar_set
                                    e_interactive TYPE  char01.


ENDCLASS.                    "lcl_event_receiver DEFINITION


*----------------------------------------------------------------------*
*       CLASS lcl_event_receiver IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_event_receiver IMPLEMENTATION.
  "Manejador del evento top_of_list
  METHOD handle_top_of_list.
    DATA vl_fecha(20) TYPE c.
    DATA vl_cabecera_aux  TYPE c LENGTH 90.
    DATA vl_cabecera1     TYPE c LENGTH 110.


    READ TABLE it_def_prog INTO wa_def_prog WITH KEY dynpro = vg_ventana_inicial.

    IF wa_def_prog-con_cabecera = 'L'.
      WRITE: sy-datum, sy-uzeit TO vl_fecha.
      MESSAGE s900(zseis) INTO vl_cabecera_aux.
      SHIFT vl_cabecera_aux RIGHT DELETING TRAILING space.
      CONCATENATE vl_fecha vl_cabecera_aux INTO vl_cabecera1 RESPECTING BLANKS.
      WRITE: /1 vl_cabecera1.
    ENDIF.



    IF wa_def_prog-con_cabecera = 'T' OR wa_def_prog-con_cabecera = 'L'.
      LOOP AT it_texto_cab INTO wa_texto_cab.
        WRITE wa_texto_cab.
        "WRITE /.
      ENDLOOP.
    ENDIF.

    PERFORM f_handle_top_of_list IN PROGRAM (sy-cprog) IF FOUND.
  ENDMETHOD.                    "handle_top_of_list

  "Manejador del evento end_of_list
  METHOD handle_end_of_list.
    READ TABLE it_def_prog INTO wa_def_prog WITH KEY dynpro = vg_ventana_inicial.
    IF wa_def_prog-con_cabecera = 'B'.
      LOOP AT it_texto_cab INTO wa_texto_cab.
        WRITE wa_texto_cab.
        "WRITE /.
      ENDLOOP.
    ENDIF.


    PERFORM f_handle_end_of_list IN PROGRAM (sy-cprog) IF FOUND.
  ENDMETHOD.                    "handle_end_of_list


  "Manejador del evento hotspot_click
  METHOD handle_hotspot_click.
    "IMPORTING e_row_id e_column_id,

    READ TABLE tabla->* ASSIGNING FIELD-SYMBOL(<fs_fila>) INDEX e_row_id-index.
    IF sy-subrc = 0.
      PERFORM f_handle_hotspot_click IN PROGRAM (sy-cprog) IF FOUND
        USING dynpro e_row_id e_column_id <fs_fila>.
    ENDIF.


  ENDMETHOD.                    "handle_hotspot_click

  "Manejador del evento double_click
  METHOD handle_double_click.
    "            IMPORTING e_row e_column,

    READ TABLE tabla->* ASSIGNING FIELD-SYMBOL(<fs_fila>) INDEX e_row.
    IF sy-subrc = 0.
      PERFORM f_handle_double_click IN PROGRAM (sy-cprog) IF FOUND
        USING dynpro e_row e_column <fs_fila>.
    ENDIF.
  ENDMETHOD.                    "handle_double_click

  "Manejador del evento data_changed
  METHOD handle_data_changed.
    "            IMPORTING er_data_changed e_onf4 e_onf4_before e_onf4_after e_ucomm,

    DATA vl_editable TYPE xfeld.
    READ TABLE it_def_prog INTO wa_def_prog WITH KEY dynpro = dynpro.
    IF sy-subrc = 0.
      vl_editable = wa_def_prog-editable.
    ELSE.
      READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = dynpro.
      IF sy-subrc = 0.
        vl_editable = <fs_config_subscreen>-editable.
      ENDIF.
    ENDIF.

    IF vl_editable = 'X'.
      "Manejador de la toolbar para el ALV editable
      data_changed_edit( EXPORTING  rp_data_changed  = er_data_changed
                                    vp_onf4 = e_onf4
                                    vp_onf4_before = e_onf4_before
                                    vp_onf4_after = e_onf4_after
                                    vp_ucomm = e_ucomm ).

*      PERFORM f_handle_data_changed_alv_edit
*         USING er_data_changed e_onf4 e_onf4_before e_onf4_after e_ucomm me->dynpro.
    ENDIF.

    PERFORM f_handle_data_changed IN PROGRAM (sy-cprog) IF FOUND
      USING er_data_changed e_onf4 e_onf4_before e_onf4_after e_ucomm me->dynpro.
  ENDMETHOD.                    "handle_double_click

  "Manejador del evento before_user_command.
  METHOD handle_before_user_command.
    "            IMPORTING e_ucomm,

    PERFORM f_handle_before_user_command IN PROGRAM (sy-cprog) IF FOUND
      USING e_ucomm.

  ENDMETHOD.                    "handle_before_user_command

  "Manejador del evento user_command.
  METHOD handle_user_command.
    "            IMPORTING e_ucomm,

    DATA vl_editable TYPE xfeld.
    READ TABLE it_def_prog INTO wa_def_prog WITH KEY dynpro = sy-dynnr.
    IF sy-subrc = 0.
      vl_editable = wa_def_prog-editable.
    ELSE.
      READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = sy-dynnr.
      IF sy-subrc = 0.
        vl_editable = <fs_config_subscreen>-editable.
      ENDIF.
    ENDIF.

    IF vl_editable = 'X'.
      "Manejador de la toolbar para el ALV editable
      alv->check_changed_data( ).
      user_command_edit( e_ucomm ).
    ENDIF.

    PERFORM f_handle_user_command IN PROGRAM (sy-cprog) IF FOUND
      USING e_ucomm.
  ENDMETHOD.                    "handle_user_command

  "Manejador del evento after_user_command.
  METHOD handle_after_user_command.
    "IMPORTING E_UCOMM E_SAVED E_NOT_PROCESSED.


    PERFORM f_handle_after_user_command IN PROGRAM (sy-cprog) IF FOUND
      USING e_ucomm.
  ENDMETHOD.                    "handle_after_user_command

  "Manejador del evento toolbar
  METHOD handle_toolbar.
    "            IMPORTING e_object e_interactive,

    "Recogemos los datos de la dynpro abierta actualmente
    DATA vl_editable TYPE xfeld.
    READ TABLE it_def_prog INTO wa_def_prog WITH KEY dynpro = dynpro.
    IF sy-subrc = 0.
      vl_editable = wa_def_prog-editable.
    ELSE.
      READ TABLE tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen = dynpro.
      IF sy-subrc = 0.
        vl_editable = <fs_config_subscreen>-editable.
      ENDIF.
    ENDIF.

    IF vl_editable = 'X'.
      "Manejador de la toolbar para el ALV editable
      handle_toolbar_edit(  e_object      =  e_object
                            e_interactive =  e_interactive ).
    ENDIF.


    "Manejador de la toolbar para el hijo
    PERFORM f_handle_toolbar IN PROGRAM (sy-cprog) IF FOUND
      USING dynpro e_object e_interactive.
  ENDMETHOD.                    "handle_toolbar

  "Evento menu button
  METHOD handle_menu_button.
    "            IMPORTING e_object e_ucomm,
    PERFORM f_handle_menu_button IN PROGRAM (sy-cprog) IF FOUND
      USING e_object e_ucomm.

  ENDMETHOD.                    "handle_menu_button



  "Manejador del evento delayed_callback
  METHOD handle_delayed_callback.
    PERFORM f_handle_delayed_callback IN PROGRAM (sy-cprog) IF FOUND.
  ENDMETHOD.                    "handle_delayed_callback

  "Manejador del evento after_refresh
  METHOD handle_after_refresh.
    PERFORM f_handle_after_refresh IN PROGRAM (sy-cprog) IF FOUND.
  ENDMETHOD.                    "handle_after_refresh


  "Manejador del evento top of page
  METHOD handle_top_of_page.
    PERFORM f_handle_top_of_page  IN PROGRAM (sy-cprog) IF FOUND
      USING e_dyndoc_id table_index.
  ENDMETHOD.                    "handle_after_refresh




  "Evento subtotal_text
  METHOD handle_subtotal_text.
    "            IMPORTING es_subtottxt_info ep_subtot_line e_event_data.

    PERFORM f_handle_subtotal_text IN PROGRAM (sy-cprog) IF FOUND
      USING es_subtottxt_info ep_subtot_line e_event_data.


  ENDMETHOD.                    "handle_subtotal_text


  "Evento data_changed_finished
  METHOD handle_data_changed_finished.
    "IMPORTING e_modified, et_good_cells,

    PERFORM f_handle_data_changed_finished IN PROGRAM (sy-cprog) IF FOUND
      USING e_modified et_good_cells me->dynpro r_data_changed.


    IF e_modified IS NOT INITIAL AND
      et_good_cells IS NOT INITIAL AND
      vg_refresh_data_changed_finish IS NOT INITIAL.
      alv->refresh_table_display( is_stable      = vg_stable
                                    i_soft_refresh = 'X' ).
    ENDIF.

  ENDMETHOD.                    "handle_data_changed_finished


  METHOD data_changed_edit.
*    IMPORTING er_data_changed TYPE Ref To  CL_ALV_CHANGED_DATA_PROTOCOL
*                                  e_onf4          Type CHAR01
*                                  e_onf4_before   Type CHAR01
*                                  e_onf4_after    Type CHAR01
*                                  e_ucomm         Type	SY-UCOMM.

    r_data_changed = rp_data_changed.

    DATA: vl_error     TYPE xfeld,
          vl_msg_error TYPE string,
          wl_alv       TYPE st_lin_alv,
          wl_bapiret2  TYPE bapiret2.

    FIELD-SYMBOLS <tl_mod_rows> TYPE tt_lin_alv_patron.
    ASSIGN rp_data_changed->mp_mod_rows->* TO <tl_mod_rows>.
    DATA(tl_mod_cells)      = rp_data_changed->mt_mod_cells.
    DATA(tl_deleted_rows)   = rp_data_changed->mt_deleted_rows.
    DATA(tl_inserted_rows)  = rp_data_changed->mt_inserted_rows.
    DATA(tl_protocol)       = rp_data_changed->mt_protocol. "Errores

    errores = COND #( WHEN tl_protocol IS INITIAL THEN space ELSE 'X' ).

    READ TABLE tg_config_edit ASSIGNING FIELD-SYMBOL(<fs_config_edit>) WITH KEY dynpro = dynpro.


    "Borrados
    LOOP AT tl_deleted_rows ASSIGNING FIELD-SYMBOL(<fs_deleted_rows>).
      datos_modificados = 'X'.
      rp_data_changed->modify_cell( i_row_id    = <fs_deleted_rows>-row_id
                                    i_fieldname = 'ZZMARCA_EDIT'
                                    i_value     = 'D'    ).

      DATA vl_fieldname TYPE lvc_fname.
      IF <fs_config_edit>-borrado_logico = 'X'.
        vl_fieldname = <fs_config_edit>-campo_borrado_logico.
        rp_data_changed->modify_cell( i_row_id    = <fs_deleted_rows>-row_id
                                      i_fieldname = vl_fieldname
                                      i_value     = 'X'    ).
      ENDIF.

    ENDLOOP.


    "Insertados
    IF structure_desc IS NOT BOUND.
      structure_desc ?= cl_abap_structdescr=>describe_by_name( 'ST_LIN_ALV' ).
    ENDIF.
    DATA(tl_componentes) = structure_desc->get_components( ).

    LOOP AT tl_inserted_rows ASSIGNING FIELD-SYMBOL(<fs_inserted_rows>).
      datos_modificados = 'X'.
      READ TABLE tl_mod_cells ASSIGNING FIELD-SYMBOL(<fs_mod_cells>) WITH KEY row_id = <fs_inserted_rows>-row_id.
      CHECK sy-subrc = 0.

      READ TABLE <tl_mod_rows> ASSIGNING FIELD-SYMBOL(<fs_mod_rows>) INDEX <fs_mod_cells>-tabix.
      CHECK sy-subrc = 0.


      PERFORM f_anyadir_linea_pre IN PROGRAM (sy-repid) IF FOUND
        USING  dynpro wl_alv.
      IF wl_alv IS NOT INITIAL.
        LOOP AT tl_componentes ASSIGNING FIELD-SYMBOL(<fs_componentes>).
          ASSIGN COMPONENT <fs_componentes>-name OF STRUCTURE wl_alv TO FIELD-SYMBOL(<fs_item>).
          IF <fs_item> IS NOT INITIAL.
            DATA vl_fieldnname TYPE lvc_fname.
            vl_fieldnname = <fs_componentes>-name.
            rp_data_changed->modify_cell( i_row_id    = <fs_inserted_rows>-row_id
                                          i_fieldname = vl_fieldnname
                                          i_value     = <fs_item>    ).
          ENDIF.
        ENDLOOP.
      ENDIF.

      rp_data_changed->modify_cell( i_row_id    = <fs_inserted_rows>-row_id
                                    i_tabix     = <fs_mod_cells>-tabix
                                    i_fieldname = 'ZZMARCA_EDIT'
                                    i_value     = 'I'    ).

      DATA(tl_estilos) =  <fs_mod_rows>-it_estilos.
      LOOP AT it_alv_pk ASSIGNING FIELD-SYMBOL(<fs_alv_pk>) WHERE dynpro = dynpro.
        DELETE tl_estilos WHERE fieldname = <fs_alv_pk>-campo_pk.
      ENDLOOP.

      rp_data_changed->modify_cell( i_row_id    = <fs_inserted_rows>-row_id
                                    i_tabix     = <fs_mod_cells>-tabix
                                    i_fieldname = 'IT_ESTILOS'
                                    i_value     = tl_estilos ).
    ENDLOOP.

    "Modificados: Es decir, no insertados pero modificados
    LOOP AT <tl_mod_rows> ASSIGNING <fs_mod_rows>.
      datos_modificados = 'X'.

      READ TABLE tl_mod_cells ASSIGNING <fs_mod_cells> WITH KEY tabix = sy-tabix.
      CHECK sy-subrc = 0.

      READ TABLE tl_inserted_rows TRANSPORTING NO FIELDS WITH KEY row_id = <fs_mod_cells>-row_id.
      CHECK sy-subrc <> 0.

      IF <fs_mod_rows>-zzmarca_edit IS INITIAL.
        rp_data_changed->modify_cell( i_row_id    =  <fs_mod_cells>-row_id
                                      i_tabix     =  <fs_mod_cells>-tabix
                                      i_fieldname = 'ZZMARCA_EDIT'
                                      i_value     = 'M' ).
      ENDIF.
    ENDLOOP.


    LOOP AT tl_mod_cells ASSIGNING <fs_mod_cells>.
      READ TABLE <tl_mod_rows> ASSIGNING <fs_mod_rows> INDEX <fs_mod_cells>-tabix.
      CHECK sy-subrc  = 0.
      MOVE-CORRESPONDING <fs_mod_rows> TO wl_alv.

      "Comprobar datos obligatorios
      IF <fs_mod_cells>-value IS INITIAL AND <fs_config_edit> IS ASSIGNED.
        READ TABLE <fs_config_edit>-campos_obligatorios TRANSPORTING NO FIELDS WITH KEY table_line = <fs_mod_cells>-fieldname.
        IF sy-subrc = 0 AND <fs_config_edit>-reg_datachanged_al_modif = space.
          rp_data_changed->add_protocol_entry(  i_msgid     = 'SY'
                                                i_msgty     = 'E'
                                                i_msgno     = '002'
                                                i_msgv1     = 'Debe indicar valor'
                                                i_fieldname = <fs_mod_cells>-fieldname
                                                i_row_id    = <fs_mod_cells>-row_id ) .
          errores = 'X'.
          CONTINUE.
        ENDIF.
      ENDIF.


      "Validación entrada
      CLEAR wl_bapiret2.
      PERFORM f_validar_entrada IN PROGRAM (sy-repid) IF FOUND
        TABLES it_alv
        USING  dynpro <fs_mod_cells> wl_alv
        CHANGING wl_bapiret2.

      IF wl_bapiret2 IS NOT INITIAL.
        rp_data_changed->add_protocol_entry(  i_msgid     = wl_bapiret2-id
                                              i_msgty     = wl_bapiret2-type
                                              i_msgno     = wl_bapiret2-number
                                              i_msgv1     = wl_bapiret2-message_v1
                                              i_msgv2     = wl_bapiret2-message_v2
                                              i_msgv3     = wl_bapiret2-message_v3
                                              i_msgv4     = wl_bapiret2-message_v4
                                              i_fieldname = COND #( WHEN wl_bapiret2-field IS NOT INITIAL THEN wl_bapiret2-field  ELSE <fs_mod_cells>-fieldname )
                                              i_row_id    = COND #( WHEN wl_bapiret2-row   IS NOT INITIAL THEN wl_bapiret2-row    ELSE <fs_mod_cells>-row_id ) ).
        errores = 'X'.
        CONTINUE.
      ENDIF.
    ENDLOOP.


  ENDMETHOD.

  METHOD user_command_edit.
*                                  e_ucomm         Type	SY-UCOMM.


    DATA vl_titlebar TYPE char50.
    DATA vl_text_question TYPE char50.
    DATA vl_ok TYPE c.

    READ TABLE tg_config_edit       ASSIGNING FIELD-SYMBOL(<fs_config_edit>)      WITH KEY dynpro     = dynpro.
    READ TABLE tg_config_subscreen  ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen  = dynpro.


    "Buscamos las líneas seleccionadas
    alv->get_selected_rows( IMPORTING et_index_rows = DATA(tl_index_rows) ).
    IF tl_index_rows IS INITIAL.
      alv->get_current_cell( IMPORTING e_col     = DATA(vl_col)
                                         e_row     = DATA(vl_row) ).
      IF vl_row IS NOT INITIAL.
        APPEND INITIAL LINE TO tl_index_rows ASSIGNING FIELD-SYMBOL(<fs_index_rows>).
        <fs_index_rows>-index = vl_row.
      ENDIF.
    ENDIF.

    CASE vp_ucomm.
      WHEN vg_boton_alv_datos_gestion.
        "DATOS GESTIÓN
        IF tl_index_rows IS INITIAL.
          MESSAGE 'Debe seleccionar alguna fila' TYPE 'I'.
          RETURN.
        ENDIF.

        READ TABLE tl_index_rows ASSIGNING <fs_index_rows> INDEX 1.
        CHECK sy-subrc = 0.

        READ TABLE <fs_config_subscreen>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv>) INDEX <fs_index_rows>-index.
        CHECK sy-subrc = 0.

        CALL FUNCTION 'Z_SEIS_MOSTRAR_DATOS_GESTION'
          EXPORTING
            wp_data = <fs_alv>.

      WHEN vg_boton_alv_delete OR vg_boton_alv_activar.
        "BORRAR/ACTIVAR FILA
*        "Sólo borramos si no existen datos cambiados
*        IF datos_modificados = 'X'.
*          MESSAGE 'Existen datos cambiados. Actualice antes procesar' TYPE 'I'.
*          RETURN.
*        ENDIF.

        IF tl_index_rows IS INITIAL.
          MESSAGE 'Debe seleccionar alguna fila' TYPE 'I'.
          RETURN.
        ENDIF.

        DATA(vl_marca)  = COND #( WHEN vp_ucomm = vg_boton_alv_delete THEN 'D' ELSE 'A' ).

        "Comprobamos si es borrado lógico y si lo podemos hacer
        IF <fs_config_edit> IS ASSIGNED AND <fs_config_edit>-borrado_logico = 'X' AND <fs_config_edit>-campo_borrado_logico IS NOT INITIAL.
          LOOP AT tl_index_rows ASSIGNING <fs_index_rows>.
            READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX <fs_index_rows>-index.
            CHECK sy-subrc = 0.

            IF <fs_alv>-zzbloqueada = 'X'.
              MESSAGE 'Elemento bloqueado. No se puede borrar' TYPE 'I' DISPLAY LIKE 'E'.
              RETURN.
            ENDIF.

            ASSIGN COMPONENT <fs_config_edit>-campo_borrado_logico OF STRUCTURE <fs_alv> TO FIELD-SYMBOL(<fs_borrado>).
            IF sy-subrc = 0.
              IF vl_marca = 'D' AND <fs_borrado> = 'X'.
                MESSAGE 'No se puede borrar un elemento ya borrado' TYPE 'I' DISPLAY LIKE 'E'.
                RETURN.

              ELSEIF vl_marca = 'A' AND <fs_borrado> = ' '.
                MESSAGE 'No se puede activar un elemento ya activo' TYPE 'I' DISPLAY LIKE 'E'.
                RETURN.
              ENDIF.
            ENDIF.
          ENDLOOP.
        ENDIF.


        DATA(vl_num_msg_titulo) = COND #( WHEN vp_ucomm = vg_boton_alv_delete THEN '915' ELSE '931' ).
        DATA(vl_num_msg_texto)  = COND #( WHEN vp_ucomm = vg_boton_alv_delete THEN '911' ELSE '932' ).
        MESSAGE ID 'ZSEIS' TYPE 'S' NUMBER vl_num_msg_titulo  INTO vl_titlebar.
        MESSAGE ID 'ZSEIS' TYPE 'S' NUMBER vl_num_msg_texto   INTO vl_text_question.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar              = vl_titlebar
            text_question         = vl_text_question
            default_button        = '2'
            display_cancel_button = ' '
          IMPORTING
            answer                = vl_ok
          EXCEPTIONS
            text_not_found        = 1
            OTHERS                = 2.
        CHECK vl_ok = '1'.


        "Recorremos las líneas e indicamos que están borradas / activas
        <fs_config_subscreen>-alv->check_changed_data( IMPORTING e_valid = DATA(vl_valid) ).
        IF vl_valid = 'X'.
          LOOP AT tl_index_rows ASSIGNING <fs_index_rows>.
            READ TABLE <fs_config_subscreen>-tabla ASSIGNING <fs_alv> INDEX <fs_index_rows>-index.
            CHECK sy-subrc = 0.
            <fs_alv>-zzmarca_edit = vl_marca.
            datos_modificados = 'X'.

            ASSIGN COMPONENT <fs_config_edit>-campo_borrado_logico OF STRUCTURE <fs_alv> TO <fs_borrado>.
            IF sy-subrc = 0.
              <fs_borrado>  = COND #( WHEN vp_ucomm = vg_boton_alv_delete THEN 'X' ELSE ' ' ).
            ENDIF.
          ENDLOOP.

          " RMM 30.11.20 IF vl_marca = 'D' AND <fs_config_edit>-grabar_al_borrar = 'X'.
          IF <fs_config_edit>-grabar_al_borrar = 'X'.
            DATA vl_error TYPE xfeld.
            PERFORM f_save_data_patron USING space CHANGING vl_error.
          ENDIF.


          <fs_config_subscreen>-alv->refresh_table_display( EXPORTING i_soft_refresh = 'X'
                                                                      is_stable = vg_stable ).
        ENDIF.


*        DATA vl_error TYPE xfeld.
*        PERFORM f_save_data_patron USING <fs_config_subscreen>-dynpro CHANGING vl_error.
*
*        IF vl_error = space.
*          LOOP AT <fs_config_subscreen>-tabla ASSIGNING <fs_alv> WHERE zzmarca_edit = vl_marca.
*            CLEAR <fs_alv>-zzmarca_edit.
*          ENDLOOP.
*          CLEAR datos_modificados.
*        ENDIF.

    ENDCASE.

  ENDMETHOD.


  METHOD handle_toolbar_edit.
*     IMPORTING  e_object        Type Ref To  CL_ALV_EVENT_TOOLBAR_SET
*                e_interactive   Type	CHAR01.


    "Eliminamos botones
    DELETE TABLE e_object->mt_toolbar WITH TABLE KEY function = cg_boton_alv_append_std.
    DELETE TABLE e_object->mt_toolbar WITH TABLE KEY function = cg_boton_alv_insert_std.
    DELETE TABLE e_object->mt_toolbar WITH TABLE KEY function = cg_boton_alv_delete_std.
    DELETE TABLE e_object->mt_toolbar WITH TABLE KEY function = cg_boton_alv_copy_std.


    "Separador
    APPEND INITIAL LINE TO e_object->mt_toolbar ASSIGNING FIELD-SYMBOL(<fs_toolbar>).
    <fs_toolbar>-butn_type = 3.

    IF vg_solo_consulta = space.
*      "Añadimos el boton añadir linea :
*      APPEND INITIAL LINE TO e_object->mt_toolbar ASSIGNING <fs_toolbar>.
*      <fs_toolbar>-function   = vg_boton_alv_append.
*      <fs_toolbar>-icon       = icon_create.
*      MESSAGE s906(zseis) INTO <fs_toolbar>-quickinfo.

      "Añadimos el boton insertar linea :
      APPEND INITIAL LINE TO e_object->mt_toolbar ASSIGNING <fs_toolbar>.
      <fs_toolbar>-function   = vg_boton_alv_insert.
      <fs_toolbar>-icon       = icon_insert_row.
      MESSAGE s907(zseis) INTO <fs_toolbar>-quickinfo.
*
*      "Añadimos el boton Copiar Linea :
*      APPEND INITIAL LINE TO e_object->mt_toolbar ASSIGNING <fs_toolbar>.
*      <fs_toolbar>-function   = vg_boton_alv_copy.
*      <fs_toolbar>-icon       = icon_copy_object.
*      MESSAGE s908(zseis) INTO <fs_toolbar>-quickinfo.

      "Añadimos el boton Borrar Linea :
      APPEND INITIAL LINE TO e_object->mt_toolbar ASSIGNING <fs_toolbar>.
      <fs_toolbar>-function   = vg_boton_alv_delete.
      <fs_toolbar>-icon       = icon_delete_row.
      MESSAGE s909(zseis) INTO <fs_toolbar>-quickinfo.
    ENDIF.


    READ TABLE tg_config_edit ASSIGNING FIELD-SYMBOL(<fs_config_edit>) WITH KEY dynpro = dynpro.
    IF sy-subrc = 0.
      IF <fs_config_edit>-borrado_logico = 'X' AND vg_solo_consulta = space.
        "Añadimos el boton activar :
        APPEND INITIAL LINE TO e_object->mt_toolbar ASSIGNING <fs_toolbar>.
        <fs_toolbar>-function   = vg_boton_alv_activar.
        <fs_toolbar>-icon       = icon_activate.
        <fs_toolbar>-quickinfo  = 'Activar'.
        <fs_toolbar>-text       = 'Activar'.
      ENDIF.

      IF <fs_config_edit>-tiene_datos_gestion = 'X'.
        "Separador
        APPEND INITIAL LINE TO e_object->mt_toolbar ASSIGNING <fs_toolbar>.
        <fs_toolbar>-butn_type = 3.

        "Añadimos el boton datos gestión :
        APPEND INITIAL LINE TO e_object->mt_toolbar ASSIGNING <fs_toolbar>.
        <fs_toolbar>-function   = vg_boton_alv_datos_gestion.
        <fs_toolbar>-icon       = icon_display_more.
        <fs_toolbar>-quickinfo  = 'Datos gestión'.
        <fs_toolbar>-text       = 'Datos gestión'.
      ENDIF.
    ENDIF.
  ENDMETHOD.



  METHOD handle_onf4.
    "    IMPORTING e_fieldname es_row_no er_event_data.

    DATA: wl_lin_alv     TYPE st_lin_alv.
    DATA vl_cancelar TYPE xfeld.

    READ TABLE tg_config_subscreen  ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>) WITH KEY subscreen  = dynpro.
    CHECK sy-subrc = 0.

    READ TABLE <fs_config_subscreen>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv>) INDEX es_row_no-row_id.
    CHECK sy-subrc = 0.

    MOVE-CORRESPONDING <fs_alv> TO wl_lin_alv.

    PERFORM f_handle_on_f4 IN PROGRAM (sy-cprog)
                           USING dynpro e_fieldname es_row_no er_event_data wl_lin_alv
                           CHANGING vl_cancelar.
    er_event_data->m_event_handled = 'X'.

    IF vl_cancelar = space.
      "Comprobar si el campo está protegido
      READ TABLE <fs_alv>-it_estilos ASSIGNING FIELD-SYMBOL(<fs_estilo>) WITH TABLE KEY fieldname = e_fieldname.
      IF sy-subrc <> 0 OR <fs_estilo>-style <> c_estilo_disabled.


        MOVE-CORRESPONDING wl_lin_alv TO <fs_alv>.
        IF <fs_alv>-zzmarca_edit = space. <fs_alv>-zzmarca_edit = 'M'. ENDIF.
        datos_modificados = 'X'.

        CALL METHOD <fs_config_subscreen>-alv->refresh_table_display
          EXPORTING
            is_stable      = vg_stable
            i_soft_refresh = 'X'
          EXCEPTIONS
            finished       = 1
            OTHERS         = 2.
      ENDIF.
    ENDIF.

  ENDMETHOD.


ENDCLASS.                    "lcl_event_receiver IMPLEMENTATION


DATA: event_receiver     TYPE REF TO lcl_event_receiver.
