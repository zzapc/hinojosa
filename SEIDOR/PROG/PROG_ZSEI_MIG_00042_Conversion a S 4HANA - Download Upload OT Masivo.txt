*&---------------------------------------------------------------------*
*& Report ZSEI_MIG_00042
*&---------------------------------------------------------------------*
REPORT zsei_mig_00042.
TABLES: e070, rcgfiletr, icon, sscrfields.

CLASS lcl_handle_events DEFINITION DEFERRED.

TYPES: BEGIN OF gty_log,
         tr  TYPE e070-trkorr,
         typ TYPE string,
         ini TYPE string,
         fin TYPE string,
         res TYPE string.
TYPES: END OF gty_log.

TYPES: gtt_log TYPE TABLE OF gty_log.

CONSTANTS: lc_fileformat_binary LIKE rlgrap-filetype VALUE 'BIN'.

DATA: flg_stay TYPE boolean,
      lv_front LIKE rcgfiletr-ftfront,
      lv_back  LIKE rcgfiletr-ftappl,
      lv_dir   TYPE string,
      lv_fd    LIKE stpa-file,
      lv_fc    LIKE stpa-file,
      l        TYPE i.

DATA: gt_log  TYPE gtt_log.

DATA: w_subrc TYPE sy-subrc.
DATA: w_separ TYPE c.

DATA: gv_ping.

TYPES: BEGIN OF gty_e071,
         include   TYPE e071,
         tipo      TYPE e070-trfunction,
         tipo_desc TYPE string,
         icono     TYPE icon-id.
TYPES: END OF gty_e071.

TYPES: BEGIN OF ty_param,
         tabla       TYPE string,
         observacion TYPE string,
         origen      TYPE string,
         reaccion    TYPE string,
       END OF ty_param.

TYPES: BEGIN OF ty_alv,
         orden      LIKE e070-trkorr,
         as4text    TYPE e07t-as4text,
         subtarea   TYPE vrsd_old-korrnum,
         objname    TYPE string, "vrsd-objname,
         objtyp1    TYPE vrsd-objtype,
*         top_object LIKE vrsd-objname,
         trfunction LIKE e070-trfunction,
         text_order TYPE string,
         icon       TYPE icon_d,
       END   OF ty_alv.

TYPES: BEGIN OF ty_transp,
         posicon(2) TYPE n,
         orden      LIKE e070-trkorr,
         as4text    TYPE e07t-as4text,
         trfunction LIKE e070-trfunction,
         text_order TYPE string,
         icon       TYPE icon_d.
TYPES: END OF ty_transp.

DATA: gt_param       TYPE TABLE OF ty_param.


*data: gt_e071 type table of e071.
DATA: gt_e071 TYPE TABLE OF gty_e071.

DATA: gt_alv TYPE STANDARD TABLE OF ty_alv,
      gs_alv TYPE ty_alv.

*... §5 object for handling the events of cl_salv_table
DATA: gr_events TYPE REF TO lcl_handle_events.

DATA: gt_transp TYPE STANDARD TABLE OF ty_transp.

DATA: gv_edit.
DATA: gv_error.

DATA alv TYPE REF TO cl_salv_table.

DATA: gt_import_queue TYPE TABLE OF tmsbuffer.



CLASS lcl_handle_events DEFINITION.
  PUBLIC SECTION.
    METHODS:
      on_user_command FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function,

      on_double_click FOR EVENT double_click OF cl_salv_events_table
        IMPORTING row column,

      on_link_click FOR EVENT link_click OF cl_salv_events_table
        IMPORTING row column.
ENDCLASS.                    "lcl_handle_events DEFINITION

*---------------------------------------------------------------------*
*       CLASS lcl_handle_events IMPLEMENTATION
*---------------------------------------------------------------------*
* §5.2 implement the events for handling the events of cl_salv_table
*---------------------------------------------------------------------*
CLASS lcl_handle_events IMPLEMENTATION.
  METHOD on_user_command.
    PERFORM handle_user_command USING e_salv_function.
  ENDMETHOD.                    "on_user_command

  METHOD on_double_click.
*    perform show_cell_info using 0 row column text-i07.
  ENDMETHOD.                    "on_double_click

  METHOD on_link_click.
    PERFORM show_cell_info USING row column.
  ENDMETHOD.                    "on_single_click
ENDCLASS.                    "lcl_handle_events IMPLEMENTATION

*&---------------------------------------------------------------------*
*& SELECTION-SCREEN
*&---------------------------------------------------------------------*
SELECTION-SCREEN: BEGIN OF BLOCK blq1 WITH FRAME TITLE TEXT-t01.
  PARAMETERS: p_down TYPE c RADIOBUTTON GROUP rbg USER-COMMAND sele DEFAULT 'X'.    "Download TR to local file
  PARAMETERS: p_pupl TYPE c RADIOBUTTON GROUP rbg.                                  "Pre Upload checks
  PARAMETERS: p_upl  TYPE c RADIOBUTTON GROUP rbg.                                  "Upload TR to server path, from local file
  PARAMETERS: p_imp  TYPE c RADIOBUTTON GROUP rbg.                                  "Import TR to STMS input
  PARAMETERS: p_stms TYPE c RADIOBUTTON GROUP rbg.                                  "Navega hacia la STMS
  PARAMETERS: p_trans TYPE c NO-DISPLAY.                                            "Transporte ordenado (beta)
SELECTION-SCREEN: END   OF BLOCK blq1.

SELECTION-SCREEN: BEGIN OF BLOCK blq5 WITH FRAME TITLE TEXT-t06.
  SELECTION-SCREEN: BEGIN OF LINE.
    SELECTION-SCREEN: COMMENT 1(15) TEXT-t12 MODIF ID b5.
    PARAMETERS: p_rfc TYPE vers_dest-rfcdest OBLIGATORY MODIF ID b5.
    SELECTION-SCREEN: POSITION 50.
    SELECTION-SCREEN: COMMENT 52(5) TEXT-t14 MODIF ID b5.
    SELECTION-SCREEN: POSITION 60.
    SELECTION-SCREEN: PUSHBUTTON 60(4) pushb USER-COMMAND pus MODIF ID b5.
  SELECTION-SCREEN: END OF LINE.
SELECTION-SCREEN: END   OF BLOCK blq5.

SELECTION-SCREEN: BEGIN OF BLOCK blq2 WITH FRAME TITLE TEXT-t02.
  SELECT-OPTIONS: s_tr FOR e070-trkorr NO INTERVALS MODIF ID tr.

  PARAMETERS: p_front LIKE rcgfiletr-ftfront DEFAULT 'c:/temp' MODIF ID fr,
              p_ftype LIKE rcgfiletr-ftftype DEFAULT lc_fileformat_binary NO-DISPLAY,
              p_iefow LIKE rcgfiletr-iefow   NO-DISPLAY.
SELECTION-SCREEN: END   OF BLOCK blq2.

SELECTION-SCREEN: BEGIN OF BLOCK blq3 WITH FRAME TITLE TEXT-t04.
  PARAMETERS: lv_bdata LIKE rcgfiletr-ftappl MODIF ID b3.
  PARAMETERS: lv_bcofi LIKE rcgfiletr-ftappl MODIF ID b3.
  PARAMETERS: p_separ TYPE c MODIF ID b3.
SELECTION-SCREEN: END   OF BLOCK blq3.

SELECTION-SCREEN: BEGIN OF BLOCK blq4 WITH FRAME TITLE TEXT-t05.
  PARAMETERS: p_syst LIKE tmscsys-sysnam MODIF ID b4.
SELECTION-SCREEN: END   OF BLOCK blq4.


*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN OUTPUT
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_syst.
  PERFORM f4_syst.

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN OUTPUT
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN OUTPUT.
  PERFORM habilita_parametros.

AT SELECTION-SCREEN.
  PERFORM pushbuttons.

*&---------------------------------------------------------------------*
*& ON VALUE-REQUEST
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_front.

  CALL METHOD cl_gui_frontend_services=>directory_browse
    EXPORTING
      window_title    = 'Seleccione ruta'
    CHANGING
      selected_folder = lv_dir.

  p_front = lv_dir.

*&---------------------------------------------------------------------*
*& ON VALUE-REQUEST
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON p_separ.
  PERFORM modificar_separador.

*&---------------------------------------------------------------------*
*& INITIALIZATION
*&---------------------------------------------------------------------*
INITIALIZATION.
  PERFORM initialization.

*&---------------------------------------------------------------------*
*& START-OF-SELECTION
*&---------------------------------------------------------------------*
START-OF-SELECTION.
* Validamos antes de continuar
  PERFORM validaciones_previas CHANGING w_subrc.
  CHECK w_subrc IS INITIAL.

  PERFORM logica.

  PERFORM show_alv.


*&---------------------------------------------------------------------*
*& Subrutinas
*&---------------------------------------------------------------------*
FORM habilita_parametros.
* Activo
  DATA: wl_active_b3 TYPE c.
  DATA: wl_active_b4 TYPE c.
  DATA: wl_active_b5 TYPE c.

  IF p_stms = abap_true.
    LOOP AT SCREEN.
      IF screen-group1 = 'B3' OR screen-group1 = 'B4' OR screen-group1 = 'FR' OR screen-group1 = 'TR' OR screen-name(3) EQ 'LV_' OR screen-group1 = 'B5'.
        screen-active    = 0.
        MODIFY SCREEN.
      ENDIF.
    ENDLOOP.
  ENDIF.

  IF p_down EQ abap_true OR
     p_upl  EQ abap_true.
    wl_active_b3 = '1'.
    wl_active_b4 = '0'.
    wl_active_b5 = '0'.
  ELSEIF p_pupl = abap_true.
    wl_active_b3 = '0'.
    wl_active_b4 = '0'.
    wl_active_b5 = '1'.
  ELSE.
    wl_active_b3 = '0'.
    wl_active_b4 = '1'.
    wl_active_b5 = '0'.
  ENDIF.

  LOOP AT SCREEN.
    IF screen-group1 = 'B3'.
      screen-active    = wl_active_b3.
      MODIFY SCREEN.
    ENDIF.

    IF screen-group1 = 'B4'.
      screen-active   = wl_active_b4.
      screen-required = '2'.
      MODIFY SCREEN.
    ENDIF.

    IF screen-group1 = 'FR'.
      screen-active    = wl_active_b3.
      MODIFY SCREEN.
    ENDIF.

    IF screen-group1 = 'TR' OR
       screen-group1 = 'FR'.
      screen-required = '2'.
      MODIFY SCREEN.
    ENDIF.

    IF screen-name(3) EQ 'LV_'.
      screen-input = '0'.
      MODIFY SCREEN.
    ENDIF.

    IF screen-group1 = 'B5'.
      screen-active   = wl_active_b5.
      screen-required = '2'.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.

  CASE gv_ping.
    WHEN '0'.     pushb = icon_led_green.
    WHEN '8'.     pushb = icon_led_red.
    WHEN OTHERS.  pushb = icon_led_inactive.
  ENDCASE.

ENDFORM.

FORM logica.

* Obtenemos las rutas fisicas en el servidor
  DATA: lv_filedata  LIKE rcgfiletr-ftfront,
        lv_filecofi  LIKE rcgfiletr-ftfront,
        lv_appdata   LIKE rcgfiletr-ftfront,
        lv_appcofile LIKE rcgfiletr-ftfront.
  DATA: ls_tr LIKE LINE OF s_tr.

  IF p_stms = abap_true.
    SUBMIT rstms_import_queue.
  ENDIF.

  IF p_trans = abap_true.
    "Leemos la cola de import
    PERFORM read_import_queue.
  ENDIF.

  LOOP AT s_tr INTO ls_tr.
    CONCATENATE p_front '/R' ls_tr-low+4(7) '.' ls_tr-low(3) INTO lv_filedata.
    CONCATENATE p_front '/K' ls_tr-low+4(7) '.' ls_tr-low(3) INTO lv_filecofi.
    CONCATENATE lv_bdata p_separ 'R' ls_tr-low+4(7) '.' ls_tr-low(3) INTO lv_appdata.
    CONCATENATE lv_bcofi p_separ 'K' ls_tr-low+4(7) '.' ls_tr-low(3) INTO lv_appcofile.

    IF p_down = abap_true.
      PERFORM check_tr_released USING ls_tr-low CHANGING  flg_stay.
      IF flg_stay = 0.
*       Data file
        PERFORM download USING lv_filedata
                               lv_appdata
                      CHANGING flg_stay.
      ENDIF.

      PERFORM save_log USING ls_tr-low
                             'DATA'
                             lv_appdata
                             lv_filedata
                             flg_stay.

      PERFORM check_tr_released USING ls_tr-low CHANGING  flg_stay.
      IF flg_stay = 0.
*       Cofiles file
        PERFORM download USING lv_filecofi
                               lv_appcofile
                      CHANGING flg_stay.
      ENDIF.

      PERFORM save_log USING ls_tr-low
                             'COFILE'
                             lv_appcofile
                             lv_filecofi
                             flg_stay.

    ELSEIF p_upl = abap_true.
*     Data file
      PERFORM upload USING    lv_filedata
                              lv_appdata
                     CHANGING flg_stay.

      PERFORM save_log USING ls_tr-low
                             'DATA'
                             lv_filedata
                             lv_appdata
                             flg_stay.

*     Cofiles file
      PERFORM upload USING    lv_filecofi
                              lv_appcofile
                     CHANGING flg_stay.

      PERFORM save_log USING ls_tr-low
                             'COFILE'
                             lv_filecofi
                             lv_appcofile
                             flg_stay.
    ELSEIF p_imp = abap_true.

      PERFORM import USING    ls_tr-low
                     CHANGING flg_stay.

      PERFORM save_log USING ls_tr-low
                             'IMPORT'
                             space
                             space
                             flg_stay.
    ELSEIF p_pupl = abap_true.
      PERFORM pre_upl USING ls_tr-low.
    ELSEIF p_trans = abap_true.
      PERFORM transport USING ls_tr-low.
    ENDIF.
  ENDLOOP.
ENDFORM.

FORM download
  USING
    i_ftfront       LIKE rcgfiletr-ftfront
    i_ftappl        LIKE rcgfiletr-ftfront
  CHANGING
    x_flg_stay      TYPE boolean.

  TYPES:
    t_line(1) TYPE x.

  DATA:
    i_tab   TYPE STANDARD TABLE OF t_line,
    i_wa(1) TYPE x,
    lv_fn   TYPE string.

  OPEN DATASET i_ftappl FOR INPUT IN BINARY MODE.
  DO.
    CLEAR i_wa.
    READ DATASET i_ftappl INTO i_wa.
    IF sy-subrc <> 0.
      EXIT.
    ELSE.
      APPEND i_wa TO i_tab.
    ENDIF.
  ENDDO.
  CLOSE DATASET i_ftappl.

  lv_fn = i_ftfront.

  CALL METHOD cl_gui_frontend_services=>gui_download
    EXPORTING
      filename                = lv_fn
      filetype                = 'BIN'
      append                  = ' '
    CHANGING
      data_tab                = i_tab
    EXCEPTIONS
      file_write_error        = 1
      no_batch                = 2
      gui_refuse_filetransfer = 3
      invalid_type            = 4
      no_authority            = 5
      unknown_error           = 6
      header_not_allowed      = 7
      separator_not_allowed   = 8
      filesize_not_allowed    = 9
      header_too_long         = 10
      dp_error_create         = 11
      dp_error_send           = 12
      dp_error_write          = 13
      unknown_dp_error        = 14
      access_denied           = 15
      dp_out_of_memory        = 16
      disk_full               = 17
      dp_timeout              = 18
      file_not_found          = 19
      dataprovider_exception  = 20
      control_flush_error     = 21
      OTHERS                  = 24.

  IF sy-subrc NE 0.
    x_flg_stay = 'X'.
  ELSE.
    CLEAR x_flg_stay.
  ENDIF.

ENDFORM.                    "download
*&---------------------------------------------------------------------*
*& Form save_log
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_TR_LOW
*&      --> P_
*&      --> LV_DATA
*&      --> LV_FILEDATA
*&      --> FLG_STAY
*&---------------------------------------------------------------------*
FORM save_log  USING    i_tr
                        i_typ
                        i_ini
                        i_fin
                        i_subrc.

  DATA: ls_log TYPE gty_log.

  ls_log-tr   = i_tr.
  ls_log-typ  = i_typ.
  ls_log-ini  = i_ini.
  ls_log-fin  = i_fin.

  CASE i_subrc.
    WHEN 0.
      ls_log-res  = 'OK'.
    WHEN 9.
      ls_log-res  = 'Order no liberada'.
    WHEN OTHERS.
      ls_log-res  = 'NOK'.
  ENDCASE.

  APPEND ls_log TO gt_log.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form show_alv
*&---------------------------------------------------------------------*
FORM show_alv .

  DATA: lr_functions TYPE REF TO cl_salv_functions_list.
  DATA: lr_columns_table TYPE REF TO cl_salv_columns_table,
        lr_column_table  TYPE REF TO cl_salv_column_table.

  IF p_pupl = abap_true.

    cl_salv_table=>factory(
      IMPORTING
        r_salv_table = alv
      CHANGING
        t_table      = gt_alv ).

    lr_functions = alv->get_functions( ).
    lr_functions->set_all( 'X' ).

    lr_columns_table = alv->get_columns( ).
    lr_column_table ?= lr_columns_table->get_column( 'OBJNAME' ).
    lr_column_table->set_short_text( 'Objeto' ).
    lr_column_table->set_medium_text( 'Objeto' ).
    lr_column_table->set_long_text( 'Objeto' ).
    lr_column_table ?= lr_columns_table->get_column( 'TEXT_ORDER' ).
    lr_column_table->set_short_text( 'Tipo.Orden' ).
    lr_column_table->set_medium_text( 'Tipo Orden' ).
    lr_column_table->set_long_text( 'Tipo de Orden' ).
    lr_column_table ?= lr_columns_table->get_column( 'ICON' ).
    lr_column_table->set_short_text( 'Icono' ).
    lr_column_table->set_medium_text( 'Icono' ).
    lr_column_table->set_long_text( 'Icono' ).
    lr_column_table ?= lr_columns_table->get_column( 'SUBTAREA' ).
    lr_column_table->set_short_text( 'Tarea' ).
    lr_column_table->set_medium_text( 'Tarea' ).
    lr_column_table->set_long_text( 'Tarea' ).

    IF alv IS BOUND.
      alv->set_screen_popup(
        start_column = 1
        end_column   = 220
        start_line   = 1
        end_line     = 20 ).
    ENDIF.

  ELSEIF p_trans = abap_true.

    LOOP AT gt_transp ASSIGNING FIELD-SYMBOL(<fs_transp>).
      <fs_transp>-posicon = sy-tabix.
    ENDLOOP.

    cl_salv_table=>factory(
      IMPORTING
        r_salv_table = alv
      CHANGING
        t_table      = gt_transp ).

    alv->set_screen_status(
  pfstatus      =  'SALV_STANDARD'
  report        =  sy-repid
  set_functions = alv->c_functions_all ).

    lr_functions = alv->get_functions( ).
    lr_functions->set_all( 'X' ).

    DATA: lr_events TYPE REF TO cl_salv_events_table.
    lr_events = alv->get_event( ).
    CREATE OBJECT gr_events.

*... §6.1 register to the event USER_COMMAND
    SET HANDLER gr_events->on_user_command FOR lr_events.
*... §6.2 register to the event DOUBLE_CLICK
    SET HANDLER gr_events->on_double_click FOR lr_events.
*... §6.3 register to the event LINK_CLICK
    SET HANDLER gr_events->on_link_click FOR lr_events.

    lr_columns_table = alv->get_columns( ).
    lr_column_table ?= lr_columns_table->get_column( 'POSICON' ).
    lr_column_table->set_short_text( 'Número' ).
    lr_column_table->set_medium_text( 'Número' ).
    lr_column_table->set_long_text( 'Número' ).
    lr_column_table ?= lr_columns_table->get_column( 'ORDEN' ).
    lr_column_table->set_short_text( 'Orden.Tp' ).
    lr_column_table->set_medium_text( 'Orden Transporte' ).
    lr_column_table->set_long_text( 'Orden Transporte' ).
    lr_column_table ?= lr_columns_table->get_column( 'ICON' ).
    lr_column_table->set_short_text( 'Icono' ).
    lr_column_table->set_medium_text( 'Icono' ).
    lr_column_table->set_long_text( 'Icono' ).
    lr_column_table ?= lr_columns_table->get_column( 'AS4TEXT' ).
    lr_column_table->set_short_text( 'Descripc' ).
    lr_column_table->set_medium_text( 'Descripción' ).
    lr_column_table->set_long_text( 'Descripción' ).
    lr_column_table ?= lr_columns_table->get_column( 'TRFUNCTION' ).
    lr_column_table->set_short_text( 'Tipo' ).
    lr_column_table->set_medium_text( 'Tipo' ).
    lr_column_table->set_long_text( 'Tipo' ).
    lr_column_table ?= lr_columns_table->get_column( 'TEXT_ORDER' ).
    lr_column_table->set_short_text( 'Tipo Orden' ).
    lr_column_table->set_medium_text( 'Tipo Orden' ).
    lr_column_table->set_long_text( 'Tipo Orden' ).

    TRY .
        lr_column_table ?= lr_columns_table->get_column( 'ORDEN' ).
      CATCH cx_salv_not_found.
    ENDTRY.

    TRY .
        lr_column_table->set_cell_type( value = if_salv_c_cell_type=>hotspot ).
      CATCH cx_salv_data_error.
    ENDTRY.

  ELSE.

    cl_salv_table=>factory(
      IMPORTING
        r_salv_table = alv
      CHANGING
        t_table      = gt_log ).

  ENDIF.

  alv->display( ).

ENDFORM.

FORM upload
      USING
        i_ftfront       LIKE rcgfiletr-ftfront
        i_ftappl        LIKE rcgfiletr-ftfront
      CHANGING
        x_flg_stay      TYPE boolean.

  TYPES:
    t_line(1) TYPE x.

  DATA:
    i_tab   TYPE STANDARD TABLE OF t_line,
    i_wa(1) TYPE x,
    lv_fn   TYPE string,
    lv_fl   TYPE i.

  lv_fn = i_ftfront.

  CALL METHOD cl_gui_frontend_services=>gui_upload
    EXPORTING
      filename                = lv_fn
      filetype                = 'BIN'
    IMPORTING
      filelength              = lv_fl
    CHANGING
      data_tab                = i_tab[]
    EXCEPTIONS
      file_open_error         = 1
      file_read_error         = 2
      no_batch                = 3
      gui_refuse_filetransfer = 4
      invalid_type            = 5
      no_authority            = 6
      unknown_error           = 7
      bad_data_format         = 8
      header_not_allowed      = 9
      separator_not_allowed   = 10
      header_too_long         = 11
      unknown_dp_error        = 12
      access_denied           = 13
      dp_out_of_memory        = 14
      disk_full               = 15
      dp_timeout              = 16
      not_supported_by_gui    = 17
      error_no_gui            = 18
      OTHERS                  = 19.

  OPEN DATASET i_ftappl FOR OUTPUT IN BINARY MODE.
  LOOP AT i_tab INTO i_wa.
    TRANSFER i_wa TO i_ftappl.
  ENDLOOP.
  CLOSE DATASET i_ftappl.

  IF sy-subrc NE 0.
    x_flg_stay = 'X'.
  ELSE.
    CLEAR x_flg_stay.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form check_tr_released
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> LS_TR_LOW
*&      <-- FLG_STAY
*&---------------------------------------------------------------------*
FORM check_tr_released  USING    i_tr
                        CHANGING cv_subrc.
  DATA: ls_e070 LIKE e070.

  CLEAR: cv_subrc.

  SELECT SINGLE * FROM e070 INTO ls_e070
    WHERE trkorr = i_tr.

  CASE ls_e070-trstatus.
    WHEN 'D'."  Modificable
      cv_subrc = 9.
    WHEN 'L'."  Modificable, protegido
      cv_subrc = 9.
    WHEN 'O'."  Liberación iniciada
      cv_subrc = 0.
    WHEN 'R'."  Liberado
      cv_subrc = 0.
    WHEN 'N'."  Liberado (protección import p.objetos reparados activa)
      cv_subrc = 0.
  ENDCASE.
ENDFORM.

FORM import USING i_tr
      CHANGING c_subrc.

  DATA: lv_target TYPE tmscsys-sysnam.
  lv_target = p_syst.

  CALL FUNCTION 'TMS_MGR_FORWARD_TR_REQUEST'
    EXPORTING
      iv_request                 = i_tr
      iv_target                  = lv_target
      iv_tarcli                  = sy-mandt
      iv_import_again            = 'X'
    EXCEPTIONS
      read_config_failed         = 1
      table_of_requests_is_empty = 2
      OTHERS                     = 3.

  c_subrc = sy-subrc.
ENDFORM.

*&---------------------------------------------------------------------*
*& Form initialization
*&---------------------------------------------------------------------*
FORM initialization .

  DATA: lv_fd LIKE stpa-file,
        lv_fc LIKE stpa-file.

  CALL FUNCTION 'TRINT_FI_GET_DIRECTORY_NAMES'
    IMPORTING
      ev_data_dir          = lv_fd
      ev_cofiles_dir       = lv_fc
    EXCEPTIONS
      get_dir_trans_failed = 1
      build_path_failed    = 2
      OTHERS               = 3.

  lv_bdata = lv_fd.
  lv_bcofi = lv_fc.

  w_separ  = p_separ  = lv_bdata(1).
ENDFORM.

*&---------------------------------------------------------------------*
*& Form validaciones_previas
*&---------------------------------------------------------------------*
FORM validaciones_previas CHANGING pc_w_subrc TYPE sy-subrc.

* CHECK p_stms IS INITIAL.

  pc_w_subrc = 0.
  IF s_tr[] IS INITIAL.
*   ERROR: Introduzca al menos una orden de transporte
    MESSAGE 'Introduzca al menos una orden de transporte'(004) TYPE 'S' DISPLAY LIKE 'E'.
    pc_w_subrc = 4.
    EXIT.
  ENDIF.

  IF p_down EQ abap_true OR                   "Descarga
     p_upl  EQ abap_true OR                   "Carga
     p_pupl EQ abap_true.                     "Chequeo pre upload
*   Ruta ficheros
    IF p_front IS INITIAL.
*     ERROR: Introduzca la ruta donde se alojan los ficheros
      MESSAGE 'Introduzca la ruta donde se alojan los ficheros'(002) TYPE 'S' DISPLAY LIKE 'E'.
      pc_w_subrc = 4.
      EXIT.
    ENDIF.
  ELSE.                                       "Añadir a cola de transporte
*   Sistema
    IF p_syst IS INITIAL.
*     ERROR: Introduzca el sistema
      MESSAGE 'Introduzca el sistema'(003) TYPE 'S' DISPLAY LIKE 'E'.
      pc_w_subrc = 4.
      EXIT.
    ENDIF.
  ENDIF.

  IF p_pupl = abap_true.
    IF p_rfc IS NOT INITIAL.
      IF gv_ping IS INITIAL.
        MESSAGE s398(00) WITH TEXT-m01 p_rfc TEXT-m02 DISPLAY LIKE 'E'.  "Antes de comenzar, compruebe si la conexion & está abierta
        pc_w_subrc = 4.
      ELSEIF gv_ping = 8.
        MESSAGE s398(00) WITH TEXT-m03 p_rfc TEXT-m04 DISPLAY LIKE 'E'.  "La conexion & no está abierta
        pc_w_subrc = 4.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.

*&---------------------------------------------------------------------*
*& Form f4_syst
*&---------------------------------------------------------------------*
FORM f4_syst.

* Sistemas
  TYPES:
    BEGIN OF ty_tmscsys,
      sysnam TYPE tmssysnam,
      systxt TYPE as4text,
    END OF ty_tmscsys.

  DATA: tl_tmscsys TYPE STANDARD TABLE OF ty_tmscsys.

  SELECT sysnam systxt
    INTO TABLE tl_tmscsys
    FROM tmscsys.
  CHECK tl_tmscsys[] IS NOT INITIAL.

  CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
    EXPORTING
      retfield        = 'SYSNAM'
      dynpprog        = sy-cprog
      dynpnr          = sy-dynnr
      dynprofield     = 'P_SYST'
      value_org       = 'S'
    TABLES
      value_tab       = tl_tmscsys
    EXCEPTIONS
      parameter_error = 1
      no_values_found = 2
      OTHERS          = 3.
ENDFORM.

*---------------------------------------------------------------------*
* Form modificar_separador
*---------------------------------------------------------------------*
FORM modificar_separador.

  REPLACE ALL OCCURRENCES OF w_separ IN lv_bdata WITH p_separ.
  IF sy-subrc EQ 0.
    REPLACE ALL OCCURRENCES OF w_separ IN lv_bcofi WITH p_separ.

    w_separ = p_separ.
  ENDIF.

ENDFORM.

FORM ping.

  gv_ping = 0.

  IF p_rfc IS NOT INITIAL.

    TRY.

        CALL FUNCTION 'RFC_PING' DESTINATION p_rfc EXCEPTIONS OTHERS = 1.

        IF sy-subrc <> 0.

          gv_ping = 8.

        ENDIF.

    ENDTRY.

  ELSE.

    gv_ping = 8.

  ENDIF.

ENDFORM.

FORM pushbuttons.

  LOOP AT SCREEN.
    CASE sscrfields.
      WHEN 'PUS'.
        PERFORM ping.
    ENDCASE.
  ENDLOOP.

ENDFORM.

FORM pre_upl USING iv_request TYPE e070-trkorr.


  DATA: lt_option           TYPE TABLE OF rfc_db_opt.
  DATA: ls_option           LIKE LINE OF lt_option.
  DATA: lt_fields	          TYPE TABLE OF	rfc_db_fld.
  DATA: lt_data_e070        TYPE TABLE OF tab512.
  DATA: lt_data_e071        TYPE TABLE OF tab512.
  DATA: lt_data_e070_task   TYPE TABLE OF tab512.
  DATA: lv_description(60).
  DATA: lv_category.

  DATA: lt_objects      TYPE STANDARD TABLE OF cts_obj.
  DATA: lt_objects_task TYPE STANDARD TABLE OF cts_obj.

  DATA: lt_e070 TYPE TABLE OF e070.
  DATA: lt_e070_task TYPE TABLE OF e070.


*  DATA: gs_alv_standard TYPE e071.
  DATA: ls_e070_task TYPE e070.

  ls_option-text = |{ 'TRKORR =''' }{ iv_request }{ '''' }|.
  APPEND ls_option TO lt_option.

  CALL FUNCTION 'RFC_READ_TABLE' DESTINATION p_rfc
    EXPORTING
      query_table          = 'E070'
    TABLES
      options              = lt_option
*     fields               = lt_fields
      data                 = lt_data_e070
    EXCEPTIONS
      table_not_available  = 1
      table_without_data   = 2
      option_not_valid     = 3
      field_not_valid      = 4
      not_authorized       = 5
      data_buffer_exceeded = 6
      OTHERS               = 7.

  lt_e070[] = lt_data_e070[].

  CALL FUNCTION 'CTS_API_READ_CHANGE_REQUEST' DESTINATION p_rfc "Lectura de objetos de la orden principal
    EXPORTING
      request     = iv_request
    IMPORTING
      description = lv_description
      category    = lv_category
    TABLES
      objects     = lt_objects.

  ls_option-text = |{ 'STRKORR =''' }{ iv_request }{ '''' }|.
  CLEAR: lt_option[].
  APPEND ls_option TO lt_option.

  CALL FUNCTION 'RFC_READ_TABLE' DESTINATION p_rfc
    EXPORTING
      query_table          = 'E070'
    TABLES
      options              = lt_option
      fields               = lt_fields
      data                 = lt_data_e070_task
    EXCEPTIONS
      table_not_available  = 1
      table_without_data   = 2
      option_not_valid     = 3
      field_not_valid      = 4
      not_authorized       = 5
      data_buffer_exceeded = 6
      OTHERS               = 7.

*  Obtenemos la tarea
  READ TABLE lt_data_e070_task INTO DATA(ls_data_e070_task) INDEX 1.

  ls_e070_task = ls_data_e070_task-wa.

  CALL FUNCTION 'CTS_API_READ_CHANGE_REQUEST' DESTINATION p_rfc "Lectura de objetos de la tarea
    EXPORTING
      request = ls_e070_task-trkorr "tarea
    TABLES
      objects = lt_objects_task.     "objetos tarea

  LOOP AT lt_objects INTO DATA(ls_objects_orden).
    CLEAR: gs_alv.

    gs_alv-objname    = ls_objects_orden-name.
    gs_alv-objtyp1    = ls_objects_orden-object.
    gs_alv-orden      = iv_request.
    gs_alv-as4text    = lv_description.
*        gs_alv-subtarea   = ls_e070_subtask-trkorr.



    APPEND gs_alv TO gt_alv.

  ENDLOOP.

  LOOP AT lt_objects_task INTO DATA(ls_objects_task).
    CLEAR: gs_alv.
    gs_alv-objname    = ls_objects_task-name.
    gs_alv-objtyp1    = ls_objects_task-object.
    gs_alv-orden      = iv_request.
    gs_alv-as4text    = lv_description.
    gs_alv-subtarea   = ls_e070_task-trkorr.
    APPEND gs_alv TO gt_alv.
  ENDLOOP.

  LOOP AT gt_alv ASSIGNING FIELD-SYMBOL(<fs_alv>).
    CASE lv_category.
      WHEN 'K'. <fs_alv>-trfunction = 'W'. <fs_alv>-text_order = 'Orden de workbench'.
      WHEN 'W'. <fs_alv>-trfunction = 'C'. <fs_alv>-text_order = 'Orden Customizing'.
      WHEN 'C'. <fs_alv>-trfunction = 'C'. <fs_alv>-text_order = 'Traslado de objetos sin cambio de paquete'.
      WHEN 'O'. <fs_alv>-trfunction = 'O'. <fs_alv>-text_order = 'Traslado de objetos con cambio de paquete'.
      WHEN 'E'. <fs_alv>-trfunction = 'E'. <fs_alv>-text_order = 'Traslado de un paquete completo'.
      WHEN 'T'. <fs_alv>-trfunction = 'T'. <fs_alv>-text_order = 'Transporte de copias'.
      WHEN 'S'. <fs_alv>-trfunction = 'S'. <fs_alv>-text_order = 'Desarrollo/Corrección'.
      WHEN 'Q'. <fs_alv>-trfunction = 'Q'. <fs_alv>-text_order = 'Tarea Customizing'.
      WHEN 'X'. <fs_alv>-trfunction = 'X'. <fs_alv>-text_order = 'Tarea no clasificada'.
      WHEN 'R'. <fs_alv>-trfunction = 'R'. <fs_alv>-text_order = 'Reparación'.
      WHEN 'G'. <fs_alv>-trfunction = 'G'. <fs_alv>-text_order = 'Lista de objetos para proyecto CTS'.
      WHEN 'M'. <fs_alv>-trfunction = 'M'. <fs_alv>-text_order = 'Orden para transporte de mandante'.
      WHEN 'P'. <fs_alv>-trfunction = 'P'. <fs_alv>-text_order = 'Lista de objetos para upgrade'.
      WHEN 'D'. <fs_alv>-trfunction = 'D'. <fs_alv>-text_order = 'Lista de objetos para patch'.
      WHEN 'F'. <fs_alv>-trfunction = 'F'. <fs_alv>-text_order = 'Lista de materiales'.
      WHEN 'L'. <fs_alv>-trfunction = 'L'. <fs_alv>-text_order = 'Transporte de borrado'.
    ENDCASE.

    READ TABLE gt_param INTO DATA(ls_param) WITH KEY tabla = gs_alv-objname.
    IF sy-subrc <> 0.
      "Si no está en la parametrizacion de objetos conflictivos, se puede importar a priori
      <fs_alv>-icon = icon_green_light. "Semaforo verde
    ELSE.
      CASE ls_param-reaccion.
        WHEN 'ADVERTENCIA'.     <fs_alv>-icon = icon_yellow_light. "Semaforo en verde
        WHEN 'NO TRANSPORTAR'.  <fs_alv>-icon = icon_red_light.    "Semafro en rojo
      ENDCASE.
    ENDIF.

    IF <fs_alv>-objtyp1 EQ 'NOTE' OR <fs_alv>-objtyp1 EQ 'CINS'.
      <fs_alv>-icon = icon_red_light.
    ENDIF.

    IF <fs_alv>-icon IS INITIAL.
      <fs_alv>-icon = icon_green_light.
    ENDIF.
  ENDLOOP.

ENDFORM.

FORM parametrizacion.

  REFRESH: gt_param.

  DATA: ls_param       LIKE LINE OF gt_param.

  CLEAR: ls_param.
  ls_param-tabla       = 'T881'.
  ls_param-observacion = 'Ledger Master'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'T882G'.
  ls_param-observacion = 'Company Code - Ledger Assignment'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'T001A'.
  ls_param-observacion = 'Additional Local Currencies Control for Company Code'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'T001'.
  ls_param-observacion = 'Company Codes'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'TKA01'.
  ls_param-observacion = 'Controlling Areas'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'TKA02'.
  ls_param-observacion = 'Controlling Area Assignment'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'SKA1'.
  ls_param-observacion = 'G/L Account Master (Chart of Accounts)'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'CSKA'.
  ls_param-observacion = 'Cost Elements (Data Dependent on Chart of Accounts)'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'CSKB'.
  ls_param-observacion = 'Cost Elements (Data Dependent on Controlling Area)'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'FAGL_ACTIVEC'.
  ls_param-observacion = 'Activation of New General Ledger'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'TCKMHD'.
  ls_param-observacion = 'Description of Material Ledger Type'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'TCKMIT'.
  ls_param-observacion = 'Currency Types and Valuation Categories for Mat. Ledger Type'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'T093'.
  ls_param-observacion = 'Real and derived depreciation areas'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'T093A'.
  ls_param-observacion = 'Real depreciation area'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'T093B'.
  ls_param-observacion = 'Company code-related depreciation area specifications'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'T093U'.
  ls_param-observacion = 'Options for asset legacy data transfer'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'T093D'.
  ls_param-observacion = 'Control dep. posting'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'T093S'.
  ls_param-observacion = 'Value Field Names for Depreciation Areas'.
  ls_param-origen      = 'Nota 2192251'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T082AVIEWB'.
  ls_param-observacion = 'View Authorization for Depreciation Areas'.
  ls_param-origen = 'Nota 2192251'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'ANKB'.
  ls_param-observacion = 'Asset class: depreciation area'.
  ls_param-origen = 'Nota 2192251'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T090M'.
  ls_param-observacion = 'Table for maximum depreciation amounts'.
  ls_param-origen = 'Nota 2192251'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T093Y'.
  ls_param-observacion = 'Shortened fiscal year'.
  ls_param-origen = 'Nota 2192251'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'TABWU'.
  ls_param-observacion = 'Special Treatment of Retirements'.
  ls_param-origen = 'Nota 2192251'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'TABWA'.
  ls_param-observacion = 'Transaction types/dep. area'.
  ls_param-origen = 'Nota 2192251'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T096'.
  ls_param-observacion = 'Chart of depreciation'.
  ls_param-origen = 'Nota 2192251'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T093_BSN_FUNC'.
  ls_param-observacion = 'ERP Business Function for FI-AA'.
  ls_param-origen = 'Nota 2192251'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T095_ACI'.
  ls_param-observacion = 'Technical Clearing Account for Integrated Asset Acquisition'.
  ls_param-origen = 'Nota 2192251'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T093C'.
  ls_param-observacion = 'Company codes in Asset Accounting'.
  ls_param-origen = 'Nota 2192251'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'FAGLCOFI'.
  ls_param-observacion = 'Tablas de integracion '.
  ls_param-origen = 'Nota 2192251'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T001CM'.
  ls_param-observacion = 'Áreas de control de créditso permitidas por sociedad'.
  ls_param-origen = 'Gestion de credito'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T001K'.
  ls_param-observacion = 'Areas de valoracion'.
  ls_param-origen = 'Centros / Ledger'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T001W'.
  ls_param-observacion = 'Centros/Sucursales'.
  ls_param-origen = 'Centros'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'TCKMT'.
  ls_param-observacion = 'Tipo de ledger de materiales (tabla de textos)'.
  ls_param-origen = 'Ledger'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'TCKM2'.
  ls_param-observacion = 'Asignación de tipos ledger mater.a ámbitos de valoración'.
  ls_param-origen = 'Ledger'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'TKE'.
  ls_param-observacion = 'Tablas de definicion de COPA'.
  ls_param-origen = 'COPA'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.
  CLEAR ls_param.

  ls_param-tabla = 'CE1'.
  ls_param-observacion = 'Tabla de partidas de COPA'.
  ls_param-origen = 'COPA'.
  ls_param-reaccion = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T134'.
  ls_param-observacion = 'Tipos de material'.
  ls_param-origen = 'Materiales'.
  ls_param-reaccion = 'ADVERTENCIA'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T134M'.
  ls_param-observacion = 'Control actualiz.valores/cantidades'.
  ls_param-origen = 'Materiales'.
  ls_param-reaccion = 'ADVERTENCIA'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T077D'.
  ls_param-observacion = 'Grupos de cuentas: Deudores'.
  ls_param-origen = 'Interloc. Comerciales'.
  ls_param-reaccion = 'ADVERTENCIA'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T077X'.
  ls_param-observacion = 'Grupos de cuentas de tabla T077D'.
  ls_param-origen = 'Interloc. Comerciales'.
  ls_param-reaccion = 'ADVERTENCIA'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'TKUPA'.
  ls_param-observacion = 'Grupos de cuentas: Clientes'.
  ls_param-origen = 'Interloc. Comerciales'.
  ls_param-reaccion = 'ADVERTENCIA'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T077K'.
  ls_param-observacion = 'Grupos de cuentas: Acreedores'.
  ls_param-origen = 'Interloc. Comerciales'.
  ls_param-reaccion = 'ADVERTENCIA'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T077Y'.
  ls_param-observacion = 'Grupos de cuentas de tabla T077K'.
  ls_param-origen = 'Interloc. Comerciales'.
  ls_param-reaccion = 'ADVERTENCIA'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T16FG'.
  ls_param-observacion = 'Grupos de liberacion'.
  ls_param-origen = 'Estrategias Lib.MM'.
  ls_param-reaccion = 'ADVERTENCIA'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T16FS'.
  ls_param-observacion = 'Estrategias de liberacion'.
  ls_param-origen = 'Estrategias Lib.MM'.
  ls_param-reaccion = 'ADVERTENCIA'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla = 'T16FV'.
  ls_param-observacion = 'Requisitos para liberación'.
  ls_param-origen = 'Estrategias Lib.MM'.
  ls_param-reaccion = 'ADVERTENCIA'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'T012K'.
  ls_param-observacion = 'Se sustituye por CDS'.
  ls_param-origen      = 'FI'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

  CLEAR ls_param.
  ls_param-tabla       = 'T030'.
  ls_param-observacion = 'transacción OBYC'.
  ls_param-origen      = 'FI'.
  ls_param-reaccion    = 'NO TRANSPORTAR'.
  APPEND ls_param TO gt_param.

*  > PRUEBA <

*  CLEAR ls_param.
*  ls_param-tabla = '588D'.
*  ls_param-observacion = 'Requisitos para liberación'.
*  ls_param-origen = 'Estrategias Lib.MM'.
*  ls_param-reaccion = 'ADVERTENCIA'.
*  APPEND ls_param TO gt_param.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form transport
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM transport USING iv_request TYPE e070-trkorr.

  DATA: ls_transp TYPE ty_transp.
  DATA: lv_description(60).
  DATA: lv_category.
  DATA: lt_objects      TYPE STANDARD TABLE OF cts_obj.
  DATA: lv_ret(3).

*  CALL FUNCTION 'CTS_API_READ_CHANGE_REQUEST' DESTINATION p_rfc "Lectura de objetos de la orden principal
*    EXPORTING
*      request     = iv_request
*    IMPORTING
*      description = lv_description
*      category    = lv_category
*      retcode     = lv_ret
*    TABLES
*      objects     = lt_objects.

  READ TABLE gt_import_queue INTO DATA(ls_import_queue) WITH KEY trkorr = iv_request.

  CASE sy-subrc.
    WHEN 0.      ls_transp-icon = icon_parameter.
    WHEN OTHERS. ls_transp-icon = icon_breakpoint. "Señal de Stop. La orden no fue encontrada.
  ENDCASE.

  ls_transp-orden = iv_request.
  ls_transp-as4text = ls_import_queue-text.

  CASE ls_import_queue-trfunc.
    WHEN 'K'. ls_transp-trfunction = 'W'. ls_transp-text_order = 'Orden de workbench'.
    WHEN 'W'. ls_transp-trfunction = 'C'. ls_transp-text_order = 'Orden Customizing'.
    WHEN 'C'. ls_transp-trfunction = 'C'. ls_transp-text_order = 'Traslado de objetos sin cambio de paquete'.
    WHEN 'O'. ls_transp-trfunction = 'O'. ls_transp-text_order = 'Traslado de objetos con cambio de paquete'.
    WHEN 'E'. ls_transp-trfunction = 'E'. ls_transp-text_order = 'Traslado de un paquete completo'.
    WHEN 'T'. ls_transp-trfunction = 'T'. ls_transp-text_order = 'Transporte de copias'.
    WHEN 'S'. ls_transp-trfunction = 'S'. ls_transp-text_order = 'Desarrollo/Corrección'.
    WHEN 'Q'. ls_transp-trfunction = 'Q'. ls_transp-text_order = 'Tarea Customizing'.
    WHEN 'X'. ls_transp-trfunction = 'X'. ls_transp-text_order = 'Tarea no clasificada'.
    WHEN 'R'. ls_transp-trfunction = 'R'. ls_transp-text_order = 'Reparación'.
    WHEN 'G'. ls_transp-trfunction = 'G'. ls_transp-text_order = 'Lista de objetos para proyecto CTS'.
    WHEN 'M'. ls_transp-trfunction = 'M'. ls_transp-text_order = 'Orden para transporte de mandante'.
    WHEN 'P'. ls_transp-trfunction = 'P'. ls_transp-text_order = 'Lista de objetos para upgrade'.
    WHEN 'D'. ls_transp-trfunction = 'D'. ls_transp-text_order = 'Lista de objetos para patch'.
    WHEN 'F'. ls_transp-trfunction = 'F'. ls_transp-text_order = 'Lista de materiales'.
    WHEN 'L'. ls_transp-trfunction = 'L'. ls_transp-text_order = 'Transporte de borrado'.
  ENDCASE.

  APPEND ls_transp TO gt_transp.


ENDFORM.

FORM handle_user_command USING i_ucomm TYPE salv_de_function.

  DATA:ls_api  TYPE REF TO if_salv_gui_om_extend_grid_api,
       ls_edit TYPE REF TO if_salv_gui_om_edit_restricted.

  DATA: lv_pos1(2) TYPE n.
  DATA: lv_pos2(2) TYPE n.

  ls_api = alv->extended_grid_api( ).
  ls_edit = ls_api->editable_restricted( ).

  CASE i_ucomm.

    WHEN 'EDIT'.

      CASE gv_edit.
        WHEN abap_false. gv_edit = abap_true.
        WHEN abap_true.  gv_edit = abap_false.
      ENDCASE.

      TRY.
          ls_edit->set_attributes_for_columnname(
                       EXPORTING
                         columnname = 'POSICON'
                         all_cells_input_enabled = gv_edit
                       ).


        CATCH cx_salv_not_found.
      ENDTRY.

      ls_edit->validate_changed_data( ).
      alv->refresh( ).

    WHEN 'CHECK'.

      CLEAR: gv_error.

      ls_edit->validate_changed_data( ).
      alv->refresh( ).

      SORT gt_transp BY posicon.

      LOOP AT gt_transp INTO DATA(ls_transp).

        IF sy-tabix = 1.
          lv_pos1 = ls_transp-posicon.
        ELSEIF sy-tabix = 2.
          lv_pos2 = ls_transp-posicon.
        ELSE.
          lv_pos1 = lv_pos2.
          lv_pos2 = ls_transp-posicon.
        ENDIF.

        IF sy-tabix > 1.
          IF lv_pos2 - lv_pos1 <> 1.
            gv_error = abap_true.
          ENDIF.
        ENDIF.

      ENDLOOP.


      IF gv_error IS NOT INITIAL.
        MESSAGE e398(00) WITH 'Secuencia incorrecta'.
      ELSE.
        MESSAGE s398(00) WITH 'Secuencia correcta'.
      ENDIF.

    WHEN 'TRANSP'.


      IF gv_error IS INITIAL.
        CLEAR: ls_transp.
        LOOP AT gt_transp ASSIGNING FIELD-SYMBOL(<fs_transp>).

          <fs_transp>-icon = icon_transport.

          ls_edit->validate_changed_data( ).
          alv->refresh( ).

          CALL FUNCTION 'TMS_UI_IMPORT_TR_REQUEST'
            EXPORTING
              iv_system             = CONV tmscsys-sysnam( sy-sysid )
              iv_request            = <fs_transp>-orden
            EXCEPTIONS
              cancelled_by_user     = 1
              import_request_denied = 2
              import_request_failed = 3
              OTHERS                = 4.
          CASE sy-subrc.
            WHEN 0.       <fs_transp>-icon = icon_led_green.
            WHEN OTHERS.  <fs_transp>-icon = icon_led_red.
          ENDCASE.

          ls_edit->validate_changed_data( ).
          alv->refresh( ).

        ENDLOOP.
      ELSE.
        MESSAGE e398(00) WITH 'Secuencia incorrecta'.
      ENDIF.

  ENDCASE.

ENDFORM.                    " handle_user_command
*&---------------------------------------------------------------------*
*& Form read_import_queue
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM read_import_queue .

  CLEAR: gt_import_queue.


  CALL FUNCTION 'TMS_MGR_READ_TRANSPORT_QUEUE'
    EXPORTING
      iv_system = CONV sysname( sy-sysid )
    TABLES
      tt_buffer = gt_import_queue.

  DELETE gt_import_queue WHERE trkorr NOT IN s_tr.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form show_cell_info
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> ROW
*&      --> COLUMN
*&---------------------------------------------------------------------*
FORM show_cell_info  USING    p_row
                              p_column.

  CASE p_column.

    WHEN 'ORDEN'.

      DATA(lv_orden) = gt_transp[ p_row ]-orden.

      SET PARAMETER ID 'KOR' FIELD lv_orden.

      CALL FUNCTION 'TR_PRESENT_REQUEST'
        EXPORTING
          iv_trkorr    = lv_orden
          iv_highlight = 'X'.

  ENDCASE.



ENDFORM.
