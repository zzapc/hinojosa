*&---------------------------------------------------------------------*
*& Include          ZSEI_MIG_00053_F01
*&---------------------------------------------------------------------*


*&---------------------------------------------------------------------*
*& Form pbo
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM pbo .

  LOOP AT SCREEN.
    CASE abap_true.
      WHEN p_factu.
        IF screen-name CS 'S_FACTU'.
          screen-active = 1.
          MODIFY SCREEN.
        ELSEIF screen-name CS 'S_ENTRE'.
          screen-active = 0.
          MODIFY SCREEN.
        ENDIF.
      WHEN p_entre.
        IF screen-name CS 'S_FACTU'.
          screen-active = 0.
          MODIFY SCREEN.
        ELSEIF screen-name CS 'S_ENTRE'.
          screen-active = 1.
          MODIFY SCREEN.
        ENDIF.
    ENDCASE.
  ENDLOOP.

ENDFORM.

FORM leer_datos.

  TYPES: BEGIN OF ltt_entre,
           vbeln   TYPE likp-vbeln,
           exnum   TYPE likp-exnum,
           expvz   TYPE likp-gts_expvz,
           vorpa   TYPE likp-gts_vorpa,
           vornu   TYPE likp-gts_vornu,
           log(50).
  TYPES: END OF ltt_entre.

  TYPES: BEGIN OF ltt_factu,
           vbeln   TYPE vbrk-vbeln,
           posnr   TYPE vbrp-posnr,
           bukrs   TYPE vbrk-bukrs,
           grwcu   TYPE vbrk-grwcu,
           waers   TYPE t001-waers,
           refnr   TYPE eikp-refnr,
           exnum   TYPE eipo-exnum,
           expos   TYPE eipo-expos,
           grwrt   TYPE eipo-grwrt,
           log(50).
  TYPES: END OF ltt_factu.

*  DATA: lt_entre TYPE TABLE OF ltt_entre.
*  DATA: lt_factu TYPE TABLE OF ltt_factu.
  DATA: tabla         TYPE REF TO data.

  CASE abap_true.

    WHEN p_entre.

      CREATE DATA tabla TYPE STANDARD TABLE OF ltt_entre WITH NON-UNIQUE DEFAULT KEY.
      ASSIGN tabla->* TO <fst_datos>.
      SELECT eikp~refnr AS vbeln, eikp~exnum, eikp~expvz, eikp~vorpa, eikp~vornu
        FROM        eikp AS eikp
        INNER JOIN  likp AS likp ON eikp~refnr = likp~vbeln
        WHERE eikp~refnr IN @s_entre
        AND eikp~exnum IS NOT INITIAL
        INTO CORRESPONDING FIELDS OF TABLE @<fst_datos>.

    WHEN p_factu.

      CREATE DATA tabla TYPE STANDARD TABLE OF ltt_factu WITH NON-UNIQUE DEFAULT KEY.
      ASSIGN tabla->* TO <fst_datos>.
      SELECT eipo~exnum, eipo~expos, eikp~refnr, eipo~grwrt, vbrk~vbeln, vbrp~posnr, vbrk~bukrs, vbrk~grwcu, t001~waers
        FROM        eikp AS eikp
        INNER JOIN  eipo AS eipo ON eikp~exnum = eipo~exnum
        INNER JOIN  vbrk AS vbrk ON eikp~refnr = vbrk~vbeln
        INNER JOIN  vbrp AS vbrp ON vbrp~vbeln = vbrk~vbeln
        INNER JOIN  t001 AS t001 ON vbrk~bukrs = t001~bukrs
        WHERE eikp~refnr IN @s_factu
        AND   eipo~expos = vbrp~posnr
        INTO CORRESPONDING FIELDS OF TABLE @<fst_datos>.

  ENDCASE.

ENDFORM.

FORM show_alv USING t_data TYPE STANDARD TABLE.

  DATA typedescr TYPE REF TO cl_abap_datadescr.

  IF lines( <fst_datos> ) IS INITIAL.
    MESSAGE e398(00) WITH TEXT-m01. "No se han encontrado documentos
  ELSE.
    typedescr ?= cl_abap_typedescr=>describe_by_data( <fst_datos> ).

    DATA:
      lo_functions TYPE REF TO cl_salv_functions_list,
      lo_columns   TYPE REF TO cl_salv_columns_table,
      lo_display   TYPE REF TO cl_salv_display_settings,
      lo_select    TYPE REF TO cl_salv_selections,
      lo_column    TYPE REF TO cl_salv_column,
      lo_sorts     TYPE REF TO cl_salv_sorts,
      lo_layout    TYPE REF TO cl_salv_layout,
      ls_key       TYPE salv_s_layout_key,
      ls_variant   TYPE slis_vari.

    DATA: lr_columns_table TYPE REF TO cl_salv_columns_table,
          lr_column_table  TYPE REF TO cl_salv_column_table.

    DATA: lr_events TYPE REF TO cl_salv_events_table.
    DATA: event_handler TYPE REF TO lcl_handle_events.

    DATA: lv_repid TYPE sy-repid.

    TRY.

        CALL METHOD cl_salv_table=>factory
          IMPORTING
            r_salv_table = go_table
          CHANGING
            t_table      = t_data.

        " Activa todas las funciones estandar del ALV
        lo_functions = go_table->get_functions( ).
        lo_functions->set_all( abap_true ).

        " Obtiene las propiedades de visualización
        lo_display = go_table->get_display_settings( ).

        " ALV con estilo Zebra
        lo_select = go_table->get_selections( ).
        lo_select->set_selection_mode( if_salv_c_selection_mode=>none ).

        " Obtiene las columnas
        lo_columns = go_table->get_columns( ).

        lv_repid = sy-repid.

        go_table->set_screen_status(
        pfstatus      =  'STATUS_STRUCTURE'
        report        =  lv_repid
        set_functions = go_table->c_functions_all ).


        lr_events = go_table->get_event( ).
        CREATE OBJECT event_handler.
        SET HANDLER event_handler->on_user_command FOR lr_events.
*    SET HANDLER event_handler->m_link_click FOR lr_events.
*
*    " Cambiar nombre de las columnas del informe
        lo_column = lo_columns->get_column( 'LOG' ).
        lo_column->set_short_text( 'Resultado'(002) ). lo_column->set_medium_text( 'Resul.Actualizacion'(003) ). lo_column->set_long_text( 'Resultado Actualizacion'(004) ).

        lo_column = lo_columns->get_column( 'GRWCU' ).
        lo_column->set_short_text( 'VBRK-GRWCU'(002) ). lo_column->set_medium_text( 'VBRK-GRWCU'(002) ). lo_column->set_long_text( 'VBRK-GRWCU'(002) ).

        lo_column = lo_columns->get_column( 'GRWRT' ).
        lo_column->set_short_text( 'EIPO-GRWRT'(002) ). lo_column->set_medium_text( 'EIPO-GRWRT'(002) ). lo_column->set_long_text( 'EIPO-GRWRT'(002) ).

        " Optimiza la salida
        lo_columns->set_optimize( 'X' ).

        " Layout
        lo_layout = go_table->get_layout( ).
        ls_key-report = sy-repid.
        lo_layout->set_key( ls_key ).
        lo_layout->set_save_restriction( cl_salv_layout=>restrict_none ).
*    ls_variant = p_vari.
        lo_layout->set_initial_layout( ls_variant ).

      CATCH cx_salv_not_found.
      CATCH cx_salv_msg.
      CATCH cx_salv_data_error.
      CATCH cx_salv_existing.
    ENDTRY.

    " Mostrar Log
    go_table->display( ).

  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form grabar_datos
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM grabar_datos .

  LOOP AT <fst_datos> ASSIGNING FIELD-SYMBOL(<fs_linea>).

    CASE abap_true.
      WHEN p_entre. PERFORM modif_entrega USING <fs_linea>.
      WHEN p_factu. PERFORM modif_actura  USING <fs_linea>.
    ENDCASE.

  ENDLOOP.


ENDFORM.

FORM modif_entrega USING is_entrega.

  DATA: ls_likp TYPE likp.


  ASSIGN COMPONENT 'EXPVZ' OF STRUCTURE is_entrega TO FIELD-SYMBOL(<fs_campo>).
  ls_likp-gts_EXPVZ = <fs_campo>.
  ASSIGN COMPONENT 'VORPA' OF STRUCTURE is_entrega TO <fs_campo>.
  ls_likp-gts_vorpa = <fs_campo>.
  ASSIGN COMPONENT 'VORNU' OF STRUCTURE is_entrega TO <fs_campo>.
  ls_likp-gts_vornu = <fs_campo>.

  ASSIGN COMPONENT 'VBELN' OF STRUCTURE is_entrega TO <fs_campo>.

  UPDATE likp SET gts_EXPVZ = ls_likp-gts_EXPVZ
                  gts_vorpa = ls_likp-gts_vorpa
                  gts_vornu = ls_likp-gts_vornu
          WHERE   vbeln = <fs_campo>.

  IF sy-subrc = 0.
    ASSIGN COMPONENT 'LOG' OF STRUCTURE is_entrega TO <fs_campo>.
    <fs_campo> = 'OK'.
  ELSE.
    ASSIGN COMPONENT 'LOG' OF STRUCTURE is_entrega TO <fs_campo>.
    <fs_campo> = 'NOK'.
  ENDIF.


*  DATA: ls_hdata    TYPE bapiobdlvhdrchg,
*        ls_hcont    TYPE bapiobdlvhdrctrlchg,
*        lv_delivy   TYPE bapiobdlvhdrchg-deliv_numb,
*        lt_bapiret2 TYPE STANDARD TABLE OF bapiret2.
*
*  ASSIGN COMPONENT 'VBELN' OF STRUCTURE is_entrega TO FIELD-SYMBOL(<fs_campo>).
*  ls_hdata-deliv_numb = ls_hcont-deliv_numb = lv_delivy = <fs_campo>.
*  ls_hcont-dlv_del    = abap_true.
*Assign COMPONENT ('EXNUM') of STRUCTURE is_entrega TO <fs_campo>.
*Assign COMPONENT ('EXPVZ') of STRUCTURE is_entrega TO <fs_campo>.
*Assign COMPONENT ('VORPA') of STRUCTURE is_entrega TO <fs_campo>.
*Assign COMPONENT ('VORNU') of STRUCTURE is_entrega TO <fs_campo>.
*Assign COMPONENT ('LOG')   of STRUCTURE is_entrega TO <fs_campo>.



*  CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
*    EXPORTING
*      header_data    = ls_hdata
*      header_control = ls_hcont
*      delivery       = lv_delivy
*    TABLES
*      return         = lt_bapiret2.

*  DATA: ls_header_data      TYPE bapiibdlvhdrcon.
*  DATA: ls_header_control   TYPE bapiibdlvhdrctrlcon.
*  DATA: ls_header_data_spl  TYPE /spe/bapiibdlvhdrconf.
*  DATA: ls_header_ctrl_spl  TYPE /spe/bapiibdlvhdrctrlconf.
*  DATA: ls_delivery         TYPE bapiibdlvhdrcon-deliv_numb.
*
*  ls_header_data-deliv_numb = ls_header_control-deliv_numb = ls_delivery = <fs_campo>.
*
*  ASSIGN COMPONENT 'VORPA' OF STRUCTURE is_entrega TO <fs_campo>.
*  ls_header_data_spl-prev_doc_type = <fs_campo>.
*  ASSIGN COMPONENT 'VORNU' OF STRUCTURE is_entrega TO <fs_campo>.
*  ls_header_data_spl-prev_doc_no = <fs_campo>.
*  ASSIGN COMPONENT 'EXPVZ' OF STRUCTURE is_entrega TO <fs_campo>.
*  ls_header_data_spl-mode_of_trans = <fs_campo>.
*
*  CALL FUNCTION '/SPE/INB_DELIVERY_CONFIRM_DEC'
*    EXPORTING
*      header_data        = ls_header_data
*      header_data_spl    = ls_header_data_spl
*      header_control     = ls_header_control
**      header_control_spl = ls_header_ctrl_spl
*      delivery           = ls_delivery
**     TECHN_CONTROL      =
**     IV_SERVICE_CALL    =
*    TABLES
**     HEADER_PARTNER     =
**     HEADER_PARTNER_ADDR              = lt_partner_addr
**     HEADER_DEADLINES   =
**     ITEM_DATA          =
**     ITEM_CONTROL       =
**     ITEM_SERIAL_NO     =
**     HANDLING_UNIT_HEADER             =
**     HANDLING_UNIT_ITEM =
**     HANDLING_UNIT_SERNO              =
**     HANDLING_UNIT_HEADER_CROSS       =
**     HANDLING_UNIT_IDENTIFIERS        =
**     HANDLING_UNIT_HEADER_EPC         =
**     HANDLING_UNIT_ITEMS_EPC          =
**     EXTENSION1         =
**     EXTENSION2         =
*      return             = lt_bapiret2
**     TOKENREFERENCE     =
**     HANDLING_UNIT_ITEM_SPL           =
**     ITEM_DATA_SPL      =
**     ITEM_DATA_DOCU_BATCH             =
**     TEXT_HEADER        =
**     TEXT_LINES         =
**     CWM_ITEM_DATA      =
**     CWM_HU_ITEM        =
*    .


ENDFORM.

FORM modif_actura using is_factura.

  DATA: ls_vbrk TYPE vbrk.
  data: ls_vbrp type vbrp.


  ASSIGN COMPONENT 'VBELN' OF STRUCTURE is_factura TO FIELD-SYMBOL(<fs_campo>).
  ls_vbrp-vbeln = <fs_campo>.
  ASSIGN COMPONENT 'POSNR' OF STRUCTURE is_factura TO <fs_campo>.
  ls_vbrp-POSNR = <fs_campo>.
  ASSIGN COMPONENT 'GRWRT' OF STRUCTURE is_factura TO <fs_campo>.
  ls_vbrp-grwrt = <fs_campo>.



  UPDATE vbrp SET grwrt   = ls_vbrp-grwrt
          WHERE   vbeln   = ls_vbrp-vbeln
          and     posnr   = ls_vbrp-posnr.

  IF sy-subrc = 0.
    ASSIGN COMPONENT 'LOG' OF STRUCTURE is_factura TO <fs_campo>.
    <fs_campo> = 'OK'.
  ELSE.
    ASSIGN COMPONENT 'LOG' OF STRUCTURE is_factura TO <fs_campo>.
    <fs_campo> = 'NOK'.
  ENDIF.

endform.
