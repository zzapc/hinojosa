*---------------------------------------------------------------------*
* Report ZSEI_MIG_00040
*---------------------------------------------------------------------*
REPORT zsei_mig_00040.

TABLES: v_cvi_cust_link, kna1, knvv.

CONSTANTS:
  c_update TYPE c VALUE 'M', "'U',
  c_insert TYPE c VALUE 'I',
  c_delete TYPE c VALUE 'D'.

DATA:
  t_roles            TYPE bus_ei_bupa_roles_t,
  s_roles            LIKE LINE OF t_roles,
  t_data             TYPE cvis_ei_extern_t,
  s_data             LIKE LINE OF t_data,
  xl_error           TYPE bapiret2,
  ls_return_map      TYPE mdg_bs_bp_msgmap_t,
  lt_return          TYPE bapiretm,
  lt_log             TYPE STANDARD TABLE OF bapiret2,
  ls_log             TYPE bapiret2,
  ls_return          TYPE bapireti,
  e_return           TYPE bapiretm,
  t_sales            TYPE cmds_ei_sales_t,
  s_sales            LIKE LINE OF t_sales,
  t_functions        TYPE cmds_ei_functions_t,
  s_functions        LIKE LINE OF t_functions,
  ls_v_cvi_cust_link TYPE v_cvi_cust_link,
  ls_knvp_check      TYPE knvp,
  lt_v_cvi_cust_link TYPE STANDARD TABLE OF v_cvi_cust_link,
  ls_knvp            TYPE knvp,
  lt_knvp            TYPE STANDARD TABLE OF knvp,
  ls_knvv            TYPE knvv,
  ls_knvp_ins        TYPE knvp,
  lt_knvp_ins        TYPE STANDARD TABLE OF knvp,
  lt_knvv            TYPE STANDARD TABLE OF knvv,
  ls_kna1            TYPE kna1.

CLEAR: lt_knvp, lt_knvv, lt_v_cvi_cust_link.

SELECTION-SCREEN BEGIN OF BLOCK va1 WITH FRAME TITLE TEXT-001.
  SELECT-OPTIONS: s_kunnr   FOR v_cvi_cust_link-kunnr,
                  s_ktokd   FOR v_cvi_cust_link-ktokd,
                  s_nodel   FOR kna1-nodel,
                  s_aufsd   FOR kna1-aufsd,
                  s_vkorg   FOR knvv-vkorg,
                  s_vtweg   FOR knvv-vtweg,
                  s_spart   FOR knvv-spart.
SELECTION-SCREEN END OF BLOCK va1.

SELECTION-SCREEN BEGIN OF BLOCK va2 WITH FRAME TITLE TEXT-002.
  PARAMETERS: p_knvv TYPE c AS CHECKBOX.
SELECTION-SCREEN END OF BLOCK va2.

START-OF-SELECTION.

  REFRESH t_data. CLEAR s_data. REFRESH: lt_knvp_ins.

  PERFORM refresh_log TABLES lt_log.

  SELECT *
    INTO TABLE lt_v_cvi_cust_link
    FROM v_cvi_cust_link
   WHERE kunnr IN s_kunnr
     AND ktokd IN s_ktokd.

  IF sy-subrc EQ 0.

    SORT lt_v_cvi_cust_link BY kunnr.

    IF lt_v_cvi_cust_link[] IS NOT INITIAL.
      SELECT * INTO TABLE @DATA(lt_kna1)
        FROM kna1
         FOR ALL ENTRIES IN @lt_v_cvi_cust_link
       WHERE kunnr EQ @lt_v_cvi_cust_link-kunnr
         AND nodel IN @s_nodel
         AND aufsd IN @s_aufsd.
    ENDIF.

    IF lt_v_cvi_cust_link[] IS NOT INITIAL.
      IF p_knvv IS NOT INITIAL.
        SELECT *
          INTO TABLE lt_knvv
          FROM knvv
           FOR ALL ENTRIES IN lt_v_cvi_cust_link
         WHERE kunnr EQ lt_v_cvi_cust_link-kunnr
           AND vkorg IN s_vkorg
           AND vtweg IN s_vtweg
           AND spart IN s_spart
           AND kdgrp NE space.
      ELSE.
        SELECT *
          INTO TABLE lt_knvv
          FROM knvv
           FOR ALL ENTRIES IN lt_v_cvi_cust_link
         WHERE kunnr EQ lt_v_cvi_cust_link-kunnr
          AND  vkorg IN s_vkorg
          AND  vtweg IN s_vtweg
          AND  spart IN s_spart.
      ENDIF.
    ENDIF.

    IF lt_v_cvi_cust_link[] IS NOT INITIAL.
      SELECT *
        INTO TABLE lt_knvp
        FROM knvp
         FOR ALL ENTRIES IN lt_v_cvi_cust_link
       WHERE kunnr EQ lt_v_cvi_cust_link-kunnr
         AND parvw EQ 'RG'
         AND vkorg IN s_vkorg
         AND vtweg IN s_vtweg
         AND spart IN s_spart.
    ENDIF.

    LOOP AT lt_v_cvi_cust_link INTO ls_v_cvi_cust_link.

      REFRESH: lt_knvp_ins.

      READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_v_cvi_cust_link-kunnr.
      IF sy-subrc EQ 0.

        PERFORM add_message TABLES lt_log USING 'S' 'ZPP0' '000' 'Tratamiento cliente' ls_v_cvi_cust_link-kunnr '' ''.

**       (0) Cabecera BP
*        CLEAR    s_data.
*        REFRESH: t_data.
*        s_data-partner-header-object_instance-bpartner      = ls_v_cvi_cust_link-partner.
*        s_data-partner-header-object_instance-bpartnerguid  = ls_v_cvi_cust_link-partner_guid.
*        s_data-partner-header-object_task                   = c_update.

**       (1) Tipo de función IC Ventas
*        REFRESH: t_roles. CLEAR: s_roles.
*        s_roles-task                                        = c_update.
*        s_roles-data_key                                    = 'FLCU01'.
*        s_roles-data-rolecategory                           = 'FLCU01'.
*        s_roles-data-valid_from                             = sy-datum.
*        s_roles-datax-valid_from                            = abap_true.
*        APPEND s_roles TO t_roles.
*        s_data-partner-central_data-role-roles              = t_roles.

        REFRESH t_sales.
        LOOP AT lt_knvv INTO ls_knvv WHERE kunnr EQ ls_v_cvi_cust_link-kunnr.

          READ TABLE lt_knvp INTO ls_knvp WITH KEY kunnr = ls_knvv-kunnr
                                                   vkorg = ls_knvv-vkorg
                                                   vtweg = ls_knvv-vtweg
                                                   spart = ls_knvv-spart
                                                   parvw = 'RG'.
          IF sy-subrc NE 0.

            PERFORM add_message TABLES lt_log USING 'S' 'ZPP0' '000' '- ' ls_knvv-vkorg ls_knvv-vtweg ls_knvv-spart.

            CLEAR: ls_knvp_ins.
            ls_knvp_ins-kunnr = ls_knvv-kunnr.
            ls_knvp_ins-vkorg = ls_knvv-vkorg.
            ls_knvp_ins-vtweg = ls_knvv-vtweg.
            ls_knvp_ins-spart = ls_knvv-spart.
            ls_knvp_ins-parvw = 'RG'.
            ls_knvp_ins-parza = '000'.
            ls_knvp_ins-kunn2 = ls_knvv-kunnr.
            APPEND ls_knvp_ins TO lt_knvp_ins.

**           (2) Sales
*            CLEAR s_sales. REFRESH: t_sales.
*            s_sales-task                                     = c_update.
*            s_sales-data_key-vkorg                           = ls_knvv-vkorg.
*            s_sales-data_key-vtweg                           = ls_knvv-vtweg.
*            s_sales-data_key-spart                           = ls_knvv-spart.

**           (3) Interlocutores
*            CLEAR s_functions. REFRESH: t_functions.
*            s_functions-task                                 = c_update.
*            s_functions-data_key-parvw                       = 'RG'.
*            s_functions-data_key-parza                       = '001'.
*            s_functions-data-partner                         = ls_v_cvi_cust_link-partner.
*            s_functions-datax-partner                        = abap_true.
*            APPEND s_functions TO t_functions.
*            s_sales-functions-functions                      = t_functions.
*            s_sales-functions-current_state                  = abap_true.
*            APPEND s_sales TO t_sales.

          ENDIF.

        ENDLOOP.
        IF sy-subrc NE 0.
          PERFORM add_message TABLES lt_log USING 'E' 'ZPP0' '000' 'Cliente' ls_v_cvi_cust_link-kunnr 'no coincide con los parámetros' 'seleccionados -KNVV'.
        ENDIF.

        IF lt_knvp_ins[] IS NOT INITIAL.
*         Un insert agrupado de todas las entradas a tratar de un ciente.
          INSERT knvp FROM TABLE lt_knvp_ins.
          COMMIT WORK AND WAIT.
        ENDIF.

*        IF t_sales IS NOT INITIAL.
*          s_data-customer-header-object_task                          = 'U'.
*          s_data-customer-sales_data-sales                            = t_sales.
*          APPEND s_data TO t_data.
*        ENDIF.
*
*        IF t_data IS NOT INITIAL.
*
*          REFRESH: e_return.
*
*          CLEAR: ls_return_map.
*          CALL METHOD cl_md_bp_maintain=>validate_single
*            EXPORTING
*              iv_test_run_mode = ''
*              i_data           = s_data
*            IMPORTING
*              et_return_map    = ls_return_map.
*
*          READ TABLE ls_return_map ASSIGNING FIELD-SYMBOL(<fs_errora>) WITH KEY type = 'A'.
*          IF sy-subrc IS NOT INITIAL.
*
*            READ TABLE ls_return_map ASSIGNING FIELD-SYMBOL(<fs_error>) WITH KEY type = 'E'.
*            IF  sy-subrc IS NOT INITIAL.
*
*              REFRESH: lt_return.
*
*              TRY.
*                  CALL METHOD cl_md_bp_maintain=>maintain
*                    EXPORTING
*                      i_test_run = ''
*                      i_data     = t_data
*                    IMPORTING
*                      e_return   = lt_return.
*              ENDTRY.
*
*              CLEAR: xl_error.
*              LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<fs_return>).
*                LOOP AT <fs_return>-object_msg ASSIGNING FIELD-SYMBOL(<fs_returne>).
*                  IF <fs_returne> IS ASSIGNED.
*                    IF <fs_returne>-type EQ 'E'.
*                      MOVE-CORRESPONDING <fs_returne> TO xl_error.
*                      PERFORM add_message TABLES lt_log USING xl_error-type xl_error-id xl_error-number xl_error-message_v1 xl_error-message_v2 xl_error-message_v3 xl_error-message_v4.
*                    ENDIF.
*                  ENDIF.
*                ENDLOOP.
*
*                LOOP AT <fs_return>-object_msg ASSIGNING FIELD-SYMBOL(<fs_returna>).
*                  IF <fs_returna> IS ASSIGNED.
*                    IF <fs_returna>-type EQ 'A'.
*                      MOVE-CORRESPONDING <fs_returna> TO xl_error.
*                      PERFORM add_message TABLES lt_log USING xl_error-type xl_error-id xl_error-number xl_error-message_v1 xl_error-message_v2 xl_error-message_v3 xl_error-message_v4.
*                    ENDIF.
*                  ENDIF.
*                ENDLOOP.
*                UNASSIGN <fs_returna>.
*              ENDLOOP.
*
*              IF xl_error IS INITIAL.
*
*                CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*                  EXPORTING
*                    wait = abap_true.
*
**             Check Creation
*                CLEAR: ls_knvp_check.
*                SELECT SINGLE *
*                  INTO ls_knvp_check
*                  FROM knvp
*                 WHERE kunnr EQ ls_v_cvi_cust_link-kunnr
*                   AND parvw EQ 'RG'.
*                IF sy-subrc EQ 0.
*                  PERFORM add_message TABLES lt_log USING 'S' 'ZPP0' '000' 'Cliente' ls_v_cvi_cust_link-kunnr 'actualizado' ''.
*                ENDIF.
*
*              ENDIF.
*
*            ELSE.
*
*              PERFORM add_message TABLES lt_log USING <fs_error>-type <fs_error>-id <fs_error>-number <fs_error>-message_v1 <fs_error>-message_v2 <fs_error>-message_v3 <fs_error>-message_v4.
*
*            ENDIF.
*
*          ELSE.
*
*            PERFORM add_message TABLES lt_log USING <fs_errora>-type <fs_errora>-id <fs_errora>-number <fs_errora>-message_v1 <fs_errora>-message_v2 <fs_errora>-message_v3 <fs_errora>-message_v4.
*
*          ENDIF.
*
*        ENDIF.

      ELSE.

        PERFORM add_message TABLES lt_log USING 'E' 'ZPP0' '000' 'Cliente' ls_v_cvi_cust_link-kunnr 'no coincide con los parámetros' 'seleccionados -KNA1'.

      ENDIF.

    ENDLOOP.

  ENDIF.

  IF lt_log[] IS NOT INITIAL.
    PERFORM show_error_log USING 'ZMIG_LOG' 'ZMIG_LOG' '' 'X'.
  ENDIF.

*--------------------------- -----------------------------------------*
* Form SHOW_ERROR_LOG
*---------------------------------------------------------------------*
FORM show_error_log USING object subobject popup save.

  DATA:
    lt_log_handle       TYPE bal_t_logh,
    l_s_display_profile TYPE bal_s_prof,
    gv_log_handle       TYPE balloghndl,
    l_s_log             TYPE bal_s_log,
    l_s_msg             TYPE bal_s_msg.

  CLEAR: sy-batch.

* Define some header data of this log
  l_s_log-extnumber  = 'Log'.
  l_s_log-object     = object.
  l_s_log-subobject  = subobject.
  l_s_log-aldate     = sy-datum.
  l_s_log-altime     = sy-uzeit.
  l_s_log-aluser     = sy-uname.
  l_s_log-alprog     = sy-repid.
  l_s_log-del_before = 'X'.
  l_s_log-aldate_del = sy-datum + '00000014'.

  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log                 = l_s_log
    IMPORTING
      e_log_handle            = gv_log_handle
    EXCEPTIONS
      log_header_inconsistent = 1
      OTHERS                  = 2.

  APPEND gv_log_handle TO lt_log_handle.

  LOOP AT lt_log INTO ls_log.

    l_s_msg-msgty     = ls_log-type.
    l_s_msg-msgid     = ls_log-id.
    l_s_msg-msgno     = ls_log-number.
    l_s_msg-msgv1     = ls_log-message_v1.
    l_s_msg-msgv2     = ls_log-message_v2.
    l_s_msg-msgv3     = ls_log-message_v3.
    l_s_msg-msgv4     = ls_log-message_v4.

    CALL FUNCTION 'BAL_LOG_MSG_ADD'
      EXPORTING
        i_log_handle     = gv_log_handle
        i_s_msg          = l_s_msg
      EXCEPTIONS
        log_not_found    = 1
        msg_inconsistent = 2
        log_is_full      = 3
        OTHERS           = 4.

  ENDLOOP.

* Get a prepared profile
  IF popup IS NOT INITIAL.
    CALL FUNCTION 'BAL_DSP_PROFILE_POPUP_GET'
      IMPORTING
        e_s_display_profile = l_s_display_profile.
  ELSE.
    CALL FUNCTION 'BAL_DSP_PROFILE_NO_TREE_GET'
      IMPORTING
        e_s_display_profile = l_s_display_profile.
  ENDIF.

  l_s_display_profile-use_grid   = 'X'.
  l_s_display_profile-cwidth_opt = 'X'.

  IF save IS NOT INITIAL.
    CALL FUNCTION 'BAL_DB_SAVE'
      EXPORTING
        i_save_all       = 'X'
      EXCEPTIONS
        log_not_found    = 1
        save_not_allowed = 2
        numbering_error  = 3
        OTHERS           = 4.
  ENDIF.

  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile  = l_s_display_profile
      i_t_log_handle       = lt_log_handle
    EXCEPTIONS
      profile_inconsistent = 1
      internal_error       = 2
      no_data_available    = 3
      no_authority         = 4
      OTHERS               = 5.

ENDFORM.

*---------------------------------------------------------------------*
* Form ADD_MESSAGE
*---------------------------------------------------------------------*
FORM add_message  TABLES lt_result STRUCTURE bapiret2 USING p_msgty p_msgid p_msgno p_msgv1 p_msgv2 p_msgv3 p_msgv4.

  DATA:
    ls_result LIKE LINE OF lt_result.

  CLEAR: ls_result.
  ls_result-type       = p_msgty.
  ls_result-id         = p_msgid.
  ls_result-number     = p_msgno.
  ls_result-message_v1 = p_msgv1.
  ls_result-message_v2 = p_msgv2.
  ls_result-message_v3 = p_msgv3.
  ls_result-message_v4 = p_msgv4.
  APPEND ls_result TO lt_result.

ENDFORM.

*---------------------------------------------------------------------*
* Form refresh_log
*---------------------------------------------------------------------*
FORM refresh_log  TABLES lt_result STRUCTURE bapiret2.

  REFRESH: lt_result.

ENDFORM.
