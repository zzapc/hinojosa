*----------------------------------------------------------------------*
***INCLUDE ZSEI_MIG_00054_PBO.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form pbo
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*

FORM init.

  LOOP AT SCREEN.
    IF screen-group1 = 'PAT'.
      screen-input = 0.
      MODIFY SCREEN.
    ENDIF.
    IF screen-name = 'P_NUMORD'.
      screen-input = 0.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.


ENDFORM.

FORM pbo .
  LOOP AT SCREEN.
    IF p_revers = abap_true.
      IF screen-group1 = 'CM1'
      OR screen-group1 = 'CM3'
      OR screen-group1 = 'XLS'.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
      IF screen-group1 = 'CM2'.
        screen-active = 1.
        MODIFY SCREEN.
      ENDIF.
    ELSEIF p_orig = abap_true.
      IF screen-group1 = 'CM1'.
        screen-active = 1.
        MODIFY SCREEN.
      ENDIF.
      IF screen-group1 = 'CM2'
      OR screen-group1 = 'CM3'
      OR screen-group1 = 'XLS'.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
    ELSEIF p_excel = abap_true.
      IF screen-group1 = 'CM1'
      OR screen-group1 = 'CM2'.
        screen-active = 0.
        MODIFY SCREEN.
      ENDIF.
      IF screen-group1 = 'CM3'
      OR screen-group1 = 'XLS'.
        screen-active = 1.
        MODIFY SCREEN.
      ENDIF.
    ENDIF.

    IF screen-group1 = 'PAT'.

      CASE gv_edit.
        WHEN abap_true.
          screen-input = 1.
        WHEN abap_false.
          screen-input = 0.
      ENDCASE.

      MODIFY SCREEN.
    ENDIF.

    IF screen-name = 'P_NUMORD'.
      screen-input = 0.
      MODIFY SCREEN.
    ENDIF.

  ENDLOOP.

  pushb = icon_change.
  init = icon_system_undo.

  DATA: lv_orden TYPE e070-trkorr.

  LOOP AT s_orden ASSIGNING FIELD-SYMBOL(<fs_orden>).
    CONDENSE <fs_orden>-low.
    CLEAR: lv_orden.

    DATA(len) = strlen( <fs_orden>-low ).
    DO len TIMES.
      DATA(pos) = sy-index - 1.
      IF <fs_orden>-low+pos(1) IS NOT INITIAL.
        lv_orden = |{ lv_orden }{ <fs_orden>-low+pos(1) }|.
      ELSE.
        EXIT.
      ENDIF.
    ENDDO.
    IF lv_orden IS NOT INITIAL.
      <fs_orden>-low = lv_orden.
    ENDIF.
  ENDLOOP.

  PERFORM contador_numorde.

ENDFORM.

FORM pushbuttons .
  LOOP AT SCREEN.
    CASE sscrfields.
      WHEN 'INI'.
        gv_edit = abap_false.
        PERFORM get_patron.
      WHEN 'PUS'.
        IF screen-group1 = 'PAT' AND screen-input = 1.
          gv_edit = abap_false.
        ELSEIF screen-group1 = 'PAT' AND screen-input = 0.
          gv_edit = abap_true.
        ENDIF.
    ENDCASE.
  ENDLOOP.
ENDFORM.

FORM select_data.
  IF ( s_orden IS INITIAL and ( p_orig = abap_true or p_revers = abap_true ) ) OR ( p_file1 IS INITIAL and p_excel = abap_true ).
    MESSAGE s398(00) WITH 'Inserte órdenes o excel OT' DISPLAY LIKE 'E'.
  ENDIF.

  IF p_patron IS INITIAL.
    MESSAGE s398(00) WITH 'Falta patrón de búsqueda de órdenes' DISPLAY LIKE 'E'.
  ENDIF.

  IF p_patron CA '*'.
    gv_last_orden = p_patron.
    REPLACE FIRST OCCURRENCE OF '*' IN gv_last_orden WITH '%'.
  ELSE.
    gv_last_orden = |{ p_patron }{ '%' }|.
  ENDIF.

  CHECK ( s_orden IS NOT INITIAL OR p_file1 IS NOT INITIAL ) AND p_patron IS NOT INITIAL.

  SELECT
    e~trkorr AS orden,
    t~as4text AS descripcion,
    CASE e~trfunction WHEN 'K' THEN 'Orden de workbench'
                      WHEN 'W' THEN 'Orden Customizing'
                      WHEN 'C' THEN 'Traslado de objetos sin cambio de paquete'
                      WHEN 'O' THEN 'Traslado de objetos con cambio de paquete'
                      WHEN 'E' THEN 'Traslado de un paquete completo'
                      WHEN 'T' THEN 'Transporte de copias'
                      WHEN 'S' THEN 'Desarrollo/Corrección'
                      WHEN 'R' THEN 'Reparación'
                      WHEN 'X' THEN 'Tarea no clasificada'
                      WHEN 'Q' THEN 'Tarea Customizing'
                      WHEN 'G' THEN 'Lista de objetos para proyecto CTS'
                      WHEN 'M' THEN 'Orden para transporte de mandante'
                      WHEN 'P' THEN 'Lista de objetos para upgrade'
                      WHEN 'D' THEN 'Lista de objetos para patch'
                      WHEN 'F' THEN 'Lista de materiales'
                      WHEN 'L' THEN 'Transporte de borrado'
    END AS tipo,
    CASE e~trstatus WHEN 'D' THEN 'Modificable'
                    WHEN 'L' THEN 'Modificable, protegido'
                    WHEN 'O' THEN 'Liberación iniciada'
                    WHEN 'R' THEN 'Liberado'
                    WHEN 'N' THEN 'Liberado (protección import p.objetos reparados activa)'
                    END AS status,
    CASE e~trstatus WHEN 'R' THEN e~as4date
                    WHEN 'N' THEN e~as4date
                    WHEN 'D' THEN ' '
                    WHEN 'L' THEN ' '
                    WHEN 'O' THEN ' '
                    END AS fecha_liberacion,
    CASE e~trstatus WHEN 'R' THEN e~as4time
                    WHEN 'N' THEN e~as4time
                    WHEN 'D' THEN ' '
                    WHEN 'L' THEN ' '
                    WHEN 'O' THEN ' '
                    END AS hora_liberacion,
    e~as4user AS user,
    CASE e~as4user WHEN ' ' THEN '@02@'
                   ELSE '@02@' END AS icon, "Por defecto, dejamoe el icono con el aspa roja
                   e~as4date
    FROM e070 AS e INNER JOIN e07t AS t ON e~trkorr = t~trkorr
    INTO TABLE @DATA(lt_e070)
    WHERE e~trkorr LIKE @gv_last_orden
    AND   e~strkorr = @abap_false. "Orden superior

  SORT lt_e070 BY as4date ASCENDING.

*  gt_alv_full = gt_alv = lt_e070.
  MOVE-CORRESPONDING lt_e070 TO gt_alv_full.
  MOVE-CORRESPONDING lt_e070 TO gt_alv.

ENDFORM.

FORM tratar_data.

  IF lines( gt_alv_full[] ) = 0.
    MESSAGE s398(00) WITH TEXT-t09 DISPLAY LIKE 'E'. "No se han encontrado órdenes
  ENDIF.

  CASE abap_true.
    WHEN p_revers.
      DELETE gt_alv_full WHERE orden NOT IN s_orden.

      LOOP AT gt_alv_full ASSIGNING FIELD-SYMBOL(<fs_e070>).
        <fs_e070>-icon = icon_checked.
      ENDLOOP.
      IF sy-subrc <> 0.
        MESSAGE s398(00) WITH TEXT-t09 DISPLAY LIKE 'E'. "No se han encontrado órdenes
      ENDIF.

*      Si existe una orden que exista en el excel y no esté en el sistema, la anotamos. con icono X
      LOOP AT s_orden.
        TRY.
            DATA(lv_orden) = gt_alv_full[ orden = s_orden-low ].
          CATCH cx_sy_itab_line_not_found.
            APPEND VALUE gty_alv( orden = s_orden-low
                                  icon  = icon_incomplete ) TO gt_alv_full.
        ENDTRY.
      ENDLOOP.

    WHEN p_excel.

      PERFORM upload_excel TABLES gt_excel_ot USING p_file1.
      PERFORM cruzar_datos_excel.

    WHEN OTHERS.
      LOOP AT gt_alv_full ASSIGNING <fs_e070>.
        LOOP AT s_orden WHERE low = <fs_e070>-orden.
          <fs_e070>-icon = icon_checked.
        ENDLOOP.
      ENDLOOP.
  ENDCASE.

ENDFORM.

FORM mostrar_ordenes.

  gt_alv[] = gt_alv_full[].

  CHECK lines( gt_alv ) <> 0.

  DATA:
    lo_functions TYPE REF TO cl_salv_functions_list,
    lo_columns   TYPE REF TO cl_salv_columns_table,
    lo_display   TYPE REF TO cl_salv_display_settings,
    lo_select    TYPE REF TO cl_salv_selections,
    lo_column    TYPE REF TO cl_salv_column,
    lo_sorts     TYPE REF TO cl_salv_sorts,
    lo_layout    TYPE REF TO cl_salv_layout,
    ls_key       TYPE salv_s_layout_key,
    ls_variant   TYPE slis_vari.



  DATA: lr_events TYPE REF TO cl_salv_events_table.

  DATA: lr_columns_table TYPE REF TO cl_salv_columns_table,
        lr_column_table  TYPE REF TO cl_salv_column_table.

*    DATA: lr_events TYPE REF TO cl_salv_events_table.
*    DATA: event_handler TYPE REF TO lcl_handle_events.

  DATA: lv_repid TYPE sy-repid.


  TRY.

      CALL METHOD cl_salv_table=>factory
        IMPORTING
          r_salv_table = alv
        CHANGING
          t_table      = gt_alv.

      " Activa todas las funciones estandar del ALV
      lo_functions = alv->get_functions( ).
      lo_functions->set_all( abap_true ).

      " Obtiene las propiedades de visualización
      lo_display = alv->get_display_settings( ).

      " ALV con estilo Zebra
      lo_select = alv->get_selections( ).
      lo_select->set_selection_mode( if_salv_c_selection_mode=>none ).

      " Obtiene las columnas
      lo_columns = alv->get_columns( ).

      lv_repid = sy-repid.


      alv->set_screen_status(
        pfstatus      = 'STANDARD_FULLSCREEN'
        report        = lv_repid
        set_functions = alv->c_functions_all ).

      lr_events = alv->get_event( ).
      CREATE OBJECT gr_events.

      SET HANDLER gr_events->on_user_command FOR lr_events.
      SET HANDLER gr_events->on_link_click FOR lr_events.

      " Cambiar nombre de las columnas del informe
      lo_column = lo_columns->get_column( 'ORDEN' ).
      lo_column->set_short_text( 'Órden'(002) ).
      lo_column->set_medium_text( 'Órden Transp.'(003) ).
      lo_column->set_long_text( 'Órden Transporte'(004) ).
      lo_column = lo_columns->get_column( 'TIPO' ).
      lo_column->set_short_text( 'Tipo'(005) ).
      lo_column->set_medium_text( 'Tipo'(005) ).
      lo_column->set_long_text( 'Tipo'(005) ).
      lo_column = lo_columns->get_column( 'STATUS' ).
      lo_column->set_short_text( 'Status'(006) ).
      lo_column->set_medium_text( 'Status'(006) ).
      lo_column->set_long_text( 'Status'(006) ).
      lo_column = lo_columns->get_column( 'FECHA_LIBERACION' ).
      lo_column->set_short_text( 'F.Liberac'(012) ).
      lo_column->set_medium_text( 'Fecha Liberación'(013) ).
      lo_column->set_long_text( 'Fecha de Liberación'(014) ).
      lo_column = lo_columns->get_column( 'HORA_LIBERACION' ).
      lo_column->set_short_text( 'H.Liberac'(015) ).
      lo_column->set_medium_text( 'Hora Liberación'(016) ).
      lo_column->set_long_text( 'Hora de Liberación'(017) ).
      lo_column = lo_columns->get_column( 'USER' ).
      lo_column->set_short_text( 'Usuario'(007) ).
      lo_column->set_medium_text( 'Usuario'(007) ).
      lo_column->set_long_text( 'Titular de la órden'(008) ).
      lo_column = lo_columns->get_column( 'DESCRIPCION' ).
      lo_column->set_short_text( 'Descripc.'(009) ).
      lo_column->set_medium_text( 'Descripción'(010) ).
      lo_column->set_long_text( 'Descripción de la órden'(011) ).


      "La columna Orden va a ser navegable a la SE01
      DATA(o_col) = CAST cl_salv_column_table( alv->get_columns( )->get_column( 'ORDEN' ) ).
      o_col->set_cell_type( if_salv_c_cell_type=>hotspot ).

      " Optimiza la salida
      lo_columns->set_optimize( 'X' ).

      " Layout
      lo_layout = alv->get_layout( ).
      ls_key-report = sy-repid.
      lo_layout->set_key( ls_key ).
      lo_layout->set_save_restriction( cl_salv_layout=>restrict_none ).
*    ls_variant = p_vari.
      lo_layout->set_initial_layout( ls_variant ).

      PERFORM set_header_alv.


    CATCH cx_salv_not_found.
    CATCH cx_salv_msg.
    CATCH cx_salv_data_error.
    CATCH cx_salv_existing.
  ENDTRY.

  " Mostrar Log
  alv->display( ).

ENDFORM.                    " MOSTRAR_MOVIMIENTOS
*&---------------------------------------------------------------------*
*& Form get_patron
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_patron .

  SELECT SINGLE trkorr FROM e070l INTO @DATA(lv_last_orden) WHERE lastnum = 'TRKORR'.
  IF sy-subrc = 0.
    lv_last_orden = |{ lv_last_orden(4) }{ '%' }|.
  ENDIF.

  p_patron = gv_last_orden = lv_last_orden.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form pushbuttons
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*& Form handle_user_command
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> E_SALV_FUNCTION
*&---------------------------------------------------------------------*
FORM handle_user_command USING i_ucomm TYPE salv_de_function.

  CASE i_ucomm.
    WHEN '&TICKOK'.   PERFORM filter USING icon_checked.
    WHEN '&TICKNOK'.  PERFORM filter USING icon_incomplete.
    WHEN '&TOCKNONE'. PERFORM filter USING icon_close.
    WHEN '&TICKUNKN'. PERFORM filter USING icon_system_help.
    WHEN '&TICKREL'.  PERFORM filter USING icon_transport.
    WHEN '&TICKMOD'.  PERFORM filter USING icon_wd_model_node.
    WHEN '&WORKB'.    PERFORM filter USING icon_biw_info_cube.
    WHEN '&CUSTO'.    PERFORM filter USING icon_bw_info_cube_ina.
    WHEN '&TICKDEF'.  PERFORM filter USING abap_false.
  ENDCASE.

ENDFORM.

FORM filter USING i_icon.

  CASE i_icon.
    WHEN icon_checked.            DELETE gt_alv WHERE icon <> i_icon.
    WHEN icon_incomplete.         DELETE gt_alv WHERE icon <> i_icon.
    WHEN icon_transport.          DELETE gt_alv WHERE NOT status CS 'Libera'.
    WHEN icon_wd_model_node.      DELETE gt_alv WHERE status CS 'Libera'.
    WHEN icon_biw_info_cube.      DELETE gt_alv WHERE NOT tipo CS 'Workbench'.
    WHEN icon_bw_info_cube_ina.   DELETE gt_alv WHERE tipo CS 'Workbench'.
    WHEN icon_system_help.        DELETE gt_alv WHERE icon <> i_icon.
    WHEN icon_close.              DELETE gt_alv WHERE icon <> i_icon.
    WHEN OTHERS.                  gt_alv[] = gt_alv_full[].

  ENDCASE.

  PERFORM set_header_alv.

  alv->refresh( refresh_mode = if_salv_c_refresh=>full ).

ENDFORM.
*&---------------------------------------------------------------------*
*& Form navigate_tr
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM navigate_tr USING i_columna i_fila.

  CASE i_fila.

    WHEN 'ORDEN'.

      DATA(lv_orden) = gt_alv[ i_columna ]-orden.

      SET PARAMETER ID 'KOR' FIELD lv_orden.

      CALL FUNCTION 'TR_PRESENT_REQUEST'
        EXPORTING
          iv_trkorr    = lv_orden
          iv_highlight = 'X'.

  ENDCASE.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_stats
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      <-- LS_STATS
*&---------------------------------------------------------------------*
FORM get_stats  CHANGING cs_stats TYPE gty_stats.

  CLEAR: cs_stats.

  cs_stats-totales = lines( gt_alv ).

  LOOP AT gt_alv INTO DATA(ls_alv).
    CASE ls_alv-icon.
      WHEN icon_checked.
        ADD 1 TO cs_stats-correctas.
      WHEN icon_incomplete.
        ADD 1 TO cs_stats-incorrectas.
      WHEN icon_close.
        ADD 1 TO cs_stats-nonecesarias.
      WHEN icon_system_help.
        ADD 1 TO cs_stats-desconocidas.
    ENDCASE.

    IF ls_alv-status CS 'Libera'.
      ADD 1 TO cs_stats-liberadas.
    ELSEIF ls_alv-status CS 'Modif'.
      ADD 1 TO cs_stats-modificables.
    ENDIF.

    IF ls_alv-tipo CS 'Custo'.
      ADD 1 TO cs_stats-custo.
    ELSEIF ls_alv-tipo CS 'orkbenc'.
      ADD 1 TO cs_stats-workb.
    ELSEIF ls_alv-tipo CS 'copias'.
      ADD 1 TO cs_stats-copia.
    ELSE.
      ADD 1 TO cs_stats-otras.
    ENDIF.

  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form set_header_Alv
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM set_header_alv .

  DATA: ls_stats   TYPE gty_stats,
        lo_header  TYPE REF TO cl_salv_form_layout_grid,
        lo_h_label TYPE REF TO cl_salv_form_label,
        lo_h_flow  TYPE REF TO cl_salv_form_layout_flow.

  PERFORM get_stats CHANGING ls_stats.

*   header object
  CREATE OBJECT lo_header.

*   Writing Bold phrase
  lo_h_label = lo_header->create_label( row = 1 column = 1 ).
  lo_h_label->set_text( 'Resumen de Órdenes' ).

*   Writing Header texts
  lo_h_flow = lo_header->create_flow( row = 2 column = 1 ).
  lo_h_flow->create_text( text = 'Total de registros ' ).
  lo_h_flow = lo_header->create_flow( row = 2 column = 2 ).
  lo_h_flow->create_text( text = ls_stats-totales ).

  lo_h_flow = lo_header->create_flow( row = 3 column = 1 ).
  lo_h_flow->create_text( text = 'Órdenes correctas ' ).
  lo_h_flow = lo_header->create_flow( row = 3 column = 2 ).
  lo_h_flow->create_text( text = ls_stats-correctas ).

  lo_h_flow = lo_header->create_flow( row = 4 column = 1 ).
  lo_h_flow->create_text( text = 'Órdenes desconocidas' ).
  lo_h_flow = lo_header->create_flow( row = 4 column = 2 ).
  lo_h_flow->create_text( text = ls_stats-desconocidas ).

  lo_h_flow = lo_header->create_flow( row = 5 column = 1 ).
  lo_h_flow->create_text( text = 'Órdenes Incorrectas ' ).
  lo_h_flow = lo_header->create_flow( row = 5 column = 2 ).
  lo_h_flow->create_text( text = ls_stats-incorrectas ).

  lo_h_flow = lo_header->create_flow( row = 6 column = 1 ).
  lo_h_flow->create_text( text = 'Órdenes Liberadas' ).
  lo_h_flow = lo_header->create_flow( row = 6 column = 2 ).
  lo_h_flow->create_text( text = ls_stats-liberadas ).

  lo_h_flow = lo_header->create_flow( row = 7 column = 1 ).
  lo_h_flow->create_text( text = 'Órdenes Modificables ' ).
  lo_h_flow = lo_header->create_flow( row = 7 column = 2 ).
  lo_h_flow->create_text( text = ls_stats-modificables ).

  lo_h_flow = lo_header->create_flow( row = 8 column = 1 ).
  lo_h_flow->create_text( text = 'Órdenes Workbench' ).
  lo_h_flow = lo_header->create_flow( row = 8 column = 2 ).
  lo_h_flow->create_text( text = ls_stats-workb ).

  lo_h_flow = lo_header->create_flow( row = 9 column = 1 ).
  lo_h_flow->create_text( text = 'Órdenes Customizing' ).
  lo_h_flow = lo_header->create_flow( row = 9 column = 2 ).
  lo_h_flow->create_text( text = ls_stats-custo ).

  lo_h_flow = lo_header->create_flow( row = 10 column = 1 ).
  lo_h_flow->create_text( text = 'Órdenes Transp. Copia' ).
  lo_h_flow = lo_header->create_flow( row = 10 column = 2 ).
  lo_h_flow->create_text( text = ls_stats-copia ).

  lo_h_flow = lo_header->create_flow( row = 11 column = 1 ).
  lo_h_flow->create_text( text = 'Órdenes No necesarias' ).
  lo_h_flow = lo_header->create_flow( row = 11 column = 2 ).
  lo_h_flow->create_text( text = ls_stats-nonecesarias ).

  lo_h_flow = lo_header->create_flow( row = 12 column = 1 ).
  lo_h_flow->create_text( text = 'Órdenes Restantes' ).
  lo_h_flow = lo_header->create_flow( row = 12 column = 2 ).
  lo_h_flow->create_text( text = ls_stats-otras ).

*   Set the top of list
  alv->set_top_of_list( lo_header ).

*   Print on top of list
  alv->set_top_of_list_print( lo_header ).

ENDFORM.

FORM contador_numorde.
  numord = lines( s_orden[] ).
  CONDENSE numord.
  numord = | { numord } { 'órdenes introducidas' }|.
ENDFORM.

FORM file_open CHANGING p_file.

  DATA:
    lt_filetable TYPE filetable,
    ls_filetable LIKE LINE OF lt_filetable,
    lv_rc        TYPE i.

  cl_gui_frontend_services=>file_open_dialog(
    EXPORTING
      window_title            = 'Seleccione el fichero Excel OT'
    CHANGING
      file_table              = lt_filetable
      rc                      = lv_rc
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5 ).
  IF sy-subrc EQ 0.
    IF lv_rc EQ 1.
      READ TABLE lt_filetable INTO ls_filetable INDEX 1.
      IF sy-subrc EQ 0.
        p_file = ls_filetable-filename.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.

FORM upload_excel TABLES lt_file USING p_file.

  FIELD-SYMBOLS :
    <ls_data>       TYPE any,
    <lv_field_file> TYPE any,
    <lv_field_atc>  TYPE any,
    <gt_data>       TYPE STANDARD TABLE.

  DATA:
    lt_raw           TYPE solix_tab,
    i_filename       TYPE rlgrap-filename,
    filename         TYPE string,
    lv_headerxstring TYPE xstring,
    lv_filelength    TYPE i,
    lo_excel_ref     TYPE REF TO cl_fdt_xl_spreadsheet.

  filename   = p_file.

  cl_gui_frontend_services=>gui_upload(
    EXPORTING
      filename                = filename
      filetype                = 'BIN'
    IMPORTING
      filelength              = lv_filelength
      header                  = lv_headerxstring
    CHANGING
      data_tab                = lt_raw
    EXCEPTIONS
      file_open_error         = 1
      file_read_error         = 2
      no_batch                = 3
      gui_refuse_filetransfer = 4
      invalid_type            = 5
      no_authority            = 6
      unknown_error           = 7
      bad_data_format         = 8
      header_not_allowed      = 9
      separator_not_allowed   = 10
      header_too_long         = 11
      unknown_dp_error        = 12
      access_denied           = 13
      dp_out_of_memory        = 14
      disk_full               = 15
      dp_timeout              = 16
      not_supported_by_gui    = 17
      error_no_gui            = 18
      OTHERS                  = 19 ).

  CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
    EXPORTING
      input_length = lv_filelength
    IMPORTING
      buffer       = lv_headerxstring
    TABLES
      binary_tab   = lt_raw
    EXCEPTIONS
      failed       = 1
      OTHERS       = 2.

  TRY.
      lo_excel_ref = NEW cl_fdt_xl_spreadsheet(
        document_name = 'TMP'
        xdocument     = lv_headerxstring ).
    CATCH cx_fdt_excel_core.
      "Implement suitable error handling here
  ENDTRY .

  "Get List of Worksheets
  lo_excel_ref->if_fdt_doc_spreadsheet~get_worksheet_names(
    IMPORTING
      worksheet_names = DATA(lt_worksheets) ).

  IF NOT lt_worksheets IS INITIAL.

    DESCRIBE TABLE lt_worksheets LINES DATA(lv_num_pestanyas).

    READ TABLE lt_worksheets INTO DATA(lv_woksheetname) INDEX lv_num_pestanyas.

    DATA(lo_data_ref) = lo_excel_ref->if_fdt_doc_spreadsheet~get_itab_from_worksheet( lv_woksheetname ).

    "now you have excel work sheet data in dyanmic internal table
    ASSIGN lo_data_ref->* TO <gt_data>.

  ENDIF.

  LOOP AT <gt_data> ASSIGNING <ls_data>.

    APPEND INITIAL LINE TO lt_file ASSIGNING FIELD-SYMBOL(<fs_file>).

    DO 8 TIMES.
      ASSIGN COMPONENT sy-index OF STRUCTURE <ls_data> TO <lv_field_file>.
      ASSIGN COMPONENT sy-index OF STRUCTURE <fs_file> TO <lv_field_atc>.
      IF sy-index = 8 or sy-index = 4.
        CONDENSE <lv_field_file>.
      ENDIF.
      <lv_field_atc> = <lv_field_file>.

    ENDDO.

  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form cruzar_datos_excel
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM cruzar_datos_excel .

*  Cruzamos las ordenes recuperadas del excel de OT, contra las ordenes existentes en el sistema
*  Todas las ordenes creadas durante la conversion, tendran la nomenclatura de SB1 o SB2 (salvo excepciones)

  CLEAR: gt_alv_full[].

  LOOP AT gt_alv INTO DATA(ls_alv).

    TRY.
        DATA(ls_orden) = gt_excel_ot[ d = ls_alv-orden ].
        ls_alv-icon = icon_checked.
        IF ls_orden-h = 'X'. "No necesaria.
          ls_alv-icon = icon_close.
        ENDIF.
        APPEND ls_alv TO gt_alv_full.
      CATCH cx_sy_itab_line_not_found.
        ls_alv-icon = icon_incomplete.
        APPEND ls_alv TO gt_alv_full.
    ENDTRY.

  ENDLOOP.

*  Hacemos un segundo barrido, buscando posibles ordenes que estén en el excel y no estén en el sistema

  LOOP AT gt_excel_ot INTO DATA(ls_excel_ot) FROM 2.
    CHECK ls_excel_ot IS NOT INITIAL.

    TRY.
        DATA(ls_orden2) = gt_alv[ orden = ls_excel_ot-d ].

      CATCH cx_sy_itab_line_not_found.
        IF ls_excel_ot-f IS NOT INITIAL.
          IF ls_excel_ot-f(3) CA '-./'.
            ls_excel_ot-f = |{ ls_excel_ot-f+6(4) }{ ls_excel_ot-f+3(2) }{ ls_excel_ot-f(2) }|.
          ELSE.
            ls_excel_ot-f = |{ ls_excel_ot-f(4) }{ ls_excel_ot-f+5(2) }{ ls_excel_ot-f+8(2) }|.
          ENDIF.
        ENDIF.

        DATA: lv_icon(4).
        IF ls_excel_ot-h IS INITIAL.
          lv_icon = icon_system_help.
        ELSE.
          lv_icon = icon_close.
        ENDIF.

        APPEND VALUE gty_alv( orden               = ls_excel_ot-d
                              icon                = lv_icon
                              descripcion         = ls_excel_ot-e
                              tipo                = ls_excel_ot-c
                              fecha_liberacion    = ls_excel_ot-f
                              user                = ls_excel_ot-g
                              ) TO gt_alv_full.
    ENDTRY.

  ENDLOOP.


ENDFORM.
