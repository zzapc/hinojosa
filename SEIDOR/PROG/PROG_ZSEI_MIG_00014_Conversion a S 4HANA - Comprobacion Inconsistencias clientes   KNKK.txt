*---------------------------------------------------------------------*
* Report ZSEI_MIG_00014
*---------------------------------------------------------------------*
REPORT zsei_mig_00014.

TABLES: knkk.

TYPES:
  BEGIN OF ty_knkk_data,
    kunnr TYPE knkk-kunnr,
    knkli TYPE knkk-knkli,
    kkber TYPE knkk-kkber,
    ctlpc TYPE knkk-ctlpc,
  END OF ty_knkk_data.

TYPES:
  tyt_knkk_data TYPE TABLE OF ty_knkk_data.

DATA:
  t_alv  TYPE tyt_knkk_data,
  t_knkk TYPE tyt_knkk_data.

SELECTION-SCREEN BEGIN OF BLOCK screen WITH FRAME TITLE TEXT-001.
  SELECT-OPTIONS: s_kunnr FOR knkk-kunnr,
                  s_knkli FOR knkk-knkli,
                  s_kkber FOR knkk-kkber,
                  s_ctlpc FOR knkk-ctlpc.
SELECTION-SCREEN END OF BLOCK screen.

START-OF-SELECTION.
  PERFORM get_data.

*---------------------------------------------------------------------*
* Form get_data
*---------------------------------------------------------------------*
FORM get_data.

  CLEAR:  t_knkk,
          t_alv.

  SELECT kunnr knkli kkber ctlpc
    FROM knkk
    INTO CORRESPONDING FIELDS OF TABLE t_knkk
    WHERE kunnr IN s_kunnr
      AND knkli IN s_knkli
      AND kkber IN s_kkber
      AND ctlpc IN s_ctlpc.

  IF sy-subrc IS INITIAL.
    PERFORM compare_data.
  ELSE.
    MESSAGE TEXT-002 TYPE 'S' DISPLAY LIKE 'E'.
  ENDIF.


ENDFORM.

*---------------------------------------------------------------------*
* Form compare_data
*---------------------------------------------------------------------*
FORM compare_data.

  DATA:
    xl_knkk     TYPE ty_knkk_data,
    tl_knkli    TYPE tyt_knkk_data,
    tl_kunnr    TYPE tyt_knkk_data,
    tl_knkk_aux TYPE tyt_knkk_data,
    vl_error    TYPE xfeld.
  FIELD-SYMBOLS: <fs_knkk_1> TYPE ty_knkk_data,
                 <fs_aux>    TYPE ty_knkk_data,
                 <fs_knkli>  TYPE ty_knkk_data,
                 <fs_kunnr>  TYPE ty_knkk_data.
  CLEAR: xl_knkk, tl_knkli, tl_kunnr, tl_knkk_aux,vl_error.

  SORT t_knkk BY knkli ctlpc.
  tl_knkk_aux = t_knkk.

  CLEAR xl_knkk.
*  LOOP AT t_knkk ASSIGNING FIELD-SYMBOL(<fs_knkk_1>).
  LOOP AT t_knkk ASSIGNING <fs_knkk_1>.

    ON CHANGE OF <fs_knkk_1>-knkli.
      CLEAR vl_error.
      CLEAR xl_knkk.
      xl_knkk = <fs_knkk_1>.
    ENDON.

    IF vl_error IS INITIAL.

      IF xl_knkk-ctlpc NE <fs_knkk_1>-ctlpc.
        vl_error = abap_true.
      ENDIF.

      IF vl_error IS NOT INITIAL.
*        LOOP AT tl_knkk_aux ASSIGNING FIELD-SYMBOL(<fs_aux>) WHERE knkli EQ <fs_knkk_1>-knkli.
        LOOP AT tl_knkk_aux ASSIGNING <fs_aux> WHERE knkli EQ <fs_knkk_1>-knkli.

*          APPEND INITIAL LINE TO tl_knkli ASSIGNING FIELD-SYMBOL(<fs_knkli>).
          APPEND INITIAL LINE TO tl_knkli ASSIGNING <fs_knkli>.
          IF <fs_knkli> IS ASSIGNED.
            MOVE-CORRESPONDING <fs_aux> TO <fs_knkli>.
          ENDIF.

        ENDLOOP.
      ENDIF.

    ENDIF.

  ENDLOOP.

  SORT t_knkk BY kunnr ctlpc.
  SORT tl_knkk_aux BY kunnr ctlpc.

  CLEAR xl_knkk.
*  LOOP AT t_knkk ASSIGNING FIELD-SYMBOL(<fs_knkk_2>).
  LOOP AT t_knkk ASSIGNING <fs_knkk_1>.

*    ON CHANGE OF <fs_knkk_2>-kunnr.
    ON CHANGE OF <fs_knkk_1>-kunnr.
      CLEAR xl_knkk.
*      xl_knkk = <fs_knkk_2>.
      xl_knkk = <fs_knkk_1>.
    ENDON.

    IF vl_error IS INITIAL.

*      IF xl_knkk-ctlpc NE <fs_knkk_2>-ctlpc.
      IF xl_knkk-ctlpc NE <fs_knkk_1>-ctlpc.
        CLEAR vl_error.
      ENDIF.

      IF vl_error IS NOT INITIAL.
*        LOOP AT tl_knkk_aux ASSIGNING FIELD-SYMBOL(<fs_aux2>) WHERE kunnr EQ <fs_knkk_2>-kunnr.
        LOOP AT tl_knkk_aux ASSIGNING <fs_aux> WHERE kunnr EQ <fs_knkk_1>-kunnr.

*          APPEND INITIAL LINE TO tl_kunnr ASSIGNING FIELD-SYMBOL(<fs_kunnr>).
          APPEND INITIAL LINE TO tl_kunnr ASSIGNING <fs_kunnr>.
          IF <fs_kunnr> IS ASSIGNED.
*            MOVE-CORRESPONDING <fs_aux2> TO <fs_kunnr>.
            MOVE-CORRESPONDING <fs_aux> TO <fs_kunnr>.
          ENDIF.

        ENDLOOP.
      ENDIF.

    ENDIF.

  ENDLOOP.

  IF tl_knkli IS NOT INITIAL.
    SORT tl_knkli BY knkli ctlpc.
    DELETE ADJACENT DUPLICATES FROM tl_knkli.
    APPEND LINES OF tl_knkli TO t_alv.
  ENDIF.

  IF tl_kunnr IS NOT INITIAL.
    SORT tl_kunnr BY kunnr ctlpc.
    DELETE ADJACENT DUPLICATES FROM tl_kunnr.
    APPEND LINES OF tl_kunnr TO t_alv.
  ENDIF.

  IF t_alv IS NOT INITIAL.

    SORT t_alv BY kunnr knkli kkber ctlpc.
    DELETE ADJACENT DUPLICATES FROM t_alv.

    PERFORM show_alv.

  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
* Form show_alv
*---------------------------------------------------------------------*
FORM show_alv .

  DATA:
    o_salv_table TYPE REF TO cl_salv_table,
    o_salv_cols  TYPE REF TO cl_salv_columns_table,
    o_functions  TYPE REF TO cl_salv_functions_list,
    o_events     TYPE REF TO cl_salv_events_table,
    vl_status    TYPE sypfkey.

  CLEAR vl_status.

  TRY .
      cl_salv_table=>factory(
       IMPORTING
         r_salv_table = o_salv_table
       CHANGING
         t_table      = t_alv ).

      o_functions = o_salv_table->get_functions( ).
      o_functions->set_all( abap_true ).

      o_salv_table->display( ).

    CATCH cx_ai_system_fault.

  ENDTRY.

ENDFORM.
