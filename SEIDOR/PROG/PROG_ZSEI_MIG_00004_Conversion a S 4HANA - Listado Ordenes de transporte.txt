*---------------------------------------------------------------------*
* Report ZSEI_MIG_00004
*---------------------------------------------------------------------*
REPORT zsei_mig_00004.

TABLES: e070, e071, tmsbufreq.

TYPE-POOLS: slis.

CONSTANTS:
  c_tabname  TYPE dd02l-tabname VALUE ''.

TYPES:
  BEGIN OF ty_datos,
    trkorr         TYPE trkorr,
    as4text	       TYPE	trordertxt,
    trfunction     TYPE trfunction,
    trfunctn_t(20) TYPE c,
    trfunctn_l(45) TYPE c,
    trstatus       TYPE trstatus,
    trstatus_t     TYPE trstatus_t,
    tarsystem	     TYPE	tr_target,
    local          type c,
    targetdesc(21) TYPE c,
    korrdev	       TYPE	trcateg,
    as4user	       TYPE	truser,
    as4date	       TYPE	trdate,
    as4time	       TYPE	as4time,
    client         TYPE trclient,
    tarclient	     TYPE	trtarcli,
    strkorr	       TYPE	strkorr,
    date_prd       TYPE trdate,
    time_prd       TYPE as4time,
    top            TYPE char01,
  END OF ty_datos.

TYPES:
  BEGIN OF ty_e071.
    INCLUDE STRUCTURE e071k.
TYPES: END OF ty_e071.

TYPES:
  BEGIN OF ty_e070c.
    INCLUDE STRUCTURE e070c.
TYPES: END OF ty_e070c.

TYPES:
  BEGIN OF ty_e07t.
    INCLUDE STRUCTURE e07t.
TYPES: END OF ty_e07t.

TYPES:
  BEGIN OF t_auth,
    fcode LIKE rsmpe-func,
  END OF t_auth.

DATA:
  lv_prd       TYPE boolean,
  t_datos      TYPE TABLE OF ty_datos,
  x_datos      LIKE LINE OF t_datos,
  t_e071       TYPE TABLE OF ty_e071,
  w_e071       LIKE LINE OF t_e071,
  t_e070c      TYPE TABLE OF ty_e070c,
  w_e070c      LIKE LINE OF t_e070c,
  t_e07t       TYPE TABLE OF ty_e07t,
  w_e07t       LIKE LINE OF t_e07t,
  gt_alv       TYPE TABLE OF ty_datos,
  gs_alv       TYPE ty_datos,
  gt_fieldcat  TYPE lvc_t_fcat,
  gs_fieldcat  TYPE lvc_s_fcat,
  wg_error     TYPE flag,
  gs_layout    TYPE lvc_s_layo,
  lt_log       TYPE STANDARD TABLE OF bapiret2,
  ls_log       TYPE bapiret2,
  gx_variant   TYPE disvariant,
  g_variant    TYPE disvariant,
  g_repid      TYPE sy-repid,
  g_save       TYPE c VALUE 'A',
  g_exit       TYPE c,
  lt_return    TYPE STANDARD TABLE OF bapiret2,
  ls_return    TYPE bapiret2,
  it_auth      TYPE TABLE OF t_auth,
  wa_auth      TYPE t_auth,
  s_trfunc     TYPE RANGE OF e070-trfunction,
  s_trfunc_dep TYPE RANGE OF e070-trfunction,
  s_status     TYPE RANGE OF e070-trstatus,
  gv_stop.

DATA:
  bdcdata LIKE bdcdata    OCCURS 0 WITH HEADER LINE,
  messtab LIKE bdcmsgcoll OCCURS 0 WITH HEADER LINE.

SELECTION-SCREEN BEGIN OF BLOCK b_sel WITH FRAME TITLE TEXT-001.
  SELECT-OPTIONS:
    s_trkorr FOR e070-trkorr,
    s_user   FOR e070-as4user.
SELECTION-SCREEN END OF BLOCK b_sel.

SELECTION-SCREEN BEGIN OF BLOCK b_ord WITH FRAME TITLE TEXT-004.
  PARAMETERS:
    p_custo  AS CHECKBOX DEFAULT 'X',
    p_work   AS CHECKBOX DEFAULT 'X',
    p_transp AS CHECKBOX DEFAULT 'X',
    p_transl AS CHECKBOX DEFAULT 'X'.
SELECTION-SCREEN END OF BLOCK b_ord.

SELECTION-SCREEN BEGIN OF BLOCK b_sta WITH FRAME TITLE TEXT-005.
  PARAMETERS:
    p_mod   AS CHECKBOX,
    p_rel   AS CHECKBOX,
    p_top   AS CHECKBOX,
    p_sysid TYPE sy-sysid.
  SELECT-OPTIONS: s_date FOR e070-as4date.
  SELECT-OPTIONS: s_date_p FOR e070-as4date.
SELECTION-SCREEN END OF BLOCK b_sta.

SELECTION-SCREEN BEGIN OF BLOCK b_lay WITH FRAME TITLE TEXT-003.
  PARAMETERS: p_vari TYPE slis_vari.
SELECTION-SCREEN END OF BLOCK b_lay.

INITIALIZATION.

AT SELECTION-SCREEN.
  IF NOT p_vari IS INITIAL.
    g_variant-variant = p_vari.
    g_variant-report  = sy-repid.
  ENDIF.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  PERFORM trata_vari.

START-OF-SELECTION.

* Relleno de opciones
  PERFORM rellenar_opciones.
  IF gv_stop IS INITIAL.
    PERFORM obtener_datos.

* Parametrización de la ALV.
    PERFORM alv_layout.
    PERFORM make_fieldcat.

    IF NOT gt_alv[] IS INITIAL.
* Muestra la ALV
      PERFORM alv_display.
    ELSE.
      MESSAGE e004(zsd) WITH 'No hay datos seleccionados'.
    ENDIF.
  ENDIF.

*---------------------------------------------------------------------*
* Form ALV_LAYOUT
*---------------------------------------------------------------------*
FORM alv_layout.

  gs_layout-zebra      = 'X'.
  gs_layout-cwidth_opt = 'X'.
  gs_layout-sel_mode   = 'A'.

ENDFORM.

*---------------------------------------------------------------------*
* Form ALV_DISPLAY
*---------------------------------------------------------------------*
FORM alv_display.

  g_repid = sy-repid.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      i_callback_program      = g_repid
      i_callback_user_command = 'USER_COMMAND'
      is_layout_lvc           = gs_layout
      it_fieldcat_lvc         = gt_fieldcat
      i_default               = 'X'
      i_save                  = 'A'
      is_variant              = g_variant
    TABLES
      t_outtab                = gt_alv
    EXCEPTIONS
      program_error           = 1
      OTHERS                  = 2.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  STATUS_SET
*---------------------------------------------------------------------*
FORM status_set USING rt_extab TYPE slis_t_extab.

  CLEAR wa_auth.
  SET PF-STATUS 'STANDARD_FULLSCREEN'.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  VARIANT_INIT
*---------------------------------------------------------------------*
FORM variant_init.

  CLEAR gx_variant.

  g_repid           = sy-repid.
  g_save            = 'A'.
  gx_variant-report = g_repid.

  CALL FUNCTION 'LVC_VARIANT_DEFAULT_GET'
    EXPORTING
      i_save        = g_save
    CHANGING
      cs_variant    = gx_variant
    EXCEPTIONS
      wrong_input   = 1
      not_found     = 2
      program_error = 3
      OTHERS        = 4.
  IF sy-subrc = 0.
    p_vari = gx_variant-variant.
  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  PAI_OF_SELECTION_SCREEN
*---------------------------------------------------------------------*
FORM pai_of_selection_screen.

  IF NOT p_vari IS INITIAL.

    gx_variant-report  = sy-repid.
    gx_variant-variant = p_vari.

    CALL FUNCTION 'LVC_VARIANT_EXISTENCE_CHECK'
      EXPORTING
        is_variant = gx_variant
        i_save     = g_save
      CHANGING
        cs_variant = gx_variant.

    g_variant = gx_variant.

  ELSE.

    PERFORM variant_init.

  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
* Form refresh_log
*---------------------------------------------------------------------*
FORM refresh_log  TABLES lt_result STRUCTURE bapiret2.

  REFRESH: lt_result.

ENDFORM.

*---------------------------------------------------------------------*
* Form ADD_MESSAGE
*---------------------------------------------------------------------*
FORM add_message  TABLES lt_result STRUCTURE bapiret2 USING p_msgty p_msgid p_msgno p_msgv1 p_msgv2 p_msgv3 p_msgv4.

  DATA:
    ls_result LIKE LINE OF lt_result.

  CLEAR: ls_result.
  ls_result-type       = p_msgty.
  ls_result-id         = p_msgid.
  ls_result-number     = p_msgno.
  ls_result-message_v1 = p_msgv1.
  ls_result-message_v2 = p_msgv2.
  ls_result-message_v3 = p_msgv3.
  ls_result-message_v4 = p_msgv4.
  APPEND ls_result TO lt_result.

ENDFORM.

*--------------------------- ------------------------------------------*
* Form make_fieldcat
*---------------------------------------------------------------------*
FORM make_fieldcat.

  DATA:
    lv_col_pos TYPE lvc_s_fcat-col_pos.

* Construimos el Fieldcatalog
  CLEAR:  gt_fieldcat, lv_col_pos.

  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name       = 'KO013'
    CHANGING
      ct_fieldcat            = gt_fieldcat
    EXCEPTIONS
      inconsistent_interface = 1
      program_error          = 2
      OTHERS                 = 3.

  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'TRFUNCTN_T'.
  IF sy-subrc EQ 0.
    gs_fieldcat-no_out     = 'X'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.
  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'TARGETDESC'.
  IF sy-subrc EQ 0.
    gs_fieldcat-no_out     = 'X'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.
  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'TARDEVCL'.
  IF sy-subrc EQ 0.
    gs_fieldcat-no_out     = 'X'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.
  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'DEVCLASS'.
  IF sy-subrc EQ 0.
    gs_fieldcat-no_out     = 'X'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.
  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'TARLAYER'.
  IF sy-subrc EQ 0.
    gs_fieldcat-no_out     = 'X'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.
  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'PROJECT'.
  IF sy-subrc EQ 0.
    gs_fieldcat-no_out     = 'X'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.
  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'PRJ_TEXT'.
  IF sy-subrc EQ 0.
    gs_fieldcat-no_out     = 'X'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.
  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'CHDOC_ID'.
  IF sy-subrc EQ 0.
    gs_fieldcat-no_out     = 'X'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.
  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'CHDOC_GUID'.
  IF sy-subrc EQ 0.
    gs_fieldcat-no_out     = 'X'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.
  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'CHDOC_DESC'.
  IF sy-subrc EQ 0.
    gs_fieldcat-no_out     = 'X'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.
  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'AS4DATE'.
  IF sy-subrc EQ 0.
    gs_fieldcat-coltext = 'Fecha lib.'.
    gs_fieldcat-seltext = 'Fecha lib.'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.
  READ TABLE gt_fieldcat INTO gs_fieldcat WITH KEY fieldname = 'AS4TIME'.
  IF sy-subrc EQ 0.
    gs_fieldcat-coltext = 'Hora de lib.'.
    gs_fieldcat-seltext = 'Hora de lib.'.
    MODIFY gt_fieldcat FROM gs_fieldcat INDEX sy-tabix.
  ENDIF.


  " Añadimos los campos de fecha y hora de subida a productivo
  DESCRIBE TABLE gt_fieldcat LINES lv_col_pos.

  lv_col_pos = lv_col_pos + 1.

  CLEAR gs_fieldcat.
  gs_fieldcat-fieldname = 'DATE_PRD'.
  gs_fieldcat-tabname = 'T_DATOS'.
  gs_fieldcat-col_pos = lv_col_pos.
  gs_fieldcat-ref_field = 'AS4DATE'.
  gs_fieldcat-ref_table = 'E070'.
  gs_fieldcat-coltext = 'Fecha Imp. PRD'.
  gs_fieldcat-seltext = 'Fecha Imp. PRD'.
  APPEND gs_fieldcat TO gt_fieldcat.

  lv_col_pos = lv_col_pos + 1.

  CLEAR gs_fieldcat.
  gs_fieldcat-fieldname = 'TIME_PRD'.
  gs_fieldcat-tabname = 'T_DATOS'.
  gs_fieldcat-col_pos = lv_col_pos.
  gs_fieldcat-ref_field = 'AS4TIME'.
  gs_fieldcat-ref_table = 'E070'.
  gs_fieldcat-coltext = 'Hora Imp. PRD'.
  gs_fieldcat-seltext = 'Hora Imp. PRD'.
  APPEND gs_fieldcat TO gt_fieldcat.

  lv_col_pos = lv_col_pos + 1.

  CLEAR gs_fieldcat.
  gs_fieldcat-fieldname = 'TOP'.
  gs_fieldcat-tabname = 'T_DATOS'.
  gs_fieldcat-checkbox = 'X'.
  gs_fieldcat-col_pos = lv_col_pos.
  gs_fieldcat-coltext = 'Top'.
  gs_fieldcat-seltext = 'Top'.
  APPEND gs_fieldcat TO gt_fieldcat.

  lv_col_pos = lv_col_pos + 1.
  CLEAR gs_fieldcat.
  gs_fieldcat-fieldname = 'LOCAL'.
  gs_fieldcat-tabname = 'T_DATOS'.
  gs_fieldcat-checkbox = 'X'.
  gs_fieldcat-col_pos = lv_col_pos.
  gs_fieldcat-coltext = 'Orden Local'.
  gs_fieldcat-seltext = 'Orden Local'.
  APPEND gs_fieldcat TO gt_fieldcat.



ENDFORM.

*---------------------------------------------------------------------*
*      Form  USER_COMMAND
*---------------------------------------------------------------------*
FORM user_command USING l_ucomm     LIKE sy-ucomm
                        l_selfield  TYPE slis_selfield.

  l_selfield-refresh    = 'X'.
  l_selfield-col_stable = 'X'.
  l_selfield-row_stable = 'X'.

  CASE l_ucomm.
    WHEN '&IC1'.
      READ TABLE gt_alv INTO gs_alv INDEX l_selfield-tabindex.
      IF l_selfield-fieldname EQ 'TRKORR' OR l_selfield-fieldname EQ 'STRKORR'.
*        lv_trkorr = gs_alv-trkorr.

        CALL FUNCTION 'TR_DISPLAY_REQUEST'
                  EXPORTING
                    i_trkorr = gs_alv-trkorr.

*        REFRESH: bdcdata, messtab.
*        PERFORM bdc_dynpro      USING 'SAPCTS_TOOLS'    '0100'.
*        PERFORM bdc_field       USING 'BDC_OKCODE'  '=%_GC 122 25'.
*
*
*        PERFORM bdc_dynpro      USING 'RSWBOSSR'    '1000'.
*        PERFORM bdc_field       USING 'BDC_CURSOR'  'P_RELE'.
**        PERFORM bdc_field       USING 'BDC_OKCODE'  '=ALLTYPE'.
*
**        PERFORM bdc_dynpro      USING 'RSWBOSSR'    '1000'.
*        PERFORM bdc_field       USING 'BDC_OKCODE'  '=ONLI'.
*        PERFORM bdc_field       USING 'P_KORR-LOW'  l_selfield-value.
*        PERFORM bdc_field       USING 'P_CHAN'      'X'.
*        PERFORM bdc_field       USING 'P_OPEN'      'X'.
*        PERFORM bdc_field       USING 'P_RELE'      'X'.
*
*        CALL TRANSACTION 'S_ALR_87101268' USING bdcdata MODE 'E' UPDATE 'A' MESSAGES INTO messtab.
* DATA p_korr TYPE RANGE OF e070-trkorr.
* data: s_kor like LINE OF p_korr.
* s_kor-low = l_selfield-value.
* s_kor-sign = 'I'.
* s_kor-option = 'EQ'.
* append s_kor to p_korr.
*                          SUBMIT rswbossr
**                                  WITH p_attr ...
*                                  WITH p_chan = 'X'
**                                  WITH p_client ...
**                                  WITH p_date ...
**                                  WITH p_devcl ...
*                                  WITH p_korr = l_selfield-value
*                                  WITH p_open = 'X'
**                                  WITH p_prj ...
**                                  WITH p_ref ...
*                                  WITH p_rele = 'X'
**                                  WITH p_tardvc ...
**                                  WITH p_tardvl ...
**                                  WITH p_tarsys ...
**                                  WITH p_text ...
**                                  WITH p_types ...
*                                  WITH p_types1 = 'KWTCOEMPDRSXQFGL'
*                                  WITH p_user = 'IEQSEIDOR'
*                            via SELECTION-SCREEN.
*        CALL TRANSACTION 'RSWBOSSR' USING bdcdata MODE 'E' UPDATE 'A' MESSAGES INTO messtab.
*        CALL TRANSACTION 'SE03' USING bdcdata MODE 'E' UPDATE 'A' MESSAGES INTO messtab.
*        CALL TRANSACTION 'S_ALR_87101268' USING bdcdata MODE 'A'.
*        CALL TRANSACTION 'S_ALR_87101268' AND SKIP FIRST SCREEN.

      ENDIF.

  ENDCASE.

ENDFORM.

*---------------------------------------------------------------------*
* Form TRATA_VARI
*---------------------------------------------------------------------*
FORM trata_vari .

  g_variant-report = sy-repid.
  g_variant-username = sy-uname.

  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant    = g_variant
      i_save        = 'A'
    IMPORTING
      es_variant    = gx_variant
    EXCEPTIONS
      not_found     = 1
      program_error = 2
      OTHERS        = 3.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ELSE.
    p_vari = gx_variant-variant.
  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
* Form rellenar_opciones
*---------------------------------------------------------------------*
FORM rellenar_opciones.

  DATA: lv_trfunc LIKE LINE OF s_trfunc.
  DATA: lv_status LIKE LINE OF s_status.

  CLEAR: s_trfunc, s_trfunc_dep, gv_stop.
  IF p_transp IS INITIAL AND p_custo IS INITIAL AND p_transl IS INITIAL AND p_work IS INITIAL.
    gv_stop = 'X'.
    MESSAGE 'Por favor, seleccione un tipo de orden de transporte' TYPE 'S' DISPLAY LIKE 'E'.
  ELSE.

    lv_trfunc     = 'IEQ'.

    IF p_transp IS NOT INITIAL.
      lv_trfunc-low = 'T'.
      APPEND lv_trfunc TO s_trfunc.
    ENDIF.

    IF p_custo IS NOT INITIAL.
      lv_trfunc-low = 'W'.
      APPEND lv_trfunc TO s_trfunc.
    ENDIF.

    IF p_work IS NOT INITIAL.
      lv_trfunc-low = 'K'.
      APPEND lv_trfunc TO s_trfunc.
    ENDIF.

    IF p_transl IS NOT INITIAL.
      lv_trfunc-low = 'C'.
      APPEND lv_trfunc TO s_trfunc.

      lv_trfunc-low = 'E'.
      APPEND lv_trfunc TO s_trfunc.

      lv_trfunc-low = 'O'.
      APPEND lv_trfunc TO s_trfunc.
    ENDIF.

    lv_trfunc-low = 'S'.
    APPEND lv_trfunc TO s_trfunc_dep.

    lv_trfunc-low = 'R'.
    APPEND lv_trfunc TO s_trfunc_dep.

    lv_trfunc-low = 'Q'.
    APPEND lv_trfunc TO s_trfunc_dep.

    lv_trfunc-low = 'X'.
    APPEND lv_trfunc TO s_trfunc_dep.

    IF p_mod IS INITIAL AND p_rel IS INITIAL.
      gv_stop = 'X'.
      MESSAGE 'Por favor, seleccione un status para las órdenes' TYPE 'S' DISPLAY LIKE 'E'.
    ELSE.
      lv_status     = 'IEQ'.
      " Si hemos seleccionado las órdenes modificables las añadimos a la búsqueda
      IF p_mod IS NOT INITIAL.
        lv_status-low = 'L'.
        APPEND lv_status TO s_status.
        lv_status-low = 'D'.
        APPEND lv_status TO s_status.
      ENDIF.
      " Las de tipo O (liberación iniciada) siempre se seleccionan
      lv_status-low = 'O'.
      APPEND lv_status TO s_status.
    ENDIF.
  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
* Form OBTENER_DATOS
*---------------------------------------------------------------------*
FORM obtener_datos.

  CLEAR: t_datos, x_datos.

  DATA:
    t_datos_aux TYPE TABLE OF ty_datos,
    et_requests TYPE stmsiqreq, "tmsiqreqs,
    t_tmsbufreq TYPE TABLE OF tmsbufreq WITH HEADER LINE,
    w_tmsbufreq TYPE tmsbufreq,
    ls_cofile   TYPE ctslg_cofile,
    ls_system   TYPE ctslg_system,
    ls_step     TYPE ctslg_step,
    ls_action   TYPE ctslg_action,
    ls_alv_aux  TYPE ty_datos.

  REFRESH: t_datos.

  SELECT *
    INTO CORRESPONDING FIELDS OF TABLE t_datos
    FROM e070
    WHERE trkorr     IN s_trkorr
      AND trfunction IN s_trfunc
      AND trstatus   IN s_status
      AND as4user    IN s_user.
  " Si se han seleccionado las órdenes modificables, buscamos estas según la fecha de liberación indicadas
  IF p_rel IS NOT INITIAL.
    SELECT *
      APPENDING CORRESPONDING FIELDS OF TABLE t_datos
      FROM e070
      WHERE trkorr     IN s_trkorr
        AND trfunction IN s_trfunc
        AND ( trstatus EQ 'R' OR trstatus EQ 'N' )
        AND as4date IN s_date
        AND as4user    IN s_user.
  ENDIF.

*  IF p_rel IS NOT INITIAL AND p_sysid IS NOT INITIAL.
*    SELECT *
*      APPENDING CORRESPONDING FIELDS OF TABLE t_datos
*      FROM e070
*      WHERE trkorr     IN s_trkorr
*        AND trfunction IN s_trfunc
*        AND ( trstatus EQ 'R' OR trstatus EQ 'N' )
*        AND as4date IN s_date_p
*        AND as4user    IN s_user.
*  ELSEIF p_rel IS NOT INITIAL.
*    SELECT *
*      APPENDING CORRESPONDING FIELDS OF TABLE t_datos
*      FROM e070
*      WHERE trkorr     IN s_trkorr
*        AND trfunction IN s_trfunc
*        AND ( trstatus EQ 'R' OR trstatus EQ 'N' )
*        AND as4date IN s_date
*        AND as4user    IN s_user.
*  ENDIF.

  IF t_datos IS NOT INITIAL.

    " Buscamos las órdenes tareas dependientes de las que hemos encontrado
    t_datos_aux = t_datos.
    SELECT *
    APPENDING CORRESPONDING FIELDS OF TABLE t_datos
    FROM e070
      FOR ALL ENTRIES IN t_datos_aux
      WHERE strkorr EQ t_datos_aux-trkorr.

    CLEAR:   t_e071.
    REFRESH: t_e071.

    SELECT *
      FROM e071k
      INTO CORRESPONDING FIELDS OF TABLE t_e071
       FOR ALL ENTRIES IN t_datos
     WHERE trkorr = t_datos-trkorr.

    SELECT *
      FROM e070c
      INTO CORRESPONDING FIELDS OF TABLE t_e070c
       FOR ALL ENTRIES IN t_datos
     WHERE trkorr = t_datos-trkorr.

    SELECT *
      FROM e07t
      INTO CORRESPONDING FIELDS OF TABLE t_e07t
       FOR ALL ENTRIES IN t_datos
     WHERE trkorr = t_datos-trkorr.

    SELECT *
      FROM tmsbufreq
      INTO CORRESPONDING FIELDS OF TABLE t_tmsbufreq
       FOR ALL ENTRIES IN t_datos
     WHERE trkorr = t_datos-trkorr.

    CLEAR:   gs_alv, gt_alv, w_e071.
    REFRESH: gt_alv.

    LOOP AT t_datos INTO x_datos.

      MOVE-CORRESPONDING x_datos TO gs_alv.
****      IF gs_alv-trfunction = 'W'.
****        gs_alv-trfunction = 'C'.
****      ELSEIF gs_alv-trfunction = 'K'.
****        gs_alv-trfunction = 'W'.
****      ENDIF.

      CALL FUNCTION 'TR_REQUEST_TYPE_TEXT'
        EXPORTING
          iv_request_type           = gs_alv-trfunction
          iv_request_status         = gs_alv-trstatus
        IMPORTING
          ev_request_type_text_long = gs_alv-trfunctn_l
          ev_request_status_text    = gs_alv-trstatus_t.

      CLEAR: w_e071.
      READ TABLE t_e071 INTO w_e071 WITH KEY trkorr = x_datos-trkorr.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING w_e071 TO gs_alv.
      ENDIF.
      CLEAR: w_tmsbufreq.
      READ TABLE t_tmsbufreq INTO w_tmsbufreq.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING w_tmsbufreq TO gs_alv.
      ENDIF.

      CLEAR: w_e070c.
      READ TABLE t_e070c INTO w_e070c WITH KEY trkorr = x_datos-trkorr.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING w_e070c TO gs_alv.
      ENDIF.

      CLEAR: w_e07t.
      READ TABLE t_e07t INTO w_e07t WITH KEY trkorr = x_datos-trkorr.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING w_e07t TO gs_alv.
      ENDIF.

* Cambiamos la incial para el alv salga correctamente la letra
      IF gs_alv-trfunction = 'W'.
        gs_alv-trfunction = 'C'.
      ELSEIF gs_alv-trfunction = 'K'.
        gs_alv-trfunction = 'W'.
      ENDIF.

      " Si la orden no tiene una superior, se marca el campo TOP
      IF gs_alv-strkorr IS INITIAL.
*       Orden superior se asigna a ella misma para poder hacer ordenación de datos por pantalla
        gs_alv-strkorr = gs_alv-trkorr.
        gs_alv-top     = 'X'.
        if gs_alv-tarsystem is INITIAL. "Si es orden superior, y el destino de transporte está vacio, es LOCAL
          gs_alv-local = abap_true.
        endif.
        IF gs_alv-trkorr IS NOT INITIAL AND ( gs_alv-trstatus EQ 'N' OR gs_alv-trstatus EQ 'R' ).

          " Aquí añadimos los datos del paso a productivo para tareas liberadas.
          CALL FUNCTION 'TR_READ_GLOBAL_INFO_OF_REQUEST'
            EXPORTING
              iv_trkorr   = gs_alv-trkorr
              iv_dir_type = 'T'
            IMPORTING
              es_cofile   = ls_cofile.

          READ TABLE ls_cofile-systems INTO ls_system WITH KEY systemid = p_sysid.
          IF sy-subrc EQ 0.
            READ TABLE ls_system-steps INTO ls_step INDEX 1.
            IF sy-subrc EQ 0.
              READ TABLE ls_step-actions INTO ls_action INDEX 1.
              IF sy-subrc EQ 0.
                IF ls_action-date IN s_date_p.
                  gs_alv-date_prd = ls_action-date.
                  gs_alv-time_prd = ls_action-time.
                  lv_prd = ABAP_TRUE.
                ELSE.
                  lv_prd = ABAP_FALSE.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      else. "Buscamos de la orden secundaria su principal, y vemos si esa es LOCAL
        read table t_datos into data(ls_datos) with key TRKORR = gs_alv-STRKORR.
        if sy-subrc = 0 and ls_datos-strkorr is INITIAL and ls_datos-tarsystem is INITIAL.
          gs_alv-local = abap_true.
        endif.
      ENDIF.
      " Aquí rellenamos los datos para los campos relacionados con las órdenes liberadas
      IF gs_alv-trstatus NE 'R' AND gs_alv-trstatus NE 'N'.
        " La fecha de última modificación coincidirá con la fecha de liberación para tareas liberadas, por lo que la borramos en caso de que ni estén liberadas
        CLEAR: gs_alv-as4date, gs_alv-as4time.
      ELSE.
        " Si una orden no es top (tiene orden superior) buscamos fecha y hora del paso a productivo de la superior y lo copiamos
        " (Por como hemos añadido los resultados a la tabla, las órdenes top aparecerán antes, por lo que ya estarán rellenas estas fechas)
        IF gs_alv-top IS INITIAL.
          READ TABLE gt_alv INTO ls_alv_aux WITH KEY trkorr = gs_alv-strkorr.
          IF sy-subrc EQ 0.
            IF ls_action-date IN s_date_p.
              gs_alv-date_prd = ls_alv_aux-date_prd.
              gs_alv-time_prd = ls_alv_aux-time_prd.
              lv_prd = ABAP_TRUE.
            ELSE.
              lv_prd = ABAP_FALSE.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

      IF NOT gs_alv-trkorr IS INITIAL AND NOT gs_alv-trfunction IS INITIAL.

        IF s_date_p IS INITIAL AND p_sysid IS INITIAL.
          IF p_top IS INITIAL.
            APPEND gs_alv TO gt_alv.
          ELSE.
            IF gs_alv-top EQ 'X'.
              APPEND gs_alv TO gt_alv.
            ENDIF.
          ENDIF.
        ELSE.
          IF p_top IS INITIAL AND lv_prd EQ ABAP_TRUE.
            APPEND gs_alv TO gt_alv.
          ELSE.
            IF gs_alv-top EQ 'X' AND lv_prd EQ ABAP_TRUE.
              APPEND gs_alv TO gt_alv.
            ENDIF.
          ENDIF.
        ENDIF.


        CLEAR: gs_alv, x_datos, lv_prd.
      ENDIF.

    ENDLOOP.

  ENDIF.

  SORT gt_alv.
  DELETE ADJACENT DUPLICATES FROM gt_alv.

ENDFORM.

*----------------------------------------------------------------------*
*        Start new screen                                              *
*----------------------------------------------------------------------*
FORM bdc_dynpro USING program dynpro.

  CLEAR bdcdata.
  bdcdata-program  = program.
  bdcdata-dynpro   = dynpro.
  bdcdata-dynbegin = 'X'.
  APPEND bdcdata.

ENDFORM.

*----------------------------------------------------------------------*
*        Insert field                                                  *
*----------------------------------------------------------------------*
FORM bdc_field USING fnam fval.

  CLEAR bdcdata.
  bdcdata-fnam = fnam.
  bdcdata-fval = fval.
  APPEND bdcdata.

ENDFORM.
