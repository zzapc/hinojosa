*&---------------------------------------------------------------------*
*&  Include           ZSEIS_PATRON_ALV_FUNCIONES
*&---------------------------------------------------------------------*




*&---------------------------------------------------------------------*
*&      Form  F_COLOREAR_CELDAS
*&---------------------------------------------------------------------*
*       Indica el color de la celda pasada por parámetro
*----------------------------------------------------------------------*
*  TABLAS: tp_alv. Tabla con los datos del ALV
*  USING: p_fila: Número de fila del ALV
*         p_columna: Nombre de la columna del ALV
*         p_col: Color
*         p_int: Intensidad
*         p_inv: Inverso
*----------------------------------------------------------------------*
FORM f_colorear_celdas  TABLES tp_alv
                        USING VALUE(p_fila) VALUE(p_columna) VALUE(p_col) VALUE(p_int) VALUE(p_inv).



  DATA: wl_alv      LIKE wa_alv.
  DATA: wl_colfield TYPE lvc_s_scol.

  READ TABLE tp_alv INTO wl_alv INDEX p_fila.

  CLEAR wl_colfield.
  wl_colfield-fname = p_columna.
  wl_colfield-color-col = p_col.
  wl_colfield-color-int = p_int.
  wl_colfield-color-inv = p_inv.
  APPEND wl_colfield TO wl_alv-it_colfields.

  MODIFY tp_alv INDEX p_fila FROM wl_alv.


ENDFORM.                    " COLOREAR_CELDAS



*&---------------------------------------------------------------------*
*&      Form  F_NEGRITA_CELDAS
*&---------------------------------------------------------------------*
*       Indica el formato negrita de la celda pasada por parámetro
*----------------------------------------------------------------------*
*  TABLAS: tp_alv. Tabla con los datos del ALV
*  USING: p_fila: Número de fila del ALV
*         p_columna: Nombre de la columna del ALV
*----------------------------------------------------------------------*
FORM f_negrita_celdas TABLES tp_alv
                        USING VALUE(p_fila) VALUE(p_columna).

  DATA: wl_alv    LIKE wa_alv,
        wl_estilo TYPE lvc_s_styl.

  READ TABLE tp_alv INTO wl_alv INDEX p_fila.

  READ TABLE wl_alv-it_estilos INTO wl_estilo WITH TABLE KEY  fieldname = p_columna.
  DELETE TABLE wl_alv-it_estilos WITH TABLE KEY fieldname = p_columna.
  "FREE wl_alv-it_estilos.

  COMPUTE wl_estilo-style = wl_estilo-style BIT-OR c_estilo_negrita.

  wl_estilo-fieldname = p_columna.
  INSERT wl_estilo INTO TABLE  wl_alv-it_estilos.
  MODIFY tp_alv INDEX p_fila FROM wl_alv.
ENDFORM.                    " ESTILO_CELDAS


*&---------------------------------------------------------------------*
*&      Form  F_EXCLUIR_BOTONES_TOOLBAR
*&---------------------------------------------------------------------*
*       Indica que el botón pasado por parámetro no se mostrará en el ALV
*----------------------------------------------------------------------*
FORM f_excluir_botones_toolbar USING p_boton .

  APPEND p_boton                   TO it_toolbar_exc.

* Eliminar botones de la barra de herramientas


*  APPEND cl_gui_alv_grid=>mc_fc_auf                   TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_average               TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_back_classic          TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_call_abc              TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_call_chain            TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_call_crbatch          TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_call_crweb            TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_call_lineitems        TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_call_master_data      TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_call_more             TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_call_report           TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_call_xint             TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_call_xxl              TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_check                 TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_col_invisible         TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_col_optimize          TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_count                 TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_current_variant       TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_data_save             TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_delete_filter         TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_deselect_all          TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_detail                TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_excl_all              TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_expcrdata             TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_expcrdesig            TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_expcrtempl            TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_expmdb                TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_extend                TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_f4                    TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_filter                TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_find                  TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_fix_columns           TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_graph                 TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_help                  TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_html                  TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_info                  TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_load_variant          TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_loc_append_row        TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_loc_copy              TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_loc_copy_row          TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_loc_cut               TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_loc_delete_row        TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_loc_insert_row        TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_loc_move_row          TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_loc_paste             TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_loc_paste_new_row     TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_loc_undo              TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_maintain_variant      TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_maximum               TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_minimum               TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_pc_file               TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_print                 TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_print_back            TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_print_prev            TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_refresh               TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_reprep                TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_save_variant          TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_select_all            TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_send                  TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_separator             TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_sort                  TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_sort_asc              TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_sort_dsc              TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_subtot                TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_sum                   TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_to_office             TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_to_rep_tree           TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_unfix_columns         TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_url_copy_to_clipboard TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_variant_admin         TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_views                 TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_view_crystal          TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_view_excel            TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_view_grid             TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_view_lotus            TO tp_toolbar_exc.
*  APPEND cl_gui_alv_grid=>mc_fc_word_processor        TO tp_toolbar_exc.

ENDFORM.                    " EXCLUIR_BOTONES_TOOLBAR


*&---------------------------------------------------------------------*
*&      Form  F_CREAR_SORT
*&---------------------------------------------------------------------*
*       Crea una ordenación para el ALV
*----------------------------------------------------------------------*
*  USING: p_nivel: Nivel dentro de la ordenación de la columna
*         p_columna: Nombre de la columna del ALV
*         p_subtotal: X si esta columna se usa para calcular un subtotal
*         p_desc: X si la ordenación es descendente
*----------------------------------------------------------------------*
FORM f_crear_sort USING VALUE(p_nivel) VALUE(p_columna) VALUE(p_subtotal) VALUE(p_desc).
  DATA wl_sort LIKE LINE OF it_sort.

  wl_sort-spos = p_nivel.
  wl_sort-fieldname = p_columna. "nombre del campo de ordenamiento.
  wl_sort-subtot    = p_subtotal.
  wl_sort-down      = p_desc.
  APPEND wl_sort TO it_sort.


ENDFORM.                    " CREAR_SORT
*&---------------------------------------------------------------------*
*&      Form  f_ini_sort
*&---------------------------------------------------------------------*
*       Inicializa la tabla de ordenaciones para ALV
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
FORM f_ini_sort .
  CLEAR it_sort.
  FREE it_sort.
ENDFORM.                    " f_ini_sort

*&---------------------------------------------------------------------*
*&      Form  f_ini_excl_botones_toolbar
*&---------------------------------------------------------------------*
*       Inicializa la tabla de botones excluidos de la toolbar del ALV
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
FORM f_ini_excl_botones_toolbar .
  CLEAR it_toolbar_exc.
  FREE it_toolbar_exc.
ENDFORM.                    " f_ini_excl_botones_toolbar



*&---------------------------------------------------------------------*
*&      Form  f_append_dato
*&---------------------------------------------------------------------*
*       Añade una línea de datos a la tabla de datos del ALV.
*----------------------------------------------------------------------*
*  TABLAS: tp_alv. Tabla con los datos del ALV
*  USING: wp_fila: Estructura con la fila a añadir en la tabla
*----------------------------------------------------------------------*
FORM f_append_dato  TABLES   tp_alv
                    USING    wp_alv.
  PERFORM f_append_dato_con_estado TABLES tp_alv USING wp_alv ' '.
ENDFORM.                    " f_append_dato


*&---------------------------------------------------------------------*
*&      Form  f_append_dato_con_estado
*&---------------------------------------------------------------------*
*       Añade una línea de datos a la tabla de datos del ALV. Permite indicar
*       el estado de la fila añadida
*----------------------------------------------------------------------*
*  TABLAS: tp_alv. Tabla con los datos del ALV
*  USING: wp_fila: Estructura con la fila a añadir en la tabla
*         vp_estado: 'N' si el dato es nuevo, y por lo tanto debe insertarse en BD
*                    ' ' si el dato viene de la BD
*----------------------------------------------------------------------*
FORM f_append_dato_con_estado  TABLES   tp_alv
                                USING    wp_alv
                                         vp_estado.
  APPEND INITIAL LINE TO tp_alv ASSIGNING FIELD-SYMBOL(<fs_alv>).
  MOVE-CORRESPONDING wp_alv TO <fs_alv>.

ENDFORM.                    " f_append_dato


*&---------------------------------------------------------------------*
*&      Form  f_append_dato_con_estado2
*&---------------------------------------------------------------------*
*       Añade una línea de datos a la tabla de datos del ALV. Permite indicar
*       el estado de la fila añadida. No modifica el estado para altas.
*----------------------------------------------------------------------*
*  TABLAS: tp_alv. Tabla con los datos del ALV
*  USING: wp_fila: Estructura con la fila a añadir en la tabla
*         vp_estado: 'N' si el dato es nuevo, y por lo tanto debe insertarse en BD
*                    ' ' si el dato viene de la BD
*----------------------------------------------------------------------*
FORM f_append_dato_con_estado2  TABLES   tp_alv
                                USING    wp_alv
                                         vp_estado.
  DATA wl_alv LIKE LINE OF it_alv.
  MOVE-CORRESPONDING wp_alv TO wl_alv.

  "Si me indicas estado Nuevo, cargo el dato como Nuevo Modificado para hacer el insert.
*  IF vp_estado = 'N'.
*    wl_alv-zzmarca_edit = 'NM'.
*  ENDIF.


  APPEND wl_alv TO tp_alv.

  "Colocamos el formato protegido para las celdas de la clave
  LOOP AT it_alv_pk INTO wa_alv_pk WHERE dynpro = sy-dynnr.
    PERFORM f_formato_edit_celdas
        TABLES  tp_alv
        USING   sy-tabix wa_alv_pk-campo_pk ' '.
  ENDLOOP.

ENDFORM.                    " f_append_dato


*&---------------------------------------------------------------------*
*&      Form  f_insert_dato
*&---------------------------------------------------------------------*
*       Inserta una línea de datos a la tabla de datos del ALV en la posición especificada
*----------------------------------------------------------------------*
*  TABLAS: tp_alv. Tabla con los datos del ALV
*  USING: wp_fila: Estructura con la fila a añadir en la tabla
*         vp_posicion: Posición donde se insertará la fila
*----------------------------------------------------------------------*
FORM f_insert_dato  TABLES   tp_alv
                    USING    wp_alv VALUE(vp_posicion).
  DATA wl_alv LIKE LINE OF it_alv.
  MOVE-CORRESPONDING wp_alv TO wl_alv.
  INSERT wl_alv INTO tp_alv INDEX vp_posicion.

  "Colocamos el formato protegido para las celdas de la clave
  LOOP AT it_alv_pk INTO wa_alv_pk WHERE dynpro = sy-dynnr.
    PERFORM f_formato_edit_celdas
        TABLES  tp_alv
        USING   vp_posicion wa_alv_pk-campo_pk ' '.
  ENDLOOP.




ENDFORM.                    " f_append_dato


*&---------------------------------------------------------------------*
*&      Form  f_config_dynpro
*&---------------------------------------------------------------------*
*       Configura la dynpro con los datos necesarios para la ejecución del patrón
*----------------------------------------------------------------------*
* USING:  vp_dynpro: Número de la dynpro
*         vp_alv: Nombre del contenedor del ALV en la dynpro o ' ' si la dynpro no tiene ALV
*         vp_titulo: Nombre del elemento título de la dynpro
*         vp_status: Nombre del elemento status de la dynpro
*         vp_con_cabecera: 'T' Si el ALV tiene cabecera,
*                          'L' si el ALV tiene cabecera con logo de SIRO
*                          'B' si el ALV tiene pie de página
*                          ' ' si no tiene nada
*         vp_editable: 'X' Si el ALV es editable
*----------------------------------------------------------------------*
FORM f_config_dynpro  USING   VALUE(vp_dynpro) VALUE(vp_alv) VALUE(vp_titulo)
                              VALUE(vp_status) VALUE(vp_con_cabecera) VALUE(vp_editable).
  wa_def_prog-alv           = vp_alv.
  wa_def_prog-dynpro        = vp_dynpro.
  wa_def_prog-titulo        = vp_titulo.
  wa_def_prog-status        = vp_status.
  wa_def_prog-con_cabecera  = vp_con_cabecera.
  wa_def_prog-editable       = vp_editable.
  "EMP 18.01.11
  "Si es en batch quitamos la cabecera
  IF sy-batch IS NOT INITIAL AND vp_con_cabecera = 'L'.
    wa_def_prog-con_cabecera = 'T'.
  ENDIF.
  APPEND wa_def_prog TO it_def_prog.




  DATA rl_descr_ref TYPE REF TO cl_abap_tabledescr.

  CALL METHOD cl_abap_tabledescr=>describe_by_name
    EXPORTING
      p_name         = 'TT_LIN_ALV'
    RECEIVING
      p_descr_ref    = DATA(rl_descr_ref_aux)
    EXCEPTIONS
      type_not_found = 1
      OTHERS         = 2.
  IF sy-subrc = 0.
    rl_descr_ref ?= rl_descr_ref_aux.
    DATA(tl_keys) = rl_descr_ref->get_keys( ) .
    READ TABLE tl_keys ASSIGNING FIELD-SYMBOL(<fs_key>) WITH KEY is_primary = 'X'.
    IF sy-subrc = 0.
      LOOP AT <fs_key>-components ASSIGNING FIELD-SYMBOL(<fs_component>).
        PERFORM f_anyadir_campo_pk USING wa_def_prog-dynpro <fs_component>-name.
      ENDLOOP.
    ENDIF.
  ENDIF.
ENDFORM.                    "f_config_dynpro


FORM f_config_subscreen USING VALUE(vp_dynpro) VALUE(vp_subscreen) VALUE(vp_nombre_contenedor) VALUE(vp_titulo) VALUE(vp_editable).
  APPEND INITIAL LINE TO tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>).
  <fs_config_subscreen>-dynpro             = vp_dynpro.
  <fs_config_subscreen>-subscreen          = vp_subscreen.
  <fs_config_subscreen>-nombre_contenedor  = vp_nombre_contenedor.
  <fs_config_subscreen>-titulo             = vp_titulo.
  <fs_config_subscreen>-editable           = vp_editable.
ENDFORM.







*&---------------------------------------------------------------------*
*&      Form  F_ANYADIR_CAMPO_PK
*&---------------------------------------------------------------------*
*       Indica que la columna pasada por parámetro forma parte de la PK
*----------------------------------------------------------------------*
*  USING: vp_dynpro: Dynpro del ALV con el campo que vamos a añadir
*         vp_campo:  Nombre de la columna del ALV que es PK
*----------------------------------------------------------------------*
FORM f_anyadir_campo_pk USING VALUE(vp_dynpro) VALUE(vp_campo).
  DATA wl_alv_pk  TYPE st_alv_pk.
  wl_alv_pk-dynpro    = vp_dynpro.
  wl_alv_pk-campo_pk  = vp_campo.

  APPEND wl_alv_pk TO it_alv_pk.
ENDFORM.                    " CREAR_SORT

*&---------------------------------------------------------------------*
*&      Form  f_ini_campos_PK
*&---------------------------------------------------------------------*
*       Inicializa la tabla de campos PK
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
FORM f_ini_campos_pk .
  CLEAR it_alv_pk.
  FREE it_alv_pk.
ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  f_ini_campos_PK_dynpro
*&---------------------------------------------------------------------*
*       Inicializa la tabla de campos PK
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
FORM f_ini_campos_pk_dynpro USING vp_dynpro.
  DELETE it_alv_pk WHERE dynpro = vp_dynpro.
ENDFORM.

*&---------------------------------------------------------------------*
*&      Form  f_anyadir_linea_cab
*&---------------------------------------------------------------------*
*       Añade la línea indicada a la cabecera/pie de página
*----------------------------------------------------------------------*
*  USING: vp_linea: Línea a añadir
*----------------------------------------------------------------------*
FORM f_anyadir_linea_cab  USING VALUE(vp_linea).

  DATA vl_linea TYPE sdydo_text_element.

  vl_linea = vp_linea.

*  CALL METHOD v_html->add_text
*    EXPORTING
*      text = vl_linea.
*
*  CALL METHOD v_html->new_line.

  APPEND vl_linea TO it_texto_cab.

ENDFORM.                    " f_anyadir_linea_cab


*&---------------------------------------------------------------------*
*&      Form  F_FORMATO_EDIT_CELDAS
*&---------------------------------------------------------------------*
*       Indica el formato de edición de la celda pasada por parámetro
*----------------------------------------------------------------------*
*  TABLAS: tp_alv. Tabla con los datos del ALV
*  USING: p_fila: Número de fila del ALV
*         p_columna: Nombre de la columna del ALV
*         p_enabled: 'X' si la celda está habilitada. ' ' si está deshabilitada
*----------------------------------------------------------------------*
FORM f_formato_edit_celdas  TABLES tp_alv
                        USING VALUE(p_fila) VALUE(p_columna) VALUE(p_enabled).

  DATA: wl_alv    LIKE wa_alv,
        wl_estilo TYPE lvc_s_styl.


  READ TABLE tp_alv INTO wl_alv INDEX p_fila.

  READ TABLE wl_alv-it_estilos INTO wl_estilo WITH TABLE KEY  fieldname = p_columna.
  DELETE TABLE wl_alv-it_estilos WITH TABLE KEY fieldname = p_columna.
  "FREE wl_alv-it_estilos.

*  IF p_enabled = 'X'.
*    COMPUTE wl_estilo-style = wl_estilo-style bit-or c_estilo_enabled.
*  ELSE.
*    COMPUTE wl_estilo-style = wl_estilo-style bit-or c_estilo_disabled.
*  ENDIF.

  IF p_enabled = 'X'.
    wl_estilo-style = c_estilo_enabled.
  ELSE.
    wl_estilo-style = c_estilo_disabled.
  ENDIF.


  wl_estilo-fieldname = p_columna.
  INSERT wl_estilo INTO TABLE  wl_alv-it_estilos.
  MODIFY tp_alv INDEX p_fila FROM wl_alv.
ENDFORM.                    " ESTILO_CELDAS




*&---------------------------------------------------------------------*
*&      Form  F_FORMATO_EDIT_COLUMNA
*&---------------------------------------------------------------------*
*       Indica el formato de edición de la columna de la tabla pasada por parámetro
*----------------------------------------------------------------------*
*  TABLAS: tp_alv. Tabla con los datos del ALV
*  USING: p_columna: Nombre de la columna del ALV
*         p_enabled: 'X' si la celda está habilitada. ' ' si está deshabilitada
*----------------------------------------------------------------------*
FORM f_formato_edit_columna TABLES tp_alv
  USING VALUE(p_columna) VALUE(p_enabled).

  LOOP AT tp_alv INTO wa_alv.
    PERFORM f_formato_edit_celdas
      TABLES tp_alv
      USING sy-tabix p_columna p_enabled.
  ENDLOOP.
ENDFORM.                    "f_formato_edit_tabla

*&---------------------------------------------------------------------*
*&      Form  F_FORMATO_EDIT_PK
*&---------------------------------------------------------------------*
*       Indica el formato de edición de la PK de la dynpro especificada
*----------------------------------------------------------------------*
*  TABLAS: tp_alv. Tabla con los datos del ALV
*  USING: p_dynpro: Número de la dynpro a la que aplicar el formato
*----------------------------------------------------------------------*
FORM f_formato_edit_pk TABLES tp_alv
  USING VALUE(p_dynpro).

  LOOP AT it_alv_pk INTO wa_alv_pk WHERE dynpro = p_dynpro.
    PERFORM f_formato_edit_columna
      TABLES tp_alv
      USING wa_alv_pk-campo_pk ' '.
  ENDLOOP.
ENDFORM.                    "f_formato_edit_tabla


*&---------------------------------------------------------------------*
*&      Form  F_obtener_datos_tabla
*&---------------------------------------------------------------------*
*       Obtiene los datos para el usuario de la tabla especificada.
*----------------------------------------------------------------------*
*  TABLAS: tp_alv.      Tabla con los datos del ALV. Tipo st_lin_alv_patron
*          tp_lin_alv.  Tabla con los datos del ALV visibles para el usuario. Tipo st_lin_alv
*----------------------------------------------------------------------*
FORM f_obtener_datos_tabla TABLES tp_alv tp_lin_alv.

  DATA: wl_alv     TYPE st_lin_alv_patron,
        wl_lin_alv TYPE st_lin_alv.

  CLEAR tp_lin_alv.
  FREE  tp_lin_alv.
  LOOP AT tp_alv INTO wl_alv.
    MOVE-CORRESPONDING wl_alv TO wl_lin_alv.
    APPEND wl_lin_alv TO tp_lin_alv.
  ENDLOOP.
ENDFORM.                    "f_formato_edit_tabla


*&---------------------------------------------------------------------*
*&      Form  F_EXCL_BOTONES_ALV
*&---------------------------------------------------------------------*
*       Excluye el botón pasado por parámetro de la barra de herramientas del ALV
*----------------------------------------------------------------------*
*   USING:  rp_object: Objeto de tipo alv_toolbar
*           vp_boton: Código de función del botón a excluir
*----------------------------------------------------------------------*
FORM f_excl_botones_alv  USING    rp_object TYPE REF TO cl_alv_event_toolbar_set
                                  vp_boton.

  DELETE TABLE rp_object->mt_toolbar WITH TABLE KEY function = vp_boton.

ENDFORM.                    " F_EXCL_BOTONES_ALV


*&---------------------------------------------------------------------*
*&      Form  F_CONVERTIR_SEL_OPT_TEXTO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_S_ARBPL_SIGN  text
*      -->P_S_ARBPL_OPTION  text
*      -->P_S_ARBPL_LOW  text
*      -->P_S_ARBPL_HIGH  text
*      -->P_VL_TEXTO  text
*----------------------------------------------------------------------*
FORM f_convertir_sel_opt_texto  USING    vp_sign
                                         vp_option
                                         vp_low
                                         vp_high
                                         vp_texto.

  DATA vl_texto2 TYPE string.

  IF vp_sign = 'E'.
    MESSAGE s921(zseis) INTO vp_texto. "Excluyendo
  ELSE.
    CLEAR vp_texto.
  ENDIF.


  CASE  vp_option.
    WHEN 'EQ'.
      CONCATENATE vp_texto vp_low INTO vp_texto SEPARATED BY space.
    WHEN 'NE'.
      MESSAGE s922(zseis) WITH vp_low INTO vl_texto2. "Distinto de
      CONCATENATE vp_texto vl_texto2 INTO vp_texto SEPARATED BY space.
    WHEN 'LT'.
      MESSAGE s923(zseis) WITH vp_low INTO vl_texto2. "Menor de
      CONCATENATE vp_texto vl_texto2 INTO vp_texto SEPARATED BY space.
      "CONCATENATE vp_texto 'Menor que' vp_low INTO vp_texto SEPARATED BY space.
    WHEN 'LE'.
      MESSAGE s924(zseis) WITH vp_low INTO vl_texto2. "Menor o igual que
      CONCATENATE vp_texto vl_texto2 INTO vp_texto SEPARATED BY space.
      "CONCATENATE vp_texto 'Menor o igual que' vp_low INTO vp_texto SEPARATED BY space.
    WHEN 'GT'.
      MESSAGE s925(zseis) WITH vp_low INTO vl_texto2. "Mayor que
      CONCATENATE vp_texto vl_texto2 INTO vp_texto SEPARATED BY space.
      "CONCATENATE vp_texto 'Mayor que' vp_low INTO vp_texto SEPARATED BY space.
    WHEN 'GE'.
      MESSAGE s926(zseis) WITH vp_low INTO vl_texto2. "Mayor o igual que
      CONCATENATE vp_texto vl_texto2 INTO vp_texto SEPARATED BY space.
      "CONCATENATE vp_texto 'Mayor o igual que' vp_low INTO vp_texto SEPARATED BY space.
    WHEN 'BT'.
      MESSAGE s927(zseis) WITH vp_low vp_high INTO vl_texto2. "Entre - y -
      CONCATENATE vp_texto vl_texto2 INTO vp_texto SEPARATED BY space.
      "CONCATENATE vp_texto 'Entre' vp_low 'y' vp_high INTO vp_texto SEPARATED BY space.
    WHEN 'CP'.
      MESSAGE s928(zseis) WITH vp_low INTO vl_texto2. "Contiene
      CONCATENATE vp_texto vl_texto2 INTO vp_texto SEPARATED BY space.
      "CONCATENATE vp_texto 'Contiene' vp_low INTO vp_texto SEPARATED BY space.
    WHEN 'NP'.
      MESSAGE s929(zseis) WITH vp_low INTO vl_texto2. "No contiene
      CONCATENATE vp_texto vl_texto2 INTO vp_texto SEPARATED BY space.
      "CONCATENATE vp_texto 'No contiene' vp_low INTO vp_texto SEPARATED BY space.
  ENDCASE.

ENDFORM.                    " F_CONVERTIR_SEL_OPT_TEXTO



*&---------------------------------------------------------------------*
*&      Form  f_convertir_sel_opt_texto_ext
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->TP_SEL_OPTION  text
*      -->VP_SIGN        text
*      -->VP_OPTION      text
*      -->VP_LOW         text
*      -->VP_HIGH        text
*      -->VP_TEXTO       text
*----------------------------------------------------------------------*
FORM f_convertir_sel_opt_texto_ext  TABLES tp_sel_option
                                    USING  vp_sign
                                           vp_option
                                           vp_low
                                           vp_high
                                           vp_texto.


  DATA vl_num_lineas TYPE numc4.

  DESCRIBE TABLE tp_sel_option LINES vl_num_lineas.

  IF vl_num_lineas <> 1.
    vp_texto = '*'.
  ELSE.
    PERFORM f_convertir_sel_opt_texto
      USING vp_sign vp_option vp_low vp_high vp_texto.
  ENDIF.

ENDFORM.                    " F_CONVERTIR_SEL_OPT_TEXTO


*&---------------------------------------------------------------------*
*&      Form  F_MODIFICAR_SUBTOTAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->VP_NIVEL   text
*      -->VP_CAMPO   text
*      -->VP_VALOR   text
*----------------------------------------------------------------------*
FORM f_modificar_subtotal  USING    rp_alv TYPE REF TO cl_gui_alv_grid
                                    vp_nivel
                                    vp_fila
                                    vp_campo
                                    vp_valor.




  "Recogemos la tabla del subtotal

  DATA: it_00 TYPE REF TO data.
  DATA: it_01 TYPE REF TO data.
  DATA: it_02 TYPE REF TO data.
  DATA: it_03 TYPE REF TO data.
  DATA: it_04 TYPE REF TO data.
  DATA: it_05 TYPE REF TO data.
  DATA: it_06 TYPE REF TO data.
  DATA: it_07 TYPE REF TO data.
  DATA: it_08 TYPE REF TO data.

  CALL METHOD r_alv->get_subtotals
    IMPORTING
      ep_collect00 = it_00
      ep_collect01 = it_01
      ep_collect02 = it_02
      ep_collect03 = it_03
      ep_collect04 = it_04
      ep_collect05 = it_05
      ep_collect06 = it_06
      ep_collect07 = it_07
      ep_collect08 = it_08.

  "Field-symbols para la tabla, la fila y el campo
  FIELD-SYMBOLS: <ft_tab>   TYPE ANY TABLE,
                 <fs_tab>   TYPE any,
                 <ff_field> TYPE any.


  "Asignamos una tabla u otra dependiendo del nivel seleccionado
  CASE vp_nivel.
    WHEN 0.
      ASSIGN it_00->* TO <ft_tab>.
    WHEN 1.
      ASSIGN it_01->* TO <ft_tab>.
    WHEN 2.
      ASSIGN it_02->* TO <ft_tab>.
    WHEN 3.
      ASSIGN it_03->* TO <ft_tab>.
    WHEN 4.
      ASSIGN it_04->* TO <ft_tab>.
    WHEN 5.
      ASSIGN it_05->* TO <ft_tab>.
    WHEN 6.
      ASSIGN it_06->* TO <ft_tab>.
    WHEN 7.
      ASSIGN it_07->* TO <ft_tab>.
    WHEN 8.
      ASSIGN it_08->* TO <ft_tab>.
  ENDCASE.


  DATA: vl_filas_tabla      TYPE int4,
        vl_filas_a_insertar TYPE int4.
  DATA vl_encontrado.

  CLEAR vl_encontrado.


  "Asignamos el valor
  LOOP AT <ft_tab> ASSIGNING <fs_tab>.
    IF vp_fila = sy-tabix.
      ASSIGN COMPONENT vp_campo OF STRUCTURE <fs_tab> TO <ff_field>.
      <ff_field> = vp_valor.
      vl_encontrado = 'X'.
    ENDIF.
  ENDLOOP.

  "Si no lo ha encontrado, insertamos las filas que faltan hasta llegar a la línea indicada por param.
  IF vl_encontrado IS INITIAL.
    DESCRIBE TABLE <ft_tab> LINES vl_filas_tabla.
    vl_filas_a_insertar = vp_fila - vl_filas_tabla.
    IF vl_filas_a_insertar > 0.
      DO vl_filas_a_insertar TIMES.
        INSERT <fs_tab> INTO TABLE <ft_tab>.
      ENDDO.
    ENDIF.


    "Asignamos el valor
*  READ TABLE <ft_tab> INTO <fs_tab> INDEX vp_fila.
*  IF sy-subrc = 0.
*    ASSIGN COMPONENT vp_campo OF STRUCTURE <fs_tab> TO <ff_field>.
*    <ff_field> = vp_valor.
*  ENDIF.

    LOOP AT <ft_tab> ASSIGNING <fs_tab>.
      IF vp_fila = sy-tabix.
        ASSIGN COMPONENT vp_campo OF STRUCTURE <fs_tab> TO <ff_field>.
        <ff_field> = vp_valor.
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDFORM.                    " F_MODIFICAR_SUBTOTAL


FORM f_cargar_dropdown USING p_handle p_domname.
  "Cargamos drop downs
  DATA: tl_dropdown_alias TYPE lvc_t_dral.
  SELECT *
    INTO TABLE @DATA(tl_dd07t_tipo_def)
    FROM dd07t
    WHERE domname     = @p_domname  AND
          ddlanguage  = @sy-langu.
  LOOP AT tl_dd07t_tipo_def ASSIGNING FIELD-SYMBOL(<fs_dd07t_tipo_def>).
    APPEND INITIAL LINE TO tl_dropdown_alias ASSIGNING FIELD-SYMBOL(<fs_dropdown_alias>).
    <fs_dropdown_alias>-handle    = p_handle.
    <fs_dropdown_alias>-value     = <fs_dd07t_tipo_def>-ddtext.
    <fs_dropdown_alias>-int_value = <fs_dd07t_tipo_def>-domvalue_l.
  ENDLOOP.

  r_alv->set_drop_down_table( it_drop_down_alias  = tl_dropdown_alias ).
ENDFORM.




FORM f_config_objeto_bloqueo USING vp_nombre
                                   tp_config_param TYPE tt_config_params_bloqueo.

  wg_objeto_bloqueo-nombre        = vp_nombre.
  wg_objeto_bloqueo-config_param  = tp_config_param.
  LOOP AT tp_config_param ASSIGNING FIELD-SYMBOL(<fs_config_param>).
    IF <fs_config_param>-nombre_campo IS INITIAL.
      <fs_config_param>-nombre_campo = <fs_config_param>-nombre_param.
    ENDIF.
  ENDLOOP.
ENDFORM.




FORM f_ejecutar_objeto_bloqueo USING vp_dynnr vp_accion
                               CHANGING tp_alv TYPE tt_lin_alv_patron.
  "Acción: ENQUEUE / DEQUEUE
  CHECK wg_objeto_bloqueo-nombre IS NOT INITIAL.
  CHECK vg_solo_consulta = space OR vp_accion = 'DEQUEUE'.  "No permitir ENQUEUE y sólo consulta

  DATA: tl_parametros  TYPE abap_func_parmbind_tab,
        wl_parametro   LIKE LINE OF tl_parametros,
        tl_excepciones TYPE abap_func_excpbind_tab,
        wl_excepcion   LIKE LINE OF tl_excepciones.

  DATA(vl_funcion_bloqueo) = vp_accion && '_' && wg_objeto_bloqueo-nombre.
  wl_excepcion-name = 'FOREIGN_LOCK'.
  wl_excepcion-value = '1'.
  INSERT wl_excepcion INTO TABLE tl_excepciones.

  wl_excepcion-name = 'SYSTEM_FAILURE'.
  wl_excepcion-value = '2'.
  INSERT wl_excepcion INTO TABLE tl_excepciones.

  wl_excepcion-name = 'OTHERS'.
  wl_excepcion-value = '3'.
  INSERT wl_excepcion INTO TABLE tl_excepciones.

  "Primero parámetros que son variables
  LOOP AT wg_objeto_bloqueo-config_param ASSIGNING FIELD-SYMBOL(<fs_config_params>) WHERE es_variable = 'X'.
    ASSIGN (<fs_config_params>-nombre_campo) TO FIELD-SYMBOL(<fs>).
    IF sy-subrc <> 0.
      MESSAGE 'Configuración bloqueo incorrecta' TYPE 'E'. RETURN.
    ENDIF.

    wl_parametro-kind = abap_func_exporting.
    wl_parametro-name = <fs_config_params>-nombre_param.
    GET REFERENCE OF <fs> INTO wl_parametro-value.
    INSERT wl_parametro INTO TABLE tl_parametros.
  ENDLOOP.

  IF tl_parametros IS NOT INITIAL.
    CALL FUNCTION vl_funcion_bloqueo
      PARAMETER-TABLE tl_parametros
      EXCEPTION-TABLE tl_excepciones.
    IF sy-subrc <> 0 AND vp_accion = 'ENQUEUE'.
      MESSAGE 'Elemento bloqueado. Se muestra en modo consulta' TYPE 'I'.
      vg_solo_consulta = 'X'.
    ENDIF.
  ENDIF.


  LOOP AT tp_alv ASSIGNING FIELD-SYMBOL(<fs_alv>).
    CLEAR tl_parametros.
    LOOP AT wg_objeto_bloqueo-config_param ASSIGNING <fs_config_params> WHERE es_variable = space.
      ASSIGN COMPONENT <fs_config_params>-nombre_campo OF STRUCTURE <fs_alv> TO <fs>.
      IF sy-subrc <> 0.
        MESSAGE 'Configuración bloqueo incorrecta' TYPE 'E'. RETURN.
      ENDIF.

      wl_parametro-kind = abap_func_exporting.
      wl_parametro-name = <fs_config_params>-nombre_param.
      GET REFERENCE OF <fs> INTO wl_parametro-value.
      INSERT wl_parametro INTO TABLE tl_parametros.
    ENDLOOP.

    CLEAR <fs_alv>-zzbloqueada.
    CALL FUNCTION vl_funcion_bloqueo
      PARAMETER-TABLE tl_parametros
      EXCEPTION-TABLE tl_excepciones.
    IF sy-subrc <> 0 AND vp_accion = 'ENQUEUE'.
      <fs_alv>-zzbloqueada = 'X'.
    ENDIF.

  ENDLOOP.
ENDFORM.



FORM f_validar_authority_check.
*  IF wg_authority_check-nombre IS INITIAL.
*    vg_permiso = cg_permiso_edicion.
*    RETURN.
*  ENDIF.
*
*  AUTHORITY-CHECK OBJECT wg_authority_check-nombre
*    ID 'ACTVT'                    FIELD '02'
*    ID wg_authority_check-campo FIELD wg_authority_check-valor.
*  IF sy-subrc = 0.
*    vg_permiso = cg_permiso_edicion.
*
*  ELSE.
*    AUTHORITY-CHECK OBJECT wg_authority_check-nombre
*      ID 'ACTVT'                    FIELD '03'
*      ID wg_authority_check-campo FIELD wg_authority_check-valor.
*    IF sy-subrc <> 0.
*      MESSAGE e037(zglactea).
*      LEAVE PROGRAM.
*    ELSE.
*      vg_solo_consulta = 'X'.
*      vg_permiso = cg_permiso_consulta.
*    ENDIF.
*  ENDIF.
ENDFORM.
