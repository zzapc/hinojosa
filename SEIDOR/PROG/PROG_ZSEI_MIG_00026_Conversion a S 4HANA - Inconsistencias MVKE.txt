*---------------------------------------------------------------------*
* Report ZSEI_MIG_00026
*---------------------------------------------------------------------*
REPORT zsei_mig_00026.

TABLES: mara.

DATA:
  lt_filetable TYPE filetable,
  ls_filetable LIKE LINE OF lt_filetable,
  lv_rc        TYPE i.

TYPES:
  BEGIN OF ty_alv,
    matnr   TYPE mvke-matnr,
    vkorg   TYPE mvke-vkorg,
    vtweg   TYPE mvke-vtweg,
    mvgr1   TYPE mvke-mvgr1,
    mvgr2   TYPE mvke-mvgr2,
    mvgr3   TYPE mvke-mvgr3,
    mvgr4   TYPE mvke-mvgr4,
    mvgr5   TYPE mvke-mvgr5,
    mvgr1n  TYPE mvke-mvgr1,
    mvgr2n  TYPE mvke-mvgr2,
    mvgr3n  TYPE mvke-mvgr3,
    mvgr4n  TYPE mvke-mvgr4,
    mvgr5n  TYPE mvke-mvgr5,
    difiere TYPE c,
  END   OF ty_alv.

TYPES:
  BEGIN OF ty_mvke,
    matnr TYPE mvke-matnr,
    vkorg TYPE mvke-vkorg,
    vtweg TYPE mvke-vtweg,
    mvgr1 TYPE mvke-mvgr1,
    mvgr2 TYPE mvke-mvgr2,
    mvgr3 TYPE mvke-mvgr3,
    mvgr4 TYPE mvke-mvgr4,
    mvgr5 TYPE mvke-mvgr5,
  END   OF ty_mvke.

TYPES:
  BEGIN OF ty_file,
    line TYPE string,
  END   OF ty_file.

DATA:
  ls_mvke     TYPE ty_mvke,
  lt_mvke     TYPE STANDARD TABLE OF ty_mvke,
  gt_fieldcat TYPE lvc_t_fcat,
  gs_fieldcat TYPE lvc_s_fcat,
  gs_layout   TYPE lvc_s_layo,
  gt_alv      TYPE STANDARD TABLE OF ty_alv,
  gt_alv_aux  TYPE STANDARD TABLE OF ty_alv,
  lt_file     TYPE TABLE OF string,
  ls_file     TYPE string,
  gs_alv      TYPE ty_alv,
  gx_variant  TYPE disvariant,
  g_variant   TYPE disvariant,
  g_repid     TYPE sy-repid,
  g_save      TYPE c VALUE 'A',
  g_exit      TYPE c.

FIELD-SYMBOLS:
 <fs_alv>  TYPE ty_alv.

SELECTION-SCREEN BEGIN OF BLOCK va1 WITH FRAME TITLE TEXT-001.
  PARAMETERS: p_upl  TYPE c AS CHECKBOX.
  PARAMETERS: p_down TYPE c AS CHECKBOX.
  PARAMETERS: p_upd  TYPE c AS CHECKBOX.
SELECTION-SCREEN END OF BLOCK va1.

SELECTION-SCREEN BEGIN OF BLOCK va2 WITH FRAME TITLE TEXT-001.
  SELECT-OPTIONS: s_matnr FOR mara-matnr.
  PARAMETERS: p_file1  LIKE file_table-filename.
SELECTION-SCREEN END OF BLOCK va2.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file1.
  PERFORM file_open CHANGING p_file1.

START-OF-SELECTION.

  IF p_upl IS NOT INITIAL AND p_down IS NOT INITIAL.

*   Nothing to do

  ELSE.

    IF p_upl IS NOT INITIAL.
      PERFORM upload_csv TABLES lt_file USING p_file1 ''.
    ENDIF.

    PERFORM get_alv_data.

    IF p_upd IS NOT INITIAL.
      PERFORM act_mvke.
    ELSE.
      PERFORM create_and_display_alv.
    ENDIF.

  ENDIF.

*---------------------------------------------------------------------*
* Form CREATE_AND_DISPLAY_ALV
*---------------------------------------------------------------------*
FORM create_and_display_alv.

  PERFORM alv_layout.
  PERFORM alv_field_catalog.
  PERFORM alv_display.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  ALV_FIELD_CATALOG
*---------------------------------------------------------------------*
FORM alv_field_catalog.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MATNR'.
  gs_fieldcat-tabname   = 'MVKE'.
  gs_fieldcat-ref_table = 'MVKE'.
  gs_fieldcat-ref_field = 'MATNR'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'VKORG'.
  gs_fieldcat-tabname   = 'MVKE'.
  gs_fieldcat-ref_table = 'MVKE'.
  gs_fieldcat-ref_field = 'VKORG'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'VTWEG'.
  gs_fieldcat-tabname   = 'MVKE'.
  gs_fieldcat-ref_table = 'MVKE'.
  gs_fieldcat-ref_field = 'VTWEG'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MVGR1'.
  gs_fieldcat-tabname   = 'MVKE'.
  gs_fieldcat-ref_table = 'MVKE'.
  gs_fieldcat-ref_field = 'MVGR1'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MVGR2'.
  gs_fieldcat-tabname   = 'MVKE'.
  gs_fieldcat-ref_table = 'MVKE'.
  gs_fieldcat-ref_field = 'MVGR2'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MVGR3'.
  gs_fieldcat-tabname   = 'MVKE'.
  gs_fieldcat-ref_table = 'MVKE'.
  gs_fieldcat-ref_field = 'MVGR3'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MVGR4'.
  gs_fieldcat-tabname   = 'MVKE'.
  gs_fieldcat-ref_table = 'MVKE'.
  gs_fieldcat-ref_field = 'MVGR4'.
  APPEND gs_fieldcat TO gt_fieldcat.

  CLEAR: gs_fieldcat.
  gs_fieldcat-fieldname = 'MVGR5'.
  gs_fieldcat-tabname   = 'MVKE'.
  gs_fieldcat-ref_table = 'MVKE'.
  gs_fieldcat-ref_field = 'MVGR5'.
  APPEND gs_fieldcat TO gt_fieldcat.

  IF p_upl IS NOT INITIAL.

    CLEAR: gs_fieldcat.
    gs_fieldcat-fieldname = 'MVGR1N'.
    gs_fieldcat-ref_table = 'MVKE'.
    gs_fieldcat-ref_field = 'MVGR1'.
    APPEND gs_fieldcat TO gt_fieldcat.

    CLEAR: gs_fieldcat.
    gs_fieldcat-fieldname = 'MVGR2N'.
    gs_fieldcat-ref_table = 'MVKE'.
    gs_fieldcat-ref_field = 'MVGR2'.
    APPEND gs_fieldcat TO gt_fieldcat.

    CLEAR: gs_fieldcat.
    gs_fieldcat-fieldname = 'MVGR3N'.
    gs_fieldcat-ref_table = 'MVKE'.
    gs_fieldcat-ref_field = 'MVGR3'.
    APPEND gs_fieldcat TO gt_fieldcat.

    CLEAR: gs_fieldcat.
    gs_fieldcat-fieldname = 'MVGR4N'.
    gs_fieldcat-ref_table = 'MVKE'.
    gs_fieldcat-ref_field = 'MVGR4'.
    APPEND gs_fieldcat TO gt_fieldcat.

    CLEAR: gs_fieldcat.
    gs_fieldcat-fieldname = 'MVGR5N'.

    gs_fieldcat-ref_table = 'MVKE'.
    gs_fieldcat-ref_field = 'MVGR5'.
    APPEND gs_fieldcat TO gt_fieldcat.

    CLEAR: gs_fieldcat.
    gs_fieldcat-fieldname = 'DIFIERE'.
    gs_fieldcat-scrtext_s = 'Difiere'.
    gs_fieldcat-coltext   = 'Difiere'.
    gs_fieldcat-seltext   = 'Difiere'.
    APPEND gs_fieldcat TO gt_fieldcat.

  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  ALV_DISPLAY
*---------------------------------------------------------------------*
FORM alv_display.

  g_repid = sy-cprog.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      i_callback_program      = g_repid
      i_callback_user_command = 'USER_COMMAND'
      is_layout_lvc           = gs_layout
      i_default               = 'X'
      i_save                  = 'A'
      it_fieldcat_lvc         = gt_fieldcat
      is_variant              = g_variant
    TABLES
      t_outtab                = gt_alv[]
    EXCEPTIONS
      program_error           = 1
      OTHERS                  = 2.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  user_command
*---------------------------------------------------------------------*
FORM user_command USING l_ucomm     TYPE sy-ucomm
                        l_selfield  TYPE slis_selfield.

  CASE l_ucomm.

    WHEN '&IC1'.

  ENDCASE.

  l_selfield-refresh    = 'X'.
  l_selfield-col_stable = 'X'.
  l_selfield-row_stable = 'X'.

ENDFORM.

*---------------------------------------------------------------------*
*      Form  ALV_LAYOUT
*---------------------------------------------------------------------*
FORM alv_layout.

  gs_layout-zebra      = 'X'.
  gs_layout-sel_mode   = 'A'.
  gs_layout-col_opt    = 'X'.
  gs_layout-cwidth_opt = abap_true.

ENDFORM.

*---------------------------------------------------------------------*
* Form get_alv_data
*---------------------------------------------------------------------*
FORM get_alv_data.

  DATA:
    current_record TYPE sy-tabix,
    total_records  TYPE sy-tabix.

  REFRESH: gt_alv_aux.

  SELECT matnr vkorg vtweg mvgr1 mvgr2 mvgr3 mvgr4 mvgr5
    INTO CORRESPONDING FIELDS OF TABLE gt_alv
    FROM mvke
   WHERE matnr IN s_matnr.

  IF p_upl IS NOT INITIAL.

    DESCRIBE TABLE gt_alv LINES total_records.

    SORT lt_mvke BY matnr vkorg vtweg.

    LOOP AT gt_alv ASSIGNING <fs_alv>. "Proceden de PRODUCTIVO

      current_record = sy-tabix.

      cl_progress_indicator=>progress_indicate(
          i_text = |Processing: { current_record }/{ total_records }|
          i_output_immediately = abap_false ).

      CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
        EXPORTING
          input  = <fs_alv>-matnr
        IMPORTING
          output = <fs_alv>-matnr.

      READ TABLE lt_mvke INTO ls_mvke WITH KEY matnr = <fs_alv>-matnr "Proceden de SB1
                                               vkorg = <fs_alv>-vkorg
                                               vtweg = <fs_alv>-vtweg BINARY SEARCH.
      IF sy-subrc EQ 0.

        DATA(lv_ind_bor) = sy-tabix.

        <fs_alv>-mvgr1n = ls_mvke-mvgr1.
        <fs_alv>-mvgr2n = ls_mvke-mvgr2.
        <fs_alv>-mvgr3n = ls_mvke-mvgr3.
        <fs_alv>-mvgr4n = ls_mvke-mvgr4.
        <fs_alv>-mvgr5n = ls_mvke-mvgr5.

        IF <fs_alv>-mvgr1n NE <fs_alv>-mvgr1.
          <fs_alv>-difiere = 'X'.
        ENDIF.
        IF <fs_alv>-mvgr2n NE <fs_alv>-mvgr2.
          <fs_alv>-difiere = 'X'.
        ENDIF.
        IF <fs_alv>-mvgr3n NE <fs_alv>-mvgr3.
          <fs_alv>-difiere = 'X'.
        ENDIF.
        IF <fs_alv>-mvgr4n NE <fs_alv>-mvgr4.
          <fs_alv>-difiere = 'X'.
        ENDIF.
        IF <fs_alv>-mvgr5n NE <fs_alv>-mvgr5.
          <fs_alv>-difiere = 'X'.
        ENDIF.

        DELETE lt_mvke INDEX lv_ind_bor.

      ELSE.

        <fs_alv>-difiere = 'S'. "Sólo existe en SBX

      ENDIF.

    ENDLOOP.

    LOOP AT lt_mvke INTO ls_mvke.
      APPEND INITIAL LINE TO gt_alv_aux ASSIGNING FIELD-SYMBOL(<fs_alv_aux>).
      <fs_alv_aux>-matnr   = ls_mvke-matnr.
      <fs_alv_aux>-vkorg   = ls_mvke-vkorg.
      <fs_alv_aux>-vtweg   = ls_mvke-vtweg.
      <fs_alv_aux>-mvgr1n  = ls_mvke-mvgr1.
      <fs_alv_aux>-mvgr2n  = ls_mvke-mvgr2.
      <fs_alv_aux>-mvgr3n  = ls_mvke-mvgr3.
      <fs_alv_aux>-mvgr4n  = ls_mvke-mvgr4.
      <fs_alv_aux>-mvgr5n  = ls_mvke-mvgr5.
      <fs_alv_aux>-difiere = 'P'. "Sólo exite en PRODUCTION
    ENDLOOP.
    APPEND LINES OF gt_alv_aux TO gt_alv.

  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
* Form upload_csv
*---------------------------------------------------------------------*
FORM upload_csv TABLES lt_file USING p_file p_tipo.

  DATA:
    lt_raw     TYPE truxs_t_text_data,
    i_filename TYPE string,
    lo_csv     TYPE REF TO cl_rsda_csv_converter.

  i_filename = p_file.

  cl_gui_frontend_services=>gui_upload(
    EXPORTING
      filename                = i_filename
      filetype                = 'ASC'           " File Type (ASCII, Binary)
    CHANGING
      data_tab                = lt_file[]
    EXCEPTIONS
      file_open_error         = 1               " File does not exist and cannot be opened
      file_read_error         = 2               " Error when reading file
      no_batch                = 3               " Cannot execute front-end function in background
      gui_refuse_filetransfer = 4               " Incorrect front end or error on front end
      invalid_type            = 5               " Incorrect parameter FILETYPE
      no_authority            = 6               " No upload authorization
      unknown_error           = 7               " Unknown error
      bad_data_format         = 8               " Cannot Interpret Data in File
      header_not_allowed      = 9               " Invalid header
      separator_not_allowed   = 10              " Invalid separator
      header_too_long         = 11              " Header information currently restricted to 1023 bytes
      unknown_dp_error        = 12              " Error when calling data provider
      access_denied           = 13              " Access to file denied.
      dp_out_of_memory        = 14              " Not enough memory in data provider
      disk_full               = 15              " Storage medium is full.
      dp_timeout              = 16              " Data provider timeout
      not_supported_by_gui    = 17              " GUI does not support this
      error_no_gui            = 18              " GUI not available
      OTHERS                  = 19 ).

  cl_rsda_csv_converter=>create(
    EXPORTING
      i_separator      = ';'
      i_line_separator = cl_abap_char_utilities=>newline " CHAR
  RECEIVING
      r_r_conv         = lo_csv ).

  DELETE lt_file INDEX 1. " Fuera cabeceras!

  LOOP AT lt_file INTO ls_file.

    lo_csv->csv_to_structure(
      EXPORTING
        i_data   =  ls_file
      IMPORTING
        e_s_data =  ls_mvke ).

    APPEND ls_mvke TO lt_mvke.

  ENDLOOP.

ENDFORM.

*---------------------------------------------------------------------*
* Form file_open
*---------------------------------------------------------------------*
FORM file_open CHANGING p_file.

  cl_gui_frontend_services=>file_open_dialog(
    EXPORTING
      window_title            = 'Seleccione el fichero'
    CHANGING
      file_table              = lt_filetable
      rc                      = lv_rc
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5 ).
  IF sy-subrc EQ 0.
    IF lv_rc EQ 1.
      READ TABLE lt_filetable INTO ls_filetable INDEX 1.
      IF sy-subrc EQ 0.
        p_file = ls_filetable-filename.
      ENDIF.
    ENDIF.
  ENDIF.

ENDFORM.

*---------------------------------------------------------------------*
* Form act_mvke
*---------------------------------------------------------------------*
FORM act_mvke.

  DATA:
    current_record TYPE sy-tabix,
    total_records  TYPE sy-tabix.

  DESCRIBE TABLE gt_alv LINES total_records.

  LOOP AT gt_alv ASSIGNING <fs_alv> WHERE difiere EQ 'X'.

    current_record = sy-tabix.

    CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
      EXPORTING
        input        = <fs_alv>-matnr
      IMPORTING
        output       = <fs_alv>-matnr
      EXCEPTIONS
        length_error = 1
        OTHERS       = 2.

    UPDATE mvke SET mvgr1 = <fs_alv>-mvgr1n
                    mvgr2 = <fs_alv>-mvgr2n
                    mvgr3 = <fs_alv>-mvgr3n
                    mvgr4 = <fs_alv>-mvgr4n
                    mvgr5 = <fs_alv>-mvgr5n
     WHERE matnr EQ <fs_alv>-matnr
       AND vkorg EQ <fs_alv>-vkorg
       AND vtweg EQ <fs_alv>-vtweg.

    COMMIT WORK AND WAIT.

    cl_progress_indicator=>progress_indicate(
        i_text = |Processing: { current_record }/{ total_records }|
        i_output_immediately = abap_false ).

  ENDLOOP.

ENDFORM.
