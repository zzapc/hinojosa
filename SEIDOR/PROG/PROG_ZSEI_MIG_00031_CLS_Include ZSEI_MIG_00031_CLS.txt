*&---------------------------------------------------------------------*
*& Include          ZSEI_MIG_00031_CLS
*&---------------------------------------------------------------------*
CLASS lcl_process DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS: get_filename RETURNING VALUE(filename) TYPE rlgrap-filename.

    METHODS: get_domain_data,
      get_file_data,
      check_data,
      display_data,
      handle_toolbar FOR EVENT toolbar OF cl_gui_alv_grid
        IMPORTING e_object e_interactive,
      handle_user_command FOR EVENT user_command OF cl_gui_alv_grid
        IMPORTING e_ucomm,
      handle_data_changed FOR EVENT data_changed OF cl_gui_alv_grid
        IMPORTING er_data_changed.

  PRIVATE SECTION.
    DATA: t_domains       TYPE TABLE OF ty_domains,
          t_fields        TYPE lvc_t_fcat,
          t_data          TYPE REF TO data,
          t_correct       TYPE REF TO data,
          t_errors        TYPE REF TO data,
          t_output_fields TYPE lvc_t_fcat.

    METHODS: function_exclusion RETURNING VALUE(r_functions) TYPE ui_functions,
      add_button IMPORTING i_function TYPE string
                           i_icon     TYPE iconname
                           i_text     TYPE string
                           i_text_d   TYPE string
                 CHANGING  c_toolbar  TYPE ttb_button,
      save_data IMPORTING i_data          TYPE REF TO data
                RETURNING VALUE(es_error) TYPE abap_bool,
      additional_checks IMPORTING i_fieldname     TYPE fieldname
                                  i_fieldvalue    TYPE string
                                  i_matnr         TYPE mara-matnr
                                  i_werks         TYPE marc-werks
                                  i_fieldtype     TYPE inttype
                        RETURNING VALUE(rs_error) TYPE ty_error,
      check_keyfield IMPORTING is_line         TYPE any
                               is_domain       TYPE ty_domains
                     RETURNING VALUE(rs_error) TYPE ty_error.
ENDCLASS.




CLASS lcl_process IMPLEMENTATION.
  METHOD get_filename.
    DATA: lt_filetable TYPE filetable,
          lv_rc        TYPE i.

    cl_gui_frontend_services=>file_open_dialog(
      CHANGING
        file_table              = lt_filetable
        rc                      = lv_rc
      EXCEPTIONS
        file_open_dialog_failed = 1
        cntl_error              = 2
        error_no_gui            = 3
        not_supported_by_gui    = 4
        OTHERS                  = 5 ).
    IF sy-subrc EQ 0.
      CHECK lt_filetable IS NOT INITIAL.
      filename = lt_filetable[ 1 ]-filename.
    ENDIF.
  ENDMETHOD.

  METHOD get_domain_data.
    DATA: lr_ref  TYPE REF TO data.

    FIELD-SYMBOLS: <fs_table> TYPE STANDARD TABLE.

*    CASE abap_true.
*      WHEN p_clt_g.
*        CREATE DATA: lr_ref    TYPE ty_kna1,
*                     t_data    TYPE TABLE OF ty_kna1,
*                     t_correct TYPE TABLE OF ty_kna1,
*                     t_errors  TYPE TABLE OF ty_kna1.
*      WHEN p_clt_v.
*        CREATE DATA: lr_ref    TYPE ty_knvv,
*                     t_data    TYPE TABLE OF ty_knvv,
*                     t_correct TYPE TABLE OF ty_knvv,
*                     t_errors  TYPE TABLE OF ty_knvv.
*      WHEN p_mat_g.
*        CREATE DATA: lr_ref    TYPE ty_mara,
*                     t_data    TYPE TABLE OF ty_mara,
*                     t_correct TYPE TABLE OF ty_mara,
*                     t_errors  TYPE TABLE OF ty_mara.
*      WHEN p_mat_c.
*        CREATE DATA: lr_ref    TYPE ty_marc,
*                     t_data    TYPE TABLE OF ty_marc,
*                     t_correct TYPE TABLE OF ty_marc,
*                     t_errors  TYPE TABLE OF ty_marc.
*      WHEN p_pro_g.
*        CREATE DATA: lr_ref    TYPE ty_lfa1,
*                     t_data    TYPE TABLE OF ty_lfa1,
*                     t_correct TYPE TABLE OF ty_lfa1,
*                     t_errors  TYPE TABLE OF ty_lfa1.
*      WHEN p_pro_s.
*        CREATE DATA: lr_ref    TYPE ty_lfb1,
*                     t_data    TYPE TABLE OF ty_lfb1,
*                     t_correct TYPE TABLE OF ty_lfb1,
*                     t_errors  TYPE TABLE OF ty_lfb1.
*      WHEN p_info.
*        CREATE DATA: lr_ref    TYPE ty_eine,
*                     t_data    TYPE TABLE OF ty_eine,
*                     t_correct TYPE TABLE OF ty_eine,
*                     t_errors  TYPE TABLE OF ty_eine.
*    ENDCASE.
*
    CREATE DATA: lr_ref    TYPE ty_cobk,
                         t_data    TYPE TABLE OF ty_cobk,
                         t_correct TYPE TABLE OF ty_cobk,
                         t_errors  TYPE TABLE OF ty_cobk.

    DATA(lo_desc) = CAST cl_abap_structdescr(
      cl_abap_typedescr=>describe_by_data_ref( p_data_ref = lr_ref ) ).

    DATA(lt_fields) = cl_salv_data_descr=>read_structdescr( lo_desc ).

    LOOP AT lt_fields ASSIGNING FIELD-SYMBOL(<fs_field>).
      APPEND INITIAL LINE TO t_fields ASSIGNING FIELD-SYMBOL(<fs_global>).
      <fs_global> = CORRESPONDING #( <fs_field> ).
*      CASE <fs_field>-fieldname.
*        WHEN 'KUNNR' OR 'VKORG' OR 'VTWEG' OR 'SPART' OR 'MATNR'
*          OR 'WERKS' OR 'LIFNR' OR 'INFNR' OR 'EKORG' OR 'ESOKZ'
*          OR 'WERKS' OR 'BUKRS'.
*          <fs_global>-key = abap_true.
      APPEND INITIAL LINE TO t_output_fields
        ASSIGNING FIELD-SYMBOL(<fs_output_field>).
      <fs_output_field> = CORRESPONDING #( <fs_field> ).
*        WHEN OTHERS.
*      ENDCASE.
    ENDLOOP.

    DATA(lt_fields_aux) = lt_fields.
*    DELETE lt_fields_aux WHERE fieldname(2) NE 'ZZ'. "Sólo los campos de ampliación

    SELECT a~domname, a~entitytab FROM dd01l AS a
      INNER JOIN @lt_fields_aux AS b
        ON b~domname EQ a~domname
      INTO TABLE @DATA(lt_datatables).

    LOOP AT lt_fields_aux ASSIGNING <fs_field>.
      READ TABLE lt_datatables ASSIGNING FIELD-SYMBOL(<fs_datatable>)
        WITH KEY domname = <fs_field>-domname.
      CHECK sy-subrc EQ 0.
      CHECK NOT line_exists( t_domains[ domname = <fs_field>-domname ] ). "evitar repetidos

      APPEND INITIAL LINE TO t_domains ASSIGNING FIELD-SYMBOL(<fs_domain>).
      <fs_domain>-domname = <fs_field>-domname.
      CHECK <fs_datatable>-entitytab IS NOT INITIAL.

      lo_desc = CAST cl_abap_structdescr(
        cl_abap_typedescr=>describe_by_name( <fs_datatable>-entitytab ) ).
      lt_fields = cl_salv_data_descr=>read_structdescr( lo_desc ).

      LOOP AT lt_fields ASSIGNING FIELD-SYMBOL(<fs_field_aux>).
        IF <fs_field_aux>-keyflag IS NOT INITIAL
          AND <fs_field_aux>-fieldname NE 'MANDT'.
          <fs_domain>-keyfield = <fs_field_aux>-fieldname.
          <fs_domain>-datatab  = <fs_datatable>-entitytab.
        ENDIF.
        IF <fs_field_aux>-fieldname EQ 'IS_DISABLED'.
          DATA(lv_is_disabled) = abap_true.
        ENDIF.
      ENDLOOP.

      CHECK <fs_field>-fieldname(2) EQ 'ZZ'. "sólo campos de ampliación
      CREATE DATA <fs_domain>-data TYPE TABLE OF (<fs_datatable>-entitytab).
      ASSIGN <fs_domain>-data->* TO <fs_table>.

      IF lv_is_disabled IS NOT INITIAL.
        DATA(lv_where) = |is_disabled IS INITIAL|.
        SELECT * FROM (<fs_datatable>-entitytab)
          WHERE (lv_where)
          INTO TABLE @<fs_table>.
      ELSE.
        SELECT * FROM (<fs_datatable>-entitytab)
          INTO TABLE @<fs_table>.
      ENDIF.
      CLEAR lv_is_disabled.
    ENDLOOP.

    FREE: lo_desc, lr_ref.
    CLEAR lt_fields.

    CREATE DATA lr_ref TYPE ty_output.

    lo_desc = CAST cl_abap_structdescr(
      cl_abap_typedescr=>describe_by_data_ref( p_data_ref = lr_ref ) ).

    lt_fields = cl_salv_data_descr=>read_structdescr( lo_desc ).

*    LOOP AT lt_fields ASSIGNING <fs_field>.
*      APPEND INITIAL LINE TO t_output_fields ASSIGNING <fs_output_field>.
*      <fs_output_field> = CORRESPONDING #( <fs_field> ).
*    ENDLOOP.

    cl_alv_table_create=>create_dynamic_table(
      EXPORTING
        i_style_table   = abap_true
        it_fieldcatalog = t_output_fields
      IMPORTING
        ep_table        = gt_output
      EXCEPTIONS
        generate_subpool_dir_full = 1
        OTHERS                    = 2 ).
  ENDMETHOD.

  METHOD get_file_data.
    DATA: lt_fcat TYPE lvc_t_fcat,
          lt_data TYPE REF TO data,
          lt_raw  TYPE truxs_t_text_data.

    FIELD-SYMBOLS: <fs_table>    TYPE STANDARD TABLE,
                   <fs_global_t> TYPE STANDARD TABLE.

    LOOP AT t_fields ASSIGNING FIELD-SYMBOL(<fs_field>).
      APPEND INITIAL LINE TO lt_fcat ASSIGNING FIELD-SYMBOL(<fs_fcat>).
      <fs_fcat> = CORRESPONDING #( <fs_field> ).
      <fs_fcat>-datatype = 'SSTR'.
      <fs_fcat>-tabname = 'LT_DATA'.
      <fs_fcat>-inttype = 'C'.
      CLEAR: <fs_fcat>-domname.
    ENDLOOP.

    cl_alv_table_create=>create_dynamic_table(
      EXPORTING
        i_style_table   = abap_true
        it_fieldcatalog = lt_fcat
      IMPORTING
        ep_table        = lt_data
      EXCEPTIONS
        generate_subpool_dir_full = 1
        OTHERS                    = 2 ).

    ASSIGN lt_data->* TO <fs_table>.

    CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
      EXPORTING
        i_line_header        = p_header
        i_tab_raw_data       = lt_raw
        i_filename           = p_file
      TABLES
        i_tab_converted_data = <fs_table>
      EXCEPTIONS
        conversion_failed    = 1
        OTHERS               = 2.

    CHECK sy-subrc EQ 0.

    ASSIGN t_data->* TO <fs_global_t>.

    LOOP AT <fs_table> ASSIGNING FIELD-SYMBOL(<fs_line>).
      APPEND INITIAL LINE TO <fs_global_t> ASSIGNING FIELD-SYMBOL(<fs_global>).
      LOOP AT t_fields ASSIGNING <fs_field>.
        ASSIGN COMPONENT <fs_field>-fieldname OF STRUCTURE <fs_line>
          TO FIELD-SYMBOL(<fs_from>).
        CHECK sy-subrc EQ 0.
        ASSIGN COMPONENT <fs_field>-fieldname OF STRUCTURE <fs_global>
          TO FIELD-SYMBOL(<fs_to>).
        CHECK sy-subrc EQ 0.
        IF <fs_field>-inttype EQ 'T'.
          REPLACE ALL OCCURRENCES OF ':' IN <fs_from> WITH space.
          CONDENSE <fs_from> NO-GAPS.
        ENDIF.
        <fs_to> = CONV #( <fs_from> ).
        CHECK <fs_field>-convexit IS NOT INITIAL.
*        IF <fs_field>-fieldname NE 'MATNR'.
*          <fs_to> = |{ <fs_to> ALPHA = IN }|.
*        ENDIF.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.

  METHOD check_data.

    TYPES: BEGIN OF lty_position,
             belnr    TYPE belnr_d,
             co_belnr TYPE co_belnr,
             co_buzei TYPE co_buzei,
           END OF lty_position.

    FIELD-SYMBOLS: <fs_table>    TYPE STANDARD TABLE,
                   <fs_valuetab> TYPE STANDARD TABLE,
                   <fs_correct>  TYPE STANDARD TABLE,
                   <fs_errors>   TYPE STANDARD TABLE,
                   <fs_output_t> TYPE STANDARD TABLE,
                   <fs_position> TYPE STANDARD TABLE.

    DATA: lt_position TYPE STANDARD TABLE OF lty_position,
          wa_position TYPE lty_position,
          lv_belnr    TYPE co_belnr.

    ASSIGN: t_data->* TO <fs_table>,
            t_correct->* TO <fs_correct>,
            t_errors->* TO <fs_errors>,
            gt_output->* TO <fs_output_t>.

    LOOP AT <fs_table> ASSIGNING FIELD-SYMBOL(<fs_line>).
      LOOP AT t_fields ASSIGNING FIELD-SYMBOL(<fs_field>).
        ASSIGN COMPONENT <fs_field>-fieldname OF STRUCTURE <fs_line>
          TO FIELD-SYMBOL(<fs_value>).
        IF <fs_value> EQ space AND <fs_field>-inttype EQ 'T'.
          <fs_value> = '000000'.
        ENDIF.
        IF <fs_field>-inttype EQ 'T' AND strlen( <fs_value> ) LT 6.
          <fs_value> = <fs_value> && '00'.
        ENDIF.
        CHECK <fs_value> NE space.
        READ TABLE t_domains ASSIGNING FIELD-SYMBOL(<fs_domain>)
          WITH KEY domname = <fs_field>-domname.
*        IF sy-subrc EQ 0.
*          ASSIGN COMPONENT 'MATNR' OF STRUCTURE <fs_line>
*              TO FIELD-SYMBOL(<fs_aux>).
*          IF sy-subrc EQ 0.
*            DATA(lv_matnr) = CONV mara-matnr( <fs_aux> ).
*          ENDIF.
*          ASSIGN COMPONENT 'WERKS' OF STRUCTURE <fs_line>
*            TO <fs_aux>.
*          IF sy-subrc EQ 0.
*            DATA(lv_werks) = CONV marc-werks( <fs_aux> ).
*          ENDIF.
*
*          DATA(ls_error) = additional_checks(
*            EXPORTING
*              i_fieldname  = <fs_field>-fieldname
*              i_fieldvalue = CONV #( <fs_value> )
*              i_matnr      = lv_matnr
*              i_werks      = lv_werks
*              i_fieldtype  = <fs_field>-inttype ).
*
*          CLEAR: lv_matnr, lv_werks.
*
*          IF <fs_domain>-data IS NOT INITIAL.
*            ASSIGN <fs_domain>-data->* TO <fs_valuetab>.
*            IF sy-subrc EQ 0.
*              DATA(lv_where_cond) = to_lower( <fs_domain>-keyfield ) && | EQ <fs_value>|.
*
*              LOOP AT <fs_valuetab> ASSIGNING FIELD-SYMBOL(<fs_val>)
*                WHERE (lv_where_cond).
*                EXIT.
*              ENDLOOP.
*            ENDIF.
*          ELSEIF <fs_domain>-data IS INITIAL AND <fs_domain>-keyfield IS NOT INITIAL.
*            ls_error = check_keyfield(
*              EXPORTING
*                is_line   = <fs_line>
*                is_domain = <fs_domain> ).
*          ENDIF.
*          IF sy-subrc NE 0 OR ls_error-error IS NOT INITIAL.
        DATA(lv_err) = abap_true.
        APPEND <fs_line> TO <fs_errors>.
        APPEND INITIAL LINE TO <fs_output_t> ASSIGNING FIELD-SYMBOL(<fs_output>).
        LOOP AT t_output_fields ASSIGNING FIELD-SYMBOL(<fs_output_field>).
          ASSIGN COMPONENT <fs_output_field>-fieldname OF STRUCTURE <fs_output>
            TO FIELD-SYMBOL(<fs_to>).
          CHECK sy-subrc EQ 0.
*              CASE <fs_output_field>-fieldname.
*                WHEN 'VALUE' OR 'NEWVALUE'.
*                  CASE <fs_field>-inttype.
*                    WHEN 'T'.
*                      <fs_to> = <fs_value>(2) && ':' &&
*                                <fs_value>+2(2) && ':' &&
*                                <fs_value>+4(2).
*                    WHEN  OTHERS.
*                      <fs_to> = <fs_value>.
*                  ENDCASE.
*                WHEN 'FIELDNAME'.
*                  <fs_to> = <fs_field>-fieldname.
*                WHEN 'MESSAGE'.
**                  IF ls_error-message IS NOT INITIAL.
**                    <fs_to> = ls_error-message.
**                  ELSE.
**                    <fs_to> = TEXT-m01 && | | && <fs_value> && | | &&
**                              TEXT-m02 && | | && <fs_field>-fieldname.
**                  ENDIF.
*                WHEN OTHERS.
          ASSIGN COMPONENT <fs_output_field>-fieldname OF STRUCTURE <fs_line>
            TO FIELD-SYMBOL(<fs_from>).
          CHECK sy-subrc EQ 0.
          <fs_to> = <fs_from>.
*              ENDCASE.

          CASE <fs_output_field>-fieldname.
            WHEN 'BELNR'.
              CLEAR lv_belnr.
              lv_belnr = <fs_from>.
            WHEN 'BUZEI'.
              SELECT belnr co_belnr co_buzei
                INTO TABLE lt_position
                FROM acdoca
                WHERE co_belnr = lv_belnr.
              SORT lt_position BY belnr.
              LOOP AT lt_position INTO wa_position.

                ASSIGN COMPONENT 'BELNR_D' OF STRUCTURE <fs_output>
                  TO FIELD-SYMBOL(<fs_belnr_d>).
                CHECK sy-subrc EQ 0.
                <fs_belnr_d> = wa_position-belnr.

                ASSIGN COMPONENT 'BUZEI' OF STRUCTURE <fs_output>
                  TO FIELD-SYMBOL(<fs_buzei>).
                CHECK sy-subrc EQ 0.
                <fs_buzei> = wa_position-co_buzei.

                AT END OF co_buzei.
                  APPEND <fs_output> TO <fs_output_t>.
                ENDAT.
              ENDLOOP.
            WHEN OTHERS.
          ENDCASE.

        ENDLOOP.
*          ENDIF.
*        ENDIF.
*        CLEAR ls_error.

      ENDLOOP.
      IF lv_err IS INITIAL.
        APPEND <fs_line> TO <fs_correct>.
      ENDIF.
      CLEAR: lv_err.
    ENDLOOP.


    SORT <fs_output_t>.
    DELETE ADJACENT DUPLICATES FROM <fs_output_t>.

    IF <fs_correct> IS NOT INITIAL.
*      me->save_data( t_correct ).

*      MESSAGE TEXT-s01 TYPE 'I'.
    ENDIF.
  ENDMETHOD.

  METHOD display_data.
    DATA: lr_ref      TYPE REF TO data,
          lt_fieldcat TYPE lvc_t_fcat.

    FIELD-SYMBOLS: <fs_output> TYPE STANDARD TABLE.

    IF go_alv IS INITIAL.
      go_alv = NEW cl_gui_alv_grid( i_parent = cl_gui_container=>default_screen ).

      ASSIGN gt_output->* TO <fs_output>.

      DATA(lt_fields) = t_output_fields.

      LOOP AT lt_fields ASSIGNING FIELD-SYMBOL(<fs_field>).
        APPEND INITIAL LINE TO lt_fieldcat ASSIGNING FIELD-SYMBOL(<fs_fieldcat>).
        <fs_fieldcat> = CORRESPONDING #( <fs_field> ).
*
*        CASE <fs_field>-fieldname.
*          WHEN 'FIELDNAME'.
*            <fs_fieldcat>-reptext = TEXT-t01.
*          WHEN 'VALUE'.
*            <fs_fieldcat>-reptext = TEXT-t02.
*          WHEN 'NEWVALUE'.
*            <fs_fieldcat>-reptext = TEXT-t03.
*            <fs_fieldcat>-edit = abap_true.
*          WHEN 'MESSAGE'.
*            <fs_fieldcat>-reptext = TEXT-t04.
*          WHEN OTHERS.
*        ENDCASE.
      ENDLOOP.

      DATA(ls_layout) = VALUE lvc_s_layo( zebra      = abap_true
                                          col_opt    = abap_true ).
*                                          cwidth_opt = abap_true ).

      DATA(ls_variant) = VALUE disvariant( report = sy-repid ).

      DATA(lt_exclude) = function_exclusion( ).

      SET HANDLER: me->handle_toolbar FOR go_alv,
                   me->handle_user_command FOR go_alv,
                   me->handle_data_changed FOR go_alv.

      go_alv->set_table_for_first_display(
        EXPORTING
          is_variant           = ls_variant
          i_save               = abap_true
          is_layout            = ls_layout
          it_toolbar_excluding = lt_exclude
        CHANGING
          it_outtab            = <fs_output>
          it_fieldcatalog      = lt_fieldcat ).

      go_alv->register_edit_event( cl_gui_alv_grid=>mc_evt_modified ).
      go_alv->register_edit_event( cl_gui_alv_grid=>mc_evt_enter ).

    ELSE.
      go_alv->refresh_table_display( ).
    ENDIF.
  ENDMETHOD.

  METHOD function_exclusion.
    r_functions = VALUE #(
      ( cl_gui_alv_grid=>mc_fc_loc_append_row )
      ( cl_gui_alv_grid=>mc_fc_loc_insert_row )
      ( cl_gui_alv_grid=>mc_fc_loc_delete_row )
      ( cl_gui_alv_grid=>mc_fc_loc_copy )
      ( cl_gui_alv_grid=>mc_fc_loc_copy_row )
      ( cl_gui_alv_grid=>mc_fc_check )
      ( cl_gui_alv_grid=>mc_fc_detail )
      ( cl_gui_alv_grid=>mc_fc_refresh )
      ( cl_gui_alv_grid=>mc_fc_loc_cut )
      ( cl_gui_alv_grid=>mc_fc_loc_paste )
      ( cl_gui_alv_grid=>mc_fc_loc_paste_new_row )
      ( cl_gui_alv_grid=>mc_fc_graph )
      ( cl_gui_alv_grid=>mc_fc_loc_undo )
      ( cl_gui_alv_grid=>mc_fc_print )
      ( cl_gui_alv_grid=>mc_fc_views ) ).
  ENDMETHOD.

  METHOD handle_toolbar.
    DATA: lv_icon TYPE iconname.

    APPEND INITIAL LINE TO e_object->mt_toolbar ASSIGNING
      FIELD-SYMBOL(<fs_toolbar>).
    MOVE 3 TO <fs_toolbar>-butn_type.

    DATA(lv_text) = CONV string( TEXT-b01 ).
    add_button( EXPORTING i_function = 'SAVE_DATA'
                          i_icon     = lv_icon
                          i_text     = lv_text
                          i_text_d   = lv_text
                 CHANGING c_toolbar  = e_object->mt_toolbar ).
  ENDMETHOD.

  METHOD add_button.
    APPEND INITIAL LINE TO c_toolbar ASSIGNING
      FIELD-SYMBOL(<fs_toolbar>).
    <fs_toolbar> = VALUE #( function  = i_function
                            icon      = i_icon
                            text      = i_text_d
                            quickinfo = i_text
                            butn_type = 4
                            disabled  = space ).
  ENDMETHOD.

  METHOD handle_user_command.
    CASE e_ucomm.
      WHEN 'SAVE_DATA'.
        DATA(lv_err) = me->save_data( t_errors ).

        CHECK lv_err IS INITIAL.
        MESSAGE TEXT-s02 TYPE 'I'.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD handle_data_changed.

*    FIELD-SYMBOLS: <fs_table>    TYPE STANDARD TABLE,
*                   <fs_output_t> TYPE STANDARD TABLE.
*
*    ASSIGN gt_output->* TO <fs_output_t>.
*
*    LOOP AT er_data_changed->mt_mod_cells
*      ASSIGNING FIELD-SYMBOL(<fs_mod>).
*      READ TABLE <fs_output_t> ASSIGNING FIELD-SYMBOL(<fs_output>)
*        INDEX <fs_mod>-row_id.
*      CHECK sy-subrc EQ 0.
*      ASSIGN COMPONENT <fs_mod>-fieldname OF STRUCTURE <fs_output>
*        TO FIELD-SYMBOL(<fs_value>).
*      CHECK sy-subrc EQ 0.
*      ASSIGN COMPONENT 'FIELDNAME' OF STRUCTURE <fs_output>
*        TO FIELD-SYMBOL(<fs_fieldname>).
*      CHECK sy-subrc EQ 0.
*      READ TABLE t_fields ASSIGNING FIELD-SYMBOL(<fs_field>)
*        WITH KEY fieldname = <fs_fieldname>.
*      IF sy-subrc EQ 0.
*        READ TABLE t_domains ASSIGNING FIELD-SYMBOL(<fs_domain>)
*          WITH KEY domname = <fs_field>-domname.
*        IF sy-subrc EQ 0.
*          ASSIGN <fs_domain>-data->* TO <fs_table>.
*
*          IF <fs_field>-inttype EQ 'T'.
*            REPLACE ALL OCCURRENCES OF ':' IN <fs_value> WITH space.
*            CONDENSE <fs_value> NO-GAPS.
*          ENDIF.
*
*          IF <fs_domain>-keyfield IS NOT INITIAL.
*            DATA(lv_where_cond) = to_lower( <fs_domain>-keyfield ) && | EQ <fs_value>|.
*            LOOP AT <fs_table> ASSIGNING FIELD-SYMBOL(<fs_line>)
*              WHERE (lv_where_cond).
*              EXIT.
*            ENDLOOP.
*            IF sy-subrc NE 0.
*              DATA(lv_mess) = CONV string( TEXT-e01 ).
*              er_data_changed->add_protocol_entry(
*                EXPORTING
*                  i_msgid = 'ZPP' i_msgno = '000'  i_msgty = 'E'
*                  i_msgv1 = lv_mess
*                  i_msgv2 = space
*                  i_msgv3 = space
*                  i_fieldname = <fs_mod>-fieldname
*                  i_row_id = <fs_mod>-row_id ).
*              CONTINUE.
*            ENDIF.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*      <fs_value> = <fs_mod>-value.
*    ENDLOOP.
  ENDMETHOD.

  METHOD save_data.
    DATA: lv_log_handle     TYPE balloghndl,
          lv_msg_was_logged TYPE boolean.

    FIELD-SYMBOLS: <fs_table> TYPE STANDARD TABLE.

    ASSIGN i_data->* TO <fs_table>.

*    CASE abap_true.
*      WHEN p_clt_g.
*        DATA(lv_table) = |kna1|.
*      WHEN p_clt_v.
*        lv_table = |knvv|.
*      WHEN p_mat_g.
*        lv_table = |mara|.
*      WHEN p_mat_c.
*        lv_table = |marc|.
*      WHEN p_pro_g.
*        lv_table = |lfa1|.
*      WHEN p_pro_s.
*        lv_table = |lfb1|.
*      WHEN p_info.
*        lv_table = |eine|.
*      WHEN OTHERS.
*    ENDCASE.
*
*    DATA lv_cond TYPE string.
*    DATA lv_set TYPE string.
*
*    LOOP AT t_fields ASSIGNING FIELD-SYMBOL(<fs_field>).
*      IF <fs_field>-key IS NOT INITIAL.
*        IF lv_cond IS INITIAL.
*          lv_cond = to_lower( <fs_field>-fieldname ) &&
*                    | EQ <fs_line>-| &&
*                    to_lower( <fs_field>-fieldname ).
*        ELSE.
*          lv_cond = lv_cond && | AND | &&
*                    to_lower( <fs_field>-fieldname ) &&
*                    | EQ <fs_line>-| &&
*                    to_lower( <fs_field>-fieldname ).
*        ENDIF.
*      ENDIF.
*      IF <fs_field>-fieldname(2) EQ 'ZZ'.
*        CHECK <fs_field>-fieldname NE 'ZZ1_INE_C'.
*        IF lv_set IS INITIAL.
*          lv_set = to_lower( <fs_field>-fieldname ) &&
*                   | = <fs_line>-| &&
*                   to_lower( <fs_field>-fieldname ).
*        ELSE.
*          lv_set = lv_set && | | &&
*                   to_lower( <fs_field>-fieldname ) &&
*                   | = <fs_line>-| &&
*                   to_lower( <fs_field>-fieldname ).
*        ENDIF.
*      ENDIF.
*    ENDLOOP.

*    LOOP AT <fs_table> ASSIGNING FIELD-SYMBOL(<fs_line>).
*      IF p_clt_g IS NOT INITIAL OR p_pro_g IS NOT INITIAL.
*        ASSIGN COMPONENT 'KUNNR' OF STRUCTURE <fs_line>
*          TO FIELD-SYMBOL(<fs_partner>).
*        IF sy-subrc NE 0.
*          ASSIGN COMPONENT 'LIFNR' OF STRUCTURE <fs_line>
*            TO <fs_partner>.
*        ENDIF.
*        IF sy-subrc EQ 0.
*          ASSIGN COMPONENT 'ZZ1_INE_C' OF STRUCTURE <fs_line>
*            TO FIELD-SYMBOL(<fs_ine>).
*        ENDIF.
*
*        IF <fs_partner> IS ASSIGNED AND <fs_ine> IS ASSIGNED.
*          UPDATE but000 SET zz1_ine_c = <fs_ine>
*            WHERE partner EQ <fs_partner>.
*        ENDIF.
*      ENDIF.
*      UPDATE (lv_table) SET (lv_set) WHERE (lv_cond).

*      IF sy-subrc NE 0.
*        IF lv_log_handle IS INITIAL.
*          DATA(ls_log) = VALUE bal_s_log( object    = 'ZCARGA'
*                                    subobject = COND #( WHEN p_clt_g IS NOT INITIAL
*                                                          OR p_clt_v IS NOT INITIAL THEN 'ZCARGASSD'
*                                                        WHEN p_mat_g IS NOT INITIAL
*                                                          OR p_mat_c IS NOT INITIAL
*                                                          OR p_pro_g IS NOT INITIAL
*                                                          OR p_pro_s IS NOT INITIAL
*                                                          OR p_info  IS NOT INITIAL THEN 'ZCARGASMM' )
*                                    aldate    = sy-datum
*                                    altime    = sy-uzeit
*                                    aluser    = sy-uname
*                                    altcode   = sy-tcode
*                                    alprog    = sy-cprog ).
*
*          CALL FUNCTION 'BAL_LOG_CREATE'
*            EXPORTING
*              i_s_log                 = ls_log
*            IMPORTING
*              e_log_handle            = lv_log_handle
*            EXCEPTIONS
*              log_header_inconsistent = 1
*              OTHERS                  = 2.
*        ENDIF.
*
*        DATA(lv_key) = CONV string( space ).
*        LOOP AT t_fields ASSIGNING <fs_field>
*          WHERE key IS NOT INITIAL.
*          ASSIGN COMPONENT <fs_field>-fieldname OF STRUCTURE <fs_line>
*            TO FIELD-SYMBOL(<fs_key>).
*          CHECK sy-subrc EQ 0.
*          IF lv_key IS INITIAL.
*            lv_key = <fs_key>.
*          ELSE.
*            lv_key = lv_key && | | && <fs_key>.
*          ENDIF.
*        ENDLOOP.
*
*        DATA(ls_msg) = VALUE bal_s_msg( msgty = 'E'
*                                        msgid = 'ZPP'
*                                        msgno = '000'
*                                        msgv1 = COND #( WHEN p_clt_g IS NOT INITIAL
*                                                          OR p_clt_v IS NOT INITIAL
*                                                          THEN TEXT-e03
*                                                        WHEN p_mat_g IS NOT INITIAL
*                                                          OR p_mat_c IS NOT INITIAL
*                                                          THEN TEXT-e04
*                                                        WHEN p_pro_g IS NOT INITIAL
*                                                          OR p_pro_s IS NOT INITIAL
*                                                          THEN TEXT-e05
*                                                        WHEN p_info IS NOT INITIAL
*                                                          THEN TEXT-e06 )
*                                        msgv2 = lv_key
*                                        msgv3 = TEXT-e07 ).
*
*        CALL FUNCTION 'BAL_LOG_MSG_ADD'
*          EXPORTING
*            i_log_handle     = lv_log_handle
*            i_s_msg          = ls_msg
*          IMPORTING
*            e_msg_was_logged = lv_msg_was_logged
*          EXCEPTIONS
*            log_not_found    = 1
*            msg_inconsistent = 2
*            log_is_full      = 3
*            OTHERS           = 4.
*      ENDIF.
*    ENDLOOP.
*
*    COMMIT WORK.
*
*    DATA(lt_log_handle) = VALUE bal_t_logh( ( lv_log_handle ) ).
*
*    CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
*      EXPORTING
*        i_t_log_handle       = lt_log_handle
*      EXCEPTIONS
*        profile_inconsistent = 1
*        internal_error       = 2
*        no_data_available    = 3
*        no_authority         = 4
*        OTHERS               = 5.
  ENDMETHOD.

  METHOD additional_checks.
    CLEAR rs_error.
*    CASE i_fieldname.
*      WHEN 'ZZ1_CODIGO_LER'.
*        DATA(lv_ler) = CONV ztmm_ler-cod_ler( i_fieldvalue ).
*
*        SELECT SINGLE * FROM ztmm_ler INTO @DATA(ls_ler)
*          WHERE cod_ler EQ @lv_ler.
*        SELECT SINGLE mtart FROM mara INTO @DATA(lv_mtart)
*          WHERE matnr EQ @i_matnr.
*        CHECK lv_mtart NE ls_ler-tipo_material.
*        rs_error-error = abap_true.
*        DATA(lv_mess) = CONV string( TEXT-e08 ).
*        REPLACE ALL OCCURRENCES OF: '&1' IN lv_mess WITH lv_mtart,
*                                    '&2' IN lv_mess WITH ls_ler-tipo_material.
*        rs_error-message = lv_mess.
*      WHEN 'ZZ1_COD_PROC'.
*        DATA(lv_cod_proc) = CONV ztmm_cod_proc-cod_proc( i_fieldvalue ).
*
*        SELECT SINGLE * FROM ztmm_cod_proc INTO @DATA(ls_cod_proc)
*          WHERE cod_proc EQ @lv_cod_proc
*            AND centro   EQ @i_werks.
*        IF sy-subrc NE 0.
*          rs_error-error = abap_true.
*          SELECT SINGLE * FROM ztmm_cod_proc INTO @ls_cod_proc
*            WHERE cod_proc EQ @lv_cod_proc.
*          IF sy-subrc EQ 0.
*            lv_mess = CONV #( TEXT-e09 ).
*            REPLACE ALL OCCURRENCES OF: '&1' IN lv_mess WITH lv_cod_proc,
*                                        '&2' IN lv_mess WITH i_werks,
*                                        '&3' IN lv_mess WITH ls_cod_proc-centro.
*
*            rs_error-message = lv_mess.
*          ENDIF.
*        ENDIF.
*      WHEN 'ZZ1_INE_C'.
*        DATA(lv_ine) = CONV ztbp_ine-codigo_ine( i_fieldvalue ).
*
*        SELECT SINGLE * FROM ztbp_ine INTO @DATA(ls_ine)
*          WHERE codigo_ine EQ @lv_ine.
*        CHECK sy-subrc NE 0.
*        rs_error-error = abap_true.
*      WHEN OTHERS.
*        CASE i_fieldtype.
*          WHEN 'T'.
*            DATA(lv_time) = CONV sy-uzeit( i_fieldvalue ).
*            CALL FUNCTION 'TIME_CHECK_PLAUSIBILITY'
*              EXPORTING
*                time                      = lv_time
*              EXCEPTIONS
*                plausibility_check_failed = 1
*                OTHERS                    = 2.
*            CHECK sy-subrc NE 0.
*            rs_error-error = abap_true.
*            rS_error-message = CONV #( TEXT-e10 ).
*          WHEN OTHERS.
*        ENDCASE.
*    ENDCASE.
  ENDMETHOD.

  METHOD check_keyfield.
    DATA: ls_keyfield TYPE REF TO data,
          lv_where    TYPE string.

    DATA(lo_desc) = CAST cl_abap_structdescr(
              cl_abap_typedescr=>describe_by_name( is_domain-datatab ) ).
    DATA(lt_fields) = cl_salv_data_descr=>read_structdescr( lo_desc ).

*    LOOP AT lt_fields ASSIGNING FIELD-SYMBOL(<fs_field_aux>)
*      WHERE keyflag IS NOT INITIAL.
*      ASSIGN COMPONENT <fs_field_aux>-fieldname OF STRUCTURE is_line
*        TO FIELD-SYMBOL(<fs_value>).
*      CHECK sy-subrc EQ 0.
*      IF lv_where IS INITIAL.
*        lv_where = <fs_field_aux>-fieldname && | | && 'EQ'
*                   && | | && |'| && <fs_value> && |'|.
*      ELSE.
*        lv_where = 'AND' && | | && <fs_field_aux>-fieldname
*                   && | | && 'EQ' && | | &&
*                   |'| && <fs_value> && |'|.
*      ENDIF.
*    ENDLOOP.
*
*    CREATE DATA ls_keyfield TYPE (is_domain-datatab).
*    ASSIGN ls_keyfield->* TO FIELD-SYMBOL(<fs_keyfield>).
*
*    SELECT SINGLE * FROM (is_domain-datatab)
*      INTO <fs_keyfield>
*      WHERE (lv_where).
*    IF sy-subrc NE 0.
*      rs_error-error = abap_true.
*      CASE abap_true.
*        WHEN p_clt_g.
*          rs_error-message = CONV #( TEXT-e11 ).
*        WHEN p_clt_v.
*          rs_error-message = CONV #( TEXT-e12 ).
*        WHEN p_mat_g.
*          rs_error-message = CONV #( TEXT-e13 ).
*        WHEN p_mat_c.
*          rs_error-message = CONV #( TEXT-e14 ).
*        WHEN p_pro_g.
*          rs_error-message = CONV #( TEXT-e15 ).
*        WHEN p_pro_s.
*          rs_error-message = CONV #( TEXT-e16 ).
*        WHEN p_info.
*          rs_error-message = CONV #( TEXT-e17 ).
*      ENDCASE.
*    ENDIF.
  ENDMETHOD.
ENDCLASS.
