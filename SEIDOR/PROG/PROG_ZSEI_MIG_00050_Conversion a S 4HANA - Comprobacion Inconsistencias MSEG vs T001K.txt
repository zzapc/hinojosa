*---------------------------------------------------------------------*
* Report ZSEI_MIG_00050
*---------------------------------------------------------------------*
REPORT zsei_mig_00050.

TABLES: mseg.

SELECTION-SCREEN BEGIN OF BLOCK blk0 WITH FRAME.

SELECT-OPTIONS: so_bukrs FOR mseg-bukrs,
                so_werks FOR mseg-werks.

SELECTION-SCREEN   END OF BLOCK blk0.

CLASS lcl_app DEFINITION.

  PUBLIC SECTION.

    TYPES:
      BEGIN OF ty_mseg,
        mblnr TYPE mseg-mblnr,
        mjahr TYPE mseg-mjahr,
        zeile TYPE mseg-zeile,
        bukrs TYPE mseg-bukrs,
        werks TYPE mseg-werks,
      END OF   ty_mseg.

    TYPES:
      BEGIN OF ty_t001k,
        bwkey TYPE t001k-bwkey,
        bukrs TYPE t001k-bukrs,
      END OF ty_t001k.

    TYPES:
      lr_bukrs  TYPE RANGE OF mseg-bukrs,
      lr_werks  TYPE RANGE OF mseg-werks,
      tty_mseg  TYPE STANDARD TABLE OF ty_mseg,
      tty_t001k TYPE STANDARD TABLE OF ty_t001k.

    DATA:
      t_mseg  TYPE STANDARD TABLE OF ty_mseg,
      t_t001k TYPE STANDARD TABLE OF ty_t001k.

    METHODS: inicio IMPORTING i_r_bukrs TYPE lr_bukrs
                              i_r_werks TYPE lr_werks.

  PRIVATE SECTION.

    METHODS:

      get_t001k        IMPORTING i_t_mseg   TYPE tty_mseg
                       CHANGING  ch_t_t001k TYPE tty_t001k,

      get_mseg         IMPORTING i_r_bukrs TYPE lr_bukrs
                                 i_r_werks TYPE lr_werks
*                                 i_gjahr   TYPE mseg-gjahr
                                 i_t_t001k TYPE tty_t001k
                       CHANGING  ch_t_mseg TYPE tty_mseg,

      prepare_alv_tab  IMPORTING i_t_t001k TYPE tty_t001k
                       CHANGING  ch_t_alv  TYPE tty_mseg,

      display_alv       CHANGING ch_t_alv   TYPE tty_mseg,

      get_instance_alv  CHANGING ch_t_alv TYPE tty_mseg
                                 ch_o_alv TYPE REF TO cl_salv_table,

      prepare_alv       CHANGING ch_o_alv   TYPE REF TO cl_salv_table.

ENDCLASS.

CLASS lcl_app IMPLEMENTATION.

  METHOD: inicio.
*  IMPORTING i_r_bukrs TYPE lr_bukrs
*            i_r_werks TYPE lr_werks

    get_t001k( EXPORTING i_t_mseg   = t_mseg
                CHANGING ch_t_t001k = t_t001k ).

    get_mseg( EXPORTING i_r_bukrs = i_r_bukrs
                        i_r_werks = i_r_werks
                        i_t_t001k = t_t001k
*                        i_gjahr   = p_gjahr
               CHANGING ch_t_mseg = t_mseg ).

    IF t_mseg IS NOT INITIAL.

      prepare_alv_tab( EXPORTING i_t_t001k = t_t001k
                        CHANGING ch_t_alv  = t_mseg ).

      display_alv( CHANGING ch_t_alv  = t_mseg ).

    ENDIF.

  ENDMETHOD.

  METHOD: get_mseg.
*IMPORTING i_r_bukrs TYPE lr_bukrs
*          i_r_werks TYPE lr_werks
*          i_t_t001k TYPE tty_t001k
*CHANGING  ch_t_mseg TYPE tty_mseg,

*   Performance
    SELECT DISTINCT bukrs werks
      FROM mseg
      INTO CORRESPONDING FIELDS OF TABLE ch_t_mseg
     WHERE bukrs IN i_r_bukrs
       AND werks IN i_r_werks
     GROUP BY bukrs werks.

  ENDMETHOD.

  METHOD: get_t001k.
*   IMPORTING i_t_mseg   TYPE tty_mseg
*    CHANGING ch_t_t001k TYPE tty_t001k

    SELECT bwkey bukrs FROM t001k INTO TABLE ch_t_t001k.

    SORT ch_t_t001k BY bwkey.

  ENDMETHOD.

  METHOD: prepare_alv_tab.
*   IMPORTING i_t_t001k  TYPE tty_t001k
*    CHANGING ch_t_alv   TYPE tty_mseg

    DATA:
      ls_alv   TYPE ty_mseg,
      lv_tabix TYPE sy-tabix,
      lv_reg   TYPE i.

    DESCRIBE TABLE i_t_t001k LINES DATA(lv_total_records).

    LOOP AT i_t_t001k INTO DATA(ls_t001k).

      lv_tabix = sy-tabix.

      DELETE ch_t_alv WHERE werks EQ ls_t001k-bwkey AND bukrs EQ ls_t001k-bukrs.

      cl_progress_indicator=>progress_indicate(
          i_text = |Processing: { lv_tabix }/{ lv_total_records }|
          i_output_immediately = abap_true ).

    ENDLOOP.

*   Seleccionamos los registros que quedan en ch_t_alv.
    DATA:
       lt_mseg TYPE tty_mseg.

    lt_mseg[] = ch_t_alv[].
    REFRESH: ch_t_alv.

    IF lt_mseg[] IS NOT INITIAL.
      SELECT mblnr mjahr zeile bukrs werks
        FROM mseg
        INTO TABLE ch_t_alv
         FOR ALL ENTRIES IN lt_mseg
       WHERE bukrs IN so_bukrs
         AND werks IN so_werks
         AND bukrs EQ lt_mseg-bukrs
         AND werks EQ lt_mseg-werks.
    ENDIF.

  ENDMETHOD.

  METHOD: display_alv.

    DATA: lo_alv TYPE REF TO cl_salv_table.

    get_instance_alv( CHANGING ch_t_alv = ch_t_alv
                               ch_o_alv = lo_alv ).

    prepare_alv(      CHANGING ch_o_alv = lo_alv ).

    lo_alv->display( ).

  ENDMETHOD.

  METHOD: get_instance_alv.
*    CHANGING ch_t_alv   TYPE tty_mseg
*             ch_o_alv   TYPE REF TO cl_salv_table

    TRY.
        CALL METHOD cl_salv_table=>factory
          IMPORTING
            r_salv_table = ch_o_alv
          CHANGING
            t_table      = ch_t_alv.
      CATCH cx_salv_msg.
    ENDTRY.

  ENDMETHOD.

  METHOD prepare_alv.
*    CHANGING ch_o_alv TYPE REF TO cl_salv_table

    DATA: lo_columns   TYPE REF TO cl_salv_columns,
          lo_functions TYPE REF TO cl_salv_functions.

    lo_columns = ch_o_alv->get_columns( ).
    lo_columns->set_optimize( abap_true ).

    lo_functions = ch_o_alv->get_functions( ).
    lo_functions->set_all( abap_true ).

  ENDMETHOD.

ENDCLASS.

DATA: go_app TYPE REF TO lcl_app.

INITIALIZATION.

  CREATE OBJECT go_app.

START-OF-SELECTION.
  go_app->inicio( EXPORTING i_r_bukrs = so_bukrs[]
                            i_r_werks = so_werks[] ).
