*&---------------------------------------------------------------------*
*& Include          ZSEI_MIG_00006_F01
*&---------------------------------------------------------------------*

**&---------------------------------------------------------------------*
**& Form OBTENER_DATOS
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
*FORM obtener_datos .
*
*  " Obtenemos la tabla parametrizada zseitsd_cargaped
*  PERFORM get_esquema_campos.
*
*  "Construimos la tabla original y una tabla plantilla que obtiene el excel
*  PERFORM get_structure_idoc.
*
*  "Cargamos el excel en la tabla plantilla creada en get_structure_idoc
*  PERFORM leer_txt TABLES <gt_table_dynamic>.
*
*  "Obtenemos los interlocutores
*  PERFORM reemplace_run_id_for_bp TABLES <gt_table_dynamic>.
*
*  "Validar Campos Obligatorios
*  PERFORM validar_campos_obligatorios.
*
*  PERFORM rutina_convertion TABLES <gt_table_dynamic>.
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form GET_ESQUEMA_CAMPOS
**&---------------------------------------------------------------------*
**& Obtenemos la tabla parametrizada zseitsd_cargaped
**&---------------------------------------------------------------------*
*FORM get_esquema_campos .
*
*  REFRESH t_zseitsd_car_cred.
*  SELECT *
*    INTO CORRESPONDING FIELDS OF TABLE @t_zseitsd_car_cred
*    FROM zseitsd_car_cred.
*  IF sy-subrc EQ 0.
*
*    "Eliminamos líneas duplicadas
*    SORT t_zseitsd_car_cred BY fieldname.
*    DELETE ADJACENT DUPLICATES FROM t_zseitsd_car_cred COMPARING fieldname.
*
*    SORT t_zseitsd_car_cred BY indice.
*  ELSE.
*    MESSAGE e899(e9) WITH 'Falta parametrizar la tabla ZSEITSD_CAR_CRED'(e04).
*  ENDIF.
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form GET_STRUCTURE_IDOC
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
*FORM get_structure_idoc.
*
*  DATA: ls_dynamic  TYPE lvc_s_fcat,
*        lt_dynamic  TYPE lvc_t_fcat,
*        ls_dd01l    TYPE dd01l,
*        lv_data_dyn TYPE REF TO data,
*        lv_line     TYPE REF TO data.
*
*  REFRESH lt_dynamic.
*  LOOP AT t_zseitsd_car_cred ASSIGNING FIELD-SYMBOL(<fs_cargapedidos>).
*
*    CLEAR ls_dynamic.
**  Funcion que devuelve el tipo de elemento de datos de cada columna.
*    CONDENSE <fs_cargapedidos>-element_data NO-GAPS.
*    CALL FUNCTION 'DD_DTEL_GET'
*      EXPORTING
*        roll_name     = <fs_cargapedidos>-element_data
*      IMPORTING
*        dd01l_wa      = ls_dd01l
*      EXCEPTIONS
*        illegal_value = 1
*        OTHERS        = 2.
*    IF sy-subrc EQ 0.
*      MOVE-CORRESPONDING ls_dd01l TO ls_dynamic.
*    ENDIF.
*    ls_dynamic-fieldname = <fs_cargapedidos>-fieldname.
*    IF ls_dynamic-datatype EQ 'QUAN' AND ls_dynamic-outputlen GE 17.
**   Para tipo "P" se permite una especificación de lon 17 P
*      ls_dynamic-outputlen = 16.
*    ENDIF.
*    APPEND ls_dynamic TO lt_dynamic.
*
*  ENDLOOP.
*
*  "Tabla Original
*  CLEAR lv_data_dyn.
*  CALL METHOD cl_alv_table_create=>create_dynamic_table
*    EXPORTING
*      it_fieldcatalog  = lt_dynamic
*      i_length_in_byte = abap_true
*    IMPORTING
*      ep_table         = lv_data_dyn.
*
*  ASSIGN lv_data_dyn->* TO <gt_table_dynamic>.
*
*  CREATE DATA lv_line LIKE LINE OF <gt_table_dynamic>.
*  ASSIGN lv_line->* TO <gs_table_dynamic>.
*
*  "Tabla Template
*  CLEAR lv_data_dyn.
*  CALL METHOD cl_alv_table_create=>create_dynamic_table
*    EXPORTING
*      it_fieldcatalog  = lt_dynamic
*      i_length_in_byte = abap_true
*    IMPORTING
*      ep_table         = lv_data_dyn.
*
*  ASSIGN lv_data_dyn->* TO <gt_table_dynamic_aux>.
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form LEER_EXCEL
**&---------------------------------------------------------------------*
**& Cargamos el excel en la tabla plantilla creada en get_structure_idoc
**&---------------------------------------------------------------------*
*FORM leer_txt TABLES it_structure_txt TYPE STANDARD TABLE.
*
*  DATA wa_ruta TYPE string.
*
*  wa_ruta = p_ruta.
*  DATA lo_csv TYPE REF TO zseiclamm_csv_import."zcl_csv_import.
*  CREATE OBJECT lo_csv.
*  lo_csv->load_csv_file( wa_ruta ).
*  lo_csv->transform_csv_data(  ).
*  lo_csv->get_csv_data( EXPORTING i_with_header = abap_true CHANGING i_tablename   = it_structure_txt[] ).
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form INITALIZATION
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
*FORM initalization .
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form F4_LOCAL_PATH
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
**      -->P_P_RUTA  text
**&---------------------------------------------------------------------*
*FORM f4_local_path  USING iv_ruta TYPE localfile.
*
*  CLEAR iv_ruta.
*  CALL FUNCTION 'F4_FILENAME'
*    IMPORTING
*      file_name = iv_ruta.
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form VALIDAR_CAMPOS_OBLIGATORIOS
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
**& -->  p1        text
**& <--  p2        text
**&---------------------------------------------------------------------*
*FORM validar_campos_obligatorios.
*
*  DATA: lv_variable TYPE string,
*        lv_field    TYPE string.
*
*  FIELD-SYMBOLS <lv_contenido> TYPE any.
*
*
*  LOOP AT t_zseitsd_car_cred ASSIGNING FIELD-SYMBOL(<fs_cargapedidos>) WHERE obligatory EQ abap_true.
*    UNASSIGN <lv_contenido>.
*    CONCATENATE '<gs_table_dynamic>-' <fs_cargapedidos>-fieldname INTO lv_variable.
*    ASSIGN (lv_variable) TO <lv_contenido>.
*    IF <lv_contenido> IS ASSIGNED.
*      LOOP AT <gt_table_dynamic> ASSIGNING FIELD-SYMBOL(<fs_table_dynamic>).
*        UNASSIGN <lv_contenido>.
*        CONCATENATE '<fs_table_dynamic>-' <fs_cargapedidos>-fieldname INTO lv_field.
*        ASSIGN (lv_field) TO <lv_contenido>.
*        IF <lv_contenido> IS ASSIGNED.
*          IF <lv_contenido> IS INITIAL.
*            MESSAGE e899(e9) WITH 'No se informó el campo obligatorio'(e01) <fs_cargapedidos>-fieldname 'en la plantilla de carga de créditos'(e02).
*          ENDIF.
*        ELSE.
*          MESSAGE e899(e9) WITH 'No se informó el campo obligatorio'(e01) <fs_cargapedidos>-fieldname 'en la plantilla de carga de créditos'(e02).
*        ENDIF.
*      ENDLOOP.
*    ELSE.
*      MESSAGE e899(e9) WITH 'No se informó el campo obligatorio'(e01) <fs_cargapedidos>-fieldname 'en la plantilla de carga de créditos'(e02).
*    ENDIF.
*  ENDLOOP.
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form PROCESAR_DATOS
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
*FORM procesar_datos.
*
*  PERFORM validaciones_excel.
*
*  "Informamos las dos tablas Z ( ZSEITSD_CRE_LTMP - ZSEITSD_CRE_CONS )
*  PERFORM llenar_table_z.
*
*  "Actualizamos el valor del crédito
*  PERFORM update_credito_limite.
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form LLENAR_TABLE_Z
**&---------------------------------------------------------------------*
**& Informamos las dos tablas Z ( ZSEITSD_CRE_LTMP - ZSEITSD_CRE_CONS )
**&---------------------------------------------------------------------*
*FORM llenar_table_z.
*
*  DATA: lv_variable         TYPE string,
*        lt_zseitsd_cre_ltmp TYPE TABLE OF zseitsd_cre_ltmp,
*        ls_zseitsd_cre_ltmp TYPE zseitsd_cre_ltmp,
*        lt_zseitsd_cre_cons TYPE TABLE OF zseitsd_cre_cons,
*        ls_zseitsd_cre_cons TYPE zseitsd_cre_cons,
*        lv_field            TYPE string,
*        lv_date_null        TYPE begdat.
*
*  FIELD-SYMBOLS: <lv_contenido>      TYPE any,
*                 <lv_contenido_dest> TYPE any.
*
*  REFRESH: lt_zseitsd_cre_ltmp, lt_zseitsd_cre_cons.
*  LOOP AT <gt_table_dynamic> ASSIGNING FIELD-SYMBOL(<fs_table_dynamic>).
*    CLEAR: ls_zseitsd_cre_ltmp, ls_zseitsd_cre_cons.
*    LOOP AT t_zseitsd_car_cred ASSIGNING FIELD-SYMBOL(<fs_car_cred>) WHERE zseitsd_cre_ltmp EQ abap_true
*                                                                        OR zseitsd_cre_cons EQ abap_true.
*      UNASSIGN <lv_contenido>.
*      CONCATENATE '<fs_table_dynamic>-' <fs_car_cred>-fieldname INTO lv_field.
*      ASSIGN (lv_field) TO <lv_contenido>.
*      IF <lv_contenido> IS ASSIGNED.
*        IF <lv_contenido> IS NOT INITIAL.
*
*          IF <fs_car_cred>-zseitsd_cre_ltmp EQ abap_true.
*            UNASSIGN <lv_contenido_dest>.
*            CONCATENATE 'ls_zseitsd_cre_ltmp-' <fs_car_cred>-fieldname INTO lv_field.
*            ASSIGN (lv_field) TO <lv_contenido_dest>.
*            IF <lv_contenido_dest> IS ASSIGNED.
*              <lv_contenido_dest> = <lv_contenido>.
*            ENDIF.
*          ENDIF.
*
*          IF <fs_car_cred>-zseitsd_cre_cons EQ abap_true.
*            UNASSIGN <lv_contenido_dest>.
*            CONCATENATE 'ls_zseitsd_cre_cons-' <fs_car_cred>-fieldname INTO lv_field.
*            ASSIGN (lv_field) TO <lv_contenido_dest>.
*            IF <lv_contenido_dest> IS ASSIGNED.
*              <lv_contenido_dest> = <lv_contenido>.
*            ENDIF.
*          ENDIF.
*
*        ENDIF.
*      ENDIF.
*    ENDLOOP.
*
*    IF ls_zseitsd_cre_ltmp IS NOT INITIAL.
*      APPEND ls_zseitsd_cre_ltmp TO lt_zseitsd_cre_ltmp.
*    ENDIF.
*
*    IF ls_zseitsd_cre_cons IS NOT INITIAL.
*      APPEND ls_zseitsd_cre_cons TO lt_zseitsd_cre_cons.
*    ENDIF.
*
*  ENDLOOP.
*
*  IF lt_zseitsd_cre_cons IS NOT INITIAL.
*    MODIFY zseitsd_cre_cons FROM TABLE lt_zseitsd_cre_cons.
*  ENDIF.
*
*  IF lt_zseitsd_cre_ltmp IS NOT INITIAL.
*
*    LOOP AT lt_zseitsd_cre_ltmp ASSIGNING FIELD-SYMBOL(<fs_zseitsd_cre_ltmp>).
*      IF <fs_zseitsd_cre_ltmp>-z_begdat IS NOT INITIAL.
*        <fs_zseitsd_cre_ltmp>-z_active = abap_true.
*        READ TABLE lt_zseitsd_cre_ltmp TRANSPORTING NO FIELDS WITH KEY z_partner    = <fs_zseitsd_cre_ltmp>-z_partner
*                                                                       z_seg_credit = <fs_zseitsd_cre_ltmp>-z_seg_credit
*                                                                       z_begdat     = lv_date_null.
*        IF sy-subrc NE 0.
*          "Informamos el credito límite
*          CLEAR ls_zseitsd_cre_ltmp.
*          ls_zseitsd_cre_ltmp-z_partner      = <fs_zseitsd_cre_ltmp>-z_partner.
*          ls_zseitsd_cre_ltmp-z_seg_credit   = <fs_zseitsd_cre_ltmp>-z_seg_credit.
*          ls_zseitsd_cre_ltmp-z_limit        = <fs_zseitsd_cre_ltmp>-z_limit.
**          ls_zseitsd_cre_ltmp-z_id_clas_cred = <fs_zseitsd_cre_ltmp>-z_id_clas_cred.
*          APPEND ls_zseitsd_cre_ltmp TO lt_zseitsd_cre_ltmp.
*        ENDIF.
*
*      ELSE.
*
*        "Si no tiene begdat miramos si tiene algun credito activo para actualizar el credito limite
*        LOOP AT lt_zseitsd_cre_ltmp TRANSPORTING NO FIELDS WHERE z_partner    EQ <fs_zseitsd_cre_ltmp>-z_partner
*                                                             AND z_seg_credit EQ <fs_zseitsd_cre_ltmp>-z_seg_credit
*                                                             AND z_begdat     NE lv_date_null.
*        ENDLOOP.
*        IF sy-subrc NE 0.
*          "Recuperamos el activo y actualizamos su credito límite
*          SELECT SINGLE * INTO @ls_zseitsd_cre_ltmp
*            FROM zseitsd_cre_ltmp
*            WHERE z_partner    EQ @<fs_zseitsd_cre_ltmp>-z_partner
*              AND z_seg_credit EQ @<fs_zseitsd_cre_ltmp>-z_seg_credit
*              AND z_active     EQ @abap_true.
*          IF sy-subrc EQ 0.
*            ls_zseitsd_cre_ltmp-z_limit         = <fs_zseitsd_cre_ltmp>-z_limit.
**            ls_zseitsd_cre_ltmp-z_id_clas_cred  = <fs_zseitsd_cre_ltmp>-z_id_clas_cred.
*            ls_zseitsd_cre_ltmp-z_limit_tot_tmp = ls_zseitsd_cre_ltmp-z_limit + ls_zseitsd_cre_ltmp-z_limit_tmp.
*            APPEND ls_zseitsd_cre_ltmp TO lt_zseitsd_cre_ltmp.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*
*    ENDLOOP.
*
*    MODIFY zseitsd_cre_ltmp FROM TABLE lt_zseitsd_cre_ltmp.
*
*  ENDIF.
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form UPDATE_CREDITO_LIMITE
**&---------------------------------------------------------------------*
**& Actualizamos el valor del crédito
**&---------------------------------------------------------------------*
*FORM update_credito_limite.
*
*  DATA: ls_ukm_s_bp_cms_sgm_upd TYPE ukm_s_bp_cms_sgm_upd,
*        lt_ukm_s_bp_cms_sgm_upd TYPE TABLE OF ukm_s_bp_cms_sgm_upd,
*        lt_ukm_s_bp_cms_sgm_all TYPE TABLE OF ukm_s_bp_cms_sgm_all,
*        lo_descr                TYPE REF TO cl_abap_structdescr,
**        lv_partner(12)          TYPE c,
*        lv_partner              TYPE bu_partner,
*        ls_zseitsd_log_cred     TYPE zseitsd_log_cred,
*        lt_zseitsd_log_cred     TYPE TABLE OF zseitsd_log_cred,
*        lv_segmento             TYPE ukm_credit_sgmnt,
*        lv_credit_limit         TYPE ukm_credit_limit,
*        lv_ind_bloqueo          TYPE ukm_xblocked,
*        lv_mot_bloqueo          TYPE ukm_block_reason,
*        lv_proces               TYPE ukm_limit_rule,
*        lv_class_risk           TYPE ukm_risk_class,
*        lv_regl_ver             TYPE ukm_check_rule,
*        lv_field                TYPE string,
*        lc_popup                TYPE REF TO zcl_alv_popup,
*        lc_popup2               TYPE REF TO zcl_alv_popup,
*        lt_ukm_s_bp_cms_upd     TYPE TABLE OF ukm_s_bp_cms_upd,
*        ls_ukm_s_bp_cms_upd     TYPE ukm_s_bp_cms_upd.
*
*  DATA: lv_infotype  TYPE infotyp,
*        lv_credinter TYPE ukm_infotype,
*        lv_impinter  TYPE bapibp_amnt,
*        lv_moninter  TYPE waers,
*        lv_credaseg  TYPE ukm_infotype,
*        lv_impaseg   TYPE bapibp_amnt,
*        lv_monaseg   TYPE waers.
*
*  DATA: wl_bpartner    TYPE bapi_bus_partner_fs-partner_id,
*        wl_change      TYPE bapi_str_bupa_fs_change_docu,
*        wl_test        TYPE boolean VALUE ' ',
*        ls_adition     TYPE bapi_str_bupa_fs_addition,
*        lt_adition     TYPE TABLE OF bapi_str_bupa_fs_addition,
*        lt_adition_aux TYPE TABLE OF bapi_str_bupa_fs_addition,
*        lt_adchange    TYPE TABLE OF bapi_str_bupa_fs_additi_x,
*        ls_adchange    TYPE bapi_str_bupa_fs_additi_x,
*        lt_return      TYPE TABLE OF bapiret2.
*
*
*  FIELD-SYMBOLS: <lv_contenido> TYPE any.
*
**  DEFINE bapireturncheck.
**    READ TABLE lt_return
**         WITH KEY type = 'E'
**         TRANSPORTING NO FIELDS.
**    IF line_exists( lt_return[ type = 'E' ] ).
**      RAISE failed.
**    ENDIF.
**    IF sy-subrc = 0.
**      RAISE failed.
**    ENDIF.
**  END-OF-DEFINITION.
*
*  REFRESH: lt_ukm_s_bp_cms_upd, lt_ukm_s_bp_cms_sgm_upd.
*  LOOP AT <gt_table_dynamic> ASSIGNING FIELD-SYMBOL(<fs_table_dynamic>).
*    REFRESH lt_ukm_s_bp_cms_sgm_upd.
*    lo_descr ?= cl_abap_typedescr=>describe_by_data( <fs_table_dynamic> ).
*    LOOP AT lo_descr->components ASSIGNING FIELD-SYMBOL(<ls_comp>).
*      UNASSIGN <lv_contenido>.
*      CONCATENATE '<fs_table_dynamic>-' <ls_comp>-name INTO lv_field.
*      ASSIGN (lv_field) TO <lv_contenido>.
*      IF <lv_contenido> IS ASSIGNED.
*        CASE <ls_comp>-name.
*          WHEN 'Z_PARTNER'.
*            lv_partner      = <lv_contenido>.
*          WHEN 'Z_SEG_CREDIT'.
*            lv_segmento     = <lv_contenido>.
*          WHEN 'Z_LIMIT'.
*            lv_credit_limit = <lv_contenido>.
*          WHEN 'Z_BLOQUEO'.
*            lv_ind_bloqueo  = <lv_contenido>.
*          WHEN 'Z_MOTIVO_BLOQUEO'.
*            lv_mot_bloqueo  = <lv_contenido>.
*          WHEN 'Z_PROCED'.
*            lv_proces = <lv_contenido>.
*          WHEN 'Z_CLASE_RISK'.
*            lv_class_risk = <lv_contenido>.
*          WHEN 'Z_REGLA_VER'.
*            lv_regl_ver = <lv_contenido>.
*            "JPM - Se añaden los campos nuevos
*          WHEN 'Z_INFOTIPO'.
*            lv_infotype = <lv_contenido>.
*          WHEN 'Z_CRED_INTER'.
*            lv_credinter = <lv_contenido>.
*          WHEN 'Z_IMP_INTER'.
*            lv_impinter = <lv_contenido>.
*          WHEN 'Z_MON_INTER'.
*            lv_moninter = <lv_contenido>.
*          WHEN 'Z_CRED_ASEG'.
*            lv_credaseg = <lv_contenido>.
*          WHEN 'Z_IMP_ASEG'.
*            lv_impaseg = <lv_contenido>.
*          WHEN 'Z_MON_ASEG'.
*            lv_monaseg = <lv_contenido>.
*          WHEN OTHERS.
*        ENDCASE.
*      ENDIF.
*    ENDLOOP.
*
*    "Obtenemos la información de los segmentos
*    REFRESH lt_ukm_s_bp_cms_sgm_all.
*    CALL FUNCTION 'UKM_DB_UKMBP_CMS_SGM_ALL_READ'
*      EXPORTING
*        i_partner         = lv_partner
*      TABLES
*        et_bp_cms_sgm_all = lt_ukm_s_bp_cms_sgm_all
*      EXCEPTIONS
*        not_found         = 1
*        OTHERS            = 2.
*    IF sy-subrc EQ 0.
*      READ TABLE lt_ukm_s_bp_cms_sgm_all ASSIGNING FIELD-SYMBOL(<fs_ukm_s_bp_cms_sgm_all>) WITH KEY credit_sgmnt = lv_segmento.
*      IF sy-subrc EQ 0.
*
*        "Añadimos el Rol
*        CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
*          EXPORTING
*            businesspartner             = lv_partner
*            businesspartnerrolecategory = 'UKM000'.
*
*        "Modificación
*        CLEAR ls_ukm_s_bp_cms_sgm_upd.
*        MOVE-CORRESPONDING <fs_ukm_s_bp_cms_sgm_all> TO ls_ukm_s_bp_cms_sgm_upd.
*        ls_ukm_s_bp_cms_sgm_upd-partner        = lv_partner.
*        IF lv_credit_limit IS NOT INITIAL.
*          ls_ukm_s_bp_cms_sgm_upd-credit_limit   = lv_credit_limit.
*        ELSE.
*          ls_ukm_s_bp_cms_sgm_upd-credit_limit = lv_impinter + lv_impaseg.
*        ENDIF.
*        IF lv_ind_bloqueo IS NOT INITIAL.
*          ls_ukm_s_bp_cms_sgm_upd-xblocked       = lv_ind_bloqueo.
*        ENDIF.
*        IF lv_mot_bloqueo IS NOT INITIAL.
*          ls_ukm_s_bp_cms_sgm_upd-block_reason   = lv_mot_bloqueo.
*        ENDIF.
*
** Inicio de modificación - JAT - 27.02.2018 11:46:11
** New Code:
*        CLEAR ls_ukm_s_bp_cms_upd.
*        ls_ukm_s_bp_cms_upd-partner    = ls_ukm_s_bp_cms_sgm_upd-partner.
*        ls_ukm_s_bp_cms_upd-check_rule = lv_regl_ver.
*        ls_ukm_s_bp_cms_upd-limit_rule = lv_proces.
*        ls_ukm_s_bp_cms_upd-risk_class = lv_class_risk.
*        ls_ukm_s_bp_cms_upd-risk_class_chgdt = sy-datum.
*        ls_ukm_s_bp_cms_upd-change_id = 'U'.
*        APPEND ls_ukm_s_bp_cms_upd TO lt_ukm_s_bp_cms_upd.
**Fin de modificación - JAT - 27.02.2018 11:46:11
*
*        ls_ukm_s_bp_cms_sgm_upd-limit_chg_date = sy-datum.
*        ls_ukm_s_bp_cms_sgm_upd-change_id      = 'U'.
*        APPEND ls_ukm_s_bp_cms_sgm_upd TO lt_ukm_s_bp_cms_sgm_upd.
*
*        CLEAR ls_zseitsd_log_cred.
*        ls_zseitsd_log_cred-z_partner    = ls_ukm_s_bp_cms_sgm_upd-partner.
*        ls_zseitsd_log_cred-z_seg_credit = ls_ukm_s_bp_cms_sgm_upd-credit_sgmnt.
*        ls_zseitsd_log_cred-z_limit      = ls_ukm_s_bp_cms_sgm_upd-credit_limit.
*        ls_zseitsd_log_cred-z_estado     = 'M'.
*        APPEND ls_zseitsd_log_cred TO lt_zseitsd_log_cred.
*
*      ELSE.
*
*        "Añadimos el Rol
*        CALL FUNCTION 'BAPI_BUPA_ROLE_ADD_2'
*          EXPORTING
*            businesspartner             = lv_partner
*            businesspartnerrolecategory = 'UKM000'.
*
*        "Insert
*        CLEAR ls_ukm_s_bp_cms_sgm_upd.
*        ls_ukm_s_bp_cms_sgm_upd-partner        = lv_partner.
*        ls_ukm_s_bp_cms_sgm_upd-credit_sgmnt   = lv_segmento.
*        IF lv_credit_limit IS NOT INITIAL.
*          ls_ukm_s_bp_cms_sgm_upd-credit_limit   = lv_credit_limit.
*        ELSE.
*          ls_ukm_s_bp_cms_sgm_upd-credit_limit = lv_impinter + lv_impaseg.
*        ENDIF.
*
*        ls_ukm_s_bp_cms_sgm_upd-xblocked       = lv_ind_bloqueo.
*        ls_ukm_s_bp_cms_sgm_upd-block_reason   = lv_mot_bloqueo.
*        ls_ukm_s_bp_cms_sgm_upd-limit_chg_date = sy-datum.
*
** Inicio de modificación - JAT - 27.02.2018 11:46:11
** New Code:
*        CLEAR ls_ukm_s_bp_cms_upd.
*        ls_ukm_s_bp_cms_upd-partner    = ls_ukm_s_bp_cms_sgm_upd-partner.
*        ls_ukm_s_bp_cms_upd-check_rule = lv_regl_ver.
*        ls_ukm_s_bp_cms_upd-limit_rule = lv_proces.
*        ls_ukm_s_bp_cms_upd-risk_class = lv_class_risk.
*        ls_ukm_s_bp_cms_upd-risk_class_chgdt = sy-datum.
*        ls_ukm_s_bp_cms_upd-change_id = 'I'.
*        APPEND ls_ukm_s_bp_cms_upd TO lt_ukm_s_bp_cms_upd.
**Fin de modificación - JAT - 27.02.2018 11:46:11
*
*        ls_ukm_s_bp_cms_sgm_upd-change_id      = 'I'.
*        APPEND ls_ukm_s_bp_cms_sgm_upd TO lt_ukm_s_bp_cms_sgm_upd.
*        CLEAR ls_zseitsd_log_cred.
*        ls_zseitsd_log_cred-z_partner    = ls_ukm_s_bp_cms_sgm_upd-partner.
*        ls_zseitsd_log_cred-z_seg_credit = ls_ukm_s_bp_cms_sgm_upd-credit_sgmnt.
*        ls_zseitsd_log_cred-z_limit      = ls_ukm_s_bp_cms_sgm_upd-credit_limit.
*        ls_zseitsd_log_cred-z_estado     = 'I'.
*        APPEND ls_zseitsd_log_cred TO lt_zseitsd_log_cred.
*      ENDIF.
*
*      REFRESH lt_adition.
*      "New code JPM.
*      ls_adition-criterium = lv_segmento.
*      ls_adition-addtype = lv_infotype.
*      ls_adition-data_type = lv_credinter.
*      ls_adition-amount = lv_impinter.
*      ls_adition-currency = lv_moninter.
*      APPEND ls_adition TO lt_adition.
*      CLEAR: ls_adition.
*      ls_adition-criterium = lv_segmento.
*      ls_adition-addtype = lv_infotype.
*      ls_adition-data_type = lv_credaseg.
*      ls_adition-amount = lv_impaseg.
*      ls_adition-currency = lv_monaseg.
*      APPEND ls_adition TO lt_adition.
*      "End new code
*      CALL FUNCTION 'UKM_DB_UKMBP_CMS_EXECUTE'
*        TABLES
*          n_ukmbp_cms     = lt_ukm_s_bp_cms_upd
*          o_ukmbp_cms     = lt_ukm_s_bp_cms_upd
*          n_ukmbp_cms_sgm = lt_ukm_s_bp_cms_sgm_upd
*          o_ukmbp_cms_sgm = lt_ukm_s_bp_cms_sgm_upd.
*
*
*      wl_bpartner = lv_partner.
*      "Campos adicionales - New code JPM
*      REFRESH lt_adition_aux.
*      CALL FUNCTION 'BAPI_BUPA_FS_BPADDITION_GET'
*        EXPORTING
*          businesspartner = wl_bpartner
*        TABLES
*          addition        = lt_adition_aux.
*
*      IF lt_adition_aux[] IS INITIAL.
*        wl_change = 'X'.
*        CALL FUNCTION 'BAPI_BUPA_FS_BPADDITION_ADD'
*          EXPORTING
*            businesspartner = wl_bpartner
*            changedocu      = wl_change
*            testrun         = wl_test
*          TABLES
*            return          = lt_return
*            addition        = lt_adition.
*
**        bapireturncheck.
*        LOOP AT lt_return INTO DATA(wa_return) WHERE type = 'E'.
*          APPEND wa_return TO tl_bapiret.
*        ENDLOOP.
*      ELSE.
*
*        CLEAR ls_adition.
**        LOOP AT lt_adition_aux INTO ls_adition.
**          IF ls_adition-data_type = 1."Interno
**            IF ls_adition-amount <> lv_impinter.
**              ls_adchange-amount = 'X'.
**            ELSEIF ls_adition-currency <> lv_moninter.
**              ls_adchange-currency = 'X'.
**            ENDIF.
**          ELSE."Aseguradora
**            IF ls_adition-amount <> lv_impaseg.
**              ls_adchange-amount = 'X'.
**            ELSEIF ls_adition-currency <> lv_monaseg.
**              ls_adchange-currency = 'X'.
**            ENDIF.
**          ENDIF.
**          IF ls_adchange IS NOT INITIAL.
**            APPEND ls_adchange TO lt_adchange.
**            CLEAR ls_adchange.
**          ELSE.
***            DELETE lt_adition WHERE data_type = ls_adition-data_type.
**          ENDIF.
**        ENDLOOP.
**        IF lt_adchange[] IS NOT INITIAL.
*        wl_change = 'X'.
**          CALL FUNCTION 'BAPI_BUPA_FS_BPADDITION_CHANGE'
***       STARTING NEW TASK 'UKM_CHG'
**            EXPORTING
**              businesspartner = wl_bpartner
**              changedocu      = wl_change
**              testrun         = wl_test
**            TABLES
**              addition        = lt_adition
**              additionchange  = lt_adchange
**              return          = lt_return.
**          bapireturncheck.
*        CALL FUNCTION 'BAPI_BUPA_FS_BPADDITION_REMOVE'
**          starting new task 'UKM_REM'
*          EXPORTING
*            businesspartner = wl_bpartner
*            changedocu      = wl_change
*            testrun         = wl_test
*          TABLES
*            addition        = lt_adition_aux
*            return          = lt_return.
*
**          bapireturncheck.
*        LOOP AT lt_return INTO wa_return WHERE type = 'E'.
*          APPEND wa_return TO tl_bapiret.
*        ENDLOOP.
*
*        CALL FUNCTION 'BAPI_BUPA_FS_BPADDITION_ADD'
*          EXPORTING
*            businesspartner = wl_bpartner
*            changedocu      = wl_change
*            testrun         = wl_test
*          TABLES
*            return          = lt_return
*            addition        = lt_adition.
**          bapireturncheck.
*        LOOP AT lt_return INTO wa_return WHERE type = 'E'.
*          APPEND wa_return TO tl_bapiret.
*        ENDLOOP.
**        ENDIF.
*      ENDIF.
*      "End new code JPM
*      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
*
*    ENDIF.
*
*  ENDLOOP.
*
*
*  CREATE OBJECT lc_popup.
*  lc_popup->display( EXPORTING: im_nombre_estructura = 'ZSEITSD_LOG_CRED'
*                      CHANGING: im_tabla = lt_zseitsd_log_cred ).
*
*  IF tl_bapiret[] IS NOT INITIAL.
*    CREATE OBJECT lc_popup2.
*    lc_popup2->display( EXPORTING: im_nombre_estructura = 'BAPIRET2'
*                        CHANGING: im_tabla = tl_bapiret ).
*  ENDIF.
*
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form RUTINA_CONVERTION
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
*FORM rutina_convertion  TABLES it_structure_excell TYPE STANDARD TABLE.
*
*  DATA: lo_descr    TYPE REF TO cl_abap_structdescr,
*        lv_variable TYPE string,
*        lv_length   TYPE i,
*        lv_mask     TYPE string.
*
*  FIELD-SYMBOLS: <lv_contenido> TYPE any.
*
*  LOOP AT it_structure_excell ASSIGNING FIELD-SYMBOL(<fs_table>).
*    lo_descr ?= cl_abap_typedescr=>describe_by_data( <fs_table> ).
*    LOOP AT lo_descr->components ASSIGNING FIELD-SYMBOL(<ls_comp>).
*
*      CLEAR: lv_length, lv_mask.
*      READ TABLE t_zseitsd_car_cred ASSIGNING FIELD-SYMBOL(<fs_carga_mat>)
*        WITH KEY fieldname = <ls_comp>-name.
*      IF sy-subrc EQ 0.
*        PERFORM get_mask_length USING    <fs_carga_mat>-element_data
*                                CHANGING lv_length
*                                         lv_mask.
*
*        IF lv_mask IS NOT INITIAL.
*          CONCATENATE '<fs_table>-' <ls_comp>-name INTO lv_variable.
*          ASSIGN (lv_variable) TO <lv_contenido>.
*          IF <lv_contenido> IS ASSIGNED.
*            PERFORM convert         USING <fs_carga_mat>-element_data
*                                          <lv_contenido>
*                                          lv_length
*                                          lv_mask.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*    ENDLOOP.
*  ENDLOOP.
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form CONVERT
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
**      -->P_<FS_CARGA_MAT>_ELEMENT_DATA  text
**      -->P_<LV_CONTENIDO>  text
**      -->P_LV_LENGTH  text
**      -->P_LV_MASK  text
**&---------------------------------------------------------------------*
*FORM convert  USING pu_field  TYPE any
*                    pu_value  TYPE any
*                    pu_length TYPE i
*                    pu_mask   TYPE string.
*
*  DATA:lf_convexit    TYPE funcname,
*       i_comp         TYPE cl_abap_structdescr=>component_table,
*       wa_comp        LIKE LINE OF i_comp,
*       wf_type_struct TYPE REF TO cl_abap_structdescr,
*       wf_data_str    TYPE REF TO data.
*
*  FIELD-SYMBOLS:<fs_t>  TYPE any,
*                <fs_wa> TYPE any.
*
*  CLEAR:i_comp[], wa_comp.
*  wa_comp-name = 'FIELD'.
*  wa_comp-type ?= cl_abap_elemdescr=>get_c( pu_length ).
*  APPEND wa_comp TO i_comp.
*  TRY.
*      wf_type_struct = cl_abap_structdescr=>create( p_components = i_comp ).
*    CATCH cx_sy_struct_creation.
*  ENDTRY.
*  CREATE DATA : wf_data_str TYPE HANDLE wf_type_struct.
*  ASSIGN wf_data_str->* TO <fs_wa>.
*  CHECK sy-subrc = 0.
*  ASSIGN COMPONENT 'FIELD' OF STRUCTURE <fs_wa> TO <fs_t>.
*  CHECK sy-subrc = 0.
*
*  CONCATENATE 'CONVERSION_EXIT_' pu_mask '_INPUT' INTO lf_convexit.
*  CALL FUNCTION lf_convexit
*    EXPORTING
*      input  = pu_value
*    IMPORTING
*      output = <fs_t>.
*
*  pu_value = <fs_t>.
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form GET_MASK_LENGTH
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
*FORM get_mask_length USING lv_field  TYPE any
*                  CHANGING pc_length TYPE i
*                           pc_mask   TYPE string.
*
*  DATA l_rda_data TYPE REF TO data.
*
*  FIELD-SYMBOLS:<fs> TYPE any.
*
*  TRY.
*      CREATE DATA l_rda_data TYPE (lv_field).
*      ASSIGN l_rda_data->* TO <fs>.
*      IF <fs> IS ASSIGNED.
*        DESCRIBE FIELD <fs> OUTPUT-LENGTH pc_length
*                                EDIT MASK pc_mask.
*
*        REPLACE '==' IN pc_mask WITH space.
*        CONDENSE pc_mask NO-GAPS.
*      ENDIF.
*    CATCH cx_sy_create_data_error.
*
*  ENDTRY.
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form ELIMINAR_DUPLICADOS
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
*FORM validaciones_excel .
*
*  DATA: lv_primary_key1 TYPE string,
*        lv_primary_key2 TYPE string,
*        lv_where        TYPE string,
*        lv_date_null    TYPE begdat,
*        lv_field        TYPE string,
*        lv_partner      TYPE bu_partner,
*        lv_segmento     TYPE ukm_credit_sgmnt,
*
*        lv_primary_key3 TYPE string.
*
*  FIELD-SYMBOLS: <lv_contenido> TYPE any,
*                 <lv_consum>    TYPE any,
*                 <lv_unicon>    TYPE any,
*                 <lv_textcon>   TYPE any,
*                 <lv_limite>    TYPE ukm_credit_limit,
*                 <lv_clas_risk> TYPE zzseie_sd_id_clas_credito.
*
*  "Eliminamos duplicados
*  lv_primary_key1 = 'Z_PARTNER'.
*  lv_primary_key2 = 'Z_SEG_CREDIT'.
**  lv_primary_key3 = 'Z_BEGDAT'.
*
*  SORT <gt_table_dynamic> BY (lv_primary_key1) (lv_primary_key2)." (lv_primary_key3).
*  DELETE ADJACENT DUPLICATES FROM <gt_table_dynamic> COMPARING (lv_primary_key1) (lv_primary_key2)." (lv_primary_key3).
*
*  <gt_table_dynamic_aux> = <gt_table_dynamic>[].
*
**  "Me quedo con una solo un crédito temporal activo
**  lv_where = 'z_begdat EQ lv_date_null'.
**  DELETE <gt_table_dynamic_aux> WHERE (lv_where).
**  SORT <gt_table_dynamic_aux> BY (lv_primary_key1) (lv_primary_key2).
**  DELETE ADJACENT DUPLICATES FROM <gt_table_dynamic_aux> COMPARING (lv_primary_key1) (lv_primary_key2).
*
**  "Añado la crédito temporal activo al los valores que informan el credito límite
**  lv_where = 'z_begdat NE lv_date_null'.
**  DELETE <gt_table_dynamic> WHERE (lv_where).
*
*  "Añado los valores independientes de la vigencia
*  LOOP AT <gt_table_dynamic> ASSIGNING FIELD-SYMBOL(<fs_zseitsd_cre_ltmp_aux>).
*    UNASSIGN <lv_contenido>.
*    lv_field = '<fs_zseitsd_cre_ltmp_aux>-Z_PARTNER'.
*    ASSIGN (lv_field) TO <lv_contenido>.
*    IF <lv_contenido> IS ASSIGNED.
*      lv_partner      = <lv_contenido>.
*    ENDIF.
*
*    UNASSIGN <lv_contenido>.
*    lv_field = '<fs_zseitsd_cre_ltmp_aux>-Z_SEG_CREDIT'.
*    ASSIGN (lv_field) TO <lv_contenido>.
*    IF <lv_contenido> IS ASSIGNED.
*      lv_segmento     = <lv_contenido>.
*    ENDIF.
*
*    UNASSIGN <lv_contenido>.
*    lv_field = '<fs_zseitsd_cre_ltmp_aux>-Z_LIMIT'.
*    ASSIGN (lv_field) TO <lv_limite>.
*
**    UNASSIGN <lv_contenido>.
**    lv_field = '<fs_zseitsd_cre_ltmp_aux>-Z_ID_CLAS_CRED'.
**    ASSIGN (lv_field) TO <lv_clas_risk>.
**
**    UNASSIGN <lv_contenido>.
**    lv_field = '<fs_zseitsd_cre_ltmp_aux>-Z_CONSUM'.
**    ASSIGN (lv_field) TO <lv_consum>.
**
**    UNASSIGN <lv_contenido>.
**    lv_field = '<fs_zseitsd_cre_ltmp_aux>-Z_UNICON'.
**    ASSIGN (lv_field) TO <lv_unicon>.
**
**    UNASSIGN <lv_contenido>.
**    lv_field = '<fs_zseitsd_cre_ltmp_aux>-Z_TEXTCON'.
**    ASSIGN (lv_field) TO <lv_textcon>.
*
*    SELECT * INTO @DATA(ls_credit_limit)
*      FROM zseitsd_cre_ltmp
*      UP TO 1 ROWS
*      WHERE z_partner    EQ @lv_partner
*        AND z_seg_credit EQ @lv_segmento
*        AND z_active     EQ @abap_false
*        AND z_begdat     EQ @lv_date_null.
*    ENDSELECT.
*    IF sy-subrc EQ 0.
*      IF <lv_limite> IS INITIAL.
*        <lv_limite> = ls_credit_limit-z_limit.
*      ENDIF.
**      IF <lv_clas_risk> IS INITIAL.
**        <lv_clas_risk> = ls_credit_limit-z_id_clas_cred.
**      ENDIF.
*    ENDIF.
*
**    SELECT SINGLE * INTO @DATA(ls_cre_cons)
**      FROM zseitsd_cre_cons
**      WHERE z_partner    EQ @lv_partner
**        AND z_seg_credit EQ @lv_segmento.
**    IF sy-subrc EQ 0.
**      IF <lv_consum> IS INITIAL.
**        <lv_consum> = ls_cre_cons-z_consum.
**      ENDIF.
**      IF <lv_unicon> IS INITIAL.
**        <lv_unicon> = ls_cre_cons-z_unicon.
**      ENDIF.
**      IF <lv_textcon> IS INITIAL.
**        <lv_textcon> = ls_cre_cons-z_textcon.
**      ENDIF.
**    ENDIF.
*
*  ENDLOOP.
*
*ENDFORM.
**&---------------------------------------------------------------------*
**& Form REEMPLACE_RUN_ID_FOR_BP
**&---------------------------------------------------------------------*
**& text
**&---------------------------------------------------------------------*
**      -->P_<GT_TABLE_DYNAMIC>  text
**&---------------------------------------------------------------------*
*FORM reemplace_run_id_for_bp  TABLES it_structure_txt TYPE STANDARD TABLE.
*
*  DATA: lv_field      TYPE string,
*        lr_run_id     TYPE RANGE OF bu_id_number,
*        lr_run_id_aux TYPE RANGE OF bu_id_number.
*  DATA: wa_bapiret TYPE bapiret2.
*
*  FIELD-SYMBOLS <lv_contenido> TYPE any.
*
*  LOOP AT it_structure_txt ASSIGNING FIELD-SYMBOL(<fs_structure_txt>).
*    UNASSIGN <lv_contenido>.
*    lv_field = '<fs_structure_txt>-Z_PARTNER'.
*    ASSIGN (lv_field) TO <lv_contenido>.
*    IF <lv_contenido> IS ASSIGNED.
*      READ TABLE lr_run_id TRANSPORTING NO FIELDS WITH KEY low = <lv_contenido>.
*      IF sy-subrc NE 0.
*        "Obtenemos los RUN_ID configurados
*        lr_run_id_aux = VALUE #( sign = 'I'
*                               option = 'EQ'
*                                ( low = <lv_contenido> ) ).
*        MOVE-CORRESPONDING lr_run_id_aux[] TO lr_run_id[]  KEEPING TARGET LINES.
*      ENDIF.
*    ENDIF.
*  ENDLOOP.
*
*  IF lr_run_id[] IS NOT INITIAL.
*    SELECT partner,type,idnumber
*      INTO TABLE @DATA(lt_but0id)
*      FROM but0id
*      WHERE idnumber IN @lr_run_id[].
*    IF sy-subrc EQ 0.
*      LOOP AT it_structure_txt ASSIGNING <fs_structure_txt>.
*        UNASSIGN <lv_contenido>.
*        lv_field = '<fs_structure_txt>-Z_PARTNER'.
*        ASSIGN (lv_field) TO <lv_contenido>.
*        IF <lv_contenido> IS ASSIGNED.
*          READ TABLE lt_but0id ASSIGNING FIELD-SYMBOL(<fs_but0id>) WITH KEY idnumber = <lv_contenido>.
*          IF sy-subrc EQ 0.
*            <lv_contenido> = <fs_but0id>-partner.
*          ELSE.
*            wa_bapiret-type = 'E'.
*            wa_bapiret-message = 'El run id' && space && <lv_contenido> && space && 'no existe'.
*            APPEND wa_bapiret TO tl_bapiret.
*            DELETE TABLE it_structure_txt FROM <fs_structure_txt>.
*          ENDIF.
*        ENDIF.
*      ENDLOOP.
*    ENDIF.
*  ENDIF.
*ENDFORM.
