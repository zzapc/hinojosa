*&---------------------------------------------------------------------*
*&  Include           ZSEIS_PATRON_ALV_FUNC_EDIT
*&---------------------------------------------------------------------*

FORM f_config_dynpro_edit  USING  wl_config_edit TYPE st_config_edit.
  IF wl_config_edit-nombre_workarea IS INITIAL.
    wl_config_edit-nombre_workarea = wl_config_edit-nombre_tabla.
  ENDIF.
  APPEND wl_config_edit TO tg_config_edit.


  DATA: rl_strucdescr   TYPE REF TO cl_abap_structdescr.
  IF wl_config_edit-nombre_tabla IS NOT INITIAL.
    rl_strucdescr ?= cl_abap_elemdescr=>describe_by_name( wl_config_edit-nombre_tabla ).
    IF rl_strucdescr->is_ddic_type( ) = 'X'.

      "Get the details of the table fields
      DATA(tl_tab_fields) = rl_strucdescr->get_ddic_field_list( ).
      LOOP AT tl_tab_fields ASSIGNING FIELD-SYMBOL(<fs_tab_field>) WHERE keyflag = 'X' AND domname <> 'MANDT'.
        PERFORM f_anyadir_campo_pk USING wl_config_edit-dynpro <fs_tab_field>-fieldname.
      ENDLOOP.
    ENDIF.
  ENDIF.


ENDFORM.


*&---------------------------------------------------------------------*
*&      Form  F_SAVE_PATRON
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM f_save_data_patron USING vp_solo_cabecera CHANGING vp_error.
  DATA: vl_msg_error TYPE string.
  DATA wl_alv TYPE st_lin_alv.

  DATA: vl_data_bd  TYPE REF TO data.
  FIELD-SYMBOLS: <fs_data_bd>      TYPE any,
                 <fs_campo_delete> TYPE any.

  DATA vl_accion TYPE c.

  "Grabamos cabecera
  IF vg_datos_modificados_cab = 'X'.
    vl_accion = 'I'.
    READ TABLE tg_config_edit ASSIGNING FIELD-SYMBOL(<fs_config_edit>) WITH KEY dynpro = sy-dynnr.
    CHECK sy-subrc = 0.

    IF vg_alta_cabecera = 'X'.
      PERFORM f_insert_bd_pre IN PROGRAM (sy-repid) IF FOUND
        TABLES it_alv
        USING  sy-dynnr 0 wl_alv vp_error vl_msg_error.
      PERFORM f_validar_bd IN PROGRAM (sy-repid) IF FOUND
        TABLES it_alv
        USING  vl_accion sy-dynnr 0 wl_alv vp_error vl_msg_error.
      IF vp_error = space.

        TRY .
            PERFORM f_insert_bd IN PROGRAM (sy-repid) TABLES it_alv
                                                      USING  sy-dynnr 0 wl_alv vp_error vl_msg_error.
          CATCH cx_sy_dyn_call_illegal_form.
            CHECK <fs_config_edit>-nombre_tabla IS NOT INITIAL.
            CHECK <fs_config_edit>-nombre_workarea IS NOT INITIAL.
            ASSIGN (<fs_config_edit>-nombre_workarea) TO FIELD-SYMBOL(<fs_workarea>).
            CHECK sy-subrc = 0.

            CREATE DATA vl_data_bd TYPE (<fs_config_edit>-nombre_tabla).
            ASSIGN vl_data_bd->* TO <fs_data_bd>.
            MOVE-CORRESPONDING <fs_workarea> TO <fs_data_bd>.
            INSERT (<fs_config_edit>-nombre_tabla) FROM <fs_data_bd>.
            IF sy-subrc <> 0.
              vp_error = 'X'.
              vl_msg_error = 'Error al insertar cabecera'.
            ENDIF.
        ENDTRY.
      ENDIF.

    ELSE.
      vl_accion = 'M'.
      PERFORM f_update_bd_pre IN PROGRAM (sy-repid) IF FOUND
        TABLES it_alv
        USING  sy-dynnr 0 wl_alv vp_error vl_msg_error.
      PERFORM f_validar_bd IN PROGRAM (sy-repid) IF FOUND
        TABLES it_alv
        USING  vl_accion sy-dynnr 0 wl_alv vp_error vl_msg_error.
      IF vp_error = space.

        TRY .
            PERFORM f_update_bd IN PROGRAM (sy-repid) TABLES it_alv
                                                      USING  sy-dynnr 0 wl_alv vp_error vl_msg_error.
          CATCH cx_sy_dyn_call_illegal_form.
            CHECK <fs_config_edit>-nombre_tabla IS NOT INITIAL.
            CHECK <fs_config_edit>-nombre_workarea IS NOT INITIAL.
            ASSIGN (<fs_config_edit>-nombre_workarea) TO <fs_workarea>.
            CHECK sy-subrc = 0.

            CREATE DATA vl_data_bd TYPE (<fs_config_edit>-nombre_tabla).
            ASSIGN vl_data_bd->* TO <fs_data_bd>.
            MOVE-CORRESPONDING <fs_workarea> TO <fs_data_bd>.
            UPDATE (<fs_config_edit>-nombre_tabla) FROM <fs_data_bd>.
            IF sy-subrc <> 0.
              vp_error = 'X'.
              vl_msg_error = 'Error al actualizar cabecera'.
            ENDIF.
        ENDTRY.
      ENDIF.
    ENDIF.
  ENDIF.


  "Grabamos lineas
  IF vp_solo_cabecera = space.
    LOOP AT tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen>).
      CHECK vp_error IS INITIAL.

      READ TABLE tg_config_edit ASSIGNING <fs_config_edit> WITH KEY dynpro = <fs_config_subscreen>-subscreen.
      CHECK sy-subrc = 0.


*      CLEAR: wl_alv, vl_accion.
*      LOOP AT <fs_config_subscreen>-tabla TRANSPORTING NO FIELDS WHERE zzmarca_edit IS NOT INITIAL. vl_accion = 'M'. EXIT. ENDLOOP.
*        PERFORM f_validar_bd IN PROGRAM (sy-repid) IF FOUND
*          TABLES <fs_config_subscreen>-tabla
*          USING  vl_accion <fs_config_subscreen>-subscreen 0  wl_alv vp_error vl_msg_error.
*      ENDIF.
*      CHECK vp_error IS INITIAL.


      LOOP AT <fs_config_subscreen>-tabla ASSIGNING FIELD-SYMBOL(<fs_alv>) WHERE zzmarca_edit IS NOT INITIAL.
        DATA(vl_tabix) = sy-tabix.
        DATA vl_error_al_borrar TYPE xfeld.

        MOVE-CORRESPONDING <fs_alv> TO wl_alv.
        CASE <fs_alv>-zzmarca_edit.
          WHEN 'D'.
            vl_error_al_borrar = space.

            PERFORM f_delete_bd_pre IN PROGRAM (sy-repid) IF FOUND
              TABLES <fs_config_subscreen>-tabla
              USING  <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error.
            vl_error_al_borrar = vp_error.

            IF vp_error = space.
              MOVE-CORRESPONDING wl_alv TO <fs_alv>.
              PERFORM f_validar_bd IN PROGRAM (sy-repid) IF FOUND
                TABLES <fs_config_subscreen>-tabla
                USING  <fs_alv>-zzmarca_edit <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error .
              vl_error_al_borrar = vp_error.
            ENDIF.
            IF vp_error = space.
              MOVE-CORRESPONDING wl_alv TO <fs_alv>.

              TRY .
                  PERFORM f_delete_bd IN PROGRAM (sy-repid) TABLES <fs_config_subscreen>-tabla
                                                            USING  <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error.

                CATCH cx_sy_dyn_call_illegal_form.
                  CHECK <fs_config_edit>-nombre_tabla IS NOT INITIAL.

                  CREATE DATA vl_data_bd TYPE (<fs_config_edit>-nombre_tabla).
                  ASSIGN vl_data_bd->* TO <fs_data_bd>.
                  MOVE-CORRESPONDING wl_alv TO <fs_data_bd>.

                  IF <fs_config_edit>-borrado_logico = 'X'.
                    ASSIGN COMPONENT <fs_config_edit>-campo_borrado_logico OF STRUCTURE <fs_data_bd> TO <fs_campo_delete>.
                    CHECK sy-subrc = 0.
                    <fs_campo_delete> = 'X'.
                  ENDIF.

                  IF <fs_config_edit>-borrado_logico = 'X'.
                    UPDATE (<fs_config_edit>-nombre_tabla) FROM <fs_data_bd>.
                  ELSE.
                    DELETE (<fs_config_edit>-nombre_tabla) FROM <fs_data_bd>.
                  ENDIF.
                  IF sy-subrc <> 0.
                    CLEAR <fs_campo_delete>.
                    vp_error = 'X'.
                    vl_msg_error = 'Error al borrar líneas'.
                  ENDIF.
              ENDTRY.
              vl_error_al_borrar = vp_error.
            ENDIF.

            IF vl_error_al_borrar = 'X'.
              CLEAR <fs_alv>-zzmarca_edit.
            ENDIF.


          WHEN 'A'.
            PERFORM f_activar_bd_pre IN PROGRAM (sy-repid) IF FOUND
              TABLES <fs_config_subscreen>-tabla
              USING  <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error.
            IF vp_error = space.
              MOVE-CORRESPONDING wl_alv TO <fs_alv>.
              PERFORM f_validar_bd IN PROGRAM (sy-repid) IF FOUND
                TABLES <fs_config_subscreen>-tabla
                USING  <fs_alv>-zzmarca_edit <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error .
            ENDIF.
            IF vp_error = space.
              MOVE-CORRESPONDING wl_alv TO <fs_alv>.

              TRY.
                  PERFORM f_activar_bd IN PROGRAM (sy-repid) TABLES <fs_config_subscreen>-tabla
                                                             USING  <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error.

                CATCH cx_sy_dyn_call_illegal_form.
                  CHECK <fs_config_edit>-nombre_tabla IS NOT INITIAL.
                  IF <fs_config_edit>-borrado_logico = 'X'.
                    CREATE DATA vl_data_bd TYPE (<fs_config_edit>-nombre_tabla).
                    ASSIGN vl_data_bd->* TO <fs_data_bd>.
                    MOVE-CORRESPONDING wl_alv TO <fs_data_bd>.

                    ASSIGN COMPONENT <fs_config_edit>-campo_borrado_logico OF STRUCTURE <fs_data_bd> TO <fs_campo_delete>.
                    CHECK sy-subrc = 0.
                    <fs_campo_delete> = ' '.

                    UPDATE (<fs_config_edit>-nombre_tabla) FROM <fs_data_bd>.
                    IF sy-subrc <> 0.
                      vp_error = 'X'.
                      vl_msg_error = 'Error al activar líneas'.
                    ENDIF.
                  ENDIF.



*TODO JCB:          PERFORM f_borrado_logico USING <fs_config_subscreen>-subscreen wl_alv CHANGING vp_error vl_msg_error.


*                  "Dynamic Native SQL
*                  vl_update = |UPDATE { <fs_config_edit>-nombre_tabla }|.
*                  vl_set    = |SET { <fs_config_edit>-campo_borrado_logico } = ' '|.
*
*                  LOOP AT it_alv_pk ASSIGNING <fs_alv_pk> WHERE dynpro = <fs_config_subscreen>-subscreen.
*                    ASSIGN COMPONENT <fs_alv_pk>-campo_pk OF STRUCTURE wl_alv TO <fs_campo_pk>.
*                    CHECK sy-subrc = 0.
*
*                    IF vl_where IS INITIAL.
*                      vl_where = |WHERE { <fs_alv_pk>-campo_pk } = '{ <fs_campo_pk> }'|.
*                    ELSE.
*                      vl_where = |{ vl_where } AND { <fs_alv_pk>-campo_pk } = '{ <fs_campo_pk> }'|.
*                    ENDIF.
*                  ENDLOOP.
*
*                  TRY.
*                      vl_sql = |{ vl_update } { vl_set } { vl_where } |.
*                      NEW cl_sql_statement( )->execute_update( vl_sql ).
*                    CATCH cx_sql_exception INTO rl_sql_exception.
*                      ROLLBACK WORK.
*                      MESSAGE rl_sql_exception->get_text( ) TYPE 'I' DISPLAY LIKE 'E'.
*                      RETURN.
*                  ENDTRY.

              ENDTRY.

            ENDIF.

          WHEN 'I'.
            PERFORM f_insert_bd_pre IN PROGRAM (sy-repid) IF FOUND
              TABLES <fs_config_subscreen>-tabla
              USING  <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error.
            IF vp_error = space.
              MOVE-CORRESPONDING wl_alv TO <fs_alv>.
              PERFORM f_validar_bd IN PROGRAM (sy-repid) IF FOUND
                TABLES <fs_config_subscreen>-tabla
                USING  <fs_alv>-zzmarca_edit <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error .
            ENDIF.

            "Validar PK
            DATA vl_pk_encontrada TYPE xfeld.
            DATA vl_num_encontrados TYPE i.
            CLEAR vl_num_encontrados.
            IF vp_error = space AND <fs_config_edit>-validar_pk = 'X'.
              LOOP AT <fs_config_subscreen>-tabla ASSIGNING FIELD-SYMBOL(<fs_linea>).
                vl_pk_encontrada = 'X'.
                LOOP AT it_alv_pk ASSIGNING FIELD-SYMBOL(<fs_alv_pk>) WHERE dynpro = <fs_config_subscreen>-subscreen.
                  ASSIGN COMPONENT <fs_alv_pk>-campo_pk OF STRUCTURE wl_alv     TO FIELD-SYMBOL(<fs_valor_alta>).   CHECK sy-subrc = 0.
                  ASSIGN COMPONENT <fs_alv_pk>-campo_pk OF STRUCTURE <fs_linea> TO FIELD-SYMBOL(<fs_valor_linea>).  CHECK sy-subrc = 0.
                  IF <fs_valor_alta> <> <fs_valor_linea>.
                    CLEAR vl_pk_encontrada. EXIT.
                  ENDIF.
                ENDLOOP.
                IF vl_pk_encontrada = 'X'.
                  IF <fs_linea>-zzmarca_edit = 'I' AND vl_num_encontrados = 0.
                    "Ignoro mi propio registro, claro
                    ADD 1 TO vl_num_encontrados.
                  ELSE.
                    vp_error      = 'X'.
                    vl_msg_error  = 'Existe un registro con esa clave. No se puede dar de alta'.
                    EXIT.
                  ENDIF.
                ENDIF.
              ENDLOOP.
            ENDIF.

            IF vp_error = space.
              TRY .
                  PERFORM f_insert_bd IN PROGRAM (sy-repid)  TABLES <fs_config_subscreen>-tabla
                                                             USING  <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error.

                CATCH cx_sy_dyn_call_illegal_form.
                  CHECK <fs_config_edit>-nombre_tabla IS NOT INITIAL.
                  CREATE DATA vl_data_bd TYPE (<fs_config_edit>-nombre_tabla).
                  ASSIGN vl_data_bd->* TO <fs_data_bd>.
                  MOVE-CORRESPONDING wl_alv TO <fs_data_bd>.
                  INSERT (<fs_config_edit>-nombre_tabla) FROM <fs_data_bd>.
                  IF sy-subrc <> 0.
                    vp_error = 'X'.
                    vl_msg_error = 'Error al insertar líneas'.
                  ENDIF.
              ENDTRY.
            ENDIF.

          WHEN 'M'.
            PERFORM f_update_bd_pre IN PROGRAM (sy-repid) IF FOUND
              TABLES <fs_config_subscreen>-tabla
              USING  <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error.
            IF vp_error = space.
              MOVE-CORRESPONDING wl_alv TO <fs_alv>.
              PERFORM f_validar_bd IN PROGRAM (sy-repid) IF FOUND
                TABLES <fs_config_subscreen>-tabla
                USING  <fs_alv>-zzmarca_edit <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error.
            ENDIF.
            IF vp_error = space.
              TRY .
                  PERFORM f_update_bd IN PROGRAM (sy-repid) TABLES <fs_config_subscreen>-tabla
                                                            USING  <fs_config_subscreen>-subscreen vl_tabix wl_alv vp_error vl_msg_error.

                CATCH cx_sy_dyn_call_illegal_form.
                  CHECK <fs_config_edit>-nombre_tabla IS NOT INITIAL.
                  CREATE DATA vl_data_bd TYPE (<fs_config_edit>-nombre_tabla).
                  ASSIGN vl_data_bd->* TO <fs_data_bd>.
                  MOVE-CORRESPONDING wl_alv TO <fs_data_bd>.
                  UPDATE (<fs_config_edit>-nombre_tabla) FROM <fs_data_bd>.
                  IF sy-subrc <> 0.
                    vp_error = 'X'.
                    vl_msg_error = 'Error al actualizar líneas'.
                  ENDIF.
              ENDTRY.

            ENDIF.

        ENDCASE.

        IF vp_error IS NOT INITIAL. EXIT. ENDIF.
      ENDLOOP.

    ENDLOOP.
  ENDIF.



  "Última llamada para validar toda la pantalla
  IF vp_error IS INITIAL.
    PERFORM f_validar_bd IN PROGRAM (sy-repid) IF FOUND
      TABLES it_alv
      USING  ' ' sy-dynnr 0 wl_alv vp_error vl_msg_error.
  ENDIF.



  IF vp_error IS INITIAL.
    CLEAR it_alv.
    PERFORM f_llenar_datos  TABLES it_alv USING sy-dynnr.
    DATA wl_is_stable TYPE lvc_s_stbl.

    LOOP AT tg_config_subscreen ASSIGNING FIELD-SYMBOL(<fs_config_subscreen_aux>) WHERE event_receiver IS BOUND.
      CLEAR: <fs_config_subscreen_aux>-event_receiver->datos_modificados, <fs_config_subscreen_aux>-tabla.
      PERFORM f_llenar_datos  TABLES <fs_config_subscreen_aux>-tabla USING <fs_config_subscreen_aux>-subscreen.
      PERFORM f_set_estilos_alv         USING <fs_config_subscreen_aux>-subscreen CHANGING <fs_config_subscreen_aux>-tabla.
      IF <fs_config_subscreen_aux>-alv IS BOUND.
        wl_is_stable-row = 'X'.
        wl_is_stable-col = 'X'.
        <fs_config_subscreen_aux>-alv->refresh_table_display( is_stable = wl_is_stable ).
      ENDIF.
    ENDLOOP.

    CLEAR: vg_datos_modificados, vg_datos_modificados_cab, vg_alta_cabecera.

    COMMIT WORK.
    MESSAGE 'Datos actualizados' TYPE 'S'.

  ELSE.
    ROLLBACK WORK.
    IF vl_msg_error IS NOT INITIAL.
      MESSAGE vl_msg_error TYPE 'I' DISPLAY LIKE 'E'.
    ENDIF.
    RETURN.
  ENDIF.



ENDFORM.                    " F_SAVE_PATRON
