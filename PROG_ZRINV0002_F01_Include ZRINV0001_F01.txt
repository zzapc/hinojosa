*&---------------------------------------------------------------------*
*&  Include           ZRINV0002_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  INITIALIZATION_SEL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM initialization_sel CHANGING ps_werks.
  IF ps_werks IS INITIAL.
    SELECT SINGLE parva FROM usr05
      INTO ps_werks
      WHERE bname = sy-uname AND
            parid = 'WRK'.
  ENDIF.

  sscrfields-functxt_01 = 'Crear inventario'.
ENDFORM.                    " INITIALIZATION_SEL
*&---------------------------------------------------------------------*
*&      Form  CARGA_POPUP_INICIAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM carga_popup_inicial .
  PERFORM initialization_sel CHANGING p_werks.

  CALL SELECTION-SCREEN '0002'." STARTING AT 15 5.

  gv_pant_ini = 'X'.
ENDFORM.                    " CARGA_POPUP_INICIAL
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_alv .
  SET PF-STATUS '0100'.
  SET TITLEBAR '0100'.

  DATA: ls_variant TYPE disvariant.

* Preparamos el catálogo de campos
  PERFORM prepare_fielcat.

* Para que muestre el ancho de las columnas optimizado
  t_layout-cwidth_opt = 'X'.
  t_layout-sel_mode   = 'A'.
  t_layout-info_fname = 'LINE_COLOR'.
  t_layout-ctab_fname = 'COLOR_CELL'.
  ls_variant-report   = sy-repid.
  ls_variant-handle   = '0100'.

* Mostrar alv
  CALL METHOD g_grid->set_table_for_first_display
    EXPORTING
      is_layout            = t_layout
*     i_structure_name     = 'zsinv0002_grid' " si no siguen apareciendo todos los campos
      it_toolbar_excluding = gti_toolbar_ex
      is_variant           = ls_variant
*     i_save               = 'U'
      i_save               = 'A'
*     i_default            = 'X'
    CHANGING
      it_outtab            = gti_mostrar[]
      it_fieldcatalog      = gti_fieldcat.

ENDFORM.                    " MOSTRAR_ALV
*&---------------------------------------------------------------------*
*&      Form  REFRESCAR_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refrescar_alv .
  DATA: ls_layout TYPE lvc_s_layo,
        ls_stable TYPE lvc_s_stbl.

* Sacamos el layout del ALV
  CALL METHOD g_grid->get_frontend_layout
    IMPORTING
      es_layout = ls_layout.

* Ponemos de nuevo que optimice las columnas
  ls_layout-cwidth_opt = 'X'.

* Cargamos de nuevo el layout
  CALL METHOD g_grid->set_frontend_layout
    EXPORTING
      is_layout = ls_layout.

* Refrescamos el ALV
  ls_stable-row = 'X'.
  ls_stable-col = 'X'.

  CALL METHOD g_grid->refresh_table_display
    EXPORTING
      is_stable = ls_stable.

ENDFORM.                    " REFRESCAR_ALV
*&---------------------------------------------------------------------*
*&      Form  RECUPERAR_DATOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM recuperar_datos .
  DATA: t_ci     TYPE STANDARD TABLE OF ztinv2_ci,
        wa_ci    TYPE                   ztinv2_ci,
        wa_color TYPE lvc_s_scol.
  TYPES: BEGIN OF tipo_werks,
           werks TYPE werks_d,
           name1 TYPE name1.
  TYPES: END OF tipo_werks.
  TYPES: tty_werks TYPE STANDARD TABLE OF tipo_werks.
  DATA: t_werks  TYPE         tty_werks,
        wa_werks TYPE LINE OF tty_werks.
  TYPES: BEGIN OF tipo_lgort,
           lgort TYPE lgort_d,
           lgobe TYPE lgobe.
  TYPES: END OF tipo_lgort.
  TYPES: tty_lgort TYPE STANDARD TABLE OF tipo_lgort.
  DATA: t_lgort  TYPE         tty_lgort,
        wa_lgort TYPE LINE OF tty_lgort.

  TYPES: BEGIN OF tipo_mtart,
           mtart TYPE mtart,
           mtbez TYPE mtbez.
  TYPES: END OF tipo_mtart.
  TYPES: tty_mtart TYPE STANDARD TABLE OF tipo_mtart.
  DATA: t_mtart  TYPE         tty_mtart,
        wa_mtart TYPE LINE OF tty_mtart.
  DATA: wa_mostrar TYPE ty_mostrar.

  CLEAR: t_ci, gti_mostrar.
  REFRESH: t_ci, gti_mostrar.

  SELECT * FROM ztinv2_ci
    INTO TABLE t_ci
    WHERE docum IN so_docum AND
          werks EQ p_werks  AND
          lgort IN so_lgort AND
          status IN so_stat.

  IF p_borr IS INITIAL.
    DELETE t_ci WHERE status EQ 'B'.
  ENDIF.

  IF p_cont IS INITIAL.
    DELETE t_ci WHERE status EQ 'C'.
  ENDIF.

  CLEAR: t_werks. REFRESH: t_werks.
  SELECT werks name1 FROM t001w
    INTO TABLE t_werks
    WHERE werks EQ p_werks.

  CLEAR: t_lgort. REFRESH: t_lgort.
  SELECT lgort lgobe FROM t001l
    INTO TABLE t_lgort
    WHERE lgort IN so_lgort
      AND werks EQ p_werks.

  IF t_ci[] IS NOT INITIAL.
    LOOP AT t_ci INTO wa_ci.
      AUTHORITY-CHECK OBJECT 'M_MATE_WRK'
                  ID 'ACTVT' FIELD '03'
                  ID 'WERKS' FIELD wa_ci-werks.

      CHECK sy-subrc = 0.

      MOVE-CORRESPONDING wa_ci TO wa_mostrar.

      READ TABLE t_werks INTO wa_werks WITH KEY werks = wa_mostrar-werks.
      wa_mostrar-name1 = wa_werks-name1.

      READ TABLE t_lgort INTO wa_lgort WITH KEY lgort = wa_mostrar-lgort.
      wa_mostrar-lgobe = wa_lgort-lgobe.

      READ TABLE t_dominio_status INTO wa_dominio WITH KEY domvalue_l  = wa_mostrar-status
                                                    ddlanguage = sy-langu.
      IF sy-subrc = 0.
        wa_mostrar-status_txt = wa_dominio-ddtext.
      ENDIF.

      IF wa_mostrar-multi IS NOT INITIAL.
        wa_mostrar-icon_multi = icon_select_detail.
      ENDIF.
      IF wa_mostrar-log IS NOT INITIAL.
        wa_mostrar-icon_log = icon_select_detail.
      ENDIF.

      CASE wa_mostrar-status.
        WHEN 'B'.
          wa_mostrar-line_color = 'C600'.
        WHEN 'C'.
          wa_mostrar-line_color = 'C500'.
        WHEN 'F' OR 'P'.
          wa_mostrar-line_color = 'C300'.
        WHEN OTHERS.
          CLEAR wa_mostrar-line_color.
      ENDCASE.

      MOVE 'DOCUM'      TO wa_color-fname.
      MOVE '5'         TO wa_color-color-col.
      MOVE '0'         TO wa_color-color-int.
      MOVE '0'         TO wa_color-color-inv.

      APPEND wa_color TO wa_mostrar-color_cell.

      APPEND wa_mostrar TO gti_mostrar.
      CLEAR wa_mostrar.
    ENDLOOP.
  ENDIF.
ENDFORM.                    " RECUPERAR_DATOS
*&---------------------------------------------------------------------*
*&      Form  PREPARE_FIELCAT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prepare_fielcat .
* Variable auxiliar
  DATA: ls_fieldcat  TYPE lvc_s_fcat,
        ls_group_alv TYPE lvc_s_sgrp.

* Recuperamos el catálogo de campos de la estructura
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'zsinv0002_grid'
    CHANGING
      ct_fieldcat      = gti_fieldcat.

  LOOP AT gti_fieldcat INTO ls_fieldcat.
    CASE ls_fieldcat-fieldname.
      WHEN 'DOCUM'.
        ls_fieldcat-hotspot = 'X'.
        ls_fieldcat-emphasize = 'C600'.
      WHEN 'NAME1'.
        ls_fieldcat-scrtext_l = text-000.
        ls_fieldcat-scrtext_m = text-000.
        ls_fieldcat-scrtext_s = text-000.
        ls_fieldcat-reptext   = text-000.
      WHEN 'VALIDADO'.
        ls_fieldcat-scrtext_l = text-027.
        ls_fieldcat-scrtext_m = text-027.
        ls_fieldcat-scrtext_s = text-027.
        ls_fieldcat-reptext   = text-027.
      WHEN 'ICON_MULTI'.
        ls_fieldcat-scrtext_l = 'Selección múltiple'.
        ls_fieldcat-scrtext_m = 'Sel.Multi.'.
        ls_fieldcat-scrtext_s = 'Multi.'.
        ls_fieldcat-reptext   = 'Existe selección múltiple'.
        ls_fieldcat-hotspot = 'X'.
        ls_fieldcat-icon = 'X'.
      WHEN 'ICON_LOG'.
        ls_fieldcat-scrtext_l = 'Log detallado'.
        ls_fieldcat-scrtext_m = 'Log detalle'.
        ls_fieldcat-scrtext_s = 'Log det.'.
        ls_fieldcat-reptext   = 'Existe log de mensajes'.
        ls_fieldcat-hotspot = 'X'.
        ls_fieldcat-icon = 'X'.
      WHEN 'WHO' OR 'ERDAT' OR 'ERZEIT' OR 'ERNAM' OR 'AEDAT' OR 'AEZEIT' OR 'AENAM' OR 'MTART'.
        ls_fieldcat-no_out = 'X'.
    ENDCASE.
*   Modificamos
    MODIFY gti_fieldcat FROM ls_fieldcat.
    CLEAR ls_fieldcat.
  ENDLOOP.

  DELETE gti_fieldcat WHERE   fieldname EQ 'MULTI'
                          OR fieldname EQ 'LOG'.
ENDFORM.                    " PREPARE_FIELCAT
*&---------------------------------------------------------------------*
*&      Form  CREAR_INVENTARIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM crear_inventario CHANGING p_werks
                               p_lgort
                               s_mtart TYPE tys_mtart
                               s_matnr TYPE tys_matnr
                               p_inv2_ci TYPE ztinv2_ci.
  DATA: lv_uname LIKE sy-uname,
        lv_datum LIKE sy-datum,
        lv_uzeit LIKE sy-uzeit,
        wa_color TYPE lvc_s_scol,
        lv_error TYPE xflag.
  DATA: ls_mostrar TYPE ty_mostrar.

  CLEAR: lv_uname, lv_datum, lv_uzeit, lv_error.
  REFRESH: t_matnr, t_mtart.

  IF s_mtart IS NOT INITIAL.
    SELECT mtart FROM t134
      INTO TABLE t_mtart
      WHERE mtart IN s_mtart.
  ENDIF.

  IF s_matnr IS NOT INITIAL.
    SELECT a~matnr FROM marc AS a
      INNER JOIN mara AS b
      ON a~matnr EQ b~matnr
      INTO TABLE t_matnr
      WHERE a~matnr IN s_matnr
        AND a~werks EQ p_werks
        AND b~mtart IN s_mtart.
  ENDIF.

* Crear registro cabecera inventario:
  CLEAR p_inv2_ci.
  lv_uname = sy-uname.
  lv_datum = sy-datum.
  lv_uzeit = sy-uzeit.

  PERFORM registro_cabecera_inventario USING t_mtart[]
                                             t_matnr[]
                                             p_werks
                                             p_lgort
                                             'I'
                                             lv_uname
                                             lv_datum
                                             lv_uzeit
                                    CHANGING p_inv2_ci
                                             lv_error.

  IF lv_error IS INITIAL.
    " Crear registros posiciones inventario:
    PERFORM registro_posiciones_inventario USING p_inv2_ci
                                                 lv_uname
                                                 lv_datum
                                                 lv_uzeit
                                           CHANGING lv_error.

    IF lv_error IS NOT INITIAL.
      DELETE ztinv2_ci FROM p_inv2_ci.
      COMMIT WORK AND WAIT.
      MESSAGE e106(zmm).
    ELSE.
      m_msgv1 = p_inv2_ci-docum.

      CALL FUNCTION 'ZMM_INV_INSERTAR_LOG'
        EXPORTING
          docum = p_inv2_ci-docum
          msgty = 'S'
          msgid = 'ZMM'
          msgno = '164'
          msgv1 = m_msgv1.

      MESSAGE s164(zmm) WITH p_inv2_ci-docum.

      " Añadir registro en el listado:
      CLEAR ls_mostrar.

      SELECT SINGLE * FROM ztinv2_ci
        INTO p_inv2_ci
        WHERE docum EQ p_inv2_ci-docum.

      MOVE-CORRESPONDING p_inv2_ci TO ls_mostrar.

      SELECT SINGLE name1 FROM t001w
        INTO ls_mostrar-name1
        WHERE werks = ls_mostrar-werks.

      SELECT SINGLE lgobe FROM t001l
        INTO ls_mostrar-lgobe
        WHERE lgort = ls_mostrar-lgort
          AND werks = ls_mostrar-werks.

      CLEAR wa_dominio.
      READ TABLE t_dominio_status INTO wa_dominio
                 WITH KEY domvalue_l  = ls_mostrar-status
                          ddlanguage = sy-langu.
      IF wa_dominio IS NOT INITIAL.
        ls_mostrar-status_txt = wa_dominio-ddtext.
      ENDIF.

      CASE ls_mostrar-status.
        WHEN 'B'.
          ls_mostrar-line_color = 'C600'.
        WHEN 'C'.
          ls_mostrar-line_color = 'C500'.
        WHEN 'F' OR 'P'.
          ls_mostrar-line_color = 'C300'.
        WHEN OTHERS.
          CLEAR ls_mostrar-line_color.
      ENDCASE.

      IF ls_mostrar-multi IS NOT INITIAL.
        ls_mostrar-icon_multi = icon_select_detail.
      ENDIF.
      IF ls_mostrar-log IS NOT INITIAL.
        ls_mostrar-icon_log = icon_select_detail.
      ENDIF.

      MOVE 'DOCUM'     TO wa_color-fname.
      MOVE '5'         TO wa_color-color-col.
      MOVE '0'         TO wa_color-color-int.
      MOVE '0'         TO wa_color-color-inv.

      APPEND wa_color TO ls_mostrar-color_cell.
      APPEND ls_mostrar TO gti_mostrar.
*      leave to screen 0100.
    ENDIF.
  ELSE.
    MESSAGE e106(zmm).
  ENDIF.

ENDFORM.                    " CREAR_INVENTARIO
*&---------------------------------------------------------------------*
*&      Form  REGISTRO_CABECERA_INVENTARIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_INV_CI  text
*----------------------------------------------------------------------*
FORM registro_cabecera_inventario USING lt_mtart TYPE ty_mtart
                                        lt_matnr TYPE ty_matnr
                                        p_werks
                                        p_lgort
                                        p_status
                                        p_uname
                                        p_datum
                                        p_uzeit
                                  CHANGING ps_inv_ci TYPE ztinv2_ci
                                           p_error.

  DATA: lt_ci_multi    TYPE TABLE OF ztinv2_ci_multi WITH HEADER LINE,
        lv_mtart       TYPE mtart,
        lv_matnr       TYPE matnr,
        lv_docum_error TYPE zdocinv.

  CLEAR ps_inv_ci.
  ps_inv_ci-mandt = sy-mandt.

  CALL FUNCTION 'ZMM_INV_VERIFICAR_SOLAPAMIENTO'
    EXPORTING
      t_mtart = lt_mtart
      t_matnr = lt_matnr
      i_werks = p_werks
      i_lgort = p_lgort
    IMPORTING
      e_docum = lv_docum_error
    EXCEPTIONS
      existe  = 1
      OTHERS  = 2.

  IF sy-subrc <> 0.
    MESSAGE e150(zmm)  WITH lv_docum_error.
  ENDIF.

  PERFORM num_inventario CHANGING ps_inv_ci-docum.

*  ps_inv_ci-mtart = p_mtart.
  ps_inv_ci-werks = p_werks.
  ps_inv_ci-lgort = p_lgort.
  ps_inv_ci-status = p_status.
  ps_inv_ci-who = p_uname.
  ps_inv_ci-ernam = p_uname.
*  ps_inv_ci-aenam = p_uname.
  ps_inv_ci-erdat = p_datum.
*  ps_inv_ci-aedat = p_datum.
  ps_inv_ci-erzeit = p_uzeit.
*  ps_inv_ci-aezeit = p_uzeit.

  IF lt_matnr IS NOT INITIAL OR lt_mtart IS NOT INITIAL.
    ps_inv_ci-multi = 'X'.
  ENDIF.

  INSERT ztinv2_ci FROM ps_inv_ci.
  COMMIT WORK AND WAIT.

  IF sy-subrc <> 0.
    p_error = 'X'.
  ELSEIF ps_inv_ci-multi IS NOT INITIAL. " almacenamos los criterios de selección múltiple
    zsinv0002_grid = ps_inv_ci.

    lt_ci_multi-docum = ps_inv_ci-docum.
    LOOP AT lt_mtart INTO lv_mtart.
      lt_ci_multi-mtart = lv_mtart.
      APPEND lt_ci_multi.
    ENDLOOP.

    LOOP AT lt_matnr INTO lv_matnr.
      lt_ci_multi-matnr = lv_matnr.
      APPEND lt_ci_multi.
    ENDLOOP.

    INSERT ztinv2_ci_multi FROM TABLE lt_ci_multi[].
    COMMIT WORK AND WAIT.

    IF sy-subrc <> 0.
      p_error = 'X'.
    ENDIF.
  ENDIF.

ENDFORM.                    " REGISTRO_CABECERA_INVENTARIO
*&---------------------------------------------------------------------*
*&      Form  NUM_INVENTARIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_PS_INV_CI_DOCUM  text
*----------------------------------------------------------------------*
FORM num_inventario  CHANGING p_docum.
  CLEAR p_docum.

  SELECT MAX( docum )
    FROM ztinv2_ci
    INTO p_docum.

  p_docum = p_docum + 1.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = p_docum
    IMPORTING
      output = p_docum.
ENDFORM.                    " NUM_INVENTARIO
*&---------------------------------------------------------------------*
*&      Form  REGISTRO_POSICIONES_INVENTARIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LS_INV_CI  text
*      <--P_LV_ERROR  text
*----------------------------------------------------------------------*
FORM registro_posiciones_inventario  USING    ps_inv_ci TYPE ztinv2_ci
                                              p_uname
                                              p_datum
                                              p_uzeit
                                     CHANGING p_error.

  DATA: r_matnr            TYPE RANGE OF matnr,
        re_matnr           TYPE RANGE OF matnr,
        r3_matnr           TYPE RANGE OF matnr WITH HEADER LINE,
        r3_mtart           TYPE RANGE OF mtart WITH HEADER LINE,
        lsr_matnr          LIKE LINE OF  r_matnr,
        lt_matnr_lote      TYPE tty_material,
        lt_matnr_no_lote   TYPE tty_material,
        ls_matnr           TYPE ty_material,
        lt_mchb            TYPE STANDARD TABLE OF mchb,
        ls_mchb            TYPE                   mchb,
        lt_mard            TYPE STANDARD TABLE OF mard,
        ls_mard            TYPE                   mard,
        ls_inv_pi          TYPE                   ztinv2_pi,
        lt_inv_pi          TYPE STANDARD TABLE OF ztinv2_pi,
        lv_posnr           TYPE posnr,
        lv_cretm           TYPE xflag,
        lv_f_stock         TYPE xflag,
        lt_ztinv2_ci_multi TYPE TABLE OF ztinv2_ci_multi WITH HEADER LINE,
        gt_messages        LIKE bapiret2 OCCURS 0,
        gs_messages        TYPE bapiret2.

  CLEAR: r_matnr, lt_matnr_lote, lt_matnr_no_lote.
  REFRESH: r_matnr, lt_matnr_lote, lt_matnr_no_lote.

* Primero borramos, por si estamos actualizando
  DELETE FROM ztinv2_pi WHERE docum EQ ps_inv_ci-docum.
  COMMIT WORK AND WAIT.

* Recuperamos la selección múltiple para el inventario
  SELECT * FROM ztinv2_ci_multi
    INTO TABLE lt_ztinv2_ci_multi
    WHERE docum EQ ps_inv_ci-docum.

  LOOP AT lt_ztinv2_ci_multi.
    r3_matnr-sign = 'I'.
    r3_mtart-sign = 'I'.
    r3_matnr-option = 'EQ'.
    r3_mtart-option = 'EQ'.
    IF lt_ztinv2_ci_multi-matnr IS NOT INITIAL.
      r3_matnr-low = lt_ztinv2_ci_multi-matnr.
      APPEND r3_matnr.
    ELSEIF lt_ztinv2_ci_multi-mtart IS NOT INITIAL.
      r3_mtart-low = lt_ztinv2_ci_multi-mtart.
      APPEND r3_mtart.
    ENDIF.
  ENDLOOP.

* Hacemos la selección de más específico a más general
  """"""""""""""""" AQUÍ DEBERÍA IR PRIMERO LA BÚSQUEDA POR UBICACIÓN, CUANDO SE IMPLEMENTE
  IF r3_mtart[] IS NOT INITIAL OR r3_matnr[] IS NOT INITIAL. " si tenemos selección de material o tipo, restringimos la búsqueda con r_matnr
* Selección de materiales:
    SELECT a~matnr a~meins INTO TABLE lt_matnr_lote
      FROM mara AS a
      INNER JOIN marc AS b ON b~matnr = a~matnr
      WHERE a~mtart IN r3_mtart
      AND a~lvorm <> 'X'
      AND b~lvorm <> 'X'
      AND b~werks = ps_inv_ci-werks
      AND a~matnr IN r3_matnr
      AND b~xchpf NE space.

    IF sy-subrc EQ 0. " buscamos stocks en MCHB
* Seleccionamos los stocks de lotes:
      LOOP AT lt_matnr_lote INTO ls_matnr.
        CLEAR lsr_matnr.
        lsr_matnr-sign = 'I'.
        lsr_matnr-option = 'EQ'.
        lsr_matnr-low = ls_matnr-matnr.
        APPEND lsr_matnr TO r_matnr.
      ENDLOOP.

      CLEAR lt_mchb.
      REFRESH: lt_mchb.

      SELECT * INTO TABLE lt_mchb
        FROM mchb
        WHERE matnr IN r_matnr
        AND werks = ps_inv_ci-werks
        AND lgort = ps_inv_ci-lgort
        AND lvorm <> 'X'
        AND ( clabs <> 0 OR cinsm <> 0 AND cspem <> 0 AND cretm <> 0 ).

      SORT lt_mchb BY werks lgort matnr charg.
    ENDIF.

    SELECT a~matnr a~meins INTO TABLE lt_matnr_no_lote
      FROM mara AS a
      INNER JOIN marc AS b ON b~matnr = a~matnr
      WHERE a~mtart IN r3_mtart
      AND a~lvorm <> 'X'
      AND b~lvorm <> 'X'
      AND b~werks = ps_inv_ci-werks
      AND a~matnr IN r3_matnr
      AND b~xchpf EQ space.

    IF sy-subrc EQ 0. " buscamos stocks en MARD
* Seleccionamos los stocks sin lotes:
      REFRESH r_matnr.

      LOOP AT lt_matnr_no_lote INTO ls_matnr.
        CLEAR lsr_matnr.
        lsr_matnr-sign = 'I'.
        lsr_matnr-option = 'EQ'.
        lsr_matnr-low = ls_matnr-matnr.
        APPEND lsr_matnr TO r_matnr.
      ENDLOOP.

      CLEAR lt_mard.
      REFRESH lt_mard.

      SELECT * INTO TABLE lt_mard
        FROM mard
        WHERE ( matnr IN r_matnr AND matnr IN re_matnr )
        AND werks = ps_inv_ci-werks
        AND lgort = ps_inv_ci-lgort
        AND lvorm <> 'X'
        AND ( labst <> 0 OR insme <> 0 AND speme <> 0 AND retme <> 0 ).

      SORT lt_mard BY werks lgort matnr.
    ENDIF.
  ELSE. " si no hay selección de material/tipo la selección es diferente (por filtros)
    CLEAR lt_mchb.
    REFRESH: lt_mchb.

    SELECT * INTO TABLE lt_mchb
      FROM mchb
      WHERE matnr IN r_matnr
      AND werks = ps_inv_ci-werks
      AND lgort = ps_inv_ci-lgort
      AND lvorm <> 'X'
      AND ( clabs <> 0 OR cinsm <> 0 AND cspem <> 0 AND cretm <> 0 ).

    SORT lt_mchb BY werks lgort matnr charg.

    LOOP AT lt_mchb INTO ls_mchb. " excluimos de la MARD por si no ha habido selección por material o tipo
      CLEAR lsr_matnr.
      lsr_matnr-sign = 'E'.
      lsr_matnr-option = 'EQ'.
      lsr_matnr-low = ls_mchb-matnr.
      APPEND lsr_matnr TO re_matnr.
    ENDLOOP.

    CLEAR lt_mard.
    REFRESH lt_mard.

    SELECT * INTO TABLE lt_mard
      FROM mard
      WHERE matnr IN re_matnr " excluimos los de MCHB, ya están seleccionados de antes
      AND werks = ps_inv_ci-werks
      AND lgort = ps_inv_ci-lgort
      AND lvorm <> 'X'
      AND ( labst <> 0 OR insme <> 0 AND speme <> 0 AND retme <> 0 ).

    SORT lt_mard BY werks lgort matnr.
  ENDIF.

  lv_posnr = 1.

  CLEAR: lt_inv_pi, gt_messages.
  REFRESH: lt_inv_pi, gt_messages.

  LOOP AT lt_mchb INTO ls_mchb.
    PERFORM crear_posicion USING  ps_inv_ci-docum
                                  ls_mchb-werks
                                  ls_mchb-lgort
                                  ls_mchb-charg
                                  ls_mchb-matnr
                                  p_uname
                                  p_datum
                                  p_uzeit
                                  ls_mchb-cinsm
                                  ls_mchb-cspem
                                  ls_mchb-cretm
                                  ls_mchb-clabs
                                  lt_matnr_lote[]
                         CHANGING lt_inv_pi[]
                                  lv_posnr
                                  gt_messages[]
                                  p_error.
  ENDLOOP.

  LOOP AT lt_mard INTO ls_mard.
    PERFORM crear_posicion USING  ps_inv_ci-docum
                                  ls_mard-werks
                                  ls_mard-lgort
                                  space " lote
                                  ls_mard-matnr
                                  p_uname
                                  p_datum
                                  p_uzeit
                                  ls_mard-insme
                                  ls_mard-speme
                                  ls_mard-retme
                                  ls_mard-labst
                                  lt_matnr_no_lote[]
                         CHANGING lt_inv_pi[]
                                  lv_posnr
                                  gt_messages[]
                                  p_error.
  ENDLOOP.

  IF lt_inv_pi[] IS NOT INITIAL.
    INSERT ztinv2_pi FROM TABLE lt_inv_pi[].
    COMMIT WORK AND WAIT.

    IF sy-subrc NE 0.
      p_error = 'X'.
    ENDIF.
  ENDIF.

  IF p_error IS INITIAL.
    CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
      TABLES
        i_bapiret2_tab = gt_messages.
  ENDIF.

ENDFORM.                    " REGISTRO_POSICIONES_INVENTARIO
*&---------------------------------------------------------------------*
*&      Form  CAMBIAR_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_LS_DATOS  text
*----------------------------------------------------------------------*
FORM cambiar_status CHANGING ps_datos TYPE ty_mostrar.

  DATA: ps_ci TYPE ztinv2_ci.

  DATA: lt_inv_sp TYPE STANDARD TABLE OF ztinv2_sp,
        ls_inv_sp TYPE                   ztinv2_sp.

  DATA: lt_spopli TYPE rsec_t_spopli,
        ls_spopli TYPE spopli.

  DATA: lt_status TYPE tty_status,
        ls_status TYPE ty_status.

  DATA: lv_index      LIKE sy-tabix,
        lv_selec      LIKE sy-tabix,
        lv_answer(1),
        lv_answer2(1).

  CLEAR: lt_inv_sp, lt_status.
  REFRESH: lt_inv_sp, lt_status.

* Nos guardamos las transiciones posibles de status:
  SELECT * INTO TABLE lt_inv_sp
    FROM ztinv2_sp
    WHERE status = ps_datos-status
    AND txper = 'G'.

  IF lt_inv_sp[] IS NOT INITIAL. " Posibles cambio status
    " Preparamos los status posibles a seleccionar:
    LOOP AT lt_inv_sp INTO ls_inv_sp.
      READ TABLE t_dominio_status INTO wa_dominio
                 WITH KEY domvalue_l  = ls_inv_sp-status_new
                          ddlanguage = sy-langu.

      IF wa_dominio IS NOT INITIAL.
        lv_index = lv_index + 1.
        CLEAR ls_spopli.
        ls_spopli-varoption = wa_dominio-ddtext.
        APPEND ls_spopli TO lt_spopli.

        CLEAR ls_status.
        ls_status-domvalue_l = ls_inv_sp-status_new.
        ls_status-ddtext = wa_dominio-ddtext.
        ls_status-index = lv_index.
        ls_status-popup = ls_inv_sp-popup.
        APPEND ls_status TO lt_status.
      ENDIF.
    ENDLOOP.

    " Sacamos pop-up para selección cambio status:
    CLEAR: lv_answer, lv_selec.
    CALL FUNCTION 'POPUP_TO_DECIDE_LIST'
      EXPORTING
        textline1 = text-009
        titel     = text-008
      IMPORTING
        answer    = lv_answer
      TABLES
        t_spopli  = lt_spopli.

    IF lv_answer IS NOT INITIAL AND lv_answer <> 'A'.
      lv_selec = lv_answer.
      CLEAR ls_status.
      READ TABLE lt_status INTO ls_status WITH KEY index = lv_selec.
      IF ls_status IS NOT INITIAL.
        IF ls_status-popup = 'X'.
          CLEAR lv_answer2.
          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              text_question = text-012
              text_button_1 = text-010
              text_button_2 = text-011
              start_column  = 10
              start_row     = 10
            IMPORTING
              answer        = lv_answer2.

          IF lv_answer2 = '1'. " Sí cambio status
            MOVE-CORRESPONDING ps_datos TO ps_ci.

            ps_ci-status = ls_status-domvalue_l.
            ps_ci-aedat = sy-datum.
            ps_ci-aezeit = sy-uzeit.
            ps_ci-aenam = sy-uname.

            UPDATE ztinv2_ci FROM ps_ci.
            COMMIT WORK AND WAIT.

            IF sy-subrc = 0.
              zsinv0002_grid-status = ps_ci-status.

              IF zsinv0002_grid-status EQ 'F'.
                CALL FUNCTION 'ZMM_INV_FINALIZAR'
                  EXPORTING
                    docum = zsinv0002_grid-docum.
              ENDIF.

              READ TABLE lt_status INTO ls_status WITH KEY domvalue_l = ps_ci-status.
              IF sy-subrc = 0.
                zsinv0002_grid-status_txt = ls_status-ddtext.
              ENDIF.

              zsinv0002_grid-aedat = ps_ci-aedat.
              zsinv0002_grid-aezeit = ps_ci-aezeit.
              zsinv0002_grid-aenam = ps_ci-aenam.

              MOVE-CORRESPONDING ps_ci TO ps_datos.
              ps_datos-status_txt = ls_status-ddtext.

              PERFORM refrescar_alv_200.
            ENDIF.
          ELSE. " No cambio status
          ENDIF.
        ELSE. " Cambio de status automático
          MOVE-CORRESPONDING ps_datos TO ps_ci.

          ps_ci-status = ls_status-domvalue_l.
          ps_ci-aedat = sy-datum.
          ps_ci-aezeit = sy-uzeit.
          ps_ci-aenam = sy-uname.

          UPDATE ztinv2_ci FROM ps_ci.
          COMMIT WORK AND WAIT.

          IF sy-subrc EQ 0.
            zsinv0002_grid-status = ps_ci-status.

            IF zsinv0002_grid-status EQ 'F'.
              CALL FUNCTION 'ZMM_INV_FINALIZAR'
                EXPORTING
                  docum = zsinv0002_grid-docum.
            ENDIF.

            READ TABLE lt_status INTO ls_status WITH KEY domvalue_l = ps_ci-status.
            IF sy-subrc = 0.
              zsinv0002_grid-status_txt = ls_status-ddtext.
            ENDIF.

            zsinv0002_grid-aedat = ps_ci-aedat.
            zsinv0002_grid-aezeit = ps_ci-aezeit.
            zsinv0002_grid-aenam  = ps_ci-aenam.

            MOVE-CORRESPONDING ps_ci TO ps_datos.
            ps_datos-status_txt = ls_status-ddtext.

            PERFORM refrescar_alv_200.
          ENDIF.
        ENDIF.

        CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
          EXPORTING
            docum = zsinv0002_grid-docum
            msgty = 'S'
            msgid = 'ZMM'
            msgno = '158'
            msgv1 = ps_datos-status_txt.

        MESSAGE s158(zmm) WITH ps_datos-status_txt.
      ENDIF.
    ENDIF.
  ELSE. " No se puede cambiar de status
    CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
      EXPORTING
        docum = zsinv0002_grid-docum
        msgty = 'E'
        msgid = 'ZMM'
        msgno = '162'.

    MESSAGE s162(zmm) DISPLAY LIKE 'E'.
  ENDIF.

  COMMIT WORK AND WAIT.
ENDFORM.                    " CAMBIAR_STATUS
*&---------------------------------------------------------------------*
*&      Form  CAMBIO_DE_STATUS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM cambio_de_status .
  DATA: ls_datos TYPE ty_mostrar,
        lv_ind   TYPE sy-tabix.

  READ TABLE gti_mostrar INTO ls_datos WITH KEY docum = zsinv0002_grid-docum.
  IF sy-subrc = 0.
    lv_ind = sy-tabix.

    PERFORM cambiar_status CHANGING ls_datos.

    CASE ls_datos-status.
      WHEN 'B'.
        ls_datos-line_color = 'C600'.
      WHEN 'C'.
        ls_datos-line_color = 'C500'.
      WHEN 'F'.
        ls_datos-line_color = 'C300'.
      WHEN 'P'.
        ls_datos-line_color = 'C300'.
      WHEN OTHERS.
        CLEAR ls_datos-line_color.
    ENDCASE.

    MODIFY gti_mostrar FROM ls_datos INDEX lv_ind.
  ENDIF.

ENDFORM.                    " CAMBIO_DE_STATUS
*&---------------------------------------------------------------------*
*&      Form  PREPARE_FIELCAT_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prepare_fielcat_200 .
* Variable auxiliar
  DATA: ls_fieldcat  TYPE lvc_s_fcat,
        ls_group_alv TYPE lvc_s_sgrp.

* Recuperamos el catálogo de campos de la estructura
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'ZSINV0002_PI_GRID'
    CHANGING
      ct_fieldcat      = gti_fieldcat_200.

  LOOP AT gti_fieldcat_200 INTO ls_fieldcat.
    CASE ls_fieldcat-fieldname.
      WHEN 'DOCUM'.
        ls_fieldcat-no_out = 'X'.
        ls_fieldcat-emphasize = 'X'.
      WHEN 'WERKS'.
        ls_fieldcat-no_out = 'X'.
      WHEN 'MEINS'.
*        ls_fieldcat-scrtext_l = text-013.
*        ls_fieldcat-scrtext_m = text-013.
*        ls_fieldcat-scrtext_s = text-013.
*        ls_fieldcat-reptext   = text-013.
      WHEN 'ZERO'.
        ls_fieldcat-scrtext_l = text-014.
        ls_fieldcat-scrtext_m = 'Ctd.cero'.
        ls_fieldcat-scrtext_s = 'Cero'.
        ls_fieldcat-reptext   = text-014.
        ls_fieldcat-checkbox = 'X'.
*      WHEN 'DEVO'.
*        ls_fieldcat-scrtext_l = text-015.
*        ls_fieldcat-scrtext_m = 'Stock dev.'.
*        ls_fieldcat-scrtext_s = 'Dev.'.
*        ls_fieldcat-reptext   = text-015.
*        ls_fieldcat-checkbox = 'X'.
      WHEN 'PROCESADO'.
        ls_fieldcat-scrtext_l = text-016.
        ls_fieldcat-scrtext_m = text-016.
        ls_fieldcat-scrtext_s = text-016.
        ls_fieldcat-reptext   = text-016.
        ls_fieldcat-checkbox = 'X'.
      WHEN 'CONTADO'.
        ls_fieldcat-scrtext_l = text-017.
        ls_fieldcat-scrtext_m = text-017.
        ls_fieldcat-scrtext_s = text-017.
        ls_fieldcat-reptext   = text-017.
        ls_fieldcat-checkbox = 'X'.
      WHEN 'CASUISTICA_TXT'.
        ls_fieldcat-scrtext_l = text-020.
        ls_fieldcat-scrtext_m = 'Desc.casu.'.
        ls_fieldcat-scrtext_s = 'Desc.'.
        ls_fieldcat-reptext   = text-020.
      WHEN 'MENGE_NEW'.
        IF zsinv0002_grid-status NA 'CIB'.
          ls_fieldcat-edit = 'X'.
        ENDIF.
    ENDCASE.

*   Modificamos
    MODIFY gti_fieldcat_200 FROM ls_fieldcat.
    CLEAR ls_fieldcat.
  ENDLOOP.
ENDFORM.                    " PREPARE_FIELCAT_200
*&---------------------------------------------------------------------*
*&      Form  REFRESCAR_ALV_200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refrescar_alv_200 .
  DATA: ls_layout_200 TYPE lvc_s_layo,
        ls_stable     TYPE lvc_s_stbl.

  PERFORM actualizar_fieldcat200.

* Sacamos el layout del ALV
  CALL METHOD g_grid_200->get_frontend_layout
    IMPORTING
      es_layout = ls_layout_200.

* Ponemos de nuevo que optimice las columnas
  ls_layout_200-cwidth_opt = 'X'.

* Cargamos de nuevo el layout
  CALL METHOD g_grid_200->set_frontend_layout
    EXPORTING
      is_layout = ls_layout_200.

* Refrescamos el ALV
  ls_stable-row = 'X'.
  ls_stable-col = 'X'.

  CALL METHOD g_grid_200->refresh_table_display
    EXPORTING
      is_stable = ls_stable.

ENDFORM.                    " REFRESCAR_ALV_200
*&---------------------------------------------------------------------*
*&      Form  FINALIZAR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM finalizar .
  SELECT SINGLE * INTO wa_ci FROM ztinv2_ci
      WHERE docum EQ zsinv0002_grid-docum. "JJR 01.02.2017

  PERFORM regularizar_stock USING wa_ci
                            CHANGING t_pi_new.

  PERFORM listado_posiciones USING zsinv0002_grid-docum
                                   zsinv0002_grid-status.

  PERFORM refrescar_alv_200.
ENDFORM.                    " FINALIZAR
*&---------------------------------------------------------------------*
*&      Form  REGULARIZAR_STOCK
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GTI_PI_NEW  text
*----------------------------------------------------------------------*
FORM regularizar_stock  USING wa_ci TYPE ztinv2_ci
                        CHANGING t_pi_new TYPE STANDARD TABLE.

  DATA:  lv_question      TYPE c LENGTH 100,
         error            TYPE xfeld,
         lv_answer(1),
         lv_charg         TYPE charg_d,
         lv_clabs         LIKE mchb-clabs,
         lv_imp_calc_char TYPE c LENGTH 14,
         n_errores        TYPE i,
         lt_mensajes      LIKE bapiret2 OCCURS 0 WITH HEADER LINE,
         sw_no_hacer_mi10,
         diferencia       LIKE mchb-clabs,
         r_out            TYPE ty_mostrar.

* El impacto económico es &. ¿Quiere finalizar el inventario?
  WRITE wa_ci-impacto TO lv_imp_calc_char LEFT-JUSTIFIED.
  CONCATENATE lv_imp_calc_char wa_ci-moneda INTO lv_imp_calc_char SEPARATED BY space.

  CONCATENATE 'El impacto económico es' lv_imp_calc_char '¿Quiere finalizar el inventario?'
  INTO lv_question SEPARATED BY space.

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      text_question = lv_question
      text_button_1 = text-010
      text_button_2 = text-011
      start_column  = 10
      start_row     = 10
    IMPORTING
      answer        = lv_answer.

  IF lv_answer = '1'. " Sí ìmpacto económico
    REFRESH lt_mensajes.
    n_errores = 0.

    LOOP AT gti_pi INTO wa_pi  WHERE casuistica IS NOT INITIAL
                                 AND procesado  NE 'X'.

      mensaje 'I' 'ZINV' '024' wa_pi-matnr wa_pi-charg
                               wa_pi-casuistica wa_pi-casuistica_txt
                               wa_ci-docum wa_pi-matnr.
      CLEAR error.

      CASE wa_pi-casuistica.
        WHEN 'A'. " stock en almacén diferente
          IF wa_pi-charg IS NOT INITIAL. " Primero vemos si hay que crear el lote
            SELECT SINGLE charg clabs FROM mchb
              INTO (lv_charg, lv_clabs)
              WHERE matnr = wa_pi-matnr
                AND werks = wa_pi-werks
                AND lgort = wa_pi-lgort
                AND charg = wa_pi-charg.

            IF sy-subrc <> 0.
              PERFORM crear_lote TABLES lt_mensajes USING wa_pi
                                 CHANGING error.
            ENDIF.
          ELSE.
            SELECT SINGLE @abap_true FROM mard
              WHERE matnr EQ @wa_pi-matnr
                AND werks EQ @wa_pi-lgort
                INTO @DATA(result).

            IF sy-subrc NE 0. " no lo implemento finalmente porque no debería pasar
*              PERFORM crear_almacen USING wa_pi-matnr
*                                          wa_pi-lgort
*                                          wa_pi-lgort_new
*                                          wa_pi-werks.
            ENDIF.
          ENDIF.

          PERFORM mov_311 TABLES lt_mensajes CHANGING wa_ci wa_pi error.

          PERFORM mi10 TABLES lt_mensajes USING wa_pi ''
                                      CHANGING error.

        WHEN 'B'.
*         lo incluimos en MI10 para registrar diferencia de cantidad o marcarlo como contado
          PERFORM mi10 TABLES lt_mensajes USING wa_pi ''
                                      CHANGING error.

        WHEN 'C'. " Afloramiento de stock
*         MSC1N en caso de que el material/lote no exista, MI10 para añadir el stock
          CLEAR: lv_charg, lv_clabs, sw_no_hacer_mi10.

          IF wa_pi-charg IS NOT INITIAL. " Primero vemos si hay que crear el lote
            SELECT SINGLE charg clabs FROM mchb
              INTO (lv_charg, lv_clabs)
              WHERE matnr = wa_pi-matnr
                AND werks = wa_pi-werks
                AND lgort = wa_pi-lgort
                AND charg = wa_pi-charg.

            IF sy-subrc <> 0.
              PERFORM crear_lote TABLES lt_mensajes USING wa_pi
                                 CHANGING error.
            ELSEIF lv_clabs > 0. " estamos intentando dar de alta STOCK y este ya esta
              diferencia = abs( lv_clabs - wa_pi-menge ).

              MOVE 'X' TO sw_no_hacer_mi10.
*             El material/lote &/& ya estaba dado de alta en centro/almacen &/&
              mensaje 'W' 'ZINV' '028' wa_pi-matnr wa_pi-charg wa_pi-werks wa_pi-lgort
                             wa_ci-docum wa_pi-matnr.
            ENDIF.
          ENDIF.

          IF sw_no_hacer_mi10 EQ ''.
            IF error IS INITIAL.
              wa_pi-lgort = zsinv0002_grid-lgort.

              PERFORM mi10 TABLES lt_mensajes USING wa_pi ''
                           CHANGING error.
            ENDIF.
          ENDIF.

        WHEN 'D'.
*         MI10 para restar stock.
          CLEAR: sw_no_hacer_mi10, lv_clabs.

          IF wa_pi-charg IS NOT INITIAL.
            SELECT  clabs FROM mchb UP TO 1 ROWS
              INTO  lv_clabs
              WHERE matnr = wa_pi-matnr
                AND werks = wa_pi-werks
                AND lgort = wa_pi-lgort
                AND charg = wa_pi-charg.
            ENDSELECT.
          ELSE.
            SELECT  labst FROM mard UP TO 1 ROWS
                        INTO  lv_clabs
                        WHERE matnr = wa_pi-matnr
                          AND werks = wa_pi-werks
                          AND lgort = wa_pi-lgort.
            ENDSELECT.
          ENDIF.

          IF sy-subrc EQ 0 AND lv_clabs > 0.
            wa_pi-menge = 0.

            PERFORM mi10 TABLES lt_mensajes USING wa_pi 'X'
                                           CHANGING error.
          ELSE.
*             El material/lote &/& ya no está en el cen/alm &/&
            mensaje 'W' 'ZINV' '026' wa_pi-matnr wa_pi-charg wa_pi-werks wa_pi-lgort
                           wa_ci-docum wa_pi-matnr.
          ENDIF.

      ENDCASE.

      IF error IS INITIAL.
        UPDATE ztinv2_pi SET  procesado = 'X'
                              aedat  = sy-datum
                              aezeit = sy-uzeit
                              aenam  = sy-datum
                        WHERE docum    = wa_pi-docum
                          AND posicion = wa_pi-posicion.

        wa_pi-procesado = 'X'.

        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.

        MODIFY gti_pi FROM wa_pi.
      ELSE.
        ADD 1 TO n_errores.
      ENDIF.
    ENDLOOP.

    IF n_errores > 0.
*       ERROR al finalizar el inventario
      MESSAGE i014(zinv).

      CALL FUNCTION 'ZMM_INV_INSERTAR_LOG'
        EXPORTING
          docum = zsinv0002_grid-docum
          msgty = 'E'
          msgid = 'ZINV'
          msgno = '014'.
    ELSE.
      wa_ci-status = 'C'. "el estatus pasará a C.
      zsinv0002_grid-status = 'C'.
      zsinv0002_grid-aedat  = wa_ci-aedat  = sy-datum.
      zsinv0002_grid-aenam  = wa_ci-aenam  = sy-uname.
      zsinv0002_grid-aezeit = wa_ci-aezeit = sy-uzeit.

      READ TABLE gti_mostrar INTO r_out WITH KEY docum = zsinv0002_grid-docum.

      MOVE-CORRESPONDING r_out TO zsinv0002_grid.

      MODIFY gti_mostrar FROM r_out INDEX sy-tabix.

      UPDATE ztinv2_ci SET  status = 'C'
                            aedat  = sy-datum
                            aezeit = sy-uzeit
                            aenam  = sy-datum
                      WHERE docum = zsinv0002_grid-docum.

      IF sy-subrc = 0.
        COMMIT WORK AND WAIT.
*       Inventario finalizado
        MESSAGE i012(zinv).

        CALL FUNCTION 'ZMM_INV_INSERTAR_LOG'
          EXPORTING
            docum = zsinv0002_grid-docum
            msgty = 'I'
            msgid = 'ZINV'
            msgno = '012'.
      ENDIF.
    ENDIF.

    COMMIT WORK AND WAIT.

    g_extnumber = zsinv0002_grid-docum.

    CALL FUNCTION 'APPL_LOG_DISPLAY'
      EXPORTING
        object                    = 'ZMM'
        subobject                 = 'ZINV2'
        external_number           = g_extnumber
        date_from                 = zsinv0002_grid-erdat " para que salgan siempre todos
        suppress_selection_dialog = 'X'.
  ENDIF.

ENDFORM.                    " REGULARIZAR_STOCK
*&---------------------------------------------------------------------*
*&      Form  MOV_311
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_PI  text
*----------------------------------------------------------------------*
FORM mov_311  TABLES t_men STRUCTURE bapiret2
              CHANGING wa_ci TYPE ztinv2_ci
                       wa_pi TYPE tipo_pos
                       error.

  DATA: goodsmvt_header TYPE bapi2017_gm_head_01 OCCURS 0 WITH HEADER LINE,
        goodsmvt_code   TYPE bapi2017_gm_code OCCURS 0 WITH HEADER LINE,
        goodsmvt_item   TYPE bapi2017_gm_item_create OCCURS 0 WITH HEADER LINE,
        return          TYPE bapiret2 OCCURS 0 WITH HEADER LINE.

  CLEAR: goodsmvt_header, goodsmvt_code, goodsmvt_item, return.
  REFRESH: goodsmvt_header, goodsmvt_code, goodsmvt_item, return.

  goodsmvt_header-pstng_date = sy-datum.
  goodsmvt_header-doc_date = sy-datum.
  goodsmvt_code-gm_code = '04'.
  goodsmvt_item-material  = wa_pi-matnr.
  goodsmvt_item-plant =  wa_pi-werks.
  goodsmvt_item-stge_loc  =  wa_pi-lgort_new.
  goodsmvt_item-batch =  wa_pi-charg.

  CASE wa_pi-bstar.
    WHEN '1'.
      goodsmvt_item-move_type = '311'.

      IF wa_pi-charg IS NOT INITIAL.
        SELECT SUM( clabs ) INTO wa_pi-menge FROM mchb WHERE matnr EQ wa_pi-matnr
                                                         AND werks EQ wa_pi-werks
                                                         AND lgort EQ wa_pi-lgort_new
                                                         AND charg EQ wa_pi-charg.
      ELSE.
        SELECT SUM( labst ) INTO wa_pi-menge FROM mard WHERE matnr EQ wa_pi-matnr
                                                       AND werks EQ wa_pi-werks
                                                       AND lgort EQ wa_pi-lgort_new.
      ENDIF.
    WHEN '2'. " control calidad
      goodsmvt_item-move_type = '323'.

      IF wa_pi-charg IS NOT INITIAL.
        SELECT SUM( cinsm ) INTO wa_pi-menge FROM mchb WHERE matnr EQ wa_pi-matnr
                                                         AND werks EQ wa_pi-werks
                                                         AND lgort EQ wa_pi-lgort_new
                                                         AND charg EQ wa_pi-charg.
      ELSE.
        SELECT SUM( insme ) INTO wa_pi-menge FROM mard WHERE matnr EQ wa_pi-matnr
                                                       AND werks EQ wa_pi-werks
                                                       AND lgort EQ wa_pi-lgort_new.
      ENDIF.

    WHEN '3'. " devolución


    WHEN '4'. " bloqueado
      goodsmvt_item-move_type = '325'.

      IF wa_pi-charg IS NOT INITIAL.
        SELECT SUM( cspem ) INTO wa_pi-menge FROM mchb WHERE matnr EQ wa_pi-matnr
                                                         AND werks EQ wa_pi-werks
                                                         AND lgort EQ wa_pi-lgort_new
                                                         AND charg EQ wa_pi-charg.
      ELSE.
        SELECT SUM( speme ) INTO wa_pi-menge FROM mard WHERE matnr EQ wa_pi-matnr
                                                       AND werks EQ wa_pi-werks
                                                       AND lgort EQ wa_pi-lgort_new.
      ENDIF.
  ENDCASE.

  IF wa_pi-menge <= 0 OR sy-subrc NE 0.
*    El material/lote &/& ya no está en el cen/alm &/&
    mensaje 'W' 'ZINV' '026' wa_pi-matnr wa_pi-charg wa_pi-werks wa_pi-lgort_new
                             wa_ci-docum wa_pi-matnr.

    CASE wa_pi-bstar.
      WHEN '1'.
        IF wa_pi-charg IS NOT INITIAL.
          SELECT * UP TO 1 ROWS FROM mchb WHERE matnr EQ wa_pi-matnr
                                            AND charg EQ wa_pi-charg
                                            AND clabs > 0.

*      El material/lote &/& se encuentra en cen/alm &/&
            mensaje 'W' 'ZINV' '027' wa_pi-matnr wa_pi-charg mchb-werks mchb-lgort
                                   wa_ci-docum wa_pi-matnr.
          ENDSELECT.
        ELSE.
          SELECT * UP TO 1 ROWS FROM mard WHERE matnr EQ wa_pi-matnr
                                            AND labst > 0.

*      El material/lote &/& se encuentra en cen/alm &/&
            mensaje 'W' 'ZINV' '027' wa_pi-matnr wa_pi-charg mchb-werks mchb-lgort
                                   wa_ci-docum wa_pi-matnr.
          ENDSELECT.
        ENDIF.
      WHEN '2'.
        IF wa_pi-charg IS NOT INITIAL.
          SELECT * UP TO 1 ROWS FROM mchb WHERE matnr EQ wa_pi-matnr
                                    AND charg EQ wa_pi-charg
                                    AND cinsm > 0.

*      El material/lote &/& se encuentra en cen/alm &/&
            mensaje 'W' 'ZINV' '027' wa_pi-matnr wa_pi-charg mchb-werks mchb-lgort
                                   wa_ci-docum wa_pi-matnr.
          ENDSELECT.
        ELSE.
          SELECT * UP TO 1 ROWS FROM mard WHERE matnr EQ wa_pi-matnr
                                  AND insme > 0.

*      El material/lote &/& se encuentra en cen/alm &/&
            mensaje 'W' 'ZINV' '027' wa_pi-matnr wa_pi-charg mchb-werks mchb-lgort
                                   wa_ci-docum wa_pi-matnr.
          ENDSELECT.
        ENDIF.

      WHEN '4'.
        IF wa_pi-charg IS NOT INITIAL.
          SELECT * UP TO 1 ROWS FROM mchb WHERE matnr EQ wa_pi-matnr
                                    AND charg EQ wa_pi-charg
                                    AND cspem > 0.

*      El material/lote &/& se encuentra en cen/alm &/&
            mensaje 'W' 'ZINV' '027' wa_pi-matnr wa_pi-charg mchb-werks mchb-lgort
                                   wa_ci-docum wa_pi-matnr.
          ENDSELECT.
        ELSE.
          SELECT * UP TO 1 ROWS FROM mard WHERE matnr EQ wa_pi-matnr
                                  AND speme > 0.

*      El material/lote &/& se encuentra en cen/alm &/&
            mensaje 'W' 'ZINV' '027' wa_pi-matnr wa_pi-charg mchb-werks mchb-lgort
                                   wa_ci-docum wa_pi-matnr.
          ENDSELECT.
        ENDIF.
    ENDCASE.
  ELSE.
    goodsmvt_item-entry_qnt = wa_pi-menge.
    goodsmvt_item-entry_uom = wa_pi-meins.
    goodsmvt_item-move_plant = wa_ci-werks. "Recieving/Issueing plant
    goodsmvt_item-move_stloc = wa_ci-lgort. "Reciving storage location

    APPEND goodsmvt_item.

    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header = goodsmvt_header
        goodsmvt_code   = goodsmvt_code
      TABLES
        goodsmvt_item   = goodsmvt_item
        return          = return.
  ENDIF.

  READ TABLE return WITH KEY type = 'E'.

  IF sy-subrc = 0.
    error = 'X'.
  ENDIF.

  COMMIT WORK AND WAIT.

  CHECK return[] IS NOT INITIAL.

  APPEND LINES OF return TO t_men.

ENDFORM.                    " MOV_311
*&---------------------------------------------------------------------*
*&      Form  CREAR_LOTE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_PI  text
*      <--P_ERROR  text
*----------------------------------------------------------------------*
FORM crear_lote  TABLES t_mens STRUCTURE bapiret2
                USING    wa_pi  TYPE tipo_pos
                 CHANGING error.

  DATA: t_return TYPE bapiret2 OCCURS 0 WITH HEADER LINE.

  CLEAR: t_return. REFRESH: t_return.

  CALL FUNCTION 'BAPI_BATCH_CREATE'
    EXPORTING
      material             = wa_pi-matnr
      batch                = wa_pi-charg
      plant                = wa_pi-werks
      batchstoragelocation = wa_pi-lgort
    TABLES
      return               = t_return.

  READ TABLE t_return WITH KEY type = 'E'.

  IF sy-subrc = 0.
    error = 'X'.
  ELSE.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ENDIF.

  CHECK t_return[] IS NOT INITIAL.

  APPEND LINES OF t_return TO t_mens.

ENDFORM.                    " CREAR_LOTE
*&---------------------------------------------------------------------*
*&      Form  MI10
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WA_PI  text
*----------------------------------------------------------------------*
FORM mi10  TABLES t_mens STRUCTURE bapiret2
            USING    wa_pi TYPE tipo_pos VALUE(wa_null)
           CHANGING error.

  DATA: wa_datum(10),
        t_mensa      LIKE bapiret2 OCCURS 0 WITH HEADER LINE,
        menge(12),
        l_msgno(3).

  WRITE sy-datum TO wa_datum.

  REFRESH bdcdata.

  PERFORM bdc_dynpro      USING 'SAPMM07I' '0700'.
  PERFORM bdc_field       USING 'RM07I-ZLDAT' wa_datum.
  PERFORM bdc_field       USING 'IKPF-WERKS' wa_pi-werks.
  PERFORM bdc_field       USING 'IKPF-LGORT' wa_pi-lgort.
  PERFORM bdc_field       USING 'BDC_OKCODE' '/00'.
  PERFORM bdc_dynpro      USING 'SAPMM07I' '0731'.
  PERFORM bdc_field       USING 'ISEG-MATNR(01)' wa_pi-matnr.
  PERFORM bdc_field       USING 'ISEG-CHARG(01)' wa_pi-charg.

  IF wa_null IS INITIAL.
    WRITE wa_pi-menge_new TO menge UNIT wa_pi-meins LEFT-JUSTIFIED.

    PERFORM bdc_field       USING 'ISEG-ERFMG(01)' menge.
    PERFORM bdc_field       USING 'ISEG-XNULL(01)' '' .
  ELSE.
    PERFORM bdc_field       USING 'ISEG-XNULL(01)' 'X' .
  ENDIF.

  PERFORM bdc_field       USING 'BDC_OKCODE' '/00'.
  PERFORM bdc_dynpro      USING 'SAPMM07I' '0731'.
  PERFORM bdc_field       USING 'BDC_OKCODE' '=BU'.

  CLEAR: i_messtab.
  REFRESH: i_messtab.

  CALL TRANSACTION 'MI10' USING bdcdata MODE modo_bi
                          MESSAGES INTO i_messtab
                          UPDATE 'S'.

  READ TABLE i_messtab WITH KEY msgtyp = 'E'.

  IF sy-subrc EQ 0. " Hay error
    MOVE 'X' TO error.
  ELSE.
    READ TABLE i_messtab WITH KEY msgtyp = 'A'.
    IF sy-subrc EQ  0.
      MOVE 'X' TO error.
    ENDIF.
  ENDIF.

  CHECK i_messtab[] IS NOT INITIAL.

  REFRESH t_mensa.

  CALL FUNCTION 'CONVERT_BDCMSGCOLL_TO_BAPIRET2'
    TABLES
      imt_bdcmsgcoll = i_messtab
      ext_return     = t_mensa.

  APPEND LINES OF t_mensa TO t_mens.

  LOOP AT t_mens.
    l_msgno = t_mens-number.

    CALL FUNCTION 'ZMM_INV_INSERTAR_LOG'
      EXPORTING
        docum = zsinv0002_grid-docum
        matnr = wa_pi-matnr
        charg = wa_pi-charg
        msgty = t_mens-type
        msgid = t_mens-id
        msgno = l_msgno
        msgv1 = t_mens-message_v1
        msgv2 = t_mens-message_v2
        msgv3 = t_mens-message_v3
        msgv4 = t_mens-message_v4.
  ENDLOOP.

  REFRESH: t_mens.

  COMMIT WORK AND WAIT.

ENDFORM.                    " MI10
*&---------------------------------------------------------------------*
*&      Form  IMPACTO_ECONOMICO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GTI_PI  text
*      <--P_GV_IMP_CALC  text
*----------------------------------------------------------------------*
FORM impacto_economico  USING VALUE(p_alv)
                        CHANGING gv_imp_calc.
*  DATA: t_alv_ie LIKE ztinv2_pi_scr OCCURS 0 WITH HEADER LINE.
*  REFRESH t_alv_ie.
*
*  CLEAR: gv_imp_calc.
*  DATA: wa_pi TYPE tipo_pos.
*  LOOP AT gti_pi INTO wa_pi WHERE casuistica CA 'ACD'
*                              AND procesado NE 'X'.
*    CLEAR: lv_verpr, lv_peinh.
*    CLEAR t_alv_ie.
*    MOVE-CORRESPONDING wa_pi TO t_alv_ie.
*
*    SELECT SINGLE verpr peinh stprs vprsv FROM mbew
*      INTO (lv_verpr, lv_peinh, lv_stprs, lv_vprsv)
*      WHERE matnr = wa_pi-matnr
*        AND bwkey = wa_pi-werks.
*    CASE lv_vprsv.
*      WHEN 'V'.
*        t_alv_ie-vmver = lv_verpr.
*      WHEN 'S'.
*        t_alv_ie-vmver =
*              lv_verpr = lv_stprs.
*    ENDCASE.
*    t_alv_ie-peinh = lv_peinh.
**   impacto económico = cantidad inventariada * Precio / cantidad base
*    CASE wa_pi-casuistica.
*      WHEN 'A'.
*        t_alv_ie-tcode = 'MIGO 311'.
*      WHEN 'C'  " afloran
*        OR 'D'. " desaparecen
*        IF lv_peinh IS NOT INITIAL.
*          CASE wa_pi-casuistica .
*            WHEN 'C'.
*              t_alv_ie-calculo = wa_pi-menge * lv_verpr / lv_peinh.
*              gv_imp_calc = gv_imp_calc + ( wa_pi-menge * lv_verpr / lv_peinh ).
*              t_alv_ie-sign = '+'.
*              t_alv_ie-tcode = 'MI10 +'.
*            WHEN 'D'.
*              t_alv_ie-calculo = -1 * wa_pi-menge * lv_verpr / lv_peinh.
*              t_alv_ie-sign = '-'.
*              gv_imp_calc = gv_imp_calc - ( wa_pi-menge * lv_verpr / lv_peinh ).
*              t_alv_ie-tcode = 'MI10 0'.
*          ENDCASE.
*
*        ENDIF.
*    ENDCASE.
*    APPEND t_alv_ie.
*  ENDLOOP.
*
*  CHECK p_alv EQ 'X' AND t_alv_ie[] IS NOT INITIAL.
*  CALL FUNCTION 'DISPLAY_BASIC_LIST'
*    EXPORTING
**     BASIC_LIST_TITLE    =
*      file_name           = 'PP'
**     HEAD_LINE1          = ' '
**     HEAD_LINE2          = ' '
**     HEAD_LINE3          = ' '
**     HEAD_LINE4          = ' '
**     FOOT_NOTE1          = ' '
**     FOOT_NOTE2          = ' '
**     FOOT_NOTE3          = ' '
**     LAY_OUT             = 0
**     DYN_PUSHBUTTON_TEXT1       =
**     DYN_PUSHBUTTON_TEXT2       =
**     DYN_PUSHBUTTON_TEXT3       =
**     DYN_PUSHBUTTON_TEXT4       =
**     DYN_PUSHBUTTON_TEXT5       =
**     DYN_PUSHBUTTON_TEXT6       =
*      data_structure      = 'ztinv2_pi_SCR'
**     CURRENT_REPORT      =
**     LIST_LEVEL          = ' '
**     ADDITIONAL_OPTIONS  = ' '
**     WORD_DOCUMENT       =
**     APPLICATION         =
**     OLDVALUES           = ' '
**     NO_ALV_GRID         =
**     ALV_MARKER          =
**   IMPORTING
**     RETURN_CODE         =
*    TABLES
*      data_tab            = t_alv_ie
**     FIELDNAME_TAB       =
**     SELECT_TAB          =
**     ERROR_TAB           =
**     RECEIVERS           =
*    EXCEPTIONS
*      download_problem    = 1
*      no_data_tab_entries = 2
*      table_mismatch      = 3
*      print_problems      = 4
*      OTHERS              = 5.
*  IF sy-subrc <> 0.
** Implement suitable error handling here
*  ENDIF.

ENDFORM.                    " IMPACTO_ECONOMICO
*&---------------------------------------------------------------------*
*&      Form  BLOQUEAR_INVENTARIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_zsinv0002_grid_DOCUM  text
*      -->P_0215   text
*      <--P_SW_BLOQUEADO  text
*----------------------------------------------------------------------*
FORM bloquear_inventario  USING    p_docum
                                   VALUE(p_accion)
                          CHANGING p_bloqueado.
  CASE p_accion.
    WHEN 'B'.
      CALL FUNCTION 'ENQUEUE_EZINV'
        EXPORTING
*         MODE_ztinv2_ci = 'E'
*         MANDT          = SY-MANDT
          docum          = p_docum
*         X_DOCUM        = ' '
*         _SCOPE         = '2'
*         _WAIT          = ' '
*         _COLLECT       = ' '
        EXCEPTIONS
          foreign_lock   = 1
          system_failure = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
        MOVE c_no TO p_bloqueado.
        DATA: uname LIKE sy-uname.
        uname = sy-msgv1.
        MESSAGE i018(zinv) WITH p_docum uname.
      ELSE.
        MOVE c_si TO p_bloqueado.
      ENDIF.

    WHEN 'D'.
      CALL FUNCTION 'DEQUEUE_EZINV'
        EXPORTING
*         MODE_ztinv2_ci       = 'E'
*         MANDT = SY-MANDT
          docum = p_docum
*         X_DOCUM             = ' '
*         _SCOPE              = '3'
*         _SYNCHRON           = ' '
*         _COLLECT            = ' '
        .
      MOVE c_si TO p_bloqueado.
  ENDCASE.
ENDFORM.                    " BLOQUEAR_INVENTARIO
*&---------------------------------------------------------------------*
*&      Form  LOG_INVENTARIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_T_MENSAJES  text
*      -->P_zsinv0002_grid_DOCUM  text
*----------------------------------------------------------------------*
FORM log_inventario  TABLES   t_mensajes STRUCTURE bapiret2
                     USING    p_docum VALUE(donde).
  DATA: titulo TYPE baltitle.
  CHECK t_mensajes[] IS NOT INITIAL.
  CASE donde.
    WHEN 'LOG'.
      CONCATENATE text-sho p_docum INTO titulo.
    WHEN 'FICHERO'.
      CONCATENATE text-log p_docum INTO titulo.
    WHEN 'PROCESAR'.
      CONCATENATE text-pro p_docum INTO titulo.
  ENDCASE.
  CALL FUNCTION 'SUSR_DISPLAY_LOG'
    EXPORTING
      display_in_popup = 'X'
      log_title        = titulo
*     DISPLAY_IN_SUBSCREEN       =
    TABLES
*     IT_LOG_SPROT     =
      it_log_bapiret2  = t_mensajes
    EXCEPTIONS
      parameter_error  = 1
      OTHERS           = 2.
ENDFORM.                    " LOG_INVENTARIO
*&---------------------------------------------------------------------*
*&      Form  GRABAMOS_PREGUNTA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_LV_ERROR  text
*      -->P_zsinv0002_grid_DOCUM  text
*      <--P_SW_GRABAMOS  text
*----------------------------------------------------------------------*
FORM grabamos_pregunta  USING    p_error
                                 p_docum
                        CHANGING p_grabamos.
  CLEAR p_grabamos.
  IF p_error NE 'X'.
    MOVE 'X' TO p_grabamos.
  ELSE.
    DATA: respuesta.
    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
*       TITLEBAR      = ' '
*       DIAGNOSE_OBJECT             = ' '
        text_question = text-029 " Fichero de inventario erróneo
        text_button_1 = text-030 " Grabar
*       ICON_BUTTON_1 = ' '
        text_button_2 = text-031 " No grabar
*       ICON_BUTTON_2 = ' '
*       DEFAULT_BUTTON              = '1'
*       DISPLAY_CANCEL_BUTTON       = 'X'
*       USERDEFINED_F1_HELP         = ' '
        start_column  = 10
        start_row     = 10
*       POPUP_TYPE    =
*       IV_QUICKINFO_BUTTON_1       = ' '
*       IV_QUICKINFO_BUTTON_2       = ' '
      IMPORTING
        answer        = respuesta
*         TABLES
*       PARAMETER     =
*         EXCEPTIONS
*       TEXT_NOT_FOUND              = 1
*       OTHERS        = 2
      .
*        IF sy-subrc <> 0.
*          Implement suitable error handling here
*        ENDIF.
    CHECK respuesta EQ '1'.
    MOVE 'X' TO p_grabamos.
  ENDIF.
ENDFORM.                    " GRABAMOS_PREGUNTA
*&---------------------------------------------------------------------*
*&      Form  GUARDAR_MENSAJES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_T_MENSAJES  text
*      -->P_zsinv0002_grid  text
*----------------------------------------------------------------------*
FORM guardar_mensajes  TABLES   t_mensajes STRUCTURE bapiret2
                       USING    r_zsinv0002_grid TYPE zsinv0002_grid
                               VALUE(p_commit).
*  CHECK t_mensajes[] IS NOT INITIAL.
*  DELETE FROM ztinv2_log WHERE docum EQ r_zsinv0002_grid-docum.
*
*  DATA posi LIKE ztinv2_pi-posicion.
*  posi = 0.
*  LOOP AT t_mensajes.
*    ADD 1 TO posi.
*    CLEAR ztinv2_log.
*    ztinv2_log-mandt    = sy-mandt.
*    ztinv2_log-docum    = r_zsinv0002_grid-docum.
*    ztinv2_log-posicion = posi.
*    ztinv2_log-error    = lv_error.
*    ztinv2_log-tipo     = t_mensajes-type.
*    ztinv2_log-id       = t_mensajes-id.
*    ztinv2_log-numero   = t_mensajes-number.
*    ztinv2_log-m1       = t_mensajes-message_v1.
*    ztinv2_log-m2       = t_mensajes-message_v2.
*    ztinv2_log-m3       = t_mensajes-message_v3.
*    ztinv2_log-m4       = t_mensajes-message_v4.
*    INSERT                ztinv2_log FROM                ztinv2_log.
*  ENDLOOP.
*  CHECK p_commit EQ 'X'.
*  COMMIT WORK AND WAIT.
ENDFORM.                    " GUARDAR_MENSAJES
*&---------------------------------------------------------------------*
*&      Form  CREAR_POSICION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_PS_INV_CI_DOCUM  text
*      -->P_LS_MCHB_WERKS  text
*      -->P_LS_MCHB_LGORT  text
*      -->P_LS_MCHB_CHARG  text
*      -->P_LS_MCHB_MATNR  text
*      -->P_P_UNAME  text
*      -->P_P_DATUM  text
*      -->P_P_UZEIT  text
*      -->P_LS_MCHB_CINSM  text
*      -->P_LS_MCHB_CSPEM  text
*      -->P_LS_MCHB_CRETM  text
*      -->P_LS_MCHB_CLABS  text
*      -->P_LT_MATNR_LOTE[]  text
*----------------------------------------------------------------------*
FORM crear_posicion  USING    ps_docum
                              ps_werks
                              ps_lgort
                              ps_charg
                              ps_matnr
                              ps_uname
                              ps_datum
                              ps_uzeit
                              ps_insm
                              ps_spem
                              ps_retm
                              ps_labs
                              lt_matnr TYPE tty_material
                    CHANGING  pt_inv_pi TYPE ty_ztinv2_pi
                              pv_posnr
                              pt_messages TYPE bapiret2_t
                              p_error.

  DATA: ls_matnr    TYPE ty_material,
        ls_inv_pi   TYPE ztinv2_pi,
        lv_cretm    TYPE xflag,
        lv_f_stock  TYPE xflag,
        gs_messages TYPE bapiret2.

  CLEAR ls_inv_pi.
  CLEAR lv_f_stock.
  ls_inv_pi-docum = ps_docum.
  ls_inv_pi-werks = ps_werks.
  ls_inv_pi-lgort = ps_lgort.
  ls_inv_pi-charg = ps_charg.
  ls_inv_pi-matnr = ps_matnr.
  CLEAR ls_matnr.

  READ TABLE lt_matnr INTO ls_matnr
             WITH KEY matnr = ps_matnr.

  IF ls_matnr-meins IS NOT INITIAL.
    ls_inv_pi-meins = ls_matnr-meins.
  ELSE.
    SELECT SINGLE meins FROM mara
      INTO ls_inv_pi-meins
      WHERE matnr EQ ps_matnr.
*      ls_inv_pi-meins = 'KG'. " no puede darse, es campo obligatorio
  ENDIF.

*    ls_inv_pi-contado = 'X'.
  ls_inv_pi-ernam = ps_uname.
*    ls_inv_pi-ernam_mod = ps_uname.
  ls_inv_pi-erdat = ps_datum.
*    ls_inv_pi-erdat_mod = ps_datum.
  ls_inv_pi-erzeit = ps_uzeit.
*    ls_inv_pi-erzeit_mod = ps_uzeit.

  " Stock Calidad:
  CLEAR: ls_inv_pi-posicion, ls_inv_pi-bstar.
  CLEAR: ls_inv_pi-menge.
  IF ps_insm <> 0.
    ls_inv_pi-posicion = pv_posnr.
    ls_inv_pi-bstar = '2'.
    ls_inv_pi-menge = ps_insm.
    pv_posnr = pv_posnr + 1.
    lv_f_stock = 'X'.
    APPEND ls_inv_pi TO pt_inv_pi.
  ENDIF.

  " Stock Bloqueado:
  CLEAR: ls_inv_pi-posicion, ls_inv_pi-bstar.
  CLEAR: ls_inv_pi-menge.
  IF ps_spem <> 0." AND lv_f_stock <> 'X'. " en principio lo seleccionaremos siempre, no se porque esta esto
    ls_inv_pi-posicion = pv_posnr.
    ls_inv_pi-bstar = '4'.
    ls_inv_pi-menge = ps_spem.
    pv_posnr = pv_posnr + 1.
    lv_f_stock = 'X'.
    APPEND ls_inv_pi TO pt_inv_pi.
  ENDIF.

  " Stock Devolución:
  CLEAR: ls_inv_pi-posicion, ls_inv_pi-bstar.
  CLEAR: ls_inv_pi-menge.
  IF ps_retm <> 0." AND lv_f_stock <> 'X'.
    ls_inv_pi-posicion = pv_posnr.
    ls_inv_pi-bstar = '3'.
    ls_inv_pi-menge = ps_retm.

    IF lv_cretm <> 'X'.
      CLEAR gs_messages.
      gs_messages-type = 'S'.
      gs_messages-number = '107'.
      gs_messages-id = 'ZMM'.
      APPEND gs_messages TO pt_messages.
      lv_cretm = 'X'.
    ENDIF.

    CLEAR gs_messages.
    gs_messages-type = 'S'.
    gs_messages-number = '108'.
    gs_messages-id = 'ZMM'.
    gs_messages-message_v1 = ps_charg.
    APPEND gs_messages TO pt_messages.
    pv_posnr = pv_posnr + 1.
    lv_f_stock = 'X'.
    APPEND ls_inv_pi TO pt_inv_pi.
  ENDIF.

  " Stock Libre Utilización:
  CLEAR: ls_inv_pi-posicion, ls_inv_pi-bstar.
  CLEAR: ls_inv_pi-menge.
  IF ps_labs <> 0." AND lv_f_stock <> 'X'.
    ls_inv_pi-posicion = pv_posnr.
    ls_inv_pi-bstar = '1'.
    ls_inv_pi-menge = ps_labs.
    pv_posnr = pv_posnr + 1.
    lv_f_stock = 'X'.
    APPEND ls_inv_pi TO pt_inv_pi.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MOSTRAR_ALV_500
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM mostrar_alv_500.
  DATA: ls_variant5 TYPE disvariant.

* Preparamos el catálogo de campos
  PERFORM prepare_fielcat_500.

* Para que muestre el ancho de las columnas optimizado
  t_layout5-cwidth_opt = 'X'.
  t_layout5-sel_mode   = 'A'.
  ls_variant5-report   = sy-repid.
  ls_variant5-handle   = '500'.

* Mostrar alv
  CALL METHOD g_grid5->set_table_for_first_display
    EXPORTING
      is_layout            = t_layout5
      i_structure_name     = 'zsinv0002_grid5'
      it_toolbar_excluding = gti_toolbar_ex5
      is_variant           = ls_variant5
      i_save               = 'A'
    CHANGING
      it_outtab            = gti_mostrar5[]
      it_fieldcatalog      = gti_fieldcat5.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  REFRESCAR_ALV_500
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM refrescar_alv_500 .
  DATA: ls_layout TYPE lvc_s_layo,
        ls_stable TYPE lvc_s_stbl.

* Sacamos el layout del ALV
  CALL METHOD g_grid5->get_frontend_layout
    IMPORTING
      es_layout = ls_layout.

* Ponemos de nuevo que optimice las columnas
  ls_layout-cwidth_opt = 'X'.

* Cargamos de nuevo el layout
  CALL METHOD g_grid5->set_frontend_layout
    EXPORTING
      is_layout = ls_layout.

* Refrescamos el ALV
  ls_stable-row = 'X'.
  ls_stable-col = 'X'.

  CALL METHOD g_grid5->refresh_table_display
    EXPORTING
      is_stable = ls_stable.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  PREPARE_FIELCAT_500
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prepare_fielcat_500 .
* Variable auxiliar
  DATA: ls_fieldcat  TYPE lvc_s_fcat,
        ls_group_alv TYPE lvc_s_sgrp.

* Recuperamos el catálogo de campos de la estructura
  CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
    EXPORTING
      i_structure_name = 'zsinv0002_grid5'
    CHANGING
      ct_fieldcat      = gti_fieldcat5.

  LOOP AT gti_fieldcat5 INTO ls_fieldcat.
    CASE ls_fieldcat-fieldname.
      WHEN 'DOCUM'.
        ls_fieldcat-hotspot = 'X'.
        ls_fieldcat-emphasize = 'X'.
      WHEN 'NAME1'.
        ls_fieldcat-scrtext_l = text-000.
        ls_fieldcat-scrtext_m = text-000.
        ls_fieldcat-scrtext_s = 'Nombre'.
        ls_fieldcat-reptext   = text-000.
      WHEN 'VALIDADO'.
        ls_fieldcat-scrtext_l = text-027.
        ls_fieldcat-scrtext_m = text-027.
        ls_fieldcat-scrtext_s = text-027.
        ls_fieldcat-reptext   = text-027.
      WHEN 'UBICACION'.
        ls_fieldcat-scrtext_l = 'Ubicación'.
        ls_fieldcat-scrtext_m = 'Ubicación'.
        ls_fieldcat-scrtext_s = 'Ubicación'.
        ls_fieldcat-reptext   = 'Ubicación'.
        ls_fieldcat-emphasize = 'X'.
      WHEN 'MATNR' OR 'MTART'.
        ls_fieldcat-emphasize = 'X'.
      WHEN 'WHO' OR 'ERDAT' OR 'ERZEIT' OR 'ERNAM' OR 'AEDAT' OR 'AEZEIT' OR 'AENAM'.
        ls_fieldcat-no_out = 'X'.
      WHEN 'MULTI' OR 'LOG'.
        ls_fieldcat-checkbox = 'X'.
    ENDCASE.
*   Modificamos
    MODIFY gti_fieldcat5 FROM ls_fieldcat.
    CLEAR ls_fieldcat.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_INVENTARIO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ZSINV0002_GRID_DOCUM  text
*----------------------------------------------------------------------*
FORM actualizar_inventario  USING    p_docum.
  DATA: ls_inv_ci   TYPE ztinv2_ci,
        lv_error(1).

  IF zsinv0002_grid-status NE 'I'.
    MESSAGE 'No se puede actualizar un inventario ya tratado, bórrelo y cree uno nuevo' TYPE 'E'.
  ELSE.
    SELECT SINGLE @abap_true FROM ztinv2_pi
      WHERE docum EQ @zsinv0002_grid-docum
        AND contado NE @space
        INTO @DATA(result).

    IF sy-subrc EQ 0.
      MESSAGE 'No se puede actualizar un inventario ya tratado, bórrelo y cree uno nuevo' TYPE 'E'.
    ENDIF.
  ENDIF.

  MOVE-CORRESPONDING zsinv0002_grid TO ls_inv_ci.

  UPDATE ztinv2_ci SET aedat = sy-datum
                       aezeit = sy-uzeit
                       aenam = sy-uname
                 WHERE docum = p_docum.

  zsinv0002_grid-aedat = sy-datum.
  zsinv0002_grid-aezeit = sy-uzeit.
  zsinv0002_grid-aenam = sy-uname.

  CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
    EXPORTING
      docum = zsinv0002_grid-docum
      msgty = 'S'
      msgid = 'ZMM'
      msgno = '159'.

  PERFORM registro_posiciones_inventario USING ls_inv_ci
                                               sy-uname
                                               sy-datum
                                               sy-uzeit
                                      CHANGING lv_error.

  PERFORM listado_posiciones USING zsinv0002_grid-docum
                                   zsinv0002_grid-status.

  PERFORM refrescar_alv_200.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  LISTADO_POSICIONES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ZSINV0002_GRID_DOCUM  text
*      -->P_ZSINV0002_GRID_STATUS  text
*----------------------------------------------------------------------*
FORM listado_posiciones  USING    p_docum
                                  p_status.
  TYPES: BEGIN OF tipo_matnr,
           matnr TYPE matnr,
           maktx TYPE maktx.
  TYPES: END OF tipo_matnr.
  TYPES: tty_matnr TYPE STANDARD TABLE OF tipo_matnr.
  DATA: gti_pi_aux    TYPE tyt_tipo_pos,
        wa_pi_aux     TYPE tipo_pos,
        wa_pi         TYPE tipo_pos,
        lt_casuistica TYPE STANDARD TABLE OF dd07v,
        wa_casuistica TYPE                   dd07v,
        t_matnr       TYPE         tty_matnr,
        wa_matnr      TYPE LINE OF tty_matnr,
        wa_color      TYPE lvc_s_scol.

  CLEAR: gti_pi, gti_pi_aux, lt_casuistica.
  REFRESH: gti_pi, gti_pi_aux, lt_casuistica.

  CALL FUNCTION 'DD_DD07V_GET'
    EXPORTING
      domain_name    = 'ZCASUISTICA2'
      langu          = sy-langu
      withtext       = 'X'
    TABLES
      dd07v_tab      = lt_casuistica
    EXCEPTIONS
      access_failure = 1
      OTHERS         = 2.

  SELECT * FROM ztinv2_pi
    INTO CORRESPONDING FIELDS OF TABLE gti_pi_aux
    WHERE docum    = zsinv0002_grid-docum.

  " Descripción material:
  SELECT matnr maktx
    INTO TABLE t_matnr
    FROM makt
    FOR ALL ENTRIES IN gti_pi_aux
    WHERE matnr = gti_pi_aux-matnr.

  CLEAR wa_pi_aux.
  LOOP AT gti_pi_aux INTO wa_pi_aux.
    CLEAR wa_pi.
    MOVE-CORRESPONDING wa_pi_aux TO wa_pi.

    " Descripción material:
    READ TABLE t_matnr INTO wa_matnr WITH KEY matnr = wa_pi-matnr.
    IF sy-subrc = 0.
      wa_pi-maktx = wa_matnr-maktx.
    ENDIF.

    " Descripción casuística:
    CLEAR wa_casuistica.
    READ TABLE lt_casuistica INTO wa_casuistica
           WITH KEY domvalue_l  = wa_pi-casuistica
                    ddlanguage = sy-langu.

    IF wa_casuistica IS NOT INITIAL.
      wa_pi-casuistica_txt = wa_casuistica-ddtext.
    ELSE.
      CLEAR wa_pi-casuistica_txt.
    ENDIF.

    IF wa_pi-procesado IS NOT INITIAL.
      wa_pi-line_color = 'C511'.
    ELSEIF wa_pi-contado IS NOT INITIAL.
      wa_pi-line_color = 'C500'.
    ENDIF.

    IF wa_pi-contado IS NOT INITIAL AND zsinv0002_grid-status NA 'CIB'
       AND wa_pi-procesado IS INITIAL.
      MOVE 'MENGE_NEW'   TO wa_color-fname.
      MOVE '0'         TO wa_color-color-col.
      MOVE '1'         TO wa_color-color-int.
      MOVE '0'         TO wa_color-color-inv.
      APPEND wa_color  TO wa_pi-color_cell.
*
*      MOVE 'CONTADO'   TO wa_color-fname.
*      APPEND wa_color TO wa_pi-color_cell.
*
*      MOVE 'LGORT_NEW'   TO wa_color-fname.
*      APPEND wa_color TO wa_pi-color_cell.
    ENDIF.

    APPEND wa_pi TO gti_pi.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  POSICION_MODIFICADA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_ER_DATA_CHANGED  text
*----------------------------------------------------------------------*
FORM posicion_modificada  USING  p_er_data_changed TYPE REF TO cl_alv_changed_data_protocol.
  DATA: wa_mod TYPE lvc_s_modi.

  LOOP AT p_er_data_changed->mt_mod_cells INTO wa_mod.
    t_index-index = wa_mod-row_id.
    APPEND t_index.
    CLEAR t_index.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_MODIFICACIONES
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM actualizar_modificaciones .
  DATA: ls_etiqueta TYPE char40,
        lv_msgv1    TYPE char50,
        lv_msgv2    TYPE char20,
        lv_msgv3    TYPE char20.
  FIELD-SYMBOLS: <pi> LIKE LINE OF gti_pi.

  LOOP AT t_index.
    READ TABLE gti_pi ASSIGNING <pi> INDEX t_index-index.

    IF <pi>-menge_new GT 0.
      CLEAR ls_etiqueta.
      CONCATENATE <pi>-matnr <pi>-charg INTO ls_etiqueta SEPARATED BY space.

      CALL FUNCTION 'ZMM_INV_RECUENTO'
        EXPORTING
          docum          = <pi>-docum
          etiqueta       = ls_etiqueta
          cantidad       = <pi>-menge_new
          change         = 'X'
        EXCEPTIONS
          falta_cantidad = 1
          error_lectura  = 2
          OTHERS         = 3.

      IF sy-subrc NE 0.
        MESSAGE 'Error al modificar posición' TYPE 'S' DISPLAY LIKE 'E'.
      ENDIF.
    ELSEIF <pi>-contado IS NOT INITIAL. " si hemos puesto cantidad 0 y estaba contado, caso D
      <pi>-casuistica = 'D'.
      <pi>-zero = 'X'.
      CLEAR <pi>-lgort_new.

      UPDATE ztinv2_pi SET menge_new  = <pi>-menge_new
                           lgort_new  = <pi>-lgort_new
                           casuistica = <pi>-casuistica
                           zero       = <pi>-zero
                           aedat      = sy-datum
                           aezeit     = sy-uzeit
                           aenam      = sy-uname
                     WHERE docum    EQ <pi>-docum
                       AND posicion EQ <pi>-posicion.

      WRITE <pi>-matnr TO lv_msgv1 NO-ZERO.
      IF <pi>-charg IS NOT INITIAL.
        CONCATENATE lv_msgv1 '/' <pi>-charg INTO lv_msgv1.
      ENDIF.
      CONDENSE lv_msgv1.
      WRITE <pi>-posicion TO lv_msgv2 NO-ZERO.
      lv_msgv3 = <pi>-menge_new.
      CONDENSE: lv_msgv1, lv_msgv2, lv_msgv3.

      CALL FUNCTION 'ZMM_INV_INSERTAR_LOG' IN UPDATE TASK
        EXPORTING
          docum = <pi>-docum
          matnr = <pi>-matnr
          charg = <pi>-charg
          msgty = 'S'
          msgid = 'ZMM'
          msgno = '163'
          msgv1 = lv_msgv1
          msgv2 = lv_msgv2
          msgv3 = lv_msgv3
          msgv4 = <pi>-casuistica.

      COMMIT WORK AND WAIT.
    ENDIF.
  ENDLOOP.

  REFRESH: t_index.

ENDFORM.
**&---------------------------------------------------------------------*
**&      Form  CREAR_ALMACEN
**&---------------------------------------------------------------------*
**       text
**----------------------------------------------------------------------*
**      -->P_WA_PI_MATNR  text
**      -->P_WA_PI_LGORT  text
**      -->P_WA_PI_LGORT_NEW  text
**      -->P_WA_PI_WERKS  text
**----------------------------------------------------------------------*
*FORM crear_almacen  USING    p_matnr
*                             p_lgort
*                             p_lgort_new
*                             p_werks.
*
*  DATA: ls_mard  TYPE bapi_mard,
*        ls_mardx TYPE bapi_mardx.
*
*  SELECT SINGLE * FROM mard
*    INTO CORRESPONDING FIELDS OF ls_mard
*    WHERE matnr EQ p_matnr
*      AND lgort EQ p_lgort_new
*      AND werks EQ p_werks.
*
**  ls_mard-lgort =
*
*ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ACTUALIZAR_FIELDCAT200
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM actualizar_fieldcat200 .
  FIELD-SYMBOLS: <fieldcat> TYPE lvc_s_fcat,
                 <pi>       LIKE LINE OF gti_pi.
  DATA: wa_color      TYPE lvc_s_scol.

  IF zsinv0002_grid-status CA 'ICB'.
    LOOP AT gti_fieldcat_200 ASSIGNING <fieldcat> WHERE edit IS NOT INITIAL.
      CLEAR <fieldcat>-edit.
    ENDLOOP.
    LOOP AT gti_pi ASSIGNING <pi>.
      REFRESH <pi>-color_cell.
    ENDLOOP.
  ELSE.
    LOOP AT gti_fieldcat_200 ASSIGNING <fieldcat> WHERE edit IS INITIAL
                                                    AND fieldname EQ 'MENGE_NEW'.
      <fieldcat>-edit = 'X'.
    ENDLOOP.
    LOOP AT gti_pi ASSIGNING <pi>.
      MOVE 'MENGE_NEW'   TO wa_color-fname.
      MOVE '0'         TO wa_color-color-col.
      MOVE '1'         TO wa_color-color-int.
      MOVE '0'         TO wa_color-color-inv.
      APPEND wa_color  TO <pi>-color_cell.
    ENDLOOP.
  ENDIF.

  CALL METHOD g_grid_200->set_frontend_fieldcatalog
    EXPORTING
      it_fieldcatalog = gti_fieldcat_200.

ENDFORM.
