
class ZCL_SI_PRI2SAP_ALBARAN_IN_B definition
  public
  create public .

public section.

  interfaces ZII_SI_PRI2SAP_ALBARAN_IN_B .
protected section.
private section.
endclass. "ZCL_SI_PRI2SAP_ALBARAN_IN_B definition
class ZCL_SI_PRI2SAP_ALBARAN_IN_B implementation.
  METHOD zii_si_pri2sap_albaran_in_b~si_pri2sap_albaran_in_b.
*-----------------------------------------------------
*  INPUT  TYPE ZMT_ALBARAN_PRISMA
*  OUTPUT	TYPE ZMT_ALBARAN_PRISMA_RESPONSE
*-----------------------------------------------------
    DATA: ls_header TYPE bapi2017_gm_head_01,
          lt_return TYPE TABLE OF bapiret2,
          wa_return TYPE bapiret2,
          lt_item   TYPE TABLE OF bapi2017_gm_item_create,
          ls_item   TYPE bapi2017_gm_item_create,
          e_mblnr   TYPE  mblnr,
          e_mjahr   TYPE  mjahr.

    DATA: lv_string   TYPE  char30,
          lv_float    TYPE  f,
          lv_dec      TYPE p LENGTH 3,
          lv_decimals TYPE  i.

    DATA: wa_error TYPE zdt_albaran_prisma_response_me.

    DATA(o_log) = NEW zcl_ap_log( object = 'PRISMA_ALB'
                                  report = 'ZCL_SI_PRI2SAP_ALBARAN_IN_B'
                                  clave  = zcl_ap_proxy=>GET_MSGGUID( ) ).

    CLEAR: lt_item,
           ls_header,
           ls_item.

    REFRESH: lt_item,
             lt_return.

    READ TABLE input-mt_albaran_prisma-delivery_note_line INTO DATA(wa_post) INDEX 1.
    o_log->log( msgty = 'I'
               message  = 'Inicio proceso'
               msgv1    = wa_post-company
               msgv2    = input-mt_albaran_prisma-delivery_note_doc
               msgv3    = input-mt_albaran_prisma-delivery_note
               msgv4    = wa_post-custom_sappurchase_order ).


*   cabecera
    ls_header-pstng_date =  sy-datum. "input-mt_albaran_prisma-delivery_note_date.
    ls_header-doc_date   =  input-mt_albaran_prisma-delivery_note_date.
    ls_header-pr_uname = sy-uname.
    ls_header-ref_doc_no = input-mt_albaran_prisma-delivery_note_doc.
    ls_header-header_txt = input-mt_albaran_prisma-delivery_note.

*   posiciones
    LOOP AT input-mt_albaran_prisma-delivery_note_line INTO DATA(wa_pos).
*      ls_item-material = '7000001''. "'000000000007000001'. "wa_pos-item.
      ls_item-plant = wa_pos-company.
*      ls_item-stge_loc = wa_pos-store.
      ls_item-move_type = '101'.

      ls_item-po_number =  wa_pos-custom_sappurchase_order.
      CONDENSE ls_item-po_number.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = ls_item-po_number
        IMPORTING
          output = ls_item-po_number.

      SELECT * FROM ekpo
        INTO TABLE @DATA(t_ekpo)
        WHERE ebeln = @ls_item-po_number.

      READ TABLE t_ekpo INTO DATA(wa_ekpo) INDEX wa_pos-purchase_order_line.
      IF sy-subrc = 0.
        ls_item-po_item = wa_ekpo-ebelp. "wa_pos-purchase_order_line.
      ENDIF.

* >> JJR 12.07.2023
      lv_string = wa_pos-item_quantity.
*      replace ',' in lv_string WITH '.'.
      ls_item-entry_qnt = lv_string.
* << JJR 12.07.2023


*      lv_string = wa_pos-ITEM_QUANTITY.
*      CALL FUNCTION 'C14DG_CHAR_NUMBER_CONVERSION'
*        EXPORTING
*          i_string                   = lv_string
*        IMPORTING
*          e_float                    = lv_float
*          e_dec                      = lv_dec
*          e_decimals                 = lv_decimals
*        EXCEPTIONS
*          wrong_characters           = 1
*          first_character_wrong      = 2
*          arithmetic_sign            = 3
*          multiple_decimal_separator = 4
*          thousandsep_in_decimal     = 5
*          thousand_separator         = 6
*          number_too_big             = 7
*          OTHERS                     = 8.
*      IF sy-subrc <> 0.
**       Implement suitable error handling here
*      ELSE.
*        MOVE lv_dec TO ls_item-entry_qnt.
*      ENDIF.



      "hacemos la conversión a UN
*      lv_purchase_unit  = wa_pos-purchase_unit.
*      CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
*        EXPORTING
*          input          = lv_purchase_unit
*          language       = 'S'
*        IMPORTING
*          output         = lv_purchase_unit
*        EXCEPTIONS
*          unit_not_found = 1
*          OTHERS         = 2.
*      IF sy-subrc <> 0.
** Implement suitable error handling here
*      ENDIF.


*      CALL FUNCTION 'MD_CONVERT_MATERIAL_UNIT'
*        EXPORTING
*          i_matnr              = wa_pos-item
*          i_in_me              = lv_purchase_unit
*          i_out_me             = 'ST'
*          i_menge              = ls_item-entry_qnt
*        IMPORTING
*          e_menge              = ls_item-entry_qnt
*        EXCEPTIONS
*          error_in_application = 1
*          error                = 2
*          OTHERS               = 3.
*      IF sy-subrc <> 0.
**       Implement suitable error handling here
*      ENDIF.


*  ls_item-batch     = i_charg.
      ls_item-entry_uom = 'ST'.
*      ls_item-orderid =  wa_pos-work_order.
      ls_item-mvt_ind = 'B'. "Movimiento de mercancías para pedido
*      CONCATENATE wa_pos-item wa_pos-item_name INTO ls_item-item_text SEPARATED BY '-'.
      APPEND ls_item TO lt_item.
    ENDLOOP.



    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = ls_header
        goodsmvt_code    = '01'
*       TESTRUN          = ' '
*       GOODSMVT_REF_EWM =
      IMPORTING
*       GOODSMVT_HEADRET =
        materialdocument = e_mblnr
        matdocumentyear  = e_mjahr
      TABLES
        goodsmvt_item    = lt_item
*       GOODSMVT_SERIALNUMBER         =
        return           = lt_return
*       GOODSMVT_SERV_PART_DATA       =
*       EXTENSIONIN      = lt_return
      .

    READ TABLE lt_return INTO wa_return WITH KEY type = 'E'.
    IF sy-subrc = 0.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

      LOOP AT lt_return INTO wa_return WHERE type = 'E'.
        output-mt_albaran_prisma_response-custom_sapdelivery_note = ''.
        output-mt_albaran_prisma_response-error = abap_true.

        CONCATENATE wa_return-message
                    wa_return-message_v1
                    wa_return-message_v2
                    wa_return-message_v3
                    wa_return-message_v4
        INTO wa_error-message_linea SEPARATED BY space. "output-mt_pedido_prisma_response-message SEPARATED BY space.

        APPEND wa_error TO output-mt_albaran_prisma_response-message.
      ENDLOOP.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.

      CONCATENATE e_mblnr e_mjahr INTO output-mt_albaran_prisma_response-custom_sapdelivery_note SEPARATED BY '/'.

    ENDIF.

    LOOP AT lt_return INTO wa_return.
      o_log->log( msgid    = wa_return-id
                  msgty    = wa_return-type
                  msgno    = wa_return-number
                  message  = wa_return-message
                  msgv1    = wa_post-company
                  msgv2    = input-mt_albaran_prisma-delivery_note_doc
                  msgv3    = input-mt_albaran_prisma-delivery_note
                  msgv4    = wa_post-custom_sappurchase_order ).
    ENDLOOP.
  ENDMETHOD.
endclass. "ZCL_SI_PRI2SAP_ALBARAN_IN_B definition
endclass. "ZCL_SI_PRI2SAP_ALBARAN_IN_B implementation
