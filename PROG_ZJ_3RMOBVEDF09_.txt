*----------------------------------------------------------------------*
*   INCLUDE J_3RMOBVEDF09                                              *
*&---------------------------------------------------------------------*
*&      Form  stock_value_update
*&---------------------------------------------------------------------*
form stock_value_update
     using p_budat          type budat
           p_time           type cputm                         "1247791
           pp_so_budat_high type budat
           pp_so_budat_low  type budat
           p_menge          type menge_d
           p_dmbtr          type j_3rfinsum
     changing pw_listmat    type type_listmat
              pw_partcost   type type_cost
              pt_bwtar_change type tt_bwtar_change.            "1247791

  field-symbols: <fs_bwtar> type type_bwtar_change.            "1247791

  if p_budat gt pp_so_budat_high.
    pw_listmat-endremn = pw_listmat-endremn - p_menge.
    pw_partcost-lbkue = pw_partcost-lbkue - p_menge.
    pw_partcost-salke = pw_partcost-salke - p_dmbtr.
  endif.
* calc quantity material start date in table p_listmat
  if p_budat ge pp_so_budat_low.
    pw_listmat-begremn = pw_listmat-begremn - p_menge.
    pw_partcost-lbkub = pw_partcost-lbkub - p_menge.
    pw_partcost-salkb = pw_partcost-salkb - p_dmbtr.
  endif.
  if p_budat <= pp_so_budat_high
      and p_budat >= pp_so_budat_low.
    if p_menge > 0.
      pw_listmat-deltlbkumd = pw_listmat-deltlbkumd + p_menge.
    else.
      pw_listmat-deltlbkumk = pw_listmat-deltlbkumk - p_menge.
    endif.
  endif.

  check pa_valch is not initial.                               "1363385
* actual stock quantities should be kept for every val. type   "1247791
* change document in order to process it correctly later.
* There's no other possibility to split such document between
* different storage locations
  loop at pt_bwtar_change assigning <fs_bwtar>                 "1247791
       where matnr = pw_listmat-xmatnr
         and bwtar = pw_listmat-bwtar
         and werks = pw_listmat-werk
         and lgort = pw_listmat-lgort
         and charg = pw_listmat-charg
         and sobkz = pw_listmat-sobkz
         and linkk = pw_listmat-linkk.

    if p_budat gt <fs_bwtar>-date or
       ( p_budat eq <fs_bwtar>-date and p_time gt <fs_bwtar>-time ).

      if p_budat gt pp_so_budat_high.
        <fs_bwtar>-endremn = <fs_bwtar>-endremn - p_menge.
      endif.
      if p_budat ge pp_so_budat_low.
        <fs_bwtar>-begremn = <fs_bwtar>-begremn - p_menge.
      endif.
      if p_budat <= pp_so_budat_high
          and p_budat >= pp_so_budat_low.
        if p_menge > 0.
          <fs_bwtar>-deltlbkumd = <fs_bwtar>-deltlbkumd + p_menge.
        else.
          <fs_bwtar>-deltlbkumk = <fs_bwtar>-deltlbkumk - p_menge.
        endif.
      endif.

    endif.
  endloop.                                                     "1247791

endform.  " stock_value_update
*&---------------------------------------------------------------------*
*&      Form  at_storage_cost_calculation
*&---------------------------------------------------------------------*
form at_storage_cost_calculation
    tables p_listmat type tt_listmat
*           p_docmat  TYPE TT_docmat
    changing pt_partcost type tt_partcost.

  data: lt_partite_cost type sorted table of type_cost
        with unique key matnr bwkey bwtar bwtty
                        werks tblsb linkk lgort charg sobkz,
        l_salkb       type type_gazprvl,
        l_salke       type type_gazprvl,
        l_salkb_max   type type_gazprvl,
        l_salke_max   type type_gazprvl,
        l_salkb_delta type type_gazprvl,
        l_salke_delta type type_gazprvl,
        l_recb        type sytabix,
        l_rece        type sytabix,
        l_prcntall type i, " for scale
        lw_partcost   type type_cost.

  field-symbols:
      <fs_listmat>     type type_listmat,
      <lw_cost_common> type type_cost,
      <lw_cost_detail> type type_cost.

  describe table p_listmat lines l_prcntall.

  if l_prcntall is initial.
    exit.
  endif.

  loop at pt_partcost assigning <lw_cost_detail>.
    <lw_cost_detail>-lbkub = <lw_cost_detail>-lbkub
        + <lw_cost_detail>-lbkum.
    <lw_cost_detail>-lbkue = <lw_cost_detail>-lbkue
        + <lw_cost_detail>-lbkum.

    <lw_cost_detail>-salkb = <lw_cost_detail>-salkb
        + <lw_cost_detail>-salk3.
    <lw_cost_detail>-salke = <lw_cost_detail>-salke
        + <lw_cost_detail>-salk3.

  endloop.

* matnr bwkey bwtar bwtty werks tblsb linkk lgort charg sobkz,

  loop at p_listmat assigning <fs_listmat>.
* looking-for partite cost table
    read table pt_partcost into lw_partcost
        with key matnr = <fs_listmat>-xmatnr
                 bwkey = <fs_listmat>-bwkey
                 bwtar = <fs_listmat>-bwtar
                 bwtty = <fs_listmat>-bwtty
                 werks = <fs_listmat>-werk
                 tblsb = <fs_listmat>-tblsb
                 linkk = <fs_listmat>-linkk
                 lgort = <fs_listmat>-lgort
                 charg = <fs_listmat>-charg
                 sobkz = <fs_listmat>-sobkz
        binary search.
    check not sy-subrc is initial.

    if <fs_listmat>-sobkz = gc_spec_q or
        <fs_listmat>-sobkz = gc_spec_e.
*        LOOP AT pt_partcost INTO lw_partcost
*            WHERE matnr = <fs_listmat>-xmatnr
*              AND bwkey = <fs_listmat>-bwkey
*              AND bwtar = <fs_listmat>-bwtar
*              AND bwtty = <fs_listmat>-bwtty
*              AND werks = <fs_listmat>-werk
*              AND tblsb = <fs_listmat>-tblsb
*              AND linkk = <fs_listmat>-linkk.
*
*            CHECK lw_partcost-lgort IS INITIAL
*                AND lw_partcost-charg IS INITIAL.
*            EXIT.
*        ENDLOOP.
      read table pt_partcost into lw_partcost
          with key matnr = <fs_listmat>-xmatnr
                   bwkey = <fs_listmat>-bwkey
                   bwtar = <fs_listmat>-bwtar
                   bwtty = <fs_listmat>-bwtty
                   werks = <fs_listmat>-werk
                   tblsb = <fs_listmat>-tblsb
                   linkk = <fs_listmat>-linkk
          binary search.
    else.
      read table pt_partcost into lw_partcost
          with key matnr = <fs_listmat>-xmatnr
                   bwkey = <fs_listmat>-bwkey
                   bwtar = <fs_listmat>-bwtar
                   bwtty = <fs_listmat>-bwtty
                   werks = <fs_listmat>-werk
                   tblsb = <fs_listmat>-tblsb
          binary search.
    endif.
    check sy-subrc is initial.
* salk* - value
* lbku* - quantity
* cost material start date
    if not lw_partcost-lbkub is initial.
      lw_partcost-salkb = lw_partcost-salkb
          * <fs_listmat>-begremn / lw_partcost-lbkub.
    else.
      lw_partcost-salkb = 0.
    endif.
* cost material end date
    if not lw_partcost-lbkue is initial.
      lw_partcost-salke = lw_partcost-salke
          * <fs_listmat>-endremn / lw_partcost-lbkue.
    else.
      lw_partcost-salke = 0.
    endif.
    move: <fs_listmat>-lgort   to lw_partcost-lgort,
          <fs_listmat>-sobkz   to lw_partcost-sobkz,
          <fs_listmat>-charg   to lw_partcost-charg,
          <fs_listmat>-linkk   to lw_partcost-linkk,
          <fs_listmat>-endremn to lw_partcost-lbkue,
          <fs_listmat>-begremn to lw_partcost-lbkub.
    insert lw_partcost into table pt_partcost.
  endloop.

  lt_partite_cost[] = pt_partcost.
* INSERT LINES OF pt_partcost INTO lt_partite_cost.

  delete lt_partite_cost where not lgort is initial.        "#EC CI_XYZ
  delete pt_partcost where lgort is initial.                "#EC CI_XYZ

  loop at lt_partite_cost assigning <lw_cost_common>.
    clear: l_salkb, l_salke, l_salkb_delta, l_salke_delta.

    if <lw_cost_common>-sobkz = gc_spec_q or
        <lw_cost_common>-sobkz = gc_spec_e.

      loop at pt_partcost assigning <lw_cost_detail>
          where matnr = <lw_cost_common>-matnr
            and bwkey = <lw_cost_common>-bwkey
            and bwtar = <lw_cost_common>-bwtar
            and bwtty = <lw_cost_common>-bwtty
            and werks = <lw_cost_common>-werks
            and tblsb = <lw_cost_common>-tblsb
            and linkk = <lw_cost_common>-linkk.

        l_salkb = l_salkb + <lw_cost_detail>-salkb.
        l_salke = l_salke + <lw_cost_detail>-salke.

      endloop.
* salk* - value
* lbku* - quantity
    else.

      loop at pt_partcost assigning <lw_cost_detail>
          where matnr = <lw_cost_common>-matnr
            and bwkey = <lw_cost_common>-bwkey
            and bwtar = <lw_cost_common>-bwtar
            and bwtty = <lw_cost_common>-bwtty
            and werks = <lw_cost_common>-werks
            and tblsb = <lw_cost_common>-tblsb.

        l_salkb = l_salkb + <lw_cost_detail>-salkb.
        l_salke = l_salke + <lw_cost_detail>-salke.

      endloop.

    endif.

    if l_salkb <> <lw_cost_common>-salkb or
        l_salke <> <lw_cost_common>-salke.

      l_salkb_delta = <lw_cost_common>-salkb - l_salkb.
      l_salke_delta = <lw_cost_common>-salke - l_salke.

      clear: l_salkb_max, l_salke_max, l_recb, l_rece.

      if <lw_cost_common>-sobkz = gc_spec_q or
          <lw_cost_common>-sobkz = gc_spec_e.

        loop at pt_partcost assigning <lw_cost_detail>
            where matnr = <lw_cost_common>-matnr
              and bwkey = <lw_cost_common>-bwkey
              and bwtar = <lw_cost_common>-bwtar
              and bwtty = <lw_cost_common>-bwtty
              and werks = <lw_cost_common>-werks
              and tblsb = <lw_cost_common>-tblsb
              and linkk = <lw_cost_common>-linkk.

          if l_salkb <> <lw_cost_common>-salkb and
              l_salke = <lw_cost_common>-salke.

            if l_salkb_max < <lw_cost_detail>-salkb.
              l_salkb_max = <lw_cost_detail>-salkb.
              l_recb = sy-tabix.
            endif.

          elseif l_salkb = <lw_cost_common>-salkb and
              l_salke <> <lw_cost_common>-salke.

            if l_salke_max < <lw_cost_detail>-salke.
              l_salke_max = <lw_cost_detail>-salke.
              l_rece = sy-tabix.
            endif.

          else.

            if l_salke_max < <lw_cost_detail>-salke.
              l_salke_max = <lw_cost_detail>-salke.
              l_rece = sy-tabix.
            endif.

            if l_salkb_max < <lw_cost_detail>-salkb.
              l_salkb_max = <lw_cost_detail>-salkb.
              l_recb = sy-tabix.
            endif.

          endif.

        endloop.

      else.

        loop at pt_partcost assigning <lw_cost_detail>
            where matnr = <lw_cost_common>-matnr
              and bwkey = <lw_cost_common>-bwkey
              and bwtar = <lw_cost_common>-bwtar
              and bwtty = <lw_cost_common>-bwtty
              and werks = <lw_cost_common>-werks
              and tblsb = <lw_cost_common>-tblsb.

          if l_salkb <> <lw_cost_common>-salkb and
              l_salke = <lw_cost_common>-salke.

            if l_salkb_max < <lw_cost_detail>-salkb.
              l_salkb_max = <lw_cost_detail>-salkb.
              l_recb = sy-tabix.
            endif.

          elseif l_salkb = <lw_cost_common>-salkb and
              l_salke <> <lw_cost_common>-salke.

            if l_salke_max < <lw_cost_detail>-salke.
              l_salke_max = <lw_cost_detail>-salke.
              l_rece = sy-tabix.
            endif.

          else.

            if l_salke_max < <lw_cost_detail>-salke.
              l_salke_max = <lw_cost_detail>-salke.
              l_rece = sy-tabix.
            endif.

            if l_salkb_max < <lw_cost_detail>-salkb.
              l_salkb_max = <lw_cost_detail>-salkb.
              l_recb = sy-tabix.
            endif.

          endif.

        endloop.
      endif.

      if not l_recb is initial.
        read table pt_partcost
            assigning <lw_cost_detail>
            index l_recb.

        if sy-subrc is initial.
          <lw_cost_detail>-salkb =
               <lw_cost_detail>-salkb + l_salkb_delta.
        endif.

      endif.

      if not l_rece is initial.
        read table pt_partcost
            assigning <lw_cost_detail>
            index l_rece.

        if sy-subrc is initial.
          <lw_cost_detail>-salke =
               <lw_cost_detail>-salke + l_salke_delta.
        endif.

      endif.

    endif.
  endloop.



endform.                    " at_storage_cost_calculation
*&---------------------------------------------------------------------*
*&      Form  storage_cost_filling
*&---------------------------------------------------------------------*
form storage_cost_filling
    tables p_listmat type tt_listmat
           p_docmat  type tt_docmat
    using  pt_ind6_docmat type tt_ind6_docmat
           p_onlsp    type type_1c
           p_so_kunnr type tt_so_kunnr
           p_so_lifnr type tt_so_lifnr
    changing pt_partcost type tt_partcost.                  "#EC *

  data:
      l_rec        type sytabix,
      l_prcntcur   type i,                 " for scale
      l_prcntall   type i,                 " for scale
      l_prcntshw   type i,                 " for scale
      l_prcnttmp   type i,                 " for scale
*    l_textsc     TYPE type_text70,
* tables
      lt_field_link type tt_field_link,
      lt_in_table   type tt_so_link,
      lw_in_table   like line of lt_in_table.


  field-symbols:
      <lw_in_table>    like line of lt_in_table,
      <lw_field_link>  type type_field_link,
      <lw_listmat>     type type_listmat.

  describe table p_listmat lines l_prcntall.                   "1782012
  clear: l_prcntcur, l_prcnttmp.
  if l_prcntall is initial.
    exit.
  endif.

  sort p_docmat stable by xmatnr bwtar werk                    "1557283
    tblsb lgort charg sobkz linkk budat.

* calc cost unit and cost storage location stock
  loop at p_listmat assigning <lw_listmat>
      where not lgort is initial.
    add 1 to l_prcntcur.
    l_rec = sy-tabix.
    perform material_cost_calculation
        using
            <lw_listmat>-xmatnr <lw_listmat>-bwkey
            <lw_listmat>-bwtar  <lw_listmat>-bwtty
            <lw_listmat>-werk   <lw_listmat>-lgort
            <lw_listmat>-charg  <lw_listmat>-tblsb
            <lw_listmat>-sobkz  <lw_listmat>-linkk
            p_docmat[]                                         "1557283
            pt_ind6_docmat
        changing
            pt_partcost
            <lw_listmat>-begsum
            <lw_listmat>-endsum
            <lw_listmat>-begprice1.

*   recording a step 'Calculating cost of stock'               "1417445
    if g_bkgrd is initial.
      check gv_wan is initial.                                 "1417445
      perform run_scale
          using l_prcntall l_prcntcur text-020
          changing l_prcntshw l_prcnttmp.
    endif.
  endloop.

  if p_onlsp = gc_true.
    delete p_listmat
        where ( sobkz is initial or
             ( sobkz = gc_spec_w and not sortl in p_so_kunnr )
          or ( sobkz = gc_spec_v and not sortl in p_so_kunnr )
          or ( sobkz = gc_spec_o and not sortl in p_so_lifnr )
               ).

    lt_field_link[] = p_listmat[].
    describe table lt_field_link lines l_rec.
    if not l_rec is initial.
      assign lw_in_table to <lw_in_table>.

      clear <lw_in_table>-high.
      <lw_in_table>-sign = 'I'.
      <lw_in_table>-option = 'EQ'.

      loop at lt_field_link assigning <lw_field_link>.
        <lw_in_table>-low = <lw_field_link>.
        append <lw_in_table> to lt_in_table.
      endloop.

      delete p_docmat
          where not field_link in lt_in_table.

    endif.

  endif.


endform.                    " storage_cost_filling
*&---------------------------------------------------------------------*
*&      Form  material_cost_calculation
*&---------------------------------------------------------------------*
form material_cost_calculation
    using
        p_matnr type matnr
        p_bwkey type bwkey
        p_bwtar type bwtar_d
        p_bwtty type bwtty_d
        p_werks type werks_d
        p_lgort type lgort_d
        p_charg type charg_d
        p_tblsb type type_tblsb
        p_sobkz type sobkz
        p_linkk type j_3rmanylink
        ppt_ind1_docmat type tt_docmat                         "1557283
        ppt_ind6_docmat type tt_ind6_docmat
    changing
        ppt_partcost        type tt_partcost
        p_listmat_begsum    type j_3rfbsm
        p_listmat_endsum    type j_3rfesm
        p_listmat_begprice1 type j_3rfbpr1.

  field-symbols <fs_part_cost> type type_cost.

* definition current cost storage for every type valuation
  read table ppt_partcost assigning <fs_part_cost>
      with key
          matnr = p_matnr
          bwkey = p_bwkey
          bwtar = p_bwtar
          bwtty = p_bwtty
          werks = p_werks
          tblsb = p_tblsb
          linkk = p_linkk
          lgort = p_lgort
          charg = p_charg
          sobkz = p_sobkz
  binary search.

  if sy-subrc is initial.

* storage cost value =
*    ( all cost value * storage stock quantity )
*    / all stock quantity
    if not <fs_part_cost>-lbkue is initial.
      p_listmat_endsum
          = <fs_part_cost>-salke.
      add p_listmat_endsum to <fs_part_cost>-salkefact.
    else.
      p_listmat_endsum = 0.
    endif.

    if not <fs_part_cost>-lbkub is initial.
      p_listmat_begsum
              = <fs_part_cost>-salkb.
* price of unit on start of period.
      p_listmat_begprice1
          = <fs_part_cost>-salkb
              /  <fs_part_cost>-lbkub.
      add p_listmat_begsum to <fs_part_cost>-salkbfact.
    else.
      p_listmat_begsum = 0.
      p_listmat_begprice1 = 0.
    endif.
    if p_listmat_begprice1 is initial.
      perform first_moving_price_getting
          using
              p_matnr
              p_bwtar
              p_werks
              p_tblsb
              ppt_ind1_docmat
              ppt_ind6_docmat
          changing
              p_listmat_begprice1.
    endif.
  endif.


endform.                    " material_cost_calculation
*&---------------------------------------------------------------------*
*&      Form  first_moving_price_getting
*&---------------------------------------------------------------------*
form first_moving_price_getting
    using
        pp_matnr type matnr
        pp_bwtar type bwtar_d
        pp_werks type werks_d
        pp_tblsb type type_tblsb
        pppt_ind1_docmat type tt_docmat                        "1557283
        pppt_ind6_docmat type tt_ind6_docmat
    changing pp_begprice1 type j_3rfbpr1.

  field-symbols:                                               "1259372
    <fs_ind1_docmat> like docmat.                              "1259372
  data:
    lv_index         like sy-tabix.                            "1557283 start

  read table pppt_ind1_docmat with key xmatnr = pp_matnr
    bwtar = pp_bwtar werk = pp_werks
    binary search transporting no fields.
  lv_index = sy-tabix.
  loop at pppt_ind1_docmat assigning <fs_ind1_docmat>          "1259372
      from lv_index                                            "1557283 end
      where xmatnr = pp_matnr
        and bwtar  = pp_bwtar
        and werk   = pp_werks.

    check <fs_ind1_docmat>-tblsb = pp_tblsb.
    check <fs_ind1_docmat>-budat in so_budat.
    check not <fs_ind1_docmat>-xmensh_in is initial.

* 0020079747 0001165366 2005 customer message \
    check <fs_ind1_docmat>-smbln is initial.

    read table pppt_ind6_docmat transporting no fields
        with key sjahr = <fs_ind1_docmat>-sjhnr
                 smbln = <fs_ind1_docmat>-sblnr
                 smblp = <fs_ind1_docmat>-szile
        binary search.
    check not sy-subrc is initial.
* 0020079747 0001165366 2005 customer message /

    pp_begprice1 = <fs_ind1_docmat>-xdmshb_in / <fs_ind1_docmat>-xmensh_in.

    exit.

  endloop.

endform.                    " first_moving_price_getting
*&---------------------------------------------------------------------*
*&      Form  cost_amount_adjustment
*&---------------------------------------------------------------------*
form cost_amount_adjustment
    tables p_listmat type tt_listmat
           p_docmat  type tt_docmat
    changing pt_partcost type tt_partcost.

  data:
      l_prcntcur    type i,                 " for scale
      l_prcntall    type i,                 " for scale
      l_prcntshw    type i,                 " for scale
      l_prcnttmp    type i,                 " for scale
*    l_textsc      TYPE type_text70,
      l_mzeile      type mblpo,
      l_belnr       type belnr_d,
      l_dmbtr       type j_3rfinsum,
      l_dmbtr1      type j_3rfinsum,
      l_bd_minus    type j_3rfinsum,
      l_bd_plus     type j_3rfinsum,
      l_deltad      type j_3rfbsm,
      l_deltak      type j_3rfbsm,
      l_date_in     type d,
      l_date_out    type d,
      l_rec_in      type sytabix,
      l_rec_out     type sytabix,
      l_rec1        type sytabix,
* tables
      lt_ind1_listmat type tt_ind1_listmat,
      lt_ind2_listmat type tt_ind2_listmat,
      lt_ind1_docmat  type tt_ind1_docmat,
* headers
      lw_ind1_listmat type type_listmat.

  field-symbols:
      <fs_part_cost> type type_cost,
      <fs_docmat>    like docmat,
      <fs_listmat>   type type_listmat,
      <fs_listmat2>  type type_listmat
  .

  l_bd_plus = 1 / 100.
  l_bd_minus = l_bd_plus * -1.
* fill index table
  lt_ind2_listmat[] = p_listmat[].
* test and correction balance cost storage location stock start date
  describe table pt_partcost lines l_prcntall.
  if l_prcntall is initial.
    exit.
  endif.

  loop at pt_partcost assigning <fs_part_cost>.
    add 1 to l_prcntcur.
*    l_rec = sy-tabix.

    check <fs_part_cost>-salkbfact ne <fs_part_cost>-salkb.
* change balance in storage start date
    clear: l_dmbtr, l_dmbtr1, l_rec1.
* change balance in max quantity/cost
    loop at lt_ind2_listmat assigning <fs_listmat2>
        where   xmatnr = <fs_part_cost>-matnr
            and bwkey  = <fs_part_cost>-bwkey
            and bwtar  = <fs_part_cost>-bwtar
            and bwtty  = <fs_part_cost>-bwtty
            and werk   = <fs_part_cost>-werks
            and tblsb  = <fs_part_cost>-tblsb.
      check <fs_listmat2>-begsum > l_dmbtr.
* number record for next correction balance
* in this record amount will be max
      l_rec1 = sy-tabix.
* amount which will be change
      l_dmbtr  = <fs_listmat2>-begsum.
    endloop.
    if not l_rec1 is initial.
* balance different
      l_dmbtr1 = <fs_part_cost>-salkbfact - <fs_part_cost>-salkb.
      <fs_listmat2>-begsum = <fs_listmat2>-begsum - l_dmbtr1.
      <fs_part_cost>-salkbfact = <fs_part_cost>-salkbfact - l_dmbtr1.
    endif.
*   recording a step 'Rounding at period beginning'            "1417445
    if g_bkgrd is initial.
      check gv_wan is initial.                                 "1417445
      perform run_scale
          using l_prcntall l_prcntcur text-021
          changing l_prcntshw l_prcnttmp.
    endif.
  endloop.

  p_listmat[] = lt_ind2_listmat[].
  refresh lt_ind2_listmat.
  delete p_docmat where not later is initial.

* fill index table
  lt_ind1_docmat[] = p_docmat[].
  describe table p_listmat lines l_prcntall.
  clear: l_prcntcur, l_prcnttmp.
* change amount in document and account balances

  loop at p_listmat assigning <fs_listmat>.
    add 1 to l_prcntcur.
    l_rec1 = sy-tabix.
    clear: l_dmbtr, l_dmbtr1,
        l_rec_in, l_rec_out,
        l_date_in, l_date_out,
        l_deltad, l_deltak. ", l_rec, l_debkre.
* look-for document with max amount for change
    loop at lt_ind1_docmat assigning <fs_docmat>
        where  xmatnr = <fs_listmat>-xmatnr
            and bwtar = <fs_listmat>-bwtar
            and werk  = <fs_listmat>-werk
            and tblsb = <fs_listmat>-tblsb
            and lgort = <fs_listmat>-lgort
            and charg = <fs_listmat>-charg
            and sobkz = <fs_listmat>-sobkz
            and linkk = <fs_listmat>-linkk.
* debits account balances
      add <fs_docmat>-xdmshb_in  to l_deltad.
* credits account balances
      add <fs_docmat>-xdmshb_out to l_deltak.
* look-for change documents without account assignment
      check <fs_docmat>-xbelnr is initial or
          <fs_docmat>-xbelnr = gc_doc_phantom.
      if not <fs_docmat>-xmensh_in is initial.
        if ( l_date_in is initial
            or l_date_in < <fs_docmat>-budat )
            and <fs_docmat>-incld  is initial.
          l_date_in = <fs_docmat>-budat.
          l_rec_in = sy-tabix.
        endif.
      elseif not <fs_docmat>-xmensh_out is initial.
        if ( l_date_out is initial
            or l_date_out < <fs_docmat>-budat )
            and <fs_docmat>-incld  is initial.
          l_date_out = <fs_docmat>-budat.
          l_rec_out = sy-tabix.
        endif.
      endif.
    endloop.
* difference amount in storage
    l_dmbtr1 = <fs_listmat>-begsum + l_deltad
        + l_deltak - <fs_listmat>-endsum.
* if difference ne 0 will be change
    if not l_dmbtr1 is initial
        and ( l_dmbtr1 between l_bd_minus and l_bd_plus ).
      if l_dmbtr1 > 0 and not l_rec_in is initial.
* look-for record change
        read table lt_ind1_docmat
            assigning <fs_docmat>
            index l_rec_in.
        if sy-subrc is initial.

          if not <fs_docmat>-xdmshb_in is initial.
            add l_dmbtr1 to <fs_docmat>-xdmshb_in.
          else.
            subtract
                l_dmbtr1 from <fs_docmat>-xdmshb_out.
          endif.

          l_belnr  = <fs_docmat>-belegnr.
          l_mzeile = <fs_docmat>-mzeile.
          <fs_docmat>-incld = gc_true.

          perform second_part_doc_comlete
              using <fs_listmat>-xmatnr
                    <fs_listmat>-bwtar
                    <fs_listmat>-werk
                    <fs_listmat>-tblsb
                    <fs_docmat>-lgort
                    l_belnr
                    l_mzeile
                    l_dmbtr1
              changing lt_ind1_docmat[].
        endif.
      elseif l_dmbtr1 > 0 and not l_rec_out is initial.
* look-for record change
        read table lt_ind1_docmat
            assigning <fs_docmat>
            index l_rec_out.
        if sy-subrc is initial.

          if not <fs_docmat>-xdmshb_out is initial.
            subtract
                l_dmbtr1 from <fs_docmat>-xdmshb_out.
          else.
            add l_dmbtr1 to <fs_docmat>-xdmshb_in.
          endif.

          l_belnr  = <fs_docmat>-belegnr.
          l_mzeile = <fs_docmat>-mzeile.
          <fs_docmat>-incld = gc_true.

          perform second_part_doc_comlete
              using <fs_listmat>-xmatnr
                    <fs_listmat>-bwtar
                    <fs_listmat>-werk
                    <fs_listmat>-tblsb
                    <fs_docmat>-lgort
                    l_belnr
                    l_mzeile
                    l_dmbtr1
              changing lt_ind1_docmat[].
        endif.
      elseif l_dmbtr1 < 0 and not l_rec_out is initial.
* look-for record change
        read table lt_ind1_docmat
            assigning <fs_docmat>
            index l_rec_out.
        if sy-subrc is initial.

          if not <fs_docmat>-xdmshb_out is initial.
            if <fs_docmat>-xdmshb_out > l_dmbtr1.
              continue.
            endif.
            <fs_docmat>-xdmshb_out
                = <fs_docmat>-xdmshb_out + l_dmbtr1 * -1 .
          else.
            <fs_docmat>-xdmshb_in =
                <fs_docmat>-xdmshb_in + l_dmbtr1 * -1.
          endif.

          l_belnr  = <fs_docmat>-belegnr.
          l_mzeile = <fs_docmat>-mzeile.
          <fs_docmat>-incld = gc_true.

          perform second_part_doc_comlete
              using <fs_listmat>-xmatnr
                    <fs_listmat>-bwtar
                    <fs_listmat>-werk
                    <fs_listmat>-tblsb
                    <fs_docmat>-lgort
                    l_belnr
                    l_mzeile
                    l_dmbtr1
              changing lt_ind1_docmat[].
        endif.
      elseif l_dmbtr1 < 0 and not l_rec_in is initial.
* look-for record change
        read table lt_ind1_docmat
            assigning <fs_docmat>
            index l_rec_in.
        if sy-subrc is initial.

          if not <fs_docmat>-xdmshb_in is initial.
            <fs_docmat>-xdmshb_in
                = <fs_docmat>-xdmshb_in + l_dmbtr1 * -1.
          else.
            <fs_docmat>-xdmshb_out
                = <fs_docmat>-xdmshb_out + l_dmbtr1 * -1.
          endif.
          l_belnr  = <fs_docmat>-belegnr.
          l_mzeile = <fs_docmat>-mzeile.
          <fs_docmat>-incld = gc_true.

          perform second_part_doc_comlete
              using <fs_listmat>-xmatnr
                    <fs_listmat>-bwtar
                    <fs_listmat>-werk
                    <fs_listmat>-tblsb
                    <fs_docmat>-lgort
                    l_belnr
                    l_mzeile
                    l_dmbtr1
              changing lt_ind1_docmat[].
        endif.
      endif.
    endif.
*   recording a step 'Rounding balances in mat. documents'     "1417445
    if g_bkgrd is initial.
      check gv_wan is initial.                                 "1417445
      perform run_scale
          using l_prcntall l_prcntcur text-022
          changing l_prcntshw l_prcnttmp.
    endif.
  endloop.

  p_docmat[] = lt_ind1_docmat[].
  refresh lt_ind1_docmat.
* balance at varehouse check and add/subtruct a kopeck
* on end of the period if it's necessary
*
  describe table pt_partcost lines l_prcntall.
  clear: l_prcntcur, l_prcnttmp.
* optimization with index table
  lt_ind1_listmat[] = p_listmat[].

  loop at pt_partcost assigning <fs_part_cost>.
    add 1 to l_prcntcur.
*    l_rec = sy-tabix.
* if varehouse balance sum is equal valuation sum in this case don't
* correct
    check <fs_part_cost>-salkefact ne <fs_part_cost>-salke.
* varehouse balance end of the period correction
    clear: l_dmbtr, l_rec1.
    loop at lt_ind1_listmat into lw_ind1_listmat
        where xmatnr = <fs_part_cost>-matnr
          and bwkey  = <fs_part_cost>-bwkey
          and bwtar  = <fs_part_cost>-bwtar
          and bwtty  = <fs_part_cost>-bwtty
          and werk   = <fs_part_cost>-werks
          and tblsb  = <fs_part_cost>-tblsb.

      check lw_ind1_listmat-endsum > l_dmbtr.
      l_rec1 = sy-tabix.
      l_dmbtr  = lw_ind1_listmat-endsum.
    endloop.
    if not l_rec1 is initial.
      read table lt_ind1_listmat
          into lw_ind1_listmat index l_rec1.
      if sy-subrc is initial.
        lw_ind1_listmat-endsum = lw_ind1_listmat-endsum
            - ( <fs_part_cost>-salkefact
            - <fs_part_cost>-salke ) .
        modify lt_ind1_listmat from lw_ind1_listmat
            index l_rec1.
      endif.
    endif.
*   recording a step 'Rounding at period ending'               "1417445
    if g_bkgrd is initial.
      check gv_wan is initial.                                 "1417445
      perform run_scale
          using l_prcntall l_prcntcur text-023
          changing l_prcntshw l_prcnttmp.
    endif.
  endloop.

endform.                    " cost_amount_adjustment
*&---------------------------------------------------------------------*
*&      Form  second_part_doc_comlete
*&---------------------------------------------------------------------*
form second_part_doc_comlete
    using p_matnr type matnr
          p_bwtar type bwtar_d
          p_werks type werks_d
          p_tblsb type type_tblsb
          p_docm_lgort type lgort_d
          p_belnr type mblnr
          p_zeile type mblpo
          p_dmbtr type j_3rfinsum
    changing p_ind1_docmat type tt_ind1_docmat.

  data: l_rec type sytabix.

  field-symbols: <fs_doc>    like docmat.

  clear l_rec.
* document second part correction.
  loop at p_ind1_docmat assigning <fs_doc>
      where xmatnr  = p_matnr
        and bwtar   = p_bwtar
        and werk    = p_werks
        and tblsb   = p_tblsb
        and belegnr = p_belnr
        and mzeile  = p_zeile
        and lgort   ne p_docm_lgort
        and incld   ne gc_true.
    l_rec = sy-tabix.
    exit.
  endloop.

  if l_rec is initial.
    loop at p_ind1_docmat assigning <fs_doc>
        where xmatnr  = p_matnr
          and bwtar   = p_bwtar
          and werk    = p_werks
          and tblsb   = p_tblsb
          and belegnr = p_belnr
          and mzeile  ne p_zeile
          and incld   ne gc_true.
      l_rec = sy-tabix.
      exit.
    endloop.
  endif.
* document correction
  if not l_rec is initial.
    read table p_ind1_docmat
        assigning <fs_doc>
        index l_rec.
    if not <fs_doc>-xmensh_in is initial.
      if not <fs_doc>-xdmshb_in is initial.
        if p_dmbtr > 0.
          <fs_doc>-xdmshb_in
              = <fs_doc>-xdmshb_in + p_dmbtr.
        else.
          <fs_doc>-xdmshb_in
              = <fs_doc>-xdmshb_in + p_dmbtr.
        endif.
*        ELSE.
*            IF p_dmbtr > 0.
*                sy-subrc = sy-subrc.
*            ELSE.
*                sy-subrc = sy-subrc.
*            ENDIF.
      endif.
    elseif not <fs_doc>-xmensh_out is initial.
      if not <fs_doc>-xdmshb_out is initial.
        if p_dmbtr > 0.
*                sy-subrc = sy-subrc.
        else.
          <fs_doc>-xdmshb_out
              = <fs_doc>-xdmshb_out + p_dmbtr.
        endif.
*        ELSE.
*            IF p_dmbtr > 0.
*                sy-subrc = sy-subrc.
*            ELSE.
*                sy-subrc = sy-subrc.
*            ENDIF.
      endif.
    endif.

    <fs_doc>-incld = gc_true.
  endif.


endform.                    " second_part_doc_comlete
*&---------------------------------------------------------------------*
*&      Form  turnovers_calculation
*&---------------------------------------------------------------------*
form turnovers_calculation
    tables p_listmat type tt_listmat
           p_docmat type tt_docmat.                         "#EC *

  data:
      l_prcntcur   type i,                 " for scale
      l_prcntall   type i,                 " for scale
      l_prcntshw   type i,                 " for scale
      l_prcnttmp   type i,                 " for scale
      l_dmbtr  type j_3rfinsum,
      l_deltad type j_3rfbsm,
      l_deltak type j_3rfbsm,
* tables
      lt_ind5_docmat type tt_ind5_docmat.

  field-symbols:
      <fs_listmat>   like listmat,
      <fs_ind5_docmat> type type_docmat.                       "1259372

  describe table p_listmat lines l_prcntall.
  if l_prcntall is initial.
    exit.
  endif.
  clear: l_prcntcur, l_prcnttmp.
  lt_ind5_docmat[] = p_docmat[].

  loop at p_listmat assigning <fs_listmat>.
    add 1 to l_prcntcur.
    clear: l_dmbtr, l_deltad, l_deltak.
    loop at lt_ind5_docmat assigning <fs_ind5_docmat>          "1259372
        where  field_link = <fs_listmat>-field_link.
* debt turnover
      add <fs_ind5_docmat>-xdmshb_in  to l_deltad.
* credit turnover
      add <fs_ind5_docmat>-xdmshb_out to l_deltak.
    endloop.
    <fs_listmat>-deltsalkd = l_deltad.
    l_dmbtr = abs( l_deltak ).
    <fs_listmat>-deltsalkk = l_dmbtr.
*   recording a step 'Rounding balances in mat. documents 2'   "1417445
    if g_bkgrd is initial.
      check gv_wan is initial.                                 "1417445
      perform run_scale
          using l_prcntall l_prcntcur text-024
          changing l_prcntshw l_prcnttmp.
    endif.
  endloop.

endform.                    " turnovers_calculation
*&---------------------------------------------------------------------*
*&      Form  amount_redistribution
*&---------------------------------------------------------------------*
form amount_redistribution
    tables p_listmat type tt_listmat
           p_docmat  type tt_docmat                         "#EC *
           p_budat   type tt_so_budat
    using p_pa_adcst type j_3rmoptved5.                     "#EC *

  data:
*    l_prcntcur   TYPE i,                 " for scale
      l_prcntall   type i,                 " for scale
*    l_prcntshw   TYPE i,                 " for scale
*    l_prcnttmp   TYPE i,                 " for scale
      l_notrights(1) type c,
      l_ktid            type j_3rmktnrtype, " Type assigment
      l_ktnr            type j_3rmvkntr, " Assignent
      l_item            type j_3rmitems, " Assignent Item
      l_dmbtr           type j_3rfinsum,
      l_xbnrfill(1)     type c,
      l_typedoc(1)      type c,
      l_incld           type type_1c,
* tables
      lt_partners_sale  type tt_partners_sale,
      lt_routers        type tt_routers,
      lt_routers1       type tt_routers1,
      lt_partners_pay1  type tt_partners_pay1,
      lt_partners_pay2  type tt_partners_pay2,
      lt_werks_from     type tt_werks_from,
* headers
      lw_mseg_mkpf      type type_mseg_mkpf,
      lw_bsim_bkpf      type type_bsim_bkpf
      .

  field-symbols:
      <fs_listmat>   like listmat.
  describe table p_listmat lines l_prcntall.
  if l_prcntall is initial.
    exit.
  endif.
  l_ktid = text-205.
  l_ktnr = text-212.
  l_typedoc = gc_item_typ_s.
  lw_mseg_mkpf-budat = p_budat-high.
  lw_bsim_bkpf-belnr = gc_doc_phantom.
* adding line with moving average price change

  loop at p_listmat assigning <fs_listmat>.
    l_dmbtr = <fs_listmat>-endsum
        + <fs_listmat>-deltsalkk
        - <fs_listmat>-deltsalkd
        - <fs_listmat>-begsum.
    if not l_dmbtr is initial.
* write a document in ingternal table for ALV
      lw_mseg_mkpf-werks = <fs_listmat>-werk.
      lw_mseg_mkpf-lgort = <fs_listmat>-lgort.
      lw_mseg_mkpf-bwtar = <fs_listmat>-bwtar.
      lw_mseg_mkpf-sobkz = <fs_listmat>-sobkz.
      lw_mseg_mkpf-waers = <fs_listmat>-waers.
      lw_mseg_mkpf-ps_psp_pnr = <fs_listmat>-pspnr.
      lw_mseg_mkpf-kdauf      = <fs_listmat>-vbeln.
      lw_mseg_mkpf-kdpos      = <fs_listmat>-posnr.


      perform mat_doc_insert
            tables p_docmat
            using p_budat-high p_budat-low
                lt_partners_sale
                lt_routers
                lt_routers1
                lt_partners_pay1
                lt_partners_pay2
                lt_werks_from
                lw_mseg_mkpf
                lw_bsim_bkpf
                <fs_listmat>
                0
                l_dmbtr
                0
                l_ktid
                l_ktnr
                l_item
                l_typedoc
                l_xbnrfill
                p_pa_adcst
                l_notrights
                l_incld.

      if p_pa_adcst is initial.
        <fs_listmat>-deltsalkd = <fs_listmat>-deltsalkd + l_dmbtr.
      else.
        <fs_listmat>-ychangprice = l_dmbtr.
      endif.
    endif.
  endloop.



endform.                    " amount_redistribution
