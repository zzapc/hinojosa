
class ZCL_UTILS_INTERFACES definition
  public
  inheriting from ZCL_UTILS
  final
  create public .

public section.

  methods CONSTRUCTOR .
  methods GET_CALIDAD_NAV
    importing
      !I_MATNR_NAV type ZMATNR_EXTERNAL
    returning
      value(E_CALIDAD) type CHAR24
    exceptions
      NO_VALUE
      NO_Q_VALUE .
  methods GET_PAPERID_NAV
    importing
      !I_MATNR_NAV type ZMATNR_EXTERNAL
    returning
      value(E_PAPERID_NAV) type CHAR24
    exceptions
      NO_VALUE
      NO_PAPERID .
  methods MAP_MATNR_NAV_2_SAP
    importing
      !I_MATNR_NAV type CHAR24
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
    returning
      value(E_MATNR_SAP) type ZTT_MATNR
    exceptions
      INTERNAL_ERROR
      NO_POSSIBLE_DECODE
      ERROR_NAV_MATNR_TYPE
      ERROR_MAP_QUALITY_SAP_VALUE .
  methods MAP_MATNR_SAP_2_NAV
    importing
      !I_MATNR type MATNR
      !I_WERKS type WERKS_D
      !I_LGORT type LGORT_D
      !I_OMP_FORMAT type BOOLEAN
    returning
      value(E_T_MATNR_NAV) type ZTT_ZMATNR_EXTERNAL
    exceptions
      NO_VALUE
      INTERNAL_ERROR
      NO_VALID_VALUE .
  methods GET_ANCHO_NAV
    importing
      !I_MATNR_NAV type ZMATNR_EXTERNAL
    returning
      value(E_ANCHO) type ZANCHO
    exceptions
      NO_VALUE
      NO_Q_VALUE .
protected section.
private section.

  methods _GET_NAV_2_OMP_FORMAT
    importing
      !I_MATNR_NAV type ZMATNR_EXTERNAL
    returning
      value(R_MATNR_OMP_FORMAT) type ZMATNR_EXTERNAL .
  methods _GET_OMP_2_NAV_FORMAT
    importing
      value(I_MATNR_OMP) type ZMATNR_EXTERNAL
    returning
      value(R_MATNR_NAV) type ZMATNR_EXTERNAL .
  methods _DECODE_MATNR_NAV
    importing
      !I_MATNR_NAV type CHAR24
    exporting
      !E_NAV_TIPO type CHAR2
      !E_NAV_PAPERID type CHAR24
      !E_NAV_ANCHO type ZANCHO
    exceptions
      NO_MATNR_NAV
      NO_POSSIBLE_DECODE .
  methods _DECODE_MATNR_SAP
    importing
      !I_MATNR type MATNR
    exporting
      !E_MTART type MTART
      !E_MATKL type MATKL
      !E_GRAMA type ZGRAMAJE
      !E_ANCHO type ZANCHO
      !E_LARGO type ZLARGO
      !E_IMPRESION type NUMC_5
    exceptions
      NO_VALUE .
  methods _GET_EXTERNAL_FROM_MLGN_MATNR
    importing
      !I_MATNR type MATNR
      !I_LGNUM type LGNUM
    returning
      value(E_T_MATNR_EXTERNAL) type ZTT_ZMATNR_EXTERNAL .
  methods _GET_MATNR_FROM_MLGN_EXTERNAL
    importing
      !I_MATNR_EXTERNAL type ZMATNR_EXTERNAL
      !I_LGNUM type LGNUM
    returning
      value(E_T_MATNR) type ZTT_MATNR .
endclass. "ZCL_UTILS_INTERFACES definition
class ZCL_UTILS_INTERFACES implementation.
  METHOD _decode_matnr_nav.

    DATA: lt_str_values   TYPE TABLE OF string,
          ls_str_value    TYPE string,
          lv_str_lines    TYPE i,
          lv_value_idx    TYPE i,
          lv_nav_matnr    TYPE char24,
          lv_nav_matnr_p1 TYPE char24,
          lv_nav_type     TYPE char2,
          lv_nav_paperid  TYPE char24,
          lv_nav_ancho    TYPE char4.

    "Realizamos chequeos iniciales
    IF ( i_matnr_nav IS INITIAL ).
      RAISE no_matnr_nav.
    ENDIF.
    IF ( i_matnr_nav(1) NE '-' OR ( i_matnr_nav+1(1) NE 'A' AND i_matnr_nav+1(1) NE 'P' ) ).
      RAISE no_possible_decode.
    ENDIF.

    "movemos el valor del material NAV a vble interna para trabajar sobre ella.
    MOVE i_matnr_nav TO lv_nav_matnr.

    "Eliminamos espacios
    CONDENSE lv_nav_matnr NO-GAPS.

    "Extraigo el tipo
    lv_nav_type = lv_nav_matnr(2).
    "Extraigo el código sin el tipo
    lv_nav_matnr_p1 = lv_nav_matnr+2(22).

    CASE lv_nav_type.
      WHEN '-P'.

        "Sustituyo '-' por '/'.
        REPLACE ALL OCCURRENCES OF '-' IN lv_nav_matnr_p1 WITH '/'.

        "Descomponemos el material
        SPLIT lv_nav_matnr_p1 AT '/' INTO TABLE lt_str_values.

        lv_str_lines = lines( lt_str_values ).

        CLEAR lv_value_idx.

        "Evaluamos en función de las líneas obtenidas
        DO lv_str_lines TIMES.

          lv_value_idx = lv_value_idx + 1.

          IF ( lv_value_idx EQ lv_str_lines ).

            CLEAR ls_str_value.
            READ TABLE lt_str_values INDEX lv_value_idx INTO ls_str_value.
            CONDENSE ls_str_value NO-GAPS.
            CHECK ls_str_value IS NOT INITIAL.

            "Chequeo ancho
            IF (  me->check_if_string_is_numeric( i_value = ls_str_value ) = abap_true ).
              MOVE ls_str_value TO lv_nav_ancho.
              CONDENSE lv_nav_ancho NO-GAPS.

              "Obtengo con ceros delante
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input         = lv_nav_ancho
                IMPORTING
                  output        = lv_nav_ancho.

            ENDIF.

          ELSE.

            "Paper ID NAV
            CLEAR ls_str_value.
            READ TABLE lt_str_values INDEX lv_value_idx INTO ls_str_value.
            CONDENSE ls_str_value NO-GAPS.
            CHECK ls_str_value IS NOT INITIAL.
            IF ( lv_nav_paperid IS INITIAL ).
              lv_nav_paperid = ls_str_value.
            ELSE.
              CONCATENATE lv_nav_paperid '-' ls_str_value INTO lv_nav_paperid.
            ENDIF.

          ENDIF.

        ENDDO.

      WHEN '-A'.

        lv_nav_type    = lv_nav_type.
        lv_nav_paperid = lv_nav_matnr_p1.

    ENDCASE.

    "Si tenemos valores descompuestos, devolvemos resultado
    IF ( lv_nav_type IS NOT INITIAL AND lv_nav_paperid IS NOT INITIAL ).

      IF ( lv_nav_type = '-P' ).

        IF ( lv_nav_ancho IS NOT INITIAL OR lv_nav_ancho NE 0 ).

          MOVE lv_nav_type TO e_nav_tipo.
          MOVE lv_nav_paperid TO e_nav_paperid.
          MOVE lv_nav_ancho TO e_nav_ancho.

        ELSE.

          RAISE no_possible_decode.

        ENDIF.

      ELSEIF ( lv_nav_type = '-A' ).

        MOVE lv_nav_type TO e_nav_tipo.
        MOVE lv_nav_paperid TO e_nav_paperid.

      ENDIF.

    ELSE.

      RAISE no_possible_decode.

    ENDIF.

  ENDMETHOD.
METHOD _decode_matnr_sap.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_matnr_str  TYPE char18,
        lv_mtart      TYPE mtart,
        lv_matkl      TYPE matkl,
        lv_gramaje    TYPE zgramaje,
        lv_ancho      TYPE zancho,
        lv_largo      TYPE zlargo.

**********************************************************************
* Validaciones
**********************************************************************

** Material existe

  SELECT SINGLE mtart matkl zzgramaje zzancho zzlargo
    FROM mara
    INTO (lv_mtart, lv_matkl, lv_gramaje, lv_ancho, lv_largo)
   WHERE matnr EQ i_matnr.

  IF ( sy-subrc NE 0 ).
    RAISE no_value.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

** MTART

  e_mtart = lv_mtart.

** MATKL

  e_matkl = lv_matkl.

** ZGRAMAJE

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input         = lv_gramaje
    importing
      output        = e_grama.

** ZANCHO

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input         = lv_ancho
    importing
      output        = e_ancho.

** ZLARGO

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input         = lv_largo
    importing
      output        = e_largo.

** IMPRESION

  IF ( lv_mtart EQ 'ZPIM' OR lv_mtart EQ 'ZPIH' ).

    MOVE i_matnr+1(5) TO e_impresion.

  ENDIF.

ENDMETHOD.
METHOD _get_external_from_mlgn_matnr.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_external TYPE zmatnr_external.

**********************************************************************
* Lógica
**********************************************************************

** MATNR externo

  SELECT zzmatnr_external
    FROM mlgn
    INTO lv_external
   WHERE lgnum EQ i_lgnum
     AND matnr EQ i_matnr.

    IF ( lv_external IS NOT INITIAL ).
      APPEND lv_external TO e_t_matnr_external.
    ENDIF.

  ENDSELECT.

ENDMETHOD.
METHOD _get_matnr_from_mlgn_external.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_matnr TYPE matnr.

**********************************************************************
* Lógica
**********************************************************************

  SELECT matnr
    FROM mlgn
    INTO lv_matnr
   WHERE lgnum EQ i_lgnum
     AND zzmatnr_external EQ i_matnr_external.

    APPEND lv_matnr TO e_t_matnr.

  ENDSELECT.

ENDMETHOD.
METHOD _GET_NAV_2_OMP_FORMAT.

**********************************************************************
* Parámetros locales
**********************************************************************

  TYPES: BEGIN OF ty_splitdata,
    string TYPE char24,
  END OF ty_splitdata.

  CONSTANTS: lc_slash(1)  TYPE c VALUE '/',
             lc_hyphen(1) TYPE c VALUE '-'.

  DATA: lt_splitdata TYPE TABLE OF ty_splitdata.

  DATA: ls_splitdata TYPE ty_splitdata.

  DATA: lv_matnr_str      TYPE char24,
        lv_matnr_str_end  TYPE char24,
        lv_ancho(4) TYPE c.

**********************************************************************
* Validaciones
**********************************************************************

  CHECK i_matnr_nav IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

  MOVE i_matnr_nav TO lv_matnr_str.

  SPLIT lv_matnr_str AT lc_hyphen INTO TABLE lt_splitdata.

  LOOP AT lt_splitdata INTO ls_splitdata.

    "Primera línea viene vacía siempre pq todos los códigos NAV empiezan por guión
    IF ( sy-tabix EQ 1 ).

      IF ( ls_splitdata-string IS INITIAL ).
        CONCATENATE lc_hyphen ls_splitdata-string INTO ls_splitdata-string.
      ENDIF.

    ENDIF.

    "Último registro miramos si es numérico.
    IF ( sy-tabix EQ lines( lt_splitdata ) ).

      "Compongo el ancho
      IF ( ls_splitdata-string CO ' .1234567890' ).

*        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*          EXPORTING
*            input         = ls_splitdata-string
*          IMPORTING
*            OUTPUT        = ls_splitdata-string(4).

        SHIFT ls_splitdata-string LEFT DELETING LEADING '0'.
        CONCATENATE lc_slash ls_splitdata-string INTO ls_splitdata-string.

      ENDIF.

    ENDIF.

    CONCATENATE lv_matnr_str_end ls_splitdata-string INTO lv_matnr_str_end.

  ENDLOOP.

  MOVE lv_matnr_str_end TO r_matnr_omp_format.

ENDMETHOD.
METHOD _GET_OMP_2_NAV_FORMAT.

**********************************************************************
* Parámetros locales
**********************************************************************

  TYPES: BEGIN OF ty_splitdata,
    string TYPE char24,
  END OF ty_splitdata.

  CONSTANTS: lc_slash(1)  TYPE c VALUE '/',
             lc_hyphen(1) TYPE c VALUE '-'.

  DATA: lt_splitdata TYPE TABLE OF ty_splitdata.

  DATA: ls_splitdata TYPE ty_splitdata.

  DATA: lv_matnr_str      TYPE char24,
        lv_matnr_str_end  TYPE char24.

**********************************************************************
* Validaciones
**********************************************************************

  CHECK i_matnr_omp IS NOT INITIAL.

**********************************************************************
* Lógica
**********************************************************************

  MOVE i_matnr_omp TO lv_matnr_str.

  SPLIT lv_matnr_str AT lc_slash INTO TABLE lt_splitdata.

  IF ( lines( lt_splitdata ) LE 1 ).
    SPLIT lv_matnr_str AT lc_hyphen INTO TABLE lt_splitdata.
  ENDIF.

  LOOP AT lt_splitdata INTO ls_splitdata.

    "Último registro miramos si es numérico.
    IF ( sy-tabix EQ lines( lt_splitdata ) ).

      "Compongo el ancho
      IF ( ls_splitdata-string CO ' .1234567890' ).

        CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
          EXPORTING
            input         = ls_splitdata-string
          IMPORTING
            OUTPUT        = ls_splitdata-string(4).

        CONCATENATE lc_hyphen ls_splitdata-string INTO ls_splitdata-string.

      ENDIF.

    ELSE.

      IF ( ls_splitdata-string IS INITIAL ).
        CONCATENATE lc_hyphen ls_splitdata-string INTO ls_splitdata-string.
      ENDIF.

    ENDIF.

    CONCATENATE lv_matnr_str_end ls_splitdata-string INTO lv_matnr_str_end.

  ENDLOOP.

  MOVE lv_matnr_str_end TO r_matnr_nav.

ENDMETHOD.
METHOD constructor.

**********************************************************************
* Clase superior
**********************************************************************

  super->constructor( ).

**********************************************************************
* Valores de la clase
**********************************************************************

**  Label

  me->zif_msg_utils~_c_cl_msgid_label = 'ZCL_UTILS_ITFS'.

ENDMETHOD.
METHOD GET_ANCHO_NAV.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_matnr_nav_type TYPE CHAR2,
        lv_matnr_nav_ppid TYPE CHAR24,
        lv_matnr_nav_anch TYPE zancho.

**********************************************************************
* Validaciones
**********************************************************************

  IF ( i_matnr_nav IS INITIAL ).
    RAISE no_value.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

** Decodificamos material NAV

  me->_decode_matnr_nav(
    EXPORTING
      i_matnr_nav        = i_matnr_nav    " Material NAVISION
    IMPORTING
      e_nav_tipo         = lv_matnr_nav_type    " -P=papel; -A=hojas; space=nada
      e_nav_paperid      = lv_matnr_nav_ppid    " PaperId NAVISION
      e_nav_ancho        = lv_matnr_nav_anch    " Ancho
    EXCEPTIONS
      no_matnr_nav       = 1
      no_possible_decode = 2
      others             = 3
  ).
  IF sy-subrc <> 0.
    RAISE no_q_value.
  ENDIF.

** Obtenemos ancho NAV

  IF ( lv_matnr_nav_anch IS NOT INITIAL ).
    MOVE lv_matnr_nav_anch TO e_ancho.
  ENDIF.

ENDMETHOD.
METHOD get_calidad_nav.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_matnr_nav_type TYPE CHAR2,
        lv_matnr_nav_ppid TYPE CHAR24,
        lv_matnr_nav_anch TYPE zancho.

**********************************************************************
* Validaciones
**********************************************************************

  IF ( i_matnr_nav IS INITIAL ).
    RAISE no_value.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

** Decodificamos material NAV

  me->_decode_matnr_nav(
    EXPORTING
      i_matnr_nav        = i_matnr_nav    " Material NAVISION
    IMPORTING
      e_nav_tipo         = lv_matnr_nav_type    " -P=papel; -A=hojas; space=nada
      e_nav_paperid      = lv_matnr_nav_ppid    " PaperId NAVISION
      e_nav_ancho        = lv_matnr_nav_anch    " Ancho
    EXCEPTIONS
      no_matnr_nav       = 1
      no_possible_decode = 2
      others             = 3
  ).
  IF sy-subrc <> 0.
    RAISE no_q_value.
  ENDIF.

** Obtenemos calidad NAV

  SELECT SINGLE calidad_nav
    FROM ztpi0016
    INTO @e_calidad
   WHERE paperid_nav EQ @lv_matnr_nav_ppid
     AND zzancho     EQ @lv_matnr_nav_anch.

  "Si no encuentra valor, lo intentamos sin ancho
  IF ( sy-subrc NE 0 ).

    SELECT SINGLE calidad_nav
      FROM ztpi0016
      INTO @e_calidad
     WHERE paperid_nav EQ @lv_matnr_nav_ppid
       AND zzancho     EQ @space.

    "Si no encuentra valor no tenemos
    IF ( sy-subrc NE 0 OR e_calidad IS INITIAL ).
      RAISE no_q_value.
    ENDIF.

  ENDIF.

ENDMETHOD.
METHOD get_paperid_nav.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lv_matnr_nav_type TYPE CHAR2,
        lv_matnr_nav_ppid TYPE CHAR24,
        lv_matnr_nav_anch TYPE zancho.

**********************************************************************
* Validaciones
**********************************************************************

** IMPORT

  IF ( i_matnr_nav IS INITIAL ).
    RAISE no_value.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

** Decodificamos material NAV

  me->_decode_matnr_nav(
    EXPORTING
      i_matnr_nav        = i_matnr_nav    " Material NAVISION
    IMPORTING
*      e_nav_tipo         =    " -P=papel; -A=hojas; space=nada
      e_nav_paperid      = e_paperid_nav    " PaperId NAVISION
*      e_nav_ancho        =    " Ancho
    EXCEPTIONS
      no_matnr_nav       = 1
      no_possible_decode = 2
      others             = 3
  ).
  IF ( sy-subrc NE 0 OR e_paperid_nav IS INITIAL ).
    RAISE no_paperid.
  ENDIF.

ENDMETHOD.
METHOD map_matnr_nav_2_sap.

**********************************************************************
* Parámetros locales
**********************************************************************

  DATA: lo_wm_utils     TYPE REF TO zcl_utils_wm,
        lo_wm_exception TYPE REF TO zcx_wm_exception,
        lv_message      TYPE sstring.

  DATA: lt_matnr        TYPE ztt_matnr.

  DATA: lv_matnr_nav_type TYPE char2,
        lv_matnr_nav_qual TYPE char24,
        lv_matnr_nav_anch TYPE zancho,
        lv_matnr_sap      TYPE matnr,
        lv_matnr_ext      TYPE zmatnr_external.

  DATA: lv_string TYPE string.

**********************************************************************
* Valores iniciales
**********************************************************************

** ZCL_UTILS_WM

  TRY.
      "Instanciamos el objeto de utilidades WM
      lo_wm_utils = NEW zcl_utils_wm( i_werks = i_werks i_lgort = i_lgort ).
    CATCH zcx_wm_exception.
      RAISE internal_error.
  ENDTRY.

  IF ( lo_wm_utils IS NOT BOUND ).
    RAISE internal_error.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

** Cambuamos formato a material de entrada

  lv_matnr_ext = me->_get_omp_2_nav_format( i_matnr_omp = i_matnr_nav ).

** Mapeo directo

  me->_get_matnr_from_mlgn_external(
    EXPORTING
      i_matnr_external = lv_matnr_ext           " Número material ERP externo
      i_lgnum          = lo_wm_utils->_lgnum    " Núm.almacén/Complejo alm.
    RECEIVING
      e_t_matnr        = lt_matnr    " Tabla de materiales
  ).

  IF ( lines( lt_matnr ) GT 0 ).
    MOVE-CORRESPONDING lt_matnr TO e_matnr_sap.
    EXIT.
  ENDIF.

** Mapeo indirecto

  "Decodificamos material NAV
  me->_decode_matnr_nav(
    EXPORTING
      i_matnr_nav   = lv_matnr_ext         " Material NAVISION
    IMPORTING
      e_nav_tipo    = lv_matnr_nav_type    " -P=papel; -A=hojas; space=nada
      e_nav_paperid = lv_matnr_nav_qual    " Calidad NAVISION
      e_nav_ancho   = lv_matnr_nav_anch    " Ancho
    EXCEPTIONS
      no_matnr_nav        = 1
      no_possible_decode  = 2
      OTHERS              = 3
  ).
  IF sy-subrc <> 0.
    RAISE no_possible_decode.
  ENDIF.

  "Atendemos al tipo
  CASE lv_matnr_nav_type.

    WHEN '-P'. "Bobinas

      "Obtenemos el valor externo de la tabla ZTPI0015
      " solo para mapeos NAVISION
      SELECT valor_externo
        FROM ztpi0015
        INTO @DATA(lv_external_value)
       WHERE calidad EQ @lv_matnr_nav_qual.

        "Con el valor externo, obtengo el código SAP --> calidad SAP (Gr. articulos + gramaje)
        SELECT zvalor_sap
          FROM ztpi0003
          INTO @DATA(lv_sap_value)
         WHERE zcodigo        EQ '5'
           AND werks          EQ @lo_wm_utils->_werks
           AND zvalor_externo EQ @lv_external_value.

          "Concateno para formar el material SAP
          CONCATENATE lv_sap_value lv_matnr_nav_anch INTO lv_matnr_sap.

          "Obtengo el código interno para el material (ceros delante si corresponde)
          CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
            EXPORTING
              input        = lv_matnr_sap
            IMPORTING
              output       = lv_matnr_sap
            EXCEPTIONS
              length_error = 1
              OTHERS       = 2.

          "Si falla la conversión, el material no existe
          IF sy-subrc <> 0.
            CONTINUE.
          ENDIF.

          "Compruebo que el material tenga WM
          lo_wm_utils->check_matnr_is_extended_4_wm(
            EXPORTING
              i_matnr     = lv_matnr_sap    " Número de material
*              i_t_r_lgtyp =     " Tabla de rangos para tipo de almacén
            IMPORTING
              e_mlgn_data = DATA(lv_mlgn_check)    " Variable booleana (X=verdadero, space=falso.)
*              e_mlgt_data = DATA(lv_mlgt)    " Variable booleana (X=verdadero, space=falso.)
          ).

          IF ( lv_mlgn_check = abap_true ).

            APPEND lv_matnr_sap TO lt_matnr.

          ENDIF.

        ENDSELECT.

      ENDSELECT.

    WHEN '-A'. "Hojas

      "Para hojas, el mapeo es directo por tanto si hay algo, ya debería ir en la tabla LT_MATNR.

    WHEN OTHERS.

      RAISE error_nav_matnr_type.

  ENDCASE.

** Exportamos resultados

  DELETE ADJACENT DUPLICATES FROM lt_matnr.

  MOVE-CORRESPONDING lt_matnr TO e_matnr_sap.

ENDMETHOD.
METHOD map_matnr_sap_2_nav.

**********************************************************************
* Parámetros locales
**********************************************************************

  CONSTANTS: lc_slash(1)  TYPE c VALUE '/',
             lc_hyphen(1) TYPE c VALUE '-'.


  DATA: lv_matnr_str  TYPE char18,
        lv_mtart      TYPE mtart,
        lv_matkl      TYPE matkl,
        lv_gramaje    TYPE zgramaje,
        lv_ancho      TYPE zancho,
        lv_largo      TYPE zlargo,
        lv_impresion  TYPE numc_5.

  DATA: lt_matnr_ext  TYPE ztt_zmatnr_external.

  DATA: lo_wm_utils     TYPE REF TO zcl_utils_wm,
        lo_wm_exception TYPE REF TO zcx_wm_exception,
        lv_message      TYPE sstring.

  DATA: lv_matnr_sap_qual   TYPE char18.

  DATA: lv_matnr_nav_type   TYPE char2,
        lv_matnr_nav_qual   TYPE char24,
        lv_matnr_nav_anch   TYPE zancho,
        lv_matnr_nav_sepa   TYPE char1,
        lv_matnr_nav        TYPE zmatnr_external.

**********************************************************************
* Valores iniciales
**********************************************************************

  TRY .
    lo_wm_utils = NEW zcl_utils_wm( i_werks = i_werks i_lgort = i_lgort ).
  CATCH zcx_wm_exception INTO lo_wm_exception.
    RAISE internal_error.
  ENDTRY.

  IF ( lo_wm_utils IS NOT BOUND ).
    RAISE internal_error.
  ENDIF.

**********************************************************************
* Lógica
**********************************************************************

** Obtenemos referencia directa MLGN

  lt_matnr_ext = me->_get_external_from_mlgn_matnr( i_matnr = i_matnr i_lgnum = lo_wm_utils->_lgnum ).

  "Si encontramos referencias directas, ya no seguimos.
  IF ( lines( lt_matnr_ext ) GT 0 ).

    IF ( i_omp_format EQ abap_true ).

      CLEAR: lv_matnr_nav.

      LOOP AT lt_matnr_ext INTO lv_matnr_nav.
        lv_matnr_nav = me->_get_nav_2_omp_format( i_matnr_nav = lv_matnr_nav ).
        APPEND lv_matnr_nav TO e_t_matnr_nav.
      ENDLOOP.

    ENDIF.
    EXIT.

  ENDIF.


** Obtenemos referencias indirectas

* Decodificamos material SAP

  me->_decode_matnr_sap(
    EXPORTING
      i_matnr     = i_matnr       " Número de material
    IMPORTING
      e_mtart     = lv_mtart      " Tipo de material
      e_matkl     = lv_matkl      " Grupo de artículos
      e_grama     = lv_gramaje    " Gramaje
      e_ancho     = lv_ancho      " Ancho
      e_largo     = lv_largo      " Largo
      e_impresion = lv_impresion  " Impresión
    EXCEPTIONS
      no_value    = 1
      others      = 2
  ).
  IF sy-subrc <> 0.
    RAISE no_value.
  ENDIF.

  IF ( lv_ancho IS INITIAL OR lv_ancho LE 0 ).
    RAISE no_valid_value.
  ENDIF.

* Montamos código NAVISION segun tipo de material.

  CASE lv_mtart.
    WHEN 'ZPAP' OR 'ZCAB'.

      "Copiamos valores fijos.
      lv_matnr_nav_type = '-P'.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input         = lv_ancho
        IMPORTING
          OUTPUT        = lv_matnr_nav_anch.

      "Montamos calidad SAP
      CONCATENATE lv_matkl lv_gramaje INTO lv_matnr_sap_qual.
      CONDENSE lv_matnr_sap_qual NO-GAPS.

      "Con calidad SAP (Gr. articulos + gramaje) obtengo valor externo
      SELECT zvalor_externo
        FROM ztpi0003
        INTO @DATA(lv_ext_value)
       WHERE zcodigo    EQ '5'
         AND werks      EQ @lo_wm_utils->_werks
         AND zvalor_sap EQ @lv_matnr_sap_qual.

        "Obtenemos el valor externo de la tabla ZTPI0015
        " solo para mapeos NAVISION
        SELECT calidad
          FROM ztpi0015
          INTO @lv_matnr_nav_qual
         WHERE valor_externo EQ @lv_ext_value.

          CLEAR lv_matnr_nav.
          CONCATENATE lv_matnr_nav_type lv_matnr_nav_qual INTO lv_matnr_nav.
          CONDENSE lv_matnr_nav NO-GAPS.

          CONCATENATE lv_matnr_nav lv_matnr_nav_anch INTO lv_matnr_nav SEPARATED BY lc_hyphen.
          CONDENSE lv_matnr_nav NO-GAPS.

          IF ( i_omp_format EQ abap_true ).

            lv_matnr_nav = me->_get_nav_2_omp_format( i_matnr_nav = lv_matnr_nav ).

          ENDIF.

          APPEND lv_matnr_nav TO e_t_matnr_nav.

        ENDSELECT.

      ENDSELECT.

    WHEN 'ZPIM'.
      "Referencia directa. No debería entrar
    WHEN 'ZPIH'.
      "Referencia directa. No debería entrar
    WHEN 'ZCAH'.
      "Referencia directa. No debería entrar
    WHEN OTHERS.

      RAISE no_valid_value.

  ENDCASE.

  "Eliminamos duplicados
  SORT e_t_matnr_nav.
  DELETE ADJACENT DUPLICATES FROM e_t_matnr_nav.

ENDMETHOD.
