*&---------------------------------------------------------------------*
*&  Include           ZGLO_REINDAT_FORM
*&---------------------------------------------------------------------*

**********************************************************************
* Form routines for ZGLO_REINDAT
**********************************************************************


*&---------------------------------------------------------------------*
*&      Form  bktxt_filled_check
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM bktxt_filled_check .

  DATA: lv_answer(1).

  SELECT SINGLE *
    FROM bkpf
    INTO CORRESPONDING FIELDS OF gs_bkpf
    WHERE bukrs IN gt_compc
      AND gjahr IN gv_fi_ye
      AND blart IN gv_doc_t
      AND belnr IN gv_doc_n
      AND bktxt = ' '.

  IF sy-subrc = 0.

    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        titlebar              = text-027
*       DIAGNOSE_OBJECT       = ' '
        text_question         = text-020
        text_button_1         = text-023
        icon_button_1         = 'ICON_OKAY'
        text_button_2         = text-024
        icon_button_2         = 'ICON_CANCEL'
*       DEFAULT_BUTTON        = '1'
        display_cancel_button = ' '
*       USERDEFINED_F1_HELP   = ' '
        start_column          = 25
        start_row             = 6
        popup_type            = 'ICON_MESSAGE_WARNING'
*       IV_QUICKINFO_BUTTON_1 = ' '
*       IV_QUICKINFO_BUTTON_2 = ' '
      IMPORTING
        answer                = lv_answer
*     TABLES
*       PARAMETER             =
      EXCEPTIONS
        text_not_found        = 1
        OTHERS                = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    IF lv_answer EQ '2'.
      MESSAGE text-022 TYPE 'W'.
    ENDIF.


  ENDIF.

  CLEAR gs_bkpf.

ENDFORM.                    " bktxt_filled_check
*&---------------------------------------------------------------------*
*&      Form  vat_date_filled_check
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM vat_date_filled_check .

  DATA: lv_answer(1).

  SELECT SINGLE *
    FROM bkpf
    INTO CORRESPONDING FIELDS OF gs_bkpf
    WHERE bukrs IN gt_compc
      AND gjahr IN gv_fi_ye
      AND blart IN gv_doc_t
      AND belnr IN gv_doc_n
      AND REINDAT NE 00000000
      AND REINDAT NE '        '.

  IF sy-subrc = 0.

    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        titlebar              = text-028
*       DIAGNOSE_OBJECT       = ' '
        text_question         = text-021
        text_button_1         = text-023
        icon_button_1         = 'ICON_OKAY'
        text_button_2         = text-024
        icon_button_2         = 'ICON_CANCEL'
*       DEFAULT_BUTTON        = '1'
        display_cancel_button = ' '
*       USERDEFINED_F1_HELP   = ' '
        start_column          = 25
        start_row             = 6
        popup_type            = 'ICON_MESSAGE_WARNING'
*       IV_QUICKINFO_BUTTON_1 = ' '
*       IV_QUICKINFO_BUTTON_2 = ' '
      IMPORTING
        answer                = lv_answer
*     TABLES
*       PARAMETER             =
      EXCEPTIONS
        text_not_found        = 1
        OTHERS                = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    IF lv_answer EQ '2'.
      MESSAGE text-022 TYPE 'W'.
    ENDIF.


  ENDIF.

  CLEAR gs_bkpf.

ENDFORM.                    " vat_date_filled_check
*&---------------------------------------------------------------------*
*&      Form  open_message_pool
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM open_message_pool .
  DATA: l_active LIKE  emsg_gen-kz_active.

*- if the message-handler was switched on
  CALL FUNCTION 'MSG_STATUS_HANDLE'
    EXPORTING
      x_msg_handle = msg_handle
    IMPORTING
      y_active     = l_active.

*- then close Messageobject
  IF l_active = 'X'.
    CALL FUNCTION 'MSG_CLOSE'
      EXPORTING
        x_msg_handle = msg_handle.
  ENDIF.

*- now Open Messageobject safely
  CALL FUNCTION 'MSG_OPEN'
    EXPORTING
      x_no_dialog  = ' '
      x_log        = 'X'
      x_next_msg   = ' '
      x_obj_twice  = ' '
    IMPORTING
      y_msg_handle = msg_handle
*   CHANGING
*     XY_PARM      =
    EXCEPTIONS
      failed       = 1
      subs_invalid = 2
      log_invalid  = 3
      OTHERS       = 4.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " open_message_pool
*&---------------------------------------------------------------------*
*&      Form  close_message_pool
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM close_message_pool .
*- SAVE message log
  CALL FUNCTION 'MSG_ACTION'
    EXPORTING
      x_msg_handle         = msg_handle
      x_action             = co_msg_save
*   EXPORTING
*     X_MSG_BREAK          =
*     X_LOG_OFF_IDENT      =
*   IMPORTING
*     Y_LAST_MSG           =
*     YT_LOGNUMBERS        =
*     YT_MESSAGES          =
*     Y_TAB_MSGPLAIN       =
*   CHANGING
*     XY_LOG_OFF_HANDLE    =
    EXCEPTIONS
      action_not_supported = 1
      handle_invalid       = 2
      not_found            = 3
      OTHERS               = 4.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*- DISPLAY message log
  CALL FUNCTION 'MSG_ACTION'
    EXPORTING
      x_msg_handle         = msg_handle
      x_action             = co_msg_dspl
*   EXPORTING
*     X_MSG_BREAK          =
*     X_LOG_OFF_IDENT      =
*   IMPORTING
*     Y_LAST_MSG           =
*     YT_LOGNUMBERS        =
*     YT_MESSAGES          =
*     Y_TAB_MSGPLAIN       =
*   CHANGING
*     XY_LOG_OFF_HANDLE    =
    EXCEPTIONS
      action_not_supported = 1
      handle_invalid       = 2
      not_found            = 3
      OTHERS               = 4.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

*- CLOSE message log
  CALL FUNCTION 'MSG_CLOSE'
    EXPORTING
      x_msg_handle   = msg_handle
    EXCEPTIONS
      not_found      = 1
      handle_invalid = 2
      OTHERS         = 3.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.


ENDFORM.                    " close_message_pool
*&---------------------------------------------------------------------*
*&      Form  read_payment_terms
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM read_payment_terms .

  SELECT *
    INTO TABLE gt_payment_term
    FROM t052.

  IF sy-subrc <> 0.
    MESSAGE text-025 TYPE 'W'.
  ENDIF.

ENDFORM.                    " read_payment_terms
*&---------------------------------------------------------------------*
*&      Form  determine_payment_duedate
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GT_LINE_ITEMS_TEMP  the line items for the header
*      <--P_GS_BKPF_REINDAT  the VAT-date in the header
*----------------------------------------------------------------------*
FORM determine_payment_duedate
  TABLES p_gt_line_items_temp
  CHANGING p_gs_bkpf_REINDAT.

  DATA: lv_REINDAT LIKE bkpf-REINDAT,
        lv_REINDAT_temp LIKE bkpf-REINDAT,
        ls_line_items TYPE bseg_reduced,
        lv_baseline_date TYPE bseg-zfbdt,
        lv_additional_days TYPE t052-ztag1,
        ls_payment_term TYPE t052.


  CLEAR lv_REINDAT.

  LOOP AT p_gt_line_items_temp INTO ls_line_items.

    CLEAR ls_payment_term.

    READ TABLE gt_payment_term
      WITH KEY zterm = ls_line_items-zterm
      INTO ls_payment_term.

    IF ls_line_items-zfbdt IS NOT INITIAL.
      lv_REINDAT_temp = ls_line_items-zfbdt + ls_payment_term-ztag1.
    ENDIF.

    IF lv_REINDAT IS INITIAL.
      lv_REINDAT = lv_REINDAT_temp.
    ELSEIF ( lv_REINDAT > lv_REINDAT_temp )
      AND ( lv_REINDAT_temp IS NOT INITIAL ).
      lv_REINDAT = lv_REINDAT_temp.
    ENDIF.
  ENDLOOP.

  p_gs_bkpf_REINDAT = lv_REINDAT.


**********************************************************************
*DUE_DATE = BSEG-ZFBDT + T052-ZTAG1
*The payment term is determined by BSEG-ZTERM (Terms of payment key)
**********************************************************************
*	If the document has more then one payment due date,
* then the first one should be used.
**********************************************************************

ENDFORM.                    " determine_payment_duedate
*&---------------------------------------------------------------------*
*&      Form  fill_date_from_bktxt
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_GS_BKPF_BKTXT  text
*      <--P_GS_BKPF_REINDAT  text
*----------------------------------------------------------------------*
FORM fill_date_from_bktxt  USING    p_gs_bkpf_bktxt
                           CHANGING p_gs_bkpf_REINDAT.

  DATA: lv_date TYPE d.

  IF p_gs_bkpf_bktxt+2(1) = '.'
    AND p_gs_bkpf_bktxt+5(1) = '.' .
    CONCATENATE p_gs_bkpf_bktxt+6(4) p_gs_bkpf_bktxt+3(2) p_gs_bkpf_bktxt(2)
    INTO lv_date.
  ELSE.
    lv_date = p_gs_bkpf_bktxt(8).
  ENDIF.

  CALL FUNCTION 'RP_CHECK_DATE'
    EXPORTING
      date         = lv_date
    EXCEPTIONS
      date_invalid = 1
      OTHERS       = 2.
  IF sy-subrc = 1.
    CLEAR lv_date.
  ELSEIF sy-subrc = 2.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    CLEAR lv_date.
  ENDIF.

  p_gs_bkpf_REINDAT = lv_date.

ENDFORM.                    " fill_date_from_bktxt
*&---------------------------------------------------------------------*
*&      Form  testrun_warning
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM testrun_warning .

  DATA: lv_answer(1).

  CALL FUNCTION 'POPUP_TO_CONFIRM'
    EXPORTING
      titlebar              = text-029
*     DIAGNOSE_OBJECT       = ' '
      text_question         = text-026
      text_button_1         = text-023
      icon_button_1         = 'ICON_OKAY'
      text_button_2         = text-024
      icon_button_2         = 'ICON_CANCEL'
*     DEFAULT_BUTTON        = '1'
      display_cancel_button = ' '
*     USERDEFINED_F1_HELP   = ' '
      start_column          = 25
      start_row             = 6
      popup_type            = 'ICON_MESSAGE_WARNING'
*     IV_QUICKINFO_BUTTON_1 = ' '
*     IV_QUICKINFO_BUTTON_2 = ' '
    IMPORTING
      answer                = lv_answer
*   TABLES
*     PARAMETER             =
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  IF lv_answer EQ '2'.
    MESSAGE text-022 TYPE 'W'.
  ENDIF.



ENDFORM.                    " testrun_warning
*&---------------------------------------------------------------------*
*&      Form  auth_check
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM auth_check .

  DATA: lt_bukrs   TYPE STANDARD TABLE OF t001_reduced,
        ls_bukrs     TYPE t001_reduced,
        ls_compc     LIKE LINE OF gt_compc.


  CLEAR: ls_bukrs, lt_bukrs[], gt_compc, gt_compc[].

  SELECT bukrs xVATDATE INTO CORRESPONDING FIELDS OF TABLE lt_bukrs
    FROM t001
    WHERE bukrs IN so_compc.

  LOOP AT lt_bukrs INTO ls_bukrs.

    AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
             ID 'BUKRS' FIELD ls_bukrs-bukrs
             ID 'ACTVT' FIELD '01'.

    IF NOT sy-subrc IS INITIAL.
      MESSAGE w600(f1) WITH text-030 ls_bukrs-bukrs space space.
      EXIT.
    ENDIF.

    IF ls_bukrs-xVATDATE IS INITIAL.      " The current company does not use the vat date field (t001-xVATDATE)
      MESSAGE i130(idfi) WITH ls_bukrs-bukrs.
    ELSE.
      " Assembly the real select-options without the companies that don't use the vat date field
      ls_compc-sign = 'I'.
      ls_compc-option = 'EQ'.
      ls_compc-low     = ls_bukrs-bukrs.
      Append ls_compc TO gt_compc.
    ENDIF.

  ENDLOOP.

* Company code with activated VAT Date shall be entered
  IF gt_compc IS INITIAL.
    MESSAGE e131(idfi).
  ENDIF.
ENDFORM.                    " auth_check

*&---------------------------------------------------------------------*
*&      Form  MSG_PUT
*&---------------------------------------------------------------------*
*       Add message to log
*----------------------------------------------------------------------*
FORM msg_put  USING
      iv_msgty TYPE symsgty
      iv_msgno TYPE symsgno
      iv_msgid TYPE symsgid
      iv_msgv1 TYPE any
      iv_msgv2 TYPE any
      iv_msgv3 TYPE any
      iv_msgv4 TYPE any.

  DATA: ls_msg         TYPE bal_s_msg,
        lt_log_handle  TYPE bal_t_logh,
        ld_log_no      TYPE balognr.

  CLEAR ls_msg.
  ls_msg-msgty = iv_msgty.
  ls_msg-msgid = iv_msgid.
  ls_msg-msgno = iv_msgno.
  ls_msg-msgv1 = iv_msgv1.
  ls_msg-msgv2 = iv_msgv2.
  ls_msg-msgv3 = iv_msgv3.
  ls_msg-msgv4 = iv_msgv4.

* Priority of messages
  CASE ls_msg-msgty.
    WHEN co_msg_error.
      ls_msg-probclass = 1.
    WHEN co_msg_warning.
      ls_msg-probclass = 2.
    WHEN OTHERS.
      ls_msg-probclass = 3.
  ENDCASE.


  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
     i_log_handle              = gv_log_handle
      i_s_msg                  = ls_msg
* IMPORTING
*   E_S_MSG_HANDLE            =
*   E_MSG_WAS_LOGGED          =
*   E_MSG_WAS_DISPLAYED       =
   EXCEPTIONS
     log_not_found             = 1
     msg_inconsistent          = 2
     log_is_full               = 3
     OTHERS                    = 4.
  CASE sy-subrc.
    WHEN 1 OR 2 OR 4.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    WHEN 3.                  " LOG_IS_FULL
*     Save full part of log
      PERFORM save_log
        USING gv_log_handle.

*     Clear log in memory
      PERFORM clear_log
        USING gv_log_handle.

*     Create new log
      PERFORM create_log
            USING    gv_extnumber
            CHANGING gv_log_handle.

      CALL FUNCTION 'BAL_LOG_MSG_ADD'
        EXPORTING
          i_log_handle     = gv_log_handle
          i_s_msg          = ls_msg
        EXCEPTIONS
          log_not_found    = 1
          msg_inconsistent = 2
          log_is_full      = 3
          OTHERS           = 4.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

  ENDCASE.

ENDFORM.                    " MSG_PUT

*&---------------------------------------------------------------------*
*&      Form  CREATE_LOG
*&---------------------------------------------------------------------*
*       Create application log
*----------------------------------------------------------------------*
*      -->iv_EXTNUMBER
*      <--cv_CV_HANDLE
*----------------------------------------------------------------------*
FORM create_log
    USING    iv_extnumber TYPE balnrext
    CHANGING cv_log_handle TYPE balloghndl.

  DATA: ls_appl_log_header        TYPE bal_s_log.

* set header info
  ls_appl_log_header-object    = 'IUMS'.                    "#EC NOTEXT
  ls_appl_log_header-subobject = 'INFO'.                    "#EC NOTEXT
  ls_appl_log_header-aldate    = sy-datum.
  ls_appl_log_header-altime    = sy-uzeit.
  ls_appl_log_header-aluser    = sy-uname.
  ls_appl_log_header-alprog    = sy-repid.
  ls_appl_log_header-altcode   = sy-tcode.
  ls_appl_log_header-extnumber = iv_extnumber.

* create application log (processing log)
  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log      = ls_appl_log_header
    IMPORTING
      e_log_handle = cv_log_handle
    EXCEPTIONS
      OTHERS       = 1.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " CREATE_LOG

*&---------------------------------------------------------------------*
*&      Form  SAVE_LOG
*&---------------------------------------------------------------------*
*       Save application log and purge memory
*----------------------------------------------------------------------*

FORM save_log  USING iv_log_handle TYPE balloghndl.

  DATA:
  lt_log_handle TYPE bal_t_logh,
  ls_scnt TYPE bal_s_scnt,
  lt_protocols_db TYPE bal_t_lgnm,
  ls_protocols_db TYPE bal_s_lgnm.

  APPEND iv_log_handle TO lt_log_handle.

*   save immediately, no more commit work will follow
  CALL FUNCTION 'BAL_DB_SAVE'
    EXPORTING
      i_in_update_task = ' '
      i_save_all       = ' '
      i_t_log_handle   = lt_log_handle
    IMPORTING
      e_new_lognumbers = lt_protocols_db
    EXCEPTIONS
      log_not_found    = 1
      save_not_allowed = 2
      numbering_error  = 3
      OTHERS           = 4.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " SAVE_LOG

*---------------------------------------------------------------------*
*      Form display_log
*---------------------------------------------------------------------*
*      Display application log
*---------------------------------------------------------------------*
FORM display_log  USING iv_log_handle TYPE balloghndl.

  DATA: ls_display_profile TYPE bal_s_prof,
        lt_log_handle TYPE bal_t_logh.

  APPEND iv_log_handle TO lt_log_handle.

* get standard display profile
  CALL FUNCTION 'BAL_DSP_PROFILE_SINGLE_LOG_GET'
    IMPORTING
      e_s_display_profile = ls_display_profile
    EXCEPTIONS
      OTHERS              = 1.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

* optimized column width
  ls_display_profile-cwidth_opt = 'X'.                      "#EC NOTEXT


* set report for display variants
  ls_display_profile-disvariant-report = sy-repid.

* when you use also other ALV lists in your report,
* please specify a handle to distinguish between the display
* variants of these different lists
  ls_display_profile-disvariant-handle = 'LOG'.             "#EC NOTEXT

* display log
  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      i_s_display_profile = ls_display_profile
      i_t_log_handle      = lt_log_handle
    EXCEPTIONS
      OTHERS              = 1.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " display_log
*&---------------------------------------------------------------------*
*&      Form  REFRESH_LOG
*&---------------------------------------------------------------------*
*       Purge log in memory
*----------------------------------------------------------------------*
*      -->iV_LOG_HANDLE
*----------------------------------------------------------------------*
FORM clear_log  USING iv_log_handle TYPE balloghndl.

  CALL FUNCTION 'BAL_LOG_REFRESH'
    EXPORTING
      i_log_handle  = iv_log_handle
    EXCEPTIONS
      log_not_found = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

ENDFORM.                    " CLEAR_LOG
*&---------------------------------------------------------------------*
*&      Form  CREATE_EXTNUMBER
*&---------------------------------------------------------------------*
*       Prepare external number of log
*----------------------------------------------------------------------*
*      <--cv_EXTNUMBER
*----------------------------------------------------------------------*
FORM create_extnumber  CHANGING cv_extnumber.

  DATA: lv_date TYPE char8,
        lv_time TYPE char6.

  lv_date = sy-datum.
  lv_time = sy-uzeit.

  CONCATENATE lv_date lv_time INTO cv_extnumber.

ENDFORM.                    " CREATE_EXTNUMBER
