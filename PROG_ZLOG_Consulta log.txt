***********************************************************************
* TIPO : LISTADO
* TITULO : Listado log
* DESCRIPCION : Listado log
*
* AUTOR: Andres Picazo                                FECHA: 13/02/2015
*
***********************************************************************
REPORT zlog.

*------INCLUDES--------------------------------------------------------*

*------TABLAS/ESTRUCTURAS----------------------------------------------*
TABLES: zlog, zlog_param, bics_prov_message, sscrfields.

*------TABLAS INTERNAS-------------------------------------------------*
TYPES: BEGIN OF t_listado,
         check         TYPE c LENGTH 1,
         lights        TYPE c LENGTH 1,
         clasificacion TYPE zlog_param-clasificacion,
         proceso       TYPE zlog-proceso,
         clave         TYPE zlog-clave,
         progname      TYPE zlog-progname,
         fecha         TYPE zlog-fecha,
         hora          TYPE zlog-hora,
         usuario       TYPE zlog-usuario,
         indice        TYPE zlog-indice,
         msgv1         TYPE zlog-msgv1,
         msgv2         TYPE zlog-msgv2,
         msgv3         TYPE zlog-msgv3,
         msgv4         TYPE zlog-msgv4,
         msgty         TYPE zlog-msgty,
         msgid         TYPE zlog-msgid,
         msgno         TYPE zlog-msgno,
         message       TYPE zlog-message,
         fichero       TYPE zlog-fichero,
       END OF t_listado.
DATA: i_listado TYPE TABLE OF t_listado,
      l_listado TYPE t_listado.

FIELD-SYMBOLS <listado> TYPE t_listado.

*----------------------------------------------------------------------*
* CLASS lcl_alv DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv DEFINITION INHERITING FROM zcl_ap_alv_check.
  PUBLIC SECTION.
    METHODS handle_user_command REDEFINITION.
    METHODS top_of_page         REDEFINITION.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report DEFINITION INHERITING FROM zcl_ap_dev.
  PUBLIC SECTION.
    METHODS  main.

    METHODS: listado,
      seleccionar_datos.

ENDCLASS.


*------VARIABLES-------------------------------------------------------*
DATA: o_prog TYPE REF TO zcl_report,
      o_alv  TYPE REF TO lcl_alv.

DEFINE sel_msgv.
  SELECTION-SCREEN BEGIN OF LINE.
    SELECTION-SCREEN POSITION 1.
    PARAMETERS p_msgv&1 LIKE t001-butxt MODIF ID msg DEFAULT 'Variable msg. &1'.
    SELECTION-SCREEN POSITION 30.
    SELECT-OPTIONS s_msgv&1 FOR zlog-msgv&1.
  SELECTION-SCREEN END OF LINE.
END-OF-DEFINITION.

*------PARAMETER/SELECT-OPTIONS EN PANTALLA----------------------------*
SELECTION-SCREEN BEGIN OF BLOCK 001 WITH FRAME.
SELECT-OPTIONS: s_proces FOR zlog-proceso,
                s_clasif FOR zlog_param-clasificacion,
                s_clave FOR zlog-clave,
                s_progra FOR zlog-progname,
                s_fecha FOR zlog-fecha DEFAULT sy-datum,
                s_hora  FOR zlog-hora,
                s_usuari FOR zlog-usuario,
                s_messa FOR bics_prov_message-text,
                s_ficher FOR zlog-fichero,
                s_msgty FOR zlog-msgty.
sel_msgv: 1, 2, 3, 4.
SELECTION-SCREEN SKIP 1.
PARAMETERS: p_email  TYPE text255,
            p_asunto TYPE text255.

SELECTION-SCREEN SKIP 1.
PARAMETERS p_vari LIKE disvariant-variant.
SELECTION-SCREEN END OF BLOCK 001.
SELECTION-SCREEN: FUNCTION KEY 2,
                  FUNCTION KEY 3,
                  FUNCTION KEY 4.


************************************************************************
*
* LOGICA DEL PROGRAMA
*
************************************************************************

*----------------------------------------------------------------------*
* CLASS lcl_alv IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_alv IMPLEMENTATION.

  METHOD handle_user_command.

    CASE e_salv_function.
      WHEN 'EXCEL'.
        exportar_excel( ).
      WHEN 'REFRESCAR'.
        o_prog->seleccionar_datos( ).
        refresh( ).
      WHEN 'BORRAR'.
        get_seleccion( ).
        LOOP AT i_listado ASSIGNING <listado> WHERE check = 'X'.
          DELETE FROM zlog
            WHERE proceso  = <listado>-proceso
              AND progname = <listado>-progname
              AND clave    = <listado>-clave
              AND fecha    = <listado>-fecha
              AND hora     = <listado>-hora
              AND usuario  = <listado>-usuario
              AND indice   = <listado>-indice.
          DELETE i_listado.
        ENDLOOP.
        refresh( ).

      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.

  METHOD top_of_page.
    CLEAR o_content.

    o_top_page->set_titulo( sy-title ).

    o_top_page->add_rango_auto( ).
    o_top_page->add_rango( texto = 'Proceso' rango = s_proces[] ).
    o_top_page->add_rango( texto = 'Clave' rango = s_clave[] ).
    o_top_page->crea_info_seleccion( ).

    o_content = o_top_page->get_grid( ).
  ENDMETHOD.
ENDCLASS.


*----------------------------------------------------------------------*
*       CLASS zcl_report IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS zcl_report IMPLEMENTATION.
  METHOD main.

* Borramos registros antiguos
    zcl_ap_log=>borrar_logsz(  ).

    seleccionar_datos( ).
    listado( ).

    IF NOT p_email IS INITIAL.
      zcl_ap_abap2xls=>mail( direccion = p_email
                             subject = p_asunto
                             o_alv1 = o_alv
                             tabla_alv1 = i_listado
                             nombre_alv1 = 'Log.xlsx' ).
    ENDIF.
  ENDMETHOD.                    " REPORT

  METHOD seleccionar_datos.
    DATA: r_msgv1  TYPE RANGE OF sy-msgv1,
          r_msgv2  TYPE RANGE OF sy-msgv2,
          r_msgv3  TYPE RANGE OF sy-msgv3,
          r_msgv4  TYPE RANGE OF sy-msgv4,
          lr_msgv1 LIKE LINE OF r_msgv1.

    DEFINE set_r_msgv.
      r_msgv&1 = s_msgv&1[].

      IF p_msgv&1 = 'MATERIAL' OR p_msgv&1(7) = 'ENTREGA'.
        LOOP AT r_msgv&1 INTO lr_msgv1 WHERE option = 'EQ'.
          lr_msgv1-option = 'CP'.
          CONCATENATE '*' lr_msgv1-low INTO lr_msgv1-low.
          MODIFY r_msgv&1 FROM lr_msgv1.
        ENDLOOP.

      ENDIF.
    END-OF-DEFINITION.

    set_r_msgv: 1, 2, 3, 4.

    CLEAR i_listado.

    sgpi_texto( 'Seleccionando datos' ).
    SELECT zlog~*,  zlog_param~clasificacion
      FROM zlog LEFT OUTER JOIN zlog_param ON zlog_param~proceso = zlog~proceso
      INTO CORRESPONDING FIELDS OF TABLE @i_listado
     WHERE zlog~proceso  IN @s_proces
       AND clasificacion IN @s_clasif
       AND clave    IN @s_clave
       AND progname IN @s_progra
       AND fecha    IN @s_fecha
       AND hora     IN @s_hora
       AND usuario  IN @s_usuari
       AND zlog~msgv1    IN @r_msgv1
       AND zlog~msgv2    IN @r_msgv2
       AND zlog~msgv3    IN @r_msgv3
       AND zlog~msgv4    IN @r_msgv4
       AND message  IN @s_messa
       AND msgty    IN @s_msgty
       AND fichero  IN @s_ficher.

    LOOP AT i_listado ASSIGNING <listado>.
      IF <listado>-msgty = 'E'.
        <listado>-lights = zcl_ap_alv=>c_sem_rojo.
      ELSEIF <listado>-msgty = 'I' OR <listado>-msgty = 'S'.
        <listado>-lights = zcl_ap_alv=>c_sem_verde.
      ELSEIF <listado>-msgty = 'W'.
        <listado>-lights = zcl_ap_alv=>c_sem_ambar.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD listado.
    sgpi_texto( 'Generando informe' ).

    o_alv->set_layout( p_vari ).

    o_alv->set_top_of_page( ).

    o_alv->set_seleccion( CHANGING t_tabla = i_listado ).

    o_alv->set_field_noout( 'MSGTY,MSGID,MSGNO' ).

    IF NOT zlog_param-msgv1 IS INITIAL.
      IF zlog_param-msgv1 = 'INVISIBLE'.
        o_alv->set_field_noout( 'MSGV1' ).
      ELSE.
        o_alv->set_field_text( campo = 'MSGV1' valor = zlog_param-msgv1 ).
      ENDIF.
    ENDIF.
    IF NOT zlog_param-msgv2 IS INITIAL.
      IF zlog_param-msgv2 = 'INVISIBLE'.
        o_alv->set_field_noout( 'MSGV2' ).
      ELSE.
        o_alv->set_field_text( campo = 'MSGV2' valor = zlog_param-msgv2 ).
      ENDIF.
    ENDIF.
    IF NOT zlog_param-msgv3 IS INITIAL.
      IF zlog_param-msgv3 = 'INVISIBLE'.
        o_alv->set_field_noout( 'MSGV3' ).
      ELSE.
        o_alv->set_field_text( campo = 'MSGV3' valor = zlog_param-msgv3 ).
      ENDIF.
    ENDIF.
    IF NOT zlog_param-msgv4 IS INITIAL.
      IF zlog_param-msgv4 = 'INVISIBLE'.
        o_alv->set_field_noout( 'MSGV4' ).
      ELSE.
        o_alv->set_field_text( campo = 'MSGV4' valor = zlog_param-msgv4 ).
      ENDIF.
    ENDIF.

    o_alv->set_orden( 'FECHA,HORA,PROCESO,USUARIO,PROGNAME,INDICE,CLAVE' ).
    o_alv->ocultar_columnas_vacias( ).
    o_alv->show( ).
  ENDMETHOD.
ENDCLASS.

*----------------------------------------------------------------------*
* INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
  o_prog = NEW #(
      status        = 'INICIO'
      get_nombre_pc = 'X'
      no_param      = 'X' ).

  o_alv = NEW #(
      status = 'STANDARD'
      lights = 'LIGHTS' ).
  p_vari = o_alv->get_default_layout( ).

  o_prog->initialization( EXPORTING nombre_pc = o_prog->nombre_pc CHANGING sscrfields = sscrfields ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_vari.
  p_vari = o_alv->get_f4_layout( ).

AT SELECTION-SCREEN OUTPUT.

  DATA(r_proces) = s_proces[].
  IF s_proces[] IS INITIAL AND
    ( NOT s_clave[] IS INITIAL OR NOT s_progra[] IS INITIAL ).
    SELECT DISTINCT proceso FROM zlog
      INTO TABLE @DATA(i_pro)
     WHERE proceso  IN @s_proces
       AND clave    IN @s_clave
       AND progname IN @s_progra
       AND fecha    IN @s_fecha
       AND hora     IN @s_hora
       AND usuario  IN @s_usuari
       AND zlog~msgv1    IN @s_msgv1
       AND zlog~msgv2    IN @s_msgv2
       AND zlog~msgv3    IN @s_msgv3
       AND zlog~msgv4    IN @s_msgv4
       AND message  IN @s_messa
       AND msgty    IN @s_msgty
       AND fichero  IN @s_ficher.
    LOOP AT i_pro ASSIGNING FIELD-SYMBOL(<pro>).
      APPEND VALUE #( option = 'EQ' sign = 'I' low = <pro>-proceso ) TO r_proces.
    ENDLOOP.
  ENDIF.
  READ TABLE r_proces INTO DATA(lr_proces) INDEX 1.
  IF sy-subrc = 0.
    CLEAR zlog_param.
    SELECT SINGLE * FROM zlog_param
      INTO zlog_param
     WHERE proceso = lr_proces-low.
    IF sy-subrc <> 0.
      SELECT *
        FROM zlog_param
        WHERE proceso IN @r_proces
        ORDER BY PRIMARY KEY
        INTO @zlog_param
        UP TO 1 ROWS.
      ENDSELECT.
    ENDIF.
    IF sy-subrc = 0.
      IF NOT zlog_param-msgv1 IS INITIAL.
        p_msgv1 = zlog_param-msgv1.
      ENDIF.
      IF NOT zlog_param-msgv2 IS INITIAL.
        p_msgv2 = zlog_param-msgv2.
      ENDIF.
      IF NOT zlog_param-msgv3 IS INITIAL.
        p_msgv3 = zlog_param-msgv3.
      ENDIF.
      IF NOT zlog_param-msgv4 IS INITIAL.
        p_msgv4 = zlog_param-msgv4.
      ENDIF.
    ENDIF.
  ENDIF.

  LOOP AT SCREEN.
    IF screen-group1 <> 'MSG'.
      CONTINUE.
    ENDIF.

    screen-input      = '0'.
    screen-display_3d = '0'.

    IF screen-name = 'P_MSGV1' AND zlog_param-msgv1 = 'INVISIBLE'.
      screen-invisible = 1.
    ELSEIF screen-name = 'P_MSGV2' AND zlog_param-msgv2 = 'INVISIBLE'.
      screen-invisible = 1.
    ELSEIF screen-name = 'P_MSGV3' AND zlog_param-msgv3 = 'INVISIBLE'.
      screen-invisible = 1.
    ELSEIF screen-name = 'P_MSGV4' AND zlog_param-msgv4 = 'INVISIBLE'.
      screen-invisible = 1.
    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.

************************************************************************
* AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
  o_prog->at_selection( ).

AT SELECTION-SCREEN ON EXIT-COMMAND.
  o_prog->at_selection( ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR s_proces-low.
  DATA o_popup TYPE REF TO zcl_ap_matchcode_z.

  o_popup = NEW #(
      tabname = 'ZLOG' ).

  o_popup->add_field( field = 'PROCESO' selectflag = 'X' ).
  o_popup->add_field( field = 'DESCRIPCION' tabname = 'ZLOG_PARAM' ).
  o_popup->add_field( 'PROGNAME' ).
  o_popup->add_field( 'FECHA' ).
  o_popup->add_field( 'MSGV1' ).

  SELECT proceso progname COUNT( * ) FROM zlog          "#EC CI_NOWHERE
    INTO (zlog-proceso, zlog-progname, sy-tfill )
   GROUP BY proceso progname
   ORDER BY proceso progname.
    o_popup->add_valor( zlog-proceso ).
    CLEAR zlog_param-descripcion.
    SELECT SINGLE descripcion FROM zlog_param
      INTO zlog_param-descripcion
     WHERE proceso = zlog-proceso.
    o_popup->add_valor( zlog_param-descripcion ).

    o_popup->add_valor( zlog-progname ).
    SELECT MAX( fecha ) FROM zlog
      INTO zlog-fecha
     WHERE proceso  = zlog-proceso
       AND progname = zlog-progname.
    o_popup->add_valor( zlog-fecha ).
    o_popup->add_valor( sy-tfill ).
  ENDSELECT.

  o_popup->matchcode( EXPORTING field   = 'PROCESO'
                      CHANGING  valor   = s_proces-low ).

*----------------------------------------------------------------------
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.
  o_prog->main( ).
