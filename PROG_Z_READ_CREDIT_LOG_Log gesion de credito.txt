*&---------------------------------------------------------------------*
*& Report  Z_READ_CREDIT_LOG
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  Z_READ_CREDIT_LOG.

TYPES: BEGIN OF log,

      delta_oeikw LIKE s066-oeikw,
      delta_olikw LIKE s067-olikw,
      delta_ofakw LIKE s067-ofakw,
      scc_sum_opens LIKE s067-ofakw,
      sav_knkk_klimk LIKE knkk-klimk,
      user LIKE indx-usera,
      pgmid LIKE indx-pgmid,
      knkli LIKE vbak-knkli,
      kkber LIKE vbak-kkber,
      open_order LIKE s066-oeikw,
      open_delivery LIKE s067-olikw,
      open_invoice LIKE s067-ofakw,
      status LIKE vbuk-cmgst,
      END OF log.

DATA: lt_log TYPE TABLE OF log.
DATA: ls_log TYPE log.
DATA: vkmi_key TYPE vkmi_key,
     lt_vkmi_key TYPE TABLE OF vkmi_key .
TYPES: BEGIN OF ident,
      vbeln TYPE vbak-vbeln,
      handle TYPE vbak-handle,
     END OF ident.
TYPES: BEGIN OF indx_key,
      srtfd LIKE indx-srtfd,
      aedat LIKE indx-aedat,
      usera LIKE indx-usera,
      pgmid LIKE indx-pgmid,
     END OF indx_key.

TYPES: BEGIN OF output,
       vbeln LIKE vbak-vbeln,
       cmgst LIKE vbuk-cmgst,
       knkli LIKE vbak-knkli,
       kkber LIKE vbak-kkber,
       trtyp LIKE t180-trtyp,
       oeikw LIKE s066-oeikw,
       olikw LIKE s067-olikw,
       ofakw LIKE s067-ofakw,
       delta_oeikw LIKE s066-oeikw,
       delta_olikw LIKE s067-olikw,
       delta_ofakw LIKE s067-ofakw,
       scc_sum_opens LIKE s067-aoliw,
       sav_knkk_klimk LIKE knkk-klimk,
       pgmid LIKE indx-pgmid,
       user LIKE sy-uname,
       date LIKE sy-datum,
       time LIKE sy-uzeit,
   END OF output.

DATA: ls_ident TYPE ident.
DATA: lt_ident TYPE TABLE OF ident.
DATA lt_key TYPE TABLE OF indx_key.
DATA ls_key TYPE indx_key.
DATA ls_vbeln TYPE vbak-vbeln.

DATA: ls_output TYPE output,
      lt_output TYPE TABLE OF output. .
DATA: go_alv TYPE REF TO cl_salv_table,
      lr_cols     TYPE REF TO cl_salv_columns_table,
     lr_col      TYPE REF TO cl_salv_column_table.
SELECT-OPTIONS document FOR vkmi_key-vbeln.
PARAMETERS delete AS CHECKBOX.

IF delete IS INITIAL.
* get relation vbeln and handle
  SELECT vbeln handle FROM vbak INTO CORRESPONDING FIELDS OF TABLE lt_ident WHERE vbeln IN document.

  SELECT * FROM vkmi INTO CORRESPONDING FIELDS OF TABLE lt_vkmi_key WHERE vbeln IN document AND
                                                    relid EQ 'CC'.
* at time of creation vbeln did not exist yet, yo we need to check entries based on handle
  SELECT * FROM indx INTO CORRESPONDING FIELDS OF TABLE lt_key FOR ALL ENTRIES IN lt_ident WHERE relid EQ 'CC'
    AND srtfd EQ lt_ident-handle.


  LOOP AT lt_key INTO ls_key.

*get logs for create mode
    IMPORT
     ls_log
       FROM DATABASE indx(cc) ID ls_key-srtfd.
    IF sy-subrc EQ 0.

      READ TABLE lt_ident INTO ls_ident WITH KEY handle = ls_key-srtfd .
      ls_output-cmgst = ls_log-status.
      ls_output-vbeln = ls_ident-vbeln.
      ls_output-knkli = ls_log-knkli.
      ls_output-kkber = ls_log-kkber.
      ls_output-oeikw = ls_log-open_order.
      ls_output-olikw = ls_log-open_delivery.
      ls_output-ofakw = ls_log-open_invoice.
      ls_output-sav_knkk_klimk = ls_log-sav_knkk_klimk.
      ls_output-scc_sum_opens = ls_log-scc_sum_opens.
      ls_output-delta_oeikw =  ls_log-delta_oeikw.
      ls_output-delta_olikw =  ls_log-delta_olikw.
      ls_output-delta_ofakw =  ls_log-delta_ofakw.
      ls_output-user = ls_key-usera.
      ls_output-date = ls_key-aedat.
      ls_output-trtyp = 'A'.
      ls_output-pgmid = ls_key-pgmid.

      APPEND ls_output TO lt_output.
    ENDIF.

  ENDLOOP.


  LOOP AT lt_vkmi_key INTO vkmi_key.
* get logs for change mode
    IMPORT
         ls_log
   FROM DATABASE vkmi(cc) ID vkmi_key.

    IF sy-subrc EQ 0.

      ls_output-vbeln = vkmi_key-vbeln.
      ls_output-knkli = vkmi_key-knkli.
      ls_output-kkber = vkmi_key-kkber.
      ls_output-time = vkmi_key-uzeit.
      ls_output-cmgst = ls_log-status.
      ls_output-oeikw = ls_log-open_order.
      ls_output-olikw = ls_log-open_delivery.
      ls_output-ofakw = ls_log-open_invoice.
      ls_output-sav_knkk_klimk = ls_log-sav_knkk_klimk.
      ls_output-scc_sum_opens = ls_log-scc_sum_opens.
      ls_output-delta_oeikw =  ls_log-delta_oeikw.
      ls_output-delta_olikw =  ls_log-delta_olikw.
      ls_output-delta_ofakw =  ls_log-delta_ofakw.
      ls_output-user = ls_log-user.
      ls_output-date = vkmi_key-datum.
      ls_output-trtyp = 'V'.
      ls_output-pgmid = ls_log-pgmid.

      APPEND ls_output TO lt_output.

    ENDIF.
  ENDLOOP.

* 2. step: create ALV instance
  CALL METHOD cl_salv_table=>factory
    IMPORTING
      r_salv_table = go_alv
    CHANGING
      t_table      = lt_output.

  lr_cols = go_alv->get_columns( ).
  lr_col ?= lr_cols->get_column( 'DELTA_OEIKW' ).
  lr_col->set_medium_text( 'Checked value order' ).

  lr_cols = go_alv->get_columns( ).
  lr_col ?= lr_cols->get_column( 'DELTA_OLIKW' ).
  lr_col->set_long_text( 'Checked value deliv.' ).

  lr_cols = go_alv->get_columns( ).
  lr_col ?= lr_cols->get_column( 'DELTA_OFAKW' ).
  lr_col->set_medium_text( 'Checked value invoi.' ).

  lr_cols = go_alv->get_columns( ).
  lr_col ?= lr_cols->get_column( 'SCC_SUM_OPENS' ).
  lr_col->set_long_text( 'Checked credit exposure' ).

* 3. step: display data
  go_alv->display( ).

ENDIF.

IF delete EQ 'X'.
  SELECT * FROM indx
           INTO CORRESPONDING FIELDS OF TABLE lt_key WHERE relid = 'CC'.
  LOOP AT lt_key INTO ls_key.
    DELETE FROM DATABASE indx(cc) ID ls_key.
  ENDLOOP.

  SELECT * FROM vkmi
            INTO CORRESPONDING FIELDS OF TABLE lt_vkmi_key Where relid = 'CC'.

  LOOP AT lt_vkmi_key INTO vkmi_key.
    DELETE FROM DATABASE vkmi(cc) ID vkmi_key.
  ENDLOOP.

  IF sy-subrc EQ 0.
    WRITE:/ 'Entries were deleted.'.
  ENDIF.
ENDIF.
