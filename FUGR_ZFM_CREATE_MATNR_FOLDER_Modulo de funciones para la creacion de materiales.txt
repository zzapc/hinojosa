FUNCTION zfm_create_matnr_folder.
*"----------------------------------------------------------------------
*"*"Interfase local
*"  IMPORTING
*"     REFERENCE(I_MBRSH) TYPE  MBRSH
*"     REFERENCE(I_MTART) TYPE  MTART
*"     REFERENCE(I_PRODH) TYPE  PRODH_D OPTIONAL
*"     REFERENCE(I_MATNR_REF) TYPE  MATNR
*"  EXPORTING
*"     REFERENCE(E_MATNR) TYPE  MATNR
*"----------------------------------------------------------------------


  DATA: lt_r_mtart          TYPE md_range_t_mtart,
        lo_exceptions       TYPE REF TO zcx_mm_exception,
        lo_material_zpt     TYPE REF TO zcl_mm_material_zpt,
        lo_material_cups    TYPE REF TO zcl_mm_material_cups,
        lo_material_tool    TYPE REF TO zcl_mm_material_tools.

  DATA: lv_mtext            TYPE char18,
        lv_msequ            TYPE char18,
        lv_ichar            TYPE char1,
        lv_fchar            TYPE char1,
        lv_itype            TYPE char1,
        lv_werks            TYPE werks_d,
        lv_codido           TYPE zcodigoutil,
        lv_answer           TYPE char1.

  TRY.

*1- Comprobamos si es ZPT

    CLEAR: lt_r_mtart.

    "Obtenemos materiales compatibles con ZPT
    lt_r_mtart = zcl_mm_material_zpt=>zintf_mm_material_master~s_get_mtart_compatibles( i_setname = zcl_mm_material_zpt=>_c_setname_value ).

    "Comprobamos si nuestro tipo de material es compatible
    IF ( i_mtart IN lt_r_mtart ). "Es compatible

      lo_material_zpt = NEW zcl_mm_material_zpt( i_mtart = i_mtart i_mbrsh = i_mbrsh i_prodh = i_prodh ).
      e_matnr = lo_material_zpt->zintf_mm_material_master~get_new_matnr_with_dialog( ).

    ELSE. "Ponemos por CUPS, ya que solo utilizan ZPTF. Una vez arranque, eliminamos esta parte

      "Si tipo de material empieza por ZPT
      IF ( i_mtart(3) = 'ZPT' ).

*        IF ( sy- ).
*
*        ENDIF.

      ENDIF.

    ENDIF.

*2- Comprobamos si es CUPS

    CLEAR: lt_r_mtart.

    "Obtenemos materiales compatibles con CUPS
    lt_r_mtart = zcl_mm_material_cups=>zintf_mm_material_master~s_get_mtart_compatibles( i_setname = zcl_mm_material_cups=>_c_setname_value ).

    "Comprobamos si nuestro tipo de material es compatible
    IF ( i_mtart IN lt_r_mtart ). "Es compatible

      lo_material_cups = NEW zcl_mm_material_cups( i_mtart = i_mtart i_mbrsh = i_mbrsh i_prodh = i_prodh ).
      e_matnr = lo_material_cups->zintf_mm_material_master~get_new_matnr_with_dialog( ).

    ENDIF.

*3- Comprobamos si es ZCLI o ZTRO

    CLEAR: lt_r_mtart.

    "Obtenemos materiales compatibles con CUPS
    lt_r_mtart = zcl_mm_material_tools=>zintf_mm_material_master~s_get_mtart_compatibles( i_setname = zcl_mm_material_tools=>_c_setname_value ).

    "Comprobamos si nuestro tipo de material es compatible
    IF ( i_mtart IN lt_r_mtart ). "Es compatible

      lo_material_tool = NEW zcl_mm_material_tools( i_mtart = i_mtart i_mbrsh = i_mbrsh ).

      IF ( i_matnr_ref IS INITIAL ).

        e_matnr = lo_material_tool->zintf_mm_material_master~get_new_matnr_with_dialog( ).

      ELSE.

        "Comprobamos que el material existe.
        SELECT COUNT(*)
          FROM mara
         WHERE matnr EQ i_matnr_ref.

        IF ( sy-subrc = 0 ).

          zcl_mm_material_tools=>s_decode_matnr(
            EXPORTING
              i_matnr = i_matnr_ref    " Número de material
            IMPORTING
              e_mtext = lv_mtext    " Parte texto del material
              e_msequ = lv_msequ    " Parte secuencial del material
              e_fchar = lv_fchar    " Letra final (solo troqueles)
          ).

          IF ( lv_mtext IS NOT INITIAL ).

            lo_material_tool->zintf_mm_material_master~set_prodh( i_prodh = lv_mtext ).

            CALL FUNCTION 'POPUP_TO_CONFIRM'
              EXPORTING
                titlebar                    = 'Atención'
                text_question               = '¿Desea crear una nueva unidad del mismo útil?'
                text_button_1               = 'Si'
                icon_button_1               = 'ICON_CHECKED'
                text_button_2               = 'No'
                icon_button_2               = 'ICON_CANCEL'
                display_cancel_button       = space
              IMPORTING
               answer                      = lv_answer
              EXCEPTIONS
                text_not_found              = 1
                OTHERS                      = 2
                      .
            CASE lv_answer.
              WHEN 1.

                e_matnr = zcl_mm_material_tools=>s_get_next_char_4_ztro_matnr( i_matnr = i_matnr_ref ).

              WHEN OTHERS.

                e_matnr = lo_material_tool->zintf_mm_material_master~get_new_matnr_with_dialog( ).

            ENDCASE.

          ENDIF.

        ELSE.

          MESSAGE 'El material de referencia no existe' TYPE 'E'.

        ENDIF.

      ENDIF.



    ENDIF.

  CATCH zcx_mm_exception INTO lo_exceptions.

    MESSAGE lo_exceptions->if_t100_message~t100key-attr1 TYPE 'E'.

  ENDTRY.

ENDFUNCTION.
