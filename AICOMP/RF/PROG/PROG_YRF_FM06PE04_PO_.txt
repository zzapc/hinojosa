*&---------------------------------------------------------------------*
*& Include          ZPO_FM06PE04_PO
*&---------------------------------------------------------------------*

*&--------------------------------------------------------------------*
*&      Form  ADOBE_PRINT_OUTPUT_EMAIL
*&--------------------------------------------------------------------*
form ADOBE_PRINT_OUTPUT_EMAIL using    value(IF_DRUVO)   type DRUVO
                                       value(IF_PREVIEW) type C
                                       value(XFZ)        type C
                              changing EF_RETCO          like SY-SUBRC.

  data: CL_OUTPUT_PO           type ref to CL_PURCHASE_ORDER_OUTPUT,
        CL_OUTPUT_KNT          type ref to CL_PURCHASE_CONTRACT_OUTPUT,
        CL_OUTPUT_SCHEDAGR     type ref to CL_PURCHASE_SCHED_AGR_OUTPUT,
        CL_OUTPUT_RFQ          type ref to CL_PURCHASE_RFQ_OUTPUT,    " object for rfq
        CL_OUTPUT_SCHEDAGR_REL type ref to CL_PURCHASE_SCHED_REL_OUTPUT, "object for agree with release
        FP_DOCPARAMS           type SFPDOCPARAMS,
        FP_OUTPUTPARAMS        type SFPOUTPUTPARAMS,
        FP_FORMOUTPUT          type FPFORMOUTPUT,
        FP_INTERFACETYPE       type FPINTERFACETYPE,
        LF_FORMNAME            type FPNAME,
        L_ERRSTR               type STRING,
        L_EBELN                type EBELN,
        LS_EKKO                type EKKO,
        W_CX_ROOT              type ref to CX_ROOT,
        MESG                   type STRING,
        LS_FUNCTION            type RS38L_FNAM,
        LS_OPTIONS             type SSFCOMPOP,
        LS_CONTROL             type SSFCTRLOP.
* Setting for sending document vai E-mail.
  data:  OS_FORMOUT type FPFORMOUTPUT.
* Setting for sending FAX
  data : LV_CAM_ADDRESS      type ref to CL_CAM_ADDRESS_BCS,
         LV_OUTPUTPARAMS_FAX type SFPOUTPAR,
         LV_VEND_CNTRY       type LFA1-LAND1.

* BCS data
  data:
    SEND_REQUEST   type ref to CL_BCS,
    DOCUMENT       type ref to CL_DOCUMENT_BCS,
    RECIPIENT      type ref to IF_RECIPIENT_BCS,
    BCS_EXCEPTION  type ref to CX_BCS,
    LV_SENT_TO_ALL type OS_BOOLEAN,
    LP_PDF_SIZE    type SO_OBJ_LEN,
    LV_SUBJECT     type SO_OBJ_DES,
    LV_ADD_NR      type ADR6-ADDRNUMBER,
    LV_INUPD       type I.
* Archiving specific data declaration
  data: LV_PDF_SIZE      type I,
        LV_ARCHIVEFORMAT like TOADD-DOC_TYPE,  "PDF or OTF
        LV_DOCUMENTCLASS like TOADV-DOC_TYPE.

*External Send
  data: LVS_COMM_TYPE   type AD_COMM,
        LVS_COMM_VALUES type SZADR_COMM_VALUES,
        LVS_RECIPIENT   type SWOTOBJID,
        LVS_SENDER      type SWOTOBJID,
        INTNAST         type SNAST,
        XDEVICE(10),
        XPROGRAMM       type TDPROGRAM,
        XDIALOG.

*eMail enhancements
  data: LO_BADI_MM_PO_OC_EMAIL type ref to BADI_MM_PO_OC_EMAIL,
        LT_TO_RECIPIENTS       type IF_BADI_MM_PO_OC_EMAIL=>T_RECIPIENTS,
        LT_CC_RECIPIENTS       type IF_BADI_MM_PO_OC_EMAIL=>T_RECIPIENTS,
        LT_BCC_RECIPIENTS      type IF_BADI_MM_PO_OC_EMAIL=>T_RECIPIENTS,
        LT_BODY                type BCSY_TEXT,
        LO_SENDER              type ref to IF_SENDER_BCS,
        LV_SENDER_USER         type SYST_UNAME,
        LV_ATTACHMENT_SUBJECT  type SO_OBJ_DES.

*** Tooling Portal
  data: LF_DMS_DOC_ATTACH type ABAP_BOOL.

* Check if the subroutine is called in update task.
  call method CL_SYSTEM_TRANSACTION_STATE=>GET_IN_UPDATE_TASK
    receiving
      IN_UPDATE_TASK = LV_INUPD.

  if NAST-KAPPL = 'EF'.
* Purchase order

    create object CL_OUTPUT_PO
      type
      CL_PURCHASE_ORDER_OUTPUT
      exporting
        C_MODE     = IF_DRUVO
        ES_NAST    = NAST
        IV_PREVIEW = IF_PREVIEW.

    call method CL_OUTPUT_PO->READ.
* If the medium is external send this address no is used  for fetching email-id
    LV_ADD_NR = CL_OUTPUT_PO->IS_EKKO-ADRNR.
* if the medium is FAX then we need vendor Country details
    LV_VEND_CNTRY = CL_OUTPUT_PO->IS_EKKO-LAND_VEND.

  elseif NAST-KAPPL = 'EL'.
*Sceduling Agreement with release

    create object CL_OUTPUT_SCHEDAGR_REL
      type
      CL_PURCHASE_SCHED_REL_OUTPUT
      exporting
        C_MODE  = IF_DRUVO
        XFZ     = XFZ
        ES_NAST = NAST.

    call method CL_OUTPUT_SCHEDAGR_REL->READ.
* If the medium is external send this address no is used  for fetching email-id
    LV_ADD_NR = CL_OUTPUT_SCHEDAGR_REL->IS_EKKO-ADRNR.
* if the medium is FAX then we need vendor Country details
    LV_VEND_CNTRY = CL_OUTPUT_SCHEDAGR_REL->IS_EKKO-LAND_VEND.

  else.
    move NAST-OBJKY(10) to L_EBELN.

    select single * from EKKO into LS_EKKO
    where EBELN eq L_EBELN.

    if LS_EKKO-BSTYP = 'K'.
* Contract
      create object CL_OUTPUT_KNT
        type
        CL_PURCHASE_CONTRACT_OUTPUT
        exporting
          C_MODE  = IF_DRUVO
          ES_NAST = NAST.

      call method CL_OUTPUT_KNT->READ.
* If the medium is external send this address no is used  for fetching email-id
      LV_ADD_NR = CL_OUTPUT_KNT->IS_EKKO-ADRNR.
* if the medium is FAX then we need vendor Country details
      LV_VEND_CNTRY = CL_OUTPUT_KNT->IS_EKKO-LAND_VEND.

    elseif LS_EKKO-BSTYP = 'A'.
*RFQ
      create object CL_OUTPUT_RFQ
        type
        CL_PURCHASE_RFQ_OUTPUT
        exporting
          C_MODE  = IF_DRUVO
          ES_NAST = NAST.

      call method CL_OUTPUT_RFQ->READ.
* If the medium is external send this address no is used  for fetching email-id
      LV_ADD_NR = CL_OUTPUT_RFQ->IS_EKKO-ADRNR.
* if the medium is FAX then we need vendor Country details
      LV_VEND_CNTRY = CL_OUTPUT_RFQ->IS_EKKO-LAND_VEND.

    else.
* Scheduling Agreement
      create object CL_OUTPUT_SCHEDAGR
        type
        CL_PURCHASE_SCHED_AGR_OUTPUT
        exporting
          C_MODE  = IF_DRUVO
          ES_NAST = NAST.

      call method CL_OUTPUT_SCHEDAGR->READ.
* If the medium is external send this address no is used  for fetching email-id
      LV_ADD_NR = CL_OUTPUT_SCHEDAGR->IS_EKKO-ADRNR.
* if the medium is FAX then we need vendor Country details
      LV_VEND_CNTRY = CL_OUTPUT_SCHEDAGR->IS_EKKO-LAND_VEND.

    endif.
  endif.
* Check for external send
  if NAST-NACHA eq 5.
*   ... use stratagy to get communication type
    call function 'ADDR_GET_NEXT_COMM_TYPE'
      exporting
        STRATEGY           = NAST-TCODE
        ADDRESS_NUMBER     = LV_ADD_NR
      importing
        COMM_TYPE          = LVS_COMM_TYPE
        COMM_VALUES        = LVS_COMM_VALUES
      exceptions
        ADDRESS_NOT_EXIST  = 1
        PERSON_NOT_EXIST   = 2
        NO_COMM_TYPE_FOUND = 3
        INTERNAL_ERROR     = 4
        PARAMETER_ERROR    = 5
        others             = 6.

* convert communication data
    move-corresponding NAST to INTNAST.
    move SY-REPID           to XPROGRAMM.
    call function 'CONVERT_COMM_TYPE_DATA'
      exporting
        PI_COMM_TYPE              = LVS_COMM_TYPE
        PI_COMM_VALUES            = LVS_COMM_VALUES
        PI_COUNTRY                = LV_VEND_CNTRY
        PI_REPID                  = XPROGRAMM
        PI_SNAST                  = INTNAST
      importing
        PE_ITCPO                  = ITCPO
        PE_DEVICE                 = FP_OUTPUTPARAMS-DEVICE
        PE_MAIL_RECIPIENT         = LVS_RECIPIENT
        PE_MAIL_SENDER            = LVS_SENDER
      exceptions
        COMM_TYPE_NOT_SUPPORTED   = 1
        RECIPIENT_CREATION_FAILED = 2
        SENDER_CREATION_FAILED    = 3
        others                    = 4.
    if SY-SUBRC <> 0.   " Note 1477015
      call function 'NAST_PROTOCOL_UPDATE'
        exporting
          MSG_ARBGB = SY-MSGID
          MSG_NR    = SY-MSGNO
          MSG_TY    = SY-MSGTY
          MSG_V1    = SY-MSGV1
          MSG_V2    = SY-MSGV2
          MSG_V3    = SY-MSGV3
          MSG_V4    = SY-MSGV4
        exceptions
          others    = 1.
      EF_RETCO = 1.
      exit.
    endif.

    if FP_OUTPUTPARAMS-DEVICE = 'MAIL'.
      call function 'SX_ADDRESS_TO_DEVTYPE'
        exporting
          RECIPIENT_ID      = LVS_RECIPIENT
          SENDER_ID         = LVS_SENDER
        exceptions
          ERR_INVALID_ROUTE = 1
          ERR_SYSTEM        = 2
          others            = 3.
      if SY-SUBRC <> 0.
        call function 'NAST_PROTOCOL_UPDATE'
          exporting
            MSG_ARBGB = SY-MSGID
            MSG_NR    = SY-MSGNO
            MSG_TY    = SY-MSGTY
            MSG_V1    = SY-MSGV1
            MSG_V2    = SY-MSGV2
            MSG_V3    = SY-MSGV3
            MSG_V4    = SY-MSGV4
          exceptions
            others    = 1.
        EF_RETCO = 1.
        exit.
      endif.
    endif.
  endif.

  LS_FUNCTION = TNAPR-FUNCNAME.

  if not TNAPR-SFORM is initial.
    LF_FORMNAME = TNAPR-SFORM.
    try.
        call function 'FP_FUNCTION_MODULE_NAME'
          exporting
            I_NAME           = LF_FORMNAME
          importing
            E_FUNCNAME       = LS_FUNCTION
            E_INTERFACE_TYPE = FP_INTERFACETYPE.

      catch CX_ROOT into W_CX_ROOT.
        MESG = W_CX_ROOT->GET_TEXT( ).
        message E000 with MESG into MESG.                   "*2287056
        call function 'NAST_PROTOCOL_UPDATE'
          exporting
            MSG_ARBGB = 'ME'
            MSG_NR    = SYST-MSGNO
            MSG_TY    = SYST-MSGTY
            MSG_V1    = SYST-MSGV1
            MSG_V2    = SYST-MSGV2
            MSG_V3    = SYST-MSGV3
            MSG_V4    = SYST-MSGV4
          exceptions
            others    = 1.
        EF_RETCO = 1.
        exit.
    endtry.
  else.
    call function 'NAST_PROTOCOL_UPDATE'
      exporting
        MSG_ARBGB = 'VN'
        MSG_NR    = '027'
        MSG_TY    = 'E'
        MSG_V1    = SYST-MSGV1
        MSG_V2    = SYST-MSGV2
        MSG_V3    = SYST-MSGV3
        MSG_V4    = SYST-MSGV4
      exceptions
        others    = 1.
    EF_RETCO = 1.
    exit.                                                   "v2287056
  endif.
  perform FILL_CONTROL_STRUCTURE using    NAST
                                          IF_PREVIEW
                                 changing FP_OUTPUTPARAMS.

* Do FP_JOB_OPEN only if RET_CODE is 0.
  if NAST-KAPPL = 'EF'.
    EF_RETCO = CL_OUTPUT_PO->RET_CODE.
    if EF_RETCO is not initial.                             " 1468512

      SYST-MSGV1 = LS_EKKO-EBELN.
      SYST-MSGNO = '140'.
    endif.

  elseif NAST-KAPPL = 'EL'.
    EF_RETCO = CL_OUTPUT_SCHEDAGR_REL->RET_CODE.
    if EF_RETCO is not initial.                             " 1468512

      SYST-MSGV1 = LS_EKKO-EBELN.
      SYST-MSGNO = '140'.
    endif.

  else.

    if LS_EKKO-BSTYP = 'K'.
      EF_RETCO = CL_OUTPUT_KNT->RET_CODE.
      if EF_RETCO is not initial.                           " 1468512

        SYST-MSGV1 = LS_EKKO-EBELN.
        SYST-MSGNO = '140'.
      endif.

    elseif LS_EKKO-BSTYP = 'A'.
      EF_RETCO = CL_OUTPUT_RFQ->RET_CODE.
      if EF_RETCO is not initial.                           " 1468512

        SYST-MSGV1 = LS_EKKO-EBELN.
        SYST-MSGNO = '140'.
      endif.

    else .
      EF_RETCO = CL_OUTPUT_SCHEDAGR->RET_CODE.
      if EF_RETCO is not initial.                           " 1468512

        SYST-MSGV1 = LS_EKKO-EBELN.
        SYST-MSGNO = '140'.
      endif.

    endif.
  endif.

  if EF_RETCO is not initial.

    call function 'NAST_PROTOCOL_UPDATE'
      exporting
        MSG_ARBGB = 'ME'
        MSG_NR    = SYST-MSGNO
        MSG_TY    = 'W'
        MSG_V1    = SYST-MSGV1
        MSG_V2    = SYST-MSGV2
        MSG_V3    = SYST-MSGV3
        MSG_V4    = SYST-MSGV4
      exceptions
        others    = 1.
  endif.


  check EF_RETCO eq 0.

* sending Po via Mail or archiving the PDF output
  if IF_PREVIEW is initial "In case of preview message should be displayed only
    and ( NAST-NACHA eq 5 or NAST-TDARMOD = 2 or  NAST-NACHA eq 2 ).
* Setting output parameters only if communication type is fax or email.
    if NAST-NACHA eq 5.
      if ( LVS_COMM_TYPE eq 'FAX' or LVS_COMM_TYPE eq 'INT' ).
        FP_OUTPUTPARAMS-GETPDF = ABAP_TRUE.
        if ITCPO-TDTELENUM eq SPACE.
          FP_OUTPUTPARAMS-NODIALOG = ' '.
        endif.
      endif.
    else.
      FP_OUTPUTPARAMS-GETPDF = ABAP_TRUE.
    endif.
* Specific setting for FAX
    if NAST-NACHA eq 2.
* Setting output parameters
      FP_OUTPUTPARAMS-DEVICE = 'TELEFAX'.
      if NAST-TELFX eq SPACE.
        FP_OUTPUTPARAMS-NODIALOG = ' '.
      endif.
    endif.
  endif.

  if IF_PREVIEW = 'W'.        "web dynpro output
* Setting output parameters
    FP_OUTPUTPARAMS-GETPDF = 'X'.
    FP_OUTPUTPARAMS-DEVICE = ''.
    FP_OUTPUTPARAMS-NOPRINT = ''.                           "1704638
  endif.

  call function 'FP_JOB_OPEN'
    changing
      IE_OUTPUTPARAMS = FP_OUTPUTPARAMS
    exceptions
      CANCEL          = 1
      USAGE_ERROR     = 2
      SYSTEM_ERROR    = 3
      INTERNAL_ERROR  = 4
      others          = 5.
  if SY-SUBRC <> 0.
    call function 'NAST_PROTOCOL_UPDATE'            "^2287056
      exporting
        MSG_ARBGB = SYST-MSGID                      "2410565
        MSG_NR    = SYST-MSGNO
        MSG_TY    = SYST-MSGTY
        MSG_V1    = SYST-MSGV1
        MSG_V2    = SYST-MSGV2
        MSG_V3    = SYST-MSGV3
        MSG_V4    = SYST-MSGV4
      exceptions
        others    = 1.
    EF_RETCO = 1.
    exit.                                                   "v2287056
  endif.
* To handle print and archive scenario
  if NAST-TDARMOD eq 3.
    FP_OUTPUTPARAMS-GETPDF = ABAP_TRUE.
  endif.

  clear: FP_DOCPARAMS.
  FP_DOCPARAMS-LANGU = NAST-SPRAS.
  FP_DOCPARAMS-COUNTRY = NAST-TLAND.
  if NAST-KAPPL = 'EF'.
    call function LS_FUNCTION
      exporting
        /1BCDWB/DOCPARAMS  = FP_DOCPARAMS
        MODE               = CL_OUTPUT_PO->MODE
        HEADER             = CL_OUTPUT_PO->IS_EKKO
        ADDRESSINFO        = CL_OUTPUT_PO->IS_T024E
        HEADERINFO         = CL_OUTPUT_PO->IS_T166U
        CONTACTINFO        = CL_OUTPUT_PO->IS_T024
        HEADERTEXT         = CL_OUTPUT_PO->IT_T166K
        PAYMENTTERMS       = CL_OUTPUT_PO->IT_PAYMENT
        ITEM               = CL_OUTPUT_PO->IT_EKPO
        ITEMLINE           = CL_OUTPUT_PO->IT_ITEM
        SCHEDULE           = CL_OUTPUT_PO->IT_EKET
        CONDITIONS         = CL_OUTPUT_PO->IT_KOMVD
        MANFDETAILS        = CL_OUTPUT_PO->IT_HTNMAT
        CHANGETEXT         = CL_OUTPUT_PO->IT_T166T
        ACCOUNT            = CL_OUTPUT_PO->IT_EKKN
        QMTEXT             = CL_OUTPUT_PO->IT_QMTEXT
        TEXTS              = CL_OUTPUT_PO->IT_T166P
        DOCUMENTS          = CL_OUTPUT_PO->IT_DRAD
        KOMK               = CL_OUTPUT_PO->IS_KOMK
        COMPONENTSHDR      = CL_OUTPUT_PO->IT_COMPLIST_HDR
        COMPONENTS         = CL_OUTPUT_PO->IT_COMPLIST
        INVOICE            = CL_OUTPUT_PO->IT_FPLTDR
        INVOICEPER         = CL_OUTPUT_PO->IT_FPLTDR_PER
        INVOICEVAL         = CL_OUTPUT_PO->IT_FPLTDR_VAL
        APPENDIXTEXT       = CL_OUTPUT_PO->IT_T166A
        SHIPINSTR          = CL_OUTPUT_PO->IT_T027B
        VARIANTS           = CL_OUTPUT_PO->IT_PEKPOV
        CONFIGMAT          = CL_OUTPUT_PO->IT_ECONF_OUT
        SERVICES           = CL_OUTPUT_PO->IT_ML_ESLL
        SRVLINES           = CL_OUTPUT_PO->IT_SRVLINES
        SRVTYP             = CL_OUTPUT_PO->IT_SRVTYP
        SRVHDR             = CL_OUTPUT_PO->IT_SRVHDR
        SRVTIME            = CL_OUTPUT_PO->IT_TIME
        SRVVALUE           = CL_OUTPUT_PO->IT_ESUH
        FORMULAHDR         = CL_OUTPUT_PO->IT_FORMEL
        FORMULABODY        = CL_OUTPUT_PO->IT_VARIABLEN
        SRVCONDITIONS      = CL_OUTPUT_PO->IT_KOMVD_SRV
        SRVTEXT            = CL_OUTPUT_PO->IT_T166P_SRV
        CHNGTXTSRV         = CL_OUTPUT_PO->IT_T166T_SRV
        MAINTHDR           = CL_OUTPUT_PO->IT_MMPT
        MAINTPOS           = CL_OUTPUT_PO->IT_MPOS
        SERIALNUMBER       = CL_OUTPUT_PO->IT_OBJK
        CONDITIONS_HDR     = CL_OUTPUT_PO->IT_KOMVD_HDR
      importing
        /1BCDWB/FORMOUTPUT = OS_FORMOUT
      exceptions
        USAGE_ERROR        = 1
        SYSTEM_ERROR       = 2
        INTERNAL_ERROR     = 3
        others             = 4.
    if SY-SUBRC <> 0.
      call function 'NAST_PROTOCOL_UPDATE'            "^2287056
        exporting
          MSG_ARBGB = SYST-MSGID                      "2410565
          MSG_NR    = SYST-MSGNO
          MSG_TY    = SYST-MSGTY
          MSG_V1    = SYST-MSGV1
          MSG_V2    = SYST-MSGV2
          MSG_V3    = SYST-MSGV3
          MSG_V4    = SYST-MSGV4
        exceptions
          others    = 1.
      EF_RETCO = 1.
      exit.                                                 "v2287056
    endif.

  elseif NAST-KAPPL = 'EL'.

    call function LS_FUNCTION
      exporting
        /1BCDWB/DOCPARAMS  = FP_DOCPARAMS
        MODE               = CL_OUTPUT_SCHEDAGR_REL->MODE
        HEADER             = CL_OUTPUT_SCHEDAGR_REL->IS_EKKO
        ADDRESSINFO        = CL_OUTPUT_SCHEDAGR_REL->IS_T024E
        HEADERINFO         = CL_OUTPUT_SCHEDAGR_REL->IS_T166U
        CONTACTINFO        = CL_OUTPUT_SCHEDAGR_REL->IS_T024
        HEADERTEXT         = CL_OUTPUT_SCHEDAGR_REL->IT_T166K
        ITEM               = CL_OUTPUT_SCHEDAGR_REL->IT_EKPO
        SCHEDULE           = CL_OUTPUT_SCHEDAGR_REL->IT_EKET
        EKEK               = CL_OUTPUT_SCHEDAGR_REL->IT_EKEK
        CHANGETEXT         = CL_OUTPUT_SCHEDAGR_REL->IT_T166T
        SHIPINSTR          = CL_OUTPUT_SCHEDAGR_REL->IT_T027B
        COMPONENTSHDR      = CL_OUTPUT_SCHEDAGR_REL->IT_COMPLIST_HDR
        COMPONENTS         = CL_OUTPUT_SCHEDAGR_REL->IT_COMPLIST
        XFZ                = CL_OUTPUT_SCHEDAGR_REL->LV_XFZ
      importing
        /1BCDWB/FORMOUTPUT = OS_FORMOUT
      exceptions
        USAGE_ERROR        = 1
        SYSTEM_ERROR       = 2
        INTERNAL_ERROR     = 3
        others             = 4.
    if SY-SUBRC <> 0.
      call function 'NAST_PROTOCOL_UPDATE'            "^2287056
        exporting
          MSG_ARBGB = SYST-MSGID                      "2410565
          MSG_NR    = SYST-MSGNO
          MSG_TY    = SYST-MSGTY
          MSG_V1    = SYST-MSGV1
          MSG_V2    = SYST-MSGV2
          MSG_V3    = SYST-MSGV3
          MSG_V4    = SYST-MSGV4
        exceptions
          others    = 1.
      EF_RETCO = 1.
      exit.                                                 "v2287056
    endif.

  else.
    if LS_EKKO-BSTYP = 'K'.

      call function LS_FUNCTION
        exporting
          /1BCDWB/DOCPARAMS  = FP_DOCPARAMS
          MODE               = CL_OUTPUT_KNT->MODE
          HEADER             = CL_OUTPUT_KNT->IS_EKKO
          ADDRESSINFO        = CL_OUTPUT_KNT->IS_T024E
          HEADERINFO         = CL_OUTPUT_KNT->IS_T166U
          CONTACTINFO        = CL_OUTPUT_KNT->IS_T024
          HEADERTEXT         = CL_OUTPUT_KNT->IT_T166K
          PAYMENTTERMS       = CL_OUTPUT_KNT->IT_PAYMENT
          ITEM               = CL_OUTPUT_KNT->IT_EKPO
          ITEMLINE           = CL_OUTPUT_KNT->IT_ITEM
          SCHEDULE           = CL_OUTPUT_KNT->IT_EKET
          CONTCONDITIONS     = CL_OUTPUT_KNT->IT_EKOMD
          QUANCONDITIONS     = CL_OUTPUT_KNT->IT_EKOMD_QUANT
          VALUECONDITIONS    = CL_OUTPUT_KNT->IT_EKOMD_VALUE
          LINECONDITIONS     = CL_OUTPUT_KNT->IT_EKOMD_COND
          MANFDETAILS        = CL_OUTPUT_KNT->IT_HTNMAT
          CHANGETEXT         = CL_OUTPUT_KNT->IT_T166T
          ACCOUNT            = CL_OUTPUT_KNT->IT_EKKN
          QMTEXT             = CL_OUTPUT_KNT->IT_QMTEXT
          TEXTS              = CL_OUTPUT_KNT->IT_T166P
          DOCUMENTS          = CL_OUTPUT_KNT->IT_DRAD
          KOMK               = CL_OUTPUT_KNT->IS_KOMK
          INVOICE            = CL_OUTPUT_KNT->IT_FPLTDR
          INVOICEPER         = CL_OUTPUT_KNT->IT_FPLTDR_PER
          INVOICEVAL         = CL_OUTPUT_KNT->IT_FPLTDR_VAL
          APPENDIXTEXT       = CL_OUTPUT_KNT->IT_T166A
          SHIPINSTR          = CL_OUTPUT_KNT->IT_T027B
          VARIANTS           = CL_OUTPUT_KNT->IT_PEKPOV
          CONFIGMAT          = CL_OUTPUT_KNT->IT_ECONF_OUT
          SERVICES           = CL_OUTPUT_KNT->IT_ML_ESLL
          SRVLINES           = CL_OUTPUT_KNT->IT_SRVLINES
          SRVTYP             = CL_OUTPUT_KNT->IT_SRVTYP
          SRVHDR             = CL_OUTPUT_KNT->IT_SRVHDR
          SRVTIME            = CL_OUTPUT_KNT->IT_TIME
          SRVVALUE           = CL_OUTPUT_KNT->IT_ESUH
          FORMULAHDR         = CL_OUTPUT_KNT->IT_FORMEL
          FORMULABODY        = CL_OUTPUT_KNT->IT_VARIABLEN
          SRVCONDITIONS      = CL_OUTPUT_KNT->IT_KOMVD_SRV
          SRVTEXT            = CL_OUTPUT_KNT->IT_T166P_SRV
          CHNGTXTSRV         = CL_OUTPUT_KNT->IT_T166T_SRV
          MAINTHDR           = CL_OUTPUT_KNT->IT_MMPT
          MAINTPOS           = CL_OUTPUT_KNT->IT_MPOS
        importing
          /1BCDWB/FORMOUTPUT = OS_FORMOUT
        exceptions
          USAGE_ERROR        = 1
          SYSTEM_ERROR       = 2
          INTERNAL_ERROR     = 3
          others             = 4.
      if SY-SUBRC <> 0.
        call function 'NAST_PROTOCOL_UPDATE'            "^2287056
          exporting
            MSG_ARBGB = SYST-MSGID                      "2410565
            MSG_NR    = SYST-MSGNO
            MSG_TY    = SYST-MSGTY
            MSG_V1    = SYST-MSGV1
            MSG_V2    = SYST-MSGV2
            MSG_V3    = SYST-MSGV3
            MSG_V4    = SYST-MSGV4
          exceptions
            others    = 1.
        EF_RETCO = 1.
        exit.                                               "v2287056
      endif.

    elseif LS_EKKO-BSTYP = 'A'.                    "rfq

      call function LS_FUNCTION
        exporting
          /1BCDWB/DOCPARAMS  = FP_DOCPARAMS
          MODE               = CL_OUTPUT_RFQ->MODE
          HEADER             = CL_OUTPUT_RFQ->IS_EKKO
          ADDRESSINFO        = CL_OUTPUT_RFQ->IS_T024E
          HEADERINFO         = CL_OUTPUT_RFQ->IS_T166U
          CONTACTINFO        = CL_OUTPUT_RFQ->IS_T024
          HEADERTEXT         = CL_OUTPUT_RFQ->IT_T166K
          PAYMENTTERMS       = CL_OUTPUT_RFQ->IT_PAYMENT
          ITEM               = CL_OUTPUT_RFQ->IT_EKPO
          ITEMLINE           = CL_OUTPUT_RFQ->IT_ITEM
          SCHEDULE           = CL_OUTPUT_RFQ->IT_EKET
          MANFDETAILS        = CL_OUTPUT_RFQ->IT_HTNMAT
          CHANGETEXT         = CL_OUTPUT_RFQ->IT_T166T
          QMTEXT             = CL_OUTPUT_RFQ->IT_QMTEXT
          TEXTS              = CL_OUTPUT_RFQ->IT_T166P
          DOCUMENTS          = CL_OUTPUT_RFQ->IT_DRAD
          KOMK               = CL_OUTPUT_RFQ->IS_KOMK
          INVOICE            = CL_OUTPUT_RFQ->IT_FPLTDR
          INVOICEPER         = CL_OUTPUT_RFQ->IT_FPLTDR_PER
          INVOICEVAL         = CL_OUTPUT_RFQ->IT_FPLTDR_VAL
          APPENDIXTEXT       = CL_OUTPUT_RFQ->IT_T166A
          SHIPINSTR          = CL_OUTPUT_RFQ->IT_T027B
          VARIANTS           = CL_OUTPUT_RFQ->IT_PEKPOV
          CONFIGMAT          = CL_OUTPUT_RFQ->IT_ECONF_OUT
          SERVICES           = CL_OUTPUT_RFQ->IT_ML_ESLL
          SRVLINES           = CL_OUTPUT_RFQ->IT_SRVLINES
          SRVTYP             = CL_OUTPUT_RFQ->IT_SRVTYP
          SRVHDR             = CL_OUTPUT_RFQ->IT_SRVHDR
          SRVTIME            = CL_OUTPUT_RFQ->IT_TIME
          SRVVALUE           = CL_OUTPUT_RFQ->IT_ESUH
          FORMULAHDR         = CL_OUTPUT_RFQ->IT_FORMEL
          FORMULABODY        = CL_OUTPUT_RFQ->IT_VARIABLEN
          SRVTEXT            = CL_OUTPUT_RFQ->IT_T166P_SRV
          CHNGTXTSRV         = CL_OUTPUT_RFQ->IT_T166T_SRV
          MAINTHDR           = CL_OUTPUT_RFQ->IT_MMPT
          MAINTPOS           = CL_OUTPUT_RFQ->IT_MPOS
        importing
          /1BCDWB/FORMOUTPUT = OS_FORMOUT
        exceptions
          USAGE_ERROR        = 1
          SYSTEM_ERROR       = 2
          INTERNAL_ERROR     = 3
          others             = 4.
      if SY-SUBRC <> 0.
        call function 'NAST_PROTOCOL_UPDATE'            "^2287056
          exporting
            MSG_ARBGB = SYST-MSGID                      "2410565
            MSG_NR    = SYST-MSGNO
            MSG_TY    = SYST-MSGTY
            MSG_V1    = SYST-MSGV1
            MSG_V2    = SYST-MSGV2
            MSG_V3    = SYST-MSGV3
            MSG_V4    = SYST-MSGV4
          exceptions
            others    = 1.
        EF_RETCO = 1.
        exit.                                               "v2287056
      endif.

    else.

      call function LS_FUNCTION
        exporting
          /1BCDWB/DOCPARAMS  = FP_DOCPARAMS
          MODE               = CL_OUTPUT_SCHEDAGR->MODE
          HEADER             = CL_OUTPUT_SCHEDAGR->IS_EKKO
          ADDRESSINFO        = CL_OUTPUT_SCHEDAGR->IS_T024E
          HEADERINFO         = CL_OUTPUT_SCHEDAGR->IS_T166U
          CONTACTINFO        = CL_OUTPUT_SCHEDAGR->IS_T024
          HEADERTEXT         = CL_OUTPUT_SCHEDAGR->IT_T166K
          PAYMENTTERMS       = CL_OUTPUT_SCHEDAGR->IT_PAYMENT
          ITEM               = CL_OUTPUT_SCHEDAGR->IT_EKPO
          ITEMLINE           = CL_OUTPUT_SCHEDAGR->IT_ITEM
          SCHEDULE           = CL_OUTPUT_SCHEDAGR->IT_EKET
          CONDITIONS         = CL_OUTPUT_SCHEDAGR->IT_KOMVD
          CONTCONDITIONS     = CL_OUTPUT_SCHEDAGR->IT_EKOMD
          QUANCONDITIONS     = CL_OUTPUT_SCHEDAGR->IT_EKOMD_QUANT
          VALUECONDITIONS    = CL_OUTPUT_SCHEDAGR->IT_EKOMD_VALUE
          LINECONDITIONS     = CL_OUTPUT_SCHEDAGR->IT_EKOMD_COND
          MANFDETAILS        = CL_OUTPUT_SCHEDAGR->IT_HTNMAT
          CHANGETEXT         = CL_OUTPUT_SCHEDAGR->IT_T166T
          ACCOUNT            = CL_OUTPUT_SCHEDAGR->IT_EKKN
          QMTEXT             = CL_OUTPUT_SCHEDAGR->IT_QMTEXT
          TEXTS              = CL_OUTPUT_SCHEDAGR->IT_T166P
          DOCUMENTS          = CL_OUTPUT_SCHEDAGR->IT_DRAD
          KOMK               = CL_OUTPUT_SCHEDAGR->IS_KOMK
          INVOICE            = CL_OUTPUT_SCHEDAGR->IT_FPLTDR
          INVOICEPER         = CL_OUTPUT_SCHEDAGR->IT_FPLTDR_PER
          INVOICEVAL         = CL_OUTPUT_SCHEDAGR->IT_FPLTDR_VAL
          APPENDIXTEXT       = CL_OUTPUT_SCHEDAGR->IT_T166A
          SHIPINSTR          = CL_OUTPUT_SCHEDAGR->IT_T027B
          VARIANTS           = CL_OUTPUT_SCHEDAGR->IT_PEKPOV
          CONFIGMAT          = CL_OUTPUT_SCHEDAGR->IT_ECONF_OUT
          SERVICES           = CL_OUTPUT_SCHEDAGR->IT_ML_ESLL
          SRVLINES           = CL_OUTPUT_SCHEDAGR->IT_SRVLINES
          SRVTYP             = CL_OUTPUT_SCHEDAGR->IT_SRVTYP
          SRVHDR             = CL_OUTPUT_SCHEDAGR->IT_SRVHDR
          SRVTIME            = CL_OUTPUT_SCHEDAGR->IT_TIME
          SRVVALUE           = CL_OUTPUT_SCHEDAGR->IT_ESUH
          FORMULAHDR         = CL_OUTPUT_SCHEDAGR->IT_FORMEL
          FORMULABODY        = CL_OUTPUT_SCHEDAGR->IT_VARIABLEN
          SRVCONDITIONS      = CL_OUTPUT_SCHEDAGR->IT_KOMVD_SRV
          SRVTEXT            = CL_OUTPUT_SCHEDAGR->IT_T166P_SRV
          CHNGTXTSRV         = CL_OUTPUT_SCHEDAGR->IT_T166T_SRV
          MAINTHDR           = CL_OUTPUT_SCHEDAGR->IT_MMPT
          MAINTPOS           = CL_OUTPUT_SCHEDAGR->IT_MPOS
        importing
          /1BCDWB/FORMOUTPUT = OS_FORMOUT
        exceptions
          USAGE_ERROR        = 1
          SYSTEM_ERROR       = 2
          INTERNAL_ERROR     = 3
          others             = 4.
      if SY-SUBRC <> 0.
        call function 'NAST_PROTOCOL_UPDATE'            "^2287056
          exporting
            MSG_ARBGB = SYST-MSGID                      "2410565
            MSG_NR    = SYST-MSGNO
            MSG_TY    = SYST-MSGTY
            MSG_V1    = SYST-MSGV1
            MSG_V2    = SYST-MSGV2
            MSG_V3    = SYST-MSGV3
            MSG_V4    = SYST-MSGV4
          exceptions
            others    = 1.
        EF_RETCO = 1.
        exit.                                               "v2287056
      endif.
    endif.
  endif.

*o/p contrl badi enhancement
  try.
      get badi LO_BADI_MM_PO_OC_EMAIL.

      if LO_BADI_MM_PO_OC_EMAIL is bound.

      endif.
*Catch not implemented exception or multiple implementation
    catch CX_BADI_NOT_IMPLEMENTED.
      clear LO_BADI_MM_PO_OC_EMAIL.
  endtry.

*sending Document out via mail or FAX
  if IF_PREVIEW is initial  "In case of preview message should be displayed only
      and ( NAST-NACHA eq 5 or NAST-NACHA eq 2 ) and OS_FORMOUT is not initial
      and NAST-TDARMOD ne 2.                                "2243519

* Set FAX specific setting
    if NAST-NACHA eq 5.
      LV_OUTPUTPARAMS_FAX-TELENUM = ITCPO-TDTELENUM.
      LV_OUTPUTPARAMS_FAX-TELELAND = ITCPO-TDTELELAND.
    else.
      if NAST-TELFX ne SPACE.
        LV_OUTPUTPARAMS_FAX-TELENUM  = NAST-TELFX.
        if NAST-TLAND is initial.
          LV_OUTPUTPARAMS_FAX-TELELAND = LV_VEND_CNTRY.
        else.
          LV_OUTPUTPARAMS_FAX-TELELAND = NAST-TLAND.
        endif.
      endif.
    endif.
    if LVS_COMM_TYPE eq 'FAX' or LVS_COMM_TYPE eq 'INT' or NAST-NACHA eq 2.

      LV_SUBJECT = LV_ATTACHMENT_SUBJECT = FP_OUTPUTPARAMS-COVTITLE.
* call eMail change Badi
      refresh: LT_TO_RECIPIENTS, LT_CC_RECIPIENTS, LT_BCC_RECIPIENTS.
      append LVS_COMM_VALUES-ADSMTP-SMTP_ADDR to LT_TO_RECIPIENTS.
      LV_SENDER_USER = SY-UNAME.
      if LO_BADI_MM_PO_OC_EMAIL is bound.
* change eMail sender
        call badi LO_BADI_MM_PO_OC_EMAIL->CHANGE_SENDER
          exporting
            IM_NAST_ENTRY  = NAST
          changing
            CH_SENDER_NAME = LV_SENDER_USER.
* change to, cc and bcc list of eMail
        call badi LO_BADI_MM_PO_OC_EMAIL->CHANGE_RECIPIENTS
          exporting
            IM_NAST_ENTRY          = NAST
          changing
            CHT_TO_RECIPIENT_LIST  = LT_TO_RECIPIENTS
            CHT_CC_RECIPIENT_LIST  = LT_CC_RECIPIENTS
            CHT_BCC_RECIPIENT_LIST = LT_BCC_RECIPIENTS.
* change eMail subject
        call badi LO_BADI_MM_PO_OC_EMAIL->CHANGE_SUBJECT
          exporting
            IM_NAST_ENTRY = NAST
          changing
            CHV_SUBJECT   = LV_SUBJECT.
* change eMail body
        call badi LO_BADI_MM_PO_OC_EMAIL->CHANGE_BODY
          exporting
            IM_NAST_ENTRY = NAST
          changing
            CHT_BODY      = LT_BODY.

      endif.
* ------------ Call BCS interface ----------------------------------
      try.
*   ---------- create persistent send request ----------------------
          SEND_REQUEST = CL_BCS=>CREATE_PERSISTENT( ).

*   ---------- add document ----------------------------------------
*   get PDF xstring and convert it to BCS format
          LP_PDF_SIZE = XSTRLEN( OS_FORMOUT-PDF ).

          perform XSTRING_TO_SOLIX
                      using
                         OS_FORMOUT-PDF.

***       Tooling Portal - DMS Document Sending - Get Attachment Flag
          perform GET_DMS_DOC_ATTACH using    CL_OUTPUT_PO->IS_EKKO-EBELN
                                     changing LF_DMS_DOC_ATTACH.

* if BAdI is implementet create eMail with body and attach document
          if LO_BADI_MM_PO_OC_EMAIL is bound or
             LF_DMS_DOC_ATTACH      eq ABAP_TRUE.
            call method CL_DOCUMENT_BCS=>CREATE_DOCUMENT
              exporting
                I_TYPE    = 'TXT'
                I_SUBJECT = LV_SUBJECT
*               i_language = lv_language
                I_TEXT    = LT_BODY
              receiving
                RESULT    = DOCUMENT.
*--- Add the document as an attachment
            call method DOCUMENT->ADD_ATTACHMENT
              exporting
                I_ATTACHMENT_TYPE    = 'PDF'
                I_ATTACHMENT_SIZE    = LP_PDF_SIZE
                I_ATTACHMENT_SUBJECT = LV_ATTACHMENT_SUBJECT
*               i_attachment_language = lv_language
                I_ATT_CONTENT_HEX    = PDF_CONTENT.

***         Add DMS Documents as Attachments
            if LF_DMS_DOC_ATTACH eq ABAP_TRUE.
              perform ATTACH_DMS_DOCS using    CL_OUTPUT_PO
                                      changing DOCUMENT.
            endif.

          else.
            LV_SUBJECT = FP_OUTPUTPARAMS-COVTITLE.
            DOCUMENT = CL_DOCUMENT_BCS=>CREATE_DOCUMENT(
                  I_TYPE    = 'PDF' " cf. RAW, DOC
                  I_HEX     = PDF_CONTENT
                  I_LENGTH  = LP_PDF_SIZE
                  I_SUBJECT = LV_SUBJECT ).                 "#EC NOTEXT
          endif.

*   add document to send request
          SEND_REQUEST->SET_DOCUMENT( DOCUMENT ).

          LO_SENDER = CL_SAPUSER_BCS=>CREATE( LV_SENDER_USER ) .

          call method SEND_REQUEST->SET_SENDER
            exporting
              I_SENDER = LO_SENDER.

*     --------- set sender -------------------------------------------
*     note: this is necessary only if you want to set the sender
*           different from actual user (SY-UNAME). Otherwise sender is
*           set automatically with actual user.
*
*      sender = cl_sapuser_bcs=>create( sy-uname ).
*      CALL METHOD send_request->set_sender
*        EXPORTING i_sender = sender.
*   ---------- add recipient (e-mail address) ----------------------

          case NAST-NACHA.
            when 5.
              if LVS_COMM_TYPE eq 'INT'.
*           add 'to' recipient (e-mail address)
                if LO_BADI_MM_PO_OC_EMAIL is bound.
                  loop at LT_TO_RECIPIENTS into LVS_COMM_VALUES-ADSMTP-SMTP_ADDR. "2303437
                    RECIPIENT = RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS(
                    I_ADDRESS_STRING = LVS_COMM_VALUES-ADSMTP-SMTP_ADDR ).
*   add recipient to send request
                    SEND_REQUEST->ADD_RECIPIENT( I_RECIPIENT = RECIPIENT ).
                  endloop.

*           add 'cc' recipient (e-mail address)
                  loop at LT_CC_RECIPIENTS into LVS_COMM_VALUES-ADSMTP-SMTP_ADDR. "2303437
                    RECIPIENT = RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS(
                    I_ADDRESS_STRING = LVS_COMM_VALUES-ADSMTP-SMTP_ADDR ).
*   add recipient to send request
                    call method SEND_REQUEST->ADD_RECIPIENT
                      exporting
                        I_RECIPIENT = RECIPIENT
                        I_COPY      = ABAP_TRUE.

                  endloop.
*           add 'bcc' recipient (e-mail address)
                  loop at LT_BCC_RECIPIENTS into LVS_COMM_VALUES-ADSMTP-SMTP_ADDR. "2303437
                    RECIPIENT = RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS(
                    I_ADDRESS_STRING = LVS_COMM_VALUES-ADSMTP-SMTP_ADDR ).
*   add recipient to send request
                    call method SEND_REQUEST->ADD_RECIPIENT
                      exporting
                        I_RECIPIENT  = RECIPIENT
                        I_BLIND_COPY = ABAP_TRUE.

                  endloop.
                else.
*   add recipient to send request
                  RECIPIENT = RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS(
                  I_ADDRESS_STRING = LVS_COMM_VALUES-ADSMTP-SMTP_ADDR ). "2303437
                  SEND_REQUEST->ADD_RECIPIENT( I_RECIPIENT = RECIPIENT ).
                endif.
                if not NAST-FORFB is initial and not NAST-PRIFB is initial. "1918225
                  call method SEND_REQUEST->SET_STATUS_ATTRIBUTES
                    exporting
                      I_REQUESTED_STATUS = NAST-FORFB
                      I_STATUS_MAIL      = NAST-PRIFB.
                endif.
              else.
*           add recipient (fax address)
                RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_FAX_ADDRESS(
                                 I_COUNTRY = LV_OUTPUTPARAMS_FAX-TELELAND
                                 I_NUMBER  = LV_OUTPUTPARAMS_FAX-TELENUM ).
              endif.

            when 2.
*           add recipient (fax address)
              RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_FAX_ADDRESS(
                               I_COUNTRY = LV_OUTPUTPARAMS_FAX-TELELAND
                               I_NUMBER  = LV_OUTPUTPARAMS_FAX-TELENUM ).
          endcase.

*   add recipient to send request
          SEND_REQUEST->ADD_RECIPIENT( I_RECIPIENT = RECIPIENT ).

*   ---------- send document ---------------------------------------
          LV_SENT_TO_ALL = SEND_REQUEST->SEND(
              I_WITH_ERROR_SCREEN = 'X' ).
* Issue message and COMMINT only if the subroutine is not called in update task
          if LV_INUPD = 0.
            if LV_SENT_TO_ALL = 'X'.
              message S022(SO).                             "1945749
            endif.

*   ---------- explicit 'commit work' is mandatory! ----------------
            commit work.
          endif.
* ------------------------------------------------------------------
* *            exception handling
* ------------------------------------------------------------------
        catch CX_BCS into BCS_EXCEPTION.
          message E451(SO) with LV_OUTPUTPARAMS_FAX-TELENUM into MESG.
*     Sending fax/mail failed
          call function 'NAST_PROTOCOL_UPDATE'            "^2287056
            exporting
              MSG_ARBGB = SYST-MSGID                      "2410565
              MSG_NR    = SYST-MSGNO
              MSG_TY    = SYST-MSGTY
              MSG_V1    = SYST-MSGV1
              MSG_V2    = SYST-MSGV2
              MSG_V3    = SYST-MSGV3
              MSG_V4    = SYST-MSGV4
            exceptions
              others    = 1.
          EF_RETCO = 1.
          exit.                                             "v2287056
      endtry.
    endif.
  endif.

* Arching for adobe forms
  if IF_PREVIEW is initial  "In case of preview message should be displayed only
      and ( NAST-TDARMOD = 2 or  NAST-TDARMOD = 3 ) and OS_FORMOUT is not initial. "1604020

* Get the PDF length
    LP_PDF_SIZE = XSTRLEN( OS_FORMOUT-PDF ).

* defaults for archive
    if TOA_DARA-FUNCTION = SPACE.
      TOA_DARA-FUNCTION = 'DARA'.
    endif.
*     which format to be used for archiving: OTF or PDF?
    call function 'ARCHIV_GET_PRINTFORMAT'
      exporting
        APPLICATION = 'PDF'
      importing
        PRINTFORMAT = LV_ARCHIVEFORMAT.

    if LV_ARCHIVEFORMAT eq 'PDF'.
      LV_DOCUMENTCLASS = 'PDF'.

      call function 'ARCHIV_CREATE_OUTGOINGDOCUMENT'
        exporting
          ARC_P                    = ARC_PARAMS
          ARC_I                    = TOA_DARA
          PDFLEN                   = LV_PDF_SIZE
          DOCUMENTCLASS            = LV_DOCUMENTCLASS                "Since the output is in PDF document class is also PDF
          DOCUMENT                 = OS_FORMOUT-PDF
        exceptions
          ERROR_ARCHIV             = 1
          ERROR_COMMUNICATIONTABLE = 2
          ERROR_CONNECTIONTABLE    = 3
          ERROR_KERNEL             = 4
          ERROR_PARAMETER          = 5
          others                   = 6.
      case SY-SUBRC.
        when 0. " o.k.
        when 1. raise ERROR_ARCHIV.
        when 2. raise ERROR_COMMUNICATIONTABLE.
        when 3. raise ERROR_CONNECTIONTABLE.
        when 4. raise ERROR_KERNEL.
        when 5. raise ERROR_PARAMETER.
        when 6. raise ERROR_ARCHIV. "?
      endcase.

    else.
      " Other than PDF format raise error.
      message E789(PO) with LV_ARCHIVEFORMAT into MESG.
      call function 'NAST_PROTOCOL_UPDATE'            "^2287056
        exporting
          MSG_ARBGB = SYST-MSGID                      "2410565
          MSG_NR    = SYST-MSGNO
          MSG_TY    = SYST-MSGTY
          MSG_V1    = SYST-MSGV1
          MSG_V2    = SYST-MSGV2
          MSG_V3    = SYST-MSGV3
          MSG_V4    = SYST-MSGV4
        exceptions
          others    = 1.
      EF_RETCO = 1.
      exit.                                                 "v2287056
    endif.
  endif.


  call function 'FP_GET_LAST_ADS_ERRSTR'
    importing
      E_ADSERRSTR = L_ERRSTR.
*  exceptions
*    usage_error    = 1
*    system_error   = 2
*    others         = 4.
*  IF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.
* To handle print and archive scenario
  if NAST-TDARMOD eq 3.
    FP_OUTPUTPARAMS-GETPDF = ABAP_FALSE.
  endif.

  call function 'FP_JOB_CLOSE'
*           IMPORTING
*             E_RESULT             =
    exceptions
      USAGE_ERROR    = 1
      SYSTEM_ERROR   = 2
      INTERNAL_ERROR = 3
      others         = 4.
  if SY-SUBRC <> 0.
    call function 'NAST_PROTOCOL_UPDATE'            "^2287056
      exporting
        MSG_ARBGB = SYST-MSGID                      "2410565
        MSG_NR    = SYST-MSGNO
        MSG_TY    = SYST-MSGTY
        MSG_V1    = SYST-MSGV1
        MSG_V2    = SYST-MSGV2
        MSG_V3    = SYST-MSGV3
        MSG_V4    = SYST-MSGV4
      exceptions
        others    = 1.
    EF_RETCO = 1.
    exit.                                                   "v2287056
  endif.

  if NAST-KAPPL  eq 'EL' and NAST-SNDEX is initial and IF_PREVIEW is initial. "^1536566
* missing environment for limiting update print dependend data
    if SY-UCOMM ne '9ANZ' and SY-UCOMM ne '9DPR'.
      perform UPDATE_RELEASE(SAPLMEDRUCK) tables CL_OUTPUT_SCHEDAGR_REL->IT_EKPO
                                                 CL_OUTPUT_SCHEDAGR_REL->IT_EKEK
                                                 CL_OUTPUT_SCHEDAGR_REL->IT_EKEH
                             using  IF_DRUVO NAST-KSCHL.
    endif.
  endif.                                                    "v1536566

  if IF_PREVIEW = 'W'. "web dynpro output
    export LV_PDF_FILE = OS_FORMOUT-PDF to memory id 'PDF_FILE'.
  endif.

endform.                    " ADOBE_PRINT_OUTPUT_EMAIL

*&---------------------------------------------------------------------*
*& Form GET_DMS_DOC_ATTACH
*&---------------------------------------------------------------------*
form GET_DMS_DOC_ATTACH using    UF_EBELN          type EBELN
                        changing CF_DMS_DOC_ATTACH type ABAP_BOOL.

  data: LF_MEMORY_ID type CHAR13,
        LF_FLAG      type CHAR1.

*** Import from Memory
  concatenate 'PO_' UF_EBELN into LF_MEMORY_ID.
  import SKIP_DMS_DOC_ATTACH to   LF_FLAG from memory id LF_MEMORY_ID.

  if LF_FLAG is initial.
    move ABAP_TRUE to CF_DMS_DOC_ATTACH.
  endif.

endform.

*&---------------------------------------------------------------------*
*& Form ATTACH_DMS_DOCS
*&---------------------------------------------------------------------*
form ATTACH_DMS_DOCS using    UR_OUTPUT_PO type ref to CL_PURCHASE_ORDER_OUTPUT
                     changing CR_DOCUMENT  type ref to CL_DOCUMENT_BCS.

  data: LF_OBJKY type OBJKY,
        LF_DOKOB type DOKOB,
        LF_ATTTY type SO_OBJ_TP.
  data: LT_ATT_PLIST_FM type YRF_MAIL_TT_SOPCKLSTI1,
        LT_ATT_MAILHEX  type SOLIX_TAB,
        LT_MAILHEX      type SOLIX_TAB.

  field-symbols: <S_EKPO>  type MMPUR_PRINT_EKPO,
                 <S_PLIST> type SOPCKLSTI1.

  move YCL_RF_TPM_BL_TP=>C_OBJ_MARA to LF_DOKOB.

*** For All Items
  loop at UR_OUTPUT_PO->IT_EKPO assigning <S_EKPO>.

    move <S_EKPO>-MATNR to LF_OBJKY.

*** Build Attachement
    call function 'YRF_MAIL_SERVICES_CREATE_ATCH'
      exporting
        IF_WERKS   = <S_EKPO>-WERKS
        IF_DOKOB   = LF_DOKOB
        IF_OBJKY   = LF_OBJKY
      changing
        CT_PLIST   = LT_ATT_PLIST_FM
        CT_CONTENT = LT_ATT_MAILHEX.

*** ATTACH THE FILE, THE ATTACHMENT TYPE SHOULD BE BIN TO ACCEPT ANY KIND OF ATTACHMENT, INCLUDING VIDEOS, AUDIO FILES ETC...
    loop at LT_ATT_PLIST_FM assigning <S_PLIST>.

***   Get HEX Content
      perform GET_MAILHEX_FROM_PLIST using    <S_PLIST>
                                              LT_ATT_MAILHEX
                                     changing LT_MAILHEX.
      if LT_MAILHEX is not initial.

***     Set File Type
        if <S_PLIST>-DOC_TYPE is not initial.
          move <S_PLIST>-DOC_TYPE to LF_ATTTY.
        else.
          move YCL_RF_MAIL_SERVICES=>C_ATTTY_BIN to LF_ATTTY.
        endif.

***     Add Attachment
        CR_DOCUMENT->ADD_ATTACHMENT( I_ATTACHMENT_TYPE    = LF_ATTTY
                                     I_ATTACHMENT_SUBJECT = <S_PLIST>-OBJ_DESCR
                                     I_ATT_CONTENT_HEX    = LT_MAILHEX ).

        clear:   LF_ATTTY.
        refresh: LT_MAILHEX.

      endif.

    endloop.

    clear:   LF_OBJKY.
    refresh: LT_ATT_PLIST_FM,
             LT_ATT_MAILHEX.

  endloop.

endform.

*&---------------------------------------------------------------------*
*& Form GET_MAILHEX_FROM_PLIST
*&---------------------------------------------------------------------*
form GET_MAILHEX_FROM_PLIST using    US_PLIST   type SOPCKLSTI1
                                     UT_CONTENT type SOLIX_TAB
                            changing CT_MAILHEX type SOLIX_TAB.

  data: LF_START type SYTABIX,
        LF_END   type SYTABIX.

*** Set start end end
  if US_PLIST-HEAD_NUM > 0.
    if US_PLIST-HEAD_START = 0.
      LF_START = 1.
    else.
      LF_START = US_PLIST-HEAD_START.
    endif.
    LF_END   = LF_START + US_PLIST-HEAD_NUM - 1.
  endif.

*** Get data
  if US_PLIST-BODY_NUM > 0.
    if US_PLIST-BODY_START = 0.
      LF_START = 1.
    else.
      LF_START = US_PLIST-BODY_START.
    endif.
    LF_END   = LF_START + US_PLIST-BODY_NUM - 1.
    append lines of UT_CONTENT from LF_START to LF_END to CT_MAILHEX.
  endif.

endform.
