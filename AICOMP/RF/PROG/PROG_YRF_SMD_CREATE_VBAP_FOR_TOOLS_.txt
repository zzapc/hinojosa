*&---------------------------------------------------------------------*
*&  Include           YRF_SMD_CREATE_VBAP_FOR_TOOLS
*&---------------------------------------------------------------------*

  data: LF_TABIX        type        SY-TABIX,
        LF_ANZST        type        I,
        LF_KBETR        type        KBETR,
        LF_MATNR_MAINCO type        MATNR,
        LF_CUOBJ        type        CUOBM,
        LF_SEPAR        type        YRF_SMD_SEPAR,
        LF_YFRE         type        FLAG.
  data: LS_TOOL         type        YRF_SMD_TD100,
        LS_TRANS        type        YRF_MM_S_EBAN,
        LS_TOOLI        type        YRF_SD_S_TOOLITEM,
        LS_COPY         type        YRF_SMD_S_COPY_VBAP,
        LS_XKOMVT       type        KOMV_INDEX,
        YSMDT_XVBAP     type        VBAPVB,
        YSMDT_XVBEP     type        VBEPVB.
  data: LT_TOOLS        type        YRF_SMD_TT_TD100.
*{   INSERT         HEDK918782                                        8
data: LS_TOOLI_HP     type YHP_SD_S_TOOLITEM.
data: LT_MARA         type table of MARA,
      LT_MLAN         type table of MLAN.
*}   INSERT

  if VBAK-VBTYP ne 'B'.

*   Check anything to do?
    call function 'YRF_SMD_STEP_GET_TOOL_ORDER'
      exporting
        IF_MATNR = VBAP-MATNR
        IF_WERKS = VBAP-WERKS
      importing
        ET_TOOLS = LT_TOOLS.

    if LT_TOOLS[] is not initial.
      LF_CUOBJ = VBAP-CUOBJ.
*     Check Tool Order Creation Process
      clear LF_SEPAR.
*{   INSERT         HEDK918782                                        2
*** Read Material details
    select * from MARA
    into table LT_MARA
    for all entries in LT_TOOLS
    where MATNR eq LT_TOOLS-TOLNR.

    select * from MLAN
      into table LT_MLAN
      for all entries in LT_TOOLS
      where MATNR eq LT_TOOLS-TOLNR.

**** Delete Seelct form YRF_SMD_TC201 and Read it from YRF_SMD_TD100!!!!!!!!
*}   INSERT
*{   REPLACE        HEDK918782                                        3
*\      select single SEPAR into LF_SEPAR from YRF_SMD_TC201 where WERKS eq VBAP-WERKS.
    READ TABLE LT_TOOLS INTO LS_TOOL WITH KEY SEPAR = 'S'.
*}   REPLACE
      if SY-SUBRC is initial and
*{   REPLACE        HEDK918782                                        4
*\         LF_SEPAR eq 'S'.
    LS_TOOL-SEPAR = 'S'.
*}   REPLACE
        call function 'YRF_MMPD_CREATE_TOOL_ORDSD'
          exporting
            IF_MATNR = VBAP-MATNR
            IF_WERKS = VBAP-WERKS
            IF_VDATU = VBAK-VDATU.
      else.

*       Check creation step
        read table LT_TOOLS into LS_TOOL index 1.
        if LS_TOOL-TLORD eq 'O'.                                " At order entry

*         How many stereos
          loop at LT_TOOLS into LS_TOOL where PRTON eq ABAP_TRUE.
            LF_ANZST = LF_ANZST + 1.
          endloop.

          loop at LT_TOOLS into LS_TOOL where DONE eq ABAP_FALSE.

*{   REPLACE        HEDK918782                                        7
*\*           Get Toolitem data from SVC
*\            call function 'YRF_SDEX_GET_TOOLDATA_FROM_SVC'
*\              exporting
*\                IF_CUOBJ       = LF_CUOBJ
*\                IS_CRTOOL      = LS_TOOL
*\              changing
*\                CS_TOOL        = LS_TOOLI
*\              exceptions
*\                INTERNAL_ERROR = 1
*\                others         = 2.
*\
*\            if SY-SUBRC is not initial.
*\              clear LS_TOOLI.
*\              continue.
*\            endif.
*\*           Calculate Value
*\            if LS_TOOL-PRTON  eq ABAP_TRUE and
*\               LS_TOOLI-COHST eq 'S'       and
*\               LS_TOOLI-COMOC is not initial.
*\              if LS_TOOLI-COMOP is initial.
*\                LF_KBETR = LS_TOOLI-COMOC.
*\                LF_YFRE = ABAP_TRUE.
*\              else.
*\                LF_KBETR = ( LS_TOOLI-COMOC / 10000 * LS_TOOLI-COMOP ) / LF_ANZST.
*\              endif.
*\            elseif LS_TOOL-DCUTT  eq ABAP_TRUE and
*\                   LS_TOOLI-COHTO eq 'S'       and
*\                   LS_TOOLI-COCUC is not initial.
*\              if LS_TOOLI-COCUP is initial.
*\                LF_KBETR = LS_TOOLI-COCUC.
*\                LF_YFRE = ABAP_TRUE.
*\              else.
*\                LF_KBETR = ( LS_TOOLI-COCUC / 10000 * LS_TOOLI-COCUP ).
*\              endif.
*\            endif.
***       Only consider tools that need to be created in same Sales Order as FG
          check LS_TOOL-SEPAR eq 'I'.

***       Get Material Master details
          read table LT_MARA into data(LS_MARA) with key MATNR = LS_TOOL-TOLNR.

***       Get Toolitem data from Tool Characteristics
          call function 'YHP_SVC_GET_TOOLDATA_FROM_CHAR'
          exporting
            IS_CRTOOL            = LS_TOOL
          changing
            CS_TOOL              = LS_TOOLI_HP.

          if SY-SUBRC is not initial.
            clear LS_TOOLI_HP.
            continue.
          endif.

***       Calculate Value
          case abap_true.
            when LS_TOOL-PRTON. " Handle Printing Tool
              if LS_TOOLI_HP-TLCCU is initial.
                LF_KBETR = LS_TOOLI_HP-ETCST.
                LF_YFRE = ABAP_TRUE.
              else.
                if LF_ANZST gt 0.
                  LF_KBETR = ( LS_TOOLI_HP-ETCST / 10000 * LS_TOOLI_HP-TLCCU ) / LF_ANZST.
                else.
                  clear LF_KBETR.
                endif.
              endif.

            when LS_TOOL-DCUTT.
              if LS_TOOLI_HP-TLCCU is initial.
                LF_KBETR = LS_TOOLI_HP-ETCST.
                LF_YFRE = ABAP_TRUE.
              else.
                LF_KBETR = ( LS_TOOLI_HP-ETCST / 10000 * LS_TOOLI_HP-TLCCU ).
              endif.
          endcase.

***       Set Currency
          move LS_TOOLI_HP-ETCST_CURR to YSMDT_XVBAP-WAERK.
*}   REPLACE

            clear: YSMDT_XVBAP, YSMDT_XVBEP.
            move-corresponding YSMDT_XVBAP to LS_COPY.
            move-corresponding VBAP       to YSMDT_XVBAP.
            move-corresponding LS_COPY    to YSMDT_XVBAP.

            clear:  YSMDT_XVBAP-CUOBJ, YSMDT_XVBAP-CUOBJ_CH, YSMDT_XVBAP-OBJNR,
                    YSMDT_XVBAP-KBMENG, YSMDT_XVBAP-KLMENG, YSMDT_XVBAP-XCHPF,
                    YSMDT_XVBAP-XCHAR, YSMDT_XVBAP-VOLEH, YSMDT_XVBAP-STDAT,
                    YSMDT_XVBAP-SUMBD, YSMDT_XVBAP-MAGRV, YSMDT_XVBAP-MPROK,
*{   REPLACE        HEDK918782                                        1
*\                    YSMDT_XVBAP-KALSM_K, YSMDT_XVBAP-ZZANZ_PAL, YSMDT_XVBAP-ZZLKWAU.
          YSMDT_XVBAP-KALSM_K
*}   REPLACE
            .

            XVBAP_HIGH_POSNR = XVBAP_HIGH_POSNR + 10.

*           Append VBAP
            move XVBAP_HIGH_POSNR     to YSMDT_XVBAP-POSNR.
            move 'I'                  to YSMDT_XVBAP-UPDKZ.
*{   INSERT         HEDK918782                                       15
            move 'I'                  to YSMDT_XVBAP-UPDKZ_KALK.
*}   INSERT
            move LS_TOOL-TOLNR        to YSMDT_XVBAP-MATNR.
*{   REPLACE        HEDK918782                                       13
*\            move LS_TOOLI-COMOC_WAERK to YSMDT_XVBAP-WAERK.
            move LS_TOOLI_HP-ETCST_CURR to YSMDT_XVBAP-WAERK.
*}   REPLACE
            move vbap-werks       to YSMDT_XVBAP-WERKs.
            move LS_TOOLI-CUSDE1      to YSMDT_XVBAP-ARKTX.
            move 1000                 to YSMDT_XVBAP-KWMENG.
            move 1000                 to YSMDT_XVBAP-LSMENG.
            move 1                    to YSMDT_XVBAP-KPEIN.
            move 'TAB'                to YSMDT_XVBAP-PSTYV.
*            move 'YEB'                to YSMDT_XVBAP-BEDAE.
            move LF_KBETR             to YSMDT_XVBAP-NETWR.
            move LF_KBETR             to YSMDT_XVBAP-NETPR.

*{   REPLACE        HEDK918782                                        9
*\            move '2030'               to YSMDT_XVBAP-MATKL.
            move LS_MARA-MATKL        to YSMDT_XVBAP-MATKL.
*}   REPLACE
            move 'B'                  to YSMDT_XVBAP-FKREL.
*{   REPLACE        HEDK918782                                       10
*\            move '07'                 to YSMDT_XVBAP-PRODH.
            move LS_MARA-PRDHA        to YSMDT_XVBAP-PRODH.
*}   REPLACE
            move XVBAP_HIGH_POSNR     to YSMDT_XVBAP-POSNV.

            move 'KP'                 to YSMDT_XVBAP-MTVFP.
            move '02'                 to YSMDT_XVBAP-KTGRM.
*            move 'B'                  to YSMDT_XVBAP-KNTTP.
            move 'M'                  to YSMDT_XVBAP-KZBWS.
*            move '0021'               to YSMDT_XVBAP-YIND.
*{   INSERT         HEDK918782                                       14
*** Add tax classification details
           move XVBAP-WKLND            to YSMDT_XVBAP-WKLND.
           move XVBAP-WKREG            to YSMDT_XVBAP-WKREG.
           move XVBAP-BWKEY            to YSMDT_XVBAP-BWKEY.

           read table LT_MLAN into data(LS_MLAN) with key MATNR = YSMDT_XVBAP-MATNR
                                                          ALAND = YSMDT_XVBAP-WKLND.
           move: LS_MLAN-TAXM1        to YSMDT_XVBAP-TAXM1,
                 LS_MLAN-TAXM2        to YSMDT_XVBAP-TAXM2,
                 LS_MLAN-TAXM3        to YSMDT_XVBAP-TAXM3,
                 LS_MLAN-TAXM4        to YSMDT_XVBAP-TAXM4,
                 LS_MLAN-TAXM5        to YSMDT_XVBAP-TAXM5,
                 LS_MLAN-TAXM6        to YSMDT_XVBAP-TAXM6,
                 LS_MLAN-TAXM7        to YSMDT_XVBAP-TAXM7,
                 LS_MLAN-TAXM8        to YSMDT_XVBAP-TAXM8,
                 LS_MLAN-TAXM9        to YSMDT_XVBAP-TAXM9.

*}   INSERT

*            move VBAP-WERKS to LS_UA_VALUES-WERKS.
*            if YCL_BC_USEREXIT=>CHECK_ACTIVE( IV_EXITNAME = YCL_UA_CONSTANT_IF=>CON_IF06
*                                              IS_VALUES   = LS_UA_VALUES ) eq YCL_BC_USEREXIT=>CON_ACTIVE or
*               YCL_BC_USEREXIT=>CHECK_ACTIVE( IV_EXITNAME = YCL_UA_CONSTANT_IF=>CON_IF07
*                                              IS_VALUES   = LS_UA_VALUES ) eq YCL_BC_USEREXIT=>CON_ACTIVE.
*              move 'Y2'               to YSMDT_XVBAP-FAKSP.
*            endif.

            append YSMDT_XVBAP         to XVBAP.

            describe table XVBAP lines LF_TABIX.
            move YSMDT_XVBAP-POSNR     to IVBAP-POSNR.
            move LF_TABIX             to IVBAP-TABIX.
            append IVBAP.

*           Set Transfer Data To EBAN
            move LS_TOOL-MATNR        to LS_TRANS-MATNR.
            move LS_TOOL-WERKS        to LS_TRANS-WERKS.
            move LS_TOOL-TOLNR        to LS_TRANS-TOLNR.
            move LS_TOOL-IEALI        to LS_TRANS-IEALI.
            move VBAP-CUOBJ           to LS_TRANS-CUOBJ.
*{   INSERT         HEDK918782                                       16
            move LS_TOOLI_HP-LIFNR      to LS_TRANS-LIFNR.
            move LS_TOOLI_HP-ETCST      to LS_TRANS-BAPRE.
            move LS_TOOLI_HP-ETCST_CURR to LS_TRANS-WAERS.
            move LS_TOOLI_HP-EKORG      to LS_TRANS-EKORG.

*}   INSERT

            call function 'YRF_SMD_EBAN_SET_TRANS'
              exporting
                IS_TRANS = LS_TRANS.

*           Append VBEP
            move-corresponding VBEP   to YSMDT_XVBEP.

            clear:  YSMDT_XVBEP-BDART, YSMDT_XVBEP-PLART, YSMDT_XVBEP-WEPOS,
                    YSMDT_XVBEP-LFREL, YSMDT_XVBEP-AUFNR.

            move YSMDT_XVBAP-POSNR     to YSMDT_XVBEP-POSNR.
            move 'I'                  to YSMDT_XVBEP-UPDKZ.
            move 1000                 to YSMDT_XVBEP-WMENG.
            move 1000                 to YSMDT_XVBEP-CMENG.
            move 'CB'                 to YSMDT_XVBEP-ETTYP.
            move VBAP-VRKME           to YSMDT_XVBEP-VRKME.
            move 'NB'                 to YSMDT_XVBEP-BSART.
            move 'B'                  to YSMDT_XVBEP-BSTYP.
            move '0001'               to YSMDT_XVBEP-ETENR.
            move 'X'               to YSMDT_XVBEP-VERFP.
            append YSMDT_XVBEP         to XVBEP.

            describe table XVBEP lines LF_TABIX.
            move YSMDT_XVBAP-POSNR     to IVBEP-POSNR.
            move '0001'               to IVBEP-ETENR.
            move LF_TABIX             to IVBEP-TABIX.
            append IVBEP.
            move-corresponding IVBEP to IVBEP1.
            append IVBEP1.

*           Append PB00
            clear LS_XKOMVT.
*{   REPLACE        HEDK918782                                        5
*\            read table XKOMV into LS_XKOMVT with key KSCHL = 'ZP00'
          read table XKOMV into LS_XKOMVT with key KSCHL = 'ZR01'
*}   REPLACE
                                                     KPOSN = VBAP-POSNR.
            if SY-SUBRC is initial.
              move 'I'                to LS_XKOMVT-UPDKZ.
              move 'C'                to LS_XKOMVT-KHERK.
              move ' '                to LS_XKOMVT-KOUPD.
              move 'G'                to LS_XKOMVT-KSTEU.
              move YSMDT_XVBAP-POSNR   to LS_XKOMVT-KPOSN.
              move LF_KBETR           to LS_XKOMVT-KBETR.
*{   REPLACE        HEDK918782                                       11
*\              move YSMDT_XVBAP-WAERK   to LS_XKOMVT-WAERS.
              if  YSMDT_XVBAP-WAERK is not initial.
                move YSMDT_XVBAP-WAERK to LS_XKOMVT-WAERS.
              endif.
*}   REPLACE
              if LS_XKOMVT-WAERS ne 'EUR'.
                move 100000           to LS_XKOMVT-KKURS.
              endif.
              move 1                  to LS_XKOMVT-KPEIN.
              move 100                to LS_XKOMVT-KAWRT.
              move LF_KBETR           to LS_XKOMVT-KWERT.
              move 1                  to LS_XKOMVT-KSTBS.
            else.
              move 'I'                to LS_XKOMVT-UPDKZ.
              move 'C'                to LS_XKOMVT-KHERK.
              move ' '                to LS_XKOMVT-KOUPD.
              move 'G'                to LS_XKOMVT-KSTEU.
              move YSMDT_XVBAP-POSNR   to LS_XKOMVT-KPOSN.
              move LF_KBETR           to LS_XKOMVT-KBETR.
*{   REPLACE        HEDK918782                                       12
*\              move YSMDT_XVBAP-WAERK   to LS_XKOMVT-WAERS.
              if  YSMDT_XVBAP-WAERK is not initial.
                move YSMDT_XVBAP-WAERK to LS_XKOMVT-WAERS.
              endif.
*}   REPLACE
              if LS_XKOMVT-WAERS ne 'EUR'.
                move 100000           to LS_XKOMVT-KKURS.
              endif.
              move 1                  to LS_XKOMVT-KPEIN.
              move 100                to LS_XKOMVT-KAWRT.
              move LF_KBETR           to LS_XKOMVT-KWERT.
              move 1                  to LS_XKOMVT-KSTBS.
              move 1 to LS_XKOMVT-KUMZA.
              move 'ST'   to LS_XKOMVT-KMEIN.
*{   REPLACE        HEDK918782                                        6
*\              move 'ZP00' to LS_XKOMVT-KSCHL.
            move 'ZR01' to LS_XKOMVT-KSCHL.
*}   REPLACE
              move 'V'    to LS_XKOMVT-KAPPL.
            endif.

            append LS_XKOMVT        to XKOMV.
*{   INSERT         HEDK918782                                       17
*         read table XKOMV into LS_XKOMVT with key KSCHL = 'ZWST'
*                                                  KPOSN = VBAP-POSNR.
*            if SY-SUBRC is initial.
*              move 'I'                to LS_XKOMVT-UPDKZ.
*              move YSMDT_XVBAP-POSNR   to LS_XKOMVT-KPOSN.
*              clear LS_XKOMVT-KBETR.
*              append LS_XKOMVT        to XKOMV.
*            endif.
*}   INSERT

*** Add YFRE Condition
            if LF_YFRE is not initial.
              clear LS_XKOMVT.
              read table XKOMV into LS_XKOMVT with key KSCHL = 'YFRE'
                                                       KPOSN = VBAP-POSNR.
              if SY-SUBRC is initial.
                LF_TABIX = SY-TABIX.
                move 'I'                to LS_XKOMVT-UPDKZ.
                move 'C'                to LS_XKOMVT-KHERK.
                move YSMDT_XVBAP-POSNR   to LS_XKOMVT-KPOSN.
                move '100000-'          to LS_XKOMVT-KBETR.
                move '1000'             to LS_XKOMVT-KWERT.
                move ABAP_TRUE          to LS_XKOMVT-KGRPE.
                move 'A'                to LS_XKOMVT-KRECH.
                move 'C'                to LS_XKOMVT-KSTEU.
                move 'A'                to LS_XKOMVT-KOAID.
                modify XKOMV from LS_XKOMVT index LF_TABIX.
              else.
                move 'YFRE'             to LS_XKOMVT-KSCHL.
                move 'I'                to LS_XKOMVT-UPDKZ.
                move 'C'                to LS_XKOMVT-KHERK.
                move YSMDT_XVBAP-POSNR   to LS_XKOMVT-KPOSN.
                move '100000-'          to LS_XKOMVT-KBETR.
                move '1000'             to LS_XKOMVT-KWERT.
                move ABAP_TRUE          to LS_XKOMVT-KGRPE.
                move 'A'                to LS_XKOMVT-KRECH.
                move 'C'                to LS_XKOMVT-KSTEU.
                move 'A'                to LS_XKOMVT-KOAID.
                append LS_XKOMVT        to XKOMV.
              endif.
            endif.

*           Update Tool Item Creation
            call function 'YRF_SMD_STEP_SET_TOOL_ORDER'
              exporting
                IF_MATNR = LS_TOOL-TOLNR
                IF_WERKS = VBAP-WERKS.

          endloop.
        endif.
      endif.
    endif.
  endif.
