
class YCL_HP_SVCS_PR_CFG definition
  public
  inheriting from ZCL_VCXI_P1SS_PR_CFG
  create public .

public section.

  constants C_PARID_PROPT type /VCXI/VKS_PARID value 'YHP_SVC_PROPT' ##NO_TEXT.
  constants C_PARID_GUALDERA type /VCXI/VKS_PARID value 'YHP_SVC_GUALDERA' ##NO_TEXT.

  methods GET_PROPT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PROPT) type YHP_SVCS_PROPT
    raising
      /VCXI/CX_CKX .
  methods SET_PROPT
    importing
      !IF_PROPT type YHP_SVCS_PROPT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_GUALDERA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_GUALDERA) type YHP_SVCS_S_GUALDERA
    raising
      /VCXI/CX_CKX .
  methods SET_GUALDERA
    importing
      !IS_GUALDERA type YHP_SVCS_S_GUALDERA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_JOITY .
  methods GET_JOITY .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods SET_PROHE
    redefinition .
  methods SET_PROLE
    redefinition .
  methods SET_PROWI
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~GET_DATA
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~SET_DATA
    redefinition .
protected section.

  constants C_IEVNT_O_PROPT_CHANGED type /VCXI/VKSC_IEVNT value 'PROPT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_I_REFRESH_PRODIM type /VCXI/VKSC_IEVNT value 'REFRESH_PRODIM' ##NO_TEXT.
  constants C_IEVNT_O_GUALDERA_CHANGED type /VCXI/VKSC_IEVNT value 'GUALDERA_CHANGED' ##NO_TEXT.

  methods CHECK_BOARD
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
*  methods CHECK_KDMAT
*    importing
*      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
*    returning
*      value(RF_ELMST) type /VCXI/VKSR_ELMST
*    raising
*      /VCXI/CX_CKX .
  methods CHECK_KDPTX
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_PRODI
    returning
      value(RR_PR_PRODI) type ref to YCL_HP_SVCS_PR_PRODI
    raising
      /VCXI/CX_CKX .
private section.

  data S_PRODIM type ZVCXI_PXS_S_PRODIM .
endclass. "YCL_HP_SVCS_PR_CFG definition
class YCL_HP_SVCS_PR_CFG implementation.
  method CHECK_BOARD.
    data: LF_BOARD type  ZVCXI_PCS_BOARD,
          LF_MBOAR type  ZVCXI_PCSS_MBOAR.

    data: LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP,
          LR_APPDATA    type ref to ZCL_VCXI_XCS_APPDATA.

    move ME->R_GATE->GET_APPDATA( ) ?to LR_APPDATA.

*** Get Corrugator Forward Property (Inbound)
    LR_BL_CRFPROP = ME->GET_CRFPX( ).
    check LR_BL_CRFPROP is bound.

*** Get Sales/Production Board ID, depending on the Context
    case ME->GET_ICONT( ).

      when ZIF_VCXI_PXSS_ICONT=>C_ICONT_SALES.
        move LR_BL_CRFPROP->F_SABOA to LF_BOARD.
        move ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S to LF_MBOAR.

      when ZIF_VCXI_PXSS_ICONT=>C_ICONT_PROD.
        move LR_BL_CRFPROP->F_PRBOA to LF_BOARD.
        move ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_P to LF_MBOAR.

    endcase.

*** Check master data to verify if the board is valid for the corresponding ship to
    select count( * )
    from YHP_SVC_TD001 up to 1 rows
    where  BOARD = LF_BOARD
    and MBOAR = LF_MBOAR.

    if SY-SUBRC ne 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      check IR_MESSAGE is bound.
***     Board is valid for corresponding ship-to
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '000' ).
      exit.
    else.
      select count( * )
      from YHP_SVC_TD001 up to 1 rows
      where  BOARD = LF_BOARD
      and MBOAR = LF_MBOAR
      and KUNWE = LR_APPDATA->S_KNA1_WE-KUNNR.
      if SY-SUBRC eq 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        check IR_MESSAGE is bound.
***     Board is valid for corresponding ship-to
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '000' ).

      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        check IR_MESSAGE is bound.
***     Board is valid not valid for ship-to
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '001'
                                 IF_MSGV1 = LR_APPDATA->S_KNA1_WE-KUNNR ).
      endif.
    endif.
  endmethod.
  method CHECK_KDPTX.

    if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( exporting IR_GATE  = ME->R_GATE
                                                            IF_IFUNC = 'IGNORE_CUSTMATDES' ) eq ABAP_FALSE.

***   Check Customer Material Description
      if ME->ZIF_VCXI_PXSS_FG~GET_KDPTX( ) is not initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.

        check IR_MESSAGE is bound.
***     Customer Material Description is maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '024' ).
        exit.
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        check IR_MESSAGE is bound.
***     Customer Material Description is not maintained
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '025' ).
        exit.
      endif.

*** Check eill be ignored
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.

    endif.

  endmethod.
  method GET_GUALDERA.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GUALDERA ).

    move LS_PARAM-ATFLV to RS_GUALDERA-GUALDERA.
    move LS_PARAM-UNIT  to RS_GUALDERA-GUALDERA_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_JOITY.
  endmethod.
  method GET_PRODI.

*** Get all Children
    data(LT_GATE) = ME->R_GATE->GET_PRVDR( exporting IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD
                                                     IF_INUSE = ABAP_TRUE   ).

    loop at LT_GATE into data(LR_GATE).
      try.
          check LR_GATE->R_CLSPR is bound.
          RR_PR_PRODI = cast #( LR_GATE->R_CLSPR ).
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
    endloop.

  endmethod.
  method GET_PROPT.
     data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROPT ).
    move LS_PARAM-ATWRT to RF_PROPT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check BOARD
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_BOARD( ) ).

***--------------------------------------------------------------------------------------
*** Check Customer Material Number
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_KDMAT( ) ).

***--------------------------------------------------------------------------------------
*** Check Customer Material Description
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_KDPTX( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Board
    ME->CHECK_BOARD( IR_MESSAGE = IR_MESSAGE ).


***--------------------------------------------------------------------------------------
*** Check Customer Material Number
    ME->CHECK_KDMAT( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Customer Material Description
    ME->CHECK_KDPTX( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_EVENT.
    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                          IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_REFRESH_PRODIM.
        check S_PRODIM is not INITIAL.
*** When the board flute change it should recal de prodim using the values from the screen.
        ME->SET_PROLE( IS_PROLE = S_PRODIM-S_PROLE
                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        ME->SET_PROHE( IS_PROHE = S_PRODIM-S_PROHE
                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        ME->SET_PROWI( IS_PROWI = S_PRODIM-S_PROWI
                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endcase.
  endmethod.
  method SET_GUALDERA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GUALDERA ).

    move IS_GUALDERA-GUALDERA     to LS_PARAM-ATFLV.
    move IS_GUALDERA-GUALDERA_UOM to LS_PARAM-UNIT.
    move IF_SETBY                 to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Save event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GUALDERA_CHANGED ).
    endif.

  endmethod.
  method SET_JOITY.
  endmethod.
  method SET_PROHE.
    data: LS_PRODIM_INT type ZVCXI_PXS_S_PRODIM.

    LS_PRODIM_INT-S_PROHE = IS_PROHE.

    if ME->GET_PROPT( ) ne 'I'.
*** Convert to internal.
      YCL_HP_X_SRV_VCDIM=>CONVERT_DIMENSION_TO_INTERNAL( exporting
                                                          IR_CFG   = ME
                                                          IF_PROPT = ME->GET_PROPT( )
                                                          changing
                                                          CS_PRODIM =  LS_PRODIM_INT   ).

      SUPER->SET_PROHE( IS_PROHE = LS_PRODIM_INT-S_PROHE
                        IF_SETBY = IF_SETBY ).

***   Update Buffered dimensions for Fast Data
      move LS_PRODIM_INT-S_PROHE to S_PRODIM-S_PROHE.

    else.
      SUPER->SET_PROHE( IS_PROHE = IS_PROHE
                        IF_SETBY = IF_SETBY ).


*** Update Buffered dimensions for Fast Data
    move IS_PROHE to S_PRODIM-S_PROHE.

    endif.

  endmethod.
  method SET_PROLE.
    data: LS_PRODIM_INT type ZVCXI_PXS_S_PRODIM.

    LS_PRODIM_INT-S_PROLE = IS_PROLE.

    if ME->GET_PROPT( ) ne 'I'.
*** Convert to internal.
      YCL_HP_X_SRV_VCDIM=>CONVERT_DIMENSION_TO_INTERNAL( exporting
                                                          IR_CFG   = ME
                                                          IF_PROPT = ME->GET_PROPT( )
                                                          changing
                                                          CS_PRODIM =  LS_PRODIM_INT   ).

      SUPER->SET_PROLE( IS_PROLE = LS_PRODIM_INT-S_PROLE
                       IF_SETBY  = IF_SETBY ).

*** Update Buffered dimensions for Fast Data
      move  LS_PRODIM_INT-S_PROLE to S_PRODIM-S_PROLE.

    else.
      SUPER->SET_PROLE( IS_PROLE = IS_PROLE
                       IF_SETBY = IF_SETBY ).

*** Update Buffered dimensions for Fast Data
      move IS_PROLE to S_PRODIM-S_PROLE.

    endif.

  endmethod.
  method SET_PROPT.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROPT ).

    move IF_PROPT     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROPT_CHANGED ).
    endif.
  endmethod.
  method SET_PROWI.

    data: LS_PRODIM_INT type ZVCXI_PXS_S_PRODIM.

    LS_PRODIM_INT-S_PROWI = IS_PROWI.

    if ME->GET_PROPT( ) ne 'I'.
*** Convert to internal.
      YCL_HP_X_SRV_VCDIM=>CONVERT_DIMENSION_TO_INTERNAL( exporting
                                                          IR_CFG   = ME
                                                          IF_PROPT = ME->GET_PROPT( )
                                                          changing
                                                          CS_PRODIM =  LS_PRODIM_INT   ).

      SUPER->SET_PROWI( IS_PROWI  = LS_PRODIM_INT-S_PROWI
                        IF_SETBY  = IF_SETBY ).

*** Update Buffered dimensions for Fast Data
      move LS_PRODIM_INT-S_PROWI to S_PRODIM-S_PROWI.

    else.
      SUPER->SET_PROWI( IS_PROWI = IS_PROWI
                        IF_SETBY = IF_SETBY ).


*** Update Buffered dimensions for Fast Data
      move IS_PROWI to S_PRODIM-S_PROWI.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    data: LS_PRODIM type ZVCXI_PXS_S_PRODIM.

    data: LR_DATA_SUPER type ref to DATA.

    field-symbols: <S_FDI_SUPER> type ANY,
                   <S_FDI_CFG>   type YHP_SVCS_S_FDI_CFG.

***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type YHP_SVCS_S_FDI_CFG.
    assign RR_DATA->* to <S_FDI_CFG>.

*** Get SUPER Data
    LR_DATA_SUPER = SUPER->ZIF_VCXI_PXSS_FDI~GET_DATA( importing ET_FDMEX = ET_FDMEX ).
    if LR_DATA_SUPER is bound.
      assign LR_DATA_SUPER->* to <S_FDI_SUPER>.
      <S_FDI_CFG> = corresponding #( <S_FDI_SUPER> ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Product Dimension Display Option
    <S_FDI_CFG>-PROPT = ME->GET_PROPT( ).
*** Get Side Flap for Agriculture Boxes
    <S_FDI_CFG>-S_GUALDERA = ME->GET_GUALDERA( ).

*** Get Packaging Usage via Product Information
    if ME->GET_PRODI( ) is bound.
      <S_FDI_CFG>-PACKU = ME->GET_PRODI( )->GET_PACKU( ).
    endif.

*** Get MRP via Product Information
    if ME->GET_PRODI( ) is bound.
      <S_FDI_CFG>-MRP = ME->GET_PRODI( )->GET_MRP( ).
    endif.

    <S_FDI_CFG>-NOUTT = ME->GET_NOUTT( ).


***-------------------------------------------------------------------*
** Get product dimension Based on display option
    LS_PRODIM-S_PROLE = ME->GET_PROLE( ).
    LS_PRODIM-S_PROWI = ME->GET_PROWI( ).
    LS_PRODIM-S_PROHE = ME->GET_PROHE( ).

    YCL_HP_X_SRV_VCDIM=>CONVERT_DIMENSION_TO_DISPLAY( exporting IF_PR_CFG = ME
                                                      IF_FLUTE =  ME->GET_FLUTE( )
                                                      IF_FEFCO =  ME->GET_FEFCO( )
                                                      IS_CALIP =  ME->GET_CALIP( )
                                            changing  CF_PROPT =  <S_FDI_CFG>-PROPT
                                                      CS_PRODIM = LS_PRODIM ).

    move-corresponding LS_PRODIM to <S_FDI_CFG>.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_CFG_OLD type YHP_SVCS_S_FDI_CFG,
          LS_FDI_CFG_NEW type YHP_SVCS_S_FDI_CFG.

    field-symbols: <S_DATA> type ANY.

***--------------------------------------------------------------------------------------
*** Dereference Data
    data(LR_DATA_OLD) = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                             else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).

    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_CFG_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_CFG_NEW = corresponding #( <S_DATA> ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Product Dimension Display Option
    if LS_FDI_CFG_OLD-PROPT ne LS_FDI_CFG_NEW-PROPT.
      ME->SET_PROPT( IF_PROPT = LS_FDI_CFG_NEW-PROPT
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***-------------------------------------------------------------------*
*** Set Packaging Usage via Product Information
    if LS_FDI_CFG_OLD-PACKU ne LS_FDI_CFG_NEW-PACKU.
      if ME->GET_PRODI( ) is bound.
        ME->GET_PRODI( )->SET_PACKU( IF_PACKU = LS_FDI_CFG_NEW-PACKU
                                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.

***-------------------------------------------------------------------*
*** Set MRP via Product Information
    if LS_FDI_CFG_OLD-MRP ne LS_FDI_CFG_NEW-MRP.
      if ME->GET_PRODI( ) is bound and
        not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'MRP' ] ).
        ME->GET_PRODI( )->SET_MRP( IF_MRP   = LS_FDI_CFG_NEW-MRP
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.

***-------------------------------------------------------------------*
*** Set Side Flap of Agriculture Boxex
    if LS_FDI_CFG_OLD-S_GUALDERA ne LS_FDI_CFG_NEW-S_GUALDERA.
      ME->SET_GUALDERA( IS_GUALDERA = LS_FDI_CFG_NEW-S_GUALDERA
                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***-------------------------------------------------------------------*
*** Fill buffer
    ME->S_PRODIM-S_PROLE = LS_FDI_CFG_NEW-S_PROLE.
    ME->S_PRODIM-S_PROHE = LS_FDI_CFG_NEW-S_PROHE.
    ME->S_PRODIM-S_PROWI = LS_FDI_CFG_NEW-S_PROWI.

    SUPER->ZIF_VCXI_PXSS_FDI~SET_DATA( IR_DATA     = IR_DATA
                                       IR_DATA_OLD = LR_DATA_OLD
                                       IT_FDMEX    = IT_FDMEX ).


  endmethod.
