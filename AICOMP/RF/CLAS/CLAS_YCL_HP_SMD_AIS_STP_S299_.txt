
class YCL_HP_SMD_AIS_STP_S299 definition
  public
  inheriting from /VCXI/CL_CKMR_CLSTP
  final
  create public .

public section.

  class-data T_IDS type ZVCXI_XCI_TT_SVCEL .

  methods CONSTRUCTOR
    importing
      !IR_RPSEG type ref to /VCXI/CL_CKMR_RPSEG
    raising
      /VCXI/CX_CKX .

  methods EXECUTE
    redefinition .
protected section.

  data R_DCO_OUTPUT type ref to YCL_HP_SMD_AIS_DCO .
  data R_DCO_INPUT type ref to YCL_HP_SMD_AIS_DCO .
  data T_SPARAM type YHP_SMD_AIS_TT_QUOT_SPARAM .
  data T_TC01 type YHP_SMD_AIS_TT_TC01 .

  methods ADD_SVCEV
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods GET_EVENTS
    raising
      /VCXI/CX_CKX .
  methods CREATE_IDAT
    changing
      !CS_WRKLI type YHP_SMD_AIS_S_QUOT_WRKLI
    raising
      /VCXI/CX_CKX .
  methods GET_CUELMNT
    raising
      /VCXI/CX_CKX .
  methods VALIDATE_SVCEL
    exporting
      !EV_ID_INVALID type /VCXI/CKX_ID
    changing
      !CT_SVCEL type ZVCXI_XCI_TT_SVCEL
    raising
      /VCXI/CX_CKX .
  methods VALIDATE_CHILDREN
    importing
      !IS_SVCEL type ZVCXI_XCI_S_SVCEL
      !IT_SVCEL type ZVCXI_XCI_TT_SVCEL
      !IV_CALL type INT4 default 0
    exporting
      !EF_NODATA type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SMD_AIS_STP_S299 definition
class YCL_HP_SMD_AIS_STP_S299 implementation.
method ADD_SVCEV.

  field-symbols: <S_SVCPA> type ZVCXI_XCI_S_SVCPA,
                 <S_SVCEV> type ZVCXI_XCI_S_SVCEV,
                 <S_TC01>  type YHP_SMD_AIS_TC01.

*** Add generic events (such as ACTIVATED)
  loop at ME->T_TC01 assigning <S_TC01> where ISELF eq CS_SVCEL-ISELF
                                          and PARID is initial.
    append initial line to CS_SVCEL-T_SVCEV assigning <S_SVCEV>.
    move-corresponding <S_TC01> to <S_SVCEV>.
  endloop.

*** Add Leading Object Key events
  loop at ME->T_TC01 assigning <S_TC01> where ISELF eq CS_SVCEL-ISELF
                                          and PARID eq 'LEOKY'.
    append initial line to CS_SVCEL-T_SVCEV assigning <S_SVCEV>.
    move-corresponding <S_TC01> to <S_SVCEV>.
  endloop.

*** Add events per Parameter IDs
  loop at CS_SVCEL-T_SVCPA assigning <S_SVCPA>.
    loop at ME->T_TC01 assigning <S_TC01> where ISELF eq CS_SVCEL-ISELF
                                            and PARID eq <S_SVCPA>-PARID.
      append initial line to CS_SVCEL-T_SVCEV assigning <S_SVCEV>.
      move-corresponding <S_TC01> to <S_SVCEV>.
    endloop.
  endloop.

endmethod.
method CONSTRUCTOR.
data lt_ID TYPE TABLE OF /VCXI/VKS_TC210.
data ls_ID TYPE /VCXI/VKS_TC210.
data ls_ID_att type ZVCXI_XCI_S_SVCEL.

*** Super Constructor
  SUPER->CONSTRUCTOR( IR_RPSEG = IR_RPSEG ).

*** Map DCO to Required Input/Output
  ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_INPUT ).
  ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_OUTPUT ).

*** Get Supervised Parameters
  ME->GET_CUELMNT( ).

*** Get Events
  ME->GET_EVENTS( ).

*** Fill table to compare IDs
  if ME->T_IDS[] is initial.
  select ID from /VCXI/VKS_TC210 into CORRESPONDING FIELDS OF table LT_ID.
  sort lt_id by ID.
  delete ADJACENT DUPLICATES FROM LT_ID comparing ID.
  loop at lt_id into ls_id where id is not initial.
  ls_id_att-iself = ls_id-id.
  append ls_id_att to T_IDS.
  endloop.
  endif.

endmethod.
method CREATE_IDAT.

  data: LS_IDAT type YHP_SMD_AIS_S_QUOT_IDAT.

  data: LR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC.

  field-symbols: <S_SVCEL> type ZVCXI_XCI_S_SVCEL,
                 <S_SVCPA> type ZVCXI_XCI_S_SVCPA.

 data lv_ID_invalid type /VCXI/CKX_ID.

  LS_IDAT = CS_WRKLI-S_IDAT.

*** Delete Setby where Parameters are not Supervised
  loop at LS_IDAT-T_SVCEL assigning <S_SVCEL>.
    loop at <S_SVCEL>-T_SVCPA assigning <S_SVCPA>.
      read table ME->T_SPARAM with key PID   = <S_SVCEL>-IPARE
                                       CID   = <S_SVCEL>-ISELF
                                       PARID = <S_SVCPA>-PARID
                                       transporting no fields.
      if SY-SUBRC ne 0.
        clear <S_SVCPA>-SETBY.
      endif.
    endloop.
  endloop.

*** Delete LS_IDAT-T_SVCEL where LEOKY is initial and T_SVCPA is initial.
  ME->VALIDATE_SVCEL( importing EV_ID_INVALID = lv_ID_invalid
changing CT_SVCEL = LS_IDAT-T_SVCEL
                       ).
if lv_id_invalid is not initial.
*** Invalid ID &1
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGID = 'YHP_SMD_AIS'
                                          IF_MSGTY = 'E'
                                          IF_MSGNO = '017'
                                          IF_MSGV1 = lv_id_invalid
                                           ).
EXIT.

endif.

*** Add Events
  loop at LS_IDAT-T_SVCEL assigning <S_SVCEL>.
    ME->ADD_SVCEV( changing CS_SVCEL = <S_SVCEL> ).
  endloop.

*** Create IDat SmartVC
  LR_IDAT_SVC = ZCL_VCXI_XCI_IDAT_SVC=>CREATE( IS_CMPRK = LS_IDAT-S_CMPRK
                                               IF_IEALI = LS_IDAT-IEALI ).
*** Set Data
  LR_IDAT_SVC->SET_SVCEL( IT_SVCEL = LS_IDAT-T_SVCEL ).

  CS_WRKLI-R_IDAT_SVC = LR_IDAT_SVC.

*** Save Integration Data
  if ME->R_DCO_INPUT->F_FSIDA is not initial.
    LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_SAVE ).
  endif.

  data(LF_ID) = LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT~GET_ID( ).

*** Integration Data &1 was successfully saved.
  ME->R_RPSEG->R_MSG->ADD_MESSAGE( IF_MSGID = 'YHP_SMD_AIS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '001'
                                   IF_MSGV1 = LF_ID ).

*** Save in case of error afterwards
  ME->R_RPSEG->SAVE_AND_COMMIT( ).

  if LR_IDAT_SVC is bound.
*** IDAT SVC for &1 &2 created.
    ME->R_RPSEG->R_MSG->ADD_MESSAGE( IF_MSGID = 'YHP_SMD_AIS'
                                     IF_MSGTY = 'S'
                                     IF_MSGNO = '002'
                                     IF_MSGV1 = CS_WRKLI-GROUPING
                                     IF_MSGV2 = CS_WRKLI-POSNR ).
  else.
*** No IDAT SVC created for &1 &2..
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGID = 'YHP_SMD_AIS'
                                          IF_MSGTY = 'E'
                                          IF_MSGNO = '008'
                                          IF_MSGV1 = CS_WRKLI-GROUPING
                                          IF_MSGV2 = CS_WRKLI-POSNR ).
  endif.

endmethod.
method EXECUTE.

  field-symbols: <S_WRKLI> type YHP_SMD_AIS_S_QUOT_WRKLI.

  try.

***   Create Integration Data
      loop at ME->R_DCO_INPUT->T_WRKLI assigning <S_WRKLI>.
        ME->CREATE_IDAT( changing CS_WRKLI = <S_WRKLI> ).
      endloop.

***   Set Status to Complete
      ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED ).

    catch /VCXI/CX_CKX into data(LR_CX_CKX).

***   Set Status to Error
      ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

***   Add Message to Message Log
      ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).

  endtry.

*** Perform Save and Commit
  ME->R_RPSEG->SAVE_AND_COMMIT( ).

endmethod.
method GET_CUELMNT.

  data: LS_CMPRK          type /VCXI/VKC_S_CMPRK,
        LS_REGELMNT_PARAM type /VCXI/VKSC_S_REGELMNT_PARAM,
        LS_SPARAM         type YHP_SMD_AIS_S_QUOT_SPARAM,
        LS_WRKLI          type YHP_SMD_AIS_S_QUOT_WRKLI,
        LS_MARC           type MARC.

  data: LT_OBJECT type /VCXI/CKX_TT_OBJECT.

  data: LR_CUELMNT  type ref to /VCXI/CL_VKSC_CUELMNT,
        LR_CUELMNTP type ref to /VCXI/CL_VKSC_CUELMNT,
        LR_CUPRFL   type ref to /VCXI/CL_VKSC_CUPRFL,
        LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT,
        LR_PARENT   type ref to /VCXI/IF_CKX_OBJECT.

  refresh: ME->T_SPARAM.

*** Identify Profile
  read table ME->R_DCO_INPUT->T_WRKLI into LS_WRKLI index 1.
  move LS_WRKLI-RMATN to LS_CMPRK-CMATN.

  call function 'MARC_SINGLE_READ'
    exporting
      MATNR             = LS_WRKLI-RMATN
      WERKS             = LS_WRKLI-WERKS
    importing
      WMARC             = LS_MARC
    exceptions
      LOCK_ON_MARC      = 1
      LOCK_SYSTEM_ERROR = 2
      WRONG_CALL        = 3
      NOT_FOUND         = 4
      others            = 5.

  check SY-SUBRC = 0.
  move LS_MARC-STDPD to LS_CMPRK-CMATN.
  move LS_MARC-STDPD to LS_CMPRK-PRFID.

  LR_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = LS_CMPRK ).

*** Get all Element
  LT_OBJECT = LR_CUPRFL->GET_REGISTERED_CUELMNT( ).
  loop at LT_OBJECT into LR_OBJECT.

    move LR_OBJECT ?to LR_CUELMNT.
    LR_PARENT = LR_CUELMNT->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ).

    if LR_PARENT is bound.
      move LR_PARENT ?to LR_CUELMNTP.
      if LR_CUELMNTP is bound.
        move LR_CUELMNTP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LS_SPARAM-PID.
      endif.
    endif.

    if LR_CUELMNT             is bound and
       LR_CUELMNT->R_REGELMNT is bound.

      move LR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LS_SPARAM-CID.

***   Get Supervised Parameters
      loop at LR_CUELMNT->R_REGELMNT->/VCXI/IF_VKSC_REGELMNT_PARAM~T_REGELMNT_PARAM
         into LS_REGELMNT_PARAM
        where PARSP eq ABAP_TRUE.
        move LS_REGELMNT_PARAM-R_PARAM->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LS_SPARAM-PARID.
        append LS_SPARAM to ME->T_SPARAM.
      endloop.

    endif.

    clear: LS_SPARAM.

  endloop.

endmethod.
method GET_EVENTS.

*** Get Events
  select *
    into table ME->T_TC01
    from YHP_SMD_AIS_TC01.                              "#EC CI_NOWHERE

endmethod.
method VALIDATE_CHILDREN.
  data lv_call type int4.

  field-symbols: <S_SVCEL> type ZVCXI_XCI_S_SVCEL.

  clear EF_NODATA.

*** Check for child with valid data
  loop at IT_SVCEL assigning <S_SVCEL> where IPARE     eq IS_SVCEL-ISELF
                                         and CPARE     eq IS_SVCEL-CSELF
                                         and ( LEOKY   is not initial
                                          or   T_SVCPA is not initial ).
    exit.
  endloop.
  if SY-SUBRC ne 0.

*** Check for empty children
    loop at IT_SVCEL assigning <S_SVCEL> where IPARE   eq IS_SVCEL-ISELF
                                           and CPARE   eq IS_SVCEL-CSELF
                                           and LEOKY   is initial
                                           and T_SVCPA is initial.
      lv_call = iv_call + 1. "JBL 18/10/2022 Avoid executing forever
      if lv_call ge 2.
      EXIT.
      endif.
    "JBL 18/10/2022 Avoid executing forever. Check that identifiers are real identifiers


      ME->VALIDATE_CHILDREN( exporting IS_SVCEL  = <S_SVCEL>
                                       IT_SVCEL  = IT_SVCEL
                                       iv_call   = lv_call
                             importing EF_NODATA = EF_NODATA ).
      if EF_NODATA = ABAP_FALSE.
        exit.
      endif.
    endloop.

*** No child node
    if SY-SUBRC ne 0.
      EF_NODATA = ABAP_TRUE.
    endif.

  endif.

endmethod.
method VALIDATE_SVCEL.

  data: LF_NODATA type ABAP_BOOL.
  data ls_ids type ZVCXI_XCI_S_SVCEL.

  field-symbols: <S_SVCEL> type ZVCXI_XCI_S_SVCEL.

  loop at CT_SVCEL assigning <S_SVCEL> where LEOKY   is initial
                                         and T_SVCPA is initial.
    ME->VALIDATE_CHILDREN( exporting IS_SVCEL  = <S_SVCEL>
                                     IT_SVCEL  = CT_SVCEL
                           importing EF_NODATA = LF_NODATA ).
    if LF_NODATA = ABAP_TRUE.
      clear <S_SVCEL>-ISELF.
    endif.
    clear: LF_NODATA.
  endloop.

  delete CT_SVCEL where ISELF is initial.
*JBL 19/10/2022 validate IDs
   loop at CT_SVCEL assigning <S_SVCEL>.
   if <S_SVCEL>-IPARE is not initial.
   read table T_IDS into ls_ids with key ISELF = <S_SVCEL>-IPARE.
   if sy-subrc <> 0.
   move <S_SVCEL>-IPARE to EV_ID_INVALID.
   EXIT.
   endif.
   endif.
   read table T_IDS into ls_ids with key ISELF = <S_SVCEL>-ISELF.
   if sy-subrc <> 0.
   move <S_SVCEL>-ISELF to EV_ID_INVALID.
   EXIT.
   endif.


  endloop.
endmethod.
