
class YCL_HP_SVCS_IDAT_SVC definition
  public
  final
  create public .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  constants C_FCODE_CHECK type UI_FUNC value 'CHECK' ##NO_TEXT.
  constants C_FCODE_DELETE type UI_FUNC value 'DELETE' ##NO_TEXT.
  constants C_FCODE_FREE type UI_FUNC value 'FREE' ##NO_TEXT.
  constants C_FCODE_SAVE type UI_FUNC value 'SAVE' ##NO_TEXT.
  constants C_TIDAT_SVC type ZVCXI_XCI_TIDAT value 'SVC' ##NO_TEXT.
  constants C_UPDKZ_DELETE type UPDKZ_D value 'D' ##NO_TEXT.
  data F_DELETED type ABAP_BOOL read-only .
  data F_FREED type ABAP_BOOL read-only .
  data F_IEALI type /VCXI/VKSC_IEALI read-only .
  data R_CUPRFL type ref to /VCXI/CL_VKSC_CUPRFL .
  data S_SVCAD type ZVCXI_XCI_S_SVCAD read-only .
  data T_SVCEL type ZVCXI_XCI_TT_SVCEL read-only .
  data T_SVCRT type ZVCXI_XCI_TT_SVCRT read-only .

  methods ADD_SVCEL
    importing
      !IF_IPARE type /VCXI/CKX_ID optional
      !IF_CPARE type /VCXI/VKSR_REPNR optional
      !IF_ISELF type /VCXI/CKX_ID
      !IR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT optional
    returning
      value(RF_CSELF) type /VCXI/VKSR_REPNR
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IS_CMPRK type /VCXI/VKC_S_CMPRK
      !IF_IEALI type /VCXI/VKSC_IEALI
    returning
      value(RR_IDAT_SVC) type ref to YCL_HP_SVCS_IDAT_SVC
    raising
      /VCXI/CX_CKX .
  methods DELETE_SVCEL
    importing
      !IF_ISELF type /VCXI/CKX_ID
      !IF_CSELF type /VCXI/VKSR_REPNR
    raising
      /VCXI/CX_CKX .
  class-methods DESERIALIZE
    importing
      !IF_XML type /VCXI/CKX_STRING
    returning
      value(RR_IDAT_SVC) type ref to YCL_HP_SVCS_IDAT_SVC
    raising
      /VCXI/CX_CKX .
  class-methods FIND_CUELMNT
    importing
      !IR_CUPRFL type ref to /VCXI/CL_VKSC_CUPRFL optional
      !IR_CUELMNT_PARENT type ref to /VCXI/CL_VKSC_CUELMNT optional
      !IF_ID type /VCXI/CKX_ID optional
      !IF_IEALI type /VCXI/VKSC_IEALI optional
    returning
      value(RR_CUELMNT) type ref to /VCXI/CL_VKSC_CUELMNT
    raising
      /VCXI/CX_CKX .
  class-methods FIND_SVCEL
    importing
      !IF_ID type /VCXI/CKX_ID optional
      !IF_LEVEL_START type /VCXI/VKSR_LEVEL optional
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    returning
      value(RR_SVCEL) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods SERIALIZE
    exporting
      !ET_DATA type ABAP_TRANS_SRCBIND_TAB
    returning
      value(RF_XML) type /VCXI/CKX_STRING
    raising
      /VCXI/CX_CKX .
  methods SET_DESCR
    importing
      !IF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_SVCAD
    importing
      !IS_SVCAD type ZVCXI_XCI_S_SVCAD
    raising
      /VCXI/CX_CKX .
  methods SET_SVCEL
    importing
      !IT_SVCEL type ZVCXI_XCI_TT_SVCEL
    raising
      /VCXI/CX_CKX .
  methods SET_SVCRT
    importing
      !IF_IEALI type /VCXI/VKSC_IEALI
      !IF_RTERD type ZVCXI_XCSR_RTERD optional
      !IF_RTEOP type ZVCXI_XCSR_RTEOP optional
      !IF_RELCO type ZVCXI_XCSR_RELCO optional
      !IT_ARBPL type ZVCXI_XCI_TT_ARBPL optional
      !IF_GUID_RTESEL type /VCXI/CKX_GUID optional
      !IT_XML_BL_PRTE type ZVCXI_XCSR_TT_XML_BL_PRTE optional
    raising
      /VCXI/CX_CKX .
  methods FILL_BY_SVCEL
    importing
      !IF_IPARE type /VCXI/CKX_ID
      !IF_CPARE type /VCXI/VKSR_REPNR
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT
      !IR_ADAPTOR type ref to ZIF_VCXI_XCI_IDAT_SVC_ADAPTOR optional
      !IF_WITH_LEVEL type ABAP_BOOL default ABAP_FALSE
      !IF_DEPTH type I default -1
    raising
      /VCXI/CX_CKX .
  methods FILL_BY_SVC
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IR_ADAPTOR type ref to ZIF_VCXI_XCI_IDAT_SVC_ADAPTOR optional
      !IF_WITH_LEVEL type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SVCEL
    importing
      !IS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_NIDAT type ZVCXI_XCI_NIDAT optional
      !IF_NEW type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  class-methods GET_ROOT_SVCEL
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IF_IEALI type /VCXI/VKSC_IEALI
    returning
      value(RT_SVCEL) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods GET_DETAILS_ORDER
    importing
      !IF_VBELN type VBELN_VA
    exporting
      !ET_RETURN type BAPIRET2
    raising
      /VCXI/CX_CKX .
  methods CHECK_REVRF
    importing
      !IF_VBELN type VBELN_VA
      !IF_POSNR type POSNR_VA
      !IR_SVC_ELEMENT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(EF_REVRV) type FLAG .
protected section.

  data F_CHANGED type ABAP_BOOL .
  data F_DESCR type /VCXI/CKX_DESCR .

  methods FILL_BY_RTESPV
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IR_ADAPTOR type ref to ZIF_VCXI_XCI_IDAT_SVC_ADAPTOR
    raising
      /VCXI/CX_CKX .
  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHECK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
  methods SORT_SVCEL
    raising
      /VCXI/CX_CKX .
private section.

  constants C_NIDAT_TMP type ZVCXI_XCI_NIDAT value '9000000000' ##NO_TEXT.
  data F_LOCKED type /VCXI/CKX_LOCKED .
  data F_NIDAT type ZVCXI_XCI_NIDAT .
  data S_LOG type /VCXI/CKX_S_LOG .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .

  class-methods GET_TMP_NIDAT
    returning
      value(RF_NIDAT) type ZVCXI_XCI_NIDAT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods INIT_AFTER_CREATE
    importing
      !IS_CMPRK type /VCXI/VKC_S_CMPRK
      !IF_IEALI type /VCXI/VKSC_IEALI
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
  methods REPLACE_TMP_NIDAT
    raising
      /VCXI/CX_CKX .
endclass. "YCL_HP_SVCS_IDAT_SVC definition
class YCL_HP_SVCS_IDAT_SVC implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.
endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.
    when C_FCODE_SAVE.
      ME->HANDLE_SAVE( ).
    when C_FCODE_DELETE.
      ME->HANDLE_DELETE( ).
    when C_FCODE_FREE.
      ME->HANDLE_FREE( ).
  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
*** Object is not locked - No changes possible!
    raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/CKX'
            F_MSGNO = '201'.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK.

***--------------------------------------------------------------------------------------
*** Set Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK.

***--------------------------------------------------------------------------------------
*** Remove Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED.

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.
endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.
endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  move ME->F_NIDAT to RF_GUID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  move ME->F_NIDAT to RF_ID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LF_NIDAT      type        ZVCXI_XCI_NIDAT.
  data:  LS_INSTANCE   type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_IDAT_SVC   type ref to YCL_HP_SVCS_IDAT_SVC. "ZCL_VCXI_XCI_IDAT_SVC.

***------------------------------------------------------------------------------------------------
*** Get Instance with GUID
  read table T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.
    move IF_GUID to LF_NIDAT.
    create object LR_IDAT_SVC
      exporting
        IF_NIDAT = LF_NIDAT.
    move LR_IDAT_SVC to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

  move ME->S_LOG to RS_LOG.

endmethod.
method ADD_SVCEL.

  data:          LF_IEVNS           type /VCXI/VKSC_IEVNS.
  data:          LS_SVCEL           type ZVCXI_XCI_S_SVCEL,
                 LS_REGELMNT_PARAM  type /VCXI/VKSC_S_REGELMNT_PARAM,
                 LS_REGELMNT_EVNT   type /VCXI/VKSC_S_REGELMNT_EVNT.
  field-symbols: <S_SVCEL>          type ZVCXI_XCI_S_SVCEL,
                 <S_SVCPA>          type ZVCXI_XCI_S_SVCPA,
                 <S_SVCEV>          type ZVCXI_XCI_S_SVCEV.

***--------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***--------------------------------------------------------------------------------------
*** Get next available Counter
  loop at ME->T_SVCEL into LS_SVCEL where ISELF eq IF_ISELF.
    if LS_SVCEL-CSELF gt RF_CSELF.
      move LS_SVCEL-CSELF to RF_CSELF.
    endif.
  endloop.
  add 1 to RF_CSELF.

*** Add Entry
  append initial line to ME->T_SVCEL assigning <S_SVCEL>.
  move IF_IPARE to <S_SVCEL>-IPARE.
  move IF_CPARE to <S_SVCEL>-CPARE.
  move IF_ISELF to <S_SVCEL>-ISELF.
  move RF_CSELF to <S_SVCEL>-CSELF.

***--------------------------------------------------------------------------------------
*** Default
  if IR_CUELMNT             is bound and
     IR_CUELMNT->R_REGELMNT is bound.

*** Add all supervised Parameter
    loop at IR_CUELMNT->R_REGELMNT->/VCXI/IF_VKSC_REGELMNT_PARAM~T_REGELMNT_PARAM into LS_REGELMNT_PARAM
                                                                                where PARSP eq ABAP_TRUE.
      append initial line to <S_SVCEL>-T_SVCPA assigning <S_SVCPA>.
      move LS_REGELMNT_PARAM-R_PARAM->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to <S_SVCPA>-PARID.
    endloop.

*** Add all Outbound Event
    loop at IR_CUELMNT->R_REGELMNT->/VCXI/IF_VKSC_REGELMNT_EVNT~T_REGELMNT_EVNT into LS_REGELMNT_EVNT
                                                                                where TEVNT eq /VCXI/IF_VKSC_REGELMNT_EVNT=>C_TEVNT_O.
      add 10 to LF_IEVNS.
      append initial line to <S_SVCEL>-T_SVCEV assigning <S_SVCEV>.
      move LF_IEVNS               to <S_SVCEV>-IEVNS.
      move LS_REGELMNT_EVNT-IEVNT to <S_SVCEV>-IEVNT.
    endloop.
  endif.

***--------------------------------------------------------------------------------------
*** Sort SmartVC Elements
  ME->SORT_SVCEL( ).

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
  method CHECK_REVRF.
  endmethod.
method CONSTRUCTOR.

  data:          LR_CX_CKX         type ref to /VCXI/CX_CKX.
  field-symbols: <S_INSTANCE>      type        /VCXI/CKX_S_OBJECT_INSTANCE.

  try.
***------------------------------------------------------------------------------------------------
      move IF_NIDAT  to ME->F_NIDAT.
      if IF_NEW ne ABAP_TRUE.
***     Load from DB
        ME->LOAD_FROM_DB( ).
      endif.

***------------------------------------------------------------------------------------------------
***   Add instance to instance buffer
      append initial line to T_INSTANCE assigning <S_INSTANCE>.
      move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to <S_INSTANCE>-GUID.
      move ME                                  to <S_INSTANCE>-R_OBJECT.

***   Set Event Handler
      set handler ME->HANDLE_CHANGED        for ME.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->HANDLE_FREE( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method CREATE.

  data:  LF_NIDAT type ZVCXI_XCI_NIDAT.

***----------------------------------------------------------------------------
  if IS_CMPRK-CMATN is initial or
     IS_CMPRK-PRFID is initial.
*** Config. Material and/or Profile Key is not defined.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCI'
                                          IF_MSGNO = '101' ).
  endif.
  if IF_IEALI is initial.
*** Alias is not defined.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCI'
                                          IF_MSGNO = '102' ).
  endif.

***----------------------------------------------------------------------------
*** Get next temporary Number
  LF_NIDAT = GET_TMP_NIDAT( ).

***----------------------------------------------------------------------------
*** Create new
  create object RR_IDAT_SVC
    exporting
      IF_NIDAT = LF_NIDAT
      IF_NEW   = ABAP_TRUE.

*** Initialize after Create
  RR_IDAT_SVC->INIT_AFTER_CREATE( IS_CMPRK = IS_CMPRK
                                  IF_IEALI = IF_IEALI ).

endmethod.
method DELETE_SVCEL.

  data:  LS_SVCEL   type ZVCXI_XCI_S_SVCEL.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Delete Children
  loop at ME->T_SVCEL into LS_SVCEL where IPARE eq IF_ISELF
                                     and  CPARE eq IF_CSELF.
    ME->DELETE_SVCEL( IF_ISELF = LS_SVCEL-ISELF
                      IF_CSELF = LS_SVCEL-CSELF ).
  endloop.

*** Delete Entry
  delete ME->T_SVCEL where ISELF eq IF_ISELF
                      and  CSELF eq IF_CSELF.

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
  method DESERIALIZE.

    data: LF_IEALI type /VCXI/VKSC_IEALI.
    data: LS_CMPRK type /VCXI/VKC_S_CMPRK.
    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


*** Check that XML is not initial
    check IF_XML is not initial.

***------------------------------------------------------------------------------------------------
*** Open XML for Key
    call transformation ID
         source xml IF_XML
         result IEALI   = LF_IEALI
                S_CMPRK = LS_CMPRK.

    check LF_IEALI is not initial and
          LS_CMPRK is not initial.

*** Create Integration Data
    RR_IDAT_SVC = YCL_HP_SVCS_IDAT_SVC=>CREATE( IS_CMPRK = LS_CMPRK
                                                 IF_IEALI = LF_IEALI ).


***------------------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = RR_IDAT_SVC->GET_XML_DREF( ).
    delete LT_DATA where NAME = 'IEALI'
                    or   NAME = 'S_CMPRK'.

*** Create XML
    call transformation ID
         source xml IF_XML
         result (LT_DATA).

  endmethod.
  method FILL_BY_RTESPV.

    data: LF_GUID_RTESEL type /VCXI/CKX_GUID,
          LF_IEALI       type /VCXI/VKSC_IEALI.
    data: LT_BL_PRTE     type ZVCXI_XCSR_TT_BL_PRTE,
          LT_XML_BL_PRTE type ZVCXI_XCSR_TT_XML_BL_PRTE.
    data: LR_EA_RTESPV type ref to ZCL_VCXI_XCSR_EA_RTESPV,
          LR_RTESEL    type ref to ZCL_VCXI_XCSR_BL_PRTE,
          LR_BL_PRTE   type ref to ZCL_VCXI_XCSR_BL_PRTE.
    field-symbols: <S_XML_BL_PRTE>  type ZVCXI_XCSR_S_XML_BL_PRTE.


    check IR_SVCEL is bound.

***--------------------------------------------------------------------------------------
*** Get Element API for Routing Supervisor
    try.
        LR_EA_RTESPV ?= IR_SVCEL->GET_CLSEA( ).
        check LR_EA_RTESPV is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.

***--------------------------------------------------------------------------------------
*** Get User Routes
    append lines of LR_EA_RTESPV->GET_RTEALT( ) to LT_BL_PRTE.
    append lines of LR_EA_RTESPV->GET_RTEINV( ) to LT_BL_PRTE.
    delete LT_BL_PRTE where TABLE_LINE->R_RTE_PRTE->F_RSRCE ne ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.

*** Get Selected Route
    LR_RTESEL = LR_EA_RTESPV->GET_RTESEL( ).

*** Serialize all Routes and assign a GUID
    loop at LT_BL_PRTE into LR_BL_PRTE.
      try.
          append value #( GUID_BL_PRTE = CL_SYSTEM_UUID=>IF_SYSTEM_UUID_STATIC~CREATE_UUID_C22( )
                          XML          = LR_BL_PRTE->SERIALIZE( )
                        ) to LT_XML_BL_PRTE assigning <S_XML_BL_PRTE>.
        catch CX_UUID_ERROR into data(LR_CX_UUID_ERROR).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_UUID_ERROR ).
      endtry.

***   Keep GUID of Selected Route
      if LR_EA_RTESPV->GET_RTEOP( ) ne ZCL_VCXI_XCSR_PR_RTESPV=>C_RTEOP_AUTO and
         LR_BL_PRTE eq LR_RTESEL.
        move <S_XML_BL_PRTE>-GUID_BL_PRTE to LF_GUID_RTESEL.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Get Elemant Alias ID of Routing Supervisor
    if IR_ADAPTOR is bound.
      LF_IEALI = IR_ADAPTOR->GET_RTESPV_IEALI( IR_SVCEL = IR_SVCEL ).
    endif.

*** Set Routing Definition
    ME->SET_SVCRT( IF_IEALI       = LF_IEALI
                   IF_RTERD       = LR_EA_RTESPV->GET_RTERD( )
                   IF_RTEOP       = LR_EA_RTESPV->GET_RTEOP( )
                   IF_RELCO       = LR_EA_RTESPV->GET_RELCO( )
                   IF_GUID_RTESEL = LF_GUID_RTESEL
                   IT_XML_BL_PRTE = LT_XML_BL_PRTE ).

  endmethod.
  method FILL_BY_SVC.

    data: LR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT,
          LR_SVCEL   type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT  type ref to /VCXI/IF_CKX_OBJECT.


*** Get Integration Data Supervisor
    LR_CUELMNT = ZCL_VCXI_XCI_IDAT_SVC=>FIND_CUELMNT( IR_CUPRFL = ME->R_CUPRFL
                                                      IF_IEALI  = ME->F_IEALI ).
    check LR_CUELMNT is bound.

*** Get Root Elements
    loop at IR_SVC->GET_SVC_ELEMENTS( IR_SVC_ELEMENT_PARENT = value #( ) ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

***   Filter to Supervised Root Elements
      clear LR_OBJECT.
      loop at LR_CUELMNT->/VCXI/IF_VKSC_CUELMNT_SPV~T_SPVRT into LR_OBJECT.
        if LR_OBJECT->GET_ID( ) eq LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
          exit.
        else.
          clear LR_OBJECT.
        endif.
      endloop.
      check LR_OBJECT is bound.

***   Fill by SmartVC Element
      ME->FILL_BY_SVCEL( IF_IPARE      = value #( )
                         IF_CPARE      = value #( )
                         IR_SVC        = IR_SVC
                         IR_SVCEL      = LR_SVCEL
                         IR_CUELMNT    = cast #( LR_OBJECT )
                         IF_WITH_LEVEL = IF_WITH_LEVEL
                        ).
    endloop.

  endmethod.
  method FILL_BY_SVCEL.

    data: LF_DEPTH         type I,
          LF_PARID         type /VCXI/VKS_PARID,
          LF_ID            type /VCXI/CKX_ID,
          LF_SKIP_CHILDREN type ABAP_BOOL.
    data: LS_SVCEL          type ZVCXI_XCI_S_SVCEL,
          LS_LEOKY          type /VCXI/VKSR_S_LEOKY,
          LS_REGELMNT_PARAM type /VCXI/VKSC_S_REGELMNT_PARAM.
    data: LT_PARAM   type /VCXI/VKSR_TT_PARAM,
          LT_SVCEL   type /VCXI/CKX_TT_OBJECT,
          LT_CUELMNT type /VCXI/CKX_TT_OBJECT.
    data: LR_SVCEL     type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT,
          LR_CUELMNT   type ref to /VCXI/CL_VKSC_CUELMNT,
          LR_EA_RTESPV type ref to ZCL_VCXI_XCSR_EA_RTESPV.


    LF_DEPTH = IF_DEPTH.

*** Only add Elements that are in use
    check IR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Special Handlings for Routing Supervisor
    data LR_RTESPV type ref to ZCL_VCXI_XCSR_EA_RTESPV.
    try.
        LR_RTESPV ?= IR_SVCEL->GET_CLSEA( ).
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.
    if LR_RTESPV is bound.

      ME->FILL_BY_RTESPV( IR_SVCEL   = IR_SVCEL
                          IR_ADAPTOR = IR_ADAPTOR ).
      exit.
    endif.

***--------------------------------------------------------------------------------------
*** Get Element ID
    move IR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LS_SVCEL-ISELF.
    move IF_IPARE to LS_SVCEL-IPARE.
    move IF_CPARE to LS_SVCEL-CPARE.

*** Add Element and receive own Counter
    LS_SVCEL-CSELF = ME->ADD_SVCEL( IF_IPARE = LS_SVCEL-IPARE
                                    IF_CPARE = LS_SVCEL-CPARE
                                    IF_ISELF = LS_SVCEL-ISELF ).

*** Copy Position
    move IR_SVCEL->GET_POSID( )  to LS_SVCEL-POSID.

*** Get Level if reqested
    if IF_WITH_LEVEL eq ABAP_TRUE.
      LS_SVCEL-LEVEL = IR_SVCEL->GET_LEVEL( ).
    endif.

    if IR_CUELMNT             is bound and
       IR_CUELMNT->R_REGELMNT is bound.

***   Copy Leading Object Key
      move IR_SVCEL->GET_LEOKY( )  to LS_LEOKY.
      move LS_LEOKY-LEOKY          to LS_SVCEL-LEOKY.
      move LS_LEOKY-SETBY          to LS_SVCEL-SETBY.

***   Copy supervised Parameter
      move IR_SVCEL->GET_PARAM_ALL( ) to LT_PARAM.

      loop at IR_CUELMNT->R_REGELMNT->/VCXI/IF_VKSC_REGELMNT_PARAM~T_REGELMNT_PARAM
           into LS_REGELMNT_PARAM where PARSP eq ABAP_TRUE.

***     Get Parameter Value
        move LS_REGELMNT_PARAM-R_PARAM->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_PARID.
        check LINE_EXISTS( LT_PARAM[ PARID = LF_PARID ] ).

***     Add Parameter
        append corresponding #( LT_PARAM[ PARID = LF_PARID ] ) to LS_SVCEL-T_SVCPA.
      endloop.

***   Adjust SmartVC Element Values in Integration Data
      if IR_ADAPTOR is bound.
*        IR_ADAPTOR->ADJUST_SVCEL( exporting IR_SVCEL         = IR_SVCEL
*                                            IR_IDAT_SVC      = ME
*                                  changing  CS_SVCEL         = LS_SVCEL
*                                            CF_DEPTH         = LF_DEPTH ).
      endif.
    endif.

*** Set Information to Integration Data Service
    ME->UPDATE_SVCEL( IS_SVCEL = LS_SVCEL ).


***--------------------------------------------------------------------------------------
    check LF_DEPTH ne 0.

*** Fill Integration Data of Children
    LT_SVCEL   = IR_SVCEL->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
    IR_SVC->SORT_SVC_ELEMENTS( changing CT_SVC_ELEMENT = LT_SVCEL ).
    LT_CUELMNT = IR_CUELMNT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).

    loop at LT_SVCEL into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.
      check LR_SVCEL->IS_INUSE( ) eq ABAP_TRUE.

***   Adjust ID for Elements which get replaced
      LF_ID = LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      if IR_ADAPTOR is bound.
        IR_ADAPTOR->ADJUST_ID( exporting IR_SVCEL = LR_SVCEL
                               changing  CF_ID    = LF_ID ).
      endif.
      check LF_ID is not initial.

***   Find matching Customizing Element
      loop at LT_CUELMNT into LR_OBJECT.
        move LR_OBJECT ?to LR_CUELMNT.
        if LR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq LF_ID.
          exit.
        else.
          clear LR_CUELMNT.
        endif.
      endloop.
      check LR_CUELMNT is bound.

***   Standard Copy
      ME->FILL_BY_SVCEL( IF_IPARE      = LS_SVCEL-ISELF
                         IF_CPARE      = LS_SVCEL-CSELF
                         IR_SVC        = IR_SVC
                         IR_SVCEL      = LR_SVCEL
                         IR_CUELMNT    = LR_CUELMNT
                         IR_ADAPTOR    = IR_ADAPTOR
                         IF_WITH_LEVEL = IF_WITH_LEVEL
                         IF_DEPTH      = LF_DEPTH - 1 ).
    endloop.

  endmethod.
  method FIND_CUELMNT.

    data: LT_OBJECT  type        /VCXI/CKX_TT_OBJECT.
    data: LR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT,
          LR_OBJECT  type ref to /VCXI/IF_CKX_OBJECT.


***--------------------------------------------------------------------------------------
*** Collect potential Customizing Element
    if IR_CUELMNT_PARENT is not bound.
***   Get all Elements
      LT_OBJECT = IR_CUPRFL->GET_REGISTERED_CUELMNT( ).
    else.
***   Get Children of Parent Customizing Element
      LT_OBJECT = IR_CUELMNT_PARENT->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
    endif.

***--------------------------------------------------------------------------------------
*** Search for Match
    loop at LT_OBJECT into LR_OBJECT.
      move LR_OBJECT ?to LR_CUELMNT.

***   Find by ID
      if IF_ID is supplied.
        if LR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_ID( )        cs IF_ID      and
           LR_CUELMNT->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( )  eq IR_CUELMNT_PARENT.
          move LR_CUELMNT to RR_CUELMNT.
          exit.
        else.
          clear LR_CUELMNT.
        endif.

***   Find by Alias
      elseif IF_IEALI is supplied.
        loop at LR_CUELMNT->/VCXI/IF_VKSC_CUELMNT_CEALI~T_CEALI into LR_OBJECT.
          if LR_OBJECT->GET_ID( ) eq IF_IEALI.
            move LR_CUELMNT to RR_CUELMNT.
            exit.
          endif.
        endloop.

***   Wrong Parameters
      else.
        raise exception type /VCXI/CX_CKX.
      endif.
    endloop.

  endmethod.
  method FIND_SVCEL.

    data: LT_SVCEL  type        /VCXI/CKX_TT_OBJECT.
    data: LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.


    if IF_LEVEL_START is not initial.
***   Get SVC Element with requested Level
      LT_SVCEL = IR_SVC->GET_SVC_ELEMENTS( IF_LEVEL = IF_LEVEL_START ).
      LR_SVCEL ?= value #( LT_SVCEL[ 1 ] optional ).
      check LR_SVCEL is bound.

      if IF_ID is supplied.
***     Check if Starting Element as requested ID
        if LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ) cs IF_ID.
          move LR_SVCEL to RR_SVCEL.
          exit.
        endif.

***     Look for Child with requested ID
        loop at LR_SVCEL->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
          if LR_OBJECT->GET_ID( ) cs IF_ID.
            RR_SVCEL ?= LR_OBJECT.
            exit.
          endif.
        endloop.

      else.
***     Direct rturn of result
        RR_SVCEL = LR_SVCEL.
      endif.

    else.
***   Root is needed
      clear LR_SVCEL.
      LT_SVCEL = IR_SVC->GET_SVC_ELEMENTS( IR_SVC_ELEMENT_PARENT = LR_SVCEL ).
      loop at LT_SVCEL into LR_OBJECT.
        if LR_OBJECT->GET_ID( ) cs IF_ID.
          RR_SVCEL ?= LR_OBJECT.
          exit.
        endif.
      endloop.
    endif.

  endmethod.
  method GET_DETAILS_ORDER.

    data: I_BAPI_VIEW       type ORDER_VIEW,
          SALES_DOCUMENTS   type standard table of SALES_KEY,
          ORDER_ITEMS_OUT   type standard table of BAPISDIT,
          ORDER_HEADERS_OUT type standard table of BAPISDHD,
          ORDER_HEADER_INX  type standard table of BAPISDH1X.

    DATA: LR_SVC    type ref to /VCXI/CL_VKSRA_SVC,
          LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
    DATA: LT_SVCEL   type        /VCXI/CKX_TT_OBJECT.
    data: LF_CUOBJ type CUOBJ,
          LF_REVRV TYPE FLAG.



*    ***GET LIST OF ITEMS IN QUOTATION
    call function 'BAPISDORDER_GETDETAILEDLIST'
      exporting
        I_BAPI_VIEW       = I_BAPI_VIEW
      tables
        SALES_DOCUMENTS   = SALES_DOCUMENTS
        ORDER_HEADERS_OUT = ORDER_HEADERS_OUT
        ORDER_ITEMS_OUT   = ORDER_ITEMS_OUT.


    loop at ORDER_ITEMS_OUT into data(SL_ORDER_ITEMS_OUT) where REA_FOR_RE eq 'Z4'.


      "1 BEGIN REVISION DE LOS ITEM PARA SABER SI YA EXISTE UNO QUE TENGA EL VBEL + POSNR
      loop at ORDER_ITEMS_OUT into data(SL_ORDER_ITEMS_OUTV) where REA_FOR_RE ne 'Z4'.

        "GET CONFIGURACION FROM CUOBJ
        LF_CUOBJ = SL_ORDER_ITEMS_OUT-CONFIG.

*    "1) Get GUID of VC Instance from CUOBJ
        data(LF_GVCIN_POS) = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( LF_CUOBJ ).

*     "Get SmartVC API Instance
        LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = LF_CUOBJ ) ).

**      *** Get Components Assembly component
*    LT_SVCEL = LR_SVC->GET_SVC_ELEMENTS( IF_ID    = 'COMP_P3'
*                                         IF_INUSE = ABAP_TRUE ).
****--------------------------------------------------------------------------------------
*** Get Components
    append lines of LR_SVC->GET_SVC_ELEMENTS( IF_ID    = 'COMP_P1'
                                              IF_INUSE = ABAP_TRUE ) to LT_SVCEL.

***--------------------------------------------------------------------------------------
*** Get FCFG Component
    append lines of LR_SVC->GET_SVC_ELEMENTS( IF_ID    = 'COMP_P2'
                                              IF_INUSE = ABAP_TRUE ) to LT_SVCEL.
*** -------------------------------------------------------------------------------------
*** Get Purchased Components
    append lines of LR_SVC->GET_SVC_ELEMENTS( IF_ID    = 'COMP_P4'
                                              IF_INUSE = ABAP_TRUE ) to LT_SVCEL.


*    *** Get Corr Components VE
    loop at LT_SVCEL into LR_OBJECT.
      try.
          move LR_OBJECT ?to LR_SVCEL.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_SVCEL.
      endtry.

***   Value Extraction
      try.

***       Get Value EN UNA REVREF CREAR METODO PARA CON EL LR_SVCEL ME REGRESE SI TIENE O NO TIENE REVFEV DE ESA POSICION
*VAMOS A ENVIAR DE PARAMETROS IMPORT VBELN & POSNR
            LF_REVRV = ME->CHECK_REVRF( IF_VBELN       = SL_ORDER_ITEMS_OUTV-DOC_NUMBER
                                        IF_POSNR       = SL_ORDER_ITEMS_OUTV-ITM_NUMBER
                                        IR_SVC_ELEMENT = LR_SVCEL ).
        IF LF_REVRV IS NOT INITIAL. "YA EXISTE UN ITEM ASI
          EXIT.
        ENDIF.

        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          continue.
      endtry.

    endloop.



      endloop.
      "1 END REVISION DE LOS ITEMS PARA SABER SI YA EXISTE UNO QUE TENGA EL VBELN + POSNR


    endloop.




  endmethod.
  method GET_ROOT_SVCEL.

    data: LR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT,
          LR_SVCEL   type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT  type ref to /VCXI/IF_CKX_OBJECT.


*** Get Customizing Element of Integration Data Supervisor
    LR_CUELMNT = ZCL_VCXI_XCI_IDAT_SVC=>FIND_CUELMNT( IR_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = IR_SVC->S_CMPRK )
                                                      IF_IEALI  = IF_IEALI ).

*** Get Root Elements
    loop at IR_SVC->GET_SVC_ELEMENTS( IR_SVC_ELEMENT_PARENT = value #( ) ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

***   Filter to Supervised Root Elements
      clear LR_OBJECT.
      loop at LR_CUELMNT->/VCXI/IF_VKSC_CUELMNT_SPV~T_SPVRT into LR_OBJECT.
        if LR_OBJECT->GET_ID( ) ne LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
          clear LR_OBJECT.
        else.
          exit.
        endif.
      endloop.
      check LR_OBJECT is bound.

      append LR_SVCEL to RT_SVCEL.
    endloop.

  endmethod.
method GET_TMP_NIDAT.

  data:  LS_INSTANCE   type /VCXI/CKX_S_OBJECT_INSTANCE.

*** Start with temp. Number
  move C_NIDAT_TMP to RF_NIDAT.

*** Check for already existing temp. Instances
  loop at T_INSTANCE into LS_INSTANCE
                    where GUID ge C_NIDAT_TMP.
    if LS_INSTANCE-GUID gt RF_NIDAT.
      move LS_INSTANCE-GUID to RF_NIDAT.
    endif.
  endloop.

*** Get next Number
  add 1 to RF_NIDAT.

endmethod.
  method GET_XML_DREF.

    RT_DATA = value #( ( NAME = 'IEALI'     VALUE = ref #( ME->F_IEALI ) )
                       ( NAME = 'S_CMPRK'   VALUE = ref #( ME->R_CUPRFL->R_CVC_CUPRFL->S_CMPRK ) )
                       ( NAME = 'S_SVCAD'   VALUE = ref #( ME->S_SVCAD ) )
                       ( NAME = 'T_SVCEL'   VALUE = ref #( ME->T_SVCEL ) )
                       ( NAME = 'T_SVCRT'   VALUE = ref #( ME->T_SVCRT ) )
                      ).

  endmethod.
method HANDLE_CHANGED.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      move SY-UNAME     to ME->S_LOG-CHABY.
      get time stamp field ME->S_LOG-CHAAT.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_CHECK.
endmethod.
method HANDLE_DELETE.

***----------------------------------------------------------------------------
*** Mark as deleted
  move ABAP_TRUE to ME->F_DELETED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method HANDLE_FREE.

*** Remove Instance from Buffer
  delete T_INSTANCE where R_OBJECT eq ME.

*** Unlock
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

*** Mark as Freed
  move ABAP_TRUE to ME->F_FREED.

endmethod.
method HANDLE_SAVE.

*** Save only if changed
  check ME->F_CHANGED eq ABAP_TRUE.

*** Replace temporary Number
  ME->REPLACE_TMP_NIDAT( ).

***----------------------------------------------------------------------------
*** Set Changed Info to Log
  move SY-UNAME     to ME->S_LOG-CHABY.
  get time stamp field ME->S_LOG-CHAAT.

***----------------------------------------------------------------------------
  if ME->F_DELETED eq ABAP_FALSE.
*** Save Integration Data
    call function 'ZVCXI_XCI_DB_SAVE_IDAT_SVC'
      in update task
      exporting
        IF_NIDAT = ME->F_NIDAT
        IS_CMPRK = ME->R_CUPRFL->R_CVC_CUPRFL->S_CMPRK
        IF_IEALI = ME->F_IEALI
        IF_DESCR = ME->F_DESCR
        IS_SVCAD = ME->S_SVCAD
        IS_LOG   = ME->S_LOG
        IT_SVCEL = ME->T_SVCEL
        IT_SVCRT = ME->T_SVCRT.
  else.
*** Delete Integration Data
    call function 'ZVCXI_XCI_DB_DEL_IDAT_SVC'
      in update task
      exporting
        IF_NIDAT = ME->F_NIDAT.
  endif.

*** Reset Change Indicator
  move ABAP_FALSE to ME->F_CHANGED.

endmethod.
method INIT_AFTER_CREATE.

***----------------------------------------------------------------------------
*** Set lock for new object
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

***------------------------------------------------------------------
*** Set Config. Material & Profile Key
  ME->R_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = IS_CMPRK ).

*** Set Element Alias ID
  move IF_IEALI     to ME->F_IEALI.

***------------------------------------------------------------------
*** Write Create Log Entry
  move SY-UNAME     to ME->S_LOG-CREBY.
  get time stamp field ME->S_LOG-CREAT.

*** Raise Events
  raise event /VCXI/IF_CKX_OBJECT~CREATED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method LOAD_FROM_DB.

  data:          LS_TD100          type          ZVCXI_XCI_TD100,
                 LS_TD110          type          ZVCXI_XCI_TD110,
                 LS_TD111          type          ZVCXI_XCI_TD111,
                 LS_TD112          type          ZVCXI_XCI_TD112,
                 LS_TD120          type          ZVCXI_XCI_TD120,
                 LS_TD121          type          ZVCXI_XCI_TD121,
                 LS_TD122          type          ZVCXI_XCI_TD122,
                 LS_CMPRK          type          /VCXI/VKC_S_CMPRK.
  data:          LT_TD110          type table of ZVCXI_XCI_TD110,
                 LT_TD111          type table of ZVCXI_XCI_TD111,
                 LT_TD112          type table of ZVCXI_XCI_TD112,
                 LT_TD120          type table of ZVCXI_XCI_TD120,
                 LT_TD121          type table of ZVCXI_XCI_TD121,
                 LT_TD122          type table of ZVCXI_XCI_TD122.
  field-symbols: <S_SVCEL>         type          ZVCXI_XCI_S_SVCEL,
                 <S_SVCPA>         type          ZVCXI_XCI_S_SVCPA,
                 <S_SVCEV>         type          ZVCXI_XCI_S_SVCEV,
                 <S_SVCRT>         type          ZVCXI_XCI_S_SVCRT,
                 <S_ARBPL>         type          ZVCXI_XCI_S_ARBPL,
                 <S_XML_BL_PRTE>   type          ZVCXI_XCSR_S_XML_BL_PRTE.

  clear: ME->F_IEALI,
         ME->F_DESCR,
         ME->F_CHANGED,
         ME->S_LOG,
         ME->T_SVCEL,
         ME->T_SVCRT,
         ME->R_CUPRFL.

***--------------------------------------------------------------------------------------
*** Load Header
  select single *
         into LS_TD100
         from ZVCXI_XCI_TD100
        where NIDAT eq ME->F_NIDAT.

  if SY-SUBRC ne 0.
    raise exception type /VCXI/CX_CKX.
  endif.

*** Get Profile
  move-corresponding LS_TD100 to LS_CMPRK.
  ME->R_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = LS_CMPRK ).

*** Get Element Alias ID
  move LS_TD100-IEALI     to ME->F_IEALI.

*** Get Description
  move LS_TD100-DESCR     to ME->F_DESCR.

*** Get Log
  move-corresponding LS_TD100 to ME->S_LOG.


***--------------------------------------------------------------------------------------
*** Load SmartVC Elements, Parameter and Events
  select *
         into table LT_TD110
         from ZVCXI_XCI_TD110
        where NIDAT eq ME->F_NIDAT.
  select *
         into table LT_TD111
         from ZVCXI_XCI_TD111
        where NIDAT eq ME->F_NIDAT.
  select *
         into table LT_TD112
         from ZVCXI_XCI_TD112
        where NIDAT eq ME->F_NIDAT.

*** SmartVC Element
  loop at LT_TD110 into LS_TD110.
    append initial line to ME->T_SVCEL assigning <S_SVCEL>.
    move-corresponding LS_TD110 to <S_SVCEL>.
    <S_SVCEL>-LEVEL = LS_TD110-LSELF.

*** Parameter
    loop at LT_TD111 into LS_TD111 where ISELF eq LS_TD110-ISELF
                                    and  CSELF eq LS_TD110-CSELF.
      append initial line to <S_SVCEL>-T_SVCPA assigning <S_SVCPA>.
      move-corresponding LS_TD111 to <S_SVCPA>.
    endloop.

*** Event
    loop at LT_TD112 into LS_TD112 where ISELF eq LS_TD110-ISELF
                                    and  CSELF eq LS_TD110-CSELF.
      append initial line to <S_SVCEL>-T_SVCEV assigning <S_SVCEV>.
      move-corresponding LS_TD112 to <S_SVCEV>.
    endloop.
  endloop.

*** Sort SmartVC Elements
  ME->SORT_SVCEL( ).


***--------------------------------------------------------------------------------------
*** Load SmartVC Routing
  select *
         into table LT_TD120
         from ZVCXI_XCI_TD120
        where NIDAT eq ME->F_NIDAT.
  select *
         into table LT_TD121
         from ZVCXI_XCI_TD121
        where NIDAT eq ME->F_NIDAT.
  select *
         into table LT_TD122
         from ZVCXI_XCI_TD122
        where NIDAT eq ME->F_NIDAT.

  sort LT_TD121 by IEALI COPER.

*** SmartVC Routing
  loop at LT_TD120 into LS_TD120.
    append initial line to ME->T_SVCRT assigning <S_SVCRT>.
    move-corresponding LS_TD120 to <S_SVCRT>.

*** Work Center
    loop at LT_TD121 into LS_TD121 where IEALI eq LS_TD120-IEALI.
      append initial line to <S_SVCRT>-T_ARBPL assigning <S_ARBPL>.
      move-corresponding LS_TD121 to <S_ARBPL>.
    endloop.

*** XML of BL Production Route
    loop at LT_TD122 into LS_TD122 where IEALI eq LS_TD120-IEALI.
      append initial line to <S_SVCRT>-T_XML_BL_PRTE assigning <S_XML_BL_PRTE>.
      move-corresponding LS_TD122 to <S_XML_BL_PRTE>.
    endloop.
  endloop.

endmethod.
method REPLACE_TMP_NIDAT.

  data:          LF_NIDAT      type ZVCXI_XCI_NIDAT.
  data:          LS_TC001      type ZVCXI_XCI_TC001.
  field-symbols: <S_INSTANCE>  type /VCXI/CKX_S_OBJECT_INSTANCE.

*** Check for temp. Number
  check ME->F_NIDAT ge C_NIDAT_TMP.

*** Get current Instance
  read table T_INSTANCE assigning <S_INSTANCE>
                        with key GUID = ME->F_NIDAT.
  if SY-SUBRC ne 0.
    raise exception type /VCXI/CX_CKX.
  endif.

*** Get Integration Data Type
  select single *
         into LS_TC001
         from ZVCXI_XCI_TC001
        where TIDAT eq C_TIDAT_SVC.

*** Get next Number
  call function 'NUMBER_GET_NEXT'
    exporting
      NR_RANGE_NR             = LS_TC001-NRNR
      OBJECT                  = LS_TC001-NROBJ
    importing
      NUMBER                  = LF_NIDAT
    exceptions
      INTERVAL_NOT_FOUND      = 1
      NUMBER_RANGE_NOT_INTERN = 2
      OBJECT_NOT_FOUND        = 3
      QUANTITY_IS_0           = 4
      QUANTITY_IS_NOT_1       = 5
      INTERVAL_OVERFLOW       = 6
      BUFFER_OVERFLOW         = 7.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Replace Number
  move LF_NIDAT to ME->F_NIDAT.
  move LF_NIDAT to <S_INSTANCE>-GUID.

endmethod.
  method SERIALIZE.

*** Get Data References for XML Serialize/Deserialize
    ET_DATA = ME->GET_XML_DREF( ).

*** Create XML
    call transformation ID
         source (ET_DATA)
         result xml RF_XML.

  endmethod.
  method SET_DESCR.

***--------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
    ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***--------------------------------------------------------------------------------------
*** Set Description
    ME->F_DESCR = IF_DESCR.

***--------------------------------------------------------------------------------------
*** Raise Change Event
    raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  endmethod.
method SET_LOCK.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
***------------------------------------------------------------------
***   Write Lock Entry only for none temp. Number
      if ME->F_NIDAT lt C_NIDAT_TMP.

        if IF_LOCKED eq ABAP_TRUE.
***       Try to Set Write Lock
          call function 'ENQUEUE_EZVCXI_XCI_D100E'
            exporting
              NIDAT          = ME->F_NIDAT
            exceptions
              FOREIGN_LOCK   = 1
              SYSTEM_FAILURE = 2
              others         = 3.
          if SY-SUBRC ne 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.

        else.
***       Remove Write Lock
          call function 'DEQUEUE_EZVCXI_XCI_D100E'
            exporting
              NIDAT = ME->F_NIDAT.
        endif.

      endif.

***------------------------------------------------------------------
      move IF_LOCKED to ME->F_LOCKED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method SET_SVCAD.

***--------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***--------------------------------------------------------------------------------------
*** Set Application Data
  move IS_SVCAD to ME->S_SVCAD.

***--------------------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_SVCEL.

  data:  LF_TABIX   type I.
  data:  LS_SVCEL   type ZVCXI_XCI_S_SVCEL,
         LS_SVCPA   type ZVCXI_XCI_S_SVCPA.

***----------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Check for Changes
  check IT_SVCEL ne ME->T_SVCEL.

***----------------------------------------------------------------------------
*** Verify SmartVC Elements
  loop at IT_SVCEL into LS_SVCEL.
    LF_TABIX = SY-TABIX + 1.
    loop at IT_SVCEL from LF_TABIX
                     transporting no fields
                    where ISELF eq LS_SVCEL-ISELF
                     and  CSELF eq LS_SVCEL-CSELF.
    endloop.
    if SY-SUBRC eq 0.
***   SmartVC Element with ID & and Counter & already defined.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '110'
                                            IF_MSGV1 = LS_SVCEL-ISELF
                                            IF_MSGV2 = LS_SVCEL-CSELF ).
    endif.

*** Verify Parameter
    loop at LS_SVCEL-T_SVCPA into LS_SVCPA.
      LF_TABIX = SY-TABIX + 1.
      loop at LS_SVCEL-T_SVCPA from LF_TABIX
                               transporting no fields
                              where PARID eq LS_SVCPA-PARID.
      endloop.
      if SY-SUBRC eq 0.
***     Parameter & of SmartVC Element with & & already defined.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCI'
                                              IF_MSGNO = '111'
                                              IF_MSGV1 = LS_SVCPA-PARID
                                              IF_MSGV2 = LS_SVCEL-ISELF
                                              IF_MSGV3 = LS_SVCEL-CSELF ).
      endif.
    endloop.
  endloop.

***----------------------------------------------------------------------------
*** Set new SmartVC Elements
  move IT_SVCEL to ME->T_SVCEL.

*** Sort SmartVC Elements
  ME->SORT_SVCEL( ).

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_SVCRT.

  field-symbols: <S_SVCRT>   type ZVCXI_XCI_S_SVCRT.

***--------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***--------------------------------------------------------------------------------------
*** Find Entry
  read table ME->T_SVCRT assigning <S_SVCRT>
                          with key IEALI = IF_IEALI.
  if SY-SUBRC ne 0.
*** Add Entry
    append initial line to ME->T_SVCRT assigning <S_SVCRT>.
    move IF_IEALI to <S_SVCRT>-IEALI.
  endif.

*** Routing Redetermination
  if IF_RTERD is supplied.
    move IF_RTERD to <S_SVCRT>-RTERD.
  endif.

*** Routing Option
  if IF_RTEOP is supplied.
    move IF_RTEOP to <S_SVCRT>-RTEOP.
  endif.

*** Relevance Code
  if IF_RELCO is supplied.
    move IF_RELCO to <S_SVCRT>-RELCO.
  endif.

*** Requested Work Center Sequence
  if IT_ARBPL is supplied.
    move IT_ARBPL to <S_SVCRT>-T_ARBPL.
  endif.

*** Serialized Data
  if IF_GUID_RTESEL is supplied.
    move IF_GUID_RTESEL to <S_SVCRT>-GUID_RTESEL.
  endif.
  if IT_XML_BL_PRTE is supplied.
    move IT_XML_BL_PRTE to <S_SVCRT>-T_XML_BL_PRTE.
  endif.

***--------------------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SORT_SVCEL.

  field-symbols: <S_SVCEL>  type ZVCXI_XCI_S_SVCEL.

*** Sort by Position ID, ID and Counter
  sort ME->T_SVCEL by POSID ISELF CSELF.

  loop at ME->T_SVCEL assigning <S_SVCEL>.
*** Sort Parameters by Parameter ID
    sort <S_SVCEL>-T_SVCPA by PARID.

*** Sort Events by Sequence.
    sort <S_SVCEL>-T_SVCEV by IEVNS.

  endloop.

endmethod.
method UPDATE_SVCEL.

  data:          LF_TABIX    type I.
  data:          LS_SVCPA    type ZVCXI_XCI_S_SVCPA.
  field-symbols: <S_SVCEL>   type ZVCXI_XCI_S_SVCEL.

***--------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***--------------------------------------------------------------------------------------
*** Read current SmartVC Element
  read table ME->T_SVCEL assigning <S_SVCEL> with key ISELF = IS_SVCEL-ISELF
                                                      CSELF = IS_SVCEL-CSELF.
  check SY-SUBRC  eq 0 and
        <S_SVCEL> ne IS_SVCEL.

*** Verify Parameter
  loop at IS_SVCEL-T_SVCPA into LS_SVCPA.
    LF_TABIX = SY-TABIX + 1.
    loop at IS_SVCEL-T_SVCPA from LF_TABIX
                             transporting no fields
                            where PARID eq LS_SVCPA-PARID.
    endloop.
    if SY-SUBRC eq 0.
***   Parameter & of SmartVC Element with & & already defined.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '111'
                                            IF_MSGV1 = LS_SVCPA-PARID
                                            IF_MSGV2 = IS_SVCEL-ISELF
                                            IF_MSGV3 = IS_SVCEL-CSELF ).
    endif.
  endloop.

***--------------------------------------------------------------------------------------
*** Update SmartVC Element
  move IS_SVCEL to <S_SVCEL>.

*** Sort SmartVC Elements
  ME->SORT_SVCEL( ).

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
