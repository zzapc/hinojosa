
class YCL_HP_SVCS_POPUP_OPENSPV definition
  public
  create protected .

public section.

  constants C_BTYPE_BUTTON type TB_BTYPE value 0 ##NO_TEXT.
  constants C_BTYPE_SEPARATOR type TB_BTYPE value 3 ##NO_TEXT.
  constants C_FCODE_COL_ALL type UI_FUNC value 'COL_ALL' ##NO_TEXT.
  constants C_FCODE_EXP_ALL type UI_FUNC value 'EXP_ALL' ##NO_TEXT.
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_OKAY type SYUCOMM value 'OKAY' ##NO_TEXT.
  data F_FRECU type ABAP_BOOL read-only .
  data F_EXP_NODE type ABAP_BOOL read-only .
  data F_QUESTION type STRING read-only .
  data F_REFRESH_REQ type ABAP_BOOL read-only .
  data R_TOOLBAR type ref to CL_GUI_TOOLBAR read-only .
  data R_TREE type ref to CL_COLUMN_TREE_MODEL read-only .
  data T_EXP_NODE type TREEMNOTAB read-only .
  data T_ITEM type TREEMCITAC read-only .
  data T_NODE type TREEMCNOTA read-only .

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods GET_CNF_DATA
    exporting
      !ET_SVCEL type ZVCXI_XCI_TT_SVCEL
      !ET_XCONG type ZVCXI_PXSS_TT_XCONG
      !ET_MATLI type YHP_SVCS_TT_OPENSPV_MATLI
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_DESCR
    importing
      !IF_MATNR type MATNR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TOOLBAR
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IF_CUOBJ type CUOBJ_VA
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_IEALI type /VCXI/VKSC_IEALI
      !IF_LOCKED type ABAP_BOOL default ABAP_FALSE
      !IF_AS_PART type FLAG default ABAP_FALSE
    exporting
      !ET_SVCEL type ZVCXI_XCI_TT_SVCEL
      !ET_XCONG type ZVCXI_PXSS_TT_XCONG
      !ET_MATLI type YHP_SVCS_TT_OPENSPV_MATLI
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_TOOLBAR_BUTTON,
      FCODE       type UI_FUNC,
      ICON        type ICON_D,
      IS_DISABLED type FLAG,
      BUTN_TYPE   type TB_BTYPE,
      TEXT        type TEXT40,
      QUICKINFO   type ICONQUICK,
      IS_CHECKED  type FLAG,
    end   of YS_TOOLBAR_BUTTON .
  types:
    YT_TOOLBAR_BUTTON type standard table of YS_TOOLBAR_BUTTON with default key .
  types:
    YT_TC110T type standard table of ZVCXI_FRS_TC110T .
  types:
    YT_TC120T type standard table of ZVCXI_FRS_TC120T .
  types:
    YT_TC130T type standard table of ZVCXI_FFS_TC130T .
  types:
    YT_TC230T type standard table of ZVCXI_FFS_TC230T .
  types:
    YT_TC310T type standard table of ZVCXI_FFS_TC310T .
  types:
    YT_TC150T type standard table of ZVCXI_FFS_TC150T .

  data F_AS_PART type FLAG .
  data F_IEALI type /VCXI/VKSC_IEALI .
  data F_LOCKED type /VCXI/CKX_LOCKED .
  data F_MAIN_CUOBJ type CUOBJ .
  data F_CUOBJ type CUOBJ_VA .
  data F_MATNR type MATNR .
  data F_NODEKEY type NUMC4 .
  data F_WERKS type WERKS_D .
  data R_CONTAINER_TOOLBAR type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_TREE type ref to CL_GUI_CUSTOM_CONTAINER .
  data T_MATLI type YHP_SVCS_TT_OPENSPV_MATLI .
  data T_SVCEL type ZVCXI_XCI_TT_SVCEL .
  data T_TOOLBAR_BUTTON type YT_TOOLBAR_BUTTON .
  data T_XCONG type ZVCXI_PXSS_TT_XCONG .

  methods ADD_COLUMN_BY_DTEL
    importing
      !IF_NAME type TV_ITMNAME
      !IF_ROLLNAME type ROLLNAME
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_CUOBJ type CUOBJ_VA
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_IEALI type /VCXI/VKSC_IEALI
      !IF_LOCKED type /VCXI/CKX_LOCKED
      !IF_AS_PART type FLAG
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods FILL_TREE
    raising
      /VCXI/CX_CKX .
  methods FILL_TREE_NODES
    importing
      !IS_MATLI type YHP_SVCS_S_OPENSPV_MATLI
      !IF_RELATKEY type TM_NODEKEY optional
    changing
      !CT_NODE type TREEMCNOTA
      !CT_ITEM type TREEMCITAC
    raising
      /VCXI/CX_CKX .
  methods GENERATE_CNF_DATA
    raising
      /VCXI/CX_CKX .
  methods GET_DATA
    raising
      /VCXI/CX_CKX .
  methods CHECK_INLINE_MATERIALS
    importing
      !IF_MATNR_P type MATNR optional
      !IF_MATNR type MATNR
      !IT_MATLI type YHP_SVCS_TT_OPENSPV_MATLI optional
    changing
      value(CF_FRECU) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_MATERIAL_COMPONENTS
    importing
      !IF_CUOBJ type CUOBJ_VA optional
      !IF_MATNR_P type MATNR optional
      !IF_NODE_KEY_P type TM_NODEKEY optional
      !IF_MATNR type MATNR
      !IF_EMAT_DESCR type /VCXI/CKX_DESCR optional
      !IF_WERKS type WERKS_D
    changing
      !CT_MATLI type YHP_SVCS_TT_OPENSPV_MATLI
    raising
      /VCXI/CX_CKX .
  methods GET_NODE_KEY_NEXT
    returning
      value(RF_NODEKEY) type TM_NODEKEY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHECKBOX_CHANGED
    for event CHECKBOX_CHANGE of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME
      !CHECKED .
  methods HANDLE_UC_CANCEL .
  methods HANDLE_UC_COL_ALL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_EXP_ALL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OKAY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_TOOLBAR
    for event FUNCTION_SELECTED of CL_GUI_TOOLBAR
    importing
      !FCODE .
  methods INIT_CONTAINER_TOOLBAR
    importing
      !IF_CONTAINER_NAME type C default '0100CC_TOOLBAR'
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER_TREE
    importing
      !IF_CONTAINER_NAME type C default '0100CC_TREE'
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR_DEF .
  methods INIT_TREE
    raising
      /VCXI/CX_CKX .
  methods PROPAGATE_CLEAR_DOWN
    importing
      !IF_NODE_KEY type TM_NODEKEY
    raising
      /VCXI/CX_CKX .
  methods PROPAGATE_SET_UP
    importing
      !IF_NODE_KEY type TM_NODEKEY
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TREE
    raising
      /VCXI/CX_CKX .
  methods REGISTER_TREE_EVENTS
    raising
      /VCXI/CX_CKX .
  methods SET_PF_STATUS .
  methods UPDATE_MATLI
    importing
      value(IF_NODE_KEY) type TM_NODEKEY
      value(IF_ITEM_NAME) type TV_ITMNAME
      value(IF_CHECKED) type AS4FLAG
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SVCS_POPUP_OPENSPV definition
class YCL_HP_SVCS_POPUP_OPENSPV implementation.
method ADD_COLUMN_BY_DTEL.

  data:  LF_HEADER_TEXT     type        TV_HEADING,
         LF_HEADER_TOOLTIP  type        TV_HEADING.
  data:  LS_DFIES           type        DFIES.
  data:  LR_ELEMDESCR       type ref to CL_ABAP_ELEMDESCR.

***----------------------------------------------------------------------------
  LR_ELEMDESCR ?= CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( P_NAME = IF_ROLLNAME ).
  LS_DFIES = LR_ELEMDESCR->GET_DDIC_FIELD( ).

  move LS_DFIES-SCRTEXT_S to LF_HEADER_TEXT.

  move LS_DFIES-SCRTEXT_L to LF_HEADER_TOOLTIP.

***----------------------------------------------------------------------------
*** Add Column
  ME->R_TREE->ADD_COLUMN( exporting  NAME                = IF_NAME
                                     WIDTH               = 10
                                     HEADER_TEXT         = LF_HEADER_TEXT
                                     HEADER_TOOLTIP      = LF_HEADER_TOOLTIP
                                     ALIGNMENT           = CL_COLUMN_TREE_MODEL=>ALIGN_CENTER
                          exceptions COLUMN_EXISTS       = 1
                                     ILLEGAL_COLUMN_NAME = 2
                                     TOO_MANY_COLUMNS    = 3
                                     ILLEGAL_ALIGNMENT   = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
  method CHECK_INLINE_MATERIALS.

    data:           LS_MATLI  type  YHP_SVCS_S_OPENSPV_MATLI.
    data:           LT_MATLI  type  YHP_SVCS_TT_OPENSPV_MATLI.
    field-symbols:  <S_MATLI> type  YHP_SVCS_S_OPENSPV_MATLI.

    check CF_FRECU ne ABAP_TRUE.

*** Check if the same Materials are inline
    if IF_MATNR_P is not initial.

      loop at ME->T_MATLI into LS_MATLI where MATNR = IF_MATNR_P.
        if LS_MATLI-MATNR_P eq IF_MATNR.
          move ABAP_TRUE to CF_FRECU.
          exit.
        endif.
        append LS_MATLI to LT_MATLI.
      endloop.

    else.

      loop at IT_MATLI assigning <S_MATLI> .
        loop at ME->T_MATLI into LS_MATLI where MATNR = <S_MATLI>-MATNR_P.
          if LS_MATLI-MATNR_P eq IF_MATNR.
            move ABAP_TRUE to CF_FRECU.
            exit.
          endif.
          append LS_MATLI to LT_MATLI.
        endloop.
      endloop.

    endif.

    check LT_MATLI is not initial.

    ME->CHECK_INLINE_MATERIALS( exporting IF_MATNR = IF_MATNR
                                          IT_MATLI = LT_MATLI
                                changing  CF_FRECU = CF_FRECU ).

  endmethod.
  method CONSTRUCTOR.

    move IF_CUOBJ   to ME->F_CUOBJ.
    move IF_MATNR   to ME->F_MATNR.
    move IF_WERKS   to ME->F_WERKS.
    move IF_IEALI   to ME->F_IEALI.
    move IF_LOCKED  to ME->F_LOCKED.
    move IF_AS_PART to ME->F_AS_PART.
    move TEXT-Q01   to ME->F_QUESTION.

*** Request Toolbar Refresh
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method DO_FREE.

***--------------------------------------------------------------------------------------
*** Free Tree
    if ME->R_TREE is bound.
      clear ME->R_TREE.
    endif.

***--------------------------------------------------------------------------------------
*** Free Tree Container
    if ME->R_CONTAINER_TREE is bound.
      ME->R_CONTAINER_TREE->FREE( exceptions CNTL_ERROR        = 1
                                             CNTL_SYSTEM_ERROR = 2
                                             others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER_TREE.
    endif.

***--------------------------------------------------------------------------------------
*** Free Toolbar
    if ME->R_TOOLBAR is bound.
      clear ME->R_TOOLBAR.
    endif.

***--------------------------------------------------------------------------------------
*** Free Toolbar Container
    if ME->R_CONTAINER_TOOLBAR is bound.
      ME->R_CONTAINER_TOOLBAR->FREE( exceptions CNTL_ERROR        = 1
                                                CNTL_SYSTEM_ERROR = 2
                                                others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

      clear ME->R_CONTAINER_TOOLBAR.
      move ABAP_TRUE to ME->F_REFRESH_REQ.
    endif.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Get Complete Configuration
    if ME->T_MATLI is initial.
      ME->GET_DATA( ).
    endif.

***--------------------------------------------------------------------------------------
*** Set PF-Status
    ME->SET_PF_STATUS( ).

***--------------------------------------------------------------------------------------
*** Refresh Toolbar
    ME->REFRESH_TOOLBAR( ).

***--------------------------------------------------------------------------------------
*** Refresh Toolbar
    ME->REFRESH_TREE( ).

  endmethod.
  method DO_USER_COMMAND.

    case IF_UCOMM.

      when C_UC_OKAY.
        ME->HANDLE_UC_OKAY( ).

      when C_UC_CANCEL.
        ME->HANDLE_UC_CANCEL( ).

    endcase.

  endmethod.
  method FILL_TREE.

    data: LS_MATLI  type  YHP_SVCS_S_OPENSPV_MATLI.
    data: LT_NODE   type  TREEMCNOTA,
          LT_ITEM   type  TREEMCITAC.

    free: ME->F_NODEKEY,
          ME->T_NODE.

*** Fill tree
    loop at ME->T_MATLI into LS_MATLI where MATNR_P is initial.

      ME->FILL_TREE_NODES(
        exporting
          IS_MATLI  = LS_MATLI
        changing
          CT_NODE   = LT_NODE
          CT_ITEM   = LT_ITEM ).

    endloop.

    move LT_NODE to ME->T_NODE.

***--------------------------------------------------------------------------------------
*** Add Nodes and Items
    ME->R_TREE->ADD_NODES( exporting  NODE_TABLE          = LT_NODE
                           exceptions ERROR_IN_NODE_TABLE = 1
                                      others              = 2 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    ME->R_TREE->ADD_ITEMS( exporting  ITEM_TABLE          = LT_ITEM
                           exceptions NODE_NOT_FOUND      = 1
                                      ERROR_IN_ITEM_TABLE = 2
                                      others              = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Expand
    if ME->F_EXP_NODE eq ABAP_TRUE.
      ME->R_TREE->EXPAND_NODES( exporting NODE_KEY_TABLE = ME->T_EXP_NODE ).
    else.
      ME->R_TREE->EXPAND_ROOT_NODES( exporting EXPAND_SUBTREE = ABAP_TRUE ).
    endif.

*** Optimize Column Width
    ME->R_TREE->ADJUST_COLUMN_WIDTH( exporting  ALL_COLUMNS               = ABAP_TRUE
                                                INCLUDE_HEADING           = ABAP_TRUE
                                     exceptions CONTROL_NOT_EXISTING      = 1
                                                CONTROL_DEAD              = 2
                                                CNTL_SYSTEM_ERROR         = 3
                                                FAILED                    = 4
                                                START_COLUMN_NOT_FOUND    = 5
                                                END_COLUMN_NOT_FOUND      = 6
                                                START_COLUMN_IN_HIERARCHY = 7
                                                END_COLUMN_IN_HIERARCHY   = 8
                                                START_COLUMN_EMPTY        = 9 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Clear Expanded Nodes
    clear ME->T_EXP_NODE.
    clear ME->F_EXP_NODE.

  endmethod.
  method FILL_TREE_NODES.

    data:           LS_MATLI type  YHP_SVCS_S_OPENSPV_MATLI.
    field-symbols: <S_NODE> type  TREEMCNODT,
                   <S_ITEM> type  TREEMCITEN.

***--------------------------------------------------------------------------------------
*** Node
    append initial line to CT_NODE assigning <S_NODE>.
    move IS_MATLI-NODE_KEY                                to <S_NODE>-NODE_KEY.
    move IF_RELATKEY                                      to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD           to <S_NODE>-RELATSHIP.
    move CL_COLUMN_TREE_MODEL=>STYLE_DEFAULT              to <S_NODE>-STYLE.
    move ABAP_TRUE                                        to <S_NODE>-EXPANDER.

***--------------------------------------------------------------------------------------
*** Items
    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'MATNR'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    call function 'CONVERSION_EXIT_MATN1_OUTPUT'
      exporting
        INPUT  = IS_MATLI-MATNR
      importing
        OUTPUT = <S_ITEM>-TEXT.
    concatenate <S_ITEM>-TEXT IS_MATLI-MATNR_DESCR into <S_ITEM>-TEXT separated by SPACE.

    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'WERKS'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT            to <S_ITEM>-CLASS.
    move IS_MATLI-WERKS                                   to <S_ITEM>-TEXT.

*** Column OneUp
    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'ONEUP'                                          to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_CHECKBOX        to <S_ITEM>-CLASS.

    if ME->F_LOCKED eq ABAP_TRUE and ME->F_FRECU ne ABAP_TRUE.
      move ABAP_TRUE                                      to <S_ITEM>-EDITABLE.
    endif.

    move IS_MATLI-ONEUP                                   to <S_ITEM>-CHOSEN.

*** Column MultiUp
    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'MULTIUP'                                        to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_CHECKBOX        to <S_ITEM>-CLASS.

    if ME->F_LOCKED eq ABAP_TRUE and ME->F_FRECU ne ABAP_TRUE.
      move ABAP_TRUE                                      to <S_ITEM>-EDITABLE.
    endif.

    move IS_MATLI-MULTIUP                                 to <S_ITEM>-CHOSEN.

*** Column Printing
    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'PRINTING'                                       to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_CHECKBOX        to <S_ITEM>-CLASS.

    if ME->F_LOCKED eq ABAP_TRUE and ME->F_FRECU ne ABAP_TRUE.
      move ABAP_TRUE                                      to <S_ITEM>-EDITABLE.
    endif.

    move IS_MATLI-PRINTING                                to <S_ITEM>-CHOSEN.

*** Column Explode
    append initial line to CT_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                                to <S_ITEM>-NODE_KEY.
    move 'EXPLODE'                                        to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_CHECKBOX        to <S_ITEM>-CLASS.

    if ME->F_LOCKED eq ABAP_TRUE and ME->F_FRECU ne ABAP_TRUE.
      if IS_MATLI-ONEUP eq ABAP_TRUE or IS_MATLI-MULTIUP eq ABAP_TRUE or IS_MATLI-PRINTING eq ABAP_TRUE.
        move ABAP_FALSE                                     to <S_ITEM>-EDITABLE.
      else.
        move ABAP_TRUE                                      to <S_ITEM>-EDITABLE.
      endif.
    endif.

    move IS_MATLI-EXPLODE                                  to <S_ITEM>-CHOSEN.

*** Fill Children if exists
    loop at ME->T_MATLI into LS_MATLI where MATNR_P    eq IS_MATLI-MATNR
                                        and NODE_KEY_P eq IS_MATLI-NODE_KEY.

      ME->FILL_TREE_NODES(
        exporting
          IS_MATLI    =  LS_MATLI
          IF_RELATKEY =  IS_MATLI-NODE_KEY
        changing
          CT_NODE     =  CT_NODE
          CT_ITEM     =  CT_ITEM ).

    endloop.

  endmethod.
  method GENERATE_CNF_DATA.

    data: LF_MSG    type        SYMSGV,
          LF_MSGSTR type        STRING.
    data: LS_BAPIRET2 type        BAPIRET2.

*** Create Configuration
    call function 'YHP_SVCS_OPENSPV_GET_CNF_ML'
      destination 'NONE'
      exporting
        IF_CUOBJ              = ME->F_MAIN_CUOBJ
        IF_IEALI              = ME->F_IEALI
        IF_AS_PART            = ME->F_AS_PART
        IT_MATLI              = ME->T_MATLI
      importing
        ET_SVCEL              = ME->T_SVCEL
        ET_XCONG              = ME->T_XCONG
        ES_BAPIRET2           = LS_BAPIRET2
      exceptions
        COMMUNICATION_FAILURE = 1 message LF_MSG
        SYSTEM_FAILURE        = 2 message LF_MSG
        others                = 3.

    case SY-SUBRC.
      when 1.
        move LF_MSG to LF_MSGSTR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_STRING( LF_MSGSTR ).
      when 2.
        move LF_MSG to LF_MSGSTR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_STRING( LF_MSGSTR ).
      when 3.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endcase.
    if LS_BAPIRET2 is not initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

  endmethod.
  method GET_CNF_DATA.

    move ME->T_SVCEL    to ET_SVCEL.
    move ME->T_XCONG    to ET_XCONG.
    move ME->T_MATLI    to ET_MATLI.

  endmethod.
  method GET_DATA.

    ME->GET_MATERIAL_COMPONENTS( exporting IF_CUOBJ =  ME->F_CUOBJ
                                           IF_MATNR =  ME->F_MATNR
                                           IF_WERKS =  ME->F_WERKS
                                 changing  CT_MATLI =  ME->T_MATLI ).

  endmethod.
  method GET_MATERIAL_COMPONENTS.

    data: LF_MSG        type        SYMSGV,
          LF_MSGSTR     type        STRING,
          LF_CUOBJ      type        CUOBJ,
          LF_WERKS      type        WERKS_D,
          LF_MATNR      type        MATNR,
          LF_EMAT_DESCR type        /VCXI/CKX_DESCR,
          LF_AS_PART    type        FLAG.
    data: LS_BAPIRET2 type        BAPIRET2,
          LS_SVCEL    type        ZVCXI_XCI_S_SVCEL,
          LS_SVCPA    type        ZVCXI_XCI_S_SVCPA.
    data: LT_SVCEL type        ZVCXI_XCI_TT_SVCEL,
          LT_MATNR type        YHP_SVCS_TT_MATNR.
    data: LR_CUST_FPROC type ref to ZCL_VCXI_FFSS_CUST_FPROC,
          LR_CUST_BPROC type ref to ZCL_VCXI_FBSS_CUST_BPROC.
    field-symbols:  <S_MATLI>     type        YHP_SVCS_S_OPENSPV_MATLI.

    if IF_MATNR_P is initial.
      move ABAP_FALSE  to LF_AS_PART.

***   Save Main Material Configuration
      move IF_MATNR to LF_CUOBJ.
      move IF_WERKS to LF_WERKS.
      move IF_CUOBJ to LF_CUOBJ.
      move LF_CUOBJ to ME->F_MAIN_CUOBJ.
    else.
      move ABAP_TRUE  to LF_AS_PART.
    endif.

*** Get Configuration based on CUOBJ
    if LF_CUOBJ is not initial.
      call function 'YHP_SVCS_OPENSPV_GET_CNF'
        destination 'NONE'
        exporting
          IF_CUOBJ              = LF_CUOBJ
          IF_IEALI              = ME->F_IEALI
          IF_AS_PART            = LF_AS_PART
        importing
          ET_SVCEL              = LT_SVCEL
          ET_MATNR              = LT_MATNR
          ES_BAPIRET2           = LS_BAPIRET2
        exceptions
          COMMUNICATION_FAILURE = 1 message LF_MSG
          SYSTEM_FAILURE        = 2 message LF_MSG
          others                = 3.

      case SY-SUBRC.
        when 1.
          move LF_MSG to LF_MSGSTR.
          /VCXI/CX_CKX=>RAISE_CKX_BY_STRING( LF_MSGSTR ).
        when 2.
          move LF_MSG to LF_MSGSTR.
          /VCXI/CX_CKX=>RAISE_CKX_BY_STRING( LF_MSGSTR ).
        when 3.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endcase.
      if LS_BAPIRET2 is not initial.
        /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
      endif.
    endif.

*** Check the presece of the same Material
    read table CT_MATLI assigning <S_MATLI> with key MATNR   = IF_MATNR
                                                     MATNR_P = IF_MATNR_P.
    if SY-SUBRC eq 0.

***   Check if the same Materials are inline
      ME->CHECK_INLINE_MATERIALS( exporting IF_MATNR   = IF_MATNR
                                            IF_MATNR_P = IF_MATNR_P
                                  changing  CF_FRECU   = ME->F_FRECU ).
      if ME->F_FRECU eq ABAP_TRUE.
        message I005(ZVCXI_F0S) with IF_MATNR IF_MATNR_P into  ME->F_QUESTION.
        exit.
      endif.

    endif.

*** Insert Component
    append initial line to CT_MATLI assigning <S_MATLI>.
    move ME->GET_NODE_KEY_NEXT( ) to <S_MATLI>-NODE_KEY.
    move IF_MATNR                 to <S_MATLI>-MATNR.
    move ME->GET_MATNR_DESCR( exporting IF_MATNR = <S_MATLI>-MATNR ) to <S_MATLI>-MATNR_DESCR.

    if IF_EMAT_DESCR is not initial.
      concatenate <S_MATLI>-MATNR_DESCR ' ( ' IF_EMAT_DESCR ')' into <S_MATLI>-MATNR_DESCR.
    endif.

    move LF_WERKS                 to <S_MATLI>-WERKS.
    move IF_MATNR_P               to <S_MATLI>-MATNR_P.
    move IF_NODE_KEY_P            to <S_MATLI>-NODE_KEY_P.

*** Insert Configuration components
    move LT_MATNR             to <S_MATLI>-T_MATNR.
    move LT_SVCEL             to <S_MATLI>-T_SVCEL.

*** Get Sub-Components
    loop at LT_SVCEL into LS_SVCEL  where ISELF eq 'MS_FPROC'
                                       or ISELF eq 'MS_EMAT'
                                       or ISELF eq 'MS_BPROC'.

      clear LF_EMAT_DESCR.

      if LS_SVCEL-ISELF eq 'MS_EMAT'.

***     Estimation Material handling
        read table LS_SVCEL-T_SVCPA into LS_SVCPA with key PARID = ZCL_VCXI_FFSS_PR_MS_EMAT=>C_PARID_AMAT.
        check SY-SUBRC eq 0.
        move LS_SVCEL-LEOKY to LF_MATNR.
        move LF_MATNR       to LF_EMAT_DESCR.
        move LS_SVCPA-ATWRT to LF_MATNR.

      else.
        move LS_SVCEL-LEOKY to LF_MATNR.
      endif.

      ME->GET_MATERIAL_COMPONENTS( exporting IF_MATNR_P    = IF_MATNR
                                             IF_NODE_KEY_P = <S_MATLI>-NODE_KEY
                                             IF_MATNR      = LF_MATNR
                                             IF_EMAT_DESCR = LF_EMAT_DESCR
                                             IF_WERKS      = LF_WERKS
                                   changing  CT_MATLI      = ME->T_MATLI ).

    endloop.

  endmethod.
  method GET_MATNR_DESCR.

    data:  LS_MAKT  type MAKT.

    call function 'MAKT_SINGLE_READ'
      exporting
        MATNR      = IF_MATNR
        SPRAS      = SY-LANGU
      importing
        WMAKT      = LS_MAKT
      exceptions
        WRONG_CALL = 1
        NOT_FOUND  = 2
        others     = 3.

    if SY-SUBRC eq 0.
      move LS_MAKT-MAKTX to RF_DESCR.
    endif.

  endmethod.
  method GET_NODE_KEY_NEXT.

    add 1 to ME->F_NODEKEY.
    move ME->F_NODEKEY to RF_NODEKEY.

  endmethod.
method HANDLE_CHECKBOX_CHANGED .

  data:   LR_CX_CKX  type ref to /VCXI/CX_CKX.

  try.

      ME->UPDATE_MATLI( IF_NODE_KEY  = NODE_KEY
                        IF_ITEM_NAME = ITEM_NAME
                        IF_CHECKED   = CHECKED ).

      case ITEM_NAME.

        when 'EXPLODE'.

          if CHECKED eq ABAP_TRUE.

**          Propagate Up Checkbox = 'X'
            ME->PROPAGATE_SET_UP( IF_NODE_KEY = NODE_KEY ).

          else.

***         Propagate Down Checkbox = ' '
            ME->PROPAGATE_CLEAR_DOWN( IF_NODE_KEY = NODE_KEY ).

          endif.

        when others.

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
  method HANDLE_UC_CANCEL.

    clear: ME->T_SVCEL, ME->T_XCONG, ME->T_MATLI.

*** Leave Popup
    leave to screen 0.

  endmethod.
  method HANDLE_UC_COL_ALL.

    check ME->R_TREE is bound.
    ME->R_TREE->COLLAPSE_ALL_NODES( ).

  endmethod.
  method HANDLE_UC_EXP_ALL.

    check ME->R_TREE is bound.
    ME->R_TREE->EXPAND_ROOT_NODES( EXPAND_SUBTREE = ABAP_TRUE ).

  endmethod.
  method HANDLE_UC_OKAY.

    check ME->F_LOCKED eq ABAP_TRUE.

    clear: ME->T_SVCEL, ME->T_XCONG.

    if ME->T_MATLI is not initial.
      if ME->T_MATLI[ 1 ]-EXPLODE eq ABAP_TRUE.
        ME->GENERATE_CNF_DATA( ).
      endif.
    endif.
*** Leave Popup
    leave to screen 0.

  endmethod.
  method HANDLE_UC_TOOLBAR.

    data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.

    try.
        case FCODE.
          when C_FCODE_COL_ALL.
            ME->HANDLE_UC_COL_ALL( ).

          when C_FCODE_EXP_ALL.
            ME->HANDLE_UC_EXP_ALL( ).

        endcase.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method INIT_CONTAINER_TOOLBAR.

    if ME->R_CONTAINER_TOOLBAR is not bound.
      create object ME->R_CONTAINER_TOOLBAR
        exporting
          CONTAINER_NAME              = IF_CONTAINER_NAME
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_CONTAINER_TREE.

    if ME->R_CONTAINER_TREE is not bound.
      create object ME->R_CONTAINER_TREE
        exporting
          CONTAINER_NAME = IF_CONTAINER_NAME
        exceptions
          others         = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_TOOLBAR.

    data: LT_EVENT                type        CNTL_SIMPLE_EVENTS.
    field-symbols: <S_EVENT>      type        CNTL_SIMPLE_EVENT.

    check ME->R_TOOLBAR is not bound.

***--------------------------------------------------------------------------------------
*** Create Toolbar
    create object ME->R_TOOLBAR
      exporting
        PARENT             = ME->R_CONTAINER_TOOLBAR
      exceptions
        CNTL_INSTALL_ERROR = 1
        CNTL_ERROR         = 2
        CNTB_WRONG_VERSION = 3
        others             = 4.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Registered Events
    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_GUI_TOOLBAR=>M_ID_FUNCTION_SELECTED  to <S_EVENT>-EVENTID.

    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_GUI_TOOLBAR=>M_ID_DROPDOWN_CLICKED   to <S_EVENT>-EVENTID.

    ME->R_TOOLBAR->SET_REGISTERED_EVENTS( exporting  EVENTS           = LT_EVENT
                                          exceptions CNTL_ERROR       = 1
                                            CNTL_SYSTEM_ERROR         = 2
                                            ILLEGAL_EVENT_COMBINATION = 3
                                            others                    = 4 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Event Handler
    set handler ME->HANDLE_UC_TOOLBAR  for ME->R_TOOLBAR.

  endmethod.
  method INIT_TOOLBAR_DEF.

    field-symbols: <S_TT> type YS_TOOLBAR_BUTTON.

    refresh ME->T_TOOLBAR_BUTTON.

*** Add Separator Line
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_SEPARATOR to <S_TT>-BUTN_TYPE.

*** Add Collapse All
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_BUTTON    to <S_TT>-BUTN_TYPE,
          ICON_COLLAPSE_ALL to <S_TT>-ICON,
          text-COL          to <S_TT>-QUICKINFO,
          ABAP_FALSE        to <S_TT>-IS_DISABLED,
          C_FCODE_COL_ALL   to <S_TT>-FCODE.

*** Add Expand All
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_BUTTON    to <S_TT>-BUTN_TYPE,
          ICON_EXPAND_ALL   to <S_TT>-ICON,
          text-EXP          to <S_TT>-QUICKINFO,
          ABAP_FALSE        to <S_TT>-IS_DISABLED,
          C_FCODE_EXP_ALL   to <S_TT>-FCODE.

*** Add Separator Line
    insert initial line into table ME->T_TOOLBAR_BUTTON assigning <S_TT>.
    move: C_BTYPE_SEPARATOR to <S_TT>-BUTN_TYPE.

  endmethod.
  method INIT_TREE.

    data:   LS_HHDR   type  TREEMHHDR.

    check ME->R_TREE is not bound.

*** Get the Hierarchy Column
    move TEXT-MAT    to LS_HHDR-HEADING.
    move 50          to LS_HHDR-WIDTH.

*** Create the Tree Instance
    create object ME->R_TREE
      exporting
        NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_SINGLE
        ITEM_SELECTION              = 'X'
        HIERARCHY_COLUMN_NAME       = 'MATNR'
        HIERARCHY_HEADER            = LS_HHDR
      exceptions
        ILLEGAL_NODE_SELECTION_MODE = 1
        ILLEGAL_COLUMN_NAME         = 2
        others                      = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    check ME->R_CONTAINER_TREE is bound.

*** Create the Tree Control
    ME->R_TREE->CREATE_TREE_CONTROL( exporting
                                       PARENT                       = ME->R_CONTAINER_TREE
                                     exceptions
                                       LIFETIME_ERROR               = 1
                                       CNTL_SYSTEM_ERROR            = 2
                                       CREATE_ERROR                 = 3
                                       FAILED                       = 4
                                       TREE_CONTROL_ALREADY_CREATED = 5
                                       others                       = 6 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    ME->R_TREE->HIERARCHY_HEADER_SET_WIDTH( 40 ).

*** Add Column for Plant
    ME->R_TREE->ADD_COLUMN( exporting
                              NAME                = 'WERKS'
                              WIDTH               = 10
                              HEADER_TEXT         = TEXT-PLA
                            exceptions
                              COLUMN_EXISTS       = 1
                              ILLEGAL_COLUMN_NAME = 2
                              TOO_MANY_COLUMNS    = 3
                              ILLEGAL_ALIGNMENT   = 4
                              others              = 5 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Add Column for Checkbox
    ME->ADD_COLUMN_BY_DTEL( IF_NAME     = 'ONEUP'
                            IF_ROLLNAME = 'YHP_SVCS_ONEUP' ).

*** Add Column for Checkbox
    ME->ADD_COLUMN_BY_DTEL( IF_NAME     = 'MULTIUP'
                            IF_ROLLNAME = 'YHP_SVCS_MULTIUP' ).

*** Add Column for Checkbox
    ME->ADD_COLUMN_BY_DTEL( IF_NAME     = 'PRINTING'
                            IF_ROLLNAME = 'YHP_SVCS_PRINTING' ).

*** Add Column for Checkbox
    ME->ADD_COLUMN_BY_DTEL( IF_NAME     = 'EXPLODE'
                            IF_ROLLNAME = 'YHP_SVCS_EXPLO' ).

*** Register the Tree Events
    ME->REGISTER_TREE_EVENTS( ).

  endmethod.
  method PROPAGATE_CLEAR_DOWN.

    data:           LS_NODE   type        TREEMCNODT.
    data:           LR_CX_CKX type ref to /VCXI/CX_CKX.
    field-symbols:  <S_MATLI> type        YHP_SVCS_S_OPENSPV_MATLI.

    try.

***     Set Node Checkbox = ' '
        read table ME->T_MATLI assigning <S_MATLI> with key NODE_KEY = IF_NODE_KEY.
        check SY-SUBRC eq 0.

***     Set Upper-Level Node Checkbox = 'X'
        loop at ME->T_NODE into LS_NODE where RELATKEY eq IF_NODE_KEY.
          ME->PROPAGATE_CLEAR_DOWN( IF_NODE_KEY = LS_NODE-NODE_KEY ).
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method PROPAGATE_SET_UP.

    data: LS_NODE       type        TREEMCNODT.
    data: LR_CX_CKX     type ref to /VCXI/CX_CKX.
    field-symbols: <S_MATLI> type YHP_SVCS_S_OPENSPV_MATLI.

    try.
***     Set Node Checkbox = 'X'
        read table ME->T_MATLI assigning <S_MATLI> with key NODE_KEY = IF_NODE_KEY.
        check SY-SUBRC eq 0 and <S_MATLI>-MATNR_P is not initial.

        read table ME->T_NODE into LS_NODE with key NODE_KEY = IF_NODE_KEY .
        check SY-SUBRC eq 0.

***     Set Upper-Level Node Checkbox = 'X'
        ME->PROPAGATE_SET_UP( IF_NODE_KEY = LS_NODE-RELATKEY ).

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method REFRESH_TOOLBAR.

    data: LS_TT type YS_TOOLBAR_BUTTON.

***--------------------------------------------------------------------------------------
*** Only if Refresh Requested needed
    check ME->F_REFRESH_REQ eq ABAP_TRUE.
    move ABAP_FALSE to ME->F_REFRESH_REQ.

***--------------------------------------------------------------------------------------
*** Initialize if needed
    ME->INIT_CONTAINER_TOOLBAR( ).
    ME->INIT_TOOLBAR_DEF( ).
    ME->INIT_TOOLBAR( ).

***--------------------------------------------------------------------------------------
*** Delete All Buttons
    ME->R_TOOLBAR->DELETE_ALL_BUTTONS( ).

    loop at ME->T_TOOLBAR_BUTTON into LS_TT.

      ME->R_TOOLBAR->ADD_BUTTON( exporting  FCODE            = LS_TT-FCODE
                                            ICON             = LS_TT-ICON
                                            IS_DISABLED      = LS_TT-IS_DISABLED
                                            BUTN_TYPE        = LS_TT-BUTN_TYPE
                                            TEXT             = LS_TT-TEXT
                                            QUICKINFO        = LS_TT-QUICKINFO
                                 exceptions CNTL_ERROR       = 1
                                            CNTB_BTYPE_ERROR = 2
                                            CNTB_ERROR_FCODE = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

    endloop.

  endmethod.
  method REFRESH_TREE.

***--------------------------------------------------------------------------------------
*** Get Expanded Nodes
    if ME->R_TREE is bound.
      ME->R_TREE->GET_EXPANDED_NODES( importing NODE_KEY_TABLE = ME->T_EXP_NODE ).
      move ABAP_TRUE to ME->F_EXP_NODE.
    endif.

***--------------------------------------------------------------------------------------
*** Initialize Tree
    ME->INIT_CONTAINER_TREE( ).
    ME->INIT_TREE( ).

***--------------------------------------------------------------------------------------
*** Delete all Nodes
    ME->R_TREE->DELETE_ALL_NODES( ).

***--------------------------------------------------------------------------------------
*** Fill Tree
    ME->FILL_TREE( ).

  endmethod.
  method REGISTER_TREE_EVENTS.

    data:           LT_EVENT  type CNTL_SIMPLE_EVENTS.
    field-symbols:  <S_EVENT> type CNTL_SIMPLE_EVENT.

***--------------------------------------------------------------------------------------
*** Set Registered Events
    append initial line to LT_EVENT assigning <S_EVENT>.
    move CL_COLUMN_TREE_MODEL=>EVENTID_CHECKBOX_CHANGE     to <S_EVENT>-EVENTID.
    move ABAP_TRUE                                         to <S_EVENT>-APPL_EVENT.

    ME->R_TREE->SET_REGISTERED_EVENTS( exporting
                                         EVENTS                    = LT_EVENT
                                       exceptions
                                         ILLEGAL_EVENT_COMBINATION = 1
                                         UNKNOWN_EVENT             = 2
                                         others                    = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Event Handler
    set handler ME->HANDLE_CHECKBOX_CHANGED       for ME->R_TREE.

  endmethod.
  method SET_PF_STATUS.

    data:  LT_EXCLUDE  type table of SYUCOMM.

    if ME->F_LOCKED ne ABAP_TRUE.
      append C_UC_OKAY to LT_EXCLUDE.
    endif.

*** Configuration contains recursive material explosion
    if ME->F_FRECU eq ABAP_TRUE.
      append C_UC_OKAY to LT_EXCLUDE.
    endif.

    set pf-status '0100' of program 'SAPLYHP_SVCS_POPUP_OPENSPV'
                         excluding LT_EXCLUDE.

  endmethod.
  method START.

    data: LR_POPUP_OPENSPV type ref to YCL_HP_SVCS_POPUP_OPENSPV.

    create object LR_POPUP_OPENSPV
      exporting
        IF_CUOBJ   = IF_CUOBJ
        IF_MATNR   = IF_MATNR
        IF_WERKS   = IF_WERKS
        IF_IEALI   = IF_IEALI
        IF_LOCKED  = IF_LOCKED
        IF_AS_PART = IF_AS_PART.

*** Call Popup
    call function 'YHP_SVCS_POPUP_OPENSPV_START'
      exporting
        IR_POPUP_OPENSPV = LR_POPUP_OPENSPV.

*** Return Full Configurations
    LR_POPUP_OPENSPV->GET_CNF_DATA( importing ET_SVCEL   = ET_SVCEL
                                              ET_XCONG   = ET_XCONG
                                              ET_MATLI   = ET_MATLI ).

*** Free the Popup
    LR_POPUP_OPENSPV->DO_FREE( ).

  endmethod.
method UPDATE_MATLI .

  field-symbols: <S_MATLI> type YHP_SVCS_S_OPENSPV_MATLI.

  try.

      read table ME->T_MATLI assigning <S_MATLI> with key NODE_KEY = IF_NODE_KEY.
      check SY-SUBRC eq 0.

      case IF_ITEM_NAME.
        when 'EXPLODE'.
          move IF_CHECKED to <S_MATLI>-EXPLODE.
        when 'ONEUP'.
          move IF_CHECKED to <S_MATLI>-ONEUP.
          move ABAP_TRUE  to <S_MATLI>-EXPLODE.
        when 'MULTIUP'.
          move IF_CHECKED to <S_MATLI>-MULTIUP.
          move ABAP_TRUE  to <S_MATLI>-EXPLODE.
        when 'PRINTING'.
          move IF_CHECKED to <S_MATLI>-PRINTING.
          move ABAP_TRUE  to <S_MATLI>-EXPLODE.
      endcase.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
