
class YCL_HP_IDX_SINGLE definition
  public
  inheriting from YCL_HP_IDX
  create public .

public section.

  data T_SPEC_DB type YHP_IDX_TT_SPEC_DB read-only .
  data T_LINK_DB type YHP_IDX_TT_LINK_DB read-only .
  data T_BOARD_DB type YHP_IDX_TT_BOARD_DB read-only .
  data T_PAPER_DB type YHP_IDX_TT_PAPER_DB read-only .
  data T_PRINT_DB type YHP_IDX_TT_PRINT_DB read-only .
  data T_INKS_DB type YHP_IDX_TT_INKS_DB read-only .
  data T_SCORE_DB type YHP_IDX_TT_SCORES_DB read-only .
  data T_SHIP_DB type YHP_IDX_TT_SHIP_DB read-only .
  data T_SHIPU_DB type YHP_IDX_TT_SHIPU_DB read-only .
  data T_RTE_DB type YHP_IDX_TT_RTE_DB read-only .
  data T_MATNR_DB type YHP_IDX_TT_MATNR read-only .
  data T_PACKMAT_DB type YHP_IDX_TT_PACKMAT_DB .

  methods CONSTRUCTOR
    importing
      !IF_CUOBJ type CUOBJ
    raising
      /VCXI/CX_CKX .

  methods GET_DATA
    redefinition .
  methods SAVE
    redefinition .
  methods UPDATE
    redefinition .
protected section.

  methods FILL_DB_TABLES
    importing
      !IF_CSELF type YHP_IDX_CSELF
      !IS_BOX_CNF type YHP_IDX_S_BOX_CNF
      !IF_FLAG type ABAP_BOOL optional .

  methods DESERIALIZE_INFO
    redefinition .
  methods INIT_DB_TABLES
    redefinition .
  methods LOAD_FROM_DB
    redefinition .
  methods SERIALIZE_INFO
    redefinition .
private section.
endclass. "YCL_HP_IDX_SINGLE definition
class YCL_HP_IDX_SINGLE implementation.
  method CONSTRUCTOR.

*** Call Base implementation
    SUPER->CONSTRUCTOR( IF_CUOBJ = IF_CUOBJ ).

*** Try to read what's on the DB
    ME->LOAD_FROM_DB( ).

  endmethod.
  method DESERIALIZE_INFO.

    data:  LF_XML   type STRING.

    check IF_XML is not initial.

*** Deserialize
    call transformation ID
         source xml IF_XML
         result SUPER_XML    = LF_XML
                T_SPEC_DB    = ME->T_SPEC_DB
                T_LINK_DB    = ME->T_LINK_DB
                T_BOARD_DB   = ME->T_BOARD_DB
                T_PAPER_DB   = ME->T_PAPER_DB
                T_PRINT_DB   = ME->T_PRINT_DB
                T_INKS_DB    = ME->T_INKS_DB
                T_SCORE_DB   = ME->T_SCORE_DB
                T_SHIP_DB    = ME->T_SHIP_DB
                T_SHIPU_DB   = ME->T_SHIPU_DB
                T_RTE_DB     = ME->T_RTE_DB
                T_MATNR_DB   = ME->T_MATNR_DB
                T_PACKMAT_DB = ME->T_PACKMAT_DB.

*** Super Deserialize
    if LF_XML is not initial.
      SUPER->DESERIALIZE_INFO( IF_XML = LF_XML ).
    endif.

  endmethod.
  method FILL_DB_TABLES.

    data: LF_COPER  type  YHP_IDX_COPER,
          LF_CSELFB type YHP_IDX_CSELF.

    data: LS_BOARD   type YHP_IDX_S_BOARD_VE,
          LS_PAPER   type YHP_IDX_S_PAPER_VE,
          LS_PRINT   type YHP_IDX_S_PRINT_VE,
          LS_INKS    type YHP_IDX_S_INK_VE,
          LS_SCORE   type YHP_IDX_S_SCORES_VE,
          LS_SHIPU   type YHP_IDX_S_SHIPU_VE,
          LS_RTE     type YHP_IDX_S_RTE,
          LS_PACKMAT type YHP_IDX_S_PACKMAT_VE.

    field-symbols: <S_SPEC_DB>    type  YHP_IDX_S_SPEC_DB,
                   <S_BOARD_DB>   type  YHP_IDX_S_BOARD_DB,
                   <S_PAPER_DB>   type  YHP_IDX_S_PAPER_DB,
                   <S_PRINT_DB>   type  YHP_IDX_S_PRINT_DB,
                   <S_INKS_DB>    type  YHP_IDX_S_INK_DB,
                   <S_SCORE_DB>   type  YHP_IDX_S_SCORES_DB,
                   <S_SHIP_DB>    type  YHP_IDX_S_SHIP_DB,
                   <S_SHIPU_DB>   type  YHP_IDX_S_SHIPU_DB,
                   <S_RTE_DB>     type  YHP_IDX_S_RTE_DB,
                   <S_PACKMAT_DB> type YHP_IDX_S_PACKMAT_DB.  "JBL 22/11/2022 Create index table for Packaging Materials

***--------------------------------------------------------------------------------------
*** Product Specification
    if IS_BOX_CNF-S_SPEC_VE is not initial.
      append initial line to ME->T_SPEC_DB assigning <S_SPEC_DB>.
      move               IF_CSELF                to <S_SPEC_DB>-CSELF.
      move-corresponding IS_BOX_CNF-S_SPEC_VE   to <S_SPEC_DB>.
    endif.

***--------------------------------------------------------------------------------------
*** Board for all cases BOARD or Purchased sheet or Merchandise (this one has no MBOAR)
    loop at IS_BOX_CNF-T_BOARD into LS_BOARD. " where MBOAR is not initial.
      if IF_FLAG eq ABAP_TRUE.
        LF_CSELFB = IF_CSELF.
      else.
        LF_CSELFB = IF_CSELF.
      endif.

      append initial line to ME->T_BOARD_DB assigning <S_BOARD_DB>.
      move               LF_CSELFB  to <S_BOARD_DB>-CSELF.
      move-corresponding LS_BOARD   to <S_BOARD_DB>.
    endloop.


***--------------------------------------------------------------------------------------
*** Board Papers
    loop at IS_BOX_CNF-T_PAPER into LS_PAPER.
      if IF_FLAG eq ABAP_TRUE.
        LF_CSELFB = IF_CSELF.
      else.
        LF_CSELFB = IF_CSELF.
      endif.

      append initial line to ME->T_PAPER_DB assigning <S_PAPER_DB>.
      move               LF_CSELFB      to <S_PAPER_DB>-CSELF.
      move-corresponding LS_PAPER   to <S_PAPER_DB>.
      if IF_FLAG eq ABAP_TRUE and LF_CSELFB = 1.
        clear ME->T_PAPER_DB.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Printing
    loop at IS_BOX_CNF-T_PRINT into LS_PRINT.
      append initial line to ME->T_PRINT_DB assigning <S_PRINT_DB>.
      move               IF_CSELF      to <S_PRINT_DB>-CSELF.
      move-corresponding LS_PRINT   to <S_PRINT_DB>.
    endloop.

***--------------------------------------------------------------------------------------
*** Inks
    loop at IS_BOX_CNF-T_INKS into LS_INKS.
      append initial line to ME->T_INKS_DB assigning <S_INKS_DB>.
      move               IF_CSELF      to <S_INKS_DB>-CSELF.
      move-corresponding LS_INKS   to <S_INKS_DB>.
    endloop.

***--------------------------------------------------------------------------------------
*** Shipping information
    if IS_BOX_CNF-S_SHIP is not initial.
      append initial line to ME->T_SHIP_DB assigning <S_SHIP_DB>.
      move IF_CSELF      to <S_SHIP_DB>-CSELF.
      move-corresponding IS_BOX_CNF-S_SHIP to <S_SHIP_DB>.
    endif.
***--------------------------------------------------------------------------------------
*** Scores
    loop at IS_BOX_CNF-T_SCORE into LS_SCORE.
      append initial line to ME->T_SCORE_DB assigning <S_SCORE_DB>.
      move               IF_CSELF      to <S_SCORE_DB>-CSELF.
      move-corresponding LS_SCORE   to <S_SCORE_DB>.
    endloop.
***--------------------------------------------------------------------------------------
*** Shipping Units
    loop at IS_BOX_CNF-T_SHIPU into LS_SHIPU.
      append initial line to ME->T_SHIPU_DB assigning <S_SHIPU_DB>.
      move               IF_CSELF      to <S_SHIPU_DB>-CSELF.
      move-corresponding LS_SHIPU   to <S_SHIPU_DB>.
    endloop.
***--------------------------------------------------------------------------------------
*** Packaging Materials
    loop at IS_BOX_CNF-T_PACKMAT into LS_PACKMAT.
      append initial line to ME->T_PACKMAT_DB assigning <S_PACKMAT_DB>.
      move               IF_CSELF      to <S_PACKMAT_DB>-CSELF.
      move-corresponding LS_PACKMAT to <S_PACKMAT_DB>.
    endloop.
***--------------------------------------------------------------------------------------
*** Work Center Routing
    loop at IS_BOX_CNF-T_RTE into LS_RTE.
      add 1 to LF_COPER.
      append initial line to ME->T_RTE_DB assigning <S_RTE_DB>.
      move               IF_CSELF    to <S_RTE_DB>-CSELF.
      move               LF_COPER    to <S_RTE_DB>-COPER.
      move-corresponding LS_RTE   to <S_RTE_DB>.
    endloop.
***--------------------------------------------------------------------------------------
*** Material Number
    loop at IS_BOX_CNF-T_MATNR into data(LS_MATNR).
      append initial line to ME->T_MATNR_DB assigning field-symbol(<S_MATNR_DB>).
      <S_MATNR_DB> = corresponding #( LS_MATNR ).
    endloop.

  endmethod.
  method GET_DATA.

    ET_SPEC_DB    = ME->T_SPEC_DB.
    ET_LINK_DB    = ME->T_LINK_DB.
    ET_BOARD_DB   = ME->T_BOARD_DB.
    ET_PAPER_DB   = ME->T_PAPER_DB.
    ET_PRINT_DB   = ME->T_PRINT_DB.
    ET_INKS_DB    = ME->T_INKS_DB.
    ET_SCORE_DB   = ME->T_SCORE_DB.
    ET_SHIP_DB    = ME->T_SHIP_DB.
    ET_SHIPU_DB   = ME->T_SHIPU_DB.
    ET_RTE_DB     = ME->T_RTE_DB.
    ET_MATNR_DB   = ME->T_MATNR_DB.
    ET_PACKMAT_DB = ME->T_PACKMAT_DB.

  endmethod.
  method INIT_DB_TABLES.

    SUPER->INIT_DB_TABLES( ).

    free: ME->T_SPEC_DB,
          ME->T_BOARD_DB,
          ME->T_PAPER_DB,
          ME->T_PRINT_DB,
          ME->T_INKS_DB,
          ME->T_LINK_DB,
          ME->T_SCORE_DB,
          ME->T_SCORE_DB,
          ME->T_SHIP_DB,
          ME->T_SHIPU_DB,
          ME->T_RTE_DB,
          ME->T_MATNR_DB,
          ME->T_PACKMAT_DB.

  endmethod.
  method LOAD_FROM_DB.

*** Call base implementation
    SUPER->LOAD_FROM_DB( ).

***--------------------------------------------------------------------------------------
*** Load own data

*** Specification
    select *
           into corresponding fields of table ME->T_SPEC_DB
           from YHP_IDX_TD100
           where CUOBJ eq ME->F_CUOBJ.

*** Component Link
    select *
           into corresponding fields of table ME->T_LINK_DB
           from YHP_IDX_TD101
           where CUOBJ eq ME->F_CUOBJ.

*** Board Grade
    select *
           into corresponding fields of table ME->T_BOARD_DB
           from YHP_IDX_TD110
           where CUOBJ eq ME->F_CUOBJ.

*** Papers
    select *
           into corresponding fields of table ME->T_PAPER_DB
           from YHP_IDX_TD111
           where CUOBJ eq ME->F_CUOBJ.

*** Printing
    select *
           into corresponding fields of table ME->T_PRINT_DB
           from YHP_IDX_TD130
           where CUOBJ eq ME->F_CUOBJ.

*** Printing
    select *
           into corresponding fields of table ME->T_PRINT_DB
           from YHP_IDX_TD130
           where CUOBJ eq ME->F_CUOBJ.

*** Printing Inks
    select *
           into corresponding fields of table ME->T_INKS_DB
           from YHP_IDX_TD131
           where CUOBJ eq ME->F_CUOBJ.

*** Scores
    select *
           into corresponding fields of table ME->T_SCORE_DB
           from YHP_IDX_TD140
           where CUOBJ eq ME->F_CUOBJ.

*** Shipping & Unitization
    select *
           into corresponding fields of table ME->T_SHIP_DB
           from YHP_IDX_TD150
           where CUOBJ eq ME->F_CUOBJ.

*** Shipping Units
    select *
           into corresponding fields of table ME->T_SHIPU_DB
           from YHP_IDX_TD151
           where CUOBJ eq ME->F_CUOBJ.

*** Routing Workcenter
    select *
           into corresponding fields of table ME->T_RTE_DB
           from YHP_IDX_TD310
           where CUOBJ eq ME->F_CUOBJ.

*** Packaging materials
    select *
           into corresponding fields of table ME->T_PACKMAT_DB
           from YHP_IDX_TD160
           where CUOBJ eq ME->F_CUOBJ.

  endmethod.
  method SAVE.

*** Call Super
    SUPER->SAVE( ).

    if ME->F_DELETED ne ABAP_TRUE.

***   Save Configuration Index
      call function 'YHP_IDX_DB_SAVE_SINGLE'
       "in update task
        exporting
          IF_CUOBJ    = ME->F_CUOBJ
          IT_SPEC_DB  = ME->T_SPEC_DB
          IT_BOARD_DB = ME->T_BOARD_DB
          IT_PAPER_DB = ME->T_PAPER_DB
          IT_PRINT_DB = ME->T_PRINT_DB
          IT_INKS_DB  = ME->T_INKS_DB
          IT_LINK_DB  = ME->T_LINK_DB
          IT_SCORE_DB = ME->T_SCORE_DB
          IT_SHIP_DB  = ME->T_SHIP_DB
          IT_SHIPU_DB = ME->T_SHIPU_DB
          IT_RTE_DB   = ME->T_RTE_DB
          IT_MATNR_DB = ME->T_MATNR_DB
          IT_PACKMAT_DB = ME->T_PACKMAT_DB.
    else.

***   Delete Configuration
      call function 'YHP_IDX_DB_DEL_SINGLE'
        in update task
        exporting
          IF_CUOBJ = ME->F_CUOBJ.

    endif.

  endmethod.
  method SERIALIZE_INFO.

*** Super Serialize
    RF_XML = SUPER->SERIALIZE_INFO( ).

*** Serialize
    call transformation ID
         source SUPER_XML    = RF_XML
                T_SPEC_DB	   = ME->T_SPEC_DB
                T_LINK_DB	   = ME->T_LINK_DB
                T_BOARD_DB   = ME->T_BOARD_DB
                T_PAPER_DB   = ME->T_PAPER_DB
                T_PRINT_DB   = ME->T_PRINT_DB
                T_INKS_DB  	 = ME->T_INKS_DB
                T_SCORE_DB   = ME->T_SCORE_DB
                T_SHIP_DB	   = ME->T_SHIP_DB
                T_SHIPU_DB   = ME->T_SHIPU_DB
                T_RTE_DB     = ME->T_RTE_DB
                T_MATNR_DB   = ME->T_MATNR_DB
                T_PACKMAT_DB = ME->T_PACKMAT_DB
         result xml RF_XML.

  endmethod.
  method UPDATE.

    data: LF_IVEMO_BOX type        /VCXI/VKSC_IVEMO value 'IDX_BOX',
          LF_CSELF     type        YHP_IDX_CSELF,
          LF_CLOWS     type        YHP_IDX_CLOWS,
          LF_TABIX     type        SY-TABIX,
          LF_FLAG      type        ABAP_BOOL,
          LV_STRING    type        STRING,
          LF_RECORDS   type        I.

    data: LS_LINK_VE  type        YHP_IDX_S_LINK_VE,
          LS_BOX_CNF  type        YHP_IDX_S_BOX_CNF,
          LS_PART_VE  type        YHP_IDX_S_PART_VE,
          LS_BOARD_DB type        YHP_IDX_S_BOARD_DB.

    data: LT_SVCEL   type        /VCXI/CKX_TT_OBJECT,
          LT_BOX_CNF type        YHP_IDX_TT_BOX_CNF.

    data: LR_SVC    type ref to /VCXI/CL_VKSRA_SVC,
          LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
          LR_VALEX  type ref to DATA.

    field-symbols: <S_BOX_VE>   type        YHP_IDX_S_BOX_VE,
                   <S_BOX_CNF>  type        YHP_IDX_S_BOX_CNF,
                   <S_BOX_CN>   type        YHP_IDX_S_BOX_CNF,
                   <S_LINK_DB>  type        YHP_IDX_S_LINK_DB,
                   <S_PART_VE>  type        YHP_IDX_S_PART_VE,
                   <S_BOARD_DB> type        YHP_IDX_S_BOARD_DB.

    SUPER->UPDATE( exporting IF_GVCIN = IF_GVCIN ).

*** Get SmartVC API Instance
    LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = IF_GVCIN ).

*** Get Components Assembly component
    LT_SVCEL = LR_SVC->GET_SVC_ELEMENTS( IF_ID    = 'COMP_P3'
                                         IF_INUSE = ABAP_TRUE ).
***--------------------------------------------------------------------------------------
*** Get Components
    append lines of LR_SVC->GET_SVC_ELEMENTS( IF_ID    = 'COMP_P1'
                                              IF_INUSE = ABAP_TRUE ) to LT_SVCEL.

***--------------------------------------------------------------------------------------
*** Get FCFG Component
    append lines of LR_SVC->GET_SVC_ELEMENTS( IF_ID    = 'COMP_P2'
                                              IF_INUSE = ABAP_TRUE ) to LT_SVCEL.
*** -------------------------------------------------------------------------------------
*** Get Purchased Components
    append lines of LR_SVC->GET_SVC_ELEMENTS( IF_ID    = 'COMP_P4'
                                              IF_INUSE = ABAP_TRUE ) to LT_SVCEL.
***--------------------------------------------------------------------------------------

*** Get Corr Components VE
    loop at LT_SVCEL into LR_OBJECT.
      try.
          move LR_OBJECT ?to LR_SVCEL.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_SVCEL.
      endtry.

***   Value Extraction
      try.
          """to be called before calling VE IDX_BOX
          call function 'YHP_IDX_CLEAR_MBOARD'.

***       Get Value Extraction
          LR_VALEX = LR_SVC->GET_VALEX( IF_IVEMO        = LF_IVEMO_BOX
                                        IR_SVC_ELEMENT  = LR_SVCEL ).
          check LR_VALEX is bound.

***       Dereferencing of extracted data
          assign LR_VALEX->* to <S_BOX_VE>.
        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          clear: LR_VALEX.
          continue.
      endtry.

      append initial line to LT_BOX_CNF assigning <S_BOX_CNF>.
      move-corresponding <S_BOX_VE> to <S_BOX_CNF>.

    endloop.


    read table LT_SVCEL into LR_OBJECT index 1.
    describe table LT_SVCEL lines LF_RECORDS.
    if LF_RECORDS > 1 and LR_OBJECT->GET_ID( ) eq 'COMP_P3'.
      LF_FLAG = ABAP_TRUE.
      call function 'YHP_IDX_DVC_C_SCORES'
        exporting
          IT_SVCEL   = LT_SVCEL
        changing
          LT_BOX_CNF = LT_BOX_CNF.

    endif.

** -------------------------------------------------------------------------------------
*** Fill DB Tables from Box Components
    loop at LT_BOX_CNF assigning <S_BOX_CNF>.
      clear LR_OBJECT.
      read table LT_SVCEL into LR_OBJECT index SY-TABIX.

      move SY-TABIX to LF_CSELF.

***   Create Specification Entry
      ME->FILL_DB_TABLES( IF_CSELF   = LF_CSELF
                          IS_BOX_CNF = <S_BOX_CNF>
                          IF_FLAG    = LF_FLAG ).

****   Build Components hierarchy
      loop at <S_BOX_CNF>-T_PART_VE into LS_PART_VE.
        SY-TABIX = SY-TABIX + 1.
        move SY-TABIX  to LF_CLOWS.

***     Build Link
        append initial line to ME->T_LINK_DB assigning <S_LINK_DB>.
        move LF_CSELF to <S_LINK_DB>-CSELF.
        move LF_CLOWS to <S_LINK_DB>-CLOWS.
        move LS_PART_VE-PARAT to <S_LINK_DB>-PARAT.
        move LS_PART_VE-MATNR to <S_LINK_DB>-MATNR.

        if LF_RECORDS = 1 and LR_OBJECT->GET_ID( ) eq 'COMP_P3'.
          LS_BOARD_DB-CSELF = SY-TABIX.
        else.
          LS_BOARD_DB-CSELF = LF_CLOWS.
        endif.

        LS_BOARD_DB-P_MATNR = LS_PART_VE-MATNR.

        modify ME->T_BOARD_DB from LS_BOARD_DB transporting CSELF where P_MATNR = LS_BOARD_DB-P_MATNR.

      endloop.

      loop at ME->T_BOARD_DB assigning <S_BOARD_DB>.
        LV_STRING = <S_BOARD_DB>-BOARD.
        if <S_BOARD_DB>-MBOAR eq 'S' and LV_STRING cs '_P'.
          <S_BOARD_DB>-BOARD = LV_STRING+0(6).
        elseif <S_BOARD_DB>-MBOAR eq 'P' and LV_STRING na '_P'.
          concatenate  LV_STRING '_P' into LV_STRING.
          <S_BOARD_DB>-BOARD =  LV_STRING.
        endif.
      endloop.

    endloop.

  endmethod.
