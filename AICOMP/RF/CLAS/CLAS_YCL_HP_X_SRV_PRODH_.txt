
class YCL_HP_X_SRV_PRODH definition
  public
  create protected .

public section.

  constants C_INL type CHAR03 value 'INL' ##NO_TEXT.
  constants C_DCT type CHAR03 value 'DCT' ##NO_TEXT.
  constants C_SHT type CHAR03 value 'SHT' ##NO_TEXT.
  constants C_ZPSE type MTART value 'ZPSE' ##NO_TEXT.
  constants C_ZPTO type MTART value 'ZPTO' ##NO_TEXT.
  constants C_ZCLI type MTART value 'ZCLI' ##NO_TEXT.
  constants C_ZTRO type MTART value 'ZTRO' ##NO_TEXT.
  constants C_ZPTK type MTART value 'ZPTK' ##NO_TEXT.
  constants C_LV1_SE type CHAR02 value 'SE' ##NO_TEXT.
  constants C_LV1_CO type CHAR02 value 'CO' ##NO_TEXT.
  constants C_LV1_UC type CHAR02 value 'UC' ##NO_TEXT.
  constants C_LV1_UT type CHAR02 value 'UT' ##NO_TEXT.
  constants C_LV1_KI type CHAR02 value 'KI' ##NO_TEXT.
  constants C_LV2_IN type CHAR02 value 'IN' ##NO_TEXT.
  constants C_LV2_PP type CHAR02 value 'PP' ##NO_TEXT.
  constants C_LV2_TP type CHAR02 value 'TP' ##NO_TEXT.
  constants C_LV2_RP type CHAR02 value 'RP' ##NO_TEXT.
  constants C_LV2_TR type CHAR02 value 'TR' ##NO_TEXT.
  constants C_LV2_ME type CHAR02 value 'ME' ##NO_TEXT.
  constants C_LV2_PL type CHAR02 value 'PL' ##NO_TEXT.
  constants C_LV2_RO type CHAR02 value 'RO' ##NO_TEXT.
  constants C_LV3_FL type CHAR02 value 'FL' ##NO_TEXT.
  constants C_LV3_OF type CHAR02 value 'OF' ##NO_TEXT.
  constants C_LV3_DI type CHAR02 value 'DI' ##NO_TEXT.
  constants C_LV3_HQ type CHAR02 value 'HQ' ##NO_TEXT.
  constants C_LV3_NI type CHAR02 value 'NI' ##NO_TEXT.
  constants C_LV3_PR type CHAR02 value 'PR' ##NO_TEXT.

  class-methods GET_PRODH
    importing
      !IR_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT optional
      !IF_MTART type MTART
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY optional
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC optional
      !IT_SVCEL type /VCXI/CKX_TT_OBJECT optional
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
protected section.

  data F_MTART type MTART .
  data F_SOKEY type ZVCXI_XCM_MBQ_SOKEY .
  data F_LVL1 type PRODH_D .
  data F_LVL2 type PRODH_D .
  data F_LVL3 type PRODH_D .
  data R_SVC type ref to /VCXI/CL_VKSRA_SVC .
  data R_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT .
  data T_SVCEL type /VCXI/CKX_TT_OBJECT .

  methods CONSTRUCTOR
    importing
      !IR_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IF_MTART type MTART
      !IF_SOKEY type ZVCXI_XCM_MBQ_SOKEY optional
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC optional
      !IT_SVCEL type /VCXI/CKX_TT_OBJECT optional
    raising
      /VCXI/CX_CKX .
  methods GET_TOOL_PARAM
    importing
      !IF_FNAME type FIELDNAME
    exporting
      !EF_VALUE type ANY
    exceptions
      /VCXI/CX_CKX .
private section.

  methods CALC_PRODH_LEVEL1
    returning
      value(RF_PRODH) type PRODH_D .
  methods CALC_PRODH_LEVEL2
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods CALC_PRODH_LEVEL3
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods GET_CHILDREN_ALL
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods MAP_TPRIN_TO_PRODH
    importing
      !IF_TPRIN type ZVCXI_PXS_TPRIN
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
endclass. "YCL_HP_X_SRV_PRODH definition
class YCL_HP_X_SRV_PRODH implementation.
  method CALC_PRODH_LEVEL1.

*** Set level 1 by material type
    case ME->F_MTART.
      when C_ZPSE.
        move C_LV1_SE to RF_PRODH.
      when C_ZPTO or 'ZPSC'.
        move C_LV1_CO to RF_PRODH.
      when C_ZCLI.
        move C_LV1_UC to RF_PRODH.
      when C_ZTRO.
        move C_LV1_UT to RF_PRODH.
      when C_ZPTK.
        move C_LV1_KI to RF_PRODH.
    endcase.

*** Set instance attribute
    ME->F_LVL1 = RF_PRODH.

***-------------------------------------------------------------------*
*** If value for level was not determined, then raise exception
    check RF_PRODH is initial.

*** Level &1 of Product Hierarchy was not determined for Matl. Type &2.
    message E002(YHP_X) with '1' ME->F_MTART into data(LF_MSG).
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).

  endmethod.
  method CALC_PRODH_LEVEL2.

    data: LF_PRDTY  type ZVCXI_PXSS_IFDMV,
          LF_TDCUT  type ZVCXI_P0SS_TDCUT,
          LF_TPRIN  type ZVCXI_PXS_TPRIN,
          LF_CLOS   type FLAG,
          LF_MERCH  type FLAG,
          LF_SFG    type FLAG,
          LF_CRPROC type FLAG.
    data: LR_SVCEL   type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT  type ref to /VCXI/IF_CKX_OBJECT,
          LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_EA_DCUT type ref to YCL_HP_SVCS_EA_CSTEP_DCUT.
    data: LT_SVCEL type /VCXI/CKX_TT_OBJECT,
          LT_OUT   type /VCXI/CKX_TT_OBJECT.

*** Determine Level 2 based on Level 1
    case ME->F_LVL1.

***   Kits
      when C_LV1_KI.
        clear RF_PRODH.
        return.

***   Printing Tool
      when C_LV1_UC.
        ME->GET_TOOL_PARAM( exporting IF_FNAME = 'TPRIN'
                            importing EF_VALUE = LF_TPRIN ).
        RF_PRODH = ME->MAP_TPRIN_TO_PRODH( LF_TPRIN ).

***   Die Cut Tools
      when C_LV1_UT.
        ME->GET_TOOL_PARAM( exporting IF_FNAME = 'TDCUT'
                            importing EF_VALUE = LF_TDCUT ).
        case LF_TDCUT.
          when 'RTY'.
            move C_LV2_RO to RF_PRODH.
          when others.
            move C_LV2_PL to RF_PRODH.
        endcase.

***   Handle all other by product types
      when others.

***     Determine product type based on config. attributes
        loop at T_SVCEL into LR_OBJECT.
          move LR_OBJECT ?to LR_SVCEL.
          case LR_OBJECT->GET_ID( ).
            when  'CSTEP_SSS'.
              move C_INL to LF_PRDTY.

***         Get Die Cut Type
            when 'CSTEP_DCUT'.
              move C_DCT to LF_PRDTY.
              LR_EA_DCUT ?= LR_SVCEL->GET_CLSEA( ).
              check LR_EA_DCUT is bound.
              LF_TDCUT = LR_EA_DCUT->GET_TDCUT( ).

***         Corrugated Finished Good
            when 'CFG'.
              append LR_SVCEL to LT_OUT.

***         Merchandise Component
            when 'COMP_P4' or
                 'PRPART'.
              move ABAP_TRUE to LF_MERCH.

***         Closing
            when 'CSTEP_CLOS'.
              move ABAP_TRUE to LF_CLOS.

***         SFG
            when 'CRCONO'.
              move ABAP_TRUE to LF_SFG.

***         Corrugated Procurement
            when 'MS_CRPROC'.
              move ABAP_TRUE to LF_CRPROC
              .
*JBL 04/07/2023 New logic for Assembled Set
            when 'AFG'.
              move 'CO' to RF_PRODH.
              ME->F_LVL2 = RF_PRODH.
              exit.

          endcase.

        endloop.

        if RF_PRODH = 'CO'.
          exit.
        endif.

***--------------------------------------------------------------------------------------
***     Determine Prod. Hierarchy value based on Product Type

***     Handle special cases first
        if LF_PRDTY is initial and LINES( LT_OUT ) eq 1.
          move C_LV2_PL to RF_PRODH.

***     Corrugated Procurement
        elseif ME->F_LVL1 eq C_LV1_SE and
               LF_CRPROC  eq ABAP_TRUE.
          move C_LV2_PL to RF_PRODH.

***     Merchandise
        elseif LF_MERCH eq ABAP_TRUE.
          move C_LV2_ME to RF_PRODH.

***     Handle the rest by product type
        else.
          case LF_PRDTY.

****        Inline
            when C_INL.
              move C_LV2_IN to RF_PRODH.

***         Die Cut
            when C_DCT.

***           Check for Flatbed Die Cut
              if LF_TDCUT eq 'FBD'." or LF_TDCUT eq 'INT'.

                if LF_CLOS    eq ABAP_TRUE and
                   ME->F_LVL1 eq C_LV1_CO.
                  move C_LV2_PP to RF_PRODH.
                elseif ME->F_LVL1 eq C_LV1_UT.
                  move C_LV2_PL to RF_PRODH.
                else.
                  move C_LV2_TP to RF_PRODH.
                endif.

***           Check for Rotating Die Cut
              elseif LF_TDCUT eq 'RTY' or LF_TDCUT eq 'INT'.

***             Check for Closing
                if LF_CLOS    eq ABAP_TRUE and
                   ME->F_LVL1 eq C_LV1_CO.
                  move C_LV2_RP to RF_PRODH.
                elseif ME->F_LVL1 eq C_LV1_UT.
                  move C_LV2_RO to RF_PRODH.
                else.
                  move C_LV2_TR to RF_PRODH.
                endif.

              endif.

            when others.
***           Component is an SFG
              if LF_SFG eq ABAP_TRUE.
                move C_LV2_PL to RF_PRODH.
              endif.

          endcase.
        endif.
    endcase.

*** Set instance attribute
    ME->F_LVL2 = RF_PRODH.

***-------------------------------------------------------------------*
*** If value for level was not determined, then raise exception
    check RF_PRODH is initial.

*** Level &1 of Product Hierarchy was not determined for Matl. Type &2.
    message E002(YHP_X) with '2' ME->F_MTART into data(LF_MSG).
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).

  endmethod.
  method CALC_PRODH_LEVEL3.

    data: LF_TPRIN_CSTEP  type ZVCXI_PXS_TPRIN,
          LF_TPRIN_CRPROC type ZVCXI_PXS_TPRIN,
          LF_PREPRINT     type FLAG,
          LF_CRPROC       type FLAG,
          LF_MATNR        type MATNR.
    data: LS_PARAM        type /VCXI/VKSR_S_PARAM.
    data: LR_SVCEL    type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT,
          LR_EA_PRINT type ref to YCL_HP_SVCS_EA_CSTEP_PRINT,
          LR_EA_PAPER type ref to ZCL_VCXI_XCSS_EA_MS.
    data: LT_SVCEL     type /VCXI/CKX_TT_OBJECT,
          LT_PRINT_COM type ZVCXI_PXSS_TT_PRINT_COM.


***-------------------------------------------------------------------*
*** Analyze component attributes
    loop at T_SVCEL into LR_OBJECT.

      case LR_OBJECT->GET_ID( ).
***     Read first printing
        when 'CSTEP_PRINT'.
          check LF_TPRIN_CSTEP is initial.
          move LR_OBJECT ?to  LR_SVCEL.
          LR_EA_PRINT ?= LR_SVCEL->GET_CLSEA( ).
          LF_TPRIN_CSTEP = LR_EA_PRINT->GET_TPRIN( ).

***     Read pre print.
        when 'MS_PAPER'.
          check LF_PREPRINT is initial.
          move LR_OBJECT ?to  LR_SVCEL.
          LR_EA_PAPER ?= LR_SVCEL->GET_CLSEA( ).
          LR_EA_PAPER->GET_MATNR( importing EF_MATNR = LF_MATNR ).
          check LF_MATNR eq 'PREIMPDUMMY'.
          move ABAP_TRUE to LF_PREPRINT.

***    "Corrugated Procurement
        when 'MS_CRPROC'.
          check LF_CRPROC is initial.
          move LR_OBJECT ?to  LR_SVCEL.
          try.
              clear: LS_PARAM, LT_PRINT_COM.
              LS_PARAM = LR_SVCEL->GET_PARAM( IF_PARID = ZCL_VCXI_P1SS_PR_MS_CRPROC=>C_PARID_PRINT ).
              if LS_PARAM-STRNG is not initial.
                call transformation ID
                     source xml LS_PARAM-STRNG
                     result T_PRINT = LT_PRINT_COM.
              endif.

              loop at LT_PRINT_COM into data(LS_PRINT_COM).
                move LS_PRINT_COM-TPRIN to LF_TPRIN_CRPROC.
                move ABAP_TRUE to LF_CRPROC.
                exit.
              endloop.
            catch /VCXI/CX_CKX.
              clear LF_TPRIN_CRPROC.
          endtry.
      endcase.
    endloop.

***-------------------------------------------------------------------*
*** Determine Level 3 based on printing attributes

*** Start with special cases
    "Preprint
    if LF_PREPRINT eq ABAP_TRUE.
      move C_LV3_PR to RF_PRODH.

      "Printing on Corrugated Procurement
    elseif LF_TPRIN_CRPROC is not initial.
      RF_PRODH = ME->MAP_TPRIN_TO_PRODH( LF_TPRIN_CRPROC ).
    else.

*** Determine based on printing type
      RF_PRODH = ME->MAP_TPRIN_TO_PRODH( LF_TPRIN_CSTEP ).
    endif.

*** Set instance attribute
    ME->F_LVL3 = RF_PRODH.

***-------------------------------------------------------------------*
*** If value for level was not determined, then raise exception
    check RF_PRODH is initial.

*** Level &1 of Product Hierarchy was not determined for Matl. Type &2.
    message E002(YHP_X) with '3' ME->F_MTART into data(LF_MSG).
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).

  endmethod.
  method CONSTRUCTOR.

*** Set attributes
    move IF_MTART       to ME->F_MTART.
    move IF_SOKEY       to ME->F_SOKEY.
    move IR_SVC         to ME->R_SVC.

    if IR_SVCEL_XCOMP is bound.
      move IR_SVCEL_XCOMP to ME->R_SVCEL_XCOMP.

***   Get all children
      ME->GET_CHILDREN_ALL( ME->R_SVCEL_XCOMP ).

***   Add own element
      append IR_SVCEL_XCOMP to ME->T_SVCEL.

    endif.
    if it_SVCEL[] is not initial.
      ME->T_SVCEL[] = it_svcel[].
    endif.
  endmethod.
  method GET_CHILDREN_ALL.

    data: LT_SVCEL       type        /VCXI/CKX_TT_OBJECT,
          LT_SVCEL_XCOMP type        /VCXI/CKX_TT_OBJECT.
    data: LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_CRCONO type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_XCOMPO type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_EA_CRCONI    type ref to ZCL_VCXI_PXSS_EA_XCONI,
          LR_EA_CRCONO    type ref to YCL_HP_SVCS_EA_CRCONO,
          LR_XCOMPO_GATE  type ref to /VCXI/CL_VKSR_GATE.

***-------------------------------------------------------------------*
    LT_SVCEL = IR_SVCEL->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).
    loop at LT_SVCEL into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL.

      if LR_OBJECT->GET_ID( ) eq 'CRCONI'.
        try.
            move LR_SVCEL->GET_CLSEA( ) ?to LR_EA_CRCONI.
            move LR_EA_CRCONI->GET_XCONO( ) to LR_SVCEL_CRCONO.

          catch CX_SY_MOVE_CAST_ERROR.
            free LR_EA_CRCONI.
        endtry.
      endif.

      GET_CHILDREN_ALL( IR_SVCEL = LR_SVCEL ).
      append LR_OBJECT to T_SVCEL.
    endloop.

*** In case FG with SFG, then find connected component to collect SVC elements
    check LR_SVCEL_CRCONO is bound.
    try.
        move LR_SVCEL_CRCONO->GET_CLSEA( ) ?to LR_EA_CRCONO.
        LR_XCOMPO_GATE = LR_EA_CRCONO->GET_XCOMP_GATE( ).

        check LR_XCOMPO_GATE is bound and ME->R_SVC is bound.
        LT_SVCEL_XCOMP = ME->R_SVC->GET_SVC_ELEMENTS( exporting IF_ID     = LR_XCOMPO_GATE->F_ID
                                                                IF_INUSE  = ABAP_TRUE           ).

        loop at LT_SVCEL_XCOMP into LR_OBJECT.
          move LR_OBJECT ?to LR_SVCEL.
          check LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_GUID( ) eq LR_XCOMPO_GATE->F_GATKY.
          move LR_SVCEL to LR_SVCEL_XCOMPO.
          exit.
        endloop.

***     Add all child elements of the Connection Out Component
        GET_CHILDREN_ALL( IR_SVCEL = LR_SVCEL_XCOMPO ).

***     Remove own connection out to avoid conflict on Level 2 of Prod.H.
        delete T_SVCEL where TABLE_LINE eq LR_SVCEL_CRCONO.

      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_SVCEL_CRCONO.
    endtry.

  endmethod.
  method GET_PRODH.

    data: LF_LVL1 type PRODH_D,
          LF_LVL2 type PRODH_D,
          LF_LVL3 type PRODH_D.
    data: LR_PRODH type ref to YCL_HP_X_SRV_PRODH.

***-------------------------------------------------------------------*
*** Create Product Hierarchy instance
    try.
        create object LR_PRODH
          exporting
            IR_SVCEL_XCOMP = IR_SVCEL_XCOMP
            IF_MTART       = IF_MTART
            IR_SVC         = IR_SVC
            IF_SOKEY       = IF_SOKEY
            IT_SVCEL       = IT_SVCEL.

      catch /VCXI/CX_CKX.
        return.
    endtry.

***-------------------------------------------------------------------*
*** Level 1 based on material type.
    LF_LVL1  = LR_PRODH->CALC_PRODH_LEVEL1(  ).

*** Level 2 - based on product type
    LF_LVL2 = LR_PRODH->CALC_PRODH_LEVEL2(  ).

*** Level 3 - based on printing attributes
*** not applicable for tools (cliches "UC"; die tools "UT") and kits
    if LF_LVL1  ne C_LV1_UC and
       LF_LVL1  ne C_LV1_UT and
       LF_LVL1  ne C_LV1_KI and
       IF_SOKEY ne ZCL_VCXI_P4M_MBQ_BL_PRCOMP=>C_SOKEY_PRFG and " not for Procurement Finished Good
       IF_SOKEY ne ZCL_VCXI_P4M_MBQ_BL_PRCOMP=>C_SOKEY_PRPART.  " not for Procurement Part
      LF_LVL3 = LR_PRODH->CALC_PRODH_LEVEL3( ).
    endif.

*** Build product hierarchy
    concatenate LF_LVL1 LF_LVL2 LF_LVL3 into RF_PRODH.
    condense RF_PRODH no-gaps.

***-------------------------------------------------------------------*
*** Check that the Product Hierarchy is Valid
    select count(*)
      from T179
      where PRODH = RF_PRODH.
    check SY-SUBRC ne 0.

*** Product Hierarchy &1 is not valid for Matl. Type &2.
    message E001(YHP_X) with RF_PRODH LR_PRODH->F_MTART into data(LF_MSG).
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).

  endmethod.
  method GET_TOOL_PARAM.

    data: LS_TD01  type YHP_SMD_MBQ_TD01,
          LS_TC002 type YRF_TPR_TC002.
    data: LR_VALEX type ref to DATA.
    field-symbols: <S_VALEX> type ANY,
                   <F_VALUE> type ANY.


*** Get Tool Status from VC Value Extraction
    YCL_HP_SMD_MBQ_CUST=>GET_TLCNF( exporting IF_SOKEY = ME->F_SOKEY
                                    importing ES_TD01  = LS_TD01 ).

    if ME->R_SVC is bound.
      LR_VALEX = ME->R_SVC->GET_VALEX( IF_IVEMO       = LS_TD01-IVEMO
                                      IR_SVC_ELEMENT = ME->R_SVCEL_XCOMP ).
      if LR_VALEX is bound.
        assign LR_VALEX->* to <S_VALEX>.
        check <S_VALEX> is assigned.
        assign component IF_FNAME of structure <S_VALEX> to <F_VALUE>.
        move <F_VALUE> to EF_VALUE.
      endif.
    endif.

  endmethod.
  method MAP_TPRIN_TO_PRODH.

*** Determine based on printing type
    case IF_TPRIN.
      when 'FLEXO'.
        move C_LV3_FL to RF_PRODH.

      when 'OFFSET'.
        move C_LV3_OF to RF_PRODH.

      when 'DIGITAL'.
        move C_LV3_DI to RF_PRODH.

      when 'FX_HQ'.
****    Cliches will always have FL for any flexo type
        if ME->F_LVL1 eq C_LV1_UC.
          move C_LV3_FL to RF_PRODH.
        else.
          move C_LV3_HQ to RF_PRODH.
        endif.

      when SPACE.
        move C_LV3_NI to RF_PRODH.

      when others.
***     Print Type &1 does not have a Product Hierarchy value for Matl. Type &2.
        message E003(YHP_X) with IF_TPRIN ME->F_MTART into data(LF_MSG).
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endcase.

  endmethod.
