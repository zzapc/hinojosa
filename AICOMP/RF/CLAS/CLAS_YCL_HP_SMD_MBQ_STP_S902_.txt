
class YCL_HP_SMD_MBQ_STP_S902 definition
  public
  inheriting from ZCL_VCXI_XCM_MBQ_STP_S000
  final
  create public .

public section.

  methods EXECUTE
    redefinition .
protected section.

  types:
    begin of YS_KOTAB,
          KOTAB type KOTABNR,
         end of YS_KOTAB .
  types:
    YT_KOTAB type table of YS_KOTAB .

  methods CREATE_MATERIAL_LIST
    importing
      !IF_KVEWE type KVEWE
      !IF_KAPPL type KAPPL
      !IF_KSCHL type KSCHL
      !IF_MATNR type MATNR
      !IF_DATBI type DATBI
    raising
      /VCXI/CX_CKX .
  methods GET_KOTABNR
    importing
      !IF_KVEWE type KVEWE
      !IF_KAPPL type KAPPL
      !IF_KSCHL type KSCHL
    returning
      value(RT_KOTAB) type YHP_SMD_MBQ_TT_KOTABNR
    raising
      /VCXI/CX_CKX .
  methods GET_KOMG
    importing
      !IF_MATNR type MATNR
    returning
      value(RS_KOMG) type KOMG
    raising
      /VCXI/CX_CKX .
  methods GET_VARKEY
    importing
      !IF_KVEWE type KVEWE
      !IF_KOTAB type KOTABNR
      !IS_KOMG type KOMG
    returning
      value(RF_VARKEY) type CHAR100 .
  methods CALL_BAPI_CREATE
    importing
      !IS_KOMG type KOMG
      !IF_KVEWE type KVEWE
      !IF_KOTAB type KOTABNR
      !IF_KAPPL type KAPPL
      !IF_KSCHL type KSCHL
      !IF_DATBI type DATBI
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SMD_MBQ_STP_S902 definition
class YCL_HP_SMD_MBQ_STP_S902 implementation.
  method CALL_BAPI_CREATE.

    data: LS_BAPICONDCT type BAPICONDCT,
          LS_BAPIRET2   type BAPIRET2.
    data: LT_BAPICONDCT  type table of BAPICONDCT,
          LT_BAPIRET2    type table of BAPIRET2,
          LT_MEM_INITIAL type table of CND_MEM_INITIAL.


*** Prepare BAPI Parameters
    LS_BAPICONDCT-COND_USAGE = IF_KVEWE.
    LS_BAPICONDCT-TABLE_NO   = IF_KOTAB.
    LS_BAPICONDCT-APPLICATIO = IF_KAPPL.
    LS_BAPICONDCT-COND_TYPE  = IF_KSCHL.
    LS_BAPICONDCT-VARKEY     = ME->GET_VARKEY( IF_KVEWE = IF_KVEWE
                                               IF_KOTAB = IF_KOTAB
                                               IS_KOMG  = IS_KOMG ).
    LS_BAPICONDCT-VALID_FROM = ME->R_DCO_INPUT->R_BOB_SDOC->S_VBAK-ANGDT.
    LS_BAPICONDCT-VALID_TO   = IF_DATBI.
    append LS_BAPICONDCT to LT_BAPICONDCT.

*** Call BAPI to Create Material List (Inclusion/Exclusion)
    call function 'BAPI_LISTING_CONDITIONS'
*     EXPORTING
*   PI_INITIALMODE       = 'X'
*   PI_BLOCKNUMBER       = 'X'
*   PI_SUBBLOCKNO        = 'X'
      tables
        TI_BAPICONDCT  = LT_BAPICONDCT
        TO_BAPIRET2    = LT_BAPIRET2
        TO_MEM_INITIAL = LT_MEM_INITIAL
      exceptions
        others         = 99.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** BAPI Error Handling
    read table LT_BAPIRET2 into LS_BAPIRET2 with key TYPE = 'E'.
    if SY-SUBRC is initial.
      call function 'BAPI_TRANSACTION_ROLLBACK'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    else.
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
    endif.

  endmethod.
  method CREATE_MATERIAL_LIST.

    data: LS_KOMG       type KOMG,
          LS_KOTABNR    type YHP_SMD_MBQ_S_KOTABNR.
    data: LT_KOTABNR     type YHP_SMD_MBQ_TT_KOTABNR.

*** Get Allowed Fields for Condition Structures
    LS_KOMG = ME->GET_KOMG( IF_MATNR = IF_MATNR ).

*** Get Access Sequence - Condition Tables
    LT_KOTABNR = ME->GET_KOTABNR( IF_KVEWE = IF_KVEWE
                                  IF_KAPPL = IF_KAPPL
                                  IF_KSCHL = IF_KSCHL ).

*** Create Material List for Each Access Sequence
    loop at LT_KOTABNR into LS_KOTABNR.

      ME->CALL_BAPI_CREATE( IS_KOMG  = LS_KOMG
                            IF_KVEWE = IF_KVEWE
                            IF_KOTAB = LS_KOTABNR-KOTABNR
                            IF_KAPPL = IF_KAPPL
                            IF_KSCHL = IF_KSCHL
                            IF_DATBI = IF_DATBI ).

    endloop.

  endmethod.
  method EXECUTE.

    data: LS_MATLI      type ZVCXI_XCM_MBQ_S_MATLI.
    data: LR_ACTDAT  type ref to DATA.
    field-symbols: <S_ACTDAT_MLI> type YHP_SMD_MBQ_S_ACTDAT_MLI.


    try.
***     Get Material List Entry of active Material List Entry
        LS_MATLI = ME->R_DCO_INPUT->T_MATLI[ MLCNT = ME->R_DCO_INPUT->F_MLCNT ].

***     Check Activity - Create Material List
        if not LINE_EXISTS( LS_MATLI-T_ACTCON[ ACTID = YCL_HP_SMD_MBQ_CUST=>C_ACTID_MLI ] ).
***       Set Status to CANCELED
          ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ).
          return.
        endif.

***     Load Activity Control Data for Create Material List
        LR_ACTDAT = LS_MATLI-T_ACTCON[ ACTID = YCL_HP_SMD_MBQ_CUST=>C_ACTID_MLI ]-R_ACTDAT.
        assign LR_ACTDAT->* to <S_ACTDAT_MLI>.

***     Create Material List
        ME->CREATE_MATERIAL_LIST( IF_KVEWE = <S_ACTDAT_MLI>-KVEWE
                                  IF_KSCHL = <S_ACTDAT_MLI>-KSCHL
                                  IF_KAPPL = <S_ACTDAT_MLI>-KAPPL
                                  IF_MATNR = LS_MATLI-MATNR
                                  IF_DATBI = <S_ACTDAT_MLI>-DATBI ).

***     Status message successful update
        ME->R_RPSEG->R_MSG->ADD_MESSAGE( IF_MSGID = 'YHP_SMD_MBQ'
                                         IF_MSGTY = 'S'
                                         IF_MSGNO = '019'
                                         IF_MSGV1 = <S_ACTDAT_MLI>-KSCHL
                                         IF_MSGV2 = LS_MATLI-MATNR ).

***     Set Status to Complete
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED ).

***--------------------------------------------------------------------------------------
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
***     Set Status to Error
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

***     Add Message to Message Log
        ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).

    endtry.

  endmethod.
  method GET_KOMG.

    data: LS_VBKD type VBKD.


*** Fill KOMG Structure - First with VBAK then VBAP then VBKD
    move-corresponding ME->R_DCO_INPUT->R_BOB_SDOC->S_VBAK to RS_KOMG.
    move-corresponding ME->R_DCO_INPUT->R_BOB_SDOC->T_VBAP[ POSNR = ME->R_DCO_INPUT->F_POSNR ] to RS_KOMG.

    read table ME->R_DCO_INPUT->R_BOB_SDOC->T_VBKD
         into LS_VBKD
         with key POSNR = ME->R_DCO_INPUT->F_POSNR.
    if SY-SUBRC ne 0.
      read table ME->R_DCO_INPUT->R_BOB_SDOC->T_VBKD
         into LS_VBKD
         with key POSNR = '000000'.
    endif.
    move-corresponding LS_VBKD to RS_KOMG.

*** Fill KOMG Structure - Partner: Sold-To
    RS_KOMG-KUNNR = RS_KOMG-KUNAG = value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBPA[ POSNR = ME->R_DCO_INPUT->F_POSNR
                                                                                  PARVW = 'AG' ]-KUNNR optional ).
    if RS_KOMG-KUNNR is initial.
      RS_KOMG-KUNNR = RS_KOMG-KUNAG =  value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBPA[ POSNR = ''
                                                                                     PARVW = 'AG' ]-KUNNR optional ).
    endif.

*** Fill KOMG Structure - Partner: Ship-To
    RS_KOMG-KUNWE = value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBPA[ POSNR = ME->R_DCO_INPUT->F_POSNR
                                                                  PARVW = 'WE' ]-KUNNR optional ).
    if RS_KOMG-KUNWE is initial.
      RS_KOMG-KUNWE = value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBPA[ POSNR = ''
                                                                    PARVW = 'WE' ]-KUNNR optional ).
    endif.

*** Fill KOMG Structure - Partner: Bill-To-Party
    RS_KOMG-KUNRE = value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBPA[ POSNR = ME->R_DCO_INPUT->F_POSNR
                                                                  PARVW = 'BP' ]-KUNNR optional ).
    if RS_KOMG-KUNRE is initial.
      RS_KOMG-KUNRE = value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBPA[ POSNR = ''
                                                                    PARVW = 'BP' ]-KUNNR optional ).
    endif.

*** Fill KOMG Structure - Partner: Payer
    RS_KOMG-KUNRG = value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBPA[ POSNR = ME->R_DCO_INPUT->F_POSNR
                                                                  PARVW = 'PY' ]-KUNNR optional ).
    if RS_KOMG-KUNRG is initial.
      RS_KOMG-KUNRG = value #( ME->R_DCO_INPUT->R_BOB_SDOC->T_VBPA[ POSNR = ''
                                                                    PARVW = 'PY' ]-KUNNR optional ).
    endif.

*** Fill KOMG Structure - Material Number
    move IF_MATNR to RS_KOMG-MATNR.

  endmethod.
  method GET_KOTABNR.

*** Get Access Sequences - Condition Tables
    select *
      from T685 as T685
      inner join T682I as T682I
        on T682I~KVEWE eq T685~KVEWE and
           T682I~KAPPL eq T685~KAPPL and
           T682I~KOZGF eq T685~KOZGF
      into corresponding fields of table RT_KOTAB
      where T685~KVEWE eq IF_KVEWE and
            T685~KAPPL eq IF_KAPPL and
            T685~KSCHL eq IF_KSCHL.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'YHP_SMD_MBQ'
                                            IF_MSGNO = 018
                                            IF_MSGV1 = IF_KSCHL ).
    endif.

    delete adjacent duplicates from RT_KOTAB.

  endmethod.
  method GET_VARKEY.

    data: LF_REPID type PROGNAME.
    data: LS_KOMGG type KOMGG.


*** Generate Variance Key
    call function 'RV_T681_SELECT_AND_GENERATE'
      exporting
        CAA_KVEWE          = IF_KVEWE
        CAA_KOTABNR        = IF_KOTAB
      importing
        CAA_ACCESS_PROGRAM = LF_REPID
      exceptions
        others             = 99.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    move-corresponding IS_KOMG to LS_KOMGG.

    perform FILL_VAKEY_FROM_COMM_AREA in program (LF_REPID) using RF_VARKEY
                                                                  LS_KOMGG.

  endmethod.
