
class YCL_HP_ESKO definition
  public
  final
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_CUOBJ type CUOBJ_VA
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_IEALI type /VCXI/VKSC_IEALI
      !IF_LOCKED type /VCXI/CKX_LOCKED
      !IF_AS_PART type FLAG .
  methods GET_DETAILS_ORDER
    importing
      !IF_VBELN type VBELN_VA
    exporting
      !ET_RETURN type BAPIRET2
    raising
      /VCXI/CX_CKX .
  methods CHECK_REVRF
    importing
      !IF_VBELN type VBELN_VA
      !IF_POSNR type POSNR_VA
      !IR_SVC_ELEMENT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(EF_REVRV) type FLAG
    raising
      /VCXI/CX_CKX .
  methods CREATE_ITEM_REVFF
    importing
      !IF_VBELN type VBELN_VA
      !IF_POSNR type POSNR_VA
      !IF_CUOBJ type CUOBJ
      !IS_ORDERITEMS type BAPISDIT
      !IS_ORDERCONDIT type BAPICONDIT
    raising
      /VCXI/CX_CKX .
  methods ADD_ITEM
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR
      !IS_ITEM type BAPISDIT
      !IS_ORDERCONDIT type BAPICONDIT .
  methods ADD_COND
    importing
      !IF_POSNR type POSNR
      !IF_KSCHL type KSCHL
      !IF_KBETR type KBETR
      !IF_KONWA type KONWA
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC .
  methods ADD_CNF
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR .
  methods BUILD_IDAT
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR .
protected section.

  data F_CUOBJ type CUOBJ_VA .
  data F_MATNR type MATNR .
  data F_NODEKEY type NUMC4 .
  data F_WERKS type WERKS_D .
  data R_CONTAINER_TOOLBAR type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_TREE type ref to CL_GUI_CUSTOM_CONTAINER .
  data T_MATLI type YHP_SVCS_TT_OPENSPV_MATLI .
  data T_SVCEL type ZVCXI_XCI_TT_SVCEL .
  data T_XCONG type ZVCXI_PXSS_TT_XCONG .
private section.
endclass. "YCL_HP_ESKO definition
class YCL_HP_ESKO implementation.
  method ADD_CNF.

    data: LF_CUOBJ     type CUOBJ,
          LF_CONFIG_ID type CUX_CFG_ID value '000001',
          LF_INST_ID   type CU_INST_ID value '00000001'.
    data: LS_VBAP type VBAP,
          LS_CUCO type CUCO.

*** Get Position
    LS_VBAP = value #( IR_BOB_SDOC->T_VBAP[ POSNR = IF_POSNR ] optional ).
    if LS_VBAP-POSNR ne IF_POSNR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***----------------------------------------------------------------------------
*** Get Profile Settings
    select single CUOBJ
           from MARC
           into LF_CUOBJ
          where MATNR eq LS_VBAP-MATNR
           and  WERKS eq LS_VBAP-WERKS.
    check SY-SUBRC eq 0.

    call function 'CUCB_GET_PROFILE_OF_INSTANCE'
      exporting
        INSTANCE                     = LF_CUOBJ
      importing
        PROFILE_WA                   = LS_CUCO
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2
        PROFILE_NOT_FOUND            = 3
        INVALID_INPUT                = 4.
    check SY-SUBRC eq 0.


*** Reference Order Item / Instance in Configuration
    append value #( POSEX     = LS_VBAP-POSNR
                    CONFIG_ID = LF_CONFIG_ID
                    INST_ID   = LF_INST_ID
                  ) to IR_BOB_SDOC->T_CFGS_REFINST.

*** Instances
    append value #( CONFIG_ID     = LF_CONFIG_ID
                    INST_ID       = LF_INST_ID
                    OBJ_TYPE      = LS_CUCO-OBTAB
                    CLASS_TYPE    = LS_CUCO-KLART
                    OBJ_KEY       = LS_CUCO-OBJEK
                    QUANTITY      = LS_VBAP-KWMENG
                    QUANTITY_UNIT = LS_VBAP-VRKME
                    COMPLETE      = 'F'
                    CONSISTENT    = 'F'
                  ) to IR_BOB_SDOC->T_CFGS_INST.

*** Configuration Data
    append value #( POSEX         = LS_VBAP-POSNR
                    CONFIG_ID     = LF_CONFIG_ID
                    ROOT_ID       = LF_INST_ID
                    COMPLETE      = 'F'
                    CONSISTENT    = 'F'
                  ) to IR_BOB_SDOC->T_CFGS_REF.

*** Update Flag for Configuration
    append value #( POSNR = LS_VBAP-POSNR
                    UPDKZ = 'I'
                  ) to IR_BOB_SDOC->T_CFGS_UPDKZ.

  endmethod.
  method ADD_COND.

    append value #( KPOSN = IF_POSNR
                KSCHL = IF_KSCHL
                KBETR = IF_KBETR
                WAERS = IF_KONWA
              ) to IR_BOB_SDOC->T_KOMV.

  endmethod.
  method ADD_ITEM.

    data: LS_MARA type MARA.

    call function 'MARA_SINGLE_READ'
      exporting
        MATNR             = IS_ITEM-MATERIAL
      importing
        WMARA             = LS_MARA
      exceptions
        LOCK_ON_MATERIAL  = 1
        LOCK_SYSTEM_ERROR = 2
        WRONG_CALL        = 3
        NOT_FOUND         = 4.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Add Item
*    append value #( POSNR     = IF_POSNR
*                    MATNR     = IS_ITEM-MATERIAL
*                    WERKS     = IS_ITEM-PLANT
*                    SPART     = IR_BOB_SDOC->S_VBAK-SPART
*                    KWMENG    = IS_ITEM-REQ_QTY
*                    VRKME     = LS_MARA-MEINS
*                    MEINS     = LS_MARA-MEINS
*                    UMVKZ  = 1
*                    UMVKN  = 1
*                    STDAT  = SY-DATUM
*                     ) to IR_BOB_SDOC->T_VBAP.

*** Schedule Lines Data
    append value #( POSNR = IF_POSNR
                    ETENR = '0001'
                    WMENG = IS_ITEM-REQ_QTY
                    VRKME = LS_MARA-MEINS
                    MEINS = LS_MARA-MEINS
                  ) to IR_BOB_SDOC->T_VBEP.

  endmethod.
  method BUILD_IDAT.

 data: LR_SVC      type ref to /VCXI/CL_VKSRA_SVC,
          LR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC,
          LR_CUELMNT  type ref to /VCXI/CL_VKSC_CUELMNT,
          LR_SVCEL    type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT.

*** Get SmartVC API Instance
    LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = IR_BOB_SDOC->T_VBAP[ POSNR = IF_POSNR ]-CUOBJ ) ).

*** Build Integration Data Service
    LR_IDAT_SVC = ZCL_VCXI_XCI_IDAT_SVC=>CREATE( IS_CMPRK = LR_SVC->S_CMPRK
                                                 IF_IEALI = 'X_IDATSPV' ).

*** Get Integration Data Supervisor
    LR_CUELMNT = ZCL_VCXI_XCI_IDAT_SVC=>FIND_CUELMNT( IR_CUPRFL = LR_IDAT_SVC->R_CUPRFL
                                                      IF_IEALI  = LR_IDAT_SVC->F_IEALI ).

*** Get Root Elements
    loop at LR_SVC->GET_SVC_ELEMENTS( IR_SVC_ELEMENT_PARENT = value #( ) ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

*** Filter to Supervised Root Elements
      clear LR_OBJECT.
      loop at LR_CUELMNT->/VCXI/IF_VKSC_CUELMNT_SPV~T_SPVRT into LR_OBJECT.
        if LR_OBJECT->GET_ID( ) ne LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
          clear LR_OBJECT.
        else.
          exit.
        endif.
      endloop.
      check LR_OBJECT is bound.

*** Fill by SmartVC Element
      LR_IDAT_SVC->FILL_BY_SVCEL( IF_IPARE   = value #( )
                                  IF_CPARE   = value #( )
                                  IR_SVC     = LR_SVC
                                  IR_SVCEL   = LR_SVCEL
                                  IR_CUELMNT = cast #( LR_OBJECT )
                                  IR_ADAPTOR = new YCL_HP_SVC_IDAT_ADAPTOR( ) ).
    endloop.

    call function 'ZVCXI_XCC_IDAT_INIT_NIDAT'.

*** Save Integration Data (debug only)
    if 1 = 2.
      LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_SAVE ).
    endif.
    data(LF_ID) = LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT~GET_ID( ).

*** Set Integration Data Number to Buffer for later processing
    call function 'ZVCXI_XCC_IDAT_SET_NIDAT'
      exporting
        IF_POSNR = IF_POSNR
        IF_NIDAT = conv ZVCXI_XCI_NIDAT( LF_ID ).

  endmethod.
  method CHECK_REVRF.
  endmethod.
  method CONSTRUCTOR.

*    move IF_CUOBJ   to ME->F_CUOBJ.
*    move IF_MATNR   to ME->F_MATNR.
*    move IF_WERKS   to ME->F_WERKS.
*    move IF_IEALI   to ME->F_IEALI.
*    move IF_LOCKED  to ME->F_LOCKED.
*    move IF_AS_PART to ME->F_AS_PART.
*    move TEXT-Q01   to ME->F_QUESTION.
*
**** Request Toolbar Refresh
*    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method CREATE_ITEM_REVFF.

    data: LF_POSNR type POSNR,
          S_TVAK   type TVAK.
    data: S_ORDER_HEADER_IN  type BAPISDH1,
          S_ORDER_HEADER_INX type BAPISDH1X,
          ORDER_HEADER_INX   type BAPISDH1X,
          I_BAPI_VIEW        type ORDER_VIEW,
          SALES_DOCUMENTS    type SALES_KEY,
          LT_SALES_DOCUMENT  type standard table of SALES_KEY.
    data: SL_ORDER_ITEM_IN  type BAPISDITM,
          I_ORDER_ITEM_IN   type standard table of BAPISDITM,
          SL_ORDER_ITEM_INX type BAPISDITMX,
          I_ORDER_ITEM_INX  type standard table of BAPISDITMX,
          IT_RETURN         type standard table of BAPIRET2,
          ORDER_ITEMS_OUT   type standard table of BAPISDIT.
    data: LF_CUOBJ     type CUOBJ,
          LF_CONFIG_ID type CUX_CFG_ID value '000001',
          LF_INST_ID   type CU_INST_ID value '00000001'.
    data: LS_VBAP        type VBAP,
          LS_CUCO        type CUCO,
          T_CFGS_REFINST type ZVCXI_XCI_TT_BAPICUREF,
          T_CFGS_INST    type ZVCXI_XCI_TT_BAPICUINS,
          T_CFGS_REF     type ZVCXI_XCI_TT_BAPICUCFG,
          T_CFGS_UPDKZ   type ZVCXI_XCI_TT_CFGS_UPDKZ,
          LR_SVC         type ref to /VCXI/CL_VKSRA_SVC.
    data:  LS_CONF             type          API_VALUE.
    data:  LT_CONF             type table of API_VALUE.

***  begin code Create Business Object
    data: LR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC.
    data: LS_ORDER_VIEW  type ORDER_VIEW.
    data: LF_AS_PART type        FLAG,
          LF_MSG     type        SYMSGV,
          LF_MSGSTR  type        STRING.
    data: LT_SVCEL    type        ZVCXI_XCI_TT_SVCEL,
          LT_MATNR    type        YHP_SVCS_TT_MATNR,
          LS_BAPIRET2 type        BAPIRET2.

***   Define next Position Number
    select single * into S_TVAK from TVAK where AUART eq 'ZOF'.
    LF_POSNR = IF_POSNR + S_TVAK-INCPO.

*       "creo el nuevo item
    SL_ORDER_ITEM_IN-ITM_NUMBER    = LF_POSNR.
    SL_ORDER_ITEM_IN-MATERIAL      = IS_ORDERITEMS-MATERIAL.
    SL_ORDER_ITEM_IN-TARGET_QTY    = IS_ORDERITEMS-TARGET_QTY.
    SL_ORDER_ITEM_IN-SALES_UNIT    = IS_ORDERITEMS-SALES_UNIT.
    SL_ORDER_ITEM_IN-VAL_TYPE      = IS_ORDERITEMS-VAL_TYPE.
    SL_ORDER_ITEM_IN-TARGET_VAL    = IS_ORDERITEMS-NET_VALUE.
    SL_ORDER_ITEM_IN-CURRENCY      = IS_ORDERITEMS-CURRENCY.
    clear SL_ORDER_ITEM_IN-REASON_REJ.
    append SL_ORDER_ITEM_IN to I_ORDER_ITEM_IN.

    SL_ORDER_ITEM_INX-UPDATEFLAG    = 'I'.
    SL_ORDER_ITEM_INX-ITM_NUMBER    = LF_POSNR.
    SL_ORDER_ITEM_INX-MATERIAL      = IS_ORDERITEMS-MATERIAL.
    SL_ORDER_ITEM_INX-TARGET_QTY    = 'X'.
    SL_ORDER_ITEM_INX-SALES_UNIT    = IS_ORDERITEMS-SALES_UNIT.
    SL_ORDER_ITEM_INX-VAL_TYPE      = 'X'.
    SL_ORDER_ITEM_INX-TARGET_VAL    = 'X'.
    SL_ORDER_ITEM_IN-CURRENCY       =  'X'.
    append SL_ORDER_ITEM_INX to I_ORDER_ITEM_INX.


    S_ORDER_HEADER_INX-UPDATEFLAG = 'U'.

    SALES_DOCUMENTS-VBELN = IF_VBELN.
    append SALES_DOCUMENTS to LT_SALES_DOCUMENT.

    call function 'BAPI_SALESORDER_CHANGE'
      exporting
        SALESDOCUMENT     = IF_VBELN "LT_SALES_DOCUMENT
        ORDER_HEADER_INX  = S_ORDER_HEADER_INX
        BEHAVE_WHEN_ERROR = 'P'
      tables
        RETURN            = IT_RETURN
        ORDER_ITEM_IN     = I_ORDER_ITEM_IN
        ORDER_ITEM_INX    = I_ORDER_ITEM_INX.
    if SY-SUBRC eq 0.
      commit work.

      I_BAPI_VIEW-HEADER = 'X'.
      I_BAPI_VIEW-ITEM = 'X'.
      I_BAPI_VIEW-SDCOND = 'X'.
      I_BAPI_VIEW-SDCOND_ADD = 'X'.

*      SALES_DOCUMENTS-VBELN = IF_VBELN.
*      append SALES_DOCUMENTS to LT_SALES_DOCUMENT.

*    ***GET LIST OF ITEMS IN QUOTATION
      call function 'BAPISDORDER_GETDETAILEDLIST'
        exporting
          I_BAPI_VIEW     = I_BAPI_VIEW
        tables
          SALES_DOCUMENTS = LT_SALES_DOCUMENT
          ORDER_ITEMS_OUT = ORDER_ITEMS_OUT.


      read table ORDER_ITEMS_OUT into data(SL_ORDERITEMS) with key ITM_NUMBER = LF_POSNR.
*** Get Configuration based on CUOBJ
      if IF_CUOBJ is not initial.
        call function 'YHP_SVCS_OPENSPV_GET_CNF'
          destination 'NONE'
          exporting
            IF_CUOBJ              = IF_CUOBJ  "LF_CUOBJ
            IF_IEALI              = 'OPENSPV' "ME->F_IEALI
            IF_AS_PART            = LF_AS_PART
          importing
            ET_SVCEL              = LT_SVCEL
            ET_MATNR              = LT_MATNR
            ES_BAPIRET2           = LS_BAPIRET2
          exceptions
            COMMUNICATION_FAILURE = 1 message LF_MSG
            SYSTEM_FAILURE        = 2 message LF_MSG
            others                = 3.

        case SY-SUBRC.
          when 1.
            move LF_MSG to LF_MSGSTR.
            /VCXI/CX_CKX=>RAISE_CKX_BY_STRING( LF_MSGSTR ).
          when 2.
            move LF_MSG to LF_MSGSTR.
            /VCXI/CX_CKX=>RAISE_CKX_BY_STRING( LF_MSGSTR ).
          when 3.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endcase.
        if LS_BAPIRET2 is not initial.
          /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
        endif.
      endif.

      try.
          LR_BOB_SDOC = new #( ).

***   Load existing Sales Document
          LR_BOB_SDOC->INIT_FROM_DB( IF_VBELN      = IF_VBELN
                                     IS_ORDER_VIEW = value #( HEADER     = ABAP_TRUE
                                                              ITEM       = ABAP_TRUE
                                                              SDSCHEDULE = ABAP_TRUE
                                                              BUSINESS   = ABAP_TRUE
                                                              PARTNER    = ABAP_TRUE
                                                              SDCOND     = ABAP_TRUE
                                                              CONFIGURE  = ABAP_TRUE ) ).

          check LINE_EXISTS( LR_BOB_SDOC->T_VBAP[ POSNR = IF_POSNR ] ).

***   Lock Sales Document
          LR_BOB_SDOC->ENQUEUE( ).



***   Add Line Item
          ME->ADD_ITEM( exporting IR_BOB_SDOC = LR_BOB_SDOC
                                  IF_POSNR    = LF_POSNR
                                  IS_ITEM     = SL_ORDERITEMS
                                  IS_ORDERCONDIT = IS_ORDERCONDIT ).

***   Add Configuration
          ME->ADD_CNF( exporting IR_BOB_SDOC  = LR_BOB_SDOC
                                 IF_POSNR     = LF_POSNR ).

***   Run Configuration of Item
          LF_CUOBJ = LR_BOB_SDOC->RUN_CONFIG( IF_POSNR = LF_POSNR ).

***   Get SmartVC API Instance
          LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = LF_CUOBJ ) ).


** Update SmartVC via Fast Data (Run Configuration afterwards to ensure Routing Supervisor gets executed)
          YCL_HP_SVC_IDAT_FDMDL=>UPDATE_VIA_FASTD( IR_SVC =  LR_SVC ).

***********************************************************************
          LR_SVC->UPDATE_DC( ).
          LF_CUOBJ = LR_BOB_SDOC->RUN_CONFIG( IF_POSNR = LF_POSNR ).

***       Debug only - display SmartVC
          if 1 = 2.
            LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = LF_CUOBJ ) ).
            LR_SVC->START_UI( ).
          endif.

***   Create Integration Data for SmartVC
          ME->BUILD_IDAT( exporting IR_BOB_SDOC  = LR_BOB_SDOC
                                    IF_POSNR     = LF_POSNR ).

*** Export parameters

*** Restore LO-VC UI
          call function 'DIALOG_SET_WITH_DIALOG'.


        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          LR_CX_CKX->SHOW_MESSAGE( ).
      endtry.

    endif.





************ end code



**++*
**      *** Get Profile Settings
*        select single CUOBJ
*               from MARC
*               into LF_CUOBJ
*              where MATNR eq SL_ORDERITEMOUT-MATERIAL  "MATNR
*               and  WERKS eq SL_ORDERITEMOUT-PLANT.    "  LS_VBAP-WERKS.
*        check SY-SUBRC eq 0.
*
*        call function 'CUCB_GET_PROFILE_OF_INSTANCE'
*          exporting
*            INSTANCE                     = LF_CUOBJ
*          importing
*            PROFILE_WA                   = LS_CUCO
*          exceptions
*            INVALID_INSTANCE             = 1
*            INSTANCE_IS_A_CLASSIFICATION = 2
*            PROFILE_NOT_FOUND            = 3
*            INVALID_INPUT                = 4.
*        check SY-SUBRC eq 0.
*
**** REFERENCE ORDER ITEM / INSTANCE IN CONFIGURATION
*        append value #( POSEX     = LF_POSNR
*                        CONFIG_ID = LF_CONFIG_ID
*                        INST_ID   = LF_INST_ID
*                      ) to T_CFGS_REFINST.
*
**** Instances
*        append value #( CONFIG_ID     = LF_CONFIG_ID
*                        INST_ID       = LF_INST_ID
*                        OBJ_TYPE      = LS_CUCO-OBTAB
*                        CLASS_TYPE    = LS_CUCO-KLART
*                        OBJ_KEY       = LS_CUCO-OBJEK
*                        QUANTITY      = LS_VBAP-KWMENG
*                        QUANTITY_UNIT = LS_VBAP-VRKME
*                        COMPLETE      = 'F'
*                        CONSISTENT    = 'F'
*                      ) to T_CFGS_INST.
*
**** Configuration Data
*        append value #( POSEX         = LF_POSNR
*                        CONFIG_ID     = LF_CONFIG_ID
*                        ROOT_ID       = LF_INST_ID
*                        COMPLETE      = 'F'
*                        CONSISTENT    = 'F'
*                      ) to T_CFGS_REF.
*
**** Update Flag for Configuration
*        append value #( POSNR = LF_POSNR
*                        UPDKZ = 'I'
*                      ) to T_CFGS_UPDKZ.
*
*
*
*        ""GET VALUES CONFIG ITEM PATHER
*        call function 'VC_I_GET_CONFIGURATION_IBASE'
*          exporting
*            INSTANCE            = IF_CUOBJ
*          tables
*            ET_CONF_WITH_AUTHOR = LT_CONF
*          exceptions
*            INSTANCE_NOT_FOUND  = 1.
*
*        data: LR_SVC      type ref to /VCXI/CL_VKSRA_SVC,
*              LR_IDAT_SVC type ref to YCL_HP_SVCS_IDAT_SVC, "YCL_VCXI_XCI_IDAT_SVC,
*              LR_CUELMNT  type ref to /VCXI/CL_VKSC_CUELMNT,
*              LR_SVCEL    type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
*              LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT.
**** Get SmartVC API Instance PARA EL NUEVO ITEM
*        LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = SL_ORDERITEMOUT-CONFIG ) ).
*
**** Build Integration Data Service
*        LR_IDAT_SVC = YCL_HP_SVCS_IDAT_SVC=>CREATE( IS_CMPRK = LR_SVC->S_CMPRK
*                                                     IF_IEALI = 'X_IDATSPV' ).
**** Get Integration Data Supervisor
*        LR_CUELMNT = ZCL_VCXI_XCI_IDAT_SVC=>FIND_CUELMNT( IR_CUPRFL = LR_IDAT_SVC->R_CUPRFL
*                                                          IF_IEALI  = LR_IDAT_SVC->F_IEALI ).
*
*
**** Get Root Elements
*        loop at LR_SVC->GET_SVC_ELEMENTS( IR_SVC_ELEMENT_PARENT = value #( ) ) into LR_OBJECT.
*          LR_SVCEL ?= LR_OBJECT.
*
**** Filter to Supervised Root Elements
*          clear LR_OBJECT.
*          loop at LR_CUELMNT->/VCXI/IF_VKSC_CUELMNT_SPV~T_SPVRT into LR_OBJECT.
*            if LR_OBJECT->GET_ID( ) ne LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
*              clear LR_OBJECT.
*            else.
*              exit.
*            endif.
*          endloop.
*          check LR_OBJECT is bound.
*
**** Fill by SmartVC Element
*          LR_IDAT_SVC->FILL_BY_SVCEL( IF_IPARE   = value #( )
*                                      IF_CPARE   = value #( )
*                                      IR_SVC     = LR_SVC
*                                      IR_SVCEL   = LR_SVCEL
*                                      IR_CUELMNT = cast #( LR_OBJECT )
*                                      IR_ADAPTOR = new YCL_HP_SVC_IDAT_ADAPTOR( ) ).
*        endloop.
*
*        call function 'ZVCXI_XCC_IDAT_INIT_NIDAT'.
*
**** Save Integration Data (debug only)
*        if 1 = 2.
*          LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_SAVE ).
*        endif.
*
*      endif.
*    endif.

  endmethod.
  method GET_DETAILS_ORDER.

    data: I_BAPI_VIEW       type ORDER_VIEW,
          SALES_DOCUMENTS   type SALES_KEY,
          LT_SALES_DOCUMENT type standard table of SALES_KEY,
          ORDER_ITEMS_OUT   type standard table of BAPISDIT,
          ORDER_HEADERS_OUT type standard table of BAPISDHD,
          ORDER_HEADER_INX  type standard table of BAPISDH1X,
          ORDER_COND_ITEMS_OUT TYPE STANDARD TABLE OF BAPICONDIT.

    data: LR_SVC    type ref to /VCXI/CL_VKSRA_SVC,
          LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
    data: LT_SVCEL   type        /VCXI/CKX_TT_OBJECT.
    data: LF_CUOBJ type CUOBJ,
          LF_REVRV type FLAG,
          LV_LINES type I.


    I_BAPI_VIEW-HEADER = 'X'.
    I_BAPI_VIEW-ITEM = 'X'.
    I_BAPI_VIEW-SDCOND = 'X'.
    I_BAPI_VIEW-SDCOND_ADD = 'X'.

    SALES_DOCUMENTS-VBELN = IF_VBELN.
    append SALES_DOCUMENTS to LT_SALES_DOCUMENT.

*    ***GET LIST OF ITEMS IN QUOTATION
    call function 'BAPISDORDER_GETDETAILEDLIST'
      exporting
        I_BAPI_VIEW       = I_BAPI_VIEW
      tables
        SALES_DOCUMENTS   = LT_SALES_DOCUMENT
        ORDER_HEADERS_OUT = ORDER_HEADERS_OUT
        ORDER_ITEMS_OUT   = ORDER_ITEMS_OUT
        ORDER_COND_ITEM   = ORDER_COND_ITEMS_OUT.

    describe table ORDER_ITEMS_OUT lines LV_LINES.

    loop at ORDER_ITEMS_OUT into data(SL_ORDER_ITEMS_OUT) where REA_FOR_RE eq 'Z4'.

      if LV_LINES > 1. "revisar que los items que no tienen z4 no tienen revrf
        "1 BEGIN REVISION DE LOS ITEM PARA SABER SI YA EXISTE UNO QUE TENGA EL VBEL + POSNR
        loop at ORDER_ITEMS_OUT into data(SL_ORDER_ITEMS_OUTV) where REA_FOR_RE ne 'Z4'.

          "GET CONFIGURACION FROM CUOBJ
          LF_CUOBJ = SL_ORDER_ITEMS_OUTV-CONFIG.

*    "1) Get GUID of VC Instance from CUOBJ
          data(LF_GVCIN_POS) = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( LF_CUOBJ ).

*     "Get SmartVC API Instance
          LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = LF_CUOBJ ) ).

*** Get Components
          append lines of LR_SVC->GET_SVC_ELEMENTS( IF_ID    = 'CADIF_PRJ'
                                                    IF_INUSE = ABAP_TRUE ) to LT_SVCEL.

*    *** Get Corr Components VE
          loop at LT_SVCEL into LR_OBJECT.
            try.
                move LR_OBJECT ?to LR_SVCEL.
              catch CX_SY_MOVE_CAST_ERROR.
                clear: LR_SVCEL.
            endtry.

            try.
***   EN UNA REVREF CREAR METODO PARA CON EL LR_SVCEL ME REGRESE SI TIENE O NO TIENE REVFEV DE ESA POSICION
*VAMOS A ENVIAR DE PARAMETROS IMPORT VBELN & POSNR
                LF_REVRV = ME->CHECK_REVRF( IF_VBELN       = SL_ORDER_ITEMS_OUTV-DOC_NUMBER
                                            IF_POSNR       = SL_ORDER_ITEMS_OUTV-ITM_NUMBER
                                            IR_SVC_ELEMENT = LR_SVCEL ).
                if LF_REVRV is not initial. "YA EXISTE UN ITEM ASI
                  exit.
                endif.

              catch /VCXI/CX_CKX into data(LR_CX_CKX).
                continue.
            endtry.

          endloop.

        endloop.

      else. "solo hay 1 linea por lo tanto copiamos directamente
        "VAMOS A CREAR UN ITEM IGUAL AL SEGUNDO Y COPIARLE LA CONFIGURACION  LLAMANDO OTRO METODO
        READ TABLE ORDER_COND_ITEMS_OUT INTO DATA(SL_ORDER_COND_ITEMS_OUT) WITH KEY COND_TYPE = 'ZPRC'.
        call method ME->CREATE_ITEM_REVFF
          exporting
            IF_VBELN       = SL_ORDER_ITEMS_OUT-DOC_NUMBER
            IF_POSNR       = SL_ORDER_ITEMS_OUT-ITM_NUMBER
            IF_CUOBJ       = SL_ORDER_ITEMS_OUT-CONFIG
            IS_ORDERITEMS  = SL_ORDER_ITEMS_OUT
            IS_ORDERCONDIT = SL_ORDER_COND_ITEMS_OUT.

      endif.
    endloop.

  endmethod.
