
class YCL_HP_IDX_QUERY definition
  public
  final
  create public .

  public section.

    types: TY_FIELDS type standard table of RSDSFIELDS .

    constants C_MAT type STRING value 'MAT' ##NO_TEXT.
    constants C_SDOC type STRING value 'SDOC' ##NO_TEXT.
    data F_SELTY type STRING .

    methods CONSTRUCTOR
      importing
        !IT_FIELDS type TY_FIELDS
        !IT_RANGES type RSDS_TRANGE
        !IT_WHERES type RSDS_TWHERE
      raising
        /VCXI/CX_CKX .
    methods QUERY
      importing
        !IF_SELTY type STRING
      raising
        /VCXI/CX_CKX .
    methods GET_RESULT
      returning
        value(RR_RDATA) type ref to DATA
      raising
        /VCXI/CX_CKX .
protected section.

  types:
    TY_TABLES type standard table of TABNAME with default key .
  types:
    TY_TD101 type standard table of YHP_IDX_TD101 with default key .

  data R_IDX type ref to DATA .
  data T_RANGES type RSDS_TRANGE .
  data T_FIELDS type TY_FIELDS .
  data R_RESULT_DATA type ref to DATA .
  data T_WHERE_CLAUSES type RSDS_TWHERE .
  data T_TC030 type YHP_IDX_TT_TC030 .

  methods CONVERT_RANGES_EX2_IN
    raising
      /VCXI/CX_CKX .
  methods BUILD_JOIN_IDX
    returning
      value(RF_JOIN) type STRING
    raising
      /VCXI/CX_CKX .
  methods BUILD_JOIN_MAT
    returning
      value(RF_JOIN) type STRING
    raising
      /VCXI/CX_CKX .
  methods BUILD_JOIN_SDOC
    returning
      value(RF_JOIN) type STRING
    raising
      /VCXI/CX_CKX .
  methods BUILD_WHERE_SDOC
    returning
      value(RF_WHERE) type STRING
    raising
      /VCXI/CX_CKX .
  methods BUILD_WHERE_MAT
    returning
      value(RF_WHERE) type STRING .
  methods BUILD_DYN_IDX_TAB
    importing
      !IF_SELTY type STRING
    returning
      value(RR_IDX) type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods BUILD_WHERE
    importing
      !IT_TABLES type TY_TABLES
    returning
      value(RF_WHERE) type STRING
    raising
      /VCXI/CX_CKX .
  methods BUILD_WHERE_IDX
    returning
      value(RF_WHERE) type STRING
    raising
      /VCXI/CX_CKX .
  methods BUILD_SELECT_SDOC
    returning
      value(RF_SELECT_SDOC) type STRING .
  methods BUILD_SELECT_MAT
    returning
      value(RF_SELECT_MAT) type STRING
    raising
      /VCXI/CX_CKX .
  methods BUILD_SELECT_ADDITIONAL
    importing
      !IF_FMAT type ABAP_BOOL
      !IF_FSDOC type ABAP_BOOL
    changing
      !CF_SELECT type STRING
    raising
      /VCXI/CX_CKX .
  methods BUILD_SELECT_DEFAULT
    importing
      !IF_FMAT type ABAP_BOOL
      !IF_FSDOC type ABAP_BOOL
    changing
      !CF_SELECT type STRING
    raising
      /VCXI/CX_CKX .
  methods BUILD_SELECT
    importing
      !IT_TABLES type TY_TABLES
    returning
      value(RF_SELECT) type STRING
    raising
      /VCXI/CX_CKX .
  methods BUILD_SELECT_IDX
    returning
      value(RF_SELECT_IDX) type STRING
    raising
      /VCXI/CX_CKX .
  methods GET_COMP_ADDITIONAL
    importing
      !IF_FMAT type ABAP_BOOL
      !IF_FSDOC type ABAP_BOOL
    changing
      value(CT_COMPONENTS) type CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE
    raising
      /VCXI/CX_CKX .
  methods GET_COMP_DEFAULT
    importing
      !IF_FMAT type ABAP_BOOL
      !IF_FSDOC type ABAP_BOOL
    changing
      value(CT_COMPONENTS) type CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE
    raising
      /VCXI/CX_CKX .
  methods GET_COMP
    importing
      !IT_TABLES type TY_TABLES
    returning
      value(RT_COMPONENTS) type CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE
    raising
      /VCXI/CX_CKX .
  methods GET_COMP_IDX
    returning
      value(RT_COMPONENTS) type CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE
    raising
      /VCXI/CX_CKX .
  methods GET_COMP_MAT
    returning
      value(RT_COMPONENTS) type CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE
    raising
      /VCXI/CX_CKX .
  methods GET_COMP_SDOC
    returning
      value(RT_COMPONENTS) type CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE
    raising
      /VCXI/CX_CKX .
  methods GET_TABLES_IDX
    returning
      value(RT_TABLES) type TY_TABLES .
  methods GET_TABLES_MAT
    returning
      value(RT_TABLES) type TY_TABLES
    raising
      /VCXI/CX_CKX .
  methods GET_TABLES_SDOC
    returning
      value(RT_TABLES) type TY_TABLES .
  methods RETURN_COMPONENTS
    importing
      !IR_TYPEDESCR type ref to CL_ABAP_TYPEDESCR
    changing
      !CT_COMPONENTS type ABAP_COMPONENT_TAB
    raising
      /VCXI/CX_CKX .
  private section.
endclass. "YCL_HP_IDX_QUERY definition
class YCL_HP_IDX_QUERY implementation.
  method BUILD_DYN_IDX_TAB.

***----------------------------------------------------------------------------
*** get components of basic IDX tables
    data(LT_COMPONENTS) = ME->GET_COMP_IDX( ).

    case IF_SELTY.
      when C_MAT.
        LT_COMPONENTS = value #( base LT_COMPONENTS ( lines of ME->GET_COMP_MAT( ) ) ).
      when C_SDOC.
        LT_COMPONENTS = value #( base LT_COMPONENTS ( lines of ME->GET_COMP_SDOC( ) ) ).
    endcase.

    sort LT_COMPONENTS by NAME ascending.

***----------------------------------------------------------------------------
*** create return table and reference
    data(LR_ABAP_STRUCT) = CL_ABAP_STRUCTDESCR=>CREATE( LT_COMPONENTS ).
    data(LR_TABLEDESCR)  = CL_ABAP_TABLEDESCR=>CREATE( LR_ABAP_STRUCT ).

    create data RR_IDX type handle LR_TABLEDESCR.

  endmethod.
  method BUILD_JOIN_IDX.

    concatenate 'YHP_IDX_TD010'
                'inner join YHP_IDX_TD100'
                  'on YHP_IDX_TD100~CUOBJ = YHP_IDX_TD010~CUOBJ'

                'left outer join YHP_IDX_TD101'
                  'on YHP_IDX_TD101~CUOBJ = YHP_IDX_TD100~CUOBJ'
                 'and YHP_IDX_TD101~CSELF = YHP_IDX_TD100~CSELF'

                'left outer join YHP_IDX_TD110'
                  'on YHP_IDX_TD110~CUOBJ = YHP_IDX_TD100~CUOBJ'
                 'and YHP_IDX_TD110~CSELF = YHP_IDX_TD100~CSELF'

                'left outer join YHP_IDX_TD111'
                  'on YHP_IDX_TD111~CUOBJ = YHP_IDX_TD100~CUOBJ'
                 'and YHP_IDX_TD111~CSELF = YHP_IDX_TD100~CSELF'
                 'and YHP_IDX_TD111~MBOAR = YHP_IDX_TD110~MBOAR'

                'left outer join YHP_IDX_TD130'
                  'on YHP_IDX_TD130~CUOBJ = YHP_IDX_TD100~CUOBJ'
                 'and YHP_IDX_TD130~CSELF = YHP_IDX_TD100~CSELF'

                'left outer join YHP_IDX_TD131'
                  'on YHP_IDX_TD131~CUOBJ = YHP_IDX_TD100~CUOBJ'
                 'and YHP_IDX_TD131~CSELF = YHP_IDX_TD100~CSELF'

                'left outer join YHP_IDX_TD140'
                  'on YHP_IDX_TD140~CUOBJ = YHP_IDX_TD100~CUOBJ'
                 'and YHP_IDX_TD140~CSELF = YHP_IDX_TD100~CSELF'

                'left outer join YHP_IDX_TD150'
                  'on YHP_IDX_TD150~CUOBJ = YHP_IDX_TD100~CUOBJ'
                 'and YHP_IDX_TD150~CSELF = YHP_IDX_TD100~CSELF'

                'left outer join YHP_IDX_TD151'
                  'on YHP_IDX_TD151~CUOBJ = YHP_IDX_TD100~CUOBJ'
                 'and YHP_IDX_TD151~CSELF = YHP_IDX_TD100~CSELF'

                'left outer join YHP_IDX_TD160'
                  'on YHP_IDX_TD160~CUOBJ = YHP_IDX_TD100~CUOBJ'
                 'and YHP_IDX_TD160~CSELF = YHP_IDX_TD100~CSELF'

                'left outer join YHP_IDX_TD310'
                  'on YHP_IDX_TD310~CUOBJ = YHP_IDX_TD100~CUOBJ'
                 'and YHP_IDX_TD310~CSELF = YHP_IDX_TD100~CSELF'

                'left outer join KNA1 as A'
                  'on YHP_IDX_TD010~KUNAG = A~KUNNR'

                'left outer join KNA1 as B'
                  'on YHP_IDX_TD010~KUNWE = B~KUNNR'

                into RF_JOIN
                separated by SPACE.

  endmethod.
  method BUILD_JOIN_MAT.

    concatenate 'inner join MARC'
                  'on MARC~STDPD = YHP_IDX_TD010~CMATN'
                 'and MARC~CUOBJ = YHP_IDX_TD010~CUOBJ'
                 'and MARC~WERKS = YHP_IDX_TD010~WERKS'

                'inner join MARA'
                  'on MARA~MATNR = MARC~MATNR'

                'inner join MAKT'
                  'on MAKT~MATNR = MARA~MATNR'
                 'and MAKT~SPRAS = @SY-LANGU'

                into RF_JOIN
                separated by SPACE.

  endmethod.
  method BUILD_JOIN_SDOC.

    concatenate 'inner join VBAP'
                  'on VBAP~CUOBJ = YHP_IDX_TD010~CUOBJ'
                 'and VBAP~WERKS = YHP_IDX_TD010~WERKS'

                'inner join VBAK'
                  'on VBAP~VBELN = VBAK~VBELN'

                'left outer join VBKD'
                  'on VBAP~VBELN = VBKD~VBELN'
                 'and VBAP~POSNR = VBKD~POSNR'

                into RF_JOIN
                separated by SPACE.

  endmethod.
  method BUILD_SELECT.

    data LT_COMPONENTS type ABAP_COMPONENT_TAB.

***----------------------------------------------------------------------------
*** for all IDX tables
    loop at IT_TABLES into data(LF_TABLE).

***----------------------------------------------------------------------------
*** get structure description
      data(LR_TYPEDESCR) = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( LF_TABLE ).

***----------------------------------------------------------------------------
*** get components (flat structure, includes and appends will be read)
      ME->RETURN_COMPONENTS( exporting IR_TYPEDESCR = LR_TYPEDESCR
                             changing CT_COMPONENTS = LT_COMPONENTS ).

***----------------------------------------------------------------------------
*** leave out fields we do not need here
      loop at LT_COMPONENTS into data(LS_COMPONENT).

        read table T_FIELDS transporting no fields with key TABLENAME = LF_TABLE
                                                            FIELDNAME = LS_COMPONENT-NAME.
        if SY-SUBRC is initial.

          data(LF_SELECT) = |{ LF_TABLE }~{ LS_COMPONENT-NAME } as { LF_TABLE }_{ LS_COMPONENT-NAME }|.
          if RF_SELECT is not initial.
            RF_SELECT = |{ RF_SELECT }, { LF_SELECT }|.
          else.
            RF_SELECT = LF_SELECT.
          endif.

        endif.

      endloop.

    endloop.

  endmethod.
  method BUILD_SELECT_ADDITIONAL.

***----------------------------------------------------------------------------
*** for all additional fields
    loop at T_TC030 into data(LS_TC030)
      where ADDITIONAL eq ABAP_TRUE.

      if ( IF_FMAT       eq ABAP_TRUE and
           LS_TC030-FMAT eq ABAP_FALSE ) or
         ( IF_FSDOC       eq ABAP_TRUE and
           LS_TC030-FSDOC eq ABAP_FALSE ).
        continue.
      endif.

      read table T_FIELDS transporting no fields with key TABLENAME = LS_TC030-REF_TABNAME
                                                          FIELDNAME = LS_TC030-REF_FIELDNAME.
      if SY-SUBRC is initial.

        if LS_TC030-ROLLNAME is initial.
          select single ROLLNAME from DD03L into LS_TC030-ROLLNAME
            where TABNAME   eq LS_TC030-SEL_TABNAME
              and FIELDNAME eq LS_TC030-SEL_FIELDNAME.
        endif.

        data(LF_SELECT) = |{ LS_TC030-SEL_TABNAME }~{ LS_TC030-SEL_FIELDNAME } as { LS_TC030-TABNAME }_{ LS_TC030-FIELDNAME }|.
        if CF_SELECT is not initial.
          CF_SELECT = |{ CF_SELECT }, { LF_SELECT }|.
        else.
          CF_SELECT = LF_SELECT.
        endif.

      endif.

    endloop.

  endmethod.
  method BUILD_SELECT_DEFAULT.

***----------------------------------------------------------------------------
*** for all default fields
    loop at T_TC030 into data(LS_TC030)
      where ADDITIONAL eq ABAP_FALSE.

      if ( IF_FMAT       eq ABAP_TRUE and
           LS_TC030-FMAT eq ABAP_FALSE ) or
         ( IF_FSDOC       eq ABAP_TRUE and
           LS_TC030-FSDOC eq ABAP_FALSE ).
        continue.
      endif.

      read table T_FIELDS transporting no fields with key TABLENAME = LS_TC030-TABNAME
                                                          FIELDNAME = LS_TC030-FIELDNAME.
      if SY-SUBRC is not initial.

        if LS_TC030-ROLLNAME is initial.
          select single ROLLNAME from DD03L into LS_TC030-ROLLNAME
            where TABNAME   eq LS_TC030-TABNAME
              and FIELDNAME eq LS_TC030-FIELDNAME.
        endif.

        data(LF_SELECT) = |{ LS_TC030-TABNAME }~{ LS_TC030-FIELDNAME } as { LS_TC030-TABNAME }_{ LS_TC030-FIELDNAME }|.
        if CF_SELECT is not initial.
          CF_SELECT = |{ CF_SELECT }, { LF_SELECT }|.
        else.
          CF_SELECT = LF_SELECT.
        endif.

      endif.
    endloop.

  endmethod.
  method BUILD_SELECT_IDX.

***----------------------------------------------------------------------------
*** add respective tables to get all basic IDX fields
    data(LT_TABLES) = ME->GET_TABLES_IDX( ).

    RF_SELECT_IDX = ME->BUILD_SELECT( LT_TABLES ).

  endmethod.
  method BUILD_SELECT_MAT.

***----------------------------------------------------------------------------
*** add respective tables to get all basic Material Master fields
    data(LT_TABLES) = ME->GET_TABLES_MAT( ).

    RF_SELECT_MAT = ME->BUILD_SELECT( LT_TABLES ).

***----------------------------------------------------------------------------
*** for all Material Master default fields
    ME->BUILD_SELECT_DEFAULT( exporting IF_FMAT  = ABAP_TRUE
                                        IF_FSDOC = ABAP_FALSE
                              changing CF_SELECT = RF_SELECT_MAT ).

***----------------------------------------------------------------------------
*** for all Material Master Additional fields
    ME->BUILD_SELECT_ADDITIONAL( exporting IF_FMAT  = ABAP_TRUE
                                           IF_FSDOC = ABAP_FALSE
                                 changing CF_SELECT = RF_SELECT_MAT ).

  endmethod.
  method BUILD_SELECT_SDOC.

***----------------------------------------------------------------------------
*** add respective tables to get all basic fields
    data(LT_TABLES) = ME->GET_TABLES_SDOC( ).

    RF_SELECT_SDOC = ME->BUILD_SELECT( LT_TABLES ).

***----------------------------------------------------------------------------
*** for all Sales Document default fields
    ME->BUILD_SELECT_DEFAULT( exporting IF_FMAT  = ABAP_FALSE
                                        IF_FSDOC = ABAP_TRUE
                              changing CF_SELECT = RF_SELECT_SDOC ).

***----------------------------------------------------------------------------
*** for all Sales Document Additional fields
    ME->BUILD_SELECT_ADDITIONAL( exporting IF_FMAT  = ABAP_FALSE
                                           IF_FSDOC = ABAP_TRUE
                                 changing CF_SELECT = RF_SELECT_SDOC ).

  endmethod.
  method BUILD_WHERE.

    data LF_WHERE_TAB type STRING.
    data LF_TAB_WHERE type STRING.

    data LT_WHERE  type RSDS_TWHERE.
    data LT_RANGES type RSDS_TRANGE.

***----------------------------------------------------------------------------
*** ATTENTION: WHERE Clause comming from FREE_SELECTIONS_DIALOG contain spaces
*** in string fields so these seem to be wrong!
*** We use the ranges instead and create the where clause manually from ranges.
***----------------------------------------------------------------------------

***----------------------------------------------------------------------------
*** read all given ranges
    loop at ME->T_RANGES into data(LS_TRANGE).

      read table IT_TABLES transporting no fields with table key TABLE_LINE = LS_TRANGE-TABLENAME.
      if SY-SUBRC is initial.

        loop at LS_TRANGE-FRANGE_T assigning field-symbol(<S_FRANGE_T>).
          <S_FRANGE_T>-FIELDNAME = |{ LS_TRANGE-TABLENAME }~{ <S_FRANGE_T>-FIELDNAME }|.
        endloop.
        LT_RANGES = value #( base LT_RANGES ( LS_TRANGE ) ).

      endif.

    endloop.

***----------------------------------------------------------------------------
*** now build where clause from ranges
    call function 'FREE_SELECTIONS_RANGE_2_WHERE'
      exporting
        FIELD_RANGES  = LT_RANGES
      importing
        WHERE_CLAUSES = LT_WHERE.

***----------------------------------------------------------------------------
*** go through each where part and build one where clause out of it
    loop at LT_WHERE into data(LS_WHERE).

      clear LF_TAB_WHERE.
      loop at LS_WHERE-WHERE_TAB into LF_WHERE_TAB.
        LF_TAB_WHERE = |{ LF_TAB_WHERE } { LF_WHERE_TAB }|.
      endloop.

      if RF_WHERE is not initial.
        RF_WHERE = |{ RF_WHERE } AND { LF_TAB_WHERE }|.
      else.
        RF_WHERE = LF_TAB_WHERE.
      endif.

    endloop.

  endmethod.
  method BUILD_WHERE_IDX.

*** add respective tables to get all basic IDX fields
    data(LT_TABLES) = ME->GET_TABLES_IDX( ).

    RF_WHERE = ME->BUILD_WHERE( LT_TABLES ).

  endmethod.
  method BUILD_WHERE_MAT.

*** add respective tables to get the material master data
    data(LT_TABLES) = ME->GET_TABLES_MAT( ).

    RF_WHERE = ME->BUILD_WHERE( LT_TABLES ).

  endmethod.
  method BUILD_WHERE_SDOC.

*** add respective tables to get the sales document data
    data(LT_TABLES) = ME->GET_TABLES_SDOC( ).

    RF_WHERE = ME->BUILD_WHERE( LT_TABLES ).

  endmethod.
  method CONSTRUCTOR.

    move IT_FIELDS to ME->T_FIELDS.
    move IT_RANGES to ME->T_RANGES.
    move IT_WHERES to ME->T_WHERE_CLAUSES.

    ME->CONVERT_RANGES_EX2_IN( ).

    select * from YHP_IDX_TC030 into table T_TC030.

  endmethod.
  method CONVERT_RANGES_EX2_IN.

    data LS_TABLE_FIELD type TABFIELD.

    loop at ME->T_RANGES assigning field-symbol(<S_TRANGE>).

      loop at <S_TRANGE>-FRANGE_T assigning field-symbol(<S_FRANGE_T>).

        loop at <S_FRANGE_T>-SELOPT_T assigning field-symbol(<S_SELOPT_T>).

          clear LS_TABLE_FIELD.
          LS_TABLE_FIELD-TABNAME   = <S_TRANGE>-TABLENAME.
          LS_TABLE_FIELD-FIELDNAME = <S_FRANGE_T>-FIELDNAME.

          call function 'RS_CHECK_CONV_EX_2_IN'
            exporting
              INPUT_EXTERNAL               = <S_SELOPT_T>-LOW
              TABLE_FIELD                  = LS_TABLE_FIELD
            importing
              INPUT_I_FORMAT               = <S_SELOPT_T>-LOW
            exceptions
              INPUT_NOT_NUMERICAL          = 1
              TOO_MANY_DECIMALS            = 2
              MORE_THAN_ONE_SIGN           = 3
              ILL_THOUSAND_SEPARATOR_DIST  = 4
              TOO_MANY_DIGITS              = 5
              SIGN_FOR_UNSIGNED            = 6
              TOO_LARGE                    = 7
              TOO_SMALL                    = 8
              INVALID_DATE_FORMAT          = 9
              INVALID_DATE                 = 10
              INVALID_TIME_FORMAT          = 11
              INVALID_TIME                 = 12
              INVALID_HEX_DIGIT            = 13
              UNEXPECTED_ERROR             = 14
              INVALID_FIELDNAME            = 15
              FIELD_AND_DESCR_INCOMPATIBLE = 16
              INPUT_TOO_LONG               = 17
              NO_DECIMALS                  = 18
              INVALID_FLOAT                = 19
              CONVERSION_EXIT_ERROR        = 20
              others                       = 21.

          call function 'RS_CHECK_CONV_EX_2_IN'
            exporting
              INPUT_EXTERNAL               = <S_SELOPT_T>-HIGH
              TABLE_FIELD                  = LS_TABLE_FIELD
            importing
              INPUT_I_FORMAT               = <S_SELOPT_T>-HIGH
            exceptions
              INPUT_NOT_NUMERICAL          = 1
              TOO_MANY_DECIMALS            = 2
              MORE_THAN_ONE_SIGN           = 3
              ILL_THOUSAND_SEPARATOR_DIST  = 4
              TOO_MANY_DIGITS              = 5
              SIGN_FOR_UNSIGNED            = 6
              TOO_LARGE                    = 7
              TOO_SMALL                    = 8
              INVALID_DATE_FORMAT          = 9
              INVALID_DATE                 = 10
              INVALID_TIME_FORMAT          = 11
              INVALID_TIME                 = 12
              INVALID_HEX_DIGIT            = 13
              UNEXPECTED_ERROR             = 14
              INVALID_FIELDNAME            = 15
              FIELD_AND_DESCR_INCOMPATIBLE = 16
              INPUT_TOO_LONG               = 17
              NO_DECIMALS                  = 18
              INVALID_FLOAT                = 19
              CONVERSION_EXIT_ERROR        = 20
              others                       = 21.

        endloop.

      endloop.

    endloop.

  endmethod.
  method GET_COMP.

    data LT_COMPONENTS type ABAP_COMPONENT_TAB.

***----------------------------------------------------------------------------
*** for all IDX tables
    loop at IT_TABLES into data(LF_TABLE).

***----------------------------------------------------------------------------
*** get structure description
      data(LR_TYPEDESCR)  = CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( LF_TABLE ).

***----------------------------------------------------------------------------
*** get components (flat structure, includes and appends will be read)
      ME->RETURN_COMPONENTS( exporting IR_TYPEDESCR = LR_TYPEDESCR
                             changing CT_COMPONENTS = LT_COMPONENTS ).

***----------------------------------------------------------------------------
*** leave out fields we do not need here
      loop at LT_COMPONENTS into data(LS_COMPONENT).

        read table T_FIELDS transporting no fields with key TABLENAME = LF_TABLE
                                                            FIELDNAME = LS_COMPONENT-NAME.
        if SY-SUBRC is initial.
          LS_COMPONENT-NAME = |{ LF_TABLE }_{ LS_COMPONENT-NAME }|.
          RT_COMPONENTS = value #( base RT_COMPONENTS ( LS_COMPONENT ) ).
        endif.

      endloop.

    endloop.

  endmethod.
  method GET_COMP_ADDITIONAL.

    data LS_COMPONENT type ABAP_COMPONENTDESCR.

***----------------------------------------------------------------------------
*** for all Additional fields
    loop at T_TC030 into data(LS_TC030)
      where ADDITIONAL eq ABAP_TRUE.

      if ( IF_FMAT eq ABAP_TRUE and
           LS_TC030-FMAT eq ABAP_FALSE ) or
         ( IF_FSDOC eq ABAP_TRUE and
           LS_TC030-FSDOC eq ABAP_FALSE ).
        continue.
      endif.

      read table T_FIELDS transporting no fields with key TABLENAME = LS_TC030-REF_TABNAME
                                                          FIELDNAME = LS_TC030-REF_FIELDNAME.
      if SY-SUBRC is initial.

        if LS_TC030-ROLLNAME is initial.
          select single ROLLNAME from DD03L into LS_TC030-ROLLNAME
            where TABNAME   eq LS_TC030-SEL_TABNAME
              and FIELDNAME eq LS_TC030-SEL_FIELDNAME.
        endif.

        LS_COMPONENT-NAME = |{ LS_TC030-TABNAME }_{ LS_TC030-FIELDNAME }|.
        LS_COMPONENT-TYPE = cast CL_ABAP_DATADESCR( CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( LS_TC030-ROLLNAME ) ).
        CT_COMPONENTS = value #( base CT_COMPONENTS ( LS_COMPONENT ) ).
      endif.
    endloop.

  endmethod.
  method GET_COMP_DEFAULT.

    data LS_COMPONENT type ABAP_COMPONENTDESCR.

***----------------------------------------------------------------------------
*** for all default fields
    loop at T_TC030 into data(LS_TC030)
      where ADDITIONAL eq ABAP_FALSE.

      if ( IF_FMAT eq ABAP_TRUE and
           LS_TC030-FMAT eq ABAP_FALSE ) or
         ( IF_FSDOC eq ABAP_TRUE and
           LS_TC030-FSDOC eq ABAP_FALSE ).
        continue.
      endif.

      read table T_FIELDS transporting no fields with key TABLENAME = LS_TC030-TABNAME
                                                          FIELDNAME = LS_TC030-FIELDNAME.
      if SY-SUBRC is not initial.

        if LS_TC030-ROLLNAME is initial.
          select single ROLLNAME from DD03L into LS_TC030-ROLLNAME
            where TABNAME   eq LS_TC030-TABNAME
              and FIELDNAME eq LS_TC030-FIELDNAME.
        endif.

        LS_COMPONENT-NAME = |{ LS_TC030-TABNAME }_{ LS_TC030-FIELDNAME }|.
        LS_COMPONENT-TYPE = cast CL_ABAP_DATADESCR( CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( LS_TC030-ROLLNAME ) ).
        CT_COMPONENTS = value #( base CT_COMPONENTS ( LS_COMPONENT ) ).

      endif.

    endloop.

  endmethod.
  method GET_COMP_IDX.

***----------------------------------------------------------------------------
*** add respective tables to get all basic IDX fields
    data(LT_TABLES) = ME->GET_TABLES_IDX( ).

    RT_COMPONENTS = ME->GET_COMP( LT_TABLES ).

  endmethod.
  method GET_COMP_MAT.

***----------------------------------------------------------------------------
*** add respective tables to get all basic Material Master fields
    data(LT_TABLES) = ME->GET_TABLES_MAT( ).

***----------------------------------------------------------------------------
*** for all Material Master tables
    RT_COMPONENTS = ME->GET_COMP( LT_TABLES ).

***----------------------------------------------------------------------------
*** for all Material Master default fields
    ME->GET_COMP_DEFAULT( exporting IF_FMAT  = ABAP_TRUE
                                    IF_FSDOC = ABAP_FALSE
                          changing CT_COMPONENTS = RT_COMPONENTS ).

***----------------------------------------------------------------------------
*** for all Material Master Additional fields
    ME->GET_COMP_ADDITIONAL( exporting IF_FMAT  = ABAP_TRUE
                                       IF_FSDOC = ABAP_FALSE
                             changing CT_COMPONENTS = RT_COMPONENTS ).

  endmethod.
  method GET_COMP_SDOC.

***----------------------------------------------------------------------------
*** add respective tables to get all basic Sales Document fields
    data(LT_TABLES) = ME->GET_TABLES_SDOC( ).

***----------------------------------------------------------------------------
*** for all Sales Document tables
    RT_COMPONENTS = ME->GET_COMP( LT_TABLES ).

***----------------------------------------------------------------------------
*** for all Sales Document default fields
    ME->GET_COMP_DEFAULT( exporting IF_FMAT  = ABAP_FALSE
                                    IF_FSDOC = ABAP_TRUE
                          changing CT_COMPONENTS = RT_COMPONENTS ).

***----------------------------------------------------------------------------
*** for all Sales Document Additional fields
    ME->GET_COMP_ADDITIONAL( exporting IF_FMAT  = ABAP_FALSE
                                       IF_FSDOC = ABAP_TRUE
                             changing CT_COMPONENTS = RT_COMPONENTS ).

  endmethod.
  method GET_RESULT.

    move ME->R_RESULT_DATA to RR_RDATA.

  endmethod.
  method GET_TABLES_IDX.

***----------------------------------------------------------------------------
*** add respective tables to get all basic IDX fields
    RT_TABLES = value #( ( 'YHP_IDX_TD010' )
                         ( 'YHP_IDX_TD100' )
                         ( 'YHP_IDX_TD101' )
                         ( 'YHP_IDX_TD110' )
                         ( 'YHP_IDX_TD111' )
                         ( 'YHP_IDX_TD130' )
                         ( 'YHP_IDX_TD131' )
                         ( 'YHP_IDX_TD140' )
                         ( 'YHP_IDX_TD150' )
                         ( 'YHP_IDX_TD151' )
                         ( 'YHP_IDX_TD160' )
                         ( 'YHP_IDX_TD310' ) ).

  endmethod.
  method GET_TABLES_MAT.

***----------------------------------------------------------------------------
*** add respective tables to get additional material master data
    RT_TABLES = value #( ( 'MARA' )
                         ( 'MARC' ) ).

  endmethod.
  method GET_TABLES_SDOC.

***----------------------------------------------------------------------------
*** add respective tables to get additional sales document master data
    RT_TABLES = value #( ( 'VBAK' )
                         ( 'VBAP' ) ).

  endmethod.
  method QUERY.

    field-symbols <T_IDX> type standard table.

***----------------------------------------------------------------------------
*** DO IDX QUERY
***----------------------------------------------------------------------------

*** define index database structure based on tables/views
    ME->R_IDX = ME->BUILD_DYN_IDX_TAB( IF_SELTY = IF_SELTY ).

*** assign dynamic IDX table definition
    check ME->R_IDX is not initial.
    assign ME->R_IDX->* to <T_IDX>.

***----------------------------------------------------------------------------
*** BUILD SELECT STATEMENTS
***----------------------------------------------------------------------------

*** build select fields statement for all IDX tables fields
    data(LF_SELECT_IDX) = ME->BUILD_SELECT_IDX( ).

*** get additional data based on search type selection
    case IF_SELTY.
      when C_MAT.
        data(LF_SELECT_MASTER_DATA) = ME->BUILD_SELECT_MAT( ).
      when C_SDOC.
        LF_SELECT_MASTER_DATA = ME->BUILD_SELECT_SDOC( ).
    endcase.

*** build select statement for IDX and master data
    if LF_SELECT_IDX is not initial.
      data(LF_SELECT) = |{ LF_SELECT_IDX }, { LF_SELECT_MASTER_DATA }|.
    else.
      LF_SELECT = LF_SELECT_MASTER_DATA.
    endif.

***----------------------------------------------------------------------------
*** BUILD JOIN CONDITIONS
***----------------------------------------------------------------------------

*** build basic IDX join condition
    data(LF_JOIN_IDX) = ME->BUILD_JOIN_IDX( ).

*** get additional where clause based on search type selection
    case IF_SELTY.
      when C_MAT.
        data(LF_JOIN_MASTER_DATA) = ME->BUILD_JOIN_MAT( ).
      when C_SDOC.
        LF_JOIN_MASTER_DATA = ME->BUILD_JOIN_SDOC( ).
    endcase.

*** build join condition for IDX and master data
    data(LF_JOIN) = |{ LF_JOIN_IDX } { LF_JOIN_MASTER_DATA }|.

***----------------------------------------------------------------------------
*** BUILD WHERE CLAUSES
***----------------------------------------------------------------------------

*** build where clause for basic IDX tables fields
    data(LF_WHERE_IDX) = ME->BUILD_WHERE_IDX( ).

*** get additional where clause based on search type selection
    case IF_SELTY.
      when C_MAT.
        data(LF_WHERE_MASTER_DATA) = ME->BUILD_WHERE_MAT( ).
      when C_SDOC.
        LF_WHERE_MASTER_DATA = ME->BUILD_WHERE_SDOC( ).
    endcase.

*** build where statement for IDX and master data
    if LF_WHERE_IDX is not initial and LF_WHERE_MASTER_DATA is not initial.
      data(LF_WHERE) = |{ LF_WHERE_IDX } AND { LF_WHERE_MASTER_DATA }|.
    elseif LF_WHERE_IDX is not initial.
      LF_WHERE = LF_WHERE_IDX.
    elseif LF_WHERE_MASTER_DATA is not initial.
      LF_WHERE = LF_WHERE_MASTER_DATA.
    endif.

***----------------------------------------------------------------------------
*** DO IDX QUERY
***----------------------------------------------------------------------------

    try.
        select distinct (LF_SELECT)
          from (LF_JOIN)
          into corresponding fields of table @<T_IDX>
          where (LF_WHERE).
      catch CX_SY_DYNAMIC_OSQL_SEMANTICS into data(LR_ERROR).
        data(LF_ERROR) = LR_ERROR->GET_TEXT( ).
    endtry.

***----------------------------------------------------------------------------
*** SET RESULT DATA
***----------------------------------------------------------------------------

*** create return table and reference
    move ME->R_IDX to ME->R_RESULT_DATA.

  endmethod.
  method RETURN_COMPONENTS.

    data: LT_COMPONENT_SUB type ABAP_COMPONENT_TAB,
          LT_COMPONENT_ORG type ABAP_COMPONENT_TAB,
          LT_COMPONENT_NEW type ABAP_COMPONENT_TAB,
          LR_STRUCTDESCR   type ref to CL_ABAP_STRUCTDESCR,
          LR_TABLEDESCR    type ref to CL_ABAP_TABLEDESCR,
          LR_DATADESCR     type ref to CL_ABAP_DATADESCR,
          LR_REFDESCR      type ref to CL_ABAP_REFDESCR,
          LR_TYPEDESCR     type ref to CL_ABAP_TYPEDESCR.

    field-symbols: <LS_COMPONENT_SUB> type ABAP_COMPONENTDESCR,
                   <LS_COMPONENT>     type ABAP_COMPONENTDESCR.

    refresh CT_COMPONENTS.

    if IR_TYPEDESCR is not bound.
      return.
    endif.

    LR_TYPEDESCR = IR_TYPEDESCR.

*** get reference
    while LR_TYPEDESCR->KIND eq CL_ABAP_TYPEDESCR=>KIND_REF.
      LR_REFDESCR ?= LR_TYPEDESCR.
      LR_TYPEDESCR = LR_REFDESCR->GET_REFERENCED_TYPE( ).
    endwhile.

    case LR_TYPEDESCR->KIND.
      when CL_ABAP_TYPEDESCR=>KIND_TABLE.

        LR_TABLEDESCR ?= LR_TYPEDESCR.
        LR_DATADESCR = LR_TABLEDESCR->GET_TABLE_LINE_TYPE( ).
        LR_TYPEDESCR = LR_DATADESCR.
        call method ME->RETURN_COMPONENTS(
          exporting
            IR_TYPEDESCR  = LR_TYPEDESCR
          changing
            CT_COMPONENTS = CT_COMPONENTS ).

      when CL_ABAP_TYPEDESCR=>KIND_STRUCT.

        LR_STRUCTDESCR ?= LR_TYPEDESCR.
        LT_COMPONENT_ORG = LR_STRUCTDESCR->GET_COMPONENTS( ).

***   check if there are includes to read
        read table LT_COMPONENT_ORG transporting no fields with key AS_INCLUDE = ABAP_TRUE.

***   if no includes were found ...
        if SY-SUBRC ne 0.
***   ... return prior created structure ...
          CT_COMPONENTS = LT_COMPONENT_ORG.

***   ... read include and create
        else.
          refresh LT_COMPONENT_NEW.

          loop at LT_COMPONENT_ORG assigning <LS_COMPONENT>.

            if <LS_COMPONENT>-AS_INCLUDE eq ABAP_TRUE.

              LR_TYPEDESCR = <LS_COMPONENT>-TYPE.

              call method ME->RETURN_COMPONENTS(
                exporting
                  IR_TYPEDESCR  = LR_TYPEDESCR
                changing
                  CT_COMPONENTS = LT_COMPONENT_SUB ).

              if <LS_COMPONENT>-SUFFIX is not initial.
                loop at LT_COMPONENT_SUB assigning <LS_COMPONENT_SUB>.
                  concatenate <LS_COMPONENT_SUB>-NAME <LS_COMPONENT>-SUFFIX into <LS_COMPONENT_SUB>-NAME.
                endloop.
              endif.
              insert lines of LT_COMPONENT_SUB into table LT_COMPONENT_NEW.

            else.
              insert <LS_COMPONENT> into table LT_COMPONENT_NEW.
            endif.

          endloop.

          CT_COMPONENTS = LT_COMPONENT_NEW.
        endif.

      when CL_ABAP_TYPEDESCR=>KIND_ELEM.

        append initial line to CT_COMPONENTS assigning <LS_COMPONENT>.
        <LS_COMPONENT>-TYPE ?= LR_TYPEDESCR.

    endcase.

  endmethod.
