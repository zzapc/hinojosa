
class YCL_HP_SMD_AIS_WUI definition
  public
  inheriting from /VCXI/CL_CKMRU_CLWUI
  final
  create public .

public section.

  data S_AIS_VIS type YHP_SMD_AIS_S_WUI_VIS .

  methods DO_UPDATE_AIS_VIS
    importing
      !IS_AIS_VIS type YHP_SMD_AIS_S_WUI_VIS
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_RECORD type ref to /VCXI/CL_CKMR_RECORD
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_DCO_AIS type ref to YCL_HP_SMD_AIS_DCO .
  data R_SALV type ref to CL_SALV_TABLE .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CSV type ref to YCL_HP_SMD_AIS_CSV .
  data R_DATA type ref to DATA .
  constants C_UC_UPLOAD type SYUCOMM value 'UPLOAD' ##NO_TEXT.
  constants C_FUNC_SELECTALL type SALV_DE_FUNCTION value 'SELECTALL' ##NO_TEXT.
  constants C_FUNC_DESELECTALL type SALV_DE_FUNCTION value 'DESELECTALL' ##NO_TEXT.

  methods TOGGLE_SELECTION
    importing
      !IF_FLSEL type FLAG
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADDED_FUNCTION
    for event ADDED_FUNCTION of CL_SALV_EVENTS
    importing
      !E_SALV_FUNCTION .
  methods HANDLE_CHECKED_FUNCTION
    for event LINK_CLICK of CL_SALV_EVENTS_TABLE
    importing
      !ROW
      !COLUMN .
  methods HANDLE_UC_UPLOAD
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID_DATA
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods MODIFY_SCREEN
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SMD_AIS_WUI definition
class YCL_HP_SMD_AIS_WUI implementation.
method ACTIVATE.

*** Bind UI
  call function 'YHP_SMD_AIS_WUI_BIND'
    exporting
      IR_WUI_AIS = ME
    importing
      ES_DYNP    = ME->S_DYNP.

endmethod.
method CONSTRUCTOR.

  data: LF_DELIM type YHP_SMD_AIS_DELIM.

*** Super Constructor
  SUPER->CONSTRUCTOR( IR_RECORD = IR_RECORD ).

*** Map DCO
  move ME->R_RECORD->R_DCO ?to ME->R_DCO_AIS.

  if ME->R_DCO_AIS->F_DELIM is not initial.
    LF_DELIM = ME->R_DCO_AIS->F_DELIM.
  else.
    LF_DELIM = YCL_HP_SMD_AIS_DCO=>C_DELIM.
  endif.

*** Create CSV Object
  create object ME->R_CSV
    exporting
      IF_DELIM = LF_DELIM
      IF_FGUID = ME->R_DCO_AIS->F_FGUID.

*** Create Grid Data Reference
  create data ME->R_DATA type YHP_SMD_AIS_TT_QUOT_GRID.

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_SALV is bound.
    clear ME->R_SALV.
  endif.

  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( ).
    clear ME->R_CONTAINER.
  endif.

endmethod.
method DO_PBO.

*** Initialize VIS Structure
  ME->INIT_VIS( ).

*** Modify Screen
  ME->MODIFY_SCREEN( ).

*** Refresh Grid
  ME->INIT_GRID_DATA( ).
  ME->REFRESH_GRID( ).

endmethod.
method DO_UPDATE_AIS_VIS.

*** Set File Path
  if IS_AIS_VIS-FPATH ne ME->S_AIS_VIS-FPATH.
    ME->R_DCO_AIS->SET_FPATH( IF_FPATH = IS_AIS_VIS-FPATH ).
  endif.

*** Set Delimiter
  if IS_AIS_VIS-DELIM       ne ME->S_AIS_VIS-DELIM or
     ME->R_DCO_AIS->F_DELIM is initial.
    ME->R_DCO_AIS->SET_DELIM( IF_DELIM = IS_AIS_VIS-DELIM ).
  endif.

*** Set Flag for IDAT Save
  if IS_AIS_VIS-FSIDA       ne ME->S_AIS_VIS-FSIDA or
     ME->R_DCO_AIS->F_FSIDA is initial.
    ME->R_DCO_AIS->SET_FSIDA( IF_FSIDA = IS_AIS_VIS-FSIDA ).
  endif.

*** Set Flag for Include parameters with SetBy = CALC
  if IS_AIS_VIS-FCALC       ne ME->S_AIS_VIS-FCALC or
     ME->R_DCO_AIS->F_FCALC is initial.
    ME->R_DCO_AIS->SET_FCALC( IF_FCALC = IS_AIS_VIS-FCALC ).
  endif.

endmethod.
method DO_USER_COMMAND.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  case IF_UCOMM.

*** Handle File Upload
    when C_UC_UPLOAD.
      ME->HANDLE_UC_UPLOAD( ).

  endcase.

endmethod.
method HANDLE_ADDED_FUNCTION.

  try.

      case E_SALV_FUNCTION.

***     Select All Lines
        when C_FUNC_SELECTALL.
          ME->TOGGLE_SELECTION( IF_FLSEL = ABAP_TRUE ).

***     Deselect All Lines
        when C_FUNC_DESELECTALL.
          ME->TOGGLE_SELECTION( IF_FLSEL = ABAP_FALSE ).

      endcase.

    catch /VCXI/CX_CKX .                                "#EC NO_HANDLER

  endtry.

endmethod.
method HANDLE_CHECKED_FUNCTION.

  data: LS_WRKLI type YHP_SMD_AIS_S_QUOT_WRKLI.

  data: LT_WRKLI type YHP_SMD_AIS_TT_QUOT_WRKLI.

  field-symbols: <T_QUOT_GRID> type standard table,
                 <S_QUOT_GRID> type YHP_SMD_AIS_S_QUOT_GRID,
                 <S_WRKLI>     type YHP_SMD_AIS_S_QUOT_WRKLI.

  try.

***   Is Record Locked?
      check ME->R_RECORD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.

***   Dereference Data
      check ME->R_DATA is bound.
      assign ME->R_DATA->* to <T_QUOT_GRID>.

***   Get the value of the Checkbox and set the value accordingly
      assign <T_QUOT_GRID>[ ROW ] to <S_QUOT_GRID>.

***   Toggle Flag
      <S_QUOT_GRID>-FLSEL = switch #( <S_QUOT_GRID>-FLSEL when ABAP_TRUE  then ABAP_FALSE
                                                          when ABAP_FALSE then ABAP_TRUE ).

***   Collect Selected Quotations
      LT_WRKLI = ME->R_DCO_AIS->T_WRKLI.
      if <S_QUOT_GRID>-FLSEL eq ABAP_TRUE.
        append initial line to LT_WRKLI assigning <S_WRKLI>.
        move-corresponding <S_QUOT_GRID> to <S_WRKLI>.
      else.
        move-corresponding <S_QUOT_GRID> to LS_WRKLI.
        delete LT_WRKLI where TABLE_LINE eq LS_WRKLI.
      endif.

***   Set Work List in DCO
      ME->R_DCO_AIS->SET_WRKLI( IT_WRKLI = LT_WRKLI ).

***   Refresh the table
      ME->R_SALV->REFRESH( ).

    catch /VCXI/CX_CKX .                                "#EC NO_HANDLER

  endtry.

endmethod.
method HANDLE_UC_UPLOAD.

  data: LF_FGUID type SYSUUID_C22.

*** Is Record Locked?
  check ME->R_RECORD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.

*** Upload File
  if ME->R_DCO_AIS->F_FPATH is not initial.

    ME->R_CSV->F_DELIM = ME->R_DCO_AIS->F_DELIM.
    ME->R_CSV->GET_FILE_DATA( IF_FPATH = ME->R_DCO_AIS->F_FPATH ).

*** Persist to DB
    LF_FGUID = ME->R_CSV->SAVE_TO_DB( ).

*** Set GUID to DCO
    ME->R_DCO_AIS->SET_FGUID( IF_FGUID = LF_FGUID ).

  endif.

endmethod.
method INIT_GRID_DATA.

  data: LS_WRKLI type YHP_SMD_AIS_S_QUOT_WRKLI.

  field-symbols: <T_QUOT_GRID> type YHP_SMD_AIS_TT_QUOT_GRID,
                 <S_QUOT_GRID> type YHP_SMD_AIS_S_QUOT_GRID.

*** Dereference Data
  check ME->R_DATA is bound.
  assign ME->R_DATA->* to <T_QUOT_GRID>.

  free: <T_QUOT_GRID>.

*** Check CSV Object is Bound
  if ME->R_CSV is not bound.
    return.
  endif.

*** Get Data from CSV Object
  <T_QUOT_GRID> = corresponding #( ME->R_CSV->T_QUOT ).

*** Mark selected Lines
  loop at <T_QUOT_GRID> assigning <S_QUOT_GRID>.
    move-corresponding <S_QUOT_GRID> to LS_WRKLI.
    if LINE_EXISTS( ME->R_DCO_AIS->T_WRKLI[ TABLE_LINE = LS_WRKLI ] ).
      <S_QUOT_GRID>-FLSEL = ABAP_TRUE.
    endif.
  endloop.

endmethod.
method INIT_VIS.

  clear ME->S_AIS_VIS.

*** File Path
  move ME->R_DCO_AIS->F_FPATH to ME->S_AIS_VIS-FPATH.

*** Delimiter
  if ME->R_DCO_AIS->F_DELIM is not initial.
    move ME->R_DCO_AIS->F_DELIM to ME->S_AIS_VIS-DELIM.
  else.
    move YCL_HP_SMD_AIS_DCO=>C_DELIM to ME->S_AIS_VIS-DELIM.
  endif.

*** Flag for Integration Data save
  move ME->R_DCO_AIS->F_FSIDA to ME->S_AIS_VIS-FSIDA.

*** Flag for Including parameters with SetBY = CALC
  move ME->R_DCO_AIS->F_FCALC to ME->S_AIS_VIS-FCALC.

endmethod.
method MODIFY_SCREEN.

  data: LF_LOCKED type /VCXI/CKX_LOCKED.

*** Get Record Lock
  move ME->R_RECORD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

*** Adjust Screen
  loop at screen.

    if LF_LOCKED ne ABAP_TRUE.

      move 0 to SCREEN-INPUT.
      move 0 to SCREEN-REQUIRED.

    else.

      if SCREEN-NAME eq '0100BTN_UPLOAD' or
         SCREEN-NAME eq 'YHP_SMD_AIS_S_WUI_VIS-FPATH' or
         SCREEN-NAME eq 'YHP_SMD_AIS_S_WUI_VIS-DELIM'.
        if ME->R_DCO_AIS->F_FGUID is not initial.
          move 0 to SCREEN-INPUT.
        else.
          move 1 to SCREEN-INPUT.
        endif.
      endif.

    endif.

    modify screen.

  endloop.

endmethod.
method REFRESH_GRID.

  data: LF_TOOLTIP type STRING.

  data: LR_COLUMN    type ref to CL_SALV_COLUMN_LIST,
        LR_FUNCTIONS type ref to CL_SALV_FUNCTIONS,
        LR_EVENTS    type ref to CL_SALV_EVENTS_TABLE.

  field-symbols: <T_QUOT_GRID> type standard table.

*** Dereference Data
  check ME->R_DATA is bound.
  assign ME->R_DATA->* to <T_QUOT_GRID>.

*** Create Container
  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = '0100CC_DATA'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

  try.

***   Create Simple ALV
      if ME->R_SALV is not bound.

        CL_SALV_TABLE=>FACTORY( exporting R_CONTAINER  = ME->R_CONTAINER
                                importing R_SALV_TABLE = ME->R_SALV
                                changing  T_TABLE      = <T_QUOT_GRID> ).

***     Add Standard Functions
        LR_FUNCTIONS = ME->R_SALV->GET_FUNCTIONS( ).
        LR_FUNCTIONS->SET_ALL( ABAP_TRUE ).

***     Add Selection Buttons
        LF_TOOLTIP = 'Select All'(SEL).
        LR_FUNCTIONS->ADD_FUNCTION( NAME     = C_FUNC_SELECTALL
                                    ICON     = conv STRING( ICON_SELECT_ALL )
                                    TEXT     = ''
                                    TOOLTIP  = LF_TOOLTIP
                                    POSITION = IF_SALV_C_FUNCTION_POSITION=>RIGHT_OF_SALV_FUNCTIONS ).

        LF_TOOLTIP = 'Deselect All'(DES).
        LR_FUNCTIONS->ADD_FUNCTION( NAME     = C_FUNC_DESELECTALL
                                    ICON     = conv STRING( ICON_DESELECT_ALL )
                                    TEXT     = ''
                                    TOOLTIP  = LF_TOOLTIP
                                    POSITION = IF_SALV_C_FUNCTION_POSITION=>RIGHT_OF_SALV_FUNCTIONS ).

***     Register to Events
        LR_EVENTS = ME->R_SALV->GET_EVENT( ).
        set handler ME->HANDLE_CHECKED_FUNCTION for LR_EVENTS.
        set handler ME->HANDLE_ADDED_FUNCTION   for LR_EVENTS.

      endif.

***   Set the Column optimization
      ME->R_SALV->GET_COLUMNS( )->SET_OPTIMIZE( 'X' ).

***   Change the properties of the Columns FLSEL
      LR_COLUMN ?= ME->R_SALV->GET_COLUMNS( )->GET_COLUMN( 'FLSEL' ).
      LR_COLUMN->SET_OUTPUT_LENGTH( 10 ).
      if ME->R_RECORD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
        LR_COLUMN->SET_CELL_TYPE( IF_SALV_C_CELL_TYPE=>CHECKBOX_HOTSPOT ).
      else.
        LR_COLUMN->SET_CELL_TYPE( IF_SALV_C_CELL_TYPE=>CHECKBOX ).
      endif.

***   Refresh Display
      ME->R_SALV->DISPLAY( ).

    catch CX_SALV_ERROR.                                "#EC NO_HANDLER

  endtry.

endmethod.
method TOGGLE_SELECTION.

  data: LT_WRKLI type YHP_SMD_AIS_TT_QUOT_WRKLI.

  field-symbols: <T_QUOT_GRID> type YHP_SMD_AIS_TT_QUOT_GRID,
                 <S_QUOT_GRID> type YHP_SMD_AIS_S_QUOT_GRID,
                 <S_WRKLI>     type YHP_SMD_AIS_S_QUOT_WRKLI.

  try.

***   Is Record Locked?
      check ME->R_RECORD->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.

***   Dereference Data
      check ME->R_DATA is bound.
      assign ME->R_DATA->* to <T_QUOT_GRID>.

***   Process all Records
      loop at <T_QUOT_GRID> assigning <S_QUOT_GRID>.

***     Set Flag
        <S_QUOT_GRID>-FLSEL = IF_FLSEL.

***     Collect Selected Quotations
        if IF_FLSEL eq ABAP_TRUE.
          append initial line to LT_WRKLI assigning <S_WRKLI>.
          move-corresponding <S_QUOT_GRID> to <S_WRKLI>.
        endif.

      endloop.

***   Set Work List in DCO
      ME->R_DCO_AIS->SET_WRKLI( IT_WRKLI = LT_WRKLI ).

***   Refresh the table
      ME->R_SALV->REFRESH( ).

    catch /VCXI/CX_CKX.                                 "#EC NO_HANDLER

  endtry.

endmethod.
