
class YCL_HP_SDP_DC_BOB_STUDY definition
  public
  final
  create private .

public section.

  data F_PRSTD type YRF_RQPT_PRSTD read-only .
  class-data F_SEL_VBELN type VBELN .
  class-data F_SEL_POSNR type POSNR .
  class-data F_GBL_VBELN type VBELN .
  data S_DATA type YHP_SVC_S_PPUPL_DATA read-only .
  class-data F_GBL_PRSTD type YRF_RQPT_PRSTD .
  constants F_REPID_LOAD_PRSTD type RALDB_REPO value 'LOAD_PRSTD' ##NO_TEXT.
  constants F_REPID_CREATE_PRSTD type RALDB_REPO value 'CREATE_PRSTD' ##NO_TEXT.
  class-data F_ADD_VBELN type VBELN .
  class-data F_FORCE_CONSISTENT type ABAP_BOOL .

  class-methods START
    importing
      !IF_TENID type YHP_TEN_TENID
      !IF_UI type ABAP_BOOL default ABAP_FALSE
      !IF_AS_JOB type ABAP_BOOL default ABAP_TRUE
    returning
      value(RF_PRSTD) type YRF_RQPT_PRSTD
    raising
      /VCXI/CX_CKX .
  class-methods INIT_PRSTD_GLOBAL
    raising
      /VCXI/CX_CKX .
  class-methods SET_PRSTD_GLOBAL
    importing
      !IF_PRSTD type YRF_RQPT_PRSTD
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IF_GUID type /VCXI/CKX_GUID optional
      !IS_DATA type YHP_SVC_S_PPUPL_DATA optional
    returning
      value(RR_INSTANCE) type ref to YCL_HP_SDP_DC_BOB_STUDY
    raising
      /VCXI/CX_CKX .
  methods CREATE_SDOC
    exporting
      value(ER_BOB_SDOC) type ref to ZCL_VCXI_XCI_BOB_SDOC
      !EF_POSNR_LAST type POSNR
      value(ER_MSG) type ref to /VCXI/CL_CKXM_MESSAGE
    changing
      !CS_DATA type YHP_SVC_S_PPUPL_DATA optional
    raising
      /VCXI/CX_CKX .
  methods LOAD_PRSTD
    importing
      !IF_PRSTD type YRF_RQPT_PRSTD
    returning
      value(RR_RQPTR_PR_MAIN) type ref to YCL_RF_RQPTR_PR_MAIN
    raising
      /VCXI/CX_CKX .
  methods DESERIALIZE
    importing
      value(IF_XML) type STRING
    raising
      /VCXI/CX_CKX .
  methods SET_PRSTD
    importing
      !IF_PRSTD type YRF_RQPT_PRSTD
    raising
      /VCXI/CX_CKX .
  methods SET_DATA
    importing
      !IS_DATA type YHP_SVC_S_PPUPL_DATA .
  class-methods START_SDOC_JOB
    importing
      !IR_DC_BOB_STUDY type ref to YCL_HP_SDP_DC_BOB_STUDY
    returning
      value(EF_JOBNO) type TBTCJOB-JOBCOUNT
    raising
      /VCXI/CX_CKX .
  methods SAVE_TO_DB
    raising
      /VCXI/CX_CKX .
  methods CREATE_PRSTD_VIA_SEL
    importing
      !IF_VBELN type VBELN
      !IF_POSNR type POSNR optional
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
    exporting
      !ER_RQPTR_PR_MAIN type ref to YCL_RF_RQPTR_PR_MAIN
    raising
      /VCXI/CX_CKX .
  methods PRSTD_ADD_LINES
    importing
      !IR_RQPTR_PR_MAIN type ref to YCL_RF_RQPTR_PR_MAIN
      !IR_RQPTR_PR_MAIN_ADD type ref to YCL_RF_RQPTR_PR_MAIN
    raising
      /VCXI/CX_CKX .
  methods GET_SDPOS_PRSTD
    importing
      !IF_VBELN type VBELN
      !IF_POSNR type POSNR
    returning
      value(RR_RQPTR_PR_MAIN) type ref to YCL_RF_RQPTR_PR_MAIN
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_SDPOS
    importing
      !IF_VBELN type VBELN
      !IF_POSNR type POSNR
    returning
      value(RT_VBAPKEY) type YRF_RQPT_TT_VBAPKEY
    raising
      /VCXI/CX_CKX .
  methods SET_STATUS
    importing
      !IF_CREA type ABAP_BOOL optional
      !IF_WIP type ABAP_BOOL optional
      !IF_DONE type ABAP_BOOL optional
      !IR_PTR_PR_MAIN type ref to YCL_RF_RQPTR_PR_MAIN
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
    GUID      type /VCXI/CKX_GUID,
    R_OBJECT  type ref to YCL_HP_SDP_DC_BOB_STUDY,
    end of YS_INSTANCE .
  types:
    YT_INSTANCE type standard table of YS_INSTANCE .

  class-data T_INSTANCE type YT_INSTANCE .

  methods ADD_ITEM
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR
      !IS_ITEM type YHP_SVC_S_PPUPL_DATA_ITM
    raising
      /VCXI/CX_CKX .
  methods ADD_CNF
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR
    raising
      /VCXI/CX_CKX .
  methods ADD_COND
    importing
      !IF_POSNR type POSNR
      !IF_KSCHL type KSCHL
      !IF_KBETR type KBETR
      !IF_KONWA type KONWA
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
    raising
      /VCXI/CX_CKX .
  methods BUILD_IDAT
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR
    raising
      /VCXI/CX_CKX .
  methods SERIALIZE
    returning
      value(RF_XML) type STRING
    raising
      /VCXI/CX_CKX .
  methods PRSTD_MERGE_DATA
    importing
      !IR_DATA_ADD type ref to DATA
      !IT_FCAT_ADD type LVC_T_FCAT
      !IT_FCAT type LVC_T_FCAT
    changing
      !CR_DATA type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods REFRESH_STUDY
    importing
      !IR_RQPTR_PR_MAIN type ref to YCL_RF_RQPTR_PR_MAIN
    raising
      /VCXI/CX_CKX .
private section.

  methods CONSTRUCTOR
    importing
      !IF_PRSTD type YRF_RQPT_PRSTD
      !IS_DATA type YHP_SVC_S_PPUPL_DATA optional
    raising
      /VCXI/CX_CKX .
endclass. "YCL_HP_SDP_DC_BOB_STUDY definition
class YCL_HP_SDP_DC_BOB_STUDY implementation.
  method ADD_CNF.

    data: LF_CUOBJ     type CUOBJ,
          LF_CONFIG_ID type CUX_CFG_ID value '000001',
          LF_INST_ID   type CU_INST_ID value '00000001'.
    data: LS_VBAP type VBAP,
          LS_CUCO type CUCO.


*** Get Position
    LS_VBAP = value #( IR_BOB_SDOC->T_VBAP[ POSNR = IF_POSNR ] optional ).
    if LS_VBAP-POSNR ne IF_POSNR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.


***----------------------------------------------------------------------------
*** Get Profile Settings
    select single CUOBJ
           from MARC
           into LF_CUOBJ
          where MATNR eq LS_VBAP-MATNR
           and  WERKS eq LS_VBAP-WERKS.
    check SY-SUBRC eq 0.

    call function 'CUCB_GET_PROFILE_OF_INSTANCE'
      exporting
        INSTANCE                     = LF_CUOBJ
      importing
        PROFILE_WA                   = LS_CUCO
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2
        PROFILE_NOT_FOUND            = 3
        INVALID_INPUT                = 4.
    check SY-SUBRC eq 0.


*** Reference Order Item / Instance in Configuration
    append value #( POSEX     = LS_VBAP-POSNR
                    CONFIG_ID = LF_CONFIG_ID
                    INST_ID   = LF_INST_ID
                  ) to IR_BOB_SDOC->T_CFGS_REFINST.

*** Instances
    append value #( CONFIG_ID     = LF_CONFIG_ID
                    INST_ID       = LF_INST_ID
                    OBJ_TYPE      = LS_CUCO-OBTAB
                    CLASS_TYPE    = LS_CUCO-KLART
                    OBJ_KEY       = LS_CUCO-OBJEK
                    QUANTITY      = LS_VBAP-KWMENG
                    QUANTITY_UNIT = LS_VBAP-VRKME
                    COMPLETE      = 'F'
                    CONSISTENT    = 'F'
                  ) to IR_BOB_SDOC->T_CFGS_INST.

*** Configuration Data
    append value #( POSEX         = LS_VBAP-POSNR
                    CONFIG_ID     = LF_CONFIG_ID
                    ROOT_ID       = LF_INST_ID
                    COMPLETE      = 'F'
                    CONSISTENT    = 'F'
                  ) to IR_BOB_SDOC->T_CFGS_REF.

*** Update Flag for Configuration
    append value #( POSNR = LS_VBAP-POSNR
                    UPDKZ = 'I'
                  ) to IR_BOB_SDOC->T_CFGS_UPDKZ.


  endmethod.
  method ADD_COND.

    append value #( KPOSN = IF_POSNR
                    KSCHL = IF_KSCHL
                    KBETR = IF_KBETR
                    WAERS = IF_KONWA
                  ) to IR_BOB_SDOC->T_KOMV.

  endmethod.
  method ADD_ITEM.

    data: LS_MARA type MARA.

    call function 'MARA_SINGLE_READ'
      exporting
        MATNR             = IS_ITEM-MATNR
      importing
        WMARA             = LS_MARA
      exceptions
        LOCK_ON_MATERIAL  = 1
        LOCK_SYSTEM_ERROR = 2
        WRONG_CALL        = 3
        NOT_FOUND         = 4.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Add Item
    append value #( POSNR     = IF_POSNR
                    MATNR     = IS_ITEM-MATNR
                    WERKS     = IS_ITEM-WERKS
                    SPART     = IR_BOB_SDOC->S_VBAK-SPART
                    KWMENG    = IS_ITEM-KWMENG
                    VRKME     = LS_MARA-MEINS
                    MEINS     = LS_MARA-MEINS
                    ZZSUPANM2 = IS_ITEM-ZZSUPANM2
                    ZZIMPORTE_TROQUEL = IS_ITEM-KBETR_ZTRO
                    ZZIMPORTE_CLICHE  = IS_ITEM-KBETR_ZCLI
                    UMVKZ     = 1
                    UMVKN     = 1
                    STDAT     = SY-DATUM
                  ) to IR_BOB_SDOC->T_VBAP.

*** Schedule Lines Data
    append value #( POSNR = IF_POSNR
                    ETENR = '0001'
                    WMENG = IS_ITEM-KWMENG
                    VRKME = LS_MARA-MEINS
                    MEINS = LS_MARA-MEINS
                  ) to IR_BOB_SDOC->T_VBEP.

    if IS_ITEM-KBETR_ZPRC is not initial.
      ME->ADD_COND( exporting IF_POSNR      = IF_POSNR
                              IF_KSCHL      = 'ZPRC'  "'ZR01'
                              IF_KBETR      = IS_ITEM-KBETR_ZPRC
                              IF_KONWA      = 'EUR'
                              IR_BOB_SDOC   = IR_BOB_SDOC ).
    endif.
  endmethod.
  method BUILD_IDAT.

    data: LR_SVC      type ref to /VCXI/CL_VKSRA_SVC,
          LR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC,
          LR_CUELMNT  type ref to /VCXI/CL_VKSC_CUELMNT,
          LR_SVCEL    type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT.

*** Get SmartVC API Instance
    LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = IR_BOB_SDOC->T_VBAP[ POSNR = IF_POSNR ]-CUOBJ ) ).

*** Build Integration Data Service
    LR_IDAT_SVC = ZCL_VCXI_XCI_IDAT_SVC=>CREATE( IS_CMPRK = LR_SVC->S_CMPRK
                                                 IF_IEALI = 'X_IDATSPV' ).

*** Get Integration Data Supervisor
    LR_CUELMNT = ZCL_VCXI_XCI_IDAT_SVC=>FIND_CUELMNT( IR_CUPRFL = LR_IDAT_SVC->R_CUPRFL
                                                      IF_IEALI  = LR_IDAT_SVC->F_IEALI ).

*** Get Root Elements
    loop at LR_SVC->GET_SVC_ELEMENTS( IR_SVC_ELEMENT_PARENT = value #( ) ) into LR_OBJECT.
      LR_SVCEL ?= LR_OBJECT.

*** Filter to Supervised Root Elements
      clear LR_OBJECT.
      loop at LR_CUELMNT->/VCXI/IF_VKSC_CUELMNT_SPV~T_SPVRT into LR_OBJECT.
        if LR_OBJECT->GET_ID( ) ne LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
          clear LR_OBJECT.
        else.
          exit.
        endif.
      endloop.
      check LR_OBJECT is bound.

*** Fill by SmartVC Element
      LR_IDAT_SVC->FILL_BY_SVCEL( IF_IPARE   = value #( )
                                  IF_CPARE   = value #( )
                                  IR_SVC     = LR_SVC
                                  IR_SVCEL   = LR_SVCEL
                                  IR_CUELMNT = cast #( LR_OBJECT )
                                  IR_ADAPTOR = new YCL_HP_SVC_IDAT_ADAPTOR( ) ).
    endloop.

    call function 'ZVCXI_XCC_IDAT_INIT_NIDAT'.

*** Save Integration Data (debug only)
    if 1 = 2.
      LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_SAVE ).
    endif.
    data(LF_ID) = LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT~GET_ID( ).

*** Set Integration Data Number to Buffer for later processing
    call function 'ZVCXI_XCC_IDAT_SET_NIDAT'
      exporting
        IF_POSNR = IF_POSNR
        IF_NIDAT = conv ZVCXI_XCI_NIDAT( LF_ID ).

  endmethod.
  method CONSTRUCTOR.

    data: LF_XML type YHP_SDP_TD001-XML.

    if IF_PRSTD is not initial.
      select single PRSTD, VBELN, XML, XMLC
        from YHP_SDP_TD001
        into @data(LS_TD001)
        where PRSTD = @IF_PRSTD.
      if SY-SUBRC eq 0.
        CL_ABAP_GZIP=>DECOMPRESS_TEXT( exporting GZIP_IN  = LS_TD001-XMLC
                                       importing TEXT_OUT = LF_XML ).
        ME->DESERIALIZE( LF_XML ).
      endif.
    else.

      ME->F_PRSTD = IF_PRSTD.
      ME->S_DATA  = IS_DATA.
    endif.

*** Add instance to instance buffer
    append initial line to T_INSTANCE assigning field-symbol(<S_INSTANCE>).
    <S_INSTANCE>-GUID     = IF_PRSTD.
    <S_INSTANCE>-R_OBJECT = ME.

  endmethod.
  method CREATE_PRSTD_VIA_SEL.

    data: LS_TD100  type YRF_RQPTS_TD100.
    data: LT_VBAPKEY type YRF_RQPT_TT_VBAPKEY.

*** Set Global and Selection attributes for Sales Document
    YCL_HP_SDP_DC_BOB_STUDY=>F_GBL_VBELN = IF_VBELN.
    YCL_HP_SDP_DC_BOB_STUDY=>F_SEL_VBELN = IF_VBELN.
    if IF_POSNR is supplied and IF_POSNR is not initial.
      YCL_HP_SDP_DC_BOB_STUDY=>F_SEL_POSNR = IF_POSNR.
    endif.

*** Create portal instance via selection screen
    ER_RQPTR_PR_MAIN = new #( IF_REPID = F_REPID_CREATE_PRSTD )."'CREATE_PRSTD' ).

*** Clear Global attributes
    clear: YCL_HP_SDP_DC_BOB_STUDY=>F_SEL_VBELN,
           YCL_HP_SDP_DC_BOB_STUDY=>F_SEL_POSNR.

*** Get line items selected
    LT_VBAPKEY = ER_RQPTR_PR_MAIN->GET_VBAPKEYS( ).

    ER_RQPTR_PR_MAIN->F_REFRESH_STATUS = ABAP_TRUE.
    ER_RQPTR_PR_MAIN->F_DET_ALV = ABAP_TRUE.

*** create table in background
    data(LR_RQPTR_GRID_MAIN) = new YCL_RF_RQPTR_GRID_MAIN( IR_PTR_PR_MAIN = ER_RQPTR_PR_MAIN ).
    check LR_RQPTR_GRID_MAIN is bound.
    LR_RQPTR_GRID_MAIN->REFRESH_GRID( ).

*** Save new price study to DB
    if IF_COMMIT eq ABAP_TRUE.
      if ER_RQPTR_PR_MAIN->R_PTS_BOB_PSTUDY is not bound.
        ER_RQPTR_PR_MAIN->R_PTS_BOB_PSTUDY = new #( ).
      endif.


      YCL_RF_RQPTS_BOB_PSTUDY=>CREATE( exporting IR_PTR_PR_MAIN = ER_RQPTR_PR_MAIN
                                                 IF_PRSTT       = TEXT-001 && | | && |{ YCL_HP_SDP_DC_BOB_STUDY=>F_GBL_VBELN alpha = out }|
                                       importing ER_PSTUDY      = ER_RQPTR_PR_MAIN->R_PTS_BOB_PSTUDY ).

    else.
*** Get Price Study Items ALV and Modify them
      YCL_RF_RQPTS_BOB_PSTUDY=>PROCESS_ITEMS( exporting IR_PTR_PR_MAIN = ER_RQPTR_PR_MAIN
                                              changing  CS_TD100       = LS_TD100 ).

    endif.

  endmethod.
  method CREATE_SDOC.

    data: LF_POSNR type POSNR,
          LF_CUOBJ type CUOBJ.
    data: LS_ORDER_VIEW  type ORDER_VIEW.
    data: LR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC,
          LR_MSG      type ref to /VCXI/CL_CKXM_MESSAGE,
          LR_SVC      type ref to /VCXI/CL_VKSRA_SVC.

    try.

***------------------------------------------------------------------------------------------------
***   Create Business Object
        LR_BOB_SDOC = new #( ).

***   Define the view relevant
        LS_ORDER_VIEW = value #( HEADER     = ABAP_TRUE
                                 ITEM       = ABAP_TRUE
                                 SDSCHEDULE = ABAP_TRUE
                                 BUSINESS   = ABAP_TRUE
                                 PARTNER    = ABAP_TRUE
                                 SDCOND     = ABAP_TRUE
                                 CONFIGURE  = ABAP_TRUE ).

***   Define new Sales Document
        if S_DATA-VBELN is initial.
***     Define the view relevant
          LR_BOB_SDOC->S_ORDER_VIEW = LS_ORDER_VIEW.
***     Define Header
          LR_BOB_SDOC->S_VBAK = value #( AUART = S_DATA-AUART
                                         VKORG = S_DATA-VKORG
                                         VTWEG = S_DATA-VTWEG
                                         SPART = S_DATA-SPART
                                         VKBUR = S_DATA-VKBUR ).

***     Define Partner
          LR_BOB_SDOC->T_VBPA = value #( ( PARVW = 'AG'  KUNNR = S_DATA-KUNAG )
                                         ( PARVW = 'WE'  KUNNR = S_DATA-KUNWE ) ).

        else.
***     Load existing Sales Document
          LR_BOB_SDOC->INIT_FROM_DB( IF_VBELN      = S_DATA-VBELN
                                     IS_ORDER_VIEW = LS_ORDER_VIEW ).
        endif.

***------------------------------------------------------------------------------------------------
***   Define next Position Number
        LF_POSNR = reduce POSNR_VA( init MAX = 0
                             for LS_VBAP in LR_BOB_SDOC->T_VBAP
                             next MAX = cond #( when LS_VBAP-POSNR > MAX then LS_VBAP-POSNR else MAX ) ) + 10.

*** Set POSNR to next item
        loop at S_DATA-T_ITEM assigning field-symbol(<S_ITEM>).
          check <S_ITEM>-POSNR is initial.
          <S_ITEM>-POSNR = LF_POSNR.
          exit.
        endloop.

*** Read data for current item
        try.
            data(LS_ITEM) = S_DATA-T_ITEM[ POSNR = LF_POSNR ].
          catch CX_SY_ITAB_LINE_NOT_FOUND into data(LR_CX_SY).
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_SY ).
        endtry.


*** Add Line Item
        ME->ADD_ITEM( exporting IR_BOB_SDOC = LR_BOB_SDOC
                                IF_POSNR    = LF_POSNR
                                IS_ITEM     = LS_ITEM ).

**** Check if material is configurable
        if not LS_ITEM-MATNR ca '0123456789'.
*** Add Configuration
          ME->ADD_CNF( exporting IR_BOB_SDOC  = LR_BOB_SDOC
                                 IF_POSNR     = LF_POSNR ).

*** Run Configuration of Item
          LF_CUOBJ = LR_BOB_SDOC->RUN_CONFIG( IF_POSNR = LF_POSNR ).

***   Get SmartVC API Instance
          LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = LF_CUOBJ ) ).

*** Update SmartVC via Fast Data (Run Configuration afterwards to ensure Routing Supervisor gets executed)
          YCL_HP_SVC_IDAT_FDMDL=>UPDATE_VIA_FASTD( exporting " IT_DATA = LS_ITEM-T_CNF "JBL 25/01/2024 Avoid Dump
                                                              IR_SVC =  LR_SVC ).
          LR_SVC->UPDATE_DC( ).
          LF_CUOBJ = LR_BOB_SDOC->RUN_CONFIG( IF_POSNR = LF_POSNR ).

***       Debug only - display SmartVC
          if 1 = 2.
            LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = LF_CUOBJ ) ).
            LR_SVC->START_UI( ).
          endif.

***   Create Integration Data for SmartVC
          ME->BUILD_IDAT( exporting IR_BOB_SDOC  = LR_BOB_SDOC
                                    IF_POSNR     = LF_POSNR ).

        endif.

***------------------------------------------------------------------------------------------------
***   Create Sales Document
        move ABAP_TRUE to YCL_HP_SDP_DC_BOB_STUDY=>F_FORCE_CONSISTENT.
        LR_MSG = LR_BOB_SDOC->SAVE( IF_TESTRUN = ABAP_FALSE ).
        move ABAP_FALSE to YCL_HP_SDP_DC_BOB_STUDY=>F_FORCE_CONSISTENT.
        S_DATA-S_HDR-VBELN = LR_BOB_SDOC->S_VBAK-VBELN.

***     Debug only - display messages
        if 1 = 2.
          LR_MSG->DISPLAY_MSG( ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
*** Restore LO-VC UI
        call function 'DIALOG_SET_WITH_DIALOG'.

        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_CKX ).
    endtry.

*** Export parameters
    move LR_BOB_SDOC to ER_BOB_SDOC.
    move LF_POSNR    to EF_POSNR_LAST.

*** Restore LO-VC UI
    call function 'DIALOG_SET_WITH_DIALOG'.

  endmethod.
  method DESERIALIZE.

    check IF_XML is not initial.

*** Open XML
    call transformation ID
         source xml IF_XML
         result F_PRSTD   = F_PRSTD
                S_DATA    = S_DATA.

  endmethod.
  method GET_INSTANCE.

    read table T_INSTANCE into data(LS_INSTANCE) with key GUID = IF_GUID.
    if SY-SUBRC eq 0.
      move LS_INSTANCE-R_OBJECT to RR_INSTANCE.

    else.

*** Get new Instance
      create object RR_INSTANCE
        exporting
          IF_PRSTD = conv YRF_RQPT_PRSTD( IF_GUID )
          IS_DATA  = IS_DATA.
    endif.

  endmethod.
  method GET_SDPOS_PRSTD.

    data: LR_RQPTR_GRID_MAIN type ref to YCL_RF_RQPTR_GRID_MAIN.

*** push sd position to global memory
    YCL_HP_SDP_DC_BOB_STUDY=>F_SEL_VBELN = IF_VBELN.
    YCL_HP_SDP_DC_BOB_STUDY=>F_SEL_POSNR = IF_POSNR.

*** Free Sales Document header instances to refresh pricing
    YCL_RF_RQPTR_BOB_HEAD=>DO_FREE( IF_VBELN ).

*** create RQPTR BOB
*    create object RR_RQPTR_PR_MAIN exporting IF_REPID = 'SDPOS_PRSDT'.
    ME->CREATE_PRSTD_VIA_SEL( exporting IF_VBELN          = IF_VBELN
                                        IF_POSNR          = IF_POSNR
                                        IF_COMMIT         = ABAP_FALSE
                              importing ER_RQPTR_PR_MAIN  = RR_RQPTR_PR_MAIN ).

*** remove sd position from global memory
    clear: YCL_HP_SDP_DC_BOB_STUDY=>F_SEL_VBELN,
           YCL_HP_SDP_DC_BOB_STUDY=>F_SEL_POSNR.

  endmethod.
  method GET_VALID_SDPOS.

*** Check if item can be selected by pricing portal
    select VBELN POSNR STDPD
      from YRF_RQPT_V_VBAP
      into table RT_VBAPKEY
      where VBELN eq IF_VBELN
        and POSNR eq IF_POSNR
        and STDPD ne SPACE.

***   Item not found, try with sub-items
    if SY-SUBRC ne 0.

      select VBELN, POSNR
        from VBAP
        into table @data(LT_VBAP_SUB)
        where VBELN eq @IF_VBELN
          and UEPOS eq @IF_POSNR.
      check LT_VBAP_SUB is not initial.

      select VBELN POSNR STDPD
        from YRF_RQPT_V_VBAP
        into table RT_VBAPKEY
        for all entries in LT_VBAP_SUB
        where VBELN eq IF_VBELN
          and POSNR eq LT_VBAP_SUB-POSNR.

    endif.
  endmethod.
  method INIT_PRSTD_GLOBAL.

    clear F_GBL_PRSTD.

  endmethod.
  method LOAD_PRSTD.

    check IF_PRSTD is not initial.

*** set PRSTD to global memory
    YCL_HP_SDP_DC_BOB_STUDY=>SET_PRSTD_GLOBAL( IF_PRSTD ).

*** instance creation of YCL_RF_RQPTR_PR_MAIN with load
    create object RR_RQPTR_PR_MAIN exporting IF_REPID = F_REPID_LOAD_PRSTD. "'LOAD_PRSTD'.

*** remove PRSTD from global memory
    YCL_HP_SDP_DC_BOB_STUDY=>INIT_PRSTD_GLOBAL( ).

  endmethod.
  method PRSTD_ADD_LINES.
*** see YCL_RF_RQPTR_PR_ADD.ADD_LINES()

    data: LT_BOB_ITEM    type YRF_RQPTR_TT_BOB_ITEM.
    data: LT_VBAPKEY_ADD type        YRF_RQPT_TT_VBAPKEY,
          LT_CMATN_ADD   type        YRF_RQPT_TT_CMATN,
          LT_FCAT_ORI    type        LVC_T_FCAT,
          LT_FCAT_ADD    type        LVC_T_FCAT,
          LT_FCAT_NEW    type        LVC_T_FCAT,
          LT_SEL_ROW     type        LVC_T_ROW,
          LT_VBAPKEY     type        YRF_RQPT_TT_VBAPKEY.
    data: LR_BOB_ITEM type ref to YCL_RF_RQPTR_BOB_ITEM,
          LR_DATA_ORI type ref to DATA,
          LR_DATA_ADD type ref to DATA,
          LR_DATA_NEW type ref to DATA,
          LR_EXIT_BTN type ref to YCL_RF_RQPTR_EXIT_BUTTON.
    field-symbols : <T_DATA_ADD> type standard table,
                    <S_SEL_ROW>  like line of LT_SEL_ROW,
                    <S_PRFID>    like line of IR_RQPTR_PR_MAIN_ADD->T_PRFID.

***-------------------------------------------------------------------*
    check IR_RQPTR_PR_MAIN_ADD is bound.

*** Get fieldcatalogs
    move IR_RQPTR_PR_MAIN->T_FCAT to LT_FCAT_ORI.
    move IR_RQPTR_PR_MAIN_ADD->T_FCAT  to LT_FCAT_ADD.

*** Select lines to be added
    IR_RQPTR_PR_MAIN_ADD->GET_ALV_TAB( importing ER_ALV_DATA = LR_DATA_ADD ).
    check LR_DATA_ADD is bound.
    assign LR_DATA_ADD->* to <T_DATA_ADD>.
    do LINES( <T_DATA_ADD> ) times.
      append initial line to LT_SEL_ROW assigning <S_SEL_ROW>.
      <S_SEL_ROW>-INDEX = SY-TABIX.
    enddo.
    unassign <T_DATA_ADD>.
    clear LR_DATA_ADD.
    IR_RQPTR_PR_MAIN_ADD->SET_SEL_LINES( LT_SEL_ROW ).

*** Merge original and additional fieldcatalog in customizing class
*** Get Selected CMATN
    loop at IR_RQPTR_PR_MAIN_ADD->GET_SEL_BOB_ITEM( IF_INCL_MAIN = ABAP_TRUE ) into LR_BOB_ITEM.
      append LR_BOB_ITEM->GET_VBAPKEY( ) to LT_VBAPKEY_ADD.
    endloop.
*    move IR_RQPTR_PR_MAIN_ADD->GET_SEL_VBAPKEY( )                  to LT_VBAPKEY_ADD.
    move IR_RQPTR_PR_MAIN_ADD->GET_CMATN_VBAPKEY( LT_VBAPKEY_ADD ) to LT_CMATN_ADD.
    IR_RQPTR_PR_MAIN->R_PTC_CUST->GET_FCAT( IT_CMATN = LT_CMATN_ADD
                                            IT_FCAT  = LT_FCAT_ORI ).
    move IR_RQPTR_PR_MAIN->R_PTC_CUST->T_FCAT to LT_FCAT_NEW.

*** Create dynamic data table based on new merged fieldcatalog
    LR_DATA_NEW = IR_RQPTR_PR_MAIN->CREATE_DYNTAB( IT_FCAT        = LT_FCAT_NEW
                                                    IF_STYLEFNAME = YCL_RF_RQPTR_PR_MAIN=>C_STYLE_FNAME ).

*** Append data from original table into the new data table
    IR_RQPTR_PR_MAIN->GET_ALV_TAB( importing ER_ALV_DATA = LR_DATA_ORI ).
    PRSTD_MERGE_DATA( exporting IR_DATA_ADD = LR_DATA_ORI
                                IT_FCAT_ADD = LT_FCAT_ORI
                                IT_FCAT     = LT_FCAT_NEW
                      changing  CR_DATA     = LR_DATA_NEW ).

*** Append data from additional lines into the new data table
    move IR_RQPTR_PR_MAIN_ADD->GET_SEL_LINES( ) to LR_DATA_ADD.
    PRSTD_MERGE_DATA( exporting IR_DATA_ADD = LR_DATA_ADD
                                IT_FCAT_ADD = LT_FCAT_ADD
                                IT_FCAT     = LT_FCAT_NEW
                      changing  CR_DATA     = LR_DATA_NEW ).
*** Set new fieldcat in PR Main
    move LT_FCAT_NEW to IR_RQPTR_PR_MAIN->T_FCAT.

*** Merge Profile IDs
    loop at IR_RQPTR_PR_MAIN_ADD->T_PRFID assigning <S_PRFID>.
      read table IR_RQPTR_PR_MAIN->T_PRFID with key TABLE_LINE = <S_PRFID> transporting no fields.
      if SY-SUBRC ne 0.
        append <S_PRFID> to IR_RQPTR_PR_MAIN->T_PRFID.
      endif.
    endloop.

*** Copy to Price Study
*   ME->R_PTR_PR_MAIN->R_PTS_BOB_PSTUDY->SET_PRFID( ME->R_PTR_PR_MAIN->T_PRFID ).
    if IR_RQPTR_PR_MAIN->R_PTS_BOB_PSTUDY is bound.
      IR_RQPTR_PR_MAIN->R_PTS_BOB_PSTUDY->SET_PRFID( IR_RQPTR_PR_MAIN->T_PRFID ).
    endif.

*** Set new ALV data in PR Main
    move ABAP_TRUE to IR_RQPTR_PR_MAIN->F_REFRESH_STATUS.
    IR_RQPTR_PR_MAIN->SET_ALV_TAB( IR_ALV_DATA     = LR_DATA_NEW
                                   IF_REFRESH_KEYS = ABAP_TRUE ).

  endmethod.
  method PRSTD_MERGE_DATA.

  data:           LS_FIELD_ADD   type        ABAP_COMPONENTDESCR,
                  LS_FCAT        type        LVC_S_FCAT,
                  LS_FCAT_ADD    type        LVC_S_FCAT.
  data:           LT_FIELD_ADD   type        ABAP_COMPONENT_TAB.
  data:           LR_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR,
                  LR_TABLEDESCR  type ref to CL_ABAP_TABLEDESCR.
  field-symbols: <F_VALUE>       type        any,
                 <F_VALUE_ADD>   type        any,
                 <S_DATA>        type        any,
                 <S_DATA_ADD>    type        any,
                 <T_DATA>        type        standard table,
                 <T_DATA_ADD>    type        standard table.

*** Get data tables
  assign: IR_DATA_ADD->* to <T_DATA_ADD>,
          CR_DATA->*     to <T_DATA>.

*** Get fields of additional data
  move CL_ABAP_TABLEDESCR=>DESCRIBE_BY_DATA_REF( IR_DATA_ADD ) ?to LR_TABLEDESCR.
  check LR_TABLEDESCR is bound.
  move LR_TABLEDESCR->GET_TABLE_LINE_TYPE( ) ?to LR_STRUCTDESCR.
  check LR_STRUCTDESCR is bound.

  LT_FIELD_ADD = LR_STRUCTDESCR->GET_COMPONENTS( ).

*** Append additional data to data tab
  loop at <T_DATA_ADD> assigning <S_DATA_ADD>.
    append initial line to <T_DATA> assigning <S_DATA>.

    loop at LT_FIELD_ADD into LS_FIELD_ADD.

      assign component SY-TABIX of structure <S_DATA_ADD> to <F_VALUE_ADD>.
      check SY-SUBRC eq 0.

      read table IT_FCAT_ADD into LS_FCAT_ADD with key FIELDNAME = LS_FIELD_ADD-NAME. "#EC *
      check SY-SUBRC eq 0.

*\      read table IT_FCAT into LS_FCAT with key COL_POS = LS_FCAT_ADD-COL_POS.
*      "PaFi 19.05.22 prefix according to ACC
      IF LS_FCAT_ADD-COL_POS NE 0.
        READ TABLE IT_FCAT INTO LS_FCAT WITH KEY COL_POS = LS_FCAT_ADD-COL_POS.
      ELSE.
        READ TABLE IT_FCAT INTO LS_FCAT WITH KEY FIELDNAME = LS_FCAT_ADD-FIELDNAME.
      ENDIF.

      check SY-SUBRC eq 0.
      assign component LS_FCAT-FIELDNAME of structure <S_DATA> to <F_VALUE>.
      check SY-SUBRC eq 0.
      move <F_VALUE_ADD> to <F_VALUE>.

    endloop.
  endloop.

  endmethod.
  method REFRESH_STUDY.

    data: LF_PRCSD type ABAP_BOOL,
          LF_MSGST type ABAP_BOOL,
          LF_SIM   type ABAP_BOOL.
    data: LS_VBAPKEY type YRF_RQPT_S_VBAPKEY.
    data: LT_BOB_ITEM type YRF_RQPTR_TT_BOB_ITEM,
          LT_BOB_HEAD type YRF_RQPTR_TT_BOB_HEAD,
          LT_VBAPKEY  type YRF_RQPT_TT_VBAPKEY.
    data: LT_SEL_ROW  type        LVC_T_ROW.
    data: LR_BOB_ITEM type ref to YCL_RF_RQPTR_BOB_ITEM,
          LR_BOB_HEAD type ref to YCL_RF_RQPTR_BOB_HEAD,
          LR_DATA_ADD type ref to DATA.
    field-symbols : <T_DATA_ADD> type standard table,
                    <S_SEL_ROW>  like line of LT_SEL_ROW.

***----------------------------------------------------------------------------
*** Select lines to be added
    IR_RQPTR_PR_MAIN->GET_ALV_TAB( importing ER_ALV_DATA = LR_DATA_ADD ).
    check LR_DATA_ADD is bound.
    assign LR_DATA_ADD->* to <T_DATA_ADD>.
    do LINES( <T_DATA_ADD> ) times.
      append initial line to LT_SEL_ROW assigning <S_SEL_ROW>.
      <S_SEL_ROW>-INDEX = SY-TABIX.
    enddo.
    unassign <T_DATA_ADD>.
    clear LR_DATA_ADD.
    IR_RQPTR_PR_MAIN->SET_SEL_LINES( LT_SEL_ROW ).

*** Get Selected lines (incl. header and sub)
    LT_BOB_ITEM = IR_RQPTR_PR_MAIN->GET_SEL_BOB_ITEM( IF_INCL_MAIN = ABAP_TRUE
                                                       IF_INCL_SUB  = ABAP_TRUE ).
    check LT_BOB_ITEM is not initial.

*** Get all Items related to selected Sales Documents
    loop at LT_BOB_ITEM into LR_BOB_ITEM.
      collect LR_BOB_ITEM->GET_BOB_HEAD( ) into LT_BOB_HEAD.
    endloop.

***----------------------------------------------------------------------------
*** Check Status of Pricing Study Item
    loop at LT_BOB_HEAD into LR_BOB_HEAD.

*** Don't open Simulation Sales Documents
      if LR_BOB_HEAD->F_VBELN cs YCL_RF_RQPTR_SIM=>C_VBELN_SIM.
        LF_SIM = ABAP_TRUE.
        continue.
      endif.

*** Check Pricing Study item status (No update for items for which a SMD was executed)
      if IR_RQPTR_PR_MAIN->R_PTS_BOB_PSTUDY is bound.
        IR_RQPTR_PR_MAIN->R_PTS_BOB_PSTUDY->GET_ITEM_DB_STATUS( exporting IF_VBELN     = LR_BOB_HEAD->F_VBELN
                                                                 importing EF_PROCESSED = LF_PRCSD ).
        if LF_PRCSD eq ABAP_TRUE.
          if LF_MSGST eq ABAP_FALSE.
***       Data hasn't been refreshed for the lines already processed!
*            message S121.
            move ABAP_TRUE to LF_MSGST.
          endif.
          continue.
        endif.
      endif.

      loop at YCL_RF_RQPTR_BOB_ITEM=>GET_INSTANCES_BY_HEAD( IR_BOB_HEAD = LR_BOB_HEAD ) into LR_BOB_ITEM.
        LS_VBAPKEY = LR_BOB_ITEM->GET_VBAPKEY( ).
***   Lines need to be refreshed
        append LS_VBAPKEY to LT_VBAPKEY.
      endloop.

*** Free existing Header and Items
      YCL_RF_RQPTR_BOB_HEAD=>DO_FREE( IF_VBELN = LR_BOB_HEAD->F_VBELN ).

    endloop.

***----------------------------------------------------------------------------
*** Perform actual Refresh of Data (re-creates Instances)
    IR_RQPTR_PR_MAIN->REFRESH_DATA( changing CT_VBAPKEY = LT_VBAPKEY ).

    if LF_SIM eq ABAP_TRUE.
*** Data of simulation items can't be refreshed.
*      message I122.
    endif.

  endmethod.
  method SAVE_TO_DB.

    data: LS_TD001 type YHP_SDP_TD001.

    move SY-MANDT         to LS_TD001-MANDT.
    move ME->F_PRSTD      to LS_TD001-PRSTD.
    move ME->S_DATA-VBELN to LS_TD001-VBELN.
    move ME->SERIALIZE( ) to LS_TD001-XML.
    if LS_TD001-XML is not initial.
      CL_ABAP_GZIP=>COMPRESS_TEXT( exporting TEXT_IN  = LS_TD001-XML
                                   importing GZIP_OUT = LS_TD001-XMLC ).
    endif.

    check ME->F_PRSTD is not initial.
    modify YHP_SDP_TD001 from LS_TD001.
    check SY-SUBRC eq 0.
    commit work.

  endmethod.
  method SERIALIZE.

*** Create XML
    call transformation ID
         source F_PRSTD   = ME->F_PRSTD
                S_DATA    = ME->S_DATA
         result xml RF_XML.

  endmethod.
  method SET_DATA.

    S_DATA = IS_DATA.

  endmethod.
  method SET_PRSTD.

    ME->F_PRSTD = IF_PRSTD.

  endmethod.
  method SET_PRSTD_GLOBAL.

    F_GBL_PRSTD = IF_PRSTD.

  endmethod.
  method SET_STATUS.

    check IR_PTR_PR_MAIN is bound.
    check IR_PTR_PR_MAIN->R_PTS_BOB_PSTUDY is bound.

*** Handle created status
    if IF_CREA is supplied and IF_CREA is not initial.
      IR_PTR_PR_MAIN->R_PTS_BOB_PSTUDY->SET_STATC( 'E0001' ).
      return.
    endif.

*** Handle In Progress status
    if IF_WIP is supplied and IF_WIP is not initial.
      IR_PTR_PR_MAIN->R_PTS_BOB_PSTUDY->SET_STATC( 'E0002' ).
      return.
    endif.

*** Handle Done status
    if IF_DONE is supplied and IF_DONE is not initial.
      IR_PTR_PR_MAIN->R_PTS_BOB_PSTUDY->SET_STATC( 'E0004' ).
      return.
    endif.

  endmethod.
  method START.

    data: LS_DATA     type  YHP_SVC_S_PPUPL_DATA.
    data: LR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC,
          LR_PR_MAIN  type ref to YCL_RF_RQPTR_PR_MAIN,
          LX_PERS     type ref to YCX_HP_PERSISTENT.

    try.
*----------------------------------------------------------------------*
* Start the transfer to stucture
*----------------------------------------------------------------------*
        LS_DATA =  YCL_HP_TEN_BL=>FILL_STRUCT( IF_TENID = IF_TENID ).
      catch YCX_HP_PERSISTENT into LX_PERS.
        message LX_PERS type 'E'.
    endtry.

    try.
***     Create DC instance
        data(LR_DC_BOB_STUDY) = YCL_HP_SDP_DC_BOB_STUDY=>GET_INSTANCE( exporting IF_GUID = SPACE
                                                                                 IS_DATA = LS_DATA ).

****    Create first quote item
        LR_DC_BOB_STUDY->CREATE_SDOC( importing EF_POSNR_LAST = data(LF_POSNR)
                                                ER_BOB_SDOC   = LR_BOB_SDOC ).

***     Create Price Study for created quote
        LR_DC_BOB_STUDY->CREATE_PRSTD_VIA_SEL( exporting IF_VBELN         = LR_BOB_SDOC->S_VBAK-VBELN
                                               importing ER_RQPTR_PR_MAIN = LR_PR_MAIN ).

***     Capture Price Study ID in DC and serialize data
        RF_PRSTD = LR_PR_MAIN->R_PTS_BOB_PSTUDY->F_PRSTD.
        LR_DC_BOB_STUDY->SET_PRSTD( LR_PR_MAIN->R_PTS_BOB_PSTUDY->F_PRSTD ).
        LR_DC_BOB_STUDY->SAVE_TO_DB( ).

        if IF_AS_JOB eq ABAP_TRUE.
***       Start job to continue creation of quote
          YCL_HP_SDP_DC_BOB_STUDY=>START_SDOC_JOB( IR_DC_BOB_STUDY = LR_DC_BOB_STUDY ).
        else.
***       Submit
          submit YHP_SDP_PRSTD_UPDATE_EXT
            with P_PRSTD = LR_PR_MAIN->R_PTS_BOB_PSTUDY->F_PRSTD
            and return.
        endif.

*** Clear Global and Selection attributes for Sales Document
        clear: YCL_HP_SDP_DC_BOB_STUDY=>F_GBL_VBELN,
               YCL_HP_SDP_DC_BOB_STUDY=>F_SEL_VBELN,
               YCL_HP_SDP_DC_BOB_STUDY=>F_SEL_POSNR.

***     Restore LO-VC UI
        call function 'DIALOG_SET_WITH_DIALOG'.

***     Create UI Class and Start UI
        if IF_UI eq ABAP_TRUE.
          set parameter id 'YRF_RQPT_PRSTD' field LR_PR_MAIN->R_PTS_BOB_PSTUDY->F_PRSTD.
          new YCL_RF_RQPTR_UI_MAIN( LR_PR_MAIN )->START_UI( ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
***     Restore LO-VC UI
        call function 'DIALOG_SET_WITH_DIALOG'.

        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method START_SDOC_JOB.

    data: LF_XML        type STRING,
          LF_JOB_NAME   type TBTCJOB-JOBNAME,
          LF_JOB_NUMBER type TBTCJOB-JOBCOUNT.
    data: LR_BOB_HEAD type ref to YCL_RF_RQPTR_BOB_HEAD.
    data: LT_RSPARAMS   type standard table of RSPARAMS.
    field-symbols: <S_RSPARAMS> like line of LT_RSPARAMS.

***--------------------------------------------------------------------------------------
*** Get Job Number
    LF_JOB_NAME = |PRICE_STUDY_UPDATE_{ IR_DC_BOB_STUDY->F_PRSTD alpha = out }|.

    call function 'JOB_OPEN'
      exporting
        JOBNAME          = LF_JOB_NAME
      importing
        JOBCOUNT         = LF_JOB_NUMBER
      exceptions
        CANT_CREATE_JOB  = 1
        INVALID_JOB_DATA = 2
        JOBNAME_MISSING  = 3
        others           = 4.
    check SY-SUBRC eq 0.


    append initial line to LT_RSPARAMS assigning <S_RSPARAMS>.
    <S_RSPARAMS>-SELNAME = 'P_PRSTD'.
    <S_RSPARAMS>-LOW = IR_DC_BOB_STUDY->F_PRSTD.

*** Submit
    submit YHP_SDP_PRSTD_UPDATE_EXT
      with selection-table LT_RSPARAMS
      via job LF_JOB_NAME number LF_JOB_NUMBER
                      and return.
    check SY-SUBRC eq 0.

*** Close Job
    call function 'JOB_CLOSE'
      exporting
        JOBCOUNT             = LF_JOB_NUMBER
        JOBNAME              = LF_JOB_NAME
        STRTIMMED            = 'X'
      exceptions
        CANT_START_IMMEDIATE = 1
        INVALID_STARTDATE    = 2
        JOBNAME_MISSING      = 3
        JOB_CLOSE_FAILED     = 4
        JOB_NOSTEPS          = 5
        JOB_NOTEX            = 6
        LOCK_FAILED          = 7
        others               = 8.

  endmethod.
