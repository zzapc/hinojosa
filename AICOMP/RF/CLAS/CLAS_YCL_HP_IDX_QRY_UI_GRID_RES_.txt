
*----------------------------------------------------------------------*
*       CLASS ZCL_SVI_UI_GRID_RES DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
class YCL_HP_IDX_QRY_UI_GRID_RES definition
  public
  inheriting from YCL_HP_IDX_QRY_UI_GRID
  create public .

public section.

  data F_REFRESH_ALL_REQ type ABAP_BOOL .
  data F_SELTY type STRING .

  methods CONSTRUCTOR
    importing
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_DATA type ref to DATA
      !IF_SELTY type STRING
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_ROWCOLOR_COMP type CHAR04 value 'C200' ##NO_TEXT.
  constants C_ROWCOLOR_HEAD type CHAR04 value 'C100' ##NO_TEXT.
  constants C_BTYPE_SEPARATOR type TB_BTYPE value '3' ##NO_TEXT.
  constants C_FUNC_SHOW_DETAILS type UI_FUNC value 'SHOW_DETAIL' ##NO_TEXT.
  constants C_BTYPE_BUTTON type TB_BTYPE value '0' ##NO_TEXT.
  constants C_FUNC_START_MDP type UI_FUNC value 'START_MDP' ##NO_TEXT.
  constants C_BTYPE_MENU type TB_BTYPE value '2' ##NO_TEXT.

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_MENU_BUTTON
    redefinition .
  methods HANDLE_TOOLBAR
    redefinition .
  methods HANDLE_UCOMM
    redefinition .
  methods INIT_CONTAINER
    redefinition .
  methods INIT_DATA
    redefinition .
private section.

  data R_DATA_QUERY type ref to DATA .
  data S_DATA type ref to CL_ABAP_STRUCTDESCR .
endclass. "YCL_HP_IDX_QRY_UI_GRID_RES definition
class YCL_HP_IDX_QRY_UI_GRID_RES implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( ).

*** get container name to display the grid
  move IF_CONTAINER_NAME to ME->F_CONTAINER_NAME.

*** get result data
  move IR_DATA           to ME->R_DATA_QUERY.

*** Material or Sales Document
  move IF_SELTY to ME->F_SELTY.

*** initialize data
  ME->INIT_DATA( ).

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method GET_FIELDCAT.

  data LS_FIELDCAT type LVC_S_FCAT.
  data LT_FIELDS   type DDFIELDS.

  field-symbols <FS_FIELDS> type line of  DDFIELDS.

  check ME->S_DATA is not initial.

*** read fields from dynamic structure
  call method CL_SALV_DATA_DESCR=>READ_STRUCTDESCR
    exporting
      R_STRUCTDESCR = ME->S_DATA
    receiving
      T_DFIES       = LT_FIELDS.

  loop at LT_FIELDS assigning <FS_FIELDS>.

    clear LS_FIELDCAT.
    move-corresponding <FS_FIELDS> to LS_FIELDCAT.

*** Adjust Field Catalog
    case LS_FIELDCAT-FIELDNAME.

      when 'T_STYL' or 'CREBY' or 'CREAT' or 'CHABY' or 'CHAAT'.
        move ABAP_TRUE to LS_FIELDCAT-TECH.

    endcase.

    append LS_FIELDCAT to RT_FCAT.

  endloop.

endmethod.
method GET_GRID_DATA.

  data: LF_ROWCOLOR type CHAR04.

  field-symbols: <T_DATA_QUERY>  type standard table,
                 <T_DATA>        type standard table,
                 <S_DATA_RESULT> type ANY,
                 <S_DATA>        type ANY,
                 <FIELD>         type ANY.

*** Dereferencing of Data Reference
  assign ME->R_DATA_QUERY->* to <T_DATA_QUERY>.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.

*  move <T_DATA_QUERY> to <T_DATA>.
  loop at <T_DATA_QUERY> assigning <S_DATA_RESULT>.
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding <S_DATA_RESULT> to <S_DATA>.
  endloop.

  loop at <T_DATA> assigning <S_DATA>.
    assign component 'CSELF' of structure <S_DATA> to <FIELD>.
    check SY-SUBRC eq 0.
    if <FIELD> eq 1.
      LF_ROWCOLOR = C_ROWCOLOR_HEAD.
    elseif <FIELD> is not initial.
      LF_ROWCOLOR = C_ROWCOLOR_COMP.
    endif.
    unassign <FIELD>.

*** Set Color
    assign component 'ROWCOLOR' of structure <S_DATA> to <FIELD>.
    check SY-SUBRC eq 0.
    move LF_ROWCOLOR to <FIELD>.

  endloop.

endmethod.
method GET_LAYOUT.

*** optimize column width
  move ABAP_TRUE  to RS_LAYOUT-CWIDTH_OPT.

  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

*** Style field
  move 'T_STYL'   to RS_LAYOUT-STYLEFNAME.

*** Color Line
  move 'ROWCOLOR' to RS_LAYOUT-INFO_FNAME.

endmethod.
method HANDLE_MENU_BUTTON.

  data LR_MURDE type ref to ZCL_VCXI_XCUR_MURDE.

  data LT_MUROB type ZVCXI_XCUR_TT_MUROB.

  data LS_MUROB type ZVCXI_XCUR_S_MUROB.

  field-symbols: <T_DATA> type TABLE,
                 <S_DATA> type ANY.

  try.
      case E_UCOMM.
        when C_FUNC_START_MDP.

*** Create new Mass Update Definition
          create object LR_MURDE.

***--------------------------------------------------------------------------------------
***       Get selected Documents as Objects
***       Dereferencing of Data Reference
          assign ME->R_DATA->* to <T_DATA>.
          ME->GET_SELECTED_ROWS( importing ET_ROW = data(LT_SELECTED_ROWS) ).

          loop at LT_SELECTED_ROWS into data(LS_SELECTED_ROW).
            read table <T_DATA> assigning <S_DATA> index LS_SELECTED_ROW-INDEX.
            if SY-SUBRC is initial.

              clear LS_MUROB.
              assign component 'MARC_MATNR' of structure <S_DATA> to field-symbol(<FS_FIELD_VALUE>).
              if <FS_FIELD_VALUE> is not assigned.
                assign component 'MARA_MATNR' of structure <S_DATA> to <FS_FIELD_VALUE>.
              endif.
              if <FS_FIELD_VALUE> is assigned.
                LS_MUROB-MATNR = <FS_FIELD_VALUE>.
                unassign <FS_FIELD_VALUE>.
              endif.

              assign component 'MARC_WERKS' of structure <S_DATA> to <FS_FIELD_VALUE>.
              if <FS_FIELD_VALUE> is assigned.
                LS_MUROB-WERKS = <FS_FIELD_VALUE>.
                unassign <FS_FIELD_VALUE>.
              endif.

              assign component 'VBAP_VBELN' of structure <S_DATA> to <FS_FIELD_VALUE>.
              if <FS_FIELD_VALUE> is not assigned.
                assign component 'VBAK_VBELN' of structure <S_DATA> to <FS_FIELD_VALUE>.
              endif.
              if <FS_FIELD_VALUE> is assigned.
                LS_MUROB-VBELN = <FS_FIELD_VALUE>.
                unassign <FS_FIELD_VALUE>.
              endif.

              assign component 'VBAP_POSNR' of structure <S_DATA> to <FS_FIELD_VALUE>.
              if <FS_FIELD_VALUE> is assigned.
                LS_MUROB-POSNR = <FS_FIELD_VALUE>.
                unassign <FS_FIELD_VALUE>.
              endif.

              append LS_MUROB to LT_MUROB.

            endif.
          endloop.

*** Add new Group with Documents
          LR_MURDE->ADD_MURGR( IT_MUROB = LT_MUROB ).

***--------------------------------------------------------------------------------------
*** Call Popup to maintain Mass Update
          ZCL_VCXI_XCUR_POPUP_MURDE=>START( exporting IR_MURDE = LR_MURDE
                                            importing ER_MSG   = data(LR_MSG) ).
      endcase.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data LS_TOOLBAR type STB_BUTTON.

  SUPER->HANDLE_TOOLBAR( exporting E_OBJECT      = E_OBJECT
                                   E_INTERACTIVE = E_INTERACTIVE ).
  try.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Start Mass Data Processing
      clear LS_TOOLBAR.
      move C_BTYPE_SEPARATOR to LS_TOOLBAR-BUTN_TYPE.
      append LS_TOOLBAR      to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_START_MDP  to LS_TOOLBAR-FUNCTION.
      move TEXT-002          to LS_TOOLBAR-TEXT.
      move C_BTYPE_MENU      to LS_TOOLBAR-BUTN_TYPE.
      move ICON_MASS_CHANGE  to LS_TOOLBAR-ICON.
      append LS_TOOLBAR      to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UCOMM.

  data LT_ROW type LVC_T_ROW.

  try.
*     Save the scroll info
      ME->R_GRID->GET_SCROLL_INFO_VIA_ID( importing ES_ROW_NO   = ME->S_ROW_NO
                                                    ES_ROW_INFO = ME->S_ROW
                                                    ES_COL_INFO = ME->S_COL ).

*     Save info about last selected cell
      ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_CELL_ROW
                                              ES_COL_ID = ME->S_CELL_COL
                                              ES_ROW_NO = ME->S_CELL_ROW_NO ).

*     Save info about selected rows
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = ME->T_SEL_ROWS ).

*     If no row is selected save info about selected cells
      if ME->T_SEL_ROWS[] is initial.
        ME->R_GRID->GET_SELECTED_CELLS_ID( importing ET_CELLS = ME->T_SEL_CELLS ).
      endif.


***   Check if a row was selected
      ME->GET_SELECTED_ROWS( importing ET_ROW = LT_ROW ).

      ME->F_REFRESH_REQ = ABAP_TRUE.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
METHOD INIT_CONTAINER.

  MOVE CL_GUI_CONTAINER=>DEFAULT_SCREEN ?TO ME->R_CONTAINER.

ENDMETHOD.
method INIT_DATA.

  data :        LS_COMPONENT          type        ABAP_COMPONENTDESCR.
  data :        LT_COMPONENT          type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
  data:         LR_ABAP_STRUCT        type ref to CL_ABAP_STRUCTDESCR,
                LR_ABAP_STRUCT_NEW    type ref to CL_ABAP_STRUCTDESCR,
                LR_TABLEDESCR         type ref to CL_ABAP_TABLEDESCR,
                LR_TABLEDESCR_NEW     type ref to CL_ABAP_TABLEDESCR.

*** check that we have data to display
  check ME->R_DATA_QUERY is not initial.

  try.

***   get table type descr from result table
      LR_TABLEDESCR ?= CL_ABAP_TABLEDESCR=>DESCRIBE_BY_DATA_REF( ME->R_DATA_QUERY ).
      if LR_TABLEDESCR is bound.

***     get structure definition
        LR_ABAP_STRUCT ?= LR_TABLEDESCR->GET_TABLE_LINE_TYPE( ).
        if LR_ABAP_STRUCT is bound.

          move LR_ABAP_STRUCT to ME->S_DATA.

***       get all columns
          LT_COMPONENT = LR_ABAP_STRUCT->GET_COMPONENTS( ).

***       create field rowcolor field
          LS_COMPONENT-NAME = 'ROWCOLOR'.
          LS_COMPONENT-TYPE ?= CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME('CHAR04').
          append LS_COMPONENT to LT_COMPONENT.

          clear: LS_COMPONENT.
***       create field table style
          LS_COMPONENT-NAME = 'T_STYL'.
          LS_COMPONENT-TYPE ?= CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME('LVC_T_STYL').
          append LS_COMPONENT to LT_COMPONENT.

***       create new structure definition
          LR_ABAP_STRUCT_NEW = CL_ABAP_STRUCTDESCR=>CREATE( LT_COMPONENT ).

          check LR_ABAP_STRUCT_NEW is bound.

***       create new table definition
          LR_TABLEDESCR_NEW = CL_ABAP_TABLEDESCR=>CREATE( LR_ABAP_STRUCT_NEW ).

***       create own grid data handler
*          create data ME->R_DATA type handle LR_TABLEDESCR.
          create data ME->R_DATA type handle LR_TABLEDESCR_NEW.
        endif.

      endif.
    catch CX_ROOT.
  endtry.

endmethod.
