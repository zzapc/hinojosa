
class YCL_HP_IDX_QRY_UI_SEL definition
  public
  final
  create protected .

public section.

  types:
    TY_FIELDS type standard table of RSDSFIELDS .
  types:
    TY_TABLES type standard table of RSDSTABS .

  data S_SEL_VIS type YHP_IDX_QRY_S_SEL_VIS .

  class-methods START_UI
    importing
      !I_CLEAR type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_MODIFY_SCREEN
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    changing
      !CF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_SEL_VIS
    importing
      !IS_SEL_VIS type YHP_IDX_QRY_S_SEL_VIS
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_GET type SYUCOMM value 'GET' ##NO_TEXT.
  constants C_UC_DELETE type SYUCOMM value 'DELETE' ##NO_TEXT.
  constants C_UC_BACK type SYUCOMM value 'BACK' ##NO_TEXT.
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_EXIT type SYUCOMM value 'EXIT' ##NO_TEXT.
  data S_DYNP type /VCXI/CKX_S_DYNP_KEY .
  data R_QUERY type ref to YCL_HP_IDX_QUERY .
  constants C_UC_SEL_CHANGE type SYUCOMM value 'SEL_CHANGE' ##NO_TEXT.
  constants C_UC_SAVE type SYUCOMM value 'SAVE' ##NO_TEXT.
  constants C_UC_EXECUTE type SYUCOMM value 'EXECUTE' ##NO_TEXT.

  methods POPUP_VARIANT_VALUES
    exporting
      !EF_VARIANT type RALDB_VARI
      !EF_VARTEXT type RVART_VTXT
    raising
      /VCXI/CX_CKX .
  methods VARIANT_CATALOG
    importing
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
      !IF_BNAME type XUBNAME default SY-UNAME
    returning
      value(RF_VARIANT) type RALDB_VARI
    raising
      /VCXI/CX_CKX .
  methods DEFAULT_FIELDS .
  methods DELETE_VARIANT
    importing
      !IF_OVERWRITE type ABAP_BOOL default ABAP_FALSE
    changing
      !CF_VARIANT type RALDB_VARI optional
    returning
      value(RF_DELETED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SAVE_VARIANT
    raising
      /VCXI/CX_CKX .
  methods FILL_TD020
    importing
      !IF_VARIANT type RALDB_VARI
      !IF_VARTEXT type RVART_VTXT optional
      !IF_TABLENAME type TABNAME
      !IF_FIELDNAME type FIELDNAME
      !IF_CSELF type /VCXI/VKSR_REPNR optional
      !IS_SELOPT type RSDSSELOPT optional
    changing
      !CT_TD020 type YHP_IDX_TT_TD020
      !CT_TD020T type YHP_IDX_TT_TD020T optional
    raising
      /VCXI/CX_CKX .
  methods GET_VARIANT
    raising
      /VCXI/CX_CKX .
  methods GET_DYN_SEL
    raising
      /VCXI/CX_CKX .
  methods SET_FREE_SEL_TABLES
    raising
      /VCXI/CX_CKX .
  methods INIT_FREE_SEL_DATA
    raising
      /VCXI/CX_CKX .
  methods DISPLAY_FREE_SEL
    raising
      /VCXI/CX_CKX .
  methods INIT_FREE_SELECTION
    importing
      !I_CLEAR type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE_SAPLSSEL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !I_CLEAR type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods SET_PFSTATUS
    raising
      /VCXI/CX_CKX .
  methods SET_TITLE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_SEL_CHANGE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_EXECUTE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_BACK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_EXIT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
private section.

  data T_WHERE_CLAUSES type RSDS_TWHERE .
  data T_FIELDS type TY_FIELDS .
  data T_FIELDS_HIDE type TY_FIELDS .
  data F_SELECTION_ID type RSDYNSEL-SELID .
  data T_EXPRESSIONS type RSDS_TEXPR .
  data T_FIELD_RANGES type RSDS_TRANGE .
  data T_TABLES type TY_TABLES .
endclass. "YCL_HP_IDX_QRY_UI_SEL definition
class YCL_HP_IDX_QRY_UI_SEL implementation.
  method CONSTRUCTOR.

    call function 'YHP_IDX_QRY_UI_SEL_BIND'
      exporting
        IR_UI_SEL = ME
      importing
        RS_DYNP   = ME->S_DYNP.

    ME->INIT_VIS( ).
    ME->SET_FREE_SEL_TABLES( ).
    ME->DEFAULT_FIELDS( ).
    ME->INIT_FREE_SELECTION( ).

  endmethod.
  method DEFAULT_FIELDS.

    if ME->S_SEL_VIS-FMAT eq ABAP_TRUE.
      ME->T_FIELDS = value #( base ME->T_FIELDS ( TABLENAME = 'MARC'
                                                  FIELDNAME = 'MATNR' )
                                                ( TABLENAME = 'MARC'
                                                  FIELDNAME = 'WERKS' ) ).
    elseif ME->S_SEL_VIS-FSDOC eq ABAP_TRUE.
      ME->T_FIELDS = value #( base ME->T_FIELDS ( TABLENAME = 'VBAP'
                                                  FIELDNAME = 'VBELN' )
                                                ( TABLENAME = 'VBAP'
                                                  FIELDNAME = 'POSNR' )
                                                ( TABLENAME = 'VBAP'
                                                  FIELDNAME = 'MATNR' )
                                                ( TABLENAME = 'VBAP'
                                                  FIELDNAME = 'WERKS' ) ).
    endif.

  endmethod.
  method DELETE_VARIANT.

    data LF_ANSWER type C.

    data LT_TD020 type standard table of YHP_IDX_TD020.
    data LT_TD020T type standard table of YHP_IDX_TD020T.

    if CF_VARIANT is initial and
       IF_OVERWRITE eq ABAP_FALSE.
      CF_VARIANT = ME->VARIANT_CATALOG( ).
      message id 'ECATT' type 'S' number 276 with CF_VARIANT into data(LF_QUESTION).
    else.
      message id 'SELTOOL' type 'S' number 720 with CF_VARIANT into LF_QUESTION.
    endif.

    check CF_VARIANT is not initial.

    call function 'POPUP_TO_CONFIRM'
      exporting
        TEXT_QUESTION  = LF_QUESTION
        DEFAULT_BUTTON = '2'
      importing
        ANSWER         = LF_ANSWER
      exceptions
        TEXT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC is not initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    check LF_ANSWER eq '1'.

    select * from YHP_IDX_TD020 into table LT_TD020
      where BNAME   eq SY-UNAME
        and VARIANT eq CF_VARIANT.

    select * from YHP_IDX_TD020T into table LT_TD020T
      where BNAME   eq SY-UNAME
        and VARIANT eq CF_VARIANT.

    call function 'YHP_IDX_SAVE_VARIANT'
      exporting
        IT_TD020   = LT_TD020
        IT_TD020T  = LT_TD020T
        IF_DELETE  = ABAP_TRUE
      importing
        EF_DELETED = RF_DELETED
      exceptions
        others     = 1.

    if RF_DELETED eq ABAP_TRUE.
      check IF_OVERWRITE eq ABAP_FALSE.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'S'
                                            IF_MSGID = 'DB'
                                            IF_MSGNO = '618'
                                            IF_MSGV1 = CF_VARIANT ).
    else.
      check IF_OVERWRITE eq ABAP_FALSE.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'I'
                                            IF_MSGID = 'DB'
                                            IF_MSGNO = '257'
                                            IF_MSGV1 = CF_VARIANT ).
    endif.

  endmethod.
  method DISPLAY_FREE_SEL.

    check ME->F_SELECTION_ID is not initial.

    call function 'FREE_SELECTIONS_DIALOG'
      exporting
        SELECTION_ID    = ME->F_SELECTION_ID
        TITLE           = 'Selection fields'(001)
        FRAME_TEXT      = 'Selection fields'(001)
        STATUS          = 1
        TREE_VISIBLE    = ABAP_TRUE
        AS_SUBSCREEN    = ABAP_TRUE
        NO_FRAME        = ABAP_FALSE
      importing
        WHERE_CLAUSES   = ME->T_WHERE_CLAUSES
        EXPRESSIONS     = ME->T_EXPRESSIONS
        FIELD_RANGES    = ME->T_FIELD_RANGES
      tables
        FIELDS_TAB      = ME->T_FIELDS
      exceptions
        INTERNAL_ERROR  = 1
        NO_ACTION       = 2
        SELID_NOT_FOUND = 3
        ILLEGAL_STATUS  = 4
        others          = 5.
    if SY-SUBRC is not initial and
       SY-SUBRC ne 2.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method DO_FREE.
  endmethod.
  method DO_MODIFY_SCREEN.
  endmethod.
  method DO_PBO.

    try.

        ME->SET_PFSTATUS( ).
        ME->SET_TITLE( ).

        call function 'YHP_IDX_QRY_UI_SEL_SET_DYNS'
          exporting
            IF_STATUS = ABAP_TRUE.

        move 'SAPLYHP_IDX_QRY_UI_SEL' to ME->S_SEL_VIS-REPID.
        move '2000' to ME->S_SEL_VIS-DYNNR.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method DO_UPDATE_SEL_VIS.

*** Update Selection Vis. Flag Material
    if IS_SEL_VIS-FMAT ne ME->S_SEL_VIS-FMAT.
      move IS_SEL_VIS-FMAT to ME->S_SEL_VIS-FMAT.
    endif.

*** Update Selection Vis. Flag Sales Document
    if IS_SEL_VIS-FSDOC ne ME->S_SEL_VIS-FSDOC.
      move IS_SEL_VIS-FSDOC to ME->S_SEL_VIS-FSDOC.
    endif.

  endmethod.
  method DO_USER_COMMAND.

    try.
        case CF_UCOMM.
          when YCL_HP_IDX_QRY_UI_SEL=>C_UC_BACK.
            ME->HANDLE_UC_BACK( ).
          when YCL_HP_IDX_QRY_UI_SEL=>C_UC_EXIT.
            ME->HANDLE_UC_EXIT( ).
          when YCL_HP_IDX_QRY_UI_SEL=>C_UC_CANCEL.
            ME->HANDLE_UC_CANCEL( ).
          when YCL_HP_IDX_QRY_UI_SEL=>C_UC_SEL_CHANGE.
            ME->HANDLE_UC_SEL_CHANGE( ).
          when YCL_HP_IDX_QRY_UI_SEL=>C_UC_EXECUTE.
            ME->HANDLE_UC_EXECUTE( ).
          when YCL_HP_IDX_QRY_UI_SEL=>C_UC_GET.
            ME->GET_VARIANT( ).
          when YCL_HP_IDX_QRY_UI_SEL=>C_UC_SAVE.
            ME->SAVE_VARIANT( ).
          when YCL_HP_IDX_QRY_UI_SEL=>C_UC_DELETE.
            ME->DELETE_VARIANT( ).
        endcase.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

    clear CF_UCOMM.

  endmethod.
  method FILL_TD020.

    CT_TD020 = value #( base CT_TD020 ( BNAME     = SY-UNAME
                                        VARIANT   = IF_VARIANT
                                        TABLENAME = IF_TABLENAME
                                        FIELDNAME = IF_FIELDNAME
                                        CSELF     = IF_CSELF
                                        FMAT      = ME->S_SEL_VIS-FMAT
                                        FSDOC     = ME->S_SEL_VIS-FSDOC
                                        VSIGN     = IS_SELOPT-SIGN
                                        VOPTION   = IS_SELOPT-OPTION
                                        VLOW      = IS_SELOPT-LOW
                                        VHIGH     = IS_SELOPT-HIGH ) ).

    check IF_VARTEXT is supplied.
    CT_TD020T = value #( base CT_TD020T ( BNAME   = SY-UNAME
                                          VARIANT = IF_VARIANT
                                          SPRAS   = SY-LANGU
                                          VTEXT   = IF_VARTEXT ) ).

  endmethod.
  method GET_DYN_SEL.

    types:
      begin of EXP_PARS,
        TWHERE type ABAP_BOOL,
        TEXPR  type ABAP_BOOL,
        TRANGE type ABAP_BOOL,
      end of EXP_PARS.

    data: LS_EXPORT_X type EXP_PARS.

*** get atual free selection fields
    perform FILL_P_FIELDS in program SAPLSSEL tables ME->T_FIELDS.

    LS_EXPORT_X-TWHERE = ABAP_TRUE.
    LS_EXPORT_X-TEXPR  = ABAP_TRUE.
    LS_EXPORT_X-TRANGE = ABAP_TRUE.

*** get export parameters from free_selections_dialog
    perform BUILD_EXP_PARS in program SAPLSSEL tables   ME->T_FIELDS
                                               changing ME->T_WHERE_CLAUSES
                                                        ME->T_EXPRESSIONS
                                                        ME->T_FIELD_RANGES
                                                        LS_EXPORT_X.

  endmethod.
  method GET_VARIANT.

    data LT_FRANGE_T type standard table of RSDS_FRANGE.
    data LT_SELOPT_T type standard table of RSDSSELOPT.

    data(LF_VARIANT) = ME->VARIANT_CATALOG( ).
    check LF_VARIANT is not initial.

    clear ME->F_SELECTION_ID.
    refresh ME->T_FIELDS_HIDE.
    refresh ME->T_FIELD_RANGES.
    refresh ME->T_EXPRESSIONS.
    refresh ME->T_WHERE_CLAUSES.
    refresh ME->T_FIELDS.

    select * from YHP_IDX_TD020 into table @data(LT_TD020)
       where BNAME   eq @SY-UNAME
         and VARIANT eq @LF_VARIANT.
    check LT_TD020 is not initial.

    data(LT_TD020_V) = LT_TD020.
    delete LT_TD020_V where CSELF is initial.

    sort LT_TD020_V by TABLENAME ascending FIELDNAME ascending CSELF ascending.

    loop at LT_TD020_V into data(LS_TD020_AUX).
      data(LS_TD020) = LS_TD020_AUX.

      LT_SELOPT_T = value #( base LT_SELOPT_T ( SIGN   = LS_TD020-VSIGN
                                                OPTION = LS_TD020-VOPTION
                                                LOW    = LS_TD020-VLOW
                                                HIGH   = LS_TD020-VHIGH ) ).

      at end of FIELDNAME.
        LT_FRANGE_T = value #( base LT_FRANGE_T ( FIELDNAME = LS_TD020-FIELDNAME
                                                  SELOPT_T  = LT_SELOPT_T ) ).
        refresh LT_SELOPT_T.

        ME->T_FIELDS = value #( base ME->T_FIELDS ( TABLENAME = LS_TD020-TABLENAME
                                                    FIELDNAME = LS_TD020-FIELDNAME ) ).
      endat.

      at end of TABLENAME.
        ME->T_FIELD_RANGES = value #( base ME->T_FIELD_RANGES ( TABLENAME = LS_TD020-TABLENAME
                                                                FRANGE_T  = LT_FRANGE_T ) ).
        refresh LT_FRANGE_T.
      endat.

    endloop.

    loop at LT_TD020 into LS_TD020
      where CSELF is initial.
      ME->T_FIELDS = value #( base ME->T_FIELDS ( TABLENAME = LS_TD020-TABLENAME
                                                  FIELDNAME = LS_TD020-FIELDNAME ) ).
    endloop.

    sort ME->T_FIELDS by TABLENAME ascending.

    ME->S_SEL_VIS-FMAT  = LT_TD020[ 1 ]-FMAT.
    ME->S_SEL_VIS-FSDOC = LT_TD020[ 1 ]-FSDOC.

    call function 'FREE_SELECTIONS_RANGE_2_EX'
      exporting
        FIELD_RANGES = ME->T_FIELD_RANGES
      importing
        EXPRESSIONS  = ME->T_EXPRESSIONS
      exceptions
        others       = 1.

    call function 'FREE_SELECTIONS_EX_2_WHERE'
      exporting
        EXPRESSIONS              = ME->T_EXPRESSIONS
      importing
        WHERE_CLAUSES            = ME->T_WHERE_CLAUSES
      exceptions
        EXPRESSION_NOT_SUPPORTED = 1
        others                   = 2.

    ME->SET_FREE_SEL_TABLES( ).
    ME->INIT_FREE_SELECTION( ).

  endmethod.
  method HANDLE_UC_BACK.

    ME->DO_FREE( ).
    leave to screen 0.

  endmethod.
  method HANDLE_UC_CANCEL.

    ME->DO_FREE( ).
    leave to screen 0.

  endmethod.
  method HANDLE_UC_EXECUTE.

    ME->GET_DYN_SEL( ).

    try.
        create object ME->R_QUERY
          exporting
            IT_FIELDS = ME->T_FIELDS
            IT_RANGES = ME->T_FIELD_RANGES
            IT_WHERES = ME->T_WHERE_CLAUSES.
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
    endtry.

    if ME->R_QUERY is bound.

      if ME->S_SEL_VIS-FMAT eq ABAP_TRUE.
        data(LF_SELTY) = YCL_HP_IDX_QUERY=>C_MAT.
      elseif ME->S_SEL_VIS-FSDOC eq ABAP_TRUE.
        LF_SELTY = YCL_HP_IDX_QUERY=>C_SDOC.
      endif.

      ME->R_QUERY->QUERY( IF_SELTY = LF_SELTY ).
    endif.

    move LF_SELTY to ME->R_QUERY->F_SELTY.

    if ME->R_QUERY is bound.
      YCL_HP_IDX_QRY_UI_RES=>START_UI( IR_QUERY = ME->R_QUERY ).
    endif.

    ME->INIT_FREE_SELECTION( ).

  endmethod.
  method HANDLE_UC_EXIT.

    ME->DO_FREE( ).
    leave to screen 0.

  endmethod.
  method HANDLE_UC_SEL_CHANGE.

    clear ME->F_SELECTION_ID.
    refresh ME->T_TABLES.
    refresh ME->T_FIELDS_HIDE.
    refresh ME->T_FIELDS.
    refresh ME->T_FIELD_RANGES.
    refresh ME->T_EXPRESSIONS.
    refresh ME->T_WHERE_CLAUSES.

    ME->SET_FREE_SEL_TABLES( ).
    ME->DEFAULT_FIELDS( ).
    ME->INIT_FREE_SELECTION( ).

  endmethod.
  method INIT_FREE_SEL_DATA.

    ME->T_TABLES = value #( ( PRIM_TAB = 'YHP_IDX_TD010' )
                            ( PRIM_TAB = 'YHP_IDX_TD100' )
                            ( PRIM_TAB = 'YHP_IDX_TD101' )
                            ( PRIM_TAB = 'YHP_IDX_TD110' )
                            ( PRIM_TAB = 'YHP_IDX_TD111' )
                            ( PRIM_TAB = 'YHP_IDX_TD130' )
                            ( PRIM_TAB = 'YHP_IDX_TD131' )
                            ( PRIM_TAB = 'YHP_IDX_TD140' )
                            ( PRIM_TAB = 'YHP_IDX_TD150' )
                            ( PRIM_TAB = 'YHP_IDX_TD151' )
                            ( PRIM_TAB = 'YHP_IDX_TD160' )
                            ( PRIM_TAB = 'YHP_IDX_TD310' ) ).

  endmethod.
  method INIT_FREE_SELECTION.

    ME->INIT_TREE_SAPLSSEL( ).

    call function 'FREE_SELECTIONS_INIT'
      exporting
        KIND                     = 'T'
        EXPRESSIONS              = ME->T_EXPRESSIONS
      importing
        SELECTION_ID             = ME->F_SELECTION_ID
        WHERE_CLAUSES            = ME->T_WHERE_CLAUSES
        FIELD_RANGES             = ME->T_FIELD_RANGES
      tables
        TABLES_TAB               = ME->T_TABLES
        TABFIELDS_NOT_DISPLAY    = ME->T_FIELDS_HIDE
        FIELDS_TAB               = ME->T_FIELDS
      exceptions
        FIELDS_INCOMPLETE        = 1
        FIELDS_NO_JOIN           = 2
        FIELD_NOT_FOUND          = 3
        NO_TABLES                = 4
        TABLE_NOT_FOUND          = 5
        EXPRESSION_NOT_SUPPORTED = 6
        INCORRECT_EXPRESSION     = 7
        ILLEGAL_KIND             = 8
        AREA_NOT_FOUND           = 9
        INCONSISTENT_AREA        = 10
        KIND_F_NO_FIELDS_LEFT    = 11
        KIND_F_NO_FIELDS         = 12
        TOO_MANY_FIELDS          = 13
        DUP_FIELD                = 14
        FIELD_NO_TYPE            = 15
        FIELD_ILL_TYPE           = 16
        DUP_EVENT_FIELD          = 17
        NODE_NOT_IN_LDB          = 18
        AREA_NO_FIELD            = 19
        others                   = 20.

    ME->DISPLAY_FREE_SEL( ).

  endmethod.
  method INIT_TREE_SAPLSSEL.

    field-symbols <LR_TREE> type ref to  CL_GUI_SIMPLE_TREE.
    field-symbols <LF_TREE_ID> type RSDYNSEL-SELID.

    assign ('(SAPLSSEL)TREE') to <LR_TREE>.
    if SY-SUBRC is initial and
       <LR_TREE> is bound.
      <LR_TREE>->FREE( ).
      free <LR_TREE>.
      unassign <LR_TREE>.
    endif.

    assign ('(SAPLSSEL)TREE_ID') to <LF_TREE_ID>.
    if SY-SUBRC is initial.
      clear <LF_TREE_ID>.
      unassign <LF_TREE_ID>.
      clear ME->F_SELECTION_ID.
    endif.

  endmethod.
  method INIT_VIS.

    move ABAP_TRUE  to ME->S_SEL_VIS-FMAT.
    move ABAP_FALSE to ME->S_SEL_VIS-FSDOC.

  endmethod.
  method POPUP_VARIANT_VALUES.

    data LT_VARIANT type standard table of SVAL.

    LT_VARIANT = value #( ( TABNAME   = 'RSVAR'
                            FIELDNAME = 'VARIANT'
                            FIELD_OBL = ABAP_TRUE )

                          ( TABNAME   = 'VARIT'
                            FIELDNAME = 'VTEXT' )   ).

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Save Variant'
      tables
        FIELDS          = LT_VARIANT
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC is not initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    check LT_VARIANT is not initial.
    EF_VARIANT = LT_VARIANT[ FIELDNAME = 'VARIANT' ]-VALUE.
    EF_VARTEXT = LT_VARIANT[ FIELDNAME = 'VTEXT' ]-VALUE.

  endmethod.
  method SAVE_VARIANT.

    data LF_SAVED type ABAP_BOOL.
    data LF_CSELF  type /VCXI/VKSR_REPNR.

    data LT_TD020 type standard table of YHP_IDX_TD020.
    data LT_TD020T type standard table of YHP_IDX_TD020T.

    ME->POPUP_VARIANT_VALUES( importing EF_VARIANT = data(LF_VARIANT)
                                        EF_VARTEXT = data(LF_VARTEXT) ).
    check LF_VARIANT is not initial.

    select count( * ) from YHP_IDX_TD020
      where BNAME   eq SY-UNAME
        and VARIANT eq LF_VARIANT.
    if SY-SUBRC is initial.
      data(LF_DELETED) = ME->DELETE_VARIANT( exporting IF_OVERWRITE = ABAP_TRUE
                                             changing CF_VARIANT = LF_VARIANT ).
      data(LF_EXISTS) = cond #( when LF_DELETED eq ABAP_TRUE then ABAP_FALSE else ABAP_TRUE ).
    endif.

    check LF_EXISTS eq ABAP_FALSE.

    ME->GET_DYN_SEL( ).

    loop at ME->T_FIELD_RANGES into data(LS_FIELD_RANGES).

      loop at LS_FIELD_RANGES-FRANGE_T into data(LS_FRANGE).
        clear LF_CSELF.

        if LS_FRANGE-SELOPT_T is initial.
          ME->FILL_TD020( exporting IF_VARIANT   = LF_VARIANT
                                    IF_VARTEXT   = LF_VARTEXT
                                    IF_TABLENAME = LS_FIELD_RANGES-TABLENAME
                                    IF_FIELDNAME = LS_FRANGE-FIELDNAME
                          changing CT_TD020  = LT_TD020
                                   CT_TD020T = LT_TD020T ).
        endif.

        loop at LS_FRANGE-SELOPT_T into data(LS_SELOPT).
          LF_CSELF = LF_CSELF + 1.
          ME->FILL_TD020( exporting IF_VARIANT   = LF_VARIANT
                                    IF_VARTEXT   = LF_VARTEXT
                                    IF_TABLENAME = LS_FIELD_RANGES-TABLENAME
                                    IF_FIELDNAME = LS_FRANGE-FIELDNAME
                                    IF_CSELF     = LF_CSELF
                                    IS_SELOPT    = LS_SELOPT
                          changing CT_TD020  = LT_TD020
                                   CT_TD020T = LT_TD020T ).
        endloop.

      endloop.

    endloop.

    check LT_TD020 is not initial.
    call function 'YHP_IDX_SAVE_VARIANT'
      exporting
        IT_TD020  = LT_TD020
        IT_TD020T = LT_TD020T
      importing
        EF_SAVED  = LF_SAVED
      exceptions
        others    = 1.

    if LF_SAVED eq ABAP_TRUE.
      if LF_DELETED eq ABAP_FALSE.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'S'
                                              IF_MSGID = 'DB'
                                              IF_MSGNO = '617'
                                              IF_MSGV1 = LF_VARIANT ).
      else.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'S'
                                              IF_MSGID = 'DB'
                                              IF_MSGNO = '258'
                                              IF_MSGV1 = LF_VARIANT ).
      endif.
    else.
      if LF_DELETED eq ABAP_FALSE.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'I'
                                              IF_MSGID = 'DB'
                                              IF_MSGNO = '254'
                                              IF_MSGV1 = LF_VARIANT ).
      else.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'I'
                                              IF_MSGID = 'DB'
                                              IF_MSGNO = '255'
                                              IF_MSGV1 = LF_VARIANT ).
      endif.
    endif.

  endmethod.
method SET_FREE_SEL_TABLES.

  ME->INIT_FREE_SEL_DATA( ).

***----------------------------------------------------------------------------
*** add tables depending on user selection
  if ME->S_SEL_VIS-FMAT eq ABAP_TRUE.
    ME->T_TABLES = value #( base ME->T_TABLES ( PRIM_TAB = 'MARA' )
                                              ( PRIM_TAB = 'MARC' ) ).
  elseif ME->S_SEL_VIS-FSDOC eq ABAP_TRUE.
    ME->T_TABLES = value #( base ME->T_TABLES ( PRIM_TAB = 'VBAK' )
                                              ( PRIM_TAB = 'VBAP' ) ).
  endif.

endmethod.
  method SET_PFSTATUS.

    data LT_EXCL_FCODE type STATUS_EXCL_FCODE_TT.

    select count( * ) from YHP_IDX_TD020
      where BNAME eq SY-UNAME.
    if SY-SUBRC is not initial.
      LT_EXCL_FCODE = value #( ( 'GET' )
                               ( 'DELETE' ) ).
    endif.

*** Set PF-Status
    set pf-status '0100' of program ME->S_DYNP-REPID excluding LT_EXCL_FCODE.

  endmethod.
  method SET_TITLE.

*** Set GUI Title
    set titlebar '0100' of program ME->S_DYNP-REPID.

  endmethod.
  method START_UI.

    data LR_UI_SEL type ref to YCL_HP_IDX_QRY_UI_SEL.

*** Create Instance of UI
    if I_CLEAR is initial.
      create object LR_UI_SEL.
    else.
      create object LR_UI_SEL
        exporting
          I_CLEAR = I_CLEAR.
    endif.

*** Call Screen
    call function 'YHP_IDX_QRY_UI_SEL_START'.

*** No longer mark as Dynamic Selection Screen
    call function 'YHP_IDX_QRY_UI_SEL_SET_DYNS'
      exporting
        IF_STATUS = ABAP_FALSE.

  endmethod.
  method VARIANT_CATALOG.

    data LT_RETURN type standard table of DDSHRETVAL.

    select distinct YHP_IDX_TD020~VARIANT, YHP_IDX_TD020T~VTEXT
      from YHP_IDX_TD020
      inner join YHP_IDX_TD020T
        on YHP_IDX_TD020~BNAME   = YHP_IDX_TD020T~BNAME
       and YHP_IDX_TD020~VARIANT = YHP_IDX_TD020T~VARIANT
      into table @data(LT_TD020)
      where YHP_IDX_TD020~BNAME  eq @IF_BNAME
        and YHP_IDX_TD020T~SPRAS eq @SY-LANGU.
    if LT_TD020 is initial.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'I'
                                            IF_MSGID = 'DB'
                                            IF_MSGNO = '030'
                                            IF_MSGV1 = SY-CPROG ).
    endif.

    check LT_TD020 is not initial.
    call function 'F4IF_INT_TABLE_VALUE_REQUEST'
      exporting
        RETFIELD        = 'VARIANT'
        VALUE_ORG       = 'S'
        DISPLAY         = IF_DISPLAY
      tables
        VALUE_TAB       = LT_TD020
        RETURN_TAB      = LT_RETURN
      exceptions
        PARAMETER_ERROR = 1
        NO_VALUES_FOUND = 2
        others          = 3.
    if SY-SUBRC is not initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    check LT_RETURN is not initial.
    RF_VARIANT = LT_RETURN[ 1 ]-FIELDVAL.

  endmethod.
