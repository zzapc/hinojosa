
class YCL_HP_SVCS_UI_FDMDL_AFG definition
  public
  inheriting from ZCL_VCXI_P3SS_UI_FDMDL
  final
  create public .

public section.

  data S_HP_FDMDL_VIS type YHP_SVCS_S_FDMDL_AFG_VIS .

  methods CALL_SHLP_MRP
    returning
      value(RF_MRP) type YHP_SVCS_MRP
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
protected section.

  methods INIT_VIS
    redefinition .
private section.

  data R_GRID_JOINT type ref to ZCL_VCXI_PXSS_GRID_JOINT .
endclass. "YCL_HP_SVCS_UI_FDMDL_AFG definition
class YCL_HP_SVCS_UI_FDMDL_AFG implementation.
  method ACTIVATE.

    data: LT_BL_FDMDL_XPART type ZVCXI_PXSS_TT_BL_FDMDL.


    SUPER->ACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Bind UI to Dynpro
    call function 'YHP_SVCS_UI_FDMDL_AFG_BIND'
      exporting
        IR_UI_FDMDL   = ME
      importing
        ES_DYNP       = ME->S_DYNP
        ES_DYNP_BLANK = ME->S_DYNP_BLANK.

**** Create Grid for Joint
    create object ME->R_GRID_JOINT
      exporting
        IR_GATE        = ME->R_GATE
        IR_UIGATE      = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_JOINT'
        IF_APPL_EVENTS    = ME->F_APPL_EVENTS.

  endmethod.
  method CALL_SHLP_MRP.

    data(LF_DISPLAY) = switch #( ME->R_GATE->IS_LOCKED( ) when ABAP_TRUE then ABAP_FALSE
                                                                         else ABAP_TRUE ).

    try.
        check ME->R_BL_FDMDL->T_GATE_OUT is not initial.
        data(LS_GATE_OUT) = ME->R_BL_FDMDL->T_GATE_OUT[ 1 ].
        if LS_GATE_OUT->R_CLSPR is bound.
          data(LF_WERKS) = cast ZCL_VCXI_PXSS_PR_XFG( LS_GATE_OUT->R_CLSPR )->GET_WERKS( ).
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.

    RF_MRP = YCL_HP_SVCS_SHLP_MRP=>CALL_SHLP( IF_DISPLAY = LF_DISPLAY
                                              IF_WERKS   = LF_WERKS ).

  endmethod.
  method INIT_VIS.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    field-symbols: <S_DATA> type ANY.


    free: ME->S_HP_FDMDL_VIS.
    check ME->R_PR_FASTD is bound.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = ME->R_BL_FDMDL ).

*** Define Gates related to Parts that should be excluded
    LT_GATE_EXCLUDE = ME->GET_GATE_EXCLUDE( IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Fill VIS Structure based on Fast Data Integration Information
    loop at LT_FASTD_XCOMP into LS_FASTD_XCOMP.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP-R_GATE ] ).

      loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA where R_DATA is bound.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP_DATA-R_GATE ] ).
        assign LS_FASTD_XCOMP_DATA-R_DATA->* to <S_DATA>.

***     Move corresponding fields, but except fields defined by Component Data
        YCL_HP_X_SRV_DATA=>MOVE_CORRESPONDING_EXCEPT( exporting IS_SOURCE  = <S_DATA>
                                                                IT_EXCLUDE = LS_FASTD_XCOMP_DATA-T_FDMEX
                                                      changing  CS_TARGET  = ME->S_HP_FDMDL_VIS ).

      endloop.
    endloop.

    move ME->S_HP_FDMDL_VIS-S_FDMDL_VIS to ME->S_FDMDL_VIS.

  endmethod.
