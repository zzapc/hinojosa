
class YCL_HP_SVCS_PR_CSTEP_DCUT definition
  public
  inheriting from ZCL_VCXI_P1SS_PR_CSTEP_DCUT
  create public .

public section.

  constants C_PARID_CHANEL type /VCXI/VKS_PARID value 'YHP_SVC_CHANEL' ##NO_TEXT.
  constants C_PARID_ALTTO1 type /VCXI/VKS_PARID value 'YHP_SVC_ALTTO1' ##NO_TEXT.
  constants C_PARID_ALTTO2 type /VCXI/VKS_PARID value 'YHP_SVC_ALTTO2' ##NO_TEXT.
  constants C_PARID_ALTTO1D type /VCXI/VKS_PARID value 'YHP_SVC_ALTTO1D' ##NO_TEXT.
  constants C_PARID_ALTTO2D type /VCXI/VKS_PARID value 'YHP_SVC_ALTTO2D' ##NO_TEXT.

  methods GET_ALTTO1
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_ALTTO1) type YRF_TPR_ALTO1
    raising
      /VCXI/CX_CKX .
  methods GET_ALTTO2
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_ALTTO2) type YRF_TPR_ALTO2
    raising
      /VCXI/CX_CKX .
  methods GET_CHANEL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_CHANEL) type YHP_SVCS_CHANEL
    raising
      /VCXI/CX_CKX .
  methods SET_ALTTO1
    importing
      !IF_ALTTO1 type YRF_TPR_ALTO1 optional
      !IF_SETBY type /VCXI/VKSR_SETBY optional
    raising
      /VCXI/CX_CKX .
  methods SET_ALTTO2
    importing
      !IF_ALTTO2 type YRF_TPR_ALTO2 optional
      !IF_SETBY type /VCXI/VKSR_SETBY optional
    raising
      /VCXI/CX_CKX .
  methods SET_CHANEL
    importing
      !IF_CHANEL type YHP_SVCS_CHANEL optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_ALTTO1D
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_ALTTO1D) type YHP_SVCS_ALTTO1D
    raising
      /VCXI/CX_CKX .
  methods GET_ALTTO2D
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_ALTTO2D) type YHP_SVCS_ALTTO2D
    raising
      /VCXI/CX_CKX .
  methods SET_ALTTO1D
    importing
      !IF_ALTTO1D type YHP_SVCS_ALTTO1D optional
      !IF_SETBY type /VCXI/VKSR_SETBY optional
    raising
      /VCXI/CX_CKX .
  methods SET_ALTTO2D
    importing
      !IF_ALTTO2D type YHP_SVCS_ALTTO2D optional
      !IF_SETBY type /VCXI/VKSR_SETBY optional
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_TOOL type /VCXI/VKSC_IEVNT value 'INIT_TOOL' ##NO_TEXT.
  constants C_IEVNT_O_CHANEL_CHANGED type /VCXI/VKSC_IEVNT value 'CHANEL_CHANGED' ##NO_TEXT.

  methods HANDLE_INIT_TOOL
    raising
      /VCXI/CX_CKX .
  methods CREATE_TOOL
    returning
      value(RR_GATE_TOOL) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_TD100
    importing
      !IF_MATNR type MATNR
      !IF_REFRESH_REQ type ABAP_BOOL optional
    exporting
      !ES_TD100 type YRF_TPR_TD100 .
private section.
endclass. "YCL_HP_SVCS_PR_CSTEP_DCUT definition
class YCL_HP_SVCS_PR_CSTEP_DCUT implementation.
  method CREATE_TOOL.

    data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.
    data:  LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

*** Get Tool Handling Provider
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = YCL_HP_SVCS_PR_TOOL=>C_IPRVT_HP_TOOL
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    if LINES( LT_PRVDR_DEF ) ne 1.
*** Provider &1 is not available for &2.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCS'
          IF_MSGNO = '010'
          IF_MSGV1 = YCL_HP_SVCS_PR_TOOL=>C_IPRVT_HP_TOOL
          IF_MSGV2 = ME->R_GATE->F_ID ).
    endif.

    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Create Tool Handling
    RR_GATE_TOOL = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).

    if RR_GATE_TOOL              is bound     and
       RR_GATE_TOOL->IS_INUSE( ) ne ABAP_TRUE.
      RR_GATE_TOOL->SET_INUSE( IF_INUSE = ABAP_TRUE ).
    endif.

  endmethod.
  method GET_ALTTO1.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_TD100 type YRF_TPR_TD100,
          LS_MAKT  type MAKT.
    data: LR_CUST_TOOL_DCT type ref to ZCL_VCXI_PXSS_CUST_TOOL_DCT.
    data: LF_DESCR type /VCXI/CKX_DESCR,
          LF_SETBY type /VCXI/VKSR_SETBY,
          LF_DCTTN type ZVCXI_PXS_DCTTN,
          LF_RELEA type ABAP_BOOL.

    try.
        call method ZIF_VCXI_PXSS_DCUT~GET_DCTTN
          importing
            ER_CUST_TOOL_DCT = LR_CUST_TOOL_DCT
            EF_DESCR         = LF_DESCR
            EF_SETBY         = LF_SETBY
            EF_RELEA         = LF_RELEA
          receiving
            RF_DCTTN         = LF_DCTTN.
      catch /VCXI/CX_CKX .
    endtry.

    if LF_DCTTN is not initial.
      call method ME->GET_TD100
        exporting
          IF_MATNR = LF_DCTTN
        importing
          ES_TD100 = LS_TD100.

      if LS_TD100 is not initial.

        LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ALTTO1 ).
        move LS_TD100-ALTO1 to RF_ALTTO1.
        move 'USER' to EF_SETBY.
      else.

        LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ALTTO1 ).
        move LS_PARAM-ATWRT to RF_ALTTO1.
        move LS_PARAM-SETBY to EF_SETBY.

      endif.
    else.

      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ALTTO1 ).
      move LS_PARAM-ATWRT to RF_ALTTO1.
      move LS_PARAM-SETBY to EF_SETBY.
    endif.

    if EF_DESCR is requested.
***   Identify Description
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR  = RF_ALTTO1
          SPRAS  = SY-LANGU
        importing
          WMAKT  = LS_MAKT
        exceptions
          others = 0.
      EF_DESCR = LS_MAKT-MAKTX.
    endif.



  endmethod.
  method GET_ALTTO1D.

    data: LF_DESCR type /VCXI/CKX_DESCR.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    if ME->GET_ALTTO1( importing EF_DESCR = LF_DESCR ) is initial.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ALTTO1D ).
      move LS_PARAM-STRNG to RF_ALTTO1D.
      move LS_PARAM-SETBY to EF_SETBY.
    else.
      RF_ALTTO1D = LF_DESCR.
    endif.

  endmethod.
  method GET_ALTTO2.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_TD100 type YRF_TPR_TD100,
          LS_MAKT  type MAKT.
    data: LR_CUST_TOOL_DCT type ref to ZCL_VCXI_PXSS_CUST_TOOL_DCT.
    data: LF_DESCR type /VCXI/CKX_DESCR,
          LF_SETBY type /VCXI/VKSR_SETBY,
          LF_DCTTN type ZVCXI_PXS_DCTTN,
          LF_RELEA type ABAP_BOOL.

    try.
        call method ZIF_VCXI_PXSS_DCUT~GET_DCTTN
          importing
            ER_CUST_TOOL_DCT = LR_CUST_TOOL_DCT
            EF_DESCR         = LF_DESCR
            EF_SETBY         = LF_SETBY
            EF_RELEA         = LF_RELEA
          receiving
            RF_DCTTN         = LF_DCTTN.
      catch /VCXI/CX_CKX .
    endtry.

    if LF_DCTTN is not initial.
      call method ME->GET_TD100
        exporting
          IF_MATNR = LF_DCTTN
        importing
          ES_TD100 = LS_TD100.

      if LS_TD100 is not initial.
        move LS_TD100-ALTO2 to RF_ALTTO2.
        move 'USER' to EF_SETBY.
      else.
        LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ALTTO2 ).
        move LS_PARAM-ATWRT to RF_ALTTO2.
        move LS_PARAM-SETBY to EF_SETBY.
      endif.
    else.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ALTTO2 ).
      move LS_PARAM-ATWRT to RF_ALTTO2.
      move LS_PARAM-SETBY to EF_SETBY.
    endif.

    if EF_DESCR is requested.
***   Identify Description
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR  = RF_ALTTO2
          SPRAS  = SY-LANGU
        importing
          WMAKT  = LS_MAKT
        exceptions
          others = 0.
      EF_DESCR = LS_MAKT-MAKTX.
    endif.

  endmethod.
  method GET_ALTTO2D.

    data: LF_DESCR type /VCXI/CKX_DESCR.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    if ME->GET_ALTTO2( importing EF_DESCR = LF_DESCR ) is initial.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ALTTO2D ).
      move LS_PARAM-STRNG to RF_ALTTO2D.
      move LS_PARAM-SETBY to EF_SETBY.
    else.
      RF_ALTTO2D = LF_DESCR.
    endif.

  endmethod.
  method GET_CHANEL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CHANEL  ).
    move LS_PARAM-ATWRT to RF_CHANEL.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TD100.

     data: LF_CUOBJ      type  CUOBJ,
          LF_FIELD      type  C length 5,
          LF_FIELD_UOM  type  C length 9,
          LF_FIELD_CURR type  C length 10,
          LF_ATINN      type  C length 10,
          LF_PACKED     type  P,
          LF_DATS       type  CAWN-ATWRT,
          LF_MKAPV      type MLGN_MKAPV,
          LF_TDOBNAME   type TDOBNAME.
    data: LS_MARD  type MARD,
          LS_THEAD type THEAD.
    data: LT_TLINE                 type standard table of TLINE.
    data: LT_CONF_OUT              type IBCO2_INSTANCE_TAB2.
    data: LO_TOOL_LOCATION_MANAGER type ref to ZCL_WM_TOOLS_LOCATION_MANAGER,
          LO_EXCEPTION             type ref to ZCX_WM_EXCEPTION.

    ES_TD100-MANDT = SY-MANDT.
    ES_TD100-MATNR = IF_MATNR.
    "ES_TD100-WERKS = IF_WERKS.

*** Get CUOBJ for Tool
    select single CUOBJ from MARC
    into LF_CUOBJ
    where MATNR eq IF_MATNR.
    "and WERKS eq IF_WERKS.

*** check if force refresh is required
    if IF_REFRESH_REQ eq ABAP_TRUE.
      call function 'CUCB_INITIALIZER'.
    endif.

*** Get Configuration
    check LF_CUOBJ is not initial.
    call function 'CUCB_GET_CONFIGURATION'
      exporting
        INSTANCE                     = LF_CUOBJ
      importing
        CONFIGURATION                = LT_CONF_OUT
      exceptions
        INVALID_INPUT                = 1
        INVALID_INSTANCE             = 2
        INSTANCE_IS_A_CLASSIFICATION = 3
        others                       = 4.

    if SY-SUBRC <> 0.
*   Implement suitable error handling here
    endif.

    loop at LT_CONF_OUT into data(LS_CONF_OUT).
***   Select Unit of Measue
      select * from CABN for all entries in @LS_CONF_OUT-VALUES
      where ATINN eq @LS_CONF_OUT-VALUES-ATINN
      into table @data(LT_CABN).

      loop at LS_CONF_OUT-VALUES into data(LS_VALUE).
***   Now we need a Mapping between LOVC and TD100
        call function 'CONVERSION_EXIT_ATINN_OUTPUT'
          exporting
            INPUT  = LS_VALUE-ATINN
          importing
            OUTPUT = LF_ATINN.


        LF_FIELD = LF_ATINN+3(5).
***   Now special Logik for some fields.
        case LF_ATINN.
            " Additional text - special handling see below
          when 'HP_COMAD'.
            continue.
            "Tool Order
          when 'HP_TLORD'.
            move 'ORDTO' to LF_FIELD.
            "Sales Order Control
          when 'HP_SOCTR'.
            move 'SEPAR' to LF_FIELD.
            "Estimated Cost
          when 'HP_ETCST'.
            move 'ESTCO' to LF_FIELD.
            "Tool Processing Cost
          when 'HP_TPCST'.
            move 'TPCST' to LF_FIELD.
            "Mark Up
          when 'HP_MRKUP'.
            move 'MAKUP' to LF_FIELD.
            "Tool Price
          when 'HP_TLPRC'.
            move 'TOPRI' to LF_FIELD.
            "Tool Covered by Customer
          when 'HP_TLCCU'.
            move 'CUSPE' to LF_FIELD.
          when 'HP_CSPRC'.
            move 'CSEPR' to LF_FIELD.
            "Final Selling Price
          when 'HP_FSPRC'.
            move 'FSEPR' to LF_FIELD.
            "Final purchasing Price
          when 'HP_FPPRC'.
            move 'PRIFP' to LF_FIELD.
            "Number of Ups (Total)
          when 'HP_NOUTT'.
            move 'NOUPT' to LF_FIELD.
            "Die Cut Type
          when 'HP_TDCUT'.
            move 'TDCUT' to LF_FIELD.
            "Number of Ups Width
          when 'HP_NOUTW'.
            move 'NOUPW' to LF_FIELD.
            "Number of Ups Length
          when 'HP_NOUTL'.
            move 'NOUPL' to LF_FIELD.
            "Net Sheet Width
          when 'HP_SHTNW'.
            move 'SHTNW' to LF_FIELD.
            "Net Sheet Length
          when 'HP_SHTNL'.
            move 'SHTNL' to LF_FIELD.
            "Tool Life Time
          when 'HP_TLLTI'.
            move 'LTITO' to LF_FIELD.
            "Cut Out Waste Area Area
          when 'HP_COWAR'.
            move 'ACOWA' to LF_FIELD.
            "Sheet Direction
          when 'HP_SHTDI'.
            move 'SHTDI' to LF_FIELD.
            "Flute
          when 'HP_FLUTE'.
            move 'FLUTE' to LF_FIELD.
            "Account Number of Vendor or Creditor
          when 'HP_LIFNR'.
            move 'LIFNR' to LF_FIELD.
            "Tool Status
          when 'HP_TOSTA'.
            move 'TOSTA' to LF_FIELD.
            "Runtime: Material Context
          when 'HP_CONTX'.
            move 'CONTX' to LF_FIELD.
            "Customer Number
          when 'HP_KUNNR'.
            move 'KUNNR' to LF_FIELD.
            "External Tool
          when 'HP_TLEXT'.
            move 'EXTTO' to LF_FIELD.
            "Release Date
          when 'HP_DAREL'.
            move 'DAREL' to LF_FIELD.
            "Last Production Date
          when 'HP_DALPR'.
            move 'DALPR' to LF_FIELD.
            "Number of Uses
          when 'HP_NOUSE'.
            move 'NOUSE' to LF_FIELD.
            "No. of Production Order
          when 'HP_NOOPO'.
            move 'NOOPO' to LF_FIELD.
            "Final Purchase Price
*      when 'HP_PRIFP'.
*        MOVE 'PRIFP' to LF_FIELD.
*        "Final Selling Price
*      when 'HP_FSEPR'.
*        MOVE 'FSEPR' to LF_FIELD.
            "Nested
          when 'HP_FNEST'.
            move 'FNEST' to LF_FIELD.
            "Universal Tool
          when 'HP_UNITO'.
            move 'UNITO' to LF_FIELD.
            "Add Description
          when 'HP_DESAD'.
            move 'DESAD' to LF_FIELD.
            "Warehouse 1  - in Hinojosa system, warehouse2 and 3 are not used. Wherehouse1 will be filled from WM master data
*      when 'HP_WAHO1'.
*        MOVE 'WAHO1' to LF_FIELD.
*        "Warehouse 2
*      when 'HP_WAHO2'.
*        MOVE 'WAHO2' to LF_FIELD.
*        "Warehouse 3
*      when 'HP_WAHO3'.
*        MOVE 'WAHO3' to LF_FIELD.
*        "Customer Owned
          when 'HP_FCUOW'.
            move 'FCUOW' to LF_FIELD.
          when 'HP_TPRIN'.
            move 'PRTYP' to LF_FIELD.
          when 'HP_LCREQ'.
            move 'LCREQ' to LF_FIELD.
        endcase.


        assign component LF_FIELD of structure ES_TD100 to field-symbol(<F_FIELD>).
        if SY-SUBRC is initial.
          read table LT_CABN into data(LS_CABN) with key ATINN = LS_VALUE-ATINN.

          case LS_CABN-ATFOR.
            when 'CHAR'.
              move LS_VALUE-ATWRT to <F_FIELD>.
            when 'DATE'.
              clear LF_DATS.
              call function 'CTCV_CONVERT_FLOAT_TO_DATE'
                exporting
                  FLOAT = LS_VALUE-ATFLV
                importing
                  DATE  = LF_DATS.
              move LF_DATS to <F_FIELD>.

            when others.
              move  LS_VALUE-ATFLV to <F_FIELD>.
          endcase.
        endif.
*          if LS_VALUE-ATWRT is not initial.
*            move LS_VALUE-ATWRT to <F_FIELD>.
*
*          elseif LS_VALUE-ATFLV is not  initial.
*            move  LS_VALUE-ATFLV to <F_FIELD>.
*            if LF_DTYPE eq 'D'.
**              call function 'CTCV_CONVERT_FLOAT_TO_DATE'
**                exporting
**                  FLOAT = LS_VALUE-ATFLV
**                importing
**                  DATE  = <F_FIELD>.
*              clear: LF_PACKED, LF_DATS.
*              move LS_VALUE-ATFLV to LF_PACKED.
*              write LF_PACKED to LF_DATS.
*              move LF_DATS to <F_FIELD>.
*            endif.
*          endif.
*        endif.

***   Map UOM
        clear LS_CABN.
        read table LT_CABN into LS_CABN with key ATINN = LS_VALUE-ATINN.
        if SY-SUBRC is initial.

          LF_FIELD_UOM = LF_FIELD && '_UOM'.
          assign component LF_FIELD_UOM of structure ES_TD100 to field-symbol(<F_FIELD_UOM>).

          if SY-SUBRC is initial.
            move LS_CABN-MSEHI to <F_FIELD_UOM>.
          endif.
        endif.

***   Map Currency
        clear LS_CABN.
        read table LT_CABN into LS_CABN with key ATINN = LS_VALUE-ATINN.
        if SY-SUBRC is initial.

          LF_FIELD_CURR = LF_FIELD && '_CURR'.
          assign component LF_FIELD_CURR of structure ES_TD100 to field-symbol(<F_FIELD_CURR>).

          if SY-SUBRC is initial.
            move LS_CABN-MSEHI to <F_FIELD_CURR>.
          endif.
        endif.

      endloop.

    endloop.


*** in Hinojosa system fill warehouse1 from WM master data
    clear ES_TD100-WAHO1.
*** get storage location
    select single * from MARD into LS_MARD
      where MATNR eq IF_MATNR.
       "and           WERKS eq IF_WERKS.
    if SY-SUBRC is initial.
***   get number of pieces for the tool
      clear  LF_MKAPV.
      if ES_TD100-TDCUT eq YCL_RF_TPM_TOOL=>C_TDCUT_FBD or ES_TD100-TDCUT eq 'INT' or ES_TD100-TDCUT eq 'ALL'.
        LF_MKAPV = 1.
      elseif ES_TD100-TDCUT eq YCL_RF_TPM_TOOL=>C_TDCUT_RTY.
        LF_MKAPV = 2.
      elseif ES_TD100-CONTX eq YCL_RF_TPM_TOOL=>C_CONTX_STER.
        LF_MKAPV = ES_TD100-NOCOL.
      endif.
*      if LF_MKAPV is not initial.
****     local logic from Hinojosa colleagues on warehouse determination
*        try.
*            if ( LO_TOOL_LOCATION_MANAGER is not bound ).
*              LO_TOOL_LOCATION_MANAGER = new ZCL_WM_TOOLS_LOCATION_MANAGER(
*              I_MATNR = IF_MATNR
*              I_WERKS = IF_WERKS
*              I_LGORT = LS_MARD-LGORT
*              I_MKAPV = LF_MKAPV ).
*            endif.
*          catch ZCX_WM_EXCEPTION into LO_EXCEPTION.
*            message LO_EXCEPTION->IF_T100_MESSAGE~T100KEY-ATTR1 type 'S' display like 'E'.
*        endtry.
*        if LO_TOOL_LOCATION_MANAGER is bound.
****       update tooling portal field with result
*          ES_TD100-WAHO1 = LO_TOOL_LOCATION_MANAGER->_TP_LOCATION.
*        endif.
*      endif.
    endif.

*** avoid MAKUP overflow - Results in DUMP when showing the UI
    if ES_TD100-MAKUP gt 99.
      ES_TD100-MAKUP = 99.
    endif.

*** Get COMAD from standard text
*    do 1 times.
*      LF_TDOBNAME = GET_COMAD_TXT_NAME( IF_MATNR = IF_MATNR
*                                        IF_WERKS = IF_WERKS ).
*      call function 'INIT_TEXT'
*        exporting
*          ID       = 'ST'
*          LANGUAGE = 'E' " fixed to have only 1 shared text
*          NAME     = LF_TDOBNAME
*          OBJECT   = 'TEXT'
*        importing
*          HEADER   = LS_THEAD
*        tables
*          LINES    = LT_TLINE
*        exceptions
*          ID       = 1
*          LANGUAGE = 2
*          NAME     = 3
*          OBJECT   = 4
*          others   = 5.
*      if SY-SUBRC ne 0.
*        exit. " do
*      endif.
*      call function 'READ_TEXT'
*        exporting
**         CLIENT                  = SY-MANDT
*          ID                      = 'ST'
*          LANGUAGE                = 'E' " fixed to have only 1 shared text
*          NAME                    = LF_TDOBNAME
*          OBJECT                  = 'TEXT'
**         ARCHIVE_HANDLE          = 0
**         LOCAL_CAT               = ' '
**       IMPORTING
**         HEADER                  =
**         OLD_LINE_COUNTER        =
*        tables
*          LINES                   = LT_TLINE
*        exceptions
*          ID                      = 1
*          LANGUAGE                = 2
*          NAME                    = 3
*          NOT_FOUND               = 4
*          OBJECT                  = 5
*          REFERENCE_CHECK         = 6
*          WRONG_ACCESS_TO_ARCHIVE = 7
*          others                  = 8.
*      if SY-SUBRC <> 0.
*        exit. " do
*      endif.
*      call function 'IDMX_DI_TLINE_INTO_STRING'
*        exporting
*          IT_TLINE       = LT_TLINE
*        importing
*          EV_TEXT_STRING = ES_TD100-COMAD.
*    enddo.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_INIT_TOOL.
        ME->HANDLE_INIT_TOOL( ).

    endcase.

  endmethod.
  method HANDLE_INIT_TOOL.

    data: LT_GATE        type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_TOOL     type ref to YCL_HP_SVCS_PR_TOOL.

***------------------------------------------------------------------------------------------------
*** Set Tool Handling if Die Cut Tool Number is blank
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = YCL_HP_SVCS_PR_TOOL=>C_IPRVT_HP_TOOL
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_TOOL.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_TOOL.
      endtry.
    endloop.

*** Free Tool Handling
    if ME->ZIF_VCXI_PXSS_DCUT~GET_DCTTN( ) is not initial.
      if LR_PR_TOOL is bound.
        LR_PR_TOOL->DO_FREE( ).
        free: LR_PR_TOOL.
      endif.
    else.

*** Set Tool Handling
      if LR_PR_TOOL is not bound.
***   Create Tool Hanlding
        ME->CREATE_TOOL( ).

      endif.
    endif.

  endmethod.
  method SET_ALTTO1.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ALTTO1 ).

    if IF_ALTTO1 is supplied.
      move IF_ALTTO1 to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_ALTTO1D.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ALTTO1D ).

    if IF_ALTTO1D is supplied.
      move IF_ALTTO1D to LS_PARAM-STRNG.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_ALTTO2.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ALTTO2 ).

    if IF_ALTTO2 is supplied.
      move IF_ALTTO2 to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

*    if LF_CHANGED eq ABAP_TRUE.
**** Send Event
*      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CHANEL_CHANGED ).
*    endif.
  endmethod.
  method SET_ALTTO2D.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ALTTO2D ).

    if IF_ALTTO2D is supplied.
      move IF_ALTTO2D to LS_PARAM-STRNG.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_CHANEL.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CHANEL ).

    if IF_CHANEL is supplied.
      move IF_CHANEL to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CHANEL_CHANGED ).
    endif.
  endmethod.
