
class YCL_HP_SVCS_PR_BOARD definition
  public
  inheriting from ZCL_VCXI_P1SS_PR_BOARD
  create public .

public section.

  methods GET_ICLAT_VALUE
    importing
      !IF_ICLAT type ZVCXI_PCSS_ICLAT
      !IF_TYPE type YHP_SVCS_TICLA
    exporting
      !EF_CLVALN type ZVCXI_PCSS_S_CLASS_VALUE
      !EF_CLVALC type ZVCXI_PCSS_S_CLASS_VALUE_C .
  methods SET_COWID_SIM
    importing
      !IS_COWID type ZVCXI_PCS_S_COWID optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods GET_COWID_SIM
    exporting
      !EF_FOVRR type ZVCXI_XCS_FOVRR
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_COWID) type ZVCXI_PCS_S_COWID
    raising
      /VCXI/CX_CKX .
  methods SET_SIDRU_SIM
    importing
      !IS_SIDRU type ZVCXI_P0SS_S_SIDRU optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_SIDRU_SIM
    importing
      !IF_NOUTW type ZVCXI_PXS_NOUTW optional
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_SIDRP type ZVCXI_P0SS_S_SIDRP
    returning
      value(RS_SIDRU) type ZVCXI_P0SS_S_SIDRU
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT_SIM
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT_SIM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTW_SIM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUTW) type ZVCXI_PXS_NOUTW
    raising
      /VCXI/CX_CKX .

  methods GET_SIDRU
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_PARID_COWID_SIM type /VCXI/VKS_PARID value 'YHP_SVC_COWID_SIM' ##NO_TEXT.
  constants C_PARID_SIDRU_SIM type /VCXI/VKS_PARID value 'YHP_SVC_SIDRU_SIM' ##NO_TEXT.
  constants C_PARID_SURWT_SIM type /VCXI/VKS_PARID value 'YHP_SVC_SURWT_SIM' ##NO_TEXT.
  constants C_PARID_NOUTW_SIM type /VCXI/VKS_PARID value 'YHP_SVC_NOUTW_SIM' ##NO_TEXT.
  constants C_IEVNT_I_CALC_SIM type /VCXI/VKSC_IEVNT value 'CALC_SIM' ##NO_TEXT.

  methods CALC_SIM
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTW_SIM
    importing
      !IF_NOUTW type ZVCXI_PXS_NOUTW optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods INIT_DESCR_CLASS
    redefinition .
private section.
endclass. "YCL_HP_SVCS_PR_BOARD definition
class YCL_HP_SVCS_PR_BOARD implementation.
  method CALC_SIM.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_NOUTW type ZVCXI_PXS_NOUTW.
    data: LS_COWID_NEW   type ZVCXI_PCS_S_COWID,
          LS_SHTWI       type ZVCXI_P0SS_S_SHTWI,
          LS_SIDRU_MAX   type ZVCXI_P0SS_S_SIDRU,
          LS_SIDRU_MIN   type ZVCXI_P0SS_S_SIDRU,
          LS_COWID       type ZVCXI_PCS_S_COWID,
          LS_SIDRU_TMP   type ZVCXI_P0SS_S_SIDRU,
          LS_SIDRU       type ZVCXI_P0SS_S_SIDRU,
          LS_SURWT_SIM   type        ZVCXI_PXS_S_SURWT,
          LS_SURWT_TOTAL type ZVCXI_PXS_S_SURWT.
    data: LT_COWID type ZVCXI_PCS_TT_COWID,
          LT_SURWT type table of ZVCXI_PXS_S_SURWT.
    data: LR_PR_CORR type ref to ZCL_VCXI_P1SS_PR_CORR,
          LR_GATE    type ref to /VCXI/CL_VKSR_GATE.



*** Get Provider for Corrugation
    LR_PR_CORR = ME->GET_PRVDR_CORR( ).
    check LR_PR_CORR is bound.
***--------------------------------------------------------------------------------------
*** Get Sheet Wdith
    LR_PR_CORR->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTWI = LS_SHTWI ).
    if LS_SHTWI-SHTWI is initial.
      "ME->HANDLE_INIT_CUST_BOARD( ).
*      LR_PR_CORR->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTWI = LS_SHTWI ).
      LR_PR_CORR->GET_SHTDIM( importing ES_SHTWI = LS_SHTWI ).
    endif.


*** Activated Corrugation Width from Board Grade Customizing
    LT_COWID = ME->GET_VALID_COWID( IS_SHTWI = LS_SHTWI ).

    if LT_COWID is not initial.
***   Get Limits of Side Run
      LR_PR_CORR->GET_LIMIT_SIDRU( exporting IF_UOM       = LS_SHTWI-SHTWI_UOM
                                   importing ES_SIDRU_MIN = LS_SIDRU_MIN
                                             ES_SIDRU_MAX = LS_SIDRU_MAX ).

***   Evaluate all customized Corrugation Width
      loop at LT_COWID into LS_COWID.

***     Calculate Side Run
        LS_SIDRU_TMP = ME->CALC_SIDRU( IS_SIDRU_MIN = LS_SIDRU_MIN
                                       IS_COWID     = LS_COWID
                                       IS_SHTWI     = LS_SHTWI ).

***     Check Siderun agains limit
        if LS_SIDRU_MIN is not initial and
           LS_SIDRU_MAX is not initial.
          check LS_SIDRU_TMP-SIDRU ge LS_SIDRU_MIN-SIDRU and
                LS_SIDRU_TMP-SIDRU le LS_SIDRU_MAX-SIDRU.
        endif.

        check LS_SIDRU-SIDRU is initial or
              LS_SIDRU_TMP-SIDRU lt LS_SIDRU-SIDRU.
***     Safe Corrugation Width according to best Side Run
        LS_SIDRU     = LS_SIDRU_TMP.
        LS_COWID_NEW = LS_COWID.

      endloop.
    endif.

*** Set new Corrugation Width
    ME->SET_COWID_SIM( IS_COWID = LS_COWID_NEW ).

*** Now we calculate Simulated Side Run
*** Get Board Grade Width

    if LS_COWID_NEW-COWID is initial.
      LS_COWID_NEW-COWID = LS_COWID-COWID.
    endif.

    if LS_COWID_NEW-COWID is not initial.

***   Get Sheet Wdith
      LR_PR_CORR->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTWI = LS_SHTWI ).

***   Get Limits of Side Run
      LR_PR_CORR->GET_LIMIT_SIDRU( exporting IF_UOM       = LS_SHTWI-SHTWI_UOM
                                   importing ES_SIDRU_MIN = LS_SIDRU_MIN ).

***   Calculate Side Run
      LS_SIDRU = ME->CALC_SIDRU( exporting IS_SIDRU_MIN = LS_SIDRU_MIN
                                           IS_COWID     = LS_COWID_NEW
                                           IS_SHTWI     = LS_SHTWI
                                 importing EF_NOUTW     = LF_NOUTW ).
    else.
      clear: LS_SIDRU-SIDRU,
             LF_NOUTW.
    endif.

*** Set new Side Run
    ME->SET_SIDRU_SIM( IS_SIDRU = LS_SIDRU ).
    ME->SET_NOUTW_SIM( IF_NOUTW = LF_NOUTW ).



*** Now we calculate Simulated Side Run

*** Surface Weight is only required for Production Board
    check ME->GET_MBOAR( ) eq ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P.

***--------------------------------------------------------------------------------------
*** Get current Value
    LS_SURWT_TOTAL = ME->GET_SURWT_SIM( ).
    clear LS_SURWT_TOTAL-SURWT.

***--------------------------------------------------------------------------------------
*** Get MS Paper
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P1SS_PR_MS_PAPER=>C_IPRVT_P1_MS_PAPER
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      append cast ZCL_VCXI_P1SS_PR_MS_PAPER( LR_GATE->R_CLSPR )->GET_SURWT( IF_UOM = LS_SURWT_TOTAL-SURWT_UOM ) to LT_SURWT.
    endloop.

*** Get MS Starch
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P1SS_PR_MS_STARCH=>C_IPRVT_P1_MS_STARCH
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      append cast ZCL_VCXI_P1SS_PR_MS_STARCH( LR_GATE->R_CLSPR )->GET_SURWT( IF_UOM = LS_SURWT_TOTAL-SURWT_UOM ) to LT_SURWT.
    endloop.

*** Get MS Wax
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P1SS_PR_MS_WAX=>C_IPRVT_P1_MS_WAX
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      append cast ZCL_VCXI_P1SS_PR_MS_WAX( LR_GATE->R_CLSPR )->GET_SURWT( IF_UOM = LS_SURWT_TOTAL-SURWT_UOM ) to LT_SURWT.
    endloop.

***--------------------------------------------------------------------------------------
*** Calculate Total Surface Weight
    loop at LT_SURWT into LS_SURWT_SIM.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_SIM-SURWT
                                                          IF_CALCV_UOM_1 = LS_SURWT_SIM-SURWT_UOM
                                                          IF_CALCV_2     = LS_SURWT_TOTAL-SURWT
                                                          IF_CALCV_UOM_2 = LS_SURWT_TOTAL-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_SURWT_TOTAL-SURWT_UOM
                                                importing EF_CALCV       = LS_SURWT_TOTAL-SURWT
                                                          EF_CALCV_UOM   = LS_SURWT_TOTAL-SURWT_UOM ).
    endloop.

***--------------------------------------------------------------------------------------
*** Set Surface Weight
    ME->SET_SURWT_SIM( IS_SURWT = LS_SURWT_TOTAL ).

  endmethod.
  method GET_COWID_SIM.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COWID_SIM ).
    RS_COWID-COWID     = LS_PARAM-ATFLV.
    RS_COWID-COWID_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_ICLAT_VALUE.

    if if_type = 'N'.
       READ TABLE ME->T_CLASS_VALUE INTO EF_CLVALN WITH KEY ICLAT = IF_ICLAT.
    ENDIF.

    IF IF_TYPE = 'C'.
      READ TABLE ME->T_CLASS_VALUE_C INTO EF_CLVALC WITH KEY ICLAT = IF_ICLAT.
    ENDIF.
  endmethod.
  method GET_NOUTW_SIM.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTW_SIM ).
    move LS_PARAM-ATFLV to RF_NOUTW.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SIDRU.

    data: LF_FACTOR type F.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_COWID type ZVCXI_PCS_S_COWID.
    data: LR_CX_SY_CONVERSION_OVERFLOW   type ref to CX_SY_CONVERSION_OVERFLOW.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SIDRU ).
    move LS_PARAM-ATFLV to RS_SIDRU-SIDRU.
    move LS_PARAM-UNIT  to RS_SIDRU-SIDRU_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

    check RS_SIDRU-SIDRU is not initial.

***----------------------------------------------------------------------------
*** Calculate Side Run in Percentage
    if ES_SIDRP is requested.
      LS_COWID = ME->GET_COWID( ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SIDRU-SIDRU
                                                          IF_CALCV_UOM_1 = RS_SIDRU-SIDRU_UOM
                                                          IF_CALCV_2     = LS_COWID-COWID
                                                          IF_CALCV_UOM_2 = LS_COWID-COWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LF_FACTOR ).

***   Return per Number of Out
      if IF_NOUTW is supplied and
         IF_NOUTW ne 0.
        LF_FACTOR = LF_FACTOR / IF_NOUTW.
      endif.
      try .
          if LF_FACTOR gt 0.

            ES_SIDRP = value #( SIDRP     = LF_FACTOR * 100
                                SIDRP_UOM = '%' ).

          endif.
        catch CX_SY_CONVERSION_OVERFLOW.
      endtry.
    endif.

*** Return Side Run per Number of Out
    if IF_NOUTW is supplied and
       IF_NOUTW ne 0.
      RS_SIDRU-SIDRU = RS_SIDRU-SIDRU / IF_NOUTW.
    endif.

    if RS_SIDRU-SIDRU lt 0 .
      clear RS_SIDRU-SIDRU.
    endif.

  endmethod.
  method GET_SIDRU_SIM.

    data: LF_FACTOR type F.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_COWID type ZVCXI_PCS_S_COWID.
    data: LR_CX_SY_CONVERSION_OVERFLOW   type ref to CX_SY_CONVERSION_OVERFLOW.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SIDRU_SIM ).
    move LS_PARAM-ATFLV to RS_SIDRU-SIDRU.
    move LS_PARAM-UNIT  to RS_SIDRU-SIDRU_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

    check RS_SIDRU-SIDRU is not initial.

***----------------------------------------------------------------------------
*** Calculate Side Run in Percentage
    if ES_SIDRP is requested.
      LS_COWID = ME->GET_COWID_SIM( ).
      check LS_COWID-COWID is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SIDRU-SIDRU
                                                          IF_CALCV_UOM_1 = RS_SIDRU-SIDRU_UOM
                                                          IF_CALCV_2     = LS_COWID-COWID
                                                          IF_CALCV_UOM_2 = LS_COWID-COWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LF_FACTOR ).

***   Return per Number of Out
      if IF_NOUTW is supplied and
         IF_NOUTW ne 0.
        LF_FACTOR = LF_FACTOR / IF_NOUTW.
      endif.
      try .
          if LF_FACTOR gt 0.

            ES_SIDRP = value #( SIDRP     = LF_FACTOR * 100
                                SIDRP_UOM = '%' ).

          endif.
        catch CX_SY_CONVERSION_OVERFLOW.
      endtry.
    endif.

*** Return Side Run per Number of Out
    if IF_NOUTW is supplied and
       IF_NOUTW ne 0.
      RS_SIDRU-SIDRU = RS_SIDRU-SIDRU / IF_NOUTW.
    endif.

    if RS_SIDRU-SIDRU lt 0 .
      clear RS_SIDRU-SIDRU.
    endif.

  endmethod.
  method GET_SURWT_SIM.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT_SIM ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_CALC_SIM.
        ME->CALC_SIM( ).
    endcase.

  endmethod.
  method INIT_DESCR_CLASS.


    data: LS_ATTRI type        /VCXI/VKS_S_ATTRI,
          LS_ATTVA type        /VCXI/CKX_STRING.
    data:          LT_ATTVA           type        /VCXI/CKX_TT_STRING.
    data: LT_CLASS_VALUE   type ZVCXI_PCSS_TT_CLASS_VALUE,
          LT_CLASS_VALUE_C type ZVCXI_PCSS_TT_CLASS_VALUE_C.
    data: LS_CLASS_VALUE   like line of LT_CLASS_VALUE, LS_CLASS_VALUE_C like line of LT_CLASS_VALUE_C.
    data: LS_S_CLASS_VALUE type ZVCXI_PCSS_S_CLASS_VALUE.
    data: LS_S_CLASS_VALUE_C type ZVCXI_PCSS_S_CLASS_VALUE_C.
    field-symbols: <S_CLASS_VALUE>   type        ZVCXI_PCSS_S_CLASS_VALUE,
                   <S_CLASS_VALUE_C> type        ZVCXI_PCSS_S_CLASS_VALUE_C,
                   <S_BOARD_DESCR>   type        ZVCXI_PCSS_S_BOARD_DESCR.

*  CALL METHOD SUPER->INIT_DESCR_CLASS.


    clear: ME->T_CLASS_VALUE, ME->T_CLASS_VALUE_C, ME->T_BOARD_DESCR.

***----------------------------------------------------------------------------
*** Get Classification Values (by Attribute)
*    try.
*        LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_CLASS ).
*      catch /VCXI/CX_CKX.
*        clear LS_ATTRI.
*    endtry.

*** Get overall available Classification
    select * into corresponding fields of table LT_CLASS_VALUE
             from ZVCXI_PCS_TC260
             order by ICLAT.
    select * into corresponding fields of table LT_CLASS_VALUE_C
             from ZVCXI_PCS_TC261
             order by ICLAT.
    loop at LT_CLASS_VALUE into LS_CLASS_VALUE.
      move-corresponding LS_CLASS_VALUE to LS_S_CLASS_VALUE.
      append LS_S_CLASS_VALUE to ME->T_CLASS_VALUE.
    endloop.

    loop at LT_CLASS_VALUE_C into LS_CLASS_VALUE_C.
      move-corresponding LS_CLASS_VALUE_C to LS_S_CLASS_VALUE_C.
      append LS_S_CLASS_VALUE_C to ME->T_CLASS_VALUE_C.
    endloop.

*    if LS_ATTRI is not initial.
*      condense LS_ATTRI-ATTVA no-gaps.
*      split LS_ATTRI-ATTVA at ',' into table LT_ATTVA.
*      if LT_ATTVA is not initial.
*        loop at LT_ATTVA into LS_ATTVA.
*          append initial line to ME->T_CLASS_VALUE assigning <S_CLASS_VALUE>.
*          move LS_ATTVA to <S_CLASS_VALUE>-ICLAT.
*          append initial line to ME->T_CLASS_VALUE_C assigning <S_CLASS_VALUE_C>.
*          move LS_ATTVA to <S_CLASS_VALUE_C>-ICLAT.
*        endloop.
*      endif.
*    endif.

    if ME->R_CUST_BOARD is bound.
      ME->R_CUST_BOARD->GET_CLASS_VALUE( changing CT_CLASS_VALUE   = ME->T_CLASS_VALUE
                                                  CT_CLASS_VALUE_C = ME->T_CLASS_VALUE_C ).
    endif.


***----------------------------------------------------------------------------
*** Get Board Descriptions (by Customizing)
    if ME->R_CUST_BOARD is bound.
      ME->R_CUST_BOARD->GET_BOARD_DESCR( changing CT_BOARD_DESCR = ME->T_BOARD_DESCR ).
    endif.
* catch /VCXI/CX_CKX .
*endtry.
  endmethod.
  method SET_COWID_SIM.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.


*** Get current Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COWID_SIM ).

    if IS_COWID is supplied.
      move IS_COWID-COWID     to LS_PARAM-ATFLV.
      move IS_COWID-COWID_UOM to LS_PARAM-UNIT.
    endif.
    move IF_SETBY             to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).
  endmethod.
  method SET_NOUTW_SIM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTW_SIM ).

    if IF_NOUTW is supplied.
      LS_PARAM-ATFLV = IF_NOUTW.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_SIDRU_SIM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SIDRU_SIM ).

    if IS_SIDRU is supplied.
      move IS_SIDRU-SIDRU     to LS_PARAM-ATFLV.
      move IS_SIDRU-SIDRU_UOM to LS_PARAM-UNIT.
    endif.
    move IF_SETBY             to LS_PARAM-SETBY.
    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).
  endmethod.
  method SET_SURWT_SIM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT_SIM ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).
  endmethod.
