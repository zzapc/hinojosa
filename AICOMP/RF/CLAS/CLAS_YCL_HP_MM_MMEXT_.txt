
class YCL_HP_MM_MMEXT definition
  public
  create protected .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .

  data F_CHANGED type ABAP_BOOL read-only .
  data F_MATNR type MATNR read-only .
  data F_WERKS type WERKS_D read-only .
  data T_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM read-only .
  data T_JOITY type ZVCXI_PXS_TT_JOITY read-only .
  data T_PRINT_COM type ZVCXI_PXSS_TT_PRINT_COM read-only .
  data F_CNTXT type YHP_MM_CNTXT read-only .

  methods SET_EXTVAL
    importing
      !IS_EXTVAL type ANY
    raising
      /VCXI/CX_CKX .
  class-methods DECRYPT_GUID
    importing
      value(IF_GUID) type /VCXI/CKX_GUID
    exporting
      !EF_MATNR type MATNR
      !EF_WERKS type WERKS_D
      !EF_CNTXT type YHP_MM_CNTXT
    raising
      /VCXI/CX_CKX .
  class-methods ENCRYPT_GUID
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_CNTXT type YHP_MM_CNTXT optional
    returning
      value(RF_GUID) type /VCXI/CKX_GUID
    raising
      /VCXI/CX_CKX .
  class-methods MATERIAL_BUCHEN
    importing
      !IS_MARA type MARA
    changing
      !CS_MARC type MARC
      !CT_MARM type MAT_MEINH .
  methods SAVE
    raising
      /VCXI/CX_CKX .
  methods UPDATE_BY_XFG
    importing
      !IR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
protected section.

  data S_LOG type /VCXI/CKX_S_LOG .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .

  class-methods GET_CNTXT
    importing
      !IR_SVCEL_XFG type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    returning
      value(RF_CNTXT) type YHP_MM_CNTXT
    raising
      /VCXI/CX_CKX .
  class-methods FACTORY
    importing
      !IF_GUID type /VCXI/CKX_GUID
    returning
      value(RR_MMEXT) type ref to YCL_HP_MM_MMEXT
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_GUID type /VCXI/CKX_GUID
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods HANDLE_CREATED
    for event CREATED of /VCXI/IF_CKX_OBJECT .
private section.

  types:
    begin of YS_GUID_KEY,
           MATNR type MATNR,
           WERKS type WERKS_D,
           CNTXT type YHP_MM_CNTXT,
         end of YS_GUID_KEY .

  class-methods ENHANCE_GUID
    importing
      !IF_GUID type /VCXI/CKX_GUID
    returning
      value(RF_GUID) type /VCXI/CKX_GUID
    raising
      /VCXI/CX_CKX .
endclass. "YCL_HP_MM_MMEXT definition
class YCL_HP_MM_MMEXT implementation.
  method /VCXI/IF_CKX_OBJECT~GET_DESCR.
  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.
  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_GUID.

    RF_GUID = YCL_HP_MM_MMEXT=>ENCRYPT_GUID( IF_MATNR = ME->F_MATNR
                                               IF_WERKS = ME->F_WERKS ).

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_ID.
  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

    data: LF_GUID  type /VCXI/CKX_GUID.

*** Enhance GUID with Context
    LF_GUID = ENHANCE_GUID( IF_GUID ).

    if LINE_EXISTS( T_INSTANCE[ GUID = LF_GUID ] ).
      RR_OBJECT = T_INSTANCE[ GUID = LF_GUID ]-R_OBJECT.
    else.
      RR_OBJECT = YCL_HP_MM_MMEXT=>FACTORY( IF_GUID = LF_GUID ).
      cast YCL_HP_MM_MMEXT( RR_OBJECT )->LOAD_FROM_DB( ).
    endif.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_LOG.

    RS_LOG = ME->S_LOG.

  endmethod.
  method CONSTRUCTOR.

    YCL_HP_MM_MMEXT=>DECRYPT_GUID( exporting IF_GUID  = IF_GUID
                                     importing EF_MATNR = ME->F_MATNR
                                               EF_WERKS = ME->F_WERKS ).
*** Set Event Handler
    set handler ME->HANDLE_CREATED for ME.
    set handler ME->HANDLE_CHANGED for ME.

  endmethod.
  method DECRYPT_GUID.

    data: LS_GUID_KEY type YS_GUID_KEY.

    LS_GUID_KEY = IF_GUID.

    EF_MATNR = LS_GUID_KEY-MATNR.
    EF_WERKS = LS_GUID_KEY-WERKS.
    EF_CNTXT = LS_GUID_KEY-CNTXT.

  endmethod.
  method ENCRYPT_GUID.

    data: LS_GUID_KEY type YS_GUID_KEY.

    LS_GUID_KEY-MATNR = IF_MATNR.
    LS_GUID_KEY-WERKS = IF_WERKS.
    LS_GUID_KEY-CNTXT = IF_CNTXT.

    RF_GUID = LS_GUID_KEY.

  endmethod.
  method ENHANCE_GUID.

    data: LS_GUID_KEY type YS_GUID_KEY.

    YCL_HP_MM_MMEXT=>DECRYPT_GUID( exporting IF_GUID  = IF_GUID
                                     importing EF_MATNR = LS_GUID_KEY-MATNR
                                               EF_WERKS = LS_GUID_KEY-WERKS
                                               EF_CNTXT = LS_GUID_KEY-CNTXT ).
    if LS_GUID_KEY-CNTXT is initial.
      select single CNTXT
             into LS_GUID_KEY-CNTXT
             from YHP_MM_TD100
            where MATNR eq LS_GUID_KEY-MATNR
             and  WERKS eq LS_GUID_KEY-WERKS.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_STRING( IF_STRING = |Context couldn't be identified| ).
      endif.
    endif.

    RF_GUID = YCL_HP_MM_MMEXT=>ENCRYPT_GUID( IF_MATNR = LS_GUID_KEY-MATNR
                                               IF_WERKS = LS_GUID_KEY-WERKS
                                               IF_CNTXT = LS_GUID_KEY-CNTXT ).

  endmethod.
  method FACTORY.

    data: LF_CNTXT  type YHP_MM_CNTXT.


    YCL_HP_MM_MMEXT=>DECRYPT_GUID( exporting IF_GUID  = IF_GUID
                                     importing EF_CNTXT = LF_CNTXT ).

    case LF_CNTXT.
***   Corrugated
      when 'P1'.
        RR_MMEXT = new YCL_HPP1_MM_MMEXT( IF_GUID = IF_GUID ).
***   Folding Carton
      when 'P2'.
        RR_MMEXT = new YCL_HPP2_MM_MMEXT( IF_GUID = IF_GUID ).
***   Assembly Component
*      when 'P3'.
*       RR_MMEXT = new YCL_HP3_MM_MMEXT( IF_GUID = IF_GUID ).

      when others.
        raise exception type /VCXI/CX_CKX.
    endcase.

  endmethod.
  method GET_CNTXT.

    RF_CNTXT = switch #( IR_SVCEL_XFG->/VCXI/IF_CKX_OBJECT~GET_ID( ) when 'CFG'   then 'P1'    "Corrugated Finished Good
                                                                     when 'FCFG'  then 'P2'    "Folding Carton Finished Good
                                                                     when 'AFG'   then 'P3'    "Assembled Finished Good
                                                                     else throw /VCXI/CX_CKX( ) ).

  endmethod.
method HANDLE_CHANGED.

  try.
***   Write Change Log Entry
      move SY-UNAME     to ME->S_LOG-CHABY.
      get time stamp field ME->S_LOG-CHAAT.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_CREATED.

  try.
***   Write Create Log Entry
      move SY-UNAME     to ME->S_LOG-CREBY.
      get time stamp field ME->S_LOG-CREAT.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
  method LOAD_FROM_DB.

    data: LS_TD100 type YHP_MM_TD100.

*** Load basic Material Master Extension
    select single *
           into LS_TD100
           from YHP_MM_TD100
          where MATNR eq ME->F_MATNR
           and  WERKS eq ME->F_WERKS.
    if SY-SUBRC eq 0.
***   Load current values
      ME->S_LOG   = LS_TD100-S_LOG.
    else.
***   New
      raise event /VCXI/IF_CKX_OBJECT~CREATED.
    endif.

*** Load Scores
    select *
           into corresponding fields of table ME->T_SCORE_COM
           from YHP_MM_TD110
          where MATNR eq ME->F_MATNR
           and  WERKS eq ME->F_WERKS
          order by ISCOR.

*** Load Joint Types
    select JOITY
           into table ME->T_JOITY
           from YHP_MM_TD120
          where MATNR eq ME->F_MATNR
           and  WERKS eq ME->F_WERKS
           order by JOICT.

*** Load Print
    select *
           into corresponding fields of table ME->T_PRINT_COM
           from YHP_MM_TD130
          where MATNR eq ME->F_MATNR
           and  WERKS eq ME->F_WERKS
          order by PRICT.

  endmethod.
  method MATERIAL_BUCHEN.

    data: LF_MATNR type MATNR.
    data: LS_RMMG2 type RMMG2.
    data: LT_SVCEL type /VCXI/CKX_TT_OBJECT.
    data: LR_MMEXT  type ref to YCL_HP_MM_MMEXT,
          LR_SVC    type ref to /VCXI/CL_VKSRA_SVC,
          LR_SVCEL  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_EA_XFG type ref to ZCL_VCXI_PXSS_EA_XFG,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.

    try.
***----------------------------------------------------------------------------
***     Only for Packaging Models
        check CS_MARC-STDPD cp 'VCXI_PX*CNF'.

***----------------------------------------------------------------------------
***     Check if Configuration number is in place
        if CS_MARC-CUOBJ is initial.
***       If not read the New Instance
          call function 'MAIN_PARAMETER_GET_RMMG2'
            importing
              WRMMG2 = LS_RMMG2.
          move LS_RMMG2-NEW_INST to CS_MARC-CUOBJ.
        endif.
        check CS_MARC-CUOBJ is not initial.

***     Get Configuration
        try.
            LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = CS_MARC-CUOBJ ) ).
          catch /VCXI/CX_CKX.
            clear LR_SVC.
        endtry.
        check LR_SVC is bound.


***----------------------------------------------------------------------------
***     Get Finished Goods which are marked as Multi Quantity Components
        LT_SVCEL = LR_SVC->GET_SVC_ELEMENTS( IF_ATTID = 'MQ_COMP'
                                             IF_INUSE = ABAP_TRUE ).
        loop at LT_SVCEL into LR_OBJECT.
          LR_SVCEL ?= LR_OBJECT.

***       Get Reference to Finished Good
          try.
              LR_EA_XFG ?= LR_SVCEL->GET_CLSEA( ).
            catch CX_SY_MOVE_CAST_ERROR.
              continue.
          endtry.

***       Get Material Number
          LF_MATNR = LR_EA_XFG->GET_MATNR( ).
          if LF_MATNR is initial.
            LF_MATNR = CS_MARC-MATNR.
          endif.

***       Get Material Extension
          try.
              LR_MMEXT ?= YCL_HP_MM_MMEXT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = ENCRYPT_GUID( IF_MATNR = CS_MARC-MATNR
                                                                                                       IF_WERKS = CS_MARC-WERKS
                                                                                                       IF_CNTXT = YCL_HP_MM_MMEXT=>GET_CNTXT( IR_SVCEL_XFG = LR_SVCEL ) ) ).
            catch /VCXI/CX_CKX.
              clear LR_MMEXT.
          endtry.
          check LR_MMEXT is bound.

***       Update by Finished Good
          LR_MMEXT->UPDATE_BY_XFG( IR_SVCEL = LR_SVCEL ).

***       Save Material Extension
          LR_MMEXT->SAVE( ).

        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method SAVE.

    data: LS_TD100 type YHP_MM_TD100.
    data: LT_TD110 type table of YHP_MM_TD110,
          LT_TD120 type table of YHP_MM_TD120,
          LT_TD130 type table of YHP_MM_TD130.


    if ME->F_MATNR is initial or
       ME->F_WERKS is initial.
      raise exception type /VCXI/CX_CKX.
    endif.

***----------------------------------------------------------------------------
*** Save basic Material Master Extension
    LS_TD100 = value #( MATNR   = ME->F_MATNR
                        WERKS   = ME->F_WERKS
                        S_LOG   = ME->S_LOG ).
    modify YHP_MM_TD100 from LS_TD100.

*** Save Score Information
    LT_TD110 = value #( for LS_SCORE_COM in ME->T_SCORE_COM ( MATNR   = ME->F_MATNR
                                                              WERKS   = ME->F_WERKS
                                                              ISCOR   = LS_SCORE_COM-ISCOR
                                                              S_SCORP = LS_SCORE_COM-S_SCORP
                                                              TSCOR   = LS_SCORE_COM-TSCOR
                                                              FSLIN   = LS_SCORE_COM-FSLIN ) ).
    delete from YHP_MM_TD110 where MATNR eq ME->F_MATNR
                                and  WERKS eq ME->F_WERKS.
    modify YHP_MM_TD110 from table LT_TD110.

*** Save Joint Information
    LT_TD120 = value #( FOR LF_JOITY in ME->T_JOITY index into LF_JOICT
                                                    ( MATNR = ME->F_MATNR
                                                      WERKS = ME->F_WERKS
                                                      JOICT = LF_JOICT
                                                      JOITY = LF_JOITY ) ).
    delete from YHP_MM_TD120 where MATNR eq ME->F_MATNR
                                and  WERKS eq ME->F_WERKS.
    modify YHP_MM_TD120 from table LT_TD120.

*** Save Pint Information
    LT_TD130 = value #( for LS_PRINT_COM in ME->T_PRINT_COM index into LF_PRICT
                                                            ( MATNR       = ME->F_MATNR
                                                              WERKS       = ME->F_WERKS
                                                              PRICT       = LF_PRICT
                                                              S_PRINT_COM = LS_PRINT_COM ) ).
    delete from YHP_MM_TD130 where MATNR eq ME->F_MATNR
                                and  WERKS eq ME->F_WERKS.
    modify YHP_MM_TD130 from table LT_TD130.

  endmethod.
  method SET_EXTVAL.

    data: LS_EXTVAL type YHP_MM_S_EXTVAL.

*** "Cast" Extension Values
    LS_EXTVAL = corresponding #( IS_EXTVAL ).

*** Scores
    if ME->T_SCORE_COM ne LS_EXTVAL-T_SCORE_COM.
      ME->T_SCORE_COM = LS_EXTVAL-T_SCORE_COM.
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

*** Joint
    if ME->T_JOITY ne LS_EXTVAL-T_JOITY.
      ME->T_JOITY = LS_EXTVAL-T_JOITY.
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

*** Print
    if ME->T_PRINT_COM ne LS_EXTVAL-T_PRINT_COM.
      ME->T_PRINT_COM = LS_EXTVAL-T_PRINT_COM.
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.

  endmethod.
  method UPDATE_BY_XFG.

*    data: LR_EA_CFG     type ref to ZCL_VCXI_P1SS_EA_CFG,
*          LR_BL_CRFPROP type ref to ZCL_VCXI_P1SS_BL_CRFPROP,
*          LR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP.
*
*
****----------------------------------------------------------------------------
**** Get Element API Reference
*    try.
*        LR_EA_CFG ?= IR_SVCEL->GET_CLSEA( ).
*      catch CX_SY_MOVE_CAST_ERROR into data(LR_CX_SY_MOVE_CAST_ERROR).
*        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_MOVE_CAST_ERROR ).
*    endtry.
*    check LR_EA_CFG is bound.
*
**** Get Corrugator Forward Property XML (Outbound)
*    LR_BL_CRFPROP = LR_EA_CFG->GET_CRFPX( ).
*
**** Get Corrugator Backward Property XML (Outbound)
*    LR_BL_CRBPROP = LR_EA_CFG->GET_CRBPX( ).
*
****----------------------------------------------------------------------------
**** Set Extension Values
*    ME->SET_MMEXT( IS_MMEXT     = value #( SABOA     = LR_BL_CRFPROP->F_SABOA
*                                           PRBOA     = LR_BL_CRFPROP->F_PRBOA
*                                           FLUTE     = LR_BL_CRFPROP->F_FLUTE
*                                           S_CALIP   = LR_BL_CRFPROP->S_CALIP
*                                           S_SURWT   = LR_EA_CFG->GET_SURWT( )
*                                           S_HNDDIM  = LR_BL_CRFPROP->S_HNDDIM
*                                           S_COWAR   = LR_BL_CRFPROP->S_COWAR )
*                   IT_SCORE_COM = LR_BL_CRBPROP->T_SCORE
*                   IT_JOITY     = LR_BL_CRFPROP->T_JOITY
*                   IT_PRINT_COM = LR_BL_CRFPROP->T_PRINT ).

  endmethod.
