
class YCL_HP_SMD_AIS_STP_G300 definition
  public
  inheriting from YCL_HP_SMD_AIS_STP_G000
  final
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_RPSEG type ref to /VCXI/CL_CKMR_RPSEG
    raising
      /VCXI/CX_CKX .
protected section.

  data R_DCO_OUTPUT type ref to YCL_HP_SMD_AIS_DCO .
  data R_DCO_INPUT type ref to YCL_HP_SMD_AIS_DCO .

  methods ANALYZE_RESULT_DCO
    redefinition .
  methods GET_SUBPROCESS
    redefinition .
  methods GET_SUBPROCESS_DCO
    redefinition .
private section.
endclass. "YCL_HP_SMD_AIS_STP_G300 definition
class YCL_HP_SMD_AIS_STP_G300 implementation.
method ANALYZE_RESULT_DCO.
endmethod.
method CONSTRUCTOR.

*** Super Constructor
  SUPER->CONSTRUCTOR( IR_RPSEG = IR_RPSEG ).

*** Map DCO to Required Input/Output
  ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_INPUT ).
  ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_OUTPUT ).

endmethod.
method GET_SUBPROCESS.

  data: LR_DCO    type ref to /VCXI/CL_CKMR_CLDCO,
        LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.

*** Check MBQ Flag is set
  if LINE_EXISTS( ME->R_DCO_INPUT->T_WRKLI[ SELTD_MBQ = ABAP_TRUE ] ).

*** Get existing Process
    read table ME->R_RPSEG->T_RPROC into LR_OBJECT index 1.
    if SY-SUBRC eq 0.

      move LR_OBJECT ?to RR_RPROC.

*** Create new Process and DCO if needed
    else.

***   Create DCO
      move ME->GET_SUBPROCESS_DCO( ) to LR_DCO.

      if LR_DCO is bound.

***     Create SubProcess
        RR_RPROC = /VCXI/CL_CKMR_RPROC=>CREATE( IR_DCO   = LR_DCO
                                                IR_CPROC = ME->R_RPSEG->R_CPSEQ->R_CPROC ).

***     Add to Segment as SubProcess
        ME->R_RPSEG->ADD_RPROC( IR_RPROC = RR_RPROC ).

      endif.

    endif.

    if RR_RPROC is not bound.

***   Set Segment Status to Error
      ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

    endif.

  else.

*** Set Status to Canceled
    ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ).

  endif.

endmethod.
method GET_SUBPROCESS_DCO.

  data: LF_XMLDC type /VCXI/CKMR_XMLDC.

  data: LS_START type ZVCXI_XCM_MBQ_S_START.

  data: LR_DCO_OUTPUT type ref to ZCL_VCXI_XCM_MBQ_DCO_SDOC,
        LR_BOB_SDOC   type ref to ZCL_VCXI_XCI_BOB_SDOC.

  field-symbols: <S_WRKLI> type YHP_SMD_AIS_S_QUOT_WRKLI,
                 <T_POSNR> type ZVCXI_XCM_MBQ_TT_POSNR,
                 <F_POSNR> type POSNR.

  if ME->R_DCO_INPUT->T_WRKLI is not initial.

    read table ME->R_DCO_INPUT->T_WRKLI assigning <S_WRKLI> index 1.
    create object LR_DCO_OUTPUT.
    create object LR_BOB_SDOC.

    clear LS_START.
    LS_START-VBELN = <S_WRKLI>-VBELN_NEW.

    if LR_DCO_OUTPUT is bound.
      assign LS_START-T_POSNR to <T_POSNR>.
      loop at ME->R_DCO_INPUT->T_WRKLI assigning <S_WRKLI>.
        append initial line to <T_POSNR> assigning <F_POSNR>.
        <F_POSNR> = <S_WRKLI>-POSNR_NEW.
      endloop.
    endif.

    if LR_DCO_OUTPUT is bound.

      LR_DCO_OUTPUT->SET_START( IS_START = LS_START ).
      LR_DCO_OUTPUT->SET_BOB_SDOC( IR_BOB_SDOC = LR_BOB_SDOC ).

***   Copy DCO by Serialize-Deserialize
      LF_XMLDC = LR_DCO_OUTPUT->SERIALIZE( ).
      RR_DCO ?= /VCXI/CL_CKMR_CLDCO=>DESERIALIZE( IF_XMLDC = LF_XMLDC ).

    endif.

  endif.

endmethod.
