
class YCL_HP_SVC_IDAT_FDMDL definition
  public
  final
  create public .

public section.

  class-data S_DATA type YHP_SVC_TT_PPUPL_DATA_ITM .
  constants C_PTYPE_SHT type ZVCXI_P0S_PTYPE value 'SHT' ##NO_TEXT.
  constants C_PTYPE_DCT type ZVCXI_P0S_PTYPE value 'DCT' ##NO_TEXT.
  constants C_PTYPE_INL type ZVCXI_P0S_PTYPE value 'INL' ##NO_TEXT.

  class-methods UPDATE_VIA_FASTD
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    raising
      /VCXI/CX_CKX .
  class-methods BUILD_IDAT
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR
    changing
      !CR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
    exceptions
      /VCXI/CX_CKX .
protected section.

  class-methods ADJUST_SVC
    importing
      !IS_DATA type YHP_SVC_S_PPUPL_DATA_CNF
      !IR_API_FDMDL type ref to ZCL_VCXI_PXSS_API_FDMDL
    raising
      /VCXI/CX_CKX .
  class-methods ADJ_SRCIN_CORR_TO_SFG
    importing
      !IF_SRCIN type ZVCXI_P1SS_SRCIN optional
    changing
      !CT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  class-methods ADJ_SFG_PLANT
    importing
      !IF_WERKS type WERKS_D
      !IR_API_FDMDL type ref to ZCL_VCXI_PXSS_API_FDMDL
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SVC_IDAT_FDMDL definition
class YCL_HP_SVC_IDAT_FDMDL implementation.
  method ADJ_SFG_PLANT.

    data: LT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP,
          LT_XCONG       type ZVCXI_PXSS_TT_XCONG.

***   Get latest Fast Data Structure to adjust plant in SFG
    LT_FDAPI_XCOMP = IR_API_FDMDL->GET_STRC( importing ET_XCONG = LT_XCONG ).

*** Find Corrugated Connection Out
    loop at LT_FDAPI_XCOMP assigning field-symbol(<S_FDAPI_XCOMP>).
      if LINE_EXISTS( <S_FDAPI_XCOMP>-T_DATA[ ISELF = 'CRCONO' ] ).
        <S_FDAPI_XCOMP>-WERKS = IF_WERKS.
      endif.
    endloop.

*** Set Fast Data Structure
    IR_API_FDMDL->SET_STRC( exporting IT_FDAPI_XCOMP = LT_FDAPI_XCOMP
                                      IT_XCONG       = LT_XCONG ).

  endmethod.
  method ADJ_SRCIN_CORR_TO_SFG.

    data: LS_FDAPI_XCOMP_DATA type ZVCXI_PXSS_S_FDAPI_XCOMP_DATA.
    data: LT_FDAPI_XCOMP  TYPE ZVCXI_PXSS_TT_FDAPI_XCOMP.
    field-symbols: <S_FDAPI_XCOMP> type ZVCXI_PXSS_S_FDAPI_XCOMP,
                   <S_XCONG>       type ZVCXI_PXSS_S_XCONG.


*** Search for Corrugation
    loop at CT_FDAPI_XCOMP assigning <S_FDAPI_XCOMP>.
      if LINE_EXISTS( <S_FDAPI_XCOMP>-T_DATA[ ISELF = 'CORR' ] ).

***     Buffer Corrugation Data and remove from original Component
        LS_FDAPI_XCOMP_DATA =  <S_FDAPI_XCOMP>-T_DATA[ ISELF = 'CORR' ].

***     Create new Connection
        try.
            append value #( GXCON_OUT = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( )
                            GXCON_IN  = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( )
                          ) to CT_XCONG assigning <S_XCONG>.
          catch CX_UUID_ERROR into data(LR_CX_UUID_ERROR).
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_UUID_ERROR ).
        endtry.

***     Replace Corrugation though Connection In
        delete <S_FDAPI_XCOMP>-T_DATA where ISELF = 'CORR'.
        append value #( IPARE = 'INPUT'
                        ISELF = 'CRCONI'
                        R_DATA = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN )
                      ) to <S_FDAPI_XCOMP>-T_DATA.

***     Create new Component
        append value #( ID     = <S_FDAPI_XCOMP>-ID
                        XCSTY  = <S_FDAPI_XCOMP>-XCSTY
                        T_DATA = value #( ( IPARE  = LS_FDAPI_XCOMP_DATA-IPARE
                                            ISELF  = LS_FDAPI_XCOMP_DATA-ISELF
                                            R_DATA = LS_FDAPI_XCOMP_DATA-R_DATA )
                                          ( IPARE = 'OUTPUT'
                                            ISELF = 'CRCONO'
                                            R_DATA = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT ) ) )
                      ) to LT_FDAPI_XCOMP.
      endif.
    endloop.

*** Add added components to overall component list
    append lines of LT_FDAPI_XCOMP to CT_FDAPI_XCOMP.

  endmethod.
  method ADJUST_SVC.

    types: begin of LTY_INKS,
             INDEX type SY-TABIX,
             MATNR type MATNR,
             COVRG type ZVCXI_P0S_COVRG,
             SLDCO type ZVCXI_PXS_SLDCO,
           end of LTY_INKS.

    data: LF_INK_IDX     type SY-TABIX.
    data: LS_INKS        type LTY_INKS.
    data: LT_SVCEL       type /VCXI/CKX_TT_OBJECT,
          LT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP,
          LT_INKS        type table of LTY_INKS,
          LT_XCONG       type ZVCXI_PXSS_TT_XCONG.
    data: LR_SVCEL    type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_HU type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_SVCEL_SI type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT.
    field-symbols: <S_FDAPI_XCOMP>      type ZVCXI_PXSS_S_FDAPI_XCOMP,
                   <S_FDAPI_XCOMP_DATA> type ZVCXI_PXSS_S_FDAPI_XCOMP_DATA,
                   <S_DATA>             type ANY.

***-------------------------------------------------------------------*
    check IS_DATA is not initial.
    check IR_API_FDMDL is bound.

*** Get latest Fast Data Structure
    LT_FDAPI_XCOMP = IR_API_FDMDL->GET_STRC( importing ET_XCONG = LT_XCONG ).

*** Fill Fast Data Information Structures
    loop at LT_FDAPI_XCOMP assigning <S_FDAPI_XCOMP>.

*** Fill exsisting Elements
      loop at <S_FDAPI_XCOMP>-T_DATA assigning <S_FDAPI_XCOMP_DATA>.
        check <S_FDAPI_XCOMP_DATA>-R_SVCEL is bound.
        free: LR_SVCEL, LR_OBJECT.

        case <S_FDAPI_XCOMP_DATA>-ISELF.
          when 'CFG' or 'CRCONO'.
***-------------------------------------------------------------------*
***         Set Product Info fields
            data(LR_SVCEL_PRODI) = YCL_HP_SVC_SRV_VE=>GET_SVCEL_RELATED_CHILD( exporting IF_SVCEL_ID = 'PRODI'
                                                                                         IR_SVCEL    = <S_FDAPI_XCOMP_DATA>-R_SVCEL ).
            if LR_SVCEL_PRODI is bound.
              data(LR_EA_PRODI) = cast YCL_HP_SVCS_EA_PRODI( LR_SVCEL_PRODI->GET_CLSEA( ) ).
              LR_EA_PRODI->SET_PACKU( IF_PACKU = IS_DATA-PACKU ).
            endif.

***-------------------------------------------------------------------*
***         Set HU limits to the max via shipping manager
            if <S_FDAPI_XCOMP_DATA>-ISELF eq 'CFG'.
              data(LR_SVCEL_SHIPMGR) = YCL_HP_SVC_SRV_VE=>GET_SVCEL_RELATED_CHILD( exporting IF_SVCEL_ID = 'SHIPMGR'
                                                                                             IR_SVCEL    = <S_FDAPI_XCOMP_DATA>-R_SVCEL ).
            elseif <S_FDAPI_XCOMP_DATA>-ISELF eq 'CRCONO'.
              LR_SVCEL_SHIPMGR = YCL_HP_SVC_SRV_VE=>GET_SVCEL_RELATED_CHILD( exporting IF_SVCEL_ID = 'SHIPMGR_CRCONO'
                                                                                       IR_SVCEL    = <S_FDAPI_XCOMP_DATA>-R_SVCEL ).

            endif.

***         Do adjustements for shipping manager
            if LR_SVCEL_SHIPMGR is bound.

***           Get All Children of SmartVC Element
              LT_SVCEL = LR_SVCEL_SHIPMGR->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).

***           Loop through all Children of SmartVC Element
              loop at LT_SVCEL into LR_OBJECT.
                try.
                    move LR_OBJECT ?to LR_SVCEL_HU.
                    check LR_SVCEL_HU is bound.
                    data(LR_EA_SHUTY) = cast YCL_HP_SVCU_EA_SHIPUNIT( LR_SVCEL_HU->GET_CLSEA( ) ).
                    check LR_EA_SHUTY is bound.
                    LR_EA_SHUTY->GET_SHUTY( importing EF_SHUTY = data(LF_SHUTY) ).
*                    clear LF_SHUTY.
*                    LR_EA_SHUTY->GET_SHUTY( importing EF_SHUTY = LF_SHUTY ).
                    check LF_SHUTY eq 'UNIT'.
                    exit.

                  catch CX_SY_MOVE_CAST_ERROR.
                    continue.
                endtry.
              endloop.

              if LR_EA_SHUTY is bound.
**             Set max limits
                LR_EA_SHUTY->SET_MAX_LIMITS( ).

                if <S_FDAPI_XCOMP_DATA>-ISELF eq 'CFG'.
***             Set Packaging Material
                  data(LR_SVCEL_PACKMAT_HU) = YCL_HP_SVC_SRV_VE=>GET_SVCEL_RELATED_CHILD( exporting IF_SVCEL_ID = 'PACKMAT_P'
                                                                                                    IR_SVCEL    = LR_SVCEL_HU ).
                  if LR_SVCEL_PACKMAT_HU is bound and IS_DATA-PMATN is not initial.
                    try.
                        data(LR_EA_PACKMAT_HU) = cast ZCL_VCXI_XCSU_EA_PACKMAT( LR_SVCEL_PACKMAT_HU->GET_CLSEA( ) ).
                        LR_EA_PACKMAT_HU->SET_PMATN( exporting IF_PMATN = |{ IS_DATA-PMATN alpha = in }|
                                                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                      catch CX_SY_MOVE_CAST_ERROR.
                    endtry.
                  endif.
                endif.
              endif.

              clear LF_SHUTY.
              free  LR_SVCEL_HU.
***           Loop through all Children of SmartVC Element
              loop at LT_SVCEL into LR_OBJECT.
                try.
                    move LR_OBJECT ?to LR_SVCEL_SI.
                    check LR_SVCEL_SI is bound.
                    data(LR_EA_SHINFO) = cast YCL_HP_SVCU_EA_SHIPINFO( LR_SVCEL_SI->GET_CLSEA( ) ).
                    check LR_EA_SHINFO is bound.
                    LR_EA_SHINFO->SET_BCEAN( IF_BCEAN = '1111111111111' ).
                    exit.
                  catch CX_SY_MOVE_CAST_ERROR.
                    continue.
                endtry.
              endloop.
              free  LR_SVCEL_SI.
            endif.

***-------------------------------------------------------------------*
*** Adjust Printing
          when 'CSTEP_PRINT'.
            if <S_FDAPI_XCOMP_DATA>-R_SVCEL is bound.
              try.
                  data(LR_EA_CSTEP_PRINT) = cast YCL_HP_SVCS_EA_CSTEP_PRINT( <S_FDAPI_XCOMP_DATA>-R_SVCEL->GET_CLSEA( ) ).
                  check LR_EA_CSTEP_PRINT->GET_TPRIN( ) eq IS_DATA-TPRIN.

                  LT_INKS = value #( ( INDEX = 1 MATNR = IS_DATA-MATNR_01 COVRG = IS_DATA-COVRG_01 SLDCO = IS_DATA-SLDCO_01 )
                                     ( INDEX = 2 MATNR = IS_DATA-MATNR_02 COVRG = IS_DATA-COVRG_02 SLDCO = IS_DATA-SLDCO_02 )
                                     ( INDEX = 3 MATNR = IS_DATA-MATNR_03 COVRG = IS_DATA-COVRG_03 SLDCO = IS_DATA-SLDCO_03 )
                                     ( INDEX = 4 MATNR = IS_DATA-MATNR_04 COVRG = IS_DATA-COVRG_04 SLDCO = IS_DATA-SLDCO_04 )
                                     ( INDEX = 5 MATNR = IS_DATA-MATNR_05 COVRG = IS_DATA-COVRG_05 SLDCO = IS_DATA-SLDCO_05 )
                                     ( INDEX = 6 MATNR = IS_DATA-MATNR_06 COVRG = IS_DATA-COVRG_06 SLDCO = IS_DATA-SLDCO_06 )
                                   ).

***               Get All Children of SmartVC Element to get all inks
                  LT_SVCEL = <S_FDAPI_XCOMP_DATA>-R_SVCEL->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ).

**               Loop through all Children of SmartVC Element
                  clear LF_INK_IDX.
                  loop at LT_SVCEL into LR_OBJECT.
                    clear LS_INKS.
                    try.
                        move LR_OBJECT ?to LR_SVCEL.
                        check LR_SVCEL is bound.
                        data(LR_EA_INK) = cast YCL_HP_SVCS_EA_MS_INK( LR_SVCEL->GET_CLSEA( ) ).
                        check LR_EA_INK is bound.

                        add 1 to LF_INK_IDX.
                        read table LT_INKS into LS_INKS index LF_INK_IDX.
                        check SY-SUBRC eq 0.

                        if LS_INKS-MATNR is not initial.
                          LR_EA_INK->SET_MATNR( LS_INKS-MATNR ).
                        endif.
                        if LS_INKS-COVRG is not initial.
                          LR_EA_INK->SET_COVRG( LS_INKS-COVRG ).
                        endif.
                        if LS_INKS-SLDCO is not initial.
                          LR_EA_INK->SET_SLDCO( LS_INKS-SLDCO ).
                        endif.

                      catch CX_SY_MOVE_CAST_ERROR.
                        continue.
                    endtry.
                  endloop.
*
*                  if LR_EA_SHUTY is bound.
*                    LR_EA_SHUTY->SET_MAX_LIMITS( ).
*                    clear LF_SHUTY.
*                  endif.

                catch CX_SY_MOVE_CAST_ERROR.
                  free LR_EA_CSTEP_PRINT.
              endtry.
            endif.

        endcase.
      endloop.
    endloop.

  endmethod.
  method BUILD_IDAT.

  data: LR_SVC     type ref to /VCXI/CL_VKSRA_SVC,
        LR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT,
        LR_SVCEL   type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
        LR_OBJECT  type ref to /VCXI/IF_CKX_OBJECT.

*** Get SmartVC API Instance
  LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = IR_BOB_SDOC->T_VBAP[ POSNR = IF_POSNR ]-CUOBJ ) ).

*** Build Integration Data Service
  CR_IDAT_SVC = ZCL_VCXI_XCI_IDAT_SVC=>CREATE( IS_CMPRK = LR_SVC->S_CMPRK
                                               IF_IEALI = 'X_IDATSPV' ).

*** Get Integration Data Supervisor
  LR_CUELMNT = ZCL_VCXI_XCI_IDAT_SVC=>FIND_CUELMNT( IR_CUPRFL = CR_IDAT_SVC->R_CUPRFL
                                                    IF_IEALI  = CR_IDAT_SVC->F_IEALI ).

*** Get Root Elements
  loop at LR_SVC->GET_SVC_ELEMENTS( IR_SVC_ELEMENT_PARENT = value #( ) ) into LR_OBJECT.
    LR_SVCEL ?= LR_OBJECT.

*** Filter to Supervised Root Elements
    clear LR_OBJECT.
    loop at LR_CUELMNT->/VCXI/IF_VKSC_CUELMNT_SPV~T_SPVRT into LR_OBJECT.
      if LR_OBJECT->GET_ID( ) ne LR_SVCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
        clear LR_OBJECT.
      else.
        exit.
      endif.
    endloop.
    check LR_OBJECT is bound.

*** Fill by SmartVC Element
    CR_IDAT_SVC->FILL_BY_SVCEL( IF_IPARE   = value #( )
                                IF_CPARE   = value #( )
                                IR_SVC     = LR_SVC
                                IR_SVCEL   = LR_SVCEL
                                IR_CUELMNT = cast #( LR_OBJECT ) ).
  endloop.


  endmethod.
  method UPDATE_VIA_FASTD.

    data: LF_IFDMV type ZVCXI_PXSS_IFDMV,
          LF_WERKS type WERKS_D,
          LF_SFDAT type ZVCXI_PXSS_SFDAT.
    data: LS_FDI_CORR   type ZVCXI_P1SS_S_FDI_CORR,
          LS_FDI_DCT    type ZVCXI_P1SS_S_FDI_CSTEP_DCUT,
          LS_FDI_CRPROC type ZVCXI_P1SS_S_FDI_MS_CRPROC,
          LS_FDI_CFG    type YHP_SVCS_S_FDI_CFG.
    data: LT_SVCEL       type /VCXI/CKX_TT_OBJECT,
          LT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP,
          LT_XCONG       type ZVCXI_PXSS_TT_XCONG,
          LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_BL_FDMDL    type ZVCXI_PXSS_TT_BL_FDMDL.
    data: LR_EA_FASTD     type ref to YCL_HP_SVCS_EA_FASTD,
          LR_API_FDMDL    type ref to ZCL_VCXI_PXSS_API_FDMDL,
          LR_BL_FDMDL     type ref to ZCL_VCXI_PXSS_BL_FDMDL,
          LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT,
          LR_APPDATA_INFO type ref to DATA.
    field-symbols: <S_FDAPI_XCOMP>      type ZVCXI_PXSS_S_FDAPI_XCOMP,
                   <S_FDAPI_XCOMP_DATA> type ZVCXI_PXSS_S_FDAPI_XCOMP_DATA,
                   <S_DATA>             type ANY.
    field-symbols: <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    field-symbols: <S_APPDATA_INFO> type ZVCXI_XCS_S_APPDATA_INFO.

***-------------------------------------------------------------------*
*** read config data

***-------------------------------------------------------------------*
*** Get Fast Data
    LT_SVCEL = IR_SVC->GET_SVC_ELEMENTS( IF_IEALI = 'UI_FASTD' ).
    check LT_SVCEL is not initial.

    LR_EA_FASTD ?= cast /VCXI/CL_VKSRA_SVC_ELEMENT( LT_SVCEL[ 1 ] )->GET_CLSEA( ).
    check LR_EA_FASTD is bound.

**** Get Fast Data Structure
    data(LT_FDMDL) = LR_EA_FASTD->GET_FDMDL( ).
    if LT_FDMDL is not initial.
      loop at LT_FDMDL into data(LR_FDMDL).
        LR_FDMDL->DELETE( ).
      endloop.
    endif.

*** Read application data
    LR_APPDATA_INFO = IR_SVC->GET_APPDATA_INFO( ).
    check LR_APPDATA_INFO is bound.
    assign LR_APPDATA_INFO->* to <S_APPDATA_INFO>.

*** Create Fast Data Model for Corrugated Inline Product
*    case S_DATA-PTYPE.
*      when C_PTYPE_INL. "Inline.
*        LF_IFDMV = ZCL_VCXI_P1SS_BL_FDMDL=>C_IFDMV_INL.
*      when C_PTYPE_DCT. "Die Cut
*        LF_IFDMV = ZCL_VCXI_P1SS_BL_FDMDL=>C_IFDMV_DCT.
*      when C_PTYPE_SHT. "Sheet
*        LF_IFDMV = ZCL_VCXI_P1SS_BL_FDMDL=>C_IFDMV_SHT.
*    endcase.

    LR_API_FDMDL = LR_EA_FASTD->CREATE_FDMDL( IF_FDMDL = 'CFG'
                                              IF_IFDMV = LF_IFDMV ).

*** Get Fast Data Structure
    LT_FDAPI_XCOMP = LR_API_FDMDL->GET_STRC( ).

*** Fill Fast Data Information Structures
    loop at LT_FDAPI_XCOMP assigning <S_FDAPI_XCOMP>.

*** Fill exsisting Elements
      loop at <S_FDAPI_XCOMP>-T_DATA assigning <S_FDAPI_XCOMP_DATA>.
        assign <S_FDAPI_XCOMP_DATA>-R_DATA->* to <S_DATA>.
        case <S_FDAPI_XCOMP_DATA>-ISELF.
          when 'CORR'.
            LS_FDI_CORR = corresponding #( <S_DATA> ).
*            LS_FDI_CORR-SABOA = LS_DATA-SABOA.
            move-corresponding LS_FDI_CORR to <S_DATA>.
          when 'CFG'.
            LS_FDI_CFG = corresponding #( <S_DATA> ).
*            LS_FDI_CFG-MAKTX = LS_DATA-MAKTX.
*            LS_FDI_CFG-KDPTX = LS_DATA-MAKTX.
*            LS_FDI_CFG-KDMAT = LS_DATA-KDMAT.
            if LF_IFDMV = ZCL_VCXI_P1SS_BL_FDMDL=>C_IFDMV_SHT.
              LS_FDI_CFG-FEFCO = '0110'.
            else.
*              LS_FDI_CFG-FEFCO = LS_DATA-PRSTY.
            endif.

*            LS_FDI_CFG-PROLE = LS_DATA-PROLE.
*            LS_FDI_CFG-PROWI = LS_DATA-PROWI.
*            LS_FDI_CFG-PROHE = LS_DATA-PROHE.
*            LS_FDI_CFG-SHTPW = LS_DATA-SHTPW.
*            LS_FDI_CFG-SHTPL = LS_DATA-SHTPL.

*            if LS_DATA-PROPT is not initial.
*              LS_FDI_CFG-PROPT = LS_DATA-PROPT.
*            endif.

            move-corresponding LS_FDI_CFG to <S_DATA>.
          when 'CSTEP_DCUT'.
            LS_FDI_DCT = corresponding #( <S_DATA> ).
*            LS_FDI_DCT-TDCUT = LS_DATA-TDCUT.
*            LS_FDI_DCT-NOUTL = LS_DATA-NOUTL.
*            LS_FDI_DCT-NOUTW = LS_DATA-NOUTW.
*            move-corresponding LS_DATA-S_SHTPW to LS_FDI_DCT-S_SHTNW.
*            move-corresponding LS_DATA-S_SHTPL to LS_FDI_DCT-S_SHTNL.
*            move-corresponding LS_FDI_DCT to <S_DATA>.
        endcase.
      endloop.

*** Add Printing Step(Outside/Inside)
*      if LS_DATA-TPRIN is not initial.
*        if not LINE_EXISTS( <S_FDAPI_XCOMP>-T_DATA[ ISELF = 'CSTEP_PRINT' ] ).
*          append value #( IPARE = 'CONV'
*                          ISELF = 'CSTEP_PRINT'
*                          R_DATA = new ZVCXI_P1SS_S_FDI_CSTEP_PRINT( TPRIN = LS_DATA-TPRIN
*                                                                     PRSID = LS_DATA-PRSID
*                                                                     NOCOL = LS_DATA-NOCOL )
*                        ) to <S_FDAPI_XCOMP>-T_DATA.
*        endif.
*      endif.

    endloop.

*** Set Fast Data Structure
    LR_API_FDMDL->SET_STRC( IT_FDAPI_XCOMP = LT_FDAPI_XCOMP ).

***   Renew API
    LT_FDMDL = LR_EA_FASTD->GET_FDMDL( ).
    read table LT_FDMDL into LR_API_FDMDL index 1.
    clear: LT_FDAPI_XCOMP, LT_XCONG.
    LT_FDAPI_XCOMP = LR_API_FDMDL->GET_STRC( importing ET_XCONG = LT_XCONG ).

*** Handle SFG
    if <S_APPDATA_INFO> is assigned and <S_APPDATA_INFO>-WERKS eq '2003'.
      ADJ_SRCIN_CORR_TO_SFG( changing  CT_FDAPI_XCOMP = LT_FDAPI_XCOMP
                                       CT_XCONG       = LT_XCONG ).
*** Set Fast Data Structure
      LR_API_FDMDL->SET_STRC( exporting IT_FDAPI_XCOMP = LT_FDAPI_XCOMP
                                        IT_XCONG       = LT_XCONG ).

***   Renew API to have both components (FG + SFG)
      LT_FDMDL = LR_EA_FASTD->GET_FDMDL( ).
      read table LT_FDMDL into LR_API_FDMDL index 1.

    endif.

****-------------------------------------------------------------------*
**** Handle SFG
*    if <S_APPDATA_INFO> is assigned and <S_APPDATA_INFO>-WERKS eq '2003'.
*
****   Renew API to have both components (FG + SFG)
*      LT_FDMDL = LR_EA_FASTD->GET_FDMDL( ).
*      read table LT_FDMDL into LR_API_FDMDL index 1.
*      clear: LT_FDAPI_XCOMP, LT_XCONG.
*      LT_FDAPI_XCOMP = LR_API_FDMDL->GET_STRC( importing ET_XCONG = LT_XCONG ).
*
*      ADJ_SRCIN_CORR_TO_SFG( changing  CT_FDAPI_XCOMP = LT_FDAPI_XCOMP
*                                       CT_XCONG       = LT_XCONG ).
**** Set Fast Data Structure
*      LR_API_FDMDL->SET_STRC( exporting IT_FDAPI_XCOMP = LT_FDAPI_XCOMP
*                                        IT_XCONG       = LT_XCONG ).
*
****   Renew API to have both components (FG + SFG)
*      LT_FDMDL = LR_EA_FASTD->GET_FDMDL( ).
*      read table LT_FDMDL into LR_API_FDMDL index 1.
*
*    endif.

***-------------------------------------------------------------------*
*** Manipulate data outside Fast Data
*    ADJUST_SVC( exporting IS_DATA      = LS_DATA
*                          IR_API_FDMDL = LR_API_FDMDL ).

*** Display SVC for testing
    if 1 = 2.
      IR_SVC->START_UI( ).
    endif.

  endmethod.
