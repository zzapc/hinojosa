
class YCL_HP_SVCS_PR_TOOL definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_PARID_ETCST type /VCXI/VKS_PARID value 'YHP_SVC_ETCST' ##NO_TEXT.
  constants C_PARID_LIFNR type /VCXI/VKS_PARID value 'ZVCXI_XC_LIFNR' ##NO_TEXT.
  constants C_PARID_TPCST type /VCXI/VKS_PARID value 'YHP_SVC_TPCST' ##NO_TEXT.
  constants C_PARID_TLLTI type /VCXI/VKS_PARID value 'YHP_SVC_TLLTI' ##NO_TEXT.
  constants C_PARID_TLEXT type /VCXI/VKS_PARID value 'YHP_SVC_TLEXT' ##NO_TEXT.
  constants C_PARID_MRKUP type /VCXI/VKS_PARID value 'YHP_SVC_MRKUP' ##NO_TEXT.
  constants C_PARID_TLPRC type /VCXI/VKS_PARID value 'YHP_SVC_TLPRC' ##NO_TEXT.
  constants C_PARID_SOCTR type /VCXI/VKS_PARID value 'YHP_SVC_SOCTR' ##NO_TEXT.
  constants C_PARID_TLORD type /VCXI/VKS_PARID value 'YHP_SVC_TLORD' ##NO_TEXT.
  constants C_PARID_TLCCU type /VCXI/VKS_PARID value 'YHP_SVC_TLCCU' ##NO_TEXT.
  constants C_PARID_ITCST type /VCXI/VKS_PARID value 'YHP_SVC_ITCST' ##NO_TEXT.
  constants C_PARID_AMORT type /VCXI/VKS_PARID value 'YHP_SVC_AMORT' ##NO_TEXT.
  constants C_PARID_TLCPT type /VCXI/VKS_PARID value 'YHP_SVC_TLCPT' ##NO_TEXT.
  constants C_PARID_LEGMA type /VCXI/VKS_PARID value 'YHP_SVC_LEGMA' ##NO_TEXT.
  constants C_IPRVT_HP_TOOL type /VCXI/VKSC_IPRVT value 'YHP_SVCS_TOOL' ##NO_TEXT.

  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods GET_ETCST
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_ETCST) type YHP_SVCS_S_ETCST
    raising
      /VCXI/CX_CKX .
  methods GET_LIFNR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_LIFNR) type LIFNR
    raising
      /VCXI/CX_CKX .
  methods GET_TPCST
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_TPCST) type YHP_SVCS_S_TPCST
    raising
      /VCXI/CX_CKX .
  methods GET_TLLTI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_TLLTI) type YHP_SVCS_S_TLLTI
    raising
      /VCXI/CX_CKX .
  methods GET_TLEXT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_TLEXT) type YHP_SVCS_TLEXT
    raising
      /VCXI/CX_CKX .
  methods GET_MRKUP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_MRKUP) type YHP_SVCS_S_MRKUP
    raising
      /VCXI/CX_CKX .
  methods GET_TLPRC
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_TLPRC) type YHP_SVCS_S_TLPRC
    raising
      /VCXI/CX_CKX .
  methods GET_SOCTR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_SOCTR) type YHP_SVCS_SOCTR
    raising
      /VCXI/CX_CKX .
  methods GET_TLORD
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_TLORD) type YHP_SVCS_TLORD
    raising
      /VCXI/CX_CKX .
  methods GET_TLCCU
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_TLCCU) type YHP_SVCS_S_TLCCU
    raising
      /VCXI/CX_CKX .
  methods GET_ITCST
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_ITCST) type YHP_SVCS_S_ITCST
    raising
      /VCXI/CX_CKX .
  methods GET_AMORT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_AMORT) type YHP_SVCS_S_AMORT
    raising
      /VCXI/CX_CKX .
  methods GET_TLCPT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_TLCPT) type YHP_SVCS_S_TLCPT
    raising
      /VCXI/CX_CKX .
  methods GET_LEGMA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_LEGMA) type YHP_SVCS_LEGMA
    raising
      /VCXI/CX_CKX .
  methods SET_ETCST
    importing
      !IS_ETCST type YHP_SVCS_S_ETCST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_LIFNR
    importing
      !IF_LIFNR type LIFNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TPCST
    importing
      !IS_TPCST type YHP_SVCS_S_TPCST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TLLTI
    importing
      !IS_TLLTI type YHP_SVCS_S_TLLTI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TLEXT
    importing
      !IF_TLEXT type YHP_SVCS_TLEXT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MRKUP
    importing
      !IS_MRKUP type YHP_SVCS_S_MRKUP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TLPRC
    importing
      !IS_TLPRC type YHP_SVCS_S_TLPRC
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SOCTR
    importing
      !IF_SOCTR type YHP_SVCS_SOCTR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TLORD
    importing
      !IF_TLORD type YHP_SVCS_TLORD
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TLCCU
    importing
      !IS_TLCCU type YHP_SVCS_S_TLCCU
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_ITCST
    importing
      !IS_ITCST type YHP_SVCS_S_ITCST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AMORT
    importing
      !IS_AMORT type YHP_SVCS_S_AMORT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TLCPT
    importing
      !IS_TLCPT type YHP_SVCS_S_TLCPT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_LEGMA
    importing
      !IF_LEGMA type YHP_SVCS_LEGMA
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_USER
    raising
      /VCXI/CX_CKX .
  methods GET_CSTEP_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_O_ETCST_CHANGED type /VCXI/VKSC_IEVNT value 'ETCST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LIFNR_CHANGED type /VCXI/VKSC_IEVNT value 'LIFNR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TPCST_CHANGED type /VCXI/VKSC_IEVNT value 'TPCST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TLLTI_CHANGED type /VCXI/VKSC_IEVNT value 'TLLTI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TLEXT_CHANGED type /VCXI/VKSC_IEVNT value 'TLEXT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MRKUP_CHANGED type /VCXI/VKSC_IEVNT value 'MRKUP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TLPRC_CHANGED type /VCXI/VKSC_IEVNT value 'TLPRC_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SOCTR_CHANGED type /VCXI/VKSC_IEVNT value 'SOCTR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TLORD_CHANGED type /VCXI/VKSC_IEVNT value 'TLORD_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TLCCU_CHANGED type /VCXI/VKSC_IEVNT value 'TLCCU_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_ITCST_CHANGED type /VCXI/VKSC_IEVNT value 'ITCST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_AMORT_CHANGED type /VCXI/VKSC_IEVNT value 'AMORT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TLCPT_CHANGED type /VCXI/VKSC_IEVNT value 'TLCPT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LEGMA_CHANGED type /VCXI/VKSC_IEVNT value 'LEGMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_TLPRC type /VCXI/VKSC_IEVNT value 'RECALC_TLPRC' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_ITCST type /VCXI/VKSC_IEVNT value 'RECALC_ITCST' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_TLCPT type /VCXI/VKSC_IEVNT value 'RECALC_TLCPT' ##NO_TEXT.

  methods CHECK_TLORD
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TLCCU
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_AMORT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods REQ_TLCCU
    returning
      value(RF_RESULT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods REQ_AMORT
    returning
      value(RF_RESULT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_TLPRC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_ITCST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_TLCPT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SVCS_PR_TOOL definition
class YCL_HP_SVCS_PR_TOOL implementation.
  method CHECK_AMORT.

    check ME->REQ_AMORT( ) eq ABAP_TRUE.

*** Check Amortization
    if ME->GET_AMORT( )-AMORT is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Amortization is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '015' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Amortization is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '016' ).
      endif.
    endif.

  endmethod.
  method CHECK_TLCCU.

    check ME->REQ_TLCCU( ) eq ABAP_TRUE.

*** Check Tool Coverage by Customer
    if ME->GET_TLCCU( )-TLCCU gt 100.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Tool Coverage by Customer exceeding 100 percent is not allowed.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '014' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Tool Coverage by Customer is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '012' ).
      endif.
    endif.

  endmethod.
  method CHECK_TLORD.

*** Check Tool Order
    if ME->GET_TLORD( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Tool Order is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '010' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Tool Order is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '011' ).
      endif.
    endif.

  endmethod.
  method DO_FREE.

    ME->R_GATE->DO_FREE( ).

  endmethod.
  method GET_AMORT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AMORT ).
    move LS_PARAM-ATFLV to RS_AMORT-AMORT.
    move LS_PARAM-UNIT  to RS_AMORT-AMORT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CSTEP_DESCR.

    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_CSTEP type ref to ZCL_VCXI_PXSS_PR_CSTEP.


    LR_GATE = ME->R_GATE->GET_PARENT( ).

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_CSTEP.
        RF_DESCR = LR_PR_CSTEP->GET_DESCR( ).
      catch CX_SY_MOVE_CAST_ERROR.
        RF_DESCR = LR_GATE->GET_DESCR( ).
    endtry.

  endmethod.
  method GET_ETCST.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ETCST ).
    move LS_PARAM-ATFLV to RS_ETCST-ETCST.
    move LS_PARAM-CURKY to RS_ETCST-ETCST_CURR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_ITCST.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ITCST ).
    move LS_PARAM-ATFLV to RS_ITCST-ITCST.
    move LS_PARAM-CURKY to RS_ITCST-ITCST_CURR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_LEGMA.

    RF_LEGMA = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LEGMA )-ATWRT.

    check EF_SETBY is requested.
    EF_SETBY = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LEGMA )-SETBY.

  endmethod.
  method GET_LIFNR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR  ).
    move LS_PARAM-ATWRT to RF_LIFNR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_MRKUP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MRKUP ).
    move LS_PARAM-ATFLV to RS_MRKUP-MRKUP.
    move LS_PARAM-UNIT  to RS_MRKUP-MRKUP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SOCTR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SOCTR  ).
    move LS_PARAM-ATWRT to RF_SOCTR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Tool Order
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TLORD( ) ).

*** Check Tool Coverage by Customer
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TLCCU( ) ).

*** Check Amortization
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_AMORT( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Tool Order
    ME->CHECK_TLORD( IR_MESSAGE = IR_MESSAGE ).

*** Check Tool Coverage by Customer
    ME->CHECK_TLCCU( IR_MESSAGE = IR_MESSAGE ).

*** Check Amortization
    ME->CHECK_AMORT( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_TLCCU.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLCCU ).
    move LS_PARAM-ATFLV to RS_TLCCU-TLCCU.
    move LS_PARAM-UNIT  to RS_TLCCU-TLCCU_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TLCPT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLCPT ).
    move LS_PARAM-ATFLV to RS_TLCPT-TLCPT.
    move LS_PARAM-CURKY to RS_TLCPT-TLCPT_CURR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TLEXT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLEXT  ).
    move LS_PARAM-ATWRT to RF_TLEXT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TLLTI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLLTI ).
    move LS_PARAM-ATFLV to RS_TLLTI-TLLTI.
    move LS_PARAM-UNIT  to RS_TLLTI-TLLTI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TLORD.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLORD  ).
    move LS_PARAM-ATWRT to RF_TLORD.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TLPRC.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLPRC ).
    move LS_PARAM-ATFLV to RS_TLPRC-TLPRC.
    move LS_PARAM-CURKY to RS_TLPRC-TLPRC_CURR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_TPCST.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPCST ).
    move LS_PARAM-ATFLV to RS_TPCST-TPCST.
    move LS_PARAM-CURKY to RS_TPCST-TPCST_CURR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_TLPRC.
        ME->HANDLE_RECALC_TLPRC( ).

      when C_IEVNT_I_RECALC_ITCST.
        ME->HANDLE_RECALC_ITCST( ).

      when C_IEVNT_I_RECALC_TLCPT.
        ME->HANDLE_RECALC_TLCPT( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_ITCST.

    data: LS_ETCST type YHP_SVCS_S_ETCST,
          LS_TPCST type YHP_SVCS_S_TPCST,
          LS_TLPRC type YHP_SVCS_S_TLPRC,
          LS_TLCCU type YHP_SVCS_S_TLCCU,
          LS_ITCST type YHP_SVCS_S_ITCST.


    LS_ETCST = ME->GET_ETCST( ).
    LS_TPCST = ME->GET_TPCST( ).
    LS_TLPRC = ME->GET_TLPRC( ).
    LS_TLCCU = ME->GET_TLCCU( ).

*** IMPROVED CALCULATIONS WITH CATCH OVERFLOW (& NEGATIVE VALUE)
    LS_ITCST = ME->GET_ITCST( ).
    LS_ITCST-ITCST = ( LS_ETCST-ETCST + LS_TPCST-TPCST       ) -
                     ( LS_TLPRC-TLPRC * LS_TLCCU-TLCCU / 100 ).

*** When result is negative, set the Internal Tool Cost as zero
    if LS_ITCST-ITCST lt 0.
      move 0 to LS_ITCST-ITCST.

*** Make Coverage by Customer 100%
      move 100 to LS_TLCCU-TLCCU.
      ME->SET_TLCCU( IS_TLCCU = LS_TLCCU ).
    endif.
    .
    ME->SET_ITCST( IS_ITCST = LS_ITCST ).

*    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTWI-SHTWI
*                                                          IF_CALCV_UOM_1 = LS_SHTWI-SHTWI_UOM
*                                                          IF_CALCV_2     = LS_TRWIT-TRWIT
*                                                          IF_CALCV_UOM_2 = LS_TRWIT-TRWIT_UOM
*                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
*                                                          IF_UOM         = LS_SHTWI-SHTWI_UOM
*                                                importing EF_CALCV       = LS_SHTNW-SHTNW
*                                                          EF_CALCV_UOM   = LS_SHTNW-SHTNW_UOM ).

  endmethod.
  method HANDLE_RECALC_TLCPT.

    data: LS_ITCST type YHP_SVCS_S_ITCST,
          LS_AMORT type YHP_SVCS_S_AMORT,
          LS_TLCPT type YHP_SVCS_S_TLCPT.


    LS_ITCST = ME->GET_ITCST( ).
    LS_AMORT = ME->GET_AMORT( ).

*** IMPROVED CALCULATIONS WITH CATCH OVERFLOW
    LS_TLCPT = ME->GET_TLCPT( ).
    clear LS_TLCPT-TLCPT.

    if LS_AMORT-AMORT is not initial.
      LS_TLCPT-TLCPT = ( LS_ITCST-ITCST / LS_AMORT-AMORT ) * 1000.
    endif.

    ME->SET_TLCPT( IS_TLCPT = LS_TLCPT ).

*    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTWI-SHTWI
*                                                          IF_CALCV_UOM_1 = LS_SHTWI-SHTWI_UOM
*                                                          IF_CALCV_2     = LS_TRWIT-TRWIT
*                                                          IF_CALCV_UOM_2 = LS_TRWIT-TRWIT_UOM
*                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
*                                                          IF_UOM         = LS_SHTWI-SHTWI_UOM
*                                                importing EF_CALCV       = LS_SHTNW-SHTNW
*                                                          EF_CALCV_UOM   = LS_SHTNW-SHTNW_UOM ).

  endmethod.
  method HANDLE_RECALC_TLPRC.

    data: LS_ETCST type YHP_SVCS_S_ETCST,
          LS_TPCST type YHP_SVCS_S_TPCST,
          LS_MRKUP type YHP_SVCS_S_MRKUP,
          LS_TLPRC type YHP_SVCS_S_TLPRC.


    LS_ETCST = ME->GET_ETCST( ).
    LS_TPCST = ME->GET_TPCST( ).
    LS_MRKUP = ME->GET_MRKUP( ).

*** IMPROVED CALCULATIONS WITH CATCH OVERFLOW
    LS_TLPRC = ME->GET_TLPRC( ).
    LS_TLPRC-TLPRC = ( LS_ETCST-ETCST + LS_TPCST-TPCST ) * ( ( 100 + LS_MRKUP-MRKUP ) / 100 ).
    ME->SET_TLPRC( IS_TLPRC = LS_TLPRC ).

*    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTWI-SHTWI
*                                                          IF_CALCV_UOM_1 = LS_SHTWI-SHTWI_UOM
*                                                          IF_CALCV_2     = LS_TRWIT-TRWIT
*                                                          IF_CALCV_UOM_2 = LS_TRWIT-TRWIT_UOM
*                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
*                                                          IF_UOM         = LS_SHTWI-SHTWI_UOM
*                                                importing EF_CALCV       = LS_SHTNW-SHTNW
*                                                          EF_CALCV_UOM   = LS_SHTNW-SHTNW_UOM ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method REQ_AMORT.

    check ME->REQ_TLCCU( ) eq ABAP_TRUE.

    if ME->GET_TLCCU( )-TLCCU lt 100.
      RF_RESULT = ABAP_TRUE.
    endif.

  endmethod.
  method REQ_TLCCU.

    if ME->GET_ETCST( )-ETCST is not initial.
      RF_RESULT = ABAP_TRUE.
    endif.

  endmethod.
  method SET_AMORT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_AMORT ).

    LS_PARAM-ATFLV = IS_AMORT-AMORT.
    LS_PARAM-UNIT  = IS_AMORT-AMORT_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_AMORT_CHANGED ).
    endif.

  endmethod.
  method SET_ETCST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ETCST ).

    LS_PARAM-ATFLV = IS_ETCST-ETCST.
    LS_PARAM-CURKY = IS_ETCST-ETCST_CURR.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ETCST_CHANGED ).
    endif.

  endmethod.
  method SET_ITCST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ITCST ).

    LS_PARAM-ATFLV = IS_ITCST-ITCST.
    LS_PARAM-CURKY = IS_ITCST-ITCST_CURR.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ITCST_CHANGED ).
    endif.

  endmethod.
  method SET_LEGMA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LEGMA ).

    LS_PARAM-ATWRT = IF_LEGMA.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
*      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LEGMA_CHANGED ).
    endif.

  endmethod.
  method SET_LIFNR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).

    LS_PARAM-ATWRT = IF_LIFNR.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LIFNR_CHANGED ).
    endif.

  endmethod.
  method SET_MRKUP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MRKUP ).

    LS_PARAM-ATFLV = IS_MRKUP-MRKUP.
    LS_PARAM-UNIT  = IS_MRKUP-MRKUP_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MRKUP_CHANGED ).
    endif.

  endmethod.
  method SET_SOCTR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SOCTR ).

    LS_PARAM-ATWRT = IF_SOCTR.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SOCTR_CHANGED ).
    endif.

  endmethod.
  method SET_TLCCU.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLCCU ).

    LS_PARAM-ATFLV = IS_TLCCU-TLCCU.
    LS_PARAM-UNIT  = IS_TLCCU-TLCCU_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TLCCU_CHANGED ).
    endif.

  endmethod.
  method SET_TLCPT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLCPT ).

    LS_PARAM-ATFLV = IS_TLCPT-TLCPT.
    LS_PARAM-CURKY = IS_TLCPT-TLCPT_CURR.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TLCPT_CHANGED ).
    endif.

  endmethod.
  method SET_TLEXT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLEXT ).

    LS_PARAM-ATWRT = IF_TLEXT.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TLEXT_CHANGED ).
    endif.

  endmethod.
  method SET_TLLTI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLLTI ).

    LS_PARAM-ATFLV = IS_TLLTI-TLLTI.
    LS_PARAM-UNIT  = IS_TLLTI-TLLTI_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TLLTI_CHANGED ).
    endif.

  endmethod.
  method SET_TLORD.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLORD ).

    LS_PARAM-ATWRT = IF_TLORD.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TLORD_CHANGED ).
    endif.

  endmethod.
  method SET_TLPRC.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLPRC ).

    LS_PARAM-ATFLV = IS_TLPRC-TLPRC.
    LS_PARAM-CURKY = IS_TLPRC-TLPRC_CURR.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TLPRC_CHANGED ).
    endif.

  endmethod.
  method SET_TPCST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPCST ).

    LS_PARAM-ATFLV = IS_TPCST-TPCST.
    LS_PARAM-CURKY = IS_TPCST-TPCST_CURR.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TPCST_CHANGED ).
    endif.

  endmethod.
