
class YCL_HP_SVCP_PR_MACHINE_PTP definition
  public
  inheriting from ZCL_VCXI_PCSP_PR_MACHINE_PTP
  create public .

public section.

  constants C_PARID_HFLAG type /VCXI/VKS_PARID value 'YHP_SVC_HFLAG' ##NO_TEXT.
  constants C_IPRVT_XCS_ORGXC type /VCXI/VKSC_IPRVT value 'YHP_SVCP_ORGXC' ##NO_TEXT.

  methods GET_HFLAG
    returning
      value(RF_HFLAG) type YHP_SVCS_HFLAG
    raising
      /VCXI/CX_CKX .
  methods GET_SBLARO
    returning
      value(RS_SBLARO) type ZVCXI_PXS_S_SBLAR
    raising
      /VCXI/CX_CKX .
  methods GET_SBLAR
    returning
      value(RS_SBLAR) type ZVCXI_PXS_S_SBLAR
    raising
      /VCXI/CX_CKX .
  methods GET_AWOPQ
    returning
      value(RS_AWOPQ) type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
protected section.

  methods SET_HFLAG
    importing
      !IF_HFLAG type YHP_SVCS_HFLAG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_ORGXC
    exporting
      !ER_CLSPR type ref to ZCL_VCXI_XCSP_PR_ORGXC
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SVCP_PR_MACHINE_PTP definition
class YCL_HP_SVCP_PR_MACHINE_PTP implementation.
  method GET_AWOPQ.

    try.
        RS_AWOPQ = corresponding #( ME->R_GATE->GET_PARAM( IF_PARID = YIF_HP_SVCR_AREA_WGT=>C_PARID_AWOPQ ) mapping OPQTY    = ATFLV
                                                                                                                    OPQTY_UOM = UNIT ).

      catch /VCXI/CX_CKX into data(LR_VCXI_CX).
        LR_VCXI_CX->F_MSGTY = 'W'.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_VCXI_CX ).
    endtry.

  endmethod.
  method GET_HFLAG.


  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HFLAG ).
  move LS_PARAM-ATWRT to RF_HFLAG.

  endmethod.
  method GET_PRVDR_ORGXC.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.

*** Get Providers
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = C_IPRVT_XCS_ORGXC
                                     IF_INUSE = ABAP_TRUE ).

*** Find Provider
    loop at LT_GATE into RR_GATE.
      try.
          ER_CLSPR = cast #( RR_GATE->R_CLSPR ).
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
          free RR_GATE.
      endtry.
    endloop.

  endmethod.
  method GET_SBLAR.

    try.
        data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = YIF_HP_SVCR_AREA_WGT=>C_PARID_SBLAR ).
        move: LS_PARAM-ATFLV to RS_SBLAR-SBLAR,
              LS_PARAM-UNIT  to RS_SBLAR-SBLAR_UOM.

      catch /VCXI/CX_CKX into data(LR_VCXI_CX).
        LR_VCXI_CX->F_MSGTY = 'W'.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_VCXI_CX ).
    endtry.

  endmethod.
  method GET_SBLARO.

    data: LS_SBLAR type ZVCXI_PXS_S_SBLAR,
          LS_AWOPQ type /VCXI/VSMR_S_OPQTY,
          LS_EXQTY type /VCXI/VKCR_S_EXQTY.
    data: LR_PR_ORGXC type ref to ZCL_VCXI_XCSP_PR_ORGXC,
          LR_APPDATA  type ref to /VCXI/CL_VKSR_APPDATA.

***-------------------------------------------------------------------*
*** Get Evaluation Qty
    ME->GET_PRVDR_ORGXC( importing ER_CLSPR = LR_PR_ORGXC ).
    if LR_PR_ORGXC is bound.
      LS_EXQTY = LR_PR_ORGXC->GET_EXQTY( ).
    endif.

*** Get Operation Qty from Area/Weight node
    LS_AWOPQ = ME->GET_AWOPQ( ).
    LS_SBLAR = ME->GET_SBLAR( ).

*** Get application data
    LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***-------------------------------------------------------------------*
*** Recalculate if needed
*--- Change JBL 15/09/2022 Compare same data elements
    data LS_OPQTY like LS_EXQTY.
    move:LR_APPDATA->S_OPQTY-OPQTY to LS_OPQTY-EXQTY,
         LR_APPDATA->S_OPQTY-OPQTY_UOM to LS_OPQTY-EXQTY_UOM.
*if LS_EXQTY ne LR_APPDATA->S_OPQTY.
    if LS_EXQTY ne LS_OPQTY.
*End of change JBL
*JBL 09.11.2023 New try catch to avoid shrot Dump
      try.
          LS_AWOPQ-OPQTY = ( LS_EXQTY-EXQTY / LR_APPDATA->S_OPQTY-OPQTY ) * LS_AWOPQ-OPQTY.
          RS_SBLARO-SBLAR     = LS_SBLAR-SBLAR * LS_AWOPQ-OPQTY.
          RS_SBLARO-SBLAR_UOM = LS_SBLAR-SBLAR_UOM.
        catch CX_ROOT into data(LR_CX_ROOT).
          try.
              /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_ROOT ).
            catch /VCXI/CX_CKX into data(LR_CX_CKX).
              ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_CX_CKX ).
          endtry.
      endtry.

    else.
      try.
          data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = YIF_HP_SVCR_AREA_WGT=>C_PARID_SBLARO ).
          move: LS_PARAM-ATFLV to RS_SBLARO-SBLAR,
                LS_PARAM-UNIT  to RS_SBLARO-SBLAR_UOM.

        catch /VCXI/CX_CKX into data(LR_VCXI_CX).
          LR_VCXI_CX->F_MSGTY = 'W'.
          ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_VCXI_CX ).
      endtry.

    endif.

  endmethod.
  method SET_HFLAG.

   data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HFLAG ).

  move IF_HFLAG to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
