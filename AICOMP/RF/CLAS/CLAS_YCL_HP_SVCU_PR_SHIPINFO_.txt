
class YCL_HP_SVCU_PR_SHIPINFO definition
  public
  inheriting from ZCL_VCXI_XCSU_PR_SHIPINFO
  create public .

public section.

  constants C_PARID_BCEAN type /VCXI/VKS_PARID value 'YHP_SVC_BCEAN' ##NO_TEXT.
  constants C_PARID_INCPA type /VCXI/VKS_PARID value 'YHP_SVC_INCPA' ##NO_TEXT.
  constants C_PARID_RFBOX type /VCXI/VKS_PARID value 'YHP_SVC_RFBOX' ##NO_TEXT.
  constants C_PARID_PBCOD type /VCXI/VKS_PARID value 'YHP_SVC_PBCOD' ##NO_TEXT.
  constants C_PARID_PSSTW type /VCXI/VKS_PARID value 'YHP_SVC_PSSTW' ##NO_TEXT.
  constants C_PARID_PLPOS type /VCXI/VKS_PARID value 'YHP_SVC_PLPOS' ##NO_TEXT.
  constants C_PARID_PRPOS type /VCXI/VKS_PARID value 'YHP_SVC_PRPOS' ##NO_TEXT.
  constants C_PARID_PLROT type /VCXI/VKS_PARID value 'YHP_SVC_PLROT' ##NO_TEXT.
  constants C_PARID_LDROT type /VCXI/VKS_PARID value 'YHP_SVC_LDROT' ##NO_TEXT.
  constants C_PARID_STRPS type /VCXI/VKS_PARID value 'YHP_SVC_STRPS' ##NO_TEXT.
  constants C_PARID_STRPE type /VCXI/VKS_PARID value 'YHP_SVC_STRPE' ##NO_TEXT.
  constants C_PARID_WRPPS type /VCXI/VKS_PARID value 'YHP_SVC_WRPPS' ##NO_TEXT.
  constants C_PARID_LNPS type /VCXI/VKS_PARID value 'YHP_SVC_LNPS' ##NO_TEXT.
  constants C_SHUTY_UNIT type ZVCXI_XCSU_SHUTY value 'UNIT' ##NO_TEXT.
  constants C_PARID_WERKS type /VCXI/VKS_PARID value 'ZVCXI_XC_WERKS' ##NO_TEXT.

  methods GET_BCEAN
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_BCEAN) type YHP_SVCS_BCEAN
    raising
      /VCXI/CX_CKX .
  methods SET_BCEAN
    importing
      !IF_BCEAN type YHP_SVCS_BCEAN optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_INCPA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_INCPA) type YHP_SVCS_INCPA
    raising
      /VCXI/CX_CKX .
  methods SET_INCPA
    importing
      !IF_INCPA type YHP_SVCS_INCPA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_RFBOX
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_RFBOX) type YHP_SVCS_RFBOX
    raising
      /VCXI/CX_CKX .
  methods SET_RFBOX
    importing
      !IF_RFBOX type YHP_SVCS_RFBOX optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PBCOD
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PBCOD) type YHP_SVCS_PBCOD
    raising
      /VCXI/CX_CKX .
  methods GET_ICONT
    returning
      value(RF_ICONT) type ZVCXI_P0S_ICONT
    raising
      /VCXI/CX_CKX .
  methods SET_PBCOD
    importing
      !IF_PBCOD type YHP_SVCS_PBCOD optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PSSTW
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PSSTW) type YHP_SVCS_PSSTW
    raising
      /VCXI/CX_CKX .
  methods SET_PSSTW
    importing
      !IF_PSSTW type YHP_SVCS_PSSTW optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PLPOS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PLPOS) type YHP_SVCS_PLPOS
    raising
      /VCXI/CX_CKX .
  methods SET_PLPOS
    importing
      !IF_PLPOS type YHP_SVCS_PLPOS optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PRPOS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PRPOS) type YHP_SVCS_PRPOS
    raising
      /VCXI/CX_CKX .
  methods SET_PRPOS
    importing
      !IF_PRPOS type YHP_SVCS_PRPOS optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PLROT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PLROT) type YHP_SVCS_PLROT
    raising
      /VCXI/CX_CKX .
  methods SET_PLROT
    importing
      !IF_PLROT type YHP_SVCS_PLROT optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_LDROT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_LDROT) type YHP_SVCS_LDROT
    raising
      /VCXI/CX_CKX .
  methods SET_LDROT
    importing
      !IF_LDROT type YHP_SVCS_LDROT optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_STRPS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_STRPS) type YHP_SVCS_STRPS
    raising
      /VCXI/CX_CKX .
  methods SET_STRPS
    importing
      !IF_STRPS type YHP_SVCS_STRPS optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_STRPE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_STRPE) type YHP_SVCS_STRPE
    raising
      /VCXI/CX_CKX .
  methods SET_STRPE
    importing
      !IF_STRPE type YHP_SVCS_STRPE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_WRPPS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_WRPPS) type YHP_SVCS_WRPPS
    raising
      /VCXI/CX_CKX .
  methods SET_WRPPS
    importing
      !IF_WRPPS type YHP_SVCS_WRPPS optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_LNPS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_LNPS) type YHP_SVCS_LNPS
    raising
      /VCXI/CX_CKX .
  methods SET_LNPS
    importing
      !IF_LNPS type YHP_SVCS_LNPS optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_O_INCPA_CHANGED type /VCXI/VKSC_IEVNT value 'INCPA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RFBOX_CHANGED type /VCXI/VKSC_IEVNT value 'RFBOX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_I_REDET_PBCOD type /VCXI/VKSC_IEVNT value 'REDETERMINE_PBCOD' ##NO_TEXT.
  constants C_IEVNT_I_BUFFER_SU type /VCXI/VKSC_IEVNT value 'BUFFER_SU' ##NO_TEXT.
  constants C_IEVNT_I_SET_BUFFERED_SU type /VCXI/VKSC_IEVNT value 'SET_BUFFERED_SU' ##NO_TEXT.
  constants C_IEVNT_O_LDROT_CHANGED type /VCXI/VKSC_IEVNT value 'LDROT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_LNPS_CHANGED type /VCXI/VKSC_IEVNT value 'LNPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PLPOS_CHANGED type /VCXI/VKSC_IEVNT value 'PLPOS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PLROT_CHANGED type /VCXI/VKSC_IEVNT value 'PLROT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRPOS_CHANGED type /VCXI/VKSC_IEVNT value 'PRPOS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PSSTW_CHANGED type /VCXI/VKSC_IEVNT value 'PSSTW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_STRPE_CHANGED type /VCXI/VKSC_IEVNT value 'STRPE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_STRPS_CHANGED type /VCXI/VKSC_IEVNT value 'STRPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WRPPS_CHANGED type /VCXI/VKSC_IEVNT value 'WRPPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BCEAN_CHANGED type /VCXI/VKSC_IEVNT value 'BCEAN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PBCOD_CHANGED type /VCXI/VKSC_IEVNT value 'PBCOD_CHANGED' ##NO_TEXT.
  data T_BUFFERED_SU type YHP_SVCU_TT_BUF_SHUNT .

  methods CHECK_INCPA
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PBCOD
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_RFBOX
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REDETERMINE_PBCOD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUFFER_SU
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_BUFFERED_SU
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SVCU_PR_SHIPINFO definition
class YCL_HP_SVCU_PR_SHIPINFO implementation.
  method CHECK_INCPA.
    data: LF_REMIN  type P decimals 0, "reminder
          LF_NUM(6) type N.
    data: LS_LEOKY type /VCXI/VKSR_S_LEOKY,
          LS_TBQTY type ZVCXI_XCSU_S_TBQTY.

    data: LT_GATE_SHIPUNIT        type        /VCXI/VKSR_TT_GATE.

    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_APPDATA     type ref to /VCXI/CL_VKSR_APPDATA,
          LR_PR_SHIPUNIT type ref to   ZCL_VCXI_XCSU_PR_SHIPUNIT.

    if ME->GET_INCPA( ) eq ABAP_TRUE.
*** Get Operation Quantity.
      LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).

*** Get Shipping unit
      LT_GATE_SHIPUNIT  = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                      IF_INUSE = ABAP_TRUE ).
      loop at  LT_GATE_SHIPUNIT into LR_GATE.
        LS_LEOKY = LR_GATE->GET_LEOKY( ).
        check LS_LEOKY-LEOKY eq C_SHUTY_UNIT.
        try.
            move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
            check LR_PR_SHIPUNIT is bound.
*** Get total base qty for Unit
            move LR_PR_SHIPUNIT->GET_TBQTY( )       to LS_TBQTY.
            exit.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_SHIPUNIT.
        endtry.

      endloop.
      try.
*** Calculate pallet.
          LF_REMIN = LR_APPDATA->S_OPQTY-OPQTY mod LS_TBQTY-TBQTY.
          if LF_REMIN eq 0.
            RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
            check IR_MESSAGE is bound.
***     Complete Pallet is valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                     IF_MSGTY = 'S'
                                     IF_MSGNO = '002' ).
            exit.
          else.
            LF_NUM = LR_APPDATA->S_OPQTY-OPQTY / LS_TBQTY-TBQTY.
            LF_NUM = LF_NUM *  LS_TBQTY-TBQTY.
            RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.

            check IR_MESSAGE is bound.
            shift  LF_NUM left deleting leading '0'.
***     Complete Pallet is not valid. Quanity should be &.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '003'
                                     IF_MSGV1 = LF_NUM ).

          endif.
        catch CX_SY_ZERODIVIDE.
      endtry.
    endif.
  endmethod.
  method CHECK_PBCOD.


    check ME->GET_ICONT( ) eq 'P'.

*** Only Check if DVC Function is active
    if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( exporting IR_GATE  = ME->R_GATE
                                                            IF_IFUNC = 'CHECK_PBCOD' ) eq ABAP_TRUE.

**    Check Bar Code
      if ME->GET_PBCOD( ) is not initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Bar Code is maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '020' ).
        endif.

      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Bar Code is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '021' ).
        endif.
      endif.

    else.
***   Set Status Green
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.

    endif.

  endmethod.
  method CHECK_RFBOX.
    data: LF_REMIN  type P decimals 0, "reminder
          LF_NUM(6) type N.
    data: LS_LEOKY type /VCXI/VKSR_S_LEOKY,
          LS_TBQTY type ZVCXI_XCSU_S_TBQTY.

    data: LT_GATE_SHIPUNIT        type        /VCXI/VKSR_TT_GATE.

    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_APPDATA     type ref to /VCXI/CL_VKSR_APPDATA,
          LR_PR_SHIPUNIT type ref to   ZCL_VCXI_XCSU_PR_SHIPUNIT.

*** Check Reference Box
    if ME->GET_RFBOX( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***    Reference Box is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '009' ).
      endif.

    else.
     if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE      = ME->R_GATE
                                                   IF_IFUNC     = 'CHECK_RFBOX' ).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***     Reference Box is not maintained.
           IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                    IF_MSGTY = 'E'
                                    IF_MSGNO = '008' ).
        endif.
     else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***    Reference box check was ignored.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '018' ).

        endif.
     endif.

   endif.
  endmethod.
  method GET_BCEAN.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BCEAN  ).
    move LS_PARAM-ATWRT to RF_BCEAN.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_ICONT.

    data: LT_PRVDR type        /VCXI/VKSR_TT_GATE.
    data: LR_PRVDR type ref to /VCXI/CL_VKSR_GATE,
          LR_ICONT type ref to ZIF_VCXI_PXSS_ICONT.

*** Find Context Provider
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_ICONT=>C_IPRVT_PX_ICONT
                                      IF_INUSE = ABAP_TRUE ).
    read table LT_PRVDR into LR_PRVDR index 1.
    check SY-SUBRC = 0.
    try.
        move LR_PRVDR->R_CLSPR ?to LR_ICONT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_ICONT.
    endtry.

    check LR_ICONT is bound.
    move LR_ICONT->GET_ICONT( ) to RF_ICONT.

  endmethod.
  method GET_INCPA.
        data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_INCPA  ).
    move LS_PARAM-ATWRT to RF_INCPA.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_LDROT.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LDROT  ).
    move LS_PARAM-ATWRT to RF_LDROT.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_LNPS.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LNPS  ).
    move LS_PARAM-ATWRT to RF_LNPS.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_PBCOD.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PBCOD  ).
    move LS_PARAM-ATWRT to RF_PBCOD.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_PLPOS.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PLPOS  ).
    move LS_PARAM-ATWRT to RF_PLPOS.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_PLROT.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PLROT  ).
    move LS_PARAM-ATWRT to RF_PLROT.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_PRPOS.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRPOS  ).
    move LS_PARAM-ATWRT to RF_PRPOS.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_PSSTW.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PSSTW  ).
    move LS_PARAM-ATWRT to RF_PSSTW.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_RFBOX.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RFBOX  ).
    move LS_PARAM-ATWRT to RF_RFBOX.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_STATUS.
     RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Complete Pallet
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_INCPA( ) ).

*** Check Reference Box
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_RFBOX( ) ).

*** Check Bar Code
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PBCOD( ) ).
  endmethod.
  method GET_STATUS_MSG.
    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Complete Pallet
    ME->CHECK_INCPA( IR_MESSAGE = IR_MESSAGE ).

*** Check Reference Box
    ME->CHECK_RFBOX( IR_MESSAGE = IR_MESSAGE ).

*** Check Bar Code
    ME->CHECK_PBCOD( IR_MESSAGE = IR_MESSAGE ).
  endmethod.
  method GET_STRPE.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STRPE  ).
    move LS_PARAM-ATWRT to RF_STRPE.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_STRPS.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STRPS  ).
    move LS_PARAM-ATWRT to RF_STRPS.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method GET_WRPPS.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WRPPS  ).
    move LS_PARAM-ATWRT to RF_WRPPS.
    move LS_PARAM-SETBY to EF_SETBY.
  endmethod.
  method HANDLE_BUFFER_SU.

    data: LS_BUFFERED_SU type YHP_SVCU_S_BUF_SHUNT.
    data: LT_GATE    type /VCXI/VKSR_TT_GATE,
          LT_GATE_PM type /VCXI/VKSR_TT_GATE.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PM     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SHIPMGR  type ref to ZCL_VCXI_P1SU_PR_SHIPMGR,
          LR_CUST_SHIPU  type ref to ZCL_VCXI_XCSU_CUST_SHIPU,
          LR_PR_SHIPUNIT type ref to ZCL_VCXI_XCSU_PR_SHIPUNIT.
    field-symbols: <LS_BUF_PACKMAT> type YHP_SVCU_S_BUF_PACKMAT.

***-------------------------------------------------------------------*
*** Get Shipping Manager
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          if LR_GATE->R_CLSPR is bound.
            move LR_GATE->R_CLSPR ?to LR_PR_SHIPMGR.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SHIPMGR.
      endtry.
    endloop.
    check LR_PR_SHIPMGR is bound.

*** Use same Reference to Shipping & Unitization Customizing
    move LR_PR_SHIPMGR->R_CUST_SHIPU to LR_CUST_SHIPU.
    if not LR_CUST_SHIPU is bound.
      move ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( ) to LR_CUST_SHIPU.
    endif.

***--------------------------------------------------------------------------------------
*** Get all child Shipping Units
    check LR_CUST_SHIPU is bound.
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPUNIT=>C_IPRVT_XCS_SHIPUNIT
                                     IF_INUSE = ABAP_TRUE ).

*** Get Details for Shipping Unit
    loop at LT_GATE into LR_GATE.
      clear LS_BUFFERED_SU.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SHIPUNIT.
          check LR_PR_SHIPUNIT is bound.
          move LR_GATE->GET_LEOKY( )     to LS_BUFFERED_SU-S_LOEKY.
          move LR_GATE->GET_PARAM_ALL( ) to LS_BUFFERED_SU-T_PARAM.

***       now get the packing materials when available
          LT_GATE_PM = LR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT
                                           IF_INUSE = ABAP_TRUE ).
          loop at LT_GATE_PM into LR_GATE_PM.
            append initial line to LS_BUFFERED_SU-T_PACKMAT assigning <LS_BUF_PACKMAT>.
            move LR_GATE_PM->GET_LEOKY( )     to <LS_BUF_PACKMAT>-S_LOEKY.
            move LR_GATE_PM->GET_PARAM_ALL( ) to <LS_BUF_PACKMAT>-T_PARAM.
          endloop.

***       Collect shipping unit details
          append LS_BUFFERED_SU to T_BUFFERED_SU.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method HANDLE_EVENT.

*** Call Super
    SUPER->HANDLE_EVENT( exporting IF_IEVNT         = IF_IEVNT
                                   IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when ME->C_IEVNT_I_REDET_PBCOD.
        ME->HANDLE_REDETERMINE_PBCOD( ).

***   Save old Shipping Unit Unit Box in case of Migration only
***   (the otupound event is called only from YHP_SMD_AIS_TC01 table:
***    CFG/CRONO SET_BUFFER_MIG)
      when C_IEVNT_I_BUFFER_SU.
        ME->HANDLE_BUFFER_SU( ).

***   After event SHIPMGR CHANGED the Handling Unit is set again from file
      when  C_IEVNT_I_SET_BUFFERED_SU.
        ME->HANDLE_SET_BUFFERED_SU( ).

    endcase.

  endmethod.
  METHOD handle_redetermine_pbcod.

    DATA: lf_pbcod TYPE yhp_svcs_pbcod.

*** Get all fields needed to build the Bar Code
    DATA(lf_psstw) = me->get_psstw( ).  "HP: Press/Width Stack
    DATA(lf_plpos) = me->get_plpos( ).  "HP: Pallet Position
    DATA(lf_prpos) = me->get_prpos( ).  "HP: Protector Position
    DATA(lf_plrot) = me->get_plrot( ).  "HP: Pallet Rotation
    DATA(lf_ldrot) = me->get_ldrot( ).  "HP: Load Rotation
    DATA(lf_strps) = me->get_strps( ).  "HP: Strapping Proccess
    DATA(lf_strpe) = me->get_strpe( ).  "HP: Strapping Press
    DATA(lf_wrpps) = me->get_wrpps( ).  "HP: Wrapping Proccess
    DATA(lf_lnps)  = me->get_lnps( ).   "HP: Line Proccess

*** Determine Palletizing Bar Code
    IF lf_psstw IS NOT INITIAL AND lf_plpos IS NOT INITIAL AND
       lf_prpos IS NOT INITIAL AND lf_plrot IS NOT INITIAL AND
       lf_ldrot IS NOT INITIAL AND lf_strps IS NOT INITIAL AND
       lf_strpe IS NOT INITIAL AND lf_wrpps IS NOT INITIAL AND
       lf_lnps  IS NOT INITIAL.

*APC20240617 Recupero el valor de esquema de consumo
      TRY.
          DATA(lt_gate_shipunit) = me->r_gate->get_prvdr( if_iprvt = 'ZVCXI_XCSU_SHIPUNIT'
                                        if_inuse = abap_true ).

          LOOP AT lt_gate_shipunit ASSIGNING FIELD-SYMBOL(<gate_ship_unit>).
            DATA l_cfg TYPE REF TO ycl_hp_svcu_pr_shipunit.
            DATA(lr_gate_cfg) = <gate_ship_unit>.
            l_cfg ?= lr_gate_cfg->r_clspr.
            IF l_cfg->get_shuty( ) = 'UNIT'.
              DATA(lt_gate_pack) = lr_gate_cfg->get_prvdr( if_iprvt = 'ZVCXI_XCSU_PACKMAT'
                                            if_inuse = abap_true ).
              LOOP AT lt_gate_pack ASSIGNING FIELD-SYMBOL(<gpack>).
                DATA packmat    TYPE REF TO zcl_vcxi_xcsu_pr_packmat.
                packmat ?= <gpack>->r_clspr.
                packmat->get_consc( IMPORTING ef_consc = DATA(lf_consc) ).

                IF lf_consc+1(3) CO '0123456789'.
                  DATA(l_esquema) = lf_consc+1(3).
                  EXIT.
                ENDIF.
              ENDLOOP.
            ENDIF.
            IF NOT l_esquema IS INITIAL.
              EXIT.
            ENDIF.
          ENDLOOP.
        CATCH cx_root INTO DATA(o_root).
      ENDTRY.
      IF NOT l_esquema IS INITIAL.
        CONCATENATE l_esquema lf_psstw+3(1) lf_plpos lf_plrot
                    lf_prpos lf_ldrot lf_strps
                    lf_strpe lf_wrpps lf_lnps
                    INTO lf_pbcod.
      ELSE.
* FIN APC20240617
        CONCATENATE lf_psstw lf_plpos lf_plrot
                    lf_prpos lf_ldrot lf_strps
                    lf_strpe lf_wrpps lf_lnps
                    INTO lf_pbcod.
      ENDIF.
    ELSE.
      CLEAR lf_pbcod.
    ENDIF.

*** Set new Bar Code
    me->set_pbcod( EXPORTING  if_pbcod = lf_pbcod
                              if_setby = /vcxi/cl_vksr_gate=>c_setby_user ).



  ENDMETHOD.
  method HANDLE_SET_BUFFERED_SU.

    data: LF_TABIX         type SY-TABIX.
    data: LS_PARAM         type /VCXI/VKSR_S_PARAM,
          LS_BUFFERED_SU   type YHP_SVCU_S_BUF_SHUNT,
          LS_REGELMNT_EVNT type /VCXI/VKSC_S_REGELMNT_EVNT,
          LS_OIEVNT        type YHP_SMD_AIS_TC01.
    data: LT_GATE   type /VCXI/VKSR_TT_GATE,
          LT_OIEVNT type table of YHP_SMD_AIS_TC01.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SHIPMGR type ref to ZCL_VCXI_P1SU_PR_SHIPMGR,
          LR_CUST_SHIPU type ref to ZCL_VCXI_XCSU_CUST_SHIPU,
          LR_CUELMNT    type ref to /VCXI/CL_VKSC_CUELMNT.

***-------------------------------------------------------------------*
*** Only in case of Migration: Buffered Shipping unit exists
    check   ME->T_BUFFERED_SU is not initial.

*** Get Shipping Manager
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          if LR_GATE->R_CLSPR is bound.
            move LR_GATE->R_CLSPR ?to LR_PR_SHIPMGR.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SHIPMGR.
      endtry.
    endloop.

*** Use same Reference to Shipping & Unitization Customizing
    check LR_PR_SHIPMGR is bound.

*** Get AIS event mapping table
    select * from YHP_SMD_AIS_TC01 into table LT_OIEVNT.

***-------------------------------------------------------------------*
**** Process Buffered shipping units
    try.
        loop at T_BUFFERED_SU into LS_BUFFERED_SU.
          clear LT_GATE.
          LT_GATE = LR_PR_SHIPMGR->GET_SHIPUNIT_BY_SHUTY( IF_SHUTY = LS_BUFFERED_SU-S_LOEKY-LEOKY ).

***       Set parameters of current SU based on buffered values (only in case of Migration)
          clear LR_GATE.
          read table LT_GATE index 1 into LR_GATE.
          check LR_GATE is bound.

          if LINE_EXISTS( LS_BUFFERED_SU-T_PARAM[ SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ] ).
            loop at LS_BUFFERED_SU-T_PARAM into LS_PARAM
              where  SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
              LR_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

***           Set event
              clear LS_OIEVNT.
              read table LT_OIEVNT into LS_OIEVNT with key ISELF = LR_GATE->F_ID
                                                           PARID = LS_PARAM-PARID.
              if SY-SUBRC eq 0 and LS_PARAM-PARID is not initial.
                LR_GATE->SET_EVENT( LS_OIEVNT-IEVNT ).
              endif.
            endloop.
            LR_GATE->RAISE_EVENTS( ).
          endif.

***-------------------------------------------------------------------*
***       Set Packaging material leoky, parameters and events
          clear: LT_GATE, LF_TABIX.
          LT_GATE = LR_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_PACKMAT=>C_IPRVT_XCS_PACKMAT ).

          loop at LT_GATE into LR_GATE.
            LF_TABIX = SY-TABIX.
            read table LS_BUFFERED_SU-T_PACKMAT into data(LS_PACKMAT) index LF_TABIX.
            if SY-SUBRC eq 0.

              if LS_PACKMAT-SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
                LR_GATE->SET_LEOKY( IS_LEOKY = LS_PACKMAT-S_LOEKY ).

***             Set event
                clear LS_OIEVNT.
                read table LT_OIEVNT into LS_OIEVNT with key ISELF = LR_GATE->F_ID
                                                             PARID = 'LEOKY'.
                if SY-SUBRC eq 0 and LS_PARAM-PARID is not initial.
                  LR_GATE->SET_EVENT( LS_OIEVNT-IEVNT ).
                  LR_GATE->RAISE_EVENTS( ).
                endif.
              endif.

              if LINE_EXISTS( LS_PACKMAT-T_PARAM[ SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ] ).
                loop at LS_PACKMAT-T_PARAM into LS_PARAM
                  where  SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
                  LR_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

***               Set events
                  clear LS_OIEVNT.
                  read table LT_OIEVNT into LS_OIEVNT with key ISELF = LR_GATE->F_ID
                                                               PARID = LS_PARAM-PARID.
                  if SY-SUBRC eq 0 and LS_PARAM-PARID is not initial.
                    LR_GATE->SET_EVENT( LS_OIEVNT-IEVNT ).
                  endif.
                endloop.
                LR_GATE->RAISE_EVENTS( ).
              endif.

              clear LS_PACKMAT.
            endif.
          endloop.

        endloop.

      catch /VCXI/CX_CKX.
    endtry.

*** clear buffered entries (to avoid futher re-processing)
    clear T_BUFFERED_SU.

  endmethod.
  method SET_BCEAN.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BCEAN ).

    if IF_BCEAN is supplied.
      move IF_BCEAN to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BCEAN_CHANGED ).

    endif.
  endmethod.
  method SET_INCPA.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_INCPA ).

    if IF_INCPA is supplied.
      move IF_INCPA to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_INCPA_CHANGED ).

    endif.
  endmethod.
  method SET_LDROT.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LDROT ).

    if IF_LDROT is supplied.
      move IF_LDROT to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LDROT_CHANGED ).

    endif.
  endmethod.
  method SET_LNPS.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LNPS ).

    if IF_LNPS is supplied.
      move IF_LNPS to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LNPS_CHANGED ).

    endif.
  endmethod.
  method SET_PBCOD.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PBCOD ).

    if IF_PBCOD is supplied.
      move IF_PBCOD to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PBCOD_CHANGED ).

    endif.
  endmethod.
  method SET_PLPOS.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PLPOS ).

    if IF_PLPOS is supplied.
      move IF_PLPOS to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PLPOS_CHANGED ).

    endif.
  endmethod.
  method SET_PLROT.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PLROT ).

    if IF_PLROT is supplied.
      move IF_PLROT to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PLROT_CHANGED ).
    endif.
  endmethod.
  method SET_PRPOS.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRPOS ).

    if IF_PRPOS is supplied.
      move IF_PRPOS to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRPOS_CHANGED ).

    endif.
  endmethod.
  method SET_PSSTW.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PSSTW ).

    if IF_PSSTW is supplied.
      move IF_PSSTW to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PSSTW_CHANGED ).

    endif.
  endmethod.
  method SET_RFBOX.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RFBOX ).

    if IF_RFBOX is supplied.
      move IF_RFBOX to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RFBOX_CHANGED ).
    endif.
  endmethod.
  method SET_STRPE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STRPE ).

    if IF_STRPE is supplied.
      move IF_STRPE to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_STRPE_CHANGED ).

    endif.

  endmethod.
  method SET_STRPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_STRPS ).

    if IF_STRPS is supplied.
      move IF_STRPS to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_STRPS_CHANGED ).

    endif.

  endmethod.
  method SET_WRPPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WRPPS ).

    if IF_WRPPS is supplied.
      move IF_WRPPS to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WRPPS_CHANGED ).

    endif.

  endmethod.
