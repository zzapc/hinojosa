
class YCL_HP_SDP_EXIT_ITEM definition
  public
  inheriting from YCL_RF_RQPTR_EXIT_ITEM
  final
  create public .

public section.

  constants C_REPID_RELOAD type SYREPID value 'RELOAD_STUDY' ##NO_TEXT.

  methods GET_COSTS_VBAP
    importing
      !IF_KEY type YRF_RQPT_INKEY
    raising
      /VCXI/CX_CKX .
  methods CALC_ANNUAL_M2
    importing
      !IF_KEY type YRF_RQPT_INKEY
    raising
      /VCXI/CX_CKX .
  methods CALC_ZPRC_M2
    importing
      !IF_KEY type YRF_RQPT_INKEY
    raising
      /VCXI/CX_CKX .
  methods CALC_ZPRC_SUPAN
    importing
      !IF_KEY type YRF_RQPT_INKEY
    raising
      /VCXI/CX_CKX .
  methods CALC_ADDVAL_MC
    importing
      !IF_KEY type YRF_RQPT_INKEY
    raising
      /VCXI/CX_CKX .
  methods CALC_ADDVAL_MC_PERC
    importing
      !IF_KEY type YRF_RQPT_INKEY
    raising
      /VCXI/CX_CKX .
  methods CALC_ZM2_VTA
    importing
      !IF_KEY type YRF_RQPT_INKEY
    raising
      /VCXI/CX_CKX .
  methods CALC_ADDVAL_MC_TOT
    importing
      !IF_KEY type YRF_RQPT_INKEY
    raising
      /VCXI/CX_CKX .
protected section.
private section.
endclass. "YCL_HP_SDP_EXIT_ITEM definition
class YCL_HP_SDP_EXIT_ITEM implementation.
method CALC_ADDVAL_MC .
  data: LF_KBETR type KBETR,
        LF_COST  type KBETR.
  data: LR_DREF     type ref to DATA,
        LR_ITEM_CNF type ref to DATA.
  field-symbols: <F_PRICE>    type BAPIKBETR1,
                 <S_ITEM_CNF> type YHP_SDP_S_ITEM_CNF,
                 <S_VBAP>     type VBAP,
                 <F_COST>     type ANY,
                 <F_KBETR>    type BAPIKBETR1.
**********************************************************************
*** calculate added value & contr. margin (1 routine for 2 columns!)
**********************************************************************

**** Get Condition ZPRC (Name of Connected Object)
  ME->GET_CACHE_DATA( exporting IF_KEY = 'COND_ZPRC'
                      importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
  if LR_DREF is bound.
    assign LR_DREF->* to <F_PRICE>.
    check SY-SUBRC = 0.
  endif.

*** Get Configuration Structure from Buffer
*** get VBAP
  ME->GET_CACHE_DATA( exporting IF_KEY  = 'VBAP'
                      importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
  if LR_DREF is bound.
    assign LR_DREF->* to <S_VBAP>.
    check SY-SUBRC = 0.
  endif.

  if <S_VBAP>-MATNR cs '_MQ' and <S_VBAP>-UEPOS is not initial.
    data(LF_POSNR) = <S_VBAP>-UEPOS.
  else.
    LF_POSNR = ME->F_POSNR.
  endif.

  LR_ITEM_CNF = YCL_RF_RQPTR_ITEM_CNF=>GET_INSTANCE( IF_VBELN = ME->F_VBELN
                                                     IF_POSNR = LF_POSNR )->GET_ITEM_CNF( ).
  assign LR_ITEM_CNF->* to <S_ITEM_CNF>.
  check <S_ITEM_CNF> is assigned.

  case IF_KEY.
    when 'EXIT_ADDVAL'.
*** get raw material costs
      GET_CACHE_DATA( exporting IF_KEY = 'CCOMP_MP'
                      importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
      if LR_DREF is bound.
        assign LR_DREF->* to <F_COST>.
        check SY-SUBRC = 0.
        LF_COST = <F_COST>.
      endif.
    when 'EXIT_MC'.
**** Get Condition EK01 (Name of Connected Object)
      ME->GET_CACHE_DATA( exporting IF_KEY = 'COND_EK02'
                          importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
      if LR_DREF is bound.
        assign LR_DREF->* to <F_KBETR>.
        check SY-SUBRC = 0.
        LF_COST = <F_KBETR>.
      endif.
  endcase.


*** calc added value per 1000 M2
  if <S_ITEM_CNF> is assigned  and <F_PRICE> is assigned
      and <S_ITEM_CNF>-SBLAR is not initial.
    "Price is already per 1000 / costs are also per 1000
    LF_KBETR =  ( <F_PRICE> - LF_COST ) / <S_ITEM_CNF>-SBLAR.
  endif.

*** Set Cache
  ME->SET_CACHE_DATA( IF_KEY  = IF_KEY
                      IR_DATA = LF_KBETR ).

endmethod.
method CALC_ADDVAL_MC_PERC .
  data: LF_KBETR type KBETR.
  data: LR_DREF     type ref to DATA,
        LR_ITEM_CNF type ref to DATA.
  field-symbols: <F_PRICE>    type KBETR,
                 <S_ITEM_CNF> type YHP_SDP_S_ITEM_CNF,
                 <S_VBAP>     type VBAP,
                 <F_COST>     type CK_KWT,
                 <F_KBETR>    type KBETR.
**********************************************************************
*** calculate added value & contr. margin percentage (1 routine for 2 columns!)
**********************************************************************

**** Get Condition ZPRC (Name of Connected Object)
  ME->GET_CACHE_DATA( exporting IF_KEY = 'EXIT_ZPRC_M2'
                      importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
  if LR_DREF is bound.
    assign LR_DREF->* to <F_PRICE>.
    check SY-SUBRC = 0.
  endif.

  case IF_KEY.
    when 'EXIT_ADDVAL%'.
*** get added value
      GET_CACHE_DATA( exporting IF_KEY = 'EXIT_ADDVAL'
                              importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
      if LR_DREF is bound.
        assign LR_DREF->* to <F_KBETR>.
        check SY-SUBRC = 0.
        LF_KBETR = <F_KBETR>.
      endif.
    when 'EXIT_MC%'.
**** Get Condition EK01 (Name of Connected Object)
      ME->GET_CACHE_DATA( exporting IF_KEY = 'EXIT_MC'
                          importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
      if LR_DREF is bound.
        assign LR_DREF->* to <F_KBETR>.
        check SY-SUBRC = 0.
        LF_KBETR = <F_KBETR>.
      endif.
  endcase.


*** calc added value per 1000 M2
  if <F_PRICE> is assigned and <F_KBETR> is assigned and <F_PRICE> ne 0.
    LF_KBETR =  ( LF_KBETR / <F_PRICE> ).
  endif.

*** Set Cache
  ME->SET_CACHE_DATA( IF_KEY  = IF_KEY
                      IR_DATA = LF_KBETR ).

endmethod.
method CALC_ADDVAL_MC_TOT .
  data: LF_KBETR type KBETR.
  data: LR_DREF     type ref to DATA,
        LR_ITEM_CNF type ref to DATA.
  field-symbols: <F_QTY>      type KWMENG,
                 <S_ITEM_CNF> type YHP_SDP_S_ITEM_CNF,
                 <S_VBAP>     type VBAP,
                 <F_COST>     type CK_KWT,
                 <F_KBETR>    type KBETR.
**********************************************************************
*** calculate added value & contr. margin TOTAL (1 routine for 2 columns!)
**********************************************************************

**** Get annual M2 (Name of Connected Object)
  ME->GET_CACHE_DATA( exporting IF_KEY = 'EXIT_ANNUAL_M2'
                      importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
  if LR_DREF is bound.
    assign LR_DREF->* to <F_QTY>.
    check SY-SUBRC = 0.
  endif.

  case IF_KEY.
    when 'EXIT_ADDVAL_TOT'.
*** get added value
      GET_CACHE_DATA( exporting IF_KEY = 'EXIT_ADDVAL'
                              importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
      if LR_DREF is bound.
        assign LR_DREF->* to <F_KBETR>.
        check SY-SUBRC = 0.
      endif.
    when 'EXIT_MC_TOT'.
**** Get Condition EK01 (Name of Connected Object)
      ME->GET_CACHE_DATA( exporting IF_KEY = 'EXIT_MC'
                          importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
      if LR_DREF is bound.
        assign LR_DREF->* to <F_KBETR>.
        check SY-SUBRC = 0.
      endif.
  endcase.


*** calc added value per 1000 M2
  if <F_QTY> is assigned and <F_KBETR> is assigned.
    try.
        LF_KBETR = <F_KBETR> * <F_QTY> / 1000.
      catch CX_SY_ARITHMETIC_OVERFLOW.
        LF_KBETR = '999999999.99'.
    endtry.
  endif.

*** Set Cache
  ME->SET_CACHE_DATA( IF_KEY  = IF_KEY
                      IR_DATA = LF_KBETR ).

endmethod.
  method CALC_ANNUAL_M2.
    data: LR_DREF     type ref to DATA,
          LR_ITEM_CNF type ref to DATA.

    data: LF_VALUE type KWMENG.

    field-symbols: <S_VBAP>     type VBAP,
                   <S_ITEM_CNF> type YHP_SDP_S_ITEM_CNF,
                   <F_VALUE>    type ANY.

*** get VBAP
    ME->GET_CACHE_DATA( exporting IF_KEY  = 'VBAP'
                        importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
    if LR_DREF is bound.
      assign LR_DREF->* to <S_VBAP>.
      check SY-SUBRC = 0.
    endif.

    if <S_VBAP>-MATNR cs '_MQ' and <S_VBAP>-UEPOS is not initial.
      data(LF_POSNR) = <S_VBAP>-UEPOS.
    else.
      LF_POSNR = ME->F_POSNR.
    endif.

*** Get Configuration Structure from Buffer
    LR_ITEM_CNF = YCL_RF_RQPTR_ITEM_CNF=>GET_INSTANCE( IF_VBELN = ME->F_VBELN
                                                       IF_POSNR = LF_POSNR )->GET_ITEM_CNF( ).
    assign LR_ITEM_CNF->* to <S_ITEM_CNF>.
    check <S_ITEM_CNF> is assigned.

*** calculation
    LF_VALUE = <S_VBAP>-ZZSUPANM2 * <S_ITEM_CNF>-SBLAR.

*** Set Cache
    ME->SET_CACHE_DATA( IF_KEY  = IF_KEY
                        IR_DATA = LF_VALUE ).

  endmethod.
METHOD calc_zm2_vta .

  DATA: lr_dref     TYPE REF TO data,
        lr_item_cnf TYPE REF TO data.

  DATA: lf_value TYPE kwmeng.

  FIELD-SYMBOLS: <s_vbap>     TYPE vbap,
                 <s_item_cnf> TYPE yhp_sdp_s_item_cnf,
                 <f_value>    TYPE any.

*** get VBAP
  me->get_cache_data( EXPORTING if_key  = 'VBAP'
                      IMPORTING er_dref = lr_dref ).

*** Assign Data Reference to Field Symbol
  IF lr_dref IS BOUND.
    ASSIGN lr_dref->* TO <s_vbap>.
    CHECK sy-subrc = 0.
  ENDIF.

  IF <s_vbap>-matnr CS '_MQ' AND <s_vbap>-uepos IS NOT INITIAL.
    DATA(lf_posnr) = <s_vbap>-uepos.
  ELSE.
    lf_posnr = me->f_posnr.
  ENDIF.

*** Get Configuration Structure from Buffer
  lr_item_cnf = ycl_rf_rqptr_item_cnf=>get_instance( if_vbeln = me->f_vbeln
                                                     if_posnr = lf_posnr )->get_item_cnf( ).
  ASSIGN lr_item_cnf->* TO <s_item_cnf>.
  CHECK <s_item_cnf> IS ASSIGNED.

*** calculation

  "Precio m2 en base 1000.
  lf_value = <s_item_cnf>-sblar * 1000.

*** Set Cache
  me->set_cache_data( if_key  = if_key
                      ir_data = lf_value ).

  ENDMETHOD.
  method CALC_ZPRC_M2.
    data: LF_PRAREA type KBETR.
    data: LR_DREF     type ref to DATA,
          LR_ITEM_CNF type ref to DATA.
    field-symbols: <F_PRICE>    type BAPIKBETR1,
                   <S_ITEM_CNF> type YHP_SDP_S_ITEM_CNF,
                   <S_VBAP>     type VBAP.
**********************************************************************
*** calculate price per 1000 M2
**********************************************************************


**** Get Condition ZPRC (Name of Connected Object)
    ME->GET_CACHE_DATA( exporting IF_KEY = 'COND_ZPRC'
                        importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
    if LR_DREF is bound.
      assign LR_DREF->* to <F_PRICE>.
      check SY-SUBRC = 0.
    endif.

*** Get Configuration Structure from Buffer
*** get VBAP
    ME->GET_CACHE_DATA( exporting IF_KEY  = 'VBAP'
                        importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
    if LR_DREF is bound.
      assign LR_DREF->* to <S_VBAP>.
      check SY-SUBRC = 0.
    endif.

    if <S_VBAP>-MATNR cs '_MQ' and <S_VBAP>-UEPOS is not initial.
      data(LF_POSNR) = <S_VBAP>-UEPOS.
    else.
      LF_POSNR = ME->F_POSNR.
    endif.

    LR_ITEM_CNF = YCL_RF_RQPTR_ITEM_CNF=>GET_INSTANCE( IF_VBELN = ME->F_VBELN
                                                       IF_POSNR = LF_POSNR )->GET_ITEM_CNF( ).
    assign LR_ITEM_CNF->* to <S_ITEM_CNF>.
    check <S_ITEM_CNF> is assigned.

*** Price per Area
    if <S_ITEM_CNF> is assigned  and <F_PRICE> is assigned
        and <S_ITEM_CNF>-SBLAR is not initial.
      "Price is already per 1000 / area is per 1
      LF_PRAREA =  <F_PRICE> /  <S_ITEM_CNF>-SBLAR.
    endif.

*** Set Cache
    ME->SET_CACHE_DATA( IF_KEY  = IF_KEY
                        IR_DATA = LF_PRAREA ).

  endmethod.
  method CALC_ZPRC_SUPAN.
    data: LF_KBETR type KBETR.
    data: LR_DREF     type ref to DATA,
          LR_ITEM_CNF type ref to DATA.
    field-symbols: <F_PRICE> type BAPIKBETR1,
                   <S_VBAP>  type VBAP.
**********************************************************************
*** calculate price per annual qty.
**********************************************************************


**** Get Condition ZPRC (Name of Connected Object)
    ME->GET_CACHE_DATA( exporting IF_KEY = 'COND_ZPRC'
                        importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
    if LR_DREF is bound.
      assign LR_DREF->* to <F_PRICE>.
      check SY-SUBRC = 0.
    endif.

*** Get Configuration Structure from Buffer
*** get VBAP
    ME->GET_CACHE_DATA( exporting IF_KEY  = 'VBAP'
                        importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
    if LR_DREF is bound.
      assign LR_DREF->* to <S_VBAP>.
      check SY-SUBRC = 0.
    endif.

*** Price per Area
    if <F_PRICE> is assigned  and <S_VBAP> is assigned.
      "Price is already per 1000 / area is per 1
      LF_KBETR =  <F_PRICE> * <S_VBAP>-ZZSUPANM2 / 1000.
    endif.

*** Set Cache
    ME->SET_CACHE_DATA( IF_KEY  = IF_KEY
                        IR_DATA = LF_KBETR ).

  endmethod.
  method GET_COSTS_VBAP.
      data: LR_DREF type ref to DATA.

    data: LF_COSTS type KBETR,
          LF_MENG  type KWMENG.

    field-symbols: <S_VBAP> type VBAP.

    ME->GET_CACHE_DATA( exporting IF_KEY  = 'VBAP'
                        importing ER_DREF = LR_DREF ).

*** Assign Data Reference to Field Symbol
    if LR_DREF is bound.
      assign LR_DREF->* to <S_VBAP>.
      check SY-SUBRC = 0.
    endif.

*** which quantitiy field? e.g. in contracts ZMENG is used
    if <S_VBAP>-KWMENG is not initial.
      LF_MENG = <S_VBAP>-KWMENG.
    else.
      LF_MENG = <S_VBAP>-ZMENG.
    endif.

*** normalize per 1000
    if LF_MENG is not initial.
      LF_COSTS = <S_VBAP>-WAVWR * 1000 / LF_MENG.
    endif.

*** Set Cache
    ME->SET_CACHE_DATA( IF_KEY  = IF_KEY
                        IR_DATA = LF_COSTS ).

  endmethod.
