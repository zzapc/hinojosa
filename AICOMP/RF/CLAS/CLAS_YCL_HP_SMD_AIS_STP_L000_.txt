
class YCL_HP_SMD_AIS_STP_L000 definition
  public
  inheriting from /VCXI/CL_CKMR_CLSTP
  abstract
  create public .

public section.

  methods EXECUTE
    redefinition .
protected section.

  methods ANALYZE_RESULT_DCO
  abstract
    importing
      !IR_RPROC type ref to /VCXI/CL_CKMR_RPROC
    raising
      /VCXI/CX_CKX .
  methods COMBINE_STATUS
    importing
      !IR_RPROC type ref to /VCXI/CL_CKMR_RPROC
    raising
      /VCXI/CX_CKX .
  methods EXECUTE_SUBPROCESS
    importing
      !IR_RPROC type ref to /VCXI/CL_CKMR_RPROC
    raising
      /VCXI/CX_CKX .
  methods GET_SUBPROCESS
    returning
      value(RT_RPROC) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods GET_SUBPROCESS_DCO
  abstract
    returning
      value(RT_DCO) type /VCXI/CKMR_TT_CLDCO
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SMD_AIS_STP_L000 definition
class YCL_HP_SMD_AIS_STP_L000 implementation.
method COMBINE_STATUS.

*** Combine Status
  case IR_RPROC->F_SRPRO.

    when /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR_TMP.
      ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR_TMP ).

    when /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR.
      if ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR_TMP.
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).
      endif.

    when /VCXI/CL_CKMR_RPROC=>C_SRPRO_WAIT_USER.
      if ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR     and
         ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR_TMP.
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_WAIT_USER ).
      endif.

    when /VCXI/CL_CKMR_RPROC=>C_SRPRO_COMPLETED.

    when /VCXI/CL_CKMR_RPROC=>C_SRPRO_CANCELED.

  endcase.

endmethod.
method EXECUTE.

  data: LT_RPROC type /VCXI/CKX_TT_OBJECT.

  data: LR_RPROC  type ref to /VCXI/CL_CKMR_RPROC,
        LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT,
        LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.

***   Get SubProcesses
      LT_RPROC = ME->GET_SUBPROCESS( ).
      if LT_RPROC is initial.

***     Set Status Canceled
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ).
        return.

      endif.

***   Process SubProcesses
      loop at LT_RPROC into LR_OBJECT.

        try.

            move LR_OBJECT ?to LR_RPROC.

***         Check SubProcess Status
            if LR_RPROC->F_SRPRO ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_COMPLETED and
               LR_RPROC->F_SRPRO ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_CANCELED.

***           Save Segment (with SubProcesses)
              ME->R_RPSEG->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = /VCXI/CL_CKMR_RPSEG=>C_FCODE_SAVE ).

***           Execute SubProcess
              ME->EXECUTE_SUBPROCESS( IR_RPROC = LR_RPROC ).

            endif.

***         Analyze Result DCO
            ME->ANALYZE_RESULT_DCO( IR_RPROC = LR_RPROC ).

***         Combine Status
            ME->COMBINE_STATUS( IR_RPROC = LR_RPROC ).

          catch /VCXI/CX_CKX into LR_CX_CKX.

***         Set Status to Error
            ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

***         Add Message to Message Log
            ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).

        endtry.

      endloop.

***   Complete Run
      if ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR     and
         ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR_TMP and
         ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_WAIT_USER.
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.

***   Set Status to Error
      ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

***   Add Message to Message Log
      ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).

  endtry.

*** Save and Commit
  ME->R_RPSEG->SAVE_AND_COMMIT( ).

endmethod.
method EXECUTE_SUBPROCESS.

  IR_RPROC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = /VCXI/CL_CKMR_RPROC=>C_FCODE_EXECUTE_DIRECT ).

endmethod.
method GET_SUBPROCESS.

  data: LT_DCO type /VCXI/CKMR_TT_CLDCO.

  data: LR_DCO   type ref to /VCXI/CL_CKMR_CLDCO,
        LR_RPROC type ref to /VCXI/CL_CKMR_RPROC.

*** Create new Process and DCO if needed
  if ME->R_RPSEG->T_RPROC is initial.

*** Get DCOs for new Processes
    move ME->GET_SUBPROCESS_DCO( ) to LT_DCO.

    loop at LT_DCO into LR_DCO.

***   Create SubProcess
      LR_RPROC = /VCXI/CL_CKMR_RPROC=>CREATE( IR_DCO   = LR_DCO
                                              IR_CPROC = ME->R_RPSEG->R_CPSEQ->R_CPROC ).

***   Add to Segment as SubProcess
      ME->R_RPSEG->ADD_RPROC( IR_RPROC = LR_RPROC ).

    endloop.

  endif.

*** Return registered Processes
  move ME->R_RPSEG->T_RPROC to RT_RPROC.

endmethod.
