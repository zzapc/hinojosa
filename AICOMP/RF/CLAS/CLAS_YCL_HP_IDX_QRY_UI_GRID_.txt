
class YCL_HP_IDX_QRY_UI_GRID definition
  public
  abstract
  create public .

public section.

  data F_REFRESH_REQ type ABAP_BOOL .

  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
protected section.

  data F_APPL_EVENTS type ABAP_BOOL .
  data R_DATA type ref to DATA .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data F_CONTAINER_NAME type SCRFNAME .
  data R_CONTAINER type ref to CL_GUI_CONTAINER .
  data S_CELL_COL type LVC_S_COL .
  data S_COL type LVC_S_COL .
  data S_CELL_ROW type LVC_S_ROW .
  data S_ROW type LVC_S_ROW .
  data S_CELL_ROW_NO type LVC_S_ROID .
  data S_ROW_NO type LVC_S_ROID .
  data T_SEL_ROWS type LVC_T_ROW .
  data T_SEL_CELLS type LVC_T_CENO .

  methods GET_SELECTED_ROWS
    exporting
      !ES_LAST_ROW type LVC_S_ROW
      !ET_ROW type LVC_T_ROW
    raising
      /VCXI/CX_CKX .
  methods INIT_DATA
  abstract
    raising
      /VCXI/CX_CKX .
  methods REGISTER_F4_FIELDS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_F4
    for event ONF4 of CL_GUI_ALV_GRID
    importing
      !E_FIELDNAME
      !E_FIELDVALUE
      !ES_ROW_NO
      !ER_EVENT_DATA
      !ET_BAD_CELLS
      !E_DISPLAY .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_DATA_CHANGED_FIN
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_DATA_CHANGED
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods GET_FIELDCAT
  abstract
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA
  abstract
    importing
      !IR_DATA type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_LAYOUT
  abstract
    returning
      value(RS_LAYOUT) type LVC_S_LAYO
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_MENU_BUTTON
    for event MENU_BUTTON of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_UCOMM .
private section.

  methods GET_DTEL_BY_NAME
    importing
      !IF_FIELDNAME type LVC_FNAME
    exporting
      !EF_DTEL type DFIES-FIELDNAME
    raising
      /VCXI/CX_CKX .
  methods DETERMINE_F4_INPUT
    importing
      !IF_DTEL type DFIES-FIELDNAME
    exporting
      !EF_TABNAME type DFIES-TABNAME
      !EF_FIELDNAME type DFIES-FIELDNAME
    raising
      /VCXI/CX_CKX .
  methods GET_VALUE_TABLE
    importing
      !IF_DTEL type DFIES-FIELDNAME
    exporting
      !EF_TABNAME type DFIES-TABNAME
      !EF_FIELDNAME type DFIES-FIELDNAME
    raising
      /VCXI/CX_CKX .
endclass. "YCL_HP_IDX_QRY_UI_GRID definition
class YCL_HP_IDX_QRY_UI_GRID implementation.
  method DETERMINE_F4_INPUT.

    data: LS_D04V type DD04V,
          LS_SHLP type SHLP_DESCR_T.

    call function 'DDIF_DTEL_GET'
      exporting
        NAME          = IF_DTEL
      importing
        DD04V_WA      = LS_D04V
      exceptions
        ILLEGAL_INPUT = 1
        others        = 2.


    if LS_D04V-SHLPNAME is not initial.

      move IF_DTEL to EF_TABNAME.
      move SPACE to EF_FIELDNAME.

      exit.

    else.
      call function 'F4IF_DETERMINE_SEARCHHELP'
        exporting
          TABNAME           = LS_D04V-DOMNAME
          FIELDNAME         = SPACE
        importing
          SHLP              = LS_SHLP
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          INCONSISTENT_HELP = 3
          others            = 4.
      if SY-SUBRC ne 0.

        ME->GET_VALUE_TABLE(
        exporting
          IF_DTEL = IF_DTEL
          importing
            EF_TABNAME = EF_TABNAME
            EF_FIELDNAME = EF_FIELDNAME ).

      endif.

    endif.

  endmethod.
  method DO_FREE.

    if ME->R_GRID is bound.
      ME->R_GRID->CHECK_CHANGED_DATA( ).
    endif.

    if ME->R_GRID is bound.
      ME->R_GRID->FREE( exceptions
              CNTL_ERROR = 1
              CNTL_SYSTEM_ERROR = 2
              others = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_GRID.
    endif.

  endmethod.
  method GET_DTEL_BY_NAME.

    data: LS_COMPONENT   type        CL_ABAP_STRUCTDESCR=>COMPONENT,
          LS_DFIES       type        DFIES.
    data: LT_COMPONENT   type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
    data: LR_TABLEDESCR  type ref to CL_ABAP_TABLEDESCR,
          LR_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR,
          LR_ELEMDESCR   type ref to CL_ABAP_ELEMDESCR.

    check ME->R_DATA is bound.
    LR_TABLEDESCR ?= CL_ABAP_TABLEDESCR=>DESCRIBE_BY_DATA_REF( P_DATA_REF = ME->R_DATA ).
    LR_STRUCTDESCR ?= LR_TABLEDESCR->GET_TABLE_LINE_TYPE( ).

    LT_COMPONENT = LR_STRUCTDESCR->GET_COMPONENTS( ).

    loop at LT_COMPONENT into LS_COMPONENT.
      check LS_COMPONENT-NAME eq IF_FIELDNAME.
      try.
          move LS_COMPONENT-TYPE ?to LR_ELEMDESCR.
          LS_DFIES = LR_ELEMDESCR->GET_DDIC_FIELD( ).

          move LR_ELEMDESCR->GET_RELATIVE_NAME( ) to EF_DTEL .
          exit.
        catch /VCXI/CX_CKX.
      endtry.
    endloop.

  endmethod.
  method GET_SELECTED_ROWS.

    data: LT_CELL type LVC_T_CELL,
          LT_ROW  type LVC_T_ROW.
    data: LS_CELL type LVC_S_CELL,
          LS_ROW  type LVC_S_ROW.

*** Get Cursor in Grid
    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    if LINES( LT_CELL ) gt 0.

      loop at LT_CELL into LS_CELL.
        append LS_CELL-ROW_ID to ET_ROW.
***   Get last Index
        if ES_LAST_ROW-INDEX lt LS_CELL-ROW_ID-INDEX.
          move LS_CELL-ROW_ID to ES_LAST_ROW.
        endif.
      endloop.

    endif.

*** Get Selected Rows
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
    if LINES( LT_ROW ) gt 0.

      append lines of LT_ROW to ET_ROW.

      loop at LT_ROW into LS_ROW.
***   Get last Index
        if ES_LAST_ROW-INDEX lt LS_ROW-INDEX.
          move LS_ROW to ES_LAST_ROW.
        endif.
      endloop.

    endif.

  endmethod.
  method GET_VALUE_TABLE.

    data: LF_DATA_NAME   type        STRING.
    data: LR_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR.
    data: LR_TABLEDESCR  type ref to CL_ABAP_TABLEDESCR.
    data: LS_KEYDESCR    type        ABAP_KEYDESCR,
          LS_DATADESCR   type ref to CL_ABAP_DATADESCR,
          LS_D04V        type        DD04V.

    call function 'DDIF_DTEL_GET'
      exporting
        NAME          = IF_DTEL
      importing
        DD04V_WA      = LS_D04V
      exceptions
        ILLEGAL_INPUT = 1
        others        = 2.

    check LS_D04V-ENTITYTAB is not initial.

    LR_STRUCTDESCR ?= CL_ABAP_TABLEDESCR=>DESCRIBE_BY_NAME( LS_D04V-ENTITYTAB ).
    LR_TABLEDESCR = CL_ABAP_TABLEDESCR=>CREATE( LR_STRUCTDESCR ).

    loop at LR_TABLEDESCR->KEY into LS_KEYDESCR.

      LS_DATADESCR = LR_STRUCTDESCR->GET_COMPONENT_TYPE( LS_KEYDESCR-NAME ).
      LF_DATA_NAME = LS_DATADESCR->GET_RELATIVE_NAME( ).

      check LF_DATA_NAME eq IF_DTEL.

      EF_TABNAME = LS_D04V-ENTITYTAB.
      EF_FIELDNAME = LS_KEYDESCR-NAME.

    endloop.

  endmethod.
  method HANDLE_DATA_CHANGED.
  endmethod.
  method HANDLE_DATA_CHANGED_FIN.
  endmethod.
  method HANDLE_F4.

    data: LF_TABNAME type DFIES-TABNAME,
          LF_FNAME   type DFIES-FIELDNAME,
          LF_DTEL    type DFIES-FIELDNAME,
          LF_VALUE   type HELP_INFO-FLDVALUE,
          LS_RETURN  type DDSHRETVAL,
          LS_MODI    type LVC_S_MODI,
          LT_RETURN  type table of DDSHRETVAL.

    field-symbols: <T_MODI> type standard table.

    ME->GET_DTEL_BY_NAME(
    exporting
      IF_FIELDNAME = E_FIELDNAME
      importing
        EF_DTEL = LF_DTEL
        ).

    ME->DETERMINE_F4_INPUT(
    exporting
      IF_DTEL = LF_DTEL
      importing
        EF_TABNAME = LF_TABNAME
        EF_FIELDNAME = LF_FNAME ).

    move E_FIELDVALUE to LF_VALUE.

    call function 'F4IF_FIELD_VALUE_REQUEST'
      exporting
        TABNAME          = LF_TABNAME
        FIELDNAME        = LF_FNAME
        VALUE            = LF_VALUE
        DISPLAY          = E_DISPLAY
        SELECTION_SCREEN = ABAP_TRUE
      tables
        RETURN_TAB       = LT_RETURN
      exceptions
        others           = 5.
    check SY-SUBRC eq 0.

    read table LT_RETURN into LS_RETURN index 1.

    if SY-SUBRC eq 0.
      assign ER_EVENT_DATA->M_DATA->* to <T_MODI>.

      LS_MODI-FIELDNAME = E_FIELDNAME.
      LS_MODI-ROW_ID = ES_ROW_NO-ROW_ID.
      LS_MODI-SUB_ROW_ID = ES_ROW_NO-SUB_ROW_ID.
      LS_MODI-VALUE = LS_RETURN-FIELDVAL.
      append LS_MODI to <T_MODI>.

      move ABAP_TRUE to ER_EVENT_DATA->M_EVENT_HANDLED.
    endif.


  endmethod.
  method HANDLE_MENU_BUTTON.
  endmethod.
  method HANDLE_TOOLBAR.
  endmethod.
  method HANDLE_UCOMM.
  endmethod.
  method INIT_CONTAINER.

    if ME->R_CONTAINER is not bound.
      create object ME->R_CONTAINER
        type CL_GUI_CUSTOM_CONTAINER
        exporting
          CONTAINER_NAME              = ME->F_CONTAINER_NAME
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method INIT_GRID.

    if ME->R_GRID is not bound.
      create object ME->R_GRID
        exporting
          I_PARENT          = ME->R_CONTAINER
          I_APPL_EVENTS     = ME->F_APPL_EVENTS
        exceptions
          ERROR_CNTL_CREATE = 1
          ERROR_CNTL_INIT   = 2
          ERROR_CNTL_LINK   = 3
          ERROR_DP_CREATE   = 4
          others            = 5.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY(  ).
      endif.

      ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

      set handler ME->HANDLE_DATA_CHANGED for ME->R_GRID.
      set handler ME->HANDLE_DATA_CHANGED_FIN for ME->R_GRID.
      set handler ME->HANDLE_TOOLBAR for ME->R_GRID.
      set handler ME->HANDLE_UCOMM for ME->R_GRID.
      set handler ME->HANDLE_MENU_BUTTON for ME->R_GRID.

      ME->REGISTER_F4_FIELDS( ).

      set handler ME->HANDLE_F4 for ME->R_GRID.
    endif.

  endmethod.
  method REFRESH_GRID.

    data:
      LF_SAVE              type ABAP_BOOL,
      LS_LAYOUT            type LVC_S_LAYO,
      LS_VARIANT           type DISVARIANT,
      LT_TOOLBAR_EXCLUDING type UI_FUNCTIONS,
      LT_FCAT              type LVC_T_FCAT.

    field-symbols: <T_DATA> type standard table.

    ME->INIT_CONTAINER( ).
    ME->INIT_GRID( ).

    assign ME->R_DATA->* to <T_DATA>.
    check <T_DATA> is assigned.

    ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

    move ME->GET_FIELDCAT( ) to LT_FCAT.

    move ME->GET_LAYOUT( )   to LS_LAYOUT.

    move 'A' to LF_SAVE.

    LS_VARIANT-REPORT = SY-REPID.

*** Refresh ALV Grid
    ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
      exporting
        IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
        IS_LAYOUT                     = LS_LAYOUT
        IS_VARIANT                    = LS_VARIANT
        I_SAVE                        = LF_SAVE
      changing
        IT_FIELDCATALOG               = LT_FCAT
        IT_OUTTAB                     = <T_DATA>
      exceptions
        INVALID_PARAMETER_COMBINATION = 1
        PROGRAM_ERROR                 = 2
        TOO_MANY_LINES                = 3
        others                        = 4 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method REGISTER_F4_FIELDS.

    data:
      LF_TABNAME   type DFIES-TABNAME,
      LF_FNAME     type DFIES-FIELDNAME,
      LS_F4        type LVC_S_F4,
      LS_FCAT      type LVC_S_FCAT,
      LT_F4        type standard table of LVC_S_F4,
      LT_F4_SORTED type LVC_T_F4,
      LT_FCAT      type LVC_T_FCAT.


    LT_FCAT = ME->GET_FIELDCAT( ).

    loop at LT_FCAT into LS_FCAT.

      if LS_FCAT-F4AVAILABL eq ABAP_FALSE.
        clear LF_TABNAME.
        clear LF_FNAME.

        ME->DETERMINE_F4_INPUT(
        exporting
          IF_DTEL = LS_FCAT-FIELDNAME
          importing
            EF_TABNAME   = LF_TABNAME
            EF_FIELDNAME = LF_FNAME ).
        if LF_TABNAME is not initial.
          move ABAP_TRUE to LS_FCAT-F4AVAILABL.
        endif.
      endif.

      if LS_FCAT-F4AVAILABL eq ABAP_TRUE.
        clear LS_F4.
        move LS_FCAT-FIELDNAME to LS_F4-FIELDNAME.
        move ABAP_TRUE to LS_F4-REGISTER.
        move ABAP_TRUE to LS_F4-CHNGEAFTER.
        append LS_F4 to LT_F4.
      endif.

    endloop.

    sort LT_F4.
    delete adjacent duplicates from LT_F4 comparing all fields.
    append lines of LT_F4 to LT_F4_SORTED.

    ME->R_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4_SORTED ).

  endmethod.
