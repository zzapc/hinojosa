
class YCL_HP_SVCU_PR_SHIPMGR definition
  public
  inheriting from ZCL_VCXI_P1SU_PR_SHIPMGR
  final
  create public .

public section.

  constants C_PARID_FBUSU type /VCXI/VKS_PARID value 'YHP_SVC_FBUSU' ##NO_TEXT.
  constants C_PARED_CPALLRENTYPE type /VCXI/VKS_PARID value 'YHP_SVC_PALRENTYP' ##NO_TEXT.
  constants C_IEVNT_O_CPALLRNTYP_CHANGED type /VCXI/VKSC_IEVNT value 'YHP_SVC_EPALRENT' ##NO_TEXT.
  constants C_PARID_FIPMA type /VCXI/VKS_PARID value 'YHP_SVC_FIPMA' ##NO_TEXT.

  methods CALL_SHLP_PALRENT
    importing
      !IF_DISPLAY type ABAP_BOOL default ABAP_FALSE
    returning
      value(RF_SHSCH) type ZVCXI_XCSU_SHSCH
    raising
      /VCXI/CX_CKX .
  methods GET_FIPMA
    returning
      value(RF_FIPMA) type FLAG
    raising
      /VCXI/CX_CKX .
  methods SET_CPALLRENTYP
    importing
      !IF_CPALLR type YHP_E_PALRENTYP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_CPALLRENTYP
    returning
      value(RF_CPALLRENTYP) type YHP_E_PALRENTYP
    raising
      /VCXI/CX_CKX .
  methods SET_FIPMA
    importing
      !IF_FIPMA type FLAG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_FBUSU
    returning
      value(RF_FBUSU) type XFLAG
    raising
      /VCXI/CX_CKX .
  methods SET_FBUSU
    importing
      !IF_FBUSU type XFLAG
      !IF_SETBY type /VCXI/VKSR_SETBY default /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
    raising
      /VCXI/CX_CKX .
  methods CHECK_PALLRENTYP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_O_FIPMA_CHANGED type /VCXI/VKSC_IEVNT value 'FIPMA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_I_REDET_FIPMA type /VCXI/VKSC_IEVNT value 'REDET_FIPMA' ##NO_TEXT.

  methods GET_RTESPV_XCONI
    importing
      !IR_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_RTESPV) type ref to YCL_HP_SVCR_PR_RTESPV
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REDET_FIPMA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RELOAD_DFLT_HP
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SVCU_PR_SHIPMGR definition
class YCL_HP_SVCU_PR_SHIPMGR implementation.
method CALL_SHLP_PALRENT.

  data: LF_LOCKED  type /VCXI/CKX_LOCKED,
        LF_DISPLAY type ABAP_BOOL.
  data: LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA.

  move IF_DISPLAY to LF_DISPLAY.

  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  if LF_LOCKED ne ABAP_TRUE.
    move ABAP_TRUE to LF_DISPLAY.
  endif.

  try.
      LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
    catch CX_SY_MOVE_CAST_ERROR into data(LR_CX).
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX ).
  endtry.

  check LR_APPDATA is bound.

  RF_SHSCH = YCL_HP_SVCU_SHLP_PMATN_PALLET=>CALL_SHLP_PALRENT( IS_KNVV_WE = LR_APPDATA->S_KNVV_WE
                                                               IF_DISPLAY = LF_DISPLAY ).

endmethod.
  method CHECK_PALLRENTYP.

    data: LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA,
          LS_KNVV_WA type KNVV.
    data: LV_PALLRENT type YHP_E_PALRENTYP.


    try.
        LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
      catch CX_SY_MOVE_CAST_ERROR into data(LR_CX).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX ).
    endtry.

    check LR_APPDATA is bound.

    LS_KNVV_WA = LR_APPDATA->S_KNVV_WE.

    LV_PALLRENT = ME->GET_CPALLRENTYP( ).

    select single KUNNR from KNVV into @data(LV_SINGLE) where
                                   ( KUNNR = @LS_KNVV_WA-KUNNR and ZZCODIGO_CHEP = @LV_PALLRENT )
                                or ( KUNNR = @LS_KNVV_WA-KUNNR and ZZCODIGO_LPR = @LV_PALLRENT )
                                or ( KUNNR = @LS_KNVV_WA-KUNNR and ZZCODIGO_LOGIFRUIT = @LV_PALLRENT )
                                or ( KUNNR = @LS_KNVV_WA-KUNNR and ZZCODIGO_CONTRALOAD = @LV_PALLRENT ).
    if SY-SUBRC ne 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
***
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '028'
                                 IF_MSGV1 = LV_PALLRENT
                                 IF_MSGV2 = LS_KNVV_WA-KUNNR ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.

    endif.


  endmethod.
method GET_CPALLRENTYP.

  data: LS_PARAM    type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARED_CPALLRENTYPE ).
  move LS_PARAM-ATWRT to RF_CPALLRENTYP.

endmethod.
  method GET_FBUSU.

    RF_FBUSU = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FBUSU )-ATWRT.

  endmethod.
  method GET_FIPMA.

*    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM. "JBL 30/05/2024 Comment all code for GAP88
*
*    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIPMA ).
*    move LS_PARAM-ATWRT to RF_FIPMA.

  endmethod.
  method GET_RTESPV_XCONI.

    data: LT_GATE   type /VCXI/VKSR_TT_GATE.
    data  LT_GATE_RTESPV type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Find Provider for Routing Supervisor of given XCONI
    try.
***     Get Specification
        LT_GATE = IR_GATE_XCONI->GET_PRVDR( exporting IF_IPRVT = YCL_HP_SVCS_PR_SPEC=>C_IPRVT_PX_SPEC
                                                      IF_INUSE = ABAP_TRUE ).
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.
    check LT_GATE      is not initial and
          LT_GATE[ 1 ] is bound.

    try.
***     Get XCOMP
        LR_GATE_XCOMP = cast /VCXI/CL_VKSR_GATE( LT_GATE[ 1 ] )->GET_PARENT( ).

***     Get Routing Supervisor
        RR_PR_RTESPV ?= cast ZCL_VCXI_PXSS_PR_XCOMP( LR_GATE_XCOMP->R_CLSPR )->GET_PRVDR_RTESPV( ).

      catch CX_SY_MOVE_CAST_ERROR.
        clear: RR_PR_RTESPV.
    endtry.

  endmethod.
  method GET_STATUS.

    try.
        RF_ELMST = SUPER->GET_STATUS( ).
    endtry.

***--------------------------------------------------------------------------------------
** Check Pallet Rent Type
*    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
*                                                   IF_ELMST2 = ME->CHECK_PALLRENTYP( ) ).


  endmethod.
  method GET_STATUS_MSG.

    try.
        SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).
    endtry.

***--------------------------------------------------------------------------------------
*** Check Pallet Rent Type
*    ME->CHECK_PALLRENTYP( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_EVENT.

*** Handle additional Events
    case IF_IEVNT.

*      when C_IEVNT_I_REDET_FIPMA. "JBL 30/05/2024 Comment all code for GAP88
*        ME->HANDLE_REDET_FIPMA( ).

      when C_IEVNT_I_RELOAD_DFLT.
        ME->HANDLE_RELOAD_DFLT_HP( ).

      when others.
***     Call Super here, not before the other checks
        SUPER->HANDLE_EVENT( IF_IEVNT = IF_IEVNT
                             IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    endcase.

  endmethod.
  method HANDLE_REDET_FIPMA.

*JBL 30/05/2024 Comment all code for GAP88

*    data: LT_GATE   type /VCXI/VKSR_TT_GATE.
*    data  LT_GATE_RTESPV type /VCXI/VKSR_TT_GATE.
*    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
*          LR_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE.
*    data: LR_PR_XCONO  type ref to ZCL_VCXI_PXSS_PR_XCONO,
*          LR_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV,
*          LR_RTESEL    type ref to ZCL_VCXI_XCSR_BL_PRTE,
*          LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE,
*          LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
*          LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
*          LR_BL_PSTEP  type ref to ZCL_VCXI_XCSR_BL_PSTEP,
*          LR_BL_OUTSO  type ref to ZIF_VCXI_XCSR_BL_OUTSO,
*          LR_PSTEP     type ref to /VCXI/CL_VSMC_PSTEP.
*    field-symbols: <LR_RTESEL>   type ref to  ZCL_VCXI_XCSR_BL_PRTE,
*                   <LR_RTE_PRTE> type ref to /VCXI/CL_VSMR_RTE_PRTE.
*    field-symbols: <LR_PSTEP>     type ref to /VCXI/CL_VSMC_PSTEP,
*                   <LR_RTE_ARBPL> type ref to /VCXI/CL_VSMR_RTE_ARBPL,
*                   <LR_BL_PSTEP>  type ref to ZCL_VCXI_XCSR_BL_PSTEP.
*    field-symbols <LS_XCOMP_RTESEL> type ZVCXI_PXSR_S_XCOMP_RTESEL.
*
*
****--------------------------------------------------------------------------------------
**** Get Parent (Connection Out)
*    LR_GATE = ME->R_GATE->GET_PARENT( ).
*    check LR_GATE is bound.
*
*    try.
*        move LR_GATE->R_CLSPR ?to LR_PR_XCONO.
*      catch CX_SY_MOVE_CAST_ERROR.
*        clear: LR_PR_XCONO.
*    endtry.
*    check LR_PR_XCONO is bound.
*
**** Get Connection In for Connection Out to navigate to connected Component
*    try.
*        LR_GATE_XCONI = LR_PR_XCONO->GET_CONNECTED_GATE( ).
*      catch CX_SY_MOVE_CAST_ERROR.
*    endtry.
*    check LR_GATE_XCONI is bound.
*
**** Find Routing Supervisor of connected Component
*    LR_PR_RTESPV = ME->GET_RTESPV_XCONI( LR_GATE_XCONI ).
*    check LR_PR_RTESPV is bound.
*
**** Get selected Route of Routing Supervisor
*    try.
*        LR_RTESEL ?= LR_PR_RTESPV->R_RTESEL.
*      catch CX_SY_MOVE_CAST_ERROR.
*        clear: LR_RTESEL.
*    endtry.
*    check LR_RTESEL is bound.
*
**** Get Route Instance
*    try.
*        LR_RTE_PRTE ?= LR_RTESEL->R_RTE_PRTE.
*      catch CX_SY_MOVE_CAST_ERROR.
*        clear: LR_RTE_PRTE.
*    endtry.
*    check LR_RTE_PRTE is bound.
*
**** Check first Production Step of first Machine is Outsourcing
*    LR_RTE_ARBPL = value #( LR_RTE_PRTE->T_RTE_ARBPL[ 1 ] optional ).
*    check LR_RTE_ARBPL is bound.
*
**** Get first Production Step
*    LR_RTE_PSTEP = value #( LR_RTE_ARBPL->T_RTE_PSTEP[ 1 ] optional ).
*    check LR_RTE_PSTEP is bound.
*
**** Check if Production Step is Outsourcing
*    try.
*        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_OUTSO.
*      catch CX_SY_MOVE_CAST_ERROR.
*        clear: LR_BL_OUTSO.
*    endtry.
*
*    if LR_BL_OUTSO is bound and
*       LR_BL_OUTSO->F_OUTSO eq ABAP_TRUE.
*
****   Set Flag to Ignore Packaging Materials for Production Step Unitizing
*      ME->SET_FIPMA( ABAP_TRUE ).
*
*    else.
*      ME->SET_FIPMA( ABAP_FALSE ).
*
*    endif.

  endmethod.
  method HANDLE_RELOAD_DFLT_HP.

*    data: LR_PR_SPEC    type ref to ZCL_VCXI_PXSS_PR_SPEC.
*
**** Get Spec provider
*    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
*    try.
*        data(LR_PR_SPEC_HP) = cast YCL_HP_SVCS_PR_SPEC( LR_PR_SPEC ).
*      catch CX_SY_MOVE_CAST_ERROR.
*        clear LR_PR_SPEC_HP.
*    endtry.

*** Ignore event processing if we are in AIS mode
*    if LR_PR_SPEC_HP is bound and LR_PR_SPEC_HP->GET_FBUSU( ) is not initial.
    if ME->GET_FBUSU( ) is not initial.
*      LR_PR_SPEC_HP->SET_FBUSU( IF_FBUSU = SPACE ).
      ME->SET_FBUSU( IF_FBUSU = SPACE ).
      return.

*** If not, then process standard logic
    else.
      ME->HANDLE_RELOAD_DFLT( ).
    endif.

  endmethod.
method SET_CPALLRENTYP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARED_CPALLRENTYPE ).

  if IF_CPALLR is supplied.
    move IF_CPALLR to LS_PARAM-ATWRT.
  endif.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CPALLRNTYP_CHANGED ).
  endif.

endmethod.
  method SET_FBUSU.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FBUSU ).

    move IF_FBUSU to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_FIPMA.
* JBL 30/05/2024 Comment all code for GAP88
*    data:  LF_CHANGED type ABAP_BOOL.
*    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.
*
*    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FIPMA ).
*
*    move IF_FIPMA to LS_PARAM-ATWRT.
*    move IF_SETBY to LS_PARAM-SETBY.
*
*    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).
*
*    if LF_CHANGED eq ABAP_TRUE.
****   Send Event
*      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FIPMA_CHANGED ).
*    endif.

  endmethod.
