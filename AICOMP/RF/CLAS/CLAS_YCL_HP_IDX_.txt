
class YCL_HP_IDX definition
  public
  create protected .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .

  data F_DCONF type /VCXI/VKCR_DCONF .
  data F_KUNAG type KUNAG .
  data F_KUNWE type KUNWE .
  data S_CMPRK type /VCXI/VKC_S_CMPRK .

  methods GET_DATA
    exporting
      !ET_SPEC_DB type YHP_IDX_TT_SPEC_DB
      !ET_LINK_DB type YHP_IDX_TT_LINK_DB
      !ET_BOARD_DB type YHP_IDX_TT_BOARD_DB
      !ET_PAPER_DB type YHP_IDX_TT_PAPER_DB
      !ET_PRINT_DB type YHP_IDX_TT_PRINT_DB
      !ET_INKS_DB type YHP_IDX_TT_INKS_DB
      !ET_SCORE_DB type YHP_IDX_TT_SCORES_DB
      !ET_SHIP_DB type YHP_IDX_TT_SHIP_DB
      !ET_SHIPU_DB type YHP_IDX_TT_SHIPU_DB
      !ET_RTE_DB type YHP_IDX_TT_RTE_DB
      !ET_MATNR_DB type YHP_IDX_TT_MATNR
      !ET_PACKMAT_DB type YHP_IDX_TT_PACKMAT .
  class-methods DESERIALIZE
    importing
      !IF_XML type /VCXI/VKX_XML
    returning
      value(RR_CNFIDX) type ref to YCL_HP_IDX
    exceptions
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods DELETE .
  methods SAVE
    raising
      /VCXI/CX_CKX .
  class-methods SAVE_BY_IBASE
    importing
      !IF_IBASE type IB_IBASE
      !IF_INDUPD type IBXX_REF-INDUPD
    raising
      /VCXI/CX_CKX .
  methods UPDATE
    importing
      !IF_GVCIN type /VCXI/VKCR_GVCIN
    raising
      /VCXI/CX_CKX .
  methods SERIALIZE
    returning
      value(RF_XML) type /VCXI/VKX_XML
    raising
      /VCXI/CX_CKX .
protected section.

  data F_CUOBJ type CUOBJ .
  data F_DELETED type ABAP_BOOL .
  data F_WERKS type WERKS_D .
  data R_CBASE type ref to CL_CBASE .
  data S_LOG type /VCXI/CKX_S_LOG .
  data S_OWNER type CUIB_BUSINESS_OBJECT .

  methods SERIALIZE_INFO
    returning
      value(RF_XML) type /VCXI/VKX_XML
    raising
      /VCXI/CX_CKX .
  methods DESERIALIZE_INFO
    importing
      !IF_XML type /VCXI/VKX_XML
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_CUOBJ type CUOBJ
    raising
      /VCXI/CX_CKX .
  class-methods GET_CLSNA_BY_CUOBJ
    importing
      !IF_CUOBJ type CUOBJ
    returning
      value(RF_CLSNA) type SEOCLSNAME
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CBASE_FREED
    for event IF_CBASE_E~CBASE_HANDLE_UNDEFINED of CL_CBASE .
  methods INIT_DB_TABLES
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
private section.

  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .
endclass. "YCL_HP_IDX definition
class YCL_HP_IDX implementation.
  method /VCXI/IF_CKX_OBJECT~GET_DESCR.
  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.
  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_GUID.

    move ME->F_CUOBJ to RF_GUID.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_ID.
  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

    data: LF_CUOBJ    type        CUOBJ,
          LF_CLSNA    type        SEOCLSNAME.
    data: LS_INSTANCE type        /VCXI/CKX_S_OBJECT_INSTANCE.
    data: LR_IDX      type ref to YCL_HP_IDX.

    check IF_GUID is not initial.

    read table YCL_HP_IDX=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
    if SY-SUBRC eq 0.
      move LS_INSTANCE-R_OBJECT to RR_OBJECT.
    else.
      move IF_GUID to LF_CUOBJ.

***   Get Class Name by CUOBJ
      move YCL_HP_IDX=>GET_CLSNA_BY_CUOBJ( IF_CUOBJ = LF_CUOBJ ) to LF_CLSNA.
      check LF_CLSNA is not initial.

***   Get new Instance
      create object LR_IDX
        type
          (LF_CLSNA)
        exporting
          IF_CUOBJ   = LF_CUOBJ.
      move LR_IDX ?to RR_OBJECT.
    endif.

  endmethod.
  method /VCXI/IF_CKX_OBJECT~GET_LOG.

    move ME->S_LOG to RS_LOG.

  endmethod.
  method CLASS_CONSTRUCTOR.

***------------------------------------------------------------------------------------------------
*** Register for Save
    call function 'IBHD_REGISTER_FOR_EVENT'
      exporting
        I_EVENT_NAME       = 'PREPARE_SAVE_START'
        I_METHOD           = 'YHP_IDX_EH_PREP_SAVE_START'
      exceptions
        ALREADY_REGISTERED = 1.
    if SY-SUBRC eq 0.
*** The entry could already be made in the DB, but now its made here (direct delete wouldn't be handled)
    else.
*** Thats how it should be
    endif.

  endmethod.
  method CONSTRUCTOR.

    field-symbols: <S_INSTANCE>           type        /VCXI/CKX_S_OBJECT_INSTANCE.

    move IF_CUOBJ to ME->F_CUOBJ.

*** Try to read what's on the DB
    ME->LOAD_FROM_DB( ).

***------------------------------------------------------------------------------------------------
*** Add instance to instance buffer
    append initial line to YCL_HP_IDX=>T_INSTANCE assigning <S_INSTANCE>.
    move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )  to <S_INSTANCE>-GUID.
    move ME                                  ?to <S_INSTANCE>-R_OBJECT.

***------------------------------------------------------------------------------------------------
*** Get CBase for Configuration
    if ME->F_CUOBJ is not initial.

      try.

          CL_CBASE=>GET_CURRENT_CBASE_BY_INSTANCE( exporting IV_INSTANCE            = ME->F_CUOBJ
                                                   importing EO_CBASE               = ME->R_CBASE ).
        catch CX_CBASE_ERROR.
***       Ignore missing Instances
          clear ME->R_CBASE.
      endtry.

    endif.

    if ME->R_CBASE is bound.

***   Set Event Handler
      set handler ME->HANDLE_CBASE_FREED for ME->R_CBASE.

    endif.

  endmethod.
  method DELETE.

*** Mark for deletion
    move ABAP_TRUE to ME->F_DELETED.

  endmethod.
  method DESERIALIZE.

    data: LF_CLSNA type STRING,
          LF_CUOBJ type CUOBJ,
          LF_INFO  type /VCXI/VKX_XML.

***----------------------------------------------------------------------------
*** Open XML
    check IF_XML is not initial.
    call transformation ID
         source xml IF_XML
         result F_CLSNA = LF_CLSNA    "Class Name
                F_CUOBJ = LF_CUOBJ    "Configuration (internal object number)
                F_INFO  = LF_INFO.    "Index Information

***----------------------------------------------------------------------------
*** Remove old instance form Instance Buffer
    delete T_INSTANCE where GUID = LF_CUOBJ.

*** Create new Instance
    try.
        create object RR_CNFIDX
          type
            (LF_CLSNA)
          exporting
            IF_CUOBJ = LF_CUOBJ.
      catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CREATE_OBJECT_ERROR ).
    endtry.

***----------------------------------------------------------------------------
*** Deserialize Info from XML
    RR_CNFIDX->DESERIALIZE_INFO( IF_XML = LF_INFO ).

  endmethod.
  method DESERIALIZE_INFO.

    call transformation ID
         source xml IF_XML
         result F_DCONF = ME->F_DCONF  "VCXI: Date of Configuration
                F_KUNAG = ME->F_KUNAG  "Sold-To Party
                F_KUNWE = ME->F_KUNWE  "Ship-To Party
                F_WERKS = ME->F_WERKS  "Plant
                S_CMPRK = ME->S_CMPRK  "VCXI: Config. Material & Profile Key
.

  endmethod.
  method GET_CLSNA_BY_CUOBJ.

    data:  LF_GVCIN  type /VCXI/VKCR_GVCIN.
    data:  LS_CMPRK  type /VCXI/VKC_S_CMPRK.

***------------------------------------------------------------------------------------------------
*** Get Configuration Instance GUID
    LF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = IF_CUOBJ ).

*** Get Config. Profile
    LS_CMPRK = /VCXI/CL_VKCR_GATEWAY=>GET_CMPRK( IF_GVCIN = LF_GVCIN ).

***------------------------------------------------------------------------------------------------
*** Get customized Class Name
    select single CLSNA into RF_CLSNA
      from YHP_IDX_TC010
      where CMATN eq LS_CMPRK-CMATN
        and PRFID eq LS_CMPRK-PRFID.

  endmethod.
  method GET_DATA.
  endmethod.
  method HANDLE_CBASE_FREED.

*** Deactivate Event Handler
    set handler ME->HANDLE_CBASE_FREED for ME->R_CBASE activation ABAP_FALSE.

*** Remove form Instance Buffer
    delete ME->T_INSTANCE where R_OBJECT eq ME.

*** Remove References
    clear:  ME->R_CBASE.

  endmethod.
  method INIT_DB_TABLES.
  endmethod.
  method LOAD_FROM_DB.

    data: LS_TD100  type YHP_IDX_TD100.

***--------------------------------------------------------------------------------------
*** Refresh all DB Tables
    ME->INIT_DB_TABLES( ).

    select single * into LS_TD100
      from YHP_IDX_TD100
      where CUOBJ eq ME->F_CUOBJ.
    if SY-SUBRC IS NOT INITIAL.

***   Set Created Info to Log
      move SY-UNAME     to ME->S_LOG-CREBY.
      get time stamp field ME->S_LOG-CREAT.
      return.

    endif.

    move-corresponding LS_TD100 to ME->S_LOG.

  endmethod.
  method SAVE.

*** Set Changed Info to Log
    move SY-UNAME     to ME->S_LOG-CHABY.
    get time stamp field ME->S_LOG-CHAAT.

    if ME->F_DELETED ne ABAP_TRUE.

***   Save Configuration Index
      call function 'YHP_IDX_DB_SAVE'
        in update task
        exporting
          IF_CUOBJ = ME->F_CUOBJ
          IF_KUNAG = ME->F_KUNAG
          IF_KUNWE = ME->F_KUNWE
          IF_WERKS = ME->F_WERKS
          IF_DCONF = ME->F_DCONF
          IS_CMPRK = ME->S_CMPRK
          IS_OWNER = ME->S_OWNER
          IS_LOG   = ME->S_LOG.

    else.

***   Delete Configuration
      call function 'YHP_IDX_DB_DEL'
        in update task
        exporting
          IF_CUOBJ = ME->F_CUOBJ.

    endif.

  endmethod.
  method SAVE_BY_IBASE.

    data: LF_CBASE         type        CUIB_CBASE.
    data: LS_INSTANCE      type        /VCXI/CKX_S_OBJECT_INSTANCE,
          LS_IBCO_INSTANCE type        CUIB_IBCO_INSTANCE_REC.
    data: LR_CBASE       type ref to CL_CBASE,
          LR_IDX         type ref to YCL_HP_IDX,
          LR_CBASE_ERROR type ref to CX_CBASE_ERROR.

    try.

***     Get CBase Reference
        move IF_IBASE to LF_CBASE.
        CL_CBASE=>GET_CURRENT_CBASE_BY_CBASENO( exporting IV_CBASE_NUMBER = LF_CBASE
                                                importing EO_CBASE        = LR_CBASE ).
        check LR_CBASE is bound.

***------------------------------------------------------------------------------------------------
        loop at YCL_HP_IDX=>T_INSTANCE into LS_INSTANCE.
          move LS_INSTANCE-R_OBJECT ?to LR_IDX.
          check LR_IDX->R_CBASE is bound and
                LR_IDX->R_CBASE eq LR_CBASE.

***       Deletion of IBase
          if IF_INDUPD eq 'D'.
            LR_IDX->DELETE( ).
          else.
***         Convert CUOBJ from Temp to real
            LR_CBASE->GET_SINGLE_INSTANCE( exporting IV_INSTANCE           = LR_IDX->F_CUOBJ
                                                     IV_WITH_CBASE_NUMBERS = ABAP_TRUE
                                           importing ES_INSTANCE           = LS_IBCO_INSTANCE ).
            move LS_IBCO_INSTANCE-INSTANCE to LR_IDX->F_CUOBJ.

***         Update Owner
            move LS_IBCO_INSTANCE-OWNER to LR_IDX->S_OWNER.
          endif.

***       Save to DB
          LR_IDX->SAVE( ).
        endloop.

      catch CX_CBASE_ERROR into LR_CBASE_ERROR.
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CBASE_ERROR ).
    endtry.

  endmethod.
  method SERIALIZE.

    data: LF_CLSNA type STRING,
          LF_INFO  type /VCXI/VKX_XML.

*** Get Class Name
    LF_CLSNA = cast CL_ABAP_CLASSDESCR( CL_ABAP_CLASSDESCR=>DESCRIBE_BY_OBJECT_REF( P_OBJECT_REF = ME ) )->GET_RELATIVE_NAME( ).

*** Get Serialized Infos
    LF_INFO = ME->SERIALIZE_INFO(  ).


*** Create XML
    call transformation ID
         source F_CLSNA = LF_CLSNA     "Class Name
                F_CUOBJ = ME->F_CUOBJ  "Configuration (internal object number)
                F_INFO  = LF_INFO      "Index Information
        result xml RF_XML.

  endmethod.
  method SERIALIZE_INFO.

    call transformation ID
         source F_DCONF = ME->F_DCONF  "VCXI: Date of Configuration
                F_KUNAG = ME->F_KUNAG  "Sold-To Party
                F_KUNWE = ME->F_KUNWE  "Ship-To Party
                F_WERKS = ME->F_WERKS  "Plant
                S_CMPRK = ME->S_CMPRK  "VCXI: Config. Material & Profile Key
        result xml RF_XML.

  endmethod.
  method UPDATE.

    data: LR_SVC          type ref to /VCXI/CL_VKSRA_SVC,
          LR_APPDATA_INFO type ref to DATA.
    field-symbols: <S_APPDATA_INFO>  type        ZVCXI_XCS_S_APPDATA_INFO.

***----------------------------------------------------------------------------
*** Refresh all DB Tables
    ME->INIT_DB_TABLES( ).

***----------------------------------------------------------------------------
*** Get Config. Profile
    ME->S_CMPRK = /VCXI/CL_VKCR_GATEWAY=>GET_CMPRK( IF_GVCIN = IF_GVCIN ).

*** Get SmartVC API Instance
    LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = IF_GVCIN ).

    LR_APPDATA_INFO = LR_SVC->GET_APPDATA_INFO( ).
    if LR_APPDATA_INFO is bound.
      assign LR_APPDATA_INFO->* to <S_APPDATA_INFO>.
      move <S_APPDATA_INFO>-S_KNA1_AG-KUNNR to ME->F_KUNAG.
      move <S_APPDATA_INFO>-S_KNA1_WE-KUNNR to ME->F_KUNWE.
      move <S_APPDATA_INFO>-WERKS           to ME->F_WERKS.
      move <S_APPDATA_INFO>-DCONF           to ME->F_DCONF.
    endif.

  endmethod.
