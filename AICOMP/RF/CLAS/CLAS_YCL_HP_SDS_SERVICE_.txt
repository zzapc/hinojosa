
class YCL_HP_SDS_SERVICE definition
  public
  final
  create public .

public section.

  class-methods UPLOAD_SDP_DATA
    exporting
      !ER_CSV type ref to YCL_HP_SMD_AIS_CSV
    returning
      value(RT_DATA) type /VCXI/CKX_TT_STRING
    raising
      /VCXI/CX_CKX .
  class-methods UPLOAD_SDP_DATA_XLS
    returning
      value(RT_DATA) type /VCXI/CKX_TT_STRING
    raising
      /VCXI/CX_CKX .
  class-methods IS_BEDAE_MTO
    importing
      !IF_BEDAE type BEDAE
    returning
      value(RF_MTO) type FLAG .
  class-methods IS_BEDAE_SOC
    importing
      !IF_BEDAE type BEDAE
    returning
      value(RF_SOC) type FLAG .
  class-methods IS_VBTYP_NEGATIVE_SIGN
    importing
      !IF_VBTYP type VBTYP
    returning
      value(RF_NEGATIVE) type ABAP_BOOL .
  class-methods GET_CONFIRMED_DATE_VBEP
    importing
      !IT_XVBEP type VA_VBEPVB_T
      !IF_POSNR type POSNR
    returning
      value(RF_EDATU) type EDATU .
  class-methods IS_DUMMY_MATERIAL
    importing
      !IF_MATNR type MATNR
    returning
      value(RF_IS_DUMMY) type BOOLEAN .
  class-methods CALL_SD_DOCUMENT
    importing
      !IF_BUKRS type BUKRS default '    '
      !IF_FCODE type EDFCODE default '    '
      !IF_GJAHR type GJAHR default '0000'
      !IF_LGNUM type LGNUM default '   '
      !IF_POSNR type POSNR_VA default '000000'
      !IF_VBELN type VBELN
      !IF_AUFNR type AUFNR optional
      !IF_VBTYP type VBTYP default ' '
      !IF_FI_APPLI type EDI_APPLIC default '  '
      !IF_CHG type FLAG optional .
  class-methods FILL_X_STRUCT
    importing
      !IS_DATA type ANY
      !IS_DATA_OLD type ANY optional
    changing
      !CS_X_STRUC type ANY
    raising
      /VCXI/CX_CKX .
protected section.
private section.

  types:
    begin of TY_BEDAE_MTO,
      BEDAE type BEDAE,
      MTO   type FLAG,
    end of TY_BEDAE_MTO .
  types:
    begin of TY_BEDAE_SOC,
      BEDAE type BEDAE,
      SOC   type FLAG,
    end of TY_BEDAE_SOC .
  types:
    begin of TY_MATNR_CHECKED,
      MATNR type MATNR,
      FLAG  type ABAP_BOOL,
    end of TY_MATNR_CHECKED .

  class-data:
    GT_MATNR_CHECKED type standard table of TY_MATNR_CHECKED .
  class-data:
    T_BEDAE_MTO type standard table of TY_BEDAE_MTO .
  class-data:
    T_BEDAE_SOC type standard table of TY_BEDAE_SOC .
  class-data GT_SOURCEMATS type TDT_MATNR .
endclass. "YCL_HP_SDS_SERVICE definition
class YCL_HP_SDS_SERVICE implementation.
  method CALL_SD_DOCUMENT.

    data: LF_ACT_SESSION type I.
    data: LF_MAX_SESSIONS type I.
    data: LF_GUI_CHECK_FAILED type SYINDEX.

    call function 'TH_USER_INFO'
      exporting
        USER             = SY-UNAME
        CHECK_GUI        = 1
      importing
        ACT_SESSIONS     = LF_ACT_SESSION
        MAX_SESSIONS     = LF_MAX_SESSIONS
        GUI_CHECK_FAILED = LF_GUI_CHECK_FAILED.

    if LF_ACT_SESSION < LF_MAX_SESSIONS and LF_GUI_CHECK_FAILED is initial.

      call function 'YHP_SDS_CALL_SDDOC'
        starting new task 'SD'
        destination 'NONE'
        exporting
          IF_BUKRS    = IF_BUKRS
          IF_FCODE    = IF_FCODE
          IF_GJAHR    = IF_GJAHR
          IF_LGNUM    = IF_LGNUM
          IF_POSNR    = IF_POSNR
          IF_VBELN    = IF_VBELN
          IF_AUFNR    = IF_AUFNR
          IF_VBTYP    = IF_VBTYP
          IF_FI_APPLI = IF_FI_APPLI
          IF_CHG      = IF_CHG.

    else.

      if IF_CHG eq 'X'.
        call function 'RV_CALL_CHANGE_TRANSACTION'
          exporting
            BUKRS = IF_BUKRS
            FCODE = IF_FCODE
            GJAHR = IF_GJAHR
            LGNUM = IF_LGNUM
            POSNR = IF_POSNR
            VBELN = IF_VBELN
            VBTYP = IF_VBTYP.

      else.

        call function 'RV_CALL_DISPLAY_TRANSACTION'
          exporting
            BUKRS    = IF_BUKRS
            FCODE    = IF_FCODE
            GJAHR    = IF_GJAHR
            LGNUM    = IF_LGNUM
            POSNR    = IF_POSNR
            VBELN    = IF_VBELN
            AUFNR    = IF_AUFNR
            VBTYP    = IF_VBTYP
            FI_APPLI = IF_FI_APPLI.

      endif.
    endif.

  endmethod.
method FILL_X_STRUCT.

  data: "LS_COMPONENT   type        ABAP_COMPONENTDESCR,
    LS_COMPONENT   type ABAP_SIMPLE_COMPONENTDESCR,
    "LS_COMPONENT_X type        ABAP_COMPONENTDESCR.
    LS_COMPONENT_X type ABAP_SIMPLE_COMPONENTDESCR.
  data: "LT_COMPONENT   type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE,
    LT_COMPONENT   type        CL_ABAP_STRUCTDESCR=>INCLUDED_VIEW,
    "LT_COMPONENT_X type        CL_ABAP_STRUCTDESCR=>COMPONENT_TABLE.
    LT_COMPONENT_X type        CL_ABAP_STRUCTDESCR=>INCLUDED_VIEW.
  data: LR_STRUCTDESCR   type ref to CL_ABAP_STRUCTDESCR,
        LR_STRUCTDESCR_X type ref to CL_ABAP_STRUCTDESCR.
  field-symbols: <FIELD>     type        ANY,
                 <FIELD_OLD> type        ANY,
                 <FIELD_X>   type        ANY.
**********************************************************************
*** PaFi 11.05.22 this is a copy of /VCXI/CL_CKX_SERVICE->FILL_X_STRUCT
*** the original method does not support appends / includes in the provided data

  LR_STRUCTDESCR   ?= CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_DATA( P_DATA = IS_DATA ).
  LR_STRUCTDESCR_X ?= CL_ABAP_STRUCTDESCR=>DESCRIBE_BY_DATA( P_DATA = CS_X_STRUC ).

*  LT_COMPONENT   = LR_STRUCTDESCR->GET_COMPONENTS( ).
  LT_COMPONENT = LR_STRUCTDESCR->GET_INCLUDED_VIEW( ).
*  LT_COMPONENT_X = LR_STRUCTDESCR_X->GET_COMPONENTS( ).
  LT_COMPONENT_X = LR_STRUCTDESCR_X->GET_INCLUDED_VIEW( ).

*** Process all Components of the Source Structure
  loop at LT_COMPONENT into LS_COMPONENT.
    read table LT_COMPONENT_X with key NAME = LS_COMPONENT-NAME
          into LS_COMPONENT_X.
    check SY-SUBRC eq 0.

    assign component LS_COMPONENT-NAME   of structure IS_DATA  to <FIELD>.
    check SY-SUBRC = 0.
    assign component LS_COMPONENT_X-NAME of structure CS_X_STRUC to <FIELD_X>.
    check SY-SUBRC = 0.

    if IS_DATA_OLD is supplied.
***   Fill only if value differes from old value
      assign component LS_COMPONENT-NAME of structure IS_DATA_OLD to <FIELD_OLD>.
      check SY-SUBRC = 0.
      check <FIELD> ne <FIELD_OLD>.
    else.
***   Fill only if a value has been supplied for the component
      check <FIELD> is not initial.
    endif.

*** Use Value for matching Type or apply a 'X'
    if LS_COMPONENT-TYPE eq LS_COMPONENT_X-TYPE.
      move <FIELD> to <FIELD_X>.
    else.
      move ABAP_TRUE to <FIELD_X>.
    endif.
  endloop.

endmethod.
  method GET_CONFIRMED_DATE_VBEP.

    loop at IT_XVBEP into data(LS_XVBEP) where UPDKZ ne 'D' and   "Delete
                                               POSNR eq IF_POSNR and
                                               BMENG > 0.
      RF_EDATU = LS_XVBEP-EDATU.
      exit.
    endloop.

  endmethod.
  method IS_BEDAE_MTO.
    data: LS_T459K type T459K.

    check IF_BEDAE is not initial.

    try.
***     try to read from buffer
        RF_MTO = T_BEDAE_MTO[ BEDAE = IF_BEDAE ]-MTO.

      catch CX_SY_ITAB_LINE_NOT_FOUND.

*** get assigned requirement class
        call function 'SD_SALES_ITEM_REQUIREMENT_CLAS'
          exporting
            I_VBAP_BEDAE = IF_BEDAE
          importing
            E_T459K      = LS_T459K.

*** check if assigned Account Assignment Category leads to special stock type 'E'
        select count( * ) from T163K where KNTTP eq LS_T459K-KNTTP and SOBKZ eq 'E'.
        if SY-SUBRC is initial.
          append initial line to T_BEDAE_MTO assigning field-symbol(<S_BEDAE_MTO>).
          <S_BEDAE_MTO>-BEDAE = IF_BEDAE.
          <S_BEDAE_MTO>-MTO = ABAP_TRUE.
          RF_MTO = <S_BEDAE_MTO>-MTO.
        else.
          append initial line to T_BEDAE_MTO assigning <S_BEDAE_MTO>.
          <S_BEDAE_MTO>-BEDAE = IF_BEDAE.
          <S_BEDAE_MTO>-MTO = ABAP_FALSE.
          RF_MTO = <S_BEDAE_MTO>-MTO.
        endif.

    endtry.

  endmethod.
  method IS_BEDAE_SOC.
    data: LS_T459K type T459K.

    check IF_BEDAE is not initial.

    try.
***     try to read from buffer
        RF_SOC = T_BEDAE_SOC[ BEDAE = IF_BEDAE ]-SOC.

      catch CX_SY_ITAB_LINE_NOT_FOUND.

*** get assigned requirement class
        call function 'SD_SALES_ITEM_REQUIREMENT_CLAS'
          exporting
            I_VBAP_BEDAE = IF_BEDAE
          importing
            E_T459K      = LS_T459K.

        append initial line to T_BEDAE_SOC assigning field-symbol(<S_BEDAE_SOC>).
        <S_BEDAE_SOC>-BEDAE = IF_BEDAE.
        if LS_T459K-KALART is not initial.  "Costing Method
          <S_BEDAE_SOC>-SOC = ABAP_TRUE.
        endif.
        RF_SOC = <S_BEDAE_SOC>-SOC.

    endtry.

  endmethod.
  method IS_DUMMY_MATERIAL.
    data: LS_DFIES type DFIES.

*    check IF_MATNR is not initial.
*
**** check if material was already checked
*    try.
*        RF_IS_DUMMY = GT_MATNR_CHECKED[ MATNR = IF_MATNR ]-FLAG.
*        exit.
*      catch CX_SY_ITAB_LINE_NOT_FOUND.
*
****     fill buffer table for source materials
*        if LINES( GT_SOURCEMATS ) eq 0.
*          select * from ZS4MQ_TC0010 into table @data(LT_CUST).
*          sort LT_CUST by TABNAME_SOURCEMAT.
*
*          delete adjacent duplicates from LT_CUST comparing TABNAME_SOURCEMAT.
*
****       loop over customizing and read table entries
*          loop at LT_CUST into data(LS_CUST).
*            call function 'DDIF_NAMETAB_GET'
*              exporting
*                TABNAME    = LS_CUST-TABNAME_SOURCEMAT
*                LFIELDNAME = LS_CUST-FIELDNAME_SOURCEMAT
*              importing
*                DFIES_WA   = LS_DFIES
*              exceptions
*                NOT_FOUND  = 1
*                others     = 2.
*
****         table and field valid?
*            check SY-SUBRC is initial.
*
****         select source-materials into buffer table
*            select (LS_CUST-FIELDNAME_SOURCEMAT)
*              appending table GT_SOURCEMATS
*              from (LS_CUST-TABNAME_SOURCEMAT).
*
*          endloop.
*        endif.
*
****     check if MATNR is MBQ Source Material
*        append initial line to GT_MATNR_CHECKED assigning field-symbol(<S_MATNR_CHECKED>).
*        <S_MATNR_CHECKED>-MATNR = IF_MATNR.
*
*        if LINE_EXISTS( GT_SOURCEMATS[ TABLE_LINE = IF_MATNR ] ).
*          <S_MATNR_CHECKED>-FLAG = ABAP_TRUE.
*          RF_IS_DUMMY = <S_MATNR_CHECKED>-FLAG.
*        endif.
*
*    endtry.

  endmethod.
  method IS_VBTYP_NEGATIVE_SIGN.

*    if CL_SD_DOC_CATEGORY_UTIL=>IS_INVOICE_NEGATIVE( IV_VBTYP = IF_VBTYP ) eq ABAP_TRUE
*    or CL_SD_DOC_CATEGORY_UTIL=>IS_ANY_RETOUR( IV_VBTYP = IF_VBTYP ) eq ABAP_TRUE.
*
*      RF_NEGATIVE = ABAP_TRUE.
*
*    endif.

  endmethod.
method UPLOAD_SDP_DATA.

  data: LF_FPATH  type STRING,
        LF_RC     type I,
        LF_ACTION type I.
  data: LT_FILES  type FILETABLE.

***-------------------------------------------------------------------*
  try.

***   Display File Browser
      call method CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
        exporting
          MULTISELECTION = ABAP_FALSE
        changing
          FILE_TABLE     = LT_FILES
          RC             = LF_RC
          USER_ACTION    = LF_ACTION.

***   Get Selected File
      if LF_ACTION eq CL_GUI_FRONTEND_SERVICES=>ACTION_OK.
        if LINES( LT_FILES ) > 0.
          LF_FPATH = LT_FILES[ 1 ]-FILENAME.
          clear LT_FILES.
        endif.
      endif.

    catch CX_ROOT into data(LR_CX_ROOT).

***   Raise Error
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_ROOT ).

  endtry.

  if LF_FPATH is initial.
    return.
  endif.

*** Upload File Content in UTF-8
  ER_CSV = new #( ).
  ER_CSV->GET_FILE_DATA( conv YHP_SMD_AIS_FPATH( LF_FPATH ) ).
  ER_CSV->SAVE_TO_DB( IF_COMMIT = ABAP_FALSE ).

endmethod.
method UPLOAD_SDP_DATA_XLS.

  data: LF_FPATH  type STRING,
        LF_RC     type I,
        LF_ACTION type I.

  data: LT_FILES type FILETABLE.
  data: LT_RAWDA type TRUXS_T_TEXT_DATA.

  try.

***   Display File Browser
      call method CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
        exporting
          MULTISELECTION = ABAP_FALSE
        changing
          FILE_TABLE     = LT_FILES
          RC             = LF_RC
          USER_ACTION    = LF_ACTION.

***   Get Selected File
      if LF_ACTION eq CL_GUI_FRONTEND_SERVICES=>ACTION_OK.
        if LINES( LT_FILES ) > 0.
          LF_FPATH = LT_FILES[ 1 ]-FILENAME.
          clear LT_FILES.
        endif.
      endif.

    catch CX_ROOT into data(LR_CX_ROOT).

***   Raise Error
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_ROOT ).

  endtry.

  if LF_FPATH is initial.
    return.
  endif.

  call function 'TEXT_CONVERT_XLS_TO_SAP'
    exporting
*     I_FIELD_SEPERATOR    =
*     I_LINE_HEADER        =
      I_TAB_RAW_DATA       = LT_RAWDA
      I_FILENAME           = conv RLGRAP-FILENAME( LF_FPATH )
    tables
      I_TAB_CONVERTED_DATA = RT_DATA
    exceptions
      CONVERSION_FAILED    = 1
      others               = 2.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.



endmethod.
