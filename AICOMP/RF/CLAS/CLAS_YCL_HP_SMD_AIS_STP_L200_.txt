
class YCL_HP_SMD_AIS_STP_L200 definition
  public
  inheriting from YCL_HP_SMD_AIS_STP_L000
  final
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_RPSEG type ref to /VCXI/CL_CKMR_RPSEG
    raising
      /VCXI/CX_CKX .
protected section.

  data R_DCO_OUTPUT type ref to YCL_HP_SMD_AIS_DCO .
  data R_DCO_INPUT type ref to YCL_HP_SMD_AIS_DCO .

  methods ANALYZE_RESULT_DCO
    redefinition .
  methods EXECUTE_SUBPROCESS
    redefinition .
  methods GET_SUBPROCESS_DCO
    redefinition .
private section.
endclass. "YCL_HP_SMD_AIS_STP_L200 definition
class YCL_HP_SMD_AIS_STP_L200 implementation.
method ANALYZE_RESULT_DCO.

  data: LR_DCO_SUB type ref to YCL_HP_SMD_AIS_DCO.

  field-symbols: <S_WRKLI>     type YHP_SMD_AIS_S_QUOT_WRKLI,
                 <S_WRKLI_SUB> type YHP_SMD_AIS_S_QUOT_WRKLI.

*** Map Resulting DCO of SubProcess
  IR_RPROC->MAP_DCO( changing CR_DCO = LR_DCO_SUB ).
  if LR_DCO_SUB is not bound.
    return.
  endif.

  read table LR_DCO_SUB->T_WRKLI assigning <S_WRKLI_SUB> index 1.
  if SY-SUBRC eq 0.
    read table ME->R_DCO_OUTPUT->T_WRKLI assigning <S_WRKLI> with key POSNR = <S_WRKLI_SUB>-POSNR.
    if SY-SUBRC eq 0.
      <S_WRKLI> = <S_WRKLI_SUB>.
    endif.
  endif.

endmethod.
method CONSTRUCTOR.

*** Super Constructor
  SUPER->CONSTRUCTOR( IR_RPSEG = IR_RPSEG ).

*** Map DCO to Required Input/Output
  ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_INPUT ).
  ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_OUTPUT ).

endmethod.
method EXECUTE_SUBPROCESS.

  IR_RPROC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = /VCXI/CL_CKMR_RPROC=>C_FCODE_EXECUTE_SUBMIT ).

endmethod.
method GET_SUBPROCESS_DCO.

  data: LR_DCO type ref to YCL_HP_SMD_AIS_DCO.

  field-symbols: <S_WRKLI> type YHP_SMD_AIS_S_QUOT_WRKLI.

*** Create DCO per Item
  loop at ME->R_DCO_INPUT->T_WRKLI assigning <S_WRKLI>.
    create object LR_DCO.
    move ME->R_DCO_INPUT->F_FSIDA to LR_DCO->F_FSIDA.
    move ME->R_DCO_INPUT->F_FCALC to LR_DCO->F_FCALC.
    append <S_WRKLI> to LR_DCO->T_WRKLI.
    append LR_DCO to RT_DCO.
    free   LR_DCO.
  endloop.

endmethod.
