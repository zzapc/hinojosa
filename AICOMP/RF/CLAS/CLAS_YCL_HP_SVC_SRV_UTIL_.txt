
class YCL_HP_SVC_SRV_UTIL definition
  public
  final
  create public .

public section.

  constants C_VCSTA_VALID type ZVCXI_XCI_VCSTA value 'V' ##NO_TEXT.
  constants C_VCSTA_LOCKED type ZVCXI_XCI_VCSTA value 'L' ##NO_TEXT.
  constants C_VCSTA_INVALID type ZVCXI_XCI_VCSTA value 'I' ##NO_TEXT.

  class-methods FREE_EDITABLE_SVC
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IF_VBELN type VBELN_VA optional
      !IF_MATNR type MATNR optional
      !IF_UNLOCK type ABAP_BOOL default ABAP_TRUE
    exceptions
      /VCXI/CX_CKX .
  class-methods CHECK_SVC_CONFIG
    importing
      !IF_CUOBJ type CUOBJ
    exporting
      !EF_ELMST type /VCXI/VKSR_ELMST
      !ET_MESSAGES type /VCXI/CKXM_TT_MSG
    raising
      /VCXI/CX_CKX .
  class-methods GET_LOVC_STATUS
    importing
      !IF_CUOBJ type CUOBJ
    returning
      value(RF_VCSTA) type ZVCXI_XCI_VCSTA
    raising
      /VCXI/CX_CKX .
  class-methods SET_LOVC_STATUS
    importing
      !IF_CUOBJ type CUOBJ
      !IF_OBJEK type CUOBN
      !IF_OBTAB type TABELLE
      !IF_VCSTA type ZVCXI_XCI_VCSTA
    raising
      /VCXI/CX_CKX .
  class-methods OPEN_EDITABLE_SVC
    importing
      !IF_VBELN type VBELN_VA optional
      !IF_POSNR type POSNR_VA optional
      !IF_MATNR type MATNR optional
      !IF_WERKS type WERKS_D optional
      !IF_LOCK type ABAP_BOOL default ABAP_TRUE
    exporting
      !ER_SVC type ref to /VCXI/CL_VKSRA_SVC
    raising
      /VCXI/CX_CKX .
  class-methods SAVE_EDITABLE_SVC
    importing
      !IF_VBELN type VBELN_VA optional
      !IF_POSNR type POSNR_VA optional
      !IF_MATNR type MATNR optional
      !IF_WERKS type WERKS_D optional
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IF_FORCE_SAVE type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.
private section.

  types:
    YT_BAPICUCFG type standard table of BAPICUCFG .
  types:
    YT_BAPICUVAL type standard table of BAPICUVAL .
  types:
    YT_BAPIRET2 type standard table of BAPIRET2 .
  types:
    YT_BAPISDITM type standard table of BAPISDITM .
  types:
    YT_BAPISDITMX type standard table of BAPISDITMX .
  types:
    YT_BAPICUINS type standard table of BAPICUINS .
  types:
    YT_BAPICUPRT type standard table of BAPICUPRT .
  types:
    YT_BAPICUREF type standard table of BAPICUREF .
  types:
    YT_BAPICUCFGM type standard table of BAPICUCFGM .
  types:
    YT_BAPICUINSM type standard table of BAPICUINSM .
  types:
    YT_BAPICUPRTM type standard table of BAPICUPRTM .
  types:
    YT_BAPICUREFM type standard table of BAPICUREFM .
  types:
    YT_BAPICUVALM type standard table of BAPICUVALM .
  types:
    YT_BAPISDIT type standard table of BAPISDIT .

  class-methods MAINTAIN_MATERIAL
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_CUOBJ type CUOBJ
    raising
      /VCXI/CX_CKX .
  class-methods MAINTAIN_SD_DOC
    importing
      !IF_VBELN type VBELN
      !IF_POSNR type POSNR
      !IF_CUOBJ type CUOBJ
    exceptions
      /VCXI/CX_CKX .
endclass. "YCL_HP_SVC_SRV_UTIL definition
class YCL_HP_SVC_SRV_UTIL implementation.
  method CHECK_SVC_CONFIG.

    data: LF_GVCIN  type        /VCXI/VKCR_GVCIN.
    data: LR_SVC         type ref to /VCXI/CL_VKSRA_SVC,
          LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT,
          LR_MESSAGES    type ref to /VCXI/CL_CKXM_OBJMSG_MGR.

*** Check Configuration
    check IF_CUOBJ is not initial.
    LF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = IF_CUOBJ ).
    LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = LF_GVCIN ).

    check LR_SVC is bound.

*** Get configuration status
    EF_ELMST = LR_SVC->GET_STATUS( ).

*** Check if configuration is consistent
    check EF_ELMST ne /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.

*** Get error messages from configuration
    LR_MESSAGES = LR_SVC->GET_STATUS_MSG( ).
    ET_MESSAGES = LR_MESSAGES->R_MESSAGE->T_MSG.
    delete ET_MESSAGES where MSGTY ne 'E'.

  endmethod.
method FREE_EDITABLE_SVC.

*** Free SVC Instance
  call function 'CUCB_INITIALIZER'.
  if IR_SVC is bound.
    IR_SVC->DO_FREE( ).
  endif.

***--------------------------------------------------------------------
*** Release Lock
  if IF_VBELN is not initial and
     IF_UNLOCK eq ABAP_TRUE.
    call function 'DEQUEUE_EVVBAKE'
      exporting
        MODE_VBAK = 'E'
*       MANDT     = SY-MANDT
        VBELN     = IF_VBELN.
*       X_VBELN         = ' '
*       _SCOPE          = '3'
*       _SYNCHRON       = ' '
*       _COLLECT        = ' '
  endif.
  if IF_MATNR is not initial and
     IF_UNLOCK eq ABAP_TRUE.
    call function 'DEQUEUE_EMMARAE'
      exporting
        MODE_MARA = 'E'
*       MANDT     = SY-MANDT
        MATNR     = IF_MATNR.
*       X_MATNR         = ' '
*       _SCOPE          = '3'
*       _SYNCHRON       = ' '
*       _COLLECT        = ' '
  endif.

endmethod.
  method GET_LOVC_STATUS.

    data: LS_IBASE type IBCO2_IBASE_REC.

    data: LT_CONF type TT_CONF_OUT.

    check IF_CUOBJ is not initial.

*** Get Config Data
    call function 'VC_I_GET_CONFIGURATION'
      exporting
        INSTANCE      = IF_CUOBJ
        LANGUAGE      = SY-LANGU
        PRINT_SALES   = ABAP_TRUE
      tables
        CONFIGURATION = LT_CONF
      exceptions
        others        = 4.

*** Get SAP VC Status
    call function 'CE_I_GET_STATUS'
      exporting
        INSTANCE           = IF_CUOBJ
      exceptions
        FREE               = 1
        INCOMPLETE         = 2
        LOCKED             = 3
        INSTANCE_NOT_FOUND = 4
        STATUS_NOT_FOUND   = 5
        others             = 6.

    case SY-SUBRC.
      when 1.
***     Free -> Valid
        move C_VCSTA_VALID    to RF_VCSTA.
      when 2.
***     Incomplete -> Invalid
        move C_VCSTA_INVALID  to RF_VCSTA.
      when 3.
***     Locked
        move C_VCSTA_LOCKED   to RF_VCSTA.
      when others.
        clear RF_VCSTA.
    endcase.

  endmethod.
method MAINTAIN_MATERIAL.

  data: LS_MARA_UEB type          MARA_UEB,
        LS_MARC_UEB type          MARC_UEB.
  data: LT_MARA_UEB type table of MARA_UEB,
        LT_MARC_UEB type table of MARC_UEB,
        LT_MERRDAT  type table of MERRDAT.

**---------------------------------------------------------------------
*** Prepare parameters for function module
  move   SY-MANDT    to LS_MARA_UEB-MANDT.
  move   IF_MATNR    to LS_MARA_UEB-MATNR.
  move   'MM02'      to LS_MARA_UEB-TCODE.
  move   SY-UNAME    to LS_MARA_UEB-AENAM.
  append LS_MARA_UEB to LT_MARA_UEB.

  move   SY-MANDT to LS_MARC_UEB-MANDT.
  move   IF_MATNR to LS_MARC_UEB-MATNR.
  move   IF_WERKS to LS_MARC_UEB-WERKS.
  move   IF_CUOBJ to LS_MARC_UEB-CUOBJ.
  clear  LS_MARC_UEB-MMSTA.
  append LS_MARC_UEB to LT_MARC_UEB.

*** Initialize MM global structures because MATERIAL_MAINTAIN_DARK calls YMC_MM_MM_SAVE_DATA which could inject wrong data in mass processing
  call function 'YMC_MM_MM_INIT_DATA'.

*** Update material with link to configurable material
  call function 'MATERIAL_MAINTAIN_DARK'
    exporting
      P_KZ_NO_WARN           = 'X'
      KZ_PRF                 = 'I'
      CALL_MODE              = 'BAP'
    tables
      AMARA_UEB              = LT_MARA_UEB
      AMARC_UEB              = LT_MARC_UEB
      AMERRDAT               = LT_MERRDAT
    exceptions
      KSTATUS_EMPTY          = 1
      TKSTATUS_EMPTY         = 2
      T130M_ERROR            = 3
      INTERNAL_ERROR         = 4
      TOO_MANY_ERRORS        = 5
      UPDATE_ERROR           = 6
      ERROR_PROPAGATE_HEADER = 7
      others                 = 8.

  if SY-SUBRC ne 0.
*** Error while maintaing material &1
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                    IF_MSGID = 'YHP_SMD_AIS'
                                                    IF_MSGNO = '016'
                                                    IF_MSGV1 = IF_MATNR ).
  endif.

endmethod.
method MAINTAIN_SD_DOC.

  data: LF_CONFIG_ID  type CUX_CFG_ID,
        LF_INST_ID    type CU_INST_ID.
  data: LS_BAPISDHD1  type BAPISDHD1,
        LS_BAPISDHD1X type BAPISDHD1X,
        LS_CONF       type API_VALUE,
        LS_BAPISDLS   type BAPISDLS,
        LS_ORDER_VIEW type ORDER_VIEW.
  data: LT_BAPICUCFG  type YT_BAPICUCFG,
        LT_BAPICUVAL  type YT_BAPICUVAL,
        LT_BAPICUINS  type YT_BAPICUINS,
        LT_BAPICUPRT  type YT_BAPICUPRT,
        LT_BAPICUREF  type YT_BAPICUREF,
        LT_BAPICUCFGM type YT_BAPICUCFGM,
        LT_BAPICUINSM type YT_BAPICUINSM,
        LT_BAPICUPRTM type YT_BAPICUPRTM,
        LT_BAPICUREFM type YT_BAPICUREFM,
        LT_BAPICUVALM type YT_BAPICUVALM,
        LT_BAPISDITM  type YT_BAPISDITM,
        LT_BAPISDITMX type YT_BAPISDITMX,
        LT_BAPISDIT   type YT_BAPISDIT,
        LT_CONF       type standard table of API_VALUE,
        LT_BAPIRET2   type YT_BAPIRET2,
        LT_VBELN      type standard table of SALES_KEY.
  field-symbols: <S_BAPIRET2>   like line of LT_BAPIRET2,
                 <S_BAPISDITM>  like line of LT_BAPISDITM,
                 <S_BAPISDITMX> like line of LT_BAPISDITMX,
                 <S_BAPISDIT>   like line of LT_BAPISDIT,
                 <S_BAPICUCFG>  like line of LT_BAPICUCFG,
                 <S_BAPICUVAL>  like line of LT_BAPICUVAL,
                 <S_BAPICUINS>  like line of LT_BAPICUINS,
                 <S_BAPICUPRT>  like line of LT_BAPICUPRT,
                 <S_BAPICUREF>  like line of LT_BAPICUREF,
                 <S_BAPICUCFGM> like line of LT_BAPICUCFGM,
                 <S_BAPICUINSM> like line of LT_BAPICUINSM,
                 <S_BAPICUPRTM> like line of LT_BAPICUPRTM,
                 <S_BAPICUREFM> like line of LT_BAPICUREFM,
                 <S_BAPICUVALM> like line of LT_BAPICUVALM.

***----------------------------------------------------------------------------
*** Get current sales document values
  move ABAP_TRUE to LS_ORDER_VIEW-ITEM.
  move ABAP_TRUE to LS_ORDER_VIEW-CONFIGURE.
  append IF_VBELN to LT_VBELN.
  call function 'BAPISDORDER_GETDETAILEDLIST'
    exporting
      I_BAPI_VIEW           = LS_ORDER_VIEW
    tables
      SALES_DOCUMENTS       = LT_VBELN
      ORDER_ITEMS_OUT       = LT_BAPISDIT
      ORDER_CFGS_CUREFS_OUT = LT_BAPICUREFM
      ORDER_CFGS_CUCFGS_OUT = LT_BAPICUCFGM
      ORDER_CFGS_CUINS_OUT  = LT_BAPICUINSM
      ORDER_CFGS_CUPRTS_OUT = LT_BAPICUPRTM
      ORDER_CFGS_CUVALS_OUT = LT_BAPICUVALM.

***----------------------------------------------------------------------------
*** Copy configuration tables
  loop at LT_BAPICUREFM assigning <S_BAPICUREFM> where SD_DOC = IF_VBELN
                                                   and POSEX  = IF_POSNR.
    append initial line to LT_BAPICUREF assigning <S_BAPICUREF>.
    move-corresponding <S_BAPICUREFM> to <S_BAPICUREF>.
    move <S_BAPICUREFM>-CONFIG_ID to LF_CONFIG_ID.
    move <S_BAPICUREFM>-INST_ID   to LF_INST_ID.
  endloop.
  loop at LT_BAPICUCFGM assigning <S_BAPICUCFGM> where SD_DOC = IF_VBELN
                                                   and POSEX  = IF_POSNR.
    append initial line to LT_BAPICUCFG assigning <S_BAPICUCFG>.
    move-corresponding <S_BAPICUCFGM> to  <S_BAPICUCFG>.
  endloop.
  loop at LT_BAPICUINSM assigning <S_BAPICUINSM> where SD_DOC    = IF_VBELN
                                                   and CONFIG_ID = LF_CONFIG_ID
                                                   and INST_ID   = LF_INST_ID.
    append initial line to LT_BAPICUINS assigning <S_BAPICUINS>.
    move-corresponding <S_BAPICUINSM> to <S_BAPICUINS>.
  endloop.
  loop at LT_BAPICUPRTM assigning <S_BAPICUPRTM> where SD_DOC    = IF_VBELN
                                                   and CONFIG_ID = LF_CONFIG_ID
                                                   and INST_ID   = LF_INST_ID.
    append initial line to LT_BAPICUPRT assigning <S_BAPICUPRT>.
    move-corresponding <S_BAPICUPRTM> to <S_BAPICUPRT>.
  endloop.
  loop at LT_BAPICUVALM assigning <S_BAPICUVALM> where SD_DOC    = IF_VBELN
                                                   and CONFIG_ID = LF_CONFIG_ID
                                                   and INST_ID   = LF_INST_ID.
    append initial line to LT_BAPICUVAL assigning <S_BAPICUVAL>.
    move-corresponding <S_BAPICUVALM> to <S_BAPICUVAL>.
  endloop.

***----------------------------------------------------------------------------
*** Prepare header
  move 'U' to LS_BAPISDHD1X-UPDATEFLAG.

***----------------------------------------------------------------------------
*** Prepare item
  loop at LT_BAPISDIT assigning <S_BAPISDIT> where DOC_NUMBER = IF_VBELN
                                               and ITM_NUMBER = IF_POSNR.
    append initial line to LT_BAPISDITM assigning <S_BAPISDITM>.
    move <S_BAPISDIT>-ITM_NUMBER to <S_BAPISDITM>-ITM_NUMBER.

    append initial line to LT_BAPISDITMX assigning <S_BAPISDITMX>.
    move IF_POSNR to <S_BAPISDITMX>-ITM_NUMBER.
    move 'U' to <S_BAPISDITMX>-UPDATEFLAG.
  endloop.

***----------------------------------------------------------------------------
*** BAPI Call
  call function 'CONFIGURATION_INITIALIZER'.
  call function 'CUCB_INITIALIZER'.
  call function 'SD_SALES_DOCUMENT_INIT'.

  move 'C' to LS_BAPISDLS-PRICING. " Copy manual pricing elements and redetermine the others
  call function 'SD_SALESDOCUMENT_CHANGE'
    exporting
      SALESDOCUMENT      = IF_VBELN
      ORDER_HEADER_IN    = LS_BAPISDHD1
      ORDER_HEADER_INX   = LS_BAPISDHD1X
      SIMULATION         = SPACE
      BEHAVE_WHEN_ERROR  = 'P'
      CALL_FROM_BAPI     = ABAP_TRUE
      LOGIC_SWITCH       = LS_BAPISDLS
    tables
      RETURN             = LT_BAPIRET2
      ITEM_IN            = LT_BAPISDITM
      ITEM_INX           = LT_BAPISDITMX
      SALES_CFGS_REF     = LT_BAPICUCFG
      SALES_CFGS_INST    = LT_BAPICUINS
      SALES_CFGS_PART_OF = LT_BAPICUPRT
      SALES_CFGS_VALUE   = LT_BAPICUVAL
      SALES_CFGS_REFINST = LT_BAPICUREF.
  loop at LT_BAPIRET2 assigning <S_BAPIRET2> where TYPE = 'E'.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = <S_BAPIRET2>-TYPE
                                          IF_MSGID = <S_BAPIRET2>-ID
                                          IF_MSGNO = <S_BAPIRET2>-NUMBER
                                          IF_MSGV1 = <S_BAPIRET2>-MESSAGE_V1
                                          IF_MSGV2 = <S_BAPIRET2>-MESSAGE_V2
                                          IF_MSGV3 = <S_BAPIRET2>-MESSAGE_V3
                                          IF_MSGV4 = <S_BAPIRET2>-MESSAGE_V4 ).
  endloop.

endmethod.
method OPEN_EDITABLE_SVC.
*** This method shall be used to get a SVC instance which can be changed by the EA classes

  data: LF_CUOBJ type CUOBJ,
        LF_MATNR type VBAP-MATNR,
        LF_WERKS type WERKS_D,
        LF_STDPD type MARC-STDPD,
        LF_GVCIN type /VCXI/VKCR_GVCIN.
  data: LS_INOB  type INOB.
  field-symbols: <S_VBAP> type VBAP.

*** Ensure that VBAP is not set. If set with old values, this quantity would override the quantity from application data
  call function 'SD_SALES_DOCUMENT_INIT'.

*** Check input parameter
  if ( IF_VBELN is initial and IF_MATNR is initial ) or
     ( IF_POSNR is initial and IF_WERKS is initial ) or
     ( IF_VBELN is not initial and IF_MATNR is not initial ) or
     ( IF_POSNR is not initial and IF_WERKS is not initial ).

*** Use a valid combination of VBELN/POSNR or MATNR/WERKS
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'YHP_SMD_AIS'
                                          IF_MSGNO = 009 ).
  endif.
  if ( IF_VBELN is not initial and IF_POSNR is initial ) or
     ( IF_MATNR is not initial and IF_WERKS is initial ).

*** Use a valid combination of VBELN/POSNR or MATNR/WERKS
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'YHP_SMD_AIS'
                                          IF_MSGNO = 009 ).
  endif.
  move IF_MATNR to LF_MATNR.
  move IF_WERKS to LF_WERKS.

***--------------------------------------------------------------------
*** Check for configuration
  if IF_VBELN is not initial.
    select single CUOBJ MATNR WERKS
      into (LF_CUOBJ, LF_MATNR, LF_WERKS)
      from VBAP
      where VBELN = IF_VBELN
        and POSNR = IF_POSNR.
    select single STDPD
      into LF_STDPD
      from MARC
      where MATNR = LF_MATNR
        and WERKS = LF_WERKS.
  endif.
  if IF_MATNR is not initial.
    select single CUOBJ STDPD
      into (LF_CUOBJ, LF_STDPD)
      from MARC
      where MATNR = LF_MATNR
        and WERKS = LF_WERKS.
  endif.
  if LF_CUOBJ is initial.
*** No configuration available
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'YHP_SMD_AIS'
                                          IF_MSGNO = 010 ).
  endif.

***--------------------------------------------------------------------
*** Get Lock
  if IF_VBELN is not initial and
     IF_LOCK eq ABAP_TRUE.
    call function 'ENQUEUE_EVVBAKE'
      exporting
        MODE_VBAK      = 'E'
*       MANDT          = SY-MANDT
        VBELN          = IF_VBELN
*       X_VBELN        = ' '
*       _SCOPE         = '2'
*       _WAIT          = ' '
*       _COLLECT       = ' '
      exceptions
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        others         = 3.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.
  if IF_MATNR is not initial and
     IF_LOCK eq ABAP_TRUE.
    call function 'ENQUEUE_EMMARAE'
      exporting
        MODE_MARA      = 'E'
*       MANDT          = SY-MANDT
        MATNR          = IF_MATNR
*       X_MATNR        = ' '
*       _SCOPE         = '2'
*       _WAIT          = ' '
*       _COLLECT       = ' '
      exceptions
        FOREIGN_LOCK   = 1
        SYSTEM_FAILURE = 2
        others         = 3.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

***--------------------------------------------------------------------
*** Run Configuration to enable editing mode
  move LF_CUOBJ  to LS_INOB-CUOBJ.
  move 'MARA'    to LS_INOB-ROBTAB. " also for sd positions
  move LF_STDPD  to LS_INOB-ROBJEK.
  if IF_VBELN is not initial.
    move 'VBPS'  to LS_INOB-OBTAB.
  else.
    move 'MARC'  to LS_INOB-OBTAB.
  endif.

  call function 'CE_C_PROCESSING'
    exporting
      INSTANCE                             = LS_INOB-CUOBJ
*     REFERENCE_INSTANCE                   =
      DATE                                 = SY-DATUM
      DISPLAY                              = ' ' " enable editing
      OBJECT_ID                            = LS_INOB-ROBTAB
      OBJECT                               = LS_INOB-ROBJEK
      OWNER_ID                             = LS_INOB-OBTAB
*     HEADER_SCREEN                        =
      PLANT                                = LF_WERKS
      NO_DIALOG                            = ABAP_TRUE
*     MATERIAL_VARIANT                     =
*     NO_F8                                = ' '
*     NO_F11                               = ' '
      SUB_TYPE                             = '05'
*     SIMULATION                           = ' '
      TYPE                                 = 'E'
*     EFFECTIVITY                          =
*     INITIALIZATION                       = ' '
*     CALLED_FROM_SALES                    = ' '
*     BOM_APPLICATION                      =
*     IS_BUSINESS_OBJECT                   =
*     IV_PROFILE_COUNTER                   =
*   IMPORTING
*     RETURN_WITH_FUNCTIONKEY              =
*     NEW_INSTANCE                         =
*   TABLES
*     APPLICATION_INPUT                    =
*     APPLICATION_OUTPUT                   =
    exceptions
     INTERNAL_ERROR                       = 1
     INSTANCE_NOT_FOUND                   = 2
     REFERENCE_INSTANCE_NOT_FOUND         = 3
     INSTANCE_IS_A_CLASSIFICATION         = 4
     NO_PLANT                             = 5
     NO_QUANTITY                          = 6
     NO_CONNECTION_TO_CONFIGURATION       = 7
     MATERIAL_VARIANT_NOT_ALLOWED         = 8
     INTERNAL_ERROR_ECM                   = 9
     EOASL_NOT_ALLOWED                    = 10
     MAXASL_NOT_ALLOWED                   = 11
     XC_UNPROCESSED_DATA                  = 12
     XC_FAILURE_PROCESSING_DATA           = 13
     NO_BOM                               = 14
     NO_KNOWLEDGE_BASE_FOUND              = 15
     ORDER_BOM_ERROR                      = 16
     others                               = 17.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***--------------------------------------------------------------------
*** Get SVC-Instance
  LF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = LF_CUOBJ ).
  ER_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = LF_GVCIN ).

endmethod.
method SAVE_EDITABLE_SVC.
*** This method shall be used to save a changed SVC instance

  data: LF_CUOBJ   type CUOBJ,
        LF_MATNR   type VBAP-MATNR,
        LF_WERKS   type WERKS_D,
        LF_STDPD   type MARC-STDPD,
        LF_CHANGED type ABAP_BOOL.
  data: LS_INOB   type INOB,
        LS_CONFIG type IBCO2_INSTANCE_REC2.
  data: LT_CONFIG  type IBCO2_INSTANCE_TAB2.
  data: LR_CX_CKX  type ref to /VCXI/CX_CKX.


*** Check input parameter
  if IR_SVC is not bound.
    return.
  endif.
  if ( IF_VBELN is initial and IF_MATNR is initial ) or
     ( IF_POSNR is initial and IF_WERKS is initial ) or
     ( IF_VBELN is not initial and IF_MATNR is not initial ) or
     ( IF_POSNR is not initial and IF_WERKS is not initial ).

*** Use a valid combination of VBELN/POSNR or MATNR/WERKS
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'YHP_SMD_AIS'
                                          IF_MSGNO = 009 ).
  endif.
  if ( IF_VBELN is not initial and IF_POSNR is initial ) or
     ( IF_MATNR is not initial and IF_WERKS is initial ).

*** Use a valid combination of VBELN/POSNR or MATNR/WERKS
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'YHP_SMD_AIS'
                                          IF_MSGNO = 009 ).
  endif.
  move IF_MATNR to LF_MATNR.
  move IF_WERKS to LF_WERKS.

***--------------------------------------------------------------------
*** Check for configuration
  if IF_VBELN is not initial.
    select single CUOBJ MATNR WERKS
      into (LF_CUOBJ, LF_MATNR, LF_WERKS)
      from VBAP
      where VBELN = IF_VBELN
        and POSNR = IF_POSNR.
    select single STDPD
      into LF_STDPD
      from MARC
      where MATNR = LF_MATNR
        and WERKS = LF_WERKS.
  endif.
  if IF_MATNR is not initial.
    select single CUOBJ STDPD
      into (LF_CUOBJ, LF_STDPD)
      from MARC
      where MATNR = LF_MATNR
        and WERKS = LF_WERKS.
  endif.
  if LF_CUOBJ is initial.
*** No configuration available
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'YHP_SMD_AIS'
                                          IF_MSGNO = 010 ).
  endif.

***--------------------------------------------------------------------
  if 1 eq 2.
    IR_SVC->START_UI( ). " for debugging
  endif.

***--------------------------------------------------------------------
*** Update Data Connector
  LF_CHANGED = IR_SVC->UPDATE_DC( ).
  if LF_CHANGED ne ABAP_TRUE and
     IF_FORCE_SAVE ne ABAP_TRUE.
    return.
  endif.

***--------------------------------------------------------------------
*** Run Configuration
  move LF_CUOBJ  to LS_INOB-CUOBJ.
  move 'MARA'    to LS_INOB-ROBTAB. " also for sd positions
  move LF_STDPD  to LS_INOB-ROBJEK.
  if IF_VBELN is not initial.
    move 'VBPS'   to LS_INOB-OBTAB.
    move IF_VBELN to LS_INOB-OBJEK(10).
    move IF_POSNR to LS_INOB-OBJEK+10(6).
  else.
    move 'MARC'   to LS_INOB-OBTAB.
    move IF_MATNR to LS_INOB-OBJEK(18).
    move IF_WERKS to LS_INOB-OBJEK+18(4).
  endif.

  call function 'CE_C_PROCESSING'
    exporting
      INSTANCE                       = LS_INOB-CUOBJ
*     REFERENCE_INSTANCE             =
      DATE                           = SY-DATUM
      DISPLAY                        = ' '
      OBJECT_ID                      = LS_INOB-ROBTAB
      OBJECT                         = LS_INOB-ROBJEK
      OWNER_ID                       = LS_INOB-OBTAB
*     HEADER_SCREEN                  =
      PLANT                          = LF_WERKS
      NO_DIALOG                      = ABAP_TRUE
*     MATERIAL_VARIANT               =
*     NO_F8                          = ' '
*     NO_F11                         = ' '
      SUB_TYPE                       = '05'
*     SIMULATION                     = ' '
      TYPE                           = 'E'
*     EFFECTIVITY                    =
*     INITIALIZATION                 = ' '
*     CALLED_FROM_SALES              = ' '
*     BOM_APPLICATION                =
*     IS_BUSINESS_OBJECT             =
*     IV_PROFILE_COUNTER             =
*   IMPORTING
*     RETURN_WITH_FUNCTIONKEY        =
*     NEW_INSTANCE                   =
*   TABLES
*     APPLICATION_INPUT              =
*     APPLICATION_OUTPUT             =
    exceptions
      INTERNAL_ERROR                 = 1
      INSTANCE_NOT_FOUND             = 2
      REFERENCE_INSTANCE_NOT_FOUND   = 3
      INSTANCE_IS_A_CLASSIFICATION   = 4
      NO_PLANT                       = 5
      NO_QUANTITY                    = 6
      NO_CONNECTION_TO_CONFIGURATION = 7
      MATERIAL_VARIANT_NOT_ALLOWED   = 8
      INTERNAL_ERROR_ECM             = 9
      EOASL_NOT_ALLOWED              = 10
      MAXASL_NOT_ALLOWED             = 11
      XC_UNPROCESSED_DATA            = 12
      XC_FAILURE_PROCESSING_DATA     = 13
      NO_BOM                         = 14
      NO_KNOWLEDGE_BASE_FOUND        = 15
      ORDER_BOM_ERROR                = 16
      others                         = 17.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***--------------------------------------------------------------------
*** Read the updated Configuration
  call function 'CUCB_GET_CONFIGURATION'
    exporting
      INSTANCE                     = LF_CUOBJ
    importing
      CONFIGURATION                = LT_CONFIG
    exceptions
      INVALID_INPUT                = 1
      INVALID_INSTANCE             = 2
      INSTANCE_IS_A_CLASSIFICATION = 3
      others                       = 4.

  if SY-SUBRC ne 0.
*** Error while reading Configuration
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                    IF_MSGID = 'YHP_SMD_AIS'
                                                    IF_MSGNO = '011').
  endif.

*** Set and save new configuration to database
  call function 'CUCB_SET_CONFIGURATION'
    exporting
      ROOT_INSTANCE                = LF_CUOBJ
    changing
      CONFIGURATION                = LT_CONFIG
    exceptions
      INVALID_INSTANCE             = 1
      INSTANCE_IS_A_CLASSIFICATION = 2
      others                       = 3.

  if SY-SUBRC ne 0.
*** Error while saving Configuration
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                    IF_MSGID = 'YHP_SMD_AIS'
                                                    IF_MSGNO = '012' ).
  endif.

*** Write changes of configuraton to DB
  call function 'CUD0_CONFIGURATION_TO_DB'
    exporting
      INSTANCE           = LF_CUOBJ
      OBJECT             = LS_INOB-OBJEK
      OBJECTID           = LS_INOB-OBTAB
    exceptions
      INSTANCE_NOT_FOUND = 01
      NO_CHANGES         = 02.

  if SY-SUBRC ne 0.
*** DB error while saving Configuration
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                    IF_MSGID = 'YHP_SMD_AIS'
                                                    IF_MSGNO = '013' ).
  endif.
  commit work and wait. " required for SD_SALESDOCUMENT_CHANGE to not undo the changes

***--------------------------------------------------------------------
*** Check if configuration is inconsistend or locked
  if IF_FORCE_SAVE eq ABAP_FALSE.
    call function 'CUCB_GET_CONFIGURATION'
      exporting
        INSTANCE                     = LF_CUOBJ
      importing
        CONFIGURATION                = LT_CONFIG
      exceptions
        INVALID_INPUT                = 1
        INVALID_INSTANCE             = 2
        INSTANCE_IS_A_CLASSIFICATION = 3
        others                       = 4.

    if SY-SUBRC ne 0.
***   Error while reading Configuration
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                      IF_MSGID = 'YHP_SMD_AIS'
                                                      IF_MSGNO = '011' ).
    endif.

    read table LT_CONFIG into LS_CONFIG index 1.
    case LS_CONFIG-CONF-CSTATUS.
      when '2'.
***     Configuration is locked after update
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                        IF_MSGID = 'YHP_SMD_AIS'
                                                        IF_MSGNO = '014' ).
      when '5'.
***     Configuration is inconsistent after update
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( exporting IF_MSGTY = 'E'
                                                        IF_MSGID = 'YHP_SMD_AIS'
                                                        IF_MSGNO = '015' ).
    endcase.
  endif.

***--------------------------------------------------------------------
*** Update master data which is based on VC-values
  try.
      if IF_VBELN is not initial.
        YCL_HP_SVC_SRV_UTIL=>MAINTAIN_SD_DOC( exporting IF_VBELN = IF_VBELN
                                                        IF_POSNR = IF_POSNR
                                                        IF_CUOBJ = LF_CUOBJ ).
      endif.
      if IF_MATNR is not initial.
        YCL_HP_SVC_SRV_UTIL=>MAINTAIN_MATERIAL( exporting IF_MATNR = IF_MATNR
                                                          IF_WERKS = IF_WERKS
                                                          IF_CUOBJ = LF_CUOBJ ).
      endif.
    catch /VCXI/CX_CKX into LR_CX_CKX.
      call function 'BAPI_TRANSACTION_ROLLBACK'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_CKX ).

    catch CX_ROOT into data(LR_CX).
      call function 'BAPI_TRANSACTION_ROLLBACK'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX ).
  endtry.

*** If all went well, commit changes
  call function 'BAPI_TRANSACTION_COMMIT'
    exporting
      WAIT = 'X'.

endmethod.
  method SET_LOVC_STATUS.

    data: LT_CONFIG type IBCO2_INSTANCE_TAB2.

    field-symbols: <S_CONFIG> type IBCO2_INSTANCE_REC2.

*** Continue only if we have a config no.
    check IF_CUOBJ is not initial.

*** Read the Configuration
    call function 'CUCB_GET_CONFIGURATION'
      exporting
        INSTANCE                     = IF_CUOBJ
      importing
        CONFIGURATION                = LT_CONFIG
      exceptions
        INVALID_INPUT                = 1
        INVALID_INSTANCE             = 2
        INSTANCE_IS_A_CLASSIFICATION = 3
        others                       = 4.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Change VC Status
    loop at LT_CONFIG assigning <S_CONFIG>.

      case IF_VCSTA.

***     Locked
        when 'L'.
          move '2' to <S_CONFIG>-CONF-CSTATUS.

***     Valid
        when 'V'.
          move '1' to <S_CONFIG>-CONF-CSTATUS.

***     Inconsistent as Locked
        when 'I'.
          <S_CONFIG>-CONF-CSTATUS = '2'.

        when others.

      endcase.

    endloop.

*** Set and save new configuration to database
    call function 'CUCB_SET_CONFIGURATION'
      exporting
        ROOT_INSTANCE                = IF_CUOBJ
      changing
        CONFIGURATION                = LT_CONFIG
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2
        others                       = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Save Configuration to DB
    call function 'CUD0_CONFIGURATION_TO_DB'
      exporting
        INSTANCE           = IF_CUOBJ
        OBJECT             = IF_OBJEK
        OBJECTID           = IF_OBTAB
      exceptions
        INSTANCE_NOT_FOUND = 1
        NO_CHANGES         = 2
        others             = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    call function 'BAPI_TRANSACTION_COMMIT'
      exporting
        WAIT = 'X'.

  endmethod.
