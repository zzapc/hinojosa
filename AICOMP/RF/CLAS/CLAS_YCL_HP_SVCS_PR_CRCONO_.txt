
class YCL_HP_SVCS_PR_CRCONO definition
  public
  inheriting from ZCL_VCXI_P1SS_PR_CRCONO
  final
  create public .

public section.

  methods GET_XCOMP_GATE
    returning
      value(RR_GATE_XCOMP) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~GET_DATA
    redefinition .
  methods ZIF_VCXI_PXSS_FDI~SET_DATA
    redefinition .
protected section.

  constants C_IEVNT_O_CONNECT_REQ type /VCXI/VKSC_IEVNT value 'CONNECT_REQ' ##NO_TEXT.
  constants C_IEVNT_I_REQ_CONNECT type /VCXI/VKSC_IEVNT value 'REQ_CONNECT' ##NO_TEXT.

  methods HANDLE_REQ_CONNECT
    raising
      /VCXI/CX_CKX .
  methods GET_XCOMP_OF_CONNECTED_GATE
    returning
      value(RR_GATE_XCOMP) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRODI
    returning
      value(RR_PR_PRODI) type ref to YCL_HP_SVCS_PR_PRODI
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SVCS_PR_CRCONO definition
class YCL_HP_SVCS_PR_CRCONO implementation.
  method GET_PRODI.

*** Get all Children
    data(LT_GATE) = ME->R_GATE->GET_PRVDR( exporting IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD
                                                     IF_INUSE = ABAP_TRUE   ).

    loop at LT_GATE into data(LR_GATE).
      try.
          check LR_GATE->R_CLSPR is bound.
          RR_PR_PRODI = cast #( LR_GATE->R_CLSPR ).
          exit.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
    endloop.

  endmethod.
  method GET_XCOMP_GATE.

    data: LS_XCONR      type ZVCXI_PXSS_S_XCONR.
    data: LT_XCONR      type ZVCXI_PXSS_TT_XCONR,
          LT_GATE_XCOMP type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_SOV   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SOV     type ref to ZCL_VCXI_PXSS_PR_SOV.

***-------------------------------------------------------------------*
*** Get Spec Overview Provider/Gate
    LR_PR_SOV = ME->GET_PRVDR_SOV( importing ER_GATE = LR_GATE_SOV ).

***--------------------------------------------------------------------------------------
*** Get Components
    LT_GATE_XCOMP = LR_GATE_SOV->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCOMP=>C_IPRVT_PX_XCOMP ).
    check LT_GATE_XCOMP is not initial.

*** Get X-Connections related to me
    LT_XCONR = LR_PR_SOV->GET_XCONR( IR_GATE_OUT = ME->R_GATE ).

***--------------------------------------------------------------------------------------
*** Translate Connections to Component Level
    loop at LT_XCONR into LS_XCONR.

      loop at LT_GATE_XCOMP into LR_GATE_XCOMP.
*****     Translate XCONI to XCOMP
*        if LS_XCONR-R_GATE_IN is bound and LS_XCONR-R_GATE_IN->IS_IN_LINE( IR_GATE = LR_GATE_XCOMP ).
*          LR_ = LR_GATE_XCOMP.
*        endif.

***     Translate XCONO to XCOMP
        check LS_XCONR-R_GATE_OUT is bound and LS_XCONR-R_GATE_OUT->IS_IN_LINE( IR_GATE = LR_GATE_XCOMP ).
        RR_GATE_XCOMP = LR_GATE_XCOMP.
        exit.
      endloop.

***   Gate of Component found, then return it
      check RR_GATE_XCOMP is bound.
      exit.

    endloop.

  endmethod.
  method GET_XCOMP_OF_CONNECTED_GATE.

***--------------------------------------------------------------------------------------
*** Get Connected Gate
    data(LR_XCONI_GATE) = ME->GET_CONNECTED_GATE( ).
    check LR_XCONI_GATE is bound.

***--------------------------------------------------------------------------------------
*** Get Provider Specification
    data(LT_XCONI_GATE_SPEC) = LR_XCONI_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                                         IF_INUSE = ABAP_TRUE ).
    read table LT_XCONI_GATE_SPEC into data(LR_XCONI_GATE_SPEC) index 1.
    check LR_XCONI_GATE_SPEC is bound.

***--------------------------------------------------------------------------------------
*** Get Component (Parent element)
    RR_GATE_XCOMP = LR_XCONI_GATE_SPEC->GET_PARENT( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_REQ_CONNECT.
        ME->HANDLE_REQ_CONNECT( ).
    endcase.

  endmethod.
  method HANDLE_REQ_CONNECT.

    data: LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_SOV     type ref to ZCL_VCXI_PXSS_PR_SOV,
          LR_XCONI_GATE type ref to /VCXI/CL_VKSR_GATE.
    DATA: LR_GATE TYPE REF TO /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Connected Gate
    move ME->GET_CONNECTED_GATE( ) to LR_XCONI_GATE.

***--------------------------------------------------------------------------------------
*** Connection Options
    if LR_XCONI_GATE is not bound.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SOV=>C_IPRVT_PX_SOV ).
      check LT_GATE is not initial.
      read table LT_GATE into LR_GATE index 1.
      if SY-SUBRC eq 0.
        try.
            LR_PR_SOV ?= LR_GATE->R_CLSPR.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_SOV.
        endtry.
      endif.
      check LR_PR_SOV is bound.
      LT_GATE = LR_PR_SOV->GET_PRVDR_XCONI( IF_CONNECTED = ABAP_FALSE ).
      if LINES( LT_GATE ) eq 1.
        LR_XCONI_GATE = LT_GATE[ 1 ].
        LR_PR_SOV->CONNECT( IR_GATE_IN  = LR_XCONI_GATE
                            IR_GATE_OUT = ME->R_GATE ).
      endif.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols <S_FDI_SUPER> type ANY.
    field-symbols <S_FDI_XCONO> type YHP_SVCS_S_FDI_XCONO.

    data(LR_DATA_SUPER) = SUPER->ZIF_VCXI_PXSS_FDI~GET_DATA( importing ET_FDMEX = ET_FDMEX ).

***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type YHP_SVCS_S_FDI_XCONO.
    assign RR_DATA->* to <S_FDI_XCONO>.

    if LR_DATA_SUPER is bound.
      assign LR_DATA_SUPER->* to <S_FDI_SUPER>.
      <S_FDI_XCONO> = corresponding #( <S_FDI_SUPER> ).
    endif.

***--------------------------------------------------------------------------------------
*** Get MRP via Product Information
    if ME->GET_PRODI( ) is bound.
      <S_FDI_XCONO>-MRP = ME->GET_PRODI( )->GET_MRP( ).
    endif.
*** Make sure, MRP field is excluded if connected to another Corrugated Component
    data(LR_GATE) = ME->GET_XCOMP_OF_CONNECTED_GATE( ).
    if LR_GATE is bound and
       LR_GATE->F_ID eq 'COMP_P1'.
      append 'MRP' to ET_FDMEX.
    endif.


  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data LS_FDI_XCONO_OLD type YHP_SVCS_S_FDI_XCONO.
    data LS_FDI_XCONO_NEW type YHP_SVCS_S_FDI_XCONO.

    field-symbols <S_DATA> type ANY.

    data(LR_DATA_OLD) = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                             else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).

    SUPER->ZIF_VCXI_PXSS_FDI~SET_DATA( exporting IR_DATA     = IR_DATA
                                                 IR_DATA_OLD = LR_DATA_OLD
                                                 IT_FDMEX    = IT_FDMEX ).

    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_XCONO_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_XCONO_NEW = corresponding #( <S_DATA> ).
    endif.

***--------------------------------------------------------------------------------------
*** Set MRP via Product Information
    if LS_FDI_XCONO_OLD-MRP ne LS_FDI_XCONO_NEW-MRP.
      if ME->GET_PRODI( ) is bound and
        not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'MRP' ] ).
        ME->GET_PRODI( )->SET_MRP( IF_MRP   = LS_FDI_XCONO_NEW-MRP
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endif.
    endif.

  endmethod.
