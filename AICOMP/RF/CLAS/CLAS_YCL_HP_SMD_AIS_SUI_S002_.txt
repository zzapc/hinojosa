
class YCL_HP_SMD_AIS_SUI_S002 definition
  public
  inheriting from /VCXI/CL_CKMRU_CLSUI
  final
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_RPSEG type ref to /VCXI/CL_CKMR_RPSEG
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_PAI .

  methods /VCXI/IF_CKMRU_DUI~ACTIVATE
    redefinition .
  methods /VCXI/IF_CKMRU_DUI~DEACTIVATE
    redefinition .
  methods /VCXI/IF_CKMRU_DUI~DO_USER_COMMAND
    redefinition .
protected section.

  data R_DCO_OUTPUT type ref to YCL_HP_SMD_AIS_DCO .
  data R_DCO_INPUT type ref to YCL_HP_SMD_AIS_DCO .
  data R_SALV type ref to CL_SALV_TABLE .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_DATA type ref to DATA .
  constants C_FUNC_SELECTALL type SALV_DE_FUNCTION value 'SELECTALL' ##NO_TEXT.
  constants C_FUNC_DESELECTALL type SALV_DE_FUNCTION value 'DESELECTALL' ##NO_TEXT.

  methods CALL_VA23
    importing
      !IF_INDEX type INT4
    raising
      /VCXI/CX_CKX .
  methods TOGGLE_SELECTION
    importing
      !IF_FLSEL type FLAG
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADDED_FUNCTION
    for event ADDED_FUNCTION of CL_SALV_EVENTS
    importing
      !E_SALV_FUNCTION .
  methods HANDLE_CHECKED_FUNCTION
    for event LINK_CLICK of CL_SALV_EVENTS_TABLE
    importing
      !ROW
      !COLUMN .
  methods HANDLE_LINK_CLICK
    for event LINK_CLICK of CL_SALV_EVENTS_TABLE
    importing
      !ROW
      !COLUMN .
  methods INIT_GRID_DATA
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SMD_AIS_SUI_S002 definition
class YCL_HP_SMD_AIS_SUI_S002 implementation.
method /VCXI/IF_CKMRU_DUI~ACTIVATE.

*** Bind UI
  call function 'YHP_SMD_AIS_SUI_S002_BIND'
    exporting
      IR_SUI_S002 = ME
    importing
      ES_DYNP     = ME->/VCXI/IF_CKMRU_DUI~S_DYNP.

endmethod.
method /VCXI/IF_CKMRU_DUI~DEACTIVATE.

  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( ).
  endif.

  clear ME->R_SALV.

endmethod.
method /VCXI/IF_CKMRU_DUI~DO_USER_COMMAND.
endmethod.
method CALL_VA23.

  field-symbols: <T_QUOT_GRID> type standard table,
                 <F_VBELN>     type VBELN_VA.

*** Dereference Data
  check ME->R_DATA is bound.
  assign ME->R_DATA->* to <T_QUOT_GRID>.

*** Get VBELN
  if LINE_EXISTS( <T_QUOT_GRID>[ IF_INDEX ] ).
    assign component 'VBELN_NEW' of structure <T_QUOT_GRID>[ IF_INDEX ] to <F_VBELN>.
  endif.
  if <F_VBELN> is not assigned or
     <F_VBELN> is initial.
    return.
  endif.

*** Set Parameter ID
  set parameter id 'AGN' field <F_VBELN>.

*** Call Transaction
  call transaction 'VA23' and skip first screen.

endmethod.
method CONSTRUCTOR.

*** Super Constructor
  SUPER->CONSTRUCTOR( IR_RPSEG = IR_RPSEG ).

*** Map DCO Output
  ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_INPUT ).
  ME->R_RPSEG->MAP_DCO( changing CR_DCO = ME->R_DCO_OUTPUT ).

*** Create Grid Data Reference
  create data ME->R_DATA type YHP_SMD_AIS_TT_QUOT_USRDEC.

endmethod.
method DO_PAI.
endmethod.
method DO_PBO.

*** Refresh Grid
  ME->INIT_GRID_DATA( ).
  ME->REFRESH_GRID( ).

endmethod.
method HANDLE_ADDED_FUNCTION.

  try.

      case E_SALV_FUNCTION.

***     Select All Lines
        when C_FUNC_SELECTALL.
          ME->TOGGLE_SELECTION( IF_FLSEL = ABAP_TRUE ).

***     Deselect All Lines
        when C_FUNC_DESELECTALL.
          ME->TOGGLE_SELECTION( IF_FLSEL = ABAP_FALSE ).

      endcase.

    catch /VCXI/CX_CKX .                                "#EC NO_HANDLER

  endtry.

endmethod.
method HANDLE_CHECKED_FUNCTION.

  data: LT_WRKLI type YHP_SMD_AIS_TT_QUOT_WRKLI.

  field-symbols: <T_QUOT_GRID> type YHP_SMD_AIS_TT_QUOT_USRDEC,
                 <S_QUOT_GRID> type YHP_SMD_AIS_S_QUOT_USRDEC,
                 <S_WRKLI>     type YHP_SMD_AIS_S_QUOT_WRKLI.

  check COLUMN eq 'SELTD_MBQ'.

  try.

***   Is Record Locked?
      check ME->R_RPSEG->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.

***   Dereference Data
      check ME->R_DATA is bound.
      assign ME->R_DATA->* to <T_QUOT_GRID>.

      LT_WRKLI = ME->R_DCO_OUTPUT->T_WRKLI.

***   Get the value of the Checkbox and set the value accordingly
      assign <T_QUOT_GRID>[ ROW ] to <S_QUOT_GRID>.

***   Toggle Flag
      <S_QUOT_GRID>-SELTD_MBQ = switch #( <S_QUOT_GRID>-SELTD_MBQ when ABAP_TRUE  then ABAP_FALSE
                                                                  when ABAP_FALSE then ABAP_TRUE ).

***   Set Selection in Worklist
      read table LT_WRKLI assigning <S_WRKLI> with key VBELN_NEW = <S_QUOT_GRID>-VBELN_NEW
                                                       POSNR_NEW = <S_QUOT_GRID>-POSNR_NEW.
      if SY-SUBRC eq 0.
        <S_WRKLI>-SELTD_MBQ = switch #( <S_WRKLI>-SELTD_MBQ when ABAP_TRUE  then ABAP_FALSE
                                                            when ABAP_FALSE then ABAP_TRUE ).
      endif.

***   Set Work List in DCO
      ME->R_DCO_OUTPUT->SET_WRKLI( IT_WRKLI = LT_WRKLI ).

***   Refresh the table
      ME->R_SALV->REFRESH( ).

    catch /VCXI/CX_CKX .                                "#EC NO_HANDLER

  endtry.

endmethod.
method HANDLE_LINK_CLICK.

  try.

      case COLUMN.

        when 'VBELN_NEW'.
          ME->CALL_VA23( IF_INDEX = ROW ).

      endcase.

    catch /VCXI/CX_CKX .                                "#EC NO_HANDLER

  endtry.

endmethod.
method INIT_GRID_DATA.

  field-symbols: <T_QUOT_GRID> type standard table.

*** Dereference Data
  check ME->R_DATA is bound.
  assign ME->R_DATA->* to <T_QUOT_GRID>.

  free: <T_QUOT_GRID>.

*** Get Data from DCO Object
  <T_QUOT_GRID> = corresponding #( ME->R_DCO_OUTPUT->T_WRKLI ).

endmethod.
method REFRESH_GRID.

  data: LF_TOOLTIP type STRING.

  data: LR_COLUMN    type ref to CL_SALV_COLUMN_LIST,
        LR_FUNCTIONS type ref to CL_SALV_FUNCTIONS,
        LR_EVENTS    type ref to CL_SALV_EVENTS_TABLE.

  field-symbols: <T_QUOT_GRID> type standard table.

*** Dereference Data
  check ME->R_DATA is bound.
  assign ME->R_DATA->* to <T_QUOT_GRID>.

*** Create Container
  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = '0100CC_UD_DATA'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

  try.

***   Create Simple ALV
      if ME->R_SALV is not bound.

        CL_SALV_TABLE=>FACTORY( exporting R_CONTAINER  = ME->R_CONTAINER
                                importing R_SALV_TABLE = ME->R_SALV
                                changing  T_TABLE      = <T_QUOT_GRID> ).

***     Add Standard Functions
        LR_FUNCTIONS = ME->R_SALV->GET_FUNCTIONS( ).
        LR_FUNCTIONS->SET_ALL( ABAP_TRUE ).

***     Add Selection Buttons
        LF_TOOLTIP = 'Select All'(SEL).
        LR_FUNCTIONS->ADD_FUNCTION( NAME     = C_FUNC_SELECTALL
                                    ICON     = conv STRING( ICON_SELECT_ALL )
                                    TEXT     = ''
                                    TOOLTIP  = LF_TOOLTIP
                                    POSITION = IF_SALV_C_FUNCTION_POSITION=>RIGHT_OF_SALV_FUNCTIONS ).

        LF_TOOLTIP = 'Deselect All'(DES).
        LR_FUNCTIONS->ADD_FUNCTION( NAME     = C_FUNC_DESELECTALL
                                    ICON     = conv STRING( ICON_DESELECT_ALL )
                                    TEXT     = ''
                                    TOOLTIP  = LF_TOOLTIP
                                    POSITION = IF_SALV_C_FUNCTION_POSITION=>RIGHT_OF_SALV_FUNCTIONS ).

***     Register to Events
        LR_EVENTS = ME->R_SALV->GET_EVENT( ).
        set handler ME->HANDLE_CHECKED_FUNCTION for LR_EVENTS.
        set handler ME->HANDLE_ADDED_FUNCTION   for LR_EVENTS.

***     HotSpot for SD Number
        LR_COLUMN ?= ME->R_SALV->GET_COLUMNS( )->GET_COLUMN( 'VBELN_NEW' ).
        LR_COLUMN->SET_CELL_TYPE( VALUE = IF_SALV_C_CELL_TYPE=>HOTSPOT ).
        set handler ME->HANDLE_LINK_CLICK for LR_EVENTS.


      endif.

***   Set the Column optimization
      ME->R_SALV->GET_COLUMNS( )->SET_OPTIMIZE( 'X' ).

***   Change the properties of the Column SELTD_MBQ
      LR_COLUMN ?= ME->R_SALV->GET_COLUMNS( )->GET_COLUMN( 'SELTD_MBQ' ).
      LR_COLUMN->SET_OUTPUT_LENGTH( 10 ).
      if ME->R_RPSEG->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
        LR_COLUMN->SET_CELL_TYPE( IF_SALV_C_CELL_TYPE=>CHECKBOX_HOTSPOT ).
      else.
        LR_COLUMN->SET_CELL_TYPE( IF_SALV_C_CELL_TYPE=>CHECKBOX ).
      endif.

***   Refresh Display
      ME->R_SALV->DISPLAY( ).

    catch CX_SALV_ERROR.                                "#EC NO_HANDLER

  endtry.

endmethod.
method TOGGLE_SELECTION.

  data: LT_WRKLI type YHP_SMD_AIS_TT_QUOT_WRKLI.

  field-symbols: <T_QUOT_GRID> type YHP_SMD_AIS_TT_QUOT_USRDEC,
                 <S_QUOT_GRID> type YHP_SMD_AIS_S_QUOT_USRDEC,
                 <S_WRKLI>     type YHP_SMD_AIS_S_QUOT_WRKLI.

  try.

***   Is Record Locked?
      check ME->R_RPSEG->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.

***   Dereference Data
      check ME->R_DATA is bound.
      assign ME->R_DATA->* to <T_QUOT_GRID>.

      LT_WRKLI = ME->R_DCO_OUTPUT->T_WRKLI.

***   Process all Records
      loop at <T_QUOT_GRID> assigning <S_QUOT_GRID>.

***     Set Flag
        <S_QUOT_GRID>-SELTD_MBQ = IF_FLSEL.

***     Set Selection in Worklist
        read table LT_WRKLI assigning <S_WRKLI> with key VBELN_NEW = <S_QUOT_GRID>-VBELN_NEW
                                                         POSNR_NEW = <S_QUOT_GRID>-POSNR_NEW.
        if SY-SUBRC eq 0.
          <S_WRKLI>-SELTD_MBQ = IF_FLSEL.
        endif.

      endloop.

***   Set Worklist in DCO
      ME->R_DCO_OUTPUT->SET_WRKLI( IT_WRKLI = LT_WRKLI ).

***   Refresh the table
      ME->R_SALV->REFRESH( ).

    catch /VCXI/CX_CKX .                                "#EC NO_HANDLER

  endtry.

endmethod.
