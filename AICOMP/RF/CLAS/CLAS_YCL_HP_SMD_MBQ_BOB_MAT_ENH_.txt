
class YCL_HP_SMD_MBQ_BOB_MAT_ENH definition
  public
  final
  create public .

public section.

  class-data S_ACTDAT_MAT type ZVCXI_XCM_MBQ_S_ACTDAT_MAT .
  class-data S_ACTDAT_CNF type ZVCXI_XCM_MBQ_S_ACTDAT_CNF .
  constants C_ATNAM_ARBPL type ATNAM value 'HP_ARBPL' ##NO_TEXT.

  class-methods RENEW_MATNR
    importing
      !IF_MTART type MTART
      !IF_MBRSH type MBRSH
      !IF_PRODH type PRODH_D
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
protected section.
private section.
endclass. "YCL_HP_SMD_MBQ_BOB_MAT_ENH definition
class YCL_HP_SMD_MBQ_BOB_MAT_ENH implementation.
method RENEW_MATNR.

  data: LF_CODIGOUTIL type ZTMM0033-CODIGO,
        LF_WERKS      type WERKS_D.
  data: LT_MTART_RNG type MD_RANGE_T_MTART.
  data: LR_MATERIAL_ZPT  type ref to ZCL_MM_MATERIAL_ZPT,
        LR_MATERIAL_TOOL type ref to ZCL_MM_MATERIAL_TOOLS,
        LR_CX_MM         type ref to ZCX_MM_EXCEPTION.


  try.

      if YCL_HP_SMD_MBQ_BOB_MAT_ENH=>S_ACTDAT_MAT-S_MATDAT_MARA-MATNR is not initial.
        RF_MATNR = YCL_HP_SMD_MBQ_BOB_MAT_ENH=>S_ACTDAT_MAT-S_MATDAT_MARA-MATNR.
        exit.
      endif.

***   ZPT Material Types
      LT_MTART_RNG = ZCL_MM_MATERIAL_ZPT=>ZINTF_MM_MATERIAL_MASTER~S_GET_MTART_COMPATIBLES( I_SETNAME = ZCL_MM_MATERIAL_ZPT=>_C_SETNAME_VALUE ).
      if IF_MTART in LT_MTART_RNG.

***     Create Material Object
        LR_MATERIAL_ZPT = new ZCL_MM_MATERIAL_ZPT( I_MTART = IF_MTART
                                                   I_MBRSH = IF_MBRSH ).

***     Get Material Number

        RF_MATNR = LR_MATERIAL_ZPT->ZINTF_MM_MATERIAL_MASTER~GET_NEW_MATNR( I_PRODH = IF_PRODH ).
       endif.

      clear LT_MTART_RNG.

***   Tool Material Types
      LT_MTART_RNG = ZCL_MM_MATERIAL_TOOLS=>ZINTF_MM_MATERIAL_MASTER~S_GET_MTART_COMPATIBLES( I_SETNAME = ZCL_MM_MATERIAL_TOOLS=>_C_SETNAME_VALUE ).
      if IF_MTART in LT_MTART_RNG.

***     Get Plant & Work Center
        LF_WERKS = S_ACTDAT_CNF-WERKS.
        read table S_ACTDAT_CNF-T_VALUE into data(LS_VALUE) with key ATNAM = C_ATNAM_ARBPL.
        if LF_WERKS is not initial and LS_VALUE is not initial.

***     Clear static attributes
          clear YCL_HP_SMD_MBQ_BOB_MAT_ENH=>S_ACTDAT_CNF.

***       Get Tool Type
          LR_MATERIAL_TOOL = new ZCL_MM_MATERIAL_TOOLS( I_MTART       = IF_MTART
                                                        I_MBRSH       = IF_MBRSH ).

***       Get Tool Code
          select single CODIGO into LF_CODIGOUTIL
            from ZTMM0033
            where ZTIPOUTIL   = LR_MATERIAL_TOOL->_TIPO_UTIL
              and WERKS       = LF_WERKS
              and WORK_CENTER = LS_VALUE-ATWRT.
          if SY-SUBRC eq 0.

***       Create Material Object
            free LR_MATERIAL_TOOL.
            LR_MATERIAL_TOOL = new ZCL_MM_MATERIAL_TOOLS( I_MTART       = IF_MTART
                                                          I_MBRSH       = IF_MBRSH
                                                          I_WERKS       = LF_WERKS
                                                          I_CODIGOUTIL  = LF_CODIGOUTIL ).

          else.
            "Entry &1, &2, &3 not found in table &4.
            message E014(YHP_SMD_MBQ) with LR_MATERIAL_TOOL->_TIPO_UTIL LF_WERKS LS_VALUE-ATWRT 'ZTMM0033' into data(LF_MSG).
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.

***       Get Material Number
          RF_MATNR = LR_MATERIAL_TOOL->ZINTF_MM_MATERIAL_MASTER~GET_NEW_MATNR( ).

***     Error messages
        else.

          if LF_WERKS is initial.
            "Plant required to determine "Codigo Util"
            clear LF_MSG.
            message E015(YHP_SMD_MBQ) into LF_MSG.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).

          elseif LS_VALUE is initial.
            "Work Center required to determine "Codigo Util"
            clear LF_MSG.
            message E016(YHP_SMD_MBQ) into LF_MSG.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.

        endif.

      endif.

    catch ZCX_MM_EXCEPTION into LR_CX_MM.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_MM ).

  endtry.

endmethod.
