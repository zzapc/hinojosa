
class YCL_HP_SVCS_PR_PRODI definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_PRODI
  create public .

public section.

  constants C_PARID_CSPEC type /VCXI/VKS_PARID value 'YHP_SVC_CSPEC' ##NO_TEXT.
  constants C_PARID_FSCTY type /VCXI/VKS_PARID value 'YHP_SVC_FSCTY' ##NO_TEXT.
  constants C_PARID_PACKU type /VCXI/VKS_PARID value 'YHP_SVC_PACKU' ##NO_TEXT.
  constants C_PARID_OBSER type /VCXI/VKS_PARID value 'YHP_SVC_OBSER' ##NO_TEXT.
  constants C_PARID_HFLAG type /VCXI/VKS_PARID value 'YHP_SVC_HFLAG' ##NO_TEXT.
  constants C_IPRVT_HP_PRODI type /VCXI/VKSC_IPRVT value 'YHP_SVCS_PRODI' ##NO_TEXT.
  constants C_PARID_MRP type /VCXI/VKS_PARID value 'YHP_SVC_MRP' ##NO_TEXT.

  methods GET_CSPEC
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_CSPEC) type YHP_SVCS_CSPEC
    raising
      /VCXI/CX_CKX .
  methods GET_HFLAG
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_HFLAG) type YHP_SVCS_HFLAG
    raising
      /VCXI/CX_CKX .
  methods GET_OBSER
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_OBSER) type YHP_SVCS_OBSER
    raising
      /VCXI/CX_CKX .
  methods GET_FSCTY
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FSCTY) type YHP_SVCS_FSCTY
    raising
      /VCXI/CX_CKX .
  methods GET_PACKU
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PACKU) type YHP_SVCS_PACKU
    raising
      /VCXI/CX_CKX .
  methods SET_CSPEC
    importing
      !IF_CSPEC type YHP_SVCS_CSPEC optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HFLAG
    importing
      !IF_HFLAG type YHP_SVCS_HFLAG optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FSCTY
    importing
      !IF_FSCTY type YHP_SVCS_FSCTY optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_OBSER
    importing
      !IF_OBSER type YHP_SVCS_OBSER optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PACKU
    importing
      !IF_PACKU type YHP_SVCS_PACKU optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_PACKU_DESCR
    returning
      value(RF_PACKU_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_MRP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_MRP) type YHP_SVCS_MRP
    raising
      /VCXI/CX_CKX .
  methods SET_MRP
    importing
      !IF_MRP type YHP_SVCS_MRP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods CALL_SHLP_MRP
    importing
      !IF_DISPLAY type ABAP_BOOL optional
    returning
      value(RF_MRP) type YHP_SVCS_MRP
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_O_PACKU_CHANGED type /VCXI/VKSC_IEVNT value 'PACKU_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_HFLAG_CHANGED type /VCXI/VKSC_IEVNT value 'HFLAG_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CSPEC_CHANGED type /VCXI/VKSC_IEVNT value 'CSPEC_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FSCTY_CHANGED type /VCXI/VKSC_IEVNT value 'FSCTY_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_OBSER_CHANGED type /VCXI/VKSC_IEVNT value 'OBSER_CHANGED' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_MRP_CHANGED type /VCXI/VKSC_IEVNT value 'MRP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_I_CHECK_OBSER type /VCXI/VKSC_IEVNT value 'CHECK_OBSER' ##NO_TEXT.

  methods CHECK_PACKU
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_OBSER
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SPEC) type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SVCS_PR_PRODI definition
class YCL_HP_SVCS_PR_PRODI implementation.
  method CALL_SHLP_MRP.

    data(LF_DISPLAY) = switch #( ME->R_GATE->IS_LOCKED( ) when ABAP_TRUE then ABAP_FALSE
                                                                         else ABAP_TRUE ).

    data(LF_WERKS) = ME->GET_WERKS( ).

    RF_MRP = YCL_HP_SVCS_SHLP_MRP=>CALL_SHLP( IF_DISPLAY = LF_DISPLAY
                                              IF_WERKS   = LF_WERKS ).

  endmethod.
  method CHECK_OBSER.

    "More standard solution for OPHJVC-203 JBL 25/06/2024
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data LV_OBSER type YHP_SVCS_OBSER.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OBSER  ).
    if LS_PARAM-ATWRT is not initial and LS_PARAM-STRNG is initial.
      move LS_PARAM-ATWRT to LS_PARAM-STRNG.
      clear LS_PARAM-ATWRT.
      ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).
      move LS_PARAM-STRNG to LV_OBSER.
      ME->SET_OBSER(
        exporting
          IF_OBSER = LV_OBSER ).
    endif.

  endmethod.
  method CHECK_PACKU.
    data: LF_GATPA type /VCXI/VKSR_GATPA.

    if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( exporting IR_GATE  = ME->R_GATE
                                                            IF_IFUNC = 'IGNORE_PACKU' ) eq ABAP_FALSE.

***   Check Packaging Usage
      if ME->GET_PACKU( ) is not initial.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Packaging Usage is maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '006' ).
        endif.

      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Packaging Usage is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '007' ).
        endif.
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
    endif.

  endmethod.
  method GET_CSPEC.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CSPEC  ).
    move LS_PARAM-ATWRT to RF_CSPEC.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FSCTY.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FSCTY  ).
    move LS_PARAM-ATWRT to RF_FSCTY.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_HFLAG.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HFLAG  ).
    move LS_PARAM-ATWRT to RF_HFLAG.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_MRP.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( C_PARID_MRP ).
    move LS_PARAM-ATWRT to RF_MRP.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_OBSER.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OBSER  ).

    move LS_PARAM-STRNG to RF_OBSER.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PACKU.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PACKU  ).
    move LS_PARAM-ATWRT to RF_PACKU.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
method GET_PACKU_DESCR.

 constants: LC_DOMNAME type                   DOMNAME value 'YHP_SVCS_PACKU'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_PACKU   type                   YHP_SVCS_PACKU.

  LF_PACKU = ME->GET_PACKU( ).

*** Return Sheet Direction Description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  check LT_D07V is not initial.
  read table LT_D07V with key DOMVALUE_L = LF_PACKU into LS_D07V.
  check SY-SUBRC = 0.

  RF_PACKU_DESCR = LS_D07V-DDTEXT.

endmethod.
  method GET_PRVDR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    data(LT_GATE) = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                           IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_INLINE
                                           IF_INUSE = ABAP_TRUE ).
    check LT_GATE is not initial.
    ER_GATE = LT_GATE[ 1 ].

    check ER_GATE is bound.
    RR_PR_SPEC ?= ER_GATE->R_CLSPR.

  endmethod.
  method GET_STATUS.
*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).
    data: LF_PACKU type YHP_SVCS_PACKU.


***------------------------------------------------------------------
*** Check Product Hierachie - check is active -> Do check
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'IGNORE_PACKU' ) eq ABAP_FALSE.
 LF_PACKU = ME->GET_PACKU( ).
    if LF_PACKU is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.
  endmethod.
  method GET_STATUS_MSG.


    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).
***----------------------------------------------------------------------------
*** Check Packaging Usage
    ME->CHECK_PACKU( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_WERKS.

    data(LR_PR_SPEC) = ME->GET_PRVDR_SPEC( ).
    check LR_PR_SPEC is bound.
    RF_WERKS = LR_PR_SPEC->GET_WERKS( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

*** Handle custom events (no need for super)
    case IF_IEVNT.
      when ME->C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).
      when ME->C_IEVNT_I_CHECK_OBSER.
        ME->CHECK_OBSER( ).
      when others.
    endcase.

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_CSPEC.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CSPEC ).

    if IF_CSPEC is supplied.
      move IF_CSPEC to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CSPEC_CHANGED ).
    endif.

  endmethod.
  method SET_FSCTY.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FSCTY ).

    if IF_FSCTY is supplied.
      move IF_FSCTY to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FSCTY_CHANGED ).
    endif.

  endmethod.
  method SET_HFLAG.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HFLAG ).

    if IF_HFLAG is supplied.
      move IF_HFLAG to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HFLAG_CHANGED ).
    endif.

  endmethod.
  method SET_MRP.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( C_PARID_MRP ).

    move IF_MRP   to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    data(LF_CHANGED) = ME->R_GATE->SET_PARAM( LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( C_IEVNT_O_MRP_CHANGED ).
    endif.

  endmethod.
  method SET_OBSER.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OBSER ).

    if IF_OBSER is supplied.
      move IF_OBSER to LS_PARAM-STRNG.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LS_PARAM-PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_STRG.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).
    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_OBSER_CHANGED ).
    endif.

  endmethod.
  method SET_PACKU.
    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PACKU ).

    if IF_PACKU is supplied.
      move IF_PACKU to LS_PARAM-ATWRT.
    endif.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
     ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PACKU_CHANGED ).
    endif.

  endmethod.
