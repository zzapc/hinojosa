
class YCL_HP_SMD_MBQ_STP_S102 definition
  public
  inheriting from ZCL_VCXI_XCM_MBQ_STP_S000
  final
  create public .

public section.

  constants C_ZSTATP_A12 type ZSSD_STAT_POS value 'A12' ##NO_TEXT.
  constants C_ZSTATP_A13 type ZSSD_STAT_POS value 'A13' ##NO_TEXT.

  methods GET_ITEM_STATUS
    importing
      !IF_POSNR type POSNR
    exporting
      value(EF_STSMA) type J_STSMA
      value(ET_STAT) type TT_JSTAT
      value(EF_ZSTATP) type ZSSD_STAT_POS
    raising
      /VCXI/CX_CKX .
  methods SET_ITEM_STATUS
    importing
      !IF_OBJNR type OBJNR optional
      !IF_COMMIT type ABAP_BOOL
      !IF_VBELN type VBELN_VA optional
      !IF_POSNR type POSNR_VA optional
      !IF_STATUS type J_STATUS
    exporting
      !EF_ERROR type ABAP_BOOL
    raising
      /VCXI/CX_CKX .

  methods EXECUTE
    redefinition .
protected section.
private section.
endclass. "YCL_HP_SMD_MBQ_STP_S102 definition
class YCL_HP_SMD_MBQ_STP_S102 implementation.
  method EXECUTE.

    data: LF_ZSTATP type ZSSD_STAT_POS,
          LF_STSMA  type J_STSMA,
          LF_ERROR  type ABAP_BOOL.
    data: LS_ORDER_VIEW type ORDER_VIEW,
          LS_MSG        type /VCXI/CKXM_S_MSG.
    data: LT_STAT       type TT_JSTAT.
    data: LR_MSG      type ref to /VCXI/CL_CKXM_MESSAGE.
    field-symbols: <LS_VBAP> type line of ZCL_VCXI_XCI_BOB_SDOC=>YT_VBAP.

***-------------------------------------------------------------------*
*** Start with Cancelled Status
*   ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ).
  check 1 = 2.

*** Get Status info
    ME->GET_ITEM_STATUS( exporting IF_POSNR   = ME->R_DCO_INPUT->F_POSNR
                         importing EF_STSMA   = LF_STSMA
                                   ET_STAT    = LT_STAT
                                   EF_ZSTATP  = LF_ZSTATP  ).

**** Update Document Item
*    read table ME->R_DCO_INPUT->R_BOB_SDOC->T_VBAP assigning <LS_VBAP> with key POSNR = ME->R_DCO_INPUT->F_POSNR.
*    if SY-SUBRC eq 0.
*      move C_ZSTATP_A13 to <LS_VBAP>-ZSTATP.
*    endif.
*
**** Save Changes to SDoc
*    LR_MSG = ME->R_DCO_INPUT->R_BOB_SDOC->SAVE( IF_TESTRUN = ABAP_FALSE ).
*
*****-------------------------------------------------------------------*
***** Add messages after check
*    check LR_MSG is bound.
*    loop at LR_MSG->T_MSG into LS_MSG where MSGTY ca 'EA'.
*      move ABAP_TRUE to LF_ERROR.
*      exit.
*    endloop.
*
*    if LF_ERROR eq ABAP_FALSE.
****   Item &1; line item status changed to &2 successfully.
*      ME->R_RPSEG->R_MSG->ADD_MESSAGE( exporting IF_MSGID = 'YHP_SMD_MBQ'
*                                                 IF_MSGTY = 'S'
*                                                 IF_MSGNO = '023'
*                                                 IF_MSGV1 = ME->R_DCO_INPUT->F_POSNR
*                                                 IF_MSGV2 = C_ZSTATP_A13 ).
*      "Set Status to Complete
*      ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED ).
*
*    else.
*
****   Item &1; line item status error when changing to &2.
*      ME->R_RPSEG->R_MSG->ADD_MESSAGE( exporting IF_MSGID = 'YHP_SMD_MBQ'
*                                                 IF_MSGTY = 'E'
*                                                 IF_MSGNO = '024'
*                                                 IF_MSGV1 = ME->R_DCO_INPUT->F_POSNR
*                                                 IF_MSGV2 = C_ZSTATP_A13 ).
*
*      loop at LR_MSG->T_MSG into LS_MSG where MSGTY ca 'EA'.
*        ME->R_RPSEG->R_MSG->ADD_MESSAGE( exporting IF_MSGID = LS_MSG-MSGID
*                                                   IF_MSGTY = LS_MSG-MSGTY
*                                                   IF_MSGNO = LS_MSG-MSGNO
*                                                   IF_MSGV1 = LS_MSG-MSGV1
*                                                   IF_MSGV2 = LS_MSG-MSGV2
*                                                   IF_MSGV3 = LS_MSG-MSGV3
*                                                   IF_MSGV4 = LS_MSG-MSGV4 ).
*      endloop.
*
*      "Set Status Error
*      ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).
*    endif.

  endmethod.
  method GET_ITEM_STATUS.

    field-symbols: <LS_VBAP> type VBAP.

    read table ME->R_DCO_INPUT->R_BOB_SDOC->T_VBAP assigning <LS_VBAP> with key POSNR = IF_POSNR.
    if SY-SUBRC is initial.

***   Get Status of the Sales Document Item
      call function 'STATUS_READ'
        exporting
          CLIENT           = SY-MANDT
          OBJNR            = <LS_VBAP>-OBJNR
          ONLY_ACTIVE      = ABAP_TRUE
        importing
          STSMA            = EF_STSMA
        tables
          STATUS           = ET_STAT
        exceptions
          OBJECT_NOT_FOUND = 1
          others           = 2.

      if SY-SUBRC is not initial.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

*** Return VBAP status if available
      move <LS_VBAP>-ZSTATP to EF_ZSTATP.

    endif.

  endmethod.
  method SET_ITEM_STATUS.

    data:
      LF_INACT_ERROR type         ABAP_BOOL,
      LF_INACT       type         ABAP_BOOL,
      LF_OBJNR       type         JSTO-OBJNR,
      LF_STATUS      type J_STATUS,
      LF_STSMA       type J_STSMA.
    data: LS_JSTO         type         JSTO.

*** Set the flag to error
    move ABAP_TRUE to EF_ERROR.

*** Object number is added
    if IF_OBJNR is not initial.

*** Get the object number in the right format
      move IF_OBJNR to LF_OBJNR.

    else.

*** Object number is not added so we need to get it with using the Sales document number and item position
      select single OBJNR
        into LF_OBJNR
        from VBAP
        where VBELN = IF_VBELN
          and POSNR = IF_POSNR.
    endif.

*** Check that we found the object number
    check LF_OBJNR is not initial.

*** Get Status Profile of Sales Document Item
    call function 'STATUS_READ'
      exporting
        OBJNR            = LF_OBJNR
      importing
        STSMA            = LF_STSMA
      exceptions
        OBJECT_NOT_FOUND = 1
        others           = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
*Check that status is A12? JBL
EXIT.
    call function 'STATUS_CHANGE_EXTERN'
      exporting
        OBJNR               = LF_OBJNR
        USER_STATUS         = LF_STATUS
*       SET_INACT           = LF_INACT
      exceptions
        OBJECT_NOT_FOUND    = 1
        STATUS_INCONSISTENT = 2
        STATUS_NOT_ALLOWED  = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Commit
    if IF_COMMIT eq ABAP_TRUE.
      commit work and wait.
    endif.

    move ABAP_FALSE to EF_ERROR.

  endmethod.
