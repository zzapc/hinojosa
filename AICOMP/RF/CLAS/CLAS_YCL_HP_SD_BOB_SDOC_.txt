
class YCL_HP_SD_BOB_SDOC definition
  public
  inheriting from ZCL_VCXI_XCI_BOB_SDOC
  final
  create public .

public section.

  methods RUN_CONFIG
    redefinition .
protected section.
private section.
endclass. "YCL_HP_SD_BOB_SDOC definition
class YCL_HP_SD_BOB_SDOC implementation.
  method RUN_CONFIG.

    data: LS_VBAP         type VBAP,
          LS_CFGS_REFINST type BAPICUREF,
          LS_CFGS_INST    type BAPICUINS,
          LS_INOB         type INOB.
    data: LT_OBJTABLE       type TT_CLTABLE,
          LT_APPL_INSTANCES type CUIB_CORE_APPL_ITEM_T,
          LT_REFERENCE      type table of E1CUREF,
          LT_CFG_HEADERS    type CUXT_CUCFG_T,
          LT_INSTANCES      type CUXT_CUINS_T,
          LT_PART_OF        type CUXT_CUPRT_T,
          LT_VALUES         type CUXT_CUVAL_T,
          LT_VAR_KEYS       type CUXT_CUVK_T.
    field-symbols: <S_VBAP> type VBAP.

***----------------------------------------------------------------------------
*** Read/Validate Position Number
    LS_VBAP = value #( ME->T_VBAP[ POSNR = IF_POSNR ] optional ).
    check LS_VBAP is not initial.

*** Ensure POSEX is set, so configuration can run, as SAP uses it to match configuration to position
    ME->T_VBAP[ POSNR = IF_POSNR ]-POSEX = IF_POSNR.

*** Get Configuration
    LS_CFGS_REFINST = value #( ME->T_CFGS_REFINST[ POSEX = IF_POSNR ] optional ).
    check LS_CFGS_REFINST is not initial.

    LS_CFGS_INST = value #( ME->T_CFGS_INST[ CONFIG_ID = LS_CFGS_REFINST-CONFIG_ID
                                             INST_ID   = LS_CFGS_REFINST-INST_ID ] optional ).
    check LS_CFGS_INST is not initial.

*** Only process Root Configurations
    check LINE_EXISTS( ME->T_CFGS_REF[ CONFIG_ID = LS_CFGS_INST-CONFIG_ID
                                       ROOT_ID   = LS_CFGS_INST-INST_ID ] ).

*** Fill Data
    LS_INOB-CUOBJ  = LS_VBAP-CUOBJ.
    LS_INOB-ROBTAB = LS_CFGS_INST-OBJ_TYPE.
    LS_INOB-ROBJEK = LS_CFGS_INST-OBJ_KEY.

*** Get Application Environment for Configuration
    LT_OBJTABLE = ME->GET_CLTABLE_IN( IF_POSNR = IF_POSNR ).

    call function 'CUXC_INIT'.

*** Set Configuration to CUXC via IDOC
    if IF_NO_DIALOG eq ABAP_TRUE.
      call function 'CUXC_IDOC_TO_MEMORY'
        tables
          CFG_INSTREF   = ME->T_CFGS_REFINST
          CFG_REF       = ME->T_CFGS_REF
          INST          = ME->T_CFGS_INST
          PART_OF       = ME->T_CFGS_PART_OF
          VALUE         = ME->T_CFGS_VALUE
*         cfg_blob      = ME->t_cfgs_blob
*         vkey          = ME->t_cfgs_vk
        exceptions
          ERROR_MESSAGE = 01
          others        = 02.
      if SY-SUBRC > 0.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'V4'
                                              IF_MSGNO = '223' ).
      endif.
    endif.

*** Validate CUOBJ
    call function 'CE_I_GET_INFORMATION'
      exporting
        INSTANCE           = LS_INOB-CUOBJ
      exceptions
        INSTANCE_NOT_FOUND = 1.
    if SY-SUBRC ne 0.
      if LS_INOB-CUOBJ(4) = '9999' or LS_INOB-CUOBJ(4) = '8999'.
        clear LS_INOB-CUOBJ.
      else.
***     Get from DB
        call function 'VC_I_GET_CONFIGURATION_IBASE'
          exporting
            INSTANCE           = LS_INOB-CUOBJ
          exceptions
            INSTANCE_NOT_FOUND = 1.
        if SY-SUBRC ne 0.
          clear LS_INOB-CUOBJ.
        endif.
      endif.
    endif.

***----------------------------------------------------------------------------
*** Run Configuration
    call function 'CE_C_PROCESSING'
      exporting
        INSTANCE                       = LS_INOB-CUOBJ
        DATE                           = LS_VBAP-STDAT
        DISPLAY                        = IF_DISPLAY
        OBJECT_ID                      = LS_INOB-ROBTAB
        OBJECT                         = LS_INOB-ROBJEK
        OWNER_ID                       = 'VBPS'
        PLANT                          = LS_VBAP-WERKS
        NO_DIALOG                      = IF_NO_DIALOG
*       SUB_TYPE                       = '05'
        TYPE                           = 'S'
      importing
        NEW_INSTANCE                   = RF_CUOBJ
      tables
        APPLICATION_INPUT              = LT_OBJTABLE
      exceptions
        INTERNAL_ERROR                 = 1
        INSTANCE_NOT_FOUND             = 2
        REFERENCE_INSTANCE_NOT_FOUND   = 3
        INSTANCE_IS_A_CLASSIFICATION   = 4
        NO_PLANT                       = 5
        NO_QUANTITY                    = 6
        NO_CONNECTION_TO_CONFIGURATION = 7
        MATERIAL_VARIANT_NOT_ALLOWED   = 8
        INTERNAL_ERROR_ECM             = 9
        EOASL_NOT_ALLOWED              = 10
        MAXASL_NOT_ALLOWED             = 11
        XC_UNPROCESSED_DATA            = 12
        XC_FAILURE_PROCESSING_DATA     = 13
        NO_BOM                         = 14
        NO_KNOWLEDGE_BASE_FOUND        = 15
        ORDER_BOM_ERROR                = 16.

    if SY-SUBRC ne 0.
      case SY-SUBRC.
        when 12 or 13.
          ME->T_CFGS_REF[ POSEX = IF_POSNR ]-COMPLETE   = 'F'.
          ME->T_CFGS_REF[ POSEX = IF_POSNR ]-CONSISTENT = 'F'.
          ME->T_CFGS_INST[ CONFIG_ID = LS_CFGS_REFINST-CONFIG_ID
                           INST_ID   = LS_CFGS_REFINST-INST_ID ]-COMPLETE   = 'F'.
          ME->T_CFGS_INST[ CONFIG_ID = LS_CFGS_REFINST-CONFIG_ID
                           INST_ID   = LS_CFGS_REFINST-INST_ID ]-CONSISTENT = 'F'.
          exit.
        when others.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endcase.
    endif.

    try.
***     Get CBase for Configuration
        CL_CBASE=>GET_CURRENT_CBASE_BY_INSTANCE( exporting IV_INSTANCE = RF_CUOBJ
                                                 importing EO_CBASE    = data(LR_CBASE) ).

***     Get Model
        LR_CBASE->GET_CONFIGURATION( importing ET_INSTANCES = data(LT_INSTANCE) ).

      catch CX_CBASE_ERROR into data(LR_CBASE_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CBASE_ERROR ).
    endtry.

*** Update CUOBJ of Line Item
    ME->T_VBAP[ POSNR = IF_POSNR ]-CUOBJ = RF_CUOBJ.

*** Update Sub-Items
    loop at ME->T_VBAP assigning <S_VBAP> where UEPOS = IF_POSNR.
      <S_VBAP>-CUOBJ = value #( LT_INSTANCE[ PARENT               = RF_CUOBJ
                                             STREF-OBJECT_KEY(17) = <S_VBAP>-KNTTP && <S_VBAP>-STLNR && <S_VBAP>-STLKN ]-INSTANCE optional ).
    endloop.

***----------------------------------------------------------------------------
*** Define what Instances should be received (all as we provided Information for all)
    LT_APPL_INSTANCES = value #( for S_VBAP in ME->T_VBAP
                                            ( CONFIG_ID = value #( ME->T_CFGS_REFINST[ POSEX = S_VBAP-POSNR ]-CONFIG_ID optional )
                                              POSNR     = S_VBAP-POSNR
                                              UEPOS     = S_VBAP-UEPOS
                                              CUOBJ     = S_VBAP-CUOBJ
                                              OBJ_TYPE  = 'MARA'
                                              OBJ_KEY   = S_VBAP-MATNR
                                              OBJ_TXT   = S_VBAP-ARKTX
                                              QUANTITY  = S_VBAP-KWMENG
                                              XSTPOS    = S_VBAP-STPOS
                                              OBJ_TNAME = 'VBAP'
                                              ) ).

*** Get Configuration
    call function 'CUXI_GET_MULTI_CONFIGURATION'
      exporting
        IT_APPL_INSTANCES            = LT_APPL_INSTANCES
        IV_IDOC_FORMAT               = ABAP_TRUE
      tables
        ET_REFERENCE                 = LT_REFERENCE
        E_TAB_CFG_HEADERS            = LT_CFG_HEADERS
        E_TAB_INSTANCES              = LT_INSTANCES
        E_TAB_PART_OF                = LT_PART_OF
        E_TAB_VALUES                 = LT_VALUES
        E_TAB_VAR_KEYS               = LT_VAR_KEYS
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2
        NO_ROOT_INSTANCE             = 3
        INTERNAL_ERROR               = 4
        INVALID_DATA                 = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Update Configuration Data
    ME->T_CFGS_REFINST = corresponding #( LT_REFERENCE ).
    ME->T_CFGS_REF     = corresponding #( LT_CFG_HEADERS ).
    ME->T_CFGS_INST    = corresponding #( LT_INSTANCES ).
    ME->T_CFGS_PART_OF = corresponding #( LT_PART_OF ).
    ME->T_CFGS_VALUE   = corresponding #( LT_VALUES ).

  endmethod.
endclass. "YCL_HP_SD_BOB_SDOC implementation
