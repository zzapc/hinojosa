
class YCL_HP_SMD_AIS_IDAT_SDOC definition
  public
  final
  create public .

public section.

  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT .

  constants C_FCODE_CHECK type UI_FUNC value 'CHECK' ##NO_TEXT.
  constants C_FCODE_DELETE type UI_FUNC value 'DELETE' ##NO_TEXT.
  constants C_FCODE_FREE type UI_FUNC value 'FREE' ##NO_TEXT.
  constants C_FCODE_SAVE type UI_FUNC value 'SAVE' ##NO_TEXT.
  constants C_TIDAT_SDOC type ZVCXI_XCI_TIDAT value 'SDOC' ##NO_TEXT.
  data F_DELETED type ABAP_BOOL .
  data F_FREED type ABAP_BOOL .
  data S_SDOCIN type ZVCXI_XCI_S_SDOCIN .
  data S_TVAK type TVAK .
  data S_TVTA type TVTA .
  data T_SDOCIT type YHP_SMD_AIS_TT_SDOCIT .
  data T_SDOCMS type ZVCXI_XCI_TT_SDOCMS .
  data T_SDOCPA type ZVCXI_XCI_TT_SDOCPA .

  methods SET_DATES
    importing
      !IF_PRSDT type PRSDT
      !IF_BNDDT type BNDDT
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_NIDAT type ZVCXI_XCI_NIDAT
      !IF_NEW type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods ADD_SDOCIT
    returning
      value(RF_POSNR) type POSNR
    raising
      /VCXI/CX_CKX .
  methods CALL_BAPI
    importing
      !IF_BEHAVE_WHEN_ERROR type CHAR1 default 'P'
      !IF_TESTRUN type ABAP_BOOL default ABAP_TRUE
      !IF_VBELN type VBELN
      !IF_FORCE_CREATE type ABAP_BOOL default ABAP_FALSE
    exporting
      !EF_VBELN type VBELN
      !ER_MSG type ref to /VCXI/CL_CKXM_MESSAGE
      !ES_SDOCRS type ZVCXI_XCI_S_SDOCRS
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IF_AUART type AUART
      !IF_VKORG type VKORG
      !IF_VTWEG type VTWEG
      !IF_SPART type SPART
    returning
      value(RR_IDAT_SDOC) type ref to YCL_HP_SMD_AIS_IDAT_SDOC
    raising
      /VCXI/CX_CKX .
  methods DELETE_SDOCIT
    importing
      !IF_POSNR type POSNR_VA
    raising
      /VCXI/CX_CKX .
  methods DELETE_SDOCPA
    importing
      !IF_PARVW type PARVW
    raising
      /VCXI/CX_CKX .
  methods GET_VBELN_LAST
    returning
      value(RF_VBELN) type VBELN
    raising
      /VCXI/CX_CKX .
  methods SET_SDOCIN
    importing
      !IS_SDOCIN type ZVCXI_XCI_S_SDOCIN
    raising
      /VCXI/CX_CKX .
  methods SET_SDOCIT
    importing
      !IF_POSNR type POSNR_VA
      !IF_UEPOS type UEPOS optional
      !IF_MATNR type MATNR optional
      !IF_WERKS type WERKS_D optional
      !IF_KWMENG type KWMENG optional
      !IF_VRKME type VRKME optional
      !IF_BSTKD type BSTKD optional
      !IF_NIDAT_SVC type ZVCXI_XCI_NIDAT optional
      !IF_LGORT type LGORT_D optional
    raising
      /VCXI/CX_CKX .
  methods SET_SDOCPA
    importing
      !IF_PARVW type PARVW
      !IF_KUNNR type KUNNR
    raising
      /VCXI/CX_CKX .
  methods SET_COND
    importing
      !IF_POSNR type POSNR_VA
      !IF_KSCHL type KSCHL
      !IF_KBETR type KBETR
      !IF_KONWA type KONWA
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    YT_BAPIPARNR type standard table of BAPIPARNR .
  types:
    YT_BAPISDITM type standard table of BAPISDITM .
  types:
    YT_BAPISDITMX type standard table of BAPISDITMX .
  types:
    YT_BAPISCHDL type standard table of BAPISCHDL .
  types:
    YT_BAPISCHDLX type standard table of BAPISCHDLX .
  types:
    YT_BAPIRET2 type standard table of BAPIRET2 .
  types:
    YT_BAPICUCFG type standard table of BAPICUCFG .
  types:
    YT_BAPICUINS type standard table of BAPICUINS .
  types:
    YT_BAPICOND type standard table of BAPICOND .
  types:
    YT_BAPICONDX type standard table of BAPICONDX .

  data F_PRSDT type PRSDT .
  data F_BNDDT type BNDDT .
  data T_COND type YHP_SMD_AIS_TT_QUOT_COND .
  data F_CHANGED type ABAP_BOOL .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .
  constants C_NIDAT_TMP type ZVCXI_XCI_NIDAT value '9000000000' ##NO_TEXT.

  methods GET_BAPI_DATA
    importing
      !IF_VBELN type VBELN
    exporting
      !ES_BAPISDHD1 type BAPISDHD1
      !ES_BAPISDHD1X type BAPISDHD1X
      !ES_BAPISDLS type BAPISDLS
      !ET_BAPICOND type YT_BAPICOND
      !ET_BAPICONDX type YT_BAPICONDX
      !ET_BAPICUCFG type YT_BAPICUCFG
      !ET_BAPICUINS type YT_BAPICUINS
      !ET_BAPIPARNR type YT_BAPIPARNR
      !ET_BAPISCHDL type YT_BAPISCHDL
      !ET_BAPISCHDLX type YT_BAPISCHDLX
      !ET_BAPISDITM type YT_BAPISDITM
      !ET_BAPISDITMX type YT_BAPISDITMX
    raising
      /VCXI/CX_CKX .
  methods GET_TVAK
    importing
      !IF_AUART type AUART
    returning
      value(RS_TVAK) type TVAK
    raising
      /VCXI/CX_CKX .
  methods GET_TVTA
    importing
      !IF_VKORG type VKORG
      !IF_VTWEG type VTWEG
      !IF_SPART type SPART
    returning
      value(RS_TVTA) type TVTA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CHECK
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods PROCESS_BAPI_RESULT
    importing
      !IF_TESTRUN type ABAP_BOOL
      !IF_BEHAVE_WHEN_ERROR type CHAR1
      !IS_SDOCRS type ZVCXI_XCI_S_SDOCRS
      !IT_BAPIRET2 type YT_BAPIRET2
    returning
      value(RR_MSG) type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
  class-methods GET_TMP_NIDAT
    returning
      value(RF_NIDAT) type ZVCXI_XCI_NIDAT
    raising
      /VCXI/CX_CKX .
private section.

  data F_LOCKED type /VCXI/CKX_LOCKED .
  data F_NIDAT type ZVCXI_XCI_NIDAT .
  data S_LOG type /VCXI/CKX_S_LOG .

  methods HANDLE_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods INIT_AFTER_CREATE
    importing
      !IF_AUART type AUART
      !IF_SPART type SPART
      !IF_VKORG type VKORG
      !IF_VTWEG type VTWEG
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
  methods REPLACE_TMP_NIDAT
    raising
      /VCXI/CX_CKX .
endclass. "YCL_HP_SMD_AIS_IDAT_SDOC definition
class YCL_HP_SMD_AIS_IDAT_SDOC implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.
endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.
    when C_FCODE_SAVE.
      ME->HANDLE_SAVE( ).
    when C_FCODE_DELETE.
      ME->HANDLE_DELETE( ).
    when C_FCODE_FREE.
      ME->HANDLE_FREE( ).
  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
*** Object is not locked - No changes possible!
    raise exception type /VCXI/CX_CKX
      exporting
        F_MSGTY = 'E'
        F_MSGID = '/VCXI/CKX'
        F_MSGNO = '201'.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK.

*** Set Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

  try.

***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).

  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK.

*** Remove Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

  try.

***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).

  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED.

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.
endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.
endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  move ME->F_NIDAT to RF_GUID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  move ME->F_NIDAT to RF_ID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data: LF_NIDAT type ZVCXI_XCI_NIDAT.

  data: LS_INSTANCE type /VCXI/CKX_S_OBJECT_INSTANCE.

  data: LR_IDAT_SDOC type ref to YCL_HP_SMD_AIS_IDAT_SDOC.

*** Get Instance with GUID
  read table T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.
    move IF_GUID to LF_NIDAT.
    create object LR_IDAT_SDOC
      exporting
        IF_NIDAT = LF_NIDAT.
    move LR_IDAT_SDOC to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

  move ME->S_LOG to RS_LOG.

endmethod.
method ADD_SDOCIT.

  data: LS_SDOCIT type YHP_SMD_AIS_S_SDOCIT.

  data: LT_SDOCIT type YHP_SMD_AIS_TT_SDOCIT.

  field-symbols: <S_SDOCIT> type YHP_SMD_AIS_S_SDOCIT.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Get max Position
  move ME->T_SDOCIT to LT_SDOCIT.
  sort LT_SDOCIT by POSNR descending.
  read table LT_SDOCIT into LS_SDOCIT index 1.

*** Get next Position
  RF_POSNR = LS_SDOCIT-POSNR + ME->S_TVAK-INCPO.

*** Add Entry
  append initial line to ME->T_SDOCIT assigning <S_SDOCIT>.
  move RF_POSNR to <S_SDOCIT>-POSNR.

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method CALL_BAPI.

  data: LS_BAPISDLS   type BAPISDLS,
        LS_BAPISDHD1  type BAPISDHD1,
        LS_BAPISDHD1X type BAPISDHD1X.

  data: LT_BAPIPARNR  type YT_BAPIPARNR,
        LT_BAPISDITM  type YT_BAPISDITM,
        LT_BAPISDITMX type YT_BAPISDITMX,
        LT_BAPISCHDL  type YT_BAPISCHDL,
        LT_BAPISCHDLX type YT_BAPISCHDLX,
        LT_BAPICUCFG  type YT_BAPICUCFG,
        LT_BAPICUINS  type YT_BAPICUINS,
        LT_BAPIRET2   type YT_BAPIRET2,
        LT_BAPICOND   type YT_BAPICOND,
        LT_BAPICONDX  type YT_BAPICONDX.

  clear:
         ES_SDOCRS.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Get BAPI Data
  ME->GET_BAPI_DATA( exporting IF_VBELN      = IF_VBELN
                     importing ES_BAPISDLS   = LS_BAPISDLS
                               ES_BAPISDHD1  = LS_BAPISDHD1
                               ES_BAPISDHD1X = LS_BAPISDHD1X
                               ET_BAPIPARNR  = LT_BAPIPARNR
                               ET_BAPISDITM  = LT_BAPISDITM
                               ET_BAPISDITMX = LT_BAPISDITMX
                               ET_BAPISCHDL  = LT_BAPISCHDL
                               ET_BAPISCHDLX = LT_BAPISCHDLX
                               ET_BAPICUCFG  = LT_BAPICUCFG
                               ET_BAPICUINS  = LT_BAPICUINS
                               ET_BAPICOND   = LT_BAPICOND
                               ET_BAPICONDX  = LT_BAPICONDX ).

*** Initialize before BAPI Call
  call function 'CONFIGURATION_INITIALIZER'.
  call function 'SD_SALES_DOCUMENT_INIT'.

  if IF_VBELN is initial or
     IF_FORCE_CREATE eq ABAP_TRUE.

*** Call BAPI to create
    call function 'SD_SALESDOCUMENT_CREATE'
      exporting
*        SALESDOCUMENT        = IF_VBELN    "CAVILES
        SALES_HEADER_IN      = LS_BAPISDHD1
        SALES_HEADER_INX     = LS_BAPISDHD1X
        LOGIC_SWITCH         = LS_BAPISDLS
        TESTRUN              = IF_TESTRUN
        BEHAVE_WHEN_ERROR    = IF_BEHAVE_WHEN_ERROR
      importing
        SALES_HEADER_OUT     = ES_SDOCRS-HEADER
        SALES_HEADER_STATUS  = ES_SDOCRS-HEADER_STATUS
      tables
        RETURN               = LT_BAPIRET2
        SALES_ITEMS_IN       = LT_BAPISDITM
        SALES_ITEMS_INX      = LT_BAPISDITMX
        SALES_CONDITIONS_IN  = LT_BAPICOND
        SALES_CONDITIONS_INX = LT_BAPICONDX
        SALES_PARTNERS       = LT_BAPIPARNR
        SALES_SCHEDULES_IN   = LT_BAPISCHDL
        SALES_SCHEDULES_INX  = LT_BAPISCHDLX
        SALES_CFGS_REF       = LT_BAPICUCFG
        SALES_CFGS_INST      = LT_BAPICUINS
        ITEMS_EX             = ES_SDOCRS-T_ITEMS
        SCHEDULE_EX          = ES_SDOCRS-T_SCHEDULE
        BUSINESS_EX          = ES_SDOCRS-T_BUSINESS
        INCOMPLETE_LOG       = ES_SDOCRS-T_INCOMPLETE_LOG
        EXTENSIONEX          = ES_SDOCRS-T_EXTENSION
        CONDITIONS_EX        = ES_SDOCRS-T_CONDITIONS
        CONDITIONS_KONV_EX   = ES_SDOCRS-T_CONDITIONS_KONV
        PARTNERS_EX          = ES_SDOCRS-T_PARTNERS
        TEXTHEADERS_EX       = ES_SDOCRS-T_TEXTHEADERS
        TEXTLINES_EX         = ES_SDOCRS-T_TEXTLINES.

  else.

*** Call BAPI to change
    call function 'SD_SALESDOCUMENT_CHANGE'
      exporting
        SALESDOCUMENT       = IF_VBELN
        ORDER_HEADER_IN     = LS_BAPISDHD1
        ORDER_HEADER_INX    = LS_BAPISDHD1X
        SIMULATION          = IF_TESTRUN
        CALL_FROM_BAPI      = ABAP_TRUE
        BEHAVE_WHEN_ERROR   = IF_BEHAVE_WHEN_ERROR
        LOGIC_SWITCH        = LS_BAPISDLS
      importing
        SALES_HEADER_OUT    = ES_SDOCRS-HEADER
        SALES_HEADER_STATUS = ES_SDOCRS-HEADER_STATUS
      tables
        RETURN              = LT_BAPIRET2
        ITEM_IN             = LT_BAPISDITM
        ITEM_INX            = LT_BAPISDITMX
        CONDITIONS_IN       = LT_BAPICOND
        CONDITIONS_INX      = LT_BAPICONDX
        SCHEDULE_IN         = LT_BAPISCHDL
        SCHEDULE_INX        = LT_BAPISCHDLX
        PARTNERS            = LT_BAPIPARNR
        SALES_CFGS_REF      = LT_BAPICUCFG
        SALES_CFGS_INST     = LT_BAPICUINS
        ITEMS_EX            = ES_SDOCRS-T_ITEMS
        SCHEDULE_EX         = ES_SDOCRS-T_SCHEDULE
        BUSINESS_EX         = ES_SDOCRS-T_BUSINESS
        INCOMPLETE_LOG      = ES_SDOCRS-T_INCOMPLETE_LOG
        EXTENSIONEX         = ES_SDOCRS-T_EXTENSION
        CONDITIONS_EX       = ES_SDOCRS-T_CONDITIONS
        CONDITIONS_KONV_EX  = ES_SDOCRS-T_CONDITIONS_KONV
        PARTNERS_EX         = ES_SDOCRS-T_PARTNERS
        TEXTHEADERS_EX      = ES_SDOCRS-T_TEXTHEADERS
        TEXTLINES_EX        = ES_SDOCRS-T_TEXTLINES.

  endif.

*** Initialize Buffer of Integration Data Number
  call function 'ZVCXI_XCC_IDAT_INIT_NIDAT'.

*** Process BAPI Results
  ER_MSG = ME->PROCESS_BAPI_RESULT( IF_TESTRUN           = IF_TESTRUN
                                    IF_BEHAVE_WHEN_ERROR = IF_BEHAVE_WHEN_ERROR
                                    IS_SDOCRS            = ES_SDOCRS
                                    IT_BAPIRET2          = LT_BAPIRET2 ).
  clear ef_vbeln.
  move ES_SDOCRS-HEADER-DOC_NUMBER to EF_VBELN.

*** Re-Lock after BAPI
  if ME->F_LOCKED eq ABAP_TRUE.
    ME->SET_LOCK( IF_LOCKED = ME->F_LOCKED ).
  endif.

endmethod.
method CONSTRUCTOR.

  field-symbols: <S_INSTANCE> type /VCXI/CKX_S_OBJECT_INSTANCE.

  try.

      move IF_NIDAT to ME->F_NIDAT.
      if IF_NEW ne ABAP_TRUE.
***     Load from DB
        ME->LOAD_FROM_DB( ).
      endif.

***   Add instance to instance buffer
      append initial line to T_INSTANCE assigning <S_INSTANCE>.
      move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to <S_INSTANCE>-GUID.
      move ME                                  to <S_INSTANCE>-R_OBJECT.

***   Set Event Handler
      set handler ME->HANDLE_CHANGED for ME.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      ME->HANDLE_FREE( ).
      raise exception LR_CX_CKX.

  endtry.

endmethod.
method CREATE.

  data: LF_NIDAT type ZVCXI_XCI_NIDAT.

*** Get next temporary Number
  LF_NIDAT = GET_TMP_NIDAT( ).

*** Create new
  create object RR_IDAT_SDOC
    exporting
      IF_NIDAT = LF_NIDAT
      IF_NEW   = ABAP_TRUE.

*** Initialize after Create
  RR_IDAT_SDOC->INIT_AFTER_CREATE( IF_AUART = IF_AUART
                                   IF_VKORG = IF_VKORG
                                   IF_VTWEG = IF_VTWEG
                                   IF_SPART = IF_SPART ).

endmethod.
method DELETE_SDOCIT.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Delete Entry
  delete ME->T_SDOCIT where POSNR eq IF_POSNR.

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_SDOCPA.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Delete Entry
  delete ME->T_SDOCPA where PARVW eq IF_PARVW.

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method GET_BAPI_DATA.

  data: LF_UPDKZ     type UPDKZ_D,
        LF_CONFIG_ID type CUX_CFG_ID value '000000',
        LF_INST_ID   type CU_INST_ID value '00000000',
        LF_CUOBJ     type CUOBJ.

  data: LS_SDOCPA type ZVCXI_XCI_S_SDOCPA,
        LS_SDOCIT type YHP_SMD_AIS_S_SDOCIT,
        LS_CUCO   type CUCO.

  field-symbols: <S_BAPIPARNR>  type BAPIPARNR,
                 <S_BAPISDITM>  type BAPISDITM,
                 <S_BAPISDITMX> type BAPISDITMX,
                 <S_BAPISCHDL>  type BAPISCHDL,
                 <S_BAPISCHDLX> type BAPISCHDLX,
                 <S_BAPICUCFG>  type BAPICUCFG,
                 <S_BAPICUINS>  type BAPICUINS,
                 <S_BAPICOND>   type BAPICOND,
                 <S_BAPICONDX>  type BAPICONDX,
                 <S_COND>       type YHP_SMD_AIS_S_QUOT_COND.

  clear: ES_BAPISDHD1,
         ES_BAPISDHD1X,
         ES_BAPISDLS,
         ET_BAPICOND,
         ET_BAPICONDX,
         ET_BAPICUCFG,
         ET_BAPICUINS,
         ET_BAPIPARNR,
         ET_BAPISCHDL,
         ET_BAPISCHDLX,
         ET_BAPISDITM,
         ET_BAPISDITMX.

***----------------------------------------------------------------------------
*** Logic Switch
  move 'C' to ES_BAPISDLS-PRICING.

***----------------------------------------------------------------------------
*** Header
  move SY-DATUM              to ES_BAPISDHD1-PURCH_DATE.

  move ME->S_TVAK-AUART      to ES_BAPISDHD1-DOC_TYPE.

  move ME->S_TVTA-VKORG      to ES_BAPISDHD1-SALES_ORG.
  move ME->S_TVTA-VTWEG      to ES_BAPISDHD1-DISTR_CHAN.
  move ME->S_TVTA-SPART      to ES_BAPISDHD1-DIVISION.

  move ME->S_SDOCIN-BSTKD    to ES_BAPISDHD1-PURCH_NO_C.
  move ME->S_SDOCIN-BSTDK    to ES_BAPISDHD1-PURCH_DATE.

*** Header Flags
  if IF_VBELN is not initial.
    move 'U'                 to ES_BAPISDHD1X-UPDATEFLAG.
  else.
    move 'I'                 to ES_BAPISDHD1X-UPDATEFLAG.

    move ABAP_TRUE           to ES_BAPISDHD1X-DOC_TYPE.
    move ABAP_TRUE           to ES_BAPISDHD1X-SALES_ORG.
    move ABAP_TRUE           to ES_BAPISDHD1X-DISTR_CHAN.
    move ABAP_TRUE           to ES_BAPISDHD1X-DIVISION.
  endif.

  move ABAP_TRUE             to ES_BAPISDHD1X-PURCH_NO_C.
  move ABAP_TRUE             to ES_BAPISDHD1X-PURCH_DATE.

*** Header Dates
  if ME->F_BNDDT is not initial.
    move ME->F_BNDDT to ES_BAPISDHD1-QT_VALID_T.
    move ABAP_TRUE   to ES_BAPISDHD1X-QT_VALID_T.
  endif.
  if ME->F_PRSDT is not initial.
    move ME->F_PRSDT to ES_BAPISDHD1-PRICE_DATE.
    move ABAP_TRUE   to ES_BAPISDHD1X-PRICE_DATE.
  endif.

***----------------------------------------------------------------------------
*** Partner
  if ES_BAPISDHD1X-UPDATEFLAG eq 'I'.
    loop at ME->T_SDOCPA into LS_SDOCPA.
      append initial line to ET_BAPIPARNR assigning <S_BAPIPARNR>.
      move LS_SDOCPA-PARVW to <S_BAPIPARNR>-PARTN_ROLE.
      move LS_SDOCPA-KUNNR to <S_BAPIPARNR>-PARTN_NUMB.
    endloop.
  endif.

***----------------------------------------------------------------------------
  loop at ME->T_SDOCIT into LS_SDOCIT.
*** Item Data
    append initial line to ET_BAPISDITM assigning <S_BAPISDITM>.
    move LS_SDOCIT-POSNR               to <S_BAPISDITM>-ITM_NUMBER.
    move LS_SDOCIT-UEPOS               to <S_BAPISDITM>-HG_LV_ITEM.
    move LS_SDOCIT-POSNR               to <S_BAPISDITM>-PO_ITM_NO.
    move LS_SDOCIT-MATNR               to <S_BAPISDITM>-MATERIAL.
    move LS_SDOCIT-BSTKD               to <S_BAPISDITM>-PURCH_NO_C.
    move LS_SDOCIT-WERKS               to <S_BAPISDITM>-PLANT.
    move ls_sdocit-lgort                to <s_bapisditm>-STORE_LOC. "JBL 26/04/2024 Add LGORT OPHJVC-597
*** Item Flags
    append initial line to ET_BAPISDITMX assigning <S_BAPISDITMX>.
    move <S_BAPISDITM>-ITM_NUMBER      to <S_BAPISDITMX>-ITM_NUMBER.

    if IF_VBELN is not initial.
      move 'U' to LF_UPDKZ.
    else.
      move 'I' to LF_UPDKZ.
    endif.

    move LF_UPDKZ                      to <S_BAPISDITMX>-UPDATEFLAG.
    move ABAP_TRUE                     to <S_BAPISDITMX>-HG_LV_ITEM.
    move ABAP_TRUE                     to <S_BAPISDITMX>-PO_ITM_NO.
    move ABAP_TRUE                     to <S_BAPISDITMX>-MATERIAL.
    move ABAP_TRUE                     to <S_BAPISDITMX>-PURCH_NO_C.
    move ABAP_TRUE                     to <S_BAPISDITMX>-PLANT.
    move ABAP_TRUE                     to <S_BAPISDITMX>-STORE_LOC.
***----------------------------------------------------------------------------
*** Schedule Lines Data
    append initial line to ET_BAPISCHDL assigning <S_BAPISCHDL>.
    move <S_BAPISDITM>-ITM_NUMBER      to <S_BAPISCHDL>-ITM_NUMBER.
    move '0001'                        to <S_BAPISCHDL>-SCHED_LINE.
    move LS_SDOCIT-KWMENG              to <S_BAPISCHDL>-REQ_QTY.

*** Schedule Lines Flags
    append initial line to ET_BAPISCHDLX assigning <S_BAPISCHDLX>.
    move <S_BAPISDITM>-ITM_NUMBER     to <S_BAPISCHDLX>-ITM_NUMBER.
    move '0001'                       to <S_BAPISCHDLX>-SCHED_LINE.
    move LF_UPDKZ                     to <S_BAPISCHDLX>-UPDATEFLAG.
    move ABAP_TRUE                    to <S_BAPISCHDLX>-REQ_QTY.

***----------------------------------------------------------------------------
*** Get Configuration ID
    add 1 to LF_CONFIG_ID.
    shift LF_CONFIG_ID right deleting trailing SPACE.
    translate LF_CONFIG_ID using ' 0'.

    add 1 to LF_INST_ID.
    shift LF_INST_ID right deleting trailing SPACE.
    translate LF_INST_ID using ' 0'.

*** Get Profile Settings
    select single CUOBJ
           from MARC
           into LF_CUOBJ
          where MATNR eq LS_SDOCIT-MATNR
           and  WERKS eq LS_SDOCIT-WERKS.
    check SY-SUBRC eq 0.

    call function 'CUCB_GET_PROFILE_OF_INSTANCE'
      exporting
        INSTANCE                     = LF_CUOBJ
      importing
        PROFILE_WA                   = LS_CUCO
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2
        PROFILE_NOT_FOUND            = 3
        INVALID_INPUT                = 4.
    check SY-SUBRC eq 0.

*** Instances
    append initial line to ET_BAPICUINS assigning <S_BAPICUINS>.
    move LF_CONFIG_ID                  to <S_BAPICUINS>-CONFIG_ID.
    move LF_INST_ID                    to <S_BAPICUINS>-INST_ID.
    move LS_CUCO-OBTAB                 to <S_BAPICUINS>-OBJ_TYPE.
    move LS_CUCO-KLART                 to <S_BAPICUINS>-CLASS_TYPE.
    move LS_CUCO-OBJEK                 to <S_BAPICUINS>-OBJ_KEY.
    move LS_SDOCIT-KWMENG              to <S_BAPICUINS>-QUANTITY.
    move LS_SDOCIT-VRKME               to <S_BAPICUINS>-QUANTITY_UNIT.
    move 'T'                           to <S_BAPICUINS>-COMPLETE.
    move 'T'                           to <S_BAPICUINS>-CONSISTENT.

*** Configuration Data
    append initial line to ET_BAPICUCFG assigning <S_BAPICUCFG>.
    move <S_BAPISDITM>-ITM_NUMBER      to <S_BAPICUCFG>-POSEX.
    move LF_CONFIG_ID                  to <S_BAPICUCFG>-CONFIG_ID.
    move LF_INST_ID                    to <S_BAPICUCFG>-ROOT_ID.
    move <S_BAPICUINS>-COMPLETE        to <S_BAPICUCFG>-COMPLETE.
    move <S_BAPICUINS>-CONSISTENT      to <S_BAPICUCFG>-CONSISTENT.

*** Set Integration Data Number to Global Buffer
    call function 'ZVCXI_XCC_IDAT_SET_NIDAT'
      exporting
        IF_POSNR = LS_SDOCIT-POSNR
        IF_NIDAT = LS_SDOCIT-NIDAT_SVC.

  endloop.

***----------------------------------------------------------------------------
*** Conditions
  loop at ME->T_COND assigning <S_COND>.
    append initial line to ET_BAPICOND assigning <S_BAPICOND>.
    append initial line to ET_BAPICONDX assigning <S_BAPICONDX>.
    <S_BAPICOND>-ITM_NUMBER   = <S_COND>-POSNR.
    <S_BAPICONDX>-ITM_NUMBER  = <S_BAPICOND>-ITM_NUMBER.
    <S_BAPICONDX>-UPDATEFLAG  = ES_BAPISDHD1X-UPDATEFLAG.
    <S_BAPICOND>-COND_TYPE    = <S_COND>-KSCHL.
    <S_BAPICONDX>-COND_TYPE   = 'X'.
    <S_BAPICOND>-COND_VALUE   = <S_COND>-KBETR.
    <S_BAPICONDX>-COND_VALUE  = 'X'.
    <S_BAPICOND>-CURRENCY     = <S_COND>-KONWA.
    <S_BAPICONDX>-CURRENCY    = 'X'.
  endloop.

endmethod.
method GET_TMP_NIDAT.

  data: LS_INSTANCE type /VCXI/CKX_S_OBJECT_INSTANCE.

*** Start with temp. Number
  move C_NIDAT_TMP to RF_NIDAT.

*** Check for already existing temp. Instances
  loop at T_INSTANCE into LS_INSTANCE
                    where GUID ge C_NIDAT_TMP.
    if LS_INSTANCE-GUID gt RF_NIDAT.
      move LS_INSTANCE-GUID to RF_NIDAT.
    endif.
  endloop.

*** Get next Number
  add 1 to RF_NIDAT.

endmethod.
method GET_TVAK.

  select single *
         into RS_TVAK
         from TVAK
        where AUART eq IF_AUART.

  if SY-SUBRC ne 0.
*** Sales document type &1 has not been defined
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'V/'
                                          IF_MSGNO = '047'
                                          IF_MSGV1 = IF_AUART ).
  endif.

endmethod.
method GET_TVTA.

  call function 'SD_ORGDATA_CHECK'
    exporting
      FI_VKORG                   = IF_VKORG
      FI_VTWEG                   = IF_VTWEG
      FI_SPART                   = IF_SPART
      FI_TEXT_GET                = SPACE
    importing
      FE_TVTA                    = RS_TVTA
    exceptions
      VKORG_DOES_NOT_EXIST       = 1
      VTWEG_DOES_NOT_EXIST       = 2
      SPART_DOES_NOT_EXIST       = 3
      VKORG_VTWEG_DOES_NOT_EXIST = 4
      VKORG_SPART_DOES_NOT_EXIST = 5
      VTBER_DOES_NOT_EXIST       = 6
      VKBUR_DOES_NOT_EXIST       = 7
      VKGRP_DOES_NOT_EXIST       = 8
      VTBER_VKBUR_DOES_NOT_EXIST = 9
      VKBUR_VKGRP_DOES_NOT_EXIST = 10
      VKBUR_VKORG_DOES_NOT_EXIST = 11
      NO_AUTHORITY               = 12.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method GET_VBELN_LAST.

  data: LS_SDOCMS type ZVCXI_XCI_S_SDOCMS.
  data: LT_SDOCMS type ZVCXI_XCI_TT_SDOCMS.

*** Buffer and Sort Messages
  move ME->T_SDOCMS to LT_SDOCMS.
  sort LT_SDOCMS by TSTMP descending.

*** Read last Message Entry
  read table LT_SDOCMS into LS_SDOCMS index 1.
  if SY-SUBRC eq 0 and LS_SDOCMS-VBELN is not initial.
    move LS_SDOCMS-VBELN to RF_VBELN.
  endif.

endmethod.
method HANDLE_CHANGED.

  try.

      move SY-UNAME     to ME->S_LOG-CHABY.
      get time stamp field ME->S_LOG-CHAAT.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      LR_CX_CKX->SHOW_MESSAGE( ).

  endtry.

endmethod.
method HANDLE_CHECK.
endmethod.
method HANDLE_DELETE.

*** Mark as deleted
  move ABAP_TRUE to ME->F_DELETED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method HANDLE_FREE.

*** Remove Instance from Buffer
  delete T_INSTANCE where R_OBJECT eq ME.

*** Unlock
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

*** Mark as Freed
  move ABAP_TRUE to ME->F_FREED.

endmethod.
method HANDLE_SAVE.

*** Save only if changed
  check ME->F_CHANGED eq ABAP_TRUE.

*** Replace temporary Number
  ME->REPLACE_TMP_NIDAT( ).

*** Set Changed Info to Log
  move SY-UNAME     to ME->S_LOG-CHABY.
  get time stamp field ME->S_LOG-CHAAT.

  if ME->F_DELETED eq ABAP_FALSE.
*** Save Integration Data
    call function 'ZVCXI_XCI_DB_SAVE_IDAT_SDOC'
      in update task
      exporting
        IF_NIDAT  = ME->F_NIDAT
        IS_TVAK   = ME->S_TVAK
        IS_TVTA   = ME->S_TVTA
        IS_SDOCIN = ME->S_SDOCIN
        IT_SDOCPA = ME->T_SDOCPA
        IT_SDOCIT = ME->T_SDOCIT
        IT_SDOCMS = ME->T_SDOCMS
        IS_LOG    = ME->S_LOG.
  else.
*** Delete Integration Data
    call function 'ZVCXI_XCI_DB_DEL_IDAT_SDOC'
      in update task
      exporting
        IF_NIDAT = ME->F_NIDAT.
  endif.

*** Reset Change Indicator
  move ABAP_FALSE to ME->F_CHANGED.

endmethod.
method INIT_AFTER_CREATE.

*** Set lock for new object
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

*** Get Sales Document Type
  ME->S_TVAK = ME->GET_TVAK( IF_AUART = IF_AUART ).

*** Get Sales Area
  ME->S_TVTA = ME->GET_TVTA( IF_VKORG = IF_VKORG
                             IF_VTWEG = IF_VTWEG
                             IF_SPART = IF_SPART ).

*** Write Create Log Entry
  move SY-UNAME     to ME->S_LOG-CREBY.
  get time stamp field ME->S_LOG-CREAT.

*** Raise Events
  raise event /VCXI/IF_CKX_OBJECT~CREATED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method LOAD_FROM_DB.

  data: LS_TD200 type ZVCXI_XCI_TD200,
        LS_TD201 type ZVCXI_XCI_TD201,
        LS_TD210 type ZVCXI_XCI_TD210,
        LS_TD290 type ZVCXI_XCI_TD290.

  data: LT_TD201 type table of ZVCXI_XCI_TD201,
        LT_TD210 type table of ZVCXI_XCI_TD210,
        LT_TD290 type table of ZVCXI_XCI_TD290.

  field-symbols: <S_SDOCPA> type ZVCXI_XCI_S_SDOCPA,
                 <S_SDOCIT> type YHP_SMD_AIS_S_SDOCIT,
                 <S_SDOCMS> type ZVCXI_XCI_S_SDOCMS.

  clear: ME->F_CHANGED,
         ME->S_TVAK,
         ME->S_TVTA,
         ME->S_LOG,
         ME->T_SDOCPA,
         ME->T_SDOCIT,
         ME->T_SDOCMS.

***--------------------------------------------------------------------------------------
*** Load Header
  select single *
         into LS_TD200
         from ZVCXI_XCI_TD200
        where NIDAT eq ME->F_NIDAT.

  if SY-SUBRC ne 0.
    raise exception type /VCXI/CX_CKX.
  endif.

*** Get Sales Document Type
  ME->S_TVAK = ME->GET_TVAK( IF_AUART = LS_TD200-AUART ).

*** Get Sales Area
  ME->S_TVTA = ME->GET_TVTA( IF_VKORG = LS_TD200-VKORG
                             IF_VTWEG = LS_TD200-VTWEG
                             IF_SPART = LS_TD200-SPART ).

*** Info
  move-corresponding LS_TD200 to ME->S_SDOCIN.

*** Get Log
  move-corresponding LS_TD200 to ME->S_LOG.

***--------------------------------------------------------------------------------------
*** Load Partner
  select *
         into table LT_TD201
         from ZVCXI_XCI_TD201
        where NIDAT eq ME->F_NIDAT.

  loop at LT_TD201 into LS_TD201.
    append initial line to ME->T_SDOCPA assigning <S_SDOCPA>.
    move-corresponding LS_TD201 to <S_SDOCPA>.
  endloop.

***--------------------------------------------------------------------------------------
*** Load Item
  select *
         into table LT_TD210
         from ZVCXI_XCI_TD210
        where NIDAT eq ME->F_NIDAT.

  loop at LT_TD210 into LS_TD210.
    append initial line to ME->T_SDOCIT assigning <S_SDOCIT>.
    move-corresponding LS_TD210 to <S_SDOCIT>.
  endloop.

***--------------------------------------------------------------------------------------
*** Load Messages
  select *
         into table LT_TD290
         from ZVCXI_XCI_TD290
        where NIDAT eq ME->F_NIDAT.

  loop at LT_TD290 into LS_TD290.
    append initial line to ME->T_SDOCMS assigning <S_SDOCMS>.
    move-corresponding LS_TD290 to <S_SDOCMS>.

    if LS_TD290-XML_MSG is not initial.
      call transformation ID
           source xml LS_TD290-XML_MSG
           result T_MSG = <S_SDOCMS>-T_MSG.
    endif.
  endloop.

endmethod.
method PROCESS_BAPI_RESULT.

  data: LS_BAPIRET2 type BAPIRET2.

  field-symbols: <S_SDOCMS> type ZVCXI_XCI_S_SDOCMS.

*** Process Messages
  create object RR_MSG.
  loop at IT_BAPIRET2 into LS_BAPIRET2.
    RR_MSG->ADD_MESSAGE( IF_MSGID = LS_BAPIRET2-ID
                         IF_MSGTY = LS_BAPIRET2-TYPE
                         IF_MSGNO = LS_BAPIRET2-NUMBER
                         IF_MSGV1 = LS_BAPIRET2-MESSAGE_V1
                         IF_MSGV2 = LS_BAPIRET2-MESSAGE_V2
                         IF_MSGV3 = LS_BAPIRET2-MESSAGE_V3
                         IF_MSGV4 = LS_BAPIRET2-MESSAGE_V4 ).
  endloop.

*** Add Protocol
  append initial line to ME->T_SDOCMS assigning <S_SDOCMS>.
  get time stamp field <S_SDOCMS>-TSTMP.
  move IS_SDOCRS-HEADER-DOC_NUMBER      to <S_SDOCMS>-VBELN.
  move SY-UNAME                         to <S_SDOCMS>-UNAME.
  move RR_MSG->T_MSG                    to <S_SDOCMS>-T_MSG.

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

  read table IT_BAPIRET2 with key TYPE = 'E'
                         transporting no fields.
  if SY-SUBRC ne 0 or
     IF_BEHAVE_WHEN_ERROR eq 'P'.
    if IF_TESTRUN ne ABAP_TRUE.
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
      commit work.
    endif.
  else.
    if IF_TESTRUN ne ABAP_TRUE.
      call function 'BAPI_TRANSACTION_ROLLBACK'.
    endif.
  endif.

endmethod.
method REPLACE_TMP_NIDAT.

  data: LF_NIDAT type ZVCXI_XCI_NIDAT.

  data: LS_TC001 type ZVCXI_XCI_TC001.

  field-symbols: <S_INSTANCE> type /VCXI/CKX_S_OBJECT_INSTANCE.

*** Check for temp. Number
  check ME->F_NIDAT ge C_NIDAT_TMP.

*** Get current Instance
  read table T_INSTANCE assigning <S_INSTANCE> ##WARN_OK
                        with key GUID = ME->F_NIDAT.
  if SY-SUBRC ne 0.
    raise exception type /VCXI/CX_CKX.
  endif.

*** Get Integration Data Type
  select single *
         into LS_TC001
         from ZVCXI_XCI_TC001
        where TIDAT eq C_TIDAT_SDOC.

*** Get next Number
  call function 'NUMBER_GET_NEXT'
    exporting
      NR_RANGE_NR             = LS_TC001-NRNR
      OBJECT                  = LS_TC001-NROBJ
    importing
      NUMBER                  = LF_NIDAT
    exceptions
      INTERVAL_NOT_FOUND      = 1
      NUMBER_RANGE_NOT_INTERN = 2
      OBJECT_NOT_FOUND        = 3
      QUANTITY_IS_0           = 4
      QUANTITY_IS_NOT_1       = 5
      INTERVAL_OVERFLOW       = 6
      BUFFER_OVERFLOW         = 7.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Replace Number
  move LF_NIDAT to ME->F_NIDAT.
  move LF_NIDAT to <S_INSTANCE>-GUID.

endmethod.
method SET_COND.

  field-symbols: <S_COND> type YHP_SMD_AIS_S_QUOT_COND.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Check Condition
  read table ME->T_COND assigning <S_COND> with key POSNR = IF_POSNR
                                                    KSCHL = IF_KSCHL.
  if SY-SUBRC ne 0.
    append initial line to ME->T_COND assigning <S_COND>.
  elseif <S_COND>-KBETR eq IF_KBETR and
         <S_COND>-KONWA eq IF_KONWA.
    return.
  endif.

*** Transfer Data
  <S_COND>-POSNR = IF_POSNR.
  <S_COND>-KSCHL = IF_KSCHL.
  <S_COND>-KBETR = IF_KBETR.
  <S_COND>-KONWA = IF_KONWA.

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_DATES.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  if IF_PRSDT is initial and
     IF_BNDDT is initial.
    return.
  endif.

  move IF_PRSDT to ME->F_PRSDT.
  move IF_BNDDT to ME->F_BNDDT.

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_LOCK.

  try.

***   Write Lock Entry only for none temp. Number
      if ME->F_NIDAT lt C_NIDAT_TMP.

        if IF_LOCKED eq ABAP_TRUE.

***       Try to Set Write Lock
          call function 'ENQUEUE_EZVCXI_XCI_D200E'
            exporting
              NIDAT          = ME->F_NIDAT
            exceptions
              FOREIGN_LOCK   = 1
              SYSTEM_FAILURE = 2
              others         = 3.
          if SY-SUBRC ne 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.

        else.

***       Remove Write Lock
          call function 'DEQUEUE_EZVCXI_XCI_D200E'
            exporting
              NIDAT = ME->F_NIDAT.

        endif.

      endif.

      move IF_LOCKED to ME->F_LOCKED.

    catch /VCXI/CX_CKX into data(LR_CX_CKX).
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      raise exception LR_CX_CKX.

  endtry.

endmethod.
method SET_SDOCIN.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  check IS_SDOCIN ne ME->S_SDOCIN.
  move  IS_SDOCIN to ME->S_SDOCIN.

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_SDOCIT.

  field-symbols: <S_SDOCIT> type YHP_SMD_AIS_S_SDOCIT.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Find Entry
  read table ME->T_SDOCIT assigning <S_SDOCIT>
                          with key POSNR = IF_POSNR.
  if SY-SUBRC ne 0.
*** Add Entry
    append initial line to ME->T_SDOCIT assigning <S_SDOCIT>.
    move IF_POSNR     to <S_SDOCIT>-POSNR.
    sort ME->T_SDOCIT by POSNR.
  endif.

  if IF_UEPOS is supplied.
    move IF_UEPOS to <S_SDOCIT>-UEPOS.
  endif.
  if IF_MATNR is supplied.
    move IF_MATNR to <S_SDOCIT>-MATNR.
  endif.
  if IF_WERKS is supplied.
    move IF_WERKS to <S_SDOCIT>-WERKS.
  endif.
  if IF_KWMENG is supplied.
    move IF_KWMENG to <S_SDOCIT>-KWMENG.
  endif.
  if IF_VRKME is supplied.
    move IF_VRKME to <S_SDOCIT>-VRKME.
  endif.
  if IF_BSTKD is supplied.
    move IF_BSTKD to <S_SDOCIT>-BSTKD.
  endif.
  if IF_NIDAT_SVC is supplied.
    move IF_NIDAT_SVC to <S_SDOCIT>-NIDAT_SVC.
  endif.
    if IF_LGORT is supplied. "JBL 26/04/2024 OPHJVC-597 Add LGORT
    move IF_LGORT to <S_SDOCIT>-LGORT.
  endif.

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_SDOCPA.

  field-symbols: <S_SDOCPA> type ZVCXI_XCI_S_SDOCPA.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Find Entry
  read table ME->T_SDOCPA assigning <S_SDOCPA>
                          with key PARVW = IF_PARVW.
  if SY-SUBRC ne 0.
*** Add Entry
    append initial line to ME->T_SDOCPA assigning <S_SDOCPA>.
    move IF_PARVW to <S_SDOCPA>-PARVW.
  endif.

  move IF_KUNNR to <S_SDOCPA>-KUNNR.

*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
