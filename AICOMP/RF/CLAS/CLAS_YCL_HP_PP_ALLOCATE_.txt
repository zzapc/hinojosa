
class YCL_HP_PP_ALLOCATE definition
  public
  final
  create public .

public section.

  class-methods ALLOCATE
    importing
      !IF_CUOBJ type CUOBJ
      !IF_PARENT type MATNR
      !IS_CAUFVD type CAUFVD
      !IT_COBOPLPO type COBOPLPO_TAB
    changing
      !CT_PLMZ type PLMZ_TAB
      !CT_PLFH type PLFH_TAB
    raising
      /VCXI/CX_CKX .

protected section.

 types:
    begin of YS_PRTAL,
            PLNTY type PLNTY,
            PLNNR type PLNNR,
            PLNAL type PLNAL,
            PLNFL type PLNFOLGE,
            PLNKN type PLNKN,
            ZAEHL type CIM_COUNT,
            VORNR type VORNR,
            MATNR type MATNR,
          end of YS_PRTAL .
  types:
    YT_PRTAL type table of YS_PRTAL .
  types:
    begin of YS_STPO,
          STLTY type STLTY,
          STLNR type STNUM,
          STLKN type STLKN,
          POSNR type SPOSN,
         end   of YS_STPO .
  types:
    YT_STPO type table of YS_STPO .
  types:
    begin of YS_PLAS,
           PLNTY type PLNTY,
           PLNNR type PLNNR,
           PLNAL type PLNAL,
           PLNFL type PLNFOLGE,
           PLNKN type PLNKN,
           ZAEHL type CIM_COUNT,
         end   of YS_PLAS .
  types:
    YT_PLAS type table of YS_PLAS .

  class-methods ADJUST_PLFH
    importing
      !IT_PRT type /VCXI/VKCR_TT_PRT
      !IF_WERKS type WERKS_D
      !IT_COBOPLPO type COBOPLPO_TAB
      !IT_PLAS type YT_PLAS
    changing
      !CT_PLFH type PLFH_TAB
    raising
      /VCXI/CX_CKX .
  class-methods ADJUST_PLMZ
    importing
      !IT_ALLOC type /VCXI/VKCR_TT_ALLOC
      !IT_STPO type YT_STPO
      !IT_COBOPLPO type COBOPLPO_TAB
      !IT_PLAS type YT_PLAS
    changing
      !CT_PLMZ type PLMZ_TAB
    raising
      /VCXI/CX_CKX .
  class-methods GET_MASTERDATA
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
    exporting
      !ET_STPO type YT_STPO
      !ET_PLAS type YT_PLAS
    raising
      /VCXI/CX_CKX .

private section.
endclass. "YCL_HP_PP_ALLOCATE definition
class YCL_HP_PP_ALLOCATE implementation.
method ADJUST_PLFH.

  data:          LS_PRT        type /VCXI/VKCR_S_PRT,
                 LS_PRTAL      type YS_PRTAL,
                 LS_PLAS       type YS_PLAS,
                 LS_COBOPLPO   type COBOPLPO.
  data:          LT_PRTAL      type YT_PRTAL.
  field-symbols: <S_PLFH>      type PLFH.

***------------------------------------------------------------------------------------------------
*** Create internal Assignment List
  loop at IT_PRT into LS_PRT.
    clear LS_PRTAL.
    move-corresponding LS_PRT to LS_PRTAL.
    loop at IT_COBOPLPO into LS_COBOPLPO where PLNNR = LS_PRT-PLNNR
                                          and  VORNR = LS_PRT-VORNR.
      loop at IT_PLAS into LS_PLAS where PLNFL = LS_PRT-PLNFL
                                    and  PLNKN = LS_COBOPLPO-PLNKN
                                    and  ZAEHL = LS_COBOPLPO-ZAEHL.
        move LS_PLAS-PLNFL     to LS_PRTAL-PLNFL.
        move LS_COBOPLPO-PLNKN to LS_PRTAL-PLNKN.
        move LS_COBOPLPO-ZAEHL to LS_PRTAL-ZAEHL.
        append LS_PRTAL to LT_PRTAL.
      endloop.
    endloop.
  endloop.

***------------------------------------------------------------------------------------------------
*** Adjust PRT Assignment Placeholder
  loop at CT_PLFH assigning <S_PLFH>.
    read table LT_PRTAL into LS_PRTAL
                        with key PLNNR = <S_PLFH>-PLNNR
                                 PLNFL = <S_PLFH>-PLNFL.
    if SY-SUBRC is initial.
***   Mark as assigned
      delete LT_PRTAL index SY-TABIX.

      move LS_PRTAL-PLNKN to <S_PLFH>-PLNKN.
      select single OBJTY OBJID from CRVM_A
                                into (<S_PLFH>-OBJTY, <S_PLFH>-OBJID)
                               where MATNR eq LS_PRTAL-MATNR
                                and  WERKS eq IF_WERKS.
    else.
***   PRT Placeholder not used
      delete CT_PLFH.
    endif.
  endloop.

endmethod.
method ADJUST_PLMZ.

  data:          LF_USED       type ABAP_BOOL.
  data:          LS_BOM        type /VCXI/VKCR_S_BOM,
                 LS_ALLOC      type /VCXI/VKCR_S_ALLOC,
                 LS_STPO       type YS_STPO,
                 LS_PLAS       type YS_PLAS,
                 LS_COBOPLPO   type COBOPLPO.
  field-symbols: <S_PLMZ>      type PLMZ.

*** Process all Allocations
  loop at CT_PLMZ assigning <S_PLMZ>.
    clear LF_USED.

*** Go through all BOM Items
    loop at IT_STPO into LS_STPO where STLTY eq <S_PLMZ>-STLTY
                                  and  STLNR eq <S_PLMZ>-STLNR
                                  and  STLKN eq <S_PLMZ>-STLKN.

***   Find Allocation by VC
      loop at IT_ALLOC into LS_ALLOC where STLNR eq LS_STPO-STLNR
                                      and  POSNR eq LS_STPO-POSNR.

***     Find Operation
        loop at IT_COBOPLPO into LS_COBOPLPO where PLNNR eq LS_ALLOC-PLNNR
                                              and  VORNR eq LS_ALLOC-VORNR.
          read table IT_PLAS into LS_PLAS with key ZAEHL = LS_COBOPLPO-ZAEHL
                                                   PLNKN = LS_COBOPLPO-PLNKN.
          check SY-SUBRC is initial and
                LS_PLAS-PLNFL eq LS_ALLOC-PLNFL.

          move LS_PLAS-PLNAL to <S_PLMZ>-PLNAL.
          move LS_PLAS-PLNFL to <S_PLMZ>-PLNFL.
          move LS_PLAS-PLNKN to <S_PLMZ>-PLNKN.
          move LS_PLAS-ZAEHL to <S_PLMZ>-ZAEHL.
          move ABAP_TRUE to LF_USED.
          exit.
        endloop.
        if LF_USED eq ABAP_TRUE.
          exit.
        endif.
      endloop.
      if LF_USED eq ABAP_TRUE.
        exit.
      endif.
    endloop.

*** Remove unused Assignments
    if LF_USED ne ABAP_TRUE.
      delete CT_PLMZ.
    endif.
  endloop.

endmethod.
method ALLOCATE.

  data:  LF_GVCIN   type /VCXI/VKCR_GVCIN.
  data:  LT_BOM     type /VCXI/VKCR_TT_BOM,
         LT_RTE     type /VCXI/VKCR_TT_RTE,
         LT_ALLOC   type /VCXI/VKCR_TT_ALLOC,
         LT_PRT     type /VCXI/VKCR_TT_PRT,
         LT_STPO    type YT_STPO,
         LT_PLAS    type YT_PLAS.

***------------------------------------------------------------------------------------------------
*** Check Configuration available
  check IF_CUOBJ is not initial.

*** Component Allocation or PRT available
  check CT_PLMZ is not initial or
        CT_PLFH is not initial.

***------------------------------------------------------------------------------------------------
*** Get Configuration Instance
  LF_GVCIN = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = IF_CUOBJ ).

*** Get BOM/Routing of Configuration
  call method /VCXI/CL_VKCR_GATEWAY=>GET_BOMRTE
    exporting
      IF_GVCIN = LF_GVCIN
    importing
      ET_BOM   = LT_BOM
      ET_RTE   = LT_RTE
      ET_ALLOC = LT_ALLOC
      ET_PRT   = LT_PRT.

*** Get Master Data
  GET_MASTERDATA( exporting IF_MATNR = IF_PARENT
                            IF_WERKS = IS_CAUFVD-WERKS
                  importing ET_STPO  = LT_STPO
                            ET_PLAS  = LT_PLAS ).

***------------------------------------------------------------------------------------------------
*** Assign Components Assignment
  ADJUST_PLMZ( exporting IT_ALLOC    = LT_ALLOC
                         IT_STPO     = LT_STPO
                         IT_COBOPLPO = IT_COBOPLPO
                         IT_PLAS     = LT_PLAS
               changing  CT_PLMZ     = CT_PLMZ ).

***------------------------------------------------------------------------------------------------
*** Assign PRT Assignment
  ADJUST_PLFH( exporting IT_PRT      = LT_PRT
                         IF_WERKS    = IS_CAUFVD-WERKS
                         IT_COBOPLPO = IT_COBOPLPO
                         IT_PLAS     = LT_PLAS
               changing  CT_PLFH     = CT_PLFH ).

endmethod.
method GET_MASTERDATA.

  data:  LF_PLNNR      type PLNNR,
         LF_PLNTY      type PLNTY.
  data:  LS_MARA       type MARA,
         LS_MARC       type MARC,
         LS_MAST       type MAST,
         LS_MAPL       type MAPL.

***------------------------------------------------------------------------------------------------
*** Read Material
  CALL FUNCTION 'MARA_SINGLE_READ'
    EXPORTING
      MATNR             = IF_MATNR
    IMPORTING
      WMARA             = LS_MARA
    EXCEPTIONS
      LOCK_ON_MATERIAL  = 1
      LOCK_SYSTEM_ERROR = 2
      WRONG_CALL        = 3
      NOT_FOUND         = 4
      others            = 5.
  if SY-SUBRC is not initial.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Read Material Plant
  CALL FUNCTION 'MARC_SINGLE_READ'
    EXPORTING
      MATNR             = IF_MATNR
      WERKS             = IF_WERKS
    IMPORTING
      WMARC             = LS_MARC
    EXCEPTIONS
      LOCK_ON_MARC      = 1
      LOCK_SYSTEM_ERROR = 2
      WRONG_CALL        = 3
      NOT_FOUND         = 4
      others            = 5.
  if SY-SUBRC is not initial.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Get BOM Assignment
  select single * from MAST
                  into LS_MAST
                 where MATNR eq IF_MATNR
                  and  WERKS eq IF_WERKS.
  if SY-SUBRC is initial.
    select STLTY STLNR STLKN POSNR
           into table ET_STPO
           from STPO
          where STLTY eq 'M'
           and  STLNR eq LS_MAST-STLNR
           and  LKENZ eq ' '.
    sort ET_STPO[].
  else.
*** No BOM Assignment for &1 in plant &2 found.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'YDMPC_PP'
                                          IF_MSGNO = '101'
                                          IF_MSGV1 = IF_MATNR
                                          IF_MSGV2 = IF_WERKS ).
  endif.

***------------------------------------------------------------------------------------------------
*** Get Routing Assignment
  select single * from MAPL
                  into LS_MAPL
                 where MATNR eq IF_MATNR
                  and  WERKS eq IF_WERKS
* 07.05.2024 Añadimos criterios para buscar sólo hojas de ruta no borradas
                  and  PLNTY eq 'N'  "Hoja de ruta específica
                  and  loekz eq ''.  "NO BORRADO
  if SY-SUBRC is initial.
    select PLNTY PLNNR PLNAL PLNFL PLNKN ZAEHL
           into table ET_PLAS
           from PLAS
          where PLNTY eq LS_MAPL-PLNTY
           and  PLNNR eq LS_MAPL-PLNNR
           and  LOEKZ ne 'X'.
  endif.

endmethod.
