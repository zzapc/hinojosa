
class YCL_HP_SVCP_EA_MACHINE_PTP definition
  public
  inheriting from ZCL_VCXI_P0SP_EA_MACHINE_PTP
  create public .

public section.

  methods GET_HFLAG
    returning
      value(RF_HFLAG) type YHP_SVCS_HFLAG .
  methods GET_MSURO
    returning
      value(RS_MSURO) type YHP_SVCP_S_MSURO
    raising
      /VCXI/CX_CKX .
  methods IS_GRPUNIT_ADDON_ACTIVE
    returning
      value(RF_ACTIVE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_SBLARO
    returning
      value(RS_SBLARO) type ZVCXI_PXS_S_SBLAR .
  methods GET_SBLAR
    returning
      value(RS_SBLAR) type ZVCXI_PXS_S_SBLAR .

  methods /VCXI/IF_VKCR_EXPL_RTE~GET_RTE
    redefinition .
protected section.
private section.
endclass. "YCL_HP_SVCP_EA_MACHINE_PTP definition
class YCL_HP_SVCP_EA_MACHINE_PTP implementation.
  method /VCXI/IF_VKCR_EXPL_RTE~GET_RTE.

    RS_EXRTE = SUPER->/VCXI/IF_VKCR_EXPL_RTE~GET_RTE( IF_PLNME = IF_PLNME ).

***--------------------------------------------------------------------------------------
*** Machine Surface Out
    data(LS_MSURO) = ME->GET_MSURO( ).
    move LS_MSURO-MSURO               to RS_EXRTE-VGW04.
    move ABAP_TRUE                    to RS_EXRTE-VGW04_X.
    move LS_MSURO-MSURO_UOM           to RS_EXRTE-VGE04.
    move ABAP_TRUE                    to RS_EXRTE-VGE04_X.

***--------------------------------------------------------------------------------------
*** Homologation flag
   check  ME->GET_HFLAG( ) eq abap_true.

    move 'Z000001'                    to RS_EXRTE-SLWID.
    move ABAP_TRUE                    to RS_EXRTE-SLWID_X.

    move  ME->GET_HFLAG( )            to RS_EXRTE-USR10.
    move ABAP_TRUE                    to RS_EXRTE-USR10_X.
  endmethod.
  method GET_HFLAG.
    data: LR_PR_PTP  type ref to    YCL_HP_SVCP_PR_MACHINE_PTP.

    try.
        move R_PR_MACHINE_PTP ?to LR_PR_PTP.
        check LR_PR_PTP is bound.
        RF_HFLAG = LR_PR_PTP->GET_HFLAG( ).
      catch CX_SY_MOVE_CAST_ERROR.

    endtry.
  endmethod.
  method GET_MSURO.

    data: LF_PCUPS  type ZVCXI_P0SP_PCUPS.
    data: LS_MQTYO  type ZVCXI_XCSP_S_MQTYO,
          LS_AREAO  type ZVCXI_XCS_S_CALCV,
          LS_SBLARO type ZVCXI_PXS_S_SBLAR,
          LS_SBLAR  type ZVCXI_PXS_S_SBLAR,
          LS_PCDIM  type ZVCXI_P0SP_S_PCDIM.
    data: LT_PCDIM  type ZVCXI_P0SP_TT_PCDIM.
    data: LR_CX     type ref to CX_ROOT.

***-------------------------------------------------------------------*
*** Determine Machine Surface Out
    try.
***     Gather data for calculation
        LS_MQTYO = ME->GET_MQTYO( ).
        LT_PCDIM = ME->GET_MFO_PCDIM( ).
        check LT_PCDIM is not initial.
        LS_PCDIM = LT_PCDIM[ 1 ].

***     Check the Outbound PC Type
        case LS_PCDIM-PCTYP.
          when 'ZVCXI_P0_SHEET'.

***     Set correct # Ups based on having Grouping/Unitizing active
            if ME->IS_GRPUNIT_ADDON_ACTIVE( ).
              LF_PCUPS = LS_PCDIM-PCUPS.
            else.
              LF_PCUPS = 1.
            endif.

*** Do Calculation
***       1) Get Surface for one piece (requested in Square Meters)
            ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_PCDIM-PCLEN
                                                                IF_CALCV_UOM_1 = LS_PCDIM-PCLEN_UOM
                                                                IF_CALCV_2     = LS_PCDIM-PCWID
                                                                IF_CALCV_UOM_2 = LS_PCDIM-PCWID_UOM
                                                                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                                IF_UOM         = 'M2'
                                                      importing EF_CALCV       = LS_AREAO-CALCV
                                                                EF_CALCV_UOM   = LS_AREAO-CALCV_UOM ).

***       2) Calc total surface by machine qty out
            try.
                RS_MSURO-MSURO      = LS_AREAO-CALCV * LS_MQTYO-MQTYO * LF_PCUPS.
                RS_MSURO-MSURO_UOM  = LS_AREAO-CALCV_UOM.

              catch CX_SY_ARITHMETIC_OVERFLOW into LR_CX.
                /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX ).
            endtry.

***       Use Sold Blank Area per Piece
          when 'ZVCXI_P0_PRODUCT'.
            try.
                LS_SBLAR = ME->GET_SBLAR( ).
                RS_MSURO-MSURO      = LS_SBLAR-SBLAR * LS_MQTYO-MQTYO.
                RS_MSURO-MSURO_UOM  = LS_SBLAR-SBLAR_UOM.

              catch CX_SY_ARITHMETIC_OVERFLOW into LR_CX.
                /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX ).
            endtry.

* JBL 3/10/2022 OPHJVC-138 Arithmetic Overflow: Exclude calculations for Pallet HU
*        when 'HU'.
********************************************************************************
***       Use Sold Blank Area per Order
          when others.
            RS_MSURO = corresponding #( ME->GET_SBLARO( ) mapping MSURO     = SBLAR
                                                                  MSURO_UOM = SBLAR_UOM ).

        endcase.

      catch /VCXI/CX_CKX.
        clear RS_MSURO.
    endtry.

  endmethod.
  method GET_SBLAR.

    try.
        data(LR_PR_PTP) = cast YCL_HP_SVCP_PR_MACHINE_PTP( R_PR_MACHINE_PTP ).
        check LR_PR_PTP is bound.
        RS_SBLAR = LR_PR_PTP->GET_SBLAR( ).
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.

  endmethod.
  method GET_SBLARO.

    try.
        data(LR_PR_PTP) = cast YCL_HP_SVCP_PR_MACHINE_PTP( R_PR_MACHINE_PTP ).
        check LR_PR_PTP is bound.
        RS_SBLARO = LR_PR_PTP->GET_SBLARO( ).
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.

  endmethod.
  method IS_GRPUNIT_ADDON_ACTIVE.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

*** Start negative
    RF_ACTIVE = abap_false.

*** Get all addons
    LT_GATE = ME->R_GATE->GET_PRVDR( exporting IF_IPRVT = ZCL_VCXI_XCSP_PR_ADDON=>C_IPRVT_XCS_ADDON
                                                     IF_TPRVR = 'CHILD'
                                                     IF_INUSE = ABAP_TRUE ).

*** Find Unitizing Addons and return active flag
    loop at LT_GATE into LR_GATE.
      check LR_GATE->R_CLSPR is bound.
      try.
          cast ZCL_VCXI_P0SP_PR_ADDON_UNIT( LR_GATE->R_CLSPR ).
          RF_ACTIVE = ABAP_TRUE.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
