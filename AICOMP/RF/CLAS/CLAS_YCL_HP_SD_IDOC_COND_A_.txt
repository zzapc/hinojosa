
class YCL_HP_SD_IDOC_COND_A definition
  public
  create public .

public section.

  data S_T685 type T685 .
  data S_T685A type T685A .
  data S_T685T type T685T .

  methods CONSTRUCTOR
    importing
      !IF_KVEWE type KVEWE default 'A'
      !IF_KAPPL type KAPPL default 'V'
      !IF_KSCHL type KSCHL
      !IS_KOMG type E1KOMG
      !IF_DATAB type DATAB
      !IF_DATBI type DATBI
      !IT_KOMV type KOMV_TTY
      !IF_POSNR type POSNR
      !IT_XVBAP type TAB_XYVBAP
    raising
      /VCXI/CX_CKX .
  methods CREATE
    importing
      !IF_VBELN type VBELN optional
    returning
      value(RT_IDOC_STATUS) type T_IDOC_STATUS .
  class-methods GET_KOMG_A927
    importing
      !IS_VBAK type VBAK
      !IS_VBAP type VBAP
      !IT_XVBPA type TT_VBPAVB
      !IF_POSNR type POSNR
      !IT_XVBKD type TAB_XYVBKD
      !IF_KVEWE type KVEWE
      !IF_KOTABNR type KOTABNR
    returning
      value(RS_KOMG) type E1KOMG .
  PROTECTED SECTION.
private section.

  data F_DATAB type DATAB .
  data F_DATBI type DATBI .
  data F_KAPPL type KAPPL .
  data F_KSCHL type KSCHL .
  data F_KVEWE type KVEWE .
  data F_POSNR type POSNR .
  data S_KOMG type E1KOMG .
  data T_KOMV type KOMV_T .
  data T_XVBAP type TAB_XYVBAP .
  class-data C_CCOND type NUMC3 .

  methods PREPARE_HEADER
    returning
      value(RT_IDOC_CONTRL) type EDIDC_TT .
  methods PREPARE_KOMG
    changing
      !CT_IDOC_DATA type EDIDD_TT .
  methods PREPARE_KONH
    changing
      !CT_IDOC_DATA type EDIDD_TT .
  methods PREPARE_KONM
    importing
      !IF_VBELN type VBELN optional
    changing
      !CT_IDOC_DATA type EDIDD_TT .
  methods PREPARE_KONP
    changing
      !CT_IDOC_DATA type EDIDD_TT .
endclass. "YCL_HP_SD_IDOC_COND_A definition
class YCL_HP_SD_IDOC_COND_A implementation.
  METHOD constructor.

    DATA: lf_subrc TYPE i.

*** Load Interface Work Areas for Condition Mainenance to avoid issues regarding syncronization
    CALL FUNCTION 'COND_MNT_LOAD'.

*** Read Condtion Type
    CALL FUNCTION 'SD_COND_T685_SELECT'
      EXPORTING
        cts_error = space
        cts_kappl = if_kappl
        cts_kschl = if_kschl
        cts_kvewe = if_kvewe
      IMPORTING
        cts_subrc = lf_subrc
        cts_t685  = me->s_t685
        cts_t685a = me->s_t685a
*       CTS_T685B =
        cts_t685t = me->s_t685t.

    IF lf_subrc NE 0.
      /vcxi/cx_ckx=>raise_ckx_with_message( if_msgty = 'E'
                                            if_msgid = 'VK'
                                            if_msgno = '040'
                                            if_msgv1 = if_kschl ).
    ENDIF.

    IF if_kvewe IS SUPPLIED.
      me->f_kvewe = if_kvewe.
    ENDIF.
    IF if_kappl IS SUPPLIED.
      me->f_kappl = if_kappl.
    ENDIF.
    me->f_kschl = if_kschl.
    me->f_datab = if_datab.
    me->f_datbi = if_datbi.
    me->s_komg  = is_komg.
    me->t_komv  = it_komv.
    me->f_posnr = if_posnr.
    me->t_xvbap = it_xvbap.
    SORT me->t_xvbap BY kwmeng.

  ENDMETHOD.
  METHOD create.

    DATA:
      lv_input_method       TYPE bdwfap_par-inputmethd,
      lv_mass_processing    TYPE bdwfap_par-mass_proc,
      lt_idoc_contrl        TYPE STANDARD TABLE OF edidc,
      ls_idoc_contrl        TYPE edidc,
      lt_idoc_data          TYPE STANDARD TABLE OF edidd,
      lt_idoc_status        TYPE STANDARD TABLE OF bdidocstat,
      lt_return_variables   TYPE STANDARD TABLE OF bdwfretvar,
      lt_serialization_info TYPE STANDARD TABLE OF bdi_ser.
*    WAIT UP TO 20 SECONDS."JBL 02.03.2023
"JBL clean KONM to avoid duplicates for ZPRC condition
    DATA: ls_idoc_data TYPE edidd,
          ls_konm      TYPE e1konm,
          ls_konm2     TYPE konm,
          ls_konm3     TYPE e1konm,
          lv_tabix     TYPE i,
          lt_konm1     TYPE TABLE OF konm,
          lt_konm      TYPE TABLE OF konm.
    DATA ls_komv2 LIKE LINE OF me->t_komv.
    DATA ls_komv1 LIKE LINE OF me->t_komv.
    DATA lt_komv1 TYPE komv_t.
    DATA lt_komv2 TYPE komv_t.
data lv_tabix1 type i.
delete  me->t_komv where kinak is not initial.
delete  me->t_komv where zaehk = '00'.
*** IDOC HEADER
    lt_idoc_contrl = me->prepare_header( ).

*** KOMG
    me->prepare_komg( CHANGING ct_idoc_data = lt_idoc_data )." Table Type for EDIDD (IDoc Data Records)

*** KONH
    me->prepare_konh( CHANGING ct_idoc_data = lt_idoc_data )." Table Type for EDIDD (IDoc Data Records)

*** KONP
    me->prepare_konp( CHANGING ct_idoc_data = lt_idoc_data )." Table Type for EDIDD (IDoc Data Records)

*** KONM
    me->prepare_konm( EXPORTING if_vbeln = if_vbeln CHANGING ct_idoc_data = lt_idoc_data )." Table Type for EDIDD (IDoc Data Records)

**********************************************************************KONP


    CALL FUNCTION 'IDOC_INPUT_COND_A'
      EXPORTING
        input_method          = lv_input_method
        mass_processing       = lv_mass_processing
* IMPORTING
*       WORKFLOW_RESULT       =
*       APPLICATION_VARIABLE  =
*       IN_UPDATE_TASK        =
*       CALL_TRANSACTION_DONE =
      TABLES
        idoc_contrl           = lt_idoc_contrl
        idoc_data             = lt_idoc_data
        idoc_status           = lt_idoc_status
        return_variables      = lt_return_variables
        serialization_info    = lt_serialization_info
      EXCEPTIONS
        wrong_function_called = 1
        OTHERS                = 2.

    IF sy-subrc <> 0.
* Implement suitable error handling here
      APPEND INITIAL LINE TO lt_idoc_status ASSIGNING FIELD-SYMBOL(<fs_idoc_status>).
      <fs_idoc_status>-msgty = 'E'.
    ENDIF.

    rt_idoc_status = lt_idoc_status.

    IF 1 = 2.
      cl_demo_output=>new( )->write_data( lt_idoc_status
                           )->write_data( lt_return_variables
                           )->display( ).
    ENDIF.


  ENDMETHOD.
  METHOD get_komg_a927.
    DATA: ls_komg  TYPE komg,
          lf_vakey TYPE vakey.

*** Condition Table
    rs_komg-kotabnr    = '929'. "JBL 30.01.2023 OPHJVC-190 Change table 927 to 929
*** Sales Organization
    rs_komg-vkorg = is_vbak-vkorg.
*** Distr. Chnl.
    rs_komg-vtweg = is_vbak-vtweg.
*** Material
    rs_komg-matnr = is_vbap-matnr.
*** Incoterms
    TRY.
        rs_komg-inco1 = it_xvbkd[ posnr = if_posnr ]-inco1.
      CATCH cx_sy_itab_line_not_found.
        rs_komg-inco1 = it_xvbkd[ posnr = '' ]-inco1.
    ENDTRY.

    ls_komg = CORRESPONDING #( rs_komg ).

*** Get Partner - Ship-To
    "JBL 30.01.2023 OPHJVC-190 Change table 927 to 929
*   try.
*       LS_KOMG-KUNWE = IT_XVBPA[ POSNR = IF_POSNR
*                                 PARVW = 'WE' ]-KUNNR.
*     catch CX_SY_ITAB_LINE_NOT_FOUND.
*       LS_KOMG-KUNWE = IT_XVBPA[ POSNR = ''
*                                PARVW = 'WE' ]-KUNNR.
*   endtry.
    ls_komg-kunnr = is_vbak-kunnr.

*** Fill VAKEY According to KOMG Structure
    CALL FUNCTION 'SD_CONDITION_VAKEY_FILL'
      EXPORTING
        p_kotabnr = if_kotabnr
        p_kvewe   = if_kvewe
        p_komg    = ls_komg
      IMPORTING
        p_vakey   = lf_vakey.

    rs_komg-vakey = lf_vakey.

  ENDMETHOD.
  METHOD prepare_header.
    DATA: ls_idoc_contrl TYPE edidc.

    ls_idoc_contrl-mandt = sy-mandt.

    ls_idoc_contrl-doctyp = 'COND_A05'.              "IDOC type
    ls_idoc_contrl-mestyp = 'COND_A'.                " Message type
    ls_idoc_contrl-docrel = sy-saprl.                " edition

*    LS_IDOC_CONTRL-RCVPRT = 'LS'.                    " Receiver partner type
*    LS_IDOC_CONTRL-RCVPRN = SY-UNAME.                " Receiver partner number
*    LS_IDOC_CONTRL-RCVPOR = SY-SYSID && 'CLNT' && SY-MANDT.            " Receiver logic system
**
*    LS_IDOC_CONTRL-SNDPRT = 'LS'.                    " Sender partner type
*    LS_IDOC_CONTRL-SNDPRN = SY-UNAME.                " Sender partner number
*    LS_IDOC_CONTRL-SNDPOR = SY-SYSID && 'CLNT' && SY-MANDT. " Sender logic system

    APPEND ls_idoc_contrl TO rt_idoc_contrl.

  ENDMETHOD.
  METHOD prepare_komg.
    DATA: ls_idoc_data TYPE edidd.

    ls_idoc_data-segnum = '1'.                       " Hierarchy
    ls_idoc_data-hlevel = '1'.                       " Hierarchy
    ls_idoc_data-segnam = 'E1KOMG'.                  "KEY data

    DATA(ls_komg) = me->s_komg.
    ls_komg-kvewe = me->f_kvewe.
    ls_komg-kappl = me->f_kappl.
    ls_komg-kschl = me->f_kschl.

    ls_idoc_data-sdata = ls_komg.
    APPEND ls_idoc_data TO ct_idoc_data.

  ENDMETHOD.
  METHOD prepare_konh.
    DATA: ls_idoc_data TYPE edidd,
          ls_konh      TYPE e1konh.

    ls_idoc_data-segnum = '2'.                       " Hierarchy
    ls_idoc_data-hlevel = '2'.                       " Hierarchy
    ls_idoc_data-segnam = 'E1KONH'.                  "KONH

    ls_konh-knumh = '$000000001'.                    " establish
    ls_konh-datab = me->f_datab.                     " The validity period begins
    ls_konh-datbi = me->f_datbi.                     " End of validity

    ls_idoc_data-sdata = ls_konh.
    APPEND ls_idoc_data TO ct_idoc_data.

  ENDMETHOD.
  METHOD prepare_konm.
    DATA lv_contiene TYPE flag.
    DATA: ls_idoc_data TYPE edidd,
          ls_konm      TYPE e1konm,
          ls_konm2     TYPE konm,
          ls_konm3     TYPE e1konm,
          lv_tabix     TYPE i,
 lv_tabix1  TYPE i,
          lt_konm1     TYPE TABLE OF konm,
          lt_konm      TYPE TABLE OF konm.
    DATA ls_komv2 LIKE LINE OF me->t_komv.
    DATA ls_komv1 LIKE LINE OF me->t_komv.
    DATA lt_komv1 TYPE komv_t.
    DATA lt_komv7 TYPE komv_t.
    DATA lt_komv2 TYPE komv_t.
    DATA lt_komv3 TYPE komv_t.
    FIELD-SYMBOLS <fs_konm> TYPE konm.
data lt_vbap type TAB_XYVBAP.
data lv_knumv type knumv.
data lv_lines type i.
data lt_vbap_kn type table of vbap.
data lt_vbap_rl type table of vbap.
data lt_vbap_df type table of vbap.
data ls_vbap_kn type vbap.
data lt_vbak_kn type table of vbak.
data ls_vbak_kn type vbak.
data lv_vbeln type vbeln.
FIELD-SYMBOLS <fs_vbap> type vbap.

*******************************************************************
*Create komv for correct simulations. If the simulation contains only 1 line in xvbap, skip this method for that simulation
 LOOP AT me->t_komv INTO ls_komv1 WHERE kschl = me->f_kschl.
      APPEND ls_komv1 TO lt_komv2.
      APPEND ls_komv1 TO lt_komv3.
    ENDLOOP.
    CLEAR lv_tabix.

delete lt_komv2 where kinak is not initial.
*LT_KOMV2 must contain all the relevant lines for price conditions.
*LT_KOMV2 should have the same number of lines as  me->t_xvbap.
loop at me->t_xvbap into data(ls_vbap4) where vbeln = if_vbeln.
append ls_vbap4 to lt_vbap_rl.
endloop.

clear lv_lines.
describe table lt_vbap_rl lines lv_lines.
if lv_lines le 1.
Exit.
endif.
     loop at lt_vbap_rl assigning <fs_vbap>.
      read table lt_komv2 into ls_komv1 index sy-tabix.
     <fs_vbap>-netpr = ls_komv1-kbetr.
     endloop.
*Now we must assign the prices from komv to vbap
loop at lt_vbap_rl into data(ls_vbap2).
append ls_vbap2 to lt_vbap_df.
endloop.
*  LOOP AT me->t_xvbap INTO DATA(ls_xvbap)
*    WHERE posnr EQ me->f_posnr OR
*        ( uepos EQ me->f_posnr AND matnr CS '_MQ' )
*         and vbeln = ls_vbap1-vbeln.
*    lv_tabix = sy-tabix.
     loop at lt_vbap_df into data(ls_xvbap).
      TRY.


          CLEAR: ls_idoc_data, ls_konm.

          ls_idoc_data-segnum = '4'.                       " Hierarchy
          ls_idoc_data-hlevel = '4'.                       " Hierarchy
          ls_idoc_data-segnam = 'E1KONM'.                  " KONM

          ls_konm-kstbm = ls_xvbap-kwmeng.
*         READ TABLE lt_komv2 INTO ls_komv1 INDEX lv_tabix.
*        ls_konm-kbetr = ls_komv1-kbetr.
          ls_konm-kbetr = ls_xvbap-netpr.
          ls_idoc_data-sdata = ls_konm.
          APPEND ls_idoc_data TO ct_idoc_data.
        CATCH cx_sy_itab_line_not_found.
      ENDTRY.

    ENDLOOP.


  ENDMETHOD.
  METHOD prepare_konp.
    DATA: ls_idoc_data TYPE edidd,
          ls_konp      TYPE e1konp.

    ls_idoc_data-segnum = '3'.                       " Hierarchy
    ls_idoc_data-hlevel = '3'.                       " Hierarchy
    ls_idoc_data-segnam = 'E1KONP'.                  " KONP

    ls_konp-kschl = me->f_kschl.                     " Condition type

    DATA(ls_komv) = VALUE #( me->t_komv[ kposn = me->f_posnr
                                         kschl = me->f_kschl
                                         kinak = space ] OPTIONAL ).

    CHECK ls_komv IS NOT INITIAL.

    ls_konp-kbetr = ls_komv-kbetr.                   " Price
    ls_konp-krech = ls_komv-krech.                   " Condition calculation type
    ls_konp-stfkz = 'A'.
    ls_konp-kpein = ls_komv-kpein.                   " Condition pricing unit
    "LS_KONP-KMEIN = LS_KOMV-KMEIN.                   " Material unit , For example, the unit is PC, Here it is assigned as T006-MSEHI = 'ST'  To get ISOCODE, namely PCE
    CALL FUNCTION 'UNIT_OF_MEASURE_SAP_TO_ISO'
      EXPORTING
        sap_code    = ls_komv-kmein
      IMPORTING
        iso_code    = ls_konp-kmein
      EXCEPTIONS
        not_found   = 1
        no_iso_code = 2
        OTHERS      = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

    ls_konp-konwa = COND #( WHEN ls_komv-waers IS NOT INITIAL THEN ls_komv-waers
                                                              ELSE '%' ).  " currency

    ls_konp-kzbzg = COND #( WHEN ls_komv-kzbzg IS NOT INITIAL THEN ls_komv-kzbzg
                                                              ELSE 'C' ).   " quantity scale

    IF ls_komv-konms IS INITIAL.
      ls_komv-konms = 'ST'.
    ENDIF.

    "LS_KONP-KONMS = LS_KOMV-KONMS.
    CALL FUNCTION 'UNIT_OF_MEASURE_SAP_TO_ISO'
      EXPORTING
        sap_code    = ls_komv-konms
      IMPORTING
        iso_code    = ls_konp-konms
      EXCEPTIONS
        not_found   = 1
        no_iso_code = 2
        OTHERS      = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

    ls_konp-loevm_ko = ''.                          " To delete, just mark it , The values of other fields remain unchanged

    ls_idoc_data-sdata = ls_konp.

    ls_idoc_data-sdata = ls_konp.
    APPEND ls_idoc_data TO ct_idoc_data.

  ENDMETHOD.
