
class YCL_HP_SDP_ITEM_CNF definition
  public
  inheriting from YCL_RF_RQPTR_ITEM_CNF
  create public .

public section.

  methods CONSTRUCTOR
    importing
      value(IF_VBELN) type VBELN
      value(IF_POSNR) type POSNR
    raising
      /VCXI/CX_CKX .

  methods TRANSFER_TO_SVC
    redefinition .
  methods UPDATE_BY_SVC
    redefinition .
protected section.

  methods DESERIALIZE_CNFIDX
    redefinition .
  methods INIT_CNFIDX
    redefinition .
  methods SERIALIZE_CNFIDX
    redefinition .
  methods FILL_ITEM_CNF
    redefinition .
private section.
endclass. "YCL_HP_SDP_ITEM_CNF definition
class YCL_HP_SDP_ITEM_CNF implementation.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_VBELN = IF_VBELN
                        IF_POSNR = IF_POSNR ).

*** Set Key
    ME->F_INKEY_S_ITEM_CNF = 'YHP_SDP_S_ITEM_CNF'.

  endmethod.
  method DESERIALIZE_CNFIDX.

    RR_CNFIDX = YCL_HP_IDX=>DESERIALIZE( IF_XML = IF_XML ).

  endmethod.
  method FILL_ITEM_CNF.

    data: LS_ITEM_CNF type YHP_SDP_S_ITEM_CNF.
    data: LR_CNFIDX type ref to YCL_HP_IDX.

***----------------------------------------------------------------------------
*** Get IndexDB Instance
    LR_CNFIDX ?= ME->GET_CNFIDX( ).
    check LR_CNFIDX is bound.

*** Get Configuration from IndexDB
    LR_CNFIDX->GET_DATA(
      importing
        ET_SPEC_DB  =  data(LT_SPEC_DB)   " HP: IndexDB - Specification - DB
*        ET_LINK_DB  =     " HP: IndexDB - Component Link - DB
         ET_BOARD_DB = data(LT_BOARD_DB)    " HP: IndexDB - Board - DB
*        ET_PAPER_DB =     " HP: IndexDB - Paper - DB
*        ET_PRINT_DB =     " HP: IndexDB - Printing- DB
*        ET_INKS_DB  =     " HP: IndexDB - Inks - DB
*        ET_SCORE_DB =     " HP: IndexDB - Scores - DB
*        ET_SHIP_DB  =     " HP: IndexDB - Shipping and Unitizing - DB
*        ET_SHIPU_DB =     " HP: IndexDB - Shipping Units - DB
*        ET_RTE_DB   =     " HP: IndexDB - Routing - DB
*        ET_MATNR_DB =     " HP: Index DB - Material Number
    ).

*** Specification
    if LT_SPEC_DB is not initial.
      move-corresponding LT_SPEC_DB[ 1 ] to LS_ITEM_CNF.
    endif.

*** Board
    try.
        LS_ITEM_CNF-SABOA = LT_BOARD_DB[ CSELF = 1 MBOAR = 'S' ]-BOARD.
        LS_ITEM_CNF-SIDRP = LT_BOARD_DB[ CSELF = 1 MBOAR = 'S' ]-SIDRP.
      catch CX_SY_ITAB_LINE_NOT_FOUND.
    endtry.

    try.
        LS_ITEM_CNF-PRBOA = LT_BOARD_DB[ CSELF = 1 MBOAR = 'P' ]-BOARD.
        LS_ITEM_CNF-SIDRP = LT_BOARD_DB[ CSELF = 1 MBOAR = 'P' ]-SIDRP.
      catch CX_SY_ITAB_LINE_NOT_FOUND.
    endtry.

***----------------------------------------------------------------------------
*** Return Data Reference
    create data RR_ITEM_CNF like LS_ITEM_CNF.
    assign RR_ITEM_CNF->* to field-symbol(<S_ITEM_CNF>).
    move LS_ITEM_CNF to <S_ITEM_CNF>.

  endmethod.
  method INIT_CNFIDX.

    data: LS_VBAP type VBAP.

***----------------------------------------------------------------------------
*** Get VBAP
    LS_VBAP = YCL_RF_RQPTR_BOB_ITEM=>GET_INSTANCE( IF_VBELN = ME->F_VBELN
                                                   IF_POSNR = ME->F_POSNR )->GET_VBAP( ).

***----------------------------------------------------------------------------
*** Get IndexDB Instance (if configuration is not temporary)
    if LS_VBAP-CUOBJ(4) ne '9999' and
       LS_VBAP-CUOBJ(4) ne '8999' and
       YCL_RF_RQPTR_BOB_ITEM=>GET_INSTANCE( IF_VBELN = ME->F_VBELN
                                            IF_POSNR = ME->F_POSNR )->IS_VCPP( ).
      RR_CNFIDX = YCL_HP_IDX=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( LS_VBAP-CUOBJ ) ).
    endif.

  endmethod.
  method SERIALIZE_CNFIDX.

    try.
        check IR_CNFIDX is bound.
        RF_XML = cast YCL_HP_IDX( IR_CNFIDX )->SERIALIZE( ).

      catch CX_SY_MOVE_CAST_ERROR.
        clear RF_XML.
    endtry.

  endmethod.
  method TRANSFER_TO_SVC.


    data: LT_SVCEL type /VCXI/CKX_TT_OBJECT,
          LT_UPD   type YRF_RQPTS_TT_UPD,
          LT_XCONG TYPE ZVCXI_PXSS_TT_XCONG.
    data: LS_FDI_CORR type ZVCXI_P1SS_S_FDI_CORR,
          LS_FDI_CFG  type ZVCXI_P1SS_S_FDI_CFG.
    data: LR_EA_FASTD type ref to ZCL_VCXI_PXSS_EA_FASTD,
          LR_ITEM_CNF type ref to DATA,
          LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT.
    field-symbols: <S_ITEM_CNF> type YHP_SDP_S_ITEM_CNF,
                   <S_DATA>     type ANY.

***----------------------------------------------------------------------------
*** Get Updated Fields
    LT_UPD = YCL_RF_RQPTR_BOB_ITEM=>GET_INSTANCE( IF_VBELN = ME->F_VBELN
                                                  IF_POSNR = ME->F_POSNR )->GET_UPDATED_FIELDS( ).

    delete LT_UPD where TABNAM ne 'YHP_SDP_S_ITEM_CNF'.
    check LT_UPD is not initial.

*** Get Configuration Structure from Buffer
    LR_ITEM_CNF = ME->GET_ITEM_CNF( ).
    assign LR_ITEM_CNF->* to <S_ITEM_CNF>.

***----------------------------------------------------------------------------
*** Get Fast Data
    LT_SVCEL = IR_SVC->GET_SVC_ELEMENTS( IF_IEALI = 'UI_FASTD' ).
    check LT_SVCEL is not initial.

    LR_EA_FASTD ?= cast /VCXI/CL_VKSRA_SVC_ELEMENT( LT_SVCEL[ 1 ] )->GET_CLSEA( ).
    check LR_EA_FASTD is bound.

    data(LT_FDMDL) = LR_EA_FASTD->GET_FDMDL( ).

    read table LT_FDMDL into data(LR_API_FDMDL) index 1.
    check LR_API_FDMDL is bound.

*** Get Fast Data Structure
    data(LT_FDAPI_XCOMP) = LR_API_FDMDL->GET_STRC( importing ET_XCONG = LT_XCONG ).

*** Fill Fast Data Information Structures
    loop at LT_FDAPI_XCOMP assigning field-symbol(<S_FDAPI_XCOMP>).
*** Fill exsisting Elements
      loop at <S_FDAPI_XCOMP>-T_DATA assigning field-symbol(<S_FDAPI_XCOMP_DATA>).
        assign <S_FDAPI_XCOMP_DATA>-R_DATA->* to <S_DATA>.
        case <S_FDAPI_XCOMP_DATA>-ISELF.
          when 'CORR'.
            if LINE_EXISTS( LT_UPD[ FLDNAM = 'SABOA' ] ).
              LS_FDI_CORR = corresponding #( <S_DATA> ).
              LS_FDI_CORR-SABOA = <S_ITEM_CNF>-SABOA.
              move-corresponding LS_FDI_CORR to <S_DATA>.
            endif.
          when 'CFG'.
            if LINE_EXISTS( LT_UPD[ FLDNAM = 'PROLE' ] )
              or LINE_EXISTS( LT_UPD[ FLDNAM = 'PROWI' ] )
              or LINE_EXISTS( LT_UPD[ FLDNAM = 'PROHE' ] ).
              LS_FDI_CFG = corresponding #( <S_DATA> ).
              if LINE_EXISTS( LT_UPD[ FLDNAM = 'PROLE' ] ).
                LS_FDI_CFG-PROLE = <S_ITEM_CNF>-PROLE.
              endif.
              if LINE_EXISTS( LT_UPD[ FLDNAM = 'PROWI' ] ).
                LS_FDI_CFG-PROWI = <S_ITEM_CNF>-PROWI.
              endif.
              if LINE_EXISTS( LT_UPD[ FLDNAM = 'PROHE' ] ).
                LS_FDI_CFG-PROHE = <S_ITEM_CNF>-PROHE.
              endif.
              move-corresponding LS_FDI_CFG to <S_DATA>.
            endif.
        endcase.
      endloop.
    endloop.

*** Set Fast Data Structure
    LR_API_FDMDL->SET_STRC( EXPORTING IT_FDAPI_XCOMP = LT_FDAPI_XCOMP
                                      IT_XCONG       = LT_XCONG ).

  endmethod.
  method UPDATE_BY_SVC.

    data: LR_CNFIDX type ref to YCL_HP_IDX.

*** Update IndexDB for subsequent Update of Config Structure
    LR_CNFIDX ?= YCL_HP_IDX=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = conv /VCXI/CKX_GUID( IF_CUOBJ ) ).
    ME->SET_CNFIDX( IR_CNFIDX = LR_CNFIDX ).


*** Update Item Configuration Structure based on IndexDB
    SUPER->UPDATE_BY_SVC( IF_CUOBJ = IF_CUOBJ
                          IR_SVC   = IR_SVC ).

  endmethod.
