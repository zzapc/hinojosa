
class YCL_HP_SVCU_PR_PACKMAT definition
  public
  inheriting from ZCL_VCXI_XCSU_PR_PACKMAT
  final
  create public .

public section.

  methods CALL_SHLP_PMATN
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
protected section.

  methods CHECK_PALLRENTYP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    changing
      !CF_ELMST type /VCXI/VKSR_ELMST optional
    raising
      /VCXI/CX_CKX .
  methods CHECK_PMATN_PALLET
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    changing
      !CF_ELMST type /VCXI/VKSR_ELMST optional
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SVCU_PR_PACKMAT definition
class YCL_HP_SVCU_PR_PACKMAT implementation.
  method CALL_SHLP_PMATN.

    data: LF_PMATY   type ZVCXI_XCSU_PMATY,
          LF_WERKS   type WERKS_D,
          LF_LOCKED  type /VCXI/CKX_LOCKED,
          LF_DISPLAY type ABAP_BOOL,
          LF_ALL     type ABAP_BOOL,
          LF_VALMAT  type CHAR04.
    data: LS_ATTRI   type /VCXI/VKS_S_ATTRI.
*    data: LT_MATKL   type YHP_X_TT_MATKL.
    data: LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA.

***-------------------------------------------------------------------*
*** Get Attribute for Valid Material check
    LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_VALID_MATNR ).
    move LS_ATTRI-ATTVA to LF_VALMAT.

*** Get Packing Material Type first
    LF_PMATY = ME->GET_PMATY( ).

*** Special Processing for Pallet materials
    if LF_PMATY = YCL_HP_SVCU_SHLP_PMATN_PALLET=>C_PMATY_PALLET.

***   Get Plant and Ship-To
      try.
          LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
        catch CX_SY_MOVE_CAST_ERROR into data(LR_CX).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX ).
      endtry.
      LF_WERKS = ME->GET_WERKS( ).

***       Check if config is locked
      move IF_DISPLAY to LF_DISPLAY.
      LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
      if LF_LOCKED ne ABAP_TRUE.
        move ABAP_TRUE to LF_DISPLAY.
      endif.

***       Check Type of searchhelp
      if LF_VALMAT eq C_VALID_MATNR_C.
        LF_ALL = ABAP_FALSE.
      elseif LF_VALMAT eq C_VALID_MATNR_A.
        LF_ALL = ABAP_TRUE.
      endif.

      data(LS_KNVV_WE) = LR_APPDATA->S_KNVV_WE.

***--------------------------------------------------------------------------------------
*** Get Connection Out
      data(LT_GATE_SHIPMGR) = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                                     IF_INUSE = ABAP_TRUE ).
      read table LT_GATE_SHIPMGR into data(LR_GATE_SHIPMGR) index 1.
      if LR_GATE_SHIPMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Component (Parent element)
        data(LR_GATE_XCONO) = LR_GATE_SHIPMGR->GET_PARENT( ).

        if LR_GATE_XCONO is bound.
          try.
              data(LR_PR_XCONO) = cast ZCL_VCXI_PXSS_PR_XCONO( LR_GATE_XCONO->R_CLSPR ).
              if LR_PR_XCONO is bound.

                data(LF_KUNWE) = LR_PR_XCONO->GET_KUNWE( ).

                select single * from KNVV into @data(LS_KNVV)
                  where KUNNR eq @LF_KUNWE
                    and VKORG eq @LS_KNVV_WE-VKORG
                    and VTWEG eq @LS_KNVV_WE-VTWEG
                    and SPART eq @LS_KNVV_WE-SPART.
                if SY-SUBRC is initial.
                  move-corresponding LS_KNVV to LS_KNVV_WE.
                endif.

              endif.

            catch CX_SY_MOVE_CAST_ERROR.
          endtry.

        endif.
      endif.

***   Call Searchhelp
      RF_PMATN = YCL_HP_SVCU_SHLP_PMATN_PALLET=>CALL_SHLP_PALRENT( IS_KNVV_WE = LS_KNVV_WE
                                                                   IF_PMATY   = LF_PMATY
                                                                   IF_WERKS   = LF_WERKS
                                                                   IF_DISPLAY = LF_DISPLAY
                                                                   IF_ALL     = LF_ALL ).

*** Call super for all other Packaging Material Types
    else.
      RF_PMATN = SUPER->CALL_SHLP_PMATN( IF_DISPLAY = IF_DISPLAY ).

    endif.

  endmethod.
  method CHECK_PALLRENTYP.

    data: LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA,
          LS_KNVV_WA type KNVV.
    data: LV_PALLRENT type YHP_E_PALRENTYP.
    data: LF_PMATN  type MATNR.


    try.
        LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
      catch CX_SY_MOVE_CAST_ERROR into data(LR_CX).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX ).
    endtry.

    check LR_APPDATA is bound.

    LS_KNVV_WA = LR_APPDATA->S_KNVV_WE.

    LF_PMATN = ME->GET_PMATN( ).
    call function 'CONVERSION_EXIT_ALPHA_OUTPUT'
      exporting
        INPUT         = LF_PMATN
     IMPORTING
       OUTPUT        = LF_PMATN.


    LV_PALLRENT = LF_PMATN.
    select single KUNNR from KNVV into @data(LV_SINGLE) where
                                   ( KUNNR = @LS_KNVV_WA-KUNNR and ZZCODIGO_CHEP = @LV_PALLRENT )
                                or ( KUNNR = @LS_KNVV_WA-KUNNR and ZZCODIGO_LPR = @LV_PALLRENT )
                                or ( KUNNR = @LS_KNVV_WA-KUNNR and ZZCODIGO_LOGIFRUIT = @LV_PALLRENT )
                                or ( KUNNR = @LS_KNVV_WA-KUNNR and ZZCODIGO_CONTRALOAD = @LV_PALLRENT ).
    if SY-SUBRC ne 0.
      CF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.

      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'YHP_SVC'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '028'
                                 IF_MSGV1 = LF_PMATN
                                 IF_MSGV2 = LS_KNVV_WA-KUNNR ).
      endif.
    else.
      CF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
    endif.

  endmethod.
  method CHECK_PMATN_PALLET.

    data: LF_PMATY  type ZVCXI_XCSU_PMATY,
          LF_WERKS  type WERKS_D,
          LF_VALMAT type CHAR04,
          LF_PMATN  type MATNR,
          LF_KUNWE  type KUNWE.
    data: LS_ATTRI   type /VCXI/VKS_S_ATTRI.
    data: LT_PMATN   type ZVCXI_XCSU_TT_PMATN.
    data: LR_APPDATA type ref to ZCL_VCXI_XCS_APPDATA.

***-------------------------------------------------------------------*
*** Get Attribute for Valid Material check
    LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_VALID_MATNR ).
    move LS_ATTRI-ATTVA to LF_VALMAT.

***   Only Process Pallet Packaging Material Type
    LF_PMATY = ME->GET_PMATY( ).
    check LF_PMATY eq YCL_HP_SVCU_SHLP_PMATN_PALLET=>C_PMATY_PALLET.

    if LF_VALMAT eq C_VALID_MATNR_C.
***   Get Plant and Ship-To
      try.
          LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
        catch CX_SY_MOVE_CAST_ERROR into data(LR_CX).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX ).
      endtry.

      LF_KUNWE =  LR_APPDATA->S_KNVV_WE-KUNNR.
      LF_WERKS = ME->GET_WERKS( ).

      data(LS_KNVV_WE) = LR_APPDATA->S_KNVV_WE.

***--------------------------------------------------------------------------------------
*** Get Connection Out
      data(LT_GATE_SHIPMGR) = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                                     IF_INUSE = ABAP_TRUE ).
      read table LT_GATE_SHIPMGR into data(LR_GATE_SHIPMGR) index 1.
      if LR_GATE_SHIPMGR is bound.

***--------------------------------------------------------------------------------------
*** Get Component (Parent element)
        data(LR_GATE_XCONO) = LR_GATE_SHIPMGR->GET_PARENT( ).

        if LR_GATE_XCONO is bound.
          try.
              data(LR_PR_XCONO) = cast ZCL_VCXI_PXSS_PR_XCONO( LR_GATE_XCONO->R_CLSPR ).
              if LR_PR_XCONO is bound.

                LF_KUNWE = LR_PR_XCONO->GET_KUNWE( ).

                select single * from KNVV into @data(LS_KNVV)
                  where KUNNR eq @LF_KUNWE
                    and VKORG eq @LS_KNVV_WE-VKORG
                    and VTWEG eq @LS_KNVV_WE-VTWEG
                    and SPART eq @LS_KNVV_WE-SPART.
                if SY-SUBRC is initial.
                  move-corresponding LS_KNVV to LS_KNVV_WE.
                endif.

              endif.

            catch CX_SY_MOVE_CAST_ERROR.
          endtry.

        endif.
      endif.

***   Get list of valid materials
      LT_PMATN = YCL_HP_SVCU_SHLP_PMATN_PALLET=>GET_VALID_PMATN_PALLET( exporting IS_KNVV_WE   = LS_KNVV_WE
                                                                                  IF_WERKS     = LF_WERKS
                                                                                  IF_PMATY     = LF_PMATY ).

***   Check if current packaging material is in the list of valid materials
      LF_PMATN = ME->GET_PMATN( ).
      check LF_PMATN is not initial.
      if LINE_EXISTS( LT_PMATN[ PMATN = LF_PMATN ] ).
        CF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = CF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).

***     Pallet Material &1 is valid for Ship-To &2.
        if IR_MESSAGE is bound.
          message S001(YHP_SVCU) with LF_PMATN |{ LF_KUNWE alpha = out }| into data(LF_MSG).
          IR_MESSAGE->ADD_MESSAGE_BY_SY( ).
        endif.

      else.
        CF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = CF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).

***     Pallet Material &1 is not valid for Ship-To &2.
        if IR_MESSAGE is bound.
          message E002(YHP_SVCU) with LF_PMATN |{ LF_KUNWE alpha = out }| into LF_MSG.
          IR_MESSAGE->ADD_MESSAGE_BY_SY( ).
        endif.
      endif.

    else.
***   Pallet Material validation against customizing was ignored.
      CF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = CF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).

      if IR_MESSAGE is bound.
        message W003(YHP_SVCU) into LF_MSG.
        IR_MESSAGE->ADD_MESSAGE_BY_SY( ).
      endif.
    endif.

  endmethod.
  method GET_STATUS.

*** Call super
    RF_ELMST = SUPER->GET_STATUS( ).

*** Check if Packaging Material (Pallet) is allowed
    ME->CHECK_PMATN_PALLET( changing CF_ELMST = RF_ELMST ).
**** Check if material is match with pallets
*    ME->CHECK_PALLRENTYP( changing CF_ELMST = RF_ELMST ).

  endmethod.
  method GET_STATUS_MSG.

*** Call super
    SUPER->GET_STATUS_MSG( exporting IR_MESSAGE = IR_MESSAGE ).

*** Check if Packaging Material (Pallet) is allowed
    ME->CHECK_PMATN_PALLET( exporting IR_MESSAGE = IR_MESSAGE ).

*** check packing pallet
*    ME->CHECK_PALLRENTYP( exporting IR_MESSAGE = IR_MESSAGE ).

  endmethod.
