
class YCL_HP_SMD_AIS_SRV definition
  public
  final
  create public .

public section.

  types:
    begin of YS_CMPRK_SPVPA,
             S_CMPRK type /VCXI/VKC_S_CMPRK,
             T_SPVPA type YHP_SMD_AIS_TT_QUOT_SPARAM.
    types end of YS_CMPRK_SPVPA .
  types:
    YT_CMPRK_SPVPA type table of YS_CMPRK_SPVPA .

  class-data T_TC01 type YHP_SMD_AIS_TT_TC01 read-only .
  class-data F_STATUS type CHAR1 .
  class-data T_CMPRK_SPVPA type YT_CMPRK_SPVPA .

  class-methods GET_CUELMNT
    importing
      !IR_CUPRFL type ref to /VCXI/CL_VKSC_CUPRFL
      !IF_ID type /VCXI/CKX_ID optional
      !IF_IEALI type /VCXI/VKSC_IEALI optional
    returning
      value(RR_CUELMNT) type ref to /VCXI/CL_VKSC_CUELMNT .
  class-methods CLASS_CONSTRUCTOR .
  class-methods GET_CMPRK
    changing
      !CT_WRKLI type YHP_SMD_AIS_TT_QUOT_WRKLI
    raising
      /VCXI/CX_CKX .
  class-methods CONVERT_DATA_TO_SVCEL
    importing
      !IR_CSV type ref to YCL_HP_SMD_AIS_CSV
      !IF_FCALC type YHP_SMD_FCALC default ABAP_FALSE
    changing
      !CT_WRKLI type YHP_SMD_AIS_TT_QUOT_WRKLI
    exceptions
      /VCXI/CX_CKX .
  class-methods CREATE_IDAT
    importing
      !IF_FSIDA type ZVCXI_XCI_FSIDA default ABAP_FALSE
    changing
      !CS_WRKLI type YHP_SMD_AIS_S_QUOT_WRKLI
    raising
      /VCXI/CX_CKX .
  class-methods CREATE_IDAT_ALL
    changing
      !CT_WRKLI type YHP_SMD_AIS_TT_QUOT_WRKLI
    raising
      /VCXI/CX_CKX .
  class-methods GET_CMPRK_SPVPA
    importing
      !IS_CMPRK type /VCXI/VKC_S_CMPRK
    returning
      value(RT_SPVPA) type YHP_SMD_AIS_TT_QUOT_SPARAM
    raising
      /VCXI/CX_CKX .
  class-methods CREATE_SDOC
    exporting
      value(ET_VBAPKEY) type YRF_RQPT_TT_VBAPKEY
    changing
      !CT_WRKLI type YHP_SMD_AIS_TT_QUOT_WRKLI
    returning
      value(RF_VBELN) type VBELN_VA
    raising
      /VCXI/CX_CKX .
  class-methods HANDLE_UPDATE_COMPLETE
    for event UPDATE_COMPLETE of YCL_RF_RQPTR_PR_MAIN
    importing
      !IT_VBAPKEY
      !SENDER .
protected section.
private section.

  class-methods _ADD_SVCEV
    changing
      !CS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  class-methods _GET_EVENTS
    raising
      /VCXI/CX_CKX .
  class-methods _VALIDATE_SVCEL
    changing
      !CT_SVCEL type ZVCXI_XCI_TT_SVCEL
    raising
      /VCXI/CX_CKX .
  class-methods _VALIDATE_CHILDREN
    importing
      !IS_SVCEL type ZVCXI_XCI_S_SVCEL
      !IT_SVCEL type ZVCXI_XCI_TT_SVCEL
    exporting
      !EF_NODATA type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods _CONVERT_SVCEL_DATA_DIMEN
    importing
      !IF_VALUE type STRING
    returning
      value(RF_VALUE) type STRING
    raising
      /VCXI/CX_CKX .
  class-methods _CONVERT_SVCEL_DATA_LIMIT
    importing
      !IF_VALUE type STRING
    returning
      value(RF_VALUE) type STRING
    raising
      /VCXI/CX_CKX .
  class-methods _FILTER_SVCEL
    changing
      !CT_SVCEL type ZVCXI_XCI_TT_SVCEL
    raising
      /VCXI/CX_CKX .
  class-methods _FILL_SDOC
    exporting
      !ER_IDAT_SDOC type ref to YCL_HP_SMD_AIS_IDAT_SDOC
    changing
      !CT_WRKLI type YHP_SMD_AIS_TT_QUOT_WRKLI
    raising
      /VCXI/CX_CKX .
  class-methods _GET_WAERS
    importing
      !IF_WERKS type WERKS_D
    returning
      value(RF_WAERS) type WAERS
    raising
      /VCXI/CX_CKX .
endclass. "YCL_HP_SMD_AIS_SRV definition
class YCL_HP_SMD_AIS_SRV implementation.
  method _ADD_SVCEV.
  endmethod.
  method _CONVERT_SVCEL_DATA_DIMEN.

    data: LF_CHAR  type          CHAR30,
          LF_FLOAT type          F.
    data: LT_VALUE type table of STRING,
          LT_DATA  type table of STRING,
          LT_DIMEN type          ZVCXI_XCSU_TT_DIMEN.
    field-symbols: <LF_VALUE> type          STRING,
                   <LF_DATA>  type          STRING.
    field-symbols: <LS_DIMEN> type          ZVCXI_XCSU_S_DIMEN.

*** Split String to Dimension
    split IF_VALUE at SPACE into table LT_VALUE.

    loop at LT_VALUE assigning <LF_VALUE>.

*** Split Dimension to Data
      split <LF_VALUE> at '-' into table LT_DATA.
      append initial line to LT_DIMEN assigning <LS_DIMEN>.

      loop at LT_DATA assigning <LF_DATA>.

***   Add values to Dimension by sequence
        case SY-TABIX.
          when 1.
            <LS_DIMEN>-DIMEN      = <LF_DATA>.
          when 2.

            clear: LF_CHAR,
                   LF_FLOAT.

            LF_CHAR = <LF_DATA>.

***       Convert String to Number
            call function 'C14W_CHAR_NUMBER_CONVERSION'
              exporting
                I_STRING                   = LF_CHAR
              importing
                E_FLOAT                    = LF_FLOAT
              exceptions
                WRONG_CHARACTERS           = 1
                FIRST_CHARACTER_WRONG      = 2
                ARITHMETIC_SIGN            = 3
                MULTIPLE_DECIMAL_SEPARATOR = 4
                THOUSANDSEP_IN_DECIMAL     = 5
                THOUSAND_SEPARATOR         = 6
                NUMBER_TOO_BIG             = 7
                others                     = 8.
            if SY-SUBRC is initial.

              <LS_DIMEN>-DIMVA = LF_FLOAT.

            endif.

          when 3.
            <LS_DIMEN>-DIMVA_UOM  = <LF_DATA>.
        endcase.
      endloop.
    endloop.

    delete LT_DIMEN where DIMEN     is initial
                       or DIMVA_UOM is initial.

*** Return Values as XML
    call transformation ID
         source TABLE =  LT_DIMEN
         result xml RF_VALUE.

  endmethod.
  method _CONVERT_SVCEL_DATA_LIMIT.

    data: LF_CHAR  type          CHAR30,
          LF_FLOAT type          F.
    data: LT_VALUE type table of STRING,
          LT_DATA  type table of STRING,
          LT_LIMIT type          ZVCXI_XCSU_TT_LIMIT.
    field-symbols: <LF_VALUE> type          STRING,
                   <LF_DATA>  type          STRING.
    field-symbols: <LS_LIMIT> type          ZVCXI_XCSU_S_LIMIT.

*** Split String to Dimension
    split IF_VALUE at SPACE into table LT_VALUE.

    loop at LT_VALUE assigning <LF_VALUE>.

*** Split Limit to Data
      split <LF_VALUE> at '-' into table LT_DATA.
      append initial line to LT_LIMIT assigning <LS_LIMIT>.

      loop at LT_DATA assigning <LF_DATA>.

***   Add values to Limit by sequence
        case SY-TABIX.
          when 1.
            <LS_LIMIT>-LIMIT      = <LF_DATA>.
          when 2.
            <LS_LIMIT>-DIMEN      = <LF_DATA>.
          when 3.

            clear: LF_CHAR,
                   LF_FLOAT.

            LF_CHAR = <LF_DATA>.

***       Convert String to Number
            call function 'C14W_CHAR_NUMBER_CONVERSION'
              exporting
                I_STRING                   = LF_CHAR
              importing
                E_FLOAT                    = LF_FLOAT
              exceptions
                WRONG_CHARACTERS           = 1
                FIRST_CHARACTER_WRONG      = 2
                ARITHMETIC_SIGN            = 3
                MULTIPLE_DECIMAL_SEPARATOR = 4
                THOUSANDSEP_IN_DECIMAL     = 5
                THOUSAND_SEPARATOR         = 6
                NUMBER_TOO_BIG             = 7
                others                     = 8.
            if SY-SUBRC is initial.

              <LS_LIMIT>-DIMVA = LF_FLOAT.

            endif.

          when 4.
            <LS_LIMIT>-DIMVA_UOM  = <LF_DATA>.
        endcase.
      endloop.
    endloop.

    delete LT_LIMIT where LIMIT     is initial
                       or DIMEN     is initial
                       or DIMVA_UOM is initial.

*** Return Values as XML
    call transformation ID
         source TABLE =  LT_LIMIT
         result xml RF_VALUE.

  endmethod.
method _FILL_SDOC.

  data: LF_NIDAT_SVC type ZVCXI_XCI_NIDAT,
        LF_POSNR     type POSNR_VA.

  data: LS_SDOCIN type ZVCXI_XCI_S_SDOCIN.

  data: LR_IDAT_SDOC type ref to YCL_HP_SMD_AIS_IDAT_SDOC,
        LR_CX_CKX    type ref to /VCXI/CX_CKX.

  field-symbols: <S_WRKLI> type YHP_SMD_AIS_S_QUOT_WRKLI.

  try.

      loop at CT_WRKLI assigning <S_WRKLI>.

        if SY-TABIX eq 1.

***       Create IDAT SD Document
          LR_IDAT_SDOC = YCL_HP_SMD_AIS_IDAT_SDOC=>CREATE( IF_AUART = <S_WRKLI>-AUART
                                                           IF_VKORG = <S_WRKLI>-VKORG
                                                           IF_VTWEG = <S_WRKLI>-VTWEG
                                                           IF_SPART = <S_WRKLI>-SPART ).
          LR_IDAT_SDOC->SET_DATES( IF_PRSDT = <S_WRKLI>-PRSDT
                                   IF_BNDDT = <S_WRKLI>-BNDDT ).


        endif.

        if <S_WRKLI>-R_IDAT_SVC is initial.
          raise exception type /VCXI/CX_CKX.
        endif.

***     Get current GUID (Temporary one)
        LF_NIDAT_SVC = <S_WRKLI>-R_IDAT_SVC->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

        check LR_IDAT_SDOC is bound.

***     Set Partner
        LR_IDAT_SDOC->SET_SDOCPA( IF_PARVW = 'AG'
                                  IF_KUNNR = <S_WRKLI>-KUNAG ).
        if <S_WRKLI>-KUNWE is not initial.
          LR_IDAT_SDOC->SET_SDOCPA( IF_PARVW = 'WE'
                                    IF_KUNNR = <S_WRKLI>-KUNWE ).
        endif.

***     Set Info
        clear LS_SDOCIN.
        move <S_WRKLI>-GROUPING to LS_SDOCIN-BSTKD.

        LR_IDAT_SDOC->SET_SDOCIN( IS_SDOCIN = LS_SDOCIN ).

***     Set Items
        LF_POSNR = <S_WRKLI>-POSNR.
        LR_IDAT_SDOC->SET_SDOCIT( IF_POSNR     = LF_POSNR
                                  IF_MATNR     = <S_WRKLI>-RMATN
                                  IF_WERKS     = <S_WRKLI>-WERKS
                                  IF_KWMENG    = <S_WRKLI>-KWMENG
                                  IF_VRKME     = 'ST'
                                  IF_BSTKD     = <S_WRKLI>-LEGMA
                                  IF_NIDAT_SVC = LF_NIDAT_SVC ).

        move LF_POSNR to <S_WRKLI>-POSNR_NEW.

***     Set Conditions
        if <S_WRKLI>-PR00 is not initial.
          LR_IDAT_SDOC->SET_COND( IF_POSNR = LF_POSNR
                                  IF_KSCHL = 'ZPRC'
                                  IF_KBETR = <S_WRKLI>-PR00
                                  IF_KONWA = <S_WRKLI>-WAERK ).
        endif.
        if <S_WRKLI>-ZR01 is not initial.
          LR_IDAT_SDOC->SET_COND( IF_POSNR = LF_POSNR
                                  IF_KSCHL = 'ZR01'
                                  IF_KBETR = <S_WRKLI>-ZR01
                                  IF_KONWA = <S_WRKLI>-WAERK ).
        endif.

      endloop.

      ER_IDAT_SDOC = LR_IDAT_SDOC.

***----------------------------------------------------------------------------
    catch /VCXI/CX_CKX into LR_CX_CKX.
      "error?
  endtry.

endmethod.
method _FILTER_SVCEL.

  data: LF_FILTERED type ABAP_BOOL.
  data: LS_SVCEL    type ZVCXI_XCI_S_SVCEL.

  do.

    clear LF_FILTERED.

*** Process all Elements
    loop at CT_SVCEL into LS_SVCEL.

***   Find Children
      read table CT_SVCEL with key IPARE = LS_SVCEL-ISELF
                                   CPARE = LS_SVCEL-CSELF
                          transporting no fields.
      check SY-SUBRC ne 0.

***   Check Leading Object Key not defined
      check LS_SVCEL-SETBY is initial.

***   Check Parameter are not defined
      read table LS_SVCEL-T_SVCPA transporting no fields
                                  with key SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      check SY-SUBRC ne 0.

      read table LS_SVCEL-T_SVCPA transporting no fields
                                  with key SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      check SY-SUBRC ne 0.

***   Filter
      delete CT_SVCEL.
      move ABAP_TRUE to LF_FILTERED.
    endloop.

*** Nothing was filtered
    if LF_FILTERED ne ABAP_TRUE.
      exit.
    endif.

  enddo.

endmethod.
  method _GET_EVENTS.

*** Get Events
    select *
      into table T_TC01
      from YHP_SMD_AIS_TC01.                            "#EC CI_NOWHERE

  endmethod.
  method _GET_WAERS.

    data: LF_BUKRS type BUKRS.

*** Get the Company Code
    call function 'CO_RM_COMPANYCODE_FIND'
      exporting
        WERKS    = IF_WERKS
      importing
        COMPCODE = LF_BUKRS
      exceptions
        NO_ENTRY = 1
        others   = 2.
    if SY-SUBRC ne 0.
      return.
    endif.

*** Get Currency
    select single WAERS
      into RF_WAERS
      from T001
     where BUKRS eq LF_BUKRS.

  endmethod.
method _VALIDATE_CHILDREN.

  field-symbols: <S_SVCEL> type ZVCXI_XCI_S_SVCEL.

  clear EF_NODATA.

*** Check for child with valid data
  loop at IT_SVCEL assigning <S_SVCEL> where IPARE     eq IS_SVCEL-ISELF
                                         and CPARE     eq IS_SVCEL-CSELF
                                         and ( LEOKY   is not initial
                                          or   T_SVCPA is not initial ).
    exit.
  endloop.
  if SY-SUBRC ne 0.

*** Check for empty children
    loop at IT_SVCEL assigning <S_SVCEL> where IPARE   eq IS_SVCEL-ISELF
                                           and CPARE   eq IS_SVCEL-CSELF
                                           and LEOKY   is initial
                                           and T_SVCPA is initial.
      _VALIDATE_CHILDREN( exporting IS_SVCEL  = <S_SVCEL>
                                    IT_SVCEL  = IT_SVCEL
                          importing EF_NODATA = EF_NODATA ).
      if EF_NODATA = ABAP_FALSE.
        exit.
      endif.
    endloop.

*** No child node
    if SY-SUBRC ne 0.
      EF_NODATA = ABAP_TRUE.
    endif.

  endif.

endmethod.
method _VALIDATE_SVCEL.

  data: LF_NODATA type ABAP_BOOL.

  field-symbols: <S_SVCEL> type ZVCXI_XCI_S_SVCEL.

  loop at CT_SVCEL assigning <S_SVCEL> where LEOKY   is initial
                                         and T_SVCPA is initial.
    _VALIDATE_CHILDREN( exporting IS_SVCEL  = <S_SVCEL>
                                  IT_SVCEL  = CT_SVCEL
                        importing EF_NODATA = LF_NODATA ).
    if LF_NODATA = ABAP_TRUE.
      clear <S_SVCEL>-ISELF.
    endif.
    clear: LF_NODATA.
  endloop.

  delete CT_SVCEL where ISELF is initial.

endmethod.
  method CLASS_CONSTRUCTOR.

***  Get Events
    _GET_EVENTS( ).

  endmethod.
  method CONVERT_DATA_TO_SVCEL.

    data: LF_ISETBY type I,
          LF_IVALUE type I,
          LF_SETBY  type /VCXI/VKSR_SETBY,
          LF_DATA   type /VCXI/CKX_STRING,
          LF_GUID   type /VCXI/CKX_GUID,
          LF_ATWRT  type ATWRT,
          LF_VALUEC type CHAR1024.
    data: LS_TABFIELD type TABFIELD.
    data: LT_DATA type /VCXI/CKX_TT_STRING.
    data: LR_PARAM type ref to /VCXI/CL_VKSC_PARAM.

    field-symbols: <S_TD01>  type YHP_SMD_AIS_TD01,
                   <S_WRKLI> type YHP_SMD_AIS_S_QUOT_WRKLI,
                   <S_SVCEL> type ZVCXI_XCI_S_SVCEL,
                   <S_SVCPA> type ZVCXI_XCI_S_SVCPA.

***-------------------------------------------------------------------*
*** Clear Data
    loop at CT_WRKLI assigning <S_WRKLI>.
      clear <S_WRKLI>-S_IDAT-T_SVCEL.
    endloop.

*** Process Configuration Relevant Lines
   loop at IR_CSV->T_TD01 assigning <S_TD01> where PARENTID    is not initial
                                                  or PARENTPOSID is not initial
                                                  or CHILDID     is not initial
                                                  or CHILDPOSID  is not initial.

      split <S_TD01>-LITXT at IR_CSV->F_DELIM into table LT_DATA.

*** Get Selected Quotations
      loop at CT_WRKLI assigning <S_WRKLI>.

***   Determine Index from CSV
        read table IR_CSV->T_QUOT with key GROUPING = <S_WRKLI>-GROUPING
                                              POSNR    = <S_WRKLI>-POSNR
                                              transporting no fields.
        if SY-SUBRC ne 0.
          continue.
        endif.

        LF_ISETBY = SY-TABIX  * 2 - 1.
        LF_IVALUE = LF_ISETBY + 1.

***   Get SetBy
        clear: LF_DATA, LF_SETBY.
        read table LT_DATA into LF_DATA index LF_ISETBY.
        if LF_DATA is not initial.
          case LF_DATA+0(1).
            when 'C'.
              move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
            when 'U'.
              move /VCXI/CL_VKSR_GATE=>C_SETBY_USER to LF_SETBY.
            when 'F'.
              move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
            when 'X'.
              move /VCXI/CL_VKSR_GATE=>C_SETBY_USER to LF_SETBY.
            when others.
              clear LF_SETBY.
          endcase.
          clear LF_DATA.
        endif.

***   Get Parameter Value
        clear LF_DATA.
        read table LT_DATA into LF_DATA index LF_IVALUE.

***   Add SVCEL if New Key
        read table <S_WRKLI>-S_IDAT-T_SVCEL assigning <S_SVCEL> with key IPARE = <S_TD01>-PARENTID
                                                                         CPARE = <S_TD01>-PARENTPOSID
                                                                         ISELF = <S_TD01>-CHILDID
                                                                         CSELF = <S_TD01>-CHILDPOSID.
        if SY-SUBRC ne 0.
          append initial line to <S_WRKLI>-S_IDAT-T_SVCEL assigning <S_SVCEL>.
          <S_SVCEL>-IPARE = <S_TD01>-PARENTID.
          <S_SVCEL>-CPARE = <S_TD01>-PARENTPOSID.
          <S_SVCEL>-ISELF = <S_TD01>-CHILDID.
          <S_SVCEL>-CSELF = <S_TD01>-CHILDPOSID.
          <S_SVCEL>-POSID = <S_TD01>-CHILDPOSID.
        endif.

***   Check if SetBy CALC are to be included
        if IF_FCALC is initial.
          check LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
                LF_SETBY is initial.
        endif.

***   Fill in SetBy and Parameter Value
        if <S_TD01>-PARID eq 'LEOKY'.

          move LF_DATA  to <S_SVCEL>-LEOKY.
          move LF_SETBY to <S_SVCEL>-SETBY.

        else.

          case <S_TD01>-PARTY.

            when 'CHAR'.
              move LF_DATA to LF_ATWRT.

              if LF_ATWRT is initial or
                 LF_ATWRT eq SPACE.
                continue.
              endif.

              append initial line to <S_SVCEL>-T_SVCPA assigning <S_SVCPA>.
              move <S_TD01>-PARID to <S_SVCPA>-PARID.
              move LF_SETBY       to <S_SVCPA>-SETBY.
              move LF_ATWRT       to <S_SVCPA>-ATWRT.

              clear LF_ATWRT.

            when 'NUMC'.

              append initial line to <S_SVCEL>-T_SVCPA assigning <S_SVCPA>.
              move <S_TD01>-PARID to <S_SVCPA>-PARID.
              move LF_SETBY       to <S_SVCPA>-SETBY.

              LS_TABFIELD-TABNAME   = 'ZVCXI_XCI_S_SVCPA'.
              LS_TABFIELD-FIELDNAME = 'ATFLV'.
              LF_VALUEC             = LF_DATA.

              call function 'RS_CONV_EX_2_IN'
                exporting
                  INPUT_EXTERNAL               = LF_VALUEC
                  TABLE_FIELD                  = LS_TABFIELD
                importing
                  OUTPUT_INTERNAL              = <S_SVCPA>-ATFLV
                exceptions
                  INPUT_NOT_NUMERICAL          = 1
                  TOO_MANY_DECIMALS            = 2
                  MORE_THAN_ONE_SIGN           = 3
                  ILL_THOUSAND_SEPARATOR_DIST  = 4
                  TOO_MANY_DIGITS              = 5
                  SIGN_FOR_UNSIGNED            = 6
                  TOO_LARGE                    = 7
                  TOO_SMALL                    = 8
                  INVALID_DATE_FORMAT          = 9
                  INVALID_DATE                 = 10
                  INVALID_TIME_FORMAT          = 11
                  INVALID_TIME                 = 12
                  INVALID_HEX_DIGIT            = 13
                  UNEXPECTED_ERROR             = 14
                  INVALID_FIELDNAME            = 15
                  FIELD_AND_DESCR_INCOMPATIBLE = 16
                  INPUT_TOO_LONG               = 17
                  NO_DECIMALS                  = 18
                  INVALID_FLOAT                = 19
                  CONVERSION_EXIT_ERROR        = 20
                  others                       = 21.
              if SY-SUBRC ne 0.
                /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
              endif.

***         Add Unit
              move <S_SVCPA>-PARID to LF_GUID.
              LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

              if LR_PARAM->F_TUORC eq /VCXI/CL_VKSC_PARAM=>C_TUORC_U.
                if <S_SVCPA>-UNIT is initial.
                  move LR_PARAM->F_UOMKY_M to <S_SVCPA>-UNIT.
                endif.

***         Add currency
              elseif LR_PARAM->F_TUORC eq /VCXI/CL_VKSC_PARAM=>C_TUORC_C.
                if <S_SVCPA>-CURKY is initial.
                  move _GET_WAERS( IF_WERKS = <S_WRKLI>-WERKS ) to <S_SVCPA>-CURKY.
                endif.
              endif.

            when 'STRG'.

              case <S_TD01>-PARID.
                when 'ZVCXI_XC_DIMEN'.

                  append initial line to <S_SVCEL>-T_SVCPA assigning <S_SVCPA>.
                  move <S_TD01>-PARID to <S_SVCPA>-PARID.
                  move LF_SETBY       to <S_SVCPA>-SETBY.
                  <S_SVCPA>-STRNG = _CONVERT_SVCEL_DATA_DIMEN( exporting IF_VALUE = LF_DATA ).

                when 'ZVCXI_XC_LIMIT'.

                  append initial line to <S_SVCEL>-T_SVCPA assigning <S_SVCPA>.
                  move <S_TD01>-PARID to <S_SVCPA>-PARID.
                  move LF_SETBY       to <S_SVCPA>-SETBY.
                  <S_SVCPA>-STRNG = _CONVERT_SVCEL_DATA_LIMIT( exporting IF_VALUE = LF_DATA ).

                when others.
                  append initial line to <S_SVCEL>-T_SVCPA assigning <S_SVCPA>.
                  move <S_TD01>-PARID to <S_SVCPA>-PARID.
                  move LF_SETBY       to <S_SVCPA>-SETBY.
                  move LF_DATA        to <S_SVCPA>-STRNG.

              endcase.

          endcase.

        endif.
        clear: LF_SETBY,
               LF_DATA.

      endloop.

    endloop.

*** Filter SVC Elements
    loop at CT_WRKLI assigning <S_WRKLI>.
      _FILTER_SVCEL( changing CT_SVCEL = <S_WRKLI>-S_IDAT-T_SVCEL ).
    endloop.

  endmethod.
method CREATE_IDAT.

  data: LS_IDAT type YHP_SMD_AIS_S_QUOT_IDAT.
  data: LT_SPARAM type YHP_SMD_AIS_TT_QUOT_SPARAM.
  data: LR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC,
        LR_CUPRFL   type ref to /VCXI/CL_VKSC_CUPRFL,
        LR_CUELMNT  type ref to /VCXI/CL_VKSC_CUELMNT.

  field-symbols: <S_SVCEL> type ZVCXI_XCI_S_SVCEL,
                 <S_SVCPA> type ZVCXI_XCI_S_SVCPA.

  LS_IDAT = CS_WRKLI-S_IDAT.

*** Get Supervised Params for Configurable Material Profile Key
  LT_SPARAM = GET_CMPRK_SPVPA( IS_CMPRK = CS_WRKLI-S_IDAT-S_CMPRK ).

*** Delete Setby where Parameters are not Supervised
  loop at LS_IDAT-T_SVCEL assigning <S_SVCEL>.
    loop at <S_SVCEL>-T_SVCPA assigning <S_SVCPA>.
      read table LT_SPARAM with key PID   = <S_SVCEL>-IPARE
                                    CID   = <S_SVCEL>-ISELF
                                    PARID = <S_SVCPA>-PARID
                                       transporting no fields.
      if SY-SUBRC ne 0.
        clear <S_SVCPA>-SETBY.
      endif.
    endloop.
  endloop.

*** Delete LS_IDAT-T_SVCEL where LEOKY is initial and T_SVCPA is initial.
  _VALIDATE_SVCEL( changing CT_SVCEL = LS_IDAT-T_SVCEL ).

*** Add Events
  loop at LS_IDAT-T_SVCEL assigning <S_SVCEL>.
    _ADD_SVCEV( changing CS_SVCEL = <S_SVCEL> ).
  endloop.

***-------------------------------------------------------------------*
*** Identify Profile & Get Customizing element of IDAT Supervisor
  LR_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = LS_IDAT-S_CMPRK ).
  LR_CUELMNT = GET_CUELMNT( IR_CUPRFL = LR_CUPRFL
                            IF_IEALI  = LS_IDAT-IEALI ).

  check LR_CUELMNT is bound.

*** Add missing Integration Data Supervised Root Elements
  loop at LR_CUELMNT->/VCXI/IF_VKSC_CUELMNT_SPV~T_SPVRT into data(LR_OBJECT).
    LR_CUELMNT = cast /VCXI/CL_VKSC_CUELMNT( LR_OBJECT ).
    if LINE_EXISTS( LS_IDAT-T_SVCEL[ ISELF = LR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_ID( ) ] ).
      continue.
    else.
      append initial line to LS_IDAT-T_SVCEL assigning <S_SVCEL>.
      move LR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_ID( ) to <S_SVCEL>-ISELF.
      add 1 to <S_SVCEL>-CSELF.
    endif.
  endloop.

*** Create IDat SmartVC
  LR_IDAT_SVC = ZCL_VCXI_XCI_IDAT_SVC=>CREATE( IS_CMPRK = LS_IDAT-S_CMPRK
                                               IF_IEALI = LS_IDAT-IEALI ).
*** Set Data
  LR_IDAT_SVC->SET_SVCEL( IT_SVCEL = LS_IDAT-T_SVCEL ).

  CS_WRKLI-R_IDAT_SVC = LR_IDAT_SVC.

*** Save Integration Data
  if IF_FSIDA is not initial.
    LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_SAVE ).
  endif.

endmethod.
  method CREATE_IDAT_ALL.

    field-symbols: <S_WRKLI> type YHP_SMD_AIS_S_QUOT_WRKLI.

***   Create Integration Data
    loop at CT_WRKLI assigning <S_WRKLI>.
      CREATE_IDAT( changing CS_WRKLI = <S_WRKLI> ).
    endloop.

  endmethod.
  method CREATE_SDOC.

    data: LF_VBELN   type VBELN_VA.
    data: LS_SDOCRS  type ZVCXI_XCI_S_SDOCRS.
    data: LR_IDAT_SDOC type ref to YCL_HP_SMD_AIS_IDAT_SDOC,
          LR_MSG       type ref to /VCXI/CL_CKXM_MESSAGE.
    field-symbols: <S_VBAPKEY> type YRF_RQPT_S_VBAPKEY.

***   Fill SD Document Data
    _FILL_SDOC( importing ER_IDAT_SDOC = LR_IDAT_SDOC
                changing CT_WRKLI = CT_WRKLI ).

    LR_IDAT_SDOC->CALL_BAPI( exporting IF_TESTRUN           = ABAP_FALSE
                                       IF_BEHAVE_WHEN_ERROR = 'P'
                                       IF_FORCE_CREATE      = ABAP_TRUE
                                       IF_VBELN             = RF_VBELN
                             importing ER_MSG               = LR_MSG
                                       EF_VBELN             = RF_VBELN
                                       ES_SDOCRS            = LS_SDOCRS ).

*** Collect keys
*    loop at LS_SDOCRS-T_ITEMS into data(LS_ITEMS).
    loop at CT_WRKLI into data(LS_WRKLI).
      append initial line to ET_VBAPKEY assigning <S_VBAPKEY>.
      move RF_VBELN to <S_VBAPKEY>-VBELN.
      move: LS_WRKLI-POSNR to <S_VBAPKEY>-POSNR,
            LS_WRKLI-S_IDAT-S_CMPRK-CMATN to <S_VBAPKEY>-CMATN.
    endloop.

  endmethod.
  method GET_CMPRK.

  data: LF_CUOBJ type CUOBJ.

  data: LS_CUCO type CUCO.

  field-symbols: <S_WRKLI> type YHP_SMD_AIS_S_QUOT_WRKLI.

  loop at CT_WRKLI assigning <S_WRKLI>.

*** Get CUOBJ of Reference Material
    select single CUOBJ
           into LF_CUOBJ
           from MARC
          where MATNR eq <S_WRKLI>-RMATN
           and  WERKS eq <S_WRKLI>-WERKS.
    if SY-SUBRC ne 0.
      continue.
    endif.

*** Get Profile of Instance
    call function 'CUCB_GET_PROFILE_OF_INSTANCE'
      exporting
        INSTANCE                     = LF_CUOBJ
      importing
        PROFILE_WA                   = LS_CUCO
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2
        PROFILE_NOT_FOUND            = 3
        INVALID_INPUT                = 4.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Return Config. Material & Profile Key
    move LS_CUCO-OBJEK to <S_WRKLI>-S_IDAT-S_CMPRK-CMATN.
    move LS_CUCO-PRFID to <S_WRKLI>-S_IDAT-S_CMPRK-PRFID.

*** Set Alias
    <S_WRKLI>-S_IDAT-IEALI = 'X_IDATSPV'.

    clear: LF_CUOBJ,
           LS_CUCO.

  endloop.

  endmethod.
method GET_CMPRK_SPVPA.

  data: LS_CMPRK          type /VCXI/VKC_S_CMPRK,
        LS_REGELMNT_PARAM type /VCXI/VKSC_S_REGELMNT_PARAM,
        LS_SPARAM         type YHP_SMD_AIS_S_QUOT_SPARAM,
        LS_WRKLI          type YHP_SMD_AIS_S_QUOT_WRKLI,
        LS_MARC           type MARC.
  data: LT_OBJECT type /VCXI/CKX_TT_OBJECT.
  data: LR_CUELMNT  type ref to /VCXI/CL_VKSC_CUELMNT,
        LR_CUELMNTP type ref to /VCXI/CL_VKSC_CUELMNT,
        LR_CUPRFL   type ref to /VCXI/CL_VKSC_CUPRFL,
        LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT,
        LR_PARENT   type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_CMPRK_SPVPA> type YS_CMPRK_SPVPA.

***-------------------------------------------------------------------*
*** Get Configuration Profile (check if its a valid one)
  LR_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = IS_CMPRK ).

*** Read buffered table first
  read table T_CMPRK_SPVPA assigning <S_CMPRK_SPVPA> with key S_CMPRK = IS_CMPRK.
  if SY-SUBRC eq 0.
    RT_SPVPA = <S_CMPRK_SPVPA>-T_SPVPA.

*** Not buffered entry, then read configuration profile
  else.

*** Get all Element
    LT_OBJECT = LR_CUPRFL->GET_REGISTERED_CUELMNT( ).
    check LT_OBJECT is not initial.

*** Add Configurable Material Profile Key
    append initial line to T_CMPRK_SPVPA assigning <S_CMPRK_SPVPA>.
    move-corresponding IS_CMPRK to <S_CMPRK_SPVPA>-S_CMPRK.

*** Start collecting supervised parameters for profile
    loop at LT_OBJECT into LR_OBJECT.

      move LR_OBJECT ?to LR_CUELMNT.
      LR_PARENT = LR_CUELMNT->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ).

      if LR_PARENT is bound.
        move LR_PARENT ?to LR_CUELMNTP.
        if LR_CUELMNTP is bound.
          move LR_CUELMNTP->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LS_SPARAM-PID.
        endif.
      endif.

      if LR_CUELMNT             is bound and
         LR_CUELMNT->R_REGELMNT is bound.

        move LR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LS_SPARAM-CID.

***   Get Supervised Parameters
        loop at LR_CUELMNT->R_REGELMNT->/VCXI/IF_VKSC_REGELMNT_PARAM~T_REGELMNT_PARAM
           into LS_REGELMNT_PARAM
          where PARSP eq ABAP_TRUE.
          move LS_REGELMNT_PARAM-R_PARAM->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LS_SPARAM-PARID.
          append LS_SPARAM to <S_CMPRK_SPVPA>-T_SPVPA.
        endloop.

      endif.

      clear: LS_SPARAM.

    endloop.

*** Return data for new entry in buffered table
    check <S_CMPRK_SPVPA> is assigned.
    RT_SPVPA = <S_CMPRK_SPVPA>-T_SPVPA.

  endif.

endmethod.
  method GET_CUELMNT.

    data: LT_OBJECT  type        /VCXI/CKX_TT_OBJECT.
    data: LR_CUELMNT type ref to /VCXI/CL_VKSC_CUELMNT,
          LR_OBJECT  type ref to /VCXI/IF_CKX_OBJECT.

*** Get needed Element (Root)
    LT_OBJECT = IR_CUPRFL->GET_REGISTERED_CUELMNT( ).
    loop at LT_OBJECT into LR_OBJECT.
      move LR_OBJECT ?to LR_CUELMNT.

***   Find by ID
      if IF_ID is supplied.
        if LR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_ID( )        cs IF_ID      and
           LR_CUELMNT->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( )  is not bound.
          move LR_CUELMNT to RR_CUELMNT.
          exit.
        else.
          clear LR_CUELMNT.
        endif.

***   Find by Alias
      elseif IF_IEALI is supplied.
        loop at LR_CUELMNT->/VCXI/IF_VKSC_CUELMNT_CEALI~T_CEALI into LR_OBJECT.
          if LR_OBJECT->GET_ID( ) eq IF_IEALI.
            move LR_CUELMNT to RR_CUELMNT.
            exit.
          endif.
        endloop.

***   Wrong Parameters
      else.
        raise exception type /VCXI/CX_CKX.
      endif.
    endloop.

  endmethod.
  method HANDLE_UPDATE_COMPLETE.

*    data: LF_CUOBJ type CUOBJ,
*          LF_VCPP  type ABAP_BOOL,
*          LF_TEMP  type ABAP_BOOL,
*          lF_ROOT type abap_bool,
*          LF_TRACE type ABAP_BOOL.
*    data: LS_INST type BAPICUINS.
*    data: LR_BOB_ITEM type ref to YCL_RF_RQPTR_BOB_ITEM.
*
*    try.
*        check LINE_EXISTS( IT_VBAPKEY[ VBELN = ME->F_VBELN
*                                       POSNR = ME->F_POSNR ] ).
*        LR_BOB_ITEM = YCL_RF_RQPTR_BOB_ITEM=>GET_INSTANCE( IF_VBELN = ME->F_VBELN
*                                                           IF_POSNR = ME->F_POSNR ).
*
****     Check Configuration a root configuration based on VCPP
*        LF_VCPP = LR_BOB_ITEM->IS_VCPP( exporting IF_ROOT_ONLY = ABAP_TRUE
*                                        importing EF_CUOBJ     = LF_CUOBJ
*                                                  EF_TEMP      = LF_TEMP
*                                                  EF_ROOT      = LF_ROOT ).
*        check LF_CUOBJ is not initial and
*              LF_ROOT eq ABAP_TRUE.
*
****     Update VBEP by VBAP
*        ME->UPDATE_VBEP( ).
*
****     Check Temp is VCPP
*        if LF_TEMP eq ABAP_TRUE and
*          YCL_RF_RQPTR_ITEM_IDAT_SVC=>GET_INSTANCE( IF_VBELN = ME->F_VBELN
*                                                    IF_POSNR = ME->F_POSNR )->GET_IDAT_SVC( ) is bound.
*          LF_VCPP = ABAP_TRUE.
*        endif.
*
*        if LF_VCPP eq ABAP_TRUE.
****       Once all editable fields are updated, update the Integration Data
*          YCL_RF_RQPTR_ITEM_IDAT_SVC=>GET_INSTANCE( IF_VBELN = ME->F_VBELN
*                                                    IF_POSNR = ME->F_POSNR )->UPDATE_IDAT( ).
*        else.
****       Run LO-VC Configuration only
*          YCL_RF_RQPTR_SIM=>RUN_CONFIG( IR_BOB_ITEM = LR_BOB_ITEM
*                                        IF_TRACE    = LF_TRACE
*                                        IR_MSG      = cast YCL_RF_RQPTR_PR_MAIN( SENDER )->R_MSG ).
*
****       Set Configuration Status to Cache
*          LR_BOB_ITEM->GET_POS_LOVC( importing ES_INST = LS_INST ).
*          ME->SET_CACHE_DATA( IF_KEY   = C_INKEY_F_ELMST
*                              IR_DATA  = cond /VCXI/VKSR_ELMST( when LS_INST-CONSISTENT ne 'T' then 'R'
*                                                                when LS_INST-COMPLETE   ne 'T' then 'R'
*                                                                                               else 'G' ) ).
*        endif.
*
*
*      catch /VCXI/CX_CKX into data(LR_CX_CKX).
*        try.
*            cast YCL_RF_RQPTR_PR_MAIN( SENDER )->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
*          catch CX_SY_MOVE_CAST_ERROR.
*        endtry.
*    endtry.

  endmethod.
