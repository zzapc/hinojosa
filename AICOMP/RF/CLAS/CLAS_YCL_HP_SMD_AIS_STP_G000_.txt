
class YCL_HP_SMD_AIS_STP_G000 definition
  public
  inheriting from /VCXI/CL_CKMR_CLSTP
  abstract
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_RPSEG type ref to /VCXI/CL_CKMR_RPSEG
    raising
      /VCXI/CX_CKX .

  methods EXECUTE
    redefinition .
protected section.

  methods GET_SUBPROCESS
    returning
      value(RR_RPROC) type ref to /VCXI/CL_CKMR_RPROC
    raising
      /VCXI/CX_CKX .
  methods GET_SUBPROCESS_DCO
  abstract
    returning
      value(RR_DCO) type ref to /VCXI/CL_CKMR_CLDCO
    raising
      /VCXI/CX_CKX .
  methods COMBINE_STATUS
    importing
      !IR_RPROC type ref to /VCXI/CL_CKMR_RPROC
    raising
      /VCXI/CX_CKX .
  methods EXECUTE_SUBPROCESS
    importing
      !IR_RPROC type ref to /VCXI/CL_CKMR_RPROC
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_RESULT_DCO
  abstract
    importing
      !IR_RPROC type ref to /VCXI/CL_CKMR_RPROC
    raising
      /VCXI/CX_CKX .
private section.
endclass. "YCL_HP_SMD_AIS_STP_G000 definition
class YCL_HP_SMD_AIS_STP_G000 implementation.
method COMBINE_STATUS.

*** Combine Status
  case IR_RPROC->F_SRPRO.

    when /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR.
      ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

    when /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR_TMP.
      if ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR.
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR_TMP ).
      endif.

    when /VCXI/CL_CKMR_RPROC=>C_SRPRO_WAIT_USER.
      if ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR     and
         ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR_TMP.
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_WAIT_USER ).
      endif.

    when /VCXI/CL_CKMR_RPROC=>C_SRPRO_COMPLETED.
      if ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR     and
         ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR_TMP and
         ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_WAIT_USER.
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED ).
      endif.

    when /VCXI/CL_CKMR_RPROC=>C_SRPRO_CANCELED.
      if ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR     and
         ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_ERROR_TMP and
         ME->R_RPSEG->F_SRPSG ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_WAIT_USER.
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED ).
      endif.

  endcase.

endmethod.
method CONSTRUCTOR.

*** Super Constructor
  SUPER->CONSTRUCTOR( IR_RPSEG = IR_RPSEG ).

endmethod.
method EXECUTE.

  data: LR_RPROC  type ref to /VCXI/CL_CKMR_RPROC,
        LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.

***   Get SubProcess
      LR_RPROC = ME->GET_SUBPROCESS( ).

      if LR_RPROC is not bound.

***     Set Status Canceled
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ).
        return.

      endif.

***   Check SubProcess Status
      if LR_RPROC->F_SRPRO ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_COMPLETED and
         LR_RPROC->F_SRPRO ne /VCXI/CL_CKMR_RPROC=>C_SRPRO_CANCELED.

***     Save Segment (with SubProcesses)
        ME->R_RPSEG->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = /VCXI/CL_CKMR_RPSEG=>C_FCODE_SAVE ).

***     Execute SubProcess
        ME->EXECUTE_SUBPROCESS( IR_RPROC = LR_RPROC ).

      endif.

***   Analyze Result DCO
      ME->ANALYZE_RESULT_DCO( IR_RPROC = LR_RPROC ).

***   Combine Status
      ME->COMBINE_STATUS( IR_RPROC = LR_RPROC ).

    catch /VCXI/CX_CKX into LR_CX_CKX.

***   Set Status to Error
      ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

***   Add Message to Message Log
      ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).

  endtry.

endmethod.
method EXECUTE_SUBPROCESS.

  IR_RPROC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = /VCXI/CL_CKMR_RPROC=>C_FCODE_EXECUTE_DIRECT ).

endmethod.
method GET_SUBPROCESS.

  data: LR_DCO    type ref to /VCXI/CL_CKMR_CLDCO,
        LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.

*** Get existing Process
  read table ME->R_RPSEG->T_RPROC into LR_OBJECT index 1.
  if SY-SUBRC eq 0.

    move LR_OBJECT ?to RR_RPROC.

*** Create new Process and DCO if needed
  else.

    move ME->GET_SUBPROCESS_DCO( ) to LR_DCO.

    if LR_DCO is bound.

***   Create SubProcess
      RR_RPROC = /VCXI/CL_CKMR_RPROC=>CREATE( IR_DCO   = LR_DCO
                                              IR_CPROC = ME->R_RPSEG->R_CPSEQ->R_CPROC ).

***   Add to Segment as SubProcess
      ME->R_RPSEG->ADD_RPROC( IR_RPROC = RR_RPROC ).

    endif.

  endif.

  if RR_RPROC is not bound.

*** Set Segment Status to Error
    ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

  endif.

endmethod.
