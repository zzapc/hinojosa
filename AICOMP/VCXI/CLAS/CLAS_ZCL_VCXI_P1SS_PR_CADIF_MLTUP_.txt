
class ZCL_VCXI_P1SS_PR_CADIF_MLTUP definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_CADIF_MLTUP
  create public .

public section.
protected section.

  methods FILL_BY_CSTEP_DCT
    importing
      !IR_PR_CSTEP_DCUT type ref to ZCL_VCXI_P1SS_PR_CSTEP_DCUT
      !IR_CADIF_IO type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods FILL_BY_CSTEP_SSS
    importing
      !IR_PR_CSTEP_SSS type ref to ZCL_VCXI_P1SS_PR_CSTEP_SSS
      !IR_CADIF_IO type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods UPDATE_CSTEP_DCT
    importing
      !IR_PR_CSTEP_DCUT type ref to ZCL_VCXI_P1SS_PR_CSTEP_DCUT
      !IS_CADIF_IO type ANY
    raising
      /VCXI/CX_CKX .
  methods UPDATE_CSTEP_SSS
    importing
      !IR_PR_CSTEP_SSS type ref to ZCL_VCXI_P1SS_PR_CSTEP_SSS
      !IS_CADIF_IO type ANY
    raising
      /VCXI/CX_CKX .

  methods FILL_BY_CSTEP
    redefinition .
  methods FILL_BY_SSTEP
    redefinition .
  methods UPDATE_CSTEP
    redefinition .
  methods UPDATE_SSTEP
    redefinition .
private section.
endclass. "ZCL_VCXI_P1SS_PR_CADIF_MLTUP definition
class ZCL_VCXI_P1SS_PR_CADIF_MLTUP implementation.
  method FILL_BY_CSTEP.

*** Fill based on Conversion Step Provider
    case type of ME->GET_PRVDR_CSTEP( ).
***   Die Cutting
      when type ZCL_VCXI_P1SS_PR_CSTEP_DCUT into data(LR_PR_CSTEP_DCUT).
        ME->FILL_BY_CSTEP_DCT( IR_PR_CSTEP_DCUT = LR_PR_CSTEP_DCUT
                               IR_CADIF_IO      = IR_CADIF_IO ).
***   Slit/Slot/Score
      when type ZCL_VCXI_P1SS_PR_CSTEP_SSS into data(LR_PR_CSTEP_SSS).
        ME->FILL_BY_CSTEP_SSS( IR_PR_CSTEP_SSS = LR_PR_CSTEP_SSS
                               IR_CADIF_IO     = IR_CADIF_IO ).
    endcase.

  endmethod.
  method FILL_BY_CSTEP_DCT.

    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_MLTUP_IO.
    data: LR_PR_CADIF_PRJ type ref to ZCL_VCXI_PXSS_PR_CADIF_PRJ,
          LR_BL_CRBPROP   type ref to ZCL_VCXI_P1SS_BL_CRBPROP.
    field-symbols: <S_CADIF_IO> type ANY.


***------------------------------------------------------------------------------------------------
*** Get Project Provider
    LR_PR_CADIF_PRJ = ME->GET_PRVDR_CADIF_PRJ( ).
    check LR_PR_CADIF_PRJ is bound.

*** Dereferencing and "Cast" I/O Structure
    assign IR_CADIF_IO->* to <S_CADIF_IO>.
    move-corresponding <S_CADIF_IO> to LS_CADIF_IO.


***------------------------------------------------------------------------------------------------
*** Get Plant
    LS_CADIF_IO-WERKS = IR_PR_CSTEP_DCUT->GET_WERKS( ).

*** Get Number of Outs on Width
    LS_CADIF_IO-NOUTW = IR_PR_CSTEP_DCUT->GET_NOUTW( ).
    LS_CADIF_IO-NOUTL = IR_PR_CSTEP_DCUT->GET_NOUTL( ).
    LS_CADIF_IO-FNEST = IR_PR_CSTEP_DCUT->GET_FNEST( ).

*** Get Output
    LR_BL_CRBPROP = IR_PR_CSTEP_DCUT->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ).
    LS_CADIF_IO-T_CADIF_XOUT_IO = value #( ( GCADO = LR_BL_CRBPROP->F_GCADO
                                             ICADO = LR_PR_CADIF_PRJ->GET_ICADO_BY_GCADO( IF_GCADO = LR_BL_CRBPROP->F_GCADO )
                                             NOUTT = IR_PR_CSTEP_DCUT->GET_NOUTT( )
                                         ) ).

***------------------------------------------------------------------------------------------------
*** "Cast" I/O Structure back to generic structure
    move-corresponding LS_CADIF_IO to <S_CADIF_IO>.

  endmethod.
  method FILL_BY_CSTEP_SSS.

    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_MLTUP_IO.
    data: LR_PR_CADIF_PRJ type ref to ZCL_VCXI_PXSS_PR_CADIF_PRJ,
          LR_BL_CRBPROP   type ref to ZCL_VCXI_P1SS_BL_CRBPROP.
    field-symbols: <S_CADIF_IO> type ANY.


***------------------------------------------------------------------------------------------------
*** Get Project Provider
    LR_PR_CADIF_PRJ = ME->GET_PRVDR_CADIF_PRJ( ).
    check LR_PR_CADIF_PRJ is bound.

*** Dereferencing and "Cast" I/O Structure
    assign IR_CADIF_IO->* to <S_CADIF_IO>.
    move-corresponding <S_CADIF_IO> to LS_CADIF_IO.


***------------------------------------------------------------------------------------------------
*** Get Plant
    LS_CADIF_IO-WERKS = IR_PR_CSTEP_SSS->GET_WERKS( ).

*** Get Output
    LR_BL_CRBPROP = IR_PR_CSTEP_SSS->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( ).
    LS_CADIF_IO-T_CADIF_XOUT_IO = value #( ( GCADO = LR_BL_CRBPROP->F_GCADO
                                             ICADO = LR_PR_CADIF_PRJ->GET_ICADO_BY_GCADO( IF_GCADO = LR_BL_CRBPROP->F_GCADO )
                                             NOUTT = IR_PR_CSTEP_SSS->GET_NOUTT( )
                                         ) ).

***------------------------------------------------------------------------------------------------
*** "Cast" I/O Structure back to generic structure
    move-corresponding LS_CADIF_IO to <S_CADIF_IO>.

  endmethod.
  method FILL_BY_SSTEP.

    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_MLTUP_IO.
    data: LR_PR_SSTEP_DCUT type ref to ZCL_VCXI_P1SS_PR_SSTEP_DCUT,
          LR_GATE          type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_CADIF_IO> type ANY.


***------------------------------------------------------------------------------------------------
*** Get Separation Step Provider
    LR_PR_SSTEP_DCUT ?= ME->GET_PRVDR_SSTEP( ).
    check LR_PR_SSTEP_DCUT is bound.

*** Dereferencing and "Cast" I/O Structure
    assign IR_CADIF_IO->* to <S_CADIF_IO>.
    move-corresponding <S_CADIF_IO> to LS_CADIF_IO.

***------------------------------------------------------------------------------------------------
*** Get Plant
    LS_CADIF_IO-WERKS = LR_PR_SSTEP_DCUT->GET_WERKS( ).

*** Get Finished Goods and Connection Out provider
    loop at ME->GET_PRVDR_XOUT( ) into LR_GATE.
      case type of LR_GATE->R_CLSPR.
***     Finished Good
        when type ZCL_VCXI_P1SS_PR_CFG into data(LR_PR_CFG).
          append value #( GCADO = LR_PR_CFG->GET_CRBPX( )->F_GCADO
                          NOUTT = LR_PR_CFG->GET_NOUTT( )
                        ) to LS_CADIF_IO-T_CADIF_XOUT_IO.

***     Connection Out
        when type ZCL_VCXI_P1SS_PR_CRCONO into data(LR_PR_CRCONO).
          append value #( GCADO = LR_PR_CRCONO->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->F_GCADO
                          NOUTT = LR_PR_CRCONO->GET_NOUTT( )
                        ) to LS_CADIF_IO-T_CADIF_XOUT_IO.
      endcase.
    endloop.

*** Separation is always Nested
    LS_CADIF_IO-FNEST = ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** "Cast" I/O Structure back to generic structure
    move-corresponding LS_CADIF_IO to <S_CADIF_IO>.

  endmethod.
  method UPDATE_CSTEP.

*** Fill based on Conversion Step Provider
    case type of ME->GET_PRVDR_CSTEP( ).
***   Die Cutting
      when type ZCL_VCXI_P1SS_PR_CSTEP_DCUT into data(LR_PR_CSTEP_DCUT).
        ME->UPDATE_CSTEP_DCT( IR_PR_CSTEP_DCUT = LR_PR_CSTEP_DCUT
                              IS_CADIF_IO      = IS_CADIF_IO ).
***   Slit/Slot/Score
      when type ZCL_VCXI_P1SS_PR_CSTEP_SSS into data(LR_PR_CSTEP_SSS).
        ME->UPDATE_CSTEP_SSS( IR_PR_CSTEP_SSS = LR_PR_CSTEP_SSS
                              IS_CADIF_IO     = IS_CADIF_IO ).
    endcase.

  endmethod.
  method UPDATE_CSTEP_DCT.

    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_MLTUP_IO,
          LS_TRWIT    type ZVCXI_PXS_S_TRWIT,
          LS_TRLET    type ZVCXI_PXS_S_TRLET.


*** "Cast" I/O Structure
    move-corresponding IS_CADIF_IO to LS_CADIF_IO.

***------------------------------------------------------------------------------------------------
*** Set Die Cut Type
    IR_PR_CSTEP_DCUT->SET_TDCUT( IF_TDCUT = LS_CADIF_IO-TDCUT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Die Cut Tool Number
    IR_PR_CSTEP_DCUT->SET_DCTTN( IF_DCTTN = LS_CADIF_IO-DCTTN
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Sheet Direction
    IR_PR_CSTEP_DCUT->SET_SHTDI( IF_SHTDI = LS_CADIF_IO-SHTDI
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Rule Length
    IR_PR_CSTEP_DCUT->SET_RULEN( IS_RULEN = LS_CADIF_IO-S_RULEN
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Net Sheet Dimension
    IR_PR_CSTEP_DCUT->SET_SHTNW( IS_SHTNW = LS_CADIF_IO-S_SHTNW
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    IR_PR_CSTEP_DCUT->SET_SHTNL( IS_SHTNL = LS_CADIF_IO-S_SHTNL
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Trim on Width
    LS_TRWIT = IR_PR_CSTEP_DCUT->ZIF_VCXI_PXSS_DCUT~GET_TRWIT( ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CADIF_IO-S_TRLEF-TRLEF
                                                        IF_CALCV_UOM_1 = LS_CADIF_IO-S_TRLEF-TRLEF_UOM
                                                        IF_CALCV_2     = LS_CADIF_IO-S_TRRIG-TRRIG
                                                        IF_CALCV_UOM_2 = LS_CADIF_IO-S_TRRIG-TRRIG_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRWIT-TRWIT_UOM
                                              importing EF_CALCV       = LS_TRWIT-TRWIT
                                                        EF_CALCV_UOM   = LS_TRWIT-TRWIT_UOM ).
    IR_PR_CSTEP_DCUT->SET_TRWIT( IS_TRWIT = LS_TRWIT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    IR_PR_CSTEP_DCUT->SET_TRLEF( IS_TRLEF = LS_CADIF_IO-S_TRLEF
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    IR_PR_CSTEP_DCUT->SET_TRRIG( IS_TRRIG = LS_CADIF_IO-S_TRRIG
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Trim on Length
    LS_TRLET = IR_PR_CSTEP_DCUT->ZIF_VCXI_PXSS_DCUT~GET_TRLET( ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CADIF_IO-S_TRTOP-TRTOP
                                                        IF_CALCV_UOM_1 = LS_CADIF_IO-S_TRTOP-TRTOP_UOM
                                                        IF_CALCV_2     = LS_CADIF_IO-S_TRBOT-TRBOT
                                                        IF_CALCV_UOM_2 = LS_CADIF_IO-S_TRBOT-TRBOT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRLET-TRLET_UOM
                                              importing EF_CALCV       = LS_TRLET-TRLET
                                                        EF_CALCV_UOM   = LS_TRLET-TRLET_UOM ).
    IR_PR_CSTEP_DCUT->SET_TRLET( IS_TRLET = LS_TRLET
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    IR_PR_CSTEP_DCUT->SET_TRTOP( IS_TRTOP = LS_CADIF_IO-S_TRTOP
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    IR_PR_CSTEP_DCUT->SET_TRBOT( IS_TRBOT = LS_CADIF_IO-S_TRBOT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Nested Flag
    IR_PR_CSTEP_DCUT->SET_FNEST( IF_FNEST = LS_CADIF_IO-FNEST
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Number of Outs
    IR_PR_CSTEP_DCUT->SET_NOUTW( IF_NOUTW = LS_CADIF_IO-NOUTW
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    IR_PR_CSTEP_DCUT->SET_NOUTL( IF_NOUTL = LS_CADIF_IO-NOUTL
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    IR_PR_CSTEP_DCUT->SET_NOUTT( IF_NOUTT = LS_CADIF_IO-T_CADIF_XOUT_IO[ 1 ]-NOUTT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  endmethod.
  method UPDATE_CSTEP_SSS.

    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_MLTUP_IO,
          LS_TRSLI    type ZVCXI_PXS_S_TRSLI,
          LS_TRSLO    type ZVCXI_PXS_S_TRSLO.


*** "Cast" I/O Structure
    move-corresponding IS_CADIF_IO to LS_CADIF_IO.

***------------------------------------------------------------------------------------------------
**** Set Sheet Direction
*    IR_PR_CSTEP_SSS->SET_SHTDI( IF_SHTDI = LS_CADIF_IO-SHTDI
*                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Trim on Slitting
    LS_TRSLI = IR_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~GET_TRSLI( ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CADIF_IO-S_TRLEF-TRLEF
                                                        IF_CALCV_UOM_1 = LS_CADIF_IO-S_TRLEF-TRLEF_UOM
                                                        IF_CALCV_2     = LS_CADIF_IO-S_TRRIG-TRRIG
                                                        IF_CALCV_UOM_2 = LS_CADIF_IO-S_TRRIG-TRRIG_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRSLI-TRSLI_UOM
                                              importing EF_CALCV       = LS_TRSLI-TRSLI
                                                        EF_CALCV_UOM   = LS_TRSLI-TRSLI_UOM ).
    IR_PR_CSTEP_SSS->SET_TRSLI( IS_TRSLI = LS_TRSLI
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    IR_PR_CSTEP_SSS->SET_TRLEF( IS_TRLEF = LS_CADIF_IO-S_TRLEF
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    IR_PR_CSTEP_SSS->SET_TRRIG( IS_TRRIG = LS_CADIF_IO-S_TRRIG
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Trim on Slotting
    LS_TRSLO = IR_PR_CSTEP_SSS->ZIF_VCXI_PXSS_SSS~GET_TRSLO( ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CADIF_IO-S_TRTOP-TRTOP
                                                        IF_CALCV_UOM_1 = LS_CADIF_IO-S_TRTOP-TRTOP_UOM
                                                        IF_CALCV_2     = LS_CADIF_IO-S_TRBOT-TRBOT
                                                        IF_CALCV_UOM_2 = LS_CADIF_IO-S_TRBOT-TRBOT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRSLO-TRSLO_UOM
                                              importing EF_CALCV       = LS_TRSLO-TRSLO
                                                        EF_CALCV_UOM   = LS_TRSLO-TRSLO_UOM ).
    IR_PR_CSTEP_SSS->SET_TRSLO( IS_TRSLO = LS_TRSLO
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    IR_PR_CSTEP_SSS->SET_TRTOP( IS_TRTOP = LS_CADIF_IO-S_TRTOP
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    IR_PR_CSTEP_SSS->SET_TRBOT( IS_TRBOT = LS_CADIF_IO-S_TRBOT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Number of Outs
    IR_PR_CSTEP_SSS->SET_NOUTT( IF_NOUTT = LS_CADIF_IO-T_CADIF_XOUT_IO[ 1 ]-NOUTT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  endmethod.
  method UPDATE_SSTEP.

    data: LF_GCADO type ZVCXI_PXS_GCADO.
    data: LS_CADIF_IO type ZVCXI_PXSS_S_CADIF_MLTUP_IO,
          LS_TRWIT    type ZVCXI_PXS_S_TRWIT,
          LS_TRLET    type ZVCXI_PXS_S_TRLET.
    data: LR_PR_SSTEP_DCUT type ref to ZCL_VCXI_P1SS_PR_SSTEP_DCUT,
          LR_GATE          type ref to /VCXI/CL_VKSR_GATE.


*** Get Separation Step Provider
    LR_PR_SSTEP_DCUT ?= ME->GET_PRVDR_SSTEP( ).
    check LR_PR_SSTEP_DCUT is bound.

*** "Cast" I/O Structure
    move-corresponding IS_CADIF_IO to LS_CADIF_IO.

***------------------------------------------------------------------------------------------------
*** Set Die Cut Type
    LR_PR_SSTEP_DCUT->SET_TDCUT( IF_TDCUT = LS_CADIF_IO-TDCUT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Die Cut Tool Number
    LR_PR_SSTEP_DCUT->SET_DCTTN( IF_DCTTN = LS_CADIF_IO-DCTTN
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Sheet Direction
    LR_PR_SSTEP_DCUT->SET_SHTDI( IF_SHTDI = LS_CADIF_IO-SHTDI
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Rule Length
    LR_PR_SSTEP_DCUT->SET_RULEN( IS_RULEN = LS_CADIF_IO-S_RULEN
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Net Sheet Dimension
    LR_PR_SSTEP_DCUT->SET_SHTNW( IS_SHTNW = LS_CADIF_IO-S_SHTNW
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    LR_PR_SSTEP_DCUT->SET_SHTNL( IS_SHTNL = LS_CADIF_IO-S_SHTNL
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Trim on Width
    LS_TRWIT = LR_PR_SSTEP_DCUT->ZIF_VCXI_PXSS_DCUT~GET_TRWIT( ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CADIF_IO-S_TRLEF-TRLEF
                                                        IF_CALCV_UOM_1 = LS_CADIF_IO-S_TRLEF-TRLEF_UOM
                                                        IF_CALCV_2     = LS_CADIF_IO-S_TRRIG-TRRIG
                                                        IF_CALCV_UOM_2 = LS_CADIF_IO-S_TRRIG-TRRIG_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRWIT-TRWIT_UOM
                                              importing EF_CALCV       = LS_TRWIT-TRWIT
                                                        EF_CALCV_UOM   = LS_TRWIT-TRWIT_UOM ).
    LR_PR_SSTEP_DCUT->SET_TRWIT( IS_TRWIT = LS_TRWIT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    LR_PR_SSTEP_DCUT->SET_TRLEF( IS_TRLEF = LS_CADIF_IO-S_TRLEF
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    LR_PR_SSTEP_DCUT->SET_TRRIG( IS_TRRIG = LS_CADIF_IO-S_TRRIG
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

*** Set Trim on Length
    LS_TRLET = LR_PR_SSTEP_DCUT->ZIF_VCXI_PXSS_DCUT~GET_TRLET( ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CADIF_IO-S_TRTOP-TRTOP
                                                        IF_CALCV_UOM_1 = LS_CADIF_IO-S_TRTOP-TRTOP_UOM
                                                        IF_CALCV_2     = LS_CADIF_IO-S_TRBOT-TRBOT
                                                        IF_CALCV_UOM_2 = LS_CADIF_IO-S_TRBOT-TRBOT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRLET-TRLET_UOM
                                              importing EF_CALCV       = LS_TRLET-TRLET
                                                        EF_CALCV_UOM   = LS_TRLET-TRLET_UOM ).
    LR_PR_SSTEP_DCUT->SET_TRLET( IS_TRLET = LS_TRLET
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    LR_PR_SSTEP_DCUT->SET_TRTOP( IS_TRTOP = LS_CADIF_IO-S_TRTOP
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    LR_PR_SSTEP_DCUT->SET_TRBOT( IS_TRBOT = LS_CADIF_IO-S_TRBOT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).


***------------------------------------------------------------------------------------------------
*** Update Finished Goods and Connection Out provider
    loop at ME->GET_PRVDR_XOUT( ) into LR_GATE.
      case type of LR_GATE->R_CLSPR.
***     Finished Good
        when type ZCL_VCXI_P1SS_PR_CFG into data(LR_PR_CFG).
          LF_GCADO = LR_PR_CFG->GET_CRBPX( )->F_GCADO.
          LR_PR_CFG->SET_NOUTT( IF_NOUTT = value #( LS_CADIF_IO-T_CADIF_XOUT_IO[ GCADO = LF_GCADO ]-NOUTT optional )
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

***     Connection Out
        when type ZCL_VCXI_P1SS_PR_CRCONO into data(LR_PR_CRCONO).
          LF_GCADO = LR_PR_CRCONO->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->F_GCADO.
          LR_PR_CRCONO->SET_NOUTT( IF_NOUTT = value #( LS_CADIF_IO-T_CADIF_XOUT_IO[ GCADO = LF_GCADO ]-NOUTT optional )
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      endcase.
    endloop.

  endmethod.
