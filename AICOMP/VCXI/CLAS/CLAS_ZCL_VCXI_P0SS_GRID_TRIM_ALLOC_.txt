
class ZCL_VCXI_P0SS_GRID_TRIM_ALLOC definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  create public .

public section.

  type-pools ABAP .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  type-pools ABAP .
  data F_OVERLAP_ACTIVE type ABAP_BOOL .
  data R_PR_SCSTR_MGR type ref to ZCL_VCXI_P0SS_PR_SCSTR_MGR .

  methods CHECK_SUM
    importing
      !IS_TRIM_ALLOC_VIS type ZVCXI_P0SS_S_TRIM_ALLOC_VIS
    exporting
      !EF_TRIM_ERROR type ABAP_BOOL
      !EF_OVERLAP_ERROR type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHANGE_COLOR_TRIM_ALLOC
    importing
      !IF_TRIM_ERROR type ABAP_BOOL
      !IF_OVERLAP_ERROR type ABAP_BOOL
    changing
      !CT_SCOL type LVC_T_SCOL
    raising
      /VCXI/CX_CKX .
  methods GET_TRIM_ALLOC_VIS
    importing
      !IF_TRIDI_ID type /VCXI/VKS_PARID
    returning
      value(RS_TRIM_ALLOC_VIS) type ZVCXI_P0SS_S_TRIM_ALLOC_VIS
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_TRIM_ALLOC
    importing
      !IF_OVERLAP_ACTIVE type ABAP_BOOL
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_GRID_TRIM_ALLOC definition
class ZCL_VCXI_P0SS_GRID_TRIM_ALLOC implementation.
method CHANGE_COLOR_TRIM_ALLOC.

  data: LS_SCOL type LVC_S_SCOL.

  free: CT_SCOL.

  if IF_TRIM_ERROR eq ABAP_TRUE.
*** Trim Error
    LS_SCOL-FNAME = 'TRITO'.
    LS_SCOL-COLOR-COL = 6.
    LS_SCOL-COLOR-INT = 1.
    LS_SCOL-COLOR-INV = 1.
    append LS_SCOL to CT_SCOL.

    LS_SCOL-FNAME = 'TRITO_UOM'.
    LS_SCOL-COLOR-COL = 6.
    LS_SCOL-COLOR-INT = 1.
    LS_SCOL-COLOR-INV = 1.
    append LS_SCOL to CT_SCOL.
  endif.

*** Overlap Error
  if IF_OVERLAP_ERROR eq ABAP_TRUE.
    LS_SCOL-FNAME = 'OVLTO'.
    LS_SCOL-COLOR-COL = 6.
    LS_SCOL-COLOR-INT = 1.
    LS_SCOL-COLOR-INV = 1.
    append LS_SCOL to CT_SCOL.

    LS_SCOL-FNAME = 'OVLTO_UOM'.
    LS_SCOL-COLOR-COL = 6.
    LS_SCOL-COLOR-INT = 1.
    LS_SCOL-COLOR-INV = 1.
    append LS_SCOL to CT_SCOL.
  endif.

endmethod.
method CHANGE_STYLE_TRIM_ALLOC.

  data: LF_STYLE_ENABLED_OVERLAP type LVC_STYLE.

  free CT_STYL.

  if IF_OVERLAP_ACTIVE eq ABAP_TRUE.
    move ME->F_STYLE_ENABLED to LF_STYLE_ENABLED_OVERLAP.
  else.
    move ME->F_STYLE_DISABLED to LF_STYLE_ENABLED_OVERLAP.
  endif.

*** Change Style to editable
*** Change Style Trim Left/Top and Right/Bottom
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TRILT'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TRIRB'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

*** Change Style Overlap Left/Top and Right/Bottom
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'OVLLT'
                              IF_STYLE     = LF_STYLE_ENABLED_OVERLAP
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'OVLRB'
                              IF_STYLE     = LF_STYLE_ENABLED_OVERLAP
                    changing  CT_STYL      = CT_STYL ).

endmethod.
method CHECK_SUM.

  data: LS_TRITO type ZVCXI_P0SS_S_TRITO,
        LS_OVLTO type ZVCXI_P0SS_S_OVLTO.

*** -------------------------------------------------------------------------------------------
*** Sum Up Trim
  if IS_TRIM_ALLOC_VIS-TRILT_UOM is not initial and
     IS_TRIM_ALLOC_VIS-TRIRB_UOM is not initial and
     IS_TRIM_ALLOC_VIS-TRITO_UOM is not initial.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_TRIM_ALLOC_VIS-TRILT
                                                        IF_CALCV_UOM_1 = IS_TRIM_ALLOC_VIS-TRILT_UOM
                                                        IF_CALCV_2     = IS_TRIM_ALLOC_VIS-TRIRB
                                                        IF_CALCV_UOM_2 = IS_TRIM_ALLOC_VIS-TRIRB_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = IS_TRIM_ALLOC_VIS-TRITO_UOM
                                              importing EF_CALCV       = LS_TRITO-TRITO
                                                        EF_CALCV_UOM   = LS_TRITO-TRITO_UOM ).

    if IS_TRIM_ALLOC_VIS-TRITO ne LS_TRITO-TRITO.
      EF_TRIM_ERROR = ABAP_TRUE.
    endif.
  endif.

*** -------------------------------------------------------------------------------------------
*** Sum Up Overlap
  if IS_TRIM_ALLOC_VIS-OVLLT_UOM is not initial and
     IS_TRIM_ALLOC_VIS-OVLRB_UOM is not initial and
     IS_TRIM_ALLOC_VIS-OVLTO_UOM is not initial.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_TRIM_ALLOC_VIS-OVLLT
                                                        IF_CALCV_UOM_1 = IS_TRIM_ALLOC_VIS-OVLLT_UOM
                                                        IF_CALCV_2     = IS_TRIM_ALLOC_VIS-OVLRB
                                                        IF_CALCV_UOM_2 = IS_TRIM_ALLOC_VIS-OVLRB_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = IS_TRIM_ALLOC_VIS-OVLTO_UOM
                                              importing EF_CALCV       = LS_OVLTO-OVLTO
                                                        EF_CALCV_UOM   = LS_OVLTO-OVLTO_UOM ).

    if IS_TRIM_ALLOC_VIS-OVLTO ne LS_OVLTO-OVLTO.
      EF_OVERLAP_ERROR = ABAP_TRUE.
    endif.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = 'ZVCXI_P0SS_S_TRIM_ALLOC_GRID'
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_SCSTR_MGR.

    catch CX_SY_MOVE_CAST_ERROR.
      clear ME->R_PR_SCSTR_MGR.
  endtry.

endmethod.
method GET_FIELDCAT.

  data:          LF_LOCKED   type        /VCXI/CKX_LOCKED.
  field-symbols: <S_FCAT>    type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and Split Status
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'TRIDI_ID' or 'T_STYL' or 'T_SCOL'.
        move ABAP_TRUE    to <S_FCAT>-TECH.

      when 'TRILT' or 'TRIRB'.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        else.
          move ABAP_FALSE    to <S_FCAT>-EDIT.
        endif.

      when 'OVLTO' or 'OVLTO_UOM' or 'OVLLT_UOM'
        or 'OVLRB_UOM'.
        if ME->F_OVERLAP_ACTIVE ne ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-TECH.
        endif.

      when 'OVLLT' or 'OVLRB'.
        if ME->F_OVERLAP_ACTIVE ne ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-TECH.
        else.
          if LF_LOCKED eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          else.
            move ABAP_FALSE    to <S_FCAT>-EDIT.
          endif.
        endif.

    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LF_OVERLAP_ACTIVE    type          ABAP_BOOL,
                 LF_TRIM_ERROR        type          ABAP_BOOL,
                 LF_OVERLAP_ERROR     type          ABAP_BOOL.
  data:          LS_TRIM_ALLOC_GRID   type          ZVCXI_P0SS_S_TRIM_ALLOC_GRID,
                 LS_TRIM_ALLOC_VIS    type          ZVCXI_P0SS_S_TRIM_ALLOC_VIS.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

***------------------------------------------------------------------------------------------------
*** Add Entries
*** Division Trim Width
  clear: LS_TRIM_ALLOC_GRID, LF_OVERLAP_ACTIVE, LF_TRIM_ERROR, LF_OVERLAP_ERROR.
  LS_TRIM_ALLOC_VIS = ME->GET_TRIM_ALLOC_VIS( IF_TRIDI_ID = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_DTRIW ).

  if LS_TRIM_ALLOC_VIS-TRITO is not initial or
     LS_TRIM_ALLOC_VIS-OVLTO is not initial.
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_TRIM_ALLOC_VIS to LS_TRIM_ALLOC_GRID.
    if LS_TRIM_ALLOC_VIS-OVLTO is not initial.
      move ABAP_TRUE to: ME->F_OVERLAP_ACTIVE, LF_OVERLAP_ACTIVE.
    endif.

*** Check Trim/Overlap Error
    ME->CHECK_SUM( exporting IS_TRIM_ALLOC_VIS = LS_TRIM_ALLOC_VIS
                   importing EF_TRIM_ERROR     = LF_TRIM_ERROR
                             EF_OVERLAP_ERROR  = LF_OVERLAP_ERROR ).

    ME->CHANGE_COLOR_TRIM_ALLOC( exporting IF_TRIM_ERROR    = LF_TRIM_ERROR
                                           IF_OVERLAP_ERROR = LF_OVERLAP_ERROR
                                 changing  CT_SCOL          = LS_TRIM_ALLOC_GRID-T_SCOL ).
*** Change Style
    ME->CHANGE_STYLE_TRIM_ALLOC( exporting IF_OVERLAP_ACTIVE = LF_OVERLAP_ACTIVE
                                 changing  CT_STYL           = LS_TRIM_ALLOC_GRID-T_STYL ).

    move-corresponding LS_TRIM_ALLOC_GRID to <S_DATA>.
  endif.

*** Division Trim Length
  clear: LS_TRIM_ALLOC_GRID, LF_OVERLAP_ACTIVE, LF_TRIM_ERROR, LF_OVERLAP_ERROR.
  LS_TRIM_ALLOC_VIS = ME->GET_TRIM_ALLOC_VIS( IF_TRIDI_ID = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_DTRIL ).

  if LS_TRIM_ALLOC_VIS-TRITO is not initial or
     LS_TRIM_ALLOC_VIS-OVLTO is not initial.
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_TRIM_ALLOC_VIS to LS_TRIM_ALLOC_GRID.
    if LS_TRIM_ALLOC_VIS-OVLTO is not initial.
      move ABAP_TRUE to: ME->F_OVERLAP_ACTIVE, LF_OVERLAP_ACTIVE.
    endif.

*** Check Trim/Overlap Error
    ME->CHECK_SUM( exporting IS_TRIM_ALLOC_VIS = LS_TRIM_ALLOC_VIS
                   importing EF_TRIM_ERROR     = LF_TRIM_ERROR
                             EF_OVERLAP_ERROR  = LF_OVERLAP_ERROR ).

    ME->CHANGE_COLOR_TRIM_ALLOC( exporting IF_TRIM_ERROR    = LF_TRIM_ERROR
                                           IF_OVERLAP_ERROR = LF_OVERLAP_ERROR
                                 changing  CT_SCOL          = LS_TRIM_ALLOC_GRID-T_SCOL ).
*** Change Style
    ME->CHANGE_STYLE_TRIM_ALLOC( exporting IF_OVERLAP_ACTIVE = LF_OVERLAP_ACTIVE
                                 changing  CT_STYL           = LS_TRIM_ALLOC_GRID-T_STYL ).

    move-corresponding LS_TRIM_ALLOC_GRID to <S_DATA>.
  endif.

*** Side Trim
  clear: LS_TRIM_ALLOC_GRID, LF_OVERLAP_ACTIVE, LF_TRIM_ERROR, LF_OVERLAP_ERROR.
  LS_TRIM_ALLOC_VIS = ME->GET_TRIM_ALLOC_VIS( IF_TRIDI_ID = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_TRIPS ).

  if LS_TRIM_ALLOC_VIS-TRITO is not initial or
     LS_TRIM_ALLOC_VIS-OVLTO is not initial.
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_TRIM_ALLOC_VIS to LS_TRIM_ALLOC_GRID.
    if LS_TRIM_ALLOC_VIS-OVLTO is not initial.
      move ABAP_TRUE to: ME->F_OVERLAP_ACTIVE, LF_OVERLAP_ACTIVE.
    endif.

*** Check Trim/Overlap Error
    ME->CHECK_SUM( exporting IS_TRIM_ALLOC_VIS = LS_TRIM_ALLOC_VIS
                   importing EF_TRIM_ERROR     = LF_TRIM_ERROR
                             EF_OVERLAP_ERROR  = LF_OVERLAP_ERROR ).

    ME->CHANGE_COLOR_TRIM_ALLOC( exporting IF_TRIM_ERROR    = LF_TRIM_ERROR
                                           IF_OVERLAP_ERROR = LF_OVERLAP_ERROR
                                 changing  CT_SCOL          = LS_TRIM_ALLOC_GRID-T_SCOL ).
*** Change Style
    ME->CHANGE_STYLE_TRIM_ALLOC( exporting IF_OVERLAP_ACTIVE = LF_OVERLAP_ACTIVE
                                 changing  CT_STYL           = LS_TRIM_ALLOC_GRID-T_STYL ).

    move-corresponding LS_TRIM_ALLOC_GRID to <S_DATA>.
  endif.

*** Length Trim
  clear: LS_TRIM_ALLOC_GRID, LF_OVERLAP_ACTIVE, LF_TRIM_ERROR, LF_OVERLAP_ERROR.
  LS_TRIM_ALLOC_VIS = ME->GET_TRIM_ALLOC_VIS( IF_TRIDI_ID = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_TRIPL ).

  if LS_TRIM_ALLOC_VIS-TRITO is not initial or
     LS_TRIM_ALLOC_VIS-OVLTO is not initial.
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_TRIM_ALLOC_VIS to LS_TRIM_ALLOC_GRID.
    if LS_TRIM_ALLOC_VIS-OVLTO is not initial.
      move ABAP_TRUE to: ME->F_OVERLAP_ACTIVE, LF_OVERLAP_ACTIVE.
    endif.

*** Check Trim/Overlap Error
    ME->CHECK_SUM( exporting IS_TRIM_ALLOC_VIS = LS_TRIM_ALLOC_VIS
                   importing EF_TRIM_ERROR     = LF_TRIM_ERROR
                             EF_OVERLAP_ERROR  = LF_OVERLAP_ERROR ).

    ME->CHANGE_COLOR_TRIM_ALLOC( exporting IF_TRIM_ERROR    = LF_TRIM_ERROR
                                           IF_OVERLAP_ERROR = LF_OVERLAP_ERROR
                                 changing  CT_SCOL          = LS_TRIM_ALLOC_GRID-T_SCOL ).
*** Change Style
    ME->CHANGE_STYLE_TRIM_ALLOC( exporting IF_OVERLAP_ACTIVE = LF_OVERLAP_ACTIVE
                                 changing  CT_STYL           = LS_TRIM_ALLOC_GRID-T_STYL ).

    move-corresponding LS_TRIM_ALLOC_GRID to <S_DATA>.
  endif.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

  move ABAP_TRUE to RS_LAYOUT-NO_ROWMARK.
  move 'T_SCOL'  to RS_LAYOUT-CTAB_FNAME.

endmethod.
method GET_TRIM_ALLOC_VIS.

  data:  LS_TRITO          type ZVCXI_P0SS_S_TRITO,
         LS_TRILT          type ZVCXI_P0SS_S_TRILT,
         LS_TRIRB          type ZVCXI_P0SS_S_TRIRB,
         LS_OVLTO          type ZVCXI_P0SS_S_OVLTO,
         LS_OVLLT          type ZVCXI_P0SS_S_OVLLT,
         LS_OVLRB          type ZVCXI_P0SS_S_OVLRB.

*** Set Trim ID
  move IF_TRIDI_ID  to RS_TRIM_ALLOC_VIS-TRIDI_ID.

*** Get Descriptions
  case IF_TRIDI_ID.
    when ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_DTRIW.
***   Division Trim Width
      move ME->R_PR_SCSTR_MGR->GET_DTRIW_DESCR( ) to RS_TRIM_ALLOC_VIS-TRIDI.

    when ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_DTRIL.
***   Division Trim Length
      move ME->R_PR_SCSTR_MGR->GET_DTRIL_DESCR( ) to RS_TRIM_ALLOC_VIS-TRIDI.

    when ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_TRIPS.
***   Side Trim
      move ME->R_PR_SCSTR_MGR->GET_TRIPS_DESCR( ) to RS_TRIM_ALLOC_VIS-TRIDI.

    when ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_TRIPL.
***   Length Trim
      move ME->R_PR_SCSTR_MGR->GET_TRIPL_DESCR( ) to RS_TRIM_ALLOC_VIS-TRIDI.

  endcase.

*** Get Trim Value
  ME->R_PR_SCSTR_MGR->GET_TRIM( exporting IF_PARID    = RS_TRIM_ALLOC_VIS-TRIDI_ID
                                importing ES_TRITO    = LS_TRITO
                                          ES_TRILT    = LS_TRILT
                                          ES_TRIRB    = LS_TRIRB
                                          ES_OVLTO    = LS_OVLTO
                                          ES_OVLLT    = LS_OVLLT
                                          ES_OVLRB    = LS_OVLRB ).
  move-corresponding LS_TRITO to RS_TRIM_ALLOC_VIS.
  move-corresponding LS_TRILT to RS_TRIM_ALLOC_VIS.
  move-corresponding LS_TRIRB to RS_TRIM_ALLOC_VIS.
  move-corresponding LS_OVLTO to RS_TRIM_ALLOC_VIS.
  move-corresponding LS_OVLLT to RS_TRIM_ALLOC_VIS.
  move-corresponding LS_OVLRB to RS_TRIM_ALLOC_VIS.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LF_PARID_TRIM        type          /VCXI/VKS_PARID.
  data:          LS_TRIM_ALLOC_VIS    type          ZVCXI_P0SS_S_TRIM_ALLOC_VIS,
                 LS_TRILT             type          ZVCXI_P0SS_S_TRILT,
                 LS_TRIRB             type          ZVCXI_P0SS_S_TRIRB,
                 LS_OVLLT             type          ZVCXI_P0SS_S_OVLLT,
                 LS_OVLRB             type          ZVCXI_P0SS_S_OVLRB,
                 LS_GOOD_CELLS        type          LVC_S_MODI.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                           ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at ET_GOOD_CELLS into LS_GOOD_CELLS.

        read table <T_DATA> assigning <S_DATA> index LS_GOOD_CELLS-ROW_ID.
        move-corresponding <S_DATA> to LS_TRIM_ALLOC_VIS.

        clear: LS_TRILT, LS_TRIRB.
        move-corresponding LS_TRIM_ALLOC_VIS to: LS_TRILT, LS_TRIRB, LS_OVLLT, LS_OVLRB.

        case LS_TRIM_ALLOC_VIS-TRIDI_ID.
          when ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_DTRIL or
               ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_TRIPL.
            move ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_OLLEN to LF_PARID_TRIM.
          when ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_DTRIW or
               ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_TRIPS.
            move ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_TRIM_PARID_OLWID to LF_PARID_TRIM.
        endcase.

        if LS_GOOD_CELLS-FIELDNAME eq 'TRILT'.
          ME->R_PR_SCSTR_MGR->SET_TRIM( IF_PARID = LS_TRIM_ALLOC_VIS-TRIDI_ID
                                        IS_TRILT = LS_TRILT
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        elseif LS_GOOD_CELLS-FIELDNAME eq 'TRIRB'.
          ME->R_PR_SCSTR_MGR->SET_TRIM( IF_PARID = LS_TRIM_ALLOC_VIS-TRIDI_ID
                                        IS_TRIRB = LS_TRIRB
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        endif.
        if LS_GOOD_CELLS-FIELDNAME eq 'OVLLT'.
          ME->R_PR_SCSTR_MGR->SET_TRIM( IF_PARID = LF_PARID_TRIM
                                        IS_OVLLT = LS_OVLLT
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        elseif LS_GOOD_CELLS-FIELDNAME eq 'OVLRB'.
          ME->R_PR_SCSTR_MGR->SET_TRIM( IF_PARID = LS_TRIM_ALLOC_VIS-TRIDI_ID
                                        IS_OVLRB = LS_OVLRB
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
        endif.

      endloop.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZCL_VCXI_P0SS_PR_SCSTR_MGR=>C_IEVNT_O_TRIM_ALLOC_CHANGED ).
      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
