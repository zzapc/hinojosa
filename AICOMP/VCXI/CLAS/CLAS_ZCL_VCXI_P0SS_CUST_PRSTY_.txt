
class ZCL_VCXI_P0SS_CUST_PRSTY definition
  public
  create public .

public section.

  types:
    YT_TC500 type standard table of ZVCXI_P0S_TC500 with default key .
  types:
    YT_TC500T type standard table of ZVCXI_P0S_TC500T with default key .
  types:
    YT_TC501 type standard table of ZVCXI_P0S_TC501 with default key .
  types:
    YT_TC333T type standard table of ZVCXI_P0S_TC333T with default key .
  types:
    YT_TC333  type standard table of ZVCXI_P0S_TC333 with default key .
  types:
    YT_TC334 type standard table of ZVCXI_P0S_TC334 with default key .
  types:
    begin of YS_INSTANCE,
                                TPRST      type        ZVCXI_P0SS_TPRST,
                                PRSTY      type        ZVCXI_P0SS_PRSTY,
                                OWNER      type        /VCXI/CKX_STRING,
                                SYSOM      type        /VCXI/VKS_SYSOM,
                                R_INSTANCE type ref to ZCL_VCXI_P0SS_CUST_PRSTY,
                              end   of YS_INSTANCE .
  types:
    YT_INSTANCE type standard table of YS_INSTANCE with default key .
  types:
    YT_TC200T type standard table of ZVCXI_P0S_TC200T with default key .
  types:
    YT_SSCOR_INFO type standard table of ZVCXI_P0SS_S_SSCOR_INFO with default key .
  types:
    YT_TC320 type standard table of ZVCXI_P0S_TC320 with default key .
  types:
    YT_TC340 type standard table of ZVCXI_P0S_TC340 with default key .
  types:
    YT_TC340T type standard table of ZVCXI_P0S_TC340T with default key .
  types:
    YT_TC310T type standard table of ZVCXI_P0S_TC310T with default key .
  types:
    YT_TC311 type standard table of ZVCXI_P0S_TC311 with default key .
  types:
    YT_TC341 type standard table of ZVCXI_P0S_TC341 with default key .
  types:
    YT_TD342 type standard table of ZVCXI_P0S_TD342 with default key .
  types:
    YT_TD343 type standard table of ZVCXI_P0S_TD343 with default key .
  types:
    YT_TD311 type standard table of ZVCXI_P0S_TD311 with default key .
  types:
    YT_TC370T type standard table of ZVCXI_P0S_TC370T with default key .
  types:
    YT_TD371 type standard table of ZVCXI_P0S_TD371 with default key .
  types:
    YT_TC100 type standard table of ZVCXI_P0S_TC100 with default key .
  types:
    YT_TC100T type standard table of ZVCXI_P0S_TC100T with default key .
  types:
    YT_TC101 type standard table of ZVCXI_P0S_TC101 with default key .
  types:
    YT_TC200 type standard table of ZVCXI_P0S_TC200 with default key .
  types:
    YT_TSCOR_INFO type standard table of ZVCXI_P0SS_S_TSCOR_INFO with default key .
  types:
    YT_TC210 type standard table of ZVCXI_P0S_TC210 with default key .
  types:
    YT_TC211 type standard table of ZVCXI_P0S_TC211 with default key .

  constants C_CSCOR_CROSS type ZVCXI_P0SS_CSCOR value 'C' ##NO_TEXT.
  constants C_CSCOR_LENGTH type ZVCXI_P0SS_CSCOR value 'L' ##NO_TEXT.
  constants C_IELEM_CALIP type ZVCXI_P0SS_IELEM value 'CALIPER' ##NO_TEXT.
  constants C_IELEM_FANLE type ZVCXI_P0SS_IELEM value 'FANLE' ##NO_TEXT.
  constants C_IELEM_FDUST type ZVCXI_P0SS_IELEM value 'DUST_FLAP' ##NO_TEXT.
  constants C_IELEM_FLAP type ZVCXI_P0SS_IELEM value 'FLAP' ##NO_TEXT.
  constants C_IELEM_FLAP_EXT_B type ZVCXI_P0SS_IELEM value 'FLAP_EXT_B' ##NO_TEXT.
  constants C_IELEM_FLAP_EXT_T type ZVCXI_P0SS_IELEM value 'FLAP_EXT_T' ##NO_TEXT.
  constants C_IELEM_FTUCK type ZVCXI_P0SS_IELEM value 'TUCKIN_FLAP' ##NO_TEXT.
  constants C_IELEM_GAP_FLAP_B type ZVCXI_P0SS_IELEM value 'GAP_FLAP_B' ##NO_TEXT.
  constants C_IELEM_GAP_FLAP_T type ZVCXI_P0SS_IELEM value 'GAP_FLAP_T' ##NO_TEXT.
  constants C_IELEM_GLUE_FLAP type ZVCXI_P0SS_IELEM value 'GLUE_FLAP' ##NO_TEXT.
  constants C_IELEM_HEIGHT type ZVCXI_P0SS_IELEM value 'HEIGHT' ##NO_TEXT.
  constants C_IELEM_HEIGHT2 type ZVCXI_P0SS_IELEM value 'HEIGHT2' ##NO_TEXT.
  constants C_IELEM_JOIWI type ZVCXI_P0SS_IELEM value 'JOINT WIDTH' ##NO_TEXT.
  constants C_IELEM_LENGTH type ZVCXI_P0SS_IELEM value 'LENGTH' ##NO_TEXT.
  constants C_IELEM_OVLAP type ZVCXI_P0SS_IELEM value 'OVLAP' ##NO_TEXT.
  constants C_IELEM_ROLEN type ZVCXI_P0SS_IELEM value 'ROLEN' ##NO_TEXT.
  constants C_IELEM_SHTNL type ZVCXI_P0SS_IELEM value 'SHTNL' ##NO_TEXT.
  constants C_IELEM_SHTNW type ZVCXI_P0SS_IELEM value 'SHTNW' ##NO_TEXT.
  constants C_IELEM_SHTPL type ZVCXI_P0SS_IELEM value 'SHTPL' ##NO_TEXT.
  constants C_IELEM_SHTPW type ZVCXI_P0SS_IELEM value 'SHTPW' ##NO_TEXT.
  constants C_IELEM_WIDTH type ZVCXI_P0SS_IELEM value 'WIDTH' ##NO_TEXT.
  constants C_TFOLD_CLOSED type ZVCXI_P0SS_TFOLD value 'C' ##NO_TEXT.
  constants C_TFOLD_OPEN type ZVCXI_P0SS_TFOLD value 'O' ##NO_TEXT.
  data F_OWNER type /VCXI/CKX_STRING read-only .
  data F_PRSTY type ZVCXI_P0SS_PRSTY read-only .
  data F_SYSOM type /VCXI/VKS_SYSOM .
  data F_TPRST type ZVCXI_P0SS_TPRST read-only .
  data R_MSG type ref to /VCXI/CL_CKXM_MESSAGE read-only .
  class-data T_TC100 type YT_TC100 read-only .
  class-data T_TC100T type YT_TC100T read-only .
  class-data T_TC101 type YT_TC101 read-only .
  class-data T_TC200 type YT_TC200 read-only .
  class-data T_TC310T type YT_TC310T read-only .
  class-data T_TC311 type YT_TC311 read-only .
  class-data T_TC333 type YT_TC333 .
  class-data T_TC333T type YT_TC333T .
  class-data T_TC334 type YT_TC334 read-only .
  class-data T_TC340 type YT_TC340 read-only .
  class-data T_TC340T type YT_TC340T read-only .
  class-data T_TC341 type YT_TC341 read-only .
  class-data T_TC370T type YT_TC370T read-only .
  class-data T_TC500 type YT_TC500 .
  class-data T_TC500T type YT_TC500T .
  class-data T_TC501 type YT_TC501 .
  class-data T_TD311 type YT_TD311 read-only .
  class-data T_TD342 type YT_TD342 read-only .
  class-data T_TD343 type YT_TD343 read-only .
  class-data T_TD371 type YT_TD371 read-only .
  class-data T_TSCOR_INFO type YT_TSCOR_INFO read-only .

  methods GET_TSCOR_DEFAULT
    importing
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
      !IF_NSCOR type ZVCXI_P0SS_NSCOR
      !IF_PANOR type ZVCXI_P0SS_PANOR optional
      !IF_BOXPA type ZVCXI_P0SS_BOXPA optional
    returning
      value(RF_TSCOR) type ZVCXI_P0SS_TSCOR
    raising
      /VCXI/CX_CKX .
  methods GET_FSLIN
    importing
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
      !IF_NSCOR type ZVCXI_P0SS_NSCOR
      !IF_PANOR type ZVCXI_P0SS_PANOR optional
      !IF_BOXPA type ZVCXI_P0SS_BOXPA optional
    returning
      value(RF_FSLIN) type ZVCXI_P0SS_FSLIN
    raising
      /VCXI/CX_CKX .
  methods CHECK_CUST_DESIGN
    returning
      value(RF_FCUSD) type ZVCXI_P0SS_FCUSD
    raising
      /VCXI/CX_CKX .
  methods CHECK_JOITY
    returning
      value(RF_OKAY) type ABAP_BOOL .
  class-methods CHECK_PRSTY_EXIST
    importing
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_PTYPE
    returning
      value(RF_OKAY) type ABAP_BOOL .
  class-methods CHECK_PTYPE_EXIST
    importing
      !IF_PTYPE type ZVCXI_P0S_PTYPE
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_SCORE_ELEMENT
    importing
      !IF_IELEM type ZVCXI_P0SS_IELEM
      !IF_BOXPA type ZVCXI_P0SS_BOXPA optional
    returning
      value(RF_USED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_SCORE_MULTI_BOXPA
    returning
      value(RT_BOXPA) type ZVCXI_P0SS_TT_BOXPA
    raising
      /VCXI/CX_CKX .
  methods CHECK_SCORE_SUM
    importing
      !IT_SCORE type ZVCXI_P0SS_TT_SCORE
    returning
      value(RF_OKAY) type CHAR01
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR
    importing
      !IF_TPRST type ZVCXI_P0SS_TPRST
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
      !IF_OWNER type /VCXI/CKX_STRING optional
      !IF_SYSOM type /VCXI/VKS_SYSOM
    raising
      /VCXI/CX_CKX .
  methods GET_ELEMENT_DEFAULT
    importing
      !IF_IELEM type ZVCXI_P0SS_IELEM
      !IT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT
    returning
      value(RS_DVALUE) type ZVCXI_P0SS_S_DVALU
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IF_TPRST type ZVCXI_P0SS_TPRST
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
      !IF_OWNER type /VCXI/CKX_STRING optional
      !IF_SYSOM type /VCXI/VKS_SYSOM optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_P0SS_CUST_PRSTY
    raising
      /VCXI/CX_CKX .
  class-methods GET_JOITY_AVGCO
    importing
      !IF_WERKS type WERKS_D optional
      !IF_MATNR type MATNR optional
      !IF_ARBPL type ARBPL optional
      !IF_DATE type DATS default SY-DATUM
    exporting
      !ES_AVGCO type ZVCXI_XCS_S_AVGCO
      !ES_AVGCP type ZVCXI_XCS_S_AVGCP
    raising
      /VCXI/CX_CKX .
  class-methods GET_JOITY_DEF
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY
    returning
      value(RS_JOITY_DEF) type ZVCXI_P0S_TC340
    raising
      /VCXI/CX_CKX .
  class-methods GET_JOITY_DESCR
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_JOITY_JOIPO
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY optional
      !IF_JOIPO type ZVCXI_P0S_JOIPO optional
    exporting
      !EF_EXIST type ABAP_BOOL
      !ET_TC341 type YT_TC341
      !EF_DEFAULT_JOIPO type ZVCXI_P0S_JOIPO
    raising
      /VCXI/CX_CKX .
  class-methods GET_JOITY_MCONSU
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY optional
      !IF_MATNR type MATNR optional
      !IF_ISVCE type ZVCXI_XCS_ISVCE optional
      !IF_DATE type DATS default SY-DATUM
    exporting
      !EF_EXIST type ABAP_BOOL
      !ET_TD342 type YT_TD342
    raising
      /VCXI/CX_CKX .
  class-methods GET_PANOR_DESCR
    importing
      !IF_PANOR type ZVCXI_P0SS_PANOR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_PANOR_JOIPO
    importing
      !IF_PANOR type ZVCXI_P0SS_PANOR optional
      !IF_JOIPO type ZVCXI_P0S_JOIPO optional
    exporting
      !EF_EXIST type ABAP_BOOL
      !ET_TC311 type YT_TC311
    raising
      /VCXI/CX_CKX .
  class-methods GET_PRSTY_DESCR
    importing
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
      !IF_TPRST type ZVCXI_P0SS_TPRST
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_FOLDING
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY
      !IT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT
      !IF_ORIEN type ZVCXI_P0S_ORIEN
      !IS_FOLLE type ZVCXI_P0SS_S_FOLLE optional
      !IS_FOLWI type ZVCXI_P0SS_S_FOLWI optional
      !IS_FOLHE type ZVCXI_P0SS_S_FOLHE optional
    exporting
      value(ES_FOLLE) type ZVCXI_P0SS_S_FOLLE
      value(ES_FOLWI) type ZVCXI_P0SS_S_FOLWI
      value(ES_FOLHE) type ZVCXI_P0SS_S_FOLHE
    raising
      /VCXI/CX_CKX .
  class-methods GET_PRSTY_PTYPE
    returning
      value(RT_PRSTY_PTYPE) type ZVCXI_P0SSC_TT_PRSTY_PTYPE
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_SCORES
    importing
      !IF_BOXPA type ZVCXI_P0SS_BOXPA optional
      !IF_PANOR type ZVCXI_P0SS_PANOR
      !IT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_PTYPE type ZVCXI_P0S_PTYPE
      !IF_JOIPO type ZVCXI_P0S_JOIPO
      !IT_SCORE type ZVCXI_P0SS_TT_SCORE optional
      !IF_DATE type DATS
    exporting
      !ET_SCORE type ZVCXI_P0SS_TT_SCORE
      !EF_CHANGED type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods GET_SSCOR_CALC
    importing
      !IF_SSCOR type ZVCXI_P0SS_SSCOR optional
    returning
      value(RF_CALCM) type CHAR01
    raising
      /VCXI/CX_CKX .
  class-methods GET_SSCOR_INFO
    importing
      !IF_SSCOR type ZVCXI_P0SS_SSCOR optional
    returning
      value(RS_SSCOR_INFO) type ZVCXI_P0SS_S_SSCOR_INFO
    raising
      /VCXI/CX_CKX .
  class-methods GET_STITCH_DEF
    importing
      !IF_WERKS type WERKS_D
    returning
      value(RS_STITCH_DEF) type ZVCXI_P0S_TD311
    raising
      /VCXI/CX_CKX .
  class-methods GET_TFOLD
    importing
      !IF_JOITY type ZVCXI_P0S_JOITY
    returning
      value(RF_TFOLD) type ZVCXI_P0SS_TFOLD
    raising
      /VCXI/CX_CKX .
  class-methods GET_TSCOR_INFO
    importing
      !IF_TSCOR type ZVCXI_P0SS_TSCOR optional
    returning
      value(RS_TSCOR_INFO) type ZVCXI_P0SS_S_TSCOR_INFO
    raising
      /VCXI/CX_CKX .
  class-methods GET_TTAPE_DESCR
    importing
      !IF_TTAPE type ZVCXI_P0S_TTAPE
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_TTAPE_MATNR
    importing
      !IF_WERKS type WERKS_D optional
      !IF_MATNR type MATNR optional
      !IF_TTAPE type ZVCXI_P0S_TTAPE optional
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_BOXPA
    returning
      value(RT_BOXPA) type ZVCXI_P0SS_TT_BOXPA
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_JOITY
    exporting
      !EF_DEFAULT type ZVCXI_P0S_JOITY
    returning
      value(RT_JOITY) type ZVCXI_P0SS_TT_JOITY
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_PANOR
    returning
      value(RT_PANOR) type ZVCXI_P0SS_TT_PANOR
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_DIMEN_HEIGHT type ZVCXI_P0SS_DIMEN value 'H' ##NO_TEXT.
  constants C_DIMEN_LENGTH type ZVCXI_P0SS_DIMEN value 'L' ##NO_TEXT.
  constants C_DIMEN_WIDTH type ZVCXI_P0SS_DIMEN value 'W' ##NO_TEXT.
  constants C_FLAIN_BOTTOM type ZVCXI_P0SS_FLAIN value 'B' ##NO_TEXT.
  constants C_FLAIN_TOP type ZVCXI_P0SS_FLAIN value 'T' ##NO_TEXT.
  constants C_JOIPO_INSIDE type ZVCXI_P0S_JOIPO value 'I' ##NO_TEXT.
  constants C_JOIPO_OUTSIDE type ZVCXI_P0S_JOIPO value 'O' ##NO_TEXT.
  constants C_SEPARATOR_MINUS type CHAR01 value '-' ##NO_TEXT.
  constants C_SEPARATOR_PLUS type CHAR01 value '+' ##NO_TEXT.
  data F_BOXPA type ZVCXI_P0SS_BOXPA .
  data F_DATE type DATS .
  data F_JOIPO type ZVCXI_P0S_JOIPO .
  data F_JOITY type ZVCXI_P0S_JOITY .
  data F_ORIEN type ZVCXI_P0S_ORIEN .
  data F_PANOR type ZVCXI_P0SS_PANOR .
  data F_PTYPE type ZVCXI_P0S_PTYPE .
  data F_RECALC_FOLDING type ABAP_BOOL .
  data F_RECALC_SCORES type ABAP_BOOL .
  data F_WERKS type WERKS_D .
  data R_PRSTY type ref to ZCL_VCXI_P0SSC_PRSTY .
  data S_FOLHE type ZVCXI_P0SS_S_FOLHE .
  data S_FOLLE type ZVCXI_P0SS_S_FOLLE .
  data S_FOLWI type ZVCXI_P0SS_S_FOLWI .
  data T_ELEMENT type ZVCXI_P0SS_TT_ELEMENT .
  data T_ELEMENT_FOLDM type ZVCXI_P0SS_TT_ELEMENT .
  class-data T_INSTANCE type YT_INSTANCE .
  data T_SCORE type ZVCXI_P0SS_TT_SCORE .
  class-data T_SSCOR_INFO type YT_SSCOR_INFO .
  class-data T_TC200T type YT_TC200T .
  data T_TC210 type YT_TC210 .
  data T_TC211 type YT_TC211 .
  data T_TC320 type YT_TC320 .
  data T_TC320_DEFAULT type YT_TC320 .

  methods ROUND_SCORE
    importing
      !IF_DECIP type ZVCXI_XCS_DECIP
      !IF_OPROU type ZVCXI_XCS_OPROU
    changing
      !CS_SCORP type ZVCXI_P0SS_S_SCORP
    raising
      /VCXI/CX_CKX .
  methods GET_ROUNDING_INFO
    exporting
      !EF_DECIP type ZVCXI_XCS_DECIP
      !EF_OPROU type ZVCXI_XCS_OPROU
    raising
      /VCXI/CX_CKX .
  methods ADJ_SCORE_FLAP
    importing
      !IF_FLAIN type ZVCXI_P0SS_FLAIN
    changing
      !CS_ELEMV type ZVCXI_P0SS_S_ELEMV
    raising
      /VCXI/CX_CKX .
  methods CALC_FOLDING
    raising
      /VCXI/CX_CKX .
  methods CALC_SCORES
    raising
      /VCXI/CX_CKX .
  methods CHECK_CALC_FOLDM_PARAMS
    returning
      value(RF_PARAMS_OK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_CALC_SCORE_PARAMS
    returning
      value(RF_PARAMS_OK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_MANTU
    exporting
      !EF_GMATU type ZVCXI_P0SSC_GMATU
      !EF_FOTAU_UOM type UNIT
    raising
      /VCXI/CX_CKX .
  methods GET_DVALU
    importing
      !IF_IELEM type ZVCXI_P0SS_IELEM
      !IT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT
    returning
      value(RS_DVALU) type ZVCXI_P0SS_S_DVALU
    raising
      /VCXI/CX_CKX .
  methods GET_FOLDM_ELEMV
    importing
      !IF_IELEM type ZVCXI_P0SS_IELEM
    returning
      value(RS_ELEMV) type ZVCXI_P0SS_S_ELEMV
    raising
      /VCXI/CX_CKX .
  methods GET_FOTAU
    importing
      !IF_FODEG type ZVCXI_P0SS_FODEG
      !IS_FOTAU_PREV type ZVCXI_P0SS_S_FOTAU
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
      !IF_NSCOR type ZVCXI_P0SS_NSCOR
    exporting
      value(ES_FOTAU) type ZVCXI_P0SS_S_FOTAU
      value(ES_FOTAU_NEXT) type ZVCXI_P0SS_S_FOTAU
    raising
      /VCXI/CX_CKX .
  methods GET_MANTU
    importing
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
      !IF_NSCOR type ZVCXI_P0SS_NSCOR
    returning
      value(RS_FOTAU) type ZVCXI_P0SS_S_FOTAU
    raising
      /VCXI/CX_CKX .
  methods GET_SCORE_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_SCORE_ELEMV
    importing
      !IF_IELEM type ZVCXI_P0SS_IELEM
      !IF_SEPARATOR type CHAR01 optional
    returning
      value(RS_ELEMV) type ZVCXI_P0SS_S_ELEMV
    raising
      /VCXI/CX_CKX .
  methods INIT_FODEG
    raising
      /VCXI/CX_CKX .
  methods INIT_MANTU
    raising
      /VCXI/CX_CKX .
  methods PREPARE_SCORES
    changing
      !CT_PRSTY_SCORE type ZVCXI_P0SSC_TT_PRSTY_SCORE
    raising
      /VCXI/CX_CKX .
private section.

  constants C_NSCOR_FIRST type ZVCXI_P0SS_NSCOR value '01' ##NO_TEXT.
  class-data T_PRSTY_PTYPE type ZVCXI_P0SSC_TT_PRSTY_PTYPE .
endclass. "ZCL_VCXI_P0SS_CUST_PRSTY definition
class ZCL_VCXI_P0SS_CUST_PRSTY implementation.
method ADJ_SCORE_FLAP.

  data:          LF_OPERA          type CHAR01.
  data:          LS_ELEMV          type ZVCXI_P0SS_S_ELEMV.



  case IF_FLAIN.
    when C_FLAIN_TOP.

*** --------------------------------------------------------------------
*** Try to get Flap Extension - TOP
      LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = C_IELEM_FLAP_EXT_T ).

      if LS_ELEMV is not initial.
        move ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD to LF_OPERA.
      else.

*** --------------------------------------------------------------------
*** Try to get Gap in Flap - TOP
        LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = C_IELEM_GAP_FLAP_T ).

        if LS_ELEMV is not initial.
          move ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT to LF_OPERA.
        endif.
      endif.

    when C_FLAIN_BOTTOM.

*** --------------------------------------------------------------------
*** Try to get Flap Extension - BOTTOM
      LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = C_IELEM_FLAP_EXT_B ).

      if LS_ELEMV is not initial.
        move ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD to LF_OPERA.
      else.

*** --------------------------------------------------------------------
*** Try to get Gap in Flap - BOTTOM
        LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = C_IELEM_GAP_FLAP_B ).

        if LS_ELEMV is not initial.
          move ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT to LF_OPERA.
        endif.

      endif.
  endcase.

  check CS_ELEMV is not initial and
        LS_ELEMV is not initial and
        LF_OPERA is not initial.

  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
    exporting IF_CALCV_1     = CS_ELEMV-ELEMV
              IF_CALCV_UOM_1 = CS_ELEMV-ELEMV_UOM
              IF_CALCV_2     = LS_ELEMV-ELEMV
              IF_CALCV_UOM_2 = LS_ELEMV-ELEMV_UOM
              IF_OPERA       = LF_OPERA
              IF_UOM         = CS_ELEMV-ELEMV_UOM
    importing EF_CALCV       = CS_ELEMV-ELEMV
              EF_CALCV_UOM   = CS_ELEMV-ELEMV_UOM ).

endmethod.                    "ADJ_SCORE_FLAP
method CALC_FOLDING.

  data:          LS_TC340       type ZVCXI_P0S_TC340,
                 LS_PRSTY_FOLDM type ZVCXI_P0SSC_S_PRSTY_FOLDM,
                 LS_ELEMV       type ZVCXI_P0SS_S_ELEMV.
  data:          LT_PRSTY_FOLDM type ZVCXI_P0SSC_TT_PRSTY_FOLDM.
  field-symbols: <F_VALUE>      type any,
                 <F_VALUE_UOM>  type any.

  check ME->F_RECALC_FOLDING eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_RECALC_FOLDING.

  clear: ME->S_FOLLE-FOLLE, ME->S_FOLWI-FOLWI, ME->S_FOLHE-FOLHE.

*** --------------------------------------------------------------------
*** Get Folding Type
  read table ME->T_TC340 into LS_TC340
                         with key JOITY = ME->F_JOITY.

  check SY-SUBRC = 0.

*** --------------------------------------------------------------------
*** Start Calculation with Folding Measurements
  check ME->R_PRSTY is bound.
  LT_PRSTY_FOLDM = ME->R_PRSTY->GET_PRSTY_FOLDM( IF_TFOLD = LS_TC340-TFOLD
                                                 IF_ORIEN = ME->F_ORIEN ).
  loop at LT_PRSTY_FOLDM into LS_PRSTY_FOLDM.
    LS_ELEMV = ME->GET_FOLDM_ELEMV( IF_IELEM = LS_PRSTY_FOLDM-IELEM ).

    if LS_PRSTY_FOLDM-ELEMD is not initial.
      LS_ELEMV-ELEMV = LS_ELEMV-ELEMV * ( LS_PRSTY_FOLDM-ELEMN / LS_PRSTY_FOLDM-ELEMD ).
    else.
***   Check Denominator on Folding Dimensions. Value 0 is not allowed!
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_P0SS'
                                            IF_MSGNO = '011' ).
    endif.

*** --------------------------------------------------------------------
*** Assign the right Folding dimension
    case LS_PRSTY_FOLDM-DIMEN.
      when C_DIMEN_LENGTH.
        assign ME->S_FOLLE-FOLLE     to <F_VALUE>.
        assign ME->S_FOLLE-FOLLE_UOM to <F_VALUE_UOM>.
      when C_DIMEN_WIDTH.
        assign ME->S_FOLWI-FOLWI     to <F_VALUE>.
        assign ME->S_FOLWI-FOLWI_UOM to <F_VALUE_UOM>.
      when C_DIMEN_HEIGHT.
        assign ME->S_FOLHE-FOLHE     to <F_VALUE>.
        assign ME->S_FOLHE-FOLHE_UOM to <F_VALUE_UOM>.
    endcase.

    check <F_VALUE>     is assigned and
          <F_VALUE_UOM> is assigned.

    if <F_VALUE_UOM> is initial.
      move LS_ELEMV-ELEMV_UOM to <F_VALUE_UOM>.
    endif.

*** Do the defined Operation
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <F_VALUE>
                                                        IF_CALCV_UOM_1 = <F_VALUE_UOM>
                                                        IF_CALCV_2     = LS_ELEMV-ELEMV
                                                        IF_CALCV_UOM_2 = LS_ELEMV-ELEMV_UOM
                                                        IF_OPERA       = LS_PRSTY_FOLDM-ELEMO
                                                        IF_UOM         = <F_VALUE_UOM>
                                              importing EF_CALCV       = <F_VALUE>
                                                        EF_CALCV_UOM   = <F_VALUE_UOM> ).

    unassign: <F_VALUE>, <F_VALUE_UOM>.
  endloop.

endmethod.
  method CALC_SCORES.

    data: LF_CSCOR type ZVCXI_P0SS_CSCOR,
          LF_GMATU type ZVCXI_P0SSC_GMATU,
          LF_DECIP type ZVCXI_XCS_DECIP,
          LF_OPROU type ZVCXI_XCS_OPROU.
    data: LS_PRSTY_SCORE type ZVCXI_P0SSC_S_PRSTY_SCORE,
          LS_FOTAU       type ZVCXI_P0SS_S_FOTAU,
          LS_FOTAU_PREV  type ZVCXI_P0SS_S_FOTAU,
          LS_FOTAU_NEXT  type ZVCXI_P0SS_S_FOTAU,
          LS_ELEMV       type ZVCXI_P0SS_S_ELEMV.
    data:          LT_PRSTY_SCORE    type ZVCXI_P0SSC_TT_PRSTY_SCORE.
    field-symbols: <S_SCORE>         type ZVCXI_P0SS_S_SCORE.

    check ME->F_RECALC_SCORES eq ABAP_TRUE.
    move ABAP_FALSE to ME->F_RECALC_SCORES.

    clear ME->T_SCORE.

***--------------------------------------------------------------------
*** Get Product Sheet Length and width in case of Custom Design
    if ME->R_PRSTY->S_PRSTY-FCUSD eq ABAP_TRUE.
***   Add Cross Score 1
      append initial line to ME->T_SCORE assigning <S_SCORE>.
      LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = C_IELEM_SHTPL ).
      <S_SCORE>-SCORP     = LS_ELEMV-ELEMV.
      <S_SCORE>-SCORP_UOM = LS_ELEMV-ELEMV_UOM.
      <S_SCORE>-CSCOR     = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN = C_DIMEN_LENGTH ).
      <S_SCORE>-NSCOR     = C_NSCOR_FIRST.

***   Add Length Score 1
      append initial line to ME->T_SCORE assigning <S_SCORE>.
      LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = C_IELEM_SHTPW ).
      <S_SCORE>-SCORP     = LS_ELEMV-ELEMV.
      <S_SCORE>-SCORP_UOM = LS_ELEMV-ELEMV_UOM.
      <S_SCORE>-CSCOR     = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN = C_DIMEN_WIDTH ).
      <S_SCORE>-NSCOR     = C_NSCOR_FIRST.
      exit.
    endif.

***--------------------------------------------------------------------
*** Get Rounding Info
    ME->GET_ROUNDING_INFO( importing EF_DECIP = LF_DECIP
                                     EF_OPROU = LF_OPROU ).

*** Prepare Scores
    move ME->R_PRSTY->T_PRSTY_SCORE to LT_PRSTY_SCORE.
    delete LT_PRSTY_SCORE where PANOR ne ME->F_PANOR
                             or BOXPA ne ME->F_BOXPA.

*** Ignore Scores w/o Numenator/Denominator
    delete LT_PRSTY_SCORE where ELEMN eq 0
                           and  ELEMD eq 0.

*** Do only enhance scores if we have no manual take-up
    ME->CHECK_MANTU( importing EF_GMATU = LF_GMATU ).
    if LF_GMATU is initial.
      ME->PREPARE_SCORES( changing CT_PRSTY_SCORE = LT_PRSTY_SCORE ).
    endif.
    sort LT_PRSTY_SCORE by CSCOR NSCOR.

***--------------------------------------------------------------------
*** Start Calculation
    loop at LT_PRSTY_SCORE into LS_PRSTY_SCORE.

      clear: LS_FOTAU, LS_FOTAU_NEXT.
      if LF_CSCOR ne LS_PRSTY_SCORE-CSCOR.
        clear: LS_FOTAU_PREV.
      endif.

      append initial line to ME->T_SCORE assigning <S_SCORE>.

***--------------------------------------------------------------------
***   Save Score Categorie and Number
      move LS_PRSTY_SCORE-CSCOR to <S_SCORE>-CSCOR.
      move LS_PRSTY_SCORE-NSCOR to <S_SCORE>-NSCOR.

***--------------------------------------------------------------------
***   Get Folding Take up (and take always the half of it)
      ME->GET_FOTAU( exporting IF_FODEG      = LS_PRSTY_SCORE-FODEG
                               IS_FOTAU_PREV = LS_FOTAU_PREV
                               IF_CSCOR      = LS_PRSTY_SCORE-CSCOR
                               IF_NSCOR      = LS_PRSTY_SCORE-NSCOR
                     importing ES_FOTAU      = LS_FOTAU
                               ES_FOTAU_NEXT = LS_FOTAU_NEXT ).

***--------------------------------------------------------------------
***   Get needed Element
      LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = LS_PRSTY_SCORE-IELEM ).

      if LS_PRSTY_SCORE-ELEMD is not initial.
        LS_ELEMV-ELEMV = LS_ELEMV-ELEMV * ( LS_PRSTY_SCORE-ELEMN / LS_PRSTY_SCORE-ELEMD ).
      else.
***     Check Denominator on Scores. Value 0 is not allowed!
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_P0SS'
                                              IF_MSGNO = '010' ).
      endif.

***   Add Folding Take up
      if LS_ELEMV is not initial and
         LS_FOTAU is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
          exporting IF_CALCV_1     = LS_ELEMV-ELEMV
                    IF_CALCV_UOM_1 = LS_ELEMV-ELEMV_UOM
                    IF_CALCV_2     = LS_FOTAU-FOTAU
                    IF_CALCV_UOM_2 = LS_FOTAU-FOTAU_UOM
                    IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                    IF_UOM         = LS_ELEMV-ELEMV_UOM
          importing EF_CALCV       = LS_ELEMV-ELEMV
                    EF_CALCV_UOM   = LS_ELEMV-ELEMV_UOM ).
      endif.

***   Add/Delete Flap if needed
      if LS_PRSTY_SCORE-FLAIN is not initial and
         LS_ELEMV             is not initial.
        ME->ADJ_SCORE_FLAP( exporting IF_FLAIN = LS_PRSTY_SCORE-FLAIN
                            changing  CS_ELEMV = LS_ELEMV             ).
      endif.

***--------------------------------------------------------------------
***   Get Score Positon Assigned
      <S_SCORE>-SCORP     = LS_ELEMV-ELEMV.
      <S_SCORE>-SCORP_UOM = LS_ELEMV-ELEMV_UOM.

***   Round Score
      ME->ROUND_SCORE( exporting IF_DECIP = LF_DECIP
                                 IF_OPROU = LF_OPROU
                       changing  CS_SCORP = <S_SCORE>-S_SCORP ).



      move LS_FOTAU_NEXT-FOTAU     to LS_FOTAU_PREV-FOTAU.
      move LS_FOTAU_NEXT-FOTAU_UOM to LS_FOTAU_PREV-FOTAU_UOM.
      move LS_PRSTY_SCORE-CSCOR    to LF_CSCOR.

    endloop.

  endmethod.
method CHECK_CALC_FOLDM_PARAMS.

  data: LF_MSGV1       type SYMSGV.
  data: LS_PRSTY_FOLDM type ZVCXI_P0SSC_S_PRSTY_FOLDM,
        LS_ELEMV       type ZVCXI_P0SS_S_ELEMV,
        LS_TC340       type ZVCXI_P0S_TC340.
  data: LT_PRSTY_FOLDM type ZVCXI_P0SSC_TT_PRSTY_FOLDM.

  RF_PARAMS_OK = ABAP_TRUE.
  ME->R_MSG->INIT_MSG( ).

*** Check Joint Type
  if ME->F_JOITY is initial.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '006' ).

    move ABAP_FALSE to RF_PARAMS_OK.
  endif.

*** Check Orientation
  if ME->F_ORIEN is initial.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '012' ).

    move ABAP_FALSE to RF_PARAMS_OK.
  endif.


*** --------------------------------------------------------------------
*** Get Folding Type
  read table ME->T_TC340 into LS_TC340
                         with key JOITY = ME->F_JOITY.

  check ME->R_PRSTY is bound.
*** Check Elements if Joint Type and assigned Folding Type is not initial.
  LT_PRSTY_FOLDM = ME->R_PRSTY->GET_PRSTY_FOLDM( IF_TFOLD = LS_TC340-TFOLD
                                                 IF_ORIEN = ME->F_ORIEN ).

  loop at LT_PRSTY_FOLDM into LS_PRSTY_FOLDM.
*** Check Value
    LS_ELEMV = ME->GET_FOLDM_ELEMV( IF_IELEM = LS_PRSTY_FOLDM-IELEM ).

*** If there is no Element Value -> add Message
    check LS_ELEMV is initial.
    move LS_PRSTY_FOLDM-IELEM to LF_MSGV1.

    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '007'
                            IF_MSGV1 = LF_MSGV1 ).

    move ABAP_FALSE to RF_PARAMS_OK.
  endloop.

endmethod.
method CHECK_CALC_SCORE_PARAMS.

  data: LS_PRSTY_SCORE type ZVCXI_P0SSC_S_PRSTY_SCORE,
        LS_ELEMV       type ZVCXI_P0SS_S_ELEMV.
  data: LF_MSGV1       type SYMSGV.

  RF_PARAMS_OK = ABAP_TRUE.
  ME->R_MSG->INIT_MSG( ).

*** Check Panel Orientation
  if ME->F_PANOR is initial.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '001' ).

    move ABAP_FALSE to RF_PARAMS_OK.
  endif.

*** Check Plant
  if ME->F_WERKS is initial.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '002' ).

    move ABAP_FALSE to RF_PARAMS_OK.
  endif.

*** Check Product Type
  if ME->F_PTYPE is initial.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '003' ).

    move ABAP_FALSE to RF_PARAMS_OK.
  endif.

*** Check Joint Position
  if ME->F_JOIPO is initial.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '004' ).

    move ABAP_FALSE to RF_PARAMS_OK.
  endif.

  if ME->R_PRSTY is bound.
*** Check Elements if Panel Orientation is not initial.
    if ME->R_PRSTY->S_PRSTY-FCUSD eq ABAP_FALSE.
      loop at ME->R_PRSTY->T_PRSTY_SCORE into LS_PRSTY_SCORE
        where PANOR = ME->F_PANOR.

***     Check Value
        LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = LS_PRSTY_SCORE-IELEM ).

***     If there is no Element Value -> add Message
        check LS_ELEMV is initial.
        move LS_PRSTY_SCORE-IELEM to LF_MSGV1.

        ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                IF_MSGTY = 'E'
                                IF_MSGNO = '005'
                                IF_MSGV1 = LF_MSGV1 ).

      endloop.

*** Check if Product Sheet Length and width is not initial in case of Custom Design
    elseif ME->R_PRSTY->S_PRSTY-FCUSD eq ABAP_TRUE.
***   Check Value Product Sheet Width
      LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = C_IELEM_SHTPL ).

***   If there is no Element Value -> add Message
      if LS_ELEMV is initial.
        ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                IF_MSGTY = 'E'
                                IF_MSGNO = '008' ).
      endif.

***   Check Value Product Sheet Length
      LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = C_IELEM_SHTPW ).

***   If there is no Element Value -> add Message
      if LS_ELEMV is initial.
        ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                IF_MSGTY = 'E'
                                IF_MSGNO = '009' ).
      endif.
    endif.
  else.
    move ABAP_FALSE to RF_PARAMS_OK.
  endif.

endmethod.
method CHECK_CUST_DESIGN.

  if ME->R_PRSTY is bound.
    move ME->R_PRSTY->S_PRSTY-FCUSD to RF_FCUSD.
  endif.

endmethod.
method CHECK_JOITY.

  if ME->R_PRSTY is bound.
    read table ME->R_PRSTY->T_PRSTY_JOITY
         with key JOITY = ME->F_JOITY
         transporting no fields.

    check SY-SUBRC = 0.
    move ABAP_TRUE to RF_OKAY.

  endif.

endmethod.
method CHECK_MANTU.
endmethod.
method CHECK_PRSTY_EXIST.

  read table T_TC200 with key PRSTY = IF_PRSTY transporting no fields.
  if SY-SUBRC = 0.
    move ABAP_TRUE to RF_RETURN.
  endif.

endmethod.
method CHECK_PTYPE.

  if ME->R_PRSTY is bound.
    read table ME->R_PRSTY->T_PRSTY_PTYPE
               with key PTYPE = ME->F_PTYPE
               transporting no fields.

    check SY-SUBRC = 0.
    move ABAP_TRUE to RF_OKAY.
  endif.

endmethod.
method CHECK_PTYPE_EXIST.

  read table T_TC100 with key PTYPE = IF_PTYPE transporting no fields.
  if SY-SUBRC = 0.
    move ABAP_TRUE to RF_RETURN.
  endif.

endmethod.
method CHECK_SCORE_ELEMENT.

  data:  LF_SEPARATOR   type          CHAR01.
  data:  LS_PRSTY_SCORE type          ZVCXI_P0SSC_S_PRSTY_SCORE.
  data:  LT_IELEM       type table of ZVCXI_P0SS_IELEM.


  check ME->R_PRSTY is bound.

  if IF_BOXPA is supplied.
    read table ME->R_PRSTY->T_PRSTY_SCORE
      with key BOXPA = IF_BOXPA
               IELEM = IF_IELEM
      transporting no fields.

  else.
    read table ME->R_PRSTY->T_PRSTY_SCORE
      with key IELEM = IF_IELEM
      transporting no fields.

  endif.

  if SY-SUBRC eq 0.
    move ABAP_TRUE to RF_USED.

  else.
    loop at ME->R_PRSTY->T_PRSTY_SCORE into LS_PRSTY_SCORE.
      if IF_BOXPA is supplied.
        check LS_PRSTY_SCORE-BOXPA = IF_BOXPA.
      endif.

***   Try to get element in combination with '+'
      if LS_PRSTY_SCORE-IELEM cs C_SEPARATOR_MINUS.
        move C_SEPARATOR_MINUS to LF_SEPARATOR.
      elseif LS_PRSTY_SCORE-IELEM cs C_SEPARATOR_PLUS.
        move C_SEPARATOR_PLUS to LF_SEPARATOR.
      endif.

      clear: LT_IELEM.
      split LS_PRSTY_SCORE-IELEM at LF_SEPARATOR into table LT_IELEM.

      read table LT_IELEM with key TABLE_LINE = IF_IELEM
                          transporting no fields.
      if SY-SUBRC = 0.
        move ABAP_TRUE to RF_USED.
        exit.
      endif.

    endloop.
  endif.

endmethod.
method CHECK_SCORE_MULTI_BOXPA.

  data: LS_PRSTY_SCORE type ZVCXI_P0SSC_S_PRSTY_SCORE.

  check ME->R_PRSTY is bound.

  loop at ME->R_PRSTY->T_PRSTY_SCORE into LS_PRSTY_SCORE.
    collect LS_PRSTY_SCORE-BOXPA into RT_BOXPA.
  endloop.

endmethod.
method CHECK_SCORE_SUM.

  data:          LS_SCORE      type ZVCXI_P0SS_S_SCORE,
                 LS_SCORP_CN   type ZVCXI_P0SS_S_SCORP,
                 LS_SCORP_LN   type ZVCXI_P0SS_S_SCORP,
                 LS_SCORP_CI   type ZVCXI_P0SS_S_SCORP,
                 LS_SCORP_LI   type ZVCXI_P0SS_S_SCORP.
  field-symbols: <F_VALUE>     type any,
                 <F_VALUE_UOM> type any.

*** Start positiv
  move ABAP_TRUE to RF_OKAY.

  loop at IT_SCORE into LS_SCORE.

*** Get Sum of New Scores
    case LS_SCORE-CSCOR.
      when C_CSCOR_LENGTH.
        if LS_SCORP_LN-SCORP is initial and
           LS_SCORP_LN-SCORP_UOM is initial.
          move-corresponding LS_SCORE to LS_SCORP_LN.
          continue.
        endif.
        assign LS_SCORP_LN-SCORP     to <F_VALUE>.
        assign LS_SCORP_LN-SCORP_UOM to <F_VALUE_UOM>.
      when C_CSCOR_CROSS.
        if LS_SCORP_CN-SCORP is initial and
           LS_SCORP_CN-SCORP_UOM is initial.
          move-corresponding LS_SCORE to LS_SCORP_CN.
          continue.
        endif.
        assign LS_SCORP_CN-SCORP     to <F_VALUE>.
        assign LS_SCORP_CN-SCORP_UOM to <F_VALUE_UOM>.
    endcase.

    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting IF_CALCV_1     = <F_VALUE>
                IF_CALCV_UOM_1 = <F_VALUE_UOM>
                IF_CALCV_2     = LS_SCORE-SCORP
                IF_CALCV_UOM_2 = LS_SCORE-SCORP_UOM
                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                IF_UOM         = <F_VALUE_UOM>
      importing EF_CALCV       = <F_VALUE>
                EF_CALCV_UOM   = <F_VALUE_UOM> ).

  endloop.


  loop at ME->T_SCORE into LS_SCORE.

*** Get Sum of Calculated one
    case LS_SCORE-CSCOR.
      when C_CSCOR_LENGTH.
        if LS_SCORP_LI-SCORP is initial and
           LS_SCORP_LI-SCORP_UOM is initial.
          move-corresponding LS_SCORE to LS_SCORP_LI.
          continue.
        endif.
        assign LS_SCORP_LI-SCORP     to <F_VALUE>.
        assign LS_SCORP_LI-SCORP_UOM to <F_VALUE_UOM>.
      when C_CSCOR_CROSS.
        if LS_SCORP_CI-SCORP is initial and
           LS_SCORP_CI-SCORP_UOM is initial.
          move-corresponding LS_SCORE to LS_SCORP_CI.
          continue.
        endif.
        assign LS_SCORP_CI-SCORP     to <F_VALUE>.
        assign LS_SCORP_CI-SCORP_UOM to <F_VALUE_UOM>.
    endcase.

    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
      exporting IF_CALCV_1     = <F_VALUE>
                IF_CALCV_UOM_1 = <F_VALUE_UOM>
                IF_CALCV_2     = LS_SCORE-SCORP
                IF_CALCV_UOM_2 = LS_SCORE-SCORP_UOM
                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                IF_UOM         = <F_VALUE_UOM>
      importing EF_CALCV       = <F_VALUE>
                EF_CALCV_UOM   = <F_VALUE_UOM> ).

  endloop.

*** Convert Scores Cross
  call function 'UNIT_CONVERSION_SIMPLE'
    exporting
      INPUT    = LS_SCORP_CN-SCORP
      UNIT_IN  = LS_SCORP_CN-SCORP_UOM
      UNIT_OUT = LS_SCORP_CI-SCORP_UOM
    importing
      OUTPUT   = LS_SCORP_CN-SCORP
    exceptions
      others   = 9.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  else.
    move LS_SCORP_CI-SCORP_UOM to LS_SCORP_CN-SCORP_UOM.
  endif.


*** Convert Scores Length
  call function 'UNIT_CONVERSION_SIMPLE'
    exporting
      INPUT    = LS_SCORP_LN-SCORP
      UNIT_IN  = LS_SCORP_LN-SCORP_UOM
      UNIT_OUT = LS_SCORP_LI-SCORP_UOM
    importing
      OUTPUT   = LS_SCORP_LN-SCORP
    exceptions
      others   = 9.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  else.
    move LS_SCORP_LI-SCORP_UOM to LS_SCORP_LN-SCORP_UOM.
  endif.

*** Check Cross Scores
  if LS_SCORP_CN-SCORP ne LS_SCORP_CI-SCORP.
    move C_CSCOR_CROSS to RF_OKAY.
  endif.

*** Check Length Scores
  if LS_SCORP_LN-SCORP ne LS_SCORP_LI-SCORP
  and RF_OKAY eq ABAP_TRUE.
    move C_CSCOR_LENGTH to RF_OKAY.
  elseif LS_SCORP_LN-SCORP ne LS_SCORP_LI-SCORP
    and RF_OKAY eq C_CSCOR_CROSS.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CLASS_CONSTRUCTOR.

  data: LS_TC331T type                   ZVCXI_P0S_TC331T,
        LS_TC332T type                   ZVCXI_P0S_TC332T.
  data: LT_TC331T type standard table of ZVCXI_P0S_TC331T,
        LT_TC332T type standard table of ZVCXI_P0S_TC332T,
        LT_TC360T type standard table of ZVCXI_P0S_TC360T.
  field-symbols: <S_SSCOR_INFO> type ZVCXI_P0SS_S_SSCOR_INFO,
                 <S_TSCOR_INFO> type ZVCXI_P0SS_S_TSCOR_INFO.

*** Get all Product Types
  select *
    from ZVCXI_P0S_TC100
    into table T_TC100.

*** Get all Product Types Descriptions
  select *
    from ZVCXI_P0S_TC100T
    into table T_TC100T
    where LANGU = SY-LANGU.

*** Get all Product Styles
  select *
    from ZVCXI_P0S_TC200
    into table T_TC200.

*** Get all Product Types and assigned Components
  select *
    from ZVCXI_P0S_TC101
    into table T_TC101.

*** Get all Product Styles and Product Types
  select TPRST PRSTY PTYPE
    from ZVCXI_P0S_TC203
    into table T_PRSTY_PTYPE.

*** Get Product Style Description
  select *
    from ZVCXI_P0S_TC200T
    into table T_TC200T
    where LANGU = SY-LANGU.

*** Get Score Status and Calculation Logic
  select * from ZVCXI_P0S_TC332
    into corresponding fields of table T_SSCOR_INFO.

  select * from ZVCXI_P0S_TC331T
    into table LT_TC331T
    where LANGU = SY-LANGU.

  select * from ZVCXI_P0S_TC332T
    into table LT_TC332T
    where LANGU = SY-LANGU.

  loop at T_SSCOR_INFO assigning <S_SSCOR_INFO>.
    read table LT_TC331T into LS_TC331T
                         with key SCOCL = <S_SSCOR_INFO>-SCOCL.
    if SY-SUBRC = 0.
      move LS_TC331T-DESCR to <S_SSCOR_INFO>-SCOCL_DESCR.
    endif.

    read table LT_TC332T into LS_TC332T
                         with key SSCOR = <S_SSCOR_INFO>-SSCOR.
    if SY-SUBRC = 0.
      move LS_TC332T-DESCR to <S_SSCOR_INFO>-SSCOR_DESCR.
    endif.

  endloop.

*** Select Score Pressure & Description
  select * from ZVCXI_P0S_TC333
    into table T_TC333.

  select * from ZVCXI_P0S_TC333T
    into table T_TC333T.

*** Select Score Rounding
  select * from ZVCXI_P0S_TC334
    into table T_TC334.

*** Get Joint Type - Folding Type
  select * from ZVCXI_P0S_TC340
    into table T_TC340.

*** Get Joint Type Description
  select * from ZVCXI_P0S_TC340T
    into table T_TC340T
    where LANGU = SY-LANGU.

*** Get Score Type's and Description
  select * into corresponding fields of table T_TSCOR_INFO
           from ZVCXI_P0S_TC360.
  if SY-SUBRC eq 0.
    select * into table LT_TC360T
             from ZVCXI_P0S_TC360T
            where LANGU eq SY-LANGU.
  endif.
  loop at T_TSCOR_INFO assigning <S_TSCOR_INFO>.
    <S_TSCOR_INFO>-DESCR = value #( LT_TC360T[ TSCOR = <S_TSCOR_INFO>-TSCOR ]-DESCR optional ).
  endloop.

*** Get Panel Orientation Description
  select *
    from ZVCXI_P0S_TC310T
    into table T_TC310T
    where LANGU = SY-LANGU.

*** Get Panel Orientation - Joint Position
  select *
    from ZVCXI_P0S_TC311
    into table T_TC311.

*** Get Joint Type - Joint Position
  select *
    from ZVCXI_P0S_TC341
    into table T_TC341.

*** Get Material Consumption Joint Type -> SVC Element
  select *
    from ZVCXI_P0S_TD342
    into table T_TD342.

*** Get Material Consumption Joint Type -> Average Consumption
  select *
    from ZVCXI_P0S_TD343
    into table T_TD343.

*** Get Stitching Defaults
  select *
    from ZVCXI_P0S_TD311
    into table T_TD311.

*** Get Tape Type Description
  select *
    from ZVCXI_P0S_TC370T
    into table T_TC370T
    where LANGU = SY-LANGU.

*** Get Tape Type - Material Assignment
  select *
    from ZVCXI_P0S_TD371
    into table T_TD371.

*** Get Die Cut Types
  select *
    from ZVCXI_P0S_TC500
    into table T_TC500.

*** Get Die Cut Types Description
  select *
    from ZVCXI_P0S_TC500T
    into table T_TC500T
    where LANGU = SY-LANGU.

*** Get Valid Die Cut Types per Product Type
  select *
    from ZVCXI_P0S_TC501
    into table T_TC501.

endmethod.
method CONSTRUCTOR.

  data:          LF_GUID        type        /VCXI/CKX_GUID.
  data:          LR_CX_CKX      type ref to /VCXI/CX_CKX.
  field-symbols: <S_INSTANCE>   type        YS_INSTANCE.

  try.

      move IF_TPRST to ME->F_TPRST.
      move IF_PRSTY to ME->F_PRSTY.
      move IF_OWNER to ME->F_OWNER.
      move IF_SYSOM to ME->F_SYSOM.

      create object ME->R_MSG.

***---------------------------------------------------------------------------------
***   Add to Instance Buffer
      append initial line to ZCL_VCXI_P0SS_CUST_PRSTY=>T_INSTANCE assigning <S_INSTANCE>.
      move ME->F_TPRST to <S_INSTANCE>-TPRST.
      move ME->F_PRSTY to <S_INSTANCE>-PRSTY.
      move ME->F_OWNER to <S_INSTANCE>-OWNER.
      move ME->F_SYSOM to <S_INSTANCE>-SYSOM.
      move ME          to <S_INSTANCE>-R_INSTANCE.

***---------------------------------------------------------------------------------
***   Load Instance of Product Style
      check ME->R_PRSTY is not bound.

***   Get Instance
      LF_GUID = ZCL_VCXI_P0SSC_PRSTY=>ENCRYPT_GUID( IF_TPRST = IF_TPRST
                                                    IF_PRSTY = IF_PRSTY ).
      ME->R_PRSTY ?= ZCL_VCXI_P0SSC_PRSTY=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

***---------------------------------------------------------------------------------
***   Select Other Data
***   Get Default Elements
      select * from ZVCXI_P0S_TC320
        into table ME->T_TC320
        where DVAEL ne ABAP_FALSE.

***---------------------------------------------------------------------------------
***   Get Default Elements -> where Default
      select * from ZVCXI_P0S_TC320
        into table ME->T_TC320_DEFAULT
        where FDALL eq ABAP_TRUE.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      delete ZCL_VCXI_P0SS_CUST_PRSTY=>T_INSTANCE where R_INSTANCE eq ME.
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method GET_DVALU.

  data:  LF_IELEM       type          ZVCXI_P0SS_IELEM,
         LF_SEPARATOR   type          CHAR01.
  data:  LS_PRSTY_DELEM type          ZVCXI_P0SSC_S_PRSTY_DELEM,
         LS_TC320       type          ZVCXI_P0S_TC320,
         LS_ELEMENT     type          ZVCXI_P0SS_S_ELEMENT.
  data:  LT_IELEM       type table of ZVCXI_P0SS_IELEM.

  check ME->R_PRSTY is bound.

  if IF_IELEM cs C_SEPARATOR_MINUS.
    move C_SEPARATOR_MINUS to LF_SEPARATOR.
  else.
    move C_SEPARATOR_PLUS to LF_SEPARATOR.
  endif.

  split IF_IELEM at LF_SEPARATOR into table LT_IELEM.

***----------------------------------------------------------------------------
  loop at LT_IELEM into LF_IELEM.
    clear: LS_TC320, LS_ELEMENT, LS_PRSTY_DELEM.

    if LF_IELEM cs C_SEPARATOR_PLUS.
      RS_DVALU = ME->GET_DVALU( IF_IELEM   = LF_IELEM
                                IT_ELEMENT = IT_ELEMENT ).
      continue.
    else.
***   Default Element
      read table ME->T_TC320_DEFAULT into LS_TC320
        with key IELEM = LF_IELEM
                 FDALL = ABAP_TRUE.

      check SY-SUBRC = 0.
***   Default Allowed
      if LS_TC320-DVAEL is initial.
***   -> check if there is Default Value maintained for element
        read table ME->R_PRSTY->T_PRSTY_DELEM into LS_PRSTY_DELEM
          with key IELEM = LF_IELEM.
        if SY-SUBRC             = 0 and
           LS_PRSTY_DELEM-DVAEL is not initial.
***        Default Value Element is maintained.
***        Check if Element is in Element List
          read table IT_ELEMENT into LS_ELEMENT
            with key IELEM = LS_PRSTY_DELEM-DVAEL.
          if SY-SUBRC eq 0.
            move LS_ELEMENT-ELEMV     to LS_PRSTY_DELEM-DVALU.
            move LS_ELEMENT-ELEMV_UOM to LS_PRSTY_DELEM-DVALU_UOM.
          endif.

        elseif SY-SUBRC             = 0 and
               LS_PRSTY_DELEM-DVALU is not initial.
***            Default Value is maintained
***            nothing else to do!!

        endif.
      else.
***     Check if Element is in Element List
        read table IT_ELEMENT into LS_ELEMENT
          with key IELEM = LS_TC320-DVAEL.
        if SY-SUBRC eq 0.
          move LS_ELEMENT-ELEMV     to LS_PRSTY_DELEM-DVALU.
          move LS_ELEMENT-ELEMV_UOM to LS_PRSTY_DELEM-DVALU_UOM.
        endif.
      endif.

***----------------------------------------------------------------------------
      if RS_DVALU is initial.
        move-corresponding LS_PRSTY_DELEM to RS_DVALU.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
          exporting IF_CALCV_1     = RS_DVALU-DVALU
                    IF_CALCV_UOM_1 = RS_DVALU-DVALU_UOM
                    IF_CALCV_2     = LS_PRSTY_DELEM-DVALU
                    IF_CALCV_UOM_2 = LS_PRSTY_DELEM-DVALU_UOM
                    IF_OPERA       = LF_SEPARATOR
                    IF_UOM         = RS_DVALU-DVALU_UOM
          importing EF_CALCV       = RS_DVALU-DVALU
                    EF_CALCV_UOM   = RS_DVALU-DVALU_UOM ).

      endif.
    endif.

  endloop.

endmethod.
method GET_ELEMENT_DEFAULT.

  RS_DVALUE = ME->GET_DVALU( IF_IELEM   = IF_IELEM
                             IT_ELEMENT = IT_ELEMENT ).

endmethod.
method GET_FOLDM_ELEMV.

  data: LS_ELEMENT     type          ZVCXI_P0SS_S_ELEMENT,
        LS_TC320       type          ZVCXI_P0S_TC320.
  data: LF_IELEM       type          ZVCXI_P0SS_IELEM,
        LF_SEPARATOR   type          CHAR01.
  data: LT_IELEM       type table of ZVCXI_P0SS_IELEM.

  if IF_IELEM cs C_SEPARATOR_MINUS.
    move C_SEPARATOR_MINUS to LF_SEPARATOR.
  else.
    move C_SEPARATOR_PLUS to LF_SEPARATOR.
  endif.


  split IF_IELEM at LF_SEPARATOR into table LT_IELEM.

  loop at LT_IELEM into LF_IELEM.

    if LF_IELEM cs C_SEPARATOR_PLUS.
      RS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = LF_IELEM ).
    else.

      read table ME->T_ELEMENT_FOLDM into LS_ELEMENT
        with key IELEM = LF_IELEM.

      if SY-SUBRC ne 0.

        read table ME->T_TC320 into LS_TC320
          with key IELEM = LF_IELEM.

        if SY-SUBRC = 0.
          move LS_TC320-DVAEL to LF_IELEM.

          read table ME->T_ELEMENT_FOLDM into LS_ELEMENT
            with key IELEM = LF_IELEM.

        endif.

      endif.

      check LS_ELEMENT is not initial.

      if RS_ELEMV is initial.
        move-corresponding LS_ELEMENT to RS_ELEMV.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
          exporting IF_CALCV_1     = RS_ELEMV-ELEMV
                    IF_CALCV_UOM_1 = RS_ELEMV-ELEMV_UOM
                    IF_CALCV_2     = LS_ELEMENT-ELEMV
                    IF_CALCV_UOM_2 = LS_ELEMENT-ELEMV_UOM
                    IF_OPERA       = LF_SEPARATOR
                    IF_UOM         = RS_ELEMV-ELEMV_UOM
          importing EF_CALCV       = RS_ELEMV-ELEMV
                    EF_CALCV_UOM   = RS_ELEMV-ELEMV_UOM ).


      endif.
    endif.

  endloop.

endmethod.
method GET_FOTAU.

*** will be redefined.

endmethod.
  method GET_FSLIN.

    data: LT_PRSTY_SCORE    type ZVCXI_P0SSC_TT_PRSTY_SCORE.

***----------------------------------------------------------------------------
*** Prepare Scores
    move ME->R_PRSTY->T_PRSTY_SCORE to LT_PRSTY_SCORE.
    if IF_PANOR is supplied.
      delete LT_PRSTY_SCORE where PANOR ne IF_PANOR.
    else.
      delete LT_PRSTY_SCORE where PANOR ne ME->F_PANOR.
    endif.
    if IF_BOXPA is supplied.
      delete LT_PRSTY_SCORE where BOXPA ne IF_BOXPA.
    else.
      delete LT_PRSTY_SCORE where BOXPA ne ME->F_BOXPA.
    endif.

    check LINE_EXISTS( LT_PRSTY_SCORE[ CSCOR = IF_CSCOR
                                       NSCOR = IF_NSCOR ] ).

***----------------------------------------------------------------------------
*** Slot Indicator of Score in Product Style
    RF_FSLIN = LT_PRSTY_SCORE[ CSCOR = IF_CSCOR
                               NSCOR = IF_NSCOR ]-FSLIN.

  endmethod.
method GET_INSTANCE.

  data:  LS_INSTANCE type YS_INSTANCE.


  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_INSTANCE into LS_INSTANCE
                                              with key TPRST = IF_TPRST
                                                       PRSTY = IF_PRSTY
                                                       OWNER = IF_OWNER
                                                       SYSOM = IF_SYSOM.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_INSTANCE to RR_INSTANCE.
  else.
    create object RR_INSTANCE
      exporting
        IF_TPRST = IF_TPRST
        IF_PRSTY = IF_PRSTY
        IF_OWNER = IF_OWNER
        IF_SYSOM = IF_SYSOM.
  endif.

endmethod.
method GET_JOITY_AVGCO.

  data:  LS_TD343 type          ZVCXI_P0S_TD343.
  data:  LT_TD343 type table of ZVCXI_P0S_TD343.

*** Get valid Average Consumption from TD343 (consider access sequence)
*** If multiple entries are valid use youngest Valid From

***------------------------------------------------------------------
*** Find all valid Entries with MATNR, WERKS, ARBPL.
  move T_TD343 to LT_TD343.
  delete LT_TD343 where MATNR ne IF_MATNR
                   or   WERKS ne IF_WERKS
                   or   ARBPL ne IF_ARBPL
                   or   VALFR gt IF_DATE.

  if lines( LT_TD343 ) lt 1.
*** Find with only MATNR, WERKS
    move T_TD343 to LT_TD343.
    delete LT_TD343  where MATNR ne IF_MATNR
                      or   WERKS ne IF_WERKS
                      or   ARBPL is not initial
                      or   VALFR gt IF_DATE.

    if lines( LT_TD343 ) lt 1.
***   Find with only MATNR
      move T_TD343 to LT_TD343.
      delete LT_TD343  where MATNR ne IF_MATNR
                        or   WERKS is not initial
                        or   ARBPL is not initial
                        or   VALFR gt IF_DATE.
    endif.
  endif.

***------------------------------------------------------------------
*** Find youngest Entry
  sort LT_TD343 by VALFR descending.
  read table LT_TD343 into LS_TD343 index 1.
  if SY-SUBRC eq 0.
    move LS_TD343-AVGCO     to ES_AVGCO-AVGCO.
    move LS_TD343-AVGCO_UOM to ES_AVGCO-AVGCO_UOM.
    move LS_TD343-AVGCP     to ES_AVGCP-AVGCP.
    move LS_TD343-AVGCP_UOM to ES_AVGCP-AVGCP_UOM.
  endif.

endmethod.
method GET_JOITY_DEF.

  read table T_TC340 into RS_JOITY_DEF
  with key JOITY = IF_JOITY.

endmethod.
method GET_JOITY_DESCR.

  data: LS_TC340T type ZVCXI_P0S_TC340T.

  read table T_TC340T into LS_TC340T
  with key JOITY = IF_JOITY
           LANGU = SY-LANGU.

  check SY-SUBRC = 0.
  move LS_TC340T-DESCR to RF_DESCR.

endmethod.
  method GET_JOITY_JOIPO.

    data: LS_TC341 type ZVCXI_P0S_TC341.


    if IF_JOITY is supplied and
       IF_JOIPO is supplied.

      read table T_TC341 with key JOITY = IF_JOITY
                                  JOIPO = IF_JOIPO
                         transporting no fields.

      if SY-SUBRC = 0.
        EF_EXIST = ABAP_TRUE.
      endif.

*** Find by Joint Type
    elseif IF_JOITY is supplied and
           IF_JOIPO is not supplied.

      loop at T_TC341 into LS_TC341
                     where JOITY = IF_JOITY.
        collect LS_TC341 into ET_TC341.
      endloop.

*** Find by Joint Position
    elseif IF_JOITY is not supplied and
           IF_JOIPO is supplied.

      loop at T_TC341 into LS_TC341
                     where JOIPO = IF_JOIPO.
        collect LS_TC341 into ET_TC341.
      endloop.

    endif.

*** Get Default Joint Position
    if EF_DEFAULT_JOIPO is requested.
      EF_DEFAULT_JOIPO = value #( ET_TC341[ FMADE = ABAP_TRUE ]-JOIPO
                                  default value #( ET_TC341[ 1 ]-JOIPO optional ) ).
    endif.

  endmethod.
method GET_JOITY_MCONSU.

  data: LS_TD342       type ZVCXI_P0S_TD342,
        LS_TD342_CHECK type ZVCXI_P0S_TD342.
  data: LT_TD342       type YT_TD342.

  move T_TD342 to LT_TD342.
  sort LT_TD342 by JOITY MATNR VALFR.

  delete LT_TD342 where VALFR gt IF_DATE.

  loop at LT_TD342 into LS_TD342.
*** Do only take the current/latest entry for this combination
    loop at LT_TD342 into LS_TD342_CHECK
      where JOITY eq LS_TD342-JOITY
        and ISVCE eq LS_TD342-ISVCE
        and VALFR lt LS_TD342-VALFR.
      delete table LT_TD342 from LS_TD342_CHECK.
    endloop.
  endloop.

  if IF_JOITY is supplied and
     IF_MATNR is supplied and
     IF_ISVCE is supplied.

    read table LT_TD342 with key JOITY = IF_JOITY
                                 MATNR = IF_MATNR
                                 ISVCE = IF_ISVCE
                        transporting no fields.

    if SY-SUBRC = 0.
      EF_EXIST = ABAP_TRUE.
    endif.

  elseif IF_JOITY is supplied and
         IF_MATNR is supplied and
         IF_ISVCE is not supplied.

    loop at LT_TD342 into LS_TD342
    where JOITY = IF_JOITY
      and MATNR = IF_MATNR.
      collect LS_TD342 into ET_TD342.
    endloop.

    if ET_TD342 is not initial.
      EF_EXIST = ABAP_TRUE.
    endif.

  elseif IF_JOITY is supplied and
         IF_MATNR is not supplied and
         IF_ISVCE is not supplied.

    loop at LT_TD342 into LS_TD342
    where JOITY = IF_JOITY.
      collect LS_TD342 into ET_TD342.
    endloop.

    if ET_TD342 is not initial.
      EF_EXIST = ABAP_TRUE.
    endif.

  elseif IF_JOITY is supplied and
         IF_MATNR is not supplied and
         IF_ISVCE is supplied.

    loop at LT_TD342 into LS_TD342
    where JOITY = IF_JOITY
      and ISVCE = IF_ISVCE.
      collect LS_TD342 into ET_TD342.
    endloop.

    if ET_TD342 is not initial.
      EF_EXIST = ABAP_TRUE.
    endif.

  elseif IF_JOITY is not supplied and
         IF_MATNR is not supplied and
         IF_ISVCE is supplied.

    loop at LT_TD342 into LS_TD342
    where ISVCE = IF_ISVCE.
      collect LS_TD342 into ET_TD342.
    endloop.

    if ET_TD342 is not initial.
      EF_EXIST = ABAP_TRUE.
    endif.

  elseif IF_JOITY is not supplied and
         IF_MATNR is supplied and
         IF_ISVCE is supplied.

    loop at LT_TD342 into LS_TD342
    where MATNR = IF_MATNR
      and ISVCE = IF_ISVCE.
      collect LS_TD342 into ET_TD342.
    endloop.

    if ET_TD342 is not initial.
      EF_EXIST = ABAP_TRUE.
    endif.

  elseif IF_JOITY is not supplied and
         IF_MATNR is supplied and
         IF_ISVCE is not supplied.

    loop at LT_TD342 into LS_TD342
    where MATNR = IF_MATNR.
      collect LS_TD342 into ET_TD342.
    endloop.

    if ET_TD342 is not initial.
      EF_EXIST = ABAP_TRUE.
    endif.

  endif.

endmethod.
method GET_MANTU.

*** will be redefined.

endmethod.
method GET_PANOR_DESCR.

  data: LS_TC310T type ZVCXI_P0S_TC310T.

  read table T_TC310T into LS_TC310T
  with key PANOR = IF_PANOR
           LANGU = SY-LANGU.

  check SY-SUBRC = 0.
  move LS_TC310T-DESCR to RF_DESCR.

endmethod.
method GET_PANOR_JOIPO.

  data: LS_TC311 type ZVCXI_P0S_TC311.

  if IF_PANOR is supplied and
     IF_JOIPO is supplied.

    read table T_TC311 with key PANOR = IF_PANOR
                                JOIPO = IF_JOIPO
                       transporting no fields.

    if SY-SUBRC = 0.
      EF_EXIST = ABAP_TRUE.
    endif.

  elseif IF_PANOR is supplied and
         IF_JOIPO is not supplied.

    loop at T_TC311 into LS_TC311
    where PANOR = IF_PANOR.
      collect LS_TC311 into ET_TC311.
    endloop.

  elseif IF_PANOR is not supplied and
         IF_JOIPO is supplied.

    loop at T_TC311 into LS_TC311
    where JOIPO = IF_JOIPO.
      collect LS_TC311 into ET_TC311.
    endloop.

  endif.

endmethod.
method GET_PRSTY_DESCR.

  data: LS_TC200T type ZVCXI_P0S_TC200T.

  read table T_TC200T into LS_TC200T
  with key TPRST = IF_TPRST
           PRSTY = IF_PRSTY
           LANGU = SY-LANGU.

  check SY-SUBRC = 0.
  move LS_TC200T-DESCR to RF_DESCR.

endmethod.
method GET_PRSTY_FOLDING.

*** Check if Scores needs to be recalculated or not
  if IF_JOITY   ne ME->F_JOITY          or
     IT_ELEMENT ne ME->T_ELEMENT_FOLDM  or
     IF_ORIEN   ne ME->F_ORIEN.

*** Save new Values
    move IF_JOITY   to ME->F_JOITY.
    move IT_ELEMENT to ME->T_ELEMENT_FOLDM.
    move IF_ORIEN   to ME->F_ORIEN.

    move ABAP_TRUE to ME->F_RECALC_FOLDING.

  endif.

  if ME->CHECK_CALC_FOLDM_PARAMS( ) eq ABAP_FALSE.
    exit.
  endif.


*** Start Score Calculation
  ME->CALC_FOLDING( ).

  ES_FOLLE = ME->S_FOLLE.
  ES_FOLWI = ME->S_FOLWI.
  ES_FOLHE = ME->S_FOLHE.

endmethod.
method GET_PRSTY_PTYPE.

  move T_PRSTY_PTYPE to RT_PRSTY_PTYPE.

endmethod.
method GET_PRSTY_SCORES.

*** Buffer current Scores
  ET_SCORE = ME->T_SCORE.

*** Check if Scores needs to be recalculated or not
  if IF_BOXPA   ne ME->F_BOXPA   or
     IF_PANOR   ne ME->F_PANOR   or
     IT_ELEMENT ne ME->T_ELEMENT or
     IF_WERKS   ne ME->F_WERKS   or
     IF_PTYPE   ne ME->F_PTYPE   or
     IF_JOIPO   ne ME->F_JOIPO   or
     IF_DATE    ne ME->F_DATE.

*** Save new Values
    move IF_BOXPA   to ME->F_BOXPA.
    move IF_PANOR   to ME->F_PANOR.
    move IT_ELEMENT to ME->T_ELEMENT.
    move IF_WERKS   to ME->F_WERKS.
    move IF_PTYPE   to ME->F_PTYPE.
    move IF_JOIPO   to ME->F_JOIPO.
    move IF_DATE    to ME->F_DATE.

    move ABAP_TRUE to ME->F_RECALC_SCORES.
    move ABAP_TRUE to EF_CHANGED.

  endif.

*** Get Folding Degree Customizing
  ME->INIT_FODEG( ).
  ME->INIT_MANTU( ).

  if ME->CHECK_CALC_SCORE_PARAMS( ) eq ABAP_FALSE.
    clear: ME->T_SCORE.
  else.
*** Start Score Calculation
    ME->CALC_SCORES( ).
  endif.

  if ET_SCORE ne ME->T_SCORE.
    move ABAP_TRUE to EF_CHANGED.
  endif.

  ET_SCORE = ME->T_SCORE.

endmethod.
method GET_ROUNDING_INFO.

  data: LS_TC334 type ZVCXI_P0S_TC334.

*** Get Rounding Info of System of Measure
  read table T_TC334 into LS_TC334
    with key SYSOM = ME->F_SYSOM.

  if SY-SUBRC ne 0.

*** Get Global Rounding Info
    read table T_TC334 into LS_TC334
    with key SYSOM = ''.

  endif.

  check SY-SUBRC = 0.

  EF_DECIP = LS_TC334-DECIP.
  EF_OPROU = LS_TC334-OPROU.

endmethod.
method GET_SCORE_CALIP.

  data: LS_ELEMENT type ZVCXI_P0SS_S_ELEMENT.

  read table ME->T_ELEMENT into LS_ELEMENT
  with key IELEM = C_IELEM_CALIP.

  check SY-SUBRC = 0.
  move LS_ELEMENT-ELEMV     to RS_CALIP-CALIP.
  move LS_ELEMENT-ELEMV_UOM to RS_CALIP-CALIP_UOM.

endmethod.
  method GET_SCORE_ELEMV.

    data: LS_ELEMENT type ZVCXI_P0SS_S_ELEMENT,
          LS_TC320   type ZVCXI_P0S_TC320,
          LS_ELEMV   type ZVCXI_P0SS_S_ELEMV.
    data: LF_IELEM     type ZVCXI_P0SS_IELEM,
          LF_SEPARATOR type CHAR01.
    data: LT_IELEM type table of ZVCXI_P0SS_IELEM.


    if IF_IELEM cs C_SEPARATOR_MINUS.
      move C_SEPARATOR_MINUS to LF_SEPARATOR.
    else.
      move C_SEPARATOR_PLUS to LF_SEPARATOR.
    endif.

    split IF_IELEM at LF_SEPARATOR into table LT_IELEM.

    loop at LT_IELEM into LF_IELEM.

      if LF_IELEM cs C_SEPARATOR_PLUS.
        if SY-TABIX eq 1.
***       First is always normal
          LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM = LF_IELEM ).
        else.
***       All other needs to be handle like splitted
          LS_ELEMV = ME->GET_SCORE_ELEMV( IF_IELEM     = LF_IELEM
                                          IF_SEPARATOR = LF_SEPARATOR ).
        endif.

        if RS_ELEMV is initial.
          if IF_SEPARATOR is initial.
            move-corresponding LS_ELEMV to RS_ELEMV.
          else.
***         If needed take rekursiv sepearator
            ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
              exporting IF_CALCV_1     = RS_ELEMV-ELEMV
                        IF_CALCV_UOM_1 = RS_ELEMV-ELEMV_UOM
                        IF_CALCV_2     = LS_ELEMV-ELEMV
                        IF_CALCV_UOM_2 = LS_ELEMV-ELEMV_UOM
                        IF_OPERA       = IF_SEPARATOR
                        IF_UOM         = RS_ELEMV-ELEMV_UOM
              importing EF_CALCV       = RS_ELEMV-ELEMV
                        EF_CALCV_UOM   = RS_ELEMV-ELEMV_UOM ).
          endif.

        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
            exporting IF_CALCV_1     = RS_ELEMV-ELEMV
                      IF_CALCV_UOM_1 = RS_ELEMV-ELEMV_UOM
                      IF_CALCV_2     = LS_ELEMV-ELEMV
                      IF_CALCV_UOM_2 = LS_ELEMV-ELEMV_UOM
                      IF_OPERA       = LF_SEPARATOR
                      IF_UOM         = RS_ELEMV-ELEMV_UOM
            importing EF_CALCV       = RS_ELEMV-ELEMV
                      EF_CALCV_UOM   = RS_ELEMV-ELEMV_UOM ).
        endif.

      else.
        clear LS_ELEMENT.
        read table ME->T_ELEMENT into LS_ELEMENT
                                 with key IELEM = LF_IELEM.
        if SY-SUBRC ne 0.
          read table ME->T_TC320 into LS_TC320
                                 with key IELEM = LF_IELEM.
          if SY-SUBRC = 0.
            move LS_TC320-DVAEL to LF_IELEM.
            read table ME->T_ELEMENT into LS_ELEMENT
                                     with key IELEM = LF_IELEM.
          endif.
        endif.

        check LS_ELEMENT is not initial.

        if RS_ELEMV is initial.
          if IF_SEPARATOR is initial.
            move-corresponding LS_ELEMENT to RS_ELEMV.
          else.
***         If needed take recursive sepearator
            move LS_ELEMENT-ELEMV_UOM to RS_ELEMV-ELEMV_UOM.
            ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
              exporting IF_CALCV_1     = RS_ELEMV-ELEMV
                        IF_CALCV_UOM_1 = RS_ELEMV-ELEMV_UOM
                        IF_CALCV_2     = LS_ELEMENT-ELEMV
                        IF_CALCV_UOM_2 = LS_ELEMENT-ELEMV_UOM
                        IF_OPERA       = IF_SEPARATOR
                        IF_UOM         = RS_ELEMV-ELEMV_UOM
              importing EF_CALCV       = RS_ELEMV-ELEMV
                        EF_CALCV_UOM   = RS_ELEMV-ELEMV_UOM ).
          endif.

        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
            exporting IF_CALCV_1     = RS_ELEMV-ELEMV
                      IF_CALCV_UOM_1 = RS_ELEMV-ELEMV_UOM
                      IF_CALCV_2     = LS_ELEMENT-ELEMV
                      IF_CALCV_UOM_2 = LS_ELEMENT-ELEMV_UOM
                      IF_OPERA       = LF_SEPARATOR
                      IF_UOM         = RS_ELEMV-ELEMV_UOM
            importing EF_CALCV       = RS_ELEMV-ELEMV
                      EF_CALCV_UOM   = RS_ELEMV-ELEMV_UOM ).
        endif.
      endif.

    endloop.

  endmethod.
method GET_SSCOR_CALC.

  data: LS_SSCOR_INFO type ZVCXI_P0SS_S_SSCOR_INFO.

*** Get Requested Score Type
  read table T_SSCOR_INFO into LS_SSCOR_INFO
    with key SSCOR = IF_SSCOR.

  check SY-SUBRC = 0.
*** Automatic - Standard = no User entrie
  if LS_SSCOR_INFO-SSCOR = 'A' and
     LS_SSCOR_INFO-SCOCL = 'S'.
    RF_CALCM = '1'.  "Automatic

*** not Automatic - Standard
*** = User entrie possible for first Scores
*** -> last will be adjusted
  elseif LS_SSCOR_INFO-SSCOR <> 'A' and
         LS_SSCOR_INFO-SCOCL =  'S'.
    RF_CALCM = '2'. "Half automatic

*** Calculation Logic 'M' is always total manually
  elseif LS_SSCOR_INFO-SCOCL = 'M'.
    RF_CALCM = '3'. "Manually

*** Calculation Logic 'External' is total manually, but w/o user interaction
  elseif LS_SSCOR_INFO-SCOCL = 'E'.
    RF_CALCM = '4'. "External

  else.
    RF_CALCM = 0.
  endif.

endmethod.
method GET_SSCOR_INFO.

*** Get Requested Score Type
  read table T_SSCOR_INFO into RS_SSCOR_INFO
    with key SSCOR = IF_SSCOR.

endmethod.
method GET_STITCH_DEF.

  read table T_TD311 into RS_STITCH_DEF with key WERKS = IF_WERKS.

endmethod.
method GET_TFOLD.

  data: LS_TC340 type ZVCXI_P0S_TC340.

*** --------------------------------------------------------------------
*** Get Folding Type
  read table T_TC340 into LS_TC340
    with key JOITY = IF_JOITY.

  check SY-SUBRC = 0.
  move LS_TC340-TFOLD to RF_TFOLD.

endmethod.
  method GET_TSCOR_DEFAULT.

    data: LT_PRSTY_SCORE    type ZVCXI_P0SSC_TT_PRSTY_SCORE.

***----------------------------------------------------------------------------
*** Prepare Scores
    move ME->R_PRSTY->T_PRSTY_SCORE to LT_PRSTY_SCORE.
    if IF_PANOR is supplied.
      delete LT_PRSTY_SCORE where PANOR ne IF_PANOR.
    else.
      delete LT_PRSTY_SCORE where PANOR ne ME->F_PANOR.
    endif.
    if IF_BOXPA is supplied.
      delete LT_PRSTY_SCORE where BOXPA ne IF_BOXPA.
    else.
      delete LT_PRSTY_SCORE where BOXPA ne ME->F_BOXPA.
    endif.

***----------------------------------------------------------------------------
*** Default of Score in Product Style
    RF_TSCOR = value #( LT_PRSTY_SCORE[ CSCOR = IF_CSCOR
                                        NSCOR = IF_NSCOR ]-TSCOR optional ).

    if RF_TSCOR is initial.
***   Use general default Score Type
      RF_TSCOR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_TSCOR_INFO( )-TSCOR.
    endif.

  endmethod.
method GET_TSCOR_INFO.

*** Get Requested Score Type
  if IF_TSCOR is supplied.
    read table T_TSCOR_INFO into RS_TSCOR_INFO
      with key TSCOR = IF_TSCOR.

*** Get Default Score Type
  else.
    read table T_TSCOR_INFO into RS_TSCOR_INFO
      with key FMADE = ABAP_TRUE.

  endif.

endmethod.
method GET_TTAPE_DESCR.

  data: LS_TC370T type ZVCXI_P0S_TC370T.

  read table T_TC370T into LS_TC370T
  with key TTAPE = IF_TTAPE
           LANGU = SY-LANGU.

  check SY-SUBRC = 0.
  move LS_TC370T-DESCR to RF_DESCR.

endmethod.
method GET_TTAPE_MATNR.

  data:  LS_TD371 type          ZVCXI_P0S_TD371.
  data:  LT_TD371 type table of ZVCXI_P0S_TD371.

*** Get valid Material from TD371 (consider access sequence)
*** If multiple entries are valid use youngest Valid From

***------------------------------------------------------------------
*** Find all valid Entries with Tape Type, Plant and Materia.
  move T_TD371 to LT_TD371.
  delete LT_TD371 where TTAPE ne IF_TTAPE
                   or   WERKS ne IF_WERKS
                   or   MATNR ne IF_MATNR
                   or   VALFR gt IF_DATE.

  if lines( LT_TD371 ) lt 1.
*** Find with only Tape Type and Plant
    move T_TD371 to LT_TD371.
    delete LT_TD371 where TTAPE ne IF_TTAPE
                     or   WERKS ne IF_WERKS
                     or   VALFR gt IF_DATE.

    if lines( LT_TD371 ) lt 1.
***   Find with only Tape Type
      move T_TD371 to LT_TD371.
      delete LT_TD371 where TTAPE ne IF_TTAPE
                       or   WERKS is not initial
                       or   VALFR gt IF_DATE.
    endif.
  endif.

***------------------------------------------------------------------
*** Find youngest Entry
  sort LT_TD371 by VALFR descending.
  read table LT_TD371 into LS_TD371 index 1.
  if SY-SUBRC eq 0.
    move LS_TD371-MATNR to RF_MATNR.
  endif.

endmethod.
method GET_VALID_BOXPA.

  data:          LS_PRSTY_SCORE    type ZVCXI_P0SSC_S_PRSTY_SCORE.

  check ME->R_PRSTY is bound.
*** --------------------------------------------------------------------
*** Collect Valid Panel Orientations
  loop at ME->R_PRSTY->T_PRSTY_SCORE into LS_PRSTY_SCORE.
    collect LS_PRSTY_SCORE-BOXPA into RT_BOXPA.
  endloop.

endmethod.
method GET_VALID_JOITY.

  data: LS_PRSTY_JOITY type ZVCXI_P0SSC_S_PRSTY_JOITY,
        LS_JOITY       type ZVCXI_P0SS_S_JOITY.


  LS_JOITY-OPTION = 'EQ'.
  LS_JOITY-SIGN   = 'I'.

  check ME->R_PRSTY is bound.

***----------------------------------------------------------------------------
*** Collect Valid Panel Orientations
  loop at ME->R_PRSTY->T_PRSTY_JOITY into LS_PRSTY_JOITY.
    clear: LS_JOITY-LOW.
    move LS_PRSTY_JOITY-JOITY to LS_JOITY-LOW.
    collect LS_JOITY into RT_JOITY.
  endloop.

*** Return Joint Types sorted
  sort RT_JOITY.

***----------------------------------------------------------------------------
*** Return defined Default if valid (based on joint position)
  if EF_DEFAULT is requested.
    if LINE_EXISTS( RT_JOITY[ LOW = ME->R_PRSTY->S_PRSTY-JOITY ] ).
      EF_DEFAULT = ME->R_PRSTY->S_PRSTY-JOITY.
    endif.

    if EF_DEFAULT is initial.
***   Use first as Default
      EF_DEFAULT = value #( RT_JOITY[ 1 ]-LOW optional ).
    endif.
  endif.

endmethod.
method GET_VALID_PANOR.

  data:          LS_PRSTY_SCORE    type ZVCXI_P0SSC_S_PRSTY_SCORE,
                 LS_PANOR          type ZVCXI_P0SS_S_PANOR.

  LS_PANOR-OPTION = 'EQ'.
  LS_PANOR-SIGN   = 'I'.

  check ME->R_PRSTY is bound.
*** --------------------------------------------------------------------
*** Collect Valid Panel Orientations
  loop at ME->R_PRSTY->T_PRSTY_SCORE into LS_PRSTY_SCORE.
    clear: LS_PANOR-LOW.
    move LS_PRSTY_SCORE-PANOR to LS_PANOR-LOW.
    collect LS_PANOR into RT_PANOR.
  endloop.

endmethod.
method INIT_FODEG.

*** Get Folding Degree

endmethod.
method INIT_MANTU.

*** Get Manual Take-up
  select * from ZVCXI_P0S_TC210
    into table ME->T_TC210
    where PRSTY eq ME->F_PRSTY
      and TPRST eq ME->F_TPRST
      and PANOR eq ME->F_PANOR
      and BOXPA eq ME->F_BOXPA
      and VALFR le ME->F_DATE.

*** Get Manual Take-up Factor
  check ME->T_TC210 is not initial.

  select * from ZVCXI_P0S_TC211
    into table ME->T_TC211
    for all entries in ME->T_TC210
    where GMATU eq ME->T_TC210-GMATU.

endmethod.
method PREPARE_SCORES.

  data:          LF_OPERA_GF     type CHAR01,
                 LF_OPERA_EF     type CHAR01,
                 LF_CSCOR        type ZVCXI_P0SS_CSCOR,
                 LF_NSCOR_GF     type ZVCXI_P0SS_NSCOR,
                 LF_NSCOR_EF     type ZVCXI_P0SS_NSCOR.
  field-symbols: <S_PRSTY_SCORE> type ZVCXI_P0SSC_S_PRSTY_SCORE.

  clear ME->T_SCORE.

*** --------------------------------------------------------------------
*** Get Add/Delete Caliper operator (for score after flap)
  if ME->F_JOIPO = C_JOIPO_OUTSIDE.
    move ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD      to LF_OPERA_GF.
    move ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT to LF_OPERA_EF.
  elseif ME->F_JOIPO = C_JOIPO_INSIDE.
    move ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT to LF_OPERA_GF.
  endif.

*** Prepare Glue Flap and End-Flap
  read table CT_PRSTY_SCORE assigning <S_PRSTY_SCORE>
                            with key IELEM = C_IELEM_GLUE_FLAP.
  if SY-SUBRC = 0.
*** Save Score Category where Flap is applied
    move <S_PRSTY_SCORE>-CSCOR to LF_CSCOR.
    if <S_PRSTY_SCORE>-NSCOR eq C_NSCOR_FIRST.
***   Flap is  First Score -> next Score needs to be Adjusted
      LF_NSCOR_GF = <S_PRSTY_SCORE>-NSCOR + 1.
***   Search End-Flap if Glue Flap is the First Score
      sort CT_PRSTY_SCORE by NSCOR descending.
      loop at CT_PRSTY_SCORE assigning <S_PRSTY_SCORE>
                             where CSCOR = LF_CSCOR.
        check SY-SUBRC = 0.
        LF_NSCOR_EF = <S_PRSTY_SCORE>-NSCOR.
        exit.
      endloop.
    else.
***   Flap is Las Score -> next Score needs to be Adjusted
      LF_NSCOR_GF = <S_PRSTY_SCORE>-NSCOR - 1.
***   Glue Flap is not First Score -> End-Flap is First Score
      move C_NSCOR_FIRST to LF_NSCOR_EF.
    endif.
  endif.

*** if there is a Glue Flap -> Search also End-Flap and do Perperation
  check LF_CSCOR is not initial.

*** Prepare Element for Flaps
  if LF_NSCOR_GF is not initial and
     LF_OPERA_GF is not initial.
    read table CT_PRSTY_SCORE assigning <S_PRSTY_SCORE>
      with key CSCOR = LF_CSCOR
               NSCOR = LF_NSCOR_GF.
    if SY-SUBRC = 0.
      concatenate <S_PRSTY_SCORE>-IELEM LF_OPERA_GF C_IELEM_CALIP into <S_PRSTY_SCORE>-IELEM.
    endif.
  endif.

  if LF_NSCOR_EF is not initial and
     LF_OPERA_EF is not initial.
    read table CT_PRSTY_SCORE assigning <S_PRSTY_SCORE>
      with key CSCOR = LF_CSCOR
               NSCOR = LF_NSCOR_EF.
    if SY-SUBRC = 0.
      concatenate <S_PRSTY_SCORE>-IELEM LF_OPERA_EF C_IELEM_CALIP into <S_PRSTY_SCORE>-IELEM.
    endif.
  endif.

endmethod.
method ROUND_SCORE.

  data: LS_CALCV type ZVCXI_XCS_S_CALCV.

  LS_CALCV-CALCV     = CS_SCORP-SCORP.
  LS_CALCV-CALCV_UOM = CS_SCORP-SCORP_UOM.

  ZCL_VCXI_XCS_SERVICE_CALC=>ROUND( exporting IF_OPROU = IF_OPROU
                                              IF_DECIP = IF_DECIP
                                    changing  CS_CALCV = LS_CALCV ).

  CS_SCORP-SCORP     = LS_CALCV-CALCV.
  CS_SCORP-SCORP_UOM = LS_CALCV-CALCV_UOM.

endmethod.
