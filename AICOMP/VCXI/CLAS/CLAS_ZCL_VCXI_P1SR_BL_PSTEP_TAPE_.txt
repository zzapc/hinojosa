
class ZCL_VCXI_P1SR_BL_PSTEP_TAPE definition
  public
  inheriting from ZCL_VCXI_P1SR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_PXSR_PCDIR .

  constants C_IPSTP_TAPE type /VCXI/VSMC_IPSTP value 'P1_PS_TAPE' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_TAPE
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .

  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods ADD_ASPECTS_TO_RTE_PSTEP
    redefinition .
protected section.

  constants C_ILTYP_MIN_DIST_TAPES_SS type /VCXI/VSMC_ILTYP value 'P0_LT_DP_TAPE_MIN_DIST_' ##NO_TEXT.
  constants C_ILTYP_NO_TAPES_SS type /VCXI/VSMC_ILTYP value 'P0_LT_DP_TAPE_NUM_' ##NO_TEXT.
  data S_COLEN type ZVCXI_PCS_S_COLEN .

  methods GET_MIN_DISTANCE
    importing
      !IF_TTAPE type ZVCXI_P0S_TTAPE optional
    exporting
      !EF_LDVAL type /VCXI/VSMR_LDVAL
      !EF_LDUOM type /VCXI/VSMC_LDUOM
    raising
      /VCXI/CX_CKX .
  methods GET_NOTAP
    importing
      !IF_TTAPE type ZVCXI_P0S_TTAPE optional
    returning
      value(RF_NOTAP) type I .
  methods ADD_SPVRE_MC_TAPE
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_TAPE
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SCORES_AP
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_CORR
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    exporting
      !ER_PR_CORR type ref to ZCL_VCXI_P1SS_PR_CORR
    raising
      /VCXI/CX_CKX .

  methods FILL_SPVRE_ADDON
    redefinition .
  methods GET_XML_DREF
    redefinition .
private section.

  data S_PCDIM_OUT type ZVCXI_P0SP_S_PCDIM .
  data T_MS_TAPE type ZVCXI_P0SR_TT_MS_TAPE .
endclass. "ZCL_VCXI_P1SR_BL_PSTEP_TAPE definition
class ZCL_VCXI_P1SR_BL_PSTEP_TAPE implementation.
  method ADD_ASPECTS_TO_RTE_PSTEP.

***----------------------------------------------------------------------------
*** Get Super
    SUPER->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).


***----------------------------------------------------------------------------
*** Aspect - Number of Tapes
    try.
        IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = ZCL_VCXI_P0SP_PR_ADDON_TAPE=>C_IAATY_NOTAP
                                     II_ARECN  = value #( ( SIGN   = 'I'
                                                            OPTION = 'LE'
                                                            LOW    = ME->GET_NOTAP( ) ) )
                                     IF_MAXSEL = 1
                                     IF_ASORT  = /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING ).
      catch /VCXI/CX_CKX.
    endtry.

  endmethod.
  method ADD_LIMITS_TO_RTE_PSTEP.

    data: LF_LDUOM type        /VCXI/VSMC_LDUOM,
          LF_LDVAL type        /VCXI/VSMR_LDVAL,
          LF_ID    type        /VCXI/CKX_ID.
    data: LS_MS_TAPE type        ZVCXI_P0SR_S_MS_TAPE.
    data: LI_LVVAL  type        /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
    data: LT_LTYPE  type        /VCXI/CKX_TT_OBJECT.
    data: LR_LTYPE  type ref to /VCXI/CL_VSMC_LTYPE,
          LR_OBJECT type ref to /VCXI/IF_CKX_OBJECT.
    field-symbols:  <S_LVVAL> type        /VCXI/VSMR_S_RTE_RANGE_LVVAL.

    SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***--------------------------------------------------------------------------------------
*** Get all linked Limits
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      free: LF_LDVAL,
            LF_LDUOM,
            LI_LVVAL.

***--------------------------------------------------------------------------------------
      case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Number of Tapes
        when 'P0_LT_DP_TAPE_NUM'.
          LF_LDVAL = LINES( ME->T_MS_TAPE ).
          LF_LDUOM = 'ST'.

***     Tape Type (non-closing)
        when 'P0_LT_VP_TAPE_TYPE'.
          loop at ME->T_MS_TAPE into LS_MS_TAPE.
            append initial line to LI_LVVAL assigning <S_LVVAL>.
            move 'I'                        to <S_LVVAL>-SIGN.
            move 'EQ'                       to <S_LVVAL>-OPTION.
            move LS_MS_TAPE-TTAPE           to <S_LVVAL>-LOW.
          endloop.

        when others.
          LF_ID = LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***       Number of Tapes of a specific Type
          replace C_ILTYP_NO_TAPES_SS in LF_ID with SPACE.
          if SY-SUBRC eq 0.
            condense LF_ID.
            LF_LDVAL = ME->GET_NOTAP( IF_TTAPE = conv #( LF_ID ) ).
            LF_LDUOM = 'ST'.
          else.
***         Min. Distance between Tapes of a specific Type
            replace C_ILTYP_MIN_DIST_TAPES_SS in LF_ID with SPACE.
            if SY-SUBRC eq 0.
              condense LF_ID.
              if ME->GET_NOTAP( IF_TTAPE = conv #( LF_ID ) ) gt 1.
                ME->GET_MIN_DISTANCE( exporting IF_TTAPE = conv #( LF_ID )
                                      importing EF_LDVAL = LF_LDVAL
                                                EF_LDUOM = LF_LDUOM ).
              else.
***             Not applicable Limit
                IR_RTE_PSTEP->SET_LIMIT_NA( IR_LTYPE = LR_LTYPE ).
                continue.
              endif.
            else.
              continue.
            endif.
          endif.
      endcase.

***--------------------------------------------------------------------------------------
***   Set
      case LR_LTYPE->F_MLTYP.
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
          IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                      IF_LDVAL = LF_LDVAL
                                      IF_LDUOM = LF_LDUOM ).
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
          IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                      II_LVVAL = LI_LVVAL ).
      endcase.
    endloop.

  endmethod.
  method ADD_SPVRE_MC_TAPE.

    data: LF_WERKS type WERKS_D.
    data: LS_MS_TAPE type ZVCXI_P0SR_S_MS_TAPE.
    data: LR_SPVCE         type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MC_TAPE type ref to /VCXI/CL_VKSR_SPVRE.

    check ME->T_MS_TAPE is not initial.

*** Get Plant
    LF_WERKS = IR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_TAPE'
                                        IR_SPVCE_PARENT = IR_SPVRE_ADDON->R_SPVCE ).

    loop at ME->T_MS_TAPE into LS_MS_TAPE.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MC_TAPE
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_ADDON.
      append LR_SPVRE_MC_TAPE to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MC_TAPE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
***   Identify Material if not provided
      if LS_MS_TAPE-MATNR is initial.
        LS_MS_TAPE-MATNR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_TTAPE_MATNR( IF_TTAPE = LS_MS_TAPE-TTAPE
                                                                      IF_WERKS = LF_WERKS
                                                                      IF_DATE  = ME->F_DATE ).
      endif.

***------------------------------------------------------------------------------------------------
***   Set Material Number
      LR_SPVRE_MC_TAPE->SET_LEOKY( IS_LEOKY = value #( LEOKY = LS_MS_TAPE-MATNR
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Set Tape Type
      LR_SPVRE_MC_TAPE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MC_TAPE=>C_PARID_TTAPE
                                                       PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                       ATWRT = LS_MS_TAPE-TTAPE
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Set Tape Length
      LR_SPVRE_MC_TAPE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MC_TAPE=>C_PARID_TAPLE
                                                       PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                       ATFLV = LS_MS_TAPE-TAPLE
                                                       UNIT  = LS_MS_TAPE-TAPLE_UOM
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

    endloop.

  endmethod.
  method COMPARE.

    data:  LR_BL_PSTEP_TAPE type ref to ZCL_VCXI_P1SR_BL_PSTEP_TAPE.


*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP_TAPE.

***--------------------------------------------------------------------------------------
*** Corrugation Length
    if ME->S_COLEN eq LR_BL_PSTEP_TAPE->S_COLEN.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

*** Tape
    if ME->T_MS_TAPE eq LR_BL_PSTEP_TAPE->T_MS_TAPE.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      exit.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                        IF_DATE    = IF_DATE
                        IR_APPDATA = IR_APPDATA ).

  endmethod.
  method COPY.

    data: LR_BL_PSTEP_TAPE type ref to ZCL_VCXI_P1SR_BL_PSTEP_TAPE.

*** Super Copy
    RR_BL_PSTEP = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP_TAPE.

***--------------------------------------------------------------------------------------
*** Corrugation Length
    move ME->S_COLEN        to LR_BL_PSTEP_TAPE->S_COLEN.

*** Copy Tapes
    move ME->T_MS_TAPE      to LR_BL_PSTEP_TAPE->T_MS_TAPE.

  endmethod.
  method FILL_SPVRE_ADDON.

    SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                       IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                       IR_ARBPL       = IR_ARBPL
                             changing  CT_SPVRE       = CT_SPVRE ).

    case IR_SPVRE_ADDON->GET_ID( ).
      when 'P0_AT_TAPE'.
        ME->FILL_SPVRE_ADDON_TAPE( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                             IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                             IR_ARBPL       = IR_ARBPL
                                   changing  CT_SPVRE       = CT_SPVRE ).
    endcase.

  endmethod.
  method FILL_SPVRE_ADDON_TAPE.

***------------------------------------------------------------------------------------------------
*** Add Material Consumption for Tape
    ME->ADD_SPVRE_MC_TAPE( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                     IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                     IR_ARBPL       = IR_ARBPL
                           changing  CT_SPVRE       = CT_SPVRE ).

  endmethod.
  method GET_MIN_DISTANCE.

    data: LF_ABPOS type F.
    data: LS_MS_TAPE type ZVCXI_P0SR_S_MS_TAPE,
          LS_TAPOS   type ZVCXI_P0SS_S_TAPOS,
          LS_CALCV   type ZVCXI_XCS_S_CALCV.
    data: LT_MS_TAPE type ZVCXI_P0SR_TT_MS_TAPE.


*** Convert Tapes to absolute Position
    loop at ME->T_MS_TAPE into LS_MS_TAPE.
      LF_ABPOS += LS_MS_TAPE-TAPOS.
      LS_MS_TAPE-TAPOS = LF_ABPOS.
      append LS_MS_TAPE to LT_MS_TAPE.
    endloop.

*** Remove other Tape Types
    if IF_TTAPE is supplied.
      delete LT_MS_TAPE where TTAPE ne IF_TTAPE.
    endif.

*** Identify minimum Distance
    loop at LT_MS_TAPE into LS_MS_TAPE.
      if LS_TAPOS is not initial.
***     Calculate Distance to previous Tape
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_MS_TAPE-TAPOS
                                                            IF_CALCV_UOM_1 = LS_MS_TAPE-TAPOS_UOM
                                                            IF_CALCV_2     = LS_TAPOS-TAPOS
                                                            IF_CALCV_UOM_2 = LS_TAPOS-TAPOS_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                            IF_UOM         = LS_TAPOS-TAPOS_UOM
                                                  importing EF_CALCV       = LS_CALCV-CALCV
                                                            EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).
        if EF_LDVAL is initial or
           EF_LDVAL gt LS_CALCV-CALCV.
          EF_LDVAL = LS_CALCV-CALCV.
          EF_LDUOM = LS_CALCV-CALCV_UOM.
        endif.
      endif.

***   Buffer last absolute position
      LS_TAPOS-TAPOS     = LS_MS_TAPE-TAPOS.
      LS_TAPOS-TAPOS_UOM = LS_MS_TAPE-TAPOS_UOM.

    endloop.

  endmethod.
  method GET_NOTAP.

    if IF_TTAPE is supplied.
      RF_NOTAP = reduce #( init COUNT = 0
                           for LS_MS_TAPE in ME->T_MS_TAPE where ( TTAPE = IF_TTAPE )
                           next COUNT = COUNT + 1 ).
    else.
      RF_NOTAP = LINES( ME->T_MS_TAPE ).
    endif.

  endmethod.
  method GET_SPVRE_MF.

*** No Material Flow In
    return.

  endmethod.
  method GET_XML_DREF.

*** Super References
    RT_DATA = SUPER->GET_XML_DREF( ).

*** Add additional References
    append value #( NAME = 'T_MS_TAPE'   VALUE = ref #( ME->T_MS_TAPE ) ) to RT_DATA.
    append value #( NAME = 'S_COLEN'     VALUE = ref #( ME->S_COLEN   ) ) to RT_DATA.

  endmethod.
  method INIT_BY_SCORES_AP.

    data: LS_COLEN   type ZVCXI_PCS_S_COLEN,
          LS_TAPE_AP type ZVCXI_PXSS_S_TAPE_AP.
    data: LT_TAPE_AP type ZVCXI_PXSS_TT_TAPE_AP.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_SCORES_AP type ref to ZIF_VCXI_PXSS_SCORES_AP.


***--------------------------------------------------------------------------------------
*** Get Reference for Apply Scores and Tapes Interface
    loop at IT_PRVDR into LR_GATE
                    where TABLE_LINE->R_CLSPR is instance of ZIF_VCXI_PXSS_SCORES_AP.
      LR_SCORES_AP ?= LR_GATE->R_CLSPR.
      exit.
    endloop.
    check LR_SCORES_AP  is bound.

***--------------------------------------------------------------------------------------
*** Get Applied Tapes
    LR_SCORES_AP->GET_SCORE_AP( importing ET_TAPE_AP = LT_TAPE_AP ).

*** Use PC Length as Corrugation Length
    LS_COLEN = ME->S_COLEN.
    if LS_COLEN-COLEN is initial.
      LS_COLEN = value #( COLEN     = ME->S_PCDIM_OUT-PCLEN
                          COLEN_UOM = ME->S_PCDIM_OUT-PCLEN_UOM ).
    endif.

    loop at LT_TAPE_AP into LS_TAPE_AP where FAPPL eq ABAP_TRUE.
      append value #( TTAPE     = LS_TAPE_AP-TTAPE
                      TAPOS     = LS_TAPE_AP-TAPOS
                      TAPOS_UOM = LS_TAPE_AP-TAPOS_UOM
                      TAPLE     = LS_COLEN-COLEN
                      TAPLE_UOM = LS_COLEN-COLEN_UOM
                    ) to ME->T_MS_TAPE.
    endloop.

  endmethod.
  method INIT_BY_SPEC.

    data: LT_PCDIM type ZVCXI_P0SP_TT_PCDIM.


*** Get Outbound PC Dimension
    LT_PCDIM = ME->GET_PCDIM_OUT( IT_PRVDR = IT_PRVDR ).
    ME->S_PCDIM_OUT = value #( LT_PCDIM[ 1 ] optional ).

*** Call SUPER
    SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                         IT_PRVDR = IT_PRVDR ).

*** Get Corrugation Details
    ME->INIT_BY_SPEC_CORR( IT_PRVDR = IT_PRVDR ).

*** Initialize by Tape Application
    ME->INIT_BY_SCORES_AP( IT_PRVDR = IT_PRVDR ).

  endmethod.
  method INIT_BY_SPEC_CORR.

    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Corrugation Reference
    loop at IT_PRVDR into LR_GATE
                    where TABLE_LINE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_CORR.
      ER_PR_CORR ?= LR_GATE->R_CLSPR.
      exit.
    endloop.

    check ER_PR_CORR  is bound.

***--------------------------------------------------------------------------------------
*** Get Corrugation Length
    ME->S_COLEN = ER_PR_CORR->ZIF_VCXI_P1SS_COMM_NEXT~GET_CRBPX( )->S_COLEN.

  endmethod.
  method ZIF_VCXI_PXSR_PCDIR~GET_PCDIM.
  endmethod.
  method ZIF_VCXI_PXSR_PCDIR~SET_PCDIR.

    move IF_PCDIR to ME->ZIF_VCXI_PXSR_PCDIR~F_PCDIR.

  endmethod.
