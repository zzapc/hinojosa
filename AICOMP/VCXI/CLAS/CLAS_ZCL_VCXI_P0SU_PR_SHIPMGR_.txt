
class ZCL_VCXI_P0SU_PR_SHIPMGR definition
  public
  inheriting from ZCL_VCXI_XCSU_PR_SHIPMGR
  create public .

public section.

  methods GET_BASE_DIMEN
    redefinition .
  methods GET_BASE_PRQTY
    redefinition .
protected section.

  data R_PRODDIM type ref to ZIF_VCXI_P0SS_PRODDIM .
  data R_PR_AREA_WEIGHT type ref to ZCL_VCXI_P0SS_PR_AREA_WEIGHT .

  methods HANDLE_INIT_REFERENCES
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SU_PR_SHIPMGR definition
class ZCL_VCXI_P0SU_PR_SHIPMGR implementation.
method GET_BASE_DIMEN.

  data:          LS_FOLLE  type ZVCXI_P0SS_S_FOLLE,
                 LS_FOLWI  type ZVCXI_P0SS_S_FOLWI,
                 LS_FOLHE  type ZVCXI_P0SS_S_FOLHE,
                 LS_WDRNP  type ZVCXI_P0SS_S_WDRNP.
  field-symbols: <S_DIMEN> type ZVCXI_XCSU_S_DIMEN.

*** First check if all References are there
  if ME->R_PRODDIM        is not bound or
     ME->R_PR_AREA_WEIGHT is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

  if ME->R_PRODDIM is bound.
    ME->R_PRODDIM->GET_FOLLE( importing ES_FOLLE = LS_FOLLE ).
    ME->R_PRODDIM->GET_FOLWI( importing ES_FOLWI = LS_FOLWI ).
    ME->R_PRODDIM->GET_FOLHE( importing ES_FOLHE = LS_FOLHE ).
  endif.

  if ME->R_PR_AREA_WEIGHT is bound.
    LS_WDRNP = ME->R_PR_AREA_WEIGHT->GET_WDRNP( ).
  endif.

  append initial line to RT_DIMEN assigning <S_DIMEN>.
  <S_DIMEN>-DIMEN      = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH.
  <S_DIMEN>-DIMVA      = LS_FOLLE-FOLLE.
  <S_DIMEN>-DIMVA_UOM  = LS_FOLLE-FOLLE_UOM.

  append initial line to RT_DIMEN assigning <S_DIMEN>.
  <S_DIMEN>-DIMEN     = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH.
  <S_DIMEN>-DIMVA     = LS_FOLWI-FOLWI.
  <S_DIMEN>-DIMVA_UOM = LS_FOLWI-FOLWI_UOM.

  append initial line to RT_DIMEN assigning <S_DIMEN>.
  <S_DIMEN>-DIMEN     = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT.
  <S_DIMEN>-DIMVA     = LS_FOLHE-FOLHE.
  <S_DIMEN>-DIMVA_UOM = LS_FOLHE-FOLHE_UOM.

  append initial line to RT_DIMEN assigning <S_DIMEN>.
  <S_DIMEN>-DIMEN     = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT.
  <S_DIMEN>-DIMVA     = LS_WDRNP-WDRNP.
  <S_DIMEN>-DIMVA_UOM = LS_WDRNP-WDRNP_UOM.

endmethod.
method GET_BASE_PRQTY.

  RS_PRQTY-PRQTY     = 1.
  RS_PRQTY-PRQTY_UOM = 'ST'.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_GATE_SPEC       type ref to /VCXI/CL_VKSR_GATE.

  SUPER->HANDLE_INIT_REFERENCES( ).

***------------------------------------------------------------------------------------------------
*** Get Specification Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE_SPEC index 1.
  check LR_GATE_SPEC is bound.

***------------------------------------------------------------------------------------------------
*** Get Product Dimensions Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_PRODDIM=>C_IPRVT_P0_PRODDIM
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->IS_IN_LINE( IR_GATE = LR_GATE_SPEC ) eq ABAP_TRUE.
          move LR_GATE->R_CLSPR ?to ME->R_PRODDIM.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_PRODDIM.
    endtry.
  endloop.

  if ME->R_PRODDIM is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZIF_VCXI_P0SS_PRODDIM=>C_IPRVT_P0_PRODDIM
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

***------------------------------------------------------------------------------------------------
*** Get Area and Weight Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_AREA_WEIGHT=>C_IPRVT_P0_AREA_WEIGHT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    try.
        if LR_GATE->IS_IN_LINE( IR_GATE = LR_GATE_SPEC ) eq ABAP_TRUE.
          move LR_GATE->R_CLSPR ?to ME->R_PR_AREA_WEIGHT.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_PR_AREA_WEIGHT.
    endtry.
  endloop.

  if ME->R_PR_AREA_WEIGHT is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_P0SS_PR_AREA_WEIGHT=>C_IPRVT_P0_AREA_WEIGHT
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
endclass. "ZCL_VCXI_P0SU_PR_SHIPMGR implementation
