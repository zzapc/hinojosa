
class ZCL_VCXI_XCSU_PR_SHIPOVR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_XCS_SHIPOVR type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSU_SHIPOVR'. "#EC NOTEXT
  constants C_PARID_OTRUT type /VCXI/VKS_PARID value 'ZVCXI_XC_OTRUT'. "#EC NOTEXT
  constants C_PARID_TPORD type /VCXI/VKS_PARID value 'ZVCXI_XC_TPORD'. "#EC NOTEXT
  constants C_PARID_TRUUT type /VCXI/VKS_PARID value 'ZVCXI_XC_TRUUT'. "#EC NOTEXT
  constants C_PARID_UPORD type /VCXI/VKS_PARID value 'ZVCXI_XC_UPORD'. "#EC NOTEXT
  constants C_PARID_WPORD type /VCXI/VKS_PARID value 'ZVCXI_XC_WPORD'. "#EC NOTEXT
  constants C_PARID_WPUNT type /VCXI/VKS_PARID value 'ZVCXI_XC_WPUNT'. "#EC NOTEXT
  constants C_PARID_FGPHU type /VCXI/VKS_PARID value 'ZVCXI_XC_FGPHU'. "#EC NOTEXT

  type-pools ABAP .
  methods GET_TRUCK_INFO
    exporting
      !EF_ACTIV type ABAP_BOOL
      !EF_HUPTR type ZVCXI_XCSU_HUPTR
      !EF_HUPLA type ZVCXI_XCSU_HUPLA
      !EF_LAPTR type ZVCXI_XCSU_LAPTR
      !EF_FGPTR type ZVCXI_XCSU_FGPTR
      !EF_TTRUC type ZVCXI_XCSU_TTRUC
      !ET_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !ET_LIMIT type ZVCXI_XCSU_TT_LIMIT
    raising
      /VCXI/CX_CKX .
  methods GET_STACK_INFO
    exporting
      !EF_FGPST type ZVCXI_XCSU_FGPST
      !EF_ACTIV type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_HU_INFO
    exporting
      !EF_HU_ACTIV type ABAP_BOOL
      !EF_STPHU type ZVCXI_XCSU_STPHU
      !EF_SPATT type ZVCXI_XCSU_SPATT
      !ET_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !ET_LIMIT type ZVCXI_XCSU_TT_LIMIT
      !EF_PALLET_ACTIV type ABAP_BOOL
      !EF_PPMAT type ZVCXI_XCSU_PPMAT
      !EF_PPATT type ZVCXI_XCSU_PPATT
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_DETAIL_SHIPMGR
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY optional
      !IF_PMATY type ZVCXI_XCSU_PMATY optional
    exporting
      !ES_PRQTY type ZVCXI_XCSU_S_PRQTY
      !ES_TBQTY type ZVCXI_XCSU_S_TBQTY
      !ET_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !ET_LIMIT type ZVCXI_XCSU_TT_LIMIT
      !ES_OPQTY type /VCXI/VSMR_S_OPQTY
      !EF_PACKP type ZVCXI_XCSU_PACKP
      !EF_SHUNT type ZVCXI_XCSU_SHUNT
      !EF_PMATN type ZVCXI_XCSU_PMATN
      !EF_CONSC type ZVCXI_XCSU_CONSC
      !EF_ACTIV type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_FGPHU
    returning
      value(RF_FGPHU) type ZVCXI_XCSU_FGPHU
    raising
      /VCXI/CX_CKX .
  methods GET_OTRUT
    returning
      value(RS_OTRUT) type ZVCXI_XCSU_S_OTRUT
    raising
      /VCXI/CX_CKX .
  methods GET_TPORD
    returning
      value(RF_TPORD) type ZVCXI_XCSU_TPORD
    raising
      /VCXI/CX_CKX .
  methods GET_TRUUT
    returning
      value(RS_TRUUT) type ZVCXI_XCSU_S_TRUUT
    raising
      /VCXI/CX_CKX .
  methods GET_UPORD
    returning
      value(RF_UPORD) type ZVCXI_XCSU_UPORD
    raising
      /VCXI/CX_CKX .
  methods GET_WPORD
    returning
      value(RS_WPORD) type ZVCXI_XCSU_S_WPORD
    raising
      /VCXI/CX_CKX .
  methods GET_WPUNT
    returning
      value(RS_WPUNT) type ZVCXI_XCSU_S_WPUNT
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_UTIL type /VCXI/VKSC_IEVNT value 'RECALC_UTIL'. "#EC NOTEXT
  data R_CUST_SHIPU type ref to ZCL_VCXI_XCSU_CUST_SHIPU .
  data S_COMOD type ZVCXI_XCSU_S_COMOD .

  methods CALC_FGPHU
    raising
      /VCXI/CX_CKX .
  methods CALC_OTRUT
    raising
      /VCXI/CX_CKX .
  methods CALC_TPORD
    importing
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_TRUUT
    raising
      /VCXI/CX_CKX .
  methods CALC_UPORD
    importing
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_WPORD
    importing
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY
    raising
      /VCXI/CX_CKX .
  methods CALC_WPUNT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_UTIL
    raising
      /VCXI/CX_CKX .
  methods SET_FGPHU
    importing
      !IF_FGPHU type ZVCXI_XCSU_FGPHU
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_OTRUT
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_OTRUT type ZVCXI_XCSU_S_OTRUT
    raising
      /VCXI/CX_CKX .
  methods SET_TPORD
    importing
      !IF_TPORD type ZVCXI_XCSU_TPORD
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRUUT
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IS_TRUUT type ZVCXI_XCSU_S_TRUUT
    raising
      /VCXI/CX_CKX .
  methods SET_UPORD
    importing
      !IF_UPORD type ZVCXI_XCSU_UPORD
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WPORD
    importing
      !IS_WPORD type ZVCXI_XCSU_S_WPORD
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WPUNT
    importing
      !IS_WPUNT type ZVCXI_XCSU_S_WPUNT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSU_PR_SHIPOVR definition
class ZCL_VCXI_XCSU_PR_SHIPOVR implementation.
  method CALC_FGPHU.

    data: LF_SHUTY_HU type ZVCXI_XCSU_SHUTY,
          LF_HU_ACTIV type ABAP_BOOL,
          LF_FGPHU    type ZVCXI_XCSU_FGPHU.
    data: LS_TBQTY type ZVCXI_XCSU_S_TBQTY.
    field-symbols: <F_OTRUT> type ZVCXI_XCSU_OTRUT.


***-------------------------------------------------------------------------
***   Get Details of Shipping Unit HU
    if ME->R_CUST_SHIPU is bound.
      loop at ME->R_CUST_SHIPU->T_SHUTY_HU into LF_SHUTY_HU.
        ME->GET_DETAIL_SHIPMGR( exporting IF_SHUTY = LF_SHUTY_HU
                                importing EF_ACTIV = LF_HU_ACTIV
                                          ES_TBQTY = LS_TBQTY ).
        if LF_HU_ACTIV eq ABAP_TRUE.
***       "Calc" Value
          try.
              LF_FGPHU = LS_TBQTY-TBQTY.
            catch CX_SY_CONVERSION_OVERFLOW.
              clear LF_FGPHU.
          endtry.
          exit.
        endif.
      endloop.
    endif.

***-------------------------------------------------------------------------
*** Set Value
    ME->SET_FGPHU( IF_FGPHU = LF_FGPHU ).

  endmethod.
method CALC_OTRUT.

  data:          LF_SHUTY_CONT type        ZVCXI_XCSU_SHUTY,
                 LF_UPORD      type        ZVCXI_XCSU_UPORD.
  data:          LS_PRQTY      type        ZVCXI_XCSU_S_PRQTY,
                 LS_OTRUT      type        ZVCXI_XCSU_S_OTRUT.
  data:          LR_DATA       type ref to DATA.
  field-symbols: <F_OTRUT>     type        ZVCXI_XCSU_OTRUT.

  LS_OTRUT = ME->GET_OTRUT( ).
  clear: LS_OTRUT-OTRUT.

***-------------------------------------------------------------------------
*** Get Shipping Unit Container
  if ME->R_CUST_SHIPU is bound.
    LF_SHUTY_CONT = ME->R_CUST_SHIPU->F_SHUTY_CONTAINER.

***-------------------------------------------------------------------------
*** Get Shipping Manager Details
    ME->GET_DETAIL_SHIPMGR( exporting IF_SHUTY = LF_SHUTY_CONT
                            importing ES_PRQTY = LS_PRQTY ).

***-------------------------------------------------------------------------
*** Calc Value
    if LS_PRQTY-PRQTY is not initial.

      LF_UPORD = ME->GET_UPORD( ).
      LS_OTRUT = ME->GET_OTRUT( ).
      try.
          LS_OTRUT-OTRUT = ( LF_UPORD / LS_PRQTY-PRQTY ) * 100.
        catch CX_SY_ARITHMETIC_OVERFLOW
              CX_SY_CONVERSION_OVERFLOW.
          LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = LS_OTRUT-OTRUT ).
          assign LR_DATA->* to <F_OTRUT>.
          LS_OTRUT-OTRUT = <F_OTRUT>.
      endtry.
    endif.
  endif.
***-------------------------------------------------------------------------
*** Set Value
  ME->SET_OTRUT( IS_OTRUT = LS_OTRUT ).

endmethod.
method CALC_TPORD.

  data:         LF_SHUTY_CONT type        ZVCXI_XCSU_SHUTY,
                LF_TPORD      type        ZVCXI_XCSU_TPORD.
  data:         LS_TBQTY      type        ZVCXI_XCSU_S_TBQTY.
  data:         LR_DATA       type ref to DATA.
  field-symbols: <F_TPORD>    type ZVCXI_XCSU_TPORD.

***-------------------------------------------------------------------------
*** Get Shipping Unit Container
  if ME->R_CUST_SHIPU is bound.
    LF_SHUTY_CONT = ME->R_CUST_SHIPU->F_SHUTY_CONTAINER.

***-------------------------------------------------------------------------
*** Get Shipping Manager Details
    ME->GET_DETAIL_SHIPMGR( exporting IF_SHUTY = LF_SHUTY_CONT
                            importing ES_TBQTY = LS_TBQTY ).

    if LS_TBQTY-TBQTY is not initial.
      try.
          LF_TPORD = ceil( IS_OPQTY-OPQTY / LS_TBQTY-TBQTY ).
        catch CX_SY_ARITHMETIC_OVERFLOW
              CX_SY_CONVERSION_OVERFLOW.
          LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = LF_TPORD ).
          assign LR_DATA->* to <F_TPORD>.
          LF_TPORD = <F_TPORD>.
      endtry.
    endif.
  endif.

***-------------------------------------------------------------------------
*** Set Value
  ME->SET_TPORD( IF_TPORD = LF_TPORD ).

endmethod.
method CALC_TRUUT.

  data:          LF_SHUTY_CONT  type        ZVCXI_XCSU_SHUTY,
                 LF_LIM_LEN     type        ATFLV,
                 LF_LIM_WID     type        ATFLV,
                 LF_LIM_HGT     type        ATFLV,
                 LF_LIM_PROD    type        ATFLV,
                 LF_DIM_LEN     type        ATFLV,
                 LF_DIM_WID     type        ATFLV,
                 LF_DIM_HGT     type        ATFLV,
                 LF_DIM_PROD    type        ATFLV,
                 LF_DIMID       type        DIMID.
  data:          LS_TRUUT       type        ZVCXI_XCSU_S_TRUUT.
  data:          LT_DIMEN       type        ZVCXI_XCSU_TT_DIMEN,
                 LT_LIMIT       type        ZVCXI_XCSU_TT_LIMIT.
  data:          LR_DATA        type ref to DATA.
  field-symbols: <S_DIMEN>      type        ZVCXI_XCSU_S_DIMEN,
                 <S_LIMIT>      type        ZVCXI_XCSU_S_LIMIT,
                 <F_TRUUT>      type        ZVCXI_XCSU_TRUUT.

  LS_TRUUT = ME->GET_TRUUT( ).
  clear: LS_TRUUT-TRUUT.

***-------------------------------------------------------------------------
*** Get Shipping Unit Container
  if ME->R_CUST_SHIPU is bound.
    LF_SHUTY_CONT = ME->R_CUST_SHIPU->F_SHUTY_CONTAINER.

*** determine what dimensions should be used for calculation.
    LF_DIMID = ME->R_CUST_SHIPU->F_DIMID.


***-------------------------------------------------------------------------
*** Get Shipping Unit Details
    ME->GET_DETAIL_SHIPMGR( exporting IF_SHUTY = LF_SHUTY_CONT
                            importing ET_DIMEN = LT_DIMEN
                                      ET_LIMIT = LT_LIMIT ).

*** Get needed Dimension
    read table LT_DIMEN assigning <S_DIMEN> with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH.
    if SY-SUBRC eq 0. LF_DIM_LEN = <S_DIMEN>-DIMVA. endif.

    read table LT_DIMEN assigning <S_DIMEN> with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH.
    if SY-SUBRC eq 0. LF_DIM_WID = <S_DIMEN>-DIMVA. endif.

    read table LT_DIMEN assigning <S_DIMEN> with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT.
    if SY-SUBRC eq 0. LF_DIM_HGT = <S_DIMEN>-DIMVA. endif.

*** Get needed Limits
    read table LT_LIMIT assigning <S_LIMIT> with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH
                                                     LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX.
    if SY-SUBRC eq 0. LF_LIM_LEN = <S_LIMIT>-DIMVA. endif.

    read table LT_LIMIT assigning <S_LIMIT> with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH
                                                     LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX.
    if SY-SUBRC eq 0. LF_LIM_WID = <S_LIMIT>-DIMVA. endif.

    read table LT_LIMIT assigning <S_LIMIT> with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT
                                                     LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX.
    if SY-SUBRC eq 0. LF_LIM_HGT = <S_LIMIT>-DIMVA. endif.

***-------------------------------------------------------------------------
*** Do Calculation
    case LF_DIMID.
      when  ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMID_LINEAR.
***   Take Length values directly
        LF_DIM_PROD = LF_DIM_LEN.
        LF_LIM_PROD = LF_LIM_LEN.
      when  ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMID_AREA.
***   Calculate Areas
        LF_DIM_PROD = LF_DIM_LEN * LF_DIM_WID.
        LF_LIM_PROD = LF_LIM_LEN * LF_LIM_WID.
      when  ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMID_VOLUME.
***   Calculate the Volumes
        LF_DIM_PROD = LF_DIM_LEN * LF_DIM_WID * LF_DIM_HGT.
        LF_LIM_PROD = LF_LIM_LEN * LF_LIM_WID * LF_LIM_HGT.
    endcase.

    if LF_LIM_PROD is not initial.
      try.
          LS_TRUUT-TRUUT = ( LF_DIM_PROD / LF_LIM_PROD ) * 100.
        catch CX_SY_ARITHMETIC_OVERFLOW
              CX_SY_CONVERSION_OVERFLOW.
          LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = LS_TRUUT-TRUUT ).
          assign LR_DATA->* to <F_TRUUT>.
          LS_TRUUT-TRUUT = <F_TRUUT>.
      endtry.
    endif.
  endif.

***-------------------------------------------------------------------------
*** Set Value
  ME->SET_TRUUT( IS_TRUUT = LS_TRUUT ).

endmethod.
  method CALC_UPORD.

    data: LF_SHUTY_HU type ZVCXI_XCSU_SHUTY,
          LF_HU_ACTIV type ABAP_BOOL,
          LF_UPORD    type ZVCXI_XCSU_UPORD.
    data: LS_TBQTY    type ZVCXI_XCSU_S_TBQTY.

***-------------------------------------------------------------------------
*** Get Details of Shipping Unit HU
    if ME->R_CUST_SHIPU is bound.
      loop at ME->R_CUST_SHIPU->T_SHUTY_HU into LF_SHUTY_HU.
        ME->GET_DETAIL_SHIPMGR( exporting IF_SHUTY = LF_SHUTY_HU
                                importing EF_ACTIV = LF_HU_ACTIV
                                          ES_TBQTY = LS_TBQTY ).
        if LF_HU_ACTIV eq ABAP_TRUE.
          if LS_TBQTY-TBQTY is not initial.
            LF_UPORD = CEIL( IS_OPQTY-OPQTY / LS_TBQTY-TBQTY ).
          endif.
          exit.
        endif.
      endloop.
    endif.

***-------------------------------------------------------------------------
*** Set Value
    ME->SET_UPORD( IF_UPORD = LF_UPORD ).

  endmethod.
  method CALC_WPORD.

    data: LF_UPORD type ZVCXI_XCSU_UPORD.
    data: LS_TBQTY type ZVCXI_XCSU_S_TBQTY,
          LS_WPUNT type ZVCXI_XCSU_S_WPUNT,
          LS_WPORD type ZVCXI_XCSU_S_WPORD.
    data: LR_DATA  type ref to DATA.
    field-symbols: <F_WPORD>     type  ZVCXI_XCSU_WPORD.


    LS_WPORD = ME->GET_WPORD( ).
    clear: LS_WPORD-WPORD.

***-------------------------------------------------------------------------
*** Get HU per Order and Weight per Unit
    LF_UPORD = ME->GET_UPORD( ).
    LS_WPUNT = ME->GET_WPUNT( ).

*** Calculate Weight per Order
    try.
        LS_WPORD-WPORD = LF_UPORD * LS_WPUNT-WPUNT.
      catch CX_SY_ARITHMETIC_OVERFLOW
            CX_SY_CONVERSION_OVERFLOW.
        LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = LS_WPORD-WPORD ).
        assign LR_DATA->* to <F_WPORD>.
        LS_WPORD-WPORD = <F_WPORD>.
    endtry.
    LS_WPORD-WPORD_UOM = LS_WPUNT-WPUNT_UOM.

***-------------------------------------------------------------------------
*** Set Value
    ME->SET_WPORD( IS_WPORD = LS_WPORD ).

  endmethod.
  method CALC_WPUNT.

    data: LF_SHUTY_HU type ZVCXI_XCSU_SHUTY,
          LF_HU_ACTIV type ABAP_BOOL.
    data: LS_WPUNT type ZVCXI_XCSU_S_WPUNT.
    data: LT_DIMEN type ZVCXI_XCSU_TT_DIMEN.
    field-symbols: <S_DIMEN> type ZVCXI_XCSU_S_DIMEN.


    LS_WPUNT = ME->GET_WPUNT( ).
    clear: LS_WPUNT-WPUNT.

***-------------------------------------------------------------------------
*** Get Details of Shipping Unit HU
    if ME->R_CUST_SHIPU is bound.
      loop at ME->R_CUST_SHIPU->T_SHUTY_HU into LF_SHUTY_HU.
        ME->GET_DETAIL_SHIPMGR( exporting IF_SHUTY = LF_SHUTY_HU
                                importing EF_ACTIV = LF_HU_ACTIV
                                          ET_DIMEN = LT_DIMEN ).
        if LF_HU_ACTIV eq ABAP_TRUE.

          read table LT_DIMEN assigning <S_DIMEN> with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT.

          if SY-SUBRC eq 0.
            LS_WPUNT-WPUNT     = <S_DIMEN>-DIMVA.
            LS_WPUNT-WPUNT_UOM = <S_DIMEN>-DIMVA_UOM.
          endif.
          exit.
        endif.
      endloop.
    endif.

***-------------------------------------------------------------------------
*** Set Value
    ME->SET_WPUNT( IS_WPUNT = LS_WPUNT ).

  endmethod.
method CONSTRUCTOR.

  data: LF_SYSOM type /VCXI/VKS_SYSOM.
  data: LS_CMPRK type /VCXI/VKC_S_CMPRK.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize Configuratin informations
  ME->R_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK
                                         EF_SYSOM = LF_SYSOM ).

  ME->S_COMOD-CMATN = LS_CMPRK-CMATN.
  ME->S_COMOD-PRFID = LS_CMPRK-PRFID.
  ME->S_COMOD-MSYST = LF_SYSOM.

endmethod.
method GET_DETAIL_SHIPMGR.

  data:          LT_GATE               type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE               type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SHIPMGR         type ref to ZCL_VCXI_XCSU_PR_SHIPMGR.

  try.

      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                       IF_INUSE = ABAP_TRUE ).

      loop at LT_GATE into LR_GATE.
        try.
            if LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to LR_PR_SHIPMGR.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            clear: ET_DIMEN, ET_LIMIT, ES_TBQTY, ES_PRQTY.
        endtry.
      endloop.

    catch /VCXI/CX_CKX.
      clear: ET_DIMEN, ET_LIMIT, ES_TBQTY, ES_PRQTY.
  endtry.

  check LR_PR_SHIPMGR is bound.
  if EF_ACTIV is requested.
    if IF_SHUTY is supplied and
       IF_PMATY is not supplied.
      if LR_PR_SHIPMGR->GET_SHIPUNIT_BY_SHUTY( IF_SHUTY = IF_SHUTY ) is not initial.
        EF_ACTIV = ABAP_TRUE.
      endif.
    elseif IF_SHUTY is supplied and
           IF_PMATY is supplied.
      if LR_PR_SHIPMGR->GET_PACKMAT_BY_SHUTY_PMATY( IF_SHUTY = IF_SHUTY
                                                    IF_PMATY = IF_PMATY ) is not initial.
        EF_ACTIV = ABAP_TRUE.
      endif.
    endif.
  endif.

  if ET_DIMEN is requested.
    ET_DIMEN = LR_PR_SHIPMGR->GET_DIMEN_BY_SHUTY( IF_SHUTY = IF_SHUTY ).
  endif.

  if ET_LIMIT is requested.
    ET_LIMIT = LR_PR_SHIPMGR->GET_LIMIT_BY_SHUTY( IF_SHUTY = IF_SHUTY ).
  endif.

  if ES_TBQTY is requested.
    ES_TBQTY = LR_PR_SHIPMGR->GET_TBQTY_BY_SHUTY( IF_SHUTY = IF_SHUTY ).
  endif.

  if ES_PRQTY is requested.
    ES_PRQTY = LR_PR_SHIPMGR->GET_PRQTY_BY_SHUTY( IF_SHUTY = IF_SHUTY ).
  endif.

  if EF_SHUNT is requested.
    EF_SHUNT = LR_PR_SHIPMGR->GET_SHUNT_BY_SHUTY( IF_SHUTY = IF_SHUTY ).
  endif.

  if EF_PACKP is requested.
    EF_PACKP = LR_PR_SHIPMGR->GET_PACKP_BY_SHUTY( IF_SHUTY = IF_SHUTY ).
  endif.

  if EF_PMATN is requested.
    EF_PMATN = LR_PR_SHIPMGR->GET_PMATN_BY_SHUTY_PMATY( IF_SHUTY = IF_SHUTY
                                                        IF_PMATY = IF_PMATY ).
  endif.

  if EF_CONSC is requested.
    EF_CONSC = LR_PR_SHIPMGR->GET_CONSC_BY_SHUTY_PMATY( IF_SHUTY = IF_SHUTY
                                                        IF_PMATY = IF_PMATY ).
  endif.

  if ES_OPQTY is requested.
    ES_OPQTY = LR_PR_SHIPMGR->GET_OPQTY( ).
  endif.

endmethod.
method GET_FGPHU.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FGPHU ).
  move LS_PARAM-ATFLV to RF_FGPHU.

endmethod.
  method GET_HU_INFO.

    data: LF_SHUTY_HU     type ZVCXI_XCSU_SHUTY,
          LF_SHUNT_HU     type ZVCXI_XCSU_SHUNT,
          LF_PMATY_PALLET type ZVCXI_XCSU_PMATY.
    data: LS_PRQTY  type ZVCXI_XCSU_S_PRQTY.
    field-symbols: <F_OTRUT> type ZVCXI_XCSU_OTRUT.


    check ME->R_CUST_SHIPU is bound.

***-------------------------------------------------------------------------
*** Get Shipping Manager Details HU
    if EF_HU_ACTIV is requested or
       EF_STPHU    is requested or
       EF_SPATT    is requested or
       ET_DIMEN    is requested or
       ET_LIMIT    is requested.
      loop at ME->R_CUST_SHIPU->T_SHUTY_HU into LF_SHUTY_HU.
        ME->GET_DETAIL_SHIPMGR( exporting IF_SHUTY = LF_SHUTY_HU
                                importing EF_ACTIV = EF_HU_ACTIV
                                          EF_SHUNT = LF_SHUNT_HU
                                          ES_PRQTY = LS_PRQTY
                                          EF_PACKP = EF_SPATT
                                          ET_DIMEN = ET_DIMEN
                                          ET_LIMIT = ET_LIMIT ).
        if EF_HU_ACTIV ne ABAP_TRUE.
          clear LF_SHUTY_HU.
          continue.
        else.
***       Return Value
          if EF_STPHU is requested.
            try.
                EF_STPHU = LS_PRQTY-PRQTY.
              catch CX_SY_CONVERSION_OVERFLOW.
                clear EF_STPHU.
            endtry.
          endif.
        endif.
        exit.  "Stop looking for Shipping Units
      endloop.
    endif.

***-------------------------------------------------------------------------
*** Get Shipping Manager Details Unit Pallet
    if EF_PALLET_ACTIV is requested or
       EF_PPMAT is requested or
       EF_PPATT is requested.

***   Get active Shipping Unit Type for HU
      if LF_SHUTY_HU is initial.
        loop at ME->R_CUST_SHIPU->T_SHUTY_HU into LF_SHUTY_HU.
          ME->GET_DETAIL_SHIPMGR( exporting IF_SHUTY = LF_SHUTY_HU
                                  importing EF_ACTIV = EF_HU_ACTIV ).
          if EF_HU_ACTIV ne ABAP_TRUE.
            clear LF_SHUTY_HU.
            continue.
          endif.
        endloop.
      endif.

      check LF_SHUTY_HU is not initial.
      LF_PMATY_PALLET = ME->R_CUST_SHIPU->GET_ACT_PMATY_PALLET( IF_SHUNT = LF_SHUNT_HU ).

      ME->GET_DETAIL_SHIPMGR( exporting IF_SHUTY = LF_SHUTY_HU
                                        IF_PMATY = LF_PMATY_PALLET
                              importing EF_ACTIV = EF_PALLET_ACTIV
                                        EF_PMATN = EF_PPMAT
                                        EF_CONSC = EF_PPATT ).
    endif.

  endmethod.
method GET_OTRUT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OTRUT ).
  move LS_PARAM-ATFLV to RS_OTRUT-OTRUT.
  move LS_PARAM-UNIT  to RS_OTRUT-OTRUT_UOM.

endmethod.
method GET_STACK_INFO.

  data:          LF_SHUTY_STACK type        ZVCXI_XCSU_SHUTY.
  data:          LS_TBQTY       type        ZVCXI_XCSU_S_TBQTY.
  field-symbols: <F_OTRUT>      type        ZVCXI_XCSU_OTRUT.

***-------------------------------------------------------------------------
*** Get Shipping Unit Stack
  check ME->R_CUST_SHIPU is bound.
  LF_SHUTY_STACK = ME->R_CUST_SHIPU->F_SHUTY_STACK.

***-------------------------------------------------------------------------
*** Get Shipping Manager Details
  ME->GET_DETAIL_SHIPMGR( exporting IF_SHUTY = LF_SHUTY_STACK
                          importing EF_ACTIV = EF_ACTIV
                                    ES_TBQTY = LS_TBQTY ).

***-------------------------------------------------------------------------
*** Return Value
  if EF_FGPST is requested.
    try.
        EF_FGPST = LS_TBQTY-TBQTY.
      catch CX_SY_CONVERSION_OVERFLOW.
        clear EF_FGPST.
    endtry.
  endif.

endmethod.
method GET_TPORD.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPORD ).
  move LS_PARAM-ATFLV to RF_TPORD.

endmethod.
method GET_TRUCK_INFO.

  data:          LF_SHUTY_CONTAINER type        ZVCXI_XCSU_SHUTY.
  data:          LS_PRQTY           type        ZVCXI_XCSU_S_PRQTY,
                 LS_TBQTY           type        ZVCXI_XCSU_S_TBQTY,
                 LS_DIMEN           type        ZVCXI_XCSU_S_DIMEN.
  field-symbols: <F_OTRUT>          type        ZVCXI_XCSU_OTRUT.

***-------------------------------------------------------------------------
*** Get Shipping Unit Stack
  check ME->R_CUST_SHIPU is bound.
  LF_SHUTY_CONTAINER   = ME->R_CUST_SHIPU->F_SHUTY_CONTAINER.

***-------------------------------------------------------------------------
*** Get Shipping Manager Details HU
  ME->GET_DETAIL_SHIPMGR( exporting IF_SHUTY = LF_SHUTY_CONTAINER
                          importing EF_ACTIV = EF_ACTIV
                                    ES_PRQTY = LS_PRQTY
                                    ES_TBQTY = LS_TBQTY
                                    EF_SHUNT = EF_TTRUC
                                    ET_DIMEN = ET_DIMEN
                                    ET_LIMIT = ET_LIMIT ).

*** Return Value
*** Read Layer
  if EF_HUPTR is requested.
    EF_HUPTR = LS_PRQTY-PRQTY.
  endif.

  if EF_FGPTR is requested.
    EF_FGPTR = LS_TBQTY-TBQTY.
  endif.

  if EF_LAPTR is requested or
     EF_HUPLA is requested.
    read table ET_DIMEN into LS_DIMEN with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LAYERS.

    EF_LAPTR = LS_DIMEN-DIMVA.
    if EF_LAPTR is not initial.
      EF_HUPLA = EF_HUPTR / EF_LAPTR.
    endif.
  endif.


endmethod.
method GET_TRUUT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRUUT ).
  move LS_PARAM-ATFLV to RS_TRUUT-TRUUT.
  move LS_PARAM-UNIT  to RS_TRUUT-TRUUT_UOM.

endmethod.
method GET_UPORD.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_UPORD ).
  move LS_PARAM-ATFLV to RF_UPORD.

endmethod.
method GET_WPORD.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  try.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WPORD ).
      move LS_PARAM-ATFLV to RS_WPORD-WPORD.
      move LS_PARAM-UNIT  to RS_WPORD-WPORD_UOM.
    catch CX_SY_CONVERSION_OVERFLOW.
      clear RS_WPORD.
  endtry.

endmethod.
method GET_WPUNT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  try.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WPUNT ).
      move LS_PARAM-ATFLV to RS_WPUNT-WPUNT.
      move LS_PARAM-UNIT  to RS_WPUNT-WPUNT_UOM.
    catch CX_SY_CONVERSION_OVERFLOW.
      clear RS_WPUNT.
  endtry.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).
    when C_IEVNT_I_RECALC_UTIL.
      ME->HANDLE_RECALC_UTIL( ).
  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE         type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE         type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SHIPMGR   type ref to ZCL_VCXI_XCSU_PR_SHIPMGR.

*** Get Reference to Shipping Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                   IF_INUSE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        if LR_GATE->R_CLSPR is bound.
          move LR_GATE->R_CLSPR ?to LR_PR_SHIPMGR.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SHIPMGR.
    endtry.
  endif.

  if LR_PR_SHIPMGR is bound.
    if LR_PR_SHIPMGR->R_CUST_SHIPU is not bound.
***   Process Events to ensure Shipping Manager has initialized its References
      ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).
    endif.
*** Use same Reference to Shipping & Unitization Customizing
    move LR_PR_SHIPMGR->R_CUST_SHIPU to ME->R_CUST_SHIPU.
  else.
    clear ME->R_CUST_SHIPU.
  endif.

endmethod.
method HANDLE_RECALC_UTIL.

  data: LS_OPQTY type /VCXI/VSMR_S_OPQTY.

***-------------------------------------------------------------------------
*** Get Shipping Manager Details - Operation Quantity
  ME->GET_DETAIL_SHIPMGR( importing ES_OPQTY = LS_OPQTY ).

***-------------------------------------------------------------------------
*** Do Calculation
  ME->CALC_UPORD( IS_OPQTY = LS_OPQTY ).
  ME->CALC_TPORD( IS_OPQTY = LS_OPQTY ).
  ME->CALC_OTRUT( ).
  ME->CALC_TRUUT( ).
  ME->CALC_WPUNT( ).
  ME->CALC_WPORD( IS_OPQTY = LS_OPQTY ).
  ME->CALC_FGPHU( ).

endmethod.
method SET_FGPHU.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FGPHU ).

  move IF_FGPHU to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_OTRUT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OTRUT ).

  move IS_OTRUT-OTRUT     to LS_PARAM-ATFLV.
  move IS_OTRUT-OTRUT_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_TPORD.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TPORD ).

  move IF_TPORD to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_TRUUT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TRUUT ).

  move IS_TRUUT-TRUUT     to LS_PARAM-ATFLV.
  move IS_TRUUT-TRUUT_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_UPORD.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_UPORD ).

  move IF_UPORD to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WPORD.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WPORD ).

  move IS_WPORD-WPORD     to LS_PARAM-ATFLV.
  move IS_WPORD-WPORD_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WPUNT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WPUNT ).

  move IS_WPUNT-WPUNT     to LS_PARAM-ATFLV.
  move IS_WPUNT-WPUNT_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
