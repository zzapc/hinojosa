
class ZCL_VCXI_P1SS_PR_AREA_WGT definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_AREA_WGT
  create public .

public section.

  constants C_IPRVT_P1_AREA_WGT type /VCXI/VKSC_IPRVT value 'ZVCXI_P1SS_AREA_WGT' ##NO_TEXT.

  methods GET_SURWT
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .

  methods IS_CALC
    redefinition .
protected section.

  methods GET_PRVDR_COMM_PREV
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_COMM_PREV) type ref to ZIF_VCXI_P1SS_COMM_PREV
    raising
      /VCXI/CX_CKX .

  methods HANDLE_RECALC_AREA
    redefinition .
  methods HANDLE_RECALC_WEIGHT
    redefinition .
private section.

*  methods GET_PRVDR_RTESPV
*    exporting
*      !ER_GATE_RTESPV type ref to /VCXI/CL_VKSR_GATE
*    returning
*      value(RR_PR_RTESPV) type ref to ZCL_VCXI_XCSR_PR_RTESPV
*    raising
*      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_P1SS_PR_AREA_WGT definition
class ZCL_VCXI_P1SS_PR_AREA_WGT implementation.
  method GET_PRVDR_COMM_PREV.

    data: LT_GATE  type /VCXI/VKSR_TT_GATE.

*** Find Provider for Communication with Previous
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P1SS_COMM_PREV=>C_IPRVT_COMM_PREV
                                     IF_INUSE = ABAP_TRUE ).
    check LT_GATE is not initial.
    ER_GATE = LT_GATE[ 1 ].
    RR_COMM_PREV ?= ER_GATE->R_CLSPR.

  endmethod.
  method GET_SURWT.

*** Find Provider for Communication with Previous
    data(LR_COMM_PREV) = ME->GET_PRVDR_COMM_PREV( ).
    check LR_COMM_PREV is bound.

*** Get Surface Weight (Inbound)
    RS_SURWT = LR_COMM_PREV->GET_SURWT( ).

  endmethod.
  method HANDLE_RECALC_AREA.

    data: LS_SBLAR type ZVCXI_PXS_S_SBLAR,
          LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI,
          LS_COUAR type ZVCXI_PXS_S_COUAR.
    data: LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_COMM_PREV  type ref to ZIF_VCXI_P1SS_COMM_PREV,
          LR_BL_CRBPROP type ref to ZCL_VCXI_P1SS_BL_CRBPROP.


***------------------------------------------------------------------------------------------------
*** Find Provider for Communication with Previous
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P1SS_COMM_PREV=>C_IPRVT_COMM_PREV
                                     IF_INUSE = ABAP_TRUE ).
    if LT_GATE is not initial.
      LR_COMM_PREV ?= LT_GATE[ 1 ]->R_CLSPR.

***   Get Corrugator Backward Property XML (Inbound)
      LR_BL_CRBPROP = LR_COMM_PREV->GET_CRBPX( ).
    endif.

***------------------------------------------------------------------------------------------------
*** Get Sold Blank Area (Unit)
    LS_SBLAR-SBLAR_UOM = ME->GET_SBLAR( )-SBLAR_UOM.

*** Get Sheet Dimension (Inbound)
    if LR_COMM_PREV is bound.
      LR_COMM_PREV->GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                          ES_SHTWI = LS_SHTWI ).
    endif.

*** Use Corrugation Length as Length
    if LR_BL_CRBPROP is bound and
       LR_BL_CRBPROP->S_COLEN-COLEN is not initial.
      LS_SHTLE = value #( SHTLE     = LR_BL_CRBPROP->S_COLEN-COLEN
                          SHTLE_UOM = LR_BL_CRBPROP->S_COLEN-COLEN_UOM ).
    endif.

*** Calculate Area
    if LS_SHTLE-SHTLE_UOM is not initial and
       LS_SHTWI-SHTWI_UOM is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                          IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                          IF_CALCV_2     = LS_SHTWI-SHTWI
                                                          IF_CALCV_UOM_2 = LS_SHTWI-SHTWI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = LS_SBLAR-SBLAR_UOM
                                                importing EF_CALCV       = LS_SBLAR-SBLAR
                                                          EF_CALCV_UOM   = LS_SBLAR-SBLAR_UOM ).
    endif.

*** Set Sold Blank Area
    ME->SET_SBLAR( IS_SBLAR = LS_SBLAR ).

***------------------------------------------------------------------------------------------------
*** Get Cut Out Waste Area (Unit)
    LS_COUAR-COUAR_UOM = ME->GET_COUAR( )-COUAR_UOM.

*** Determine Cut Out Area
    if LR_BL_CRBPROP is bound.
      LS_COUAR = LR_BL_CRBPROP->S_COUAR.
    endif.

*** Set Cut Out Waste Area
    ME->SET_COUAR( IS_COUAR = LS_COUAR ).

***------------------------------------------------------------------------------------------------
*** Calculate other values using SUPER
    SUPER->HANDLE_RECALC_AREA( ).

  endmethod.
  method HANDLE_RECALC_WEIGHT.

    data: LS_SBLAR type ZVCXI_PXS_S_SBLAR,
          LS_COUAR type ZVCXI_PXS_S_COUAR,
          LS_SURWT type ZVCXI_PXS_S_SURWT,
          LS_SBLWT type ZVCXI_PXS_S_SBLWT,
          LS_COUWT type ZVCXI_PXS_S_COUWT,
          LS_ADDWT type ZVCXI_PXS_S_ADDWT.


***------------------------------------------------------------------------------------------------
*** Get Surface Weight
    LS_SURWT = ME->GET_SURWT( ).

*** Get Sold Blank Area and Weight
    LS_SBLAR = ME->GET_SBLAR( ).
    LS_SBLWT-SBLWT_UOM = ME->GET_SBLWT( )-SBLWT_UOM.

*** Get Cut Out Area and Weight
    LS_COUAR = ME->GET_COUAR( ).
    LS_COUWT-COUWT_UOM = ME->GET_COUWT( )-COUWT_UOM.

*** Get Additional Weight
    data(LR_COMM_PREV) = ME->GET_PRVDR_COMM_PREV( ).
    if LR_COMM_PREV is bound.
      LS_ADDWT = LR_COMM_PREV->GET_CRFPX( )->S_ADDWT.
    endif.

***------------------------------------------------------------------------------------------------
    if LS_SURWT-SURWT_UOM is not initial.
***   Calculate Sold Blank Weight
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SBLAR-SBLAR
                                                          IF_CALCV_UOM_1 = LS_SBLAR-SBLAR_UOM
                                                          IF_CALCV_2     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = LS_SBLWT-SBLWT_UOM
                                                importing EF_CALCV       = LS_SBLWT-SBLWT
                                                          EF_CALCV_UOM   = LS_SBLWT-SBLWT_UOM ).
***   Calculate Cut Out Weight
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_COUAR-COUAR
                                                          IF_CALCV_UOM_1 = LS_COUAR-COUAR_UOM
                                                          IF_CALCV_2     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = LS_COUWT-COUWT_UOM
                                                importing EF_CALCV       = LS_COUWT-COUWT
                                                          EF_CALCV_UOM   = LS_COUWT-COUWT_UOM ).
    endif.

***------------------------------------------------------------------------------------------------
*** Set Sold Blank Weight
    ME->SET_SBLWT( IS_SBLWT = LS_SBLWT ).

*** Set Cut Out Waste Weight
    ME->SET_COUWT( IS_COUWT = LS_COUWT ).

*** Set Additional Weightt
    ME->SET_ADDWT( IS_ADDWT = LS_ADDWT ).

***------------------------------------------------------------------------------------------------
*** Calculate other values using SUPER
    SUPER->HANDLE_RECALC_WEIGHT( ).

  endmethod.
  method IS_CALC.

*** Always calculated
    RF_CALC = ABAP_TRUE.

  endmethod.
