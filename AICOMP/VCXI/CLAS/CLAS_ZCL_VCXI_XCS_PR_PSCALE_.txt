
class ZCL_VCXI_XCS_PR_PSCALE definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_XCS_PSCALE type /VCXI/VKSC_IPRVT value 'ZVCXI_XCS_PSCALE'. "#EC NOTEXT
  constants C_PARID_PRICE type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICE'. "#EC NOTEXT
  constants C_PARID_PRICP_A type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_A'. "#EC NOTEXT
  constants C_PARID_PRICP_L type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_L'. "#EC NOTEXT
  constants C_PARID_PRICP_P type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_P'. "#EC NOTEXT
  constants C_PARID_PRICP_W type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_W'. "#EC NOTEXT
  constants C_PARID_PSQTY_A type /VCXI/VKS_PARID value 'ZVCXI_XC_PSQTY_A'. "#EC NOTEXT
  constants C_PARID_PSQTY_L type /VCXI/VKS_PARID value 'ZVCXI_XC_PSQTY_L'. "#EC NOTEXT
  constants C_PARID_PSQTY_P type /VCXI/VKS_PARID value 'ZVCXI_XC_PSQTY_P'. "#EC NOTEXT
  constants C_PARID_PSQTY_W type /VCXI/VKS_PARID value 'ZVCXI_XC_PSQTY_W'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PSQTY
    returning
      value(RS_PSQTY) type ZVCXI_XCS_S_PSQTY
    raising
      /VCXI/CX_CKX .
  methods GET_PRICE
    returning
      value(RS_PRICE) type ZVCXI_XCS_S_PRICE
    raising
      /VCXI/CX_CKX .
  methods GET_PRICP
    returning
      value(RS_PRICP) type ZVCXI_XCS_S_PRICP
    raising
      /VCXI/CX_CKX .
  methods SET_PSQTY
    importing
      !IS_PSQTY type ZVCXI_XCS_S_PSQTY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRICE
    importing
      !IS_PRICE type ZVCXI_XCS_S_PRICE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRICP
    importing
      !IS_PRICP type ZVCXI_XCS_S_PRICP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_PRICE_CHANGED type /VCXI/VKSC_IEVNT value 'PRICE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PSQTY_CHANGED type /VCXI/VKSC_IEVNT value 'PSQTY_CHANGED'. "#EC NOTEXT
  data F_PARID_PRICP type /VCXI/VKS_PARID .
  data F_PARID_PSQTY type /VCXI/VKS_PARID .

  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRICP
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRICE
    returning
      value(RF_SUBRC) type I
    raising
      /VCXI/CX_CKX .
  methods INIT_DIM_PARAM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCS_PR_PSCALE definition
class ZCL_VCXI_XCS_PR_PSCALE implementation.
method CHECK_PRICE.

*** RF_SUBRC = 0 => Price is maintained.
*** RF_SUBRC = 1 => Price is not maintained.

  data: LS_PRICE  type ZVCXI_XCS_S_PRICE.

*** start Positiv
  RF_SUBRC = 0.

  LS_PRICE = ME->GET_PRICE( ).

  if LS_PRICE-PRICE is initial.
    RF_SUBRC = 1.
    exit.
  endif.

endmethod.
method CHECK_PRICP.

*** RF_SUBRC = 0 => Price Unit is maintained.
*** RF_SUBRC = 1 => Price Unit is not maintained.

  data: LS_PRICP  type ZVCXI_XCS_S_PRICP.

*** start Positiv
  RF_SUBRC = 0.

  LS_PRICP = ME->GET_PRICP( ).

  if LS_PRICP-PRICP is initial.
    RF_SUBRC = 1.
    exit.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize right Pramameter dimensions
  ME->INIT_DIM_PARAM( ).

endmethod.
method GET_PRICE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRICE ).
  move LS_PARAM-ATFLV to RS_PRICE-PRICE.
  move LS_PARAM-CURKY to RS_PRICE-PRICE_CURR.

endmethod.
method GET_PRICP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PRICP ).
  move LS_PARAM-ATFLV to RS_PRICP-PRICP.
  move LS_PARAM-UNIT  to RS_PRICP-PRICP_UOM.

endmethod.
method GET_PSQTY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PSQTY ).
  move LS_PARAM-ATFLV to RS_PSQTY-PSQTY.
  move LS_PARAM-UNIT  to RS_PSQTY-PSQTY_UOM.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Price
    case ME->CHECK_PRICE( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

***------------------------------------------------------------------
*** Check Price Unit
    case ME->CHECK_PRICP( ).
      when 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
      when others.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                       IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endcase.

endmethod.
method GET_STATUS_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Price
    case ME->CHECK_PRICE( ).
      when 0.
***   Price is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '301' ).
      when 1.
***   Price is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '302' ).
    endcase.

***------------------------------------------------------------------
*** Check Price Unit
    case ME->CHECK_PRICP( ).
      when 0.
***   Price Unit is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '303' ).
      when 1.
***   Price Unit is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '304' ).
    endcase.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

  endcase.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method INIT_DIM_PARAM.

  data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
  data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.

  LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_PSQTY_A or
                          PARID eq C_PARID_PSQTY_L or
                          PARID eq C_PARID_PSQTY_P or
                          PARID eq C_PARID_PSQTY_W ).
    move LS_PARAM-PARID to ME->F_PARID_PSQTY.
    exit.
  endloop.

  loop at LT_PARAM into LS_PARAM
                  where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                   and  ( PARID eq C_PARID_PRICP_A or
                          PARID eq C_PARID_PRICP_L or
                          PARID eq C_PARID_PRICP_P or
                          PARID eq C_PARID_PRICP_W ).
    move LS_PARAM-PARID to ME->F_PARID_PRICP.
    exit.
  endloop.

endmethod.
method SET_PRICE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRICE ).

  move IS_PRICE-PRICE      to LS_PARAM-ATFLV.
  move IS_PRICE-PRICE_CURR to LS_PARAM-CURKY.
  move IF_SETBY            to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRICE_CHANGED ).
  endif.

endmethod.
method SET_PRICP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PRICP ).

  move IS_PRICP-PRICP     to LS_PARAM-ATFLV.
  move IS_PRICP-PRICP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRICE_CHANGED ).
  endif.

endmethod.
method SET_PSQTY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PSQTY ).

  move IS_PSQTY-PSQTY     to LS_PARAM-ATFLV.
  move IS_PSQTY-PSQTY_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PSQTY_CHANGED ).
  endif.

endmethod.
