
class ZCL_VCXI_P5SP_PR_MFMI definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MFMI
  create public .

public section.

  interfaces ZIF_VCXI_P5SP_RLDIM .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_RLETA
    importing
      !IS_RLETA type ZVCXI_PXS_S_RLETA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WEBWI
    importing
      !IS_WEBWI type ZVCXI_PXS_S_WEBWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
protected section.

  methods INIT_DIM_PARAM
    raising
      /VCXI/CX_CKX .

  methods CONV_TO_CONSU
    redefinition .
  methods GET_UOMCF
    redefinition .
private section.
endclass. "ZCL_VCXI_P5SP_PR_MFMI definition
class ZCL_VCXI_P5SP_PR_MFMI implementation.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Initialize right Pramameter dimensions
    ME->INIT_DIM_PARAM( ).

  endmethod.
  method CONV_TO_CONSU.

    data: LS_BAWGT type ZVCXI_PCS_S_BAWGT,
          LS_BAWGP type ZVCXI_PCS_S_BAWGP,
          LS_CALCV type ZVCXI_XCS_S_CALCV,
          LS_AREA  type ZVCXI_XCS_S_CALCV.


***----------------------------------------------------------------------------------------------------------
*** Get Dimension to do right conversion to Area
    case ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = IS_MQTYI-MQTYI_UOM ).
      when 'SURFAC'.
        move IS_MQTYI-MQTYI     to LS_AREA-CALCV.
        move IS_MQTYI-MQTYI_UOM to LS_AREA-CALCV_UOM.

      when 'LENGTH'.
        data(LS_WEBWI) = ME->ZIF_VCXI_P5SP_RLDIM~GET_WEBWI( ).
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_MQTYI-MQTYI
                                                            IF_CALCV_UOM_1 = IS_MQTYI-MQTYI_UOM
                                                            IF_CALCV_2     = LS_WEBWI-WEBWI
                                                            IF_CALCV_UOM_2 = LS_WEBWI-WEBWI_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                  importing EF_CALCV       = LS_AREA-CALCV
                                                            EF_CALCV_UOM   = LS_AREA-CALCV_UOM ).

      when 'AAAADL'. "Rolls
        LS_AREA = ZCL_VCXI_P5SP_SERVICE=>CONV_P_TO_A( IS_CALCV = value #( CALCV     = IS_MQTYI-MQTYI
                                                                          CALCV_UOM = IS_MQTYI-MQTYI_UOM )
                                                      IS_RLDIM = ME->ZIF_VCXI_P5SP_RLDIM~GET_RLDIM( ) ).
    endcase.

***----------------------------------------------------------------------------------------------------------
*** Perform Conversion to Consumption
    case ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = ME->GET_CONSU( )-CONSU_UOM ).
      when 'MASS'.
***     Get Basis Weight
        break TBD.
*        move ME->GET_BAWGT( ) to LS_BAWGT.
*        move ME->GET_BAWGP( ) to LS_BAWGP.

***     Calculate Weight
        if LS_BAWGP-BAWGP is not initial.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_AREA-CALCV
                                                              IF_CALCV_UOM_1 = LS_AREA-CALCV_UOM
                                                              IF_CALCV_2     = LS_BAWGP-BAWGP
                                                              IF_CALCV_UOM_2 = LS_BAWGP-BAWGP_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                    importing EF_CALCV       = LS_CALCV-CALCV
                                                              EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).

          RS_CONSU-CONSU   = LS_CALCV-CALCV * LS_BAWGT-BAWGT.
        else.
          RS_CONSU-CONSU   = 0.
        endif.
        RS_CONSU-CONSU_UOM = LS_BAWGT-BAWGT_UOM.

      when 'SURFAC'.
***     Direct use of calculated Area
        RS_CONSU = value #( CONSU     = LS_AREA-CALCV
                            CONSU_UOM = LS_AREA-CALCV_UOM ).
    endcase.

  endmethod.
  method GET_UOMCF.

    field-symbols: <S_UOMCF> type ZVCXI_XCS_S_UOMCF.


    RT_UOMCF = SUPER->GET_UOMCF( ).

***---------------------------------------------------------------------------------------
*** Add Conversion Factor by Surface Weight
    data(LS_SURWT) = ME->ZIF_VCXI_P5SP_RLDIM~GET_SURWT( ).
    append initial line to RT_UOMCF assigning <S_UOMCF>.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = 1
                                                        IF_CALCV_UOM_1 = ME->GET_PRICP( )-PRICP_UOM
                                                        IF_CALCV_2     = LS_SURWT-SURWT
                                                        IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = <S_UOMCF>-UOMCF
                                                        EF_CALCV_UOM   = <S_UOMCF>-UOM ).

  endmethod.
  method INIT_DIM_PARAM.

    data:  LS_PARAM    type /VCXI/VKSR_S_PARAM.
    data:  LT_PARAM    type /VCXI/VKSR_TT_PARAM.


    LT_PARAM = ME->R_GATE->GET_PARAM_ALL( ).

*** Consumption
    loop at LT_PARAM into LS_PARAM
                    where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                     and  ( PARID eq C_PARID_CONSU_A or
                            PARID eq C_PARID_CONSU_L or
                            PARID eq C_PARID_CONSU_P or
                            PARID eq C_PARID_CONSU_W ).
      move LS_PARAM-PARID to ME->F_PARID_CONSU.
      exit.
    endloop.

*** Price Per
    loop at LT_PARAM into LS_PARAM
                    where PARTY eq /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                     and  ( PARID eq C_PARID_PRICP_A or
                            PARID eq C_PARID_PRICP_L or
                            PARID eq C_PARID_PRICP_P or
                            PARID eq C_PARID_PRICP_W ).
      move LS_PARAM-PARID to ME->F_PARID_PRICP.
      exit.
    endloop.

  endmethod.
  method SET_RLETA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P5SP_RLDIM~C_PARID_RLETA ).

    move IS_RLETA-RLETA                      to LS_PARAM-ATFLV.
    move IS_RLETA-RLETA_UOM                  to LS_PARAM-UNIT.
    move IF_SETBY                            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P5SP_RLDIM~C_IEVNT_O_RLDIM_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P5SP_RLDIM~C_PARID_SURWT ).

    move IS_SURWT-SURWT                      to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM                  to LS_PARAM-UNIT.
    move IF_SETBY                            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P5SP_RLDIM~C_IEVNT_O_RLDIM_CHANGED ).
    endif.

  endmethod.
  method SET_WEBWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P5SP_RLDIM~C_PARID_WEBWI ).

    move IS_WEBWI-WEBWI                      to LS_PARAM-ATFLV.
    move IS_WEBWI-WEBWI_UOM                  to LS_PARAM-UNIT.
    move IF_SETBY                            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_P5SP_RLDIM~C_IEVNT_O_RLDIM_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SP_RLDIM~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P5SP_RLDIM~C_PARID_NOUPS ).
    RF_NOUPS = LS_PARAM-ATFLV.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_P5SP_RLDIM~GET_RLDIM.

    RS_RLDIM = value #( S_WEBWI = ME->ZIF_VCXI_P5SP_RLDIM~GET_WEBWI( )
                        S_SURWT = ME->ZIF_VCXI_P5SP_RLDIM~GET_SURWT( )
                        S_RLETA = ME->ZIF_VCXI_P5SP_RLDIM~GET_RLETA( )
                        NOUPS   = ME->ZIF_VCXI_P5SP_RLDIM~GET_NOUPS( )
                        NOOUT   = 1    "Always 1 for Input
                      ).

  endmethod.
  method ZIF_VCXI_P5SP_RLDIM~GET_RLETA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P5SP_RLDIM~C_PARID_RLETA ).
    RS_RLETA-RLETA     = LS_PARAM-ATFLV.
    RS_RLETA-RLETA_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_P5SP_RLDIM~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P5SP_RLDIM~C_PARID_SURWT ).
    RS_SURWT-SURWT     = LS_PARAM-ATFLV.
    RS_SURWT-SURWT_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_P5SP_RLDIM~GET_WEBWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_P5SP_RLDIM~C_PARID_WEBWI ).
    RS_WEBWI-WEBWI     = LS_PARAM-ATFLV.
    RS_WEBWI-WEBWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
