
class ZCL_VCXI_P0SS_PR_SUPINFO definition
  public
  inheriting from ZCL_VCXI_XCS_PR_PSCALE_MGR
  create public .

public section.

  constants C_IPRVT_P0_SUPINFO type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_SUPINFO'. "#EC NOTEXT

  methods GET_LIFNR
    returning
      value(RF_LIFNR) type LIFNR
    raising
      /VCXI/CX_CKX .
  methods GET_LIFNR_DESCR
    returning
      value(RF_LIFNR_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_LIFNR
    importing
      !IF_LIFNR type LIFNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
protected section.

  constants C_PARID_LIFNR type /VCXI/VKS_PARID value 'ZVCXI_XC_LIFNR'. "#EC NOTEXT
  constants C_IEVNT_O_LIFNR_CHANGED type /VCXI/VKSC_IEVNT value 'LIFNR_CHANGED'. "#EC NOTEXT

  methods CHECK_LIFNR
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_SUPINFO definition
class ZCL_VCXI_P0SS_PR_SUPINFO implementation.
method CHECK_LIFNR.
*** 0 - No Check
*** 1 - Vendor is maintained and correct
*** 2 - Vendor is not maintained.   (not in use)
*** 3 - Vendor is not correct.

  data:  LF_LIFNR    type        LIFNR,
         LF_WERKS    type        WERKS_D.
  data:  LR_CX_CKX   type ref to /VCXI/CX_CKX.

***----------------------------------------------------------------------------
*** Get Vendor and check if maintained
  move ME->GET_LIFNR( ) to LF_LIFNR.
  if LF_LIFNR is initial.
    move 0 to RF_RETURN.    " No Check
    exit.
  endif.

***----------------------------------------------------------------------------
*** Get Plant
  move ME->GET_WERKS( ) to LF_WERKS.

***----------------------------------------------------------------------------
*** Perform Check
  try.
      ZCL_VCXI_XCS_SERVICE=>CHECK_LIFNR( IF_LIFNR = LF_LIFNR
                                         IF_WERKS = LF_WERKS ).
    catch /VCXI/CX_CKX into LR_CX_CKX.
      move 3 to RF_RETURN.
      if IR_MSG is bound.
        IR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
      endif.
      exit.
  endtry.

***----------------------------------------------------------------------------
*** Check was successful
  move 1 to RF_RETURN.
  if IR_MSG is bound.
    IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                         IF_MSGTY = 'S'
                         IF_MSGNO = '008' ).
  endif.

endmethod.
method GET_LIFNR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).
  move LS_PARAM-ATWRT to RF_LIFNR.

endmethod.
method GET_LIFNR_DESCR.

  data: LF_LIFNR       type LIFNR,
        LF_LIFNR_DESCR type /VCXI/CKX_DESCR.

  LF_LIFNR = ME->GET_LIFNR( ).
  check LF_LIFNR is not initial.

  select single NAME1
         from LFA1
         into LF_LIFNR_DESCR
        where LIFNR eq LF_LIFNR.

  if SY-SUBRC = 0.
    move LF_LIFNR_DESCR to RF_LIFNR_DESCR.
  endif.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Vendor
  case ME->CHECK_LIFNR( ).
    when 0.  " No Check
    when 1.  " Vendor is maintained and correct
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.
method GET_STATUS_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Vendor
  ME->CHECK_LIFNR( IR_MSG = IR_MESSAGE ).

endmethod.
method GET_WERKS.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_WERKS =  LR_APPDATA->F_WERKS.

endmethod.
method SET_LIFNR.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).

  move IF_LIFNR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LIFNR_CHANGED ).
  endif.

endmethod.
