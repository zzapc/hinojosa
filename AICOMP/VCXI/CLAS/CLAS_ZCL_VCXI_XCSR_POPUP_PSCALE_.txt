
class ZCL_VCXI_XCSR_POPUP_PSCALE definition
  public
  create protected .

public section.

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IR_BL_OUTSO type ref to ZIF_VCXI_XCSR_BL_OUTSO
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_CANCEL type SYUCOMM value 'CANCEL'. "#EC NOTEXT
  constants C_UC_DELETE type SYUCOMM value 'DELETE'. "#EC NOTEXT
  constants C_UC_OKAY type SYUCOMM value 'OKAY'. "#EC NOTEXT
  data F_ISVCE type ZVCXI_XCS_ISVCE .
  data F_LOCKED type /VCXI/CKX_LOCKED .
  type-pools ABAP .
  data F_REFRESH_REQ type ABAP_BOOL .
  data R_BL_OUTSO type ref to ZIF_VCXI_XCSR_BL_OUTSO .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data T_FCAT type LVC_T_FCAT .
  data T_PSCALE type ZVCXI_XCSR_TT_PSCALE .
  constants C_UC_DEL_PSCALE type UI_FUNC value 'DEL_PSCALE'. "#EC NOTEXT
  constants C_UC_ADD_PSCALE type UI_FUNC value 'ADD_PSCALE'. "#EC NOTEXT

  methods CONSTRUCTOR
    importing
      !IR_BL_OUTSO type ref to ZIF_VCXI_XCSR_BL_OUTSO
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DATA_CHANGED
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods HANDLE_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_UC_ADD_PSCALE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL .
  methods HANDLE_UC_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL_PSCALE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OKAY .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
  methods SET_PF_STATUS
    raising
      /VCXI/CX_CKX .
  methods REFRESH_FIELDCAT
    raising
      /VCXI/CX_CKX .
private section.

  data S_COL type LVC_S_COL .
  data S_ROW type LVC_S_ROW .
endclass. "ZCL_VCXI_XCSR_POPUP_PSCALE definition
class ZCL_VCXI_XCSR_POPUP_PSCALE implementation.
method CONSTRUCTOR.

  field-symbols: <S_PSCALE>  type ZVCXI_XCSR_S_PSCALE.

  move IR_BL_OUTSO to ME->R_BL_OUTSO.
  move IF_LOCKED   to ME->F_LOCKED.

*** Identify Element ID for new Price Scales
  case ME->R_BL_OUTSO->F_PARID_PRICP.
    when ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_A.
      move 'PSCALE_A' to ME->F_ISVCE.

    when ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_L.
      move 'PSCALE_L' to ME->F_ISVCE.

    when ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_P.
      move 'PSCALE_P' to ME->F_ISVCE.

    when ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_W.
      move 'PSCALE_W' to ME->F_ISVCE.
  endcase.

*** Buffer Price Scales
  if ME->R_BL_OUTSO->T_PSCALE is not initial.
    move ME->R_BL_OUTSO->T_PSCALE to ME->T_PSCALE.
  else.
*** Create initial Entry
    append initial line to ME->T_PSCALE assigning <S_PSCALE>.
    move               ME->F_ISVCE                       to <S_PSCALE>-ISVCE.
    move               ME->R_BL_OUTSO->S_PRICP-PRICP_UOM to <S_PSCALE>-PSQTY_UOM.
    move-corresponding ME->R_BL_OUTSO->S_PRICE           to <S_PSCALE>.
    move-corresponding ME->R_BL_OUTSO->S_PRICP           to <S_PSCALE>.
  endif.

endmethod.
method DO_FREE.

*** Free Grid
  if ME->R_GRID is bound.
    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

endmethod.
method DO_PBO.

*** Set PF-Status
  ME->SET_PF_STATUS( ).

*** Create Container and Grid
  ME->INIT_CONTAINER( ).
  ME->INIT_GRID( ).

*** Refresh Grid
  ME->REFRESH_GRID( ).

endmethod.
method DO_USER_COMMAND.

  case IF_UCOMM.
    when C_UC_OKAY.
      ME->HANDLE_UC_OKAY( ).

    when C_UC_DELETE.
      ME->HANDLE_UC_DELETE( ).

    when C_UC_CANCEL.
      ME->HANDLE_UC_CANCEL( ).
  endcase.

endmethod.
method HANDLE_DATA_CHANGED.

*  data:          LF_TYPE              type          C.
*  data:          LS_MOD_CELL          type          LVC_S_MODI,
*                 LS_RTEEDI_GRID       type          ZVCXI_XCSR_S_RTEEDI_GRID.
*  data:          LR_DATA              type ref to   DATA,
*                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
*  field-symbols: <T_DATA_ORG>         type standard table,
*                 <T_DATA_TMP>         type standard table,
*                 <S_DATA>             type          any,
*                 <F_FIELD>            type          any.
*
*  try.
****--------------------------------------------------------------------------------------
****   Dereferencing of Data Reference
*      assign ME->R_DATA->* to <T_DATA_ORG>.
*      create data LR_DATA like <T_DATA_ORG>.
*      assign LR_DATA->* to <T_DATA_TMP>.
*      append lines of <T_DATA_ORG> to <T_DATA_TMP>.
*
****   Build Result Grid Values
*      sort ER_DATA_CHANGED->MT_MOD_CELLS by ROW_ID .
*      loop at ER_DATA_CHANGED->MT_MOD_CELLS into LS_MOD_CELL.
*        read table <T_DATA_TMP> assigning <S_DATA> index LS_MOD_CELL-ROW_ID.
*        check SY-SUBRC eq 0.
*
*        assign component LS_MOD_CELL-FIELDNAME of structure <S_DATA> to <F_FIELD>.
*        describe field <F_FIELD> type LF_TYPE.
*        case LF_TYPE.
*          when 'N' or 'i' or 'P' or 'F'.
*            try.
*                call function 'RSDS_CONVERT_NUMBER'
*                  exporting
*                    INPUT  = LS_MOD_CELL-VALUE
*                  importing
*                    OUTPUT = <F_FIELD>.
*              catch CX_ROOT.
*                clear <F_FIELD>.
*            endtry.
*          when others.
*            translate LS_MOD_CELL-VALUE to upper case.
*            move LS_MOD_CELL-VALUE to <F_FIELD>.
*        endcase.
*      endloop.
*
*
****--------------------------------------------------------------------------------------
****   Check Input
*      loop at ER_DATA_CHANGED->MT_MOD_CELLS into LS_MOD_CELL.
*        read table <T_DATA_TMP> assigning <S_DATA> index LS_MOD_CELL-ROW_ID.
*        check SY-SUBRC eq 0.
*
*        move-corresponding <S_DATA> to LS_RTEEDI_GRID.
*
****     Check Work Center
*        if LS_MOD_CELL-FIELDNAME eq 'ARBPL' or
*           LS_MOD_CELL-FIELDNAME eq 'WERKS'.
*          try.
*              ME->CHECK_INPUT_ARBPL( IF_WERKS = LS_RTEEDI_GRID-WERKS
*                                     IF_ARBPL = LS_RTEEDI_GRID-ARBPL ).
*            catch /VCXI/CX_CKX into LR_CX_CKX.
*              ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( I_MSGID     = LR_CX_CKX->F_MSGID
*                                                   I_MSGTY     = LR_CX_CKX->F_MSGTY
*                                                   I_MSGNO     = LR_CX_CKX->F_MSGNO
*                                                   I_MSGV1     = LR_CX_CKX->F_MSGV1
*                                                   I_MSGV2     = LR_CX_CKX->F_MSGV2
*                                                   I_MSGV3     = LR_CX_CKX->F_MSGV3
*                                                   I_MSGV4     = LR_CX_CKX->F_MSGV4
*                                                   I_FIELDNAME = 'ARBPL'
*                                                   I_ROW_ID    = LS_MOD_CELL-ROW_ID
*                                                   I_TABIX     = LS_MOD_CELL-TABIX ).
*          endtry.
*        endif.
*
****     Check Plant
*        if LS_MOD_CELL-FIELDNAME eq 'WERKS'.
*          try.
*              ME->CHECK_INPUT_WERKS( IF_WERKS = LS_RTEEDI_GRID-WERKS ).
*            catch /VCXI/CX_CKX into LR_CX_CKX.
*              ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( I_MSGID     = LR_CX_CKX->F_MSGID
*                                                   I_MSGTY     = LR_CX_CKX->F_MSGTY
*                                                   I_MSGNO     = LR_CX_CKX->F_MSGNO
*                                                   I_MSGV1     = LR_CX_CKX->F_MSGV1
*                                                   I_MSGV2     = LR_CX_CKX->F_MSGV2
*                                                   I_MSGV3     = LR_CX_CKX->F_MSGV3
*                                                   I_MSGV4     = LR_CX_CKX->F_MSGV4
*                                                   I_FIELDNAME = 'WERKS'
*                                                   I_ROW_ID    = LS_MOD_CELL-ROW_ID
*                                                   I_TABIX     = LS_MOD_CELL-TABIX ).
*          endtry.
*        endif.
*
*      endloop.
*
*    catch /VCXI/CX_CKX into LR_CX_CKX.
*      LR_CX_CKX->SHOW_MESSAGE( ).
*  endtry.
*
endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LR_CX_CKX            type ref to /VCXI/CX_CKX.

  try.
***   If changed -> Request Refresh for ALV
      check E_MODIFIED eq ABAP_TRUE.
      move ABAP_TRUE to ME->F_REFRESH_REQ.

***--------------------------------------------------------------------------------------
***

***--------------------------------------------------------------------------------------
***   Get Current Cell
      ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                              ES_COL_ID = ME->S_COL ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:          LF_DISABLED     type        ABAP_BOOL.
  data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.
  field-symbols: <S_TOOLBAR>     type        STB_BUTTON.

  try.
      if ME->F_LOCKED ne ABAP_TRUE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar elements
      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_ADD_PSCALE             to <S_TOOLBAR>-FUNCTION.
      move 'Add Price Scale'(F01)      to <S_TOOLBAR>-TEXT.
      move ICON_INSERT_ROW             to <S_TOOLBAR>-ICON.
      move LF_DISABLED                 to <S_TOOLBAR>-DISABLED.

      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_DEL_PSCALE             to <S_TOOLBAR>-FUNCTION.
      move 'Delete Price Scale'(F02)   to <S_TOOLBAR>-TEXT.
      move ICON_DELETE_ROW             to <S_TOOLBAR>-ICON.
      move LF_DISABLED                 to <S_TOOLBAR>-DISABLED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_ADD_PSCALE.

  data:          LS_PRICP    type ZVCXI_XCS_S_PRICP.
  field-symbols: <S_PSCALE>  type ZVCXI_XCSR_S_PSCALE.

***--------------------------------------------------------------------------------------
*** Get Default for Price Scale by first Entry
  read table ME->T_PSCALE assigning <S_PSCALE> index 1.
  if SY-SUBRC eq 0.
    move-corresponding <S_PSCALE>              to LS_PRICP.
  else.
    move-corresponding ME->R_BL_OUTSO->S_PRICP to LS_PRICP.
  endif.

***--------------------------------------------------------------------------------------
*** Add Price Scale
  append initial line to ME->T_PSCALE assigning <S_PSCALE>.
  move ME->F_ISVCE                        to <S_PSCALE>-ISVCE.
  move ME->R_BL_OUTSO->S_PRICP-PRICP_UOM  to <S_PSCALE>-PSQTY_UOM.
  move ME->R_BL_OUTSO->S_PRICE-PRICE_CURR to <S_PSCALE>-PRICE_CURR.
  move-corresponding LS_PRICP             to <S_PSCALE>.

*** Request ALV Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UC_CANCEL.

***--------------------------------------------------------------------------------------
*** Leave Popup
  leave to screen 0.

endmethod.
method HANDLE_UC_DEL_PSCALE.

  data:  LS_ROW           type          LVC_S_ROW,
         LS_CELL          type          LVC_S_CELL.
  data:  LT_ROW           type          LVC_T_ROW,
         LT_CELL          type          LVC_T_CELL.

***--------------------------------------------------------------------------------------
*** Get Selected Rows
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
  if LT_ROW is initial.
*** Get Selected Cells
    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    loop at LT_CELL into LS_CELL.
      collect LS_CELL-ROW_ID into LT_ROW.
    endloop.
  endif.
  check LT_ROW is not initial.

***--------------------------------------------------------------------------------------
*** Delete from bottom to top
  sort LT_ROW by INDEX descending.
  loop at LT_ROW into LS_ROW.
    delete ME->T_PSCALE index LS_ROW-INDEX.
  endloop.

***--------------------------------------------------------------------------------------
*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UC_DELETE.

***--------------------------------------------------------------------------------------
*** Popup to confirm


***--------------------------------------------------------------------------------------
*** Remove all Price Scales
  free ME->R_BL_OUTSO->T_PSCALE.

***--------------------------------------------------------------------------------------
*** Leave Popup
  leave to screen 0.

endmethod.
method HANDLE_UC_OKAY.

***--------------------------------------------------------------------------------------
*** Check for Changes
  if ME->R_GRID is bound.
    ME->R_GRID->CHECK_CHANGED_DATA( ).
  endif.

***--------------------------------------------------------------------------------------
*** Set modified Price Scales
  move ME->T_PSCALE to ME->R_BL_OUTSO->T_PSCALE.
  clear: ME->R_BL_OUTSO->S_PRICE-PRICE,
         ME->R_BL_OUTSO->S_PRICP-PRICP.

***------------------------------------------------------------------
*** Leave Popup
  leave to screen 0.

endmethod.
method HANDLE_UCOMM.

  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.
      case E_UCOMM.
        when C_UC_ADD_PSCALE.
          ME->HANDLE_UC_ADD_PSCALE( ).
        when C_UC_DEL_PSCALE.
          ME->HANDLE_UC_DEL_PSCALE( ).
      endcase.

***   Get Current Cell
      ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                              ES_COL_ID = ME->S_COL ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_CONTAINER.

  check ME->R_CONTAINER is not bound.

  create object ME->R_CONTAINER
    exporting
      CONTAINER_NAME              = '0100CC_GRID'
    exceptions
      CNTL_ERROR                  = 1
      CNTL_SYSTEM_ERROR           = 2
      CREATE_ERROR                = 3
      LIFETIME_ERROR              = 4
      LIFETIME_DYNPRO_DYNPRO_LINK = 5
      others                      = 6.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method INIT_GRID.

  check ME->R_GRID is not bound.

  create object ME->R_GRID
    exporting
      I_PARENT          = ME->R_CONTAINER
      I_APPL_EVENTS     = 'X'
    exceptions
      ERROR_CNTL_CREATE = 1
      ERROR_CNTL_INIT   = 2
      ERROR_CNTL_LINK   = 3
      ERROR_DP_CREATE   = 4
      others            = 5.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Enter as Event
  ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

*** Register Event Handler
  set handler ME->HANDLE_DATA_CHANGED          for ME->R_GRID.
  set handler ME->HANDLE_DATA_CHANGED_FINISHED for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR               for ME->R_GRID.
  set handler ME->HANDLE_UCOMM                 for ME->R_GRID.

endmethod.
method REFRESH_FIELDCAT.

  field-symbols: <S_FCAT>        type          LVC_S_FCAT.

  free: ME->T_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_XCSR_S_PSCALE'
    changing
      CT_FIELDCAT            = ME->T_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Change Field catalog attributes
  loop at ME->T_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
***   Customizing Element ID
      when 'ISVCE'.
        move ABAP_TRUE     to <S_FCAT>-TECH.

***   Price Quantity / Price / Price Per
      when 'PSQTY' or 'PRICE' or 'PRICP'.
        if ME->F_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-EDIT.
        endif.
    endcase.
  endloop.

endmethod.
method REFRESH_GRID.

  data:  LS_LAYOUT            type          LVC_S_LAYO.
  data:  LT_TOOLBAR_EXCLUDING type          UI_FUNCTIONS.

***----------------------------------------------------------------------------
*** Refresh Field Catalog
  ME->REFRESH_FIELDCAT( ).

*** Get Layout
  move ABAP_TRUE to LS_LAYOUT-CWIDTH_OPT.

*** Exlcude All Functions
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL to LT_TOOLBAR_EXCLUDING.

***----------------------------------------------------------------------------
*** Relfreh ALV Grid
  ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = ME->T_FCAT
      IT_OUTTAB                     = ME->T_PSCALE
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Current Cell
  ME->R_GRID->SET_CURRENT_CELL_VIA_ID( IS_ROW_ID    = ME->S_ROW
                                       IS_COLUMN_ID = ME->S_COL ).

endmethod.
method SET_PF_STATUS.

  data:  LT_EXCLUDE   type table of SYUCOMM.

  if ME->F_LOCKED ne ABAP_TRUE.
    append C_UC_OKAY   to LT_EXCLUDE.
    append C_UC_DELETE to LT_EXCLUDE.
  endif.

  set pf-status '0100' of program 'SAPLZVCXI_XCSR_POPUP_PSCALE'
      excluding LT_EXCLUDE.

endmethod.
method START.

  data:  LR_POPUP_PSCALE type ref to ZCL_VCXI_XCSR_POPUP_PSCALE.

  if IF_LOCKED ne ABAP_TRUE.
    check IR_BL_OUTSO->T_PSCALE is not initial.
  endif.

*** Create Instance
  create object LR_POPUP_PSCALE
    exporting
      IR_BL_OUTSO = IR_BL_OUTSO
      IF_LOCKED   = IF_LOCKED.

*** Call Popup
  call function 'ZVCXI_XCSR_POPUP_PSCALE_START'
    exporting
      IR_POPUP_PSCALE = LR_POPUP_PSCALE.

*** Free the Popup
  LR_POPUP_PSCALE->DO_FREE( ).

endmethod.
