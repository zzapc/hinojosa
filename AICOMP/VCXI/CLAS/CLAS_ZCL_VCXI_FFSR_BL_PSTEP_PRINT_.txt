
class ZCL_VCXI_FFSR_BL_PSTEP_PRINT definition
  public
  inheriting from ZCL_VCXI_FFSR_BL_PSTEP
  create public .

public section.

  interfaces ZIF_VCXI_XCSR_BL_OUTSO .
  interfaces ZIF_VCXI_FFSR_ADJ_FIDIM .
  interfaces ZIF_VCXI_FFSR_RHNDL .

  constants C_IPSTP_PRINT type /VCXI/VSMC_IPSTP value 'FF_PS_PRINT' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_IPSTP type /VCXI/VSMC_IPSTP default C_IPSTP_PRINT
      !IF_DATE type DATS
      !IR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOL
    importing
      !IF_TINK type ZVCXI_FFS_TINK optional
    returning
      value(RF_NOCOL) type ZVCXI_FFS_NOCOL
    raising
      /VCXI/CX_CKX .

  methods ADD_ASPECTS_TO_RTE_PSTEP
    redefinition .
  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_ARBPL_INFO
    redefinition .
  methods GET_SPVRE_ACTVY
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  constants C_IATYP_AT_PRINT type /VCXI/VSMC_IATYP value 'FF_AT_PRINT' ##NO_TEXT.
  data F_NOACC type ZVCXI_FFS_NOACC .
  data F_NOATC type ZVCXI_FFS_NOATC .
  data F_NODDG type ZVCXI_FFS_NODDG .
  data F_PRCAT type ZVCXI_FFS_PRCAT .
  data F_TPRIN type ZVCXI_FFS_TPRIN .
  data S_FIDIM_IN type ZVCXI_FFSP_S_FIDIM .
  data S_FIDIM_OUT type ZVCXI_FFSP_S_FIDIM .
  data S_PRRLE type ZVCXI_FFS_S_PRRLE .
  data S_PRTIN type ZVCXI_FFS_S_PRTIN .
  data S_PRWID type ZVCXI_FFS_S_PRWID .
  data S_WIDIM_IN type ZVCXI_FFSR_S_WIDIM .
  data S_WIDIM_OUT type ZVCXI_FFSR_S_WIDIM .
  data T_MS_INK type ZVCXI_FFSR_TT_MS_INK .
  data T_MS_TOOL type ZVCXI_FFSR_TT_MS_TOOL .

  methods ADD_SPVRE_MC_INK
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MC_TOOL
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE_ADDON_PRINT
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_ADDON type ref to /VCXI/CL_VKSR_SPVRE
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_PRINT
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RR_PR_PRINT) type ref to ZCL_VCXI_FFSS_PR_CSTEP_PRINT
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_SPEC_FIDIM
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_MS_INK
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods INIT_BY_MS_DINK
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .

  methods FILL_SPVRE_ADDON
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSR_BL_PSTEP_PRINT definition
class ZCL_VCXI_FFSR_BL_PSTEP_PRINT implementation.
  method ADD_ASPECTS_TO_RTE_PSTEP.

    data: LF_NOCOL type        I,
          LF_ARECM type        /VCXI/VSMR_ARECM.
    data: LS_RTE_SAREC type        /VCXI/VSMR_S_RTE_SAREC,
          LS_MS_INK    type        ZVCXI_FFSR_S_MS_INK,
          LS_COVRT     type        ZVCXI_FFS_S_COVRT.
    field-symbols: <S_ARECN> type        /VCXI/VSMR_S_RTE_RANGE_ARECN.

***--------------------------------------------------------------------------------------
*** Get Super
    SUPER->ADD_ASPECTS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***--------------------------------------------------------------------------------------
*** Aspect - Number of Color
    try.
        clear: LS_RTE_SAREC-I_ARECN.
        LF_NOCOL = LINES( ME->T_MS_INK ).
        move 1                                            to LS_RTE_SAREC-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
        append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
        move 'I'                    to <S_ARECN>-SIGN.
        move 'LE'                   to <S_ARECN>-OPTION.
        move LF_NOCOL               to <S_ARECN>-LOW.

        move LF_NOCOL               to LF_ARECM.

        IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_IAATY_NOCOL
                                     II_ARECN  = LS_RTE_SAREC-I_ARECN
                                     IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                     IF_ASORT  = LS_RTE_SAREC-ASORT
                                     IF_ARECM  = LF_ARECM ).
      catch /VCXI/CX_CKX.
    endtry.

***--------------------------------------------------------------------------------------
*** Aspect - Total Coverage
    try.
        clear: LS_RTE_SAREC-I_ARECN.
        loop at ME->T_MS_INK into LS_MS_INK.
          add  LS_MS_INK-S_COVRG-COVRG     to LS_COVRT-COVRT.
          move LS_MS_INK-S_COVRG-COVRG_UOM to LS_COVRT-COVRT_UOM.
        endloop.

        move 1                                            to LS_RTE_SAREC-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
        append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
        move 'I'                    to <S_ARECN>-SIGN.
        move 'LE'                   to <S_ARECN>-OPTION.
        move LS_COVRT-COVRT         to <S_ARECN>-LOW.

        IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_IAATY_COVRT
                                     II_ARECN  = LS_RTE_SAREC-I_ARECN
                                     IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                     IF_ASORT  = LS_RTE_SAREC-ASORT ).
      catch /VCXI/CX_CKX.
    endtry.

***--------------------------------------------------------------------------------------
*** Aspect - Internal Film Thickness
    try.
        clear: LS_RTE_SAREC-I_ARECN.
        move 1                                            to LS_RTE_SAREC-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
        append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
        move 'I'                    to <S_ARECN>-SIGN.
        move 'LE'                   to <S_ARECN>-OPTION.
        move ME->S_FIDIM_IN-FITIN   to <S_ARECN>-LOW.

        IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_IAATY_FITIN
                                     II_ARECN  = LS_RTE_SAREC-I_ARECN
                                     IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                     IF_ASORT  = LS_RTE_SAREC-ASORT ).
      catch /VCXI/CX_CKX.
    endtry.

***--------------------------------------------------------------------------------------
*** Aspect - Number of additional color changes
    try.
        clear: LS_RTE_SAREC-I_ARECN.
        move 1                                            to LS_RTE_SAREC-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
        append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
        move 'I'                    to <S_ARECN>-SIGN.
        move 'LE'                   to <S_ARECN>-OPTION.
        move ME->F_NOACC            to <S_ARECN>-LOW.

        move ME->F_NOACC            to LF_ARECM.

        IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_IAATY_NOACC
                                     II_ARECN  = LS_RTE_SAREC-I_ARECN
                                     IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                     IF_ASORT  = LS_RTE_SAREC-ASORT
                                     IF_ARECM  = LF_ARECM ).
      catch /VCXI/CX_CKX.
    endtry.

***--------------------------------------------------------------------------------------
*** Aspect - Number of additional tool changes
    try.
        clear: LS_RTE_SAREC-I_ARECN.
        move 1                                            to LS_RTE_SAREC-MAXSEL.
        move /VCXI/CL_VSMR_RTE_CADDON=>C_ASORT_DESCENDING to LS_RTE_SAREC-ASORT.
        append initial line         to LS_RTE_SAREC-I_ARECN assigning <S_ARECN>.
        move 'I'                    to <S_ARECN>-SIGN.
        move 'LE'                   to <S_ARECN>-OPTION.
        move ME->F_NOATC            to <S_ARECN>-LOW.

        move ME->F_NOATC            to LF_ARECM.

        IR_RTE_PSTEP->SET_RTE_SAREC( IF_IAATY  = ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_IAATY_NOATC
                                     II_ARECN  = LS_RTE_SAREC-I_ARECN
                                     IF_MAXSEL = LS_RTE_SAREC-MAXSEL
                                     IF_ASORT  = LS_RTE_SAREC-ASORT
                                     IF_ARECM  = LF_ARECM ).
      catch /VCXI/CX_CKX.
    endtry.

  endmethod.
  method ADD_LIMITS_TO_RTE_PSTEP.

    data: LF_LDUOM type          /VCXI/VSMC_LDUOM,
          LF_LDVAL type          /VCXI/VSMR_LDVAL.
    data:           LS_MS_INK type          ZVCXI_FFSR_S_MS_INK.
    data:           LI_LVVAL  type          /VCXI/VSMR_TT_RTE_RANGE_LVVAL.
    data:           LT_LTYPE  type          /VCXI/CKX_TT_OBJECT.
    data: LR_OBJECT type ref to   /VCXI/IF_CKX_OBJECT,
          LR_LTYPE  type ref to   /VCXI/CL_VSMC_LTYPE.


    SUPER->ADD_LIMITS_TO_RTE_PSTEP( IR_RTE_PSTEP = IR_RTE_PSTEP ).

***--------------------------------------------------------------------------------------
*** Get all linked Limits
    LT_LTYPE = ME->R_PSTEP->/VCXI/IF_VSMC_LINK_LTYPE~GET_LINKED_LTYPE( ).
    loop at LT_LTYPE into LR_OBJECT.
      move LR_OBJECT ?to LR_LTYPE.

      clear: LF_LDVAL,
             LF_LDUOM,
             LI_LVVAL.

***--------------------------------------------------------------------------------------
      case LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
***     Film Width (Inbound)
        when 'F0_LT_DI_WIWID'.
          move ME->S_WIDIM_IN-WIWID           to LF_LDVAL.
          move ME->S_WIDIM_IN-WIWID_UOM       to LF_LDUOM.

***     Winding Width (Outbound)
        when 'FF_LT_DO_WIWID'.
          move ME->S_WIDIM_OUT-WIWID          to LF_LDVAL.
          move ME->S_WIDIM_OUT-WIWID_UOM      to LF_LDUOM.

***     Number of Outs
        when 'F0_LT_DO_NOOUT'.
          move ME->S_FIDIM_OUT-NOOUT          to LF_LDVAL.
          move 'ST'                           to LF_LDUOM.

***     Print Type
        when 'FF_LT_VP_TPRIN'.
          append value #( SIGN = 'I' OPTION = 'EQ' LOW = ME->F_TPRIN ) to LI_LVVAL.

***     Number of Colors
        when 'FF_LT_DP_NOCOL'.
          LF_LDVAL = ME->GET_NOCOL( ).
          LF_LDUOM = 'ST'.

***     Ink Type
        when 'FF_LT_VP_TINK'.
          loop at ME->T_MS_INK into LS_MS_INK.
            append value #( SIGN = 'I' OPTION = 'EQ' LOW = LS_MS_INK-TINK ) to LI_LVVAL.
          endloop.
          sort LI_LVVAL.
          delete adjacent duplicates from LI_LVVAL.

        when others.
***       Number of Colors (analog) per Ink Type
          data(LF_ILTYP) = LR_LTYPE->/VCXI/IF_CKX_OBJECT~GET_ID( ).
          if LF_ILTYP cp 'FF_LT_DP_NOCOL_*'.
            LF_LDVAL = ME->GET_NOCOL( IF_TINK = conv #( LF_ILTYP+15 ) ).
            LF_LDUOM = 'ST'.
          else.
            continue.
          endif.

      endcase.

***--------------------------------------------------------------------------------------
***   Set
      case LR_LTYPE->F_MLTYP.
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_D.
          IR_RTE_PSTEP->SET_RTE_LDIM( IR_LTYPE = LR_LTYPE
                                      IF_LDVAL = LF_LDVAL
                                      IF_LDUOM = LF_LDUOM ).
        when /VCXI/CL_VSMC_LTYPE=>C_MLTYP_V.
          IR_RTE_PSTEP->SET_RTE_LVAL( IR_LTYPE = LR_LTYPE
                                      II_LVVAL = LI_LVVAL ).
      endcase.
    endloop.

  endmethod.
  method ADD_SPVRE_MC_INK.

    data: LS_MS_INK type        ZVCXI_FFSR_S_MS_INK,
          LS_LEOKY  type        /VCXI/VKSR_S_LEOKY,
          LS_PARAM  type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MC_INK type ref to /VCXI/CL_VKSR_SPVRE.

    check ME->T_MS_INK is not initial.

***--------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MC_INK'
                                        IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

***--------------------------------------------------------------------------------------
    loop at ME->T_MS_INK into LS_MS_INK.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MC_INK
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append LR_SPVRE_MC_INK to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MC_INK->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***   Set Material Number
      clear LS_LEOKY.
      move LS_MS_INK-MATNR                              to LS_LEOKY-LEOKY.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_LEOKY-SETBY.
      LR_SPVRE_MC_INK->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

***--------------------------------------------------------------------------------------
***   Set Coverage
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_INK=>C_PARID_COVRG      to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_MS_INK-COVRG                             to LS_PARAM-ATFLV.
      move LS_MS_INK-COVRG_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Average Consumption
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_INK=>C_PARID_AVGCO_W    to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_MS_INK-AVGCO                             to LS_PARAM-ATFLV.
      move LS_MS_INK-AVGCO_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Average Consumption Per
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_INK=>C_PARID_AVGCP_A    to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_MS_INK-AVGCP                             to LS_PARAM-ATFLV.
      move LS_MS_INK-AVGCP_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Surface Weight
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_INK=>C_PARID_SURWT      to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_MS_INK-SURWT                             to LS_PARAM-ATFLV.
      move LS_MS_INK-SURWT_UOM                         to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
***   Set Purchase Flag
      clear LS_PARAM.
      move ZCL_VCXI_FFSP_PR_MC_INK=>C_PARID_PURCH      to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
      move LS_MS_INK-PURCH                             to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

      if LS_MS_INK-PURCH ne ZCL_VCXI_FFSP_PR_MC_INK=>C_PURCH_STOCK.
***     Set Price
        clear LS_PARAM.
        move ZCL_VCXI_FFSP_PR_MC_INK=>C_PARID_PRICE      to LS_PARAM-PARID.
        move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
        move LS_MS_INK-PRICE                             to LS_PARAM-ATFLV.
        move LS_MS_INK-PRICE_CURR                        to LS_PARAM-CURKY.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
        LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

***     Set Price Unit
        clear LS_PARAM.
        move ZCL_VCXI_FFSP_PR_MC_INK=>C_PARID_PRICP_W     to LS_PARAM-PARID.
        move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC            to LS_PARAM-PARTY.
        move LS_MS_INK-PRICP                              to LS_PARAM-ATFLV.
        move LS_MS_INK-PRICP_UOM                          to LS_PARAM-UNIT.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
        LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).

***     Set Vendor
        clear LS_PARAM.
        move ZCL_VCXI_FFSP_PR_MC_INK=>C_PARID_LIFNR       to LS_PARAM-PARID.
        move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
        move LS_MS_INK-LIFNR                              to LS_PARAM-ATWRT.
        move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
        LR_SPVRE_MC_INK->SET_PARAM( IS_PARAM = LS_PARAM ).
      endif.

    endloop.

  endmethod.
  method ADD_SPVRE_MC_TOOL.

    data: LS_MS_TOOL type ZVCXI_FFSR_S_MS_TOOL.
    data: LR_SPVCE         type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MC_TOOL type ref to /VCXI/CL_VKSR_SPVRE.


    check ME->T_MS_TOOL is not initial.

    loop at ME->T_MS_TOOL into LS_MS_TOOL.
***------------------------------------------------------------------------------------------------
***   Get Customizing Element
      LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = switch #( LS_MS_TOOL-FOTUT when ABAP_TRUE then 'MC_TOOL_OTU'
                                                                                                      else 'MC_TOOL' )
                                          IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MC_TOOL
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append LR_SPVRE_MC_TOOL to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MC_TOOL->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
***   Set Material Number
      LR_SPVRE_MC_TOOL->SET_LEOKY( IS_LEOKY = value #( LEOKY = LS_MS_TOOL-MATNR
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***------------------------------------------------------------------------------------------------
***   Set Average Consumption
      LR_SPVRE_MC_TOOL->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MC_TOOL=>C_PARID_AVGCO_P
                                                       PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                       ATFLV = LS_MS_TOOL-S_AVGCO-AVGCO
                                                       UNIT  = LS_MS_TOOL-S_AVGCO-AVGCO_UOM
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

***   Set Average Consumption Per
      LR_SPVRE_MC_TOOL->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MC_TOOL=>C_PARID_AVGCP_L
                                                       PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                       ATFLV = LS_MS_TOOL-S_AVGCP-AVGCP
                                                       UNIT  = LS_MS_TOOL-S_AVGCP-AVGCP_UOM
                                                       SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

    endloop.

  endmethod.
  method COMPARE.

    data:  LR_BL_PSTEP_PRINT type ref to ZCL_VCXI_FFSR_BL_PSTEP_PRINT.

*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP_PRINT.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    if ME->S_FIDIM_IN  eq LR_BL_PSTEP_PRINT->S_FIDIM_IN and
       ME->S_FIDIM_OUT eq LR_BL_PSTEP_PRINT->S_FIDIM_OUT.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

*** Winding Dimensions
    if ME->S_WIDIM_OUT eq LR_BL_PSTEP_PRINT->S_WIDIM_OUT and
       ME->S_WIDIM_IN eq LR_BL_PSTEP_PRINT->S_WIDIM_IN.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Printing Data
    if ME->F_TPRIN eq LR_BL_PSTEP_PRINT->F_TPRIN and
       ME->F_PRCAT eq LR_BL_PSTEP_PRINT->F_PRCAT and
       ME->S_PRWID eq LR_BL_PSTEP_PRINT->S_PRWID and
       ME->S_PRTIN eq LR_BL_PSTEP_PRINT->S_PRTIN and
       ME->F_NOACC eq LR_BL_PSTEP_PRINT->F_NOACC and
       ME->F_NOATC eq LR_BL_PSTEP_PRINT->F_NOATC and
       ME->F_NODDG eq LR_BL_PSTEP_PRINT->F_NODDG and
       ME->S_PRRLE eq LR_BL_PSTEP_PRINT->S_PRRLE.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Inks and Tools
    if ME->T_MS_INK  eq LR_BL_PSTEP_PRINT->T_MS_INK  and
       ME->T_MS_TOOL eq LR_BL_PSTEP_PRINT->T_MS_TOOL.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IF_IPSTP   = IF_IPSTP
                        IF_DATE    = IF_DATE
                        IR_APPDATA = IR_APPDATA ).

*** Initialize Outsourcing Info
    move ZCL_VCXI_XCSP_PR_OUTSO=>C_PARID_PRICP_L to ME->ZIF_VCXI_XCSR_BL_OUTSO~F_PARID_PRICP.
    ME->INIT_OUTSO( ).

  endmethod.
  method COPY.

    data:  LR_BL_PSTEP_PRINT type ref to ZCL_VCXI_FFSR_BL_PSTEP_PRINT.

***--------------------------------------------------------------------------------------
*** Super Copy
    RR_BL_PSTEP = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP_PRINT.

***--------------------------------------------------------------------------------------
*** Film Dimensions
    move ME->S_FIDIM_IN    to LR_BL_PSTEP_PRINT->S_FIDIM_IN.
    move ME->S_FIDIM_OUT   to LR_BL_PSTEP_PRINT->S_FIDIM_OUT.

*** Winding Dimensions
    move ME->S_WIDIM_IN    to LR_BL_PSTEP_PRINT->S_WIDIM_IN.
    move ME->S_WIDIM_OUT   to LR_BL_PSTEP_PRINT->S_WIDIM_OUT.

***--------------------------------------------------------------------------------------
*** Printing Data
    move ME->F_TPRIN       to LR_BL_PSTEP_PRINT->F_TPRIN.
    move ME->F_PRCAT       to LR_BL_PSTEP_PRINT->F_PRCAT.
    move ME->S_PRWID       to LR_BL_PSTEP_PRINT->S_PRWID.
    move ME->S_PRTIN       to LR_BL_PSTEP_PRINT->S_PRTIN.
    move ME->F_NOACC       to LR_BL_PSTEP_PRINT->F_NOACC.
    move ME->F_NOATC       to LR_BL_PSTEP_PRINT->F_NOATC.
    move ME->F_NODDG       to LR_BL_PSTEP_PRINT->F_NODDG.
    move ME->S_PRRLE       to LR_BL_PSTEP_PRINT->S_PRRLE.

***--------------------------------------------------------------------------------------
*** Inks and Tools
    move ME->T_MS_INK      to LR_BL_PSTEP_PRINT->T_MS_INK.
    move ME->T_MS_TOOL     to LR_BL_PSTEP_PRINT->T_MS_TOOL.

  endmethod.
  method DESERIALIZE.

    data:  LF_XML   type STRING.

    check IF_XML is not initial.

*** Deserialize
    call transformation ID
         source xml IF_XML
         result SUPER_XML    = LF_XML
                S_FIDIM_IN   = ME->S_FIDIM_IN
                S_FIDIM_OUT  = ME->S_FIDIM_OUT
                S_WIDIM_IN   = ME->S_WIDIM_IN
                S_WIDIM_OUT  = ME->S_WIDIM_OUT
                F_TPRIN      = ME->F_TPRIN
                F_PRCAT      = ME->F_PRCAT
                S_PRWID      = ME->S_PRWID
                S_PRTIN      = ME->S_PRTIN
                F_NOACC      = ME->F_NOACC
                F_NOATC      = ME->F_NOATC
                F_NODDG      = ME->F_NODDG
                S_PRRLE      = ME->S_PRRLE
                T_MS_INK     = ME->T_MS_INK
                T_MS_TOOL    = ME->T_MS_TOOL.

    SUPER->DESERIALIZE( IF_XML = LF_XML ).

  endmethod.
  method FILL_SPVRE_ADDON.

    SUPER->FILL_SPVRE_ADDON( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                       IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                       IR_ARBPL       = IR_ARBPL
                             changing  CT_SPVRE       = CT_SPVRE ).

    case IR_SPVRE_ADDON->GET_ID( ).
      when C_IATYP_AT_PRINT.
        ME->FILL_SPVRE_ADDON_PRINT( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                              IR_SPVRE_ADDON = IR_SPVRE_ADDON
                                              IR_ARBPL       = IR_ARBPL
                                    changing  CT_SPVRE       = CT_SPVRE ).
    endcase.

  endmethod.
  method FILL_SPVRE_ADDON_PRINT.

    data:  LS_PARAM type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Set Print Type
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_PARID_TPRIN to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move ME->F_TPRIN                                 to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
*** Set Print Category
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_PARID_PRCAT to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR           to LS_PARAM-PARTY.
    move ME->F_PRCAT                                 to LS_PARAM-ATWRT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
*** Set Print Width
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_PARID_PRWID to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move ME->S_PRWID-PRWID                           to LS_PARAM-ATFLV.
    move ME->S_PRWID-PRWID_UOM                       to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Print Repeat Length
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_PARID_PRRLE to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move ME->S_PRRLE-PRRLE                           to LS_PARAM-ATFLV.
    move ME->S_PRRLE-PRRLE_UOM                       to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Internal Print Thickness
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_PARID_PRTIN to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move ME->S_PRTIN-PRTIN                           to LS_PARAM-ATFLV.
    move ME->S_PRTIN-PRTIN_UOM                       to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Additional Number of Color Changes
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_PARID_NOACC to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move ME->F_NOACC                                 to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Additional Number of Ink Tool Changes
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_PARID_NOATC to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move ME->F_NOATC                                 to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Additional Number of Design Changes
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ADDON_PRINT=>C_PARID_NODDG to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move ME->F_NODDG                                 to LS_PARAM-ATFLV.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    IR_SPVRE_ADDON->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
*** Add Material Consumption for Ink
    ME->ADD_SPVRE_MC_INK( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                    IR_SPVRE_PARENT = IR_SPVRE_ADDON
                          changing  CT_SPVRE        = CT_SPVRE ).

***--------------------------------------------------------------------------------------
*** Add Material Consumption for Tool
    ME->ADD_SPVRE_MC_TOOL( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                     IR_SPVRE_PARENT = IR_SPVRE_ADDON
                           changing  CT_SPVRE        = CT_SPVRE ).

  endmethod.
  method GET_ARBPL_INFO.

***--------------------------------------------------------------------------------------
*** Don't overrule existing
    check CF_ID_GRP   is initial and
          CF_ID_ARBPL is initial.

***--------------------------------------------------------------------------------------
*** Standard
    move 'GRP_CONV'   to CF_ID_GRP.
    move 'ARBPL_CONV' to CF_ID_ARBPL.

***--------------------------------------------------------------------------------------
*** If Outsourcing
    if ME->ZIF_VCXI_XCSR_BL_OUTSO~F_OUTSO eq ABAP_TRUE.
      move 'GRP_CONV'     to CF_ID_GRP.
      move 'ARBPL_OUTSO'  to CF_ID_ARBPL.
    endif.

  endmethod.
  method GET_NOCOL.

    data: LT_MS_INK type ZVCXI_FFSR_TT_MS_INK.


***--------------------------------------------------------------------------------------
*** Get all Inks (Analog or Digital)
    LT_MS_INK = ME->T_MS_INK.

    if IF_TINK is supplied.
***   Filter by Ink Type
      delete LT_MS_INK where TINK ne IF_TINK.
    else.
***   Filter by Print Technology (Analog Inks only)
      loop at LT_MS_INK into data(LS_MS_INK).
        if ZCL_VCXI_FFSS_CUST_PRINT=>GET_TINK_PRTEC( IF_TINK = LS_MS_INK-TINK ) ne ZCL_VCXI_FFSS_CUST_PRINT=>C_PRTEC_ANALOG.
          delete LT_MS_INK.
        endif.
      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Return Number of Inks
    move LINES( LT_MS_INK ) to RF_NOCOL.

  endmethod.
  method GET_PRVDR_PRINT.

    data:  LR_GATE   type ref to /VCXI/CL_VKSR_GATE.

*** Get Reference
    loop at IT_PRVDR into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_PRINT.
          if RR_PR_PRINT is bound.
            exit.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_SPVRE_ACTVY.

    data: LS_PARAM       type        /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_ACTVY type ref to /VCXI/CL_VKSR_SPVRE.

***--------------------------------------------------------------------------------------
*** Get Customizing Element for Activity
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'ACTVY_PRINT'
                                        IR_SPVCE_PARENT = IR_SPVRE_ARBPL->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_ACTVY
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_ARBPL.
    append LR_SPVRE_ACTVY to RT_SPVRE.

*** Set In Use
    LR_SPVRE_ACTVY->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Set Print Width
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ACTVY_PRINT=>C_PARID_PRWID to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move ME->S_PRWID-PRWID                           to LS_PARAM-ATFLV.
    move ME->S_PRWID-PRWID_UOM                       to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

*** Set Internal Print Thickness
    clear LS_PARAM.
    move ZCL_VCXI_FFSP_PR_ACTVY_PRINT=>C_PARID_PRTIN to LS_PARAM-PARID.
    move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
    move ME->S_PRTIN-PRTIN                           to LS_PARAM-ATFLV.
    move ME->S_PRTIN-PRTIN_UOM                       to LS_PARAM-UNIT.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
    LR_SPVRE_ACTVY->SET_PARAM( IS_PARAM = LS_PARAM ).

***--------------------------------------------------------------------------------------
*** Add Material Consumption for Ink
    ME->ADD_SPVRE_MC_INK( exporting IR_BL_RTESPV    = IR_BL_RTESPV
                                    IR_SPVRE_PARENT = LR_SPVRE_ACTVY
                          changing  CT_SPVRE        = RT_SPVRE ).

  endmethod.
  method INIT_BY_MS_DINK.

    data: LS_APWGT type ZVCXI_FFS_S_APWGT.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_DINK type ref to ZCL_VCXI_FFSS_PR_MS_DINK.
    field-symbols: <S_MS_INK> type ZVCXI_FFSR_S_MS_INK.


***--------------------------------------------------------------------------------------
*** Loop at defined Digital Inks
    loop at IT_PRVDR into LR_GATE
                    where TABLE_LINE->R_CLSPR is instance of ZCL_VCXI_FFSS_PR_MS_DINK.
      LR_PR_MS_DINK ?= LR_GATE->R_CLSPR.

      LS_APWGT = LR_PR_MS_DINK->GET_APWGT( ).
      check LS_APWGT-APWGT is not initial.

      append value #( MATNR   = LR_PR_MS_DINK->GET_MATNR( )
                      TINK    = LR_PR_MS_DINK->GET_TINK( )
                      S_COVRG = LR_PR_MS_DINK->GET_COVRG( )
                    ) to ME->T_MS_INK assigning <S_MS_INK>.

***--------------------------------------------------------------------------------------
***   Calculate Average Consumption by Application Weight
      move 1000 to <S_MS_INK>-AVGCP.
      move 'M2' to <S_MS_INK>-AVGCP_UOM.

      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_APWGT-APWGT
                                                          IF_CALCV_UOM_1 = LS_APWGT-APWGT_UOM
                                                          IF_CALCV_2     = <S_MS_INK>-AVGCP
                                                          IF_CALCV_UOM_2 = <S_MS_INK>-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = <S_MS_INK>-AVGCO
                                                          EF_CALCV_UOM   = <S_MS_INK>-AVGCO_UOM ).
***   Surface Weight
      <S_MS_INK>-S_SURWT = LR_PR_MS_DINK->GET_SURWT( ).

***--------------------------------------------------------------------------------------
***   Purchasing Info
      <S_MS_INK>-PURCH   = LR_PR_MS_DINK->GET_PURCH( ).
      <S_MS_INK>-LIFNR   = LR_PR_MS_DINK->GET_LIFNR( ).
      <S_MS_INK>-S_PRICE = LR_PR_MS_DINK->GET_PRICE( ).
      <S_MS_INK>-S_PRICP = LR_PR_MS_DINK->GET_PRICP( ).

    endloop.

  endmethod.
  method INIT_BY_MS_INK.

    data: LF_INKTN type ZVCXI_FFS_INKTN,
          LF_APCTN type ZVCXI_FFS_APCTN,
          LF_MSLTN type ZVCXI_FFS_MSLTN,
          LF_ANITN type ZVCXI_FFS_ANITN.
    data: LS_APWGT type ZVCXI_FFS_S_APWGT.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_INK  type ref to ZCL_VCXI_FFSS_PR_MS_INK.
    field-symbols: <S_MS_INK>  type        ZVCXI_FFSR_S_MS_INK,
                   <S_MS_TOOL> type        ZVCXI_FFSR_S_MS_TOOL.

***--------------------------------------------------------------------------------------
*** Get Ink Data
    loop at IT_PRVDR into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_MS_INK.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
      append initial line to ME->T_MS_INK assigning <S_MS_INK>.

***   Basic Info
      <S_MS_INK>-MATNR = LR_PR_MS_INK->GET_MATNR( ).

***   Ink Type
      <S_MS_INK>-TINK = LR_PR_MS_INK->GET_TINK( ).

***   Coverage
      <S_MS_INK>-S_COVRG = LR_PR_MS_INK->GET_COVRG( ).

***--------------------------------------------------------------------------------------
****  Calculate Average Consumption by Application Weight
      LS_APWGT = LR_PR_MS_INK->GET_APWGT( ).

      move 1000 to <S_MS_INK>-S_AVGCP-AVGCP.
      move 'M2' to <S_MS_INK>-S_AVGCP-AVGCP_UOM.

      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_APWGT-APWGT
                                                          IF_CALCV_UOM_1 = LS_APWGT-APWGT_UOM
                                                          IF_CALCV_2     = <S_MS_INK>-S_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = <S_MS_INK>-S_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = <S_MS_INK>-S_AVGCO-AVGCO
                                                          EF_CALCV_UOM   = <S_MS_INK>-S_AVGCO-AVGCO_UOM ).

***   Surface Weight
      <S_MS_INK>-S_SURWT = LR_PR_MS_INK->GET_SURWT( ).

***--------------------------------------------------------------------------------------
***   Purchasing Info
      move LR_PR_MS_INK->GET_PURCH( )   to <S_MS_INK>-PURCH.
      move LR_PR_MS_INK->GET_LIFNR( )   to <S_MS_INK>-LIFNR.
      move LR_PR_MS_INK->GET_PRICE( )   to <S_MS_INK>-S_PRICE.
      move LR_PR_MS_INK->GET_PRICP( )   to <S_MS_INK>-S_PRICP.

***--------------------------------------------------------------------------------------
***   Ink Tool
      LF_INKTN = LR_PR_MS_INK->GET_INKTN( ).
      if LF_INKTN is not initial.
        append value #( MATNR     = LF_INKTN
                        AVGCO     = 1
                        AVGCO_UOM = 'ST' ) to ME->T_MS_TOOL.
      endif.
***   Adapter/Print Cylinder
      LF_APCTN = LR_PR_MS_INK->GET_APCTN( ).
      if LF_APCTN is not initial.
        append value #( MATNR     = LF_APCTN
                        AVGCO     = 1
                        AVGCO_UOM = 'ST' ) to ME->T_MS_TOOL.
      endif.
***   Mounting Sleeve
      LF_MSLTN = LR_PR_MS_INK->GET_MSLTN( ).
      if LF_MSLTN is not initial.
        append value #( MATNR     = LF_MSLTN
                        AVGCO     = 1
                        AVGCO_UOM = 'ST' ) to ME->T_MS_TOOL.
      endif.
***   Anilox Roll Tool
      LF_ANITN = LR_PR_MS_INK->GET_ANITN( ).
      if LF_ANITN is not initial.
        append value #( MATNR     = LF_ANITN
                        AVGCO     = 1
                        AVGCO_UOM = 'ST' ) to ME->T_MS_TOOL.
      endif.
    endloop.

  endmethod.
  method INIT_BY_SPEC.

    data: LF_SETTN type ZVCXI_FFS_SETTN,
          LF_FOTUT type ZVCXI_XCS_FOTUT.
    data: LR_PR_CSTEP_PRINT type ref to ZCL_VCXI_FFSS_PR_CSTEP_PRINT.


    SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                         IT_PRVDR = IT_PRVDR ).

***--------------------------------------------------------------------------------------
*** Initialize Film Dimensions
    ME->INIT_BY_SPEC_FIDIM( IT_PRVDR = IT_PRVDR ).

***--------------------------------------------------------------------------------------
*** Get Printing Data
    move ME->GET_PRVDR_PRINT( IT_PRVDR = IT_PRVDR ) to LR_PR_CSTEP_PRINT.
    check LR_PR_CSTEP_PRINT is bound.

*** Get Print Type
    ME->F_TPRIN = LR_PR_CSTEP_PRINT->GET_TPRIN( ).

*** Get Print Category
    ME->F_PRCAT = LR_PR_CSTEP_PRINT->GET_PRCAT( ).

*** Get Print Width
    ME->S_PRWID = LR_PR_CSTEP_PRINT->GET_PRWID( ).

*** Repeat Length
    LR_PR_CSTEP_PRINT->GET_PRRLE( importing ES_PRRLE = ME->S_PRRLE ).

*** Get Internal Print Thickness
    LR_PR_CSTEP_PRINT->GET_PRTIN( importing ES_PRTIN = ME->S_PRTIN ).

*** Get Additional Number of Color Changes
    LR_PR_CSTEP_PRINT->GET_NOACC( importing EF_NOACC = ME->F_NOACC ).

*** Get Additional Number of Ink Tool Changes
    LR_PR_CSTEP_PRINT->GET_NOATC( importing EF_NOATC = ME->F_NOATC ).

*** Get Number of Different Designs
    LR_PR_CSTEP_PRINT->GET_NODDG( importing EF_NODDG = ME->F_NODDG ).

*** Get Tool Set Number
    LF_SETTN = LR_PR_CSTEP_PRINT->GET_SETTN( importing EF_FOTUT = LF_FOTUT ).
    if LF_SETTN is not initial.
      append value #( MATNR     = LF_SETTN
                      FOTUT     = LF_FOTUT
                      AVGCO     = 1
                      AVGCO_UOM = 'ST' ) to ME->T_MS_TOOL.
    endif.

***--------------------------------------------------------------------------------------
*** Get Ink Data
    ME->INIT_BY_MS_DINK( IT_PRVDR = IT_PRVDR ).
    ME->INIT_BY_MS_INK( IR_GATE  = IR_GATE
                        IT_PRVDR = IT_PRVDR ).

  endmethod.
  method INIT_BY_SPEC_FIDIM.

    data: LR_PR_CSTEP_PRINT type ref to ZCL_VCXI_FFSS_PR_CSTEP_PRINT,
          LR_BL_FIFPROP     type ref to ZCL_VCXI_FFSS_BL_FIFPROP.

***--------------------------------------------------------------------------------------
*** Get Provider - Printing
    move ME->GET_PRVDR_PRINT( IT_PRVDR = IT_PRVDR ) to LR_PR_CSTEP_PRINT.
    check LR_PR_CSTEP_PRINT is bound.

***--------------------------------------------------------------------------------------
*** Inbound Dimensions
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_PREV~GET_FIWID( importing ES_FIWID = ME->S_FIDIM_IN-S_FIWID ).
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_PREV~GET_FITIN( importing ES_FITIN = ME->S_FIDIM_IN-S_FITIN ).
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_PREV~GET_FITEX( importing ES_FITEX = ME->S_FIDIM_IN-S_FITEX ).
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_PREV~GET_SURWT( importing ES_SURWT = ME->S_FIDIM_IN-S_SURWT ).
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_PREV~GET_NOUPS( importing EF_NOUPS = ME->S_FIDIM_IN-NOUPS ).

*** Get Winding Dimension - Inbound
    clear LR_BL_FIFPROP.
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_PREV~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    if LR_BL_FIFPROP is bound.
***   Get Winding Width - In
      ME->S_WIDIM_IN-S_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = ME->S_FIDIM_IN-S_FIWID ).
***   Get Winding Thickness - In
      ME->S_WIDIM_IN-S_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = ME->S_FIDIM_IN-S_FIWID
                                                         IS_FITIN = ME->S_FIDIM_IN-S_FITIN ).
***   Get Winding Surface Weight
      ME->S_WIDIM_IN-S_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = ME->S_FIDIM_IN-S_SURWT
                                                         IS_FIWID = ME->S_FIDIM_IN-S_FIWID
                                                         IS_WIWID = ME->S_WIDIM_IN-S_WIWID ).
    endif.

***--------------------------------------------------------------------------------------
*** Outbound Dimensions
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ME->S_FIDIM_OUT-S_FIWID ).
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITIN( importing ES_FITIN = ME->S_FIDIM_OUT-S_FITIN ).
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FITEX( importing ES_FITEX = ME->S_FIDIM_OUT-S_FITEX ).
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_NEXT~GET_SURWT( importing ES_SURWT = ME->S_FIDIM_OUT-S_SURWT ).
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_NEXT~GET_NOUPS( importing EF_NOUPS = ME->S_FIDIM_OUT-NOUPS ).
    move 1 to ME->S_FIDIM_OUT-NOOUT.

*** Get Winding Dimension - Outbound
    clear LR_BL_FIFPROP.
    LR_PR_CSTEP_PRINT->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIFPX( importing ER_BL_FIFPROP = LR_BL_FIFPROP ).
    if LR_BL_FIFPROP is bound.
***   Get Winding Width - Out
      ME->S_WIDIM_OUT-S_WIWID = LR_BL_FIFPROP->GET_WIWID( IS_FIWID = ME->S_FIDIM_OUT-S_FIWID ).
***   Get Winding Thickness - Out
      ME->S_WIDIM_OUT-S_WITHI = LR_BL_FIFPROP->GET_WITHI( IS_FIWID = ME->S_FIDIM_OUT-S_FIWID
                                                          IS_FITIN = ME->S_FIDIM_OUT-S_FITIN ).
***   Get Winding Surface Weight
      ME->S_WIDIM_OUT-S_WISWG = LR_BL_FIFPROP->GET_WISWG( IS_SURWT = ME->S_FIDIM_OUT-S_SURWT
                                                          IS_FIWID = ME->S_FIDIM_OUT-S_FIWID
                                                          IS_WIWID = ME->S_WIDIM_OUT-S_WIWID ).
    endif.

  endmethod.
  method SERIALIZE.

*** Super Serialize
    RF_XML = SUPER->SERIALIZE( ).

*** Serialize
    call transformation ID
         source SUPER_XML    = RF_XML

                S_FIDIM_IN   = ME->S_FIDIM_IN
                S_FIDIM_OUT  = ME->S_FIDIM_OUT
                S_WIDIM_IN   = ME->S_WIDIM_IN
                S_WIDIM_OUT  = ME->S_WIDIM_OUT
                F_TPRIN      = ME->F_TPRIN
                F_PRCAT      = ME->F_PRCAT
                S_PRWID      = ME->S_PRWID
                S_PRTIN      = ME->S_PRTIN
                F_NOACC      = ME->F_NOACC
                F_NOATC      = ME->F_NOATC
                F_NODDG      = ME->F_NODDG
                S_PRRLE      = ME->S_PRRLE
                T_MS_INK     = ME->T_MS_INK
                T_MS_TOOL    = ME->T_MS_TOOL

    result xml RF_XML.

  endmethod.
  method ZIF_VCXI_FFSR_ADJ_FIDIM~CALC_FIDIM_IN.

    refresh: CT_FIDIM.
    append ME->S_FIDIM_IN to CT_FIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_ADJ_FIDIM~CALC_FIDIM_OUT.

    refresh: CT_FIDIM.
    append ME->S_FIDIM_OUT to CT_FIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_RDIM.

*** Inbound Roll Dimensions
    ET_RDIM_IN = ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN.

*** Outbound Roll Dimensions
    ET_RDIM_OUT = value #( for LS_RHNDL in ZIF_VCXI_FFSR_RHNDL~T_RHNDL ( S_RDITA = LS_RHNDL-S_RDITA ) ).

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~GET_WIDIM.

    append ME->S_WIDIM_OUT to RT_WIDIM.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RDIM_IN.

*** Set Inbound Roll Dimensions as provided
    ME->ZIF_VCXI_FFSR_RHNDL~T_RDIM_IN = IT_RDIM_IN.

  endmethod.
  method ZIF_VCXI_FFSR_RHNDL~SET_RHNDL.

    ME->SET_RHNDL( IT_RHNDL     = IT_RHNDL
                   IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Update Target Roll Length
    if ME->ZIF_VCXI_FFSR_RHNDL~T_RHNDL is not initial.
      ME->S_FIDIM_OUT-S_RLETA = ME->ZIF_VCXI_FFSR_RHNDL~T_RHNDL[ 1 ]-S_RLETA.
    endif.

  endmethod.
