
class ZCL_VCXI_XCSU_BL_PALOP definition
  public
  create public .

public section.

  types:
    begin of YS_TUNIT,
        TUNIT   type ZVCXI_XCSU_TUNIT,
        DESCR   type /VCXI/CKX_DESCR,
        T_SPATT type ZVCXI_XCSU_TT_PACKP,
      end   of YS_TUNIT .
  types:
    YT_TUNIT type table of YS_TUNIT with default key .
  types:
    begin of YS_OPTI_STA,
        TTRUC             type ZVCXI_XCSU_TTRUC,
        PPMAT             type ZVCXI_XCSU_PPMAT,
        PPATT             type ZVCXI_XCSU_PPATT,
        SPATT             type ZVCXI_XCSU_SPATT,
        S_LIMIT_H_UNIT    type ZVCXI_XCSU_S_DIMVA,
        S_LIMIT_H_TRUCK   type ZVCXI_XCSU_S_DIMVA,
        S_LIMIT_L_TRUCK   type ZVCXI_XCSU_S_DIMVA,
        S_DIMEN_H_UNIT    type ZVCXI_XCSU_S_DIMVA,
        S_DIMEN_H_TRUCK   type ZVCXI_XCSU_S_DIMVA,
        S_DIMEN_H_PACKMAT type ZVCXI_XCSU_S_DIMVA,
        S_DIMEN_W_PACKMAT type ZVCXI_XCSU_S_DIMVA,
        LAPTR             type ZVCXI_XCSU_LAPTR,
        PCPST             type ZVCXI_XCSU_PCPST,
      end   of YS_OPTI_STA .
  types:
    YT_OPTI_STA type standard table of YS_OPTI_STA .
  types:
    begin of YS_FOOTPRINT,
        PPMAT   type ZVCXI_XCSU_PPMAT,
        PPATT   type ZVCXI_XCSU_PPATT,
        TUNIT   type ZVCXI_XCSU_TUNIT,
        SPATT   type ZVCXI_XCSU_SPATT,
        STPHU   type ZVCXI_XCSU_STPHU,
        S_DIMWE type ZVCXI_XCSU_S_DIMVA,
        S_DIMLE type ZVCXI_XCSU_S_DIMVA,
      end of YS_FOOTPRINT .
  types:
    YT_FOOTPRINT type standard table of YS_FOOTPRINT .
  types:
    begin of YS_OPTI_CUST.
        include type ZVCXI_XCS_TC210.
    types: DESCR type /VCXI/CKX_DESCR,
      end of YS_OPTI_CUST .
  types:
    YT_OPTI_CUST type standard table of YS_OPTI_CUST .
  types:
    YT_TRPRE type standard table of ZVCXI_XCS_TD221 .
  types:
    YT_PMPRE type standard table of ZVCXI_XCS_TD222 .
  types:
    YT_PCPST type standard table of ZVCXI_XCSU_PRQTY .

  constants C_IELOP_PCPST type ZVCXI_XCSU_IELOP value 'STACK_PRQTY' ##NO_TEXT.
  constants C_IELOP_PPATT type ZVCXI_XCSU_IELOP value 'PALLET_CONSC' ##NO_TEXT.
  constants C_IELOP_PPMAT type ZVCXI_XCSU_IELOP value 'PALLET_PMATN' ##NO_TEXT.
  constants C_IELOP_SPATT type ZVCXI_XCSU_IELOP value 'UNIT_PACKP' ##NO_TEXT.
  constants C_IELOP_TTRUC type ZVCXI_XCSU_IELOP value 'TRUCK_SHUNT' ##NO_TEXT.
  constants C_IELOP_TUNIT type ZVCXI_XCSU_IELOP value 'UNIT_SHUNT' ##NO_TEXT.
  constants C_PARAM_PMATY_P type MEMORYID value 'ZVCXI_XCSU_PMATY_P' ##NO_TEXT.
  constants C_PARAM_SHUTY_C type MEMORYID value 'ZVCXI_XCSU_SHUTY_C' ##NO_TEXT.
  constants C_PARAM_SHUTY_S type MEMORYID value 'ZVCXI_XCSU_SHUTY_S' ##NO_TEXT.
  constants C_PARAM_SHUTY_U type MEMORYID value 'ZVCXI_XCSU_SHUTY_U' ##NO_TEXT.
  constants C_SETBY type CHAR05 value 'SETBY' ##NO_TEXT.
  constants C_UOM type CHAR03 value 'UOM' ##NO_TEXT.
  data F_COPTI type ZVCXI_XCSU_COPTI read-only .
  data F_COPTI_G type ZVCXI_XCSU_COPTI read-only .
  data F_COPTI_R type ZVCXI_XCSU_COPTI read-only .
  data F_COPTI_Y type ZVCXI_XCSU_COPTI read-only .
  data F_CPACK type ZVCXI_XCSU_CPACK read-only .
  data R_DATA type ref to DATA read-only .
  data T_DIMEN_IN type ZVCXI_XCSU_TT_DIMEN read-only .
  data T_LIMIT_UNIT type ZVCXI_XCSU_TT_LIMIT read-only .
  data T_OPTI type ZVCXI_XCSU_TT_PALOP_OPTI read-only .
  data T_OPTI_CUST type YT_OPTI_CUST read-only .
  data T_RES type ZVCXI_XCSU_TT_PALOP_RES read-only .
  data T_SHIPUNIT type ZVCXI_XCSU_TT_PALOP_SHIPUNIT read-only .

  methods CONSTRUCTOR
    importing
      !IR_DFLT_SHIPU type ref to ZCL_VCXI_XCSU_DFLT_SHIPU
      !IF_CPACK type ZVCXI_XCSU_CPACK
      !IT_SHIPUNIT type ZVCXI_XCSU_TT_PALOP_SHIPUNIT
      !IT_DIMEN_IN type ZVCXI_XCSU_TT_DIMEN
      !IT_SHUTY_DFLT_DEF type ZVCXI_XCSU_TT_SHUTY_DFLT_DEF
      !IS_TBQTY_IN type ZVCXI_XCSU_S_TBQTY
      !IS_OPQTY type /VCXI/VSMR_S_OPQTY optional
    raising
      /VCXI/CX_CKX .
  methods EXE_PALOP
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR_FOR_DIMEN
    importing
      !IF_DIMEN type ZVCXI_XCSU_DIMEN
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR_FOR_LIMIT
    importing
      !IF_LIMIT type ZVCXI_XCSU_LIMIT
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_RESULT
    importing
      !IF_COPTI type ZVCXI_XCSU_COPTI
    returning
      value(RT_SHIPUNIT) type ZVCXI_XCSU_TT_PALOP_SHIPUNIT .
  methods UPDATE_OPTI
    importing
      !IS_OPTI type ZVCXI_XCSU_S_PALOP_OPTI
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UOM_PCT type UNIT value '%' ##NO_TEXT.
  data F_COPTI_SEL type ZVCXI_XCSU_COPTI .
  data F_PMATY_PALLET type ZVCXI_XCSU_PMATY .
  data F_SHUNT_STACK type ZVCXI_XCSU_SHUNT .
  data R_DFLT_SHIPU type ref to ZCL_VCXI_XCSU_DFLT_SHIPU .
  data S_COMOD type ZVCXI_XCSU_S_COMOD .
  data S_DIMEN_H_PACKMAT type ZVCXI_XCSU_S_DIMVA .
  data S_DIMEN_W_PACKMAT type ZVCXI_XCSU_S_DIMVA .
  data S_OPQTY type /VCXI/VSMR_S_OPQTY .
  data S_TBQTY_IN type ZVCXI_XCSU_S_TBQTY .
  data T_EFFCT_PALLET type ZVCXI_XCSU_TT_EFFCT .
  data T_PMPRE type YT_PMPRE .
  data T_SHUTY_DFLT_DEF type ZVCXI_XCSU_TT_SHUTY_DFLT_DEF .
  data T_TRPRE type YT_TRPRE .
  data F_SHUTY_UNIT type ZVCXI_XCSU_SHUTY .

  methods INIT_PMATY_PALLET
    raising
      /VCXI/CX_CKX .
  methods GET_CUST_MATNR_PALLET
    importing
      !IF_PPMAT type ZVCXI_XCSU_PPMAT
    returning
      value(RR_CUST_PACKMAT) type ref to ZCL_VCXI_XCSU_CUST_PACKMAT
    raising
      /VCXI/CX_CKX .
  methods CALC_OTRUT
    changing
      !CS_RES type ZVCXI_XCSU_S_PALOP_RES
    raising
      /VCXI/CX_CKX .
  methods CALC_TPORD
    changing
      !CS_RES type ZVCXI_XCSU_S_PALOP_RES
    raising
      /VCXI/CX_CKX .
  methods CALC_TRUHU
    changing
      !CS_RES type ZVCXI_XCSU_S_PALOP_RES
    raising
      /VCXI/CX_CKX .
  methods CALC_UPORD
    changing
      !CS_RES type ZVCXI_XCSU_S_PALOP_RES
    raising
      /VCXI/CX_CKX .
  methods CALC_WEIGHTS
    importing
      !IS_OPTI_STA type YS_OPTI_STA
    changing
      !CS_RES type ZVCXI_XCSU_S_PALOP_RES
    raising
      /VCXI/CX_CKX .
  methods CHECK_DIMEN_IN
    raising
      /VCXI/CX_CKX .
  methods CREATE_RANGE
    importing
      !IF_DATEL type ROLLNAME
    changing
      !CR_RANGE type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods DELETE_INEFFICIENT_FOOTPRINT
    changing
      !CT_RES type ZVCXI_XCSU_TT_PALOP_RES
    raising
      /VCXI/CX_CKX .
  methods DO_CHECKS
    changing
      !CS_RES type ZVCXI_XCSU_S_PALOP_RES
    raising
      /VCXI/CX_CKX .
  methods GET_NPREF
    changing
      !CS_RES type ZVCXI_XCSU_S_PALOP_RES
    raising
      /VCXI/CX_CKX .
  methods GET_OPTI_STACK
    importing
      !IF_TTRUC type ZVCXI_XCSU_TTRUC
      !IF_PPMAT type ZVCXI_XCSU_PPMAT
      !IS_LIMIT_H_TRUCK type ZVCXI_XCSU_S_LIMIT
      !IS_LIMIT_L_TRUCK type ZVCXI_XCSU_S_LIMIT
      !IS_LIMIT_H_UNIT type ZVCXI_XCSU_S_LIMIT
      !IF_PPATT type ZVCXI_XCSU_PPATT
      !IF_SPATT type ZVCXI_XCSU_SPATT
      !IT_DIMEN_UNIT type ZVCXI_XCSU_TT_DIMEN
    changing
      !CT_OPTI_STA type YT_OPTI_STA
    raising
      /VCXI/CX_CKX .
  methods GET_SHIPUNIT_DATA
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    exporting
      !ET_LIMIT_TRUCK type ZVCXI_XCSU_TT_LIMIT
      !ET_DIMEN_TRUCK type ZVCXI_XCSU_TT_DIMEN
      !ES_LIMIT_H_TRUCK type ZVCXI_XCSU_S_LIMIT
      !ES_LIMIT_H_UNIT type ZVCXI_XCSU_S_LIMIT
      !ES_LIMIT_L_TRUCK type ZVCXI_XCSU_S_LIMIT
    raising
      /VCXI/CX_CKX .
  methods GET_SPATT_FOOTPRINT
    importing
      !IS_PPATT_LEN type ZVCXI_XCSU_S_DIMVA
      !IS_PPATT_WID type ZVCXI_XCSU_S_DIMVA
    changing
      !CS_RES type ZVCXI_XCSU_S_PALOP_RES
    raising
      /VCXI/CX_CKX .
  methods INIT_VCELE
    importing
      !IF_IELOP type ZVCXI_XCSU_IELOP
    changing
      !CF_ISOUR type ZVCXI_XCSU_ISOUR
      !CF_VCELE type ZVCXI_XCSU_VCELE
      !CR_VALUE type ref to DATA
      !CF_VCELE_UOM type UNIT
    raising
      /VCXI/CX_CKX .
  methods LOAD_OPTIONS
    exporting
      !ET_PPMAT type ZVCXI_XCSU_TT_PMATN
      !ET_PPATT type ZVCXI_XCSU_TT_CONSC
      !ET_TTRUC type ZVCXI_XCSU_TT_SHUNT
      !ET_TUNIT type YT_TUNIT
      !ET_PCPST type YT_PCPST
    raising
      /VCXI/CX_CKX .
  methods OPTIMIZE_STACK
    importing
      !IT_PCPST type YT_PCPST
    changing
      !CT_OPTI_STA type YT_OPTI_STA
    raising
      /VCXI/CX_CKX .
  methods READ_ISOUR
    importing
      !IS_SHIPUNIT type ZVCXI_XCSU_S_PALOP_SHIPUNIT
      !IS_PACKMAT type ZVCXI_XCSU_S_PALOP_PACKMAT
      !IF_PARAM type FIELDNAME
    returning
      value(RF_ISOUR) type ZVCXI_XCSU_ISOUR
    raising
      /VCXI/CX_CKX .
  methods READ_PALL_DIM
    importing
      !IF_PPMAT type ZVCXI_XCSU_PPMAT
    exporting
      !ET_EFFCT type ZVCXI_XCSU_TT_EFFCT
      !ES_PPMAT_LEN type ZVCXI_XCSU_S_DIMVA
      !ES_PPMAT_WID type ZVCXI_XCSU_S_DIMVA
    raising
      /VCXI/CX_CKX .
private section.

  methods COPY_DFLT_SHIPU
    importing
      !IR_DFLT_SHIPU type ref to ZCL_VCXI_XCSU_DFLT_SHIPU
    raising
      /VCXI/CX_CKX .
  methods EXTRACT_DIMEN_UNIT_PACKMAT
    raising
      /VCXI/CX_CKX .
  methods EXTRACT_LIMIT_UNIT
    raising
      /VCXI/CX_CKX .
  methods EXTRACT_SHIPUNIT_STACK
    raising
      /VCXI/CX_CKX .
  methods INIT_OPTI
    raising
      /VCXI/CX_CKX .
  methods LOAD_CUST
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSU_BL_PALOP definition
class ZCL_VCXI_XCSU_BL_PALOP implementation.
method CALC_OTRUT.

  data:          LR_DATA        type ref to DATA.
  field-symbols: <F_OTRUT>      type        ZVCXI_XCSU_OTRUT.

  CS_RES-OTRUT_UOM = C_UOM_PCT.

***-------------------------------------------------------------------------
*** Calc Value
  if CS_RES-HUPTR is not initial and
     CS_RES-UPORD is not initial.

    try.
        CS_RES-OTRUT = ( CS_RES-UPORD / CS_RES-HUPTR ) * 100.
      catch CX_SY_ARITHMETIC_OVERFLOW
            CX_SY_CONVERSION_OVERFLOW.
        LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = CS_RES-OTRUT ).
        assign LR_DATA->* to <F_OTRUT>.
        CS_RES-OTRUT = <F_OTRUT>.
    endtry.
  endif.

endmethod.
method CALC_TPORD.

  data:          LF_TBQTY       type        ZVCXI_XCSU_TBQTY.

***-------------------------------------------------------------------------
*** Calc Value
  if ME->S_TBQTY_IN-TBQTY is not initial and
     CS_RES-PCPTR         is not initial.
    LF_TBQTY = CS_RES-PCPTR * ME->S_TBQTY_IN-TBQTY.
    CS_RES-TPORD = ceil( ME->S_OPQTY-OPQTY / LF_TBQTY ).
  endif.

endmethod.
method CALC_TRUHU.

  data:          LF_LIM_LEN     type        ATFLV,
                 LF_LIM_WID     type        ATFLV,
                 LF_LIM_HGT     type        ATFLV,
                 LF_LIM_PROD    type        ATFLV,
                 LF_DIM_LEN     type        ATFLV,
                 LF_DIM_WID     type        ATFLV,
                 LF_DIM_HGT     type        ATFLV,
                 LF_DIM_PROD    type        ATFLV,
                 LF_DIMID       type        DIMID.
  data:          LR_DATA        type ref to DATA.
  field-symbols: <S_DIMEN>      type        ZVCXI_XCSU_S_DIMEN,
                 <S_LIMIT>      type        ZVCXI_XCSU_S_LIMIT,
                 <F_TRUUT>      type        ZVCXI_XCSU_TRUUT.

  CS_RES-TRUHU_UOM = C_UOM_PCT.

***-------------------------------------------------------------------------
*** Determine what dimensions should be used for calculation.
  LF_DIMID = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_DIMID.


***-------------------------------------------------------------------------
*** Get Shipping Unit Details of Truck
*** Get needed Dimension
  read table CS_RES-T_DIMEN_TRUCK assigning <S_DIMEN>
                                  with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH.
  if SY-SUBRC eq 0.
    LF_DIM_LEN = <S_DIMEN>-DIMVA.
  endif.

  read table CS_RES-T_DIMEN_TRUCK assigning <S_DIMEN>
                                  with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH.
  if SY-SUBRC eq 0.
    LF_DIM_WID = <S_DIMEN>-DIMVA.
  endif.

  read table CS_RES-T_DIMEN_TRUCK assigning <S_DIMEN>
                                  with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT.
  if SY-SUBRC eq 0.
    LF_DIM_HGT = <S_DIMEN>-DIMVA.
  endif.

*** Get needed Limits
  read table CS_RES-T_LIMIT_TRUCK assigning <S_LIMIT>
                                  with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH
                                           LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX.
  if SY-SUBRC eq 0.
    LF_LIM_LEN = <S_LIMIT>-DIMVA.
  endif.

  read table CS_RES-T_LIMIT_TRUCK assigning <S_LIMIT>
                                  with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH
                                           LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX.
  if SY-SUBRC eq 0.
    LF_LIM_WID = <S_LIMIT>-DIMVA.
  endif.

  read table CS_RES-T_LIMIT_TRUCK assigning <S_LIMIT>
                                  with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT
                                           LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX.
  if SY-SUBRC eq 0.
    LF_LIM_HGT = <S_LIMIT>-DIMVA.
  endif.

***-------------------------------------------------------------------------
*** Do Calculation
  case LF_DIMID.
    when  ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMID_LINEAR.
***   Take Length values directly
      LF_DIM_PROD = LF_DIM_LEN.
      LF_LIM_PROD = LF_LIM_LEN.
    when  ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMID_AREA.
***   Calculate Areas
      LF_DIM_PROD = LF_DIM_LEN * LF_DIM_WID.
      LF_LIM_PROD = LF_LIM_LEN * LF_LIM_WID.
    when  ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMID_VOLUME.
***   Calculate the Volumes
      LF_DIM_PROD = LF_DIM_LEN * LF_DIM_WID * LF_DIM_HGT.
      LF_LIM_PROD = LF_LIM_LEN * LF_LIM_WID * LF_LIM_HGT.
  endcase.

  if LF_LIM_PROD is not initial.
    try.
        CS_RES-TRUHU = ( LF_DIM_PROD / LF_LIM_PROD ) * 100.
      catch CX_SY_ARITHMETIC_OVERFLOW
            CX_SY_CONVERSION_OVERFLOW.
        LR_DATA = CL_ABAP_EXCEPTIONAL_VALUES=>GET_MAX_VALUE( IN = CS_RES-TRUHU ).
        assign LR_DATA->* to <F_TRUUT>.
        CS_RES-TRUHU = <F_TRUUT>.
    endtry.
  endif.

endmethod.
method CALC_UPORD.

  data:          LF_TBQTY       type        ZVCXI_XCSU_TBQTY.

***-------------------------------------------------------------------------
*** Calc Value
  if ME->S_TBQTY_IN-TBQTY is not initial and
     CS_RES-PCPHU         is not initial.
    LF_TBQTY = CS_RES-PCPHU * ME->S_TBQTY_IN-TBQTY.
    CS_RES-UPORD = ceil( ME->S_OPQTY-OPQTY / LF_TBQTY ).
  endif.

endmethod.
method CALC_WEIGHTS.

  data:          LS_DIMEN  type ZVCXI_XCSU_S_DIMEN,
                 LS_DIMWE  type ZVCXI_XCSU_S_DIMVA.
  field-symbols: <S_DIMEN> type ZVCXI_XCSU_S_DIMEN.

*** Get Weight per Stack
  read table ME->T_DIMEN_IN into LS_DIMEN
                            with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT.

  LS_DIMWE-DIMVA     = LS_DIMEN-DIMVA * CS_RES-PCPST * CS_RES-STPHU.
  LS_DIMWE-DIMVA_UOM = LS_DIMEN-DIMVA_UOM.

*** Get Weight per Pallet
  ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_OPTI_STA-S_DIMEN_W_PACKMAT-DIMVA
                                                      IF_CALCV_UOM_1 = IS_OPTI_STA-S_DIMEN_W_PACKMAT-DIMVA_UOM
                                                      IF_CALCV_2     = LS_DIMWE-DIMVA
                                                      IF_CALCV_UOM_2 = LS_DIMWE-DIMVA_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                      IF_UOM         = LS_DIMWE-DIMVA_UOM
                                            importing EF_CALCV       = LS_DIMWE-DIMVA
                                                      EF_CALCV_UOM   = LS_DIMWE-DIMVA_UOM ).


*** Set Handling Unit Weight
  read table CS_RES-T_DIMEN_UNIT assigning <S_DIMEN>
                                  with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT.
  move LS_DIMWE-DIMVA     to <S_DIMEN>-DIMVA.
  move LS_DIMWE-DIMVA_UOM to <S_DIMEN>-DIMVA_UOM.

*** Get Weight per Truck
  LS_DIMWE-DIMVA = LS_DIMWE-DIMVA * CS_RES-HUPTR.

*** Set Truck Weight
  read table CS_RES-T_DIMEN_TRUCK assigning <S_DIMEN>
                                  with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT.
  move LS_DIMWE-DIMVA     to <S_DIMEN>-DIMVA.
  move LS_DIMWE-DIMVA_UOM to <S_DIMEN>-DIMVA_UOM.

endmethod.
method CHECK_DIMEN_IN.

  read table ME->T_DIMEN_IN with key DIMVA = 0 transporting no fields.
  check SY-SUBRC = 0.

*** Pallet Optimization not possible - Please check Ingoing Dimensions.
  raise exception type /VCXI/CX_CKX
    exporting
      F_MSGTY = 'E'
      F_MSGID = 'ZVCXI_XCSU'
      F_MSGNO = '603'.

endmethod.
  method CONSTRUCTOR.

*** Create "own" Default Instance
    ME->COPY_DFLT_SHIPU( IR_DFLT_SHIPU = IR_DFLT_SHIPU ).

*** Set Configuration Model Details
    ME->S_COMOD-PRFID = ME->R_DFLT_SHIPU->F_PRFID.
    ME->S_COMOD-CMATN = ME->R_DFLT_SHIPU->F_CMATN.
    ME->S_COMOD-MSYST = ME->R_DFLT_SHIPU->F_SYSOM.

*** Identify Unit Unit
    loop at ME->R_DFLT_SHIPU->R_CUST_SHIPU->T_SHUTY_UNIT into ME->F_SHUTY_UNIT.
      if LINE_EXISTS( IT_SHIPUNIT[ SHUTY = ME->F_SHUTY_UNIT ] ).
        exit.
      else.
        clear ME->F_SHUTY_UNIT.
      endif.
    endloop.

*** Save Importing Data
    move IF_CPACK          to ME->F_CPACK.
    move IT_SHIPUNIT       to ME->T_SHIPUNIT.
    move IT_DIMEN_IN       to ME->T_DIMEN_IN.
    move IT_SHUTY_DFLT_DEF to ME->T_SHUTY_DFLT_DEF.
    move IS_TBQTY_IN       to ME->S_TBQTY_IN.
    move IS_OPQTY          to ME->S_OPQTY.

*** Extract Shipping Unit Stack
    ME->EXTRACT_SHIPUNIT_STACK( ).

*** Read identical Packaging Material Type for Pallet
    ME->INIT_PMATY_PALLET( ).

*** Check ingoing Dimensions are complete
    ME->CHECK_DIMEN_IN( ).

*** Load Customizing
    ME->LOAD_CUST( ).

*** Extract HU Limits
    ME->EXTRACT_LIMIT_UNIT( ).

*** Extract Dimensions of Packaging Materials
    ME->EXTRACT_DIMEN_UNIT_PACKMAT( ).

*** Initialize Optimization Values
    ME->INIT_OPTI( ).

*** Set Parameter for Search Helps
    set parameter id C_PARAM_SHUTY_U field ME->F_SHUNT_STACK.
    set parameter id C_PARAM_PMATY_P field ME->F_PMATY_PALLET.
    set parameter id C_PARAM_SHUTY_C field ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER.
    set parameter id C_PARAM_SHUTY_U field ME->F_SHUTY_UNIT.

  endmethod.
  method COPY_DFLT_SHIPU.

*** Create Reference to Shipping & Unitization Default Customizing
    create object ME->R_DFLT_SHIPU
      exporting
        IR_APPDATA    = IR_DFLT_SHIPU->R_APPDATA
        IF_KUNNR_WE   = IR_DFLT_SHIPU->F_KUNNR_WE
        IF_KUNNR_AG   = IR_DFLT_SHIPU->F_KUNNR_AG
        IF_VKORG      = IR_DFLT_SHIPU->F_VKORG
        IF_VTWEG      = IR_DFLT_SHIPU->F_VTWEG
        IF_SPART      = IR_DFLT_SHIPU->F_SPART
        IF_DCONF      = IR_DFLT_SHIPU->F_DCONF
        IF_WERKS      = IR_DFLT_SHIPU->F_WERKS
        IF_SHSCH      = IR_DFLT_SHIPU->S_DFLT_SHIP_MGR-SHSCH
        IF_CPACK      = IR_DFLT_SHIPU->S_DFLT_SHIP_MGR-CPACK
        IF_CMATN      = IR_DFLT_SHIPU->F_CMATN
        IF_PRFID      = IR_DFLT_SHIPU->F_PRFID
        IF_CNTXT      = IR_DFLT_SHIPU->F_CNTXT
        IF_SYSOM      = IR_DFLT_SHIPU->F_SYSOM
        IR_CUST_SHIPU = IR_DFLT_SHIPU->R_CUST_SHIPU.

    if ME->R_DFLT_SHIPU is not bound.
***   Default Customizing can't be loaded for Pallet Optimization
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = 'ZVCXI_XCSU'
          F_MSGNO = '601'.
    endif.

  endmethod.
method CREATE_RANGE.

  data:          LR_STRUCTDESCR    type ref to  CL_ABAP_STRUCTDESCR,
                 LR_TABLEDESCR     type ref to  CL_ABAP_TABLEDESCR,
                 LR_DATADESCR      type ref to  CL_ABAP_DATADESCR,
                 LR_TYPEDESCR      type ref to  CL_ABAP_TYPEDESCR.
  data:          LS_COMPONENT      type line of ABAP_COMPONENT_TAB.
  data:          LT_COMPONENTS     type         ABAP_COMPONENT_TAB.

  check CR_RANGE is initial.

*** Determine Components of Structure -> LT_COMPONENTS
  move 'SIGN' to LS_COMPONENT-NAME.
  LS_COMPONENT-TYPE = CL_ABAP_ELEMDESCR=>GET_C( P_LENGTH = 1 ).
  insert LS_COMPONENT into table LT_COMPONENTS.

  move 'OPTION' to LS_COMPONENT-NAME.
  LS_COMPONENT-TYPE = CL_ABAP_ELEMDESCR=>GET_C( P_LENGTH = 2 ).
  insert LS_COMPONENT into table LT_COMPONENTS.

  move 'LOW' to LS_COMPONENT-NAME.
  CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = IF_DATEL
                                       receiving  P_DESCR_REF    = LR_TYPEDESCR
                                       exceptions TYPE_NOT_FOUND = 1 ).
  if SY-SUBRC eq 0.
    try.
        move LR_TYPEDESCR ?to LS_COMPONENT-TYPE.
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.
    insert LS_COMPONENT into table LT_COMPONENTS.
  else.
    exit.
  endif.

  move 'HIGH' to LS_COMPONENT-NAME.
  CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( exporting  P_NAME         = IF_DATEL
                                       receiving  P_DESCR_REF    = LR_TYPEDESCR
                                       exceptions TYPE_NOT_FOUND = 1 ).
  if SY-SUBRC eq 0.
    try.
        move LR_TYPEDESCR ?to LS_COMPONENT-TYPE.
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.
    insert LS_COMPONENT into table LT_COMPONENTS.
  else.
    exit.
  endif.

*** Get structure descriptor -> LR_STRUCTDESCR
  LR_STRUCTDESCR = CL_ABAP_STRUCTDESCR=>CREATE( LT_COMPONENTS ).

  LR_DATADESCR   = LR_STRUCTDESCR.
  LR_TABLEDESCR  = CL_ABAP_TABLEDESCR=>CREATE( LR_DATADESCR ).

*** Create dynmaic internal table
  create data CR_RANGE type handle LR_TABLEDESCR.

endmethod.
  method DELETE_INEFFICIENT_FOOTPRINT.

    data: LS_FOOTPRINT     type YS_FOOTPRINT,
          LS_FOOTPRINT_TMP type YS_FOOTPRINT,
          LS_RES           type ZVCXI_XCSU_S_PALOP_RES,
          LS_DIMEN         type ZVCXI_XCSU_S_DIMEN.
    data: LT_FOOTPRINT     type YT_FOOTPRINT.

*** Remove Results w/o Stacks per HU
    delete CT_RES where STPHU eq 0.

    loop at CT_RES into LS_RES.
      clear: LS_FOOTPRINT.

      LS_FOOTPRINT-PPMAT = LS_RES-PPMAT.
      LS_FOOTPRINT-PPATT = LS_RES-PPATT.
      LS_FOOTPRINT-TUNIT = LS_RES-TUNIT.
      LS_FOOTPRINT-SPATT = LS_RES-SPATT.
      LS_FOOTPRINT-STPHU = LS_RES-STPHU.
      LS_FOOTPRINT-S_DIMWE = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_DIMVA_DIMEN( IT_DIMEN = LS_RES-T_DIMEN_UNIT
                                                                              IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH ).
      LS_FOOTPRINT-S_DIMLE = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_DIMVA_DIMEN( IT_DIMEN = LS_RES-T_DIMEN_UNIT
                                                                              IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH ).
      append LS_FOOTPRINT to LT_FOOTPRINT.
    endloop.

    sort LT_FOOTPRINT by TUNIT S_DIMLE-DIMVA S_DIMWE-DIMVA STPHU descending.

    loop at LT_FOOTPRINT into LS_FOOTPRINT.
      if LS_FOOTPRINT-TUNIT         eq LS_FOOTPRINT_TMP-TUNIT and
         LS_FOOTPRINT-S_DIMLE-DIMVA eq LS_FOOTPRINT_TMP-S_DIMLE-DIMVA and
         LS_FOOTPRINT-S_DIMWE-DIMVA eq LS_FOOTPRINT_TMP-S_DIMWE-DIMVA and
         LS_FOOTPRINT-STPHU         lt LS_FOOTPRINT_TMP-STPHU.
        delete LT_FOOTPRINT.
      else.
        move LS_FOOTPRINT to LS_FOOTPRINT_TMP.
      endif.
    endloop.

    loop at CT_RES into LS_RES.
      read table LT_FOOTPRINT with key PPMAT = LS_RES-PPMAT
                                       PPATT = LS_RES-PPATT
                                       TUNIT = LS_RES-TUNIT
                                       SPATT = LS_RES-SPATT
                              transporting no fields.
      check SY-SUBRC ne 0.
      delete CT_RES.
    endloop.

  endmethod.
method DO_CHECKS.

  data: LF_MSGV1              type        SYMSGV,
        LF_MSGV2              type        SYMSGV,
        LF_VALID              type        ABAP_BOOL,
        LF_FMNCH              type        ZVCXI_XCSU_FMNCH.
  data: LS_DIMEN              type        ZVCXI_XCSU_S_DIMEN,
        LS_LIMIT              type        ZVCXI_XCSU_S_LIMIT.
  data: LR_CX_ILLEGAL_FUNC    type ref to CX_SY_DYN_CALL_ILLEGAL_FUNC,
        LR_CX_PARAM_NOT_FOUND type ref to CX_SY_DYN_CALL_PARAM_NOT_FOUND,
        LR_CX_PARAM_MISSING   type ref to CX_SY_DYN_CALL_PARAM_MISSING,
        LR_CX_DYN_CALL_ERROR  type ref to CX_SY_DYN_CALL_ERROR.

*** Check FG/Stack
  if CS_RES-FGPST is initial.
*** No FG/Stack possible.
    CS_RES-R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '634' ).
  endif.

*** Check Hu
  loop at CS_RES-T_LIMIT_UNIT into LS_LIMIT.
    clear: LF_VALID.
    LF_FMNCH = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_FMNCH_FOR_LIMIT( IF_LIMIT = LS_LIMIT-LIMIT ).

    if LF_FMNCH is initial.
      continue.
    endif.

    read table CS_RES-T_DIMEN_UNIT into LS_DIMEN with key DIMEN = LS_LIMIT-DIMEN.

    try.
        call function LF_FMNCH
          exporting
            IS_LIMIT = LS_LIMIT
            IS_DIMEN = LS_DIMEN
          importing
            EF_VALID = LF_VALID.

      catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
***     Function Module call failed: Could not call the function &1.
        move LR_CX_ILLEGAL_FUNC->FUNCTION to LF_MSGV1.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '001'
                          F_MSGV1 = LF_MSGV1.

      catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
***     Function Module call failed: Parameter &1 in function &2 missing.
        move LR_CX_PARAM_NOT_FOUND->PARAMETER to LF_MSGV1.
        move LR_CX_PARAM_NOT_FOUND->FUNCTION  to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '003'
                          F_MSGV1 = LF_MSGV1
                          F_MSGV2 = LF_MSGV2.

      catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
***     Function Module call failed: Obligatory parameter &2 of &2 not filled.
        move LR_CX_PARAM_MISSING->PARAMETER to LF_MSGV1.
        move LR_CX_PARAM_MISSING->FUNCTION  to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '003'
                          F_MSGV1 = LF_MSGV1
                          F_MSGV2 = LF_MSGV2.

      catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
***     Function Module call failed: Unknown Error while calling function &1.
        move LR_CX_DYN_CALL_ERROR->FUNCTION  to LF_MSGV1.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '004'
                          F_MSGV1 = LF_MSGV1.
    endtry.

    if LF_VALID eq ABAP_FALSE.
***   HU - Check for Limit &1 &2 has failed.
      if CS_RES-R_MSG is bound.
        CS_RES-R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '632'
                                   IF_MSGV1 = LS_LIMIT-LIMIT
                                   IF_MSGV2 = LS_LIMIT-DIMEN ).
      endif.
    endif.

  endloop.

*** Check Truck
  loop at CS_RES-T_LIMIT_TRUCK into LS_LIMIT.
    clear: LF_VALID.
    LF_FMNCH = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_FMNCH_FOR_LIMIT( IF_LIMIT = LS_LIMIT-LIMIT ).

    if LF_FMNCH is initial.
      continue.
    endif.

    read table CS_RES-T_DIMEN_TRUCK into LS_DIMEN with key DIMEN = LS_LIMIT-DIMEN.

    try.
        call function LF_FMNCH
          exporting
            IS_LIMIT = LS_LIMIT
            IS_DIMEN = LS_DIMEN
          importing
            EF_VALID = LF_VALID.

      catch CX_SY_DYN_CALL_ILLEGAL_FUNC into LR_CX_ILLEGAL_FUNC.
***     Function Module call failed: Could not call the function &1.
        move LR_CX_ILLEGAL_FUNC->FUNCTION to LF_MSGV1.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '001'
                          F_MSGV1 = LF_MSGV1.

      catch CX_SY_DYN_CALL_PARAM_NOT_FOUND into LR_CX_PARAM_NOT_FOUND.
***     Function Module call failed: Parameter &1 in function &2 missing.
        move LR_CX_PARAM_NOT_FOUND->PARAMETER to LF_MSGV1.
        move LR_CX_PARAM_NOT_FOUND->FUNCTION  to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '003'
                          F_MSGV1 = LF_MSGV1
                          F_MSGV2 = LF_MSGV2.

      catch CX_SY_DYN_CALL_PARAM_MISSING into LR_CX_PARAM_MISSING.
***     Function Module call failed: Obligatory parameter &2 of &2 not filled.
        move LR_CX_PARAM_MISSING->PARAMETER to LF_MSGV1.
        move LR_CX_PARAM_MISSING->FUNCTION  to LF_MSGV2.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '003'
                          F_MSGV1 = LF_MSGV1
                          F_MSGV2 = LF_MSGV2.

      catch CX_SY_DYN_CALL_ERROR into LR_CX_DYN_CALL_ERROR.
***     Function Module call failed: Unknown Error while calling function &1.
        move LR_CX_DYN_CALL_ERROR->FUNCTION  to LF_MSGV1.
        raise exception type /VCXI/CX_CKX
                        exporting
                          F_MSGTY = 'E'
                          F_MSGID = 'ZVCXI_XCS'
                          F_MSGNO = '004'
                          F_MSGV1 = LF_MSGV1.
    endtry.

    if LF_VALID eq ABAP_FALSE.
***   Truck - Check for Limit &1 &2 has failed.
      if CS_RES-R_MSG is bound.
        CS_RES-R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '633'
                                   IF_MSGV1 = LS_LIMIT-LIMIT
                                   IF_MSGV2 = LS_LIMIT-DIMEN ).
      endif.
    endif.

  endloop.

endmethod.
  method EXE_PALOP.

    data: LF_PCING type ZVCXI_XCSU_PCPST.
    data: LS_PPMAT         type ZVCXI_XCSU_S_PMATN,
          LS_PPATT         type ZVCXI_XCSU_S_CONSC,
          LS_TUNIT         type YS_TUNIT,
          LS_SPATT         type ZVCXI_XCSU_S_PACKP,
          LS_TTRUC         type ZVCXI_XCSU_S_SHUNT,
          LS_RES_TRU       type ZVCXI_XCSU_S_PALOP_RES,
          LS_RES           type ZVCXI_XCSU_S_PALOP_RES,
          LS_PPMAT_LEN     type ZVCXI_XCSU_S_DIMVA,
          LS_PPMAT_WID     type ZVCXI_XCSU_S_DIMVA,
          LS_PPATT_LEN     type ZVCXI_XCSU_S_DIMVA,
          LS_PPATT_WID     type ZVCXI_XCSU_S_DIMVA,
          LS_DIMEN_IN_W    type ZVCXI_XCSU_S_DIMEN,
          LS_LIMIT_H_UNIT  type ZVCXI_XCSU_S_LIMIT,
          LS_LIMIT_H_TRUCK type ZVCXI_XCSU_S_LIMIT,
          LS_LIMIT_L_TRUCK type ZVCXI_XCSU_S_LIMIT,
          LS_OPTI_STA      type YS_OPTI_STA.
    data: LT_PPMAT       type ZVCXI_XCSU_TT_PMATN,
          LT_PPATT       type ZVCXI_XCSU_TT_CONSC,
          LT_TUNIT       type YT_TUNIT,
          LT_TTRUC       type ZVCXI_XCSU_TT_SHUNT,
          LT_PCPST       type YT_PCPST,
          LT_EFFCT_PALL  type ZVCXI_XCSU_TT_EFFCT,
          LT_LIMIT_TRUCK type ZVCXI_XCSU_TT_LIMIT,
          LT_DIMEN_TRUCK type ZVCXI_XCSU_TT_DIMEN,
          LT_RES_PAL     type ZVCXI_XCSU_TT_PALOP_RES,
          LT_RES_TRU     type ZVCXI_XCSU_TT_PALOP_RES,
          LT_OPTI_STA    type YT_OPTI_STA.
    field-symbols: <S_RES>   type ZVCXI_XCSU_S_PALOP_RES,
                   <S_DIMEN> type ZVCXI_XCSU_S_DIMEN.


    free:  ME->T_RES, ME->F_COPTI, ME->F_COPTI_G, ME->F_COPTI_Y, ME->F_COPTI_R.

***--------------------------------------------------------------------------------------
***--------------------------------------------------------------------------------------
*** Load all Possible Options
    ME->LOAD_OPTIONS( importing ET_PPMAT = LT_PPMAT
                                ET_PPATT = LT_PPATT
                                ET_TUNIT = LT_TUNIT
                                ET_TTRUC = LT_TTRUC
                                ET_PCPST = LT_PCPST ).

***--------------------------------------------------------------------------------------
***--------------------------------------------------------------------------------------
*** Do for each Packaging Material number
    loop at LT_PPMAT into LS_PPMAT.

      clear: LS_PPMAT_LEN, LS_PPMAT_WID, LT_EFFCT_PALL.

***   Get Pallet Length/Width
      ME->READ_PALL_DIM( exporting IF_PPMAT     = LS_PPMAT-PMATN
                         importing ET_EFFCT     = LT_EFFCT_PALL
                                   ES_PPMAT_LEN = LS_PPMAT_LEN
                                   ES_PPMAT_WID = LS_PPMAT_WID ).

***--------------------------------------------------------------------------------------
      loop at LT_PPATT into LS_PPATT.

        clear: LS_PPATT_LEN, LS_PPATT_WID.

        move LS_PPMAT_LEN to LS_PPATT_LEN.
        move LS_PPMAT_WID to LS_PPATT_WID.

***     Footprint of Pallets
        ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_PALLET_FOOTPRINT( exporting IF_CONSC     = LS_PPATT-CONSC
                                                                        IS_DIMVA_LEN = LS_PPMAT_LEN
                                                                        IS_DIMVA_WID = LS_PPMAT_WID
                                                              importing ES_DIMVA_LEN = LS_PPATT_LEN
                                                                        ES_DIMVA_WID = LS_PPATT_WID ).

***--------------------------------------------------------------------------------------
        loop at LT_TUNIT into LS_TUNIT.
          loop at LS_TUNIT-T_SPATT into LS_SPATT.
            clear: LS_RES.
            move LS_PPMAT-PMATN to LS_RES-PPMAT.
            move LS_PPMAT-DESCR to LS_RES-PPMAT_DESCR.
            move LS_PPATT-CONSC to LS_RES-PPATT.
            move LS_PPATT-DESCR to LS_RES-PPATT_DESCR.
            move LS_TUNIT-TUNIT to LS_RES-TUNIT.
            move LS_TUNIT-DESCR to LS_RES-TUNIT_DESCR.
            move LS_SPATT-PACKP to LS_RES-SPATT.
            move LS_SPATT-DESCR to LS_RES-SPATT_DESCR.
            move LT_EFFCT_PALL  to LS_RES-T_EFFCT_PALL.

***         Get Number of Stacks
            LS_RES-STPHU = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_PRQTY_BY_PACKP( IF_PACKP = LS_RES-SPATT )-PRQTY.

***         Get Footprint of Stacking Pattern including HU Dimension Length/Width and Overhang
            ME->GET_SPATT_FOOTPRINT( exporting IS_PPATT_LEN = LS_PPATT_LEN
                                               IS_PPATT_WID = LS_PPATT_WID
                                     changing  CS_RES       = LS_RES ).

            append LS_RES to LT_RES_PAL.
          endloop.
        endloop.
      endloop.
    endloop.


***--------------------------------------------------------------------------------------
***--------------------------------------------------------------------------------------
*** Optimizing to use the once with the max Stacks per Footprint
    ME->DELETE_INEFFICIENT_FOOTPRINT( changing CT_RES = LT_RES_PAL ).

*** Get Shipping Unit - HU Limits
    read table ME->T_LIMIT_UNIT into LS_LIMIT_H_UNIT
                                with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT
                                         LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX.

***--------------------------------------------------------------------------------------
***--------------------------------------------------------------------------------------
*** Process all Trucks
    loop at LT_TTRUC into LS_TTRUC.

      clear: LT_LIMIT_TRUCK, LT_DIMEN_TRUCK,
             LS_LIMIT_H_TRUCK, LS_LIMIT_L_TRUCK.

***   Get Shipping Unit Limits and Dimensions
      ME->GET_SHIPUNIT_DATA( exporting IF_SHUNT         = LS_TTRUC-SHUNT
                             importing ET_LIMIT_TRUCK   = LT_LIMIT_TRUCK
                                       ET_DIMEN_TRUCK   = LT_DIMEN_TRUCK
                                       ES_LIMIT_H_TRUCK = LS_LIMIT_H_TRUCK
                                       ES_LIMIT_L_TRUCK = LS_LIMIT_L_TRUCK ).

***   Process all possible Pallets
      loop at LT_RES_PAL into LS_RES.
        move ME->T_LIMIT_UNIT to LS_RES-T_LIMIT_UNIT.
        move LS_TTRUC-SHUNT   to LS_RES-TTRUC.
        move LS_TTRUC-DESCR   to LS_RES-TTRUC_DESCR.
        move LT_LIMIT_TRUCK   to LS_RES-T_LIMIT_TRUCK.
        move LT_DIMEN_TRUCK   to LS_RES-T_DIMEN_TRUCK.

        append LS_RES to LT_RES_TRU.

***     Prepare data for Stack Height Optimization
        ME->GET_OPTI_STACK( exporting IF_TTRUC         = LS_RES-TTRUC
                                      IF_PPMAT         = LS_RES-PPMAT
                                      IF_PPATT         = LS_RES-PPATT
                                      IF_SPATT         = LS_RES-SPATT
                                      IS_LIMIT_H_TRUCK = LS_LIMIT_H_TRUCK
                                      IS_LIMIT_L_TRUCK = LS_LIMIT_L_TRUCK
                                      IS_LIMIT_H_UNIT  = LS_LIMIT_H_UNIT
                                      IT_DIMEN_UNIT    = LS_RES-T_DIMEN_UNIT
                            changing  CT_OPTI_STA      = LT_OPTI_STA ).
      endloop.
    endloop.

    clear: LT_RES_PAL.

***--------------------------------------------------------------------------------------
***--------------------------------------------------------------------------------------
*** Optimize Stack Height
    ME->OPTIMIZE_STACK( exporting IT_PCPST    = LT_PCPST
                        changing  CT_OPTI_STA = LT_OPTI_STA ).

*** Get Ingoing Weight
    read table ME->T_DIMEN_IN into LS_DIMEN_IN_W
                              with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT.


    loop at LT_RES_TRU into LS_RES_TRU.
***--------------------------------------------------------------------------------------
***   Process Stacking Optimization
      loop at LT_OPTI_STA into LS_OPTI_STA
                         where TTRUC = LS_RES_TRU-TTRUC
                           and PPMAT = LS_RES_TRU-PPMAT
                           and PPATT = LS_RES_TRU-PPATT
                           and ( SPATT = LS_RES_TRU-SPATT or SPATT is initial ).

        clear: LS_RES.
        move LS_RES_TRU to LS_RES.

*** -------------------------------------------------------------------
***     Set Layer per Truck and PC per Stack
        LS_RES-LAPTR = LS_OPTI_STA-LAPTR.
        LS_RES-PCPST = LS_OPTI_STA-PCPST.

***     Set Handling Unit Height
        read table LS_RES-T_DIMEN_UNIT assigning <S_DIMEN>
                                       with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT.
        if SY-SUBRC ne 0.
          append initial line to LS_RES-T_DIMEN_UNIT assigning <S_DIMEN>.
          move ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT to <S_DIMEN>-DIMEN.
        endif.
        if SY-SUBRC = 0.
          move LS_OPTI_STA-S_DIMEN_H_UNIT-DIMVA     to <S_DIMEN>-DIMVA.
          move LS_OPTI_STA-S_DIMEN_H_UNIT-DIMVA_UOM to <S_DIMEN>-DIMVA_UOM.
        endif.

***     Set Handling Unit Weight
        read table LS_RES-T_DIMEN_UNIT assigning <S_DIMEN>
                                       with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT.
        if SY-SUBRC ne 0.
          append initial line to LS_RES-T_DIMEN_UNIT assigning <S_DIMEN>.
          move ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT to <S_DIMEN>-DIMEN.
        endif.
        if SY-SUBRC = 0.
***       Get Ingoing Weight in Handling Unit Unit.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_DIMEN_IN_W-DIMVA
                                                             IF_UOM_IN    = LS_DIMEN_IN_W-DIMVA_UOM
                                                             IF_UOM_OUT   = <S_DIMEN>-DIMVA_UOM
                                                   importing EF_VALUE_OUT = <S_DIMEN>-DIMVA
                                                             EF_UOM_OUT   = <S_DIMEN>-DIMVA_UOM ).


***       Multiply Ingoing Weight with PC/HU
          <S_DIMEN>-DIMVA = <S_DIMEN>-DIMVA * LS_RES-PCPST * LS_RES-STPHU.
        endif.

***--------------------------------------------------------------------------------------
        if ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER is not initial.
***       Get Number of Pallets
          ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_CUBED_CONTAINER( exporting IT_UNIT_DIMEN = LS_RES-T_DIMEN_UNIT
                                                                         IT_CONT_LIMIT = LS_RES-T_LIMIT_TRUCK
                                                                         IT_CONT_DIMEN = LS_RES-T_DIMEN_TRUCK
                                                                         IS_COMOD      = ME->S_COMOD
                                                               importing EF_NUNIT      = LS_RES-HUPTR
                                                                         ET_CONT_DIMEN = LS_RES-T_DIMEN_TRUCK ).

***       Set Truck Layer
          read table LS_RES-T_DIMEN_TRUCK assigning <S_DIMEN>
                                          with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LAYERS.
          if SY-SUBRC ne 0.
            append initial line to LS_RES-T_DIMEN_TRUCK assigning <S_DIMEN>.
            move ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LAYERS to <S_DIMEN>-DIMEN.
          endif.
          if SY-SUBRC = 0.
            move LS_OPTI_STA-LAPTR to <S_DIMEN>-DIMVA.
          endif.

***       Set Truck Height
          read table LS_RES-T_DIMEN_TRUCK assigning <S_DIMEN>
                                          with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT.
          if SY-SUBRC ne 0.
            append initial line to LS_RES-T_DIMEN_TRUCK assigning <S_DIMEN>.
            move ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT to <S_DIMEN>-DIMEN.
          endif.
          if SY-SUBRC = 0.
            move LS_OPTI_STA-S_DIMEN_H_TRUCK-DIMVA     to <S_DIMEN>-DIMVA.
            move LS_OPTI_STA-S_DIMEN_H_TRUCK-DIMVA_UOM to <S_DIMEN>-DIMVA_UOM.
          endif.
        endif.

***--------------------------------------------------------------------------------------
***     Calculate the result
        LS_RES-PCPHU = LS_RES-PCPST * LS_RES-STPHU.
        if LS_RES-LAPTR is not initial.
          LS_RES-HUPLA = LS_RES-HUPTR / LS_RES-LAPTR.
        endif.
        LS_RES-PCPTR = LS_RES-PCPHU * LS_RES-HUPTR.

***     Calculate Weights
        ME->CALC_WEIGHTS( exporting IS_OPTI_STA = LS_OPTI_STA
                          changing  CS_RES      = LS_RES ).

        append LS_RES to ME->T_RES.
      endloop.
    endloop.

*** Only those where at least one HU fits on per Layer
    if ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER is not initial.
      delete ME->T_RES where HUPLA is initial.
    endif.

*** to Calculate right..
    LF_PCING = ME->S_TBQTY_IN-TBQTY.

***--------------------------------------------------------------------------------------
***--------------------------------------------------------------------------------------
*** Finalize Result
    loop at ME->T_RES assigning <S_RES>.

***   Sort Dimensions and Limits of Handling Unit
      ME->R_DFLT_SHIPU->R_CUST_SHIPU->SORT_SHUTY_DIMEN( exporting IF_SHUTY = ME->F_SHUTY_UNIT
                                                        changing  CT_DIMEN = <S_RES>-T_DIMEN_UNIT ).
      ME->R_DFLT_SHIPU->R_CUST_SHIPU->SORT_SHUTY_LIMIT( exporting IF_SHUTY = ME->F_SHUTY_UNIT
                                                        changing  CT_LIMIT = <S_RES>-T_LIMIT_UNIT ).

***   Sort Dimensions and Limits of Truck
      if ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER is not initial.
        ME->R_DFLT_SHIPU->R_CUST_SHIPU->SORT_SHUTY_DIMEN( exporting IF_SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER
                                                          changing  CT_DIMEN = <S_RES>-T_DIMEN_TRUCK ).
        ME->R_DFLT_SHIPU->R_CUST_SHIPU->SORT_SHUTY_LIMIT( exporting IF_SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER
                                                          changing  CT_LIMIT = <S_RES>-T_LIMIT_TRUCK ).
      endif.

***--------------------------------------------------------------------------------------
***   Calc Units per Order
      ME->CALC_UPORD( changing CS_RES = <S_RES> ).

      if ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER is not initial.
***     Calc Trucks per Order
        ME->CALC_TPORD( changing CS_RES = <S_RES> ).

***     Calc Truck Utilization % (HU)
        ME->CALC_TRUHU( changing CS_RES = <S_RES> ).

***     Calc Order Truck Utilization %
        ME->CALC_OTRUT( changing CS_RES = <S_RES> ).
      endif.

***   Set FG per Stack, HU and Truck
      <S_RES>-FGPST = <S_RES>-PCPST * LF_PCING.
      <S_RES>-FGPHU = <S_RES>-PCPHU * LF_PCING.
      <S_RES>-FGPTR = <S_RES>-PCPTR * LF_PCING.

      add 1 to ME->F_COPTI.
      move ME->F_COPTI to <S_RES>-COPTI.

***--------------------------------------------------------------------------------------
***   Add Message Object for Result
      create object <S_RES>-R_MSG.

***   Get Preference Number
      ME->GET_NPREF( changing CS_RES = <S_RES> ).

***   Do Dimension Check of Handling Unit and Truck
      ME->DO_CHECKS( changing CS_RES = <S_RES> ).

    endloop.

***--------------------------------------------------------------------------------------
***--------------------------------------------------------------------------------------
*** Get Number of Green/Yellow/Red ones
    loop at ME->T_RES into LS_RES.
      check LS_RES-R_MSG is bound.
      if LS_RES-R_MSG->T_MSG is initial.
        add 1 to ME->F_COPTI_G.
      else.
        read table LS_RES-R_MSG->T_MSG with key MSGTY = 'E'
                                       transporting no fields.
        if SY-SUBRC = 0.
          add 1 to ME->F_COPTI_R.
          continue.
        endif.
        read table LS_RES-R_MSG->T_MSG with key MSGTY = 'W'
                                       transporting no fields.
        if SY-SUBRC = 0.
          add 1 to ME->F_COPTI_Y.
          continue.
        endif.
      endif.
    endloop.

  endmethod.
method EXTRACT_DIMEN_UNIT_PACKMAT.

  data: LS_SHIPUNIT type ZVCXI_XCSU_S_PALOP_SHIPUNIT,
        LS_PACKMAT  type ZVCXI_XCSU_S_PALOP_PACKMAT,
        LS_EFFCT    type ZVCXI_XCSU_S_EFFCT.

*** Save Packaging Material Height
  read table ME->T_SHIPUNIT into LS_SHIPUNIT
                            with key SHUTY = ME->F_SHUTY_UNIT.

  loop at LS_SHIPUNIT-T_PACKMAT into LS_PACKMAT
                                where PMATY ne ME->F_PMATY_PALLET.
*** Get Height
    clear: LS_EFFCT.
    read table LS_PACKMAT-T_EFFCT into LS_EFFCT
                                  with key EFFCT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_EFFCT_ADD
                                           DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT.
    if SY-SUBRC = 0.
      if ME->S_DIMEN_H_PACKMAT is initial.
        ME->S_DIMEN_H_PACKMAT-DIMVA     = LS_EFFCT-DIMVA.
        ME->S_DIMEN_H_PACKMAT-DIMVA_UOM = LS_EFFCT-DIMVA_UOM.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_DIMEN_H_PACKMAT-DIMVA
                                                            IF_CALCV_UOM_1 = ME->S_DIMEN_H_PACKMAT-DIMVA_UOM
                                                            IF_CALCV_2     = LS_EFFCT-DIMVA
                                                            IF_CALCV_UOM_2 = LS_EFFCT-DIMVA_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = ME->S_DIMEN_H_PACKMAT-DIMVA_UOM
                                                  importing EF_CALCV       = ME->S_DIMEN_H_PACKMAT-DIMVA
                                                            EF_CALCV_UOM   = ME->S_DIMEN_H_PACKMAT-DIMVA_UOM ).
      endif.
    endif.
*** Get Weight
    clear: LS_EFFCT.
    read table LS_PACKMAT-T_EFFCT into LS_EFFCT
                                  with key EFFCT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_EFFCT_ADD
                                           DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT.
    if SY-SUBRC = 0.
      if ME->S_DIMEN_W_PACKMAT is initial.
        ME->S_DIMEN_W_PACKMAT-DIMVA     = LS_EFFCT-DIMVA.
        ME->S_DIMEN_W_PACKMAT-DIMVA_UOM = LS_EFFCT-DIMVA_UOM.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_DIMEN_W_PACKMAT-DIMVA
                                                            IF_CALCV_UOM_1 = ME->S_DIMEN_W_PACKMAT-DIMVA_UOM
                                                            IF_CALCV_2     = LS_EFFCT-DIMVA
                                                            IF_CALCV_UOM_2 = LS_EFFCT-DIMVA_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = ME->S_DIMEN_W_PACKMAT-DIMVA_UOM
                                                  importing EF_CALCV       = ME->S_DIMEN_W_PACKMAT-DIMVA
                                                            EF_CALCV_UOM   = ME->S_DIMEN_W_PACKMAT-DIMVA_UOM ).
      endif.
    endif.
  endloop.

endmethod.
method EXTRACT_LIMIT_UNIT.

  data: LS_SHIPUNIT type ZVCXI_XCSU_S_PALOP_SHIPUNIT.

  read table ME->T_SHIPUNIT into LS_SHIPUNIT
                            with key SHUTY = ME->F_SHUTY_UNIT.

  if SY-SUBRC = 0.
*** Save Limits of Shipping Unit - Unit
    ME->T_LIMIT_UNIT = LS_SHIPUNIT-T_LIMIT.
  else.
*** Pallet Optimization not possible - Limits of Handling Unit not available.
    raise exception type /VCXI/CX_CKX
      exporting
        F_MSGTY = 'E'
        F_MSGID = 'ZVCXI_XCSU'
        F_MSGNO = '602'.
  endif.

endmethod.
  method EXTRACT_SHIPUNIT_STACK.

    data: LS_SHIPUNIT type ZVCXI_XCSU_S_PALOP_SHIPUNIT.


*** Save Shipping Unit of Stack
    read table ME->T_SHIPUNIT into LS_SHIPUNIT
                              with key SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_STACK.
    if SY-SUBRC = 0.
      ME->F_SHUNT_STACK = LS_SHIPUNIT-SHUNT.
    endif.

  endmethod.
method GET_CUST_MATNR_PALLET.

  clear RR_CUST_PACKMAT.

*** Catch Error while Material Customizing Instanziation
  try.

***   Load the Customizing
      RR_CUST_PACKMAT = ZCL_VCXI_XCSU_CUST_PACKMAT=>GET_INSTANCE_XCSU_PACKMAT( IF_MATNR = IF_PPMAT
                                                                               IF_WERKS = ME->R_DFLT_SHIPU->F_WERKS
                                                                               IF_DATE  = SY-DATUM ).

    catch /VCXI/CX_CKX.
***   It is not needed to handle Exception
      exit.
  endtry.

endmethod.
method GET_DESCR_FOR_DIMEN.

  RF_DESCR = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_DESCR_FOR_DIMEN( IF_DIMEN = IF_DIMEN ).

endmethod.
method GET_DESCR_FOR_LIMIT.

  RF_DESCR = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_DESCR_FOR_LIMIT( IF_LIMIT = IF_LIMIT ).

endmethod.
method GET_NPREF.

  data: LS_TRPRE type ZVCXI_XCS_TD221,
        LS_PMPRE type ZVCXI_XCS_TD222.


  if ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER is not initial.
*** Get Truck Preference Number
    read table ME->T_TRPRE into LS_TRPRE
                           with key TTRUC = CS_RES-TTRUC
                                    WERKS = ME->R_DFLT_SHIPU->F_WERKS.
    if SY-SUBRC ne 0.
      read table ME->T_TRPRE into LS_TRPRE
                             with key TTRUC = CS_RES-TTRUC
                                      WERKS = SPACE.
    endif.
  endif.

*** Get Packaging Material Preference Number
  read table ME->T_PMPRE into LS_PMPRE
                         with key PPMAT = CS_RES-PPMAT
                                  WERKS = ME->R_DFLT_SHIPU->F_WERKS.
  if SY-SUBRC ne 0.
    read table ME->T_PMPRE into LS_PMPRE
                           with key PPMAT = CS_RES-PPMAT
                                    WERKS = SPACE.
  endif.

*** Return Preference Number
  CS_RES-TRPRE = LS_TRPRE-NPREF.
  CS_RES-PMPRE = LS_PMPRE-NPREF.

*** Add Message if Preferences are missing
  if ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER is not initial and
     CS_RES-TRPRE is initial.
*** No Truck Type Prefrence is defined.
    CS_RES-R_MSG->ADD_MESSAGE( IF_MSGTY = 'W'
                               IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGNO = '630' ).
  endif.
  if CS_RES-PMPRE is initial.
*** No Pallet Material Prefrence is defined.
    CS_RES-R_MSG->ADD_MESSAGE( IF_MSGTY = 'W'
                               IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGNO = '631' ).

  endif.

endmethod.
  method GET_OPTI_STACK.

    data: LF_NOPAL        type         ZVCXI_XCSU_NOPAL.
    data: LS_PMATN_EFFCT  type line of ZVCXI_XCSU_TT_PMATN_EFFCT,
          LS_PMATY_EFFCT  type line of ZVCXI_XCSU_TT_PMATY_EFFCT,
          LS_EFFCT_PALLET type         ZVCXI_XCSU_S_EFFCT.
    data: LT_PMATN_EFFCT  type         ZVCXI_XCSU_TT_PMATN_EFFCT,
          LT_PMATY_EFFCT  type         ZVCXI_XCSU_TT_PMATY_EFFCT,
          LT_EFFCT_PALLET type         ZVCXI_XCSU_TT_EFFCT.
    field-symbols: <S_OPTI_STA>    type         YS_OPTI_STA,
                   <S_PMATN_EFFCT> type line of ZVCXI_XCSU_TT_PMATN_EFFCT.


    append value #( TTRUC           = IF_TTRUC
                    PPMAT           = IF_PPMAT
                    PPATT           = IF_PPATT
                    SPATT           = IF_SPATT
                    S_LIMIT_H_UNIT  = IS_LIMIT_H_UNIT-S_DIMVA      "Height Limit for Unit
                    S_LIMIT_H_TRUCK = IS_LIMIT_H_TRUCK-S_DIMVA     "Height Limit for Truck
                    S_LIMIT_L_TRUCK = IS_LIMIT_L_TRUCK-S_DIMVA     "Layer Limit for Truck
                    PCPST           = 1                            "PC per Stack (starting point)
                  ) to CT_OPTI_STA assigning <S_OPTI_STA>.

*** Get Height defined by Footprint
    <S_OPTI_STA>-S_DIMEN_H_UNIT = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_DIMVA_DIMEN( IT_DIMEN = IT_DIMEN_UNIT
                                                                                   IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT ).

*** Ignore Height and Stacking Pattern if Stack should be optimized
    if ME->F_SHUNT_STACK is not initial.
      clear: <S_OPTI_STA>-S_DIMEN_H_UNIT-DIMVA,
             <S_OPTI_STA>-SPATT.
    endif.

*** Get Pallet Effects Height and Weight
    ME->READ_PALL_DIM( exporting IF_PPMAT = IF_PPMAT
                       importing ET_EFFCT = LT_EFFCT_PALLET ).

*** Get Pallet Effects Height and Weight ( only Unit )
    LT_PMATY_EFFCT = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_EFFCT_FOR_PMATY( IF_PMATY = ME->F_PMATY_PALLET ).

    loop at LT_PMATY_EFFCT into LS_PMATY_EFFCT.
      append initial line to LT_PMATN_EFFCT assigning <S_PMATN_EFFCT>.
      move-corresponding LS_PMATY_EFFCT to <S_PMATN_EFFCT>.
      move IF_PPMAT to <S_PMATN_EFFCT>-PMATN.

      read table LT_EFFCT_PALLET into LS_EFFCT_PALLET
                                 with key EFFCT = LS_PMATY_EFFCT-EFFCT
                                          DIMEN = LS_PMATY_EFFCT-DIMEN.
      if SY-SUBRC = 0.
        move LS_EFFCT_PALLET-DIMVA     to <S_PMATN_EFFCT>-EFFVA.
        move LS_EFFCT_PALLET-DIMVA_UOM to <S_PMATN_EFFCT>-EFFVA_UOM.
      endif.
    endloop.

*** Get Packmat Height
    read table LT_PMATN_EFFCT into LS_PMATN_EFFCT
                              with key EFFCT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_EFFCT_ADD
                                       DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT.
    if SY-SUBRC eq 0.
***   Add Other Pallets
      if ME->S_DIMEN_H_PACKMAT is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_DIMEN_H_PACKMAT-DIMVA
                                                            IF_CALCV_UOM_1 = ME->S_DIMEN_H_PACKMAT-DIMVA_UOM
                                                            IF_CALCV_2     = LS_PMATN_EFFCT-EFFVA
                                                            IF_CALCV_UOM_2 = LS_PMATN_EFFCT-EFFVA_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = ME->S_DIMEN_H_PACKMAT-DIMVA_UOM
                                                  importing EF_CALCV       = <S_OPTI_STA>-S_DIMEN_H_PACKMAT-DIMVA
                                                            EF_CALCV_UOM   = <S_OPTI_STA>-S_DIMEN_H_PACKMAT-DIMVA_UOM ).
      else.
        move LS_PMATN_EFFCT-EFFVA     to <S_OPTI_STA>-S_DIMEN_H_PACKMAT-DIMVA.
        move LS_PMATN_EFFCT-EFFVA_UOM to <S_OPTI_STA>-S_DIMEN_H_PACKMAT-DIMVA_UOM.
      endif.
    else.
***   Get Standard Unit of Effect
      read table LT_PMATY_EFFCT into LS_PMATY_EFFCT
                                with key EFFCT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_EFFCT_ADD
                                         DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT.
      if SY-SUBRC = 0.
        case ME->R_DFLT_SHIPU->F_SYSOM.
          when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
            move LS_PMATY_EFFCT-UOMME to <S_OPTI_STA>-S_DIMEN_H_PACKMAT-DIMVA_UOM.
          when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
            move LS_PMATY_EFFCT-UOMIM to <S_OPTI_STA>-S_DIMEN_H_PACKMAT-DIMVA_UOM.
        endcase.
      endif.
    endif.

*** Get Packmat Weight
    read table LT_PMATN_EFFCT into LS_PMATN_EFFCT
                              with key EFFCT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_EFFCT_ADD
                                       DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT.
    if SY-SUBRC eq 0.
***   Get Number of Pallet
      LF_NOPAL = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_NUMBER_PALLETS( IF_CONSC = IF_PPATT ).

***   Multiply
      LS_PMATN_EFFCT-EFFVA = LS_PMATN_EFFCT-EFFVA * LF_NOPAL.

***   Add Other Pallets
      if ME->S_DIMEN_W_PACKMAT is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_DIMEN_W_PACKMAT-DIMVA
                                                            IF_CALCV_UOM_1 = ME->S_DIMEN_W_PACKMAT-DIMVA_UOM
                                                            IF_CALCV_2     = LS_PMATN_EFFCT-EFFVA
                                                            IF_CALCV_UOM_2 = LS_PMATN_EFFCT-EFFVA_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = ME->S_DIMEN_W_PACKMAT-DIMVA_UOM
                                                  importing EF_CALCV       = <S_OPTI_STA>-S_DIMEN_W_PACKMAT-DIMVA
                                                            EF_CALCV_UOM   = <S_OPTI_STA>-S_DIMEN_W_PACKMAT-DIMVA_UOM ).
      else.
        move LS_PMATN_EFFCT-EFFVA     to <S_OPTI_STA>-S_DIMEN_W_PACKMAT-DIMVA.
        move LS_PMATN_EFFCT-EFFVA_UOM to <S_OPTI_STA>-S_DIMEN_W_PACKMAT-DIMVA_UOM.
      endif.
    else.
***   Get Standard Unit of Effect
      read table LT_PMATY_EFFCT into LS_PMATY_EFFCT
                                with key EFFCT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_EFFCT_ADD
                                         DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT.
      if SY-SUBRC = 0.
        case ME->R_DFLT_SHIPU->F_SYSOM.
          when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
            move LS_PMATY_EFFCT-UOMME to <S_OPTI_STA>-S_DIMEN_W_PACKMAT-DIMVA_UOM.
          when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
            move LS_PMATY_EFFCT-UOMIM to <S_OPTI_STA>-S_DIMEN_W_PACKMAT-DIMVA_UOM..
        endcase.
      endif.
    endif.

  endmethod.
  method GET_RESULT.

    data: LF_SETBY type FIELDNAME,
          LF_PARAM type FIELDNAME,
          LF_TMP   type C.
    data: LS_RES  type ZVCXI_XCSU_S_PALOP_RES,
          LS_OPTI type ZVCXI_XCSU_S_PALOP_OPTI.
    field-symbols: <I_RANGE>     type standard table,
                   <S_SHIPUNIT>  type ZVCXI_XCSU_S_PALOP_SHIPUNIT,
                   <S_PACKMAT>   type ZVCXI_XCSU_S_PALOP_PACKMAT,
                   <F_PARAM>     type ANY,
                   <F_PARAM_NEW> type ANY,
                   <F_SETBY>     type ANY.


    check IF_COPTI is not initial.

    read table ME->T_RES into LS_RES with key COPTI = IF_COPTI.

    loop at ME->T_OPTI into LS_OPTI
                       where ISOUR ne ZCL_VCXI_XCSU_DFLT_SHIPU=>C_ISOUR_CPACK.

      clear: LF_PARAM, LF_SETBY.

      if LS_OPTI-FOPTI eq ABAP_FALSE.
        assign LS_OPTI-R_RANGE->* to <I_RANGE>.
        check <I_RANGE> is not initial.
      endif.

***   Prepare Parameter Name and Setby
      split LS_OPTI-IELOP at '_' into LF_TMP LF_PARAM.
      concatenate LF_PARAM C_SETBY into LF_SETBY separated by '_'.

***   Set New Values
      case LS_OPTI-IELOP.
        when C_IELOP_PCPST.
          read table ME->T_SHIPUNIT assigning <S_SHIPUNIT>
                                    with key SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_STACK.
          assign LS_RES-PCPST to <F_PARAM_NEW>.

        when C_IELOP_TUNIT
          or C_IELOP_SPATT
          or C_IELOP_PPMAT
          or C_IELOP_PPATT.
          read table ME->T_SHIPUNIT assigning <S_SHIPUNIT>
                                    with key SHUTY = ME->F_SHUTY_UNIT.

          if LS_OPTI-IELOP eq C_IELOP_PPMAT or
             LS_OPTI-IELOP eq C_IELOP_PPATT.
            read table <S_SHIPUNIT>-T_PACKMAT assigning <S_PACKMAT>
                                              with key PMATY = ME->F_PMATY_PALLET.
          endif.

          case LS_OPTI-IELOP.
            when C_IELOP_PPMAT.
              assign LS_RES-PPMAT to <F_PARAM_NEW>.
            when C_IELOP_PPATT.
              assign LS_RES-PPATT to <F_PARAM_NEW>.
            when C_IELOP_TUNIT.
              assign LS_RES-TUNIT to <F_PARAM_NEW>.
            when C_IELOP_SPATT.
              assign LS_RES-SPATT to <F_PARAM_NEW>.
          endcase.

        when C_IELOP_TTRUC.
          read table ME->T_SHIPUNIT assigning <S_SHIPUNIT>
                                    with key SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER.
          assign LS_RES-TTRUC to <F_PARAM_NEW>.

      endcase.

      check <S_SHIPUNIT> is assigned.

***   Read value
      if <S_PACKMAT> is not assigned.
        assign component LF_PARAM of structure <S_SHIPUNIT> to <F_PARAM>.
        assign component LF_SETBY of structure <S_SHIPUNIT> to <F_SETBY>.
      else.
        assign component LF_PARAM of structure <S_PACKMAT> to <F_PARAM>.
        assign component LF_SETBY of structure <S_PACKMAT> to <F_SETBY>.
      endif.

      <F_PARAM> = <F_PARAM_NEW>.
      <F_SETBY> = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

      unassign: <F_PARAM>, <F_PARAM_NEW>, <F_SETBY>, <S_PACKMAT>, <S_SHIPUNIT>.
    endloop.

    RT_SHIPUNIT = ME->T_SHIPUNIT.

  endmethod.
  method GET_SHIPUNIT_DATA.

    data: LS_DFLT_SHUTY  type         ZVCXI_XCSU_S_DFLT_SHUTY,
          LS_DFLT_LIMIT  type         ZVCXI_XCSU_S_DFLT_LIMIT,
          LS_SHUTY_DIMEN type line of ZVCXI_XCSU_TT_SHUTY_DIMEN,
          LS_SHIPUNIT    type         ZVCXI_XCSU_S_PALOP_SHIPUNIT,
          LS_LIMIT       type         ZVCXI_XCSU_S_LIMIT.
    data: LT_SHUTY_DIMEN    type ZVCXI_XCSU_TT_SHUTY_DIMEN,
          LT_SHUTY_DFLT_DEF type ZVCXI_XCSU_TT_SHUTY_DFLT_DEF.
    field-symbols: <S_SHUTY_DFLT_DEF> type ZVCXI_XCSU_S_SHUTY_DFLT_DEF,
                   <S_LIMIT>          type ZVCXI_XCSU_S_LIMIT,
                   <S_DIMEN>          type ZVCXI_XCSU_S_DIMEN.


    check ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER is not initial.

*** Redetermine defaults
    read table ME->T_SHUTY_DFLT_DEF assigning <S_SHUTY_DFLT_DEF>
                                    with key SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER.

***------------------------------------------------------------------------------------------------
    if IF_SHUNT ne <S_SHUTY_DFLT_DEF>-SHUNT.
***   Load it Temporary
      move ME->T_SHUTY_DFLT_DEF to LT_SHUTY_DFLT_DEF.
      read table LT_SHUTY_DFLT_DEF assigning <S_SHUTY_DFLT_DEF>
                                    with key SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER.
      <S_SHUTY_DFLT_DEF>-SHUNT = IF_SHUNT.
      <S_SHUTY_DFLT_DEF>-SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      ME->R_DFLT_SHIPU->REDET_DFLT( IT_SHUTY_DFLT_DEF = LT_SHUTY_DFLT_DEF ).

***   Get Shipping Unit Truck Limits of Default Customizing
      read table ME->R_DFLT_SHIPU->T_DFLT_SHUTY into LS_DFLT_SHUTY
                                                with key SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER
                                                         SHUNT = IF_SHUNT.
      loop at LS_DFLT_SHUTY-T_DFLT_LIMIT into LS_DFLT_LIMIT.
        append initial line to ET_LIMIT_TRUCK assigning <S_LIMIT>.
        move-corresponding LS_DFLT_LIMIT to <S_LIMIT>.

        if LS_DFLT_LIMIT-DIMEN eq ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT and
           LS_DFLT_LIMIT-LIMIT eq ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX.
          move <S_LIMIT> to ES_LIMIT_H_TRUCK.
        endif.
        if LS_DFLT_LIMIT-DIMEN eq ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LAYERS and
           LS_DFLT_LIMIT-LIMIT eq ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX.
          move <S_LIMIT> to ES_LIMIT_L_TRUCK.
        endif.
      endloop.

***------------------------------------------------------------------------------------------------
    else.
      read table ME->T_SHIPUNIT into LS_SHIPUNIT
                                with key SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER
                                         SHUNT = IF_SHUNT.

***   Get Shipping Unit Truck Limits of Ingoing Shipping Units
      loop at LS_SHIPUNIT-T_LIMIT into LS_LIMIT.
        append initial line to ET_LIMIT_TRUCK assigning <S_LIMIT>.
        move-corresponding LS_LIMIT to <S_LIMIT>.

        if LS_LIMIT-DIMEN eq ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT and
           LS_LIMIT-LIMIT eq ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX.
          move <S_LIMIT> to ES_LIMIT_H_TRUCK.
        endif.
        if LS_LIMIT-DIMEN eq ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LAYERS and
           LS_LIMIT-LIMIT eq ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX.
          move <S_LIMIT> to ES_LIMIT_L_TRUCK.
        endif.
      endloop.

    endif.

***------------------------------------------------------------------------------------------------
*** Get Shipping Unit Truck Dimensions of Default Customizing
    LT_SHUTY_DIMEN = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_DIMEN_FOR_SHUTY( IF_SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER ).
    loop at LT_SHUTY_DIMEN into LS_SHUTY_DIMEN.
      append initial line to ET_DIMEN_TRUCK assigning <S_DIMEN>.
      move-corresponding LS_SHUTY_DIMEN to <S_DIMEN>.
      case ME->R_DFLT_SHIPU->F_SYSOM.
        when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
          move LS_SHUTY_DIMEN-UOMME to <S_DIMEN>-DIMVA_UOM.
        when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
          move LS_SHUTY_DIMEN-UOMIM to <S_DIMEN>-DIMVA_UOM.
      endcase.
    endloop.

  endmethod.
  method GET_SPATT_FOOTPRINT.

    data: LS_DIM_LEN type ZVCXI_XCSU_S_DIMVA,
          LS_DIM_WID type ZVCXI_XCSU_S_DIMVA,
          LS_DIM_HGT type ZVCXI_XCSU_S_DIMVA,
          LS_DIM_OVL type ZVCXI_XCSU_S_DIMVA,
          LS_DIM_OVW type ZVCXI_XCSU_S_DIMVA.


***------------------------------------------------------------------------------------------------
*** Get Dimensions for Unit as customized
    ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_DIMEN_FOR_SHUTY( exporting IF_SHUTY = ME->F_SHUTY_UNIT
                                                                   IF_SYSOM = ME->S_COMOD-MSYST
                                                         importing ET_DIMEN = CS_RES-T_DIMEN_UNIT ).
*** Get Dimensions
    loop at CS_RES-T_DIMEN_UNIT assigning field-symbol(<S_DIMEN>).
      case <S_DIMEN>-DIMEN.
        when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH.
          LS_DIM_LEN = <S_DIMEN>-S_DIMVA.
        when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH.
          LS_DIM_WID = <S_DIMEN>-S_DIMVA.
        when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT.
          LS_DIM_HGT = <S_DIMEN>-S_DIMVA.
        when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_OV_LENGTH.
          LS_DIM_OVL = <S_DIMEN>-S_DIMVA.
        when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_OV_WIDTH.
          LS_DIM_OVW = <S_DIMEN>-S_DIMVA.
      endcase.
    endloop.

***--------------------------------------------------------------------------------------
*** Read Footprint
    ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_PACKP_FOOTPRINT( exporting IF_PACKP      = CS_RES-SPATT
                                                                   IT_PREV_DIMEN = ME->T_DIMEN_IN
                                                                   IF_SHUTY      = ME->F_SHUTY_UNIT
                                                         changing  CS_DIM_LEN    = LS_DIM_LEN
                                                                   CS_DIM_WID    = LS_DIM_WID
                                                                   CS_DIM_HGT    = LS_DIM_HGT ).

*** Determine Overhang
    if IS_PPATT_LEN-DIMVA_UOM is not initial or
       IS_PPATT_WID-DIMVA_UOM is not initial.
      if IS_PPATT_LEN-DIMVA gt IS_PPATT_WID-DIMVA.
        LS_DIM_OVL-DIMVA = LS_DIM_LEN-DIMVA - IS_PPATT_LEN-DIMVA.
        LS_DIM_OVW-DIMVA = LS_DIM_WID-DIMVA - IS_PPATT_WID-DIMVA.
      else.
        LS_DIM_OVL-DIMVA = LS_DIM_LEN-DIMVA - IS_PPATT_WID-DIMVA.
        LS_DIM_OVW-DIMVA = LS_DIM_WID-DIMVA - IS_PPATT_LEN-DIMVA.
      endif.

***   Overhang should not be negative
      LS_DIM_OVL-DIMVA = cond #( when LS_DIM_OVL-DIMVA lt 0 then 0 else LS_DIM_OVL-DIMVA ).
      LS_DIM_OVW-DIMVA = cond #( when LS_DIM_OVW-DIMVA lt 0 then 0 else LS_DIM_OVW-DIMVA ).
    else.
      LS_DIM_OVL-DIMVA = 0.
      LS_DIM_OVW-DIMVA = 0.
    endif.

*** Consider Pallet in Unit Dimensions
    LS_DIM_LEN-DIMVA = cond #( when IS_PPATT_LEN-DIMVA gt LS_DIM_LEN-DIMVA then IS_PPATT_LEN-DIMVA else LS_DIM_LEN-DIMVA ).
    LS_DIM_WID-DIMVA = cond #( when IS_PPATT_WID-DIMVA gt LS_DIM_WID-DIMVA then IS_PPATT_WID-DIMVA else LS_DIM_WID-DIMVA ).

***--------------------------------------------------------------------------------------
    loop at CS_RES-T_DIMEN_UNIT assigning <S_DIMEN>.
      <S_DIMEN>-S_DIMVA = switch #( <S_DIMEN>-DIMEN when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH    then LS_DIM_LEN
                                                    when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH     then LS_DIM_WID
                                                    when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT    then LS_DIM_HGT
*                                                    when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT    then LS_DIM_WGT
                                                    when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_OV_LENGTH then LS_DIM_OVL
                                                    when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_OV_WIDTH  then LS_DIM_OVW ).
    endloop.

  endmethod.
method INIT_OPTI.

  data:          LF_MSGV1          type         SYMSGV.
  data:          LS_OPTI_CUST      type         YS_OPTI_CUST.
  field-symbols: <S_OPTI>          type         ZVCXI_XCSU_S_PALOP_OPTI.

  loop at ME->T_OPTI_CUST into LS_OPTI_CUST.
    append initial line to ME->T_OPTI assigning <S_OPTI>.
*** Set Element ID and Description
    <S_OPTI>-IELOP       = LS_OPTI_CUST-IELOP.
    <S_OPTI>-IELOP_DESCR = LS_OPTI_CUST-DESCR.

*** Create Range Table
    ME->CREATE_RANGE( exporting IF_DATEL = LS_OPTI_CUST-DATEL
                      changing  CR_RANGE = <S_OPTI>-R_RANGE ).

*** Create Value
    create data <S_OPTI>-R_VALUE type (LS_OPTI_CUST-DATEL).


*** Set Value and Source ID
    ME->INIT_VCELE( exporting IF_IELOP     = <S_OPTI>-IELOP
                    changing  CF_VCELE     = <S_OPTI>-VCELE
                              CF_VCELE_UOM = <S_OPTI>-VCELE_UOM
                              CR_VALUE     = <S_OPTI>-R_VALUE
                              CF_ISOUR     = <S_OPTI>-ISOUR ).

*** Set Default Optimization Flag if it is not CPACK or USER
    if <S_OPTI>-ISOUR ne ZCL_VCXI_XCSU_DFLT_SHIPU=>C_ISOUR_CPACK and
       <S_OPTI>-ISOUR ne ZCL_VCXI_XCSU_DFLT_SHIPU=>C_ISOUR_USER.
      <S_OPTI>-FOPTI = LS_OPTI_CUST-FDOPT.
    endif.

  endloop.

endmethod.
  method INIT_PMATY_PALLET.

    data: LS_SHIPUNIT   type ZVCXI_XCSU_S_PALOP_SHIPUNIT,
          LS_EFFCT_CUST type ZVCXI_XCS_TC191.
    data: LT_EFFCT_CUST type ZVCXI_XCSU_TT_PMATY_EFFCT.
    field-symbols: <S_EFFCT>     type ZVCXI_XCSU_S_EFFCT.


*** Read active Packaging Material Type Pallet by Shipping Unit Unit
    read table ME->T_SHIPUNIT into LS_SHIPUNIT
                              with key SHUTY = ME->F_SHUTY_UNIT.

    ME->F_PMATY_PALLET = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_ACT_PMATY_PALLET( IF_SHUNT = LS_SHIPUNIT-SHUNT ).


*** Load Effect Structure from Customizing
    LT_EFFCT_CUST = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_EFFCT_FOR_PMATY( IF_PMATY = ME->F_PMATY_PALLET ).

    if LT_EFFCT_CUST is not initial.

      loop at LT_EFFCT_CUST into LS_EFFCT_CUST.
        append initial line to ME->T_EFFCT_PALLET assigning <S_EFFCT>.
        move-corresponding LS_EFFCT_CUST to <S_EFFCT>.
        case ME->S_COMOD-MSYST.
          when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
            move LS_EFFCT_CUST-UOMME to <S_EFFCT>-DIMVA_UOM.
          when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
            move LS_EFFCT_CUST-UOMIM to <S_EFFCT>-DIMVA_UOM.
        endcase.
      endloop.

    endif.

  endmethod.
method INIT_VCELE.

  data: LF_SETBY     type FIELDNAME,
        LF_PARAM     type FIELDNAME,
        LF_PARAM_UOM type FIELDNAME,
        LF_TMP       type C,
        LF_VCELE_C   type CHAR30,
        LF_ISOUR     type ZVCXI_XCSU_ISOUR.
  data: LS_SHIPUNIT type ZVCXI_XCSU_S_PALOP_SHIPUNIT,
        LS_PACKMAT  type ZVCXI_XCSU_S_PALOP_PACKMAT.
  field-symbols: <F_PARAM>     type ANY,
                 <F_PARAM_UOM> type ANY,
                 <F_SETBY>     type ANY,
                 <F_VALUE>     type ANY.


*** Prepare Parameter Name and Setby
  split IF_IELOP at '_' into LF_TMP LF_PARAM.
  concatenate LF_PARAM C_SETBY into LF_SETBY separated by '_'.
  if IF_IELOP eq C_IELOP_PCPST.
    concatenate LF_PARAM C_UOM into LF_PARAM_UOM separated by '_'.
  endif.

  case IF_IELOP.
    when C_IELOP_PCPST.
      read table ME->T_SHIPUNIT into LS_SHIPUNIT
                                with key SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_STACK.

    when C_IELOP_TUNIT
      or C_IELOP_SPATT
      or C_IELOP_PPMAT
      or C_IELOP_PPATT.
      read table ME->T_SHIPUNIT into LS_SHIPUNIT
                                with key SHUTY = ME->F_SHUTY_UNIT.

      if IF_IELOP eq C_IELOP_PPMAT or
         IF_IELOP eq C_IELOP_PPATT.
        read table LS_SHIPUNIT-T_PACKMAT into LS_PACKMAT
                                         with key PMATY = ME->F_PMATY_PALLET.
      endif.

    when C_IELOP_TTRUC.
      read table ME->T_SHIPUNIT into LS_SHIPUNIT
                                with key SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER.

  endcase.

*** Read value
  if LS_PACKMAT is initial.
    assign component LF_PARAM of structure LS_SHIPUNIT to <F_PARAM>.
    assign component LF_SETBY of structure LS_SHIPUNIT to <F_SETBY>.
    if LF_PARAM_UOM is not initial.
      assign component LF_PARAM_UOM of structure LS_SHIPUNIT to <F_PARAM_UOM>.
    endif.
  else.
    assign component LF_PARAM of structure LS_PACKMAT to <F_PARAM>.
    assign component LF_SETBY of structure LS_PACKMAT to <F_SETBY>.
  endif.

  assign CR_VALUE->* to <F_VALUE>.

*** Return Values
  check <F_PARAM> is assigned and
        <F_VALUE> is assigned.

  <F_VALUE> = <F_PARAM>.

*** Do Conversion for Output Field
  case IF_IELOP.
    when C_IELOP_PCPST.
      check <F_PARAM_UOM> is assigned.
      write <F_PARAM> to LF_VCELE_C unit <F_PARAM_UOM>.
      CF_VCELE     = LF_VCELE_C.
      CF_VCELE_UOM = <F_PARAM_UOM>.

    when C_IELOP_PPMAT.
      call function 'CONVERSION_EXIT_MATN1_OUTPUT'
        exporting
          INPUT  = <F_PARAM>
        importing
          OUTPUT = CF_VCELE.

    when others.
      CF_VCELE = <F_PARAM>.
  endcase.

  check <F_SETBY> is assigned.
  CF_ISOUR = <F_SETBY>.

*** Read detailed source of Customizing if it is CALC
  check CF_ISOUR eq /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.

  LF_ISOUR = ME->READ_ISOUR( IS_SHIPUNIT = LS_SHIPUNIT
                             IS_PACKMAT  = LS_PACKMAT
                             IF_PARAM    = LF_PARAM ).
  if LF_ISOUR is not initial.
    move LF_ISOUR to CF_ISOUR.
  endif.

endmethod.
  method LOAD_CUST.

    data: LS_TC210T type                   ZVCXI_XCS_TC210T.
    data: LT_TC210T type standard table of ZVCXI_XCS_TC210T.
    data: LI_IELOP type range of ZVCXI_XCSU_IELOP.
    field-symbols: <S_OPTI_CUST> type YS_OPTI_CUST.


*** Filter
    if ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER is initial.
      append value #( SIGN = 'E' OPTION = 'EQ' LOW = C_IELOP_TTRUC ) to LI_IELOP.
    endif.
    if ME->F_SHUNT_STACK is initial.
      append value #( SIGN = 'E' OPTION = 'EQ' LOW = C_IELOP_PCPST ) to LI_IELOP.
    endif.

*** Load Optimization Elements
    select *
           from ZVCXI_XCS_TC210
           into corresponding fields of table ME->T_OPTI_CUST
          where IELOP in LI_IELOP.


*** Load Element Description
    select *
           from ZVCXI_XCS_TC210T
           into table LT_TC210T.

    loop at ME->T_OPTI_CUST assigning <S_OPTI_CUST>.
      read table LT_TC210T into LS_TC210T with key IELOP = <S_OPTI_CUST>-IELOP
                                                   LANGU = SY-LANGU.

      if SY-SUBRC ne 0.
        read table LT_TC210T into LS_TC210T with key IELOP = <S_OPTI_CUST>-IELOP
                                                     LANGU = 'E'.
      endif.

***   Save Description
      check SY-SUBRC = 0.
      <S_OPTI_CUST>-DESCR = LS_TC210T-DESCR.

    endloop.

    sort ME->T_OPTI_CUST by SEQUE.

*** Load Preferences
    select *
           from ZVCXI_XCS_TD221
           into table ME->T_TRPRE.

    select *
           from ZVCXI_XCS_TD222
           into table ME->T_PMPRE.

  endmethod.
  method LOAD_OPTIONS.

    data: LS_SHUNT type ZVCXI_XCSU_S_SHUNT,
          LS_OPTI  type ZVCXI_XCSU_S_PALOP_OPTI,
          LS_PPMAT type ZVCXI_XCSU_S_PMATN,
          LS_TTRUC type ZVCXI_XCSU_S_SHUNT.
    data: LT_PACKP_TMP  type ZVCXI_XCSU_TT_PACKP,
          LT_SHUNT_UNIT type ZVCXI_XCSU_TT_SHUNT.
    field-symbols: <I_RANGE> type standard table,
                   <S_RANGE> type ANY,
                   <S_TUNIT> type YS_TUNIT,
                   <F_PCPST> type ZVCXI_XCSU_PRQTY,
                   <F_FIELD> type ANY,
                   <F_VALUE> type ANY.

***------------------------------------------------------------------------------------------------
*** Load all Options
    ET_PPMAT      = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_PMATN_FOR_PMATY( IF_PMATY = ME->F_PMATY_PALLET ).
    ET_PPATT      = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_CONSC_FOR_PMATY( IF_PMATY = ME->F_PMATY_PALLET
                                                                         IF_WERKS = ME->R_DFLT_SHIPU->F_WERKS ).

*** Load all Unit Type Options
    LT_SHUNT_UNIT = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_SHUNT_FOR_SHUTY( IF_SHUTY = ME->F_SHUTY_UNIT ).
    loop at LT_SHUNT_UNIT into LS_SHUNT.
      append value #( TUNIT   = LS_SHUNT-SHUNT
                      DESCR   = LS_SHUNT-DESCR
                      T_SPATT = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_PACKP_FOR_SHUNT( IF_SHUNT = LS_SHUNT-SHUNT
                                                                                     IF_WERKS = ME->R_DFLT_SHIPU->F_WERKS )
                                                                                     ) to ET_TUNIT.
    endloop.

*** Load all Truck Type Options
    if ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER is not initial.
      ET_TTRUC    = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_SHUNT_FOR_SHUTY( IF_SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_CONTAINER ).
    else.
      ET_TTRUC    = value #( ( ) ).  "Initial value to still generate a Optimization Result
    endif.

***------------------------------------------------------------------------------------------------
*** Reduce Options by Optimization Value Settings
    loop at ME->T_OPTI into LS_OPTI.

      if LS_OPTI-FOPTI is initial.
***     Get Range and Current Value
        assign LS_OPTI-R_RANGE->* to <I_RANGE>.
        assign LS_OPTI-R_VALUE->* to <F_VALUE>.

        check <I_RANGE> is assigned and
              <F_VALUE> is assigned.

        case LS_OPTI-IELOP.
          when C_IELOP_PPMAT.
            if <I_RANGE> is not initial.
              delete ET_PPMAT where PMATN not in <I_RANGE>.
            else.
              delete ET_PPMAT where PMATN ne <F_VALUE>.
            endif.

          when C_IELOP_PPATT.
            if <I_RANGE> is not initial.
              delete ET_PPATT where CONSC not in <I_RANGE>.
            else.
              delete ET_PPATT where CONSC ne <F_VALUE>.
            endif.

          when C_IELOP_TUNIT.
            if <I_RANGE> is not initial.
              delete ET_TUNIT where TUNIT not in <I_RANGE>.
            else.
              delete ET_TUNIT where TUNIT ne <F_VALUE>.
            endif.

          when C_IELOP_SPATT.
            if <I_RANGE> is not initial.
              loop at ET_TUNIT assigning <S_TUNIT>.
                delete <S_TUNIT>-T_SPATT where PACKP not in <I_RANGE>.
              endloop.
            else.
              loop at ET_TUNIT assigning <S_TUNIT>.
                delete <S_TUNIT>-T_SPATT where PACKP ne <F_VALUE>.
              endloop.
            endif.

          when C_IELOP_TTRUC.
            if <I_RANGE> is not initial.
              delete ET_TTRUC where SHUNT not in <I_RANGE>.
            else.
              delete ET_TTRUC where SHUNT ne <F_VALUE>.
            endif.

          when C_IELOP_PCPST.
            if <I_RANGE> is not initial.
              loop at <I_RANGE> assigning <S_RANGE>.
                assign component 'LOW' of structure <S_RANGE> to <F_FIELD>.
                append initial line to ET_PCPST assigning <F_PCPST>.
                move <F_FIELD> to <F_PCPST>.
              endloop.
            else.
              append initial line to ET_PCPST assigning <F_PCPST>.
              move <F_VALUE> to <F_PCPST>.
            endif.

        endcase.

      else.
***     Reduce automatic Optimization Values
        case LS_OPTI-IELOP.
          when C_IELOP_PPMAT.
            loop at ET_PPMAT into LS_PPMAT.
***           Get Packaging Material Preference entry
              read table ME->T_PMPRE with key PPMAT = LS_PPMAT-PMATN
                                              WERKS = ME->R_DFLT_SHIPU->F_WERKS
                                     transporting no fields.
              if SY-SUBRC ne 0.
                read table ME->T_PMPRE with key PPMAT = LS_PPMAT-PMATN
                                                WERKS = SPACE
                                       transporting no fields.
              endif.

***           No Entrie -> No Option
              check SY-SUBRC ne 0.
              delete ET_PPMAT.

            endloop.

          when C_IELOP_TTRUC.
            loop at ET_TTRUC into LS_TTRUC.
***           Get Truck Type Preference entry
              read table ME->T_TRPRE with key TTRUC = LS_TTRUC-SHUNT
                                              WERKS = ME->R_DFLT_SHIPU->F_WERKS
                                     transporting no fields.
              if SY-SUBRC ne 0.
                read table ME->T_TRPRE with key TTRUC = LS_TTRUC-SHUNT
                                                WERKS = SPACE
                                       transporting no fields.
              endif.

***           No Entrie -> No Option
              check SY-SUBRC ne 0.
              delete ET_TTRUC.

            endloop.
        endcase.
      endif.
    endloop.

  endmethod.
  method OPTIMIZE_STACK.

    data: LF_TRUCK_MAX_LH type ZVCXI_XCSU_DIMVA,
          LF_LAPTR        type F,
          LF_PRQTY        type ZVCXI_XCSU_PRQTY,
          LF_PCPST        type ZVCXI_XCSU_PRQTY.
    data: LS_OPTI_STA type YS_OPTI_STA,
          LS_DIMHE    type ZVCXI_XCSU_S_DIMVA.
    data: LT_OPTI_STA_TMP    type YT_OPTI_STA.
    field-symbols: <S_OPTI_STA>       type YS_OPTI_STA.


    move CT_OPTI_STA to LT_OPTI_STA_TMP.
    clear: CT_OPTI_STA.
    delete adjacent duplicates from LT_OPTI_STA_TMP comparing TTRUC PPMAT PPATT SPATT.

*** -------------------------------------------------------------------------------------
*** Get Ingoing Height
    LS_DIMHE = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_DIMVA_DIMEN( IT_DIMEN = ME->T_DIMEN_IN
                                                                IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT ).

    if IT_PCPST is initial.
*** -------------------------------------------------------------------------------------
*** -------------------------------------------------------------------------------------
***   First - Maximal Pallet Height
      loop at LT_OPTI_STA_TMP into LS_OPTI_STA.
        clear: LF_TRUCK_MAX_LH, LF_LAPTR.

        if LS_OPTI_STA-S_LIMIT_H_TRUCK-DIMVA_UOM is not initial and
           ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_OPTI_STA-S_LIMIT_H_TRUCK-DIMVA
                                                        IF_CALCV_UOM_1 = LS_OPTI_STA-S_LIMIT_H_TRUCK-DIMVA_UOM
                                                        IF_CALCV_2     = LS_OPTI_STA-S_LIMIT_H_UNIT-DIMVA
                                                        IF_CALCV_UOM_2 = LS_OPTI_STA-S_LIMIT_H_UNIT-DIMVA_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LT ) eq ABAP_TRUE.
***       Get Truck Height Limit as Maximal Pallet Height
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_OPTI_STA-S_LIMIT_H_TRUCK-DIMVA
                                                             IF_UOM_IN    = LS_OPTI_STA-S_LIMIT_H_TRUCK-DIMVA_UOM
                                                             IF_UOM_OUT   = LS_OPTI_STA-S_LIMIT_H_UNIT-DIMVA_UOM
                                                   importing EF_VALUE_OUT = LS_OPTI_STA-S_LIMIT_H_UNIT-DIMVA
                                                             EF_UOM_OUT   = LS_OPTI_STA-S_LIMIT_H_UNIT-DIMVA_UOM ).
        endif.

***     Append to Result
        append LS_OPTI_STA to CT_OPTI_STA.
      endloop.


***   Second - Maximal Number of Layers
      loop at LT_OPTI_STA_TMP into LS_OPTI_STA.
        clear: LF_TRUCK_MAX_LH, LF_LAPTR.

        LF_TRUCK_MAX_LH = LS_OPTI_STA-S_LIMIT_H_TRUCK-DIMVA / LS_OPTI_STA-S_LIMIT_L_TRUCK-DIMVA.
        if LS_OPTI_STA-S_LIMIT_H_TRUCK-DIMVA_UOM is not initial and
           ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LF_TRUCK_MAX_LH
                                                        IF_CALCV_UOM_1 = LS_OPTI_STA-S_LIMIT_H_TRUCK-DIMVA_UOM
                                                        IF_CALCV_2     = LS_OPTI_STA-S_LIMIT_H_UNIT-DIMVA
                                                        IF_CALCV_UOM_2 = LS_OPTI_STA-S_LIMIT_H_UNIT-DIMVA_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LT ) eq ABAP_TRUE.
***       Get Max Truck Height per Layer as Maximal Pallet Height
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LF_TRUCK_MAX_LH
                                                             IF_UOM_IN    = LS_OPTI_STA-S_LIMIT_H_TRUCK-DIMVA_UOM
                                                             IF_UOM_OUT   = LS_OPTI_STA-S_LIMIT_H_UNIT-DIMVA_UOM
                                                   importing EF_VALUE_OUT = LS_OPTI_STA-S_LIMIT_H_UNIT-DIMVA
                                                             EF_UOM_OUT   = LS_OPTI_STA-S_LIMIT_H_UNIT-DIMVA_UOM ).
        endif.

***     Append to Result
        append LS_OPTI_STA to CT_OPTI_STA.
      endloop.

*** -------------------------------------------------------------------------------------
***   Do Final Calculations if Height is not defined by Stacking Pattern (e.g. Roll)
      loop at CT_OPTI_STA assigning <S_OPTI_STA> where S_DIMEN_H_UNIT-DIMVA is initial.

***     Calcualte Stacks
        if LS_DIMHE-DIMVA is not initial.
          <S_OPTI_STA>-PCPST = FLOOR( ( <S_OPTI_STA>-S_LIMIT_H_UNIT-DIMVA - <S_OPTI_STA>-S_DIMEN_H_PACKMAT-DIMVA )
                                      / LS_DIMHE-DIMVA ).
        endif.

***     Do Rounding
        if <S_OPTI_STA>-PCPST is not initial.
          clear: LF_PRQTY.
          move <S_OPTI_STA>-PCPST to LF_PRQTY.
          ZCL_VCXI_XCSU_CUST_SHIPU=>ROUND_QTY( exporting IF_SHUTY = ME->R_DFLT_SHIPU->R_CUST_SHIPU->F_SHUTY_STACK
                                                         IF_SHUNT = ME->F_SHUNT_STACK
                                                         IF_WERKS = ME->R_DFLT_SHIPU->F_WERKS
                                               changing  CF_QTY   = LF_PRQTY ).
          move LF_PRQTY to <S_OPTI_STA>-PCPST.
        endif.

***     Calculate Stack Height
        <S_OPTI_STA>-S_DIMEN_H_UNIT-DIMVA = <S_OPTI_STA>-PCPST * LS_DIMHE-DIMVA.

      endloop.

    else.

*** -------------------------------------------------------------------------------------
*** -------------------------------------------------------------------------------------
***   Get Fixed PC/Stack
      loop at LT_OPTI_STA_TMP into LS_OPTI_STA.
        loop at IT_PCPST into LF_PCPST.
          append corresponding #( LS_OPTI_STA ) to CT_OPTI_STA assigning <S_OPTI_STA>.

***       Set Fixed PC/Stack
          move LF_PCPST to <S_OPTI_STA>-PCPST.

***       Calculate Stack Height
          <S_OPTI_STA>-S_DIMEN_H_UNIT-DIMVA     = <S_OPTI_STA>-PCPST * LS_DIMHE-DIMVA.
          <S_OPTI_STA>-S_DIMEN_H_UNIT-DIMVA_UOM = <S_OPTI_STA>-S_LIMIT_H_UNIT-DIMVA_UOM.
        endloop.
      endloop.
    endif.


***-------------------------------------------------------------------------------------
*** Consider Packaging Material in Unit Height
    loop at CT_OPTI_STA assigning <S_OPTI_STA>.
      <S_OPTI_STA>-S_DIMEN_H_UNIT-DIMVA += <S_OPTI_STA>-S_DIMEN_H_PACKMAT-DIMVA.
    endloop.

*** Calculate Truck
    loop at CT_OPTI_STA assigning <S_OPTI_STA>
                        where S_LIMIT_H_TRUCK-DIMVA is not initial.
***   Calculate Layer
      if <S_OPTI_STA>-S_DIMEN_H_UNIT-DIMVA is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_OPTI_STA>-S_LIMIT_H_TRUCK-DIMVA
                                                            IF_CALCV_UOM_1 = <S_OPTI_STA>-S_LIMIT_H_TRUCK-DIMVA_UOM
                                                            IF_CALCV_2     = <S_OPTI_STA>-S_DIMEN_H_UNIT-DIMVA
                                                            IF_CALCV_UOM_2 = <S_OPTI_STA>-S_DIMEN_H_UNIT-DIMVA_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                  importing EF_CALCV       = LF_LAPTR ).
      endif.

      if LF_LAPTR gt <S_OPTI_STA>-S_LIMIT_L_TRUCK-DIMVA.
        LF_LAPTR = LS_OPTI_STA-S_LIMIT_L_TRUCK-DIMVA.
      endif.
      <S_OPTI_STA>-LAPTR = FLOOR( LF_LAPTR ).

***   Calculate Truck Height
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = <S_OPTI_STA>-S_DIMEN_H_UNIT-DIMVA * <S_OPTI_STA>-LAPTR
                                                         IF_UOM_IN    = <S_OPTI_STA>-S_DIMEN_H_UNIT-DIMVA_UOM
                                                         IF_UOM_OUT   = <S_OPTI_STA>-S_LIMIT_H_TRUCK-DIMVA_UOM
                                               importing EF_VALUE_OUT = <S_OPTI_STA>-S_DIMEN_H_TRUCK-DIMVA
                                                         EF_UOM_OUT   = <S_OPTI_STA>-S_DIMEN_H_TRUCK-DIMVA_UOM ).
    endloop.

*** Remove duplicates
    sort CT_OPTI_STA.
    delete adjacent duplicates from CT_OPTI_STA comparing all fields.

  endmethod.
method READ_ISOUR.

  data: LS_DFLT_SHUTY type ZVCXI_XCSU_S_DFLT_SHUTY,
        LS_DFLT_PMATY type ZVCXI_XCSU_S_DFLT_PMATY,
        LS_VASRC      type ZVCXI_XCSU_S_VASRC.

*** Get right Shipping Unit of Default customizing
  read table ME->R_DFLT_SHIPU->T_DFLT_SHUTY into LS_DFLT_SHUTY
                                            with key SHUTY = IS_SHIPUNIT-SHUTY
                                                     SHUNT = IS_SHIPUNIT-SHUNT.

  check SY-SUBRC = 0.
  if IS_PACKMAT is not initial.
    read table LS_DFLT_SHUTY-T_DFLT_PMATY into LS_DFLT_PMATY
                                          with key PMATY = IS_PACKMAT-PMATY
                                                   PMATN = IS_PACKMAT-PMATN.

*** Read Value Source
    read table LS_DFLT_PMATY-T_VASRC into LS_VASRC
                                     with key IVALU = IF_PARAM.
  else.
*** Read Value Source
    read table LS_DFLT_SHUTY-T_VASRC into LS_VASRC
                                     with key IVALU = IF_PARAM.

  endif.

  check SY-SUBRC = 0.
  RF_ISOUR = LS_VASRC-ISOUR.

endmethod.
method READ_PALL_DIM.

  data:          LS_PMATN_EFFCT  type line of ZVCXI_XCSU_TT_PMATN_EFFCT,
                 LS_CALCV        type         ZVCXI_XCS_S_CALCV,
                 LS_EFFCT        type         ZVCXI_XCSU_S_EFFCT.
  data:          LT_PMATN_EFFCT  type         ZVCXI_XCSU_TT_PMATN_EFFCT.
  data:          LR_CUST_PACKMAT type ref to  ZCL_VCXI_XCSU_CUST_PACKMAT.
  field-symbols: <S_EFFCT>       type         ZVCXI_XCSU_S_EFFCT.

  clear: ET_EFFCT.
  move ME->T_EFFCT_PALLET to ET_EFFCT.

*** ---------------------------------------------------------------------
*** Load Effects from Material Master
  LR_CUST_PACKMAT = ME->GET_CUST_MATNR_PALLET( IF_PPMAT = IF_PPMAT ).

  if LR_CUST_PACKMAT is bound.
*** Set Dimension parameters
    loop at ET_EFFCT assigning <S_EFFCT>.
      case <S_EFFCT>-DIMEN.
        when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH.
          move LR_CUST_PACKMAT->S_PACKMAT_DIM-LAENG to LS_CALCV-CALCV.
          move LR_CUST_PACKMAT->S_PACKMAT_DIM-MEABM to LS_CALCV-CALCV_UOM.

        when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH.
          move LR_CUST_PACKMAT->S_PACKMAT_DIM-BREIT to LS_CALCV-CALCV.
          move LR_CUST_PACKMAT->S_PACKMAT_DIM-MEABM to LS_CALCV-CALCV_UOM.

        when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT.
          move LR_CUST_PACKMAT->S_PACKMAT_DIM-HOEHE to LS_CALCV-CALCV.
          move LR_CUST_PACKMAT->S_PACKMAT_DIM-MEABM to LS_CALCV-CALCV_UOM.

        when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT.
          move LR_CUST_PACKMAT->S_PACKMAT_DIM-BRGEW to LS_CALCV-CALCV.
          move LR_CUST_PACKMAT->S_PACKMAT_DIM-GEWEI to LS_CALCV-CALCV_UOM.
      endcase.

      ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = <S_EFFCT>-DIMVA_UOM
                                               changing  CS_CALCV = LS_CALCV ).
      move LS_CALCV-CALCV     to <S_EFFCT>-DIMVA.
      move LS_CALCV-CALCV_UOM to <S_EFFCT>-DIMVA_UOM.

    endloop.
  endif.

*** ---------------------------------------------------------------------
*** Load Effects from Customizing
  LT_PMATN_EFFCT = ME->R_DFLT_SHIPU->R_CUST_SHIPU->GET_EFFCT_FOR_PMATN( IF_SYSOM = ME->R_DFLT_SHIPU->F_SYSOM
                                                                        IF_PMATN = IF_PPMAT
                                                                        IF_PMATY = ME->F_PMATY_PALLET ).

*** Set default Dimensions to Dimension parameters
  loop at ET_EFFCT assigning <S_EFFCT>.
    read table LT_PMATN_EFFCT into LS_PMATN_EFFCT with key DIMEN = <S_EFFCT>-DIMEN
                                                           EFFCT = <S_EFFCT>-EFFCT.

    if SY-SUBRC eq 0 and
       LS_PMATN_EFFCT-EFFVA is not initial.
      move LS_PMATN_EFFCT-EFFVA     to LS_CALCV-CALCV.
      move LS_PMATN_EFFCT-EFFVA_UOM to LS_CALCV-CALCV_UOM.
      ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = <S_EFFCT>-DIMVA_UOM
                                               changing  CS_CALCV = LS_CALCV ).
      move LS_CALCV-CALCV     to <S_EFFCT>-DIMVA.
      move LS_CALCV-CALCV_UOM to <S_EFFCT>-DIMVA_UOM.
    endif.
  endloop.

*** ---------------------------------------------------------------------
*** Get Length
  read table ET_EFFCT into LS_EFFCT
                      with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH.
  if SY-SUBRC eq 0.
    move-corresponding LS_EFFCT to ES_PPMAT_LEN.
  endif.

*** Get Width
  read table ET_EFFCT into LS_EFFCT
                      with key DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH.
  if SY-SUBRC eq 0.
    move-corresponding LS_EFFCT to ES_PPMAT_WID.
  endif.


endmethod.
method UPDATE_OPTI.

  field-symbols: <S_OPTI>             type          ZVCXI_XCSU_S_PALOP_OPTI,
                 <I_RANGE>            type standard table.

  read table ME->T_OPTI assigning <S_OPTI>
                        with key IELOP = IS_OPTI-IELOP.

*** Update Range and Optimizaiton Flag
  check SY-SUBRC = 0.
  <S_OPTI>-R_RANGE = IS_OPTI-R_RANGE.
  <S_OPTI>-FOPTI   = IS_OPTI-FOPTI.

*** Clear Range if Optimization flag is set
  if <S_OPTI>-FOPTI eq ABAP_TRUE.
    check <S_OPTI>-R_RANGE is bound.
    assign <S_OPTI>-R_RANGE->* to <I_RANGE>.
    free <I_RANGE>.
  endif.

endmethod.
