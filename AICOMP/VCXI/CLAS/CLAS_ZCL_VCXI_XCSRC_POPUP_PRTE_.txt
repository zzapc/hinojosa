
class ZCL_VCXI_XCSRC_POPUP_PRTE definition
  public
  create protected .

public section.

  data F_CURSOR type SCRFNAME .
  data S_PRTE_VIS type ZVCXI_XCSRC_S_PRTE_VIS read-only .

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_PRTE_VIS
    importing
      !IS_PRTE_VIS type ZVCXI_XCSRC_S_PRTE_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods MODIFY_SCREEN
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IR_PREDEF_PRTE type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_ADD type SYUCOMM value 'ADD' ##NO_TEXT.
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_CD type SYUCOMM value 'CD' ##NO_TEXT.
  constants C_UC_DEL type SYUCOMM value 'DEL' ##NO_TEXT.
  constants C_UC_DELETE type SYUCOMM value 'DELETE' ##NO_TEXT.
  constants C_UC_OKAY type SYUCOMM value 'OKAY' ##NO_TEXT.
  data F_REFRESH_REQ type ABAP_BOOL .
  data F_TABNAME type TABNAME .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_DATA type ref to DATA .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data R_PREDEF_PRTE type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE .
  data T_FCAT type LVC_T_FCAT .
  data T_PREDEF_ARBPL type ZVCXI_XCSRC_TT_PREDEF_ARBPL .

  methods BUILD_GRID_DATA
    raising
      /VCXI/CX_CKX .
  methods CHECK_INPUT_ARBPL
    importing
      !IF_ARBPL type ARBPL
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods CHECK_INPUT_WERKS
    importing
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_PREDEF_PRTE type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE
      !IF_TABNAME type TABNAME default 'ZVCXI_XCSRC_S_PRTE_GRID'
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods FORWARD_COMBO_DATA_CHANGES
    importing
      !IT_GOOD_CELLS type LVC_T_MODI
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_ROWS
    exporting
      !ET_ROW type LVC_T_ROW
      !ES_LAST_ROW type LVC_S_ROW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DATA_CHANGED
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods HANDLE_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_UC_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OKAY
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods IS_COMBO_POSSIBLE
    importing
      !IF_TABIX type I
    returning
      value(RF_POSSIBLE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_OPSEQ_POSSIBLE
    importing
      !IF_TABIX type I
    returning
      value(RF_POSSIBLE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods REFRESH_FIELDCAT
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
  methods REFRESH_STYLE
    raising
      /VCXI/CX_CKX .
  methods REGISTER_F4_FIELDS
    raising
      /VCXI/CX_CKX .
  methods SET_PF_STATUS
    raising
      /VCXI/CX_CKX .
  methods UPDATE_PREDEF_ARBPL
    raising
      /VCXI/CX_CKX .
private section.

  data S_COL type LVC_S_COL .
  data S_ROW type LVC_S_ROW .
endclass. "ZCL_VCXI_XCSRC_POPUP_PRTE definition
class ZCL_VCXI_XCSRC_POPUP_PRTE implementation.
method BUILD_GRID_DATA.

  data:          LF_COMBO             type          ZVCXI_XCSR_COMBO,
                 LF_GUIDM             type          /VCXI/CKXM_GUIDM.
  data:          LS_PREDEF_ARBPL      type          ZVCXI_XCSRC_S_PREDEF_ARBPL,
                 LS_PREDEF_PSEQ       type          ZVCXI_XCSRC_S_PREDEF_PSEQ,
                 LS_PRTE_GRID         type          ZVCXI_XCSRC_S_PRTE_GRID,
                 LS_MSG               type          /VCXI/CKXM_S_MSG.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check ME->R_PREDEF_PRTE is bound.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

  free <T_DATA>.
  loop at ME->T_PREDEF_ARBPL into LS_PREDEF_ARBPL.
    loop at LS_PREDEF_ARBPL-T_PREDEF_PSEQ into LS_PREDEF_PSEQ.
      if SY-TABIX eq 1.
        move ABAP_FALSE to LF_COMBO.
      else.
        move ABAP_TRUE  to LF_COMBO.
      endif.

***   Add Entry
      append initial line to <T_DATA> assigning <S_DATA>.

***------------------------------------------------------------------------------------------------
***   Fill Data
      clear: LS_PRTE_GRID.

***   Work Center Data
      if LS_PREDEF_ARBPL-R_ARBPL is bound.
        move LS_PREDEF_ARBPL-R_ARBPL->F_ARBPL                                    to LS_PRTE_GRID-ARBPL.
        move LS_PREDEF_ARBPL-R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_DESCR( )           to LS_PRTE_GRID-DESCR.
        move LS_PREDEF_ARBPL-R_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_ID( )     to LS_PRTE_GRID-WERKS.
      endif.

      move LS_PREDEF_PSEQ-R_PREDEF_PSEQ->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GUIDM.
      create object LS_PRTE_GRID-R_MSG.
      loop at LS_PREDEF_ARBPL-T_MSG into LS_MSG where GUIDM is initial
                                                 or   GUIDM eq LF_GUIDM.
        LS_PRTE_GRID-R_MSG->ADD_MESSAGE( IF_MSGID = LS_MSG-MSGID
                                         IF_MSGTY = LS_MSG-MSGTY
                                         IF_MSGNO = LS_MSG-MSGNO
                                         IF_MSGV1 = LS_MSG-MSGV1
                                         IF_MSGV2 = LS_MSG-MSGV2
                                         IF_MSGV3 = LS_MSG-MSGV3
                                         IF_MSGV4 = LS_MSG-MSGV4 ).
      endloop.

***   Status Icon
      read table LS_PRTE_GRID-R_MSG->T_MSG with key MSGTY = 'E'
                                           transporting no fields.
      if SY-SUBRC eq 0.
        write ICON_RED_LIGHT                                             to LS_PRTE_GRID-STICO as icon.
      else.
        if LS_PRTE_GRID-R_MSG->T_MSG is not initial.
          write ICON_YELLOW_LIGHT                                        to LS_PRTE_GRID-STICO as icon.
        else.
          write ICON_GREEN_LIGHT                                         to LS_PRTE_GRID-STICO as icon.
        endif.
      endif.

***   Combo Flag
      move LF_COMBO                                                      to LS_PRTE_GRID-COMBO.

***   Production Step Data
      move LS_PREDEF_PSEQ-R_PREDEF_PSEQ                                  to LS_PRTE_GRID-R_PREDEF_PSEQ.
      move LS_PREDEF_PSEQ-R_PREDEF_PSEQ->/VCXI/IF_CKX_OBJECT~GET_ID( )   to LS_PRTE_GRID-IPSTP.

***   Optional Flag
      move LS_PREDEF_PSEQ-OPSEQ                                          to LS_PRTE_GRID-OPSEQ.

      move-corresponding LS_PRTE_GRID to <S_DATA>.
    endloop.
  endloop.

endmethod.
method CHECK_INPUT_ARBPL.

  data:  LF_COUNT type I.

  select count(*)
         into LF_COUNT
         from CRHD
        where WERKS eq IF_WERKS
         and  ARBPL eq IF_ARBPL.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'CR'
                                          IF_MSGNO = '011'
                                          IF_MSGV1 = IF_ARBPL
                                          IF_MSGV2 = IF_WERKS ).
  endif.

endmethod.
method CHECK_INPUT_WERKS.

  call function 'PLANT_GET_DETAIL'
    exporting
      PLANT     = IF_WERKS
    exceptions
      NOT_FOUND = 1.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method CONSTRUCTOR.

***--------------------------------------------------------------------------------------
  move IR_PREDEF_PRTE                  to ME->R_PREDEF_PRTE.
  move IF_TABNAME                      to ME->F_TABNAME.
  move IR_PREDEF_PRTE->T_PREDEF_ARBPL  to ME->T_PREDEF_ARBPL.

*** Initialze Visualization
  ME->INIT_VIS( ).

***--------------------------------------------------------------------------------------
*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** Create Data Reference to Grid Data
  create data ME->R_DATA type table of ZVCXI_XCSRC_S_PRTE_GRID.

endmethod.
method DO_FREE.

*** Free Grid
  if ME->R_GRID is bound.
    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

endmethod.
method DO_PBO.

*** Set PF-Status
  ME->SET_PF_STATUS( ).

*** Modify Screen
  ME->MODIFY_SCREEN( ).

*** Create Container and Grid
  ME->INIT_CONTAINER( ).
  ME->INIT_GRID( ).

*** Build Grid Data
  ME->BUILD_GRID_DATA( ).
  ME->REFRESH_GRID( ).

endmethod.
method DO_UPDATE_PRTE_VIS.

  ME->S_PRTE_VIS = IS_PRTE_VIS.

*** Check Predefined Route
  ZCL_VCXI_XCSRC_PREDEF_PRTE=>CHECK_PREDEF_ARBPL( exporting IF_LCVAL        = ME->S_PRTE_VIS-LCVAL
                                                  changing  CT_PREDEF_ARBPL = ME->T_PREDEF_ARBPL ).

endmethod.
method DO_USER_COMMAND.

  case IF_UCOMM.
    when C_UC_OKAY.
      ME->HANDLE_UC_OKAY( ).

    when C_UC_DELETE.
      ME->HANDLE_UC_DELETE( ).

    when C_UC_CD.
      ME->HANDLE_UC_CD( ).

    when C_UC_CANCEL.
      leave to screen 0.
  endcase.

endmethod.
method FORWARD_COMBO_DATA_CHANGES.

  data:          LF_WERKS             type          WERKS_D,
                 LF_ARBPL             type          ARBPL,
                 LF_INDEX             type          I.
  data:          LS_MODI              type          LVC_S_MODI,
                 LS_PRTE_GRID         type          ZVCXI_XCSRC_S_PRTE_GRID.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.


***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Process updated Work Center
  loop at IT_GOOD_CELLS into LS_MODI where FIELDNAME eq 'WERKS'
                                      or   FIELDNAME eq 'ARBPL'.
*** Find updated Entry
    read table <T_DATA> assigning <S_DATA> index LS_MODI-ROW_ID.
    check SY-SUBRC eq 0.
    move-corresponding <S_DATA> to LS_PRTE_GRID.

*** Buffer
    move LS_PRTE_GRID-WERKS to LF_WERKS.
    move LS_PRTE_GRID-ARBPL to LF_ARBPL.

*** Update Combined
    LF_INDEX = LS_MODI-ROW_ID + 1.
    loop at <T_DATA> assigning <S_DATA> from LF_INDEX.
      move-corresponding <S_DATA> to LS_PRTE_GRID.
      if LS_PRTE_GRID-COMBO ne ABAP_TRUE.
        exit.
      else.
        move LF_WERKS to LS_PRTE_GRID-WERKS.
        move LF_ARBPL to LS_PRTE_GRID-ARBPL.
      endif.
      move-corresponding LS_PRTE_GRID to <S_DATA>.
    endloop.
  endloop.

endmethod.
  method GET_SELECTED_ROWS.

    data: LT_CELL type LVC_T_CELL,
          LT_ROW  type LVC_T_ROW.
    data: LS_CELL type LVC_S_CELL,
          LS_ROW  type LVC_S_ROW.


*** Get Cursor in Grid
    ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    if LINES( LT_CELL ) gt 0.
      loop at LT_CELL into LS_CELL.
        append LS_CELL-ROW_ID to ET_ROW.
      endloop.
    endif.

*** Get Selected Rows
    ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
    if LINES( LT_ROW ) gt 0.
      append lines of LT_ROW to ET_ROW.
    endif.

*** Get last Index
    loop at ET_ROW into LS_ROW.
      if ES_LAST_ROW-INDEX lt LS_ROW-INDEX.
        move LS_ROW to ES_LAST_ROW.
      endif.
    endloop.

  endmethod.
method HANDLE_DATA_CHANGED.

  data:          LF_TYPE              type          C.
  data:          LS_MOD_CELL          type          LVC_S_MODI,
                 LS_PRTE_GRID         type          ZVCXI_XCSRC_S_PRTE_GRID.
  data:          LR_DATA              type ref to   DATA,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA_ORG>         type standard table,
                 <T_DATA_TMP>         type standard table,
                 <S_DATA>             type          any,
                 <F_FIELD>            type          any.

  try.
***--------------------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA_ORG>.
      create data LR_DATA like <T_DATA_ORG>.
      assign LR_DATA->* to <T_DATA_TMP>.
      append lines of <T_DATA_ORG> to <T_DATA_TMP>.

***   Build Result Grid Values
      sort ER_DATA_CHANGED->MT_MOD_CELLS by ROW_ID .
      loop at ER_DATA_CHANGED->MT_MOD_CELLS into LS_MOD_CELL.
        read table <T_DATA_TMP> assigning <S_DATA> index LS_MOD_CELL-ROW_ID.
        check SY-SUBRC eq 0.

        assign component LS_MOD_CELL-FIELDNAME of structure <S_DATA> to <F_FIELD>.
        describe field <F_FIELD> type LF_TYPE.
        case LF_TYPE.
          when 'N' or 'i' or 'P' or 'F'.
            try.
                call function 'RSDS_CONVERT_NUMBER'
                  exporting
                    INPUT  = LS_MOD_CELL-VALUE
                  importing
                    OUTPUT = <F_FIELD>.
              catch CX_ROOT.
                clear <F_FIELD>.
            endtry.
          when others.
            translate LS_MOD_CELL-VALUE to upper case.
            move LS_MOD_CELL-VALUE to <F_FIELD>.
        endcase.
      endloop.


***--------------------------------------------------------------------------------------
***   Check Input
      loop at ER_DATA_CHANGED->MT_MOD_CELLS into LS_MOD_CELL.
        read table <T_DATA_TMP> assigning <S_DATA> index LS_MOD_CELL-ROW_ID.
        check SY-SUBRC eq 0.

        move-corresponding <S_DATA> to LS_PRTE_GRID.

***     Check Work Center
        if LS_MOD_CELL-FIELDNAME eq 'ARBPL' or
           LS_MOD_CELL-FIELDNAME eq 'WERKS'.
          try.
              ME->CHECK_INPUT_ARBPL( IF_WERKS = LS_PRTE_GRID-WERKS
                                     IF_ARBPL = LS_PRTE_GRID-ARBPL ).
            catch /VCXI/CX_CKX into LR_CX_CKX.
              ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( I_MSGID     = LR_CX_CKX->F_MSGID
                                                   I_MSGTY     = LR_CX_CKX->F_MSGTY
                                                   I_MSGNO     = LR_CX_CKX->F_MSGNO
                                                   I_MSGV1     = LR_CX_CKX->F_MSGV1
                                                   I_MSGV2     = LR_CX_CKX->F_MSGV2
                                                   I_MSGV3     = LR_CX_CKX->F_MSGV3
                                                   I_MSGV4     = LR_CX_CKX->F_MSGV4
                                                   I_FIELDNAME = 'ARBPL'
                                                   I_ROW_ID    = LS_MOD_CELL-ROW_ID
                                                   I_TABIX     = LS_MOD_CELL-TABIX ).
          endtry.
        endif.

***     Check Plant
        if LS_MOD_CELL-FIELDNAME eq 'WERKS'.
          try.
              ME->CHECK_INPUT_WERKS( IF_WERKS = LS_PRTE_GRID-WERKS ).
            catch /VCXI/CX_CKX into LR_CX_CKX.
              ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY( I_MSGID     = LR_CX_CKX->F_MSGID
                                                   I_MSGTY     = LR_CX_CKX->F_MSGTY
                                                   I_MSGNO     = LR_CX_CKX->F_MSGNO
                                                   I_MSGV1     = LR_CX_CKX->F_MSGV1
                                                   I_MSGV2     = LR_CX_CKX->F_MSGV2
                                                   I_MSGV3     = LR_CX_CKX->F_MSGV3
                                                   I_MSGV4     = LR_CX_CKX->F_MSGV4
                                                   I_FIELDNAME = 'WERKS'
                                                   I_ROW_ID    = LS_MOD_CELL-ROW_ID
                                                   I_TABIX     = LS_MOD_CELL-TABIX ).
          endtry.
        endif.

      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LR_CX_CKX            type ref to /VCXI/CX_CKX.

  try.
***   If changed -> Request Refresh for ALV
      check E_MODIFIED eq ABAP_TRUE.
      move ABAP_TRUE to ME->F_REFRESH_REQ.

***--------------------------------------------------------------------------------------
***   Forward Data Changes to Combined Production Steps
      ME->FORWARD_COMBO_DATA_CHANGES( IT_GOOD_CELLS = ET_GOOD_CELLS ).

***   Update Predefined Work Center
      ME->UPDATE_PREDEF_ARBPL( ).

***--------------------------------------------------------------------------------------
***   Get Current Cell
      ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                              ES_COL_ID = ME->S_COL ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_HOTSPOT_CLICK.

  data:          LS_RTEEDI_GRID  type          ZVCXI_XCSR_S_RTEEDI_GRID,
                 LS_FCAT         type          LVC_S_FCAT.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any,
                 <F_FIELD>       type          any.

  try.
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      read table <T_DATA> assigning <S_DATA> index E_ROW_ID-INDEX.
      check SY-SUBRC eq 0.

      case E_COLUMN_ID-FIELDNAME.
        when 'STICO'.
          move-corresponding <S_DATA> to LS_RTEEDI_GRID.
          if LS_RTEEDI_GRID-R_MSG is bound.
            LS_RTEEDI_GRID-R_MSG->DISPLAY_MSG( ).
          endif.

        when others.
          read table ME->T_FCAT into LS_FCAT with key FIELDNAME = E_COLUMN_ID-FIELDNAME.
          if LS_FCAT-CHECKBOX eq ABAP_TRUE.
            assign component E_COLUMN_ID-FIELDNAME of structure <S_DATA> to <F_FIELD>.

            if <F_FIELD> eq ABAP_TRUE.
              move ABAP_FALSE to <F_FIELD>.
            else.
              move ABAP_TRUE to <F_FIELD>.
            endif.

***         Request Refresh for ALV
            move ABAP_TRUE to ME->F_REFRESH_REQ.

***         Update Predefined Work Center
            ME->UPDATE_PREDEF_ARBPL( ).

          endif.
      endcase.


***   Get Current Cell
      ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                              ES_COL_ID = ME->S_COL ).


    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:          LF_DISABLED     type        ABAP_BOOL.
  data:          LR_CX_CKX       type ref to /VCXI/CX_CKX.
  field-symbols: <S_TOOLBAR>     type        STB_BUTTON.

  try.
      if ME->R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
        move ABAP_TRUE to LF_DISABLED.
      endif.

***----------------------------------------------------------------------------
***   Insert Toolbar Elements
      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_ADD                         to <S_TOOLBAR>-FUNCTION.
      move 'Add Production Step'(F01)       to <S_TOOLBAR>-TEXT.
      move ICON_INSERT_ROW                  to <S_TOOLBAR>-ICON.
      move LF_DISABLED                      to <S_TOOLBAR>-DISABLED.

      append initial line to E_OBJECT->MT_TOOLBAR assigning <S_TOOLBAR>.
      move C_UC_DEL                         to <S_TOOLBAR>-FUNCTION.
      move 'Delete Production Step'(F02)    to <S_TOOLBAR>-TEXT.
      move ICON_DELETE_ROW                  to <S_TOOLBAR>-ICON.
      move LF_DISABLED                      to <S_TOOLBAR>-DISABLED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_ADD.

  data: LF_PSEQD       type /VCXI/VSMC_PSEQD,
        LF_CANCELED    type ABAP_BOOL,
        LF_INDEX_PSEQ  type I,
        LF_INDEX_ARBPL type I.
  data: LS_PREDEF_ARBPL type ZVCXI_XCSRC_S_PREDEF_ARBPL,
        LS_LAST_ROW     type LVC_S_ROW.
  data: LT_OBJECT_ALL   type /VCXI/CKX_TT_OBJECT,
        LT_OBJECT_SEL   type /VCXI/CKX_TT_OBJECT,
        LT_OBJECT_STYLE type /VCXI/CKX_TT_OBJECT_STYLE.
  data: LR_PREDEF_PSEQ  type ref to ZCL_VCXI_XCSRC_PREDEF_PSEQ,
        LR_PREDEF_PSEQ2 type ref to ZCL_VCXI_XCSRC_PREDEF_PSEQ,
        LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_OBJECT_STYLE> type /VCXI/CKX_S_OBJECT_STYLE,
                 <S_PREDEF_ARBPL> type ZVCXI_XCSRC_S_PREDEF_ARBPL,
                 <S_PREDEF_PSEQ>  type ZVCXI_XCSRC_S_PREDEF_PSEQ.

***------------------------------------------------------------------------------------------------
  loop at ME->R_PREDEF_PRTE->R_PREDEF_RTE->T_PREDEF_PSEQ into LR_OBJECT.
    move LR_OBJECT ?to LR_PREDEF_PSEQ.

    check LR_PREDEF_PSEQ->R_PSEQ           is bound and
          LR_PREDEF_PSEQ->R_PSEQ->R_OBJECT is bound and
          LR_PREDEF_PSEQ->R_PSEQ->R_OBJECT->F_TOOBJ eq /VCXI/CL_VSMC_PSTEP=>C_TOOBJ_PSTEP.

    append LR_PREDEF_PSEQ to LT_OBJECT_ALL.

*** Add Style
    append initial line to LT_OBJECT_STYLE assigning <S_OBJECT_STYLE>.
    move LR_PREDEF_PSEQ    to <S_OBJECT_STYLE>-R_OBJECT.

*** Disable already existing once
    loop at ME->T_PREDEF_ARBPL into LS_PREDEF_ARBPL.
      read table LS_PREDEF_ARBPL-T_PREDEF_PSEQ with key R_PREDEF_PSEQ = LR_PREDEF_PSEQ
                                               transporting no fields.
      if SY-SUBRC eq 0.
        move ABAP_TRUE                            to <S_OBJECT_STYLE>-DISABLED.
        move CL_COLUMN_TREE_MODEL=>STYLE_INACTIVE to <S_OBJECT_STYLE>-STYLE.
        exit.
      endif.
    endloop.
  endloop.

*** Dynamic Sequence Definition?
  LF_PSEQD = ME->R_PREDEF_PRTE->R_PREDEF_RTE->GET_PSEQD( ).

***------------------------------------------------------------------------------------------------
*** Show Popup
  call function '/VCXI/CKX_OBJECT_POPUP_START'
    exporting
      IT_OBJECT_ALL   = LT_OBJECT_ALL
      IF_EXPAND_ALL   = ABAP_TRUE
      IT_OBJECT_STYLE = LT_OBJECT_STYLE
      IF_SORT_BY_ID   = ABAP_FALSE
      IF_SELMODE      = 1
    importing
      ET_OBJECT_SEL   = LT_OBJECT_SEL
      EF_CANCELED     = LF_CANCELED.
  check LF_CANCELED ne ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** Process Selected
  loop at LT_OBJECT_SEL into LR_OBJECT.
    move LR_OBJECT ?to LR_PREDEF_PSEQ.

    if LF_PSEQD ne ABAP_TRUE.
***   Find existing Predecessor
      read table ME->R_PREDEF_PRTE->R_PREDEF_RTE->T_PREDEF_PSEQ with key TABLE_LINE = LR_PREDEF_PSEQ
                                                                transporting no fields.
      check SY-SUBRC eq 0.
      LF_INDEX_PSEQ = SY-TABIX + 1.

      loop at ME->R_PREDEF_PRTE->R_PREDEF_RTE->T_PREDEF_PSEQ into LR_OBJECT from LF_INDEX_PSEQ.
        move LR_OBJECT ?to LR_PREDEF_PSEQ2.
        loop at ME->T_PREDEF_ARBPL assigning <S_PREDEF_ARBPL>.
          move SY-TABIX to LF_INDEX_ARBPL.
          read table <S_PREDEF_ARBPL>-T_PREDEF_PSEQ with key R_PREDEF_PSEQ = LR_PREDEF_PSEQ2
                                                    transporting no fields.
          if SY-SUBRC eq 0.
            if SY-TABIX gt 1.
              insert initial line into <S_PREDEF_ARBPL>-T_PREDEF_PSEQ index SY-TABIX assigning <S_PREDEF_PSEQ>.
              move LR_PREDEF_PSEQ to <S_PREDEF_PSEQ>-R_PREDEF_PSEQ.
              clear LF_INDEX_ARBPL.
            endif.
            clear LF_INDEX_PSEQ.
            exit.
          endif.
        endloop.
        if LF_INDEX_PSEQ eq 0.
          if LF_INDEX_ARBPL ne 0.
            insert initial line into ME->T_PREDEF_ARBPL assigning <S_PREDEF_ARBPL>
                                                        index LF_INDEX_ARBPL.
            append initial line to <S_PREDEF_ARBPL>-T_PREDEF_PSEQ assigning <S_PREDEF_PSEQ>.
            move LR_PREDEF_PSEQ to <S_PREDEF_PSEQ>-R_PREDEF_PSEQ.
          endif.
          exit.
        endif.
      endloop.
      if LF_INDEX_PSEQ ne 0.
***     Add as last Step as no Predecessor was found
        append value #( T_PREDEF_PSEQ = value #( ( R_PREDEF_PSEQ = LR_PREDEF_PSEQ ) ) ) to ME->T_PREDEF_ARBPL.
      endif.
    else.
***   Add Step based on selected Row
      ME->GET_SELECTED_ROWS( importing ES_LAST_ROW = LS_LAST_ROW ).
      if LS_LAST_ROW-INDEX ne 0.
        insert value #( T_PREDEF_PSEQ = value #( ( R_PREDEF_PSEQ = LR_PREDEF_PSEQ ) ) ) into ME->T_PREDEF_ARBPL index LS_LAST_ROW-INDEX.
      else.
        append value #( T_PREDEF_PSEQ = value #( ( R_PREDEF_PSEQ = LR_PREDEF_PSEQ ) ) ) to ME->T_PREDEF_ARBPL.
      endif.
    endif.
  endloop.

*** Check Predefined Route
  ZCL_VCXI_XCSRC_PREDEF_PRTE=>CHECK_PREDEF_ARBPL( exporting IF_LCVAL        = ME->S_PRTE_VIS-LCVAL
                                                  changing  CT_PREDEF_ARBPL = ME->T_PREDEF_ARBPL ).

endmethod.
method HANDLE_UC_CD.

  data:  LF_CDOCL                type          CDHDR-OBJECTCLAS,
         LF_CDOID                type          CDHDR-OBJECTID,
         LF_APPLICATIONID        type          REPID,
         LF_MSGV2                type          SYMSGV.
  data:  LT_CDRED_STR            type          CDRED_STR_TAB,
         LT_EDITPOS_WITH_HEADER  type table of CDRED.

*** Free Grid
  ME->DO_FREE( ).

***----------------------------------------------------------------------------
*** Get Change Document Info
  ME->R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_CD~GET_INFO( importing EF_CDOCL = LF_CDOCL
                                                                EF_CDOID = LF_CDOID ).


***----------------------------------------------------------------------------
*** Read Change Documents
  call function 'CHANGEDOCUMENT_READ'
    exporting
      OBJECTCLASS       = LF_CDOCL
      OBJECTID          = LF_CDOID
    importing
      ET_CDRED_STR      = LT_CDRED_STR[]
    tables
      EDITPOS           = LT_EDITPOS_WITH_HEADER
    exceptions
      NO_POSITION_FOUND = 1
      others            = 2.
  case SY-SUBRC.
    when 0.
***   Display the Records
      LF_APPLICATIONID = LF_CDOCL.
      call function 'CHANGEDOCUMENT_DISPLAY'
        exporting
          I_APPLICATIONID  = LF_APPLICATIONID
          FLG_AUTOCONDENSE = 'X'
          I_OBJECTCLAS     = LF_CDOCL
          IT_CDRED_STR     = LT_CDRED_STR[]
        tables
          I_CDRED          = LT_EDITPOS_WITH_HEADER.
    when 1.
***   No change document positions found
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'I'
          F_MSGID = 'CD'
          F_MSGNO = '649'
          F_MSGV1 = 'SY-SUBRC'
          F_MSGV2 = LF_MSGV2.
    when 2.
***   Error in change document creation/analysis: & &
      move SY-SUBRC to LF_MSGV2.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'I'
          F_MSGID = 'CD'
          F_MSGNO = '327'
          F_MSGV1 = 'SY-SUBRC'
          F_MSGV2 = LF_MSGV2.

  endcase.
endmethod.
method HANDLE_UC_DEL.

  data: LS_ROW       type LVC_S_ROW,
        LS_CELL      type LVC_S_CELL,
        LS_PRTE_GRID type ZVCXI_XCSRC_S_PRTE_GRID.
  data: LT_ROW  type LVC_T_ROW,
        LT_CELL type LVC_T_CELL.
  field-symbols: <T_DATA> type standard table,
                 <S_DATA> type          ANY.

***------------------------------------------------------------------------------------------------
*** Get Selected Row
  ME->GET_SELECTED_ROWS( importing ET_ROW = LT_ROW ).
  check LT_ROW is not initial.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Delete from bottom to top
  sort LT_ROW by INDEX descending.

  loop at LT_ROW into LS_ROW.
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    move-corresponding <S_DATA> to LS_PRTE_GRID.

*** Only delete Optional Production Steps
    check LS_PRTE_GRID-R_PREDEF_PSEQ->IS_OPSEQ( ) eq ABAP_TRUE.

    delete <T_DATA> index LS_ROW-INDEX.

*** Check if following step was combined
    if LS_PRTE_GRID-COMBO ne ABAP_TRUE.
      read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
      if SY-SUBRC eq 0.
        move-corresponding <S_DATA> to LS_PRTE_GRID.
        move ABAP_FALSE to LS_PRTE_GRID-COMBO.
        move-corresponding LS_PRTE_GRID to <S_DATA>.
      endif.
    endif.
  endloop.

***--------------------------------------------------------------------------------------
*** Update Predefined Work Center
  ME->UPDATE_PREDEF_ARBPL( ).

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_UC_DELETE.

***--------------------------------------------------------------------------------------
*** Popup to confirm


***--------------------------------------------------------------------------------------
*** Delete
  ME->R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSRC_PREDEF_PRTE=>C_FCODE_DELETE ).

***--------------------------------------------------------------------------------------
*** Leave Popup
  leave to screen 0.

endmethod.
method HANDLE_UC_OKAY.

***--------------------------------------------------------------------------------------
*** Check for Changes
  if ME->R_GRID is bound.
    ME->R_GRID->CHECK_CHANGED_DATA( ).
  endif.

***--------------------------------------------------------------------------------------
*** Update Predefined Route
  ME->R_PREDEF_PRTE->SET_IPRER( IF_IPRER = ME->S_PRTE_VIS-IPRER ).
  ME->R_PREDEF_PRTE->SET_DESCR( IF_DESCR = ME->S_PRTE_VIS-IPRER_DESCR ).
  ME->R_PREDEF_PRTE->SET_LCVAL( IF_LCVAL = ME->S_PRTE_VIS-LCVAL ).
  ME->R_PREDEF_PRTE->SET_PREDEF_ARBPL( IT_PREDEF_ARBPL = ME->T_PREDEF_ARBPL ).

***--------------------------------------------------------------------------------------
*** Leave Popup
  leave to screen 0.

endmethod.
method HANDLE_UCOMM.

  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.
      case E_UCOMM.
        when C_UC_ADD.
          ME->HANDLE_UC_ADD( ).
        when C_UC_DEL.
          ME->HANDLE_UC_DEL( ).
      endcase.

***   Get Current Cell
      ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                              ES_COL_ID = ME->S_COL ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_CONTAINER.

  check ME->R_CONTAINER is not bound.

  create object ME->R_CONTAINER
    exporting
      CONTAINER_NAME              = '0100CC_GRID'
    exceptions
      CNTL_ERROR                  = 1
      CNTL_SYSTEM_ERROR           = 2
      CREATE_ERROR                = 3
      LIFETIME_ERROR              = 4
      LIFETIME_DYNPRO_DYNPRO_LINK = 5
      others                      = 6.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method INIT_GRID.

  check ME->R_GRID is not bound.

  create object ME->R_GRID
    exporting
      I_PARENT          = ME->R_CONTAINER
      I_APPL_EVENTS     = 'X'
    exceptions
      ERROR_CNTL_CREATE = 1
      ERROR_CNTL_INIT   = 2
      ERROR_CNTL_LINK   = 3
      ERROR_DP_CREATE   = 4
      others            = 5.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Enter as Event
  ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

*** Register Event Handler
  set handler ME->HANDLE_DATA_CHANGED          for ME->R_GRID.
  set handler ME->HANDLE_DATA_CHANGED_FINISHED for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR               for ME->R_GRID.
  set handler ME->HANDLE_UCOMM                 for ME->R_GRID.
  set handler ME->HANDLE_HOTSPOT_CLICK         for ME->R_GRID.

*** Register F4-Fields
  ME->REGISTER_F4_FIELDS( ).

endmethod.
method INIT_VIS.

  data:  LS_LOG      type /VCXI/CKX_S_LOG,
         LS_LOG_EXT  type /VCXI/CKX_S_LOG_EXT.

  free: ME->S_PRTE_VIS.

*** Get ID and Description
  move ME->R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT~GET_ID( )     to ME->S_PRTE_VIS-IPRER.
  move ME->R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT~GET_DESCR( )  to ME->S_PRTE_VIS-IPRER_DESCR.

*** Link Context Value
  move ME->R_PREDEF_PRTE->F_LCVAL                           to ME->S_PRTE_VIS-LCVAL.

*** Get Log Data
  move ME->R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT~GET_LOG( )    to LS_LOG.
  LS_LOG_EXT = /VCXI/CL_CKX_SERVICE=>GET_LOG_EXT( IS_LOG = LS_LOG ).
  move-corresponding LS_LOG_EXT    to ME->S_PRTE_VIS.

endmethod.
method IS_COMBO_POSSIBLE.

  data:          LF_TABIX_PREV        type          I.
  data:          LS_PRTE_GRID_CURR    type          ZVCXI_XCSRC_S_PRTE_GRID,
                 LS_PRTE_GRID_PREV    type          ZVCXI_XCSRC_S_PRTE_GRID.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

***----------------------------------------------------------------------------
*** First can't be combined
  check IF_TABIX ne 1.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

***----------------------------------------------------------------------------
*** Find Current Entry
  read table <T_DATA> assigning <S_DATA> index IF_TABIX.
  move-corresponding <S_DATA> to LS_PRTE_GRID_CURR.

*** Find previous Entry
  LF_TABIX_PREV = IF_TABIX - 1.
  read table <T_DATA> assigning <S_DATA> index LF_TABIX_PREV.
  move-corresponding <S_DATA> to LS_PRTE_GRID_PREV.

***----------------------------------------------------------------------------
*** Perform Check
  if LS_PRTE_GRID_CURR-ARBPL eq LS_PRTE_GRID_PREV-ARBPL and
     LS_PRTE_GRID_CURR-WERKS eq LS_PRTE_GRID_PREV-WERKS.
    move ABAP_TRUE to RF_POSSIBLE.
  endif.

endmethod.
method IS_OPSEQ_POSSIBLE.

  data:          LS_PRTE_GRID         type          ZVCXI_XCSRC_S_PRTE_GRID.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

***----------------------------------------------------------------------------
*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

*** Find Current Entry
  read table <T_DATA> assigning <S_DATA> index IF_TABIX.
  move-corresponding <S_DATA> to LS_PRTE_GRID.

***----------------------------------------------------------------------------
*** Perform Check
  if LS_PRTE_GRID-R_PREDEF_PSEQ->IS_OPSEQ( ) eq ABAP_TRUE.
    move ABAP_TRUE to RF_POSSIBLE.
  endif.

endmethod.
method MODIFY_SCREEN.

***------------------------------------------------------------------------------------------------
*** Modify Screen
  loop at screen.
    if ME->R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
      move 0 to SCREEN-INPUT.
    endif.
    modify screen.
  endloop.

endmethod.
method REFRESH_FIELDCAT.

  data:          LF_LOCKED       type        ABAP_BOOL.
  field-symbols: <S_FCAT>        type        LVC_S_FCAT.

  free: ME->T_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = ME->F_TABNAME
    changing
      CT_FIELDCAT            = ME->T_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  move ME->R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) to LF_LOCKED.

***----------------------------------------------------------------------------
*** Change Field catalog attributes
  loop at ME->T_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
***   Work Center and Plant
      when 'ARBPL' or 'WERKS'.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-EDIT.
        endif.

***   Combo Flag
      when 'COMBO'.
        move ABAP_TRUE       to <S_FCAT>-CHECKBOX.
        move ABAP_TRUE       to <S_FCAT>-HOTSPOT.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-EDIT.
        endif.

***   Optional Sequence Flag
      when 'OPSEQ'.
        move ABAP_TRUE       to <S_FCAT>-CHECKBOX.
        move ABAP_TRUE       to <S_FCAT>-HOTSPOT.
        if LF_LOCKED eq ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-EDIT.
        endif.

***   Status (traffic light)
      when 'STICO'.
        move ABAP_TRUE       to <S_FCAT>-HOTSPOT.
        move 'C'             to <S_FCAT>-JUST.


    endcase.
  endloop.

endmethod.
method REFRESH_GRID.

  data:          LS_LAYOUT            type          LVC_S_LAYO.
  data:          LT_TOOLBAR_EXCLUDING type          UI_FUNCTIONS.
  field-symbols: <T_DATA>             type standard table.

***----------------------------------------------------------------------------
*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

*** Refresh Field Catalog
  ME->REFRESH_FIELDCAT( ).

*** Refresh Style Table of Grid Data
  ME->REFRESH_STYLE( ).

*** Get Layout
  move ABAP_TRUE to LS_LAYOUT-CWIDTH_OPT.
  move 'TSTYL'   to LS_LAYOUT-STYLEFNAME.

*** Exlcude All Functions
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL to LT_TOOLBAR_EXCLUDING.

***----------------------------------------------------------------------------
*** Relfreh ALV Grid
  ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = ME->T_FCAT
      IT_OUTTAB                     = <T_DATA>
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Current Cell
  ME->R_GRID->SET_CURRENT_CELL_VIA_ID( IS_ROW_ID    = ME->S_ROW
                                       IS_COLUMN_ID = ME->S_COL ).

endmethod.
method REFRESH_STYLE.

  data:          LF_TABIX        type                   I.
  data:          LS_PRTE_GRID    type                   ZVCXI_XCSRC_S_PRTE_GRID.
  data:          LT_STYLE        type standard table of LVC_S_STYL.
  field-symbols: <T_DATA>        type standard          table,
                 <S_DATA>        type                   any,
                 <S_STYLE>       type                   LVC_S_STYL.

***----------------------------------------------------------------------------
*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

*** Update Style
  loop at <T_DATA> assigning <S_DATA>.
    move SY-TABIX to LF_TABIX.
    move-corresponding <S_DATA> to LS_PRTE_GRID.

    free: LT_STYLE.

***----------------------------------------------------------------------------
*** Work Center & Plant
    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'ARBPL'                              to <S_STYLE>-FIELDNAME.
    if LS_PRTE_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED  to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED to <S_STYLE>-STYLE.
    endif.

    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'WERKS'                              to <S_STYLE>-FIELDNAME.
    if LS_PRTE_GRID-COMBO ne ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED  to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED to <S_STYLE>-STYLE.
    endif.

***----------------------------------------------------------------------------
*** Combo Flag
    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'COMBO'                                 to <S_STYLE>-FIELDNAME.
    if ME->R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE and
       ME->IS_COMBO_POSSIBLE( IF_TABIX = LF_TABIX ) eq ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED     to <S_STYLE>-STYLE.
      add CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT      to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
      add CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO   to <S_STYLE>-STYLE.
    endif.

***----------------------------------------------------------------------------
*** Optional Sequence Flag
    append initial line to LT_STYLE assigning <S_STYLE>.
    move 'OPSEQ'                                 to <S_STYLE>-FIELDNAME.
    if ME->R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE and
       ME->IS_OPSEQ_POSSIBLE( IF_TABIX = LF_TABIX ) eq ABAP_TRUE.
      move CL_GUI_ALV_GRID=>MC_STYLE_ENABLED     to <S_STYLE>-STYLE.
      add CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT      to <S_STYLE>-STYLE.
    else.
      move CL_GUI_ALV_GRID=>MC_STYLE_DISABLED    to <S_STYLE>-STYLE.
      add CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO   to <S_STYLE>-STYLE.
    endif.

***----------------------------------------------------------------------------
*** Update Style Table
    move LT_STYLE to LS_PRTE_GRID-TSTYL.
    move-corresponding LS_PRTE_GRID to <S_DATA>.

  endloop.

endmethod.
method REGISTER_F4_FIELDS.

  data:  LS_F4        type                   LVC_S_F4,
         LS_FCAT      type                   LVC_S_FCAT.
  data:  LT_F4        type                   LVC_T_F4,
         LT_FCAT      type                   LVC_T_FCAT.

***----------------------------------------------------------------------------
*** Get Field Cat to find Fields with F4 Helps
  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = ME->F_TABNAME
    changing
      CT_FIELDCAT            = LT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Register F4 Help for all relevant Fields
  loop at LT_FCAT into LS_FCAT.

*** If there is no F4Help at fieldcat - check explicit Field of Table
    if LS_FCAT-F4AVAILABL eq ABAP_FALSE.
      call function 'F4IF_DETERMINE_SEARCHHELP'
        exporting
          TABNAME           = LS_FCAT-DOMNAME
          FIELDNAME         = SPACE
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          INCONSISTENT_HELP = 3
          others            = 4.

      if SY-SUBRC ne 0.

        call function 'F4IF_DETERMINE_SEARCHHELP'
          exporting
            TABNAME           = LS_FCAT-REF_TABLE
            FIELDNAME         = LS_FCAT-FIELDNAME
          exceptions
            FIELD_NOT_FOUND   = 1
            NO_HELP_FOR_FIELD = 2
            INCONSISTENT_HELP = 3
            others            = 4.

      endif.


      if SY-SUBRC eq 0.
        move ABAP_TRUE to LS_FCAT-F4AVAILABL.
      endif.
    endif.


    if LS_FCAT-F4AVAILABL eq ABAP_TRUE.
***------------------------------------------------------------------
***   Add to Register Table
      clear LS_F4.
      move LS_FCAT-FIELDNAME to LS_F4-FIELDNAME.
      move 'X'               to LS_F4-REGISTER.
      move 'X'               to LS_F4-CHNGEAFTER.
      insert LS_F4 into table LT_F4.
    endif.
  endloop.

  ME->R_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
method SET_PF_STATUS.

  data:  LT_EXCLUDE   type table of SYUCOMM.

  if ME->R_PREDEF_PRTE->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne aBAP_TRUE.
    append C_UC_OKAY   to LT_EXCLUDE.
    append C_UC_DELETE to LT_EXCLUDE.
  endif.

  set pf-status '0100' of program 'SAPLZVCXI_XCSRC_POPUP_PRTE'
      excluding LT_EXCLUDE.

endmethod.
method START.

  data:  LR_POPUP_PRTE type ref to ZCL_VCXI_XCSRC_POPUP_PRTE.

*** Create Instance
  create object LR_POPUP_PRTE
    exporting
      IR_PREDEF_PRTE = IR_PREDEF_PRTE.

*** Call Popup
  call function 'ZVCXI_XCSRC_POPUP_PRTE_START'
    exporting
      IR_POPUP_PRTE = LR_POPUP_PRTE.

*** Free the Popup
  LR_POPUP_PRTE->DO_FREE( ).

endmethod.
method UPDATE_PREDEF_ARBPL.

  data:          LF_GUID          type          /VCXI/CKX_GUID.
  data:          LS_PRTE_GRID     type          ZVCXI_XCSRC_S_PRTE_GRID.
  data:          LR_ARBPL         type ref to   /VCXI/CL_VSMC_ARBPL.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any,
                 <S_PREDEF_ARBPL> type          ZVCXI_XCSRC_S_PREDEF_ARBPL,
                 <S_PREDEF_PSEQ>  type          ZVCXI_XCSRC_S_PREDEF_PSEQ.

*** Clear old Values of Production Route
  free: ME->T_PREDEF_ARBPL.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

  loop at <T_DATA> assigning <S_DATA>.
    move-corresponding <S_DATA> to LS_PRTE_GRID.

***--------------------------------------------------------------------------------------
*** Add new Work Center
    if LS_PRTE_GRID-COMBO ne ABAP_TRUE.
      clear LR_ARBPL.
      if LS_PRTE_GRID-ARBPL is not initial.
        LF_GUID = /VCXI/CL_VSMC_ARBPL=>ENCRYPT_GUID( IF_WERKS = LS_PRTE_GRID-WERKS
                                                     IF_ARBPL = LS_PRTE_GRID-ARBPL ).
        LR_ARBPL ?= /VCXI/CL_VSMC_ARBPL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
      endif.

      append initial line to ME->T_PREDEF_ARBPL assigning <S_PREDEF_ARBPL>.
      move LR_ARBPL to <S_PREDEF_ARBPL>-R_ARBPL.
    endif.

***--------------------------------------------------------------------------------------
*** Add Production Step
    append initial line to <S_PREDEF_ARBPL>-T_PREDEF_PSEQ assigning <S_PREDEF_PSEQ>.
    move LS_PRTE_GRID-R_PREDEF_PSEQ to <S_PREDEF_PSEQ>-R_PREDEF_PSEQ.
    move LS_PRTE_GRID-OPSEQ         to <S_PREDEF_PSEQ>-OPSEQ.
  endloop.

*** Check Predefined Route
  ZCL_VCXI_XCSRC_PREDEF_PRTE=>CHECK_PREDEF_ARBPL( exporting IF_LCVAL        = ME->S_PRTE_VIS-LCVAL
                                                  changing  CT_PREDEF_ARBPL = ME->T_PREDEF_ARBPL ).

endmethod.
