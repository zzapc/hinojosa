
class ZCL_VCXI_XCSR_GRID_RTESEL definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  create public .

public section.

  type-pools ABAP .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_CONTAINER_NAME type SCRFNAME
      !IF_TABNAME type TABNAME default 'ZVCXI_XCSR_S_RTESEL_GRID'
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_FCODE_SHOW_MGRPV_LIMIT type UI_FUNC value 'SHOW_MGRPV_LIMIT' ##NO_TEXT.
  constants C_FCODE_SHOW_MGRPV_SPEED type UI_FUNC value 'SHOW_MGRPV_SPEED' ##NO_TEXT.
  data R_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV .
  data R_UI_RTESPV type ref to ZCL_VCXI_XCSR_UI_RTESPV .
  constants C_PSICO_EMPTY type ZVCXI_XCSR_PSICO value ICON_ENTER_MORE ##NO_TEXT.
  constants C_PSICO_MAINTAINED type ZVCXI_XCSR_PSICO value ICON_DISPLAY_MORE ##NO_TEXT.

  methods GET_COMBO
    importing
      !IR_DATA type ref to DATA
      !IF_INDEX type I
    returning
      value(RF_COMBO) type ZVCXI_XCSR_COMBO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_PSICO
    importing
      !IS_RTESEL_GRID type ZVCXI_XCSR_S_RTESEL_GRID
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_RTE_ARBPL
    importing
      !IS_ROW type LVC_S_ROW optional
    returning
      value(RR_RTE_ARBPL) type ref to /VCXI/CL_VSMR_RTE_ARBPL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CONTEXT_MENU_REQUEST
    for event CONTEXT_MENU_REQUEST of CL_GUI_ALV_GRID
    importing
      !E_OBJECT .
  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods HANDLE_UC_SHOW_MGRPV
    importing
      !IF_MMGRP type /VCXI/VSMC_MMGRP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSR_GRID_RTESEL definition
class ZCL_VCXI_XCSR_GRID_RTESEL implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = IF_TABNAME
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_RTESPV.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
  method GET_COMBO.

    data:          LS_RTESEL_GRID type ZVCXI_XCSR_S_RTESEL_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.


*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

    read table <T_DATA> assigning <S_DATA> index IF_INDEX.
    check SY-SUBRC eq 0.

    move-corresponding <S_DATA> to LS_RTESEL_GRID.
    move LS_RTESEL_GRID-COMBO to RF_COMBO.

  endmethod.
method GET_FIELDCAT.

  data: LF_TABIX  type I,
        LF_HELPER type ABAP_BOOL,
        LF_MANWC  type ABAP_BOOL,
        LF_OUTSO  type ABAP_BOOL,
        LF_PRICE  type ABAP_BOOL.
  data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
        LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_BL_PSTEP  type ref to ZCL_VCXI_XCSR_BL_PSTEP,
        LR_BL_MANU   type ref to ZIF_VCXI_XCSR_BL_MANU,
        LR_BL_OUTSO  type ref to ZIF_VCXI_XCSR_BL_OUTSO.
  field-symbols: <S_FCAT> type LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Analyze Route
  if ME->R_PR_RTESPV->R_RTESEL is bound.
    loop at ME->R_PR_RTESPV->R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        move SY-TABIX to LF_TABIX.
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
            check LR_BL_PSTEP is bound.

***         Check for Helper
            if LR_BL_PSTEP->T_HELPER is not initial.
              move ABAP_TRUE to LF_HELPER.
            endif.

***         Check for Manual Work Center
            try.
                move LR_BL_PSTEP ?to LR_BL_MANU.
                if LR_BL_MANU is bound and
                   LR_BL_MANU->F_MANWC eq ABAP_TRUE.
                  move ABAP_TRUE to LF_MANWC.
                endif.
              catch CX_SY_MOVE_CAST_ERROR.
                clear: LR_BL_MANU.
            endtry.

***         Check for Outsourcing
            try.
                move LR_BL_PSTEP ?to LR_BL_OUTSO.
                if LR_BL_OUTSO is bound and
                   LR_BL_OUTSO->F_OUTSO eq ABAP_TRUE.
                  move ABAP_TRUE to LF_OUTSO.

***               Check for Non-scaled Price
                  if LF_TABIX              eq 1 and
                     LR_BL_OUTSO->T_PSCALE is initial.
                    move ABAP_TRUE to LF_PRICE.
                  endif.
                endif.
              catch CX_SY_MOVE_CAST_ERROR.
                clear: LR_BL_OUTSO.
            endtry.

          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_BL_PSTEP.
        endtry.
      endloop.
    endloop.
  endif.

***----------------------------------------------------------------------------
*** Change Field catalog attributes
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
***   Combo Flag
      when 'COMBO'.
        move ABAP_TRUE to <S_FCAT>-CHECKBOX.

***   Status (traffic light)
      when 'STICO'.
        move ABAP_TRUE to <S_FCAT>-HOTSPOT.
        move 'C'       to <S_FCAT>-JUST.

***   Information Button
      when 'BTN_INFO'.
        move CL_GUI_ALV_GRID=>MC_STYLE_BUTTON  to <S_FCAT>-STYLE.
        move ABAP_TRUE                         to <S_FCAT>-ICON.
        move 'C'                               to <S_FCAT>-JUST.
        move 'Info'(C01)                       to <S_FCAT>-REPTEXT.

***   Helper
      when 'HELPN' or 'HELPT'.
        if LF_HELPER ne ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.
        endif.

***   Manual Work Center Flag
      when 'MANWC'.
        move ABAP_TRUE   to <S_FCAT>-CHECKBOX.
        if LF_MANWC ne ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.
        endif.

      when 'MSRSR' or 'MSRSR_UOM' or 'MSRST' or 'MSRST_UOM'.
        if LF_MANWC ne ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.
        endif.

***   Purchase Flag
      when 'OUTSO'.
        move ABAP_TRUE to <S_FCAT>-CHECKBOX.
        if LF_OUTSO ne ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.
        endif.

      when 'LIFNR'.
        if LF_OUTSO ne ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.
        endif.

      when 'PRICE' or 'PRICE_CURR' or
           'PRICP' or 'PRICP_UOM'.
        if LF_OUTSO ne ABAP_TRUE or
           LF_PRICE ne ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.
        endif.

      when 'PSICO'.
        if LF_OUTSO ne ABAP_TRUE.
          move ABAP_TRUE     to <S_FCAT>-NO_OUT.
        endif.
        move ABAP_TRUE       to <S_FCAT>-HOTSPOT.
        move 'C'             to <S_FCAT>-JUST.

      when 'TEXT'.
        if LF_MANWC ne ABAP_TRUE and
           LF_OUTSO ne ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.
        endif.

      when 'SCRAP' or 'SCRAP_UOM'.
        if LF_MANWC ne ABAP_TRUE and
           LF_OUTSO ne ABAP_TRUE.
          move ABAP_TRUE to <S_FCAT>-NO_OUT.
        endif.

    endcase.
  endloop.

endmethod.
method GET_GRID_DATA.

  data:          LF_COMBO             type          ZVCXI_XCSR_COMBO,
                 LF_GUIDM             type          /VCXI/CKXM_GUIDM.
  data:          LS_RTESEL_GRID       type          ZVCXI_XCSR_S_RTESEL_GRID,
                 LS_HELPER            type          ZVCXI_XCSR_S_HELPER,
                 LS_MSG               type          /VCXI/CKXM_S_MSG.
  data:          LR_RTE_ARBPL         type ref to   /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP         type ref to   /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_BL_PSTEP          type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_BL_MANU           type ref to   ZIF_VCXI_XCSR_BL_MANU,
                 LR_BL_OUTSO          type ref to   ZIF_VCXI_XCSR_BL_OUTSO.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check ME->R_PR_RTESPV->R_RTESEL is bound.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  loop at ME->R_PR_RTESPV->R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      if SY-TABIX eq 1.
        move ABAP_FALSE to LF_COMBO.
      else.
        move ABAP_TRUE  to LF_COMBO.
      endif.

***   Add Entry
      append initial line to <T_DATA> assigning <S_DATA>.

*** --------------------------------------------------------------------------------------------
***   Fill Data
      clear: LS_RTESEL_GRID.

***   Set Pstep
      move LR_RTE_PSTEP                                                    to LS_RTESEL_GRID-R_RTE_PSTEP.

***   Work Center Data
      if LR_RTE_ARBPL->R_ARBPL is bound.
        move LR_RTE_ARBPL->R_ARBPL->F_ARBPL                                to LS_RTESEL_GRID-ARBPL.
        move LR_RTE_ARBPL->R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_DESCR( )       to LS_RTESEL_GRID-DESCR.
        move LR_RTE_ARBPL->R_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LS_RTESEL_GRID-WERKS.
      endif.

      move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GUIDM.
      create object LS_RTESEL_GRID-R_MSG.
      loop at LR_RTE_ARBPL->T_MSG into LS_MSG where GUIDM is initial
                                               or   GUIDM eq LF_GUIDM.
        LS_RTESEL_GRID-R_MSG->ADD_MESSAGE( IF_MSGID = LS_MSG-MSGID
                                           IF_MSGTY = LS_MSG-MSGTY
                                           IF_MSGNO = LS_MSG-MSGNO
                                           IF_MSGV1 = LS_MSG-MSGV1
                                           IF_MSGV2 = LS_MSG-MSGV2
                                           IF_MSGV3 = LS_MSG-MSGV3
                                           IF_MSGV4 = LS_MSG-MSGV4 ).
      endloop.

***   Status Icon
      read table LS_RTESEL_GRID-R_MSG->T_MSG with key MSGTY = 'E'
                                             transporting no fields.
      if SY-SUBRC eq 0.
        write ICON_RED_LIGHT                                             to LS_RTESEL_GRID-STICO as icon.
      else.
        if LS_RTESEL_GRID-R_MSG->T_MSG is not initial.
          write ICON_YELLOW_LIGHT                                        to LS_RTESEL_GRID-STICO as icon.
        else.
          write ICON_GREEN_LIGHT                                         to LS_RTESEL_GRID-STICO as icon.
        endif.
      endif.

***   Info Icon
      move ICON_INFORMATION                                              to LS_RTESEL_GRID-BTN_INFO.

***   Production Step Data
      move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( )          to LS_RTESEL_GRID-IPSTP.
      move LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_DESCR( )       to LS_RTESEL_GRID-IPSTP_DESCR.
      move LF_COMBO                                                      to LS_RTESEL_GRID-COMBO.

***   BL Production Step Data
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
          if LR_BL_PSTEP is bound.
***         Helper
            read table LR_BL_PSTEP->T_HELPER into LS_HELPER index 1.
            if SY-SUBRC eq 0.
              move-corresponding LS_HELPER to LS_RTESEL_GRID.
            endif.


***         Get Manual Work Center Data
            try.
                move LR_BL_PSTEP ?to LR_BL_MANU.
                if LR_BL_MANU is bound and
                   LR_BL_MANU->F_MANWC eq ABAP_TRUE.
                  move LR_BL_MANU->F_MANWC to LS_RTESEL_GRID-MANWC.
                  if LS_RTESEL_GRID-COMBO ne ABAP_TRUE.
                    move LR_BL_MANU->F_TEXT  to LS_RTESEL_GRID-TEXT.
                    move LR_BL_MANU->S_MSRS  to LS_RTESEL_GRID-S_MSRS.
                    move LR_BL_MANU->S_SCRAP to LS_RTESEL_GRID-S_SCRAP.
                  endif.
                endif.
              catch CX_SY_MOVE_CAST_ERROR.
                clear: LR_BL_MANU.
            endtry.

***         Get Outsourcing Data
            try.
                move LR_BL_PSTEP ?to LR_BL_OUTSO.
                if LR_BL_OUTSO is bound and
                   LR_BL_OUTSO->F_OUTSO eq ABAP_TRUE.
                  move LR_BL_OUTSO->F_OUTSO     to LS_RTESEL_GRID-OUTSO.
                  if LS_RTESEL_GRID-COMBO ne ABAP_TRUE.
                    move LR_BL_OUTSO->F_TEXT    to LS_RTESEL_GRID-TEXT.
                    move LR_BL_OUTSO->S_SCRAP   to LS_RTESEL_GRID-S_SCRAP.
                    move LR_BL_OUTSO->F_LIFNR   to LS_RTESEL_GRID-LIFNR.
                    if LR_BL_OUTSO->T_PSCALE is initial.
                      move LR_BL_OUTSO->S_PRICE to LS_RTESEL_GRID-S_PRICE.
                      move LR_BL_OUTSO->S_PRICP to LS_RTESEL_GRID-S_PRICP.
                      move C_PSICO_EMPTY        to LS_RTESEL_GRID-PSICO.
                    else.
                      move C_PSICO_MAINTAINED   to LS_RTESEL_GRID-PSICO.
                    endif.
                  endif.
                endif.
              catch CX_SY_MOVE_CAST_ERROR.
                clear: LR_BL_OUTSO.
            endtry.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_BL_PSTEP.
      endtry.

      move-corresponding LS_RTESEL_GRID to <S_DATA>.
    endloop.
  endloop.

endmethod.
  method GET_SELECTED_RTE_ARBPL.

    data: LS_ROW         type LVC_S_ROW,
          LS_RTESEL_GRID type ZVCXI_XCSR_S_RTESEL_GRID.
    data: LT_CELL        type LVC_T_CELL.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.


    if IS_ROW is not supplied.
***   Get selected Rows by Cells
      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      check LT_CELL is not initial.
      LS_ROW = LT_CELL[ 1 ]-ROW_ID.
    else.
***   Use provided Row
      LS_ROW = IS_ROW.
    endif.

*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

*** Get table line
    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    check SY-SUBRC eq 0.
    move-corresponding <S_DATA> to LS_RTESEL_GRID.

*** Find Work Center by Production Step
    loop at ME->R_PR_RTESPV->R_RTESEL->R_RTE_PRTE->T_RTE_ARBPL into RR_RTE_ARBPL.
      read table RR_RTE_ARBPL->T_RTE_PSTEP with key TABLE_LINE = LS_RTESEL_GRID-R_RTE_PSTEP
                                           transporting no fields.
      if SY-SUBRC eq 0.
        exit.
      else.
        clear RR_RTE_ARBPL.
      endif.
    endloop.

  endmethod.
method HANDLE_BUTTON_CLICK.

  data:          LS_RTESEL_GRID   type          ZVCXI_XCSR_S_RTESEL_GRID.
  data:          LR_BL_PSTEP      type ref to   ZCL_VCXI_XCSR_BL_PSTEP,
                 LR_CX_CKX        type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>         type standard table,
                 <S_DATA>         type          any.

  try.
***------------------------------------------------------------------------------------------------
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

***   Find Entry
      read table <T_DATA> assigning <S_DATA> index ES_ROW_NO-ROW_ID.
      check SY-SUBRC eq 0.

      move-corresponding <S_DATA> to LS_RTESEL_GRID.

      case ES_COL_ID-FIELDNAME.
        when 'BTN_INFO'.
          if LS_RTESEL_GRID-R_RTE_PSTEP is bound.
            try.
                move LS_RTESEL_GRID-R_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
              catch CX_SY_MOVE_CAST_ERROR.
                clear LR_BL_PSTEP.
            endtry.
            if LR_BL_PSTEP is bound.
***           Start Information Popup
              ZCL_VCXI_XCSR_POPUP_BLPINFO=>START( IR_BL_PSTEP = LR_BL_PSTEP ).
            endif.
          endif.
      endcase.


    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_CONTEXT_MENU_REQUEST.

  data:  LR_RTE_ARBPL          type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_CX_CKX             type ref to /VCXI/CX_CKX.

  try.
***   Clear Default Entries
      E_OBJECT->CLEAR( ).

***------------------------------------------------------------------------------------------------
***   Get Selected Work Center
      move ME->GET_SELECTED_RTE_ARBPL( ) to LR_RTE_ARBPL.
      check LR_RTE_ARBPL is bound.

***   Show Limit Group Version
      E_OBJECT->ADD_FUNCTION( FCODE = C_FCODE_SHOW_MGRPV_LIMIT
                              TEXT  = 'Show Limit Group Version'(F01) ).

***   Show Speed Group Version
      E_OBJECT->ADD_FUNCTION( FCODE = C_FCODE_SHOW_MGRPV_SPEED
                              TEXT  = 'Show Speed Group Version'(F02) ).


    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_HOTSPOT_CLICK.

  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  data:          LS_RTESEL_GRID  type          ZVCXI_XCSR_S_RTESEL_GRID.
  field-symbols: <T_DATA>        type standard table,
                 <S_DATA>        type          any.

  try.
***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      read table <T_DATA> assigning <S_DATA> index E_ROW_ID-INDEX.
      check SY-SUBRC eq 0.

      move-corresponding <S_DATA> to LS_RTESEL_GRID.

      case E_COLUMN_ID-FIELDNAME.
        when 'STICO'.
          LS_RTESEL_GRID-R_MSG->DISPLAY_MSG( ).
        when 'PSICO'.
          ME->HANDLE_UC_PSICO( IS_RTESEL_GRID = LS_RTESEL_GRID ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_PSICO.

  data:  LR_BL_OUTSO  type ref to ZIF_VCXI_XCSR_BL_OUTSO.

  try.
      move IS_RTESEL_GRID-R_RTE_PSTEP->R_BLOBJ ?to LR_BL_OUTSO.
    catch CX_SY_MOVE_CAST_ERROR.
      clear LR_BL_OUTSO.
  endtry.
  check LR_BL_OUTSO is bound.

*** Start Price Scale Popup
  ZCL_VCXI_XCSR_POPUP_PSCALE=>START( IR_BL_OUTSO = LR_BL_OUTSO
                                     IF_LOCKED   = ABAP_FALSE ).

endmethod.
method HANDLE_UC_SHOW_MGRPV.

  data:  LF_TOOBJ         type        /VCXI/CKX_TOOBJ,
         LF_GUID          type        /VCXI/CKX_GUID,
         LF_MESSAGE       type        CHAR100.
  data:  LR_RTE_ARBPL     type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_MGRPV         type ref to /VCXI/CL_VSMC_MGRPV.

***------------------------------------------------------------------------------------------------
*** Get Selected Work Center
  move ME->GET_SELECTED_RTE_ARBPL( ) to LR_RTE_ARBPL.
  check LR_RTE_ARBPL is bound.

*** Get Machine Group Version by Production Steps
  LR_MGRPV ?= LR_RTE_ARBPL->GET_MGRPV_BY_RTE_PSTEP( IF_DATE  = ME->R_PR_RTESPV->R_RTESEL->F_DATE
                                                    IF_MMGRP = IF_MMGRP ).
  check LR_MGRPV is bound.

*** Get Information
  move LR_MGRPV->/VCXI/IF_CKX_OBJECT~F_TOOBJ     to LF_TOOBJ.
  move LR_MGRPV->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GUID.

*** Start Machine Customizing in new Task
  call function '/VCXI/VSMCU_MACHCUST_START'
    starting new task 'NEW'
    exporting
      IF_TOOBJ              = LF_TOOBJ
      IF_GUID               = LF_GUID
    exceptions
      SYSTEM_FAILURE        = 97  message LF_MESSAGE
      COMMUNICATION_FAILURE = 98  message LF_MESSAGE
      others                = 99.
  if SY-SUBRC   ne 0 and
     LF_MESSAGE is not initial.
    message LF_MESSAGE type 'W'.
  endif.

endmethod.
method HANDLE_USER_COMMAND.

  data:  LR_CX_CKX     type ref to  /VCXI/CX_CKX.

  try.
      case E_UCOMM.
        when C_FCODE_SHOW_MGRPV_LIMIT.
          ME->HANDLE_UC_SHOW_MGRPV( IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_LIMIT ).

        when C_FCODE_SHOW_MGRPV_SPEED.
          ME->HANDLE_UC_SHOW_MGRPV( IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_SPEED ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'S' ).
  endtry.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Register Event Handler
  set handler ME->HANDLE_HOTSPOT_CLICK         for ME->R_GRID.
  set handler ME->HANDLE_BUTTON_CLICK          for ME->R_GRID.
  set handler ME->HANDLE_CONTEXT_MENU_REQUEST  for ME->R_GRID.
  set handler ME->HANDLE_USER_COMMAND          for ME->R_GRID.

endmethod.
