
class ZCL_VCXI_XCDCU_GRID_CONDREC_TR definition
  public
  create public .

public section.

  data F_DESCR type /VCXI/CKX_DESCR read-only .
  type-pools ABAP .
  data F_REFRESH_ALL_REQ type ABAP_BOOL .
  data F_REFRESH_REQ type ABAP_BOOL .

  methods CONSTRUCTOR
    importing
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !II_ICORE type ZVCXI_XCDC_TT_ICORE
      !II_ICODE type ZVCXI_XCDC_TT_ICODE
      !II_CHABY type ZVCXI_XCDC_TT_CHABY
      !II_CHAAT_DATE type ZVCXI_XCDC_TT_CHAAT_DATE
      !II_CHAAT_TIME type ZVCXI_XCDC_TT_CHAAT_TIME
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
  methods CHECK_CHANGED_DATA
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    YT_TD300 type standard table of ZVCXI_XCD_TD300 with default key .
  types:
    YT_TC200 type standard table of ZVCXI_XCD_TC200 with default key .

  constants C_BTYPE_BUTTON type TB_BTYPE value '0'. "#EC NOTEXT
  constants C_BTYPE_CHECKBOX type TB_BTYPE value '5'. "#EC NOTEXT
  constants C_BTYPE_MENU type TB_BTYPE value '2'. "#EC NOTEXT
  constants C_BTYPE_MENU_BTN type TB_BTYPE value '1'. "#EC NOTEXT
  constants C_BTYPE_MENU_ENTRY type TB_BTYPE value '6'. "#EC NOTEXT
  constants C_BTYPE_SEPARATOR type TB_BTYPE value '3'. "#EC NOTEXT
  constants C_FUNC_ADD_TO_TR type UI_FUNC value 'ADD_TO_TR'. "#EC NOTEXT
  constants C_FUNC_DEL_WR_TR type UI_FUNC value 'DELETE_WRITE_TR'. "#EC NOTEXT
  constants C_FUNC_TR_OV type UI_FUNC value 'TR_OVERVIEW'. "#EC NOTEXT
  data F_CONTAINER_NAME type SCRFNAME .
  data F_LOCKED type /VCXI/CKX_LOCKED .
  data F_STYLE_DISABLED type LVC_STYLE .
  data F_STYLE_ENABLED type LVC_STYLE .
  data F_TABNAME type TABNAME .
  data I_CHAAT_DATE type ZVCXI_XCDC_TT_CHAAT_DATE .
  data I_CHAAT_TIME type ZVCXI_XCDC_TT_CHAAT_TIME .
  data I_CHABY type ZVCXI_XCDC_TT_CHABY .
  data I_ICODE type ZVCXI_XCDC_TT_ICODE .
  data I_ICORE type ZVCXI_XCDC_TT_ICORE .
  data R_DATA type ref to DATA .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data R_MSG type ref to /VCXI/CL_CKXM_MESSAGE .
  data S_COL type LVC_S_COL .
  data S_ROW type LVC_S_ROW .
  data S_ROW_NO type LVC_S_ROID .
  data T_TC200_ALL type YT_TC200 .
  data T_TD300 type YT_TD300 .
  data T_TD300_ALL type YT_TD300 .

  methods ADD_TO_TR
    importing
      !IF_DELETE type ABAP_BOOL default ABAP_FALSE
      !IT_TD300 type YT_TD300
    raising
      /VCXI/CX_CKX .
  type-pools STRHI .
  methods GET_REQUESTS
    importing
      !IT_TD300 type YT_TD300
    returning
      value(RT_REQUEST) type STRHI_REQUESTS_WD
    raising
      /VCXI/CX_CKX .
  methods GET_TABKEY
    importing
      !IF_TABNAME type TABNAME
      !IT_TABLE type STANDARD TABLE
    returning
      value(RT_TABKEY) type SFW_T_TRANSKEY
    raising
      /VCXI/CX_CKX .
  methods GET_TRKORR
    importing
      !IT_TD300 type YT_TD300
    returning
      value(RT_TRKORR) type TRKORRS
    raising
      /VCXI/CX_CKX .
  methods GET_CR_STATUS
    importing
      !IS_TD300 type ZVCXI_XCD_TD300 optional
      !IT_TD300 type YT_TD300 optional
    returning
      value(RF_STACR) type ZVCXI_XCDCU_STACR
    raising
      /VCXI/CX_CKX .
  methods GET_BASE_DATA
    raising
      /VCXI/CX_CKX .
  methods CHECK_SEL
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods INIT_LOCKED
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_ROWS
    exporting
      !ET_ROW type LVC_T_ROW
      !ES_LAST_ROW type LVC_S_ROW
    raising
      /VCXI/CX_CKX .
  methods REGISTER_F4_FIELDS
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE
    importing
      !IF_FIELDNAME type FIELDNAME
      !IF_STYLE type LVC_STYLE
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods INIT_STYLE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods SET_EVENT
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA
    importing
      !IR_DATA type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods GET_LAYOUT
    returning
      value(RS_LAYOUT) type LVC_S_LAYO
    raising
      /VCXI/CX_CKX .
  methods GET_TOOLBAR_EXCLUDING
    returning
      value(RT_TOOLBAR_EXCLUDING) type UI_FUNCTIONS
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DATA_CHANGED
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods HANDLE_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods GET_CURRENT_CR
    raising
      /VCXI/CX_CKX .
private section.

  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
endclass. "ZCL_VCXI_XCDCU_GRID_CONDREC_TR definition
class ZCL_VCXI_XCDCU_GRID_CONDREC_TR implementation.
method ADD_TO_TR.

  data:  LF_GUID           type        /VCXI/CKX_GUID,
         LF_ERROR          type        ABAP_BOOL,
         LF_KORRNR         type        TRKORR,
         LF_ANSWER         type        CHAR01.
  data:  LS_TD300          type        ZVCXI_XCD_TD300.
  data:  LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT,
         LR_OBJECT_ACTION  type ref to /VCXI/IF_CKX_OBJECT_ACTION,
         LR_CX_CKX         type ref to /VCXI/CX_CKX.

*** Do you really wann delete??
  if IF_DELETE eq ABAP_TRUE.
    call function 'POPUP_TO_CONFIRM'
      exporting
        TITLEBAR       = 'Delete selected Condition Records'(Q01)
        TEXT_QUESTION  = 'Do you really wanna delete the selected Condition Records?'(Q02)
        TEXT_BUTTON_1  = 'Yes'(Q03)
        DEFAULT_BUTTON = '1'
      importing
        ANSWER         = LF_ANSWER
      exceptions
        TEXT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC ne 0 or LF_ANSWER eq 'A'.
      exit.
    endif.
  endif.

  try.
***     Popup to pick Transport
      call function 'G_TRANS_NUMBER'
        exporting
          CATEGORY  = 'CUST'
        importing
          KORRNR    = LF_KORRNR
        exceptions
          NO_NUMBER = 1
          others    = 2.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***     Open Transport
      call function 'ZVCXI_XCDC_DB_OPEN_TRANSPORT'
        in update task
        exporting
          IF_TRKORR = LF_KORRNR.

***------------------------------------------------------------------------------------------------
***   Save Condition Record
      loop at IT_TD300 into LS_TD300.
        move LS_TD300-GCORE to LF_GUID.
        LR_OBJECT = ZCL_VCXI_XCDC_CONDREC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

        if LR_OBJECT is bound.

          try.
              move LR_OBJECT ?to LR_OBJECT_ACTION.
            catch CX_SY_MOVE_CAST_ERROR.
              clear: LR_OBJECT, LR_OBJECT_ACTION.
              LF_ERROR = ABAP_TRUE.
          endtry.

          if LR_OBJECT_ACTION is bound.

            try.
***         Request Transport
                LR_OBJECT_ACTION->HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_REQ_TR ).

***         Delete if needed
                if IF_DELETE eq ABAP_TRUE.
                  LR_OBJECT_ACTION->HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_DELETE ).
                endif.

***         Save Record
                LR_OBJECT_ACTION->HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_SAVE ).

***         Free Record
                LR_OBJECT_ACTION->HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCDC_CONDREC=>C_FCODE_CONDREC_FREE ).

              catch /VCXI/CX_CKX.
                clear: LR_OBJECT, LR_OBJECT_ACTION.
                LF_ERROR = ABAP_TRUE.
            endtry.

          endif.
        else.
          LF_ERROR = ABAP_TRUE.
        endif.

        if LF_ERROR eq ABAP_TRUE.
          if IF_DELETE is initial.
***         Condition Record &1 can't be add to Transport.
            ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDCU'
                                    IF_MSGTY = 'E'
                                    IF_MSGNO = '213'
                                    IF_MSGV1 = LS_TD300-ICORE ).
          else.
***         Condition Record &1 can't be deleted and add to Transport.
            ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDCU'
                                    IF_MSGTY = 'E'
                                    IF_MSGNO = '214'
                                    IF_MSGV1 = LS_TD300-ICORE ).
          endif.
        else.
          if IF_DELETE is initial.
***         Condition Record &1 is added to Transport.
            ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDCU'
                                    IF_MSGTY = 'S'
                                    IF_MSGNO = '215'
                                    IF_MSGV1 = LS_TD300-ICORE ).
          else.
***         Condition Record &1 can't be deleted and add to Transport.
            ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCDCU'
                                    IF_MSGTY = 'S'
                                    IF_MSGNO = '216'
                                    IF_MSGV1 = LS_TD300-ICORE ).
          endif.
        endif.

      endloop.

***------------------------------------------------------------------------------------------------
***   Write Transport
      call function 'ZVCXI_XCDC_DB_CLOSE_TRANSPORT'
        in update task.

      commit work and wait.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      rollback work.
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method CHANGE_STYLE.

  data:          LS_STYL              type          LVC_S_STYL.
  data:          LT_STYL              type table of LVC_S_STYL.

*** --------------------------------------------------------------------------------------------
*** Set Style Details
*** Get Style Table
  move CT_STYL to LT_STYL.
  clear CT_STYL.

*** Set Fieldname and Style
  clear LS_STYL.
  LS_STYL-FIELDNAME   = IF_FIELDNAME.
  LS_STYL-STYLE       = IF_STYLE.
  append LS_STYL      to LT_STYL.

*** Add Style Table
  sort LT_STYL.
  CT_STYL[] = LT_STYL[].

endmethod.
method CHECK_CHANGED_DATA.

  check ME->R_GRID is bound.
  ME->R_GRID->CHECK_CHANGED_DATA( ).

endmethod.
method CHECK_SEL.

  data: LT_CELL type LVC_T_CELL,
        LT_ROW  type LVC_T_ROW.

  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

*** Delete is only available if Cells are selected
  if lines( LT_CELL ) gt 0 or
     lines( LT_ROW )  gt 0.
    move ABAP_TRUE to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CONSTRUCTOR.

  move II_ICORE          to ME->I_ICORE.
  move II_ICODE          to ME->I_ICODE.
  move II_CHABY          to ME->I_CHABY.
  move II_CHAAT_DATE     to ME->I_CHAAT_DATE.
  move II_CHAAT_TIME     to ME->I_CHAAT_TIME.
  move IF_TABNAME        to ME->F_TABNAME.
  move IF_CONTAINER_NAME to ME->F_CONTAINER_NAME.

*** Create Data Reference to Grid Data
  create data ME->R_DATA type table of (ME->F_TABNAME).

*** Request Refresh
  move ABAP_TRUE to ME->F_REFRESH_ALL_REQ.
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** Create Message
  create object ME->R_MSG.

  ME->GET_BASE_DATA( ).
  ME->GET_CURRENT_CR( ).

endmethod.
method DO_FREE.

*** Free Grid
  if ME->R_GRID is bound.

*** Check for Changes
    ME->R_GRID->CHECK_CHANGED_DATA( ).

    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

endmethod.
method GET_BASE_DATA.

  data:          LF_GUID             type          /VCXI/CKX_GUID.
  data:          LS_TD300            type          ZVCXI_XCD_TD300,
                 LS_LOG              type          /VCXI/CKX_S_LOG,
                 LS_LOG_EXT          type          /VCXI/CKX_S_LOG_EXT.
  data:          LT_TC200            type          YT_TC200.
  data:          LR_CONDREC          type ref to   ZCL_VCXI_XCDC_CONDREC.

  select * from ZVCXI_XCD_TC200
         into table LT_TC200
         where ICODE in ME->I_ICODE.

*** Select the General Base Data
  select * from ZVCXI_XCD_TD300
         into table ME->T_TD300
         for all entries in LT_TC200
         where ICORE in ME->I_ICORE
           and GCODE = LT_TC200-GCODE
           and CHABY in ME->I_CHABY.

  loop at ME->T_TD300 into LS_TD300.

*** Get Log Data
    move-corresponding LS_TD300 to LS_LOG.
    LS_LOG_EXT = /VCXI/CL_CKX_SERVICE=>GET_LOG_EXT( IS_LOG = LS_LOG ).

*** Display allowed
    try.
        move LS_TD300-GCORE to LF_GUID.
        LR_CONDREC ?= ZCL_VCXI_XCDC_CONDREC=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

***     Check Authorization
        ZCL_VCXI_XCDC_CONDREC=>CHECK_AUTH( IF_ACTVT   = ZCL_VCXI_XCDC_DVCCOND=>C_ACTVT_DISPLAY
                                           IR_CONDREC = LR_CONDREC ).
      catch /VCXI/CX_CKX.
        delete ME->T_TD300.
        continue.
      catch CX_SY_MOVE_CAST_ERROR.
        delete ME->T_TD300.
        continue.
    endtry.

*** Data is not in Range -> delete it
    check LS_LOG_EXT-CHAAT_DATE not in ME->I_CHAAT_DATE or
          LS_LOG_EXT-CHAAT_TIME not in ME->I_CHAAT_TIME.
    delete ME->T_TD300.

  endloop.

endmethod.
method GET_CR_STATUS.

  data: LF_END_LINE     type           I value 10,
        LF_END_LINE_ADD type           I.
  data: LS_REQUEST      type           STRHI_REQUEST_WD,
        LS_REQUEST_OV   type           ZVCXI_XCDCU_S_REQUEST_OV.
  data: LT_TD300        type           YT_TD300,
        LT_REQUEST      type           STRHI_REQUESTS_WD,
        LT_REQUEST_OV   type table of  ZVCXI_XCDCU_S_REQUEST_OV.

*** Get one Status
  if IS_TD300 is supplied.
    concatenate 'Condition Record:'(ST1) IS_TD300-ICORE into RF_STACR separated by SPACE.

    read table ME->T_TD300_ALL with key GCORE = IS_TD300-GCORE transporting no fields.
    if SY-SUBRC  ne 0.
      concatenate RF_STACR 'is deleted and'(ST2) into RF_STACR separated by SPACE.
    else.

    endif.

    append IS_TD300 to LT_TD300.
    LT_REQUEST = ME->GET_REQUESTS( IT_TD300 = LT_TD300 ).

    case LINES( LT_REQUEST ).
      when 0.
        concatenate RF_STACR 'has no Transport assignment.'(ST3) into RF_STACR separated by SPACE.

      when 1.
        read table LT_REQUEST into LS_REQUEST index 1.
        concatenate RF_STACR 'is assigned to Transport:'(ST5) LS_REQUEST-H-TRKORR '-' LS_REQUEST-H-AS4TEXT into RF_STACR separated by SPACE.
        if LS_REQUEST-H-STRKORR is not initial.
          concatenate RF_STACR '(' LS_REQUEST-H-STRKORR ')' into RF_STACR separated by SPACE.
        endif.

      when others.
        concatenate RF_STACR 'has more than one Transport assignment.'(ST4) into RF_STACR separated by SPACE.

    endcase.
  endif.

*** Get Information of one or more via PopUp
  if IT_TD300 is supplied.

    LT_REQUEST = ME->GET_REQUESTS( IT_TD300 = IT_TD300 ).
*** Get Output Table
    loop at LT_REQUEST into LS_REQUEST.
      move-corresponding LS_REQUEST-H to LS_REQUEST_OV.
      collect LS_REQUEST_OV into LT_REQUEST_OV.
    endloop.

    LF_END_LINE_ADD = lines( LT_REQUEST ).
    add LF_END_LINE_ADD to LF_END_LINE.

*** Open PopUp
    call function 'REUSE_ALV_POPUP_TO_SELECT'
      exporting
       I_TITLE                       = 'Transport Overview'(STT)
       I_SELECTION                   = ABAP_FALSE
       I_ALLOW_NO_SELECTION          = ABAP_TRUE
       I_SCREEN_START_COLUMN         = 10
       I_SCREEN_START_LINE           = 3
       I_SCREEN_END_COLUMN           = 120
       I_SCREEN_END_LINE             = LF_END_LINE
       I_TABNAME                     = 'LT_REQUEST_OV'
       I_STRUCTURE_NAME              = 'ZVCXI_XCDCU_S_REQUEST_OV'
      tables
        T_OUTTAB                      = LT_REQUEST_OV
     exceptions
       PROGRAM_ERROR                 = 1
       others                        = 2
              .
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method GET_CURRENT_CR.

  select * from ZVCXI_XCD_TD300
  into table ME->T_TD300_ALL.

  select * from ZVCXI_XCD_TC200
  into table ME->T_TC200_ALL.

endmethod.
method GET_FIELDCAT.

  field-symbols: <S_FCAT>           type        LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = ME->F_TABNAME
    changing
      CT_FIELDCAT            = RT_FCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'GCORE' or 'GCODE' or 'CREAT' or 'CHAAT' or 'CREBY' or 'CHABY'
        or 'STRIPDESCR_SCRIM' or 'STRIPDESCR_FUNCT' or 'STRIPDESCR_DEFAU'.
        move ABAP_TRUE to <S_FCAT>-TECH.
    endcase.
  endloop.


endmethod.
method GET_GRID_DATA.

  data:          LS_TD300            type          ZVCXI_XCD_TD300,
                 LS_TC200            type          ZVCXI_XCD_TC200,
                 LS_LOG              type          /VCXI/CKX_S_LOG,
                 LS_LOG_EXT          type          /VCXI/CKX_S_LOG_EXT,
                 LS_CR_TR_GRID       type          ZVCXI_XCDCU_S_CR_TR_GRID.
  field-symbols: <T_DATA>            type standard table,
                 <S_DATA>            type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

  free: <T_DATA>.

  loop at ME->T_TD300 into LS_TD300.

    move-corresponding LS_TD300 to LS_CR_TR_GRID.

*** Get Log Data
    move-corresponding LS_TD300 to LS_LOG.
    LS_LOG_EXT = /VCXI/CL_CKX_SERVICE=>GET_LOG_EXT( IS_LOG = LS_LOG ).

    move-corresponding LS_LOG_EXT to LS_CR_TR_GRID.

*** Get Condition Definition ID
    read table ME->T_TC200_ALL with key GCODE = LS_TD300-GCODE into LS_TC200.
    move LS_TC200-ICODE to LS_CR_TR_GRID-ICODE.

*** Get Status Informations
    LS_CR_TR_GRID-STACR = ME->GET_CR_STATUS( IS_TD300 = LS_TD300 ).

*** --------------------------------------------------------------------------------------------
*** Add Entry
    append initial line to <T_DATA> assigning <S_DATA>.
    move-corresponding LS_CR_TR_GRID to <S_DATA>.

  endloop.



endmethod.
method GET_LAYOUT.

  move ABAP_TRUE to RS_LAYOUT-CWIDTH_OPT.
  move 'T_STYL'  to RS_LAYOUT-STYLEFNAME.
  if ME->F_DESCR is not initial.
    move ME->F_DESCR to RS_LAYOUT-GRID_TITLE.
  endif.

*** "'X'->EDIT" would lead to make the hole ALV Editable
*** and you have to "Style" each field editable or not
  move ''       to RS_LAYOUT-EDIT.

*** Set Toolbar to Activ
  move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  move 'A'        to RS_LAYOUT-SEL_MODE.

endmethod.
method GET_REQUESTS.

  data:  LF_TRKORR           type        TRKORR.
  data:  LS_REQUEST          type        STRHI_REQUEST_WD.
  data:  LT_TRKORR           type        TRKORRS.

***----------------------------------------------------------------------------
*** Get Transports
  LT_TRKORR = ME->GET_TRKORR( IT_TD300 = IT_TD300 ).

***----------------------------------------------------------------------------
*** Prepare Request List
  loop at LT_TRKORR into LF_TRKORR.
    move LF_TRKORR to LS_REQUEST-H-TRKORR.
    call function 'TRINT_READ_REQUEST_WD'
      exporting
        IV_READ_E070  = ABAP_TRUE
        IV_READ_E07T  = ABAP_TRUE
      changing
        CS_REQUEST_WD = LS_REQUEST
      exceptions
        ERROR_OCCURED = 1
        others        = 2.
    if SY-SUBRC <> 0.
      continue.
    endif.
    append LS_REQUEST to RT_REQUEST.
  endloop.

endmethod.
method GET_SELECTED_ROWS.

  data:          LS_CELL              type        LVC_S_CELL,
                 LS_ROW               type        LVC_S_ROW.
  data:          LT_CELL              type        LVC_T_CELL,
                 LT_ROW               type        LVC_T_ROW.

*** Get Cursor in Grid
  ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
  if lines( LT_CELL ) gt 0.

    loop at LT_CELL into LS_CELL.
      append LS_CELL-ROW_ID to ET_ROW.
***   Get last Index
      if ES_LAST_ROW-INDEX lt LS_CELL-ROW_ID-INDEX.
        move LS_CELL-ROW_ID to ES_LAST_ROW.
      endif.
    endloop.

  endif.

*** Get Selected Rows
  ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
  if lines( LT_ROW ) gt 0.

    append lines of LT_ROW to ET_ROW.

    loop at LT_ROW into LS_ROW.
***   Get last Index
      if ES_LAST_ROW-INDEX lt LS_ROW-INDEX.
        move LS_ROW to ES_LAST_ROW.
      endif.
    endloop.

  endif.

endmethod.
method GET_TABKEY.

  data:          LF_NC_KEYF_EXIST type          ABAP_BOOL,
                 LF_CKEYL         type          I,
                 LF_TABKEY        type          TROBJ_NAME.
  data:          LS_DFIES         type          DFIES.
  data:          LT_DFIES         type table of DFIES.
  field-symbols: <S_TABLE>        type          any,
                 <F_XKEY_TABLE>   type          X,
                 <F_XKEY_KORRTAB> type          X.

  check IT_TABLE is not initial.

***----------------------------------------------------------------------------
*** Determine total length of char-like key-fields.
  call function 'TR_NAMETAB_GET'
    exporting
      IV_TABNAME = IF_TABNAME
    importing
      ET_DFIES   = LT_DFIES
    exceptions
      NOT_FOUND  = 1.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  loop at LT_DFIES into LS_DFIES where KEYFLAG = 'X'.
    if  LS_DFIES-INTTYPE na 'CDNST'.
      move ABAP_TRUE to LF_NC_KEYF_EXIST.
      exit.
    endif.
    add LS_DFIES-INTLEN to LF_CKEYL.
  endloop.

***----------------------------------------------------------------------------
*** Write Lines
  loop at IT_TABLE assigning <S_TABLE>.
    clear LF_TABKEY.

    assign <S_TABLE>    to <F_XKEY_TABLE>   casting.
    assign LF_TABKEY    to <F_XKEY_KORRTAB> casting.
    move <F_XKEY_TABLE> to <F_XKEY_KORRTAB>.

    move LF_TABKEY(LF_CKEYL) to LF_TABKEY.

*** Handling of non-char Key Fields
    if LF_NC_KEYF_EXIST eq ABAP_TRUE.
      move '*'  to LF_TABKEY+LF_CKEYL.
    endif.

    collect LF_TABKEY into RT_TABKEY.
  endloop.

endmethod.
method GET_TOOLBAR_EXCLUDING.

*** Exlcude All Functions
  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL to RT_TOOLBAR_EXCLUDING.

endmethod.
method GET_TRKORR.

  data:          LS_E071K         type          E071K.
  data:          LT_E071          type table of E071,
                 LT_E071K         type table of E071K,
                 LT_TABKEY        type table of TROBJ_NAME.

  check IT_TD300 is not initial.

***----------------------------------------------------------------------------
*** Check Entries Exist
  select *
         into table LT_E071
         from E071
         where PGMID    eq 'R3TR'
           and OBJECT   eq 'TABU'
           and OBJ_NAME eq 'ZVCXI_XCD_TD300'.
  check SY-SUBRC eq 0.

*** Find Transports with matching Key
  select *
         into table LT_E071K
         from E071K
         for all entries in LT_E071
         where TRKORR  eq LT_E071-TRKORR
           and PGMID   eq LT_E071-PGMID
           and OBJECT  eq LT_E071-OBJECT
           and OBJNAME eq 'ZVCXI_XCD_TD300'.
  check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Build Key Table
  LT_TABKEY = ME->GET_TABKEY( IF_TABNAME = 'ZVCXI_XCD_TD300'
                              IT_TABLE   = IT_TD300 ).

***----------------------------------------------------------------------------
  loop at LT_E071K into LS_E071K.
    read table LT_TABKEY with key TABLE_LINE = LS_E071K-TABKEY
                         transporting no fields.
    if SY-SUBRC eq 0.
      collect LS_E071K-TRKORR into RT_TRKORR.
    endif.
  endloop.





endmethod.
method HANDLE_DATA_CHANGED.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

*** Get Current Cell
  if ME->R_GRID is bound.
    ME->R_GRID->GET_CURRENT_CELL( importing ES_ROW_ID = ME->S_ROW
                                            ES_COL_ID = ME->S_COL
                                            ES_ROW_NO = ME->S_ROW_NO ).
  endif.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LF_DISABLED     type        ABAP_BOOL.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

***----------------------------------------------------------------------------
***   Insert Toolbar elements Add and Delete
      clear LS_TOOLBAR.
      move C_FUNC_ADD_TO_TR                 to LS_TOOLBAR-FUNCTION.
      move 'Add To Transport'(010)          to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON                   to LS_TOOLBAR-BUTN_TYPE.
      move ICON_IMPORT_TRANSPORT_REQUEST    to LS_TOOLBAR-ICON.
      move LF_DISABLED                      to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                     to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_DEL_WR_TR                 to LS_TOOLBAR-FUNCTION.
      move 'Delete & Write Transport'(011)  to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON                   to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE                      to LS_TOOLBAR-ICON.
      move LF_DISABLED                      to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                     to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move C_FUNC_TR_OV                     to LS_TOOLBAR-FUNCTION.
      move 'Transport Overview'(012)        to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON                   to LS_TOOLBAR-BUTN_TYPE.
      move ICON_SELECT_DETAIL               to LS_TOOLBAR-ICON.
      move LF_DISABLED                      to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR                     to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND.

  data:          LS_CELL         type          LVC_S_CELL,
                 LS_ROW          type          LVC_S_ROW.
  data:          LT_CELL         type          LVC_T_CELL,
                 LT_ROW          type          LVC_T_ROW,
                 LT_TD300        type          YT_TD300.
  data:          LR_CX_CKX       type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>        type standard table,
                 <S_TD300>       type          ZVCXI_XCD_TD300,
                 <S_DATA>        type          any.

  try.

      ME->GET_CURRENT_CR( ).

***   Get Value Data
      assign ME->R_DATA->* to <T_DATA>.
      free: <T_DATA>.
      ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

      ME->R_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
      ME->R_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).

***   Get Selected Condition Value's
      loop at LT_CELL into LS_CELL.
        read table <T_DATA> assigning <S_DATA> index LS_CELL-ROW_ID-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_TD300 assigning <S_TD300>.
        move-corresponding <S_DATA> to <S_TD300>.
        move SY-MANDT               to <S_TD300>-MANDT.
      endloop.

      loop at LT_ROW into LS_ROW.
        read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
        check SY-SUBRC = 0.

        append initial line to LT_TD300 assigning <S_TD300>.
        move-corresponding <S_DATA> to <S_TD300>.
        move SY-MANDT               to <S_TD300>-MANDT.
      endloop.

      case E_UCOMM.

        when C_FUNC_ADD_TO_TR.
***       Add Condition Records to Transport
          if ME->CHECK_SEL( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna add to Transport.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCDCU'
                F_MSGNO = '210'.
          endif.

          ME->ADD_TO_TR( IT_TD300 = LT_TD300 ).

        when C_FUNC_DEL_WR_TR.
***       Delete Condition Records and Write Transport
          if ME->CHECK_SEL( ) eq ABAP_FALSE.
***         No Row Selected. Please Select all Row's you wanna Delete.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCDCU'
                F_MSGNO = '211'.
          endif.

          ME->ADD_TO_TR( IF_DELETE = ABAP_TRUE
                         IT_TD300  = LT_TD300 ).

        when C_FUNC_TR_OV.
***       Show Condition Record Transport Overview
          if ME->CHECK_SEL( ) eq ABAP_FALSE.
***         No Row Selected. Please Select at least one Row.
            raise exception type /VCXI/CX_CKX
             exporting
                F_MSGTY = 'E'
                F_MSGID = 'ZVCXI_XCDCU'
                F_MSGNO = '212'.
          endif.

          ME->GET_CR_STATUS( IT_TD300  = LT_TD300 ).

      endcase.

      ME->F_REFRESH_REQ = ABAP_TRUE.
      ME->GET_CURRENT_CR( ).

      if ME->R_MSG->T_MSG is not initial.
        ME->R_MSG->DISPLAY_MSG( ).
        ME->R_MSG->INIT_MSG( ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method INIT_CONTAINER.

  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = ME->F_CONTAINER_NAME
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_GRID.

  if ME->R_GRID is not bound.
    create object ME->R_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Enter as Event
    ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

    ME->SET_EVENT( ).

*** Register F4-Fields
    ME->REGISTER_F4_FIELDS( ).

  endif.

endmethod.
method INIT_LOCKED.


endmethod.
method INIT_STYLE.

***----------------------------------------------------------------------------
*** Set Right Style Definition based on is any change allowed
  if ME->F_LOCKED eq ABAP_TRUE.
    ME->F_STYLE_ENABLED    = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
  else.
    ME->F_STYLE_ENABLED    = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
  endif.

*** Set general Style Disabled
  ME->F_STYLE_DISABLED = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.

endmethod.
method REFRESH_GRID.

  data:          LS_LAYOUT            type          LVC_S_LAYO.
  data:          LT_TOOLBAR_EXCLUDING type          UI_FUNCTIONS,
                 LT_FCAT              type          LVC_T_FCAT.
  field-symbols: <T_DATA>             type standard table.

  check ME->F_REFRESH_REQ eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_REFRESH_REQ.

  if ME->F_REFRESH_ALL_REQ eq ABAP_TRUE.
    move ABAP_FALSE to ME->F_REFRESH_ALL_REQ.
    ME->DO_FREE( ).
  endif.

  ME->INIT_LOCKED( ).

*** Initialize if needed
  ME->INIT_CONTAINER( ).
  ME->INIT_GRID( ).
  ME->INIT_STYLE( ).

*** Get Grid Data
  assign ME->R_DATA->* to <T_DATA>.
  free: <T_DATA>.
  ME->GET_GRID_DATA( IR_DATA = ME->R_DATA ).

*** Get Layout, Field Catalog and Toolbar Exclusion
  move ME->GET_FIELDCAT( )          to LT_FCAT.
  move ME->GET_LAYOUT( )            to LS_LAYOUT.
  move ME->GET_TOOLBAR_EXCLUDING( ) to LT_TOOLBAR_EXCLUDING.

*** Relfreh ALV Grid
  ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY(
    exporting
      IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
      IS_LAYOUT                     = LS_LAYOUT
    changing
      IT_FIELDCATALOG               = LT_FCAT
      IT_OUTTAB                     = <T_DATA>
    exceptions
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Set Current Cell
  ME->R_GRID->SET_CURRENT_CELL_VIA_ID( IS_ROW_ID    = ME->S_ROW
                                       IS_COLUMN_ID = ME->S_COL
                                       IS_ROW_NO    = ME->S_ROW_NO ).

endmethod.
method REGISTER_F4_FIELDS.

  data:  LS_F4        type                   LVC_S_F4,
         LS_FCAT      type                   LVC_S_FCAT.
  data:  LT_F4        type                   LVC_T_F4,
         LT_FCAT      type                   LVC_T_FCAT.

***----------------------------------------------------------------------------
*** Get Field Catalog
  LT_FCAT = ME->GET_FIELDCAT( ).

***----------------------------------------------------------------------------
*** Register F4 Help for all relevant Fields
  loop at LT_FCAT into LS_FCAT.

*** If there is no F4Help at fieldcat - check explicit Field of Table
    if LS_FCAT-F4AVAILABL eq ABAP_FALSE.

      call function 'F4IF_DETERMINE_SEARCHHELP'
        exporting
          TABNAME           = LS_FCAT-DOMNAME
          FIELDNAME         = SPACE
        exceptions
          FIELD_NOT_FOUND   = 1
          NO_HELP_FOR_FIELD = 2
          INCONSISTENT_HELP = 3
          others            = 4.

      if SY-SUBRC ne 0.

        call function 'F4IF_DETERMINE_SEARCHHELP'
          exporting
            TABNAME           = LS_FCAT-REF_TABLE
            FIELDNAME         = LS_FCAT-FIELDNAME
          exceptions
            FIELD_NOT_FOUND   = 1
            NO_HELP_FOR_FIELD = 2
            INCONSISTENT_HELP = 3
            others            = 4.

      endif.
      if SY-SUBRC eq 0.
        move ABAP_TRUE to LS_FCAT-F4AVAILABL.
      endif.
    endif.


    if LS_FCAT-F4AVAILABL eq ABAP_TRUE.
***------------------------------------------------------------------
***   Add to Register Table
      clear LS_F4.
      move LS_FCAT-FIELDNAME to LS_F4-FIELDNAME.
      move 'X'               to LS_F4-REGISTER.
      move 'X'               to LS_F4-CHNGEAFTER.
      insert LS_F4 into table LT_F4.
    endif.
  endloop.

  ME->R_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

endmethod.
method SET_EVENT.

  set handler ME->HANDLE_DATA_CHANGED_FINISHED for ME->R_GRID.
  set handler ME->HANDLE_DATA_CHANGED          for ME->R_GRID.

*** Add Event for Double Click, UserCommand and Toolbar
  set handler ME->HANDLE_USER_COMMAND for ME->R_GRID.
  set handler ME->HANDLE_TOOLBAR      for ME->R_GRID.

endmethod.
