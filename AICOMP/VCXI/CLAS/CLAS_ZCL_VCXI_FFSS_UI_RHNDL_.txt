
class ZCL_VCXI_FFSS_UI_RHNDL definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  interfaces /VCXI/IF_VKSU_UIFW .

  constants C_CLSUI_MS_CORE type /VCXI/VKSC_CLSUI value 'MS_CORE' ##NO_TEXT.
  constants C_DYNNR_CORE type DYNNR value '0110' ##NO_TEXT.
  data F_CURSOR type SCRFNAME .
  data S_RHNDL_VIS type ZVCXI_FFSS_S_RHNDL_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_RHNDL_VIS
    importing
      !IS_RHNDL_VIS type ZVCXI_FFSS_S_RHNDL_VIS
    raising
      /VCXI/CX_CKX .
  methods GET_REGISTERED_UI_INFO
    importing
      !IF_CLSUI type /VCXI/VKSC_CLSUI
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_PICTURE_RHNDL type ref to ZCL_VCXI_FFS_PICTURE_RHNDL .
  data R_PR_RHNDL type ref to ZCL_VCXI_FFSS_PR_RHNDL .
  data R_REGISTERED_UI_MS_CORE type ref to /VCXI/CL_VKSU_CLSUI .
  data R_UI_MS_CORE type ref to ZCL_VCXI_FFSS_UI_MS_CORE .
  data S_DYNP_BLANK type /VCXI/CKX_S_DYNP_KEY .

  methods DISPLAY_PICTURE
    raising
      /VCXI/CX_CKX .
  methods DISPLAY_SUBSCREEN
    raising
      /VCXI/CX_CKX .
  methods INIT_BLANK_UI
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods OPEN_SUBSCREEN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_CLSUI) type ref to /VCXI/CL_VKSRU_CLSUI
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FFSS_UI_RHNDL definition
class ZCL_VCXI_FFSS_UI_RHNDL implementation.
  method /VCXI/IF_VKSU_UIFW~DO_MODIFY_SCREEN.

    if ME->R_REGISTERED_UI_MS_CORE is bound.
      ME->R_REGISTERED_UI_MS_CORE->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                                     IF_DYNNR = IF_DYNNR ).
    endif.

  endmethod.
  method /VCXI/IF_VKSU_UIFW~DO_USER_COMMAND.

    data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.

***   MS Core UI Command
        if ME->R_REGISTERED_UI_MS_CORE is bound.
          ME->R_REGISTERED_UI_MS_CORE->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method /VCXI/IF_VKSU_UIFW~REFRESH_SCREEN.

    ME->R_UIFW->REFRESH_SCREEN( ).

  endmethod.
  method /VCXI/IF_VKSU_UIFW~REGISTER_UI.

    data: LR_UI_MS_CORE         type ref to ZCL_VCXI_FFSS_UI_MS_CORE.

    try.
***     Check if UI is MS Core UI
        move IR_UI ?to LR_UI_MS_CORE.

      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_UI_MS_CORE.
    endtry.

    if LR_UI_MS_CORE is bound.
      do.
        if ME->R_REGISTERED_UI_MS_CORE is not bound.
          exit.
        endif.
        ME->R_REGISTERED_UI_MS_CORE->DEACTIVATE( ).
      enddo.

      move IR_UI to ME->R_REGISTERED_UI_MS_CORE.
    endif.

  endmethod.
  method /VCXI/IF_VKSU_UIFW~UNREGISTER_UI.

    if IR_UI eq ME->R_REGISTERED_UI_MS_CORE.
      clear ME->R_REGISTERED_UI_MS_CORE.
    endif.

  endmethod.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FFSS_UI_RHNDL_BIND'
      exporting
        IR_UI_RHNDL = ME
      importing
        ES_DYNP     = ME->S_DYNP.

*** Create Roll Winding Picture
    if ME->R_PICTURE_RHNDL is not bound.
      create object ME->R_PICTURE_RHNDL
        exporting
          IR_GATE           = ME->R_GATE
          IR_UIGATE         = ME->R_UIGATE
          IF_CONTAINER_NAME = '0100CC_PICTURE'.
    endif.

    if ME->R_REGISTERED_UI_MS_CORE is bound.
      ME->R_REGISTERED_UI_MS_CORE->ACTIVATE( ).
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_RHNDL.
      catch CX_SY_MOVE_CAST_ERROR.

***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.

    endtry.

*** Initialize Blank UI
    ME->INIT_BLANK_UI( ).

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

*** Free Roll Winding Picture
    if ME->R_PICTURE_RHNDL is bound.
      ME->R_PICTURE_RHNDL->DO_FREE( ).
      clear ME->R_PICTURE_RHNDL.
    endif.

*** Deactivate Registered UI MS Core
    if ME->R_REGISTERED_UI_MS_CORE is bound.
      ME->R_REGISTERED_UI_MS_CORE->DEACTIVATE( ).
    endif.

  endmethod.
  method DISPLAY_PICTURE.

    data: LF_RWSID  type ZVCXI_FFS_RWSID,
          LF_RWDIR  type ZVCXI_FFS_RWDIR,
          LF_EYEMP  type ZVCXI_FFS_EYEMP.

***--------------------------------------------------------------------------------------
*** Get Roll Winding Information
    ME->R_PR_RHNDL->GET_RWSID( importing EF_RWSID = LF_RWSID ).
    ME->R_PR_RHNDL->GET_RWDIR( importing EF_RWDIR = LF_RWDIR ).
    ME->R_PR_RHNDL->GET_EYEMP( importing EF_EYEMP = LF_EYEMP ).

*** Refresh Winding Picture
    ME->R_PICTURE_RHNDL->REFRESH_PICTURE( IF_EYEMP = LF_EYEMP
                                          IF_RWDIR = LF_RWDIR
                                          IF_RWSID = LF_RWSID ).

  endmethod.
  method DISPLAY_SUBSCREEN.

    data: LT_GATE      type         /VCXI/VKSR_TT_GATE,
          LT_PRVDR_DEF type         /VCXI/VKSR_TT_PRVDR_DEF.
    data: LS_PRVDR_DEF type         /VCXI/VKSR_S_PRVDR_DEF.
    data: LR_GATE      type ref to  /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Get Children
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

    loop at LT_PRVDR_DEF into LS_PRVDR_DEF.

      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                       IF_INUSE = ABAP_TRUE ).

      read table LT_GATE into LR_GATE index 1.

      check LR_GATE               is bound and
            LR_GATE->GET_CLSUI( ) is not initial.

      ME->OPEN_SUBSCREEN( IR_GATE = LR_GATE ).

    endloop.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type        /VCXI/CKX_LOCKED,
          LF_INUSE  type        /VCXI/VKSR_INUSE.
    data: LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen according to the Solution Design
        loop at screen.

***--------------------------------------------------------------------------------------
***       Set Target Fields
          case ABAP_TRUE.

            when ME->S_RHNDL_VIS-FOVRR_RDITA.
              if    SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RLETA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RWGTA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RLEOF'.
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_RHNDL_VIS-FOVRR_RLETA.
              if    SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RDITA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RWGTA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RLEOF'.
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_RHNDL_VIS-FOVRR_RWGTA.
              if    SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RDITA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RLETA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RLEOF'.
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_RHNDL_VIS-FOVRR_RLEOF.
              if    SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RDITA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RLETA'
                 or SCREEN-NAME eq 'ZVCXI_FFSS_S_RHNDL_VIS-RWGTA' .
                move 0 to SCREEN-INPUT.
              endif.

          endcase.

***--------------------------------------------------------------------------------------
***       Set Minimum - Maximum Fields
          case ABAP_TRUE.

            when ME->S_RHNDL_VIS-FOVRR_RDIMM.
              if    SCREEN-GROUP1 eq 'LMM'
                 or SCREEN-GROUP1 eq 'WMM'.
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_RHNDL_VIS-FOVRR_RLEMM.
              if    SCREEN-GROUP1 eq 'DMM'
                 or SCREEN-GROUP1 eq 'WMM'.
                move 0 to SCREEN-INPUT.
              endif.

            when ME->S_RHNDL_VIS-FOVRR_RWGMM.
              if    SCREEN-GROUP1 eq 'DMM'
                 or SCREEN-GROUP1 eq 'LMM'.
                move 0 to SCREEN-INPUT.
              endif.

          endcase.

***--------------------------------------------------------------------------------------
***       Set Percentage Fields
          if ME->S_RHNDL_VIS-FOVRR_PERMM eq ABAP_TRUE.
***         Deactivate the min/max groups if percentage is active
            if    SCREEN-GROUP1 eq 'DMM'
               or SCREEN-GROUP1 eq 'LMM'
               or SCREEN-GROUP1 eq 'WMM'.
              move 0 to SCREEN-INPUT.
            endif.
          else.
***         Only set PPM read-only, don't touch the other groups here
            if SCREEN-GROUP1 eq 'PMM'.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

***--------------------------------------------------------------------------------------
***       Set Roll Length Optimization Fields
          if ME->S_RHNDL_VIS-RELOP_ACTIVE ne ABAP_TRUE and
             SCREEN-GROUP1 eq 'RLO'.
            SCREEN-INPUT  = 0.
            SCREEN-ACTIVE = 0.
          endif.

          modify screen.
        endloop.

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).


***     Lock everything if not in change mode
        loop at screen.
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.
          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

*** Initialize VIS
    ME->INIT_VIS( ).

*** Display Subscreen
    ME->DISPLAY_SUBSCREEN( ).

*** Display Picture of Winding Direction
    ME->DISPLAY_PICTURE( ).

*** Set Cursor
    set cursor field ME->F_CURSOR.
    clear ME->F_CURSOR.

  endmethod.
  method DO_UPDATE_RHNDL_VIS.

    check ME->R_PR_RHNDL is bound.


***--------------------------------------------------------------------------------------
*** Target Dimension
    if ME->S_RHNDL_VIS-FOVRR_RDITA ne IS_RHNDL_VIS-FOVRR_RDITA or
       ME->S_RHNDL_VIS-FOVRR_RLETA ne IS_RHNDL_VIS-FOVRR_RLETA or
       ME->S_RHNDL_VIS-FOVRR_RWGTA ne IS_RHNDL_VIS-FOVRR_RWGTA.
      ME->R_PR_RHNDL->SET_RDIMTA( IF_RDMTA = cond #( when IS_RHNDL_VIS-FOVRR_RDITA eq ABAP_TRUE then 'D'
                                                     when IS_RHNDL_VIS-FOVRR_RLETA eq ABAP_TRUE then 'L'
                                                     when IS_RHNDL_VIS-FOVRR_RWGTA eq ABAP_TRUE then 'W'
                                                     when IS_RHNDL_VIS-FOVRR_RLEOF eq ABAP_TRUE then 'O' )
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Diameter Target
    if ME->S_RHNDL_VIS-S_RDITA  ne IS_RHNDL_VIS-S_RDITA and
       IS_RHNDL_VIS-FOVRR_RDITA eq ABAP_TRUE.
      ME->R_PR_RHNDL->SET_RDITA( IS_RDITA = IS_RHNDL_VIS-S_RDITA
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Length Target
    if ME->S_RHNDL_VIS-S_RLETA  ne IS_RHNDL_VIS-S_RLETA and
       IS_RHNDL_VIS-FOVRR_RLETA eq ABAP_TRUE.
      ME->R_PR_RHNDL->SET_RLETA( IS_RLETA = IS_RHNDL_VIS-S_RLETA
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Weight Target
    if ME->S_RHNDL_VIS-S_RWGTA  ne IS_RHNDL_VIS-S_RWGTA and
       IS_RHNDL_VIS-FOVRR_RWGTA eq ABAP_TRUE.
      ME->R_PR_RHNDL->SET_RWGTA( IS_RWGTA = IS_RHNDL_VIS-S_RWGTA
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Length Optimization Factor
    if ME->S_RHNDL_VIS-RLEOF  ne IS_RHNDL_VIS-RLEOF and
       IS_RHNDL_VIS-FOVRR_RLEOF eq ABAP_TRUE.
      ME->R_PR_RHNDL->SET_RLEOF( IF_RLEOF = IS_RHNDL_VIS-RLEOF
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Minimum/Maximum Dimension
    if ME->S_RHNDL_VIS-FOVRR_RDIMM ne IS_RHNDL_VIS-FOVRR_RDIMM or
       ME->S_RHNDL_VIS-FOVRR_RLEMM ne IS_RHNDL_VIS-FOVRR_RLEMM or
       ME->S_RHNDL_VIS-FOVRR_RWGMM ne IS_RHNDL_VIS-FOVRR_RWGMM.
      ME->R_PR_RHNDL->SET_RDIMMM( IF_RDMMM = cond #( when IS_RHNDL_VIS-FOVRR_RDIMM eq ABAP_TRUE then 'D'
                                                     when IS_RHNDL_VIS-FOVRR_RLEMM eq ABAP_TRUE then 'L'
                                                     when IS_RHNDL_VIS-FOVRR_RWGMM eq ABAP_TRUE then 'W' )
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Diameter Minimum/Maximum
    if ME->S_RHNDL_VIS-S_RDIMI  ne IS_RHNDL_VIS-S_RDIMI and
       IS_RHNDL_VIS-FOVRR_RDIMM eq ABAP_TRUE.
      ME->R_PR_RHNDL->SET_RDIMI( IS_RDIMI = IS_RHNDL_VIS-S_RDIMI
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
    if ME->S_RHNDL_VIS-S_RDIMA  ne IS_RHNDL_VIS-S_RDIMA and
       IS_RHNDL_VIS-FOVRR_RDIMM eq ABAP_TRUE.
      ME->R_PR_RHNDL->SET_RDIMA( IS_RDIMA = IS_RHNDL_VIS-S_RDIMA
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Length Minimum/Maximum
    if ME->S_RHNDL_VIS-S_RLEMI  ne IS_RHNDL_VIS-S_RLEMI and
       IS_RHNDL_VIS-FOVRR_RLEMM eq ABAP_TRUE.
      ME->R_PR_RHNDL->SET_RLEMI( IS_RLEMI = IS_RHNDL_VIS-S_RLEMI
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
    if ME->S_RHNDL_VIS-S_RLEMA     ne IS_RHNDL_VIS-S_RLEMA and
       IS_RHNDL_VIS-FOVRR_RLEMM eq ABAP_TRUE.
      ME->R_PR_RHNDL->SET_RLEMA( IS_RLEMA = IS_RHNDL_VIS-S_RLEMA
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Roll Weight Minimum/Maximum
    if ME->S_RHNDL_VIS-S_RWGMI  ne IS_RHNDL_VIS-S_RWGMI and
       IS_RHNDL_VIS-FOVRR_RWGMM eq ABAP_TRUE.
      ME->R_PR_RHNDL->SET_RWGMI( IS_RWGMI = IS_RHNDL_VIS-S_RWGMI
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.
    if ME->S_RHNDL_VIS-S_RWGMA  ne IS_RHNDL_VIS-S_RWGMA and
       IS_RHNDL_VIS-FOVRR_RWGMM eq ABAP_TRUE.
      ME->R_PR_RHNDL->SET_RWGMA( IS_RWGMA = IS_RHNDL_VIS-S_RWGMA
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Percentage Minimum
    if     ME->S_RHNDL_VIS-S_PERMI     ne IS_RHNDL_VIS-S_PERMI
        or ME->S_RHNDL_VIS-FOVRR_PERMM ne IS_RHNDL_VIS-FOVRR_PERMM.

      if IS_RHNDL_VIS-FOVRR_PERMM eq ABAP_TRUE.
        ME->R_PR_RHNDL->SET_PERMI( IS_PERMI = IS_RHNDL_VIS-S_PERMI
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->R_PR_RHNDL->SET_PERMI( IS_PERMI = IS_RHNDL_VIS-S_PERMI
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.

    endif.

*** Set Percentage Maximum
    if     ME->S_RHNDL_VIS-S_PERMA     ne IS_RHNDL_VIS-S_PERMA
        or ME->S_RHNDL_VIS-FOVRR_PERMM ne IS_RHNDL_VIS-FOVRR_PERMM.

      if IS_RHNDL_VIS-FOVRR_PERMM eq ABAP_TRUE.
        ME->R_PR_RHNDL->SET_PERMA( IS_PERMA = IS_RHNDL_VIS-S_PERMA
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->R_PR_RHNDL->SET_PERMA( IS_PERMA = IS_RHNDL_VIS-S_PERMA
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.

    endif.

***--------------------------------------------------------------------------------------
*** Set Winding Side
    if ME->S_RHNDL_VIS-RWSID ne IS_RHNDL_VIS-RWSID.
      ME->R_PR_RHNDL->SET_RWSID( IF_RWSID = IS_RHNDL_VIS-RWSID
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Winding Direction
    if ME->S_RHNDL_VIS-RWDIR ne IS_RHNDL_VIS-RWDIR.
      ME->R_PR_RHNDL->SET_RWDIR( IF_RWDIR = IS_RHNDL_VIS-RWDIR
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Eyemark Position
    if ME->S_RHNDL_VIS-EYEMP ne IS_RHNDL_VIS-EYEMP.
      ME->R_PR_RHNDL->SET_EYEMP( IF_EYEMP = IS_RHNDL_VIS-EYEMP
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    data:  LF_UCOMM type SYUCOMM.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    move IF_UCOMM to LF_UCOMM.
    ME->/VCXI/IF_VKSU_UIFW~DO_USER_COMMAND( changing CF_UCOMM = LF_UCOMM ).

  endmethod.
  method GET_REGISTERED_UI_INFO.

    try.
        case IF_CLSUI.
          when C_CLSUI_MS_CORE.

***         MS Core
            if ME->R_REGISTERED_UI_MS_CORE is bound.
              move ME->R_REGISTERED_UI_MS_CORE->S_DYNP to RS_DYNP.
            else.
              move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
              move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
            endif.

        endcase.

      catch /VCXI/CX_CKX.
        move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
        move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
    endtry.

  endmethod.
  method INIT_BLANK_UI.

    data: LR_CLSUI type ref to /VCXI/CL_VKSU_CLSUI.

    create object LR_CLSUI
      exporting
        IR_UIFW = ME.

    LR_CLSUI->ACTIVATE( ).
    move LR_CLSUI->S_DYNP to ME->S_DYNP_BLANK.

  endmethod.
  method INIT_VIS.

    data: LF_SETBY  type /VCXI/VKSR_SETBY.

    free: ME->S_RHNDL_VIS.
    check ME->R_PR_RHNDL is bound.

***--------------------------------------------------------------------------------------
*** Get Roll Dimension Target
    case ME->R_PR_RHNDL->GET_RDIMTA( importing ES_RDITA  = ME->S_RHNDL_VIS-S_RDITA
                                               ES_RLETA  = ME->S_RHNDL_VIS-S_RLETA
                                               ES_RWGTA  = ME->S_RHNDL_VIS-S_RWGTA
                                               EF_RLEOF  = ME->S_RHNDL_VIS-RLEOF )-RDMTA.
      when 'D'.
        move ABAP_TRUE to ME->S_RHNDL_VIS-FOVRR_RDITA.
      when 'L'.
        move ABAP_TRUE to ME->S_RHNDL_VIS-FOVRR_RLETA.
      when 'W'.
        move ABAP_TRUE to ME->S_RHNDL_VIS-FOVRR_RWGTA.
      when 'O'.
        move ABAP_TRUE to ME->S_RHNDL_VIS-FOVRR_RLEOF.
    endcase.

    ME->S_RHNDL_VIS-S_RLEOP = ME->R_PR_RHNDL->GET_RLEOP( importing EF_ACTIVE = ME->S_RHNDL_VIS-RELOP_ACTIVE ).


***--------------------------------------------------------------------------------------
*** Get Roll Dimension Minimum/Maximum
    case ME->R_PR_RHNDL->GET_RDIMMM( )-RDMMM.
      when 'D'.
        move ABAP_TRUE to ME->S_RHNDL_VIS-FOVRR_RDIMM.
      when 'L'.
        move ABAP_TRUE to ME->S_RHNDL_VIS-FOVRR_RLEMM.
      when 'W'.
        move ABAP_TRUE to ME->S_RHNDL_VIS-FOVRR_RWGMM.
    endcase.

*** Get Roll Diameter Minimum/Maximum
    ME->R_PR_RHNDL->GET_RDIMI( importing ES_RDIMI = ME->S_RHNDL_VIS-S_RDIMI ).
    ME->R_PR_RHNDL->GET_RDIMA( importing ES_RDIMA = ME->S_RHNDL_VIS-S_RDIMA ).

*** Get Roll Length Minimum/Maximum
    ME->R_PR_RHNDL->GET_RLEMI( importing ES_RLEMI = ME->S_RHNDL_VIS-S_RLEMI ).
    ME->R_PR_RHNDL->GET_RLEMA( importing ES_RLEMA = ME->S_RHNDL_VIS-S_RLEMA ).

*** Get Roll Weight Minimum/Maximum
    ME->R_PR_RHNDL->GET_RWGMI( importing ES_RWGMI = ME->S_RHNDL_VIS-S_RWGMI ).
    ME->R_PR_RHNDL->GET_RWGMA( importing ES_RWGMA = ME->S_RHNDL_VIS-S_RWGMA ).

*** Get Percentage Minimum
    ME->R_PR_RHNDL->GET_PERMI( importing ES_PERMI = ME->S_RHNDL_VIS-S_PERMI
                                         EF_SETBY = LF_SETBY ).
    if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to ME->S_RHNDL_VIS-FOVRR_PERMM.
    endif.

*** Get Percentage Maximum
    ME->R_PR_RHNDL->GET_PERMA( importing ES_PERMA = ME->S_RHNDL_VIS-S_PERMA ).


***--------------------------------------------------------------------------------------
*** Get Winding Side
    ME->R_PR_RHNDL->GET_RWSID( importing EF_RWSID = ME->S_RHNDL_VIS-RWSID ).

*** Get Winding Direction
    ME->R_PR_RHNDL->GET_RWDIR( importing EF_RWDIR = ME->S_RHNDL_VIS-RWDIR ).

*** Get Eyemark Position
    ME->R_PR_RHNDL->GET_EYEMP( importing EF_EYEMP = ME->S_RHNDL_VIS-EYEMP ).

*** Get Winding Width and Winding Thickness
    ME->S_RHNDL_VIS-S_WIWID = ME->R_PR_RHNDL->GET_WIWID( ).
    ME->S_RHNDL_VIS-S_WITHI = ME->R_PR_RHNDL->GET_WITHI( ).
    ME->S_RHNDL_VIS-S_WISWG = ME->R_PR_RHNDL->GET_WISWG( ).

  endmethod.
  method OPEN_SUBSCREEN.

    data:LF_CLSUI type /VCXI/VKSC_CLSUI.

    if IR_GATE is bound.
      LF_CLSUI = IR_GATE->GET_CLSUI( ).
    endif.

    if LF_CLSUI is not initial.

*** Create Subscreen
      create object RR_CLSUI
        type
          (LF_CLSUI)
        exporting
          IR_UIFW    = ME
          IR_UIGATE  = ME->R_UIGATE
          IR_GATE    = IR_GATE.
      RR_CLSUI->ACTIVATE( ).

    else.

*** Clear Subscreen
      case LF_CLSUI.
        when 'ZCL_VCXI_FFSS_UI_MS_CORE'.
          if ME->R_REGISTERED_UI_MS_CORE is bound.
            ME->R_REGISTERED_UI_MS_CORE->DEACTIVATE( ).
          endif.
      endcase.

    endif.

  endmethod.
  method SET_CURSOR.

    data:  LF_CURSOR type SCRFNAME.

    get cursor field LF_CURSOR.

    if LF_CURSOR is not initial.
      move LF_CURSOR to ME->F_CURSOR.
    endif.

  endmethod.
