
class ZCL_VCXI_FBSS_PR_BPART definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCS_NGREP .

  constants C_BPDIR_LONGI type ZVCXI_FBS_BPDIR value 'L' ##NO_TEXT.
  constants C_BPDIR_TRANS type ZVCXI_FBS_BPDIR value 'T' ##NO_TEXT.
  constants C_IPRVT_BPART type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_BPART' ##NO_TEXT.
  constants C_PARID_BPDIR type /VCXI/VKS_PARID value 'ZVCXI_FB_BPDIR' ##NO_TEXT.
  constants C_PARID_BPLEN type /VCXI/VKS_PARID value 'ZVCXI_FB_BPLEN' ##NO_TEXT.
  constants C_PARID_BPWID type /VCXI/VKS_PARID value 'ZVCXI_FB_BPWID' ##NO_TEXT.
  constants C_PARID_COARE type /VCXI/VKS_PARID value 'ZVCXI_FB_COARE' ##NO_TEXT.

  methods GET_ALLOWED_BPDIR
    returning
      value(RT_BPDIR) type ZVCXI_FBS_TT_BPDIR
    raising
      /VCXI/CX_CKX .
  methods GET_BPDIM_VALUE
    returning
      value(RT_BPDIM_VALUE) type ZVCXI_FBSS_TT_BPDIM_VALUE
    raising
      /VCXI/CX_CKX .
  methods GET_BPARE
    exporting
      !ES_BPARE type ZVCXI_FBS_S_BPARE
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_BPDIR
    exporting
      !EF_BPDIR type ZVCXI_FBS_BPDIR
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_BPLEN
    exporting
      !ES_BPLEN type ZVCXI_FBS_S_BPLEN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_BPTIN
    exporting
      !ES_BPTIN type ZVCXI_FBS_S_BPTIN
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_BPWGT
    exporting
      !ES_BPWGT type ZVCXI_FBS_S_BPWGT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_BPWID
    exporting
      !ES_BPWID type ZVCXI_FBS_S_BPWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_COARE
    exporting
      !ES_COARE type ZVCXI_FBS_S_COARE
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_BPLEN
    returning
      value(RF_FOVRR) type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_BPWID
    returning
      value(RF_FOVRR) type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods GET_HANDLES_COARE
    exporting
      !ES_COARE type ZVCXI_FBS_S_COARE
    raising
      /VCXI/CX_CKX .
  methods GET_IBPAR
    exporting
      !EF_IBPAR type ZVCXI_FBS_IBPAR
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
    exporting
      !EF_NOUPS type ZVCXI_F0S_NOUPS
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_BMAKE
    exporting
      !ET_GATE type /VCXI/VKSR_TT_GATE
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_BMAKE type ref to ZCL_VCXI_FBSS_PR_BMAKE
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !ES_SURWT type ZVCXI_F0S_S_SURWT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_BPDIR
    importing
      !IF_BPDIR type ZVCXI_FBS_BPDIR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BPLEN
    importing
      !IS_BPLEN type ZVCXI_FBS_S_BPLEN optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BPWID
    importing
      !IS_BPWID type ZVCXI_FBS_S_BPWID optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_COARE
    importing
      !IS_COARE type ZVCXI_FBS_S_COARE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_BPLEN
    importing
      !IF_FOVRR type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_BPWID
    importing
      !IF_FOVRR type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods SET_IBPAR
    importing
      !IF_IBPAR type ZVCXI_FBS_IBPAR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_BPARE type /VCXI/VKSC_IEVNT value 'RECALC_BPARE' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_BPDIM type /VCXI/VKSC_IEVNT value 'RECALC_BPDIM' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_BPTIN type /VCXI/VKSC_IEVNT value 'RECALC_BPTIN' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_BPWGT type /VCXI/VKSC_IEVNT value 'RECALC_BPWGT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_NOUPS type /VCXI/VKSC_IEVNT value 'RECALC_NOUPS' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SURWT type /VCXI/VKSC_IEVNT value 'RECALC_SURWT' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_BPARE_CHANGED type /VCXI/VKSC_IEVNT value 'BPARE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BPDIR_CHANGED type /VCXI/VKSC_IEVNT value 'BPDIR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BPLEN_CHANGED type /VCXI/VKSC_IEVNT value 'BPLEN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BPTIN_CHANGED type /VCXI/VKSC_IEVNT value 'BPTIN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BPWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BPWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BPWID_CHANGED type /VCXI/VKSC_IEVNT value 'BPWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COARE_CHANGED type /VCXI/VKSC_IEVNT value 'COARE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_IBPAR_CHANGED type /VCXI/VKSC_IEVNT value 'IBPAR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_PARID_BPARE type /VCXI/VKS_PARID value 'ZVCXI_FB_BPARE' ##NO_TEXT.
  constants C_PARID_BPTIN type /VCXI/VKS_PARID value 'ZVCXI_FB_BPTIN' ##NO_TEXT.
  constants C_PARID_BPWGT type /VCXI/VKS_PARID value 'ZVCXI_FB_BPWGT' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_F0_NOUPS' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_F0_SURWT' ##NO_TEXT.

  methods CHECK_BPDIR
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_BPLEN
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_BPWID
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_NOUPS
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_BFILM
    exporting
      !ET_GATE type /VCXI/VKSR_TT_GATE
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_BFILM type ref to ZCL_VCXI_FBSS_PR_BFILM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_BPARE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_BPDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_BPTIN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_BPWGT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_NOUPS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SURWT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_BPARE
    importing
      !IS_BPARE type ZVCXI_FBS_S_BPARE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BPTIN
    importing
      !IS_BPTIN type ZVCXI_FBS_S_BPTIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BPWGT
    importing
      !IS_BPWGT type ZVCXI_FBS_S_BPWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_F0S_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_F0S_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_PR_BPART definition
class ZCL_VCXI_FBSS_PR_BPART implementation.
  method CHECK_BPDIR.
*** 0 Bag Part Direction is maintained and valid.
*** 1 Bag Part Direction is maintained but not valid.

    data: LF_BPDIR      type ZVCXI_FBS_BPDIR.
    data: LT_BPDIR      type ZVCXI_FBS_TT_BPDIR.

***--------------------------------------------------------------------------------------
*** Get selected Bag Part Direction
    ME->GET_BPDIR( importing EF_BPDIR = LF_BPDIR ).

*** Get Allowed Bag Part Direction
    LT_BPDIR = ME->GET_ALLOWED_BPDIR( ).

***--------------------------------------------------------------------------------------
*** Check if Valid
    read table LT_BPDIR with key TABLE_LINE = LF_BPDIR
                        transporting no fields.
    if SY-SUBRC eq 0.
      move 0 to RF_RETURN.
    else.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_BPLEN.
*** 0 Bag Part Length is maintained
*** 1 Bag Part Length is not maintained .

    data: LS_BPLEN  type ZVCXI_FBS_S_BPLEN.

***--------------------------------------------------------------------------------------
*** Get Bag Part Length
    ME->GET_BPLEN( importing ES_BPLEN = LS_BPLEN ).

***--------------------------------------------------------------------------------------
*** Check if maintained
    if LS_BPLEN-BPLEN is not initial.
      move 0 to RF_RETURN.
    else.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_BPWID.
*** 0 Bag Part Width is maintained
*** 1 Bag Part Width is not maintained .

    data: LS_BPWID  type ZVCXI_FBS_S_BPWID.

***--------------------------------------------------------------------------------------
*** Get Bag Part Width
    ME->GET_BPWID( importing ES_BPWID = LS_BPWID ).

***--------------------------------------------------------------------------------------
*** Check if maintained
    if LS_BPWID-BPWID is not initial.
      move 0 to RF_RETURN.
    else.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_NOUPS.

*** 0 Total Number of Ups is valid.
*** 1 Total Number of Ups is not valid.

    data: LF_BMAKE_NOUPS type ZVCXI_F0S_NOUPS,
          LF_BPART_NOUPS type ZVCXI_F0S_NOUPS.
    data: LT_GATE     type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BMAKE type ref to ZCL_VCXI_FBSS_PR_BMAKE.

    move 0 to RF_RETURN.

***--------------------------------------------------------------------------------------
*** Get Bag Making provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BMAKE=>C_IPRVT_BMAKE
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.
    if LR_GATE is bound.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_BMAKE.
        catch CX_SY_MOVE_CAST_ERROR.
          return.
      endtry.
    endif.

*** Get Number of Ups from Bag Making
    LR_PR_BMAKE->GET_NOUPS( importing EF_NOUPS = LF_BMAKE_NOUPS ).

*** Get Number of Ups from Bag Part
    ME->GET_NOUPS( importing EF_NOUPS = LF_BPART_NOUPS ).

    check LF_BMAKE_NOUPS ne LF_BPART_NOUPS.

    move 1 to RF_RETURN.

  endmethod.
  method GET_ALLOWED_BPDIR.

    data: LF_IBPAR type ZVCXI_FBS_IBPAR,
          LF_ODIRT type ZVCXI_FBS_ODIRT,
          LF_ODIRL type ZVCXI_FBS_ODIRL.
    data: LR_PR_BMAKE type ref to ZCL_VCXI_FBSS_PR_BMAKE,
          LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG.

***--------------------------------------------------------------------------------------
*** Get Bag Maker PR
    ME->GET_PRVDR_BMAKE( importing ER_PR_BMAKE = LR_PR_BMAKE ).
    check LR_PR_BMAKE is bound.

***--------------------------------------------------------------------------------------
*** Get Bag Customizing
    move LR_PR_BMAKE->GET_CUST_BAG( ) to LR_CUST_BAG.
    check LR_CUST_BAG is bound.

*** Get Id of Bag Part
    ME->GET_IBPAR( importing EF_IBPAR = LF_IBPAR ).

***--------------------------------------------------------------------------------------
*** Get Longitudinal and Transversal Option
    LR_CUST_BAG->GET_BPART_INFO( exporting IF_IBPAR = LF_IBPAR
                                 importing EF_ODIRL = LF_ODIRL
                                           EF_ODIRT = LF_ODIRT ).
    if LF_ODIRL eq ABAP_TRUE.
      append C_BPDIR_LONGI to RT_BPDIR.
    endif.
    if LF_ODIRT eq ABAP_TRUE.
      append C_BPDIR_TRANS to RT_BPDIR.
    endif.

  endmethod.
  method GET_BPARE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPARE ).
    move LS_PARAM-ATFLV to ES_BPARE-BPARE.
    move LS_PARAM-UNIT  to ES_BPARE-BPARE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BPDIM_VALUE.

*** Get Bag Part ID
    ME->GET_IBPAR( importing EF_IBPAR = data(LF_IBPAR) ).

***--------------------------------------------------------------------------------------
*** Bag Part Width
    ME->GET_BPWID( importing ES_BPWID = data(LS_BPWID) ).
    insert value #( IBPAR     = LF_IBPAR
                    IELEM     = ZCL_VCXI_FBSSC_BAGTY=>C_IELEM_BP_WIDTH
                    BVDIM     = LS_BPWID-BPWID
                    BVDIM_UOM = LS_BPWID-BPWID_UOM
                  ) into table RT_BPDIM_VALUE.

*** Bag Part Length
    ME->GET_BPLEN( importing ES_BPLEN = data(LS_BPLEN) ).
    insert value #( IBPAR     = LF_IBPAR
                    IELEM     = ZCL_VCXI_FBSSC_BAGTY=>C_IELEM_BP_LENGTH
                    BVDIM     = LS_BPLEN-BPLEN
                    BVDIM_UOM = LS_BPLEN-BPLEN_UOM
                  ) into table RT_BPDIM_VALUE.

*** Bag Part Internal Thickness
    ME->GET_BPTIN( importing ES_BPTIN = data(LS_BPTIN) ).
    insert value #( IBPAR     = LF_IBPAR
                    IELEM     = ZCL_VCXI_FBSSC_BAGTY=>C_IELEM_BP_THICK
                    BVDIM     = LS_BPTIN-BPTIN
                    BVDIM_UOM = LS_BPTIN-BPTIN_UOM
                  ) into table RT_BPDIM_VALUE.

  endmethod.
  method GET_BPDIR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPDIR ).
    move LS_PARAM-ATWRT to EF_BPDIR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BPLEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPLEN ).
    move LS_PARAM-ATFLV to ES_BPLEN-BPLEN.
    move LS_PARAM-UNIT  to ES_BPLEN-BPLEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BPTIN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPTIN ).
    move LS_PARAM-ATFLV to ES_BPTIN-BPTIN.
    move LS_PARAM-UNIT  to ES_BPTIN-BPTIN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BPWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPWGT ).
    move LS_PARAM-ATFLV to ES_BPWGT-BPWGT.
    move LS_PARAM-UNIT  to ES_BPWGT-BPWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BPWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPWID ).
    move LS_PARAM-ATFLV to ES_BPWID-BPWID.
    move LS_PARAM-UNIT  to ES_BPWID-BPWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_COARE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COARE ).
    move LS_PARAM-ATFLV to ES_COARE-COARE.
    move LS_PARAM-UNIT  to ES_COARE-COARE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_DESCR.

    data: LF_IBPAR type ZVCXI_FBS_IBPAR.
    data: LS_TC020T type ZVCXI_FBS_TC020T.

    ME->GET_IBPAR( importing EF_IBPAR = LF_IBPAR ).

    if LF_IBPAR is initial.
      SUPER->GET_DESCR( receiving RF_DESCR = RF_DESCR ).
    else.
      move ZCL_VCXI_FBSSC_BAGTY=>GET_IBPAR_DESCR( LF_IBPAR ) to RF_DESCR.
    endif.

  endmethod.
  method GET_FOVRR_BPLEN.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Get Setby
    ME->GET_BPLEN( importing EF_SETBY = LF_SETBY ).

    if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE  to RF_FOVRR.
    else.
      move ABAP_FALSE to RF_FOVRR.
    endif.

  endmethod.
  method GET_FOVRR_BPWID.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Get Setby
    ME->GET_BPWID( importing EF_SETBY = LF_SETBY ).

    if LF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE  to RF_FOVRR.
    else.
      move ABAP_FALSE to RF_FOVRR.
    endif.

  endmethod.
  method GET_HANDLES_COARE.

    data: LF_LCOUT type ZVCXI_FBS_LCOUT,
          LF_IBPAR type ZVCXI_FBS_IBPAR,
          LS_COARE type ZVCXI_FBS_S_COARE.
    data: LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_HANDLE type ref to ZCL_VCXI_FBSS_PR_HANDLE.


*** Get Handles
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_HANDLE=>C_IPRVT_HANDLE
                                     IF_INUSE  = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_HANDLE.

***   Check Cutout Location is the current Bag Part
      LR_PR_HANDLE->GET_LCOUT( importing EF_LCOUT = LF_LCOUT ).
      ME->GET_IBPAR( importing EF_IBPAR = LF_IBPAR ).
      check LF_LCOUT eq LF_IBPAR.

***   Get Sum of Handle Cutout Area
      LR_PR_HANDLE->GET_COARE( importing ES_COARE = LS_COARE ).
      if ES_COARE is initial.
        move LS_COARE-COARE     to ES_COARE-COARE.
        move LS_COARE-COARE_UOM to ES_COARE-COARE_UOM.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_COARE-COARE
                                                            IF_CALCV_UOM_1 = LS_COARE-COARE_UOM
                                                            IF_CALCV_2     = ES_COARE-COARE
                                                            IF_CALCV_UOM_2 = ES_COARE-COARE_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = ES_COARE-COARE_UOM
                                                  importing EF_CALCV       = ES_COARE-COARE
                                                            EF_CALCV_UOM   = ES_COARE-COARE_UOM ).
      endif.
    endloop.

  endmethod.
  method GET_IBPAR.

    data:  LS_LEOKY   type /VCXI/VKSR_S_LEOKY.

    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).
    move LS_LEOKY-LEOKY to EF_IBPAR.
    move LS_LEOKY-SETBY to EF_SETBY.

  endmethod.
  method GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to EF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_BFILM.

***--------------------------------------------------------------------------------------
*** Get Bag Film
    ET_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_BFILM=>C_IPRVT_BFILM
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    if ER_GATE     is requested or
       ER_PR_BFILM is requested.
      read table ET_GATE into ER_GATE index 1.
      if SY-SUBRC eq 0.
        move ER_GATE->R_CLSPR ?to ER_PR_BFILM.
      else.
        clear: ER_GATE, ER_PR_BFILM.
      endif.
    endif.

  endmethod.
  method GET_PRVDR_BMAKE.

***--------------------------------------------------------------------------------------
*** Get Bag Make
    ET_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_BMAKE=>C_IPRVT_BMAKE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    if ER_GATE     is requested or
       ER_PR_BMAKE is requested.
      read table ET_GATE into ER_GATE index 1.
      if SY-SUBRC eq 0.
        move ER_GATE->R_CLSPR ?to ER_PR_BMAKE.
      else.
        clear: ER_GATE, ER_PR_BMAKE.
      endif.
    endif.

  endmethod.
  method GET_STATUS.

***--------------------------------------------------------------------------------------
*** Super Status
    SUPER->GET_STATUS( receiving RF_ELMST = RF_ELMST ).

***--------------------------------------------------------------------------------------
*** Check Bag Part Direction
    if ME->CHECK_BPDIR( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Bag Part Width
    if ME->CHECK_BPWID( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Bag Part Length
    if ME->CHECK_BPLEN( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Number of Ups
    if ME->CHECK_NOUPS( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Bag Part Direction
    if ME->CHECK_BPDIR( ) eq 0.
***   Bag Part Direction is maintained and valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '251' ).
    else.
***   Bag Part Direction is maintained but not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '252' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Bag Part Width
    if ME->CHECK_BPWID( ) eq 0.
***   Bag Part Width is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '255' ).
    else.
***   Bag Part Width is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '256' ).
    endif.

*** Check Bag Part Length
    if ME->CHECK_BPLEN( ) eq 0.
***   Bag Part Length is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '257' ).
    else.
***   Bag Part Length is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '258' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Number of Ups
    if ME->CHECK_NOUPS( ) eq 0.
***   Total Number of Ups is valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '253' ).
    else.
***   Total Number of Ups is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '254' ).
    endif.

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to ES_SURWT-SURWT.
    move LS_PARAM-UNIT  to ES_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_BPARE.
        ME->HANDLE_RECALC_BPARE( ).

      when C_IEVNT_I_RECALC_BPDIM.
        ME->HANDLE_RECALC_BPDIM( ).

      when C_IEVNT_I_RECALC_SURWT.
        ME->HANDLE_RECALC_SURWT( ).

      when C_IEVNT_I_RECALC_BPTIN.
        ME->HANDLE_RECALC_BPTIN( ).

      when C_IEVNT_I_RECALC_BPWGT.
        ME->HANDLE_RECALC_BPWGT( ).

      when C_IEVNT_I_RECALC_NOUPS.
        ME->HANDLE_RECALC_NOUPS( ).

    endcase.

  endmethod.
  method HANDLE_RECALC_BPARE.

    data: LS_BPWID type        ZVCXI_FBS_S_BPWID,
          LS_BPLEN type        ZVCXI_FBS_S_BPLEN,
          LS_COARE type        ZVCXI_FBS_S_COARE,
          LS_BPARE type        ZVCXI_FBS_S_BPARE.

*** Get Part Area (for Unit)
    ME->GET_BPARE( importing ES_BPARE = LS_BPARE ).
    clear LS_BPARE-BPARE.

***--------------------------------------------------------------------------------------
*** Get Bag Part Length, Width
    ME->GET_BPLEN( importing ES_BPLEN = LS_BPLEN ).
    ME->GET_BPWID( importing ES_BPWID = LS_BPWID ).

*** Calculate Part Area
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPLEN-BPLEN
                                                        IF_CALCV_UOM_1 = LS_BPLEN-BPLEN_UOM
                                                        IF_CALCV_2     = LS_BPWID-BPWID
                                                        IF_CALCV_UOM_2 = LS_BPWID-BPWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                        IF_UOM         = LS_BPARE-BPARE_UOM
                                              importing EF_CALCV       = LS_BPARE-BPARE
                                                        EF_CALCV_UOM   = LS_BPARE-BPARE_UOM ).

*** Reduce by own Cutout Area
    ME->GET_COARE( importing ES_COARE = LS_COARE ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPARE-BPARE
                                                        IF_CALCV_UOM_1 = LS_BPARE-BPARE_UOM
                                                        IF_CALCV_2     = LS_COARE-COARE
                                                        IF_CALCV_UOM_2 = LS_COARE-COARE_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                        IF_UOM         = LS_BPARE-BPARE_UOM
                                              importing EF_CALCV       = LS_BPARE-BPARE
                                                        EF_CALCV_UOM   = LS_BPARE-BPARE_UOM ).

*** Get Handles Cutout Area
    clear LS_COARE.
    ME->GET_HANDLES_COARE( importing ES_COARE = LS_COARE ).
    if LS_COARE is not initial.

***   Reduce by Handles Cutout Area
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPARE-BPARE
                                                          IF_CALCV_UOM_1 = LS_BPARE-BPARE_UOM
                                                          IF_CALCV_2     = LS_COARE-COARE
                                                          IF_CALCV_UOM_2 = LS_COARE-COARE_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = LS_BPARE-BPARE_UOM
                                                importing EF_CALCV       = LS_BPARE-BPARE
                                                          EF_CALCV_UOM   = LS_BPARE-BPARE_UOM ).

    endif.

***--------------------------------------------------------------------------------------
*** No negative Area
    if LS_BPARE-BPARE lt 0.
      move 0 to LS_BPARE-BPARE.
    endif.

*** Set Bag Part Area
    ME->SET_BPARE( IS_BPARE = LS_BPARE ).

  endmethod.
  method HANDLE_RECALC_BPDIM.

    data: LF_IBPAR type        ZVCXI_FBS_IBPAR,
          LF_BPDIR type        ZVCXI_FBS_BPDIR,
          LF_SETBY type        /VCXI/VKSR_SETBY.
    data: LS_BPWID_CALC type   ZVCXI_FBS_S_BPWID,
          LS_BPLEN_CALC type   ZVCXI_FBS_S_BPLEN,
          LS_BPWID      type   ZVCXI_FBS_S_BPWID,
          LS_BPLEN      type   ZVCXI_FBS_S_BPLEN.
    data: LT_BGDIM_VALUE type ZVCXI_FBSS_TT_BGDIM_VALUE.
    data: LR_PR_BMAKE type ref to ZCL_VCXI_FBSS_PR_BMAKE,
          LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG.

***--------------------------------------------------------------------------------------
*** Get Bag Specification
    ME->GET_PRVDR_BMAKE( importing ER_PR_BMAKE = LR_PR_BMAKE ).
    check LR_PR_BMAKE is bound.

*** Get Bag Customizing
    move LR_PR_BMAKE->GET_CUST_BAG( ) to LR_CUST_BAG.
    check LR_CUST_BAG is bound.

*** Get Elements for Calculation
    move LR_PR_BMAKE->GET_BGDIM_VALUE( ) to LT_BGDIM_VALUE.

*** Get Part ID
    ME->GET_IBPAR( importing EF_IBPAR = LF_IBPAR ).

    ME->GET_BPDIR( importing EF_BPDIR = LF_BPDIR ).

***--------------------------------------------------------------------------------------
*** Calculate Part Dimension
    LR_CUST_BAG->CALC_BPDIM( exporting IF_IBPAR       = LF_IBPAR
                                       IT_BGDIM_VALUE = LT_BGDIM_VALUE
                             importing ES_BPWID       = LS_BPWID_CALC
                                       ES_BPLEN       = LS_BPLEN_CALC ).

***--------------------------------------------------------------------------------------
*** Set Part Width
    ME->GET_BPWID( importing ES_BPWID = LS_BPWID
                             EF_SETBY = LF_SETBY ).
    if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      clear LS_BPWID-BPWID.

      case LF_BPDIR.
        when C_BPDIR_LONGI.
***       Keep Dimension
          move LS_BPWID_CALC-BPWID     to LS_BPWID-BPWID.
          move LS_BPWID_CALC-BPWID_UOM to LS_BPWID-BPWID_UOM.

        when C_BPDIR_TRANS.
***       Switch Dimension
          move LS_BPLEN_CALC-BPLEN     to LS_BPWID-BPWID.
          move LS_BPLEN_CALC-BPLEN_UOM to LS_BPWID-BPWID_UOM.
      endcase.
      ME->SET_BPWID( IS_BPWID = LS_BPWID ).
    endif.

*** Set Part Length
    ME->GET_BPLEN( importing ES_BPLEN = LS_BPLEN
                             EF_SETBY = LF_SETBY ).
    if LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      clear LS_BPLEN-BPLEN.
      case LF_BPDIR.
        when C_BPDIR_LONGI.
***       Keep Dimension
          move LS_BPLEN_CALC-BPLEN     to LS_BPLEN-BPLEN.
          move LS_BPLEN_CALC-BPLEN_UOM to LS_BPLEN-BPLEN_UOM.

        when C_BPDIR_TRANS.
***       Switch Dimension
          move LS_BPWID_CALC-BPWID     to LS_BPLEN-BPLEN.
          move LS_BPWID_CALC-BPWID_UOM to LS_BPLEN-BPLEN_UOM.
      endcase.
      ME->SET_BPLEN( IS_BPLEN = LS_BPLEN ).
    endif.

  endmethod.
  method HANDLE_RECALC_BPTIN.

    data: LS_FITIN     type        ZVCXI_FFS_S_FITIN.
    data: LR_PR_BFILM  type ref to ZCL_VCXI_FBSS_PR_BFILM.


***--------------------------------------------------------------------------------------
*** Get first Bag Film Provider
    ME->GET_PRVDR_BFILM( importing ER_PR_BFILM = LR_PR_BFILM ).
    if LR_PR_BFILM is bound.
      LR_PR_BFILM->GET_FITIN( importing ES_FITIN = LS_FITIN ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Bag Part Internal Thickness based on Film Thickness
    ME->SET_BPTIN( IS_BPTIN = value #( BPTIN     = LS_FITIN-FITIN
                                       BPTIN_UOM = LS_FITIN-FITIN_UOM ) ).

  endmethod.
  method HANDLE_RECALC_BPWGT.

    data: LS_BPARE type        ZVCXI_FBS_S_BPARE,
          LS_SURWT type        ZVCXI_F0S_S_SURWT,
          LS_BPWGT type        ZVCXI_FBS_S_BPWGT.


*** Get Part Weight (for Unit)
    ME->GET_BPWGT( importing ES_BPWGT = LS_BPWGT ).
    clear LS_BPWGT-BPWGT.

***--------------------------------------------------------------------------------------
*** Get Part Area
    ME->GET_BPARE( importing ES_BPARE = LS_BPARE ).
    if LS_BPARE-BPARE is not initial.

***   Get Surface Weight
      ME->GET_SURWT( importing ES_SURWT = LS_SURWT ).
      if LS_SURWT-SURWT is not initial.

***     Calculate Bag Part Weight
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BPARE-BPARE
                                                            IF_CALCV_UOM_1 = LS_BPARE-BPARE_UOM
                                                            IF_CALCV_2     = LS_SURWT-SURWT
                                                            IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                            IF_UOM         = LS_BPWGT-BPWGT_UOM
                                                  importing EF_CALCV       = LS_BPWGT-BPWGT
                                                            EF_CALCV_UOM   = LS_BPWGT-BPWGT_UOM ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Set Bag Part Weight
    ME->SET_BPWGT( IS_BPWGT = LS_BPWGT ).

  endmethod.
  method HANDLE_RECALC_NOUPS.

    data: LF_NOUPS       type ZVCXI_F0S_NOUPS,
          LF_TOTAL_NOUPS type ZVCXI_F0S_NOUPS,
          LF_NOFIL       type ZVCXI_FBS_NOFIL.
    data: LT_GATE        type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BFILM type ref to ZCL_VCXI_FBSS_PR_BFILM.


    move 0 to LF_TOTAL_NOUPS.

***--------------------------------------------------------------------------------------
*** Get Bag Films
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BFILM=>C_IPRVT_BFILM
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.

      try .
          move LR_GATE->R_CLSPR ?to LR_PR_BFILM.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_BFILM.
      endtry.

      check LR_PR_BFILM is bound.

      clear LF_NOUPS.
      LR_PR_BFILM->GET_NOUPS( importing EF_NOUPS = LF_NOUPS ).

      clear LF_NOFIL.
      LR_PR_BFILM->GET_NOFIL( importing EF_NOFIL = LF_NOFIL ).

      check LF_NOUPS is not initial and
            LF_NOFIL is not initial.

      LF_TOTAL_NOUPS = LF_TOTAL_NOUPS + ( LF_NOUPS * LF_NOFIL ).

    endloop.

***--------------------------------------------------------------------------------------
*** Set Bag Number of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_TOTAL_NOUPS ).

  endmethod.
  method HANDLE_RECALC_SURWT.

    data: LS_SURWT     type        ZVCXI_F0S_S_SURWT.
    data: LR_PR_BFILM  type ref to ZCL_VCXI_FBSS_PR_BFILM.


***--------------------------------------------------------------------------------------
*** Get first Bag Film Provider
    ME->GET_PRVDR_BFILM( importing ER_PR_BFILM = LR_PR_BFILM ).
    if LR_PR_BFILM is bound.
      LR_PR_BFILM->GET_SURWT( importing ES_SURWT = LS_SURWT ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_BPARE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPARE ).

    move IS_BPARE-BPARE     to LS_PARAM-ATFLV.
    move IS_BPARE-BPARE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BPARE_CHANGED ).
    endif.

  endmethod.
  method SET_BPDIR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPDIR ).

    move IF_BPDIR           to LS_PARAM-ATWRT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BPDIR_CHANGED ).
    endif.

  endmethod.
  method SET_BPLEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPLEN ).

    if IS_BPLEN is supplied.
      move IS_BPLEN-BPLEN     to LS_PARAM-ATFLV.
      move IS_BPLEN-BPLEN_UOM to LS_PARAM-UNIT.
    endif.
    move IF_SETBY           to LS_PARAM-SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BPLEN_CHANGED ).
    endif.

  endmethod.
  method SET_BPTIN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPTIN ).

    move IS_BPTIN-BPTIN     to LS_PARAM-ATFLV.
    move IS_BPTIN-BPTIN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BPTIN_CHANGED ).
    endif.

  endmethod.
  method SET_BPWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPWGT ).

    move IS_BPWGT-BPWGT     to LS_PARAM-ATFLV.
    move IS_BPWGT-BPWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BPWGT_CHANGED ).
    endif.

  endmethod.
  method SET_BPWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BPWID ).

    if IS_BPWID is supplied.
      move IS_BPWID-BPWID     to LS_PARAM-ATFLV.
      move IS_BPWID-BPWID_UOM to LS_PARAM-UNIT.
    endif.
    move IF_SETBY           to LS_PARAM-SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BPWID_CHANGED ).
    endif.

  endmethod.
  method SET_COARE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COARE ).
    move IS_COARE-COARE     to LS_PARAM-ATFLV.
    move IS_COARE-COARE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COARE_CHANGED ).
    endif.

  endmethod.
  method SET_FOVRR_BPLEN.

*** Set Setby for Part Length
    case IF_FOVRR.
      when ABAP_TRUE.
        ME->SET_BPLEN( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      when ABAP_FALSE.
        ME->SET_BPLEN( IF_SETBY = SPACE ).
    endcase.

  endmethod.
  method SET_FOVRR_BPWID.

*** Set Setby for Bag Part Width
    case IF_FOVRR.
      when ABAP_TRUE.
        ME->SET_BPWID( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      when ABAP_FALSE.
        ME->SET_BPWID( IF_SETBY = SPACE ).
    endcase.

  endmethod.
  method SET_IBPAR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_LEOKY   type /VCXI/VKSR_S_LEOKY.

    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

    move IF_IBPAR           to LS_LEOKY-LEOKY.
    move IF_SETBY           to LS_LEOKY-SETBY.

    LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_IBPAR_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS           to LS_PARAM-ATFLV.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Attribute Data
    ME->GET_BPDIR( importing EF_BPDIR = data(LF_BPDIR) ).                "Bag Part Direction
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LF_BPDIR
                                changing  CT_ATTR  = LT_ATTR ).
    ME->GET_BPWID( importing ES_BPWID = data(LS_BPWID) ).                "Bag Part Width
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LS_BPWID-BPWID
                                          IF_UOM   = LS_BPWID-BPWID_UOM
                                changing  CT_ATTR  = LT_ATTR ).
    ME->GET_BPLEN( importing ES_BPLEN = data(LS_BPLEN) ).                "Bag Part Length
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE = LS_BPLEN-BPLEN
                                          IF_UOM   = LS_BPLEN-BPLEN_UOM
                                changing  CT_ATTR  = LT_ATTR ).

*** Add Node for Procurement
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE     = ME->GET_DESCR( )
                                                    IF_DESCR     = ME->GET_DESCR( )
                                                    IF_SHAPE     = ZCL_VCXI_XCS_NETGRAPH_JSON=>C_SHAPE_CIRCLE
                                                    IF_STATUS    = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY = IF_GROUP_KEY
                                                    IT_ATTR      = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

***--------------------------------------------------------------------------------------
*** Register Bag Films to Bag Part
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_FBSS_PR_BFILM=>C_IPRVT_BFILM
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE
                                          IF_NODE_KEY = LF_NODE_KEY ).
    endloop.

  endmethod.
