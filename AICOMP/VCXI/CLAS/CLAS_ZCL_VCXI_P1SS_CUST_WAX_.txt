
class ZCL_VCXI_P1SS_CUST_WAX definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  data S_AVGCO type ZVCXI_XCS_S_AVGCO .
  data S_AVGCP type ZVCXI_XCS_S_AVGCP .
  data S_SLDCO type ZVCXI_PXS_S_SLDCO read-only .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_WAX
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_P1SS_CUST_WAX
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    importing
      !IF_UOM type /VCXI/CKX_UOM optional
      !IF_WAXFA type ZVCXI_PCS_WAXFA
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_MAPID_AVGCO type /VCXI/CKXC_MAPID value 'AVGCO' ##NO_TEXT.
  constants C_MAPID_AVGCP type /VCXI/CKXC_MAPID value 'AVGCP' ##NO_TEXT.
  constants C_MAPID_SLDCO type /VCXI/CKXC_MAPID value 'SLDCO' ##NO_TEXT.
  constants C_SETID_WAX type /VCXI/CKXC_SETID value 'ZVCXI_P1S_WAX' ##NO_TEXT.

  methods LOAD_BY_CCM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P1SS_CUST_WAX definition
class ZCL_VCXI_P1SS_CUST_WAX implementation.
method CONSTRUCTOR.

  try.
      SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                          IF_WERKS = IF_WERKS
                          IF_DATE  = IF_DATE ).

***   Load Data by Cross Classification Mapping
      ME->LOAD_BY_CCM( ).

    cleanup.
      ME->DO_FREE( ).
  endtry.

endmethod.
method GET_INSTANCE_WAX.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE
             into LS_INSTANCE
             with key MATNR = IF_MATNR
                      WERKS = IF_WERKS
                      DATE  = IF_DATE.

  if SY-SUBRC eq 0.
    try.
        move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
      catch CX_SY_MOVE_CAST_ERROR.
        delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
        clear RR_INSTANCE.
    endtry.
  endif.

  if RR_INSTANCE is initial.
    try.
        create object RR_INSTANCE
          exporting
            IF_MATNR = IF_MATNR
            IF_WERKS = IF_WERKS
            IF_DATE  = IF_DATE.
      cleanup.
        clear RR_INSTANCE.
    endtry.
  endif.

endmethod.
  method GET_SURWT.

*** Calculate Surface Weight
    if IF_UOM is supplied.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_AVGCO-AVGCO
                                                          IF_CALCV_UOM_1 = ME->S_AVGCO-AVGCO_UOM
                                                          IF_CALCV_2     = ME->S_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = ME->S_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                          IF_UOM         = IF_UOM
                                                importing EF_CALCV       = RS_SURWT-SURWT
                                                          EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
    else.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_AVGCO-AVGCO
                                                          IF_CALCV_UOM_1 = ME->S_AVGCO-AVGCO_UOM
                                                          IF_CALCV_2     = ME->S_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = ME->S_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                          IF_UOM         = IF_UOM
                                                importing EF_CALCV       = RS_SURWT-SURWT
                                                          EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
    endif.
    check RS_SURWT-SURWT is not initial.

*** Consider Solid Content
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SURWT-SURWT
                                                        IF_CALCV_UOM_1 = RS_SURWT-SURWT_UOM
                                                        IF_CALCV_2     = ME->S_SLDCO-SLDCO
                                                        IF_CALCV_UOM_2 = ME->S_SLDCO-SLDCO_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                        IF_UOM         = RS_SURWT-SURWT_UOM
                                              importing EF_CALCV       = RS_SURWT-SURWT
                                                        EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).

*** Apply Wax Factor
    RS_SURWT-SURWT = RS_SURWT-SURWT * IF_WAXFA.

  endmethod.
  method LOAD_BY_CCM.

    data: LF_OBJNUM type OBJNUM.
    data: LS_SETVA type /VCXI/CKXC_S_SETVA,
          LS_MAPVN type /VCXI/CKXC_S_MAPVN.
    data: LT_SETVA type /VCXI/CKXC_TT_SETVA.


*** Get Wax Info
    move ME->F_MATNR to LF_OBJNUM.
    LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_WAX
                                             IF_OBJNUM = LF_OBJNUM ).

    loop at LT_SETVA into LS_SETVA.
      clear: LS_MAPVN.

      case LS_SETVA-MAPID.

***     Average Consumption
        when C_MAPID_AVGCO.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          move LS_MAPVN-ATFLV     to ME->S_AVGCO-AVGCO.
          move LS_MAPVN-ATFLV_UOM to ME->S_AVGCO-AVGCO_UOM.

***     Average Consumption per
        when C_MAPID_AVGCP.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          move LS_MAPVN-ATFLV     to ME->S_AVGCP-AVGCP.
          move LS_MAPVN-ATFLV_UOM to ME->S_AVGCP-AVGCP_UOM.

***     Solid Content
        when C_MAPID_SLDCO.
          read table LS_SETVA-T_MAPVN into LS_MAPVN index 1.
          if SY-SUBRC eq 0.
            move LS_MAPVN-ATFLV     to ME->S_SLDCO-SLDCO.
            move LS_MAPVN-ATFLV_UOM to ME->S_SLDCO-SLDCO_UOM.
          endif.

      endcase.
    endloop.

  endmethod.
