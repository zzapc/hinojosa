
class ZCL_VCXI_F0SR_BL_PSTEP definition
  public
  inheriting from ZCL_VCXI_XCSR_BL_PSTEP
  abstract
  create public .

public section.

  constants C_COMBW_ANY type ZVCXI_F0S_COMBW value ' ' ##NO_TEXT.
  constants C_COMBW_NEXT type ZVCXI_F0S_COMBW value 'N' ##NO_TEXT.
  constants C_COMBW_PREV type ZVCXI_F0S_COMBW value 'P' ##NO_TEXT.
  data F_COMBW type ZVCXI_F0S_COMBW read-only .
  data I_WERKS type /VCXI/CL_VSMR_RTE_PSTEP=>YI_WERKS .

  methods REPLACE_MFSI_BY_MFMI
    importing
      !IF_IMFXC type ZVCXI_XCSP_IMFXC
      !IR_MFMI type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods SET_COMBW
    importing
      !IF_COMBW type ZVCXI_F0S_COMBW
    raising
      /VCXI/CX_CKX .

  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  methods GET_UOM_OF_PARAM
    importing
      !IF_PARID type /VCXI/VKS_PARID
    returning
      value(RF_UOM) type /VCXI/CKX_UOM
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_PSCALE_MGR
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_PSCALE type ZVCXI_XCSR_TT_PSCALE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_F0SR_BL_PSTEP definition
class ZCL_VCXI_F0SR_BL_PSTEP implementation.
  method ADD_LIMITS_TO_RTE_PSTEP.

    field-symbols: <S_WERKS> type line of /VCXI/CL_VSMR_RTE_PSTEP=>YI_WERKS.

***--------------------------------------------------------------------------------------
*** Filter to Plant
    append lines of ME->I_WERKS to IR_RTE_PSTEP->I_WERKS.

  endmethod.
  method ADD_SPVRE_PSCALE_MGR.

    data: LS_PSCALE           type        ZVCXI_XCSR_S_PSCALE.
    data: LR_SPVCE_PSCALE_MGR type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVCE_PSCALE     type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_PSCALE_MGR type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_PSCALE     type ref to /VCXI/CL_VKSR_SPVRE.

    check IT_PSCALE is not initial.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE_PSCALE_MGR = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'PSCALE_MGR'
                                                   IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_PSCALE_MGR
      exporting
        IR_SPVCE  = LR_SPVCE_PSCALE_MGR
        IR_PARENT = IR_SPVRE_PARENT.
    append LR_SPVRE_PSCALE_MGR to CT_SPVRE.

*** Set In Use
    LR_SPVRE_PSCALE_MGR->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Add Scales
    loop at IT_PSCALE into LS_PSCALE.

***------------------------------------------------------------------------------------------------
***   Get Customizing Element
      LR_SPVCE_PSCALE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = LS_PSCALE-ISVCE
                                                 IR_SPVCE_PARENT = LR_SPVRE_PSCALE_MGR->R_SPVCE ).

***   Create Supervisor Runtime Element
      create object LR_SPVRE_PSCALE
        exporting
          IR_SPVCE  = LR_SPVCE_PSCALE
          IR_PARENT = LR_SPVRE_PSCALE_MGR.
      append LR_SPVRE_PSCALE to CT_SPVRE.

***   Set In Use
      LR_SPVRE_PSCALE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
***   Set Price Scale Quantity
      LR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = value #( PARID = switch #( LS_PSCALE-ISVCE when 'PSCALE_A' then ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PSQTY_A
                                                                                        when 'PSCALE_P' then ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PSQTY_P
                                                                                        when 'PSCALE_W' then ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PSQTY_W
                                                                                        when 'PSCALE_L' then ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PSQTY_L )
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                      ATFLV = LS_PSCALE-PSQTY
                                                      UNIT  = LS_PSCALE-PSQTY_UOM
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
***   Set Price
      LR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PRICE
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                      ATFLV = LS_PSCALE-PRICE
                                                      CURKY = LS_PSCALE-PRICE_CURR
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
***   Set Price Unit
      LR_SPVRE_PSCALE->SET_PARAM( IS_PARAM = value #( PARID = switch #( LS_PSCALE-ISVCE when 'PSCALE_A' then ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PRICP_A
                                                                                        when 'PSCALE_P' then ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PRICP_P
                                                                                        when 'PSCALE_W' then ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PRICP_W
                                                                                        when 'PSCALE_L' then ZCL_VCXI_XCS_PR_PSCALE=>C_PARID_PRICP_L )
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                      ATFLV = LS_PSCALE-PRICP
                                                      UNIT  = LS_PSCALE-PRICP_UOM
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

    endloop.

  endmethod.
  method COMPARE.

    data: LR_BL_PSTEP    type ref to ZCL_VCXI_F0SR_BL_PSTEP.

*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP.

***--------------------------------------------------------------------------------------
*** Compare Plant
    if ME->I_WERKS eq LR_BL_PSTEP->I_WERKS.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

*** Compare Combine With
    if ME->F_COMBW eq LR_BL_PSTEP->F_COMBW.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

  endmethod.
  method COPY.

    data: LR_BL_PSTEP  type ref to ZCL_VCXI_F0SR_BL_PSTEP.

*** Super Copy
    RR_BL_PSTEP  = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP.

***--------------------------------------------------------------------------------------
*** Copy Plant
    move ME->I_WERKS   to LR_BL_PSTEP->I_WERKS.

*** Copy Combine With
    move ME->F_COMBW   to LR_BL_PSTEP->F_COMBW.

  endmethod.
  method DESERIALIZE.

    data: LF_XML         type STRING.
    data: LT_DATA        type ABAP_TRANS_SRCBIND_TAB.


    check IF_XML is not initial.

***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).
    append value #( NAME = 'SUPER_XML'      VALUE = ref #( LF_XML )         ) to LT_DATA.

*** Deserialize
    call transformation ID
         source xml IF_XML
         result (LT_DATA).

***--------------------------------------------------------------------------------------
*** Super Deserialize
    SUPER->DESERIALIZE( IF_XML = LF_XML ).

  endmethod.
  method GET_UOM_OF_PARAM.

    data: LF_GUID  type /VCXI/CKX_GUID,
          LF_SYSOM type /VCXI/VKS_SYSOM.
    data: LR_PARAM  type ref to /VCXI/CL_VKSC_PARAM,
          LR_CUPRFL type ref to /VCXI/CL_VKSC_CUPRFL.

*** Get Instance of Parameter
    move IF_PARID to LF_GUID.
    LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    check LR_PARAM is bound.

*** Get Instance of Configuration Profile
    LR_CUPRFL = /VCXI/CL_VKSC_CUPRFL=>GET_INSTANCE_BY_CMPRK( IS_CMPRK = ME->R_APPDATA->S_CMPRK ).
    check LR_CUPRFL is bound.

*** Get System of Measurement for production step plant
    LF_SYSOM = LR_CUPRFL->GET_SYSOM_BY_WERKS( IF_WERKS = ME->R_APPDATA->F_WERKS ).

*** Use Metric Unit of Measure
    case LF_SYSOM.
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
        move LR_PARAM->F_UOMKY_M to RF_UOM.
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
        move LR_PARAM->F_UOMKY_I to RF_UOM.
    endcase.

  endmethod.
  method GET_XML_DREF.

***--------------------------------------------------------------------------------------
*** Get Basic References
    RT_DATA = value #( ( NAME = 'I_WERKS'    VALUE = ref #( ME->I_WERKS  ) )
                       ( NAME = 'F_COMBW'    VALUE = ref #( ME->F_COMBW  ) )
                     ).
  endmethod.
  method REPLACE_MFSI_BY_MFMI  ##NEEDED.
  endmethod.
  method SERIALIZE.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).

*** Super Serialize
    RF_XML = SUPER->SERIALIZE( ).
    append value #( NAME = 'SUPER_XML'  VALUE = ref #( RF_XML ) ) to LT_DATA.

***--------------------------------------------------------------------------------------
*** Serialize to XML
    call transformation ID
         source (LT_DATA)
         result xml RF_XML.

  endmethod.
  method SET_COMBW.

    move IF_COMBW to ME->F_COMBW.

  endmethod.
