
class ZCL_VCXI_PXSS_GRID_SCORE definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_PXSS_S_SCORE_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_NSCOR_01 type ZVCXI_P0SS_NSCOR value '01' ##NO_TEXT.
  data R_PR_SCORE_MGR type ref to ZCL_VCXI_PXSS_PR_SCORE_MGR .

  methods CHANGE_STYLE_SCORE
    importing
      !IF_LAST_SCORE type ABAP_BOOL
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods CHECK_INITIAL_SCORES
    exporting
      !EF_INITIAL_CROSS type ABAP_BOOL
      !EF_INITIAL_LENGTH type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_SCORE_VIS
    importing
      !IR_PR_SCORE type ref to ZCL_VCXI_PXSS_PR_SCORE
    returning
      value(RS_SCORE_VIS) type ZVCXI_PXSS_S_SCORE_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_SCORE_VIS
    importing
      !IR_PR_SCORE type ref to ZCL_VCXI_PXSS_PR_SCORE
      !IS_SCORE_VIS type ZVCXI_PXSS_S_SCORE_VIS
    raising
      /VCXI/CX_CKX .

  methods ADD_PRVDR
    redefinition .
  methods DEL_PRVDR
    redefinition .
  methods GET_DISABLED_ADD
    redefinition .
  methods GET_DISABLED_DEL
    redefinition .
  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods HANDLE_UCOMM
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_GRID_SCORE definition
class ZCL_VCXI_PXSS_GRID_SCORE implementation.
  method ADD_PRVDR.

    data: LF_ADD_CROSS    type        ABAP_BOOL,
          LF_ADD_LENGTH   type        ABAP_BOOL,
          LF_UPDATE_ISCOR type        ABAP_BOOL,
          LF_TIMES        type        I value 1.
    data: LR_PR_SCORE     type ref to ZCL_VCXI_PXSS_PR_SCORE.
    data: LS_SCORP        type        ZVCXI_P0SS_S_SCORP.

    ME->CHECK_INITIAL_SCORES( importing EF_INITIAL_CROSS  = LF_ADD_CROSS
                                        EF_INITIAL_LENGTH = LF_ADD_LENGTH ).

*** Set Add again the Second one if it is needed
    if LF_ADD_CROSS  eq ABAP_TRUE and
       LF_ADD_LENGTH eq ABAP_TRUE.
      move 2 to LF_TIMES.
      move ABAP_TRUE to LF_UPDATE_ISCOR .
    endif.

*** Add Scores
    do LF_TIMES times.

      RR_GATE = SUPER->ADD_PRVDR( IF_ID = IF_ID ).

***   Set Initial Score Position
      try.

          move RR_GATE->R_CLSPR ?to LR_PR_SCORE.
          check LR_PR_SCORE is bound.

          LR_PR_SCORE->SET_SCORP( IS_SCORP = LS_SCORP
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

***       Set Score Category and Number if we have to add two!!
          if LF_UPDATE_ISCOR eq ABAP_TRUE.
            case ABAP_TRUE.
              when LF_ADD_CROSS.
                LR_PR_SCORE->SET_ISCOR( IF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH )
                                        IF_NSCOR = '01'
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
                clear: LF_ADD_CROSS.
              when LF_ADD_LENGTH.
                LR_PR_SCORE->SET_ISCOR( IF_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH )
                                        IF_NSCOR = '01'
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
                clear: LF_ADD_LENGTH.
            endcase.
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.

***   Reorg position ID's
      RR_GATE->REORG_POSID( ).

***   Refresh is required
      ME->F_REFRESH_REQ = ABAP_TRUE.

    enddo.

  endmethod.
  method CHANGE_STYLE_SCORE.

    data: LF_STYLE_ENABLED type LVC_STYLE.

    free CT_STYL.

***--------------------------------------------------------------------------------------
*** Set Style Details -> only Editable
    if IF_LAST_SCORE     eq ABAP_FALSE.
      move ME->F_STYLE_ENABLED to LF_STYLE_ENABLED.
    elseif IF_LAST_SCORE eq ABAP_TRUE.
      move ME->F_STYLE_DISABLED to LF_STYLE_ENABLED.
    endif.

*** Set Score ID = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ISCOR'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Score ID Description = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ISCOR_DESCR'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Score Position = Enable if needed
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SCORP'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Score Position Unit = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SCORP_UOM'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Score Type = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TSCOR'
                                IF_STYLE     = ME->F_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Score Type Description = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TSCOR_DESCR'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Flag - Slot Indicator = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FSLIN'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Flag - Apply = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FSCAP'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

  endmethod.
  method CHECK_INITIAL_SCORES.

    data: LF_CSCOR_C type ZVCXI_P0SS_CSCOR,
          LF_CSCOR_L type ZVCXI_P0SS_CSCOR,
          LF_CSCOR   type        ZVCXI_P0SS_CSCOR.
    data: LT_GATE     type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SCORE type ref to ZCL_VCXI_PXSS_PR_SCORE.


***--------------------------------------------------------------------------------------
*** Get Score Categories for Length and Cross Score
    LF_CSCOR_C = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH ).
    LF_CSCOR_L = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( IF_DIMEN = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH ).

*** Start Negativ
    EF_INITIAL_CROSS  = ABAP_TRUE.
    EF_INITIAL_LENGTH = ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Get Gates of SCORE
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_SCORE=>C_IPRVT_PX_SCORE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      clear: LF_CSCOR, LR_PR_SCORE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
          check LR_PR_SCORE is bound.

***--------------------------------------------------------------------------------------
***     Get Score Category and Type
          LR_PR_SCORE->GET_ISCOR( importing EF_CSCOR = LF_CSCOR ).

          if LF_CSCOR is not initial.
            case LF_CSCOR.
              when LF_CSCOR_C.
                clear EF_INITIAL_CROSS.
              when LF_CSCOR_L.
                clear EF_INITIAL_LENGTH.
            endcase.
          endif.

          check EF_INITIAL_CROSS  eq ABAP_FALSE and
                EF_INITIAL_LENGTH eq ABAP_FALSE.
          exit.

        catch /VCXI/CX_CKX.
          continue.
      endtry.
    endloop.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IR_UIGATE         = IR_UIGATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).


    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_SCORE_MGR.

***     Define Provider Type for Button
        ME->F_IPRVT = ZCL_VCXI_PXSS_PR_SCORE=>C_IPRVT_PX_SCORE.

      catch CX_SY_MOVE_CAST_ERROR.
        clear ME->R_PR_SCORE_MGR.
    endtry.

  endmethod.
  method DEL_PRVDR.

    data: LF_ISCOR type ZVCXI_P0SS_ISCOR,
          LF_NSCOR type ZVCXI_P0SS_NSCOR.
    data: LT_GATE     type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SCORE type ref to ZCL_VCXI_PXSS_PR_SCORE.

    check ME->R_PR_SCORE_MGR is bound.

*** Free Selected Gates
    LT_GATE = ME->GET_SELECTED_GATES( ).
    loop at LT_GATE into LR_GATE.
      check LR_GATE is bound.

***   if we have "half-automatic" or we are the "first and last" Score-> do not delete last score's
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_SCORE.
          continue.
      endtry.
      check LR_PR_SCORE is bound.
      LF_ISCOR = LR_PR_SCORE->GET_ISCOR( importing EF_NSCOR = LF_NSCOR ).

***   Do Check and Delete
      if ME->R_PR_SCORE_MGR->F_SCORE_ADJ eq ABAP_UNDEFINED or
         LF_NSCOR                        eq C_NSCOR_01.
        check ME->R_PR_SCORE_MGR->CHECK_LAST_SCORE( IF_ISCOR = LF_ISCOR ) eq ABAP_FALSE.
      endif.

***   Delete Score
      ME->R_PR_SCORE_MGR->DELETE_SCORE( IR_GATE = LR_GATE
                                        IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endloop.

*** Raise Event's
    ME->R_GATE->RAISE_EVENTS( ).

*** Refresh is required
    ME->F_REFRESH_REQ = ABAP_TRUE.

  endmethod.
  method GET_DISABLED_ADD.

*** Add Scores -> only if Adjustable is allowed
    if ME->R_PR_SCORE_MGR              is bound and
       ME->R_PR_SCORE_MGR->F_SCORE_ADJ ne ABAP_FALSE.

      RF_DISABLED = SUPER->GET_DISABLED_ADD( ).

    else.
      RF_DISABLED = ABAP_TRUE.
    endif.

  endmethod.
  method GET_DISABLED_DEL.

*** Delete Scores -> only if Adjustable is allowed
    if ME->R_PR_SCORE_MGR              is bound and
       ME->R_PR_SCORE_MGR->F_SCORE_ADJ ne ABAP_FALSE.

      RF_DISABLED = SUPER->GET_DISABLED_DEL( ).

    else.
      RF_DISABLED = ABAP_TRUE.
    endif.

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED type  /VCXI/CKX_LOCKED,
          LF_INUSE  type  /VCXI/VKSR_INUSE.
    field-symbols:  <S_FCAT>  type  LVC_S_FCAT.

***--------------------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE->IS_INUSE( ).

*** Get Score Status Calculation Method
    case ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = ME->R_PR_SCORE_MGR->GET_SSCOR( ) ).
      when '4'. "External
        clear LF_LOCKED.   " Dissable completely
    endcase.

***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL'.
          move ABAP_TRUE    to <S_FCAT>-TECH.

        when 'SCORP'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            if ME->R_PR_SCORE_MGR              is bound and
               ME->R_PR_SCORE_MGR->F_SCORE_ADJ eq ABAP_TRUE.
              move ABAP_TRUE    to <S_FCAT>-EDIT.
            else.
              move ABAP_FALSE    to <S_FCAT>-EDIT.
            endif.
          endif.

        when 'TSCOR'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
          endif.

        when 'FSLIN'.
          move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            if ME->R_PR_SCORE_MGR              is bound and
               ME->R_PR_SCORE_MGR->F_SCORE_ADJ eq ABAP_TRUE.
              move ABAP_TRUE    to <S_FCAT>-EDIT.
            else.
              move ABAP_FALSE    to <S_FCAT>-EDIT.
            endif.
          endif.

        when 'FSCAP'.
          move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
          move ABAP_TRUE    to <S_FCAT>-NO_OUT.

      endcase.
    endloop.

  endmethod.
  method GET_GRID_DATA.

    data: LF_LAST_SCORE type ABAP_BOOL.
    data: LS_SCORE_GRID type ZVCXI_PXSS_S_SCORE_GRID,
          LS_SCORE_VIS  type ZVCXI_PXSS_S_SCORE_VIS.
    data: LT_GATE       type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SCORE type ref to ZCL_VCXI_PXSS_PR_SCORE.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

*** Get Gates of Score
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSS_PR_SCORE=>C_IPRVT_PX_SCORE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      clear: LS_SCORE_GRID, LS_SCORE_VIS, LF_LAST_SCORE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
          check LR_PR_SCORE is bound.

***--------------------------------------------------------------------------------------
***       Get Data
          move LR_GATE->GET_POSID( ) to LS_SCORE_GRID-POSID.
          move LR_GATE->F_GATKY      to LS_SCORE_GRID-GATKY.
          move LR_GATE               to LS_SCORE_GRID-R_GATE.

          LS_SCORE_VIS = ME->GET_SCORE_VIS( IR_PR_SCORE = LR_PR_SCORE ).
          move-corresponding LS_SCORE_VIS to LS_SCORE_GRID.

          if ME->R_PR_SCORE_MGR               is bound          and
             ME->R_PR_SCORE_MGR->F_SCORE_ADJ  eq ABAP_FALSE.
            move ABAP_TRUE to LF_LAST_SCORE.

          elseif ME->R_PR_SCORE_MGR           is bound          and
              ME->R_PR_SCORE_MGR->F_SCORE_ADJ eq ABAP_UNDEFINED and
              ME->R_PR_SCORE_MGR->CHECK_LAST_SCORE( IF_ISCOR = LS_SCORE_VIS-ISCOR ) eq ABAP_TRUE.
            move ABAP_TRUE to LF_LAST_SCORE.

          else.
            move ABAP_FALSE to LF_LAST_SCORE.
          endif.

***--------------------------------------------------------------------------------------
***       Set Style Details
          ME->CHANGE_STYLE_SCORE( exporting IF_LAST_SCORE = LF_LAST_SCORE
                                  changing  CT_STYL       = LS_SCORE_GRID-T_STYL ).

***       Call DVC Service - Modify Style
          ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                               changing  CT_STYL = LS_SCORE_GRID-T_STYL ).

***--------------------------------------------------------------------------------------
***       Add Entry
          append initial line to <T_DATA> assigning <S_DATA>.
          move-corresponding LS_SCORE_GRID to <S_DATA>.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_LAYOUT.

    RS_LAYOUT = SUPER->GET_LAYOUT( ).

    move ABAP_TRUE to RS_LAYOUT-NO_ROWMARK.

  endmethod.
  method GET_SCORE_VIS.

*** Get Score ID and Description
    RS_SCORE_VIS-ISCOR = IR_PR_SCORE->GET_ISCOR( importing EF_DESCR = RS_SCORE_VIS-ISCOR_DESCR ).

*** Score Position
    RS_SCORE_VIS-S_SCORP = IR_PR_SCORE->GET_SCORP( ).

*** Score Type
    RS_SCORE_VIS-TSCOR = IR_PR_SCORE->GET_TSCOR( importing EF_DESCR = RS_SCORE_VIS-TSCOR_DESCR ).

*** Flag - Slot Indicator
    RS_SCORE_VIS-FSLIN = IR_PR_SCORE->GET_FSLIN( ).

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_SCORE_GRID type ZVCXI_PXSS_S_SCORE_GRID,
          LS_SCORE_VIS  type ZVCXI_PXSS_S_SCORE_VIS.
    data: LR_PR_SCORE type ref to ZCL_VCXI_PXSS_PR_SCORE.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    check E_MODIFIED eq ABAP_TRUE.

    try.
        SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                             ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.
          try.
              move-corresponding <S_DATA> to LS_SCORE_GRID.
              check LS_SCORE_GRID-R_GATE is bound.

              move LS_SCORE_GRID-R_GATE->R_CLSPR ?to LR_PR_SCORE.
              check LR_PR_SCORE is bound.

***           Set Values to PR Class
              move-corresponding LS_SCORE_GRID to LS_SCORE_VIS.
              ME->SET_SCORE_VIS( IR_PR_SCORE  = LR_PR_SCORE
                                 IS_SCORE_VIS = LS_SCORE_VIS ).

            catch CX_SY_MOVE_CAST_ERROR.
              continue.
          endtry.
        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_UCOMM.

    data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.

    try.

***     Trigger Grid Changes
        ME->CHECK_CHANGED_DATA( ).

***     Do Super
        SUPER->HANDLE_UCOMM( E_UCOMM = E_UCOMM ).

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method SET_SCORE_VIS.

    data: LS_SCORP     type ZVCXI_P0SS_S_SCORP,
          LS_SCORE_VIS type ZVCXI_PXSS_S_SCORE_VIS.

*** Get old data
    LS_SCORE_VIS = ME->GET_SCORE_VIS( IR_PR_SCORE = IR_PR_SCORE ).

*** Score Position
    if IS_SCORE_VIS-SCORP ne LS_SCORE_VIS-SCORP.
      move-corresponding IS_SCORE_VIS to LS_SCORP.
      IR_PR_SCORE->SET_SCORP( IS_SCORP = LS_SCORP
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Score Type
    if IS_SCORE_VIS-TSCOR ne LS_SCORE_VIS-TSCOR.
      IR_PR_SCORE->SET_TSCOR( IF_TSCOR = IS_SCORE_VIS-TSCOR
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Flag - Slot Indicator
    if IS_SCORE_VIS-FSLIN ne LS_SCORE_VIS-FSLIN.
      IR_PR_SCORE->SET_FSLIN( IF_FSLIN = IS_SCORE_VIS-FSLIN
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
