
class ZCL_VCXI_PXSS_POPUP_SCORE_COM definition
  public
  create protected .

public section.

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IF_EDIT type LVC_EDIT
      !IF_DIMEN type ZVCXI_PXS_DIMEN optional
    changing
      !CT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
    returning
      value(RF_CANCELED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  data C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_DEL type UI_FUNC value 'DEL' ##NO_TEXT.
  data C_UC_OKAY type SYUCOMM value 'OKAY' ##NO_TEXT.
  data F_CANCELED type ABAP_BOOL .
  data F_CSCOR type ZVCXI_P0SS_CSCOR .
  data F_EDIT type LVC_EDIT .
  data R_CONTAINER_SCORE_COM type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_DATA_SCORE_COM type ref to DATA .
  data R_GRID_SCORE_COM type ref to CL_GUI_ALV_GRID .
  data T_FCAT_SCORE_COM type LVC_T_FCAT .
  data T_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM .

  methods CHANGE_STYLE
    importing
      !IF_FIELDNAME type FIELDNAME
      !IF_STYLE type LVC_STYLE
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM
      !IF_EDIT type LVC_EDIT
      !IF_DIMEN type ZVCXI_PXS_DIMEN
    raising
      /VCXI/CX_CKX .
  methods CREATE_GRID
    importing
      !IR_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER
      !IT_FCAT type LVC_T_FCAT optional
    returning
      value(RR_GRID) type ref to CL_GUI_ALV_GRID
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods GET_FIELDCAT_SCORE_COM
    returning
      value(RT_FCAT) type LVC_T_FCAT
    raising
      /VCXI/CX_CKX .
  methods GET_GRID_DATA
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_ROWS
    importing
      !IR_GRID type ref to CL_GUI_ALV_GRID
    exporting
      !ET_ROW type LVC_T_ROW
      !ES_LAST_ROW type LVC_S_ROW
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_UC_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OKAY
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID_SCORE_COM
    raising
      /VCXI/CX_CKX .
  methods SET_PF_STATUS
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SCORE_COM
    importing
      !IT_DATA type TABLE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_POPUP_SCORE_COM definition
class ZCL_VCXI_PXSS_POPUP_SCORE_COM implementation.
  method CHANGE_STYLE.

    data:          LS_STYL   type LVC_S_STYL.
    field-symbols: <S_STYL>  type LVC_S_STYL.


    read table CT_STYL assigning <S_STYL>
                       with key FIELDNAME = IF_FIELDNAME.
    if SY-SUBRC eq 0.
      <S_STYL>-STYLE = IF_STYLE.
    else.
      LS_STYL-FIELDNAME   = IF_FIELDNAME.
      LS_STYL-STYLE       = IF_STYLE.
      insert LS_STYL into table CT_STYL.
    endif.

  endmethod.
  method CONSTRUCTOR.

    ME->T_SCORE_COM = IT_SCORE_COM.
    ME->F_EDIT      = IF_EDIT.

*** Create Data Reference to Grid Data
    create data ME->R_DATA_SCORE_COM type table of ZVCXI_PXSS_S_SCORE_COM_GRID.
    ME->T_FCAT_SCORE_COM = ME->GET_FIELDCAT_SCORE_COM( ).

*** Score Category Filter based on Dimension
    if IF_DIMEN is not initial.
      ME->F_CSCOR = ZCL_VCXI_P0SSC_PRSTY=>GET_CSCOR( exporting IF_DIMEN = IF_DIMEN ).
    endif.

  endmethod.
  method CREATE_GRID.

    data: LT_F4 type LVC_T_F4.


***--------------------------------------------------------------------------------------
*** Create Grid
    create object RR_GRID
      exporting
        I_PARENT          = IR_CONTAINER
        I_APPL_EVENTS     = ABAP_TRUE
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Enter as Event
    RR_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

*** Register Events
    set handler ME->HANDLE_DATA_CHANGED_FINISHED for RR_GRID.
    set handler ME->HANDLE_TOOLBAR               for RR_GRID.
    set handler ME->HANDLE_UCOMM                 for RR_GRID.


***--------------------------------------------------------------------------------------
*** Register Search Help Fields
    loop at IT_FCAT into data(LS_FCAT) where F4AVAILABL eq ABAP_TRUE.
      insert value #( FIELDNAME  = LS_FCAT-FIELDNAME
                      REGISTER   = 'X'
                      CHNGEAFTER = 'X' ) into table LT_F4.
    endloop.

    RR_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

  endmethod.
  method DO_FREE.

*** Free Grid
    if ME->R_GRID_SCORE_COM is bound.
***   Check for Changes
      ME->R_GRID_SCORE_COM->CHECK_CHANGED_DATA( ).

      ME->R_GRID_SCORE_COM->FREE( exceptions
                                    CNTL_ERROR        = 1
                                    CNTL_SYSTEM_ERROR = 2
                                    others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_GRID_SCORE_COM.
    endif.

*** Free Container
    if ME->R_CONTAINER_SCORE_COM is bound.
      ME->R_CONTAINER_SCORE_COM->FREE( exceptions
                                         CNTL_ERROR        = 1
                                         CNTL_SYSTEM_ERROR = 2
                                         others            = 3 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
      clear ME->R_CONTAINER_SCORE_COM.
    endif.

  endmethod.
  method DO_PBO.

*** Get Data for Grids
    ME->GET_GRID_DATA( ).

*** Initialize Container
    ME->INIT_CONTAINER( ).

*** Refresh Grid Output
    ME->REFRESH_GRID_SCORE_COM( ).

***--------------------------------------------------------------------------------------
*** Set PF-Status
    ME->SET_PF_STATUS( ).

  endmethod.
  method DO_USER_COMMAND.

    case IF_UCOMM.
      when C_UC_OKAY.
        ME->HANDLE_UC_OKAY( ).
      when C_UC_CANCEL.
        ME->HANDLE_UC_CANCEL( ).
    endcase.

  endmethod.
  method GET_FIELDCAT_SCORE_COM.

    data: LF_EDIT_ALLOWED type ABAP_BOOL,
          LF_COLPOS       type I.


*** Get Standard Field Catalog
    call function 'LVC_FIELDCATALOG_MERGE'
      exporting
        I_STRUCTURE_NAME       = 'ZVCXI_PXSS_S_SCORE_COM_GRID'
      changing
        CT_FIELDCAT            = RT_FCAT
      exceptions
        INCONSISTENT_INTERFACE = 1
        PROGRAM_ERROR          = 2
        others                 = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning field-symbol(<S_FCAT>).
***   General adjustments
      case <S_FCAT>-FIELDNAME.
        when 'T_STYL'.
          <S_FCAT>-TECH = ABAP_TRUE.
        when 'TSCOR'.
          <S_FCAT>-F4AVAILABL = ABAP_TRUE.
        when 'FSLIN'.
          <S_FCAT>-CHECKBOX = ABAP_TRUE.
      endcase.

***   Adjust Edit Mode
      case <S_FCAT>-FIELDNAME.
        when 'SCORP' or 'TSCOR' or 'FSLIN'.
          <S_FCAT>-EDIT = ME->F_EDIT.
      endcase.

***--------------------------------------------------------------------------------------
***   Set Position for each Field
      move 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'ISCOR'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'ISCOR_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'SCORP'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'SCORP_UOM'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TSCOR'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TSCOR_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'FSLIN'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.

    endloop.

  endmethod.
  method GET_GRID_DATA.

    data: LF_ISCOR_C type ZVCXI_P0SS_ISCOR,
          LF_ISCOR_L type ZVCXI_P0SS_ISCOR.
    data: LS_SCORE_COM_GRID type ZVCXI_PXSS_S_SCORE_COM_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type ANY.


*** Dereferencing of Data Reference
    assign ME->R_DATA_SCORE_COM->* to <T_DATA>.
    free: <T_DATA>.

*** Get Edge Scores
    ZCL_VCXI_PXSS_BL_SCORE=>GET_EDGE_SCORES( exporting IT_SCORE_COM = ME->T_SCORE_COM
                                             importing EF_ISCOR_C   = LF_ISCOR_C
                                                       EF_ISCOR_L   = LF_ISCOR_L ).



*** Get Scores
    loop at ME->T_SCORE_COM into data(LS_SCORE_COM).
***   Check Score Category based on Dimension
      if ME->F_CSCOR is not initial.
        check LS_SCORE_COM-ISCOR(1) eq ME->F_CSCOR.
      endif.

      clear LS_SCORE_COM_GRID.
      move LS_SCORE_COM to LS_SCORE_COM_GRID-S_SCORE_COM.

***   Get Descriptions
      LS_SCORE_COM_GRID-ISCOR_DESCR = ZCL_VCXI_PXSS_BL_SCORE=>GET_DESCR_ISCOR( IF_ISCOR = LS_SCORE_COM_GRID-ISCOR ).
      LS_SCORE_COM_GRID-TSCOR_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_TSCOR_INFO( IF_TSCOR = LS_SCORE_COM_GRID-TSCOR )-DESCR.

***   Block Edge Score Type
      if LS_SCORE_COM-ISCOR eq LF_ISCOR_C or
         LS_SCORE_COM-ISCOR eq LF_ISCOR_L.
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TSCOR'
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                          changing  CT_STYL      = LS_SCORE_COM_GRID-T_STYL ).
        ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FSLIN'
                                    IF_STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED
                          changing  CT_STYL      = LS_SCORE_COM_GRID-T_STYL ).
      endif.

***   Add Entry to Table
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding LS_SCORE_COM_GRID to <S_DATA>.
    endloop.

  endmethod.
  method GET_SELECTED_ROWS.

    data: LT_CELL type        LVC_T_CELL,
          LT_ROW  type        LVC_T_ROW.
    data: LS_CELL type        LVC_S_CELL,
          LS_ROW  type        LVC_S_ROW.


*** Get Cursor in Grid
    IR_GRID->GET_SELECTED_CELLS( importing ET_CELL = LT_CELL ).
    if LINES( LT_CELL ) gt 0.
      loop at LT_CELL into LS_CELL.
        append LS_CELL-ROW_ID to ET_ROW.
***     Get last Index
        if ES_LAST_ROW-INDEX lt LS_CELL-ROW_ID-INDEX.
          move LS_CELL-ROW_ID to ES_LAST_ROW.
        endif.
      endloop.
    endif.

*** Get Selected Rows
    IR_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_ROW ).
    if LINES( LT_ROW ) gt 0.
      append lines of LT_ROW to ET_ROW.

      loop at LT_ROW into LS_ROW.
***     Get last Index
        if ES_LAST_ROW-INDEX lt LS_ROW-INDEX.
          move LS_ROW to ES_LAST_ROW.
        endif.
      endloop.
    endif.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    field-symbols: <T_DATA> type standard table.


    try.
***     Dereferencing of Data Reference
        assign ME->R_DATA_SCORE_COM->* to <T_DATA>.

***     Update Score Table
        ME->UPDATE_SCORE_COM( IT_DATA = <T_DATA> ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR.

    data: LF_DISABLED type ABAP_BOOL.


    try.
        LF_DISABLED = switch #( ME->F_EDIT when ABAP_TRUE  then ABAP_FALSE
                                           when ABAP_FALSE then ABAP_TRUE ).

***--------------------------------------------------------------------------------------
***     Insert Toolbar elements to modify Scores
        append value #( FUNCTION  = C_UC_ADD
                        BUTN_TYPE = '0'    "Button
                        ICON      = ICON_INSERT_ROW
                        DISABLED  = LF_DISABLED
                      ) to E_OBJECT->MT_TOOLBAR.

        append value #( FUNCTION  = C_UC_DEL
                        BUTN_TYPE = '0'    "Button
                        ICON      = ICON_DELETE_ROW
                        DISABLED  = LF_DISABLED
                      ) to E_OBJECT->MT_TOOLBAR.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_UC_ADD.

    data: LS_ROW       type LVC_S_ROW,
          LS_SCORE_COM type ZVCXI_PXSS_S_SCORE_COM.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign ME->R_DATA_SCORE_COM->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get Cursor of Last Row in Grid
    ME->GET_SELECTED_ROWS( exporting IR_GRID     = ME->R_GRID_SCORE_COM
                           importing ES_LAST_ROW = LS_ROW ).


*** Get selected Score Information
    assign <T_DATA>[ LS_ROW-INDEX ] to <S_DATA>.
    check SY-SUBRC eq 0.
    LS_SCORE_COM = corresponding #( <S_DATA> ).
    clear: LS_SCORE_COM-SCORP,
           LS_SCORE_COM-TSCOR,
           LS_SCORE_COM-FSLIN.

*** Insert Score
    insert initial line into <T_DATA> index LS_ROW-INDEX
                        assigning <S_DATA>.
*{   REPLACE        HEDK927942                                        1
*\    <S_DATA> = corresponding #( LS_SCORE_COM ).
      MOVE-CORRESPONDING LS_SCORE_COM TO <S_DATA>.
*}   REPLACE

*** Update Score Table
    ME->UPDATE_SCORE_COM( IT_DATA = <T_DATA> ).

  endmethod.
  method HANDLE_UC_CANCEL.


    ME->F_CANCELED = ABAP_TRUE.

*** Leave Popup
    ME->DO_FREE( ).
    leave to screen 0.

  endmethod.
  method HANDLE_UC_DEL.

    data: LS_ROW type LVC_S_ROW.
    field-symbols: <T_DATA> type standard table.


***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign ME->R_DATA_SCORE_COM->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get Cursor of Last Row in Grid
    ME->GET_SELECTED_ROWS( exporting IR_GRID     = ME->R_GRID_SCORE_COM
                           importing ES_LAST_ROW = LS_ROW ).
    check LS_ROW is not initial.

*** Delete Print
    delete <T_DATA> index LS_ROW-INDEX.

*** Update Score Table
    ME->UPDATE_SCORE_COM( IT_DATA = <T_DATA> ).

  endmethod.
  method HANDLE_UC_OKAY.

    ME->F_CANCELED = ABAP_FALSE.

*** Leave Popup
    ME->DO_FREE( ).
    leave to screen 0.

  endmethod.
  method HANDLE_UCOMM.

    try.
***     Trigger command
        case E_UCOMM.
          when C_UC_ADD.
            ME->HANDLE_UC_ADD( ).
          when C_UC_DEL.
            ME->HANDLE_UC_DEL( ).
        endcase.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method INIT_CONTAINER.

    if ME->R_CONTAINER_SCORE_COM is not bound.
      create object ME->R_CONTAINER_SCORE_COM
        exporting
          CONTAINER_NAME              = '0100CC_SCORE_COM'
        exceptions
          CNTL_ERROR                  = 1
          CNTL_SYSTEM_ERROR           = 2
          CREATE_ERROR                = 3
          LIFETIME_ERROR              = 4
          LIFETIME_DYNPRO_DYNPRO_LINK = 5
          others                      = 6.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method REFRESH_GRID_SCORE_COM.

    field-symbols: <T_DATA> type standard table.


    check ME->R_CONTAINER_SCORE_COM is bound.

*** Create Grid
    if ME->R_GRID_SCORE_COM is not bound.
      ME->R_GRID_SCORE_COM = ME->CREATE_GRID( IR_CONTAINER = ME->R_CONTAINER_SCORE_COM
                                              IT_FCAT      = ME->T_FCAT_SCORE_COM ).
      assign ME->R_DATA_SCORE_COM->* to <T_DATA>.

      ME->R_GRID_SCORE_COM->SET_TABLE_FOR_FIRST_DISPLAY(
        exporting
          IT_TOOLBAR_EXCLUDING          = value #( ( CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL ) )
          IS_LAYOUT                     = value #( CWIDTH_OPT = ABAP_TRUE
                                                   STYLEFNAME = 'T_STYL' )
        changing
          IT_FIELDCATALOG               = ME->T_FCAT_SCORE_COM
          IT_OUTTAB                     = <T_DATA>
        exceptions
          others                        = 9 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    else.
***   Refresh ALV Grid Output
      ME->R_GRID_SCORE_COM->REFRESH_TABLE_DISPLAY( exporting  I_SOFT_REFRESH = ABAP_TRUE
                                                   exceptions others         = 9 ).
    endif.

  endmethod.
  method SET_PF_STATUS.

    set pf-status '0100' of program 'SAPLZVCXI_PXSS_POPUP_SCORE_COM'.

  endmethod.
  method START.

    data: LR_POPUP_SCORE_COM type ref to ZCL_VCXI_PXSS_POPUP_SCORE_COM.


***--------------------------------------------------------------------------------------
*** Create Instance
    LR_POPUP_SCORE_COM = new #( IT_SCORE_COM = CT_SCORE_COM
                                IF_EDIT      = IF_EDIT
                                IF_DIMEN     = IF_DIMEN ).

***--------------------------------------------------------------------------------------
*** Call Popup
    call function 'ZVCXI_PXSS_POPUP_SCORE_COM'
      exporting
        IR_POPUP_SCORE_COM = LR_POPUP_SCORE_COM.

***--------------------------------------------------------------------------------------
*** Return Cancel Flag
    RF_CANCELED = LR_POPUP_SCORE_COM->F_CANCELED.

*** Get new Scores
    if RF_CANCELED ne ABAP_TRUE.
      CT_SCORE_COM = LR_POPUP_SCORE_COM->T_SCORE_COM.
    endif.

  endmethod.
  method UPDATE_SCORE_COM.

    field-symbols: <S_DATA> type ANY.


*** Remove existing Entries
    if ME->F_CSCOR is not initial.
      delete ME->T_SCORE_COM where ISCOR(1) eq ME->F_CSCOR.
    else.
      free ME->T_SCORE_COM.
    endif.

*** Add Updated Value
    loop at IT_DATA assigning <S_DATA>.
      append corresponding #( <S_DATA> ) to ME->T_SCORE_COM.
    endloop.

*** Reorganize Score IDs
    ZCL_VCXI_PXSS_BL_SCORE=>REORG_ISCOR( changing CT_SCORE_COM = ME->T_SCORE_COM ).

  endmethod.
