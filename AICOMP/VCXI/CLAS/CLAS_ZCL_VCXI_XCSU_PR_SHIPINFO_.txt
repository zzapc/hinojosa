
class ZCL_VCXI_XCSU_PR_SHIPINFO definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCS_LTEXT .

  constants C_IPRVT_XCS_SHIPINFO type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSU_SHIPINFO' ##NO_TEXT.
  constants C_PARID_TLABL type /VCXI/VKS_PARID value 'ZVCXI_XC_TLABL' ##NO_TEXT.
  constants C_PARID_LAPOS type /VCXI/VKS_PARID value 'ZVCXI_XC_LAPOS' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_LAPOS
    returning
      value(RF_LAPOS) type ZVCXI_XCSU_LAPOS
    raising
      /VCXI/CX_CKX .
  methods GET_LAPOS_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_TLABL
    returning
      value(RF_TLABL) type ZVCXI_XCSU_TLABL
    raising
      /VCXI/CX_CKX .
  methods GET_TLABL_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods SET_LAPOS
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_LAPOS type ZVCXI_XCSU_LAPOS
    raising
      /VCXI/CX_CKX .
  methods SET_TLABL
    importing
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_TLABL type ZVCXI_XCSU_TLABL
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_O_LAPOS_CHANGED type /VCXI/VKSC_IEVNT value 'LAPOS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TLABL_CHANGED type /VCXI/VKSC_IEVNT value 'TLABL_CHANGED' ##NO_TEXT.

  methods CHECK_LAPOS
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TLABL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSU_PR_SHIPINFO definition
class ZCL_VCXI_XCSU_PR_SHIPINFO implementation.
method CHECK_LAPOS.

*** 0 - Label Type is maintained and valid.
*** 1 - Label Type is maintained and not valid.
*** 2 - Label Position is maintained and not valid for Plant.

  data: LF_LAPOS      type                   ZVCXI_XCSU_LAPOS,
        LF_WERKS      type                   WERKS_D.
  data: LT_LAPOS      type standard table of ZVCXI_XCS_TC102.
  data: LR_CUST_SHIPU type ref to            ZCL_VCXI_XCSU_CUST_SHIPU.

  LF_LAPOS = ME->GET_LAPOS( ).
  LF_WERKS = ME->GET_WERKS( ).

*** Get Shipping & Unitization Cusotmizing
  move ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( ) to LR_CUST_SHIPU.

  check LF_LAPOS is not initial.

*** Check general Label Position
  LT_LAPOS = LR_CUST_SHIPU->GET_LAPOS( ).
  read table LT_LAPOS with key LAPOS = LF_LAPOS
                      transporting no fields.

  if SY-SUBRC ne 0.
    move 1 to RF_RETURN.
  endif.

*** Check plant specific Label Position
  LT_LAPOS = LR_CUST_SHIPU->GET_LAPOS( IF_WERKS = LF_WERKS ).
  read table LT_LAPOS with key LAPOS = LF_LAPOS
                      transporting no fields.

  if SY-SUBRC ne 0.
    move 2 to RF_RETURN.
  endif.

endmethod.
method CHECK_TLABL.

*** 0 - Label Type is maintained and valid.
*** 1 - Label Type is maintained and not valid.
*** 2 - Label Type is maintained and not valid for Plant.

  data: LF_TLABL      type                   ZVCXI_XCSU_TLABL,
        LF_WERKS      type                   WERKS_D.
  data: LT_TLABL      type standard table of ZVCXI_XCS_TC101.
  data: LR_CUST_SHIPU type ref to            ZCL_VCXI_XCSU_CUST_SHIPU.

  LF_TLABL = ME->GET_TLABL( ).
  LF_WERKS = ME->GET_WERKS( ).

*** Get Shipping & Unitization Cusotmizing
  move ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( ) to LR_CUST_SHIPU.

  check LF_TLABL is not initial.

*** Check general Label Type
  LT_TLABL = LR_CUST_SHIPU->GET_TLABL( ).
  read table LT_TLABL with key TLABL = LF_TLABL
                      transporting no fields.

  if SY-SUBRC ne 0.
    move 1 to RF_RETURN.
  endif.

*** Check plant specific Label Type
  LT_TLABL = LR_CUST_SHIPU->GET_TLABL( IF_WERKS = LF_WERKS ).
  read table LT_TLABL with key TLABL = LF_TLABL
                      transporting no fields.

  if SY-SUBRC ne 0.
    move 2 to RF_RETURN.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

endmethod.
method GET_LAPOS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LAPOS ).
  move LS_PARAM-ATWRT to RF_LAPOS.

endmethod.
method GET_LAPOS_DESCR.

  data: LF_LAPOS type ZVCXI_XCSU_LAPOS.

  LF_LAPOS = ME->GET_LAPOS( ).
  RF_DESCR = ZCL_VCXI_XCSU_CUST_SHIPU=>GET_LAPOS_DESCR( IF_LAPOS = LF_LAPOS ).

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Label Type
  if ME->CHECK_TLABL( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Label Position
  if ME->CHECK_LAPOS( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

 SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Label Type
  case ME->CHECK_TLABL( ).
    when 1.
***   Label Type is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '301' ).
    when 2.
***   Label Type is not valid for plant.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '303' ).
  endcase.

***------------------------------------------------------------------
*** Check Label Positon
  case ME->CHECK_LAPOS( ).
    when 1.
***   Label Positon is not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '302' ).
    when 2.
***   Label Positon is not valid for plant.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSU'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '304' ).
  endcase.

endmethod.
method GET_TLABL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLABL ).
  move LS_PARAM-ATWRT to RF_TLABL.

endmethod.
method GET_TLABL_DESCR.

  data: LF_TLABL type ZVCXI_XCSU_TLABL.

  LF_TLABL = ME->GET_TLABL( ).
  RF_DESCR = ZCL_VCXI_XCSU_CUST_SHIPU=>GET_TLABL_DESCR( IF_TLABL = LF_TLABL ).

endmethod.
  method GET_WERKS.

    data: LT_GATE type /VCXI/VKSR_TT_GATE.


    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSU_PR_SHIPMGR=>C_IPRVT_XCS_SHIPMGR
                                     IF_INUSE = ABAP_TRUE ).
    if LT_GATE is not initial.
      RF_WERKS = cast ZCL_VCXI_XCSU_PR_SHIPMGR( LT_GATE[ 1 ]->R_CLSPR )->GET_WERKS( ).
    else.
      RF_WERKS = ME->R_GATE->GET_APPDATA( )->F_WERKS.
    endif.

  endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( exporting IF_IEVNT         = IF_IEVNT
                                 IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).
  endcase.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method SET_LAPOS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LAPOS ).

  move IF_LAPOS     to LS_PARAM-ATWRT.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_LAPOS_CHANGED ).
  endif.

endmethod.
method SET_TLABL.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TLABL ).

  move IF_TLABL     to LS_PARAM-ATWRT.
  move IF_SETBY     to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TLABL_CHANGED ).
  endif.

endmethod.
  method ZIF_VCXI_XCS_LTEXT~GET_LTEXT.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_XCS_LTEXT~C_PARID_LTEXT ).
    RF_LTEXT = LS_PARAM-STRNG.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_XCS_LTEXT~SET_LTEXT.

    data(LS_PARAM) = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_XCS_LTEXT~C_PARID_LTEXT ).

    LS_PARAM-STRNG = IF_LTEXT.
    LS_PARAM-SETBY = IF_SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
