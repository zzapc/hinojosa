
class ZCL_VCXI_P1SS_PR_BOARD definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_ATTID_VALID_COWID type /VCXI/VKS_ATTID value 'VALID_COWID' ##NO_TEXT.
  constants C_IEVNT_O_BOARD_CHANGED type /VCXI/VKSC_IEVNT value 'BOARD_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_COWID_CHANGED type /VCXI/VKSC_IEVNT value 'COWID_CHANGED' ##NO_TEXT.
  constants C_IPRVT_BOARD type /VCXI/VKSC_IPRVT value 'ZVCXI_P1SS_BOARD' ##NO_TEXT.
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP' ##NO_TEXT.
  constants C_PARID_COWID type /VCXI/VKS_PARID value 'ZVCXI_PC_COWID' ##NO_TEXT.
  constants C_PARID_FLUTE type /VCXI/VKS_PARID value 'ZVCXI_PC_FLUTE' ##NO_TEXT.
  constants C_PARID_MBOAR type /VCXI/VKS_PARID value 'ZVCXI_PC_MBOAR' ##NO_TEXT.
  constants C_PARID_NOUTW type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUTW' ##NO_TEXT.
  constants C_PARID_SIDRU type /VCXI/VKS_PARID value 'ZVCXI_P0_SIDRU' ##NO_TEXT.
  constants C_PARID_STARC type /VCXI/VKS_PARID value 'ZVCXI_PC_STARC' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.
  class-data F_MBOAR_P type ZVCXI_PCSS_MBOAR value 'P' ##NO_TEXT.
  class-data F_MBOAR_S type ZVCXI_PCSS_MBOAR value 'S' ##NO_TEXT.

  methods GET_SELFD
    returning
      value(RF_SELFD) type ZVCXI_PCSS_SELFD
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ARBPL
    returning
      value(RF_ARBPL) type ARBPL
    raising
      /VCXI/CX_CKX .
  methods GET_BOARD
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ER_CUST_BOARD type ref to ZCL_VCXI_PCSS_CUST_BOARD
    returning
      value(RF_BOARD) type ZVCXI_PCS_BOARD
    raising
      /VCXI/CX_CKX .
  methods GET_BOARD_DESCR
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RT_BOARD_DESCR) type ZVCXI_PCSS_TT_BOARD_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_COWID
    exporting
      !EF_FOVRR type ZVCXI_XCS_FOVRR
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_COWID) type ZVCXI_PCS_S_COWID
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_COWID
    importing
      !IS_SHTWI type ZVCXI_P0SS_S_SHTWI optional
    returning
      value(RT_COWID) type ZVCXI_PCS_TT_COWID
    raising
      /VCXI/CX_CKX .
  methods GET_DCONF
    returning
      value(RF_DCONF) type DATS
    raising
      /VCXI/CX_CKX .
  methods GET_FLUTE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_FLUTE) type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods GET_MBOAR
    returning
      value(RF_MBOAR) type ZVCXI_PCSS_MBOAR
    raising
      /VCXI/CX_CKX .
  methods GET_SIDRU
    importing
      !IF_NOUTW type ZVCXI_PXS_NOUTW optional
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ES_SIDRP type ZVCXI_P0SS_S_SIDRP
    returning
      value(RS_SIDRU) type ZVCXI_P0SS_S_SIDRU
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTW
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUTW) type ZVCXI_PXS_NOUTW
    raising
      /VCXI/CX_CKX .
  methods GET_STARC
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_STARC) type ZVCXI_PCSS_STARC
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods GET_VALID_TBOAR
    returning
      value(RF_VALID_TBOAR) type STRING
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods IS_ACTIVE_BOARD
    returning
      value(RF_ACTIVE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods IS_SELFD_REQUIRED
    returning
      value(RF_REQUIRED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_BOARD
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_SIBLING_BOARD_ID
    exporting
      !ER_CUST_BOARD type ref to ZCL_VCXI_PCSS_CUST_BOARD
    returning
      value(RF_BOARD) type ZVCXI_PCS_BOARD
    raising
      /VCXI/CX_CKX .
  methods SET_COWID
    importing
      !IS_COWID type ZVCXI_PCS_S_COWID optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods SET_MBOAR
    importing
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_ATTID_CLASS type /VCXI/VKS_ATTID value 'CLASSIFICATION' ##NO_TEXT.
  constants C_ATTID_DESCR type /VCXI/VKS_ATTID value 'DESCRIPTION' ##NO_TEXT.
  constants C_IEVNT_I_INIT_CUST_BOARD type /VCXI/VKSC_IEVNT value 'INIT_CUST_BOARD' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_CALIP type /VCXI/VKSC_IEVNT value 'RECALC_CALIP' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_COWID type /VCXI/VKSC_IEVNT value 'RECALC_COWID' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SIDRU type /VCXI/VKSC_IEVNT value 'RECALC_SIDRU' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SURWT type /VCXI/VKSC_IEVNT value 'RECALC_SURWT' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_I_UPDATE_PAPER type /VCXI/VKSC_IEVNT value 'UPDATE_PAPER' ##NO_TEXT.
  constants C_IEVNT_I_UPDATE_STARCH type /VCXI/VKSC_IEVNT value 'UPDATE_STARCH' ##NO_TEXT.
  constants C_IEVNT_I_UPDATE_WAX type /VCXI/VKSC_IEVNT value 'UPDATE_WAX' ##NO_TEXT.
  constants C_IEVNT_O_BOARD_CUST_CHANGED type /VCXI/VKSC_IEVNT value 'BOARD_CUST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUTW_CHANGED type /VCXI/VKSC_IEVNT value 'NOUTW_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SIDRU_CHANGED type /VCXI/VKSC_IEVNT value 'SIDRU_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  data F_RENEW_PAPER type ABAP_BOOL .
  data F_VALID_COWID type STRING .
  data R_CUST_BOARD type ref to ZCL_VCXI_PCSS_CUST_BOARD .
  data T_BOARD_DESCR type ZVCXI_PCSS_TT_BOARD_DESCR .
  data T_CLASS_VALUE type ZVCXI_PCSS_TT_CLASS_VALUE .
  data T_CLASS_VALUE_C type ZVCXI_PCSS_TT_CLASS_VALUE_C .

  methods CHECK_CALIP
    importing
      value(IR_MESSAGE) type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_COWID
    importing
      value(IR_MESSAGE) type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_FLUTE
    importing
      value(IR_MESSAGE) type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_STARC
    importing
      value(IR_MESSAGE) type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CALC_SIDRU
    importing
      !IS_COWID type ZVCXI_PCS_S_COWID
      !IS_SHTWI type ZVCXI_P0SS_S_SHTWI
      !IS_SIDRU_MIN type ZVCXI_P0SS_S_SIDRU
    exporting
      !EF_NOUTW type ZVCXI_PXS_NOUTW
    returning
      value(RS_SIDRU) type ZVCXI_P0SS_S_SIDRU
    raising
      /VCXI/CX_CKX .
  methods CHECK_BOARD
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_MS_STARCH
    returning
      value(RR_PR_STARCH) type ref to ZCL_VCXI_P1SS_PR_MS_STARCH
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_CORR
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_CORR) type ref to ZCL_VCXI_P1SS_PR_CORR
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_CUST_BOARD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_COWID
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_CALIP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SIDRU
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SURWT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UPDATE_PAPER
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UPDATE_STARCH
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UPDATE_WAX
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_PRPLIN
    importing
      !IF_BPAID type ZVCXI_PCS_BPAID
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_PRPLIN) type ref to ZCL_VCXI_P1SS_PR_PRPLIN
    raising
      /VCXI/CX_CKX .
  methods INIT_DESCR_CLASS
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods SET_FLUTE
    importing
      !IF_FLUTE type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods SET_SIBLING_BOARD_ID
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTW
    importing
      !IF_NOUTW type ZVCXI_PXS_NOUTW optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SIDRU
    importing
      !IS_SIDRU type ZVCXI_P0SS_S_SIDRU optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.

  methods INIT_ATTRI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_P1SS_PR_BOARD definition
class ZCL_VCXI_P1SS_PR_BOARD implementation.
  method CALC_SIDRU.

    data: LF_NOUTW type F.
    data: LS_CALCV type ZVCXI_XCS_S_CALCV,
          LS_COWID type ZVCXI_PCS_S_COWID.


    check IS_SHTWI-SHTWI is not initial.

    if IS_SIDRU_MIN is initial.
      LS_COWID = IS_COWID.
    else.
***   Subtract Side Run Min from Corrugation Width
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_COWID-COWID
                                                          IF_CALCV_UOM_1 = IS_COWID-COWID_UOM
                                                          IF_CALCV_2     = IS_SIDRU_MIN-SIDRU
                                                          IF_CALCV_UOM_2 = IS_SIDRU_MIN-SIDRU_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = IS_COWID-COWID_UOM
                                                importing EF_CALCV       = LS_COWID-COWID
                                                          EF_CALCV_UOM   = LS_COWID-COWID_UOM ).
    endif.

*** Avoid negative value
    if LS_COWID-COWID lt 0.
      LS_COWID-COWID = 0.
    endif.

*** Check how many times the Sheet fits in the Corrugation Width
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_COWID-COWID
                                                        IF_CALCV_UOM_1 = LS_COWID-COWID_UOM
                                                        IF_CALCV_2     = IS_SHTWI-SHTWI
                                                        IF_CALCV_UOM_2 = IS_SHTWI-SHTWI_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LF_NOUTW ).
    EF_NOUTW = FLOOR( LF_NOUTW ).

*** Multiply Sheet Width (based on how many times it fits)
    LS_CALCV-CALCV     = IS_SHTWI-SHTWI * EF_NOUTW.
    LS_CALCV-CALCV_UOM = IS_SHTWI-SHTWI_UOM.

*** Calculate Side Run
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_COWID-COWID
                                                        IF_CALCV_UOM_1 = IS_COWID-COWID_UOM
                                                        IF_CALCV_2     = LS_CALCV-CALCV
                                                        IF_CALCV_UOM_2 = LS_CALCV-CALCV_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                        IF_UOM         = IS_COWID-COWID_UOM
                                              importing EF_CALCV       = RS_SIDRU-SIDRU
                                                        EF_CALCV_UOM   = RS_SIDRU-SIDRU_UOM ).

  endmethod.
method CHECK_BOARD.

  data: LF_BOARD         type ZVCXI_PCS_BOARD,
        LF_MBOAR         type ZVCXI_PCSS_MBOAR,
        LF_DCONF         type DATS,
        LF_VALID_TBOAR   type STRING,
        LF_BOARD_SIBLING type ZVCXI_PCS_BOARD.
  data: LT_ASBOA type ZVCXI_PCSSC_TT_ASBOA.


  LF_BOARD       = ME->GET_BOARD( ).
  LF_VALID_TBOAR = ME->GET_VALID_TBOAR( ).

  if LF_BOARD is initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
    if IR_MESSAGE is bound.
***   Board ID is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '019' ).
    endif.
    exit.
  endif.


***--------------------------------------------------------------------------------------
  if ME->R_CUST_BOARD is bound.
    LF_DCONF = ME->GET_DCONF( ).
    LF_MBOAR = ME->GET_MBOAR( ).

    if IR_MESSAGE is bound.
***   Board Customizing is loaded.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '007' ).
    endif.

*** Valid and correct Board Mode
    if     ME->R_CUST_BOARD->F_VALFR le LF_DCONF and
           ME->R_CUST_BOARD->F_VALTO ge LF_DCONF and
           ME->R_CUST_BOARD->F_MBOAR eq LF_MBOAR.
***   Make enhanced check of Board Type if needed.
      if LF_VALID_TBOAR is not initial and
         ME->R_CUST_BOARD->F_TBOAR na LF_VALID_TBOAR.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Board ID has wrong Board Type.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '006' ).
        endif.
        return.
      endif.

***   Check Sibling
      case ME->GET_MBOAR( ).
        when ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P.
          LT_ASBOA = ME->R_CUST_BOARD->GET_ASBOA( ).
          LF_BOARD_SIBLING = ME->GET_SIBLING_BOARD_ID( ).
          if LF_BOARD_SIBLING is not initial and
             not LINE_EXISTS( LT_ASBOA[ TABLE_LINE = LF_BOARD_SIBLING ] ).
            RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
            if IR_MESSAGE is bound.
***           Board ID &1 is not assigned to &2.
              IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                       IF_MSGTY = 'E'
                                       IF_MSGNO = '022'
                                       IF_MSGV1 = LF_BOARD
                                       IF_MSGV2 = LF_BOARD_SIBLING ).
            endif.
            return.
          endif.
      endcase.

***   Check BoardID is released
      case ME->R_CUST_BOARD->IS_RELEASED( ).
        when ABAP_TRUE.
          if IR_MESSAGE is bound.
***         Board ID is released.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                     IF_MSGTY = 'S'
                                     IF_MSGNO = '009' ).
          endif.
        when ABAP_FALSE.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
          if IR_MESSAGE is bound.
***         Board ID is not released!
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '010' ).
          endif.
          return.
      endcase.


      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Board ID is maintained and valid
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '001' ).
      endif.

***--------------------------------------------------------------------------------------
*** Validity
    elseif ( ME->R_CUST_BOARD->F_VALFR gt LF_DCONF or
             ME->R_CUST_BOARD->F_VALTO lt LF_DCONF ) and
             ME->R_CUST_BOARD->F_MBOAR eq LF_MBOAR.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Board ID is maintained and not valid
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '002' ).
      endif.

*** Board Mode
    elseif ME->R_CUST_BOARD->F_VALFR le LF_DCONF and
           ME->R_CUST_BOARD->F_VALTO ge LF_DCONF and
           ME->R_CUST_BOARD->F_MBOAR ne LF_MBOAR.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Board ID has wrong Mode
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '003' ).
      endif.

*** Validity and Board Mode
    elseif ( ME->R_CUST_BOARD->F_VALFR gt LF_DCONF or
             ME->R_CUST_BOARD->F_VALTO lt LF_DCONF ) and
             ME->R_CUST_BOARD->F_MBOAR ne LF_MBOAR.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Board ID is not valid and has wrong Mode
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '004' ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
    if IR_MESSAGE is bound.
***   Board ID is maintained and not valid
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '002' ).
***   Board Customizing can't be loaded.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '008' ).
    endif.
  endif.

endmethod.
  method CHECK_CALIP.

*** Check Caliper is calculated
    if ME->GET_CALIP( )-CALIP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Caliper is calculated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '013' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Caliper is not calculated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '014' ).

      endif.
    endif.

  endmethod.
  method CHECK_COWID.

    data: LS_COWID type ZVCXI_PCS_S_COWID,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.
    data: LT_COWID type ZVCXI_PCS_TT_COWID.
    data: LR_PR_CORR type ref to ZCL_VCXI_P1SS_PR_CORR.


*** Get Provider for Corrugation
    LR_PR_CORR = ME->GET_PRVDR_CORR( ).

*** Only check Board Grade Width in case of Self Deckling
    check LR_PR_CORR->GET_SELFD( ).

***--------------------------------------------------------------------------------------
*** Get Board Grade Width
    LS_COWID = ME->GET_COWID( ).
    if LS_COWID-COWID is not initial.
***   Get Sheet Wdith
      LR_PR_CORR->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTWI = LS_SHTWI ).

***   Convert to Sheet Dimension
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_COWID-COWID
                                                         IF_UOM_IN    = LS_COWID-COWID_UOM
                                                         IF_UOM_OUT   = LS_SHTWI-SHTWI_UOM
                                               importing EF_VALUE_OUT = LS_COWID-COWID
                                                         EF_UOM_OUT   = LS_COWID-COWID_UOM ).

      if LS_COWID-COWID lt LS_SHTWI-SHTWI or
         ME->GET_NOUTW( ) eq 0.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Board Width smaller than Sheet Width.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '017' ).
        endif.
      else.
        if ME->F_VALID_COWID eq 'CUST'.
***       Activated Corrugation Width from Board Grade Customizing
          LT_COWID = ME->GET_VALID_COWID( IS_SHTWI = LS_SHTWI ).

          if not LINE_EXISTS( LT_COWID[ COWID = LS_COWID-COWID ] ).
            RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
            if IR_MESSAGE is bound.
***           Corrugation Width is not valid based on BoardID Customizing.
              IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                       IF_MSGTY = 'E'
                                       IF_MSGNO = '019' ).
            endif.
          else.
            RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
            if IR_MESSAGE is bound.
***           Corrugation Width is maintained and valid based on BoardID Customizing.
              IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                       IF_MSGTY = 'S'
                                       IF_MSGNO = '018' ).
            endif.
          endif.
        else.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
          if IR_MESSAGE is bound.
***         Corrugation Width is maintained and valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                     IF_MSGTY = 'S'
                                     IF_MSGNO = '020' ).
          endif.
        endif.
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Corrugation Width is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '021' ).
      endif.
    endif.

  endmethod.
  method CHECK_FLUTE.

*** Check Flute is Maintained
    if ME->GET_FLUTE( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Flute is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '011' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Flute can't be read from Board Customizing.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '012' ).
      endif.
    endif.

  endmethod.
  method CHECK_STARC.

*** Check Starch Code is Maintained
    if ME->GET_STARC( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Starch Code is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '015' ).
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Starch Code can't be read from Board Customizing.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '016' ).
      endif.
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

*** Define Board Modes for Sales and Production
    select single MBOAR
           into F_MBOAR_S
           from ZVCXI_PCS_TC201
          where FSABO eq ABAP_TRUE.
    if SY-SUBRC ne 0.
      clear F_MBOAR_S.
    endif.

    select single MBOAR
           into F_MBOAR_P
           from ZVCXI_PCS_TC201
          where FPRBO eq ABAP_TRUE.
    if SY-SUBRC ne 0.
      clear F_MBOAR_P.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Init Attributes
    ME->INIT_ATTRI( ).

  endmethod.
  method GET_ARBPL.

    data: LR_PR_CORR  type ref to ZCL_VCXI_P1SS_PR_CORR.


*** Get Provider for Corrugation
    LR_PR_CORR = ME->GET_PRVDR_CORR( ).

    check LR_PR_CORR is bound.
    RF_ARBPL = LR_PR_CORR->GET_ARBPL( ).

  endmethod.
  method GET_BOARD.

    data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

    LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

    RF_BOARD = LS_LEOKY-LEOKY.
    EF_SETBY = LS_LEOKY-SETBY.
    ER_CUST_BOARD = ME->R_CUST_BOARD.

  endmethod.
  method GET_BOARD_DESCR.

    data: LT_DESCR type table of /VCXI/CKX_DESCR.


*** Return of Multiple Descriptions is possible
    move ME->T_BOARD_DESCR to RT_BOARD_DESCR.

*** Concatenate into single Description
    loop at RT_BOARD_DESCR into data(LS_BOARD_DESCR) where DESCR is not initial.
      append LS_BOARD_DESCR-DESCR to LT_DESCR.
    endloop.
    concatenate lines of LT_DESCR into EF_DESCR separated by '/'.

  endmethod.
method GET_CALIP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
  move LS_PARAM-ATFLV to RS_CALIP-CALIP.
  move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.

endmethod.
  method GET_COWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COWID ).
    RS_COWID-COWID     = LS_PARAM-ATFLV.
    RS_COWID-COWID_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.


    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

  endmethod.
method GET_DCONF.

  data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

  LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

  RF_DCONF =  LR_APPDATA->F_DCONF.

endmethod.
  method GET_DESCR.

    data(LF_MBOAR) = ME->GET_MBOAR( ).

    if LF_MBOAR is not initial.
      RF_DESCR = 'Board ID &1'(D01).
      replace '&1' in RF_DESCR with ZCL_VCXI_PCSS_CUST_BOARD=>GET_MBOAR_DESCR( IF_MBOAR = LF_MBOAR ).
    else.
      RF_DESCR = SUPER->GET_DESCR( ).
    endif.

  endmethod.
  method GET_FLUTE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTE ).
    RF_FLUTE = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

    check RF_FLUTE is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PCSS_CUST_BOARD=>GET_FLUTE_DESCR( IF_FLUTE = RF_FLUTE ).
    endif.

  endmethod.
method GET_MBOAR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MBOAR ).
  move LS_PARAM-ATWRT to RF_MBOAR.

endmethod.
method GET_MS_STARCH.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------
*** Get all MS Starch
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_MS_STARCH=>C_IPRVT_P1_MS_STARCH
                                   IF_INUSE = ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Get Starch
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to RR_PR_STARCH.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
  method GET_NOUTW.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTW ).
    move LS_PARAM-ATFLV to RF_NOUTW.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_CORR.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_CORR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Corrugation
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_CORR=>C_IPRVT_P1_CORR
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_CORR.

  endmethod.
  method GET_PRVDR_PRPLIN.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_PRPLIN.

***------------------------------------------------------------------------------------------------
*** Find Provider for Preprint Liner
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_PRPLIN=>C_IPRVT_P1_PRPLIN
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_PRPLIN.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_SELFD.

    data: LR_PR_CORR type ref to ZCL_VCXI_P1SS_PR_CORR.


    LR_PR_CORR = ME->GET_PRVDR_CORR( ).
    check LR_PR_CORR is bound.

    RF_SELFD = LR_PR_CORR->GET_SELFD( ).

  endmethod.
  method GET_SIBLING_BOARD_ID.

*** Find Sibling Board
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_BOARD=>C_IPRVT_BOARD
                                   IF_INUSE = ABAP_TRUE ) into data(LR_GATE).
      check LR_GATE ne ME->R_GATE.
      RF_BOARD      = cast ZCL_VCXI_P1SS_PR_BOARD( LR_GATE->R_CLSPR )->GET_BOARD( ).
      ER_CUST_BOARD = cast ZCL_VCXI_P1SS_PR_BOARD( LR_GATE->R_CLSPR )->R_CUST_BOARD.
    endloop.

  endmethod.
  method GET_SIDRU.

    data: LF_FACTOR type F.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_COWID type ZVCXI_PCS_S_COWID.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SIDRU ).
    move LS_PARAM-ATFLV to RS_SIDRU-SIDRU.
    move LS_PARAM-UNIT  to RS_SIDRU-SIDRU_UOM.
    move LS_PARAM-SETBY to EF_SETBY.


    check RS_SIDRU-SIDRU is not initial.

***----------------------------------------------------------------------------
*** Calculate Side Run in Percentage
    if ES_SIDRP is requested.
      LS_COWID = ME->GET_COWID( ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SIDRU-SIDRU
                                                          IF_CALCV_UOM_1 = RS_SIDRU-SIDRU_UOM
                                                          IF_CALCV_2     = LS_COWID-COWID
                                                          IF_CALCV_UOM_2 = LS_COWID-COWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LF_FACTOR ).
***   Return per Number of Out
      if IF_NOUTW is supplied and
         IF_NOUTW ne 0.
        LF_FACTOR = LF_FACTOR / IF_NOUTW.
      endif.

      ES_SIDRP = value #( SIDRP     = LF_FACTOR * 100
                          SIDRP_UOM = '%' ).

    endif.

*** Return Side Run per Number of Out
    if IF_NOUTW is supplied and
       IF_NOUTW ne 0.
      RS_SIDRU-SIDRU = RS_SIDRU-SIDRU / IF_NOUTW.
    endif.

  endmethod.
  method GET_STARC.

    data: LR_PR_MS_STARCH   type ref to ZCL_VCXI_P1SS_PR_MS_STARCH.


    LR_PR_MS_STARCH = ME->GET_MS_STARCH( ).
    check LR_PR_MS_STARCH is bound.

    RF_STARC = LR_PR_MS_STARCH->GET_STARC( ).

    check RF_STARC is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      EF_DESCR = ZCL_VCXI_PCSS_CUST_BOARD=>GET_STARC_DESCR( IF_STARC = RF_STARC ).
    endif.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Board ID
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_BOARD( ) ).

***--------------------------------------------------------------------------------------
*** Check Flute is Maintained
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_FLUTE( ) ).

*** Check Caliper
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CALIP( ) ).

*** Check Starch Code
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_STARC( ) ).

*** Check Corrugation Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_COWID( ) ).

  endmethod.
  method GET_STATUS_MSG.

    data: LS_CALIP type ZVCXI_P0SS_S_CALIP.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Board ID
    ME->CHECK_BOARD( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Flute
    ME->CHECK_FLUTE( IR_MESSAGE = IR_MESSAGE ).

*** Check Caliper
    ME->CHECK_CALIP( IR_MESSAGE = IR_MESSAGE ).

*** Check Starch Code
    ME->CHECK_STARC( IR_MESSAGE = IR_MESSAGE ).

*** Check Corrugation Width
    ME->CHECK_COWID( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_VALID_COWID.

    field-symbols: <S_COWID> type ZVCXI_PCS_S_COWID.


***--------------------------------------------------------------------------------------
*** Get Customized Corrugation Width
    check ME->R_CUST_BOARD is bound.
    RT_COWID = ME->R_CUST_BOARD->GET_COWID( ).

***--------------------------------------------------------------------------------------
*** Adjustments based on provided Sheet Width
    check IS_SHTWI is supplied.

    loop at RT_COWID assigning <S_COWID>.
***   Adjust Unit of Corrugation Width
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = <S_COWID>-COWID
                                                         IF_UOM_IN    = <S_COWID>-COWID_UOM
                                                         IF_UOM_OUT   = IS_SHTWI-SHTWI_UOM
                                               importing EF_VALUE_OUT = <S_COWID>-COWID
                                                         EF_UOM_OUT   = <S_COWID>-COWID_UOM ).

****   Check if Corrugation Width is allowed by Paper Width of Preprint
      break TBD.
*      check ME->CHECK_COWID_BY_PAWID( IS_COWID = LS_COWID ) eq ABAP_TRUE.
    endloop.

*** Filter too small Width
    delete RT_COWID where COWID lt IS_SHTWI-SHTWI.

  endmethod.
  method GET_VALID_TBOAR.

    data(LR_PR_CORR) = ME->GET_PRVDR_CORR( ).
    check LR_PR_CORR is bound.
    RF_VALID_TBOAR = LR_PR_CORR->GET_VALID_TBOAR( ).

  endmethod.
  method GET_WERKS.

    data: LR_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC.

    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    check LR_PR_SPEC is bound.
    RF_WERKS = LR_PR_SPEC->GET_WERKS( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

***--------------------------------------------------------------------------------------
      when C_IEVNT_I_INIT_CUST_BOARD.
        ME->HANDLE_INIT_CUST_BOARD( ).

      when C_IEVNT_I_RECALC_COWID.
        ME->HANDLE_RECALC_COWID( ).

      when C_IEVNT_I_RECALC_SIDRU.
        ME->HANDLE_RECALC_SIDRU( ).

      when C_IEVNT_I_RECALC_CALIP.
        ME->HANDLE_RECALC_CALIP( ).

      when C_IEVNT_I_RECALC_SURWT.
        ME->HANDLE_RECALC_SURWT( ).

***--------------------------------------------------------------------------------------
      when C_IEVNT_I_UPDATE_PAPER.
        ME->HANDLE_UPDATE_PAPER( IT_GATE = IT_GATE_PROVIDER ).

      when C_IEVNT_I_UPDATE_STARCH.
        ME->HANDLE_UPDATE_STARCH( ).

      when C_IEVNT_I_UPDATE_WAX.
        ME->HANDLE_UPDATE_WAX( ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_BOARD.

    data: LF_BOARD type        ZVCXI_PCS_BOARD,
          LF_WERKS type        WERKS_D,
          LF_MBOAR type        ZVCXI_PCSS_MBOAR,
          LF_FLUTE type        ZVCXI_PCS_FLUTE,
          LF_DCONF type        DATS.

***--------------------------------------------------------------------------------------
    LF_BOARD = ME->GET_BOARD( ).
    LF_WERKS = ME->GET_WERKS( ).
    LF_MBOAR = ME->GET_MBOAR( ).
    LF_DCONF = ME->GET_DCONF( ).

    if ME->R_CUST_BOARD          is bound    and
       ME->R_CUST_BOARD->F_BOARD eq LF_BOARD and
       ME->R_CUST_BOARD->F_MBOAR eq LF_MBOAR and
       ME->R_CUST_BOARD->F_WERKS eq LF_WERKS.
***   Everything is already loaded
      exit.
    endif.

*** Initialize Board Customizing.
    try.
        clear ME->R_CUST_BOARD.
        ME->R_CUST_BOARD = ZCL_VCXI_PCSS_CUST_BOARD=>GET_INSTANCE( IF_BOARD = LF_BOARD
                                                                   IF_MBOAR = LF_MBOAR
                                                                   IF_WERKS = LF_WERKS
                                                                   IF_DATE  = LF_DCONF ).
      catch /VCXI/CX_CKX.
***     Will be shown on Status and not via exception.
    endtry.

***--------------------------------------------------------------------------------------
*** Initialize Board Description and Class Values which are needed and Set by Attribute
    ME->INIT_DESCR_CLASS( ).

*** Set Flute
    clear: LF_FLUTE.
    if ME->R_CUST_BOARD is bound.
      move ME->R_CUST_BOARD->F_FLUTE to LF_FLUTE.
    endif.
    ME->SET_FLUTE( IF_FLUTE = LF_FLUTE ).

***--------------------------------------------------------------------------------------
*** Request soft Board Paper Refresh
    move ABAP_UNDEFINED to ME->F_RENEW_PAPER.

*** Send Event about changed Customizing to update Children
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BOARD_CUST_CHANGED ).

*** Set Sibling Board ID
    if ME->GET_MBOAR( ) eq ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_S or
       ME->R_CUST_BOARD is not bound.
      ME->SET_SIBLING_BOARD_ID( ).
    endif.

  endmethod.
  method HANDLE_RECALC_CALIP.

    data: LF_ARBPL        type        ARBPL.
    data: LS_CALIP_TOTAL type        ZVCXI_P0SS_S_CALIP,
          LS_CALIP_PAPER type        ZVCXI_P0SS_S_CALIP,
          LS_BGWHT       type        ZVCXI_PCSS_S_BGWHT.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_PAPER type ref to ZCL_VCXI_P1SS_PR_MS_PAPER.

***--------------------------------------------------------------------------------------
*** Get current Value
    LS_CALIP_TOTAL = ME->GET_CALIP( ).
    clear LS_CALIP_TOTAL-CALIP.

***--------------------------------------------------------------------------------------
*** Get All Paper
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P1SS_PR_MS_PAPER=>C_IPRVT_P1_MS_PAPER
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      move LR_GATE->R_CLSPR ?to LR_PR_MS_PAPER.
      check LR_PR_MS_PAPER is bound.

      check LR_PR_MS_PAPER->GET_SUBPA( ) ne ABAP_UNDEFINED.

      LS_CALIP_PAPER = LR_PR_MS_PAPER->GET_CALIP( ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALIP_PAPER-CALIP
                                                          IF_CALCV_UOM_1 = LS_CALIP_PAPER-CALIP_UOM
                                                          IF_CALCV_2     = LS_CALIP_TOTAL-CALIP
                                                          IF_CALCV_UOM_2 = LS_CALIP_TOTAL-CALIP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_CALIP_TOTAL-CALIP_UOM
                                                importing EF_CALCV       = LS_CALIP_TOTAL-CALIP
                                                          EF_CALCV_UOM   = LS_CALIP_TOTAL-CALIP_UOM ).
    endloop.

*** Get Preprint Liner
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P1SS_PR_PRPLIN=>C_IPRVT_P1_PRPLIN
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      LS_CALIP_PAPER = cast ZCL_VCXI_P1SS_PR_PRPLIN( LR_GATE->R_CLSPR )->GET_CALIP( ).
      check LS_CALIP_PAPER-CALIP_UOM is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALIP_PAPER-CALIP
                                                          IF_CALCV_UOM_1 = LS_CALIP_PAPER-CALIP_UOM
                                                          IF_CALCV_2     = LS_CALIP_TOTAL-CALIP
                                                          IF_CALCV_UOM_2 = LS_CALIP_TOTAL-CALIP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_CALIP_TOTAL-CALIP_UOM
                                                importing EF_CALCV       = LS_CALIP_TOTAL-CALIP
                                                          EF_CALCV_UOM   = LS_CALIP_TOTAL-CALIP_UOM ).
    endloop.

***--------------------------------------------------------------------------------------
*** Add Flute Height
    LF_ARBPL = ME->GET_ARBPL( ).
    ME->HANDLE_INIT_CUST_BOARD( ).
    if ME->R_CUST_BOARD is bound.
      LS_BGWHT = ME->R_CUST_BOARD->GET_BGWHT( IF_ARBPL = LF_ARBPL ).
    endif.
    if LS_BGWHT-BGWHT_UOM is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BGWHT-BGWHT
                                                          IF_CALCV_UOM_1 = LS_BGWHT-BGWHT_UOM
                                                          IF_CALCV_2     = LS_CALIP_TOTAL-CALIP
                                                          IF_CALCV_UOM_2 = LS_CALIP_TOTAL-CALIP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_CALIP_TOTAL-CALIP_UOM
                                                importing EF_CALCV       = LS_CALIP_TOTAL-CALIP
                                                          EF_CALCV_UOM   = LS_CALIP_TOTAL-CALIP_UOM ).
    else.
      clear LS_CALIP_TOTAL-CALIP.
    endif.

***--------------------------------------------------------------------------------------
*** Set Caliper
    ME->SET_CALIP( IS_CALIP = LS_CALIP_TOTAL ).

  endmethod.
  method HANDLE_RECALC_COWID.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR.
    data: LS_COWID_NEW type ZVCXI_PCS_S_COWID,
          LS_SHTWI     type ZVCXI_P0SS_S_SHTWI,
          LS_SIDRU_MAX type ZVCXI_P0SS_S_SIDRU,
          LS_SIDRU_MIN type ZVCXI_P0SS_S_SIDRU,
          LS_COWID     type ZVCXI_PCS_S_COWID,
          LS_SIDRU_TMP type ZVCXI_P0SS_S_SIDRU,
          LS_SIDRU     type ZVCXI_P0SS_S_SIDRU.
    data: LT_COWID     type ZVCXI_PCS_TT_COWID.
    data: LR_PR_CORR type ref to ZCL_VCXI_P1SS_PR_CORR.


*** Get Provider for Corrugation
    LR_PR_CORR = ME->GET_PRVDR_CORR( ).

***--------------------------------------------------------------------------------------
*** Only calculate a Corrugation Width in case of Self Deckling
    if LR_PR_CORR is not bound or
       LR_PR_CORR->GET_SELFD( ) ne ABAP_TRUE.
***   Remove Corrugation Width
      ME->SET_COWID( IF_SETBY = SPACE ).
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Do only Recalc Corrugation Width if not overridden
    LS_COWID_NEW = ME->GET_COWID( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.

    clear: LS_COWID_NEW-COWID.

***--------------------------------------------------------------------------------------
*** Get Sheet Wdith
    LR_PR_CORR->ZIF_VCXI_P1SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTWI = LS_SHTWI ).

*** Activated Corrugation Width from Board Grade Customizing
    LT_COWID = ME->GET_VALID_COWID( IS_SHTWI = LS_SHTWI ).

    if LT_COWID is not initial.
***   Get Limits of Side Run
      LR_PR_CORR->GET_LIMIT_SIDRU( exporting IF_UOM       = LS_SHTWI-SHTWI_UOM
                                   importing ES_SIDRU_MIN = LS_SIDRU_MIN
                                             ES_SIDRU_MAX = LS_SIDRU_MAX ).

***   Evaluate all customized Corrugation Width
      loop at LT_COWID into LS_COWID.

***     Calculate Side Run
        LS_SIDRU_TMP = ME->CALC_SIDRU( IS_SIDRU_MIN = LS_SIDRU_MIN
                                       IS_COWID     = LS_COWID
                                       IS_SHTWI     = LS_SHTWI ).

***     Check Siderun agains limit
        if LS_SIDRU_MIN is not initial and
           LS_SIDRU_MAX is not initial.
          check LS_SIDRU_TMP-SIDRU ge LS_SIDRU_MIN-SIDRU and
                LS_SIDRU_TMP-SIDRU le LS_SIDRU_MAX-SIDRU.
        endif.

        check LS_SIDRU-SIDRU is initial or
              LS_SIDRU_TMP-SIDRU lt LS_SIDRU-SIDRU.
***     Safe Corrugation Width according to best Side Run
        LS_SIDRU     = LS_SIDRU_TMP.
        LS_COWID_NEW = LS_COWID.

      endloop.
    endif.

***--------------------------------------------------------------------------------------
*** Set new Corrugation Width
    ME->SET_COWID( IS_COWID = LS_COWID_NEW ).

  endmethod.
  method HANDLE_RECALC_SIDRU.

    data: LF_NOUTW  type ZVCXI_PXS_NOUTW.
    data: LS_COWID     type ZVCXI_PCS_S_COWID,
          LS_SHTWI     type ZVCXI_P0SS_S_SHTWI,
          LS_SIDRU_MIN type ZVCXI_P0SS_S_SIDRU,
          LS_SIDRU     type ZVCXI_P0SS_S_SIDRU.
    data: LR_PR_CORR type ref to ZCL_VCXI_P1SS_PR_CORR.


***--------------------------------------------------------------------------------------
*** Get Board Grade Width
    LS_COWID = ME->GET_COWID(  ).

    if LS_COWID-COWID is not initial.
***   Get Provider for Corrugation
      LR_PR_CORR = ME->GET_PRVDR_CORR( ).

***   Get Sheet Wdith (Inbound)
      LR_PR_CORR->GET_SHTDIM( importing ES_SHTWI = LS_SHTWI ).

***   Get Limits of Side Run
      LR_PR_CORR->GET_LIMIT_SIDRU( exporting IF_UOM       = LS_SHTWI-SHTWI_UOM
                                   importing ES_SIDRU_MIN = LS_SIDRU_MIN ).

***   Calculate Side Run
      LS_SIDRU = ME->CALC_SIDRU( exporting IS_SIDRU_MIN = LS_SIDRU_MIN
                                           IS_COWID     = LS_COWID
                                           IS_SHTWI     = LS_SHTWI
                                 importing EF_NOUTW     = LF_NOUTW ).
    else.
      clear: LS_SIDRU-SIDRU,
             LF_NOUTW.
    endif.

*** Set new Side Run
    ME->SET_SIDRU( IS_SIDRU = LS_SIDRU ).
    ME->SET_NOUTW( IF_NOUTW = LF_NOUTW ).

  endmethod.
  method HANDLE_RECALC_SURWT.

    data: LS_SURWT_TOTAL type        ZVCXI_PXS_S_SURWT,
          LS_SURWT       type        ZVCXI_PXS_S_SURWT.
    data: LT_SURWT type table of ZVCXI_PXS_S_SURWT.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE.


*** Surface Weight is only required for Production Board
    check ME->GET_MBOAR( ) eq ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P.

***--------------------------------------------------------------------------------------
*** Get current Value
    LS_SURWT_TOTAL = ME->GET_SURWT( ).
    clear LS_SURWT_TOTAL-SURWT.

***--------------------------------------------------------------------------------------
*** Get MS Paper
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P1SS_PR_MS_PAPER=>C_IPRVT_P1_MS_PAPER
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      check cast ZCL_VCXI_P1SS_PR_MS_PAPER( LR_GATE->R_CLSPR )->GET_SUBPA( ) ne ABAP_UNDEFINED.
      append cast ZCL_VCXI_P1SS_PR_MS_PAPER( LR_GATE->R_CLSPR )->GET_SURWT( IF_UOM = LS_SURWT_TOTAL-SURWT_UOM ) to LT_SURWT.
    endloop.

*** Get Preprint Liner
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P1SS_PR_PRPLIN=>C_IPRVT_P1_PRPLIN
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      append cast ZCL_VCXI_P1SS_PR_PRPLIN( LR_GATE->R_CLSPR )->GET_SURWT( IF_UOM = LS_SURWT_TOTAL-SURWT_UOM ) to LT_SURWT.
    endloop.

*** Get MS Starch
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P1SS_PR_MS_STARCH=>C_IPRVT_P1_MS_STARCH
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      append cast ZCL_VCXI_P1SS_PR_MS_STARCH( LR_GATE->R_CLSPR )->GET_SURWT( IF_UOM = LS_SURWT_TOTAL-SURWT_UOM ) to LT_SURWT.
    endloop.

*** Get MS Wax
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P1SS_PR_MS_WAX=>C_IPRVT_P1_MS_WAX
                                   IF_INUSE  = ABAP_TRUE ) into LR_GATE.
      append cast ZCL_VCXI_P1SS_PR_MS_WAX( LR_GATE->R_CLSPR )->GET_SURWT( IF_UOM = LS_SURWT_TOTAL-SURWT_UOM ) to LT_SURWT.
    endloop.

***--------------------------------------------------------------------------------------
*** Calculate Total Surface Weight
    loop at LT_SURWT into LS_SURWT where SURWT_UOM is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT-SURWT
                                                          IF_CALCV_UOM_1 = LS_SURWT-SURWT_UOM
                                                          IF_CALCV_2     = LS_SURWT_TOTAL-SURWT
                                                          IF_CALCV_UOM_2 = LS_SURWT_TOTAL-SURWT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_SURWT_TOTAL-SURWT_UOM
                                                importing EF_CALCV       = LS_SURWT_TOTAL-SURWT
                                                          EF_CALCV_UOM   = LS_SURWT_TOTAL-SURWT_UOM ).
    endloop.

***--------------------------------------------------------------------------------------
*** Set Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT_TOTAL ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method HANDLE_UPDATE_PAPER.

    data: LF_RENEW_ALL    type ABAP_BOOL,
          LF_RENEW_PAPER  type ABAP_BOOL,
          LF_PAPER_LOCKED type /VCXI/CKX_LOCKED.
    data: LS_COWID type ZVCXI_PCS_S_COWID,
          LS_BPAP  type ZVCXI_PCSS_S_BPAP.
    data: LT_GATE_ALL type /VCXI/VKSR_TT_GATE,
          LT_BPAP     type ZVCXI_PCSS_TT_BPAP,
          LT_BPAID    type table of ZVCXI_PCS_BPAID.
    data: LR_GATE        type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_MS_PAPER type ref to ZCL_VCXI_P1SS_PR_MS_PAPER.

***--------------------------------------------------------------------------------------
*** Check if Existing Papers should be Updated or completely renewed
    loop at IT_GATE into LR_GATE.
      if LR_GATE           eq ME->R_GATE and
         ME->F_RENEW_PAPER eq ABAP_TRUE.
        LF_RENEW_ALL      = ABAP_TRUE.
        ME->F_RENEW_PAPER = ABAP_FALSE.

***   Own Partial-Refresh
      elseif ( LR_GATE eq ME->R_GATE or
               LR_GATE->IS_PARENT( ME->R_GATE ) ) and
             ME->F_RENEW_PAPER eq ABAP_UNDEFINED.
        LF_RENEW_ALL      = ABAP_UNDEFINED.
        ME->F_RENEW_PAPER = ABAP_FALSE.

      endif.
    endloop.

*** Non-active Board should reset Papers
    if ME->IS_ACTIVE_BOARD( ) ne ABAP_TRUE.
      move ABAP_TRUE to LF_RENEW_ALL.

***   Set Flag Locked to all the Papers of the inactive Board
      LF_PAPER_LOCKED = ABAP_TRUE.
    else.
      LF_PAPER_LOCKED = ABAP_FALSE.
    endif.

***--------------------------------------------------------------------------------------
    if ME->R_CUST_BOARD is bound.
      LS_COWID = ME->GET_COWID( ).
***   Get MS Papers list of Work Center
      LT_BPAP = ME->R_CUST_BOARD->GET_BPAP( IF_ARBPL = ME->GET_ARBPL( )
                                            IS_BOARW = value #( BOARW     = LS_COWID-COWID
                                                                BOARW_UOM = LS_COWID-COWID_UOM ) ).
    endif.

*** Collect Paper ID of all Preprint Liner
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_PRPLIN=>C_IPRVT_P1_PRPLIN
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE.
      append cast ZCL_VCXI_P1SS_PR_PRPLIN( LR_GATE->R_CLSPR )->GET_BPAID( ) to LT_BPAID.
    endloop.

***--------------------------------------------------------------------------------------
*** Get All Paper and update them
    LT_GATE_ALL = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P1SS_PR_MS_PAPER=>C_IPRVT_P1_MS_PAPER
                                         IF_INUSE  = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).

    loop at LT_BPAP into LS_BPAP.
      read table LT_GATE_ALL into LR_GATE index 1.
      if SY-SUBRC ne 0.
        LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_IPRVT = ZCL_VCXI_P1SS_PR_MS_PAPER=>C_IPRVT_P1_MS_PAPER ).
        LF_RENEW_PAPER = ABAP_TRUE.
      endif.
      delete LT_GATE_ALL where TABLE_LINE = LR_GATE.

      move LR_GATE->R_CLSPR ?to LR_PR_MS_PAPER.

***   Set Paper ID
      LR_PR_MS_PAPER->SET_BPAID( IF_BPAID = LS_BPAP-BPAID ).

***   Set Paper Factor
      LR_PR_MS_PAPER->SET_BPFAC( IF_BPFAC = LS_BPAP-BPFAC ).

***   Set Paper Locked Flag
      LR_PR_MS_PAPER->SET_F_LOCKED( IF_LOCKED = LF_PAPER_LOCKED ).

***   Preprint active
      if LINE_EXISTS( LT_BPAID[ TABLE_LINE = LS_BPAP-BPAID ] ).
***     Substitution undefined (preprint)
        LR_PR_MS_PAPER->SET_SUBPA( ABAP_UNDEFINED ).
      else.
***     Reset Preprint indication on Substitution
        if LR_PR_MS_PAPER->GET_SUBPA( ) eq ABAP_UNDEFINED.
          LR_PR_MS_PAPER->SET_SUBPA( ABAP_FALSE ).
        endif.

        if LF_RENEW_ALL ne ABAP_TRUE.
***       Check if Update is needed
          if LF_RENEW_PAPER eq ABAP_FALSE and
             LF_RENEW_ALL   ne ABAP_UNDEFINED.
            read table IT_GATE with key TABLE_LINE = LR_GATE
                               transporting no fields.
            check SY-SUBRC eq 0.
          endif.

          check LR_PR_MS_PAPER->GET_SUBPA( ) eq ABAP_FALSE.

        else.
***       Reset Substitution
          LR_PR_MS_PAPER->SET_SUBPA( ABAP_FALSE ).
        endif.
      endif.

***   Update Paper
      LR_PR_MS_PAPER->SET_MATNR( IF_MATNR = LS_BPAP-BPMAT ).

      LF_RENEW_PAPER = ABAP_FALSE.
    endloop.

***--------------------------------------------------------------------------------------
*** Delete all unused Papers
    loop at LT_GATE_ALL into LR_GATE.
      LR_GATE->DO_FREE( ).
      delete LT_GATE_ALL.
    endloop.

  endmethod.
  method HANDLE_UPDATE_STARCH.

    data: LS_BSTA       type        ZVCXI_PCSS_S_BSTA.
    data: LT_GATE       type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_STARCH type ref to ZCL_VCXI_P1SS_PR_MS_STARCH.

***------------------------------------------------------------------------------------------------
    if ME->R_CUST_BOARD is bound.
***   Get Starch of Work Center
      LS_BSTA = ME->R_CUST_BOARD->GET_BSTA( IF_ARBPL = ME->GET_ARBPL( ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Get all existing Starch
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_MS_STARCH=>C_IPRVT_P1_MS_STARCH ).

    if LS_BSTA is not initial.

      read table LT_GATE into LR_GATE index 1.
      if SY-SUBRC ne 0.
        LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = 'MS_STARCH' ).
      endif.
      delete LT_GATE where TABLE_LINE eq LR_GATE.

      move LR_GATE->R_CLSPR ?to LR_PR_STARCH.

      LR_PR_STARCH->SET_MATNR( IF_MATNR = LS_BSTA-STMAT ).
      LR_PR_STARCH->SET_STARC( IF_STARC = LS_BSTA-STARC ).
      LR_PR_STARCH->SET_STARF( IF_STARF = LS_BSTA-STARF ).

    endif.

***--------------------------------------------------------------------------------------
*** Delete all unused Starch
    loop at LT_GATE into LR_GATE.
      LR_GATE->DO_FREE( ).
      delete LT_GATE.
    endloop.

  endmethod.
  method HANDLE_UPDATE_WAX.

    data: LS_BWAX type ZVCXI_PCSS_S_BWAX.
    data: LT_GATE type /VCXI/VKSR_TT_GATE,
          LT_BWAX type ZVCXI_PCSS_TT_BWAX.
    data: LR_GATE   type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_WAX type ref to ZCL_VCXI_P1SS_PR_MS_WAX.

***--------------------------------------------------------------------------------------
    if ME->R_CUST_BOARD is bound.
***   Get defined Wax
      LT_BWAX = ME->R_CUST_BOARD->GET_BWAX( IF_ARBPL = ME->GET_ARBPL( ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Get all existing Wax
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_MS_WAX=>C_IPRVT_P1_MS_WAX ).

    loop at LT_BWAX into LS_BWAX.
      read table LT_GATE into LR_GATE index 1.
      if SY-SUBRC ne 0.
        LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = 'MS_WAX' ).
      endif.
      delete LT_GATE where TABLE_LINE eq LR_GATE.

      move LR_GATE->R_CLSPR ?to LR_PR_WAX.

***   Update Wax
      LR_PR_WAX->SET_MATNR( IF_MATNR = LS_BWAX-WAMAT ).
      LR_PR_WAX->SET_WAXCO( IF_WAXCO = LS_BWAX-WAXCO ).
      LR_PR_WAX->SET_WAXFA( IF_WAXFA = LS_BWAX-WAXFA ).
    endloop.

***--------------------------------------------------------------------------------------
*** Delete all unused Wax
    loop at LT_GATE into LR_GATE.
      LR_GATE->DO_FREE( ).
      delete LT_GATE.
    endloop.

  endmethod.
  method INIT_ATTRI.

    data: LR_CX_CKX type ref to /VCXI/CX_CKX.


*** Get Valid Corrugation Width via Attribute
    try.
        ME->F_VALID_COWID = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_VALID_COWID )-ATTVA.
      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method INIT_DESCR_CLASS.

    data: LS_ATTRI type /VCXI/VKS_S_ATTRI,
          LS_ATTVA type /VCXI/CKX_STRING.
    data: LT_ATTVA type /VCXI/CKX_TT_STRING.
    field-symbols: <S_CLASS_VALUE>   type ZVCXI_PCSS_S_CLASS_VALUE,
                   <S_CLASS_VALUE_C> type ZVCXI_PCSS_S_CLASS_VALUE_C,
                   <S_BOARD_DESCR>   type ZVCXI_PCSS_S_BOARD_DESCR.


    clear: ME->T_CLASS_VALUE, ME->T_CLASS_VALUE_C, ME->T_BOARD_DESCR.

***----------------------------------------------------------------------------
*** Get Classification Values (by Attribute)
    try.
        LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_CLASS ).
      catch /VCXI/CX_CKX.
        clear LS_ATTRI.
    endtry.

    if LS_ATTRI is not initial.
      condense LS_ATTRI-ATTVA no-gaps.
      split LS_ATTRI-ATTVA at ',' into table LT_ATTVA.
      if LT_ATTVA is not initial.
        loop at LT_ATTVA into LS_ATTVA.
          append initial line to ME->T_CLASS_VALUE assigning <S_CLASS_VALUE>.
          move LS_ATTVA to <S_CLASS_VALUE>-ICLAT.
          append initial line to ME->T_CLASS_VALUE_C assigning <S_CLASS_VALUE_C>.
          move LS_ATTVA to <S_CLASS_VALUE_C>-ICLAT.
        endloop.
      endif.
    endif.

    if ME->R_CUST_BOARD is bound.
      ME->R_CUST_BOARD->GET_CLASS_VALUE( changing CT_CLASS_VALUE   = ME->T_CLASS_VALUE
                                                  CT_CLASS_VALUE_C = ME->T_CLASS_VALUE_C ).
    endif.


***----------------------------------------------------------------------------
*** Get Board Descriptions (by Customizing)
    if ME->R_CUST_BOARD is bound.
      ME->R_CUST_BOARD->GET_BOARD_DESCR( changing CT_BOARD_DESCR = ME->T_BOARD_DESCR ).
    endif.

  endmethod.
  method IS_ACTIVE_BOARD.

    data: LF_ICONT type ZVCXI_P0S_ICONT.
    data: LT_PRVDR type /VCXI/VKSR_TT_GATE.
    data: LR_PRVDR type ref to /VCXI/CL_VKSR_GATE,
          LR_ICONT type ref to ZIF_VCXI_PXSS_ICONT.


*** Get Context
    LT_PRVDR = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_ICONT=>C_IPRVT_PX_ICONT
                                      IF_INUSE = ABAP_TRUE ).
    read table LT_PRVDR into LR_PRVDR index 1.
    check SY-SUBRC = 0.
    try.
        move LR_PRVDR->R_CLSPR ?to LR_ICONT.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_ICONT.
    endtry.

    check LR_ICONT is bound.
    move LR_ICONT->GET_ICONT( ) to LF_ICONT.

    check LF_ICONT is not initial.
*{   INSERT         SBXK900067                                        1
    IF ME->GET_MBOAR( ) eq ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S.
      RF_ACTIVE = ABAP_TRUE.
    ENDIF.
    EXIT.
*}   INSERT

*** Check if Active
    if ( LF_ICONT             eq ZIF_VCXI_PXSS_ICONT=>C_ICONT_SALES and
         ME->GET_MBOAR( )     eq ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_S ) or
       ( LF_ICONT             eq ZIF_VCXI_PXSS_ICONT=>C_ICONT_PROD  and
         ME->GET_MBOAR( )     eq ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_P ).
      RF_ACTIVE = ABAP_TRUE.
    endif.

  endmethod.
  method IS_SELFD_REQUIRED.

    if ME->R_CUST_BOARD          is bound       and
       ME->R_CUST_BOARD->F_SELFD eq ABAP_TRUE.
      RF_REQUIRED = ABAP_TRUE.
    endif.

  endmethod.
method SET_BOARD.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_BOARD to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.

*** Renew Papers on Update Event for Papers
    move ABAP_TRUE to ME->F_RENEW_PAPER.

*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BOARD_CHANGED ).

  endif.

endmethod.
method SET_CALIP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

  move IS_CALIP-CALIP                      to LS_PARAM-ATFLV.
  move IS_CALIP-CALIP_UOM                  to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
  endif.

endmethod.
  method SET_COWID.

    data: LF_CHANGED type ABAP_BOOL.
    data: LS_PARAM   type /VCXI/VKSR_S_PARAM.


*** Get current Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_COWID ).

    if IS_COWID is supplied.
      move IS_COWID-COWID     to LS_PARAM-ATFLV.
      move IS_COWID-COWID_UOM to LS_PARAM-UNIT.
    endif.

    if IF_FOVRR is supplied.
      LS_PARAM-SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                         else SPACE ).
    else.
      LS_PARAM-SETBY = IF_SETBY.
    endif.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Request soft Board Paper Refresh
      move ABAP_UNDEFINED to ME->F_RENEW_PAPER.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_COWID_CHANGED ).
    endif.

  endmethod.
method SET_FLUTE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTE ).

  move IF_FLUTE                            to LS_PARAM-ATWRT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MBOAR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MBOAR ).

  move IF_MBOAR  to LS_PARAM-ATWRT.
  move IF_SETBY  to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).


endmethod.
  method SET_NOUTW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTW ).

    if IF_NOUTW is supplied.
      LS_PARAM-ATFLV = IF_NOUTW.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUTW_CHANGED ).
    endif.

  endmethod.
  method SET_SIBLING_BOARD_ID.

    data: LF_BOARD_DFLT type ZVCXI_PCS_BOARD,
          LF_BOARD_CURR type ZVCXI_PCS_BOARD,
          LF_SETBY      type /VCXI/VKSR_SETBY.
    data: LT_GATE  type /VCXI/VKSR_TT_GATE,
          LT_APBOA type ZVCXI_PCSSC_TT_APBOA,
          LT_ASBOA type ZVCXI_PCSSC_TT_ASBOA.
    data: LR_GATE  type ref to /VCXI/CL_VKSR_GATE,
          LR_BOARD type ref to ZCL_VCXI_P1SS_PR_BOARD.


*** Get corresponding Sales/Production Board ID
    if ME->R_CUST_BOARD is bound.
      if ME->GET_MBOAR( ) eq ZCL_VCXI_P1SS_PR_BOARD=>F_MBOAR_S.
        LF_BOARD_DFLT = ME->R_CUST_BOARD->GET_APBOA( importing ET_APBOA = LT_APBOA ).
      else.
        move ME->R_CUST_BOARD->GET_ASBOA( ) to LT_ASBOA.
        break Q_FIRST_SALES_BOARD_ID.
        read table LT_ASBOA into LF_BOARD_DFLT index 1.
      endif.
    endif.

*** Find Sibling Board
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P1SS_PR_BOARD=>C_IPRVT_BOARD
                                     IF_INUSE = ABAP_TRUE ).
    loop at LT_GATE into LR_GATE.
      check LR_GATE ne ME->R_GATE.

      try.
          move LR_GATE->R_CLSPR ?to LR_BOARD.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_BOARD.
      endtry.

      check LR_BOARD is bound.
***   Ensure Board is still valid or was not set by User
      LF_BOARD_CURR = LR_BOARD->GET_BOARD( importing EF_SETBY = LF_SETBY ).

      check ( LT_APBOA is not initial and
              not LINE_EXISTS( LT_APBOA[ TABLE_LINE = LF_BOARD_CURR ] )
             ) or
             LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      LR_BOARD->SET_BOARD( exporting IF_BOARD = LF_BOARD_DFLT ).
      exit.
    endloop.

  endmethod.
  method SET_SIDRU.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SIDRU ).

    if IS_SIDRU is supplied.
      move IS_SIDRU-SIDRU     to LS_PARAM-ATFLV.
      move IS_SIDRU-SIDRU_UOM to LS_PARAM-UNIT.
    endif.
    move IF_SETBY             to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
*** Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SIDRU_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
