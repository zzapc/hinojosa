
class ZCL_VCXI_F0SS_PR_MS_XPROC definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_F0SS_COMM_NEXT
      abstract methods DO_BACKWARD .
  interfaces ZIF_VCXI_XCS_PSCALE_MGR .
  interfaces ZIF_VCXI_XCS_NGREP .

  constants C_IPRVT_MS_XPROC type /VCXI/VKSC_IPRVT value 'ZVCXI_F0SS_MS_XPROC' ##NO_TEXT.
  constants C_PARID_MAKTX type /VCXI/VKS_PARID value 'ZVCXI_XC_MAKTX' ##NO_TEXT.

  methods GET_CONFIG_INFO
  abstract
    exporting
      !EF_CUOBJ type CUOBJ
      !ES_CMPRK type /VCXI/VKC_S_CMPRK
    raising
      /VCXI/CX_CKX .
  methods GET_MAKTX
    exporting
      !EF_MAKTX type MAKTX
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods IS_OPENSPV_ALLOWED
  abstract
    returning
      value(RF_ALLOWED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_MAKTX
    importing
      !IF_MAKTX type MAKTX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods OPEN
  abstract
    exporting
      !ER_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE
      !ER_GATE_XCONO type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods GET_MATNR_DESCR
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_ATTID_CMATN type /VCXI/VKS_ATTID value 'ALLOWED_CMATN' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_MAKTX type /VCXI/VKSC_IEVNT value 'RECALC_MAKTX' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_MAKTX_CHANGED type /VCXI/VKSC_IEVNT value 'MAKTX_CHANGED' ##NO_TEXT.

  methods HANDLE_RECALC_MAKTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_F0SS_PR_MS_XPROC definition
class ZCL_VCXI_F0SS_PR_MS_XPROC implementation.
  method GET_MAKTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).
    move LS_PARAM-STRNG to EF_MAKTX.
    move LS_PARAM-SETBY to EF_SETBY.

    if EF_FOVRR is requested.
      if ME->IS_DUMMY( ) ne ABAP_TRUE or
         ZCL_VCXI_F0S_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial.
        move ABAP_UNDEFINED to EF_FOVRR.
      else.
        if EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
          move ABAP_TRUE  to EF_FOVRR.
        else.
          move ABAP_FALSE to EF_FOVRR.
        endif.
      endif.
    endif.

  endmethod.
  method GET_MATNR_DESCR.

    data:  LF_MAKTX   type MAKTX.

    if ME->IS_DUMMY( ) eq ABAP_TRUE.
      ME->GET_MAKTX( importing EF_MAKTX = LF_MAKTX ).
      move LF_MAKTX to RF_DESCR.
    else.
      RF_DESCR = SUPER->GET_MATNR_DESCR( ).
    endif.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_MAKTX.
        ME->HANDLE_RECALC_MAKTX( ).

***   Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

      when others.
    endcase.

  endmethod.
  method HANDLE_RECALC_MAKTX.

    data: LF_MAKTX type MAKTX,
          LF_SETBY type /VCXI/VKSR_SETBY,
          LF_FOVRR type ZVCXI_XCS_FOVRR.

*** Don't generate any Material Text for Non-Dummies
    if ME->IS_DUMMY( ) ne ABAP_TRUE.
      clear: LF_MAKTX, LF_SETBY.
    else.
***   Only calcualate if calculation is active
      ME->GET_MAKTX( importing EF_FOVRR = LF_FOVRR ).
      check LF_FOVRR eq ABAP_FALSE.

***   Get generated Material Description
      LF_MAKTX = ZCL_VCXI_F0S_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).
      LF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
    endif.

*** Set new Description
    ME->SET_MAKTX( IF_MAKTX = LF_MAKTX
                   IF_SETBY = LF_SETBY ).

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    if ME->GET_PURCH( ) ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK.
      CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE     = ME->GET_LIFNR( )   "Vendor
                                            IF_ALPHA_OUT = ABAP_TRUE
                                  changing  CT_ATTR      = LT_ATTR ).
    endif.

*** Add Node for Procurement
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE     = ME->GET_DESCR( )
                                                    IF_DESCR     = ME->GET_DESCR( )
                                                    IF_ICON      = 'sap-icon://tag'
                                                    IF_STATUS    = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY = IF_GROUP_KEY
                                                    IT_ATTR      = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
  method ZIF_VCXI_XCS_PSCALE_MGR~GET_PSCALE.

    data: LS_PSQTY       type ZVCXI_XCS_S_PSQTY,
          LS_PSQTY_MATCH type ZVCXI_XCS_S_PSQTY.
    data: LT_GATE        type /VCXI/VKSR_TT_GATE.
    data: LR_PR_PSCALE       type ref to ZCL_VCXI_XCS_PR_PSCALE,
          LR_PR_PSCALE_MATCH type ref to ZCL_VCXI_XCS_PR_PSCALE,
          LR_GATE            type ref to /VCXI/CL_VKSR_GATE.


*** Get Gates of Price Scales
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                     IF_INUSE  = ABAP_TRUE
                                     IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
          check LR_PR_PSCALE is bound.

***--------------------------------------------------------------------------------------
***       Get Price Scale Quantity
          move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

          if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
             ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
               LS_PSQTY_MATCH-PSQTY is initial ).
            move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
            move LS_PSQTY     to LS_PSQTY_MATCH.
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

***--------------------------------------------------------------------------------------
*** If Price Scale was found -> Return Price and Price Unit
    check LR_PR_PSCALE_MATCH is bound.
    ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
    ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

  endmethod.
  method ZIF_VCXI_XCS_PSCALE_MGR~IS_CHANGEABLE.

    data: LF_LOCKED type /VCXI/CKX_LOCKED.

    check ME->R_GATE is bound.
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    move LF_LOCKED to RF_CHANGEABLE.

  endmethod.
