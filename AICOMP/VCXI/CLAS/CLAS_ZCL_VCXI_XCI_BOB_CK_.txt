
class ZCL_VCXI_XCI_BOB_CK definition
  public
  create protected .

public section.

  data F_STRUNR type CK_STRUNR read-only .
  data S_CCS type CKF_KEKO_KEPH read-only .
  data S_KEKOKEY type CKKEKOKEY read-only .
  data T_KIS1 type CKF_STANDARD_KIS1_TABLE read-only .

  class-methods CLASS_CONSTRUCTOR .
  class-methods GET_INSTANCE
    importing
      !IS_KEKOKEY type CKKEKOKEY
    returning
      value(RR_BOB_CK) type ref to ZCL_VCXI_XCI_BOB_CK
    raising
      /VCXI/CX_CKX .
  methods DESERIALIZE
    importing
      !IF_XML type /VCXI/CKX_STRING
    raising
      /VCXI/CX_CKX .
  class-methods LOAD
    importing
      !IS_KEKOKEY type CKKEKOKEY
      !IF_STRUNR type CK_STRUNR optional
      !IF_READ_MODE type CK_TYPE_KEKO_KEPH_READ default '0'
    returning
      value(RR_BOB_CK) type ref to ZCL_VCXI_XCI_BOB_CK
    raising
      /VCXI/CX_CKX .
  methods INIT
    importing
      !IF_STRUNR type CK_STRUNR
    raising
      /VCXI/CX_CKX .
  methods REFRESH_CCS
    importing
      !IS_KEKO type KEKO optional
      !IF_READ_MODE type CK_TYPE_KEKO_KEPH_READ
    raising
      /VCXI/CX_CKX .
  methods SERIALIZE
    exporting
      !ET_DATA type ABAP_TRANS_SRCBIND_TAB
    returning
      value(RF_XML) type /VCXI/CKX_STRING
    raising
      /VCXI/CX_CKX .
  methods ADD_CKKALKTAB
    importing
      !IS_CKKALKTAB type CKKALKTAB
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
      S_KEKOKEY type CKKEKOKEY,
      R_BOB_CK  type ref to ZCL_VCXI_XCI_BOB_CK,
    end of YS_INSTANCE .

  class-data T_FIELDCATALOG type LVC_T_FCAT .
  class-data R_COSTING_PERSISTENCE type ref to CL_COSTING_PERSISTENCE .
  class-data:
    T_INSTANCE type sorted table of YS_INSTANCE with unique key S_KEKOKEY .

  methods CONSTRUCTOR
    importing
      !IS_KEKOKEY type CKKEKOKEY
    raising
      /VCXI/CX_CKX .
  methods LOAD_COSTING
    importing
      !IF_STRUNR type CK_STRUNR
      !IF_READ_MODE type CK_TYPE_KEKO_KEPH_READ
    raising
      /VCXI/CX_CKX .
  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCI_BOB_CK definition
class ZCL_VCXI_XCI_BOB_CK implementation.
  method ADD_CKKALKTAB.

    append corresponding #( IS_CKKALKTAB ) to ME->T_KIS1.

  endmethod.
  method CLASS_CONSTRUCTOR.

    CL_COSTING_PERSISTENCE=>CREATE( importing EX_COSTING_PERSISTENCE = R_COSTING_PERSISTENCE ).

*** Create Field Catalog only once to improve performance
    CL_COSTING_BOM=>CREATE_FIELDCATALOG( importing ET_FIELDCATALOG = T_FIELDCATALOG ).

  endmethod.
  method CONSTRUCTOR.

    ME->S_KEKOKEY = IS_KEKOKEY.

*** Add to Instance Buffer
    insert value #( S_KEKOKEY = IS_KEKOKEY
                    R_BOB_CK  = ME ) into table T_INSTANCE.

  endmethod.
  method DESERIALIZE.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


    check IF_XML is not initial.

*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).

*** Open XML
    call transformation ID
         source xml IF_XML
         result (LT_DATA).

  endmethod.
  method GET_INSTANCE.

    data: LS_INSTANCE type YS_INSTANCE.

    read table T_INSTANCE into LS_INSTANCE
                          with key S_KEKOKEY = IS_KEKOKEY.
    if SY-SUBRC eq 0.
      RR_BOB_CK = LS_INSTANCE-R_BOB_CK.
    else.
      case IS_KEKOKEY-BZOBJ.
        when '0'.   "Material
          RR_BOB_CK = new ZCL_VCXI_XCI_BOB_CK_MAT( IS_KEKOKEY = IS_KEKOKEY ).
        when 'B'.   "Sales Order (ProdCost)
          RR_BOB_CK = new ZCL_VCXI_XCI_BOB_CK_SDOC( IS_KEKOKEY = IS_KEKOKEY ).
        when others.
          RR_BOB_CK = new ZCL_VCXI_XCI_BOB_CK( IS_KEKOKEY = IS_KEKOKEY ).
      endcase.
    endif.

  endmethod.
  method GET_XML_DREF.

    RT_DATA = value #( ( NAME = 'S_KEKOKEY'  VALUE = ref #( ME->S_KEKOKEY ) )
                       ( NAME = 'F_STRUNR'   VALUE = ref #( ME->F_STRUNR ) )
                       ( NAME = 'S_CCS'      VALUE = ref #( ME->S_CCS ) )
                       ( NAME = 'T_KIS1'     VALUE = ref #( ME->T_KIS1 ) )
                      ).

  endmethod.
  method INIT.

    free: ME->F_STRUNR,
          ME->S_CCS,
          ME->T_KIS1.

    ME->F_STRUNR = IF_STRUNR.

  endmethod.
  method LOAD.

*** Get Instance of Top Level Costing
    RR_BOB_CK = ZCL_VCXI_XCI_BOB_CK=>GET_INSTANCE( IS_KEKOKEY = IS_KEKOKEY ).

*** Load complete Costing Structure
    RR_BOB_CK->LOAD_COSTING( IF_STRUNR    = IF_STRUNR
                             IF_READ_MODE = IF_READ_MODE ).

*** Mark as Entry Position
    RR_BOB_CK->S_CCS-KEKO-TOPKA = ABAP_TRUE.        "SAP Note 3191360

  endmethod.
  method LOAD_COSTING.

    data: LS_KIS1    type KIS1,
          LS_KEKOKEY type CKKEKOKEY.
    data: LT_BOM_LINE  type KKB_T_BLIN,
          LT_BOM_CHILD type KKB_T_BLIN.
    data: LR_BOM      type ref to CL_COSTING_BOM,
          LR_BOM_ROOT type ref to CL_COSTING_BOM_LINE,
          LR_BOM_LINE type ref to CL_COSTING_BOM_LINE.


    if ME->S_CCS is not initial and
       ME->F_STRUNR eq IF_STRUNR.
      exit. "Reuse already loaded information
    endif.

***----------------------------------------------------------------------------
***  Initialize
    ME->INIT( IF_STRUNR = IF_STRUNR ).

*** Load Cost Component Structure
    ME->REFRESH_CCS( IF_READ_MODE = IF_READ_MODE ).

***----------------------------------------------------------------------------
*** Get Costed Multilevel BOM
    create object LR_BOM
      exporting
        IS_KEKOKEY            = ME->S_KEKOKEY
        I_VIEW                = '02'          "Costs of Goods Sold (TCKH8-SICHT)
        I_ONLY_M              = ABAP_FALSE    "Not only Materials
        IT_FIELDCATALOG       = T_FIELDCATALOG
      exceptions
        KEKO_NOT_FOUND        = 1
        ERROR_UNIT_CONVERSION = 2
        ERROR                 = 3
        others                = 4.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***----------------------------------------------------------------------------
*** Get Root BOM Item
    LR_BOM->GET_CHILDREN( importing ET_BOM_LINES = LT_BOM_LINE ).
    check LT_BOM_LINE is not initial.
    LR_BOM_ROOT = LT_BOM_LINE[ 1 ].
    free LT_BOM_LINE.

**+ Get next Levels
    LR_BOM_ROOT->GET_CHILDREN( importing  ET_CHILDREN         = LT_BOM_LINE
                               exceptions NODE_NOT_EXPANDABLE = 1 ).
    loop at LT_BOM_LINE into LR_BOM_LINE.
      LR_BOM_LINE->GET_KIS1( importing  ES_KIS1   = LS_KIS1
                             exceptions NOT_FOUND = 1 ).
      check SY-SUBRC eq 0.
      append LS_KIS1 to ME->T_KIS1.

***   Check for Sub-Levels
      clear LT_BOM_CHILD.
      LR_BOM_LINE->GET_CHILDREN( importing  ET_CHILDREN         = LT_BOM_CHILD
                                 exceptions NODE_NOT_EXPANDABLE = 1 ).
      check SY-SUBRC eq 0.

***   Derive KEKO Key from Children CKIS Key as the KEKO Key is not available (private attribute only)
      LS_KEKOKEY = corresponding #( LT_BOM_CHILD[ 1 ]->MS_CKISKEY ).

***   Load Costing of Component
      ZCL_VCXI_XCI_BOB_CK=>GET_INSTANCE( IS_KEKOKEY = LS_KEKOKEY )->LOAD_COSTING( IF_STRUNR    = IF_STRUNR
                                                                                  IF_READ_MODE = IF_READ_MODE ).

    endloop.

  endmethod.
  method REFRESH_CCS.

*** Read Calculation
    call method R_COSTING_PERSISTENCE->COSTING_READ_SIMPLE
      exporting
        IM_KEKOKEY     = ME->S_KEKOKEY
        IM_READ_MODE   = IF_READ_MODE
      importing
        EX_CCS         = ME->S_CCS
      exceptions
        INTERNAL_ERROR = 0
        NOT_FOUND      = 0
        others         = 0.

    if IS_KEKO is supplied.
      ME->S_CCS-KEKO = IS_KEKO.
    endif.

  endmethod.
  method SERIALIZE.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


*** Get Data References for XML Serialize/Deserialize
    ET_DATA = ME->GET_XML_DREF( ).

*** Create XML
    if RF_XML is requested.
      call transformation ID
           source (ET_DATA)
           result xml RF_XML.
    endif.

  endmethod.
