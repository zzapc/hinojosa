
class ZCL_VCXI_XCSP_PR_OUTSO definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_XCSP_OPERATION .

  aliases C_IPRVT_XCS_OPERATION
    for ZIF_VCXI_XCSP_OPERATION~C_IPRVT_XCS_OPERATION .
  aliases R_PR_MFMGR
    for ZIF_VCXI_XCSP_OPERATION~R_PR_MFMGR .
  aliases CONV_TO_MQTYI
    for ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI .
  aliases CONV_TO_MQTYO
    for ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO .
  aliases GET_MQTYI
    for ZIF_VCXI_XCSP_OPERATION~GET_MQTYI .
  aliases GET_MQTYO
    for ZIF_VCXI_XCSP_OPERATION~GET_MQTYO .
  aliases GET_WERKS
    for ZIF_VCXI_XCSP_OPERATION~GET_WERKS .
  aliases SET_MQTYO
    for ZIF_VCXI_XCSP_OPERATION~SET_MQTYO .

  constants C_PARID_LIFNR type /VCXI/VKS_PARID value 'ZVCXI_XC_LIFNR'. "#EC NOTEXT
  constants C_PARID_PRICE type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICE'. "#EC NOTEXT
  constants C_PARID_PRICP_A type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_A'. "#EC NOTEXT
  constants C_PARID_PRICP_L type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_L'. "#EC NOTEXT
  constants C_PARID_PRICP_P type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_P'. "#EC NOTEXT
  constants C_PARID_PRICP_W type /VCXI/VKS_PARID value 'ZVCXI_XC_PRICP_W'. "#EC NOTEXT
  constants C_PARID_SCRAP type /VCXI/VKS_PARID value 'ZVCXI_XC_SCRAP'. "#EC NOTEXT
  constants C_PARID_TEXT type /VCXI/VKS_PARID value 'ZVCXI_XC_TEXT'. "#EC NOTEXT
  data F_PARID_PRICP type /VCXI/VKS_PARID .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_LIFNR
    returning
      value(RF_LIFNR) type LIFNR
    raising
      /VCXI/CX_CKX .
  methods GET_PRICE
    returning
      value(RS_PRICE) type ZVCXI_XCS_S_PRICE
    raising
      /VCXI/CX_CKX .
  methods GET_PRICP
    returning
      value(RS_PRICP) type ZVCXI_XCS_S_PRICP
    raising
      /VCXI/CX_CKX .
  methods GET_SCRAP
    returning
      value(RS_SCRAP) type ZVCXI_XCSP_S_SCRAP
    raising
      /VCXI/CX_CKX .
  methods GET_TEXT
    returning
      value(RF_TEXT) type TEXT30
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS_ARBPL
    exporting
      !EF_WERKS type WERKS_D
      !EF_ARBPL type ARBPL
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods IS_LIFNR_REQUIRED
    returning
      value(RF_REQUIRED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_LIFNR
    importing
      !IF_LIFNR type LIFNR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRICE
    importing
      !IS_PRICE type ZVCXI_XCS_S_PRICE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRICP
    importing
      !IS_PRICP type ZVCXI_XCS_S_PRICP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SCRAP
    importing
      !IS_SCRAP type ZVCXI_XCSP_S_SCRAP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TEXT
    importing
      !IF_TEXT type TEXT30
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WERKS_ARBPL
    importing
      !IF_WERKS type WERKS_D
      !IF_ARBPL type ARBPL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  aliases C_IEVNT_I_INIT_PR_MFMGR
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_I_INIT_PR_MFMGR .
  aliases C_IEVNT_O_MQTYI_CHANGED
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_O_MQTYI_CHANGED .
  aliases C_IEVNT_O_MQTYO_CHANGED
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_O_MQTYO_CHANGED .
  aliases C_IEVNT_O_MQTY_CONV_CHANGED
    for ZIF_VCXI_XCSP_OPERATION~C_IEVNT_O_MQTY_CONV_CHANGED .
  aliases C_PARID_MQTYI_A
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_A .
  aliases C_PARID_MQTYI_L
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_L .
  aliases C_PARID_MQTYI_P
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_P .
  aliases C_PARID_MQTYI_W
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYI_W .
  aliases C_PARID_MQTYO_A
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_A .
  aliases C_PARID_MQTYO_L
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_L .
  aliases C_PARID_MQTYO_P
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_P .
  aliases C_PARID_MQTYO_W
    for ZIF_VCXI_XCSP_OPERATION~C_PARID_MQTYO_W .
  aliases F_PARID_MQTYI
    for ZIF_VCXI_XCSP_OPERATION~F_PARID_MQTYI .
  aliases F_PARID_MQTYO
    for ZIF_VCXI_XCSP_OPERATION~F_PARID_MQTYO .
  aliases HANDLE_INIT_PR_MFMGR
    for ZIF_VCXI_XCSP_OPERATION~HANDLE_INIT_PR_MFMGR .

  constants C_IEVNT_O_ARBPL_CHANGED type /VCXI/VKSC_IEVNT value 'ARBPL_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_MQTYI type /VCXI/VKSC_IEVNT value 'RECALC_MQTYI'. "#EC NOTEXT
  constants C_IEVNT_O_SCRAP_CHANGED type /VCXI/VKSC_IEVNT value 'SCRAP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_RECALC_PRICE type /VCXI/VKSC_IEVNT value 'RECALC_PRICE'. "#EC NOTEXT

  methods GET_UOMCF
    returning
      value(RT_UOMCF) type ZVCXI_XCS_TT_UOMCF
    raising
      /VCXI/CX_CKX .
  methods CALC_MQTYI
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods CHECK_LIFNR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRICE
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRICP
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_WERKS_ARBPL
    returning
      value(RF_SUBRC) type SY-SUBRC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MQTYI
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_PRICE
    raising
      /VCXI/CX_CKX .
  methods SET_MQTYI
    importing
      !IS_MQTYI type ZVCXI_XCSP_S_MQTYI
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_PR_OUTSO definition
class ZCL_VCXI_XCSP_PR_OUTSO implementation.
method CALC_MQTYI.

  data:  LF_DIMID     type         DIMID.
  data:  LS_SCRAP     type         ZVCXI_XCSP_S_SCRAP,
         LS_MSRWA     type         /VCXI/VSM_S_MSRWA,
         LS_MQTYO     type         ZVCXI_XCSP_S_MQTYO,
         LS_MQTYI     type         ZVCXI_XCSP_S_MQTYI,
         LS_QTY       type         ZVCXI_XCSP_S_QTY.


  try.
***----------------------------------------------------------------------------
***   Get Outbound Quantity and convert it depending to Inbound
      LS_MQTYO       = ME->GET_MQTYO( ).
      move LS_MQTYO-MQTYO     to LS_QTY-QTY.
      move LS_MQTYO-MQTYO_UOM to LS_QTY-QTY_UOM.
      LS_MQTYI = ME->ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI( IS_QTY = LS_QTY  ).
      move LS_MQTYI-MQTYI     to LS_QTY-QTY.
      move LS_MQTYI-MQTYI_UOM to LS_QTY-QTY_UOM.

***   Get Scrap Factor
      LS_SCRAP   = ME->GET_SCRAP( ).

***----------------------------------------------------------------------------
      if LS_QTY-QTY_UOM is not initial.
***     Calculate the Waste
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_QTY-QTY
                                                            IF_CALCV_UOM_1 = LS_QTY-QTY_UOM
                                                            IF_CALCV_2     = LS_SCRAP-SCRAP
                                                            IF_CALCV_UOM_2 = LS_SCRAP-SCRAP_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                  importing EF_CALCV       = LS_MSRWA-MSRWA
                                                            EF_CALCV_UOM   = LS_MSRWA-MSRWA_UOM ).

***     In Case of PC adjust upwards
***     Get Dimensions of Unit
        if LS_MSRWA-MSRWA_UOM is not initial.
          call function 'DIMENSION_GET_FOR_UNIT'
            exporting
              UNIT           = LS_MSRWA-MSRWA_UOM
            importing
              DIMENSION      = LF_DIMID
            exceptions
              UNIT_NOT_FOUND = 1
              others         = 2.
          if SY-SUBRC <> 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.

          if LF_DIMID eq 'AAAADL'.
            LS_MSRWA-MSRWA = ceil( LS_MSRWA-MSRWA ).
          endif.
        endif.
      endif.

    catch CX_SY_ARITHMETIC_OVERFLOW.
      clear LS_MSRWA.
  endtry.

***----------------------------------------------------------------------------
*** Add Run Waste to Quantity In
  if LS_MQTYI-MQTYI is not initial.
    add LS_MSRWA-MSRWA to LS_MQTYI-MQTYI.
  endif.

*** Set Quantity In
  ME->SET_MQTYI( IS_MQTYI = LS_MQTYI ).

endmethod.
method CHECK_LIFNR .

  data: LF_LIFNR    type LIFNR,
        LF_WERKS    type WERKS_D.
  data: LR_CX_CKX type ref to /VCXI/CX_CKX.

***---------------------------------------------------------------------
*** Start Positiv
  move ABAP_TRUE to RF_OKAY.

*** Get Plant and Vendor
  ME->GET_WERKS_ARBPL( importing EF_WERKS = LF_WERKS ).
  LF_LIFNR = ME->GET_LIFNR( ).

  try.

***   Do Check
      ZCL_VCXI_XCS_SERVICE=>CHECK_LIFNR( IF_LIFNR = LF_LIFNR
                                         IF_WERKS = LF_WERKS ).

***   Vendor Number filled correctly.
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '101' ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      move ABAP_FALSE to RF_OKAY.

***   Raise Exception
      check IR_MESSAGE is bound.
      IR_MESSAGE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method CHECK_PRICE .

  data:  LS_PRICE type ZVCXI_XCS_S_PRICE.

  LS_PRICE = ME->GET_PRICE( ).

  if LS_PRICE-PRICE is not initial.
    move ABAP_TRUE  to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CHECK_PRICP .

  data:  LS_PRICP type ZVCXI_XCS_S_PRICP.

  LS_PRICP = ME->GET_PRICP( ).

  if LS_PRICP-PRICP is not initial.
    move ABAP_TRUE  to RF_OKAY.
  else.
    move ABAP_FALSE to RF_OKAY.
  endif.

endmethod.
method CHECK_WERKS_ARBPL.

  data:  LF_WERKS type WERKS_D,
         LF_ARBPL type ARBPL,
         LF_COUNT type I.

  ME->GET_WERKS_ARBPL( importing EF_WERKS = LF_WERKS
                                 EF_ARBPL = LF_ARBPL ).

  if LF_WERKS is initial or
     LF_ARBPL is initial.
    move 1 to RF_SUBRC.
  else.
*** Check Plant and Work Center Combination
    select count(*)
           into LF_COUNT
           from CRHD
          where WERKS eq LF_WERKS
           and  ARBPL eq LF_ARBPL.
    if SY-SUBRC ne 0.
      move 2 to RF_SUBRC.
    else.
      move 0 to RF_SUBRC.
    endif.
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

endmethod.
method GET_LIFNR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).
  move LS_PARAM-ATWRT to RF_LIFNR.

endmethod.
method GET_PRICE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRICE ).
  move LS_PARAM-ATFLV to RS_PRICE-PRICE.
  move LS_PARAM-CURKY to RS_PRICE-PRICE_CURR.

endmethod.
method GET_PRICP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PRICP ).
  move LS_PARAM-ATFLV to RS_PRICP-PRICP.
  move LS_PARAM-UNIT  to RS_PRICP-PRICP_UOM.

endmethod.
method GET_SCRAP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SCRAP ).
  move LS_PARAM-ATFLV to RS_SCRAP-SCRAP.
  move LS_PARAM-UNIT  to RS_SCRAP-SCRAP_UOM.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Plant&Workcenter
  if ME->CHECK_WERKS_ARBPL( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Vendor
  if IS_LIFNR_REQUIRED( ) eq ABAP_TRUE.
    if ME->CHECK_LIFNR( ) eq ABAP_TRUE.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Price
  if ME->CHECK_PRICE( ) eq ABAP_TRUE.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Price Unit
  if ME->CHECK_PRICP( ) eq ABAP_TRUE.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Plant&Workcenter
  case ME->CHECK_WERKS_ARBPL( ).
    when 0.
***   Plant and Work Center maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '001' ).
    when 1.
***   Plant and Work Center not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'W'
                               IF_MSGNO = '002' ).
    when 2.
***   Maintained Plant and Work Center combination not valid.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                               IF_MSGTY = 'W'
                               IF_MSGNO = '003' ).
  endcase.

***----------------------------------------------------------------------------
*** Check the Vendor
  if ME->IS_LIFNR_REQUIRED( ) eq ABAP_TRUE.
    ME->CHECK_LIFNR( IR_MESSAGE = IR_MESSAGE ).
  endif.

***----------------------------------------------------------------------------
*** Check the Price
  if ME->CHECK_PRICE( ) eq ABAP_TRUE.
*** Price defined.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '103' ).
  else.
*** No Price defined.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                             IF_MSGTY = 'W'
                             IF_MSGNO = '104' ).
  endif.

***----------------------------------------------------------------------------
*** Check the Price Unit
  if ME->CHECK_PRICP( ) eq ABAP_TRUE.
*** Price Unit defined.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '105' ).
  else.
*** No Price Unit defined.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSP'
                             IF_MSGTY = 'W'
                             IF_MSGNO = '106' ).
  endif.


endmethod.
method GET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).
  move LS_PARAM-ATWRT to RF_TEXT.

endmethod.
method GET_UOMCF.
endmethod.
method GET_WERKS_ARBPL.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY+0(4) to EF_WERKS.
  move LS_LEOKY-LEOKY+4(8) to EF_ARBPL.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_PR_MFMGR.
      ME->HANDLE_INIT_PR_MFMGR( ).
    when C_IEVNT_I_RECALC_MQTYI.
      ME->HANDLE_RECALC_MQTYI( ).
    when C_IEVNT_I_RECALC_PRICE.
      ME->HANDLE_RECALC_PRICE( ).
  endcase.

endmethod.
method HANDLE_RECALC_MQTYI.

***------------------------------------------------------------------
*** Calculate Quantity In
  ME->CALC_MQTYI( ).

endmethod.
method HANDLE_RECALC_PRICE.

  data:  LS_CONSU           type        ZVCXI_XCSP_S_CONSU,
         LS_PSQTY           type        ZVCXI_XCS_S_PSQTY,
         LS_PRICE           type        ZVCXI_XCS_S_PRICE,
         LS_PRICP           type        ZVCXI_XCS_S_PRICP.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_UOMCF           type        ZVCXI_XCS_TT_UOMCF.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PSCALE_MGR      type ref to ZIF_VCXI_XCS_PSCALE_MGR.

***------------------------------------------------------------------
*** Get Price Scale Manager of Outsourcing
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCS_PSCALE_MGR=>C_IPRVT_XCS_PSCALE_MGR
                                   IF_INUSE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to LR_PSCALE_MGR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PSCALE_MGR.
    endtry.
  endif.
  check LR_PSCALE_MGR is bound.

***----------------------------------------------------------------------------
*** Get Machine Quantity In and request new Price Scale
  LS_CONSU = ME->ZIF_VCXI_XCSP_OPERATION~GET_MQTYI( ).
  LS_PSQTY-PSQTY     = LS_CONSU-CONSU.
  LS_PSQTY-PSQTY_UOM = LS_CONSU-CONSU_UOM.

  LT_UOMCF = ME->GET_UOMCF( ).

  LR_PSCALE_MGR->GET_PSCALE( exporting IS_PSQTY = LS_PSQTY
                                       IT_UOMCF = LT_UOMCF
                             importing ES_PRICE = LS_PRICE
                                       ES_PRICP = LS_PRICP ).

*** Set new Price
  ME->SET_PRICE( IS_PRICE = LS_PRICE ).
  ME->SET_PRICP( IS_PRICP = LS_PRICP ).

endmethod.
method IS_LIFNR_REQUIRED .

  data:  LS_ATTRI    TYPE /VCXI/VKS_S_ATTRI.

  try.
***   Check Attribute: Vendor Number Required
      LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = 'LIFNR_REQUIRED' ).
      if LS_ATTRI-ATTVA eq ABAP_TRUE.
        move ABAP_TRUE to RF_REQUIRED.
      else.
        move ABAP_FALSE to RF_REQUIRED.
      endif.
    catch /VCXI/CX_CKX .
      move ABAP_FALSE to RF_REQUIRED.
  endtry.

endmethod.
method SET_LIFNR.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_LIFNR ).

  move IF_LIFNR to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_MQTYI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYI ).

  move IS_MQTYI-MQTYI                   to LS_PARAM-ATFLV.
  move IS_MQTYI-MQTYI_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTYI_CHANGED ).
  endif.

endmethod.
method SET_PRICE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRICE ).

  move IS_PRICE-PRICE      to LS_PARAM-ATFLV.
  move IS_PRICE-PRICE_CURR to LS_PARAM-CURKY.
  move IF_SETBY            to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_PRICP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_PRICP ).

  move IS_PRICP-PRICP     to LS_PARAM-ATFLV.
  move IS_PRICP-PRICP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_SCRAP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SCRAP ).

  move IS_SCRAP-SCRAP     to LS_PARAM-ATFLV.
  move IS_SCRAP-SCRAP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCRAP_CHANGED ).
  endif.

endmethod.
method SET_TEXT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TEXT ).

  move IF_TEXT  to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_WERKS_ARBPL.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_WERKS to LS_LEOKY-LEOKY+0(4).
  move IF_ARBPL to LS_LEOKY-LEOKY+4(8).
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ARBPL_CHANGED ).

  endif.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI.

  RS_MQTYI-MQTYI     = IS_QTY-QTY.
  RS_MQTYI-MQTYI_UOM = IS_QTY-QTY_UOM.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO.

  RS_MQTYO-MQTYO     = IS_QTY-QTY.
  RS_MQTYO-MQTYO_UOM = IS_QTY-QTY_UOM.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_CSPLIT.

  data:  LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_CSPLIT_MGR  type ref to ZCL_VCXI_XCSP_PR_CSPLIT_MGR.

***--------------------------------------------------------------------------------------
*** Get Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_CSPLIT_MGR=>C_IPRVT_XCS_CSPLIT_MGR
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.
  if lines( LT_GATE ) gt 1.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.
  read table LT_GATE into LR_GATE index 1.
  move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT_MGR.

***--------------------------------------------------------------------------------------
*** Get ID of active Cost Split
  move LR_PR_CSPLIT_MGR->GET_ICSPA( ) to EF_ICSPA.
  check EF_ICSPA is not initial.

*** Get active Cost Splits
  move LR_PR_CSPLIT_MGR->GET_DCSPL( ) to ES_DCSPL.

*** Get Component Factor
  move LR_PR_CSPLIT_MGR->GET_COMPF( ) to EF_COMPF.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_MQTYI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYI ).
  move LS_PARAM-ATFLV to RS_MQTYI-MQTYI.
  move LS_PARAM-UNIT  to RS_MQTYI-MQTYI_UOM.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_MQTYO.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYO ).
  move LS_PARAM-ATFLV to RS_MQTYO-MQTYO.
  move LS_PARAM-UNIT  to RS_MQTYO-MQTYO_UOM.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~GET_WERKS.

  ME->GET_WERKS_ARBPL( importing EF_WERKS = RF_WERKS ).

endmethod.
method ZIF_VCXI_XCSP_OPERATION~HANDLE_INIT_PR_MFMGR.


  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------
*** Get all Machine Quantity and Setup Waste
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_XCSP_MFMGR=>C_IPRVT_XCS_MFMGR
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC = 0.

    clear: ME->R_PR_MFMGR.
    try.
        move LR_GATE->R_CLSPR ?to ME->R_PR_MFMGR.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_PR_MFMGR.
    endtry.

  endif.

  check ME->R_PR_MFMGR is not bound.
*** Provider &1 is not available for &2.
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
      IF_MSGTY = 'E'
      IF_MSGID = 'ZVCXI_XCS'
      IF_MSGNO = '010'
      IF_MSGV1 = ZIF_VCXI_XCSP_MFMGR=>C_IPRVT_XCS_MFMGR
      IF_MSGV2 = ME->R_GATE->F_ID ).

endmethod.
method ZIF_VCXI_XCSP_OPERATION~SET_MQTYO.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_MQTYO ).

  move IS_MQTYO-MQTYO                   to LS_PARAM-ATFLV.
  move IS_MQTYO-MQTYO_UOM               to LS_PARAM-UNIT.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTYO_CHANGED ).
  endif.

endmethod.
