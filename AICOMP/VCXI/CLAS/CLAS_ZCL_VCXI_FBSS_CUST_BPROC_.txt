
class ZCL_VCXI_FBSS_CUST_BPROC definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  data F_CUOBJ type CUOBJ read-only .
  data F_IBAGT type ZVCXI_FBS_IBAGT read-only .
  data F_TWICK type ZVCXI_FBS_TWICK read-only .
  data F_WIBST type ZVCXI_FBS_WIBST read-only .
  data F_WRK02 type WERKS_D read-only .
  data S_BGHEI type ZVCXI_FBS_S_BGHEI read-only .
  data S_BGWGT type ZVCXI_FBS_S_BGWGT read-only .
  data S_BGWID type ZVCXI_FBS_S_BGWID read-only .
  data S_CMPRK type /VCXI/VKC_S_CMPRK read-only .
  data S_FOBOT type ZVCXI_FBS_S_FOBOT read-only .
  data S_FOTOP type ZVCXI_FBS_S_FOTOP read-only .
  data S_GUBOT type ZVCXI_FBS_S_GUBOT read-only .
  data S_GULEF type ZVCXI_F0S_S_GULEF read-only .
  data S_GURIG type ZVCXI_F0S_S_GURIG read-only .
  data S_GUTOP type ZVCXI_FBS_S_GUTOP read-only .
  data S_HNDDIM type ZVCXI_F0S_S_HNDDIM read-only .
  data S_OLWID type ZVCXI_FBS_S_OLWID read-only .
  data S_WIHDI type ZVCXI_FBS_S_WIHDI read-only .
  data S_WIHSP type ZVCXI_FBS_S_WIHSP read-only .
  data S_WILIP type ZVCXI_FBS_S_WILIP read-only .
  data T_BGICS type ZVCXI_FBSS_TT_BGICS read-only .
  data T_BPINFO type ZVCXI_FBSS_TT_BPINFO read-only .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_BPROC
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_FBSS_CUST_BPROC
    raising
      /VCXI/CX_CKX .
protected section.

  methods LOAD_BY_MM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_FBSS_CUST_BPROC definition
class ZCL_VCXI_FBSS_CUST_BPROC implementation.
  method CONSTRUCTOR.

    data: LS_MARC type MARC.

    try.
        SUPER->CONSTRUCTOR( exporting IF_MATNR = IF_MATNR
                                      IF_WERKS = IF_WERKS
                                      IF_DATE  = IF_DATE ).

***--------------------------------------------------------------------------------------
***     Get Material Plant Data
        call function 'MARC_SINGLE_READ'
          exporting
            MATNR     = ME->F_MATNR
            WERKS     = ME->F_WERKS
          importing
            WMARC     = LS_MARC
          exceptions
            NOT_FOUND = 4
            others    = 5.
        if SY-SUBRC <> 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***     Consider Special Procurement Type
        if LS_MARC-BESKZ eq 'F' and
           LS_MARC-SOBSL is not initial.
          select single WRK02
                 into ME->F_WRK02
                 from T460A
                where WERKS eq LS_MARC-WERKS
                 and  SOBSL eq LS_MARC-SOBSL.
          if ME->F_WRK02 is initial.
            move ME->F_WERKS to ME->F_WRK02.
          endif.
          if SY-SUBRC ne 0.
            /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
          endif.
        else.
          move ME->F_WERKS to ME->F_WRK02.
        endif.

***--------------------------------------------------------------------------------------
***     Get Configuration Info
        call function 'MARC_SINGLE_READ'
          exporting
            MATNR  = ME->F_MATNR
            WERKS  = ME->F_WRK02
          importing
            WMARC  = LS_MARC
          exceptions
            others = 0.

        if LS_MARC-CUOBJ is not initial.
          move LS_MARC-CUOBJ to ME->F_CUOBJ.
          move LS_MARC-STDPD to ME->S_CMPRK-CMATN.
        endif.

      cleanup.
        ME->DO_FREE( ).
    endtry.

  endmethod.
  method GET_INSTANCE_BPROC.

    data:  LS_INSTANCE type YS_INSTANCE.

***--------------------------------------------------------------------------------------
*** Check for buffered instance and ensure correct Class Type
    read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE into LS_INSTANCE
                                                   with key MATNR = IF_MATNR
                                                            WERKS = IF_WERKS
                                                            DATE  = IF_DATE.
*** Wait for OPSDVCPP-139 for improved handling
    break WAIT_FOR_OPSDVCPP-139.

    if SY-SUBRC eq 0.
      try.
          move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
        catch CX_SY_MOVE_CAST_ERROR.
          delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
          clear RR_INSTANCE.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
    if RR_INSTANCE is initial.
      try.
ENHANCEMENT-SECTION GET_INSTANCE_BPROC SPOTS ZVCXI_FBSS_ES_CUST_BPROC .
         create object RR_INSTANCE
           exporting
             IF_MATNR = IF_MATNR
             IF_WERKS = IF_WERKS
             IF_DATE  = IF_DATE.
END-ENHANCEMENT-SECTION.

          RR_INSTANCE->LOAD_BY_MM( ).
        cleanup.
          clear RR_INSTANCE.
      endtry.
    endif.

  endmethod.
  method LOAD_BY_MM.

    data: LR_MMEXT type ref to ZCL_VCXI_FBE_MM_MMEXT.


*** Load MM Extension
    LR_MMEXT ?= ZCL_VCXI_XCE_MM_MMEXT=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = ZCL_VCXI_XCE_MM_MMEXT=>ENCRYPT_GUID( IF_MATNR = ME->F_MATNR
                                                                                                                        IF_WERKS = ME->F_WRK02
                                                                                                                        IF_CNTXT = ZCL_VCXI_FBE_MM_MMEXT=>C_CNTXT_FB ) ).
    check LR_MMEXT is bound.

    ME->F_IBAGT  = LR_MMEXT->S_MMEXT-IBAGT.
    ME->S_BGHEI  = LR_MMEXT->S_MMEXT-S_BGHEI.
    ME->S_BGWID  = LR_MMEXT->S_MMEXT-S_BGWID.
    ME->S_BGWGT  = LR_MMEXT->S_MMEXT-S_BGWGT.
    ME->S_GUBOT  = LR_MMEXT->S_MMEXT-S_GUBOT.
    ME->S_GUTOP  = LR_MMEXT->S_MMEXT-S_GUTOP.
    ME->S_GULEF  = LR_MMEXT->S_MMEXT-S_GULEF.
    ME->S_GURIG  = LR_MMEXT->S_MMEXT-S_GURIG.
    ME->S_FOBOT  = LR_MMEXT->S_MMEXT-S_FOBOT.
    ME->S_FOTOP  = LR_MMEXT->S_MMEXT-S_FOTOP.
    ME->S_OLWID  = LR_MMEXT->S_MMEXT-S_OLWID.
    ME->F_TWICK  = LR_MMEXT->S_MMEXT-TWICK.
    ME->S_WILIP  = LR_MMEXT->S_MMEXT-S_WILIP.
    ME->S_WIHDI  = LR_MMEXT->S_MMEXT-S_WIHDI.
    ME->S_WIHSP  = LR_MMEXT->S_MMEXT-S_WIHSP.
    ME->F_WIBST  = LR_MMEXT->S_MMEXT-WIBST.
    ME->S_HNDDIM = LR_MMEXT->S_MMEXT-S_HNDDIM.

    ME->T_BPINFO = LR_MMEXT->T_BPINFO.
    ME->T_BGICS  = LR_MMEXT->T_BGICS.

  endmethod.
