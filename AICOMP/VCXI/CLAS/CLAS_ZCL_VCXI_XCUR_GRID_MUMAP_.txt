
class ZCL_VCXI_XCUR_GRID_MUMAP definition
  public
  final
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IF_DATEL type ROLLNAME
      !IF_QUAN type LVC_QUAN
      !IF_LOCKED type /VCXI/CKX_LOCKED
      !IS_MURUP type ZVCXI_XCUR_S_MURUP
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods GET_MUMAP
    returning
      value(RT_MUMAP) type ZVCXI_XCUR_TT_MUMAP
    raising
      /VCXI/CX_CKX .
  methods REFRESH_GRID
    raising
      /VCXI/CX_CKX .
protected section.

  data F_QUAN type LVC_QUAN .
  data F_DATEL type ROLLNAME .
  data F_LOCKED type /VCXI/CKX_LOCKED .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_DATA type ref to DATA .
  data R_ELEMDESCR type ref to CL_ABAP_ELEMDESCR .
  data R_GRID type ref to CL_GUI_ALV_GRID .
  data R_STRUCTDESCR type ref to CL_ABAP_STRUCTDESCR .
  data R_TABLEDESCR type ref to CL_ABAP_TABLEDESCR .
  data T_FIELDCAT type LVC_T_FCAT .
  data T_MUMAP type ZVCXI_XCUR_TT_MUMAP .

  methods ADJUST_OPTION
    importing
      !IF_LOW type ANY
      !IF_HIGH type ANY
    changing
      !CF_OPTION type OPTION
    raising
      /VCXI/CX_CKX .
  methods BUILD_FIELDCAT
    raising
      /VCXI/CX_CKX .
  methods CHECK_LOWERCASE_ALLOWED
    returning
      value(RF_OK) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_PATTERN_FOUND
    importing
      !IF_VALUE type ANY
    returning
      value(RF_FOUND) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CLEANUP_MUMAP
    raising
      /VCXI/CX_CKX .
  methods GET_LAYOUT
    returning
      value(RS_LAYOUT) type LVC_S_LAYO
    raising
      /VCXI/CX_CKX .
  methods GET_LINE
    importing
      !IS_DATA type ANY
    exporting
      !EF_OPT_ICON type ICON_D
      !EF_PVRFR type ANY
      !EF_PVRTO type ANY
      !EF_SEL_ICON type ICON_D
      !EF_PVNEW type ANY
      !ET_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_BUTTON_CLICK
    for event BUTTON_CLICK of CL_GUI_ALV_GRID
    importing
      !ES_COL_ID
      !ES_ROW_NO .
  methods HANDLE_DATA_CHANGED
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED
      !E_ONF4
      !E_ONF4_BEFORE
      !E_ONF4_AFTER
      !E_UCOMM .
  methods HANDLE_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods HANDLE_ONF4
    for event ONF4 of CL_GUI_ALV_GRID
    importing
      !E_FIELDNAME
      !E_FIELDVALUE
      !ES_ROW_NO
      !ER_EVENT_DATA
      !ET_BAD_CELLS
      !E_DISPLAY .
  methods HANDLE_UC_MORE
    changing
      !CS_MUMAP type ZVCXI_XCUR_S_MUMAP
    raising
      /VCXI/CX_CKX .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_DATA
    raising
      /VCXI/CX_CKX .
  methods INIT_GRID
    raising
      /VCXI/CX_CKX .
  methods SET_LINE
    importing
      !IF_OPT_ICON type ICON_D optional
      !IF_PVRFR type ANY optional
      !IF_PVRTO type ANY optional
      !IF_SEL_ICON type ICON_D optional
      !IF_PVNEW type ANY optional
      !IF_OPTION type SE16N_OPTION optional
      !IT_STYL type LVC_T_STYL optional
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCUR_GRID_MUMAP definition
class ZCL_VCXI_XCUR_GRID_MUMAP implementation.
  method ADJUST_OPTION.

    case CF_OPTION.
      when SPACE or 'BT' or 'EQ'.
        CF_OPTION = cond #( when ME->CHECK_PATTERN_FOUND( IF_VALUE = IF_LOW ) eq ABAP_TRUE
                             and IF_LOW is not initial and IF_HIGH is     initial then 'CP'
                            when                           IF_HIGH is not initial then 'BT'
                            when IF_LOW is not initial and IF_HIGH is     initial then 'EQ'
                            when                           IF_HIGH is     initial then SPACE ).
      when 'CP' or 'NP'.
        CF_OPTION = cond #( when ME->CHECK_PATTERN_FOUND( IF_VALUE = IF_LOW ) eq ABAP_TRUE
                             and IF_LOW is not initial and IF_HIGH is     initial then CF_OPTION
                            when                           IF_HIGH is not initial then 'BT'
                            when IF_LOW is not initial and IF_HIGH is     initial then 'EQ'
                            when                           IF_HIGH is     initial then SPACE ).
      when others.
        CF_OPTION = cond #( when                           IF_HIGH is     initial then CF_OPTION
                            when                           IF_HIGH is not initial then 'BT' ).
    endcase.

  endmethod.
  method BUILD_FIELDCAT .

    data: LS_DFIES          type DFIES,
          LS_COMPONENTDESCR type ABAP_COMPONENTDESCR.
    data: LT_F4     type LVC_T_F4.
    field-symbols: <S_FCAT> type LVC_S_FCAT.


***--------------------------------------------------------------------------------------
*** Get Standard Field Catalog
    call function 'LVC_FIELDCATALOG_MERGE'
      exporting
        I_STRUCTURE_NAME       = 'ZVCXI_XCUR_S_MUMAP_GRID'
      changing
        CT_FIELDCAT            = ME->T_FIELDCAT
      exceptions
        INCONSISTENT_INTERFACE = 1
        PROGRAM_ERROR          = 2
        others                 = 3.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

***--------------------------------------------------------------------------------------
*** Modify based on Dynamic Table
    loop at ME->R_STRUCTDESCR->GET_COMPONENTS( ) into LS_COMPONENTDESCR.
      check LS_COMPONENTDESCR-TYPE is instance of CL_ABAP_ELEMDESCR.
      LS_DFIES = cast CL_ABAP_ELEMDESCR( LS_COMPONENTDESCR-TYPE )->GET_DDIC_FIELD( ).

      assign ME->T_FIELDCAT[ FIELDNAME = LS_COMPONENTDESCR-NAME ] to <S_FCAT>.
      <S_FCAT>-ROLLNAME   = LS_DFIES-ROLLNAME.
      <S_FCAT>-DATATYPE   = LS_DFIES-DATATYPE.
      <S_FCAT>-DOMNAME    = LS_DFIES-DOMNAME.
      <S_FCAT>-CONVEXIT   = LS_DFIES-CONVEXIT.
      <S_FCAT>-F4AVAILABL = LS_DFIES-F4AVAILABL.
      <S_FCAT>-CHECKTABLE = LS_DFIES-CHECKTABLE.
      <S_FCAT>-REF_FIELD  = LS_DFIES-REFFIELD.
      <S_FCAT>-REF_TABLE  = LS_DFIES-REFTABLE.
      <S_FCAT>-INTTYPE    = LS_DFIES-INTTYPE.
      <S_FCAT>-INTLEN     = LS_DFIES-INTLEN.
      <S_FCAT>-OUTPUTLEN  = LS_DFIES-OUTPUTLEN.
      <S_FCAT>-DECIMALS   = LS_DFIES-DECIMALS.
    endloop.

****--------------------------------------------------------------------------------------
*** Modify Field Catalog
    loop at ME->T_FIELDCAT assigning <S_FCAT>.
      case <S_FCAT>-FIELDNAME.
        when 'PVRFR' or
             'PVRTO' or
             'PVNEW'.
          <S_FCAT>-EDIT      = switch #( ME->F_LOCKED when ABAP_TRUE then ABAP_TRUE ).
          <S_FCAT>-LOWERCASE = ME->CHECK_LOWERCASE_ALLOWED( ).
          <S_FCAT>-QUANTITY  = ME->F_QUAN.

        when 'OPT_ICON'.
          <S_FCAT>-JUST  = 'C'.
          move 'Option'(C01)     to: <S_FCAT>-COLTEXT,
                                     <S_FCAT>-SCRTEXT_L,
                                     <S_FCAT>-SCRTEXT_M,
                                     <S_FCAT>-SCRTEXT_S.
        when 'SEL_ICON'.
          <S_FCAT>-JUST  = 'C'.
          <S_FCAT>-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON.
          move 'More'(C02)       to: <S_FCAT>-COLTEXT,
                                     <S_FCAT>-SCRTEXT_L,
                                     <S_FCAT>-SCRTEXT_M,
                                     <S_FCAT>-SCRTEXT_S.
      endcase.
    endloop.

***------------------------------------------------------------------
    loop at ME->T_FIELDCAT assigning <S_FCAT>.
***   Add to Register Table
      insert value #( FIELDNAME  = <S_FCAT>-FIELDNAME
                      REGISTER   = 'X'
                      CHNGEAFTER = 'X' ) into table LT_F4.
    endloop.

    ME->R_GRID->REGISTER_F4_FOR_FIELDS( IT_F4 = LT_F4 ).

  endmethod.
  method CHECK_LOWERCASE_ALLOWED.

    data: LS_DD04L type DD04L,
          LS_DD01V type DD01V.


*** Get Data Element Info
    call function 'DD_DTEL_GET'
      exporting
        ROLL_NAME  = ME->F_DATEL
      importing
        DD04L_WA_A = LS_DD04L
      exceptions
        others     = 99.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    RF_OK = LS_DD04L-LOWERCASE.

  endmethod.
  method CHECK_PATTERN_FOUND.

    data: LF_TYPE type CHAR1.


*** Only check char-based values
    describe field IF_VALUE type LF_TYPE.
    check LF_TYPE eq 'C' or   "Char
          LF_TYPE eq 'N' or   "n
          LF_TYPE eq 'g'.     "Stiring

*** Check that Pattern is found (value containing '*')
    if IF_VALUE cs '*'.
      RF_FOUND = ABAP_TRUE.
    endif.

  endmethod.
  method CLEANUP_MUMAP.

    data: LF_MUMAP_TABIX type SY-TABIX.
    data: LS_MUMAP type ZVCXI_XCUR_S_MUMAP.
    field-symbols: <I_RANGE_FROM> type standard table,
                   <S_RANGE_FROM> type ANY,
                   <F_VALUE_TO>   type ANY,
                   <F_OPTION>     type ANY,
                   <F_LOW>        type ANY,
                   <F_HIGH>       type ANY.


*** Delete mapping where both Range To is initial and Value to is initial
    loop at ME->T_MUMAP into LS_MUMAP.
      LF_MUMAP_TABIX = SY-TABIX.

      assign LS_MUMAP-R_RANGE_FROM->* to <I_RANGE_FROM>.
      assign LS_MUMAP-R_VALUE_TO->*   to <F_VALUE_TO>.

      loop at <I_RANGE_FROM> assigning <S_RANGE_FROM>.
        assign component 'OPTION' of structure <S_RANGE_FROM> to <F_OPTION>.
        assign component 'LOW'    of structure <S_RANGE_FROM> to <F_LOW>.
        assign component 'HIGH'   of structure <S_RANGE_FROM> to <F_HIGH>.
        if <F_OPTION> is initial and
           <F_LOW>    is initial and
           <F_HIGH>   is initial.
          delete <I_RANGE_FROM> index SY-TABIX.
        endif.
      endloop.

      if <I_RANGE_FROM> is initial and
         <F_VALUE_TO>   is initial.
        delete ME->T_MUMAP index LF_MUMAP_TABIX.
      endif.

    endloop.

  endmethod.
  method CONSTRUCTOR.

    data: LT_COMPONENT type ABAP_COMPONENT_TAB.
    data: LR_TABLEDESCR type ref to CL_ABAP_TABLEDESCR.


    ME->F_DATEL  = IF_DATEL.
    ME->F_QUAN   = IF_QUAN.
    ME->F_LOCKED = IF_LOCKED.
    ME->T_MUMAP  = IS_MURUP-T_MUMAP.

***--------------------------------------------------------------------------------------
*** Get Information of Date Element
    ZCL_VCXI_XCUC_MUCEL=>GET_DATEL_INFO( exporting IF_DATEL      = ME->F_DATEL
                                         importing ER_ELEMDESCR  = ME->R_ELEMDESCR
                                                   ER_TABLEDESCR = ME->R_TABLEDESCR ).


***--------------------------------------------------------------------------------------
*** Get Components of Dynamic Table for Runtime Type Services
    LT_COMPONENT = value #( ( NAME = 'OPT_ICON'   TYPE = cast #( CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( 'ICON_D' ) ) )
                            ( NAME = 'PVRFR'      TYPE = cast #( ME->R_ELEMDESCR ) )
                            ( NAME = 'PVRTO'      TYPE = cast #( ME->R_ELEMDESCR ) )
                            ( NAME = 'SEL_ICON'   TYPE = cast #( CL_ABAP_ELEMDESCR=>DESCRIBE_BY_NAME( 'ICON_D' ) ) )
                            ( NAME = 'PVNEW'      TYPE = cast #( ME->R_ELEMDESCR ) )
                            ( NAME = 'T_STYL'     TYPE = cast #( CL_ABAP_TYPEDESCR=>DESCRIBE_BY_NAME( 'LVC_T_STYL' ) ) )
                          ).

***--------------------------------------------------------------------------------------
*** Create Structure Definition
    ME->R_STRUCTDESCR ?= CL_ABAP_STRUCTDESCR=>CREATE( LT_COMPONENT ).

**** Create Table Type and Data Reference to Dynamic Table
    LR_TABLEDESCR ?= CL_ABAP_TABLEDESCR=>CREATE( ME->R_STRUCTDESCR ).
    create data ME->R_DATA type handle LR_TABLEDESCR.

  endmethod.
method DO_FREE .

*** Check for Changes
  if ME->R_GRID is bound.
    ME->R_GRID->CHECK_CHANGED_DATA( ).
  endif.

  if ME->R_GRID is bound.
    ME->R_GRID->FREE( exceptions
                        CNTL_ERROR        = 1
                        CNTL_SYSTEM_ERROR = 2
                        others            = 3 ).
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_GRID.
  endif.

  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

endmethod.
  method GET_LAYOUT.

    RS_LAYOUT-CWIDTH_OPT = 'X'.
    RS_LAYOUT-STYLEFNAME = 'T_STYL'.

  endmethod.
  method GET_LINE.

    field-symbols: <S_DATA>     type ANY,
                   <F_OPT_ICON> type ICON_D,
                   <F_PVRFR>    type ANY,
                   <F_PVRTO>    type ANY,
                   <F_SEL_ICON> type ICON_D,
                   <F_PVNEW>    type ANY,
                   <T_STYL>     type LVC_T_STYL.


*** Read Data
    if EF_OPT_ICON is requested.
      assign component 'OPT_ICON' of structure IS_DATA to <F_OPT_ICON>.
      EF_OPT_ICON = <F_OPT_ICON>.
    endif.

    if EF_PVRFR is requested.
      assign component 'PVRFR' of structure IS_DATA to <F_PVRFR>.
      EF_PVRFR = <F_PVRFR>.
    endif.

    if EF_PVRTO is requested.
      assign component 'PVRTO' of structure IS_DATA to <F_PVRTO>.
      EF_PVRTO = <F_PVRTO>.
    endif.

    if EF_SEL_ICON is requested.
      assign component 'SEL_ICON' of structure IS_DATA to <F_SEL_ICON>.
      EF_SEL_ICON = <F_SEL_ICON>.
    endif.

    if EF_PVNEW is requested.
      assign component 'PVNEW' of structure IS_DATA to <F_PVNEW>.
      EF_PVNEW = <F_PVNEW>.
    endif.

    if ET_STYL is requested.
      assign component 'T_STYL' of structure <S_DATA> to <T_STYL>.
      ET_STYL = <T_STYL>.
    endif.


  endmethod.
  method GET_MUMAP.

    if ME->R_GRID is bound.
      ME->R_GRID->CHECK_CHANGED_DATA( ).
    endif.

    RT_MUMAP = ME->T_MUMAP.

  endmethod.
  method HANDLE_BUTTON_CLICK.

    field-symbols: <S_MUMAP> type ZVCXI_XCUR_S_MUMAP.


    try.
        if LINE_EXISTS( ME->T_MUMAP[ ES_ROW_NO-ROW_ID ] ).
***       Use existing Line
          assign ME->T_MUMAP[ ES_ROW_NO-ROW_ID ] to <S_MUMAP>.
        else.
***       Add new Line with new Data References
          append initial line to ME->T_MUMAP assigning <S_MUMAP>.
          create data <S_MUMAP>-R_RANGE_FROM type handle ME->R_TABLEDESCR.
          create data <S_MUMAP>-R_VALUE_TO   type handle ME->R_ELEMDESCR.
        endif.

***     Handle User Commands
        case ES_COL_ID-FIELDNAME.
          when 'SEL_ICON'.
            ME->HANDLE_UC_MORE( changing CS_MUMAP = <S_MUMAP> ).
        endcase.

***     Clean-up Mapping Table
        ME->CLEANUP_MUMAP( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
method HANDLE_DATA_CHANGED.

endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    field-symbols: <T_DATA>       type standard table,
                   <S_DATA>       type ANY,
                   <S_MUMAP>      type ZVCXI_XCUR_S_MUMAP,
                   <I_RANGE_FROM> type standard table,
                   <F_SIGN>       type ANY,
                   <F_OPTION>     type ANY,
                   <F_LOW>        type ANY,
                   <F_HIGH>       type ANY,
                   <F_VALUE_TO>   type ANY.


    check E_MODIFIED eq ABAP_TRUE.

    try.

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

***     Process all updated lines
        loop at <T_DATA> assigning <S_DATA>.
          check LINE_EXISTS( ET_GOOD_CELLS[ ROW_ID = SY-TABIX ] ).

          read table ME->T_MUMAP index SY-TABIX assigning <S_MUMAP>.
          if SY-SUBRC ne 0.
***         Add new Line with new Data References
            append initial line to ME->T_MUMAP assigning <S_MUMAP>.
            create data <S_MUMAP>-R_RANGE_FROM type handle ME->R_TABLEDESCR.
            create data <S_MUMAP>-R_VALUE_TO type handle ME->R_ELEMDESCR.
          endif.

***       Get Range From
          assign <S_MUMAP>-R_RANGE_FROM->* to <I_RANGE_FROM>.

          if <I_RANGE_FROM> is initial.
            append initial line to <I_RANGE_FROM>.
          endif.
          assign component 'LOW'    of structure <I_RANGE_FROM>[ 1 ] to <F_LOW>.
          assign component 'HIGH'   of structure <I_RANGE_FROM>[ 1 ] to <F_HIGH>.
          assign component 'OPTION' of structure <I_RANGE_FROM>[ 1 ] to <F_OPTION>.
          assign component 'SIGN'   of structure <I_RANGE_FROM>[ 1 ] to <F_SIGN>.

          ME->GET_LINE( exporting IS_DATA  = <S_DATA>
                        importing EF_PVRFR = <F_LOW>
                                  EF_PVRTO = <F_HIGH> ).
          ME->ADJUST_OPTION( exporting IF_LOW   = <F_LOW>
                                       IF_HIGH  = <F_HIGH>
                             changing CF_OPTION = <F_OPTION> ).
          <F_SIGN> = cond #( when <F_SIGN> is initial then 'I'
                             else <F_SIGN> ).
***       Get Value To
          assign <S_MUMAP>-R_VALUE_TO->*   to <F_VALUE_TO>.
          ME->GET_LINE( exporting IS_DATA  = <S_DATA>
                        importing EF_PVNEW = <F_VALUE_TO> ).

        endloop.

***     Clean-up Mapping Table
        ME->CLEANUP_MUMAP( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_ONF4.

    data: LF_SUBRC type SYSUBRC.
    data: LS_SHLP type SHLP_DESCR_T.
    data: LT_RETVAL type table of DDSHRETVAL.
    field-symbols: <T_MODI> type LVC_T_MODI.


    try.
***--------------------------------------------------------------------------------------
***     Get Search Help
        call function 'F4IF_DETERMINE_SEARCHHELP'
          exporting
            TABNAME           = ME->F_DATEL
            FIELDNAME         = SPACE
          importing
            SHLP              = LS_SHLP
          exceptions
            FIELD_NOT_FOUND   = 1
            NO_HELP_FOR_FIELD = 2
            INCONSISTENT_HELP = 3
            others            = 4.
        check SY-SUBRC eq 0.

***     Mark as handled
        ER_EVENT_DATA->M_EVENT_HANDLED = ABAP_TRUE.

***     Call Search Help
        call function 'F4IF_START_VALUE_REQUEST'
          exporting
            SHLP          = LS_SHLP
            DISPONLY      = E_DISPLAY
          importing
            RC            = LF_SUBRC
          tables
            RETURN_VALUES = LT_RETVAL.
        check LF_SUBRC eq 0 and
              LT_RETVAL is not initial.

***--------------------------------------------------------------------------------------
***     Return Result
        assign ER_EVENT_DATA->M_DATA->* to <T_MODI>.
        append value #( ROW_ID    = ES_ROW_NO-ROW_ID
                        FIELDNAME = E_FIELDNAME
                        VALUE     = LT_RETVAL[ 1 ]-FIELDVAL
                      ) to <T_MODI>.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method HANDLE_UC_MORE.

    data: LF_HELP_FIELD type RSSCR_DBFI,
          LF_DISPLAY    type ABAP_BOOL.
    data: LS_SHLP type SHLP_DESCR_T.
    data: LI_TEXT type range of TEXT128.
    field-symbols: <I_RANGE_FROM>   type standard table,
                   <I_RANGE_DIALOG> type standard table.


    check ME->R_ELEMDESCR is bound.

*** String in full length is not supported by "More" Popup
    if ME->R_ELEMDESCR->TYPE_KIND ne CL_ABAP_ELEMDESCR=>TYPEKIND_STRING.
      data(LR_RANGE_DIALOG) = CS_MUMAP-R_RANGE_FROM.
    else.
      get reference of LI_TEXT into LR_RANGE_DIALOG.
    endif.

*** Get Range From
    assign CS_MUMAP-R_RANGE_FROM->* to <I_RANGE_FROM>.
    assign LR_RANGE_DIALOG->*       to <I_RANGE_DIALOG>.

    <I_RANGE_DIALOG> = corresponding #( <I_RANGE_FROM> ).

*** Get Search Help
    call function 'F4IF_DETERMINE_SEARCHHELP'
      exporting
        TABNAME           = ME->F_DATEL
        FIELDNAME         = SPACE
      importing
        SHLP              = LS_SHLP
      exceptions
        FIELD_NOT_FOUND   = 1
        NO_HELP_FOR_FIELD = 2
        INCONSISTENT_HELP = 3
        others            = 4.
    if SY-SUBRC         ne 0    or
       LS_SHLP-SHLPTYPE eq 'FV'.
      move LS_SHLP-SHLPNAME to LF_HELP_FIELD.
      clear LS_SHLP.
    endif.

*** Display Mode
    LF_DISPLAY = switch #( ME->F_LOCKED when ABAP_TRUE then ABAP_FALSE
                                                       else ABAP_TRUE ).

*** Call Select Options
    call function 'COMPLEX_SELECTIONS_DIALOG'
      exporting
        TITLE             = 'Select Values'(S01)
        HELP_FIELD        = LF_HELP_FIELD
        SEARCH_HELP       = LS_SHLP-SHLPNAME
        JUST_DISPLAY      = LF_DISPLAY
        LOWER_CASE        = ME->R_ELEMDESCR->GET_DDIC_FIELD( )-LOWERCASE
      tables
        RANGE             = <I_RANGE_DIALOG>
      exceptions
        NO_RANGE_TAB      = 1
        CANCELLED         = 2
        INTERNAL_ERROR    = 3
        INVALID_FIELDNAME = 4
        others            = 5.
    if SY-SUBRC ne 0 and
       SY-SUBRC ne 2.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Fill internal Range by Dialog
    <I_RANGE_FROM> = corresponding #( <I_RANGE_DIALOG> ).

  endmethod.
method INIT_CONTAINER .

  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = '0100CC_MUMAP'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
  method INIT_DATA.

    data: LS_MUMAP type ZVCXI_XCUR_S_MUMAP.
    field-symbols: <T_DATA>       type standard table,
                   <S_DATA>       type ANY,
                   <I_RANGE_FROM> type standard table,
                   <F_SIGN>       type ANY,
                   <F_OPTION>     type ANY,
                   <F_LOW>        type ANY,
                   <F_HIGH>       type ANY,
                   <F_VALUE_TO>   type ANY.


*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.
    free <T_DATA>.

***--------------------------------------------------------------------------------------
    loop at ME->T_MUMAP into LS_MUMAP.
      append initial line to <T_DATA> assigning <S_DATA>.

***   Get Range From
      if LS_MUMAP-R_RANGE_FROM is bound.
        assign LS_MUMAP-R_RANGE_FROM->* to <I_RANGE_FROM>.

        if <I_RANGE_FROM> is initial.
***       Empty Range
          ME->SET_LINE( exporting IF_OPT_ICON = ICON_SELECTION
                                  IF_SEL_ICON = ICON_ENTER_MORE
                        changing  CS_DATA     = <S_DATA> ).
        else.
***       Use first line of Range
          assign component 'SIGN'   of structure <I_RANGE_FROM>[ 1 ] to <F_SIGN>.
          assign component 'OPTION' of structure <I_RANGE_FROM>[ 1 ] to <F_OPTION>.
          assign component 'LOW'    of structure <I_RANGE_FROM>[ 1 ] to <F_LOW>.
          assign component 'HIGH'   of structure <I_RANGE_FROM>[ 1 ] to <F_HIGH>.

          ME->SET_LINE( exporting IF_OPT_ICON = ZCL_VCXI_XCUR_SERVICE=>GET_SEL_ICON( IF_SIGN      = <F_SIGN>
                                                                                     IF_OPTION    = <F_OPTION> )
                                  IF_PVRFR    = <F_LOW>
                                  IF_PVRTO    = <F_HIGH>
                                  IF_SEL_ICON = switch #( LINES( <I_RANGE_FROM> ) when 1 then ICON_ENTER_MORE
                                                                                  else        ICON_DISPLAY_MORE )
                        changing  CS_DATA     = <S_DATA> ).
        endif.
      endif.

***   Get Value To
      if LS_MUMAP-R_VALUE_TO is bound.
        assign LS_MUMAP-R_VALUE_TO->*   to <F_VALUE_TO>.
        ME->SET_LINE( exporting IF_PVNEW = <F_VALUE_TO>
                      changing  CS_DATA  = <S_DATA> ).
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Add initial lines
    do 10 times.
      append initial line to <T_DATA> assigning <S_DATA>.
      ME->SET_LINE( exporting IF_OPT_ICON = ICON_SELECTION
                              IF_SEL_ICON = ICON_ENTER_MORE
                    changing  CS_DATA     = <S_DATA> ).
    enddo.

  endmethod.
method INIT_GRID .

  if ME->R_GRID is not bound.
    create object ME->R_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Set Enter as Event
    ME->R_GRID->REGISTER_EDIT_EVENT( I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER ).

*** Set Event Hanlder for Input
    set handler ME->HANDLE_DATA_CHANGED_FINISHED for ME->R_GRID.
    set handler ME->HANDLE_DATA_CHANGED          for ME->R_GRID.

*** Button in ALV Column
    set handler ME->HANDLE_BUTTON_CLICK  for ME->R_GRID.

*** F4 Request
    set handler ME->HANDLE_ONF4  for ME->R_GRID.

*** Build Field Catalog
    ME->BUILD_FIELDCAT( ).

  endif.

endmethod.
  method REFRESH_GRID .

    field-symbols: <T_DATA>  type standard table.


*** Initialized Data
    ME->INIT_DATA( ).

*** Initial Display
    if ME->R_GRID is not bound.
      ME->INIT_CONTAINER( ).
      ME->INIT_GRID( ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      ME->R_GRID->SET_TABLE_FOR_FIRST_DISPLAY( exporting
                                                 IT_TOOLBAR_EXCLUDING          = value #( ( CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL ) )
                                                 IS_LAYOUT                     = ME->GET_LAYOUT( )
                                               changing
                                                 IT_FIELDCATALOG               = ME->T_FIELDCAT
                                                 IT_OUTTAB                     = <T_DATA>
                                               exceptions
                                                 INVALID_PARAMETER_COMBINATION = 1
                                                 PROGRAM_ERROR                 = 2
                                                 TOO_MANY_LINES                = 3
                                                 others                        = 4 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

*** Update of Data
    else.
      ME->R_GRID->SET_FRONTEND_FIELDCATALOG( IT_FIELDCATALOG = ME->T_FIELDCAT ).
      ME->R_GRID->SET_FRONTEND_LAYOUT( IS_LAYOUT = ME->GET_LAYOUT( ) ).
      ME->R_GRID->REFRESH_TABLE_DISPLAY( exceptions FINISHED = 1 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endif.

  endmethod.
  method SET_LINE.

    data:          LT_STYL      type table of LVC_S_STYL.
    field-symbols: <F_OPT_ICON> type ICON_D,
                   <F_PVRFR>    type ANY,
                   <F_PVRTO>    type ANY,
                   <F_SEL_ICON> type ICON_D,
                   <F_PVNEW>    type ANY,
                   <S_STYL>     type LVC_S_STYL,
                   <T_STYL>     type LVC_T_STYL.


*** Fill Data
    if IF_OPT_ICON is supplied.
      assign component 'OPT_ICON' of structure CS_DATA to <F_OPT_ICON>.
      <F_OPT_ICON> = IF_OPT_ICON.
    endif.

    if IF_PVRFR is supplied.
      assign component 'PVRFR' of structure CS_DATA to <F_PVRFR>.
      <F_PVRFR> = IF_PVRFR.
    endif.

    if IF_PVRTO is supplied.
      assign component 'PVRTO' of structure CS_DATA to <F_PVRTO>.
      <F_PVRTO> = IF_PVRTO.
    endif.

    if IF_SEL_ICON is supplied.
      assign component 'SEL_ICON' of structure CS_DATA to <F_SEL_ICON>.
      <F_SEL_ICON> = IF_SEL_ICON.
    endif.

    if IF_PVNEW is supplied.
      assign component 'PVNEW' of structure CS_DATA to <F_PVNEW>.
      <F_PVNEW> = IF_PVNEW.
    endif.

    if IT_STYL is supplied.
      if <T_STYL> is not assigned.
        assign component 'T_STYL' of structure CS_DATA to <T_STYL>.
      endif.
      append lines of IT_STYL to <T_STYL>.
    endif.

  endmethod.
