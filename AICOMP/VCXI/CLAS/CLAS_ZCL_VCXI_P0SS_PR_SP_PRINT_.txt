
class ZCL_VCXI_P0SS_PR_SP_PRINT definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IEVNT_O_NOCOL_CHANGED type /VCXI/VKSC_IEVNT value 'NOCOL_CHANGED'. "#EC NOTEXT
  constants C_IPRVT_P0_SP_PRINT type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_SP_PRINT'. "#EC NOTEXT
  constants C_PARID_FPRFS type /VCXI/VKS_PARID value 'ZVCXI_P0_FPRFS'. "#EC NOTEXT
  constants C_PARID_NOCOL type /VCXI/VKS_PARID value 'ZVCXI_P0_NOCOL'. "#EC NOTEXT
  constants C_PARID_PRCAN type /VCXI/VKS_PARID value 'ZVCXI_P0_PRCAN'. "#EC NOTEXT
  constants C_PARID_PRSID type /VCXI/VKS_PARID value 'ZVCXI_P0_PRSID'. "#EC NOTEXT
  constants C_PARID_PRTYP type /VCXI/VKS_PARID value 'ZVCXI_P0_PRTYP'. "#EC NOTEXT
  constants C_PRSID_I type ZVCXI_P0S_PRSID value 'I'. "#EC NOTEXT
  constants C_PRSID_O type ZVCXI_P0S_PRSID value 'O'. "#EC NOTEXT
  constants C_ATTID_CALCULATED type /VCXI/VKS_ATTID value 'CALCULATED'. "#EC NOTEXT

  methods LOAD_PRDET_BY_CUST
    importing
      !IR_CUST_SFG type ref to ZCL_VCXI_P0SS_CUST_SFG
    raising
      /VCXI/CX_CKX .
  methods INIT_CALCULATED
    raising
      /VCXI/CX_CKX .
  methods GET_MARK
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_SP_INK
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods IS_MARK_ACTIVE
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_TOTAL_SP_INK_COVRG
    importing
      !IT_GATE_MARK type /VCXI/VKSR_TT_GATE
      !IR_GATE_SP_INK type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RS_COVRG) type ZVCXI_P0S_S_COVRG
    raising
      /VCXI/CX_CKX .
  methods GET_INK_NO
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_INK_NO) type CHAR02
    raising
      /VCXI/CX_CKX .
  methods CHECK_MARK_INK
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_FPRFS
    returning
      value(RF_FPRFS) type ZVCXI_P0SS_FPRFS
    raising
      /VCXI/CX_CKX .
  methods GET_NOCOL
    returning
      value(RF_NOCOL) type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods GET_PRCAN
    returning
      value(RF_PRCAN) type ZVCXI_P0SS_PRCAN
    raising
      /VCXI/CX_CKX .
  methods GET_PRSID
    returning
      value(RF_PRSID) type ZVCXI_P0S_PRSID
    raising
      /VCXI/CX_CKX .
  methods GET_PRSID_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYP
    returning
      value(RF_PRTYP) type ZVCXI_P0S_PRTYP
    raising
      /VCXI/CX_CKX .
  methods GET_PRTYP_DESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods IS_CALCULATED
    returning
      value(RF_CALCULATED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods SET_FPRFS
    importing
      !IF_FPRFS type ZVCXI_P0SS_FPRFS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOCOL
    importing
      !IF_NOCOL type ZVCXI_P0S_NOCOL
    raising
      /VCXI/CX_CKX .
  methods SET_PRCAN
    importing
      !IF_PRCAN type ZVCXI_P0SS_PRCAN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRSID
    importing
      !IF_PRSID type ZVCXI_P0S_PRSID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRTYP
    importing
      !IF_PRTYP type ZVCXI_P0S_PRTYP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_REQ_PRINT_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_PRINT_DATA_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_PRINT_DATA_CHANGED type /VCXI/VKSC_IEVNT value 'PRINT_DATA_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PRTYP_CHANGED type /VCXI/VKSC_IEVNT value 'PRTYP_CHANGED'. "#EC NOTEXT

  methods CHECK_NOCOL
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRSID
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRTYP
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_SP_PRINT definition
class ZCL_VCXI_P0SS_PR_SP_PRINT implementation.
method CHECK_MARK_INK.

  data:  LF_INDEX           type        I,
         LF_ACONO           type        ZVCXI_P0SS_ACONO.
  data:  LS_COVRG           type        ZVCXI_P0S_S_COVRG.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_INK       type ref to ZCL_VCXI_P0SS_PR_SP_INK,
         LR_PR_MARK         type ref to ZCL_VCXI_P0SS_PR_MARK.

*** Set initial return value negative
  move '1' to RF_RETURN.

*** Try to get the correct reference
  try.
      if IR_GATE          is bound and
         IR_GATE->R_CLSPR is bound.
        move IR_GATE->R_CLSPR ?to LR_PR_SP_INK.
***--------------------------------------------------------------------------------------
***     Check if Ink Coverage is empty but Marking Coverage is maintained
***     If set up of Ink ref was successful, get Marking data and compare
        if LR_PR_SP_INK is bound.
          LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                           IF_INUSE = ABAP_TRUE ).

          read table LT_GATE into LR_GATE with table key TABLE_LINE = IR_GATE.
          move SY-TABIX to LF_INDEX.

***       Get Marking Data
          LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                           IF_INUSE = ABAP_TRUE ).

          loop at LT_GATE into LR_GATE.
            try.
                if LR_GATE          is bound and
                   LR_GATE->R_CLSPR is bound.
                  move LR_GATE->R_CLSPR ?to LR_PR_MARK.
                endif.
              catch CX_SY_MOVE_CAST_ERROR.
                clear: LR_PR_MARK.
            endtry.

            check LR_PR_MARK is bound.
            LR_PR_MARK->GET_ACONO( importing EF_ACONO = LF_ACONO ).
            check LF_ACONO eq LF_INDEX.

            LR_PR_MARK->GET_COVRG( importing ES_COVRG = LS_COVRG ).
            check LS_COVRG-COVRG ge '1'.
            move '0' to RF_RETURN.

          endloop.
          clear: LR_PR_MARK, LR_PR_SP_INK.
        endif.
        exit.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_SP_INK.
  endtry.



  try.
      if IR_GATE          is bound and
         IR_GATE->R_CLSPR is bound.
        move IR_GATE->R_CLSPR ?to LR_PR_MARK.

***--------------------------------------------------------------------------------------
***     Check if maintained Ink Reference of Marking exists
        if LR_PR_MARK is bound.
          LR_PR_MARK->GET_ACONO( importing EF_ACONO = LF_ACONO ).
          if LF_ACONO is not initial.
            LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                             IF_INUSE = ABAP_TRUE ).

            read table LT_GATE into LR_GATE index LF_ACONO.
            check SY-SUBRC eq 0.
            move '0' to RF_RETURN.
          endif.
        endif.
      endif.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_PR_MARK.
  endtry.

endmethod.
method CHECK_NOCOL.

*** 0 = Number of Colors is maintained.
*** 1 = Number of Colors is not maintained.

  data:  LF_NOCOL      type        ZVCXI_P0S_NOCOL.

*** Start Positiv
  RF_RETURN = 0.

  LF_NOCOL = ME->GET_NOCOL( ).

  check LF_NOCOL is initial.
  move 1 to RF_RETURN.

endmethod.
method CHECK_PRSID.

*** 0 = Print Side is maintained and valid.
*** 1 = Print Side is not maintained.
*** 2 = Print Side is not valid.

  data:  LF_PRSID type ZVCXI_P0S_PRSID.

  LF_PRSID = ME->GET_PRSID( ).

  if LF_PRSID is initial.
    move 1 to RF_RETURN.
  else.
    if LF_PRSID ne C_PRSID_I and
       LF_PRSID ne C_PRSID_O.
      move 2 to RF_RETURN.
    else.
      move 0 to RF_RETURN.
    endif.
  endif.

endmethod.
method CHECK_PRTYP.

*** 0 = Print Type is maintained and valid.
*** 1 = Print Type is not maintained.
*** 2 = Print Type is not valid.

  data:  LF_PRTYP type ZVCXI_P0S_PRTYP.

  LF_PRTYP = ME->GET_PRTYP( ).

  if LF_PRTYP is initial.
    move 1 to RF_RETURN.
  else.
    if ZCL_VCXI_P0SS_CUST_PRINT=>CHECK_PRTYP_EXIST( IF_PRTYP = LF_PRTYP ) eq ABAP_TRUE.
      move 0 to RF_RETURN.
    else.
      move 2 to RF_RETURN.
    endif.
  endif.

endmethod.
method GET_DESCR.

  data:  LF_DESCR type /VCXI/CKX_DESCR,
         LF_PRSID type ZVCXI_P0S_PRSID.

  RF_DESCR = SUPER->GET_DESCR( ).

  LF_DESCR = ME->GET_PRSID_DESCR( ).
  if LF_DESCR is not initial.
    concatenate RF_DESCR '-' LF_DESCR into RF_DESCR separated by SPACE.
  else.
    LF_PRSID = ME->GET_PRSID( ).
    if LF_PRSID is not initial.
      concatenate RF_DESCR '-' LF_PRSID into RF_DESCR separated by SPACE.
    endif.
  endif.

endmethod.
method GET_FPRFS.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPRFS ).
  move LS_PARAM-ATWRT to RF_FPRFS.

endmethod.
  method GET_INK_NO.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.

  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE with key TABLE_LINE = IR_GATE transporting no fields.
  move SY-TABIX to RF_INK_NO.

endmethod.
method GET_MARK.

  RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                   IF_INUSE = ABAP_TRUE ).

endmethod.
method GET_NOCOL.

  data:  LT_GATE   type /VCXI/VKSR_TT_GATE.

*** Get all Inks
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                   IF_INUSE = ABAP_TRUE ).

  move LINES( LT_GATE ) to RF_NOCOL.

endmethod.
method GET_PRCAN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRCAN ).
  move LS_PARAM-ATWRT to RF_PRCAN.

endmethod.
method GET_PRSID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSID ).
  move LS_PARAM-ATWRT to RF_PRSID.

endmethod.
method GET_PRSID_DESCR.

  data:  LF_PRSID type ZVCXI_P0S_PRSID.

  move ME->GET_PRSID( ) to LF_PRSID.

*** Get Buffered Description
  move ZCL_VCXI_P0SS_CUST_PRINT=>GET_PRSID_DESCR( IF_PRSID = LF_PRSID ) to RF_DESCR.

endmethod.
method GET_PRTYP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYP ).
  move LS_PARAM-ATWRT to RF_PRTYP.

endmethod.
method GET_PRTYP_DESCR.

  data:  LF_PRTYP type  ZVCXI_P0S_PRTYP.

  LF_PRTYP = ME->GET_PRTYP( ).
  RF_DESCR = ZCL_VCXI_P0SS_CUST_PRINT=>GET_PRTYP_DESCR( IF_PRTYP = LF_PRTYP ).

endmethod.
method GET_SP_INK.

  RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                   IF_INUSE = ABAP_TRUE ).

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Print Side
  case ME->CHECK_PRSID( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Print Type
  case ME->CHECK_PRTYP( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

*** Check Number of Colors
  case ME->CHECK_NOCOL( ).
    when 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    when others.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endcase.

endmethod.
method GET_STATUS_MSG.

***----------------------------------------------------------------------------
*** Super
  SUPER->GET_STATUS_MSG( IR_MESSAGE =  IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Print Side
  case ME->CHECK_PRSID( ).
*** Print Side is maintained and valid.
    when 0.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '301' ).
*** Print Side is not maintained.
    when 1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '302' ).
*** Print Side is not valid.
    when 2.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '303' ).
  endcase.

***----------------------------------------------------------------------------
*** Check Print Type
  case ME->CHECK_PRTYP( ).
*** Print Type is maintained and valid.
    when 0.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '307' ).
*** Print Type is not maintained.
    when 1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '308' ).
*** Print Type is not valid.
    when 2.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '309' ).
  endcase.

***----------------------------------------------------------------------------
*** Check Number of Colors
  case ME->CHECK_NOCOL( ).
*** Number of Colors is maintained.
    when 0.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '313' ).
*** Number of Colors is not maintained.
    when 1.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '314' ).
  endcase.

endmethod.
method GET_TOTAL_SP_INK_COVRG.

  data:  LF_INDEX           type        I,
         LF_ACONO           type        ZVCXI_P0SS_ACONO.
  data:  LS_COVRG           type        ZVCXI_P0S_S_COVRG.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_INK       type ref to ZCL_VCXI_P0SS_PR_SP_INK,
         LR_PR_MARK         type ref to ZCL_VCXI_P0SS_PR_MARK.

  try.
      check IR_GATE_SP_INK          is bound and
            IR_GATE_SP_INK->R_CLSPR is bound.
***--------------------------------------------------------------------------------------
***   Get Ink Number
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                       IF_INUSE = ABAP_TRUE ).

      read table LT_GATE with table key TABLE_LINE = IR_GATE_SP_INK transporting no fields.
      check SY-SUBRC = 0.
      move SY-TABIX to LF_INDEX.

***--------------------------------------------------------------------------------------
***   Get Coverage of Ink and InkNumber
      move IR_GATE_SP_INK->R_CLSPR ?to LR_PR_SP_INK.
      check LR_PR_SP_INK is bound.

      LR_PR_SP_INK->GET_COVRG( importing ES_COVRG = RS_COVRG ).

***   Get Assigned Marking Coverages
      loop at IT_GATE_MARK into LR_GATE.
        try.
            if LR_GATE          is bound and
               LR_GATE->R_CLSPR is bound.
              move LR_GATE->R_CLSPR ?to LR_PR_MARK.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.

        check LR_PR_MARK is bound.
        LR_PR_MARK->GET_ACONO( importing EF_ACONO = LF_ACONO ).
        check LF_ACONO eq LF_INDEX.

        LR_PR_MARK->GET_COVRG( importing ES_COVRG = LS_COVRG ).
        RS_COVRG-COVRG = RS_COVRG-COVRG + LS_COVRG-COVRG.

      endloop.

    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_REQ_PRINT_CHANGED.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_DATA_CHANGED ).
  endcase.

endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method INIT_CALCULATED.

  data:  LS_ATTRI           type        /VCXI/VKS_S_ATTRI.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

*** Set Attribute - NOT Calculated
  LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_CALCULATED ).
  LS_ATTRI-ATTVA = ABAP_FALSE.
  ME->R_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

***--------------------------------------------------------------------------------------
*** Get Inks
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                   IF_INUSE  = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
*** Set Attribute - NOT Calculated
    LS_ATTRI = LR_GATE->GET_ATTRI( IF_ATTID = C_ATTID_CALCULATED ).
    LS_ATTRI-ATTVA = ABAP_FALSE.
    LR_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

  endloop.

***--------------------------------------------------------------------------------------
*** Get Markings
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                   IF_INUSE  = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
*** Set Attribute - NOT Calculated
    LS_ATTRI = LR_GATE->GET_ATTRI( IF_ATTID = C_ATTID_CALCULATED ).
    LS_ATTRI-ATTVA = ABAP_FALSE.
    LR_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

  endloop.

endmethod.
method IS_CALCULATED.

  data: LS_ATTRI type /VCXI/VKS_S_ATTRI.
  data: LT_ATTRI type /VCXI/VKS_TT_ATTRI.

*** Read Attribute
  LT_ATTRI = ME->R_GATE->GET_ATTRI_ALL( ).
  read table LT_ATTRI into LS_ATTRI with key ATTID = C_ATTID_CALCULATED.
  check SY-SUBRC = 0.
  move LS_ATTRI-ATTVA to RF_CALCULATED.

endmethod.
method IS_MARK_ACTIVE.

  data:          LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.

***------------------------------------------------------------------------------------------------
*** Get Provider Definition
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

*** Check if Marking is defined
  check LT_PRVDR_DEF is not initial.
  move ABAP_TRUE to RF_RETURN.

endmethod.
method LOAD_PRDET_BY_CUST.

  data:  LF_FPRFS           type        ZVCXI_P0SS_FPRFS,
         LF_PRCAN           type        ZVCXI_P0SS_PRCAN,
         LF_INDEX           type        I.
  data:  LS_ATTRI           type        /VCXI/VKS_S_ATTRI,
         LS_SP_INK          type        ZVCXI_P0SS_S_SP_INK,
         LS_SP_MARK         type        ZVCXI_P0SS_S_SP_MARK,
         LS_COVRG           type        ZVCXI_P0S_S_COVRG.
  data:  LS_PRVDR_DEF       type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE,
         LT_PRVDR_DEF       type        /VCXI/VKSR_TT_PRVDR_DEF,
         LT_SP_INK          type        ZVCXI_P0SS_TT_SP_INK,
         LT_SP_MARK         type        ZVCXI_P0SS_TT_SP_MARK.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_SP_INK       type ref to ZCL_VCXI_P0SS_PR_SP_INK,
         LR_PR_MARK         type ref to ZCL_VCXI_P0SS_PR_MARK.

*** Set Attribute - Calculated
  LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_CALCULATED ).
  LS_ATTRI-ATTVA = ABAP_TRUE.
  ME->R_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

***--------------------------------------------------------------------------------------
  check IR_CUST_SFG is bound.

*** Get Information Based on Print Side
  case ME->GET_PRSID( ).
    when C_PRSID_I.
      move IR_CUST_SFG->F_FPRFI     to LF_FPRFS.
      move IR_CUST_SFG->F_PRCAI     to LF_PRCAN.
      move IR_CUST_SFG->T_SP_INK_I  to LT_SP_INK.
      move IR_CUST_SFG->T_SP_MARK_I to LT_SP_MARK.
    when C_PRSID_O.
      move IR_CUST_SFG->F_FPRFO     to LF_FPRFS.
      move IR_CUST_SFG->F_PRCAO     to LF_PRCAN.
      move IR_CUST_SFG->T_SP_INK_O  to LT_SP_INK.
      move IR_CUST_SFG->T_SP_MARK_O to LT_SP_MARK.
  endcase.

***--------------------------------------------------------------------------------------
*** Set Values
  if LF_FPRFS is not initial.
    ME->SET_FPRFS( IF_FPRFS = LF_FPRFS ).
  endif.

  if LF_PRCAN is not initial.
    ME->SET_PRCAN( IF_PRCAN = LF_PRCAN ).
  endif.

***--------------------------------------------------------------------------------------
*** Get Inks
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  clear: LF_INDEX.
  loop at LT_GATE into LR_GATE.
*** Set Attribute - Calculated
    LS_ATTRI = LR_GATE->GET_ATTRI( IF_ATTID = C_ATTID_CALCULATED ).
    LS_ATTRI-ATTVA = ABAP_TRUE.
    LR_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SP_INK.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SP_INK.
    endtry.

    check LR_PR_SP_INK is bound.
    add 1 to LF_INDEX.

    clear LS_SP_INK.
    read table LT_SP_INK into LS_SP_INK index LF_INDEX.

*** Set Ink Values
    LR_PR_SP_INK->SET_COLCO( IF_COLCO = LS_SP_INK-COLCO ).
    move-corresponding LS_SP_INK to LS_COVRG.
    LR_PR_SP_INK->SET_COVRG( IS_COVRG = LS_COVRG ).

  endloop.

***--------------------------------------------------------------------------------------
*** Get existing Markings
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
*** Delete not needed Markings
  LF_INDEX = lines( LT_SP_MARK ) + 1.
  loop at LT_GATE into LR_GATE from LF_INDEX.
    LR_GATE->DO_FREE( ).
  endloop.

*** Add/Update Markings
  clear: LF_INDEX.
  loop at LT_SP_MARK into LS_SP_MARK.
    add 1 to LF_INDEX.

    read table LT_GATE into LR_GATE index LF_INDEX.
    if SY-SUBRC ne 0.
***   Get Provider Definitions
      LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_MARK=>C_IPRVT_P0_MARK
                                                IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
      read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

      LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
      if LR_GATE->GET_USYNC( ) ne ABAP_TRUE.
        LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
      endif.
    endif.
*** Set Attribute - Calculated
    LS_ATTRI = LR_GATE->GET_ATTRI( IF_ATTID = C_ATTID_CALCULATED ).
    LS_ATTRI-ATTVA = ABAP_TRUE.
    LR_GATE->SET_ATTRI( IS_ATTRI = LS_ATTRI ).

    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MARK.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MARK.
    endtry.

    check LR_PR_MARK is bound.

*** Set Marking Values
    LR_PR_MARK->SET_TMARK( IF_TMARK = LS_SP_MARK-TMARK ).
    LR_PR_MARK->SET_MARKP( IF_MARKP = LS_SP_MARK-MARKP ).
    LR_PR_MARK->SET_NUMPR( IF_NUMPR = LS_SP_MARK-NUMPR ).
    LR_PR_MARK->SET_ACONO( IF_ACONO = LS_SP_MARK-ACONO ).
    move-corresponding LS_SP_MARK to LS_COVRG.
    LR_PR_MARK->SET_COVRG( IS_COVRG = LS_COVRG ).

  endloop.

endmethod.
method SET_FPRFS.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPRFS ).

  move IF_FPRFS to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_DATA_CHANGED ).
  endif.

endmethod.
method SET_NOCOL.

  data:  LF_NOCOL       type        ZVCXI_P0S_NOCOL,
         LF_INDEX       type        I,
         LF_NO_REFRESH  type        ABAP_BOOL.
  data:  LS_LEOKY       type        /VCXI/VKSR_S_LEOKY,
         LS_PRVDR_DEF   type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LT_GATE        type        /VCXI/VKSR_TT_GATE,
         LT_PARAM       type        /VCXI/VKSR_TT_PARAM,
         LT_PRVDR_DEF   type        /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get all Inks
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                   IF_INUSE = ABAP_TRUE ).

  move LINES( LT_GATE ) to LF_NOCOL.
  check LF_NOCOL ne IF_NOCOL.

***--------------------------------------------------------------------------------------
*** Less Inks needed
  if LF_NOCOL gt IF_NOCOL.
    LF_INDEX = IF_NOCOL + 1.
    loop at LT_GATE into LR_GATE from LF_INDEX.
      LR_GATE->DO_FREE( ).
      delete LT_GATE.
    endloop.

***--------------------------------------------------------------------------------------
*** More Inks needed
  else.

*** Get Provider Definition
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_SP_INK=>C_IPRVT_P0_SP_INK
                                              IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).
    read table LT_PRVDR_DEF into LS_PRVDR_DEF index 1.

    check SY-SUBRC = 0.

    LF_INDEX = IF_NOCOL - LF_NOCOL.
    do LF_INDEX times.
      LR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LS_PRVDR_DEF-ID ).
      LR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
      append LR_GATE to LT_GATE.
    enddo.
  endif.

*** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOCOL_CHANGED ).

endmethod.
method SET_PRCAN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRCAN ).

  move IF_PRCAN to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_DATA_CHANGED ).
  endif.

endmethod.
method SET_PRSID.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSID ).

  move IF_PRSID to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_DATA_CHANGED ).
  endif.

endmethod.
method SET_PRTYP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRTYP ).

  move IF_PRTYP to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRTYP_CHANGED ).
  endif.

endmethod.
