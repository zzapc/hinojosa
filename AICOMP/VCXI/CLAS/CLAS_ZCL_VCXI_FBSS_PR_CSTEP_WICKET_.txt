
class ZCL_VCXI_FBSS_PR_CSTEP_WICKET definition
  public
  inheriting from ZCL_VCXI_FBSS_PR_CSTEP
  create public .

public section.

  constants C_IPRVT_CSTEP_WICKET type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_CSTEP_WICKET' ##NO_TEXT.
  constants C_PARID_WIBST type /VCXI/VKS_PARID value 'ZVCXI_FB_WIBST' ##NO_TEXT.
  constants C_PARID_WIHDI type /VCXI/VKS_PARID value 'ZVCXI_FB_WIHDI' ##NO_TEXT.
  constants C_PARID_WIHSP type /VCXI/VKS_PARID value 'ZVCXI_FB_WIHSP' ##NO_TEXT.
  constants C_PARID_WILIP type /VCXI/VKS_PARID value 'ZVCXI_FB_WILIP' ##NO_TEXT.
  constants C_PARID_WIPBO type /VCXI/VKS_PARID value 'ZVCXI_FB_WIPBO' ##NO_TEXT.
  constants C_PARID_WIPST type /VCXI/VKS_PARID value 'ZVCXI_FB_WIPST' ##NO_TEXT.
  constants C_PARID_WIRST type /VCXI/VKS_PARID value 'ZVCXI_FB_WIRST' ##NO_TEXT.
  constants C_PARID_WIRUB type /VCXI/VKS_PARID value 'ZVCXI_FB_WIRUB' ##NO_TEXT.
  constants C_PARID_WISCA type /VCXI/VKS_PARID value 'ZVCXI_FB_WISCA' ##NO_TEXT.
  constants C_PARID_WISPI type /VCXI/VKS_PARID value 'ZVCXI_FB_WISPI' ##NO_TEXT.
  constants C_PARID_WISST type /VCXI/VKS_PARID value 'ZVCXI_FB_WISST' ##NO_TEXT.
  constants C_PARID_WIWIR type /VCXI/VKS_PARID value 'ZVCXI_FB_WIWIR' ##NO_TEXT.

  methods GET_WIPBO
    exporting
      !EF_WIPBO type ZVCXI_FBS_WIPBO
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIPST
    exporting
      !EF_WIPST type ZVCXI_FBS_WIPST
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIRST
    exporting
      !EF_WIRST type ZVCXI_FBS_WIRST
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIRUB
    exporting
      !EF_WIRUB type ZVCXI_FBS_WIRUB
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WISCA
    exporting
      !EF_WISCA type ZVCXI_FBS_WISCA
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WISPI
    exporting
      !EF_WISPI type ZVCXI_FBS_WISPI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WISST
    exporting
      !EF_WISST type ZVCXI_FBS_WISST
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIWIR
    exporting
      !EF_WIWIR type ZVCXI_FBS_WIWIR
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WILIP
    exporting
      !ES_WILIP type ZVCXI_FBS_S_WILIP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIHSP
    exporting
      !ES_WIHSP type ZVCXI_FBS_S_WIHSP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIHDI
    exporting
      !ES_WIHDI type ZVCXI_FBS_S_WIHDI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIBST
    exporting
      !EF_WIBST type ZVCXI_FBS_WIBST
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TWICK
    exporting
      !EF_TWICK type ZVCXI_FBS_TWICK
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_WIPBO
    importing
      !IF_WIPBO type ZVCXI_FBS_WIPBO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_WIPST
    importing
      !IF_WIPST type ZVCXI_FBS_WIPST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_WIRST
    importing
      !IF_WIRST type ZVCXI_FBS_WIRST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_WIRUB
    importing
      !IF_WIRUB type ZVCXI_FBS_WIRUB
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_WISCA
    importing
      !IF_WISCA type ZVCXI_FBS_WISCA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_WISPI
    importing
      !IF_WISPI type ZVCXI_FBS_WISPI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_WISST
    importing
      !IF_WISST type ZVCXI_FBS_WISST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_WIWIR
    importing
      !IF_WIWIR type ZVCXI_FBS_WIWIR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
  methods ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_WIDIM type /VCXI/VKSC_IEVNT value 'INIT_WIDIM' ##NO_TEXT.
  constants C_IEVNT_O_WIBST_CHANGED type /VCXI/VKSC_IEVNT value 'WIBST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIHDI_CHANGED type /VCXI/VKSC_IEVNT value 'WIHDI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIHSP_CHANGED type /VCXI/VKSC_IEVNT value 'WIHSP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WILIP_CHANGED type /VCXI/VKSC_IEVNT value 'WILIP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIPBO_CHANGED type /VCXI/VKSC_IEVNT value 'WIPBO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIPST_CHANGED type /VCXI/VKSC_IEVNT value 'WIPST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIRST_CHANGED type /VCXI/VKSC_IEVNT value 'WIRST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIRUB_CHANGED type /VCXI/VKSC_IEVNT value 'WIRUB_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WISCA_CHANGED type /VCXI/VKSC_IEVNT value 'WISCA_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WISPI_CHANGED type /VCXI/VKSC_IEVNT value 'WISPI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WISST_CHANGED type /VCXI/VKSC_IEVNT value 'WISST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIWIR_CHANGED type /VCXI/VKSC_IEVNT value 'WIWIR_CHANGED' ##NO_TEXT.

  methods HANDLE_INIT_WIDIM
    raising
      /VCXI/CX_CKX .
  methods GET_ADDWT
    returning
      value(RS_ADDWT) type ZVCXI_F0S_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods GET_ADDWT_MATNR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
    changing
      !CS_ADDWT type ZVCXI_F0S_S_ADDWT optional
    returning
      value(RS_ADDWT) type ZVCXI_F0S_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods CHECK_WIPBO
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WIRUB
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WISCA
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WISPI
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WIRST
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WIPST
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WILIP
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WISST
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WIWIR
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WIBST
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_TWICK
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_MATNR
    importing
      !IF_MATNR type MATNR
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .

  methods HANDLE_RECALC_HNDDIM
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_PR_CSTEP_WICKET definition
class ZCL_VCXI_FBSS_PR_CSTEP_WICKET implementation.
  method CHECK_MATNR.
*** 0 = Material Number is valid.
*** 2 = Material Number is not valid.
*** 3 = Material Number is not valid in Plant.

    data: LF_WERKS   type        WERKS_D.
    data: LS_RETURN type        BAPIRETURN1,
          LS_MARC   type        MARC.
    data: LR_APPDATA type ref to /VCXI/CL_VKSR_APPDATA.

    move 0 to RF_RETURN.

    check IF_MATNR is not initial.

    call function 'BAPI_MATERIAL_EXISTENCECHECK'
      exporting
        MATERIAL_LONG = IF_MATNR
      importing
        RETURN        = LS_RETURN.

    if LS_RETURN-TYPE ne     'S'     and
       LS_RETURN-TYPE is not initial.
      move 2 to RF_RETURN.
      return.
    endif.

*** Get Plant
    LF_WERKS = ME->GET_WERKS( ).

*** Check Material in Plant
    call function 'MARC_SINGLE_READ'
      exporting
        MATNR  = IF_MATNR
        WERKS  = LF_WERKS
      importing
        WMARC  = LS_MARC
      exceptions
        others = 5.

    if SY-SUBRC is initial.
***   Check also deletion Flag
      if LS_MARC-LVORM eq ABAP_TRUE.
        move 3 to RF_RETURN.
      endif.
    else.
      move 3 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_TWICK.

*** 0 Wicket Type is maintained.
*** 1 Wicket Type is not maintained.

    data: LF_TWICK type ZVCXI_FBS_TWICK.

    move 0 to RF_RETURN.

*** Get Wicket Type
    ME->GET_TWICK( importing EF_TWICK = LF_TWICK ).

    if LF_TWICK is initial.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_WIBST.

*** 0 Bag/Stack is maintained.
*** 1 Bag/Stack is not maintained.

    data: LF_WIBST type ZVCXI_FBS_WIBST.

    move 0 to RF_RETURN.

*** Get Wicket Bags per Stack
    ME->GET_WIBST( importing EF_WIBST = LF_WIBST ).

    if LF_WIBST is initial.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_WILIP.

*** 0 Wicket Lip is maintained.
*** 1 Wicket Lip is not maintained.

    data: LS_WILIP type ZVCXI_FBS_S_WILIP.

    move 0 to RF_RETURN.

*** Get Wicket Lip
    ME->GET_WILIP( importing ES_WILIP = LS_WILIP ).

    if LS_WILIP-WILIP is initial.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_WIPBO.

*** 2 Paperboard Material is not valid.
*** 3 Paperboard Material is not valid in Plant.

    data: LF_WIPBO type ZVCXI_FBS_WIPBO,
          LF_MATNR type MATNR.

    move 0 to RF_RETURN.

    ME->GET_WIPBO( importing EF_WIPBO = LF_WIPBO ).
    check LF_WIPBO is not initial.

    move LF_WIPBO to LF_MATNR.
    move ME->CHECK_MATNR( LF_MATNR ) to RF_RETURN.

  endmethod.
  method CHECK_WIPST.

*** 0 Paperboard/Stack is maintained.
*** 1 Paperboard/Stack is not maintained.

    data: LF_WIPST type ZVCXI_FBS_WIPST,
          LF_WIPBO type ZVCXI_FBS_WIPBO.

    move 0 to RF_RETURN.

    ME->GET_WIPBO( importing EF_WIPBO = LF_WIPBO ).
    check LF_WIPBO is not initial.

    ME->GET_WIPST( importing EF_WIPST = LF_WIPST ).
    check LF_WIPST is initial.

    move 1 to RF_RETURN.

  endmethod.
  method CHECK_WIRST.

*** 0 Rubber/Stack is maintained.
*** 1 Rubber/Stack is not maintained.

    data: LF_WIRST type ZVCXI_FBS_WIRST,
          LF_WIRUB type ZVCXI_FBS_WIRUB.

    move 0 to RF_RETURN.

    ME->GET_WIRUB( importing EF_WIRUB = LF_WIRUB ).
    check LF_WIRUB is not initial.

    ME->GET_WIRST( importing EF_WIRST = LF_WIRST ).
    check LF_WIRST is initial.

    move 1 to RF_RETURN.

  endmethod.
  method CHECK_WIRUB.

*** 2 Rubber Material is not valid.
*** 3 Rubber Material is not valid in Plant.

    data: LF_WIRUB type ZVCXI_FBS_WIRUB,
          LF_MATNR type MATNR.

    move 0 to RF_RETURN.

    ME->GET_WIRUB( importing EF_WIRUB = LF_WIRUB ).
    check LF_WIRUB is not initial.

    move LF_WIRUB to LF_MATNR.
    move ME->CHECK_MATNR( LF_MATNR ) to RF_RETURN.

  endmethod.
  method CHECK_WISCA.

*** 2 Spool Cap Material is not valid.
*** 3 Spool Pin Material is not valid in Plant.

    data: LF_WISCA type ZVCXI_FBS_WISCA,
          LF_MATNR type MATNR.

    move 0 to RF_RETURN.

    ME->GET_WISCA( importing EF_WISCA = LF_WISCA ).
    check LF_WISCA is not initial.

    move LF_WISCA to LF_MATNR.
    move ME->CHECK_MATNR( LF_MATNR ) to RF_RETURN.

  endmethod.
  method CHECK_WISPI.

*** 0 Spool Pin Material is maintained.
*** 1 Spool Pin Material is not maintained.

    data: LF_WISPI type ZVCXI_FBS_WISPI,
          LF_MATNR type MATNR.

    move 0 to RF_RETURN.

    ME->GET_WISPI( importing EF_WISPI = LF_WISPI ).
    if LF_WISPI is initial.
      move 1 to RF_RETURN.
    else.
      move LF_WISPI to LF_MATNR.
      move ME->CHECK_MATNR( LF_MATNR ) to RF_RETURN.
    endif.

  endmethod.
  method CHECK_WISST.

*** 0 Spool per Stack is maintained.
*** 1 Spool per Stack is not maintained.

    data: LF_WISST type ZVCXI_FBS_WISST.

    move 0 to RF_RETURN.

    ME->GET_WISST( importing EF_WISST = LF_WISST ).
    check LF_WISST is initial.

    move 1 to RF_RETURN.

  endmethod.
  method CHECK_WIWIR.

*** 0 Wicket Wire is maintained.
*** 1 Wicket Wire is not maintained.

    data: LF_WIWIR type ZVCXI_FBS_WIWIR,
          LF_MATNR type MATNR.

    move 0 to RF_RETURN.

    ME->GET_WIWIR( importing EF_WIWIR = LF_WIWIR ).
    if LF_WIWIR is initial.
      move 1 to RF_RETURN.
    else.
      move LF_WIWIR to LF_MATNR.
      move ME->CHECK_MATNR( LF_MATNR ) to RF_RETURN.
    endif.

  endmethod.
  method GET_ADDWT.

*** Get Werks
    data(LF_WERKS) = ME->GET_WERKS( ).
*** Get Bag/Stack
    ME->GET_WIBST( importing EF_WIBST = data(LF_WIBST) ).

***--------------------------------------------------------------------------------------
*** Wire-based Materials

*** Get Additional Weight of Wicket Wire
    ME->GET_WIWIR( importing EF_WIWIR = data(LF_WIWIR) ).
    ME->GET_ADDWT_MATNR( exporting IF_MATNR = LF_WIWIR
                                   IF_WERKS = LF_WERKS
                                   IS_AVGCO = value #( AVGCO = 1          AVGCO_UOM = 'ST' )
                                   IS_AVGCP = value #( AVGCP = LF_WIBST   AVGCP_UOM = 'ST' )
                          changing CS_ADDWT = RS_ADDWT ).

*** Get Additional Weight of Rubber
    ME->GET_WIRUB( importing EF_WIRUB = data(LF_WIRUB) ).
    ME->GET_WIRST( importing EF_WIRST = data(LF_WIRST) ).
    ME->GET_ADDWT_MATNR( exporting IF_MATNR = LF_WIRUB
                                   IF_WERKS = LF_WERKS
                                   IS_AVGCO = value #( AVGCO = LF_WIRST   AVGCO_UOM = 'ST' )
                                   IS_AVGCP = value #( AVGCP = LF_WIBST   AVGCP_UOM = 'ST' )
                          changing CS_ADDWT = RS_ADDWT ).

*** Get Additional Weight of Paperboard
    ME->GET_WIPBO( importing EF_WIPBO = data(LF_WIPBO) ).
    ME->GET_WIPST( importing EF_WIPST = data(LF_WIPST) ).
    ME->GET_ADDWT_MATNR( exporting IF_MATNR = LF_WIPBO
                                   IF_WERKS = LF_WERKS
                                   IS_AVGCO = value #( AVGCO = LF_WIPST   AVGCO_UOM = 'ST' )
                                   IS_AVGCP = value #( AVGCP = LF_WIBST   AVGCP_UOM = 'ST' )
                          changing CS_ADDWT = RS_ADDWT ).


***--------------------------------------------------------------------------------------
*** Spool-based Materials

*** Get Additional Weight of Spool Pin
    ME->GET_WISPI( importing EF_WISPI = data(LF_WISPI) ).
    ME->GET_WISST( importing EF_WISST = data(LF_WISST) ).
    ME->GET_ADDWT_MATNR( exporting IF_MATNR = LF_WISPI
                                   IF_WERKS = LF_WERKS
                                   IS_AVGCO = value #( AVGCO = LF_WISST   AVGCO_UOM = 'ST' )
                                   IS_AVGCP = value #( AVGCP = LF_WIBST   AVGCP_UOM = 'ST' )
                          changing CS_ADDWT = RS_ADDWT ).

*** Get Additional Weight of Spool Cap
    ME->GET_WISCA( importing EF_WISCA = data(LF_WISCA) ).
    ME->GET_ADDWT_MATNR( exporting IF_MATNR = LF_WISCA
                                   IF_WERKS = LF_WERKS
                                   IS_AVGCO = value #( AVGCO = LF_WISST   AVGCO_UOM = 'ST' )
                                   IS_AVGCP = value #( AVGCP = LF_WIBST   AVGCP_UOM = 'ST' )
                          changing CS_ADDWT = RS_ADDWT ).

  endmethod.
  method GET_ADDWT_MATNR.

    data: LF_NTGEW type NTGEW,
          LF_GEWEI type GEWEI.


    check IF_MATNR is not initial and
          IF_WERKS is not initial.

    try.
        data(LR_CUST_MATNR) = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = IF_MATNR
                                                                     IF_WERKS = IF_WERKS ).

        check LR_CUST_MATNR is bound.
        LR_CUST_MATNR->GET_NTGEW( exporting IS_AVGCO = IS_AVGCO
                                  importing EF_NTGEW = LF_NTGEW
                                            EF_GEWEI = LF_GEWEI ).
        check IS_AVGCP-AVGCP ne 0.

        RS_ADDWT = value #( ADDWT     = LF_NTGEW / IS_AVGCP-AVGCP
                            ADDWT_UOM = LF_GEWEI ).
      catch /VCXI/CX_CKX.
        clear RS_ADDWT.
    endtry.


    if CS_ADDWT is supplied.
      check RS_ADDWT-ADDWT_UOM is not initial.

      if CS_ADDWT is initial.
        CS_ADDWT = RS_ADDWT.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_ADDWT-ADDWT
                                                            IF_CALCV_UOM_1 = RS_ADDWT-ADDWT_UOM
                                                            IF_CALCV_2     = CS_ADDWT-ADDWT
                                                            IF_CALCV_UOM_2 = CS_ADDWT-ADDWT_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = CS_ADDWT-ADDWT_UOM
                                                  importing EF_CALCV       = CS_ADDWT-ADDWT
                                                            EF_CALCV_UOM   = CS_ADDWT-ADDWT_UOM ).
      endif.
    endif.

  endmethod.
  method GET_STATUS.

    data: LF_TWICK type ZVCXI_FBS_TWICK.

    SUPER->GET_STATUS( receiving RF_ELMST = RF_ELMST ).

***--------------------------------------------------------------------------------------
*** Check Wicket Type
    if ME->CHECK_TWICK( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Bag/Stack
    if ME->CHECK_WIBST( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Wicket Lip
    if ME->CHECK_WILIP( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.


***--------------------------------------------------------------------------------------
*** Get Wicket Type
    ME->GET_TWICK( importing EF_TWICK = LF_TWICK ).

    case LF_TWICK.
***   Wicket Wire
      when ZCL_VCXI_FBSS_CUST_BAG=>C_TWICK_WIRE.

***     Check Wicket Wire
        if ME->CHECK_WIWIR( ) eq 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        else.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
        endif.

***     Check Rubber/Stack
        if ME->CHECK_WIRST( ) eq 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        else.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
        endif.

***     Check Paperboard/Stack
        if ME->CHECK_WIPST( ) eq 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        else.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
        endif.

***     Check Rubber
        if ME->CHECK_WIRUB( ) eq 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        else.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
        endif.

***     Check Paperboard
        if ME->CHECK_WIPBO( ) eq 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        else.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
        endif.

***   Wicket Spool
      when ZCL_VCXI_FBSS_CUST_BAG=>C_TWICK_SPOOL.

***     Check Spool Pin
        if ME->CHECK_WISPI( ) eq 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        else.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
        endif.

***     Check Spool Cap
        if ME->CHECK_WISCA( ) eq 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        else.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
        endif.

***     Check Spool per Stack
        if ME->CHECK_WISST( ) eq 0.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
        else.
          RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                         IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
        endif.

    endcase.

  endmethod.
  method GET_STATUS_MSG.

    data: LF_TWICK type ZVCXI_FBS_TWICK.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

    ME->GET_TWICK( importing EF_TWICK = LF_TWICK ).

    case LF_TWICK.
      when ZCL_VCXI_FBSS_CUST_BAG=>C_TWICK_WIRE.

***--------------------------------------------------------------------------------------
***     Check Wicket Wire
        case ME->CHECK_WIWIR( ).
          when 0.
***         Wicket Wire is maintained.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'S'
                                     IF_MSGNO = '463' ).
          when 1.
***         Wicket Wire is not maintained.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '464' ).

          when 2.
***         Wicket Wire is not valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '474'
                                     IF_MSGV1 = text-T01 ).
          when 3.
***         Wicket Wire is not valid in Plant.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '475'
                                     IF_MSGV1 = text-T01 ).
        endcase.

***--------------------------------------------------------------------------------------
***     Check Rubber
        case ME->CHECK_WIRUB( ).
          when 2.
***         Rubber is not valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '474'
                                     IF_MSGV1 = text-T02 ).
          when 3.
***         Rubber is not valid in Plant.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '475'
                                     IF_MSGV1 = text-T02 ).
        endcase.

***--------------------------------------------------------------------------------------
***     Check Paperboard
        case ME->CHECK_WIPBO( ).
          when 2.
***         Paperboard is not valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '474'
                                     IF_MSGV1 = text-T03 ).
          when 3.
***         Paperboard is not valid in Plant.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '475'
                                     IF_MSGV1 = text-T03 ).
        endcase.

***--------------------------------------------------------------------------------------
***     Check Rubber/Stack
        if ME->CHECK_WIRST( ) eq 0.
***       Rubber/Stack is maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '465' ).
        else.
***       Rubber/Stack is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '466' ).
        endif.

***--------------------------------------------------------------------------------------
***     Check Paperboard/Stack
        if ME->CHECK_WIPST( ) eq 0.
***       Paperboard/Stack is maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '467' ).
        else.
***       Paperboard/Stack is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '468' ).
        endif.

      when ZCL_VCXI_FBSS_CUST_BAG=>C_TWICK_SPOOL.

***--------------------------------------------------------------------------------------
***     Check Spool Pin
        case ME->CHECK_WISPI( ).
          when 0.
***         Spool Pin is maintained.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'S'
                                     IF_MSGNO = '469' ).
          when 1.
***         Spool Pin is not maintained.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '470' ).
          when 2.
***         Spool Pin is not valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '474'
                                     IF_MSGV1 = text-T05 ).
          when 3.
***         Spool Pin is not valid in Plant.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '475'
                                     IF_MSGV1 = text-T05 ).
        endcase.

***--------------------------------------------------------------------------------------
***     Check Spool Cap
        case ME->CHECK_WISCA( ).
          when 2.
***         Spool Cap is not valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '474'
                                     IF_MSGV1 = text-T04 ).
          when 3.
***         Spool Cap is not valid in Plant.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '475'
                                     IF_MSGV1 = text-T04 ).
        endcase.

***--------------------------------------------------------------------------------------
***     Check Spool per Stack
        if ME->CHECK_WISST( ) eq 0.
***       Spool per Stack is maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '471' ).
        else.
***       Spool per Stack is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '472' ).
        endif.

      when others.
    endcase.

***--------------------------------------------------------------------------------------
*** Check Wicket Type
    if ME->CHECK_TWICK( ) eq 0.
***   Wicket Type is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '111' ).
    else.
***   Wicket Type is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '112' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Bag/Stack
    if ME->CHECK_WIBST( ) eq 0.
***   Bag/Stack is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '113' ).
    else.
***   Bag/Stack is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '114' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Wicket Lip
    if ME->CHECK_WILIP( ) eq 0.
***   Wicket Lip is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '115' ).
    else.
***   Wicket Lip is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '116' ).
    endif.

  endmethod.
  method GET_TWICK.

    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP.

    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).
    check LR_BL_BGBPROP is bound.

    move LR_BL_BGBPROP->S_WIDIM-TWICK to EF_TWICK.

  endmethod.
  method GET_WIBST.

    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP.

    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).
    check LR_BL_BGBPROP is bound.

    move LR_BL_BGBPROP->S_WIDIM-WIBST to EF_WIBST.

  endmethod.
  method GET_WIHDI.

    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP.

    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).
    check LR_BL_BGBPROP is bound.

    move LR_BL_BGBPROP->S_WIDIM-S_WIHDI to ES_WIHDI.

  endmethod.
  method GET_WIHSP.

    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP.

    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).
    check LR_BL_BGBPROP is bound.

    move LR_BL_BGBPROP->S_WIDIM-S_WIHSP to ES_WIHSP.

  endmethod.
  method GET_WILIP.

    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP.

    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).
    check LR_BL_BGBPROP is bound.

    move LR_BL_BGBPROP->S_WIDIM-S_WILIP to ES_WILIP.

  endmethod.
  method GET_WIPBO.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIPBO ).
    move LS_PARAM-ATWRT to EF_WIPBO.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WIPST.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIPST ).
    move LS_PARAM-ATFLV to EF_WIPST.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WIRST.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIRST ).
    move LS_PARAM-ATFLV to EF_WIRST.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WIRUB.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIRUB ).
    move LS_PARAM-ATWRT to EF_WIRUB.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WISCA.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISCA ).
    move LS_PARAM-ATWRT to EF_WISCA.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WISPI.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISPI ).
    move LS_PARAM-ATWRT to EF_WISPI.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WISST.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISST ).
    move LS_PARAM-ATFLV to EF_WISST.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WIWIR.

    data: LS_PARAM  type  /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIWIR ).
    move LS_PARAM-ATWRT to EF_WIWIR.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_INIT_WIDIM.
        ME->HANDLE_INIT_WIDIM( ).

    endcase.

  endmethod.
  method HANDLE_INIT_WIDIM.

    data: LF_TWICK type ZVCXI_FBS_TWICK,
          LF_WISPI type ZVCXI_FBS_WISPI,
          LF_WISCA type ZVCXI_FBS_WISCA,
          LF_WISST type ZVCXI_FBS_WISST,
          LF_WIWIR type ZVCXI_FBS_WIWIR,
          LF_WIRUB type ZVCXI_FBS_WIRUB,
          LF_WIRST type ZVCXI_FBS_WIRST,
          LF_WIPBO type ZVCXI_FBS_WIPBO,
          LF_WIPST type ZVCXI_FBS_WIPST.

    ME->GET_TWICK( importing EF_TWICK = LF_TWICK ).

    case LF_TWICK.
      when ZCL_VCXI_FBSS_CUST_BAG=>C_TWICK_WIRE.
        ME->SET_WISPI( exporting IF_WISPI = LF_WISPI ).
        ME->SET_WISCA( exporting IF_WISCA = LF_WISCA ).
        ME->SET_WISST( exporting IF_WISST = LF_WISST ).

      when ZCL_VCXI_FBSS_CUST_BAG=>C_TWICK_SPOOL.
        ME->SET_WIWIR( exporting IF_WIWIR = LF_WIWIR ).
        ME->SET_WIRUB( exporting IF_WIRUB = LF_WIRUB ).
        ME->SET_WIRST( exporting IF_WIRST = LF_WIRST ).
        ME->SET_WIPBO( exporting IF_WIPBO = LF_WIPBO ).
        ME->SET_WIPST( exporting IF_WIPST = LF_WIPST ).

    endcase.

  endmethod.
  method HANDLE_RECALC_HNDDIM.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR.
    data: LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.


***--------------------------------------------------------------------------------------
*** Only recalculate Handling Dimensions if they are not overridden.
    ME->GET_HNDDIM( importing EF_FOVRR = LF_FOVRR ).
    check LF_FOVRR eq ABAP_FALSE.


***--------------------------------------------------------------------------------------
*** Get Bag Forward Property (Inbound)
    ME->ZIF_VCXI_FBSS_COMM_PREV~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP ).
    check LR_BL_BGFPROP is bound.
    data(LS_HNDDIM) = LR_BL_BGFPROP->S_HNDDIM.

*** Increase Height by Bags/Stack
    ME->GET_WIBST( importing EF_WIBST = data(LF_WIBST) ).
    LS_HNDDIM-HNDHE = LS_HNDDIM-HNDHE * LF_WIBST.

*** Set new Handling Dimensions
    ME->SET_HNDDIM( IS_HNDDIM = LS_HNDDIM ).

  endmethod.
  method SET_WIPBO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIPBO ).

    move IF_WIPBO     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIPBO_CHANGED ).

    endif.

  endmethod.
  method SET_WIPST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIPST ).

    move IF_WIPST     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIPST_CHANGED ).

    endif.

  endmethod.
  method SET_WIRST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIRST ).

    move IF_WIRST     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIRST_CHANGED ).

    endif.

  endmethod.
  method SET_WIRUB.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIRUB ).

    move IF_WIRUB     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIRUB_CHANGED ).

    endif.

  endmethod.
  method SET_WISCA.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISCA ).

    move IF_WISCA     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WISCA_CHANGED ).

    endif.

  endmethod.
  method SET_WISPI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISPI ).

    move IF_WISPI     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WISPI_CHANGED ).

    endif.

  endmethod.
  method SET_WISST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WISST ).

    move IF_WISST     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WISST_CHANGED ).

    endif.

  endmethod.
  method SET_WIWIR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIWIR ).

    move IF_WIWIR     to LS_PARAM-ATWRT.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.

***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIWIR_CHANGED ).

    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX.

*** Super
    SUPER->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing EF_SETBY      = EF_SETBY
                                                        ER_BL_BGFPROP = ER_BL_BGFPROP ).
    check ER_BL_BGFPROP is bound.

***--------------------------------------------------------------------------------------
*** Add Additional Weight of all Wicketing Material
    ER_BL_BGFPROP->MERGE_ADDWT( IS_ADDWT = ME->GET_ADDWT( ) ).

***--------------------------------------------------------------------------------------
*** Get new Bag Forward Property XML
    if EF_BGFPX is requested.
      EF_BGFPX = ER_BL_BGFPROP->GET_BGFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://dimension'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
