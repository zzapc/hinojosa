
class ZCL_VCXI_XCSS_PR_PRODI definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_XCS_PRODI type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSS_PRODI'. "#EC NOTEXT
  constants C_PARID_FOVRR type /VCXI/VKS_PARID value 'ZVCXI_XC_FOVRR'. "#EC NOTEXT
  constants C_PARID_ODELT type /VCXI/VKS_PARID value 'ZVCXI_XC_ODELT'. "#EC NOTEXT
  constants C_PARID_PRODH type /VCXI/VKS_PARID value 'ZVCXI_XC_PRODH'. "#EC NOTEXT
  constants C_PARID_UDELT type /VCXI/VKS_PARID value 'ZVCXI_XC_UDELT'. "#EC NOTEXT

  methods GET_FOVRR_PRODH
    returning
      value(RF_FOVRR) type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods GET_ODELT
    returning
      value(RS_ODELT) type ZVCXI_XCSS_S_ODELT
    raising
      /VCXI/CX_CKX .
  methods GET_PRODH
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      value(EF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods GET_UDELT
    returning
      value(RS_UDELT) type ZVCXI_XCSS_S_UDELT
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_PRODH
    importing
      !IF_FOVRR type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods SET_ODELT
    importing
      !IS_ODELT type ZVCXI_XCSS_S_ODELT
      !IF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_PRODH
    importing
      !IF_PRODH type PRODH_D optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_UDELT
    importing
      !IS_UDELT type ZVCXI_XCSS_S_UDELT
      !IF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
protected section.

  constants C_IEVNT_O_FOVRR_PRODH_CHANGED type /VCXI/VKSC_IEVNT value 'FOVRR_PRODH_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PRODH_CHANGED type /VCXI/VKSC_IEVNT value 'PRODH_CHANGED'. "#EC NOTEXT
private section.
endclass. "ZCL_VCXI_XCSS_PR_PRODI definition
class ZCL_VCXI_XCSS_PR_PRODI implementation.
method GET_FOVRR_PRODH.

  data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Get setby from Production Hierarchie
  ME->GET_PRODH( importing EF_SETBY = LF_SETBY ).

  case LF_SETBY.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_USER.
      move ABAP_TRUE to RF_FOVRR.
    when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      move ABAP_FALSE to RF_FOVRR.
  endcase.

endmethod.
method GET_ODELT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ODELT ).
  move LS_PARAM-ATFLV to RS_ODELT-ODELT.
  move LS_PARAM-UNIT  to RS_ODELT-ODELT_UOM.

endmethod.
method GET_PRODH.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRODH ).
  move LS_PARAM-ATWRT to EF_PRODH.
  move LS_PARAM-SETBY to EF_SETBY.

endmethod.
method GET_STATUS.

  data: LF_PRODH type PRODH_D.

  RF_ELMST = SUPER->GET_STATUS( ).

***------------------------------------------------------------------
*** Check Product Hierachie - check is active -> Do check
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_PRODH' ) eq ABAP_TRUE.
    ME->GET_PRODH( importing EF_PRODH = LF_PRODH ).
    if LF_PRODH is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.
endmethod.
method GET_STATUS_MSG.

  data: LF_PRODH type PRODH_D.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Product Hierarchie check is active -> Do check
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_PRODH' ) eq ABAP_TRUE.
    ME->GET_PRODH( importing EF_PRODH = LF_PRODH ).
    if LF_PRODH is not initial.
***   Product Hierarchie is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '201' ).
    else.
***   Product Hierarchie is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '202' ).
    endif.
  endif.

endmethod.
method GET_UDELT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_UDELT ).
  move LS_PARAM-ATFLV to RS_UDELT-UDELT.
  move LS_PARAM-UNIT  to RS_UDELT-UDELT_UOM.

endmethod.
method SET_FOVRR_PRODH.

*** Set Setby for Production Hierachie
  case IF_FOVRR.
    when ABAP_TRUE.
      ME->SET_PRODH( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    when ABAP_FALSE.
      ME->SET_PRODH( IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endcase.

**** Send Event
  ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FOVRR_PRODH_CHANGED ).

endmethod.
method SET_ODELT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ODELT ).

  move IS_ODELT-ODELT     to LS_PARAM-ATFLV.
  move IF_SETBY           to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_PRODH.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRODH ).

  if IF_PRODH is supplied.
    move IF_PRODH to LS_PARAM-ATWRT.
  endif.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRODH_CHANGED ).
  endif.

endmethod.
method SET_UDELT.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_UDELT ).

  move IS_UDELT-UDELT      to LS_PARAM-ATFLV.
  move IF_SETBY            to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
