
class ZCL_VCXI_XCS_PR_IDATSPV definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_IDATSPV type /VCXI/VKSC_IPRVT value 'ZVCXI_XCS_IDATSPV' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods SET_IDAT
    importing
      !IR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC
    raising
      /VCXI/CX_CKX .
protected section.

  data T_SPVCE type /VCXI/CKX_TT_OBJECT .

  methods ADD_CHILDREN
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IF_IPARE type /VCXI/CKX_ID
      !IF_CPARE type /VCXI/VKSR_REPNR
      !IT_SVCEL type ZVCXI_XCI_TT_SVCEL
    changing
      !CT_SPVRE_NEW type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods REMOVE_CHILDREN
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_SVCEL type ZVCXI_XCI_TT_SVCEL
    changing
      !CT_SPVRE_NEW type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods FILL_SPVRE
    importing
      !IR_SPVRE type ref to /VCXI/CL_VKSR_SPVRE
      !IS_SVCEL type ZVCXI_XCI_S_SVCEL
    raising
      /VCXI/CX_CKX .
  methods SET_SVCRT
    importing
      !IT_SVCRT type ZVCXI_XCI_TT_SVCRT
    raising
      /VCXI/CX_CKX .
  methods GET_SPVCE_BY_ID
    importing
      !IF_ID type /VCXI/CKX_ID
      !IR_SPVCE_PARENT type ref to /VCXI/CL_VKSC_SPVCE optional
    returning
      value(RR_SPVCE) type ref to /VCXI/CL_VKSC_SPVCE
    raising
      /VCXI/CX_CKX .
  methods SET_SVCEL
    importing
      !IT_SVCEL type ZVCXI_XCI_TT_SVCEL
    raising
      /VCXI/CX_CKX .
  methods CREATE_BL_PRTE
    importing
      !IR_PR_RTESPV type ref to ZCL_VCXI_XCSR_PR_RTESPV
      !IS_SVCRT type ZVCXI_XCI_S_SVCRT
    returning
      value(RR_BL_PRTE) type ref to ZCL_VCXI_XCSR_BL_PRTE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCS_PR_IDATSPV definition
class ZCL_VCXI_XCS_PR_IDATSPV implementation.
method ADD_CHILDREN.

  data:  LS_SVCEL      type        ZVCXI_XCI_S_SVCEL.
  data:  LR_SPVCE      type ref to /VCXI/CL_VKSC_SPVCE,
         LR_SPVRE      type ref to /VCXI/CL_VKSR_SPVRE.

*** Process Children (which are not identified by LEVEL)
  loop at IT_SVCEL into LS_SVCEL where IPARE eq IF_IPARE
                                  and  CPARE eq IF_CPARE
                                  and  LEVEL is initial.
*** Get Customizing Element
    LR_SPVCE = ME->GET_SPVCE_BY_ID( IF_ID           = LS_SVCEL-ISELF
                                    IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_PARENT.
    append LR_SPVRE to CT_SPVRE_NEW.

*** Fill supervised Element
    ME->FILL_SPVRE( IR_SPVRE = LR_SPVRE
                    IS_SVCEL = LS_SVCEL ).

*** Add Children
    ME->ADD_CHILDREN( exporting IR_SPVRE_PARENT = LR_SPVRE
                                IF_IPARE        = LS_SVCEL-ISELF
                                IF_CPARE        = LS_SVCEL-CSELF
                                IT_SVCEL        = IT_SVCEL
                      changing  CT_SPVRE_NEW    = CT_SPVRE_NEW ).
  endloop.


endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Get Supervised Customizing Elements
  ME->T_SPVCE = ME->R_GATE->GET_SPVCE( ).

endmethod.
method CREATE_BL_PRTE.

  data:  LF_GUID        type        /VCXI/CKX_GUID,
         LF_FAIL        type        ABAP_BOOL,
         LF_LCVAL       type        /VCXI/VSMC_LCVAL.
  data:  LS_RTE_DEF     type        ZVCXI_XCSR_S_RTE_DEF,
         LS_ARBPL       type        ZVCXI_XCI_S_ARBPL,
         LS_PSTEP       type        ZVCXI_XCI_S_PSTEP.
  data:  LT_RTE_PSTEP   type        /VCXI/VSMR_TT_RTE_PSTEP,
         LT_ARBPL       type        /VCXI/CKX_TT_OBJECT,
         LT_OBJECT      type        /VCXI/CKX_TT_OBJECT.
  data:  LR_ARBPL       type ref to /VCXI/CL_VSMC_ARBPL,
         LR_RTE_ARBPL   type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PRTE    type ref to /VCXI/CL_VSMR_RTE_PRTE,
         LR_BL_PSTEP    type ref to ZCL_VCXI_XCSR_BL_PSTEP,
         LR_RTE_PSTEP   type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_PSTEP       type ref to /VCXI/CL_VSMC_PSTEP,
         LR_RTE_PSEQ    Type Ref To /VCXI/CL_VSMR_RTE_PSEQ,
         LR_BL_MANU     type ref to ZIF_VCXI_XCSR_BL_MANU,
         LR_BL_OUTSO    type ref to ZIF_VCXI_XCSR_BL_OUTSO.

***--------------------------------------------------------------------------------------
*** Create new Route
  create object LR_RTE_PRTE.

*** Get Prodcution Steps of first Routing Definition
  read table IR_PR_RTESPV->T_RTE_DEF into LS_RTE_DEF index 1.
  if SY-SUBRC eq 0.
    move LS_RTE_DEF-T_RTE_PSTEP to LT_RTE_PSTEP.
  else.
    move ABAP_TRUE to LF_FAIL.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Loop at Work Center
  loop at IS_SVCRT-T_ARBPL into LS_ARBPL.
    if LS_ARBPL-T_PSTEP is initial.
      move ABAP_TRUE to LF_FAIL.
      exit.
    endif.

*** Build Work Center Table
    LF_GUID = /VCXI/CL_VSMC_ARBPL=>ENCRYPT_GUID( IF_WERKS = LS_ARBPL-WERKS
                                                 IF_ARBPL = LS_ARBPL-ARBPL ).
    LR_ARBPL ?= /VCXI/CL_VSMC_ARBPL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    append LR_ARBPL to LT_ARBPL.

*** Create Routing Work Center
    create object LR_RTE_ARBPL
      exporting
        IR_ARBPL = LR_ARBPL.
    append LR_RTE_ARBPL to LR_RTE_PRTE->T_RTE_ARBPL.

***--------------------------------------------------------------------------------------
*** Add Production Steps
    loop at LS_ARBPL-T_PSTEP into LS_PSTEP.
      clear: LR_RTE_PSTEP,
             LR_BL_PSTEP,
             LR_PSTEP,
             LR_RTE_PSEQ,
             LF_LCVAL.

***   Find Production Step
      loop at LT_RTE_PSTEP into LR_RTE_PSTEP.
        if LR_RTE_PSTEP->R_PSTEP->/VCXI/IF_CKX_OBJECT~GET_ID( ) eq LS_PSTEP-IPSTP.
          delete LT_RTE_PSTEP.
          move LR_RTE_PSTEP->R_BLOBJ    ?to LR_BL_PSTEP.
          move LR_RTE_PSTEP->R_PSTEP     to LR_PSTEP.
          move LR_RTE_PSTEP->R_RTE_PSEQ  to LR_RTE_PSEQ.
          move LR_RTE_PSTEP->F_LCVAL     to LF_LCVAL.
          exit.
        else.
          clear: LR_RTE_PSTEP,
                 LF_LCVAL.
        endif.
      endloop.

***   Add new Production Step
      if LR_RTE_PSTEP is not bound.
***     Add new Manual Production Step
        if LS_PSTEP-MANWC eq ABAP_TRUE.
          LR_BL_PSTEP = IR_PR_RTESPV->CREATE_BL_PSTEP_MANU( ).
        endif.
***     Add new Outsourcing Production Step
        if LS_PSTEP-OUTSO eq ABAP_TRUE.
          LR_BL_PSTEP = IR_PR_RTESPV->CREATE_BL_PSTEP_OUTSO( ).
        endif.

        if LR_BL_PSTEP is bound and
           LR_BL_PSTEP->F_IPSTP eq LS_PSTEP-IPSTP.
          move LR_BL_PSTEP->R_PSTEP to LR_PSTEP.
        else.
          clear: LR_BL_PSTEP,
                 LR_PSTEP.
        endif.
      endif.

***   Fail if not possible to create Step
      if LR_PSTEP    is not bound or
         LR_BL_PSTEP is not bound.
        move ABAP_TRUE to LF_FAIL.
        exit.
      endif.

      check LR_PSTEP    is bound and
            LR_BL_PSTEP is bound.
***   Create Copy of Production Step
      create object LR_RTE_PSTEP
        exporting
          IR_PSTEP    = LR_PSTEP
          IR_RTE_PSEQ = LR_RTE_PSEQ.
      move LR_BL_PSTEP->COPY( ) to LR_RTE_PSTEP->R_BLOBJ.
      move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.

***   Add Production Steps to Work Center
      append LR_RTE_PSTEP to LR_RTE_ARBPL->T_RTE_PSTEP.

***   Set Link Context Value
      move LF_LCVAL to LR_RTE_PSTEP->F_LCVAL.

***--------------------------------------------------------------------------------------
***   For first Prodcution Step only
      if SY-TABIX eq 1.
***     Set Helper
        move LS_PSTEP-T_HELPER to LR_BL_PSTEP->T_HELPER.

***     Set Manual Work Center Data
        try.
            move LR_BL_PSTEP ?to LR_BL_MANU.
            if LR_BL_MANU is bound.
              if LS_PSTEP-MANWC eq ABAP_TRUE.
                move LS_PSTEP-MSRSR to LR_BL_MANU->S_MSRS-MSRSR.
                move LS_PSTEP-MSRST to LR_BL_MANU->S_MSRS-MSRST.
                move LS_PSTEP-SCRAP to LR_BL_MANU->S_SCRAP-SCRAP.
              else.
                clear: LR_BL_MANU->S_MSRS-MSRSR,
                       LR_BL_MANU->S_MSRS-MSRST,
                       LR_BL_MANU->S_SCRAP-SCRAP.
              endif.
              move LS_PSTEP-MANWC to LR_BL_MANU->F_MANWC.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
        endtry.

***     Set Outsourcing Data
        try.
            move LR_BL_PSTEP ?to LR_BL_OUTSO.
            if LR_BL_OUTSO is bound.
              if LS_PSTEP-OUTSO eq ABAP_TRUE.
                move LS_PSTEP-SCRAP to LR_BL_OUTSO->S_SCRAP-SCRAP.
                move LS_PSTEP-LIFNR to LR_BL_OUTSO->F_LIFNR.
                move LS_PSTEP-PRICE to LR_BL_OUTSO->S_PRICE-PRICE.
                move LS_PSTEP-PRICP to LR_BL_OUTSO->S_PRICP-PRICP.
              else.
                clear: LR_BL_OUTSO->S_SCRAP-SCRAP,
                       LR_BL_OUTSO->F_LIFNR,
                       LR_BL_OUTSO->S_PRICE-PRICE,
                       LR_BL_OUTSO->S_PRICP-PRICP.
              endif.
              move LS_PSTEP-OUTSO to LR_BL_OUTSO->F_OUTSO.
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
        endtry.
      endif.
    endloop.
  endloop.

***--------------------------------------------------------------------------------------
*** Check not failed
  check LF_FAIL ne ABAP_TRUE.

*** Create BL Production Route and turn Technical Checks on
  RR_BL_PRTE = IR_PR_RTESPV->CREATE_BL_PRTE( IR_RTE_PRTE = LR_RTE_PRTE ).
  if RR_BL_PRTE is bound.
    RR_BL_PRTE->SET_TECHC( IF_TECHC = ABAP_TRUE ).
  endif.

endmethod.
  method FILL_SPVRE.

    data:  LF_GUID       type        /VCXI/CKX_GUID.
    data: LS_LEOKY type        /VCXI/VKSR_S_LEOKY,
          LS_SVCPA type        ZVCXI_XCI_S_SVCPA,
          LS_PARAM type        /VCXI/VKSR_S_PARAM,
          LS_SVCEV type        ZVCXI_XCI_S_SVCEV.
    data:  LR_PARAM      type ref to /VCXI/CL_VKSC_PARAM.

***------------------------------------------------------------------------------------------------
*** Set in Use
    IR_SPVRE->SET_INUSE( IF_INUSE = ABAP_TRUE ).

*** Set Position
    if IS_SVCEL-POSID is not initial.
      IR_SPVRE->SET_POSID( IF_POSID = IS_SVCEL-POSID ).
    endif.

***------------------------------------------------------------------------------------------------
*** Set Leading Object Key
    move-corresponding IS_SVCEL to LS_LEOKY.
    if LS_LEOKY-SETBY is not initial.
      IR_SPVRE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).
    endif.

***------------------------------------------------------------------------------------------------
*** Process all Parameter
    loop at IS_SVCEL-T_SVCPA into LS_SVCPA.

***   Get Parameter Instance
      move LS_SVCPA-PARID to LF_GUID.
      LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

***   Transfer
      clear LS_PARAM.
      move LS_SVCPA-PARID                 to LS_PARAM-PARID.
      move LR_PARAM->F_PARTY              to LS_PARAM-PARTY.
      move LS_SVCPA-ATWRT                 to LS_PARAM-ATWRT.
      move LS_SVCPA-ATFLV                 to LS_PARAM-ATFLV.
      move LS_SVCPA-UNIT                  to LS_PARAM-UNIT.
      move LS_SVCPA-CURKY                 to LS_PARAM-CURKY.
      move LS_SVCPA-STRNG                 to LS_PARAM-STRNG.
      move LS_SVCPA-SETBY                 to LS_PARAM-SETBY.

***   Set Parameter
      if LS_PARAM-SETBY is not initial.
        IR_SPVRE->SET_PARAM( IS_PARAM = LS_PARAM ).
      endif.
    endloop.

***------------------------------------------------------------------------------------------------
*** Add Events
    loop at IS_SVCEL-T_SVCEV into LS_SVCEV.
      IR_SPVRE->SET_EVENT( IF_IEVNT = LS_SVCEV-IEVNT ).
    endloop.

  endmethod.
method GET_SPVCE_BY_ID.

  data:  LF_ID       type        /VCXI/CKX_ID.
  data:  LR_OBJECT   type ref to /VCXI/IF_CKX_OBJECT,
         LR_SPVCE    type ref to /VCXI/CL_VKSC_SPVCE.

  loop at ME->T_SPVCE into LR_OBJECT.
    move LR_OBJECT ?to LR_SPVCE.

    if LR_SPVCE->/VCXI/IF_CKX_OBJECT~GET_ID( )       eq IF_ID and
       LR_SPVCE->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) eq IR_SPVCE_PARENT.
      move LR_SPVCE to RR_SPVCE.
      exit.
    endif.
  endloop.

  if RR_SPVCE is not bound.
    if IR_SPVCE_PARENT is not bound.
***   Supervisor Element &1 can't be found.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSR'
                                            IF_MSGNO = '401'
                                            IF_MSGV1 = IF_ID ).
    else.
***   Supervisor Element &1 can't be found as child of &2.
      move IR_SPVCE_PARENT->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ID.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSR'
                                            IF_MSGNO = '402'
                                            IF_MSGV1 = IF_ID
                                            IF_MSGV2 = LF_ID ).
    endif.
  endif.

endmethod.
   method REMOVE_CHILDREN.

***  Process Children
     loop at CT_SPVRE_NEW into data(LR_SPVRE)
                         where TABLE_LINE->R_PARENT eq IR_SPVRE_PARENT.

***    Ensure child is not identified by LEVEL
       check not LINE_EXISTS( IT_SVCEL[ LEVEL = LR_SPVRE->F_GATKY+22 ] ).

       delete CT_SPVRE_NEW.

***    Remove children
       ME->REMOVE_CHILDREN( exporting IR_SPVRE_PARENT = IR_SPVRE_PARENT
                                      IT_SVCEL        = IT_SVCEL
                            changing  CT_SPVRE_NEW    = CT_SPVRE_NEW ).
     endloop.

   endmethod.
method SET_IDAT.

***------------------------------------------------------------------------------------------------
*** Check Instance exists
  check IR_IDAT_SVC is bound.

***------------------------------------------------------------------------------------------------
*** Set SmartVC Elements
  ME->SET_SVCEL( IT_SVCEL = IR_IDAT_SVC->T_SVCEL ).

*** Set SmartVC Routing
  ME->SET_SVCRT( IT_SVCRT = IR_IDAT_SVC->T_SVCRT ).

endmethod.
  method SET_SVCEL.

    data: LF_GATKY type /VCXI/VKSR_GATKY.
    data: LS_SVCEL type ZVCXI_XCI_S_SVCEL.
    data: LT_SPVRE_CURR type        /VCXI/VKSR_TT_SPVRE,
          LT_SPVRE_NEW  type        /VCXI/VKSR_TT_SPVRE.
    data: LR_SPVRE        type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE.



***------------------------------------------------------------------------------------------------
*** Check SmartVC Elements should be set
    check IT_SVCEL is not initial.

*** Get current Supervised Runtime Elements
    LT_SPVRE_CURR = ME->R_GATE->GET_SPVRE( ).

***------------------------------------------------------------------------------------------------
*** Keep all Elements if using LEVEL to identify (Update Mode)
    loop at IT_SVCEL into LS_SVCEL where LEVEL is not initial.
      LT_SPVRE_NEW = LT_SPVRE_CURR.
      exit.
    endloop.

*** Process Elements identified with Level
    loop at IT_SVCEL into LS_SVCEL where LEVEL is not initial.

***   Get Supervised Runtime Element
      LF_GATKY = ME->R_GATE->F_GATKY(22) && LS_SVCEL-LEVEL.
      read table LT_SPVRE_NEW into LR_SPVRE with key TABLE_LINE->F_GATKY = LF_GATKY.
      if SY-SUBRC ne 0.
***     No Element with LEVEL & was found to be filled.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCS'
                                              IF_MSGNO = '502'
                                              IF_MSGV1 = LS_SVCEL-LEVEL ).
      endif.

      if LS_SVCEL-UPDKZ ne ZCL_VCXI_XCI_IDAT_SVC=>C_UPDKZ_DELETE.
***     Fill supervised Element
        ME->FILL_SPVRE( IR_SPVRE = LR_SPVRE
                        IS_SVCEL = LS_SVCEL ).

        if LS_SVCEL-UPDKZ eq ZCL_VCXI_XCI_IDAT_SVC=>C_UPDKZ_REFRESH.
***       Remove existing children, which are not identified via LEVEL
          ME->REMOVE_CHILDREN( exporting IR_SPVRE_PARENT = LR_SPVRE
                                         IT_SVCEL        = IT_SVCEL
                               changing  CT_SPVRE_NEW    = LT_SPVRE_NEW ).
        endif.

***     Add Children, which are not identified via LEVEL
        ME->ADD_CHILDREN( exporting IR_SPVRE_PARENT = LR_SPVRE
                                    IF_IPARE        = LS_SVCEL-ISELF
                                    IF_CPARE        = LS_SVCEL-CSELF
                                    IT_SVCEL        = IT_SVCEL
                          changing  CT_SPVRE_NEW    = LT_SPVRE_NEW ).
      else.
***     Remove Elemenet
        delete LT_SPVRE_NEW  where TABLE_LINE eq LR_SPVRE.
        delete LT_SPVRE_CURR where TABLE_LINE eq LR_SPVRE.
      endif.
    endloop.

***------------------------------------------------------------------------------------------------
*** Process Roots w/o Level
    loop at IT_SVCEL into LS_SVCEL where IPARE is initial
                                    and  LEVEL is initial.

***   Find available Root
      loop at LT_SPVRE_CURR into LR_SPVRE
                           where TABLE_LINE->R_PARENT is not bound.
        if LR_SPVRE->GET_ID( ) eq LS_SVCEL-ISELF.
***       Check already used
          read table LT_SPVRE_NEW with key TABLE_LINE = LR_SPVRE
                                  transporting no fields.
          if SY-SUBRC eq 0.
***         Can't be used
            clear LR_SPVRE.
            continue.
          else.
***         Use
            exit.
          endif.
        else.
***       Can't be used
          clear LR_SPVRE.
          continue.
        endif.
      endloop.

      if LR_SPVRE is not bound.
***     Create Supervisor Runtime Element
        create object LR_SPVRE
          exporting
            IR_SPVCE  = ME->GET_SPVCE_BY_ID( IF_ID = LS_SVCEL-ISELF )
            IR_PARENT = LR_SPVRE_PARENT.
      endif.

***   Fill supervised Element
      ME->FILL_SPVRE( IR_SPVRE = LR_SPVRE
                      IS_SVCEL = LS_SVCEL ).
      append LR_SPVRE to LT_SPVRE_NEW.

***   Add Children
      ME->ADD_CHILDREN( exporting IR_SPVRE_PARENT = LR_SPVRE
                                  IF_IPARE        = LS_SVCEL-ISELF
                                  IF_CPARE        = LS_SVCEL-CSELF
                                  IT_SVCEL        = IT_SVCEL
                        changing  CT_SPVRE_NEW    = LT_SPVRE_NEW ).
    endloop.

***------------------------------------------------------------------------------------------------
*** Set Supervised Runtime Elements
    ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

  endmethod.
method SET_SVCRT.

  data:  LF_GUID          type        /VCXI/CKX_GUID,
         LF_CREATE        type        ABAP_BOOL.
  data:  LS_CEALI         type        /VCXI/VKSR_S_CEALI,
         LS_SVCRT         type        ZVCXI_XCI_S_SVCRT,
         LS_XML_BL_PRTE   type        ZVCXI_XCSR_S_XML_BL_PRTE,
         LS_ARBPL         type        ZVCXI_XCI_S_ARBPL.
  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE,
         LT_CEALI         type        /VCXI/VKSR_TT_CEALI,
         LT_BL_PRTE       type        ZVCXI_XCSR_TT_BL_PRTE,
         LT_ARBPL         type        /VCXI/CKX_TT_OBJECT.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_RTESPV     type ref to ZCL_VCXI_XCSR_PR_RTESPV,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA,
         LR_ARBPL         type ref to /VCXI/CL_VSMC_ARBPL,
         LR_BL_PRTE       type ref to ZCL_VCXI_XCSR_BL_PRTE,
         LR_RTESEL        type ref to ZCL_VCXI_XCSR_BL_PRTE.

  check IT_SVCRT is not initial.

***------------------------------------------------------------------------------------------------
*** Get all Routing Supervisor
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCSR_PR_RTESPV=>C_IPRVT_XCS_RTESPV
                                   IF_INUSE  = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
    move LR_GATE->R_CLSPR ?to LR_PR_RTESPV.
    check LR_PR_RTESPV is bound.

    LT_CEALI = LR_GATE->GET_CEALI( ).
    loop at LT_CEALI into LS_CEALI.
      loop at IT_SVCRT into LS_SVCRT
                      where IEALI eq LS_CEALI-IEALI.
        clear LR_RTESEL.

***     Refresh Auto Routing
        LR_PR_RTESPV->REFRESH_AUTO( IF_FORCE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
        if LS_SVCRT-T_XML_BL_PRTE is not initial.
***       Remove User-Routes before Deserialization
          loop at LR_PR_RTESPV->T_RTEALT into LR_BL_PRTE
                                         where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.
            LR_PR_RTESPV->DELETE_BL_PRTE( IR_BL_PRTE = LR_BL_PRTE ).
          endloop.
          loop at LR_PR_RTESPV->T_RTEINV into LR_BL_PRTE
                                         where TABLE_LINE->R_RTE_PRTE->F_RSRCE eq ZCL_VCXI_XCSR_BL_PRTE=>C_RSRCE_USER.
            LR_PR_RTESPV->DELETE_BL_PRTE( IR_BL_PRTE = LR_BL_PRTE ).
          endloop.

***       Get Application Data
          LR_APPDATA = ME->R_GATE->GET_APPDATA( ).

***       Deserialize all Routes
          free: LT_BL_PRTE.
          loop at LS_SVCRT-T_XML_BL_PRTE into LS_XML_BL_PRTE.
            LR_BL_PRTE = ZCL_VCXI_XCSR_BL_PRTE=>DESERIALIZE( IF_XML     = LS_XML_BL_PRTE-XML
                                                             IR_APPDATA = LR_APPDATA ).
            append LR_BL_PRTE to LT_BL_PRTE.

            if LS_XML_BL_PRTE-GUID_BL_PRTE eq LS_SVCRT-GUID_RTESEL.
              move LR_BL_PRTE to LR_RTESEL.
            endif.
          endloop.

***       Add, Update and Evaluate Routes
          LR_PR_RTESPV->UPDATE_BL_PRTE( IT_BL_PRTE = LT_BL_PRTE ).
        endif.

***------------------------------------------------------------------------------------------------
        if LS_SVCRT-GUID_RTESEL is initial.
***       Build Work Center Table
          free: LT_ARBPL,
                LF_CREATE.
          loop at LS_SVCRT-T_ARBPL into LS_ARBPL.
            if LS_ARBPL-T_PSTEP is not initial.
              move ABAP_TRUE to LF_CREATE.
              exit.
            endif.
            LF_GUID = /VCXI/CL_VSMC_ARBPL=>ENCRYPT_GUID( IF_WERKS = LS_ARBPL-WERKS
                                                         IF_ARBPL = LS_ARBPL-ARBPL ).
            LR_ARBPL ?= /VCXI/CL_VSMC_ARBPL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
            append LR_ARBPL to LT_ARBPL.
          endloop.

          if LF_CREATE eq ABAP_TRUE.
***         Create with Production Steps
            LR_RTESEL = ME->CREATE_BL_PRTE( IR_PR_RTESPV = LR_PR_RTESPV
                                            IS_SVCRT     = LS_SVCRT ).
          else.
***         Find Production Route
            LR_RTESEL = LR_PR_RTESPV->FIND_BL_PRTE( IT_ARBPL = LT_ARBPL ).
          endif.
        endif.

***------------------------------------------------------------------------------------------------
***     Set selected Production Route
        LR_PR_RTESPV->SET_RTESEL( IR_BL_PRTE = LR_RTESEL ).

***     Set Routing Option
        if LS_SVCRT-RTEOP is not initial.
          LR_PR_RTESPV->SET_RTEOP( IF_RTEOP = LS_SVCRT-RTEOP ).
        endif.

***     Set Routing Determination
        if LS_SVCRT-RTERD is not initial.
          LR_PR_RTESPV->SET_RTERD( IF_RTERD = LS_SVCRT-RTERD ).
        endif.

***     Set Relevancy Code
        if LS_SVCRT-RELCO is not initial.
          LR_PR_RTESPV->SET_RELCO( IF_RELCO = LS_SVCRT-RELCO ).
        endif.

      endloop.
    endloop.
  endloop.

endmethod.
