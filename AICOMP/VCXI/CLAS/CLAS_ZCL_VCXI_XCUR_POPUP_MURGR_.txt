
class ZCL_VCXI_XCUR_POPUP_MURGR definition
  public
  create protected .

public section.

  data F_ACTIVE_TAB type STRING read-only .
  data S_MURGR_VIS type ZVCXI_XCUR_S_MURGR_VIS read-only .
  data S_TAB_DESCR type ZVCXI_XCUR_S_TAB_DESCR read-only .
  data T_MUREL type ZVCXI_XCUR_TT_MUREL .
  data F_LOCKED type /VCXI/CKX_LOCKED read-only .

  methods DO_MODIFY_SCREEN
    importing
      !IF_REPID type SYREPID
      !IF_DYNNR type SYDYNNR .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_VIS
    importing
      !IS_MURGR_VIS type ZVCXI_XCUR_S_MURGR_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    changing
      !CF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IR_MURDE type ref to ZCL_VCXI_XCUR_MURDE optional
      !IS_MURGR type ZVCXI_XCUR_S_MURGR optional
      !IF_LOCKED type /VCXI/CKX_LOCKED default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_OBJECT type SYUCOMM value 'OBJECT_DETAILS' ##NO_TEXT.
  constants C_UC_OKAY type SYUCOMM value 'OKAY' ##NO_TEXT.
  data F_CMURG type ZVCXI_XCUR_CMURG .
  data R_GRID_MURFE type ref to ZCL_VCXI_XCUR_GRID_MURFE .
  data R_GRID_MURFP type ref to ZCL_VCXI_XCUR_GRID_MURFP .
  data R_GRID_MURUE type ref to ZCL_VCXI_XCUR_GRID_MURUE .
  data R_GRID_MURUP type ref to ZCL_VCXI_XCUR_GRID_MURUP .
  data R_MURDE type ref to ZCL_VCXI_XCUR_MURDE .
  data R_TOOLBAR_MUREL type ref to ZCL_VCXI_XCUR_TOOLBAR_MUREL .
  data T_MUROB type ZVCXI_XCUR_TT_MUROB .

  methods CHECK_MURFE
    returning
      value(RF_COMPLETE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_MURUE
    returning
      value(RF_COMPLETE) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_MURDE type ref to ZCL_VCXI_XCUR_MURDE
      !IS_MURGR type ZVCXI_XCUR_S_MURGR
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OBJECT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OKAY
    raising
      /VCXI/CX_CKX .
  methods INIT_MUREL
    raising
      /VCXI/CX_CKX .
  methods INIT_TAB_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_PF_STATUS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCUR_POPUP_MURGR definition
class ZCL_VCXI_XCUR_POPUP_MURGR implementation.
  method CHECK_MURFE.

    data: LS_MUREL type ZVCXI_XCUR_S_MUREL,
          LS_MURFE type ZVCXI_XCUR_S_MURFE.


*** Start positive
    RF_COMPLETE = ABAP_TRUE.

*** Look for unprocessed active Exits
    loop at ME->T_MUREL into LS_MUREL.
      loop at LS_MUREL-T_MURFE into LS_MURFE.
        if LINE_EXISTS( LS_MUREL-R_MUCEL->T_MUCFE[ IEXIT = LS_MURFE-IEXIT ] ) and
           LS_MUREL-R_MUCEL->T_MUCFE[ IEXIT = LS_MURFE-IEXIT ]-FMDEF is not initial and
           LS_MURFE-R_DATA is not bound.

***       Please maintain Definition of Exit-based Filter &1.
          message id 'ZVCXI_XCUR' type 'I' number '110' with LS_MURFE-IEXIT.

          RF_COMPLETE = ABAP_FALSE.
          exit.
        endif.
      endloop.
      if RF_COMPLETE eq ABAP_FALSE.

        exit.
      endif.
    endloop.

  endmethod.
  method CHECK_MURUE.

    data: LS_MUREL type ZVCXI_XCUR_S_MUREL,
          LS_MURUE type ZVCXI_XCUR_S_MURUE.


*** Start positive
    RF_COMPLETE = ABAP_TRUE.

*** Look for unprocessed active Exits
    loop at ME->T_MUREL into LS_MUREL.
      loop at LS_MUREL-T_MURUE into LS_MURUE.
        if LINE_EXISTS( LS_MUREL-R_MUCEL->T_MUCUE[ IEXIT = LS_MURUE-IEXIT ] ) and
           LS_MUREL-R_MUCEL->T_MUCUE[ IEXIT = LS_MURUE-IEXIT ]-FMDEF is not initial and
           LS_MURUE-R_DATA is not bound.

***       Please maintain Definition of Exit-based Update &1.
          message id 'ZVCXI_XCUR' type 'I' number '111' with LS_MURUE-IEXIT.

          RF_COMPLETE = ABAP_FALSE.
          exit.
        endif.
      endloop.
      if RF_COMPLETE eq ABAP_FALSE.

        exit.
      endif.
    endloop.

  endmethod.
  method CONSTRUCTOR.

    ME->R_MURDE  = IR_MURDE.
    ME->F_CMURG  = IS_MURGR-CMURG.
    ME->F_LOCKED = IF_LOCKED.

***--------------------------------------------------------------------------------------
*** Load current Runtime Elements
    ME->T_MUREL = IS_MURGR-T_MUREL.
    ME->T_MUROB = IS_MURGR-T_MUROB.

*** Initialize VIS Structure
    ME->S_MURGR_VIS-NOOBJ = LINES( IS_MURGR-T_MUROB ).
    ME->S_MURGR_VIS-SYSOM = IS_MURGR-SYSOM.

***--------------------------------------------------------------------------------------
*** Instantiate Toolbar
    if ME->F_LOCKED eq ABAP_TRUE.
      create object ME->R_TOOLBAR_MUREL
        exporting
          IR_POPUP_MURGR = ME.
    endif.

  endmethod.
  method DO_FREE.

    free: ME->R_MURDE,
          ME->F_CMURG,
          ME->T_MUREL,
          ME->T_MUROB,
          ME->S_MURGR_VIS.

***----------------------------------------------------------------------------
*** Toolbar
    if ME->R_TOOLBAR_MUREL is bound.
      ME->R_TOOLBAR_MUREL->DO_FREE( ).
      clear ME->R_TOOLBAR_MUREL.
    endif.

***----------------------------------------------------------------------------
*** Filter
    if ME->R_GRID_MURFP is bound.
      ME->R_GRID_MURFP->DO_FREE( ).
      clear ME->R_GRID_MURFP.
    endif.
    if ME->R_GRID_MURFE is bound.
      ME->R_GRID_MURFE->DO_FREE( ).
      clear ME->R_GRID_MURFE.
    endif.

*** Update
    if ME->R_GRID_MURUP is bound.
      ME->R_GRID_MURUP->DO_FREE( ).
      clear ME->R_GRID_MURUP.
    endif.
    if ME->R_GRID_MURUE is bound.
      ME->R_GRID_MURUE->DO_FREE( ).
      clear ME->R_GRID_MURUE.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    loop at screen.
***   Display Mode
      if ME->F_LOCKED  ne ABAP_TRUE and
         SCREEN-GROUP1 ne 'TAB' and          "Keep Tab open
         SCREEN-GROUP1 ne 'INF'.             "Keep Info Buttons open
        move 0 to SCREEN-INPUT.
        move 0 to SCREEN-REQUIRED.
      endif.

***   Hide additional tabs for Update Elements
      if SCREEN-NAME(13)   eq '0100S_TAB-TAB' and
         SCREEN-NAME+13(3) gt LINES( ME->T_MUREL ).
        SCREEN-INVISIBLE = '1'.
      endif.

      modify screen.
    endloop.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Set GUI Status
    ME->SET_PF_STATUS( ).

*** Refresh Toolbar
    if ME->R_TOOLBAR_MUREL is bound.
      ME->R_TOOLBAR_MUREL->REFRESH_TOOLBAR( ).
    endif.

*** Initialize Tab Description
    ME->INIT_TAB_DESCR( ).

***--------------------------------------------------------------------------------------
*** Initialize Update Runtime Element
    ME->INIT_MUREL( ).

  endmethod.
  method DO_UPDATE_VIS.

*** Full Update
    ME->S_MURGR_VIS = IS_MURGR_VIS.

  endmethod.
  method DO_USER_COMMAND.

***--------------------------------------------------------------------------------------
*** Check for Changes on Grid
    if ME->R_GRID_MURFP is bound.
      ME->R_GRID_MURFP->CHECK_CHANGED_DATA( ).
    endif.
    if ME->R_GRID_MURFE is bound.
      ME->R_GRID_MURFE->CHECK_CHANGED_DATA( ).
    endif.
    if ME->R_GRID_MURUP is bound.
      ME->R_GRID_MURUP->CHECK_CHANGED_DATA( ).
    endif.
    if ME->R_GRID_MURUE is bound.
      ME->R_GRID_MURUE->CHECK_CHANGED_DATA( ).
    endif.

***--------------------------------------------------------------------------------------
*** Process User Commands
    case CF_UCOMM.
      when C_UC_OKAY.
        ME->HANDLE_UC_OKAY( ).
      when C_UC_CANCEL.
        ME->HANDLE_UC_CANCEL( ).
      when C_UC_OBJECT.
        ME->HANDLE_UC_OBJECT( ).

    endcase.

*** Tab Change
    if CF_UCOMM cs '0100S_TAB-TAB'.
      move CF_UCOMM to ME->F_ACTIVE_TAB.
    endif.

*** User Command has been processed
    clear CF_UCOMM.

  endmethod.
  method HANDLE_UC_CANCEL.

*** Leave Popup
    leave to screen 0.

  endmethod.
  method HANDLE_UC_OBJECT.

*** Popup for Object Details
    ZCL_VCXI_XCUR_POPUP_MUROB=>START( exporting IF_LOCKED = ME->F_LOCKED
                                      changing  CT_MUROB  = ME->T_MUROB ).

*** Update Number of Object in VIS
    ME->S_MURGR_VIS-NOOBJ = LINES( ME->T_MUROB ).

  endmethod.
  method HANDLE_UC_OKAY.

    data: LS_MURGR  type ZVCXI_XCUR_S_MURGR.


    check ME->R_MURDE is bound.

*** Check Exit-based Filter and Update
    check ME->CHECK_MURFE( ).
    check ME->CHECK_MURUE( ).

***--------------------------------------------------------------------------------------
*** Create new Update Group
    if ME->F_CMURG is initial.
      ME->F_CMURG = ME->R_MURDE->ADD_MURGR( ).
    endif.

***--------------------------------------------------------------------------------------
*** Update Update Group
    LS_MURGR-CMURG   = ME->F_CMURG.
    LS_MURGR-SYSOM   = ME->S_MURGR_VIS-SYSOM.
    LS_MURGR-T_MUROB = ME->T_MUROB.
    LS_MURGR-T_MUREL = ME->T_MUREL.

    ME->R_MURDE->UPDATE_MURGR( IS_MURGR = LS_MURGR ).

***--------------------------------------------------------------------------------------
*** Leave Popup
    leave to screen 0.

  endmethod.
  method INIT_MUREL.

    data: LF_INDEX type I.


*** Check Active Tab exists
    if ME->F_ACTIVE_TAB is not initial.
      LF_INDEX = ME->F_ACTIVE_TAB+14.
      if not LINE_EXISTS( ME->T_MUREL[ LF_INDEX ] ).
        clear ME->F_ACTIVE_TAB.
      endif.
    endif.

*** Set Default Active Tab
    if ME->F_ACTIVE_TAB is initial and
       LINES( ME->T_MUREL ) gt 0.
      ME->F_ACTIVE_TAB = '0100S_TAB-TAB001'.
    endif.

*** Get Index based on Active Tab
    if ME->F_ACTIVE_TAB is not initial.
      LF_INDEX = ME->F_ACTIVE_TAB+14.
    endif.

***--------------------------------------------------------------------------------------
*** Ensure Grids are avaliable when needed
    if ME->T_MUREL is not initial and
       LINE_EXISTS( ME->T_MUREL[ LF_INDEX ] ).
***   Filter
      if ME->R_GRID_MURFP is not bound.
        ME->R_GRID_MURFP = new #( IR_POPUP_MURGR = ME ).
      endif.
      if ME->R_GRID_MURFE is not bound.
        ME->R_GRID_MURFE = new #( IR_POPUP_MURGR = ME ).
      endif.
***   Update
      if ME->R_GRID_MURUP is not bound.
        ME->R_GRID_MURUP = new #( IR_POPUP_MURGR = ME ).
      endif.
      if ME->R_GRID_MURUE is not bound.
        ME->R_GRID_MURUE = new #( IR_POPUP_MURGR = ME ).
      endif.
    else.
***   Filter
      if ME->R_GRID_MURFP is bound.
        ME->R_GRID_MURFP->DO_FREE( ).
        clear ME->R_GRID_MURFP.
      endif.
      if ME->R_GRID_MURFE is bound.
        ME->R_GRID_MURFE->DO_FREE( ).
        clear ME->R_GRID_MURFE.
      endif.
***   Update
      if ME->R_GRID_MURUP is bound.
        ME->R_GRID_MURUP->DO_FREE( ).
        clear ME->R_GRID_MURUP.
      endif.
      if ME->R_GRID_MURUE is bound.
        ME->R_GRID_MURUE->DO_FREE( ).
        clear ME->R_GRID_MURUE.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Refresh of Grids
    if ME->R_GRID_MURFP is bound.
      ME->R_GRID_MURFP->REFRESH_GRID( IF_INDEX = LF_INDEX ).
    endif.
    if ME->R_GRID_MURFE is bound.
      ME->R_GRID_MURFE->REFRESH_GRID( IF_INDEX = LF_INDEX ).
    endif.
    if ME->R_GRID_MURUP is bound.
      ME->R_GRID_MURUP->REFRESH_GRID( IF_INDEX = LF_INDEX ).
    endif.
    if ME->R_GRID_MURUE is bound.
      ME->R_GRID_MURUE->REFRESH_GRID( IF_INDEX = LF_INDEX ).
    endif.

  endmethod.
  method INIT_TAB_DESCR.

    data: LS_MUREL type ZVCXI_XCUR_S_MUREL.
    field-symbols: <F_DESCR> type ANY.


    clear ME->S_TAB_DESCR.
    loop at ME->T_MUREL into LS_MUREL.
      assign component SY-TABIX of structure ME->S_TAB_DESCR to <F_DESCR>.

      <F_DESCR> = LS_MUREL-R_MUCEL->/VCXI/IF_CKX_OBJECT~GET_DESCR( ).
      if <F_DESCR> is initial.
        <F_DESCR> = LS_MUREL-R_MUCEL->/VCXI/IF_CKX_OBJECT~GET_ID( ).
      endif.
    endloop.

  endmethod.
  method SET_PF_STATUS.

    data:  LT_EXCLUDE type standard table of SYUCOMM.


***----------------------------------------------------------------------------
*** Exclude Okay when not Locked
    if ME->F_LOCKED ne ABAP_TRUE.
      append C_UC_OKAY to LT_EXCLUDE.
    endif.

***----------------------------------------------------------------------------
*** Set PF-Status
    set pf-status '0100' of program 'SAPLZVCXI_XCUR_POPUP_MURGR'
                         excluding LT_EXCLUDE.

  endmethod.
  method START.

    data: LR_POPUP_MURGR type ref to ZCL_VCXI_XCUR_POPUP_MURGR.


*** Create Instance
    create object LR_POPUP_MURGR
      exporting
        IR_MURDE  = IR_MURDE
        IS_MURGR  = IS_MURGR
        IF_LOCKED = IF_LOCKED.

*** Call Popup
    call function 'ZVCXI_XCUR_POPUP_MURGR_START'
      exporting
        IR_POPUP_MURGR = LR_POPUP_MURGR.

*** Free
    LR_POPUP_MURGR->DO_FREE( ).

  endmethod.
