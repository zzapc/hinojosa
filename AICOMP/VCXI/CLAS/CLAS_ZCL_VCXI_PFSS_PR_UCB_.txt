
class ZCL_VCXI_PFSS_PR_UCB definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_P0SS_CALIP .
  interfaces ZIF_VCXI_P0SS_WEIGHT .
  interfaces ZIF_VCXI_PFSS_SBINFO .
  interfaces ZIF_VCXI_XCSS_OPQTY .

  aliases C_IEVNT_O_CALIP_CHANGED
    for ZIF_VCXI_P0SS_CALIP~C_IEVNT_O_CALIP_CHANGED .
  aliases C_IEVNT_O_WDRYW_CHANGED
    for ZIF_VCXI_P0SS_WEIGHT~C_IEVNT_O_WDRYW_CHANGED .
  aliases C_IEVNT_O_WWETW_CHANGED
    for ZIF_VCXI_P0SS_WEIGHT~C_IEVNT_O_WWETW_CHANGED .

  constants C_IPRVT_PF_UCB type /VCXI/VKSC_IPRVT value 'ZVCXI_PFSS_UCB'. "#EC NOTEXT

  methods GET_GRDIR
    returning
      value(RF_GRDIR) type ZVCXI_PFSS_GRDIR
    raising
      /VCXI/CX_CKX .
  methods GET_PAPGR
    returning
      value(RF_PAPGR) type ZVCXI_PFSS_PAPGR
    raising
      /VCXI/CX_CKX .
  methods SET_PAPGR
    importing
      !IF_PAPGR type ZVCXI_PFSS_PAPGR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPT
    returning
      value(RF_NOUPT) type ZVCXI_P0SS_NOUPT
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_REFERENCES type /VCXI/VKSC_IEVNT value 'INIT_REFERENCES'. "#EC NOTEXT
  constants C_IEVNT_I_REQ_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_CALIP_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_REQ_NOUPT_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_NOUPT_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_REQ_WDRYW_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_WDRYW_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_REQ_WWETW_CHANGED type /VCXI/VKSC_IEVNT value 'REQUEST_WWETW_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_NOUPT_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPT_CHANGED'. "#EC NOTEXT
  data R_PR_SPEC_UCB type ref to ZCL_VCXI_PFSS_PR_SPEC_UCB .

  methods ADJUST_OPQTY_UMREZ_UMREN
    changing
      !CF_UMREZ type UMREZ
      !CF_UMREN type UMREN
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_AREA_WEIGHT
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_REFERENCES
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PFSS_PR_UCB definition
class ZCL_VCXI_PFSS_PR_UCB implementation.
method ADJUST_OPQTY_UMREZ_UMREN.

  data:  LF_COMPR           type        ZVCXI_P0SS_COMPR.
  data:  LS_PCDIM           type        ZVCXI_P0SP_S_PCDIM.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI         type ref to ZCL_VCXI_P0SS_PR_LAMI,
         LR_SHTDIM          type ref to ZIF_VCXI_P0SS_SHTDIM.

***--------------------------------------------------------------------------------------
*** Get Lamination Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.

*** Get Total Number Ups of Lamination
    if LR_PR_LAMI is bound.
      move LR_PR_LAMI->GET_NOUPT( ) to CF_UMREN.
    endif.

  else.
***--------------------------------------------------------------------------------------
*** Get Sheet Dimension Reference
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_SHTDIM=>C_IPRVT_P0_SHTDIM
                                     IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_SHTDIM.
        catch CX_SY_MOVE_CAST_ERROR.
          exit.
      endtry.
    endif.
    check LR_SHTDIM is bound.

*** Get Gross Sheet Dimension
    move LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_GROSS ) to LS_PCDIM.
    move LS_PCDIM-PCUPS to CF_UMREN.
  endif.

endmethod.
method GET_GRAMM.

  check ME->R_PR_SPEC_UCB is bound.
  RS_GRAMM = ME->R_PR_SPEC_UCB->GET_GRAMM( ).

endmethod.
method GET_GRDIR.

  check ME->R_PR_SPEC_UCB is bound.
  RF_GRDIR = ME->R_PR_SPEC_UCB->GET_GRDIR( ).

endmethod.
method GET_NOUPT.

  data:  LS_PCDIM           type        ZVCXI_P0SP_S_PCDIM.
  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_LAMI         type ref to ZCL_VCXI_P0SS_PR_LAMI,
         LR_SHTDIM          type ref to ZIF_VCXI_P0SS_SHTDIM.

***--------------------------------------------------------------------------------------
*** Get Lamination Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_LAMI=>C_IPRVT_P0_LAMI
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_LAMI.
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.

*** Get Total Number Ups of Lamination
    if LR_PR_LAMI is bound.
      move LR_PR_LAMI->GET_NOUPT( ) to RF_NOUPT.
    endif.

  else.
***--------------------------------------------------------------------------------------
*** Get Sheet Dimension Reference
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_P0SS_SHTDIM=>C_IPRVT_P0_SHTDIM
                                     IF_INUSE = ABAP_TRUE ).

    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_SHTDIM.
        catch CX_SY_MOVE_CAST_ERROR.
          exit.
      endtry.
    endif.
    check LR_SHTDIM is bound.

*** Get Gross Sheet Dimension
    move LR_SHTDIM->GET_PCDIM( IF_POOTI = ZIF_VCXI_P0SS_SHTDIM=>C_POOTI_GROSS ) to LS_PCDIM.
    move LS_PCDIM-PCUPS to RF_NOUPT.
  endif.

endmethod.
method GET_PAPGR.

  check ME->R_PR_SPEC_UCB is bound.
  RF_PAPGR = ME->R_PR_SPEC_UCB->GET_PAPGR( ).

endmethod.
method GET_PRVDR_AREA_WEIGHT.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.

***------------------------------------------------------------------------------------------------
*** Get Area&Weight Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PFSS_PR_AREA_WGT_UCB=>C_IPRVT_PF_AREA_WGT_UCB
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into RR_GATE index 1.

  if RR_GATE is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_PFSS_PR_AREA_WGT_UCB=>C_IPRVT_PF_AREA_WGT_UCB
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_INIT_REFERENCES.
      ME->HANDLE_INIT_REFERENCES( ).

    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

    when C_IEVNT_I_REQ_CALIP_CHANGED.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).

    when C_IEVNT_I_REQ_WDRYW_CHANGED.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WDRYW_CHANGED ).

    when C_IEVNT_I_REQ_WWETW_CHANGED.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WWETW_CHANGED ).

    when C_IEVNT_I_REQ_NOUPT_CHANGED.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPT_CHANGED ).

    when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QITEM.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QITEM_CHANGED ).

    when ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_I_RECALC_QCALC.
***   Forward Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_OPQTY=>C_IEVNT_O_QCALC_CHANGED ).
  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

  data:  LT_GATE            type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE.

  free: ME->R_PR_SPEC_UCB.

***------------------------------------------------------------------
*** Get Specification UCB Reference
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PFSS_PR_SPEC_UCB=>C_IPRVT_PF_SPEC_UCB
                                   IF_INUSE = ABAP_TRUE ).

  read table LT_GATE into LR_GATE index 1.
  if SY-SUBRC eq 0.
    try.
        move LR_GATE->R_CLSPR ?to ME->R_PR_SPEC_UCB.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: ME->R_PR_SPEC_UCB.
    endtry.
  endif.

  if ME->R_PR_SPEC_UCB is not bound.
*** Provider &1 is not available for &2.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '010'
        IF_MSGV1 = ZCL_VCXI_PFSS_PR_SPEC_UCB=>C_IPRVT_PF_SPEC_UCB
        IF_MSGV2 = ME->R_GATE->F_ID ).
  endif.

endmethod.
method HANDLE_SET_DEFAULT.

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method SET_GRAMM.

  data: LS_GRAMM type ZVCXI_P0SS_S_GRAMM.

  if ME->R_PR_SPEC_UCB is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

  check ME->R_PR_SPEC_UCB is bound.

  if IS_GRAMM-GRAMM_UOM is not initial.
    move IS_GRAMM to LS_GRAMM.
  else.
    LS_GRAMM = ME->GET_GRAMM( ).
    move IS_GRAMM-GRAMM to LS_GRAMM-GRAMM.
  endif.

  ME->R_PR_SPEC_UCB->SET_GRAMM( IS_GRAMM = LS_GRAMM
                                IF_SETBY = IF_SETBY ).

endmethod.
method SET_PAPGR.

  if ME->R_PR_SPEC_UCB is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

  check ME->R_PR_SPEC_UCB is bound.

  ME->R_PR_SPEC_UCB->SET_PAPGR( IF_PAPGR = IF_PAPGR
                                IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_P0SS_CALIP~GET_CALIP.

  data: LF_POOTI    type          ZVCXI_P0S_POOTI,
        LF_CONTINUE type          ABAP_BOOL.
  data: LT_POOTI    type table of ZVCXI_P0S_POOTI.

  split IF_POOTI at ZIF_VCXI_P0SS_CALIP~C_POOTI_SEP into table LT_POOTI.

  loop at LT_POOTI into LF_POOTI.
    condense LF_POOTI.
    check LF_POOTI eq '*'     or
          LF_POOTI eq 'BASE'.

    LF_CONTINUE = ABAP_TRUE.
    exit.
  endloop.

  check LF_CONTINUE eq ABAP_TRUE.

  if ME->R_PR_SPEC_UCB is not bound.
    ME->HANDLE_INIT_REFERENCES( ).
  endif.

  check ME->R_PR_SPEC_UCB is bound.
  RS_CALIP = ME->R_PR_SPEC_UCB->GET_CALIP( IF_POOTI = IF_POOTI ).

endmethod.
method ZIF_VCXI_P0SS_WEIGHT~GET_WDRYW.

  data:  LS_WDRNP           type        ZVCXI_P0SS_S_WDRNP,
         LS_ABLAN           type        ZVCXI_P0SS_S_ABLAN.
  data:  LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_AREA_WEIGHT  type ref to ZCL_VCXI_PFSS_PR_AREA_WGT_UCB.

*** Get Area&Weight
  LR_GATE = ME->GET_PRVDR_AREA_WEIGHT( ).
  check LR_GATE is bound.
  move LR_GATE->R_CLSPR ?to LR_PR_AREA_WEIGHT.

*** Get Net Dry Weight per Piece
  move LR_PR_AREA_WEIGHT->GET_WDRNP( ) to LS_WDRNP.
  move LS_WDRNP-WDRNP      to ES_WDRYW-WDRYW.
  move LS_WDRNP-WDRNP_UOM  to ES_WDRYW-WDRYW_UOM.

*** Get Net Blank Area
  move LR_PR_AREA_WEIGHT->GET_ABLAN( ) to LS_ABLAN.
  move LS_ABLAN-ABLAN     to ES_WDRYA-WDRYA.
  move LS_ABLAN-ABLAN_UOM to ES_WDRYA-WDRYA_UOM.

endmethod.
method ZIF_VCXI_P0SS_WEIGHT~GET_WWETW.

  data:  LS_WDRYA  TYPE ZVCXI_P0SS_S_WDRYA,
         LS_WDRYW  TYPE ZVCXI_P0SS_S_WDRYW.

*** Use Dry Weight of CB also for Wet Weight
  ME->ZIF_VCXI_P0SS_WEIGHT~GET_WDRYW( importing ES_WDRYA = LS_WDRYA
                                                ES_WDRYW = LS_WDRYW ).

  move LS_WDRYW-WDRYW      to ES_WWETW-WWETW.
  move LS_WDRYW-WDRYW_UOM  to ES_WWETW-WWETW_UOM.

  move LS_WDRYA-WDRYA     to ES_WWETA-WWETA.
  move LS_WDRYA-WDRYA_UOM to ES_WWETA-WWETA_UOM.

endmethod.
method ZIF_VCXI_PFSS_SBINFO~GET_GRAMM.

  RS_GRAMM = ME->GET_GRAMM( ).

endmethod.
method ZIF_VCXI_PFSS_SBINFO~GET_GRDIR.

  RF_GRDIR = ME->GET_GRDIR( ).

endmethod.
method ZIF_VCXI_PFSS_SBINFO~GET_PAPGR.

  RF_PAPGR = ME->GET_PAPGR( ).

endmethod.
method ZIF_VCXI_PFSS_SBINFO~IS_EDITABLE.

  EF_SBINFO = ABAP_TRUE.
  EF_CALIP  = ABAP_FALSE.
  EF_MATNR  = ABAP_FALSE.

endmethod.
method ZIF_VCXI_PFSS_SBINFO~IS_VISIBLE.

  EF_SBINFO = ABAP_TRUE.
  EF_CALIP  = ABAP_TRUE.
  EF_MATNR  = ABAP_FALSE.

endmethod.
method ZIF_VCXI_PFSS_SBINFO~SET_CALIP.

*** Not needed

endmethod.
method ZIF_VCXI_PFSS_SBINFO~SET_GRAMM.

  ME->SET_GRAMM( IS_GRAMM = IS_GRAMM
                 IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_PFSS_SBINFO~SET_MATNR.

*** Not needed!

endmethod.
method ZIF_VCXI_PFSS_SBINFO~SET_PAPGR.

  ME->SET_PAPGR( IF_PAPGR = IF_PAPGR
                 IF_SETBY = IF_SETBY ).

endmethod.
method ZIF_VCXI_XCSS_OPQTY~GET_QCALC.

  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

*** Get Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    if LR_OPQTY eq ME.
***   Using oneself as Provider for Operation Quantity is not allowed. &1
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSS'
                                            IF_MSGNO = '301'
                                            IF_MSGV1 = ME->R_GATE->F_ID ).
    endif.

    LR_OPQTY->GET_QCALC( importing ES_QCALC_BASE = ES_QCALC_BASE
                                   EF_UMREZ      = EF_UMREZ
                                   EF_UMREN      = EF_UMREN ).
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY-OPQTY     to ES_QCALC_BASE-QCALC.
    move LR_APPDATA->S_OPQTY-OPQTY_UOM to ES_QCALC_BASE-QCALC_UOM.
    move 1                             to EF_UMREZ.
    move 1                             to EF_UMREN.
  endif.

***--------------------------------------------------------------------------------------
*** Adjust Numenator and Denominator
  ME->ADJUST_OPQTY_UMREZ_UMREN( changing CF_UMREZ = EF_UMREZ
                                         CF_UMREN = EF_UMREN ).

***--------------------------------------------------------------------------------------
*** Calculate own Quantity
  if EF_UMREN ne 0.
    ES_QCALC_SELF-QCALC   = ES_QCALC_BASE-QCALC * EF_UMREZ / EF_UMREN.
  endif.
  ES_QCALC_SELF-QCALC_UOM = ES_QCALC_BASE-QCALC_UOM.

endmethod.
method ZIF_VCXI_XCSS_OPQTY~GET_QITEM.

  data:  LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
         LR_OPQTY         type ref to ZIF_VCXI_XCSS_OPQTY,
         LR_APPDATA       type ref to /VCXI/CL_VKSR_APPDATA.

***--------------------------------------------------------------------------------------
*** Get Gates of Operation Quantity
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_XCSS_OPQTY=>C_IPRVT_XCS_OPQTY
                                   IF_INUSE  = ABAP_TRUE ).
*** Find Inline
  loop at LT_GATE into LR_GATE.
    check ME->R_GATE->IS_IN_LINE( IR_GATE = LR_GATE ) eq ABAP_TRUE.
    try.
        move LR_GATE->R_CLSPR ?to LR_OPQTY.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_OPQTY.
    endtry.
  endloop.
*** Take first
  if LR_OPQTY is not bound.
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_OPQTY.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_OPQTY.
      endtry.
    endif.
  endif.

*** Get Quantity of Provider or use Application Data
  if LR_OPQTY is bound.
    if LR_OPQTY eq ME.
***   Using oneself as Provider for Operation Quantity is not allowed. &1
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCSS'
                                            IF_MSGNO = '301'
                                            IF_MSGV1 = ME->R_GATE->F_ID ).
    endif.

    LR_OPQTY->GET_QITEM( importing ES_QITEM_BASE = ES_QITEM_BASE
                                   EF_UMREZ      = EF_UMREZ
                                   EF_UMREN      = EF_UMREN ).
  else.
    LR_APPDATA  = ME->R_GATE->GET_APPDATA( ).
    move LR_APPDATA->S_OPQTY-OPQTY     to ES_QITEM_BASE-QITEM.
    move LR_APPDATA->S_OPQTY-OPQTY_UOM to ES_QITEM_BASE-QITEM_UOM.
    move 1                             to EF_UMREZ.
    move 1                             to EF_UMREN.
  endif.

***--------------------------------------------------------------------------------------
*** Adjust Numenator and Denominator
  ME->ADJUST_OPQTY_UMREZ_UMREN( changing CF_UMREZ = EF_UMREZ
                                         CF_UMREN = EF_UMREN ).

***--------------------------------------------------------------------------------------
*** Calculate own Quantity
  if EF_UMREN ne 0.
    ES_QITEM_SELF-QITEM   = ES_QITEM_BASE-QITEM * EF_UMREZ / EF_UMREN.
  endif.
  ES_QITEM_SELF-QITEM_UOM = ES_QITEM_BASE-QITEM_UOM.

endmethod.
