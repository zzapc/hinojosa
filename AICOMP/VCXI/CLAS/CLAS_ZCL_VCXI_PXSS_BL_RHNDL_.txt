
class ZCL_VCXI_PXSS_BL_RHNDL definition
  public
  create protected .

public section.

  constants C_PI type F value '3.141592653589793' ##NO_TEXT.
  constants C_MAX type CHAR3 value 'MAX' ##NO_TEXT.
  constants C_MIN type CHAR3 value 'MIN' ##NO_TEXT.

  class-methods CALC_BY_RDIMTA
    importing
      !IS_RDIMTA type ZVCXI_PXS_S_RDIMTA
      !IS_WIDIM type ZVCXI_PXS_S_WIDIM
      !IS_CRDIO type ZVCXI_PXS_S_CRDIO
      !IS_CRWGT type ZVCXI_PXS_S_CRWGT
    exporting
      !ES_RDITA type ZVCXI_PXS_S_RDITA
      !ES_RLETA type ZVCXI_PXS_S_RLETA
      !ES_RWGTA type ZVCXI_PXS_S_RWGTA
    raising
      /VCXI/CX_CKX .
  class-methods CALC_CLETA
    importing
      !IS_WIWID type ZVCXI_PXS_S_WIWID
      !IS_CRMAR type ZVCXI_PXS_S_CRMAR
      !IF_RLPCR type ZVCXI_PXS_RLPCR
    returning
      value(RS_CLETA) type ZVCXI_PXS_S_CLETA
    raising
      /VCXI/CX_CKX .
  class-methods CALC_DIMEN_BY_PERC
    importing
      !IF_PERC type ZVCXI_PXS_PERC
      !IS_CALCV_DIMTA type ZVCXI_XCS_S_CALCV
      !IF_MINMAX type CHAR3
    changing
      !CF_DIMEN type ANY
    raising
      /VCXI/CX_CKX .
  class-methods CALC_PERC_BY_DIMEN
    importing
      !IS_CALCV_DIMEN type ZVCXI_XCS_S_CALCV
      !IS_CALCV_DIMTA type ZVCXI_XCS_S_CALCV
      !IF_MINMAX type CHAR3
    returning
      value(RF_PERC) type ZVCXI_PXS_PERC
    raising
      /VCXI/CX_CKX .
  class-methods CALC_RLDIA_BY_RLLEN
    importing
      !IS_RLLEN type ZVCXI_PXS_S_RLLEN
      !IS_WITHI type ZVCXI_PXS_S_WITHI
      !IS_CRDIO type ZVCXI_PXS_S_CRDIO
      !IF_RLDIA_UOM type /VCXI/CKX_UOM
    returning
      value(RS_RLDIA) type ZVCXI_PXS_S_RLDIA
    raising
      /VCXI/CX_CKX .
  class-methods CALC_RLLEN_BY_RLDIA
    importing
      !IS_RLDIA type ZVCXI_PXS_S_RLDIA
      !IS_WITHI type ZVCXI_PXS_S_WITHI
      !IS_CRDIO type ZVCXI_PXS_S_CRDIO
      !IF_RLLEN_UOM type /VCXI/CKX_UOM
    returning
      value(RS_RLLEN) type ZVCXI_PXS_S_RLLEN
    raising
      /VCXI/CX_CKX .
  class-methods CALC_RLLEN_BY_RLWGT
    importing
      !IS_RLWGT type ZVCXI_PXS_S_RLWGT
      !IS_CRWGT type ZVCXI_PXS_S_CRWGT
      !IS_WIWID type ZVCXI_PXS_S_WIWID
      !IS_WISWG type ZVCXI_PXS_S_WISWG
    returning
      value(RS_RLLEN) type ZVCXI_PXS_S_RLLEN
    raising
      /VCXI/CX_CKX .
  class-methods CALC_RLPCR
    importing
      !IS_WIWID type ZVCXI_PXS_S_WIWID
      !IS_CRMAR type ZVCXI_PXS_S_CRMAR
      !IS_CRLEN type ZVCXI_PXS_S_CRLEN
    returning
      value(RF_RLPCR) type ZVCXI_PXS_RLPCR
    raising
      /VCXI/CX_CKX .
  class-methods CALC_RLWGT_BY_RLLEN
    importing
      !IS_RLLEN type ZVCXI_PXS_S_RLLEN
      !IS_CRWGT type ZVCXI_PXS_S_CRWGT
      !IS_WIWID type ZVCXI_PXS_S_WIWID
      !IS_WISWG type ZVCXI_PXS_S_WISWG
    returning
      value(RS_RLWGT) type ZVCXI_PXS_S_RLWGT
    raising
      /VCXI/CX_CKX .
  class-methods GET_DFLT_FG
    importing
      !IF_WERKS type WERKS_D
      !IF_KUNAG type KUNAG
      !IF_KUNWE type KUNWE
    returning
      value(RS_RHNDL_DFLT) type ZVCXI_PXSS_S_RHNDL_DFLT
    raising
      /VCXI/CX_CKX .
  class-methods GET_DFLT_WIP
    importing
      !IF_WERKS type WERKS_D
      !IF_ARBPL type ARBPL
    returning
      value(RS_RHNDL_DFLT) type ZVCXI_PXSS_S_RHNDL_DFLT
    raising
      /VCXI/CX_CKX .
  class-methods GET_WIGNA
    importing
      !IF_WISID type ZVCXI_PXS_WISID
      !IF_WIDIR type ZVCXI_PXS_WIDIR
      !IF_EYEMP type ZVCXI_PXS_EYEMP
    returning
      value(RF_WIGNA) type ZVCXI_PXS_WIGNA .
protected section.
private section.
endclass. "ZCL_VCXI_PXSS_BL_RHNDL definition
class ZCL_VCXI_PXSS_BL_RHNDL implementation.
  method CALC_BY_RDIMTA.

    case IS_RDIMTA-RDMTA.
***--------------------------------------------------------------------------------------
      when 'D'.   "Diameter
***     Use as Roll Diameter
        ES_RDITA = value #( RDITA     = IS_RDIMTA-S_RDVTA-RDVTA
                            RDITA_UOM = IS_RDIMTA-S_RDVTA-RDVTA_UOM ).
***     Calculate Roll Length
        ES_RLETA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLLEN_BY_RLDIA( IS_RLDIA     = ES_RDITA
                                                                                 IS_WITHI     = IS_WIDIM-S_WITHI
                                                                                 IS_CRDIO     = IS_CRDIO
                                                                                 IF_RLLEN_UOM = ES_RLETA-RLETA_UOM )
                                    mapping RLETA     = RLLEN
                                            RLETA_UOM = RLLEN_UOM ).
***     Calculate Roll Weight
        ES_RWGTA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLWGT_BY_RLLEN( IS_RLLEN = ES_RLETA
                                                                                 IS_CRWGT = IS_CRWGT
                                                                                 IS_WIWID = IS_WIDIM-S_WIWID
                                                                                 IS_WISWG = IS_WIDIM-S_WISWG )
                                    mapping RWGTA     = RLWGT
                                            RWGTA_UOM = RLWGT_UOM ).

***--------------------------------------------------------------------------------------
      when 'L'.    "Length
***     Use as Roll Length
        ES_RLETA = value #( RLETA     = IS_RDIMTA-S_RDVTA-RDVTA
                            RLETA_UOM = IS_RDIMTA-S_RDVTA-RDVTA_UOM ).
***     Calculate Roll Diameter
        ES_RDITA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLDIA_BY_RLLEN( IS_RLLEN     = ES_RLETA
                                                                                 IS_WITHI     = IS_WIDIM-S_WITHI
                                                                                 IS_CRDIO     = IS_CRDIO
                                                                                 IF_RLDIA_UOM = ES_RDITA-RDITA_UOM )
                                    mapping RDITA     = RLDIA
                                            RDITA_UOM = RLDIA_UOM ).
***     Calculate Roll Weight
        ES_RWGTA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLWGT_BY_RLLEN( IS_RLLEN = ES_RLETA
                                                                                 IS_CRWGT = IS_CRWGT
                                                                                 IS_WIWID = IS_WIDIM-S_WIWID
                                                                                 IS_WISWG = IS_WIDIM-S_WISWG )
                                    mapping RWGTA     = RLWGT
                                            RWGTA_UOM = RLWGT_UOM ).

***--------------------------------------------------------------------------------------
      when 'W'.    "Weight
***     Use as Roll Weight
        ES_RWGTA = value #( RWGTA     = IS_RDIMTA-S_RDVTA-RDVTA
                            RWGTA_UOM = IS_RDIMTA-S_RDVTA-RDVTA_UOM ).
***     Calculate Roll Diameter
        ES_RDITA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLDIA_BY_RLLEN( IS_RLLEN     = ES_RLETA
                                                                                 IS_WITHI     = IS_WIDIM-S_WITHI
                                                                                 IS_CRDIO     = IS_CRDIO
                                                                                 IF_RLDIA_UOM = ES_RDITA-RDITA_UOM )
                                    mapping RDITA     = RLDIA
                                            RDITA_UOM = RLDIA_UOM ).
***     Calculate Roll Length
        ES_RLETA = corresponding #( ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLLEN_BY_RLDIA( IS_RLDIA     = ES_RDITA
                                                                                 IS_WITHI     = IS_WIDIM-S_WITHI
                                                                                 IS_CRDIO     = IS_CRDIO
                                                                                 IF_RLLEN_UOM = ES_RLETA-RLETA_UOM )
                                    mapping RLETA     = RLLEN
                                            RLETA_UOM = RLLEN_UOM ).
    endcase.

  endmethod.
  method CALC_CLETA.

    data: LS_CALCV type  ZVCXI_XCS_S_CALCV.


    check IS_WIWID is not initial.

*** Start with Winding Width
    move IS_WIWID-WIWID     to LS_CALCV-CALCV.
    move IS_WIWID-WIWID_UOM to LS_CALCV-CALCV_UOM.

*** Add Core Margin
    if IS_CRMAR-CRMAR_UOM is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV-CALCV
                                                          IF_CALCV_UOM_1 = LS_CALCV-CALCV_UOM
                                                          IF_CALCV_2     = IS_CRMAR-CRMAR
                                                          IF_CALCV_UOM_2 = IS_CRMAR-CRMAR_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                          IF_UOM         = LS_CALCV-CALCV_UOM
                                                importing EF_CALCV       = LS_CALCV-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).
***   No negative Value
      LS_CALCV-CALCV = cond #( when LS_CALCV-CALCV lt 0 then 0 else LS_CALCV-CALCV ).
    endif.

*** Multiply by Rolls/Core
    RS_CLETA-CLETA     = LS_CALCV-CALCV * IF_RLPCR.
    RS_CLETA-CLETA_UOM = LS_CALCV-CALCV_UOM.

  endmethod.
  method CALC_DIMEN_BY_PERC.

    data: LS_CALCV_DIMEN type ZVCXI_XCS_S_CALCV.


    check IS_CALCV_DIMTA-CALCV     is not initial and
          IS_CALCV_DIMTA-CALCV_UOM is not initial.

    case IF_MINMAX.

***   ( 1 – Min % / 100 )
      when C_MIN.
        LS_CALCV_DIMEN-CALCV = 1 - ( IF_PERC / 100 ).

***   ( 1 + Max % / 100 )
      when C_MAX.
        LS_CALCV_DIMEN-CALCV = 1 + ( IF_PERC / 100 ).

    endcase.

*** Target Value * [Min,Max] Value
    LS_CALCV_DIMEN-CALCV     = IS_CALCV_DIMTA-CALCV * LS_CALCV_DIMEN-CALCV.
    LS_CALCV_DIMEN-CALCV_UOM = IS_CALCV_DIMTA-CALCV_UOM.

    if LS_CALCV_DIMEN-CALCV lt 0.
      move 0 to LS_CALCV_DIMEN-CALCV.
    endif.

*** Return calculated Dimension
    try .
        CF_DIMEN = LS_CALCV_DIMEN-CALCV.
      catch CX_SY_CONVERSION_OVERFLOW into data(LR_CX_CONVERSION_OVERFLOW).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_CONVERSION_OVERFLOW ).
    endtry.

  endmethod.
  method CALC_PERC_BY_DIMEN.

    data: LS_CALCV_PERC type ZVCXI_XCS_S_CALCV.


    check IS_CALCV_DIMEN-CALCV     is not initial and
          IS_CALCV_DIMEN-CALCV_UOM is not initial and
          IS_CALCV_DIMTA-CALCV     is not initial and
          IS_CALCV_DIMTA-CALCV_UOM is not initial.

*** Min Max Value / Target Value
    LS_CALCV_PERC = ZCL_VCXI_XCS_SERVICE_CALC=>CALC( IS_CALCV_1 = IS_CALCV_DIMEN
                                                     IS_CALCV_2 = IS_CALCV_DIMTA
                                                     IF_OPERA   = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE ).
    case IF_MINMAX.

***   Min Percentage = ( 1 – Min Value /Target Value) * 100
      when C_MIN.
***     Minimum must be lower equal than Target
        check IS_CALCV_DIMEN-CALCV le IS_CALCV_DIMTA-CALCV.
        LS_CALCV_PERC-CALCV = ( 1 - LS_CALCV_PERC-CALCV ) * 100.

***   Max Percentage = ( Max Value / Target Value – 1 ) * 100
      when C_MAX.
***     Target needs to be lower-equal than Maximum
        check IS_CALCV_DIMTA-CALCV le IS_CALCV_DIMEN-CALCV.
****    Maximum value / Target Value needs to be less than 10.9999 because the displayed value can be '999,99'
        if LS_CALCV_PERC-CALCV le '10.9999'.
          LS_CALCV_PERC-CALCV = ( LS_CALCV_PERC-CALCV - 1 ) * 100.
        else.
          LS_CALCV_PERC-CALCV = '999.99'.
        endif.
    endcase.

    if LS_CALCV_PERC-CALCV lt 0.
      move 0 to LS_CALCV_PERC-CALCV.
    endif.

*** Export Percentage
    try.
        move LS_CALCV_PERC-CALCV to RF_PERC.
      catch CX_SY_CONVERSION_OVERFLOW into data(LR_CX_CONVERSION_OVERFLOW).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_CONVERSION_OVERFLOW ).
    endtry.

  endmethod.
  method CALC_RLDIA_BY_RLLEN.

    data: LS_CALCV_RLLEN type ZVCXI_XCS_S_CALCV,
          LS_CALCV_RODIA type ZVCXI_XCS_S_CALCV,
          LS_CALCV_CRDIO type ZVCXI_XCS_S_CALCV,
          LS_CALCV_WITHI type ZVCXI_XCS_S_CALCV.


    check IS_RLLEN-RLLEN_UOM       is not initial and
          IS_CRDIO-CRDIO_UOM is not initial and
          IS_WITHI-WITHI_UOM is not initial.

***------------------------------------------------------------------------------------------------
*** Roll Length             Convert Unit to Diameter
    LS_CALCV_RLLEN = value #( CALCV     = IS_RLLEN-RLLEN
                              CALCV_UOM = IS_RLLEN-RLLEN_UOM ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM    = IF_RLDIA_UOM
                                             changing  CS_CALCV  = LS_CALCV_RLLEN ).

*** Winding Thickness       Convert Unit to Diameter
    LS_CALCV_WITHI = value #( CALCV     = IS_WITHI-WITHI
                              CALCV_UOM = IS_WITHI-WITHI_UOM ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM    = IF_RLDIA_UOM
                                             changing  CS_CALCV  = LS_CALCV_WITHI ).

*** Core Outer Diameter     Convert Unit to Diameter
    LS_CALCV_CRDIO = value #( CALCV     = IS_CRDIO-CRDIO
                              CALCV_UOM = IS_CRDIO-CRDIO_UOM ).
    ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM    = IF_RLDIA_UOM
                                             changing  CS_CALCV  = LS_CALCV_CRDIO ).

***------------------------------------------------------------------------------------------------
*** Roll Length * Winding Thickness * 4 / PI
    LS_CALCV_RLLEN-CALCV = LS_CALCV_RLLEN-CALCV * LS_CALCV_WITHI-CALCV * 4 / C_PI.

*** Core Outer Diameter ^ 2
    LS_CALCV_CRDIO-CALCV = LS_CALCV_CRDIO-CALCV * LS_CALCV_CRDIO-CALCV.

*** Roll Diameter = Square root ( ( Roll Length * Winding Thickness * 4 / Pi ) + Core Outer Diameter^2 )
    LS_CALCV_RODIA-CALCV     = SQRT( LS_CALCV_RLLEN-CALCV + LS_CALCV_CRDIO-CALCV  ).
    LS_CALCV_RODIA-CALCV_UOM = IF_RLDIA_UOM.

***------------------------------------------------------------------------------------------------
*** Return Roll Diameter
    try.
        RS_RLDIA-RLDIA     = LS_CALCV_RODIA-CALCV.
        RS_RLDIA-RLDIA_UOM = LS_CALCV_RODIA-CALCV_UOM.
      catch CX_SY_CONVERSION_OVERFLOW into data(LR_CX_CONVERSION_OVERFLOW).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_CONVERSION_OVERFLOW ).
    endtry.

  endmethod.
  method CALC_RLLEN_BY_RLDIA.

    data: LS_CALCV_RLDIA type ZVCXI_XCS_S_CALCV,
          LS_CALCV_RLLEN type ZVCXI_XCS_S_CALCV,
          LS_CALCV_CRDIO type ZVCXI_XCS_S_CALCV,
          LS_CALCV_WITHI type ZVCXI_XCS_S_CALCV.


    check IS_RLDIA-RLDIA_UOM is not initial and
          IS_CRDIO-CRDIO_UOM is not initial and
          IS_WITHI-WITHI_UOM is not initial.

***------------------------------------------------------------------------------------------------
*** Roll Diameter           Convert Unit to RLLEN
    move IS_RLDIA-RLDIA     to LS_CALCV_RLDIA-CALCV.
    move IS_RLDIA-RLDIA_UOM to LS_CALCV_RLDIA-CALCV_UOM.
    ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM    = IF_RLLEN_UOM
                                             changing  CS_CALCV  = LS_CALCV_RLDIA ).

*** Winding Thickness       Convert Unit to RLLEN
    move IS_WITHI-WITHI     to LS_CALCV_WITHI-CALCV.
    move IS_WITHI-WITHI_UOM to LS_CALCV_WITHI-CALCV_UOM.
    ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM    = IF_RLLEN_UOM
                                             changing  CS_CALCV  = LS_CALCV_WITHI ).

*** Core Outer Diameter     Convert Unit to RLLEN
    move IS_CRDIO-CRDIO     to LS_CALCV_CRDIO-CALCV.
    move IS_CRDIO-CRDIO_UOM to LS_CALCV_CRDIO-CALCV_UOM.
    ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM    = IF_RLLEN_UOM
                                             changing  CS_CALCV  = LS_CALCV_CRDIO ).

***------------------------------------------------------------------------------------------------
*** Roll Diameter^2 - Core Outer Diameter^2
    LS_CALCV_RLDIA-CALCV = LS_CALCV_RLDIA-CALCV ** 2 - LS_CALCV_CRDIO-CALCV ** 2 .

*** Roll Length = ( ( Roll Diameter^2 - Core Outer Diameter^2 ) * Pi ) / Winding Thickness * 4
    if LS_CALCV_WITHI-CALCV is not initial.
      LS_CALCV_RLLEN-CALCV = ( LS_CALCV_RLDIA-CALCV * C_PI ) / ( LS_CALCV_WITHI-CALCV * 4 ).
    endif.
    if LS_CALCV_RLLEN-CALCV lt 0.
      move 0 to LS_CALCV_RLLEN-CALCV.
    endif.

***------------------------------------------------------------------------------------------------
*** Return Roll Length
    try.
        RS_RLLEN-RLLEN     = LS_CALCV_RLLEN-CALCV.
        RS_RLLEN-RLLEN_UOM = IF_RLLEN_UOM.
      catch CX_SY_CONVERSION_OVERFLOW into data(LR_CX_CONVERSION_OVERFLOW).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_CONVERSION_OVERFLOW ).
    endtry.

  endmethod.
  method CALC_RLLEN_BY_RLWGT.

    data: LS_CALCV_RLLEN type ZVCXI_XCS_S_CALCV,
          LS_CALCV_CRWGT type ZVCXI_XCS_S_CALCV,
          LS_CALCV_WIARE type ZVCXI_XCS_S_CALCV.


    check IS_RLWGT-RLWGT_UOM is not initial and
          IS_CRWGT-CRWGT_UOM is not initial and
          IS_WIWID-WIWID_UOM is not initial and
          IS_WISWG-WISWG_UOM is not initial.

    check IS_WISWG-WISWG     gt 0 and
          IS_WIWID-WIWID     gt 0.

***------------------------------------------------------------------------------------------------
*** Roll Weight Netto = Roll Weight – Core Weight
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_RLWGT-RLWGT
                                                        IF_CALCV_UOM_1 = IS_RLWGT-RLWGT_UOM
                                                        IF_CALCV_2     = IS_CRWGT-CRWGT
                                                        IF_CALCV_UOM_2 = IS_CRWGT-CRWGT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                              importing EF_CALCV       = LS_CALCV_CRWGT-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV_CRWGT-CALCV_UOM ).
    check LS_CALCV_CRWGT-CALCV gt 0.

*** Winding Area = Roll Weight Netto / Winding Weight
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_CRWGT-CALCV
                                                        IF_CALCV_UOM_1 = LS_CALCV_CRWGT-CALCV_UOM
                                                        IF_CALCV_2     = IS_WISWG-WISWG
                                                        IF_CALCV_UOM_2 = IS_WISWG-WISWG_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LS_CALCV_WIARE-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV_WIARE-CALCV_UOM ).

*** Roll Length = Winding Area / Winding Width
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_WIARE-CALCV
                                                        IF_CALCV_UOM_1 = LS_CALCV_WIARE-CALCV_UOM
                                                        IF_CALCV_2     = IS_WIWID-WIWID
                                                        IF_CALCV_UOM_2 = IS_WIWID-WIWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                              importing EF_CALCV       = LS_CALCV_RLLEN-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV_RLLEN-CALCV_UOM ).

***------------------------------------------------------------------------------------------------
*** Return Roll Length
    try.
        RS_RLLEN-RLLEN     = LS_CALCV_RLLEN-CALCV.
        RS_RLLEN-RLLEN_UOM = LS_CALCV_RLLEN-CALCV_UOM.
      catch CX_SY_CONVERSION_OVERFLOW into data(LR_CX_CONVERSION_OVERFLOW).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_CONVERSION_OVERFLOW ).
    endtry.

  endmethod.
  method CALC_RLPCR.

    data: LF_RLPCR type P length 11 decimals 5.
    data: LS_CRLEN_MIN type ZVCXI_PXS_S_CRLEN.


    check IS_CRLEN-CRLEN     is not initial and
          IS_CRLEN-CRLEN_UOM is not initial.

***--------------------------------------------------------------------------------------
*** Get minimum Core Length
    check IS_WIWID is not initial.
    LS_CRLEN_MIN = value #( CRLEN     = IS_WIWID-WIWID
                            CRLEN_UOM = IS_WIWID-WIWID_UOM ).

*** Add Margin per Core
    if IS_CRMAR-CRMAR_UOM is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CRLEN_MIN-CRLEN
                                                          IF_CALCV_UOM_1 = LS_CRLEN_MIN-CRLEN_UOM
                                                          IF_CALCV_2     = IS_CRMAR-CRMAR
                                                          IF_CALCV_UOM_2 = IS_CRMAR-CRMAR_UOM
                                                          IF_UOM         = LS_CRLEN_MIN-CRLEN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                importing EF_CALCV       = LS_CRLEN_MIN-CRLEN
                                                          EF_CALCV_UOM   = LS_CRLEN_MIN-CRLEN_UOM ).
    endif.

***--------------------------------------------------------------------------------------
*** Roles/Core = floor( Core Length / ( Winding Width + Margin )  )
    if LS_CRLEN_MIN-CRLEN ne 0.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_CRLEN-CRLEN
                                                          IF_CALCV_UOM_1 = IS_CRLEN-CRLEN_UOM
                                                          IF_CALCV_2     = LS_CRLEN_MIN-CRLEN
                                                          IF_CALCV_UOM_2 = LS_CRLEN_MIN-CRLEN_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LF_RLPCR ).
      RF_RLPCR = FLOOR( LF_RLPCR ).
    endif.

*** Set Fallback for Rolls/Core
    if RF_RLPCR eq 0.
      RF_RLPCR = 1.
    endif.

  endmethod.
  method CALC_RLWGT_BY_RLLEN.

    data: LS_CALCV_RLLEN type ZVCXI_XCS_S_CALCV,
          LS_CALCV_RLWGT type ZVCXI_XCS_S_CALCV.


    check IS_RLLEN-RLLEN_UOM is not initial and
          IS_CRWGT-CRWGT_UOM is not initial and
          IS_WIWID-WIWID_UOM is not initial and
          IS_WISWG-WISWG_UOM is not initial.

    check IS_WISWG-WISWG     gt 0 and
          IS_WIWID-WIWID     gt 0.

***------------------------------------------------------------------------------------------------
*** Winding Area = Roll Length * Winding Width
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_RLLEN-RLLEN
                                                        IF_CALCV_UOM_1 = IS_RLLEN-RLLEN_UOM
                                                        IF_CALCV_2     = IS_WIWID-WIWID
                                                        IF_CALCV_UOM_2 = IS_WIWID-WIWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_CALCV_RLLEN-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV_RLLEN-CALCV_UOM ).

*** Netto Roll Weight = Winding Area * Winding Surface Weight
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_RLLEN-CALCV
                                                        IF_CALCV_UOM_1 = LS_CALCV_RLLEN-CALCV_UOM
                                                        IF_CALCV_2     = IS_WISWG-WISWG
                                                        IF_CALCV_UOM_2 = IS_WISWG-WISWG_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = LS_CALCV_RLLEN-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV_RLLEN-CALCV_UOM ).

*** Roll Weight = Netto Roll Weight + Core Weight
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV_RLLEN-CALCV
                                                        IF_CALCV_UOM_1 = LS_CALCV_RLLEN-CALCV_UOM
                                                        IF_CALCV_2     = IS_CRWGT-CRWGT
                                                        IF_CALCV_UOM_2 = IS_CRWGT-CRWGT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                              importing EF_CALCV       = LS_CALCV_RLWGT-CALCV
                                                        EF_CALCV_UOM   = LS_CALCV_RLWGT-CALCV_UOM ).

***------------------------------------------------------------------------------------------------
*** Return Roll Weight
    try.
        RS_RLWGT = value #( RLWGT     = LS_CALCV_RLWGT-CALCV
                            RLWGT_UOM = LS_CALCV_RLWGT-CALCV_UOM ).
      catch CX_SY_CONVERSION_OVERFLOW into data(LR_CX_CONVERSION_OVERFLOW).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_CONVERSION_OVERFLOW ).
    endtry.

  endmethod.
  method GET_DFLT_FG.

    types: begin of YS_BUFFER,
             WERKS        type WERKS_D,
             KUNAG        type KUNAG,
             KUNWE        type KUNWE,
             S_RHNDL_DFLT type ZVCXI_PXSS_S_RHNDL_DFLT,
           end   of YS_BUFFER.

    statics: LT_BUFFER type sorted table of YS_BUFFER with unique key WERKS KUNAG KUNWE.
    data: LS_RHNDL_DFLT type ZVCXI_PXSS_S_RHNDL_DFLT.


*** Check request is completely specified
    check IF_WERKS is not initial and
          IF_KUNWE is not initial and
          IF_KUNAG is not initial.

    if not LINE_EXISTS( LT_BUFFER[ WERKS = IF_WERKS
                                   KUNAG = IF_KUNAG
                                   KUNWE = IF_KUNWE ] ).
***   Get Customizing by Access Sequence
      select single *
             into corresponding fields of LS_RHNDL_DFLT
             from ZVCXI_PXS_TD510
            where WERKS eq IF_WERKS
             and  KUNNR eq IF_KUNWE.
      if SY-SUBRC ne 0.
        select single *
               into corresponding fields of LS_RHNDL_DFLT
               from ZVCXI_PXS_TD510
              where WERKS eq IF_WERKS
               and  KUNNR eq IF_KUNAG.
        if SY-SUBRC ne 0.
          select single *
                 into corresponding fields of LS_RHNDL_DFLT
                 from ZVCXI_PXS_TD510
                where WERKS eq IF_WERKS
                 and  KUNNR eq SPACE.
          if SY-SUBRC ne 0.
            select single *
                   into corresponding fields of LS_RHNDL_DFLT
                   from ZVCXI_PXS_TD510
                  where WERKS eq SPACE
                   and  KUNNR eq SPACE.
            if SY-SUBRC ne 0.
              clear LS_RHNDL_DFLT.
            endif.
          endif.
        endif.
      endif.

***   Add to Buffer
      insert value #( WERKS        = IF_WERKS
                      KUNAG        = IF_KUNAG
                      KUNWE        = IF_KUNWE
                      S_RHNDL_DFLT = LS_RHNDL_DFLT ) into table LT_BUFFER.
    endif.

*** Get buffered Value
    RS_RHNDL_DFLT = LT_BUFFER[ WERKS = IF_WERKS
                               KUNAG = IF_KUNAG
                               KUNWE = IF_KUNWE ]-S_RHNDL_DFLT.

  endmethod.
  method GET_DFLT_WIP.

    types: begin of YS_BUFFER,
             WERKS        type WERKS_D,
             ARBPL        type ARBPL,
             S_RHNDL_DFLT type ZVCXI_PXSS_S_RHNDL_DFLT,
           end   of YS_BUFFER.

    statics: LT_BUFFER type sorted table of YS_BUFFER with unique key WERKS ARBPL.
    data: LS_RHNDL_DFLT type ZVCXI_PXSS_S_RHNDL_DFLT.


    if not LINE_EXISTS( LT_BUFFER[ WERKS = IF_WERKS
                                   ARBPL = IF_ARBPL ] ).
***   Get Customizing by Access Sequence
      select single *
             into corresponding fields of LS_RHNDL_DFLT
             from ZVCXI_PXS_TD520
            where WERKS eq IF_WERKS
             and  ARBPL eq IF_ARBPL.
      if SY-SUBRC ne 0.
        select single *
               into corresponding fields of LS_RHNDL_DFLT
               from ZVCXI_PXS_TD520
              where WERKS eq IF_WERKS
               and  ARBPL eq SPACE.
        if SY-SUBRC ne 0.
          select single *
                 into corresponding fields of LS_RHNDL_DFLT
                 from ZVCXI_PXS_TD520
                where WERKS eq SPACE
                 and  ARBPL eq SPACE.
          if SY-SUBRC ne 0.
            clear LS_RHNDL_DFLT.
          endif.
        endif.
      endif.

***   Add to Buffer
      insert value #( WERKS        = IF_WERKS
                      ARBPL        = IF_ARBPL
                      S_RHNDL_DFLT = LS_RHNDL_DFLT ) into table LT_BUFFER.
    endif.

*** Get buffered Value
    RS_RHNDL_DFLT = LT_BUFFER[ WERKS = IF_WERKS
                               ARBPL = IF_ARBPL ]-S_RHNDL_DFLT.

  endmethod.
  method GET_WIGNA.

    data:  LS_TC510  type ZVCXI_PXS_TC510.
    statics: LT_TC510 type sorted table of ZVCXI_PXS_TC510 with unique default key.


    if not LINE_EXISTS( LT_TC510[ WISID = IF_WISID
                                  WIDIR = IF_WIDIR
                                  EYEMP = IF_EYEMP ] ).
***   Get Customizing by Access Sequence
      select *
             appending table @LT_TC510
             from ZVCXI_PXS_TC510
            where WISID = @IF_WISID
             and  WIDIR = @IF_WIDIR
             and  EYEMP = @IF_EYEMP
             and  LANGU = @SY-LANGU.
      if SY-SUBRC ne 0.
***     Language-independent Entry
        select *
               appending table @LT_TC510
               from ZVCXI_PXS_TC510
              where WISID = @IF_WISID
               and  WIDIR = @IF_WIDIR
               and  EYEMP = @IF_EYEMP
               and  LANGU = @SPACE.
      endif.
    endif.


*** Get buffered Value
    RF_WIGNA = value #( LT_TC510[ WISID = IF_WISID
                                  WIDIR = IF_WIDIR
                                  EYEMP = IF_EYEMP ]-WIGNA optional ).

  endmethod.
