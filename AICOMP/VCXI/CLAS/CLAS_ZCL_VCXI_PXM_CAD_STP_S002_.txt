
class ZCL_VCXI_PXM_CAD_STP_S002 definition
  public
  inheriting from ZCL_VCXI_PXM_CAD_STP_S000
  create public .

public section.

  methods EXECUTE
    redefinition .
protected section.

  types:
    YT_CADIF_ONEUP_IO_P1 type table of ZVCXI_P1SS_S_CADIF_ONEUP_IO with default key .
  types:
    YT_CADIF_MLTUP_IO    type table of ZVCXI_PXSS_S_CADIF_MLTUP_IO with default key .
  types:
    begin of YS_FDMDL,
      FDMDL               type ZVCXI_PXSS_FDMDL,
      IFDMV               type ZVCXI_PXSS_IFDMV,
      T_CADIF_ONEUP_IO_P1 type YT_CADIF_ONEUP_IO_P1,
      S_CADIF_MLTUP_IO    type ZVCXI_PXSS_S_CADIF_MLTUP_IO,
    end of YS_FDMDL .
  types:
    YT_FDMDL type table of YS_FDMDL with default key .

  methods GET_FDMDL
    importing
      !IT_CADIF_ONEUP_IO_P1 type YT_CADIF_ONEUP_IO_P1
      !IT_CADIF_MLTUP_IO type YT_CADIF_MLTUP_IO
    returning
      value(RT_FDMDL) type YT_FDMDL
    raising
      /VCXI/CX_CKX .
  methods UPDATE_VIA_CADIF
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IS_CADIF_PRJ_IO type ZVCXI_PXSS_S_CADIF_PRJ_IO
      !IT_CADIF_ONEUP_IO_P1 type YT_CADIF_ONEUP_IO_P1
      !IT_CADIF_MLTUP_IO type YT_CADIF_MLTUP_IO
    raising
      /VCXI/CX_CKX .
  methods ADD_CNF
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SVC
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    raising
      /VCXI/CX_CKX .
  methods ADD_ITEM
    importing
      !IS_CADIF_PRJ_IO type ZVCXI_PXSS_S_CADIF_PRJ_IO
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
    returning
      value(RF_POSNR) type POSNR
    raising
      /VCXI/CX_CKX .
  methods GET_CADIF_XXML
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    returning
      value(RF_XXML) type XSTRING
    raising
      /VCXI/CX_CKX .
  methods BUILD_IDAT
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR
    raising
      /VCXI/CX_CKX .
  methods GET_BOB_SDOC
    importing
      !IS_CADIF_PRJ_IO type ZVCXI_PXSS_S_CADIF_PRJ_IO
    returning
      value(RR_BOB_SDOC) type ref to ZCL_VCXI_XCI_BOB_SDOC
    raising
      /VCXI/CX_CKX .
  methods GET_EA_CADIF_PRJ
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    returning
      value(RR_EA_CADIF_PRJ) type ref to ZCL_VCXI_PXSS_EA_CADIF_PRJ
    raising
      /VCXI/CX_CKX .
  methods GET_EA_FASTD
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    returning
      value(RR_EA_FASTD) type ref to ZCL_VCXI_PXSS_EA_FASTD
    raising
      /VCXI/CX_CKX .
  methods UPDATE_VIA_FASTD
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    changing
      !CS_CADIF_PRJ_IO type ZVCXI_PXSS_S_CADIF_PRJ_IO
      !CT_CADIF_ONEUP_IO_P1 type YT_CADIF_ONEUP_IO_P1
      !CT_CADIF_MLTUP_IO type YT_CADIF_MLTUP_IO
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXM_CAD_STP_S002 definition
class ZCL_VCXI_PXM_CAD_STP_S002 implementation.
  method ADD_CNF.

    data: LF_CUOBJ     type CUOBJ,
          LF_CONFIG_ID type CUX_CFG_ID,
          LF_INST_ID   type CU_INST_ID value '00000001'.
    data: LS_VBAP type VBAP,
          LS_CUCO type CUCO.


***------------------------------------------------------------------------------------------------
*** Get Position Information
    LS_VBAP = value #( IR_BOB_SDOC->T_VBAP[ POSNR = IF_POSNR ] optional ).
    if LS_VBAP-POSNR ne IF_POSNR.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get next available Configuration ID
*{   REPLACE        HEDK925765                                        1
*\    LF_CONFIG_ID = reduce #( init MAX = 0
*\                             for LS_CFGS_INST in IR_BOB_SDOC->T_CFGS_INST
*\                             next MAX = cond #( when LS_CFGS_INST-CONFIG_ID > MAX then LS_CFGS_INST-CONFIG_ID else MAX ) ) + 1.
data lt_inst type ZVCXI_XCI_TT_BAPICUINS.
data ls_inst like line of lt_inst.
lt_inst[] = IR_BOB_SDOC->T_CFGS_INST[].
sort lt_inst by config_id DESCENDING.
read table lt_inst into ls_inst index 1.
lf_config_id = ls_inst-config_id + 1.
*}   REPLACE

***------------------------------------------------------------------------------------------------
*** Get Profile Settings
    select single CUOBJ
           from MARC
           into LF_CUOBJ
          where MATNR eq LS_VBAP-MATNR
           and  WERKS eq LS_VBAP-WERKS.
    check SY-SUBRC eq 0.

    call function 'CUCB_GET_PROFILE_OF_INSTANCE'
      exporting
        INSTANCE                     = LF_CUOBJ
      importing
        PROFILE_WA                   = LS_CUCO
      exceptions
        INVALID_INSTANCE             = 1
        INSTANCE_IS_A_CLASSIFICATION = 2
        PROFILE_NOT_FOUND            = 3
        INVALID_INPUT                = 4.
    check SY-SUBRC eq 0.


*** Reference Order Item / Instance in Configuration
    append value #( POSEX     = LS_VBAP-POSNR
                    CONFIG_ID = LF_CONFIG_ID
                    INST_ID   = LF_INST_ID
                  ) to IR_BOB_SDOC->T_CFGS_REFINST.

*** Instances
    append value #( CONFIG_ID     = LF_CONFIG_ID
                    INST_ID       = LF_INST_ID
                    OBJ_TYPE      = LS_CUCO-OBTAB
                    CLASS_TYPE    = LS_CUCO-KLART
                    OBJ_KEY       = LS_CUCO-OBJEK
                    QUANTITY      = LS_VBAP-KWMENG
                    QUANTITY_UNIT = LS_VBAP-VRKME
                    COMPLETE      = 'F'
                    CONSISTENT    = 'F'
                  ) to IR_BOB_SDOC->T_CFGS_INST.

*** Configuration Data
    append value #( POSEX         = LS_VBAP-POSNR
                    CONFIG_ID     = LF_CONFIG_ID
                    ROOT_ID       = LF_INST_ID
                    COMPLETE      = 'F'
                    CONSISTENT    = 'F'
                  ) to IR_BOB_SDOC->T_CFGS_REF.

*** Update Flag for Configuration
    append value #( POSNR = LS_VBAP-POSNR
                    UPDKZ = 'I'
                  ) to IR_BOB_SDOC->T_CFGS_UPDKZ.

  endmethod.
  method ADD_ITEM.

    data: LS_MARA type MARA.

***------------------------------------------------------------------------------------------------
*** Identify Position Number
    if IS_CADIF_PRJ_IO-POSNR is not initial.
      RF_POSNR = IS_CADIF_PRJ_IO-POSNR.
    else.
*{   REPLACE        HEDK925765                                        1
*\      RF_POSNR = reduce #( init MAX = 0
*\                           for LS_VBAP in IR_BOB_SDOC->T_VBAP
*\                           next MAX = cond #( when LS_VBAP-POSNR > MAX then LS_VBAP-POSNR else MAX ) ) + 10.
data lt_vbap  type standard table of VBAP.
data ls_vbap like line of lt_vbap.
lt_vbap[] = IR_BOB_SDOC->T_VBAP.
sort lt_vbap by posnr descending.
read table lt_vbap into ls_vbap index 1.
RF_POSNR = ls_vbap-posnr + 10.
*}   REPLACE
    endif.

    if LINE_EXISTS( IR_BOB_SDOC->T_VBAP[ POSNR = RF_POSNR ] ).
***   Item &1 already exists
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'V1'
                                            IF_MSGNO = '385'
                                            IF_MSGV1 = RF_POSNR ).
    endif.

***------------------------------------------------------------------------------------------------
*** Load Infos of Configurable Material
    call function 'MARA_SINGLE_READ'
      exporting
        MATNR             = IS_CADIF_PRJ_IO-MATNR
      importing
        WMARA             = LS_MARA
      exceptions
        LOCK_ON_MATERIAL  = 1
        LOCK_SYSTEM_ERROR = 2
        WRONG_CALL        = 3
        NOT_FOUND         = 4.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Add Item
    append value #( POSNR  = RF_POSNR
                    MATNR  = IS_CADIF_PRJ_IO-MATNR
                    WERKS  = IS_CADIF_PRJ_IO-WERKS
                    SPART  = IR_BOB_SDOC->S_VBAK-SPART
                    KWMENG = IS_CADIF_PRJ_IO-S_AUQTY-AUQTY
                    VRKME  = IS_CADIF_PRJ_IO-S_AUQTY-AUQTY_UOM
                    MEINS  = LS_MARA-MEINS
                    UMVKZ  = 1
                    UMVKN  = 1
                    STDAT  = SY-DATUM
                  ) to IR_BOB_SDOC->T_VBAP.

*** Schedule Lines Data
    append value #( POSNR = RF_POSNR
                    ETENR = '0001'
                    WMENG = IS_CADIF_PRJ_IO-S_AUQTY-AUQTY
                    VRKME = IS_CADIF_PRJ_IO-S_AUQTY-AUQTY_UOM
                    MEINS = LS_MARA-MEINS
                  ) to IR_BOB_SDOC->T_VBEP.
  endmethod.
  method BUILD_IDAT.

    data: LR_SVC      type ref to /VCXI/CL_VKSRA_SVC,
          LR_IDAT_SVC type ref to ZCL_VCXI_XCI_IDAT_SVC.


***------------------------------------------------------------------------------------------------
*** Get SmartVC API Instance
    LR_SVC = IR_BOB_SDOC->GET_SVC( IF_POSNR = IF_POSNR ).

*** Build Integration Data Service
    LR_IDAT_SVC = ZCL_VCXI_XCI_IDAT_SVC=>CREATE( IS_CMPRK = LR_SVC->S_CMPRK
                                                 IF_IEALI = 'X_IDATSPV' ).

*** Fill by SmartVC
    LR_IDAT_SVC->FILL_BY_SVC( IR_SVC = LR_SVC ).

***------------------------------------------------------------------------------------------------
*** Save Integration Data if requested
    if ME->R_DCO_INPUT->F_FSIDA eq ABAP_TRUE.
      LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCI_IDAT_SVC=>C_FCODE_SAVE ).
***   Integration Data & was saved.
      ME->R_RPSEG->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCIU'
                                       IF_MSGTY = 'S'
                                       IF_MSGNO = '101'
                                       IF_MSGV1 = LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT~GET_GUID( ) ).
    endif.

*** Set Integradion Data Number to Buffer for later processing
    call function 'ZVCXI_XCC_IDAT_SET_NIDAT'
      exporting
        IF_POSNR = IF_POSNR
        IF_NIDAT = conv ZVCXI_XCI_NIDAT( LR_IDAT_SVC->/VCXI/IF_CKX_OBJECT~GET_GUID( ) ).

  endmethod.
  method EXECUTE.

    data: LS_CADIF_PRJ_IO type ZVCXI_PXSS_S_CADIF_PRJ_IO.
    data: LR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC,
          LR_SVC      type ref to /VCXI/CL_VKSRA_SVC,
          LR_MSG      type ref to /VCXI/CL_CKXM_MESSAGE.

    try.
***     Save Status
        ME->R_RPSEG->SAVE_AND_COMMIT( ).

***------------------------------------------------------------------------------------------------
***     Check no Project Owner has been defined
        if ME->R_DCO_INPUT->F_CADPO is not initial.
***       Set Status to CANCELED
          ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ).
          return.
        endif.

***     Extract XML
        try.
            call transformation ID
                 source xml ME->R_DCO_INPUT->F_XXML
                 result S_CADIF_PRJ_IO   = LS_CADIF_PRJ_IO.         "Project
          catch CX_XSLT_SYSTEM_ERROR into data(LR_CX_XSLT_SYSTEM_ERROR).
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_XSLT_SYSTEM_ERROR ).
        endtry.

***     Get (new) Business Object and try to lock it
        LR_BOB_SDOC = ME->GET_BOB_SDOC( IS_CADIF_PRJ_IO = LS_CADIF_PRJ_IO ).
        if LS_CADIF_PRJ_IO-VBELN is not initial.
          LR_BOB_SDOC->ENQUEUE( ).
        endif.

***------------------------------------------------------------------------------------------------
***     Add new Item and its configuration
        LS_CADIF_PRJ_IO-POSNR = ME->ADD_ITEM( IS_CADIF_PRJ_IO = LS_CADIF_PRJ_IO
                                              IR_BOB_SDOC     = LR_BOB_SDOC ).
        ME->ADD_CNF( IR_BOB_SDOC = LR_BOB_SDOC
                     IF_POSNR    = LS_CADIF_PRJ_IO-POSNR ).

***     Run Configuration and receive SmartVC Instance
        LR_BOB_SDOC->RUN_CONFIG( IF_POSNR = LS_CADIF_PRJ_IO-POSNR ).
        LR_SVC = LR_BOB_SDOC->GET_SVC( IF_POSNR = LS_CADIF_PRJ_IO-POSNR ).

***------------------------------------------------------------------------------------------------
***     Update SmartVC based on Inbound Information
        ME->UPDATE_SVC( IR_SVC = LR_SVC ).

***     Update Data Connector based on changed SmartVC and process Configuration to ensure Routing Supervisor gets executed
        LR_SVC->UPDATE_DC( ).
        LR_BOB_SDOC->RUN_CONFIG( IF_POSNR = LS_CADIF_PRJ_IO-POSNR ).

***------------------------------------------------------------------------------------------------
***     Create Integration Data for SmartVC
        ME->BUILD_IDAT( IR_BOB_SDOC = LR_BOB_SDOC
                        IF_POSNR    = LS_CADIF_PRJ_IO-POSNR ).

***     Create/Change Sales Document
        LR_MSG = LR_BOB_SDOC->SAVE( IF_TESTRUN = ABAP_FALSE ).
        LS_CADIF_PRJ_IO-VBELN = LR_BOB_SDOC->S_VBAK-VBELN.

***     Merge resulting Messages
        ME->R_RPSEG->R_MSG->MERGE( changing CR_MESSAGE = LR_MSG ).

***--------------------------------------------------------------------------------------
***     Check Messages
        if not LINE_EXISTS( LR_MSG->T_MSG[ MSGTY = 'E' ] ).
***       Sales Document successfully updated.
          ME->R_RPSEG->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCM_MBQ'
                                           IF_MSGTY = 'S'
                                           IF_MSGNO = '012' ).
***       Set Status to Complete
          ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED ).
        else.
***       Sales Document can't be updated.
          ME->R_RPSEG->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCM_MBQ'
                                           IF_MSGTY = 'E'
                                           IF_MSGNO = '013' ).
***       Set Status to Error
          ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).
        endif.

***     Update Outbound XMLs based on freshly loaded Information
        LR_BOB_SDOC = ME->GET_BOB_SDOC( IS_CADIF_PRJ_IO = LS_CADIF_PRJ_IO ).
        LR_BOB_SDOC->RUN_CONFIG( IF_POSNR = LS_CADIF_PRJ_IO-POSNR ).
        LR_SVC = LR_BOB_SDOC->GET_SVC( IF_POSNR = LS_CADIF_PRJ_IO-POSNR ).
        ME->R_DCO_OUTPUT->SET_XXML( IF_XXML = ME->GET_CADIF_XXML( IR_SVC = LR_SVC ) ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
***     Set Status to Error
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = switch #( LR_CX_CKX->F_TEMP when ABAP_TRUE then /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR_TMP
                                                                                      else /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ) ).
***     Add Message to Message Log
        ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Perform Save and Commit
    ME->R_RPSEG->SAVE_AND_COMMIT( ).

  endmethod.
  method GET_BOB_SDOC.

    data: LS_ORDER_VIEW   type ORDER_VIEW.

***------------------------------------------------------------------------------------------------
*** Create a new Sale Document Business Object Instance
    RR_BOB_SDOC = new #( ).

*** Define the view relevant
    LS_ORDER_VIEW = value #( HEADER     = ABAP_TRUE
                             ITEM       = ABAP_TRUE
                             SDSCHEDULE = ABAP_TRUE
                             BUSINESS   = ABAP_TRUE
                             PARTNER    = ABAP_TRUE
                             SDCOND     = ABAP_TRUE
                             CONFIGURE  = ABAP_TRUE ).

*** Define new Sales Document
    if IS_CADIF_PRJ_IO-VBELN is initial.
***   Define the view relevant
      RR_BOB_SDOC->S_ORDER_VIEW = LS_ORDER_VIEW.

***   Define Header
      break HARD-CODED.
      RR_BOB_SDOC->S_VBAK = value #( AUART = 'YQT'
                                     VKORG = '1010'
                                     VTWEG = '10'
                                     SPART = '10' ).
***   Define Partner
      RR_BOB_SDOC->T_VBPA = value #( ( PARVW = 'AG'  KUNNR = IS_CADIF_PRJ_IO-KUNAG )
                                     ( PARVW = 'WE'  KUNNR = IS_CADIF_PRJ_IO-KUNWE ) ).

    else.
***   Load existing Sales Document
      RR_BOB_SDOC->INIT_FROM_DB( IF_VBELN      = IS_CADIF_PRJ_IO-VBELN
                                 IS_ORDER_VIEW = LS_ORDER_VIEW ).
    endif.

  endmethod.
  method GET_CADIF_XXML.

*** Get CAD Interface - Project
    data(LR_EA_CADIF_PRJ) = ME->GET_EA_CADIF_PRJ( IR_SVC = IR_SVC ).
    check LR_EA_CADIF_PRJ is bound.

    RF_XXML = LR_EA_CADIF_PRJ->GET_XML( ).

  endmethod.
  method GET_EA_CADIF_PRJ.

    data: LT_SVCEL       type /VCXI/CKX_TT_OBJECT.


*** Get Reference to CAD Integration - Project
    LT_SVCEL = IR_SVC->GET_SVC_ELEMENTS( IF_ID = 'CADIF_PRJ' ).
    check LT_SVCEL is not initial.

    RR_EA_CADIF_PRJ ?= cast /VCXI/CL_VKSRA_SVC_ELEMENT( LT_SVCEL[ 1 ] )->GET_CLSEA( ).

  endmethod.
  method GET_EA_FASTD.

*    data: LT_SVCEL       type /VCXI/CKX_TT_OBJECT.
*
*
**** Get Fast Data
*    LT_SVCEL = IR_SVC->GET_SVC_ELEMENTS( IF_IEALI = 'UI_FASTD' ).
*    check LT_SVCEL is not initial.
*
*    RR_EA_FASTD ?= cast /VCXI/CL_VKSRA_SVC_ELEMENT( LT_SVCEL[ 1 ] )->GET_CLSEA( ).

  endmethod.
  method GET_FDMDL.

*    data: LF_ALLOCATED type ABAP_BOOL.
*    field-symbols: <S_FDMDL> type YS_FDMDL.
*
*
**** Allocate Multi Ups
*    loop at IT_CADIF_MLTUP_IO into data(LS_CADIF_MLTUP_IO).
*      append value #( S_CADIF_MLTUP_IO = LS_CADIF_MLTUP_IO ) to RT_FDMDL.
*    endloop.
*
**** Allocate One Ups based on OneUp ID
*    loop at IT_CADIF_ONEUP_IO_P1 into data(LS_CADIF_ONEUP_IO_P1).
*      LF_ALLOCATED = ABAP_FALSE.
*      loop at RT_FDMDL assigning <S_FDMDL>.
*        if LINE_EXISTS( <S_FDMDL>-S_CADIF_MLTUP_IO-T_CADIF_XOUT_IO[ ICADO = LS_CADIF_ONEUP_IO_P1-ICADO ] ).
*          append LS_CADIF_ONEUP_IO_P1 to <S_FDMDL>-T_CADIF_ONEUP_IO_P1.
*          LF_ALLOCATED = ABAP_TRUE.
*          exit.
*        endif.
*      endloop.
*      if LF_ALLOCATED ne ABAP_TRUE.
*        append value #( T_CADIF_ONEUP_IO_P1 = value #( ( LS_CADIF_ONEUP_IO_P1 ) )
*                      ) to RT_FDMDL.
*      endif.
*    endloop.
*
**** Identify Variant
*    loop at RT_FDMDL assigning <S_FDMDL>.
*      <S_FDMDL>-FDMDL = 'CFG'.
*      if LINES( <S_FDMDL>-T_CADIF_ONEUP_IO_P1 ) eq 1.
*        <S_FDMDL>-IFDMV = cond #( when <S_FDMDL>-T_CADIF_ONEUP_IO_P1[ 1 ]-FASLO eq ABAP_TRUE then ZCL_VCXI_P1SS_BL_FDMDL=>C_IFDMV_INL
*                                                                                             else ZCL_VCXI_P1SS_BL_FDMDL=>C_IFDMV_DCT ).
*      else.
*        <S_FDMDL>-IFDMV = ZCL_VCXI_P1SS_BL_FDMDL=>C_IFDMV_SE_DCT.
*      endif.
*    endloop.

  endmethod.
  method UPDATE_SVC.

*** Get Reference to CAD Integration - Project
    data(LR_EA_CADIF_PRJ) = ME->GET_EA_CADIF_PRJ( IR_SVC = IR_SVC ).
    check LR_EA_CADIF_PRJ is bound.

*** Set Status - In Design
    LR_EA_CADIF_PRJ->SET_CADPS( IF_CADPS = 'ID' ).

*** Set Full XML
    LR_EA_CADIF_PRJ->SET_XML( IF_XXML = ME->R_DCO_INPUT->F_XXML ).

*** As the normal setting of the status only sets the "next Status" based on change documents - Force Status "Designed"
    LR_EA_CADIF_PRJ->SET_CADPS( IF_CADPS = 'D' ).

*** For Debugging
    if 1 eq 2.
      IR_SVC->START_UI( ).
    endif.

  endmethod.
  method UPDATE_VIA_CADIF.

*    data: LS_CADIF_ONEUP_IO_P1 type ZVCXI_P1SS_S_CADIF_ONEUP_IO,
*          LS_CADIF_MLTUP_IO    type ZVCXI_PXSS_S_CADIF_MLTUP_IO.
*    data: LR_EA_CADIF_PRJ   type ref to ZCL_VCXI_PXSS_EA_CADIF_PRJ,
*          LR_EA_CADIF_ONEUP type ref to ZCL_VCXI_PXSS_EA_CADIF_ONEUP,
*          LR_EA_CADIF_MLTUP type ref to ZCL_VCXI_PXSS_EA_CADIF_MLTUP,
*          LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT.
*
*
****------------------------------------------------------------------------------------------------
**** Get Reference to CAD Integration - Project
*    LR_EA_CADIF_PRJ = ME->GET_EA_CADIF_PRJ( IR_SVC = IR_SVC ).
*    check LR_EA_CADIF_PRJ is bound.
*
**** Set Status - In Design
*    LR_EA_CADIF_PRJ->SET_CADPS( IF_CADPS = 'ID' ).
*
**** Set Inbound/Outbound Structure
*    LR_EA_CADIF_PRJ->SET_CADIF_IO( IS_CADIF_IO = IS_CADIF_PRJ_IO ).
*
**** Set Status - Designed
*    LR_EA_CADIF_PRJ->SET_CADPS( IF_CADPS = 'D' ).
*
*
****------------------------------------------------------------------------------------------------
**** Get CAD Interface - OneUp
*    loop at IR_SVC->GET_SVC_ELEMENTS( IF_ID = 'CADIF_ONEUP' ) into LR_OBJECT.
*      LR_EA_CADIF_ONEUP ?= cast /VCXI/CL_VKSRA_SVC_ELEMENT( LR_OBJECT )->GET_CLSEA( ).
*      check LR_EA_CADIF_ONEUP is bound.
*
****   Identify Inbound/Outbound Structure
*      LS_CADIF_ONEUP_IO_P1 = value #( IT_CADIF_ONEUP_IO_P1[ GCADO = LR_EA_CADIF_ONEUP->GET_GCADO( ) ] optional ).
*      check LS_CADIF_ONEUP_IO_P1-GCADO is not initial.
*
****   Set Inbound/Outbound Structure
*      LR_EA_CADIF_ONEUP->SET_CADIF_IO( IS_CADIF_IO = LS_CADIF_ONEUP_IO_P1 ).
*    endloop.
*
*
****------------------------------------------------------------------------------------------------
**** Get CAD Interface - MultiUp
*    loop at IR_SVC->GET_SVC_ELEMENTS( IF_ID = 'CADIF_MLTUP' ) into LR_OBJECT.
*      LR_EA_CADIF_MLTUP ?= cast /VCXI/CL_VKSRA_SVC_ELEMENT( LR_OBJECT )->GET_CLSEA( ).
*      check LR_EA_CADIF_MLTUP is bound.
*
****   Identify Inbound/Outbound Structure
*      LS_CADIF_MLTUP_IO = value #( IT_CADIF_MLTUP_IO[ GCADM = LR_EA_CADIF_MLTUP->GET_GCADM( ) ] optional ).
*      check LS_CADIF_MLTUP_IO-GCADM is not initial.
*
****   Set Inbound/Outbound Structure
*      LR_EA_CADIF_MLTUP->SET_CADIF_IO( IS_CADIF_IO = LS_CADIF_MLTUP_IO ).
*    endloop.
*
**** For Debugging
*    if 1 eq 2.
*      IR_SVC->START_UI( ).
*    endif.

  endmethod.
  method UPDATE_VIA_FASTD.

*    data: LF_FGCNT type I,
*          LF_IFDMV type ZVCXI_PXSS_IFDMV.
*    data: LS_FDI_CORR type ZVCXI_P1SS_S_FDI_CORR,
*          LS_FDI_CFG  type ZVCXI_P1SS_S_FDI_CFG.
*    data: LT_FDMDL       type YT_FDMDL,
*          LT_FDAPI_XCOMP type ZVCXI_PXSS_TT_FDAPI_XCOMP,
*          LT_XCONG       type ZVCXI_PXSS_TT_XCONG.
*    data: LR_EA_FASTD  type ref to ZCL_VCXI_PXSS_EA_FASTD,
*          LR_API_FDMDL type ref to ZCL_VCXI_PXSS_API_FDMDL,
*          LR_SVCEL     type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
*          LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT.
*    field-symbols: <S_FDMDL>            type YS_FDMDL,
*                   <S_FDAPI_XCOMP>      type ZVCXI_PXSS_S_FDAPI_XCOMP,
*                   <S_FDAPI_XCOMP_DATA> type ZVCXI_PXSS_S_FDAPI_XCOMP_DATA,
*                   <S_DATA>             type ANY.
*
**** Get Fast Data
*    LR_EA_FASTD = ME->GET_EA_FASTD( IR_SVC = IR_SVC ).
*    check LR_EA_FASTD is bound.
*
****------------------------------------------------------------------------------------------------
**** Get Fast Data Models
*    LT_FDMDL = ME->GET_FDMDL( IT_CADIF_ONEUP_IO_P1 = CT_CADIF_ONEUP_IO_P1
*                              IT_CADIF_MLTUP_IO    = CT_CADIF_MLTUP_IO  ).
*
**** Remove provided values, as they will be rebuild based on the Fast Data Models
*    clear: CT_CADIF_ONEUP_IO_P1, CT_CADIF_MLTUP_IO.
*
****------------------------------------------------------------------------------------------------
*    loop at LT_FDMDL assigning <S_FDMDL>.
*      clear LF_FGCNT.
*
****   Create Fast Data Model
*      LR_API_FDMDL = LR_EA_FASTD->CREATE_FDMDL( IF_FDMDL = <S_FDMDL>-FDMDL
*                                                IF_IFDMV = <S_FDMDL>-IFDMV ).
*
****   Get Fast Data Structure
*      LT_FDAPI_XCOMP = LR_API_FDMDL->GET_STRC( importing ET_XCONG = LT_XCONG ).
*
****   Fill Fast Data Information Structures
*      loop at LT_FDAPI_XCOMP assigning <S_FDAPI_XCOMP>.
*
****     Fill existing Elements
*        loop at <S_FDAPI_XCOMP>-T_DATA assigning <S_FDAPI_XCOMP_DATA>.
*          assign <S_FDAPI_XCOMP_DATA>-R_DATA->* to <S_DATA>.
*          case <S_FDAPI_XCOMP_DATA>-ISELF.
*            when 'CORR'.
*              LS_FDI_CORR = corresponding #( <S_DATA> ).
*              LS_FDI_CORR-SABOA = <S_FDMDL>-T_CADIF_ONEUP_IO_P1[ 1 ]-BOARD.
*              <S_DATA> = corresponding #( base ( <S_DATA> ) LS_FDI_CORR ).
*
*            when 'CSTEP_DCUT'.
*              <S_FDMDL>-S_CADIF_MLTUP_IO-GCADM = cast ZCL_VCXI_P1SS_EA_CSTEP_DCUT( <S_FDAPI_XCOMP_DATA>-R_SVCEL->GET_CLSEA( ) )->GET_GCADM( ).
*            when 'SSTEP_DCUT'.
*              <S_FDMDL>-S_CADIF_MLTUP_IO-GCADM = cast ZCL_VCXI_P1SS_EA_SSTEP_DCUT( <S_FDAPI_XCOMP_DATA>-R_SVCEL->GET_CLSEA( ) )->GET_GCADM( ).
*
*            when 'CFG'.
*              LF_FGCNT += 1.
****           Update OneUp GUID
*              <S_FDMDL>-T_CADIF_ONEUP_IO_P1[ LF_FGCNT ]-GCADO = cast ZCL_VCXI_P1SS_EA_CFG( <S_FDAPI_XCOMP_DATA>-R_SVCEL->GET_CLSEA( ) )->GET_CRBPX( )->F_GCADO.
*
*          endcase.
*        endloop.
*      endloop.
*
*      clear LF_FGCNT.
*      loop at LR_API_FDMDL->GET_SVCEL_OUT( ) into LR_OBJECT.
*        LF_FGCNT = SY-TABIX.
****     Add Printing Steps through API
*        loop at <S_FDMDL>-T_CADIF_ONEUP_IO_P1[ LF_FGCNT ]-T_PRINT_COM into data(LS_PRINT_COM).
*          LR_API_FDMDL->ADD_CSTEP( exporting IF_ISELF       = 'CSTEP_PRINT'
*                                             IR_SVCEL_OUT   = cast #( LR_OBJECT )
*                                             IR_DATA        = new ZVCXI_P1SS_S_FDI_CSTEP_PRINT( corresponding #( LS_PRINT_COM ) )
*                                             IT_FDMEX       = value #( ( conv #( 'T_FDI_TINK' ) ) )
*                                   changing  CT_FDAPI_XCOMP = LT_FDAPI_XCOMP ).
*        endloop.
*
****     Add Closing Step
*        if <S_FDMDL>-T_CADIF_ONEUP_IO_P1[ LF_FGCNT ]-JOITY is not initial.
*          LR_API_FDMDL->ADD_CSTEP( exporting IF_ISELF       = 'CSTEP_CLOS'
*                                             IR_SVCEL_OUT   = cast #( LR_OBJECT )
*                                             IR_DATA        = new ZVCXI_P1SS_S_FDI_CSTEP_CLOS( JOITY = <S_FDMDL>-T_CADIF_ONEUP_IO_P1[ LF_FGCNT ]-JOITY )
*                                             IF_INDEX       = 99  "Last Step
*                                   changing  CT_FDAPI_XCOMP = LT_FDAPI_XCOMP ).
*        endif.
*      endloop.
*
****   Set Fast Data Structure
*      LR_API_FDMDL->SET_STRC( IT_FDAPI_XCOMP = LT_FDAPI_XCOMP
*                              IT_XCONG       = LT_XCONG ).
*
****   Return updated CAD Integration Information
*      append lines of <S_FDMDL>-T_CADIF_ONEUP_IO_P1 to CT_CADIF_ONEUP_IO_P1.
*      append          <S_FDMDL>-S_CADIF_MLTUP_IO    to CT_CADIF_MLTUP_IO.
*
*    endloop.
*
**** For Debugging
*    if 1 eq 2.
*      IR_SVC->START_UI( ).
*    endif.

  endmethod.
