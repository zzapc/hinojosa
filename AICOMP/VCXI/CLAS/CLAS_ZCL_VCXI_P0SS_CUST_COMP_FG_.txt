
class ZCL_VCXI_P0SS_CUST_COMP_FG definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create protected .

public section.

  data F_BOXPA type ZVCXI_P0SS_BOXPA read-only .
  data F_PRSTY type ZVCXI_P0SS_PRSTY read-only .
  data F_PTYPE type ZVCXI_P0S_PTYPE read-only .
  data F_SHTPR type MATNR read-only .
  data R_RTESEL type ref to ZCL_VCXI_XCSR_BL_PRTE read-only .
  data S_PROHE type ZVCXI_P0S_S_PROHE read-only .
  data S_PROLE type ZVCXI_P0S_S_PROLE read-only .
  data S_PROWI type ZVCXI_P0S_S_PROWI read-only .
  data S_SHTGL type ZVCXI_P0SS_S_SHTGL read-only .
  data S_SHTGW type ZVCXI_P0SS_S_SHTGW read-only .
  data F_PTYPE_DESCR type /VCXI/CKX_DESCR read-only .
  data F_PRSTY_DESCR type /VCXI/CKX_DESCR read-only .
  data F_BOXPA_DESCR type /VCXI/CKX_DESCR read-only .

  class-methods GET_INSTANCE_P0_COMP_FG
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_P0SS_CUST_COMP_FG
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_KAUSF,
           MATNR    type MATNR,
           WERKS    type WERKS_D,
           DATE     type DATS,
           S_EVQTY  type ZVCXI_XCSR_S_EVQTY,
           S_KAUSF  type ZVCXI_XCSP_S_KAUSF,
         end   of YS_KAUSF .
  types:
    YT_KAUSF type standard table of YS_KAUSF .

  data R_SVC type ref to /VCXI/CL_VKSRA_SVC .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  methods INIT_SPEC_DATA
    raising
      /VCXI/CX_CKX .
private section.

  methods INIT_RTESEL
    raising
      /VCXI/CX_CKX .
  methods INIT_SHTG
    raising
      /VCXI/CX_CKX .
  methods INIT_SHTPR
    raising
      /VCXI/CX_CKX .
  methods INIT_SVC
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_P0SS_CUST_COMP_FG definition
class ZCL_VCXI_P0SS_CUST_COMP_FG implementation.
method CONSTRUCTOR.

  try.
      SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                          IF_WERKS = IF_WERKS
                          IF_DATE  = IF_DATE ).

***   Initialize SmartVC Instance
      ME->INIT_SVC( ).

***   Initialize Specification Data
      ME->INIT_SPEC_DATA( ).

***   Initialize Gross Sheet Dimension
      ME->INIT_SHTG( ).

***   Initialize Sheet Procurement Info
      ME->INIT_SHTPR( ).

***   Initialize selected Production Route
      ME->INIT_RTESEL( ).

    cleanup.
      ME->DO_FREE( ).
  endtry.

endmethod.
method GET_INSTANCE_P0_COMP_FG.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE
             into LS_INSTANCE
             with key MATNR = IF_MATNR
                      WERKS = IF_WERKS
                      DATE  = IF_DATE.

  if SY-SUBRC eq 0.
    try.
        move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
      catch CX_SY_MOVE_CAST_ERROR.
        delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
        clear RR_INSTANCE.
    endtry.
  endif.

  if RR_INSTANCE is initial.
    try.
        create object RR_INSTANCE
          exporting
            IF_MATNR = IF_MATNR
            IF_WERKS = IF_WERKS
            IF_DATE  = IF_DATE.
      cleanup.
        clear RR_INSTANCE.
    endtry.
  endif.

endmethod.
method INIT_RTESEL.

  data:  LT_SVCEL     type        /VCXI/CKX_TT_OBJECT.
  data:  LR_SVCEL     type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
         LR_EA_RTESPV type ref to ZCL_VCXI_XCSR_EA_RTESPV,
         LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT.

*** Get Routing Supervisor
  LT_SVCEL = ME->R_SVC->GET_SVC_ELEMENTS( IF_IEALI = 'R_RTESPV' ).
  read table LT_SVCEL into LR_OBJECT index 1.
  check SY-SUBRC eq 0.
  move LR_OBJECT ?to LR_SVCEL.

  move LR_SVCEL->GET_CLSEA( ) ?to LR_EA_RTESPV.
  check LR_EA_RTESPV is bound.

*** Get selected Route
  move LR_EA_RTESPV->GET_RTESEL( ) to ME->R_RTESEL.

endmethod.
method INIT_SHTG.

  data:  LT_SVCEL     type        /VCXI/CKX_TT_OBJECT.
  data:  LR_SVCEL     type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
         LR_EA_SHEET  type ref to ZCL_VCXI_P0SS_EA_SHEET,
         LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT.

*** Get Sheet Dimensions
  LT_SVCEL = ME->R_SVC->GET_SVC_ELEMENTS( IF_IEALI = 'S_SHEET' ).
  read table LT_SVCEL into LR_OBJECT index 1.
  check SY-SUBRC eq 0.
  move LR_OBJECT ?to LR_SVCEL.

  try.
      move LR_SVCEL->GET_CLSEA( ) ?to LR_EA_SHEET.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_EA_SHEET.
  endtry.

  check LR_EA_SHEET is bound.

  LR_EA_SHEET->GET_SHTG( importing ES_SHTGL = ME->S_SHTGL
                                   ES_SHTGW = ME->S_SHTGW ).

endmethod.
method INIT_SHTPR.

  data:  LT_SVCEL        type        /VCXI/CKX_TT_OBJECT.
  data:  LR_SVCEL        type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
         LR_EA_MS_SHTPR  type ref to ZCL_VCXI_P0SS_EA_MS_SHTPR,
         LR_OBJECT       type ref to /VCXI/IF_CKX_OBJECT.

*** Get Specification Element
  LT_SVCEL = ME->R_SVC->GET_SVC_ELEMENTS( IF_IEALI = 'S_SPEC' ).
  read table LT_SVCEL into LR_OBJECT index 1.
  check SY-SUBRC eq 0.
  move LR_OBJECT ?to LR_SVCEL.

*** Get Sheet Procurement
  LT_SVCEL = ME->R_SVC->GET_SVC_ELEMENTS( IF_ID                 = 'MS_SHTPR'
                                          IR_SVC_ELEMENT_PARENT = LR_SVCEL
                                          IF_INUSE              = ABAP_TRUE ).
  read table LT_SVCEL into LR_OBJECT index 1.
  check SY-SUBRC eq 0.
  move LR_OBJECT ?to LR_SVCEL.

  move LR_SVCEL->GET_CLSEA( ) ?to LR_EA_MS_SHTPR.
  check LR_EA_MS_SHTPR is bound.

*** Get Material Number
  LR_EA_MS_SHTPR->GET_MATNR( importing EF_MATNR = ME->F_SHTPR ).

endmethod.
method INIT_SPEC_DATA.

  data:  LT_SVCEL     type        /VCXI/CKX_TT_OBJECT.
  data:  LR_SVCEL     type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
         LR_EA_SPEC   type ref to ZCL_VCXI_P0SS_EA_SPEC,
         LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT.

*** Get Specification Information
  LT_SVCEL = ME->R_SVC->GET_SVC_ELEMENTS( IF_IEALI = 'S_SPEC' ).
  read table LT_SVCEL into LR_OBJECT index 1.
  check SY-SUBRC eq 0.
  move LR_OBJECT ?to LR_SVCEL.

  try.
      move LR_SVCEL->GET_CLSEA( ) ?to LR_EA_SPEC.
    catch CX_SY_MOVE_CAST_ERROR.
      clear: LR_EA_SPEC.
  endtry.

  check LR_EA_SPEC is bound.

*** Product Type
  LR_EA_SPEC->GET_PTYPE( importing EF_PTYPE       = ME->F_PTYPE
                                   EF_PTYPE_DESCR = ME->F_PTYPE_DESCR ).

*** Product Style and Part of Box
  LR_EA_SPEC->GET_PRSTY( importing EF_PRSTY       = ME->F_PRSTY
                                   EF_PRSTY_DESCR = ME->F_PRSTY_DESCR
                                   EF_BOXPA       = ME->F_BOXPA
                                   EF_BOXPA_DESCR = ME->F_BOXPA_DESCR ).

*** Product Dimensions
  LR_EA_SPEC->GET_PROD_DIM( importing ES_PROLE = ME->S_PROLE
                                      ES_PROWI = ME->S_PROWI
                                      ES_PROHE = ME->S_PROHE ).

endmethod.
method INIT_SVC.

  data:  LF_CUOBJ     type CUOBJ,
         LF_GVCIN     type /VCXI/VKCR_GVCIN.

  select single CUOBJ
         into LF_CUOBJ
         from MARC
        where MATNR eq ME->F_MATNR
         and  WERKS eq ME->F_WERKS.
  if SY-SUBRC ne 0.
    raise exception type /VCXI/CX_CKX.
    BREAK ADD_MESSAGE.
  endif.

  LF_GVCIN   = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = LF_CUOBJ ).
  ME->R_SVC  = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = LF_GVCIN ).

endmethod.
