
class ZCL_VCXI_XCSRC_PREDEF_PRTE definition
  public
  create protected .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT_CD .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  data F_LCVAL type /VCXI/VSMC_LCVAL read-only .
  constants C_CDOCL_PRTE type CDOBJECTCL value 'ZVCXI_XCS_PRTE' ##NO_TEXT.
  constants C_FCODE_CHECK type UI_FUNC value 'CHECK' ##NO_TEXT.
  constants C_FCODE_COPY type UI_FUNC value 'COPY' ##NO_TEXT.
  constants C_FCODE_DELETE type UI_FUNC value 'DELETE' ##NO_TEXT.
  constants C_FCODE_FREE type UI_FUNC value 'FREE' ##NO_TEXT.
  constants C_FCODE_SAVE type UI_FUNC value 'SAVE' ##NO_TEXT.
  data F_DELETED type ABAP_BOOL read-only .
  data R_PREDEF_RTE type ref to ZCL_VCXI_XCSRC_PREDEF_RTE read-only .
  data T_PREDEF_ARBPL type ZVCXI_XCSRC_TT_PREDEF_ARBPL read-only .

  class-methods CHECK_PREDEF_ARBPL
    importing
      !IF_LCVAL type /VCXI/VSMC_LCVAL optional
    changing
      !CT_PREDEF_ARBPL type ZVCXI_XCSRC_TT_PREDEF_ARBPL
    raising
      /VCXI/CX_CKX .
  class-methods CREATE
    importing
      !IR_PREDEF_RTE type ref to ZCL_VCXI_XCSRC_PREDEF_RTE
    returning
      value(RR_PREDEF_PRTE) type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE
    raising
      /VCXI/CX_CKX .
  methods SET_DESCR
    importing
      !IF_DESCR type /VCXI/CKX_DESCR
      !IF_LANGU type LANGU default SY-LANGU
    raising
      /VCXI/CX_CKX .
  methods SET_IPRER
    importing
      !IF_IPRER type ZVCXI_XCSRC_IPRER
    raising
      /VCXI/CX_CKX .
  methods SET_LCVAL
    importing
      !IF_LCVAL type /VCXI/VSMC_LCVAL
    raising
      /VCXI/CX_CKX .
  methods SET_PREDEF_ARBPL
    importing
      !IT_PREDEF_ARBPL type ZVCXI_XCSRC_TT_PREDEF_ARBPL
    raising
      /VCXI/CX_CKX .
protected section.

  data F_CHANGED type ABAP_BOOL .
  data F_GPRER type ZVCXI_XCSRC_GPRER .
  data S_LOG type /VCXI/CKX_S_LOG .

  methods CONSTRUCTOR
    importing
      !IF_GPRER type ZVCXI_XCSRC_GPRER
      !IF_NEW type ABAP_BOOL default ABAP_FALSE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_COPY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods LOAD_OBLIGATORY_PSEQ
    raising
      /VCXI/CX_CKX .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
private section.

  data F_IPRER type ZVCXI_XCSRC_IPRER .
  data F_LOCKED type ABAP_BOOL value ABAP_FALSE. "#EC NOTEXT .
  data T_DESCR type /VCXI/CKX_TT_DESCR .
  class-data T_INSTANCE type /VCXI/CKX_TT_OBJECT_INSTANCE .

  methods HANDLE_CHANGED
    for event CHANGED of /VCXI/IF_CKX_OBJECT .
  methods INIT_AFTER_CREATE
    importing
      !IR_PREDEF_RTE type ref to ZCL_VCXI_XCSRC_PREDEF_RTE
    raising
      /VCXI/CX_CKX .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSRC_PREDEF_PRTE definition
class ZCL_VCXI_XCSRC_PREDEF_PRTE implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.
endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.
    when ZCL_VCXI_XCSRC_PREDEF_PRTE=>C_FCODE_COPY.
      ME->HANDLE_COPY( ).

    when ZCL_VCXI_XCSRC_PREDEF_PRTE=>C_FCODE_SAVE.
      ME->HANDLE_SAVE( ).
    when ZCL_VCXI_XCSRC_PREDEF_PRTE=>C_FCODE_DELETE.
      ME->HANDLE_DELETE( ).
    when ZCL_VCXI_XCSRC_PREDEF_PRTE=>C_FCODE_FREE.
      ME->HANDLE_FREE( ).

    when ZCL_VCXI_XCSRC_PREDEF_PRTE=>C_FCODE_CHECK.
*      ME->HANDLE_CHECK( ).

  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_CD~GET_INFO.

  move ZCL_VCXI_XCSRC_PREDEF_PRTE=>C_CDOCL_PRTE  to EF_CDOCL.
  move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )       to EF_CDOID.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
*** Object is not locked - No changes possible!
    raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/CKX'
            F_MSGNO = '201'.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK.

***--------------------------------------------------------------------------------------
*** Set Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK.

***--------------------------------------------------------------------------------------
*** Remove Lock Entry
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED.

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.

  data:  LT_DESCR type /VCXI/CKX_TT_DESCR.

  try.
      LT_DESCR = ME->/VCXI/IF_CKX_OBJECT~GET_DESCR_ALL( ).
      RF_DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
    catch /VCXI/CX_CKX.
      clear RF_DESCR.
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.

  move ME->T_DESCR to RT_DESCR.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.

  move ME->F_GPRER to RF_GUID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.

  move ME->F_IPRER to RF_ID.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LF_GPRER       type        ZVCXI_XCSRC_GPRER.
  data:  LS_INSTANCE    type        /VCXI/CKX_S_OBJECT_INSTANCE.
  data:  LR_PREDEF_PRTE type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE.

  check IF_GUID is not initial.

  read table ZCL_VCXI_XCSRC_PREDEF_PRTE=>T_INSTANCE into LS_INSTANCE with key GUID = IF_GUID.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_OBJECT to RR_OBJECT.
  else.
    move IF_GUID to LF_GPRER.
*** Get new Instance
    create object LR_PREDEF_PRTE
      exporting
        IF_GPRER = LF_GPRER.
    move LR_PREDEF_PRTE ?to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

  move ME->S_LOG to RS_LOG.

endmethod.
method CHECK_PREDEF_ARBPL.

  data:          LS_PREDEF_PSEQ   type        ZVCXI_XCSRC_S_PREDEF_PSEQ.
  data:          LR_RTE_ARBPL     type ref to /VCXI/CL_VSMR_RTE_ARBPL,
                 LR_RTE_PSTEP     type ref to /VCXI/CL_VSMR_RTE_PSTEP,
                 LR_PSTEP         type ref to /VCXI/CL_VSMC_PSTEP,
                 LR_CX_CKX        type ref to /VCXI/CX_CKX.
  field-symbols: <S_PREDEF_ARBPL> type        ZVCXI_XCSRC_S_PREDEF_ARBPL,
                 <S_MSG>          type        /VCXI/CKXM_S_MSG.

  loop at CT_PREDEF_ARBPL assigning <S_PREDEF_ARBPL>.
    clear <S_PREDEF_ARBPL>-T_MSG.

*** Create Routing Work Center
    create object LR_RTE_ARBPL
      exporting
        IR_ARBPL = <S_PREDEF_ARBPL>-R_ARBPL
        IF_LCVAL = IF_LCVAL.

*** Assign Production Steps
    loop at <S_PREDEF_ARBPL>-T_PREDEF_PSEQ into LS_PREDEF_PSEQ.
      if LS_PREDEF_PSEQ-R_PREDEF_PSEQ is not bound.
        raise exception type /VCXI/CX_CKX.
      endif.

***   Adjust Optional Flag
      if LS_PREDEF_PSEQ-R_PREDEF_PSEQ->IS_OPSEQ( ) eq ABAP_FALSE.
        move ABAP_FALSE to LS_PREDEF_PSEQ-OPSEQ.
      endif.

      move LS_PREDEF_PSEQ-R_PREDEF_PSEQ->R_PSEQ->R_OBJECT ?to LR_PSTEP.
      create object LR_RTE_PSTEP
        exporting
          IR_PSTEP = LR_PSTEP.

      append LR_RTE_PSTEP to LR_RTE_ARBPL->T_RTE_PSTEP.
    endloop.

    try.
***     Get Machine Group Limit Version by Production Steps
        LR_RTE_ARBPL->GET_MGRPV_BY_RTE_PSTEP( IF_DATE  = SY-DATUM
                                              IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_LIMIT ).

***     Get Machine Group Speed Version by Production Steps
        LR_RTE_ARBPL->GET_MGRPV_BY_RTE_PSTEP( IF_DATE  = SY-DATUM
                                              IF_MMGRP = /VCXI/CL_VSMC_MGRP=>C_MMGRP_SPEED ).

      catch /VCXI/CX_CKX into LR_CX_CKX.
***     Add Message
        append initial line to <S_PREDEF_ARBPL>-T_MSG assigning <S_MSG>.
        move LR_CX_CKX->F_MSGTY to <S_MSG>-MSGTY.
        move LR_CX_CKX->F_MSGID to <S_MSG>-MSGID.
        move LR_CX_CKX->F_MSGNO to <S_MSG>-MSGNO.
        move LR_CX_CKX->F_MSGV1 to <S_MSG>-MSGV1.
        move LR_CX_CKX->F_MSGV2 to <S_MSG>-MSGV2.
        move LR_CX_CKX->F_MSGV3 to <S_MSG>-MSGV3.
        move LR_CX_CKX->F_MSGV4 to <S_MSG>-MSGV4.
    endtry.
  endloop.

endmethod.
method CONSTRUCTOR.

  data:          LR_CX_CKX     type ref to /VCXI/CX_CKX.
  field-symbols: <S_INSTANCE>  type        /VCXI/CKX_S_OBJECT_INSTANCE.

  try.
***------------------------------------------------------------------------------------------------
      move IF_GPRER to ME->F_GPRER.

***------------------------------------------------------------------------------------------------
***   Add instance to instance buffer
      append initial line to ZCL_VCXI_XCSRC_PREDEF_PRTE=>T_INSTANCE assigning <S_INSTANCE>.
      move ME->/VCXI/IF_CKX_OBJECT~GET_GUID( )  to <S_INSTANCE>-GUID.
      move ME                                  ?to <S_INSTANCE>-R_OBJECT.

***------------------------------------------------------------------------------------------------
      if IF_NEW ne ABAP_TRUE.
        ME->LOAD_FROM_DB( ).

***     Register
        ME->R_PREDEF_RTE->REGISTER_PREDEF_PRTE( IR_PREDEF_PRTE = ME ).
      endif.

***------------------------------------------------------------------------------------------------
***   Set Event Handler
      set handler ME->HANDLE_CHANGED        for ME.


    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->HANDLE_FREE( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method CREATE.

  data:  LF_GPRER        type        ZVCXI_XCSRC_GPRER.

*** Check Route Definition is locked
  IR_PREDEF_RTE->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Get new GUID
  call function 'GUID_CREATE'
    importing
      EV_GUID_22 = LF_GPRER.

*** Create Predefined Production Route
  create object RR_PREDEF_PRTE
    exporting
      IF_GPRER = LF_GPRER
      IF_NEW   = ABAP_TRUE.

  RR_PREDEF_PRTE->SET_LOCK( IF_LOCKED = ABAP_TRUE ).
  RR_PREDEF_PRTE->INIT_AFTER_CREATE( IR_PREDEF_RTE = IR_PREDEF_RTE ).

endmethod.
method HANDLE_CHANGED.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      move SY-UNAME     to ME->S_LOG-CHABY.
      get time stamp field ME->S_LOG-CHAAT.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_COPY.

  data:  LR_PREDEF_PRTE   type ref to ZCL_VCXI_XCSRC_PREDEF_PRTE.

***----------------------------------------------------------------------------
*** Create new Route
  LR_PREDEF_PRTE = ZCL_VCXI_XCSRC_PREDEF_PRTE=>CREATE( IR_PREDEF_RTE = ME->R_PREDEF_RTE ).

*** Copy Route Definition
  move ME->T_PREDEF_ARBPL to LR_PREDEF_PRTE->T_PREDEF_ARBPL.

endmethod.
method HANDLE_DELETE.

*** Check is Locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

***----------------------------------------------------------------------------
*** Mark as deleted
  move ABAP_TRUE to ME->F_DELETED.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method HANDLE_FREE.

*** Remove Instance from Buffer
  delete ZCL_VCXI_XCSRC_PREDEF_PRTE=>T_INSTANCE where R_OBJECT eq ME.

*** Mark as Deleted to Hide
  move ABAP_TRUE to ME->F_DELETED.

endmethod.
method HANDLE_SAVE.

  data:          LF_GPRTE            type        /VCXI/VSMC_GPRTE,
                 LF_GUID             type        /VCXI/CKX_GUID.
  data:          LS_PREDEF_ARBPL     type        ZVCXI_XCSRC_S_PREDEF_ARBPL,
                 LS_PREDEF_PSEQ      type        ZVCXI_XCSRC_S_PREDEF_PSEQ.
  data:          LT_PREDEF_ARBPL_G   type        ZVCXI_XCSRC_TT_PREDEF_ARBPL_G.
  field-symbols: <S_PREDEF_ARBPL_G>  type        ZVCXI_XCSRC_S_PREDEF_ARBPL_G,
                 <S_PREDEF_PSEQ_G>   type        ZVCXI_XCSRC_S_PREDEF_PSEQ_G.

*** Save only if changed
  check ME->F_CHANGED eq ABAP_TRUE.

***----------------------------------------------------------------------------
*** Set Changed Info to Log
  move SY-UNAME     to ME->S_LOG-CHABY.
  get time stamp field ME->S_LOG-CHAAT.

***----------------------------------------------------------------------------
  if ME->F_DELETED eq ABAP_FALSE.
*** Get GUID of Production Route
    LF_GPRTE = ME->R_PREDEF_RTE->R_PRTE->/VCXI/IF_CKX_OBJECT~GET_GUID( ).

*** Build Work Center List
    loop at ME->T_PREDEF_ARBPL into LS_PREDEF_ARBPL.
      append initial line to LT_PREDEF_ARBPL_G assigning <S_PREDEF_ARBPL_G>.

      if LS_PREDEF_ARBPL-R_ARBPL is bound.
        move LS_PREDEF_ARBPL-R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_GUID.
        /VCXI/CL_VSMC_ARBPL=>DECRYPT_GUID( exporting IF_GUID  = LF_GUID
                                           importing EF_WERKS = <S_PREDEF_ARBPL_G>-WERKS
                                                     EF_ARBPL = <S_PREDEF_ARBPL_G>-ARBPL ).
      endif.

      loop at LS_PREDEF_ARBPL-T_PREDEF_PSEQ into LS_PREDEF_PSEQ.
        append initial line to <S_PREDEF_ARBPL_G>-T_PREDEF_PSEQ_G assigning <S_PREDEF_PSEQ_G>.
        move-corresponding LS_PREDEF_PSEQ to <S_PREDEF_PSEQ_G>.
        move LS_PREDEF_PSEQ-R_PREDEF_PSEQ->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to <S_PREDEF_PSEQ_G>-GPRES.

***     Trigger Save of Predefined Production Sequence
        LS_PREDEF_PSEQ-R_PREDEF_PSEQ->/VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION( IF_FCODE = ZCL_VCXI_XCSRC_PREDEF_PSEQ=>C_FCODE_SAVE ).

      endloop.
    endloop.

*** Save Predefined Production Route
    call function 'ZVCXI_XCSRC_DB_SAVE_PRTE'
      in update task
      exporting
        IF_GPRER          = ME->F_GPRER
        IF_GPRTE          = LF_GPRTE
        IF_IPRER          = ME->F_IPRER
        IF_LCVAL          = ME->F_LCVAL
        IS_LOG            = ME->S_LOG
        IT_PREDEF_ARBPL_G = LT_PREDEF_ARBPL_G
        IT_DESCR          = ME->T_DESCR
        IF_WRITE_CD       = ABAP_TRUE.
  else.
*** Delete Predefined Production Route
    call function 'ZVCXI_XCSRC_DB_DEL_PRTE'
      in update task
      exporting
        IF_GPRER    = ME->F_GPRER
        IF_WRITE_CD = ABAP_TRUE.
  endif.

*** Reset Change Indicator
  move ABAP_FALSE to ME->F_CHANGED.

endmethod.
method INIT_AFTER_CREATE.

  move IR_PREDEF_RTE to ME->R_PREDEF_RTE.

*** Write Create Log Entry
  move SY-UNAME     to ME->S_LOG-CREBY.
  get time stamp field ME->S_LOG-CREAT.

*** Register
  ME->R_PREDEF_RTE->REGISTER_PREDEF_PRTE( IR_PREDEF_PRTE = ME ).

*** Load Obligatory Production Steps
  ME->LOAD_OBLIGATORY_PSEQ( ).

  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method LOAD_FROM_DB.

  data:          LF_GUID          type          /VCXI/CKX_GUID.
  data:          LS_TD620         type          ZVCXI_XCS_TD620,
                 LS_TD620T        type          ZVCXI_XCS_TD620T,
                 LS_TD621         type          ZVCXI_XCS_TD621,
                 LS_TD622         type          ZVCXI_XCS_TD622,
                 LS_PREDEF_ARBPL  type          ZVCXI_XCSRC_S_PREDEF_ARBPL.
  data:          LT_TD620T        type table of ZVCXI_XCS_TD620T,
                 LT_TD621         type table of ZVCXI_XCS_TD621,
                 LT_TD622         type table of ZVCXI_XCS_TD622.
  data:          LR_PREDEF_PSEQ   type ref to   ZCL_VCXI_XCSRC_PREDEF_PSEQ.
  field-symbols: <S_DESCR>        type          /VCXI/CKX_S_DESCR,
                 <S_PREDEF_PSEQ>  type          ZVCXI_XCSRC_S_PREDEF_PSEQ.

  clear: ME->R_PREDEF_RTE,
         ME->F_IPRER,
         ME->S_LOG,
         ME->T_DESCR,
         ME->T_PREDEF_ARBPL,
         ME->F_DELETED,
         ME->F_CHANGED.

***------------------------------------------------------------------------------------------------
  select single *
         into LS_TD620
         from ZVCXI_XCS_TD620
        where GPRER eq ME->F_GPRER.
  if SY-SUBRC ne 0.
*** Predefined Production Route with GUID & is not stored in the database.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCSRC'
                                          IF_MSGNO = '102'
                                          IF_MSGV1 = ME->F_GPRER ).
  endif.

*** Production Route
  move LS_TD620-GPRTE to LF_GUID.
  ME->R_PREDEF_RTE ?= ZCL_VCXI_XCSRC_PREDEF_RTE=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

*** ID and Link Context Value
  move LS_TD620-IPRER to ME->F_IPRER.
  move LS_TD620-LCVAL to ME->F_LCVAL.

*** Log
  move LS_TD620-S_LOG to ME->S_LOG.

*** Load Description
  select *
         into table LT_TD620T
         from ZVCXI_XCS_TD620T
        where GPRER eq ME->F_GPRER.
  loop at LT_TD620T into LS_TD620T.
    append initial line to ME->T_DESCR assigning <S_DESCR>.
    move-corresponding LS_TD620T to <S_DESCR>.
  endloop.

***------------------------------------------------------------------------------------------------
  select *
         into table LT_TD621
         from ZVCXI_XCS_TD621
        where GPRER eq ME->F_GPRER.

  select *
         into table LT_TD622
         from ZVCXI_XCS_TD622
        where GPRER eq ME->F_GPRER.

  sort LT_TD621 by COPER.
  sort LT_TD622 by COPER CPSEQ.

  loop at LT_TD621 into LS_TD621.
    clear LS_PREDEF_ARBPL.
    LF_GUID = /VCXI/CL_VSMC_ARBPL=>ENCRYPT_GUID( IF_WERKS = LS_TD621-WERKS
                                                 IF_ARBPL = LS_TD621-ARBPL ).
    LS_PREDEF_ARBPL-R_ARBPL ?= /VCXI/CL_VSMC_ARBPL=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).

    loop at LT_TD622 into LS_TD622 where GPRER eq LS_TD621-GPRER
                                    and  COPER eq LS_TD621-COPER.
      move LS_TD622-GPRES to LF_GUID.
      LR_PREDEF_PSEQ ?= ZCL_VCXI_XCSRC_PREDEF_PSEQ=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
      if LR_PREDEF_PSEQ is bound.
         append initial line to LS_PREDEF_ARBPL-T_PREDEF_PSEQ assigning <S_PREDEF_PSEQ>.
         move LR_PREDEF_PSEQ to <S_PREDEF_PSEQ>-R_PREDEF_PSEQ.
         move LS_TD622-OPSEQ to <S_PREDEF_PSEQ>-OPSEQ.
      else.
***     Production Sequence is no longer valid -> Ingore
        raise event /VCXI/IF_CKX_OBJECT~CHANGED.
      endif.
    endloop.

    if lines( LS_PREDEF_ARBPL-T_PREDEF_PSEQ ) ge 1.
***   Add Work Center
      append LS_PREDEF_ARBPL to ME->T_PREDEF_ARBPL.
    else.
***   Work Center without Production Sequence will be ignored
      raise event /VCXI/IF_CKX_OBJECT~CHANGED.
    endif.
  endloop.

*** Check Predefined Route
  ZCL_VCXI_XCSRC_PREDEF_PRTE=>CHECK_PREDEF_ARBPL( exporting IF_LCVAL        = ME->F_LCVAL
                                                  changing  CT_PREDEF_ARBPL = ME->T_PREDEF_ARBPL ).

endmethod.
method LOAD_OBLIGATORY_PSEQ.

  data:          LT_PREDEF_ARBPL  type ZVCXI_XCSRC_TT_PREDEF_ARBPL.
  data:          LR_PREDEF_PSEQ   type ref to ZCL_VCXI_XCSRC_PREDEF_PSEQ,
                 LR_OBJECT        type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_PREDEF_ARBPL> type ZVCXI_XCSRC_S_PREDEF_ARBPL,
                 <S_PREDEF_PSEQ>  type ZVCXI_XCSRC_S_PREDEF_PSEQ.

  loop at ME->R_PREDEF_RTE->T_PREDEF_PSEQ into LR_OBJECT.
    move LR_OBJECT ?to LR_PREDEF_PSEQ.

    check LR_PREDEF_PSEQ->R_PSEQ           is bound and
          LR_PREDEF_PSEQ->R_PSEQ->R_OBJECT is bound and
          LR_PREDEF_PSEQ->R_PSEQ->R_OBJECT->F_TOOBJ eq /VCXI/CL_VSMC_PSTEP=>C_TOOBJ_PSTEP.

    if LR_PREDEF_PSEQ->IS_OPSEQ( ) ne ABAP_TRUE.
      append initial line to LT_PREDEF_ARBPL assigning <S_PREDEF_ARBPL>.
      append initial line to <S_PREDEF_ARBPL>-T_PREDEF_PSEQ assigning <S_PREDEF_PSEQ>.
      move LR_PREDEF_PSEQ to <S_PREDEF_PSEQ>-R_PREDEF_PSEQ.
    endif.
  endloop.

  ME->SET_PREDEF_ARBPL( IT_PREDEF_ARBPL = LT_PREDEF_ARBPL ).

endmethod.
method SET_DESCR .

  field-symbols:  <S_DESCR> type /VCXI/CKX_S_DESCR.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Set Description
  read table ME->T_DESCR assigning <S_DESCR> with key LANGU = IF_LANGU.
  if SY-SUBRC ne 0.
    append initial line to ME->T_DESCR assigning <S_DESCR>.
    move IF_LANGU to <S_DESCR>-LANGU.
  endif.
  move IF_DESCR   to <S_DESCR>-DESCR.

*** Raise Changed Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_IPRER.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Continue only if changed
  check IF_IPRER ne ME->F_IPRER.

  move IF_IPRER to ME->F_IPRER.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method SET_LCVAL.

*** Check of the Lock-Status of the Object
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

*** Continue only if changed
  check IF_LCVAL ne ME->F_LCVAL.

  move IF_LCVAL to ME->F_LCVAL.
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

*** Check Predefined Route
  ZCL_VCXI_XCSRC_PREDEF_PRTE=>CHECK_PREDEF_ARBPL( exporting IF_LCVAL        = ME->F_LCVAL
                                                  changing  CT_PREDEF_ARBPL = ME->T_PREDEF_ARBPL ).

endmethod.
method SET_LOCK.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      if IF_LOCKED eq ABAP_TRUE.
***     Try to Set Write Lock
        call function 'ENQUEUE_EZVCXI_XCS_D620E'
          exporting
            GPRER          = ME->F_GPRER
          exceptions
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            others         = 3.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.
      else.
***     Try to Un-Lock
        call function 'DEQUEUE_EZVCXI_XCS_D620E'
          exporting
            GPRER = ME->F_GPRER.
      endif.

      move IF_LOCKED to ME->F_LOCKED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method SET_PREDEF_ARBPL.

  check IT_PREDEF_ARBPL ne ME->T_PREDEF_ARBPL.
  move IT_PREDEF_ARBPL to ME->T_PREDEF_ARBPL.

*** Check Predefined Route
  ZCL_VCXI_XCSRC_PREDEF_PRTE=>CHECK_PREDEF_ARBPL( exporting IF_LCVAL        = ME->F_LCVAL
                                                  changing  CT_PREDEF_ARBPL = ME->T_PREDEF_ARBPL ).

  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
