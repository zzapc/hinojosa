
class ZCL_VCXI_XCM_MBQ_STP_S102 definition
  public
  inheriting from ZCL_VCXI_XCM_MBQ_STP_S000
  create public .

public section.

  methods EXECUTE
    redefinition .
protected section.

  methods COMPLETE_POSITION
    importing
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
      !IF_POSNR type POSNR
    changing
      !CT_POSUPD type ZVCXI_XCI_TT_CFGS_UPDKZ
    raising
      /VCXI/CX_CKX .
  methods UPDATE_VBAP
    importing
      !IS_MATLI type ZVCXI_XCM_MBQ_S_MATLI
    changing
      !CS_VBAP type VBAP
    raising
      /VCXI/CX_CKX .
  methods UPDATE_VBEP
    importing
      !IS_MATLI type ZVCXI_XCM_MBQ_S_MATLI
    changing
      !CS_VBEP type VBEP
    raising
      /VCXI/CX_CKX .
  methods COPY_POSITION
    importing
      !IF_POSNR_ORG type POSNR
      !IF_POSNR_NEW type POSNR
      !IR_BOB_SDOC type ref to ZCL_VCXI_XCI_BOB_SDOC
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCM_MBQ_STP_S102 definition
class ZCL_VCXI_XCM_MBQ_STP_S102 implementation.
  method COMPLETE_POSITION.

*** Set Rejection Reason for original item to "Copied and Rejected"
    IR_BOB_SDOC->T_VBAP[ POSNR = IF_POSNR ]-ABGRU = 'CR'.

*** Mark for Update
    append value #( POSNR = IF_POSNR
                    UPDKZ = 'U' ) to CT_POSUPD.

  endmethod.
  method COPY_POSITION.

    data: LS_VBAP type VBAP,
          LS_VBKD type VBKD,
          LS_VBEP type VBEP,
          LS_KOMV type KOMV.


*** Sales Document Item Data
    LS_VBAP = IR_BOB_SDOC->T_VBAP[ POSNR = IF_POSNR_ORG ].
    LS_VBAP-POSNR = IF_POSNR_NEW.
    append LS_VBAP to IR_BOB_SDOC->T_VBAP.

*** Sales Document Business Data
    if LINE_EXISTS( IR_BOB_SDOC->T_VBKD[ POSNR = IF_POSNR_ORG ] ).
      LS_VBKD = IR_BOB_SDOC->T_VBKD[ POSNR = IF_POSNR_ORG ].
      LS_VBKD-POSNR = IF_POSNR_NEW.
      append LS_VBKD to IR_BOB_SDOC->T_VBKD.
    endif.

*** Sales Document Schedule Line Data
    loop at IR_BOB_SDOC->T_VBEP into LS_VBEP where POSNR eq IF_POSNR_ORG
                                              and  WMENG ne 0.    "BAPI can't process Order Schedule Lines w/o Requirement Quantity
      LS_VBEP-POSNR = IF_POSNR_NEW.
      append LS_VBEP to IR_BOB_SDOC->T_VBEP.
    endloop.

*** Pricing Communications-Condition Record
    loop at IR_BOB_SDOC->T_KOMV into LS_KOMV where KPOSN eq IF_POSNR_ORG.
      LS_KOMV-KPOSN = IF_POSNR_NEW.
      append LS_KOMV to IR_BOB_SDOC->T_KOMV.
    endloop.

  endmethod.
  method EXECUTE.

    data: LF_POSNR type POSNR.
    data: LS_MATLI type ZVCXI_XCM_MBQ_S_MATLI.
    data: LT_POSUPD type ZVCXI_XCI_TT_CFGS_UPDKZ.


    try.
***--------------------------------------------------------------------------------------
***     Process all Materials for which a SD Position should be created/updated
        loop at ME->R_DCO_INPUT->T_MATLI into LS_MATLI.
***       Check Activity - Material Creation
          check LINE_EXISTS( LS_MATLI-T_ACTCON[ ACTID = ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_SDPOS ] ).

          if LS_MATLI-MATNR is initial.
***         No material number was defined for line item.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGID = 'ZVCXI_XCM_MBQ'
                                                  IF_MSGTY = 'E'
                                                  IF_MSGNO = '102' ).
          endif.

***       Define new Position Number with Offset 2000
          LF_POSNR = ME->R_DCO_INPUT->F_POSNR.
          do.
            LF_POSNR += 2000.
            if not LINE_EXISTS( ME->R_DCO_OUTPUT->R_BOB_SDOC->T_VBAP[ POSNR = LF_POSNR ] ).
              exit.
            endif.
          enddo.

***       Copy Position
          ME->COPY_POSITION( IF_POSNR_ORG = ME->R_DCO_INPUT->F_POSNR
                             IF_POSNR_NEW = LF_POSNR
                             IR_BOB_SDOC  = ME->R_DCO_OUTPUT->R_BOB_SDOC ).
          append value #( POSNR = LF_POSNR
                          UPDKZ = 'I' ) to LT_POSUPD.

***       Update Sales Document Item
          ME->UPDATE_VBAP( exporting IS_MATLI = LS_MATLI
                           changing  CS_VBAP  = ME->R_DCO_OUTPUT->R_BOB_SDOC->T_VBAP[ POSNR = LF_POSNR ] ).
          loop at ME->R_DCO_OUTPUT->R_BOB_SDOC->T_VBEP assigning field-symbol(<S_VBEP>)
                                                       where POSNR eq LF_POSNR.
            ME->UPDATE_VBEP( exporting IS_MATLI = LS_MATLI
                             changing  CS_VBEP  = <S_VBEP> ).
          endloop.

***       Mark initial Item as completed
          ME->COMPLETE_POSITION( exporting IF_POSNR    = ME->R_DCO_INPUT->F_POSNR
                                           IR_BOB_SDOC = ME->R_DCO_OUTPUT->R_BOB_SDOC
                                 changing  CT_POSUPD   = LT_POSUPD ).
        endloop.

***--------------------------------------------------------------------------------------
        if LT_POSUPD is initial.
***       Set Status to Canceled
          ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_CANCELED ).
        else.
          ME->R_DCO_OUTPUT->SET_POSUPD( IT_POSUPD = LT_POSUPD ).
***       New material number is added to update queue.
          ME->R_RPSEG->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCM_MBQ'
                                           IF_MSGTY = 'S'
                                           IF_MSGNO = '103' ).
***       Set Status to Complete
          ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_COMPLETED ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
***     Set Status to Error
        ME->R_RPSEG->SET_SRPSG( IF_SRPSG = /VCXI/CL_CKMR_RPSEG=>C_SRPSG_ERROR ).

***     Add Message to Message Log
        ME->R_RPSEG->R_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Save Status
    ME->R_RPSEG->SAVE_AND_COMMIT( ).

  endmethod.
  method UPDATE_VBAP.

*** Change Material Number on current Item
    CS_VBAP-MATNR = IS_MATLI-MATNR.
    CS_VBAP-MATWA = IS_MATLI-MATNR.

*** Clear Infos that should be redetermined
    clear: CS_VBAP-MATKL,      "Material Group
           CS_VBAP-ARKTX,      "Short text for sales order item
           CS_VBAP-PSTYV,      "Sales document item category
           CS_VBAP-KDMAT,      "Material Number Used by Customer
           CS_VBAP-VSTEL,      "Shipping Point / Receiving Point
           CS_VBAP-BEDAE,      "Requirements type
           CS_VBAP-PMATN,      "Pricing Ref. Matl
           CS_VBAP-CHARG,      "Batch
           CS_VBAP-LFREL,      "Itm Relev.for Deliv.
           CS_VBAP-FKREL,      "Relevant for Billing
           CS_VBAP-UEPOS,      "Higher-Level Item
           CS_VBAP-PRODH,      "Product hierarchy
           CS_VBAP-UMZIZ,      "Conversion Factor
           CS_VBAP-UMZIN,      "Conversion Factor
           CS_VBAP-SUBSTN_NUMERATOR,    "Numerator for Conversion
           CS_VBAP-SUBSTN_DENOMINATOR,  "Denominator for Conversion
           CS_VBAP-UEBTK,      "Unlimited Tolerance
           CS_VBAP-UEBTO,      "Overdeliv. Tolerance
           CS_VBAP-UNTTO,      "Underdel. Tolerance
           CS_VBAP-SPART,      "Division
           CS_VBAP-NETWR,      "Net Value
           CS_VBAP-WAERK,      "Document Currency
           CS_VBAP-UMVKZ,      "Numerator
           CS_VBAP-UMVKN,      "Denominator
           CS_VBAP-BRGEW,      "Gross Weight
           CS_VBAP-NTGEW,      "Net Weight
           CS_VBAP-GEWEI,      "Weight unit
           CS_VBAP-VOLUM,      "Volume
           CS_VBAP-VOLEH,      "Volume unit
           CS_VBAP-ERLRE,      "Completion Rule
           CS_VBAP-WERKS,      "Plant
           CS_VBAP-UPMAT,      "Pricing Ref.Material
           CS_VBAP-PRCTR.      "Profit Center

  endmethod.
  method UPDATE_VBEP.

*** Clear Infos that should be redetermined
    clear: CS_VBEP-ETTYP,    "Sched.line category
           CS_VBEP-BDART,    "Requirement type
           CS_VBEP-BWART.    "Movement type

  endmethod.
