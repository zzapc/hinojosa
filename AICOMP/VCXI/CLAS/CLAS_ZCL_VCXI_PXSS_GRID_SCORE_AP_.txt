
class ZCL_VCXI_PXSS_GRID_SCORE_AP definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_PXSS_S_SCORE_AP_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .

  methods REFRESH_GRID
    redefinition .
protected section.

  constants C_UC_ADD type UI_FUNC value 'ADD' ##NO_TEXT.
  constants C_UC_ALL type UI_FUNC value 'ALL' ##NO_TEXT.
  constants C_UC_DEL type UI_FUNC value 'DEL' ##NO_TEXT.
  constants C_UC_NONE type UI_FUNC value 'NONE' ##NO_TEXT.
  data F_SCORE_ADJ type ABAP_BOOL .

  methods CHANGE_STYLE_SCORE
    importing
      !IS_DATA type ANY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods HANDLE_UC_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_ALL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_NONE
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods GET_LAYOUT
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_GRID_SCORE_AP definition
class ZCL_VCXI_PXSS_GRID_SCORE_AP implementation.
  method CHANGE_STYLE_SCORE.

    data: LS_SCORE_AP_GRID type ZVCXI_PXSS_S_SCORE_AP_GRID.


    free CT_STYL.

*** "Cast" generic structure to Vis Structure
    move-corresponding IS_DATA to LS_SCORE_AP_GRID.

***--------------------------------------------------------------------------------------
*** Set Score ID = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ISCOR'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Score ID Description = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'ISCOR_DESCR'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

***--------------------------------------------------------------------------------------
*** Enable Score Position, Type and Slot Indicator if allowed
    if LS_SCORE_AP_GRID-DISABLED eq ABAP_FALSE and
       ME->F_SCORE_ADJ           eq ABAP_TRUE  and
       ME->F_STYLE_ENABLED       eq CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SCORP'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TSCOR'
                                  IF_STYLE     = ME->F_STYLE_ENABLED
                        changing  CT_STYL      = CT_STYL ).
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FSLIN'
                                  IF_STYLE     = conv #( ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT )
                        changing  CT_STYL      = CT_STYL ).
    else.
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SCORP'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TSCOR'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FSLIN'
                                  IF_STYLE     = ME->F_STYLE_DISABLED
                        changing  CT_STYL      = CT_STYL ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Score Position Unit = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SCORP_UOM'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Score Type Description = Disable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TSCOR_DESCR'
                                IF_STYLE     = ME->F_STYLE_DISABLED
                      changing  CT_STYL      = CT_STYL ).

***--------------------------------------------------------------------------------------
*** Set Flag - Apply = Disable
    if LS_SCORE_AP_GRID-DISABLED eq ABAP_FALSE  and
       ME->F_STYLE_ENABLED       eq CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FAPPL'
                                  IF_STYLE     = conv #( ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT )
                        changing  CT_STYL      = CT_STYL ).
    else.
      ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FAPPL'
                                  IF_STYLE     = conv #( ME->F_STYLE_DISABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT_NO )
                        changing  CT_STYL      = CT_STYL ).
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IR_UIGATE         = IR_UIGATE
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_INUSE  type /VCXI/VKSR_INUSE,
          LF_COLPOS type I.
    field-symbols:  <S_FCAT>  type  LVC_S_FCAT.

***--------------------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE->IS_INUSE( ).


***--------------------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning <S_FCAT>.
***   General adjustments
      case <S_FCAT>-FIELDNAME.
        when 'T_STYL' or 'DISABLED'.
          move ABAP_TRUE    to <S_FCAT>-TECH.
        when 'FSLIN'.
          move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
        when 'FAPPL'.
          move ABAP_TRUE    to <S_FCAT>-CHECKBOX.
      endcase.

***   Adjust Edit Mode
      if LF_LOCKED eq ABAP_TRUE and
         LF_INUSE  eq ABAP_TRUE.
        case <S_FCAT>-FIELDNAME.
          when 'SCORP' or 'TSCOR' or 'FSLIN'.
            <S_FCAT>-EDIT = ME->F_SCORE_ADJ.
          when 'FAPPL'.
            move ABAP_TRUE    to <S_FCAT>-EDIT.
        endcase.
      else.
        move ABAP_FALSE to <S_FCAT>-EDIT.
      endif.


***----------------------------------------------------------------------------
***   Set Position for each Field
      move 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'ISCOR'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'ISCOR_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'SCORP'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'SCORP_UOM'.   <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TSCOR'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'TSCOR_DESCR'. <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'FSLIN'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.
      add 1 to LF_COLPOS.
      if <S_FCAT>-FIELDNAME eq 'FAPPL'.       <S_FCAT>-COL_POS = LF_COLPOS.  endif.

    endloop.

  endmethod.
  method GET_GRID_DATA.

    data: LS_SCORE_AP_GRID type ZVCXI_PXSS_S_SCORE_AP_GRID,
          LS_SCORE_AP      type ZVCXI_PXSS_S_SCORE_AP.
    data: LT_SCORE_AP       type ZVCXI_PXSS_TT_SCORE_AP,
          LT_ISCOR_DISABLED type  ZVCXI_PXS_TT_ISCOR.
    data: LR_SCORE_AP type ref to ZIF_VCXI_PXSS_SCORES_AP.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type        ANY.

*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

*** Get Gate of the Scores user
    try.
        move ME->R_GATE->R_CLSPR ?to LR_SCORE_AP.
      catch CX_SY_MOVE_CAST_ERROR.
        clear LR_SCORE_AP.
    endtry.
    check LR_SCORE_AP is bound.

*** Get Scores
    LR_SCORE_AP->GET_SCORE_AP( importing ET_SCORE_AP       = LT_SCORE_AP
                                         ET_ISCOR_DISABLED = LT_ISCOR_DISABLED ).

    loop at LT_SCORE_AP into LS_SCORE_AP.
      clear LS_SCORE_AP_GRID.
      move LS_SCORE_AP to LS_SCORE_AP_GRID-S_SCORE_AP.

***   Get Descriptions
      LS_SCORE_AP_GRID-ISCOR_DESCR = ZCL_VCXI_PXSS_BL_SCORE=>GET_DESCR_ISCOR( IF_ISCOR = LS_SCORE_AP_GRID-ISCOR ).
      LS_SCORE_AP_GRID-TSCOR_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_TSCOR_INFO( IF_TSCOR = LS_SCORE_AP_GRID-TSCOR )-DESCR.


***--------------------------------------------------------------------------------------
***   Defined as Disabled
      if LINE_EXISTS( LT_ISCOR_DISABLED[ TABLE_LINE = LS_SCORE_AP ] ).
        LS_SCORE_AP_GRID-DISABLED = ABAP_TRUE.
      else.
        LS_SCORE_AP_GRID-DISABLED = ABAP_FALSE.
      endif.

***   Set Style Details
      ME->CHANGE_STYLE_SCORE( exporting IS_DATA     = LS_SCORE_AP_GRID
                              changing  CT_STYL     = LS_SCORE_AP_GRID-T_STYL ).

***   Call DVC Service - Modify Style
      ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = ME->R_GATE
                                           changing  CT_STYL = LS_SCORE_AP_GRID-T_STYL ).

***--------------------------------------------------------------------------------------
***   Add Entry
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding LS_SCORE_AP_GRID to <S_DATA>.

    endloop.

  endmethod.
  method GET_LAYOUT.

    RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Activate Toolbar
    move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.

*** Disable Line Selection (and Drag&Drop function)
    move ABAP_TRUE to RS_LAYOUT-NO_ROWMARK.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    field-symbols: <T_DATA> type standard table.

    check E_MODIFIED eq ABAP_TRUE.

    try.
        SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                             ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
***     Get Reference Element for Score Application
        cast ZIF_VCXI_PXSS_SCORES_AP( ME->R_GATE->R_CLSPR )->SET_SCORE_AP( IT_SCORE_AP = corresponding #( <T_DATA> ) ).
        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_HOTSPOT_CLICK.

    data: LF_CHANGED  type  ABAP_BOOL.
    data: LS_SCORE_AP_GRID type  ZVCXI_PXSS_S_SCORE_AP_GRID.
    data: LT_SCORE_AP type  ZVCXI_PXSS_TT_SCORE_AP.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    try.
        check ME->R_GATE is bound and
              ME->R_GATE->F_FREED ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

***     Get current Row
        check LINE_EXISTS( <T_DATA>[ E_ROW_ID-INDEX ] ).
        assign <T_DATA>[ E_ROW_ID-INDEX ] to <S_DATA>.
        move-corresponding <S_DATA> to LS_SCORE_AP_GRID.

***--------------------------------------------------------------------------------------
        case E_COLUMN_ID-FIELDNAME.
          when 'FAPPL'.
***         Toggle Application Flag
            LS_SCORE_AP_GRID-FAPPL = switch #( LS_SCORE_AP_GRID-FAPPL when ABAP_TRUE  then ABAP_FALSE
                                                                      when ABAP_FALSE then ABAP_TRUE ).
            move ABAP_TRUE to LF_CHANGED.

        endcase.
        move-corresponding LS_SCORE_AP_GRID to <S_DATA>.

***--------------------------------------------------------------------------------------
        if LF_CHANGED eq ABAP_TRUE.
***       Get Reference Element for Score Application
          move-corresponding <T_DATA> to LT_SCORE_AP.
          cast ZIF_VCXI_PXSS_SCORES_AP( ME->R_GATE->R_CLSPR )->SET_SCORE_AP( IT_SCORE_AP = LT_SCORE_AP ).
          ME->R_GATE->RAISE_EVENTS( ).
        endif.

***     Request Refresh for ALV
        move ABAP_TRUE to ME->F_REFRESH_REQ.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_TOOLBAR.

    data: LF_DISABLED type ABAP_BOOL.


    try.
***--------------------------------------------------------------------------------------
***     Get Lock and In-Use Status
        if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE.
          move ABAP_TRUE to LF_DISABLED.
        endif.

***     Do general DVC Check if Function is activ
        if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                      IF_IFUNC = 'TOOLBAR_DISABLED' ) eq ABAP_TRUE.
          move ABAP_TRUE to LF_DISABLED.
        endif.

***--------------------------------------------------------------------------------------
***     Insert Toolbar elements for Apply Flag
        append value #( FUNCTION  = C_UC_ALL
                        TEXT      = 'All'(001)
                        BUTN_TYPE = C_BTYPE_BUTTON
                        ICON      = ICON_SELECT_ALL
                        DISABLED  = LF_DISABLED
                      ) to E_OBJECT->MT_TOOLBAR.

        append value #( FUNCTION  = C_UC_NONE
                        TEXT      = 'None'(002)
                        BUTN_TYPE = C_BTYPE_BUTTON
                        ICON      = ICON_DESELECT_ALL
                        DISABLED  = LF_DISABLED
                      ) to E_OBJECT->MT_TOOLBAR.

***----------------------------------------------------------------------------
***     Scores can be adjusted
        if ME->F_SCORE_ADJ eq ABAP_TRUE.
***       Add Separator
          append value #( BUTN_TYPE = C_BTYPE_SEPARATOR ) to E_OBJECT->MT_TOOLBAR.

***       Insert Toolbar elements to modify Scores
          append value #( FUNCTION  = C_UC_ADD
                          TEXT      = 'Add Score'(003)
                          BUTN_TYPE = C_BTYPE_BUTTON
                          ICON      = ICON_INSERT_ROW
                          DISABLED  = LF_DISABLED
                        ) to E_OBJECT->MT_TOOLBAR.

          append value #( FUNCTION  = C_UC_DEL
                          TEXT      = 'Delete Score'(004)
                          BUTN_TYPE = C_BTYPE_BUTTON
                          ICON      = ICON_DELETE_ROW
                          DISABLED  = LF_DISABLED
                        ) to E_OBJECT->MT_TOOLBAR.
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_ADD.

    data: LF_NSCOR type ZVCXI_P0SS_NSCOR.
    data: LS_ROW           type LVC_S_ROW,
          LS_SCORE_AP_GRID type ZVCXI_PXSS_S_SCORE_AP_GRID.
    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP.
    field-symbols: <T_DATA>     type standard table,
                   <S_SCORE_AP> type ZVCXI_PXSS_S_SCORE_AP.


    check ME->R_GATE is bound and
          ME->R_GATE->F_FREED ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get Cursor of Last Row in Grid
    ME->GET_SELECTED_ROWS( importing ES_LAST_ROW = LS_ROW ).
    check LS_ROW is not initial.

    LS_SCORE_AP_GRID = corresponding #( <T_DATA>[ LS_ROW-INDEX ] ).
    clear: LS_SCORE_AP_GRID-SCORP,
           LS_SCORE_AP_GRID-FAPPL.

*** Add Score
    insert LS_SCORE_AP_GRID into <T_DATA> index LS_ROW-INDEX + 1.
    LT_SCORE_AP = corresponding #( <T_DATA> ).

*** Reorganize Score IDs of scores after added score
    LF_NSCOR = LS_SCORE_AP_GRID-ISCOR+1.
    loop at LT_SCORE_AP assigning <S_SCORE_AP> from LS_ROW-INDEX + 1
                                               where ISCOR+0(1) eq LS_SCORE_AP_GRID-ISCOR+0(1).
      add 1 to LF_NSCOR.
      <S_SCORE_AP>-ISCOR = <S_SCORE_AP>-ISCOR+0(1) && LF_NSCOR.
    endloop.

***--------------------------------------------------------------------------------------
*** Get Reference Element for Score Application
    cast ZIF_VCXI_PXSS_SCORES_AP( ME->R_GATE->R_CLSPR )->SET_SCORE_AP( IT_SCORE_AP = LT_SCORE_AP ).
    ME->R_GATE->RAISE_EVENTS( ).

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_UC_ALL.

    check ME->R_GATE is bound and
          ME->R_GATE->F_FREED ne ABAP_TRUE.

*** Mark all Scores as applied
    cast ZIF_VCXI_PXSS_SCORES_AP( ME->R_GATE->R_CLSPR )->SET_SCORE_AP( IF_SCORE_FAALL = ABAP_TRUE ).
    ME->R_GATE->RAISE_EVENTS( ).

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_UC_DEL.

    data: LF_NSCOR type ZVCXI_P0SS_NSCOR.
    data: LS_ROW           type LVC_S_ROW,
          LS_SCORE_AP_GRID type ZVCXI_PXSS_S_SCORE_AP_GRID.
    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP.
    field-symbols: <T_DATA>     type standard table,
                   <S_SCORE_AP> type ZVCXI_PXSS_S_SCORE_AP.


    check ME->R_GATE is bound and
          ME->R_GATE->F_FREED ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Get Cursor of Last Row in Grid
    ME->GET_SELECTED_ROWS( importing ES_LAST_ROW = LS_ROW ).
    check LS_ROW is not initial.

    LS_SCORE_AP_GRID = corresponding #( <T_DATA>[ LS_ROW-INDEX ] ).
    check LS_SCORE_AP_GRID-DISABLED ne ABAP_TRUE.

*** Delete Score
    delete <T_DATA> index LS_ROW-INDEX.
    LT_SCORE_AP = corresponding #( <T_DATA> ).

*** Reorganize Score IDs of scores after removed score
    LF_NSCOR = LS_SCORE_AP_GRID-ISCOR+1 - 1.
    loop at LT_SCORE_AP assigning <S_SCORE_AP> from LS_ROW-INDEX
                                               where ISCOR+0(1) eq LS_SCORE_AP_GRID-ISCOR+0(1).
      add 1 to LF_NSCOR.
      <S_SCORE_AP>-ISCOR = <S_SCORE_AP>-ISCOR+0(1) && LF_NSCOR.
    endloop.

***--------------------------------------------------------------------------------------
*** Get Reference Element for Score Application
    cast ZIF_VCXI_PXSS_SCORES_AP( ME->R_GATE->R_CLSPR )->SET_SCORE_AP( IT_SCORE_AP = LT_SCORE_AP ).
    ME->R_GATE->RAISE_EVENTS( ).

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_UC_NONE.

    data: LF_CHANGED  type  ABAP_BOOL.
    data: LS_SCORE_AP_GRID type  ZVCXI_PXSS_S_SCORE_AP_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.


    check ME->R_GATE is bound and
          ME->R_GATE->F_FREED ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign ME->R_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Process all Rows
    loop at <T_DATA> assigning <S_DATA>.
      move-corresponding <S_DATA> to LS_SCORE_AP_GRID.

      if LINE_EXISTS( LS_SCORE_AP_GRID-T_STYL[ FIELDNAME = 'FAPPL'
                                               STYLE     = ME->F_STYLE_ENABLED + CL_GUI_ALV_GRID=>MC_STYLE_HOTSPOT ] ).
        LS_SCORE_AP_GRID-FAPPL = ABAP_FALSE.
        LF_CHANGED = ABAP_TRUE.
      endif.

      move-corresponding LS_SCORE_AP_GRID to <S_DATA>.
    endloop.

***--------------------------------------------------------------------------------------
    if LF_CHANGED eq ABAP_TRUE.
***   Get Reference Element for Score Application
      cast ZIF_VCXI_PXSS_SCORES_AP( ME->R_GATE->R_CLSPR )->SET_SCORE_AP( IT_SCORE_AP = corresponding #( <T_DATA> ) ).
      ME->R_GATE->RAISE_EVENTS( ).
    endif.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_UCOMM.

    try.
***     Trigger command
        case E_UCOMM.
          when C_UC_ALL.
            ME->HANDLE_UC_ALL( ).
          when C_UC_NONE.
            ME->HANDLE_UC_NONE( ).

          when C_UC_ADD.
            ME->HANDLE_UC_ADD( ).
          when C_UC_DEL.
            ME->HANDLE_UC_DEL( ).
        endcase.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

    move ABAP_TRUE to ME->F_REFRESH_REQ .

  endmethod.
  method REFRESH_GRID.

    data: LF_CALCM  type C.


*** Get Score Status Calculation Method
    LF_CALCM = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_SSCOR_CALC( IF_SSCOR = cast ZIF_VCXI_PXSS_SCORES_AP( ME->R_GATE->R_CLSPR )->GET_SSCOR( ) ).
    ME->F_SCORE_ADJ = switch #( LF_CALCM when '1' then ABAP_FALSE     "automatic
                                         when '2' then ABAP_TRUE      "half automatic
                                         when '3' then ABAP_TRUE      "manually
                                         when '4' then ABAP_FALSE ).  "external

*** Check if Abap_True -> Abap_undefined if a Usercommand is handled (e.g. add)
    if ME->F_REFRESH_REQ eq ABAP_TRUE.
      SUPER->REFRESH_GRID( ).
    endif.

    move ABAP_FALSE to ME->F_REFRESH_REQ.

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*    me->R_GRID->register_edit_event( cl_gui_alv_grid=>mc_evt_enter ).

*** Set Eventhandler for Toolbar
    set handler ME->HANDLE_TOOLBAR             for ME->R_GRID.
    set handler ME->HANDLE_UCOMM               for ME->R_GRID.
    set handler ME->HANDLE_HOTSPOT_CLICK       for ME->R_GRID.

  endmethod.
