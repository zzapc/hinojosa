
class ZCL_VCXI_F0SS_PR_SOV definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  interfaces ZIF_VCXI_XCS_NGREP .

  constants C_IPRVT_F0_SOV type /VCXI/VKSC_IPRVT value 'ZVCXI_F0SS_SOV' ##NO_TEXT.

  methods CONNECT
    importing
      !IR_GATE_IN type ref to /VCXI/CL_VKSR_GATE
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_XCONI
    importing
      !IF_CONNECTED type ABAP_BOOL default ABAP_UNDEFINED
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_XCONO
    importing
      !IF_CONNECTED type ABAP_BOOL default ABAP_UNDEFINED
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_XCONR
    importing
      !IR_GATE_IN type ref to /VCXI/CL_VKSR_GATE optional
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE optional
    returning
      value(RT_XCONR) type ZVCXI_F0SS_TT_XCONR
    raising
      /VCXI/CX_CKX .
  methods SET_XCONR
    importing
      !IT_XCONR type ZVCXI_F0SS_TT_XCONR
    raising
      /VCXI/CX_CKX .
  methods CONNECT_BY_XCON
    importing
      !IR_XCON_IN type ref to ZIF_VCXI_F0SS_ANCHI
      !IR_XCON_OUT type ref to ZIF_VCXI_F0SS_ANCHO
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  types:
    begin of YS_XCON_MAP,
         R_GATE   type ref to /VCXI/CL_VKSR_GATE,
         GXCON    type        ZVCXI_F0SS_GXCON,
       end   of YS_XCON_MAP .
  types:
    YT_XCON_MAP type standard table of YS_XCON_MAP with default key .

  constants C_IEVNT_I_DO_BACKWARD type /VCXI/VKSC_IEVNT value 'DO_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_DO_FORWARD type /VCXI/VKSC_IEVNT value 'DO_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_REORG_XCON type /VCXI/VKSC_IEVNT value 'REORG_XCON' ##NO_TEXT.
  constants C_PARID_XCONG type /VCXI/VKS_PARID value 'ZVCXI_F0_XCONG' ##NO_TEXT.

  methods GET_XCONG
    returning
      value(RT_XCONG) type ZVCXI_F0SS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_XCONI_MAP
    importing
      !IR_GATE_IN type ref to /VCXI/CL_VKSR_GATE optional
    returning
      value(RT_XCON_MAP) type YT_XCON_MAP
    raising
      /VCXI/CX_CKX .
  methods GET_XCONO_MAP
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE optional
    returning
      value(RT_XCON_MAP) type YT_XCON_MAP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DO_BACKWARD
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DO_FORWARD
    importing
      !IT_GATE type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_REORG_XCON
    raising
      /VCXI/CX_CKX .
  methods SET_XCONG
    importing
      !IT_XCONG type ZVCXI_F0SS_TT_XCONG
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_F0SS_PR_SOV definition
class ZCL_VCXI_F0SS_PR_SOV implementation.
  method CONNECT.

    data: LT_XCONR type ZVCXI_F0SS_TT_XCONR.

    LT_XCONR = ME->GET_XCONR( ).

    append value #( R_GATE_IN  = IR_GATE_IN
                    R_GATE_OUT = IR_GATE_OUT ) to LT_XCONR.

    ME->SET_XCONR( IT_XCONR = LT_XCONR ).

  endmethod.
  method CONNECT_BY_XCON.

    data: LT_XCONR      type ZVCXI_F0SS_TT_XCONR.
    data: LR_GATE_XCONO type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE.
    field-symbols:  <S_XCONR> type ZVCXI_F0SS_S_XCONR.

***--------------------------------------------------------------------------------------
*** Get current Connections
    LT_XCONR = ME->GET_XCONR( ).

***--------------------------------------------------------------------------------------
*** Get Connections
    move IR_XCON_IN->ADD_XCON( ) to LR_GATE_XCONI.
    move IR_XCON_OUT->ADD_XCON( )  to LR_GATE_XCONO.

*** Add Connection
    append initial line to LT_XCONR assigning <S_XCONR>.
    move LR_GATE_XCONO to <S_XCONR>-R_GATE_OUT.
    move LR_GATE_XCONI to <S_XCONR>-R_GATE_IN.

***--------------------------------------------------------------------------------------
*** Send to backend
    ME->SET_XCONR( IT_XCONR = LT_XCONR ).

  endmethod.
  method GET_PRVDR_XCONI.

    data: LT_XCONR type ZVCXI_F0SS_TT_XCONR.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Provider
    RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_XCONI=>C_IPRVT_XCONI
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Filter by Connection Status
    if IF_CONNECTED ne ABAP_UNDEFINED.
      LT_XCONR = ME->GET_XCONR( ).

      loop at RT_GATE into LR_GATE.
        if ( IF_CONNECTED eq ABAP_TRUE  and not LINE_EXISTS( LT_XCONR[ R_GATE_IN = LR_GATE ] ) ) or
           ( IF_CONNECTED eq ABAP_FALSE and     LINE_EXISTS( LT_XCONR[ R_GATE_IN = LR_GATE ] ) ).
          delete RT_GATE.
        endif.
      endloop.
    endif.

  endmethod.
  method GET_PRVDR_XCONO.

    data: LT_XCONR type ZVCXI_F0SS_TT_XCONR.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Provider
    RT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_XCONO=>C_IPRVT_XCONO
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Filter by Connection Status
    if IF_CONNECTED ne ABAP_UNDEFINED.
      LT_XCONR = ME->GET_XCONR( ).

      loop at RT_GATE into LR_GATE.
        if ( IF_CONNECTED eq ABAP_TRUE  and not LINE_EXISTS( LT_XCONR[ R_GATE_OUT = LR_GATE ] ) ) or
           ( IF_CONNECTED eq ABAP_FALSE and     LINE_EXISTS( LT_XCONR[ R_GATE_OUT = LR_GATE ] ) ).
          delete RT_GATE.
        endif.
      endloop.
    endif.

  endmethod.
  method GET_XCONG.

    data:  LF_XML            type        STRING.
    data:  LS_PARAM          type        /VCXI/VKSR_S_PARAM.

***------------------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_XCONG ).
    move LS_PARAM-STRNG to LF_XML.
    check LF_XML is not initial.

*** Deserialize XML
    call transformation ID
         source xml LF_XML
         result T_XCONG  = RT_XCONG.

  endmethod.
  method GET_XCONI_MAP.

    data: LT_GATE     type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONI type ref to ZCL_VCXI_F0SS_PR_XCONI.
    field-symbols: <S_XCON_MAP> type YS_XCON_MAP.


***--------------------------------------------------------------------------------------
    if IR_GATE_IN is supplied.
***   Use supplied Gate
      append IR_GATE_IN to LT_GATE.
    else.
***   Get Provider
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_XCONI=>C_IPRVT_XCONI
                                       IF_INUSE = ABAP_TRUE ).
    endif.

***--------------------------------------------------------------------------------------
    loop at LT_GATE into LR_GATE.
      check LR_GATE is bound.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONI.
          check LR_PR_XCONI is bound.

          append initial line to RT_XCON_MAP assigning <S_XCON_MAP>.
          move LR_GATE                    to <S_XCON_MAP>-R_GATE.
          move LR_PR_XCONI->GET_GXCON( )  to <S_XCON_MAP>-GXCON.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_XCONO_MAP.

    data: LT_GATE     type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONO type ref to ZCL_VCXI_F0SS_PR_XCONO.
    field-symbols: <S_XCON_MAP> type YS_XCON_MAP.


***--------------------------------------------------------------------------------------
    if IR_GATE_OUT is supplied.
***   Use supplied Gate
      append IR_GATE_OUT to LT_GATE.
    else.
***   Get Provider
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_XCONO=>C_IPRVT_XCONO
                                       IF_INUSE = ABAP_TRUE ).
    endif.

***--------------------------------------------------------------------------------------
    loop at LT_GATE into LR_GATE.
      check LR_GATE is bound.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONO.
          check LR_PR_XCONO is bound.

          append initial line to RT_XCON_MAP assigning <S_XCON_MAP>.
          move LR_GATE                    to <S_XCON_MAP>-R_GATE.
          move LR_PR_XCONO->GET_GXCON( )  to <S_XCON_MAP>-GXCON.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_XCONR.

    data: LS_XCONG    type ZVCXI_F0SS_S_XCONG,
          LS_XCON_MAP type YS_XCON_MAP,
          LS_XCONR    type ZVCXI_F0SS_S_XCONR.
    data: LT_XCONG     type ZVCXI_F0SS_TT_XCONG,
          LT_XCONO_MAP type YT_XCON_MAP,
          LT_XCONI_MAP type YT_XCON_MAP.


***------------------------------------------------------------------------------------------------
*** Get X-Connections (GUID)
    LT_XCONG = ME->GET_XCONG( ).
    check LT_XCONG is not initial.

*** Get X-Connect Mapping
    if IR_GATE_OUT is supplied.
      LT_XCONO_MAP = ME->GET_XCONO_MAP( IR_GATE_OUT = IR_GATE_OUT ).
    else.
      LT_XCONO_MAP = ME->GET_XCONO_MAP( ).
    endif.
    if IR_GATE_IN is supplied.
      LT_XCONI_MAP = ME->GET_XCONI_MAP( IR_GATE_IN = IR_GATE_IN ).
    else.
      LT_XCONI_MAP = ME->GET_XCONI_MAP( ).
    endif.

***------------------------------------------------------------------------------------------------
*** Map the Connections
    loop at LT_XCONG into LS_XCONG.
      clear LS_XCONR.

      if LS_XCONG-GXCON_OUT is not initial.
        read table LT_XCONO_MAP into LS_XCON_MAP with key GXCON = LS_XCONG-GXCON_OUT.
        if SY-SUBRC eq 0.
          move LS_XCON_MAP-R_GATE to LS_XCONR-R_GATE_OUT.
        else.
          continue.
        endif.
      endif.

      if LS_XCONG-GXCON_IN is not initial.
        read table LT_XCONI_MAP into LS_XCON_MAP with key GXCON = LS_XCONG-GXCON_IN.
        if SY-SUBRC eq 0.
          move LS_XCON_MAP-R_GATE to LS_XCONR-R_GATE_IN.
        else.
          continue.
        endif.
      endif.

      append LS_XCONR to RT_XCONR.

    endloop.

  endmethod.
  method HANDLE_DO_BACKWARD.

    data: LS_XCONR   type ZVCXI_F0SS_S_XCONR.
    data: LT_XCONR   type ZVCXI_F0SS_TT_XCONR,
          LT_GATE_IN type /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONI type ref to ZCL_VCXI_F0SS_PR_XCONI,
          LR_PR_XCONO type ref to ZCL_VCXI_F0SS_PR_XCONO.


***--------------------------------------------------------------------------------------
*** Get Connections
    move ME->GET_XCONR( ) to LT_XCONR.

    loop at IT_GATE into LR_GATE.
      clear LS_XCONR.
      check LR_GATE is bound.

***--------------------------------------------------------------------------------------
***   If Request comes from a Connection In
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONI.
          check LR_PR_XCONI is bound.
          read table LT_XCONR into LS_XCONR with key R_GATE_IN = LR_GATE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONI.
      endtry.

***   If Request comes from a Connection Out
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONO.
          check LR_PR_XCONO is bound.
          read table LT_XCONR into LS_XCONR with key R_GATE_OUT = LR_GATE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONO.
      endtry.

***--------------------------------------------------------------------------------------
***   Perform Backward
      check LS_XCONR is not initial.

      try.
          check LS_XCONR-R_GATE_IN is bound.
          move LS_XCONR-R_GATE_IN->R_CLSPR ?to LR_PR_XCONI.
          check LR_PR_XCONI is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONI.
      endtry.

      try.
          check LS_XCONR-R_GATE_OUT is bound.
          move LS_XCONR-R_GATE_OUT->R_CLSPR ?to LR_PR_XCONO.
          check LR_PR_XCONO is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONO.
      endtry.

      clear: LT_GATE_IN.
      append LS_XCONR-R_GATE_IN to LT_GATE_IN.

***   Perform actual Backwarding
      LR_PR_XCONO->ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD( IT_GATE = LT_GATE_IN ).

    endloop.

  endmethod.
  method HANDLE_DO_FORWARD.

    data: LS_XCONR    type        ZVCXI_F0SS_S_XCONR.
    data: LT_XCONR    type        ZVCXI_F0SS_TT_XCONR,
          LT_GATE_OUT type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE     type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_XCONI type ref to ZCL_VCXI_F0SS_PR_XCONI,
          LR_PR_XCONO type ref to ZCL_VCXI_F0SS_PR_XCONO.

***--------------------------------------------------------------------------------------
*** Get Connections
    move ME->GET_XCONR( ) to LT_XCONR.

    loop at IT_GATE into LR_GATE.
      clear LS_XCONR.
      check LR_GATE is bound.

***--------------------------------------------------------------------------------------
***   If Request comes from a Connection In
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONI.
          check LR_PR_XCONI is bound.
          read table LT_XCONR into LS_XCONR with key R_GATE_IN = LR_GATE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONI.
      endtry.

***   If Request comes from a Connection Out
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_XCONO.
          check LR_PR_XCONO is bound.
          read table LT_XCONR into LS_XCONR with key R_GATE_OUT = LR_GATE.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONO.
      endtry.

***--------------------------------------------------------------------------------------
***   Perform Forward
      check LS_XCONR is not initial.

      try.
          check LS_XCONR-R_GATE_IN is bound.
          move LS_XCONR-R_GATE_IN->R_CLSPR ?to LR_PR_XCONI.
          check LR_PR_XCONI is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONI.
      endtry.

      try.
          check LS_XCONR-R_GATE_OUT is bound.
          move LS_XCONR-R_GATE_OUT->R_CLSPR ?to LR_PR_XCONO.
          check LR_PR_XCONO is bound.
        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_XCONO.
      endtry.

      clear: LT_GATE_OUT.
      append LS_XCONR-R_GATE_OUT to LT_GATE_OUT.

***   Perform actual Forwarding
      LR_PR_XCONI->ZIF_VCXI_F0SS_COMM_PREV~DO_FORWARD( IT_GATE = LT_GATE_OUT ).

    endloop.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_REORG_XCON.
        ME->HANDLE_REORG_XCON( ).

***   Backward Processing
      when C_IEVNT_I_DO_BACKWARD.
        ME->HANDLE_DO_BACKWARD( IT_GATE = IT_GATE_PROVIDER ).
***   Forward Processing
      when C_IEVNT_I_DO_FORWARD.
        ME->HANDLE_DO_FORWARD( IT_GATE = IT_GATE_PROVIDER ).

    endcase.

  endmethod.
  method HANDLE_REORG_XCON.

    data:  LS_XCONR   type        ZVCXI_F0SS_S_XCONR.
    data:  LT_XCONR   type        ZVCXI_F0SS_TT_XCONR.

***------------------------------------------------------------------------------------------------
*** Get X-Connections (References)
    LT_XCONR = ME->GET_XCONR( ).

*** Delete Connections with missing Gate
    loop at LT_XCONR into LS_XCONR
                    where R_GATE_OUT is not bound
                     or   R_GATE_IN  is not bound.
      delete LT_XCONR.

      if LS_XCONR-R_GATE_OUT is bound.
        LS_XCONR-R_GATE_OUT->DO_FREE( ).
      endif.
      if LS_XCONR-R_GATE_IN is bound.
        LS_XCONR-R_GATE_IN->DO_FREE( ).
      endif.
    endloop.

*** Set new X-Connection
    ME->SET_XCONR( IT_XCONR = LT_XCONR ).

  endmethod.
  method SET_XCONG.

    data:  LF_XML            type        STRING.
    data:  LS_PARAM          type        /VCXI/VKSR_S_PARAM.

***------------------------------------------------------------------------------------------------
*** Create XML
    call transformation ID
         source T_XCONG  = IT_XCONG
         result xml LF_XML.

*** Set Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_XCONG ).
    move LF_XML                           to LS_PARAM-STRNG.
    move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LS_PARAM-SETBY.
    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_XCONR.

    data: LS_XCONR    type        ZVCXI_F0SS_S_XCONR,
          LS_XCON_MAP type        YS_XCON_MAP.
    data: LT_XCONR         type        ZVCXI_F0SS_TT_XCONR,
          LT_XCONG         type        ZVCXI_F0SS_TT_XCONG,
          LT_XCONO_MAP     type        YT_XCON_MAP,
          LT_XCONI_MAP     type        YT_XCON_MAP,
          LT_GATE_FORWARD  type        /VCXI/VKSR_TT_GATE,
          LT_GATE_BACKWARD type        /VCXI/VKSR_TT_GATE.
    field-symbols: <S_XCONG>         type        ZVCXI_F0SS_S_XCONG.

***------------------------------------------------------------------------------------------------
*** Process all events to ensure GUIDs are set
    ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).

*** Get X-Connect Mapping
    LT_XCONO_MAP = ME->GET_XCONO_MAP( ).
    LT_XCONI_MAP = ME->GET_XCONI_MAP( ).

*** Get old X-Connections (References)
    move ME->GET_XCONR( ) to LT_XCONR.

***------------------------------------------------------------------------------------------------
*** Map the Connections
    loop at IT_XCONR into LS_XCONR.
      check LS_XCONR-R_GATE_OUT is bound and
            LS_XCONR-R_GATE_IN  is bound.

      append initial line to LT_XCONG assigning <S_XCONG>.

      read table LT_XCONO_MAP into LS_XCON_MAP with key R_GATE = LS_XCONR-R_GATE_OUT.
      if SY-SUBRC eq 0.
        move LS_XCON_MAP-GXCON to <S_XCONG>-GXCON_OUT.
      endif.

      read table LT_XCONI_MAP into LS_XCON_MAP with key R_GATE = LS_XCONR-R_GATE_IN.
      if SY-SUBRC eq 0.
        move LS_XCON_MAP-GXCON to <S_XCONG>-GXCON_IN.
      endif.
    endloop.

*** Remove Duplicates
    sort LT_XCONG by GXCON_OUT.
    delete adjacent duplicates from LT_XCONG comparing GXCON_OUT.
    sort LT_XCONG by GXCON_IN.
    delete adjacent duplicates from LT_XCONG comparing GXCON_IN.

***------------------------------------------------------------------------------------------------
*** Set X-Connections (GUID)
    ME->SET_XCONG( IT_XCONG = LT_XCONG ).

***------------------------------------------------------------------------------------------------
*** Forward/Backward between new Connections
    if IT_XCONR ne LT_XCONR.
      loop at IT_XCONR into LS_XCONR.
        check LS_XCONR-R_GATE_OUT is bound and
              LS_XCONR-R_GATE_IN  is bound.

        read table LT_XCONR with key R_GATE_OUT = LS_XCONR-R_GATE_OUT
                                     R_GATE_IN  = LS_XCONR-R_GATE_IN
                            transporting no fields.
        if SY-SUBRC ne 0.
          append LS_XCONR-R_GATE_OUT to LT_GATE_FORWARD.
          append LS_XCONR-R_GATE_IN  to LT_GATE_BACKWARD.
        endif.
      endloop.
      ME->HANDLE_DO_FORWARD(  IT_GATE = LT_GATE_FORWARD ).
      ME->HANDLE_DO_BACKWARD( IT_GATE = LT_GATE_BACKWARD ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LF_GROUP_KEY type I.
    data: LS_XCONR      type ZVCXI_F0SS_S_XCONR.
    data: LT_XCONR      type ZVCXI_F0SS_TT_XCONR.
    data: LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_PART  type ref to /VCXI/CL_VKSR_GATE.


    check CR_NETGRAPH_JSON is bound.

***--------------------------------------------------------------------------------------
*** Get all Components
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_XCOMP=>C_IPRVT_XCOMP
                                   IF_INUSE = ABAP_TRUE ) into LR_GATE_XCOMP.
***   Add component as Group
      LF_GROUP_KEY = CR_NETGRAPH_JSON->ADD_GROUP( IF_TITLE = LR_GATE_XCOMP->R_CLSPR->GET_DESCR( )
                                                  IF_DESCR = LR_GATE_XCOMP->R_CLSPR->GET_DESCR( )
                                                  IF_ICON = 'sap-icon://header'
                                                  ).
***   Register Gate to Node
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_XCOMP
                                          IF_NODE_KEY = LF_GROUP_KEY ).

***   Delegate Fill to Component
      cast ZIF_VCXI_XCS_NGREP( LR_GATE_XCOMP->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = LF_GROUP_KEY
                                                               changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
    endloop.

***--------------------------------------------------------------------------------------
*** Get Connections between Components
    LT_XCONR = ME->GET_XCONR( ).

*** Delete Connections with missing Gate
    delete LT_XCONR where R_GATE_OUT is not bound
                     or   R_GATE_IN  is not bound.

***--------------------------------------------------------------------------------------
*** Complete Re-Build of the lines
    loop at LT_XCONR into LS_XCONR.
***   Add Line
      CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LS_XCONR-R_GATE_OUT )
                                  IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LS_XCONR-R_GATE_IN ) ).
    endloop.

  endmethod.
