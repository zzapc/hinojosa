
class ZCL_VCXI_XCIU_TREE_SVCEL definition
  public
  final
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_UI_IDAT_SVC type ref to ZCL_VCXI_XCIU_UI_IDAT_SVC
      !IR_CONTAINER type ref to CL_GUI_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods REFRESH_TREE
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_COLUMN_CSELF type TV_ITMNAME value 'CSELF'. "#EC NOTEXT
  constants C_COLUMN_ISELF type TV_ITMNAME value 'ISELF'. "#EC NOTEXT
  constants C_UC_ADD_SVCEL type SYUCOMM value 'ADD_SVCEL'. "#EC NOTEXT
  constants C_UC_DEL_SVCEL type SYUCOMM value 'DEL_SVCEL'. "#EC NOTEXT
  data R_TREE type ref to CL_COLUMN_TREE_MODEL .
  data R_UI_IDAT_SVC type ref to ZCL_VCXI_XCIU_UI_IDAT_SVC .

  methods ADD_NODE_BY_IPARE
    importing
      !IF_IPARE type /VCXI/CKX_ID optional
      !IF_CPARE type /VCXI/VKSR_REPNR optional
    raising
      /VCXI/CX_CKX .
  methods ADD_SVCEL
    importing
      !IF_IPARE type /VCXI/CKX_ID
      !IF_CPARE type /VCXI/VKSR_REPNR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DEFAULT_CONTEXT_REQ
    for event DEFAULT_CONTEXT_MENU_REQUEST of CL_COLUMN_TREE_MODEL
    importing
      !MENU .
  methods HANDLE_DEFAULT_CONTEXT_SEL
    for event DEFAULT_CONTEXT_MENU_SELECT of CL_COLUMN_TREE_MODEL
    importing
      !FCODE .
  methods HANDLE_ITEM_CONTEXT_REQ
    for event ITEM_CONTEXT_MENU_REQUEST of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME
      !MENU .
  methods HANDLE_ITEM_CONTEXT_SEL
    for event ITEM_CONTEXT_MENU_SELECT of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !FCODE
      !ITEM_NAME .
  methods HANDLE_ITEM_DOUBLE_CLICK
    for event ITEM_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !ITEM_NAME .
  methods HANDLE_NODE_CONTEXT_REQ
    for event NODE_CONTEXT_MENU_REQUEST of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !MENU .
  methods HANDLE_NODE_CONTEXT_SEL
    for event NODE_CONTEXT_MENU_SELECT of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY
      !FCODE .
  methods HANDLE_NODE_DOUBLE_CLICK
    for event NODE_DOUBLE_CLICK of CL_COLUMN_TREE_MODEL
    importing
      !NODE_KEY .
  methods HANDLE_UC_ADD_SVCEL
    importing
      !IF_NODEKEY type TM_NODEKEY optional
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_DEL_SVCEL
    importing
      !IF_NODEKEY type TM_NODEKEY
    raising
      /VCXI/CX_CKX .
  methods INIT_TREE
    raising
      /VCXI/CX_CKX .
  methods REGISTER_TREE_EVENTS
    raising
      /VCXI/CX_CKX .
private section.

  data R_CONTAINER type ref to CL_GUI_CONTAINER .
  data T_ITEM type TREEMCITAC .
  data T_NODE type TREEMCNOTA .
endclass. "ZCL_VCXI_XCIU_TREE_SVCEL definition
class ZCL_VCXI_XCIU_TREE_SVCEL implementation.
method ADD_NODE_BY_IPARE.

  data:          LF_RELATKEY  type         TM_NODEKEY.
  data:          LS_SVCEL     type         ZVCXI_XCI_S_SVCEL.
  field-symbols: <S_NODE>     type         TREEMCNODT,
                 <S_ITEM>     type         TREEMCITEN.

*** Create Parent Key
  if IF_IPARE is not initial.
    concatenate IF_IPARE IF_CPARE into LF_RELATKEY
                                  respecting blanks.
  endif.

*** Add Nodes
  loop at ME->R_UI_IDAT_SVC->R_IDAT_SVC->T_SVCEL into LS_SVCEL
                                                where IPARE eq IF_IPARE
                                                 and  CPARE eq IF_CPARE.
    append initial line to ME->T_NODE assigning <S_NODE>.
    concatenate LS_SVCEL-ISELF LS_SVCEL-CSELF into <S_NODE>-NODE_KEY
                                              respecting blanks.
    move LF_RELATKEY                            to <S_NODE>-RELATKEY.
    move CL_COLUMN_TREE_MODEL=>RELAT_LAST_CHILD to <S_NODE>-RELATSHIP.
    move ABAP_TRUE                              to <S_NODE>-ISFOLDER.

    append initial line to ME->T_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                     to <S_ITEM>-NODE_KEY.
    move C_COLUMN_ISELF                        to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT to <S_ITEM>-CLASS.
    move LS_SVCEL-ISELF                        to <S_ITEM>-TEXT.

    append initial line to ME->T_ITEM assigning <S_ITEM>.
    move <S_NODE>-NODE_KEY                     to <S_ITEM>-NODE_KEY.
    move C_COLUMN_CSELF                        to <S_ITEM>-ITEM_NAME.
    move CL_COLUMN_TREE_MODEL=>ITEM_CLASS_TEXT to <S_ITEM>-CLASS.
    move LS_SVCEL-CSELF                        to <S_ITEM>-TEXT.

*** Add Children
    ME->ADD_NODE_BY_IPARE( IF_IPARE = LS_SVCEL-ISELF
                           IF_CPARE = LS_SVCEL-CSELF ).

  endloop.

endmethod.
method ADD_SVCEL.

  data:          LF_CANCELED       type        ABAP_BOOL,
                 LF_ISELF          type        /VCXI/CKX_ID.
  data:          LT_OBJECT_ALL     type        /VCXI/CKX_TT_OBJECT,
                 LT_OBJECT_STYLE   type        /VCXI/CKX_TT_OBJECT_STYLE,
                 LT_OBJECT_SEL     type        /VCXI/CKX_TT_OBJECT.
  data:          LR_OBJECT         type ref to /VCXI/IF_CKX_OBJECT,
                 LR_CUELMNT        type ref to /VCXI/CL_VKSC_CUELMNT.
  field-symbols: <S_OBJECT_STYLE>  type        /VCXI/CKX_S_OBJECT_STYLE.


  check ME->R_UI_IDAT_SVC->R_IDAT_SVC is bound and
        ME->R_UI_IDAT_SVC->R_IDAT_SVC->R_CUPRFL is bound.

***------------------------------------------------------------------------------------------------
*** Get all Tree Elements
  LT_OBJECT_ALL = ME->R_UI_IDAT_SVC->R_IDAT_SVC->R_CUPRFL->GET_REGISTERED_CUELMNT( ).
  /VCXI/CL_VKSC_SERVICE=>SORT_CUELMNT( changing CT_OBJECT = LT_OBJECT_ALL ).

*** Define Style
  loop at LT_OBJECT_ALL into LR_OBJECT.
    move LR_OBJECT ?to LR_CUELMNT.
    check LR_CUELMNT is bound.

    append initial line to LT_OBJECT_STYLE assigning <S_OBJECT_STYLE>.
    move LR_OBJECT to <S_OBJECT_STYLE>-R_OBJECT.

*** Image
    if LR_CUELMNT->R_REGELMNT             is bound and
       LR_CUELMNT->R_REGELMNT->F_TIICO_ID is not initial.
      move LR_CUELMNT->R_REGELMNT->F_TIICO_ID    to <S_OBJECT_STYLE>-IMAGE.
    else.
      if LR_CUELMNT->R_REG_ELMTY is bound.
        move LR_CUELMNT->R_REG_ELMTY->F_TIICO_ID to <S_OBJECT_STYLE>-IMAGE.
      endif.
    endif.

*** Disable if Parent ID doesn't match
*    LT_OBJECT_PRVTY = ME->R_CUELMNT->/VCXI/IF_VKSC_CUELMNT_PRVDR~GET_PRVTY( IR_CUELMNT = LR_CUELMNT ).
*    if LT_OBJECT_PRVTY is initial.
*      move ABAP_TRUE                            to <S_OBJECT_STYLE>-DISABLED.
*      move CL_COLUMN_TREE_MODEL=>STYLE_INACTIVE to <S_OBJECT_STYLE>-STYLE.
*    endif.

*** Expand Parents if Possible or Existing
    if <S_OBJECT_STYLE>-DISABLED ne ABAP_TRUE.
      move LR_CUELMNT->/VCXI/IF_CKX_OBJECT_H~GET_PARENT( ) to LR_OBJECT.
      if LR_OBJECT is bound.
        read table LT_OBJECT_STYLE assigning <S_OBJECT_STYLE> with key R_OBJECT = LR_OBJECT.
        if SY-SUBRC eq 0.
          move ABAP_TRUE to <S_OBJECT_STYLE>-EXPAND.
        endif.
      endif.
    endif.
  endloop.

***------------------------------------------------------------------------------------------------
*** Call Search Help
  call function '/VCXI/CKX_OBJECT_POPUP_START'
    exporting
      IT_OBJECT_ALL    = LT_OBJECT_ALL
      IT_OBJECT_STYLE  = LT_OBJECT_STYLE
      IF_SORT_BY_ID    = ABAP_FALSE
      IF_SORT_BY_DESCR = ABAP_FALSE
      IF_EXPAND_ALL    = ABAP_FALSE
      IF_SELMODE       = CL_COLUMN_TREE_MODEL=>NODE_SEL_MODE_MULTIPLE
    importing
      ET_OBJECT_SEL    = LT_OBJECT_SEL
      EF_CANCELED      = LF_CANCELED.

  check LF_CANCELED ne ABAP_TRUE.

***------------------------------------------------------------------------------------------------
*** Process all selected Customizing Elements
  loop at LT_OBJECT_SEL into LR_OBJECT.
    try.
        move LR_OBJECT ?to LR_CUELMNT.
        check LR_CUELMNT is bound.

        move LR_CUELMNT->/VCXI/IF_CKX_OBJECT~GET_ID( ) to LF_ISELF.
        ME->R_UI_IDAT_SVC->R_IDAT_SVC->ADD_SVCEL( IF_IPARE   = IF_IPARE
                                                  IF_CPARE   = IF_CPARE
                                                  IF_ISELF   = LF_ISELF
                                                  IR_CUELMNT = LR_CUELMNT ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method CONSTRUCTOR.

  move IR_UI_IDAT_SVC to ME->R_UI_IDAT_SVC.
  move IR_CONTAINER   to ME->R_CONTAINER.

*** Initialize Tree
  ME->INIT_TREE( ).

*** Register the Tree Events
  ME->REGISTER_TREE_EVENTS( ).

endmethod.
method DO_FREE.

***--------------------------------------------------------------------------------------
*** Deactivate Event Handler
  set handler ME->HANDLE_DEFAULT_CONTEXT_REQ    for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_DEFAULT_CONTEXT_SEL    for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_NODE_DOUBLE_CLICK      for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_NODE_CONTEXT_REQ       for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_NODE_CONTEXT_SEL       for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_ITEM_DOUBLE_CLICK      for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_ITEM_CONTEXT_REQ       for ME->R_TREE activation ABAP_FALSE.
  set handler ME->HANDLE_ITEM_CONTEXT_SEL       for ME->R_TREE activation ABAP_FALSE.

*** Free Tree
  if ME->R_TREE is bound.
    ME->R_TREE->DELETE_ALL_NODES( ).
    free: ME->T_NODE,
          ME->T_ITEM,
          ME->R_TREE.
  endif.

***--------------------------------------------------------------------------------------
*** Free Container
  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( ).
    clear ME->R_CONTAINER.
  endif.

***--------------------------------------------------------------------------------------
*** Clear References
  free: ME->R_UI_IDAT_SVC.

endmethod.
method HANDLE_DEFAULT_CONTEXT_REQ .

  data:  LF_DISABLED    type        CUA_ACTIVE.
  data:  LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.

***--------------------------------------------------------------------------------------
***   Add Customizing Element
      if ME->R_UI_IDAT_SVC->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
        move ABAP_FALSE to LF_DISABLED.
      else.
        move ABAP_TRUE  to LF_DISABLED.
      endif.

      MENU->ADD_FUNCTION( FCODE    = C_UC_ADD_SVCEL
                          TEXT     = 'Add'(F01)
                          DISABLED = LF_DISABLED ).


    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DEFAULT_CONTEXT_SEL .

  data:   LR_CX_CKX  type ref to /VCXI/CX_CKX.

  try.
      case FCODE.
        when C_UC_ADD_SVCEL.
          ME->HANDLE_UC_ADD_SVCEL( ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_ITEM_CONTEXT_REQ .

  ME->HANDLE_NODE_CONTEXT_REQ( NODE_KEY = NODE_KEY
                               MENU     = MENU ).

endmethod.
method HANDLE_ITEM_CONTEXT_SEL .

  ME->HANDLE_NODE_CONTEXT_SEL( NODE_KEY = NODE_KEY
                               FCODE    = FCODE ).

endmethod.
method HANDLE_ITEM_DOUBLE_CLICK .

  ME->HANDLE_NODE_DOUBLE_CLICK( NODE_KEY = NODE_KEY ).

endmethod.
method HANDLE_NODE_CONTEXT_REQ .

  data:  LF_DISABLED    type        CUA_ACTIVE.
  data:  LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.
      if ME->R_UI_IDAT_SVC->R_IDAT_SVC->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
        move ABAP_FALSE to LF_DISABLED.
      else.
        move ABAP_TRUE  to LF_DISABLED.
      endif.

***--------------------------------------------------------------------------------------
***   Add Customizing Element
      MENU->ADD_FUNCTION( FCODE    = C_UC_ADD_SVCEL
                          TEXT     = 'Add'(F01)
                          DISABLED = LF_DISABLED ).

      MENU->ADD_FUNCTION( FCODE    = C_UC_DEL_SVCEL
                          TEXT     = 'Delete'(F02)
                          DISABLED = LF_DISABLED ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_NODE_CONTEXT_SEL .

  data:   LR_CX_CKX  type ref to /VCXI/CX_CKX.

  try.
      case FCODE.
        when C_UC_ADD_SVCEL.
          ME->HANDLE_UC_ADD_SVCEL( IF_NODEKEY = NODE_KEY ).
        when C_UC_DEL_SVCEL.
          ME->HANDLE_UC_DEL_SVCEL( IF_NODEKEY = NODE_KEY ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_NODE_DOUBLE_CLICK .

  data:  LF_ISELF    type        /VCXI/CKX_ID,
         LF_CSELF    type        /VCXI/VKSR_REPNR.
  data:  LR_CX_CKX   type ref to /VCXI/CX_CKX.

  try.
***   Split Node Key
      move NODE_KEY(30) to LF_ISELF.
      move NODE_KEY+30  to LF_CSELF.

***   Open UI
      ME->R_UI_IDAT_SVC->OPEN_SVCEL( IF_ISELF = LF_ISELF
                                     IF_CSELF = LF_CSELF ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_UC_ADD_SVCEL.

  data:  LF_IPARE    type /VCXI/CKX_ID,
         LF_CPARE    TYPE /VCXI/VKSR_REPNR.

  if IF_NODEKEY is not initial.
    move IF_NODEKEY(30) to LF_IPARE.
    move IF_NODEKEY+30  to LF_CPARE.
  endif.

  ME->ADD_SVCEL( IF_IPARE = LF_IPARE
                 IF_CPARE = LF_CPARE ).

  CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = 'UI_REFRESH' ).

endmethod.
method HANDLE_UC_DEL_SVCEL.

  data:  LF_ISELF    type /VCXI/CKX_ID,
         LF_CSELF    type /VCXI/VKSR_REPNR.

*** Split Node Key
  move IF_NODEKEY(30) to LF_ISELF.
  move IF_NODEKEY+30  to LF_CSELF.

*** Delete
  ME->R_UI_IDAT_SVC->R_IDAT_SVC->DELETE_SVCEL( IF_ISELF = LF_ISELF
                                               IF_CSELF = LF_CSELF ).

*** Refresh
  CL_GUI_CFW=>SET_NEW_OK_CODE( NEW_CODE = 'UI_REFRESH' ).

endmethod.
method INIT_TREE.

  data:  LS_HHDR   type  TREEMHHDR.

***----------------------------------------------------------------------------
*** Get the Hierarchy Column
  move 'ID'(C01)  to LS_HHDR-HEADING.
  move '30'       to LS_HHDR-WIDTH.

*** Create the Tree Instance
  create object ME->R_TREE
    exporting
      NODE_SELECTION_MODE         = CL_GUI_COLUMN_TREE=>NODE_SEL_MODE_SINGLE
      ITEM_SELECTION              = 'X'
      HIERARCHY_COLUMN_NAME       = C_COLUMN_ISELF
      HIERARCHY_HEADER            = LS_HHDR
    exceptions
      ILLEGAL_NODE_SELECTION_MODE = 1
      ILLEGAL_COLUMN_NAME         = 2
      others                      = 3.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Add Column
  ME->R_TREE->ADD_COLUMN( exporting
                            NAME                = C_COLUMN_CSELF
                            WIDTH               = '10'
                            HEADER_TEXT         = 'Repetition'(C02)
                          exceptions
                            COLUMN_EXISTS       = 1
                            ILLEGAL_COLUMN_NAME = 2
                            TOO_MANY_COLUMNS    = 3
                            ILLEGAL_ALIGNMENT   = 4
                            others              = 5 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Create the Tree Control
  ME->R_TREE->CREATE_TREE_CONTROL( exporting
                                     PARENT                       = ME->R_CONTAINER
                                   exceptions
                                     LIFETIME_ERROR               = 1
                                     CNTL_SYSTEM_ERROR            = 2
                                     CREATE_ERROR                 = 3
                                     FAILED                       = 4
                                     TREE_CONTROL_ALREADY_CREATED = 5
                                     others                       = 6 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REFRESH_TREE.

  data:  LT_EXPANDED_NODES  type        TREEMNOTAB,
         LT_TO_EXPAND_NODES type        TREEMNOTAB.

  free: ME->T_NODE,
        ME->T_ITEM.

***----------------------------------------------------------------------------
*** Get Expanded Nodes
  ME->R_TREE->GET_EXPANDED_NODES( importing
                                    NODE_KEY_TABLE       = LT_EXPANDED_NODES
                                  exceptions
                                    CONTROL_NOT_EXISTING = 1
                                    CONTROL_DEAD         = 2
                                    CNTL_SYSTEM_ERROR    = 3
                                    FAILED               = 4
                                    others               = 5 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Delete all old Nodes
  ME->R_TREE->DELETE_ALL_NODES( ).

*** Build Node Table
  ME->ADD_NODE_BY_IPARE( ).

***----------------------------------------------------------------------------
*** Add Nodes and Items
  ME->R_TREE->ADD_NODES( exporting
                           NODE_TABLE          = ME->T_NODE
                         exceptions
                           ERROR_IN_NODE_TABLE = 1
                           others              = 2 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  ME->R_TREE->ADD_ITEMS( exporting
                           ITEM_TABLE          = ME->T_ITEM
                         exceptions
                           NODE_NOT_FOUND      = 1
                           ERROR_IN_ITEM_TABLE = 2
                           others              = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***----------------------------------------------------------------------------
*** Filter Nodes to Expand
  ME->R_TREE->NODE_KEYS_IN_TREE( exporting
                                   NODE_KEY_TABLE    = LT_EXPANDED_NODES
                                 importing
                                   NODE_KEYS_IN_TREE = LT_TO_EXPAND_NODES ).

*** Expand the Nodes
  ME->R_TREE->EXPAND_NODES( exporting
                              NODE_KEY_TABLE          = LT_TO_EXPAND_NODES
                            exceptions
                              ERROR_IN_NODE_KEY_TABLE = 1
                              others                  = 2 ).


endmethod.
method REGISTER_TREE_EVENTS .

  data:           LT_EVENT  type CNTL_SIMPLE_EVENTS.
  field-symbols:  <S_EVENT> type CNTL_SIMPLE_EVENT.


***------------------------------------------------------------------------------------------------
*** Set Registered Events
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_DEF_CONTEXT_MENU_REQ  to <S_EVENT>-EVENTID.

  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_NODE_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_ITEM_DOUBLE_CLICK     to <S_EVENT>-EVENTID.
  move ABAP_TRUE                                           to <S_EVENT>-APPL_EVENT.

  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_NODE_CONTEXT_MENU_REQ to <S_EVENT>-EVENTID.
  append initial line to LT_EVENT assigning <S_EVENT>.
  move CL_COLUMN_TREE_MODEL=>EVENTID_ITEM_CONTEXT_MENU_REQ to <S_EVENT>-EVENTID.

  ME->R_TREE->SET_REGISTERED_EVENTS( exporting
                                       EVENTS                    = LT_EVENT
                                     exceptions
                                       ILLEGAL_EVENT_COMBINATION = 1
                                       UNKNOWN_EVENT             = 2
                                       others                    = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

***------------------------------------------------------------------------------------------------
*** Set Event Handler
  set handler ME->HANDLE_DEFAULT_CONTEXT_REQ    for ME->R_TREE.
  set handler ME->HANDLE_DEFAULT_CONTEXT_SEL    for ME->R_TREE.
  set handler ME->HANDLE_NODE_DOUBLE_CLICK      for ME->R_TREE.
  set handler ME->HANDLE_NODE_CONTEXT_REQ       for ME->R_TREE.
  set handler ME->HANDLE_NODE_CONTEXT_SEL       for ME->R_TREE.
  set handler ME->HANDLE_ITEM_DOUBLE_CLICK      for ME->R_TREE.
  set handler ME->HANDLE_ITEM_CONTEXT_REQ       for ME->R_TREE.
  set handler ME->HANDLE_ITEM_CONTEXT_SEL       for ME->R_TREE.

endmethod.
