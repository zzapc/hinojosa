
class ZCL_VCXI_XCSS_UI_PRODI definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data S_PRODI_VIS type ZVCXI_XCSS_S_PRODI_VIS .

  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_PRODI_VIS
    importing
      !IS_PRODI_VIS type ZVCXI_XCSS_S_PRODI_VIS
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
protected section.

  data R_PR_PRODI type ref to ZCL_VCXI_XCSS_PR_PRODI .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_XCSS_UI_PRODI definition
class ZCL_VCXI_XCSS_UI_PRODI implementation.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_XCSS_UI_PRODI_BIND'
    exporting
      IR_UI_PRODI = ME
    importing
      ES_DYNP     = ME->S_DYNP.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_PRODI.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED   type        /VCXI/CKX_LOCKED,
         LF_INUSE    type        /VCXI/VKSR_INUSE.
  data:  LR_CX_CKX   type ref to /VCXI/CX_CKX.

  SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                           IF_DYNNR = IF_DYNNR ).

  try.

      if IF_REPID eq ME->S_DYNP-REPID and
         IF_DYNNR eq ME->S_DYNP-DYNNR.

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
          case SCREEN-GROUP1.
            when 'PRH'.
              if ME->R_PR_PRODI->GET_FOVRR_PRODH( ) eq ABAP_TRUE.
                move 1 to SCREEN-INPUT.
              else.
                move 0 to SCREEN-INPUT.
              endif.
          endcase.

          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

          modify screen.
        endloop.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

  ME->INIT_VIS( ).

endmethod.
method DO_UPDATE_PRODI_VIS.

  data:  LS_UDELT    type  ZVCXI_XCSS_S_UDELT,
         LS_ODELT    type  ZVCXI_XCSS_S_ODELT.

*** Production Information
  if ME->S_PRODI_VIS-PRODH ne IS_PRODI_VIS-PRODH.
    ME->R_PR_PRODI->SET_PRODH( IF_PRODH = IS_PRODI_VIS-PRODH
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Production Information Override Flag
  if ME->S_PRODI_VIS-FOVRR_PRODH ne IS_PRODI_VIS-FOVRR_PRODH.
    ME->R_PR_PRODI->SET_FOVRR_PRODH( IF_FOVRR = IS_PRODI_VIS-FOVRR_PRODH ).
  endif.

*** Under and Over Delivery Tolerance
  if ME->S_PRODI_VIS-UDELT ne IS_PRODI_VIS-UDELT.
    move-corresponding IS_PRODI_VIS to LS_UDELT.
    ME->R_PR_PRODI->SET_UDELT( IS_UDELT = LS_UDELT
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_PRODI_VIS-ODELT ne IS_PRODI_VIS-ODELT.
    move-corresponding IS_PRODI_VIS to LS_ODELT.
    ME->R_PR_PRODI->SET_ODELT( IS_ODELT = LS_ODELT
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.


endmethod.
method HANDLE_GATE_FREED.

*** Super
  SUPER->HANDLE_GATE_FREED( ).

*** Clear PR Reference
  free: ME->R_PR_PRODI.

endmethod.
method INIT_VIS.

  data: LS_ODELT   type     ZVCXI_XCSS_S_ODELT,
        LS_UDELT   type     ZVCXI_XCSS_S_UDELT.

  free: ME->S_PRODI_VIS.

*** Production Hierarchie
  ME->R_PR_PRODI->GET_PRODH( importing EF_PRODH = ME->S_PRODI_VIS-PRODH ).

  move ME->R_PR_PRODI->GET_FOVRR_PRODH( ) to ME->S_PRODI_VIS-FOVRR_PRODH.

*** Under- / Over Delivery Tolerance
  move ME->R_PR_PRODI->GET_UDELT( )       to LS_UDELT.
  move LS_UDELT-UDELT                     to ME->S_PRODI_VIS-UDELT.
  move LS_UDELT-UDELT_UOM                 to ME->S_PRODI_VIS-UDELT_UOM.

  move ME->R_PR_PRODI->GET_ODELT( )       to LS_ODELT.
  move LS_ODELT-ODELT                     to ME->S_PRODI_VIS-ODELT.
  move LS_ODELT-ODELT_UOM                 to ME->S_PRODI_VIS-ODELT_UOM.

endmethod.
