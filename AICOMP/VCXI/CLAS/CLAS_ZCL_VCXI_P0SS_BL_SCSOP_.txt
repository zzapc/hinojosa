
class ZCL_VCXI_P0SS_BL_SCSOP definition
  public
  abstract
  create protected .

public section.

  data F_CSCOR type ZVCXI_P0SS_CSCOR read-only .
  data F_DIVDI type ZVCXI_P0SS_DIVDI read-only .
  data F_SCSOP type ZVCXI_P0S_SCSOP read-only .
  data F_SCSTR type ZVCXI_P0SS_SCSTR read-only .
  data F_SHTDI type ZVCXI_P0SS_SHTDI read-only .
  data S_SHTLE type ZVCXI_P0SS_S_SHTLE read-only .
  data S_SHTWI type ZVCXI_P0SS_S_SHTWI read-only .

  methods CONSTRUCTOR
    importing
      !IF_SHTDI type ZVCXI_P0SS_SHTDI
      !IF_CSCOR type ZVCXI_P0SS_CSCOR
    raising
      /VCXI/CX_CKX .
  methods DO_RECALC
  final
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
protected section.

  methods ADD_TRIM
    importing
      !IS_TRILT type ZVCXI_P0SS_S_TRILT
      !IS_TRIRB type ZVCXI_P0SS_S_TRIRB
      !IF_TSCOR_CUT type ZVCXI_P0SS_TSCOR optional
    changing
      !CT_SCSTR_CALC type ZVCXI_P0SS_TT_SCSTR_CALC
    raising
      /VCXI/CX_CKX .
  methods ADD_UPS
    importing
      !IF_NOUPT type ZVCXI_P0SS_NOUPT
      !IF_TSCOR_CUT type ZVCXI_P0SS_TSCOR optional
    changing
      !CT_SCSTR_CALC type ZVCXI_P0SS_TT_SCSTR_CALC
    raising
      /VCXI/CX_CKX .
  methods BUILD_SCSTR
    importing
      !IF_SSTRC type ZVCXI_P0SS_SSTRC
      !IT_SCSTR_CALC type ZVCXI_P0SS_TT_SCSTR_CALC
    returning
      value(RF_SCSTR) type ZVCXI_P0SS_SCSTR
    raising
      /VCXI/CX_CKX .
  methods CALC_SCSTR
  abstract
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
      !IR_PR_SCSTR_MGR type ref to ZCL_VCXI_P0SS_PR_SCSTR_MGR
    returning
      value(RF_SCSTR) type ZVCXI_P0SS_SCSTR
    raising
      /VCXI/CX_CKX .
  methods DIV_TRIM
    importing
      !IS_TRILT type ZVCXI_P0SS_S_TRILT
      !IS_TRIRB type ZVCXI_P0SS_S_TRIRB
      !IF_TSCOR_CUT type ZVCXI_P0SS_TSCOR optional
    changing
      !CT_SCSTR_CALC type ZVCXI_P0SS_TT_SCSTR_CALC
    raising
      /VCXI/CX_CKX .
  methods GET_DIVDI
  abstract
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RF_DIVDI) type ZVCXI_P0SS_DIVDI
    raising
      /VCXI/CX_CKX .
  methods GET_PRODDIM_PRVDR
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RR_PRODDIM) type ref to ZIF_VCXI_P0SS_PRODDIM
    raising
      /VCXI/CX_CKX .
  methods GET_SCORES_OF_SCSTR
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RT_SCSTR_CALC) type ZVCXI_P0SS_TT_SCSTR_CALC
    raising
      /VCXI/CX_CKX .
  methods GET_SHTDIM_PRVDR
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RR_SHTDIM) type ref to ZIF_VCXI_P0SS_SHTDIM
    raising
      /VCXI/CX_CKX .
  methods GET_TAPES_OF_SCSTR
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    returning
      value(RT_SCSTR_CALC) type ZVCXI_P0SS_TT_SCSTR_CALC
    raising
      /VCXI/CX_CKX .
  methods READ_SHT_DIM
  abstract
    importing
      !IT_PRVDR type /VCXI/VKSR_TT_GATE
    exporting
      !ES_SHTWI type ZVCXI_P0SS_S_SHTWI
      !ES_SHTLE type ZVCXI_P0SS_S_SHTLE
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_BL_SCSOP definition
class ZCL_VCXI_P0SS_BL_SCSOP implementation.
method ADD_TRIM.

  data:          LF_INDEX       type I.
  data:          LS_SCSTR_CALC  type ZVCXI_P0SS_S_SCSTR_CALC.
  field-symbols: <S_SCSTR_CALC> type ZVCXI_P0SS_S_SCSTR_CALC.

***-------------------------------------------------------------------------------------------
*** Start Doing
  loop at CT_SCSTR_CALC assigning <S_SCSTR_CALC>.
    LF_INDEX = SY-TABIX.
*** Add Left/Top Trim (to all)
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_SCSTR_CALC>-SCORP
                                                        IF_CALCV_UOM_1 = <S_SCSTR_CALC>-SCORP_UOM
                                                        IF_CALCV_2     = IS_TRILT-TRILT
                                                        IF_CALCV_UOM_2 = IS_TRILT-TRILT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = <S_SCSTR_CALC>-SCORP_UOM
                                              importing EF_CALCV       = <S_SCSTR_CALC>-SCORP
                                                        EF_CALCV_UOM   = <S_SCSTR_CALC>-SCORP_UOM ).


*** Add Right/Bottom Trim (to last)
    if LF_INDEX = lines( CT_SCSTR_CALC ).
***   Cutting is not needed just add TrimValue
      if IF_TSCOR_CUT is not supplied.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_SCSTR_CALC>-SCORP
                                                            IF_CALCV_UOM_1 = <S_SCSTR_CALC>-SCORP_UOM
                                                            IF_CALCV_2     = IS_TRIRB-TRIRB
                                                            IF_CALCV_UOM_2 = IS_TRIRB-TRIRB_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = <S_SCSTR_CALC>-SCORP_UOM
                                                  importing EF_CALCV       = <S_SCSTR_CALC>-SCORP
                                                            EF_CALCV_UOM   = <S_SCSTR_CALC>-SCORP_UOM ).

      elseif IF_TSCOR_CUT is supplied.
        check IS_TRIRB-TRIRB is not initial.

***     Add last Score string entry
        move-corresponding <S_SCSTR_CALC> to LS_SCSTR_CALC.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCSTR_CALC-SCORP
                                                            IF_CALCV_UOM_1 = LS_SCSTR_CALC-SCORP_UOM
                                                            IF_CALCV_2     = IS_TRIRB-TRIRB
                                                            IF_CALCV_UOM_2 = IS_TRIRB-TRIRB_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_SCSTR_CALC-SCORP_UOM
                                                  importing EF_CALCV       = LS_SCSTR_CALC-SCORP
                                                            EF_CALCV_UOM   = LS_SCSTR_CALC-SCORP_UOM ).

***     Cutting Score Type is supplied -> change indicator
        move IF_TSCOR_CUT to <S_SCSTR_CALC>-INDIC.

      endif.
    endif.
  endloop.

***-------------------------------------------------------------------------------------------
*** if we have a Score String defined add it!
  if LS_SCSTR_CALC is not initial.
*** Add line
    append LS_SCSTR_CALC to CT_SCSTR_CALC.
    clear: LS_SCSTR_CALC.
  endif.

***-------------------------------------------------------------------------------------------
*** If needed add the Left/Top Trim on first positon
  if IF_TSCOR_CUT   is supplied    and
     IS_TRILT-TRILT is not initial.

    move IS_TRILT-TRILT     to LS_SCSTR_CALC-SCORP.
    move IS_TRILT-TRILT_UOM to LS_SCSTR_CALC-SCORP_UOM.
    move IF_TSCOR_CUT       to LS_SCSTR_CALC-INDIC.

    insert LS_SCSTR_CALC into CT_SCSTR_CALC index 1.
  endif.

endmethod.
method ADD_UPS.

  data:          LF_INDEX          type        I,
                 LF_NOUPT          type        I.
  data:          LS_SCSTR_CALC     type        ZVCXI_P0SS_S_SCSTR_CALC,
                 LS_SCORP          type        ZVCXI_P0SS_S_SCORP,
                 LS_SCORP_ABS      type        ZVCXI_P0SS_S_SCORP.
  data:          LT_SCSTR_CALC     type        ZVCXI_P0SS_TT_SCSTR_CALC.
  field-symbols: <S_SCSTR_CALC>    type        ZVCXI_P0SS_S_SCSTR_CALC.

***-------------------------------------------------------------------------------------------
*** Add Ups if we have more then 1
  check IF_NOUPT gt 1.
  move IF_NOUPT to LF_NOUPT.

***-------------------------------------------------------------------------------------------
*** Do Multiply by Number ups
  do LF_NOUPT times.
    loop at CT_SCSTR_CALC into LS_SCSTR_CALC.
      LF_INDEX = SY-TABIX.
      append initial line to LT_SCSTR_CALC assigning <S_SCSTR_CALC>.
      move-corresponding LS_SCSTR_CALC to <S_SCSTR_CALC>.

***   Do Add Operation if Absolute Value is not initial
      if LS_SCORP_ABS-SCORP     is not initial and
         LS_SCORP_ABS-SCORP_UOM is not initial.

        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCSTR_CALC-SCORP
                                                            IF_CALCV_UOM_1 = LS_SCSTR_CALC-SCORP_UOM
                                                            IF_CALCV_2     = LS_SCORP_ABS-SCORP
                                                            IF_CALCV_UOM_2 = LS_SCORP_ABS-SCORP_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_SCORP_ABS-SCORP_UOM
                                                  importing EF_CALCV       = <S_SCSTR_CALC>-SCORP
                                                            EF_CALCV_UOM   = <S_SCSTR_CALC>-SCORP_UOM ).

      endif.

***   Save the last as absolute value
      if LF_INDEX = lines( CT_SCSTR_CALC ).
        if LS_SCORP_ABS-SCORP is initial.
          move-corresponding LS_SCSTR_CALC to LS_SCORP_ABS.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCSTR_CALC-SCORP
                                                              IF_CALCV_UOM_1 = LS_SCSTR_CALC-SCORP_UOM
                                                              IF_CALCV_2     = LS_SCORP_ABS-SCORP
                                                              IF_CALCV_UOM_2 = LS_SCORP_ABS-SCORP_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_SCORP_ABS-SCORP_UOM
                                                    importing EF_CALCV       = LS_SCORP_ABS-SCORP
                                                              EF_CALCV_UOM   = LS_SCORP_ABS-SCORP_UOM ).

        endif.
      endif.
    endloop.
  enddo.

  clear: CT_SCSTR_CALC.

***-------------------------------------------------------------------------------------------
*** Save new Data to right structure
  loop at LT_SCSTR_CALC into LS_SCSTR_CALC.
    LF_INDEX = SY-TABIX.
*** Save all Scorepositions which are not the "old" last score
    if LS_SCSTR_CALC-INDIC is not initial or
       LF_INDEX eq lines( LT_SCSTR_CALC ).

      if LS_SCORP is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCSTR_CALC-SCORP
                                                            IF_CALCV_UOM_1 = LS_SCSTR_CALC-SCORP_UOM
                                                            IF_CALCV_2     = LS_SCORP-SCORP
                                                            IF_CALCV_UOM_2 = LS_SCORP-SCORP_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_SCSTR_CALC-SCORP_UOM
                                                  importing EF_CALCV       = LS_SCSTR_CALC-SCORP
                                                            EF_CALCV_UOM   = LS_SCSTR_CALC-SCORP_UOM ).

        clear: LS_SCORP.
      endif.

      append LS_SCSTR_CALC to CT_SCSTR_CALC.

***-------------------------------------------------------------------------------------------
*** only if we have Cutting -> save "old" last Scores which is now in the middle of all the other Scores
    elseif LS_SCSTR_CALC-INDIC is initial and
           LF_INDEX            ne lines( LT_SCSTR_CALC ).
      if IF_TSCOR_CUT is not supplied.
***     No Cutting Indicator. Delete Score String Element
        delete LT_SCSTR_CALC index LF_INDEX.

      else.
***     Change indicator to the cutting one
        move IF_TSCOR_CUT to LS_SCSTR_CALC-INDIC.
        append LS_SCSTR_CALC to CT_SCSTR_CALC.

      endif.
    endif.

  endloop.


endmethod.
method BUILD_SCSTR.

  data: LF_SCORP      type CHAR30.
  data: LS_SCSTR_CALC type ZVCXI_P0SS_S_SCSTR_CALC,
        LS_SCORP      type ZVCXI_P0SS_S_SCORP,
        LS_SCORP_ABS  type ZVCXI_P0SS_S_SCORP.
  data: LT_SCSTR_CALC type ZVCXI_P0SS_TT_SCSTR_CALC.

***-------------------------------------------------------------------------------------------
*** 1 Build the right String Value
  loop at IT_SCSTR_CALC into LS_SCSTR_CALC.
    clear: LF_SCORP, LS_SCORP.

***-------------------------------------------------------------------------------------------
*** Do the Calculation for Relative Scores
    if IF_SSTRC eq ZCL_VCXI_P0SS_CUST_SCSTR=>C_SSTRC_RELATIVE.

      if LS_SCORP_ABS-SCORP     is initial and
         LS_SCORP_ABS-SCORP_UOM is initial.
***     Take the first Score Position as it is
        move-corresponding LS_SCSTR_CALC to LS_SCORP.
***     And do the same for the absolute value
        move-corresponding LS_SCSTR_CALC to LS_SCORP_ABS.
      else.
***     Calculate the new relative score position
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCSTR_CALC-SCORP
                                                            IF_CALCV_UOM_1 = LS_SCSTR_CALC-SCORP_UOM
                                                            IF_CALCV_2     = LS_SCORP_ABS-SCORP
                                                            IF_CALCV_UOM_2 = LS_SCORP_ABS-SCORP_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                            IF_UOM         = LS_SCORP_ABS-SCORP_UOM
                                                  importing EF_CALCV       = LS_SCORP-SCORP
                                                            EF_CALCV_UOM   = LS_SCORP-SCORP_UOM ).

***     Take the absolute Score position for the next calculation
        move-corresponding LS_SCSTR_CALC to LS_SCORP_ABS.
      endif.

***   Save the Score Positon vor the string value
      move  LS_SCORP-SCORP to LF_SCORP.

    else.
***   Take absolute Value as it is
      move LS_SCSTR_CALC-SCORP to LF_SCORP.

    endif.

***-------------------------------------------------------------------------------------------
*** Collect Data
    move LF_SCORP to LS_SCSTR_CALC-SCSTR_VALUE.
    condense LS_SCSTR_CALC-SCSTR_VALUE no-gaps.
    append LS_SCSTR_CALC to LT_SCSTR_CALC.
  endloop.

***-------------------------------------------------------------------------------------------
*** 2 Build Score String
  loop at LT_SCSTR_CALC into LS_SCSTR_CALC.
    if SY-TABIX eq lines( LT_SCSTR_CALC ).
      if RF_SCSTR is not initial.
        concatenate RF_SCSTR
                    LS_SCSTR_CALC-SCSTR_VALUE
               into RF_SCSTR separated by SPACE.
      else.
        move LS_SCSTR_CALC-SCSTR_VALUE to RF_SCSTR.
      endif.
    else.
      if RF_SCSTR is not initial.
        concatenate RF_SCSTR
                    LS_SCSTR_CALC-SCSTR_VALUE
                    LS_SCSTR_CALC-INDIC
               into RF_SCSTR separated by SPACE.
      else.
        concatenate LS_SCSTR_CALC-SCSTR_VALUE
                    LS_SCSTR_CALC-INDIC
               into RF_SCSTR separated by SPACE.
      endif.
    endif.
  endloop.

endmethod.
method CONSTRUCTOR.

*** Save Sheet Direction and Score Category
  move IF_SHTDI to ME->F_SHTDI.
  move IF_CSCOR to ME->F_CSCOR.

endmethod.
method DIV_TRIM.

  data:          LF_INDEX       type I.
  data:          LS_SCSTR_CALC  type ZVCXI_P0SS_S_SCSTR_CALC.
  field-symbols: <S_SCSTR_CALC> type ZVCXI_P0SS_S_SCSTR_CALC.

***-------------------------------------------------------------------------------------------
*** Start Doing
  loop at CT_SCSTR_CALC assigning <S_SCSTR_CALC>.
    LF_INDEX = SY-TABIX.
*** Subtract Top Trim (from last)
    if LF_INDEX = lines( CT_SCSTR_CALC ).
***   Add last Score string entry
      check IS_TRILT-TRILT is not initial.
      move-corresponding <S_SCSTR_CALC> to LS_SCSTR_CALC.

      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = <S_SCSTR_CALC>-SCORP
                                                          IF_CALCV_UOM_1 = <S_SCSTR_CALC>-SCORP_UOM
                                                          IF_CALCV_2     = IS_TRILT-TRILT
                                                          IF_CALCV_UOM_2 = IS_TRILT-TRILT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = <S_SCSTR_CALC>-SCORP_UOM
                                                importing EF_CALCV       = <S_SCSTR_CALC>-SCORP
                                                          EF_CALCV_UOM   = <S_SCSTR_CALC>-SCORP_UOM ).

      if IF_TSCOR_CUT is supplied.
***     Cutting Score Type is supplied -> change indicator
        move IF_TSCOR_CUT to <S_SCSTR_CALC>-INDIC.
      endif.

    endif.
  endloop.

***-------------------------------------------------------------------------------------------
*** If we definde a new Score line -> add it
  if LS_SCSTR_CALC is not initial.
*** Add line
    append LS_SCSTR_CALC to CT_SCSTR_CALC.
    clear: LS_SCSTR_CALC.
  endif.

***-------------------------------------------------------------------------------------------
*** If needed add the bottom Trim on first positon
  if IF_TSCOR_CUT   is supplied    and
     IS_TRIRB-TRIRB is not initial.

    move IS_TRIRB-TRIRB     to LS_SCSTR_CALC-SCORP.
    move IS_TRIRB-TRIRB_UOM to LS_SCSTR_CALC-SCORP_UOM.
    move IF_TSCOR_CUT       to LS_SCSTR_CALC-INDIC.

    insert LS_SCSTR_CALC into CT_SCSTR_CALC index 1.
  endif.

endmethod.
method DO_RECALC.

  data: LR_GATE             type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_SCSTR_MGR     type ref to ZCL_VCXI_P0SS_PR_SCSTR_MGR.

***------------------------------------------------------------------------------------------------
*** Get Score String Manager Reference
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCSTR_MGR.
        if LR_PR_SCSTR_MGR is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.
  check LR_PR_SCSTR_MGR is bound.

***------------------------------------------------------------------------------------------------
*** Get Divison Dimension
  ME->F_DIVDI = ME->GET_DIVDI( IT_PRVDR = IT_PRVDR ).

***------------------------------------------------------------------------------------------------
*** Get Sheet Dimensions
*  ME->S_SHTLE = ME->READ_SHTLE( IT_PRVDR = IT_PRVDR ).
*  ME->S_SHTWI = ME->READ_SHTWI( IT_PRVDR = IT_PRVDR ).
  ME->READ_SHT_DIM( exporting IT_PRVDR = IT_PRVDR
                    importing ES_SHTWI = ME->S_SHTWI
                              ES_SHTLE = ME->S_SHTLE ).

***------------------------------------------------------------------------------------------------
*** Do Calculation of Score String
  ME->F_SCSTR = ME->CALC_SCSTR( IT_PRVDR        = IT_PRVDR
                                IR_PR_SCSTR_MGR = LR_PR_SCSTR_MGR ).

endmethod.
method GET_PRODDIM_PRVDR.

  data: LR_GATE             type ref to /VCXI/CL_VKSR_GATE.

***-------------------------------------------------------------------------------------------
*** Read the right Production Dimensions
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to RR_PRODDIM.
        if RR_PRODDIM is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_SCORES_OF_SCSTR.

  data:          LS_SCSTR_CALC      type        ZVCXI_P0SS_S_SCSTR_CALC,
                 LS_SCORP           type        ZVCXI_P0SS_S_SCORP,
                 LS_SCORP_ABS       type        ZVCXI_P0SS_S_SCORP.
  data:          LT_GATE_SCORE_LAST type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_SCORE        type ref to ZCL_VCXI_P0SS_PR_SCORE.

***------------------------------------------------------------------------------------------------
*** Only needed if we have Score Category assigned
  check ME->F_CSCOR is not initial.


***------------------------------------------------------------------------------------------------
*** Find last Score(s)
  LT_GATE_SCORE_LAST = ZCL_VCXI_P0SS_CUST_SCSTR=>GET_LAST_SCORE( IT_GATE_SCORE = IT_PRVDR
                                                                 IF_CSCOR      = ME->F_CSCOR ).

***------------------------------------------------------------------------------------------------
*** Get All needed Scores in Absolute Values
  loop at IT_PRVDR into LR_GATE.
    clear: LS_SCSTR_CALC.
***------------------------------------------------------------------------------------------------
*** We need Scores as Absolute value first (if we do the scores)
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_SCORE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_SCORE.
    endtry.

    if LR_PR_SCORE is bound.
***   Get Score Position
      LS_SCORP = LR_PR_SCORE->GET_SCORP( ).
      if LS_SCORP_ABS-SCORP is initial.
        move-corresponding LS_SCORP to LS_SCORP_ABS.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SCORP-SCORP
                                                            IF_CALCV_UOM_1 = LS_SCORP-SCORP_UOM
                                                            IF_CALCV_2     = LS_SCORP_ABS-SCORP
                                                            IF_CALCV_UOM_2 = LS_SCORP_ABS-SCORP_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_SCORP_ABS-SCORP_UOM
                                                  importing EF_CALCV       = LS_SCORP_ABS-SCORP
                                                            EF_CALCV_UOM   = LS_SCORP_ABS-SCORP_UOM ).

      endif.

***   Save Values
      move-corresponding LS_SCORP_ABS to LS_SCSTR_CALC.

***   Set Indicator only if not last score
      read table LT_GATE_SCORE_LAST with key TABLE_LINE = LR_GATE
                                    transporting no fields.
      if SY-SUBRC ne 0.
        move LR_PR_SCORE->GET_TSCOR( )  to LS_SCSTR_CALC-INDIC.
      endif.

      append LS_SCSTR_CALC to RT_SCSTR_CALC.
      continue.
    endif.

  endloop.

endmethod.
method GET_SHTDIM_PRVDR.

  data: LR_GATE             type ref to /VCXI/CL_VKSR_GATE.

***-------------------------------------------------------------------------------------------
*** Read the right Sheet Dimensions
  loop at IT_PRVDR into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to RR_SHTDIM.
        if RR_SHTDIM is bound.
          exit.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_TAPES_OF_SCSTR.

  data:          LS_SCSTR_CALC     type        ZVCXI_P0SS_S_SCSTR_CALC,
                 LS_TAPOS          type        ZVCXI_P0SS_S_TAPOS,
                 LS_TAPOS_ABS      type        ZVCXI_P0SS_S_TAPOS.
  data:          LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
                 LR_PR_MS_TAPE     type ref to ZCL_VCXI_P0SS_PR_MS_TAPE.

***------------------------------------------------------------------------------------------------
*** Get All needed Scores in Absolute Values
  loop at IT_PRVDR into LR_GATE.
    clear: LS_SCSTR_CALC.
***------------------------------------------------------------------------------------------------
*** We need Tapes as they are
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MS_TAPE.
      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_MS_TAPE.
    endtry.

    if LR_PR_MS_TAPE is bound.
***   Get Tape Position (is also relative)
      LS_TAPOS = LR_PR_MS_TAPE->GET_TAPOS( ).

      if LS_TAPOS_ABS-TAPOS is initial.
        move-corresponding LS_TAPOS to LS_TAPOS_ABS.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_TAPOS-TAPOS
                                                            IF_CALCV_UOM_1 = LS_TAPOS-TAPOS_UOM
                                                            IF_CALCV_2     = LS_TAPOS_ABS-TAPOS
                                                            IF_CALCV_UOM_2 = LS_TAPOS_ABS-TAPOS_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_TAPOS_ABS-TAPOS_UOM
                                                  importing EF_CALCV       = LS_TAPOS_ABS-TAPOS
                                                            EF_CALCV_UOM   = LS_TAPOS_ABS-TAPOS_UOM ).

      endif.

***   Save Values
      move LS_TAPOS_ABS-TAPOS           to LS_SCSTR_CALC-SCORP.
      move LS_TAPOS_ABS-TAPOS_UOM       to LS_SCSTR_CALC-SCORP_UOM.
      move LR_PR_MS_TAPE->GET_TTAPE( )  to LS_SCSTR_CALC-INDIC.

      append LS_SCSTR_CALC to RT_SCSTR_CALC.
      continue.
    endif.

  endloop.

endmethod.
