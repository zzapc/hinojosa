
class ZCL_VCXI_XCI_BOB_BATCH definition
  public
  create public .

public section.

  data S_BATCHATTRIBUTES type BAPIBATCHATT .
  data S_BATCHSTATUS type BAPIBATCHSTATUS .
  data F_MATNR type MATNR .
  data F_CHARG type CHARG_D .
  data F_WERKS type WERKS_D .

  methods CHANGE_CLASSI
    importing
      !IF_CLNAM type KLASSE_D optional
      !IF_CLTYP type KLASSENART default '023'
      !IT_ALLOC_NUM type TT_BAPI1003_ALLOC_VALUES_NUM optional
      !IT_ALLOC_CHAR type TT_BAPI1003_ALLOC_VALUES_CHAR optional
      !IT_ALLOC_CURR type TT_BAPI1003_ALLOC_VALUES_CURR optional
      !IF_SETID type /VCXI/CKXC_SETID optional
      !IT_SETVA type /VCXI/CKXC_TT_SETVA optional
      !IF_COMMIT type ABAP_BOOL default ABAP_FALSE
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    raising
      /VCXI/CX_CKX .
  methods CREATE_CLASSI
    importing
      !IF_CLNAM type KLASSE_D
      !IF_CLTYP type KLASSENART
      !IT_ALLOC_NUM type TT_BAPI1003_ALLOC_VALUES_NUM optional
      !IT_ALLOC_CHAR type TT_BAPI1003_ALLOC_VALUES_CHAR optional
      !IT_ALLOC_CURR type TT_BAPI1003_ALLOC_VALUES_CURR optional
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    raising
      /VCXI/CX_CKX .
  methods INIT_FROM_DB
    importing
      !IF_MATNR type MATNR
      !IF_CHARG type CHARG_D
      !IF_WERKS type WERKS_D optional
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    raising
      /VCXI/CX_CKX .
  methods SAVE
    importing
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
    exporting
      !ET_BAPIRET2 type BAPIRETTAB
    raising
      /VCXI/CX_CKX .
  methods GET_CLASSI
    importing
      !IF_CLTYP type KLASSENART default '023'
      !IF_CLNAM type KLASSE_D optional
      !IF_SETID type /VCXI/CKXC_SETID optional
    exporting
      !ET_ALLOC_LIST type TT_BAPI1003_ALLOC_LIST
      !ET_ALLOC_NUM type TT_BAPI1003_ALLOC_VALUES_NUM
      !ET_ALLOC_CHAR type TT_BAPI1003_ALLOC_VALUES_CHAR
      !ET_ALLOC_CURR type TT_BAPI1003_ALLOC_VALUES_CURR
      !ET_BAPIRET2 type BAPIRETTAB
    returning
      value(RT_SETVA) type /VCXI/CKXC_TT_SETVA
    raising
      /VCXI/CX_CKX .
  class-methods GET_NEXT_BATCH_NUMBER
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IS_BNCOM type BNCOM optional
    returning
      value(RF_CHARG) type CHARG_D
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_BAPI_SAVE_IN,
      S_BATCHKEY   type BAPIBATCHKEY,
      S_ATTRIBUTES type BAPIBATCHATT,
    end of YS_BAPI_SAVE_IN .
  types:
    begin of YS_BAPI_SAVE_INX,
      UPDKZ         type UPDKZ_D,
      S_BATCHKEY    type BAPIBATCHKEY,
      S_ATTRIBUTESX type BAPIBATCHATTX,
    end of YS_BAPI_SAVE_INX .

  methods GET_CUOBN
    returning
      value(RF_CUOBN) type CUOBN
    raising
      /VCXI/CX_CKX .
  methods GET_BAPI_DATA_IN
    returning
      value(RS_BAPI_SAVE_IN) type YS_BAPI_SAVE_IN
    raising
      /VCXI/CX_CKX .
  methods GET_BAPI_DATA_INX
    importing
      !IS_BAPI_SAVE_IN type YS_BAPI_SAVE_IN
      !IS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN optional
    returning
      value(RS_BAPI_SAVE_INX) type YS_BAPI_SAVE_INX
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCI_BOB_BATCH definition
class ZCL_VCXI_XCI_BOB_BATCH implementation.
  method CHANGE_CLASSI.

    data: LS_CLASS      type /VCXI/CKXC_S_CLASS.
    data: LT_CLASS      type /VCXI/CKXC_TT_CLASS,
          LT_MAPID      type /VCXI/CKXC_TT_MAPID,
          LT_ALLOC_LIST type TT_BAPI1003_ALLOC_LIST,
          LT_ALLOC_NUM  type TT_BAPI1003_ALLOC_VALUES_NUM,
          LT_ALLOC_CHAR type TT_BAPI1003_ALLOC_VALUES_CHAR,
          LT_ALLOC_CURR type TT_BAPI1003_ALLOC_VALUES_CURR.


    clear ET_BAPIRET2.

***--------------------------------------------------------------------------------------
    if IF_SETID is supplied.
      /VCXI/CL_CKXC_CCM=>GET_SETID_INFO( exporting IF_SETID = IF_SETID
                                         importing ET_CLASS = LT_CLASS
                                                   ET_MAPID = LT_MAPID ).
***   Support only for a single Class
      check LT_CLASS is not initial.
      if IF_CLNAM is supplied.
        check LINE_EXISTS( LT_CLASS[ CLSTY = IF_CLTYP
                                     CLSNO = IF_CLNAM ] ).
      else.
        if LINES( LT_CLASS ) gt 1.
          ME->GET_CLASSI( importing ET_ALLOC_LIST = LT_ALLOC_LIST
                                    ET_BAPIRET2   = ET_BAPIRET2 ).
          loop at LT_CLASS into LS_CLASS.
            if not LINE_EXISTS( LT_ALLOC_LIST[ CLASSNUM  = LS_CLASS-CLSNO
                                               CLASSTYPE = LS_CLASS-CLSTY ] ).
              delete LT_CLASS.
            endif.
          endloop.
        endif.
        LS_CLASS = value #( LT_CLASS[ 1 ] optional ).
      endif.
      check LS_CLASS is not initial.

***   Filter Mapping IDs by Class
      loop at LT_MAPID into data(LS_MAPID).
        if not LINE_EXISTS( LS_MAPID-T_CLASS[ CLSTY = LS_CLASS-CLSTY
                                              CLSNO = LS_CLASS-CLSNO ] ).
          delete LT_MAPID.
        endif.
      endloop.

***   Get current classification values
      ME->GET_CLASSI( exporting IF_CLTYP      = LS_CLASS-CLSTY
                                IF_CLNAM      = LS_CLASS-CLSNO
                      importing ET_ALLOC_NUM  = LT_ALLOC_NUM
                                ET_ALLOC_CHAR = LT_ALLOC_CHAR
                                ET_ALLOC_CURR = LT_ALLOC_CURR
                                ET_BAPIRET2   = ET_BAPIRET2 ).

***   Update based on Mapping Set
      loop at IT_SETVA into data(LS_SETVA).
        check LINE_EXISTS( LT_MAPID[ MAPID = LS_SETVA-MAPID
                                     ATNAM = LS_SETVA-ATNAM ] ).
        select single ATFOR
               into @data(LF_ATFOR)
               from CABN
              where ATNAM eq @LS_SETVA-ATNAM.
        check SY-SUBRC eq 0.

        case LF_ATFOR.
          when 'CHAR'.
            loop at LS_SETVA-T_MAPVC into data(LS_MAPVC).
              read table LT_ALLOC_CHAR assigning field-symbol(<S_ALLOC_CHAR>)
                                       with key CHARACT = LS_SETVA-ATNAM.
              if SY-SUBRC ne 0.
                append value #( CHARACT = LS_SETVA-ATNAM ) to LT_ALLOC_CHAR assigning <S_ALLOC_CHAR>.
              endif.
              clear: <S_ALLOC_CHAR>-VALUE_CHAR,
                     <S_ALLOC_CHAR>-VALUE_CHAR_LONG,
                     <S_ALLOC_CHAR>-VALUE_NEUTRAL.
              <S_ALLOC_CHAR>-VALUE_NEUTRAL_LONG = LS_MAPVC-VAORG.
            endloop.

          when 'NUM' or 'CURR' or 'DATE' or 'TIME'.
            loop at LS_SETVA-T_MAPVN into data(LS_MAPVN).
              read table LT_ALLOC_NUM assigning field-symbol(<S_ALLOC_NUM>)
                                      with key CHARACT = LS_SETVA-ATNAM.
              if SY-SUBRC ne 0.
                append value #( CHARACT = LS_SETVA-ATNAM ) to LT_ALLOC_NUM assigning <S_ALLOC_NUM>.
              endif.
              <S_ALLOC_NUM>-VALUE_FROM = LS_MAPVN-ATFLV.
            endloop.
        endcase.
      endloop.

    else.
***   Buffer Input for function module call
      LT_ALLOC_NUM  = IT_ALLOC_NUM.
      LT_ALLOC_CHAR = IT_ALLOC_CHAR.
      LT_ALLOC_CURR = IT_ALLOC_CURR.

      LS_CLASS = value #( CLSTY = IF_CLTYP
                          CLSNO = IF_CLNAM ).
    endif.

***--------------------------------------------------------------------------------------
*** Change Classification via BAPI
    call function 'BAPI_OBJCL_CHANGE'
      exporting
        OBJECTKEY_LONG     = conv BAPI1003_KEY-OBJECT_LONG( ME->GET_CUOBN( ) )
        OBJECTTABLE        = 'MCH1'
        CLASSNUM           = LS_CLASS-CLSNO
        CLASSTYPE          = LS_CLASS-CLSTY
      tables
        ALLOCVALUESNUMNEW  = LT_ALLOC_NUM
        ALLOCVALUESCHARNEW = LT_ALLOC_CHAR
        ALLOCVALUESCURRNEW = LT_ALLOC_CURR
        RETURN             = ET_BAPIRET2.

***--------------------------------------------------------------------------------------
*** Raise Exception from BAPI Message
    if IF_COMMIT eq ABAP_TRUE.
      if LINE_EXISTS( ET_BAPIRET2[ TYPE = 'E' ] ).
        call function 'BAPI_TRANSACTION_ROLLBACK'.
        /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = ET_BAPIRET2[ TYPE = 'E' ] ).
      else.
        call function 'BAPI_TRANSACTION_COMMIT'
          exporting
            WAIT = 'X'.
      endif.
    else.
      if LINE_EXISTS( ET_BAPIRET2[ TYPE = 'E' ] ).
        /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = ET_BAPIRET2[ TYPE = 'E' ] ).
      endif.
    endif.

  endmethod.
  method CREATE_CLASSI.

    data: LT_ALLOC_NUM  type TT_BAPI1003_ALLOC_VALUES_NUM,
          LT_ALLOC_CHAR type TT_BAPI1003_ALLOC_VALUES_CHAR,
          LT_ALLOC_CURR type TT_BAPI1003_ALLOC_VALUES_CURR.


    clear ET_BAPIRET2.

***--------------------------------------------------------------------------------------
*** Buffer Input for function module call
    LT_ALLOC_NUM  = IT_ALLOC_NUM.
    LT_ALLOC_CHAR = IT_ALLOC_CHAR.
    LT_ALLOC_CURR = IT_ALLOC_CURR.

*** Create Classification via BAPI
    call function 'BAPI_OBJCL_CREATE'
      exporting
        OBJECTKEYNEW_LONG = conv BAPI1003_KEY-OBJECT_LONG( ME->GET_CUOBN( ) )
        OBJECTTABLENEW    = 'MCH1'
        CLASSNUMNEW       = IF_CLNAM
        CLASSTYPENEW      = IF_CLTYP
      tables
        ALLOCVALUESNUM    = LT_ALLOC_NUM
        ALLOCVALUESCHAR   = LT_ALLOC_CHAR
        ALLOCVALUESCURR   = LT_ALLOC_CURR
        RETURN            = ET_BAPIRET2.


***--------------------------------------------------------------------------------------
*** Raise Exception from BAPI Message
    if LINE_EXISTS( ET_BAPIRET2[ TYPE = 'E' ] ).
      call function 'BAPI_TRANSACTION_ROLLBACK'.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = ET_BAPIRET2[ TYPE = 'E' ] ).
    else.
      call function 'BAPI_TRANSACTION_COMMIT'
        exporting
          WAIT = 'X'.
    endif.

  endmethod.
  method GET_BAPI_DATA_IN.

*** Batch Key
    RS_BAPI_SAVE_IN-S_BATCHKEY-MATERIAL = ME->F_MATNR.
    RS_BAPI_SAVE_IN-S_BATCHKEY-MATERIAL_LONG = ME->F_MATNR.
    RS_BAPI_SAVE_IN-S_BATCHKEY-BATCH = ME->F_CHARG.
    RS_BAPI_SAVE_IN-S_BATCHKEY-PLANT = ME->F_WERKS.

*** Batch Attributes
    RS_BAPI_SAVE_IN-S_ATTRIBUTES = ME->S_BATCHATTRIBUTES.

  endmethod.
  method GET_BAPI_DATA_INX.

***--------------------------------------------------------------------------------------
*** Update Indicator
    if IS_BAPI_SAVE_IN-S_BATCHKEY eq IS_BAPI_SAVE_IN_OLD-S_BATCHKEY.
      RS_BAPI_SAVE_INX-UPDKZ = 'U'.
    else.
      RS_BAPI_SAVE_INX-UPDKZ = 'I'.
    endif.

***--------------------------------------------------------------------------------------
*** Attributes
    /VCXI/CL_CKX_SERVICE=>FILL_X_STRUCT( exporting IS_DATA     = IS_BAPI_SAVE_IN-S_ATTRIBUTES
                                                   IS_DATA_OLD = IS_BAPI_SAVE_IN_OLD-S_ATTRIBUTES
                                         changing  CS_X_STRUC  = RS_BAPI_SAVE_INX-S_ATTRIBUTESX ).

  endmethod.
  method GET_CLASSI.

    data: LF_READ_VALUATIONS type ABAP_BOOL.


    clear: ET_ALLOC_LIST,
           ET_ALLOC_NUM,
           ET_ALLOC_CHAR,
           ET_ALLOC_CURR,
           ET_BAPIRET2.

***--------------------------------------------------------------------------------------
*** Read Classification using Cross Classification Mapping
    if IF_SETID is supplied.
      RT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID = IF_SETID
                                               IF_CUOBN = ME->GET_CUOBN( ) ).

***--------------------------------------------------------------------------------------
    elseif IF_CLTYP is supplied and
           IF_CLNAM is supplied.
***   Read a specific Class
      call function 'BAPI_OBJCL_GETDETAIL'
        exporting
          OBJECTKEY_LONG  = conv BAPI1003_KEY-OBJECT_LONG( ME->GET_CUOBN( ) )
          OBJECTTABLE     = 'MCH1'
          CLASSTYPE       = IF_CLTYP
          CLASSNUM        = IF_CLNAM
        tables
          ALLOCVALUESNUM  = ET_ALLOC_NUM
          ALLOCVALUESCHAR = ET_ALLOC_CHAR
          ALLOCVALUESCURR = ET_ALLOC_CURR
          RETURN          = ET_BAPIRET2.

***--------------------------------------------------------------------------------------
    else.
***   Read also Classification Values
      if ET_ALLOC_NUM  is requested or
         ET_ALLOC_CHAR is requested or
         ET_ALLOC_CURR is requested.
        LF_READ_VALUATIONS = ABAP_TRUE.
      endif.

***   Read all Classifications
      call function 'BAPI_OBJCL_GETCLASSES'
        exporting
          OBJECTKEY_IMP_LONG = conv BAPI1003_KEY-OBJECT_LONG( ME->GET_CUOBN( ) )
          OBJECTTABLE_IMP    = 'MCH1'
          CLASSTYPE_IMP      = IF_CLTYP
          READ_VALUATIONS    = LF_READ_VALUATIONS
        tables
          ALLOCLIST          = ET_ALLOC_LIST
          ALLOCVALUESNUM     = ET_ALLOC_NUM
          ALLOCVALUESCHAR    = ET_ALLOC_CHAR
          ALLOCVALUESCURR    = ET_ALLOC_CURR
          RETURN             = ET_BAPIRET2.
    endif.

***--------------------------------------------------------------------------------------
*** Raise Exception from BAPI Message
    if LINE_EXISTS( ET_BAPIRET2[ TYPE = 'E' ] ).
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = ET_BAPIRET2[ TYPE = 'E' ] ).
    endif.

  endmethod.
  method GET_CUOBN.

    RF_CUOBN = value MCH1_KEY( MATNR = ME->F_MATNR
                               CHARG = ME->F_CHARG ).

  endmethod.
  method GET_NEXT_BATCH_NUMBER.

    call function 'VB_NEXT_BATCH_NUMBER'
      exporting
        MATNR                        = IF_MATNR
        WERKS                        = IF_WERKS
        CHECK_BATCH                  = ABAP_TRUE
        CHECK_MATERIAL               = ABAP_TRUE
        MESSAGE_WHEN_AUTO            = ABAP_FALSE
        X_BNCOM                      = IS_BNCOM
        LOCK_BATCH                   = ABAP_TRUE
      importing
        NEW_CHARG                    = RF_CHARG
      exceptions
        NO_MATERIAL                  = 1
        NO_PLANT                     = 2
        MATERIAL_NOT_FOUND           = 3
        PLANT_NOT_FOUND              = 4
        NO_BATCH_HANDLING            = 5
        BATCH_EXIST                  = 6
        NO_NUMBER                    = 7
        ILLEGAL_BATCH_NUMBER         = 8
        INTERVAL_NOT_FOUND           = 9
        OBJECT_NOT_FOUND             = 10
        INTERVAL_OVERFLOW            = 11
        ERROR_AUTOMATIC_BATCH_NUMBER = 12
        CANCELLED                    = 13
        others                       = 14.
    if not SY-SUBRC is initial.
***   No batch numbers could be determined
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'LB'
                                            IF_MSGNO = '026' ).
    endif.

  endmethod.
  method INIT_FROM_DB.

    ME->F_MATNR = IF_MATNR.
    ME->F_CHARG = IF_CHARG.
    ME->F_WERKS = IF_WERKS.

*** Load Batch via BAPI
    call function 'BAPI_BATCH_GET_DETAIL'
      exporting
        MATERIAL_LONG   = ME->F_MATNR
        BATCH           = ME->F_CHARG
        PLANT           = ME->F_WERKS
      importing
        BATCHATTRIBUTES = ME->S_BATCHATTRIBUTES
        BATCHSTATUS     = ME->S_BATCHSTATUS
      tables
        RETURN          = ET_BAPIRET2.

*** Initialize if loading was not successful
    if ET_BAPIRET2 is not initial.
      clear: ME->F_MATNR,
             ME->F_CHARG,
             ME->F_WERKS,
             ME->S_BATCHATTRIBUTES,
             ME->S_BATCHSTATUS.
    endif.

  endmethod.
  method SAVE.

    data: LS_BAPI_SAVE_IN     type YS_BAPI_SAVE_IN,
          LS_BAPI_SAVE_IN_OLD type YS_BAPI_SAVE_IN,
          LS_BAPI_SAVE_INX    type YS_BAPI_SAVE_INX,
          LS_CONTROLFIELDS    type BAPIBATCHCTRL.
    data: LR_BOB_BATCH type ref to ZCL_VCXI_XCI_BOB_BATCH.


***--------------------------------------------------------------------------------------
*** Map data to BAPI structures
    LS_BAPI_SAVE_IN = ME->GET_BAPI_DATA_IN( ).

*** Load current DB values for compare
    if ME->F_CHARG is not initial.
      create object LR_BOB_BATCH.
      LR_BOB_BATCH->INIT_FROM_DB( IF_MATNR = ME->F_MATNR
                                  IF_CHARG = ME->F_CHARG
                                  IF_WERKS = ME->F_WERKS ).
      LS_BAPI_SAVE_IN_OLD = LR_BOB_BATCH->GET_BAPI_DATA_IN( ).
    endif.

*** Build X-Structure
    LS_BAPI_SAVE_INX = ME->GET_BAPI_DATA_INX( IS_BAPI_SAVE_IN     = LS_BAPI_SAVE_IN
                                              IS_BAPI_SAVE_IN_OLD = LS_BAPI_SAVE_IN_OLD ).

*** Define BAPI Control Fields
    LS_CONTROLFIELDS-NOCOMMIT = switch #( IF_COMMIT when ABAP_TRUE  then ABAP_FALSE
                                                    when ABAP_FALSE then ABAP_TRUE ).

***----------------------------------------------------------------------------
*** Call BAPI
    case LS_BAPI_SAVE_INX-UPDKZ.
      when 'I'.
***     Create new Batch
        call function 'BAPI_BATCH_CREATE'
          exporting
            MATERIAL           = LS_BAPI_SAVE_IN-S_BATCHKEY-MATERIAL
            MATERIAL_LONG      = LS_BAPI_SAVE_IN-S_BATCHKEY-MATERIAL_LONG
            BATCH              = LS_BAPI_SAVE_IN-S_BATCHKEY-BATCH
            PLANT              = LS_BAPI_SAVE_IN-S_BATCHKEY-PLANT
            BATCHATTRIBUTES    = LS_BAPI_SAVE_IN-S_ATTRIBUTES
            BATCHCONTROLFIELDS = LS_CONTROLFIELDS
          importing
            BATCH              = ME->F_CHARG
            BATCHATTRIBUTES    = ME->S_BATCHATTRIBUTES
          tables
            RETURN             = ET_BAPIRET2.

      when 'U'.
***     Change existing Batch
        call function 'BAPI_BATCH_CHANGE'
          exporting
            MATERIAL           = LS_BAPI_SAVE_IN-S_BATCHKEY-MATERIAL
            MATERIAL_LONG      = LS_BAPI_SAVE_IN-S_BATCHKEY-MATERIAL_LONG
            BATCH              = LS_BAPI_SAVE_IN-S_BATCHKEY-BATCH
            PLANT              = LS_BAPI_SAVE_IN-S_BATCHKEY-PLANT
            BATCHATTRIBUTES    = LS_BAPI_SAVE_IN-S_ATTRIBUTES
            BATCHATTRIBUTESX   = LS_BAPI_SAVE_INX-S_ATTRIBUTESX
            BATCHCONTROLFIELDS = LS_CONTROLFIELDS
          importing
            BATCHATTRIBUTES    = ME->S_BATCHATTRIBUTES
          tables
            RETURN             = ET_BAPIRET2.
    endcase.

  endmethod.
