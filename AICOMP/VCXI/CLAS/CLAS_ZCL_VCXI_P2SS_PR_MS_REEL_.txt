
class ZCL_VCXI_P2SS_PR_MS_REEL definition
  public
  inheriting from ZCL_VCXI_XCSS_PR_MS
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_PRINT_COM .
  interfaces ZIF_VCXI_XCS_PSCALE_MGR .
  interfaces ZIF_VCXI_PXSS_FDI .

  constants C_IEVNT_O_CALIP_CHANGED type /VCXI/VKSC_IEVNT value 'CALIP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FPSMO_CHANGED type /VCXI/VKSC_IEVNT value 'FPSMO_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_GRAMM_CHANGED type /VCXI/VKSC_IEVNT value 'GRAMM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_MAKTX_CHANGED type /VCXI/VKSC_IEVNT value 'MAKTX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PAPGR_CHANGED type /VCXI/VKSC_IEVNT value 'PAPGR_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRINT_CHANGED type /VCXI/VKSC_IEVNT value 'PRINT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_REWID_CHANGED type /VCXI/VKSC_IEVNT value 'REWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P2_MS_REEL type /VCXI/VKSC_IPRVT value 'ZVCXI_P2SS_MS_REEL' ##NO_TEXT.
  constants C_PARID_CALIP type /VCXI/VKS_PARID value 'ZVCXI_P0_CALIP' ##NO_TEXT.
  constants C_PARID_FPSMO type /VCXI/VKS_PARID value 'ZVCXI_P0_FPSMO' ##NO_TEXT.
  constants C_PARID_GRAMM type /VCXI/VKS_PARID value 'ZVCXI_P0_GRAMM' ##NO_TEXT.
  constants C_PARID_MAKTX type /VCXI/VKS_PARID value 'ZVCXI_XC_MAKTX' ##NO_TEXT.
  constants C_PARID_PAPGR type /VCXI/VKS_PARID value 'ZVCXI_PF_PAPGR' ##NO_TEXT.
  constants C_PARID_PRINT type /VCXI/VKS_PARID value 'ZVCXI_PX_PRINT' ##NO_TEXT.
  constants C_PARID_REWID type /VCXI/VKS_PARID value 'ZVCXI_P0_REWID' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.

  methods GET_BAWGT
    exporting
      !ES_BAWGP type ZVCXI_P0S_S_BAWGP
    returning
      value(RS_BAWGT) type ZVCXI_P0S_S_BAWGT
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_GRAMM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_GRAMM) type ZVCXI_P0SS_S_GRAMM
    raising
      /VCXI/CX_CKX .
  methods GET_MAKTX
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RF_MAKTX) type MAKTX
    raising
      /VCXI/CX_CKX .
  methods GET_REWID
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_REWID) type ZVCXI_P0SS_S_REWID
    raising
      /VCXI/CX_CKX .
  methods GET_PAPGR
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_PAPGR) type ZVCXI_PFSS_PAPGR
    raising
      /VCXI/CX_CKX .
  methods SET_MAKTX
    importing
      !IF_MAKTX type MAKTX optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    exporting
      !ES_BAWGT type ZVCXI_P0S_S_BAWGT
      !ES_BAWGP type ZVCXI_P0S_S_BAWGP
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods SET_CALIP
    importing
      !IS_CALIP type ZVCXI_P0SS_S_CALIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GRAMM
    importing
      !IS_GRAMM type ZVCXI_P0SS_S_GRAMM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_REWID
    importing
      !IS_REWID type ZVCXI_P0SS_S_REWID optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PAPGR
    importing
      !IF_PAPGR type ZVCXI_PFSS_PAPGR
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_FPSMO
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FPSMO) type ZVCXI_P0SS_FPSMO
    raising
      /VCXI/CX_CKX .
  methods SET_FPSMO
    importing
      !IF_FPSMO type ZVCXI_P0SS_FPSMO optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_DESCR
    redefinition .
  methods GET_PRICE
    redefinition .
  methods GET_PRICP
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods GET_WERKS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods SET_PRICE
    redefinition .
  methods SET_PRICP
    redefinition .
protected section.

  constants C_IEVNT_I_LOAD_PSCALE type /VCXI/VKSC_IEVNT value 'LOAD_PSCALE' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_MAKTX type /VCXI/VKSC_IEVNT value 'RECALC_MAKTX' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.

  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods CHECK_MAKTX
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_MAKTX
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_PSCALE
    raising
      /VCXI/CX_CKX .
  methods CHECK_REWID
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_CALIP
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_GRAMM
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_PAPGR
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SURWT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_RCUT
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_RCUT) type ref to ZCL_VCXI_P2SS_PR_RCUT
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_P2SS_PR_MS_REEL definition
class ZCL_VCXI_P2SS_PR_MS_REEL implementation.
  method CHECK_CALIP.

*** Check Caliper
    if ME->GET_CALIP( )-CALIP is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Caliper is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '125' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Caliper is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '126' ).
      endif.
    endif.

  endmethod.
  method CHECK_GRAMM.

*** Check Grammage
    if ME->GET_GRAMM( )-GRAMM is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Grammage is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '123' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Grammage is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '124' ).
      endif.
    endif.

  endmethod.
  method CHECK_MAKTX.

*** Check only for Dummys
    check ME->IS_DUMMY( ).

*** Check Material Description
    if ME->GET_MAKTX( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Material Description is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '077' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Material Description is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '078' ).
      endif.
    endif.

  endmethod.
  method CHECK_PAPGR.

*** Check Paper Grade
    if ME->GET_PAPGR( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Paper Grade is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '121' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Paper Grade is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '122' ).
      endif.
    endif.

  endmethod.
  method CHECK_REWID.

*** Get requested Sheet Width
    data(LR_PR_RCUT) = ME->GET_PRVDR_RCUT( ).
    if LR_PR_RCUT is bound.
      LR_PR_RCUT->ZIF_VCXI_P2SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTWI = data(LS_SHTWI) ).
    endif.

*** Check Reel Width
    data(LS_REWID) = ME->GET_REWID( ).
    if LS_REWID-REWID is not initial.
      if ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE_WITH_ANY( IF_CALCV_1     = LS_REWID-REWID
                                                      IF_CALCV_UOM_1 = LS_REWID-REWID_UOM
                                                      IF_CALCV_2     = LS_SHTWI-SHTWI
                                                      IF_CALCV_UOM_2 = LS_SHTWI-SHTWI_UOM
                                                      IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LT ).
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
        if IR_MESSAGE is bound.
***       Reel Width is maintained but not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '153' ).
        endif.
      else.
        RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
        if IR_MESSAGE is bound.
***       Reel Width is maintained and valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '151' ).
        endif.
      endif.
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Reel Width is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P2SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '152' ).
      endif.
    endif.

  endmethod.
  method CHECK_SURWT.

*** Check Surface Weight
    if ME->GET_SURWT( )-SURWT is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Surface Weight is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '127' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Surface Weight is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '128' ).
      endif.
    endif.

  endmethod.
  method GET_BAWGT.

    data(LS_SURWT) = ME->GET_SURWT( ).

    ES_BAWGP-BAWGP     = 1000.
    ES_BAWGP-BAWGP_UOM = 'M2'.

    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT-SURWT
                                                        IF_CALCV_UOM_1 = LS_SURWT-SURWT_UOM
                                                        IF_CALCV_2     = ES_BAWGP-BAWGP
                                                        IF_CALCV_UOM_2 = ES_BAWGP-BAWGP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = RS_BAWGT-BAWGT
                                                        EF_CALCV_UOM   = RS_BAWGT-BAWGT_UOM ).

  endmethod.
  method GET_CALIP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).
    move LS_PARAM-ATFLV to RS_CALIP-CALIP.
    move LS_PARAM-UNIT  to RS_CALIP-CALIP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_DESCR.

    data: LF_MATNR type MATNR,
          LF_DESCR type /VCXI/CKX_DESCR.

    LF_MATNR = ME->GET_MATNR( ).

    if LF_MATNR is not initial.
***   Convert Material Number to Output
      call function 'CONVERSION_EXIT_MATN1_OUTPUT'
        exporting
          INPUT  = LF_MATNR
        importing
          OUTPUT = LF_MATNR.
***   Get Material Description
      LF_DESCR = ME->GET_MAKTX( ).

      concatenate LF_MATNR '-' LF_DESCR into RF_DESCR separated by SPACE.
    else.
      RF_DESCR = SUPER->GET_DESCR( ).
    endif.

  endmethod.
  method GET_FPSMO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPSMO ).
    RF_FPSMO = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_GRAMM.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).
    RS_GRAMM-GRAMM     = LS_PARAM-ATFLV.
    RS_GRAMM-GRAMM_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_MAKTX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    if ME->IS_DUMMY( ).
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).
      move LS_PARAM-STRNG to RF_MAKTX.
      move LS_PARAM-SETBY to EF_SETBY.

      if EF_FOVRR is requested.
        EF_FOVRR = cond #( when ZCL_VCXI_PXSS_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial then ABAP_UNDEFINED
                           when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER                                then ABAP_TRUE
                                                                                                            else ABAP_FALSE ).
      endif.
    else.
***   Use Standard Material Description
      RF_MAKTX = ME->GET_MATNR_DESCR( ).
    endif.

  endmethod.
  method GET_PAPGR.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAPGR ).
    RF_PAPGR = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_PRICE.

    "only Price Scales are supported

  endmethod.
  method GET_PRICP.

    "only Price Scales are supported

  endmethod.
  method GET_PRVDR_RCUT.

    data: LT_GATE type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Reel Cutting Provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P2SS_PR_RCUT=>C_IPRVT_P2_RCUT
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Reel Cutting Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_RCUT.
          check RR_PR_RCUT is bound.
          move LR_GATE to ER_GATE.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_RCUT, ER_GATE.
      endtry.
    endloop.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_REWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_REWID ).
    RS_REWID-REWID     = LS_PARAM-ATFLV.
    RS_REWID-REWID_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Material Description
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_MAKTX( ) ).

***----------------------------------------------------------------------------
*** Check Paper Grade
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_PAPGR( ) ).

*** Check Grammage
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_GRAMM( ) ).

*** Check Surface Weight
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SURWT( ) ).

*** Check Caliper
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_CALIP( ) ).

*** Check Reel Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_REWID( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Material Description
    ME->CHECK_MAKTX( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Paper Grade
    ME->CHECK_PAPGR( IR_MESSAGE = IR_MESSAGE ).

*** Check Grammage
    ME->CHECK_GRAMM( IR_MESSAGE = IR_MESSAGE ).

*** Check Surface Weight
    ME->CHECK_SURWT( IR_MESSAGE = IR_MESSAGE ).

*** Check Caliper
    ME->CHECK_CALIP( IR_MESSAGE = IR_MESSAGE ).

*** Check Reel Width
    ME->CHECK_REWID( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
    if ES_BAWGT is requested or
       ES_BAWGP is requested.
***   Fixed Base Weight Unit as base for Base Weight
      ES_BAWGP-BAWGP     = 1000.
      ES_BAWGP-BAWGP_UOM = 'M2'.

***   Calculate Base Weight by Surface Weight
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_SURWT-SURWT
                                                          IF_CALCV_UOM_1 = RS_SURWT-SURWT_UOM
                                                          IF_CALCV_2     = ES_BAWGP-BAWGP
                                                          IF_CALCV_UOM_2 = ES_BAWGP-BAWGP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = ES_BAWGT-BAWGT
                                                          EF_CALCV_UOM   = ES_BAWGT-BAWGT_UOM ).
    endif.

  endmethod.
  method GET_WERKS.

    data: LR_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC.

    ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
    check LR_PR_SPEC is bound.
    RF_WERKS = LR_PR_SPEC->GET_WERKS( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_MAKTX.
        ME->HANDLE_RECALC_MAKTX( ).

      when C_IEVNT_I_LOAD_PSCALE.
        ME->HANDLE_LOAD_PSCALE( ).

    endcase.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D,
          LF_SETBY type /VCXI/VKSR_SETBY.
    data: LR_CUST_REEL type ref to ZCL_VCXI_PFSS_CUST_REEL.


***--------------------------------------------------------------------------------------
    LF_MATNR = ME->GET_MATNR( ).
    LF_WERKS = ME->GET_WERKS( ).

    if ME->R_CUST_MATNR          is bound    and
       ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
       ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      exit.
    endif.

    clear ME->R_CUST_MATNR.

***--------------------------------------------------------------------------------------
    if LF_MATNR is not initial.
      try.
***       Load the Customizing
          LR_CUST_REEL = ZCL_VCXI_PFSS_CUST_REEL=>GET_INSTANCE_PF_REEL( IF_MATNR = LF_MATNR
                                                                        IF_WERKS = LF_WERKS
                                                                        IF_DATE  = ME->R_GATE->GET_APPDATA( )->F_DCONF ).

        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          return.
      endtry.
    endif.

    ME->R_CUST_MATNR = LR_CUST_REEL.

***--------------------------------------------------------------------------------------
*** Set Values for Real Material
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
***   If Material Number is initial, fully reset parameters
      LF_SETBY = cond #( when LF_MATNR is not initial then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                      else SPACE ).

      ME->SET_PAPGR(  IF_PAPGR  = cond #( when LR_CUST_REEL is bound then LR_CUST_REEL->F_PAPGR )
                      IF_SETBY  = LF_SETBY ).
      ME->SET_GRAMM(  IS_GRAMM  = cond #( when LR_CUST_REEL is bound then LR_CUST_REEL->S_GRAMM )
                      IF_SETBY  = LF_SETBY ).
      ME->SET_CALIP(  IS_CALIP  = cond #( when LR_CUST_REEL is bound then LR_CUST_REEL->S_CALIP )
                      IF_SETBY  = LF_SETBY ).
      ME->SET_SURWT(  IS_SURWT  = cond #( when LR_CUST_REEL is bound then value #( SURWT     = LR_CUST_REEL->S_GRAMM-GRAMM
                                                                                   SURWT_UOM = LR_CUST_REEL->S_GRAMM-GRAMM_UOM ) )
                      IF_SETBY  = LF_SETBY ).
      ME->SET_REWID(  IS_REWID  = cond #( when LR_CUST_REEL is bound then LR_CUST_REEL->S_REWID )
                      IF_SETBY  = LF_SETBY ).
    else.
***   Set Procurement Option
      ME->SET_PURCH( IF_PURCH = ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE ).
    endif.

  endmethod.
  method HANDLE_LOAD_PSCALE.

*** Set Load Data to Active
    call function 'ZVCXI_P0SS_LOAD_DATA_ACT'.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

*** Set Load Data to Deactivate
    call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

  endmethod.
  method HANDLE_RECALC_MAKTX.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.

    if ME->IS_DUMMY( ).
***   Only calcualate if calculation is active
      ME->GET_MAKTX( importing EF_FOVRR = LF_FOVRR ).
      check LF_FOVRR eq ABAP_FALSE.

***   Get generated Material Description
      LF_MAKTX = ZCL_VCXI_PXSS_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).

***   Set new Description
      ME->SET_MAKTX( IF_MAKTX = LF_MAKTX ).

    else.
***   Initialize Material Description
      ME->SET_MAKTX( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_SET_DEFAULT.

    ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

  endmethod.
  method SET_CALIP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CALIP ).

    LS_PARAM-ATFLV = IS_CALIP-CALIP.
    LS_PARAM-UNIT  = IS_CALIP-CALIP_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CALIP_CHANGED ).
    endif.

  endmethod.
  method SET_FPSMO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FPSMO ).

    move IF_FPSMO to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FPSMO_CHANGED ).
    endif.

  endmethod.
  method SET_GRAMM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GRAMM ).

    move IS_GRAMM-GRAMM     to LS_PARAM-ATFLV.
    move IS_GRAMM-GRAMM_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GRAMM_CHANGED ).
    endif.

  endmethod.
  method SET_MAKTX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MAKTX ).

    move IF_MAKTX to LS_PARAM-STRNG.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MAKTX_CHANGED ).
    endif.

  endmethod.
  method SET_PAPGR.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PAPGR ).

    move IF_PAPGR to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PAPGR_CHANGED ).
    endif.

  endmethod.
  method SET_PRICE.

    "only Price Scales are supported

  endmethod.
  method SET_PRICP.

    "only Price Scales are supported

  endmethod.
  method SET_REWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_REWID ).

    move IS_REWID-REWID     to LS_PARAM-ATFLV.
    move IS_REWID-REWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_REWID_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_MS_REEL> type ZVCXI_P2SS_S_FDI_MS_REEL.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P2SS_S_FDI_MS_REEL.
    assign RR_DATA->* to <S_FDI_MS_REEL>.

***------------------------------------------------------------------------------------------------
*** Get Material Number
    <S_FDI_MS_REEL>-S_FDI_MS_XPROC-MATNR = ME->GET_MATNR( ).

*** Get Material Description
    <S_FDI_MS_REEL>-S_FDI_MS_XPROC-MAKTX = ME->GET_MAKTX( importing EF_FOVRR = <S_FDI_MS_REEL>-S_FDI_MS_XPROC-FOVRR_MAKTX ).

*** Is Dummy Material
    <S_FDI_MS_REEL>-S_FDI_MS_XPROC-DUMMY = ME->IS_DUMMY( ).

*** Get Procurement Option
    <S_FDI_MS_REEL>-S_FDI_MS_XPROC-PURCH = ME->GET_PURCH( ).

*** Get Vendor
    <S_FDI_MS_REEL>-S_FDI_MS_XPROC-LIFNR = ME->GET_LIFNR( ).

*** Get Flag - Price Scale modified
    <S_FDI_MS_REEL>-S_FDI_MS_XPROC-FPSMO = ME->GET_FPSMO( ).


*** Paper Grade
    <S_FDI_MS_REEL>-PAPGR   = ME->GET_PAPGR( ).

*** Grammage
    <S_FDI_MS_REEL>-S_GRAMM = ME->GET_GRAMM( ).

*** Caliper
    <S_FDI_MS_REEL>-S_CALIP = ME->GET_CALIP( ).

*** Reel Width
    <S_FDI_MS_REEL>-S_REWID = ME->GET_REWID( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_MS_REEL_OLD type ZVCXI_P2SS_S_FDI_MS_REEL,
          LS_FDI_MS_REEL_NEW type ZVCXI_P2SS_S_FDI_MS_REEL.
    data: LR_DATA_OLD  type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data new Data
    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_MS_REEL_NEW = corresponding #( <S_DATA> ).
    endif.

*** Dereference Data old Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_MS_REEL_OLD = corresponding #( <S_DATA> ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Material Number
    if LS_FDI_MS_REEL_OLD-S_FDI_MS_XPROC-MATNR ne LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-MATNR.
      ME->SET_MATNR( IF_MATNR = LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-MATNR
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Material Description
    if LS_FDI_MS_REEL_OLD-S_FDI_MS_XPROC-MAKTX        ne LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-MAKTX or
       LS_FDI_MS_REEL_OLD-S_FDI_MS_XPROC-FOVRR_MAKTX  ne LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-FOVRR_MAKTX.
      if LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-FOVRR_MAKTX ne ABAP_FALSE.
        ME->SET_MAKTX( IF_MAKTX = LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-MAKTX
                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->SET_MAKTX( IF_MAKTX = LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-MAKTX
                       IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Procurement Option
    if LS_FDI_MS_REEL_OLD-S_FDI_MS_XPROC-PURCH ne LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-PURCH.
      ME->SET_PURCH( IF_PURCH = LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-PURCH
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Vendor
    if LS_FDI_MS_REEL_OLD-S_FDI_MS_XPROC-LIFNR ne LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-LIFNR.
      ME->SET_LIFNR( IF_LIFNR = LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-LIFNR
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Flag - Price Scale modified
    if LS_FDI_MS_REEL_OLD-S_FDI_MS_XPROC-FPSMO ne LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-FPSMO.
      ME->SET_FPSMO( IF_FPSMO = LS_FDI_MS_REEL_NEW-S_FDI_MS_XPROC-FPSMO
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.


*** Set Paper Grade
    if LS_FDI_MS_REEL_OLD-PAPGR ne LS_FDI_MS_REEL_NEW-PAPGR.
      ME->SET_PAPGR( IF_PAPGR = LS_FDI_MS_REEL_NEW-PAPGR
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Grammage
    if LS_FDI_MS_REEL_OLD-S_GRAMM ne LS_FDI_MS_REEL_NEW-S_GRAMM.
      ME->SET_GRAMM( IS_GRAMM = LS_FDI_MS_REEL_NEW-S_GRAMM
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Caliper
    if LS_FDI_MS_REEL_OLD-S_CALIP ne LS_FDI_MS_REEL_NEW-S_CALIP.
      ME->SET_CALIP( IS_CALIP = LS_FDI_MS_REEL_NEW-S_CALIP
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Reel Width
    if LS_FDI_MS_REEL_OLD-S_REWID ne LS_FDI_MS_REEL_NEW-S_REWID.
      ME->SET_REWID( IS_REWID = LS_FDI_MS_REEL_NEW-S_REWID
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.

*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_PRINT = RT_PRINT_COM.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~IS_EDIT_ALLOWED.

    RF_EDITABLE = switch #( ME->IS_DUMMY( ) when ABAP_TRUE then ABAP_TRUE
                                                           else ABAP_FALSE ).

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if IT_PRINT_COM is supplied.
      call transformation ID
           source T_PRINT = IT_PRINT_COM
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_PSCALE_MGR~GET_PSCALE.

    data: LS_PSQTY       type ZVCXI_XCS_S_PSQTY,
          LS_PSQTY_MATCH type ZVCXI_XCS_S_PSQTY,
          LS_UOMCF       type ZVCXI_XCS_S_UOMCF.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_PSCALE       type ref to ZCL_VCXI_XCS_PR_PSCALE,
          LR_PR_PSCALE_MATCH type ref to ZCL_VCXI_XCS_PR_PSCALE.


*** Get Gates of Price Scales
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                     IF_INUSE = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_PSCALE.
          check LR_PR_PSCALE is bound.

***------------------------------------------------------------------------------------------------
***       Get Price Scale Quantity
          move LR_PR_PSCALE->GET_PSQTY( )  to LS_PSQTY.

***       Convert Price Scale Quantity if needed
          if LS_PSQTY-PSQTY_UOM ne IS_PSQTY-PSQTY_UOM.
            read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
            LS_PSQTY-PSQTY_UOM = IS_PSQTY-PSQTY_UOM.
            if LS_UOMCF-UOMCF is not initial.
              LS_PSQTY-PSQTY     = LS_PSQTY-PSQTY / LS_UOMCF-UOMCF.
            else.
              clear: LS_PSQTY-PSQTY.
            endif.
          endif.

***       Check conversion was successful
          check IS_PSQTY-PSQTY_UOM eq LS_PSQTY-PSQTY_UOM.

***       Compare
          if   IS_PSQTY-PSQTY       ge LS_PSQTY-PSQTY and
             ( LS_PSQTY_MATCH-PSQTY le LS_PSQTY-PSQTY or
               LS_PSQTY_MATCH-PSQTY is initial ).
            move LR_PR_PSCALE to LR_PR_PSCALE_MATCH.
            move LS_PSQTY     to LS_PSQTY_MATCH.
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: LR_PR_PSCALE.
      endtry.
    endloop.

***------------------------------------------------------------------------------------------------
*** If Price Scale was found -> Return Price and Price Unit
    check LR_PR_PSCALE_MATCH is bound.
    ES_PRICE = LR_PR_PSCALE_MATCH->GET_PRICE( ).
    ES_PRICP = LR_PR_PSCALE_MATCH->GET_PRICP( ).

*** Check if Conversion is needed for Price Unit
    if ES_PRICP-PRICP_UOM ne IS_PSQTY-PSQTY_UOM.
      read table IT_UOMCF into LS_UOMCF with key UOM = LS_PSQTY-PSQTY_UOM.
      ES_PRICP-PRICP_UOM = IS_PSQTY-PSQTY_UOM.
      if LS_UOMCF-UOMCF is not initial.
        ES_PRICE-PRICE     = ES_PRICE-PRICE * LS_UOMCF-UOMCF.
      endif.
    endif.

  endmethod.
  method ZIF_VCXI_XCS_PSCALE_MGR~IS_CHANGEABLE.

*** Changeable depending on Flag - Price Scale modified
    RF_CHANGEABLE = switch #( ME->GET_FPSMO( ) when ABAP_TRUE      then ABAP_TRUE
                                               when ABAP_FALSE     then ABAP_FALSE
                                               when ABAP_UNDEFINED then ABAP_TRUE ).

  endmethod.
