
class ZCL_VCXI_XCS_SERVICE_CALC definition
  public
  create private .

public section.

  constants C_OPERA_ADD type C value '+'. "#EC NOTEXT
  constants C_OPERA_DIVIDE type C value '/'. "#EC NOTEXT
  constants C_OPERA_EQ type CHAR2 value 'EQ'. "#EC NOTEXT
  constants C_OPERA_GE type CHAR2 value 'GE'. "#EC NOTEXT
  constants C_OPERA_GT type CHAR2 value 'GT'. "#EC NOTEXT
  constants C_OPERA_LE type CHAR2 value 'LE'. "#EC NOTEXT
  constants C_OPERA_LT type CHAR2 value 'LT'. "#EC NOTEXT
  constants C_OPERA_MULTIPLY type C value '*'. "#EC NOTEXT
  constants C_OPERA_NE type CHAR2 value 'NE'. "#EC NOTEXT
  constants C_OPERA_SUBTRACT type C value '-'. "#EC NOTEXT
  constants C_OPROU_COMM type ZVCXI_XCS_OPROU value 'X'. "#EC NOTEXT
  constants C_OPROU_DOWN type ZVCXI_XCS_OPROU value '-'. "#EC NOTEXT
  constants C_OPROU_UP type ZVCXI_XCS_OPROU value '+'. "#EC NOTEXT

  class-methods ROUND
    importing
      !IF_OPROU type ZVCXI_XCS_OPROU
      !IF_DECIP type ZVCXI_XCS_DECIP
    changing
      !CS_CALCV type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .
  class-methods CALC
    importing
      !IS_CALCV_1 type ZVCXI_XCS_S_CALCV
      !IS_CALCV_2 type ZVCXI_XCS_S_CALCV
      !IF_OPERA type C
    returning
      value(RS_CALCV) type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .
  class-methods CALC_WITH_ANY
    importing
      !IF_CALCV_1 type ANY
      !IF_CALCV_UOM_1 type ANY
      !IF_CALCV_2 type ANY
      !IF_CALCV_UOM_2 type ANY
      !IF_OPERA type C
      !IF_UOM type ANY optional
    exporting
      !EF_CALCV type ANY
      !EF_CALCV_UOM type ANY
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  class-methods COMPARE_WITH_ANY
    importing
      !IF_CALCV_1 type ANY
      !IF_CALCV_UOM_1 type ANY
      !IF_CALCV_2 type ANY
      !IF_CALCV_UOM_2 type ANY
      !IF_OPERA type CHAR2
    returning
      value(RF_RESULT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods CONVERT_UNIT
    importing
      !IF_UOM type UNIT
    changing
      !CS_CALCV type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .
  class-methods COMPARE
    importing
      !IS_CALCV_1 type ZVCXI_XCS_S_CALCV
      !IS_CALCV_2 type ZVCXI_XCS_S_CALCV
      !IF_OPERA type CHAR2
    returning
      value(RF_RESULT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_DIMEN,
                  UOM     type UNIT,
                  S_T006D type T006D,
         end of   YS_DIMEN .
  types:
    YT_DIMEN type standard table of YS_DIMEN with default key .

  class-data T_DIMEN type YT_DIMEN .

  class-methods CALC_ADD
    importing
      !IS_CALCV_1 type ZVCXI_XCS_S_CALCV
      !IS_T006D_1 type T006D
      !IS_CALCV_2 type ZVCXI_XCS_S_CALCV
      !IS_T006D_2 type T006D
    returning
      value(RS_CALCV) type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .
  class-methods CALC_DIVIDE
    importing
      !IS_CALCV_1 type ZVCXI_XCS_S_CALCV
      !IS_T006D_1 type T006D
      !IS_CALCV_2 type ZVCXI_XCS_S_CALCV
      !IS_T006D_2 type T006D
    returning
      value(RS_CALCV) type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .
  class-methods CALC_MULTIPLY
    importing
      !IS_CALCV_1 type ZVCXI_XCS_S_CALCV
      !IS_T006D_1 type T006D
      !IS_CALCV_2 type ZVCXI_XCS_S_CALCV
      !IS_T006D_2 type T006D
    returning
      value(RS_CALCV) type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .
  class-methods CALC_PROPOR
    importing
      !IS_CALCV_1 type ZVCXI_XCS_S_CALCV
      !IS_T006D_1 type T006D
      !IS_CALCV_2 type ZVCXI_XCS_S_CALCV
      !IS_T006D_2 type T006D
    returning
      value(RS_CALCV) type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .
  class-methods CALC_SUBTRACT
    importing
      !IS_CALCV_1 type ZVCXI_XCS_S_CALCV
      !IS_T006D_1 type T006D
      !IS_CALCV_2 type ZVCXI_XCS_S_CALCV
      !IS_T006D_2 type T006D
    returning
      value(RS_CALCV) type ZVCXI_XCS_S_CALCV
    raising
      /VCXI/CX_CKX .
  class-methods GET_T006D
    importing
      !IF_UOM type UNIT
    returning
      value(RS_T006D) type T006D
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCS_SERVICE_CALC definition
class ZCL_VCXI_XCS_SERVICE_CALC implementation.
  method CALC.

    data: LS_CALCV_1 type ZVCXI_XCS_S_CALCV,
          LS_CALCV_2 type ZVCXI_XCS_S_CALCV,
          LS_T006D_1 type T006D,
          LS_T006D_2 type T006D.


***--------------------------------------------------------------------------------------
*** Move to local Variables
    move IS_CALCV_1 to LS_CALCV_1.
    move IS_CALCV_2 to LS_CALCV_2.

***--------------------------------------------------------------------------------------
*** No Conversion needed for Simple Calculations (Plus/Minus/Divide with same Unit)
    if LS_CALCV_1-CALCV_UOM ne LS_CALCV_2-CALCV_UOM or
       IF_OPERA             eq C_OPERA_MULTIPLY.

***   Get Dimension Info
      LS_T006D_1 = ZCL_VCXI_XCS_SERVICE_CALC=>GET_T006D( IF_UOM = IS_CALCV_1-CALCV_UOM ).
      LS_T006D_2 = ZCL_VCXI_XCS_SERVICE_CALC=>GET_T006D( IF_UOM = IS_CALCV_2-CALCV_UOM ).

***   Convert to MSI Unit
      if LS_T006D_1-MSSIE is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = LS_T006D_1-MSSIE
                                                 changing  CS_CALCV = LS_CALCV_1 ).
      endif.

***   Convert to MSI Unit
      if LS_T006D_2-MSSIE is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = LS_T006D_2-MSSIE
                                                 changing  CS_CALCV = LS_CALCV_2 ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Calculate
    case IF_OPERA.
      when C_OPERA_ADD.
        RS_CALCV = ZCL_VCXI_XCS_SERVICE_CALC=>CALC_ADD( IS_CALCV_1 = LS_CALCV_1
                                                        IS_T006D_1 = LS_T006D_1
                                                        IS_CALCV_2 = LS_CALCV_2
                                                        IS_T006D_2 = LS_T006D_2 ).

      when C_OPERA_SUBTRACT.
        RS_CALCV = ZCL_VCXI_XCS_SERVICE_CALC=>CALC_SUBTRACT( IS_CALCV_1 = LS_CALCV_1
                                                             IS_T006D_1 = LS_T006D_1
                                                             IS_CALCV_2 = LS_CALCV_2
                                                             IS_T006D_2 = LS_T006D_2 ).

      when C_OPERA_MULTIPLY.
        if LS_T006D_2-DIMID ne 'PROPOR'.
          RS_CALCV = ZCL_VCXI_XCS_SERVICE_CALC=>CALC_MULTIPLY( IS_CALCV_1 = LS_CALCV_1
                                                               IS_T006D_1 = LS_T006D_1
                                                               IS_CALCV_2 = LS_CALCV_2
                                                               IS_T006D_2 = LS_T006D_2 ).
        else.
          RS_CALCV = ZCL_VCXI_XCS_SERVICE_CALC=>CALC_PROPOR( IS_CALCV_1 = LS_CALCV_1
                                                             IS_T006D_1 = LS_T006D_1
                                                             IS_CALCV_2 = LS_CALCV_2
                                                             IS_T006D_2 = LS_T006D_2 ).
        endif.

      when C_OPERA_DIVIDE.
        RS_CALCV = ZCL_VCXI_XCS_SERVICE_CALC=>CALC_DIVIDE( IS_CALCV_1 = LS_CALCV_1
                                                           IS_T006D_1 = LS_T006D_1
                                                           IS_CALCV_2 = LS_CALCV_2
                                                           IS_T006D_2 = LS_T006D_2 ).
    endcase.

  endmethod.
method CALC_ADD.

  if IS_CALCV_1-CALCV_UOM eq IS_CALCV_2-CALCV_UOM.
    RS_CALCV-CALCV     = IS_CALCV_1-CALCV + IS_CALCV_2-CALCV.
    RS_CALCV-CALCV_UOM = IS_CALCV_1-CALCV_UOM.
  else.
    raise exception type /VCXI/CX_CKX.
  endif.

endmethod.
method CALC_DIVIDE.

  data:  LF_DIMID  type DIMID.
  data:  LS_T006D  type T006D.

***--------------------------------------------------------------------------------------
*** Simple Division in case of equal Unit -> no unit as result
  if IS_CALCV_1-CALCV_UOM eq IS_CALCV_2-CALCV_UOM.
    RS_CALCV-CALCV = IS_CALCV_1-CALCV / IS_CALCV_2-CALCV.
    clear RS_CALCV-CALCV_UOM.
    return.
  endif.

***--------------------------------------------------------------------------------------
*** Both Dimensions need an SI Unit
  if IS_T006D_1-MSSIE is initial or
     IS_T006D_2-MSSIE is initial.
    raise exception type /VCXI/CX_CKX.
  endif.

*** Find new Dimension
  LS_T006D-LENG  = IS_T006D_1-LENG  - IS_T006D_2-LENG.
  LS_T006D-MASS  = IS_T006D_1-MASS  - IS_T006D_2-MASS.
  LS_T006D-TIMEX = IS_T006D_1-TIMEX - IS_T006D_2-TIMEX.
  LS_T006D-ECURR = IS_T006D_1-ECURR - IS_T006D_2-ECURR.
  LS_T006D-TEMP  = IS_T006D_1-TEMP  - IS_T006D_2-TEMP.
  LS_T006D-MOLQU = IS_T006D_1-MOLQU - IS_T006D_2-MOLQU.
  LS_T006D-LIGHT = IS_T006D_1-LIGHT - IS_T006D_2-LIGHT.

  call function 'DIMENSION_GET'
    exporting
      LENGTH              = LS_T006D-LENG
      MASS                = LS_T006D-MASS
      TIME                = LS_T006D-TIMEX
      ELECTRIC_CURRENT    = LS_T006D-ECURR
      TEMPERATURE         = LS_T006D-TEMP
      AMOUNT_OF_SUBSTANCE = LS_T006D-MOLQU
      LUMINOUS_INTENSITY  = LS_T006D-LIGHT
    importing
      DIMID               = LF_DIMID
    exceptions
      DIMENSION_NOT_FOUND = 1
      others              = 2.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Get Dimensions Info
  call function 'T006D_READ'
    exporting
      DIMID      = LF_DIMID
      FLG_ERROR  = 'X'
      FLG_STRUCT = 'X'
      FLG_TEXT   = ' '
      SPRAS      = SY-LANGU
    importing
      STRUCT     = LS_T006D
    exceptions
      NO_ENTRY   = 1
      NO_TEXT    = 2
      others     = 3.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Calculate Value
  RS_CALCV-CALCV     = IS_CALCV_1-CALCV / IS_CALCV_2-CALCV.
  RS_CALCV-CALCV_UOM = LS_T006D-MSSIE.

endmethod.
method CALC_MULTIPLY.

  data:  LF_DIMID  type DIMID.
  data:  LS_T006D  type T006D.

*** Both Dimensions need an SI Unit
  if IS_T006D_1-MSSIE is initial or
     IS_T006D_2-MSSIE is initial.
    raise exception type /VCXI/CX_CKX.
  endif.

*** Find new Dimension
  LS_T006D-LENG  = IS_T006D_1-LENG  + IS_T006D_2-LENG.
  LS_T006D-MASS  = IS_T006D_1-MASS  + IS_T006D_2-MASS.
  LS_T006D-TIMEX = IS_T006D_1-TIMEX + IS_T006D_2-TIMEX.
  LS_T006D-ECURR = IS_T006D_1-ECURR + IS_T006D_2-ECURR.
  LS_T006D-TEMP  = IS_T006D_1-TEMP  + IS_T006D_2-TEMP.
  LS_T006D-MOLQU = IS_T006D_1-MOLQU + IS_T006D_2-MOLQU.
  LS_T006D-LIGHT = IS_T006D_1-LIGHT + IS_T006D_2-LIGHT.

  call function 'DIMENSION_GET'
    exporting
      LENGTH              = LS_T006D-LENG
      MASS                = LS_T006D-MASS
      TIME                = LS_T006D-TIMEX
      ELECTRIC_CURRENT    = LS_T006D-ECURR
      TEMPERATURE         = LS_T006D-TEMP
      AMOUNT_OF_SUBSTANCE = LS_T006D-MOLQU
      LUMINOUS_INTENSITY  = LS_T006D-LIGHT
    importing
      DIMID               = LF_DIMID
    exceptions
      DIMENSION_NOT_FOUND = 1
      others              = 2.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Get Dimensions Info
  call function 'T006D_READ'
    exporting
      DIMID      = LF_DIMID
      FLG_ERROR  = 'X'
      FLG_STRUCT = 'X'
      FLG_TEXT   = ' '
      SPRAS      = SY-LANGU
    importing
      STRUCT     = LS_T006D
    exceptions
      NO_ENTRY   = 1
      NO_TEXT    = 2
      others     = 3.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Calculate Value
  RS_CALCV-CALCV     = IS_CALCV_1-CALCV * IS_CALCV_2-CALCV.
  RS_CALCV-CALCV_UOM = LS_T006D-MSSIE.

endmethod.
method CALC_PROPOR.

*** Both Dimensions need an SI Unit
  if IS_T006D_2-DIMID ne 'PROPOR'.
    raise exception type /VCXI/CX_CKX.
  endif.

*** Calculate Value
  RS_CALCV-CALCV     = IS_CALCV_1-CALCV * IS_CALCV_2-CALCV.
  RS_CALCV-CALCV_UOM = IS_CALCV_1-CALCV_UOM.

endmethod.
method CALC_SUBTRACT.

  if IS_CALCV_1-CALCV_UOM eq IS_CALCV_2-CALCV_UOM.
    RS_CALCV-CALCV     = IS_CALCV_1-CALCV - IS_CALCV_2-CALCV.
    RS_CALCV-CALCV_UOM = IS_CALCV_1-CALCV_UOM.
  else.
    raise exception type /VCXI/CX_CKX.
  endif.

endmethod.
method CALC_WITH_ANY.

  data:  LS_CALCV_1                     type        ZVCXI_XCS_S_CALCV,
         LS_CALCV_2                     type        ZVCXI_XCS_S_CALCV,
         LS_CALCV                       type        ZVCXI_XCS_S_CALCV.
  data:  LR_CX_SY_CONVERSION_OVERFLOW   type ref to CX_SY_CONVERSION_OVERFLOW.

  try.
***   Fill Input Structures
      move IF_CALCV_1     to LS_CALCV_1-CALCV.
      move IF_CALCV_UOM_1 to LS_CALCV_1-CALCV_UOM.

      move IF_CALCV_2     to LS_CALCV_2-CALCV.
      move IF_CALCV_UOM_2 to LS_CALCV_2-CALCV_UOM.

***   Calculate Value
      LS_CALCV = ZCL_VCXI_XCS_SERVICE_CALC=>CALC( IS_CALCV_1 = LS_CALCV_1
                                                  IS_CALCV_2 = LS_CALCV_2
                                                  IF_OPERA   = IF_OPERA ).

***   Convert to specific Output Unit
      if IF_UOM is supplied.
        ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = IF_UOM
                                                 changing  CS_CALCV = LS_CALCV ).
      endif.

***   Fill Exporting Fields
      move LS_CALCV-CALCV      to EF_CALCV.
      move LS_CALCV-CALCV_UOM  to EF_CALCV_UOM.

    catch CX_SY_CONVERSION_OVERFLOW into LR_CX_SY_CONVERSION_OVERFLOW.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CONVERSION_OVERFLOW ).
  endtry.

endmethod.
method COMPARE.

  data:  LS_CALCV_1  type ZVCXI_XCS_S_CALCV,
         LS_CALCV_2  type ZVCXI_XCS_S_CALCV,
         LS_T006D_1  type T006D,
         LS_T006D_2  type T006D.

***--------------------------------------------------------------------------------------
*** Move to local Variables
  move IS_CALCV_1 to LS_CALCV_1.
  move IS_CALCV_2 to LS_CALCV_2.

***--------------------------------------------------------------------------------------
*** No Conversion needed for same Unit
  if LS_CALCV_1-CALCV_UOM ne LS_CALCV_2-CALCV_UOM.

*** Get Dimension Info
    LS_T006D_1 = ZCL_VCXI_XCS_SERVICE_CALC=>GET_T006D( IF_UOM = IS_CALCV_1-CALCV_UOM ).
    LS_T006D_2 = ZCL_VCXI_XCS_SERVICE_CALC=>GET_T006D( IF_UOM = IS_CALCV_2-CALCV_UOM ).

*** Convert to MSI Unit
    if LS_T006D_1-MSSIE is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = LS_T006D_1-MSSIE
                                               changing  CS_CALCV = LS_CALCV_1 ).
    endif.

*** Convert to MSI Unit
    if LS_T006D_2-MSSIE is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = LS_T006D_2-MSSIE
                                               changing  CS_CALCV = LS_CALCV_2 ).
    endif.

  endif.

***--------------------------------------------------------------------------------------
*** Compare
  case IF_OPERA.
    when C_OPERA_EQ.
      if LS_CALCV_1-CALCV eq LS_CALCV_2-CALCV.
        move ABAP_TRUE to RF_RESULT.
      endif.

    when C_OPERA_NE.
      if LS_CALCV_1-CALCV ne LS_CALCV_2-CALCV.
        move ABAP_TRUE to RF_RESULT.
      endif.

    when C_OPERA_LT.
      if LS_CALCV_1-CALCV lt LS_CALCV_2-CALCV.
        move ABAP_TRUE to RF_RESULT.
      endif.

    when C_OPERA_GT.
      if LS_CALCV_1-CALCV gt LS_CALCV_2-CALCV.
        move ABAP_TRUE to RF_RESULT.
      endif.

    when C_OPERA_LE.
      if LS_CALCV_1-CALCV le LS_CALCV_2-CALCV.
        move ABAP_TRUE to RF_RESULT.
      endif.

    when C_OPERA_GE.
      if LS_CALCV_1-CALCV ge LS_CALCV_2-CALCV.
        move ABAP_TRUE to RF_RESULT.
      endif.

  endcase.

endmethod.
method COMPARE_WITH_ANY.

  data:  LS_CALCV_1                     type        ZVCXI_XCS_S_CALCV,
         LS_CALCV_2                     type        ZVCXI_XCS_S_CALCV.
  data:  LR_CX_SY_CONVERSION_OVERFLOW   type ref to CX_SY_CONVERSION_OVERFLOW.

  try.
***   Fill Input Structures
      move IF_CALCV_1     to LS_CALCV_1-CALCV.
      move IF_CALCV_UOM_1 to LS_CALCV_1-CALCV_UOM.

      move IF_CALCV_2     to LS_CALCV_2-CALCV.
      move IF_CALCV_UOM_2 to LS_CALCV_2-CALCV_UOM.

***   Compare Value
      RF_RESULT = ZCL_VCXI_XCS_SERVICE_CALC=>COMPARE( IS_CALCV_1 = LS_CALCV_1
                                                      IS_CALCV_2 = LS_CALCV_2
                                                      IF_OPERA   = IF_OPERA ).

    catch CX_SY_CONVERSION_OVERFLOW into LR_CX_SY_CONVERSION_OVERFLOW.
      /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_CONVERSION_OVERFLOW ).
  endtry.

endmethod.
method CONVERT_UNIT.

*** Conversion is only needed for different Units
  check CS_CALCV-CALCV_UOM ne IF_UOM.

  call function 'UNIT_CONVERSION_SIMPLE'
    exporting
      INPUT                = CS_CALCV-CALCV
      UNIT_IN              = CS_CALCV-CALCV_UOM
      UNIT_OUT             = IF_UOM
    importing
      OUTPUT               = CS_CALCV-CALCV
    exceptions
      CONVERSION_NOT_FOUND = 1
      DIVISION_BY_ZERO     = 2
      INPUT_INVALID        = 3
      OUTPUT_INVALID       = 4
      OVERFLOW             = 5
      TYPE_INVALID         = 6
      UNITS_MISSING        = 7
      UNIT_IN_NOT_FOUND    = 8
      UNIT_OUT_NOT_FOUND   = 9
      others               = 10.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  CS_CALCV-CALCV_UOM = IF_UOM.

endmethod.
method GET_T006D.

  data:  LF_DIMID    type DIMID.
  data:  LS_DIMEN    type YS_DIMEN.

  read table T_DIMEN into LS_DIMEN with key UOM = IF_UOM.
  if SY-SUBRC ne 0.
*** Get Dimensions of Unit
    call function 'DIMENSION_GET_FOR_UNIT'
      exporting
        UNIT           = IF_UOM
      importing
        DIMENSION      = LF_DIMID
      exceptions
        UNIT_NOT_FOUND = 1
        others         = 2.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Dimensions Info
    call function 'T006D_READ'
      exporting
        DIMID      = LF_DIMID
        FLG_ERROR  = 'X'
        FLG_STRUCT = 'X'
        FLG_TEXT   = ' '
        SPRAS      = SY-LANGU
      importing
        STRUCT     = RS_T006D
      exceptions
        NO_ENTRY   = 1
        NO_TEXT    = 2
        others     = 3.
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Add to Buffer
    move IF_UOM   to LS_DIMEN-UOM.
    move RS_T006D to LS_DIMEN-S_T006D.
    append LS_DIMEN to T_DIMEN.
  else.
    move LS_DIMEN-S_T006D to RS_T006D.
  endif.

*** In case of Proportions delete not needed conversion data
  if RS_T006D-DIMID eq 'PROPOR'.
    clear: RS_T006D-LENG, RS_T006D-MASS,  RS_T006D-TIMEX, RS_T006D-ECURR,
           RS_T006D-TEMP, RS_T006D-MOLQU, RS_T006D-LIGHT.
  endif.

endmethod.
method ROUND.

  call function 'ROUND'
    exporting
      DECIMALS      = IF_DECIP
      INPUT         = CS_CALCV-CALCV
      SIGN          = IF_OPROU
    importing
      OUTPUT        = CS_CALCV-CALCV
    exceptions
      INPUT_INVALID = 1
      OVERFLOW      = 2
      TYPE_INVALID  = 3
      others        = 4.
  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
