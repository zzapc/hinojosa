
class ZCL_VCXI_XCI_BOB_BOM definition
  public
  create public .

public section.

  types:
    YT_STKO_EX type standard table of STKO_API02 .
  types:
    YT_STPO_IN type standard table of STPO_API01 .
  types:
    YT_STPO_EX type standard table of STPO_API02 .

  data F_WERKS type WERKS_D read-only .
  data F_MATNR type MATNR read-only .

  methods CLOSE
    importing
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
  methods MAINTAIN_ITEM
    importing
      !IS_STPO type STPO_API02
    exporting
      !ES_STPO type STPO_API02
    raising
      /VCXI/CX_CKX .
  class-methods CHECK_EXISTS
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_STLAN type STLAN
    exporting
      !ES_STZUB type STZUB
      !EF_STLAL type STALT
    returning
      value(RF_EXISTS) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods OPEN
    importing
      !IF_STLAN type STLAN
      !IF_STLAL type STLAL optional
      !IF_AENNR type AENNR optional
      !IF_DATUV type DATUV default SY-DATUM
      !IF_NOCHGDOC type FLNOCHGDOC default ABAP_FALSE
    exporting
      !ES_STKO type STKO_API02
      !ET_STPO type YT_STPO_EX
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods ASSIGN_MAT
    importing
      !IF_MATNR type MATNR
      !IF_STLAN type STLAN
    exporting
      !EF_ALREADY_ASSIGNED type ABAP_BOOL
      !ES_BAPIRET2 type BAPIRET2
    raising
      /VCXI/CX_CKX .
  methods CREATE
    importing
      !IF_STLAN type STLAN
      !IF_STLAL type STLAL optional
      !IF_AENNR type AENNR optional
      !IF_DATUV type DATUV default SY-DATUM
      !IF_NOCHGDOC type FLNOCHGDOC default ABAP_FALSE
      !IS_STKO type STKO_API01
      !IT_STPO type YT_STPO_IN
      !IF_COMMIT type ABAP_BOOL default ABAP_TRUE
    returning
      value(RF_STNUM) type STNUM
    raising
      /VCXI/CX_CKX .
  methods READ
    importing
      !IF_STLAN type STLAN
      !IF_STLAL type STLAL optional
      !IF_AENNR type AENNR optional
      !IF_DATUV type DATUV default SY-DATUM
    exporting
      !ET_STKO type YT_STKO_EX
      !ET_STPO type YT_STPO_EX
    raising
      /VCXI/CX_CKX .
protected section.

  methods DEQUEUE
    raising
      /VCXI/CX_CKX .
  methods ENQUEUE
    raising
      /VCXI/CX_CKX .
  methods ADD_MAT_ASSIGN
    importing
      !IF_MATNR type MATNR
      !IF_STLAL type STLAL
      !IS_STZUB type STZUB
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCI_BOB_BOM definition
class ZCL_VCXI_XCI_BOB_BOM implementation.
  method ADD_MAT_ASSIGN.

    data: LT_EQSTB type table of EQSTB,
          LT_MASTB type table of MASTB,
          LT_TPSTB type table of TPSTB.


*** Prepare MAST Entry of Assignment
    LT_MASTB = value #( ( MANDT = SY-MANDT
                          MATNR = IF_MATNR
                          WERKS = ME->F_WERKS
                          STLAN = IS_STZUB-STLAN
                          STLNR = IS_STZUB-STLNR
                          STLAL = IF_STLAL
                          CSLTY = 'X'     "Indicator: configured material (material variant)
                          VBKZ  = 'I'     "Update indicator
                      ) ).

*** Do Update
    call function 'ALLOCATION_POST'
      in update task
      exporting
        ESTZUB = value STZUB( STLTY = IS_STZUB-STLTY )
      tables
        TEQSTB = LT_EQSTB
        TMASTB = LT_MASTB
        TTPSTB = LT_TPSTB.

    commit work and wait.

*** Reset Global variables
    call function 'CS_BT_INIT'.

  endmethod.
  method ASSIGN_MAT.

    data: LF_STLAL type STALT.
    data: LS_STZUB type STZUB.


    clear: EF_ALREADY_ASSIGNED,
           ES_BAPIRET2.

***--------------------------------------------------------------------------------------
*** Check if material is already assigned to BOM
    if ZCL_VCXI_XCI_BOB_BOM=>CHECK_EXISTS( IF_MATNR  = IF_MATNR
                                           IF_WERKS  = ME->F_WERKS
                                           IF_STLAN  = IF_STLAN ).
***   Material & plant & is already assigned to BOM.
      move ABAP_TRUE to EF_ALREADY_ASSIGNED.
      call function 'BALW_BAPIRETURN_GET2'
        exporting
          TYPE   = 'I'
          CL     = 'ZVCXI_XCI'
          NUMBER = '301'
          PAR1   = conv SYMSGV( IF_MATNR )
          PAR2   = conv SYMSGV( ME->F_WERKS )
        importing
          RETURN = ES_BAPIRET2.
      exit.
    endif.


*** Get BOM data for configurable material
    if not ZCL_VCXI_XCI_BOB_BOM=>CHECK_EXISTS( exporting IF_MATNR  = ME->F_MATNR
                                                         IF_WERKS  = ME->F_WERKS
                                                         IF_STLAN  = IF_STLAN
                                               importing ES_STZUB  = LS_STZUB
                                                         EF_STLAL  = LF_STLAL ).
***   Configurable Material & plant & has no BOM.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'I'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '302'
                                            IF_MSGV1 = ME->F_MATNR
                                            IF_MSGV2 = ME->F_WERKS ).
    endif.

***--------------------------------------------------------------------------------------
*** Enqueue BOM
    ME->ENQUEUE( ).

**** Assign material to BOM
    ME->ADD_MAT_ASSIGN( IF_MATNR = IF_MATNR
                        IF_STLAL = LF_STLAL
                        IS_STZUB = LS_STZUB ).

*** Dequeue BOM for configurable material
    ME->DEQUEUE( ).

****--------------------------------------------------------------------------------------
**** Check that material was assigned successfully
    if not ZCL_VCXI_XCI_BOB_BOM=>CHECK_EXISTS( IF_MATNR  = IF_MATNR
                                               IF_WERKS  = ME->F_WERKS
                                               IF_STLAN  = IF_STLAN ).
***   Material & plant & could not be assigned to BOM.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'I'
                                            IF_MSGID = 'ZVCXI_XCI'
                                            IF_MSGNO = '303'
                                            IF_MSGV1 = IF_MATNR
                                            IF_MSGV2 = ME->F_WERKS ).
    else.
***   BOM Assignment done for Material &1 in plant &2.
      call function 'BALW_BAPIRETURN_GET2'
        exporting
          TYPE   = 'S'
          CL     = 'ZVCXI_XCI'
          NUMBER = '304'
          PAR1   = conv SYMSGV( IF_MATNR )
          PAR2   = conv SYMSGV( ME->F_WERKS )
        importing
          RETURN = ES_BAPIRET2.
    endif.

  endmethod.
  method CHECK_EXISTS.

    data: LF_ETRTYP type TCS05-TRTYP.


    clear ES_STZUB.

    check IF_MATNR is not initial and
          IF_WERKS is not initial.

*** Get BOM Data
    call function 'CS_BT_MASTB_READ'
      exporting
        EMATNR          = IF_MATNR
        ESTLAN          = IF_STLAN
        ETRTYP          = LF_ETRTYP
        EWERKS          = IF_WERKS
      importing
        ASTLAL          = EF_STLAL
        ASTZUB          = ES_STZUB
      exceptions
        MAST_NRFD       = 1
        STLAL_FOUND     = 2
        STLAL_NOT_FOUND = 3
        STZU_NRFD       = 4
        others          = 5.

    if SY-SUBRC eq 0.
***   Material & plant & is already assigned to BOM.
      RF_EXISTS = ABAP_TRUE.
    endif.

  endmethod.
  method CLOSE.

*** Save changes of BOM
    call function 'CSAP_MAT_BOM_CLOSE'
      exporting
        FL_COMMIT_AND_WAIT = IF_COMMIT
      exceptions
        ERROR              = 1.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method CONSTRUCTOR.

    ME->F_MATNR = IF_MATNR.
    ME->F_WERKS = IF_WERKS.

  endmethod.
  method CREATE.

    data: LS_MBOM type CSAP_MBOM.


*** Prepare Data for API Call
    LS_MBOM-MATNR = ME->F_MATNR.
    LS_MBOM-WERKS = ME->F_WERKS.
    LS_MBOM-STLAN = IF_STLAN.
    LS_MBOM-STLAL = IF_STLAL.
    LS_MBOM-DATUV = |{ IF_DATUV date = user }|.

*** Create BOM
    call function 'CSAP_MAT_BOM_CREATE'
      exporting
        MATERIAL           = LS_MBOM-MATNR
        PLANT              = LS_MBOM-WERKS
        BOM_USAGE          = LS_MBOM-STLAN
        ALTERNATIVE        = LS_MBOM-STLAL
        VALID_FROM         = LS_MBOM-DATUV
        CHANGE_NO          = IF_AENNR
        I_STKO             = IS_STKO
        FL_NO_CHANGE_DOC   = IF_NOCHGDOC
        FL_COMMIT_AND_WAIT = IF_COMMIT
      importing
        BOM_NO             = RF_STNUM
      tables
        T_STPO             = IT_STPO
      exceptions
        ERROR              = 1.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method DEQUEUE.

    call function 'DEQUEUE_ECMASTE'
      exporting
        MATNR = ME->F_MATNR
        WERKS = ME->F_WERKS.

  endmethod.
  method ENQUEUE.

    call function 'ENQUEUE_ECMASTE'
      exporting
        MATNR        = ME->F_MATNR
        WERKS        = ME->F_WERKS
        _WAIT        = ABAP_TRUE
      exceptions
        FOREIGN_LOCK = 1
        others       = 2.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( IF_TEMP = ABAP_TRUE ).
    endif.

  endmethod.
  method MAINTAIN_ITEM.

*** Maintain the BOM
    call function 'CSAP_BOM_ITEM_MAINTAIN'
      exporting
        I_STPO = IS_STPO
      importing
        O_STPO = ES_STPO
      exceptions
        ERROR  = 1.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method OPEN.

    data: LS_MBOM type CSAP_MBOM.


    clear: ES_STKO,
           ET_STPO.

*** Prepare Data for API Call
    LS_MBOM-MATNR = ME->F_MATNR.
    LS_MBOM-WERKS = ME->F_WERKS.
    LS_MBOM-STLAN = IF_STLAN.
    LS_MBOM-STLAL = IF_STLAL.
    LS_MBOM-DATUV = |{ IF_DATUV date = user }|.

*** Open BOM for Changes
    do 10 times.
      call function 'CSAP_MAT_BOM_OPEN'
        exporting
          MATERIAL         = LS_MBOM-MATNR
          PLANT            = LS_MBOM-WERKS
          BOM_USAGE        = LS_MBOM-STLAN
          VALID_FROM       = LS_MBOM-DATUV
          FL_NO_CHANGE_DOC = IF_NOCHGDOC
        importing
          O_STKO           = ES_STKO
        tables
          T_STPO           = ET_STPO
        exceptions
          ERROR            = 1
          others           = 2.

      if SY-SUBRC = 0.
        exit.
      endif.
      wait up to 1 seconds.
    enddo.

    if ES_STKO is initial.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method READ.

    data: LS_MBOM type CSAP_MBOM.


    clear: ET_STKO,
           ET_STPO.

*** Prepare Data for API Call
    LS_MBOM-MATNR = ME->F_MATNR.
    LS_MBOM-WERKS = ME->F_WERKS.
    LS_MBOM-STLAN = IF_STLAN.
    LS_MBOM-STLAL = IF_STLAL.
    LS_MBOM-DATUV = |{ IF_DATUV date = user }|.

*** Read BOM
    call function 'CSAP_MAT_BOM_READ'
      exporting
        MATERIAL    = LS_MBOM-MATNR
        PLANT       = LS_MBOM-WERKS
        BOM_USAGE   = LS_MBOM-STLAN
        ALTERNATIVE = LS_MBOM-STLAL
        VALID_FROM  = LS_MBOM-DATUV
*       VALID_TO    =
        CHANGE_NO   = IF_AENNR
      tables
        T_STKO      = ET_STKO
        T_STPO      = ET_STPO
      exceptions
        ERROR       = 1.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
