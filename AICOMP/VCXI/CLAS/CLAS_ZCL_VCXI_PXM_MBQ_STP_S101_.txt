
class ZCL_VCXI_PXM_MBQ_STP_S101 definition
  public
  inheriting from ZCL_VCXI_XCM_MBQ_STP_S101
  create public .

public section.

  constants C_SOKEY_SB type ZVCXI_XCM_MBQ_SOKEY value 'PX_SB' ##NO_TEXT.
protected section.

  types:
    begin of YS_XCOMP_BUFFER,
      R_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
      DISST         type /VCXI/VKC_DISST,
      POSID         type /VCXI/VKSR_POSID,
    end   of YS_XCOMP_BUFFER .
  types:
    YT_XCOMP_BUFFER type table of YS_XCOMP_BUFFER .
  types:
    begin of YS_XCON_BUFFER,
      R_SVCEL_XCOMP_OUT type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
      R_SVCEL_XCONO     type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
      R_SVCEL_XCOMP_IN  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
      R_SVCEL_XCONI     type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
    end   of YS_XCON_BUFFER .
  types:
    YT_XCON_BUFFER type table of YS_XCON_BUFFER .

  data T_XCOMP_BUFFER type YT_XCOMP_BUFFER .
  data T_XCON_BUFFER type YT_XCON_BUFFER .

  methods GET_XCOMP_XCON
    importing
      !IR_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
      !IT_XCONA type ZVCXI_PXSS_TT_XCONA
    exporting
      !ET_SVCEL_XCONI type /VCXI/CKX_TT_OBJECT
      !ET_SVCEL_XCONO type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_DOC_MGR
    importing
      !IR_SVCEL_DOC_MGR type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    exporting
      !ET_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI
    raising
      /VCXI/CX_CKX .
  methods ANALYZE_SOV
    importing
      !IR_SVCEL_SOV type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods SET_XCON_DISST
    importing
      !IR_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT optional
      !IF_DISST type /VCXI/VKC_DISST
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_DOC_MGR
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    returning
      value(RR_SVCEL_DOC_MGR) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_SBH
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    returning
      value(RR_SVCEL_SBH) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods GET_SVCEL_SOV
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
    returning
      value(RR_SVCEL_SOV) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .

  methods ANALYZE_CONFIG
    redefinition .
  methods GET_ACTDAT_CMIR
    redefinition .
  methods GET_ACTDAT_CSB
    redefinition .
  methods GET_MATDAT_MAKT
    redefinition .
  methods GET_SOKEY_SB
    redefinition .
  methods GET_MATDAT_MARA
    redefinition .
private section.
endclass. "ZCL_VCXI_PXM_MBQ_STP_S101 definition
class ZCL_VCXI_PXM_MBQ_STP_S101 implementation.
  method ANALYZE_CONFIG.

    data: LF_FGCNT type I.
    data: LS_XCOMP_BUFFER type YS_XCOMP_BUFFER.
    data: LT_MATLI type ZVCXI_XCM_MBQ_TT_MATLI,
          LT_DMSLI type ZVCXI_XCM_MBQ_TT_DMSLI.
    data: LR_BL_XCOMP type ref to ZCL_VCXI_PXM_MBQ_BL_XCOMP.
    field-symbols: <S_MATLI> type ZVCXI_XCM_MBQ_S_MATLI,
                   <S_DMSLI> type ZVCXI_XCM_MBQ_S_DMSLI.


***--------------------------------------------------------------------------------------
*** Analyze Specification Overview (incl. Dispo Level for Components)
    ME->ANALYZE_SOV( IR_SVCEL_SOV = ME->GET_SVCEL_SOV( IR_SVC = IR_SVC ) ).

***--------------------------------------------------------------------------------------
*** Analyze X-Components
    sort ME->T_XCOMP_BUFFER by DISST descending POSID ascending.
    loop at ME->T_XCOMP_BUFFER into LS_XCOMP_BUFFER.
***   Trigger Analyzes in "Sub-Class"
      LR_BL_XCOMP = ZCL_VCXI_PXM_MBQ_BL_XCOMP=>FACTORY( IR_BOB_SDOC    = ME->R_DCO_INPUT->R_BOB_SDOC
                                                        IF_POSNR       = ME->R_DCO_INPUT->F_POSNR
                                                        IR_SVCEL_XCOMP = LS_XCOMP_BUFFER-R_SVCEL_XCOMP ).
      LR_BL_XCOMP->ANALYZE( exporting IF_DISST = LS_XCOMP_BUFFER-DISST
                            importing ET_MATLI = LT_MATLI
                                      ET_DMSLI = LT_DMSLI ).

***   Add to overall material list and assign unique counter
      loop at LT_MATLI assigning <S_MATLI>.
        <S_MATLI>-MLCNT = LINES( ET_MATLI ) + 1.
        insert <S_MATLI> into table ET_MATLI.
        if <S_MATLI>-DISST eq 0.
          LF_FGCNT += 1.
        endif.
      endloop.

***   Add to overall DMS Document list and assign unique counter
      loop at LT_DMSLI assigning <S_DMSLI>.
        <S_DMSLI>-DLCNT = LINES( ET_DMSLI ) + 1.
        insert <S_DMSLI> into table ET_DMSLI.
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Analyze DMS Document Manager
    ME->ANALYZE_DOC_MGR( exporting IR_SVCEL_DOC_MGR = ME->GET_SVCEL_DOC_MGR( IR_SVC = IR_SVC )
                         importing ET_DMSLI         = LT_DMSLI ).

*** Add to overall DMS Document list and assign unique counter
    loop at LT_DMSLI assigning <S_DMSLI>.
      <S_DMSLI>-DLCNT = LINES( ET_DMSLI ) + 1.
      insert <S_DMSLI> into table ET_DMSLI.
    endloop.

***--------------------------------------------------------------------------------------
*** Add Sales BOM if more than 1 Finished Good has been configured
    if LF_FGCNT gt 1.
***   Increase DISST by 1
      loop at ET_MATLI assigning <S_MATLI>.
        <S_MATLI>-DISST += 1.
      endloop.

***   Add Material List Entry for Sales BOM
      ME->ADD_MATLI_SB( exporting IR_SVCEL_SOURCE = ME->GET_SVCEL_SBH( IR_SVC = IR_SVC )
                        changing  CT_MATLI        = ET_MATLI ).
    endif.

***--------------------------------------------------------------------------------------
*** Create Position for Main Materials
    loop at ET_MATLI assigning <S_MATLI> where DISST eq 0.
      append value #( ACTID = ZCL_VCXI_XCM_MBQ_CUST=>C_ACTID_SDPOS ) to <S_MATLI>-T_ACTCON.
    endloop.

  endmethod.
  method ANALYZE_DOC_MGR.

    data: LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL_DOC type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_EA_DOC    type ref to ZCL_VCXI_XCSS_EA_DOC.


    clear ET_DMSLI.

***--------------------------------------------------------------------------------------
*** Analyze DMS Documents
    loop at IR_SVCEL_DOC_MGR->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      try.
          LR_SVCEL_DOC ?= LR_OBJECT.
          LR_EA_DOC    ?= LR_SVCEL_DOC->GET_CLSEA( ).
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
      check LR_EA_DOC is bound.

***   Assign only DMS Documents that are not used somewhere to Finished Goods
      check LR_EA_DOC->GET_DOC_USER( ) is initial.
      loop at ME->T_XCOMP_BUFFER into data(LS_XCOMP_BUFFER)
                                where DISST = 0.
***     Add existing DMS Document with Activities based on Source Key
        ME->ADD_DMSLI( exporting IF_SOKEY        = C_SOKEY_DMS_DOC
                                 IR_SVCEL_SOURCE = LS_XCOMP_BUFFER-R_SVCEL_XCOMP
                                 IF_WERKS        = ME->R_DCO_INPUT->R_BOB_SDOC->T_VBAP[ POSNR = ME->R_DCO_INPUT->F_POSNR ]-WERKS
                                 IS_DOC_KEY      = LR_EA_DOC->GET_DOC_KEY( )
                       changing  CT_DMSLI        = ET_DMSLI ).
      endloop.
    endloop.

  endmethod.
  method ANALYZE_SOV.

    data: LF_XML   type          STRING,
          LF_GXCON type          ZVCXI_PXSS_GXCON.
    data: LS_PARAM type          /VCXI/VKSR_S_PARAM,
          LS_XCONG type          ZVCXI_PXSS_S_XCONG,
          LS_LEOKY type          /VCXI/VKSR_S_LEOKY.
    data: LT_XCONA       type ZVCXI_PXSS_TT_XCONA,
          LT_SVCEL_XCONI type /VCXI/CKX_TT_OBJECT,
          LT_SVCEL_XCONO type /VCXI/CKX_TT_OBJECT,
          LT_SVCEL_XCOMP type /VCXI/CKX_TT_OBJECT.
    data: LR_OBJECT      type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL_XCOMP type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_OBJECT_XCON type ref to /VCXI/IF_CKX_OBJECT,
          LR_SVCEL_XCON  type ref to /VCXI/CL_VKSRA_SVC_ELEMENT.
    field-symbols:  <S_XCON_BUFFER>   type YS_XCON_BUFFER.


    free: ME->T_XCOMP_BUFFER,
          ME->T_XCON_BUFFER.

***--------------------------------------------------------------------------------------
*** Get X-Connections (API References) from Element API of Specification Overview
    LT_XCONA = cast ZCL_VCXI_PXSS_EA_SOV( IR_SVCEL_SOV->GET_CLSEA( ) )->GET_XCONA( ).

*** Add basic Connections (which will then be enhanced)
    ME->T_XCON_BUFFER = value #( for LS_XCONA in LT_XCONA ( R_SVCEL_XCONO = LS_XCONA-R_SVCEL_OUT
                                                            R_SVCEL_XCONI = LS_XCONA-R_SVCEL_IN ) ).

***--------------------------------------------------------------------------------------
*** Analyze X-Components
    loop at IR_SVCEL_SOV->/VCXI/IF_CKX_OBJECT_H~GET_CHILDREN( ) into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL_XCOMP.
      check LR_SVCEL_XCOMP->IS_INUSE( ).

***   Add to Buffer
      append value #( R_SVCEL_XCOMP = LR_SVCEL_XCOMP
                      POSID         = LR_SVCEL_XCOMP->GET_POSID( ) ) to ME->T_XCOMP_BUFFER.

***   Get X-Connections of X-Component
      ME->GET_XCOMP_XCON( exporting IR_SVCEL_XCOMP = LR_SVCEL_XCOMP
                                    IT_XCONA       = LT_XCONA
                          importing ET_SVCEL_XCONI = LT_SVCEL_XCONI
                                    ET_SVCEL_XCONO = LT_SVCEL_XCONO ).

***--------------------------------------------------------------------------------------
***   Enhance Connection Table by Connection In
      loop at LT_SVCEL_XCONI into LR_OBJECT_XCON.
        LR_SVCEL_XCON ?= LR_OBJECT_XCON.

***     Find/Create Entry
        read table ME->T_XCON_BUFFER assigning <S_XCON_BUFFER>
                                     with key R_SVCEL_XCONI = LR_SVCEL_XCON.
        if SY-SUBRC ne 0.
          append value #( R_SVCEL_XCONI = LR_SVCEL_XCON ) to ME->T_XCON_BUFFER assigning <S_XCON_BUFFER>.
        endif.

***     Set SmartVC Element of Component
        <S_XCON_BUFFER>-R_SVCEL_XCOMP_IN = LR_SVCEL_XCOMP.
      endloop.


***   Enhance Connection Table by Connection Out
      if LT_SVCEL_XCONO is not initial.
        loop at LT_SVCEL_XCONO into LR_OBJECT_XCON.
          LR_SVCEL_XCON ?= LR_OBJECT_XCON.

***       Find/Create Entry
          read table ME->T_XCON_BUFFER assigning <S_XCON_BUFFER>
                                       with key R_SVCEL_XCONO = LR_SVCEL_XCON.
          if SY-SUBRC ne 0.
            append value #( R_SVCEL_XCONO = LR_SVCEL_XCON ) to ME->T_XCON_BUFFER assigning <S_XCON_BUFFER>.
          endif.

***       Set SmartVC Element of Component
          <S_XCON_BUFFER>-R_SVCEL_XCOMP_OUT = LR_SVCEL_XCOMP.
        endloop.
      else.
***     Keep for Lower-Level Code Determination
        append LR_SVCEL_XCOMP to LT_SVCEL_XCOMP.
      endif.

    endloop.

***--------------------------------------------------------------------------------------
*** Set Dispo Levels
    loop at LT_SVCEL_XCOMP into LR_OBJECT.
      move LR_OBJECT ?to LR_SVCEL_XCOMP.
      ME->SET_XCON_DISST( IR_SVCEL_XCOMP = LR_SVCEL_XCOMP
                          IF_DISST       = 0 ).
    endloop.

  endmethod.
  method GET_ACTDAT_CMIR.

    data: LR_EA_SBH type ref to ZCL_VCXI_PXSS_EA_SBH.
    field-symbols: <S_ACTDAT_CMIR> type ZVCXI_XCM_MBQ_S_ACTDAT_CMIR.


    EF_SKIP = ABAP_UNDEFINED.
    check IR_SVCEL_SOURCE is bound.

***--------------------------------------------------------------------------------------
*** Call SUPER
    RR_ACTDAT = SUPER->GET_ACTDAT_CMIR( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                  IF_SOKEY        = IF_SOKEY
                                                  IF_WERKS        = IF_WERKS
                                                  IF_DISST        = IF_DISST
                                        importing EF_SKIP         = EF_SKIP ).

*** Map Data Reference
    assign RR_ACTDAT->* to <S_ACTDAT_CMIR>.

***--------------------------------------------------------------------------------------
*** Define Control Data

*** Get Element API Reference
    try.
        LR_EA_SBH ?= IR_SVCEL_SOURCE->GET_CLSEA( ).
      catch CX_SY_MOVE_CAST_ERROR into data(LR_CX_SY_MOVE_CAST_ERROR).
        /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX_SY_MOVE_CAST_ERROR ).
    endtry.
    check LR_EA_SBH is bound.

    EF_SKIP = ABAP_FALSE.

*** Get Customer-Material Number
    <S_ACTDAT_CMIR>-KDMAT = LR_EA_SBH->GET_KDMAT( ).
    <S_ACTDAT_CMIR>-KDPTX = LR_EA_SBH->GET_KDPTX( ).

    if <S_ACTDAT_CMIR>-KDMAT is initial and
       <S_ACTDAT_CMIR>-KDPTX is initial.
      EF_SKIP = ABAP_TRUE.
      return.
    endif.

*UNTTO
*UEBTO

  endmethod.
  method GET_ACTDAT_CSB.

    data: LF_BASMN type BASMN.
    field-symbols: <S_ACTDAT_CSB> type ZVCXI_XCM_MBQ_S_ACTDAT_CSB.


    RR_ACTDAT = SUPER->GET_ACTDAT_CSB( exporting IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                                 IF_SOKEY        = IF_SOKEY
                                                 IF_WERKS        = IF_WERKS
                                                 IF_DISST        = IF_DISST
                                       importing EF_SKIP         = EF_SKIP ).

***--------------------------------------------------------------------------------------
*** Map Data Reference
    assign RR_ACTDAT->* to <S_ACTDAT_CSB>.

*** Adjust BOM Base Quantity
    case IF_SOKEY.
      when 'P5_SB'.
        LF_BASMN = reduce #( init LF_BASE_QUAN type BASMN
                             for  LS_MATLI in ME->R_DCO_OUTPUT->T_MATLI
                               where ( DISST = 1 )
                             next LF_BASE_QUAN += LS_MATLI-KMPMG ).
        write LF_BASMN unit <S_ACTDAT_CSB>-BASE_UNIT to <S_ACTDAT_CSB>-BASE_QUAN.
    endcase.

  endmethod.
  method GET_MATDAT_MAKT.

    check IR_SVCEL_SOURCE is bound.

*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   Sales BOM Header
      when type ZCL_VCXI_PXSS_EA_SBH into data(LR_EA_SBH).
        RT_MATDAT_MAKT = value #( ( MAKTX = LR_EA_SBH->GET_MAKTX( ) ) ).
    endcase.

  endmethod.
  method GET_MATDAT_MARA.

    RS_MATDAT_MARA = SUPER->GET_MATDAT_MARA( IR_SVCEL_SOURCE = IR_SVCEL_SOURCE
                                             IF_SOKEY        = IF_SOKEY
                                             IF_WERKS        = IF_WERKS
                                             IF_TMATN        = IF_TMATN ).

    check IR_SVCEL_SOURCE is bound.

*** Get Element API Reference
    case type of IR_SVCEL_SOURCE->GET_CLSEA( ).
***   Sales BOM Header
      when type ZCL_VCXI_PXSS_EA_SBH into data(LR_EA_SBH).
        RS_MATDAT_MARA-PROD_HIER = LR_EA_SBH->GET_PRODH( ).
    endcase.

  endmethod.
  method GET_SOKEY_SB.

    RF_SOKEY = C_SOKEY_SB.      "Sales BOM

*** Adjust to Roll-based Sales BOM
    if LINE_EXISTS( IT_MATLI[ SOKEY = ZCL_VCXI_P5M_MBQ_BL_RLCOMP=>C_SOKEY_RLFG ] ) or
       LINE_EXISTS( IT_MATLI[ SOKEY = ZCL_VCXI_P5M_MBQ_BL_RLCOMP=>C_SOKEY_RLFG_MTS ] ).
      RF_SOKEY = 'P5_SB'.
    endif.

  endmethod.
  method GET_SVCEL_DOC_MGR.

    data: LT_SVCEL     type         /VCXI/CKX_TT_OBJECT.


    check IR_SVC is bound.

*** Get Document Manager
    LT_SVCEL = IR_SVC->GET_SVC_ELEMENTS( IF_ID = 'DOC_MGR' ).
    if LT_SVCEL is not initial.
      RR_SVCEL_DOC_MGR ?= LT_SVCEL[ 1 ].
    endif.

  endmethod.
  method GET_SVCEL_SBH.

    check IR_SVC is bound.

*** Get Sales BOM Header
    data(LT_SVCEL) = IR_SVC->GET_SVC_ELEMENTS( IF_ID = 'SBH' ).
    if LT_SVCEL is not initial.
      RR_SVCEL_SBH ?= LT_SVCEL[ 1 ].
    endif.

  endmethod.
  method GET_SVCEL_SOV.

    data: LT_SVCEL     type         /VCXI/CKX_TT_OBJECT.


    check IR_SVC is bound.

*** Get Specification Overview
    LT_SVCEL = IR_SVC->GET_SVC_ELEMENTS( IF_ID = 'SOV' ).
    if LT_SVCEL is not initial.
      RR_SVCEL_SOV ?= LT_SVCEL[ 1 ].
    endif.

  endmethod.
  method GET_XCOMP_XCON.

    data: LS_XCONA  type ZVCXI_PXSS_S_XCONA.


    clear: ET_SVCEL_XCONI,
           ET_SVCEL_XCONO.

    loop at IT_XCONA into LS_XCONA.
***   Check Connection In
      if /VCXI/CL_CKX_SERVICE=>IS_OBJECT_IN_LINE( IR_OBJECT_1 = LS_XCONA-R_SVCEL_IN
                                                  IR_OBJECT_2 = IR_SVCEL_XCOMP ).
        append LS_XCONA-R_SVCEL_IN to ET_SVCEL_XCONI.
      endif.

***   Check Connection Out
      if /VCXI/CL_CKX_SERVICE=>IS_OBJECT_IN_LINE( IR_OBJECT_1 = LS_XCONA-R_SVCEL_OUT
                                                  IR_OBJECT_2 = IR_SVCEL_XCOMP ).
        append LS_XCONA-R_SVCEL_OUT to ET_SVCEL_XCONO.
      endif.
    endloop.

  endmethod.
  method SET_XCON_DISST.

    data: LS_XCON_BUFFER type YS_XCON_BUFFER.


***--------------------------------------------------------------------------------------
*** Continue only if Lower-Level code has changed
    if IF_DISST eq 0.
      check ME->T_XCOMP_BUFFER[ R_SVCEL_XCOMP = IR_SVCEL_XCOMP ]-DISST le IF_DISST.
    else.
      check ME->T_XCOMP_BUFFER[ R_SVCEL_XCOMP = IR_SVCEL_XCOMP ]-DISST lt IF_DISST.
    endif.

*** Set Lower-Level Code to Buffer
    ME->T_XCOMP_BUFFER[ R_SVCEL_XCOMP = IR_SVCEL_XCOMP ]-DISST = IF_DISST.

***--------------------------------------------------------------------------------------
*** Search for connected Components
    loop at ME->T_XCON_BUFFER into LS_XCON_BUFFER
                      where R_SVCEL_XCOMP_IN = IR_SVCEL_XCOMP.
      ME->SET_XCON_DISST( IR_SVCEL_XCOMP = LS_XCON_BUFFER-R_SVCEL_XCOMP_OUT
                          IF_DISST       = conv /VCXI/VKC_DISST( IF_DISST + 1 ) ).
    endloop.

  endmethod.
