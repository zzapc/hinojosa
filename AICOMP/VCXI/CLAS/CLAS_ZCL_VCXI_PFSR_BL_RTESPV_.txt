
class ZCL_VCXI_PFSR_BL_RTESPV definition
  public
  inheriting from ZCL_VCXI_P0SR_BL_RTESPV
  create public .

public section.

  methods SET_PF_BL_PRTE_AS
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IT_COMP_RTESEL type ZVCXI_PFSR_TT_COMP_RTESEL
      !IS_EXQTY type /VCXI/VKCR_S_EXQTY
      !IT_CPM_RTESEL type ZVCXI_P0SR_TT_CPM_RTESEL
    raising
      /VCXI/CX_CKX .
  methods SET_PF_BL_PRTE
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IR_UCB_RTESEL type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IT_LAMI_RTESEL type ZVCXI_P0SR_TT_LAMI_RTESEL optional
      !IS_EXQTY type /VCXI/VKCR_S_EXQTY
    raising
      /VCXI/CX_CKX .
  methods SET_PF_BL_PRTE_SE
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IR_UCB_RTESEL type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IT_LAMI_RTESEL type ZVCXI_P0SR_TT_LAMI_RTESEL optional
      !IT_COMP_SE_RTESEL type ZVCXI_P0SR_TT_COMP_SE_RTESEL
      !IS_EXQTY type /VCXI/VKCR_S_EXQTY
    raising
      /VCXI/CX_CKX .
protected section.

  methods BUILD_PF_STRUCT_COMPO
    importing
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_COMP_RTESEL type ZVCXI_PFSR_TT_COMP_RTESEL
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods UPDATE_PF_COMPO_CONNECT
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
      !IT_COMP_RTESEL type ZVCXI_PFSR_TT_COMP_RTESEL
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PFSR_BL_RTESPV definition
class ZCL_VCXI_PFSR_BL_RTESPV implementation.
  method BUILD_PF_STRUCT_COMPO.

    data: LF_IMFXC_IN  type        ZVCXI_XCSP_IMFXC,
          LF_IMFXC_OUT type        ZVCXI_XCSP_IMFXC,
          LF_INDEX     type        STRING.
    data: LS_COMP_RTESEL type        ZVCXI_PFSR_S_COMP_RTESEL,
          LS_LAMI_RTESEL type        ZVCXI_P0SR_S_LAMI_RTESEL.
    data: LT_RTE_ARBPL type /VCXI/VSMR_TT_RTE_ARBPL.
    data: LR_SPVRE_COMPS   type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_COMP    type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVRE_GRP     type ref to /VCXI/CL_VKSR_SPVRE,
          LR_SPVCE         type ref to /VCXI/CL_VKSC_SPVCE,
          LR_RTE_ARBPL     type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP     type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP      type ref to ZCL_VCXI_XCSR_BL_PSTEP,
          LR_BL_PSTEP_LAMI type ref to ZCL_VCXI_P0SR_BL_PSTEP_LAMI.

***------------------------------------------------------------------------------------------------
*** Find/Create Component Manager (COMPS)
    ME->GET_SPVRE( exporting IR_SPVRE_PARENT = IR_SPVRE_PARENT
                             IF_ID           = 'COMPS'
                   importing ER_SPVRE        = LR_SPVRE_COMPS
                   changing  CT_SPVRE        = CT_SPVRE ).

***------------------------------------------------------------------------------------------------
*** Build Components
    loop at IT_COMP_RTESEL into LS_COMP_RTESEL.
      check LS_COMP_RTESEL-R_RTESEL_CB is bound and
            LS_COMP_RTESEL-R_RTESEL_CB->R_RTE_PRTE is bound.

***   Get Customizing Element for Component
      LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'COMP'
                                IR_SPVCE_PARENT = LR_SPVRE_COMPS->R_SPVCE ).

***   Create Supervisor Runtime Element
      create object LR_SPVRE_COMP
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = LR_SPVRE_COMPS.
      append LR_SPVRE_COMP to CT_SPVRE.

***------------------------------------------------------------------------------------------------
***   Update MF X-Connect (not for the UCB as they are as SFG)
      clear LT_RTE_ARBPL.
      append lines of LS_COMP_RTESEL-R_RTESEL_CB->R_RTE_PRTE->T_RTE_ARBPL to LT_RTE_ARBPL.

      loop at LT_RTE_ARBPL into LR_RTE_ARBPL.
***     Define MF X-connect
        move LF_IMFXC_OUT to LF_IMFXC_IN.
        move SY-TABIX     to LF_INDEX.
        concatenate LS_COMP_RTESEL-IMFXC '@' LF_INDEX into LF_IMFXC_OUT.
        at last.
          move LS_COMP_RTESEL-IMFXC to LF_IMFXC_OUT.
        endat.

***     Set MF X-Connect
        loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
          if LF_IMFXC_IN is not initial.
            append LF_IMFXC_IN to LR_BL_PSTEP->T_IMFXC_IN.
          endif.
          if LF_IMFXC_OUT is not initial.
            append LF_IMFXC_OUT to LR_BL_PSTEP->T_IMFXC_OUT.
          endif.
        endloop.
      endloop.

***------------------------------------------------------------------------------------------------
***   Build Structure of UCB
      if LS_COMP_RTESEL-R_RTESEL_UCB is bound.
***     Build Structure
        ME->BUILD_STRUCT_UCB( exporting IR_SPVRE_PARENT = LR_SPVRE_COMP
                                        IR_RTESEL_UCB   = LS_COMP_RTESEL-R_RTESEL_UCB
                                        IF_IMFXC        = SPACE
                              changing  CT_SPVRE        = CT_SPVRE ).

***     Update Connection to UCB
        read table LS_COMP_RTESEL-R_RTESEL_CB->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL index 1.
        if SY-SUBRC eq 0.
          loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
            try.
                move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
                if LR_BL_PSTEP is bound.
***               Define "Next Level" Flag
                  append ABAP_TRUE to LR_BL_PSTEP->T_NEXTL.     "Next Level Flag for UCB
                endif.
              catch CX_SY_MOVE_CAST_ERROR.
                continue.
            endtry.
          endloop.
        endif.
      endif.

***------------------------------------------------------------------------------------------------
***   Build Structure of Lamination
      if LS_COMP_RTESEL-T_LAMI_RTESEL is not initial.
***     Get Customizing Element for Conversion Group
        LR_SPVCE = ME->GET_SPVCE( IF_ID           = 'GRP_LASHT'
                                  IR_SPVCE_PARENT = LR_SPVRE_COMP->R_SPVCE ).
        create object LR_SPVRE_GRP
          exporting
            IR_SPVCE  = LR_SPVCE
            IR_PARENT = LR_SPVRE_COMP.
        append LR_SPVRE_GRP to CT_SPVRE.

***     Build Structure
        ME->BUILD_STRUCT_LAMI( exporting IR_SPVRE_PARENT = LR_SPVRE_COMP
                                         IT_LAMI_RTESEL  = LS_COMP_RTESEL-T_LAMI_RTESEL
                               changing  CT_SPVRE        = CT_SPVRE ).

***     Update Lamination for Connection
        ME->UPDATE_LAMI_CONNECT( IR_BL_PRTE     = LS_COMP_RTESEL-R_RTESEL_CB
                                 IT_LAMI_RTESEL = LS_COMP_RTESEL-T_LAMI_RTESEL ).

      endif.

***------------------------------------------------------------------------------------------------
***   Process Work Center
      loop at LS_COMP_RTESEL-R_RTESEL_CB->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***     Process Work Center
        ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = LR_SPVRE_COMP
                                         IR_RTE_ARBPL   = LR_RTE_ARBPL
                                         IR_BL_PRTE     = LS_COMP_RTESEL-R_RTESEL_CB
                               changing  CT_SPVRE       = CT_SPVRE ).

      endloop.
    endloop.

  endmethod.
method SET_PF_BL_PRTE.

  data:  LT_LAMI_RTESEL    type        ZVCXI_P0SR_TT_LAMI_RTESEL,
         LT_SPVRE_NEW      type        /VCXI/VKSR_TT_SPVRE.
  data:  LS_LAMI_RTESEL    type        ZVCXI_P0SR_S_LAMI_RTESEL.
  data:  LR_BL_PRTE        type ref to ZCL_VCXI_XCSR_BL_PRTE,
         LR_UCB_RTESEL     type ref to ZCL_VCXI_XCSR_BL_PRTE,
         LR_SPVRE_ROOT     type ref to /VCXI/CL_VKSR_SPVRE,
         LR_RTE_ARBPL      type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP      type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_PSTEP_LAMI  type ref to ZCL_VCXI_P0SR_BL_PSTEP_LAMI,
         LR_BL_PSTEP       type ref to ZCL_VCXI_XCSR_BL_PSTEP.

  check IR_BL_PRTE is bound and
        IR_BL_PRTE->R_RTE_PRTE is bound.

***----------------------------------------------------------------------------
*** Copy incoming BL Production Route to decouple it
  move IR_BL_PRTE->COPY( ) to LR_BL_PRTE.


  loop at IT_LAMI_RTESEL into LS_LAMI_RTESEL.
    if LS_LAMI_RTESEL-R_RTESEL_CB is bound.
      move LS_LAMI_RTESEL-R_RTESEL_CB->COPY( ) to LS_LAMI_RTESEL-R_RTESEL_CB.
    endif.
    if LS_LAMI_RTESEL-R_RTESEL_UCB is bound.
      move LS_LAMI_RTESEL-R_RTESEL_UCB->COPY( ) to LS_LAMI_RTESEL-R_RTESEL_UCB.
    endif.
    append LS_LAMI_RTESEL to LT_LAMI_RTESEL.
  endloop.

***------------------------------------------------------------------------------------------------
*** Build own Structure
  ME->BUILD_STRUCT( exporting IR_BL_PRTE    = LR_BL_PRTE
                              IS_EXQTY      = IS_EXQTY
                    importing ER_SPVRE_ROOT = LR_SPVRE_ROOT
                    changing  CT_SPVRE      = LT_SPVRE_NEW ).

***----------------------------------------------------------------------------
*** Build Structure of UCB
  if IR_UCB_RTESEL is bound.
*** Copy incoming BL Production Route to decouple it
    move IR_UCB_RTESEL->COPY( ) to LR_UCB_RTESEL.

*** Build Structure
    ME->BUILD_STRUCT_UCB( exporting IR_SPVRE_PARENT = LR_SPVRE_ROOT
                                    IR_RTESEL_UCB   = LR_UCB_RTESEL
                                    IF_IMFXC        = SPACE
                          changing  CT_SPVRE        = LT_SPVRE_NEW ).

*** Update Connection to UCB
    read table LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL index 1.
    if SY-SUBRC eq 0.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
            if LR_BL_PSTEP is bound.
***           Define "Next Level" Flag
              append ABAP_TRUE to LR_BL_PSTEP->T_NEXTL.     "Next Level Flag for UCB
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.
    endif.
  endif.

***------------------------------------------------------------------------------------------------
*** Build Structure of Lamination
  if LT_LAMI_RTESEL is not initial.
    ME->BUILD_STRUCT_LAMI( exporting IR_SPVRE_PARENT = LR_SPVRE_ROOT
                                     IT_LAMI_RTESEL  = LT_LAMI_RTESEL
                           changing  CT_SPVRE        = LT_SPVRE_NEW ).

*** Update Lamination for Connection
    ME->UPDATE_LAMI_CONNECT( IR_BL_PRTE     = LR_BL_PRTE
                             IT_LAMI_RTESEL = LT_LAMI_RTESEL ).
  endif.

***------------------------------------------------------------------------------------------------
*** Process Work Center
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT = LR_SPVRE_ROOT
                                     IR_RTE_ARBPL  = LR_RTE_ARBPL
                                     IR_BL_PRTE    = LR_BL_PRTE
                           changing  CT_SPVRE      = LT_SPVRE_NEW ).
  endloop.

***------------------------------------------------------------------------------------------------
*** Set Supervised Runtime Elements
  ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

endmethod.
  method SET_PF_BL_PRTE_AS.

    data: LS_COMP_RTESEL type        ZVCXI_PFSR_S_COMP_RTESEL,
          LS_CPM_RTESEL  type        ZVCXI_P0SR_S_CPM_RTESEL.
    data: LT_COMP_RTESEL type        ZVCXI_PFSR_TT_COMP_RTESEL,
          LT_CPM_RTESEL  type        ZVCXI_P0SR_TT_CPM_RTESEL,
          LT_SPVRE_NEW   type        /VCXI/VKSR_TT_SPVRE.
    data: LR_BL_PRTE    type ref to ZCL_VCXI_XCSR_BL_PRTE,
          LR_SPVRE_ROOT type ref to /VCXI/CL_VKSR_SPVRE,
          LR_RTE_ARBPL  type ref to /VCXI/CL_VSMR_RTE_ARBPL.
    field-symbols: <S_COMP_RTESEL> type        ZVCXI_P0SR_S_COMP_RTESEL,
                   <S_LAMI_RTESEL> type        ZVCXI_P0SR_S_LAMI_RTESEL.

    check IR_BL_PRTE is bound and
          IR_BL_PRTE->R_RTE_PRTE is bound.

***----------------------------------------------------------------------------
*** Copy incoming BL Production Route to decouple it
    move IR_BL_PRTE->COPY( ) to LR_BL_PRTE.

    loop at IT_COMP_RTESEL into LS_COMP_RTESEL.
      if LS_COMP_RTESEL-R_RTESEL_CB is bound.
        move LS_COMP_RTESEL-R_RTESEL_CB->COPY( ) to LS_COMP_RTESEL-R_RTESEL_CB.
      endif.
      if LS_COMP_RTESEL-R_RTESEL_UCB is bound.
        move LS_COMP_RTESEL-R_RTESEL_UCB->COPY( ) to LS_COMP_RTESEL-R_RTESEL_UCB.
      endif.

      loop at LS_COMP_RTESEL-T_LAMI_RTESEL assigning <S_LAMI_RTESEL>.
        if <S_LAMI_RTESEL>-R_RTESEL_CB is bound.
          move <S_LAMI_RTESEL>-R_RTESEL_CB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_CB.
        endif.
        if <S_LAMI_RTESEL>-R_RTESEL_UCB is bound.
          move <S_LAMI_RTESEL>-R_RTESEL_UCB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_UCB.
        endif.
      endloop.
      append LS_COMP_RTESEL to LT_COMP_RTESEL.
    endloop.


    loop at IT_CPM_RTESEL into LS_CPM_RTESEL.
      move LS_CPM_RTESEL-R_RTESEL->COPY( ) to LS_CPM_RTESEL-R_RTESEL.

      loop at LS_CPM_RTESEL-T_COMP_RTESEL assigning <S_COMP_RTESEL>.
        move <S_COMP_RTESEL>-R_RTESEL->COPY( ) to <S_COMP_RTESEL>-R_RTESEL.

        loop at <S_COMP_RTESEL>-T_LAMI_RTESEL assigning <S_LAMI_RTESEL>.
          if <S_LAMI_RTESEL>-R_RTESEL_CB is bound.
            move <S_LAMI_RTESEL>-R_RTESEL_CB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_CB.
          endif.
          if <S_LAMI_RTESEL>-R_RTESEL_UCB is bound.
            move <S_LAMI_RTESEL>-R_RTESEL_UCB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_UCB.
          endif.

        endloop.
      endloop.
      append LS_CPM_RTESEL to LT_CPM_RTESEL.
    endloop.

***----------------------------------------------------------------------------
*** Build Structure
    ME->BUILD_STRUCT( exporting IR_BL_PRTE    = LR_BL_PRTE
                                IS_EXQTY      = IS_EXQTY
                      importing ER_SPVRE_ROOT = LR_SPVRE_ROOT
                      changing  CT_SPVRE      = LT_SPVRE_NEW ).

*** Build Structure of Configured Packaging Material
    if LT_CPM_RTESEL is not initial.
      ME->BUILD_STRUCT_CPM( exporting IR_SPVRE_PARENT = LR_SPVRE_ROOT
                                      IT_CPM_RTESEL   = LT_CPM_RTESEL
                            changing  CT_SPVRE        = LT_SPVRE_NEW ).
    endif.

*** Build Structure of Components
    ME->BUILD_PF_STRUCT_COMPO( exporting IR_SPVRE_PARENT = LR_SPVRE_ROOT
                                         IT_COMP_RTESEL  = LT_COMP_RTESEL
                               changing  CT_SPVRE        = LT_SPVRE_NEW ).


***----------------------------------------------------------------------------
*** Update X-connects
    ME->UPDATE_PF_COMPO_CONNECT( IR_BL_PRTE     = LR_BL_PRTE
                                 IT_COMP_RTESEL = LT_COMP_RTESEL ).

    if LT_CPM_RTESEL is not initial.
      ME->UPDATE_CPM_CONNECT( exporting IR_BL_PRTE    = LR_BL_PRTE
                                        IT_CPM_RTESEL = LT_CPM_RTESEL ).
    endif.

*** Process Work Center
    loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
      ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT  = LR_SPVRE_ROOT
                                       IR_RTE_ARBPL   = LR_RTE_ARBPL
                                       IR_BL_PRTE     = LR_BL_PRTE
                             changing  CT_SPVRE       = LT_SPVRE_NEW ).
    endloop.

***----------------------------------------------------------------------------
*** Set Supervised Runtime Elements
    ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

  endmethod.
method SET_PF_BL_PRTE_SE.

  data: LS_LAMI_RTESEL    type ZVCXI_P0SR_S_LAMI_RTESEL,
        LS_COMP_SE_RTESEL type ZVCXI_P0SR_S_COMP_SE_RTESEL.
  data: LT_LAMI_RTESEL    type ZVCXI_P0SR_TT_LAMI_RTESEL,
        LT_COMP_SE_RTESEL type ZVCXI_P0SR_TT_COMP_SE_RTESEL,
        LT_SPVRE_NEW      type /VCXI/VKSR_TT_SPVRE.
  data: LR_BL_PRTE       type ref to ZCL_VCXI_XCSR_BL_PRTE,
        LR_UCB_RTESEL    type ref to ZCL_VCXI_XCSR_BL_PRTE,
        LR_SPVRE_ROOT    type ref to /VCXI/CL_VKSR_SPVRE,
        LR_RTE_ARBPL     type ref to /VCXI/CL_VSMR_RTE_ARBPL,
        LR_RTE_PSTEP     type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_BL_PSTEP_LAMI type ref to ZCL_VCXI_P0SR_BL_PSTEP_LAMI,
        LR_BL_PSTEP      type ref to ZCL_VCXI_XCSR_BL_PSTEP,
        LR_BL_PSTEP_CUT  type ref to ZCL_VCXI_P0SR_BL_PSTEP_CUT.
  field-symbols: <S_CPM_RTESEL>  type ZVCXI_P0SR_S_CPM_RTESEL,
                 <S_COMP_RTESEL> type ZVCXI_P0SR_S_COMP_RTESEL,
                 <S_LAMI_RTESEL> type ZVCXI_P0SR_S_LAMI_RTESEL.


  check IR_BL_PRTE is bound and
        IR_BL_PRTE->R_RTE_PRTE is bound.

***----------------------------------------------------------------------------
*** Copy incoming BL Production Route to decouple it
  move IR_BL_PRTE->COPY( ) to LR_BL_PRTE.

*** Copy Lamination
  loop at IT_LAMI_RTESEL into LS_LAMI_RTESEL.
    if LS_LAMI_RTESEL-R_RTESEL_CB is bound.
      move LS_LAMI_RTESEL-R_RTESEL_CB->COPY( ) to LS_LAMI_RTESEL-R_RTESEL_CB.
    endif.
    if LS_LAMI_RTESEL-R_RTESEL_UCB is bound.
      move LS_LAMI_RTESEL-R_RTESEL_UCB->COPY( ) to LS_LAMI_RTESEL-R_RTESEL_UCB.
    endif.
    append LS_LAMI_RTESEL to LT_LAMI_RTESEL.
  endloop.

*** Copy Separation
  loop at IT_COMP_SE_RTESEL into LS_COMP_SE_RTESEL.
    move LS_COMP_SE_RTESEL-R_RTESEL->COPY( ) to LS_COMP_SE_RTESEL-R_RTESEL.

    loop at LS_COMP_SE_RTESEL-T_CPM_RTESEL assigning <S_CPM_RTESEL>.
      move <S_CPM_RTESEL>-R_RTESEL->COPY( ) to <S_CPM_RTESEL>-R_RTESEL.

      loop at <S_CPM_RTESEL>-T_COMP_RTESEL assigning <S_COMP_RTESEL>.
        move <S_COMP_RTESEL>-R_RTESEL->COPY( ) to <S_COMP_RTESEL>-R_RTESEL.

        loop at <S_COMP_RTESEL>-T_LAMI_RTESEL assigning <S_LAMI_RTESEL>.
          if <S_LAMI_RTESEL>-R_RTESEL_CB is bound.
            move <S_LAMI_RTESEL>-R_RTESEL_CB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_CB.
          endif.
          if <S_LAMI_RTESEL>-R_RTESEL_UCB is bound.
            move <S_LAMI_RTESEL>-R_RTESEL_UCB->COPY( ) to <S_LAMI_RTESEL>-R_RTESEL_UCB.
          endif.

        endloop.
      endloop.
    endloop.
    append LS_COMP_SE_RTESEL to LT_COMP_SE_RTESEL.
  endloop.

***------------------------------------------------------------------------------------------------
*** Build own Structure
  ME->BUILD_STRUCT( exporting IR_BL_PRTE    = LR_BL_PRTE
                              IS_EXQTY      = IS_EXQTY
                    importing ER_SPVRE_ROOT = LR_SPVRE_ROOT
                    changing  CT_SPVRE      = LT_SPVRE_NEW ).

***----------------------------------------------------------------------------
*** Build Structure of UCB
  if IR_UCB_RTESEL is bound.
*** Copy incoming BL Production Route to decouple it
    move IR_UCB_RTESEL->COPY( ) to LR_UCB_RTESEL.

*** Build Structure
    ME->BUILD_STRUCT_UCB( exporting IR_SPVRE_PARENT = LR_SPVRE_ROOT
                                    IR_RTESEL_UCB   = LR_UCB_RTESEL
                                    IF_IMFXC        = SPACE
                          changing  CT_SPVRE        = LT_SPVRE_NEW ).

*** Update Connection to UCB
    read table LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL index 1.
    if SY-SUBRC eq 0.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
            if LR_BL_PSTEP is bound.
***           Define "Next Level" Flag
              append ABAP_TRUE to LR_BL_PSTEP->T_NEXTL.     "Next Level Flag for UCB
            endif.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.
    endif.
  endif.

***------------------------------------------------------------------------------------------------
*** Build Structure of Lamination
  if LT_LAMI_RTESEL is not initial.
    ME->BUILD_STRUCT_LAMI( exporting IR_SPVRE_PARENT = LR_SPVRE_ROOT
                                     IT_LAMI_RTESEL  = LT_LAMI_RTESEL
                           changing  CT_SPVRE        = LT_SPVRE_NEW ).

*** Update Lamination for Connection
    ME->UPDATE_LAMI_CONNECT( IR_BL_PRTE     = LR_BL_PRTE
                             IT_LAMI_RTESEL = LT_LAMI_RTESEL ).
  endif.

***------------------------------------------------------------------------------------------------
*** Process Work Center
  loop at LR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_CUT.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

*** Set MF X-Connect
    if LR_BL_PSTEP_CUT is bound.
      loop at LT_COMP_SE_RTESEL into LS_COMP_SE_RTESEL.
        append LS_COMP_SE_RTESEL-IMFXC to LR_BL_PSTEP_CUT->T_IMFXC_OUT.
      endloop.
    endif.

    ME->PROCESS_RTE_ARBPL( exporting IR_SPVRE_ROOT = LR_SPVRE_ROOT
                                     IR_RTE_ARBPL  = LR_RTE_ARBPL
                                     IR_BL_PRTE    = LR_BL_PRTE
                           changing  CT_SPVRE      = LT_SPVRE_NEW ).
  endloop.

*** Build Struture of SE Components
  ME->BUILD_STRUCT_COMPO_SE( exporting IR_SPVRE_ROOT     = LR_SPVRE_ROOT
                                       IT_COMP_SE_RTESEL = LT_COMP_SE_RTESEL
                             changing  CT_SPVRE          = LT_SPVRE_NEW ).


***------------------------------------------------------------------------------------------------
*** Set Supervised Runtime Elements
  ME->R_GATE->SET_SPVRE( IT_SPVRE = LT_SPVRE_NEW ).

endmethod.
  method UPDATE_PF_COMPO_CONNECT.

    data: LF_PPASS     type        N length 2,
          LF_IMFXC_IN  type        ZVCXI_XCSP_IMFXC,
          LF_IMFXC_OUT type        ZVCXI_XCSP_IMFXC.
    data: LS_COMP_RTESEL      type        ZVCXI_PFSR_S_COMP_RTESEL.
    data: LR_RTE_ARBPL        type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP        type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP         type ref to ZCL_VCXI_XCSR_BL_PSTEP,
          LR_BL_PSTEP_CLOS_AS type ref to ZCL_VCXI_P0SR_BL_PSTEP_CLOS_AS,
          LR_BL_PSTEP_GRP_AS  type ref to ZCL_VCXI_P0SR_BL_PSTEP_GRP_AS,
          LR_BL_PSTEP_UNIT_AS type ref to ZCL_VCXI_P0SR_BL_PSTEP_UNIT_AS.

*** Update of Component Connection
    loop at IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
***   Find PPass
      clear LF_PPASS.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_CLOS_AS.
            check LR_BL_PSTEP_CLOS_AS is bound.
            move LR_BL_PSTEP_CLOS_AS->F_PPASS to LF_PPASS.
          catch CX_SY_MOVE_CAST_ERROR.
        endtry.
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_GRP_AS.
            check LR_BL_PSTEP_GRP_AS is bound.
            move LR_BL_PSTEP_GRP_AS->F_PPASS to LF_PPASS.
          catch CX_SY_MOVE_CAST_ERROR.
        endtry.
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP_UNIT_AS.
            check LR_BL_PSTEP_UNIT_AS is bound.
            move LR_BL_PSTEP_UNIT_AS->F_PPASS to LF_PPASS.
          catch CX_SY_MOVE_CAST_ERROR.
        endtry.
      endloop.

***   Define MF X-connect
      move LF_IMFXC_OUT to LF_IMFXC_IN.

      if LF_PPASS is not initial.
        concatenate 'OP_J' LF_PPASS into LF_IMFXC_OUT.
      else.
        clear LF_IMFXC_OUT.
      endif.

***   Do not set it for the last Work Center
      at last.
        clear LF_IMFXC_OUT.
      endat.

***   Set MF X-Connect
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
        if LF_PPASS ne 1.
          append LF_IMFXC_IN to LR_BL_PSTEP->T_IMFXC_IN.
          append SPACE       to LR_BL_PSTEP->T_NEXTL.
        endif.
        loop at IT_COMP_RTESEL into LS_COMP_RTESEL
                              where PPASS eq LF_PPASS.
          append LS_COMP_RTESEL-IMFXC to LR_BL_PSTEP->T_IMFXC_IN.
          append SPACE                to LR_BL_PSTEP->T_NEXTL.
        endloop.

        if LF_IMFXC_OUT is not initial.
          append LF_IMFXC_OUT to LR_BL_PSTEP->T_IMFXC_OUT.
        endif.
      endloop.
    endloop.

  endmethod.
