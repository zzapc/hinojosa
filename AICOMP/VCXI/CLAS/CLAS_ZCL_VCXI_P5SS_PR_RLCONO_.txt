
class ZCL_VCXI_P5SS_PR_RLCONO definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_XCONO
  create public .

public section.

  interfaces ZIF_VCXI_P5SS_COMM_NEXT .
  interfaces ZIF_VCXI_P5SS_COMM_PREV .
  interfaces ZIF_VCXI_PXSS_PRINT_COM .
  interfaces ZIF_VCXI_PXSS_WIDIM .

  constants C_IPRVT_P5_RLCONO type /VCXI/VKSC_IPRVT value 'ZVCXI_P5SS_FCCONO' ##NO_TEXT.
  constants C_PARID_PRINT type /VCXI/VKS_PARID value 'ZVCXI_PX_PRINT' ##NO_TEXT.

  methods GET_FACTOR
    returning
      value(RF_FACTOR) type F
    raising
      /VCXI/CX_CKX .
  methods GET_FOVRR_PRINT
    returning
      value(RF_FOVRR) type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .
  methods SET_FOVRR_PRINT
    importing
      !IF_FOVRR type ZVCXI_XCS_FOVRR
    raising
      /VCXI/CX_CKX .

  methods GET_CSPLIT
    redefinition .
  methods GET_NOUPS
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD
    redefinition .
  methods IS_XCONI_COMPATIBLE
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_PRINT type /VCXI/VKSC_IEVNT value 'RECALC_PRINT' ##NO_TEXT.
  constants C_IEVNT_I_REQ_RHNDL_DEFAULT type /VCXI/VKSC_IEVNT value 'REQ_RHNDL_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_PRINT_CHANGED type /VCXI/VKSC_IEVNT value 'PRINT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLBPX_CHANGED type /VCXI/VKSC_IEVNT value 'RLBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_RLFPX_CHANGED type /VCXI/VKSC_IEVNT value 'RLFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SURWT_CHANGED type /VCXI/VKSC_IEVNT value 'SURWT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WEBWI_CHANGED type /VCXI/VKSC_IEVNT value 'WEBWI_CHANGED' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUPS' ##NO_TEXT.
  constants C_PARID_RLBPX type /VCXI/VKS_PARID value 'ZVCXI_P5_RLBPX' ##NO_TEXT.
  constants C_PARID_RLFPX type /VCXI/VKS_PARID value 'ZVCXI_P5_RLFPX' ##NO_TEXT.
  constants C_PARID_SURWT type /VCXI/VKS_PARID value 'ZVCXI_PX_SURWT' ##NO_TEXT.
  constants C_PARID_WEBWI type /VCXI/VKS_PARID value 'ZVCXI_PX_WEBWI' ##NO_TEXT.

  methods HANDLE_RECALC_PRINT
    raising
      /VCXI/CX_CKX .
  methods SET_WEBWI
    importing
      !IS_WEBWI type ZVCXI_PXS_S_WEBWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLBPX
    importing
      !IF_RLBPX type ZVCXI_P5S_RLBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RLFPX
    importing
      !IF_RLFPX type ZVCXI_P5S_RLFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_PXS_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SURWT
    importing
      !IS_SURWT type ZVCXI_PXS_S_SURWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_RECALC_DIKEY
    redefinition .
  methods HANDLE_RECALC_PRODH
    redefinition .
private section.
endclass. "ZCL_VCXI_P5SS_PR_RLCONO definition
class ZCL_VCXI_P5SS_PR_RLCONO implementation.
  method GET_CSPLIT.

    RT_CSPLIT = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_RLBPX( )->T_CSPLIT.

  endmethod.
  method GET_FACTOR.

    data: LR_PR_OUTPUT type ref to ZCL_VCXI_P5SS_PR_OUTPUT.


*** Get Total Web Width (excluding Trim)
    LR_PR_OUTPUT ?= ME->GET_PRVDR_OUTPUT( ).
    if LR_PR_OUTPUT is bound.
      data(LS_WEBWI_TOTAL) = LR_PR_OUTPUT->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( ).
    endif.

*** Get Web Width (including Number of Outs)
    data(LS_WEBWI_OWN) = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_WEBWI( ).

*** Determine Factor
    if LS_WEBWI_TOTAL-WEBWI ne 0.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_WEBWI_OWN-WEBWI
                                                          IF_CALCV_UOM_1 = LS_WEBWI_OWN-WEBWI_UOM
                                                          IF_CALCV_2     = LS_WEBWI_TOTAL-WEBWI
                                                          IF_CALCV_UOM_2 = LS_WEBWI_TOTAL-WEBWI_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = RF_FACTOR ).
    else.
      RF_FACTOR = 0.
    endif.

  endmethod.
  method GET_FOVRR_PRINT.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

    ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( importing EF_SETBY = LF_SETBY ).

    RF_FOVRR = switch #( LF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE
                                  when /VCXI/CL_VKSR_GATE=>C_SETBY_CALC then ABAP_FALSE
                                                                        else ABAP_UNDEFINED ).

  endmethod.
  method GET_NOUPS.

    RF_NOUPS = ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_NOUPS( ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_RECALC_PRINT.
        ME->HANDLE_RECALC_PRINT( ).

      when C_IEVNT_I_REQ_RHNDL_DEFAULT.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_WIDIM~C_IEVNT_O_RHNDL_DEFAULT_REQ ).

    endcase.

  endmethod.
  method HANDLE_RECALC_DIKEY.

    data: LF_FACTOR type F,
          LF_SETBY  type /VCXI/VKSR_SETBY.
    data: LS_DIKEY       type ZVCXI_P0SS_S_DIKEY,
          LS_WEBWI_TOTAL type ZVCXI_PXS_S_WEBWI,
          LS_WEBWI       type ZVCXI_PXS_S_WEBWI.
    data: LT_GATE type /VCXI/VKSR_TT_GATE.


***------------------------------------------------------------------------------------------------
*** Get Distribution Key (Unit) and SETBY Value
    LS_DIKEY = ME->GET_DIKEY( importing EF_SETBY = LF_SETBY ).

***------------------------------------------------------------------------------------------------
*** Get all sibling provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                     IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ).
    if LINES( LT_GATE ) le 1.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC to LF_SETBY.
    endif.


*** Only go on if not set by user and not empty
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER or
          LS_DIKEY-DIKEY eq 0.

***------------------------------------------------------------------------------------------------
    if LINES( LT_GATE ) eq 1.     " not only me
      LF_FACTOR = 1.
    else.
***   Get Output Web Width (Outbound) as Total and own Web Width (Inbound)
      data(LR_PR_OUTPUT) = cast ZCL_VCXI_P5SS_PR_OUTPUT( ME->GET_PRVDR_OUTPUT( ) ).
      if LR_PR_OUTPUT is bound.
        LS_WEBWI_TOTAL = LR_PR_OUTPUT->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( ).
      endif.
      LS_WEBWI = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_WEBWI( ).

***   Determine Factor based on Area
      if LS_WEBWI_TOTAL-WEBWI gt 0.
        LF_FACTOR = LS_WEBWI-WEBWI / LS_WEBWI_TOTAL-WEBWI.
      else.
        LF_FACTOR = 0.
      endif.
    endif.

    LS_DIKEY-DIKEY = LF_FACTOR * 100.

***------------------------------------------------------------------------------------------------
*** Set Distribution Key
    ME->SET_DIKEY( IS_DIKEY = LS_DIKEY ).

  endmethod.
  method HANDLE_RECALC_PRINT.

    data: LF_SETBY  type /VCXI/VKSR_SETBY.


***------------------------------------------------------------------------------------------------
*** Get Setby
    ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( importing EF_SETBY = LF_SETBY ).

*** Get all sibling provider
    if LINES( ME->R_GATE->GET_PRVDR( IF_INUSE = ABAP_TRUE
                                     IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_SIBLING ) ) le 1.
      LF_SETBY = SPACE.  "No Print Definition if Separation is not active
    else.
      LF_SETBY = switch #( LF_SETBY when SPACE then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                               else LF_SETBY ).
    endif.

*** Only go on if not set by user
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

***------------------------------------------------------------------------------------------------
*** Set forwarded Print Definition
    ME->ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM( IT_PRINT_COM = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_RLFPX( )->T_PRINT
                                               IF_SETBY     = LF_SETBY ).

  endmethod.
  method HANDLE_RECALC_PRODH.

    data: LF_SETBY type /VCXI/VKSR_SETBY.
    data: LR_BL_RLFPROP type ref to ZCL_VCXI_P5SS_BL_RLFPROP.


    ME->GET_PRODH( importing EF_SETBY = LF_SETBY ).

*** Only go on if not set by user
    check LF_SETBY ne /VCXI/CL_VKSR_GATE=>C_SETBY_USER.

*** Set Forwarded Product Hierarchy
    LR_BL_RLFPROP = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_RLFPX( ).
    if LR_BL_RLFPROP is bound.
      ME->SET_PRODH( IF_PRODH = LR_BL_RLFPROP->F_PRODH ).
    endif.

  endmethod.
  method IS_XCONI_COMPATIBLE.

    check SUPER->IS_XCONI_COMPATIBLE( IR_GATE_XCONI = IR_GATE_XCONI ).

    if IR_GATE_XCONI is bound and
       IR_GATE_XCONI->R_CLSPR is instance of ZIF_VCXI_P5SS_COMM_PREV.
      RF_COMPATIBLE = ABAP_TRUE.
    endif.

  endmethod.
  method SET_FOVRR_PRINT.

    data: LF_SETBY type /VCXI/VKSR_SETBY.


    LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE  then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                  when ABAP_FALSE then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                  else SPACE ).

    ME->ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM( IF_SETBY = LF_SETBY ).

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_RLBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLBPX ).

    move IF_RLBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLBPX_CHANGED ).
    endif.

  endmethod.
  method SET_RLFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLFPX ).

    move IF_RLFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RLFPX_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_WIDIM~C_IEVNT_O_WIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_SURWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).

    move IS_SURWT-SURWT     to LS_PARAM-ATFLV.
    move IS_SURWT-SURWT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SURWT_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_WIDIM~C_IEVNT_O_WIDIM_CHANGED ).
    endif.

  endmethod.
  method SET_WEBWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WEBWI ).

    LS_PARAM-ATFLV = IS_WEBWI-WEBWI.
    LS_PARAM-UNIT  = IS_WEBWI-WEBWI_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WEBWI_CHANGED ).
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_WIDIM~C_IEVNT_O_WIDIM_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to RF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_RLBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLBPX ).
    move LS_PARAM-STRNG to EF_RLBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Roll Backward Property Instance
    if RR_BL_RLBPROP is requested.
      RR_BL_RLBPROP = ZCL_VCXI_P5SS_BL_RLBPROP=>FACTORY( IF_RLBPX = EF_RLBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX.

    data: LF_SETBY type /VCXI/VKSR_SETBY.
    data: LT_PRINT_COM type ZVCXI_PXSS_TT_PRINT_COM.


*** Get Roll Forward Property (Inbound)
    RR_BL_RLFPROP = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_RLFPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Get Print Definition (in case of Separation)
    LT_PRINT_COM = ME->ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM( importing EF_SETBY = LF_SETBY ).
    if LF_SETBY is not initial.
      RR_BL_RLFPROP->SET_PRINT( IT_PRINT = LT_PRINT_COM ).
    endif.

*** Product Hierarchy
    RR_BL_RLFPROP->SET_PRODH( IF_PRODH = ME->GET_PRODH( ) ).

***--------------------------------------------------------------------------------------
*** Get new Roll Forward Property XML
    if EF_RLFPX is requested.
      EF_RLFPX = RR_BL_RLFPROP->GET_RLFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_SURWT.

*** Get Surface Weight (Inbound)
    RS_SURWT = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_SURWT( importing EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WEBWI ).
    RS_WEBWI-WEBWI     = LS_PARAM-ATFLV.
    RS_WEBWI-WEBWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_NOUPS.

*** Get Number of Ups (Outbound)
    RF_NOUPS = ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_NOUPS( importing EF_SETBY = EF_SETBY ).

*** Multiply by Number of Outs
    RF_NOUPS *= ME->GET_NOUTT( ).

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_RLBPX.

***--------------------------------------------------------------------------------------
*** Get Roll Backward Property (Outbound)
    RR_BL_RLBPROP = ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLBPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Apply Distribution Key to Cost Split
    RR_BL_RLBPROP->ADJ_CSPLIT_BY_DIKEY( IS_DIKEY = ME->GET_DIKEY( ) ).

*** Apply Number of Outs to Cost Split
    RR_BL_RLBPROP->ADJ_CSPLIT_BY_NOUTT( IF_NOUTT = ME->GET_NOUTT( ) ).

***--------------------------------------------------------------------------------------
*** Return XML
    if EF_RLBPX is requested.
      move RR_BL_RLBPROP->GET_RLBPX( ) to EF_RLBPX.
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_RLFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_RLFPX ).
    move LS_PARAM-STRNG to EF_RLFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Roll Forward Property Instance
    if RR_BL_RLFPROP is requested.
      RR_BL_RLFPROP = ZCL_VCXI_P5SS_BL_RLFPROP=>FACTORY( IF_RLFPX = EF_RLFPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_SURWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SURWT ).
    move LS_PARAM-ATFLV to RS_SURWT-SURWT.
    move LS_PARAM-UNIT  to RS_SURWT-SURWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_P5SS_COMM_PREV~GET_WEBWI.

*** Get Web Width (Outbound)
    RS_WEBWI = ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( importing EF_SETBY = EF_SETBY ).

*** Multiply by Number of Outs
    RS_WEBWI-WEBWI *= ME->GET_NOUTT( ).

  endmethod.
  method ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD.

    data: LF_NOUPS type ZVCXI_PXS_NOUPS.
    data: LS_WEBWI      type ZVCXI_PXS_S_WEBWI,
          LS_WEBWI_PREV type ZVCXI_PXS_S_WEBWI.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV  type ref to ZIF_VCXI_P5SS_COMM_PREV,
          LR_BL_RLBPROP type ref to ZCL_VCXI_P5SS_BL_RLBPROP.


*** Super
    SUPER->ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD( IT_GATE = IT_GATE ).

***------------------------------------------------------------------------------------------------
*** Create new Backward Property Instance
    LR_BL_RLBPROP = ZCL_VCXI_P5SS_BL_RLBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***   Get Sum of Web Width
      LS_WEBWI_PREV = LR_COMM_PREV->GET_WEBWI( ).
      if LS_WEBWI is initial.
        move LS_WEBWI_PREV to LS_WEBWI.
      else.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_WEBWI_PREV-WEBWI
                                                            IF_CALCV_UOM_1 = LS_WEBWI_PREV-WEBWI_UOM
                                                            IF_CALCV_2     = LS_WEBWI-WEBWI
                                                            IF_CALCV_UOM_2 = LS_WEBWI-WEBWI_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_WEBWI-WEBWI_UOM
                                                  importing EF_CALCV       = LS_WEBWI-WEBWI
                                                            EF_CALCV_UOM   = LS_WEBWI-WEBWI_UOM ).
      endif.

***   Get Sum of Number of Ups
      LF_NOUPS += LR_COMM_PREV->GET_NOUPS( ).

***   Combine Backward Property
      LR_BL_RLBPROP->MERGE( IR_BL_RLBPROP = LR_COMM_PREV->GET_RLBPX( ) ).
    endloop.

***------------------------------------------------------------------------------------------------
*** Backward Web Width
    ME->SET_WEBWI( IS_WEBWI = LS_WEBWI ).

*** Backward Number of Ups
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

*** Backward Backward Property XML
    ME->SET_RLBPX( IF_RLBPX = LR_BL_RLBPROP->GET_RLBPX( ) ).

  endmethod.
  method ZIF_VCXI_PXSS_COMM_PREV~DO_FORWARD.

    data: LS_SURWT      type ZVCXI_PXS_S_SURWT,
          LS_SURWT_NEXT type ZVCXI_PXS_S_SURWT.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_NEXT       type ref to ZIF_VCXI_P5SS_COMM_NEXT,
          LR_BL_RLFPROP      type ref to ZCL_VCXI_P5SS_BL_RLFPROP,
          LR_BL_RLFPROP_NEXT type ref to ZCL_VCXI_P5SS_BL_RLFPROP.

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_NEXT.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_NEXT.
      endtry.
      check LR_COMM_NEXT is bound.

***   Get Sum of Surface Weight
      LS_SURWT_NEXT = LR_COMM_NEXT->GET_SURWT( ).
      if LS_SURWT_NEXT is not initial.
        if LS_SURWT is initial.
          move LS_SURWT_NEXT to LS_SURWT.
        else.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT_NEXT-SURWT
                                                              IF_CALCV_UOM_1 = LS_SURWT_NEXT-SURWT_UOM
                                                              IF_CALCV_2     = LS_SURWT-SURWT
                                                              IF_CALCV_UOM_2 = LS_SURWT-SURWT_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                              IF_UOM         = LS_SURWT-SURWT_UOM
                                                    importing EF_CALCV       = LS_SURWT-SURWT
                                                              EF_CALCV_UOM   = LS_SURWT-SURWT_UOM ).

        endif.
      endif.

***   Combine Roll Forward Property
      LR_BL_RLFPROP_NEXT = LR_COMM_NEXT->GET_RLFPX( ).
      if LR_BL_RLFPROP is not bound.
        move LR_BL_RLFPROP_NEXT to LR_BL_RLFPROP.
      else.
        LR_BL_RLFPROP->MERGE( IR_BL_RLFPROP = LR_BL_RLFPROP_NEXT ).
      endif.

    endloop.

*** Forward Surface Weight
    ME->SET_SURWT( IS_SURWT = LS_SURWT ).

*** Forward Roll Forward Property XML
    if LR_BL_RLFPROP is bound.
      ME->SET_RLFPX( IF_RLFPX = LR_BL_RLFPROP->GET_RLFPX( ) ).
    else.
      ME->SET_RLFPX( IF_RLFPX = SPACE ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~GET_PRINT_COM.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_PRINT = RT_PRINT_COM.
    endif.
    EF_SETBY = LS_PARAM-SETBY.


***--------------------------------------------------------------------------------------
*** Fallback in case of no Separation
    if EF_SETBY eq SPACE.
      RT_PRINT_COM = ME->ZIF_VCXI_P5SS_COMM_PREV~GET_RLFPX( )->T_PRINT.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~IS_EDIT_ALLOWED.

    RF_EDITABLE = switch #( ME->GET_FOVRR_PRINT( ) when ABAP_TRUE then ABAP_TRUE
                                                   else ABAP_FALSE ).

  endmethod.
  method ZIF_VCXI_PXSS_PRINT_COM~SET_PRINT_COM.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRINT ).

    if IT_PRINT_COM is supplied.
      call transformation ID
           source T_PRINT = IT_PRINT_COM
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRINT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_WIDIM~GET_RHNDL_DFLT.
*** Default must be "static" to ensure S&U remains valid and can thereby not depend on the Work Center (SFG Default)

    data: LF_IMFXC type ZVCXI_XCSP_IMFXC.
    data: LS_RHNDL     type ZVCXI_PXSR_S_RHNDL.
    data: LR_APPDATA  type ref to ZCL_VCXI_XCS_APPDATA.


***--------------------------------------------------------------------------------------
*** Get Default Values based on Ship-to of Connection Out
    LR_APPDATA ?= ME->R_GATE->GET_APPDATA( ).
    RS_RHNDL_DFLT = ZCL_VCXI_PXSS_BL_RHNDL=>GET_DFLT_FG( IF_WERKS = ME->GET_WERKS( )
                                                         IF_KUNWE = ME->GET_KUNWE( )
                                                         IF_KUNAG = LR_APPDATA->S_KNA1_AG-KUNNR ).

***--------------------------------------------------------------------------------------
*** Get Roll Handling In of "connected" Routing Supervisor
    data(LT_GATE_RTESPV) = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_PXSR_PR_RTESPV=>C_IPRVT_PX_RTESPV
                                                  IF_INUSE  = ABAP_TRUE ).
    check LT_GATE_RTESPV is not initial.
    data(LR_PR_RTESPV_XCONO) = cast ZCL_VCXI_PXSR_PR_RTESPV( LT_GATE_RTESPV[ 1 ]->R_CLSPR ).
    data(LR_PR_RTESPV_XCONI) = LR_PR_RTESPV_XCONO->GET_PRVDR_RTESPV_BY_XCONO( exporting IR_GATE_XCONO = ME->R_GATE
                                                                              importing EF_IMFXC      = LF_IMFXC ).
    check LR_PR_RTESPV_XCONI is bound.

*** Get corresponding Roll Handling
    LS_RHNDL = LR_PR_RTESPV_XCONI->GET_RHNDL_IN( IF_IMFXC = LF_IMFXC ).

*** Winding Information
    RS_RHNDL_DFLT-WISID = LS_RHNDL-WISID.
    RS_RHNDL_DFLT-WIDIR = LS_RHNDL-WIDIR.
    RS_RHNDL_DFLT-EYEMP = LS_RHNDL-EYEMP.

  endmethod.
  method ZIF_VCXI_PXSS_WIDIM~GET_WISWG.

*** Surface Weight (Outbound)
    RS_WISWG = corresponding #( ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_SURWT( )
                                mapping WISWG     = SURWT
                                        WISWG_UOM = SURWT_UOM ).

  endmethod.
  method ZIF_VCXI_PXSS_WIDIM~GET_WITHI.

*** Get Caliper of Forward Property XML (Outbound)
    RS_WITHI = corresponding #( ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_RLFPX( )->S_CALIP
                                mapping WITHI     = CALIP
                                        WITHI_UOM = CALIP_UOM ).

  endmethod.
  method ZIF_VCXI_PXSS_WIDIM~GET_WIWID.

*** Web Width (Outbound)
    RS_WIWID = corresponding #( ME->ZIF_VCXI_P5SS_COMM_NEXT~GET_WEBWI( )
                                mapping WIWID     = WEBWI
                                        WIWID_UOM = WEBWI_UOM ).

  endmethod.
