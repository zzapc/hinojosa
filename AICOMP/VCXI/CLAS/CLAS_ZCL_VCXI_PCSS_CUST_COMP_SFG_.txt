
class ZCL_VCXI_PCSS_CUST_COMP_SFG definition
  public
  inheriting from ZCL_VCXI_P0SS_CUST_COMP_SFG
  create protected .

public section.

  data F_FLUTE type ZVCXI_PCS_FLUTE read-only .
  data F_PBDES type ZVCXI_PCSS_PBDES read-only .
  data F_SBDES type ZVCXI_PCSS_SBDES read-only .
  data F_FEFCO type ZVCXI_PCS_FEFCO read-only .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_PC_COMP_SFG
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_PCSS_CUST_COMP_SFG
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_SETID_PCS_COMP_SFG type /VCXI/CKXC_SETID value 'ZVCXI_PCS_C_SFG'. "#EC NOTEXT
private section.
endclass. "ZCL_VCXI_PCSS_CUST_COMP_SFG definition
class ZCL_VCXI_PCSS_CUST_COMP_SFG implementation.
method CONSTRUCTOR.

  data:  LF_OBJNUM    type        OBJNUM.
  data:  LS_SETVA     type        /VCXI/CKXC_S_SETVA,
         LS_MAPVC     type        /VCXI/CKXC_S_MAPVC.
  data:  LT_SETVA     type        /VCXI/CKXC_TT_SETVA.

  try.
      SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                          IF_WERKS = IF_WERKS
                          IF_DATE  = IF_DATE ).

***   Get Component SFG Info
      move ME->F_MATNR to LF_OBJNUM.
      LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_PCS_COMP_SFG
                                               IF_OBJNUM = LF_OBJNUM ).
***   Check if Classification is active
      read table LT_SETVA into LS_SETVA index 1.
      if  LS_SETVA-ATNAM is initial.
        clear: LF_OBJNUM.
        concatenate ME->F_MATNR ME->F_WERKS into LF_OBJNUM.
        LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = C_SETID_PCS_COMP_SFG
                                                 IF_OBJNUM = LF_OBJNUM ).
      endif.

      loop at LT_SETVA into LS_SETVA.
        clear: LS_MAPVC.

        case LS_SETVA-MAPID.
          when 'PBDES'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_PBDES.

          when 'SBDES'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_SBDES.

          when 'FLUTE'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_FLUTE.

          when 'FEFCO'.
            read table LS_SETVA-T_MAPVC into LS_MAPVC index 1.
            move LS_MAPVC-VAMAP     to ME->F_FEFCO.

        endcase.
      endloop.

    cleanup.
      ME->DO_FREE( ).
  endtry.

endmethod.
method GET_INSTANCE_PC_COMP_SFG.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE
             into LS_INSTANCE
             with key MATNR = IF_MATNR
                      WERKS = IF_WERKS
                      DATE  = IF_DATE.

  if SY-SUBRC eq 0.
    try.
        move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
      catch CX_SY_MOVE_CAST_ERROR.
        delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
        clear RR_INSTANCE.
    endtry.
  endif.

  if RR_INSTANCE is initial.
    try.
        create object RR_INSTANCE
          exporting
            IF_MATNR = IF_MATNR
            IF_WERKS = IF_WERKS
            IF_DATE  = IF_DATE.
      cleanup.
        clear RR_INSTANCE.
    endtry.
  endif.

endmethod.
