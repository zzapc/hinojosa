
class ZCL_VCXI_FFSS_UI_EXTR definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  interfaces /VCXI/IF_VKSU_UIFW .

  types:
    begin of YS_FISTY,
             FISTY       type ZVCXI_FFS_FISTY,
             FISTY_DESCR type /VCXI/CKX_DESCR,
           end of YS_FISTY .

  data S_EXTR_VIS type ZVCXI_FFSS_S_EXTR_VIS read-only .
  data F_CURSOR type SCRFNAME .
  constants C_CLSUI_RECI type /VCXI/VKSC_CLSUI value 'RECI' ##NO_TEXT.

  methods SHLP_FISTY
    exporting
      !EF_FISTY type ZVCXI_FFS_FISTY
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_EXTR_VIS
    importing
      !IS_EXTR_VIS type ZVCXI_FFSS_S_EXTR_VIS
    raising
      /VCXI/CX_CKX .
  methods GET_REGISTERED_UI_INFO
    importing
      !IF_CLSUI type /VCXI/VKSC_CLSUI
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  data R_REGISTERED_UI_RECI type ref to /VCXI/CL_VKSU_CLSUI .
  data R_PR_EXTR type ref to ZCL_VCXI_FFSS_PR_EXTR .
  data S_DYNP_BLANK type /VCXI/CKX_S_DYNP_KEY .
  constants C_UC_FSTRC type SYUCOMM value 'EXTR_FSTRC' ##NO_TEXT.

  methods DISPLAY_SUBSCREEN
    raising
      /VCXI/CX_CKX .
  methods INIT_BLANK_UI
    raising
      /VCXI/CX_CKX .
  methods OPEN_SUBSCREEN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_CLSUI) type ref to /VCXI/CL_VKSRU_CLSUI
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_FSTRC
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_FFSS_UI_EXTR definition
class ZCL_VCXI_FFSS_UI_EXTR implementation.
  method /VCXI/IF_VKSU_UIFW~DO_MODIFY_SCREEN.
    return.
  endmethod.
  method /VCXI/IF_VKSU_UIFW~DO_USER_COMMAND.

    data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
***   Recipe UI Command
        if ME->R_REGISTERED_UI_RECI is bound.
          ME->R_REGISTERED_UI_RECI->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method /VCXI/IF_VKSU_UIFW~REFRESH_SCREEN.

    ME->R_UIFW->REFRESH_SCREEN( ).

  endmethod.
  method /VCXI/IF_VKSU_UIFW~REGISTER_UI.

    data: LR_UI_RECI type ref to ZCL_VCXI_FFSS_UI_MS_RECI.

    try.
***   Check if UI is Recipe UI
        move IR_UI ?to LR_UI_RECI.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.

    if LR_UI_RECI is bound.
      do.
        if ME->R_REGISTERED_UI_RECI is not bound.
          exit.
        endif.
        ME->R_REGISTERED_UI_RECI->DEACTIVATE( ).
      enddo.

      move IR_UI ?to ME->R_REGISTERED_UI_RECI.

    endif.

  endmethod.
  method /VCXI/IF_VKSU_UIFW~UNREGISTER_UI.

    if IR_UI eq ME->R_REGISTERED_UI_RECI.
      clear ME->R_REGISTERED_UI_RECI.
    endif.

  endmethod.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
    call function 'ZVCXI_FFSS_UI_EXTR_BIND'
      exporting
        IR_UI_EXTR   = ME
      importing
        ES_DYNP      = ME->S_DYNP.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign th RP Class to the UI Class
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_EXTR.
      catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

*** Initialize Blank UI
    ME->INIT_BLANK_UI( ).

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

*** Deactivate Registered UI Recipe
    if ME->R_REGISTERED_UI_RECI is bound.
      ME->R_REGISTERED_UI_RECI->DEACTIVATE( ).
    endif.

  endmethod.
  method DISPLAY_SUBSCREEN.

  data:           LT_GATE            type         /VCXI/VKSR_TT_GATE,
                  LT_PRVDR_DEF       type         /VCXI/VKSR_TT_PRVDR_DEF.
  data:           LS_PRVDR_DEF       type         /VCXI/VKSR_S_PRVDR_DEF.
  data:           LR_GATE            type ref to  /VCXI/CL_VKSR_GATE.

***------------------------------------------------------------------
*** Get Children
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into LR_GATE index 1.
    check LR_GATE               is bound and
          LR_GATE->GET_CLSUI( ) is not initial.
    ME->OPEN_SUBSCREEN( IR_GATE = LR_GATE ).
  endloop.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED    type        /VCXI/CKX_LOCKED,
          LF_INUSE     type        /VCXI/VKSR_INUSE,
          LF_TEXTR_FIX type        ABAP_BOOL.
    data: LR_CX_CKX    type ref to /VCXI/CX_CKX.

    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Is Extrusion Type defined by Recipe
        ME->R_PR_EXTR->GET_TEXTR( importing EF_FIX = LF_TEXTR_FIX ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

        loop at screen.
***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       Extrusion Type Fix?
          if SCREEN-GROUP1 eq 'TEX' and
             LF_TEXTR_FIX  eq ABAP_TRUE.
            SCREEN-INPUT = 0.
          endif.

***       Optimized Extrusion Width
          if SCREEN-GROUP1 eq 'OEX' and
             ME->S_EXTR_VIS-FOPEX is not initial.
            move 1 to SCREEN-INVISIBLE.
            move 0 to SCREEN-INPUT.
          endif.

***       Disable Trim on Width if allowed
          if SCREEN-GROUP1 = 'TRW' and
             ME->R_PR_EXTR->IS_FTRAL( ) ne ABAP_TRUE.
            SCREEN-INPUT = 0.
          endif.

***       Disable Optimize Extrusion Width is allowed
          if SCREEN-GROUP1 = 'OEW' and
             ME->R_PR_EXTR->IS_OEWAL( ) ne ABAP_TRUE.
            SCREEN-INPUT = 0.
          endif.

***       Check if Input has only one Inbound
          if SCREEN-GROUP1 = '1IN'.
            if ME->R_PR_EXTR->IS_ONLY_ONE_IN( ) eq ABAP_TRUE.
              move 0 to SCREEN-ACTIVE.
            endif.
          endif.
***       Hide on Mutliple Inbound
          if SCREEN-GROUP2 = 'XIN'.
            if ME->R_PR_EXTR->IS_ONLY_ONE_IN( ) ne ABAP_TRUE.
              move 0 to SCREEN-INPUT.
            endif.
          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.

          modify screen.
        endloop.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

*** Initialize Visualization Structure
    ME->INIT_VIS( ).

*** Display Subscreen
    ME->DISPLAY_SUBSCREEN( ).

  endmethod.
  method DO_UPDATE_EXTR_VIS.

    check ME->R_PR_EXTR is bound.

***--------------------------------------------------------------------------------------
*** Set Extrusion Type
    if ME->S_EXTR_VIS-TEXTR ne IS_EXTR_VIS-TEXTR.
      ME->R_PR_EXTR->SET_TEXTR( IF_TEXTR = IS_EXTR_VIS-TEXTR
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Film Style
    if ME->S_EXTR_VIS-FISTY ne IS_EXTR_VIS-FISTY.
      ME->R_PR_EXTR->SET_FISTY( IF_FISTY = IS_EXTR_VIS-FISTY
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Film Thickness (Internal)
    if ME->S_EXTR_VIS-FITIN ne IS_EXTR_VIS-FITIN.
      ME->R_PR_EXTR->SET_FITIN( IS_FITIN = IS_EXTR_VIS-S_FITIN
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Film Thickness (External)
    if ME->S_EXTR_VIS-FITEX ne IS_EXTR_VIS-FITEX.
      ME->R_PR_EXTR->SET_FITEX( IS_FITEX = IS_EXTR_VIS-S_FITEX
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Number of Outs
    if ME->S_EXTR_VIS-NOOUT ne IS_EXTR_VIS-NOOUT.
      ME->R_PR_EXTR->SET_NOOUT( IF_NOOUT = IS_EXTR_VIS-NOOUT
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Trim on Width
    if ME->S_EXTR_VIS-TRWID ne IS_EXTR_VIS-TRWID.
      ME->R_PR_EXTR->SET_TRWID( IS_TRWID = IS_EXTR_VIS-S_TRWID
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Flag Optimized Extrusion Width
    if ME->S_EXTR_VIS-FOPEX ne IS_EXTR_VIS-FOPEX.
      ME->R_PR_EXTR->SET_FOPEX( IF_FOPEX = IS_EXTR_VIS-FOPEX ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Reverse Film Structure
    if ME->S_EXTR_VIS-FRFST ne IS_EXTR_VIS-FRFST.
      ME->R_PR_EXTR->SET_FRFST( IF_FRFST = IS_EXTR_VIS-FRFST
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Reduction on Width
    if ME->S_EXTR_VIS-S_REDUW ne IS_EXTR_VIS-S_REDUW.
      ME->R_PR_EXTR->SET_REDUW( IS_REDUW = IS_EXTR_VIS-S_REDUW
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Flag - Ignore Trim Requirement on Width
    if ME->S_EXTR_VIS-FITRW ne IS_EXTR_VIS-FITRW.
      ME->R_PR_EXTR->SET_FITRW( IF_FITRW = IS_EXTR_VIS-FITRW
                                IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    data:  LF_UCOMM type SYUCOMM.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    case IF_UCOMM.
      when C_UC_FSTRC.
        ME->HANDLE_UC_FSTRC( ).
    endcase.

    move IF_UCOMM to LF_UCOMM.
    ME->/VCXI/IF_VKSU_UIFW~DO_USER_COMMAND( changing CF_UCOMM = LF_UCOMM ).

  endmethod.
  method GET_REGISTERED_UI_INFO.

    try.
        case IF_CLSUI.
          when C_CLSUI_RECI.
***         Recipe
            if ME->R_REGISTERED_UI_RECI is bound.
              move ME->R_REGISTERED_UI_RECI->S_DYNP to RS_DYNP.
            else.
              move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
              move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
            endif.
        endcase.

      catch /VCXI/CX_CKX.
        move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
        move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
    endtry.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_EXTR.

  endmethod.
  method HANDLE_UC_FSTRC.

    data: LR_BL_FISTRUCT           type ref to ZCL_VCXI_FFSS_BL_FISTRUCT.

*** Get Film Structure (Inbound)
    ME->R_PR_EXTR->GET_FISTX( importing ER_BL_FISTRUCT = LR_BL_FISTRUCT ).

*** Start Popup
    check LR_BL_FISTRUCT is bound.
    ZCL_VCXI_FFSS_POPUP_FISTRUCT=>START( IR_BL_FISTRUCT = LR_BL_FISTRUCT ).

  endmethod.
  method INIT_BLANK_UI.

    data:  LR_CLSUI type ref to /VCXI/CL_VKSU_CLSUI.

    create object LR_CLSUI
      exporting
        IR_UIFW = ME.

    LR_CLSUI->ACTIVATE( ).
    move LR_CLSUI->S_DYNP to ME->S_DYNP_BLANK.

  endmethod.
  method INIT_VIS.

    free: ME->S_EXTR_VIS.
    check ME->R_PR_EXTR is bound.

***--------------------------------------------------------------------------------------
*** Get Extrusion Type
    ME->R_PR_EXTR->GET_TEXTR( importing EF_TEXTR = ME->S_EXTR_VIS-TEXTR
                                        EF_DESCR = ME->S_EXTR_VIS-TEXTR_DESCR ).

***--------------------------------------------------------------------------------------
*** Film Type
    ME->R_PR_EXTR->GET_TFILM( importing EF_TFILM = ME->S_EXTR_VIS-TFILM ).

***--------------------------------------------------------------------------------------
*** Film Style
    ME->R_PR_EXTR->GET_FISTY( importing EF_FISTY       = ME->S_EXTR_VIS-FISTY
                                        EF_FISTY_DESCR = ME->S_EXTR_VIS-FISTY_DESCR ).

***--------------------------------------------------------------------------------------
*** Get Film Width
    ME->R_PR_EXTR->ZIF_VCXI_FFSS_COMM_NEXT~GET_FIWID( importing ES_FIWID = ME->S_EXTR_VIS-S_FIWID ).

*** Get Film Thickness (Internal)
    ME->R_PR_EXTR->GET_FITIN( importing ES_FITIN = ME->S_EXTR_VIS-S_FITIN ).

*** Get Film Thickness (External)
    ME->R_PR_EXTR->GET_FITEX( importing ES_FITEX = ME->S_EXTR_VIS-S_FITEX ).

*** Get Surface Weight
    ME->R_PR_EXTR->GET_SURWT( importing ES_SURWT = ME->S_EXTR_VIS-S_SURWT ).
    move ME->S_EXTR_VIS-S_SURWT-SURWT_UOM to ME->S_EXTR_VIS-SURWT_UOMC6.

***--------------------------------------------------------------------------------------
*** Get Number of Outs
    ME->R_PR_EXTR->GET_NOOUT( importing EF_NOOUT = ME->S_EXTR_VIS-NOOUT ).

***--------------------------------------------------------------------------------------
*** Get Flag Optimized Extrusion Width
    move ME->R_PR_EXTR->GET_FOPEX( ) to ME->S_EXTR_VIS-FOPEX.

*** Get Trim on Width
    ME->R_PR_EXTR->GET_TRWID( importing ES_TRWID = ME->S_EXTR_VIS-S_TRWID ).

*** Get Extrusion Width
    ME->R_PR_EXTR->GET_EXWID( importing ES_EXWID = ME->S_EXTR_VIS-S_EXWID ).

***--------------------------------------------------------------------------------------
*** Get Flag Reverse Film Structure
    ME->R_PR_EXTR->GET_FRFST( importing EF_FRFST = ME->S_EXTR_VIS-FRFST ).

***--------------------------------------------------------------------------------------
*** Reduction on Width
    ME->R_PR_EXTR->GET_REDUW( importing ES_REDUW = ME->S_EXTR_VIS-S_REDUW ).

*** Flag - Ignore Trim Requirement on Width
    ME->R_PR_EXTR->GET_FITRW( importing EF_FITRW = ME->S_EXTR_VIS-FITRW ).

  endmethod.
  method OPEN_SUBSCREEN.

    data:LF_CLSUI type /VCXI/VKSC_CLSUI.

    if IR_GATE is bound.
      LF_CLSUI = IR_GATE->GET_CLSUI( ).
    endif.

    if LF_CLSUI is not initial.
*** Create Subscreen
      create object RR_CLSUI
        type
          (LF_CLSUI)
        exporting
          IR_UIFW    = ME
          IR_UIGATE  = ME->R_UIGATE
          IR_GATE    = IR_GATE.
      RR_CLSUI->ACTIVATE( ).
    else.
*** Clear Subscreen
      case LF_CLSUI.
        when 'ZCL_VCXI_FFSS_UI_MS_RECI'.
          if ME->R_REGISTERED_UI_RECI is bound.
            ME->R_REGISTERED_UI_RECI->DEACTIVATE( ).
          endif.
      endcase.
    endif.

  endmethod.
  method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.

  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

  endmethod.
  method SHLP_FISTY.

    data: LS_RETTAB type          DDSHRETVAL.
    data: LT_FISTY  type table of YS_FISTY,
          LT_RETTAB type table of DDSHRETVAL.
    data: LR_CX_CKX type ref to   /VCXI/CX_CKX.

    try.
        check ME->R_PR_EXTR is bound.
        ME->R_PR_EXTR->GET_VALID_FISTY( importing ET_FISTY = LT_FISTY ).

        call function 'F4IF_INT_TABLE_VALUE_REQUEST'
          exporting
            RETFIELD        = 'FISTY'
            VALUE_ORG       = 'S'
          tables
            VALUE_TAB       = LT_FISTY
            RETURN_TAB      = LT_RETTAB
          exceptions
            PARAMETER_ERROR = 1
            NO_VALUES_FOUND = 2
            others          = 3.

        if SY-SUBRC eq 0.
          read table LT_RETTAB index 1 into LS_RETTAB.
          if SY-SUBRC eq 0.
            move LS_RETTAB-FIELDVAL to EF_FISTY.
          endif.
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
