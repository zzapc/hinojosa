
class ZCL_VCXI_PXSS_CUST_WPATCH definition
  public
  inheriting from ZCL_VCXI_XCS_CUST_MATNR
  create public .

public section.

  data S_WPLEN type ZVCXI_PXS_S_WPLEN read-only .
  data S_WPWID type ZVCXI_PXS_S_WPWID read-only .
  data S_WPARE type ZVCXI_PXS_S_WPARE read-only .
  data S_SURWT type ZVCXI_PXS_S_SURWT read-only .

  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE_WPATCH
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_PXSS_CUST_WPATCH
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_WPARE_UOM type UNIT value 'CM2' ##NO_TEXT.
  constants C_SURWT_UOM type UNIT value 'GM2' ##NO_TEXT.
  constants C_BRGEW_UOM type UNIT value 'G' ##NO_TEXT.
  constants C_WGTLE_UOM type UNIT value 'M' ##NO_TEXT.
  constants C_WGTAR_UOM type UNIT value 'M2' ##NO_TEXT.
  constants C_DIMID_AREA type DIMID value 'SURFAC' ##NO_TEXT.
  constants C_DIMID_LENGTH type DIMID value 'LENGTH' ##NO_TEXT.
  constants C_DIMID_PC type DIMID value 'AAAADL' ##NO_TEXT.

  methods LOAD_BY_MM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_CUST_WPATCH definition
class ZCL_VCXI_PXSS_CUST_WPATCH implementation.
  method CONSTRUCTOR.


    try.
        SUPER->CONSTRUCTOR( IF_MATNR = IF_MATNR
                            IF_WERKS = IF_WERKS
                            IF_DATE  = IF_DATE ).

***     Load Data by Material Master
        ME->LOAD_BY_MM( ).

      cleanup.
        ME->DO_FREE( ).
    endtry.

  endmethod.
  method GET_INSTANCE_WPATCH.

    data:  LS_INSTANCE type YS_INSTANCE.

***--------------------------------------------------------------------------------------
*** Check for buffered instance and ensure correct Class Type
    read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE into LS_INSTANCE
                                                   with key MATNR = IF_MATNR
                                                            WERKS = IF_WERKS
                                                            DATE  = IF_DATE.
    if SY-SUBRC eq 0.
      try.
          move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
        catch CX_SY_MOVE_CAST_ERROR.
          delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
          clear RR_INSTANCE.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
    if RR_INSTANCE is initial.
      try.
***       Constructor call of redefined Class
          create object RR_INSTANCE
            exporting
              IF_MATNR = IF_MATNR
              IF_WERKS = IF_WERKS
              IF_DATE  = IF_DATE.

        cleanup.
          clear RR_INSTANCE.
      endtry.
    endif.

  endmethod.
  method LOAD_BY_MM.

    data: LF_MEINS type MEINS,
          LF_DIMID type DIMID,
          LF_LAENG type LAENG,
          LF_BREIT type BREIT,
          LF_MEABM type MEABM,
          LF_BRGEW type BRGEW,
          LF_GEWEI type GEWEI.
    data: LS_BRGEW_AREA type ZVCXI_XCS_S_VALUE.


*** Get Material Length Dimensions and Dimension ID
    select single MARA~MEINS, T006~DIMID, MARM~LAENG, MARM~BREIT, MARM~MEABM, MARM~BRGEW, MARM~GEWEI
      into (@LF_MEINS, @LF_DIMID, @LF_LAENG, @LF_BREIT, @LF_MEABM, @LF_BRGEW, @LF_GEWEI)
      from MARA as MARA
      inner join MARM as MARM
        on MARA~MATNR eq MARM~MATNR and
           MARA~MEINS eq MARM~MEINH
      inner join T006 as T006
        on MARA~MEINS eq T006~MSEHI
      where MARA~MATNR eq @ME->F_MATNR.

    if SY-SUBRC eq 0.
      ME->S_WPLEN-WPLEN     = LF_LAENG.
      ME->S_WPLEN-WPLEN_UOM = LF_MEABM.
      ME->S_WPWID-WPWID     = LF_BREIT.
      ME->S_WPWID-WPWID_UOM = LF_MEABM.
    endif.

*** Get Area Dimension
    if LF_DIMID ne C_DIMID_AREA and
       ZCL_VCXI_XCS_SERVICE_UNIT=>IS_MATNR_UNIT( IF_MATNR = ME->F_MATNR
                                                 IF_UOM   = C_WPARE_UOM ) eq ABAP_TRUE.

      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_MATNR_UNIT( exporting IF_MATNR     = ME->F_MATNR
                                                               IF_VALUE_IN  = 1
                                                               IF_UOM_IN    = 'ST'
                                                               IF_UOM_OUT   = C_WPARE_UOM
                                                     importing EF_VALUE_OUT = ME->S_WPARE-WPARE
                                                               EF_UOM_OUT   = ME->S_WPARE-WPARE_UOM ).

    endif.

*** Calculate Area Dimension
    if ME->S_WPARE       is initial     and
       ME->S_WPLEN-WPLEN is not initial and
       ME->S_WPWID-WPWID is not initial and
       LF_MEABM          is not initial.

      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ME->S_WPLEN-WPLEN
                                                          IF_CALCV_UOM_1 = ME->S_WPLEN-WPLEN_UOM
                                                          IF_CALCV_2     = ME->S_WPWID-WPWID
                                                          IF_CALCV_UOM_2 = ME->S_WPWID-WPWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = C_WPARE_UOM
                                                importing EF_CALCV       = ME->S_WPARE-WPARE
                                                          EF_CALCV_UOM   = ME->S_WPARE-WPARE_UOM ).

    endif.

*** Get/Calculate Surface Weight
    case LF_DIMID.
      when C_DIMID_PC.
***     Surface Weight for PC
        if LF_BRGEW          is not initial and
           ME->S_WPARE-WPARE is not initial.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LF_BRGEW
                                                              IF_CALCV_UOM_1 = LF_GEWEI
                                                              IF_CALCV_2     = ME->S_WPARE-WPARE
                                                              IF_CALCV_UOM_2 = ME->S_WPARE-WPARE_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                              IF_UOM         = C_SURWT_UOM
                                                    importing EF_CALCV       = ME->S_SURWT-SURWT
                                                              EF_CALCV_UOM   = ME->S_SURWT-SURWT_UOM ).
        endif.

      when C_DIMID_AREA.
***     Surface Weight for Area
        if LF_BRGEW is not initial.
          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LF_BRGEW
                                                              IF_CALCV_UOM_1 = LF_GEWEI
                                                              IF_CALCV_2     = 1
                                                              IF_CALCV_UOM_2 = LF_MEINS
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                              IF_UOM         = C_SURWT_UOM
                                                    importing EF_CALCV       = ME->S_SURWT-SURWT
                                                              EF_CALCV_UOM   = ME->S_SURWT-SURWT_UOM ).
        endif.

      when C_DIMID_LENGTH.
***     Surface Weight for Length
        if ME->S_WPWID-WPWID is not initial and
           ZCL_VCXI_XCS_SERVICE_UNIT=>IS_MATNR_UNIT( IF_MATNR = ME->F_MATNR
                                                     IF_UOM   = C_BRGEW_UOM ) eq ABAP_TRUE.

          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_MATNR_UNIT( exporting IF_MATNR     = ME->F_MATNR
                                                                   IF_VALUE_IN  = 1
                                                                   IF_UOM_IN    = C_WGTLE_UOM
                                                                   IF_UOM_OUT   = C_BRGEW_UOM
                                                         importing EF_VALUE_OUT = LF_BRGEW
                                                                   EF_UOM_OUT   = LF_GEWEI ).

          ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = 1
                                                              IF_CALCV_UOM_1 = C_WGTLE_UOM
                                                              IF_CALCV_2     = ME->S_WPWID-WPWID
                                                              IF_CALCV_UOM_2 = ME->S_WPWID-WPWID_UOM
                                                              IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                              IF_UOM         = C_WGTAR_UOM
                                                    importing EF_CALCV       = LS_BRGEW_AREA-VALUE
                                                              EF_CALCV_UOM   = LS_BRGEW_AREA-VALUE_UOM ).

          if LS_BRGEW_AREA-VALUE is not initial.
            ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LF_BRGEW
                                                                IF_CALCV_UOM_1 = LF_GEWEI
                                                                IF_CALCV_2     = LS_BRGEW_AREA-VALUE
                                                                IF_CALCV_UOM_2 = LS_BRGEW_AREA-VALUE_UOM
                                                                IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                                IF_UOM         = C_SURWT_UOM
                                                      importing EF_CALCV       = ME->S_SURWT-SURWT
                                                                EF_CALCV_UOM   = ME->S_SURWT-SURWT_UOM ).
          endif.
        endif.
    endcase.

  endmethod.
