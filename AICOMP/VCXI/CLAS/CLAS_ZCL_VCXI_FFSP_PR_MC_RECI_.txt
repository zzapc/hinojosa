
class ZCL_VCXI_FFSP_PR_MC_RECI definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MC
  create public .

public section.

  constants C_IPRVT_MC_RECI type /VCXI/VKSC_IPRVT value 'ZVCXI_FFSP_MC_RECI' ##NO_TEXT.
  constants C_PARID_EXWID type /VCXI/VKS_PARID value 'ZVCXI_FF_EXWID' ##NO_TEXT.
  constants C_PARID_FITIN type /VCXI/VKS_PARID value 'ZVCXI_FF_FITIN' ##NO_TEXT.
  constants C_PARID_FITEX type /VCXI/VKS_PARID value 'ZVCXI_FF_FITEX' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCO
    exporting
      !ES_AVGCO type ZVCXI_XCS_S_AVGCO
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_AVGCP
    exporting
      !ES_AVGCP type ZVCXI_XCS_S_AVGCP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_EXWID
    exporting
      !ES_EXWID type ZVCXI_FFS_S_EXWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCO
    importing
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_AVGCP
    importing
      !IS_AVGCP type ZVCXI_XCS_S_AVGCP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_FITIN
    returning
      value(RS_FITIN) type ZVCXI_FFS_S_FITIN
    raising
      /VCXI/CX_CKX .
  methods GET_FITEX
    returning
      value(RS_FITEX) type ZVCXI_FFS_S_FITEX
    raising
      /VCXI/CX_CKX .
  methods SET_FITIN
    importing
      !IS_FITIN type ZVCXI_FFS_S_FITIN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FITEX
    importing
      !IS_FITEX type ZVCXI_FFS_S_FITEX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_EXWID
    importing
      !IS_EXWID type ZVCXI_FFS_S_EXWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
    importing
      !IF_UOM type /VCXI/CKX_UOM optional
    returning
      value(RS_SURWT) type ZVCXI_F0S_S_SURWT
    raising
      /VCXI/CX_CKX .

  methods CALC_CONSU
    redefinition .
protected section.

  constants C_IEVNT_O_EXWID_CHANGED type /VCXI/VKSC_IEVNT value 'EXWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITIN_CHANGED type /VCXI/VKSC_IEVNT value 'FITIN_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FITEX_CHANGED type /VCXI/VKSC_IEVNT value 'FITEX_CHANGED' ##NO_TEXT.
private section.
endclass. "ZCL_VCXI_FFSP_PR_MC_RECI definition
class ZCL_VCXI_FFSP_PR_MC_RECI implementation.
  method CALC_CONSU.

    data: LS_AVGCO type ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type ZVCXI_XCS_S_AVGCP,
          LS_CONSU type ZVCXI_XCSP_S_CONSU,
          LS_CALCV type ZVCXI_XCS_S_CALCV,
          LS_EXWID type ZVCXI_FFS_S_EXWID.


    check IS_MQTYI is not initial.

*** Get Average Consumption and Coverage
    ME->GET_AVGCO( importing ES_AVGCO = LS_AVGCO ).
    ME->GET_AVGCP( importing ES_AVGCP = LS_AVGCP ).
    ME->GET_EXWID( importing ES_EXWID = LS_EXWID ).

*** Calculate Weight
    if LS_AVGCP-AVGCP is not initial and
       LS_EXWID-EXWID is not initial.

      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_MQTYI-MQTYI
                                                          IF_CALCV_UOM_1 = IS_MQTYI-MQTYI_UOM
                                                          IF_CALCV_2     = LS_EXWID-EXWID
                                                          IF_CALCV_UOM_2 = LS_EXWID-EXWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = LS_AVGCP-AVGCP_UOM
                                                importing EF_CALCV       = LS_CALCV-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).

      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_CALCV-CALCV
                                                          IF_CALCV_UOM_1 = LS_CALCV-CALCV_UOM
                                                          IF_CALCV_2     = LS_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = LS_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                importing EF_CALCV       = LS_CALCV-CALCV
                                                          EF_CALCV_UOM   = LS_CALCV-CALCV_UOM ).

      LS_CONSU-CONSU   =  LS_CALCV-CALCV * LS_AVGCO-AVGCO.
    else.
      LS_CONSU-CONSU   = 0.
    endif.
    LS_CONSU-CONSU_UOM = LS_AVGCO-AVGCO_UOM.

*** Set Consumption
    ME->SET_CONSU( IS_CONSU = LS_CONSU ).

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

    F_PARID_CONSU = C_PARID_CONSU_W.
    F_PARID_PRICP = C_PARID_PRICP_W.
    F_PARID_AVGCO = C_PARID_AVGCO_W.
    F_PARID_AVGCP = C_PARID_AVGCP_A.

  endmethod.
  method GET_AVGCO.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).
    move LS_PARAM-ATFLV to ES_AVGCO-AVGCO.
    move LS_PARAM-UNIT  to ES_AVGCO-AVGCO_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_AVGCP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).
    move LS_PARAM-ATFLV to ES_AVGCP-AVGCP.
    move LS_PARAM-UNIT  to ES_AVGCP-AVGCP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_EXWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EXWID ).
    move LS_PARAM-ATFLV to ES_EXWID-EXWID.
    move LS_PARAM-UNIT  to ES_EXWID-EXWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FITEX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).
    move LS_PARAM-ATFLV to RS_FITEX-FITEX.
    move LS_PARAM-UNIT  to RS_FITEX-FITEX_UOM.

  endmethod.
  method GET_FITIN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).
    move LS_PARAM-ATFLV to RS_FITIN-FITIN.
    move LS_PARAM-UNIT  to RS_FITIN-FITIN_UOM.

  endmethod.
  method GET_SURWT.

    data: LF_DIMID type T006D-DIMID.
    data: LS_AVGCO type ZVCXI_XCS_S_AVGCO,
          LS_AVGCP type ZVCXI_XCS_S_AVGCP.

***--------------------------------------------------------------------------------------
*** Get Average Consumption
    ME->GET_AVGCO( importing ES_AVGCO = LS_AVGCO ).

*** Get Average Consumption per
    ME->GET_AVGCP( importing ES_AVGCP = LS_AVGCP ).

***--------------------------------------------------------------------------------------
*** Determin Unit
    if IF_UOM is initial.
      call function 'DIMENSION_GET'
        exporting
          LENGTH              = -2
          MASS                = 1
        importing
          DIMID               = LF_DIMID
        exceptions
          DIMENSION_NOT_FOUND = 1
          others              = 2.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Define Output UOM
      call function 'SI_UNIT_GET'
        exporting
          DIMENSION           = LF_DIMID
        importing
          SI_UNIT             = RS_SURWT-SURWT_UOM
        exceptions
          DIMENSION_NOT_FOUND = 1
          UNIT_NOT_FOUND      = 2.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    else.
      move IF_UOM to RS_SURWT-SURWT_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Calculate Surface Weight
    if LS_AVGCP-AVGCP gt 0.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_AVGCO-AVGCO
                                                          IF_CALCV_UOM_1 = LS_AVGCO-AVGCO_UOM
                                                          IF_CALCV_2     = LS_AVGCP-AVGCP
                                                          IF_CALCV_UOM_2 = LS_AVGCP-AVGCP_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                          IF_UOM         = RS_SURWT-SURWT_UOM
                                                importing EF_CALCV       = RS_SURWT-SURWT
                                                          EF_CALCV_UOM   = RS_SURWT-SURWT_UOM ).
    endif.

  endmethod.
  method SET_AVGCO.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCO ).

    move IS_AVGCO-AVGCO     to LS_PARAM-ATFLV.
    move IS_AVGCO-AVGCO_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_CONSU_REQ ).
    endif.

  endmethod.
  method SET_AVGCP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ME->F_PARID_AVGCP ).

    move IS_AVGCP-AVGCP     to LS_PARAM-ATFLV.
    move IS_AVGCP-AVGCP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_RECALC_CONSU_REQ ).
    endif.

  endmethod.
  method SET_EXWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_EXWID ).

    move IS_EXWID-EXWID     to LS_PARAM-ATFLV.
    move IS_EXWID-EXWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_EXWID_CHANGED ).
    endif.

  endmethod.
  method SET_FITEX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITEX ).

    move IS_FITEX-FITEX                      to LS_PARAM-ATFLV.
    move IS_FITEX-FITEX_UOM                  to LS_PARAM-UNIT.
    move IF_SETBY                            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITEX_CHANGED ).
    endif.

  endmethod.
  method SET_FITIN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FITIN ).

    move IS_FITIN-FITIN                      to LS_PARAM-ATFLV.
    move IS_FITIN-FITIN_UOM                  to LS_PARAM-UNIT.
    move IF_SETBY                            to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FITIN_CHANGED ).
    endif.

  endmethod.
