
class ZCL_VCXI_PFSS_CUST_ECMA definition
  public
  inheriting from ZCL_VCXI_P0SS_CUST_PRSTY
  create public .

public section.

  types:
    YT_PC_TC320 type standard table of ZVCXI_PCS_TC320 with default key .
  types:
    YT_PC_TC310 type standard table of ZVCXI_PCS_TC310 with default key .

  constants C_GRAIO_HORIZONTAL type ZVCXI_PFSS_GRAIO value 'H' ##NO_TEXT.
  constants C_GRAIO_VERTICAL type ZVCXI_PFSS_GRAIO value 'V' ##NO_TEXT.
  constants C_TPRST_ECMA type ZVCXI_P0SS_TPRST value 'ECMA' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IF_TPRST type ZVCXI_P0SS_TPRST
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
      !IF_OWNER type /VCXI/CKX_STRING optional
      !IF_SYSOM type /VCXI/VKS_SYSOM optional
    raising
      /VCXI/CX_CKX .
  methods GET_ECMA_SCORES
    importing
      !IF_BOXPA type ZVCXI_P0SS_BOXPA optional
      !IF_PANOR type ZVCXI_P0SS_PANOR
      !IT_ELEMENT type ZVCXI_P0SS_TT_ELEMENT
      !IF_WERKS type WERKS_D
      !IF_PTYPE type ZVCXI_P0S_PTYPE
      !IF_JOIPO type ZVCXI_P0S_JOIPO
      !IF_DATE type DATS
      !IF_GRAIO type ZVCXI_PFSS_GRAIO
    exporting
      value(ET_SCORE) type ZVCXI_P0SS_TT_SCORE
      !EF_CHANGED type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods GET_ECMA_INSTANCE
    importing
      !IF_ECMA type ZVCXI_PFSS_ECMA
      !IF_OWNER type /VCXI/CKX_STRING optional
      !IF_SYSOM type /VCXI/VKS_SYSOM optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_PFSS_CUST_ECMA
    raising
      /VCXI/CX_CKX .

  methods GET_FSLIN
    redefinition .
  methods GET_TSCOR_DEFAULT
    redefinition .
protected section.

  data F_GRAIO type ZVCXI_PFSS_GRAIO .
  data T_PC_TC310 type YT_PC_TC310 .
  data T_PC_TC320 type YT_PC_TC320 .

  methods CONV_CSCOR
    raising
      /VCXI/CX_CKX .

  methods CHECK_CALC_SCORE_PARAMS
    redefinition .
  methods CHECK_MANTU
    redefinition .
  methods GET_FOTAU
    redefinition .
  methods GET_MANTU
    redefinition .
  methods INIT_FODEG
    redefinition .
  methods INIT_MANTU
    redefinition .
private section.
endclass. "ZCL_VCXI_PFSS_CUST_ECMA definition
class ZCL_VCXI_PFSS_CUST_ECMA implementation.
method CHECK_CALC_SCORE_PARAMS.

  RF_PARAMS_OK = ABAP_TRUE.

*** Check Grade Orientation
  if ME->F_GRAIO is initial.
    ME->R_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PFSS'
                            IF_MSGTY = 'E'
                            IF_MSGNO = '501' ).

    move ABAP_FALSE to RF_PARAMS_OK.
  endif.

  RF_PARAMS_OK = SUPER->CHECK_CALC_SCORE_PARAMS( ).

endmethod.
method CHECK_MANTU.

  BREAK WAIT_FOR_SD.

*  data:        LS_TC210          type ZVCXI_P0S_TC210,
*               LS_CALIP          type ZVCXI_P0SS_S_CALIP.
*  data:        LT_MANTU_KEY      type ZVCXI_PCSS_TT_MANTU_KEY,
*               LT_MANTU_KEY_TMP  type ZVCXI_PCSS_TT_MANTU_KEY.
*  field-symbols: <S_MANTU_KEY>   type ZVCXI_PCSS_S_MANTU_KEY.
*
*  LS_CALIP = ME->GET_SCORE_CALIP( ).
*
**** Create hole Key
*  loop at ME->T_TC210 into LS_TC210.
*    read table ME->T_PC_TC320 into LS_TC320 with key GMATU = LS_TC210-GMATU.
*
****     Convert Caliper From into right Unit
*    call function 'UNIT_CONVERSION_SIMPLE'
*      exporting
*        INPUT    = LS_TC320-CALIF
*        UNIT_IN  = LS_TC320-CALIF_UOM
*        UNIT_OUT = LS_CALIP-CALIP_UOM
*      importing
*        OUTPUT   = LS_TC320-CALIF
*      exceptions
*        others   = 9.
*    if SY-SUBRC ne 0.
*      continue.
*    endif.
*
*    append initial line to LT_MANTU_KEY assigning <S_MANTU_KEY>.
*    move-corresponding LS_TC210 to <S_MANTU_KEY>.
*    move-corresponding LS_TC320 to <S_MANTU_KEY>.
*    move LS_CALIP-CALIP_UOM     to <S_MANTU_KEY>-CALIF_UOM.
*  endloop.
*
**** Start Searching
*  move LT_MANTU_KEY[] to LT_MANTU_KEY_TMP[].
*
*  delete LT_MANTU_KEY_TMP where WERKS ne ME->F_WERKS
*                             or PTYPE ne ME->F_PTYPE
*                             or FLUTE ne ME->F_FLUTE
*                             or CALIF gt LS_CALIP-CALIP
*                             or JOIPO ne ME->F_JOIPO.
*
*  if LT_MANTU_KEY_TMP is initial.
*    move LT_MANTU_KEY[] to LT_MANTU_KEY_TMP[].
*
*    delete LT_MANTU_KEY_TMP where WERKS ne ME->F_WERKS
*                               or PTYPE ne ''
*                               or FLUTE ne ME->F_FLUTE
*                               or CALIF gt LS_CALIP-CALIP
*                               or JOIPO ne ME->F_JOIPO.
*
*    if LT_MANTU_KEY_TMP is initial.
*      move LT_MANTU_KEY[] to LT_MANTU_KEY_TMP[].
*
*      delete LT_MANTU_KEY_TMP where WERKS ne ''
*                                 or PTYPE ne ME->F_PTYPE
*                                 or FLUTE ne ME->F_FLUTE
*                                 or CALIF gt LS_CALIP-CALIP
*                                 or JOIPO ne ME->F_JOIPO.
*
*      if LT_MANTU_KEY_TMP is initial.
*        move LT_MANTU_KEY[] to LT_MANTU_KEY_TMP[].
*
*        delete LT_MANTU_KEY_TMP where WERKS ne ''
*                                   or PTYPE ne ''
*                                   or FLUTE ne ME->F_FLUTE
*                                   or CALIF gt LS_CALIP-CALIP
*                                   or JOIPO ne ME->F_JOIPO.
*
*      endif.
*
*    endif.
*  endif.
*
*  check LT_MANTU_KEY_TMP is not initial.
*  sort LT_MANTU_KEY_TMP by VALFR descending CALIF descending.
*  read table LT_MANTU_KEY_TMP assigning <S_MANTU_KEY> index 1.
*  move <S_MANTU_KEY>-GMATU     to EF_GMATU.
*  move <S_MANTU_KEY>-FOTAU_UOM to EF_FOTAU_UOM.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IF_TPRST = IF_TPRST
                      IF_PRSTY = IF_PRSTY
                      IF_OWNER = IF_OWNER
                      IF_SYSOM = IF_SYSOM ).

endmethod.
method CONV_CSCOR.

  field-symbols: <S_SCORE> type ZVCXI_P0SS_S_SCORE.

  loop at ME->T_SCORE assigning <S_SCORE>.
    case <S_SCORE>-CSCOR.
      when C_CSCOR_LENGTH.
        move C_CSCOR_CROSS to <S_SCORE>-CSCOR.

      when C_CSCOR_CROSS.
        move C_CSCOR_LENGTH to <S_SCORE>-CSCOR.

    endcase.
  endloop.

endmethod.
method GET_ECMA_INSTANCE.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_INSTANCE
             into LS_INSTANCE
             with key TPRST = C_TPRST_ECMA
                      PRSTY = IF_ECMA
                      OWNER = IF_OWNER
                      SYSOM = IF_SYSOM.

  if SY-SUBRC eq 0.
    try.
        move LS_INSTANCE-R_INSTANCE ?to RR_INSTANCE.
      catch CX_SY_MOVE_CAST_ERROR.
        delete ZCL_VCXI_P0SS_CUST_PRSTY=>T_INSTANCE where R_INSTANCE eq LS_INSTANCE-R_INSTANCE.
        clear RR_INSTANCE.
    endtry.
  endif.

  if RR_INSTANCE is initial.
    create object RR_INSTANCE
      exporting
        IF_TPRST = C_TPRST_ECMA
        IF_PRSTY = IF_ECMA
        IF_OWNER = IF_OWNER
        IF_SYSOM = IF_SYSOM.
  endif.

endmethod.
method GET_ECMA_SCORES.

  data: LF_CHANGED type ABAP_BOOL.

*** Buffer current Scores
  ET_SCORE = ME->T_SCORE.

*** Check if Scores needs to be recalculated or not
  if IF_GRAIO ne ME->F_GRAIO.

*** Save new Values
    move IF_GRAIO to ME->F_GRAIO.

    move ABAP_TRUE to ME->F_RECALC_SCORES.
    move ABAP_TRUE to EF_CHANGED.

  endif.

***--------------------------------------------------------------------------------------
*** Do the standard Product Style check and start the calculation if needed
  ME->GET_PRSTY_SCORES( exporting IF_BOXPA   = IF_BOXPA
                                  IF_PANOR   = IF_PANOR
                                  IT_ELEMENT = IT_ELEMENT
                                  IF_WERKS   = IF_WERKS
                                  IF_PTYPE   = IF_PTYPE
                                  IF_JOIPO   = IF_JOIPO
                                  IF_DATE    = IF_DATE
                        importing EF_CHANGED = LF_CHANGED ).

  if EF_CHANGED eq ABAP_FALSE.
    move LF_CHANGED to EF_CHANGED.
  endif.

*** Do only convert if we have no custom design! and we have Horizontal Grain
  if ME->R_PRSTY->S_PRSTY-FCUSD ne ABAP_TRUE and
     ME->F_GRAIO                eq C_GRAIO_HORIZONTAL and
     EF_CHANGED                 eq ABAP_TRUE.
    ME->CONV_CSCOR( ).
  endif.

***--------------------------------------------------------------------------------------
  if ET_SCORE ne ME->T_SCORE.
    move ABAP_TRUE to EF_CHANGED.
  endif.

  ET_SCORE = ME->T_SCORE.

endmethod.
method GET_FOTAU.

  BREAK WAIT_FOR_SD.

*  data: LT_TC310 type YT_PC_TC310.
*  data: LS_TC310 type ZVCXI_PCS_TC310,
*        LS_CALIP type ZVCXI_P0SS_S_CALIP.
*
*  LS_CALIP = ME->GET_SCORE_CALIP( ).
*  ES_FOTAU = ME->GET_MANTU( IF_CSCOR = IF_CSCOR
*                            IF_NSCOR = IF_NSCOR ).
*
*  if ES_FOTAU is initial.
**** Get Caliper to decide which caliper From is relevant
*    if IF_FODEG is not initial.
*
*      loop at ME->T_PC_TC310 into LS_TC310
*        where FODEG = IF_FODEG.
*
****     Convert Caliper From into right Unit
*        call function 'UNIT_CONVERSION_SIMPLE'
*          exporting
*            INPUT    = LS_TC310-CALIF
*            UNIT_IN  = LS_TC310-CALIF_UOM
*            UNIT_OUT = LS_CALIP-CALIP_UOM
*          importing
*            OUTPUT   = LS_TC310-CALIF
*          exceptions
*            others   = 9.
*        if SY-SUBRC ne 0.
*          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
*        else.
*          move LS_CALIP-CALIP_UOM to LS_TC310-CALIF_UOM.
*        endif.
*
****     Check if caliper from is le caliper
*        check LS_TC310-CALIF  le LS_CALIP-CALIP and
*            ( LS_TC310-CSCOR  eq IF_CSCOR or
*              LS_TC310-CSCOR  is initial   ).
*        append LS_TC310 to LT_TC310.
*
*      endloop.
*    endif.
*
**** Get the newes one!!
*    if LT_TC310 is not initial.
*      sort LT_TC310 by VALFR descending CSCOR descending CALIF descending.
*      read table LT_TC310 into LS_TC310 index 1.
*      check SY-SUBRC = 0.
*      move-corresponding LS_TC310 to ES_FOTAU.
*    endif.
*
**** Get the right Folding degree (always the half)
*    if ES_FOTAU is not initial.
*      ES_FOTAU-FOTAU = ES_FOTAU-FOTAU / 2.
*      move-corresponding ES_FOTAU to ES_FOTAU_NEXT.
*    endif.
*
*    if IS_FOTAU_PREV is not initial and
*       ES_FOTAU      is not initial.
*
**** Add previous Folding Take up
*      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY(
*        exporting IF_CALCV_1     = IS_FOTAU_PREV-FOTAU
*                  IF_CALCV_UOM_1 = IS_FOTAU_PREV-FOTAU_UOM
*                  IF_CALCV_2     = ES_FOTAU-FOTAU
*                  IF_CALCV_UOM_2 = ES_FOTAU-FOTAU_UOM
*                  IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
*                  IF_UOM         = ES_FOTAU-FOTAU_UOM
*        importing EF_CALCV       = ES_FOTAU-FOTAU
*                  EF_CALCV_UOM   = ES_FOTAU-FOTAU_UOM ).
*
*    elseif IS_FOTAU_PREV is not initial and
*           ES_FOTAU      is initial.
*      move IS_FOTAU_PREV-FOTAU     to ES_FOTAU-FOTAU.
*      move IS_FOTAU_PREV-FOTAU_UOM to ES_FOTAU-FOTAU_UOM.
*    endif.
*  endif.

endmethod.
  method GET_FSLIN.

    data: LF_CSCOR  type ZVCXI_P0SS_CSCOR.


*** Do only convert if we have no custom design! and we have Horizontal Grain
    if ME->R_PRSTY->S_PRSTY-FCUSD ne ABAP_TRUE and
       ME->F_GRAIO                eq C_GRAIO_HORIZONTAL.
      LF_CSCOR = switch #( IF_CSCOR when C_CSCOR_LENGTH then C_CSCOR_CROSS
                                    when C_CSCOR_CROSS  then C_CSCOR_LENGTH ).
    else.
      LF_CSCOR = IF_CSCOR.
    endif.

*** Get Slot Indicator
    RF_FSLIN = SUPER->GET_FSLIN( IF_CSCOR = LF_CSCOR
                                 IF_NSCOR = IF_NSCOR
                                 IF_PANOR = cond #( when IF_PANOR is supplied then IF_PANOR
                                                                              else ME->F_PANOR )
                                 IF_BOXPA = cond #( when IF_BOXPA is supplied then IF_BOXPA
                                                                              else ME->F_BOXPA ) ).

  endmethod.
method GET_MANTU.

  data:        LF_GMATU          type ZVCXI_P0SSC_GMATU,
               LF_FOTAU_UOM      type UNIT.
  data:        LS_TC211          type ZVCXI_P0S_TC211.

  ME->CHECK_MANTU( importing EF_GMATU     = LF_GMATU
                             EF_FOTAU_UOM = LF_FOTAU_UOM ).

  check LF_GMATU is not initial.
  read table ME->T_TC211 into LS_TC211 with key GMATU = LF_GMATU
                                                CSCOR = IF_CSCOR
                                                NSCOR = IF_NSCOR.
  check SY-SUBRC = 0.
  move LS_TC211-FOTAU to RS_FOTAU-FOTAU.
  move LF_FOTAU_UOM   to RS_FOTAU-FOTAU_UOM.

endmethod.
  method GET_TSCOR_DEFAULT.

    data: LF_CSCOR  type ZVCXI_P0SS_CSCOR.


*** Do only convert if we have no custom design! and we have Horizontal Grain
    if ME->R_PRSTY->S_PRSTY-FCUSD ne ABAP_TRUE and
       ME->F_GRAIO                eq C_GRAIO_HORIZONTAL.
      LF_CSCOR = switch #( IF_CSCOR when C_CSCOR_LENGTH then C_CSCOR_CROSS
                                    when C_CSCOR_CROSS  then C_CSCOR_LENGTH ).
    else.
      LF_CSCOR = IF_CSCOR.
    endif.

*** Get default
    RF_TSCOR = SUPER->GET_TSCOR_DEFAULT( IF_CSCOR = LF_CSCOR
                                         IF_NSCOR = IF_NSCOR
                                         IF_PANOR = cond #( when IF_PANOR is supplied then IF_PANOR
                                                                                      else ME->F_PANOR )
                                         IF_BOXPA = cond #( when IF_BOXPA is supplied then IF_BOXPA
                                                                                      else ME->F_BOXPA ) ).

  endmethod.
method INIT_FODEG.

  BREAK WAIT_FOR_SD.

**** Get Folding Degree
*  select * from ZVCXI_PCS_TC310
*    into table ME->T_PC_TC310
*    where FLUTE =  ME->F_FLUTE
*      and VALFR le ME->F_DATE.
*
**** Get the right Value for Plant and Product Type
*  read table ME->T_PC_TC310
*    with key WERKS = ME->F_WERKS
*             PTYPE = ME->F_PTYPE
*    transporting no fields.
*
*  if SY-SUBRC ne 0.
*
*    read table ME->T_PC_TC310
*      with key WERKS = ME->F_WERKS
*               PTYPE = ''
*      transporting no fields.
*
*    if SY-SUBRC ne 0.
*
*      read table ME->T_PC_TC310
*        with key WERKS = ''
*                 PTYPE = ''
*        transporting no fields.
*
*      if SY-SUBRC ne 0.
****   No Values Found
*      else.
*        delete ME->T_PC_TC310 where WERKS ne ''
*                                 or PTYPE ne ''.
*
*      endif.
*
*
*    else.
*      delete ME->T_PC_TC310 where WERKS ne ME->F_WERKS
*                               or PTYPE ne ''.
*
*    endif.
*
*
*  else.
*    delete ME->T_PC_TC310 where WERKS ne ME->F_WERKS
*                             or PTYPE ne ME->F_PTYPE.
*
*  endif.
*



endmethod.
method INIT_MANTU.

*** Get Standard Take-up/Factor
  SUPER->INIT_MANTU( ).

*** Get Manual Take-up Extended Key
  check ME->T_TC210 is not initial.
*  select * from ZVCXI_PCS_TC320
*    into table ME->T_PC_TC320
*    for all entries in ME->T_TC210
*    where GMATU eq ME->T_TC210-GMATU.

endmethod.
