
class ZCL_VCXI_PXSS_PR_XSHT definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_PXSS_COMM_PREV
      abstract methods DO_FORWARD .
  interfaces ZIF_VCXI_PXSS_REDUC .
  interfaces ZIF_VCXI_PXSS_FDI .
  interfaces ZIF_VCXI_XCS_NGREP .
  interfaces ZIF_VCXI_PXSS_FDSUB .

  constants C_IEVNT_O_FDIMT_CHANGED type /VCXI/VKSC_IEVNT value 'FDIMT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTLE_CHANGED type /VCXI/VKSC_IEVNT value 'SHTLE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTWI_CHANGED type /VCXI/VKSC_IEVNT value 'SHTWI_CHANGED' ##NO_TEXT.
  constants C_IPRVT_PX_XSHT type /VCXI/VKSC_IPRVT value 'ZVCXI_PXSS_XSHT' ##NO_TEXT.
  constants C_PARID_FDIMT type /VCXI/VKS_PARID value 'ZVCXI_PX_FDIMT' ##NO_TEXT.
  constants C_PARID_SHTLE type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTLE' ##NO_TEXT.
  constants C_PARID_SHTWI type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTWI' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_ADDWT
  abstract
    returning
      value(RS_ADDWT) type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods GET_BAWGT
    exporting
      !ES_BAWGP type ZVCXI_P0S_S_BAWGP
    returning
      value(RS_BAWGT) type ZVCXI_P0S_S_BAWGT
    raising
      /VCXI/CX_CKX .
  methods GET_CALIP
  abstract
    returning
      value(RS_CALIP) type ZVCXI_P0SS_S_CALIP
    raising
      /VCXI/CX_CKX .
  methods GET_FDIMT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FDIMT) type ZVCXI_PXS_FDIMT
    raising
      /VCXI/CX_CKX .
  methods GET_GXCON
    returning
      value(RF_GXCON) type ZVCXI_PXSS_GXCON
    raising
      /VCXI/CX_CKX .
  methods GET_HNDDIM
  abstract
    returning
      value(RS_HNDDIM) type ZVCXI_PXS_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods GET_NOUPS
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUPS) type ZVCXI_PXS_NOUPS
    raising
      /VCXI/CX_CKX .
  methods GET_PRODH
  abstract
    exporting
      !EF_DESCR type /VCXI/CKX_DESCR
    returning
      value(RF_PRODH) type PRODH_D
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_LAMI
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_LAMI) type ref to ZIF_VCXI_PXSS_LAMI
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_MS_XPROC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_MS_XPROC) type ref to ZCL_VCXI_PXSS_PR_MS_XPROC
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_XCONI
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_XCONI) type ref to ZCL_VCXI_PXSS_PR_XCONI
    raising
      /VCXI/CX_CKX .
  methods GET_SHTLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTLE) type ZVCXI_P0SS_S_SHTLE
    raising
      /VCXI/CX_CKX .
  methods GET_SHTWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTWI) type ZVCXI_P0SS_S_SHTWI
    raising
      /VCXI/CX_CKX .
  methods GET_SURWT
  abstract
    returning
      value(RS_SURWT) type ZVCXI_PXS_S_SURWT
    raising
      /VCXI/CX_CKX .
  methods GET_WERKS
    returning
      value(RF_WERKS) type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods SET_FDIMT
    importing
      !IF_FDIMT type ZVCXI_PXS_FDIMT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_RECALC_NOUPS type /VCXI/VKSC_IEVNT value 'RECALC_NOUPS' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SHTDIM type /VCXI/VKSC_IEVNT value 'RECALC_SHTDIM' ##NO_TEXT.
  constants C_IEVNT_I_REQ_BACKWARD type /VCXI/VKSC_IEVNT value 'REQ_BACKWARD' ##NO_TEXT.
  constants C_IEVNT_I_REQ_FORWARD type /VCXI/VKSC_IEVNT value 'REQ_FORWARD' ##NO_TEXT.
  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT' ##NO_TEXT.
  constants C_IEVNT_O_NOUPS_CHANGED type /VCXI/VKSC_IEVNT value 'NOUPS_CHANGED' ##NO_TEXT.
  constants C_PARID_NOUPS type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUPS' ##NO_TEXT.

  methods CHECK_SHTLE
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SHTWI
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_CSPLIT
    returning
      value(RT_CSPLIT) type ZVCXI_PXSS_TT_CSPLIT
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPEC
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
      !ER_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_NOUPS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SHTDIM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
  methods SET_NOUPS
    importing
      !IF_NOUPS type ZVCXI_PXS_NOUPS
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTLE
    importing
      !IS_SHTLE type ZVCXI_P0SS_S_SHTLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTWI
    importing
      !IS_SHTWI type ZVCXI_P0SS_S_SHTWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSS_PR_XSHT definition
class ZCL_VCXI_PXSS_PR_XSHT implementation.
  method CHECK_SHTLE.

*** Check Sheet Length
    if ME->GET_SHTLE( )-SHTLE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Sheet Length is defined.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '305' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Sheet Length is not defined.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '306' ).
      endif.
    endif.

  endmethod.
  method CHECK_SHTWI.

*** Check Sheet Width
    if ME->GET_SHTWI( )-SHTWI is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Sheet Width is defined.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '303' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Sheet Width is not defined.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PXSS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '304' ).
      endif.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Communicate only with Children (avoid communication with e.g. CSTEP_LAMI)
    ME->ZIF_VCXI_PXSS_COMM_PREV~F_COMWC = ABAP_TRUE.

  endmethod.
  method GET_BAWGT.

    data(LS_SURWT) = ME->GET_SURWT( ).

    ES_BAWGP-BAWGP     = 1000.
    ES_BAWGP-BAWGP_UOM = 'M2'.

    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SURWT-SURWT
                                                        IF_CALCV_UOM_1 = LS_SURWT-SURWT_UOM
                                                        IF_CALCV_2     = ES_BAWGP-BAWGP
                                                        IF_CALCV_UOM_2 = ES_BAWGP-BAWGP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                              importing EF_CALCV       = RS_BAWGT-BAWGT
                                                        EF_CALCV_UOM   = RS_BAWGT-BAWGT_UOM ).

  endmethod.
  method GET_CSPLIT.

    data: LR_LAMI type ref to ZIF_VCXI_PXSS_LAMI.


*** Get Lamination Provider
    LR_LAMI = ME->GET_PRVDR_LAMI( ).
    if LR_LAMI is bound.
***   Get Cost Split Distribution
      RT_CSPLIT = LR_LAMI->GET_CSPLIT( ).
    endif.

  endmethod.
  method GET_FDIMT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FDIMT ).
    RF_FDIMT = LS_PARAM-ATWRT.
    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_GXCON.

    data: LR_PR_XCONI type ref to ZCL_VCXI_PXSS_PR_XCONI.


*** Get Connections Inbound
    LR_PR_XCONI = ME->GET_PRVDR_XCONI( ).
    check LR_PR_XCONI is bound.

*** Return its X-Connect GUID
    RF_GXCON = LR_PR_XCONI->GET_GXCON( ).

  endmethod.
  method GET_NOUPS.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).
    move LS_PARAM-ATFLV to RF_NOUPS.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_LAMI.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_LAMI.

***------------------------------------------------------------------------------------------------
*** Find Provider for Lamination (Interface)
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZIF_VCXI_PXSS_LAMI=>C_IPRVT_PX_LAMI
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_LAMI.

  endmethod.
  method GET_PRVDR_MS_XPROC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_MS_XPROC.

***------------------------------------------------------------------------------------------------
*** Find Provider for MS Procurement
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_MS_XPROC=>C_IPRVT_PX_MS_XPROC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_MS_XPROC.

  endmethod.
  method GET_PRVDR_SPEC.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           ER_PR_SPEC.

***------------------------------------------------------------------------------------------------
*** Find Provider for Specification
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SPEC=>C_IPRVT_PX_SPEC
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to ER_PR_SPEC.

  endmethod.
  method GET_PRVDR_XCONI.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_XCONI.

***------------------------------------------------------------------------------------------------
*** Find Provider for Connection In
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_XCONI=>C_IPRVT_XCONI
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_XCONI.

  endmethod.
  method GET_SHTLE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).
    move LS_PARAM-ATFLV to RS_SHTLE-SHTLE.
    move LS_PARAM-UNIT  to RS_SHTLE-SHTLE_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTWI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).
    move LS_PARAM-ATFLV to RS_SHTWI-SHTWI.
    move LS_PARAM-UNIT  to RS_SHTWI-SHTWI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    RF_ELMST = SUPER->GET_STATUS( ).

***--------------------------------------------------------------------------------------
*** Check Sheet Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SHTWI( ) ).

*** Check Sheet Length
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SHTLE( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Sheet Width and Length
    ME->CHECK_SHTWI( IR_MESSAGE = IR_MESSAGE ).
    ME->CHECK_SHTLE( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
method GET_WERKS.

  data: LR_PR_SPEC type ref to ZCL_VCXI_PXSS_PR_SPEC.

  ME->GET_PRVDR_SPEC( importing ER_PR_SPEC = LR_PR_SPEC ).
  check LR_PR_SPEC is bound.
  RF_WERKS = LR_PR_SPEC->GET_WERKS( ).

endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_SHTDIM.
        ME->HANDLE_RECALC_SHTDIM( ).
      when C_IEVNT_I_RECALC_NOUPS.
        ME->HANDLE_RECALC_NOUPS( ).

***   Event Backwarding/Forwardin for Communication
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_PREV~C_IEVNT_O_BACKWARD_REQ ).
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_COMM_PREV~C_IEVNT_O_FORWARD_REQ ).


    endcase.

  endmethod.
  method HANDLE_RECALC_NOUPS.

    data: LF_NOUPS type ZVCXI_PXS_NOUPS.
    data: LR_LAMI type ref to ZIF_VCXI_PXSS_LAMI.


*** Get Lamination Provider
    LR_LAMI = ME->GET_PRVDR_LAMI( ).

***--------------------------------------------------------------------------------------
    if LR_LAMI is bound.
***   Get Number Ups of Lamination
      LF_NOUPS = LR_LAMI->GET_NOUPS( ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Number Ups (Outbound)
    ME->SET_NOUPS( IF_NOUPS = LF_NOUPS ).

  endmethod.
  method HANDLE_RECALC_SHTDIM.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI,
          LS_RDWIT type ZVCXI_PXS_S_RDWIT,
          LS_RDLET type ZVCXI_PXS_S_RDLET.
    data: LR_LAMI type ref to ZIF_VCXI_PXSS_LAMI.


*** Get Lamination Provider
    LR_LAMI = ME->GET_PRVDR_LAMI( ).

***--------------------------------------------------------------------------------------
    if LR_LAMI is bound.
***   Get Sheet Dimension (Outbound) of Lamination
      LR_LAMI->GET_SHTDIM( importing ES_SHTWI = LS_SHTWI
                                     ES_SHTLE = LS_SHTLE ).

***   Turn Sheet Dimensions
      if ME->GET_FDIMT( ).
        ZCL_VCXI_PXSS_BL_SCORE=>TURN_SHTDIM( changing CS_SHTWI = LS_SHTWI
                                                      CS_SHTLE = LS_SHTLE ).
      endif.

***   Get Reduction on Width/Length (Total)
      LS_RDWIT = ME->ZIF_VCXI_PXSS_REDUC~GET_RDWIT( ).
      LS_RDLET = ME->ZIF_VCXI_PXSS_REDUC~GET_RDLET( ).

***   Apply Reduction
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTWI-SHTWI
                                                          IF_CALCV_UOM_1 = LS_SHTWI-SHTWI_UOM
                                                          IF_CALCV_2     = LS_RDWIT-RDWIT
                                                          IF_CALCV_UOM_2 = LS_RDWIT-RDWIT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = LS_SHTWI-SHTWI_UOM
                                                importing EF_CALCV       = LS_SHTWI-SHTWI
                                                          EF_CALCV_UOM   = LS_SHTWI-SHTWI_UOM ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                          IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                          IF_CALCV_2     = LS_RDLET-RDLET
                                                          IF_CALCV_UOM_2 = LS_RDLET-RDLET_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = LS_SHTLE-SHTLE_UOM
                                                importing EF_CALCV       = LS_SHTLE-SHTLE
                                                          EF_CALCV_UOM   = LS_SHTLE-SHTLE_UOM ).
    endif.

*** No negative values
    LS_SHTWI-SHTWI = cond #( when LS_SHTWI-SHTWI lt 0 then 0 else LS_SHTWI-SHTWI ).
    LS_SHTLE-SHTLE = cond #( when LS_SHTLE-SHTLE lt 0 then 0 else LS_SHTLE-SHTLE ).

***--------------------------------------------------------------------------------------
*** Set Sheet Dimensions (Inbound)
    ME->SET_SHTWI( IS_SHTWI = LS_SHTWI ).
    ME->SET_SHTLE( IS_SHTLE = LS_SHTLE ).

  endmethod.
method HANDLE_SET_DEFAULT.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
  method SET_FDIMT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FDIMT ).

    move IF_FDIMT  to LS_PARAM-ATWRT.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FDIMT_CHANGED ).
    endif.

  endmethod.
  method SET_NOUPS.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUPS ).

    move IF_NOUPS     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUPS_CHANGED ).
    endif.

  endmethod.
  method SET_SHTLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTLE ).

    move IS_SHTLE-SHTLE     to LS_PARAM-ATFLV.
    move IS_SHTLE-SHTLE_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTLE_CHANGED ).
    endif.

  endmethod.
  method SET_SHTWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTWI ).

    move IS_SHTWI-SHTWI     to LS_PARAM-ATFLV.
    move IS_SHTWI-SHTWI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTWI_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_XSHT> type ZVCXI_PXSS_S_FDI_XSHT.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_PXSS_S_FDI_XSHT.
    assign RR_DATA->* to <S_FDI_XSHT>.


***--------------------------------------------------------------------------------------
*** Description of Sheet
    <S_FDI_XSHT>-DESCR_XSHT = ME->R_GATE->GET_DESCR( ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.
  endmethod.
  method ZIF_VCXI_PXSS_FDSUB~GET_PRVDR_MS_XPROC.

    RR_PR_MS_XPROC = ME->GET_PRVDR_MS_XPROC( importing ER_GATE = ER_GATE ).

  endmethod.
  method ZIF_VCXI_PXSS_FDSUB~GET_PRVDR_XCONI.

    RR_PR_XCONI = ME->GET_PRVDR_XCONI( importing ER_GATE = ER_GATE ).

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDBOT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDBOT ).
    move LS_PARAM-ATFLV to RS_RDBOT-RDBOT.
    move LS_PARAM-UNIT  to RS_RDBOT-RDBOT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDLEF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLEF ).
    move LS_PARAM-ATFLV to RS_RDLEF-RDLEF.
    move LS_PARAM-UNIT  to RS_RDLEF-RDLEF_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDLET.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLET ).
    move LS_PARAM-ATFLV to RS_RDLET-RDLET.
    move LS_PARAM-UNIT  to RS_RDLET-RDLET_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDRIG.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDRIG ).
    move LS_PARAM-ATFLV to RS_RDRIG-RDRIG.
    move LS_PARAM-UNIT  to RS_RDRIG-RDRIG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDTOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDTOP ).
    move LS_PARAM-ATFLV to RS_RDTOP-RDTOP.
    move LS_PARAM-UNIT  to RS_RDTOP-RDTOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~GET_RDWIT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDWIT ).
    move LS_PARAM-ATFLV to RS_RDWIT-RDWIT.
    move LS_PARAM-UNIT  to RS_RDWIT-RDWIT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDBOT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDBOT ).

    move IS_RDBOT-RDBOT     to LS_PARAM-ATFLV.
    move IS_RDBOT-RDBOT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDBOT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDLEF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLEF ).

    move IS_RDLEF-RDLEF     to LS_PARAM-ATFLV.
    move IS_RDLEF-RDLEF_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDLEF_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDLET.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDLET ).

    move IS_RDLET-RDLET     to LS_PARAM-ATFLV.
    move IS_RDLET-RDLET_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDLET_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDRIG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDRIG ).

    move IS_RDRIG-RDRIG     to LS_PARAM-ATFLV.
    move IS_RDRIG-RDRIG_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDRIG_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDTOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDTOP ).

    move IS_RDTOP-RDTOP     to LS_PARAM-ATFLV.
    move IS_RDTOP-RDTOP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDTOP_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_REDUC~SET_RDWIT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_REDUC~C_PARID_RDWIT ).

    move IS_RDWIT-RDWIT     to LS_PARAM-ATFLV.
    move IS_RDWIT-RDWIT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_REDUC~C_IEVNT_O_RDWIT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LR_GATE_XCONI    type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_MS_XPROC type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_LAMI     type ref to /VCXI/CL_VKSR_GATE.


*** Get Lamination Conversion Step
    ME->GET_PRVDR_LAMI( importing ER_GATE = LR_GATE_LAMI ).

***--------------------------------------------------------------------------------------
*** Get Connection In
    ME->GET_PRVDR_XCONI( importing ER_GATE = LR_GATE_XCONI ).
    if LR_GATE_XCONI is not initial.
***   Register Connection In to Lamination
      CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = LR_GATE_XCONI
                                          IF_NODE_KEY = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_LAMI ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Procurement
    ME->GET_PRVDR_MS_XPROC( importing ER_GATE = LR_GATE_MS_XPROC ).

    if LR_GATE_MS_XPROC is not initial.
      if LR_GATE_MS_XPROC->R_CLSPR is instance of ZIF_VCXI_XCS_NGREP.
        cast ZIF_VCXI_XCS_NGREP( LR_GATE_MS_XPROC->R_CLSPR )->FILL( exporting IF_GROUP_KEY     = IF_GROUP_KEY
                                                                    changing  CR_NETGRAPH_JSON = CR_NETGRAPH_JSON ).
      endif.

***   Add Line to Assembly Step
      CR_NETGRAPH_JSON->ADD_LINE( IF_NODE_KEY_FROM = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_MS_XPROC )
                                  IF_NODE_KEY_TO   = CR_NETGRAPH_JSON->GET_NODE_KEY_BY_OBJECT( LR_GATE_LAMI ) ).
    endif.

  endmethod.
