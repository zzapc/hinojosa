
class ZCL_VCXI_PXSS_UI_XCONO definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  data S_XCONO_VIS type ZVCXI_PXSS_S_XCONO_VIS read-only .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABPT type ZVCXI_XCS_TABPT default '0100S_IN_TAB-TAB'
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_VIS
    importing
      !IS_VIS type ANY
    raising
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  constants C_UC_CONIN type SYUCOMM value 'CONIN' ##NO_TEXT.
  data F_CURSOR type SCRFNAME .
  data R_PR_XCONO type ref to ZCL_VCXI_PXSS_PR_XCONO .

  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CONIN
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSS_UI_XCONO definition
class ZCL_VCXI_PXSS_UI_XCONO implementation.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                        IR_UIGATE = IR_UIGATE
                        IR_GATE   = IR_GATE ).
    try.
        move IR_GATE->R_CLSPR ?to ME->R_PR_XCONO.
      catch CX_SY_MOVE_CAST_ERROR.
***     UI ABAP Class is not compatible with PR ABAP Class.
        raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = '/VCXI/VKSR'
            F_MSGNO = '801'.
    endtry.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED      type /VCXI/CKX_LOCKED,
          LF_INUSE       type /VCXI/VKSR_INUSE,
          LF_ALLOW_MULTI type ABAP_BOOL.


    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Scree using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

***     Is Separation allowed
        ME->R_PR_XCONO->GET_NOUTT( importing EF_ALLOW_MULTI = LF_ALLOW_MULTI ).

        loop at screen.

***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

***       Hide Material Description Override Flag if undefined
          if SCREEN-NAME cp '*-FOVRR_MAKTX' and
             ME->S_XCONO_VIS-FOVRR_MAKTX eq ABAP_UNDEFINED.
            move 0 to SCREEN-ACTIVE.
          endif.
***       Disable Material Description if generated
          if SCREEN-NAME cp '*-MAKTX' and
             ME->S_XCONO_VIS-FOVRR_MAKTX eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.

***       Disable Product Hierarchy if not overwritten
          if SCREEN-NAME cp '*-PRODH' and
             ME->S_XCONO_VIS-FOVRR_PRODH eq ABAP_FALSE.
            move 0 to SCREEN-INPUT.
          endif.

***       Disable Separation information if no Separation Step is active
          if SCREEN-GROUP2 = 'SEP' and
             LF_ALLOW_MULTI ne ABAP_TRUE.
            SCREEN-INPUT  = 0.
            SCREEN-ACTIVE = 0.
          endif.

***       Hide MTS Flag if not allowed
          if SCREEN-GROUP2 = 'MTS' and
             ME->S_XCONO_VIS-FMTSA eq ABAP_UNDEFINED.
            SCREEN-INPUT  = 0.
            SCREEN-ACTIVE = 0.
          endif.

***       Reopen Info Buttons
          if SCREEN-GROUP1 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.

          modify screen.

***       Set Cursor
          if SCREEN-NAME eq ME->F_CURSOR.
            set cursor field ME->F_CURSOR.
          endif.
        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

*** Initialize Visualization Structure
    ME->INIT_VIS( ).

  endmethod.
  method DO_UPDATE_VIS.

    data: LS_XCONO_VIS type ZVCXI_PXSS_S_XCONO_VIS.


    check ME->R_PR_XCONO is bound.

*** "Cast" Vis Structure
    move-corresponding IS_VIS to LS_XCONO_VIS.

***--------------------------------------------------------------------------------------
*** Set Material Description
    if ME->S_XCONO_VIS-MAKTX        ne LS_XCONO_VIS-MAKTX or
       ME->S_XCONO_VIS-FOVRR_MAKTX  ne LS_XCONO_VIS-FOVRR_MAKTX.
      if LS_XCONO_VIS-FOVRR_MAKTX ne ABAP_FALSE.
        ME->R_PR_XCONO->SET_MAKTX( IF_MAKTX = LS_XCONO_VIS-MAKTX
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
      else.
        ME->R_PR_XCONO->SET_MAKTX( IF_MAKTX = LS_XCONO_VIS-MAKTX
                                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
      endif.
    endif.

*** Set Product Hierarchy if it is "Overwriten"
    if ME->S_XCONO_VIS-FOVRR_PRODH eq ABAP_TRUE and
       ME->S_XCONO_VIS-PRODH ne LS_XCONO_VIS-PRODH.
      ME->R_PR_XCONO->SET_PRODH( IF_PRODH = LS_XCONO_VIS-PRODH
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Flag Overwrite for Product Hierarchy
    if ME->S_XCONO_VIS-FOVRR_PRODH ne LS_XCONO_VIS-FOVRR_PRODH.
      ME->R_PR_XCONO->SET_PRODH( IF_FOVRR = LS_XCONO_VIS-FOVRR_PRODH ).
    endif.

*** Set Distribution Key
    if ME->S_XCONO_VIS-S_DIKEY ne LS_XCONO_VIS-S_DIKEY.
      ME->R_PR_XCONO->SET_DIKEY( IS_DIKEY = LS_XCONO_VIS-S_DIKEY
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Number of Outs (total)
    if ME->S_XCONO_VIS-NOUTT ne LS_XCONO_VIS-NOUTT.
      ME->R_PR_XCONO->SET_NOUTT( IF_NOUTT = LS_XCONO_VIS-NOUTT
                                 IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***------------------------------------------------------------------------------------------------
*** Make-to-Stock Flag
    if ME->S_XCONO_VIS-FMTSA ne LS_XCONO_VIS-FMTSA.
      ME->R_PR_XCONO->ZIF_VCXI_XCSS_MTS~SET_FMTSA( IF_FMTSA = LS_XCONO_VIS-FMTSA ).
    endif.

  endmethod.
  method DO_USER_COMMAND.

    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    case IF_UCOMM.
***   Navigation to Connected Gate
      when C_UC_CONIN.
        ME->HANDLE_UC_CONIN( ).

    endcase.

  endmethod.
  method HANDLE_GATE_FREED.

    SUPER->HANDLE_GATE_FREED( ).

    free: ME->R_PR_XCONO.

  endmethod.
  method HANDLE_UC_CONIN.

    data: LT_GATE  type /VCXI/VKSR_TT_GATE.
    data: LR_PR_SOV     type ref to ZCL_VCXI_PXSS_PR_SOV,
          LR_GATE_XCONI type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Connected Gate
    check ME->R_PR_XCONO is bound.
    move ME->R_PR_XCONO->GET_CONNECTED_GATE( ) to LR_GATE_XCONI.

***--------------------------------------------------------------------------------------
*** Connection Options
    if LR_GATE_XCONI is not bound.
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_PXSS_PR_SOV=>C_IPRVT_PX_SOV ).
      check LT_GATE is not initial.
      LR_PR_SOV ?= LT_GATE[ 1 ]->R_CLSPR.
      check LR_PR_SOV is bound.
      LT_GATE = LR_PR_SOV->GET_PRVDR_XCONI( IF_CONNECTED = ABAP_FALSE ).
      loop at LT_GATE into LR_GATE_XCONI.
        if ME->R_PR_XCONO->IS_XCONI_COMPATIBLE( IR_GATE_XCONI = LR_GATE_XCONI ) ne ABAP_TRUE or
           cast ZCL_VCXI_PXSS_PR_XCONI( LR_GATE_XCONI->R_CLSPR )->IS_XCONO_COMPATIBLE( IR_GATE_XCONO = ME->R_GATE ) ne ABAP_TRUE.
          delete LT_GATE.
        endif.
      endloop.
      clear LR_GATE_XCONI.
      if LINES( LT_GATE ) eq 1.
        LR_GATE_XCONI = LT_GATE[ 1 ].
        LR_PR_SOV->CONNECT( IR_GATE_IN  = LR_GATE_XCONI
                            IR_GATE_OUT = ME->R_GATE ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Navigate to Connection
    check LR_GATE_XCONI is bound and
          LR_GATE_XCONI->GET_CLSUI( ) is not initial.
*** Open UI
    ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = LR_GATE_XCONI ).

*** Open Tree Node
    ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LR_GATE_XCONI->F_GATKY ).

*** Highlight Tree Node
    ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LR_GATE_XCONI->F_GATKY ).

  endmethod.
  method INIT_VIS.

    free: ME->S_XCONO_VIS.
    check ME->R_PR_XCONO is bound.

***--------------------------------------------------------------------------------------
*** Material Description
    ME->S_XCONO_VIS-MAKTX = ME->R_PR_XCONO->GET_MAKTX( importing EF_FOVRR = ME->S_XCONO_VIS-FOVRR_MAKTX ).

*** Product Hierarchy
    ME->S_XCONO_VIS-PRODH = ME->R_PR_XCONO->GET_PRODH( importing EF_FOVRR = ME->S_XCONO_VIS-FOVRR_PRODH
                                                                 EF_DESCR = ME->S_XCONO_VIS-PRODH_DESCR ).

*** Distribution Key
    ME->S_XCONO_VIS-S_DIKEY = ME->R_PR_XCONO->GET_DIKEY( ).

*** Number of Outs (total)
    ME->S_XCONO_VIS-NOUTT = ME->R_PR_XCONO->GET_NOUTT( ).

*** Ship-To Party
    ME->S_XCONO_VIS-KUNWE = ME->R_PR_XCONO->GET_KUNWE( ).

***------------------------------------------------------------------------------------------------
*** Make-to-Stock Flag
    ME->S_XCONO_VIS-FMTSA = ME->R_PR_XCONO->ZIF_VCXI_XCSS_MTS~GET_FMTSA( ).

  endmethod.
  method SET_CURSOR.

    data:  LF_CURSOR type SCRFNAME.

    get cursor field LF_CURSOR.
    if LF_CURSOR is not initial.
      move LF_CURSOR to ME->F_CURSOR.
    endif.

  endmethod.
