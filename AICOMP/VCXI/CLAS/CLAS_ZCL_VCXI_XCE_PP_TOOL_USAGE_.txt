
class ZCL_VCXI_XCE_PP_TOOL_USAGE definition
  public
  create public .

public section.

  data F_BUDAT type BUCHDATUM read-only .
  data R_BOB_BATCH type ref to ZCL_VCXI_XCI_BOB_BATCH read-only .

  class-methods UPDATE
    raising
      /VCXI/CX_CKX .
  methods CANCEL
    importing
      !IF_LMNGA type RU_LMNGA
    raising
      /VCXI/CX_CKX .
  methods CONFIRM
    importing
      !IF_LMNGA type RU_LMNGA
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_CHARG type CHARG_D optional
      !IF_WERKS type WERKS_D
      !IF_BUDAT type BUCHDATUM
    raising
      /VCXI/CX_CKX .
  class-methods PREP_BY_WORKORDER
    importing
      !IS_AFRU type AFRU
    raising
      /VCXI/CX_CKX .
protected section.

  types: begin of YS_UPDATE,
           R_TOOL_USAGE type ref to ZCL_VCXI_XCE_PP_TOOL_USAGE,
           STZHL        type CO_STZHL,
           LMNGA        type LMNGA,
         end   of YS_UPDATE.

  class-data: T_UPDATE type table of YS_UPDATE.
private section.
endclass. "ZCL_VCXI_XCE_PP_TOOL_USAGE definition
class ZCL_VCXI_XCE_PP_TOOL_USAGE implementation.
  method CANCEL.

    data: LT_SETVA    type /VCXI/CKXC_TT_SETVA,
          LT_BAPIRET2 type BAPIRETTAB.


    check ME->R_BOB_BATCH is bound.

*** Get current Classification
    LT_SETVA = ME->R_BOB_BATCH->GET_CLASSI( IF_SETID = 'ZVCXI_XCE_PP_TOOL_BATCH' ).

*** Update Classification
    loop at LT_SETVA assigning field-symbol(<S_SETVA>).
***   First value
      if <S_SETVA>-T_MAPVN is initial.
        append initial line to <S_SETVA>-T_MAPVN.
      endif.

***   Update/Set Value
      loop at <S_SETVA>-T_MAPVN assigning field-symbol(<S_MAPVN>).
        case <S_SETVA>-MAPID.
*          when 'LAST_PROD'.   "Last Production Date
*            clear <S_MAPVN>-ATFLV.
          when 'TOTAL_USES'.   "Number of Uses
            <S_MAPVN>-ATFLV -= IF_LMNGA.
        endcase.
      endloop.
    endloop.

*** Set new Classification
    ME->R_BOB_BATCH->CHANGE_CLASSI( exporting IF_SETID    = 'ZVCXI_XCE_PP_TOOL_BATCH'
                                              IT_SETVA    = LT_SETVA
                                              IF_COMMIT   = ABAP_FALSE
                                    importing ET_BAPIRET2 = LT_BAPIRET2 ).

  endmethod.
  method CONFIRM.

    data: LT_SETVA    type /VCXI/CKXC_TT_SETVA,
          LT_BAPIRET2 type BAPIRETTAB.


    check ME->R_BOB_BATCH is bound.

*** Get current Classification
    LT_SETVA = ME->R_BOB_BATCH->GET_CLASSI( IF_SETID = 'ZVCXI_XCE_PP_TOOL_BATCH' ).

*** Update Classification
    loop at LT_SETVA assigning field-symbol(<S_SETVA>).
***   First value
      if <S_SETVA>-T_MAPVN is initial.
        append initial line to <S_SETVA>-T_MAPVN.
      endif.

***   Update/Set Value
      loop at <S_SETVA>-T_MAPVN assigning field-symbol(<S_MAPVN>).
        case <S_SETVA>-MAPID.
          when 'LAST_PROD'.   "Last Production Date
            <S_MAPVN>-ATFLV = conv STRING( ME->F_BUDAT ).
          when 'TOTAL_USES'.   "Number of Uses
            <S_MAPVN>-ATFLV += IF_LMNGA.
        endcase.
      endloop.
    endloop.

*** Set new Classification
    ME->R_BOB_BATCH->CHANGE_CLASSI( exporting IF_SETID    = 'ZVCXI_XCE_PP_TOOL_BATCH'
                                              IT_SETVA    = LT_SETVA
                                              IF_COMMIT   = ABAP_FALSE
                                    importing ET_BAPIRET2 = LT_BAPIRET2 ).

  endmethod.
  method CONSTRUCTOR.

    data: LF_CHARG type CHARG_D.


    ME->F_BUDAT = IF_BUDAT.

    if IF_CHARG is supplied.
      LF_CHARG = IF_CHARG.
    else.
***   Get Batches with unrestricted Stock
      select MATNR, WERKS, CHARG,
             sum( CLABS ) as UNRESTRICTED_STCK
             into table @data(LT_MCHB)
             from MCHB
            where MATNR eq @IF_MATNR
             and  WERKS eq @IF_WERKS
             and  LVORM eq @ABAP_FALSE
             and  CLABS ne 0
            group by MATNR, WERKS, CHARG.
      check SY-SUBRC eq 0.

***   Get creation date of Batches
      select CHARG, ERSDA
             into table @data(LT_CHARG)
             from MCH1
             for all entries in @LT_MCHB
            where MATNR eq @LT_MCHB-MATNR
             and  CHARG eq @LT_MCHB-CHARG
             and  LVORM ne @ABAP_TRUE.
      if SY-SUBRC ne 0.
        raise exception type /VCXI/CX_CKX.
      endif.

***   Take the overall oldest
      sort LT_CHARG by ERSDA descending.
      LF_CHARG = LT_CHARG[ 1 ]-CHARG.
    endif.

*** Load Business Object of Material Batch
    ME->R_BOB_BATCH = new #( ).
    ME->R_BOB_BATCH->INIT_FROM_DB( IF_MATNR = IF_MATNR
                                   IF_CHARG = LF_CHARG
                                   IF_WERKS = IF_WERKS ).

  endmethod.
  method PREP_BY_WORKORDER.

*** Get Business Object of Production Order
    data(LR_BOB_PRODORD) = new ZCL_VCXI_XCI_BOB_PRODORD( IF_AUFNR         = IS_AFRU-AUFNR
                                                         IS_ORDER_OBJECTS = value #( OPERATIONS     = ABAP_TRUE
                                                                                     PROD_REL_TOOLS = ABAP_TRUE ) ).

*** Read the operation information for the currently confirmed/canceled Operation
    data(LS_OPERATION) = value #( LR_BOB_PRODORD->T_OPERATION[ SEQUENCE_NO      = IS_AFRU-APLFL
                                                               OPERATION_NUMBER = IS_AFRU-VORNR ] optional ).
    check LS_OPERATION is not initial.

*** Loop all PRTs that are related to this operation
    loop at LR_BOB_PRODORD->T_PROD_REL_TOOL into data(LS_PROD_REL_TOOL)
                                           where ROUTING_NO = LS_OPERATION-ROUTING_NO
                                            and  COUNTER    = LS_OPERATION-COUNTER.

      data(LR_TOOL_USAGE) = new ZCL_VCXI_XCE_PP_TOOL_USAGE( IF_MATNR = LS_PROD_REL_TOOL-MATERIAL_LONG
                                                            IF_WERKS = LS_OPERATION-PROD_PLANT
                                                            IF_BUDAT = IS_AFRU-BUDAT ).
      check LR_TOOL_USAGE is bound.

***   Update needs to be processed in later, as Batch Classification is initialized after this call and changes would belost
      append value #( R_TOOL_USAGE = LR_TOOL_USAGE
                      STZHL        = IS_AFRU-STZHL
                      LMNGA        = IS_AFRU-LMNGA
                    ) to T_UPDATE.
    endloop.

  endmethod.
  method UPDATE.

    loop at T_UPDATE into data(LS_UPDATE)
                    where R_TOOL_USAGE is bound.
      if LS_UPDATE-STZHL is initial.    "Confirmation
        LS_UPDATE-R_TOOL_USAGE->CONFIRM( IF_LMNGA = LS_UPDATE-LMNGA ).
      else.                             "Cancelation
        LS_UPDATE-R_TOOL_USAGE->CANCEL( IF_LMNGA = LS_UPDATE-LMNGA ).
      endif.
    endloop.

    free T_UPDATE.

  endmethod.
