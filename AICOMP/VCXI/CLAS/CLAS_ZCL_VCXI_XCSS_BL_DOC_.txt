
class ZCL_VCXI_XCSS_BL_DOC definition
  public
  create protected .

public section.

  types:
    YT_FILES type standard table of CVAPI_DOC_FILE with default key .

  data F_TMP type ABAP_BOOL read-only .
  data F_DOKAR type DOKAR read-only .
  data F_DOKST type DOKST read-only .
  data T_FILES type YT_FILES read-only .
  data F_DOKNR type DOKNR read-only .
  data F_DOKTL type DOKTL_D read-only .
  data F_DOKVR type DOKVR read-only .
  data F_FRKNZ type FRKNZ read-only .
  data F_LOEDK type LOEDK read-only .

  methods CHECK_TMP
    raising
      /VCXI/CX_CKX .
  methods GET_DOC_KEY
    returning
      value(RS_DOC_KEY) type ZVCXI_XCS_S_DOC_KEY
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  class-methods CREATE
    importing
      !IF_DOKNR type DOKNR optional
      !IF_DOKTL type DOKTL_D optional
      !IF_DOKVR type DOKVR optional
      !IF_DOKAR type DOKAR
      !IF_DKTXT type DKTXT optional
      !IT_DKTXT type ZVCXI_XCS_TT_DKTXT optional
      !IF_DTTRG type DTTRG optional
      !IT_FILE type ZVCXI_XCS_TT_DOCFI optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_XCSS_BL_DOC
    raising
      /VCXI/CX_CKX .
  class-methods DECRYPT_GUID
    importing
      !IF_GUID type /VCXI/CKX_GUID
    exporting
      !EF_DOKAR type DOKAR
      !EF_DOKNR type DOKNR
      !EF_DOKTL type DOKTL_D
      !EF_DOKVR type DOKVR
    returning
      value(RS_DOC_KEY) type ZVCXI_XCS_S_DOC_KEY
    raising
      /VCXI/CX_CKX .
  class-methods ENCRYPT_GUID
    importing
      !IF_DOKAR type DOKAR
      !IF_DOKNR type DOKNR
      !IF_DOKTL type DOKTL_D
      !IF_DOKVR type DOKVR
    returning
      value(RF_GUID) type /VCXI/CKX_GUID
    raising
      /VCXI/CX_CKX .
  class-methods GET_DAPPL
    importing
      !IF_FILEPATH type /VCXI/CKX_STRING
    returning
      value(RF_DAPPL) type DAPPL
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR
    importing
      !IF_LANGU type LANGU default SY-LANGU
    exporting
      !ET_DKTXT type ZVCXI_XCS_TT_DKTXT
    returning
      value(RF_DESCR) type DKTXT
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IF_DOKAR type DOKAR
      !IF_DOKNR type DOKNR
      !IF_DOKTL type DOKTL_D
      !IF_DOKVR type DOKVR
      !IT_FILES type CVAPI_TBL_DOC_FILES optional
      !IT_DRAT type DMS_TBL_DRAT optional
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_XCSS_BL_DOC
    raising
      /VCXI/CX_CKX .
  methods OPEN_DOC
    raising
      /VCXI/CX_CKX .
  methods OPEN_DOC_RECORD
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
      DOKAR      type        DOKAR,
      DOKNR      type        DOKNR,
      DOKTL      type        DOKTL_D,
      DOKVR      type        DOKVR,
      R_INSTANCE type ref to ZCL_VCXI_XCSS_BL_DOC,
    end   of YS_INSTANCE .
  types:
    YT_INSTANCE type sorted table of YS_INSTANCE with unique key DOKAR DOKNR DOKTL DOKVR .
  types:
    YT_DAPPL type standard table of TDWP with default key .
  types:
    YT_BLOCK type X length 1024 .

  data T_DRAT type DMS_TBL_DRAT .
  class-data T_DAPPL type YT_DAPPL .
  class-data T_INSTANCE type YT_INSTANCE .

  methods CONSTRUCTOR
    importing
      !IF_DOKAR type DOKAR
      !IF_DOKNR type DOKNR
      !IF_DOKTL type DOKTL_D
      !IF_DOKVR type DOKVR
      !IF_TMP type ABAP_BOOL optional
      !IT_FILES type CVAPI_TBL_DOC_FILES optional
      !IT_DRAT type DMS_TBL_DRAT optional
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSS_BL_DOC definition
class ZCL_VCXI_XCSS_BL_DOC implementation.
  method CHECK_TMP.

*** Check Database
    select count(*)
           from DRAW
          where DOKAR = ME->F_DOKAR
           and  DOKNR = ME->F_DOKNR
           and  DOKVR = ME->F_DOKVR
           and  DOKTL = ME->F_DOKTL.
    if SY-SUBRC eq 0.
      clear ME->F_TMP.
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

*** Get all Applications
    select * from TDWP into table T_DAPPL.                           "#EC CI_SUBRC

  endmethod.
  method CONSTRUCTOR.

    data: LS_DRAW type DRAW,
          LS_TDWS type TDWS.


    move IF_DOKAR to ME->F_DOKAR.
    move IF_DOKNR to ME->F_DOKNR.
    move IF_DOKTL to ME->F_DOKTL.
    move IF_DOKVR to ME->F_DOKVR.
    move IF_TMP   to ME->F_TMP.
    move IT_FILES to ME->T_FILES.
    move IT_DRAT  to ME->T_DRAT.

*** Add to Instance Buffer
    insert value #( DOKAR      = ME->F_DOKAR
                    DOKNR      = ME->F_DOKNR
                    DOKTL      = ME->F_DOKTL
                    DOKVR      = ME->F_DOKVR
                    R_INSTANCE = ME
                  ) into table ZCL_VCXI_XCSS_BL_DOC=>T_INSTANCE.

*** Load from DB if not TMP!
    check ME->F_TMP eq ABAP_FALSE.

    call function 'CVAPI_DOC_GETDETAIL'
      exporting
        PF_DOKAR  = ME->F_DOKAR
        PF_DOKNR  = ME->F_DOKNR
        PF_DOKVR  = ME->F_DOKVR
        PF_DOKTL  = ME->F_DOKTL
      importing
        PSX_DRAW  = LS_DRAW
      tables
        PT_FILES  = ME->T_FILES
        PT_DRAT   = ME->T_DRAT
      exceptions
        NOT_FOUND = 1
        NO_AUTH   = 2
        ERROR     = 3
        others    = 4.

    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    else.
***   Buffer Document Status and deletion flag
      move LS_DRAW-DOKST to ME->F_DOKST.
      move LS_DRAW-LOEDK to ME->F_LOEDK.

***   Get Document Status Information (is Released)
      call function 'CV200_DB_TDWS_SELECT'
        exporting
          PF_READ_DESC = SPACE
          PF_DOKAR     = ME->F_DOKAR
          PF_DOKST     = ME->F_DOKST
        importing
          PSX_TDWS     = LS_TDWS
        exceptions
          NOT_FOUND    = 1.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      else.
        move LS_TDWS-FRKNZ to ME->F_FRKNZ.
      endif.
    endif.

  endmethod.
  method CREATE.

    data: LF_DOKNR   type DOKNR,
          LF_DOKTL   type DOKTL_D,
          LF_DOKVR   type DOKVR,
          LF_APPNR   type DMS_APPNR,
          LF_CONTPRV type DMS_CONTENT_PROVIDE,
          LF_SIZE    type I.
    data: LS_DRAW    type DRAW,
          LS_MESSAGE type MESSAGES,
          LS_CVAPI   type CVAPI_API_CONTROL,
          LS_DRAT    type DMS_DB_DRAT,
          LS_DRAO    type DRAO,
          LS_FILE    type ZVCXI_XCS_S_DOCFI,
          LS_BINDATA type ORBLK.
    data: LT_DRAT      type standard table of DMS_DB_DRAT,
          LT_DRAO      type standard table of DRAO,
          LT_DATA      type standard table of YT_BLOCK,
          LT_FILES     type standard table of CVAPI_DOC_FILE,
          LT_BINDATA   type standard table of ORBLK,
          LT_FILES_TMP type                   CVAPI_TBL_DOC_FILES.
    field-symbols: <S_FILES> type CVAPI_DOC_FILE,
                   <S_DATA>  type YT_BLOCK.

***--------------------------------------------------------------------------------------
*** Fill Header Entry
    LS_DRAW-DOKAR   = IF_DOKAR.

    if IF_DOKNR is not initial.
      LS_DRAW-DOKNR = IF_DOKNR.
    else.
      LS_DRAW-DOKNR = '*'.
    endif.
    if IF_DOKTL is not initial.
      LS_DRAW-DOKTL = IF_DOKTL.
    else.
      LS_DRAW-DOKTL = '000'.
    endif.
    if IF_DOKVR is not initial.
      LS_DRAW-DOKVR = IF_DOKVR.
    else.
      LS_DRAW-DOKVR = '00'.
    endif.

***--------------------------------------------------------------------------------------
*** Fill Text Table
    if IF_DKTXT is supplied.
      append value #( UPDATEFLAG  = 'I'
                      DKTXT       = IF_DKTXT
                      LANGU       = SY-LANGU
                    ) to LT_DRAT.
    endif.
    loop at IT_DKTXT into data(LS_DKTXT).
      append value #( UPDATEFLAG  = 'I'
                      DKTXT       = LS_DKTXT-DKTXT
                      LANGU       = LS_DKTXT-LANGU
                    ) to LT_DRAT.
    endloop.

***--------------------------------------------------------------------------------------
*** Fill File Table
    loop at IT_FILE into LS_FILE.
      move SY-TABIX to LF_APPNR.
      append initial line to LT_FILES assigning <S_FILES>.

***   Set Update Flag
      <S_FILES>-UPDATEFLAG  = 'I'.

***   Get Application Details
      condense LF_APPNR no-gaps.
      <S_FILES>-APPNR       = LF_APPNR.
      <S_FILES>-DAPPL       = ZCL_VCXI_XCSS_BL_DOC=>GET_DAPPL( IF_FILEPATH = LS_FILE-DOKFI ).

***   Set File and Description
      <S_FILES>-FILENAME    = LS_FILE-DOKFI.
      <S_FILES>-DESCRIPTION = LS_FILE-DKTXT.

***   Read file content
      if <S_FILES>-FILENAME is not initial.
        clear: LT_DATA, LF_SIZE.

        call function 'GUI_UPLOAD'
          exporting
            FILENAME   = LS_FILE-DOKFI
            FILETYPE   = 'BIN'
          importing
            FILELENGTH = LF_SIZE
          tables
            DATA_TAB   = LT_DATA
          exceptions
            others     = 99.

        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        else.
          loop at LT_DATA assigning <S_DATA>.
            clear LS_DRAO.
            LS_DRAO-ORBLK = <S_DATA>.
            LS_DRAO-ORLN  = LF_SIZE.
            LS_DRAO-DOKAR = IF_DOKAR.
            LS_DRAO-APPNR = LF_APPNR.
            LS_DRAO-ZAEHL = SY-TABIX.
            append LS_DRAO to LT_DRAO.
          endloop.
        endif.
      endif.
    endloop.

*** Content Provider is a intrnal Table
    LF_CONTPRV = 'TBL'.

*** Save Temporary Files
    move LT_FILES to LT_FILES_TMP.

***--------------------------------------------------------------------------------------
*** Create Document Record
    move ABAP_TRUE    to LS_CVAPI-API_MODE.
    move ABAP_TRUE    to LS_CVAPI-BAPI_FLAG.

    call function 'CVAPI_DOC_CREATE'
      exporting
        PS_DRAW            = LS_DRAW
        PS_API_CONTROL     = LS_CVAPI
        PF_CONTENT_PROVIDE = LF_CONTPRV
        PF_FTP_DEST        = 'SAPFTPA'
        PF_HTTP_DEST       = 'SAPHTTPA'
      importing
        PSX_MESSAGE        = LS_MESSAGE
        PFX_DOKNR          = LF_DOKNR
        PFX_DOKVR          = LF_DOKVR
        PFX_DOKTL          = LF_DOKTL
      tables
        PT_DRAT_X          = LT_DRAT
        PT_FILES_X         = LT_FILES
        PT_CONTENT         = LT_DRAO.

    if LS_MESSAGE-MSG_TYPE is not initial.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = LS_MESSAGE-MSG_TYPE
                                            IF_MSGID = LS_MESSAGE-MSG_ID
                                            IF_MSGNO = LS_MESSAGE-MSG_NO
                                            IF_MSGV1 = LS_MESSAGE-MSG_V1
                                            IF_MSGV2 = LS_MESSAGE-MSG_V2
                                            IF_MSGV3 = LS_MESSAGE-MSG_V3
                                            IF_MSGV4 = LS_MESSAGE-MSG_V4 ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Instance and return it
    move LT_FILES_TMP to LT_FILES.
    create object RR_INSTANCE
      exporting
        IF_DOKAR = IF_DOKAR
        IF_DOKNR = LF_DOKNR
        IF_DOKTL = LF_DOKTL
        IF_DOKVR = LF_DOKVR
        IT_DRAT  = corresponding #( LT_DRAT )
        IT_FILES = LT_FILES
        IF_TMP   = ABAP_TRUE.

  endmethod.
  method DECRYPT_GUID.

    data: LF_GUID  type CHAR33.

    move IF_GUID to LF_GUID.

    move LF_GUID+0(3)  to EF_DOKAR.
    move LF_GUID+3(25) to EF_DOKNR.
    move LF_GUID+28(3) to EF_DOKTL.
    move LF_GUID+31(2) to EF_DOKVR.

    RS_DOC_KEY = value #( DOKAR = EF_DOKAR
                          DOKNR = EF_DOKNR
                          DOKTL = EF_DOKTL
                          DOKVR = EF_DOKVR ).

  endmethod.
  method ENCRYPT_GUID.

    data: LF_GUID  type CHAR33.

    move IF_DOKAR to LF_GUID+0(3).
    move IF_DOKNR to LF_GUID+3(25).
    move IF_DOKTL to LF_GUID+28(3).
    move IF_DOKVR to LF_GUID+31(2).

    move LF_GUID to RF_GUID.

  endmethod.
  method GET_DAPPL.

    data: LF_CONTINUE    type ABAP_BOOL,
          LF_FILE_SUFFIX type /VCXI/CKX_STRING,
          LF_TMP         type /VCXI/CKX_STRING.
    data: LS_DAPPL       type TDWP.

    move IF_FILEPATH to LF_FILE_SUFFIX.

    while LF_CONTINUE eq ABAP_FALSE.
      split LF_FILE_SUFFIX at '.' into LF_TMP LF_FILE_SUFFIX.

      if LF_FILE_SUFFIX cs '.'.
        continue.
      else.
        LF_CONTINUE = ABAP_TRUE.
      endif.

      concatenate '*.' LF_FILE_SUFFIX into LF_FILE_SUFFIX.
    endwhile.

    loop at T_DAPPL into LS_DAPPL.
      if LS_DAPPL-DATEIFRMT cs LF_FILE_SUFFIX.
        move LS_DAPPL-DAPPL to RF_DAPPL.
        exit.
      endif.
    endloop.

  endmethod.
  method GET_DESCR.

    data: LS_DRAT type DRAT.


    ET_DKTXT = corresponding #( ME->T_DRAT ).

    read table ME->T_DRAT with key LANGU = IF_LANGU into LS_DRAT.
    if SY-SUBRC ne 0.
      check SY-LANGU ne IF_LANGU.
      read table ME->T_DRAT with key LANGU = SY-LANGU into LS_DRAT.
    endif.

*** Return Description
    check SY-SUBRC = 0.
    move LS_DRAT-DKTXT to RF_DESCR.

  endmethod.
  method GET_DOC_KEY.

    RS_DOC_KEY = value #( DOKAR = ME->F_DOKAR
                          DOKNR = ME->F_DOKNR
                          DOKTL = ME->F_DOKTL
                          DOKVR = ME->F_DOKVR ).

  endmethod.
  method GET_INSTANCE.

    data:  LS_INSTANCE type YS_INSTANCE.

    read table ZCL_VCXI_XCSS_BL_DOC=>T_INSTANCE into LS_INSTANCE
                                              with key DOKAR = IF_DOKAR
                                                       DOKNR = IF_DOKNR
                                                       DOKTL = IF_DOKTL
                                                       DOKVR = IF_DOKVR.
    if SY-SUBRC eq 0.
      move LS_INSTANCE-R_INSTANCE to RR_INSTANCE.
    else.
      create object RR_INSTANCE
        exporting
          IF_DOKAR = IF_DOKAR
          IF_DOKNR = IF_DOKNR
          IF_DOKTL = IF_DOKTL
          IF_DOKVR = IF_DOKVR
          IT_FILES = IT_FILES
          IT_DRAT  = IT_DRAT.
    endif.

  endmethod.
  method OPEN_DOC.

    if ME->F_TMP ne ABAP_TRUE.
***   Open based on DMS
      call function 'CVAPI_DOC_VIEW2'
        exporting
          PF_DOKAR = ME->F_DOKAR
          PF_DOKNR = ME->F_DOKNR
          PF_DOKVR = ME->F_DOKVR
          PF_DOKTL = ME->F_DOKTL
        exceptions
          ERROR    = 1.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

    else.
***   Open file directly from path
      loop at ME->T_FILES assigning field-symbol(<S_FILES>).
        CL_GUI_FRONTEND_SERVICES=>EXECUTE( exporting  DOCUMENT = conv #( <S_FILES>-FILENAME )
                                           exceptions others   = 10 ).
        if SY-SUBRC <> 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.
      endloop.
    endif.

  endmethod.
  method OPEN_DOC_RECORD.

    if ME->F_TMP eq ABAP_TRUE.
***   Document can't be viewed until it is saved.
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'W'
                                            IF_MSGID = 'ZVCXI_XCSS'
                                            IF_MSGNO = '403' ).
    endif.

***--------------------------------------------------------------------------------------
*** Define Parameter for Transaction Call
    set parameter id 'CV1' field ME->F_DOKNR.
    set parameter id 'CV2' field ME->F_DOKAR.
    set parameter id 'CV3' field ME->F_DOKVR.
    set parameter id 'CV4' field ME->F_DOKTL.

*** Set parameters are not processed quick enough
*** so FM is called and screen is not updated
    wait up to 1 seconds.

*** Create new Mode and start Transaction
    call function 'TH_CREATE_MODE'
      exporting
        TRANSAKTION    = 'CV03N'
        PROCESS_DARK   = ABAP_TRUE
      exceptions
        MAX_SESSIONS   = 1
        INTERNAL_ERROR = 2
        NO_AUTHORITY   = 3
        others         = 4.
    case SY-SUBRC.
      when 0.
      when 1.
***     Maximum number of sessions reached
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'I'
                                              IF_MSGID = '14'
                                              IF_MSGNO = '027' ).
      when others.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endcase.

  endmethod.
