
class ZCL_VCXI_P4SR_PR_RTESPV definition
  public
  inheriting from ZCL_VCXI_PXSR_PR_RTESPV
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV optional
    raising
      /VCXI/CX_CKX .

  methods CREATE_BL_PRTE
    redefinition .
  methods GET_MFRAT
    redefinition .
protected section.

  methods GET_PRVDR_PRFG
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_PRFG) type ref to ZCL_VCXI_P4SS_PR_PRFG
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_SPLR
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_PR_SPLR) type ref to ZCL_VCXI_P4SS_PR_SPLR
    raising
      /VCXI/CX_CKX .

  methods GET_CSPLIT
    redefinition .
  methods GET_ICELM
    redefinition .
  methods GET_MFMI
    redefinition .
  methods HANDLE_INIT_EVQTY
    redefinition .
  methods HANDLE_UPDATE_RTE_DEF
    redefinition .
private section.
endclass. "ZCL_VCXI_P4SR_PR_RTESPV definition
class ZCL_VCXI_P4SR_PR_RTESPV implementation.
  method CONSTRUCTOR.

    data:  LR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV.

*** Use or create the BL Routing Supervisor
    if IR_BL_RTESPV is bound.
      move IR_BL_RTESPV to LR_BL_RTESPV.
    else.
      create object LR_BL_RTESPV
        type ZCL_VCXI_P4SR_BL_RTESPV
        exporting
          IR_GATE = IR_GATE.
    endif.

*** Call Super
    call method SUPER->CONSTRUCTOR
      exporting
        IR_GATE      = IR_GATE
        IR_BL_RTESPV = LR_BL_RTESPV.

  endmethod.
  method CREATE_BL_PRTE.

    data: LR_RTE_PRTE  type ref to /VCXI/CL_VSMR_RTE_PRTE.

    if IR_RTE_PRTE is bound.
      move IR_RTE_PRTE to LR_RTE_PRTE.
    else.
      create object LR_RTE_PRTE.
    endif.

    create object RR_BL_PRTE
      type ZCL_VCXI_P4SR_BL_PRTE
      exporting
        IR_RTE_PRTE  = LR_RTE_PRTE
        IR_MFMI      = ME->R_MFMI
        IR_MFSI      = ME->R_MFSI
        IT_CSPLIT    = ME->T_CSPLIT
        IF_DATE      = ME->F_DATE
        IF_LIFNR_REQ = ABAP_TRUE.

*** Set Material Flow Ratio
    cast ZCL_VCXI_PXSR_BL_PRTE( RR_BL_PRTE )->SET_MFRAT( IF_MFRAT = ME->GET_MFRAT( ) ).

  endmethod.
  method GET_CSPLIT.

    data: LR_PR_PRFG type ref to ZCL_VCXI_P4SS_PR_PRFG.


*** Get Provider for Procurement Finished Good
    LR_PR_PRFG = ME->GET_PRVDR_PRFG( ).
    check LR_PR_PRFG is bound.

*** Get Cost Split
    RT_CSPLIT = LR_PR_PRFG->ZIF_VCXI_PXSS_FG~GET_CSPLIT( ).

*** Create no Cost Split in case only one FG exists
    if LINES( RT_CSPLIT ) le 1.
      free RT_CSPLIT.
    endif.

*** Ignore CSplits that have no value
    delete RT_CSPLIT where DCSPL is initial.

  endmethod.
  method GET_ICELM.

    move 'P4_PROC' to RF_ICELM.

  endmethod.
  method GET_MFMI.

    data: LS_MFMI_P type ZVCXI_P4SR_S_MC_PROC.
    data: LR_PR_PRFG   type ref to ZCL_VCXI_P4SS_PR_PRFG,
          LR_PR_SPLR   type ref to ZCL_VCXI_P4SS_PR_SPLR,
          LR_GATE_SPLR type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <T_MFMI> type standard table.


***------------------------------------------------------------------------------------------------
*** Find Provider for Procurement Finished Good
    LR_PR_PRFG = ME->GET_PRVDR_PRFG( ).
    check LR_PR_PRFG is bound.

*** Find Provider for Supplier Information
    LR_PR_SPLR = ME->GET_PRVDR_SPLR( importing ER_GATE = LR_GATE_SPLR ).

***------------------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_MFMI type table of ZVCXI_P4SR_S_MC_PROC.
    assign RR_MFMI->* to <T_MFMI>.

    LS_MFMI_P-WERKS = LR_PR_PRFG->GET_WERKS( ).
    LS_MFMI_P-MATNR = LR_PR_PRFG->ZIF_VCXI_PXSS_FG~GET_MATNR( ).
    LS_MFMI_P-TEXT  = LR_PR_PRFG->ZIF_VCXI_PXSS_FG~GET_MAKTX( ).

*** Purchase Information
    LS_MFMI_P-PURCH    = LR_PR_PRFG->GET_PURCH( ).
    if LR_PR_SPLR is bound.
      LS_MFMI_P-LIFNR    = LR_PR_SPLR->GET_LIFNR( ).
      LS_MFMI_P-T_PSCALE = ME->GET_PSCALE( IR_GATE_PARENT = LR_GATE_SPLR ).
    endif.

*** Append Material Flow Material to Data Reference
    append LS_MFMI_P to <T_MFMI>.

  endmethod.
  method GET_MFRAT.

    RF_MFRAT = 1.

  endmethod.
  method GET_PRVDR_PRFG.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_PRFG.

***------------------------------------------------------------------------------------------------
*** Find Provider for Procurement Finished Good
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P4SS_PR_PRFG=>C_IPRVT_P4_PRFG
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_PRFG.

  endmethod.
  method GET_PRVDR_SPLR.

    data:  LT_GATE  type /VCXI/VKSR_TT_GATE.

    clear: ER_GATE,
           RR_PR_SPLR.

***------------------------------------------------------------------------------------------------
*** Find Provider for Procurement Finished Good
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P4SS_PR_SPLR=>C_IPRVT_P4_SPLR
                                     IF_INUSE = ABAP_TRUE ).
    read table LT_GATE into ER_GATE index 1.
    check SY-SUBRC is initial.

    move ER_GATE->R_CLSPR ?to RR_PR_SPLR.

  endmethod.
  method HANDLE_INIT_EVQTY.

    data: LS_EVQTY       type        ZVCXI_XCSR_S_EVQTY.
    data: LR_GATE_PRFG   type ref to /VCXI/CL_VKSR_GATE.


***--------------------------------------------------------------------------------------
*** Get Evaluation Quantity
    move ME->GET_EVQTY( ) to LS_EVQTY.
    clear: LS_EVQTY-EVQTY.

*** Get Evaluation Quantity for a Finished Good
    ME->GET_PRVDR_PRFG( importing ER_GATE = LR_GATE_PRFG ).
    if LR_GATE_PRFG is bound.
      ME->GET_EVQTY_BY_FG( exporting IR_GATE_FG = LR_GATE_PRFG
                           importing ES_EVQTY   = LS_EVQTY ).
    endif.

*** Set Evaluation Quantity
    ME->SET_EVQTY( IS_EVQTY = LS_EVQTY ).

  endmethod.
  method HANDLE_UPDATE_RTE_DEF.

*** Perform Super
    SUPER->HANDLE_UPDATE_RTE_DEF( ).

***----------------------------------------------------------------------------
*** Empty Route Definition could require Dummy Route -> Request Auto Redetermination
    if ME->T_RTE_DEF is initial.
      move ABAP_TRUE to ME->F_REDETERMINATION_REQ.
    endif.

  endmethod.
