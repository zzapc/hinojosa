
class ZCL_VCXI_XCSUC_SHMAP definition
  public
  create protected .

public section.

  interfaces /VCXI/IF_CKX_OBJECT .
  interfaces /VCXI/IF_CKX_OBJECT_ACTION .
  interfaces /VCXI/IF_CKX_OBJECT_CD .
  interfaces /VCXI/IF_CKX_OBJECT_LOCKING .

  constants C_ACTVT_DISPLAY type ACTIV_AUTH value '03'. "#EC NOTEXT
  constants C_ACTVT_EDIT type ACTIV_AUTH value '02'. "#EC NOTEXT
  constants C_CDOCL_SHMAP type CDOBJECTCL value 'ZVCXI_XCS_SHMAP'. "#EC NOTEXT
  constants C_CDOID_SHMAP type CDOBJECTV value 'SHMAP'. "#EC NOTEXT
  constants C_FCODE_SHMAP_FREE type UI_FUNC value 'FREE'. "#EC NOTEXT
  constants C_FCODE_SHMAP_SAVE type UI_FUNC value 'SAVE'. "#EC NOTEXT
  constants C_TOOBJ_SHMAP type /VCXI/CKX_TOOBJ value 'SHMAP'. "#EC NOTEXT
  data F_CCCORACTIV type CCCORACTIV .
  type-pools ABAP .
  data F_CHANGED type ABAP_BOOL read-only .
  data F_TRANS_REQ type ABAP_BOOL .
  data T_DSRC_MAP type ZVCXI_XCSUC_TT_DSRC_MAP read-only .
  data T_IELSH type ZVCXI_XCSUC_TT_IELSH read-only .
  data T_PMATY_MAP type ZVCXI_XCSUC_TT_PMATY_MAP read-only .
  data T_SHULI_MAP type ZVCXI_XCSUC_TT_SHULI_MAP read-only .
  data T_SHUTY_MAP type ZVCXI_XCSUC_TT_SHUTY_MAP read-only .

  methods DO_CHECK
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods ADD_DSRC_MAP
    importing
      !IS_DSRC_MAP type ZVCXI_XCSUC_S_DSRC_MAP
    raising
      /VCXI/CX_CKX .
  class-methods CHECK_AUTH
    importing
      !IF_ACTVT type ACTIV_AUTH
    raising
      /VCXI/CX_CKX .
  methods ADD_PMATY_MAP
    importing
      !IS_PMATY_MAP type ZVCXI_XCSUC_S_PMATY_MAP
    returning
      value(RF_GDSRC) type ZVCXI_XCSU_GDSRC
    raising
      /VCXI/CX_CKX .
  methods ADD_SHULI_MAP
    importing
      !IS_SHULI_MAP type ZVCXI_XCSUC_S_SHULI_MAP
    returning
      value(RF_GDSRC) type ZVCXI_XCSU_GDSRC
    raising
      /VCXI/CX_CKX .
  methods ADD_SHUTY_MAP
    importing
      !IS_SHUTY_MAP type ZVCXI_XCSUC_S_SHUTY_MAP
    returning
      value(RF_GDSRC) type ZVCXI_XCSU_GDSRC
    raising
      /VCXI/CX_CKX .
  methods DELETE_DSRC_MAP
    importing
      !IS_DSRC_MAP type ZVCXI_XCSUC_S_DSRC_MAP
    raising
      /VCXI/CX_CKX .
  methods DELETE_PMATY_MAP
    importing
      !IS_PMATY_MAP type ZVCXI_XCSUC_S_PMATY_MAP
    raising
      /VCXI/CX_CKX .
  methods DELETE_SHULI_MAP
    importing
      !IS_SHULI_MAP type ZVCXI_XCSUC_S_SHULI_MAP
    raising
      /VCXI/CX_CKX .
  methods DELETE_SHUTY_MAP
    importing
      !IS_SHUTY_MAP type ZVCXI_XCSUC_S_SHUTY_MAP
    raising
      /VCXI/CX_CKX .
  methods UPDATE_DSRC_MAP
    importing
      !IS_DSRC_MAP type ZVCXI_XCSUC_S_DSRC_MAP
    raising
      /VCXI/CX_CKX .
  methods UPDATE_PMATY_MAP
    importing
      !IS_PMATY_MAP type ZVCXI_XCSUC_S_PMATY_MAP
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SHULI_MAP
    importing
      !IS_SHULI_MAP type ZVCXI_XCSUC_S_SHULI_MAP
    raising
      /VCXI/CX_CKX .
  methods UPDATE_SHUTY_MAP
    importing
      !IS_SHUTY_MAP type ZVCXI_XCSUC_S_SHUTY_MAP
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
           OWNER      type /VCXI/CKX_STRING,
           R_INSTANCE type ref to ZCL_VCXI_XCSUC_SHMAP,
         end of YS_INSTANCE .
  types:
    YT_INSTANCE type sorted table of YS_INSTANCE with unique key OWNER .

  data R_CUST_SHIPU type ref to ZCL_VCXI_XCSU_CUST_SHIPU .
  data F_WRITE_TR type ABAP_BOOL .
  constants C_MAPTY_SUT type CHAR03 value 'SUT'.            "#EC NOTEXT
  constants C_MAPTY_SUL type CHAR03 value 'SUL'.            "#EC NOTEXT
  constants C_MAPTY_PMT type CHAR03 value 'PMT'.            "#EC NOTEXT
  class-data T_INSTANCE type YT_INSTANCE .

  methods CHECK_SHUTY
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
      !IF_MAPTY type CHAR03
    raising
      /VCXI/CX_CKX .
  methods CHECK_SHUNT
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
      !IF_MAPTY type CHAR03
      !IF_SHUTY type ZVCXI_XCSU_SHUTY optional
    raising
      /VCXI/CX_CKX .
  methods CHECK_IELSH
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
      !IF_IELSH type ZVCXI_XCSU_IELSH
      !IF_MAPTY type CHAR03
    raising
      /VCXI/CX_CKX .
  methods CHECK_FREQU
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
      !IF_APDAF_UOM type ZVCXI_XCSU_APDAF_UOM
      !IF_MAPTY type CHAR03
      !IF_IELSH type ZVCXI_XCSU_IELSH optional
      !IF_LIMIT type ZVCXI_XCSU_LIMIT optional
      !IF_DIMEN type ZVCXI_XCSU_DIMEN optional
      !IF_FCONV type ZVCXI_XCSU_FCONV
    raising
      /VCXI/CX_CKX .
  methods CHECK_PMATY
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
      !IF_PMATY type ZVCXI_XCSU_PMATY
      !IF_MAPTY type CHAR03
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    raising
      /VCXI/CX_CKX .
  methods CHECK_LIMIT_DIMEN
    importing
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
      !IF_DIMEN type ZVCXI_XCSU_DIMEN
      !IF_MAPTY type CHAR03
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
      !IF_LIMIT type ZVCXI_XCSU_LIMIT
    raising
      /VCXI/CX_CKX .
  methods CHECK_FCONV_FNAME
    importing
      !IF_FNAME type FUNCNAME
      !IR_MSG type ref to /VCXI/CL_CKXM_MESSAGE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FREE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SAVE
    raising
      /VCXI/CX_CKX .
  methods SET_LOCK
    importing
      !IF_LOCKED type /VCXI/CKX_LOCKED
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_OWNER type /VCXI/CKX_STRING
    raising
      /VCXI/CX_CKX .
private section.

  data F_LOCKED type /VCXI/CKX_LOCKED .
  class-data R_INSTANCE type ref to /VCXI/IF_CKX_OBJECT .

  methods HANDLE_CHANGED
    for event /VCXI/IF_CKX_OBJECT~CHANGED of ZCL_VCXI_XCSUC_SHMAP .
  methods LOAD_FROM_DB
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSUC_SHMAP definition
class ZCL_VCXI_XCSUC_SHMAP implementation.
method /VCXI/IF_CKX_OBJECT_ACTION~GET_ACTIONS.
endmethod.
method /VCXI/IF_CKX_OBJECT_ACTION~HANDLE_ACTION.

  case IF_FCODE.
    when ZCL_VCXI_XCSUC_SHMAP=>C_FCODE_SHMAP_SAVE.
      ME->HANDLE_SAVE( ).
    when ZCL_VCXI_XCSUC_SHMAP=>C_FCODE_SHMAP_FREE.
      ME->HANDLE_FREE( ).
  endcase.

endmethod.
method /VCXI/IF_CKX_OBJECT_CD~GET_INFO.

  move ZCL_VCXI_XCSUC_SHMAP=>C_CDOCL_SHMAP to EF_CDOCL.
  move ZCL_VCXI_XCSUC_SHMAP=>C_CDOID_SHMAP to EF_CDOID.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED.

***------------------------------------------------------------------------------------------------
*** Check of the Lock-Status of the Object
  if ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) ne ABAP_TRUE.
*** Shipping Information Mapping is not locked. No changes possible.
    raise exception type /VCXI/CX_CKX
          exporting
            F_MSGTY = 'E'
            F_MSGID = 'ZVCXI_XCSUC'
            F_MSGNO = '001'.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK .

***--------------------------------------------------------------------------------------
*** Check Authorization
  ZCL_VCXI_XCSUC_SHMAP=>CHECK_AUTH( IF_ACTVT = ZCL_VCXI_XCSUC_SHMAP=>C_ACTVT_EDIT ).

***--------------------------------------------------------------------------------------
*** Customizing Changes allowed in Client
  check ME->F_CCCORACTIV ne '2'.

*** Set DB Lock Entrie
  ME->SET_LOCK( IF_LOCKED = ABAP_TRUE ).

  move ABAP_TRUE to ME->F_LOCKED.

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK .

*** Delete DB Lock Entrie
  ME->SET_LOCK( IF_LOCKED = ABAP_FALSE ).

  move ABAP_FALSE to ME->F_LOCKED.

***--------------------------------------------------------------------------------------
  try.
***   Load from DB
      ME->LOAD_FROM_DB( ).

    catch /VCXI/CX_CKX.
      ME->HANDLE_FREE( ).
  endtry.

endmethod.
method /VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED .

  move ME->F_LOCKED to RF_LOCKED.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR.
endmethod.
method /VCXI/IF_CKX_OBJECT~GET_DESCR_ALL.
endmethod.
method /VCXI/IF_CKX_OBJECT~GET_GUID.
endmethod.
method /VCXI/IF_CKX_OBJECT~GET_ID.
endmethod.
method /VCXI/IF_CKX_OBJECT~GET_INSTANCE.

  data:  LF_OWNER    type        /VCXI/CKX_STRING.
  data:  LS_INSTANCE type        YS_INSTANCE.
  data:  LR_SHMAP    type ref to ZCL_VCXI_XCSUC_SHMAP.

  move IF_GUID to LF_OWNER.

*** Find existing Instance
  read table T_INSTANCE into LS_INSTANCE
                        with key OWNER = LF_OWNER.
  if SY-SUBRC eq 0.
*** Return Instance
    move LS_INSTANCE-R_INSTANCE to RR_OBJECT.
  else.
*** Create new Instance
    create object LR_SHMAP
      exporting
        IF_OWNER = LF_OWNER.
    move LR_SHMAP to RR_OBJECT.
  endif.

endmethod.
method /VCXI/IF_CKX_OBJECT~GET_LOG.

*** Get Latest Log of all Subobjects

endmethod.
method ADD_DSRC_MAP.

  field-symbols: <S_DSRC_MAP> type ZVCXI_XCSUC_S_DSRC_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_DSRC_MAP assigning <S_DSRC_MAP> with key GDSRC = IS_DSRC_MAP-GDSRC
                                                            DPRIO = IS_DSRC_MAP-DPRIO.

  if SY-SUBRC ne 0.
    append initial line to ME->T_DSRC_MAP assigning <S_DSRC_MAP>.
    move-corresponding IS_DSRC_MAP to <S_DSRC_MAP>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_PMATY_MAP.

  field-symbols: <S_PMATY_MAP> type ZVCXI_XCSUC_S_PMATY_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PMATY_MAP assigning <S_PMATY_MAP> with key GPMTD = IS_PMATY_MAP-GPMTD.

  if SY-SUBRC ne 0.
    append initial line to ME->T_PMATY_MAP assigning <S_PMATY_MAP>.
    move-corresponding IS_PMATY_MAP to <S_PMATY_MAP>.

*** Get own GUID
    call function 'GUID_CREATE'
      importing
        EV_GUID_22 = <S_PMATY_MAP>-GPMTD.

*** Get GUID of Data Source
    call function 'GUID_CREATE'
      importing
        EV_GUID_22 = <S_PMATY_MAP>-GDSRC.

    move <S_PMATY_MAP>-GDSRC to RF_GDSRC.

***----------------------------------------------------------------------------
*** Set Created Info to Log
    move SY-UNAME     to <S_PMATY_MAP>-CREBY.
    get time stamp field <S_PMATY_MAP>-CREAT.

  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_SHULI_MAP.

  field-symbols: <S_SHULI_MAP> type ZVCXI_XCSUC_S_SHULI_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHULI_MAP assigning <S_SHULI_MAP> with key GSULD = IS_SHULI_MAP-GSULD.

  if SY-SUBRC ne 0.
    append initial line to ME->T_SHULI_MAP assigning <S_SHULI_MAP>.
    move-corresponding IS_SHULI_MAP to <S_SHULI_MAP>.

*** Get own GUID
    call function 'GUID_CREATE'
      importing
        EV_GUID_22 = <S_SHULI_MAP>-GSULD.

*** Get GUID of Data Source
    call function 'GUID_CREATE'
      importing
        EV_GUID_22 = <S_SHULI_MAP>-GDSRC.

    move <S_SHULI_MAP>-GDSRC to RF_GDSRC.

***----------------------------------------------------------------------------
*** Set Created Info to Log
    move SY-UNAME     to <S_SHULI_MAP>-CREBY.
    get time stamp field <S_SHULI_MAP>-CREAT.

  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method ADD_SHUTY_MAP.

  field-symbols: <S_SHUTY_MAP> type ZVCXI_XCSUC_S_SHUTY_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUTY_MAP assigning <S_SHUTY_MAP> with key GSUTD = IS_SHUTY_MAP-GSUTD.

  if SY-SUBRC ne 0.
    append initial line to ME->T_SHUTY_MAP assigning <S_SHUTY_MAP>.
    move-corresponding IS_SHUTY_MAP to <S_SHUTY_MAP>.

*** Get own GUID
    call function 'GUID_CREATE'
      importing
        EV_GUID_22 = <S_SHUTY_MAP>-GSUTD.

*** Get GUID of Data Source
    call function 'GUID_CREATE'
      importing
        EV_GUID_22 = <S_SHUTY_MAP>-GDSRC.

    move <S_SHUTY_MAP>-GDSRC to RF_GDSRC.

***----------------------------------------------------------------------------
*** Set Created Info to Log
    move SY-UNAME     to <S_SHUTY_MAP>-CREBY.
    get time stamp field <S_SHUTY_MAP>-CREAT.

  endif.


***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method CHECK_AUTH.

  data:  LF_MSGV1  type SYMSGV.

***--------------------------------------------------------------------------------------
*** Check Authority for Shipping Info Mapping
    authority-check object 'Z_XC_SHP_M'
             id 'ACTVT'     field IF_ACTVT.

***--------------------------------------------------------------------------------------
  if SY-SUBRC ne 0.
*** Get Activity Description
    select single LTEXT
           into LF_MSGV1
           from TACTT
          where SPRAS eq SY-LANGU
           and  ACTVT eq IF_ACTVT.

*** No authorization to & Shipping Information Mapping.
    raise exception type /VCXI/CX_CKX
       exporting
         F_MSGTY = 'E'
         F_MSGID = 'ZVCXI_XCSUC'
         F_MSGNO = '050'
         F_MSGV1 = LF_MSGV1.
  endif.

endmethod.
method CHECK_FCONV_FNAME.

  data:  LF_FUNCNAME          type                   RS38L-NAME.
  data:  LS_RSIMP             type                   RSIMP,
         LS_RSEXP             type                   RSEXP.
  data:  LT_RSEXC             type standard table of RSEXC,
         LT_RSIMP             type standard table of RSIMP,
         LT_RSEXP             type standard table of RSEXP,
         LT_RSCHA             type standard table of RSCHA,
         LT_RSTBL             type standard table of RSTBL.
  data:  LR_CX_CKX            type ref to            /VCXI/CX_CKX.

  check IF_FNAME is not initial.

***----------------------------------------------------------------------------
*** Get Function Module Interface Definition
  try.
      move IF_FNAME to LF_FUNCNAME.
      call function 'FUNCTION_IMPORT_INTERFACE'
        exporting
          FUNCNAME           = LF_FUNCNAME
        tables
          EXCEPTION_LIST     = LT_RSEXC
          IMPORT_PARAMETER   = LT_RSIMP
          EXPORT_PARAMETER   = LT_RSEXP
          CHANGING_PARAMETER = LT_RSCHA
          TABLES_PARAMETER   = LT_RSTBL
        exceptions
          ERROR_MESSAGE      = 1
          FUNCTION_NOT_FOUND = 2
          INVALID_NAME       = 3
          others             = 4.
      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    catch /VCXI/CX_CKX into LR_CX_CKX.
      IR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
      exit.
  endtry.

***----------------------------------------------------------------------------
*** Check Importing Parameter
  loop at LT_RSIMP into LS_RSIMP.
    case LS_RSIMP-PARAMETER.
      when 'IF_VALUE' or 'IF_UNIT'.
***     Type check is not required!
      when others.
***     Other Parameters have to be optional
        if LS_RSIMP-OPTIONAL ne ABAP_TRUE.
***       Function Module &1: Parameter &2 is only supported if optional.
          try.
              /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                    IF_MSGID = 'ZVCXI_XCSUC'
                                                    IF_MSGNO = '012'
                                                    IF_MSGV1 = LF_FUNCNAME
                                                    IF_MSGV2 = LS_RSIMP-PARAMETER ).
            catch /VCXI/CX_CKX into LR_CX_CKX.
              IR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
          endtry.
        endif.
    endcase.
  endloop.

***----------------------------------------------------------------------------
*** Check Exporting Parameter
  loop at LT_RSEXP into LS_RSEXP.
    case LS_RSEXP-PARAMETER.
      when 'EF_VALUE' or 'EF_UNIT'.
***     Type check is not required!
      when others.
***     Function Module &1: Parameter &2 is not supported.
        try.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_XCSUC'
                                                  IF_MSGNO = '013'
                                                  IF_MSGV1 = LF_FUNCNAME
                                                  IF_MSGV2 = LS_RSEXP-PARAMETER ).
          catch /VCXI/CX_CKX into LR_CX_CKX.
            IR_MSG->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
        endtry.
    endcase.
  endloop.

endmethod.
method CHECK_FREQU.

  data:          LF_MSGV1            type        SYMSGV,
                 LF_MSGV2            type        SYMSGV,
                 LF_MSGTY            type        SYMSGTY.
  data:          LT_PMATY            type        ZVCXI_XCSU_TT_PMATY.

*** Unit is for ShipUnitLimit always required
  if IF_MAPTY ne C_MAPTY_SUL.
    read table ME->T_IELSH with key IELSH = IF_IELSH
                                    FREQU = ABAP_TRUE
                           transporting no fields.
    check SY-SUBRC eq 0 and
          IF_APDAF_UOM is initial.
  endif.

  case IF_MAPTY.
    when C_MAPTY_SUT.
      move 'Shipping Unit Type'(SUT)      to LF_MSGV1.
    when C_MAPTY_SUL.
      move 'Shipping Unit Limit'(SUL)     to LF_MSGV1.
    when C_MAPTY_PMT.
      move 'Packaging Material Type'(PMT) to LF_MSGV1.
  endcase.

  if IF_FCONV is initial.
    LF_MSGTY = 'E'.
  else.
    LF_MSGTY = 'W'.
  endif.

  if IF_IELSH is not initial.
    move IF_IELSH to LF_MSGV2.
  else.
    concatenate IF_LIMIT IF_DIMEN into LF_MSGV2 separated by '-'.
  endif.
  condense LF_MSGV2.

*** "&1 Mapping" - Unit is required for &2.
  IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSUC'
                       IF_MSGTY = LF_MSGTY
                       IF_MSGNO = '021'
                       IF_MSGV1 = LF_MSGV1
                       IF_MSGV2 = LF_MSGV2 ).
endmethod.
method CHECK_IELSH.

  data:          LF_MSGV1            type        SYMSGV.

  check IF_IELSH is initial.

  case IF_MAPTY.
    when C_MAPTY_SUT.
      move 'Shipping Unit Type'(SUT)      to LF_MSGV1.
    when C_MAPTY_SUL.
      move 'Shipping Unit Limit'(SUL)     to LF_MSGV1.
    when C_MAPTY_PMT.
      move 'Packaging Material Type'(PMT) to LF_MSGV1.
  endcase.

*** "&1 Mapping" - Shipping Element ID is not maintained.
  IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSUC'
                       IF_MSGTY = 'E'
                       IF_MSGNO = '017'
                       IF_MSGV1 = LF_MSGV1 ).
endmethod.
method CHECK_LIMIT_DIMEN.

  data:          LF_MSGV1            type        SYMSGV,
                 LF_MSGV2            type        SYMSGV.
  data:          LT_LIMIT            type        ZVCXI_XCSU_TT_SHUTY_LIMIT.

  LT_LIMIT = ME->R_CUST_SHIPU->GET_LIMIT_FOR_SHUNT( IF_SHUNT = IF_SHUNT ).
  read table LT_LIMIT with key DIMEN = IF_DIMEN
                               LIMIT = IF_LIMIT
                      transporting no fields.
  check SY-SUBRC ne 0.

  case IF_MAPTY.
    when C_MAPTY_SUT.
      move 'Shipping Unit Type'(SUT)      to LF_MSGV1.
    when C_MAPTY_SUL.
      move 'Shipping Unit Limit'(SUL)     to LF_MSGV1.
    when C_MAPTY_PMT.
      move 'Packaging Material Type'(PMT) to LF_MSGV1.
  endcase.

  if IF_LIMIT is initial and IF_DIMEN is initial.
*** "&1 Mapping" - Shipping Unit Dimension Limitis not maintained.
    IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSUC'
                         IF_MSGTY = 'E'
                         IF_MSGNO = '019'
                         IF_MSGV1 = LF_MSGV1 ).
  else.

    concatenate IF_LIMIT '-' IF_DIMEN into LF_MSGV2 separated by SPACE.
    condense LF_MSGV2.
*** "&1 Mapping" - Shipping Unit Dimension Limit &2 is not valid.
    IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSUC'
                         IF_MSGTY = 'E'
                         IF_MSGNO = '018'
                         IF_MSGV1 = LF_MSGV1
                         IF_MSGV2 = LF_MSGV2 ).
  endif.
endmethod.
method CHECK_PMATY.

  data:          LF_MSGV1            type        SYMSGV,
                 LF_MSGV2            type        SYMSGV.
  data:          LT_PMATY            type        ZVCXI_XCSU_TT_PMATY.

  LT_PMATY = ME->R_CUST_SHIPU->GET_PMATY_FOR_SHUNT( IF_SHUNT = IF_SHUNT ).
  read table LT_PMATY with key PMATY = IF_PMATY
                      transporting no fields.
  check SY-SUBRC ne 0.

  case IF_MAPTY.
    when C_MAPTY_SUT.
      move 'Shipping Unit Type'(SUT)      to LF_MSGV1.
    when C_MAPTY_SUL.
      move 'Shipping Unit Limit'(SUL)     to LF_MSGV1.
    when C_MAPTY_PMT.
      move 'Packaging Material Type'(PMT) to LF_MSGV1.
  endcase.

  move IF_PMATY to LF_MSGV2.
  condense LF_MSGV2.
*** "&1 Mapping" - Packaging Material Type &2 is not valid.
  IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSUC'
                       IF_MSGTY = 'E'
                       IF_MSGNO = '020'
                       IF_MSGV1 = LF_MSGV1
                       IF_MSGV2 = LF_MSGV2 ).
endmethod.
method CHECK_SHUNT.

  data:          LF_MSGV1            type        SYMSGV,
                 LF_MSGV2            type        SYMSGV.
  data:          LT_SHUNT            type        ZVCXI_XCSU_TT_SHUNT.

  LT_SHUNT = ME->R_CUST_SHIPU->GET_SHUNT_FOR_SHUTY( IF_SHUTY = IF_SHUTY ).
  read table LT_SHUNT with key SHUNT = IF_SHUNT
                      transporting no fields.
  check SY-SUBRC ne 0.

  case IF_MAPTY.
    when C_MAPTY_SUT.
      move 'Shipping Unit Type'(SUT)      to LF_MSGV1.
    when C_MAPTY_SUL.
      move 'Shipping Unit Limit'(SUL)     to LF_MSGV1.
    when C_MAPTY_PMT.
      move 'Packaging Material Type'(PMT) to LF_MSGV1.
  endcase.

  move IF_SHUNT to LF_MSGV2.
  condense LF_MSGV2.
*** "&1 Mapping" - Shipping Unit &2 is not valid.
  IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSUC'
                       IF_MSGTY = 'E'
                       IF_MSGNO = '016'
                       IF_MSGV1 = LF_MSGV1
                       IF_MSGV2 = LF_MSGV2 ).
endmethod.
method CHECK_SHUTY.

  data:          LF_MSGV1            type        SYMSGV,
                 LF_MSGV2            type        SYMSGV.
  data:          LT_SHUTY            type        ZVCXI_XCSU_TT_SHUTY.

  LT_SHUTY = ME->R_CUST_SHIPU->GET_SHUTY_FOR_SHSCH( IF_SHSCH = SPACE ).
  read table LT_SHUTY with key SHUTY = IF_SHUTY
                      transporting no fields.
  check SY-SUBRC ne 0.

  case IF_MAPTY.
    when C_MAPTY_SUT.
      move 'Shipping Unit Type'(SUT)      to LF_MSGV1.
    when C_MAPTY_SUL.
      move 'Shipping Unit Limit'(SUL)     to LF_MSGV1.
    when C_MAPTY_PMT.
      move 'Packaging Material Type'(PMT) to LF_MSGV1.
  endcase.

  move IF_SHUTY to LF_MSGV2.
  condense LF_MSGV2.
*** "&1 Mapping" - Shipping Unit Type &2 is not valid.
  IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSUC'
                       IF_MSGTY = 'E'
                       IF_MSGNO = '015'
                       IF_MSGV1 = LF_MSGV1
                       IF_MSGV2 = LF_MSGV2 ).
endmethod.
method CONSTRUCTOR.

  data: LS_INSTANCE type YS_INSTANCE.

***------------------------------------------------------------------------------------------------
*** Load DB
  ME->LOAD_FROM_DB( ).

***------------------------------------------------------------------------------------------------
*** Define Type of Object
  move C_TOOBJ_SHMAP to ME->/VCXI/IF_CKX_OBJECT~F_TOOBJ.

***--------------------------------------------------------------------------------------
*** Add instance to static instance buffer
  move IF_OWNER to LS_INSTANCE-OWNER.
  move ME       to LS_INSTANCE-R_INSTANCE.
  insert LS_INSTANCE into table T_INSTANCE.

***------------------------------------------------------------------------------------------------
  set handler ME->HANDLE_CHANGED for ME.

*** Get System/Client Parameters
  call function 'TR_SYS_PARAMS'
    importing
      SYSTEM_CLIENT_EDIT = ME->F_CCCORACTIV
    exceptions
      NO_SYSTEMNAME      = 1
      NO_SYSTEMTYPE      = 2.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Get Customizing Instance
  ME->R_CUST_SHIPU = ZCL_VCXI_XCSU_CUST_SHIPU=>GET_INSTANCE( IF_OWNER = IF_OWNER ).

endmethod.
method DELETE_DSRC_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_DSRC_MAP with key GDSRC = IS_DSRC_MAP-GDSRC
                                     DPRIO = IS_DSRC_MAP-DPRIO
                             transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_DSRC_MAP where GDSRC = IS_DSRC_MAP-GDSRC
                            and DPRIO = IS_DSRC_MAP-DPRIO.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_PMATY_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PMATY_MAP with key GPMTD = IS_PMATY_MAP-GPMTD
                             transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_PMATY_MAP where GPMTD = IS_PMATY_MAP-GPMTD.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_SHULI_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHULI_MAP with key GSULD = IS_SHULI_MAP-GSULD
                             transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_SHULI_MAP where GSULD = IS_SHULI_MAP-GSULD.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DELETE_SHUTY_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUTY_MAP with key GSUTD = IS_SHUTY_MAP-GSUTD
                             transporting no fields.

  if SY-SUBRC eq 0.
    delete ME->T_SHUTY_MAP where GSUTD = IS_SHUTY_MAP-GSUTD.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method DO_CHECK.

  data:          LF_LINES            type        I,
                 LF_MSGV1            type        SYMSGV.
  data:          LS_SHUTY_MAP        type        ZVCXI_XCSUC_S_SHUTY_MAP,
                 LS_SHUTY_MAP_CHECK  type        ZVCXI_XCSUC_S_SHUTY_MAP,
                 LS_SHULI_MAP        type        ZVCXI_XCSUC_S_SHULI_MAP,
                 LS_SHULI_MAP_CHECK  type        ZVCXI_XCSUC_S_SHULI_MAP,
                 LS_PMATY_MAP        type        ZVCXI_XCSUC_S_PMATY_MAP,
                 LS_PMATY_MAP_CHECK  type        ZVCXI_XCSUC_S_PMATY_MAP,
                 LS_DSRC_MAP         type        ZVCXI_XCSUC_S_DSRC_MAP,
                 LS_DSRC_MAP_CHECK   type        ZVCXI_XCSUC_S_DSRC_MAP.
  data:          LT_SHUTY_MAP_CHECK  type        ZVCXI_XCSUC_TT_SHUTY_MAP,
                 LT_SHULI_MAP_CHECK  type        ZVCXI_XCSUC_TT_SHULI_MAP,
                 LT_PMATY_MAP_CHECK  type        ZVCXI_XCSUC_TT_PMATY_MAP.

*** ----------------------------------------------------------------------------
*** Check unique Lines - Shipping Unit Type
  loop at ME->T_SHUTY_MAP into LS_SHUTY_MAP.

*** ----------------------------------------------------------------------------
*** Do Check Shipping Unit Type
    ME->CHECK_SHUTY( IR_MSG   = IR_MSG
                     IF_SHUTY = LS_SHUTY_MAP-SHUTY
                     IF_MAPTY = C_MAPTY_SUT ).

*** ----------------------------------------------------------------------------
*** Do Check Shipping Unit
    ME->CHECK_SHUNT( IR_MSG   = IR_MSG
                     IF_SHUNT = LS_SHUTY_MAP-SHUNT
                     IF_MAPTY = C_MAPTY_SUT
                     IF_SHUTY = LS_SHUTY_MAP-SHUTY ).

*** ----------------------------------------------------------------------------
***   Do Check Shipping Element ID
    ME->CHECK_IELSH( IR_MSG   = IR_MSG
                     IF_IELSH = LS_SHUTY_MAP-IELSH
                     IF_MAPTY = C_MAPTY_SUT ).

*** Check Double entries
    loop at ME->T_SHUTY_MAP into LS_SHUTY_MAP_CHECK
      where GDSRC ne LS_SHUTY_MAP-GDSRC and
            SHUTY eq LS_SHUTY_MAP-SHUTY and
            SHUNT eq LS_SHUTY_MAP-SHUNT.

      loop at ME->T_DSRC_MAP into LS_DSRC_MAP where GDSRC = LS_SHUTY_MAP-GDSRC.
        loop at ME->T_DSRC_MAP into LS_DSRC_MAP_CHECK where GDSRC = LS_SHUTY_MAP_CHECK-GDSRC.

          if  LS_SHUTY_MAP_CHECK-IELSH eq LS_SHUTY_MAP-IELSH and
              LS_DSRC_MAP_CHECK-APDAF  eq LS_DSRC_MAP-APDAF and
              LS_DSRC_MAP_CHECK-MAPID  eq LS_DSRC_MAP-MAPID.
            collect LS_SHUTY_MAP_CHECK into LT_SHUTY_MAP_CHECK.
          endif.
        endloop.
      endloop.
    endloop.

    loop at ME->T_DSRC_MAP into LS_DSRC_MAP where GDSRC = LS_SHUTY_MAP-GDSRC.
*** ----------------------------------------------------------------------------
***   Do Function Module Check
      ME->CHECK_FCONV_FNAME( IR_MSG   = IR_MSG
                             IF_FNAME = LS_DSRC_MAP-FCONV ).

***   Do Unit Required Check
      if LS_DSRC_MAP-SETID is initial or
         LS_DSRC_MAP-MAPID is initial.
        ME->CHECK_FREQU( IR_MSG       = IR_MSG
                         IF_APDAF_UOM = LS_DSRC_MAP-APDAF_UOM
                         IF_MAPTY     = C_MAPTY_SUT
                         IF_IELSH     = LS_SHUTY_MAP-IELSH
                         IF_FCONV     = LS_DSRC_MAP-FCONV ).
      endif.
    endloop.
  endloop.

  move LINES( LT_SHUTY_MAP_CHECK ) to LF_LINES.
  if LF_LINES is not initial.
    move LF_LINES to LF_MSGV1.
    condense LF_MSGV1.
*** Check Shipping Unit Type Mapping. There are &1 similar Entries.
    IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSUC'
                         IF_MSGTY = 'E'
                         IF_MSGNO = '004'
                         IF_MSGV1 = LF_MSGV1 ).
  endif.

*** ----------------------------------------------------------------------------
*** Check unique Lines - Shipping Unit Limits
  loop at ME->T_SHULI_MAP into LS_SHULI_MAP.


*** ----------------------------------------------------------------------------
*** Do Check Shipping Unit
    ME->CHECK_SHUNT( IR_MSG   = IR_MSG
                     IF_SHUNT = LS_SHULI_MAP-SHUNT
                     IF_MAPTY = C_MAPTY_SUL ).

*** ----------------------------------------------------------------------------
*** Do Check Shipping Unit - Dimension Limmit
    ME->CHECK_LIMIT_DIMEN( IR_MSG   = IR_MSG
                           IF_DIMEN = LS_SHULI_MAP-DIMEN
                           IF_MAPTY = C_MAPTY_SUL
                           IF_SHUNT = LS_SHULI_MAP-SHUNT
                           IF_LIMIT = LS_SHULI_MAP-LIMIT ).

*** Check Double entries
    loop at ME->T_SHULI_MAP into LS_SHULI_MAP_CHECK
      where GDSRC ne LS_SHULI_MAP-GDSRC and
            SHUNT eq LS_SHULI_MAP-SHUNT and
            LIMIT eq LS_SHULI_MAP-LIMIT.

      loop at ME->T_DSRC_MAP into LS_DSRC_MAP where GDSRC = LS_SHULI_MAP-GDSRC.
        loop at ME->T_DSRC_MAP into LS_DSRC_MAP_CHECK where GDSRC = LS_SHULI_MAP_CHECK-GDSRC.

          if  LS_SHULI_MAP_CHECK-DIMEN eq LS_SHULI_MAP-DIMEN and
              LS_DSRC_MAP_CHECK-APDAF  eq LS_DSRC_MAP-APDAF and
              LS_DSRC_MAP_CHECK-MAPID  eq LS_DSRC_MAP-MAPID.
            collect LS_SHULI_MAP_CHECK into LT_SHULI_MAP_CHECK.
          endif.
        endloop.
      endloop.
    endloop.

    loop at ME->T_DSRC_MAP into LS_DSRC_MAP where GDSRC = LS_SHULI_MAP-GDSRC.
*** ----------------------------------------------------------------------------
***   Do Function Module Check
      ME->CHECK_FCONV_FNAME( IF_FNAME = LS_DSRC_MAP-FCONV
                             IR_MSG   = IR_MSG ).

***   Do Unit Required Check
      if LS_DSRC_MAP-SETID is initial or
         LS_DSRC_MAP-MAPID is initial.
        ME->CHECK_FREQU( IR_MSG       = IR_MSG
                      IF_APDAF_UOM = LS_DSRC_MAP-APDAF_UOM
                      IF_MAPTY     = C_MAPTY_SUL
                      IF_LIMIT     = LS_SHULI_MAP-LIMIT
                      IF_DIMEN     = LS_SHULI_MAP-DIMEN
                      IF_FCONV     = LS_DSRC_MAP-FCONV ).
      endif.
    endloop.
  endloop.

  move LINES( LT_SHULI_MAP_CHECK ) to LF_LINES.
  if LF_LINES is not initial.
    move LF_LINES to LF_MSGV1.
    condense LF_MSGV1.
*** Check Shipping Unit Limit Mapping. There are &1 similar Entries.
    IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSUC'
                         IF_MSGTY = 'E'
                         IF_MSGNO = '006'
                         IF_MSGV1 = LF_MSGV1 ).
  endif.

*** ----------------------------------------------------------------------------
*** Check unique Lines - Packaging Material Type
  loop at ME->T_PMATY_MAP into LS_PMATY_MAP.


    if LS_PMATY_MAP-SHUTY is not initial.
*** ----------------------------------------------------------------------------
*** Do Check Shipping Unit Type
      ME->CHECK_SHUTY( IR_MSG   = IR_MSG
                       IF_SHUTY = LS_PMATY_MAP-SHUTY
                       IF_MAPTY = C_MAPTY_PMT ).

      if LS_PMATY_MAP-SHUNT is not initial.
*** ----------------------------------------------------------------------------
*** Do Check Shipping Unit
        ME->CHECK_SHUNT( IR_MSG   = IR_MSG
                         IF_SHUNT = LS_PMATY_MAP-SHUNT
                         IF_MAPTY = C_MAPTY_PMT
                         IF_SHUTY = LS_PMATY_MAP-SHUTY ).
      endif.
    endif.

*** ----------------------------------------------------------------------------
*** Do Check Packaging Material Type
    ME->CHECK_PMATY( IR_MSG   = IR_MSG
                     IF_PMATY = LS_PMATY_MAP-PMATY
                     IF_MAPTY = C_MAPTY_PMT
                     IF_SHUNT = LS_PMATY_MAP-SHUNT ).

*** ----------------------------------------------------------------------------
*** Do Check Shipping Element ID
    ME->CHECK_IELSH( IR_MSG   = IR_MSG
                     IF_IELSH = LS_PMATY_MAP-IELSH
                     IF_MAPTY = C_MAPTY_PMT ).

*** Check Double entries
    loop at ME->T_PMATY_MAP into LS_PMATY_MAP_CHECK
      where GDSRC ne LS_PMATY_MAP-GDSRC and
            SHUTY eq LS_PMATY_MAP-SHUTY and
            SHUNT eq LS_PMATY_MAP-SHUNT and
            PMATY eq LS_PMATY_MAP-PMATY.


      loop at ME->T_DSRC_MAP into LS_DSRC_MAP where GDSRC = LS_PMATY_MAP-GDSRC.
        loop at ME->T_DSRC_MAP into LS_DSRC_MAP_CHECK where GDSRC = LS_PMATY_MAP_CHECK-GDSRC.

          if  LS_PMATY_MAP_CHECK-IELSH eq LS_PMATY_MAP-IELSH and
              LS_DSRC_MAP_CHECK-APDAF  eq LS_DSRC_MAP-APDAF and
              LS_DSRC_MAP_CHECK-MAPID  eq LS_DSRC_MAP-MAPID.
            collect LS_PMATY_MAP_CHECK into LT_PMATY_MAP_CHECK.
          endif.
        endloop.
      endloop.
    endloop.

    loop at ME->T_DSRC_MAP into LS_DSRC_MAP where GDSRC = LS_PMATY_MAP-GDSRC.
*** ----------------------------------------------------------------------------
***   Do Function Module Check
      ME->CHECK_FCONV_FNAME( IF_FNAME = LS_DSRC_MAP-FCONV
                             IR_MSG   = IR_MSG ).

***   Do Unit Required Check
      if LS_DSRC_MAP-SETID is initial or
         LS_DSRC_MAP-MAPID is initial.
        ME->CHECK_FREQU( IR_MSG       = IR_MSG
                         IF_APDAF_UOM = LS_DSRC_MAP-APDAF_UOM
                         IF_MAPTY     = C_MAPTY_PMT
                         IF_IELSH     = LS_PMATY_MAP-IELSH
                         IF_FCONV     = LS_DSRC_MAP-FCONV ).
      endif.
    endloop.
  endloop.

  move LINES( LT_PMATY_MAP_CHECK ) to LF_LINES.
  if LF_LINES is not initial.
    move LF_LINES to LF_MSGV1.
    condense LF_MSGV1.
*** Check Packaging Material Type Mapping. There are &1 similar Entries.
    IR_MSG->ADD_MESSAGE( IF_MSGID = 'ZVCXI_XCSUC'
                         IF_MSGTY = 'E'
                         IF_MSGNO = '007'
                         IF_MSGV1 = LF_MSGV1 ).
  endif.

endmethod.
method HANDLE_CHANGED.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.

***   Set the Change Indicator
      move ABAP_TRUE to ME->F_CHANGED.

***   Transport
      if ME->F_CCCORACTIV eq '1'.
        move ABAP_TRUE to ME->F_WRITE_TR.
        move ABAP_TRUE to ME->F_TRANS_REQ.
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_FREE .

  delete ME->T_INSTANCE where R_INSTANCE eq ME.

endmethod.
method HANDLE_SAVE .

  data:  LF_KORRNR    type        TRKORR.
  data:  LR_CX_CKX    type ref to /VCXI/CX_CKX.

*** Save only if changed
  check ME->F_CHANGED eq ABAP_TRUE.

  try.
      if ME->F_TRANS_REQ eq ABAP_TRUE.
***     Popup to pick Transport
        call function 'G_TRANS_NUMBER'
          exporting
            CATEGORY  = 'CUST'
          importing
            KORRNR    = LF_KORRNR
          exceptions
            NO_NUMBER = 1
            others    = 2.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***     Open Transport
        call function 'ZVCXI_XCSUC_DB_OPEN_TRANSPORT'
          in update task
          exporting
            IF_TRKORR = LF_KORRNR.

***     Reset Transport Requested.
        ME->F_TRANS_REQ = ABAP_FALSE.
      endif.

      sort ME->T_DSRC_MAP by DPRIO APDAF SETID MAPID.
      sort ME->T_PMATY_MAP by SHUTY SHUNT PMATY IELSH.
      sort ME->T_SHULI_MAP by SHUNT LIMIT DIMEN.
      sort ME->T_SHUTY_MAP by SHUTY SHUNT IELSH.

***----------------------------------------------------------------------------
***   Save Shipping Information Mapping
      call function 'ZVCXI_XCSUC_DB_SAVE_SHMAP'
        in update task
        exporting
          IT_TC320    = ME->T_SHUTY_MAP
          IT_TC321    = ME->T_SHULI_MAP
          IT_TC322    = ME->T_PMATY_MAP
          IT_TC330    = ME->T_DSRC_MAP
          IF_WRITE_TR = ME->F_WRITE_TR.

***------------------------------------------------------------------------------------------------
***   Write Transport
      call function 'ZVCXI_XCSUC_DB_CLOSE_TRANSPORT'
        in update task.

***------------------------------------------------------------------------------------------------
***   All changes are handled
      move ABAP_FALSE to ME->F_CHANGED.
      commit work and wait.

***------------------------------------------------------------------------------------------------
***   Relock
      check ME->/VCXI/IF_CKX_OBJECT_LOCKING~IS_LOCKED( ) eq ABAP_TRUE.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_LOCK( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      rollback work.
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method LOAD_FROM_DB .

  data:          LT_IELSH_VALFO type table of ZVCXI_XCS_TC311,
                 LT_IELSH       type          ZVCXI_XCSUC_TT_IELSH.
  data:          LS_IELSH_VALFO type          ZVCXI_XCS_TC311,
                 LS_IELSH       type          ZVCXI_XCSUC_S_IELSH.
  field-symbols: <S_IELSH>      type          ZVCXI_XCSUC_S_IELSH.

*** Load Shipping Unit Type Mapping
  select *
         into corresponding fields of table ME->T_SHUTY_MAP
         from ZVCXI_XCS_TC320.

*** Load Shipping Unit Limit Mapping
  select *
         into corresponding fields of table ME->T_SHULI_MAP
         from ZVCXI_XCS_TC321.

*** Load Packaging Material Type Mapping
  select *
         into corresponding fields of table ME->T_PMATY_MAP
         from ZVCXI_XCS_TC322.

*** Load Data Source Mapping
  select *
         into corresponding fields of table ME->T_DSRC_MAP
         from ZVCXI_XCS_TC330.

*** Load Elements
  select *
         into corresponding fields of table LT_IELSH
         from ZVCXI_XCS_TC310
         inner join ZVCXI_XCS_TC310T
               on ZVCXI_XCS_TC310~IELSH = ZVCXI_XCS_TC310T~IELSH
         where ZVCXI_XCS_TC310T~LANGU = SY-LANGU.

  select *
         into corresponding fields of table LT_IELSH_VALFO
         from ZVCXI_XCS_TC311.

  clear: ME->T_IELSH.

  loop at LT_IELSH into LS_IELSH.
    loop at LT_IELSH_VALFO into LS_IELSH_VALFO where IELSH = LS_IELSH-IELSH.
      append initial line to ME->T_IELSH assigning <S_IELSH>.
      move-corresponding LS_IELSH to <S_IELSH>.
      move LS_IELSH_VALFO-VALFO   to <S_IELSH>-VALFO.
    endloop.
  endloop.

*** Sort all Entries
  sort ME->T_DSRC_MAP by DPRIO APDAF SETID MAPID.
  sort ME->T_PMATY_MAP by SHUTY SHUNT PMATY IELSH.
  sort ME->T_SHULI_MAP by SHUNT LIMIT DIMEN.
  sort ME->T_SHUTY_MAP by SHUTY SHUNT IELSH.

endmethod.
method SET_LOCK.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
***------------------------------------------------------------------
      if IF_LOCKED eq ABAP_TRUE.
***     Try to Set Write Lock
***     Write Lock Shipping Unit Type Mapping
        call function 'ENQUEUE_EZVCXI_XCS_C320E'
          exceptions
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            others         = 3.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.
***     Write Lock Shipping Unit Limit Mapping
        call function 'ENQUEUE_EZVCXI_XCS_C321E'
          exceptions
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            others         = 3.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.
***     Write Lock Packaging Material Type Mapping
        call function 'ENQUEUE_EZVCXI_XCS_C322E'
          exceptions
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            others         = 3.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.
***     Write Lock Data Source Mapping
        call function 'ENQUEUE_EZVCXI_XCS_C330E'
          exceptions
            FOREIGN_LOCK   = 1
            SYSTEM_FAILURE = 2
            others         = 3.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***------------------------------------------------------------------
      else.
***     Remove Write Lock
***     Write Lock Shipping Unit Type Mapping
        call function 'DEQUEUE_EZVCXI_XCS_C320E'.
***     Write Lock Shipping Unit Limit Mapping
        call function 'DEQUEUE_EZVCXI_XCS_C321E'.
***     Write Lock Packaging Material Type Mapping
        call function 'DEQUEUE_EZVCXI_XCS_C322E'.
***     Write Lock Data Source Mapping
        call function 'DEQUEUE_EZVCXI_XCS_C330E'.
      endif.

      move IF_LOCKED to ME->F_LOCKED.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->/VCXI/IF_CKX_OBJECT_LOCKING~DO_UNLOCK( ).
      raise exception LR_CX_CKX.
  endtry.

endmethod.
method UPDATE_DSRC_MAP.

  field-symbols: <S_DSRC_MAP> type ZVCXI_XCSUC_S_DSRC_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_DSRC_MAP assigning <S_DSRC_MAP> with key GDSRC = IS_DSRC_MAP-GDSRC
                                                            DPRIO = IS_DSRC_MAP-DPRIO.

  if SY-SUBRC eq 0.
    move-corresponding IS_DSRC_MAP to <S_DSRC_MAP>.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_PMATY_MAP.

  field-symbols: <S_PMATY_MAP> type ZVCXI_XCSUC_S_PMATY_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_PMATY_MAP assigning <S_PMATY_MAP> with key GPMTD = IS_PMATY_MAP-GPMTD.

  if SY-SUBRC eq 0.
    move-corresponding IS_PMATY_MAP to <S_PMATY_MAP>.

***----------------------------------------------------------------------------
*** Set Changed Info to Log
    move SY-UNAME     to <S_PMATY_MAP>-CHABY.
    get time stamp field <S_PMATY_MAP>-CHAAT.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_SHULI_MAP.

  field-symbols: <S_SHULI_MAP> type ZVCXI_XCSUC_S_SHULI_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHULI_MAP assigning <S_SHULI_MAP> with key GSULD = IS_SHULI_MAP-GSULD.

  if SY-SUBRC eq 0.
    move-corresponding IS_SHULI_MAP to <S_SHULI_MAP>.

***----------------------------------------------------------------------------
*** Set Changed Info to Log
    move SY-UNAME     to <S_SHULI_MAP>-CHABY.
    get time stamp field <S_SHULI_MAP>-CHAAT.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
method UPDATE_SHUTY_MAP.

  field-symbols: <S_SHUTY_MAP> type ZVCXI_XCSUC_S_SHUTY_MAP.

*** Make sure that obejct is locked
  ME->/VCXI/IF_CKX_OBJECT_LOCKING~CHECK_IS_LOCKED( ).

  read table ME->T_SHUTY_MAP assigning <S_SHUTY_MAP> with key GSUTD = IS_SHUTY_MAP-GSUTD.

  if SY-SUBRC eq 0.
    move-corresponding IS_SHUTY_MAP to <S_SHUTY_MAP>.

***----------------------------------------------------------------------------
*** Set Changed Info to Log
    move SY-UNAME     to <S_SHUTY_MAP>-CHABY.
    get time stamp field <S_SHUTY_MAP>-CHAAT.
  endif.

***----------------------------------------------------------------------------
*** Raise Change Event
  raise event /VCXI/IF_CKX_OBJECT~CHANGED.

endmethod.
