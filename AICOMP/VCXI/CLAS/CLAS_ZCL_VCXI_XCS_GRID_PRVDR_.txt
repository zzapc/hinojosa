
class ZCL_VCXI_XCS_GRID_PRVDR definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  abstract
  create public .

public section.

  type-pools ABAP .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .

  methods REFRESH_GRID
    redefinition .
protected section.

  constants C_FIELDNAME_RGATE type FIELDNAME value 'R_GATE'. "#EC NOTEXT
  constants C_POSID_5 type /VCXI/VKSR_POSID value 5. "#EC NOTEXT
  data F_BTYPE_ADD type TB_BTYPE .
  data F_IPRVT type /VCXI/VKSC_IPRVT .
  type-pools ABAP .
  data F_MENU_BUTTON_ACTIV type ABAP_BOOL .
  data F_TEXT_ADD type TEXT40 .
  data F_TEXT_DEL type TEXT40 .
  data T_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF .

  methods CHECK_PRVDR_IRRELEVANT
    returning
      value(RF_IRRELEVANT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_GATES
    importing
      !IF_LAST_GATE type ABAP_BOOL default ABAP_FALSE
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods ADD_PRVDR
    importing
      !IF_ID type /VCXI/CKX_ID optional
    preferred parameter IF_ID
    returning
      value(RR_GATE) type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods CHECK_PRVDR_ADD
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRVDR_DEL
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_PRVDR_REL
    importing
      !IF_ID type /VCXI/CKX_ID
    returning
      value(RF_RELEVANT) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods INIT_TOOLBAR_DEF
    raising
      /VCXI/CX_CKX .
  methods GET_DISABLED_ADD
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_DISABLED_DEL
    returning
      value(RF_DISABLED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods DEL_PRVDR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_MENU_BUTTON
    for event MENU_BUTTON of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_UCOMM .
  methods HANDLE_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods HANDLE_UCOMM
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .

  methods GET_LAYOUT
    redefinition .
  methods INIT_GRID
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_XCS_GRID_PRVDR definition
class ZCL_VCXI_XCS_GRID_PRVDR implementation.
method ADD_PRVDR.

  data:          LF_POSID             type        /VCXI/VKSR_POSID,
                 LF_ID                type        /VCXI/CKX_ID.
  data:          LS_PRVDR_DEF         type        /VCXI/VKSR_S_PRVDR_DEF.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE.

***----------------------------------------------------------------------------
*** Find ID
  move IF_ID to LF_ID.

  if LF_ID is initial and
     lines( ME->T_PRVDR_DEF ) gt 1.
*** No Provider Type available to add
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCS'
        IF_MSGNO = '013' ).

  elseif LF_ID is initial and
         lines( ME->T_PRVDR_DEF ) le 1.
    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.
    if SY-SUBRC = 0.
      move LS_PRVDR_DEF-ID to LF_ID.
    else.
***   No Provider Type available to add
      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
          IF_MSGTY = 'E'
          IF_MSGID = 'ZVCXI_XCS'
          IF_MSGNO = '013' ).
    endif.
  endif.

***----------------------------------------------------------------------------
*** Get Cursor in Grid
  LT_GATE = ME->GET_SELECTED_GATES( IF_LAST_GATE = ABAP_TRUE ).
  read table LT_GATE into LR_GATE index 1.
  if LR_GATE is bound.
    LF_POSID = LR_GATE->GET_POSID( ).
  endif.

*** Add 5 to insert after selected position
  add C_POSID_5 to LF_POSID.

***----------------------------------------------------------------------------
*** Create Provider
  RR_GATE = ME->R_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
  if RR_GATE->IS_INUSE( ) eq ABAP_FALSE.
    RR_GATE->SET_INUSE( IF_INUSE = ABAP_TRUE ).
  endif.
  RR_GATE->SET_POSID( IF_POSID = LF_POSID ).

*** Reorg position ID's
  RR_GATE->REORG_POSID( ).

*** Refresh is required
  ME->F_REFRESH_REQ = ABAP_TRUE.

endmethod.
method CHECK_PRVDR_ADD.

  data:          LS_PRVDR_DEF         type        /VCXI/VKSR_S_PRVDR_DEF.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE.
  data:          LF_ACTIV_PRVDR       type        NUMC3.


  move ABAP_TRUE to RF_DISABLED.

  read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = IF_ID.
  check SY-SUBRC = 0.

*** Get Gates of Provider
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
*** Get all Active Provider with searched ID
    check LR_GATE->F_ID eq IF_ID.
    add 1 to LF_ACTIV_PRVDR.

  endloop.

*** Check if there are less then maximal Provider
  check LF_ACTIV_PRVDR < LS_PRVDR_DEF-QTYMA.

  move ABAP_FALSE to RF_DISABLED.

endmethod.
method CHECK_PRVDR_DEL.

  data:          LF_PRVDR             type        I,
                 LF_ACTIV_PRVDR       type        I.
  data:          LS_PRVDR_DEF         type        /VCXI/VKSR_S_PRVDR_DEF.
  data:          LT_GATE              type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to /VCXI/CL_VKSR_GATE.

***--------------------------------------------------------------------------------------
*** Start negative
  move ABAP_TRUE to RF_DISABLED.

***--------------------------------------------------------------------------------------
  read table ME->T_PRVDR_DEF into LS_PRVDR_DEF with key ID = IF_ID.
  check SY-SUBRC = 0.

*** Get Gates of Provider
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                   IF_INUSE = ABAP_TRUE ).

  loop at LT_GATE into LR_GATE.
*** Get all Provider with searched ID
    check LR_GATE->F_ID eq IF_ID.
    add 1 to LF_PRVDR.

*** Check also if Provider is changeable -> can be deleted!!
    if ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.
      add 1 to LF_ACTIV_PRVDR.
    endif.
  endloop.

***--------------------------------------------------------------------------------------
*** Check if there is min. one changeable Provider
  check LF_ACTIV_PRVDR gt 0.

*** Check if there are more than min. number of Provider
  check LF_ACTIV_PRVDR gt LS_PRVDR_DEF-QTYMI.

  move ABAP_FALSE to RF_DISABLED.

endmethod.
method CHECK_PRVDR_IRRELEVANT.

*** General Implementation can't have irrelevant Provider
  RF_IRRELEVANT = ABAP_FALSE.

endmethod.                    "CHECK_PRVDR_IRRELEVANT
method CHECK_PRVDR_REL.

*** Initial all Provider are relevant
  move ABAP_TRUE to RF_RELEVANT.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IF_TABNAME        = IF_TABNAME
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IR_UIGATE         = IR_UIGATE
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).
endmethod.
method DEL_PRVDR.

  data:          LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE      type ref to /VCXI/CL_VKSR_GATE.

*** Free Selected Gates
  LT_GATE = ME->GET_SELECTED_GATES( ).
  loop at LT_GATE into LR_GATE.
    check LR_GATE is bound.

*** Check if Gate is changeable and can be deleted
    if ZCL_VCXI_XCDR_SERVICE=>IS_INUSE_CHANGEABLE( IR_GATE = LR_GATE ) ne ABAP_FALSE.
      LR_GATE->DO_FREE( ).
    endif.
  endloop.

*** Process Events
  ME->R_GATE->RAISE_EVENTS( ).

*** Refresh is required
  ME->F_REFRESH_REQ = ABAP_TRUE.

endmethod.
method GET_DISABLED_ADD.

  data:  LF_LOCKED       type        /VCXI/CKX_LOCKED.
  data:  LS_PRVDR_DEF    type        /VCXI/VKSR_S_PRVDR_DEF.

***----------------------------------------------------------------------------
*** Get Lock and In-Use Status
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).

  if LF_LOCKED ne ABAP_TRUE.
    move ABAP_TRUE to RF_DISABLED.
    exit.
  endif.

*** Do general DVC Check if Function is activ
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'TOOLBAR_DISABLED' ) eq ABAP_TRUE.
    move ABAP_TRUE to RF_DISABLED.
    exit.
  endif.

  loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
    RF_DISABLED = ME->CHECK_PRVDR_ADD( IF_ID = LS_PRVDR_DEF-ID ).
    check RF_DISABLED eq ABAP_FALSE.
    exit.
  endloop.

endmethod.
method GET_DISABLED_DEL.

  data:  LF_LOCKED       type        /VCXI/CKX_LOCKED.
  data:  LS_PRVDR_DEF    type        /VCXI/VKSR_S_PRVDR_DEF.

***----------------------------------------------------------------------------
*** Get Lock and In-Use Status
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).

  if LF_LOCKED ne ABAP_TRUE.
    move ABAP_TRUE to RF_DISABLED.
    exit.
  endif.

*** Do general DVC Check if Function is activ
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'TOOLBAR_DISABLED' ) eq ABAP_TRUE.
    move ABAP_TRUE to RF_DISABLED.
    exit.
  endif.

*** Check if irrelevant Provider available
  if ME->CHECK_PRVDR_IRRELEVANT( ) eq ABAP_TRUE.
    move ABAP_FALSE to RF_DISABLED.
    exit.
  endif.

*** Get delete Button in Grid or not in Grid
  loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
    RF_DISABLED = ME->CHECK_PRVDR_DEL( IF_ID = LS_PRVDR_DEF-ID ).
    check RF_DISABLED eq ABAP_FALSE.
    exit.
  endloop.

endmethod.
method GET_LAYOUT.

  RS_LAYOUT = SUPER->GET_LAYOUT( ).

*** Activate Toolbar
  if ME->T_PRVDR_DEF is not initial.
    move ABAP_FALSE to RS_LAYOUT-NO_TOOLBAR.
  endif.

endmethod.
method GET_SELECTED_GATES.

  data:          LS_ROW       type          LVC_S_ROW.
  data:          LT_ROW       type          LVC_T_ROW.
  data:          LR_GATE      type ref to   /VCXI/CL_VKSR_GATE.
  field-symbols: <T_DATA>     type standard table,
                 <S_DATA>     type          any,
                 <F_FIELD>    type          any.

*** Get Cursor in Grid
  if IF_LAST_GATE eq ABAP_TRUE.
*** Get Cursor of Last Row in Grid
    ME->GET_SELECTED_ROWS( importing ES_LAST_ROW = LS_ROW ).
    if LS_ROW is not initial.
      append LS_ROW to LT_ROW.
    endif.
  else.
*** Get all Selected Rows
    ME->GET_SELECTED_ROWS( importing ET_ROW = LT_ROW ).
  endif.
  check lines( LT_ROW ) is not initial.

*** Dereferencing of Data Reference
  assign ME->R_DATA->* to <T_DATA>.

  loop at LT_ROW into LS_ROW.

    clear: LR_GATE.

    read table <T_DATA> assigning <S_DATA> index LS_ROW-INDEX.
    check SY-SUBRC eq 0.

    assign component 'R_GATE' of structure <S_DATA> to <F_FIELD>.
    check SY-SUBRC eq 0.
    move <F_FIELD> to LR_GATE.

    check LR_GATE is bound.
    append LR_GATE to RT_GATE.

  endloop.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX,
                 LR_GATE              type ref to   /VCXI/CL_VKSR_GATE.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any,
                 <F_FIELD>            type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check SY-TABIX  eq E_ROW-INDEX.

***     Open Subscreen
        assign component C_FIELDNAME_RGATE of structure <S_DATA> to <F_FIELD>.
        check <F_FIELD> is assigned.
        move <F_FIELD> to LR_GATE.

***     Check Gate is bound and Provider has an own UI
        check LR_GATE is bound and
              LR_GATE->GET_CLSUI( ) is not initial.
        ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = LR_GATE ).

***     Expand and select in Tree
        ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LR_GATE->F_GATKY ).
        ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LR_GATE->F_GATKY ).

      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method HANDLE_MENU_BUTTON.

  data:  LF_FCODE      type        UI_FUNC,
         LF_TEXT       type        GUI_TEXT,
         LF_DISABLED   type        CUA_ACTIVE.
  data:  LS_PRVDR_DEF  type        /VCXI/VKSR_S_PRVDR_DEF.
  data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.

  try.
      case E_UCOMM.
        when 'ADD'.
          move ABAP_UNDEFINED to ME->F_REFRESH_REQ.

          loop at ME->T_PRVDR_DEF into LS_PRVDR_DEF.
            clear: LF_FCODE, LF_TEXT.

***         Get Function Code
            concatenate 'ADD' LS_PRVDR_DEF-ID into LF_FCODE separated by '@'.

***         Get Description
            move LS_PRVDR_DEF-DESCR to LF_TEXT.

***         Check if Provider can be added
            LF_DISABLED = ME->CHECK_PRVDR_ADD( IF_ID = LS_PRVDR_DEF-ID ).

***         Add Function
            E_OBJECT->ADD_FUNCTION( FCODE    = LF_FCODE
                                    TEXT     = LF_TEXT
                                    DISABLED = LF_DISABLED ).

          endloop.

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method HANDLE_TOOLBAR.

  data:  LS_TOOLBAR      type        STB_BUTTON.
  data:  LR_CX_CKX       type ref to /VCXI/CX_CKX.

  try.

***----------------------------------------------------------------------------
***   Insert Toolbar elements
      clear LS_TOOLBAR.
      move 'ADD'                    to LS_TOOLBAR-FUNCTION.
      move ME->F_TEXT_ADD           to LS_TOOLBAR-TEXT.
      move F_BTYPE_ADD              to LS_TOOLBAR-BUTN_TYPE.
      move ICON_INSERT_ROW          to LS_TOOLBAR-ICON.
      move ME->GET_DISABLED_ADD( )  to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR             to E_OBJECT->MT_TOOLBAR.

      clear LS_TOOLBAR.
      move 'DEL'                    to LS_TOOLBAR-FUNCTION.
      move ME->F_TEXT_DEL           to LS_TOOLBAR-TEXT.
      move C_BTYPE_BUTTON           to LS_TOOLBAR-BUTN_TYPE.
      move ICON_DELETE_ROW          to LS_TOOLBAR-ICON.
      move ME->GET_DISABLED_DEL( )  to LS_TOOLBAR-DISABLED.
      append LS_TOOLBAR             to E_OBJECT->MT_TOOLBAR.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method HANDLE_UCOMM.

  data:  LF_ID         type        /VCXI/CKX_ID.
  data:  LR_CX_CKX     type ref to /VCXI/CX_CKX.

  try.
***   Trigger specific Add command
      if E_UCOMM cp 'ADD@*'.
        move E_UCOMM+4 to LF_ID.
        ME->ADD_PRVDR( IF_ID = LF_ID ).
      endif.

***   Trigger general Add command
      case E_UCOMM.
        when 'ADD'.
          ME->ADD_PRVDR( ).
        when 'DEL'.
          ME->DEL_PRVDR( ).
      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** If we switch Application Events off -> do manually Refresh Screen
  if ME->F_APPL_EVENTS eq ABAP_FALSE.
    ME->R_UIGATE->REFRESH_SCREEN( ).
  endif.

endmethod.
method INIT_GRID.

  if ME->R_GRID is not bound.
*** Init Toolbar Definitions if needed
    ME->INIT_TOOLBAR_DEF( ).

*** Init standard Def
    SUPER->INIT_GRID( ).
  endif.

endmethod.
method INIT_TOOLBAR_DEF.

  data:  LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF.

  clear: ME->T_PRVDR_DEF.

  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ME->F_IPRVT
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
*** Check if provider is used for GRID
    check ME->CHECK_PRVDR_REL( IF_ID = LS_PRVDR_DEF-ID ) eq ABAP_TRUE.

    append LS_PRVDR_DEF to ME->T_PRVDR_DEF.

  endloop.

  if lines( ME->T_PRVDR_DEF ) eq 1.
*** Set Type of Add Button
    move C_BTYPE_BUTTON to ME->F_BTYPE_ADD.
    move ABAP_FALSE     to ME->F_MENU_BUTTON_ACTIV.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Set Button Text
    concatenate 'Add'(001)    LS_PRVDR_DEF-DESCR into ME->F_TEXT_ADD separated by SPACE.
    concatenate 'Delete'(002) LS_PRVDR_DEF-DESCR into ME->F_TEXT_DEL separated by SPACE.

  else.
*** Set Type of Add Button
    move C_BTYPE_MENU to ME->F_BTYPE_ADD.
    move ABAP_TRUE    to ME->F_MENU_BUTTON_ACTIV.

*** Set Button Text
    move 'Add'(001)    to ME->F_TEXT_ADD.
    move 'Delete'(002) to ME->F_TEXT_DEL.

  endif.

endmethod.
method REFRESH_GRID.

*** Check if Abap_True -> Abap_undefined if a Usercommand is handled (e.g. add)
  if ME->F_REFRESH_REQ eq ABAP_TRUE.
    SUPER->REFRESH_GRID( ).
  endif.

  move ABAP_FALSE to ME->F_REFRESH_REQ.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Set Eventhandler for Toolbar
  set handler ME->HANDLE_TOOLBAR             for ME->R_GRID.
  set handler ME->HANDLE_UCOMM               for ME->R_GRID.
  if ME->F_MENU_BUTTON_ACTIV eq ABAP_TRUE.
    set handler ME->HANDLE_MENU_BUTTON       for ME->R_GRID.
  endif.
*** Set Double Click
  set handler ME->HANDLE_DOUBLE_CLICK        for ME->R_GRID.

endmethod.
