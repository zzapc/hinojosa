
class ZCL_VCXI_PXSR_POPUP_RHNDL definition
  public
  create protected .

public section.

  data F_ACTIVE_TAB type STRING read-only .
  data F_CURR_INDEX type SYINDEX read-only .
  data S_RHNDL_VIS type ZVCXI_PXSR_S_RHNDL_VIS .
  data S_TAB_DESCR type ZVCXI_XCS_S_TAB_DESCR .

  methods DO_MODIFY_SCREEN
    importing
      !IF_REPID type SYREPID
      !IF_DYNNR type SYDYNNR
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_RHNDL_VIS
    importing
      !IS_RHNDL_VIS type ZVCXI_PXSR_S_RHNDL_VIS
    raising
      /VCXI/CX_CKX .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  class-methods START
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IF_LOCKED type /VCXI/CKX_LOCKED
      !IF_SYSOM type /VCXI/VKS_SYSOM
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_TAB type STRING value 'TAB' ##NO_TEXT.
  constants C_UC_CANCEL type SYUCOMM value 'CANCEL' ##NO_TEXT.
  constants C_UC_OKAY type SYUCOMM value 'OKAY' ##NO_TEXT.
  constants C_UC_UNDO type SYUCOMM value 'UNDO' ##NO_TEXT.
  data F_CURSOR type SCRFNAME .
  data F_DATE type DATS .
  data F_LOCKED type /VCXI/CKX_LOCKED .
  data F_TABPT type ZVCXI_XCS_TABPT .
  data R_CUST_CORE type ref to ZCL_VCXI_PXSS_CUST_CORE .
  data R_PICTURE_RHNDL type ref to ZCL_VCXI_PXS_PICTURE_RHNDL .
  data R_RTE_ARBPL_NEW type ref to /VCXI/CL_VSMR_RTE_ARBPL .
  data R_RTE_ARBPL_ORG type ref to /VCXI/CL_VSMR_RTE_ARBPL .
  data S_DYNP_BLANK type /VCXI/CKX_S_DYNP_KEY .
  data T_TAB_LIST type ZVCXI_XCS_TT_TAB_LIST .
  data F_SYSOM type /VCXI/VKS_SYSOM .

  methods GET_UOM_OF_PARAM
    importing
      !IF_PARID type /VCXI/VKS_PARID
    returning
      value(RF_UOM) type /VCXI/CKX_UOM
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
      !IF_LOCKED type /VCXI/CKX_LOCKED
      !IF_TABPT type ZVCXI_XCS_TABPT default '0100S_RH_TAB-TAB'
      !IF_SYSOM type /VCXI/VKS_SYSOM
    raising
      /VCXI/CX_CKX .
  methods COPY_RTE_ARBPL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RR_RTE_ARBPL) type ref to /VCXI/CL_VSMR_RTE_ARBPL
    raising
      /VCXI/CX_CKX .
  methods DISPLAY_PICTURE
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods GET_MATNR_DESCR
    importing
      !IF_MATNR type MATNR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_RHNDL_BY_RTE_ARBPL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RR_RHNDL) type ref to ZIF_VCXI_PXSR_RHNDL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_CANCEL
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_OKAY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_UNDO
    raising
      /VCXI/CX_CKX .
  methods INIT_DATE
    raising
      /VCXI/CX_CKX .
  methods INIT_TAB_LIST
    importing
      !IF_LINES type I
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_PF_STATUS
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSR_POPUP_RHNDL definition
class ZCL_VCXI_PXSR_POPUP_RHNDL implementation.
  method CONSTRUCTOR.

***--------------------------------------------------------------------------------------
*** Set Import Values
    move IF_LOCKED   to ME->F_LOCKED.

*** Set Original Routing Work Center and create a copy for changes
    ME->R_RTE_ARBPL_ORG = IR_RTE_ARBPL.
    ME->R_RTE_ARBPL_NEW = ME->COPY_RTE_ARBPL( IR_RTE_ARBPL = IR_RTE_ARBPL ).

*** Initialize Date
    ME->INIT_DATE( ).

    move IF_TABPT to ME->F_TABPT.
    move IF_SYSOM to ME->F_SYSOM.

  endmethod.
  method COPY_RTE_ARBPL.

    data: LR_RTE_PSTEP_ORG type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_RTE_PSTEP_NEW type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP      type ref to ZCL_VCXI_XCSR_BL_PSTEP.


*** Create new Work Center
    RR_RTE_ARBPL = new #( IR_ARBPL = IR_RTE_ARBPL->R_ARBPL
                          IF_LCVAL = IR_RTE_ARBPL->F_LCVAL ).

    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP_ORG.
***   Create new Routing Production Step
      if LR_RTE_PSTEP_ORG->R_RTE_PSEQ is bound.
        LR_RTE_PSTEP_NEW = new /VCXI/CL_VSMR_RTE_PSEQ( IR_PSEQ     = LR_RTE_PSTEP_ORG->R_RTE_PSEQ->R_PSEQ
                                                       IR_RTE_PSEQ = LR_RTE_PSTEP_ORG->R_RTE_PSEQ->R_RTE_PSEQ )->R_RTE_PSTEP .
      else.
        LR_RTE_PSTEP_NEW = new #( IR_PSTEP = LR_RTE_PSTEP_ORG->R_PSTEP ).
      endif.
      append LR_RTE_PSTEP_NEW to RR_RTE_ARBPL->T_RTE_PSTEP.

***   Copy Link Context Value
      move LR_RTE_PSTEP_ORG->F_LCVAL to LR_RTE_PSTEP_NEW->F_LCVAL.

***   Copy BL PStep
      if LR_RTE_PSTEP_ORG->R_BLOBJ is bound.
        move LR_RTE_PSTEP_ORG->R_BLOBJ ?to LR_BL_PSTEP.
        move LR_BL_PSTEP->COPY( )       to LR_BL_PSTEP.
        move LR_BL_PSTEP                to LR_RTE_PSTEP_NEW->R_BLOBJ.
      endif.
    endloop.

  endmethod.
  method DISPLAY_PICTURE.

*** Create Roll Winding Picture
    if ME->R_PICTURE_RHNDL is not bound.
      create object ME->R_PICTURE_RHNDL
        exporting
          IF_CONTAINER_NAME = '0100CC_PICTURE'.
    endif.

*** Refresh Winding Picture
    ME->R_PICTURE_RHNDL->REFRESH_PICTURE( IF_EYEMP = ME->S_RHNDL_VIS-EYEMP
                                          IF_WIDIR = ME->S_RHNDL_VIS-WIDIR
                                          IF_WISID = ME->S_RHNDL_VIS-WISID ).

  endmethod.
  method DO_FREE.

*** Free Roll Winding Picture
    if ME->R_PICTURE_RHNDL is bound.
      ME->R_PICTURE_RHNDL->DO_FREE( ).
      clear ME->R_PICTURE_RHNDL.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    loop at screen.
***--------------------------------------------------------------------------------------
***   Set the Tabs which aren't in use as invisible.
      if SCREEN-NAME cs ME->F_TABPT.
        read table ME->T_TAB_LIST with key TABNAME = SCREEN-NAME transporting no fields.
        if SY-SUBRC ne 0.
          move 1 to SCREEN-INVISIBLE.
        endif.
      endif.

***--------------------------------------------------------------------------------------
***   Toggle between Roll Diameter and Length
      if SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-RDITA' and
         ME->S_RHNDL_VIS-FOVRR_RDITA ne ABAP_TRUE.
        move 0 to SCREEN-INPUT.
      endif.
      if SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-RLETA' and
         ME->S_RHNDL_VIS-FOVRR_RLETA ne ABAP_TRUE.
        move 0 to SCREEN-INPUT.
      endif.
      if SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-RWGTA' and
         ME->S_RHNDL_VIS-FOVRR_RWGTA ne ABAP_TRUE.
        move 0 to SCREEN-INPUT.
      endif.

***--------------------------------------------------------------------------------------
***   Lock screen based on Roll Handling Source - Core
      if ME->S_RHNDL_VIS-S_RHSRC-RHSCO eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_SPEC and
         ( SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-MATNR' or
           SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-RLPCR' or
           SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-CRMAR' ).
        move 0 to SCREEN-INPUT.
      endif.

***   Lock screen based on Roll Handling Source - Dimension
      if ME->S_RHNDL_VIS-S_RHSRC-RHSDI eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_SPEC and
         ( SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-FOVRR_RDITA' or
           SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-RDITA' or
           SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-FOVRR_RLETA' or
           SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-RLETA' or
           SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-FOVRR_RWGTA' or
           SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-RWGTA' ).
        move 0 to SCREEN-INPUT.
      endif.

***   Lock screen based on Roll Handling Source - Winding
      if ME->S_RHNDL_VIS-S_RHSRC-RHSWI eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_SPEC and
         ( SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-WISID' or
           SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-WIDIR' or
           SCREEN-NAME eq 'ZVCXI_PXSR_S_RHNDL_VIS-EYEMP' ).
        move 0 to SCREEN-INPUT.
      endif.

***   Make tabs input ready and rest not in case of not-locked
      if SCREEN-NAME cs ME->F_TABPT.
        move 1 to SCREEN-INPUT.
      elseif ME->F_LOCKED ne ABAP_TRUE.
        move 0 to SCREEN-INPUT.
      endif.

      modify screen.
    endloop.

  endmethod.
  method DO_PBO.

***--------------------------------------------------------------------------------------
*** Set PF-Status
    ME->SET_PF_STATUS( ).

*** Initialize Visualization Structure
    ME->INIT_VIS( ).

*** Display Picture of Winding Direction
    ME->DISPLAY_PICTURE( ).

*** Set Cursor
    set cursor field ME->F_CURSOR.
    clear ME->F_CURSOR.

  endmethod.
  method DO_UPDATE_RHNDL_VIS.

    data: LF_CALC_RLPCR type        ABAP_BOOL,
          LF_CALC_CLETA type        ABAP_BOOL,
          LF_MATNR      type        MATNR.
    data: LS_RHNDL type ZVCXI_PXSR_S_RHNDL.
    data: LT_RHNDL type ZVCXI_PXSR_TT_RHNDL.
    data: LR_RHNDL type ref to ZIF_VCXI_PXSR_RHNDL.
    field-symbols: <S_RHNDL> type ZVCXI_PXSR_S_RHNDL.


*** Proceed only if there was a change in place
    check ME->S_RHNDL_VIS ne IS_RHNDL_VIS.

***--------------------------------------------------------------------------------------
*** Get Roll Handling of last Production Step
    LR_RHNDL = ME->GET_RHNDL_BY_RTE_ARBPL( IR_RTE_ARBPL = ME->R_RTE_ARBPL_NEW ).
    check LR_RHNDL is bound.

*** Get Roll Handling according to active Tab
    LT_RHNDL = LR_RHNDL->T_RHNDL[].
    read table LT_RHNDL assigning <S_RHNDL> index ME->F_CURR_INDEX.
    check <S_RHNDL> is assigned.

***--------------------------------------------------------------------------------------
*** Core Margin
    if ME->S_RHNDL_VIS-S_CRMAR ne IS_RHNDL_VIS-S_CRMAR.
      <S_RHNDL>-S_MS_CORE-S_CRMAR = IS_RHNDL_VIS-S_CRMAR.
      <S_RHNDL>-S_RHSRC-RHSCO     = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
      LF_CALC_RLPCR = ABAP_TRUE.             "Request new Rolls/Core Calculation
      LF_CALC_CLETA = ABAP_TRUE.             "Request new Target Roll Length
    endif.

***--------------------------------------------------------------------------------------
*** Material Number
    LF_MATNR = IS_RHNDL_VIS-MATNR.

**** Set Default Value
*    if LF_MATNR is initial.
****   Get Default Core Material
*      LF_MATNR = ZCL_VCXI_FFSS_CUST_RHNDL=>GET_SFG_CORE( exporting IF_ARBPL = IS_RHNDL_VIS-ARBPL
*                                                                   IF_WERKS = IS_RHNDL_VIS-WERKS
*                                                                   IS_WIWID = IS_RHNDL_VIS-S_WIWID
*                                                                   IS_COMAR = <S_RHNDL>-S_MS_CORE-S_COMAR
*                                                                   IF_ROPCO = <S_RHNDL>-S_MS_CORE-ROPCO ).
*
*    endif.

    if ME->S_RHNDL_VIS-MATNR ne LF_MATNR.
      <S_RHNDL>-S_MS_CORE-MATNR = LF_MATNR.
      <S_RHNDL>-S_RHSRC-RHSCO   = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
      LF_CALC_RLPCR = ABAP_TRUE.             "Request new Rolls/Core Calculation
      LF_CALC_CLETA = ABAP_TRUE.             "Request new Target Roll Length
    endif.

***--------------------------------------------------------------------------------------
*** Rolls/Core
    if ME->S_RHNDL_VIS-RLPCR ne IS_RHNDL_VIS-RLPCR or
       LF_CALC_RLPCR eq ABAP_TRUE.                     " Material or Core Margin was changed, Recalculate Rolls/Core

      <S_RHNDL>-S_MS_CORE-RLPCR = IS_RHNDL_VIS-RLPCR.

***   Set Default Value
      if IS_RHNDL_VIS-RLPCR is initial or
         LF_CALC_CLETA      eq ABAP_TRUE.

***     Calculate Default Roll/Core
*        <S_RHNDL>-S_MS_CORE-RLPCR = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLPCR( IS_WIWID = <S_RHNDL>-S_WIWID
*                                                                        IS_CRMAR = <S_RHNDL>-S_MS_CORE-S_CRMAR
*                                                                        IS_CRLEN = LS_CRLEN ).
*        ZCL_VCXI_FFSS_CUST_RHNDL=>CALC_DEFAULT_RLPCR( exporting IF_MATNR  = <S_RHNDL>-S_MS_CORE-MATNR
*                                                                IS_WIWID  = IS_RHNDL_VIS-S_WIWID
*                                                                IS_COMAR  = IS_RHNDL_VIS-S_COMAR
*                                                                IF_FSHCO  = IS_RHNDL_VIS-FSHCO
*                                                                IF_WERKS  = IS_RHNDL_VIS-WERKS
*                                                      importing EF_ROPCO  = LF_ROPCO_DEF ).

*        move LF_RLPCR_DEF to <S_RHNDL>-S_MS_CORE-RLPCR.
      endif.

      move ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER to <S_RHNDL>-S_RHSRC-RHSCO.
      move ABAP_TRUE to LF_CALC_CLETA.             "Request new Target Roll Length
    endif.

****--------------------------------------------------------------------------------------
**** Calculate Target Core Length
*    if LF_CALC_CLETA eq ABAP_TRUE.
****   Calculate Target Core Length
*      LS_CLETA = ZCL_VCXI_FFSS_CUST_CORE=>CALC_CLETA( IS_WIWID = IS_RHNDL_VIS-S_WIWID
*                                                      IS_COMAR = <S_RHNDL>-S_MS_CORE-S_COMAR
*                                                      IF_ROPCO = <S_RHNDL>-S_MS_CORE-ROPCO ).
*
*    else.
*      move IS_RHNDL_VIS-S_CLETA to LS_CLETA.
*    endif.
*
**** Target Core Length
*    if ME->S_RHNDL_VIS-S_CLETA ne LS_CLETA.
*      move LS_CLETA to <S_RHNDL>-S_MS_CORE-S_CLETA.
*      move ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER to <S_RHNDL>-S_RHSRC-RHSCO.
*    endif.

***--------------------------------------------------------------------------------------
    case ABAP_TRUE.
***   Target Roll Diameter
      when IS_RHNDL_VIS-FOVRR_RDITA.
        if ME->S_RHNDL_VIS-FOVRR_RDITA ne IS_RHNDL_VIS-FOVRR_RDITA or
           ME->S_RHNDL_VIS-S_RDITA     ne IS_RHNDL_VIS-S_RDITA.
          <S_RHNDL>-S_RDITA = IS_RHNDL_VIS-S_RDITA.
          <S_RHNDL>-RDMTA   = 'D'.

***       Set Source to "Defined by User"
          <S_RHNDL>-S_RHSRC-RHSDI = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
        endif.

***   Target Roll Length
      when IS_RHNDL_VIS-FOVRR_RLETA.
        if ME->S_RHNDL_VIS-FOVRR_RLETA ne IS_RHNDL_VIS-FOVRR_RLETA or
           ME->S_RHNDL_VIS-S_RLETA     ne IS_RHNDL_VIS-S_RLETA.
          <S_RHNDL>-S_RLETA = IS_RHNDL_VIS-S_RLETA.
          <S_RHNDL>-RDMTA   = 'L'.

***       Set Source to "Defined by User"
          move ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER to <S_RHNDL>-S_RHSRC-RHSDI.
        endif.

***   Target Roll Weight
      when IS_RHNDL_VIS-FOVRR_RWGTA.
        if ME->S_RHNDL_VIS-FOVRR_RWGTA ne IS_RHNDL_VIS-FOVRR_RWGTA or
           ME->S_RHNDL_VIS-S_RWGTA     ne IS_RHNDL_VIS-S_RWGTA.
          <S_RHNDL>-S_RWGTA = IS_RHNDL_VIS-S_RWGTA.
          <S_RHNDL>-RDMTA   = 'W'.

***       Set Source to "Defined by User"
          <S_RHNDL>-S_RHSRC-RHSDI = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
        endif.
    endcase.

***--------------------------------------------------------------------------------------
*** Roll Winding Side, Winding Direction and Eyemark Position
    if ME->S_RHNDL_VIS-WISID ne IS_RHNDL_VIS-WISID or
       ME->S_RHNDL_VIS-WIDIR ne IS_RHNDL_VIS-WIDIR or
       ME->S_RHNDL_VIS-EYEMP ne IS_RHNDL_VIS-EYEMP.
      <S_RHNDL>-WISID = IS_RHNDL_VIS-WISID.
      <S_RHNDL>-WIDIR = IS_RHNDL_VIS-WIDIR.
      <S_RHNDL>-EYEMP = IS_RHNDL_VIS-EYEMP.

***   Set Source to "Defined by User"
      <S_RHNDL>-S_RHSRC-RHSWI = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
    endif.

***--------------------------------------------------------------------------------------
*** Set Roll Handling
    LR_RHNDL->SET_RHNDL( IT_RHNDL     = LT_RHNDL
                         IR_RTE_ARBPL = ME->R_RTE_ARBPL_NEW ).

  endmethod.
  method DO_USER_COMMAND.

    if IF_UCOMM cs ME->F_TABPT.
      move IF_UCOMM to ME->F_ACTIVE_TAB.
      move ME->F_ACTIVE_TAB+16(3) to ME->F_CURR_INDEX.
    endif.

    case IF_UCOMM.
      when C_UC_OKAY.
        ME->HANDLE_UC_OKAY( ).
      when C_UC_UNDO.
        ME->HANDLE_UC_UNDO( ).
      when C_UC_CANCEL.
        ME->HANDLE_UC_CANCEL( ).
    endcase.

*** Set Cursor
    get cursor field ME->F_CURSOR.

  endmethod.
  method GET_MATNR_DESCR.

    data:  LS_MAKT  type MAKT.

    call function 'MAKT_SINGLE_READ'
      exporting
        MATNR      = IF_MATNR
        SPRAS      = SY-LANGU
      importing
        WMAKT      = LS_MAKT
      exceptions
        WRONG_CALL = 1
        NOT_FOUND  = 2
        others     = 3.

    if SY-SUBRC ne 0.
      clear RF_DESCR.
    else.
      move LS_MAKT-MAKTX to RF_DESCR.
    endif.

  endmethod.
  method GET_RHNDL_BY_RTE_ARBPL.

    data:  LR_RTE_PSTEP    type ref to /VCXI/CL_VSMR_RTE_PSTEP.


    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP
                                     where TABLE_LINE->R_BLOBJ is instance of ZIF_VCXI_PXSR_RHNDL.
      move LR_RTE_PSTEP->R_BLOBJ ?to RR_RHNDL.
    endloop.

  endmethod.
  method GET_UOM_OF_PARAM.

    data: LF_GUID   type        /VCXI/CKX_GUID.
    data: LR_PARAM  type ref to /VCXI/CL_VKSC_PARAM.

*** Get Instance of Parameter
    move IF_PARID to LF_GUID.
    LR_PARAM ?= /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
    check LR_PARAM is bound.

*** Use Metric Unit of Measure
    case ME->F_SYSOM.
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
        move LR_PARAM->F_UOMKY_M to RF_UOM.
      when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
        move LR_PARAM->F_UOMKY_I to RF_UOM.
    endcase.

  endmethod.
  method HANDLE_UC_CANCEL.

*** Leave Popup
    leave to screen 0.

  endmethod.
  method HANDLE_UC_OKAY.

    data: LR_RHNDL_NEW type ref to ZIF_VCXI_PXSR_RHNDL,
          LR_RHNDL_ORG type ref to ZIF_VCXI_PXSR_RHNDL.

***--------------------------------------------------------------------------------------
*** Get Roll Handling of last Production Step
    LR_RHNDL_NEW = ME->GET_RHNDL_BY_RTE_ARBPL( IR_RTE_ARBPL = ME->R_RTE_ARBPL_NEW ).
    LR_RHNDL_ORG = ME->GET_RHNDL_BY_RTE_ARBPL( IR_RTE_ARBPL = ME->R_RTE_ARBPL_ORG ).

    check LR_RHNDL_NEW is bound and
          LR_RHNDL_ORG is bound.

***--------------------------------------------------------------------------------------
*** Roll Handling Checks
*    check ZCL_VCXI_FFSS_CUST_RHNDL=>CHECK_RHNDL( exporting IT_RHNDL = LR_RHNDL_NEW->T_RHNDL
*                                                           IF_WERKS = ME->S_RHNDL_VIS-WERKS
*                                                           IF_DATE  = ME->F_DATE ) eq 0.
    break TBD.

***--------------------------------------------------------------------------------------
*** Update the Orginal Production Step
    LR_RHNDL_ORG->SET_RHNDL( IT_RHNDL     = LR_RHNDL_NEW->T_RHNDL
                             IR_RTE_ARBPL = ME->R_RTE_ARBPL_NEW ).

***--------------------------------------------------------------------------------------
*** Leave Popup
    leave to screen 0.

  endmethod.
  method HANDLE_UC_UNDO.

    data: LT_RHNDL     type ZVCXI_PXSR_TT_RHNDL.
    data: LR_RHNDL_ORG type ref to ZIF_VCXI_PXSR_RHNDL.
    field-symbols: <S_RHNDL> type ZVCXI_PXSR_S_RHNDL.

***--------------------------------------------------------------------------------------
*** Get Roll Handling of last Production Step
    LR_RHNDL_ORG = ME->GET_RHNDL_BY_RTE_ARBPL( IR_RTE_ARBPL = ME->R_RTE_ARBPL_ORG ).

*** Get Original Roll Handling Information
    LT_RHNDL = LR_RHNDL_ORG->T_RHNDL.

*** Reset Roll Handling Source to "Default" if it was user
    loop at LT_RHNDL assigning <S_RHNDL>.
      if <S_RHNDL>-S_RHSRC-RHSCO eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
        move ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT to <S_RHNDL>-S_RHSRC-RHSCO.
      endif.
      if <S_RHNDL>-S_RHSRC-RHSDI eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
        move ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT to <S_RHNDL>-S_RHSRC-RHSDI.
      endif.
      if <S_RHNDL>-S_RHSRC-RHSWI eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
        move ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT to <S_RHNDL>-S_RHSRC-RHSWI.
      endif.
    endloop.

*** Update the Orginal Production Step
    LR_RHNDL_ORG->SET_RHNDL( IT_RHNDL     = LT_RHNDL
                             IR_RTE_ARBPL = ME->R_RTE_ARBPL_NEW ).

***--------------------------------------------------------------------------------------
*** Leave Popup
    leave to screen 0.

  endmethod.
  method INIT_DATE.

    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_BL_PSTEP  type ref to ZCL_VCXI_XCSR_BL_PSTEP.

    read table ME->R_RTE_ARBPL_ORG->T_RTE_PSTEP into LR_RTE_PSTEP
                                                index 1.
    check SY-SUBRC eq 0.

    move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_PSTEP.
    check LR_BL_PSTEP is bound.

    move LR_BL_PSTEP->F_DATE to ME->F_DATE.

  endmethod.
  method INIT_TAB_LIST.

    data: LF_TAB   type         NUMC3,
          LF_FNAME type         STRING.

    field-symbols: <S_TAB_LIST> type         ZVCXI_F0S_S_TAB_LIST,
                   <F_DESCR>    type         /VCXI/CKX_DESCR.

    free: ME->T_TAB_LIST,
          ME->S_TAB_DESCR,
          LF_TAB.

    do IF_LINES times.
      insert initial line into table ME->T_TAB_LIST assigning <S_TAB_LIST>.
      add 1 to LF_TAB.
      concatenate ME->F_TABPT LF_TAB into <S_TAB_LIST>-TABNAME.

***   No active Tab is defined, use first Tab as active
      if ME->F_ACTIVE_TAB is initial.
        move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
        move ME->F_ACTIVE_TAB+16(3) to ME->F_CURR_INDEX.
      endif.

      concatenate 'TAB' LF_TAB into LF_FNAME.
      assign component LF_FNAME of structure ME->S_TAB_DESCR to <F_DESCR>.
      if SY-SUBRC is initial.
        concatenate text-ROL LF_TAB into <F_DESCR> separated by SPACE.
      endif.

    enddo.

  endmethod.
  method INIT_VIS.

    data: LS_RHNDL type ZVCXI_PXSR_S_RHNDL,
          LS_WIDIM type ZVCXI_PXS_S_WIDIM.
    data: LT_WIDIM      type ZVCXI_PXS_TT_WIDIM.
    data: LR_RHNDL     type ref to ZIF_VCXI_PXSR_RHNDL,
          LR_CUST_CORE type ref to ZCL_VCXI_PXSS_CUST_CORE.

    clear ME->S_RHNDL_VIS.

***--------------------------------------------------------------------------------------
*** Initialize Data of Work Center
    move ME->R_RTE_ARBPL_NEW->R_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_ID( )     to ME->S_RHNDL_VIS-WERKS.
    move ME->R_RTE_ARBPL_NEW->R_ARBPL->F_ARBPL                                    to ME->S_RHNDL_VIS-ARBPL.
    move ME->R_RTE_ARBPL_NEW->R_ARBPL->/VCXI/IF_CKX_OBJECT~GET_DESCR( )           to ME->S_RHNDL_VIS-DESCR.

***--------------------------------------------------------------------------------------
*** Get Roll Handling of last Production Step
    LR_RHNDL = ME->GET_RHNDL_BY_RTE_ARBPL( IR_RTE_ARBPL = ME->R_RTE_ARBPL_NEW ).
    check LR_RHNDL is bound.

***--------------------------------------------------------------------------------------
*** Initialize Tab List based on Roll Handling table
    ME->INIT_TAB_LIST( exporting IF_LINES = LINES( LR_RHNDL->T_RHNDL ) ).

*** Fill specific Roll Handling structure based on the tab selected
    read table LR_RHNDL->T_RHNDL into LS_RHNDL index ME->F_CURR_INDEX.
    check SY-SUBRC is initial.

*** Roll Handling Source
    move LS_RHNDL-S_RHSRC to ME->S_RHNDL_VIS-S_RHSRC.

***--------------------------------------------------------------------------------------
*** Core Material Info
    if LS_RHNDL-MATNR is not initial.
      LR_CUST_CORE = ZCL_VCXI_PXSS_CUST_CORE=>GET_INSTANCE_CORE( IF_MATNR = LS_RHNDL-S_MS_CORE-MATNR
                                                                 IF_WERKS = ME->S_RHNDL_VIS-WERKS
                                                                 IF_DATE  = ME->F_DATE ).
    endif.

    if LR_CUST_CORE is bound.
      move LR_CUST_CORE->F_MATNR                                   to ME->S_RHNDL_VIS-MATNR.
      move ME->GET_MATNR_DESCR( IF_MATNR = ME->S_RHNDL_VIS-MATNR ) to ME->S_RHNDL_VIS-MATNR_DESCR.

      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LR_CUST_CORE->S_CRDII-CRDII
                                                         IF_UOM_IN    = LR_CUST_CORE->S_CRDII-CRDII_UOM
                                                         IF_UOM_OUT   = ME->GET_UOM_OF_PARAM( IF_PARID = 'ZVCXI_PX_CRDII' )
                                               importing EF_VALUE_OUT = ME->S_RHNDL_VIS-S_CRDII-CRDII
                                                         EF_UOM_OUT   = ME->S_RHNDL_VIS-S_CRDII-CRDII_UOM ).

      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LR_CUST_CORE->S_CRWTH-CRWTH
                                                         IF_UOM_IN    = LR_CUST_CORE->S_CRWTH-CRWTH_UOM
                                                         IF_UOM_OUT   = ME->GET_UOM_OF_PARAM( IF_PARID = 'ZVCXI_PX_CRWTH' )
                                               importing EF_VALUE_OUT = ME->S_RHNDL_VIS-S_CRWTH-CRWTH
                                                         EF_UOM_OUT   = ME->S_RHNDL_VIS-S_CRWTH-CRWTH_UOM ).

      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LR_CUST_CORE->S_CRLEN-CRLEN
                                                         IF_UOM_IN    = LR_CUST_CORE->S_CRLEN-CRLEN_UOM
                                                         IF_UOM_OUT   = ME->GET_UOM_OF_PARAM( IF_PARID = 'ZVCXI_PX_CRLEN' )
                                               importing EF_VALUE_OUT = ME->S_RHNDL_VIS-S_CRLEN-CRLEN
                                                         EF_UOM_OUT   = ME->S_RHNDL_VIS-S_CRLEN-CRLEN_UOM ).

      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LR_CUST_CORE->S_CRWGT-CRWGT
                                                         IF_UOM_IN    = LR_CUST_CORE->S_CRWGT-CRWGT_UOM
                                                         IF_UOM_OUT   = ME->GET_UOM_OF_PARAM( IF_PARID = 'ZVCXI_PX_CRWGT' )
                                               importing EF_VALUE_OUT = ME->S_RHNDL_VIS-S_CRWGT-CRWGT
                                                         EF_UOM_OUT   = ME->S_RHNDL_VIS-S_CRWGT-CRWGT_UOM ).

    endif.

    move LS_RHNDL-RLPCR        to ME->S_RHNDL_VIS-RLPCR.
    move LS_RHNDL-S_CRMAR      to ME->S_RHNDL_VIS-S_CRMAR.

***--------------------------------------------------------------------------------------
*** Roll Dimensions
    move LS_RHNDL-S_RDITA to ME->S_RHNDL_VIS-S_RDITA.
    move LS_RHNDL-S_RLETA to ME->S_RHNDL_VIS-S_RLETA.
    move LS_RHNDL-S_RWGTA to ME->S_RHNDL_VIS-S_RWGTA.

    case LS_RHNDL-RDMTA.
      when 'D'.  "Diameter
        move ABAP_TRUE to ME->S_RHNDL_VIS-FOVRR_RDITA.
      when 'L'.  "Length
        move ABAP_TRUE to ME->S_RHNDL_VIS-FOVRR_RLETA.
      when 'W'.  "Weight
        move ABAP_TRUE to ME->S_RHNDL_VIS-FOVRR_RWGTA.
    endcase.

***--------------------------------------------------------------------------------------
*** Winding Information
    move LS_RHNDL-WISID to ME->S_RHNDL_VIS-WISID.
    move LS_RHNDL-WIDIR to ME->S_RHNDL_VIS-WIDIR.
    move LS_RHNDL-EYEMP to ME->S_RHNDL_VIS-EYEMP.

*** Winding Dimensions
    move LR_RHNDL->GET_WIDIM( ) to LT_WIDIM.
    read table LT_WIDIM into LS_WIDIM index ME->F_CURR_INDEX.
    if SY-SUBRC is initial.
      move LS_WIDIM-S_WIWID to ME->S_RHNDL_VIS-S_WIWID.
      move LS_WIDIM-S_WITHI to ME->S_RHNDL_VIS-S_WITHI.
      move LS_WIDIM-S_WISWG to ME->S_RHNDL_VIS-S_WISWG.
    endif.

*** Target Core Length
    if LR_CUST_CORE is bound.
      ME->S_RHNDL_VIS-S_CLETA = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_CLETA( IS_WIWID = ME->S_RHNDL_VIS-S_WIWID
                                                                    IS_CRMAR = ME->S_RHNDL_VIS-S_CRMAR
                                                                    IF_RLPCR = ME->S_RHNDL_VIS-RLPCR ).
    endif.

  endmethod.
  method SET_PF_STATUS.

    data:  LT_EXCLUDE   type table of SYUCOMM.

    if ME->F_LOCKED ne ABAP_TRUE.
      append C_UC_OKAY   to LT_EXCLUDE.
      append C_UC_UNDO   to LT_EXCLUDE.
    endif.

    set pf-status '0100' of program 'SAPLZVCXI_FFSR_POPUP_RHNDL'
        excluding LT_EXCLUDE.

  endmethod.
  method START.

    check IR_RTE_ARBPL          is bound and
          IR_RTE_ARBPL->R_ARBPL is bound.

*** Create Instance
    data(LR_POPUP_RHNDL) = new ZCL_VCXI_PXSR_POPUP_RHNDL( IR_RTE_ARBPL = IR_RTE_ARBPL
                                                          IF_LOCKED    = IF_LOCKED
                                                          IF_SYSOM     = IF_SYSOM ).

*** Call Popup
    call function 'ZVCXI_PXSR_POPUP_RHNDL_START'
      exporting
        IR_POPUP_RHNDL = LR_POPUP_RHNDL.

*** Free the Popup
    LR_POPUP_RHNDL->DO_FREE( ).

  endmethod.
