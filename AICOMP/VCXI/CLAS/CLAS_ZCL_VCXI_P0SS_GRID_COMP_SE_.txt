
class ZCL_VCXI_P0SS_GRID_COMP_SE definition
  public
  inheriting from ZCL_VCXI_XCS_GRID_PRVDR
  create public .

public section.

  type-pools ABAP .
  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_P0SS_S_COMP_SE_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  data R_PR_SPEC_SE type ref to ZCL_VCXI_P0SS_PR_SPEC_SE .
  type-pools ABAP .
  data F_NO_COMP_FG type ABAP_BOOL .

  methods GET_COMP_FG_VIS
    importing
      !IR_PR_COMP_FG type ref to ZCL_VCXI_P0SS_PR_COMP_FG
    returning
      value(RS_COMP_FG_VIS) type ZVCXI_P0SS_S_COMP_FG_VIS
    raising
      /VCXI/CX_CKX .
  methods GET_COMP_SE_VIS
    importing
      !IR_PR_COMP_SE type ref to ZCL_VCXI_P0SS_PR_COMP_SE
    returning
      value(RS_COMP_SE_VIS) type ZVCXI_P0SS_S_COMP_SE_VIS
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ONF4
    for event ONF4 of CL_GUI_ALV_GRID
    importing
      !E_FIELDNAME
      !E_FIELDVALUE
      !ES_ROW_NO
      !ER_EVENT_DATA
      !ET_BAD_CELLS
      !E_DISPLAY .
  methods SET_COMP_FG_VIS
    importing
      !IR_PR_COMP_FG type ref to ZCL_VCXI_P0SS_PR_COMP_FG
      !IS_COMP_FG_VIS type ZVCXI_P0SS_S_COMP_FG_VIS
    raising
      /VCXI/CX_CKX .
  methods SET_COMP_SE_VIS
    importing
      !IR_PR_COMP_SE type ref to ZCL_VCXI_P0SS_PR_COMP_SE
      !IS_COMP_SE_VIS type ZVCXI_P0SS_S_COMP_SE_VIS
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_COMP_FG
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods CHANGE_STYLE_COMP_SE
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods HANDLE_DOUBLE_CLICK
    redefinition .
  methods INIT_TOOLBAR_DEF
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_GRID_COMP_SE definition
class ZCL_VCXI_P0SS_GRID_COMP_SE implementation.
method CHANGE_STYLE_COMP_FG.

  free CT_STYL.

*** Change Style to not editable

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COMPP'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRSTY'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BOXPA'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PROLE'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PROWI'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PROHE'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHTPL'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHTPW'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MATDE'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Change Style to editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MATNR'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOUPS'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COMPR'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DISKEY'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

endmethod.
method CHANGE_STYLE_COMP_SE.

  free CT_STYL.

*** Change Style to not editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MATNR'
                              IF_STYLE     = ME->F_STYLE_DISABLED
                    changing  CT_STYL      = CT_STYL ).

*** Change Style to editable
  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COMPP'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRSTY'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'BOXPA'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PROLE'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PROWI'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PROHE'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHTPL'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'SHTPW'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'NOUPS'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'COMPR'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'DISKEY'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

  ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'MATDE'
                              IF_STYLE     = ME->F_STYLE_ENABLED
                    changing  CT_STYL      = CT_STYL ).

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                      IR_UIGATE         = IR_UIGATE
                      IF_TABNAME        = IF_TABNAME
                      IF_CONTAINER_NAME = IF_CONTAINER_NAME
                      IF_APPL_EVENTS    = IF_APPL_EVENTS ).

*** Define Provider Type for Button not needed - Init Toolbardef is redefined
*  ME->F_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE.

  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_SPEC_SE.
    catch CX_SY_MOVE_CAST_ERROR.
      clear ME->R_PR_SPEC_SE.
  endtry.

endmethod.
method GET_COMP_FG_VIS.

  data: LS_PROLE type ZVCXI_P0S_S_PROLE,
        LS_PROWI type ZVCXI_P0S_S_PROWI,
        LS_PROHE type ZVCXI_P0S_S_PROHE,
        LS_SHTPL type ZVCXI_P0SS_S_SHTPL,
        LS_SHTPW type ZVCXI_P0SS_S_SHTPW,
        LS_DIKEY type ZVCXI_P0SS_S_DIKEY.

*** Get Component Product Type and Ratio, Ups and Distribution Key
  RS_COMP_FG_VIS-COMPP       = IR_PR_COMP_FG->GET_COMPP( ).
  RS_COMP_FG_VIS-COMPP_DESCR = IR_PR_COMP_FG->GET_COMPP_DESCR( ).
  RS_COMP_FG_VIS-COMPR       = IR_PR_COMP_FG->GET_COMPR( ).
  RS_COMP_FG_VIS-NOUPS       = IR_PR_COMP_FG->GET_NOUPS( ).
  LS_DIKEY                   = IR_PR_COMP_FG->GET_DIKEY( ).
  move-corresponding LS_DIKEY to RS_COMP_FG_VIS.

*** Get Product Style
  RS_COMP_FG_VIS-PRSTY         = IR_PR_COMP_FG->GET_PRSTY( ).
  RS_COMP_FG_VIS-PRSTY_DESCR   = IR_PR_COMP_FG->GET_PRSTY_DESCR( ).

*** Get Part of Box
  RS_COMP_FG_VIS-BOXPA         = IR_PR_COMP_FG->GET_BOXPA( ).
  RS_COMP_FG_VIS-BOXPA_DESCR   = IR_PR_COMP_FG->GET_BOXPA_DESCR( ).

*** Get Product Dimensions
  LS_PROLE                     = IR_PR_COMP_FG->GET_PROLE( ).
  move-corresponding LS_PROLE to RS_COMP_FG_VIS.
  LS_PROWI                     = IR_PR_COMP_FG->GET_PROWI( ).
  move-corresponding LS_PROWI to RS_COMP_FG_VIS.
  LS_PROHE                     = IR_PR_COMP_FG->GET_PROHE( ).
  move-corresponding LS_PROHE to RS_COMP_FG_VIS.

*** Get Product Sheet Dimensions
  LS_SHTPL                     = IR_PR_COMP_FG->GET_SHTPL( ).
  move-corresponding LS_SHTPL to RS_COMP_FG_VIS.
  LS_SHTPW                     = IR_PR_COMP_FG->GET_SHTPW( ).
  move-corresponding LS_SHTPW to RS_COMP_FG_VIS.

*** Get Material and Description
  RS_COMP_FG_VIS-MATNR         = IR_PR_COMP_FG->GET_MATNR( ).
  RS_COMP_FG_VIS-MATNR_DESCR   = IR_PR_COMP_FG->GET_MATNR_DESCR( ).

endmethod.
method GET_COMP_SE_VIS.

  data: LS_PROLE type ZVCXI_P0S_S_PROLE,
        LS_PROWI type ZVCXI_P0S_S_PROWI,
        LS_PROHE type ZVCXI_P0S_S_PROHE,
        LS_SHTPL type ZVCXI_P0SS_S_SHTPL,
        LS_SHTPW type ZVCXI_P0SS_S_SHTPW,
        LS_DIKEY type ZVCXI_P0SS_S_DIKEY.

*** Get Component Product Type and Ratio, Ups and Distribution Key
  RS_COMP_SE_VIS-COMPP       = IR_PR_COMP_SE->GET_COMPP( ).
  RS_COMP_SE_VIS-COMPP_DESCR = IR_PR_COMP_SE->GET_COMPP_DESCR( ).
  RS_COMP_SE_VIS-COMPR       = IR_PR_COMP_SE->GET_COMPR( ).
  RS_COMP_SE_VIS-NOUPS       = IR_PR_COMP_SE->GET_NOUPS( ).
  LS_DIKEY                   = IR_PR_COMP_SE->GET_DIKEY( ).
  move-corresponding LS_DIKEY to RS_COMP_SE_VIS.

*** Get Product Style
  RS_COMP_SE_VIS-PRSTY         = IR_PR_COMP_SE->GET_PRSTY( ).
  RS_COMP_SE_VIS-PRSTY_DESCR   = IR_PR_COMP_SE->GET_PRSTY_DESCR( ).

*** Get Part of Box
  RS_COMP_SE_VIS-BOXPA         = IR_PR_COMP_SE->GET_BOXPA( ).
  RS_COMP_SE_VIS-BOXPA_DESCR   = IR_PR_COMP_SE->GET_BOXPA_DESCR( ).

*** Get Product Dimensions
  LS_PROLE                     = IR_PR_COMP_SE->GET_PROLE( ).
  move-corresponding LS_PROLE to RS_COMP_SE_VIS.
  LS_PROWI                     = IR_PR_COMP_SE->GET_PROWI( ).
  move-corresponding LS_PROWI to RS_COMP_SE_VIS.
  LS_PROHE                     = IR_PR_COMP_SE->GET_PROHE( ).
  move-corresponding LS_PROHE to RS_COMP_SE_VIS.

*** Get Product Sheet Dimensions
  LS_SHTPL                     = IR_PR_COMP_SE->GET_SHTPL( ).
  move-corresponding LS_SHTPL to RS_COMP_SE_VIS.
  LS_SHTPW                     = IR_PR_COMP_SE->GET_SHTPW( ).
  move-corresponding LS_SHTPW to RS_COMP_SE_VIS.

*** Get Material Description
  RS_COMP_SE_VIS-MATDE         = IR_PR_COMP_SE->GET_MATDE( ).

endmethod.
method GET_FIELDCAT.

  data:          LF_LOCKED type        /VCXI/CKX_LOCKED,
                 LF_INUSE  type        /VCXI/VKSR_INUSE.
  field-symbols: <S_FCAT>  type        LVC_S_FCAT.

***----------------------------------------------------------------------------
*** Get Standard Field Catalog
  RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
  LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
  LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
  loop at RT_FCAT assigning <S_FCAT>.
    case <S_FCAT>-FIELDNAME.
      when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL'.
        move ABAP_TRUE    to <S_FCAT>-TECH.

      when 'MATNR'.
        move ME->F_NO_COMP_FG to <S_FCAT>-TECH.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'MATNR_DESCR'.
        move ME->F_NO_COMP_FG to <S_FCAT>-TECH.

      when 'COMPP'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'COMPR'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'DIKEY'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'NOUPS'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'PRSTY'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'BOXPA'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'PROLE' or 'PROWI' or 'PROHE'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'SHTPL' or 'SHTPW'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

      when 'MATDE'.
        if LF_LOCKED eq ABAP_TRUE and
           LF_INUSE  eq ABAP_TRUE.
          move ABAP_TRUE    to <S_FCAT>-EDIT.
        endif.

    endcase.
  endloop.

  sort RT_FCAT by COL_POS.

endmethod.
method GET_GRID_DATA.

  data:          LS_COMP_SE_GRID      type          ZVCXI_P0SS_S_COMP_SE_GRID,
                 LS_COMP_SE_VIS       type          ZVCXI_P0SS_S_COMP_SE_VIS,
                 LS_COMP_FG_VIS       type          ZVCXI_P0SS_S_COMP_FG_VIS.
  data:          LT_GATE              type          /VCXI/VKSR_TT_GATE,
                 LT_GATE_TMP          type          /VCXI/VKSR_TT_GATE.
  data:          LR_GATE              type ref to   /VCXI/CL_VKSR_GATE,
                 LR_PR_COMP_SE        type ref to   ZCL_VCXI_P0SS_PR_COMP_SE,
                 LR_PR_COMP_FG        type ref to   ZCL_VCXI_P0SS_PR_COMP_FG.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

*** Dereferencing of Data Reference
  assign IR_DATA->* to <T_DATA>.

*** Get Gates of Components SE
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                   IF_INUSE  = ABAP_TRUE ).

*** Get Gates of Components FG
  LT_GATE_TMP = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_COMP_FG=>C_IPRVT_P0_COMP_FG
                                       IF_INUSE  = ABAP_TRUE ).

  append lines of LT_GATE_TMP to LT_GATE.
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE ).

  loop at LT_GATE into LR_GATE.
    clear: LS_COMP_SE_GRID.

***------------------------------------------------------------------------------------------------
*** Get Global Data
    move LR_GATE->GET_POSID( ) to LS_COMP_SE_GRID-POSID.
    move LR_GATE->F_GATKY      to LS_COMP_SE_GRID-GATKY.
    move LR_GATE               to LS_COMP_SE_GRID-R_GATE.

    try.
***------------------------------------------------------------------------------------------------
***     Get Data from PR Class
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_SE.
        check LR_PR_COMP_SE is bound.

        LS_COMP_SE_VIS = ME->GET_COMP_SE_VIS( IR_PR_COMP_SE = LR_PR_COMP_SE ).
        move-corresponding LS_COMP_SE_VIS to LS_COMP_SE_GRID.

***------------------------------------------------------------------------------------------------
***     Set Style Details
        ME->CHANGE_STYLE_COMP_SE( changing  CT_STYL  = LS_COMP_SE_GRID-T_STYL ).

***     Call DVC Service - Modify Style
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                             changing  CT_STYL = LS_COMP_SE_GRID-T_STYL ).

***------------------------------------------------------------------------------------------------
***     Add Entry
        append initial line to <T_DATA> assigning <S_DATA>.
        move-corresponding LS_COMP_SE_GRID to <S_DATA>.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_SE.
    endtry.


    try.
***------------------------------------------------------------------------------------------------
***     Get Data from PR Class
        move LR_GATE->R_CLSPR ?to LR_PR_COMP_FG.
        check LR_PR_COMP_FG is bound.


        LS_COMP_FG_VIS = ME->GET_COMP_FG_VIS( IR_PR_COMP_FG = LR_PR_COMP_FG ).
        move-corresponding LS_COMP_FG_VIS to LS_COMP_SE_GRID.

***------------------------------------------------------------------------------------------------
***     Set Style Details
        ME->CHANGE_STYLE_COMP_FG( changing  CT_STYL  = LS_COMP_SE_GRID-T_STYL ).

***     Call DVC Service - Modify Style
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LR_GATE
                                             changing  CT_STYL = LS_COMP_SE_GRID-T_STYL ).

***------------------------------------------------------------------------------------------------
***     Add Entry
        append initial line to <T_DATA> assigning <S_DATA>.
        move-corresponding LS_COMP_SE_GRID to <S_DATA>.

      catch CX_SY_MOVE_CAST_ERROR.
        clear: LR_PR_COMP_FG.
    endtry.

  endloop.

endmethod.
method HANDLE_DATA_CHANGED_FINISHED.

  data:          LS_COMP_SE_GRID      type          ZVCXI_P0SS_S_COMP_SE_GRID,
                 LS_COMP_SE_VIS       type          ZVCXI_P0SS_S_COMP_SE_VIS,
                 LS_COMP_FG_VIS       type          ZVCXI_P0SS_S_COMP_FG_VIS.
  data:          LR_PR_COMP_SE        type ref to   ZCL_VCXI_P0SS_PR_COMP_SE,
                 LR_PR_COMP_FG        type ref to   ZCL_VCXI_P0SS_PR_COMP_FG,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  check E_MODIFIED eq ABAP_TRUE.

  try.

      SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                           ET_GOOD_CELLS = ET_GOOD_CELLS ).

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        move-corresponding <S_DATA> to LS_COMP_SE_GRID.
        check LS_COMP_SE_GRID-R_GATE is bound.

***     Set Data to COMP SE
        try.
            move LS_COMP_SE_GRID-R_GATE->R_CLSPR ?to LR_PR_COMP_SE.
            check LR_PR_COMP_SE is bound.

***         Set Values to PR Class
            move-corresponding LS_COMP_SE_GRID to LS_COMP_SE_VIS.
            ME->SET_COMP_SE_VIS( IR_PR_COMP_SE  = LR_PR_COMP_SE
                                 IS_COMP_SE_VIS = LS_COMP_SE_VIS ).

          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_COMP_SE.
        endtry.

***     Set Data to COMP FG
        try.
            move LS_COMP_SE_GRID-R_GATE->R_CLSPR ?to LR_PR_COMP_FG.
            check LR_PR_COMP_FG is bound.

***         Set Values to PR Class
            move-corresponding LS_COMP_SE_GRID to LS_COMP_FG_VIS.
            ME->SET_COMP_FG_VIS( IR_PR_COMP_FG  = LR_PR_COMP_FG
                                 IS_COMP_FG_VIS = LS_COMP_FG_VIS ).

          catch CX_SY_MOVE_CAST_ERROR.
            clear: LR_PR_COMP_FG.
        endtry.

      endloop.

      ME->R_GATE->RAISE_EVENTS( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:          LT_GATE              type          /VCXI/VKSR_TT_GATE.
  data:          LR_CX_CKX            type ref to   /VCXI/CX_CKX,
                 LR_GATE              type ref to   /VCXI/CL_VKSR_GATE.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any,
                 <F_FIELD>            type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check SY-TABIX  eq E_ROW-INDEX.

***     Open Subscreen
        assign component C_FIELDNAME_RGATE of structure <S_DATA> to <F_FIELD>.
        check <F_FIELD> is assigned.
        move <F_FIELD> to LR_GATE.

***     Check Gate is bound and Provider has an UI of "Child" specification!
        check LR_GATE is bound.

***     Get Gates of Components Specification
        LT_GATE = LR_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P0SS_PR_SPEC=>C_IPRVT_P0_SPEC
                                      IF_INUSE  = ABAP_TRUE ).

        read table LT_GATE into LR_GATE index 1.
        check LR_GATE is bound and
              LR_GATE->GET_CLSUI( ) is not initial.
***     Open UI
        ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = LR_GATE ).

***     Expand and select in Tree
        ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LR_GATE->F_GATKY ).
        ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LR_GATE->F_GATKY ).

      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method HANDLE_ONF4.

  data:          LF_PTYPE             type          ZVCXI_P0S_PTYPE,
                 LF_PRSTY             type          ZVCXI_P0SS_PRSTY,
                 LF_TPRST             type          ZVCXI_P0SS_TPRST.
  data:          LS_COMP_SE_GRID      type          ZVCXI_P0SS_S_COMP_SE_GRID.
  data:          LR_PR_COMP_SE        type ref to   ZCL_VCXI_P0SS_PR_COMP_SE,
                 LR_PR_SPEC_SE        type ref to   ZCL_VCXI_P0SS_PR_SPEC_SE,
                 LR_CX_CKX            type ref to   /VCXI/CX_CKX.
  field-symbols: <T_DATA>             type standard table,
                 <S_DATA>             type          any.

  try.

***   Dereferencing of Data Reference
      assign ME->R_DATA->* to <T_DATA>.

      loop at <T_DATA> assigning <S_DATA>.
        check ES_ROW_NO-ROW_ID = SY-TABIX.

        try.
            move-corresponding <S_DATA> to LS_COMP_SE_GRID.

            move LS_COMP_SE_GRID-R_GATE->R_CLSPR ?to LR_PR_COMP_SE.
            check LR_PR_COMP_SE is bound.

***         Handle F4 call
            case E_FIELDNAME.
              when 'COMPP'.
***             Get Ptype of Header
                try.
                    move ME->R_GATE->R_CLSPR ?to LR_PR_SPEC_SE.
                  catch CX_SY_MOVE_CAST_ERROR.
                    exit.
                endtry.
                check LR_PR_SPEC_SE is bound.
                move LR_PR_SPEC_SE->GET_PTYPE( ) to LF_PTYPE.
***             Call Search Help
                LS_COMP_SE_GRID-COMPP = ZCL_VCXI_P0SS_SHLP_COMPP=>CALL_SHLP( IF_PTYPE   = LF_PTYPE
                                                                             IF_DISPLAY = E_DISPLAY ).
***             Set Value
                if LS_COMP_SE_GRID-COMPP is not initial.
                  if ME->R_GATE->IS_LOCKED( ) eq ABAP_TRUE.
                    LR_PR_COMP_SE->SET_COMPP( IF_COMPP = LS_COMP_SE_GRID-COMPP
                                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
                    ME->R_GATE->RAISE_EVENTS( ).
                  endif.
                endif.

                ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.

              when 'BOXPA'.
***             Set only Parameter Id values
                move LR_PR_COMP_SE->GET_PRSTY( ) to LF_PRSTY.
                set parameter id 'ZVCXI_P0SS_PRSTY' field LF_PRSTY.
                move LR_PR_COMP_SE->GET_TPRST( ) to LF_TPRST.
                set parameter id 'ZVCXI_P0SS_TPRST' field LF_TPRST.

            endcase.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

*** Request Refresh for ALV
  move ABAP_TRUE to ME->F_REFRESH_REQ.

*** If we switch Application Events off -> do manually Refresh Screen
  if ME->F_APPL_EVENTS eq ABAP_FALSE.
    ME->R_UIGATE->REFRESH_SCREEN( ).
  endif.

endmethod.
method INIT_TOOLBAR_DEF.

  data:  LT_PRVDR_DEF     type /VCXI/VKSR_TT_PRVDR_DEF,
         LT_PRVDR_DEF_TMP type /VCXI/VKSR_TT_PRVDR_DEF.
  data:  LS_PRVDR_DEF     type /VCXI/VKSR_S_PRVDR_DEF.

  clear: ME->T_PRVDR_DEF.

*** We need two Provider Types!!!
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SE=>C_IPRVT_P0_COMP_SE
                                            IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  LT_PRVDR_DEF_TMP = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_FG=>C_IPRVT_P0_COMP_FG
                                                IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  append lines of LT_PRVDR_DEF_TMP to LT_PRVDR_DEF.

  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
*** Check if provider is used for GRID
    check ME->CHECK_PRVDR_REL( IF_ID = LS_PRVDR_DEF-ID ) eq ABAP_TRUE.

    append LS_PRVDR_DEF to ME->T_PRVDR_DEF.

  endloop.

  if lines( ME->T_PRVDR_DEF ) eq 1.
*** Set Type of Add Button
    move C_BTYPE_BUTTON to ME->F_BTYPE_ADD.
    move ABAP_FALSE     to ME->F_MENU_BUTTON_ACTIV.

    read table ME->T_PRVDR_DEF into LS_PRVDR_DEF index 1.

*** Set Button Text
    concatenate 'Add'(001)    LS_PRVDR_DEF-DESCR into ME->F_TEXT_ADD separated by SPACE.
    concatenate 'Delete'(002) LS_PRVDR_DEF-DESCR into ME->F_TEXT_DEL separated by SPACE.

  else.
*** Set Type of Add Button
    move C_BTYPE_MENU to ME->F_BTYPE_ADD.
    move ABAP_TRUE    to ME->F_MENU_BUTTON_ACTIV.

*** Set Button Text
    move 'Add'(001)    to ME->F_TEXT_ADD.
    move 'Delete'(002) to ME->F_TEXT_DEL.

  endif.

endmethod.
method SET_COMP_FG_VIS.

  data: LS_DIKEY       type ZVCXI_P0SS_S_DIKEY,
        LS_COMP_FG_VIS type ZVCXI_P0SS_S_COMP_FG_VIS.

  LS_COMP_FG_VIS = ME->GET_COMP_FG_VIS( IR_PR_COMP_FG = IR_PR_COMP_FG ).

*** Set Material Number
  if LS_COMP_FG_VIS-MATNR ne IS_COMP_FG_VIS-MATNR.
    IR_PR_COMP_FG->SET_MATNR( IF_MATNR = IS_COMP_FG_VIS-MATNR
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Number of Ups
  if LS_COMP_FG_VIS-NOUPS ne IS_COMP_FG_VIS-NOUPS.
    IR_PR_COMP_FG->SET_NOUPS( IF_NOUPS = IS_COMP_FG_VIS-NOUPS
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Component Ratio
  if LS_COMP_FG_VIS-COMPR ne IS_COMP_FG_VIS-COMPR.
    IR_PR_COMP_FG->SET_COMPR( IF_COMPR = IS_COMP_FG_VIS-COMPR
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Distribution Key
  if  LS_COMP_FG_VIS-DIKEY ne IS_COMP_FG_VIS-DIKEY.
    move-corresponding IS_COMP_FG_VIS to LS_DIKEY.
    IR_PR_COMP_FG->SET_DIKEY( IS_DIKEY = LS_DIKEY
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
method SET_COMP_SE_VIS.

  data: LS_PROLE       type ZVCXI_P0S_S_PROLE,
        LS_PROWI       type ZVCXI_P0S_S_PROWI,
        LS_PROHE       type ZVCXI_P0S_S_PROHE,
        LS_SHTPL       type ZVCXI_P0SS_S_SHTPL,
        LS_SHTPW       type ZVCXI_P0SS_S_SHTPW,
        LS_DIKEY       type ZVCXI_P0SS_S_DIKEY,
        LS_COMP_SE_VIS type ZVCXI_P0SS_S_COMP_SE_VIS.

  LS_COMP_SE_VIS = ME->GET_COMP_SE_VIS( IR_PR_COMP_SE = IR_PR_COMP_SE ).

*** Set Component Product Type and Ratio
  if LS_COMP_SE_VIS-COMPP ne IS_COMP_SE_VIS-COMPP.
    IR_PR_COMP_SE->SET_COMPP( IF_COMPP = IS_COMP_SE_VIS-COMPP
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if LS_COMP_SE_VIS-NOUPS ne IS_COMP_SE_VIS-NOUPS.
    IR_PR_COMP_SE->SET_NOUPS( IF_NOUPS = IS_COMP_SE_VIS-NOUPS
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).

  endif.

  if LS_COMP_SE_VIS-COMPR ne IS_COMP_SE_VIS-COMPR.
    IR_PR_COMP_SE->SET_COMPR( IF_COMPR = IS_COMP_SE_VIS-COMPR
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if LS_COMP_SE_VIS-DIKEY ne IS_COMP_SE_VIS-DIKEY.
    move-corresponding IS_COMP_SE_VIS to LS_DIKEY.
    IR_PR_COMP_SE->SET_DIKEY( IS_DIKEY = LS_DIKEY
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Product Type
  if LS_COMP_SE_VIS-PRSTY ne IS_COMP_SE_VIS-PRSTY.
    IR_PR_COMP_SE->SET_PRSTY( IF_PRSTY = IS_COMP_SE_VIS-PRSTY
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Box Part
  if LS_COMP_SE_VIS-BOXPA ne IS_COMP_SE_VIS-BOXPA.
    IR_PR_COMP_SE->SET_BOXPA( IF_BOXPA = IS_COMP_SE_VIS-BOXPA
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Product Dimensions
  if LS_COMP_SE_VIS-PROLE ne IS_COMP_SE_VIS-PROLE.
    move-corresponding IS_COMP_SE_VIS to LS_PROLE.
    IR_PR_COMP_SE->SET_PROLE( IS_PROLE = LS_PROLE
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if LS_COMP_SE_VIS-PROWI ne IS_COMP_SE_VIS-PROWI.
    move-corresponding IS_COMP_SE_VIS to LS_PROWI.
    IR_PR_COMP_SE->SET_PROWI( IS_PROWI = LS_PROWI
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if LS_COMP_SE_VIS-PROHE ne IS_COMP_SE_VIS-PROHE.
    move-corresponding IS_COMP_SE_VIS to LS_PROHE.
    IR_PR_COMP_SE->SET_PROHE( IS_PROHE = LS_PROHE
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

***--------------------------------------------------------------------------------------
*** Set Product Sheet Dimensions
  if LS_COMP_SE_VIS-SHTPL ne IS_COMP_SE_VIS-SHTPL.
    move-corresponding IS_COMP_SE_VIS to LS_SHTPL.
    IR_PR_COMP_SE->SET_SHTPL( IS_SHTPL = LS_SHTPL
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if LS_COMP_SE_VIS-SHTPW ne IS_COMP_SE_VIS-SHTPW.
    move-corresponding IS_COMP_SE_VIS to LS_SHTPW.
    IR_PR_COMP_SE->SET_SHTPW( IS_SHTPW = LS_SHTPW
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

***--------------------------------------------------------------------------------------
*** Set Material Description
  if LS_COMP_SE_VIS-MATDE ne IS_COMP_SE_VIS-MATDE.
    IR_PR_COMP_SE->SET_MATDE( IF_MATDE = IS_COMP_SE_VIS-MATDE
                              IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
method SET_EVENT.

  SUPER->SET_EVENT( ).

*** Set Eventhandler for F4help
  set handler ME->HANDLE_ONF4             for ME->R_GRID.

endmethod.
