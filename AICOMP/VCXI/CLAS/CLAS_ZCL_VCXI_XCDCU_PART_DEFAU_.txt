
class ZCL_VCXI_XCDCU_PART_DEFAU definition
  public
  final
  create public .

public section.
  type-pools ABAP .
  type-pools ICON .

  data F_FREED type ABAP_BOOL read-only value ABAP_FALSE. "#EC NOTEXT .

  methods CONSTRUCTOR
    importing
      !IR_DEFAU type ref to ZIF_VCXI_XCDC_REGDVC_DEFAU
    raising
      /VCXI/CX_CKX .
  methods DO_FREE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO .
  methods DO_USER_COMMAND
    importing
      !IF_UCOMM type SYUCOMM
    raising
      /VCXI/CX_CKX .
  methods GET_STRIPDESCR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
protected section.

  data F_PARID type /VCXI/VKS_PARID .
  data F_REFRESH_REQUESTED type ABAP_BOOL .
  data R_CONTAINER type ref to CL_GUI_CUSTOM_CONTAINER .
  data R_CONTAINER_LEFT type ref to CL_GUI_CONTAINER .
  data R_CONTAINER_RIGHT type ref to CL_GUI_CONTAINER .
  data R_DEFAU type ref to ZIF_VCXI_XCDC_REGDVC_DEFAU .
  data R_DEFAUEL_GRID type ref to CL_GUI_ALV_GRID .
  data R_DEFAUELEX_GRID type ref to CL_GUI_ALV_GRID .
  data R_SPLITTER type ref to CL_GUI_SPLITTER_CONTAINER .
  data T_DEFAUEL_FIELDCAT type LVC_T_FCAT .
  data T_DEFAUEL_GRID type ZVCXI_XCDCU_TT_DEFAUEL_GRID .
  data T_DEFAUELEX_FIELDCAT type LVC_T_FCAT .
  data T_DEFAUELEX_GRID type ZVCXI_XCDCU_TT_DEFAUELEX_GRID .
  data R_CONTAINER_BOTTOM type ref to CL_GUI_CUSTOM_CONTAINER .
  data T_DEFAUEX_FIELDCAT type LVC_T_FCAT .
  data T_DEFAUEX_GRID type ZVCXI_XCDCU_TT_DEFAUEX_GRID .
  data R_DEFAUEX_GRID type ref to CL_GUI_ALV_GRID .
  data F_DEFAUEL_REFRESH_REQUESTED type ABAP_BOOL .
  data F_DEFAUELEX_REFRESH_REQUESTED type ABAP_BOOL .
  data F_DEFAUEX_REFRESH_REQUESTED type ABAP_BOOL .

  methods CHECK_DEFAUEL
    importing
      !IS_DEFAUEL type ZVCXI_XCDC_S_REGDVC_DEFAUEL
    returning
      value(RF_OKAY) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods BUILD_FIELDCAT_DEFAUEL
    raising
      /VCXI/CX_CKX .
  methods BUILD_FIELDCAT_DEFAUELEX
    raising
      /VCXI/CX_CKX .
  methods BUILD_FIELDCAT_DEFAUEX
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_DEFAUEL
    returning
      value(RF_PARID) type /VCXI/VKS_PARID
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_DEFAUELEX
    returning
      value(RS_DEFAUELEX) type ZVCXI_XCDC_S_REGDVC_DEFAUELEX
    raising
      /VCXI/CX_CKX .
  methods GET_SELECTED_DEFAUEX
    returning
      value(RF_IEXIT) type ZVCXI_XCD_IEXIT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_CONTEXT_MENU_REQUEST
    for event CONTEXT_MENU_REQUEST of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !SENDER .
  methods HANDLE_DEFAUELEX_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DEFAUELEX_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DEFAUEL_CHANGE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DEFAUEL_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DEFAUEL_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DEFAUEX_ADD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DEFAUEX_CHANGE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DEFAUEX_DELETE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DEFAU_CHANGED
    for event CHANGED of ZIF_VCXI_XCDC_REGDVC_DEFAU .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO
      !SENDER .
  methods HANDLE_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM
      !SENDER .
  methods INIT_CONTAINER
    raising
      /VCXI/CX_CKX .
  methods INIT_DEFAUELEX_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_DEFAUEL_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_DEFAUEX_GRID
    raising
      /VCXI/CX_CKX .
  methods INIT_T_DEFAUELEX_GRID .
  methods INIT_T_DEFAUEL_GRID .
  methods INIT_T_DEFAUEX_GRID .
  methods REFRESH_DEFAUELEX_GRID_CONTENT
    raising
      /VCXI/CX_CKX .
  methods REFRESH_DEFAUEL_GRID_CONTENT
    raising
      /VCXI/CX_CKX .
  methods REFRESH_DEFAUEX_GRID_CONTENT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCDCU_PART_DEFAU definition
class ZCL_VCXI_XCDCU_PART_DEFAU implementation.
method BUILD_FIELDCAT_DEFAUEL .

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_XCDCU_S_DEFAUEL_GRID'
    changing
      CT_FIELDCAT            = ME->T_DEFAUEL_FIELDCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method BUILD_FIELDCAT_DEFAUELEX .

  field-symbols:  <S_FIELDCAT> type LVC_S_FCAT.

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_XCDCU_S_DEFAUELEX_GRID'
    changing
      CT_FIELDCAT            = ME->T_DEFAUELEX_FIELDCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  loop at ME->T_DEFAUELEX_FIELDCAT assigning <S_FIELDCAT>.
    case <S_FIELDCAT>-FIELDNAME.
      when 'PARID'.
        move ABAP_TRUE to <S_FIELDCAT>-TECH.
    endcase.
  endloop.

endmethod.
method BUILD_FIELDCAT_DEFAUEX .

  call function 'LVC_FIELDCATALOG_MERGE'
    exporting
      I_STRUCTURE_NAME       = 'ZVCXI_XCDCU_S_DEFAUEX_GRID'
    changing
      CT_FIELDCAT            = ME->T_DEFAUEX_FIELDCAT
    exceptions
      INCONSISTENT_INTERFACE = 1
      PROGRAM_ERROR          = 2
      others                 = 3.

  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method CHECK_DEFAUEL.

  data: LF_STATE            type                   DDGOTSTATE,
        LF_GUID             type                   /VCXI/CKX_GUID,
        LF_DIMID_P          type                   DIMID,
        LF_DIMID_D          type                   DIMID.
  data: LR_OBJECT           type ref to            /VCXI/IF_CKX_OBJECT,
        LR_PARAM            type ref to            /VCXI/CL_VKSC_PARAM,
        LR_CX_CKX           type ref to            /VCXI/CX_CKX.

*** Start Positiv
  move ABAP_TRUE to RF_OKAY.

  try.

***   Check DataElement
      call function 'DDIF_DTEL_GET'
        exporting
          NAME          = IS_DEFAUEL-DATEL
        importing
          GOTSTATE      = LF_STATE
        exceptions
          ILLEGAL_INPUT = 1.
      if SY-SUBRC ne 0 or
         LF_STATE ne 'A'.
***     DataElement &1 is not Valid. Please check
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCDC'
                                              IF_MSGNO = '040'
                                              IF_MSGV1 = IS_DEFAUEL-DATEL ).
      endif.

***   Check Parameter ID
      if IS_DEFAUEL-PARID ne 'LEOKY'.
        move IS_DEFAUEL-PARID to LF_GUID.
        LR_OBJECT = /VCXI/CL_VKSC_PARAM=>/VCXI/IF_CKX_OBJECT~GET_INSTANCE( IF_GUID = LF_GUID ).
        if LR_OBJECT is bound.
          try.
              move LR_OBJECT ?to LR_PARAM.
            catch CX_SY_MOVE_CAST_ERROR.
              clear: LR_PARAM.
          endtry.
          check LR_PARAM is bound.
***       If check Unit is not needed!
          if LR_PARAM->F_UOMKY_M  is initial     and
             IS_DEFAUEL-PAVAL_UOM is not initial.
***          Parameter don't have a Unit.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_XCDC'
                                                  IF_MSGNO = '041' ).
***       if Unit is needed!
          elseif LR_PARAM->F_UOMKY_M  is not initial and
                 IS_DEFAUEL-PAVAL_UOM is initial.
***         Parameter need a Unit.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_XCDC'
                                                  IF_MSGNO = '042' ).
***       Check Unit do Match
          elseif LR_PARAM->F_UOMKY_M  is not initial and
                 IS_DEFAUEL-PAVAL_UOM is not initial.

***         Get the dimension keys
            select single DIMID
                   into LF_DIMID_P
                   from T006
                  where MSEHI = LR_PARAM->F_UOMKY_M.
            select single DIMID
                   into LF_DIMID_D
                   from T006
                  where MSEHI = IS_DEFAUEL-PAVAL_UOM.

***         Compare the Dimensions
            if LF_DIMID_P ne LF_DIMID_D.
***           Parameter Unit & (&) can not converted into Default Unit & (&).
              /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                    IF_MSGID = 'ZVCXI_XCDC'
                                                    IF_MSGNO = '044'
                                                    IF_MSGV1 = LR_PARAM->F_UOMKY_M
                                                    IF_MSGV2 = LF_DIMID_P
                                                    IF_MSGV3 = IS_DEFAUEL-PAVAL_UOM
                                                    IF_MSGV4 = LF_DIMID_D ).
            endif.
          endif.
        endif.
      endif.
    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'S' ).
      move ABAP_FALSE to RF_OKAY.
  endtry.

endmethod.
method CONSTRUCTOR .

  move IR_DEFAU      to ME->R_DEFAU.
  move ABAP_TRUE     to ME->F_DEFAUEL_REFRESH_REQUESTED.
  move ABAP_TRUE     to ME->F_DEFAUEX_REFRESH_REQUESTED.

  set handler ME->HANDLE_DEFAU_CHANGED for ME->R_DEFAU.

  call function 'ZVCXI_XCDCU_UI_SET_PART_DEFAU'
    exporting
      IR_PART_DEFAU = ME.

endmethod.
method DO_FREE .

  move ABAP_TRUE to ME->F_FREED.

  if ME->R_DEFAUEL_GRID is bound.
    ME->R_DEFAUEL_GRID->FREE( exceptions
                              CNTL_ERROR        = 1
                              CNTL_SYSTEM_ERROR = 2
                              others            = 3 ).
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_DEFAUEL_GRID.
  endif.

  if ME->R_DEFAUELEX_GRID is bound.
    ME->R_DEFAUELEX_GRID->FREE( exceptions
                                 CNTL_ERROR        = 1
                                 CNTL_SYSTEM_ERROR = 2
                                 others            = 3 ).
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_DEFAUELEX_GRID.
  endif.

  if ME->R_CONTAINER is bound.
    ME->R_CONTAINER->FREE( exceptions
                             CNTL_ERROR        = 1
                             CNTL_SYSTEM_ERROR = 2
                             others            = 3 ).
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER.
  endif.

  if ME->R_CONTAINER_BOTTOM is bound.
    ME->R_CONTAINER_BOTTOM->FREE( exceptions
                                    CNTL_ERROR        = 1
                                    CNTL_SYSTEM_ERROR = 2
                                    others            = 3 ).
    if SY-SUBRC <> 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    clear ME->R_CONTAINER_BOTTOM.
  endif.

  set handler ME->HANDLE_DEFAU_CHANGED for ME->R_DEFAU activation ABAP_FALSE.

endmethod.
method DO_PBO .

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      ME->INIT_CONTAINER( ).

      ME->INIT_DEFAUEL_GRID( ).
      ME->REFRESH_DEFAUEL_GRID_CONTENT( ).

      ME->INIT_DEFAUELEX_GRID( ).
      ME->REFRESH_DEFAUELEX_GRID_CONTENT( ).

      ME->INIT_DEFAUEX_GRID( ).
      ME->REFRESH_DEFAUEX_GRID_CONTENT( ).

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method DO_USER_COMMAND.
endmethod.
method GET_SELECTED_DEFAUEL .

  data:  LS_DEFAUEL_GRID type         ZVCXI_XCDCU_S_DEFAUEL_GRID,
         LS_INDEX      type         LVC_S_ROW.
  data:  LT_INDEX      type         LVC_T_ROW.
***------------------------------------------------------------------------------------------------
*** Get Selected Rows
  ME->R_DEFAUEL_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_INDEX ).
  if LT_INDEX is not initial.
    read table LT_INDEX into LS_INDEX index 1.
    read table ME->T_DEFAUEL_GRID into LS_DEFAUEL_GRID index LS_INDEX-INDEX.
    check SY-SUBRC eq 0.
    move LS_DEFAUEL_GRID-PARID to RF_PARID.
  endif.

endmethod.
method GET_SELECTED_DEFAUELEX .

  data:  LS_INDEX      type         LVC_S_ROW.
  data:  LT_INDEX      type         LVC_T_ROW.
***------------------------------------------------------------------------------------------------
*** Get Selected Rows
  ME->R_DEFAUELEX_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_INDEX ).
  if LT_INDEX is not initial.
    read table LT_INDEX into LS_INDEX index 1.
    read table ME->T_DEFAUELEX_GRID into RS_DEFAUELEX index LS_INDEX-INDEX.
  endif.

endmethod.
method GET_SELECTED_DEFAUEX .

  data:  LS_DEFAUEX_GRID type         ZVCXI_XCDCU_S_DEFAUEX_GRID,
         LS_INDEX        type         LVC_S_ROW.
  data:  LT_INDEX        type         LVC_T_ROW.
***------------------------------------------------------------------------------------------------
*** Get Selected Rows/Cells
  ME->R_DEFAUEX_GRID->GET_SELECTED_ROWS( importing ET_INDEX_ROWS = LT_INDEX ).
  if LT_INDEX is not initial.
    read table LT_INDEX into LS_INDEX index 1.
    read table ME->T_DEFAUEX_GRID into LS_DEFAUEX_GRID index LS_INDEX-INDEX.
    check SY-SUBRC eq 0.
    move LS_DEFAUEX_GRID-IEXIT to RF_IEXIT.
  endif.

endmethod.
method GET_STRIPDESCR .

  data:  LF_COUNT1  type I,
         LF_COUNT2  type I,
         LF_COUNT   type STRING.

  describe table ME->R_DEFAU->T_REGDVC_DEFAUEL lines LF_COUNT1.
  describe table ME->R_DEFAU->T_REGDVC_DEFAUEX lines LF_COUNT2.
  LF_COUNT = LF_COUNT1 + LF_COUNT2.

  move 'Defaults (&)'(001) to RF_DESCR.
  replace '&' in RF_DESCR with LF_COUNT.

endmethod.
method HANDLE_CONTEXT_MENU_REQUEST .

  data:  LF_PARID       type        /VCXI/VKS_PARID,
         LF_IEXIT       type        ZVCXI_XCD_IEXIT.
  data:  LS_DEFAUELEX   type        ZVCXI_XCDC_S_REGDVC_DEFAUELEX.
  data:  LR_MENU        type ref to CL_CTMENU,
         LR_CX_CKX      type ref to /VCXI/CX_CKX.

  try.

      case SENDER.
***     Show Default Element Context Menu
        when ME->R_DEFAUEL_GRID.
          LF_PARID = ME->GET_SELECTED_DEFAUEL( ).
          LR_MENU = ME->R_DEFAU->GET_ACTIONS_ELMNT( IF_PARID = LF_PARID ).

          E_OBJECT->CLEAR( ).

          if LR_MENU is bound.
            E_OBJECT->ADD_MENU( MENU = LR_MENU ).
          endif.

***     Show Default Element Exit Context Menu
        when ME->R_DEFAUELEX_GRID.
          E_OBJECT->CLEAR( ).
          check ME->F_PARID is not initial.

          LS_DEFAUELEX = ME->GET_SELECTED_DEFAUELEX( ).
          LR_MENU = ME->R_DEFAU->GET_ACTIONS_ELMNTEXIT( IS_REGDVC_DEFAUELEX = LS_DEFAUELEX ).

          if LR_MENU is bound.
            E_OBJECT->ADD_MENU( MENU = LR_MENU ).
          endif.

***     Show Default Exit Context Menu
        when ME->R_DEFAUEX_GRID.
          LF_IEXIT = ME->GET_SELECTED_DEFAUEX( ).
          LR_MENU = ME->R_DEFAU->GET_ACTIONS_EXIT( IF_IEXIT = LF_IEXIT ).

          E_OBJECT->CLEAR( ).

          if LR_MENU is bound.
            E_OBJECT->ADD_MENU( MENU = LR_MENU ).
          endif.

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_DEFAU_CHANGED .

  move ABAP_TRUE     to ME->F_DEFAUEL_REFRESH_REQUESTED.
  move ABAP_TRUE     to ME->F_DEFAUELEX_REFRESH_REQUESTED.
  move ABAP_TRUE     to ME->F_DEFAUEX_REFRESH_REQUESTED.

endmethod.
method HANDLE_DEFAUEL_ADD .

  data:          LF_RETURN    type                   ABAP_BOOL,
                 LF_EXIT      type                   ABAP_BOOL.
  data:          LT_SVAL      type standard table of SVAL.
  data:          LS_DEFAUEL   type                   ZVCXI_XCDC_S_REGDVC_DEFAUEL.
  field-symbols: <S_FIELD>    type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_DEFAUEL'.
  <S_FIELD>-FIELDNAME = 'PARID'.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_DEFAUEL'.
  <S_FIELD>-FIELDNAME = 'DATEL'.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_DEFAUEL'.
  <S_FIELD>-FIELDNAME = 'PAVAL_UOM'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_DEFAUEL'.
  <S_FIELD>-FIELDNAME = 'IEVNT'.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Add Default Element'(A20)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'PARID'.
          move <S_FIELD>-VALUE to LS_DEFAUEL-PARID.
        when 'DATEL'.
          move <S_FIELD>-VALUE to LS_DEFAUEL-DATEL.
        when 'PAVAL_UOM'.
          move <S_FIELD>-VALUE to LS_DEFAUEL-PAVAL_UOM.
        when 'IEVNT'.
          move <S_FIELD>-VALUE to LS_DEFAUEL-IEVNT.
      endcase.
    endloop.

*** Check if all needed fields are filled
    check LS_DEFAUEL-PARID is not initial and
          LS_DEFAUEL-DATEL is not initial.

*** Check if all needed fields are valid
    check ME->CHECK_DEFAUEL( IS_DEFAUEL = LS_DEFAUEL ) eq ABAP_TRUE.

    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Add Element
  ME->R_DEFAU->ADD_ELMNT( IS_REGDVC_DEFAUEL = LS_DEFAUEL ).

*** Do check
  ME->R_DEFAU->DO_CHECK( ).

endmethod.
method HANDLE_DEFAUEL_CHANGE .

  data:          LF_RETURN  type                   ABAP_BOOL,
                 LF_EXIT    type                   ABAP_BOOL,
                 LF_PARID   type                   /VCXI/VKS_PARID.
  data:          LT_SVAL    type standard table of SVAL.
  data:          LS_DEFAUEL type                   ZVCXI_XCDC_S_REGDVC_DEFAUEL.
  field-symbols: <S_FIELD>  type                   SVAL.

*** Get selected Data
  LF_PARID = ME->GET_SELECTED_DEFAUEL( ).
  check LF_PARID is not initial.
  read table ME->R_DEFAU->T_REGDVC_DEFAUEL into LS_DEFAUEL with key PARID = LF_PARID.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_XCDC_S_REGDVC_DEFAUEL'.
  <S_FIELD>-FIELDNAME  = 'PARID'.
  <S_FIELD>-VALUE      = LS_DEFAUEL-PARID.
  <S_FIELD>-FIELD_ATTR = '02'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_XCDC_S_REGDVC_DEFAUEL'.
  <S_FIELD>-FIELDNAME  = 'DATEL'.
  <S_FIELD>-VALUE      = LS_DEFAUEL-DATEL.
  <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_XCDC_S_REGDVC_DEFAUEL'.
  <S_FIELD>-FIELDNAME  = 'PAVAL_UOM'.
  <S_FIELD>-VALUE      = LS_DEFAUEL-PAVAL_UOM.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_XCDC_S_REGDVC_DEFAUEL'.
  <S_FIELD>-FIELDNAME  = 'IEVNT'.
  <S_FIELD>-VALUE      = LS_DEFAUEL-IEVNT.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Change Default Element'(A23)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'PARID'.
          move <S_FIELD>-VALUE to LS_DEFAUEL-PARID.
        when 'DATEL'.
          move <S_FIELD>-VALUE to LS_DEFAUEL-DATEL.
        when 'PAVAL_UOM'.
          move <S_FIELD>-VALUE to LS_DEFAUEL-PAVAL_UOM.
        when 'IEVNT'.
          move <S_FIELD>-VALUE to LS_DEFAUEL-IEVNT.
      endcase.
    endloop.

*** Check if all needed fields are filled
    check LS_DEFAUEL-PARID is not initial and
          LS_DEFAUEL-DATEL is not initial.

*** Check if all needed fields are valid
    check ME->CHECK_DEFAUEL( IS_DEFAUEL = LS_DEFAUEL ) eq ABAP_TRUE.

    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Change Element
  ME->R_DEFAU->CHANGE_ELMNT( IS_REGDVC_DEFAUEL = LS_DEFAUEL ).

*** Do check
  ME->R_DEFAU->DO_CHECK( ).

endmethod.
method HANDLE_DEFAUEL_DELETE .

  data: LF_PARID type /VCXI/VKS_PARID.

  LF_PARID = ME->GET_SELECTED_DEFAUEL( ).
  ME->R_DEFAU->DELETE_ELMNT( IF_PARID = LF_PARID ).

endmethod.
method HANDLE_DEFAUELEX_ADD .

  data:          LF_RETURN     type                   ABAP_BOOL,
                 LF_EXIT       type                   ABAP_BOOL.
  data:          LT_SVAL       type standard table of SVAL.
  data:          LS_DEFAUELEX  type                   ZVCXI_XCDC_S_REGDVC_DEFAUELEX.
  field-symbols: <S_FIELD>     type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_DEFAUELEX'.
  <S_FIELD>-FIELDNAME = 'IEXIT'.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_DEFAUELEX'.
  <S_FIELD>-FIELDNAME = 'FNAME'.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Add Default Element Exit'(A21)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'IEXIT'.
          move <S_FIELD>-VALUE to LS_DEFAUELEX-IEXIT.
        when 'FNAME'.
          move <S_FIELD>-VALUE to LS_DEFAUELEX-FNAME.
      endcase.
    endloop.

*** Check if all needed fields are filled
    check LS_DEFAUELEX-IEXIT is not initial and
          LS_DEFAUELEX-FNAME is not initial.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

  move ME->F_PARID to LS_DEFAUELEX-PARID.

***--------------------------------------------------------------------------------------
*** Add Element Exit
  ME->R_DEFAU->ADD_ELMNTEXIT( IS_REGDVC_DEFAUELEX = LS_DEFAUELEX ).

*** Do check
  ME->R_DEFAU->DO_CHECK( ).

endmethod.
method HANDLE_DEFAUELEX_DELETE .

  data: LS_DEFAUELEX type ZVCXI_XCDC_S_REGDVC_DEFAUELEX.

  LS_DEFAUELEX = ME->GET_SELECTED_DEFAUELEX( ).
  ME->R_DEFAU->DELETE_ELMNTEXIT( IS_REGDVC_DEFAUELEX = LS_DEFAUELEX ).

endmethod.
method HANDLE_DEFAUEX_ADD .

  data:          LF_RETURN   type                   ABAP_BOOL,
                 LF_EXIT     type                   ABAP_BOOL.
  data:          LT_SVAL     type standard table of SVAL.
  data:          LS_DEFAUEX  type                   ZVCXI_XCDC_S_REGDVC_DEFAUEX.
  field-symbols: <S_FIELD>   type                   SVAL.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_DEFAUEX'.
  <S_FIELD>-FIELDNAME = 'IEXIT'.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_DEFAUEX'.
  <S_FIELD>-FIELDNAME = 'FNAME'.
  <S_FIELD>-FIELD_OBL = ABAP_TRUE.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME   = 'ZVCXI_XCDC_S_REGDVC_DEFAUEX'.
  <S_FIELD>-FIELDNAME = 'SEXIT'.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Add Default Exit'(A22)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'IEXIT'.
          move <S_FIELD>-VALUE to LS_DEFAUEX-IEXIT.
        when 'FNAME'.
          move <S_FIELD>-VALUE to LS_DEFAUEX-FNAME.
        when 'SEXIT'.
          move <S_FIELD>-VALUE to LS_DEFAUEX-SEXIT.
      endcase.
    endloop.

*** Check if all needed fields are filled
    check LS_DEFAUEX-IEXIT is not initial and
          LS_DEFAUEX-FNAME is not initial.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Add Exit
  ME->R_DEFAU->ADD_EXIT( IS_REGDVC_DEFAUEX = LS_DEFAUEX ).

*** Do check
  ME->R_DEFAU->DO_CHECK( ).

endmethod.
method HANDLE_DEFAUEX_CHANGE .

  data:          LF_RETURN  type                   ABAP_BOOL,
                 LF_EXIT    type                   ABAP_BOOL,
                 LF_IEXIT   type                   ZVCXI_XCD_IEXIT.
  data:          LT_SVAL    type standard table of SVAL.
  data:          LS_DEFAUEX type                   ZVCXI_XCDC_S_REGDVC_DEFAUEX.
  field-symbols: <S_FIELD>  type                   SVAL.

*** Get selected Data
  LF_IEXIT = ME->GET_SELECTED_DEFAUEX( ).
  check LF_IEXIT is not initial.
  read table ME->R_DEFAU->T_REGDVC_DEFAUEX into LS_DEFAUEX with key IEXIT = LF_IEXIT.

***----------------------------------------------------------------------
*** Create PopUp for User-Entry
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_XCDC_S_REGDVC_DEFAUEX'.
  <S_FIELD>-FIELDNAME  = 'IEXIT'.
  <S_FIELD>-VALUE      = LS_DEFAUEX-IEXIT.
  <S_FIELD>-FIELD_ATTR = '02'.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_XCDC_S_REGDVC_DEFAUEX'.
  <S_FIELD>-FIELDNAME  = 'FNAME'.
  <S_FIELD>-FIELD_OBL  = ABAP_TRUE.
  <S_FIELD>-VALUE      = LS_DEFAUEX-FNAME.
  append initial line to LT_SVAL assigning <S_FIELD>.
  <S_FIELD>-TABNAME    = 'ZVCXI_XCDC_S_REGDVC_DEFAUEX'.
  <S_FIELD>-FIELDNAME  = 'SEXIT'.
  <S_FIELD>-VALUE      = LS_DEFAUEX-SEXIT.

  do.

    call function 'POPUP_GET_VALUES'
      exporting
        POPUP_TITLE     = 'Change Default Exit'(A24)
      importing
        RETURNCODE      = LF_RETURN
      tables
        FIELDS          = LT_SVAL
      exceptions
        ERROR_IN_FIELDS = 1
        others          = 2.
    if SY-SUBRC ne 0 or
      LF_RETURN eq 'A'.
      clear LT_SVAL.
      LF_EXIT = ABAP_TRUE.
      exit.
    endif.

    check LT_SVAL is not initial.
    loop at LT_SVAL assigning <S_FIELD>.
      case <S_FIELD>-FIELDNAME.
        when 'IEXIT'.
          move <S_FIELD>-VALUE to LS_DEFAUEX-IEXIT.
        when 'FNAME'.
          move <S_FIELD>-VALUE to LS_DEFAUEX-FNAME.
        when 'SEXIT'.
          move <S_FIELD>-VALUE to LS_DEFAUEX-SEXIT.
      endcase.
    endloop.

*** Check if all needed fields are filled
    check LS_DEFAUEX-IEXIT is not initial and
          LS_DEFAUEX-FNAME is not initial.
    exit.

  enddo.

*** Cancled action
  if LF_EXIT = ABAP_TRUE.
    exit.
  endif.

***--------------------------------------------------------------------------------------
*** Change Exit
  ME->R_DEFAU->CHANGE_EXIT( IS_REGDVC_DEFAUEX = LS_DEFAUEX ).

*** Do check
  ME->R_DEFAU->DO_CHECK( ).

endmethod.
method HANDLE_DEFAUEX_DELETE .

  data: LF_IEXIT type ZVCXI_XCD_IEXIT.

  LF_IEXIT = ME->GET_SELECTED_DEFAUEX( ).
  ME->R_DEFAU->DELETE_EXIT( IF_IEXIT = LF_IEXIT ).

endmethod.
method HANDLE_DOUBLE_CLICK.

  data:  LR_CX_CKX            type ref to  /VCXI/CX_CKX.

  try.

      case SENDER.
        when ME->R_DEFAUEL_GRID.
          ME->F_PARID = ME->GET_SELECTED_DEFAUEL( ).
          move ABAP_TRUE to ME->F_DEFAUELEX_REFRESH_REQUESTED.
          CL_GUI_CFW=>SET_NEW_OK_CODE( 'REFRESH' ).

      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method HANDLE_USER_COMMAND .

  data:  LR_CX_CKX     type ref to  /VCXI/CX_CKX.

  try.
      case SENDER.
        when ME->R_DEFAUEL_GRID.
          case E_UCOMM.
            when ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_ADD_ELMNT.
              ME->HANDLE_DEFAUEL_ADD( ).

            when ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_DEL_ELMNT.
              ME->HANDLE_DEFAUEL_DELETE( ).

            when ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_CHANGE_ELMNT.
              ME->HANDLE_DEFAUEL_CHANGE( ).

          endcase.

        when ME->R_DEFAUELEX_GRID.
          case E_UCOMM.
            when ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_ADD_ELMNTEXIT.
              ME->HANDLE_DEFAUELEX_ADD( ).

            when ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_DEL_ELMNTEXIT.
              ME->HANDLE_DEFAUELEX_DELETE( ).

          endcase.

        when ME->R_DEFAUEX_GRID.
          case E_UCOMM.
            when ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_ADD_EXIT.
              ME->HANDLE_DEFAUEX_ADD( ).

            when ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_DEL_EXIT.
              ME->HANDLE_DEFAUEX_DELETE( ).

            when ZIF_VCXI_XCDC_REGDVC_DEFAU=>C_FCODE_CHANGE_EXIT.
              ME->HANDLE_DEFAUEX_CHANGE( ).

          endcase.


      endcase.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( IF_TYPE = 'S' ).
  endtry.

endmethod.
method INIT_CONTAINER .

  if ME->R_CONTAINER is not bound.
    create object ME->R_CONTAINER
      exporting
        CONTAINER_NAME              = '0230CC_DEFAUEL'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

  if ME->R_SPLITTER is not bound.
    create object ME->R_SPLITTER
      exporting
        PARENT            = ME->R_CONTAINER
        ROWS              = 1
        COLUMNS           = 2
      exceptions
        CNTL_ERROR        = 1
        CNTL_SYSTEM_ERROR = 2
        others            = 3.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

  if ME->R_CONTAINER_LEFT is not bound.
    ME->R_CONTAINER_LEFT  = ME->R_SPLITTER->GET_CONTAINER( ROW    = 1
                                                           COLUMN = 1 ).
  endif.

  if ME->R_CONTAINER_RIGHT is not bound.
    ME->R_CONTAINER_RIGHT = ME->R_SPLITTER->GET_CONTAINER( ROW    = 1
                                                           COLUMN = 2 ).
  endif.

*** Make it not movable
  ME->R_SPLITTER->SET_COLUMN_SASH(
    exporting
      ID                = 1
      TYPE              = CL_GUI_SPLITTER_CONTAINER=>TYPE_MOVABLE
      VALUE             = CL_GUI_SPLITTER_CONTAINER=>FALSE
    exceptions
      CNTL_ERROR        = 1
      CNTL_SYSTEM_ERROR = 2
      others            = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

  if ME->R_CONTAINER_BOTTOM is not bound.
    create object ME->R_CONTAINER_BOTTOM
      exporting
        CONTAINER_NAME              = '0230CC_DEFAUEX'
      exceptions
        CNTL_ERROR                  = 1
        CNTL_SYSTEM_ERROR           = 2
        CREATE_ERROR                = 3
        LIFETIME_ERROR              = 4
        LIFETIME_DYNPRO_DYNPRO_LINK = 5
        others                      = 6.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
  endif.

endmethod.
method INIT_DEFAUEL_GRID .

  if ME->R_DEFAUEL_GRID is not bound.
    create object ME->R_DEFAUEL_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER_LEFT
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    set handler ME->HANDLE_CONTEXT_MENU_REQUEST for ME->R_DEFAUEL_GRID.
    set handler ME->HANDLE_USER_COMMAND         for ME->R_DEFAUEL_GRID.
    set handler ME->HANDLE_DOUBLE_CLICK         for ME->R_DEFAUEl_GRID.

    ME->BUILD_FIELDCAT_DEFAUEL( ).

  endif.

endmethod.
method INIT_DEFAUELEX_GRID .

  if ME->R_DEFAUELEX_GRID is not bound.
    create object ME->R_DEFAUELEX_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER_RIGHT
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    set handler ME->HANDLE_CONTEXT_MENU_REQUEST for ME->R_DEFAUELEX_GRID.
    set handler ME->HANDLE_USER_COMMAND         for ME->R_DEFAUELEX_GRID.

    ME->BUILD_FIELDCAT_DEFAUELEX( ).

  endif.

endmethod.
method INIT_DEFAUEX_GRID .

  if ME->R_DEFAUEX_GRID is not bound.
    create object ME->R_DEFAUEX_GRID
      exporting
        I_PARENT          = ME->R_CONTAINER_BOTTOM
        I_APPL_EVENTS     = 'X'
      exceptions
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        others            = 5.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

    set handler ME->HANDLE_CONTEXT_MENU_REQUEST for ME->R_DEFAUEX_GRID.
    set handler ME->HANDLE_USER_COMMAND         for ME->R_DEFAUEX_GRID.

    ME->BUILD_FIELDCAT_DEFAUEX( ).

  endif.

endmethod.
method INIT_T_DEFAUEL_GRID .

  data:           LS_DEFAUEL       type ZVCXI_XCDC_S_REGDVC_DEFAUEL.
  field-symbols:  <S_DEFAUEL_GRID> type ZVCXI_XCDCU_S_DEFAUEL_GRID.

  free: ME->T_DEFAUEL_GRID.

  loop at ME->R_DEFAU->T_REGDVC_DEFAUEL into LS_DEFAUEL.
    append initial line to ME->T_DEFAUEL_GRID assigning <S_DEFAUEL_GRID>.
    move-corresponding LS_DEFAUEL to <S_DEFAUEL_GRID>.
  endloop.

endmethod.
method INIT_T_DEFAUELEX_GRID .

  data:           LS_DEFAUELEX       type ZVCXI_XCDC_S_REGDVC_DEFAUELEX.
  field-symbols:  <S_DEFAUELEX_GRID> type ZVCXI_XCDCU_S_DEFAUELEX_GRID.

  free: ME->T_DEFAUELEX_GRID.

  loop at ME->R_DEFAU->T_REGDVC_DEFAUELEX into LS_DEFAUELEX
                                          where PARID eq ME->F_PARID.
    append initial line to ME->T_DEFAUELEX_GRID assigning <S_DEFAUELEX_GRID>.
    move-corresponding LS_DEFAUELEX to <S_DEFAUELEX_GRID>.
  endloop.

endmethod.
method INIT_T_DEFAUEX_GRID .

  data:           LS_DEFAUEX       type ZVCXI_XCDC_S_REGDVC_DEFAUEX.
  field-symbols:  <S_DEFAUEX_GRID> type ZVCXI_XCDCU_S_DEFAUEX_GRID.

  free: ME->T_DEFAUEX_GRID.

  loop at ME->R_DEFAU->T_REGDVC_DEFAUEX into LS_DEFAUEX.
    append initial line to ME->T_DEFAUEX_GRID assigning <S_DEFAUEX_GRID>.
    move-corresponding LS_DEFAUEX to <S_DEFAUEX_GRID>.
  endloop.

endmethod.
method REFRESH_DEFAUEL_GRID_CONTENT .

  data:  LS_LAYOUT            type LVC_S_LAYO.
  data:  LT_TOOLBAR_EXCLUDING type UI_FUNCTIONS.

  check ME->F_DEFAUEL_REFRESH_REQUESTED eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_DEFAUEL_REFRESH_REQUESTED.

  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL        to LT_TOOLBAR_EXCLUDING.
  ME->INIT_T_DEFAUEL_GRID( ).

  move 'X' to LS_LAYOUT-NO_TOOLBAR.
  move 'X' to LS_LAYOUT-CWIDTH_OPT.

  ME->R_DEFAUEL_GRID->SET_TABLE_FOR_FIRST_DISPLAY( exporting
                                                     IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
                                                     IS_LAYOUT                     = LS_LAYOUT
                                                   changing
                                                     IT_FIELDCATALOG               = ME->T_DEFAUEL_FIELDCAT
                                                     IT_OUTTAB                     = ME->T_DEFAUEL_GRID
                                                   exceptions
                                                     INVALID_PARAMETER_COMBINATION = 1
                                                     PROGRAM_ERROR                 = 2
                                                     TOO_MANY_LINES                = 3
                                                     others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REFRESH_DEFAUELEX_GRID_CONTENT .

  data:  LF_WIDTH             type I.
  data:  LS_LAYOUT            type LVC_S_LAYO.
  data:  LT_TOOLBAR_EXCLUDING type UI_FUNCTIONS.

  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL        to LT_TOOLBAR_EXCLUDING.
  ME->INIT_T_DEFAUELEX_GRID( ).

  if ME->F_DEFAUELEX_REFRESH_REQUESTED eq ABAP_TRUE.
    move ABAP_FALSE to ME->F_DEFAUELEX_REFRESH_REQUESTED.

    move 'X'         to LS_LAYOUT-NO_TOOLBAR.
    move 'X'         to LS_LAYOUT-CWIDTH_OPT.
    move ME->F_PARID to LS_LAYOUT-GRID_TITLE.


    ME->R_DEFAUELEX_GRID->SET_TABLE_FOR_FIRST_DISPLAY( exporting
                                                         IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
                                                         IS_LAYOUT                     = LS_LAYOUT
                                                       changing
                                                         IT_FIELDCATALOG               = ME->T_DEFAUELEX_FIELDCAT
                                                         IT_OUTTAB                     = ME->T_DEFAUELEX_GRID
                                                       exceptions
                                                         INVALID_PARAMETER_COMBINATION = 1
                                                         PROGRAM_ERROR                 = 2
                                                         TOO_MANY_LINES                = 3
                                                         others                        = 4 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endif.

*** Change Container Settings
  if ME->F_PARID is initial.
    clear LF_WIDTH.
  else.
*** Default Width
    move 50 to LF_WIDTH.
  endif.

  ME->R_SPLITTER->SET_COLUMN_WIDTH(
    exporting
      ID                = 2
      WIDTH             = LF_WIDTH
    exceptions
      CNTL_ERROR        = 1
      CNTL_SYSTEM_ERROR = 2
      others            = 3 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
method REFRESH_DEFAUEX_GRID_CONTENT .

  data:  LS_LAYOUT            type LVC_S_LAYO.
  data:  LT_TOOLBAR_EXCLUDING type UI_FUNCTIONS.

  check ME->F_DEFAUEX_REFRESH_REQUESTED eq ABAP_TRUE.
  move ABAP_FALSE to ME->F_DEFAUEX_REFRESH_REQUESTED.

  append CL_GUI_ALV_GRID=>MC_FC_EXCL_ALL        to LT_TOOLBAR_EXCLUDING.
  ME->INIT_T_DEFAUEX_GRID( ).

  move 'X' to LS_LAYOUT-NO_TOOLBAR.
  move 'X' to LS_LAYOUT-CWIDTH_OPT.

  ME->R_DEFAUEX_GRID->SET_TABLE_FOR_FIRST_DISPLAY( exporting
                                                     IT_TOOLBAR_EXCLUDING          = LT_TOOLBAR_EXCLUDING
                                                     IS_LAYOUT                     = LS_LAYOUT
                                                   changing
                                                     IT_FIELDCATALOG               = ME->T_DEFAUEX_FIELDCAT
                                                     IT_OUTTAB                     = ME->T_DEFAUEX_GRID
                                                   exceptions
                                                     INVALID_PARAMETER_COMBINATION = 1
                                                     PROGRAM_ERROR                 = 2
                                                     TOO_MANY_LINES                = 3
                                                     others                        = 4 ).
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

endmethod.
