
class ZCL_VCXI_P1SS_GRID_INPLIN definition
  public
  inheriting from ZCL_VCXI_XCS_GRID
  create public .

public section.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_TABNAME type TABNAME default 'ZVCXI_P1SS_S_INPLIN_GRID'
      !IF_CONTAINER_NAME type SCRFNAME
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IF_APPL_EVENTS type ABAP_BOOL default ABAP_TRUE
    raising
      /VCXI/CX_CKX .
protected section.

  data R_PR_INLPR type ref to ZCL_VCXI_P1SS_PR_INLPR .

  methods CHANGE_STYLE_INPLIN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    changing
      !CT_STYL type LVC_T_STYL
    raising
      /VCXI/CX_CKX .
  methods GET_INPLIN_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    changing
      !CS_DATA type ANY
    raising
      /VCXI/CX_CKX .
  methods HANDLE_DOUBLE_CLICK
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods HANDLE_HOTSPOT_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID
      !ES_ROW_NO .
  methods SET_INPLIN_VIS
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IS_DATA type ANY
    raising
      /VCXI/CX_CKX .

  methods GET_FIELDCAT
    redefinition .
  methods GET_GRID_DATA
    redefinition .
  methods HANDLE_DATA_CHANGED_FINISHED
    redefinition .
  methods SET_EVENT
    redefinition .
private section.
endclass. "ZCL_VCXI_P1SS_GRID_INPLIN definition
class ZCL_VCXI_P1SS_GRID_INPLIN implementation.
  method CHANGE_STYLE_INPLIN.

    data: LF_STYLE_ENABLED type LVC_STYLE.
    data: LS_INPLIN_GRID type ZVCXI_P1SS_S_INPLIN_GRID.
    data: LR_PR_INPLIN  type ref to ZCL_VCXI_P1SS_PR_INPLIN.


    free CT_STYL.

***--------------------------------------------------------------------------------------
*** Get PR Class
    if IR_GATE is bound.
      try.
          move IR_GATE->R_CLSPR ?to LR_PR_INPLIN.
        catch CX_SY_MOVE_CAST_ERROR.
      endtry.
      check LR_PR_INPLIN is bound.

      LF_STYLE_ENABLED = ME->F_STYLE_ENABLED.
    else.
      LF_STYLE_ENABLED = ME->F_STYLE_DISABLED.
    endif.

*** "Cast" generic structure to Vis Structure
    move-corresponding IS_DATA to LS_INPLIN_GRID.

***--------------------------------------------------------------------------------------
*** Inline Printing Flag
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'FINPR'
                                IF_STYLE     = switch #( LS_INPLIN_GRID-FINPR when ABAP_UNDEFINED then ME->F_STYLE_DISABLED
                                                                                                  else ME->F_STYLE_ENABLED )
                      changing  CT_STYL      = CT_STYL ).

*** Set Printing Type = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'TPRIN'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

*** Set Printing Side = Enable
    ME->CHANGE_STYLE( exporting IF_FIELDNAME = 'PRSID'
                                IF_STYLE     = LF_STYLE_ENABLED
                      changing  CT_STYL      = CT_STYL ).

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE           = IR_GATE
                        IF_TABNAME        = IF_TABNAME
                        IF_CONTAINER_NAME = IF_CONTAINER_NAME
                        IR_UIGATE         = IR_UIGATE
                        IF_APPL_EVENTS    = IF_APPL_EVENTS ).

    ME->R_PR_INLPR ?= ME->R_GATE->R_CLSPR.

  endmethod.
  method GET_FIELDCAT.

    data: LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_INUSE  type /VCXI/VKSR_INUSE,
          LF_COLPOS type I.


***----------------------------------------------------------------------------
*** Get Standard Field Catalog
    RT_FCAT = SUPER->GET_FIELDCAT( ).

*** Get Lock and In-Use Status
    LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
    LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***----------------------------------------------------------------------------
*** Adjust Field Catalog
    loop at RT_FCAT assigning field-symbol(<S_FCAT>).
      case <S_FCAT>-FIELDNAME.
        when 'POSID' or 'GATKY' or 'R_GATE' or 'T_STYL'.
          move ABAP_TRUE    to <S_FCAT>-TECH.
          move 0            to <S_FCAT>-COL_POS.

        when 'FINPR'.
          <S_FCAT>-CHECKBOX = ABAP_TRUE.
          <S_FCAT>-HOTSPOT  = ABAP_TRUE.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            <S_FCAT>-EDIT = ABAP_TRUE.
          endif.

        when 'TPRIN' or
             'PRSID'.
          if LF_LOCKED eq ABAP_TRUE and
             LF_INUSE  eq ABAP_TRUE.
            <S_FCAT>-EDIT = ABAP_TRUE.
          endif.

        when 'NOCOL'       or
             'NOCOL_DESCR' or
             'PRARE'       or
             'PRARE_UOM'   or
             'FOVRR_PRARE'.
          <S_FCAT>-NO_OUT = ABAP_TRUE.

        when 'DESDO'            or
             'DESDO_LINK_ICON'  or
             'DESDO_LINK_DESCR'.
          <S_FCAT>-NO_OUT = ABAP_TRUE.

        when 'DESDD'.

        when 'FOVRR_DESDD'.
          <S_FCAT>-NO_OUT = ABAP_TRUE.

        when 'NODDG' or
             'NOACC' or
             'NOATC'.
          <S_FCAT>-NO_OUT = ABAP_TRUE.

      endcase.

***----------------------------------------------------------------------------
***   Set Position for each Field
*      move 1 to LF_COLPOS.
*      if <S_FCAT>-FIELDNAME eq 'MATNR'.           <S_FCAT>-COL_POS = LF_COLPOS.  endif.
*      add 1 to LF_COLPOS.
*      if <S_FCAT>-FIELDNAME eq 'MATNR_DESCR'.     <S_FCAT>-COL_POS = LF_COLPOS.  endif.
    endloop.

    sort RT_FCAT by COL_POS.

  endmethod.
  method GET_GRID_DATA.

    data: LS_INPLIN_GRID type ZVCXI_P1SS_S_INPLIN_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY,
                   <T_STYL> type          LVC_T_STYL.


***--------------------------------------------------------------------------------------
*** Dereferencing of Data Reference
    assign IR_DATA->* to <T_DATA>.

***--------------------------------------------------------------------------------------
*** Add Lines based on Flute Structure
    ME->R_PR_INLPR->GET_FLUTE( importing ET_FSTRUCT = data(LT_FSTRUCT) ).
    loop at LT_FSTRUCT into data(LS_FSTRUCT).
      append initial line to <T_DATA> assigning <S_DATA>.
      move-corresponding value ZVCXI_P1SS_S_INPLIN_GRID( POSID = LS_FSTRUCT-SEQNR
                                                         BPAID = LS_FSTRUCT-BPAID
                                                         FINPR = switch #( LS_FSTRUCT-OBLIG when ABAP_FALSE then ABAP_UNDEFINED )
                                                       ) to <S_DATA>.
    endloop.

*** Enrich with defined Inline Printed Liners
    loop at ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_P1SS_PR_INPLIN=>C_IPRVT_P1_INPLIN
                                   IF_INUSE  = ABAP_TRUE ) into data(LR_GATE).
      loop at <T_DATA> assigning <S_DATA>.
        LS_INPLIN_GRID = corresponding #( <S_DATA> ).
        check LS_INPLIN_GRID-BPAID = cast ZCL_VCXI_P1SS_PR_INPLIN( LR_GATE->R_CLSPR )->GET_BPAID( ).

        LS_INPLIN_GRID-GATKY  = LR_GATE->F_GATKY.
        LS_INPLIN_GRID-R_GATE = LR_GATE.
        LS_INPLIN_GRID-FINPR  = ABAP_TRUE.
        <S_DATA> = corresponding #( base ( <S_DATA> ) LS_INPLIN_GRID ).

***     Get Visualization Data
        ME->GET_INPLIN_VIS( exporting IR_GATE = LR_GATE
                            changing  CS_DATA = <S_DATA> ).
      endloop.
    endloop.

*** Update Style
    data(LS_LAYOUT) = ME->GET_LAYOUT( ).
    if LS_LAYOUT-STYLEFNAME is not initial.
      loop at <T_DATA> assigning <S_DATA>.
        LS_INPLIN_GRID = corresponding #( <S_DATA> ).
***     Set Style Details
        assign component LS_LAYOUT-STYLEFNAME of structure <S_DATA> to <T_STYL>.
        if SY-SUBRC eq 0.
          ME->CHANGE_STYLE_INPLIN( exporting IR_GATE = LS_INPLIN_GRID-R_GATE
                                             IS_DATA = <S_DATA>
                                    changing CT_STYL = <T_STYL> ).
***       Call DVC Servcie - Modify Style
          ZCL_VCXI_XCDR_SERVICE=>MODIFY_STYLE( exporting IR_GATE = LS_INPLIN_GRID-R_GATE
                                               changing  CT_STYL = <T_STYL> ).
        endif.
      endloop.
    endif.

  endmethod.
  method GET_INPLIN_VIS.

    data: LS_INPLIN_VIS type ZVCXI_P1SS_S_INPLIN_GRID.
    data: LR_PR_INPLIN  type ref to ZCL_VCXI_P1SS_PR_INPLIN.


***--------------------------------------------------------------------------------------
*** Get PR Class
    try.
        move IR_GATE->R_CLSPR ?to LR_PR_INPLIN.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.
    check LR_PR_INPLIN is bound.

*** "Cast" generic structure to Vis Structure
    move-corresponding CS_DATA to LS_INPLIN_VIS.

***--------------------------------------------------------------------------------------
*** Print Type
    LS_INPLIN_VIS-TPRIN = LR_PR_INPLIN->ZIF_VCXI_PXSS_PRINT~GET_TPRIN( ).

*** Print Side
    LS_INPLIN_VIS-PRSID = LR_PR_INPLIN->GET_PRSID( ).

*** Design Document
    LS_INPLIN_VIS-DESDO = LR_PR_INPLIN->ZIF_VCXI_PXSS_PRINT~GET_DESDO( importing EF_LINK_ICON  = LS_INPLIN_VIS-DESDO_LINK_ICON
                                                                                 EF_LINK_DESCR = LS_INPLIN_VIS-DESDO_LINK_DESCR ).
*** Design Document Description
    LS_INPLIN_VIS-DESDD = LR_PR_INPLIN->ZIF_VCXI_PXSS_PRINT~GET_DESDD( importing EF_FOVRR = LS_INPLIN_VIS-FOVRR_DESDD ).

***--------------------------------------------------------------------------------------
*** "Cast" Vis Structure back to generic structure
    move-corresponding LS_INPLIN_VIS to CS_DATA.

  endmethod.
  method HANDLE_DATA_CHANGED_FINISHED.

    data: LS_INPLIN_GRID type ZVCXI_P1SS_S_INPLIN_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    check E_MODIFIED eq ABAP_TRUE.

    try.
        SUPER->HANDLE_DATA_CHANGED_FINISHED( E_MODIFIED    = E_MODIFIED
                                             ET_GOOD_CELLS = ET_GOOD_CELLS ).

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.
          move-corresponding <S_DATA> to LS_INPLIN_GRID.

          check LS_INPLIN_GRID-R_GATE is bound and
                LS_INPLIN_GRID-R_GATE->F_FREED is initial.

***       Set Values to PR Class
          ME->SET_INPLIN_VIS( IR_GATE = LS_INPLIN_GRID-R_GATE
                              IS_DATA = <S_DATA> ).
        endloop.

        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method HANDLE_DOUBLE_CLICK.

    data: LS_INPLIN_GRID type ZVCXI_P1SS_S_INPLIN_GRID.
    field-symbols: <T_DATA>  type standard table.


    try.
***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        check LINE_EXISTS( <T_DATA>[ E_ROW-INDEX ] ).
        LS_INPLIN_GRID = corresponding #( <T_DATA>[ E_ROW-INDEX ] ).

***     Check Gate is bound and Provider has an own UI
        check LS_INPLIN_GRID-R_GATE is bound and
              LS_INPLIN_GRID-R_GATE->GET_CLSUI( ) is not initial.
        ME->R_UIGATE->OPEN_SUBSCREEN( IR_GATE = LS_INPLIN_GRID-R_GATE ).

***     Expand and select in Tree
        ME->R_UIGATE->EXPAND_TREE_NODE( IF_GATKY = LS_INPLIN_GRID-R_GATE->F_GATKY ).
        ME->R_UIGATE->SELECT_TREE_NODE( IF_GATKY = LS_INPLIN_GRID-R_GATE->F_GATKY ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_HOTSPOT_CLICK.

    data: LS_INPLIN_GRID type ZVCXI_P1SS_S_INPLIN_GRID.
    field-symbols: <T_DATA> type standard table,
                   <S_DATA> type          ANY.

    try.

***     Dereferencing of Data Reference
        assign ME->R_DATA->* to <T_DATA>.

        loop at <T_DATA> assigning <S_DATA>.
          check SY-TABIX  eq E_ROW_ID.

          LS_INPLIN_GRID = corresponding #( <S_DATA> ).


          case E_COLUMN_ID-FIELDNAME.
            when 'FINPR'.   "Inline Printing Flag
              if LS_INPLIN_GRID-R_GATE is bound and
                 LS_INPLIN_GRID-R_GATE->F_FREED is initial.
                LS_INPLIN_GRID-R_GATE->DO_FREE( ).
              else.
                ME->R_PR_INLPR->ADD_PRVDR_INPLIN( IF_BPAID = LS_INPLIN_GRID-BPAID ).
              endif.

          endcase.
        endloop.

        ME->R_GATE->RAISE_EVENTS( ).

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

*** Request Refresh for ALV
    move ABAP_TRUE to ME->F_REFRESH_REQ.

  endmethod.
  method SET_EVENT.

    SUPER->SET_EVENT( ).

*** Set Hotspot
    set handler ME->HANDLE_HOTSPOT_CLICK       for ME->R_GRID.

*** Set Double Click
    set handler ME->HANDLE_DOUBLE_CLICK        for ME->R_GRID.

  endmethod.
  method SET_INPLIN_VIS.

    data: LS_INPLIN_VIS_OLD type ZVCXI_P1SS_S_INPLIN_VIS,
          LS_INPLIN_VIS_NEW type ZVCXI_P1SS_S_INPLIN_VIS.
    data: LR_PR_INPLIN  type ref to ZCL_VCXI_P1SS_PR_INPLIN.


***--------------------------------------------------------------------------------------
*** Get PR Class
    check IR_GATE->R_CLSPR is instance of ZCL_VCXI_P1SS_PR_INPLIN.
    LR_PR_INPLIN ?= IR_GATE->R_CLSPR.
    check LR_PR_INPLIN is bound.

*** Get old Values
    ME->GET_INPLIN_VIS( exporting IR_GATE = IR_GATE
                        changing  CS_DATA = LS_INPLIN_VIS_OLD ).
*** Get new Values
    move-corresponding IS_DATA to LS_INPLIN_VIS_NEW.

***--------------------------------------------------------------------------------------
*** Set Print Type
    if LS_INPLIN_VIS_NEW-TPRIN ne LS_INPLIN_VIS_OLD-TPRIN.
      LR_PR_INPLIN->SET_TPRIN( IF_TPRIN = LS_INPLIN_VIS_NEW-TPRIN
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Print Side
    if LS_INPLIN_VIS_NEW-PRSID ne LS_INPLIN_VIS_OLD-PRSID.
      LR_PR_INPLIN->SET_PRSID( IF_PRSID = LS_INPLIN_VIS_NEW-PRSID
                               IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
