
class ZCL_VCXI_XCSP_PR_MFSI definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MF
  abstract
  create public .

public section.

  interfaces ZIF_VCXI_XCSP_MFI .
  interfaces ZIF_VCXI_XCSP_MFS .
  interfaces ZIF_VCXI_XCSP_MFSI .

  aliases C_IPRVT_XCS_MFI
    for ZIF_VCXI_XCSP_MFI~C_IPRVT_XCS_MFI .
  aliases C_PARID_MFICF
    for ZIF_VCXI_XCSP_MFI~C_PARID_MFICF .
  aliases C_PARID_MFICP
    for ZIF_VCXI_XCSP_MFI~C_PARID_MFICP .
  aliases C_PARID_MFISP
    for ZIF_VCXI_XCSP_MFI~C_PARID_MFISP .
  aliases C_PARID_NEXTL
    for ZIF_VCXI_XCSP_MFSI~C_PARID_NEXTL .
  aliases CALC_CONSU
    for ZIF_VCXI_XCSP_MFI~CALC_CONSU .
  aliases GET_CSPLIT
    for ZIF_VCXI_XCSP_MFI~GET_CSPLIT .
  aliases GET_DISST
    for ZIF_VCXI_XCSP_MFS~GET_DISST .
  aliases GET_KAUSF
    for ZIF_VCXI_XCSP_MFI~GET_KAUSF .
  aliases GET_MFICF
    for ZIF_VCXI_XCSP_MFI~GET_MFICF .
  aliases GET_MFICP
    for ZIF_VCXI_XCSP_MFI~GET_MFICP .
  aliases GET_MFISP
    for ZIF_VCXI_XCSP_MFI~GET_MFISP .
  aliases GET_NEXTL
    for ZIF_VCXI_XCSP_MFSI~GET_NEXTL .
  aliases SET_DISST
    for ZIF_VCXI_XCSP_MFS~SET_DISST .
  aliases SET_MFICF
    for ZIF_VCXI_XCSP_MFI~SET_MFICF .
  aliases SET_MFICP
    for ZIF_VCXI_XCSP_MFI~SET_MFICP .
  aliases SET_MFISP
    for ZIF_VCXI_XCSP_MFI~SET_MFISP .
  aliases SET_NEXTL
    for ZIF_VCXI_XCSP_MFSI~SET_NEXTL .

  constants C_PARID_SANKA type /VCXI/VKS_PARID value 'ZVCXI_XC_SANKA' ##NO_TEXT.

  methods GET_SANKA
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_SANKA) type SANKA
    raising
      /VCXI/CX_CKX .
  methods GET_SOBSL
    exporting
      !EF_SOBSL type SOBSL
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
protected section.

  aliases C_IEVNT_I_INIT_MFICF
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_I_INIT_MFICF .
  aliases C_IEVNT_I_INIT_MFISP
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_I_INIT_MFISP .
  aliases C_IEVNT_I_REQUEST_BACKWARD
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_I_REQUEST_BACKWARD .
  aliases C_IEVNT_I_REQUEST_FORWARD
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_I_REQUEST_FORWARD .
  aliases C_IEVNT_I_REQ_OP_FORWARD
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_I_REQ_OP_FORWARD .
  aliases C_IEVNT_O_BACKWARD_REQUESTED
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_O_BACKWARD_REQUESTED .
  aliases C_IEVNT_O_DISST_CHANGED
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_O_DISST_CHANGED .
  aliases C_IEVNT_O_FORWARD_REQUESTED
    for ZIF_VCXI_XCSP_MFS~C_IEVNT_O_FORWARD_REQUESTED .
  aliases C_IEVNT_O_MFICF_CHANGED
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_O_MFICF_CHANGED .
  aliases C_IEVNT_O_MFISP_CHANGED
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_O_MFISP_CHANGED .
  aliases C_IEVNT_O_NEXTL_CHANGED
    for ZIF_VCXI_XCSP_MFSI~C_IEVNT_O_NEXTL_CHANGED .
  aliases C_IEVNT_O_OP_FORWARD_REQ
    for ZIF_VCXI_XCSP_MFI~C_IEVNT_O_OP_FORWARD_REQ .
  aliases C_PARID_DISST
    for ZIF_VCXI_XCSP_MFS~C_PARID_DISST .
  aliases C_PARID_KAUSF
    for ZIF_VCXI_XCSP_MFI~C_PARID_KAUSF .
  aliases HANDLE_INIT_MFICF
    for ZIF_VCXI_XCSP_MFI~HANDLE_INIT_MFICF .
  aliases HANDLE_INIT_MFISP
    for ZIF_VCXI_XCSP_MFI~HANDLE_INIT_MFISP .

  constants C_PARID_SOBSL type /VCXI/VKS_PARID value 'ZVCXI_XC_SOBSL' ##NO_TEXT.

  methods CONV_TO_CONSU
  abstract
    importing
      !IS_MQTYI type ZVCXI_XCSP_S_MQTYI
    returning
      value(RS_CONSU) type ZVCXI_XCSP_S_CONSU
    raising
      /VCXI/CX_CKX .
  methods SET_SOBSL
    importing
      !IF_SOBSL type SOBSL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_KAUSF
    importing
      !IS_KAUSF type ZVCXI_XCSP_S_KAUSF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SANKA
    importing
      !IF_SANKA type SANKA optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_XCSP_PR_MFSI definition
class ZCL_VCXI_XCSP_PR_MFSI implementation.
  method GET_SANKA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SANKA ).
    move LS_PARAM-ATWRT to RF_SANKA.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SOBSL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SOBSL ).
    move LS_PARAM-ATWRT to EF_SOBSL.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_REQUEST_BACKWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BACKWARD_REQUESTED ).
    when C_IEVNT_I_REQUEST_FORWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FORWARD_REQUESTED ).
    when C_IEVNT_I_REQ_OP_FORWARD.
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_OP_FORWARD_REQ ).

    when C_IEVNT_I_INIT_MFICF.
      ME->HANDLE_INIT_MFICF( ).
    when C_IEVNT_I_INIT_MFISP.
      ME->HANDLE_INIT_MFISP( ).
  endcase.

endmethod.
method SET_KAUSF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_KAUSF ).

  move IS_KAUSF-KAUSF                      to LS_PARAM-ATFLV.
  move IS_KAUSF-KAUSF_UOM                  to LS_PARAM-UNIT.
  move IF_SETBY                            to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
  method SET_SANKA.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SANKA ).

    if IF_SANKA is supplied.
      LS_PARAM-ATWRT = IF_SANKA.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-ATWRT.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
  method SET_SOBSL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SOBSL ).

    move IF_SOBSL to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  endmethod.
method ZIF_VCXI_XCSP_MFI~CALC_CONSU.

  constants: LC_MFISP     type ZVCXI_XCSP_MFISP value 100.
  data:      LF_MFISP_DIF type ZVCXI_XCSP_MFISP,
             LF_MFICF     type ZVCXI_XCSP_MFICF,
             LF_MFICP     type ZVCXI_XCSP_MFICP.
  data:      LS_MQTYI     type ZVCXI_XCSP_S_MQTYI,
             LS_MSSWA     type /VCXI/VSM_S_MSSWA,
             LS_CONSU     type ZVCXI_XCSP_S_CONSU,
             LS_MFISP     type ZVCXI_XCSP_S_MFISP.

  move IS_MQTYI to LS_MQTYI.

*** Get Setup %
  LS_MFISP = ME->GET_MFISP( ).

*** if Setup is not initial or ne 100% -> Adjust SetupWaste
  if IS_MSSWA-MSSWA_UOM is not initial and
     LS_MFISP-MFISP_UOM is not initial.

    LF_MFISP_DIF = LC_MFISP - LS_MFISP-MFISP.

*** Calculate the right Setup Waste
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = IS_MSSWA-MSSWA
                                                        IF_CALCV_UOM_1 = IS_MSSWA-MSSWA_UOM
                                                        IF_CALCV_2     = LF_MFISP_DIF
                                                        IF_CALCV_UOM_2 = LS_MFISP-MFISP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                        IF_UOM         = IS_MSSWA-MSSWA_UOM
                                              importing EF_CALCV       = LS_MSSWA-MSSWA
                                                        EF_CALCV_UOM   = LS_MSSWA-MSSWA_UOM ).


*** Subtract Setup Waste from Machine Quantity In
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_MQTYI-MQTYI
                                                        IF_CALCV_UOM_1 = LS_MQTYI-MQTYI_UOM
                                                        IF_CALCV_2     = LS_MSSWA-MSSWA
                                                        IF_CALCV_UOM_2 = LS_MSSWA-MSSWA_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                        IF_UOM         = LS_MQTYI-MQTYI_UOM
                                              importing EF_CALCV       = LS_MQTYI-MQTYI
                                                        EF_CALCV_UOM   = LS_MQTYI-MQTYI_UOM ).

  endif.

*** Apply Consumption Factor (per)
  LF_MFICF = ME->GET_MFICF( ).
  LF_MFICP = ME->GET_MFICP( ).
  if LF_MFICP ne 0.
    LS_MQTYI-MQTYI = LS_MQTYI-MQTYI * LF_MFICF / LF_MFICP.
  else.
    clear LS_MQTYI-MQTYI.
  endif.

*** Convert Quantity to Consumption UOM
  LS_CONSU = ME->CONV_TO_CONSU( IS_MQTYI = LS_MQTYI ).

*** Set Consumption
  ME->SET_CONSU( IS_CONSU = LS_CONSU ).

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_CONSU.

  RS_CONSU = ME->GET_CONSU( ).

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_CSPLIT.

  data:  LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_CSPLIT_MGR  type ref to ZCL_VCXI_XCSP_PR_CSPLIT_MGR.

*** Get Material Flow Manager if it is missing
  if ME->R_PR_MFMGR is not bound.
    ME->HANDLE_INIT_MFMGR( ).
  endif.

***--------------------------------------------------------------------------------------
*** Get Manager
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_CSPLIT_MGR=>C_IPRVT_XCS_CSPLIT_MGR
                                   IF_INUSE = ABAP_TRUE ).
  if LT_GATE is initial.
***--------------------------------------------------------------------------------------
*** Get via Operation
    ME->R_PR_MFMGR->GET_CSPLIT( importing EF_ICSPA = EF_ICSPA
                                          ES_DCSPL = ES_DCSPL
                                          EF_COMPF = EF_COMPF ).

***--------------------------------------------------------------------------------------
  else.
    if lines( LT_GATE ) gt 1.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.
    read table LT_GATE into LR_GATE index 1.
    move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT_MGR.

*** Get ID of active Cost Split
    move LR_PR_CSPLIT_MGR->GET_ICSPA( ) to EF_ICSPA.
    check EF_ICSPA is not initial.

*** Get active Cost Splits
    move LR_PR_CSPLIT_MGR->GET_DCSPL( ) to ES_DCSPL.

*** Get Component Factor
    move LR_PR_CSPLIT_MGR->GET_COMPF( ) to EF_COMPF.
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_KAUSF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_XCSP_MFI~C_PARID_KAUSF ).
  move LS_PARAM-ATFLV to RS_KAUSF-KAUSF.
  move LS_PARAM-UNIT  to RS_KAUSF-KAUSF_UOM.

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_MFICF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICF ).
  move LS_PARAM-ATFLV to RF_MFICF.

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_MFICP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICP ).
  move LS_PARAM-ATFLV to RF_MFICP.

endmethod.
method ZIF_VCXI_XCSP_MFI~GET_MFISP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFISP ).
  move LS_PARAM-ATFLV to RS_MFISP-MFISP.
  move LS_PARAM-UNIT  to RS_MFISP-MFISP_UOM.

endmethod.
method ZIF_VCXI_XCSP_MFI~HANDLE_INIT_MFICF.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Initialize Consumption Factor
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICF ).

  if LS_PARAM-ATFLV is initial and
     LS_PARAM-SETBY is initial.
    ME->SET_MFICF( IF_MFICF = 1
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endif.

***----------------------------------------------------------------------------
*** Initialize Consumption Factor Per
  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICP ).

  if LS_PARAM-ATFLV is initial and
     LS_PARAM-SETBY is initial.
    ME->SET_MFICP( IF_MFICP = 1
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFI~HANDLE_INIT_MFISP.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM,
         LS_MFISP   type ZVCXI_XCSP_S_MFISP.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFISP ).

  if LS_PARAM-ATFLV is initial and
     LS_PARAM-SETBY is initial.
    LS_MFISP-MFISP = 100.
    LS_MFISP-MFISP_UOM = LS_PARAM-UNIT.

    ME->SET_MFISP( IS_MFISP = LS_MFISP
                   IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFI~SET_MFICF.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICF ).

  move IF_MFICF to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MFICF_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFI~SET_MFICP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFICP ).

  move IF_MFICP to LS_PARAM-ATFLV.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MFICF_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFI~SET_MFISP.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MFISP ).

  move IS_MFISP-MFISP     to LS_PARAM-ATFLV.
  move IS_MFISP-MFISP_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MFISP_CHANGED ).
  endif.

endmethod.
  method ZIF_VCXI_XCSP_MFSI~DO_FORWARD.

    data: LF_WERKS_MFSI type WERKS_D,
          LF_WERKS_MFSO type WERKS_D,
          LF_SOBSL      type SOBSL.


*** Get Manager if it is missing
    if ME->R_PR_MFMGR is not bound.
      ME->HANDLE_INIT_MFMGR( ).
    endif.

***--------------------------------------------------------------------------------------
*** Foward Component Scrap
    if IR_MFSO is bound.
      ME->SET_KAUSF( IS_KAUSF = IR_MFSO->GET_KAUSF( ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Determin Special Procurement Type
    if ME->ZIF_VCXI_XCSP_MFSI~GET_NEXTL( ) eq ABAP_TRUE.
      if ME->R_PR_MFMGR is bound.
        move ME->R_PR_MFMGR->GET_WERKS( ) to LF_WERKS_MFSI.
      endif.
      if IR_MFSO is bound.
        move IR_MFSO->ZIF_VCXI_XCSP_MFO~GET_WERKS( ) to LF_WERKS_MFSO.
      endif.

***   Search for Special Procurement Type
      if LF_WERKS_MFSI ne LF_WERKS_MFSO.
        LF_SOBSL = ZCL_VCXI_XCSP_PR_RELOCATE=>DETERMINE_SOBSL( IF_WERKS_MFSI = LF_WERKS_MFSI
                                                               IF_WERKS_MFSO = LF_WERKS_MFSO ).
      endif.

***   Set identified Special Procurement Type
      ME->SET_SOBSL( IF_SOBSL = LF_SOBSL ).
    else.
***   Initialize Special Procurement Type
      ME->SET_SOBSL( IF_SOBSL = SPACE
                     IF_SETBY = SPACE ).
    endif.

***--------------------------------------------------------------------------------------
*** Initialize Costing relevant Indication, so only the first MFO will be costing relevant.
*** Thereby the other MFSIs don't cause issus during costing if all costs are exploded by
*** the first MFSI.
    if IR_MFSO is instance of ZCL_VCXI_XCSP_PR_MFSO.
      if cast ZCL_VCXI_XCSP_PR_MFSO( IR_MFSO )->IS_FIRST_MFO( ) eq ABAP_TRUE.
        ME->SET_SANKA( IF_SANKA = ABAP_TRUE ).
      else.
        ME->SET_SANKA( IF_SANKA = ABAP_FALSE ).
      endif.
    else.
      ME->SET_SANKA( IF_SETBY = SPACE ).
    endif.

  endmethod.
method ZIF_VCXI_XCSP_MFSI~GET_NEXTL.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NEXTL ).
  move LS_PARAM-ATWRT to RF_NEXTL.

endmethod.
method ZIF_VCXI_XCSP_MFSI~SET_NEXTL.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NEXTL ).

  move IF_NEXTL to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NEXTL_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFS~GET_DISST.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISST ).
  move LS_PARAM-ATFLV to RF_DISST.

endmethod.
method ZIF_VCXI_XCSP_MFS~GET_MATNR.

  RF_MATNR = ME->GET_MATNR( ).

endmethod.
method ZIF_VCXI_XCSP_MFS~SET_DISST.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_DISST ).

  clear LS_PARAM-ATWRT.
  move IF_DISST                            to LS_PARAM-ATFLV.
  move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC    to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSP_MFS~C_IEVNT_O_DISST_CHANGED ).
  endif.

endmethod.
method ZIF_VCXI_XCSP_MFS~SET_MATNR.

  ME->SET_MATNR( IF_MATNR = IF_MATNR ).

endmethod.
