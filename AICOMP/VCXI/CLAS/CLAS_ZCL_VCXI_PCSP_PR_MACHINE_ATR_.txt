
class ZCL_VCXI_PCSP_PR_MACHINE_ATR definition
  public
  inheriting from ZCL_VCXI_XCSP_PR_MACHINE
  create public .

public section.

  interfaces ZIF_VCXI_PCSP_OP_FLUTE .

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_MFI_AREADIM
    returning
      value(RS_AREADIM) type ZVCXI_P0SP_S_AREADIM
    raising
      /VCXI/CX_CKX .
  methods GET_MFO_RODIM
    returning
      value(RS_RODIM) type ZVCXI_PCSP_S_RODIM
    raising
      /VCXI/CX_CKX .

  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI
    redefinition .
  methods ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO
    redefinition .
protected section.

  constants C_IMATY_QUANTITY type /VCXI/VSMC_IMATY value 'PC_MA_QUANTITY' ##NO_TEXT.
  constants C_IEVNT_I_FORWARD_FLUTE type /VCXI/VKSC_IEVNT value 'FORWARD_FLUTE' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_RODIM type /VCXI/VKSC_IEVNT value 'RECALC_RODIM' ##NO_TEXT.

  methods DET_FLUTE
    returning
      value(RF_FLUTE) type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods GET_CONV_ATR
    returning
      value(RR_CONV_ATR) type ref to ZIF_VCXI_PCSP_CONV_ATR
    raising
      /VCXI/CX_CKX .
  methods HANDLE_FORWARD_FLUTE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_RODIM
    raising
      /VCXI/CX_CKX .
  methods SET_FLUTE
    importing
      !IF_FLUTE type ZVCXI_PCS_FLUTE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MFO_FLUTE
    importing
      !IF_FLUTE type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods SET_MFO_RODIM
    importing
      !IT_RODIM type ZVCXI_PCSP_TT_RODIM
    raising
      /VCXI/CX_CKX .

  methods GET_RRVAL
    redefinition .
  methods GET_RTE_SMVAL
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSP_PR_MACHINE_ATR definition
class ZCL_VCXI_PCSP_PR_MACHINE_ATR implementation.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

*** Set Dimension-Depending Parameter IDS's
  move C_PARID_MQTYI_A to ME->F_PARID_MQTYI.
  move C_PARID_MQTYO_P to ME->F_PARID_MQTYO.
  move C_PARID_MSRWA_A to ME->F_PARID_MSRWA.
  move C_PARID_MSSWA_A to ME->F_PARID_MSSWA.
  move 'SURFAC'        to ME->F_DIMNI.
  move 'AAAADL'        to ME->F_DIMNO.

endmethod.
method DET_FLUTE.

  data: LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
        LR_ADJ_FLUTE type ref to ZIF_VCXI_PCSP_ADJ_FLUTE.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Flute of Corrugation Addon
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_PCSP_ADJ_FLUTE=>C_IPRVT_PC_ADJ_FLUTE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_ADJ_FLUTE.
        check LR_ADJ_FLUTE is bound.
        LR_ADJ_FLUTE->ADJ_FLUTE( changing CF_FLUTE = RF_FLUTE ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_CONV_ATR.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_CONV_ATR  type ref to ZIF_VCXI_PCSP_CONV_ATR.

  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_PCSP_CONV_ATR=>C_IPRVT_PC_CONV_ATR
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_CONV_ATR.
        check LR_CONV_ATR is bound.

        move LR_CONV_ATR to RR_CONV_ATR.
        exit.

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_MFI_AREADIM.

  data:  LS_RODIM     type        ZVCXI_PCSP_S_RODIM.
  data:  LT_RODIM     type        ZVCXI_PCSP_TT_RODIM,
         LT_AREADIM   type        ZVCXI_P0SP_TT_AREADIM.
  data:  LR_CONV_ATR  type ref to ZIF_VCXI_PCSP_CONV_ATR.

*** Get Roll Out
  LS_RODIM = ME->GET_MFO_RODIM( ).

*** Get Area to Roll Conversion
  LR_CONV_ATR = ME->GET_CONV_ATR( ).

***------------------------------------------------------------------------------------------------
  if LR_CONV_ATR is not bound.
*** Convert it To Machine Quantity In
    if LS_RODIM-ROLEN is not initial and
       LS_RODIM-ROWID is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_RODIM-ROLEN
                                                          IF_CALCV_UOM_1 = LS_RODIM-ROLEN_UOM
                                                          IF_CALCV_2     = LS_RODIM-ROWID
                                                          IF_CALCV_UOM_2 = LS_RODIM-ROWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                importing EF_CALCV       = RS_AREADIM-PCARE
                                                          EF_CALCV_UOM   = RS_AREADIM-PCARE_UOM ).
      move LS_RODIM-PCUPS to RS_AREADIM-PCUPS.
    endif.

***------------------------------------------------------------------------------------------------
  else.
    append LS_RODIM to LT_RODIM.
    LT_AREADIM = LR_CONV_ATR->CONV_ROLL_TO_AREA( IT_RODIM = LT_RODIM ).
    read table LT_AREADIM into RS_AREADIM index 1.
  endif.


endmethod.
method GET_MFO_RODIM.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_MFR       type ref to ZIF_VCXI_PCSP_MFR.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow Out
  LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).
  if lines( LT_GATE ) ne 1.
*** No Material Flow Out available.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCSP'
        IF_MSGNO = '209' ).
  endif.

*** Get Dimensions of first
  read table LT_GATE into LR_GATE index 1.
  try.
      move LR_GATE->R_CLSPR ?to LR_MFR.
      check LR_MFR is bound.
      RS_RODIM = LR_MFR->GET_RODIM( ).
    catch CX_SY_MOVE_CAST_ERROR.
      exit.
  endtry.

endmethod.
method GET_RRVAL.

  SUPER->GET_RRVAL( ).

  data: LF_FLUTE         type        ZVCXI_PCS_FLUTE.
  data: LT_GATE          type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE          type ref to /VCXI/CL_VKSR_GATE,
        LR_ADJ_FLUTE type ref to ZIF_VCXI_PCSP_ADJ_FLUTE.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Flute of Corrugation Addon
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_PCSP_ADJ_FLUTE=>C_IPRVT_PC_ADJ_FLUTE
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_ADJ_FLUTE.
        check LR_ADJ_FLUTE is bound.
        LR_ADJ_FLUTE->ADJ_FLUTE( changing CF_FLUTE = LF_FLUTE ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

*** Return Flute Type
  RF_RRVAL = LF_FLUTE.

endmethod.
method GET_RTE_SMVAL.

  data:          LF_GMATY          type        /VCXI/VSMC_GMATY.
  field-symbols: <S_RTE_SMVAL>     type        /VCXI/VSMR_S_RTE_SMVAL,
                 <S_AVVAL>         type        /VCXI/VSMR_S_RTE_RANGE_AVVAL.

*** Get Super
  RT_RTE_SMVAL = SUPER->GET_RTE_SMVAL( ).

  check ME->R_RTE_CMACH          is bound and
        ME->R_RTE_CMACH->R_MTYPE is bound.

***----------------------------------------------------------------------------
*** Aspect - Quantity
  try.

***   Add Aspect only if it is found.
      LF_GMATY = ME->R_RTE_CMACH->R_MTYPE->GET_GMATY_BY_IMATY( IF_IMATY = C_IMATY_QUANTITY
                                                               IF_MMATY = /VCXI/CL_VSMC_MTYPE=>C_MMATY_VALUE ).

***   Set the Aspect for Lot Size
      append initial line to RT_RTE_SMVAL assigning <S_RTE_SMVAL>.
      move LF_GMATY       to <S_RTE_SMVAL>-GMATY.
      append initial line to <S_RTE_SMVAL>-I_AVVAL assigning <S_AVVAL>.
      move 'I'            to <S_AVVAL>-SIGN.
      move 'EQ'           to <S_AVVAL>-OPTION.
      move ''             to <S_AVVAL>-LOW.

    catch /VCXI/CX_CKX.
  endtry.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_RECALC_RODIM.
      ME->HANDLE_RECALC_RODIM( ).

    when C_IEVNT_I_FORWARD_FLUTE.
      ME->HANDLE_FORWARD_FLUTE( ).
  endcase.

endmethod.
  method HANDLE_FORWARD_FLUTE.

    data: LF_FLUTE         type        ZVCXI_PCS_FLUTE.


*** Determine Flute based on Add-ons
    LF_FLUTE = ME->DET_FLUTE( ).

*** Set Flute to Parameter
    ME->SET_FLUTE( IF_FLUTE = LF_FLUTE ).

*** Set Flute on Material Flow
    ME->SET_MFO_FLUTE( IF_FLUTE = LF_FLUTE ).

  endmethod.
method HANDLE_RECALC_RODIM.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE,
        LT_RODIM     type        ZVCXI_PCSP_TT_RODIM.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_ADJ_RODIM type ref to ZIF_VCXI_PCSP_ADJ_RODIM.

  if ME->R_PR_MFMGR is not bound.
    ME->ZIF_VCXI_XCSP_OPERATION~HANDLE_INIT_PR_MFMGR( ).
  endif.
  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get all adjusting Addon's and adjust the Roll Dimensions
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZIF_VCXI_PCSP_ADJ_RODIM=>C_IPRVT_PC_ADJ_RODIM
                                   IF_INUSE  = ABAP_TRUE
                                   IF_SORTED = ABAP_TRUE ).
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_ADJ_RODIM.
        check LR_ADJ_RODIM is bound.
        LR_ADJ_RODIM->CALC_RODIM_OUT( changing CT_RODIM = LT_RODIM ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

***------------------------------------------------------------------
*** Set new Roll Dimension of Material Flow
  ME->SET_MFO_RODIM( IT_RODIM = LT_RODIM ).

endmethod.
  method SET_FLUTE.

    data:  LF_CHANGED  type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PCSP_OP_FLUTE~C_PARID_FLUTE ).

    LS_PARAM-ATWRT = IF_FLUTE.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PCSP_OP_FLUTE~C_IEVNT_O_FLUTE_CHANGED ).
    endif.

  endmethod.
method SET_MFO_FLUTE.

  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_PR_MFSO_R type ref to ZCL_VCXI_PCSP_PR_MFSO_R.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow Out
  LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).

*** Set Flute to all
  loop at LT_GATE into LR_GATE.
    try.
        move LR_GATE->R_CLSPR ?to LR_PR_MFSO_R.
        check LR_PR_MFSO_R is bound.
        LR_PR_MFSO_R->SET_FLUTE( IF_FLUTE = IF_FLUTE ).

      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method SET_MFO_RODIM.

  data: LS_RODIM     type        ZVCXI_PCSP_S_RODIM,
        LS_RODIM_OLD type        ZVCXI_PCSP_S_RODIM.
  data: LT_GATE      type        /VCXI/VKSR_TT_GATE.
  data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
        LR_MFR       type ref to ZIF_VCXI_PCSP_MFR.

  check ME->R_PR_MFMGR is bound.

***------------------------------------------------------------------
*** Get Material Flow Out
  LT_GATE = ME->R_PR_MFMGR->GET_MFO( ).
  if lines( LT_GATE ) ne lines( IT_RODIM ).
*** Requested Material Flow Out not available.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE(
        IF_MSGTY = 'E'
        IF_MSGID = 'ZVCXI_XCSP'
        IF_MSGNO = '211' ).
  endif.

*** Set Dimensions to first
  loop at LT_GATE into LR_GATE.
    clear LS_RODIM.
    read table IT_RODIM into LS_RODIM index SY-TABIX.
    try.
        move LR_GATE->R_CLSPR ?to LR_MFR.
        check LR_MFR is bound.
        move LR_MFR->GET_RODIM( ) to LS_RODIM_OLD.
        LR_MFR->SET_RODIM( IS_RODIM = LS_RODIM ).

***     Check if Conversion for Machine Quantity changed
        if LS_RODIM-ROLEN ne LS_RODIM_OLD-ROLEN or
           LS_RODIM-ROWID ne LS_RODIM_OLD-ROWID or
           LS_RODIM-PCUPS ne LS_RODIM_OLD-PCUPS.
***       Send Event
          ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MQTY_CONV_CHANGED ).
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
  method ZIF_VCXI_PCSP_OP_FLUTE~GET_FLUTE.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PCSP_OP_FLUTE~C_PARID_FLUTE ).
    RF_FLUTE = LS_PARAM-ATWRT.

  endmethod.
method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYI.

  data:  LS_RODIM     type        ZVCXI_PCSP_S_RODIM,
         LS_AREADIM   type        ZVCXI_P0SP_S_AREADIM.
  data:  LT_RODIM     type        ZVCXI_PCSP_TT_RODIM,
         LT_AREADIM   type        ZVCXI_P0SP_TT_AREADIM.
  data:  LR_CONV_ATR  type ref to ZIF_VCXI_PCSP_CONV_ATR.

***------------------------------------------------------------------------------------------------
*** Get PC Dimensions of Material Flow Out
  check ME->R_PR_MFMGR is bound.

*** Get Quantity to receive UOM
  RS_MQTYI = ME->GET_MQTYI( ).

*** No Quantity will always end in 0
  if IS_QTY-QTY eq 0.
    clear RS_MQTYI-MQTYI.
    exit.
  endif.

*** Get Roll Out
  LS_RODIM = ME->GET_MFO_RODIM( ).

*** Get Area to Roll Conversion
  LR_CONV_ATR = ME->GET_CONV_ATR( ).

***------------------------------------------------------------------------------------------------
  if LR_CONV_ATR is not bound.
*** Convert it To Machine Quantity In
    if LS_RODIM-ROLEN is not initial and
       LS_RODIM-ROWID is not initial.
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_RODIM-ROLEN
                                                          IF_CALCV_UOM_1 = LS_RODIM-ROLEN_UOM
                                                          IF_CALCV_2     = LS_RODIM-ROWID
                                                          IF_CALCV_UOM_2 = LS_RODIM-ROWID_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                          IF_UOM         = RS_MQTYI-MQTYI_UOM
                                                importing EF_CALCV       = LS_AREADIM-PCARE
                                                          EF_CALCV_UOM   = LS_AREADIM-PCARE_UOM ).
      move LS_RODIM-PCUPS to LS_AREADIM-PCUPS.
    endif.

***------------------------------------------------------------------------------------------------
  else.
    append LS_RODIM to LT_RODIM.
    LT_AREADIM = LR_CONV_ATR->CONV_ROLL_TO_AREA( IT_RODIM = LT_RODIM ).
    read table LT_AREADIM into LS_AREADIM index 1.
  endif.

***------------------------------------------------------------------------------------------------
*** Calculate
  if LS_AREADIM-PCUPS is not initial.
    RS_MQTYI-MQTYI     = ( IS_QTY-QTY * LS_RODIM-PCUPS ) * ( LS_AREADIM-PCARE / LS_AREADIM-PCUPS ).
    RS_MQTYI-MQTYI_UOM = LS_AREADIM-PCARE_UOM.
  else.
    RS_MQTYI-MQTYI     = 0.
  endif.

endmethod.
method ZIF_VCXI_XCSP_OPERATION~CONV_TO_MQTYO.

  data:  LS_RODIM     type        ZVCXI_PCSP_S_RODIM,
         LS_PCAREA    type        ZVCXI_XCSP_S_QTY.
  data:  LT_RODIM     type        ZVCXI_PCSP_TT_RODIM,
         LT_AREADIM   type        ZVCXI_P0SP_TT_AREADIM.
  data:  LR_CONV_ATR  type ref to ZIF_VCXI_PCSP_CONV_ATR.

*** Get Roll Dimensions of Material Flow Out
  check ME->R_PR_MFMGR is bound.

*** Get Quantity to receive UOM
  RS_MQTYO = ME->GET_MQTYO( ).

*** No Quantity will always end in 0
  if IS_QTY-QTY eq 0.
    clear RS_MQTYO-MQTYO.
    exit.
  endif.

*** Get Area to Roll Conversion
  LR_CONV_ATR = ME->GET_CONV_ATR( ).

***------------------------------------------------------------------------------------------------
  if LR_CONV_ATR is not bound.
*** Get Material Flow Out
    LS_RODIM = ME->GET_MFO_RODIM( ).
  else.
    LT_RODIM = LR_CONV_ATR->CONV_AREA_TO_ROLL( IT_AREADIM = LT_AREADIM ).
    read table LT_RODIM into LS_RODIM index 1.
  endif.

***------------------------------------------------------------------------------------------------
*** Convert it To Machine Quantity Out
  if LS_RODIM-PCUPS ne 0.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_RODIM-ROLEN
                                                        IF_CALCV_UOM_1 = LS_RODIM-ROLEN_UOM
                                                        IF_CALCV_2     = LS_RODIM-ROWID
                                                        IF_CALCV_UOM_2 = LS_RODIM-ROWID_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_MULTIPLY
                                                        IF_UOM         = IS_QTY-QTY_UOM
                                              importing EF_CALCV       = LS_PCAREA-QTY
                                                        EF_CALCV_UOM   = LS_PCAREA-QTY_UOM ).

    RS_MQTYO-MQTYO    = IS_QTY-QTY / LS_PCAREA-QTY * LS_RODIM-PCUPS.
  else.
    RS_MQTYO-MQTYO     = 0.
  endif.


*** Round Depending on PC Typ Out
  ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LS_RODIM-PCTYP
                                              changing CF_VALUE = RS_MQTYO-MQTYO ).

endmethod.
