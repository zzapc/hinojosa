
class ZCL_VCXI_XCS_NETGRAPH_JSON definition
  public
  create public .

public section.

  types:
    begin of YS_ATTRIBUTE,
        ICON   type STRING,
        LABEL  type STRING,
        VALUE  type STRING,
        STATUS type STRING,
      end of YS_ATTRIBUTE .
  types:
    begin of YS_NODE,
        KEY         type I,
        TITLE       type STRING,
        DESCRIPTION type STRING,
        ICON        type STRING,
        SHAPE       type STRING,
        STATUS      type STRING,
        WIDTH       type I,
        GROUP       type I,
        ATTRIBUTES  type table of YS_ATTRIBUTE with default key,
      end of YS_NODE .
  types:
    begin of YS_LINE,
        FROM          type I,
        TO            type I,
        ARROWPOSITION type STRING,
        TITLE         type STRING,
        STATUS        type STRING,
      end of YS_LINE .
  types:
    begin of YS_GROUP,
        KEY         type I,
        TITLE       type STRING,
        DESCRIPTION type STRING,
        ICON        type STRING,
        SHAPE       type STRING,
        STATUS      type STRING,
      end of YS_GROUP .
  types:
    YT_ATTRIBUTE type standard table of YS_ATTRIBUTE .
  types:
    YT_NODE type standard table of YS_NODE  with key KEY .
  types:
    YT_GROUP type standard table of YS_GROUP with key KEY .
  types:
    YT_LINE type standard table of YS_LINE with key FROM TO .
  types:
    begin of YS_DATA,
        NODES  type YT_NODE,
        LINES  type YT_LINE,
        GROUPS type YT_GROUP,
      end of YS_DATA .
  types:
    begin of YS_NODEKEY_OBJECT,
        KEY      type I,
        R_OBJECT type ref to OBJECT,
      end of YS_NODEKEY_OBJECT .
  types:
    YT_NODEKEY_OBJECT type standard table of YS_NODEKEY_OBJECT .

  constants C_SHAPE_BOX type STRING value 'Box' ##NO_TEXT.
  constants C_SHAPE_CIRCLE type STRING value 'Circle' ##NO_TEXT.
  constants C_SHAPE_CUSTOM type STRING value 'Custom' ##NO_TEXT.
  constants C_STATUS_ERROR type STRING value 'Error' ##NO_TEXT.
  constants C_STATUS_INFORMATION type STRING value 'Information' ##NO_TEXT.
  constants C_STATUS_STANDARD type STRING value 'Standard' ##NO_TEXT.
  constants C_STATUS_SUCCESS type STRING value 'Success' ##NO_TEXT.
  constants C_STATUS_WARNING type STRING value 'Warning' ##NO_TEXT.

  methods ADD_ATTR
    importing
      !IF_VALUE type ANY
      !IF_UOM type /VCXI/CKX_UOM optional
      !IF_LABEL type STRING optional
      !IF_ICON type STRING optional
      !IF_STATUS type STRING optional
      !IF_ALPHA_OUT type ABAP_BOOL optional
    changing
      !CT_ATTR type YT_ATTRIBUTE
    raising
      /VCXI/CX_CKX .
  methods GET_LABEL
    importing
      !IF_VALUE type ANY
    returning
      value(RF_LABEL) type STRING
    raising
      /VCXI/CX_CKX .
  methods ADD_GROUP
    importing
      !IF_TITLE type STRING
      !IF_DESCR type STRING optional
      !IF_ICON type STRING optional
      !IF_STATUS type STRING default 'Standard'
    returning
      value(RF_GROUP_KEY) type I
    raising
      /VCXI/CX_CKX .
  methods ADD_LINE
    importing
      !IF_NODE_KEY_FROM type I
      !IF_NODE_KEY_TO type I
      !IF_ARPOS type STRING default 'Middle'
      !IF_TITLE type STRING optional
      !IF_STATUS type STRING optional
    raising
      /VCXI/CX_CKX .
  methods ADD_NODE
    importing
      !IF_TITLE type STRING
      !IF_SHAPE type STRING default 'Box'
      !IF_DESCR type /VCXI/CKX_DESCR optional
      !IF_ICON type STRING optional
      !IF_STATUS type STRING default 'Standard'
      !IF_WIDTH type I default 0
      !IF_GROUP_KEY type I optional
      !IT_ATTR type YT_ATTRIBUTE optional
    returning
      value(RF_NODE_KEY) type I
    raising
      /VCXI/CX_CKX .
  methods GET_HTML
    returning
      value(RT_HTML) type W3HTMLTAB
    raising
      /VCXI/CX_CKX .
  methods GET_JSON
    returning
      value(RF_JSON) type STRING
    raising
      /VCXI/CX_CKX .
  methods GET_NEXT_FREE_KEY
    returning
      value(RF_KEY) type I
    raising
      /VCXI/CX_CKX .
  methods GET_STATUS_BY_GATE
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_STATUS) type STRING
    raising
      /VCXI/CX_CKX .
  methods REGISTER_TO_NODE
    importing
      !IR_OBJECT type ref to OBJECT
      !IF_NODE_KEY type I
    raising
      /VCXI/CX_CKX .
  methods GET_NODE_KEY_BY_OBJECT
    importing
      !IR_OBJECT type ref to OBJECT
    returning
      value(RF_NODE_KEY) type I
    raising
      /VCXI/CX_CKX .
protected section.

  data F_KEY_LAST type I .
  data T_GROUP type YT_GROUP .
  data T_LINE type YT_LINE .
  data T_NODE type YT_NODE .
  data T_NODEKEY_OBJECT type YT_NODEKEY_OBJECT .
private section.
endclass. "ZCL_VCXI_XCS_NETGRAPH_JSON definition
class ZCL_VCXI_XCS_NETGRAPH_JSON implementation.
  method ADD_ATTR.

    data: LF_LABEL type STRING,
          LF_UOM   type STRING,
          LF_VALUE type STRING.


***------------------------------------------------------------------------------------------------
    if IF_LABEL is supplied.
      LF_LABEL = IF_LABEL.
    else.
      LF_LABEL = ME->GET_LABEL( IF_VALUE = IF_VALUE ).
    endif.

    if IF_UOM is supplied.
      call function 'CONVERSION_EXIT_LUNIT_OUTPUT'
        exporting
          INPUT          = IF_UOM
        importing
          OUTPUT         = LF_UOM
        exceptions
          UNIT_NOT_FOUND = 1.
      if SY-SUBRC ne 0.
        LF_UOM = IF_UOM.
      endif.
      try.
          LF_VALUE = |{ conv decfloat16( IF_VALUE ) style = simple number = user } { LF_UOM }|.
        catch CX_SY_CONVERSION_NO_NUMBER.
          LF_VALUE = |{ IF_VALUE } { LF_UOM }|.
      endtry.
    endif.

***------------------------------------------------------------------------------------------------
*** Add Attribute
    append value #( LABEL  = LF_LABEL
                    VALUE  = cond #( when IF_UOM is supplied then LF_VALUE
                                     when IF_ALPHA_OUT eq ABAP_TRUE then |{ IF_VALUE alpha = out }|
                                                                    else IF_VALUE )

                    ICON   = IF_ICON
                    STATUS = IF_STATUS ) to CT_ATTR.

  endmethod.
  method ADD_GROUP.

*** Return new Group Key
    RF_GROUP_KEY = ME->GET_NEXT_FREE_KEY( ).

*** Add Group
    append value #( KEY         = RF_GROUP_KEY
                    TITLE       = IF_TITLE
                    DESCRIPTION = IF_DESCR
                    ICON        = IF_ICON
                    STATUS      = IF_STATUS ) to ME->T_GROUP.

  endmethod.
  method ADD_LINE.

*** Only for exisiting Node Keys
    check IF_NODE_KEY_FROM is not initial and
          IF_NODE_KEY_TO   is not initial.

*** Add Line
    append value #( FROM          = IF_NODE_KEY_FROM
                    TO            = IF_NODE_KEY_TO
                    ARROWPOSITION = IF_ARPOS
                    TITLE         = IF_TITLE
                    STATUS        = IF_STATUS ) to ME->T_LINE.

  endmethod.
  method ADD_NODE.

*** Return new Node Key
    RF_NODE_KEY = ME->GET_NEXT_FREE_KEY( ).

***--------------------------------------------------------------------------------------
    data(LF_WIDTH) = IF_WIDTH.

*** Set minimum Width to avoid line-breaks in Attributes (if specific Width is not provided)
    if IF_WIDTH is not supplied.
      if STRLEN( IF_TITLE ) lt 20.
        LF_WIDTH = 200.
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Add Node
    append value #( KEY         = RF_NODE_KEY
                    TITLE       = IF_TITLE
                    DESCRIPTION = IF_DESCR
                    SHAPE       = IF_SHAPE
                    ICON        = IF_ICON
                    STATUS      = IF_STATUS
                    WIDTH       = LF_WIDTH
                    GROUP       = IF_GROUP_KEY
                    ATTRIBUTES  = IT_ATTR )     to ME->T_NODE.

  endmethod.
  method GET_HTML.

    data: LT_STRING         type table of STRING,
          LT_JSON           type W3HTMLTAB,
          LT_GRAPH_SETTINGS type W3HTMLTAB,
          LT_MERGE_TABLE    type SWWW_T_MERGE_TABLE.


*** Get JSON
    data(LF_JSON) = ME->GET_JSON( ).
    split LF_JSON at CL_ABAP_CHAR_UTILITIES=>CR_LF into table LT_STRING.
    loop at LT_STRING into data(LF_STRING).
      call function 'CONVERT_STRING_TO_TABLE'
        exporting
          I_STRING         = LF_STRING
          I_TABLINE_LENGTH = 255
        tables
          ET_TABLE         = LT_JSON.
    endloop.

*** Build Merge Table
    LT_MERGE_TABLE = value #( ( NAME = '// <! merge json!>'   COMMAND = 'A' HTML = LT_JSON )
                              ( NAME = '// <! merge graph !>' COMMAND = 'A' HTML = LT_GRAPH_SETTINGS ) ).

*** Merge with Template
    call function 'WWW_HTML_MERGER'
      exporting
        TEMPLATE           = 'ZVCXI_XCS_NETGRAPH'   "maintained in SMW0
      importing
        HTML_TABLE         = RT_HTML
      changing
        MERGE_TABLE        = LT_MERGE_TABLE
      exceptions
        TEMPLATE_NOT_FOUND = 1
        others             = 2.
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

  endmethod.
  method GET_JSON.

    data: LS_DATA type YS_DATA.

*** Add Data to JSON (Nodes, Lines, Groups
    append lines of ME->T_NODE  to LS_DATA-NODES.
    append lines of ME->T_LINE  to LS_DATA-LINES.
    append lines of ME->T_GROUP to LS_DATA-GROUPS.

*** Return JSON String based on Data
    RF_JSON = /UI2/CL_JSON=>SERIALIZE( DATA          = LS_DATA
                                       PRETTY_NAME   = /UI2/CL_JSON=>PRETTY_MODE-CAMEL_CASE
                                       COMPRESS      = ABAP_TRUE
                                       FORMAT_OUTPUT = ABAP_TRUE ).

  endmethod.
  method GET_LABEL.

    data(LR_ABAP_TYPEDESCR) = CL_ABAP_DATADESCR=>DESCRIBE_BY_DATA( P_DATA = IF_VALUE ).
    if LR_ABAP_TYPEDESCR->IS_DDIC_TYPE( ).
      RF_LABEL = cast CL_ABAP_ELEMDESCR( LR_ABAP_TYPEDESCR )->GET_DDIC_FIELD( )-SCRTEXT_M.
    endif.

  endmethod.
  method GET_NEXT_FREE_KEY.

    add 1 to ME->F_KEY_LAST.

    move ME->F_KEY_LAST to RF_KEY.

  endmethod.
  method GET_NODE_KEY_BY_OBJECT.

    check IR_OBJECT is not initial.

*** Get Node Key based on Object
    RF_NODE_KEY = value #( ME->T_NODEKEY_OBJECT[ R_OBJECT = IR_OBJECT ]-KEY optional ).

  endmethod.
  method GET_STATUS_BY_GATE.

    RF_STATUS = switch STRING( IR_GATE->GET_STATUS( )
                               when /VCXI/CL_VKSR_SERVICE=>C_ELMST_R or
                                    /VCXI/CL_VKSR_SERVICE=>C_ELMST_E then C_STATUS_ERROR
                               when /VCXI/CL_VKSR_SERVICE=>C_ELMST_Y then C_STATUS_WARNING
                               else SPACE ).

  endmethod.
  method REGISTER_TO_NODE.

    check IF_NODE_KEY ne 0.

    check not LINE_EXISTS( ME->T_NODEKEY_OBJECT[ R_OBJECT = IR_OBJECT
                                                 KEY      = IF_NODE_KEY ] ).

*** Add new Entry
    append value #( R_OBJECT = IR_OBJECT
                    KEY      = IF_NODE_KEY ) to ME->T_NODEKEY_OBJECT.

  endmethod.
