
class ZCL_VCXI_XCSR_CUST_RELCO definition
  public
  create public .

public section.

  class-methods GET_RELPO_BY_ARBPL
    importing
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
      !IT_ATYPE type /VCXI/CKX_TT_OBJECT
      !IF_DATE type DATS
      !IF_LCVAL type /VCXI/VSMC_LCVAL optional
      !IF_OUTSO type ZVCXI_XCSR_OUTSO
      !IF_MANWC type ZVCXI_XCSR_MANWC
    returning
      value(RF_RELPO) type ZVCXI_XCSR_RELPO
    raising
      /VCXI/CX_CKX .
  class-methods GET_RELPO_BY_BL_PRTE
    importing
      !IR_BL_PRTE type ref to ZCL_VCXI_XCSR_BL_PRTE
    returning
      value(RF_RELPO) type ZVCXI_XCSR_RELPO
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  class-methods GET_RELGP
    importing
      !IF_WERKS type WERKS_D
    returning
      value(RT_RELGP) type ZVCXI_XCSR_TT_RELGP
    raising
      /VCXI/CX_CKX .
protected section.
private section.

  types:
    YT_TD630 type standard table of ZVCXI_XCS_TD630 .
  types:
    YT_TD631 type standard table of ZVCXI_XCS_TD631 .
  types:
    YT_TD632 type standard table of ZVCXI_XCS_TD632 .
  types:
    begin of YS_RELPO_ARBPL,
           R_ARBPL  type ref to /VCXI/CL_VSMC_ARBPL,
           T_ATYPE  type        /VCXI/CKX_TT_OBJECT,
           DATE     type        DATS,
           LCVAL    type        /VCXI/VSMC_LCVAL,
           OUTSO    type        ZVCXI_XCSR_OUTSO,
           MANWC    type        ZVCXI_XCSR_MANWC,
           RELPO    type        ZVCXI_XCSR_RELPO,
         end   of YS_RELPO_ARBPL .
  types:
    YT_RELPO_ARBPL type standard table of YS_RELPO_ARBPL .

  class-data T_TD630 type YT_TD630 .
  class-data T_TD631 type YT_TD631 .
  class-data T_TD632 type YT_TD632 .
  class-data T_RELPO_ARBPL type YT_RELPO_ARBPL .

  class-methods GET_UNUSED_ATYPE
    importing
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
      !IT_ATYPE type /VCXI/CKX_TT_OBJECT
      !IF_DATE type DATS
      !IF_LCVAL type /VCXI/VSMC_LCVAL optional
    returning
      value(RT_ATYPE) type /VCXI/CKX_TT_OBJECT
    raising
      /VCXI/CX_CKX .
  class-methods GET_ARBPL_RELPO
    importing
      !IF_DATE type DATS
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    returning
      value(RF_RELPO) type ZVCXI_XCSR_RELPO
    raising
      /VCXI/CX_CKX .
  class-methods GET_ATYPE_RELPO
    importing
      !IF_DATE type DATS
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
      !IR_ATYPE type ref to /VCXI/CL_VSMC_ATYPE
    returning
      value(RF_RELPO) type ZVCXI_XCSR_RELPO
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCSR_CUST_RELCO definition
class ZCL_VCXI_XCSR_CUST_RELCO implementation.
method CLASS_CONSTRUCTOR.

*** Relevancy Group
  select * into table T_TD630
           from ZVCXI_XCS_TD630
          order by WERKS RELCO.

*** Work Center Points
  select * into table T_TD631
           from ZVCXI_XCS_TD631.

*** Add-on Points
  select * into table T_TD632
           from ZVCXI_XCS_TD632.

endmethod.
method GET_ARBPL_RELPO.

  data:          LF_ARBPL         type      ARBPL,
                 LF_WERKS         type      WERKS_D.
  data:          LS_TD631         type      ZVCXI_XCS_TD631.
  data:          LT_TD631         type      YT_TD631.

  check IR_ARBPL          is bound and
        IR_ARBPL->R_WERKS is bound.

***----------------------------------------------------------------------------
*** Get Key
  move IR_ARBPL->F_ARBPL                                  to LF_ARBPL.
  move IR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_WERKS.

***----------------------------------------------------------------------------
*** Filter by Date
  move T_TD631 to LT_TD631.
  delete LT_TD631 where VALFR gt IF_DATE.

*** Find full Key
  read table LT_TD631 with key WERKS = LF_WERKS
                               ARBPL = LF_ARBPL
                      transporting no fields.
  if SY-SUBRC eq 0.
    delete LT_TD631 where WERKS ne LF_WERKS
                     or   ARBPL ne LF_ARBPL.
  else.
*** Find Plant only
    read table LT_TD631 with key WERKS = LF_WERKS
                                 ARBPL = SPACE
                        transporting no fields.
    if SY-SUBRC eq 0.
      delete LT_TD631 where WERKS ne LF_WERKS
                       or   ARBPL ne SPACE.
    else.
***   Use General
      delete LT_TD631 where WERKS ne SPACE
                       or   ARBPL ne SPACE.
    endif.
  endif.

***----------------------------------------------------------------------------
*** Get newest Entry
  sort LT_TD631 by VALFR descending.
  read table LT_TD631 into LS_TD631 index 1.
  if SY-SUBRC eq 0.
    move LS_TD631-RELPO to RF_RELPO.
  endif.

endmethod.
method GET_ATYPE_RELPO.

  data:          LF_ARBPL         type      ARBPL,
                 LF_WERKS         type      WERKS_D,
                 LF_IATYP         type      /VCXI/VSMC_IATYP.
  data:          LS_TD632         type      ZVCXI_XCS_TD632.
  data:          LT_TD632         type      YT_TD632.

***----------------------------------------------------------------------------
*** Get Key
  move IR_ARBPL->F_ARBPL                                  to LF_ARBPL.
  move IR_ARBPL->R_WERKS->/VCXI/IF_CKX_OBJECT~GET_GUID( ) to LF_WERKS.
  move IR_ATYPE->/VCXI/IF_CKX_OBJECT~GET_ID( )            to LF_IATYP.

***----------------------------------------------------------------------------
*** Filter by Date
  move T_TD632 to LT_TD632.
  delete LT_TD632 where VALFR gt IF_DATE.

*** Find full Key
  read table LT_TD632 with key WERKS = LF_WERKS
                               ARBPL = LF_ARBPL
                               IATYP = LF_IATYP
                      transporting no fields.
  if SY-SUBRC eq 0.
    delete LT_TD632 where WERKS ne LF_WERKS
                     or   ARBPL ne LF_ARBPL
                     or   IATYP ne LF_IATYP.
  else.
*** Find Add-on & Plant only
    read table LT_TD632 with key WERKS = LF_WERKS
                                 ARBPL = SPACE
                                 IATYP = LF_IATYP
                        transporting no fields.
    if SY-SUBRC eq 0.
      delete LT_TD632 where WERKS ne LF_WERKS
                       or   ARBPL ne SPACE
                       or   IATYP ne LF_IATYP.
    else.
***   Find Add-on only
      read table LT_TD632 with key WERKS = SPACE
                                   ARBPL = SPACE
                                   IATYP = LF_IATYP
                          transporting no fields.
      if SY-SUBRC eq 0.
        delete LT_TD632 where WERKS ne SPACE
                         or   ARBPL ne SPACE
                         or   IATYP ne LF_IATYP.
      else.
***     Find Plant only
        read table LT_TD632 with key WERKS = LF_WERKS
                                     ARBPL = SPACE
                                     IATYP = SPACE
                            transporting no fields.
        if SY-SUBRC eq 0.
          delete LT_TD632 where WERKS ne LF_WERKS
                           or   ARBPL ne SPACE
                           or   IATYP ne SPACE.
        else.
***       Use General
          delete LT_TD632 where WERKS ne SPACE
                           or   ARBPL ne SPACE
                           or   IATYP ne SPACE.
        endif.
      endif.
    endif.
  endif.

***----------------------------------------------------------------------------
*** Get newest Entry
  sort LT_TD632 by VALFR descending.
  read table LT_TD632 into LS_TD632 index 1.
  if SY-SUBRC eq 0.
    move LS_TD632-RELPO to RF_RELPO.
  endif.

endmethod.
method GET_RELGP.

  data:          LS_TD630   type ZVCXI_XCS_TD630.
  field-symbols: <S_RELGP>  type ZVCXI_XCSR_S_RELGP.

*** Get Relevancy Group by Plant
  loop at ZCL_VCXI_XCSR_CUST_RELCO=>T_TD630 into LS_TD630
                                           where WERKS eq IF_WERKS.
    append initial line to RT_RELGP assigning <S_RELGP>.
    move-corresponding LS_TD630 to <S_RELGP>.
  endloop.

*** Get Relevancy Group by Plant
  if RT_RELGP is initial.
    loop at ZCL_VCXI_XCSR_CUST_RELCO=>T_TD630 into LS_TD630
                                             where WERKS eq SPACE.
      append initial line to RT_RELGP assigning <S_RELGP>.
      move-corresponding LS_TD630 to <S_RELGP>.
    endloop.
  endif.

endmethod.
method GET_RELPO_BY_ARBPL.

  data:          LF_RELPO         type        ZVCXI_XCSR_RELPO.
  data:          LT_ATYPE         type        /VCXI/CKX_TT_OBJECT.
  data:          LR_ATYPE         type ref to /VCXI/CL_VSMC_ATYPE,
                 LR_OBJECT        type ref to /VCXI/IF_CKX_OBJECT.
  field-symbols: <S_RELPO_ARBPL>  type        YS_RELPO_ARBPL.

  check IR_ARBPL          is bound and
        IR_ARBPL->R_WERKS is bound.

***----------------------------------------------------------------------------
*** Try to find in Buffer
  read table T_RELPO_ARBPL assigning <S_RELPO_ARBPL>
                           with key R_ARBPL = IR_ARBPL
                                    T_ATYPE = IT_ATYPE
                                    DATE    = IF_DATE
                                    LCVAL   = IF_LCVAL
                                    OUTSO   = IF_OUTSO
                                    MANWC   = IF_MANWC.

***----------------------------------------------------------------------------
*** Build Relevancy and add to Buffer
  if SY-SUBRC ne 0.
*** Add new Buffer Entry
    append initial line to T_RELPO_ARBPL assigning <S_RELPO_ARBPL>.
    move IR_ARBPL to <S_RELPO_ARBPL>-R_ARBPL.
    move IT_ATYPE to <S_RELPO_ARBPL>-T_ATYPE.
    move IF_DATE  to <S_RELPO_ARBPL>-DATE.
    move IF_LCVAL to <S_RELPO_ARBPL>-LCVAL.
    move IF_OUTSO to <S_RELPO_ARBPL>-OUTSO.
    move IF_MANWC to <S_RELPO_ARBPL>-MANWC.

*** Get customized Relevancy Points for Work Center
    <S_RELPO_ARBPL>-RELPO = GET_ARBPL_RELPO( IR_ARBPL = IR_ARBPL
                                             IF_DATE  = IF_DATE ).

    if IF_OUTSO ne ABAP_TRUE and
       IF_MANWC ne ABAP_TRUE.
***   Get unused Add-ons
      LT_ATYPE = GET_UNUSED_ATYPE( IR_ARBPL = IR_ARBPL
                                   IT_ATYPE = IT_ATYPE
                                   IF_DATE  = IF_DATE
                                   IF_LCVAL = IF_LCVAL ).

***   Get Relevancy Points for unused Add-ons
      loop at LT_ATYPE into LR_OBJECT.
        move LR_OBJECT ?to LR_ATYPE.
        LF_RELPO = GET_ATYPE_RELPO( IF_DATE  = IF_DATE
                                    IR_ARBPL = IR_ARBPL
                                    IR_ATYPE = LR_ATYPE ).
        add LF_RELPO to <S_RELPO_ARBPL>-RELPO.
      endloop.
    endif.
  endif.

***----------------------------------------------------------------------------
*** Return Relevancy Points
  move <S_RELPO_ARBPL>-RELPO to RF_RELPO.

endmethod.
method GET_RELPO_BY_BL_PRTE.

  data:  LF_RELPO         type        ZVCXI_XCSR_RELPO,
         LF_OUTSO         type        ZVCXI_XCSR_OUTSO,
         LF_MANWC         type        ZVCXI_XCSR_MANWC.
  data:  LT_ATYPE_PSTEP   type        /VCXI/CKX_TT_OBJECT,
         LT_ATYPE_ARBPL   type        /VCXI/CKX_TT_OBJECT.
  data:  LR_RTE_ARBPL     type ref to /VCXI/CL_VSMR_RTE_ARBPL,
         LR_RTE_PSTEP     type ref to /VCXI/CL_VSMR_RTE_PSTEP,
         LR_BL_OUTSO      type ref to ZIF_VCXI_XCSR_BL_OUTSO,
         LR_BL_MANU       type ref to ZIF_VCXI_XCSR_BL_MANU.

  check IR_BL_PRTE             is bound and
        IR_BL_PRTE->R_RTE_PRTE is bound.

***----------------------------------------------------------------------------
*** Process Work Center
  loop at IR_BL_PRTE->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
    free: LT_ATYPE_ARBPL,
          LF_OUTSO,
          LF_MANWC.

*** No Relevancy Points if not all Work Center are specified
    if LR_RTE_ARBPL->R_ARBPL is not bound.
      clear RF_RELPO.
      exit.
    endif.

*** Collect all used Add-ons
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      LT_ATYPE_PSTEP = LR_RTE_PSTEP->GET_ATYPE( ).
      append lines of LT_ATYPE_PSTEP to LT_ATYPE_ARBPL.

***   Outsourcing Flag
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_OUTSO.
          if LR_BL_OUTSO is bound.
            if LR_BL_OUTSO->F_OUTSO eq ABAP_TRUE.
              move LR_BL_OUTSO->F_OUTSO to LF_OUTSO.
            endif.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_BL_OUTSO.
      endtry.

***   Manual Flag
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_BL_MANU.
          if LR_BL_MANU is bound.
            if LR_BL_MANU->F_MANWC eq ABAP_TRUE.
              move LR_BL_MANU->F_MANWC to LF_MANWC.
            endif.
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_BL_MANU.
      endtry.
    endloop.

*** Get Relevancy Points of Work Center
    LF_RELPO = GET_RELPO_BY_ARBPL( IR_ARBPL = LR_RTE_ARBPL->R_ARBPL
                                   IT_ATYPE = LT_ATYPE_ARBPL
                                   IF_DATE  = IR_BL_PRTE->F_DATE
                                   IF_LCVAL = LR_RTE_ARBPL->F_LCVAL
                                   IF_OUTSO = LF_OUTSO
                                   IF_MANWC = LF_MANWC ).

*** Collect Relevancy Points
    add LF_RELPO to RF_RELPO.
  endloop.

endmethod.
  method GET_UNUSED_ATYPE.

    data: LT_ATYPE_SPEED type /VCXI/CKX_TT_OBJECT,
          LT_ATYPE_LIMIT type /VCXI/CKX_TT_OBJECT.
    data: LR_RTE_CMACH type ref to /VCXI/CL_VSMR_RTE_CMACH,
          LR_OBJECT    type ref to /VCXI/IF_CKX_OBJECT.

***----------------------------------------------------------------------------------------------------------
*** Get Customizing Machine
    try.
        LR_RTE_CMACH = /VCXI/CL_VSMR_RTE_CMACH=>GET_INSTANCE( IR_ARBPL = IR_ARBPL
                                                              IF_DATE  = IF_DATE
                                                              IF_LCVAL = IF_LCVAL ).
      catch /VCXI/CX_CKX.
        exit.
    endtry.

    check LR_RTE_CMACH->R_MGRPV_SPEED         is bound and
          LR_RTE_CMACH->R_MGRPV_SPEED->R_MGRP is bound and
          LR_RTE_CMACH->R_MGRPV_LIMIT         is bound and
          LR_RTE_CMACH->R_MGRPV_LIMIT->R_MGRP is bound.

***----------------------------------------------------------------------------------------------------------
*** Get available Add-ons
    RT_ATYPE       = LR_RTE_CMACH->R_MGRPV_SPEED->R_MGRP->R_MTYPE->/VCXI/IF_VSMC_LINK_ATYPE~GET_LINKED_ATYPE( ).
    LT_ATYPE_SPEED = LR_RTE_CMACH->R_MGRPV_SPEED->/VCXI/IF_VSMC_USER_ATYPE~GET_ATYPE( ).
    LT_ATYPE_LIMIT = LR_RTE_CMACH->R_MGRPV_LIMIT->/VCXI/IF_VSMC_USER_ATYPE~GET_ATYPE( ).

    loop at RT_ATYPE into LR_OBJECT.
***   Is Add-on used by Speed
      read table LT_ATYPE_SPEED with key TABLE_LINE = LR_OBJECT
                                transporting no fields.
      if SY-SUBRC ne 0.
        delete RT_ATYPE.
        exit.
      endif.

***   Is Add-on used by Limit
      read table LT_ATYPE_LIMIT with key TABLE_LINE = LR_OBJECT
                                transporting no fields.
      if SY-SUBRC ne 0.
        delete RT_ATYPE.
        exit.
      endif.
    endloop.

***----------------------------------------------------------------------------------------------------------
*** Get unused Add-ons
    loop at IT_ATYPE into LR_OBJECT.
      delete RT_ATYPE where TABLE_LINE eq LR_OBJECT.
    endloop.

  endmethod.
