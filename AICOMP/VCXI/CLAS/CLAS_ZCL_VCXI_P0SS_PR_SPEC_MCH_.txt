
class ZCL_VCXI_P0SS_PR_SPEC_MCH definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  abstract
  create public .

public section.

  constants C_IPRVT_P0_SPEC_MCH type /VCXI/VKSC_IPRVT value 'ZVCXI_P0SS_SPEC_MCH'. "#EC NOTEXT
  constants C_PARID_CMATN type /VCXI/VKS_PARID value 'ZVCXI_XC_CMATN'. "#EC NOTEXT
  constants C_PARID_MATDE type /VCXI/VKS_PARID value 'ZVCXI_XC_MATDE'. "#EC NOTEXT
  constants C_PARID_PCPHU type /VCXI/VKS_PARID value 'ZVCXI_P0_PCPHU'. "#EC NOTEXT
  constants C_PARID_PDESC type /VCXI/VKS_PARID value 'ZVCXI_P0_PDESC'. "#EC NOTEXT
  constants C_PARID_HUHEI type /VCXI/VKS_PARID value 'ZVCXI_P0_HUHEI'. "#EC NOTEXT
  constants C_PARID_HULEN type /VCXI/VKS_PARID value 'ZVCXI_P0_HULEN'. "#EC NOTEXT
  constants C_PARID_HUWID type /VCXI/VKS_PARID value 'ZVCXI_P0_HUWID'. "#EC NOTEXT
  constants C_PARID_PROHE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROHE'. "#EC NOTEXT
  constants C_PARID_PROLE type /VCXI/VKS_PARID value 'ZVCXI_P0_PROLE'. "#EC NOTEXT
  constants C_PARID_PROWI type /VCXI/VKS_PARID value 'ZVCXI_P0_PROWI'. "#EC NOTEXT
  constants C_PARID_PRSTY type /VCXI/VKS_PARID value 'ZVCXI_P0_PRSTY'. "#EC NOTEXT
  constants C_PARID_WGRHU type /VCXI/VKS_PARID value 'ZVCXI_P0_WGRHU'. "#EC NOTEXT
  class-data F_IPRVT_SPEC_MCH type /VCXI/VKSC_IPRVT .

  methods GET_TPRST
  abstract
    returning
      value(RF_TPRST) type ZVCXI_P0SS_TPRST
    exceptions
      /VCXI/CX_CKX .
  methods GET_CMATN
    returning
      value(RF_CMATN) type ZVCXI_XCSS_CMATN
    raising
      /VCXI/CX_CKX .
  methods GET_MATDE
    returning
      value(RF_MATDE) type ZVCXI_XCSS_MATDE
    raising
      /VCXI/CX_CKX .
  methods GET_WGRHU
    returning
      value(RS_WGRHU) type ZVCXI_P0S_S_WGRHU
    raising
      /VCXI/CX_CKX .
  methods GET_PCPHU
    returning
      value(RS_PCPHU) type ZVCXI_P0S_S_PCPHU
    raising
      /VCXI/CX_CKX .
  methods GET_HUHEI
    returning
      value(RS_HUHEI) type ZVCXI_P0S_S_HUHEI
    raising
      /VCXI/CX_CKX .
  methods GET_HULEN
    returning
      value(RS_HULEN) type ZVCXI_P0S_S_HULEN
    raising
      /VCXI/CX_CKX .
  methods GET_HUWID
    returning
      value(RS_HUWID) type ZVCXI_P0S_S_HUWID
    raising
      /VCXI/CX_CKX .
  methods GET_PRODI_DESCR
    returning
      value(RF_PRODI_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PROHE
    returning
      value(RS_PROHE) type ZVCXI_P0S_S_PROHE
    raising
      /VCXI/CX_CKX .
  methods GET_PROLE
    returning
      value(RS_PROLE) type ZVCXI_P0S_S_PROLE
    raising
      /VCXI/CX_CKX .
  methods GET_PROWI
    returning
      value(RS_PROWI) type ZVCXI_P0S_S_PROWI
    raising
      /VCXI/CX_CKX .
  methods GET_PDESC
    returning
      value(RF_PDESC) type ZVCXI_P0SS_PDESC
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY
    returning
      value(RF_PRSTY) type ZVCXI_P0SS_PRSTY
    raising
      /VCXI/CX_CKX .
  methods GET_PRSTY_DESCR
    returning
      value(RF_PRSTY_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE
    returning
      value(RF_PTYPE) type ZVCXI_P0S_PTYPE
    raising
      /VCXI/CX_CKX .
  methods GET_PTYPE_DESCR
    returning
      value(RF_PTYPE_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods SET_CMATN
    importing
      !IF_CMATN type ZVCXI_XCSS_CMATN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_MATDE
    importing
      !IF_MATDE type ZVCXI_XCSS_MATDE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PCPHU
    importing
      !IS_PCPHU type ZVCXI_P0S_S_PCPHU
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WGRHU
    importing
      !IS_WGRHU type ZVCXI_P0S_S_WGRHU
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HUHEI
    importing
      !IS_HUHEI type ZVCXI_P0S_S_HUHEI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HULEN
    importing
      !IS_HULEN type ZVCXI_P0S_S_HULEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HUWID
    importing
      !IS_HUWID type ZVCXI_P0S_S_HUWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROHE
    importing
      !IS_PROHE type ZVCXI_P0S_S_PROHE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROLE
    importing
      !IS_PROLE type ZVCXI_P0S_S_PROLE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PROWI
    importing
      !IS_PROWI type ZVCXI_P0S_S_PROWI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PDESC
    importing
      !IF_PDESC type ZVCXI_P0SS_PDESC
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PRSTY
    importing
      !IF_PRSTY type ZVCXI_P0SS_PRSTY
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PTYPE
    importing
      !IF_PTYPE type ZVCXI_P0S_PTYPE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
protected section.

  constants C_IEVNT_I_SET_DEFAULT type /VCXI/VKSC_IEVNT value 'SET_DEFAULT'. "#EC NOTEXT
  constants C_IEVNT_O_MATDE_CHANGED type /VCXI/VKSC_IEVNT value 'MATDE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_HU_DIM_CHANGED type /VCXI/VKSC_IEVNT value 'HU_DIM_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PC_P_HU_CHANGED type /VCXI/VKSC_IEVNT value 'PC_P_HU_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PROD_DIM_CHANGED type /VCXI/VKSC_IEVNT value 'PROD_DIM_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PRSTY_CHANGED type /VCXI/VKSC_IEVNT value 'PRSTY_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PTYPE_CHANGED type /VCXI/VKSC_IEVNT value 'PTYPE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_WGRHU_CHANGED type /VCXI/VKSC_IEVNT value 'WGRHU_CHANGED'. "#EC NOTEXT

  methods CHECK_PRSTY
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_PTYPE
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_SET_DEFAULT
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P0SS_PR_SPEC_MCH definition
class ZCL_VCXI_P0SS_PR_SPEC_MCH implementation.
method CHECK_PRSTY.

*** 0 Product Style is maintained.
*** 1 Product Style is not maintained.

  data: LF_PRSTY      type        ZVCXI_P0SS_PRSTY.

  LF_PRSTY = ME->GET_PRSTY( ).
  if LF_PRSTY is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

endmethod.
method CHECK_PTYPE.

*** 0 Product Type is maintained.
*** 1 Product type is not maintained.

  data: LF_PTYPE      type        ZVCXI_P0S_PTYPE.

  LF_PTYPE = ME->GET_PTYPE( ).
  if LF_PTYPE is initial.
    move 1 to RF_RETURN.
    exit.
  endif.

endmethod.
method GET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).
  move LS_PARAM-ATWRT to RF_CMATN.

endmethod.
method GET_HUHEI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HUHEI ).
  move LS_PARAM-ATFLV to RS_HUHEI-HUHEI.
  move LS_PARAM-UNIT  to RS_HUHEI-HUHEI_UOM.

endmethod.
method GET_HULEN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HULEN ).
  move LS_PARAM-ATFLV to RS_HULEN-HULEN.
  move LS_PARAM-UNIT  to RS_HULEN-HULEN_UOM.

endmethod.
method GET_HUWID.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HUWID ).
  move LS_PARAM-ATFLV to RS_HUWID-HUWID.
  move LS_PARAM-UNIT  to RS_HUWID-HUWID_UOM.

endmethod.
method GET_MATDE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).
  move LS_PARAM-ATWRT to RF_MATDE.

endmethod.
method GET_PCPHU.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCPHU ).
  move LS_PARAM-ATFLV to RS_PCPHU-PCPHU.
  move LS_PARAM-UNIT  to RS_PCPHU-PCPHU_UOM.

endmethod.
method GET_PDESC.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PDESC ).
  move LS_PARAM-STRNG to RF_PDESC.

endmethod.
method GET_PRODI_DESCR.

*** Return only Product Dimension
  RF_PRODI_DESCR = 'Product Dim.'(001).

endmethod.
method GET_PROHE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).
  move LS_PARAM-ATFLV to RS_PROHE-PROHE.
  move LS_PARAM-UNIT  to RS_PROHE-PROHE_UOM.

endmethod.
method GET_PROLE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).
  move LS_PARAM-ATFLV to RS_PROLE-PROLE.
  move LS_PARAM-UNIT  to RS_PROLE-PROLE_UOM.

endmethod.
method GET_PROWI.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).
  move LS_PARAM-ATFLV to RS_PROWI-PROWI.
  move LS_PARAM-UNIT  to RS_PROWI-PROWI_UOM.

endmethod.
method GET_PRSTY.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSTY ).
  move LS_PARAM-ATWRT to RF_PRSTY.

endmethod.
method GET_PRSTY_DESCR.

  data: LF_PRSTY        type        ZVCXI_P0SS_PRSTY,
        LF_TPRST        type        ZVCXI_P0SS_TPRST.

  LF_PRSTY = ME->GET_PRSTY( ).
  LF_TPRST = ME->GET_TPRST( ).

  RF_PRSTY_DESCR = ZCL_VCXI_P0SS_CUST_PRSTY=>GET_PRSTY_DESCR( IF_TPRST = LF_TPRST
                                                              IF_PRSTY = LF_PRSTY ).

endmethod.
method GET_PTYPE.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_PTYPE.

endmethod.
method GET_PTYPE_DESCR.

  data:      LF_PTYPE   type                   ZVCXI_P0S_PTYPE.
  data:      LS_TC100T  type                   ZVCXI_P0S_TC100T.

  LF_PTYPE = ME->GET_PTYPE( ).

*** Return Product Type description
  read table ZCL_VCXI_P0SS_CUST_PRSTY=>T_TC100T into LS_TC100T with key PTYPE = LF_PTYPE.
  check SY-SUBRC = 0.
  move LS_TC100T-DESCR to RF_PTYPE_DESCR.

endmethod.
method GET_STATUS.

  data:  LS_PROLE   type ZVCXI_P0S_S_PROLE,
         LS_PROWI   type ZVCXI_P0S_S_PROWI,
         LS_PROHE   type ZVCXI_P0S_S_PROHE,
         LS_PCPHU   type ZVCXI_P0S_S_PCPHU,
         LS_HULEN   type ZVCXI_P0S_S_HULEN,
         LS_HUWID   type ZVCXI_P0S_S_HUWID,
         LS_HUHEI   type ZVCXI_P0S_S_HUHEI,
         LS_WGRHU   type ZVCXI_P0S_S_WGRHU.
  data:  LT_FUNCT   type ZVCXI_XCDC_TT_CR_FUNCT.

*** Super Status
  RF_ELMST = SUPER->GET_STATUS( ).

*** Get all Active Functions at once
  LT_FUNCT = ZCL_VCXI_XCDR_SERVICE=>GET_ACTIVE_FUNCTION( IR_GATE = ME->R_GATE ).

***------------------------------------------------------------------
*** Check Product Type is Maintained
  if ME->CHECK_PTYPE( ) eq 0.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

***------------------------------------------------------------------
*** Check Product Style is Maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PRSTY'
                      transporting no fields.
  if SY-SUBRC eq 0.
    if ME->CHECK_PRSTY( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Length is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PROLE'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_PROLE = ME->GET_PROLE( ).
    if LS_PROLE-PROLE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Width is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PROWI'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_PROWI = ME->GET_PROWI( ).
    if LS_PROWI-PROWI is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Height is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PROHE'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_PROHE = ME->GET_PROHE( ).
    if LS_PROHE-PROHE is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check HU Length is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_HULEN'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_HULEN = ME->GET_HULEN( ).
    if LS_HULEN-HULEN is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check HU Width is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_HUWID'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_HUWID = ME->GET_HUWID( ).
    if LS_HUWID-HUWID is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check HU Height is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_HUHEI'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_HUHEI = ME->GET_HUHEI( ).
    if LS_HUHEI-HUHEI is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check PCs per HU is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_PCPHU'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_PCPHU = ME->GET_PCPHU( ).
    if LS_PCPHU-PCPHU is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Gross Weight per HU is maintained
  read table LT_FUNCT with key IFUNC = 'CHECK_WGRHU'
                      transporting no fields.
  if SY-SUBRC eq 0.
    LS_WGRHU = ME->GET_WGRHU( ).
    if LS_WGRHU-WGRHU is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  read table LT_FUNCT with key IFUNC = 'CHECK_MATDE'
                      transporting no fields.
  if SY-SUBRC eq 0.
    if ME->GET_MATDE( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.
  endif.

endmethod.
method GET_STATUS_MSG.

  data: LS_PROLE type ZVCXI_P0S_S_PROLE,
        LS_PROWI type ZVCXI_P0S_S_PROWI,
        LS_PROHE type ZVCXI_P0S_S_PROHE,
        LS_PCPHU type ZVCXI_P0S_S_PCPHU,
        LS_HULEN type ZVCXI_P0S_S_HULEN,
        LS_HUWID type ZVCXI_P0S_S_HUWID,
        LS_HUHEI type ZVCXI_P0S_S_HUHEI,
        LS_WGRHU type ZVCXI_P0S_S_WGRHU.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Product Type is Maintained
  case ME->CHECK_PTYPE( ).
    when 0.
***   Product Type is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '054' ).
    when 1.
***   Product Type is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '053' ).
  endcase.

***------------------------------------------------------------------
*** Check Product Style is Maintained
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_PRSTY' ) eq ABAP_TRUE.
    case ME->CHECK_PRSTY( ).
      when 0.
***   Product Style is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '082' ).
      when 1.
***   Product Style is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '081' ).
    endcase.
  endif.

***------------------------------------------------------------------
*** Check Product Length is maintained
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_PROLE' ) eq ABAP_TRUE.
    LS_PROLE = ME->GET_PROLE( ).
    if LS_PROLE-PROLE is not initial.
***   Product Length is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '055' ).
    else.
***   Product Length is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '056' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Width is maintained
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_PROWI' ) eq ABAP_TRUE.
    LS_PROWI = ME->GET_PROWI( ).
    if LS_PROWI-PROWI is not initial.
***   Product Width is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '057' ).
    else.
***   Product Width is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '058' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Height is maintained
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_PROHE' ) eq ABAP_TRUE.
    LS_PROHE = ME->GET_PROHE( ).
    if LS_PROHE-PROHE is not initial.
***   Product Height is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '059' ).
    else.
***   Product Height is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '060' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check HU Length is maintained
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_HULEN' ) eq ABAP_TRUE.
    LS_HULEN = ME->GET_HULEN( ).
    if LS_HULEN-HULEN is not initial.
***   HU Length is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '090' ).
    else.
***   HU Length is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '091' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check HU Width is maintained
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_HUWID' ) eq ABAP_TRUE.
    LS_HUWID = ME->GET_HUWID( ).
    if LS_HUWID-HUWID is not initial.
***   HU Width is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '092' ).
    else.
***   HU Width is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '093' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check HU Height is maintained
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_HUHEI' ) eq ABAP_TRUE.
    LS_HUHEI = ME->GET_HUHEI( ).
    if LS_HUHEI-HUHEI is not initial.
***   HU Height is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '094' ).
    else.
***   HU Height is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '095' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check PCs per HU is maintained
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_PCPHU' ) eq ABAP_TRUE.
    LS_PCPHU = ME->GET_PCPHU( ).
    if LS_PCPHU-PCPHU is not initial.
***   PCs per HU is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '096' ).
    else.
***   PCs per HU is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '097' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Gross Weight per HU is maintained
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_WGRHU' ) eq ABAP_TRUE.
    LS_WGRHU = ME->GET_WGRHU( ).
    if LS_WGRHU-WGRHU is not initial.
***   Gross Weight per HU is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '098' ).
    else.
***   Gross Weight per HU is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '099' ).
    endif.
  endif.

***------------------------------------------------------------------
*** Check Product Material Description check is active -> Do check
  if ZCL_VCXI_XCDR_SERVICE=>IS_FUNCTION_ACTIVE( IR_GATE  = ME->R_GATE
                                                IF_IFUNC = 'CHECK_MATDE' ) eq ABAP_TRUE.
    if ME->GET_MATDE( ) is not initial.
***   Material Description is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '077' ).
    else.
***   Material Description is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P0SS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '078' ).
    endif.
  endif.

endmethod.
method GET_WGRHU.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WGRHU ).
  move LS_PARAM-ATFLV to RS_WGRHU-WGRHU.
  move LS_PARAM-UNIT  to RS_WGRHU-WGRHU_UOM.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_SET_DEFAULT.
      ME->HANDLE_SET_DEFAULT( ).

  endcase.

endmethod.
method HANDLE_SET_DEFAULT.

*** Set Load Data to Deactivate
  call function 'ZVCXI_P0SS_LOAD_DATA_DEACT'.

  ZCL_VCXI_XCDR_SERVICE=>SET_DEFAULT( IR_GATE = ME->R_GATE ).

endmethod.
method SET_CMATN.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_CMATN ).

  move IF_CMATN to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_HUHEI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HUHEI ).

  move IS_HUHEI-HUHEI     to LS_PARAM-ATFLV.
  move IS_HUHEI-HUHEI_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HU_DIM_CHANGED ).
  endif.

endmethod.
method SET_HULEN.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HULEN ).

  move IS_HULEN-HULEN     to LS_PARAM-ATFLV.
  move IS_HULEN-HULEN_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HU_DIM_CHANGED ).
  endif.

endmethod.
method SET_HUWID.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HUWID ).

  move IS_HUWID-HUWID     to LS_PARAM-ATFLV.
  move IS_HUWID-HUWID_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HU_DIM_CHANGED ).
  endif.

endmethod.
method SET_MATDE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_MATDE ).

  move IF_MATDE to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_MATDE_CHANGED ).
  endif.

endmethod.
method SET_PCPHU.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PCPHU ).

  move IS_PCPHU-PCPHU     to LS_PARAM-ATFLV.
  move IS_PCPHU-PCPHU_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PC_P_HU_CHANGED ).
  endif.

endmethod.
method SET_PDESC.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PDESC ).

  move IF_PDESC to LS_PARAM-STRNG.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_PROHE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROHE ).

  move IS_PROHE-PROHE     to LS_PARAM-ATFLV.
  move IS_PROHE-PROHE_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROD_DIM_CHANGED ).
  endif.

endmethod.
method SET_PROLE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROLE ).

  move IS_PROLE-PROLE     to LS_PARAM-ATFLV.
  move IS_PROLE-PROLE_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROD_DIM_CHANGED ).
  endif.

endmethod.
method SET_PROWI.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PROWI ).

  move IS_PROWI-PROWI     to LS_PARAM-ATFLV.
  move IS_PROWI-PROWI_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PROD_DIM_CHANGED ).
  endif.

endmethod.
method SET_PRSTY.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PRSTY ).

  move IF_PRSTY to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PRSTY_CHANGED ).
  endif.

endmethod.
method SET_PTYPE.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_PTYPE to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PTYPE_CHANGED ).
  endif.

endmethod.
method SET_WGRHU.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WGRHU ).

  move IS_WGRHU-WGRHU     to LS_PARAM-ATFLV.
  move IS_WGRHU-WGRHU_UOM to LS_PARAM-UNIT.
  move IF_SETBY           to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WGRHU_CHANGED ).
  endif.

endmethod.
