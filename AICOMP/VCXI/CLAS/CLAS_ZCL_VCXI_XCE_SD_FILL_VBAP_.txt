
class ZCL_VCXI_XCE_SD_FILL_VBAP definition
  public
  abstract
  create public .

public section.

  constants C_OBSNA_FILL_VBAP type STRING value 'FILL_VBAP' ##NO_TEXT.

  class-methods CLASS_CONSTRUCTOR .
  class-methods FILL_VBAP
    importing
      !IT_XVBAP type VA_VBAPVB_T
    changing
      !CS_VBAP type VBAP .
protected section.

  methods SAVE_TEXT
    importing
      !IS_VBAP type VBAP
      !IT_TEXT_VE type ZVCXI_XCE_SD_TT_TEXT_VE
    raising
      /VCXI/CX_CKX .
  methods FILL_VBAP_BY_VE
    importing
      !IS_VBAP_VE type ANY
    changing
      !CS_VBAP type VBAP
    raising
      /VCXI/CX_CKX .
  methods GET_GVCIN_CNF
    importing
      !IF_GVCIN_POS type /VCXI/VKCR_GVCIN
    returning
      value(RF_GVCIN_CNF) type /VCXI/VKCR_GVCIN
    raising
      /VCXI/CX_CKX .
  methods GET_START_SVCEL
  abstract
    importing
      !IR_SVC type ref to /VCXI/CL_VKSRA_SVC
      !IF_GVCIN_POS type /VCXI/VKCR_GVCIN
    exporting
      !EF_IVEMO type /VCXI/VKSC_IVEMO
    returning
      value(RR_SVCEL) type ref to /VCXI/CL_VKSRA_SVC_ELEMENT
    raising
      /VCXI/CX_CKX .
  methods ADJUST_VE
    importing
      !IF_GVCIN_CNF type /VCXI/VKCR_GVCIN
      !IF_GVCIN_POS type /VCXI/VKCR_GVCIN
      !IS_VBAP type VBAP
      !IT_XVBAP type VA_VBAPVB_T
    changing
      !CS_VBAP_VE type ANY
    raising
      /VCXI/CX_CKX .
private section.

  types:
    begin of YS_INSTANCE,
      CMATN       type /VCXI/VKC_CMATN,
      R_FILL_VBAP type ref to ZCL_VCXI_XCE_SD_FILL_VBAP,
    end   of YS_INSTANCE.

  types:
    begin of YS_BUFFER_VBAP_VE,
            GVCIN_POS   type /VCXI/VKCR_GVCIN,
            GVCIN_CNF   type /VCXI/VKCR_GVCIN,
            R_VBAP_VE   type ref to data,
          end   of YS_BUFFER_VBAP_VE .

  class-data:
    T_INSTANCE type sorted table of YS_INSTANCE with unique key CMATN.

  class-data:
    T_BUFFER_VBAP_VE type table of YS_BUFFER_VBAP_VE .

  methods FILL_BUFFER
    importing
      !IF_GVCIN_CNF type /VCXI/VKCR_GVCIN
      !IF_GVCIN_POS type /VCXI/VKCR_GVCIN
      !IS_VBAP type VBAP
      !IT_XVBAP type VA_VBAPVB_T
    raising
      /VCXI/CX_CKX .
  methods VERIFY_BUFFER
    importing
      !IF_GVCIN_CNF type /VCXI/VKCR_GVCIN
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_XCE_SD_FILL_VBAP definition
class ZCL_VCXI_XCE_SD_FILL_VBAP implementation.
  method ADJUST_VE.

    data: LS_XVBAP type VBAPVB,
          LS_VBAP  type VBAP,
          LS_TVAP  type TVAP.
    field-symbols: <T_MARM_VE> type ZVCXI_XCE_SD_TT_MARM_VE,
                   <T_TEXT_VE> type ZVCXI_XCE_SD_TT_TEXT_VE.


***--------------------------------------------------------------------------------------
*** Verify UMVKZ and UMVKN // UMZIZ and UMZIN
    move-corresponding CS_VBAP_VE to LS_VBAP.

*** Prefer Conversion Rates from Unit Conversion Table if available (in case of alternating UoM on MQ)
    assign component 'T_MARM_VE' of structure CS_VBAP_VE to <T_MARM_VE>.
    if SY-SUBRC eq 0 and
       LINE_EXISTS( <T_MARM_VE>[ LRMEI = IS_VBAP-VRKME ] ).
      LS_VBAP-UMVKZ = <T_MARM_VE>[ LRMEI = IS_VBAP-VRKME ]-UMREZ.
      LS_VBAP-UMVKN = <T_MARM_VE>[ LRMEI = IS_VBAP-VRKME ]-UMREN.
      LS_VBAP-UMZIZ = <T_MARM_VE>[ LRMEI = IS_VBAP-VRKME ]-UMREZ.
      LS_VBAP-UMZIN = <T_MARM_VE>[ LRMEI = IS_VBAP-VRKME ]-UMREN.
    endif.

*** Item with Schedule Lines
    if IS_VBAP-VRKME eq IS_VBAP-MEINS.
      LS_VBAP-UMVKZ = 1.
      LS_VBAP-UMVKN = 1.
    else.
      if LS_VBAP-UMVKZ is initial or
         LS_VBAP-UMVKN is initial.
        move IS_VBAP-UMVKZ to LS_VBAP-UMVKZ.
        move IS_VBAP-UMVKN to LS_VBAP-UMVKN.
      elseif ( LS_VBAP-UMVKZ eq 1 and
               LS_VBAP-UMVKN eq 1 ).
        move IS_VBAP-UMVKZ to LS_VBAP-UMVKZ.
        move IS_VBAP-UMVKN to LS_VBAP-UMVKN.
      endif.
    endif.

*** Item w/o Schedule Lines
    if IS_VBAP-ZIEME eq IS_VBAP-MEINS.
      LS_VBAP-UMZIZ = 1.
      LS_VBAP-UMZIN = 1.
    else.
      if LS_VBAP-UMZIZ is initial or
         LS_VBAP-UMZIN is initial.
        move IS_VBAP-UMZIZ to LS_VBAP-UMZIZ.
        move IS_VBAP-UMZIN to LS_VBAP-UMZIN.
      elseif ( LS_VBAP-UMZIZ eq 1 and
               LS_VBAP-UMZIN eq 1 ).
        move IS_VBAP-UMZIZ to LS_VBAP-UMZIZ.
        move IS_VBAP-UMZIN to LS_VBAP-UMZIN.
      endif.
    endif.

    move-corresponding LS_VBAP to CS_VBAP_VE.

***--------------------------------------------------------------------------------------
*** Get Config. Material & Profile Key
    data(LS_CMPRK) = /VCXI/CL_VKCR_GATEWAY=>GET_CMPRK( IF_GVCIN = IF_GVCIN_POS ).

*** Adjust Values for Lower-Level Items
    if LS_CMPRK-CMATN cp '*_MQ_CNF'.
***   Get Header Item
      read table IT_XVBAP into LS_XVBAP with key POSNR = IS_VBAP-UEPOS.
      check SY-SUBRC eq 0.

***   Adjust Weight of MQ Items by Item Quanity
      move-corresponding CS_VBAP_VE to LS_VBAP.
      if LS_XVBAP-KWMENG ne 0 and
         IS_VBAP-KWMENG  ne 0.
        LS_VBAP-BRGEW = LS_VBAP-BRGEW / LS_XVBAP-KWMENG * IS_VBAP-KWMENG.
        LS_VBAP-NTGEW = LS_VBAP-NTGEW / LS_XVBAP-KWMENG * IS_VBAP-KWMENG.
      else.
        clear: LS_VBAP-BRGEW, LS_VBAP-NTGEW.
      endif.
      move-corresponding LS_VBAP to CS_VBAP_VE.

***   No Text Update for Multi Quantity
      assign component 'T_TEXT_VE' of structure CS_VBAP_VE to <T_TEXT_VE>.
      if SY-SUBRC eq 0.
        clear <T_TEXT_VE>.
      endif.
    endif.

  endmethod.
  method CLASS_CONSTRUCTOR.

*** Define Observer for FILL_VBAP
    /VCXI/CL_VKCR_OBSERVER=>DEFINE_OBSERVER( IF_OBSNA          = C_OBSNA_FILL_VBAP
                                             IF_ACTION_INITIAL = ABAP_TRUE
                                             IF_ACTION_CHANGE  = ABAP_TRUE ).

*** Register/load instance of Sub-Class per Configurable Material
    T_INSTANCE = value #( "------ Packaging 2.0 ------
                          ( CMATN = 'VCXI_PX_SINGLE_CNF'   R_FILL_VBAP = new ZCL_VCXI_PXE_SD_FILL_VBAP( ) )
                          ( CMATN = 'VCXI_PX_SI_MQ_CNF'    R_FILL_VBAP = new ZCL_VCXI_PXE_SD_FILL_VBAP( ) )
                          ( CMATN = 'VCXI_PX_MULTI_CNF'    R_FILL_VBAP = new ZCL_VCXI_PXE_SD_FILL_VBAP( ) )    "Use Sales BOM Header as Source Element
                          ( CMATN = 'VCXI_PX_MU_C_CNF'     R_FILL_VBAP = new ZCL_VCXI_PXE_SD_FILL_VBAP( ) )
*                          ( CMATN = 'VCXI_PX_MU_MQ_CNF'    R_FILL_VBAP = new ZCL_VCXI_PXE_SD_FILL_VBAP( ) )    "No Source Element known

                          ( CMATN = 'VCXI_PX_SRA_CNF'      R_FILL_VBAP = new ZCL_VCXI_PXE_SD_FILL_VBAP( ) )
                          ( CMATN = 'VCXI_PX_SRA_MQ_CNF'   R_FILL_VBAP = new ZCL_VCXI_PXE_SD_FILL_VBAP( ) )
                          ( CMATN = 'VCXI_PX_MRA_CNF'      R_FILL_VBAP = new ZCL_VCXI_PXE_SD_FILL_VBAP( ) )    "Use Sales BOM Header as Source Element
                          ( CMATN = 'VCXI_PX_MRA_C_CNF'    R_FILL_VBAP = new ZCL_VCXI_PXE_SD_FILL_VBAP( ) )
*                          ( CMATN = 'VCXI_PX_MRA_MQ_CNF'   R_FILL_VBAP = new ZCL_VCXI_PXE_SD_FILL_VBAP( ) )    "No Source Element known

                          "------ Flexibles ------
                          ( CMATN = 'VCXI_FB_BAG_CNF'      R_FILL_VBAP = new ZCL_VCXI_F0E_SD_FILL_VBAP( ) )
                          ( CMATN = 'VCXI_FB_BA_MQ_CNF'    R_FILL_VBAP = new ZCL_VCXI_F0E_SD_FILL_VBAP( ) )
                          ( CMATN = 'VCXI_FF_FILM_CNF'     R_FILL_VBAP = new ZCL_VCXI_F0E_SD_FILL_VBAP( ) )
                          ( CMATN = 'VCXI_FF_FI_MQ_CNF'    R_FILL_VBAP = new ZCL_VCXI_F0E_SD_FILL_VBAP( ) )
                          ( CMATN = 'VCXI_FF_SE_CNF'       R_FILL_VBAP = new ZCL_VCXI_F0E_SD_FILL_VBAP( ) )
                          ( CMATN = 'VCXI_FF_SE_C_CNF'     R_FILL_VBAP = new ZCL_VCXI_F0E_SD_FILL_VBAP( ) )
                        ).

  endmethod.
  method FILL_BUFFER.

    data: LF_IVEMO type /VCXI/VKSC_IVEMO.
    data: LR_SVC   type ref to /VCXI/CL_VKSRA_SVC,
          LR_SVCEL type ref to /VCXI/CL_VKSRA_SVC_ELEMENT,
          LR_VALEX type ref to DATA.
    field-symbols: <S_VBAP_VE>  type ANY.


***--------------------------------------------------------------------------------------
*** Add to Buffer
    append value #( GVCIN_POS = IF_GVCIN_POS
                    GVCIN_CNF = IF_GVCIN_CNF
                  ) to T_BUFFER_VBAP_VE assigning field-symbol(<S_BUFFER_VBAP_VE>).

***--------------------------------------------------------------------------------------
*** Get SmartVC Instance
    LR_SVC = /VCXI/CL_VKSRA_SVC=>GET_INSTANCE( IF_GVCIN = IF_GVCIN_CNF ).

*** Get Starting Element
    LR_SVCEL = ME->GET_START_SVCEL( exporting IR_SVC       = LR_SVC
                                              IF_GVCIN_POS = IF_GVCIN_POS
                                    importing EF_IVEMO     = LF_IVEMO ).

*** Get Extracted Values of SmartVC
    try.
        <S_BUFFER_VBAP_VE>-R_VBAP_VE ?= LR_SVC->GET_VALEX( IF_IVEMO       = LF_IVEMO
                                                           IR_SVC_ELEMENT = LR_SVCEL ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        if LR_CX_CKX->F_MSGTY eq 'E'          and
           LR_CX_CKX->F_MSGID eq '/VCXI/VKSC' and
           LR_CX_CKX->F_MSGNO eq '803'.
          "No Value Extraction means we don't change VBAP.
          clear <S_BUFFER_VBAP_VE>-R_VBAP_VE.
        else.
          raise exception LR_CX_CKX.
        endif.
    endtry.
    check <S_BUFFER_VBAP_VE>-R_VBAP_VE is bound.
    assign <S_BUFFER_VBAP_VE>-R_VBAP_VE->* to <S_VBAP_VE>.

*** Adjust Value Extraction
    ME->ADJUST_VE( exporting IF_GVCIN_CNF = IF_GVCIN_CNF
                             IF_GVCIN_POS = IF_GVCIN_POS
                             IS_VBAP      = IS_VBAP
                             IT_XVBAP     = IT_XVBAP
                   changing  CS_VBAP_VE   = <S_VBAP_VE> ).

  endmethod.
  method FILL_VBAP.

    data: LF_GVCIN_POS type /VCXI/VKCR_GVCIN,
          LF_GVCIN_CNF type /VCXI/VKCR_GVCIN.
    data: LS_BUFFER_VBAP_VE type YS_BUFFER_VBAP_VE,
          LS_VBAP           type VBAP.
    field-symbols: <S_VBAP_VE> type ANY,
                   <T_TEXT_VE> type ZVCXI_XCE_SD_TT_TEXT_VE.


    try.
        check CS_VBAP-CUOBJ is not initial.

***     Get GUID of Configuration Instance
        LF_GVCIN_POS = /VCXI/CL_VKCR_GATEWAY=>GET_GVCIN_BY_CUOBJ( IF_CUOBJ = CS_VBAP-CUOBJ ).

***--------------------------------------------------------------------------------------
***     Get Instance (to allow custom-specific redefinitions)
        data(LS_CMPRK) = /VCXI/CL_VKCR_GATEWAY=>GET_CMPRK( IF_GVCIN = LF_GVCIN_POS ).
        data(LR_FILL_VBAP) = value #( T_INSTANCE[ CMATN = LS_CMPRK-CMATN ]-R_FILL_VBAP optional ).
        check LR_FILL_VBAP is bound.

***     Get relevant Configuration for Extraction
        LF_GVCIN_CNF = LR_FILL_VBAP->GET_GVCIN_CNF( IF_GVCIN_POS = LF_GVCIN_POS ).
        check LF_GVCIN_CNF is not initial.


***--------------------------------------------------------------------------------------
***     Verify Validity of Buffer based on Configuration
        LR_FILL_VBAP->VERIFY_BUFFER( IF_GVCIN_CNF = LF_GVCIN_CNF ).

***     Fill Buffer for Position if needed
        read table T_BUFFER_VBAP_VE with key GVCIN_POS = LF_GVCIN_POS
                                    transporting no fields.
        if SY-SUBRC ne 0.
          LR_FILL_VBAP->FILL_BUFFER( IF_GVCIN_CNF = LF_GVCIN_CNF
                                     IF_GVCIN_POS = LF_GVCIN_POS
                                     IS_VBAP      = CS_VBAP
                                     IT_XVBAP     = IT_XVBAP ).
        endif.

***--------------------------------------------------------------------------------------
***     Access Buffer for VBAP Value Extract
        read table T_BUFFER_VBAP_VE into LS_BUFFER_VBAP_VE
                                    with key GVCIN_POS = LF_GVCIN_POS.
        if SY-SUBRC eq 0 and
           LS_BUFFER_VBAP_VE-R_VBAP_VE is bound.
***       Dereference Extract
          assign LS_BUFFER_VBAP_VE-R_VBAP_VE->* to <S_VBAP_VE>.

***       Update VBAP with Extracted Values
          LR_FILL_VBAP->FILL_VBAP_BY_VE( exporting IS_VBAP_VE = <S_VBAP_VE>
                                         changing  CS_VBAP    = CS_VBAP ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        if SY-BATCH ne ABAP_TRUE.
          LR_CX_CKX->SHOW_MESSAGE( ).
        endif.
    endtry.

  endmethod.
  method FILL_VBAP_BY_VE.

    field-symbols: <T_TEXT_VE> type ZVCXI_XCE_SD_TT_TEXT_VE.


*** Update VBAP with Extracted Values
    move-corresponding IS_VBAP_VE to CS_VBAP.

*** Save Line Item Texts
    assign component 'T_TEXT_VE' of structure IS_VBAP_VE to <T_TEXT_VE>.
    if SY-SUBRC eq 0.
      SAVE_TEXT( IS_VBAP    = CS_VBAP
                 IT_TEXT_VE = <T_TEXT_VE> ).
    endif.

  endmethod.
  method GET_GVCIN_CNF.

*** Get Root Configuration based on Model
    data(LT_VCMDL) = /VCXI/CL_VKCR_GATEWAY=>GET_MODEL( IF_GVCIN = IF_GVCIN_POS ).
    RF_GVCIN_CNF = value #( LT_VCMDL[ PARENT = SPACE ]-GVCIN optional ).

  endmethod.
  method SAVE_TEXT.

    data: LS_TEXT_VE type ZVCXI_XCE_SD_S_TEXT_VE,
          LS_HEADER  type THEAD.
    field-symbols: <T_XTHEAD> type TDT_THEADVB.


***--------------------------------------------------------------------------------------
*** No update for existing materials
    if IS_VBAP-MATNR np 'VCXI_*'.
      exit.
    endif.

*** No substitution if sales order item already saved
    if IS_VBAP-VBELN is not initial.
      select single POSNR
             from VBAP
             into @data(LF_POSNR)
            where VBELN = @IS_VBAP-VBELN
             and  POSNR = @IS_VBAP-POSNR.
      if LF_POSNR is not initial.
        exit.
      endif.
    endif.

***--------------------------------------------------------------------------------------
    loop at IT_TEXT_VE into LS_TEXT_VE where TDSPRAS is not initial.
***   Define Text Header
      LS_HEADER = value #( TDID     = LS_TEXT_VE-TDID
                           TDOBJECT = 'VBBP'
                           TDSPRAS  = LS_TEXT_VE-TDSPRAS ).

      if IS_VBAP-VBELN is initial.
***     If the document is not saved, there is no VBELN available.
***     Instead the 'XXXXXXXXXX' has to be used as placeholder
        concatenate 'XXXXXXXXXX' IS_VBAP-POSNR into LS_HEADER-TDNAME.
      else.
        concatenate IS_VBAP-VBELN IS_VBAP-POSNR into LS_HEADER-TDNAME.
      endif.


***   No substitution of text for existing materials if text determination created it
      assign ('(SAPMV45A)XTHEAD[]') to <T_XTHEAD>.
      if <T_XTHEAD> is assigned and
         LINE_EXISTS( <T_XTHEAD>[ TDID     = LS_HEADER-TDID
                                  TDNAME   = LS_HEADER-TDNAME
                                  TDOBJECT = LS_HEADER-TDOBJECT ] ).
        continue.
      endif.

***   Set new Text
      call function 'SAVE_TEXT'
        exporting
          HEADER   = LS_HEADER
        tables
          LINES    = LS_TEXT_VE-T_TLINE
        exceptions
          ID       = 1
          LANGUAGE = 2
          NAME     = 3
          OBJECT   = 4
          others   = 5.

      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.
    endloop.

  endmethod.
  method VERIFY_BUFFER.

***--------------------------------------------------------------------------------------
*** Refresh Buffer if Configuration hast changed (Observer was marked)
    if /VCXI/CL_VKCR_OBSERVER=>IS_MARKED( IF_GVCIN = IF_GVCIN_CNF
                                          IF_OBSNA = C_OBSNA_FILL_VBAP ) eq ABAP_TRUE.
***   Refresh Buffer
      delete T_BUFFER_VBAP_VE where GVCIN_CNF = IF_GVCIN_CNF.
    endif.

  endmethod.
