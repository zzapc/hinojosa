
class ZCL_VCXI_P1SS_BL_FDMDL definition
  public
  inheriting from ZCL_VCXI_PXSS_BL_FDMDL
  create public .

public section.

  constants C_FDMDL_CFG type ZVCXI_PXSS_FDMDL value 'CFG' ##NO_TEXT.
  constants C_FDMDL_CRPART type ZVCXI_PXSS_FDMDL value 'CRPART' ##NO_TEXT.
  constants C_FDMDL_CRPRDTL type ZVCXI_PXSS_FDMDL value 'CRPRDTL' ##NO_TEXT.
  constants C_FDMDL_CRSHT type ZVCXI_PXSS_FDMDL value 'CRSHT' ##NO_TEXT.
  constants C_IFDMV_CRL type ZVCXI_PXSS_IFDMV value 'P1_CRL' ##NO_TEXT.
  constants C_IFDMV_CRPRDTL type ZVCXI_PXSS_IFDMV value 'P1_CRPRDTL' ##NO_TEXT.
  constants C_IFDMV_DCT type ZVCXI_PXSS_IFDMV value 'P1_DCT' ##NO_TEXT.
  constants C_IFDMV_FANF type ZVCXI_PXSS_IFDMV value 'P1_FANF' ##NO_TEXT.
  constants C_IFDMV_INL type ZVCXI_PXSS_IFDMV value 'P1_INL' ##NO_TEXT.
  constants C_IFDMV_SE_DCT type ZVCXI_PXSS_IFDMV value 'P1_SE_DCT' ##NO_TEXT.
  constants C_IFDMV_SHT type ZVCXI_PXSS_IFDMV value 'P1_SHT' ##NO_TEXT.
  constants C_SRCIN_CORR type ZVCXI_P1SS_SRCIN value 'CORR' ##NO_TEXT.
  constants C_SRCIN_PROC type ZVCXI_P1SS_SRCIN value 'PROC' ##NO_TEXT.
  constants C_SRCIN_SFG type ZVCXI_P1SS_SRCIN value 'SFG' ##NO_TEXT.

  methods ADD_LAMI
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IF_ISELF type /VCXI/CKX_ID
      !IF_FDMDL type ZVCXI_PXSS_FDMDL
      !IF_IFDMV type ZVCXI_PXSS_IFDMV optional
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods ADJ_CSTEP_CLOS
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IS_FDI_CSTEP_CLOS type ZVCXI_P1SS_S_FDI_CSTEP_CLOS
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    raising
      /VCXI/CX_CKX .
  methods ADJ_SRCIN
    importing
      !IF_SRCIN type ZVCXI_P1SS_SRCIN
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE optional
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_SRCIN
    importing
      !IR_GATE_OUT type ref to /VCXI/CL_VKSR_GATE
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !IT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE optional
    exporting
      !ER_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_SRCIN) type ZVCXI_P1SS_SRCIN
    raising
      /VCXI/CX_CKX .

  methods ADD_CSTEP
    redefinition .
  methods ADD_XFG
    redefinition .
  methods DET_IFDMV
    redefinition .
  methods GET_CLSUI
    redefinition .
  methods GET_XSHT
    redefinition .
  methods SET_XSHT
    redefinition .
  methods ADJ_CADIF
    redefinition .
protected section.

  methods ADJ_SRCIN_CORR_TO_SFG
    importing
      !IF_SRCIN type ZVCXI_P1SS_SRCIN
      !IT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE optional
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_INIT_DCT
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_INIT_FANF
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_INIT_INL
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_INIT_SE_DCT
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_INIT_SHT
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .
  methods GET_INIT_CRL
    changing
      !CT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
      !CT_XCONG type ZVCXI_PXSS_TT_XCONG
    raising
      /VCXI/CX_CKX .

  methods INIT_FDMDL
    redefinition .
private section.
endclass. "ZCL_VCXI_P1SS_BL_FDMDL definition
class ZCL_VCXI_P1SS_BL_FDMDL implementation.
  method ADD_CSTEP.

    data: LS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP.
    data: LR_GATE_OUT  type ref to /VCXI/CL_VKSR_GATE.


    case ME->F_IFDMV.
***   Adjust Output Gate for Separation
      when C_IFDMV_SE_DCT.
        loop at CT_FASTD_XCOMP into LS_FASTD_XCOMP.
          if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'SSTEP_DCUT' ] ).
            LR_GATE_OUT = LS_FASTD_XCOMP-T_DATA[ ISELF = 'SSTEP_DCUT' ]-R_GATE.
            exit.
          endif.
        endloop.

      when others.
        LR_GATE_OUT = IR_GATE_OUT.
    endcase.

    SUPER->ADD_CSTEP( exporting IF_ISELF       = IF_ISELF
                                IR_GATE_OUT    = LR_GATE_OUT
                                IR_DATA        = IR_DATA
                                IT_FDMEX       = IT_FDMEX
                                IF_INDEX       = IF_INDEX
                      changing  CT_FASTD_XCOMP = CT_FASTD_XCOMP ).

  endmethod.
  method ADD_LAMI.

    data: LS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP.
    data: LR_GATE_OUT  type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Identify Variant
    data(LF_IFDMV) = cond #( when IF_IFDMV is supplied then IF_IFDMV
                                                       else value #( ZCL_VCXI_PXSS_BL_FDMDL=>T_FDMV[ FDMDL = IF_FDMDL ]-IFDMV optional ) ).

    case ME->F_IFDMV.
***   Adjust Output Gate for Separation
      when C_IFDMV_SE_DCT.
        loop at CT_FASTD_XCOMP into LS_FASTD_XCOMP.
          if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'SSTEP_DCUT' ] ).
            LR_GATE_OUT = LS_FASTD_XCOMP-T_DATA[ ISELF = 'SSTEP_DCUT' ]-R_GATE.
            exit.
          endif.
        endloop.

      when others.
        LR_GATE_OUT = IR_GATE_OUT.
    endcase.

*** Replace Sheet by related Connection Out
    LR_GATE_OUT = ME->VALIDATE_GATE_OUT( IR_GATE_OUT = LR_GATE_OUT ).
    check LR_GATE_OUT is bound.

*** Get excluded Gates
    data(LT_GATE_EXCLUDE) = ME->GET_GATE_EXCLUDE( IR_GATE_OUT    = IR_GATE_OUT
                                                  IT_FASTD_XCOMP = CT_FASTD_XCOMP ).

***------------------------------------------------------------------------------------------------
    case IF_ISELF.
      when 'LAMI'.
***     Search for Corrugation
        loop at CT_FASTD_XCOMP assigning field-symbol(<S_FASTD_XCOMP>).
          check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP>-R_GATE ] ).

          if LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = 'CORR' ] ).
***         Add Inline Lamination
            append value #( IPARE  = 'INPUT'
                            ISELF  = IF_ISELF
                          ) to <S_FASTD_XCOMP>-T_DATA.

***         Add Sheet Placeholder
            append value #( IPARE = 'LAMI'       ISELF = C_XSHT_PLACEHOLDER
                          ) to <S_FASTD_XCOMP>-T_DATA.

***         Add Sub Fast Data Model for Sheet (replaces Placeholder)
            ME->ADD_SUB_BL_FDMDL( exporting IF_FDMDL       = IF_FDMDL
                                            IF_IFDMV       = LF_IFDMV
                                  changing  CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                            CT_XCONG       = CT_XCONG ).
            exit.
          endif.
        endloop.

      when 'CSTEP_LAMI'.
***     Get Component of Outbound Gate
        check CT_FASTD_XCOMP is not initial.
        data(LR_GATE_XCOMP) = ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = LR_GATE_OUT
                                                                 IT_FASTD_XCOMP = CT_FASTD_XCOMP ).
        check LR_GATE_XCOMP is bound.
        assign CT_FASTD_XCOMP[ R_GATE = LR_GATE_XCOMP ] to <S_FASTD_XCOMP>.

***     Add Inline Lamination
        insert value #( IPARE  = 'CONV'
                        ISELF  = IF_ISELF
                      ) into <S_FASTD_XCOMP>-T_DATA index 1.

***     Add Sheet Placeholder
        insert value #( IPARE = IF_ISELF       ISELF = C_XSHT_PLACEHOLDER
                      ) into <S_FASTD_XCOMP>-T_DATA index 2.

***     Add Sub Fast Data Model for Sheet (replaces Placeholder)
        ME->ADD_SUB_BL_FDMDL( exporting IF_FDMDL       = IF_FDMDL
                                        IF_IFDMV       = LF_IFDMV
                              changing  CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                        CT_XCONG       = CT_XCONG ).
    endcase.

  endmethod.
  method ADD_XFG.

    data: LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP.
    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_XCONG>       type ZVCXI_PXSS_S_XCONG.


    check ME->F_IFDMV = C_IFDMV_SE_DCT.

*** Search for Separation Step
    loop at CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      if LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = 'SSTEP_DCUT' ] ).

***     Create new Connection
        try.
            append value #( GXCON_OUT = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( )
                            GXCON_IN  = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( )
                          ) to CT_XCONG assigning <S_XCONG>.
          catch CX_UUID_ERROR into data(LR_CX_UUID_ERROR).
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_UUID_ERROR ).
        endtry.

***     Add new Connection Out
        append value #( IPARE = 'OUTPUT'
                        ISELF = 'CRCONO'
                        R_DATA = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT )
                        T_FDMEX = value #( ( conv #( 'NOUTT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

***     Create new Component
        append value #( ID     = 'COMP_P1'
                        XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                        T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'CRCONI'      R_DATA = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN ) )
                                          ( IPARE = 'OUTPUT'  ISELF = 'CFG' )
                                        )
                      ) to LT_FASTD_XCOMP.
      endif.
    endloop.

*** Add added components to overall component list
    append lines of LT_FASTD_XCOMP to CT_FASTD_XCOMP.

  endmethod.
  method ADJ_CADIF.

    data: LF_CNT_ONEUP type I,
          LF_CNT_MLTUP type I.
    data: LS_CADIF_ONEUP_IO type ZVCXI_P1SS_S_CADIF_ONEUP_IO,
          LS_FDI_CORR       type ZVCXI_P1SS_S_FDI_CORR,
          LS_FDI_CFG        type ZVCXI_P1SS_S_FDI_CFG.
    field-symbols: <F_GCADO> type ZVCXI_PXS_GCADO,
                   <F_GCADM> type ZVCXI_PXS_GCADM.


*** Process Super
    SUPER->ADJ_CADIF( changing CT_CADIF_ONEUP_IO_P1 = CT_CADIF_ONEUP_IO_P1
                               CT_CADIF_MLTUP_IO    = CT_CADIF_MLTUP_IO
                               CT_FASTD_XCOMP       = CT_FASTD_XCOMP
                               CT_XCONG             = CT_XCONG ).

***------------------------------------------------------------------------------------------------
*** Fill Fast Data Information Structures
    loop at CT_FASTD_XCOMP assigning field-symbol(<S_FASTD_XCOMP>).

***   Fill existing Elements
      loop at <S_FASTD_XCOMP>-T_DATA assigning field-symbol(<S_FASTD_XCOMP_DATA>).
        assign <S_FASTD_XCOMP_DATA>-R_DATA->* to field-symbol(<S_DATA>).
        case <S_FASTD_XCOMP_DATA>-ISELF.
          when 'CORR'.
            LS_CADIF_ONEUP_IO = corresponding #( CT_CADIF_ONEUP_IO_P1[ 1 ] ).
            LS_FDI_CORR = corresponding #( <S_DATA> ).
            LS_FDI_CORR-SABOA = LS_CADIF_ONEUP_IO-BOARD.
            <S_DATA> = corresponding #( base ( <S_DATA> ) LS_FDI_CORR ).

          when 'CSTEP_DCUT' or
               'SSTEP_DCUT'.
            LF_CNT_MLTUP += 1.
***         Update MultiUp GUID based on new Element
            assign component 'GCADM' of structure CT_CADIF_MLTUP_IO[ LF_CNT_MLTUP ] to <F_GCADM>.
            <F_GCADM> = cast ZIF_VCXI_PXSS_DCUT( <S_FASTD_XCOMP_DATA>-R_GATE->R_CLSPR )->GET_GCADM( ).

          when 'CFG'.
            LF_CNT_ONEUP += 1.
***         Update OneUp GUID based on new Element
            assign component 'GCADO' of structure CT_CADIF_ONEUP_IO_P1[ LF_CNT_ONEUP ] to <F_GCADO>.
            <F_GCADO> = cast ZCL_VCXI_P1SS_PR_CFG( <S_FASTD_XCOMP_DATA>-R_GATE->R_CLSPR )->GET_CRBPX( )->F_GCADO.

          when 'CRPART'.
            LF_CNT_ONEUP += 1.
***         Update OneUp GUID based on new Element
            assign component 'GCADO' of structure CT_CADIF_ONEUP_IO_P1[ LF_CNT_ONEUP ] to <F_GCADO>.
            <F_GCADO> = cast ZCL_VCXI_P1SS_PR_CRPART( <S_FASTD_XCOMP_DATA>-R_GATE->R_CLSPR )->GET_CRBPX( )->F_GCADO.

        endcase.
      endloop.
    endloop.

***------------------------------------------------------------------------------------------------
*** Additional Adjustements to OneUps
    clear LF_CNT_ONEUP.
    loop at ME->T_GATE_OUT into data(LR_GATE_OUT).
      LF_CNT_ONEUP = SY-TABIX.
      LS_CADIF_ONEUP_IO = corresponding #( CT_CADIF_ONEUP_IO_P1[ LF_CNT_ONEUP ] ).

***   Add Printing Steps
      loop at LS_CADIF_ONEUP_IO-T_PRINT_COM into data(LS_PRINT_COM).
        ME->ADD_CSTEP( exporting IF_ISELF       = 'CSTEP_PRINT'
                                 IR_GATE_OUT    = LR_GATE_OUT
                                 IR_DATA        = new ZVCXI_P1SS_S_FDI_CSTEP_PRINT( corresponding #( LS_PRINT_COM ) )
                                 IT_FDMEX       = value #( ( conv #( 'T_FDI_TINK' ) ) )
                       changing  CT_FASTD_XCOMP = CT_FASTD_XCOMP ).
      endloop.

***   Add Closing Step
      if LS_CADIF_ONEUP_IO-JOITY is not initial.
        ME->ADD_CSTEP( exporting IF_ISELF       = 'CSTEP_CLOS'
                                 IR_GATE_OUT    = LR_GATE_OUT
                                 IR_DATA        = new ZVCXI_P1SS_S_FDI_CSTEP_CLOS( JOITY = LS_CADIF_ONEUP_IO-JOITY )
                                 IF_INDEX       = 99  "Last Step
                       changing  CT_FASTD_XCOMP = CT_FASTD_XCOMP ).
      endif.
    endloop.

  endmethod.
  method ADJ_CSTEP_CLOS.

    data: LR_GATE_OUT   type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP.


*** Ignore Fast Data Model "Procurement Detail"
    check ME->F_FDMDL ne C_FDMDL_CRPRDTL.

***------------------------------------------------------------------------------------------------
*** Replace Part / Sheet by related Connection Out
    LR_GATE_OUT = ME->VALIDATE_GATE_OUT( IR_GATE_OUT = IR_GATE_OUT ).
    check LR_GATE_OUT is bound.

***------------------------------------------------------------------------------------------------
*** Get Component for Conversion
    check CT_FASTD_XCOMP is not initial.
    LR_GATE_XCOMP = ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = LR_GATE_OUT
                                                       IT_FASTD_XCOMP = CT_FASTD_XCOMP ).
    check LR_GATE_XCOMP is bound.
    assign CT_FASTD_XCOMP[ R_GATE = LR_GATE_XCOMP ] to <S_FASTD_XCOMP>.

*** Add/Remove Closing Step
    if IS_FDI_CSTEP_CLOS-JOITY is not initial.
      if not LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = 'CSTEP_CLOS' ] ).
        append value #( IPARE = 'CONV'
                        ISELF = 'CSTEP_CLOS'
                        R_DATA = new ZVCXI_P1SS_S_FDI_CSTEP_CLOS( IS_FDI_CSTEP_CLOS )
                      ) to <S_FASTD_XCOMP>-T_DATA.
      endif.
    else.
      delete <S_FASTD_XCOMP>-T_DATA where ISELF = 'CSTEP_CLOS'.
    endif.

  endmethod.
  method ADJ_SRCIN.

    data: LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.


*** Ignore Fast Data Model "Procurement Detail"
    check ME->F_FDMDL ne C_FDMDL_CRPRDTL.

*** Get excluded Gates
    LT_GATE_EXCLUDE = cond #( when IT_GATE_EXCLUDE is supplied then IT_GATE_EXCLUDE
                              else ME->GET_GATE_EXCLUDE( IR_GATE_OUT    = IR_GATE_OUT
                                                         IT_FASTD_XCOMP = CT_FASTD_XCOMP ) ).

*** Start based on current Source
    case ME->GET_SRCIN( IR_GATE_OUT     = IR_GATE_OUT
                        IT_FASTD_XCOMP  = CT_FASTD_XCOMP
                        IT_GATE_EXCLUDE = LT_GATE_EXCLUDE ).
***--------------------------------------------------------------------------------------
      when C_SRCIN_CORR.    " Input Source - Corrugation
        case IF_SRCIN.
          when C_SRCIN_PROC.    " Input Source - Procurement
            ME->REPLACE_XCOMP_DATA( exporting IF_ISELF_OLD    = 'CORR'
                                              IF_ISELF_NEW    = 'MS_CRPROC'
                                              IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                                    changing  CT_FASTD_XCOMP  = CT_FASTD_XCOMP
                                              CT_XCONG        = CT_XCONG ).
          when C_SRCIN_SFG.     " Input Source - Semi-finished good
            ME->ADJ_SRCIN_CORR_TO_SFG( exporting IF_SRCIN        = IF_SRCIN
                                                 IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                                       changing  CT_FASTD_XCOMP  = CT_FASTD_XCOMP
                                                 CT_XCONG        = CT_XCONG ).
        endcase.

***--------------------------------------------------------------------------------------
      when C_SRCIN_PROC.    " Input Source - Procurement
        case IF_SRCIN.
          when C_SRCIN_CORR.    " Input Source - Corrugation
            ME->REPLACE_XCOMP_DATA( exporting IF_ISELF_OLD    = 'MS_CRPROC'
                                              IF_ISELF_NEW    = 'CORR'
                                              IR_DATA         = new ZVCXI_P1SS_S_FDI_CORR( SCORE_FAALL = ABAP_TRUE )
                                              IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                                    changing  CT_FASTD_XCOMP  = CT_FASTD_XCOMP
                                              CT_XCONG        = CT_XCONG ).
          when C_SRCIN_SFG.     " Input Source - Semi-finished good
            ME->REPLACE_XCOMP_DATA( exporting IF_ISELF_OLD    = 'MS_CRPROC'
                                              IF_ISELF_NEW    = 'CORR'
                                              IR_DATA         = new ZVCXI_P1SS_S_FDI_CORR( SCORE_FAALL = ABAP_TRUE )
                                              IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                                    changing  CT_FASTD_XCOMP  = CT_FASTD_XCOMP
                                              CT_XCONG        = CT_XCONG ).
            ME->ADJ_SRCIN_CORR_TO_SFG( exporting IF_SRCIN        = IF_SRCIN
                                                 IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                                       changing  CT_FASTD_XCOMP  = CT_FASTD_XCOMP
                                                 CT_XCONG        = CT_XCONG ).
        endcase.

***--------------------------------------------------------------------------------------
      when C_SRCIN_SFG.     " Input Source - Semi-finished good
        case IF_SRCIN.
          when C_SRCIN_CORR.    " Input Source - Corrugation
            ME->MERGE_FASTD_XCOMP( exporting IF_ISELF       = 'CORR'
                                   changing  CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                             CT_XCONG       = CT_XCONG ).
          when C_SRCIN_PROC.    " Input Source - Procurement
            ME->MERGE_FASTD_XCOMP( exporting IF_ISELF       = 'CORR'
                                   changing  CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                             CT_XCONG       = CT_XCONG ).
            ME->REPLACE_XCOMP_DATA( exporting IF_ISELF_OLD    = 'CORR'
                                              IF_ISELF_NEW    = 'MS_CRPROC'
                                              IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                                    changing  CT_FASTD_XCOMP  = CT_FASTD_XCOMP
                                              CT_XCONG        = CT_XCONG ).
        endcase.
    endcase.

  endmethod.
  method ADJ_SRCIN_CORR_TO_SFG.

    data: LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP.
    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_XCONG>       type ZVCXI_PXSS_S_XCONG.


*** Search for Corrugation
    loop at CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      check not LINE_EXISTS( IT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP>-R_GATE ] ).

      if LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = 'CORR' ] ).
***     Buffer Corrugation Data and remove from original Component
        LS_FASTD_XCOMP_DATA =  <S_FASTD_XCOMP>-T_DATA[ ISELF = 'CORR' ].

***     Create new Connection
        try.
            append value #( GXCON_OUT = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( )
                            GXCON_IN  = CL_SYSTEM_UUID=>CREATE_UUID_C22_STATIC( )
                          ) to CT_XCONG assigning <S_XCONG>.
          catch CX_UUID_ERROR into data(LR_CX_UUID_ERROR).
            /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_UUID_ERROR ).
        endtry.

***     Replace Corrugation though Connection In
        delete <S_FASTD_XCOMP>-T_DATA where ISELF = 'CORR'.
        append value #( IPARE = 'INPUT'
                        ISELF = 'CRCONI'
                        R_DATA = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN )
                      ) to <S_FASTD_XCOMP>-T_DATA.

***     Create new Component
        append value #( ID     = <S_FASTD_XCOMP>-ID
                        POSID  = <S_FASTD_XCOMP>-POSID - 5        "before current
                        XCSTY  = <S_FASTD_XCOMP>-XCSTY
                        T_DATA = value #( ( IPARE  = LS_FASTD_XCOMP_DATA-IPARE
                                            ISELF  = LS_FASTD_XCOMP_DATA-ISELF
                                            R_DATA = LS_FASTD_XCOMP_DATA-R_DATA )
                                          ( IPARE = 'OUTPUT'
                                            ISELF = 'CRCONO'
                                            R_DATA = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT )
                                            T_FDMEX = value #( ( conv #( 'NOUTT' ) ) ) )
                                        )
                      ) to LT_FASTD_XCOMP.
      endif.
    endloop.

*** Add added components to overall component list
    append lines of LT_FASTD_XCOMP to CT_FASTD_XCOMP.

  endmethod.
  method DET_IFDMV.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


*** Get Configuration Structure
    SUPER->DET_IFDMV( importing ET_FASTD_XCOMP = ET_FASTD_XCOMP ).
    check ME->T_GATE_OUT is not initial.

***------------------------------------------------------------------------------------------------
*** Identify Variant based on Outbound Gate
    case type of ME->T_GATE_OUT[ 1 ]->R_CLSPR.
***   Sheet
      when type ZCL_VCXI_PXSS_PR_XSHT.
        ME->F_IFDMV = C_IFDMV_SHT.
***   Procurement Details
      when type ZIF_VCXI_P4SS_PRDTL.
        ME->F_IFDMV = C_IFDMV_CRPRDTL.
    endcase.
    check ME->F_IFDMV is initial.

***------------------------------------------------------------------------------------------------
*** Identify Variant based on Fast Data Integration Information
    loop at ET_FASTD_XCOMP into LS_FASTD_XCOMP.
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'CSTEP_FANF' ] ).
        ME->F_IFDMV = C_IFDMV_FANF.
      endif.
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'CSTEP_WIND' ] ).
        ME->F_IFDMV = C_IFDMV_CRL.
      endif.
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'CSTEP_SSS' ] ).
        ME->F_IFDMV = C_IFDMV_INL.
      endif.
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'CSTEP_DCUT' ] ).
        ME->F_IFDMV = C_IFDMV_DCT.
      endif.
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'SSTEP_DCUT' ] ).
        ME->F_IFDMV = C_IFDMV_SE_DCT.
        exit.
      endif.
    endloop.

    if ME->F_IFDMV is initial and
       LINES( ME->T_GATE_OUT ) eq 1.
***   Fallback to Sheet
      ME->F_IFDMV = C_IFDMV_SHT.
    endif.

  endmethod.
  method GET_CLSUI.

    RF_CLSUI = 'ZCL_VCXI_P1SS_UI_FDMDL'.

  endmethod.
  method GET_INIT_CRL.

    field-symbols: <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP.


***--------------------------------------------------------------------------------------
*** Define Structure
    append value #( ID     = 'COMP_P1'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'CORR'        R_DATA = new ZVCXI_P1SS_S_FDI_CORR( SCORE_FAALL = ABAP_TRUE ) )
                                      ( IPARE = 'CONV'    ISELF = 'CSTEP_WIND'  )
                                    )
                  ) to CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.


***--------------------------------------------------------------------------------------
    case ME->F_FDMDL.
      when C_FDMDL_CFG.
***     Add Finished Good
        append value #( IPARE = 'OUTPUT'  ISELF = 'CFG'  R_DATA = new ZVCXI_P1SS_S_FDI_CFG( FEFCO = '0100'
                                                                                            FLUTO = 'V'
                                                                                            JOIPO = ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE )
                                                         T_FDMEX = value #( ( conv #( 'NOUTT' ) )
                                                                            ( conv #( 'COMPR' ) )
                                                                            ( conv #( 'ROLEN' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

    endcase.

  endmethod.
  method GET_INIT_DCT.

    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_XCONG>       type ZVCXI_PXSS_S_XCONG.


***--------------------------------------------------------------------------------------
*** Define Structure
    append value #( ID     = 'COMP_P1'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'CORR'        R_DATA = new ZVCXI_P1SS_S_FDI_CORR(       SCORE_FAALL = ABAP_TRUE ) )
                                      ( IPARE = 'CONV'    ISELF = 'CSTEP_DCUT'  R_DATA = new ZVCXI_P1SS_S_FDI_CSTEP_DCUT( SCORE_FAALL = ABAP_TRUE )
                                                                                T_FDMEX = value #( ( conv #( 'TDCUT' ) )
                                                                                                   ( conv #( 'NOUTW' ) )
                                                                                                   ( conv #( 'NOUTL' ) ) ) )
                                    )
                  ) to CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.


***--------------------------------------------------------------------------------------
    case ME->F_FDMDL.
      when 'CFG'.
***     Add Finished Good
        append value #( IPARE = 'OUTPUT'  ISELF = 'CFG' ) to <S_FASTD_XCOMP>-T_DATA.

      when 'CRPART'.
***     Create new Connection
        append ME->GET_NEW_XCONG( ) to CT_XCONG assigning <S_XCONG>.
        append value #( IPARE = 'OUTPUT'  ISELF = 'CRCONO'      R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT )
                                                                T_FDMEX = value #( ( conv #( 'NOUTT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

***     Add Part
        assign CT_FASTD_XCOMP[ ID = 'COMP_P3' ] to <S_FASTD_XCOMP>.
        append value #( IPARE = 'CSTEP_ASMBL'  ISELF = 'CRPART'
                      ) to <S_FASTD_XCOMP>-T_DATA.
        append value #( IPARE = 'CRPART'       ISELF = 'CRCONI'   R_DATA  = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN )
                      ) to <S_FASTD_XCOMP>-T_DATA.

    endcase.

  endmethod.
  method GET_INIT_FANF.

    field-symbols: <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP.


***--------------------------------------------------------------------------------------
*** Define Structure
    append value #( ID     = 'COMP_P1'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'CORR'        R_DATA = new ZVCXI_P1SS_S_FDI_CORR( SCORE_FAALL = ABAP_TRUE ) )
                                      ( IPARE = 'CONV'    ISELF = 'CSTEP_FANF' )
                                    )
                  ) to CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.


***--------------------------------------------------------------------------------------
    case ME->F_FDMDL.
      when C_FDMDL_CFG.
***     Add Finished Good
        append value #( IPARE = 'OUTPUT'  ISELF = 'CFG'  R_DATA = new ZVCXI_P1SS_S_FDI_CFG( FEFCO = '0130'
                                                                                            FLUTO = 'V'
                                                                                            JOIPO = ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE )
                                                         T_FDMEX = value #( ( conv #( 'NOUTT' ) )
                                                                            ( conv #( 'COMPR' ) )
                                                                            ( conv #( 'FANDM' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

    endcase.

  endmethod.
  method GET_INIT_INL.

    field-symbols: <S_FASTD_XCOMP> type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_XCONG>       type ZVCXI_PXSS_S_XCONG.


***--------------------------------------------------------------------------------------
*** Define Structure
    append value #( ID     = 'COMP_P1'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'CORR'       R_DATA = new ZVCXI_P1SS_S_FDI_CORR(      SCORE_FAALL = ABAP_TRUE ) )
                                      ( IPARE = 'CONV'    ISELF = 'CSTEP_SSS'  R_DATA = new ZVCXI_P1SS_S_FDI_CSTEP_SSS( DIMEN       = ZIF_VCXI_PXSS_SSS=>C_DIMEN_LENGTH
                                                                                                                        NOUTT       = 1
                                                                                                                        SCORE_FAALL = ABAP_TRUE ) )
                                    )
                  ) to CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.


***--------------------------------------------------------------------------------------
    case ME->F_FDMDL.
      when 'CFG'.
***     Add Finished Good
        append value #( IPARE = 'OUTPUT'  ISELF = 'CFG' ) to <S_FASTD_XCOMP>-T_DATA.

      when 'CRPART'.
***     Create new Connection
        append ME->GET_NEW_XCONG( ) to CT_XCONG assigning <S_XCONG>.
        append value #( IPARE = 'OUTPUT'  ISELF = 'CRCONO'      R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT )
                                                                T_FDMEX = value #( ( conv #( 'NOUTT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

***     Add Part
        assign CT_FASTD_XCOMP[ ID = 'COMP_P3' ] to <S_FASTD_XCOMP>.
        append value #( IPARE = 'CSTEP_ASMBL'  ISELF = 'CRPART'
                      ) to <S_FASTD_XCOMP>-T_DATA.
        append value #( IPARE = 'CRPART'       ISELF = 'CRCONI'   R_DATA  = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN )
                      ) to <S_FASTD_XCOMP>-T_DATA.

    endcase.

  endmethod.
  method GET_INIT_SE_DCT.

***--------------------------------------------------------------------------------------
*** Create new Connection
    append ME->GET_NEW_XCONG( ) to CT_XCONG.
    append ME->GET_NEW_XCONG( ) to CT_XCONG.

***--------------------------------------------------------------------------------------
*** Corrugation and Die Cut Separation
    append value #( ID     = 'COMP_P1'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'CORR'        R_DATA  = new ZVCXI_P1SS_S_FDI_CORR(       SCORE_FAALL = ABAP_TRUE ) )
                                      ( IPARE = 'OUTPUT'  ISELF = 'SSTEP_DCUT'  R_DATA  = new ZVCXI_P1SS_S_FDI_SSTEP_DCUT( SCORE_FAALL = ABAP_TRUE )
                                                                                T_FDMEX = value #( ( conv #( 'TDCUT' ) ) ) )
                                      ( IPARE = 'OUTPUT'  ISELF = 'CRCONO'      R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = CT_XCONG[ 1 ]-GXCON_OUT )
                                                                                T_FDMEX = value #( ( conv #( 'NOUTT' ) ) ) )
                                      ( IPARE = 'OUTPUT'  ISELF = 'CRCONO'      R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = CT_XCONG[ 2 ]-GXCON_OUT )
                                                                                T_FDMEX = value #( ( conv #( 'NOUTT' ) ) ) )
                                    )
                  ) to CT_FASTD_XCOMP.

*** Corrugated Finished Goods
    append value #( ID     = 'COMP_P1'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'CRCONI'      R_DATA = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = CT_XCONG[ 1 ]-GXCON_IN ) )
                                      ( IPARE = 'OUTPUT'  ISELF = 'CFG'         T_FDMEX = value #( ( conv #( 'NOUTT' ) ) ) )
                                    )
                  ) to CT_FASTD_XCOMP.
    append value #( ID     = 'COMP_P1'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'CRCONI'      R_DATA = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = CT_XCONG[ 2 ]-GXCON_IN ) )
                                      ( IPARE = 'OUTPUT'  ISELF = 'CFG'         T_FDMEX = value #( ( conv #( 'NOUTT' ) ) ) )
                                    )
                  ) to CT_FASTD_XCOMP.

  endmethod.
  method GET_INIT_SHT.

    data: LF_INDEX type I.
    field-symbols: <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA,
                   <S_XCONG>            type ZVCXI_PXSS_S_XCONG.


***--------------------------------------------------------------------------------------
*** Define Structure
    append value #( ID     = 'COMP_P1'
                    XCSTY  = ZCL_VCXI_PXSS_BL_FASTD=>C_XCSTY_SPEC  "Specification-based Component
                    T_DATA = value #( ( IPARE = 'INPUT'   ISELF = 'CORR'  R_DATA = new ZVCXI_P1SS_S_FDI_CORR( SCORE_FAALL = ABAP_TRUE ) )
                                    )
                  ) to CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.


***--------------------------------------------------------------------------------------
    case ME->F_FDMDL.
      when C_FDMDL_CFG.
***     Add Finished Good
        append value #( IPARE = 'OUTPUT'  ISELF = 'CFG'  R_DATA = new ZVCXI_P1SS_S_FDI_CFG( FEFCO = '0110'
                                                                                            FLUTO = 'V'
                                                                                            JOIPO = ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE )
                                                         T_FDMEX = value #( ( conv #( 'NOUTT' ) )
                                                                            ( conv #( 'COMPR' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

      when C_FDMDL_CRPART.
***     Create new Connection
        append ME->GET_NEW_XCONG( ) to CT_XCONG assigning <S_XCONG>.
        append value #( IPARE = 'OUTPUT'  ISELF = 'CRCONO'      R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT )
                                                                T_FDMEX = value #( ( conv #( 'NOUTT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

***     Add Part
        assign CT_FASTD_XCOMP[ ID = 'COMP_P3' ] to <S_FASTD_XCOMP>.
        append value #( IPARE = 'CSTEP_ASMBL'  ISELF = 'CRPART'   R_DATA = new ZVCXI_P1SS_S_FDI_CRPART( FEFCO = '0110'
                                                                                                        FLUTO = 'V'
                                                                                                        JOIPO = ZCL_VCXI_PXSS_PR_SCORE_MGR=>C_JOIPO_NONE )
                                                                  T_FDMEX = value #( ( conv #( 'PARAT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.
        append value #( IPARE = 'CRPART'       ISELF = 'CRCONI'   R_DATA  = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN )
                      ) to <S_FASTD_XCOMP>-T_DATA.

      when C_FDMDL_CRSHT.
***     Create new Connection
        append ME->GET_NEW_XCONG( ) to CT_XCONG assigning <S_XCONG>.
        append value #( IPARE = 'OUTPUT'  ISELF = 'CRCONO'      R_DATA  = new ZVCXI_PXSS_S_FDI_XCONO( GXCON = <S_XCONG>-GXCON_OUT )
                                                                T_FDMEX = value #( ( conv #( 'NOUTT' ) ) )
                      ) to <S_FASTD_XCOMP>-T_DATA.

***     Find Sheet Placeholder in Lamination Step
        loop at CT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
          check LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = C_XSHT_PLACEHOLDER ] ).
          LF_INDEX = LINE_INDEX( <S_FASTD_XCOMP>-T_DATA[ ISELF = C_XSHT_PLACEHOLDER ] ).

***       Replace Placeholder
          assign <S_FASTD_XCOMP>-T_DATA[ ISELF = C_XSHT_PLACEHOLDER ] to <S_FASTD_XCOMP_DATA>.
          <S_FASTD_XCOMP_DATA>-ISELF = 'CRSHT'.

***       Add Connection In
          insert value #( IPARE = 'CRSHT'       ISELF = 'CRCONI'   R_DATA  = new ZVCXI_PXSS_S_FDI_XCONI( GXCON = <S_XCONG>-GXCON_IN )
                        ) into <S_FASTD_XCOMP>-T_DATA index LF_INDEX + 1.
        endloop.

    endcase.

  endmethod.
  method GET_SRCIN.

    data: LS_FASTD_XCOMP type ZVCXI_PXSS_S_FASTD_XCOMP.
    data: LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_OUT    type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Replace Part / Sheet by related Connection Out
    LR_GATE_OUT = ME->VALIDATE_GATE_OUT( IR_GATE_OUT = IR_GATE_OUT ).
    check LR_GATE_OUT is bound.

*** Get excluded Gates
    LT_GATE_EXCLUDE = cond #( when IT_GATE_EXCLUDE is supplied then IT_GATE_EXCLUDE
                              else ME->GET_GATE_EXCLUDE( IR_GATE_OUT    = LR_GATE_OUT
                                                         IT_FASTD_XCOMP = IT_FASTD_XCOMP ) ).

    loop at IT_FASTD_XCOMP into LS_FASTD_XCOMP.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP-R_GATE ] ).

***   Search for Corrugation
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ IPARE = 'INPUT'
                                             ISELF = 'CORR' ] ).
        if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ R_GATE = LR_GATE_OUT ] ) or
           LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'SSTEP_DCUT' ] ).
          RF_SRCIN = C_SRCIN_CORR.  " Input Source - Corrugation
        else.
          RF_SRCIN = C_SRCIN_SFG.   " Input Source - Semi-Finished Good
        endif.
        ER_GATE = LS_FASTD_XCOMP-T_DATA[ IPARE = 'INPUT'
                                         ISELF = 'CORR' ]-R_GATE.
      endif.

***   Search for Procurement
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ IPARE = 'INPUT'
                                             ISELF = 'MS_CRPROC' ] ).
        RF_SRCIN = C_SRCIN_PROC.   " Input Source - Procurement
        ER_GATE  = LS_FASTD_XCOMP-T_DATA[ IPARE = 'INPUT'
                                          ISELF = 'MS_CRPROC' ]-R_GATE.
      endif.
    endloop.

  endmethod.
  method GET_XSHT.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_OUT       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP_OUT type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_FD_CRSHT> type ZVCXI_P1SS_S_FD_CRSHT,
                   <S_DATA>     type ANY.


*** Super call for checks
    SUPER->GET_XSHT( ).

*** Define Gate OUT
    LR_GATE_OUT = ME->T_GATE_OUT[ 1 ].

***------------------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P1SS_S_FD_CRSHT.
    assign RR_DATA->* to <S_FD_CRSHT>.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = ME ).

*** Find Component of Gate and its linked Components
    LT_GATE_EXCLUDE = ME->GET_GATE_EXCLUDE( IR_GATE_OUT    = LR_GATE_OUT
                                            IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Also Exclude Component that uses the Sheet
    append ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = LR_GATE_OUT
                                              IT_FASTD_XCOMP = LT_FASTD_XCOMP ) to LT_GATE_EXCLUDE.

*** Get Source for Input
    <S_FD_CRSHT>-SRCIN = ME->GET_SRCIN( IR_GATE_OUT     = LR_GATE_OUT
                                        IT_FASTD_XCOMP  = LT_FASTD_XCOMP
                                        IT_GATE_EXCLUDE = LT_GATE_EXCLUDE ).

*** Fill Sheet Structure based on Fast Data Integration Information
    loop at LT_FASTD_XCOMP into LS_FASTD_XCOMP.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP-R_GATE ] ).

      loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA where R_DATA is bound.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP_DATA-R_GATE ] ).
        assign LS_FASTD_XCOMP_DATA-R_DATA->* to <S_DATA>.

***     Move correspoinding fields, but except fields defined by Component Data
        data(LR_MAPPER) = CL_ABAP_CORRESPONDING=>CREATE( SOURCE      = <S_DATA>
                                                         DESTINATION = <S_FD_CRSHT>
                                                         MAPPING     = value CL_ABAP_CORRESPONDING=>MAPPING_TABLE( for LF_FDMEX in LS_FASTD_XCOMP_DATA-T_FDMEX
                                                                                                                   ( LEVEL = 0 KIND = 2 SRCNAME = LF_FDMEX DSTNAME = LF_FDMEX ) ) ).
        LR_MAPPER->EXECUTE( exporting SOURCE      = <S_DATA>
                            changing  DESTINATION = <S_FD_CRSHT> ).
      endloop.

***   Plant of Corrugation/Procurement
      if LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'CORR' ] ) or
         LINE_EXISTS( LS_FASTD_XCOMP-T_DATA[ ISELF = 'MS_CRPROC' ] ).
        <S_FD_CRSHT>-WERKS_CORR = LS_FASTD_XCOMP-WERKS.
      endif.
    endloop.

  endmethod.
  method INIT_FDMDL.

*** Get initial Structure based on Model Variant
    case IF_IFDMV.
      when C_IFDMV_SHT.
        ME->GET_INIT_SHT( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                   CT_XCONG       = CT_XCONG ).
      when C_IFDMV_FANF.
        ME->GET_INIT_FANF( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                    CT_XCONG       = CT_XCONG ).
      when C_IFDMV_CRL.
        ME->GET_INIT_CRL( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                   CT_XCONG       = CT_XCONG ).
      when C_IFDMV_INL.
        ME->GET_INIT_INL( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                   CT_XCONG       = CT_XCONG ).
      when C_IFDMV_DCT.
        ME->GET_INIT_DCT( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                   CT_XCONG       = CT_XCONG ).
      when C_IFDMV_SE_DCT.
        ME->GET_INIT_SE_DCT( changing CT_FASTD_XCOMP = CT_FASTD_XCOMP
                                      CT_XCONG       = CT_XCONG ).
    endcase.

  endmethod.
  method SET_XSHT.

    data: LF_EXIST type ABAP_BOOL.
    data: LS_FD_CRSHT type ZVCXI_P1SS_S_FD_CRSHT.
    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_XCONG        type ZVCXI_PXSS_TT_XCONG,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_OUT       type ref to /VCXI/CL_VKSR_GATE,
          LR_GATE_XCOMP_OUT type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <S_DATA>             type ANY,
                   <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


*** Super call for checks
    SUPER->SET_XSHT( IS_DATA = IS_DATA ).

*** Define Gate OUT
    LR_GATE_OUT = ME->T_GATE_OUT[ 1 ].

*** "Cast" Structure
    move-corresponding IS_DATA to LS_FD_CRSHT.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FASTD->GET_STRC( exporting IR_BL_FDMDL = ME
                                               importing ET_XCONG    = LT_XCONG ).

*** Find Component of Gate and its linked Components
    LT_GATE_EXCLUDE = ME->GET_GATE_EXCLUDE( IR_GATE_OUT    = LR_GATE_OUT
                                            IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Also Exclude Component that uses the Sheet
    append ME->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = LR_GATE_OUT
                                              IT_FASTD_XCOMP = LT_FASTD_XCOMP ) to LT_GATE_EXCLUDE.

*** Update Fast Data Integration Information based on structure
    loop at LT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP>-R_GATE ] ).

      loop at <S_FASTD_XCOMP>-T_DATA assigning <S_FASTD_XCOMP_DATA> where R_DATA is bound.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP_DATA>-R_GATE ] ).
        assign <S_FASTD_XCOMP_DATA>-R_DATA->* to <S_DATA>.
        <S_DATA> = corresponding #( base ( <S_DATA> ) IS_DATA ).

***     Plant of Corrugation
        if LINE_EXISTS( <S_FASTD_XCOMP>-T_DATA[ ISELF = 'CORR' ] ).
          <S_FASTD_XCOMP>-WERKS = LS_FD_CRSHT-WERKS_CORR.
        endif.
      endloop.
    endloop.

*** Adjust by Input Source
    ME->ADJ_SRCIN( exporting IF_SRCIN        = LS_FD_CRSHT-SRCIN
                             IR_GATE_OUT     = LR_GATE_OUT
                             IT_GATE_EXCLUDE = LT_GATE_EXCLUDE
                   changing  CT_FASTD_XCOMP  = LT_FASTD_XCOMP
                             CT_XCONG        = LT_XCONG ).

***------------------------------------------------------------------------------------------------
*** Set Configuration Structure
    ME->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME
                              IT_FASTD_XCOMP = LT_FASTD_XCOMP
                              IT_XCONG       = LT_XCONG ).

  endmethod.
