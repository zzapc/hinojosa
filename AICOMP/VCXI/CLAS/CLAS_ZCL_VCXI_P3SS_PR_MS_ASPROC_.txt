
class ZCL_VCXI_P3SS_PR_MS_ASPROC definition
  public
  inheriting from ZCL_VCXI_PXSS_PR_MS_XPROC
  create public .

public section.

  interfaces ZIF_VCXI_P3SS_COMM_NEXT .

  constants C_IEVNT_O_ADDWT_CHANGED type /VCXI/VKSC_IEVNT value 'ADDWT_CHANGED' ##NO_TEXT.
  constants C_IPRVT_P3_MS_ASPROC type /VCXI/VKSC_IPRVT value 'ZVCXI_P3SS_MS_ASPROC' ##NO_TEXT.
  constants C_PARID_ADDWT type /VCXI/VKS_PARID value 'ZVCXI_PX_ADDWT' ##NO_TEXT.
  constants C_PARID_HNDHE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDHE' ##NO_TEXT.
  constants C_PARID_HNDLE type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDLE' ##NO_TEXT.
  constants C_PARID_HNDWI type /VCXI/VKS_PARID value 'ZVCXI_PX_HNDWI' ##NO_TEXT.

  methods GET_ADDWT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_ADDWT) type ZVCXI_PXS_S_ADDWT
    raising
      /VCXI/CX_CKX .
  methods GET_HNDDIM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_HNDDIM) type ZVCXI_PXS_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_PXS_S_HNDDIM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods SET_ADDWT
    importing
      !IS_ADDWT type ZVCXI_PXS_S_ADDWT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD
    redefinition .
protected section.

  constants C_IEVNT_O_ASBPX_CHANGED type /VCXI/VKSC_IEVNT value 'ASBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_HNDDIM_CHANGED type /VCXI/VKSC_IEVNT value 'HNDDIM_CHANGED' ##NO_TEXT.
  constants C_PARID_ASBPX type /VCXI/VKS_PARID value 'ZVCXI_P3_ASBPX' ##NO_TEXT.

  methods SET_ASBPX
    importing
      !IF_ASBPX type ZVCXI_P3S_ASBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_HNDHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDHE) type ZVCXI_PXS_S_HNDHE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDLE) type ZVCXI_PXS_S_HNDLE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDWI) type ZVCXI_PXS_S_HNDWI
    raising
      /VCXI/CX_CKX .
  methods SET_HNDHE
    importing
      !IS_HNDHE type ZVCXI_PXS_S_HNDHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDLE
    importing
      !IS_HNDLE type ZVCXI_PXS_S_HNDLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDWI
    importing
      !IS_HNDWI type ZVCXI_PXS_S_HNDWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
private section.
endclass. "ZCL_VCXI_P3SS_PR_MS_ASPROC definition
class ZCL_VCXI_P3SS_PR_MS_ASPROC implementation.
  method GET_ADDWT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ADDWT ).
    move LS_PARAM-ATFLV to RS_ADDWT-ADDWT.
    move LS_PARAM-UNIT  to RS_ADDWT-ADDWT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_HNDDIM.

    RS_HNDDIM-S_HNDLE = ME->GET_HNDLE( importing EF_SETBY = EF_SETBY ).
    RS_HNDDIM-S_HNDWI = ME->GET_HNDWI( ).
    RS_HNDDIM-S_HNDHE = ME->GET_HNDHE( ).

    EF_FOVRR = switch #( EF_SETBY when /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

  endmethod.
  method GET_HNDHE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).
    RS_HNDHE-HNDHE     = LS_PARAM-ATFLV.
    RS_HNDHE-HNDHE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDLE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).
    RS_HNDLE-HNDLE     = LS_PARAM-ATFLV.
    RS_HNDLE-HNDLE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDWI.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).
    RS_HNDWI-HNDWI     = LS_PARAM-ATFLV.
    RS_HNDWI-HNDWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR   type MATNR,
          LF_WERKS   type WERKS_D,
          LF_DCONF   type DATS,
          LF_SETBY   type /VCXI/VKSR_SETBY,
          LF_ALLOWED type ABAP_BOOL.
    data: LR_CUST_ASPROC type ref to ZCL_VCXI_P3SS_CUST_ASPROC.


    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_MATNR          is bound    and
       ME->R_CUST_MATNR->F_MATNR eq LF_MATNR and
       ME->R_CUST_MATNR->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      return.
    endif.

    clear: ME->R_CUST_MATNR.

*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          LR_CUST_ASPROC ?= ZCL_VCXI_P3SS_CUST_ASPROC=>GET_INSTANCE_ASPROC( IF_MATNR = LF_MATNR
                                                                            IF_WERKS = LF_WERKS
                                                                            IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          clear LR_CUST_ASPROC.
      endtry.
    endif.

    ME->R_CUST_MATNR = LR_CUST_ASPROC.

***--------------------------------------------------------------------------------------
*** Set Values for Real Procurement
    if ME->IS_DUMMY( ) eq ABAP_FALSE.
***   If Material Number is initial, fully reset parameters
      LF_SETBY = cond #( when LF_MATNR is not initial then /VCXI/CL_VKSR_GATE=>C_SETBY_CALC
                                                      else SPACE ).

      ME->SET_PRODH(  IF_PRODH  = cond #( when LR_CUST_ASPROC is bound then LR_CUST_ASPROC->F_PRODH )
                      IF_SETBY  = LF_SETBY ).
      ME->SET_HNDDIM( IS_HNDDIM = cond #( when LR_CUST_ASPROC is bound then LR_CUST_ASPROC->S_HNDDIM )
                      IF_SETBY  = LF_SETBY ).
      ME->SET_ADDWT(  IS_ADDWT  = cond #( when LR_CUST_ASPROC is bound then LR_CUST_ASPROC->S_ADDWT )
                      IF_SETBY  = LF_SETBY ).
    endif.

***--------------------------------------------------------------------------------------
*** Check if Component Scrap can be defined
    ME->GET_KAUSF( importing EF_ALLOWED = LF_ALLOWED ).
    if LF_ALLOWED ne ABAP_TRUE.
***   Clear Component Scrap
      ME->SET_KAUSF( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method SET_ADDWT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ADDWT ).

    LS_PARAM-ATFLV = IS_ADDWT-ADDWT.
    LS_PARAM-UNIT  = IS_ADDWT-ADDWT_UOM.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ADDWT_CHANGED ).
    endif.

  endmethod.
  method SET_ASBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ASBPX ).

    move IF_ASBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ASBPX_CHANGED ).
    endif.

  endmethod.
  method SET_HNDDIM.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

*** Set Dimensions
    if IS_HNDDIM is supplied.
      ME->SET_HNDLE( IS_HNDLE = IS_HNDDIM-S_HNDLE
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IS_HNDWI = IS_HNDDIM-S_HNDWI
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IS_HNDHE = IS_HNDDIM-S_HNDHE
                     IF_SETBY = LF_SETBY ).
    else.
      ME->SET_HNDLE( IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IF_SETBY = LF_SETBY ).
    endif.

  endmethod.
  method SET_HNDHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).

    if IS_HNDHE is supplied.
      LS_PARAM-ATFLV = IS_HNDHE-HNDHE.
      LS_PARAM-UNIT  = IS_HNDHE-HNDHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).

    if IS_HNDLE is supplied.
      LS_PARAM-ATFLV = IS_HNDLE-HNDLE.
      LS_PARAM-UNIT  = IS_HNDLE-HNDLE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).

    if IS_HNDWI is supplied.
      LS_PARAM-ATFLV = IS_HNDWI-HNDWI.
      LS_PARAM-UNIT  = IS_HNDWI-HNDWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P3SS_COMM_NEXT~GET_ASBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ASBPX ).
    move LS_PARAM-STRNG to EF_ASBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Assembly Backward Property Instance
    if RR_BL_ASBPROP is requested.
      RR_BL_ASBPROP = ZCL_VCXI_P3SS_BL_ASBPROP=>FACTORY( IF_ASBPX = EF_ASBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_P3SS_COMM_NEXT~GET_ASFPX.

***--------------------------------------------------------------------------------------
*** Get Assembly Forward Property (Inbound)
    RR_BL_ASFPROP = ZCL_VCXI_P3SS_BL_ASFPROP=>FACTORY( ).
    check RR_BL_ASFPROP is bound.

***--------------------------------------------------------------------------------------
*** Handling Dimensions
    RR_BL_ASFPROP->SET_HNDDIM( IS_HNDDIM = ME->GET_HNDDIM( ) ).

*** Additional Weigth
    RR_BL_ASFPROP->SET_ADDWT( IS_ADDWT = ME->GET_ADDWT( ) ).

*** Set Joint Types directly from Material
    if ME->R_CUST_MATNR is instance of ZCL_VCXI_P3SS_CUST_ASPROC.
      RR_BL_ASFPROP->SET_JOITY( IT_JOITY = cast ZCL_VCXI_P3SS_CUST_ASPROC( ME->R_CUST_MATNR )->T_JOITY ).
    endif.

*** Assembly Part Information directly from Material
    if ME->R_CUST_MATNR is instance of ZCL_VCXI_P3SS_CUST_ASPROC.
      RR_BL_ASFPROP->SET_APINFO( IT_APINFO = cast ZCL_VCXI_P3SS_CUST_ASPROC( ME->R_CUST_MATNR )->T_APINFO ).
    endif.

*** Product Hierarchy
    RR_BL_ASFPROP->SET_PRODH( IF_PRODH = ME->GET_PRODH( ) ).

***--------------------------------------------------------------------------------------
*** Get new Assembly Forward Property XML
    if EF_ASFPX is requested.
      EF_ASFPX = RR_BL_ASFPROP->GET_ASFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_COMM_NEXT~DO_BACKWARD.

    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV  type ref to ZIF_VCXI_P3SS_COMM_PREV,
          LR_BL_ASBPROP type ref to ZCL_VCXI_P3SS_BL_ASBPROP.

***------------------------------------------------------------------------------------------------
*** Create new Assembly Backward Property Instance
    LR_BL_ASBPROP = ZCL_VCXI_P3SS_BL_ASBPROP=>FACTORY( ).

***------------------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***   Combine Assembly Backward Property
      LR_BL_ASBPROP->MERGE( IR_BL_ASBPROP = LR_COMM_PREV->GET_ASBPX( ) ).
    endloop.

*** Backward Assembly Backward Property XML
    ME->SET_ASBPX( IF_ASBPX = LR_BL_ASBPROP->GET_ASBPX( ) ).

  endmethod.
