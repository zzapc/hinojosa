
class ZCL_VCXI_PFSS_UI_SPEC_UCB definition
  public
  inheriting from /VCXI/CL_VKSRU_CLSUI
  create public .

public section.

  interfaces /VCXI/IF_VKSU_UIFW .

  data F_ACTIVE_TAB type STRING .
  data S_SPEC_TAB type ZVCXI_PFSS_S_TAB_DESCR .
  data S_SPEC_UCB_VIS type ZVCXI_PFSS_S_SPEC_UCB_VIS .
  data F_ACTIVE_TAB_OLD type STRING .
  data R_DEFAULT_GATE type ref to /VCXI/CL_VKSR_GATE .
  data F_CURSOR type SCRFNAME .

  methods CONSTRUCTOR
    importing
      !IR_UIFW type ref to /VCXI/IF_VKSU_UIFW
      !IR_UIGATE type ref to /VCXI/CL_VKSRU_UIGATE
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods DO_PBO
    raising
      /VCXI/CX_CKX .
  methods DO_UPDATE_SPEC_UCB_VIS
    importing
      !IS_SPEC_UCB_VIS type ZVCXI_PFSS_S_SPEC_UCB_VIS
    raising
      /VCXI/CX_CKX .
  methods GET_REGISTERED_UI_INFO
    returning
      value(RS_DYNP) type /VCXI/CKX_S_DYNP_KEY
    exceptions
      /VCXI/CX_CKX .
  methods SET_CURSOR
    raising
      /VCXI/CX_CKX .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
protected section.

  constants C_TAB type STRING value 'SUCBTAB'. "#EC NOTEXT
  constants C_TABNAME type STRING value '0100S_TAB-SUCBTAB'. "#EC NOTEXT
  type-pools ABAP .
  data F_TAB_LIST_REFRESH_REQ type ABAP_BOOL .
  data R_PR_SPEC_UCB type ref to ZCL_VCXI_PFSS_PR_SPEC_UCB .
  data R_REGISTERED_UI type ref to /VCXI/CL_VKSU_CLSUI .
  data S_DYNP_BLANK type /VCXI/CKX_S_DYNP_KEY .
  data T_TAB_LIST type ZVCXI_XCS_TT_TAB_LIST .
  data F_ALREADY_OPEN type ABAP_BOOL .
  data R_OLD_GATE type ref to /VCXI/CL_VKSR_GATE .

  methods DISPLAY_ACTIVE_TAB
    raising
      /VCXI/CX_CKX .
  methods INIT_TAB_LIST
    raising
      /VCXI/CX_CKX .
  methods INIT_VIS
    raising
      /VCXI/CX_CKX .
  methods OPEN_SUBSCREEN
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RR_CLSUI) type ref to /VCXI/CL_VKSRU_CLSUI
    raising
      /VCXI/CX_CKX .

  methods HANDLE_GATE_FREED
    redefinition .
private section.

  methods INIT_BLANK_UI
    raising
      /VCXI/CX_CKX .
endclass. "ZCL_VCXI_PFSS_UI_SPEC_UCB definition
class ZCL_VCXI_PFSS_UI_SPEC_UCB implementation.
method /VCXI/IF_VKSU_UIFW~DO_MODIFY_SCREEN.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                           IF_DYNNR = IF_DYNNR ).
  endif.


endmethod.
method /VCXI/IF_VKSU_UIFW~DO_USER_COMMAND.

  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      if ME->R_REGISTERED_UI is bound.
        ME->R_REGISTERED_UI->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
      endif.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      LR_CX_CKX->SHOW_MESSAGE( ).
  endtry.

endmethod.
method /VCXI/IF_VKSU_UIFW~REFRESH_SCREEN.

  ME->R_UIFW->REFRESH_SCREEN( ).

endmethod.
method /VCXI/IF_VKSU_UIFW~REGISTER_UI.

  do.
    if ME->R_REGISTERED_UI is not bound.
      exit.
    endif.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  enddo.

  move IR_UI ?to ME->R_REGISTERED_UI.


endmethod.
method /VCXI/IF_VKSU_UIFW~UNREGISTER_UI.

  if IR_UI eq ME->R_REGISTERED_UI.
    clear ME->R_REGISTERED_UI.
  endif.

endmethod.
method ACTIVATE.

  SUPER->ACTIVATE( ).

*** Bind UI to Dynpro
  call function 'ZVCXI_PFSS_UI_SPEC_UCB_BIND'
    exporting
      IR_UI_SPEC_UCB = ME
    importing
      ES_DYNP        = ME->S_DYNP
      EF_ACTIVE_TAB  = ME->F_ACTIVE_TAB.

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->ACTIVATE( ).
  endif.

endmethod.
method CONSTRUCTOR.

  SUPER->CONSTRUCTOR( IR_UIFW   = IR_UIFW
                      IR_UIGATE = IR_UIGATE
                      IR_GATE   = IR_GATE ).

*** Assign the RP Class to the UI Class
  try.
      move IR_GATE->R_CLSPR ?to ME->R_PR_SPEC_UCB.
    catch CX_SY_MOVE_CAST_ERROR.
***   UI ABAP Class is not compatible with PR ABAP Class.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = 'E'
          F_MSGID = '/VCXI/VKSR'
          F_MSGNO = '801'.
  endtry.


*** Request Init List for Tabs
  move ABAP_TRUE to ME->F_TAB_LIST_REFRESH_REQ.

*** Initialize Blank UI
  ME->INIT_BLANK_UI( ).

endmethod.
method DEACTIVATE.

  SUPER->DEACTIVATE( ).

  if ME->R_REGISTERED_UI is bound.
    ME->R_REGISTERED_UI->DEACTIVATE( ).
  endif.

  clear: ME->F_ALREADY_OPEN.

endmethod.
method DISPLAY_ACTIVE_TAB.

  data:  LS_TAB_LIST    type        ZVCXI_XCSP_S_TAB_LIST.
  data:  LR_GATE        type ref to /VCXI/CL_VKSR_GATE.

  check ME->F_ACTIVE_TAB cs C_TABNAME.

  check ME->F_ACTIVE_TAB   ne ME->F_ACTIVE_TAB_OLD
     or ME->F_ALREADY_OPEN eq ABAP_FALSE.

  read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
  if SY-SUBRC eq 0.
    move LS_TAB_LIST-R_GATE to LR_GATE.
  endif.

  R_OLD_GATE = LR_GATE.

  ME->OPEN_SUBSCREEN( IR_GATE = LR_GATE ).

endmethod.
method DO_MODIFY_SCREEN.

  data:  LF_LOCKED type        /VCXI/CKX_LOCKED,
         LF_INUSE  type        /VCXI/VKSR_INUSE.
  data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

  try.
      SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                               IF_DYNNR = IF_DYNNR ).

      LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
      LF_INUSE  = ME->R_GATE->IS_INUSE( ).

      loop at screen.
***     Set the Tabs which aren't in use as invisible.
        if SCREEN-NAME cs C_TABNAME.
          read table ME->T_TAB_LIST with key TABNAME = SCREEN-NAME transporting no fields.
          if SY-SUBRC ne 0.
            move 1 to SCREEN-INVISIBLE.
          endif.
        endif.

        modify screen.
      endloop.

***   Lock everything if not in change mode
      loop at screen.
        if LF_LOCKED ne ABAP_TRUE or
           LF_INUSE  ne ABAP_TRUE.
          move 0 to SCREEN-INPUT.
        endif.
        modify screen.
      endloop.

***   Modify Screen using DynamicVC
      ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

      loop at screen.
***     Set tabs back to input
        if SCREEN-NAME cs C_TABNAME.
          move 1 to SCREEN-INPUT.
        endif.
        modify screen.
      endloop.

    catch /VCXI/CX_CKX into LR_CX_CKX.
      ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
  endtry.

endmethod.
method DO_PBO.

*** Check if the PR Class is bound
  check ME->R_PR_SPEC_UCB is bound.

  if ME->F_ACTIVE_TAB ne ME->F_ACTIVE_TAB_OLD.
    move ME->F_ACTIVE_TAB to ME->F_ACTIVE_TAB_OLD.
    clear: ME->F_ALREADY_OPEN.
  endif.

  ME->INIT_VIS( ).
  ME->INIT_TAB_LIST( ).
  ME->DISPLAY_ACTIVE_TAB( ).

  set cursor field ME->F_CURSOR.
  clear ME->F_CURSOR.

endmethod.
method DO_UPDATE_SPEC_UCB_VIS.

  data: LS_GRAMM      type        ZVCXI_P0SS_S_GRAMM,
        LS_AGGRA      type        ZVCXI_PFSS_S_AGGRA,
        LS_INGRA      type        ZVCXI_PFSS_S_INGRA.

  move-corresponding IS_SPEC_UCB_VIS to:
                     LS_GRAMM, LS_AGGRA, LS_INGRA.

*** Set Material Description and Customer Material Number
  if ME->S_SPEC_UCB_VIS-MATDE ne IS_SPEC_UCB_VIS-MATDE.
    ME->R_PR_SPEC_UCB->SET_MATDE( IF_MATDE = IS_SPEC_UCB_VIS-MATDE
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

  if ME->S_SPEC_UCB_VIS-CMATN ne IS_SPEC_UCB_VIS-CMATN.
    ME->R_PR_SPEC_UCB->SET_CMATN( IF_CMATN = IS_SPEC_UCB_VIS-CMATN
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Update Context
  if ME->S_SPEC_UCB_VIS-ICONT ne IS_SPEC_UCB_VIS-ICONT.
    ME->R_PR_SPEC_UCB->SET_ICONT( IF_ICONT = IS_SPEC_UCB_VIS-ICONT
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Product Type
  if ME->S_SPEC_UCB_VIS-PTYPE ne IS_SPEC_UCB_VIS-PTYPE.
    ME->R_PR_SPEC_UCB->SET_PTYPE( IF_PTYPE = IS_SPEC_UCB_VIS-PTYPE
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Paper Grade
  if ME->S_SPEC_UCB_VIS-PAPGR ne IS_SPEC_UCB_VIS-PAPGR.
    ME->R_PR_SPEC_UCB->SET_PAPGR( IF_PAPGR = IS_SPEC_UCB_VIS-PAPGR
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Grammage
  if ME->S_SPEC_UCB_VIS-GRAMM ne LS_GRAMM-GRAMM.
    ME->R_PR_SPEC_UCB->SET_GRAMM( IS_GRAMM = LS_GRAMM
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Against Grain
  if ME->S_SPEC_UCB_VIS-AGGRA ne LS_AGGRA-AGGRA.
    ME->R_PR_SPEC_UCB->SET_AGGRA( IS_AGGRA = LS_AGGRA
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set In Grain
  if ME->S_SPEC_UCB_VIS-INGRA ne LS_INGRA-INGRA.
    ME->R_PR_SPEC_UCB->SET_INGRA( IS_INGRA = LS_INGRA
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

*** Set Cutting Type
  if ME->S_SPEC_UCB_VIS-TCUTT ne IS_SPEC_UCB_VIS-TCUTT.
    ME->R_PR_SPEC_UCB->SET_TCUTT( IF_TCUTT = IS_SPEC_UCB_VIS-TCUTT
                                  IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
  endif.

endmethod.
method DO_USER_COMMAND.

  data:  LF_UCOMM      type SYUCOMM.

  SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

  if IF_UCOMM cs C_TABNAME.
    move IF_UCOMM to ME->F_ACTIVE_TAB.
  endif.

  move IF_UCOMM to LF_UCOMM.
  ME->/VCXI/IF_VKSU_UIFW~DO_USER_COMMAND( changing CF_UCOMM = LF_UCOMM ).


endmethod.
method GET_REGISTERED_UI_INFO.

  try.
      if ME->R_REGISTERED_UI is bound.
        move ME->R_REGISTERED_UI->S_DYNP to RS_DYNP.
      else.
        move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
        move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
      endif.

    catch /VCXI/CX_CKX.
      move ME->S_DYNP_BLANK-REPID    to RS_DYNP-REPID.
      move ME->S_DYNP_BLANK-DYNNR    to RS_DYNP-DYNNR.
  endtry.

endmethod.
method HANDLE_GATE_FREED.

  SUPER->HANDLE_GATE_FREED( ).

  free: ME->R_PR_SPEC_UCB.

endmethod.
method INIT_BLANK_UI.

  data:  LR_CLSUI type ref to /VCXI/CL_VKSU_CLSUI.

  create object LR_CLSUI
    exporting
      IR_UIFW = ME.

  LR_CLSUI->ACTIVATE( ).
  move LR_CLSUI->S_DYNP to ME->S_DYNP_BLANK.

endmethod.
method INIT_TAB_LIST.

  data:           LF_TAB             type         NUMC3,
                  LF_FNAME           type         STRING.
  data:           LR_GATE            type ref to  /VCXI/CL_VKSR_GATE.
  data:           LT_GATE            type         /VCXI/VKSR_TT_GATE,
                  LT_GATE_CHILD      type         /VCXI/VKSR_TT_GATE,
                  LT_PRVDR_DEF       type         /VCXI/VKSR_TT_PRVDR_DEF.
  data:           LS_PRVDR_DEF       type         /VCXI/VKSR_S_PRVDR_DEF,
                  LS_TAB_LIST        type         ZVCXI_XCS_S_TAB_LIST.
  field-symbols:  <S_TAB_LIST>       type         ZVCXI_XCS_S_TAB_LIST,
                  <F_DESCR>          type         /VCXI/CKX_DESCR.

*** Save "Gate" of selected tab befor refresh
  if ME->R_DEFAULT_GATE is not bound and
     ME->F_ACTIVE_TAB   is not initial.
    read table ME->T_TAB_LIST into LS_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB.
    if LS_TAB_LIST-R_GATE          is bound and
       LS_TAB_LIST-R_GATE->F_FREED eq ABAP_FALSE.
      move LS_TAB_LIST-R_GATE to ME->R_DEFAULT_GATE.
    endif.
  endif.

  free: ME->T_TAB_LIST,
        ME->S_SPEC_TAB,
        LF_TAB.

***------------------------------------------------------------------
*** Get all Children
  LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_TPRVR = /VCXI/IF_VKSC_REGELMNT_PRVTY=>C_TPRVR_CHILD ).

  loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = LS_PRVDR_DEF-IPRVT
                                     IF_INUSE = ABAP_TRUE ).

    append lines of LT_GATE to LT_GATE_CHILD.
  endloop.
  sort LT_GATE_CHILD.
  delete adjacent duplicates from LT_GATE_CHILD.

***------------------------------------------------------------------
*** Sort Children
  ME->R_GATE->SORT_GATE( changing CT_GATE = LT_GATE_CHILD ).

  loop at LT_GATE_CHILD into LR_GATE.

    check LR_GATE->GET_CLSUI( ) is not initial.

    append initial line to ME->T_TAB_LIST assigning <S_TAB_LIST>.
    add 1 to LF_TAB.
    concatenate C_TABNAME LF_TAB into <S_TAB_LIST>-TABNAME.
    move LR_GATE                 to <S_TAB_LIST>-R_GATE.

*** Set Activ Tab if it was set by default Gate
    if ME->R_DEFAULT_GATE is bound and
       LR_GATE eq ME->R_DEFAULT_GATE.
      move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
      move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB_OLD.
      if LR_GATE ne ME->R_OLD_GATE.
        move ABAP_FALSE to ME->F_ALREADY_OPEN.
      endif.
*** Default gate is not bound but Gate of Activ Tab do not match
    elseif ME->R_DEFAULT_GATE is not bound.
      if ME->F_ACTIVE_TAB eq <S_TAB_LIST>-TABNAME and
         ME->R_OLD_GATE   ne LR_GATE.
        move ABAP_FALSE to ME->F_ALREADY_OPEN.
      endif.
    endif.

    concatenate C_TAB LF_TAB into LF_FNAME.
    assign component LF_FNAME of structure ME->S_SPEC_TAB to <F_DESCR>.
    if SY-SUBRC eq 0.
      if <S_TAB_LIST>-R_GATE->R_CLSPR is bound.
        move <S_TAB_LIST>-R_GATE->R_CLSPR->GET_DESCR( ) to <F_DESCR>.
      else.
        move <S_TAB_LIST>-R_GATE->GET_DESCR( ) to <F_DESCR>.
      endif.
    endif.
  endloop.

***------------------------------------------------------------------
*** Clear Default gate
  clear: ME->R_DEFAULT_GATE.

*** Check Active Tab exists
  if ME->F_ACTIVE_TAB cs C_TABNAME.
    read table ME->T_TAB_LIST with key TABNAME = ME->F_ACTIVE_TAB
                              transporting no fields.
    if SY-SUBRC ne 0.
      read table ME->T_TAB_LIST assigning <S_TAB_LIST> index 1.
      if SY-SUBRC eq 0.
        move <S_TAB_LIST>-TABNAME to ME->F_ACTIVE_TAB.
      else.
        clear ME->F_ACTIVE_TAB.
      endif.
    endif.
  endif.

endmethod.
method INIT_VIS.

  data: LS_GRAMM        type        ZVCXI_P0SS_S_GRAMM,
        LS_AGGRA        type        ZVCXI_PFSS_S_AGGRA,
        LS_INGRA        type        ZVCXI_PFSS_S_INGRA.

  free: ME->S_SPEC_UCB_VIS.

*** Material Description and Customer Material number
  ME->S_SPEC_UCB_VIS-MATDE         = ME->R_PR_SPEC_UCB->GET_MATDE( ).
  ME->S_SPEC_UCB_VIS-CMATN         = ME->R_PR_SPEC_UCB->GET_CMATN( ).

*** Get Context
  ME->S_SPEC_UCB_VIS-ICONT         = ME->R_PR_SPEC_UCB->GET_ICONT( ).
  ME->S_SPEC_UCB_VIS-ICONT_DESCR   = ME->R_PR_SPEC_UCB->GET_ICONT_DESCR( ).

*** Get Product Type
  ME->S_SPEC_UCB_VIS-PTYPE         = ME->R_PR_SPEC_UCB->GET_PTYPE( ).
  ME->S_SPEC_UCB_VIS-PTYPE_DESCR   = ME->R_PR_SPEC_UCB->GET_PTYPE_DESCR( ).

*** Get Paper Grade
  ME->S_SPEC_UCB_VIS-PAPGR         = ME->R_PR_SPEC_UCB->GET_PAPGR( ).

*** Get Grammage
  LS_GRAMM                         = ME->R_PR_SPEC_UCB->GET_GRAMM( ).
  move-corresponding LS_GRAMM to ME->S_SPEC_UCB_VIS.

*** Get Against Grain
  LS_AGGRA                         = ME->R_PR_SPEC_UCB->GET_AGGRA( ).
  move-corresponding LS_AGGRA to ME->S_SPEC_UCB_VIS.

*** Get In Grain
  LS_INGRA                         = ME->R_PR_SPEC_UCB->GET_INGRA( ).
  move-corresponding LS_INGRA to ME->S_SPEC_UCB_VIS.

*** Get Grain Direction
  ME->S_SPEC_UCB_VIS-GRDIR         = ME->R_PR_SPEC_UCB->GET_GRDIR( ).
  ME->S_SPEC_UCB_VIS-GRDIR_DESCR   = ZCL_VCXI_PFSS_CUST_SBOARD=>GET_GRDIR_DESCR( IF_GRDIR = ME->S_SPEC_UCB_VIS-GRDIR ).

*** Get Cutting Type
  ME->S_SPEC_UCB_VIS-TCUTT         = ME->R_PR_SPEC_UCB->GET_TCUTT( ).
  ME->S_SPEC_UCB_VIS-TCUTT_DESCR   = ME->R_PR_SPEC_UCB->GET_TCUTT_DESCR( ).

endmethod.
method OPEN_SUBSCREEN.

  data:     LF_CLSUI  type        /VCXI/VKSC_CLSUI.

  if IR_GATE is bound.
    LF_CLSUI = IR_GATE->GET_CLSUI( ).
  endif.

  if LF_CLSUI is not initial.
*** Create Subscreen
    create object RR_CLSUI
      type
        (LF_CLSUI)
      exporting
        IR_UIFW    = ME
        IR_UIGATE  = ME->R_UIGATE
        IR_GATE    = IR_GATE.
    RR_CLSUI->ACTIVATE( ).
    ME->F_ALREADY_OPEN = ABAP_TRUE.
  else.
*** Clear Subscreen
    if ME->R_REGISTERED_UI is bound.
      ME->R_REGISTERED_UI->DEACTIVATE( ).
    endif.
  endif.

endmethod.
method SET_CURSOR.

  data:  LF_CURSOR type SCRFNAME.

  get cursor field LF_CURSOR.
  if LF_CURSOR is not initial.
    move LF_CURSOR to ME->F_CURSOR.
  endif.

endmethod.
