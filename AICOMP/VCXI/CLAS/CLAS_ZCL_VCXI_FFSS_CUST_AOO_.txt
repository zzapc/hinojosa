
class ZCL_VCXI_FFSS_CUST_AOO definition
  public
  create public .

public section.

  methods OPTIMIZE
    importing
      !IS_FIWID type ZVCXI_F0S_S_FIWID
      !IS_TREQW type ZVCXI_FFS_S_TREQW
      !IS_EVQTY type ZVCXI_XCSR_S_EVQTY
      !IT_FIRNG type ZVCXI_FFSS_TT_FIRNG
    exporting
      !EF_NOOUT type ZVCXI_XCS_NOOUT
      !ES_TRWID type ZVCXI_F0S_S_TRWID
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_FFSS_CUST_AOO
    raising
      /VCXI/CX_CKX .
protected section.

  class-data R_INSTANCE type ref to ZCL_VCXI_FFSS_CUST_AOO .
private section.
endclass. "ZCL_VCXI_FFSS_CUST_AOO definition
class ZCL_VCXI_FFSS_CUST_AOO implementation.
  method GET_INSTANCE.

    if R_INSTANCE is not bound.
      create object R_INSTANCE.
    endif.
    move R_INSTANCE to RR_INSTANCE.

  endmethod.
  method OPTIMIZE.

    types:
      begin of YS_OPTI,
        NOOUT   type ZVCXI_XCS_NOOUT,
        S_TRWID type ZVCXI_F0S_S_TRWID,
      end   of YS_OPTI,
      YT_OPTI type standard table of YS_OPTI.

    data: LF_NOOUT type        ZVCXI_XCS_NOOUT.
    data: LS_TREQW type        ZVCXI_FFS_S_TREQW,
          LS_FIRNG type        ZVCXI_FFSS_S_FIRNG.
    data: LT_FIRNG type        ZVCXI_FFSS_TT_FIRNG,
          LT_OPTI  type        YT_OPTI.
    field-symbols: <S_OPTI> type YS_OPTI.


    clear: EF_NOOUT,
           ES_TRWID.

    check IS_FIWID-FIWID is not initial and
          IS_EVQTY-EVQTY is not initial and
          IT_FIRNG       is not initial.

***--------------------------------------------------------------------------------------
*** Convert Trim Requiement to the same Unit as Film Width for easy comparison
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = IS_TREQW-TREQW
                                                       IF_UOM_IN    = IS_TREQW-TREQW_UOM
                                                       IF_UOM_OUT   = IS_FIWID-FIWID_UOM
                                             importing EF_VALUE_OUT = LS_TREQW-TREQW
                                                       EF_UOM_OUT   = LS_TREQW-TREQW_UOM ).

*** Convert Ranges to the same Unit as Film Width for easy comparison
    loop at IT_FIRNG into LS_FIRNG.
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_FIRNG-FIWMI
                                                         IF_UOM_IN    = LS_FIRNG-FIWMI_UOM
                                                         IF_UOM_OUT   = IS_FIWID-FIWID_UOM
                                               importing EF_VALUE_OUT = LS_FIRNG-FIWMI
                                                         EF_UOM_OUT   = LS_FIRNG-FIWMI_UOM ).
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_FIRNG-FIWMA
                                                         IF_UOM_IN    = LS_FIRNG-FIWMA_UOM
                                                         IF_UOM_OUT   = IS_FIWID-FIWID_UOM
                                               importing EF_VALUE_OUT = LS_FIRNG-FIWMA
                                                         EF_UOM_OUT   = LS_FIRNG-FIWMA_UOM ).
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_FIRNG-LOTMI
                                                         IF_UOM_IN    = LS_FIRNG-LOTMI_UOM
                                                         IF_UOM_OUT   = IS_EVQTY-EVQTY_UOM
                                               importing EF_VALUE_OUT = LS_FIRNG-LOTMI
                                                         EF_UOM_OUT   = LS_FIRNG-LOTMI_UOM ).

***   Check that at least one Out is allowed
      check LS_FIRNG-FIWMA ge ( IS_FIWID-FIWID + LS_TREQW-TREQW ).
      append LS_FIRNG to LT_FIRNG.
    endloop.


***--------------------------------------------------------------------------------------
*** Check all allowed Film Range
    loop at LT_FIRNG into LS_FIRNG.

***   Calculate maximum possible Number of Outs
      LF_NOOUT = FLOOR( ( LS_FIRNG-FIWMA - LS_TREQW-TREQW ) / IS_FIWID-FIWID ).

***   Find Number of Out within Lot Size limit
      do.
        if ( LS_FIRNG-LOTMI * LF_NOOUT ) le IS_EVQTY-EVQTY.
          exit.
        endif.
        subtract 1 from LF_NOOUT.
      enddo.
      check LF_NOOUT gt 0.

***   Collect Options
      append initial line to LT_OPTI assigning <S_OPTI>.
      <S_OPTI>-NOOUT             = LF_NOOUT.
      <S_OPTI>-S_TRWID-TRWID     = LS_FIRNG-FIWMI - ( IS_FIWID-FIWID * LF_NOOUT ).
      <S_OPTI>-S_TRWID-TRWID_UOM = IS_FIWID-FIWID_UOM.
    endloop.

***--------------------------------------------------------------------------------------
*** Sort Options prefer max Number of Outs with least Waste for each Out
    sort LT_OPTI by NOOUT descending S_TRWID-TRWID ascending.

*** Return best match
    read table LT_OPTI assigning <S_OPTI> index 1.
    if SY-SUBRC eq 0.
      move <S_OPTI>-NOOUT   to EF_NOOUT.
      if <S_OPTI>-S_TRWID-TRWID gt LS_TREQW-TREQW.
        move <S_OPTI>-S_TRWID to ES_TRWID.
      else.
        move LS_TREQW-TREQW     to ES_TRWID-TRWID.
        move LS_TREQW-TREQW_UOM to ES_TRWID-TRWID_UOM.
      endif.
    else.
      clear: EF_NOOUT.
      move LS_TREQW-TREQW     to ES_TRWID-TRWID.
      move LS_TREQW-TREQW_UOM to ES_TRWID-TRWID_UOM.
    endif.

  endmethod.
