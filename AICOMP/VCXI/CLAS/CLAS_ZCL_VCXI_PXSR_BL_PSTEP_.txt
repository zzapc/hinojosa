
class ZCL_VCXI_PXSR_BL_PSTEP definition
  public
  inheriting from ZCL_VCXI_XCSR_BL_PSTEP
  create public .

public section.

  data F_COMBW type ZVCXI_PXS_COMBW read-only .
  data I_WERKS type /VCXI/CL_VSMR_RTE_PSTEP=>YI_WERKS .
  constants C_COMBW_PREV type ZVCXI_PXS_COMBW value 'P' ##NO_TEXT.
  constants C_COMBW_NEXT type ZVCXI_PXS_COMBW value 'N' ##NO_TEXT.
  constants C_COMBW_ANY type ZVCXI_PXS_COMBW value ' ' ##NO_TEXT.

  methods REPLACE_MFSI_BY_MFMI
    importing
      !IF_IMFXC type ZVCXI_XCSP_IMFXC
      !IR_MFMI type ref to DATA
    raising
      /VCXI/CX_CKX .
  methods SET_COMBW
    importing
      !IF_COMBW type ZVCXI_PXS_COMBW
    raising
      /VCXI/CX_CKX .

  methods ADD_LIMITS_TO_RTE_PSTEP
    redefinition .
  methods COMPARE
    redefinition .
  methods COPY
    redefinition .
  methods DESERIALIZE
    redefinition .
  methods GET_SPVRE_MF
    redefinition .
  methods INIT_BY_SPEC
    redefinition .
  methods RESTORE_ON_UPDATE
    redefinition .
  methods SERIALIZE
    redefinition .
protected section.

  methods RECALC_RHNDL
    importing
      !IR_ARBPL type ref to /VCXI/CL_VSMC_ARBPL
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_PCOUT
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_PARENT type ref to /VCXI/CL_VKSR_SPVRE
      !IT_PCDIM type ZVCXI_P0SP_TT_PCDIM
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFMO_L
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
      !IT_MFMO type ZVCXI_XCSR_TT_MFMO
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFMO_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
      !IT_MFMO_P type ZVCXI_P0SR_TT_MFMO_P
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFSI_L
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFSO_L
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFSI_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods ADD_SPVRE_MFSO_P
    importing
      !IR_BL_RTESPV type ref to ZCL_VCXI_XCSR_BL_RTESPV
      !IR_SPVRE_MFMGR type ref to /VCXI/CL_VKSR_SPVRE
    changing
      !CT_SPVRE type /VCXI/VKSR_TT_SPVRE
    raising
      /VCXI/CX_CKX .
  methods GET_PSCALE
    importing
      !IR_GATE_PARENT type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RT_PSCALE) type ZVCXI_XCSR_TT_PSCALE
    raising
      /VCXI/CX_CKX .
  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .
  methods TURN_PCDIM
    importing
      !IS_PCDIM type ZVCXI_P0SP_S_PCDIM
      !IF_PCDIR type ZVCXI_P0SP_PCDIR
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_PXSR_BL_PSTEP definition
class ZCL_VCXI_PXSR_BL_PSTEP implementation.
  method ADD_LIMITS_TO_RTE_PSTEP.

***--------------------------------------------------------------------------------------
*** Filter to Plant
    append lines of ME->I_WERKS to IR_RTE_PSTEP->I_WERKS.

  endmethod.
  method ADD_SPVRE_MFMO_L.

    data: LS_MFMO type ZVCXI_XCSR_S_MFMO.
    data: LR_SPVCE      type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFMO type ref to /VCXI/CL_VKSR_SPVRE.


*** More than one Material defined (First will be covered as MFSO)
    check LINES( IT_MFMO ) gt 1.

***--------------------------------------------------------------------------------------
*** Remove existing
    loop at CT_SPVRE into LR_SPVRE_MFMO.
      if LR_SPVRE_MFMO->GET_ID( ) eq 'MFMO_L'.
        delete CT_SPVRE.
      endif.
    endloop.

*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMO_L'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

***--------------------------------------------------------------------------------------
    loop at IT_MFMO into LS_MFMO from 2.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFMO
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFMO to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MFMO->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***   Set Material Number
      LR_SPVRE_MFMO->SET_LEOKY( IS_LEOKY = value #( LEOKY = LS_MFMO-MATNR
                                                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

    endloop.

  endmethod.
  method ADD_SPVRE_MFMO_P.

    data: LS_MFMO_P type ZVCXI_P0SR_S_MFMO_P.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFMO_P type ref to /VCXI/CL_VKSR_SPVRE.

*** More than one Material defined (First will be covered as MFSO)
    check LINES( IT_MFMO_P ) gt 1.

***--------------------------------------------------------------------------------------
*** Remove existing
    loop at CT_SPVRE into LR_SPVRE_MFMO_P.
      if LR_SPVRE_MFMO_P->GET_ID( ) eq 'MFMO_P'.
        delete CT_SPVRE.
      endif.
    endloop.

*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFMO_P'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

***--------------------------------------------------------------------------------------
    loop at IT_MFMO_P into LS_MFMO_P from 2.

***   Create Supervisor Runtime Element
      create object LR_SPVRE_MFMO_P
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_MFMGR.
      append LR_SPVRE_MFMO_P to CT_SPVRE.

***   Set In Use
      LR_SPVRE_MFMO_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***   Set Material Number
      LR_SPVRE_MFMO_P->SET_LEOKY( IS_LEOKY = value #( LEOKY = LS_MFMO_P-MATNR
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).

    endloop.

  endmethod.
  method ADD_SPVRE_MFSI_L.

    data: LF_IMFXC type ZVCXI_XCSP_IMFXC,
          LF_NEXTL type ZVCXI_XCSP_NEXTL.
    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFSI_L type ref to /VCXI/CL_VKSR_SPVRE.


***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSI_L'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFSI_L
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFSI_L to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFSI_L->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get MF X-Connect
    read table ME->T_IMFXC_IN into LF_IMFXC index 1.
    if SY-SUBRC eq 0.
***   Set MF X-Connect
      LR_SPVRE_MFSI_L->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                      ATWRT = LF_IMFXC
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    endif.

*** "Next Low-Level Code" Flag
    read table ME->T_NEXTL into LF_NEXTL index 1.
    if SY-SUBRC eq 0.
      LR_SPVRE_MFSI_L->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MFSI=>C_PARID_NEXTL
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                      ATWRT = LF_NEXTL
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    endif.

  endmethod.
  method ADD_SPVRE_MFSI_P.

    data: LF_IMFXC type        ZVCXI_XCSP_IMFXC,
          LF_NEXTL type        ZVCXI_XCSP_NEXTL.
    data: LS_PCDIM type ZVCXI_P0SP_S_PCDIM.
    data: LT_PCDIM type ZVCXI_P0SP_TT_PCDIM.
    data: LR_PCDIR        type ref to ZIF_VCXI_PXSR_PCDIR,
          LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFSI_P type ref to /VCXI/CL_VKSR_SPVRE.


*** Only if PC Direction is defined
    try.
        move ME ?to LR_PCDIR.
        check LR_PCDIR is bound.
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSI_P'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFSI_P
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFSI_P to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFSI_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get MF X-Connect
    read table ME->T_IMFXC_IN into LF_IMFXC index 1.
    if SY-SUBRC eq 0.
***   Set MF X-Connect
      LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                      ATWRT = LF_IMFXC
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    endif.

*** "Next Low-Level Code" Flag
    read table ME->T_NEXTL into LF_NEXTL index 1.
    if SY-SUBRC eq 0.
      LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MFSI=>C_PARID_NEXTL
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                      ATWRT = LF_NEXTL
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    endif.

***--------------------------------------------------------------------------------------
*** Set PC Direction
    LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_P0SP_PR_MFSI_P=>C_PARID_PCDIR
                                                    PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                    ATWRT = LR_PCDIR->F_PCDIR
                                                    SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).


*** Supervise Dimensions for "Next Low-Level" SFGs
    if LF_NEXTL eq ABAP_TRUE.
      LT_PCDIM = LR_PCDIR->GET_PCDIM( ).
      LS_PCDIM = value #( LT_PCDIM[ 1 ] optional ).
      if LS_PCDIM-PCTYP is not initial.
        LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZIF_VCXI_P0SP_MFP=>C_PARID_PCTYP
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                        ATWRT = LS_PCDIM-PCTYP
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) ).
      endif.
      if LS_PCDIM-S_PCLEN is not initial.
        LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZIF_VCXI_P0SP_MFP=>C_PARID_PCLEN
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                        ATFLV = LS_PCDIM-PCLEN
                                                        UNIT  = LS_PCDIM-PCLEN_UOM
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) ).
      endif.
      if LS_PCDIM-S_PCWID is not initial.
        LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZIF_VCXI_P0SP_MFP=>C_PARID_PCWID
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                        ATFLV = LS_PCDIM-PCWID
                                                        UNIT  = LS_PCDIM-PCWID_UOM
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) ).
      endif.
      if LS_PCDIM-S_PCHEI is not initial.
        LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZIF_VCXI_P0SP_MFP=>C_PARID_PCHEI
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                        ATFLV = LS_PCDIM-PCHEI
                                                        UNIT  = LS_PCDIM-PCHEI_UOM
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) ).
      endif.
      if LS_PCDIM-PCUPS is not initial.
        LR_SPVRE_MFSI_P->SET_PARAM( IS_PARAM = value #( PARID = ZIF_VCXI_P0SP_MFP=>C_PARID_PCUPS
                                                        PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC
                                                        ATFLV = LS_PCDIM-PCUPS
                                                        SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ) ).
      endif.
    endif.

  endmethod.
  method ADD_SPVRE_MFSO_L.

    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFSO_L type ref to /VCXI/CL_VKSR_SPVRE.

*** Remove existing
    loop at CT_SPVRE into LR_SPVRE_MFSO_L.
      if LR_SPVRE_MFSO_L->GET_ID( ) eq 'MFSO_L'.
        delete CT_SPVRE.
      endif.
    endloop.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSO_L'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFSO_L
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFSO_L to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFSO_L->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Get MF X-Connect
    if LINE_EXISTS( ME->T_IMFXC_OUT[ 1 ] ).
***   Set MF X-Connect
      LR_SPVRE_MFSO_L->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                      ATWRT = ME->T_IMFXC_OUT[ 1 ]
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    endif.

  endmethod.
  method ADD_SPVRE_MFSO_P.

    data: LR_SPVCE        type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_MFSO_P type ref to /VCXI/CL_VKSR_SPVRE.

*** Remove existing
    loop at CT_SPVRE into LR_SPVRE_MFSO_P.
      if LR_SPVRE_MFSO_P->GET_ID( ) eq 'MFSO_P'.
        delete CT_SPVRE.
      endif.
    endloop.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'MFSO_P'
                                        IR_SPVCE_PARENT = IR_SPVRE_MFMGR->R_SPVCE ).

*** Create Supervisor Runtime Element
    create object LR_SPVRE_MFSO_P
      exporting
        IR_SPVCE  = LR_SPVCE
        IR_PARENT = IR_SPVRE_MFMGR.
    append LR_SPVRE_MFSO_P to CT_SPVRE.

*** Set In Use
    LR_SPVRE_MFSO_P->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Get MF X-Connect
    if LINE_EXISTS( ME->T_IMFXC_OUT[ 1 ] ).
***   Set MF X-Connect
      LR_SPVRE_MFSO_P->SET_PARAM( IS_PARAM = value #( PARID = ZCL_VCXI_XCSP_PR_MF=>C_PARID_IMFXC
                                                      PARTY = /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR
                                                      ATWRT = ME->T_IMFXC_OUT[ 1 ]
                                                      SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC ) ).
    endif.

  endmethod.
  method ADD_SPVRE_PCOUT.

    data: LS_PCDIM type ZVCXI_P0SP_S_PCDIM,
          LS_PARAM type /VCXI/VKSR_S_PARAM.
    data: LR_SPVCE       type ref to /VCXI/CL_VKSC_SPVCE,
          LR_SPVRE_PCOUT type ref to /VCXI/CL_VKSR_SPVRE.

***------------------------------------------------------------------------------------------------
*** Get Customizing Element
    LR_SPVCE = IR_BL_RTESPV->GET_SPVCE( IF_ID           = 'PCOUT'
                                        IR_SPVCE_PARENT = IR_SPVRE_PARENT->R_SPVCE ).

    loop at IT_PCDIM into LS_PCDIM.

***------------------------------------------------------------------------------------------------
***   Create Supervisor Runtime Element
      create object LR_SPVRE_PCOUT
        exporting
          IR_SPVCE  = LR_SPVCE
          IR_PARENT = IR_SPVRE_PARENT.
      append LR_SPVRE_PCOUT to CT_SPVRE.

***   Set In Use
      LR_SPVRE_PCOUT->SET_INUSE( IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
***   Set PC Type
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCTYP        to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
      move LS_PCDIM-PCTYP                               to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
***   Set Length
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCLEN       to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_PCDIM-PCLEN                              to LS_PARAM-ATFLV.
      move LS_PCDIM-PCLEN_UOM                          to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Width
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCWID       to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_PCDIM-PCWID                              to LS_PARAM-ATFLV.
      move LS_PCDIM-PCWID_UOM                          to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Height
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCHEI       to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_PCDIM-PCHEI                              to LS_PARAM-ATFLV.
      move LS_PCDIM-PCHEI_UOM                          to LS_PARAM-UNIT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
***   Set Ups
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCUPS       to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_PCDIM-PCUPS                              to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***   Set Number Outs
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_NOOUT       to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_NUMC           to LS_PARAM-PARTY.
      move LS_PCDIM-NOOUT                              to LS_PARAM-ATFLV.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC            to LS_PARAM-SETBY.
      LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

***------------------------------------------------------------------------------------------------
***   Set PC Direction
      clear LS_PARAM.
      move ZCL_VCXI_P0SP_PR_PCOUT=>C_PARID_PCDIR        to LS_PARAM-PARID.
      move /VCXI/CL_VKSC_PARAM=>C_PARTY_CHAR            to LS_PARAM-PARTY.
      move LS_PCDIM-PCDIR                               to LS_PARAM-ATWRT.
      move /VCXI/CL_VKSR_GATE=>C_SETBY_CALC             to LS_PARAM-SETBY.
      LR_SPVRE_PCOUT->SET_PARAM( IS_PARAM = LS_PARAM ).

    endloop.

  endmethod.
  method COMPARE.

    data: LR_BL_PSTEP    type ref to ZCL_VCXI_PXSR_BL_PSTEP,
          LR_PCDIR_ME    type ref to ZIF_VCXI_PXSR_PCDIR,
          LR_PCDIR_OTHER type ref to ZIF_VCXI_PXSR_PCDIR,
          LR_RHNDL_ME    type ref to ZIF_VCXI_PXSR_RHNDL,
          LR_RHNDL_OTHER type ref to ZIF_VCXI_PXSR_RHNDL.


*** Super Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PSTEP = IR_BL_PSTEP ).
    check RF_SIMILAR eq ABAP_TRUE.

    move IR_BL_PSTEP ?to LR_BL_PSTEP.

***--------------------------------------------------------------------------------------
*** Compare PC Direction if available
    try.
        move ME          ?to LR_PCDIR_ME.
        move IR_BL_PSTEP ?to LR_PCDIR_OTHER.

        if LR_PCDIR_ME    is bound and
           LR_PCDIR_OTHER is bound.

          if LR_PCDIR_ME->F_PCDOP eq LR_PCDIR_OTHER->F_PCDOP and
             LR_PCDIR_ME->F_PCDIR eq LR_PCDIR_OTHER->F_PCDIR.
            move ABAP_TRUE  to RF_SIMILAR.
          else.
            move ABAP_FALSE to RF_SIMILAR.
            exit.
          endif.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        if LR_PCDIR_ME is bound.
          move ABAP_FALSE to RF_SIMILAR.
        endif.
    endtry.

***--------------------------------------------------------------------------------------
*** Compare Roll Handling if available
    try.
        move ME          ?to LR_RHNDL_ME.
        move IR_BL_PSTEP ?to LR_RHNDL_OTHER.

        if LR_RHNDL_ME    is bound and
           LR_RHNDL_OTHER is bound.

          if LR_RHNDL_ME->T_RHNDL eq LR_RHNDL_OTHER->T_RHNDL.
            move ABAP_TRUE  to RF_SIMILAR.
          else.
            move ABAP_FALSE to RF_SIMILAR.
            exit.
          endif.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        if LR_RHNDL_ME is bound.
          move ABAP_FALSE to RF_SIMILAR.
        endif.
    endtry.

***--------------------------------------------------------------------------------------
*** Compare Plant
    if ME->I_WERKS eq LR_BL_PSTEP->I_WERKS.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

***--------------------------------------------------------------------------------------
*** Compare Combine With
    if ME->F_COMBW eq LR_BL_PSTEP->F_COMBW.
      move ABAP_TRUE  to RF_SIMILAR.
    else.
      move ABAP_FALSE to RF_SIMILAR.
      return.
    endif.

  endmethod.
  method COPY.

    data: LR_BL_PSTEP  type ref to ZCL_VCXI_PXSR_BL_PSTEP,
          LR_PCDIR_ME  type ref to ZIF_VCXI_PXSR_PCDIR,
          LR_PCDIR_NEW type ref to ZIF_VCXI_PXSR_PCDIR,
          LR_RHNDL_ME  type ref to ZIF_VCXI_PXSR_RHNDL,
          LR_RHNDL_NEW type ref to ZIF_VCXI_PXSR_RHNDL.


    RR_BL_PSTEP = SUPER->COPY( ).
    move RR_BL_PSTEP ?to LR_BL_PSTEP.

***--------------------------------------------------------------------------------------
*** Copy Plant
    move ME->I_WERKS   to LR_BL_PSTEP->I_WERKS.

*** Copy Combine With
    move ME->F_COMBW   to LR_BL_PSTEP->F_COMBW.

***--------------------------------------------------------------------------------------
*** Copy PC Direction if available
    try.
        move ME          ?to LR_PCDIR_ME.
        move RR_BL_PSTEP ?to LR_PCDIR_NEW.

        if LR_PCDIR_ME  is bound and
           LR_PCDIR_NEW is bound.
          LR_PCDIR_NEW->SET_PCDIR( IF_PCDIR = LR_PCDIR_ME->F_PCDIR ).
          move LR_PCDIR_ME->F_PCDOP to LR_PCDIR_NEW->F_PCDOP.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.

***--------------------------------------------------------------------------------------
*** Copy Roll Handling if available
    try.
        move ME          ?to LR_RHNDL_ME.
        move RR_BL_PSTEP ?to LR_RHNDL_NEW.

        if LR_RHNDL_ME  is bound and
           LR_RHNDL_NEW is bound.
          LR_RHNDL_NEW->SET_RHNDL( IT_RHNDL = LR_RHNDL_ME->T_RHNDL ).
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
    endtry.

  endmethod.
  method DESERIALIZE.

    data: LF_XML         type STRING,
          LF_PCDIR_PCDIR type ZVCXI_P0SP_PCDIR,
          LF_PCDIR_PCDOP type ZVCXI_P0SR_PCDOP.
    data: LT_DATA        type ABAP_TRANS_SRCBIND_TAB,
          LT_RHNDL_RHNDL type ZVCXI_PXSR_TT_RHNDL.
    data: LR_PCDIR type ref to ZIF_VCXI_PXSR_PCDIR,
          LR_RHNDL type ref to ZIF_VCXI_PXSR_RHNDL.


    check IF_XML is not initial.

***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).
    append value #( NAME = 'SUPER_XML'      VALUE = ref #( LF_XML )         ) to LT_DATA.
    append value #( NAME = 'F_PCDIR_PCDIR'  VALUE = ref #( LF_PCDIR_PCDIR ) ) to LT_DATA.
    append value #( NAME = 'F_PCDIR_PCDOP'  VALUE = ref #( LF_PCDIR_PCDOP ) ) to LT_DATA.
    append value #( NAME = 'T_RHNDL_RHNDL'  VALUE = ref #( LT_RHNDL_RHNDL ) ) to LT_DATA.

*** Deserialize
    call transformation ID
         source xml IF_XML
         result (LT_DATA).

***--------------------------------------------------------------------------------------
*** Set PC Direction if available
    if ME is instance of ZIF_VCXI_PXSR_PCDIR.
      LR_PCDIR ?= ME.
      LR_PCDIR->SET_PCDIR( IF_PCDIR = LF_PCDIR_PCDIR ).
      LR_PCDIR->F_PCDOP = LF_PCDIR_PCDOP.
    endif.

*** Set Roll Handling if available
    if ME is instance of ZIF_VCXI_PXSR_RHNDL.
      LR_RHNDL ?= ME.
      LR_RHNDL->T_RHNDL = LT_RHNDL_RHNDL.
    endif.

***--------------------------------------------------------------------------------------
*** Super Deserialize
    SUPER->DESERIALIZE( IF_XML = LF_XML ).

  endmethod.
  method GET_PSCALE.

    data: LT_GATE      type /VCXI/VKSR_TT_GATE.
    data: LR_GATE      type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_PSCALE type ref to ZCL_VCXI_XCS_PR_PSCALE.


    check IR_GATE_PARENT is bound.

***------------------------------------------------------------------------------------------------
*** Find Provider for Price Scale
    LT_GATE = IR_GATE_PARENT->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_XCS_PR_PSCALE=>C_IPRVT_XCS_PSCALE
                                         IF_INUSE  = ABAP_TRUE
                                         IF_SORTED = ABAP_TRUE ).

    loop at LT_GATE into LR_GATE
                   where TABLE_LINE->R_CLSPR is instance of ZCL_VCXI_XCS_PR_PSCALE.
      LR_PR_PSCALE ?= LR_GATE->R_CLSPR.

***   Add Price Scale
      append value #( ISVCE   = LR_GATE->F_ID
                      S_PSQTY = LR_PR_PSCALE->GET_PSQTY( )
                      S_PRICE = LR_PR_PSCALE->GET_PRICE( )
                      S_PRICP = LR_PR_PSCALE->GET_PRICP( )
                    ) to RT_PSCALE.
    endloop.

  endmethod.
  method GET_SPVRE_MF.

***--------------------------------------------------------------------------------------
*** Add MFSI PC
    if CF_MFI ne ABAP_TRUE.
      ME->ADD_SPVRE_MFSI_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                      IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                            changing  CT_SPVRE       = CT_SPVRE ).
      move ABAP_TRUE to CF_MFI.
    endif.

***--------------------------------------------------------------------------------------
*** Add MFSO PC
    if CF_MFO ne ABAP_TRUE.
      ME->ADD_SPVRE_MFSO_P( exporting IR_BL_RTESPV   = IR_BL_RTESPV
                                      IR_SPVRE_MFMGR = IR_SPVRE_MFMGR
                            changing  CT_SPVRE       = CT_SPVRE ).
      move ABAP_TRUE to CF_MFO.
    endif.

  endmethod.
  method GET_XML_DREF.

***--------------------------------------------------------------------------------------
*** Get Basic References
    RT_DATA = value #( ( NAME = 'I_WERKS'    VALUE = ref #( ME->I_WERKS  ) )
                       ( NAME = 'F_COMBW'    VALUE = ref #( ME->F_COMBW  ) )
                     ).

  endmethod.
  method INIT_BY_SPEC.

    data: LF_PCDIR type ZVCXI_P0SP_PCDIR.
    data: LR_PCDIR type ref to ZIF_VCXI_PXSR_PCDIR.


    SUPER->INIT_BY_SPEC( IR_GATE  = IR_GATE
                         IT_PRVDR = IT_PRVDR  ).

***--------------------------------------------------------------------------------------
*** Get PC Direction if available
    if ME is instance of ZIF_VCXI_PXSR_PCDIR.
      LR_PCDIR ?= ME.

***   Get PC Type and Direction based on Production Step if not defined upfront
      if LR_PCDIR->F_PCDIR is initial and
         LR_PCDIR->F_PCDOP is initial.
        ZCL_VCXI_P0SR_CUST_PSTEP=>GET_PSTEP_INFO( exporting IF_IPSTP = ME->F_IPSTP
                                                  importing EF_PCDIR = LF_PCDIR
                                                            EF_PCDOP = LR_PCDIR->F_PCDOP ).
      else.
        LF_PCDIR = LR_PCDIR->F_PCDIR.
      endif.

***   Fallback
      if LF_PCDIR is initial.
        LF_PCDIR = 'A'.
      endif.

***   Set Direction (trigger Turn if needed)
      LR_PCDIR->SET_PCDIR( IF_PCDIR = LF_PCDIR ).
    endif.

  endmethod.
  method RECALC_RHNDL.

    data: LS_RHNDL_DFLT type ZVCXI_PXSS_S_RHNDL_DFLT,
          LS_WIDIM      type ZVCXI_PXS_S_WIDIM,
          LS_RDIMTA     type ZVCXI_PXS_S_RDIMTA.
    data: LT_WIDIM type ZVCXI_PXS_TT_WIDIM.
    data: LR_RHNDL     type ref to ZIF_VCXI_PXSR_RHNDL,
          LR_CUST_CORE type ref to ZCL_VCXI_PXSS_CUST_CORE.


*** Production Step supports Roll Handling
    check ME is instance of ZIF_VCXI_PXSR_RHNDL.
    LR_RHNDL ?= ME.

***--------------------------------------------------------------------------------------
*** Get Winding Dimension
    LT_WIDIM = LR_RHNDL->GET_WIDIM( ).

*** Get Work-in-Progress Default
    if IR_ARBPL is bound.
      LS_RHNDL_DFLT = ZCL_VCXI_PXSS_BL_RHNDL=>GET_DFLT_WIP( IF_WERKS = IR_ARBPL->GET_WERKS( )
                                                            IF_ARBPL = IR_ARBPL->F_ARBPL ).
    endif.

***--------------------------------------------------------------------------------------
*** Perform automatic updates
    loop at LR_RHNDL->T_RHNDL assigning field-symbol(<S_RHNDL>).
      if LINE_EXISTS( LT_WIDIM[ SY-TABIX ] ).
        LS_WIDIM = LT_WIDIM[ SY-TABIX ].

***     Determine new Core only for Default (or none)
        if <S_RHNDL>-S_RHSRC-RHSCO eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT or
           <S_RHNDL>-S_RHSRC-RHSCO is initial.
          LR_CUST_CORE = ZCL_VCXI_PXSS_CUST_CORE=>GET_INSTANCE_CORE( IF_MATNR = LS_RHNDL_DFLT-MATNR
                                                                     IF_WERKS = IR_ARBPL->GET_WERKS( ) ).

***       Fill Core based on Default
          <S_RHNDL>-S_MS_CORE = value #( MATNR   = LS_RHNDL_DFLT-MATNR
                                         S_CRMAR = LS_RHNDL_DFLT-S_CRMAR
                                         RLPCR   = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_RLPCR( IS_WIWID = LS_WIDIM-S_WIWID
                                                                                       IS_CRMAR = LS_RHNDL_DFLT-S_CRMAR
                                                                                       IS_CRLEN = LR_CUST_CORE->S_CRLEN )
                                       ).
        endif.

***     Get Core Detials
        if <S_RHNDL>-S_MS_CORE-MATNR is not initial.
          LR_CUST_CORE = ZCL_VCXI_PXSS_CUST_CORE=>GET_INSTANCE_CORE( IF_MATNR = <S_RHNDL>-S_MS_CORE-MATNR
                                                                     IF_WERKS = IR_ARBPL->GET_WERKS( ) ).
          data(LS_CRDIO) = LR_CUST_CORE->GET_CRDIO( ).
          data(LS_CRWGT) = LR_CUST_CORE->GET_CRWGT( IS_CLETA = ZCL_VCXI_PXSS_BL_RHNDL=>CALC_CLETA( IS_WIWID = LS_WIDIM-S_WIWID
                                                                                                   IS_CRMAR = <S_RHNDL>-S_MS_CORE-S_CRMAR
                                                                                                   IF_RLPCR = 1 ) ).
        endif.

***     Determine new Roll Dimensions for Default
        if <S_RHNDL>-S_RHSRC-RHSDI eq ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT.
          LS_RDIMTA = LS_RHNDL_DFLT-S_RDIMTA.
        else.
***       Determine Target Dimension
          LS_RDIMTA = value #( RDMTA   = <S_RHNDL>-RDMTA
                               S_RDVTA = switch #( <S_RHNDL>-RDMTA when 'D' then value #( RDVTA     = <S_RHNDL>-RDITA
                                                                                          RDVTA_UOM = <S_RHNDL>-RDITA_UOM )
                                                                   when 'L' then value #( RDVTA     = <S_RHNDL>-RLETA
                                                                                          RDVTA_UOM = <S_RHNDL>-RLETA_UOM )
                                                                   when 'W' then value #( RDVTA     = <S_RHNDL>-RWGTA
                                                                                          RDVTA_UOM = <S_RHNDL>-RWGTA_UOM )
                                                 ) ).
        endif.

***     Recalculate Roll Dimensions
        ZCL_VCXI_PXSS_BL_RHNDL=>CALC_BY_RDIMTA( exporting IS_RDIMTA = LS_RDIMTA
                                                          IS_WIDIM  = LS_WIDIM
                                                          IS_CRDIO  = LS_CRDIO
                                                          IS_CRWGT  = LS_CRWGT
                                                importing ES_RDITA  = <S_RHNDL>-S_RDITA
                                                          ES_RLETA  = <S_RHNDL>-S_RLETA
                                                          ES_RWGTA  = <S_RHNDL>-S_RWGTA ).

***--------------------------------------------------------------------------------------
      else.
***     Remove Roll Handling Info where no Winding Dimension are available
        delete LR_RHNDL->T_RHNDL.
      endif.
    endloop.

  endmethod.
  method REPLACE_MFSI_BY_MFMI  ##NEEDED.
  endmethod.
  method RESTORE_ON_UPDATE.

    data: LR_PCDIR_ME  type ref to ZIF_VCXI_PXSR_PCDIR,
          LR_PCDIR_OLD type ref to ZIF_VCXI_PXSR_PCDIR.

    SUPER->RESTORE_ON_UPDATE( IR_BL_PSTEP = IR_BL_PSTEP ).

***--------------------------------------------------------------------------------------
*** Copy PC Direction if available
    try.
        move ME          ?to LR_PCDIR_ME.
        move IR_BL_PSTEP ?to LR_PCDIR_OLD.

        if LR_PCDIR_ME  is bound and
           LR_PCDIR_OLD is bound.

          if LR_PCDIR_ME->F_PCDOP ne ZIF_VCXI_PXSR_PCDIR=>C_PCDOP_MANDATORY.
            LR_PCDIR_ME->SET_PCDIR( IF_PCDIR = LR_PCDIR_OLD->F_PCDIR ).
          endif.
        endif.
      catch CX_SY_MOVE_CAST_ERROR.
        exit.
    endtry.

  endmethod.
  method SERIALIZE.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.
    data: LR_PCDIR type ref to ZIF_VCXI_PXSR_PCDIR,
          LR_RHNDL type ref to ZIF_VCXI_PXSR_RHNDL.


***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).

*** Super Serialize
    RF_XML = SUPER->SERIALIZE( ).
    append value #( NAME = 'SUPER_XML'  VALUE = ref #( RF_XML ) ) to LT_DATA.

*** Get PC Direction if available
    if ME is instance of ZIF_VCXI_PXSR_PCDIR.
      LR_PCDIR ?= ME.
      append value #( NAME = 'F_PCDIR_PCDIR'  VALUE = ref #( LR_PCDIR->F_PCDIR ) ) to LT_DATA.
      append value #( NAME = 'F_PCDIR_PCDOP'  VALUE = ref #( LR_PCDIR->F_PCDOP ) ) to LT_DATA.
    endif.

*** Get Roll Handling if available
    if ME is instance of ZIF_VCXI_PXSR_RHNDL.
      LR_RHNDL ?= ME.
      append value #( NAME = 'T_RHNDL_RHNDL'  VALUE = ref #( LR_RHNDL->T_RHNDL ) ) to LT_DATA.
    endif.

***--------------------------------------------------------------------------------------
*** Serialize to XML
    call transformation ID
         source (LT_DATA)
         result xml RF_XML.

  endmethod.
  method SET_COMBW.

    move IF_COMBW to ME->F_COMBW.

  endmethod.
method TURN_PCDIM.

*** Keep everything else
  move IS_PCDIM           to RS_PCDIM.

  if IF_PCDIR ne IS_PCDIM-PCDIR.
*** Set new Direction
    move IF_PCDIR           to RS_PCDIM-PCDIR.

*** Turn
    move IS_PCDIM-PCLEN     to RS_PCDIM-PCWID.
    move IS_PCDIM-PCLEN_UOM to RS_PCDIM-PCWID_UOM.

    move IS_PCDIM-PCWID     to RS_PCDIM-PCLEN.
    move IS_PCDIM-PCWID_UOM to RS_PCDIM-PCLEN_UOM.
  endif.

endmethod.
