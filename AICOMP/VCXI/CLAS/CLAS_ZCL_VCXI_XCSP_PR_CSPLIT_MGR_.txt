
class ZCL_VCXI_XCSP_PR_CSPLIT_MGR definition
  public
  inheriting from /VCXI/CL_VKSR_CLSPR
  create public .

public section.

  constants C_IPRVT_XCS_CSPLIT_MGR type /VCXI/VKSC_IPRVT value 'ZVCXI_XCSP_CSPLIT_MGR'. "#EC NOTEXT

  methods GET_DCSPL
    returning
      value(RS_DCSPL) type ZVCXI_XCSP_S_DCSPL
    raising
      /VCXI/CX_CKX .
  methods GET_ICSPA
    returning
      value(RF_ICSPA) type ZVCXI_XCSP_ICSPA
    raising
      /VCXI/CX_CKX .
  methods SET_ICSPA
    importing
      !IF_ICSPA type ZVCXI_XCSP_ICSPA
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods GET_COMPF
    returning
      value(RF_COMPF) type ZVCXI_XCSP_COMPF
    raising
      /VCXI/CX_CKX .
protected section.

  constants C_IEVNT_O_ICSPA_CHANGED type /VCXI/VKSC_IEVNT value 'ICSPA_CHANGED'. "#EC NOTEXT
private section.
endclass. "ZCL_VCXI_XCSP_PR_CSPLIT_MGR definition
class ZCL_VCXI_XCSP_PR_CSPLIT_MGR implementation.
method GET_COMPF.

  data:  LF_ICSPA          type        ZVCXI_XCSP_ICSPA,
         LF_COMPR          type        ZVCXI_XCSP_COMPR,
         LF_COMPR_TOTAL    type        ZVCXI_XCSP_COMPR,
         LF_COMPR_ACTIVE   type        ZVCXI_XCSP_COMPR.
  data:  LT_GATE           type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE           type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_CSPLIT      type ref to ZCL_VCXI_XCSP_PR_CSPLIT.

***------------------------------------------------------------------
*** Get ID of Active Cost Split
  move ME->GET_ICSPA( ) to LF_ICSPA.
  check LF_ICSPA is not initial.

***------------------------------------------------------------------
*** Get all Cost Splits
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_CSPLIT=>C_IPRVT_XCS_CSPLIT
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.

*** Find Matching
  loop at LT_GATE into LR_GATE.
    move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT.
    check LR_PR_CSPLIT is bound.

    move LR_PR_CSPLIT->GET_COMPR( ) to LF_COMPR.
    add LF_COMPR to LF_COMPR_TOTAL.

    check LR_PR_CSPLIT->GET_ICSPL( ) eq LF_ICSPA.
    move LF_COMPR to LF_COMPR_ACTIVE.
  endloop.

***------------------------------------------------------------------
*** Calculate Factor
  if LF_COMPR_TOTAL gt 0.
    RF_COMPF = LF_COMPR_ACTIVE / LF_COMPR_TOTAL.
  endif.

endmethod.
method GET_DCSPL.

  data:  LF_ICSPA      type        ZVCXI_XCSP_ICSPA.
  data:  LT_GATE       type        /VCXI/VKSR_TT_GATE.
  data:  LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
         LR_PR_CSPLIT  type ref to ZCL_VCXI_XCSP_PR_CSPLIT.

***------------------------------------------------------------------
*** Get ID of Active Cost Split
  move ME->GET_ICSPA( ) to LF_ICSPA.
  check LF_ICSPA is not initial.

***------------------------------------------------------------------
*** Get all Cost Splits
  LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSP_PR_CSPLIT=>C_IPRVT_XCS_CSPLIT
                                   IF_INUSE = ABAP_TRUE ).
  check LT_GATE is not initial.

*** Find Matching
  loop at LT_GATE into LR_GATE.
    move LR_GATE->R_CLSPR ?to LR_PR_CSPLIT.
    check LR_PR_CSPLIT is bound.

    check LR_PR_CSPLIT->GET_ICSPL( ) eq LF_ICSPA.
    move LR_PR_CSPLIT->GET_DCSPL( ) to RS_DCSPL.
    exit.
  endloop.

endmethod.
method GET_ICSPA.

  data:  LS_LEOKY  type  /VCXI/VKSR_S_LEOKY.

  LS_LEOKY = ME->R_GATE->GET_LEOKY( ).

  move LS_LEOKY-LEOKY to RF_ICSPA.

endmethod.
method SET_ICSPA.

  data:  LF_CHANGED  type ABAP_BOOL.
  data:  LS_LEOKY    type /VCXI/VKSR_S_LEOKY.

  move IF_ICSPA to LS_LEOKY-LEOKY.
  move IF_SETBY to LS_LEOKY-SETBY.

  LF_CHANGED = ME->R_GATE->SET_LEOKY( IS_LEOKY = LS_LEOKY ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ICSPA_CHANGED ).
  endif.

endmethod.
