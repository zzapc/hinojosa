
class ZCL_VCXI_PCSS_PR_MS_SHTPR definition
  public
  inheriting from ZCL_VCXI_P0SS_PR_MS_SHTPR
  create public .

public section.

  constants C_IPRVT_PC_MS_SHTPR type /VCXI/VKSC_IPRVT value 'ZVCXI_PCSS_MS_SHTPR'. "#EC NOTEXT

  methods GET_FLUTE
    returning
      value(RF_FLUTE) type ZVCXI_PCS_FLUTE
    raising
      /VCXI/CX_CKX .
  methods GET_FLUTE_DESCR
    returning
      value(RF_FLUTE_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_FSLSC
    returning
      value(RF_FSLSC) type ZVCXI_PCSS_FSLSC
    raising
      /VCXI/CX_CKX .
  methods GET_PBDES
    returning
      value(RF_PBDES) type ZVCXI_PCSS_PBDES
    raising
      /VCXI/CX_CKX .
  methods GET_SBDES
    returning
      value(RF_SBDES) type ZVCXI_PCSS_SBDES
    raising
      /VCXI/CX_CKX .
  methods LOAD_BOARD_INFO
    importing
      !IF_BOARD type ZVCXI_PCS_BOARD
      !IF_MBOAR type ZVCXI_PCSS_MBOAR
      !IF_WERKS type WERKS_D
    raising
      /VCXI/CX_CKX .
  methods SET_FLUTE
    importing
      !IF_FLUTE type ZVCXI_PCS_FLUTE
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FSLSC
    importing
      !IF_FSLSC type ZVCXI_PCSS_FSLSC
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_PBDES
    importing
      !IF_PBDES type ZVCXI_PCSS_PBDES
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SBDES
    importing
      !IF_SBDES type ZVCXI_PCSS_SBDES
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
protected section.

  constants C_IEVNT_O_FLUTE_CHANGED type /VCXI/VKSC_IEVNT value 'FLUTE_CHANGED'. "#EC NOTEXT
  constants C_IEVNT_O_PBDES_CHANGED type /VCXI/VKSC_IEVNT value 'PBDES_CHANGED'. "#EC NOTEXT
  constants C_PARID_FLUTE type /VCXI/VKS_PARID value 'ZVCXI_PC_FLUTE'. "#EC NOTEXT
  constants C_PARID_FSLSC type /VCXI/VKS_PARID value 'ZVCXI_PC_FSLSC'. "#EC NOTEXT
  constants C_PARID_PBDES type /VCXI/VKS_PARID value 'ZVCXI_PC_PBDES'. "#EC NOTEXT
  constants C_PARID_SBDES type /VCXI/VKS_PARID value 'ZVCXI_PC_SBDES'. "#EC NOTEXT
  data R_CUST_PC_SHTPR type ref to ZCL_VCXI_PCSS_CUST_SHTPR .

  methods CALC_PAPER_INFO
    importing
      !IT_BPAP type ZVCXI_PCSS_TT_BPAP
    exporting
      !ES_CALIP type ZVCXI_P0SS_S_CALIP
      !ES_BAWGT type ZVCXI_P0S_S_BAWGT
      !ES_BAWGP type ZVCXI_P0S_S_BAWGP
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
  methods SET_SHTPR_BY_CUST
    redefinition .
private section.
endclass. "ZCL_VCXI_PCSS_PR_MS_SHTPR definition
class ZCL_VCXI_PCSS_PR_MS_SHTPR implementation.
method CALC_PAPER_INFO.

  data: LF_WERKS      type        WERKS_D,
        LF_DCONF      type        DATS.
  data: LS_BPAP       type        ZVCXI_PCSS_S_BPAP,
        LS_BAWGP      type        ZVCXI_P0S_S_BAWGP.
  data: LR_CUST_PAPER type ref to ZCL_VCXI_PCSS_CUST_PAPER.

*** Get Plant and Date
  LF_WERKS = ME->GET_WERKS( ).
  LF_DCONF = ME->GET_DCONF( ).

*** Get Current Values and initialize them
  ES_CALIP = ME->GET_CALIP( ).
  ES_BAWGT = ME->GET_BAWGT( ).
  ES_BAWGP = ME->GET_BAWGP( ).

  clear: ES_CALIP-CALIP.
  clear: ES_BAWGT-BAWGT.
  clear: ES_BAWGP-BAWGP.

  loop at IT_BPAP into LS_BPAP.
    clear: LR_CUST_PAPER.
*** Get Customizing paper
    LR_CUST_PAPER = ZCL_VCXI_PCSS_CUST_PAPER=>GET_INSTANCE_PAPER( IF_MATNR    = LS_BPAP-BPMAT
                                                                  IF_WERKS    = LF_WERKS
                                                                  IF_DATE     = LF_DCONF ).

*** Calculate the Basis Weight
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = ES_BAWGP-BAWGP_UOM
                                                       IF_UOM_IN    = LR_CUST_PAPER->S_BAWGP-BAWGP_UOM
                                                       IF_VALUE_IN  = LR_CUST_PAPER->S_BAWGP-BAWGP
                                             importing EF_VALUE_OUT = LS_BAWGP-BAWGP
                                                       EF_UOM_OUT   = LS_BAWGP-BAWGP_UOM ).

    check LS_BAWGP-BAWGP     is not initial and
          LS_BAWGP-BAWGP_UOM is not initial.

    if ES_BAWGP-BAWGP is initial.
      move LS_BAWGP to ES_BAWGP.
    endif.

    ES_BAWGT-BAWGT = ES_BAWGT-BAWGT + ( ( LR_CUST_PAPER->S_BAWGT-BAWGT * ES_BAWGP-BAWGP / LS_BAWGP-BAWGP ) * LS_BPAP-BPFAC ).

*** Calculate the Caliper
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LR_CUST_PAPER->S_CALIP-CALIP
                                                        IF_CALCV_UOM_1 = LR_CUST_PAPER->S_CALIP-CALIP_UOM
                                                        IF_CALCV_2     = ES_CALIP-CALIP
                                                        IF_CALCV_UOM_2 = ES_CALIP-CALIP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = ES_CALIP-CALIP_UOM
                                              importing EF_CALCV       = ES_CALIP-CALIP
                                                        EF_CALCV_UOM   = ES_CALIP-CALIP_UOM ).

  endloop.

endmethod.
method GET_FLUTE.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTE ).
  move LS_PARAM-ATWRT to RF_FLUTE.

endmethod.
method GET_FLUTE_DESCR.

  constants: LC_DOMNAME type                   DOMNAME value 'ZVCXI_PCS_FLUTE'.
  data:      LT_D07V    type standard table of DD07V.
  data:      LS_D07V    type                   DD07V.
  data:      LF_FLUTE   type                   ZVCXI_PCS_FLUTE.

  LF_FLUTE = ME->GET_FLUTE( ).

*** Return Flute Description
  call function 'DD_DOMVALUES_GET'
    exporting
      DOMNAME   = LC_DOMNAME
      TEXT      = 'X'
      LANGU     = SY-LANGU
    tables
      DD07V_TAB = LT_D07V.

  read table LT_D07V with key DOMVALUE_L = LF_FLUTE into LS_D07V.
  check SY-SUBRC = 0.

  RF_FLUTE_DESCR = LS_D07V-DDTEXT.

endmethod.
method GET_FSLSC.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FSLSC ).
  move LS_PARAM-ATWRT to RF_FSLSC.

endmethod.
method GET_PBDES.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PBDES ).
  move LS_PARAM-ATWRT to RF_PBDES.

endmethod.
method GET_SBDES.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SBDES ).
  move LS_PARAM-ATWRT to RF_SBDES.

endmethod.
method GET_STATUS.

  RF_ELMST = SUPER->GET_STATUS( ).

*** Check Production and Sales Board ID Description
  if ME->GET_SBDES( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

  if ME->GET_PBDES( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

*** Check Flute
  if ME->GET_FLUTE( ) is not initial.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
  else.
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
  endif.

endmethod.
method GET_STATUS_MSG.

  SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***------------------------------------------------------------------
*** Check Sales Board ID Decription
  if ME->GET_SBDES( ) is not initial.
*** Sales Board ID Description is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '603' ).
  else.
*** Sales Board ID Description is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '604' ).
  endif.

*** Check Production Board ID Decription
  if ME->GET_PBDES( ) is not initial.
*** Prodction Board ID Description is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '601' ).
  else.
*** Prodction Board ID Description is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '602' ).
  endif.

***------------------------------------------------------------------
*** Check Flute
  if ME->GET_FLUTE( ) is not initial.
*** Flute is maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'S'
                             IF_MSGNO = '605' ).
  else.
*** Flute is not maintained.
    IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_PCSS'
                             IF_MSGTY = 'E'
                             IF_MSGNO = '606' ).

  endif.

endmethod.
method HANDLE_INIT_CUST_MATNR.

  data:  LF_MATNR       type        MATNR,
         LF_WERKS       type        WERKS_D,
         LF_DCONF       type        DATS.

  move ME->GET_MATNR( )            to LF_MATNR.
  move ME->GET_WERKS( )            to LF_WERKS.
  move ME->GET_DCONF( )            to LF_DCONF.

  if ME->R_CUST_PC_SHTPR          is bound    and
     ME->R_CUST_PC_SHTPR->F_MATNR eq LF_MATNR and
     ME->R_CUST_PC_SHTPR->F_WERKS eq LF_WERKS.
*** Everything was loaded already...
    exit.
  endif.

  clear:  ME->R_CUST_MATNR, ME->R_CUST_P0_SHTPR, ME->R_CUST_PC_SHTPR.

*** Load the Customizing
  ME->R_CUST_PC_SHTPR = ZCL_VCXI_PCSS_CUST_SHTPR=>GET_INSTANCE_PC_SHTPR( IF_MATNR = LF_MATNR
                                                                         IF_WERKS = LF_WERKS
                                                                         IF_DATE  = LF_DCONF ).

  check ME->R_CUST_PC_SHTPR is bound.
  move ME->R_CUST_PC_SHTPR to ME->R_CUST_P0_SHTPR.
  move ME->R_CUST_PC_SHTPR to ME->R_CUST_MATNR.

*** Set Data
  ME->SET_SHTPR_BY_CUST( ).
  ME->SET_PRINT_BY_CUST( ).

endmethod.
method LOAD_BOARD_INFO.

  data:  LF_SBDES           type        ZVCXI_PCSS_BDESC,
         LF_PBDES           type        ZVCXI_PCSS_BDESC,
         LF_DCONF           type        DATS.
  data:  LS_CALIP           type        ZVCXI_P0SS_S_CALIP,
         LS_BAWGT           type        ZVCXI_P0S_S_BAWGT,
         LS_BAWGP           type        ZVCXI_P0S_S_BAWGP,
         LS_BGWHT           type        ZVCXI_PCSS_S_BGWHT.
  data:  LT_BPAP            type        ZVCXI_PCSS_TT_BPAP.
  data:  LR_CUST_BOARD      type ref to ZCL_VCXI_PCSS_CUST_BOARD.

***--------------------------------------------------------------------------------------
*** Get Configuration Date
  LF_DCONF = ME->GET_DCONF( ).

*** Get Board Customizing
  LR_CUST_BOARD = ZCL_VCXI_PCSS_CUST_BOARD=>GET_INSTANCE( IF_BOARD = IF_BOARD
                                                          IF_MBOAR = IF_MBOAR
                                                          IF_WERKS = IF_WERKS
                                                          IF_DATE  = LF_DCONF ).

  check LR_CUST_BOARD is bound.
*** Set BoardID as Board Description
  if IF_MBOAR eq ZCL_VCXI_PCSS_PR_BOARD=>C_MBOAR_S.
*** Sales Board Mode -> exact BoardIDs
    LF_SBDES = LR_CUST_BOARD->F_BOARD.
    LF_PBDES = LR_CUST_BOARD->GET_APBOA( ).
    if LF_PBDES is initial.
      LF_PBDES = LR_CUST_BOARD->F_BOARD.
    endif.
  else.
*** Other Board Modes -> Same BoardIDs
    LF_SBDES = LR_CUST_BOARD->F_BOARD.
    LF_PBDES = LR_CUST_BOARD->F_BOARD.
  endif.

  ME->SET_SBDES( IF_SBDES = LF_SBDES ).
  ME->SET_PBDES( IF_PBDES = LF_PBDES ).

*** Set Flute
  ME->SET_FLUTE( IF_FLUTE = LR_CUST_BOARD->F_FLUTE ).

*** Calculate all Info's
  LT_BPAP = LR_CUST_BOARD->GET_BPAP( IF_ARBPL = LR_CUST_BOARD->F_ARBPL ).
  ME->CALC_PAPER_INFO( exporting IT_BPAP  = LT_BPAP
                       importing ES_CALIP = LS_CALIP
                                 ES_BAWGT = LS_BAWGT
                                 ES_BAWGP = LS_BAWGP ).

*** Add BoardGrade Wall Height to Caliper
  LS_BGWHT = LR_CUST_BOARD->GET_BGWHT( IF_ARBPL = LR_CUST_BOARD->F_ARBPL ).
  if LS_BGWHT-BGWHT_UOM is not initial.
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_BGWHT-BGWHT
                                                        IF_CALCV_UOM_1 = LS_BGWHT-BGWHT_UOM
                                                        IF_CALCV_2     = LS_CALIP-CALIP
                                                        IF_CALCV_UOM_2 = LS_CALIP-CALIP_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_CALIP-CALIP_UOM
                                              importing EF_CALCV       = LS_CALIP-CALIP
                                                        EF_CALCV_UOM   = LS_CALIP-CALIP_UOM ).
  endif.

*** Set Caliper
  ME->SET_CALIP( IS_CALIP = LS_CALIP ).

*** Set Base Weight
  ME->SET_BAWGT( IS_BAWGT = LS_BAWGT ).

*** Set Base Weight per
  ME->SET_BAWGP( IS_BAWGP = LS_BAWGP ).

endmethod.
method SET_FLUTE.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FLUTE ).

  move IF_FLUTE to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FLUTE_CHANGED ).
  endif.

endmethod.
method SET_FSLSC.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FSLSC ).

  move IF_FSLSC to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_CONV_CHANGED ).
  endif.

endmethod.
method SET_PBDES.

  data:  LF_CHANGED type ABAP_BOOL.
  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_PBDES ).

  move IF_PBDES to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

  if LF_CHANGED eq ABAP_TRUE.
*** Send Event
    ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_PBDES_CHANGED ).
  endif.

endmethod.
method SET_SBDES.

  data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

  LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SBDES ).

  move IF_SBDES to LS_PARAM-ATWRT.
  move IF_SETBY to LS_PARAM-SETBY.

  ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

endmethod.
method SET_SHTPR_BY_CUST.

  SUPER->SET_SHTPR_BY_CUST( ).

*** Get Sheet Procurement Info's for Stock Materials
  if ME->IS_DUMMY( ) eq ABAP_FALSE.
    ME->SET_SBDES( IF_SBDES = ME->R_CUST_PC_SHTPR->F_SBDES ).
    ME->SET_PBDES( IF_PBDES = ME->R_CUST_PC_SHTPR->F_PBDES ).
    ME->SET_FLUTE( IF_FLUTE = ME->R_CUST_PC_SHTPR->F_FLUTE ).
    ME->SET_FSLSC( IF_FSLSC = ME->R_CUST_PC_SHTPR->F_FSLSC ).
  endif.

endmethod.
