
class ZCL_VCXI_XCSU_CUST_SHIPU definition
  public
  create protected .

public section.

  types:
    YT_TC101 type standard table of ZVCXI_XCS_TC101 with default key .
  types:
    YT_TC102 type standard table of ZVCXI_XCS_TC102 with default key .

  constants C_CONSC_COVER type ZVCXI_XCSU_CONSC value 'COVER' ##NO_TEXT.
  constants C_CONSC_ENCASE type ZVCXI_XCSU_CONSC value 'ENCASE' ##NO_TEXT.
  constants C_CONSC_SS_PALLET type ZVCXI_XCSU_CONSC value '*PALLET*' ##NO_TEXT.
  constants C_CONSC_STACKED type ZVCXI_XCSU_CONSC value 'STACKED' ##NO_TEXT.
  constants C_CONSC_TOPBOTTOM type ZVCXI_XCSU_CONSC value 'TOP_AND_BOTTOM' ##NO_TEXT.
  constants C_DIMEN_DIAMETER type ZVCXI_XCSU_DIMEN value 'DIAMETER' ##NO_TEXT.
  constants C_DIMEN_HEIGHT type ZVCXI_XCSU_DIMEN value 'HEIGHT' ##NO_TEXT.
  constants C_DIMEN_LAYERS type ZVCXI_XCSU_DIMEN value 'LAYERS' ##NO_TEXT.
  constants C_DIMEN_LENGTH type ZVCXI_XCSU_DIMEN value 'LENGTH' ##NO_TEXT.
  constants C_DIMEN_OV_LENGTH type ZVCXI_XCSU_DIMEN value 'OVERHANG_LENGTH' ##NO_TEXT.
  constants C_DIMEN_OV_WIDTH type ZVCXI_XCSU_DIMEN value 'OVERHANG_WIDTH' ##NO_TEXT.
  constants C_DIMEN_WEIGHT type ZVCXI_XCSU_DIMEN value 'WEIGHT' ##NO_TEXT.
  constants C_DIMEN_WIDTH type ZVCXI_XCSU_DIMEN value 'WIDTH' ##NO_TEXT.
  constants C_DIMID_AREA type DIMID value 'SURFAC' ##NO_TEXT.
  constants C_DIMID_LINEAR type DIMID value 'LENGTH' ##NO_TEXT.
  constants C_DIMID_VOLUME type DIMID value 'VOLUME' ##NO_TEXT.
  constants C_EFFCT_ADD type ZVCXI_XCSU_EFFCT value 'ADD' ##NO_TEXT.
  constants C_EFFCT_DIM_MIN type ZVCXI_XCSU_EFFCT value 'DIM_MIN' ##NO_TEXT.
  constants C_LIMIT_MAX type ZVCXI_XCSU_LIMIT value 'MAX' ##NO_TEXT.
  constants C_PIREM_MAIN type ZVCXI_XCSU_PIREM value 'M' ##NO_TEXT.
  constants C_PIREM_PMAT type ZVCXI_XCSU_PIREM value 'P' ##NO_TEXT.
  constants C_RLARR_RECTANGULAR type ZVCXI_XCSU_RLARR value 'R' ##NO_TEXT.
  constants C_RLARR_TRIANGULAR type ZVCXI_XCSU_RLARR value 'T' ##NO_TEXT.
  constants C_RLROT_LAYING type ZVCXI_XCSU_RLROT value 'L' ##NO_TEXT.
  constants C_RLROT_STANDING type ZVCXI_XCSU_RLROT value 'S' ##NO_TEXT.
  constants C_SHUTY_SS_UNIT type ZVCXI_XCSU_SHUTY value '*UNIT*' ##NO_TEXT.
  data F_DIMID type DIMID read-only .
  data F_OWNER type /VCXI/CKX_STRING read-only .
  data F_SHUTY_CONTAINER type ZVCXI_XCSU_SHUTY read-only .
  data F_SHUTY_STACK type ZVCXI_XCSU_SHUTY read-only .
  data S_UMARG type ZVCXI_XCSU_S_UMARG read-only .
  data:
    T_SHUTY_UNIT type table of ZVCXI_XCSU_SHUTY read-only .
  data:
    T_SHUTY_HU type table of ZVCXI_XCSU_SHUTY read-only .
  class-data T_TC101 type YT_TC101 read-only .
  class-data T_TC102 type YT_TC102 read-only .

  class-methods CLASS_CONSTRUCTOR .
  methods GET_ACT_PMATY_PALLET
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    returning
      value(RF_PMATY) type ZVCXI_XCSU_PMATY
    raising
      /VCXI/CX_CKX .
  methods GET_CONSC_FOR_PMATY
    importing
      !IF_PMATY type ZVCXI_XCSU_PMATY
      !IF_WERKS type WERKS_D optional
    returning
      value(RT_CONSC) type ZVCXI_XCSU_TT_CONSC
    raising
      /VCXI/CX_CKX .
  methods GET_CPACK_FOR_SHSCH
    importing
      !IF_WERKS type WERKS_D
      !IF_SHSCH type ZVCXI_XCSU_SHSCH
    returning
      value(RT_CPACK) type ZVCXI_XCSU_TT_CPACK
    raising
      /VCXI/CX_CKX .
  methods GET_CUB1D_CONTAINER
    importing
      !IT_UNIT_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IT_CONT_LIMIT type ZVCXI_XCSU_TT_LIMIT
      !IT_CONT_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IS_COMOD type ZVCXI_XCSU_S_COMOD
    exporting
      !EF_NUNIT type INT4
      !ET_CONT_DIMEN type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods GET_CUBED_CONTAINER
    importing
      !IT_UNIT_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IT_CONT_LIMIT type ZVCXI_XCSU_TT_LIMIT
      !IT_CONT_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IS_COMOD type ZVCXI_XCSU_S_COMOD
    exporting
      !EF_NUNIT type INT4
      !ET_CONT_DIMEN type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR_FOR_CONSC
    importing
      !IF_CONSC type ZVCXI_XCSU_CONSC
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_DESCR_FOR_DIMEN
    importing
      !IF_DIMEN type ZVCXI_XCSU_DIMEN
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_DESCR_FOR_EFFCT
    importing
      !IF_EFFCT type ZVCXI_XCSU_EFFCT
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods GET_DESCR_FOR_LIMIT
    importing
      !IF_LIMIT type ZVCXI_XCSU_LIMIT
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR_FOR_PACKP
    importing
      !IF_PACKP type ZVCXI_XCSU_PACKP
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR_FOR_PMATY
    importing
      !IF_PMATY type ZVCXI_XCSU_PMATY
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR_FOR_SHSCH
    importing
      !IF_SHSCH type ZVCXI_XCSU_SHSCH
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR_FOR_SHUNT
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_DESCR_FOR_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_DIMEN_FOR_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
      !IF_SYSOM type /VCXI/VKS_SYSOM optional
    exporting
      !ET_DIMEN type ZVCXI_XCSU_TT_DIMEN
    returning
      value(RT_SHUTY_DIMEN) type ZVCXI_XCSU_TT_SHUTY_DIMEN
    raising
      /VCXI/CX_CKX .
  methods GET_DIMVA_DIMEN
    importing
      !IT_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IF_DIMEN type ZVCXI_XCSU_DIMEN
      !IF_UOM type /VCXI/CKX_UOM optional
    exporting
      !EF_UNKNOWN type ABAP_BOOL
    returning
      value(RS_DIMVA) type ZVCXI_XCSU_S_DIMVA
    raising
      /VCXI/CX_CKX .
  methods GET_DIMVA_EFFCT
    importing
      !IT_PACKMAT_EFFCT type ZVCXI_XCSU_TT_PACKMAT_EFFCT
      !IF_PMATY type ZVCXI_XCSU_PMATY
      !IF_EFFCT type ZVCXI_XCSU_EFFCT
      !IF_DIMEN type ZVCXI_XCSU_DIMEN
      !IF_UOM type /VCXI/CKX_UOM optional
    returning
      value(RS_DIMVA) type ZVCXI_XCSU_S_DIMVA
    raising
      /VCXI/CX_CKX .
  methods GET_DIMVA_LIMIT
    importing
      !IT_LIMIT type ZVCXI_XCSU_TT_LIMIT
      !IF_LIMIT type ZVCXI_XCSU_LIMIT
      !IF_DIMEN type ZVCXI_XCSU_DIMEN
      !IF_UOM type /VCXI/CKX_UOM optional
    exporting
      !EF_UNKNOWN type ABAP_BOOL
    returning
      value(RS_DIMVA) type ZVCXI_XCSU_S_DIMVA
    raising
      /VCXI/CX_CKX .
  methods GET_EFFCT_FOR_PMATN
    importing
      !IF_PMATN type ZVCXI_XCSU_PMATN
      !IF_PMATY type ZVCXI_XCSU_PMATY optional
      !IF_SYSOM type /VCXI/VKS_SYSOM default 'M'
    returning
      value(RT_PMATN_EFFCT) type ZVCXI_XCSU_TT_PMATN_EFFCT
    raising
      /VCXI/CX_CKX .
  methods GET_EFFCT_FOR_PMATY
    importing
      !IF_PMATY type ZVCXI_XCSU_PMATY
      !IF_SYSOM type ZVCXI_XCSU_MSYST optional
    exporting
      !ET_EFFCT type ZVCXI_XCSU_TT_EFFCT
    returning
      value(RT_PMATY_EFFCT) type ZVCXI_XCSU_TT_PMATY_EFFCT
    raising
      /VCXI/CX_CKX .
  methods GET_FMNAG_FOR_LIMIT
    importing
      !IF_LIMIT type ZVCXI_XCSU_LIMIT
    returning
      value(RF_FMNAG) type ZVCXI_XCSU_FMNAG
    raising
      /VCXI/CX_CKX .
  methods GET_FMNCH_FOR_LIMIT
    importing
      !IF_LIMIT type ZVCXI_XCSU_LIMIT
    returning
      value(RF_FMNCH) type ZVCXI_XCSU_FMNCH
    raising
      /VCXI/CX_CKX .
  methods GET_FMNDI_FOR_EFFCT
    importing
      !IF_EFFCT type ZVCXI_XCSU_EFFCT
    returning
      value(RF_FMNDI) type ZVCXI_XCSU_FMNDI
    raising
      /VCXI/CX_CKX .
  methods GET_FMNPA_FOR_PMATY
    importing
      !IF_PMATY type ZVCXI_XCSU_PMATY
    returning
      value(RF_FMNPA) type ZVCXI_XCSU_FMNPA
    raising
      /VCXI/CX_CKX .
  methods GET_FMNSH_FOR_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RF_FMNSH) type ZVCXI_XCSU_FMNSH
    raising
      /VCXI/CX_CKX .
  methods GET_HORIZONTAL_CONTAINER
    importing
      !IT_PRV_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IT_CONT_LIMIT type ZVCXI_XCSU_TT_LIMIT
      !IT_CONT_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IS_COMOD type ZVCXI_XCSU_S_COMOD
    exporting
      !EF_NUNIT type INT4
      !ET_CONT_DIMEN type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IF_OWNER type /VCXI/CKX_STRING optional
    returning
      value(RR_CUST_SHIPU) type ref to ZCL_VCXI_XCSU_CUST_SHIPU
    raising
      /VCXI/CX_CKX .
  methods GET_ISVCE_FOR_PMATY
    importing
      !IF_PMATY type ZVCXI_XCSU_PMATY
    returning
      value(RF_ISVCE) type ZVCXI_XCS_ISVCE
    raising
      /VCXI/CX_CKX .
  methods GET_LAPOS
    importing
      !IF_WERKS type WERKS_D optional
    returning
      value(RT_LAPOS) type YT_TC102
    raising
      /VCXI/CX_CKX .
  class-methods GET_LAPOS_DESCR
    importing
      !IF_LAPOS type ZVCXI_XCSU_LAPOS
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_LIMIT_FOR_SHUNT
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    returning
      value(RT_SHUTY_LIMIT) type ZVCXI_XCSU_TT_SHUTY_LIMIT
    raising
      /VCXI/CX_CKX .
  methods GET_LIMIT_FOR_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RT_SHUTY_LIMIT) type ZVCXI_XCSU_TT_SHUTY_LIMIT
    raising
      /VCXI/CX_CKX .
  methods GET_LIMIT_SET_FOR_EFFCT
    importing
      !IF_EFFCT type ZVCXI_XCSU_EFFCT
    returning
      value(RT_EFFCT_LIMIT) type ZVCXI_XCSU_TT_EFFCT_LIMIT
    raising
      /VCXI/CX_CKX .
  methods GET_NUMBER_PALLETS
    importing
      !IF_CONSC type ZVCXI_XCSU_CONSC
    returning
      value(RF_NOPAL) type ZVCXI_XCSU_NOPAL
    raising
      /VCXI/CX_CKX .
  methods GET_NUMBER_ROLLS
    importing
      !IF_PACKP type ZVCXI_XCSU_PACKP
    returning
      value(RF_NOROL) type ZVCXI_XCSU_NOROL
    raising
      /VCXI/CX_CKX .
  methods GET_NUMBER_STACKS
    importing
      !IF_PACKP type ZVCXI_XCSU_PACKP
    returning
      value(RF_NOSTA) type ZVCXI_XCSU_NOSTA
    raising
      /VCXI/CX_CKX .
  methods GET_OBLIG_DIMEN_FOR_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RT_SHUTY_DIMEN) type ZVCXI_XCSU_TT_SHUTY_DIMEN
    raising
      /VCXI/CX_CKX .
  methods GET_PACKP_FOOTPRINT
    importing
      !IF_PACKP type ZVCXI_XCSU_PACKP
      !IT_PREV_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IF_SHUTY type ZVCXI_XCSU_SHUTY optional
      !IF_SHUNT type ZVCXI_XCSU_SHUNT optional
    changing
      !CS_DIM_LEN type ZVCXI_XCSU_S_DIMVA
      !CS_DIM_WID type ZVCXI_XCSU_S_DIMVA
      !CS_DIM_HGT type ZVCXI_XCSU_S_DIMVA
    raising
      /VCXI/CX_CKX .
  methods GET_PACKP_FOOTPRINT_OLD
    importing
      !IF_PACKP type ZVCXI_XCSU_PACKP
      !IS_DIMVA_LEN type ZVCXI_XCSU_S_DIMVA
      !IS_DIMVA_WID type ZVCXI_XCSU_S_DIMVA
      !IF_SHUTY type ZVCXI_XCSU_SHUTY optional
      !IF_SHUNT type ZVCXI_XCSU_SHUNT optional
    exporting
      !ES_DIMVA_LEN type ZVCXI_XCSU_S_DIMVA
      !ES_DIMVA_WID type ZVCXI_XCSU_S_DIMVA
    raising
      /VCXI/CX_CKX .
  methods GET_PACKP_FOR_SHUNT
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
      !IF_WERKS type WERKS_D optional
    returning
      value(RT_PACKP) type ZVCXI_XCSU_TT_PACKP
    raising
      /VCXI/CX_CKX .
  methods GET_PALLET_FOOTPRINT
    importing
      !IF_CONSC type ZVCXI_XCSU_CONSC
      !IS_DIMVA_LEN type ZVCXI_XCSU_S_DIMVA
      !IS_DIMVA_WID type ZVCXI_XCSU_S_DIMVA
      !IF_SHUTY type ZVCXI_XCSU_SHUTY optional
      !IF_SHUNT type ZVCXI_XCSU_SHUNT optional
    exporting
      !ES_DIMVA_LEN type ZVCXI_XCSU_S_DIMVA
      !ES_DIMVA_WID type ZVCXI_XCSU_S_DIMVA
    raising
      /VCXI/CX_CKX .
  methods GET_PALLET_PATTERN
    importing
      !IF_CONSC type ZVCXI_XCSU_CONSC
    returning
      value(RS_PALLET) type ZVCXI_XCS_TC152
    raising
      /VCXI/CX_CKX .
  methods GET_PICHP_FOR_SHUNT
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    returning
      value(RF_PICHP) type PL_CHECKPROF
    raising
      /VCXI/CX_CKX .
  methods GET_PIREM_FOR_PMATY
    importing
      !IF_PMATY type ZVCXI_XCSU_PMATY
    returning
      value(RF_PIREM) type ZVCXI_XCSU_PIREM
    raising
      /VCXI/CX_CKX .
  methods GET_PMATN_FOR_PMATY
    importing
      !IF_PMATY type ZVCXI_XCSU_PMATY
      !IF_WERKS type WERKS_D optional
    returning
      value(RT_PMATN) type ZVCXI_XCSU_TT_PMATN
    raising
      /VCXI/CX_CKX .
  methods GET_PMATY_COMBI
    importing
      !IF_SYSOM type /VCXI/VKS_SYSOM default 'M'
    returning
      value(RT_PMATY_COMBI) type ZVCXI_XCSU_TT_PMATY_COMBI
    raising
      /VCXI/CX_CKX .
  methods GET_PMATY_FOR_ISVCE
    importing
      !IF_ISVCE type ZVCXI_XCS_ISVCE
    returning
      value(RT_PMATY) type ZVCXI_XCSU_TT_PMATY
    raising
      /VCXI/CX_CKX .
  methods GET_PMATY_FOR_SHUNT
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    returning
      value(RT_PMATY) type ZVCXI_XCSU_TT_PMATY
    raising
      /VCXI/CX_CKX .
  methods GET_PMATY_SET_FOR_SHUNT
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    returning
      value(RT_SHUNT_PMATY) type ZVCXI_XCSU_TT_SHUNT_PMATY
    raising
      /VCXI/CX_CKX .
  methods GET_PMQTY_BY_CONSC
    importing
      !IF_CONSC type ZVCXI_XCSU_CONSC
    returning
      value(RS_PMQTY) type ZVCXI_XCSU_S_PMQTY
    raising
      /VCXI/CX_CKX .
  methods GET_PRQTY_BY_PACKP
    importing
      !IF_PACKP type ZVCXI_XCSU_PACKP
    returning
      value(RS_PRQTY) type ZVCXI_XCSU_S_PRQTY
    raising
      /VCXI/CX_CKX .
  methods GET_RISEQ_FOR_SHSCH
    importing
      !IF_SHSCH type ZVCXI_XCSU_SHSCH
    returning
      value(RF_FRSEQ) type ZVCXI_XCSU_FRSEQ
    raising
      /VCXI/CX_CKX .
  methods GET_SAPOS
    importing
      !IF_SAPOS type ZVCXI_XCSU_SAPOS
    exporting
      !ES_SAQTY type ZVCXI_XCSU_S_SAQTY
    raising
      /VCXI/CX_CKX .
  methods GET_SHSCH_COMBI
    returning
      value(RT_SHSCH_COMBI) type ZVCXI_XCSU_TT_SHSCH_COMBI
    raising
      /VCXI/CX_CKX .
  methods GET_SHSCH_FOR_MODEL
    importing
      !IF_CMATN type /VCXI/VKC_CMATN
      !IF_PRFID type /VCXI/VKC_PRFID
      !IF_CNTXT type ZVCXI_XCS_CNTXT optional
    returning
      value(RT_SHSCH) type ZVCXI_XCSU_TT_SHSCH
    raising
      /VCXI/CX_CKX .
  methods GET_SHUNT_COMBI
    returning
      value(RT_SHUNT_COMBI) type ZVCXI_XCSU_TT_SHUNT_COMBI
    raising
      /VCXI/CX_CKX .
  methods GET_SHUNT_FOR_SHUTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    returning
      value(RT_SHUNT) type ZVCXI_XCSU_TT_SHUNT
    raising
      /VCXI/CX_CKX .
  methods GET_SHUTY_COMBI
    returning
      value(RT_SHUTY_COMBI) type ZVCXI_XCSU_TT_SHUTY_COMBI
    raising
      /VCXI/CX_CKX .
  methods GET_SHUTY_FOR_SHSCH
    importing
      !IF_SHSCH type ZVCXI_XCSU_SHSCH
    returning
      value(RT_SHUTY) type ZVCXI_XCSU_TT_SHUTY
    raising
      /VCXI/CX_CKX .
  methods GET_SHUTY_SET_FOR_SHSCH
    importing
      !IF_SHSCH type ZVCXI_XCSU_SHSCH
    returning
      value(RT_SHSCH_SHUTY) type ZVCXI_XCSU_TT_SHSCH_SHUTY
    raising
      /VCXI/CX_CKX .
  methods GET_STRAPPING_PATTERN
    importing
      !IF_CONSC type ZVCXI_XCSU_CONSC
    returning
      value(RS_STRAP) type ZVCXI_XCS_TC151
    raising
      /VCXI/CX_CKX .
  methods GET_TLABL
    importing
      !IF_WERKS type WERKS_D optional
    returning
      value(RT_TLABL) type YT_TC101
    raising
      /VCXI/CX_CKX .
  class-methods GET_TLABL_DESCR
    importing
      !IF_TLABL type ZVCXI_XCSU_TLABL
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_VERTICAL_CONTAINER
    importing
      !IT_PRV_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IT_CONT_LIMIT type ZVCXI_XCSU_TT_LIMIT
      !IT_CONT_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IS_COMOD type ZVCXI_XCSU_S_COMOD
    exporting
      !EF_NUNIT type INT4
      !ET_CONT_DIMEN type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods IS_PM_REQ
    importing
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
    returning
      value(RF_REQUIRED) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods ROUND_QTY
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
      !IF_SHUNT type ZVCXI_XCSU_SHUNT
      !IF_WERKS type WERKS_D
      !IF_CUSTO type ABAP_BOOL default ABAP_FALSE
    changing
      !CF_QTY type ANY
    raising
      /VCXI/CX_CKX .
  methods SET_CONFIG_MODEL_SETTINGS
    importing
      !IT_SHUTY_STACK type ZVCXI_XCSU_TT_SHUTY
      !IT_SHUTY_UNIT type ZVCXI_XCSU_TT_SHUTY
      !IT_SHUTY_HU type ZVCXI_XCSU_TT_SHUTY
      !IT_PMATY_PALLET type ZVCXI_XCSU_TT_PMATY
      !IT_SHUTY_CONTAINER type ZVCXI_XCSU_TT_SHUTY
      !IF_DIMID type DIMID
      !IS_UMARG type ZVCXI_XCSU_S_UMARG
      !IF_SHSCH type ZVCXI_XCSU_SHSCH
    raising
      /VCXI/CX_CKX .
  methods SET_DIMVA_DIMEN
    importing
      !IF_DIMEN type ZVCXI_XCSU_DIMEN
      !IS_DIMVA type ZVCXI_XCSU_S_DIMVA
    changing
      !CT_DIMEN type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods SORT_SHUTY_DIMEN
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    changing
      !CT_DIMEN type ZVCXI_XCSU_TT_DIMEN
    raising
      /VCXI/CX_CKX .
  methods SORT_SHUTY_LIMIT
    importing
      !IF_SHUTY type ZVCXI_XCSU_SHUTY
    changing
      !CT_LIMIT type ZVCXI_XCSU_TT_LIMIT
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
           OWNER      type /VCXI/CKX_STRING,
           R_INSTANCE type ref to ZCL_VCXI_XCSU_CUST_SHIPU,
         end of YS_INSTANCE .
  types:
    begin of YS_TC110.
          include type ZVCXI_XCS_TC110.
  types: DESCR   type /VCXI/CKX_DESCR,
         end   of YS_TC110 .
  types:
    begin of YS_TC120.
          include type ZVCXI_XCS_TC120.
  types: DESCR   type /VCXI/CKX_DESCR,
         end   of YS_TC120 .
  types:
*  types YS_TC120_G type  .
    begin of YS_TC130.
          include type ZVCXI_XCS_TC130.
  types: DESCR   type /VCXI/CKX_DESCR,
         end   of YS_TC130 .
  types:
    begin of YS_TC140.
          include type ZVCXI_XCS_TC140.
  types: DESCR   type /VCXI/CKX_DESCR,
         end   of YS_TC140 .
  types:
    begin of YS_TC150.
          include type ZVCXI_XCS_TC150.
  types: DESCR   type /VCXI/CKX_DESCR,
         end   of YS_TC150 .
  types:
    begin of YS_TC160.
          include type ZVCXI_XCS_TC160.
  types: DESCR   type /VCXI/CKX_DESCR,
         end   of YS_TC160 .
  types:
    begin of YS_TC170.
          include type ZVCXI_XCS_TC170.
  types: DESCR   type /VCXI/CKX_DESCR,
         end   of YS_TC170 .
  types:
    begin of YS_TC180.
          include type ZVCXI_XCS_TC180.
  types: DESCR   type /VCXI/CKX_DESCR,
         end   of YS_TC180 .
  types:
    begin of YS_TC190.
          include type ZVCXI_XCS_TC190.
  types: DESCR   type /VCXI/CKX_DESCR,
         end   of YS_TC190 .
  types:
    YT_INSTANCE type table of YS_INSTANCE .
  types:
    YT_TC101T type standard table of ZVCXI_XCS_TC101T with default key .
  types:
    YT_TC102T type standard table of ZVCXI_XCS_TC102T with default key .
  types:
    YT_TC103 type standard table of ZVCXI_XCS_TC103 with default key .
  types:
    YT_TC104 type standard table of ZVCXI_XCS_TC104 with default key .
  types:
    YT_TC105 type standard table of ZVCXI_XCS_TC105 with default key .
  types:
    YT_TC106 type standard table of ZVCXI_XCS_TC106 with default key .
  types:
    YT_TC110 type standard table of YS_TC110 with default key .
  types:
    YT_TC120 type standard table of YS_TC120 with default key .
  types:
    YT_TC130 type standard table of YS_TC130 with default key .
  types:
    YT_TC131 type standard table of ZVCXI_XCS_TC131 with default key .
  types:
    YT_TC140 type standard table of YS_TC140 with default key .
  types:
    YT_TC141 type standard table of ZVCXI_XCS_TC141 with default key .
  types:
    YT_TC142 type standard table of ZVCXI_XCS_TC142 with default key .
  types:
    YT_TC143 type table of ZVCXI_XCS_TC143 with default key .
  types:
    YT_TC150 type standard table of YS_TC150 with default key .
  types:
    YT_TC151 type standard table of ZVCXI_XCS_TC151 with default key .
  types:
    YT_TC152 type standard table of ZVCXI_XCS_TC152 with default key .
  types:
    YT_TC153 type standard table of ZVCXI_XCS_TC153 with default key .
  types:
    YT_TC160 type standard table of YS_TC160 with default key .
  types:
    YT_TC161 type standard table of ZVCXI_XCS_TC161 with default key .
  types:
    YT_TC162 type standard table of ZVCXI_XCS_TC162 with default key .
  types:
    YT_TC170 type standard table of YS_TC170 with default key .
  types:
    YT_TC171 type standard table of ZVCXI_XCS_TC171 with default key .
  types:
    YT_TC172 type standard table of ZVCXI_XCS_TC172 with default key .
  types:
    YT_TC173 type standard table of ZVCXI_XCS_TC173 with default key .
  types:
    YT_TC180 type standard table of YS_TC180 with default key .
  types:
    YT_TC181 type standard table of ZVCXI_XCS_TC181 with default key .
  types:
    YT_TC182 type standard table of ZVCXI_XCS_TC182 with default key .
  types:
    YT_TC183 type standard table of ZVCXI_XCS_TC183 with default key .
  types:
    YT_TC190 type standard table of YS_TC190 with default key .
  types:
    YT_TC191 type standard table of ZVCXI_XCS_TC191 with default key .
  types:
    YT_TC192 type standard table of ZVCXI_XCS_TC192 with default key .
  types:
    YT_TD100 type standard table of ZVCXI_XCS_TD100 with default key .
  types:
    YT_TD101 type standard table of ZVCXI_XCS_TD101 with default key .
  types:
    YT_TD102 type standard table of ZVCXI_XCS_TD102 with default key .

  constants C_ROTEL_PALLET type ZVCXI_XCSU_ROTEL value 'PALLET' ##NO_TEXT.
  constants C_ROTEL_ROLL type ZVCXI_XCSU_ROTEL value 'ROLL' ##NO_TEXT.
  constants C_ROTEL_STACK type ZVCXI_XCSU_ROTEL value 'STACK' ##NO_TEXT.
  constants C_SHUNT_SS_PALLET type ZVCXI_XCSU_SHUNT value '*PALLET*' ##NO_TEXT.
  class-data T_INSTANCE type YT_INSTANCE .
  data T_PMATY_PALLET type ZVCXI_XCSU_TT_PMATY .
  class-data T_TC101T type YT_TC101T .
  class-data T_TC102T type YT_TC102T .
  class-data T_TC103 type YT_TC103 .
  class-data T_TC104 type YT_TC104 .
  class-data T_TC105 type YT_TC105 .
  class-data T_TC106 type YT_TC106 .
  class-data:
    T_TC107 type standard table of ZVCXI_XCS_TC107 with default key .
  class-data T_TC110 type YT_TC110 .
  class-data T_TC120 type YT_TC120 .
  class-data T_TC130 type YT_TC130 .
  class-data T_TC131 type YT_TC131 .
  class-data T_TC140 type YT_TC140 .
  class-data T_TC141 type YT_TC141 .
  class-data T_TC142 type YT_TC142 .
  class-data T_TC143 type YT_TC143 .
  class-data T_TC150 type YT_TC150 .
  class-data T_TC151 type YT_TC151 .
  class-data T_TC152 type YT_TC152 .
  class-data T_TC153 type YT_TC153 .
  class-data T_TC160 type YT_TC160 .
  class-data T_TC161 type YT_TC161 .
  class-data T_TC162 type YT_TC162 .
  class-data T_TC170 type YT_TC170 .
  class-data T_TC171 type YT_TC171 .
  class-data T_TC172 type YT_TC172 .
  class-data T_TC173 type YT_TC173 .
  class-data T_TC180 type YT_TC180 .
  class-data T_TC181 type YT_TC181 .
  class-data T_TC182 type YT_TC182 .
  class-data T_TC183 type YT_TC183 .
  class-data T_TC190 type YT_TC190 .
  class-data T_TC191 type YT_TC191 .
  class-data T_TC192 type YT_TC192 .
  class-data T_TD100 type YT_TD100 .
  class-data T_TD101 type YT_TD101 .
  class-data T_TD102 type YT_TD102 .

  methods ADJ_NUNIT_BY_WGT
    importing
      !IF_CONT_WGT type ZVCXI_XCSU_DIMVA
      !IF_CONT_WGT_UOM type UNIT
      !IF_UNIT_WGT type ZVCXI_XCSU_DIMVA
      !IF_UNIT_WGT_UOM type UNIT
    changing
      !CF_NLEN_1 type ATFLV
      !CF_NLEN_2 type ATFLV
      !CF_NWID_1 type ATFLV
      !CF_NWID_2 type ATFLV
      !CF_NLYR type ATFLV
      !CF_NTOT type ATFLV
    raising
      /VCXI/CX_CKX .
  methods CALC_NO_UNITS
    importing
      !IF_CONT_DIMVA type ZVCXI_XCSU_DIMVA
      !IF_UNIT_DIMVA type ZVCXI_XCSU_DIMVA
      !IF_UMARG type ZVCXI_XCSU_UMARG
    exporting
      !EF_NO_UNITS type ZVCXI_XCSU_DIMVA
      !EF_NOT_USED_DIMVA type ZVCXI_XCSU_DIMVA
    raising
      /VCXI/CX_CKX .
  methods CONSTRUCTOR
    importing
      !IF_OWNER type /VCXI/CKX_STRING
    raising
      /VCXI/CX_CKX .
  methods GET_CONT_LIMIT
    importing
      !IT_CONT_LIMIT type ZVCXI_XCSU_TT_LIMIT
      !IF_LEN_UOM type /VCXI/CKX_UOM
      !IF_WID_UOM type /VCXI/CKX_UOM
      !IF_WGT_UOM type /VCXI/CKX_UOM
      !IF_HGT_UOM type /VCXI/CKX_UOM
    exporting
      !ES_CONT_LEN type ZVCXI_XCSU_S_DIMVA
      !ES_CONT_WID type ZVCXI_XCSU_S_DIMVA
      !ES_CONT_HGT type ZVCXI_XCSU_S_DIMVA
      !ES_CONT_WGT type ZVCXI_XCSU_S_DIMVA
      !ES_CONT_LYR type ZVCXI_XCSU_S_DIMVA
    changing
      !CF_ERROR type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_PACKP_FOOTPRINT_ROLL
    importing
      !IF_PACKP type ZVCXI_XCSU_PACKP
      !IT_PREV_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IF_SHUTY type ZVCXI_XCSU_SHUTY optional
      !IF_SHUNT type ZVCXI_XCSU_SHUNT optional
    changing
      !CS_DIM_LEN type ZVCXI_XCSU_S_DIMVA
      !CS_DIM_WID type ZVCXI_XCSU_S_DIMVA
      !CS_DIM_HGT type ZVCXI_XCSU_S_DIMVA
    raising
      /VCXI/CX_CKX .
  methods GET_PACKP_FOOTPRINT_STACK
    importing
      !IF_PACKP type ZVCXI_XCSU_PACKP
      !IT_PREV_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IF_SHUTY type ZVCXI_XCSU_SHUTY optional
      !IF_SHUNT type ZVCXI_XCSU_SHUNT optional
    changing
      !CS_DIM_LEN type ZVCXI_XCSU_S_DIMVA
      !CS_DIM_WID type ZVCXI_XCSU_S_DIMVA
      !CS_DIM_HGT type ZVCXI_XCSU_S_DIMVA
    raising
      /VCXI/CX_CKX .
  methods GET_UNIT_DIMEN
    importing
      !IT_UNIT_DIMEN type ZVCXI_XCSU_TT_DIMEN
      !IF_LEN_UOM type /VCXI/CKX_UOM optional
      !IF_WID_UOM type /VCXI/CKX_UOM optional
      !IF_WGT_UOM type /VCXI/CKX_UOM optional
      !IF_HGT_UOM type /VCXI/CKX_UOM optional
    exporting
      !ES_UNIT_LEN type ZVCXI_XCSU_S_DIMVA
      !ES_UNIT_WID type ZVCXI_XCSU_S_DIMVA
      !ES_UNIT_HGT type ZVCXI_XCSU_S_DIMVA
      !ES_UNIT_WGT type ZVCXI_XCSU_S_DIMVA
    changing
      !CF_ERROR type ABAP_BOOL optional
    raising
      /VCXI/CX_CKX .
  methods RAISE_CONV_ERROR_CUB1D_DIMEN
    importing
      !IF_DIMEN type ZVCXI_XCSU_DIMEN
    raising
      /VCXI/CX_CKX .
  methods RAISE_CONV_ERROR_CUB1D_MARGIN
    raising
      /VCXI/CX_CKX .
  methods RAISE_CONV_ERROR_CUBED_DIMEN
    importing
      !IF_DIMEN type ZVCXI_XCSU_DIMEN
    raising
      /VCXI/CX_CKX .
  methods RAISE_CONV_ERROR_CUBED_MARGIN
    raising
      /VCXI/CX_CKX .
  methods RAISE_CONV_ERROR_ROLL_MARGIN
    raising
      /VCXI/CX_CKX .
  methods RAISE_CONV_ERROR_STACK_MARGIN
    raising
      /VCXI/CX_CKX .
  methods RAISE_CONV_ERROR_WIDTH
    raising
      /VCXI/CX_CKX .
  class-methods SWITCH_DIMVA
    changing
      !CS_DIMVA1 type ZVCXI_XCSU_S_DIMVA
      !CS_DIMVA2 type ZVCXI_XCSU_S_DIMVA
    raising
      /VCXI/CX_CKX .
private section.

  methods GET_MATNR_DESCR
    importing
      !IF_MATNR type MATNR
    returning
      value(RF_DESCR) type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  class-methods LOAD_CONSC .
  class-methods LOAD_DIMEN .
  class-methods LOAD_EFFCT .
  class-methods LOAD_LIMIT .
  class-methods LOAD_PACKP .
  class-methods LOAD_PMATY .
  class-methods LOAD_SHSCH .
  class-methods LOAD_SHUNT .
  class-methods LOAD_SHUTY .
endclass. "ZCL_VCXI_XCSU_CUST_SHIPU definition
class ZCL_VCXI_XCSU_CUST_SHIPU implementation.
method ADJ_NUNIT_BY_WGT.

  data: LF_CONT_WGT        type ZVCXI_XCSU_DIMVA,
        LF_NTOT_NEW        type ATFLV,
        LF_NTOT_TMP        type ATFLV,
        LF_NTOT_BY_WGT     type ATFLV,
        LF_NTOT_SECOND     type ATFLV,
        LF_NTOT_SECOND_NEW type ATFLV,
        LF_NTOT_SECOND_TMP type ATFLV.

*** ----------------------------------------------------------------------------------
*** Get Max Units by Weight
  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IF_UNIT_WGT_UOM
                                                     IF_UOM_IN    = IF_CONT_WGT_UOM
                                                     IF_VALUE_IN  = IF_CONT_WGT
                                           importing EF_VALUE_OUT = LF_CONT_WGT ).

  check IF_UNIT_WGT is not initial.
  LF_NTOT_BY_WGT = floor( LF_CONT_WGT / IF_UNIT_WGT ).

*** Do we exceed the Weight Limit
  check CF_NTOT gt LF_NTOT_BY_WGT.

*** ----------------------------------------------------------------------------------
*** Get First the Width
  if CF_NWID_1 lt LF_NTOT_BY_WGT.
    LF_NTOT_NEW = CF_NWID_1.
  else.
    CF_NTOT   = LF_NTOT_BY_WGT.
    CF_NLYR   = 1.
    CF_NWID_1 = LF_NTOT_BY_WGT.
    CF_NWID_2 = 0.
    CF_NLEN_1 = 1.
    CF_NLEN_2 = 0.
    exit.
  endif.

  check LF_NTOT_NEW is not initial.
*** ----------------------------------------------------------------------------------
*** Go Ahead with Layers
  LF_NTOT_TMP = LF_NTOT_NEW * CF_NLYR.

  if LF_NTOT_TMP lt LF_NTOT_BY_WGT.
    LF_NTOT_NEW = LF_NTOT_TMP.
  else.
    CF_NTOT   = LF_NTOT_BY_WGT.
    CF_NLYR   = ceil( LF_NTOT_BY_WGT / LF_NTOT_NEW ).
    "CF_NWID_1 no changes
    CF_NWID_2 = 0.
    CF_NLEN_1 = 1.
    CF_NLEN_2 = 0.
    exit.
  endif.

  check LF_NTOT_NEW is not initial.
*** ----------------------------------------------------------------------------------
*** Next is Length
  LF_NTOT_TMP = LF_NTOT_NEW * CF_NLEN_1.

  if LF_NTOT_TMP lt LF_NTOT_BY_WGT.
    LF_NTOT_NEW = LF_NTOT_TMP.
  else.
    CF_NTOT   = LF_NTOT_BY_WGT.
    "CF_NLYR   no changes
    "CF_NWID_1 no changes
    CF_NWID_2 = 0.
    CF_NLEN_1 = ceil( LF_NTOT_BY_WGT / LF_NTOT_NEW ).
    CF_NLEN_2 = 0.
    exit.
  endif.

  check CF_NLYR is not initial.
**** ----------------------------------------------------------------------------------
** Last ist the Second Length and Width
  LF_NTOT_SECOND     = LF_NTOT_BY_WGT - LF_NTOT_NEW.

*** Get The Second Width
  LF_NTOT_SECOND_TMP = CF_NWID_2 * CF_NLYR.
  if LF_NTOT_SECOND_TMP lt LF_NTOT_SECOND.
    LF_NTOT_SECOND_NEW = LF_NTOT_SECOND_TMP.
  else.
    CF_NTOT   = LF_NTOT_BY_WGT.
    "CF_NLYR   no changes
    "CF_NWID_1 no changes
    CF_NWID_2 = ceil( LF_NTOT_SECOND / CF_NLYR ).
    "CF_NLEN_1 no changes
    CF_NLEN_2 = 1.
    exit.
  endif.

  check LF_NTOT_SECOND_NEW is not initial.
*** Get The Second Length
  LF_NTOT_SECOND_TMP = LF_NTOT_SECOND_NEW * CF_NLEN_2.
  if LF_NTOT_SECOND_TMP lt LF_NTOT_SECOND.
    LF_NTOT_SECOND_NEW = CF_NWID_2.
  else.
    CF_NTOT   = LF_NTOT_BY_WGT.
    "CF_NLYR   no changes
    "CF_NWID_1 no changes
    "CF_NWID_2 no changes.
    "CF_NLEN_1 no changes
    CF_NLEN_2 = ceil( LF_NTOT_SECOND / LF_NTOT_SECOND_NEW ).
    exit.
  endif.

*** Nothing changed

endmethod.
method CALC_NO_UNITS.

  data: LF_NO_UNITS         type ATFLV,
        LF_UNIT_TOTAL_DIMVA type ZVCXI_XCSU_DIMVA.

*** Calculate Number of Units
  if IF_UNIT_DIMVA gt 0.
    LF_NO_UNITS = ( IF_CONT_DIMVA + IF_UMARG ) / ( IF_UNIT_DIMVA + IF_UMARG ).
    move LF_NO_UNITS to EF_NO_UNITS.
    EF_NO_UNITS = floor( EF_NO_UNITS ).
  endif.

*** Calcualte Not Used Dimension Value
  LF_UNIT_TOTAL_DIMVA = ( IF_UNIT_DIMVA + IF_UMARG ) * EF_NO_UNITS.
  EF_NOT_USED_DIMVA = IF_CONT_DIMVA - LF_UNIT_TOTAL_DIMVA.

endmethod.
method CLASS_CONSTRUCTOR.

***--------------------------------------------------------------------------------------
*** Get Packaging Plant Restrictions
  select *
         from ZVCXI_XCS_TC103
         into table T_TC103.

*** Get Foot Print Rotation
  select *
         from ZVCXI_XCS_TC106
         into table T_TC106.

***--------------------------------------------------------------------------------------
*** Get Unit Label Type
  select *
         from ZVCXI_XCS_TC101
         into table T_TC101.

*** Get Unit Label Type Description
  select *
         from ZVCXI_XCS_TC101T
         into table T_TC101T
        where LANGU = SY-LANGU.

*** Get Unit Label Position
  select *
         from ZVCXI_XCS_TC102
         into table T_TC102.

*** Get Unit Label Type Description
  select *
         from ZVCXI_XCS_TC102T
         into table T_TC102T
        where LANGU = SY-LANGU.


*** Get Unit Label Type - Plant Restrictions
  select *
         from ZVCXI_XCS_TC104
         into table T_TC104.

*** Get Unit Label Position - Plant Restrictions
  select *
         from ZVCXI_XCS_TC105
         into table T_TC105.

*** Get Sample Position
  select *
         from ZVCXI_XCS_TC107
         into table T_TC107.

***--------------------------------------------------------------------------------------
*** Load Dimension Customizing
  LOAD_DIMEN( ).

*** Load Limit Customizing
  LOAD_LIMIT( ).

*** Load Effect Customizing
  LOAD_EFFCT( ).

*** Load Packing Pattern Customizing
  LOAD_PACKP( ).

*** Load Consumption Scheme Customizing
  LOAD_CONSC( ).

*** Load Shipping Scheme Customizing
  LOAD_SHSCH( ).

*** Load Shipping Unit Type Customizing
  LOAD_SHUTY( ).

*** Load Shipping Unit Customizing
  LOAD_SHUNT( ).

*** Load Packaging Material Type Customizing
  LOAD_PMATY( ).

***--------------------------------------------------------------------------------------
*** Get Packing Material
  select *
         from ZVCXI_XCS_TD100
         into table T_TD100.

*** Get Packing Material - Packaging Material Types
  select *
         from ZVCXI_XCS_TD101
         into table T_TD101.

*** Get Packing Material - Effects
  select *
         from ZVCXI_XCS_TD102
         into table T_TD102.

endmethod.
method CONSTRUCTOR.

  field-symbols: <S_INSTANCE> type YS_INSTANCE.

*** Keep Owner
  move IF_OWNER to ME->F_OWNER.

***--------------------------------------------------------------------------------------
*** Add instance to static instance buffer
  append initial line to T_INSTANCE assigning <S_INSTANCE>.
  move ME->F_OWNER to <S_INSTANCE>-OWNER.
  move ME          to <S_INSTANCE>-R_INSTANCE.

endmethod.
method GET_ACT_PMATY_PALLET.

  data: LS_PMATY_PALLET type ZVCXI_XCSU_S_PMATY.
  data: LT_PMATY_SHUNT  type ZVCXI_XCSU_TT_PMATY.

  LT_PMATY_SHUNT = ME->GET_PMATY_FOR_SHUNT( IF_SHUNT = IF_SHUNT ).

  loop at ME->T_PMATY_PALLET into LS_PMATY_PALLET.
    read table LT_PMATY_SHUNT with key PMATY = LS_PMATY_PALLET-PMATY
                              transporting no fields.
    check SY-SUBRC = 0.
    RF_PMATY = LS_PMATY_PALLET-PMATY.
  endloop.

endmethod.
method GET_CONSC_FOR_PMATY.

  data:          LS_TC192  type ZVCXI_XCS_TC192,
                 LS_TC150  type YS_TC150,
                 LS_TC103  type ZVCXI_XCS_TC103.
  data:          LT_TC153  type YT_TC153.
  field-symbols: <S_CONSC> type ZVCXI_XCSU_S_CONSC.

*** Get al Consumption Schemes for Packaging Material Type
  loop at ME->T_TC192 into LS_TC192 where PMATY eq IF_PMATY.

    clear: LS_TC150.

    read table ME->T_TC150 into LS_TC150 with key CONSC = LS_TC192-CONSC.
    check SY-SUBRC = 0.
    append initial line to RT_CONSC assigning <S_CONSC>.
    <S_CONSC>-CONSC = LS_TC150-CONSC.
    <S_CONSC>-DESCR = LS_TC150-DESCR.

  endloop.

  check IF_WERKS is not initial.

*** Filter by Plant active?
  read table ME->T_TC103 into LS_TC103
                         with key WERKS = IF_WERKS
                                  FRCOS = ABAP_TRUE.

  if SY-SUBRC ne 0.
    read table ME->T_TC103 into LS_TC103
                           with key WERKS = SPACE
                                    FRCOS = ABAP_TRUE.
  endif.

  check SY-SUBRC eq 0.

*** Reduce not relevant restrictions
  move ME->T_TC153 to LT_TC153.
  delete LT_TC153 where WERKS ne LS_TC103-WERKS.

*** Reduce result by restrictions
  loop at RT_CONSC assigning <S_CONSC>.
    read table LT_TC153 with key CONSC = <S_CONSC>-CONSC
                        transporting no fields.
    check SY-SUBRC ne 0.
    delete RT_CONSC.
  endloop.


endmethod.
  method GET_CONT_LIMIT.

*** Length
    if LINE_EXISTS( IT_CONT_LIMIT[ LIMIT = C_LIMIT_MAX
                                   DIMEN = C_DIMEN_LENGTH ] ).
      ES_CONT_LEN = ME->GET_DIMVA_LIMIT( IT_LIMIT = IT_CONT_LIMIT
                                         IF_LIMIT = C_LIMIT_MAX
                                         IF_DIMEN = C_DIMEN_LENGTH
                                         IF_UOM   = IF_LEN_UOM ).
    else.
      CF_ERROR = ABAP_TRUE.
    endif.

*** Width
    if LINE_EXISTS( IT_CONT_LIMIT[ LIMIT = C_LIMIT_MAX
                                   DIMEN = C_DIMEN_WIDTH ] ).
      ES_CONT_WID = ME->GET_DIMVA_LIMIT( IT_LIMIT = IT_CONT_LIMIT
                                         IF_LIMIT = C_LIMIT_MAX
                                         IF_DIMEN = C_DIMEN_WIDTH
                                         IF_UOM   = IF_WID_UOM ).
    else.
      CF_ERROR = ABAP_TRUE.
    endif.

*** Height
    if LINE_EXISTS( IT_CONT_LIMIT[ LIMIT = C_LIMIT_MAX
                                   DIMEN = C_DIMEN_HEIGHT ] ).
      ES_CONT_HGT = ME->GET_DIMVA_LIMIT( IT_LIMIT = IT_CONT_LIMIT
                                         IF_LIMIT = C_LIMIT_MAX
                                         IF_DIMEN = C_DIMEN_HEIGHT
                                         IF_UOM   = IF_HGT_UOM ).
    else.
      CF_ERROR = ABAP_TRUE.
    endif.

*** Weight
    if LINE_EXISTS( IT_CONT_LIMIT[ LIMIT = C_LIMIT_MAX
                                   DIMEN = C_DIMEN_WEIGHT ] ).
      ES_CONT_WGT = ME->GET_DIMVA_LIMIT( IT_LIMIT = IT_CONT_LIMIT
                                         IF_LIMIT = C_LIMIT_MAX
                                         IF_DIMEN = C_DIMEN_WEIGHT
                                         IF_UOM   = IF_WGT_UOM ).
    else.
      CF_ERROR = ABAP_TRUE.
    endif.

*** Layer
    if LINE_EXISTS( IT_CONT_LIMIT[ LIMIT = C_LIMIT_MAX
                                   DIMEN = C_DIMEN_LAYERS ] ).
      ES_CONT_LYR = ME->GET_DIMVA_LIMIT( IT_LIMIT = IT_CONT_LIMIT
                                         IF_LIMIT = C_LIMIT_MAX
                                         IF_DIMEN = C_DIMEN_LAYERS ).
    else.
      ES_CONT_LYR-DIMVA      = 1.
      ES_CONT_LYR-DIMVA_UOM  = 'EA'.
    endif.

  endmethod.
method GET_CPACK_FOR_SHSCH.

  data:  LS_CPACK        type          ZVCXI_XCSU_S_CPACK,
         LS_SHSCH_SHUTY  type          ZVCXI_XCS_TC162,
         LS_CPACK_WERKS  type          ZVCXI_XCSUC_S_CPACK_WERKS,
         LS_DESCR        type          ZVCXI_XCSUC_S_CPACK_DESCR.
  data:  LT_SHSCH_SHUTY  type          ZVCXI_XCSU_TT_SHSCH_SHUTY,
         LT_SHUNT_TMP    type          ZVCXI_XCSU_TT_SHUNT,
         LT_SHUNT        type          ZVCXI_XCSU_TT_SHUNT.

  LT_SHSCH_SHUTY = ME->GET_SHUTY_SET_FOR_SHSCH( IF_SHSCH = IF_SHSCH ).
  loop at LT_SHSCH_SHUTY into LS_SHSCH_SHUTY.
    LT_SHUNT_TMP = ME->GET_SHUNT_FOR_SHUTY( IF_SHUTY = LS_SHSCH_SHUTY-SHUTY ).
    append lines of LT_SHUNT_TMP to LT_SHUNT.
  endloop.
  delete adjacent duplicates from LT_SHUNT.

  loop at ZCL_VCXI_XCSUC_CPACK=>T_CPACK_WERKS into LS_CPACK_WERKS
                                             where WERKS eq IF_WERKS
                                              or   WERKS is initial.

*** Check Shipping Unit Type and Shipping unit if we have it
    read table LT_SHSCH_SHUTY with key SHUTY = LS_CPACK_WERKS-SHUTY transporting no fields.
    check SY-SUBRC = 0.

    read table LT_SHUNT with key SHUNT = LS_CPACK_WERKS-SHUNT transporting no fields.
    check SY-SUBRC = 0.

*** Go Ahead
    clear: LS_CPACK, LS_DESCR.
    move LS_CPACK_WERKS-CPACK to LS_CPACK-CPACK.


    read table ZCL_VCXI_XCSUC_CPACK=>T_CPACK_DESCR into LS_DESCR
                                                   with key CPACK = LS_CPACK-CPACK
                                                            LANGU = SY-LANGU.
    if SY-SUBRC = 0.
      move LS_DESCR-DESCR to LS_CPACK-DESCR.
    endif.

    collect LS_CPACK into RT_CPACK.

  endloop.

endmethod.
  method GET_CUB1D_CONTAINER.

    data: LF_ERROR   type ABAP_BOOL,
          LF_NLEN1   type ZVCXI_XCSU_DIMVA,
          LF_NWID1   type ZVCXI_XCSU_DIMVA,
          LF_NLEN2   type ZVCXI_XCSU_DIMVA,
          LF_NWID2   type ZVCXI_XCSU_DIMVA,
          LF_NTOT1   type ATFLV,
          LF_NTOT2   type ATFLV,
          LF_NLEN    type ATFLV,
          LF_NWID    type ATFLV,
          LF_NTOT    type ATFLV,
          LF_NLYR    type ATFLV,
          LF_RES1    type ATFLV,
          LF_RES2    type ATFLV,
          LF_DWID    type ATFLV,
          LF_DLEN    type ATFLV,
          LF_LEN_UOM type UNIT,
          LF_WID_UOM type UNIT,
          LF_HGT_UOM type UNIT,
          LF_WGT_UOM type UNIT.
    data: LS_UMARG    type ZVCXI_XCSU_S_UMARG.
    field-symbols: <S_DIMEN> type ZVCXI_XCSU_S_DIMEN.

**********************************************************************
*** Intialize units
    loop at IT_CONT_DIMEN assigning <S_DIMEN>.
      case <S_DIMEN>-DIMEN.
        when 'LENGTH'.
          move <S_DIMEN>-DIMVA_UOM to LF_LEN_UOM.
        when 'WIDTH'.
          move <S_DIMEN>-DIMVA_UOM to LF_WID_UOM.
        when 'HEIGHT'.
          move <S_DIMEN>-DIMVA_UOM to LF_HGT_UOM.
        when 'WEIGHT'.
          move <S_DIMEN>-DIMVA_UOM to LF_WGT_UOM.
      endcase.
    endloop.
*** if any units are intial, error
    if LF_LEN_UOM is initial or
       LF_WID_UOM is initial or
       LF_HGT_UOM is initial or
       LF_WGT_UOM is initial.
      LF_ERROR = ABAP_TRUE.
    endif.

**********************************************************************
*** Load Unit dimensions
    ME->GET_UNIT_DIMEN( exporting IT_UNIT_DIMEN = IT_UNIT_DIMEN
                                  IF_LEN_UOM    = LF_LEN_UOM
                                  IF_WID_UOM    = LF_WID_UOM
                                  IF_WGT_UOM    = LF_WGT_UOM
                                  IF_HGT_UOM    = LF_HGT_UOM
                        importing ES_UNIT_LEN   = data(LS_UNIT_LEN)
                                  ES_UNIT_WID   = data(LS_UNIT_WID)
                                  ES_UNIT_HGT   = data(LS_UNIT_HGT)
                                  ES_UNIT_WGT   = data(LS_UNIT_WGT)
                        changing  CF_ERROR      = LF_ERROR ).

*** Load Container Dimensions/Limits
    ME->GET_CONT_LIMIT( exporting IT_CONT_LIMIT = IT_CONT_LIMIT
                                  IF_LEN_UOM    = LF_LEN_UOM
                                  IF_WID_UOM    = LF_WID_UOM
                                  IF_WGT_UOM    = LF_WGT_UOM
                                  IF_HGT_UOM    = LF_HGT_UOM
                        importing ES_CONT_LEN   = data(LS_CONT_LEN)
                                  ES_CONT_WID   = data(LS_CONT_WID)
                                  ES_CONT_HGT   = data(LS_CONT_HGT)
                                  ES_CONT_WGT   = data(LS_CONT_WGT)
                                  ES_CONT_LYR   = data(LS_CONT_LYR)
                        changing  CF_ERROR      = LF_ERROR ).

**********************************************************************
*** Determine Unit Margin
*** Do Unit Conversion
    try.
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LF_LEN_UOM
                                                           IF_UOM_IN    = ME->S_UMARG-UMARG_UOM
                                                           IF_VALUE_IN  = ME->S_UMARG-UMARG
                                                 importing EF_VALUE_OUT = LS_UMARG-UMARG
                                                           EF_UOM_OUT   = LS_UMARG-UMARG_UOM ).
      catch /VCXI/CX_CKX.
        ME->RAISE_CONV_ERROR_CUB1D_MARGIN( ).
    endtry.

**********************************************************************
*** Start CUBE CONTAINER logic

*** Determine the number of layers possible.
    if LS_UNIT_HGT-DIMVA gt 0.
      LF_NLYR = LS_CONT_HGT-DIMVA / LS_UNIT_HGT-DIMVA.
      LF_NLYR = FLOOR( LF_NLYR ).
      if LF_NLYR gt LS_CONT_LYR-DIMVA.
        LF_NLYR = LS_CONT_LYR-DIMVA.
      endif.
    else.
      LF_ERROR = ABAP_TRUE.
    endif.

*** --------------------------------------------------------------------
*** first try width along width and length along length
    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA = LS_CONT_WID-DIMVA
                                 IF_UNIT_DIMVA = LS_UNIT_WID-DIMVA
                                 IF_UMARG      = LS_UMARG-UMARG
                       importing EF_NO_UNITS   = LF_NWID1 ).


    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA = LS_CONT_LEN-DIMVA
                                 IF_UNIT_DIMVA = LS_UNIT_LEN-DIMVA
                                 IF_UMARG      = LS_UMARG-UMARG
                       importing EF_NO_UNITS   = LF_NLEN1 ).

    LF_NTOT1 = LF_NLEN1 * LF_NWID1.

*** --------------------------------------------------------------------
*** second try width along lenght and length along width
    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA = LS_CONT_WID-DIMVA
                                 IF_UNIT_DIMVA = LS_UNIT_LEN-DIMVA
                                 IF_UMARG      = LS_UMARG-UMARG
                       importing EF_NO_UNITS   = LF_NWID2 ).


    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA = LS_CONT_LEN-DIMVA
                                 IF_UNIT_DIMVA = LS_UNIT_WID-DIMVA
                                 IF_UMARG      = LS_UMARG-UMARG
                       importing EF_NO_UNITS   = LF_NLEN2 ).

    LF_NTOT2 = LF_NLEN2 * LF_NWID2.

*** --------------------------------------------------------------------
*** Determine Max units including layer value.
    if LF_NTOT2 gt LF_NTOT1.
      LF_NTOT = LF_NTOT2 * LF_NLYR.
      move LF_NLEN2 to LF_NLEN.
      move LF_NWID2 to LF_NWID.
      move LS_UNIT_WID-DIMVA to LF_DLEN.
      move LS_UNIT_LEN-DIMVA to LF_DWID.
    else.
      LF_NTOT =  LF_NTOT1 * LF_NLYR.
      move LF_NLEN1 to LF_NLEN.
      move LF_NWID1 to LF_NWID.
      move LS_UNIT_WID-DIMVA to LF_DWID.
      move LS_UNIT_LEN-DIMVA to LF_DLEN.
    endif.

*** --------------------------------------------------------------------
*** Determine Max units based on weight restrictions and adjust values if needed.
    if LS_UNIT_WGT-DIMVA gt 0.
      LF_RES1 = LS_CONT_WGT-DIMVA / LS_UNIT_WGT-DIMVA.
      LF_RES1 = FLOOR( LF_RES1 ).

      if LF_RES1 lt LF_NTOT.
***   reduece number total
        LF_RES1 = LF_NTOT - LF_RES1.
        LF_NTOT = LF_NTOT - LF_RES1.

***   Determine how much number lenght must be reduced
        LF_RES2 = LF_NWID * LF_NLYR.

        if LF_RES2 gt 0.
          LF_RES1 = LF_RES1 / LF_RES2.
          LF_RES1 = FLOOR( LF_RES1 ).
        else.
          clear LF_RES1.
          LF_ERROR = ABAP_TRUE.
        endif.
        LF_NLEN = LF_NLEN - LF_RES1.
      endif.
    else.
      LF_ERROR = ABAP_TRUE.
    endif.

*** --------------------------------------------------------------------
*** Return Dimensions
    move IT_CONT_DIMEN to ET_CONT_DIMEN.

    if LF_ERROR ne ABAP_TRUE.
      loop at ET_CONT_DIMEN assigning <S_DIMEN>.
        case <S_DIMEN>-DIMEN.
          when C_DIMEN_LENGTH.
            <S_DIMEN>-DIMVA      = ( LF_NLEN * LF_DLEN ) + ( ( LF_NLEN - 1 ) * LS_UMARG-UMARG ).
            <S_DIMEN>-DIMVA_UOM  = LS_CONT_LEN-DIMVA_UOM.

          when C_DIMEN_WIDTH.
            <S_DIMEN>-DIMVA      = ( LF_NWID * LF_DWID ) + ( ( LF_NWID - 1 ) * LS_UMARG-UMARG ).
            <S_DIMEN>-DIMVA_UOM  = LS_CONT_WID-DIMVA_UOM.

          when C_DIMEN_HEIGHT.
            <S_DIMEN>-DIMVA      = LF_NLYR * LS_UNIT_HGT-DIMVA.
            <S_DIMEN>-DIMVA_UOM  = LS_CONT_HGT-DIMVA_UOM.

          when C_DIMEN_WEIGHT.
            <S_DIMEN>-DIMVA      = LF_NTOT * LS_UNIT_WGT-DIMVA.
            <S_DIMEN>-DIMVA_UOM  = LS_CONT_WGT-DIMVA_UOM.

          when C_DIMEN_LAYERS.
            <S_DIMEN>-DIMVA      = LF_NLYR.

          when others.
            <S_DIMEN>-DIMVA      = 0.

        endcase.
      endloop.

      move LF_NTOT to EF_NUNIT.
    else.
      loop at ET_CONT_DIMEN assigning <S_DIMEN>.
        <S_DIMEN>-DIMVA = 0.
      endloop.
      move 0 to EF_NUNIT.
    endif.

  endmethod.
  method GET_CUBED_CONTAINER.

    data: LF_ERROR         type ABAP_BOOL,
          LF_NLEN1_1       type ZVCXI_XCSU_DIMVA,
          LF_NWID1_1       type ZVCXI_XCSU_DIMVA,
          LF_NLEN2_1       type ZVCXI_XCSU_DIMVA,
          LF_NWID2_1       type ZVCXI_XCSU_DIMVA,
          LF_NLEN1_2       type ZVCXI_XCSU_DIMVA,
          LF_NWID1_2       type ZVCXI_XCSU_DIMVA,
          LF_NLEN2_2       type ZVCXI_XCSU_DIMVA,
          LF_NWID2_2       type ZVCXI_XCSU_DIMVA,
          LF_NOT_USED_LEN1 type ZVCXI_XCSU_DIMVA,
          LF_NOT_USED_WID1 type ZVCXI_XCSU_DIMVA,
          LF_NOT_USED_LEN2 type ZVCXI_XCSU_DIMVA,
          LF_NOT_USED_WID2 type ZVCXI_XCSU_DIMVA,
          LF_NTOT1_1       type ZVCXI_XCSU_DIMVA,
          LF_NTOT1_2       type ATFLV,
          LF_NTOT1         type ATFLV,
          LF_NTOT2_1       type ATFLV,
          LF_NTOT2_2       type ATFLV,
          LF_NTOT2         type ATFLV,
          LF_NLEN_1        type ATFLV,
          LF_NWID_1        type ATFLV,
          LF_NLEN_2        type ATFLV,
          LF_NWID_2        type ATFLV,
          LF_NLEN_2_TMP    type ATFLV,
          LF_NWID_2_TMP    type ATFLV,
          LF_NTOT          type ATFLV,
          LF_NLYR          type ATFLV,
          LF_DWID          type ATFLV,
          LF_DLEN          type ATFLV,
          LF_TMP_1         type ATFLV,
          LF_LEN_UOM       type UNIT,
          LF_WID_UOM       type UNIT,
          LF_HGT_UOM       type UNIT,
          LF_WGT_UOM       type UNIT.
    data: LS_UMARG type ZVCXI_XCSU_S_UMARG.
    data: LR_CX    type ref to CX_SY_CONVERSION_OVERFLOW.
    field-symbols: <S_DIMEN> type ZVCXI_XCSU_S_DIMEN.

**********************************************************************
*** intialize units
    loop at IT_CONT_DIMEN assigning <S_DIMEN>.
      case <S_DIMEN>-DIMEN.
        when 'LENGTH'.
          move <S_DIMEN>-DIMVA_UOM to LF_LEN_UOM.
        when 'WIDTH'.
          move <S_DIMEN>-DIMVA_UOM to LF_WID_UOM.
        when 'HEIGHT'.
          move <S_DIMEN>-DIMVA_UOM to LF_HGT_UOM.
        when 'WEIGHT'.
          move <S_DIMEN>-DIMVA_UOM to LF_WGT_UOM.
      endcase.
    endloop.
*** if any units are intial, error
    if LF_LEN_UOM is initial or
       LF_WID_UOM is initial or
       LF_HGT_UOM is initial or
       LF_WGT_UOM is initial.
      LF_ERROR = ABAP_TRUE.
    endif.

**********************************************************************
*** Load Unit dimensions
    ME->GET_UNIT_DIMEN( exporting IT_UNIT_DIMEN = IT_UNIT_DIMEN
                                  IF_LEN_UOM    = LF_LEN_UOM
                                  IF_WID_UOM    = LF_WID_UOM
                                  IF_WGT_UOM    = LF_WGT_UOM
                                  IF_HGT_UOM    = LF_HGT_UOM
                        importing ES_UNIT_LEN   = data(LS_UNIT_LEN)
                                  ES_UNIT_WID   = data(LS_UNIT_WID)
                                  ES_UNIT_HGT   = data(LS_UNIT_HGT)
                                  ES_UNIT_WGT   = data(LS_UNIT_WGT)
                        changing  CF_ERROR      = LF_ERROR ).

*** Load Container Dimensions/Limits
    ME->GET_CONT_LIMIT( exporting IT_CONT_LIMIT = IT_CONT_LIMIT
                                  IF_LEN_UOM    = LF_LEN_UOM
                                  IF_WID_UOM    = LF_WID_UOM
                                  IF_WGT_UOM    = LF_WGT_UOM
                                  IF_HGT_UOM    = LF_HGT_UOM
                        importing ES_CONT_LEN   = data(LS_CONT_LEN)
                                  ES_CONT_WID   = data(LS_CONT_WID)
                                  ES_CONT_HGT   = data(LS_CONT_HGT)
                                  ES_CONT_WGT   = data(LS_CONT_WGT)
                                  ES_CONT_LYR   = data(LS_CONT_LYR)
                        changing  CF_ERROR      = LF_ERROR ).

*** make sure length is longer than width if not equal
    if LS_UNIT_LEN-DIMVA_UOM eq LS_UNIT_WID-DIMVA_UOM and
       LS_UNIT_LEN-DIMVA     lt LS_UNIT_WID-DIMVA.
      LF_TMP_1 = LS_UNIT_LEN-DIMVA.
      LS_UNIT_LEN-DIMVA = LS_UNIT_WID-DIMVA.
      LS_UNIT_WID-DIMVA = LF_TMP_1.
    endif.

**********************************************************************
*** Determine Unit Margin
*** Do Unit Conversion
    try.
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LF_LEN_UOM
                                                           IF_UOM_IN    = ME->S_UMARG-UMARG_UOM
                                                           IF_VALUE_IN  = ME->S_UMARG-UMARG
                                                 importing EF_VALUE_OUT = LS_UMARG-UMARG
                                                           EF_UOM_OUT   = LS_UMARG-UMARG_UOM ).
      catch /VCXI/CX_CKX.
        ME->RAISE_CONV_ERROR_CUBED_MARGIN( ).
    endtry.

**********************************************************************
*** Start CUBE CONTAINER logic

*** Determine the number of layers possible.
    if LS_UNIT_HGT-DIMVA gt 0.
      LF_NLYR = LS_CONT_HGT-DIMVA / LS_UNIT_HGT-DIMVA.
      LF_NLYR = FLOOR( LF_NLYR ).
      if LF_NLYR gt LS_CONT_LYR-DIMVA.
        LF_NLYR = LS_CONT_LYR-DIMVA.
      endif.
    else.
      LF_ERROR = ABAP_TRUE.
    endif.

*** -----------------------------------------------------------------
*** first try width along width and length along length
    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA     = LS_CONT_WID-DIMVA
                                 IF_UNIT_DIMVA     = LS_UNIT_WID-DIMVA
                                 IF_UMARG          = LS_UMARG-UMARG
                       importing EF_NO_UNITS       = LF_NWID1_1
                                 EF_NOT_USED_DIMVA = LF_NOT_USED_WID1 ).


    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA     = LS_CONT_LEN-DIMVA
                                 IF_UNIT_DIMVA     = LS_UNIT_LEN-DIMVA
                                 IF_UMARG          = LS_UMARG-UMARG
                       importing EF_NO_UNITS       = LF_NLEN1_1
                                 EF_NOT_USED_DIMVA = LF_NOT_USED_LEN1 ).

    LF_NTOT1_1 = LF_NLEN1_1 * LF_NWID1_1.

*** then go ahead and try to fill the not used space
*** unit length on container width and unit width on contianer length not used
    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA     = LS_CONT_WID-DIMVA
                                 IF_UNIT_DIMVA     = LS_UNIT_LEN-DIMVA
                                 IF_UMARG          = LS_UMARG-UMARG
                       importing EF_NO_UNITS       = LF_NWID1_2 ).


    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA     = LF_NOT_USED_LEN1
                                 IF_UNIT_DIMVA     = LS_UNIT_WID-DIMVA
                                 IF_UMARG          = LS_UMARG-UMARG
                       importing EF_NO_UNITS       = LF_NLEN1_2 ).

    LF_NTOT1_2 = LF_NLEN1_2 * LF_NWID1_2.
    LF_NTOT1 = LF_NTOT1_1 + LF_NTOT1_2.

*** -----------------------------------------------------------------
*** second try width along lenght and length along width
    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA     = LS_CONT_WID-DIMVA
                                 IF_UNIT_DIMVA     = LS_UNIT_LEN-DIMVA
                                 IF_UMARG          = LS_UMARG-UMARG
                       importing EF_NO_UNITS       = LF_NWID2_1
                                 EF_NOT_USED_DIMVA = LF_NOT_USED_WID2 ).

    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA     = LS_CONT_LEN-DIMVA
                                 IF_UNIT_DIMVA     = LS_UNIT_WID-DIMVA
                                 IF_UMARG          = LS_UMARG-UMARG
                       importing EF_NO_UNITS       = LF_NLEN2_1
                                 EF_NOT_USED_DIMVA = LF_NOT_USED_LEN2 ).

    LF_NTOT2_1 = LF_NLEN2_1 * LF_NWID2_1.

*** then go ahead and try to fill the not used space
*** unit width on the container width not used and unit length on the container length
    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA     = LF_NOT_USED_WID2
                                 IF_UNIT_DIMVA     = LS_UNIT_WID-DIMVA
                                 IF_UMARG          = LS_UMARG-UMARG
                       importing EF_NO_UNITS       = LF_NWID2_2 ).


    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA     = LS_CONT_LEN-DIMVA
                                 IF_UNIT_DIMVA     = LS_UNIT_LEN-DIMVA
                                 IF_UMARG          = LS_UMARG-UMARG
                       importing EF_NO_UNITS       = LF_NLEN2_2 ).

    LF_NTOT2_2 = LF_NLEN2_2 * LF_NWID2_2.
    LF_NTOT2 = LF_NTOT2_1 + LF_NTOT2_2.

*** -----------------------------------------------------------------
*** Determine Max units including layer value.
    if LF_NTOT2 gt LF_NTOT1.
      LF_NTOT = LF_NTOT2 * LF_NLYR.
      move LF_NLEN2_1 to LF_NLEN_1.
      move LF_NWID2_1 to LF_NWID_1.
      move LF_NWID2_2 to LF_NWID_2.

      move LF_NLEN2_2 to LF_NLEN_2_TMP.
      move LF_NWID2_2 to LF_NWID_2_TMP.

      move LS_UNIT_WID-DIMVA to LF_DLEN.
      move LS_UNIT_LEN-DIMVA to LF_DWID.
    else.
      LF_NTOT =  LF_NTOT1 * LF_NLYR.
      move LF_NLEN1_1 to LF_NLEN_1.
      move LF_NWID1_1 to LF_NWID_1.
      move LF_NLEN1_2 to LF_NLEN_2.

      move LF_NLEN1_2 to LF_NLEN_2_TMP.
      move LF_NWID1_2 to LF_NWID_2_TMP.

      move LS_UNIT_WID-DIMVA to LF_DWID.
      move LS_UNIT_LEN-DIMVA to LF_DLEN.
    endif.

*** --------------------------------------------------------------------
*** Adjust Number of Units by Weight (if Max is reached)
    ME->ADJ_NUNIT_BY_WGT( exporting IF_CONT_WGT     = LS_CONT_WGT-DIMVA
                                    IF_CONT_WGT_UOM = LS_CONT_WGT-DIMVA_UOM
                                    IF_UNIT_WGT     = LS_UNIT_WGT-DIMVA
                                    IF_UNIT_WGT_UOM = LS_UNIT_WGT-DIMVA_UOM
                          changing  CF_NLEN_1       = LF_NLEN_1
                                    CF_NLEN_2       = LF_NLEN_2_TMP
                                    CF_NWID_1       = LF_NWID_1
                                    CF_NWID_2       = LF_NWID_2_TMP
                                    CF_NLYR         = LF_NLYR
                                    CF_NTOT         = LF_NTOT ).

    if LF_NLEN_2 is not initial.
      move LF_NLEN_2_TMP to LF_NLEN_2.
    elseif LF_NWID_2 is not initial.
      move LF_NWID_2_TMP to LF_NWID_2.
    endif.

*** --------------------------------------------------------------------
*** Return Dimensions
    move IT_CONT_DIMEN to ET_CONT_DIMEN.

    if LF_ERROR ne ABAP_TRUE.
      try.
          loop at ET_CONT_DIMEN assigning <S_DIMEN>.
            case <S_DIMEN>-DIMEN.
              when C_DIMEN_LENGTH.
***             If we have two different directions -> margin between is needed.
                <S_DIMEN>-DIMVA      = ( LF_NLEN_2 * LF_DWID ) + ( ( LF_NLEN_2 - 1 ) * LS_UMARG-UMARG ).
                if <S_DIMEN>-DIMVA is not initial.
                  <S_DIMEN>-DIMVA      = <S_DIMEN>-DIMVA + LS_UMARG-UMARG.
                endif.
                <S_DIMEN>-DIMVA      = <S_DIMEN>-DIMVA + ( ( LF_NLEN_1 * LF_DLEN ) + ( ( LF_NLEN_1 - 1 ) * LS_UMARG-UMARG ) ).
                <S_DIMEN>-DIMVA_UOM  = LS_CONT_LEN-DIMVA_UOM.

              when C_DIMEN_WIDTH.
                <S_DIMEN>-DIMVA      = ( LF_NWID_2 * LF_DLEN ) + ( ( LF_NWID_2 - 1 ) * LS_UMARG-UMARG ).
***             If we have two different directions -> margin between is needed.
                if <S_DIMEN>-DIMVA is not initial.
                  <S_DIMEN>-DIMVA      = <S_DIMEN>-DIMVA + LS_UMARG-UMARG.
                endif.
                <S_DIMEN>-DIMVA      = <S_DIMEN>-DIMVA + ( LF_NWID_1 * LF_DWID ) + ( ( LF_NWID_1 - 1 ) * LS_UMARG-UMARG ).
                <S_DIMEN>-DIMVA_UOM  = LS_CONT_WID-DIMVA_UOM.

              when C_DIMEN_HEIGHT.
                <S_DIMEN>-DIMVA      = LF_NLYR * LS_UNIT_HGT-DIMVA.
                <S_DIMEN>-DIMVA_UOM  = LS_CONT_HGT-DIMVA_UOM.

              when C_DIMEN_WEIGHT.
                <S_DIMEN>-DIMVA      = LF_NTOT * LS_UNIT_WGT-DIMVA.
                <S_DIMEN>-DIMVA_UOM  = LS_CONT_WGT-DIMVA_UOM.

              when C_DIMEN_LAYERS.
                <S_DIMEN>-DIMVA      = LF_NLYR.

              when others.
                <S_DIMEN>-DIMVA      = 0.

            endcase.

          endloop.
          move LF_NTOT to EF_NUNIT.

        catch CX_SY_CONVERSION_OVERFLOW into LR_CX.
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( IR_PREVIOUS = LR_CX ).
      endtry.

    else.
      loop at ET_CONT_DIMEN assigning <S_DIMEN>.
        <S_DIMEN>-DIMVA = 0.
      endloop.
      move 0 to EF_NUNIT.
    endif.

  endmethod.
method GET_DESCR_FOR_CONSC.

  data: LS_TC150 type YS_TC150.

  read table ME->T_TC150 into LS_TC150 with key CONSC = IF_CONSC.
  if SY-SUBRC eq 0.
    RF_DESCR = LS_TC150-DESCR.
  endif.

endmethod.
method GET_DESCR_FOR_DIMEN.

  data: LS_TC110 type YS_TC110.

  read table T_TC110 into LS_TC110 with key DIMEN = IF_DIMEN.
  if SY-SUBRC eq 0.
    RF_DESCR = LS_TC110-DESCR.
  endif.

endmethod.
method GET_DESCR_FOR_EFFCT.

  data: LS_TC130 type YS_TC130.

  read table T_TC130 into LS_TC130 with key EFFCT = IF_EFFCT.
  if SY-SUBRC eq 0.
    RF_DESCR = LS_TC130-DESCR.
  endif.

endmethod.
method GET_DESCR_FOR_LIMIT.

  data: LS_TC120 type YS_TC120.

  read table T_TC120 into LS_TC120 with key LIMIT = IF_LIMIT.
  if SY-SUBRC eq 0.
    RF_DESCR = LS_TC120-DESCR.
  endif.

endmethod.
method GET_DESCR_FOR_PACKP.

  data: LS_TC140 type YS_TC140.

  read table ME->T_TC140 into LS_TC140 with key PACKP = IF_PACKP.
  if SY-SUBRC eq 0.
    RF_DESCR = LS_TC140-DESCR.
  endif.

endmethod.
method GET_DESCR_FOR_PMATY.

  data: LS_TC190 type YS_TC190.

  read table ME->T_TC190 into LS_TC190 with key PMATY = IF_PMATY.
  if SY-SUBRC eq 0.
    RF_DESCR = LS_TC190-DESCR.
  endif.

endmethod.
method GET_DESCR_FOR_SHSCH.

  data: LS_TC160 type YS_TC160.

  read table ME->T_TC160 into LS_TC160 with key SHSCH = IF_SHSCH.
  if SY-SUBRC eq 0.
    RF_DESCR = LS_TC160-DESCR.
  endif.

endmethod.
method GET_DESCR_FOR_SHUNT.

  data: LS_TC180 type YS_TC180.

  read table T_TC180 into LS_TC180 with key SHUNT = IF_SHUNT.
  if SY-SUBRC eq 0.
    RF_DESCR = LS_TC180-DESCR.
  endif.

endmethod.
method GET_DESCR_FOR_SHUTY.

  data: LS_TC170 type YS_TC170.

  read table ME->T_TC170 into LS_TC170 with key SHUTY = IF_SHUTY.
  if SY-SUBRC eq 0.
    RF_DESCR = LS_TC170-DESCR.
  endif.

endmethod.
  method GET_DIMEN_FOR_SHUTY.

    move ME->T_TC171 to RT_SHUTY_DIMEN.

    delete RT_SHUTY_DIMEN where SHUTY ne IF_SHUTY.
    sort RT_SHUTY_DIMEN by SEQUE.

    if ET_DIMEN is requested.
      loop at RT_SHUTY_DIMEN into data(LS_SHUTY_DIMEN).
        case IF_SYSOM.
          when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
            append corresponding #( LS_SHUTY_DIMEN mapping DIMVA_UOM = UOMME ) to ET_DIMEN.
          when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
            append corresponding #( LS_SHUTY_DIMEN mapping DIMVA_UOM = UOMIM ) to ET_DIMEN.
        endcase.
      endloop.
    endif.

  endmethod.
  method GET_DIMVA_DIMEN.

    clear EF_UNKNOWN.

    if not LINE_EXISTS( IT_DIMEN[ DIMEN = IF_DIMEN ] ).
      EF_UNKNOWN = ABAP_TRUE.
    else.
***   Get Dimension
      RS_DIMVA = IT_DIMEN[ DIMEN = IF_DIMEN ]-S_DIMVA.

***   Convert Unit
      if IF_UOM is supplied.
        try.
            ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = RS_DIMVA-DIMVA
                                                               IF_UOM_IN    = RS_DIMVA-DIMVA_UOM
                                                               IF_UOM_OUT   = IF_UOM
                                                     importing EF_VALUE_OUT = RS_DIMVA-DIMVA
                                                               EF_UOM_OUT   = RS_DIMVA-DIMVA_UOM ).

          catch /VCXI/CX_CKX.
***         Conversion Error for Dimension &1 from &2 to &3.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_XCSU'
                                                  IF_MSGNO = '083'
                                                  IF_MSGV1 = IF_DIMEN
                                                  IF_MSGV2 = RS_DIMVA-DIMVA_UOM
                                                  IF_MSGV3 = IF_UOM ).
        endtry.
      endif.
    endif.

  endmethod.
  method GET_DIMVA_EFFCT.

    check LINE_EXISTS( IT_PACKMAT_EFFCT[ PMATY = IF_PMATY
                                         EFFCT = IF_EFFCT
                                         DIMEN = IF_DIMEN ] ).

*** Get Limit
    RS_DIMVA = IT_PACKMAT_EFFCT[ PMATY = IF_PMATY
                                 EFFCT = IF_EFFCT
                                 DIMEN = IF_DIMEN ]-S_DIMVA.

*** Convert Unit
    if IF_UOM is supplied.
      try.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = RS_DIMVA-DIMVA
                                                             IF_UOM_IN    = RS_DIMVA-DIMVA_UOM
                                                             IF_UOM_OUT   = IF_UOM
                                                   importing EF_VALUE_OUT = RS_DIMVA-DIMVA
                                                             EF_UOM_OUT   = RS_DIMVA-DIMVA_UOM ).

        catch /VCXI/CX_CKX.
***       Conversion Error for PackMat Effect &1 &2 from &3 to &4.
          /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                IF_MSGID = 'ZVCXI_XCSU'
                                                IF_MSGNO = '084'
                                                IF_MSGV1 = IF_PMATY
                                                IF_MSGV2 = |{ IF_EFFCT } { IF_DIMEN }|
                                                IF_MSGV3 = RS_DIMVA-DIMVA_UOM
                                                IF_MSGV4 = IF_UOM ).
      endtry.
    endif.

  endmethod.
  method GET_DIMVA_LIMIT.

    clear EF_UNKNOWN.

    if not LINE_EXISTS( IT_LIMIT[ LIMIT = IF_LIMIT
                                  DIMEN = IF_DIMEN ] ).
      EF_UNKNOWN = ABAP_TRUE.
    else.
***   Get Limit
      RS_DIMVA = IT_LIMIT[ LIMIT = IF_LIMIT
                           DIMEN = IF_DIMEN ]-S_DIMVA.

***   Convert Unit
      if IF_UOM is supplied.
        try.
            ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = RS_DIMVA-DIMVA
                                                               IF_UOM_IN    = RS_DIMVA-DIMVA_UOM
                                                               IF_UOM_OUT   = IF_UOM
                                                     importing EF_VALUE_OUT = RS_DIMVA-DIMVA
                                                               EF_UOM_OUT   = RS_DIMVA-DIMVA_UOM ).

          catch /VCXI/CX_CKX.
***         Conversion Error for Limit &1 &2 from &3 to &4.
            /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                  IF_MSGID = 'ZVCXI_XCSU'
                                                  IF_MSGNO = '082'
                                                  IF_MSGV1 = IF_LIMIT
                                                  IF_MSGV2 = IF_DIMEN
                                                  IF_MSGV3 = RS_DIMVA-DIMVA_UOM
                                                  IF_MSGV4 = IF_UOM ).
        endtry.
      endif.
    endif.

  endmethod.
method GET_EFFCT_FOR_PMATN.

  data:          LS_PMATY_EFFCT  type ZVCXI_XCS_TC191,
                 LS_TD102        type ZVCXI_XCS_TD102.
  data:          LT_PMATY_EFFCT  type ZVCXI_XCSU_TT_PMATY_EFFCT.
  field-symbols: <S_PMATN_EFFCT> type ZVCXI_XCS_TD102.

***----------------------------------------------------------------------------
*** Get all Dimensions for Packaging Material
  if IF_PMATY is not supplied.
    move ME->T_TD102 to RT_PMATN_EFFCT.
    delete RT_PMATN_EFFCT where PMATN ne IF_PMATN.

***----------------------------------------------------------------------------
*** Get Dimensions for Packaging Material with specific Packaging Material Type
  else.
*** Get Allowed Dimension Effects
    LT_PMATY_EFFCT = ME->GET_EFFCT_FOR_PMATY( IF_PMATY = IF_PMATY ).

    loop at LT_PMATY_EFFCT into LS_PMATY_EFFCT.
***   Find complete Match
      read table ME->T_TD102 into LS_TD102
                             with key PMATN = IF_PMATN
                                      PMATY = LS_PMATY_EFFCT-PMATY
                                      DIMEN = LS_PMATY_EFFCT-DIMEN
                                      EFFCT = LS_PMATY_EFFCT-EFFCT.
      if SY-SUBRC eq 0.
        append LS_TD102 to RT_PMATN_EFFCT.
      else.
***     Find Match w/o Packaging Material Type
        read table ME->T_TD102 into LS_TD102
                               with key PMATN = IF_PMATN
                                        DIMEN = LS_PMATY_EFFCT-DIMEN
                                        EFFCT = LS_PMATY_EFFCT-EFFCT.
        if SY-SUBRC eq 0.
          append LS_TD102 to RT_PMATN_EFFCT.
        else.
***     Return at least Initial Values.
          append initial line to RT_PMATN_EFFCT assigning <S_PMATN_EFFCT>.
          move-corresponding LS_PMATY_EFFCT to <S_PMATN_EFFCT>.
          if IF_SYSOM eq /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
            move LS_PMATY_EFFCT-UOMME to <S_PMATN_EFFCT>-EFFVA_UOM.
          elseif IF_SYSOM eq /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
            move LS_PMATY_EFFCT-UOMIM to <S_PMATN_EFFCT>-EFFVA_UOM.
          endif.
        endif.
      endif.
    endloop.
  endif.


endmethod.
  method GET_EFFCT_FOR_PMATY.

    move ME->T_TC191 to RT_PMATY_EFFCT.

    delete RT_PMATY_EFFCT where PMATY ne IF_PMATY.
    sort RT_PMATY_EFFCT by SEQUE.

*** Build Structure based on System of Measurement
    if ET_EFFCT is requested and
       IF_SYSOM is supplied.
      loop at RT_PMATY_EFFCT into data(LS_PMATY_EFFCT).
        append value  #( DIMEN = LS_PMATY_EFFCT-DIMEN
                         EFFCT = LS_PMATY_EFFCT-EFFCT
                         DIMVA_UOM = switch #( IF_SYSOM when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC   then LS_PMATY_EFFCT-UOMME
                                                        when /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL then LS_PMATY_EFFCT-UOMIM )
                       ) to ET_EFFCT.
      endloop.
    endif.

  endmethod.
method GET_FMNAG_FOR_LIMIT.

  data: LS_TC120 type ZVCXI_XCS_TC120.

  read table ME->T_TC120 into LS_TC120 with key LIMIT = IF_LIMIT.
  if SY-SUBRC eq 0.
    RF_FMNAG = LS_TC120-FMNAG.
  endif.

endmethod.
method GET_FMNCH_FOR_LIMIT.

  data: LS_TC120 type ZVCXI_XCS_TC120.

  read table ME->T_TC120 into LS_TC120 with key LIMIT = IF_LIMIT.
  if SY-SUBRC eq 0.
    RF_FMNCH = LS_TC120-FMNCH.
  endif.

endmethod.
method GET_FMNDI_FOR_EFFCT.

  data: LS_TC130 type YS_TC130.

  read table ME->T_TC130 into LS_TC130 with key EFFCT = IF_EFFCT.
  if SY-SUBRC eq 0.
    RF_FMNDI = LS_TC130-FMNDI.
  endif.

endmethod.
method GET_FMNPA_FOR_PMATY.

  data: LS_TC190 type YS_TC190.

  read table ME->T_TC190 into LS_TC190 with key PMATY = IF_PMATY.
  if SY-SUBRC eq 0.
    RF_FMNPA = LS_TC190-FMNPA.
  endif.

endmethod.
method GET_FMNSH_FOR_SHUTY.

  data: LS_TC170 type YS_TC170.

  read table ME->T_TC170 into LS_TC170 with key SHUTY = IF_SHUTY.
  if SY-SUBRC eq 0.
    RF_FMNSH = LS_TC170-FMNSH.
  endif.

endmethod.
  method GET_HORIZONTAL_CONTAINER.

    data: LT_UNIT_DIMEN  type ZVCXI_XCSU_TT_DIMEN.


***------------------------------------------------------------------------------------------------
*** Adjust Dimensions of previous unit (Roll) to Unit
    loop at IT_PRV_DIMEN into data(LS_DIMEN).
      case LS_DIMEN-DIMEN.
***     Diameter is translated to Length and Height
        when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_DIAMETER.
          LS_DIMEN-DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH.
          append LS_DIMEN to LT_UNIT_DIMEN.
          LS_DIMEN-DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT.
          append LS_DIMEN to LT_UNIT_DIMEN.
***     Keep other Dimensions as is
        when others.
          append LS_DIMEN to LT_UNIT_DIMEN.
      endcase.
    endloop.

***------------------------------------------------------------------------------------------------
*** Adjust Limits of Container
    data(LT_CONT_LIMIT) = IT_CONT_LIMIT.

*** Remove Layer Limit will make sure we only use 1 Layer
    delete LT_CONT_LIMIT where LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX
                          and  DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LAYERS.

***------------------------------------------------------------------------------------------------
*** Use Cubed Container Logic
    ME->GET_CUBED_CONTAINER( exporting IT_UNIT_DIMEN = LT_UNIT_DIMEN
                                       IT_CONT_LIMIT = LT_CONT_LIMIT
                                       IT_CONT_DIMEN = IT_CONT_DIMEN
                                       IS_COMOD      = IS_COMOD
                             importing EF_NUNIT      = EF_NUNIT
                                       ET_CONT_DIMEN = ET_CONT_DIMEN ).

  endmethod.
method GET_INSTANCE.

  data:  LS_INSTANCE type YS_INSTANCE.

*** Find existing Instance
  read table T_INSTANCE into LS_INSTANCE
                        with key OWNER = IF_OWNER.
  if SY-SUBRC eq 0.
*** Return Instance
    move LS_INSTANCE-R_INSTANCE to RR_CUST_SHIPU.
  else.
*** Create new Instance
    create object RR_CUST_SHIPU
      exporting
        IF_OWNER = IF_OWNER.
  endif.

endmethod.
method GET_ISVCE_FOR_PMATY.

  data: LS_TC190 type YS_TC190.

  read table ME->T_TC190 into LS_TC190 with key PMATY = IF_PMATY.
  if sy-subrc ne 0.
    exit.
  endif.

  move LS_TC190-ISVCE to RF_ISVCE.

endmethod.
method GET_LAPOS.

  data:          LS_LAPOS  type ZVCXI_XCS_TC102,
                 LS_TC103  type ZVCXI_XCS_TC103.
  data:          LT_TC105  type YT_TC105.

*** Return all Label Positions
  move T_TC102 to RT_LAPOS.

  check IF_WERKS is not initial.

*** Filter by Plant active?
  read table ME->T_TC103 into LS_TC103
                         with key WERKS = IF_WERKS
                                  FRLAP = ABAP_TRUE.

  if SY-SUBRC ne 0.
    read table ME->T_TC103 into LS_TC103
                           with key WERKS = SPACE
                                    FRLAP = ABAP_TRUE.
  endif.

  check SY-SUBRC eq 0.

*** Reduce not relevant restrictions
  move ME->T_TC105 to LT_TC105.
  delete LT_TC105 where WERKS ne LS_TC103-WERKS.

*** Reduce result by restrictions
  loop at RT_LAPOS into LS_LAPOS.
    read table LT_TC105 with key LAPOS = LS_LAPOS-LAPOS
                        transporting no fields.
    check SY-SUBRC ne 0.
    delete RT_LAPOS.
  endloop.

endmethod.
method GET_LAPOS_DESCR.

  data: LS_TC102T type ZVCXI_XCS_TC102T.

  read table T_TC102T into LS_TC102T
  with key LAPOS = IF_LAPOS
           LANGU = SY-LANGU.

  check SY-SUBRC = 0.
  move LS_TC102T-DESCR to RF_DESCR.

endmethod.
method GET_LIMIT_FOR_SHUNT.

  data: LF_SHUTY type ZVCXI_XCSU_SHUTY.
  data: LS_TC180 type YS_TC180.

  read table ME->T_TC180 into LS_TC180 with key SHUNT = IF_SHUNT.
  move LS_TC180-SHUTY to LF_SHUTY.

  move ME->T_TC172 to RT_SHUTY_LIMIT.
  delete RT_SHUTY_LIMIT where SHUTY ne LF_SHUTY.

  sort RT_SHUTY_LIMIT by SEQUE.

endmethod.
method GET_LIMIT_FOR_SHUTY.

  move ME->T_TC172 to RT_SHUTY_LIMIT.

  delete RT_SHUTY_LIMIT where SHUTY ne IF_SHUTY.
  sort RT_SHUTY_LIMIT by SEQUE.

endmethod.
method GET_LIMIT_SET_FOR_EFFCT.

  data: LS_TC131 type ZVCXI_XCS_TC131.

  loop at ME->T_TC131 into LS_TC131 where EFFCT = IF_EFFCT.
    append LS_TC131 to RT_EFFCT_LIMIT.
  endloop.

endmethod.
method GET_MATNR_DESCR.

  data:  LS_MAKT  type MAKT.

  call function 'MAKT_SINGLE_READ'
    exporting
      MATNR      = IF_MATNR
      SPRAS      = SY-LANGU
    importing
      WMAKT      = LS_MAKT
    exceptions
      WRONG_CALL = 1
      NOT_FOUND  = 2
      others     = 3.

  if SY-SUBRC ne 0 or
     LS_MAKT-MAKTX is initial.

    call function 'MAKT_SINGLE_READ'
      exporting
        MATNR      = IF_MATNR
        SPRAS      = 'E'
      importing
        WMAKT      = LS_MAKT
      exceptions
        WRONG_CALL = 1
        NOT_FOUND  = 2
        others     = 3.

    check SY-SUBRC = 0.

  endif.

  move LS_MAKT-MAKTX to RF_DESCR.

endmethod.
method GET_NUMBER_PALLETS.

  data: LS_TC152 type ZVCXI_XCS_TC152.

  read table ME->T_TC152 into LS_TC152 with key CONSC = IF_CONSC.

  if SY-SUBRC eq 0.
    RF_NOPAL = LS_TC152-NOPAL.
  endif.

endmethod.
  method GET_NUMBER_ROLLS.

    RF_NOROL = value #( ME->T_TC143[ PACKP = IF_PACKP ]-NOROL optional ).

  endmethod.
method GET_NUMBER_STACKS.

  data: LS_TC141 type ZVCXI_XCS_TC141.

  read table ME->T_TC141 into LS_TC141 with key PACKP = IF_PACKP.

  if SY-SUBRC eq 0.
    RF_NOSTA = LS_TC141-NOSTA.
  endif.

endmethod.
method GET_OBLIG_DIMEN_FOR_SHUTY.

  move ME->T_TC171 to RT_SHUTY_DIMEN.

  delete RT_SHUTY_DIMEN where SHUTY ne IF_SHUTY
                           or OBLIG ne ABAP_TRUE.
  sort RT_SHUTY_DIMEN by SEQUE.

endmethod.
  method GET_PACKP_FOOTPRINT.

    clear: CS_DIM_LEN-DIMVA,
           CS_DIM_WID-DIMVA,
           CS_DIM_HGT-DIMVA.

***--------------------------------------------------------------------------------------
*** Calculate Footprint based on Stacking Pattern
    if LINE_EXISTS( T_TC141[ PACKP = IF_PACKP ] ).
      ME->GET_PACKP_FOOTPRINT_STACK( exporting IF_PACKP      = IF_PACKP
                                               IT_PREV_DIMEN = IT_PREV_DIMEN
                                               IF_SHUTY      = IF_SHUTY
                                               IF_SHUNT      = IF_SHUNT
                                     changing  CS_DIM_LEN    = CS_DIM_LEN
                                               CS_DIM_WID    = CS_DIM_WID
                                               CS_DIM_HGT    = CS_DIM_HGT ).
    endif.

*** Calculate Footprint based on Roll Pattern
    if LINE_EXISTS( T_TC143[ PACKP = IF_PACKP ] ).
      ME->GET_PACKP_FOOTPRINT_ROLL( exporting IF_PACKP      = IF_PACKP
                                              IT_PREV_DIMEN = IT_PREV_DIMEN
                                              IF_SHUTY      = IF_SHUTY
                                              IF_SHUNT      = IF_SHUNT
                                    changing  CS_DIM_LEN    = CS_DIM_LEN
                                              CS_DIM_WID    = CS_DIM_WID
                                              CS_DIM_HGT    = CS_DIM_HGT ).
    endif.

  endmethod.
method GET_PACKP_FOOTPRINT_OLD.

  data: LF_DIMVA_WID1 type ZVCXI_XCSU_DIMVA,
        LF_DIMVA_WID2 type ZVCXI_XCSU_DIMVA,
        LF_DIMVA_LEN1 type ZVCXI_XCSU_DIMVA,
        LF_DIMVA_LEN2 type ZVCXI_XCSU_DIMVA.
  data: LS_TC106      type ZVCXI_XCS_TC106,
        LS_TC141      type ZVCXI_XCS_TC141,
        LS_SMARG      type ZVCXI_XCSU_S_SMARG,
        LS_DIMVA_LEN  type ZVCXI_XCSU_S_DIMVA,
        LS_DIMVA_WID  type ZVCXI_XCSU_S_DIMVA.

***--------------------------------------------------------------------------------------
*** Get Rotation Option
  read table T_TC106 into LS_TC106 with key ROTEL = C_ROTEL_STACK.

***--------------------------------------------------------------------------------------
  try.
***   Assign Width to local variables and make sure it is in Length's Unit
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_DIMVA_LEN-DIMVA_UOM
                                                         IF_UOM_IN    = IS_DIMVA_WID-DIMVA_UOM
                                                         IF_VALUE_IN  = IS_DIMVA_WID-DIMVA
                                               importing EF_VALUE_OUT = LS_DIMVA_WID-DIMVA
                                                         EF_UOM_OUT   = LS_DIMVA_WID-DIMVA_UOM ).
    catch /VCXI/CX_CKX.
      ME->RAISE_CONV_ERROR_WIDTH( ).
  endtry.

***--------------------------------------------------------------------------------------
*** Ensure that the input Dimensions are correctly oriented
  if IS_DIMVA_LEN-DIMVA lt LS_DIMVA_WID-DIMVA.
    LS_DIMVA_LEN = LS_DIMVA_WID.
    LS_DIMVA_WID = IS_DIMVA_LEN.
  else.
    LS_DIMVA_LEN = IS_DIMVA_LEN.
  endif.

***--------------------------------------------------------------------------------------
*** Get Definition
  read table T_TC141 into LS_TC141 with key PACKP = IF_PACKP.

  if SY-SUBRC eq 0.
*** Prepare Stack Margin.
    if LS_TC141-SMARG is not initial.
      try.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_DIMVA_LEN-DIMVA_UOM
                                                             IF_UOM_IN    = LS_TC141-SMARG_UOM
                                                             IF_VALUE_IN  = LS_TC141-SMARG
                                                   importing EF_VALUE_OUT = LS_SMARG-SMARG
                                                             EF_UOM_OUT   = LS_SMARG-SMARG_UOM ).
        catch /VCXI/CX_CKX.
          ME->RAISE_CONV_ERROR_STACK_MARGIN( ).
      endtry.
    endif.

***--------------------------------------------------------------------------------------
*** Calculated Length and Width using Primary setup
    LF_DIMVA_WID1 = ( LS_TC141-NOSAW * LS_DIMVA_WID-DIMVA ) + ( LS_TC141-NOLAW * LS_DIMVA_LEN-DIMVA ).
    LF_DIMVA_WID1 = LF_DIMVA_WID1 + ( ( LS_TC141-NOSAW + LS_TC141-NOLAW - 1 ) * LS_SMARG-SMARG ).

    LF_DIMVA_LEN1 = ( LS_TC141-NOSAL * LS_DIMVA_WID-DIMVA ) + ( LS_TC141-NOLAL * LS_DIMVA_LEN-DIMVA ).
    LF_DIMVA_LEN1 = LF_DIMVA_LEN1 + ( ( LS_TC141-NOSAL + LS_TC141-NOLAL - 1 ) * LS_SMARG-SMARG ).

*** Calculated Length and Width using Alternate setup
    LF_DIMVA_WID2 = ( LS_TC141-ANSAW * LS_DIMVA_WID-DIMVA ) + ( LS_TC141-ANLAW * LS_DIMVA_LEN-DIMVA ).
    LF_DIMVA_WID2 = LF_DIMVA_WID2 + ( ( LS_TC141-ANSAW + LS_TC141-ANLAW - 1 ) * LS_SMARG-SMARG ).

    LF_DIMVA_LEN2 = ( LS_TC141-ANSAL * LS_DIMVA_WID-DIMVA ) + ( LS_TC141-ANLAL * LS_DIMVA_LEN-DIMVA ).
    LF_DIMVA_LEN2 = LF_DIMVA_LEN2 + ( ( LS_TC141-ANSAL + LS_TC141-ANLAL - 1 ) * LS_SMARG-SMARG ).

  endif.

***--------------------------------------------------------------------------------------
*** The larger of the two possible Dimensions should always be used
  if LF_DIMVA_WID1 gt LF_DIMVA_WID2.
    ES_DIMVA_WID-DIMVA = LF_DIMVA_WID1.
  else.
    ES_DIMVA_WID-DIMVA = LF_DIMVA_WID2.
  endif.

  if LF_DIMVA_LEN1 gt LF_DIMVA_LEN2.
    ES_DIMVA_LEN-DIMVA = LF_DIMVA_LEN1.
  else.
    ES_DIMVA_LEN-DIMVA = LF_DIMVA_LEN2.
  endif.

***--------------------------------------------------------------------------------------
*** Rotation option is active
  if LS_TC106-ROTOP eq ABAP_TRUE.
*** Re-Orient length/width after calculations
    if ES_DIMVA_WID-DIMVA gt ES_DIMVA_LEN-DIMVA.
      LS_DIMVA_WID = ES_DIMVA_LEN.
      ES_DIMVA_LEN = ES_DIMVA_WID.
      ES_DIMVA_WID = LS_DIMVA_WID.
    endif.
  endif.

***--------------------------------------------------------------------------------------
  try.
***   Convert exported Width back to original Width Unit and set
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_DIMVA_WID-DIMVA_UOM
                                                         IF_UOM_IN    = ES_DIMVA_WID-DIMVA_UOM
                                                         IF_VALUE_IN  = ES_DIMVA_WID-DIMVA
                                               importing EF_VALUE_OUT = ES_DIMVA_WID-DIMVA
                                                         EF_UOM_OUT   = ES_DIMVA_WID-DIMVA_UOM ).
    catch /VCXI/CX_CKX.
      ME->RAISE_CONV_ERROR_WIDTH( ).
  endtry.

endmethod.
  method GET_PACKP_FOOTPRINT_ROLL.

    data: LF_DIMVA_WID1 type ZVCXI_XCSU_DIMVA,
          LF_DIMVA_WID2 type ZVCXI_XCSU_DIMVA,
          LF_DIMVA_LEN1 type ZVCXI_XCSU_DIMVA,
          LF_DIMVA_LEN2 type ZVCXI_XCSU_DIMVA.
    data: LS_TC143   type ZVCXI_XCS_TC143,
          LS_DIM_LEN type ZVCXI_XCSU_S_DIMVA,
          LS_DIM_WID type ZVCXI_XCSU_S_DIMVA,
          LS_DIM_HGT type ZVCXI_XCSU_S_DIMVA.


    clear: CS_DIM_LEN-DIMVA,
           CS_DIM_WID-DIMVA,
           CS_DIM_HGT-DIMVA.

*** Get Definition
    read table T_TC143 into LS_TC143 with key PACKP = IF_PACKP.
    check SY-SUBRC eq 0.

***--------------------------------------------------------------------------------------
*** Determine dimensions of previous unit
*** Diameter
    data(LS_PRV_DIA) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_PREV_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_DIAMETER
                                            IF_UOM   = CS_DIM_WID-DIMVA_UOM ).
*** Width
    data(LS_PRV_WID) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_PREV_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH
                                            IF_UOM   = CS_DIM_WID-DIMVA_UOM ).


***--------------------------------------------------------------------------------------
*** Prepare Roll Margin on Length
    if LS_TC143-RLMLE is not initial.
      try.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_TC143-RLMLE
                                                             IF_UOM_IN    = LS_TC143-RLMLE_UOM
                                                             IF_UOM_OUT   = CS_DIM_WID-DIMVA_UOM
                                                   importing EF_VALUE_OUT = LS_TC143-RLMLE
                                                             EF_UOM_OUT   = LS_TC143-RLMLE_UOM ).
        catch /VCXI/CX_CKX.
          ME->RAISE_CONV_ERROR_ROLL_MARGIN( ).
      endtry.
    endif.
*** Prepare Roll Margin on Width
    if LS_TC143-RLMWI is not initial.
      try.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_TC143-RLMWI
                                                             IF_UOM_IN    = LS_TC143-RLMWI_UOM
                                                             IF_UOM_OUT   = CS_DIM_WID-DIMVA_UOM
                                                   importing EF_VALUE_OUT = LS_TC143-RLMWI
                                                             EF_UOM_OUT   = LS_TC143-RLMWI_UOM ).
        catch /VCXI/CX_CKX.
          ME->RAISE_CONV_ERROR_ROLL_MARGIN( ).
      endtry.
    endif.

***--------------------------------------------------------------------------------------
*** Calculated Length and Width using Primary setup
    LF_DIMVA_WID1 = ( LS_TC143-NOWAW * LS_PRV_WID-DIMVA ) + ( LS_TC143-NODAW * LS_PRV_DIA-DIMVA ).
    LF_DIMVA_WID1 = LF_DIMVA_WID1 + ( ( LS_TC143-NOWAW + LS_TC143-NODAW - 1 ) * LS_TC143-RLMWI ).

    LF_DIMVA_LEN1 = ( LS_TC143-NOWAL * LS_PRV_WID-DIMVA ) + ( LS_TC143-NODAL * LS_PRV_DIA-DIMVA ).
    LF_DIMVA_LEN1 = LF_DIMVA_LEN1 + ( ( LS_TC143-NOWAL + LS_TC143-NODAL - 1 ) * LS_TC143-RLMLE ).

*** Calculated Length and Width using Alternate setup
    LF_DIMVA_WID2 = ( LS_TC143-ANWAW * LS_PRV_WID-DIMVA ) + ( LS_TC143-ANDAW * LS_PRV_DIA-DIMVA ).
    LF_DIMVA_WID2 = LF_DIMVA_WID2 + ( ( LS_TC143-ANWAW + LS_TC143-ANDAW - 1 ) * LS_TC143-RLMWI ).

    LF_DIMVA_LEN2 = ( LS_TC143-ANWAL * LS_PRV_WID-DIMVA ) + ( LS_TC143-ANDAL * LS_PRV_DIA-DIMVA ).
    LF_DIMVA_LEN2 = LF_DIMVA_LEN2 + ( ( LS_TC143-ANWAL + LS_TC143-ANDAL - 1 ) * LS_TC143-RLMLE ).


***--------------------------------------------------------------------------------------
*** The larger of the two possible Dimensions should always be used
    LS_DIM_WID-DIMVA     = cond #( when LF_DIMVA_WID1 gt LF_DIMVA_WID2 then LF_DIMVA_WID1 else LF_DIMVA_WID2 ).
    LS_DIM_WID-DIMVA_UOM = CS_DIM_WID-DIMVA_UOM.
    LS_DIM_LEN-DIMVA     = cond #( when LF_DIMVA_LEN1 gt LF_DIMVA_LEN2 then LF_DIMVA_LEN1 else LF_DIMVA_LEN2 ).
    LS_DIM_LEN-DIMVA_UOM = CS_DIM_WID-DIMVA_UOM.

*** Rotation Option is active
    if value #( T_TC106[ ROTEL = C_ROTEL_ROLL ]-ROTOP optional ) eq ABAP_TRUE.
***   Reorient length/width after calculations
      if LS_DIM_WID-DIMVA gt LS_DIM_LEN-DIMVA.
        SWITCH_DIMVA( changing CS_DIMVA1 = LS_DIM_LEN
                               CS_DIMVA2 = LS_DIM_WID ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Determine Height based on Roll Rotation
    case LS_TC143-RLROT.
      when C_RLROT_STANDING.
        LS_DIM_HGT = value #( DIMVA     = LS_PRV_WID-DIMVA * LS_TC143-NOLYR
                              DIMVA_UOM = LS_PRV_WID-DIMVA_UOM ).
      when C_RLROT_LAYING.
***     Consider Roll Arrangement
        case LS_TC143-RLARR.
          when C_RLARR_RECTANGULAR.
            LS_DIM_HGT = value #( DIMVA     = LS_PRV_DIA-DIMVA * LS_TC143-NOLYR
                                  DIMVA_UOM = LS_PRV_DIA-DIMVA_UOM ).
          when C_RLARR_TRIANGULAR.
            data(LF_RLMRG) = cond #( when LS_TC143-NODAW gt 1 then LS_TC143-RLMWI
                                     when LS_TC143-NODAL gt 1 then LS_TC143-RLMLE ).

***         Hypotenuse of Triangle from Bottom Layer Roll Center to Top Layer Roll Center: C = (Number of Layers -1) * Diameter
            data(LF_C) = ( LS_TC143-NOLYR - 1 ) * LS_PRV_DIA-DIMVA.

***         Adjacent of Triangle: A = ((Number of Layers / 2) - 0,5)) * (Diameter + Margin)
            data(LF_A) = ( ( LS_TC143-NOLYR / 2 ) - '0.5' )  * ( LS_PRV_DIA-DIMVA + LF_RLMRG ).

***         Opposite of Triangle:  B = #( C^2 - A^2 )
            data(LF_B) = SQRT( ( LF_C ** 2 ) - ( LF_A ** 2 ) ).

***         Height = Opposite of Triangle + Diameter
            LS_DIM_HGT = value #( DIMVA     = LF_B + LS_PRV_DIA-DIMVA
                                  DIMVA_UOM = LS_PRV_DIA-DIMVA_UOM ).
        endcase.
    endcase.

***--------------------------------------------------------------------------------------
*** Return Dimensions
*** Length
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_DIM_LEN-DIMVA
                                                       IF_UOM_IN    = LS_DIM_LEN-DIMVA_UOM
                                                       IF_UOM_OUT   = CS_DIM_LEN-DIMVA_UOM
                                             importing EF_VALUE_OUT = CS_DIM_LEN-DIMVA
                                                       EF_UOM_OUT   = CS_DIM_LEN-DIMVA_UOM ).
*** Width
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_DIM_WID-DIMVA
                                                       IF_UOM_IN    = LS_DIM_WID-DIMVA_UOM
                                                       IF_UOM_OUT   = CS_DIM_WID-DIMVA_UOM
                                             importing EF_VALUE_OUT = CS_DIM_WID-DIMVA
                                                       EF_UOM_OUT   = CS_DIM_WID-DIMVA_UOM ).
*** Heights
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_DIM_HGT-DIMVA
                                                       IF_UOM_IN    = LS_DIM_HGT-DIMVA_UOM
                                                       IF_UOM_OUT   = CS_DIM_HGT-DIMVA_UOM
                                             importing EF_VALUE_OUT = CS_DIM_HGT-DIMVA
                                                       EF_UOM_OUT   = CS_DIM_HGT-DIMVA_UOM ).

  endmethod.
  method GET_PACKP_FOOTPRINT_STACK.

    data: LF_DIMVA_WID1 type ZVCXI_XCSU_DIMVA,
          LF_DIMVA_WID2 type ZVCXI_XCSU_DIMVA,
          LF_DIMVA_LEN1 type ZVCXI_XCSU_DIMVA,
          LF_DIMVA_LEN2 type ZVCXI_XCSU_DIMVA.
    data: LS_TC141   type ZVCXI_XCS_TC141,
          LS_DIM_LEN type ZVCXI_XCSU_S_DIMVA,
          LS_DIM_WID type ZVCXI_XCSU_S_DIMVA,
          LS_DIM_HGT type ZVCXI_XCSU_S_DIMVA.


    clear: CS_DIM_LEN-DIMVA,
           CS_DIM_WID-DIMVA,
           CS_DIM_HGT-DIMVA.

*** Get Definition
    read table T_TC141 into LS_TC141 with key PACKP = IF_PACKP.
    check SY-SUBRC eq 0.

***--------------------------------------------------------------------------------------
*** Determine dimensions of previous unit
*** Length
    data(LS_PRV_LEN) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_PREV_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH
                                            IF_UOM   = CS_DIM_LEN-DIMVA_UOM ).
*** Width (in same Unit as Length - so we can rotate)
    data(LS_PRV_WID) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_PREV_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH
                                            IF_UOM   = CS_DIM_LEN-DIMVA_UOM ).
*** Height
    data(LS_PRV_HGT) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_PREV_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT
                                            IF_UOM   = CS_DIM_HGT-DIMVA_UOM ).

*** Ensure that the input Dimensions are correctly oriented
    if LS_PRV_LEN-DIMVA lt LS_PRV_WID-DIMVA.
      SWITCH_DIMVA( changing CS_DIMVA1 = LS_PRV_LEN
                             CS_DIMVA2 = LS_PRV_WID ).
    endif.

***--------------------------------------------------------------------------------------
*** Prepare Stack Margin
    if LS_TC141-SMARG is not initial.
      try.
          ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_TC141-SMARG
                                                             IF_UOM_IN    = LS_TC141-SMARG_UOM
                                                             IF_UOM_OUT   = CS_DIM_WID-DIMVA_UOM
                                                   importing EF_VALUE_OUT = LS_TC141-SMARG
                                                             EF_UOM_OUT   = LS_TC141-SMARG_UOM ).
        catch /VCXI/CX_CKX.
          ME->RAISE_CONV_ERROR_STACK_MARGIN( ).
      endtry.
    endif.

***--------------------------------------------------------------------------------------
*** Calculated Length and Width using Primary setup
    LF_DIMVA_WID1 = ( LS_TC141-NOSAW * LS_PRV_WID-DIMVA ) + ( LS_TC141-NOLAW * LS_PRV_LEN-DIMVA ).
    LF_DIMVA_WID1 = LF_DIMVA_WID1 + ( ( LS_TC141-NOSAW + LS_TC141-NOLAW - 1 ) * LS_TC141-SMARG ).

    LF_DIMVA_LEN1 = ( LS_TC141-NOSAL * LS_PRV_WID-DIMVA ) + ( LS_TC141-NOLAL * LS_PRV_LEN-DIMVA ).
    LF_DIMVA_LEN1 = LF_DIMVA_LEN1 + ( ( LS_TC141-NOSAL + LS_TC141-NOLAL - 1 ) * LS_TC141-SMARG ).

*** Calculated Length and Width using Alternate setup
    LF_DIMVA_WID2 = ( LS_TC141-ANSAW * LS_PRV_WID-DIMVA ) + ( LS_TC141-ANLAW * LS_PRV_LEN-DIMVA ).
    LF_DIMVA_WID2 = LF_DIMVA_WID2 + ( ( LS_TC141-ANSAW + LS_TC141-ANLAW - 1 ) * LS_TC141-SMARG ).

    LF_DIMVA_LEN2 = ( LS_TC141-ANSAL * LS_PRV_WID-DIMVA ) + ( LS_TC141-ANLAL * LS_PRV_LEN-DIMVA ).
    LF_DIMVA_LEN2 = LF_DIMVA_LEN2 + ( ( LS_TC141-ANSAL + LS_TC141-ANLAL - 1 ) * LS_TC141-SMARG ).

***--------------------------------------------------------------------------------------
*** The larger of the two possible Dimensions should always be used
    LS_DIM_WID-DIMVA     = cond #( when LF_DIMVA_WID1 gt LF_DIMVA_WID2 then LF_DIMVA_WID1 else LF_DIMVA_WID2 ).
    LS_DIM_WID-DIMVA_UOM = CS_DIM_WID-DIMVA_UOM.
    LS_DIM_LEN-DIMVA     = cond #( when LF_DIMVA_LEN1 gt LF_DIMVA_LEN2 then LF_DIMVA_LEN1 else LF_DIMVA_LEN2 ).
    LS_DIM_LEN-DIMVA_UOM = CS_DIM_WID-DIMVA_UOM.

*** Rotation Option is active
    if value #( T_TC106[ ROTEL = C_ROTEL_STACK ]-ROTOP optional ) eq ABAP_TRUE.
***   Reorient length/width after calculations
      if LS_DIM_WID-DIMVA gt LS_DIM_LEN-DIMVA.
        SWITCH_DIMVA( changing CS_DIMVA1 = LS_DIM_LEN
                               CS_DIMVA2 = LS_DIM_WID ).
      endif.
    endif.

*** Keep Hight of previous Unit
    LS_DIM_HGT = LS_PRV_HGT.

***--------------------------------------------------------------------------------------
*** Return Deimensions
*** Length
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_DIM_LEN-DIMVA
                                                       IF_UOM_IN    = LS_DIM_LEN-DIMVA_UOM
                                                       IF_UOM_OUT   = CS_DIM_LEN-DIMVA_UOM
                                             importing EF_VALUE_OUT = CS_DIM_LEN-DIMVA
                                                       EF_UOM_OUT   = CS_DIM_LEN-DIMVA_UOM ).
*** Width
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_DIM_WID-DIMVA
                                                       IF_UOM_IN    = LS_DIM_WID-DIMVA_UOM
                                                       IF_UOM_OUT   = CS_DIM_WID-DIMVA_UOM
                                             importing EF_VALUE_OUT = CS_DIM_WID-DIMVA
                                                       EF_UOM_OUT   = CS_DIM_WID-DIMVA_UOM ).
*** Heights
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = LS_DIM_HGT-DIMVA
                                                       IF_UOM_IN    = LS_DIM_HGT-DIMVA_UOM
                                                       IF_UOM_OUT   = CS_DIM_HGT-DIMVA_UOM
                                             importing EF_VALUE_OUT = CS_DIM_HGT-DIMVA
                                                       EF_UOM_OUT   = CS_DIM_HGT-DIMVA_UOM ).

  endmethod.
method GET_PACKP_FOR_SHUNT.

  data:          LS_TC181  type ZVCXI_XCS_TC181,
                 LS_TC140  type YS_TC140,
                 LS_TC103  type ZVCXI_XCS_TC103.
  data:          LT_TC142  type YT_TC142.

  field-symbols: <S_PACKP> type ZVCXI_XCSU_S_PACKP.

*** Get all Packing Pattern of Shipping Unit
  loop at ME->T_TC181 into LS_TC181 where SHUNT eq IF_SHUNT.
*** Get Global entrie of Packing Pattern
    read table ME->T_TC140 into LS_TC140 with key PACKP = LS_TC181-PACKP.
    check SY-SUBRC eq 0.

    append initial line to RT_PACKP assigning <S_PACKP>.
    move-corresponding LS_TC140 to <S_PACKP>.
  endloop.

  check IF_WERKS is not initial.

*** Filter by Plant active?
  read table ME->T_TC103 into LS_TC103
                         with key WERKS = IF_WERKS
                                  FRPAP = ABAP_TRUE.

  if SY-SUBRC ne 0.
    read table ME->T_TC103 into LS_TC103
                           with key WERKS = SPACE
                                    FRPAP = ABAP_TRUE.
  endif.

  check SY-SUBRC eq 0.

*** Reduce not relevant restrictions
  move ME->T_TC142 to LT_TC142.
  delete LT_TC142 where WERKS ne LS_TC103-WERKS.

*** Reduce result by restrictions
  loop at RT_PACKP assigning <S_PACKP>.
    read table LT_TC142 with key PACKP = <S_PACKP>-PACKP
                        transporting no fields.
    check SY-SUBRC ne 0.
    delete RT_PACKP.
  endloop.

endmethod.
method GET_PALLET_FOOTPRINT.

  data: LF_DIMVA_WID1 type ZVCXI_XCSU_DIMVA,
        LF_DIMVA_WID2 type ZVCXI_XCSU_DIMVA,
        LF_DIMVA_LEN1 type ZVCXI_XCSU_DIMVA,
        LF_DIMVA_LEN2 type ZVCXI_XCSU_DIMVA.
  data: LS_TC106      type ZVCXI_XCS_TC106,
        LS_TC152      type ZVCXI_XCS_TC152,
        LS_DIMVA_LEN  type ZVCXI_XCSU_S_DIMVA,
        LS_DIMVA_WID  type ZVCXI_XCSU_S_DIMVA,
        LS_CALCV      type ZVCXI_XCS_S_CALCV.

***--------------------------------------------------------------------------------------
*** Get Rotation Option
  read table T_TC106 into LS_TC106 with key ROTEL = C_ROTEL_PALLET.

***--------------------------------------------------------------------------------------
*** Assign width to local variables and make sure it is in Length's Unit
  move IS_DIMVA_WID-DIMVA     to LS_CALCV-CALCV.
  move IS_DIMVA_WID-DIMVA_UOM to LS_CALCV-CALCV_UOM.
  ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = IS_DIMVA_LEN-DIMVA_UOM
                                           changing  CS_CALCV = LS_CALCV ).
  move LS_CALCV-CALCV     to LS_DIMVA_WID-DIMVA.
  move LS_CALCV-CALCV_UOM to LS_DIMVA_WID-DIMVA_UOM.


***--------------------------------------------------------------------------------------
*** Ensure that the input Dimensions are correctly oriented
  if IS_DIMVA_LEN-DIMVA lt LS_DIMVA_WID-DIMVA.
    LS_DIMVA_LEN = LS_DIMVA_WID.
    LS_DIMVA_WID = IS_DIMVA_LEN.
  else.
    LS_DIMVA_LEN = IS_DIMVA_LEN.
  endif.

***--------------------------------------------------------------------------------------
*** Get Definition
  read table T_TC152 into LS_TC152 with key CONSC = IF_CONSC.

  if SY-SUBRC eq 0.
*** Calculated Length and Width using Primary setup
    LF_DIMVA_WID1 = ( LS_TC152-PAWOW * LS_DIMVA_WID-DIMVA ) + ( LS_TC152-PALOW * LS_DIMVA_LEN-DIMVA ).
    LF_DIMVA_LEN1 = ( LS_TC152-PAWOL * LS_DIMVA_WID-DIMVA ) + ( LS_TC152-PALOL * LS_DIMVA_LEN-DIMVA ).

*** Calculated Length and Width using Alternate setup
    LF_DIMVA_WID2 = ( LS_TC152-APWOW * LS_DIMVA_WID-DIMVA ) + ( LS_TC152-APLOW * LS_DIMVA_LEN-DIMVA ).
    LF_DIMVA_LEN2 = ( LS_TC152-APWOL * LS_DIMVA_WID-DIMVA ) + ( LS_TC152-APLOL * LS_DIMVA_LEN-DIMVA ).
  endif.

***--------------------------------------------------------------------------------------
*** The larger of the two possible Dimensions should always be used
  if LF_DIMVA_WID1 gt LF_DIMVA_WID2.
    ES_DIMVA_WID-DIMVA = LF_DIMVA_WID1.
  else.
    ES_DIMVA_WID-DIMVA = LF_DIMVA_WID2.
  endif.

  if LF_DIMVA_LEN1 gt LF_DIMVA_LEN2.
    ES_DIMVA_LEN-DIMVA = LF_DIMVA_LEN1.
  else.
    ES_DIMVA_LEN-DIMVA = LF_DIMVA_LEN2.
  endif.

***--------------------------------------------------------------------------------------
*** Rotation option is active
  if LS_TC106-ROTOP eq ABAP_TRUE.
*** Re-Orient length/width after calculations
    if ES_DIMVA_WID-DIMVA gt ES_DIMVA_LEN-DIMVA.
      LS_DIMVA_WID = ES_DIMVA_LEN.
      ES_DIMVA_LEN = ES_DIMVA_WID.
      ES_DIMVA_WID = LS_DIMVA_WID.
    endif.
  endif.

***--------------------------------------------------------------------------------------
*** Convert exported Width back to original Width Unit and set
  move ES_DIMVA_WID-DIMVA     to LS_CALCV-CALCV.
  move ES_DIMVA_WID-DIMVA_UOM to LS_CALCV-CALCV_UOM.
  ZCL_VCXI_XCS_SERVICE_CALC=>CONVERT_UNIT( exporting IF_UOM   = IS_DIMVA_WID-DIMVA_UOM
                                           changing  CS_CALCV = LS_CALCV ).
  move LS_CALCV-CALCV     to ES_DIMVA_WID-DIMVA.
  move LS_CALCV-CALCV_UOM to ES_DIMVA_WID-DIMVA_UOM.
  move LS_CALCV-CALCV_UOM to ES_DIMVA_LEN-DIMVA_UOM.

endmethod.
method GET_PALLET_PATTERN.

  read table ME->T_TC152 into RS_PALLET with key CONSC = IF_CONSC.

endmethod.
  method GET_PICHP_FOR_SHUNT.

    RF_PICHP = value #( T_TC180[ SHUNT = IF_SHUNT ]-PICHP optional ).

  endmethod.
method GET_PIREM_FOR_PMATY.

  RF_PIREM = value #( ME->T_TC190[ PMATY = IF_PMATY ]-PIREM optional ).

endmethod.
method GET_PMATN_FOR_PMATY.

  data:          LS_TD101      type         ZVCXI_XCS_TD101.
  data:          LR_CUST_MATNR type ref to  ZCL_VCXI_XCS_CUST_MATNR.
  field-symbols: <S_PMATN>     type         ZVCXI_XCSU_S_PMATN.

  loop at ME->T_TD101 into LS_TD101 where PMATY eq IF_PMATY.

*** Check if we need to check the Material for a specific plant
    clear: LR_CUST_MATNR.

*** Load the Customizing
    try.
        LR_CUST_MATNR = ZCL_VCXI_XCS_CUST_MATNR=>GET_INSTANCE( IF_MATNR = LS_TD101-PMATN
                                                               IF_WERKS = IF_WERKS
                                                               IF_DATE  = SY-DATUM ).
      catch /VCXI/CX_CKX.
        clear LR_CUST_MATNR.
    endtry.

*** Check Material Number Exist
    if LR_CUST_MATNR                is not bound or
       LR_CUST_MATNR->F_CHECK_MATNR eq ABAP_FALSE.
      continue.
    else.
***   Check Material Number Exist at Plant
      if IF_WERKS                        is not initial and
         LR_CUST_MATNR->F_CHECK_MAT_MARC eq ABAP_FALSE.
        continue.
      endif.
    endif.


    append initial line to RT_PMATN assigning <S_PMATN>.
    <S_PMATN>-PMATN = LS_TD101-PMATN.
    <S_PMATN>-DESCR = ME->GET_MATNR_DESCR( IF_MATNR = LS_TD101-PMATN ).

  endloop.

endmethod.
method GET_PMATY_COMBI.

  data:          LS_TC190        type ZVCXI_XCS_TC190,
                 LS_TC192        type ZVCXI_XCS_TC192,
                 LS_TD101        type ZVCXI_XCS_TD101.
  field-symbols: <S_PMATY_COMBI> type ZVCXI_XCSU_S_PMATY_COMBI.

  loop at ME->T_TC190 into LS_TC190.
    loop at ME->T_TC192 into LS_TC192
                       where PMATY = LS_TC190-PMATY.
      loop at ME->T_TD101 into LS_TD101
                         where PMATY = LS_TC190-PMATY.
        append initial line to RT_PMATY_COMBI assigning <S_PMATY_COMBI>.
        move-corresponding LS_TC190 to <S_PMATY_COMBI>.

        BREAK HARDCODED_UNIT_KFISCHER.
        case LS_TC190-ISVCE.
          when 'PACKMAT_P' or 'PACKMAT_S_P' or 'CPM_P'.
            if IF_SYSOM eq /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
              move 'ST' to <S_PMATY_COMBI>-PMQTY_UOM.
            elseif IF_SYSOM eq /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
              move 'ST' to <S_PMATY_COMBI>-PMQTY_UOM.
            endif.
          when 'PACKMAT_L'.
            if IF_SYSOM eq /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
              move 'M' to <S_PMATY_COMBI>-PMQTY_UOM.
            elseif IF_SYSOM eq /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
              move 'FT' to <S_PMATY_COMBI>-PMQTY_UOM.
            endif.
          when 'PACKMAT_W'.
            if IF_SYSOM eq /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
              move 'KG' to <S_PMATY_COMBI>-PMQTY_UOM.
            elseif IF_SYSOM eq /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
              move 'LB' to <S_PMATY_COMBI>-PMQTY_UOM.
            endif.
          when 'PACKMAT_A'.
            if IF_SYSOM eq /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_METRIC.
              move 'M2' to <S_PMATY_COMBI>-PMQTY_UOM.
            elseif IF_SYSOM eq /VCXI/CL_VKSR_RUNTIME=>C_SYSOM_IMPERIAL.
              move 'FT2' to <S_PMATY_COMBI>-PMQTY_UOM.
            endif.
        endcase.
        move-corresponding LS_TC192 to <S_PMATY_COMBI>.
        move-corresponding LS_TD101 to <S_PMATY_COMBI>.
      endloop.
    endloop.
  endloop.

endmethod.
method GET_PMATY_FOR_ISVCE.

  data:          LS_TC190  type YS_TC190.
  field-symbols: <S_PMATY> type ZVCXI_XCSU_S_PMATY.

  loop at ME->T_TC190 into LS_TC190 where ISVCE eq IF_ISVCE.

    append initial line to RT_PMATY assigning <S_PMATY>.
    <S_PMATY>-PMATY = LS_TC190-PMATY.
    <S_PMATY>-DESCR = LS_TC190-DESCR.

  endloop.

endmethod.
method GET_PMATY_FOR_SHUNT.

  data:          LS_TC182  type ZVCXI_XCS_TC182,
                 LS_TC190  type YS_TC190.
  field-symbols: <S_PMATY> type ZVCXI_XCSU_S_PMATY.

*** Get Packaging Material Type for Shipping Unit
  loop at ME->T_TC182 into LS_TC182.
    if IF_SHUNT is not initial.
      check LS_TC182-SHUNT eq IF_SHUNT.
    endif.

*** Get Packaging Material Type Information
    read table ME->T_TC190 into LS_TC190 with key PMATY = LS_TC182-PMATY.
    check SY-SUBRC = 0.

    append initial line to RT_PMATY assigning <S_PMATY>.
    <S_PMATY>-PMATY = LS_TC190-PMATY.
    <S_PMATY>-DESCR = LS_TC190-DESCR.

  endloop.

endmethod.
method GET_PMATY_SET_FOR_SHUNT.

  move ME->T_TC183 to RT_SHUNT_PMATY.

  delete RT_SHUNT_PMATY where SHUNT ne IF_SHUNT.
  sort RT_SHUNT_PMATY by SEQUE.

endmethod.
  method GET_PMQTY_BY_CONSC.

    RS_PMQTY = value #( ME->T_TC150[ CONSC = IF_CONSC ]-S_PMQTY optional ).

  endmethod.
  method GET_PRQTY_BY_PACKP.

*** Stacking Pattern
    if LINE_EXISTS( T_TC141[ PACKP = IF_PACKP ] ).
      RS_PRQTY-PRQTY     = ME->GET_NUMBER_STACKS( IF_PACKP = IF_PACKP ).
      RS_PRQTY-PRQTY_UOM = 'ST'.
    endif.

*** Roll Pattern
    if LINE_EXISTS( T_TC143[ PACKP = IF_PACKP ] ).
      RS_PRQTY-PRQTY     = ME->GET_NUMBER_ROLLS( IF_PACKP = IF_PACKP ).
      RS_PRQTY-PRQTY_UOM = 'ST'.
    endif.

  endmethod.
method GET_RISEQ_FOR_SHSCH.

  data: LS_TC160 type YS_TC160.

  read table ME->T_TC160 into LS_TC160 with key SHSCH = IF_SHSCH.
  if SY-SUBRC eq 0.
    RF_FRSEQ = LS_TC160-FRSEQ.
  endif.

endmethod.
  method GET_SAPOS.

    check line_exists( ME->T_TC107[ SAPOS = IF_SAPOS ] ).

    ES_SAQTY = ME->T_TC107[ SAPOS = IF_SAPOS ]-S_SAQTY.

  endmethod.
method GET_SHSCH_COMBI.

  data:          LS_TC161        type ZVCXI_XCS_TC161.
  field-symbols: <S_SHSCH_COMBI> type ZVCXI_XCSU_S_SHSCH_COMBI.

  loop at ME->T_TC161 into LS_TC161.
    append initial line to RT_SHSCH_COMBI assigning <S_SHSCH_COMBI>.
    move-corresponding LS_TC161 to <S_SHSCH_COMBI>.
  endloop.

endmethod.
  method GET_SHSCH_FOR_MODEL.

    data: LS_TC161 type ZVCXI_XCS_TC161,
          LS_TC160 type YS_TC160.
    field-symbols: <S_SHSCH> type ZVCXI_XCSU_S_SHSCH.


    loop at ME->T_TC161 into LS_TC161 where CMATN eq IF_CMATN
                                       and  PRFID eq IF_PRFID
                                       and ( CNTXT eq IF_CNTXT or
                                             CNTXT is initial ).
      clear LS_TC160.
      read table ME->T_TC160 into LS_TC160 with key SHSCH = LS_TC161-SHSCH.
      check SY-SUBRC eq 0.

      collect value ZVCXI_XCSU_S_SHSCH( SHSCH = LS_TC160-SHSCH
                                        DESCR = LS_TC160-DESCR ) into RT_SHSCH.

    endloop.
    sort RT_SHSCH by SHSCH.

  endmethod.
method GET_SHUNT_COMBI.

  data:          LS_TC181        type ZVCXI_XCS_TC181.
  field-symbols: <S_SHUNT_COMBI> type ZVCXI_XCSU_S_SHUNT_COMBI.

  loop at ME->T_TC181 into LS_TC181.
    append initial line to RT_SHUNT_COMBI assigning <S_SHUNT_COMBI>.
    move-corresponding LS_TC181 to <S_SHUNT_COMBI>.
  endloop.

endmethod.
method GET_SHUNT_FOR_SHUTY.

  data:          LS_TC180  type YS_TC180.
  field-symbols: <S_SHUNT> type ZVCXI_XCSU_S_SHUNT.

  loop at ME->T_TC180 into LS_TC180.
    if IF_SHUTY is not initial.
      check LS_TC180-SHUTY eq IF_SHUTY.
    endif.

    append initial line to RT_SHUNT assigning <S_SHUNT>.
    <S_SHUNT>-SHUNT = LS_TC180-SHUNT.
    <S_SHUNT>-DESCR = LS_TC180-DESCR.

  endloop.

endmethod.
method GET_SHUTY_COMBI.

  data:          LS_TC180        type ZVCXI_XCS_TC180.
  field-symbols: <S_SHUTY_COMBI> type ZVCXI_XCSU_S_SHUTY_COMBI.

  loop at ME->T_TC180 into LS_TC180.
    append initial line to RT_SHUTY_COMBI assigning <S_SHUTY_COMBI>.
    move-corresponding LS_TC180 to <S_SHUTY_COMBI>.
  endloop.

endmethod.
method GET_SHUTY_FOR_SHSCH.

  data:          LS_TC162  type ZVCXI_XCS_TC162,
                 LS_TC170  type YS_TC170.
  field-symbols: <S_SHUTY> type ZVCXI_XCSU_S_SHUTY.

*** Get Shipping Sheme for Schipping Unit Type
  loop at ME->T_TC162 into LS_TC162.
    if IF_SHSCH is not initial.
      check LS_TC162-SHSCH eq IF_SHSCH.
    endif.

*** Get Shipping Unit Type Information
    read table ME->T_TC170 into LS_TC170 with key SHUTY = LS_TC162-SHUTY.
    check SY-SUBRC = 0.

    append initial line to RT_SHUTY assigning <S_SHUTY>.
    <S_SHUTY>-SHUTY = LS_TC170-SHUTY.
    <S_SHUTY>-DESCR = LS_TC170-DESCR.

  endloop.

endmethod.
method GET_SHUTY_SET_FOR_SHSCH.

  move ME->T_TC162 to RT_SHSCH_SHUTY.

  delete RT_SHSCH_SHUTY where SHSCH ne IF_SHSCH.
  sort RT_SHSCH_SHUTY by SEQUE.

endmethod.
method GET_STRAPPING_PATTERN.

  read table ME->T_TC151 into RS_STRAP with key CONSC = IF_CONSC.

endmethod.
method GET_TLABL.

  data:          LS_TLABL  type ZVCXI_XCS_TC101,
                 LS_TC103  type ZVCXI_XCS_TC103.
  data:          LT_TC104  type YT_TC104.

*** Return all Label Types
  move T_TC101 to RT_TLABL.

  check IF_WERKS is not initial.

*** Filter by Plant active?
  read table ME->T_TC103 into LS_TC103
                         with key WERKS = IF_WERKS
                                  FRLAT = ABAP_TRUE.

  if SY-SUBRC ne 0.
    read table ME->T_TC103 into LS_TC103
                           with key WERKS = SPACE
                                    FRLAT = ABAP_TRUE.
  endif.

  check SY-SUBRC eq 0.

*** Reduce not relevant restrictions
  move ME->T_TC104 to LT_TC104.
  delete LT_TC104 where WERKS ne LS_TC103-WERKS.

*** Reduce result by restrictions
  loop at RT_TLABL into LS_TLABL.
    read table LT_TC104 with key TLABL = LS_TLABL-TLABL
                        transporting no fields.
    check SY-SUBRC ne 0.
    delete RT_TLABL.
  endloop.

endmethod.
method GET_TLABL_DESCR.

  data: LS_TC101T type ZVCXI_XCS_TC101T.

  read table T_TC101T into LS_TC101T
  with key TLABL = IF_TLABL
           LANGU = SY-LANGU.

  check SY-SUBRC = 0.
  move LS_TC101T-DESCR to RF_DESCR.

endmethod.
  method GET_UNIT_DIMEN.

*** Get Length of Unit
    if LINE_EXISTS( IT_UNIT_DIMEN[ DIMEN = C_DIMEN_LENGTH ] ).
      ES_UNIT_LEN = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_UNIT_DIMEN
                                               IF_DIMEN = C_DIMEN_LENGTH
                                               IF_UOM   = IF_LEN_UOM ).
    else.
***   Try first to get Diameter of "Roll"
      if LINE_EXISTS( IT_UNIT_DIMEN[ DIMEN = C_DIMEN_DIAMETER ] ).
        ES_UNIT_LEN = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_UNIT_DIMEN
                                           IF_DIMEN = C_DIMEN_DIAMETER
                                           IF_UOM   = IF_LEN_UOM ).
      else.
        CF_ERROR = ABAP_TRUE.
      endif.
    endif.

*** Get Width of Unit
    if LINE_EXISTS( IT_UNIT_DIMEN[ DIMEN = C_DIMEN_WIDTH ] ).
      ES_UNIT_WID = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_UNIT_DIMEN
                                               IF_DIMEN = C_DIMEN_WIDTH
                                               IF_UOM   = IF_WID_UOM ).
    else.
***   Try first to get Diameter of "Roll"
      if LINE_EXISTS( IT_UNIT_DIMEN[ DIMEN = C_DIMEN_DIAMETER ] ).
        ES_UNIT_WID = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_UNIT_DIMEN
                                           IF_DIMEN = C_DIMEN_DIAMETER
                                           IF_UOM   = IF_WID_UOM ).
      else.
        CF_ERROR = ABAP_TRUE.
      endif.
    endif.

*** Get Height of Unit
    if LINE_EXISTS( IT_UNIT_DIMEN[ DIMEN = C_DIMEN_HEIGHT ] ).
      ES_UNIT_HGT = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_UNIT_DIMEN
                                               IF_DIMEN = C_DIMEN_HEIGHT
                                               IF_UOM   = IF_HGT_UOM ).
    else.
      CF_ERROR = ABAP_TRUE.
    endif.

*** Get Weight of Unit
    if LINE_EXISTS( IT_UNIT_DIMEN[ DIMEN = C_DIMEN_WEIGHT ] ).
      ES_UNIT_WGT = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_UNIT_DIMEN
                                               IF_DIMEN = C_DIMEN_WEIGHT
                                               IF_UOM   = IF_WGT_UOM ).
    else.
      CF_ERROR = ABAP_TRUE.
    endif.

  endmethod.
  method GET_VERTICAL_CONTAINER.

    data: LF_ERROR   type ABAP_BOOL,
          LF_NWID    type ZVCXI_XCSU_DIMVA,
          LF_SPC_WID type ZVCXI_XCSU_DIMVA,
          LF_NLEN    type ZVCXI_XCSU_DIMVA,
          LF_SPC_LEN type ZVCXI_XCSU_DIMVA,
          LF_NWGT    type F,
          LF_NFLL    type F.
    data: LS_UMARG type ZVCXI_XCSU_S_UMARG.


***------------------------------------------------------------------------------------------------
*** Get Dimensions of Container
*** Length
    data(LS_DIM_LEN) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_CONT_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH ).
*** Width
    data(LS_DIM_WID) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_CONT_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH ).
*** Height
    data(LS_DIM_HGT) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_CONT_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT ).
*** Weight
    data(LS_DIM_WGT) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_CONT_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT ).
*** Layer
    data(LS_DIM_LYR) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_CONT_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LAYERS ).

*** if any units are intial, error
    if LS_DIM_LEN-DIMVA_UOM is initial or
       LS_DIM_WID-DIMVA_UOM is initial or
       LS_DIM_HGT-DIMVA_UOM is initial or
       LS_DIM_WGT-DIMVA_UOM is initial.
      LF_ERROR = ABAP_TRUE.
    endif.

*** Clear Values before recalculation
    clear: LS_DIM_LEN-DIMVA,
           LS_DIM_WID-DIMVA,
           LS_DIM_HGT-DIMVA,
           LS_DIM_WGT-DIMVA.

***------------------------------------------------------------------------------------------------
*** Determine Dimensions of previous unit (Roll)
*** Diameter
    data(LS_PRV_DIA) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_PRV_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_DIAMETER
                                            IF_UOM   = LS_DIM_WID-DIMVA_UOM ).
*** Width
    data(LS_PRV_WID) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_PRV_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH
                                            IF_UOM   = LS_DIM_WID-DIMVA_UOM ).
*** Weight
    data(LS_PRV_WGT) = ME->GET_DIMVA_DIMEN( IT_DIMEN = IT_PRV_DIMEN
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT
                                            IF_UOM   = LS_DIM_WGT-DIMVA_UOM ).

***------------------------------------------------------------------------------------------------
*** Determine Limits if present
*** Length
    data(LS_LIM_LEN) = ME->GET_DIMVA_LIMIT( IT_LIMIT = IT_CONT_LIMIT
                                            IF_LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH
                                            IF_UOM   = LS_DIM_LEN-DIMVA_UOM ).
*** Width
    data(LS_LIM_WID) = ME->GET_DIMVA_LIMIT( IT_LIMIT = IT_CONT_LIMIT
                                            IF_LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH
                                            IF_UOM   = LS_DIM_WID-DIMVA_UOM ).
*** Height
    data(LS_LIM_HGT) = ME->GET_DIMVA_LIMIT( IT_LIMIT = IT_CONT_LIMIT
                                            IF_LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT
                                            IF_UOM   = LS_DIM_HGT-DIMVA_UOM ).
*** Weight
    data(LS_LIM_WGT) = ME->GET_DIMVA_LIMIT( IT_LIMIT = IT_CONT_LIMIT
                                            IF_LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT
                                            IF_UOM   = LS_DIM_WGT-DIMVA_UOM ).
*** Layer
    data(LS_LIM_LYR) = ME->GET_DIMVA_LIMIT( IT_LIMIT = IT_CONT_LIMIT
                                            IF_LIMIT = ZCL_VCXI_XCSU_CUST_SHIPU=>C_LIMIT_MAX
                                            IF_DIMEN = ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LAYERS ).

***------------------------------------------------------------------------------------------------
*** Determine Unit Margin
    ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = LS_DIM_LEN-DIMVA_UOM
                                                       IF_UOM_IN    = ME->S_UMARG-UMARG_UOM
                                                       IF_VALUE_IN  = ME->S_UMARG-UMARG
                                             importing EF_VALUE_OUT = LS_UMARG-UMARG
                                                       EF_UOM_OUT   = LS_UMARG-UMARG_UOM ).


***------------------------------------------------------------------------------------------------
*** Determine Rolls on Width
    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA     = LS_LIM_WID-DIMVA
                                 IF_UNIT_DIMVA     = LS_PRV_DIA-DIMVA
                                 IF_UMARG          = LS_UMARG-UMARG
                       importing EF_NO_UNITS       = LF_NWID ).

*** Determine Rolls on Length
    ME->CALC_NO_UNITS( exporting IF_CONT_DIMVA     = LS_LIM_LEN-DIMVA
                                 IF_UNIT_DIMVA     = LS_PRV_DIA-DIMVA
                                 IF_UMARG          = LS_UMARG-UMARG
                       importing EF_NO_UNITS       = LF_NLEN ).

*** Determine the number of layers
    if LS_PRV_WID-DIMVA gt 0.
      LS_DIM_LYR-DIMVA = FLOOR( LS_LIM_HGT-DIMVA / LS_PRV_WID-DIMVA ).
      if LS_DIM_LYR-DIMVA gt LS_LIM_LYR-DIMVA.
        LS_DIM_LYR-DIMVA = LS_LIM_LYR-DIMVA.
      endif.
    else.
      LF_ERROR = ABAP_TRUE.
    endif.

*** Determine the number of rolls based on Weight
    if LS_PRV_WGT-DIMVA gt 0.
      LF_NWGT = FLOOR( LS_LIM_WGT-DIMVA / LS_PRV_WGT-DIMVA ).
    else.
      LF_ERROR = ABAP_TRUE.
    endif.

***------------------------------------------------------------------------------------------------
*** Calculate Dimensions
    LF_NFLL = LF_NWID * LF_NLEN * LS_DIM_LYR-DIMVA.    "Width * Length * Layer

    if LF_NFLL lt LF_NWGT.    "Weight Limit not reached
***   Calculate Width and Length considering Margin
      LS_DIM_WID-DIMVA = ( LS_PRV_DIA-DIMVA * LF_NWID ) + ( LS_UMARG-UMARG * ( LF_NWID - 1 ) ).
      LS_DIM_LEN-DIMVA = ( LS_PRV_DIA-DIMVA * LF_NLEN ) + ( LS_UMARG-UMARG * ( LF_NLEN - 1 ) ).
      LS_DIM_HGT-DIMVA = LS_PRV_WID-DIMVA * LS_DIM_LYR-DIMVA.
      EF_NUNIT = LF_NFLL.
    else.
      break TBD.  "What's the rule to fill a truck if weight limit is reached?
      EF_NUNIT = LF_NWGT.
    endif.

*** Calculate Weight
    LS_DIM_WGT-DIMVA = LS_PRV_WGT-DIMVA * EF_NUNIT.

***------------------------------------------------------------------------------------------------
*** Collect Dimensions into Output Dimensions
    ET_CONT_DIMEN = IT_CONT_DIMEN.
    if LF_ERROR ne ABAP_TRUE.
      loop at ET_CONT_DIMEN assigning field-symbol(<S_DIMEN>).
        <S_DIMEN>-S_DIMVA = switch #( <S_DIMEN>-DIMEN when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LENGTH    then LS_DIM_LEN
                                                      when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WIDTH     then LS_DIM_WID
                                                      when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_HEIGHT    then LS_DIM_HGT
                                                      when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_WEIGHT    then LS_DIM_WGT
                                                      when ZCL_VCXI_XCSU_CUST_SHIPU=>C_DIMEN_LAYERS    then LS_DIM_LYR ).
      endloop.
    else.
      loop at ET_CONT_DIMEN assigning <S_DIMEN>.
        <S_DIMEN>-DIMVA = 0.
      endloop.
      move 0 to EF_NUNIT.
    endif.

  endmethod.
method IS_PM_REQ.

  data:          LS_TC180  type YS_TC180.

  read table ME->T_TC180 into LS_TC180
                         with key SHUNT = IF_SHUNT.

  check SY-SUBRC = 0.
  move LS_TC180-FREPM to RF_REQUIRED.

endmethod.
method LOAD_CONSC.

  data:          LS_DESCR   type                   /VCXI/CKX_S_DESCR,
                 LS_TC150T  type                   ZVCXI_XCS_TC150T.
  data:          LT_DESCR   type                   /VCXI/CKX_TT_DESCR,
                 LT_TC150T  type standard table of ZVCXI_XCS_TC150T.
  field-symbols: <S_TC150>  type                   YS_TC150.


***--------------------------------------------------------------------------------------
*** Get Consumption Scheme incl. Description
  select * from ZVCXI_XCS_TC150
           into table T_TC150.
  select * from ZVCXI_XCS_TC150T
           into table LT_TC150T.

  loop at T_TC150 assigning <S_TC150>.
    loop at LT_TC150T into LS_TC150T
                     where CONSC eq <S_TC150>-CONSC.
      move-corresponding LS_TC150T to LS_DESCR.
      collect LS_DESCR into LT_DESCR.
    endloop.
    try.
        <S_TC150>-DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
      catch /VCXI/CX_CKX.
        clear: <S_TC150>-DESCR.
    endtry.
    clear: LT_DESCR.
  endloop.

***--------------------------------------------------------------------------------------
*** Get Consumption Scheme - Wrapping& Strapping
  select * from ZVCXI_XCS_TC151
           into table T_TC151.

*** Get Consumption Scheme - Pallet Pattern
  select * from ZVCXI_XCS_TC152
           into table T_TC152.

*** Get Consumption Scheme - Plant Restrictions
  select * from ZVCXI_XCS_TC153
           into table T_TC153.

endmethod.
method LOAD_DIMEN.

  data:          LS_DESCR   type                   /VCXI/CKX_S_DESCR,
                 LS_TC110T  type                   ZVCXI_XCS_TC110T.
  data:          LT_DESCR   type                   /VCXI/CKX_TT_DESCR,
                 LT_TC110T  type standard table of ZVCXI_XCS_TC110T.
  field-symbols: <S_TC110>  type                   YS_TC110.


***--------------------------------------------------------------------------------------
*** Get Dimensions incl. Description
  select * from ZVCXI_XCS_TC110
           into table T_TC110.
  select * from ZVCXI_XCS_TC110T
           into table LT_TC110T.

  loop at T_TC110 assigning <S_TC110>.
    loop at LT_TC110T into LS_TC110T
                     where DIMEN eq <S_TC110>-DIMEN.
      move-corresponding LS_TC110T to LS_DESCR.
      collect LS_DESCR into LT_DESCR.
    endloop.
    try.
        <S_TC110>-DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
      catch /VCXI/CX_CKX.
        clear: <S_TC110>-DESCR.
    endtry.
    clear: LT_DESCR.
  endloop.

endmethod.
method LOAD_EFFCT.

  data:          LS_DESCR   type                   /VCXI/CKX_S_DESCR,
                 LS_TC130T  type                   ZVCXI_XCS_TC130T.
  data:          LT_DESCR   type                   /VCXI/CKX_TT_DESCR,
                 LT_TC130T  type standard table of ZVCXI_XCS_TC130T.
  field-symbols: <S_TC130>  type                   YS_TC130.


***--------------------------------------------------------------------------------------
*** Get Effects incl. Description
  select * from ZVCXI_XCS_TC130
           into table T_TC130.
  select * from ZVCXI_XCS_TC130T
           into table LT_TC130T.

  loop at T_TC130 assigning <S_TC130>.
    loop at LT_TC130T into LS_TC130T
                     where EFFCT eq <S_TC130>-EFFCT.
      move-corresponding LS_TC130T to LS_DESCR.
      collect LS_DESCR into LT_DESCR.
    endloop.
    try.
        <S_TC130>-DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
      catch /VCXI/CX_CKX.
        clear: <S_TC130>-DESCR.
    endtry.
    clear: LT_DESCR.
  endloop.

***--------------------------------------------------------------------------------------
*** Get Effects - Limits
  select * from ZVCXI_XCS_TC131
           into table T_TC131.

endmethod.
method LOAD_LIMIT.

  data:          LS_DESCR   type                   /VCXI/CKX_S_DESCR,
                 LS_TC120T  type                   ZVCXI_XCS_TC120T.
  data:          LT_DESCR   type                   /VCXI/CKX_TT_DESCR,
                 LT_TC120T  type standard table of ZVCXI_XCS_TC120T.
  field-symbols: <S_TC120>  type                   YS_TC120.


***--------------------------------------------------------------------------------------
*** Get Limits incl. Description
  select * from ZVCXI_XCS_TC120
    into table T_TC120.
  select * from ZVCXI_XCS_TC120T
    into table LT_TC120T.

  loop at T_TC120 assigning <S_TC120>.
    loop at LT_TC120T into LS_TC120T
      where LIMIT = <S_TC120>-LIMIT.
      move-corresponding LS_TC120T to LS_DESCR.
      collect LS_DESCR into LT_DESCR.
    endloop.
    try.
        <S_TC120>-DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
      catch /VCXI/CX_CKX.
        clear: <S_TC120>-DESCR.
    endtry.
    clear: LT_DESCR.
  endloop.

endmethod.
method LOAD_PACKP.

  data:          LS_DESCR   type                   /VCXI/CKX_S_DESCR,
                 LS_TC140T  type                   ZVCXI_XCS_TC140T.
  data:          LT_DESCR   type                   /VCXI/CKX_TT_DESCR,
                 LT_TC140T  type standard table of ZVCXI_XCS_TC140T.
  field-symbols: <S_TC140>  type                   YS_TC140.


***--------------------------------------------------------------------------------------
*** Get Packing Pattern incl. Description
  select * from ZVCXI_XCS_TC140
           into table T_TC140.
  select * from ZVCXI_XCS_TC140T
           into table LT_TC140T.

  loop at T_TC140 assigning <S_TC140>.
    loop at LT_TC140T into LS_TC140T
                     where PACKP eq <S_TC140>-PACKP.
      move-corresponding LS_TC140T to LS_DESCR.
      collect LS_DESCR into LT_DESCR.
    endloop.
    try.
        <S_TC140>-DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
      catch /VCXI/CX_CKX.
        clear: <S_TC140>-DESCR.
    endtry.
    clear: LT_DESCR.
  endloop.

***--------------------------------------------------------------------------------------
*** Get Packing Pattern - Stacking Pattern
  select * from ZVCXI_XCS_TC141
           into table T_TC141.

*** Get Packing Pattern - Plant Restrictions
  select * from ZVCXI_XCS_TC142
           into table T_TC142.

*** Get Packing Pattern - Roll Pattern
  select * from ZVCXI_XCS_TC143
           into table T_TC143.

endmethod.
method LOAD_PMATY.

  data:          LS_DESCR   type                   /VCXI/CKX_S_DESCR,
                 LS_TC190T  type                   ZVCXI_XCS_TC190T.
  data:          LT_DESCR   type                   /VCXI/CKX_TT_DESCR,
                 LT_TC190T  type standard table of ZVCXI_XCS_TC190T.
  field-symbols: <S_TC190>  type                   YS_TC190.

***--------------------------------------------------------------------------------------
*** Get Packaging Material Type incl. Description
  select * from ZVCXI_XCS_TC190
           into table T_TC190.
  select * from ZVCXI_XCS_TC190T
           into table LT_TC190T.

  loop at T_TC190 assigning <S_TC190>.
    loop at LT_TC190T into LS_TC190T
                     where PMATY eq <S_TC190>-PMATY.
      move-corresponding LS_TC190T to LS_DESCR.
      collect LS_DESCR into LT_DESCR.
    endloop.
    try.
        <S_TC190>-DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
      catch /VCXI/CX_CKX.
        clear: <S_TC190>-DESCR.
    endtry.
    clear: LT_DESCR.
  endloop.

***--------------------------------------------------------------------------------------
*** Get Packaging Material Type - Effect
  select * from ZVCXI_XCS_TC191
           into table T_TC191.

*** Get Packaging Material Type - Consumption Scheme
  select * from ZVCXI_XCS_TC192
           into table T_TC192.

endmethod.
method LOAD_SHSCH.

  data:          LS_DESCR   type                   /VCXI/CKX_S_DESCR,
                 LS_TC160T  type                   ZVCXI_XCS_TC160T.
  data:          LT_DESCR   type                   /VCXI/CKX_TT_DESCR,
                 LT_TC160T  type standard table of ZVCXI_XCS_TC160T.
  field-symbols: <S_TC160>  type                   YS_TC160.


***--------------------------------------------------------------------------------------
*** Get Shipping Scheme incl. Description
  select * from ZVCXI_XCS_TC160
           into table T_TC160.
  select * from ZVCXI_XCS_TC160T
           into table LT_TC160T.

  loop at T_TC160 assigning <S_TC160>.
    loop at LT_TC160T into LS_TC160T
                     where SHSCH eq <S_TC160>-SHSCH.
      move-corresponding LS_TC160T to LS_DESCR.
      collect LS_DESCR into LT_DESCR.
    endloop.
    try.
        <S_TC160>-DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
      catch /VCXI/CX_CKX.
        clear: <S_TC160>-DESCR.
    endtry.
    clear: LT_DESCR.
  endloop.

***--------------------------------------------------------------------------------------
*** Get Shipping Scheme - Assigned Model
  select * from ZVCXI_XCS_TC161
           into table T_TC161.

*** Get Shipping Scheme - Shipping Unit Type
  select * from ZVCXI_XCS_TC162
           into table T_TC162.

endmethod.
method LOAD_SHUNT.

  data:          LS_DESCR   type                   /VCXI/CKX_S_DESCR,
                 LS_TC180T  type                   ZVCXI_XCS_TC180T.
  data:          LT_DESCR   type                   /VCXI/CKX_TT_DESCR,
                 LT_TC180T  type standard table of ZVCXI_XCS_TC180T.
  field-symbols: <S_TC180>  type                   YS_TC180.


***--------------------------------------------------------------------------------------
*** Get Shipping Unit incl. Description
  select * from ZVCXI_XCS_TC180
           into table T_TC180.
  select * from ZVCXI_XCS_TC180T
           into table LT_TC180T.

  loop at T_TC180 assigning <S_TC180>.
    loop at LT_TC180T into LS_TC180T
                     where SHUNT eq <S_TC180>-SHUNT.
      move-corresponding LS_TC180T to LS_DESCR.
      collect LS_DESCR into LT_DESCR.
    endloop.
    try.
        <S_TC180>-DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
      catch /VCXI/CX_CKX.
        clear: <S_TC180>-DESCR.
    endtry.
    clear: LT_DESCR.
  endloop.

***--------------------------------------------------------------------------------------
*** Get Shipping Unit - Packing Material Type
  select * from ZVCXI_XCS_TC181
           into table T_TC181.

*** Get Shipping Unit - Packing Pattern
  select * from ZVCXI_XCS_TC182
           into table T_TC182.

*** Get Shipping Unit - Sequence
  select * from ZVCXI_XCS_TC183
           into table T_TC183.

endmethod.
method LOAD_SHUTY.

  data:          LS_DESCR   type                   /VCXI/CKX_S_DESCR,
                 LS_TC170T  type                   ZVCXI_XCS_TC170T.
  data:          LT_DESCR   type                   /VCXI/CKX_TT_DESCR,
                 LT_TC170T  type standard table of ZVCXI_XCS_TC170T.
  field-symbols: <S_TC170>  type                   YS_TC170.


***--------------------------------------------------------------------------------------
*** Get Shipping Unit Type incl. Description
  select * from ZVCXI_XCS_TC170
           into table T_TC170.
  select * from ZVCXI_XCS_TC170T
           into table LT_TC170T.

  loop at T_TC170 assigning <S_TC170>.
    loop at LT_TC170T into LS_TC170T
                     where SHUTY eq <S_TC170>-SHUTY.
      move-corresponding LS_TC170T to LS_DESCR.
      collect LS_DESCR into LT_DESCR.
    endloop.
    try.
        <S_TC170>-DESCR = /VCXI/CL_CKX_SERVICE=>GET_DESCR_TRANSLATION( IT_DESCR = LT_DESCR ).
      catch /VCXI/CX_CKX.
        clear: <S_TC170>-DESCR.
    endtry.
    clear: LT_DESCR.
  endloop.

***--------------------------------------------------------------------------------------
*** Get Shipping Unit Type - Dimension
  select * from ZVCXI_XCS_TC171
           into table T_TC171.

*** Get Shipping Unit Type - Limit
  select * from ZVCXI_XCS_TC172
           into table T_TC172.

*** Get Shipping Unit Type - Rounding Option
  select * from ZVCXI_XCS_TC173
           into table T_TC173.

endmethod.
method RAISE_CONV_ERROR_CUB1D_DIMEN.

*** Conversion Error - Cube (1Dir.) Container - Dimen &1
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                        IF_MSGID = 'ZVCXI_XCSU'
                                        IF_MSGNO = '513'
                                        IF_MSGV1 = IF_DIMEN ).
endmethod.
method RAISE_CONV_ERROR_CUB1D_MARGIN.

*** Conversion Error - Cube (1Dir.) Container - Margin
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                        IF_MSGID = 'ZVCXI_XCSU'
                                        IF_MSGNO = '514' ).
endmethod.
method RAISE_CONV_ERROR_CUBED_DIMEN.

*** Conversion Error - Cube Container - Dimen &1
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                        IF_MSGID = 'ZVCXI_XCSU'
                                        IF_MSGNO = '515'
                                        IF_MSGV1 = IF_DIMEN ).
endmethod.
method RAISE_CONV_ERROR_CUBED_MARGIN.

*** Conversion Error - Cube Container - Margin
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                        IF_MSGID = 'ZVCXI_XCSU'
                                        IF_MSGNO = '516' ).
endmethod.
  method RAISE_CONV_ERROR_ROLL_MARGIN.

*** Conversion Error - Packing Pattern Footprint - Roll Margin
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCSU'
                                          IF_MSGNO = '517' ).
  endmethod.
method RAISE_CONV_ERROR_STACK_MARGIN.

*** Conversion Error - Packing Pattern Footprint - Stack Margin
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                        IF_MSGID = 'ZVCXI_XCSU'
                                        IF_MSGNO = '511' ).
endmethod.
method RAISE_CONV_ERROR_WIDTH.

*** Conversion Error - Packing Pattern Footprint - Dimension Width
  /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                        IF_MSGID = 'ZVCXI_XCSU'
                                        IF_MSGNO = '512' ).

endmethod.
method ROUND_QTY.

  data:          LF_CALCV       type ZVCXI_XCSU_PRQTY,
                 LF_CALCV_INT   type I.
  data:          LT_TC173       type YT_TC173.
  data:          LS_TC173       type ZVCXI_XCS_TC173.
  field-symbols: <F_CALCV>      type ZVCXI_XCSU_PRQTY.


*** Search for full Key
  move T_TC173 to LT_TC173.
  delete LT_TC173 where SHUTY ne IF_SHUTY
                     or SHUNT ne IF_SHUNT
                     or WERKS ne IF_WERKS.

*** Search only with Shipping Unit Type and Shipping Unit
  if LT_TC173 is initial.
    move T_TC173 to LT_TC173.
    delete LT_TC173 where SHUTY ne IF_SHUTY
                       or SHUNT ne IF_SHUNT
                       or WERKS ne ''.

*** Search only with Shipping Unit Type
    if LT_TC173 is initial.
      move T_TC173 to LT_TC173.
      delete LT_TC173 where SHUTY ne IF_SHUTY
                         or SHUNT ne ''
                         or WERKS ne ''.
      if LT_TC173 is initial.
***     Nothing Found -> Exit.
        exit.
      endif.
    endif.
  endif.

  read table LT_TC173 into LS_TC173 index 1.
  if IF_CUSTO eq ABAP_TRUE.
    check LS_TC173-FORCD eq ABAP_TRUE.
  endif.

  assign CF_QTY to <F_CALCV>.

*** Devide Quantity by Increment
  check <F_CALCV> ne 0.
  LF_CALCV = <F_CALCV> / LS_TC173-CINCR.

  case LS_TC173-OROUN.
    when 'U'.
      LF_CALCV_INT = ceil( LF_CALCV ).

    when 'D'.
      LF_CALCV_INT = floor( LF_CALCV ).

    when 'C'.
      move LF_CALCV to LF_CALCV_INT.

  endcase.

  check LF_CALCV_INT is not initial.
  CF_QTY = LF_CALCV_INT * LS_TC173-CINCR.

endmethod.
  method SET_CONFIG_MODEL_SETTINGS.

    data: LS_SHUTY type ZVCXI_XCSU_S_SHUTY,
          LS_PMATY type ZVCXI_XCSU_S_PMATY,
          LS_SHUNT type ZVCXI_XCSU_S_SHUNT.
    data: LT_SHUTY_SHSCH type ZVCXI_XCSU_TT_SHUTY,
          LT_PMATY_HU    type ZVCXI_XCSU_TT_PMATY,
          LT_SHUNT       type ZVCXI_XCSU_TT_SHUNT.


    move IF_DIMID           to ME->F_DIMID.
    move IS_UMARG           to ME->S_UMARG.

    clear: ME->F_SHUTY_STACK,
           ME->T_SHUTY_UNIT,
           ME->T_SHUTY_HU,
           ME->F_SHUTY_CONTAINER,
           ME->T_PMATY_PALLET.

*** Get Shipping Units for Shipping Scheme
    LT_SHUTY_SHSCH = ME->GET_SHUTY_FOR_SHSCH( IF_SHSCH = IF_SHSCH ).

*** Set Shipping Unit Type Stack
    loop at IT_SHUTY_STACK into LS_SHUTY.
      read table LT_SHUTY_SHSCH with key SHUTY = LS_SHUTY-SHUTY transporting no fields.
      if SY-SUBRC = 0.
        move LS_SHUTY-SHUTY     to ME->F_SHUTY_STACK.
        exit.
      endif.
    endloop.

*** Set Shipping Unit Type for Unitizing Unit
    loop at IT_SHUTY_UNIT into LS_SHUTY.
      check LINE_EXISTS( LT_SHUTY_SHSCH[ SHUTY = LS_SHUTY-SHUTY ] ).
      append LS_SHUTY-SHUTY to ME->T_SHUTY_UNIT.

***   Get Packaging Material Types for Shipping Unit Unit
      LT_SHUNT = ME->GET_SHUNT_FOR_SHUTY( IF_SHUTY = LS_SHUTY-SHUTY ).
      loop at LT_SHUNT into LS_SHUNT.

        LT_PMATY_HU = ME->GET_PMATY_FOR_SHUNT( IF_SHUNT = LS_SHUNT-SHUNT ).
        loop at IT_PMATY_PALLET into LS_PMATY.
          read table LT_PMATY_HU with key PMATY = LS_PMATY-PMATY transporting no fields.
          check SY-SUBRC = 0.
          append LS_PMATY-PMATY to ME->T_PMATY_PALLET.
        endloop.
      endloop.
    endloop.

*** Set Shipping Unit Type HU
    loop at IT_SHUTY_HU into LS_SHUTY.
      check LINE_EXISTS( LT_SHUTY_SHSCH[ SHUTY = LS_SHUTY-SHUTY ] ).
      append LS_SHUTY-SHUTY to ME->T_SHUTY_HU.
    endloop.

*** Set Shipping Unit Type Container
    loop at IT_SHUTY_CONTAINER into LS_SHUTY.
      read table LT_SHUTY_SHSCH with key SHUTY = LS_SHUTY-SHUTY transporting no fields.
      if SY-SUBRC = 0.
        move LS_SHUTY-SHUTY     to ME->F_SHUTY_CONTAINER.
        exit.
      endif.
    endloop.

  endmethod.
  method SET_DIMVA_DIMEN.

    data: LS_DIMVA type ZVCXI_XCSU_S_DIMVA.


    check LINE_EXISTS( CT_DIMEN[ DIMEN = IF_DIMEN ] ).

*** Convert Unit
    try.
        ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_VALUE_IN  = IS_DIMVA-DIMVA
                                                           IF_UOM_IN    = IS_DIMVA-DIMVA_UOM
                                                           IF_UOM_OUT   = CT_DIMEN[ DIMEN = IF_DIMEN ]-DIMVA_UOM
                                                 importing EF_VALUE_OUT = LS_DIMVA-DIMVA
                                                           EF_UOM_OUT   = LS_DIMVA-DIMVA_UOM ).

      catch /VCXI/CX_CKX.
***     Conversion Error for Dimension &1 from &2 to &3.
        /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                              IF_MSGID = 'ZVCXI_XCSU'
                                              IF_MSGNO = '083'
                                              IF_MSGV1 = IF_DIMEN
                                              IF_MSGV2 = IS_DIMVA-DIMVA_UOM
                                              IF_MSGV3 = CT_DIMEN[ DIMEN = IF_DIMEN ]-DIMVA_UOM ).
    endtry.

*** Set Dimension
    CT_DIMEN[ DIMEN = IF_DIMEN ]-S_DIMVA = LS_DIMVA.

  endmethod.
method SORT_SHUTY_DIMEN.

  data: LS_DIMEN       type line of ZVCXI_XCSU_TT_DIMEN,
        LS_SHUTY_DIMEN type line of ZVCXI_XCSU_TT_SHUTY_DIMEN.
  data: LT_DIMEN       type         ZVCXI_XCSU_TT_DIMEN,
        LT_SHUTY_DIMEN type         ZVCXI_XCSU_TT_SHUTY_DIMEN.

  move CT_DIMEN to LT_DIMEN.
  clear: CT_DIMEN.

  LT_SHUTY_DIMEN = ME->GET_DIMEN_FOR_SHUTY( IF_SHUTY = IF_SHUTY ).

  sort LT_SHUTY_DIMEN by SEQUE.
  loop at LT_SHUTY_DIMEN into LS_SHUTY_DIMEN.
    clear LS_DIMEN.
    read table LT_DIMEN into LS_DIMEN
                    with key DIMEN = LS_SHUTY_DIMEN-DIMEN.
    if SY-SUBRC eq 0.
      append LS_DIMEN to CT_DIMEN.
    endif.
  endloop.

endmethod.
method SORT_SHUTY_LIMIT.

  data: LS_LIMIT       type line of ZVCXI_XCSU_TT_LIMIT,
        LS_SHUTY_LIMIT type line of ZVCXI_XCSU_TT_SHUTY_LIMIT.
  data: LT_LIMIT       type         ZVCXI_XCSU_TT_LIMIT,
        LT_SHUTY_LIMIT type         ZVCXI_XCSU_TT_SHUTY_LIMIT.

  move CT_LIMIT to LT_LIMIT.
  clear: CT_LIMIT.

  LT_SHUTY_LIMIT = ME->GET_LIMIT_FOR_SHUTY( IF_SHUTY = IF_SHUTY ).

  sort LT_SHUTY_LIMIT by SEQUE.
  loop at LT_SHUTY_LIMIT into LS_SHUTY_LIMIT.
    clear LS_LIMIT.
    read table LT_LIMIT into LS_LIMIT
                    with key DIMEN = LS_SHUTY_LIMIT-DIMEN
                             LIMIT = LS_SHUTY_LIMIT-LIMIT.
    if SY-SUBRC eq 0.
      append LS_LIMIT to CT_LIMIT.
    endif.
  endloop.

endmethod.
  method SWITCH_DIMVA.

*** Buffer frist Value
    data(LS_TMP) = CS_DIMVA1.

*** Move Second to First
    CS_DIMVA1 = CS_DIMVA2.

*** Recover First from Buffer as Second
    CS_DIMVA2 = LS_TMP.

  endmethod.
