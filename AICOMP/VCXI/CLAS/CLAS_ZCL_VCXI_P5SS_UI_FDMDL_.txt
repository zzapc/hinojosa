
class ZCL_VCXI_P5SS_UI_FDMDL definition
  public
  inheriting from ZCL_VCXI_PXSS_UI_FDMDL
  create public .

public section.

  constants C_UC_PSCALE type SYUCOMM value 'PSCALE' ##NO_TEXT.
  data S_FDMDL_VIS type ZVCXI_P5SS_S_FDMDL_VIS read-only .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_UPDATE_FDMDL_VIS
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
  methods GET_REGISTERED_UCOMM
    redefinition .
protected section.

  data R_GRID_FD_PRINT type ref to ZCL_VCXI_PXSS_GRID_FD_PRINT .
  data R_GRID_PRINT_COM type ref to ZCL_VCXI_PXSS_GRID_PRINT_COM .

  methods GET_IELEM_BY_SCREEN
    importing
      !IF_GROUP3 type SCREEN-GROUP3
    returning
      value(RF_IELEM) type ZVCXI_P0SS_IELEM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_UC_PSCALE
    raising
      /VCXI/CX_CKX .
  methods MODIFY_SCREEN_CSTEP_SLIT
    changing
      !CS_SCREEN type SCREEN
    raising
      /VCXI/CX_CKX .
  methods MODIFY_SCREEN_RHNDL
    changing
      !CS_SCREEN type SCREEN .
  methods MODIFY_SCREEN_RLFG
    changing
      !CS_SCREEN type SCREEN
    raising
      /VCXI/CX_CKX .
  methods MODIFY_SCREEN_SBSTR
    changing
      !CS_SCREEN type SCREEN
    raising
      /VCXI/CX_CKX .

  methods INIT_VIS
    redefinition .
private section.
endclass. "ZCL_VCXI_P5SS_UI_FDMDL definition
class ZCL_VCXI_P5SS_UI_FDMDL implementation.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Bind UI to Dynpro
    call function 'ZVCXI_P5SS_UI_FDMDL_BIND'
      exporting
        IR_UI_FDMDL = ME
      importing
        ES_DYNP     = ME->S_DYNP.

***--------------------------------------------------------------------------------------
*** Create Grid for Printing (Fast Data)
    create object ME->R_GRID_FD_PRINT
      exporting
        IR_GATE        = ME->R_GATE
        IR_UIGATE      = ME->R_UIGATE
        IF_APPL_EVENTS = ME->F_APPL_EVENTS
        IR_BL_FDMDL    = cast #( ME->R_BL_FDMDL )
        IR_GATE_OUT    = ME->R_GATE_OUT.

  endmethod.
  method DEACTIVATE.

    SUPER->DEACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Free Grid
    if ME->R_GRID_FD_PRINT is bound.
      ME->R_GRID_FD_PRINT->DO_FREE( ).
      clear ME->R_GRID_FD_PRINT.
    endif.

    if ME->R_GRID_PRINT_COM is bound.
      ME->R_GRID_PRINT_COM->DO_FREE( ).
      clear ME->R_GRID_PRINT_COM.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_INUSE  type /VCXI/VKSR_INUSE.


    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

***------------------------------------------------------------------------------------------------
        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

***------------------------------------------------------------------------------------------------
        loop at screen.
          case SCREEN-GROUP1.
***         Finished Good Information
            when 'FG'.
              ME->MODIFY_SCREEN_RLFG( changing CS_SCREEN = SCREEN ).

***         Slitting Information
            when 'SLT'.
              ME->MODIFY_SCREEN_CSTEP_SLIT( changing CS_SCREEN = SCREEN ).

***         Substrate Information
            when 'SBS'.
              ME->MODIFY_SCREEN_SBSTR( changing CS_SCREEN = SCREEN ).

***         Roll Handling
            when 'RHN'.
              ME->MODIFY_SCREEN_RHNDL( changing CS_SCREEN = SCREEN ).

          endcase.

***       Reopen Info Buttons
          if SCREEN-GROUP2 eq 'INF'.
            move 1 to SCREEN-INPUT.
          endif.
          modify screen.

***       Set Cursor
          if SCREEN-NAME eq ME->F_CURSOR.
            set cursor field ME->F_CURSOR.
          endif.
        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

    check ME->R_GATE_OUT is bound and
          ME->R_GATE_OUT->F_FREED is initial.

    SUPER->DO_PBO( ).

*** Refresh Printing Grid
    if ME->R_GRID_FD_PRINT is bound.
      ME->R_GRID_FD_PRINT->F_REFRESH_REQ = ABAP_TRUE.
      ME->R_GRID_FD_PRINT->CHECK_CHANGED_DATA( ).
      ME->R_GRID_FD_PRINT->REFRESH_GRID( ).
    endif.
    if ME->R_GRID_PRINT_COM is bound.
      ME->R_GRID_PRINT_COM->F_REFRESH_REQ = ABAP_TRUE.
      ME->R_GRID_PRINT_COM->CHECK_CHANGED_DATA( ).
      ME->R_GRID_PRINT_COM->REFRESH_GRID( ).
    endif.

*** Toolbar for Finished Goods
    if ME->R_BL_FDMDL->F_IFDMV eq ZCL_VCXI_P5SS_BL_FDMDL=>C_IFDMV_SE_SLIT.
      ME->INIT_CONTAINER( ).
      ME->INIT_TOOLBAR( ).
    endif.

  endmethod.
  method DO_UPDATE_FDMDL_VIS.

    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_XCONG        type ZVCXI_PXSS_TT_XCONG,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    field-symbols: <S_DATA>             type ANY,
                   <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.


    check ME->R_PR_FASTD is bound.

***--------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( exporting IR_BL_FDMDL = ME->R_BL_FDMDL
                                                           importing ET_XCONG    = LT_XCONG ).

*** Find Component of Gate and its linked Components
    LT_GATE_EXCLUDE = ME->R_BL_FDMDL->GET_GATE_EXCLUDE( IR_GATE_OUT    = ME->R_GATE_OUT
                                                        IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Update Fast Data Integration Information based on VIS Structure
    loop at LT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP>-R_GATE ] ).

      loop at <S_FASTD_XCOMP>-T_DATA assigning <S_FASTD_XCOMP_DATA> where R_DATA is bound.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP_DATA>-R_GATE ] ).
        ME->MAPPING_FROM_VIS( exporting IS_FDMDL_VIS        = IS_FDMDL_VIS
                              changing  CS_FASTD_XCOMP_DATA = <S_FASTD_XCOMP_DATA> ).
      endloop.
    endloop.


*** Handling of Slitting outside of Separation
    if ME->R_BL_FDMDL->F_IFDMV ne ZCL_VCXI_P5SS_BL_FDMDL=>C_IFDMV_SE_SLIT.
***   Add/Remove Slitting Step
      cast ZCL_VCXI_P5SS_BL_FDMDL( ME->R_BL_FDMDL )->ADJ_CSTEP_SLIT( exporting IR_GATE_OUT       = ME->R_GATE_OUT
                                                                               IS_FDI_CSTEP_SLIT = corresponding #( IS_FDMDL_VIS )
                                                                     changing  CT_FASTD_XCOMP    = LT_FASTD_XCOMP ).
    endif.

***------------------------------------------------------------------------------------------------
*** Set Configuration Structure
    ME->R_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME->R_BL_FDMDL
                                          IT_FASTD_XCOMP = LT_FASTD_XCOMP
                                          IT_XCONG       = LT_XCONG ).

  endmethod.
  method DO_USER_COMMAND.

***--------------------------------------------------------------------------------------
*** Process Changes in Grid
    if ME->R_GRID_FD_PRINT is bound.
      ME->R_GRID_FD_PRINT->CHECK_CHANGED_DATA( ).
    endif.
    if ME->R_GRID_PRINT_COM is bound.
      ME->R_GRID_PRINT_COM->CHECK_CHANGED_DATA( ).
    endif.

***--------------------------------------------------------------------------------------
*** Call SUPER
    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    case IF_UCOMM.
      when C_UC_PSCALE.
        ME->HANDLE_UC_PSCALE( ).

    endcase.

  endmethod.
  method GET_IELEM_BY_SCREEN.

    RF_IELEM = switch #( IF_GROUP3 when 'PLE' then ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_LENGTH
                                   when 'PWI' then ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_WIDTH
                                   when 'PHE' then ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT
                                   when 'PH2' then ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_HEIGHT2
                                   when 'FDU' then ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FDUST
                                   when 'FTU' then ZCL_VCXI_P0SS_CUST_PRSTY=>C_IELEM_FTUCK ).

  endmethod.
  method GET_REGISTERED_UCOMM.

    RT_UCOMM = value #( ( C_UC_PSCALE )
                        ( C_UC_FOVRR_MAKTX ) ).

  endmethod.
  method HANDLE_UC_PSCALE.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE.


***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = ME->R_BL_FDMDL ).

*** Get Source for Input
    cast ZCL_VCXI_P5SS_BL_FDMDL( ME->R_BL_FDMDL )->GET_SRCIN( exporting IR_GATE_OUT    = ME->R_GATE_OUT
                                                                        IT_FASTD_XCOMP = LT_FASTD_XCOMP
                                                              importing ER_GATE        = LR_GATE ).
*{   REPLACE        HEDK927942                                        1
*\    check LR_GATE->R_CLSPR is instance of ZCL_VCXI_P5SS_PR_MS_RLPROC.
    DATA: LR_RLPROC TYPE REF TO ZCL_VCXI_P5SS_PR_MS_RLPROC.
    TRY .
      LR_RLPROC ?= LR_GATE->R_CLSPR.
     CATCH CX_SY_MOVE_CAST_ERROR.
    ENDTRY.
    check LR_RLPROC IS BOUND.
*}   REPLACE

***--------------------------------------------------------------------------------------
*** Call Popup with Price Scales
    ZCL_VCXI_XCS_POPUP_PSCALE=>START( IR_GATE   = LR_GATE
                                      IR_UIGATE = ME->R_UIGATE
                                      IF_LOCKED = cast ZCL_VCXI_P5SS_PR_MS_RLPROC( LR_GATE->R_CLSPR )->ZIF_VCXI_XCS_PSCALE_MGR~IS_CHANGEABLE( ) ).

  endmethod.
  method INIT_VIS.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    data: LR_GATE_XCOMP_OUT type ref to /VCXI/CL_VKSR_GATE.


    free: ME->S_FDMDL_VIS.
    check ME->R_PR_FASTD is bound.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = ME->R_BL_FDMDL ).

*** Find Component of Gate and its linked Components
    LT_GATE_EXCLUDE = ME->R_BL_FDMDL->GET_GATE_EXCLUDE( IR_GATE_OUT    = ME->R_GATE_OUT
                                                        IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Fill VIS Structure based on Fast Data Integration Information
    loop at LT_FASTD_XCOMP into LS_FASTD_XCOMP.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP-R_GATE ] ).

      loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA where R_DATA is bound.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP_DATA-R_GATE ] ).
        ME->MAPPING_TO_VIS( exporting IS_FASTD_XCOMP_DATA = LS_FASTD_XCOMP_DATA
                            changing  CS_FDMDL_VIS        = ME->S_FDMDL_VIS ).
      endloop.
    endloop.

  endmethod.
  method MODIFY_SCREEN_CSTEP_SLIT.

**** Disable fields if not is nested
*    if SCREEN-GROUP2 eq 'NES' and
*       ME->S_FDMDL_VIS-FNEST ne ABAP_TRUE.
*      move 0 to SCREEN-INPUT.
*    endif.
*
**** Disable fields if tool is released
*    if SCREEN-GROUP3 eq 'TIR' and
*       ME->S_FDMDL_VIS-DCTTN_RELEA eq ABAP_TRUE.
*      move 0 to SCREEN-INPUT.
*    endif.

  endmethod.
  method MODIFY_SCREEN_RHNDL.

***--------------------------------------------------------------------------------------
*** Set Target Fields
    case ABAP_TRUE.
      when ME->S_FDMDL_VIS-FOVRR_RDITA.
        if    CS_SCREEN-GROUP2 eq 'LTA'
           or CS_SCREEN-GROUP2 eq 'WTA' .
          move 0 to CS_SCREEN-INPUT.
        endif.

      when ME->S_FDMDL_VIS-FOVRR_RLETA.
        if    CS_SCREEN-GROUP2 eq 'DTA'
           or CS_SCREEN-GROUP2 eq 'WTA' .
          move 0 to CS_SCREEN-INPUT.
        endif.

      when ME->S_FDMDL_VIS-FOVRR_RWGTA.
        if    CS_SCREEN-GROUP2 eq 'DTA'
           or CS_SCREEN-GROUP2 eq 'LTA' .
          move 0 to CS_SCREEN-INPUT.
        endif.

    endcase.

***--------------------------------------------------------------------------------------
*** Set Minimum - Maximum Fields
    case ABAP_TRUE.
      when ME->S_FDMDL_VIS-FOVRR_RDIMM.
        if    CS_SCREEN-GROUP2 eq 'LMM'
           or CS_SCREEN-GROUP2 eq 'WMM'.
          move 0 to CS_SCREEN-INPUT.
        endif.

      when ME->S_FDMDL_VIS-FOVRR_RLEMM.
        if    CS_SCREEN-GROUP2 eq 'DMM'
           or CS_SCREEN-GROUP2 eq 'WMM'.
          move 0 to CS_SCREEN-INPUT.
        endif.

      when ME->S_FDMDL_VIS-FOVRR_RWGMM.
        if    CS_SCREEN-GROUP2 eq 'DMM'
           or CS_SCREEN-GROUP2 eq 'LMM'.
          move 0 to CS_SCREEN-INPUT.
        endif.

    endcase.

***--------------------------------------------------------------------------------------
*** Set Percentage Fields
    if ME->S_FDMDL_VIS-FOVRR_PERMM eq ABAP_TRUE.
***   Deactivate the min/max groups if percentage is active
      if    CS_SCREEN-GROUP2 eq 'DMM'
         or CS_SCREEN-GROUP2 eq 'LMM'
         or CS_SCREEN-GROUP2 eq 'WMM'.
        move 0 to CS_SCREEN-INPUT.
      endif.
    else.
***   Only set PPM read-only, don't touch the other groups here
      if CS_SCREEN-GROUP2 eq 'PMM'.
        move 0 to CS_SCREEN-INPUT.
      endif.
    endif.

  endmethod.
  method MODIFY_SCREEN_RLFG.

*** Hide Material Description Override Flag if undefined
    if CS_SCREEN-NAME cp '*-FOVRR_MAKTX' and
       ME->S_FDMDL_VIS-FOVRR_MAKTX eq ABAP_UNDEFINED.
      CS_SCREEN-ACTIVE = 0.
    endif.
*** Disable Material Description if generated
    if CS_SCREEN-NAME cp '*-MAKTX' and
       ME->S_FDMDL_VIS-FOVRR_MAKTX eq ABAP_FALSE.
      move 0 to SCREEN-INPUT.
    endif.

*** Hide Customer Material Info if material exists
    if CS_SCREEN-GROUP2 = 'CMI' and
       ME->S_FDMDL_VIS-MATNR is not initial.
      CS_SCREEN-INPUT  = 0.
      CS_SCREEN-ACTIVE = 0.
    endif.

  endmethod.
  method MODIFY_SCREEN_SBSTR.

***------------------------------------------------------------------------------------------------
*** Hide Material Description Override Flag if undefined
    if CS_SCREEN-NAME cp '*-FOVRR_MAKTXXPR' and
       ( ME->S_FDMDL_VIS-FOVRR_MAKTXXPR eq ABAP_UNDEFINED or
         ME->S_FDMDL_VIS-DUMMYXPR eq ABAP_FALSE ).
      move 0 to SCREEN-ACTIVE.
    endif.
*** Disable Material Description if generated
    if CS_SCREEN-NAME cp '*-MAKTXXPR' and
       ME->S_FDMDL_VIS-FOVRR_MAKTXXPR eq ABAP_FALSE.
      move 0 to SCREEN-INPUT.
    endif.

*** If No Dummy Material, then set to read only
    if ME->S_FDMDL_VIS-DUMMYXPR eq ABAP_FALSE.
      if CS_SCREEN-GROUP3 eq 'DUM'.
        CS_SCREEN-INPUT = 0.
      endif.
    else.
***   If Dummy Material set the Prodcurement Option
      if CS_SCREEN-GROUP3 eq 'PUR'.
        CS_SCREEN-INPUT = 0.
      endif.
    endif.

*** Hide Purchasing Infos (e.g Vendor) if not purchased
    if SCREEN-GROUP3 eq 'APU'.  "Acitve Procurement
      case ME->S_FDMDL_VIS-PURCHXPR.
        when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_STOCK.
          move 1 to SCREEN-INVISIBLE.
          move 0 to SCREEN-ACTIVE.
        when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT.
          if SCREEN-GROUP4 eq 'PRC'. "Price
            move 1 to SCREEN-INVISIBLE.
            move 0 to SCREEN-ACTIVE.
          endif.
        when ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
      endcase.
    endif.

*** Hide Price Scale Override Flag if undefined
    if SCREEN-NAME cp '*-FPSMOXPR' and
       ME->S_FDMDL_VIS-FPSMOXPR eq ABAP_UNDEFINED.
      move 0 to SCREEN-ACTIVE.
    endif.

  endmethod.
