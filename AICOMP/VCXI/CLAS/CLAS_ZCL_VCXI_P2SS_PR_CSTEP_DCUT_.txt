
class ZCL_VCXI_P2SS_PR_CSTEP_DCUT definition
  public
  inheriting from ZCL_VCXI_P2SS_PR_CSTEP
  create public .

public section.

  interfaces ZIF_VCXI_XCSS_TUSER .
  interfaces ZIF_VCXI_PXSS_SCORES_AP .
  interfaces ZIF_VCXI_PXSS_DCUT .
  interfaces ZIF_VCXI_PXSS_FDI .

  constants C_PARID_FNEST type /VCXI/VKS_PARID value 'ZVCXI_P0_FNEST' ##NO_TEXT.
  constants C_PARID_ISCAP type /VCXI/VKS_PARID value 'ZVCXI_PX_ISCAP' ##NO_TEXT.
  constants C_PARID_NOUTL type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUTL' ##NO_TEXT.
  constants C_PARID_NOUTT type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUTT' ##NO_TEXT.
  constants C_PARID_NOUTW type /VCXI/VKS_PARID value 'ZVCXI_PX_NOUTW' ##NO_TEXT.
  constants C_PARID_SCORE type /VCXI/VKS_PARID value 'ZVCXI_PX_SCORE' ##NO_TEXT.
  constants C_PARID_SHTNL type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTNL' ##NO_TEXT.
  constants C_PARID_SHTNW type /VCXI/VKS_PARID value 'ZVCXI_P0_SHTNW' ##NO_TEXT.

  methods GET_FNEST
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_FNEST) type ZVCXI_P0SS_FNEST
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUTL) type ZVCXI_PXS_NOUTL
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTT
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUTT) type ZVCXI_PXS_NOUTT
    raising
      /VCXI/CX_CKX .
  methods GET_NOUTW
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RF_NOUTW) type ZVCXI_PXS_NOUTW
    raising
      /VCXI/CX_CKX .
  methods GET_SHTNL
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTNL) type ZVCXI_P0SS_S_SHTNL
    raising
      /VCXI/CX_CKX .
  methods GET_SHTNW
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_SHTNW) type ZVCXI_P0SS_S_SHTNW
    raising
      /VCXI/CX_CKX .
  methods SET_DCTTD
    importing
      !IF_DCTTD type ZVCXI_PXS_DCTTD optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_DCTTN
    importing
      !IF_DCTTN type ZVCXI_PXS_DCTTN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FNEST
    importing
      !IF_FNEST type ZVCXI_P0SS_FNEST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTL
    importing
      !IF_NOUTL type ZVCXI_PXS_NOUTL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTT
    importing
      !IF_NOUTT type ZVCXI_PXS_NOUTT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_NOUTW
    importing
      !IF_NOUTW type ZVCXI_PXS_NOUTW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_RULEN
    importing
      !IS_RULEN type ZVCXI_PXS_S_RULEN
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTDI
    importing
      !IF_SHTDI type ZVCXI_P0SS_SHTDI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTNL
    importing
      !IS_SHTNL type ZVCXI_P0SS_S_SHTNL
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_SHTNW
    importing
      !IS_SHTNW type ZVCXI_P0SS_S_SHTNW
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TDCUT
    importing
      !IF_TDCUT type ZVCXI_P0SS_TDCUT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TRBOT
    importing
      !IS_TRBOT type ZVCXI_PXS_S_TRBOT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRLEF
    importing
      !IS_TRLEF type ZVCXI_PXS_S_TRLEF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRLET
    importing
      !IS_TRLET type ZVCXI_PXS_S_TRLET
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRRIG
    importing
      !IS_TRRIG type ZVCXI_PXS_S_TRRIG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRTOP
    importing
      !IS_TRTOP type ZVCXI_PXS_S_TRTOP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .
  methods SET_TRWIT
    importing
      !IS_TRWIT type ZVCXI_PXS_S_TRWIT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'USER'
    raising
      /VCXI/CX_CKX .

  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods ZIF_VCXI_P2SS_COMM_NEXT~GET_FCFPX
    redefinition .
  methods ZIF_VCXI_P2SS_COMM_PREV~GET_FCBPX
    redefinition .
  methods ZIF_VCXI_P2SS_COMM_PREV~GET_NOUPS
    redefinition .
  methods ZIF_VCXI_XCS_NGREP~FILL
    redefinition .
protected section.

  constants C_IEVNT_I_ADJUST_ISCAP type /VCXI/VKSC_IEVNT value 'ADJUST_ISCAP' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_DCTTD type /VCXI/VKSC_IEVNT value 'RECALC_DCTTD' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_NOUTT type /VCXI/VKSC_IEVNT value 'RECALC_NOUTT' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SCORE type /VCXI/VKSC_IEVNT value 'RECALC_SCORE' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_SHTN type /VCXI/VKSC_IEVNT value 'RECALC_SHTN' ##NO_TEXT.
  constants C_IEVNT_O_FNEST_CHANGED type /VCXI/VKSC_IEVNT value 'FNEST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_ISCAP_CHANGED type /VCXI/VKSC_IEVNT value 'ISCAP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_NOUT_CHANGED type /VCXI/VKSC_IEVNT value 'NOUT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SCORE_CHANGED type /VCXI/VKSC_IEVNT value 'SCORE_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_SHTN_CHANGED type /VCXI/VKSC_IEVNT value 'SHTN_CHANGED' ##NO_TEXT.

  methods CHECK_NOUT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_SHTN
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TDCUT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TOOL_DATA
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TRLET
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods CHECK_TRWIT
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_ELMST) type /VCXI/VKSR_ELMST
    raising
      /VCXI/CX_CKX .
  methods GET_ISCAP
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_ISCAP type ZVCXI_PXS_ISCAP
      !EF_FAALL type ZVCXI_PXSS_FAALL
    returning
      value(RT_ISCOR) type ZVCXI_PXS_TT_ISCOR
    raising
      /VCXI/CX_CKX .
  methods GET_PRVDR_TINFO
    exporting
      !ER_GATE_TINFO type ref to /VCXI/CL_VKSR_GATE
      !EF_ID type /VCXI/CKX_ID
    returning
      value(RR_PR_TINFO) type ref to ZCL_VCXI_XCSS_PR_TINFO
    raising
      /VCXI/CX_CKX .
  methods GET_SCORE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RT_SCORE) type ZVCXI_PXSS_TT_SCORE_COM
    raising
      /VCXI/CX_CKX .
  methods HANDLE_ADJUST_ISCAP
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_TINFO
    raising
      /VCXI/CX_CKX .
  methods HANDLE_LOAD_TOOL_DATA
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_DCTTD
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_NOUTT
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SCORE
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_SHTN
    raising
      /VCXI/CX_CKX .
  methods SET_ISCAP
    importing
      !IF_ISCAP type ZVCXI_PXS_ISCAP optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IT_ISCOR type ZVCXI_PXS_TT_ISCOR optional
      !IF_FAALL type ZVCXI_PXSS_FAALL optional
    raising
      /VCXI/CX_CKX .
  methods SET_SCORE
    importing
      !IT_SCORE type ZVCXI_PXSS_TT_SCORE_COM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
private section.
endclass. "ZCL_VCXI_P2SS_PR_CSTEP_DCUT definition
class ZCL_VCXI_P2SS_PR_CSTEP_DCUT implementation.
  method CHECK_NOUT.

*** Check Number of Outs
    if ME->GET_NOUTW( ) is not initial and
       ME->GET_NOUTL( ) is not initial and
       ME->GET_NOUTT( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Number of Outs are fully maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '357' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        if ME->GET_NOUTW( ) is initial.
***       Number of Outs on Width is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '358' ).
        endif.
        if ME->GET_NOUTL( ) is initial.
***       Number of Outs on Length is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '359' ).
        endif.
        if ME->GET_NOUTT( ) is initial.
***       Number of Outs (total) is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '360' ).
        endif.
      endif.
    endif.

  endmethod.
  method CHECK_SHTN.

*** Check Number of Outs
    if ME->GET_SHTNW( )-SHTNW is not initial and
       ME->GET_SHTNL( )-SHTNL is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Net Sheet Dimension is fully maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '361' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Net Sheet Dimension is not fully maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '362' ).
      endif.
    endif.

  endmethod.
  method CHECK_TDCUT.

*** Check Die Cut Type
    if ME->ZIF_VCXI_PXSS_DCUT~GET_TDCUT( ) is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Die Cut Type is maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '355' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Die Cut Type is not maintained.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '356' ).
      endif.
    endif.

  endmethod.
  method CHECK_TOOL_DATA.

    data: LF_ELMST type /VCXI/VKSR_ELMST,
          LF_MSGTY type SYMSGTY.
    data: LS_SHTNW    type ZVCXI_P0SS_S_SHTNW,
          LS_SHTNL    type ZVCXI_P0SS_S_SHTNL,
          LS_SHTLE    type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI    type ZVCXI_P0SS_S_SHTWI,
          LS_BAPIRET2 type BAPIRET2.
    data: LR_CUST_TOOL_DCT type ref to ZCL_VCXI_PXSS_CUST_TOOL_DCT,
          LR_BL_FCBPROP    type ref to ZCL_VCXI_P2SS_BL_FCBPROP.


***----------------------------------------------------------------------------
*** Get Tool Instance
    ME->ZIF_VCXI_PXSS_DCUT~GET_DCTTN( importing ER_CUST_TOOL_DCT = LR_CUST_TOOL_DCT
                                                ES_BAPIRET2      = LS_BAPIRET2 ).
    if LS_BAPIRET2 is not initial.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
        IR_MESSAGE->ADD_MESSAGE_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
      endif.
    endif.
    check LR_CUST_TOOL_DCT is bound.

*** Define Element Status and Message Type based on Release Status
    if LR_CUST_TOOL_DCT->IS_RELEASED( ).
      LF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      LF_MSGTY = 'E'.
    else.
      LF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      LF_MSGTY = 'I'.
    endif.

***----------------------------------------------------------------------------
*** Check Die Cut Type
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->F_TDCUT
                                                               IF_VALUE_VC   = ME->ZIF_VCXI_PXSS_DCUT~GET_TDCUT( )
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

*** Check Sheet Direction
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->F_SHTDI
                                                               IF_VALUE_VC   = ME->ZIF_VCXI_PXSS_DCUT~GET_SHTDI( )
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

***----------------------------------------------------------------------------
*** Check Number of Outs Total
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->F_NOUTT
                                                               IF_VALUE_VC   = ME->GET_NOUTT( )
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

*** Check Number of Outs on Width
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->F_NOUTW
                                                               IF_VALUE_VC   = ME->GET_NOUTW( )
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

*** Check Number of Outs on Length
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->F_NOUTL
                                                               IF_VALUE_VC   = ME->GET_NOUTL( )
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

*** Check Nested Flag
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->F_FNEST
                                                               IF_VALUE_VC   = ME->GET_FNEST( )
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

***----------------------------------------------------------------------------
*** Check Net Sheet Width
    LS_SHTNW = ME->GET_SHTNW( ).
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->S_SHTNW-SHTNW
                                                               IF_UOM_TOOL   = LR_CUST_TOOL_DCT->S_SHTNW-SHTNW_UOM
                                                               IF_VALUE_VC   = LS_SHTNW-SHTNW
                                                               IF_UOM_VC     = LS_SHTNW-SHTNW_UOM
                                                               IF_OPERA      = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LE
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

*** Check Net Sheet Length
    LS_SHTNL = ME->GET_SHTNL( ).
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->S_SHTNL-SHTNL
                                                               IF_UOM_TOOL   = LR_CUST_TOOL_DCT->S_SHTNL-SHTNL_UOM
                                                               IF_VALUE_VC   = LS_SHTNL-SHTNL
                                                               IF_UOM_VC     = LS_SHTNL-SHTNL_UOM
                                                               IF_OPERA      = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LE
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

***----------------------------------------------------------------------------
*** Get Sheet Dimension (Outbound)
    ME->ZIF_VCXI_P2SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                      ES_SHTWI = LS_SHTWI ).
*** Check Product Sheet Width
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->S_SHTPW-SHTPW
                                                               IF_UOM_TOOL   = LR_CUST_TOOL_DCT->S_SHTPW-SHTPW_UOM
                                                               IF_VALUE_VC   = LS_SHTWI-SHTWI
                                                               IF_UOM_VC     = LS_SHTWI-SHTWI_UOM
                                                               IF_OPERA      = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_EQ
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

*** Check Product Sheet Length
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->S_SHTPL-SHTPL
                                                               IF_UOM_TOOL   = LR_CUST_TOOL_DCT->S_SHTPL-SHTPL_UOM
                                                               IF_VALUE_VC   = LS_SHTLE-SHTLE
                                                               IF_UOM_VC     = LS_SHTLE-SHTLE_UOM
                                                               IF_OPERA      = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_EQ
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

***----------------------------------------------------------------------------
*** Get Folding Carton Backward Property XML (Outbound)
    LR_BL_FCBPROP = ME->ZIF_VCXI_P2SS_COMM_NEXT~GET_FCBPX( ).

*** Check Product Length
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->S_PROLE-PROLE
                                                               IF_UOM_TOOL   = LR_CUST_TOOL_DCT->S_PROLE-PROLE_UOM
                                                               IF_VALUE_VC   = LR_BL_FCBPROP->S_PRODIM-S_PROLE-PROLE
                                                               IF_UOM_VC     = LR_BL_FCBPROP->S_PRODIM-S_PROLE-PROLE_UOM
                                                               IF_OPERA      = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_EQ
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

*** Check Product Width
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->S_PROWI-PROWI
                                                               IF_UOM_TOOL   = LR_CUST_TOOL_DCT->S_PROWI-PROWI_UOM
                                                               IF_VALUE_VC   = LR_BL_FCBPROP->S_PRODIM-S_PROWI-PROWI
                                                               IF_UOM_VC     = LR_BL_FCBPROP->S_PRODIM-S_PROWI-PROWI_UOM
                                                               IF_OPERA      = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_EQ
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

*** Check Product Height
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->S_PROHE-PROHE
                                                               IF_UOM_TOOL   = LR_CUST_TOOL_DCT->S_PROHE-PROHE_UOM
                                                               IF_VALUE_VC   = LR_BL_FCBPROP->S_PRODIM-S_PROHE-PROHE
                                                               IF_UOM_VC     = LR_BL_FCBPROP->S_PRODIM-S_PROHE-PROHE_UOM
                                                               IF_OPERA      = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_EQ
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

***----------------------------------------------------------------------------
*** Check Rule Length
    data(LS_RULEN) = ME->ZIF_VCXI_PXSS_DCUT~GET_RULEN( ).
    if not ZCL_VCXI_PXSS_CUST_TOOL_DCT=>VALUE_CHECK( exporting IF_VALUE_TOOL = LR_CUST_TOOL_DCT->S_RULEN-RULEN
                                                               IF_UOM_TOOL   = LR_CUST_TOOL_DCT->S_RULEN-RULEN_UOM
                                                               IF_VALUE_VC   = LS_RULEN-RULEN
                                                               IF_UOM_VC     = LS_RULEN-RULEN_UOM
                                                               IF_OPERA      = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_LE
                                                               IF_MSGTY      = LF_MSGTY
                                                               IR_MESSAGE    = IR_MESSAGE ).
      RF_ELMST = LF_ELMST.
      check IR_MESSAGE is bound.   "Don't continue checking if failed once if not for the messages
    endif.

  endmethod.
  method CHECK_TRLET.

    data: LS_TRLET     type ZVCXI_PXS_S_TRLET,
          LS_TRLET_SUM type ZVCXI_PXS_S_TRLET,
          LS_TRTOP     type ZVCXI_PXS_S_TRTOP,
          LS_TRBOT     type ZVCXI_PXS_S_TRBOT.


***----------------------------------------------------------------------------
*** Get defined Trims
    LS_TRLET = ME->ZIF_VCXI_PXSS_DCUT~GET_TRLET( ).
    LS_TRTOP = ME->ZIF_VCXI_PXSS_DCUT~GET_TRTOP( ).
    LS_TRBOT = ME->ZIF_VCXI_PXSS_DCUT~GET_TRBOT( ).

*** Sum Trim and use Unit of defined Total Trim
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_TRTOP-TRTOP
                                                        IF_CALCV_UOM_1 = LS_TRTOP-TRTOP_UOM
                                                        IF_CALCV_2     = LS_TRBOT-TRBOT
                                                        IF_CALCV_UOM_2 = LS_TRBOT-TRBOT_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRLET-TRLET_UOM
                                              importing EF_CALCV       = LS_TRLET_SUM-TRLET
                                                        EF_CALCV_UOM   = LS_TRLET_SUM-TRLET_UOM ).

***----------------------------------------------------------------------------
*** Check Trim Sum
    if LS_TRLET-TRLET eq LS_TRLET_SUM-TRLET.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Trim on Length correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '351' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Trim on Length not correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '352' ).
      endif.
    endif.

  endmethod.
  method CHECK_TRWIT.

    data: LS_TRWIT     type ZVCXI_PXS_S_TRWIT,
          LS_TRWIT_SUM type ZVCXI_PXS_S_TRWIT,
          LS_TRLEF     type ZVCXI_PXS_S_TRLEF,
          LS_TRRIG     type ZVCXI_PXS_S_TRRIG.


***----------------------------------------------------------------------------
*** Get defined Trims
    LS_TRWIT = ME->ZIF_VCXI_PXSS_DCUT~GET_TRWIT( ).
    LS_TRLEF = ME->ZIF_VCXI_PXSS_DCUT~GET_TRLEF( ).
    LS_TRRIG = ME->ZIF_VCXI_PXSS_DCUT~GET_TRRIG( ).

*** Sum Trim and use Unit of defined Total Trim
    ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_TRLEF-TRLEF
                                                        IF_CALCV_UOM_1 = LS_TRLEF-TRLEF_UOM
                                                        IF_CALCV_2     = LS_TRRIG-TRRIG
                                                        IF_CALCV_UOM_2 = LS_TRRIG-TRRIG_UOM
                                                        IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                        IF_UOM         = LS_TRWIT-TRWIT_UOM
                                              importing EF_CALCV       = LS_TRWIT_SUM-TRWIT
                                                        EF_CALCV_UOM   = LS_TRWIT_SUM-TRWIT_UOM ).

***----------------------------------------------------------------------------
*** Check Trim Sum
    if LS_TRWIT-TRWIT eq LS_TRWIT_SUM-TRWIT.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G.
      if IR_MESSAGE is bound.
***     Trim on Width correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'S'
                                 IF_MSGNO = '353' ).
      endif.

    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R.
      if IR_MESSAGE is bound.
***     Trim on Width not correctly allocated.
        IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_P1SS'
                                 IF_MSGTY = 'E'
                                 IF_MSGNO = '354' ).
      endif.
    endif.

  endmethod.
  method GET_FNEST.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FNEST ).
    move LS_PARAM-ATWRT to RF_FNEST.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_ISCAP.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISCAP ).
    move LS_PARAM-STRNG to EF_ISCAP.
    move LS_PARAM-SETBY to EF_SETBY.

    check EF_ISCAP is not initial.

***----------------------------------------------------------------------------
*** Apply All
    EF_FAALL = switch #( EF_ISCAP when '*'   then ABAP_TRUE
                                  when SPACE then ABAP_FALSE
                                             else ABAP_UNDEFINED ).

*** Separate Score IDs
    if RT_ISCOR is requested.
      split EF_ISCAP at ',' into table RT_ISCOR.
    endif.

  endmethod.
  method GET_NOUTL.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTL ).
    move LS_PARAM-ATFLV to RF_NOUTL.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOUTT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).
    move LS_PARAM-ATFLV to RF_NOUTT.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_NOUTW.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTW ).
    move LS_PARAM-ATFLV to RF_NOUTW.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_PRVDR_TINFO.

    data: LT_GATE         type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE         type ref to /VCXI/CL_VKSR_GATE.


*** Check if Provider exists
    data(LT_PRVDR_DEF) = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_XCSS_PR_TINFO=>C_IPRVT_XCS_TINFO ).
    EF_ID = value #( LT_PRVDR_DEF[ 1 ]-ID optional ).
    check EF_ID is not initial.

***--------------------------------------------------------------------------------------
*** Get Tooling Information provider
    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_XCSS_PR_TINFO=>C_IPRVT_XCS_TINFO
                                     IF_INUSE = ABAP_TRUE ).

***--------------------------------------------------------------------------------------
*** Get Tooling Information Reference
    loop at LT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to RR_PR_TINFO.
          check RR_PR_TINFO is bound.
          move LR_GATE to ER_GATE_TINFO.
          exit.

        catch CX_SY_MOVE_CAST_ERROR.
          clear: RR_PR_TINFO, ER_GATE_TINFO.
      endtry.
    endloop.

  endmethod.
  method GET_SCORE.

    data: LS_PARAM  type /VCXI/VKSR_S_PARAM.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SCORE ).

    if LS_PARAM-STRNG is not initial.
      call transformation ID
           source xml LS_PARAM-STRNG
           result T_SCORE = RT_SCORE.
    endif.

    EF_SETBY = LS_PARAM-SETBY.

  endmethod.
  method GET_SHTNL.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNL ).
    move LS_PARAM-ATFLV to RS_SHTNL-SHTNL.
    move LS_PARAM-UNIT  to RS_SHTNL-SHTNL_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_SHTNW.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNW ).
    move LS_PARAM-ATFLV to RS_SHTNW-SHTNW.
    move LS_PARAM-UNIT  to RS_SHTNW-SHTNW_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

*** Super Status
    RF_ELMST = SUPER->GET_STATUS( ).

***----------------------------------------------------------------------------
*** Check Die Cut Type
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TDCUT( ) ).

*** Check Net Sheet
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_SHTN( ) ).

*** Check Number of Outs
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_NOUT( ) ).

***----------------------------------------------------------------------------
*** Check Trim on Length
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TRLET( ) ).

*** Check Trim on Width
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TRWIT( ) ).

***----------------------------------------------------------------------------
*** Check Tool Data
    RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                   IF_ELMST2 = ME->CHECK_TOOL_DATA( ) ).

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Die Cut Type
    ME->CHECK_TDCUT( IR_MESSAGE = IR_MESSAGE ).

*** Check Net Sheet
    ME->CHECK_SHTN(  IR_MESSAGE = IR_MESSAGE ).

*** Check Number of Outs
    ME->CHECK_NOUT(  IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Trim on Length
    ME->CHECK_TRLET( IR_MESSAGE = IR_MESSAGE ).

*** Check Trim on Width
    ME->CHECK_TRWIT( IR_MESSAGE = IR_MESSAGE ).

***----------------------------------------------------------------------------
*** Check Tool Data
    ME->CHECK_TOOL_DATA( IR_MESSAGE = IR_MESSAGE ).

  endmethod.
  method HANDLE_ADJUST_ISCAP.

    data: LF_FAALL    type ZVCXI_PXSS_FAALL.
    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_ISCOR    type ZVCXI_PXS_TT_ISCOR.

*** Process other Events first, to ensure Scores have been backwarded correctly
    ME->R_GATE->RAISE_EVENTS( IF_LEVNT = 9 ).

*** Don't adjust if all Scores are applied
    ME->GET_ISCAP( importing EF_FAALL = LF_FAALL ).
    check LF_FAALL ne ABAP_TRUE.

*** Get currently applied Scores (scores that are no longer available wouldn't be in the list)
    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP ).
    LT_ISCOR = value #( for S_SCORE_AP in LT_SCORE_AP where ( FAPPL = ABAP_TRUE ) ( S_SCORE_AP-ISCOR ) ).

*** Update list of applied scores
    ME->SET_ISCAP( IT_ISCOR = LT_ISCOR  ).

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_ADJUST_ISCAP.
        ME->HANDLE_ADJUST_ISCAP( ).

      when C_IEVNT_I_RECALC_NOUTT.
        ME->HANDLE_RECALC_NOUTT( ).
      when C_IEVNT_I_RECALC_SHTN.
        ME->HANDLE_RECALC_SHTN( ).
      when C_IEVNT_I_RECALC_SCORE.
        ME->HANDLE_RECALC_SCORE( ).

      when C_IEVNT_I_RECALC_DCTTD.
        ME->HANDLE_RECALC_DCTTD( ).
      when ZIF_VCXI_PXSS_DCUT~C_IEVNT_I_LOAD_TOOL_DATA.
        ME->HANDLE_LOAD_TOOL_DATA( ).
      when ZIF_VCXI_PXSS_DCUT~C_IEVNT_I_INIT_TINFO.
        ME->HANDLE_INIT_TINFO( ).
      when ZIF_VCXI_XCSS_TUSER~C_IEVNT_I_REQ_TINFO_DEFAULT.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_XCSS_TUSER~C_IEVNT_O_TINFO_DEFAULT_REQ ).
    endcase.

  endmethod.
  method HANDLE_INIT_TINFO.

    data: LF_ID type /VCXI/CKX_ID.
    data: LR_GATE_TINFO type ref to /VCXI/CL_VKSR_GATE.


*** Get Provider Tooling Information
    ME->GET_PRVDR_TINFO( importing EF_ID         = LF_ID
                                   ER_GATE_TINFO = LR_GATE_TINFO ).
    check LF_ID is not initial.


    if ME->ZIF_VCXI_PXSS_DCUT~GET_DCTTN( ) is initial.
***   Create Tooling Information if needed
      if LR_GATE_TINFO is not bound.
        ME->R_GATE->CREATE_ELEMENT( IF_ID = LF_ID ).
      endif.
    else.
***   Remove Tooling Information
      if LR_GATE_TINFO is bound.
        LR_GATE_TINFO->DO_FREE( ).
      endif.
    endif.

  endmethod.
  method HANDLE_LOAD_TOOL_DATA.

*** Ensure a tool has been specified
    check ME->ZIF_VCXI_PXSS_DCUT~GET_DCTTN( ) is not initial.

*** Load Tool Data
    ME->ZIF_VCXI_PXSS_DCUT~SET_TOOL_DATA( ).

  endmethod.
  method HANDLE_RECALC_DCTTD.

    data: LF_FOVRR type ZVCXI_XCS_FOVRR,
          LF_MAKTX type MAKTX.

    if ME->ZIF_VCXI_PXSS_DCUT~GET_DCTTN( ) is initial.
***   Only calcualate if calculation is active
      ME->ZIF_VCXI_PXSS_DCUT~GET_DCTTD( importing EF_FOVRR = LF_FOVRR ).
      check LF_FOVRR eq ABAP_FALSE.

***   Get generated Material Description
      LF_MAKTX = ZCL_VCXI_PXSS_BL_MAKTX=>GET_MAKTX( IR_GATE = ME->R_GATE ).

***   Set new Description
      ME->SET_DCTTD( IF_DCTTD = LF_MAKTX ).

    else.
***   Initialize Tool Description
      ME->SET_DCTTD( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_NOUTT.

    data: LF_NOUTT type ZVCXI_PXS_NOUTT.

***----------------------------------------------------------------------------
*** Check Nested Flag is initial -> automatic calculation
    if ME->GET_FNEST( ) eq ABAP_FALSE.
      try.
          LF_NOUTT = ME->GET_NOUTL( ) *  ME->GET_NOUTW( ).
        catch CX_SY_ARITHMETIC_OVERFLOW.
          clear LF_NOUTT.
      endtry.
      ME->SET_NOUTT( IF_NOUTT = LF_NOUTT ).
    endif.

  endmethod.
  method HANDLE_RECALC_SCORE.

    data: LF_SETBY type /VCXI/VKSR_SETBY.
    data: LT_SCORE type ZVCXI_PXSS_TT_SCORE_COM.


***----------------------------------------------------------------------------
    if ME->GET_FNEST( ) eq ABAP_FALSE.
***   Remove all Scores and use communicated scores
      ME->SET_SCORE( IF_SETBY = SPACE ).

***----------------------------------------------------------------------------
    else.
***   Recalculate adjusted Scores
      LT_SCORE = ME->GET_SCORE( importing EF_SETBY = LF_SETBY ).
      ZCL_VCXI_PXSS_BL_SCORE=>RECALC_ADJ_SCORES( exporting IS_SHTNW     = ME->GET_SHTNW( )
                                                           IS_SHTNL     = ME->GET_SHTNL( )
                                                 changing  CT_SCORE_COM = LT_SCORE ).
      if LF_SETBY is initial.
        LF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_CALC.
      endif.
      ME->SET_SCORE( IT_SCORE = LT_SCORE
                     IF_SETBY = LF_SETBY ).
    endif.

  endmethod.
  method HANDLE_RECALC_SHTN.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI,
          LS_TRWIT type ZVCXI_PXS_S_TRWIT,
          LS_TRLET type ZVCXI_PXS_S_TRLET,
          LS_SHTNL type ZVCXI_P0SS_S_SHTNL,
          LS_SHTNW type ZVCXI_P0SS_S_SHTNW.


    check ME->GET_FNEST( ) ne ABAP_TRUE.

***----------------------------------------------------------------------------
*** Get Inbound Sheet
    ME->ZIF_VCXI_P2SS_COMM_PREV~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                      ES_SHTWI = LS_SHTWI ).
*** Reduce Width by Trim
    if LS_SHTWI-SHTWI_UOM is not initial.
      LS_TRWIT = ME->ZIF_VCXI_PXSS_DCUT~GET_TRWIT( ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTWI-SHTWI
                                                          IF_CALCV_UOM_1 = LS_SHTWI-SHTWI_UOM
                                                          IF_CALCV_2     = LS_TRWIT-TRWIT
                                                          IF_CALCV_UOM_2 = LS_TRWIT-TRWIT_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = LS_SHTWI-SHTWI_UOM
                                                importing EF_CALCV       = LS_SHTNW-SHTNW
                                                          EF_CALCV_UOM   = LS_SHTNW-SHTNW_UOM ).
    endif.

*** Reduce Length by Trim
    if LS_SHTLE-SHTLE_UOM is not initial.
      LS_TRLET = ME->ZIF_VCXI_PXSS_DCUT~GET_TRLET( ).
      ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_SHTLE-SHTLE
                                                          IF_CALCV_UOM_1 = LS_SHTLE-SHTLE_UOM
                                                          IF_CALCV_2     = LS_TRLET-TRLET
                                                          IF_CALCV_UOM_2 = LS_TRLET-TRLET_UOM
                                                          IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_SUBTRACT
                                                          IF_UOM         = LS_SHTLE-SHTLE_UOM
                                                importing EF_CALCV       = LS_SHTNL-SHTNL
                                                          EF_CALCV_UOM   = LS_SHTNL-SHTNL_UOM ).
    endif.

*** Calculate no negative Sheet Dimension
    LS_SHTNW-SHTNW = cond #( when LS_SHTNW-SHTNW lt 0 then 0 else LS_SHTNW-SHTNW ).
    LS_SHTNL-SHTNL = cond #( when LS_SHTNL-SHTNL lt 0 then 0 else LS_SHTNL-SHTNL ).

***----------------------------------------------------------------------------
*** Set new Net Sheet
    ME->SET_SHTNW( IS_SHTNW = LS_SHTNW ).
    ME->SET_SHTNL( IS_SHTNL = LS_SHTNL ).

  endmethod.
  method SET_DCTTD.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_DCTTD ).

    move IF_DCTTD  to LS_PARAM-STRNG.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_DCUT~C_IEVNT_O_DCTTD_CHANGED ).
    endif.

  endmethod.
  method SET_DCTTN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_DCTTN ).

    move IF_DCTTN  to LS_PARAM-ATWRT.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_DCUT~C_IEVNT_O_DCTTN_CHANGED ).
    endif.

  endmethod.
  method SET_FNEST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FNEST ).

    move IF_FNEST  to LS_PARAM-ATWRT.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FNEST_CHANGED ).
    endif.

  endmethod.
  method SET_ISCAP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_ISCAP ).

    if IT_ISCOR is supplied.
      concatenate lines of IT_ISCOR into LS_PARAM-STRNG separated by ','.
    endif.
    if IF_ISCAP is supplied.
      LS_PARAM-STRNG = IF_ISCAP.
    endif.
    if IF_FAALL is supplied and
       IF_FAALL ne ABAP_UNDEFINED.
      LS_PARAM-STRNG = switch #( IF_FAALL when ABAP_TRUE then '*' ).
    endif.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_ISCAP_CHANGED ).
    endif.

  endmethod.
  method SET_NOUTL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTL ).

    move IF_NOUTL  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUT_CHANGED ).
    endif.

  endmethod.
  method SET_NOUTT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTT ).

    move IF_NOUTT  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUT_CHANGED ).
    endif.

  endmethod.
  method SET_NOUTW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_NOUTW ).

    move IF_NOUTW  to LS_PARAM-ATFLV.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_NOUT_CHANGED ).
    endif.

  endmethod.
  method SET_RULEN.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_RULEN ).

    move IS_RULEN-RULEN     to LS_PARAM-ATFLV.
    move IS_RULEN-RULEN_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_DCUT~C_IEVNT_O_RULEN_CHANGED ).
    endif.

  endmethod.
  method SET_SCORE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.


    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SCORE ).

    if IT_SCORE is supplied.
      call transformation ID
           source T_SCORE = IT_SCORE
           result xml LS_PARAM-STRNG.
    endif.
    if IF_SETBY is initial.
      clear LS_PARAM-STRNG.
    endif.
    LS_PARAM-SETBY = IF_SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SCORE_CHANGED ).
    endif.

  endmethod.
  method SET_SHTDI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_SHTDI ).

    move IF_SHTDI  to LS_PARAM-ATWRT.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_DCUT~C_IEVNT_O_SHTDI_CHANGED ).
    endif.

  endmethod.
  method SET_SHTNL.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNL ).

    move IS_SHTNL-SHTNL     to LS_PARAM-ATFLV.
    move IS_SHTNL-SHTNL_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTN_CHANGED ).
    endif.

  endmethod.
  method SET_SHTNW.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_SHTNW ).

    move IS_SHTNW-SHTNW     to LS_PARAM-ATFLV.
    move IS_SHTNW-SHTNW_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_SHTN_CHANGED ).
    endif.

  endmethod.
  method SET_TDCUT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TDCUT ).

    move IF_TDCUT  to LS_PARAM-ATWRT.
    move IF_SETBY  to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_DCUT~C_IEVNT_O_TDCUT_CHANGED ).
    endif.

  endmethod.
  method SET_TRBOT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRBOT ).

    move IS_TRBOT-TRBOT     to LS_PARAM-ATFLV.
    move IS_TRBOT-TRBOT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_DCUT~C_IEVNT_O_TRBOT_CHANGED ).
    endif.

  endmethod.
  method SET_TRLEF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRLEF ).

    move IS_TRLEF-TRLEF     to LS_PARAM-ATFLV.
    move IS_TRLEF-TRLEF_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_DCUT~C_IEVNT_O_TRLEF_CHANGED ).
    endif.

  endmethod.
  method SET_TRLET.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRLET ).

    move IS_TRLET-TRLET     to LS_PARAM-ATFLV.
    move IS_TRLET-TRLET_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_DCUT~C_IEVNT_O_TRLET_CHANGED ).
    endif.

  endmethod.
  method SET_TRRIG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRRIG ).

    move IS_TRRIG-TRRIG     to LS_PARAM-ATFLV.
    move IS_TRRIG-TRRIG_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_DCUT~C_IEVNT_O_TRRIG_CHANGED ).
    endif.

  endmethod.
  method SET_TRTOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRTOP ).

    move IS_TRTOP-TRTOP     to LS_PARAM-ATFLV.
    move IS_TRTOP-TRTOP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_DCUT~C_IEVNT_O_TRTOP_CHANGED ).
    endif.

  endmethod.
  method SET_TRWIT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRWIT ).

    move IS_TRWIT-TRWIT     to LS_PARAM-ATFLV.
    move IS_TRWIT-TRWIT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_PXSS_DCUT~C_IEVNT_O_TRWIT_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_NEXT~GET_FCFPX.

    data: LS_SHTLE type ZVCXI_P0SS_S_SHTLE,
          LS_SHTWI type ZVCXI_P0SS_S_SHTWI.


*** Super
    RR_BL_FCFPROP = SUPER->ZIF_VCXI_P2SS_COMM_NEXT~GET_FCFPX( importing EF_SETBY = EF_SETBY ).
    check RR_BL_FCFPROP is bound.

***--------------------------------------------------------------------------------------
*** Use Sheet Dimension as Handling Dimension
    ME->ZIF_VCXI_P2SS_COMM_NEXT~GET_SHTDIM( importing ES_SHTLE = LS_SHTLE
                                                      ES_SHTWI = LS_SHTWI ).
    RR_BL_FCFPROP->SET_HNDDIM( IS_HNDDIM = value #( HNDLE     = LS_SHTLE-SHTLE
                                                    HNDLE_UOM = LS_SHTLE-SHTLE_UOM
                                                    HNDWI     = LS_SHTWI-SHTWI
                                                    HNDWI_UOM = LS_SHTWI-SHTWI_UOM
                                                    HNDHE     = RR_BL_FCFPROP->S_CALIP-CALIP
                                                    HNDHE_UOM = RR_BL_FCFPROP->S_CALIP-CALIP_UOM ) ).

*** Consider Outs in Forward Properties
    RR_BL_FCFPROP->APPLY_NOUTT( IF_NOUTT = ME->GET_NOUTT( ) ).

***--------------------------------------------------------------------------------------
*** Get new Folding Carton Forward Property XML
    if EF_FCFPX is requested.
      EF_FCFPX = RR_BL_FCFPROP->GET_FCFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_PREV~GET_FCBPX.

    data: LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM.


*** Call SUPER
    RR_BL_FCBPROP = SUPER->ZIF_VCXI_P2SS_COMM_PREV~GET_FCBPX( importing EF_SETBY = EF_SETBY ).

***--------------------------------------------------------------------------------------
*** Update Scores
    try.
        ZCL_VCXI_PXSS_BL_SCORE=>GET_COM_BY_AP( exporting IR_SCORES_AP = ME
                                               importing ET_SCORE_COM = LT_SCORE_COM ).
      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( LR_CX_CKX ).
        clear: LT_SCORE_COM.
    endtry.
    RR_BL_FCBPROP->SET_SCORE( IT_SCORE = LT_SCORE_COM ).

*** Set Sheet ECMA for further backwarding
    RR_BL_FCBPROP->SET_ECMA_SHEET( ).

*** Apply Number of Outs to Cost Split
    RR_BL_FCBPROP->ADJ_CSPLIT_BY_NOUTT( IF_NOUTT = ME->GET_NOUTT( ) ).

***--------------------------------------------------------------------------------------
*** Return XML
    if EF_FCBPX is requested.
      move RR_BL_FCBPROP->GET_FCBPX( ) to EF_FCBPX.
    endif.

  endmethod.
  method ZIF_VCXI_P2SS_COMM_PREV~GET_NOUPS.

*** Call SUPER
    RF_NOUPS = SUPER->ZIF_VCXI_P2SS_COMM_PREV~GET_NOUPS( importing EF_SETBY = EF_SETBY ).

*** Multiply by Number Outs (total)
    RF_NOUPS = RF_NOUPS * ME->GET_NOUTT( ).

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_DCTTD.

    data: LF_DESCR type /VCXI/CKX_DESCR.
    data: LS_PARAM type /VCXI/VKSR_S_PARAM.


    if ME->ZIF_VCXI_PXSS_DCUT~GET_DCTTN( importing EF_DESCR = LF_DESCR ) is initial.
      LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_DCTTD ).
      move LS_PARAM-STRNG to RF_DCTTD.
      move LS_PARAM-SETBY to EF_SETBY.

      if EF_FOVRR is requested.
        EF_FOVRR = cond #( when ZCL_VCXI_PXSS_BL_MAKTX=>GET_FM( exporting IR_GATE = ME->R_GATE ) is initial then ABAP_UNDEFINED
                           when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER                                then ABAP_TRUE
                                                                                                            else ABAP_FALSE ).
      endif.
    else.
      RF_DCTTD = LF_DESCR.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_DCTTN.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM,
          LS_MAKT  type MAKT.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_DCTTN ).
    move LS_PARAM-ATWRT to RF_DCTTN.
    move LS_PARAM-SETBY to EF_SETBY.

*** Release Status Default
    EF_RELEA = ABAP_UNDEFINED.

    check RF_DCTTN is not initial.

***----------------------------------------------------------------------------
    if ER_CUST_TOOL_DCT is requested or
       EF_RELEA         is requested.
      try.
***       Get Die Cut Tool Customizing Instance
          ER_CUST_TOOL_DCT = ZCL_VCXI_PXSS_CUST_TOOL_DCT=>GET_INSTANCE_TOOL_DCT( IF_MATNR = RF_DCTTN
                                                                                 IF_WERKS = ME->GET_WERKS( )
                                                                                 IF_DATE  = ME->R_GATE->GET_APPDATA( )->F_DCONF ).
        catch /VCXI/CX_CKX into data(LR_CX_CKX).
          if ES_BAPIRET2 is requested.
            ES_BAPIRET2 = LR_CX_CKX->GET_BAPIRET2( ).
          endif.
          clear ER_CUST_TOOL_DCT.
      endtry.
    endif.

*** Release Status
    if EF_RELEA is requested and
       ER_CUST_TOOL_DCT is bound and
       ER_CUST_TOOL_DCT->IS_RELEASED( ).
      EF_RELEA = ABAP_TRUE.
    else.
      EF_RELEA = ABAP_FALSE.
    endif.

    if EF_DESCR is requested.
***   Identify Description
      call function 'MAKT_SINGLE_READ'
        exporting
          MATNR  = RF_DCTTN
          SPRAS  = SY-LANGU
        importing
          WMAKT  = LS_MAKT
        exceptions
          others = 0.
      EF_DESCR = LS_MAKT-MAKTX.
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_GCADM.

*    data: LR_PR_CADIF_MLTUP type ref to ZCL_VCXI_PXSS_PR_CADIF_MLTUP.
*
*    LR_PR_CADIF_MLTUP = ME->GET_PRVDR_CADIF_MLTUP( ).
*    check LR_PR_CADIF_MLTUP is bound.
*
*    RF_GCADM = LR_PR_CADIF_MLTUP->GET_GCADM( ).

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_RULEN.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_RULEN ).
    move LS_PARAM-ATFLV to RS_RULEN-RULEN.
    move LS_PARAM-UNIT  to RS_RULEN-RULEN_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_SHTDI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data:  LT_D07V    type standard table of DD07V.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_SHTDI ).
    move LS_PARAM-ATWRT to RF_SHTDI.
    move LS_PARAM-SETBY to EF_SETBY.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      call function 'DD_DOMVALUES_GET'
        exporting
          DOMNAME   = 'ZVCXI_P0SS_SHTDI'
          TEXT      = 'X'
          LANGU     = SY-LANGU
        tables
          DD07V_TAB = LT_D07V.
      EF_DESCR = value #( LT_D07V[ DOMVALUE_L = RF_SHTDI ]-DDTEXT optional ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_SHTN.

    if ES_SHTNW is requested.
      ES_SHTNW = ME->GET_SHTNW( ).
    endif.

    if ES_SHTNL is requested.
      ES_SHTNL = ME->GET_SHTNL( ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_TDCUT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.
    data:  LT_D07V    type standard table of DD07V.


***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TDCUT ).
    move LS_PARAM-ATWRT to RF_TDCUT.
    move LS_PARAM-SETBY to EF_SETBY.

    check RF_TDCUT is not initial.

***----------------------------------------------------------------------------
    if EF_DESCR is requested.
***   Identify Description
      call function 'DD_DOMVALUES_GET'
        exporting
          DOMNAME   = 'ZVCXI_P0SS_TDCUT'
          TEXT      = 'X'
          LANGU     = SY-LANGU
        tables
          DD07V_TAB = LT_D07V.
      EF_DESCR = value #( LT_D07V[ DOMVALUE_L = RF_TDCUT ]-DDTEXT optional ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_TRBOT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRBOT ).
    move LS_PARAM-ATFLV to RS_TRBOT-TRBOT.
    move LS_PARAM-UNIT  to RS_TRBOT-TRBOT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_TRLEF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRLEF ).
    move LS_PARAM-ATFLV to RS_TRLEF-TRLEF.
    move LS_PARAM-UNIT  to RS_TRLEF-TRLEF_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_TRLET.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRLET ).
    move LS_PARAM-ATFLV to RS_TRLET-TRLET.
    move LS_PARAM-UNIT  to RS_TRLET-TRLET_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_TRRIG.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRRIG ).
    move LS_PARAM-ATFLV to RS_TRRIG-TRRIG.
    move LS_PARAM-UNIT  to RS_TRRIG-TRRIG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_TRTOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRTOP ).
    move LS_PARAM-ATFLV to RS_TRTOP-TRTOP.
    move LS_PARAM-UNIT  to RS_TRTOP-TRTOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~GET_TRWIT.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = ZIF_VCXI_PXSS_DCUT~C_PARID_TRWIT ).
    move LS_PARAM-ATFLV to RS_TRWIT-TRWIT.
    move LS_PARAM-UNIT  to RS_TRWIT-TRWIT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_PXSS_DCUT~SET_TOOL_DATA.

    data: LS_BAPIRET2 type BAPIRET2.
    data: LR_CUST_TOOL_DCT type ref to ZCL_VCXI_PXSS_CUST_TOOL_DCT.


*** Get Tool Instance
    ME->ZIF_VCXI_PXSS_DCUT~GET_DCTTN( importing ER_CUST_TOOL_DCT = LR_CUST_TOOL_DCT
                                                ES_BAPIRET2      = LS_BAPIRET2 ).
    if LR_CUST_TOOL_DCT is not bound.
      /VCXI/CX_CKX=>RAISE_CKX_BY_BAPIRET2( IS_BAPIRET2 = LS_BAPIRET2 ).
    endif.

*** Die Cut Type
    ME->SET_TDCUT( IF_TDCUT = LR_CUST_TOOL_DCT->F_TDCUT ).
    ME->SET_SHTDI( IF_SHTDI = LR_CUST_TOOL_DCT->F_SHTDI ).

*** Set Number of Outs
    ME->SET_NOUTT( IF_NOUTT = LR_CUST_TOOL_DCT->F_NOUTT ).
    ME->SET_NOUTW( IF_NOUTW = LR_CUST_TOOL_DCT->F_NOUTW ).
    ME->SET_NOUTL( IF_NOUTL = LR_CUST_TOOL_DCT->F_NOUTL ).

*** Set Nested Flag
    ME->SET_FNEST( IF_FNEST = LR_CUST_TOOL_DCT->F_FNEST ).

*** Set Net Sheet
    if LR_CUST_TOOL_DCT->F_FNEST eq ABAP_TRUE.
      ME->SET_SHTNW( IS_SHTNW = LR_CUST_TOOL_DCT->S_SHTNW ).
      ME->SET_SHTNL( IS_SHTNL = LR_CUST_TOOL_DCT->S_SHTNL ).
    endif.

*** Rule Length
    ME->SET_RULEN( IS_RULEN = LR_CUST_TOOL_DCT->S_RULEN ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~GET_DATA.

    field-symbols: <S_FDI_CSTEP_DCUT> type ZVCXI_P2SS_S_FDI_CSTEP_DCUT.


***--------------------------------------------------------------------------------------
*** Create Data Reference
    create data RR_DATA type ZVCXI_P2SS_S_FDI_CSTEP_DCUT.
    assign RR_DATA->* to <S_FDI_CSTEP_DCUT>.


***--------------------------------------------------------------------------------------
*** Die Cut Tool Number
    <S_FDI_CSTEP_DCUT>-DCTTN   = ME->ZIF_VCXI_PXSS_DCUT~GET_DCTTN( importing EF_RELEA = <S_FDI_CSTEP_DCUT>-DCTTN_RELEA ).

*** Die Cut Type
    <S_FDI_CSTEP_DCUT>-TDCUT   = ME->ZIF_VCXI_PXSS_DCUT~GET_TDCUT( ).

*** Sheet Direction
    <S_FDI_CSTEP_DCUT>-SHTDI   = ME->ZIF_VCXI_PXSS_DCUT~GET_SHTDI( ).

*** Rule Length
    <S_FDI_CSTEP_DCUT>-S_RULEN = ME->ZIF_VCXI_PXSS_DCUT~GET_RULEN( ).

*** Trim on Width & Length (Total)
    <S_FDI_CSTEP_DCUT>-S_TRWIT = ME->ZIF_VCXI_PXSS_DCUT~GET_TRWIT( ).
    <S_FDI_CSTEP_DCUT>-S_TRLET = ME->ZIF_VCXI_PXSS_DCUT~GET_TRLET( ).

*** Net Sheet Width & Length
    <S_FDI_CSTEP_DCUT>-S_SHTNW = ME->GET_SHTNW( ).
    <S_FDI_CSTEP_DCUT>-S_SHTNL = ME->GET_SHTNL( ).

*** Number of Outs
    <S_FDI_CSTEP_DCUT>-NOUTL   = ME->GET_NOUTL( ).
    <S_FDI_CSTEP_DCUT>-NOUTW   = ME->GET_NOUTW( ).
    <S_FDI_CSTEP_DCUT>-NOUTT   = ME->GET_NOUTT( ).

*** Nested Flag
    <S_FDI_CSTEP_DCUT>-FNEST   = ME->GET_FNEST( ).

*** Score Application
    ME->GET_ISCAP( importing EF_FAALL = <S_FDI_CSTEP_DCUT>-SCORE_FAALL ).

  endmethod.
  method ZIF_VCXI_PXSS_FDI~SET_DATA.

    data: LS_FDI_CSTEP_DCUT_OLD type ZVCXI_P2SS_S_FDI_CSTEP_DCUT,
          LS_FDI_CSTEP_DCUT_NEW type ZVCXI_P2SS_S_FDI_CSTEP_DCUT.
    data: LR_DATA_OLD  type ref to DATA.
    field-symbols: <S_DATA> type ANY.


***--------------------------------------------------------------------------------------
*** Dereference Data
    LR_DATA_OLD = cond #( when IR_DATA_OLD is supplied then IR_DATA_OLD
                                                       else ME->ZIF_VCXI_PXSS_FDI~GET_DATA( ) ).
    if LR_DATA_OLD is bound.
      assign LR_DATA_OLD->* to <S_DATA>.
      LS_FDI_CSTEP_DCUT_OLD = corresponding #( <S_DATA> ).
    endif.

    if IR_DATA is bound.
      assign IR_DATA->* to <S_DATA>.
      LS_FDI_CSTEP_DCUT_NEW = corresponding #( <S_DATA> ).
    endif.

*** General Check for Changes
    check LS_FDI_CSTEP_DCUT_OLD ne LS_FDI_CSTEP_DCUT_NEW.

***--------------------------------------------------------------------------------------
*** Set Die Cut Type
    if LS_FDI_CSTEP_DCUT_OLD-TDCUT ne LS_FDI_CSTEP_DCUT_NEW-TDCUT and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'TDCUT' ] ).
      ME->SET_TDCUT( IF_TDCUT = LS_FDI_CSTEP_DCUT_NEW-TDCUT
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Die Cut Tool Number
    if LS_FDI_CSTEP_DCUT_OLD-DCTTN ne LS_FDI_CSTEP_DCUT_OLD-DCTTN and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'DCTTN' ] ).
      ME->SET_DCTTN( IF_DCTTN = LS_FDI_CSTEP_DCUT_NEW-DCTTN
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Sheet Direction
    if LS_FDI_CSTEP_DCUT_OLD-SHTDI ne LS_FDI_CSTEP_DCUT_NEW-SHTDI and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'SHTDI' ] ).
      ME->SET_SHTDI( IF_SHTDI = LS_FDI_CSTEP_DCUT_NEW-SHTDI
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Rule Length
    if LS_FDI_CSTEP_DCUT_OLD-S_RULEN ne LS_FDI_CSTEP_DCUT_NEW-S_RULEN and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'RULEN' ] ).
      ME->SET_RULEN( IS_RULEN = LS_FDI_CSTEP_DCUT_NEW-S_RULEN
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Trim on Width (Total)
    if LS_FDI_CSTEP_DCUT_OLD-S_TRWIT ne LS_FDI_CSTEP_DCUT_NEW-S_TRWIT and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'TRWIT' ] ).
      ME->SET_TRWIT( IS_TRWIT = LS_FDI_CSTEP_DCUT_NEW-S_TRWIT
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Trim on Length (Total)
    if LS_FDI_CSTEP_DCUT_OLD-S_TRLET ne LS_FDI_CSTEP_DCUT_NEW-S_TRLET and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'TRLET' ] ).
      ME->SET_TRLET( IS_TRLET = LS_FDI_CSTEP_DCUT_NEW-S_TRLET
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.


*** Set Net Sheet Width
    if LS_FDI_CSTEP_DCUT_OLD-S_SHTNW ne LS_FDI_CSTEP_DCUT_NEW-S_SHTNW and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'SHTNW' ] ).
      ME->SET_SHTNW( IS_SHTNW = LS_FDI_CSTEP_DCUT_NEW-S_SHTNW
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Net Sheet Length
    if LS_FDI_CSTEP_DCUT_OLD-S_SHTNL ne LS_FDI_CSTEP_DCUT_NEW-S_SHTNL and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'SHTNL' ] ).
      ME->SET_SHTNL( IS_SHTNL = LS_FDI_CSTEP_DCUT_NEW-S_SHTNL
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.


***--------------------------------------------------------------------------------------
*** Set Number of Outs on Length
    if LS_FDI_CSTEP_DCUT_OLD-NOUTL ne LS_FDI_CSTEP_DCUT_NEW-NOUTL and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'NOUTL' ] ).
      ME->SET_NOUTL( IF_NOUTL = LS_FDI_CSTEP_DCUT_NEW-NOUTL
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Number of Outs on Width
    if LS_FDI_CSTEP_DCUT_OLD-NOUTW ne LS_FDI_CSTEP_DCUT_NEW-NOUTW and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'NOUTW' ] ).
      ME->SET_NOUTW( IF_NOUTW = LS_FDI_CSTEP_DCUT_NEW-NOUTW
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Number of Outs (total)
    if LS_FDI_CSTEP_DCUT_OLD-NOUTT ne LS_FDI_CSTEP_DCUT_NEW-NOUTT and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'NOUTT' ] ).
      ME->SET_NOUTT( IF_NOUTT = LS_FDI_CSTEP_DCUT_NEW-NOUTT
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

*** Set Nested Flag
    if LS_FDI_CSTEP_DCUT_OLD-FNEST ne LS_FDI_CSTEP_DCUT_NEW-FNEST and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'FNEST' ] ).
      ME->SET_FNEST( IF_FNEST = LS_FDI_CSTEP_DCUT_NEW-FNEST
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.


***--------------------------------------------------------------------------------------
*** Score Application
    if LS_FDI_CSTEP_DCUT_OLD-SCORE_FAALL ne LS_FDI_CSTEP_DCUT_NEW-SCORE_FAALL and
       not LINE_EXISTS( IT_FDMEX[ TABLE_LINE = 'SCORE_FAALL' ] ).
      ME->SET_ISCAP( IF_FAALL = LS_FDI_CSTEP_DCUT_NEW-SCORE_FAALL
                     IF_SETBY = /VCXI/CL_VKSR_GATE=>C_SETBY_USER ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP.

***--------------------------------------------------------------------------------------
    if ME->GET_FNEST( ) ne ABAP_TRUE.
***   Get applied Scores table based on Score Communication (Outbound)
      ZCL_VCXI_PXSS_BL_SCORE=>GET_AP_BY_COM( exporting IT_SCORE_COM      = ME->ZIF_VCXI_P2SS_COMM_NEXT~GET_FCBPX( )->T_SCORE
*                                                       IT_TAPE_COM       = ME->ZIF_VCXI_P2SS_COMM_NEXT~GET_FCBPX( )->T_TAPE_COM
                                                       IF_NOUPL          = ME->GET_NOUTL( )
                                                       IF_NOUPW          = ME->GET_NOUTW( )
                                                       IF_DIMEN_TRIM     = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH
                                                       IS_TRLEF          = ME->ZIF_VCXI_PXSS_DCUT~GET_TRLEF( )
                                                       IS_TRRIG          = ME->ZIF_VCXI_PXSS_DCUT~GET_TRRIG( )
                                                       IS_TRTOP          = ME->ZIF_VCXI_PXSS_DCUT~GET_TRTOP( )
                                                       IS_TRBOT          = ME->ZIF_VCXI_PXSS_DCUT~GET_TRBOT( )
                                                       IT_ISCOR          = ME->GET_ISCAP( )
                                             importing ET_SCORE_AP       = ET_SCORE_AP
                                                       ET_TAPE_AP        = ET_TAPE_AP
                                                       ET_ISCOR_DISABLED = ET_ISCOR_DISABLED ).

    else.
***   Get applied Scores table based on Net Sheet Dimensions
      ZCL_VCXI_PXSS_BL_SCORE=>GET_AP_BY_COM( exporting IT_SCORE_COM      = ME->GET_SCORE( )
                                                       IF_DIMEN_TRIM     = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH
                                                       IS_TRLEF          = ME->ZIF_VCXI_PXSS_DCUT~GET_TRLEF( )
                                                       IS_TRRIG          = ME->ZIF_VCXI_PXSS_DCUT~GET_TRRIG( )
                                                       IS_TRTOP          = ME->ZIF_VCXI_PXSS_DCUT~GET_TRTOP( )
                                                       IS_TRBOT          = ME->ZIF_VCXI_PXSS_DCUT~GET_TRBOT( )
                                                       IT_ISCOR          = ME->GET_ISCAP( )
                                             importing ET_SCORE_AP       = ET_SCORE_AP
                                                       ET_TAPE_AP        = ET_TAPE_AP
                                                       ET_ISCOR_DISABLED = ET_ISCOR_DISABLED ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SCSTR.

    data: LT_SCORE_AP type ZVCXI_PXSS_TT_SCORE_AP,
          LT_TAPE_AP  type ZVCXI_PXSS_TT_TAPE_AP.


    ME->ZIF_VCXI_PXSS_SCORES_AP~GET_SCORE_AP( importing ET_SCORE_AP = LT_SCORE_AP
                                                        ET_TAPE_AP  = LT_TAPE_AP ).

*** Score String Length
    if EF_SSTRL is requested.
      EF_SSTRL = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH ).
    endif.

*** Score String Cross
    if EF_SSTRC is requested.
      EF_SSTRC = ZCL_VCXI_PXSS_BL_SCORE=>GET_SCSTR_AP( IT_SCORE_AP = LT_SCORE_AP
                                                       IT_TAPE_AP  = LT_TAPE_AP
                                                       IF_DIMEN    = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH ).
    endif.

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~GET_SSCOR.

    RF_SSCOR = switch #( ME->GET_FNEST( ) when ABAP_FALSE then 'A'     "Automatic
                                          when ABAP_TRUE  then 'M' ).  "Manual

  endmethod.
  method ZIF_VCXI_PXSS_SCORES_AP~SET_SCORE_AP.

    data: LT_ISCOR     type ZVCXI_PXS_TT_ISCOR,
          LT_SCORE_COM type ZVCXI_PXSS_TT_SCORE_COM,
          LT_TAPE_COM  type ZVCXI_PXSS_TT_TAPE_COM.


***--------------------------------------------------------------------------------------
*** Set IDs to Parameter
    if IT_SCORE_AP is supplied.
      LT_ISCOR = value #( for S_SCORE_AP in IT_SCORE_AP where ( FAPPL eq ABAP_TRUE ) ( S_SCORE_AP-ISCOR ) ).
      ME->SET_ISCAP( IT_ISCOR = LT_ISCOR ).
    endif.

*** Apply all Scores
    if IF_SCORE_FAALL is supplied.
      ME->SET_ISCAP( IF_FAALL = IF_SCORE_FAALL ).
    endif.

***--------------------------------------------------------------------------------------
*** Set Net Scores for Nested Products
    if ME->GET_FNEST( ) and
       IT_SCORE_AP is supplied.
      LT_SCORE_COM = corresponding #( IT_SCORE_AP ).
***   Remove Trim Scores
      ZCL_VCXI_PXSS_BL_SCORE=>REMOVE_TRIM( exporting IF_DIMEN          = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_WIDTH
                                           changing  CT_SCORE_COM      = LT_SCORE_COM
                                                     CT_TAPE_COM       = LT_TAPE_COM ).
      ZCL_VCXI_PXSS_BL_SCORE=>REMOVE_TRIM( exporting IF_DIMEN          = ZCL_VCXI_PXSS_BL_SCORE=>C_DIMEN_LENGTH
                                           changing  CT_SCORE_COM      = LT_SCORE_COM
                                                     CT_TAPE_COM       = LT_TAPE_COM ).
      ME->SET_SCORE( IT_SCORE = LT_SCORE_COM ).
    endif.

  endmethod.
  method ZIF_VCXI_XCS_NGREP~FILL.

    data: LT_ATTR type CR_NETGRAPH_JSON->YT_ATTRIBUTE.


*** Get Attribute Data
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE     = ME->ZIF_VCXI_PXSS_DCUT~GET_TDCUT( )   "Die Cut Type
                                changing  CT_ATTR      = LT_ATTR ).
    CR_NETGRAPH_JSON->ADD_ATTR( exporting IF_VALUE     = ME->GET_NOUTT( )                      "No of Outs
                                          IF_ALPHA_OUT = ABAP_TRUE
                                changing  CT_ATTR      = LT_ATTR ).

*** Add Node
    data(LF_NODE_KEY) = CR_NETGRAPH_JSON->ADD_NODE( IF_TITLE      = |{ ME->GET_DESCR( ) }|
                                                    IF_DESCR      = |{ ME->GET_DESCR( ) }|
                                                    IF_ICON       = 'sap-icon://scissors'
                                                    IF_STATUS     = CR_NETGRAPH_JSON->GET_STATUS_BY_GATE( ME->R_GATE )
                                                    IF_GROUP_KEY  = IF_GROUP_KEY
                                                    IT_ATTR       = LT_ATTR ).

*** Register Gate to Node
    CR_NETGRAPH_JSON->REGISTER_TO_NODE( IR_OBJECT   = ME->R_GATE
                                        IF_NODE_KEY = LF_NODE_KEY ).

  endmethod.
  method ZIF_VCXI_XCSS_TUSER~GET_DESCR.

*** Die Cut Tool Description
    RF_DESCR = ME->ZIF_VCXI_PXSS_DCUT~GET_DCTTD( ).

  endmethod.
  method ZIF_VCXI_XCSS_TUSER~GET_DFLT_TCEST.

    data(LR_PR_TINFO) = ME->GET_PRVDR_TINFO( ).
    check LR_PR_TINFO is bound.

*** Get default Estimated Tool Costs for Die Cut Tools
    RS_TCEST = ZCL_VCXI_PXSS_CUST_TOOL_DCT=>GET_DFLT_TCEST( IF_WERKS = ME->GET_WERKS( )
                                                            IF_TDCUT = ME->ZIF_VCXI_PXSS_DCUT~GET_TDCUT( )
                                                            IF_LIFNR = LR_PR_TINFO->GET_LIFNR( )
                                                            IF_DATE  = ME->R_GATE->GET_APPDATA( )->F_DCONF
                                                            IS_RULEN = ME->ZIF_VCXI_PXSS_DCUT~GET_RULEN( ) ).

  endmethod.
  method ZIF_VCXI_XCSS_TUSER~GET_DFLTK.

*** Die Cut Type as Default Key
    RF_DFLTK = ME->ZIF_VCXI_PXSS_DCUT~GET_TDCUT( ).

  endmethod.
  method ZIF_VCXI_XCSS_TUSER~GET_ISVCE.

    RF_ISVCE = ME->R_GATE->F_ID.

  endmethod.
  method ZIF_VCXI_XCSS_TUSER~GET_WERKS.

    RF_WERKS = ME->GET_WERKS( ).

  endmethod.
