
class ZCL_VCXI_XCS_CUST_MATNR definition
  public
  create protected .

public section.

  types:
    YT_TD022 type standard table of ZVCXI_XCS_TD022 with default key .
  types:
    YT_EKOMD type standard table of EKOMD with default key .

  data F_CHECK_MATNR type ABAP_BOOL read-only .
  data F_CHECK_MAT_MARC type ABAP_BOOL read-only .
  data F_DATE type DATS read-only .
  data F_MATNR type MATNR read-only .
  data F_PURCH type ZVCXI_XCS_PURCH read-only .
  data F_WERKS type WERKS_D read-only .
  data F_WERTU type WERTU read-only .
  data S_PRICE type ZVCXI_XCS_S_PRICE read-only .
  data S_PRICP type ZVCXI_XCS_S_PRICP read-only .
  data T_MAPSET type ZVCXI_XCS_TT_MAPSET read-only .

  methods CHECK_IS_TOOL
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods CHECK_MAPSET
    importing
      !IT_SETID type ZVCXI_XCS_TT_SETID
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS
    raising
      /VCXI/CX_CKX .
  methods DO_FREE .
  class-methods GET_DUMMY_MATNR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    returning
      value(RF_MATNR) type MATNR
    raising
      /VCXI/CX_CKX .
  class-methods GET_INSTANCE
    importing
      !IF_MATNR type MATNR
      !IF_WERKS type WERKS_D
      !IF_DATE type DATS default SY-DATUM
    returning
      value(RR_INSTANCE) type ref to ZCL_VCXI_XCS_CUST_MATNR
    raising
      /VCXI/CX_CKX .
  methods GET_MAPSET
    importing
      !IT_SETID type ZVCXI_XCS_TT_SETID
    returning
      value(RT_MAPSET) type ZVCXI_XCS_TT_MAPSET
    raising
      /VCXI/CX_CKX .
  methods GET_SCALE_PRICE
    importing
      !IF_EKORG type EKORG
      !IF_LIFNR type LIFNR
      !IS_CONSU type ZVCXI_XCSP_S_CONSU
      !IF_DATUM type DATUM
    exporting
      !ES_PRICE type ZVCXI_XCS_S_PRICE
      !ES_PRICP type ZVCXI_XCS_S_PRICP
      !ET_EKOMD type YT_EKOMD
    raising
      /VCXI/CX_CKX .
  methods INIT_MAPSET
    raising
      /VCXI/CX_CKX .
  class-methods IS_DUMMY_MATNR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
      !IF_MATNR type MATNR
    returning
      value(RF_RETURN) type ABAP_BOOL
    raising
      /VCXI/CX_CKX .
  methods GET_NTGEW
    importing
      !IS_AVGCO type ZVCXI_XCS_S_AVGCO optional
    exporting
      !EF_NTGEW type NTGEW
      !EF_GEWEI type GEWEI
    raising
      /VCXI/CX_CKX .
protected section.

  types:
    begin of YS_INSTANCE,
            MATNR      type        MATNR,
            WERKS      type        WERKS_D,
            DATE       type        DATS,
            R_INSTANCE type ref to ZCL_VCXI_XCS_CUST_MATNR,
          end   of YS_INSTANCE .
  types:
    YT_INSTANCE type standard table of YS_INSTANCE with default key .

  constants C_MCTXT_SVC type /VCXI/CKXC_MCTXT value 'ZVCXI_SVC' ##NO_TEXT.
  constants C_SETID_XCS_MATNR type /VCXI/CKXC_SETID value 'ZVCXI_XCS_MATNR' ##NO_TEXT.
  data F_IS_TOOL type ABAP_BOOL .
  class-data T_INSTANCE type YT_INSTANCE .
  class-data T_TD022 type YT_TD022 .

  methods CHECK_MATNR
    raising
      /VCXI/CX_CKX .
  methods CHECK_MAT_MARC
    raising
      /VCXI/CX_CKX .
  methods GET_PRICE_AND_PRICP
    raising
      /VCXI/CX_CKX .
  class-methods GET_WERTU
    importing
      !IF_MTART type MTART
      !IF_WERKS type WERKS_D
    returning
      value(RF_WERTU) type WERTU .
private section.
endclass. "ZCL_VCXI_XCS_CUST_MATNR definition
class ZCL_VCXI_XCS_CUST_MATNR implementation.
method CHECK_IS_TOOL.

  data: LF_OBJID type CR_OBJID.

*** We already now if Material is a Tool or not
  if ME->F_IS_TOOL is not initial.
    if ME->F_IS_TOOL eq ABAP_TRUE.
      move ABAP_TRUE to RF_RETURN.
    endif.

*** Wel need to read if we are a Tool or not
  else.
    select single OBJID
           into LF_OBJID
           from CRVM_A
          where OBJTY eq 'FH'
           and  MATNR eq ME->F_MATNR
           and  WERKS eq ME->F_WERKS.
    if SY-SUBRC eq 0.
      move ABAP_TRUE      to RF_RETURN.
      move ABAP_TRUE      to ME->F_IS_TOOL.
    else.
      move ABAP_UNDEFINED to ME->F_IS_TOOL.
    endif.
  endif.

endmethod.
method CHECK_MAPSET.

  data: LT_MAPSET type ZVCXI_XCS_TT_MAPSET.
  data: LS_MAPSET type ZVCXI_XCS_S_MAPSET,
        LS_SETVA  type /VCXI/CKXC_S_SETVA,
        LS_MAPVC  type /VCXI/CKXC_S_MAPVC,
        LS_MAPVN  type /VCXI/CKXC_S_MAPVN.

*** Get Mapping Set -> and check if it is initial
  LT_MAPSET = ME->GET_MAPSET( IT_SETID = IT_SETID ).

  loop at LT_MAPSET into LS_MAPSET.
    loop at LS_MAPSET-T_SETVA into LS_SETVA.
      loop at LS_SETVA-T_MAPVC into LS_MAPVC.
        check LS_MAPVC-VAORG is not initial.
        RF_RETURN = ABAP_TRUE.
        exit.
      endloop.
      loop at LS_SETVA-T_MAPVN into LS_MAPVN.
        check LS_MAPVN-ATFLV is not initial.
        RF_RETURN = ABAP_TRUE.
        exit.
      endloop.
    endloop.
  endloop.

endmethod.
  method CHECK_MAT_MARC.

    data: LS_MARC type MARC.


    clear ME->F_CHECK_MAT_MARC.
    check ME->F_MATNR is not initial and
          ME->F_WERKS is not initial.

    call function 'MARC_SINGLE_READ'
      exporting
        MATNR  = ME->F_MATNR
        WERKS  = ME->F_WERKS
      importing
        WMARC  = LS_MARC
      exceptions
        others = 5.

    if SY-SUBRC eq 0.
***   Check also deletion Flag
      if LS_MARC-LVORM = ABAP_FALSE.
        move ABAP_TRUE  to ME->F_CHECK_MAT_MARC.
      else.
        move ABAP_FALSE to ME->F_CHECK_MAT_MARC.
      endif.
    else.
      ME->F_CHECK_MAT_MARC = ABAP_FALSE.
    endif.


  endmethod.
method CHECK_MATNR.

  data: LF_MATNR   type BAPIMATALL-MATERIAL,
        LF_DELFLAG type BAPIMATALL-DEL_FLAG.
  data:  LS_RETURN  type BAPIRETURN1.

  check ME->F_MATNR is not initial.
  move ME->F_MATNR to LF_MATNR.

  call function 'BAPI_MATERIAL_EXISTENCECHECK'
    exporting
      MATERIAL_LONG = ME->F_MATNR
    importing
      RETURN        = LS_RETURN
      DELETION_FLAG = LF_DELFLAG.

  if LS_RETURN-TYPE ne     'S'     and
     LS_RETURN-TYPE is not initial.
    move ABAP_FALSE to ME->F_CHECK_MATNR.

*** Raise Exception only if Material has not been marked for deletion
    if LF_DELFLAG ne ABAP_TRUE.
      raise exception type /VCXI/CX_CKX
        exporting
          F_MSGTY = LS_RETURN-TYPE
          F_MSGID = LS_RETURN-ID
          F_MSGNO = LS_RETURN-NUMBER
          F_MSGV1 = LS_RETURN-MESSAGE_V1
          F_MSGV2 = LS_RETURN-MESSAGE_V2
          F_MSGV3 = LS_RETURN-MESSAGE_V3
          F_MSGV4 = LS_RETURN-MESSAGE_V4.
    endif.
  else.
    move ABAP_TRUE to ME->F_CHECK_MATNR.
  endif.

endmethod.
method CLASS_CONSTRUCTOR.

*** Load Dummy Materials
  select *
         from ZVCXI_XCS_TD022
         into table T_TD022.

endmethod.
  method CONSTRUCTOR.

    field-symbols: <S_INSTANCE> type        YS_INSTANCE.


    try.
        move IF_MATNR to ME->F_MATNR.
        move IF_WERKS to ME->F_WERKS.
        move IF_DATE  to ME->F_DATE.

***     Add to Instance Buffer
        append initial line to ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE assigning <S_INSTANCE>.
        move ME->F_MATNR to <S_INSTANCE>-MATNR.
        move ME->F_WERKS to <S_INSTANCE>-WERKS.
        move ME->F_DATE  to <S_INSTANCE>-DATE.
        move ME          to <S_INSTANCE>-R_INSTANCE.

***     Check Material Number
        ME->CHECK_MATNR( ).
        check ME->F_CHECK_MATNR eq ABAP_TRUE.

***     Get Material Data
        select single MTART
               into @data(LF_MTART)
               from MARA
              where MATNR = @ME->F_MATNR.
        if SY-SUBRC ne 0.
          /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
        endif.

***     Check the Material Plant View
        ME->CHECK_MAT_MARC( ).

***     Load Price
        ME->F_WERTU = ZCL_VCXI_XCS_CUST_MATNR=>GET_WERTU( IF_MTART = LF_MTART
                                                          IF_WERKS = ME->F_WERKS ).
        if ME->F_CHECK_MAT_MARC eq ABAP_TRUE.
          ME->GET_PRICE_AND_PRICP( ).
        endif.

      cleanup.
        ME->DO_FREE( ).
    endtry.

  endmethod.
method DO_FREE.

  delete ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE where MATNR eq ME->F_MATNR
                                              and  WERKS eq ME->F_WERKS
                                              and  DATE  eq ME->F_DATE.

endmethod.
method GET_DUMMY_MATNR.

  data: LS_CMPRK type /VCXI/VKC_S_CMPRK,
        LS_TD022 type ZVCXI_XCS_TD022.
  data: LT_TD022 type YT_TD022.

  check IR_GATE is bound.
  IR_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK ).

  move T_TD022 to LT_TD022.
  delete LT_TD022 where ISVCE ne IR_GATE->F_ID
                     or MATNR is initial
                     or FMADE is initial
                     or CMATN ne LS_CMPRK-CMATN
                     or PRFID ne LS_CMPRK-PRFID.

  if LT_TD022 is initial.
    move T_TD022 to LT_TD022.
    delete LT_TD022 where ISVCE ne IR_GATE->F_ID
                       or MATNR is initial
                       or FMADE is initial
                       or CMATN is not initial
                       or PRFID is not initial.

  endif.

  read table LT_TD022 into LS_TD022 index 1.
  move LS_TD022-MATNR to RF_MATNR.

endmethod.
method GET_INSTANCE.

  data:  LS_INSTANCE type YS_INSTANCE.

  read table ZCL_VCXI_XCS_CUST_MATNR=>T_INSTANCE into LS_INSTANCE
                                                 with key MATNR = IF_MATNR
                                                          WERKS = IF_WERKS
                                                          DATE  = IF_DATE.
  if SY-SUBRC eq 0.
    move LS_INSTANCE-R_INSTANCE to RR_INSTANCE.
  else.
    try.
        create object RR_INSTANCE
          exporting
            IF_MATNR = IF_MATNR
            IF_WERKS = IF_WERKS
            IF_DATE  = IF_DATE.
      cleanup.
        clear RR_INSTANCE.
    endtry.
  endif.

endmethod.
method GET_MAPSET.

  data:  LF_OBJNUM    type        OBJNUM,
         LF_SETID     type        /VCXI/CKXC_SETID.
  data:  LS_MAPSET    type        ZVCXI_XCS_S_MAPSET.
  data:  LT_SETVA     type        /VCXI/CKXC_TT_SETVA.

  check ME->F_MATNR is not initial.

  loop at IT_SETID into LF_SETID.

*** Looad only if needed
    read table ME->T_MAPSET with key SETID = LF_SETID into LS_MAPSET.
    if SY-SUBRC = 0.
      append LS_MAPSET to RT_MAPSET.
      continue.
    endif.

*** Load Mapping Set Values
    try.
        move ME->F_MATNR to LF_OBJNUM.
        LT_SETVA = /VCXI/CL_CKXC_CCM=>GET_SETVA( IF_SETID  = LF_SETID
                                                 IF_OBJNUM = LF_OBJNUM
                                                 IF_MCTXT  = C_MCTXT_SVC ).


        move LT_SETVA to LS_MAPSET-T_SETVA.
        move LF_SETID to LS_MAPSET-SETID.
        append LS_MAPSET to ME->T_MAPSET.
        append LS_MAPSET to RT_MAPSET.
      catch /VCXI/CX_CKX.
        continue.
    endtry.
  endloop.

endmethod.
  method GET_NTGEW.

    data: LF_MEINS type MEINS.
    data: LS_AVGCO type ZVCXI_XCS_S_AVGCO.


*** Get Net Weight of Material
    select single NTGEW, GEWEI, MEINS
           into ( @EF_NTGEW, @EF_GEWEI, @LF_MEINS )
           from MARA
          where MATNR eq @ME->F_MATNR.
    check SY-SUBRC eq 0.

*** Use Base Unit in case of Weight and not maintained Net Weight
    if EF_NTGEW is initial and
       ZCL_VCXI_XCS_SERVICE_UNIT=>GET_DIMID( IF_UOM = LF_MEINS ) eq 'MASS'.
      EF_NTGEW = 1.
      EF_GEWEI = LF_MEINS.
    endif.

    if IS_AVGCO is supplied.
***   Convert to Base UoM
      ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_MATNR_UNIT( exporting IF_MATNR     = ME->F_MATNR
                                                               IF_VALUE_IN  = IS_AVGCO-AVGCO
                                                               IF_UOM_IN    = IS_AVGCO-AVGCO_UOM
                                                     importing EF_VALUE_OUT = LS_AVGCO-AVGCO
                                                               EF_UOM_OUT   = LS_AVGCO-AVGCO_UOM ).
***   Adjust by Consumption
      EF_NTGEW = EF_NTGEW * LS_AVGCO-AVGCO.
    endif.

  endmethod.
method GET_PRICE_AND_PRICP.

  data:  LF_VPRSV  type VPRSV,
         LF_STPRS  type STPRS,
         LF_VERPR  type VERPR,
         LF_PEINH  type PEINH,
         LF_MEINS  type MEINS,
         LF_BUKRS  type BUKRS.
  data:  LS_T001   type T001.

***----------------------------------------------------------------------------
*** Get Material Base Unit
  select single MEINS
         into LF_MEINS
         from MARA
        where MATNR eq ME->F_MATNR.
  check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Get Price
  select single VPRSV STPRS VERPR PEINH
         into (LF_VPRSV, LF_STPRS, LF_VERPR, LF_PEINH)
         from MBEW
        where MATNR eq ME->F_MATNR
         and  BWKEY eq ME->F_WERKS.
  case LF_VPRSV.
    when 'S'.
      move LF_STPRS to ME->S_PRICE-PRICE.
    when 'V'.
      move LF_VERPR to ME->S_PRICE-PRICE.
  endcase.

***----------------------------------------------------------------------------
*** Get the Company Code
  call function 'CO_RM_COMPANYCODE_FIND'
    exporting
      WERKS    = ME->F_WERKS
    importing
      COMPCODE = LF_BUKRS
    exceptions
      NO_ENTRY = 1
      others   = 2.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Get Company Code Data
  call function 'FI_COMPANY_CODE_DATA'
    exporting
      I_BUKRS      = LF_BUKRS
    importing
      E_T001       = LS_T001
    exceptions
      SYSTEM_ERROR = 1.
  if SY-SUBRC ne 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Get Currency
  move LS_T001-WAERS to ME->S_PRICE-PRICE_CURR.

***----------------------------------------------------------------------------
*** Get Price Unit
  move LF_PEINH to ME->S_PRICP-PRICP.
  move LF_MEINS to ME->S_PRICP-PRICP_UOM.

endmethod.
method GET_SCALE_PRICE.

  data:          LF_MSGV1               type          SYMSGV,
                 LF_MSGV2               type          SYMSGV,
                 LF_MSGV3               type          SYMSGV.
  data:          LS_EKOMD               type          EKOMD.
  data:          LT_EINA                type table of EINA,
                 LT_EINE                type table of EINE,
                 LT_EKOMD               type table of EKOMD.
  field-symbols: <S_EINA>               type          EINA,
                 <S_EINE>               type          EINE.


*** Search all inforecords for this material
  call function 'PROMOTION_FIND_EKINFO_RECORDS'
    exporting
      P_ARTNR       = ME->F_MATNR
    tables
      P_T_EINA      = LT_EINA
      P_T_EINE      = LT_EINE
    exceptions
      NO_EINA_FOUND = 1
      NO_EINE_FOUND = 2
      others        = 3.

  if SY-SUBRC <> 0.
    /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
  endif.

*** Delete irrelvant entries
  delete LT_EINE where EKORG ne IF_EKORG
                    or ESOKZ ne '0'.

  read table LT_EINA assigning <S_EINA> with key LIFNR = IF_LIFNR.
  check <S_EINA> is assigned.

*** Read the record for the specific plant
  read table LT_EINE assigning <S_EINE> with key INFNR = <S_EINA>-INFNR
                                                 WERKS = ME->F_WERKS.
  if <S_EINE> is not assigned.
*** In case there is no plant specific info record use the plant independent one
    read table LT_EINE assigning <S_EINE> with key INFNR = <S_EINA>-INFNR
                                                   WERKS = ''.
  endif.
  check <S_EINE> is assigned.

*** Get the scale prices
  call function 'ME_GET_INFORECORD_CONDITIONS'
    exporting
      I_EKORG = <S_EINE>-EKORG
      I_ESOKZ = <S_EINE>-ESOKZ
      I_INFNR = <S_EINE>-INFNR
      I_LIFNR = IF_LIFNR
      I_MATKL = <S_EINA>-MATKL
      I_MATNR = <S_EINA>-MATNR
      I_WERKS = <S_EINE>-WERKS
    tables
      TEKOMD  = LT_EKOMD.

  if LT_EKOMD is not initial.
*** Delete the first row, it does not contain a scale but the header data
    delete LT_EKOMD index 1.

*** Return the scales
    ET_EKOMD = LT_EKOMD.

*** Determine the correct scale for the Consumption
    delete LT_EKOMD where KSTBM gt IS_CONSU-CONSU.
    sort LT_EKOMD by KSTBM descending.
    read table LT_EKOMD into LS_EKOMD index 1.

    if LS_EKOMD-KMEIN eq IS_CONSU-CONSU_UOM.
***   In case the price unit is eqal to the scale unit do a conversion
***   of the price to the price unit quantity
      if ME->S_PRICP-PRICP_UOM eq LS_EKOMD-KMEIN and
         LS_EKOMD-KPEIN is not initial.
        ES_PRICE-PRICE       = LS_EKOMD-KBETR * ME->S_PRICP-PRICP / LS_EKOMD-KPEIN.
        ES_PRICE-PRICE_CURR  = LS_EKOMD-KOEIN.
        ES_PRICP-PRICP       = ME->S_PRICP-PRICP .
        ES_PRICP-PRICP_UOM   = ME->S_PRICP-PRICP_UOM.
      else.
        ES_PRICE-PRICE       = LS_EKOMD-KBETR.
        ES_PRICE-PRICE_CURR  = LS_EKOMD-KOEIN.
        ES_PRICP-PRICP       = LS_EKOMD-KPEIN.
        ES_PRICP-PRICP_UOM   = LS_EKOMD-KMEIN.
      endif.

    else.
***   Raise exeption: Scales are maintained in other unit
      call function 'CONVERSION_EXIT_ALPHA_OUTPUT'
        exporting
          INPUT  = ME->F_MATNR
        importing
          OUTPUT = LF_MSGV1.
      condense LF_MSGV1 no-gaps.
      LF_MSGV2 = IS_CONSU-CONSU_UOM.
      condense LF_MSGV2 no-gaps.
      LF_MSGV3 = LS_EKOMD-KMEIN.
      condense LF_MSGV3 no-gaps.

      /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                            IF_MSGID = 'ZVCXI_XCS'
                                            IF_MSGNO = '102'
                                            IF_MSGV1 = LF_MSGV1
                                            IF_MSGV2 = LF_MSGV2
                                            IF_MSGV3 = LF_MSGV3 ).
    endif.

  else.
*** Raise exeption: No scales found
    call function 'CONVERSION_EXIT_ALPHA_OUTPUT'
      exporting
        INPUT  = ME->F_MATNR
      importing
        OUTPUT = LF_MSGV1.
    condense LF_MSGV1 no-gaps.
    call function 'CONVERSION_EXIT_ALPHA_OUTPUT'
      exporting
        INPUT  = IF_LIFNR
      importing
        OUTPUT = LF_MSGV2.
    condense LF_MSGV2 no-gaps.
    LF_MSGV3 = ME->F_WERKS.
    condense LF_MSGV3 no-gaps.
    /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                          IF_MSGID = 'ZVCXI_XCS'
                                          IF_MSGNO = '101'
                                          IF_MSGV1 = LF_MSGV1
                                          IF_MSGV2 = LF_MSGV2
                                          IF_MSGV3 = LF_MSGV3 ).
  endif.

endmethod.
  method GET_WERTU.

    types:
      begin of YS_BUFFER,
        MTART type MTART,
        WERKS type WERKS_D,
        WERTU type WERTU,
      end   of YS_BUFFER.

    statics: LT_BUFFER type sorted table of YS_BUFFER with unique key MTART WERKS.


    if not LINE_EXISTS( LT_BUFFER[ MTART = IF_MTART
                                   WERKS = IF_WERKS ] ).
***   Get Valuation area
      select single BWKEY
             into @data(LF_BWKEY)
             from T001W
            where WERKS eq @IF_WERKS.

***   Get Value Updating in Material Master Record
      select single WERTU
             into @data(LF_WERTU)
             from T134M
            where MTART eq @IF_MTART
             and  BWKEY eq @LF_BWKEY.
      if SY-SUBRC ne 0.
        clear LF_WERTU.
      endif.

***   Add to Buffer
      insert value #( MTART = IF_MTART
                      WERKS = IF_WERKS
                      WERTU = LF_WERTU ) into table LT_BUFFER.
    endif.

*** Get buffered Value
    RF_WERTU = LT_BUFFER[ MTART = IF_MTART
                          WERKS = IF_WERKS ]-WERTU.

  endmethod.
method INIT_MAPSET.

  free: ME->T_MAPSET.

endmethod.
method IS_DUMMY_MATNR.

  data: LS_CMPRK type /VCXI/VKC_S_CMPRK.
  data: LT_TD022 type YT_TD022.

  check IR_GATE is bound.
  IR_GATE->GET_CONFIG_INFO( importing ES_CMPRK = LS_CMPRK ).

  move T_TD022 to LT_TD022.
  delete LT_TD022 where ISVCE ne IR_GATE->F_ID
                     or MATNR is initial
                     or CMATN ne LS_CMPRK-CMATN
                     or PRFID ne LS_CMPRK-PRFID.

  if LT_TD022 is initial.
    move T_TD022 to LT_TD022.
    delete LT_TD022 where ISVCE ne IR_GATE->F_ID
                       or MATNR is initial
                       or CMATN is not initial
                       or PRFID is not initial.

  endif.

  read table LT_TD022 with key MATNR = IF_MATNR
                      transporting no fields.
  check SY-SUBRC = 0.
  move ABAP_TRUE to RF_RETURN.

endmethod.
