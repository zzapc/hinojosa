
class ZCL_VCXI_FBSS_PR_MS_BPROC definition
  public
  inheriting from ZCL_VCXI_F0SS_PR_MS_XPROC
  create public .

public section.

  interfaces ZIF_VCXI_FBSS_COMM_NEXT .

  constants C_IEVNT_O_HNDDIM_CHANGED type /VCXI/VKSC_IEVNT value 'HNDDIM_CHANGED' ##NO_TEXT.
  constants C_IPRVT_MS_BPROC type /VCXI/VKSC_IPRVT value 'ZVCXI_FBSS_MS_BPROC' ##NO_TEXT.
  constants C_PARID_BGHEI type /VCXI/VKS_PARID value 'ZVCXI_FB_BGHEI' ##NO_TEXT.
  constants C_PARID_BGWID type /VCXI/VKS_PARID value 'ZVCXI_FB_BGWID' ##NO_TEXT.
  constants C_PARID_FOBOT type /VCXI/VKS_PARID value 'ZVCXI_FB_FOBOT' ##NO_TEXT.
  constants C_PARID_FOTOP type /VCXI/VKS_PARID value 'ZVCXI_FB_FOTOP' ##NO_TEXT.
  constants C_PARID_GUBOT type /VCXI/VKS_PARID value 'ZVCXI_FB_GUBOT' ##NO_TEXT.
  constants C_PARID_GULEF type /VCXI/VKS_PARID value 'ZVCXI_F0_GULEF' ##NO_TEXT.
  constants C_PARID_GURIG type /VCXI/VKS_PARID value 'ZVCXI_F0_GURIG' ##NO_TEXT.
  constants C_PARID_GUTOP type /VCXI/VKS_PARID value 'ZVCXI_FB_GUTOP' ##NO_TEXT.
  constants C_PARID_HNDHE type /VCXI/VKS_PARID value 'ZVCXI_F0_HNDHE' ##NO_TEXT.
  constants C_PARID_HNDLE type /VCXI/VKS_PARID value 'ZVCXI_F0_HNDLE' ##NO_TEXT.
  constants C_PARID_HNDWI type /VCXI/VKS_PARID value 'ZVCXI_F0_HNDWI' ##NO_TEXT.
  constants C_PARID_IBAGT type /VCXI/VKS_PARID value 'ZVCXI_FB_IBAGT' ##NO_TEXT.
  constants C_PARID_OLWID type /VCXI/VKS_PARID value 'ZVCXI_FB_OLWID' ##NO_TEXT.
  constants C_PARID_TWICK type /VCXI/VKS_PARID value 'ZVCXI_FB_TWICK' ##NO_TEXT.
  constants C_PARID_WIBST type /VCXI/VKS_PARID value 'ZVCXI_FB_WIBST' ##NO_TEXT.
  constants C_PARID_WIHDI type /VCXI/VKS_PARID value 'ZVCXI_FB_WIHDI' ##NO_TEXT.
  constants C_PARID_WIHSP type /VCXI/VKS_PARID value 'ZVCXI_FB_WIHSP' ##NO_TEXT.
  constants C_PARID_WILIP type /VCXI/VKS_PARID value 'ZVCXI_FB_WILIP' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !IR_GATE type ref to /VCXI/CL_VKSR_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_BGDIM_VALUE
    returning
      value(RT_BGDIM_VALUE) type ZVCXI_FBSS_TT_BGDIM_VALUE
    raising
      /VCXI/CX_CKX .
  methods GET_BGFPX
    exporting
      !EF_BGFPX type ZVCXI_FBS_BGFPX
      !EF_SETBY type /VCXI/VKSR_SETBY
      !ER_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP
    raising
      /VCXI/CX_CKX .
  methods GET_BGHEI
    exporting
      !ES_BGHEI type ZVCXI_FBS_S_BGHEI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_BGWGT
    exporting
      !ES_BGWGT type ZVCXI_FBS_S_BGWGT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_BGWID
    exporting
      !ES_BGWID type ZVCXI_FBS_S_BGWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_HNDDIM
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_FOVRR type ZVCXI_XCS_FOVRR
    returning
      value(RS_HNDDIM) type ZVCXI_F0S_S_HNDDIM
    raising
      /VCXI/CX_CKX .
  methods GET_FOBOT
    exporting
      !ES_FOBOT type ZVCXI_FBS_S_FOBOT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_FOTOP
    exporting
      !ES_FOTOP type ZVCXI_FBS_S_FOTOP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_HNDDIM
    importing
      !IS_HNDDIM type ZVCXI_F0S_S_HNDDIM optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
      !IF_FOVRR type ZVCXI_XCS_FOVRR optional
    raising
      /VCXI/CX_CKX .
  methods GET_GUBOT
    exporting
      !ES_GUBOT type ZVCXI_FBS_S_GUBOT
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_GULEF
    exporting
      !ES_GULEF type ZVCXI_F0S_S_GULEF
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_TWICK
    exporting
      !EF_TWICK type ZVCXI_FBS_TWICK
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_GURIG
    exporting
      !ES_GURIG type ZVCXI_F0S_S_GURIG
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WILIP
    exporting
      !ES_WILIP type ZVCXI_FBS_S_WILIP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_GUTOP
    exporting
      !ES_GUTOP type ZVCXI_FBS_S_GUTOP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIHDI
    exporting
      !ES_WIHDI type ZVCXI_FBS_S_WIHDI
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_IBAGT
    exporting
      !EF_IBAGT type ZVCXI_FBS_IBAGT
      !EF_SETBY type /VCXI/VKSR_SETBY
      !EF_DESCR type /VCXI/CKX_DESCR
    raising
      /VCXI/CX_CKX .
  methods GET_WIHSP
    exporting
      !ES_WIHSP type ZVCXI_FBS_S_WIHSP
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_WIBST
    exporting
      !EF_WIBST type ZVCXI_FBS_WIBST
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods GET_OLWID
    exporting
      !ES_OLWID type ZVCXI_FBS_S_OLWID
      !EF_SETBY type /VCXI/VKSR_SETBY
    raising
      /VCXI/CX_CKX .
  methods SET_BGBPX
    importing
      !IF_BGBPX type ZVCXI_FBS_BGBPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGFPX
    importing
      !IF_BGFPX type ZVCXI_FBS_BGFPX
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGHEI
    importing
      !IS_BGHEI type ZVCXI_FBS_S_BGHEI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGWGT
    importing
      !IS_BGWGT type ZVCXI_FBS_S_BGWGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_BGWID
    importing
      !IS_BGWID type ZVCXI_FBS_S_BGWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOBOT
    importing
      !IS_FOBOT type ZVCXI_FBS_S_FOBOT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_FOTOP
    importing
      !IS_FOTOP type ZVCXI_FBS_S_FOTOP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GUBOT
    importing
      !IS_GUBOT type ZVCXI_FBS_S_GUBOT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GULEF
    importing
      !IS_GULEF type ZVCXI_F0S_S_GULEF
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GURIG
    importing
      !IS_GURIG type ZVCXI_F0S_S_GURIG
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_GUTOP
    importing
      !IS_GUTOP type ZVCXI_FBS_S_GUTOP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_IBAGT
    importing
      !IF_IBAGT type ZVCXI_FBS_IBAGT
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_OLWID
    importing
      !IS_OLWID type ZVCXI_FBS_S_OLWID
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_TWICK
    importing
      !IF_TWICK type ZVCXI_FBS_TWICK
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WILIP
    importing
      !IS_WILIP type ZVCXI_FBS_S_WILIP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WIHDI
    importing
      !IS_WIHDI type ZVCXI_FBS_S_WIHDI
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WIHSP
    importing
      !IS_WIHSP type ZVCXI_FBS_S_WIHSP
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_WIBST
    importing
      !IF_WIBST type ZVCXI_FBS_WIBST
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods GET_CONFIG_INFO
    redefinition .
  methods GET_MATNR_DESCR
    redefinition .
  methods GET_STATUS
    redefinition .
  methods GET_STATUS_MSG
    redefinition .
  methods HANDLE_EVENT
    redefinition .
  methods IS_OPENSPV_ALLOWED
    redefinition .
  methods OPEN
    redefinition .
  methods ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD
    redefinition .
  methods GET_WERKS
    redefinition .
protected section.

  constants C_IEVNT_I_INIT_BGFPX type /VCXI/VKSC_IEVNT value 'INIT_BGFPX' ##NO_TEXT.
  constants C_IEVNT_I_INIT_BPART type /VCXI/VKSC_IEVNT value 'INIT_BPART' ##NO_TEXT.
  constants C_IEVNT_I_INIT_HANDLE type /VCXI/VKSC_IEVNT value 'INIT_HANDLE' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_BGBPX type /VCXI/VKSC_IEVNT value 'RECALC_BGBPX' ##NO_TEXT.
  constants C_IEVNT_I_RECALC_DIMEN type /VCXI/VKSC_IEVNT value 'RECALC_DIMEN' ##NO_TEXT.
  constants C_IEVNT_O_BGBPX_CHANGED type /VCXI/VKSC_IEVNT value 'BGBPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGFPX_CHANGED type /VCXI/VKSC_IEVNT value 'BGFPX_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGHEI_CHANGED type /VCXI/VKSC_IEVNT value 'BGHEI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGWGT_CHANGED type /VCXI/VKSC_IEVNT value 'BGWGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_BGWID_CHANGED type /VCXI/VKSC_IEVNT value 'BGWID_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_FODIM_CHANGED type /VCXI/VKSC_IEVNT value 'FODIM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_GUDIM_CHANGED type /VCXI/VKSC_IEVNT value 'GUDIM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_IBAGT_CHANGED type /VCXI/VKSC_IEVNT value 'IBAGT_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_OLDIM_CHANGED type /VCXI/VKSC_IEVNT value 'OLDIM_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_TWICK_CHANGED type /VCXI/VKSC_IEVNT value 'TWICK_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIBST_CHANGED type /VCXI/VKSC_IEVNT value 'WIBST_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIHDI_CHANGED type /VCXI/VKSC_IEVNT value 'WIHDI_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WIHSP_CHANGED type /VCXI/VKSC_IEVNT value 'WIHSP_CHANGED' ##NO_TEXT.
  constants C_IEVNT_O_WILIP_CHANGED type /VCXI/VKSC_IEVNT value 'WILIP_CHANGED' ##NO_TEXT.
  constants C_PARID_BGBPX type /VCXI/VKS_PARID value 'ZVCXI_FB_BGBPX' ##NO_TEXT.
  constants C_PARID_BGFPX type /VCXI/VKS_PARID value 'ZVCXI_FB_BGFPX' ##NO_TEXT.
  constants C_PARID_BGWGT type /VCXI/VKS_PARID value 'ZVCXI_FB_BGWGT' ##NO_TEXT.
  data R_CUST_BPROC type ref to ZCL_VCXI_FBSS_CUST_BPROC .

  methods HANDLE_RECALC_DIMEN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_INIT_BGFPX
    raising
      /VCXI/CX_CKX .
  methods CHECK_BGWGT
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_BGDIM
    importing
      !IR_MESSAGE type ref to /VCXI/CL_CKXM_MESSAGE optional
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods HANDLE_RECALC_BGBPX
    raising
      /VCXI/CX_CKX .
  methods CHECK_TWICK
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods CHECK_WIBST
    returning
      value(RF_RETURN) type I
    raising
      /VCXI/CX_CKX .
  methods GET_HNDHE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDHE) type ZVCXI_F0S_S_HNDHE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDLE
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDLE) type ZVCXI_F0S_S_HNDLE
    raising
      /VCXI/CX_CKX .
  methods GET_HNDWI
    exporting
      !EF_SETBY type /VCXI/VKSR_SETBY
    returning
      value(RS_HNDWI) type ZVCXI_F0S_S_HNDWI
    raising
      /VCXI/CX_CKX .
  methods SET_HNDHE
    importing
      !IS_HNDHE type ZVCXI_F0S_S_HNDHE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDLE
    importing
      !IS_HNDLE type ZVCXI_F0S_S_HNDLE optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .
  methods SET_HNDWI
    importing
      !IS_HNDWI type ZVCXI_F0S_S_HNDWI optional
      !IF_SETBY type /VCXI/VKSR_SETBY default 'CALC'
    raising
      /VCXI/CX_CKX .

  methods HANDLE_INIT_CUST_MATNR
    redefinition .
  methods HANDLE_INIT_PRICE
    redefinition .
private section.
endclass. "ZCL_VCXI_FBSS_PR_MS_BPROC definition
class ZCL_VCXI_FBSS_PR_MS_BPROC implementation.
  method CHECK_BGDIM.

*** 0 &1 is maintained and valid.
*** 1 &1 is maintained but not valid.
*** 2 &1 is not maintained.

    data: LF_BPROC_IBAGT type ZVCXI_FBS_IBAGT,
          LF_BFG_IBAGT   type ZVCXI_FBS_IBAGT,
          LF_RETURN      type I.
    data: LS_BGDIM       type ZVCXI_FBSSC_S_BAGTY_BGDIM,
          LS_BPROC_VALUE type ZVCXI_FBSS_S_BGDIM_VALUE,
          LS_BFG_VALUE   type ZVCXI_FBSS_S_BGDIM_VALUE,
          LS_TC010T      type ZVCXI_FBS_TC010T.
    data: LT_BPROC_BGDIM  type ZVCXI_FBSSC_TT_BAGTY_BGDIM,
          LT_BFG_BGDIM    type ZVCXI_FBSSC_TT_BAGTY_BGDIM,
          LT_BPROC_VALUES type ZVCXI_FBSS_TT_BGDIM_VALUE,
          LT_BFG_VALUES   type ZVCXI_FBSS_TT_BGDIM_VALUE,
          LT_GATE_BFG     type /VCXI/VKSR_TT_GATE.
    data: LR_CUST_BAG type ref to ZCL_VCXI_FBSS_CUST_BAG,
          LR_GATE_BFG type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_BFG   type ref to ZCL_VCXI_FBSS_PR_BFG.

    move 0 to RF_RETURN.

*** Check will be perform only for NON-Dummy
    check ME->GET_MATNR( ) is not initial and ME->IS_DUMMY( ) ne ABAP_TRUE.

***--------------------------------------------------------------------------------------
*** Get Bag Finished Good provider
    LT_GATE_BFG = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_FBSS_PR_BFG=>C_IPRVT_BFG
                                         IF_INUSE = ABAP_TRUE ).
    read table LT_GATE_BFG into LR_GATE_BFG index 1.
    if LR_GATE_BFG is bound.
      try.
          move LR_GATE_BFG->R_CLSPR ?to LR_PR_BFG.
        catch CX_SY_MOVE_CAST_ERROR.
          return.
      endtry.
    endif.

***--------------------------------------------------------------------------------------
*** Get Bag Dimension values from BFG
    if LR_PR_BFG is bound.
      move LR_PR_BFG->GET_BGDIM_VALUE( ) to LT_BFG_VALUES.
      LR_PR_BFG->GET_IBAGT( importing EF_IBAGT = LF_BFG_IBAGT ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Bag Customizing for Bag Procurement
    clear LR_CUST_BAG.
    LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_BFG_IBAGT ).
    if LR_CUST_BAG is bound.
      LT_BFG_BGDIM = LR_CUST_BAG->GET_BGDIM( ).
    endif.

***--------------------------------------------------------------------------------------
*** Get Bag Type (Outbound) for Bag Procurement
    ME->GET_IBAGT( importing EF_IBAGT = LF_BPROC_IBAGT ).

***--------------------------------------------------------------------------------------
*** Get Bag Customizing for Bag Procurement
    clear LR_CUST_BAG.
    LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_BPROC_IBAGT ).
    if LR_CUST_BAG is bound.
      LT_BPROC_BGDIM = LR_CUST_BAG->GET_BGDIM( ).
    endif.

*** Get all Bag Dimension values for Bag Procurement
    move ME->GET_BGDIM_VALUE( ) to LT_BPROC_VALUES.

***--------------------------------------------------------------------------------------
*** Check Id of Bag Type
    if LF_BPROC_IBAGT ne LF_BFG_IBAGT.
      move 1 to RF_RETURN.
    elseif LF_BPROC_IBAGT is initial.
      move 2 to RF_RETURN.
    endif.

    if IR_MESSAGE is supplied.
      case RF_RETURN.
        when 0.
***       &1 is maintained and valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'S'
                                   IF_MSGNO = '108'
                                   IF_MSGV1 = text-T01 ).

        when 1.
***       &1 is maintained but not valid.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '109'
                                   IF_MSGV1 = text-T01 ).
        when 2.
***       &1 is not maintained.
          IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                   IF_MSGTY = 'E'
                                   IF_MSGNO = '110'
                                   IF_MSGV1 = text-T01 ).
      endcase.
    endif.

***--------------------------------------------------------------------------------------
*** Check all fields from Bag Procurement against fields from Bag Finished Good
    loop at LT_BPROC_BGDIM into LS_BGDIM.
      clear LF_RETURN.

      clear LS_BFG_VALUE.
      read table LT_BFG_VALUES into LS_BFG_VALUE with key IBDIM = LS_BGDIM-IBDIM.

      clear LS_BPROC_VALUE.
      read table LT_BPROC_VALUES into LS_BPROC_VALUE with key IBDIM = LS_BGDIM-IBDIM.

***   Check If is a mandatory field
      if LS_BGDIM-OBDIM eq 'M'.
        if LS_BPROC_VALUE-BVDIM is initial.
          move 2 to : RF_RETURN, LF_RETURN.
        endif.
      endif.

***   Check values to be equal: BFG = BPROC
      if LS_BFG_VALUE-BVDIM ne LS_BPROC_VALUE-BVDIM.
        move 1 to : RF_RETURN, LF_RETURN.
      endif.

      if IR_MESSAGE is supplied.
        clear LS_TC010T.
        read table ZCL_VCXI_FBSSC_BAGTY=>T_TC010T into LS_TC010T
                                                  with key IBDIM = LS_BGDIM-IBDIM.

        case LF_RETURN.
          when 0.
***         &1 is maintained and valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'S'
                                     IF_MSGNO = '108'
                                     IF_MSGV1 = LS_TC010T-DESCR ).

          when 1.
***         &1 is maintained but not valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '109'
                                     IF_MSGV1 = LS_TC010T-DESCR ).
          when 2.
***         &1 is not maintained.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '110'
                                     IF_MSGV1 = LS_TC010T-DESCR ).
        endcase.

      else.
        check RF_RETURN ne 0.
        exit.
      endif.

    endloop.


***--------------------------------------------------------------------------------------
*** Check all fields from BFG against fields from BPROC
    loop at LT_BFG_BGDIM into LS_BGDIM.
      clear LF_RETURN.

***   Check if the dimension is present in the BPROC
      read table LT_BPROC_BGDIM with key IBDIM = LS_BGDIM-IBDIM
                                transporting no fields.
***   If it is not present return error - the case when is present is caught in the above loop
      check SY-SUBRC is not initial.

      move 2 to : RF_RETURN, LF_RETURN.

      if IR_MESSAGE is supplied.
        clear LS_TC010T.
        read table ZCL_VCXI_FBSSC_BAGTY=>T_TC010T into LS_TC010T
                                                  with key IBDIM = LS_BGDIM-IBDIM.

        case LF_RETURN.
          when 0.
***         &1 is maintained and valid.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'S'
                                     IF_MSGNO = '108'
                                     IF_MSGV1 = LS_TC010T-DESCR ).

          when 2.
***         &1 is not maintained.
            IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                                     IF_MSGTY = 'E'
                                     IF_MSGNO = '110'
                                     IF_MSGV1 = LS_TC010T-DESCR ).
        endcase.

      else.
        check RF_RETURN ne 0.
        exit.
      endif.

    endloop.

  endmethod.
  method CHECK_BGWGT.

*** 0 Bag Weight is maintained.
*** 1 Bag Weight is not maintained.

    data: LS_BGWGT type ZVCXI_FBS_S_BGWGT.

    move 0 to RF_RETURN.

    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT( importing ES_BGWGT = LS_BGWGT ).

    if LS_BGWGT-BGWGT is initial.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_TWICK.

*** 0 Wicket Type is maintained.
*** 1 Wicket Type is not maintained.

    data: LF_TWICK type ZVCXI_FBS_TWICK,
          LF_IBAGT type ZVCXI_FBS_IBAGT.
    data: LT_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP.
    data: LR_CUST_BAG   type ref to ZCL_VCXI_FBSS_CUST_BAG.

    move 0 to RF_RETURN.

*** Get Bag Type Customizing
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).
    LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_IBAGT ).

*** Get Bag Type -> Conversion Steps
    if LR_CUST_BAG is bound.
      move LR_CUST_BAG->GET_CSTEP( ) to LT_CSTEP.
    endif.

    move 0 to RF_RETURN.

    read table LT_CSTEP with key ICSTP = ZCL_VCXI_FBSS_CUST_BAG=>C_ICSTP_WICKET
                        transporting no fields.
    check SY-SUBRC is initial.

    ME->GET_TWICK( importing EF_TWICK = LF_TWICK ).

    if LF_TWICK is initial.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CHECK_WIBST.

*** 0 Bag/Stack is maintained.
*** 1 Bag/Stack is not maintained.

    data: LF_WIBST type ZVCXI_FBS_WIBST,
          LF_IBAGT type ZVCXI_FBS_IBAGT.
    data: LT_CSTEP type ZVCXI_FBSSC_TT_BAGTY_CSTEP.
    data: LR_CUST_BAG   type ref to ZCL_VCXI_FBSS_CUST_BAG.

    move 0 to RF_RETURN.

*** Get Bag Type Customizing
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).
    LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = LF_IBAGT ).

*** Get Bag Type -> Conversion Steps
    if LR_CUST_BAG is bound.
      move LR_CUST_BAG->GET_CSTEP( ) to LT_CSTEP.
    endif.

    move 0 to RF_RETURN.

    read table LT_CSTEP with key ICSTP = ZCL_VCXI_FBSS_CUST_BAG=>C_ICSTP_WICKET
                        transporting no fields.
    check SY-SUBRC is initial.

    ME->GET_WIBST( importing EF_WIBST = LF_WIBST ).

    if LF_WIBST is initial.
      move 1 to RF_RETURN.
    endif.

  endmethod.
  method CONSTRUCTOR.

    SUPER->CONSTRUCTOR( IR_GATE = IR_GATE ).

    move C_PARID_PRICP_P to ME->F_PARID_PRICP.

  endmethod.
  method GET_BGDIM_VALUE.

    data: LS_BGWID type ZVCXI_FBS_S_BGWID,
          LS_BGHEI type ZVCXI_FBS_S_BGHEI,
          LS_OLWID type ZVCXI_FBS_S_OLWID,
          LS_FOTOP type ZVCXI_FBS_S_FOTOP,
          LS_FOBOT type ZVCXI_FBS_S_FOBOT,
          LS_WILIP type ZVCXI_FBS_S_WILIP,
          LS_GULEF type ZVCXI_F0S_S_GULEF,
          LS_GURIG type ZVCXI_F0S_S_GURIG,
          LS_GUTOP type ZVCXI_FBS_S_GUTOP,
          LS_GUBOT type ZVCXI_FBS_S_GUBOT.
    field-symbols: <S_BGDIM_VALUE>  type ZVCXI_FBSS_S_BGDIM_VALUE.

***--------------------------------------------------------------------------------------
*** Bag Width
    ME->GET_BGWID( importing ES_BGWID = LS_BGWID ).
    if LS_BGWID-BGWID is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_BGWID to <S_BGDIM_VALUE>-IBDIM.
      move LS_BGWID-BGWID                        to <S_BGDIM_VALUE>-BVDIM.
      move LS_BGWID-BGWID_UOM                    to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Bag Height
    ME->GET_BGHEI( importing ES_BGHEI = LS_BGHEI ).
    if LS_BGHEI-BGHEI is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_BGHEI to <S_BGDIM_VALUE>-IBDIM.
      move LS_BGHEI-BGHEI                        to <S_BGDIM_VALUE>-BVDIM.
      move LS_BGHEI-BGHEI_UOM                    to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Overlap Dimension
    ME->GET_OLWID( importing ES_OLWID = LS_OLWID ).
    if LS_OLWID-OLWID is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_OLWID to <S_BGDIM_VALUE>-IBDIM.
      move LS_OLWID-OLWID          to <S_BGDIM_VALUE>-BVDIM.
      move LS_OLWID-OLWID_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Gusset Dimension
    ME->GET_GULEF( importing ES_GULEF = LS_GULEF ).
    if LS_GULEF-GULEF is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GULEF to <S_BGDIM_VALUE>-IBDIM.
      move LS_GULEF-GULEF          to <S_BGDIM_VALUE>-BVDIM.
      move LS_GULEF-GULEF_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    ME->GET_GURIG( importing ES_GURIG = LS_GURIG ).
    if LS_GURIG-GURIG is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GURIG to <S_BGDIM_VALUE>-IBDIM.
      move LS_GURIG-GURIG          to <S_BGDIM_VALUE>-BVDIM.
      move LS_GURIG-GURIG_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    ME->GET_GUTOP( importing ES_GUTOP = LS_GUTOP ).
    if LS_GUTOP-GUTOP is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUTOP to <S_BGDIM_VALUE>-IBDIM.
      move LS_GUTOP-GUTOP          to <S_BGDIM_VALUE>-BVDIM.
      move LS_GUTOP-GUTOP_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    ME->GET_GUBOT( importing ES_GUBOT = LS_GUBOT ).
    if LS_GUBOT-GUBOT is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_GUBOT to <S_BGDIM_VALUE>-IBDIM.
      move LS_GUBOT-GUBOT          to <S_BGDIM_VALUE>-BVDIM.
      move LS_GUBOT-GUBOT_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Fold Dimension
    ME->GET_FOTOP( importing ES_FOTOP = LS_FOTOP ).
    if LS_FOTOP-FOTOP is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOTOP to <S_BGDIM_VALUE>-IBDIM.
      move LS_FOTOP-FOTOP          to <S_BGDIM_VALUE>-BVDIM.
      move LS_FOTOP-FOTOP_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

    ME->GET_FOBOT( importing ES_FOBOT = LS_FOBOT ).
    if LS_FOBOT-FOBOT is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_FOBOT to <S_BGDIM_VALUE>-IBDIM.
      move LS_FOBOT-FOBOT          to <S_BGDIM_VALUE>-BVDIM.
      move LS_FOBOT-FOBOT_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

***--------------------------------------------------------------------------------------
*** Wicket Lip Dimension
    ME->GET_WILIP( importing ES_WILIP = LS_WILIP ).
    if LS_WILIP-WILIP is not initial.
      insert initial line into table RT_BGDIM_VALUE assigning <S_BGDIM_VALUE>.
      move ZCL_VCXI_FBSS_CUST_BAG=>C_IBDIM_WILIP to <S_BGDIM_VALUE>-IBDIM.
      move LS_WILIP-WILIP          to <S_BGDIM_VALUE>-BVDIM.
      move LS_WILIP-WILIP_UOM      to <S_BGDIM_VALUE>-BVDIM_UOM.
    endif.

  endmethod.
  method GET_BGFPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGFPX ).
    move LS_PARAM-STRNG to EF_BGFPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property Instance
    if ER_BL_BGFPROP is requested.
      ER_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( IF_BGFPX = EF_BGFPX ).
    endif.

  endmethod.
  method GET_BGHEI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGHEI ).
    move LS_PARAM-ATFLV to ES_BGHEI-BGHEI.
    move LS_PARAM-UNIT  to ES_BGHEI-BGHEI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BGWGT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWGT ).
    move LS_PARAM-ATFLV to ES_BGWGT-BGWGT.
    move LS_PARAM-UNIT  to ES_BGWGT-BGWGT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_BGWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWID ).
    move LS_PARAM-ATFLV to ES_BGWID-BGWID.
    move LS_PARAM-UNIT  to ES_BGWID-BGWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_CONFIG_INFO.

    clear: EF_CUOBJ, ES_CMPRK.

    check ME->R_CUST_BPROC is bound.

    move ME->R_CUST_BPROC->F_CUOBJ to EF_CUOBJ.
    move ME->R_CUST_BPROC->S_CMPRK to ES_CMPRK.

  endmethod.
  method GET_FOBOT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOBOT ).
    move LS_PARAM-ATFLV to ES_FOBOT-FOBOT.
    move LS_PARAM-UNIT  to ES_FOBOT-FOBOT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_FOTOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOTOP ).
    move LS_PARAM-ATFLV to ES_FOTOP-FOTOP.
    move LS_PARAM-UNIT  to ES_FOTOP-FOTOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GUBOT.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GUBOT ).
    move LS_PARAM-ATFLV to ES_GUBOT-GUBOT.
    move LS_PARAM-UNIT  to ES_GUBOT-GUBOT_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GULEF.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GULEF ).
    move LS_PARAM-ATFLV to ES_GULEF-GULEF.
    move LS_PARAM-UNIT  to ES_GULEF-GULEF_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GURIG.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GURIG ).
    move LS_PARAM-ATFLV to ES_GURIG-GURIG.
    move LS_PARAM-UNIT  to ES_GURIG-GURIG_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_GUTOP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GUTOP ).
    move LS_PARAM-ATFLV to ES_GUTOP-GUTOP.
    move LS_PARAM-UNIT  to ES_GUTOP-GUTOP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_HNDDIM.

    RS_HNDDIM-S_HNDLE = ME->GET_HNDLE( importing EF_SETBY = EF_SETBY ).
    RS_HNDDIM-S_HNDWI = ME->GET_HNDWI( ).
    RS_HNDDIM-S_HNDHE = ME->GET_HNDHE( ).

    EF_FOVRR = cond #( "when <no calculation> ne ABAP_TRUE then ABAP_UNDEFINED
                       when EF_SETBY eq /VCXI/CL_VKSR_GATE=>C_SETBY_USER then ABAP_TRUE ).

  endmethod.
  method GET_HNDHE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).
    RS_HNDHE-HNDHE     = LS_PARAM-ATFLV.
    RS_HNDHE-HNDHE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDLE.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).
    RS_HNDLE-HNDLE     = LS_PARAM-ATFLV.
    RS_HNDLE-HNDLE_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_HNDWI.

    data: LS_PARAM type /VCXI/VKSR_S_PARAM.

***----------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).
    RS_HNDWI-HNDWI     = LS_PARAM-ATFLV.
    RS_HNDWI-HNDWI_UOM = LS_PARAM-UNIT.
    EF_SETBY           = LS_PARAM-SETBY.

  endmethod.
  method GET_IBAGT.

    data:  LS_PARAM     type        /VCXI/VKSR_S_PARAM.
    data:  LR_CUST_BAG  type ref to ZCL_VCXI_FBSS_CUST_BAG.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IBAGT ).
    move LS_PARAM-ATWRT to EF_IBAGT.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Description
    if EF_DESCR is requested and
       EF_IBAGT is not initial.
      LR_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = EF_IBAGT ).
      if LR_CUST_BAG is bound.
        move LR_CUST_BAG->GET_DESCR( ) to EF_DESCR.
      endif.
    endif.

  endmethod.
  method GET_MATNR_DESCR.

    data:  LF_MAKTX   type MAKTX.

    if ME->IS_DUMMY( ) eq ABAP_TRUE.
      ME->GET_MAKTX( importing EF_MAKTX = LF_MAKTX ).
      move LF_MAKTX to RF_DESCR.
    else.
      RF_DESCR = SUPER->GET_MATNR_DESCR( ).
    endif.

  endmethod.
  method GET_OLWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OLWID ).
    move LS_PARAM-ATFLV to ES_OLWID-OLWID.
    move LS_PARAM-UNIT  to ES_OLWID-OLWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_STATUS.

    SUPER->GET_STATUS( receiving RF_ELMST = RF_ELMST ).

***--------------------------------------------------------------------------------------
*** Check Bag Dimensions
    if ME->CHECK_BGDIM( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Bag Weight
    if ME->CHECK_BGWGT( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Wicket Type
    if ME->CHECK_TWICK( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

*** Check Bag/Stack
    if ME->CHECK_WIBST( ) eq 0.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_G ).
    else.
      RF_ELMST = /VCXI/CL_VKSR_SERVICE=>MERGE_ELMST( IF_ELMST1 = RF_ELMST
                                                     IF_ELMST2 = /VCXI/CL_VKSR_SERVICE=>C_ELMST_R ).
    endif.

  endmethod.
  method GET_STATUS_MSG.

    SUPER->GET_STATUS_MSG( IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Bag Dimensions
    ME->CHECK_BGDIM( exporting IR_MESSAGE = IR_MESSAGE ).

***--------------------------------------------------------------------------------------
*** Check Wicket Type
    if ME->CHECK_TWICK( ) eq 0.
***   Wicket Type is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '111' ).
    else.
***   Wicket Type is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '112' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Bag/Stack
    if ME->CHECK_WIBST( ) eq 0.
***   Bag/Stack is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '113' ).
    else.
***   Bag/Stack is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '114' ).
    endif.

***--------------------------------------------------------------------------------------
*** Check Bag Weight
    if ME->CHECK_BGWGT( ) eq 0.
***   Bag Weight is maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'S'
                               IF_MSGNO = '501' ).
    else.
***   Bag Weight is not maintained.
      IR_MESSAGE->ADD_MESSAGE( IF_MSGID = 'ZVCXI_FBSS'
                               IF_MSGTY = 'E'
                               IF_MSGNO = '502' ).
    endif.

  endmethod.
  method GET_TWICK.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TWICK ).
    move LS_PARAM-ATWRT to EF_TWICK.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WERKS.

    data: LT_GATE    type        /VCXI/VKSR_TT_GATE.
    data: LR_GATE    type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_SPEC type ref to ZCL_VCXI_F0SS_PR_SPEC.

    LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_F0SS_PR_SPEC=>C_IPRVT_F0_SPEC ).
    read table LT_GATE into LR_GATE index 1.
    if SY-SUBRC eq 0.
      move LR_GATE->R_CLSPR ?to LR_PR_SPEC.
      LR_PR_SPEC->GET_WERKS( importing EF_WERKS = RF_WERKS ).
    else.
      RF_WERKS = SUPER->GET_WERKS( ).
    endif.

  endmethod.
  method GET_WIBST.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIBST ).
    move LS_PARAM-ATFLV to EF_WIBST.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WIHDI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIHDI ).
    move LS_PARAM-ATFLV to ES_WIHDI-WIHDI.
    move LS_PARAM-UNIT  to ES_WIHDI-WIHDI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WIHSP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIHSP ).
    move LS_PARAM-ATFLV to ES_WIHSP-WIHSP.
    move LS_PARAM-UNIT  to ES_WIHSP-WIHSP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method GET_WILIP.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WILIP ).
    move LS_PARAM-ATFLV to ES_WILIP-WILIP.
    move LS_PARAM-UNIT  to ES_WILIP-WILIP_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method HANDLE_EVENT.

    SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                         IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

    case IF_IEVNT.
      when C_IEVNT_I_SET_DEFAULT.
        ME->HANDLE_SET_DEFAULT( ).

      when C_IEVNT_I_RECALC_BGBPX.
        ME->HANDLE_RECALC_BGBPX( ).

      when C_IEVNT_I_INIT_BGFPX.
        ME->HANDLE_INIT_BGFPX( ).

      when C_IEVNT_I_RECALC_DIMEN.
        ME->HANDLE_RECALC_DIMEN( ).

      when C_IEVNT_I_RECALC_MAKTX.
        ME->HANDLE_RECALC_MAKTX( ).

***   Event Forwarding for Communication
      when C_IEVNT_I_REQ_FORWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_FORWARD_REQ ).
      when C_IEVNT_I_REQ_BACKWARD.
        ME->R_GATE->SET_EVENT( IF_IEVNT = ZIF_VCXI_F0SS_COMM_NEXT~C_IEVNT_O_BACKWARD_REQ ).

      when others.
    endcase.

  endmethod.
  method HANDLE_INIT_BGFPX.

    data: LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.

***--------------------------------------------------------------------------------------
*** Create fresh instance of Bag Forward Property
    LR_BL_BGFPROP = ZCL_VCXI_FBSS_BL_BGFPROP=>FACTORY( ).

***--------------------------------------------------------------------------------------
*** Set Bag Forward Property XML (Outbound)
    ME->SET_BGFPX( IF_BGFPX = LR_BL_BGFPROP->GET_BGFPX( ) ).

  endmethod.
  method HANDLE_INIT_CUST_MATNR.

    data: LF_MATNR type MATNR,
          LF_WERKS type WERKS_D,
          LF_DCONF type /VCXI/VKCR_DCONF,
          LF_IBAGT type ZVCXI_FBS_IBAGT,
          LF_TWICK type ZVCXI_FBS_TWICK,
          LF_WIBST type ZVCXI_FBS_WIBST,
          LF_BGFPX type ZVCXI_FBS_BGFPX.
    data: LS_BGHEI  type ZVCXI_FBS_S_BGHEI,
          LS_BGWID  type ZVCXI_FBS_S_BGWID,
          LS_BGWGT  type ZVCXI_FBS_S_BGWGT,
          LS_FOBOT  type ZVCXI_FBS_S_FOBOT,
          LS_FOTOP  type ZVCXI_FBS_S_FOTOP,
          LS_GUBOT  type ZVCXI_FBS_S_GUBOT,
          LS_GULEF  type ZVCXI_F0S_S_GULEF,
          LS_GURIG  type ZVCXI_F0S_S_GURIG,
          LS_GUTOP  type ZVCXI_FBS_S_GUTOP,
          LS_OLWID  type ZVCXI_FBS_S_OLWID,
          LS_WILIP  type ZVCXI_FBS_S_WILIP,
          LS_WIHDI  type ZVCXI_FBS_S_WIHDI,
          LS_WIHSP  type ZVCXI_FBS_S_WIHSP,
          LS_HNDDIM type ZVCXI_F0S_S_HNDDIM.
    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP,
          LR_BL_BGFPROP type ref to ZCL_VCXI_FBSS_BL_BGFPROP.


    move ME->GET_MATNR( )  to LF_MATNR.
    move ME->GET_WERKS( )  to LF_WERKS.
    ME->R_GATE->GET_CONFIG_INFO( importing EF_DCONF = LF_DCONF ).

    if ME->R_CUST_BPROC          is bound    and
       ME->R_CUST_BPROC->F_MATNR eq LF_MATNR and
       ME->R_CUST_BPROC->F_WERKS eq LF_WERKS.
***   Everything was loaded already...
      return.
    endif.

    clear: ME->R_CUST_MATNR, ME->R_CUST_BPROC.

*** Load the Customizing
    if LF_MATNR is not initial.
      try.
          ME->R_CUST_BPROC = ZCL_VCXI_FBSS_CUST_BPROC=>GET_INSTANCE_BPROC( IF_MATNR = LF_MATNR
                                                                           IF_WERKS = LF_WERKS
                                                                           IF_DATE  = LF_DCONF ).
        catch /VCXI/CX_CKX.
***       It is not needed to handle Exception
          return.
      endtry.
    endif.

    move ME->R_CUST_BPROC to ME->R_CUST_MATNR.

***--------------------------------------------------------------------------------------
*** Set Values for Real Bag Procurement
    if ME->GET_MATNR( ) is not initial and ME->IS_DUMMY( ) eq ABAP_FALSE.
***   Non-Dummy material - get data from customizing
      if ME->R_CUST_BPROC is bound.
        move: ME->R_CUST_BPROC->F_IBAGT  to LF_IBAGT,
              ME->R_CUST_BPROC->S_BGHEI  to LS_BGHEI,
              ME->R_CUST_BPROC->S_BGWID  to LS_BGWID,
              ME->R_CUST_BPROC->S_BGWGT  to LS_BGWGT,
              ME->R_CUST_BPROC->S_FOBOT  to LS_FOBOT,
              ME->R_CUST_BPROC->S_FOTOP  to LS_FOTOP,
              ME->R_CUST_BPROC->S_GUBOT  to LS_GUBOT,
              ME->R_CUST_BPROC->S_GULEF  to LS_GULEF,
              ME->R_CUST_BPROC->S_GURIG  to LS_GURIG,
              ME->R_CUST_BPROC->S_GUTOP  to LS_GUTOP,
              ME->R_CUST_BPROC->S_OLWID  to LS_OLWID,
              ME->R_CUST_BPROC->F_TWICK  to LF_TWICK,
              ME->R_CUST_BPROC->S_WILIP  to LS_WILIP,
              ME->R_CUST_BPROC->S_WIHDI  to LS_WIHDI,
              ME->R_CUST_BPROC->S_WIHSP  to LS_WIHSP,
              ME->R_CUST_BPROC->F_WIBST  to LF_WIBST,
              ME->R_CUST_BPROC->S_HNDDIM to LS_HNDDIM.
      endif.

      ME->SET_IBAGT( IF_IBAGT = LF_IBAGT ).
      ME->SET_BGHEI( IS_BGHEI = LS_BGHEI ).
      ME->SET_BGWID( IS_BGWID = LS_BGWID ).
      ME->SET_BGWGT( IS_BGWGT = LS_BGWGT ).
      ME->SET_FOBOT( IS_FOBOT = LS_FOBOT ).
      ME->SET_FOTOP( IS_FOTOP = LS_FOTOP ).
      ME->SET_GUBOT( IS_GUBOT = LS_GUBOT ).
      ME->SET_GULEF( IS_GULEF = LS_GULEF ).
      ME->SET_GURIG( IS_GURIG = LS_GURIG ).
      ME->SET_GUTOP( IS_GUTOP = LS_GUTOP ).
      ME->SET_OLWID( IS_OLWID = LS_OLWID ).
      ME->SET_TWICK( IF_TWICK = LF_TWICK ).
      ME->SET_WILIP( IS_WILIP = LS_WILIP ).
      ME->SET_WIHDI( IS_WIHDI = LS_WIHDI ).
      ME->SET_WIHSP( IS_WIHSP = LS_WIHSP ).
      ME->SET_WIBST( IF_WIBST = LF_WIBST ).
      ME->SET_HNDDIM( IS_HNDDIM = LS_HNDDIM ).

***   Bag Forward Property
      ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX( importing ER_BL_BGFPROP = LR_BL_BGFPROP ).
      if LR_BL_BGFPROP is bound.

***     Set Handling Dimension
        LR_BL_BGFPROP->SET_HNDDIM( IS_HNDDIM = ME->R_CUST_BPROC->S_HNDDIM ).

***     Set Bag Part Information
        LR_BL_BGFPROP->SET_BPINFO( IT_BPINFO = ME->R_CUST_BPROC->T_BPINFO ).

***     Set Bag Included Conv. Steps
        LR_BL_BGFPROP->SET_BGICS( IT_BGICS = ME->R_CUST_BPROC->T_BGICS ).

***     Get adjusted Bag Forward Property
        move LR_BL_BGFPROP->GET_BGFPX( ) to LF_BGFPX.

***     Set adjusted values to Original Bag Property
        ME->SET_BGFPX( exporting IF_BGFPX = LF_BGFPX ).

      endif.

    else.
***   Get Values from Bag Finished Good
      ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT( importing EF_IBAGT = LF_IBAGT ).
      ME->SET_IBAGT( IF_IBAGT = LF_IBAGT ).

      ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI( importing ES_BGHEI = LS_BGHEI ).
      ME->SET_BGHEI( IS_BGHEI = LS_BGHEI ).

      ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID( importing ES_BGWID = LS_BGWID ).
      ME->SET_BGWID( IS_BGWID = LS_BGWID ).

***   Bag Backward Property
      ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).
      check LR_BL_BGBPROP is bound.

***   Set Overlap on Width Dimension
      ME->SET_OLWID( IS_OLWID = LR_BL_BGBPROP->S_OLDIM-S_OLWID ).

***   Set Fold Dimension
      ME->SET_FOTOP( IS_FOTOP = LR_BL_BGBPROP->S_FODIM-S_FOTOP ).
      ME->SET_FOBOT( IS_FOBOT = LR_BL_BGBPROP->S_FODIM-S_FOBOT ).

***   Set Gusset Dimension
      ME->SET_GUTOP( IS_GUTOP = LR_BL_BGBPROP->S_GUDIM-S_GUTOP ).
      ME->SET_GUBOT( IS_GUBOT = LR_BL_BGBPROP->S_GUDIM-S_GUBOT ).
      ME->SET_GULEF( IS_GULEF = LR_BL_BGBPROP->S_GUDIM-S_GULEF ).
      ME->SET_GURIG( IS_GURIG = LR_BL_BGBPROP->S_GUDIM-S_GURIG ).

***   Set Wicket Dimension
      ME->SET_TWICK( IF_TWICK = LR_BL_BGBPROP->S_WIDIM-TWICK ).
      ME->SET_WILIP( IS_WILIP = LR_BL_BGBPROP->S_WIDIM-S_WILIP ).
      ME->SET_WIHDI( IS_WIHDI = LR_BL_BGBPROP->S_WIDIM-S_WIHDI ).
      ME->SET_WIHSP( IS_WIHSP = LR_BL_BGBPROP->S_WIDIM-S_WIHSP ).
      ME->SET_WIBST( IF_WIBST = LR_BL_BGBPROP->S_WIDIM-WIBST ).

    endif.

  endmethod.
  method HANDLE_INIT_PRICE.

*** No Defaulting for Direct Procurement & Price - as we use Scales only
    if ME->GET_PURCH( ) ne ZCL_VCXI_XCSS_PR_MS=>C_PURCH_DIRECT_PRICE.
      SUPER->HANDLE_INIT_PRICE( ).
    else.
***   Clear Price Data
      ME->SET_PRICE( IF_SETBY = SPACE ).
      ME->SET_PRICP( IF_SETBY = SPACE ).
    endif.

  endmethod.
  method HANDLE_RECALC_BGBPX.

    data: LS_FODIM type ZVCXI_FBSS_S_FODIM,
          LS_GUDIM type ZVCXI_FBSS_S_GUDIM,
          LS_OLDIM type ZVCXI_FBSS_S_OLDIM,
          LS_WIDIM type ZVCXI_FBSS_S_WIDIM.
    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP.

***--------------------------------------------------------------------------------------
*** Create fresh instance of Bag Forward Property
    LR_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( ).

***--------------------------------------------------------------------------------------
*** Get Overlap Width Dimension
    ME->GET_OLWID( importing ES_OLWID = LS_OLDIM-S_OLWID ).
    LR_BL_BGBPROP->SET_OLDIM( IS_OLDIM = LS_OLDIM ).

***--------------------------------------------------------------------------------------
*** Get Fold Dimension
    ME->GET_FOTOP( importing ES_FOTOP = LS_FODIM-S_FOTOP ).
    ME->GET_FOBOT( importing ES_FOBOT = LS_FODIM-S_FOBOT ).
    LR_BL_BGBPROP->SET_FODIM( IS_FODIM = LS_FODIM ).

***--------------------------------------------------------------------------------------
*** Get Gusset Dimension
    ME->GET_GUTOP( importing ES_GUTOP = LS_GUDIM-S_GUTOP ).
    ME->GET_GUBOT( importing ES_GUBOT = LS_GUDIM-S_GUBOT ).
    ME->GET_GULEF( importing ES_GULEF = LS_GUDIM-S_GULEF ).
    ME->GET_GURIG( importing ES_GURIG = LS_GUDIM-S_GURIG ).
    LR_BL_BGBPROP->SET_GUDIM( IS_GUDIM = LS_GUDIM ).

***--------------------------------------------------------------------------------------
*** Get Wicket Dimension
    ME->GET_TWICK( importing EF_TWICK = LS_WIDIM-TWICK ).
    ME->GET_WILIP( importing ES_WILIP = LS_WIDIM-S_WILIP ).
    ME->GET_WIHDI( importing ES_WIHDI = LS_WIDIM-S_WIHDI ).
    ME->GET_WIHSP( importing ES_WIHSP = LS_WIDIM-S_WIHSP ).
    ME->GET_WIBST( importing EF_WIBST = LS_WIDIM-WIBST ).
    LR_BL_BGBPROP->SET_WIDIM( IS_WIDIM = LS_WIDIM ).

***--------------------------------------------------------------------------------------
*** Set Bag Backward Property XML (Outbound)
    ME->SET_BGBPX( IF_BGBPX = LR_BL_BGBPROP->GET_BGBPX( ) ).

  endmethod.
  method HANDLE_RECALC_DIMEN.

    data: LR_BL_BGBPROP type ref to ZCL_VCXI_FBSS_BL_BGBPROP.

*** Bag Backward Property
    ME->ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP ).
    check LR_BL_BGBPROP is bound.

*** Set Overlap on Width Dimension
    ME->SET_OLWID( IS_OLWID = LR_BL_BGBPROP->S_OLDIM-S_OLWID ).

*** Set Fold Dimension
    ME->SET_FOTOP( IS_FOTOP = LR_BL_BGBPROP->S_FODIM-S_FOTOP ).
    ME->SET_FOBOT( IS_FOBOT = LR_BL_BGBPROP->S_FODIM-S_FOBOT ).

*** Set Gusset Dimension
    ME->SET_GUTOP( IS_GUTOP = LR_BL_BGBPROP->S_GUDIM-S_GUTOP ).
    ME->SET_GUBOT( IS_GUBOT = LR_BL_BGBPROP->S_GUDIM-S_GUBOT ).
    ME->SET_GULEF( IS_GULEF = LR_BL_BGBPROP->S_GUDIM-S_GULEF ).
    ME->SET_GURIG( IS_GURIG = LR_BL_BGBPROP->S_GUDIM-S_GURIG ).

*** Set Wicket Dimension
    ME->SET_TWICK( IF_TWICK = LR_BL_BGBPROP->S_WIDIM-TWICK ).
    ME->SET_WILIP( IS_WILIP = LR_BL_BGBPROP->S_WIDIM-S_WILIP ).
    ME->SET_WIHDI( IS_WIHDI = LR_BL_BGBPROP->S_WIDIM-S_WIHDI ).
    ME->SET_WIHSP( IS_WIHSP = LR_BL_BGBPROP->S_WIDIM-S_WIHSP ).
    ME->SET_WIBST( IF_WIBST = LR_BL_BGBPROP->S_WIDIM-WIBST ).

  endmethod.
  method IS_OPENSPV_ALLOWED.

    data: LS_ATTRI type /VCXI/VKS_S_ATTRI.

*** Validate Material Number using
    check ME->R_CUST_BPROC is bound and
          ME->R_CUST_BPROC->F_CHECK_MATNR    eq ABAP_TRUE and
          ME->R_CUST_BPROC->F_CHECK_MAT_MARC eq ABAP_TRUE.

*** Check against allowed Configurable Materials
    LS_ATTRI = ME->R_GATE->GET_ATTRI( IF_ATTID = C_ATTID_CMATN ).
    check LS_ATTRI-ATTVA eq ME->R_CUST_BPROC->S_CMPRK-CMATN.

*** Open Supervisor is allowed
    move ABAP_TRUE to RF_ALLOWED.

  endmethod.
  method OPEN.

    data: LF_ANSWER   type C,
          LF_QUESTION type CHAR128,
          LF_MATNR    type MATNR.
    data: LT_GATE     type /VCXI/VKSR_TT_GATE.
    data: LR_GATE       type ref to /VCXI/CL_VKSR_GATE,
          LR_PR_OPENSPV type ref to ZCL_VCXI_F0S_PR_OPENSPV.


    if ME->IS_OPENSPV_ALLOWED( ) eq ABAP_TRUE.

***--------------------------------------------------------------------------------------
***   Get Open Supervisor
      LT_GATE = ME->R_GATE->GET_PRVDR( IF_IPRVT  = ZCL_VCXI_F0S_PR_OPENSPV=>C_IPRVT_OPENSPV
                                       IF_INUSE  = ABAP_TRUE ).
      read table LT_GATE into LR_GATE index 1.
      check SY-SUBRC eq 0.
      try.
          move LR_GATE->R_CLSPR ?to LR_PR_OPENSPV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_PR_OPENSPV.
      endtry.
      check LR_PR_OPENSPV is bound.

***-------------------------------------------------------------------------------------
***   Open Bag Procurement Configuration
      LR_PR_OPENSPV->OPEN_MS_PROC( exporting IR_GATE_MS_PROC = ME->R_GATE
                                   importing ER_GATE_XCONI   = ER_GATE_XCONI
                                             ER_GATE_XCONO   = ER_GATE_XCONO ).

    elseif ME->IS_DUMMY( ) eq ABAP_FALSE.

***--------------------------------------------------------------------------------------
***   Confirmation about Overwrite
      move ZCL_VCXI_XCS_CUST_MATNR=>GET_DUMMY_MATNR( IR_GATE = ME->R_GATE ) to LF_MATNR.
      concatenate text-T02 LF_MATNR '?' into LF_QUESTION separated by SPACE.
      call function 'POPUP_TO_CONFIRM'
        exporting
          TEXT_QUESTION         = LF_QUESTION
          DISPLAY_CANCEL_BUTTON = ABAP_FALSE
        importing
          ANSWER                = LF_ANSWER.

      check LF_ANSWER eq '1'.    "Yes

***   Set Customize DUMMY Material
      ME->SET_MATNR( exporting IF_MATNR = LF_MATNR ).

    endif.

  endmethod.
  method SET_BGBPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGBPX ).

    move IF_BGBPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGBPX_CHANGED ).
    endif.

  endmethod.
  method SET_BGFPX.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGFPX ).

    move IF_BGFPX   to LS_PARAM-STRNG.
    move IF_SETBY   to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGFPX_CHANGED ).
    endif.

  endmethod.
  method SET_BGHEI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGHEI ).

    move IS_BGHEI-BGHEI     to LS_PARAM-ATFLV.
    move IS_BGHEI-BGHEI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGHEI_CHANGED ).
    endif.

  endmethod.
  method SET_BGWGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWGT ).

    move IS_BGWGT-BGWGT     to LS_PARAM-ATFLV.
    move IS_BGWGT-BGWGT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGWGT_CHANGED ).
    endif.

  endmethod.
  method SET_BGWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWID ).

    move IS_BGWID-BGWID     to LS_PARAM-ATFLV.
    move IS_BGWID-BGWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_BGWID_CHANGED ).
    endif.

  endmethod.
  method SET_FOBOT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOBOT ).

    move IS_FOBOT-FOBOT     to LS_PARAM-ATFLV.
    move IS_FOBOT-FOBOT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FODIM_CHANGED ).
    endif.

  endmethod.
  method SET_FOTOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_FOTOP ).

    move IS_FOTOP-FOTOP     to LS_PARAM-ATFLV.
    move IS_FOTOP-FOTOP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_FODIM_CHANGED ).
    endif.

  endmethod.
  method SET_GUBOT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GUBOT ).

    move IS_GUBOT-GUBOT     to LS_PARAM-ATFLV.
    move IS_GUBOT-GUBOT_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GUDIM_CHANGED ).
    endif.

  endmethod.
  method SET_GULEF.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GULEF ).

    move IS_GULEF-GULEF     to LS_PARAM-ATFLV.
    move IS_GULEF-GULEF_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GUDIM_CHANGED ).
    endif.

  endmethod.
  method SET_GURIG.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GURIG ).

    move IS_GURIG-GURIG     to LS_PARAM-ATFLV.
    move IS_GURIG-GURIG_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GUDIM_CHANGED ).
    endif.

  endmethod.
  method SET_GUTOP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_GUTOP ).

    move IS_GUTOP-GUTOP     to LS_PARAM-ATFLV.
    move IS_GUTOP-GUTOP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_GUDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDDIM.

    data: LF_SETBY type /VCXI/VKSR_SETBY.

*** Identify correct SETBY
    if IF_FOVRR is supplied.
      LF_SETBY = switch #( IF_FOVRR when ABAP_TRUE then /VCXI/CL_VKSR_GATE=>C_SETBY_USER
                                                   else SPACE ).
    else.
      LF_SETBY = IF_SETBY.
    endif.

*** Set Dimensions
    if IS_HNDDIM is supplied.
      ME->SET_HNDLE( IS_HNDLE = IS_HNDDIM-S_HNDLE
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IS_HNDWI = IS_HNDDIM-S_HNDWI
                     IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IS_HNDHE = IS_HNDDIM-S_HNDHE
                     IF_SETBY = LF_SETBY ).
    else.
      ME->SET_HNDLE( IF_SETBY = LF_SETBY ).
      ME->SET_HNDWI( IF_SETBY = LF_SETBY ).
      ME->SET_HNDHE( IF_SETBY = LF_SETBY ).
    endif.

  endmethod.
  method SET_HNDHE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDHE ).

    if IS_HNDHE is supplied.
      LS_PARAM-ATFLV = IS_HNDHE-HNDHE.
      LS_PARAM-UNIT  = IS_HNDHE-HNDHE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDLE.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDLE ).

    if IS_HNDLE is supplied.
      LS_PARAM-ATFLV = IS_HNDLE-HNDLE.
      LS_PARAM-UNIT  = IS_HNDLE-HNDLE_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_HNDWI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_HNDWI ).

    if IS_HNDWI is supplied.
      LS_PARAM-ATFLV = IS_HNDWI-HNDWI.
      LS_PARAM-UNIT  = IS_HNDWI-HNDWI_UOM.
    endif.

    LS_PARAM-SETBY = IF_SETBY.
    if LS_PARAM-SETBY is initial.
      clear LS_PARAM-ATFLV.
    endif.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_HNDDIM_CHANGED ).
    endif.

  endmethod.
  method SET_IBAGT.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IBAGT ).

    move IF_IBAGT to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_IBAGT_CHANGED ).
    endif.

  endmethod.
  method SET_OLWID.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_OLWID ).

    move IS_OLWID-OLWID     to LS_PARAM-ATFLV.
    move IS_OLWID-OLWID_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_OLDIM_CHANGED ).
    endif.

  endmethod.
  method SET_TWICK.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_TWICK ).

    move IF_TWICK to LS_PARAM-ATWRT.
    move IF_SETBY to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_TWICK_CHANGED ).
    endif.

  endmethod.
  method SET_WIBST.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIBST ).

    move IF_WIBST     to LS_PARAM-ATFLV.
    move IF_SETBY     to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIBST_CHANGED ).
    endif.

  endmethod.
  method SET_WIHDI.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIHDI ).

    move IS_WIHDI-WIHDI     to LS_PARAM-ATFLV.
    move IS_WIHDI-WIHDI_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIHDI_CHANGED ).
    endif.

  endmethod.
  method SET_WIHSP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WIHSP ).

    move IS_WIHSP-WIHSP     to LS_PARAM-ATFLV.
    move IS_WIHSP-WIHSP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WIHSP_CHANGED ).
    endif.

  endmethod.
  method SET_WILIP.

    data:  LF_CHANGED type ABAP_BOOL.
    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_WILIP ).

    move IS_WILIP-WILIP     to LS_PARAM-ATFLV.
    move IS_WILIP-WILIP_UOM to LS_PARAM-UNIT.
    move IF_SETBY           to LS_PARAM-SETBY.

    LF_CHANGED = ME->R_GATE->SET_PARAM( IS_PARAM = LS_PARAM ).

    if LF_CHANGED eq ABAP_TRUE.
***   Send Event
      ME->R_GATE->SET_EVENT( IF_IEVNT = C_IEVNT_O_WILIP_CHANGED ).
    endif.

  endmethod.
  method ZIF_VCXI_F0SS_COMM_NEXT~DO_BACKWARD.

    data: LF_IBAGT      type        ZVCXI_FBS_IBAGT,
          LF_IBAGT_PREV type        ZVCXI_FBS_IBAGT.
    data: LS_BGWID      type        ZVCXI_FBS_S_BGWID,
          LS_BGWID_PREV type        ZVCXI_FBS_S_BGWID,
          LS_BGHEI      type        ZVCXI_FBS_S_BGHEI,
          LS_BGHEI_PREV type        ZVCXI_FBS_S_BGHEI.
    data: LR_GATE            type ref to /VCXI/CL_VKSR_GATE,
          LR_COMM_PREV       type ref to ZIF_VCXI_FBSS_COMM_PREV,
          LR_BL_BGBPROP      type ref to ZCL_VCXI_FBSS_BL_BGBPROP,
          LR_BL_BGBPROP_NEXT type ref to ZCL_VCXI_FBSS_BL_BGBPROP.

    check ME->IS_DUMMY( ) eq ABAP_TRUE or ME->GET_MATNR( ) is initial.

***--------------------------------------------------------------------------------------
*** Create new Bag Backward Property Instance
    LR_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( ).

***--------------------------------------------------------------------------------------
*** Process all provided Gates
    loop at IT_GATE into LR_GATE.
      try.
          move LR_GATE->R_CLSPR ?to LR_COMM_PREV.
        catch CX_SY_MOVE_CAST_ERROR.
          clear LR_COMM_PREV.
      endtry.
      check LR_COMM_PREV is bound.

***--------------------------------------------------------------------------------------
***   Get first defined Bag Type
      LR_COMM_PREV->GET_IBAGT( importing EF_IBAGT = LF_IBAGT_PREV ).
      if LF_IBAGT is initial.
        move LF_IBAGT_PREV to LF_IBAGT.
      endif.

***   Get first defined Bag Width
      LR_COMM_PREV->GET_BGWID( importing ES_BGWID = LS_BGWID_PREV ).
      if LS_BGWID-BGWID is initial.
        move LS_BGWID_PREV to LS_BGWID.
      endif.

***   Get first defined Bag Height
      LR_COMM_PREV->GET_BGHEI( importing ES_BGHEI = LS_BGHEI_PREV ).
      if LS_BGHEI-BGHEI is initial.
        move LS_BGHEI_PREV to LS_BGHEI.
      endif.

***   Combine Bag Forward Property
      LR_COMM_PREV->GET_BGBPX( importing ER_BL_BGBPROP = LR_BL_BGBPROP_NEXT ).
      LR_BL_BGBPROP->MERGE( IR_BL_BGBPROP = LR_BL_BGBPROP_NEXT ).
    endloop.

***--------------------------------------------------------------------------------------
*** Backward Bag Type
    ME->SET_IBAGT( IF_IBAGT = LF_IBAGT ).

*** Backward Bag Width
    ME->SET_BGWID( IS_BGWID = LS_BGWID ).

*** Backward Bag Height
    ME->SET_BGHEI( IS_BGHEI = LS_BGHEI ).

*** Backward Bag Backward Property XML
    ME->SET_BGBPX( IF_BGBPX = LR_BL_BGBPROP->GET_BGBPX( ) ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGBPX.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGBPX ).
    move LS_PARAM-STRNG to EF_BGBPX.
    move LS_PARAM-SETBY to EF_SETBY.

***--------------------------------------------------------------------------------------
*** Get Bag Backward Property Instance
    if ER_BL_BGBPROP is requested.
      ER_BL_BGBPROP = ZCL_VCXI_FBSS_BL_BGBPROP=>FACTORY( IF_BGBPX = EF_BGBPX ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGFPX.

***--------------------------------------------------------------------------------------
*** Get Bag Forward Property XML (Inbound)
    ME->GET_BGFPX( importing ER_BL_BGFPROP = ER_BL_BGFPROP
                             EF_SETBY      = EF_SETBY ).

*** Handling Dimensions
    ER_BL_BGFPROP->SET_HNDDIM( IS_HNDDIM = ME->GET_HNDDIM( ) ).

***--------------------------------------------------------------------------------------
*** Get new Forward Property XML
    if EF_BGFPX is requested.
      EF_BGFPX = ER_BL_BGFPROP->GET_BGFPX( ).
    endif.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGHEI.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGHEI ).
    move LS_PARAM-ATFLV to ES_BGHEI-BGHEI.
    move LS_PARAM-UNIT  to ES_BGHEI-BGHEI_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWGT.

*** Get Bag Weight (Inbound)
    ME->GET_BGWGT( importing ES_BGWGT = ES_BGWGT
                             EF_SETBY = EF_SETBY ).

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_BGWID.

    data:  LS_PARAM   type /VCXI/VKSR_S_PARAM.

    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_BGWID ).
    move LS_PARAM-ATFLV to ES_BGWID-BGWID.
    move LS_PARAM-UNIT  to ES_BGWID-BGWID_UOM.
    move LS_PARAM-SETBY to EF_SETBY.

  endmethod.
  method ZIF_VCXI_FBSS_COMM_NEXT~GET_IBAGT.

    data:  LS_PARAM     type /VCXI/VKSR_S_PARAM.

***--------------------------------------------------------------------------------------
*** Get Parameter Value
    LS_PARAM = ME->R_GATE->GET_PARAM( IF_PARID = C_PARID_IBAGT ).
    move LS_PARAM-ATWRT to EF_IBAGT.
    move LS_PARAM-SETBY to EF_SETBY.

    clear EF_DESCR.
    check EF_IBAGT is not initial.

***--------------------------------------------------------------------------------------
*** Get Bag Customizing
    if ER_CUST_BAG is requested or
       EF_DESCR    is requested.
      ER_CUST_BAG = ZCL_VCXI_FBSS_CUST_BAG=>GET_INSTANCE( IF_IBAGT = EF_IBAGT ).
    endif.

*** Get Description
    if ER_CUST_BAG is bound and
       EF_DESCR    is requested.
      move ER_CUST_BAG->GET_DESCR( ) to EF_DESCR.
    endif.

  endmethod.
