
class ZCL_VCXI_P0SS_PR_AREA_WGT_AS definition
  public
  inheriting from ZCL_VCXI_P0SS_PR_AREA_WEIGHT
  create public .

public section.

  methods HANDLE_EVENT
    redefinition .
protected section.

  types:
    begin of YS_COMP_AREA_WEIGHT,
           R_PR_COMP_AS     type ref to ZCL_VCXI_P0SS_PR_COMP_AS,
           R_PR_AREA_WEIGHT type ref to ZCL_VCXI_P0SS_PR_AREA_WEIGHT,
           R_PR_COMP_SFG    type ref to ZCL_VCXI_P0SS_PR_COMP_SFG,
         end   of YS_COMP_AREA_WEIGHT .
  types:
    YT_COMP_AREA_WEIGHT type standard table of YS_COMP_AREA_WEIGHT with default key .

  constants C_IEVNT_I_RECALC_ACOWA type /VCXI/VKSC_IEVNT value 'RECALC_ACOWA'. "#EC NOTEXT

  methods HANDLE_RECALC_ACOWA
    raising
      /VCXI/CX_CKX .
  type-pools ABAP .
  methods GET_WDRYW_COMP
    importing
      !IF_ABLAG type ABAP_BOOL optional
      !IF_ABLAN type ABAP_BOOL optional
      !IF_ABLAS type ABAP_BOOL optional
      !IS_WDRYA type ZVCXI_P0SS_S_WDRYA optional
    returning
      value(RS_WDRYW) type ZVCXI_P0SS_S_WDRYW
    raising
      /VCXI/CX_CKX .
  methods GET_WWETW_COMP
    importing
      !IF_ABLAG type ABAP_BOOL optional
      !IF_ABLAN type ABAP_BOOL optional
      !IF_ABLAS type ABAP_BOOL optional
    returning
      value(RS_WWETW) type ZVCXI_P0SS_S_WWETW
    raising
      /VCXI/CX_CKX .
  methods GET_COMP_AREA_WEIGHT
    returning
      value(RT_COMP_AREA_WEIGHT) type YT_COMP_AREA_WEIGHT
    raising
      /VCXI/CX_CKX .

  methods CALC_WDRGP
    redefinition .
  methods CALC_WDRSP
    redefinition .
  methods CALC_WWEGP
    redefinition .
  methods CALC_WWESP
    redefinition .
  methods GET_DETAIL_SHEET
    redefinition .
  methods HANDLE_INIT_REFERENCES
    redefinition .
  methods HANDLE_RECALC_WASTE
    redefinition .
  methods HANDLE_RECALC_WDRYW
    redefinition .
  methods HANDLE_RECALC_WWETW
    redefinition .
private section.
endclass. "ZCL_VCXI_P0SS_PR_AREA_WGT_AS definition
class ZCL_VCXI_P0SS_PR_AREA_WGT_AS implementation.
method CALC_WDRGP.

  data: LS_WDRGP     type ZVCXI_P0SS_S_WDRGP,
        LS_WDRYW     type ZVCXI_P0SS_S_WDRYW.

**** Get Weight of Gross Blank Area
  LS_WDRYW = ME->GET_WDRYW_COMP( IF_ABLAG = ABAP_TRUE ).

  LS_WDRGP-WDRGP     = LS_WDRYW-WDRYW.
  LS_WDRGP-WDRGP_UOM = LS_WDRYW-WDRYW_UOM.

  ME->SET_WDRGP( IS_WDRGP = LS_WDRGP ).

endmethod.
method CALC_WDRSP.

  data: LS_WDRSP     type ZVCXI_P0SS_S_WDRSP,
        LS_WDRYW     type ZVCXI_P0SS_S_WDRYW.


**** Get Weight of Sold Blank Area
  LS_WDRYW = ME->GET_WDRYW_COMP( IF_ABLAS = ABAP_TRUE ).

  LS_WDRSP-WDRSP     = LS_WDRYW-WDRYW.
  LS_WDRSP-WDRSP_UOM = LS_WDRYW-WDRYW_UOM.

  ME->SET_WDRSP( IS_WDRSP = LS_WDRSP ).

endmethod.
method CALC_WWEGP.

  data: LS_WWEGP     type ZVCXI_P0SS_S_WWEGP,
        LS_WWETW     type ZVCXI_P0SS_S_WWETW.

*** Get Wet Weight Gross Blank Area
  LS_WWETW = ME->GET_WWETW_COMP( IF_ABLAG = ABAP_TRUE ).

*** Get Gross Weight per Piece
  LS_WWEGP-WWEGP     = LS_WWETW-WWETW.
  LS_WWEGP-WWEGP_UOM = LS_WWETW-WWETW_UOM.

  ME->SET_WWEGP( IS_WWEGP = LS_WWEGP ).

endmethod.
method CALC_WWESP.

  data: LS_WWESP     type ZVCXI_P0SS_S_WWESP,
        LS_WWETW     type ZVCXI_P0SS_S_WWETW.

*** Get Wet Weight Sold Blank Area
  LS_WWETW = ME->GET_WWETW_COMP( IF_ABLAS = ABAP_TRUE ).

*** Get Sold Weight per Piece
  LS_WWESP-WWESP     = LS_WWETW-WWETW.
  LS_WWESP-WWESP_UOM = LS_WWETW-WWETW_UOM.

  ME->SET_WWESP( IS_WWESP = LS_WWESP ).

endmethod.
method GET_COMP_AREA_WEIGHT.

  data:          LT_GATE_COMP_AS       type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_COMP_SFG      type        /VCXI/VKSR_TT_GATE,
                 LT_GATE_AREA_WEIGHT   type        /VCXI/VKSR_TT_GATE.
  data:          LR_GATE_COMP_AS       type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_COMP_SFG      type ref to /VCXI/CL_VKSR_GATE,
                 LR_GATE_AREA_WEIGHT   type ref to /VCXI/CL_VKSR_GATE.
  field-symbols: <S_COMP_AREA_WEIGHT>  type        YS_COMP_AREA_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Find Provider for Components of AS and SFG
  LT_GATE_COMP_AS = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_AS=>C_IPRVT_P0_COMP_AS
                                           IF_INUSE = ABAP_TRUE ).

  LT_GATE_COMP_SFG = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_COMP_SFG=>C_IPRVT_P0_COMP_SFG
                                            IF_INUSE = ABAP_TRUE ).
  check LT_GATE_COMP_AS is not initial or
        LT_GATE_COMP_SFG is not initial.

*** Find Provider for Area & Weight of Components
  LT_GATE_AREA_WEIGHT = ME->R_GATE->GET_PRVDR( IF_IPRVT = ZCL_VCXI_P0SS_PR_AREA_WEIGHT=>C_IPRVT_P0_AREA_WEIGHT
                                               IF_INUSE = ABAP_TRUE ).

***------------------------------------------------------------------------------------------------
*** Process all Components AS
  loop at LT_GATE_COMP_AS into LR_GATE_COMP_AS.
    loop at LT_GATE_AREA_WEIGHT into LR_GATE_AREA_WEIGHT.
      if LR_GATE_AREA_WEIGHT->IS_IN_LINE( IR_GATE = LR_GATE_COMP_AS ) eq ABAP_TRUE.
        exit.
      else.
        clear LR_GATE_AREA_WEIGHT.
      endif.
    endloop.
    check LR_GATE_AREA_WEIGHT is bound.

    append initial line to RT_COMP_AREA_WEIGHT assigning <S_COMP_AREA_WEIGHT>.

    try.
        move LR_GATE_COMP_AS->R_CLSPR ?to <S_COMP_AREA_WEIGHT>-R_PR_COMP_AS.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.

    try.
        move LR_GATE_AREA_WEIGHT->R_CLSPR ?to <S_COMP_AREA_WEIGHT>-R_PR_AREA_WEIGHT.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

*** Process all Components SFG
  loop at LT_GATE_COMP_SFG into LR_GATE_COMP_SFG.
    append initial line to RT_COMP_AREA_WEIGHT assigning <S_COMP_AREA_WEIGHT>.
    try.
        move LR_GATE_COMP_SFG->R_CLSPR ?to <S_COMP_AREA_WEIGHT>-R_PR_COMP_SFG.
      catch CX_SY_MOVE_CAST_ERROR.
        continue.
    endtry.
  endloop.

endmethod.
method GET_DETAIL_SHEET.

  data:  LS_COMP_AREA_WEIGHT   type        YS_COMP_AREA_WEIGHT,
         LS_ABLAN              type        ZVCXI_P0SS_S_ABLAN,
         LS_ABLAS              type        ZVCXI_P0SS_S_ABLAS,
         LS_ATRIM              type        ZVCXI_P0SS_S_ATRIM,
         LS_ABLAG              type        ZVCXI_P0SS_S_ABLAG.
  data:  LT_COMP_AREA_WEIGHT   type        YT_COMP_AREA_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Get Componets with Area&Weight
  LT_COMP_AREA_WEIGHT = ME->GET_COMP_AREA_WEIGHT( ).

***------------------------------------------------------------------------------------------------
  loop at LT_COMP_AREA_WEIGHT into LS_COMP_AREA_WEIGHT.
    clear: LS_ABLAS, LS_ABLAN, LS_ATRIM.

    if LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT is bound and
       LS_COMP_AREA_WEIGHT-R_PR_COMP_AS     is bound.

      LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_DETAIL_SHEET( importing ES_ABLAS = LS_ABLAS
                                                                        ES_ATRIM = LS_ATRIM
                                                                        ES_ABLAG = LS_ABLAG ).
      if LS_COMP_AREA_WEIGHT-R_PR_COMP_AS->GET_FCSFG( ) eq ABAP_FALSE.
        LS_ABLAS-ABLAS = LS_ABLAS-ABLAS * LS_COMP_AREA_WEIGHT-R_PR_COMP_AS->GET_COMPR( ).
        LS_ATRIM-ATRIM = LS_ATRIM-ATRIM * LS_COMP_AREA_WEIGHT-R_PR_COMP_AS->GET_COMPR( ).
        LS_ABLAG-ABLAG = LS_ABLAG-ABLAG * LS_COMP_AREA_WEIGHT-R_PR_COMP_AS->GET_COMPR( ).
      else.
        LS_ABLAN = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_ABLAN( ).
        LS_ABLAS-ABLAS = LS_ABLAN-ABLAN * LS_COMP_AREA_WEIGHT-R_PR_COMP_AS->GET_COMPR( ).
        LS_ABLAS-ABLAS_UOM = LS_ABLAN-ABLAN_UOM.
        LS_ABLAG = LS_ABLAS.
        clear: LS_ATRIM-ATRIM.
      endif.
    elseif LS_COMP_AREA_WEIGHT-R_PR_COMP_SFG is bound.
      LS_ABLAN = LS_COMP_AREA_WEIGHT-R_PR_COMP_SFG->GET_ABLAN( ).
      LS_ABLAS-ABLAS     = LS_ABLAN-ABLAN * LS_COMP_AREA_WEIGHT-R_PR_COMP_SFG->GET_COMPR( ).
      LS_ABLAS-ABLAS_UOM = LS_ABLAN-ABLAN_UOM.
      LS_ABLAG = LS_ABLAS.
    else.
      continue.
    endif.

*** Sum up
    if ES_ABLAS-ABLAS_UOM is initial.
      move LS_ABLAS to ES_ABLAS.
    else.
      if LS_ABLAS-ABLAS_UOM is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_ABLAS-ABLAS
                                                            IF_CALCV_UOM_1 = ES_ABLAS-ABLAS_UOM
                                                            IF_CALCV_2     = LS_ABLAS-ABLAS
                                                            IF_CALCV_UOM_2 = LS_ABLAS-ABLAS_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = ES_ABLAS-ABLAS_UOM
                                                  importing EF_CALCV       = ES_ABLAS-ABLAS
                                                            EF_CALCV_UOM   = ES_ABLAS-ABLAS_UOM ).
      endif.
    endif.

    if ES_ATRIM-ATRIM_UOM is initial.
      move LS_ATRIM to ES_ATRIM.
    else.
      if LS_ATRIM-ATRIM_UOM is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_ATRIM-ATRIM
                                                            IF_CALCV_UOM_1 = ES_ATRIM-ATRIM_UOM
                                                            IF_CALCV_2     = LS_ATRIM-ATRIM
                                                            IF_CALCV_UOM_2 = LS_ATRIM-ATRIM_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = ES_ATRIM-ATRIM_UOM
                                                  importing EF_CALCV       = ES_ATRIM-ATRIM
                                                            EF_CALCV_UOM   = ES_ATRIM-ATRIM_UOM ).
      endif.
    endif.

    if ES_ABLAG-ABLAG_UOM is initial.
      move LS_ABLAG to ES_ABLAG.
    else.
      if LS_ABLAG-ABLAG_UOM is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = ES_ABLAG-ABLAG
                                                            IF_CALCV_UOM_1 = ES_ABLAG-ABLAG_UOM
                                                            IF_CALCV_2     = LS_ABLAG-ABLAG
                                                            IF_CALCV_UOM_2 = LS_ABLAG-ABLAG_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = ES_ABLAG-ABLAG_UOM
                                                  importing EF_CALCV       = ES_ABLAG-ABLAG
                                                            EF_CALCV_UOM   = ES_ABLAG-ABLAG_UOM ).
      endif.
    endif.
  endloop.

endmethod.
method GET_WDRYW_COMP.

  data:  LS_COMP_AREA_WEIGHT   type        YS_COMP_AREA_WEIGHT,
         LS_WDRYW              type        ZVCXI_P0SS_S_WDRYW,
         LS_WDRYA              type        ZVCXI_P0SS_S_WDRYA,
         LS_ABLAG              type        ZVCXI_P0SS_S_ABLAG,
         LS_ABLAN              type        ZVCXI_P0SS_S_ABLAN,
         LS_ABLAS              type        ZVCXI_P0SS_S_ABLAS,
         LS_WNEPP              type        ZVCXI_P0SS_S_WNEPP.
  data:  LT_COMP_AREA_WEIGHT   type        YT_COMP_AREA_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Get Componets with Area&Weight
  LT_COMP_AREA_WEIGHT = ME->GET_COMP_AREA_WEIGHT( ).

***------------------------------------------------------------------------------------------------
  loop at LT_COMP_AREA_WEIGHT into LS_COMP_AREA_WEIGHT.
    clear: LS_WDRYW, LS_WDRYA, LS_ABLAG, LS_ABLAN, LS_ABLAS, LS_WNEPP.

*** Get Weight of Component AS
    if LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT is bound and
       LS_COMP_AREA_WEIGHT-R_PR_COMP_AS     is bound.


      if LS_COMP_AREA_WEIGHT-R_PR_COMP_AS->GET_FCSFG( ) eq ABAP_TRUE.
        LS_ABLAN = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_ABLAN( ).
        move LS_ABLAN-ABLAN     to LS_WDRYA-WDRYA.
        move LS_ABLAN-ABLAN_UOM to LS_WDRYA-WDRYA_UOM.
      else.
***     Get Component Area
        case ABAP_TRUE.
          when IF_ABLAG.
            LS_ABLAG = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_ABLAG( ).
            move LS_ABLAG-ABLAG     to LS_WDRYA-WDRYA.
            move LS_ABLAG-ABLAG_UOM to LS_WDRYA-WDRYA_UOM.

          when IF_ABLAS.
            LS_ABLAS = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_ABLAS( ).
            move LS_ABLAS-ABLAS     to LS_WDRYA-WDRYA.
            move LS_ABLAS-ABLAS_UOM to LS_WDRYA-WDRYA_UOM.

          when IF_ABLAN.
            LS_ABLAN = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_ABLAN( ).
            move LS_ABLAN-ABLAN     to LS_WDRYA-WDRYA.
            move LS_ABLAN-ABLAN_UOM to LS_WDRYA-WDRYA_UOM.

          when others.
            LS_ABLAN = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_ABLAN( ).
            move LS_ABLAN-ABLAN     to LS_WDRYA-WDRYA.
            move LS_ABLAN-ABLAN_UOM to LS_WDRYA-WDRYA_UOM.

        endcase.
      endif.

      check LS_WDRYA is not initial.
      LS_WDRYW = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_WDRYW( IS_WDRYA = LS_WDRYA ).
      LS_WDRYW-WDRYW = LS_WDRYW-WDRYW * LS_COMP_AREA_WEIGHT-R_PR_COMP_AS->GET_COMPR( ).

*** Get Weight of Component SFG
    elseif LS_COMP_AREA_WEIGHT-R_PR_COMP_SFG is bound.
      LS_WNEPP = LS_COMP_AREA_WEIGHT-R_PR_COMP_SFG->GET_WNEPP( ).
      move LS_WNEPP-WNEPP     to LS_WDRYW-WDRYW.
      move LS_WNEPP-WNEPP_UOM to LS_WDRYW-WDRYW_UOM.
      LS_WDRYW-WDRYW = LS_WDRYW-WDRYW * LS_COMP_AREA_WEIGHT-R_PR_COMP_SFG->GET_COMPR( ).

    else.
      continue.
    endif.


    if RS_WDRYW-WDRYW_UOM is initial.
      move LS_WDRYW to RS_WDRYW.
    else.
      if LS_WDRYW-WDRYW_UOM is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_WDRYW-WDRYW
                                                            IF_CALCV_UOM_1 = RS_WDRYW-WDRYW_UOM
                                                            IF_CALCV_2     = LS_WDRYW-WDRYW
                                                            IF_CALCV_UOM_2 = LS_WDRYW-WDRYW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_WDRYW-WDRYW_UOM
                                                  importing EF_CALCV       = RS_WDRYW-WDRYW
                                                            EF_CALCV_UOM   = RS_WDRYW-WDRYW_UOM ).
      endif.
    endif.
  endloop.

  check IS_WDRYA is supplied.
*** Get NetBlank Area in Requested format
  LS_ABLAN = ME->GET_ABLAN( ).
  ZCL_VCXI_XCS_SERVICE_UNIT=>CONVERT_UNIT( exporting IF_UOM_OUT   = IS_WDRYA-WDRYA_UOM
                                                     IF_UOM_IN    = LS_ABLAN-ABLAN_UOM
                                                     IF_VALUE_IN  = LS_ABLAN-ABLAN
                                           importing EF_VALUE_OUT = LS_ABLAN-ABLAN
                                                     EF_UOM_OUT   = LS_ABLAN-ABLAN_UOM ).

*** Calculate Weight depending on Required Weight
  RS_WDRYW-WDRYW = ( RS_WDRYW-WDRYW / LS_ABLAN-ABLAN ) * IS_WDRYA-WDRYA.

endmethod.
method GET_WWETW_COMP.

  data:  LS_COMP_AREA_WEIGHT   type        YS_COMP_AREA_WEIGHT,
         LS_WWETW              type        ZVCXI_P0SS_S_WWETW,
         LS_WDRYW              type        ZVCXI_P0SS_S_WDRYW,
         LS_WWETA              type        ZVCXI_P0SS_S_WWETA,
         LS_WDRYA              type        ZVCXI_P0SS_S_WDRYA,
         LS_WNEPP              type        ZVCXI_P0SS_S_WNEPP,
         LS_ABLAG              type        ZVCXI_P0SS_S_ABLAG,
         LS_ABLAN              type        ZVCXI_P0SS_S_ABLAN,
         LS_ABLAS              type        ZVCXI_P0SS_S_ABLAS.
  data:  LT_COMP_AREA_WEIGHT   type        YT_COMP_AREA_WEIGHT.

***------------------------------------------------------------------------------------------------
*** Get Componets with Area&Weight
  LT_COMP_AREA_WEIGHT = ME->GET_COMP_AREA_WEIGHT( ).

***------------------------------------------------------------------------------------------------
  loop at LT_COMP_AREA_WEIGHT into LS_COMP_AREA_WEIGHT.
    clear: LS_WWETW, LS_WDRYW, LS_WWETA, LS_WDRYA, LS_WNEPP, LS_ABLAG, LS_ABLAN, LS_ABLAS.

*** Get Weight of Component AS
    if LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT is bound and
       LS_COMP_AREA_WEIGHT-R_PR_COMP_AS     is bound.

      if LS_COMP_AREA_WEIGHT-R_PR_COMP_AS->GET_FCSFG( ) eq ABAP_TRUE.
        LS_ABLAN = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_ABLAN( ).
        move LS_ABLAN-ABLAN     to LS_WDRYA-WDRYA.
        move LS_ABLAN-ABLAN_UOM to LS_WDRYA-WDRYA_UOM.

        check LS_WDRYA is not initial.
        LS_WDRYW = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_WDRYW( IS_WDRYA = LS_WDRYA ).
        LS_WWETW-WWETW     = LS_WDRYW-WDRYW.
        LS_WWETW-WWETW_UOM = LS_WDRYW-WDRYW_UOM.
      else.
***     Get Component Area
        case ABAP_TRUE.
          when IF_ABLAG.
            LS_ABLAG = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_ABLAG( ).
            move LS_ABLAG-ABLAG     to LS_WWETA-WWETA.
            move LS_ABLAG-ABLAG_UOM to LS_WWETA-WWETA_UOM.

          when IF_ABLAS.
            LS_ABLAS = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_ABLAS( ).
            move LS_ABLAS-ABLAS     to LS_WWETA-WWETA.
            move LS_ABLAS-ABLAS_UOM to LS_WWETA-WWETA_UOM.

          when IF_ABLAN.
            LS_ABLAN = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_ABLAN( ).
            move LS_ABLAN-ABLAN     to LS_WWETA-WWETA.
            move LS_ABLAN-ABLAN_UOM to LS_WWETA-WWETA_UOM.

        endcase.

        check LS_WWETA is not initial.
        LS_WWETW = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_WWETW( IS_WWETA = LS_WWETA ).
      endif.

      LS_WWETW-WWETW = LS_WWETW-WWETW * LS_COMP_AREA_WEIGHT-R_PR_COMP_AS->GET_COMPR( ).

*** Get Weight of Component SFG
    elseif LS_COMP_AREA_WEIGHT-R_PR_COMP_SFG is bound.
      LS_WNEPP = LS_COMP_AREA_WEIGHT-R_PR_COMP_SFG->GET_WNEPP( ).
      move LS_WNEPP-WNEPP     to LS_WWETW-WWETW.
      move LS_WNEPP-WNEPP_UOM to LS_WWETW-WWETW_UOM.
      LS_WWETW-WWETW = LS_WWETW-WWETW * LS_COMP_AREA_WEIGHT-R_PR_COMP_SFG->GET_COMPR( ).

    else.
      continue.
    endif.

    if RS_WWETW-WWETW_UOM is initial.
      move LS_WWETW to RS_WWETW.
    else.
      if LS_WWETW-WWETW_UOM is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = RS_WWETW-WWETW
                                                            IF_CALCV_UOM_1 = RS_WWETW-WWETW_UOM
                                                            IF_CALCV_2     = LS_WWETW-WWETW
                                                            IF_CALCV_UOM_2 = LS_WWETW-WWETW_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = RS_WWETW-WWETW_UOM
                                                  importing EF_CALCV       = RS_WWETW-WWETW
                                                            EF_CALCV_UOM   = RS_WWETW-WWETW_UOM ).
      endif.
    endif.
  endloop.

endmethod.
method HANDLE_EVENT.

  SUPER->HANDLE_EVENT( IF_IEVNT         = IF_IEVNT
                       IT_GATE_PROVIDER = IT_GATE_PROVIDER ).

  case IF_IEVNT.
    when C_IEVNT_I_RECALC_ACOWA.
      ME->HANDLE_RECALC_ACOWA( ).

  endcase.

endmethod.
method HANDLE_INIT_REFERENCES.

*** No fixed References

endmethod.
method HANDLE_RECALC_ACOWA.

  data:  LS_COMP_AREA_WEIGHT   type        YS_COMP_AREA_WEIGHT,
         LS_ACOWA              type        ZVCXI_P0SS_S_ACOWA,
         LS_ACOWA_AS           type        ZVCXI_P0SS_S_ACOWA.
  data:  LT_COMP_AREA_WEIGHT   type        YT_COMP_AREA_WEIGHT.

  LS_ACOWA_AS = ME->GET_ACOWA( ).
  clear: LS_ACOWA_AS-ACOWA.

***------------------------------------------------------------------------------------------------
*** Get Componets with Area&Weight
  LT_COMP_AREA_WEIGHT = ME->GET_COMP_AREA_WEIGHT( ).

***------------------------------------------------------------------------------------------------
  loop at LT_COMP_AREA_WEIGHT into LS_COMP_AREA_WEIGHT.
    check LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT           is bound and
          LS_COMP_AREA_WEIGHT-R_PR_COMP_AS               is bound and
          LS_COMP_AREA_WEIGHT-R_PR_COMP_AS->GET_FCSFG( ) ne ABAP_TRUE.

*** Get Component Cut Out Waste
    LS_ACOWA = LS_COMP_AREA_WEIGHT-R_PR_AREA_WEIGHT->GET_ACOWA( ).

*** Multiply with Component ratio
    LS_ACOWA-ACOWA = LS_ACOWA-ACOWA * LS_COMP_AREA_WEIGHT-R_PR_COMP_AS->GET_COMPR( ).

*** Sum Up
    if LS_ACOWA_AS-ACOWA_UOM is initial.
      move LS_ACOWA to LS_ACOWA_AS.
    else.
      if LS_ACOWA_AS-ACOWA_UOM is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LS_ACOWA_AS-ACOWA
                                                            IF_CALCV_UOM_1 = LS_ACOWA_AS-ACOWA_UOM
                                                            IF_CALCV_2     = LS_ACOWA-ACOWA
                                                            IF_CALCV_UOM_2 = LS_ACOWA-ACOWA_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_ADD
                                                            IF_UOM         = LS_ACOWA_AS-ACOWA_UOM
                                                  importing EF_CALCV       = LS_ACOWA_AS-ACOWA
                                                            EF_CALCV_UOM   = LS_ACOWA_AS-ACOWA_UOM ).
      endif.
    endif.
  endloop.

  ME->SET_ACOWA( IS_ACOWA = LS_ACOWA_AS ).

endmethod.
method HANDLE_RECALC_WASTE.

  data: LS_CUWAS   type ZVCXI_P0SS_S_CUWAS,
        LS_ACOWA   type ZVCXI_P0SS_S_ACOWA,
        LS_WDRYW   type ZVCXI_P0SS_S_WDRYW,
        LS_WDRYA   type ZVCXI_P0SS_S_WDRYA.

*** Get Customer Waste
  LS_CUWAS = ME->GET_CUWAS( ).

*** Get Cut Out Waste Area
  LS_ACOWA = ME->GET_ACOWA( ).

  LS_WDRYA-WDRYA     = LS_ACOWA-ACOWA.
  LS_WDRYA-WDRYA_UOM = LS_ACOWA-ACOWA_UOM.

*** Get Dry Weight per Cut Out Waste Area
  LS_WDRYW = ME->GET_WDRYW_COMP( IS_WDRYA = LS_WDRYA ).

  LS_CUWAS-CUWAS     = LS_WDRYW-WDRYW.
  LS_CUWAS-CUWAS_UOM = LS_WDRYW-WDRYW_UOM.

*** Set Customer Waste (Weight)
  ME->SET_CUWAS( IS_CUWAS = LS_CUWAS ).

endmethod.
method HANDLE_RECALC_WDRYW.

  data: LS_WDRNP     type ZVCXI_P0SS_S_WDRNP,
        LS_WDRNO     type ZVCXI_P0SS_S_WDRNO,
        LS_WDRYW     type ZVCXI_P0SS_S_WDRYW,
        LS_OPQTY     type /VCXI/VSMR_S_OPQTY.

*** Net Weight's
*** 1. Step: Set Dry Weight per Piece
*** Get Net Dry Weight per Net Blank Area
  LS_WDRYW = ME->GET_WDRYW_COMP( IF_ABLAN = ABAP_TRUE ).

  LS_WDRNP-WDRNP     = LS_WDRYW-WDRYW.
  LS_WDRNP-WDRNP_UOM = LS_WDRYW-WDRYW_UOM.

*** Make sure we do not have a negative value
  if LS_WDRNP-WDRNP < 0.
    move 0 to LS_WDRNP-WDRNP.
  endif.

*** Set Net Dry Weight per Piece
  ME->SET_WDRNP( IS_WDRNP = LS_WDRNP ).

*** 2. Step: Set Dry Weight per Order
  LS_WDRNO = ME->GET_WDRNO( ).

***   Get Operation Quantity
  LS_OPQTY = ME->GET_OPQTY( ).

  if LS_WDRNP-WDRNP > 0.
*** Get Net Dry Weight per Order
    LS_WDRNO-WDRNO = LS_OPQTY-OPQTY * LS_WDRNP-WDRNP.
  else.
    move 0 to LS_WDRNO-WDRNO.
  endif.

*** Set Net Dry Weight per Order
  ME->SET_WDRNO( IS_WDRNO = LS_WDRNO ).

*** Cacl/Set Sold Dry Weight per Piece/Order
  ME->CALC_WDRSP( ).
  ME->CALC_WDRSO( IS_OPQTY = LS_OPQTY ).

*** Cacl/Set Gross Dry Weight per Piece/Order
  ME->CALC_WDRGP( ).
  ME->CALC_WDRGO( IS_OPQTY = LS_OPQTY ).

endmethod.
method HANDLE_RECALC_WWETW.

  data: LS_WWENP     type ZVCXI_P0SS_S_WWENP,
        LS_WWENO     type ZVCXI_P0SS_S_WWENO,
        LS_WWETW     type ZVCXI_P0SS_S_WWETW,
        LS_OPQTY     type /VCXI/VSMR_S_OPQTY.

*** Net Weight's
*** 1. Step: Set Wet Weight per Piece
*** Get Wet Weight per Net Blank Area
  LS_WWETW = ME->GET_WWETW_COMP( IF_ABLAN = ABAP_TRUE ).

  LS_WWENP-WWENP     = LS_WWETW-WWETW.
  LS_WWENP-WWENP_UOM = LS_WWETW-WWETW_UOM.

*** Make sure we do not have a negative value
  if LS_WWENP-WWENP < 0.
    move 0 to LS_WWENP-WWENP.
  endif.

*** Set Net Wet Weight per Piece
  ME->SET_WWENP( IS_WWENP = LS_WWENP ).

*** 2. Step: Wet Weight per Order
  LS_WWENO = ME->GET_WWENO( ).

*** Get Operation Quantity
  LS_OPQTY = ME->GET_OPQTY( ).

*** Make sure we do not have a negative value
  if LS_WWENP-WWENP > 0.
    LS_WWENO-WWENO = LS_OPQTY-OPQTY * LS_WWENP-WWENP.
  else.
    move 0 to LS_WWENO-WWENO.
  endif.

*** Set Net Wet Weight per Order
  ME->SET_WWENO( IS_WWENO = LS_WWENO ).

*** Cacl/Set Sold Dry Weight per Piece/Order
  ME->CALC_WWESP( ).
  ME->CALC_WWESO( IS_OPQTY = LS_OPQTY ).

*** Cacl/Set Gross Dry Weight per Piece/Order
  ME->CALC_WWEGP( ).
  ME->CALC_WWEGO( IS_OPQTY = LS_OPQTY ).

endmethod.
