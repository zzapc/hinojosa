
class ZCL_VCXI_P3SS_UI_FDMDL definition
  public
  inheriting from ZCL_VCXI_PXSS_UI_FDMDL
  create public .

public section.

  interfaces /VCXI/IF_VKSU_UIFW .

  data S_FDMDL_VIS type ZVCXI_P3SS_S_FDMDL_VIS read-only .

  methods ACTIVATE
    redefinition .
  methods DEACTIVATE
    redefinition .
  methods DO_PBO
    redefinition .
  methods DO_UPDATE_FDMDL_VIS
    redefinition .
  methods DO_USER_COMMAND
    redefinition .
  methods GET_ACTIVE_TAB
    redefinition .
  methods GET_REGISTERED_UCOMM
    redefinition .
  methods GET_TAB_DYNP
    redefinition .
  methods DO_MODIFY_SCREEN
    redefinition .
protected section.

  class-data R_BL_FDMDL_XPART type ref to ZCL_VCXI_PXSS_BL_FDMDL .
  data R_UI_FDMDL_XPART type ref to ZCL_VCXI_PXSS_UI_FDMDL .

  methods GET_GATE_EXCLUDE
    importing
      !IT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP
    returning
      value(RT_GATE) type /VCXI/VKSR_TT_GATE
    raising
      /VCXI/CX_CKX .
  methods GET_MENU_ADD
    returning
      value(RR_MENU) type ref to CL_CTMENU
    raising
      /VCXI/CX_CKX .
  methods OPEN_SUBSCREEN
    importing
      !IR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL
    returning
      value(RR_UI_FDMDL) type ref to ZCL_VCXI_PXSS_UI_FDMDL
    raising
      /VCXI/CX_CKX .
  methods MODIFY_SCREEN_AFG
    changing
      !CS_SCREEN type SCREEN
    raising
      /VCXI/CX_CKX .
  methods HANDLE_MENU_BUTTON
    for event DROPDOWN_CLICKED of CL_GUI_TOOLBAR
    importing
      !FCODE
      !POSX
      !POSY .

  methods HANDLE_UC_ADD
    redefinition .
  methods HANDLE_UC_DEL
    redefinition .
  methods HANDLE_UC_TAB
    redefinition .
  methods INIT_TAB_LIST
    redefinition .
  methods INIT_TOOLBAR
    redefinition .
  methods INIT_VIS
    redefinition .
private section.

  data R_GRID_JOINT type ref to ZCL_VCXI_PXSS_GRID_JOINT .
endclass. "ZCL_VCXI_P3SS_UI_FDMDL definition
class ZCL_VCXI_P3SS_UI_FDMDL implementation.
  method /VCXI/IF_VKSU_UIFW~DO_MODIFY_SCREEN.

    if ME->R_UI_FDMDL_XPART is bound.
      ME->R_UI_FDMDL_XPART->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                              IF_DYNNR = IF_DYNNR ).
    endif.

  endmethod.
  method /VCXI/IF_VKSU_UIFW~DO_USER_COMMAND.

    data:  LR_CX_CKX type ref to /VCXI/CX_CKX.

    try.
        if ME->R_UI_FDMDL_XPART is bound.
          ME->R_UI_FDMDL_XPART->DO_USER_COMMAND( IF_UCOMM = CF_UCOMM ).
        endif.

      catch /VCXI/CX_CKX into LR_CX_CKX.
        LR_CX_CKX->SHOW_MESSAGE( ).
    endtry.

  endmethod.
  method /VCXI/IF_VKSU_UIFW~REFRESH_SCREEN.

    ME->R_UIFW->REFRESH_SCREEN( ).

  endmethod.
  method /VCXI/IF_VKSU_UIFW~REGISTER_UI.

    do.
      if ME->R_UI_FDMDL_XPART is not bound.
        exit.
      endif.
      ME->R_UI_FDMDL_XPART->DEACTIVATE( ).
    enddo.

    move IR_UI ?to ME->R_UI_FDMDL_XPART.

  endmethod.
  method /VCXI/IF_VKSU_UIFW~UNREGISTER_UI.

    if IR_UI eq ME->R_UI_FDMDL_XPART.
      clear ME->R_UI_FDMDL_XPART.
    endif.

  endmethod.
  method ACTIVATE.

    SUPER->ACTIVATE( ).

***--------------------------------------------------------------------------------------
*** Bind UI to Dynpro
    call function 'ZVCXI_P3SS_UI_FDMDL_BIND'
      exporting
        IR_UI_FDMDL   = ME
      importing
        ES_DYNP       = ME->S_DYNP
        ES_DYNP_BLANK = ME->S_DYNP_BLANK.

*** Evaluate active Part
    if not LINE_EXISTS( ME->R_BL_FDMDL->T_BL_FDMDL_SUB[ TABLE_LINE = ME->R_BL_FDMDL_XPART ] ).
      if ME->R_BL_FDMDL_XPART is bound.
        ME->R_BL_FDMDL_XPART = value #( ME->R_BL_FDMDL->T_BL_FDMDL_SUB[ TABLE_LINE->T_GATE_OUT = ME->R_BL_FDMDL_XPART->T_GATE_OUT ]
                                        default value #( ME->R_BL_FDMDL->T_BL_FDMDL_SUB[ 1 ] optional ) ).
      else.
        ME->R_BL_FDMDL_XPART = value #( ME->R_BL_FDMDL->T_BL_FDMDL_SUB[ 1 ] optional ).
      endif.
    endif.

***--------------------------------------------------------------------------------------
*** Create Grid for Joint
    create object ME->R_GRID_JOINT
      exporting
        IR_GATE           = cast ZCL_VCXI_P3SS_BL_FDMDL( ME->R_BL_FDMDL )->R_GATE_CSTEP_ASMBL
        IR_UIGATE         = ME->R_UIGATE
        IF_CONTAINER_NAME = '0100CC_GRID_JOINT'
        IF_APPL_EVENTS    = ME->F_APPL_EVENTS.

  endmethod.
  method DEACTIVATE.

*** Call SUPER
    SUPER->DEACTIVATE( ).

*** Deactivate Tab
    if ME->R_UI_FDMDL_XPART is bound.
      ME->R_UI_FDMDL_XPART->DEACTIVATE( ).
    endif.

*** Free Grid
    if ME->R_GRID_JOINT is bound.
      ME->R_GRID_JOINT->DO_FREE( ).
      clear ME->R_GRID_JOINT.
    endif.

  endmethod.
  method DO_MODIFY_SCREEN.

    data: LF_LOCKED type /VCXI/CKX_LOCKED,
          LF_INUSE  type /VCXI/VKSR_INUSE,
          LF_CADLS  type ZVCXI_PXS_CADLS.


    try.
        SUPER->DO_MODIFY_SCREEN( IF_REPID = IF_REPID
                                 IF_DYNNR = IF_DYNNR ).

***------------------------------------------------------------------------------------------------
        LF_LOCKED = ME->R_GATE->IS_LOCKED( ).
        LF_INUSE  = ME->R_GATE->IS_INUSE( ).

***     Modify Screen using DynamicVC
        ZCL_VCXI_XCDR_SERVICE=>MODIFY_SCREEN( IR_GATE = ME->R_GATE ).

***     Get CAD Lock Status
        LF_CADLS = ME->R_PR_FASTD->GET_CADLS( ).

***------------------------------------------------------------------------------------------------
        loop at screen.
***       Lock everything if not in change mode
          if LF_LOCKED ne ABAP_TRUE or
             LF_INUSE  ne ABAP_TRUE.
            move 0 to SCREEN-INPUT.
          endif.

          case SCREEN-GROUP1.
***         Finished Good Information
            when 'AFG'.
              ME->MODIFY_SCREEN_AFG( changing  CS_SCREEN = SCREEN ).

          endcase.

***       Adjust based on CAD Lock Status
          if SCREEN-GROUP4 eq 'CAD' and
             ( LF_CADLS eq ZCL_VCXI_PXSS_PR_CADIF_PRJ=>C_CADLS_REVISION or
               LF_CADLS eq ZCL_VCXI_PXSS_PR_CADIF_PRJ=>C_CADLS_LOCKED ).
            move 0 to SCREEN-INPUT.
          endif.

***       Reopen Info Buttons and Tabs
          if SCREEN-GROUP1 eq 'INF' or
             SCREEN-NAME cs ME->F_TABPT.
            move 1 to SCREEN-INPUT.
          endif.
          modify screen.

***       Set Cursor
          if SCREEN-NAME eq ME->F_CURSOR.
            set cursor field ME->F_CURSOR.
          endif.
        endloop.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method DO_PBO.

    check ME->R_GATE_OUT is bound and
          ME->R_GATE_OUT->F_FREED is initial.

    SUPER->DO_PBO( ).

*** Toolbar for Parts
    ME->INIT_CONTAINER( IF_CONTAINER_NAME = '0100CC_TOOLBAR_XPART' ).
    ME->INIT_TOOLBAR( ).

*** Open Subscreen
    if ME->R_UI_FDMDL_XPART is not bound or
       ( ME->R_UI_FDMDL_XPART is bound and
         ME->R_UI_FDMDL_XPART->R_BL_FDMDL ne ME->R_BL_FDMDL_XPART ).
      ME->OPEN_SUBSCREEN( IR_BL_FDMDL = ME->R_BL_FDMDL_XPART ).
    endif.

*** Refresh Joint Grid
    if ME->R_GRID_JOINT is bound.
      ME->R_GRID_JOINT->F_REFRESH_REQ = ABAP_TRUE.
      ME->R_GRID_JOINT->REFRESH_GRID( ).
    endif.

  endmethod.
  method DO_UPDATE_FDMDL_VIS.

    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.
    field-symbols: <S_DATA>             type ANY,
                   <S_FASTD_XCOMP>      type ZVCXI_PXSS_S_FASTD_XCOMP,
                   <S_FASTD_XCOMP_DATA> type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.

    check ME->R_PR_FASTD is bound.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = ME->R_BL_FDMDL ).

*** Define Gates related to Parts that should be excluded
    LT_GATE_EXCLUDE = ME->GET_GATE_EXCLUDE( IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Update Fast Data Integration Information based on VIS Structure
    loop at LT_FASTD_XCOMP assigning <S_FASTD_XCOMP>.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP>-R_GATE ] ).

      loop at <S_FASTD_XCOMP>-T_DATA assigning <S_FASTD_XCOMP_DATA> where R_DATA is bound.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = <S_FASTD_XCOMP_DATA>-R_GATE ] ).
        ME->MAPPING_FROM_VIS( exporting IS_FDMDL_VIS        = IS_FDMDL_VIS
                              changing  CS_FASTD_XCOMP_DATA = <S_FASTD_XCOMP_DATA> ).
      endloop.
    endloop.

***------------------------------------------------------------------------------------------------
*** Set Configuration Structure
    ME->R_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME->R_BL_FDMDL
                                          IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

  endmethod.
  method DO_USER_COMMAND.

    data:  LF_UCOMM      type SYUCOMM.


***--------------------------------------------------------------------------------------
*** Process Changes in Grid
    if ME->R_GRID_JOINT is bound.
      ME->R_GRID_JOINT->CHECK_CHANGED_DATA( ).
    endif.

***--------------------------------------------------------------------------------------
*** Call SUPER
    SUPER->DO_USER_COMMAND( IF_UCOMM = IF_UCOMM ).

    move IF_UCOMM to LF_UCOMM.
    ME->/VCXI/IF_VKSU_UIFW~DO_USER_COMMAND( changing CF_UCOMM = LF_UCOMM ).

  endmethod.
  method GET_ACTIVE_TAB.

    data: LR_GATE type ref to /VCXI/CL_VKSR_GATE.

    check ME->R_BL_FDMDL_XPART is bound.
    LR_GATE = value #( ME->R_BL_FDMDL_XPART->T_GATE_OUT[ 1 ] optional ).
    check LR_GATE is bound.
    RF_TABNAME = value #( ME->T_TAB_LIST[ R_GATE = LR_GATE ]-TABNAME optional ).

  endmethod.
  method GET_GATE_EXCLUDE.

    data: LR_GATE_XCOMP_OUT type ref to /VCXI/CL_VKSR_GATE,
          LR_BL_FDMDL       type ref to ZCL_VCXI_PXSS_BL_FDMDL,
          LR_GATE           type ref to /VCXI/CL_VKSR_GATE.


    LR_GATE_XCOMP_OUT = ME->R_BL_FDMDL->R_BL_FASTD->GET_XCOMP_BY_DATA( IR_GATE_DATA   = ME->R_BL_FDMDL->T_GATE_OUT[ 1 ]
                                                                       IT_FASTD_XCOMP = IT_FASTD_XCOMP ).
    loop at ME->R_BL_FDMDL->GET_SUB_BL_FDMDL( IF_DEPTH = -1 ) into LR_BL_FDMDL.
      loop at LR_BL_FDMDL->T_GATE_XCOMP into LR_GATE where TABLE_LINE ne LR_GATE_XCOMP_OUT.
        append LR_GATE to RT_GATE.
      endloop.
      append lines of LR_BL_FDMDL->T_GATE_OUT to RT_GATE.
    endloop.

  endmethod.
  method GET_MENU_ADD.

    data: LS_PRVDR_DEF type /VCXI/VKSR_S_PRVDR_DEF,
          LS_FDMV      type ZVCXI_PXSS_S_FDMV.
    data: LT_PRVDR_DEF type /VCXI/VKSR_TT_PRVDR_DEF.
    data: LR_MENU type ref to CL_CTMENU.


    check ZCL_VCXI_PXSS_BL_FDMDL=>T_FDMV is not initial.

*** Get Provider Definitions
    LT_PRVDR_DEF = ME->R_GATE->GET_PRVDR_DEF( IF_IPRVT = ZCL_VCXI_PXSS_PR_XPART=>C_IPRVT_PX_XPART ).
    check LT_PRVDR_DEF is not initial.

*** Create DropDown Menu
    create object RR_MENU.

***--------------------------------------------------------------------------------------
*** Multiple different Parts
    if LINES( LT_PRVDR_DEF ) gt 1.
      sort LT_PRVDR_DEF by DESCR.
      loop at LT_PRVDR_DEF into LS_PRVDR_DEF.
***     Create Submenu
        create object LR_MENU.
        RR_MENU->ADD_SUBMENU( MENU = LR_MENU
                              TEXT = conv #( LS_PRVDR_DEF-DESCR ) ).

***     Add Function for all Variants
        loop at ZCL_VCXI_PXSS_BL_FDMDL=>T_FDMV into LS_FDMV
                                              where FDMDL eq LS_PRVDR_DEF-ID.
          LR_MENU->ADD_FUNCTION( FCODE = C_FCODE_ADD && '@' && LS_FDMV-FDMDL && '@' && LS_FDMV-IFDMV
                                 TEXT  = conv #( LS_FDMV-DESCR ) ).
        endloop.
      endloop.

***--------------------------------------------------------------------------------------
*** Single Finished Good
    else.
***   Add Function for all Variants
      loop at ZCL_VCXI_PXSS_BL_FDMDL=>T_FDMV into LS_FDMV
                                            where FDMDL eq LT_PRVDR_DEF[ 1 ]-ID.
        RR_MENU->ADD_FUNCTION( FCODE = C_FCODE_ADD && '@' && LS_FDMV-FDMDL && '@' && LS_FDMV-IFDMV
                               TEXT  = conv #( LS_FDMV-DESCR ) ).
      endloop.
    endif.

  endmethod.
  method GET_REGISTERED_UCOMM.

    check ME->R_UI_FDMDL_XPART is bound.

*** Registered User Commands for Subscreen processing
    RT_UCOMM = ME->R_UI_FDMDL_XPART->GET_REGISTERED_UCOMM( ).

    append C_UC_FOVRR_MAKTX to RT_UCOMM.

  endmethod.
  method GET_TAB_DYNP.

    if ME->R_UI_FDMDL_XPART is bound and
       ME->R_UI_FDMDL_XPART->S_DYNP-REPID is not initial and
       ME->R_UI_FDMDL_XPART->S_DYNP-DYNNR is not initial.
***   Get Screen Info of active Part
      RS_DYNP = ME->R_UI_FDMDL_XPART->S_DYNP.
    else.
      RS_DYNP = ME->S_DYNP_BLANK.
    endif.

  endmethod.
  method HANDLE_MENU_BUTTON.

    data: LR_MENU type ref to CL_CTMENU.


    try.
        case FCODE.
          when C_FCODE_ADD.
            LR_MENU = ME->GET_MENU_ADD( ).

        endcase.

***--------------------------------------------------------------------------------------
***     Show DropDown Menu
        if LR_MENU is bound.
          ME->R_TOOLBAR->TRACK_CONTEXT_MENU( CONTEXT_MENU = LR_MENU
                                             POSX         = POSX
                                             POSY         = POSY ).
        endif.

      catch /VCXI/CX_CKX into data(LR_CX_CKX).
        ME->R_GATE->ADD_MESSAGE_BY_CX_CKX( IR_CX_CKX = LR_CX_CKX ).
    endtry.

  endmethod.
  method HANDLE_UC_ADD.

    data: LF_FDMDL type ZVCXI_PXSS_FDMDL,
          LF_IFDMV type ZVCXI_PXSS_IFDMV.
    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_XCONG       type ZVCXI_PXSS_TT_XCONG.


*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( exporting IR_BL_FDMDL = ME->R_BL_FDMDL
                                                           importing ET_XCONG    = LT_XCONG ).

*** Add Part
    split IF_UCOMM at '@' into data(DUMMY) LF_FDMDL LF_IFDMV.
    ME->R_BL_FDMDL->ADD_SUB_BL_FDMDL( exporting IF_FDMDL       = LF_FDMDL
                                                IF_IFDMV       = LF_IFDMV
                                      changing  CT_FASTD_XCOMP = LT_FASTD_XCOMP
                                                CT_XCONG       = LT_XCONG ).

*** Set Configuration Structure
    ME->R_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME->R_BL_FDMDL
                                          IT_FASTD_XCOMP = LT_FASTD_XCOMP
                                          IT_XCONG       = LT_XCONG ).

  endmethod.
  method HANDLE_UC_DEL.

    data: LT_FASTD_XCOMP type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_XCONG       type ZVCXI_PXSS_TT_XCONG.


*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( exporting IR_BL_FDMDL = ME->R_BL_FDMDL
                                                           importing ET_XCONG    = LT_XCONG ).

*** Delete Part
    ME->R_BL_FDMDL->DEL_SUB_BL_FDMDL( exporting IR_BL_FDMDL_SUB = ME->R_BL_FDMDL_XPART
                                      changing  CT_FASTD_XCOMP  = LT_FASTD_XCOMP
                                                CT_XCONG        = LT_XCONG ).

*** Set Configuration Structure
    ME->R_BL_FDMDL->R_BL_FASTD->SET_STRC( IR_BL_FDMDL    = ME->R_BL_FDMDL
                                          IT_FASTD_XCOMP = LT_FASTD_XCOMP
                                          IT_XCONG       = LT_XCONG ).

  endmethod.
  method HANDLE_UC_TAB.

    data: LR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL.


    loop at ME->R_BL_FDMDL->T_BL_FDMDL_SUB into LR_BL_FDMDL.
      if LR_BL_FDMDL->T_GATE_OUT[ 1 ] eq value #( ME->T_TAB_LIST[ TABNAME = IF_UCOMM ]-R_GATE optional ).
        ME->R_BL_FDMDL_XPART = LR_BL_FDMDL.
      endif.
    endloop.

  endmethod.
  method INIT_TAB_LIST.

    data: LF_TAB  type NUMC3,
          LF_ICON type ICON_D.
    data: LR_BL_FDMDL type ref to ZCL_VCXI_PXSS_BL_FDMDL,
          LR_GATE     type ref to /VCXI/CL_VKSR_GATE.
    field-symbols: <F_DESCR> type /VCXI/CKX_DESCR.


    free: ME->T_TAB_LIST,
          ME->S_TAB_DESCR.

***----------------------------------------------------------------------------
*** Process Part Gates
    loop at ME->R_BL_FDMDL->T_BL_FDMDL_SUB into LR_BL_FDMDL.
      LR_GATE = LR_BL_FDMDL->T_GATE_OUT[ 1 ].

      check LR_GATE->R_CLSPR is instance of ZCL_VCXI_PXSS_PR_XPART.

      add 1 to LF_TAB.
      append value #( TABNAME = ME->F_TABPT && LF_TAB
                      R_GATE  = LR_GATE
                    ) to ME->T_TAB_LIST .

      assign component SUBSTRING_AFTER( VAL = ME->F_TABPT SUB = '-' ) && LF_TAB of structure ME->S_TAB_DESCR to <F_DESCR>.
      if SY-SUBRC eq 0.
        if LR_GATE->R_CLSPR is bound.
          <F_DESCR> = LR_GATE->R_CLSPR->GET_DESCR( ).
        else.
          <F_DESCR> = LR_GATE->GET_DESCR( ).
        endif.
      endif.

***   Get Status Icon
      LR_BL_FDMDL->GET_STATUS( exporting IR_GATE_OUT = LR_GATE
                               importing EF_ICON     = LF_ICON ).

***   Enrich Description with Icon
      <F_DESCR> = |{ LF_ICON } { <F_DESCR> }|.
    endloop.


*** Evaluate active Part
    if not LINE_EXISTS( ME->R_BL_FDMDL->T_BL_FDMDL_SUB[ TABLE_LINE = ME->R_BL_FDMDL_XPART ] ).
      if ME->R_BL_FDMDL_XPART is bound.
        ME->R_BL_FDMDL_XPART = value #( ME->R_BL_FDMDL->T_BL_FDMDL_SUB[ TABLE_LINE->T_GATE_OUT = ME->R_BL_FDMDL_XPART->T_GATE_OUT ]
                                        default value #( ME->R_BL_FDMDL->T_BL_FDMDL_SUB[ 1 ] optional ) ).
      else.
        ME->R_BL_FDMDL_XPART = value #( ME->R_BL_FDMDL->T_BL_FDMDL_SUB[ 1 ] optional ).
      endif.
    endif.

  endmethod.
  method INIT_TOOLBAR.

    data: LF_LOCKED         type /VCXI/CKX_LOCKED,
          LF_INUSE          type /VCXI/VKSR_INUSE,
          LF_DISABLED       type ABAP_BOOL,
          LF_HIDDE_MULTIQTY type ABAP_BOOL.
    data: LT_EVENT  type CNTL_SIMPLE_EVENTS,
          LT_BTNGRP type TTB_BUTTON.
    field-symbols: <S_EVENT>      type        CNTL_SIMPLE_EVENT.


***--------------------------------------------------------------------------------------
    if ME->R_TOOLBAR is not bound.
***   Create Toolbar
      create object ME->R_TOOLBAR
        exporting
          PARENT             = ME->R_CONTAINER
        exceptions
          CNTL_INSTALL_ERROR = 1
          CNTL_ERROR         = 2
          CNTB_WRONG_VERSION = 3
          others             = 4.
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Registered Events
      append initial line to LT_EVENT assigning <S_EVENT>.
      move CL_GUI_TOOLBAR=>M_ID_FUNCTION_SELECTED  to <S_EVENT>-EVENTID.
      move ME->F_APPL_EVENTS                       to <S_EVENT>-APPL_EVENT.

      append initial line to LT_EVENT assigning <S_EVENT>.
      move CL_GUI_TOOLBAR=>M_ID_DROPDOWN_CLICKED   to <S_EVENT>-EVENTID.
      move ME->F_APPL_EVENTS                       to <S_EVENT>-APPL_EVENT.

      ME->R_TOOLBAR->SET_REGISTERED_EVENTS( exporting  EVENTS = LT_EVENT
                                            exceptions others = 9 ).
      if SY-SUBRC ne 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

***   Set Event Handler
      set handler ME->HANDLE_TOOLBAR_FCODE for ME->R_TOOLBAR.
      set handler ME->HANDLE_MENU_BUTTON   for ME->R_TOOLBAR.

    endif.

***--------------------------------------------------------------------------------------
*** Remove all Buttons to start fresh
    ME->R_TOOLBAR->DELETE_ALL_BUTTONS( exceptions others = 9 ).
    if SY-SUBRC ne 0.
      /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
    endif.

*** Get Lock and In-Use Status
    if ME->R_GATE->IS_LOCKED( ) ne ABAP_TRUE.
      LF_DISABLED = ABAP_TRUE.
    endif.

*** Add Buttons to add and remove Fast Data Models
    ME->R_TOOLBAR->ADD_BUTTON_GROUP( exporting DATA_TABLE = value #( ( FUNCTION  = C_FCODE_ADD
                                                                       ICON      = ICON_INSERT_ROW
                                                                       BUTN_TYPE = CNTB_BTYPE_MENU
                                                                       DISABLED  = LF_DISABLED
                                                                       TEXT      = 'Add'(F01) )
                                                                     ( FUNCTION  = C_FCODE_DEL
                                                                       ICON      = ICON_DELETE_ROW
                                                                       BUTN_TYPE = CNTB_BTYPE_BUTTON
                                                                       DISABLED  = LF_DISABLED
                                                                       TEXT      = 'Delete'(F02) )
                                                                     ( BUTN_TYPE = CNTB_BTYPE_SEP )
                                                                   )
                                     exceptions others = 0 ).

  endmethod.
  method INIT_VIS.

    data: LS_FASTD_XCOMP      type ZVCXI_PXSS_S_FASTD_XCOMP,
          LS_FASTD_XCOMP_DATA type ZVCXI_PXSS_S_FASTD_XCOMP_DATA.
    data: LT_FASTD_XCOMP  type ZVCXI_PXSS_TT_FASTD_XCOMP,
          LT_GATE_EXCLUDE type /VCXI/VKSR_TT_GATE.


    free: ME->S_FDMDL_VIS.
    check ME->R_PR_FASTD is bound.

***------------------------------------------------------------------------------------------------
*** Get Configuration Structure
    LT_FASTD_XCOMP = ME->R_BL_FDMDL->R_BL_FASTD->GET_STRC( IR_BL_FDMDL = ME->R_BL_FDMDL ).

*** Define Gates related to Parts that should be excluded
    LT_GATE_EXCLUDE = ME->GET_GATE_EXCLUDE( IT_FASTD_XCOMP = LT_FASTD_XCOMP ).

*** Fill VIS Structure based on Fast Data Integration Information
    loop at LT_FASTD_XCOMP into LS_FASTD_XCOMP.
      check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP-R_GATE ] ).

      loop at LS_FASTD_XCOMP-T_DATA into LS_FASTD_XCOMP_DATA where R_DATA is bound.
        check not LINE_EXISTS( LT_GATE_EXCLUDE[ TABLE_LINE = LS_FASTD_XCOMP_DATA-R_GATE ] ).
        ME->MAPPING_TO_VIS( exporting IS_FASTD_XCOMP_DATA = LS_FASTD_XCOMP_DATA
                            changing  CS_FDMDL_VIS        = ME->S_FDMDL_VIS ).
      endloop.
    endloop.

  endmethod.
  method MODIFY_SCREEN_AFG.

*** Hide Material Description Override Flag if undefined
    if CS_SCREEN-NAME cp '*-FOVRR_MAKTX' and
       ME->S_FDMDL_VIS-FOVRR_MAKTX eq ABAP_UNDEFINED.
      CS_SCREEN-ACTIVE = 0.
    endif.
*** Disable Material Description if generated
    if CS_SCREEN-NAME cp '*-MAKTX' and
       ME->S_FDMDL_VIS-FOVRR_MAKTX eq ABAP_FALSE.
      move 0 to SCREEN-INPUT.
    endif.

*** Hide Component Ratio
    if CS_SCREEN-NAME cp '*-COMPR' and
       ME->S_FDMDL_VIS-COMPR_ALLOWED ne ABAP_TRUE.
      CS_SCREEN-ACTIVE = 0.
    endif.

*** Hide Customer Material Info if material exists
    if CS_SCREEN-GROUP2 = 'CMI' and
       ME->S_FDMDL_VIS-MATNR is not initial.
      CS_SCREEN-INPUT  = 0.
      CS_SCREEN-ACTIVE = 0.
    endif.

  endmethod.
  method OPEN_SUBSCREEN.

    data: LF_CLSUI  type /VCXI/VKSC_CLSUI.
    data: LT_UCOMM  type table of SYUCOMM.


*** Get UI class name of Fast Data Model
    if IR_BL_FDMDL is bound.
      LF_CLSUI = IR_BL_FDMDL->GET_CLSUI( ).
    endif.

    if LF_CLSUI is not initial.
      try.
***       Create Subscreen
          create object RR_UI_FDMDL
            type
              (LF_CLSUI)
            exporting
              IR_UIFW        = ME
              IR_UIGATE      = ME->R_UIGATE
              IR_GATE        = ME->R_GATE
              IR_BL_FDMDL    = IR_BL_FDMDL
              IF_APPL_EVENTS = ME->F_APPL_EVENTS
              IR_GATE_OUT    = IR_BL_FDMDL->T_GATE_OUT[ 1 ].
        catch CX_SY_CREATE_OBJECT_ERROR into data(LR_CX_SY_CREATE_OBJECT_ERROR).
          /VCXI/CX_CKX=>RAISE_CKX_BY_PREVIOUS( LR_CX_SY_CREATE_OBJECT_ERROR ).
      endtry.

      RR_UI_FDMDL->ACTIVATE( ).

    else.
***   Clear Subscreen
      if ME->R_UI_FDMDL_XPART is bound.
        ME->R_UI_FDMDL_XPART->DEACTIVATE( ).
      endif.
    endif.

  endmethod.
