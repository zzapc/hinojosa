
class ZCL_VCXI_PXSR_BL_PRTE definition
  public
  inheriting from ZCL_VCXI_XCSR_BL_PRTE
  create public .

public section.

  data T_RHNDL_OUT type ZVCXI_PXSR_TT_RHNDL read-only .

  methods SET_MFRAT
    importing
      !IF_MFRAT type ZVCXI_XCSP_MFRAT
    raising
      /VCXI/CX_CKX .
  methods GET_RHNDL_IN
    returning
      value(RT_RHNDL_IN) type ZVCXI_PXSR_TT_RHNDL
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIR_BY_RTE_ARBPL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    returning
      value(RF_PCDIR) type ZVCXI_P0SP_PCDIR
    raising
      /VCXI/CX_CKX .
  methods SET_RHNDL_OUT
    importing
      !IT_RHNDL_OUT type ZVCXI_PXSR_TT_RHNDL
    raising
      /VCXI/CX_CKX .
  methods SET_PCDIR_OF_MFI
    importing
      !IF_PCDIR type ZVCXI_P0SP_PCDIR
    raising
      /VCXI/CX_CKX .
  methods UPDATE_RHNDL
    raising
      /VCXI/CX_CKX .

  methods CHECK
    redefinition .
  methods COMPARE
    redefinition .
  methods CONVERT_TO_MQTYO
    redefinition .
  methods COPY
    redefinition .
protected section.

  data F_MFRAT type ZVCXI_XCSP_MFRAT .

  methods CHECK_PCDIR
    raising
      /VCXI/CX_CKX .
  methods CONV_RHNDL_OUT_TO_IN
    importing
      !IT_RHNDL_OUT type ZVCXI_PXSR_TT_RHNDL
    returning
      value(RT_RHNDL_IN) type ZVCXI_PXSR_TT_RHNDL
    raising
      /VCXI/CX_CKX .
  methods GET_PCDIM_BY_RTE_ARBPL
    importing
      !IR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL
    exporting
      !ET_PCDIM_IN type ZVCXI_P0SP_TT_PCDIM
      !ET_PCDIM_OUT type ZVCXI_P0SP_TT_PCDIM
    raising
      /VCXI/CX_CKX .
  methods TURN_PCDIM
    importing
      !IS_PCDIM type ZVCXI_P0SP_S_PCDIM
      !IF_PCDIR type ZVCXI_P0SP_PCDIR
    returning
      value(RS_PCDIM) type ZVCXI_P0SP_S_PCDIM
    raising
      /VCXI/CX_CKX .
  methods GET_XML_DREF
    returning
      value(RT_DATA) type ABAP_TRANS_SRCBIND_TAB
    raising
      /VCXI/CX_CKX .

  methods CONV_MQTYO_TO_MQTYI
    redefinition .
  methods DESERIALIZE_INFO
    redefinition .
  methods GET_FEATURE
    redefinition .
  methods ROUND_MQTYI
    redefinition .
  methods SERIALIZE_INFO
    redefinition .
private section.
endclass. "ZCL_VCXI_PXSR_BL_PRTE definition
class ZCL_VCXI_PXSR_BL_PRTE implementation.
  method CHECK.

    SUPER->CHECK( ).

***--------------------------------------------------------------------------------------
*** Check uncompatible Sheet Directions
    ME->CHECK_PCDIR( ).

***--------------------------------------------------------------------------------------
*** Set Status
    if ME->R_RTE_PRTE->GET_MSG( IF_MSGTY_S = ABAP_FALSE
                                IF_MSGTY_I = ABAP_FALSE ) is initial.
      move /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_VALID   to ME->R_RTE_PRTE->F_RSTAT.
    else.
      move /VCXI/CL_VSMR_RTE_PRTE=>C_RSTAT_INVALID to ME->R_RTE_PRTE->F_RSTAT.
    endif.

  endmethod.
  method CHECK_PCDIR.

    data: LR_RTE_ARBPL  type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP  type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_PCDIR_CURR type ref to ZIF_VCXI_PXSR_PCDIR,
          LR_PCDIR_PREV type ref to ZIF_VCXI_PXSR_PCDIR,
          LR_CX_CKX     type ref to /VCXI/CX_CKX.
    field-symbols: <S_MSG> type /VCXI/CKXM_S_MSG.


    loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

***--------------------------------------------------------------------------------------
***   Check Mandatory PC Direction
      try.
          ME->GET_PCDIR_BY_RTE_ARBPL( IR_RTE_ARBPL = LR_RTE_ARBPL ).
        catch /VCXI/CX_CKX into LR_CX_CKX.
***       Add Message
          append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
          move LR_CX_CKX->F_MSGTY to <S_MSG>-MSGTY.
          move LR_CX_CKX->F_MSGID to <S_MSG>-MSGID.
          move LR_CX_CKX->F_MSGNO to <S_MSG>-MSGNO.
          move LR_CX_CKX->F_MSGV1 to <S_MSG>-MSGV1.
          move LR_CX_CKX->F_MSGV2 to <S_MSG>-MSGV2.
          move LR_CX_CKX->F_MSGV3 to <S_MSG>-MSGV3.
          move LR_CX_CKX->F_MSGV4 to <S_MSG>-MSGV4.
      endtry.

***--------------------------------------------------------------------------------------
***   Check PC Direction are the same
      clear LR_PCDIR_PREV.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR_CURR.
            check LR_PCDIR_CURR is bound.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.

        if LR_PCDIR_CURR->F_PCDIR is initial.
***       PC Directions needs to be specified.
          append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
          move 'E'           to <S_MSG>-MSGTY.
          move 'ZVCXI_PXSR'  to <S_MSG>-MSGID.
          move '001'         to <S_MSG>-MSGNO.
        endif.

        if LR_PCDIR_PREV is bound and
           LR_PCDIR_PREV->F_PCDIR ne LR_PCDIR_CURR->F_PCDIR.
***       Different PC Directions on the same Work Center are not allowed.
          append initial line to LR_RTE_ARBPL->T_MSG assigning <S_MSG>.
          move 'E'           to <S_MSG>-MSGTY.
          move 'ZVCXI_PXSR'  to <S_MSG>-MSGID.
          move '002'         to <S_MSG>-MSGNO.
        endif.

        move LR_PCDIR_CURR to LR_PCDIR_PREV.
      endloop.
    endloop.

  endmethod.
  method COMPARE.

    check IR_BL_PRTE is bound.

***--------------------------------------------------------------------------------------
*** Check same Roll Handling Information
    check ME->T_RHNDL_OUT eq cast ZCL_VCXI_PXSR_BL_PRTE( IR_BL_PRTE )->T_RHNDL_OUT.

***--------------------------------------------------------------------------------------
*** Perform Super-Compare
    RF_SIMILAR = SUPER->COMPARE( IR_BL_PRTE = IR_BL_PRTE ).

  endmethod.
  method CONV_MQTYO_TO_MQTYI.

    data: LF_NOOUT_OUT type        ZVCXI_XCS_NOOUT,
          LF_PCUPS_OUT type        ZVCXI_P0SP_PCUPS,
          LF_PCUPS_IN  type        ZVCXI_P0SP_PCUPS.
    data: LS_MQTYO     type        ZVCXI_XCSP_S_MQTYO,
          LS_PCDIM_OUT type        ZVCXI_P0SP_S_PCDIM,
          LS_PCDIM_IN  type        ZVCXI_P0SP_S_PCDIM,
          LS_AREADIM   type        ZVCXI_P0SP_S_AREADIM.
    data: LT_PCDIM_IN  type        ZVCXI_P0SP_TT_PCDIM,
          LT_PCDIM_OUT type        ZVCXI_P0SP_TT_PCDIM,
          LT_AREADIM   type        ZVCXI_P0SP_TT_AREADIM.
    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_CONV_ATP  type ref to ZIF_VCXI_PXSR_CONV_ATP.


*** "cast" Machine Quantity Out
    LS_MQTYO = value #( MQTYO     = CS_CALCV-CALCV
                        MQTYO_UOM = CS_CALCV-CALCV_UOM ).

***--------------------------------------------------------------------------------------
*** Get PC Dimension
    ME->GET_PCDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                                importing ET_PCDIM_IN  = LT_PCDIM_IN
                                          ET_PCDIM_OUT = LT_PCDIM_OUT ).

*** Collect Ups of all Dimension Outs (MFMO are suppressed by PCUPS = 0)
    loop at LT_PCDIM_OUT into LS_PCDIM_OUT where PCUPS ne 0.
      add LS_PCDIM_OUT-NOOUT to LF_NOOUT_OUT.
      add LS_PCDIM_OUT-PCUPS to LF_PCUPS_OUT.
    endloop.
    check SY-SUBRC eq 0.

***----------------------------------------------------------------------------
*** Convert PC Dimension Out to PC Dimensions In
    if LT_PCDIM_IN is not initial.
***   Logic "No MFO"
      if LINES( LT_PCDIM_OUT ) eq 0.
        CS_CALCV-CALCV = 0.

***   Logic "Single MFO"
      elseif LINES( LT_PCDIM_OUT ) eq 1.
***     Get PC Ups of Flow In
        loop at LT_PCDIM_IN into LS_PCDIM_IN.
***       Take maximum PC
          if LS_PCDIM_IN-PCUPS gt LF_PCUPS_IN.
            move LS_PCDIM_IN-PCUPS to LF_PCUPS_IN.
          endif.
        endloop.
        check LF_PCUPS_IN is not initial.

***     Convert it to Machine Quantity In using Ups Ratio (Due to S&U)
        CS_CALCV-CALCV = LS_MQTYO-MQTYO * LF_PCUPS_OUT / LF_PCUPS_IN.

***     Convert PC to Length
        loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP
                                          where TABLE_LINE->R_BLOBJ is instance of ZIF_VCXI_PXSR_CONV_LTP.
        endloop.
        if SY-SUBRC eq 0.
          CS_CALCV-CALCV     = CEIL( CS_CALCV-CALCV ) * LT_PCDIM_IN[ 1 ]-PCLEN.
          CS_CALCV-CALCV_UOM = LT_PCDIM_IN[ 1 ]-PCLEN_UOM.
        endif.

***   Logic "Multiple MFO"
      else.
        check LF_NOOUT_OUT is not initial.
***     Convert it to Machine Quantity In using the Total Out
        CS_CALCV-CALCV = LS_MQTYO-MQTYO / LF_NOOUT_OUT.
      endif.

***   Round to PC Type In
      ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LT_PCDIM_IN[ 1 ]-PCTYP
                                                  changing CF_VALUE = CS_CALCV-CALCV ).

***--------------------------------------------------------------------------------------
*** Convert PC to Area (or Length)
    else.
      loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_CONV_ATP.
            check LR_CONV_ATP is bound.

            LT_AREADIM = LR_CONV_ATP->CONV_PC_TO_AREA( IT_PCDIM = LT_PCDIM_OUT ).
            exit.
          catch CX_SY_MOVE_CAST_ERROR.
            continue.
        endtry.
      endloop.

      if LT_AREADIM is not initial.
        read table LT_AREADIM into LS_AREADIM index 1.
        if SY-SUBRC eq 0.
          if LS_AREADIM-PCUPS is not initial.
            CS_CALCV-CALCV     = ( LS_MQTYO-MQTYO * LF_PCUPS_OUT / LF_NOOUT_OUT  ) * ( LS_AREADIM-PCARE / LS_AREADIM-PCUPS ).
          else.
            CS_CALCV-CALCV     = 0.
          endif.
          CS_CALCV-CALCV_UOM = LS_AREADIM-PCARE_UOM.
        endif.

      else.
***     Convert PC to Length
        loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP
                                          where TABLE_LINE->R_BLOBJ is instance of ZIF_VCXI_PXSR_CONV_LTP.
        endloop.
        if SY-SUBRC eq 0.
          if LF_NOOUT_OUT ne 0.
            CS_CALCV-CALCV   = CEIL( LS_MQTYO-MQTYO / LF_NOOUT_OUT ) * LS_PCDIM_OUT-PCLEN.
          else.
            CS_CALCV-CALCV   = 0.
          endif.
          CS_CALCV-CALCV_UOM = LS_PCDIM_OUT-PCLEN_UOM.
        endif.
      endif.
    endif.

  endmethod.
  method CONV_RHNDL_OUT_TO_IN.

    data: LS_RHNDL type ZVCXI_PXSR_S_RHNDL.


***--------------------------------------------------------------------------------------
*** Return only one inbound Roll Handling based on outbound
    read table IT_RHNDL_OUT into LS_RHNDL index 1.

*** Default based on turned values
    move ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT to LS_RHNDL-S_RHSRC-RHSWI.

***--------------------------------------------------------------------------------------
*** Get Previous Winding Direction
    case LS_RHNDL-WIDIR.
      when 'L'.                        "Left   -> Right
        move 'R' to LS_RHNDL-WIDIR.
      when 'R'.                        "Right  -> Left
        move 'L' to LS_RHNDL-WIDIR.
      when 'T'.                        "Top    -> Bottom
        move 'B' to LS_RHNDL-WIDIR.
      when 'B'.                        "Bottom -> Top
        move 'T' to LS_RHNDL-WIDIR.
    endcase.

*** Get Previous Eyemark Position
    case LS_RHNDL-EYEMP.
      when 'L'.                        "Left   -> Right
        move 'R' to LS_RHNDL-EYEMP.
      when 'R'.                        "Right  -> Left
        move 'L' to LS_RHNDL-EYEMP.
      when 'B'.                        "Both   -> Both
      when 'C'.                        "Center -> Center
    endcase.

*** Default Roll Target Diameter
    LS_RHNDL-S_RHSRC-RHSDI = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT.
    LS_RHNDL-RDMTA = 'D'.    "Diameter
    clear: LS_RHNDL-S_RDITA-RDITA,
           LS_RHNDL-S_RLETA-RLETA,
           LS_RHNDL-S_RWGTA-RWGTA.

*** Request default of Core
    LS_RHNDL-S_RHSRC-RHSCO = ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_DEFAULT.
    clear: LS_RHNDL-S_MS_CORE.

*** Single Out during backwarding
    move 1 to LS_RHNDL-NOOUT.

***--------------------------------------------------------------------------------------
*** Return singel entry
    append LS_RHNDL to RT_RHNDL_IN.

  endmethod.
  method CONVERT_TO_MQTYO.

    data: LF_PCUPS_OUT type ZVCXI_P0SP_PCUPS,
          LF_NOOUT     type ZVCXI_XCS_NOOUT.
    data: LT_PCDIM_OUT type ZVCXI_P0SP_TT_PCDIM.

***--------------------------------------------------------------------------------
*** Get PC Dimension
    ME->GET_PCDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                                importing ET_PCDIM_OUT = LT_PCDIM_OUT ).

*** Ignore Dimension Outs of MFMO (suppressed by PCUPS = 0)
    delete LT_PCDIM_OUT where PCUPS = 0.

*** Collect Ups/Outs of all PC Dimension Out
    LF_PCUPS_OUT = reduce #( init PCUPS_OUT = 0 for LS_PCDIM_OUT in LT_PCDIM_OUT next PCUPS_OUT = PCUPS_OUT + ( LS_PCDIM_OUT-PCUPS * LS_PCDIM_OUT-NOOUT ) ).
    LF_NOOUT =  reduce #( init NOOUT = 0 for LS_PCDIM_OUT in LT_PCDIM_OUT next NOOUT += LS_PCDIM_OUT-NOOUT ).

*** Calculate
    if LF_PCUPS_OUT is not initial.
      CS_CALCV-CALCV = conv ZVCXI_XCSP_MQTYO( CS_CALCV-CALCV / LF_PCUPS_OUT * LF_NOOUT * ME->F_MFRAT ).
      ZCL_VCXI_P0SP_CUST_PCTYP=>GET_ROUND_PCTYP( exporting IF_PCTYP = LT_PCDIM_OUT[ 1 ]-PCTYP
                                                 changing  CF_VALUE = CS_CALCV-CALCV ).
    else.
      clear CS_CALCV-CALCV.
    endif.

  endmethod.
  method COPY.

    RR_BL_PRTE = SUPER->COPY( ).

***--------------------------------------------------------------------------------------
*** Copy Roll Handling Information
    cast ZCL_VCXI_PXSR_BL_PRTE( RR_BL_PRTE )->T_RHNDL_OUT = ME->T_RHNDL_OUT.

*** Copy Material Flow Ratio
    cast ZCL_VCXI_PXSR_BL_PRTE( RR_BL_PRTE )->SET_MFRAT( IF_MFRAT = ME->F_MFRAT ).

  endmethod.
  method DESERIALIZE_INFO.

    data: LF_XML         type STRING.
    data: LT_DATA        type ABAP_TRANS_SRCBIND_TAB.


    check IF_XML is not initial.

***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).
    append value #( NAME = 'SUPER_XML'   VALUE = ref #( LF_XML ) ) to LT_DATA.

*** Deserialize
    call transformation ID
         source xml IF_XML
         result (LT_DATA).

    if LF_XML is initial.
      LF_XML = IF_XML.  "Backward compatibility
    endif.

***--------------------------------------------------------------------------------------
*** Super Deserialize other Information
    SUPER->DESERIALIZE_INFO( IF_XML = LF_XML ).

  endmethod.
  method GET_FEATURE.

    data: LF_RATIO type F.
    data: LT_PCDIM_IN  type ZVCXI_P0SP_TT_PCDIM,
          LT_PCDIM_OUT type ZVCXI_P0SP_TT_PCDIM.


*** Get Super Features
    RT_FEATURE = SUPER->GET_FEATURE( IR_RTE_CMACH = IR_RTE_CMACH
                                     IR_RTE_ARBPL = IR_RTE_ARBPL  ).


***------------------------------------------------------------------------------------------------
*** Get PC Dimension
    ME->GET_PCDIM_BY_RTE_ARBPL( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                                importing ET_PCDIM_IN  = LT_PCDIM_IN
                                          ET_PCDIM_OUT = LT_PCDIM_OUT ).

*** PC Dimension In
    if LINES( LT_PCDIM_IN ) eq 1.
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimInLength'     FTVAL = LT_PCDIM_IN[ 1 ]-PCLEN )
                                        changing  CT_FEATURE = RT_FEATURE ).
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimInWidth'      FTVAL = LT_PCDIM_IN[ 1 ]-PCWID )
                                        changing  CT_FEATURE = RT_FEATURE ).
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimInHeight'     FTVAL = LT_PCDIM_IN[ 1 ]-PCHEI )
                                        changing  CT_FEATURE = RT_FEATURE ).

      if LT_PCDIM_IN[ 1 ]-PCLEN is not initial and
         LT_PCDIM_IN[ 1 ]-PCWID is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LT_PCDIM_IN[ 1 ]-PCLEN
                                                            IF_CALCV_UOM_1 = LT_PCDIM_IN[ 1 ]-PCLEN_UOM
                                                            IF_CALCV_2     = LT_PCDIM_IN[ 1 ]-PCWID
                                                            IF_CALCV_UOM_2 = LT_PCDIM_IN[ 1 ]-PCWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                  importing EF_CALCV       = LF_RATIO ).
      else.
        clear LF_RATIO.
      endif.
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimInRatio'      FTVAL = LF_RATIO )
                                        changing  CT_FEATURE = RT_FEATURE ).
    endif.

*** PC Dimension Out
    if LINES( LT_PCDIM_OUT ) eq 1.
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutLength'     FTVAL = LT_PCDIM_OUT[ 1 ]-PCLEN )
                                        changing  CT_FEATURE = RT_FEATURE ).
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutWidth'      FTVAL = LT_PCDIM_OUT[ 1 ]-PCWID )
                                        changing  CT_FEATURE = RT_FEATURE ).
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutHeight'     FTVAL = LT_PCDIM_OUT[ 1 ]-PCHEI )
                                        changing  CT_FEATURE = RT_FEATURE ).
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutNumberOut'  FTVAL = LT_PCDIM_OUT[ 1 ]-NOOUT )
                                        changing  CT_FEATURE = RT_FEATURE ).

      if LT_PCDIM_OUT[ 1 ]-PCLEN is not initial and
         LT_PCDIM_OUT[ 1 ]-PCWID is not initial.
        ZCL_VCXI_XCS_SERVICE_CALC=>CALC_WITH_ANY( exporting IF_CALCV_1     = LT_PCDIM_OUT[ 1 ]-PCLEN
                                                            IF_CALCV_UOM_1 = LT_PCDIM_OUT[ 1 ]-PCLEN_UOM
                                                            IF_CALCV_2     = LT_PCDIM_OUT[ 1 ]-PCWID
                                                            IF_CALCV_UOM_2 = LT_PCDIM_OUT[ 1 ]-PCWID_UOM
                                                            IF_OPERA       = ZCL_VCXI_XCS_SERVICE_CALC=>C_OPERA_DIVIDE
                                                  importing EF_CALCV       = LF_RATIO ).
      else.
        clear LF_RATIO.
      endif.
      /VCXI/CL_CKI_IQC=>MODIFY_FEATURE( exporting IS_FEATURE = value #( FTNAM = 'pcDimOutRatio'      FTVAL = LF_RATIO )
                                        changing  CT_FEATURE = RT_FEATURE ).
    endif.

  endmethod.
method GET_PCDIM_BY_RTE_ARBPL.

  data: LT_PCDIM     type        ZVCXI_P0SP_TT_PCDIM.
  data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
        LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
        LR_ADJ_PCDIM type ref to ZIF_VCXI_PXSR_ADJ_PCDIM.
  field-symbols: <T_MFMI>  type standard table,
                 <T_MFSI>  type standard table,
                 <S_MFMI>  type          ANY,
                 <S_MFSI>  type          ANY,
                 <S_PCDIM> type          ZVCXI_P0SP_S_PCDIM.


  free: ET_PCDIM_IN,
        ET_PCDIM_OUT.

***--------------------------------------------------------------------------------------
*** Material Flow Material In Dimensions
  if ME->R_MFMI is bound.
    assign ME->R_MFMI->* to <T_MFMI>.

    loop at <T_MFMI> assigning <S_MFMI>.
      append initial line to LT_PCDIM assigning <S_PCDIM>.
      move-corresponding <S_MFMI> to <S_PCDIM>.
    endloop.
  endif.

***--------------------------------------------------------------------------------------
*** Material Flow SFG In Dimensions
  if ME->R_MFSI is bound.
    assign ME->R_MFSI->* to <T_MFSI>.

    loop at <T_MFSI> assigning <S_MFSI>.
      append initial line to LT_PCDIM assigning <S_PCDIM>.
      move-corresponding <S_MFSI> to <S_PCDIM>.
    endloop.
  endif.

*** Forward Processing of PC Dimension Changes
  loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.

***----------------------------------------------------------------------------
*** Reset Number of Outs on next Work Center
    loop at LT_PCDIM assigning <S_PCDIM>.
      move 1 to <S_PCDIM>-NOOUT.
    endloop.

***--------------------------------------------------------------------------------------
*** Adjust PC Dimension IN
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_ADJ_PCDIM.
          check LR_ADJ_PCDIM is bound.

          LR_ADJ_PCDIM->CALC_PCDIM_IN( changing CT_PCDIM = LT_PCDIM ).
          if LT_PCDIM is not initial.
            exit. " Only first Production Step inluences PC Dimensions In
          endif.
        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

*** Keep PC Dimension In at requested Work Center
    if LR_RTE_ARBPL eq IR_RTE_ARBPL.
      move LT_PCDIM to ET_PCDIM_IN.
    endif.

***--------------------------------------------------------------------------------------
*** Calculate PC Out
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_ADJ_PCDIM.
          check LR_ADJ_PCDIM is bound.

          LR_ADJ_PCDIM->CALC_PCDIM_OUT( changing CT_PCDIM = LT_PCDIM ).

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

*** Stop calculating at requested Work Center
    if LR_RTE_ARBPL eq IR_RTE_ARBPL.
      move LT_PCDIM to ET_PCDIM_OUT.
      exit.
    endif.
  endloop.

endmethod.
  method GET_PCDIR_BY_RTE_ARBPL.

    data:  LF_PCDIR_MANDATORY  type        ABAP_BOOL.
    data: LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_PCDIR     type ref to ZIF_VCXI_PXSR_PCDIR.

    loop at IR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
      try.
          move LR_RTE_PSTEP->R_BLOBJ ?to LR_PCDIR.
          check LR_PCDIR is bound.

          if LR_PCDIR->F_PCDOP eq ZIF_VCXI_PXSR_PCDIR=>C_PCDOP_MANDATORY.
            if LF_PCDIR_MANDATORY ne ABAP_TRUE.
              move ABAP_TRUE         to LF_PCDIR_MANDATORY.
              move LR_PCDIR->F_PCDIR to RF_PCDIR.
            else.
              if RF_PCDIR ne LR_PCDIR->F_PCDIR.

***             Mandatory PC Directions are not compatible.
                /VCXI/CX_CKX=>RAISE_CKX_WITH_MESSAGE( IF_MSGTY = 'E'
                                                      IF_MSGID = 'ZVCXI_PXSR'
                                                      IF_MSGNO = '003' ).

              endif.
            endif.
          endif.

***       If no Mandatory
          if LF_PCDIR_MANDATORY ne ABAP_TRUE and
             RF_PCDIR           is initial.
            move LR_PCDIR->F_PCDIR to RF_PCDIR.
          endif.

        catch CX_SY_MOVE_CAST_ERROR.
          continue.
      endtry.
    endloop.

  endmethod.
  method GET_RHNDL_IN.

    data: LR_RTE_ARBPL type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP type ref to /VCXI/CL_VSMR_RTE_PSTEP.


    check ME->R_RTE_PRTE is bound.


*** Fallback: Roll Handling Out
    RT_RHNDL_IN = ME->T_RHNDL_OUT.

***--------------------------------------------------------------------------------------
*** Get first Work Center
    read table ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL index 1.
    check SY-SUBRC eq 0.

***--------------------------------------------------------------------------------------
*** Get Information of first Production Step with Roll Handling
    loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP
                                      where TABLE_LINE->R_BLOBJ is instance of ZIF_VCXI_PXSR_RHNDL.
***   Adjust Outbound to Inbound
      RT_RHNDL_IN = ME->CONV_RHNDL_OUT_TO_IN( IT_RHNDL_OUT = cast ZIF_VCXI_PXSR_RHNDL( LR_RTE_PSTEP->R_BLOBJ )->T_RHNDL ).
      exit.
    endloop.

  endmethod.
  method GET_XML_DREF.

***--------------------------------------------------------------------------------------
*** Roll Handling
    append value #( NAME = 'T_RHNDL_OUT'   VALUE = ref #( ME->T_RHNDL_OUT ) ) to RT_DATA.

  endmethod.
  method ROUND_MQTYI.

    data:  LF_DIMID type DIMID.

    SUPER->ROUND_MQTYI( exporting IR_RTE_ARBPL = IR_RTE_ARBPL
                        changing  CS_CALCV     = CS_CALCV ).

*** In Case of PC adjust upwards
*** Get Dimensions of Unit
    if CS_CALCV-CALCV_UOM is not initial.
      call function 'DIMENSION_GET_FOR_UNIT'
        exporting
          UNIT           = CS_CALCV-CALCV_UOM
        importing
          DIMENSION      = LF_DIMID
        exceptions
          UNIT_NOT_FOUND = 1
          others         = 2.
      if SY-SUBRC <> 0.
        /VCXI/CX_CKX=>RAISE_CKX_BY_SY( ).
      endif.

      if LF_DIMID eq 'AAAADL'.
        CS_CALCV-CALCV = CEIL( CS_CALCV-CALCV ).
      endif.
    endif.

  endmethod.
  method SERIALIZE_INFO.

    data: LT_DATA type ABAP_TRANS_SRCBIND_TAB.


***--------------------------------------------------------------------------------------
*** Get Data References for XML Serialize/Deserialize
    LT_DATA = ME->GET_XML_DREF( ).

*** Super Serialize
    RF_XML = SUPER->SERIALIZE_INFO( ).
    append value #( NAME = 'SUPER_XML'  VALUE = ref #( RF_XML ) ) to LT_DATA.

*** Remove initial values for a smaller XML
    loop at LT_DATA into data(LS_DATA).
      assign LS_DATA-VALUE->* to field-symbol(<VALUE>).
      if SY-SUBRC eq 0 and <VALUE> is initial.
        delete LT_DATA.
      endif.
    endloop.

***--------------------------------------------------------------------------------------
*** Serialize to XML
    call transformation ID
         source (LT_DATA)
         result xml RF_XML.

  endmethod.
  method SET_MFRAT.

    ME->F_MFRAT = IF_MFRAT.

  endmethod.
  method SET_PCDIR_OF_MFI.

    data: LS_PCDIM type ZVCXI_P0SP_S_PCDIM.
    field-symbols: <T_MFMI> type standard table,
                   <T_MFSI> type standard table,
                   <S_MFMI> type          ANY,
                   <S_MFSI> type          ANY.

***----------------------------------------------------------------------------
*** Material Flow Material In Dimensions
    if ME->R_MFMI is bound.
      assign ME->R_MFMI->* to <T_MFMI>.

      loop at <T_MFMI> assigning <S_MFMI>.
        move-corresponding <S_MFMI> to LS_PCDIM.
        LS_PCDIM = ME->TURN_PCDIM( IS_PCDIM = LS_PCDIM
                                   IF_PCDIR = IF_PCDIR ).
        move-corresponding LS_PCDIM to <S_MFMI>.
      endloop.
    endif.

***----------------------------------------------------------------------------
*** Material Flow SFG In Dimensions
    if ME->R_MFSI is bound.
      assign ME->R_MFSI->* to <T_MFSI>.

      loop at <T_MFSI> assigning <S_MFSI>.
        move-corresponding <S_MFSI> to LS_PCDIM.
        LS_PCDIM = ME->TURN_PCDIM( IS_PCDIM = LS_PCDIM
                                   IF_PCDIR = IF_PCDIR ).
        move-corresponding LS_PCDIM to <S_MFSI>.
      endloop.
    endif.

  endmethod.
  method SET_RHNDL_OUT.

    check IT_RHNDL_OUT ne ME->T_RHNDL_OUT.

*** Set new Roll Handling Information
    move IT_RHNDL_OUT to ME->T_RHNDL_OUT.

  endmethod.
method TURN_PCDIM.

*** Keep everything else
  move IS_PCDIM           to RS_PCDIM.

  if IF_PCDIR ne IS_PCDIM-PCDIR.

*** Set new Direction
    move IF_PCDIR           to RS_PCDIM-PCDIR.

*** Turn
    move IS_PCDIM-PCLEN     to RS_PCDIM-PCWID.
    move IS_PCDIM-PCLEN_UOM to RS_PCDIM-PCWID_UOM.

    move IS_PCDIM-PCWID     to RS_PCDIM-PCLEN.
    move IS_PCDIM-PCWID_UOM to RS_PCDIM-PCLEN_UOM.

  endif.

endmethod.
  method UPDATE_RHNDL.

    data: LF_INDEX_ARBPL type I,
          LF_INDEX_PSTEP type I.
    data: LS_RHNDL type ZVCXI_PXSR_S_RHNDL.
    data: LT_RTE_ARBPL type /VCXI/VSMR_TT_RTE_ARBPL,
          LT_RHNDL_OUT type ZVCXI_PXSR_TT_RHNDL,
          LT_RHNDL_IN  type ZVCXI_PXSR_TT_RHNDL,
          LT_RHNDL     type ZVCXI_PXSR_TT_RHNDL.
    data: LR_RTE_ARBPL   type ref to /VCXI/CL_VSMR_RTE_ARBPL,
          LR_RTE_PSTEP   type ref to /VCXI/CL_VSMR_RTE_PSTEP,
          LR_RHNDL       type ref to ZIF_VCXI_PXSR_RHNDL,
          LR_RHNDL_COMBO type ref to ZIF_VCXI_PXSR_RHNDL.
    field-symbols: <S_RHNDL>     type        ZVCXI_PXSR_S_RHNDL.


*** Collect only Work Center with Roll Handling
    loop at ME->R_RTE_PRTE->T_RTE_ARBPL into LR_RTE_ARBPL.
      loop at LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP.
        if LR_RTE_PSTEP->R_BLOBJ is instance of ZIF_VCXI_PXSR_RHNDL.
          append LR_RTE_ARBPL to LT_RTE_ARBPL.
          exit.
        endif.
      endloop.
    endloop.

***--------------------------------------------------------------------------------------
*** Prepare Backwards Calculation by setting last Work Center as starting point
    LF_INDEX_ARBPL = LINES( LT_RTE_ARBPL ).

*** Perform Backward Calculation
    do LINES( LT_RTE_ARBPL ) times.
      read table LT_RTE_ARBPL into LR_RTE_ARBPL index LF_INDEX_ARBPL.
      if SY-SUBRC ne 0.
        exit.
      endif.

***   Special Handling for last Work Center
      if LINES( LT_RTE_ARBPL ) eq LF_INDEX_ARBPL.
***     Last Operation receives outbound Roll Handling Information
        LT_RHNDL_OUT = ME->T_RHNDL_OUT.
      else.
***     Any other Operation receives inbound Roll Handling Information of "next" Operation
        LT_RHNDL_OUT = LT_RHNDL_IN.
      endif.

***--------------------------------------------------------------------------------------
***   Prepare Backwards Calculation by setting last Production Step as starting point
      move LINES( LR_RTE_ARBPL->T_RTE_PSTEP ) to LF_INDEX_PSTEP.

***   Perform Backward Calculation
      do LINES( LR_RTE_ARBPL->T_RTE_PSTEP ) times.
        read table LR_RTE_ARBPL->T_RTE_PSTEP into LR_RTE_PSTEP index LF_INDEX_PSTEP.
        if SY-SUBRC ne 0.
          exit.
        endif.

***     Check if Production Step supports Roll Handling
        try.
            move LR_RTE_PSTEP->R_BLOBJ ?to LR_RHNDL.
          catch CX_SY_MOVE_CAST_ERROR.
            clear LR_RHNDL.
        endtry.
        if LR_RHNDL is bound.
***       Get current values of Roll Handling
          move LR_RHNDL->T_RHNDL to LT_RHNDL.

***       Set backwarded Roll Handling Information
          if LINES( LT_RHNDL ) eq LINES( LT_RHNDL_OUT ).
***         Don't overwrite user changes if number of entries match
            loop at LT_RHNDL assigning <S_RHNDL>.
              read table LT_RHNDL_OUT into LS_RHNDL index SY-TABIX.
              if SY-SUBRC eq 0.
***             Update Core Information if not set by User
                if <S_RHNDL>-S_RHSRC-RHSCO ne ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
                  move LS_RHNDL-S_RHSRC-RHSCO to <S_RHNDL>-S_RHSRC-RHSCO.
                  move LS_RHNDL-S_MS_CORE     to <S_RHNDL>-S_MS_CORE.
                endif.

***             Update Dimensions Information if not set by User
                if <S_RHNDL>-S_RHSRC-RHSDI ne ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
                  move LS_RHNDL-S_RHSRC-RHSDI to <S_RHNDL>-S_RHSRC-RHSDI.
                  move LS_RHNDL-RDMTA         to <S_RHNDL>-RDMTA.
                  move LS_RHNDL-S_RDITA       to <S_RHNDL>-S_RDITA.
                  move LS_RHNDL-S_RLETA       to <S_RHNDL>-S_RLETA.
                  move LS_RHNDL-S_RWGTA       to <S_RHNDL>-S_RWGTA.
                endif.

***             Update Winding Information if not set by User
                if <S_RHNDL>-S_RHSRC-RHSWI ne ZIF_VCXI_FFSR_RHNDL=>C_RHSRC_USER.
                  move LS_RHNDL-S_RHSRC-RHSWI to <S_RHNDL>-S_RHSRC-RHSWI.
                  move LS_RHNDL-WISID         to <S_RHNDL>-WISID.
                  move LS_RHNDL-WIDIR         to <S_RHNDL>-WIDIR.
                  move LS_RHNDL-EYEMP         to <S_RHNDL>-EYEMP.
                endif.
              endif.
            endloop.
          else.
***         Overwrite at full if entries don't match
            move LT_RHNDL_OUT to LT_RHNDL.
          endif.
          LR_RHNDL->SET_RHNDL( IT_RHNDL     = LT_RHNDL
                               IR_RTE_ARBPL = LR_RTE_ARBPL ).

***       Keey current Roll Handling Information as outbound (for other Production Steps)
          LT_RHNDL_OUT = LT_RHNDL.

***       Special Handling for outbound Roll Handling of last Work Center
          if LINES( LR_RTE_ARBPL->T_RTE_PSTEP )   eq LF_INDEX_PSTEP and
             LINES( LT_RTE_ARBPL ) eq LF_INDEX_ARBPL.
***         Update outbound Roll Handling Information with updated Infos of Last Operation
            ME->SET_RHNDL_OUT( IT_RHNDL_OUT = LR_RHNDL->T_RHNDL ).
          endif.
        endif.

***     Go to previous Production Step
        subtract 1 from LF_INDEX_PSTEP.
      enddo.

***--------------------------------------------------------------------------------------
***   Convert outbound to inbound Roll Handling
      LT_RHNDL_IN = ME->CONV_RHNDL_OUT_TO_IN( IT_RHNDL_OUT = LT_RHNDL_OUT ).

***   Go to previous workcenter
      subtract 1 from LF_INDEX_ARBPL.
    enddo.

  endmethod.
